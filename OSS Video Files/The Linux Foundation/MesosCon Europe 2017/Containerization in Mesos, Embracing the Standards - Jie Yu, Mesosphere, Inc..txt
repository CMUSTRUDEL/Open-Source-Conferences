Title: Containerization in Mesos, Embracing the Standards - Jie Yu, Mesosphere, Inc.
Publication date: 2017-10-27
Playlist: MesosCon Europe 2017
Description: 
	Containerization in Mesos, Embracing the Standards - Jie Yu, Mesosphere, Inc.

Containers are now everywhere. Apache Mesos, as one of the most powerful container orchestrators, greatly simplifies the deploy, provision, and execution of containerized workloads. In this talk, Jie will talk about the evolution of container technology in Mesos. In particular, how Mesos embraces the industry standard for container networking, storage and image specification, and how Mesos achieves that by using a pluggable and extensible architecture. The first part of this talk will give you an overview of the container technology in Mesos and how it has evolved over the years. Then, we will dive into three specific areas in the container technology: networking, storage and image provisioning, and the three industry standards that Mesos is adopting: CNI (Container Network Interface), CSI (Container Storage Interface) and OCI (Open Container Initiative) image spec.

About Jie Yu
Jie Yu is a Tech Lead at Mesosphere, Inc, focused on containerization, storage and networking. Before joining Mesosphere, he was a software engineer at Twitter. Jie obtained his PhD in Computer Science and Engineering from the University of Michigan where he conducted research for concurrent and event-driven systems.
Captions: 
	00:00:00,030 --> 00:00:04,680
hello everyone so my name is jii thanks

00:00:02,700 --> 00:00:06,629
for the introduction so I'm currently

00:00:04,680 --> 00:00:08,880
attacked Lee and mesosphere right now

00:00:06,629 --> 00:00:13,679
I'm approaching my Tso's PMC and the

00:00:08,880 --> 00:00:16,320
community is 2013 so I'm mainly

00:00:13,679 --> 00:00:20,430
responsible for like containerization

00:00:16,320 --> 00:00:21,720
networking storage stuff enzyme ASOS

00:00:20,430 --> 00:00:23,699
yeah I've been maintaining the

00:00:21,720 --> 00:00:26,340
containerization part for quite a long

00:00:23,699 --> 00:00:28,289
time I used to work at Twitter I was a

00:00:26,340 --> 00:00:31,109
software engineer there and I gained my

00:00:28,289 --> 00:00:32,930
PhD from universe University of Michigan

00:00:31,109 --> 00:00:35,460
in 2013

00:00:32,930 --> 00:00:37,649
alright so this is the outline of my

00:00:35,460 --> 00:00:39,540
talk so I'm gonna give you a kind of

00:00:37,649 --> 00:00:42,140
very brief overview how many of you are

00:00:39,540 --> 00:00:45,059
using my cells right now in production

00:00:42,140 --> 00:00:47,250
ok cool so I part of skipped some depart

00:00:45,059 --> 00:00:49,829
because I made it slides for a like open

00:00:47,250 --> 00:00:52,140
source summit and some introduction on

00:00:49,829 --> 00:00:54,120
my sauce practice skip those and then

00:00:52,140 --> 00:00:56,399
I'm gonna give you some overview of my

00:00:54,120 --> 00:00:58,590
history of containerization mesos and

00:00:56,399 --> 00:01:02,550
then I'm gonna talk about how we adopt

00:00:58,590 --> 00:01:03,449
those new container standards and then

00:01:02,550 --> 00:01:07,560
I'm gonna highlight some of the new

00:01:03,449 --> 00:01:09,360
features we recently adding to mesos and

00:01:07,560 --> 00:01:12,420
then talk about the future roadmap what

00:01:09,360 --> 00:01:15,210
we're heading to so missus the kernel

00:01:12,420 --> 00:01:16,830
for data center applications if you

00:01:15,210 --> 00:01:20,280
think about what a traditional co s

00:01:16,830 --> 00:01:21,810
kernel does for resource management the

00:01:20,280 --> 00:01:24,990
the traditional operating system like

00:01:21,810 --> 00:01:26,670
Linux abstract away those CPU host CPU

00:01:24,990 --> 00:01:28,439
and memory those powers and providing

00:01:26,670 --> 00:01:31,259
some programming abstractions to the

00:01:28,439 --> 00:01:33,390
user applications those abstractions

00:01:31,259 --> 00:01:35,610
like things we're very familiar with

00:01:33,390 --> 00:01:37,619
like process threads file things like

00:01:35,610 --> 00:01:39,509
this and then the whaling is kernel

00:01:37,619 --> 00:01:41,759
provides security and isolation for

00:01:39,509 --> 00:01:43,590
those programs is through like things

00:01:41,759 --> 00:01:45,659
like virtual memory users all these

00:01:43,590 --> 00:01:48,479
concepts in Selenas kernel or other

00:01:45,659 --> 00:01:50,130
operating system kernel so what maysa

00:01:48,479 --> 00:01:52,079
does if we think about missiles as a

00:01:50,130 --> 00:01:52,950
distributed like data center kernel

00:01:52,079 --> 00:01:55,890
audio's to be eccentric

00:01:52,950 --> 00:01:58,020
distributed system kernel and it does

00:01:55,890 --> 00:01:59,670
the same thing as Linux kernel are

00:01:58,020 --> 00:02:01,409
regarding like for example resource

00:01:59,670 --> 00:02:03,659
management per hour in manage not just

00:02:01,409 --> 00:02:06,299
single CPU or memory image like all the

00:02:03,659 --> 00:02:07,829
CPU and memory in a cluster and it

00:02:06,299 --> 00:02:11,640
provides some programming abstraction to

00:02:07,829 --> 00:02:12,230
to developers this is the message API on

00:02:11,640 --> 00:02:15,069
your

00:02:12,230 --> 00:02:17,870
Manila's like task offers resources and

00:02:15,069 --> 00:02:20,030
it also provides security and isolation

00:02:17,870 --> 00:02:22,069
for those application on top on this is

00:02:20,030 --> 00:02:24,739
through containerization that's my focus

00:02:22,069 --> 00:02:28,040
of the talk today so I'm gonna probably

00:02:24,739 --> 00:02:32,360
skip those simple things that this is

00:02:28,040 --> 00:02:33,549
the typical missus workflow I'll jump

00:02:32,360 --> 00:02:36,349
into like the history of

00:02:33,549 --> 00:02:38,510
containerization in missiles so what is

00:02:36,349 --> 00:02:40,310
container so I think I feel that the

00:02:38,510 --> 00:02:42,349
continuum that the world of container

00:02:40,310 --> 00:02:45,290
being overloaded I'm quite a bit and

00:02:42,349 --> 00:02:46,910
from different person the perspect for

00:02:45,290 --> 00:02:48,530
different person have different

00:02:46,910 --> 00:02:50,569
interpretation of continua for example

00:02:48,530 --> 00:02:52,250
for developers if you are talking about

00:02:50,569 --> 00:02:54,200
a container they're probably talking

00:02:52,250 --> 00:02:56,299
about they're quite creating container

00:02:54,200 --> 00:02:58,910
images and if you're talking to an

00:02:56,299 --> 00:03:00,859
operator when they talk about containers

00:02:58,910 --> 00:03:03,560
on the processing container is like an

00:03:00,859 --> 00:03:05,690
isolated execution environment so

00:03:03,560 --> 00:03:08,030
actually the containerization inmates

00:03:05,690 --> 00:03:11,470
those folks on the ladder which is from

00:03:08,030 --> 00:03:14,120
operator side we focus on creating a

00:03:11,470 --> 00:03:16,910
isolated execution environment for your

00:03:14,120 --> 00:03:19,510
applications and it's star very early I

00:03:16,910 --> 00:03:25,459
start from the very beginning so I think

00:03:19,510 --> 00:03:26,870
that's like 0.10 2011 we the first very

00:03:25,459 --> 00:03:30,200
early version of missiles has this

00:03:26,870 --> 00:03:32,120
process based containerization so

00:03:30,200 --> 00:03:35,870
basically agent launched a bunch of

00:03:32,120 --> 00:03:37,760
processes on the host and each container

00:03:35,870 --> 00:03:39,799
is actually a process session and

00:03:37,760 --> 00:03:41,299
there's no resource isolation at all

00:03:39,799 --> 00:03:47,630
just basically a bunch of Linux

00:03:41,299 --> 00:03:49,910
processes on the box and then in 2012 I

00:03:47,630 --> 00:03:51,139
think things the the problem was the

00:03:49,910 --> 00:03:53,599
previous solution is you don't have

00:03:51,139 --> 00:03:55,160
resource isolation so one container can

00:03:53,599 --> 00:03:58,400
just use up all the resources on the

00:03:55,160 --> 00:04:00,290
host so on then we noticed that hey we

00:03:58,400 --> 00:04:02,840
have this Linux ego support which is

00:04:00,290 --> 00:04:05,720
very nice give you ability to restrict

00:04:02,840 --> 00:04:08,150
the CPU and the memory for a given group

00:04:05,720 --> 00:04:10,129
of tasks group of processes so we

00:04:08,150 --> 00:04:13,280
introduced this Linux Ebru direct

00:04:10,129 --> 00:04:14,780
support and then at a time only enabled

00:04:13,280 --> 00:04:17,269
ICP in the memory isolation because

00:04:14,780 --> 00:04:19,609
these are two main resources that people

00:04:17,269 --> 00:04:22,490
are using and then we also use the

00:04:19,609 --> 00:04:25,520
freezer cq4 process management because

00:04:22,490 --> 00:04:27,680
like Seager will give you the ability to

00:04:25,520 --> 00:04:29,560
they track all the processes in a

00:04:27,680 --> 00:04:32,090
container very easily compared to using

00:04:29,560 --> 00:04:33,379
processing process trees which is not

00:04:32,090 --> 00:04:36,409
very reliable because you have this

00:04:33,379 --> 00:04:38,330
riparian thing so we use freezer secret

00:04:36,409 --> 00:04:40,520
for process management also that I think

00:04:38,330 --> 00:04:42,860
the freezer also simplified one part

00:04:40,520 --> 00:04:45,349
which is like we try to kill the

00:04:42,860 --> 00:04:47,720
container you want to make sure that you

00:04:45,349 --> 00:04:50,360
stop all the processes in that C group

00:04:47,720 --> 00:04:52,759
first and then you send 66 secure to all

00:04:50,360 --> 00:04:54,560
these processes and then you unfreeze

00:04:52,759 --> 00:04:56,509
the C groups so that those signal will

00:04:54,560 --> 00:04:58,069
be delivered the nice thing about that

00:04:56,509 --> 00:04:59,599
is you don't have the race condition

00:04:58,069 --> 00:05:01,849
because you have to scan all the pits

00:04:59,599 --> 00:05:03,380
first and then do the kill but at the

00:05:01,849 --> 00:05:05,509
same time if some process is still

00:05:03,380 --> 00:05:07,310
running that process might exit and you

00:05:05,509 --> 00:05:09,530
might send a sick kill to a round

00:05:07,310 --> 00:05:11,509
process so the freezer secret solve that

00:05:09,530 --> 00:05:13,280
issue about just allowing all allowing

00:05:11,509 --> 00:05:14,449
us to freeze the entire C group so that

00:05:13,280 --> 00:05:17,840
we can deliver the killer signal

00:05:14,449 --> 00:05:22,310
atomically all right so that's 2012 zero

00:05:17,840 --> 00:05:24,319
ten and then in 2014 I think that C

00:05:22,310 --> 00:05:27,620
gusta has been in production at Twitter

00:05:24,319 --> 00:05:29,960
for a long time and then in 2014 we

00:05:27,620 --> 00:05:31,460
start to add more and more on like C

00:05:29,960 --> 00:05:33,229
group support because there are more and

00:05:31,460 --> 00:05:34,610
more subsystem being introduced inside

00:05:33,229 --> 00:05:37,370
the Linux kernel and we want to add

00:05:34,610 --> 00:05:40,310
those support and we realized that the

00:05:37,370 --> 00:05:42,800
architecture there's no scale anymore so

00:05:40,310 --> 00:05:44,449
we kind of didn't refactor in 0:18

00:05:42,800 --> 00:05:46,969
to introduce this concept called

00:05:44,449 --> 00:05:49,159
container Iser it uses a pluggable

00:05:46,969 --> 00:05:51,710
architecture you can specify on

00:05:49,159 --> 00:05:53,389
different Isolators and the launchers we

00:05:51,710 --> 00:05:55,250
do it like these are the two main

00:05:53,389 --> 00:05:58,250
abstraction that we provide inside may

00:05:55,250 --> 00:06:00,680
Tomatoes containerization code also the

00:05:58,250 --> 00:06:02,930
Isolators you can think of isolator is

00:06:00,680 --> 00:06:05,029
like lifecycle hooks so during the

00:06:02,930 --> 00:06:06,409
container like like like before

00:06:05,029 --> 00:06:08,270
Container Store after container

00:06:06,409 --> 00:06:09,440
terminates or during the unlikely when

00:06:08,270 --> 00:06:11,690
there's a task being sent to the

00:06:09,440 --> 00:06:13,580
container we provide those hooks allow

00:06:11,690 --> 00:06:15,979
you to inject arbitrary code to do

00:06:13,580 --> 00:06:18,680
isolations and then we actually made

00:06:15,979 --> 00:06:20,539
those CPU memory C group Isis ISIL Asian

00:06:18,680 --> 00:06:22,190
being part of the isolator and then we

00:06:20,539 --> 00:06:24,440
introduce more and more Isolators to

00:06:22,190 --> 00:06:25,669
make it more modular and also on there's

00:06:24,440 --> 00:06:27,340
another concept called launcher

00:06:25,669 --> 00:06:29,659
longtree is mainly responsible for

00:06:27,340 --> 00:06:31,639
process management like how many

00:06:29,659 --> 00:06:35,479
processes are there and how do you kill

00:06:31,639 --> 00:06:37,699
a bunch of processes how do you launch a

00:06:35,479 --> 00:06:39,139
process a launcher container so we have

00:06:37,699 --> 00:06:41,659
three major launchers

00:06:39,139 --> 00:06:43,189
Linux post-its in Windows Salinas

00:06:41,659 --> 00:06:45,580
launcher basically just using standard

00:06:43,189 --> 00:06:48,680
Linux features like see group namespaces

00:06:45,580 --> 00:06:51,080
POSIX launcher are basically does

00:06:48,680 --> 00:06:53,150
nothing just to forking exact basically

00:06:51,080 --> 00:06:55,400
and Windows is using job objects to

00:06:53,150 --> 00:06:55,909
create containers and processes on

00:06:55,400 --> 00:07:01,759
Windows

00:06:55,909 --> 00:07:05,060
so that's 2014 0 18 May to 0 18 so there

00:07:01,759 --> 00:07:06,259
is a bunch of isolator we add later like

00:07:05,060 --> 00:07:09,080
if you go to this

00:07:06,259 --> 00:07:11,870
I recently clean up the documentation so

00:07:09,080 --> 00:07:13,340
if you go to this latest documentation

00:07:11,870 --> 00:07:16,400
for mesas containerized there you can

00:07:13,340 --> 00:07:18,830
see a full list of documentation for

00:07:16,400 --> 00:07:20,539
each individual Isolators there's some

00:07:18,830 --> 00:07:22,219
special ones I think we add most of the

00:07:20,539 --> 00:07:24,650
C group subsistence support through

00:07:22,219 --> 00:07:26,990
isolation and we have some disk

00:07:24,650 --> 00:07:30,589
Isolators file since Isolators some

00:07:26,990 --> 00:07:33,469
namespaces Isolators and networking and

00:07:30,589 --> 00:07:37,069
volumes I don't I don't want to jump

00:07:33,469 --> 00:07:39,080
into details I'm gonna continue this

00:07:37,069 --> 00:07:41,960
kind of history of continued ization I

00:07:39,080 --> 00:07:45,560
think 2014 the same year in the next two

00:07:41,960 --> 00:07:49,189
like in 0 20 docker is really popular at

00:07:45,560 --> 00:07:52,310
the time 2014 and so so therefore we add

00:07:49,189 --> 00:07:54,110
a new container riser on to Tomatoes

00:07:52,310 --> 00:07:55,520
called docker container riser which is

00:07:54,110 --> 00:07:57,319
essentially launching container not

00:07:55,520 --> 00:07:58,969
using missiles like you're not using the

00:07:57,319 --> 00:08:01,460
tomatoes part of the code by using just

00:07:58,969 --> 00:08:04,460
using Dockers demon by just chilling out

00:08:01,460 --> 00:08:06,139
to dark demon and you just shall just do

00:08:04,460 --> 00:08:08,120
darker and darker pool darker stuff

00:08:06,139 --> 00:08:09,919
darker are and things like this and then

00:08:08,120 --> 00:08:13,009
these two container Iser can actually

00:08:09,919 --> 00:08:14,149
coexist on the same agent so we can you

00:08:13,009 --> 00:08:15,710
can definitely have some container

00:08:14,149 --> 00:08:18,379
running using docker the email in some

00:08:15,710 --> 00:08:23,210
container using mesas container riser so

00:08:18,379 --> 00:08:28,310
that's 2014 now in 2016 last year on

00:08:23,210 --> 00:08:30,319
0:28 we start to support on docker

00:08:28,310 --> 00:08:31,969
using mesa container riser the reason we

00:08:30,319 --> 00:08:34,490
wants to do that is we realized that

00:08:31,969 --> 00:08:36,199
what doctor does essentially are using a

00:08:34,490 --> 00:08:37,940
bunch of Linux primitives which we

00:08:36,199 --> 00:08:39,769
already have support for in mesas

00:08:37,940 --> 00:08:42,409
container riser the only missing piece

00:08:39,769 --> 00:08:43,880
actually is the the part of like

00:08:42,409 --> 00:08:46,190
provisioning a filesystem for a

00:08:43,880 --> 00:08:47,660
container so essentially and also I

00:08:46,190 --> 00:08:49,399
think we realized that maintaining to

00:08:47,660 --> 00:08:51,140
container eyes is kind of painful and

00:08:49,399 --> 00:08:52,200
anytime you want to add a new feature

00:08:51,140 --> 00:08:54,360
you have to

00:08:52,200 --> 00:08:56,760
do both implementations which is hard to

00:08:54,360 --> 00:08:59,070
maintain in the end so on what we decide

00:08:56,760 --> 00:09:00,899
to do at a time is trying to just adding

00:08:59,070 --> 00:09:03,209
this missing piece into maces continued

00:09:00,899 --> 00:09:05,610
riser what we call provisioners so

00:09:03,209 --> 00:09:07,350
provisioner isn't a and yet another

00:09:05,610 --> 00:09:09,690
abstraction in science majors continued

00:09:07,350 --> 00:09:11,850
riser to allow you to customize on the

00:09:09,690 --> 00:09:12,810
file system provisioning part so right

00:09:11,850 --> 00:09:15,300
now they're like two implementations

00:09:12,810 --> 00:09:16,889
there's a darker image provisioner and

00:09:15,300 --> 00:09:18,930
there's an ab c-- image provision there

00:09:16,889 --> 00:09:21,720
and we are adding OCI image support

00:09:18,930 --> 00:09:24,110
right now i think the the patch is in

00:09:21,720 --> 00:09:28,410
review and needs to be merged very soon

00:09:24,110 --> 00:09:30,029
so we also add some more Isolators to to

00:09:28,410 --> 00:09:31,980
kind of match the functionality from

00:09:30,029 --> 00:09:35,100
darker for example the volume support

00:09:31,980 --> 00:09:37,230
like capability support are limits and

00:09:35,100 --> 00:09:39,360
also we've made this special isolator

00:09:37,230 --> 00:09:41,279
for interpreting like things like

00:09:39,360 --> 00:09:46,889
environment variable and entry point and

00:09:41,279 --> 00:09:49,440
inside and dr image so that's 2016 and

00:09:46,889 --> 00:09:50,670
and i think like after that i think we

00:09:49,440 --> 00:09:52,440
were I think that the kind of the

00:09:50,670 --> 00:09:54,240
direction we take in that project in

00:09:52,440 --> 00:09:56,670
containerization is trying to adopt

00:09:54,240 --> 00:09:57,810
those new standards for containers I

00:09:56,670 --> 00:10:00,120
think there's a lot of standard being

00:09:57,810 --> 00:10:03,779
made during that last year and the year

00:10:00,120 --> 00:10:05,940
before on last and and we are trying to

00:10:03,779 --> 00:10:07,709
adopt those containers standard I think

00:10:05,940 --> 00:10:09,420
that made major a three categories I

00:10:07,709 --> 00:10:11,190
kind of cater it into three major

00:10:09,420 --> 00:10:13,199
category container image container

00:10:11,190 --> 00:10:14,820
network and continuous storage during

00:10:13,199 --> 00:10:17,070
might be more but right now these are

00:10:14,820 --> 00:10:20,160
the major three area that people are

00:10:17,070 --> 00:10:23,010
making standard for and I'm gonna talk

00:10:20,160 --> 00:10:23,579
about each of those in the next few

00:10:23,010 --> 00:10:26,010
slides

00:10:23,579 --> 00:10:28,140
and I think Mesa is gonna support all

00:10:26,010 --> 00:10:32,040
these through the pluggable interface

00:10:28,140 --> 00:10:33,600
inside mesas container Iser so if you're

00:10:32,040 --> 00:10:35,670
talking about containers standard

00:10:33,600 --> 00:10:38,449
effectively like there's only one

00:10:35,670 --> 00:10:43,529
standard right now which is darker and

00:10:38,449 --> 00:10:45,269
darker has this registry API that

00:10:43,529 --> 00:10:46,800
there's a bunch of implementation of

00:10:45,269 --> 00:10:49,139
that registry API like Jerry frog

00:10:46,800 --> 00:10:51,329
networks and also those cloud providers

00:10:49,139 --> 00:10:55,380
have on their registry being hosted and

00:10:51,329 --> 00:10:57,690
also talker hub and then for storage

00:10:55,380 --> 00:10:59,699
docker has this volume plugin called

00:10:57,690 --> 00:11:01,140
docker warning driver interface and

00:10:59,699 --> 00:11:05,059
there's a lot of implementation of that

00:11:01,140 --> 00:11:08,299
interface in the ecosystem like for

00:11:05,059 --> 00:11:10,879
our x-ray blaster FS these kinds of

00:11:08,299 --> 00:11:13,639
plugins and then for networking doctor

00:11:10,879 --> 00:11:16,459
use this interface called live network

00:11:13,639 --> 00:11:17,959
it's an our Model T car and you can

00:11:16,459 --> 00:11:19,819
using that in our model to build your

00:11:17,959 --> 00:11:21,829
own plugins and the major narrow vendors

00:11:19,819 --> 00:11:24,559
have the implementation there like

00:11:21,829 --> 00:11:27,979
catechol county cisco juniper these kind

00:11:24,559 --> 00:11:31,129
of companies but but the fact that I

00:11:27,979 --> 00:11:33,829
think this is not a good ecosystem

00:11:31,129 --> 00:11:37,039
because it's centralized it's kind of

00:11:33,829 --> 00:11:39,529
doctor centric thing and what a true

00:11:37,039 --> 00:11:42,859
standard I think is it has to be it has

00:11:39,529 --> 00:11:45,559
to have a stable interface it has to

00:11:42,859 --> 00:11:48,079
have backwards compatibility guarantee

00:11:45,559 --> 00:11:50,109
and and there has to be multiple

00:11:48,079 --> 00:11:52,729
implementation for a given standard

00:11:50,109 --> 00:11:54,439
because I don't think that singles then

00:11:52,729 --> 00:11:56,299
I mean I mean when you basically we need

00:11:54,439 --> 00:11:58,249
to decouple the standard from the actual

00:11:56,299 --> 00:11:59,449
implementation these are two different

00:11:58,249 --> 00:12:01,459
things we should not couple them

00:11:59,449 --> 00:12:03,649
together in the doctor case actually

00:12:01,459 --> 00:12:05,149
like implementation and a standard are

00:12:03,649 --> 00:12:07,729
actually coupled together so which is

00:12:05,149 --> 00:12:09,469
not a good thing for the ecosystem and

00:12:07,729 --> 00:12:12,769
also has to be vendor neutral idea

00:12:09,469 --> 00:12:14,629
either more vendors in that ecosystem

00:12:12,769 --> 00:12:17,299
the better and also you have to have

00:12:14,629 --> 00:12:18,769
that interoperability so well like for

00:12:17,299 --> 00:12:22,279
example if you build a plugin for one

00:12:18,769 --> 00:12:24,109
platform according to one standard it

00:12:22,279 --> 00:12:26,209
should be very easy to move that plug-in

00:12:24,109 --> 00:12:28,789
to a different platform because they

00:12:26,209 --> 00:12:30,469
both implement the same standard so the

00:12:28,789 --> 00:12:32,269
ideal word is like this so that's that's

00:12:30,469 --> 00:12:34,069
the current situation so the ideal word

00:12:32,269 --> 00:12:35,979
is like you replace talker with a bunch

00:12:34,069 --> 00:12:39,379
of container orchestration systems and

00:12:35,979 --> 00:12:42,649
and then just replace those interfaces

00:12:39,379 --> 00:12:44,779
with a kind of a true container standard

00:12:42,649 --> 00:12:48,739
for example for the register API its

00:12:44,779 --> 00:12:50,869
container image spec for for volume

00:12:48,739 --> 00:12:52,929
plugging its container storage back and

00:12:50,869 --> 00:12:56,689
for networking is container and our spec

00:12:52,929 --> 00:12:58,729
so that's the ideal world so we need a

00:12:56,689 --> 00:13:00,379
lot of standard for containers image

00:12:58,729 --> 00:13:02,239
networking storage that's what I

00:13:00,379 --> 00:13:04,699
mentioned and you pro need some like

00:13:02,239 --> 00:13:06,559
runtime standard our all metrics or some

00:13:04,699 --> 00:13:08,779
other monitoring standard for containers

00:13:06,559 --> 00:13:11,139
in this talk I'm gonna just focus on

00:13:08,779 --> 00:13:13,429
these three image networking and storage

00:13:11,139 --> 00:13:15,889
because I think there's not really a

00:13:13,429 --> 00:13:17,820
standard for our metrics yet but there

00:13:15,889 --> 00:13:22,320
is a standard for runtime but it

00:13:17,820 --> 00:13:24,210
the focus of this talk soken your image

00:13:22,320 --> 00:13:26,190
spec what's the scope of that standard

00:13:24,210 --> 00:13:28,680
basically if you think about that it's

00:13:26,190 --> 00:13:30,030
basically like application writers write

00:13:28,680 --> 00:13:31,860
an application they compile their

00:13:30,030 --> 00:13:33,420
applications and then the next thing is

00:13:31,860 --> 00:13:36,030
they need to package their application

00:13:33,420 --> 00:13:37,890
into some sort of image and then and

00:13:36,030 --> 00:13:39,960
also package not just the application

00:13:37,890 --> 00:13:41,610
binary and you also need to patch those

00:13:39,960 --> 00:13:44,100
application configurations into the

00:13:41,610 --> 00:13:46,230
image and then you are need to once you

00:13:44,100 --> 00:13:47,970
get the image you have to store the

00:13:46,230 --> 00:13:49,830
image and transfer the image over the

00:13:47,970 --> 00:13:51,650
wire into on the machine that actually

00:13:49,830 --> 00:13:55,340
wants to run a container in production

00:13:51,650 --> 00:13:58,200
on the target machine so you have to

00:13:55,340 --> 00:14:00,480
unpack the image so that I can get those

00:13:58,200 --> 00:14:01,800
you can recover those application binary

00:14:00,480 --> 00:14:03,930
and config and then run those

00:14:01,800 --> 00:14:05,670
applications using those config so

00:14:03,930 --> 00:14:07,800
that's how that's what in the image span

00:14:05,670 --> 00:14:09,540
needs to do to me I think there's

00:14:07,800 --> 00:14:12,050
already a standard for that which is OC

00:14:09,540 --> 00:14:15,240
I continue our open container initiative

00:14:12,050 --> 00:14:16,980
so the open container initiative has to

00:14:15,240 --> 00:14:18,390
spec right now when it's called images

00:14:16,980 --> 00:14:20,550
back the other one is called runtime

00:14:18,390 --> 00:14:22,440
spec so this one I'm focusing on is the

00:14:20,550 --> 00:14:25,440
image spec because that's what the eval

00:14:22,440 --> 00:14:27,600
are Pro cares about because as long as

00:14:25,440 --> 00:14:29,580
you have an image spec you and you

00:14:27,600 --> 00:14:31,200
guarantee that on the way you are

00:14:29,580 --> 00:14:32,880
wearing your image on this machine is

00:14:31,200 --> 00:14:34,920
exactly the same as you are on the other

00:14:32,880 --> 00:14:36,750
machine then it should be pretty

00:14:34,920 --> 00:14:39,210
straightforward you've heard only other

00:14:36,750 --> 00:14:41,430
things so missus will support OC I

00:14:39,210 --> 00:14:43,830
assume I think the reason we don't merge

00:14:41,430 --> 00:14:46,410
that patch is because we want to do our

00:14:43,830 --> 00:14:48,600
due diligence to make sure that the way

00:14:46,410 --> 00:14:50,460
we store those layers and artifacts in a

00:14:48,600 --> 00:14:51,750
way that it's extensible in the future

00:14:50,460 --> 00:14:53,370
because they think about that it's not

00:14:51,750 --> 00:14:56,400
just simple as just store that on the

00:14:53,370 --> 00:14:58,350
file system you have to how do you index

00:14:56,400 --> 00:14:59,910
then how do you do garbage clash and how

00:14:58,350 --> 00:15:01,530
do you do cache to replacement things

00:14:59,910 --> 00:15:03,900
like this and I don't want to introduce

00:15:01,530 --> 00:15:07,080
too much complexity like too much

00:15:03,900 --> 00:15:09,720
complexity on yet for another new image

00:15:07,080 --> 00:15:11,850
format I want to unify all these things

00:15:09,720 --> 00:15:14,040
into one single unified artifact store

00:15:11,850 --> 00:15:15,090
I'm gonna mention later so that so

00:15:14,040 --> 00:15:16,380
that's the only reason that we don't

00:15:15,090 --> 00:15:20,190
merge those patch yet but I will

00:15:16,380 --> 00:15:22,290
probably merge those patch very soon so

00:15:20,190 --> 00:15:23,760
so maysa I already mentioned missus

00:15:22,290 --> 00:15:26,190
containerize are already support like

00:15:23,760 --> 00:15:27,990
docker images and we support AB see

00:15:26,190 --> 00:15:30,060
images so in the future it's very

00:15:27,990 --> 00:15:30,690
natural to just extend the provision or

00:15:30,060 --> 00:15:34,470
interface

00:15:30,690 --> 00:15:37,290
a new store called OCI - to support that

00:15:34,470 --> 00:15:41,390
that would be very straightforward for

00:15:37,290 --> 00:15:43,770
networking this what now working on

00:15:41,390 --> 00:15:45,210
specification needs to handle in the

00:15:43,770 --> 00:15:47,340
container world I think the scope for

00:15:45,210 --> 00:15:48,960
that is how do you how do you connect

00:15:47,340 --> 00:15:51,480
containers how do you allocate IP

00:15:48,960 --> 00:15:54,900
addresses how do you enforce security

00:15:51,480 --> 00:15:57,900
policies isolated performance provided

00:15:54,900 --> 00:15:59,400
provide QoS or all balance no traffic's

00:15:57,900 --> 00:16:02,640
there's a lot a bunch of stuff you need

00:15:59,400 --> 00:16:04,680
to handle in networking area so there's

00:16:02,640 --> 00:16:07,020
a standard already right now but I don't

00:16:04,680 --> 00:16:08,430
think it handle all these I handle some

00:16:07,020 --> 00:16:09,960
of these but not all of them so we

00:16:08,430 --> 00:16:11,460
currently some other standard or like we

00:16:09,960 --> 00:16:13,650
improved that standard to handle all

00:16:11,460 --> 00:16:15,780
these networking stuff so the CNI is

00:16:13,650 --> 00:16:17,910
that the standard right now essentially

00:16:15,780 --> 00:16:21,000
adopted by major orchestration systems

00:16:17,910 --> 00:16:24,180
and our vendors it's a simple CLI based

00:16:21,000 --> 00:16:26,190
interface and in the container

00:16:24,180 --> 00:16:28,710
orchestration system just invoked OCR

00:16:26,190 --> 00:16:31,260
commands before the container starts or

00:16:28,710 --> 00:16:33,870
after the container terminates and they

00:16:31,260 --> 00:16:36,060
recently just joined CN CF so it's a CN

00:16:33,870 --> 00:16:39,720
CF project had been donated in to CN CF

00:16:36,060 --> 00:16:42,660
recently so this is like how briefly how

00:16:39,720 --> 00:16:44,370
CNI works so on the container runtime on

00:16:42,660 --> 00:16:47,490
the Left we are basically before

00:16:44,370 --> 00:16:49,050
containers start it will try to create a

00:16:47,490 --> 00:16:51,450
container now in any space first and

00:16:49,050 --> 00:16:53,940
then call CNI plugging with that narrow

00:16:51,450 --> 00:16:57,740
namespace saying that hey seeing I plug

00:16:53,940 --> 00:17:01,200
in please add my at your container into

00:16:57,740 --> 00:17:03,240
in at this container it's now working to

00:17:01,200 --> 00:17:05,939
the one that on provided by the

00:17:03,240 --> 00:17:07,170
underlying network vendor so that so the

00:17:05,939 --> 00:17:09,660
container illustration isn't just called

00:17:07,170 --> 00:17:11,730
add the simple CI command just had an

00:17:09,660 --> 00:17:13,470
hour - now then - a narrow namespace and

00:17:11,730 --> 00:17:14,730
then once the container terminates it

00:17:13,470 --> 00:17:15,990
just called the lead which is just

00:17:14,730 --> 00:17:18,390
detached an arrow from the narrow

00:17:15,990 --> 00:17:21,540
namespace and the actual configuration

00:17:18,390 --> 00:17:23,760
for the network is passing to the plugin

00:17:21,540 --> 00:17:25,380
through arguments comma command line

00:17:23,760 --> 00:17:27,959
arguments and the environment variables

00:17:25,380 --> 00:17:28,950
and the IP management is actually part

00:17:27,959 --> 00:17:30,480
of the plugin logic

00:17:28,950 --> 00:17:34,200
so the plugging is responsible for

00:17:30,480 --> 00:17:37,140
allocating IP if if the content will

00:17:34,200 --> 00:17:38,640
have an IP it and the iPad interface is

00:17:37,140 --> 00:17:41,160
also pluggable so there's an interface

00:17:38,640 --> 00:17:44,290
for IPAM that there's some general ipad

00:17:41,160 --> 00:17:46,750
like for an apple localhost base or

00:17:44,290 --> 00:17:49,900
like a centralized each EDC based a

00:17:46,750 --> 00:17:52,750
cd-based ipam you can reuse those IBM

00:17:49,900 --> 00:17:57,340
because the interface standard may so

00:17:52,750 --> 00:17:59,470
support CNI from 0.28 I think it's it's

00:17:57,340 --> 00:18:02,140
it's only it's only supporting some

00:17:59,470 --> 00:18:04,630
mixers container Iser and if you only

00:18:02,140 --> 00:18:07,240
use that just do a - - isolation equals

00:18:04,630 --> 00:18:09,010
now see an eye on the agent config only

00:18:07,240 --> 00:18:11,710
agent flag then you will be able to use

00:18:09,010 --> 00:18:13,330
seen on networks provided by those now

00:18:11,710 --> 00:18:14,980
our vendors and but you also need to

00:18:13,330 --> 00:18:16,780
install those newer plugins on your

00:18:14,980 --> 00:18:20,200
aging host to be able to leverage that

00:18:16,780 --> 00:18:24,400
and the majority rendered our vendors

00:18:20,200 --> 00:18:25,900
already supports the enjoy okay so for

00:18:24,400 --> 00:18:27,640
storage I don't want to talk too much

00:18:25,900 --> 00:18:29,590
here because there's another talk after

00:18:27,640 --> 00:18:31,809
this talking about specifically about

00:18:29,590 --> 00:18:33,070
the container storage interface I just

00:18:31,809 --> 00:18:35,740
give you a brief overview of what

00:18:33,070 --> 00:18:38,410
storage or a storage spec needs to

00:18:35,740 --> 00:18:39,880
handle in the container world the scope

00:18:38,410 --> 00:18:41,610
is like you have to handle like things

00:18:39,880 --> 00:18:44,260
like provisioning and de-provisioning

00:18:41,610 --> 00:18:46,750
volumes attach the attach volumes

00:18:44,260 --> 00:18:49,120
mountain-man volumes things like race

00:18:46,750 --> 00:18:50,710
natural or restores natural take backup

00:18:49,120 --> 00:18:52,179
things like this so I think that's what

00:18:50,710 --> 00:18:54,070
a container storage interface used to

00:18:52,179 --> 00:18:56,559
handle and there's a new interface

00:18:54,070 --> 00:18:58,870
called container storage interface it's

00:18:56,559 --> 00:19:01,809
a joint work between missiles kubernetes

00:18:58,870 --> 00:19:05,110
docker and culinary community on this

00:19:01,809 --> 00:19:07,990
and the goal of CSI is actually like

00:19:05,110 --> 00:19:09,820
make make sure that the vendor just need

00:19:07,990 --> 00:19:11,020
to make one plugging and that plugin

00:19:09,820 --> 00:19:13,900
will work for all the container

00:19:11,020 --> 00:19:15,640
oxidation systems and it support all the

00:19:13,900 --> 00:19:16,990
features that I mentioned previously and

00:19:15,640 --> 00:19:19,179
I think one thing I want to highlight

00:19:16,990 --> 00:19:21,220
here is also needs to support both mount

00:19:19,179 --> 00:19:22,780
and block volumes not just mount

00:19:21,220 --> 00:19:25,000
warnings and also support block bonding

00:19:22,780 --> 00:19:27,160
because we do see use cases where people

00:19:25,000 --> 00:19:29,559
want to use rob block devices for some

00:19:27,160 --> 00:19:31,090
data workload anyway I don't I don't

00:19:29,559 --> 00:19:35,049
want to jump into too much detail here

00:19:31,090 --> 00:19:37,450
so there's Ana talk in after this at 4 I

00:19:35,049 --> 00:19:42,669
think on this so I'm gonna skip this

00:19:37,450 --> 00:19:44,290
part okay so it's 4:30 4:30 okay so I

00:19:42,669 --> 00:19:47,370
think the 4:30 in the same your own so

00:19:44,290 --> 00:19:49,690
we're gonna cover that in the next talk

00:19:47,370 --> 00:19:51,190
the rest thing the next thing I want to

00:19:49,690 --> 00:19:54,100
talk about is some kind of the new

00:19:51,190 --> 00:19:55,789
features we build into most things last

00:19:54,100 --> 00:19:58,460
year

00:19:55,789 --> 00:20:00,229
that we are really proud of I think if

00:19:58,460 --> 00:20:02,210
you listen to Ben's keynote this morning

00:20:00,229 --> 00:20:04,070
he mentioned some the the nesting

00:20:02,210 --> 00:20:06,109
support debugging support on debugging

00:20:04,070 --> 00:20:07,549
support already so I just want to dive

00:20:06,109 --> 00:20:09,859
into some of the details why we build

00:20:07,549 --> 00:20:12,470
this and how we build this and and and

00:20:09,859 --> 00:20:15,379
come up with a demo so why nested

00:20:12,470 --> 00:20:17,509
container so on we we discover a bunch

00:20:15,379 --> 00:20:20,149
of patterns that are making nested

00:20:17,509 --> 00:20:21,919
container necessary so one pattern we

00:20:20,149 --> 00:20:24,049
discovered is the sidecar pattern right

00:20:21,919 --> 00:20:26,179
you have a server running and then you

00:20:24,049 --> 00:20:28,369
at the same time you have to run a proxy

00:20:26,179 --> 00:20:31,070
alongside in the same now in any space

00:20:28,369 --> 00:20:32,749
with stemming process providing some

00:20:31,070 --> 00:20:34,519
authentication authorization support

00:20:32,749 --> 00:20:36,080
things like this so this is one thing

00:20:34,519 --> 00:20:37,460
and then the lifecycle of these two

00:20:36,080 --> 00:20:40,159
containers to be tied together like

00:20:37,460 --> 00:20:43,429
either one if one container dying in

00:20:40,159 --> 00:20:45,979
that whole container like whole pod and

00:20:43,429 --> 00:20:48,049
the entire on the process is in that

00:20:45,979 --> 00:20:49,849
pile will be killed that's the sidecar

00:20:48,049 --> 00:20:51,950
pattern the other pattern we discover is

00:20:49,849 --> 00:20:53,690
called transient container so you have

00:20:51,950 --> 00:20:55,279
say you have Cassandra running and then

00:20:53,690 --> 00:20:59,109
you have some same job you want to

00:20:55,279 --> 00:21:01,759
perform on that Cassandra on know and

00:20:59,109 --> 00:21:04,129
things like backup we want to know like

00:21:01,759 --> 00:21:06,619
periodically don't take a backup for

00:21:04,129 --> 00:21:08,479
your Cassandra data but but you don't

00:21:06,619 --> 00:21:10,220
want to run the backup all the time it's

00:21:08,479 --> 00:21:12,019
not a service it's more like a transient

00:21:10,220 --> 00:21:13,849
job that you want to run it's like more

00:21:12,019 --> 00:21:16,940
like a cron job but you want to access

00:21:13,849 --> 00:21:18,559
this data Cassandra containers so this

00:21:16,940 --> 00:21:20,349
is like the code another pattern that we

00:21:18,559 --> 00:21:22,369
just covered called transient container

00:21:20,349 --> 00:21:23,869
there's another pattern that we also

00:21:22,369 --> 00:21:26,330
discovered we I call it like a

00:21:23,869 --> 00:21:28,340
hierarchical container why we need nasty

00:21:26,330 --> 00:21:30,019
container so kind of nasty contain can

00:21:28,340 --> 00:21:31,580
be helpful here is like say for example

00:21:30,019 --> 00:21:33,679
you want to run kubernetes on top and

00:21:31,580 --> 00:21:36,499
mesos and then kubernetes has this pop

00:21:33,679 --> 00:21:37,549
concept and then if you think about in

00:21:36,499 --> 00:21:39,649
this case actually think about

00:21:37,549 --> 00:21:42,289
kubernetes cublas at the top-level

00:21:39,649 --> 00:21:44,509
container and that and then each part

00:21:42,289 --> 00:21:46,159
inside the kubernetes is actually the

00:21:44,509 --> 00:21:47,659
level one that's the container and then

00:21:46,159 --> 00:21:49,369
the container inside that part is the

00:21:47,659 --> 00:21:52,220
level two nested container and nested

00:21:49,369 --> 00:21:54,109
under level one so so like we discover a

00:21:52,220 --> 00:21:55,669
lot of uses for nesting containers so

00:21:54,109 --> 00:21:58,669
the actual reason we build it last year

00:21:55,669 --> 00:22:01,460
and so mesas container right does

00:21:58,669 --> 00:22:04,099
support nesting it can be more than one

00:22:01,460 --> 00:22:06,499
level so deaths can be greater than to

00:22:04,099 --> 00:22:07,869
you and you can do volunteering between

00:22:06,499 --> 00:22:10,029
siblings

00:22:07,869 --> 00:22:12,820
and it's fully compatible with other

00:22:10,029 --> 00:22:14,559
features in maces container riser so how

00:22:12,820 --> 00:22:17,739
it works is actually like we provide an

00:22:14,559 --> 00:22:21,009
API on the agent allow executor or any

00:22:17,739 --> 00:22:23,049
processing inside a container to invoke

00:22:21,009 --> 00:22:24,489
that API to create an asset container in

00:22:23,049 --> 00:22:26,919
this case let's say the a secure

00:22:24,489 --> 00:22:28,929
container wants to create a nested

00:22:26,919 --> 00:22:31,539
container called nginx it just talked to

00:22:28,929 --> 00:22:32,830
agent API say launch with a bunch of

00:22:31,539 --> 00:22:34,809
configuration the container and a

00:22:32,830 --> 00:22:36,700
command and Ageing in the container

00:22:34,809 --> 00:22:38,590
either will just be responsible for

00:22:36,700 --> 00:22:40,419
launching that nginx container provision

00:22:38,590 --> 00:22:44,469
the filesystem for that docker image and

00:22:40,419 --> 00:22:47,649
then just launch it and and as I

00:22:44,469 --> 00:22:49,719
mentioned we support more than one more

00:22:47,649 --> 00:22:52,960
than two level nesting so one thing we

00:22:49,719 --> 00:22:55,029
do leverage this feature is debugging so

00:22:52,960 --> 00:22:57,549
the way we implement debugging support

00:22:55,029 --> 00:22:59,950
is actually like by invoking by

00:22:57,549 --> 00:23:01,419
launching and like a nasty container

00:22:59,950 --> 00:23:03,639
underneath the container you want to

00:23:01,419 --> 00:23:05,950
debug for example in this case you want

00:23:03,639 --> 00:23:08,919
to debug on the nginx container you have

00:23:05,950 --> 00:23:10,839
some problem with that container what we

00:23:08,919 --> 00:23:13,629
essentially do way into our debugging is

00:23:10,839 --> 00:23:15,369
we launching a level 3 in the container

00:23:13,629 --> 00:23:17,950
and nested underneath the nginx

00:23:15,369 --> 00:23:19,629
container and that container has asked

00:23:17,950 --> 00:23:21,729
us to the namespace of the net nginx

00:23:19,629 --> 00:23:23,859
container so that I can do do all the

00:23:21,729 --> 00:23:27,219
debugging work you wants to do so that's

00:23:23,859 --> 00:23:28,570
how we support debugging yeah so I think

00:23:27,219 --> 00:23:30,940
I just mentioned the debugging support

00:23:28,570 --> 00:23:32,259
so basically the debugging support that

00:23:30,940 --> 00:23:34,419
we want to do is basically provide

00:23:32,259 --> 00:23:37,210
equivalent or exact and darker attach

00:23:34,419 --> 00:23:38,619
and you can do that remotely so you

00:23:37,210 --> 00:23:40,450
don't have to be on the same machine to

00:23:38,619 --> 00:23:43,059
do darker exactly can do that from any

00:23:40,450 --> 00:23:44,289
machine as long as you're authorized and

00:23:43,059 --> 00:23:46,539
then it's fully integrated with the

00:23:44,289 --> 00:23:48,159
mostess authorization authentication and

00:23:46,539 --> 00:23:50,320
it's actually leveraged my sauce

00:23:48,159 --> 00:23:53,049
container nasty container support as I

00:23:50,320 --> 00:23:54,969
mentioned so ok so rather than saying

00:23:53,049 --> 00:24:03,039
anything more and give you a quick demo

00:23:54,969 --> 00:24:05,019
on this ok so let me do this so I have a

00:24:03,039 --> 00:24:14,139
so this is my Mac so I have a virtual

00:24:05,019 --> 00:24:16,749
machine running ok ok so in the real app

00:24:14,139 --> 00:24:19,750
demo so I'm gonna start a masive master

00:24:16,749 --> 00:24:22,880
first is that big enough

00:24:19,750 --> 00:24:25,010
okay so I'm starting a mazes master so I

00:24:22,880 --> 00:24:26,960
just specify IP it's a very standard way

00:24:25,010 --> 00:24:29,810
of starting meso semester so I'm going

00:24:26,960 --> 00:24:34,460
back to my browser just to check if the

00:24:29,810 --> 00:24:37,310
the the cluster is running so do this

00:24:34,460 --> 00:24:39,380
all right so the master is running so

00:24:37,310 --> 00:24:44,710
I'm now starting the agents so I have a

00:24:39,380 --> 00:24:44,710
tab open to just show you what

00:24:54,720 --> 00:25:04,529
yeah I think I saved the cafe did like

00:25:01,270 --> 00:25:04,529
the command somewhere

00:25:07,240 --> 00:25:11,950
okay so that's the command I already

00:25:10,210 --> 00:25:14,559
started a master the aging is basically

00:25:11,950 --> 00:25:16,299
like these are the flags I specify so

00:25:14,559 --> 00:25:18,340
especially for the isolation flag I

00:25:16,299 --> 00:25:20,529
specify a bunch of Isolators like doctor

00:25:18,340 --> 00:25:22,630
and time houses since Linux lonesome

00:25:20,529 --> 00:25:25,570
volume Isolators capability and

00:25:22,630 --> 00:25:27,000
namespaces pit and and you specify where

00:25:25,570 --> 00:25:28,929
you want to store the darker layers

00:25:27,000 --> 00:25:33,460
because I don't want to use the darker

00:25:28,929 --> 00:25:36,309
image and that's how I start the sleigh

00:25:33,460 --> 00:25:38,289
so I'm gonna start a slave I have come

00:25:36,309 --> 00:25:42,039
and saved somewhere okay so I just

00:25:38,289 --> 00:25:44,830
started today okay

00:25:42,039 --> 00:25:48,190
so I go back to the UI and do a fresh so

00:25:44,830 --> 00:25:51,669
there should be an agent registered on

00:25:48,190 --> 00:25:53,110
my virtual machine so let me go back now

00:25:51,669 --> 00:25:59,380
I'm gonna do is I'm actually I'm going

00:25:53,110 --> 00:26:01,090
to use Mesa execute to to launch a task

00:25:59,380 --> 00:26:02,830
group we call task group it's actually

00:26:01,090 --> 00:26:04,179
you can think of that as just part you

00:26:02,830 --> 00:26:10,029
have multiple containers running the

00:26:04,179 --> 00:26:14,010
same executor and we have a config for

00:26:10,029 --> 00:26:14,010
that task group let me go to that config

00:26:21,620 --> 00:26:26,120
yeah okay so that's the the config of

00:26:24,409 --> 00:26:29,510
the task group so basically it has two

00:26:26,120 --> 00:26:32,299
containers one called producer what the

00:26:29,510 --> 00:26:34,039
producer does is basically like specify

00:26:32,299 --> 00:26:37,070
a bunch of resources the command do it

00:26:34,039 --> 00:26:38,840
does is like it has a volume and it will

00:26:37,070 --> 00:26:40,730
constantly like every second it will

00:26:38,840 --> 00:26:42,409
touch a filing that vani using using the

00:26:40,730 --> 00:26:43,760
current date of the name in the vault

00:26:42,409 --> 00:26:45,740
the name of the file is the current date

00:26:43,760 --> 00:26:48,919
that's producing some filing the sheer

00:26:45,740 --> 00:26:52,940
volume in the actual using a docker

00:26:48,919 --> 00:26:54,799
image and has this volume it's a sheer

00:26:52,940 --> 00:26:56,870
volume and then there and the container

00:26:54,799 --> 00:26:59,390
is running the same executors called

00:26:56,870 --> 00:27:00,770
consumer the consumer is actually doing

00:26:59,390 --> 00:27:03,590
one simple thing which is just basically

00:27:00,770 --> 00:27:06,500
on LS this volume trying to find out the

00:27:03,590 --> 00:27:08,690
content in this volume and it has the

00:27:06,500 --> 00:27:10,970
same share of owning so it was so if

00:27:08,690 --> 00:27:13,010
that working properly you will see that

00:27:10,970 --> 00:27:15,620
the file you produced by the producer

00:27:13,010 --> 00:27:17,779
and the consumer can see those files and

00:27:15,620 --> 00:27:19,490
it's using a docker container as well so

00:27:17,779 --> 00:27:23,059
that's the the configuration of the task

00:27:19,490 --> 00:27:26,840
group so I'm gonna just launch that all

00:27:23,059 --> 00:27:32,779
right so it's running I'm gonna go to

00:27:26,840 --> 00:27:35,419
the UI yeah I can see like your two

00:27:32,779 --> 00:27:39,140
tasks running producer-consumer on and I

00:27:35,419 --> 00:27:43,279
can go to the sandbox of the producer

00:27:39,140 --> 00:27:45,350
I'm sorry consumer just to see if the

00:27:43,279 --> 00:27:47,779
ste out so it's counseling printing

00:27:45,350 --> 00:27:51,020
those files inside actually are volumes

00:27:47,779 --> 00:27:52,340
so that's working okay so yeah I think I

00:27:51,020 --> 00:27:54,950
just launched a time I mean if you go

00:27:52,340 --> 00:27:57,529
browse the content in the sandbox so if

00:27:54,950 --> 00:28:04,159
you go to executors so okay wait a

00:27:57,529 --> 00:28:05,960
second if we go to the executors sandbox

00:28:04,159 --> 00:28:07,429
so that's the executors sandbox you have

00:28:05,960 --> 00:28:08,990
a sheer volume here and they serve only

00:28:07,429 --> 00:28:12,020
contain all these files that you just

00:28:08,990 --> 00:28:13,880
touched and then if you go to each task

00:28:12,020 --> 00:28:16,190
you can see can like these are the

00:28:13,880 --> 00:28:18,350
sandbox for the consumer and producer

00:28:16,190 --> 00:28:20,539
and then go to there you have the CD out

00:28:18,350 --> 00:28:22,220
in this DVR it's fully nested and then

00:28:20,539 --> 00:28:23,990
use the top level a secure source it's

00:28:22,220 --> 00:28:26,340
nested container and top level executor

00:28:23,990 --> 00:28:28,950
is running level one container and then

00:28:26,340 --> 00:28:30,510
the continued underneath the content

00:28:28,950 --> 00:28:32,190
that the actual task is running in their

00:28:30,510 --> 00:28:34,770
nest to net and I will to nest a

00:28:32,190 --> 00:28:36,900
container and you can get the STD out in

00:28:34,770 --> 00:28:40,140
the STD areas in the same way as before

00:28:36,900 --> 00:28:41,580
okay so what I'm gonna do here is say

00:28:40,140 --> 00:28:43,650
there's a problem with the consumer I

00:28:41,580 --> 00:28:45,090
want to debug that container so what I'm

00:28:43,650 --> 00:28:49,290
gonna do is actually I'm switching back

00:28:45,090 --> 00:28:51,660
to my Mac so just to to show you that

00:28:49,290 --> 00:28:53,000
it's possible to do that on a remote

00:28:51,660 --> 00:28:57,150
machine for debugging

00:28:53,000 --> 00:29:01,770
so I'm using a COI which is actually D

00:28:57,150 --> 00:29:03,630
cos Y but but it's gonna we're gonna add

00:29:01,770 --> 00:29:07,080
in my so CI for that you so that it

00:29:03,630 --> 00:29:09,450
works for many amaze us so the DC I CRI

00:29:07,080 --> 00:29:14,610
is basically just hitting maysa endpoint

00:29:09,450 --> 00:29:16,950
to streaming those responses see if we

00:29:14,610 --> 00:29:20,460
can run this so I think I already

00:29:16,950 --> 00:29:22,860
convict this I do a DC US task sorry

00:29:20,460 --> 00:29:24,990
task it show all the tasks currently

00:29:22,860 --> 00:29:26,970
running inside a cluster you can see the

00:29:24,990 --> 00:29:29,700
consumer and producer here now say I'm

00:29:26,970 --> 00:29:34,850
gonna do a debugging for that container

00:29:29,700 --> 00:29:38,130
so I'm gonna do it the COS task exact

00:29:34,850 --> 00:29:41,070
consumer and then one would launch a

00:29:38,130 --> 00:29:47,390
shell oh this doesn't work I think I

00:29:41,070 --> 00:29:47,390
need to do - CI

00:29:47,990 --> 00:29:53,780
so - tea - I'm excite it's interactive

00:29:50,630 --> 00:29:55,490
and using a terminal okay so now I'm

00:29:53,780 --> 00:29:59,510
entering that container if you do an LS

00:29:55,490 --> 00:30:01,400
you can see the volume so if I CD into

00:29:59,510 --> 00:30:04,550
volume and you can see all these file in

00:30:01,400 --> 00:30:10,520
the sheer volume and you can also get

00:30:04,550 --> 00:30:13,300
the STD out files and yeah and I think

00:30:10,520 --> 00:30:15,200
terminal also works me I also works so

00:30:13,300 --> 00:30:17,090
yeah I think that's kind of the

00:30:15,200 --> 00:30:18,950
debugging so if you go to UI what's

00:30:17,090 --> 00:30:21,980
interesting you can find out is if you

00:30:18,950 --> 00:30:24,230
go to UI and if you go to the consumer

00:30:21,980 --> 00:30:25,940
sandbox you can actually see a

00:30:24,230 --> 00:30:27,530
subdirectory being traded which is

00:30:25,940 --> 00:30:30,010
actually the nasty container in the nice

00:30:27,530 --> 00:30:35,240
tight container and then if you go to

00:30:30,010 --> 00:30:36,680
these containers to see the command so

00:30:35,240 --> 00:30:43,040
you can actually see all the command

00:30:36,680 --> 00:30:45,110
that I kind of type previously so all

00:30:43,040 --> 00:30:47,420
the command that you do while you're

00:30:45,110 --> 00:30:50,420
debugging are actually also on captured

00:30:47,420 --> 00:30:52,490
and save in the sandbox of that nasty

00:30:50,420 --> 00:30:54,110
container and the nice the level one

00:30:52,490 --> 00:30:56,600
that's the container so that's how the

00:30:54,110 --> 00:30:58,160
whole thing's works right now and I'm

00:30:56,600 --> 00:31:00,530
glad that we do that in this way it's

00:30:58,160 --> 00:31:03,080
more extensible alright so I think

00:31:00,530 --> 00:31:05,890
that's it for the demo let me go back to

00:31:03,080 --> 00:31:05,890
my talk

00:31:08,330 --> 00:31:13,100
right so future row maps I think that's

00:31:11,510 --> 00:31:14,720
pretty important that I think we have a

00:31:13,100 --> 00:31:17,270
lot of things to do I just want to

00:31:14,720 --> 00:31:19,760
highlight a few things one thing we want

00:31:17,270 --> 00:31:21,350
to do is stand alone mode so we got some

00:31:19,760 --> 00:31:23,060
feedback from folks that it would be

00:31:21,350 --> 00:31:24,860
nice that we can using the mesas

00:31:23,060 --> 00:31:27,290
containerized without Yuma using mesas

00:31:24,860 --> 00:31:29,360
master yes we are adding that support

00:31:27,290 --> 00:31:32,060
right now and it will be available

00:31:29,360 --> 00:31:33,890
pretty soon I was saying a month that

00:31:32,060 --> 00:31:36,710
you can you can just hit an age in the

00:31:33,890 --> 00:31:38,150
API to launching a container on the edge

00:31:36,710 --> 00:31:40,370
and without even involving any offer

00:31:38,150 --> 00:31:42,800
cycle and I think there's another

00:31:40,370 --> 00:31:44,780
isolators that's contributed by Apple

00:31:42,800 --> 00:31:46,880
folks which is called host port

00:31:44,780 --> 00:31:48,770
isolation for those folks that wants to

00:31:46,880 --> 00:31:50,630
run container on host network and then

00:31:48,770 --> 00:31:52,790
only isolate the container using ports

00:31:50,630 --> 00:31:55,070
this will be super helpful because that

00:31:52,790 --> 00:31:57,440
kind of enforced which port that a

00:31:55,070 --> 00:31:59,380
container can use so basically any port

00:31:57,440 --> 00:32:02,210
that's not allocated to that container

00:31:59,380 --> 00:32:04,520
will not be used by that container so

00:32:02,210 --> 00:32:06,410
there's some kernel feature also so the

00:32:04,520 --> 00:32:08,660
ice ice what the isolator does is

00:32:06,410 --> 00:32:11,090
basically scan those proc file to make

00:32:08,660 --> 00:32:13,220
sure that all the ports the processes

00:32:11,090 --> 00:32:15,380
inside that container is listening on or

00:32:13,220 --> 00:32:17,180
using our node parties it's part of the

00:32:15,380 --> 00:32:19,070
allocated resources if not then it will

00:32:17,180 --> 00:32:21,380
just fill that container it's a very

00:32:19,070 --> 00:32:24,020
good thing that Apple guys contributed

00:32:21,380 --> 00:32:26,540
and that part is being merged already so

00:32:24,020 --> 00:32:27,830
if you wants to use the latest head that

00:32:26,540 --> 00:32:30,320
you can check should be able to use that

00:32:27,830 --> 00:32:33,230
but if not wait for the next release

00:32:30,320 --> 00:32:35,360
so Apple forces are also adding my pen

00:32:33,230 --> 00:32:38,230
module support to allow mace those

00:32:35,360 --> 00:32:40,790
continue to use any arbitrary pen module

00:32:38,230 --> 00:32:42,020
and then I mentioned earlier that we

00:32:40,790 --> 00:32:44,210
want to do this unit for all its

00:32:42,020 --> 00:32:46,310
artifacts store because we have a lot of

00:32:44,210 --> 00:32:48,020
like artifact store and cash inside

00:32:46,310 --> 00:32:50,270
missiles like for example factory cash

00:32:48,020 --> 00:32:52,610
and you have darker layers and right now

00:32:50,270 --> 00:32:54,260
it's like all separate which is which is

00:32:52,610 --> 00:32:56,300
not good thing because you have to

00:32:54,260 --> 00:32:58,280
really implement all these like cash

00:32:56,300 --> 00:32:59,870
replacement algorithms garbage

00:32:58,280 --> 00:33:02,480
collection algorithm for those cash

00:32:59,870 --> 00:33:04,460
which is not in extensible model so I

00:33:02,480 --> 00:33:06,230
want to move to a unified artifact store

00:33:04,460 --> 00:33:08,450
using containers for content addressable

00:33:06,230 --> 00:33:10,010
storage to make sure that we don't have

00:33:08,450 --> 00:33:12,610
duplicates there and then we have a

00:33:10,010 --> 00:33:17,390
unified way to do garbage collection and

00:33:12,610 --> 00:33:18,980
do cache replacement and also regarding

00:33:17,390 --> 00:33:19,710
security when they add support for set

00:33:18,980 --> 00:33:21,990
comments

00:33:19,710 --> 00:33:24,120
seelix and another thing that we just

00:33:21,990 --> 00:33:27,299
get started doing discussion is called

00:33:24,120 --> 00:33:29,399
vm support and user name space so we are

00:33:27,299 --> 00:33:30,840
doing some research on vm support trying

00:33:29,399 --> 00:33:32,520
to figure out what's the best way to do

00:33:30,840 --> 00:33:34,049
vm support because I do get some

00:33:32,520 --> 00:33:35,490
feedback from folks that people wants to

00:33:34,049 --> 00:33:37,470
mix the work alone I rinse them as

00:33:35,490 --> 00:33:39,179
container rinse amends a virtual machine

00:33:37,470 --> 00:33:41,010
because the security model provided my

00:33:39,179 --> 00:33:43,649
container is not that secure because the

00:33:41,010 --> 00:33:45,360
kernel still shared compared to virtual

00:33:43,649 --> 00:33:47,490
machine which is more strictly more

00:33:45,360 --> 00:33:50,340
secure than container for those

00:33:47,490 --> 00:33:53,390
applications that have a sensitive data

00:33:50,340 --> 00:33:56,429
or any anxiety main VM is sometimes more

00:33:53,390 --> 00:33:58,830
desirable than running a container and

00:33:56,429 --> 00:34:00,840
also user name space I think Apple folks

00:33:58,830 --> 00:34:02,700
is trying to do the usernames best space

00:34:00,840 --> 00:34:04,140
support recently so we just have the

00:34:02,700 --> 00:34:07,649
discussion and they are starting to do

00:34:04,140 --> 00:34:09,300
some prototype yeah so that's kind of a

00:34:07,649 --> 00:34:11,070
future road map if you have anything

00:34:09,300 --> 00:34:13,679
feel free to talk to me that you want us

00:34:11,070 --> 00:34:15,419
to work out so just give you a quick

00:34:13,679 --> 00:34:18,000
summary so containerization in May so

00:34:15,419 --> 00:34:20,460
it's it's very stable it's in production

00:34:18,000 --> 00:34:21,810
for years and and we do have the option

00:34:20,460 --> 00:34:24,450
to allow you to not rely on darker

00:34:21,810 --> 00:34:26,460
daemon if you don't want to and it's

00:34:24,450 --> 00:34:28,409
very pluggable and extensible we can are

00:34:26,460 --> 00:34:31,589
arbitrary extension by writing an

00:34:28,409 --> 00:34:33,179
isolator or provision or launcher and we

00:34:31,589 --> 00:34:35,429
also embracing all the containers

00:34:33,179 --> 00:34:37,109
standard we are embracing container

00:34:35,429 --> 00:34:38,369
networking interface container storage

00:34:37,109 --> 00:34:41,810
interface in the open container

00:34:38,369 --> 00:34:43,619
initiative and we do have a

00:34:41,810 --> 00:34:45,359
containerization working group so

00:34:43,619 --> 00:34:48,389
there's a regular meeting every two

00:34:45,359 --> 00:34:51,720
weeks at Thursday morning 9:00 a.m. PST

00:34:48,389 --> 00:34:54,570
Pacific time us we do have a slack

00:34:51,720 --> 00:34:55,980
channel called container Iser if you're

00:34:54,570 --> 00:34:58,410
interested in any of the things that

00:34:55,980 --> 00:35:00,359
happen inside containerization part of

00:34:58,410 --> 00:35:04,290
the mesas project feel free to join us

00:35:00,359 --> 00:35:06,089
and and all the meetings are recorded we

00:35:04,290 --> 00:35:08,310
have a pretty good audience every time

00:35:06,089 --> 00:35:10,320
and we have a pretty good agenda every

00:35:08,310 --> 00:35:12,570
time too so if you're interested you can

00:35:10,320 --> 00:35:14,310
join us and all the notes in agenda are

00:35:12,570 --> 00:35:17,160
actually are in this link if you're

00:35:14,310 --> 00:35:19,770
interested and also this is accessible

00:35:17,160 --> 00:35:23,210
in the missus github documentation

00:35:19,770 --> 00:35:26,430
website ok so I think that's it

00:35:23,210 --> 00:35:28,730
open the door for questions thank you

00:35:26,430 --> 00:35:28,730
very much

00:35:31,320 --> 00:35:36,900
thanks Jer I will have abused my role as

00:35:35,500 --> 00:35:38,970
a trek late and I was the first question

00:35:36,900 --> 00:35:41,260
okay so you've been working in

00:35:38,970 --> 00:35:45,730
containerization before doctor became a

00:35:41,260 --> 00:35:49,030
thing so if I would ask you to name two

00:35:45,730 --> 00:35:52,000
or three reasons why container became so

00:35:49,030 --> 00:35:54,369
popular do not divide for developers

00:35:52,000 --> 00:35:57,690
develops programmers cluster cluster

00:35:54,369 --> 00:36:00,400
operators but three two main reasons why

00:35:57,690 --> 00:36:01,030
containers as a concept became some

00:36:00,400 --> 00:36:03,730
popular

00:36:01,030 --> 00:36:06,310
what would you say yeah so I purchased

00:36:03,730 --> 00:36:08,400
name one I think the major reason that

00:36:06,310 --> 00:36:10,780
people moved to container world is

00:36:08,400 --> 00:36:12,850
because developers really liked

00:36:10,780 --> 00:36:14,710
containers because now they have a

00:36:12,850 --> 00:36:16,359
standard way to package their

00:36:14,710 --> 00:36:18,010
applications just imagine before

00:36:16,359 --> 00:36:20,590
container what's the way you package

00:36:18,010 --> 00:36:24,300
your applications its platform dependent

00:36:20,590 --> 00:36:27,550
on centralized or record use rpms or

00:36:24,300 --> 00:36:28,960
Urban's who use DVM packages on some

00:36:27,550 --> 00:36:33,040
like I don't know what's the package

00:36:28,960 --> 00:36:35,050
mechanic on Windows or OSX so before

00:36:33,040 --> 00:36:36,820
container came along that there's no

00:36:35,050 --> 00:36:40,359
standard way to package a application

00:36:36,820 --> 00:36:41,170
deliver the application to devil to to

00:36:40,359 --> 00:36:43,060
sres

00:36:41,170 --> 00:36:46,180
so I think that's the biggest thing that

00:36:43,060 --> 00:36:48,790
I like container is like so the app

00:36:46,180 --> 00:36:50,380
simplified the developers a bundle to to

00:36:48,790 --> 00:36:52,090
package the application and run them out

00:36:50,380 --> 00:36:56,200
their applications I think that's the

00:36:52,090 --> 00:37:02,609
biggest way of container okay do we have

00:36:56,200 --> 00:37:02,609
other questions one hand on the left

00:37:05,470 --> 00:37:10,960
um it's it's great to see of building

00:37:08,020 --> 00:37:13,450
tools for debugging of course like one

00:37:10,960 --> 00:37:14,980
of the big cells of docker when you're

00:37:13,450 --> 00:37:19,030
on a host is being able to run things

00:37:14,980 --> 00:37:21,490
like docker PS docker kill and all of

00:37:19,030 --> 00:37:24,550
the other like CLI that's exposed with

00:37:21,490 --> 00:37:27,250
the API is that plans to build like some

00:37:24,550 --> 00:37:29,530
equivalency with muzzles container Iser

00:37:27,250 --> 00:37:33,550
so if I was on an agent yeah I could run

00:37:29,530 --> 00:37:36,069
the equivalent of docker PS right now in

00:37:33,550 --> 00:37:38,859
fact we have operated API on agent if

00:37:36,069 --> 00:37:40,750
you have a curl you can just curl those

00:37:38,859 --> 00:37:42,550
endpoint to to launch a container cure

00:37:40,750 --> 00:37:44,530
container and then get all the

00:37:42,550 --> 00:37:46,480
containers or any on the agent but we

00:37:44,530 --> 00:37:47,950
don't build that fear I yet but that's

00:37:46,480 --> 00:37:49,630
on the roadmap who definitely wants to

00:37:47,950 --> 00:37:50,980
build SEO I think that's how kind of the

00:37:49,630 --> 00:37:52,119
project I want to do for a long time

00:37:50,980 --> 00:37:54,040
just don't have the resources to do that

00:37:52,119 --> 00:37:55,560
but but that's something we won't do for

00:37:54,040 --> 00:37:58,119
a long time what everyone's to do that

00:37:55,560 --> 00:38:00,130
even with other CLI you can still hit

00:37:58,119 --> 00:38:02,650
those agent endpoint operate the api's

00:38:00,130 --> 00:38:05,020
to to to do the things he wants to do in

00:38:02,650 --> 00:38:08,319
fact all these debugging functionality

00:38:05,020 --> 00:38:08,890
like attach exact or all part of that

00:38:08,319 --> 00:38:11,140
API

00:38:08,890 --> 00:38:14,650
so if essentially right now you can just

00:38:11,140 --> 00:38:16,540
write a script using curl to do that or

00:38:14,650 --> 00:38:17,920
write a simple Python script to do that

00:38:16,540 --> 00:38:24,160
but we're gonna build out we will be

00:38:17,920 --> 00:38:26,230
able COI for that great so regarding CI

00:38:24,160 --> 00:38:29,770
it's not just on the roadmap it's on the

00:38:26,230 --> 00:38:32,230
works so if you visit the mesosphere

00:38:29,770 --> 00:38:37,260
booth there is a guy with a long beard

00:38:32,230 --> 00:38:43,020
Kevin clues is the lead for this effort

00:38:37,260 --> 00:38:43,020
other questions here

00:38:47,400 --> 00:38:53,310
can you tell us a bit more about vm's

00:38:50,880 --> 00:38:55,080
report the EM support yeah yeah because

00:38:53,310 --> 00:38:58,650
the lifecycle is quite different in VM

00:38:55,080 --> 00:39:00,780
from a contract yeah so we just get so

00:38:58,650 --> 00:39:02,400
so during the the containerization

00:39:00,780 --> 00:39:04,380
working group every two weeks we just

00:39:02,400 --> 00:39:06,450
get started at the background research

00:39:04,380 --> 00:39:08,580
how we want to do the VN supporting some

00:39:06,450 --> 00:39:10,200
missiles and we start this dog trying to

00:39:08,580 --> 00:39:13,020
collect all like how other people are

00:39:10,200 --> 00:39:15,900
doing VM support in their systems I

00:39:13,020 --> 00:39:18,600
think we don't have a kind of design doc

00:39:15,900 --> 00:39:21,330
yeah but I think one way to do that is

00:39:18,600 --> 00:39:23,370
support KVM because essentially kayvyun

00:39:21,330 --> 00:39:25,500
just a Linux process you can and you can

00:39:23,370 --> 00:39:27,240
you see who's who to manage the resource

00:39:25,500 --> 00:39:28,860
isolation for that but there's some

00:39:27,240 --> 00:39:30,630
other like thinking on that - I just

00:39:28,860 --> 00:39:33,300
want to do other research first before

00:39:30,630 --> 00:39:35,850
we moving forward but we do see a lot of

00:39:33,300 --> 00:39:37,350
kind of use cases for that I think

00:39:35,850 --> 00:39:39,230
that's kind of important that's the next

00:39:37,350 --> 00:39:41,310
thing we want to do as a group

00:39:39,230 --> 00:39:42,810
containerization working group and a lot

00:39:41,310 --> 00:39:44,310
of people are interested in that if

00:39:42,810 --> 00:39:46,020
you're interested can participate in the

00:39:44,310 --> 00:39:47,130
working group - there's a doc we are

00:39:46,020 --> 00:39:49,290
trying to fill out all these background

00:39:47,130 --> 00:39:52,620
research for example how criminalist is

00:39:49,290 --> 00:39:55,650
doing VM support how how OpenStack is

00:39:52,620 --> 00:39:57,360
doing VM support how how kick a VM is

00:39:55,650 --> 00:40:01,380
doing I'm someone mentioned hyper and

00:39:57,360 --> 00:40:03,450
also there's some and there's some

00:40:01,380 --> 00:40:04,950
windows people like Windows has virtual

00:40:03,450 --> 00:40:06,300
machines aportfolio windows containers

00:40:04,950 --> 00:40:07,830
like things like that we just who wants

00:40:06,300 --> 00:40:09,840
to do all these research first before

00:40:07,830 --> 00:40:12,060
moving to a design so that we are in

00:40:09,840 --> 00:40:15,240
that researching face still and I'm

00:40:12,060 --> 00:40:17,160
gonna have a sink in two weeks on that

00:40:15,240 --> 00:40:19,230
because the last time we check is like a

00:40:17,160 --> 00:40:21,600
month ago that we asked folks to do

00:40:19,230 --> 00:40:25,380
research themselves and then go back

00:40:21,600 --> 00:40:26,700
together to have a kind of a sink up in

00:40:25,380 --> 00:40:29,640
the working group meeting so that we can

00:40:26,700 --> 00:40:30,300
present each systems and then we decide

00:40:29,640 --> 00:40:33,230
what to do next

00:40:30,300 --> 00:40:33,230
make sense

00:40:36,370 --> 00:40:39,580
more questions

00:40:43,970 --> 00:40:50,480
okay what about cleaning up of like

00:40:47,990 --> 00:40:53,060
images that was created by you see are

00:40:50,480 --> 00:40:55,580
either plans to create some to linger

00:40:53,060 --> 00:40:58,520
out that wait and can you repeat the

00:40:55,580 --> 00:41:01,580
question so when you create an image in

00:40:58,520 --> 00:41:03,500
an indoor cur so there after some time

00:41:01,580 --> 00:41:05,030
there are a lot of like stale images

00:41:03,500 --> 00:41:07,460
that you don't need haha and they

00:41:05,030 --> 00:41:10,250
invented this like some prop yeah okay

00:41:07,460 --> 00:41:12,080
dueling to to clean them up yes so this

00:41:10,250 --> 00:41:14,240
is actually being worked on right now so

00:41:12,080 --> 00:41:16,730
I think their patches contributed by

00:41:14,240 --> 00:41:19,610
uber on that because they want to write

00:41:16,730 --> 00:41:21,530
on missus contain riser in in production

00:41:19,610 --> 00:41:23,870
and that that's one thing they want to

00:41:21,530 --> 00:41:25,970
fix which is like GC those image layers

00:41:23,870 --> 00:41:27,710
that's not being used so we're adding an

00:41:25,970 --> 00:41:29,750
endpoint on the agent trying allowing to

00:41:27,710 --> 00:41:31,910
prune images and there's some more

00:41:29,750 --> 00:41:34,790
features on that there's actually design

00:41:31,910 --> 00:41:36,200
dog somewhere in the mailing list that

00:41:34,790 --> 00:41:38,060
basically we're adding this endpoint

00:41:36,200 --> 00:41:40,970
allow you to operate to monitor the disk

00:41:38,060 --> 00:41:42,530
usage if that reaches certain limits you

00:41:40,970 --> 00:41:45,260
can hit that endpoint to just say hey

00:41:42,530 --> 00:41:47,300
prune on unused images it's not a simple

00:41:45,260 --> 00:41:48,920
problem because it's you think about

00:41:47,300 --> 00:41:50,420
garbage collection right like people are

00:41:48,920 --> 00:41:52,040
doing garbage collection for years it's

00:41:50,420 --> 00:41:54,260
not a well solve the research problem

00:41:52,040 --> 00:41:55,580
yet think about Java garbage collection

00:41:54,260 --> 00:41:57,170
right you have to do either marking

00:41:55,580 --> 00:41:58,970
Street or reference counting things like

00:41:57,170 --> 00:42:00,830
this but we are adding the same point

00:41:58,970 --> 00:42:02,120
right now so it will be ready so and

00:42:00,830 --> 00:42:02,810
initial algorithm we use is

00:42:02,120 --> 00:42:05,540
mark-and-sweep

00:42:02,810 --> 00:42:07,370
to just rock all the used layer layers

00:42:05,540 --> 00:42:09,740
and then delete all these unused layers

00:42:07,370 --> 00:42:12,140
and then make some exception for all

00:42:09,740 --> 00:42:14,840
things like I think uber has this use

00:42:12,140 --> 00:42:16,910
case where you don't want to delete some

00:42:14,840 --> 00:42:19,370
base images when you do approve so we're

00:42:16,910 --> 00:42:24,100
adding those filters to so that you it

00:42:19,370 --> 00:42:28,390
will be ready in one 51.5 next release

00:42:24,100 --> 00:42:31,900
cool if you promise that to live in 1.5

00:42:28,390 --> 00:42:31,900
more questions

00:42:34,250 --> 00:42:40,250
okay looks like they're no more on like

00:42:36,560 --> 00:42:42,260
questions if you have questions later I

00:42:40,250 --> 00:42:44,840
will try to spend the next day at the

00:42:42,260 --> 00:42:48,290
booth and you can always shoot us an

00:42:44,840 --> 00:42:52,670
email and we're going for a break and

00:42:48,290 --> 00:42:55,780
the next talk will be at 16:30 here it's

00:42:52,670 --> 00:43:00,340
about the container storage initiative

00:42:55,780 --> 00:43:03,489
have a good break and see you afterwards

00:43:00,340 --> 00:43:03,489

YouTube URL: https://www.youtube.com/watch?v=vNE38HLIm4o


