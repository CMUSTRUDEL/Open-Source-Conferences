Title: Max Stoiber - The past, present and future of CSS-in-JS
Publication date: 2020-02-22
Playlist: AgentConf 2020
Description: 
	The past, present and future of CSS-in-JS
Captions: 
	00:00:00,030 --> 00:00:05,400
I just feel like it's a very community

00:00:03,300 --> 00:00:08,910
driven conference it also is a lot of

00:00:05,400 --> 00:00:10,769
quality and people are just nice hi my

00:00:08,910 --> 00:00:11,730
name's Sarah and this is agent comp in

00:00:10,769 --> 00:00:15,420
Dortmund

00:00:11,730 --> 00:00:18,099
[Music]

00:00:15,420 --> 00:00:20,500
amazing venue Austria is beautiful

00:00:18,099 --> 00:00:25,300
meeting all the people in the community

00:00:20,500 --> 00:00:30,910
and getting to go and hang out and ski

00:00:25,300 --> 00:00:33,989
[Music]

00:00:30,910 --> 00:00:33,989
[Applause]

00:00:35,160 --> 00:00:41,830
thank you thank you

00:00:37,440 --> 00:00:42,579
hey like she said I'm max Stover I'm

00:00:41,830 --> 00:00:44,559
from Vienna

00:00:42,579 --> 00:00:46,089
so I just took the train here which is

00:00:44,559 --> 00:00:47,920
super nice I'm always super excited to

00:00:46,089 --> 00:00:50,320
go to agent conf and that I get to go

00:00:47,920 --> 00:00:52,540
skiing and talk about tech at the same

00:00:50,320 --> 00:00:56,559
time it's probably the best conference

00:00:52,540 --> 00:00:59,589
on the planet I think I'm at MX stbr

00:00:56,559 --> 00:01:01,269
pretty much anywhere on the internet the

00:00:59,589 --> 00:01:06,220
handle looks kind of complicated but

00:01:01,269 --> 00:01:10,270
it's just my name without any vowels I'm

00:01:06,220 --> 00:01:12,369
here today to talk about CSS NGS now CSS

00:01:10,270 --> 00:01:13,869
and J's I first want to cover how it

00:01:12,369 --> 00:01:17,170
works what it is and then I want to go

00:01:13,869 --> 00:01:19,560
over why we use it and sort of the

00:01:17,170 --> 00:01:22,180
evolution that we've had so far

00:01:19,560 --> 00:01:25,780
CSS and J's in general looks something

00:01:22,180 --> 00:01:29,350
like this you have you write your CSS in

00:01:25,780 --> 00:01:30,940
JavaScript in this case this is using

00:01:29,350 --> 00:01:32,920
the styled components library which is

00:01:30,940 --> 00:01:36,280
the one that I created but really almost

00:01:32,920 --> 00:01:39,070
any CSS and J's library will look kind

00:01:36,280 --> 00:01:42,070
of like this what we have here is we

00:01:39,070 --> 00:01:45,280
define a title component this title is a

00:01:42,070 --> 00:01:47,950
react component that renders in h1 HTML

00:01:45,280 --> 00:01:50,080
tag that's why we say styles dot h1

00:01:47,950 --> 00:01:53,740
essentially our title react component is

00:01:50,080 --> 00:01:55,870
a styled h1 tag and it will be styled

00:01:53,740 --> 00:01:57,760
with whatever Styles we pass into the

00:01:55,870 --> 00:02:00,040
tag template literal so in this case our

00:01:57,760 --> 00:02:03,490
title will have a color of a valid red

00:02:00,040 --> 00:02:05,530
and a font size of 24 pixels we can then

00:02:03,490 --> 00:02:07,210
use this component like any other react

00:02:05,530 --> 00:02:10,450
component that you're used to

00:02:07,210 --> 00:02:13,750
now under the hood we actually go ahead

00:02:10,450 --> 00:02:16,269
and we create a very unique class name

00:02:13,750 --> 00:02:18,610
for you we hash the styles that you pass

00:02:16,269 --> 00:02:20,080
into the tag template literal and create

00:02:18,610 --> 00:02:22,480
a class name that is completely unique

00:02:20,080 --> 00:02:23,920
so what this looks like in the browser

00:02:22,480 --> 00:02:26,980
and look closely because it's going to

00:02:23,920 --> 00:02:30,849
be a short animation is that we in

00:02:26,980 --> 00:02:33,370
some CSS in this case it dot AC - some

00:02:30,849 --> 00:02:36,010
random hash classname and then we

00:02:33,370 --> 00:02:41,170
actually render an h1 in the HTML with

00:02:36,010 --> 00:02:43,390
that class name applied now alright

00:02:41,170 --> 00:02:45,250
that's why why would you ever do this

00:02:43,390 --> 00:02:47,250
why does this make any sense at all why

00:02:45,250 --> 00:02:50,050
not just write CSS like you're used to

00:02:47,250 --> 00:02:53,260
for me personally there's five big

00:02:50,050 --> 00:02:54,970
reasons why I like CSS and J's and the

00:02:53,260 --> 00:02:57,879
biggest one is the confidence it gives

00:02:54,970 --> 00:02:59,769
me because every piece of styling is

00:02:57,879 --> 00:03:02,769
co-located with the component that it

00:02:59,769 --> 00:03:05,530
Styles I can add change and delete CSS

00:03:02,769 --> 00:03:07,480
without any unintended consequences I

00:03:05,530 --> 00:03:10,060
don't need to worry about any other

00:03:07,480 --> 00:03:11,860
component any other part of my app when

00:03:10,060 --> 00:03:15,280
I'm editing the styling of a certain

00:03:11,860 --> 00:03:17,739
component this leads to really painless

00:03:15,280 --> 00:03:19,450
maintenance when I'm working on a

00:03:17,739 --> 00:03:21,610
component when I'm working on my title

00:03:19,450 --> 00:03:23,140
component I don't have to go grip around

00:03:21,610 --> 00:03:25,000
my codebase to figure out where exactly

00:03:23,140 --> 00:03:27,610
that class name is that is overriding

00:03:25,000 --> 00:03:29,079
the styles of my Tison component I don't

00:03:27,610 --> 00:03:30,849
even have to go look around for other

00:03:29,079 --> 00:03:32,829
things that could be affecting the title

00:03:30,849 --> 00:03:34,840
component because all of the styles that

00:03:32,829 --> 00:03:40,060
affect my title component are right

00:03:34,840 --> 00:03:41,680
there next to the component another big

00:03:40,060 --> 00:03:44,950
thing that's huge for maintenance is

00:03:41,680 --> 00:03:47,139
that CSS nsj gets rid of the append only

00:03:44,950 --> 00:03:51,069
stylesheet if you've ever worked in a

00:03:47,139 --> 00:03:54,250
big app with sass or less or just

00:03:51,069 --> 00:03:56,500
vanilla CSS eventually you usually end

00:03:54,250 --> 00:03:58,780
up with an append-only style sheet where

00:03:56,500 --> 00:04:01,299
you're kind of scared to change anything

00:03:58,780 --> 00:04:02,590
in that was sort of written before and

00:04:01,299 --> 00:04:04,329
you only add stuff to it

00:04:02,590 --> 00:04:06,340
I know I've experienced this multiple

00:04:04,329 --> 00:04:08,350
times but we CSS in jest

00:04:06,340 --> 00:04:10,030
that can't happen because if I stop

00:04:08,350 --> 00:04:11,889
using a component and I delete the

00:04:10,030 --> 00:04:14,139
component all of its CSS is

00:04:11,889 --> 00:04:16,510
automatically deleted as well which

00:04:14,139 --> 00:04:20,620
means I never end up with any dead CSS

00:04:16,510 --> 00:04:23,710
in my app at all that is huge for

00:04:20,620 --> 00:04:25,539
teamwork right when I work in a team I

00:04:23,710 --> 00:04:28,000
might know CSS really well and you might

00:04:25,539 --> 00:04:30,310
know it as really well but not everybody

00:04:28,000 --> 00:04:32,080
in your team will know CSS super well

00:04:30,310 --> 00:04:34,419
they won't be an expert with many years

00:04:32,080 --> 00:04:36,490
of experience in how to architect your

00:04:34,419 --> 00:04:37,960
CSS files how to keep them maintainable

00:04:36,490 --> 00:04:41,050
and how to avoid the append-only

00:04:37,960 --> 00:04:44,919
stylesheet manually with CSS

00:04:41,050 --> 00:04:46,300
jas I sort of everybody gets this huge

00:04:44,919 --> 00:04:48,099
confidence boost of just being able to

00:04:46,300 --> 00:04:50,289
work on their component and not having

00:04:48,099 --> 00:04:51,340
to work on not not having to worry about

00:04:50,289 --> 00:04:54,460
anything else

00:04:51,340 --> 00:04:56,740
of course he doesn't mean you can't

00:04:54,460 --> 00:04:58,840
write bad CSS you can still write bad

00:04:56,740 --> 00:05:00,400
CSS but at least it's contained to a

00:04:58,840 --> 00:05:02,319
single component and you can then clean

00:05:00,400 --> 00:05:05,379
that up later it won't affect anything

00:05:02,319 --> 00:05:07,539
else in your entire application now

00:05:05,379 --> 00:05:09,250
another big thing about CSS and J's is

00:05:07,539 --> 00:05:11,889
that it has fast performance now this

00:05:09,250 --> 00:05:13,870
might sound kind of weird right with CSS

00:05:11,889 --> 00:05:16,000
and J's R essentially adding a middle

00:05:13,870 --> 00:05:18,099
step you first have to evaluate the

00:05:16,000 --> 00:05:19,569
JavaScript and then we have to inject

00:05:18,099 --> 00:05:22,330
the CSS the library has to inject the

00:05:19,569 --> 00:05:23,949
CSS before it'll be rendered however

00:05:22,330 --> 00:05:27,460
this happens synchronously and it's

00:05:23,949 --> 00:05:29,590
super fast it's even faster when you use

00:05:27,460 --> 00:05:32,379
server-side rendering because with with

00:05:29,590 --> 00:05:35,889
CSS and J's we can keep track of which

00:05:32,379 --> 00:05:38,080
components you actually use on a page if

00:05:35,889 --> 00:05:39,789
you do not use the Tizen component we

00:05:38,080 --> 00:05:41,469
will not inject the CSS of the title

00:05:39,789 --> 00:05:43,360
component that means when your

00:05:41,469 --> 00:05:45,490
server-side rendering your app you will

00:05:43,360 --> 00:05:47,110
only ever sent down the styles of the

00:05:45,490 --> 00:05:48,759
components that are actually used on a

00:05:47,110 --> 00:05:50,770
specific page that is currently being

00:05:48,759 --> 00:05:54,130
rendered nothing more and nothing less

00:05:50,770 --> 00:05:55,599
it's automatic critical CSS built into

00:05:54,130 --> 00:05:57,150
the library you can't even do it any

00:05:55,599 --> 00:06:00,460
other way that's just the way it works

00:05:57,150 --> 00:06:02,169
as far as client-side rendering goes if

00:06:00,460 --> 00:06:04,300
you don't do server-side rendering in

00:06:02,169 --> 00:06:06,940
many cases CSS and J's will still be as

00:06:04,300 --> 00:06:08,860
fast as CSS files the reason for that is

00:06:06,940 --> 00:06:11,349
that you avoid an extra Network request

00:06:08,860 --> 00:06:12,819
if your users have to download a CSS

00:06:11,349 --> 00:06:14,889
file you have to do an extra network

00:06:12,819 --> 00:06:17,289
request you have to load some an extra

00:06:14,889 --> 00:06:18,849
file with CSS and J's that's just

00:06:17,289 --> 00:06:20,919
included in the JavaScript bundle and

00:06:18,849 --> 00:06:23,469
then we injected and injection is so

00:06:20,919 --> 00:06:25,000
fast that it's pretty much the same time

00:06:23,469 --> 00:06:27,270
as it would take to do another Network

00:06:25,000 --> 00:06:30,159
request and load the CSS file anyway and

00:06:27,270 --> 00:06:32,680
the fifth point why CSS and J's is super

00:06:30,159 --> 00:06:34,840
nice is dynamic styling CSS and J's

00:06:32,680 --> 00:06:36,969
makes it super easy to do complex

00:06:34,840 --> 00:06:39,069
dynamic styling complex themes and

00:06:36,969 --> 00:06:41,110
adjusting your entire application based

00:06:39,069 --> 00:06:43,300
on some global themes that are defined

00:06:41,110 --> 00:06:45,190
and that doesn't just include primitive

00:06:43,300 --> 00:06:46,779
values it includes entire rule sets that

00:06:45,190 --> 00:06:49,169
you can just switch out at will whenever

00:06:46,779 --> 00:06:49,169
you want

00:06:49,260 --> 00:06:55,200
the big thing about CSS in GIS is that

00:06:52,920 --> 00:06:57,210
it guides you to the pit of success it

00:06:55,200 --> 00:06:59,460
guides you towards doing the right thing

00:06:57,210 --> 00:07:01,530
of course it's not perfect you conceal

00:06:59,460 --> 00:07:03,510
myself I still write that CSS every now

00:07:01,530 --> 00:07:05,940
that right I'm not the best developer on

00:07:03,510 --> 00:07:06,840
the planet but with CSS and J's me and

00:07:05,940 --> 00:07:08,220
my entire team

00:07:06,840 --> 00:07:09,870
I should have guided in the right

00:07:08,220 --> 00:07:10,590
direction right we're sort of guided in

00:07:09,870 --> 00:07:12,360
the right way

00:07:10,590 --> 00:07:17,240
that we're not gonna mess up some common

00:07:12,360 --> 00:07:19,320
problems that occur with CSS now

00:07:17,240 --> 00:07:21,420
whenever I talk about the benefits of

00:07:19,320 --> 00:07:23,370
CSS injuries people come to me

00:07:21,420 --> 00:07:24,930
afterwards and they say yeah but I'm an

00:07:23,370 --> 00:07:26,820
expert with 15 years of experience in

00:07:24,930 --> 00:07:28,140
CSS and I can I have a perfect process

00:07:26,820 --> 00:07:30,560
in my team and it just works perfectly

00:07:28,140 --> 00:07:34,620
for us and why would I ever use this and

00:07:30,560 --> 00:07:36,330
the thing is if your CSS is fine you

00:07:34,620 --> 00:07:37,710
probably don't have to use CSS in gs

00:07:36,330 --> 00:07:38,220
just keep doing what you're doing that's

00:07:37,710 --> 00:07:42,120
awesome

00:07:38,220 --> 00:07:44,280
however CSS and J's guides all of these

00:07:42,120 --> 00:07:47,070
combines all these benefits into one

00:07:44,280 --> 00:07:49,980
thing right it sort of enforces you to

00:07:47,070 --> 00:07:51,810
avoid common mistakes with CSS and it

00:07:49,980 --> 00:07:53,550
does that all in one handy package of

00:07:51,810 --> 00:07:55,170
course you can achieve all these things

00:07:53,550 --> 00:07:57,000
manually you can you could do all of

00:07:55,170 --> 00:07:58,710
this manual in your own app with good

00:07:57,000 --> 00:08:01,320
process he's a well-trained team and

00:07:58,710 --> 00:08:02,490
some very amazing tooling but with CSS

00:08:01,320 --> 00:08:04,920
and J's you don't even have to think

00:08:02,490 --> 00:08:06,600
about it anymore you just avoid all of

00:08:04,920 --> 00:08:11,190
that work and do it automatically which

00:08:06,600 --> 00:08:13,110
is huge so that's a little bit about on

00:08:11,190 --> 00:08:16,350
how CSS and J's works and why I

00:08:13,110 --> 00:08:19,200
personally like using it I want to talk

00:08:16,350 --> 00:08:20,940
a little bit about where we're at CSS

00:08:19,200 --> 00:08:23,100
and J's has kind of taken over the react

00:08:20,940 --> 00:08:26,490
world last I checked a couple weeks ago

00:08:23,100 --> 00:08:29,490
60% of react and p.m. installs also

00:08:26,490 --> 00:08:32,040
installed a CSS and J's library that's

00:08:29,490 --> 00:08:35,010
huge right we're talking about 60% of

00:08:32,040 --> 00:08:36,720
all react apps and the thing is it's not

00:08:35,010 --> 00:08:38,880
the 60% where people are just writing

00:08:36,720 --> 00:08:41,010
testing apps right big companies like

00:08:38,880 --> 00:08:43,229
Reddit patreon github New York Times and

00:08:41,010 --> 00:08:45,210
many others are using CSS in production

00:08:43,229 --> 00:08:47,370
to power their most important apps

00:08:45,210 --> 00:08:49,470
because it just makes them move faster

00:08:47,370 --> 00:08:53,400
and it makes them avoid bugs that they

00:08:49,470 --> 00:08:56,340
usually have so how do we get here how

00:08:53,400 --> 00:08:58,830
do we get to 60% of react apps using CSS

00:08:56,340 --> 00:09:02,340
and J's it all kind of started in

00:08:58,830 --> 00:09:02,980
November of 2014 two big things happen

00:09:02,340 --> 00:09:04,930
there

00:09:02,980 --> 00:09:07,210
the first was that elect from Berlin

00:09:04,930 --> 00:09:10,690
published the very first CSS interest

00:09:07,210 --> 00:09:12,280
library ever called jss and JSS really

00:09:10,690 --> 00:09:14,770
introduced this notion of actually

00:09:12,280 --> 00:09:17,590
writing and composing your CSS in

00:09:14,770 --> 00:09:21,580
JavaScript and in fact JSS was way ahead

00:09:17,590 --> 00:09:23,710
of its time a lot of the more newer CSS

00:09:21,580 --> 00:09:25,840
and J's libraries nowadays still

00:09:23,710 --> 00:09:27,490
rediscover and keep rediscovering some

00:09:25,840 --> 00:09:31,030
of the techniques that he used back in

00:09:27,490 --> 00:09:32,530
November of 2014 which is incredible the

00:09:31,030 --> 00:09:34,900
second big thing that happened in

00:09:32,530 --> 00:09:37,570
November of 2014 was that advisory from

00:09:34,900 --> 00:09:39,310
the react team gave a talk at a tiny

00:09:37,570 --> 00:09:41,590
conference in Washington DC called

00:09:39,310 --> 00:09:44,140
nation J's and he spoke about how at

00:09:41,590 --> 00:09:47,050
Facebook they use CSS and J's to keep

00:09:44,140 --> 00:09:50,830
their app more maintainable that kicked

00:09:47,050 --> 00:09:53,620
off a huge shitstorm the entire internet

00:09:50,830 --> 00:09:56,170
exploded and essentially for a flame

00:09:53,620 --> 00:09:57,730
warm Ward him for being a complete idiot

00:09:56,170 --> 00:10:01,870
and what the hell they're doing at

00:09:57,730 --> 00:10:03,640
Facebook now this talk was and it still

00:10:01,870 --> 00:10:05,110
is extremely popular if you've ever

00:10:03,640 --> 00:10:07,570
heard of CSS and J's you've probably

00:10:05,110 --> 00:10:08,890
seen a screenshot of his slides his

00:10:07,570 --> 00:10:10,570
slide tag has been seen more than

00:10:08,890 --> 00:10:11,830
600,000 times last I looked

00:10:10,570 --> 00:10:14,380
which is quite a while ago is with my

00:10:11,830 --> 00:10:15,760
people over a million by now lots and

00:10:14,380 --> 00:10:17,530
lots of people looked at this talk and

00:10:15,760 --> 00:10:20,080
sort of it really kicked off this whole

00:10:17,530 --> 00:10:23,380
in a whole era of experimentation and

00:10:20,080 --> 00:10:24,760
new ideas that we entered after that the

00:10:23,380 --> 00:10:26,530
first thing that happened was that in

00:10:24,760 --> 00:10:29,140
January of 2015 formidable apps

00:10:26,530 --> 00:10:31,240
published radium the second CSS and J's

00:10:29,140 --> 00:10:33,310
library now radium tried something

00:10:31,240 --> 00:10:36,070
interesting they tried to make CSS and

00:10:33,310 --> 00:10:38,350
J's work by assigning the CSS to the

00:10:36,070 --> 00:10:39,610
style attribute now if you've ever used

00:10:38,350 --> 00:10:41,830
inline Styles

00:10:39,610 --> 00:10:44,050
you know this isn't quite ideal because

00:10:41,830 --> 00:10:45,880
with inline Styles you can't have many

00:10:44,050 --> 00:10:47,380
things that you can with CSS you can't

00:10:45,880 --> 00:10:49,240
have media queries you kind of pseudo

00:10:47,380 --> 00:10:51,460
selector pseudo elements lots of those

00:10:49,240 --> 00:10:53,530
things don't work and so they tried to

00:10:51,460 --> 00:10:55,210
hack around it with radium by doing it

00:10:53,530 --> 00:10:56,980
with JavaScript for example for media

00:10:55,210 --> 00:10:58,840
queries they would listen to window

00:10:56,980 --> 00:11:00,760
resize events and check whether the

00:10:58,840 --> 00:11:03,010
window width was smaller or larger than

00:11:00,760 --> 00:11:05,650
the media query nowadays

00:11:03,010 --> 00:11:07,420
five years later pretty much to the day

00:11:05,650 --> 00:11:08,410
we know that this wasn't the best

00:11:07,420 --> 00:11:10,240
approach in that there are others that

00:11:08,410 --> 00:11:11,620
are better but it was an important

00:11:10,240 --> 00:11:14,860
stepping stone for other student to

00:11:11,620 --> 00:11:16,300
learn from and then go further in

00:11:14,860 --> 00:11:16,720
February of 2015

00:11:16,300 --> 00:11:18,639
brain

00:11:16,720 --> 00:11:22,449
Jackson published the first version of

00:11:18,639 --> 00:11:25,389
rebus rebus is a library that really

00:11:22,449 --> 00:11:27,850
introduced this CSS components API so he

00:11:25,389 --> 00:11:29,560
introduced this box component and he

00:11:27,850 --> 00:11:31,870
would just just use this box component

00:11:29,560 --> 00:11:34,930
throughout your app and you could

00:11:31,870 --> 00:11:37,569
provide props like color or background

00:11:34,930 --> 00:11:40,180
color or font size or font family and

00:11:37,569 --> 00:11:43,600
you would style your app really via

00:11:40,180 --> 00:11:45,189
react component props now rebus is still

00:11:43,600 --> 00:11:46,660
going super strong it's not on the fifth

00:11:45,189 --> 00:11:48,490
version which was recently published I

00:11:46,660 --> 00:11:52,269
personally use repass in almost all of

00:11:48,490 --> 00:11:54,579
my apps it's super great nowadays in May

00:11:52,269 --> 00:11:58,540
of 2015 and another big thing happened

00:11:54,579 --> 00:12:01,029
now CSS modules isn't technically CSS in

00:11:58,540 --> 00:12:03,639
J yes with CSS modules you still have

00:12:01,029 --> 00:12:05,170
CSS files at the end however what CSS

00:12:03,639 --> 00:12:08,079
modules really did was that it

00:12:05,170 --> 00:12:10,480
popularized outputting unique class

00:12:08,079 --> 00:12:12,639
names so it popularized this notion of

00:12:10,480 --> 00:12:14,079
oh I'm writing one class name but

00:12:12,639 --> 00:12:15,250
actually what I see in the browser is

00:12:14,079 --> 00:12:16,779
completely different and completely

00:12:15,250 --> 00:12:19,360
unique so I don't have to worry about

00:12:16,779 --> 00:12:21,009
giving it a unique name that was huge

00:12:19,360 --> 00:12:22,839
and it's something that again is still a

00:12:21,009 --> 00:12:24,910
benefit of CSS and J's and CSS modules

00:12:22,839 --> 00:12:27,250
today since as much again still going

00:12:24,910 --> 00:12:28,540
strong still awesome still used by many

00:12:27,250 --> 00:12:31,449
people highly recommend using it if

00:12:28,540 --> 00:12:33,430
you're in if you're into it then a

00:12:31,449 --> 00:12:35,889
couple months later in September of 2015

00:12:33,430 --> 00:12:37,329
because C SJS this is a tiny library

00:12:35,889 --> 00:12:39,100
that not not many people know of and

00:12:37,329 --> 00:12:42,040
that I wouldn't recommend using today

00:12:39,100 --> 00:12:43,389
because it's deprecated but CHS was

00:12:42,040 --> 00:12:45,910
really the first library that allow you

00:12:43,389 --> 00:12:49,269
to write actual CSS in your JavaScript

00:12:45,910 --> 00:12:51,040
before C SJS all of these CSS and J's

00:12:49,269 --> 00:12:53,939
libraries they would let you write your

00:12:51,040 --> 00:12:56,470
CSS as JavaScript objects now that has

00:12:53,939 --> 00:12:58,720
benefits and drawbacks right it's a

00:12:56,470 --> 00:13:00,040
trade-off your designers might not know

00:12:58,720 --> 00:13:02,019
how JavaScript works and so they

00:13:00,040 --> 00:13:03,519
wouldn't be able to edit the CSS which

00:13:02,019 --> 00:13:06,279
might be a huge downside in your team

00:13:03,519 --> 00:13:08,620
and so C SJS made it was the first

00:13:06,279 --> 00:13:10,720
library to make it possible to write

00:13:08,620 --> 00:13:15,250
actual CSS like how he used to in

00:13:10,720 --> 00:13:17,230
strings in JavaScript in October of 2015

00:13:15,250 --> 00:13:18,939
Khan Academy then released their own CSS

00:13:17,230 --> 00:13:21,279
and J's library called Aphrodite

00:13:18,939 --> 00:13:23,110
and after that he really focused hard on

00:13:21,279 --> 00:13:25,120
performance and what they did and what

00:13:23,110 --> 00:13:27,699
they were the first ones to do was the

00:13:25,120 --> 00:13:29,319
day output atomic class names so you

00:13:27,699 --> 00:13:30,610
would write CSS like how you used to you

00:13:29,319 --> 00:13:32,649
just say color blue

00:13:30,610 --> 00:13:34,630
patting for pixels whatever you put in

00:13:32,649 --> 00:13:37,000
your CSS and then they would create a

00:13:34,630 --> 00:13:39,459
unique class for every single CSS rule

00:13:37,000 --> 00:13:41,110
that you specify and for many

00:13:39,459 --> 00:13:43,630
applications this actually leads to a

00:13:41,110 --> 00:13:47,890
smaller total CSS size because you don't

00:13:43,630 --> 00:13:50,950
have that many unique CSS rules they're

00:13:47,890 --> 00:13:52,089
also huge on the critical CSS extraction

00:13:50,950 --> 00:13:54,220
what I talked about earlier only

00:13:52,089 --> 00:13:56,320
injecting the CSS that is actually used

00:13:54,220 --> 00:13:58,300
aphrodite was the first library to ever

00:13:56,320 --> 00:13:59,980
do that and it really showed that with

00:13:58,300 --> 00:14:01,570
CSS and J's you could actually achieve

00:13:59,980 --> 00:14:05,500
better performance than if you were to

00:14:01,570 --> 00:14:07,180
write vanilla CSS files half a year

00:14:05,500 --> 00:14:09,940
later in June of 2016

00:14:07,180 --> 00:14:12,940
Robyn freshman from Berlin then released

00:14:09,940 --> 00:14:15,459
Farah and Fela took this notion if

00:14:12,940 --> 00:14:16,390
you've ever read any react tutorial you

00:14:15,459 --> 00:14:18,490
might have heard of this thing called

00:14:16,390 --> 00:14:20,320
your view is a function of the state

00:14:18,490 --> 00:14:22,029
that's what react does right it handles

00:14:20,320 --> 00:14:24,279
your state and then based on that state

00:14:22,029 --> 00:14:26,380
you can render a certain view and with

00:14:24,279 --> 00:14:29,200
Fela they sort of took that concept and

00:14:26,380 --> 00:14:30,940
they made it work for Styles too so

00:14:29,200 --> 00:14:32,860
suddenly your styles were also a

00:14:30,940 --> 00:14:36,670
function of state and could be changed

00:14:32,860 --> 00:14:38,860
anytime the state changed again Fela is

00:14:36,670 --> 00:14:41,079
super awesome Robin is a good friend of

00:14:38,860 --> 00:14:42,370
mine and his is super great and fellow I

00:14:41,079 --> 00:14:43,630
still being used by tons of companies

00:14:42,370 --> 00:14:46,149
nowadays and it's still awesome and

00:14:43,630 --> 00:14:48,640
still being developed a month later

00:14:46,149 --> 00:14:52,540
sunil pi who now works at the on the

00:14:48,640 --> 00:14:54,820
react team released glamour and glamour

00:14:52,540 --> 00:14:57,370
with camera he focused even more on

00:14:54,820 --> 00:15:00,430
performance and what he found was this

00:14:57,370 --> 00:15:05,050
somewhat obscure browser api called CSS

00:15:00,430 --> 00:15:06,519
stylesheet or insert rule and we see the

00:15:05,050 --> 00:15:08,800
style sheet on insert rule you

00:15:06,519 --> 00:15:11,199
essentially bypass the Dom entirely and

00:15:08,800 --> 00:15:12,790
inject CSS directly into the CSS object

00:15:11,199 --> 00:15:15,420
model which is a thing in browsers that

00:15:12,790 --> 00:15:18,699
I didn't even know existed at that point

00:15:15,420 --> 00:15:20,620
now compared to doing it via the Dom and

00:15:18,699 --> 00:15:22,720
just creating a style tag and setting it

00:15:20,620 --> 00:15:26,769
in a text this is much much much faster

00:15:22,720 --> 00:15:29,019
like ten thousand times faster and with

00:15:26,769 --> 00:15:31,329
this sort of width by popularizing this

00:15:29,019 --> 00:15:33,519
it really cemented CSS interests this is

00:15:31,329 --> 00:15:35,079
super fast option for writing your CSS

00:15:33,519 --> 00:15:36,399
before that there were always kind of

00:15:35,079 --> 00:15:39,399
these performance drawbacks that you

00:15:36,399 --> 00:15:41,319
would have now I gotta give a huge shout

00:15:39,399 --> 00:15:43,240
out here to JSS which was the first

00:15:41,319 --> 00:15:44,410
library published two and a half years

00:15:43,240 --> 00:15:46,810
before glamour

00:15:44,410 --> 00:15:49,900
the very first version of GSS at

00:15:46,810 --> 00:15:52,060
electrode already used CSS stylesheet or

00:15:49,900 --> 00:15:54,220
insert rule it just took every other CSS

00:15:52,060 --> 00:15:55,780
ingest library two and a half years to

00:15:54,220 --> 00:15:56,320
catch up to him which is absolutely

00:15:55,780 --> 00:15:58,720
incredible

00:15:56,320 --> 00:16:00,910
now glamour nowadays has been deprecated

00:15:58,720 --> 00:16:03,220
and is the Sunil recommends using other

00:16:00,910 --> 00:16:04,900
libraries but it was a again an

00:16:03,220 --> 00:16:07,960
important stepping stone in this

00:16:04,900 --> 00:16:09,820
evolution a couple months later in

00:16:07,960 --> 00:16:11,410
October of 2016 we then got two things

00:16:09,820 --> 00:16:14,980
the first was that the site team

00:16:11,410 --> 00:16:17,020
announced JSX style sorry this is not a

00:16:14,980 --> 00:16:18,700
site team this was Pete hunt who we used

00:16:17,020 --> 00:16:21,640
to be reacting in from the smite team

00:16:18,700 --> 00:16:24,670
that's it and Jay sextile retook this

00:16:21,640 --> 00:16:26,950
CSS components API concept that rebase

00:16:24,670 --> 00:16:28,480
introduced and made took it even a step

00:16:26,950 --> 00:16:30,580
further and they went even further and

00:16:28,480 --> 00:16:33,250
allow you to style literally everything

00:16:30,580 --> 00:16:34,810
from react component props again Jacek

00:16:33,250 --> 00:16:37,090
style still awesome still being used by

00:16:34,810 --> 00:16:39,330
tons of people everywhere around the

00:16:37,090 --> 00:16:43,120
world still being maintained super great

00:16:39,330 --> 00:16:44,710
also in october i stood on stage at

00:16:43,120 --> 00:16:46,270
react netherlands and i announced the

00:16:44,710 --> 00:16:48,750
release of style components

00:16:46,270 --> 00:16:50,650
what style components really did was we

00:16:48,750 --> 00:16:55,180
introduced and popularized this

00:16:50,650 --> 00:16:56,770
brand-new api this styled dot tag api in

00:16:55,180 --> 00:16:58,660
the first case in the first example that

00:16:56,770 --> 00:17:00,730
we had with the title component it was

00:16:58,660 --> 00:17:04,329
style dot h1 right but it could be any

00:17:00,730 --> 00:17:06,160
other HTML tag too and at the time we

00:17:04,329 --> 00:17:07,839
discovered it and we thought this feels

00:17:06,160 --> 00:17:10,060
kind of nice to use we'll see what

00:17:07,839 --> 00:17:12,400
people say and it turns out people loved

00:17:10,060 --> 00:17:13,990
it style components absolutely exploded

00:17:12,400 --> 00:17:18,400
and it's nowadays the most widely huge

00:17:13,990 --> 00:17:21,040
CSS and JS library in December of 2016

00:17:18,400 --> 00:17:24,610
two months later Ryan Tao the guy who

00:17:21,040 --> 00:17:25,030
originally made C SJS published style

00:17:24,610 --> 00:17:27,250
Tron

00:17:25,030 --> 00:17:28,960
he works at uber and they wanted they

00:17:27,250 --> 00:17:30,460
had their own sort of app that they

00:17:28,960 --> 00:17:32,440
wanted to build for and they needed

00:17:30,460 --> 00:17:34,510
their own citizen J solution and so they

00:17:32,440 --> 00:17:37,600
built the Ultron for their own use case

00:17:34,510 --> 00:17:38,950
and star trunk took what Aphrodite

00:17:37,600 --> 00:17:40,960
initial eat it which is outputting

00:17:38,950 --> 00:17:43,090
atomic classes and they took it a step

00:17:40,960 --> 00:17:44,710
further and really spent a lot of time

00:17:43,090 --> 00:17:47,380
optimizing everything to the most

00:17:44,710 --> 00:17:49,120
minimal set of classes possible against

00:17:47,380 --> 00:17:50,410
Ultron still used the Lubar still use

00:17:49,120 --> 00:17:52,270
that a ton of other companies still

00:17:50,410 --> 00:17:56,230
awesome Ryan's a great guy and super

00:17:52,270 --> 00:17:58,090
smart also in December we got style j6

00:17:56,230 --> 00:18:00,730
this time from the site team for real

00:17:58,090 --> 00:18:03,910
they sort of focused on really at giving

00:18:00,730 --> 00:18:06,220
you and lowering the barrier to entry

00:18:03,910 --> 00:18:08,530
what style go6 gives you is this sort of

00:18:06,220 --> 00:18:10,540
style tag like API so you're literally

00:18:08,530 --> 00:18:12,760
writing a style tag in your react

00:18:10,540 --> 00:18:16,450
component code and they will optimize

00:18:12,760 --> 00:18:18,190
and make your class names unique so if

00:18:16,450 --> 00:18:20,860
you know how to write a style tag you

00:18:18,190 --> 00:18:22,930
know how to use style trade sex in fact

00:18:20,860 --> 00:18:25,060
if you've used next yes it's from the

00:18:22,930 --> 00:18:27,430
same people you've probably used style

00:18:25,060 --> 00:18:29,860
chair sex or at least seen it again

00:18:27,430 --> 00:18:31,330
still awesome still create style ESX

00:18:29,860 --> 00:18:34,500
still used by tons of people everywhere

00:18:31,330 --> 00:18:38,080
still being developed stood great in

00:18:34,500 --> 00:18:41,070
March of 2017 we then got astroturf now

00:18:38,080 --> 00:18:43,300
astroturf is really important astroturf

00:18:41,070 --> 00:18:45,160
essentially introduced the first 2,000

00:18:43,300 --> 00:18:48,040
J's library that allows you to extract

00:18:45,160 --> 00:18:49,540
to a CSS file now that might sound

00:18:48,040 --> 00:18:51,280
completely bonkers because of what I

00:18:49,540 --> 00:18:53,680
told you before but it actually kind of

00:18:51,280 --> 00:18:55,600
makes sense for some use cases where you

00:18:53,680 --> 00:18:57,820
have multiple apps or multiple websites

00:18:55,600 --> 00:18:59,980
that might not might or might not be

00:18:57,820 --> 00:19:01,870
using react you can use astroturf to

00:18:59,980 --> 00:19:04,120
still write your CSS in JavaScript and

00:19:01,870 --> 00:19:06,220
composing in JavaScript but then you in

00:19:04,120 --> 00:19:11,230
the end you get an actual CSS file with

00:19:06,220 --> 00:19:14,110
random class names in it in April of

00:19:11,230 --> 00:19:15,430
2017 Kent C Dodds released glamorous he

00:19:14,110 --> 00:19:18,160
worked at PayPal at the time and they

00:19:15,430 --> 00:19:20,140
wanted to create their own CSS and J's

00:19:18,160 --> 00:19:22,750
library now glamorous really popularized

00:19:20,140 --> 00:19:25,870
this idea of writing CSS JavaScript

00:19:22,750 --> 00:19:27,250
objects again trade-off some trade-offs

00:19:25,870 --> 00:19:29,830
right benefits and drawbacks but they

00:19:27,250 --> 00:19:31,630
wanted to do that and they also wanted

00:19:29,830 --> 00:19:32,950
to use this styled components like API

00:19:31,630 --> 00:19:35,170
and so they built clamors which is

00:19:32,950 --> 00:19:37,060
essentially styled components but lets

00:19:35,170 --> 00:19:39,790
you write CSS as charge javascript

00:19:37,060 --> 00:19:41,410
objects now glamorous nowadays has been

00:19:39,790 --> 00:19:44,230
deprecated in favor of style components

00:19:41,410 --> 00:19:46,990
and emotion because we now also support

00:19:44,230 --> 00:19:48,940
writing your CSS javascript objects but

00:19:46,990 --> 00:19:51,370
again this really popularized this idea

00:19:48,940 --> 00:19:54,330
that hey maybe writing CSS javascript

00:19:51,370 --> 00:19:57,190
objects isn't such a bad idea

00:19:54,330 --> 00:20:01,480
in May of 2017 we then announced style

00:19:57,190 --> 00:20:03,100
components v2 and the big important

00:20:01,480 --> 00:20:05,200
point about style component V - isn't

00:20:03,100 --> 00:20:08,650
actually styled components it's about a

00:20:05,200 --> 00:20:12,250
thing called stylus a guy named theis

00:20:08,650 --> 00:20:16,210
autumn down in Africa summer I think

00:20:12,250 --> 00:20:18,550
mania built a CSS parser in JavaScript

00:20:16,210 --> 00:20:20,290
and not only did did he build a CSS

00:20:18,550 --> 00:20:23,980
parser in JavaScript he made it super

00:20:20,290 --> 00:20:25,450
tiny and super duper fast and so with

00:20:23,980 --> 00:20:27,130
styled components version 2 we switched

00:20:25,450 --> 00:20:29,770
to using stylus which essentially cut

00:20:27,130 --> 00:20:31,330
90% of our bundle size down not only

00:20:29,770 --> 00:20:32,800
that but it was much much faster than

00:20:31,330 --> 00:20:36,430
what we were using before which is post

00:20:32,800 --> 00:20:38,350
CSS now without stylus a lot of this

00:20:36,430 --> 00:20:39,760
whole CSS ingesting wouldn't be as

00:20:38,350 --> 00:20:41,650
popular as it is today because you'd

00:20:39,760 --> 00:20:43,930
still add huge amounts of bundle size to

00:20:41,650 --> 00:20:46,630
your apps but because stylus is so tiny

00:20:43,930 --> 00:20:49,800
it allows us to sort of really have

00:20:46,630 --> 00:20:52,000
small bundle sizes as well nowadays

00:20:49,800 --> 00:20:54,010
practically every single serious injury

00:20:52,000 --> 00:20:59,970
is like we use a stylus as their CSS

00:20:54,010 --> 00:21:04,630
parser of choice in July of 2017 CAI

00:20:59,970 --> 00:21:06,550
published emotion and what you really

00:21:04,630 --> 00:21:11,400
try to do with emotion is re-implemented

00:21:06,550 --> 00:21:13,960
components but much much much faster and

00:21:11,400 --> 00:21:16,090
what emotion really did is that it

00:21:13,960 --> 00:21:18,490
kicked off and still ongoing performance

00:21:16,090 --> 00:21:20,830
competition up to that point everybody

00:21:18,490 --> 00:21:22,300
was sort of focused on you know trying

00:21:20,830 --> 00:21:24,580
new api's and coming up with new ideas

00:21:22,300 --> 00:21:25,840
and seeing what people think but then

00:21:24,580 --> 00:21:28,300
emotion came on board and everybody was

00:21:25,840 --> 00:21:30,460
like wow we really gotta focus on

00:21:28,300 --> 00:21:31,660
performance and literally every single

00:21:30,460 --> 00:21:33,340
skill sets in TS library started

00:21:31,660 --> 00:21:34,690
focusing heavily on performance and I

00:21:33,340 --> 00:21:35,980
mean bundle size performance right like

00:21:34,690 --> 00:21:37,900
they're all optimizing their own

00:21:35,980 --> 00:21:40,420
JavaScript bundle by size and by

00:21:37,900 --> 00:21:42,070
performance and if emotion hadn't been

00:21:40,420 --> 00:21:43,360
published we'd probably still be ten to

00:21:42,070 --> 00:21:45,880
a hundred times lower than we were at

00:21:43,360 --> 00:21:48,220
the time nowadays all of the CSS and J's

00:21:45,880 --> 00:21:50,050
libraries are super fast and that's

00:21:48,220 --> 00:21:52,480
mainly thanks to emotion being like hey

00:21:50,050 --> 00:21:56,380
we can be super fast

00:21:52,480 --> 00:21:58,750
why aren't you in September of 2017 we

00:21:56,380 --> 00:22:00,760
then go to lean area and linear it took

00:21:58,750 --> 00:22:03,190
what astroturf did with the static CSS

00:22:00,760 --> 00:22:05,890
extraction and allows you to do that

00:22:03,190 --> 00:22:07,480
with the styled components API and lean

00:22:05,890 --> 00:22:08,650
area again all these libraries that I

00:22:07,480 --> 00:22:09,940
just talked about they're still super

00:22:08,650 --> 00:22:13,720
popular they're still being used to

00:22:09,940 --> 00:22:15,430
being maintained in November of 2018 we

00:22:13,720 --> 00:22:17,770
then got emotion v10 at the point of

00:22:15,430 --> 00:22:20,530
emotion v10 most of it really switched

00:22:17,770 --> 00:22:23,320
from prioritizing the style components

00:22:20,530 --> 00:22:25,450
API to prioritizing the CSS prop a P I

00:22:23,320 --> 00:22:26,050
survived and statically defining your

00:22:25,450 --> 00:22:28,390
component

00:22:26,050 --> 00:22:31,180
you're now passing a CSS prop to any div

00:22:28,390 --> 00:22:32,710
or span or h1 or any of the HTML tag and

00:22:31,180 --> 00:22:34,630
you can style your components that way

00:22:32,710 --> 00:22:38,410
which actually works out super nicely in

00:22:34,630 --> 00:22:40,870
most cases and then a couple months ago

00:22:38,410 --> 00:22:42,220
in June of 2019 we got themed UI Brent

00:22:40,870 --> 00:22:43,690
Jackson and John Oh Tanner built

00:22:42,220 --> 00:22:46,180
something called themed UI which is

00:22:43,690 --> 00:22:48,460
essentially taking this CSS idea and

00:22:46,180 --> 00:22:51,250
takes it a step further by making your

00:22:48,460 --> 00:22:53,350
CSS be based on a theme and the scale by

00:22:51,250 --> 00:22:55,690
default so rather than writing font size

00:22:53,350 --> 00:22:57,730
- you're now writing for rather than

00:22:55,690 --> 00:23:00,640
writing font size 16 pixels you're not

00:22:57,730 --> 00:23:02,470
writing font size to where to is a step

00:23:00,640 --> 00:23:04,420
on a scale right so the first step on a

00:23:02,470 --> 00:23:06,070
scale would be 8 pixels the second step

00:23:04,420 --> 00:23:08,980
on a scale would be 16 pixels etc etc

00:23:06,070 --> 00:23:10,690
and that really makes your whole app

00:23:08,980 --> 00:23:12,490
much more consistent because everything

00:23:10,690 --> 00:23:16,270
is based on the same scale whether

00:23:12,490 --> 00:23:18,790
that's for like sizes and padding and

00:23:16,270 --> 00:23:24,700
margin or it's for fonts or it's for

00:23:18,790 --> 00:23:26,110
colors right now the thing is when you

00:23:24,700 --> 00:23:28,630
just listen to me talking about all of

00:23:26,110 --> 00:23:31,300
these apps and all these libraries I

00:23:28,630 --> 00:23:32,770
love all of them they're all great they

00:23:31,300 --> 00:23:33,190
all brought something unique to the

00:23:32,770 --> 00:23:35,410
table

00:23:33,190 --> 00:23:38,260
in fact sometimes people try to paint

00:23:35,410 --> 00:23:40,060
the CSS injuries community as sort of

00:23:38,260 --> 00:23:41,830
people fighting with each other

00:23:40,060 --> 00:23:44,680
all day long and being like ha you suck

00:23:41,830 --> 00:23:46,270
no you suck no you suck but really I'm

00:23:44,680 --> 00:23:47,350
constantly talking to all of these right

00:23:46,270 --> 00:23:48,430
they're all friends of mine we're

00:23:47,350 --> 00:23:50,170
constantly sharing notes we're

00:23:48,430 --> 00:23:52,090
constantly working together to make this

00:23:50,170 --> 00:23:53,860
whole ecosystem better and that's the

00:23:52,090 --> 00:23:55,000
reason why it's evolved so quickly it's

00:23:53,860 --> 00:23:57,040
just because we've all been working

00:23:55,000 --> 00:23:59,680
together make to make all of this stuff

00:23:57,040 --> 00:24:01,180
better now something else we might

00:23:59,680 --> 00:24:04,780
notice is that we had a huge burst of

00:24:01,180 --> 00:24:07,570
innovation in 2016 and then 2017 but

00:24:04,780 --> 00:24:09,490
then in 2018 and 2019 everything kind of

00:24:07,570 --> 00:24:10,990
slowed down right we should have had a

00:24:09,490 --> 00:24:13,810
low point right now we're really we're

00:24:10,990 --> 00:24:15,700
getting one new idea a year where we

00:24:13,810 --> 00:24:20,010
used to be getting one or two new every

00:24:15,700 --> 00:24:23,080
month and that leads me to the future I

00:24:20,010 --> 00:24:25,870
have no idea what the future of CSS and

00:24:23,080 --> 00:24:27,220
J's is I have no idea what good ideas

00:24:25,870 --> 00:24:30,850
are out there that hasn't been explored

00:24:27,220 --> 00:24:32,830
yet but maybe you do right I want to

00:24:30,850 --> 00:24:35,230
encourage you to start experimenting if

00:24:32,830 --> 00:24:36,640
you notice issues with how you write CSS

00:24:35,230 --> 00:24:39,310
if you notice issues with how you use

00:24:36,640 --> 00:24:39,850
CSS nsj right maybe you have an idea for

00:24:39,310 --> 00:24:41,110
an API

00:24:39,850 --> 00:24:43,299
you want to implement maybe you have an

00:24:41,110 --> 00:24:45,340
idea on how people should be writing CSS

00:24:43,299 --> 00:24:48,880
in a better manner that gives them some

00:24:45,340 --> 00:24:50,620
benefits right explore it try a shared

00:24:48,880 --> 00:24:53,020
with the world and see what people say

00:24:50,620 --> 00:24:56,169
right it might work it might not work

00:24:53,020 --> 00:24:57,669
but we need more innovation right where

00:24:56,169 --> 00:25:00,030
the local maximum right now and we need

00:24:57,669 --> 00:25:03,250
to go further now

00:25:00,030 --> 00:25:05,559
here's a couple generic tips to make

00:25:03,250 --> 00:25:07,690
this endeavor if you do try to tackle it

00:25:05,559 --> 00:25:11,169
more successful this applies to any open

00:25:07,690 --> 00:25:12,850
source project really though the most

00:25:11,169 --> 00:25:15,100
important one is that you should do it

00:25:12,850 --> 00:25:16,510
in this order make it work first then

00:25:15,100 --> 00:25:20,110
make it right

00:25:16,510 --> 00:25:21,760
then make it fast that's what we did we

00:25:20,110 --> 00:25:23,679
start components the first version of

00:25:21,760 --> 00:25:26,200
style components was absolutely horrible

00:25:23,679 --> 00:25:29,080
what we did is we took post CSS which is

00:25:26,200 --> 00:25:31,390
an old based CSS parser we ripped out

00:25:29,080 --> 00:25:35,200
all the node parts and we ran it in the

00:25:31,390 --> 00:25:36,940
browser that was absolutely insane that

00:25:35,200 --> 00:25:38,860
is a huge bundle size hit that we took

00:25:36,940 --> 00:25:40,809
but at the time it didn't matter because

00:25:38,860 --> 00:25:42,970
nobody was using style components anyway

00:25:40,809 --> 00:25:45,490
we were just trying out this random new

00:25:42,970 --> 00:25:47,230
IDE API idea that we had we had no idea

00:25:45,490 --> 00:25:48,640
where the people would like it or not if

00:25:47,230 --> 00:25:50,230
nobody had liked it if it turned out

00:25:48,640 --> 00:25:51,429
that it wasn't a good idea then there

00:25:50,230 --> 00:25:53,260
wouldn't have been any point in trying

00:25:51,429 --> 00:25:55,299
to optimize it further right we just

00:25:53,260 --> 00:25:57,280
needed to get the idea out and then what

00:25:55,299 --> 00:25:59,380
we did after that is we made it right we

00:25:57,280 --> 00:26:02,620
focused on nailing the core API to make

00:25:59,380 --> 00:26:04,539
everything possible and then as the last

00:26:02,620 --> 00:26:06,970
step we now worked on making it fast

00:26:04,539 --> 00:26:08,760
right now making it right and making it

00:26:06,970 --> 00:26:11,080
fast often happen in parallel right

00:26:08,760 --> 00:26:12,520
we're still changing around some API is

00:26:11,080 --> 00:26:14,590
we still have new ideas on how to make

00:26:12,520 --> 00:26:16,090
our API is better and simultaneously

00:26:14,590 --> 00:26:17,950
we're also working on performance but

00:26:16,090 --> 00:26:21,700
also working on making these new API is

00:26:17,950 --> 00:26:23,500
even faster but in general that is the

00:26:21,700 --> 00:26:25,659
right way to do things especially if you

00:26:23,500 --> 00:26:27,130
try to innovate on a new idea make it

00:26:25,659 --> 00:26:28,720
work first and then share it with the

00:26:27,130 --> 00:26:31,840
world then make it right and then make

00:26:28,720 --> 00:26:33,940
it fast that leads me to my second point

00:26:31,840 --> 00:26:35,860
you should really share early and share

00:26:33,940 --> 00:26:37,510
often right the only reason style

00:26:35,860 --> 00:26:39,460
components is the most popular citizen

00:26:37,510 --> 00:26:41,470
J's library and it is as good as it is

00:26:39,460 --> 00:26:43,780
really it's because we talk with people

00:26:41,470 --> 00:26:45,070
I went to conferences and I talked about

00:26:43,780 --> 00:26:46,780
style components and I was like what do

00:26:45,070 --> 00:26:48,460
you think give me some feedback and

00:26:46,780 --> 00:26:50,290
people gave me feedback and it helped me

00:26:48,460 --> 00:26:51,640
what a idiot I am right and I

00:26:50,290 --> 00:26:52,900
was like I listened to them I listened

00:26:51,640 --> 00:26:53,680
to the problems and I listened to what

00:26:52,900 --> 00:26:55,060
they were saying

00:26:53,680 --> 00:26:56,590
and we made style components better

00:26:55,060 --> 00:26:58,300
because of that and then people started

00:26:56,590 --> 00:26:59,920
using style components and they gave us

00:26:58,300 --> 00:27:01,570
feedback they said hey how do we do

00:26:59,920 --> 00:27:03,310
global stars why is this ap I can

00:27:01,570 --> 00:27:05,170
overhear this kind of sucks I can't do

00:27:03,310 --> 00:27:06,520
this and that's the reason that style

00:27:05,170 --> 00:27:09,010
components got so good is because we

00:27:06,520 --> 00:27:10,360
shared early and we shared often we talk

00:27:09,010 --> 00:27:12,730
with people we went out there and we

00:27:10,360 --> 00:27:14,080
show what we had and yeah people came to

00:27:12,730 --> 00:27:16,570
me and taught me what a

00:27:14,080 --> 00:27:19,090
I am right all the time I still hear

00:27:16,570 --> 00:27:20,830
that every second day but it doesn't

00:27:19,090 --> 00:27:23,020
matter because I like what I do and many

00:27:20,830 --> 00:27:24,870
other people do too and we made style

00:27:23,020 --> 00:27:27,310
components better because of that and

00:27:24,870 --> 00:27:28,750
the third and really important point is

00:27:27,310 --> 00:27:30,670
that you need to document all of the

00:27:28,750 --> 00:27:32,020
things it doesn't matter if you create

00:27:30,670 --> 00:27:33,730
the best library on the planet if

00:27:32,020 --> 00:27:36,040
there's no documentation for it all the

00:27:33,730 --> 00:27:37,720
documentation sucks it's never gonna go

00:27:36,040 --> 00:27:39,580
anywhere nobody's going to use it right

00:27:37,720 --> 00:27:41,230
we spent a lot of time documenting

00:27:39,580 --> 00:27:42,910
everything about star components

00:27:41,230 --> 00:27:44,560
documenting how you can use media

00:27:42,910 --> 00:27:46,300
queries pseudo selectors documenting how

00:27:44,560 --> 00:27:48,060
you could do dynamic styling documenting

00:27:46,300 --> 00:27:51,040
how you could pass props documenting

00:27:48,060 --> 00:27:52,390
literally everything because that's the

00:27:51,040 --> 00:27:54,070
only way that people are going to keep

00:27:52,390 --> 00:27:54,970
using your library if you don't write

00:27:54,070 --> 00:27:59,590
documentation

00:27:54,970 --> 00:28:02,620
nobody's gonna use it so let me leave

00:27:59,590 --> 00:28:04,860
you with this if you have any idea if

00:28:02,620 --> 00:28:06,790
you want to try something if you have

00:28:04,860 --> 00:28:08,650
problems that you're trying to solve or

00:28:06,790 --> 00:28:10,840
that you have solve internally share

00:28:08,650 --> 00:28:12,610
your ideas with the world try to build a

00:28:10,840 --> 00:28:15,340
prototype and make it work and then come

00:28:12,610 --> 00:28:16,630
talk to me tweet at me and I'll share it

00:28:15,340 --> 00:28:18,460
with the world right what do I have an

00:28:16,630 --> 00:28:21,520
audience for I want to see new ideas I

00:28:18,460 --> 00:28:25,120
want to see new api's new fresh things

00:28:21,520 --> 00:28:26,450
to do in our react apps that's it thank

00:28:25,120 --> 00:28:29,630
you very much for having me

00:28:26,450 --> 00:28:31,010
[Applause]

00:28:29,630 --> 00:28:33,710
[Music]

00:28:31,010 --> 00:28:35,970
[Applause]

00:28:33,710 --> 00:28:38,850
does anyone have any questions that they

00:28:35,970 --> 00:28:42,630
want to ask max please don't tell me

00:28:38,850 --> 00:28:46,650
that I may need it I mean we're all

00:28:42,630 --> 00:28:48,030
idiots that's right he's not any more of

00:28:46,650 --> 00:28:52,220
an idiot than oh there's a person up

00:28:48,030 --> 00:28:52,220
there up there sorry

00:29:01,400 --> 00:29:10,410
hi max thank you for your talk

00:29:05,660 --> 00:29:16,710
one question or two the first one I'm

00:29:10,410 --> 00:29:19,430
missing the library from maturity you I

00:29:16,710 --> 00:29:21,750
I think it's called Stiles right

00:29:19,430 --> 00:29:23,520
material you I yeah

00:29:21,750 --> 00:29:26,280
material you are uses chases under the

00:29:23,520 --> 00:29:31,320
hood the very first hisses ingest

00:29:26,280 --> 00:29:36,690
library okay so the performance of this

00:29:31,320 --> 00:29:42,440
library is nowadays also super fast okay

00:29:36,690 --> 00:29:46,800
that means it's also usable in

00:29:42,440 --> 00:29:50,640
competition to all of the currently used

00:29:46,800 --> 00:29:52,200
yeah yeah yeah is still awesome lots of

00:29:50,640 --> 00:29:53,730
people's to use GSS like material you I

00:29:52,200 --> 00:29:55,260
write every single material I use

00:29:53,730 --> 00:29:57,720
accuses to reassess and all like has

00:29:55,260 --> 00:29:59,430
spent the last five years making JSS

00:29:57,720 --> 00:30:03,240
super fast super performant and super

00:29:59,430 --> 00:30:06,150
great okay and the second one and you're

00:30:03,240 --> 00:30:11,270
still using Starcom components for your

00:30:06,150 --> 00:30:13,740
applications right yeah okay thank you I

00:30:11,270 --> 00:30:17,100
like how that was a question so weird

00:30:13,740 --> 00:30:20,460
yeah no actually I went back to the

00:30:17,100 --> 00:30:22,440
newest response actually the new

00:30:20,460 --> 00:30:26,030
Microsoft edge the one that comes with

00:30:22,440 --> 00:30:29,010
chrome and chromium uses JSS nice isn't

00:30:26,030 --> 00:30:31,860
it nice he's also still working on it

00:30:29,010 --> 00:30:33,570
these a friend of mine in Berlin so it's

00:30:31,860 --> 00:30:35,600
still getting maintained yeah which is

00:30:33,570 --> 00:30:39,870
honestly one of the longest living like

00:30:35,600 --> 00:30:43,830
projects for sure does anyone else have

00:30:39,870 --> 00:30:47,600
any questions okay

00:30:43,830 --> 00:30:47,600
there we go didn't even have to go too

00:30:56,570 --> 00:31:04,860
high we now a company we use style

00:31:01,260 --> 00:31:06,630
components as well but I think somebody

00:31:04,860 --> 00:31:09,330
introduces something called styled

00:31:06,630 --> 00:31:14,669
system where like people started using

00:31:09,330 --> 00:31:17,820
like CSS like a components API right

00:31:14,669 --> 00:31:21,120
props yeah passing stuff I found that

00:31:17,820 --> 00:31:23,130
like very hard to maintain and then I

00:31:21,120 --> 00:31:26,010
felt like we're going back to like

00:31:23,130 --> 00:31:32,549
inline Styles doesn't it like sometimes

00:31:26,010 --> 00:31:35,370
like this sort of like CSS in Jes feels

00:31:32,549 --> 00:31:37,740
like a bit of like lack of separation of

00:31:35,370 --> 00:31:41,789
concerns that was the very first reason

00:31:37,740 --> 00:31:46,139
people start using CSS stylesheets that

00:31:41,789 --> 00:31:47,639
is a good question um whenever I talk

00:31:46,139 --> 00:31:49,769
about CSS in gs people come to me with

00:31:47,639 --> 00:31:52,139
separation of concerns but the question

00:31:49,769 --> 00:31:54,090
is which concerns are you separating in

00:31:52,139 --> 00:31:55,860
a standard website you're separating

00:31:54,090 --> 00:31:57,720
your HTML from a CSS from your

00:31:55,860 --> 00:31:58,860
JavaScript but in a component based

00:31:57,720 --> 00:31:59,549
system that doesn't really make sense

00:31:58,860 --> 00:32:01,289
anymore

00:31:59,549 --> 00:32:03,269
the concern that I have is my button

00:32:01,289 --> 00:32:04,950
component and I want everything related

00:32:03,269 --> 00:32:06,960
to a button component to be in the same

00:32:04,950 --> 00:32:08,399
place to be just affecting that one

00:32:06,960 --> 00:32:09,419
place and then I have an accordion

00:32:08,399 --> 00:32:11,610
component and I want everything

00:32:09,419 --> 00:32:14,460
affecting the accordion component to be

00:32:11,610 --> 00:32:15,929
in that in the same location I don't

00:32:14,460 --> 00:32:18,149
only be affecting this so my concern is

00:32:15,929 --> 00:32:19,500
no longer the technology stack I'm not

00:32:18,149 --> 00:32:22,049
trying to separate by technology and

00:32:19,500 --> 00:32:24,240
said I'm separating by component which I

00:32:22,049 --> 00:32:26,730
find works out much nicer right because

00:32:24,240 --> 00:32:28,350
that's really what I care about whether

00:32:26,730 --> 00:32:30,000
I write my CSS in JavaScript or not

00:32:28,350 --> 00:32:32,580
right I want my components to look the

00:32:30,000 --> 00:32:33,750
way they should look right so we're

00:32:32,580 --> 00:32:35,100
still separating concerns that just

00:32:33,750 --> 00:32:38,179
separated vertically rather than

00:32:35,100 --> 00:32:38,179
horizontally if that makes any sense

00:32:40,399 --> 00:32:45,510
about like what the difference between

00:32:42,570 --> 00:32:49,470
writing style components versus using

00:32:45,510 --> 00:32:52,799
props as yeah that's just a matter of

00:32:49,470 --> 00:32:54,980
taste write whatever you like more I'd

00:32:52,799 --> 00:32:54,980
say

00:32:55,409 --> 00:33:01,149
anyone else okay cool Mike you're free

00:33:00,730 --> 00:33:04,409
to go

00:33:01,149 --> 00:33:04,409

YouTube URL: https://www.youtube.com/watch?v=W-zVPl7CGrY


