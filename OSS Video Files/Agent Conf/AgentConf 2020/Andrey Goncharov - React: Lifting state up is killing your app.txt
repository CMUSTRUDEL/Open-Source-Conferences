Title: Andrey Goncharov - React: Lifting state up is killing your app
Publication date: 2020-02-22
Playlist: AgentConf 2020
Description: 
	React: Lifting state up is killing your app
Captions: 
	00:00:00,030 --> 00:00:05,400
I just feel like it's a very community

00:00:03,300 --> 00:00:08,910
driven conference it also is a lot of

00:00:05,400 --> 00:00:10,769
quality and people are just nice hi my

00:00:08,910 --> 00:00:11,730
name's Sarah and this is agent comp in

00:00:10,769 --> 00:00:15,420
Dortmund

00:00:11,730 --> 00:00:18,099
[Music]

00:00:15,420 --> 00:00:20,500
amazing venue Austria is beautiful

00:00:18,099 --> 00:00:25,300
meeting all the people in the community

00:00:20,500 --> 00:00:33,040
and getting to go and hang out and ski

00:00:25,300 --> 00:00:33,040
[Music]

00:00:35,699 --> 00:00:41,470
well hey my life

00:00:38,769 --> 00:00:43,150
cool so hello guys my name is andrey and

00:00:41,470 --> 00:00:46,059
today we're gonna talk about lifts and

00:00:43,150 --> 00:00:49,510
stayed up in our react applications and

00:00:46,059 --> 00:00:51,580
before we start i'd like well i have a

00:00:49,510 --> 00:00:53,769
request for you could those of you who

00:00:51,580 --> 00:00:57,129
used lifts and stayed up at least once

00:00:53,769 --> 00:00:59,470
raise your hands come on don't be shy

00:00:57,129 --> 00:01:02,379
I'm pretty sure that's almost everyone

00:00:59,470 --> 00:01:05,619
in this room because well we tend to

00:01:02,379 --> 00:01:08,439
keep our state somewhere high in the

00:01:05,619 --> 00:01:11,500
tree of our components and now those of

00:01:08,439 --> 00:01:13,840
you who deliberately moved state of the

00:01:11,500 --> 00:01:19,870
applications down could you raise your

00:01:13,840 --> 00:01:21,910
hands yeah perfect at least now I know

00:01:19,870 --> 00:01:25,750
that that my talk is not completely

00:01:21,910 --> 00:01:29,650
useless alright so if you words about me

00:01:25,750 --> 00:01:30,370
I like calling myself a full-stack

00:01:29,650 --> 00:01:32,350
typescript

00:01:30,370 --> 00:01:35,520
and JavaScript developer that means

00:01:32,350 --> 00:01:40,990
front-end back-end and that my ass is

00:01:35,520 --> 00:01:43,210
almost always on fire I used to work for

00:01:40,990 --> 00:01:45,580
two major Russian outsource companies

00:01:43,210 --> 00:01:49,690
and now I'm happy to be part of the

00:01:45,580 --> 00:01:52,870
family at Hazel cast and last but not

00:01:49,690 --> 00:01:58,210
the least I truly love open source with

00:01:52,870 --> 00:02:00,940
all my heart so before we get to the

00:01:58,210 --> 00:02:03,220
meat of this talk to the actual coding

00:02:00,940 --> 00:02:04,479
tips and tricks and stuff like that let

00:02:03,220 --> 00:02:07,450
me start with the source and the

00:02:04,479 --> 00:02:10,479
historical context so what do we do at

00:02:07,450 --> 00:02:13,420
hazel caste we built a fancy in-memory

00:02:10,479 --> 00:02:15,940
data grid I know it sounds kind of

00:02:13,420 --> 00:02:18,700
complex maybe so but what it really

00:02:15,940 --> 00:02:22,150
means it's a distributed cache it's

00:02:18,700 --> 00:02:25,959
scalable easy to deploy distribute it

00:02:22,150 --> 00:02:27,040
and it can be AP or CP your choice it

00:02:25,959 --> 00:02:30,150
has a bunch of

00:02:27,040 --> 00:02:34,200
enterprise features like near cash like

00:02:30,150 --> 00:02:38,019
out of heap memory storage and what's

00:02:34,200 --> 00:02:41,019
even cooler that it's open source and we

00:02:38,019 --> 00:02:44,650
got official clients for tons of

00:02:41,019 --> 00:02:47,409
languages and the product that I'm

00:02:44,650 --> 00:02:49,930
working on is our management Center like

00:02:47,409 --> 00:02:53,109
any decent distributed system we have

00:02:49,930 --> 00:02:55,239
some kind of administrative panel where

00:02:53,109 --> 00:02:57,579
you can go and see cluster statistics

00:02:55,239 --> 00:03:00,250
cluster monitoring data structure

00:02:57,579 --> 00:03:02,709
statistics you can browse your data and

00:03:00,250 --> 00:03:04,269
see what's inside of your cluster you

00:03:02,709 --> 00:03:09,069
can have some kind of scripting and

00:03:04,269 --> 00:03:12,939
alerts and you can administrate your

00:03:09,069 --> 00:03:15,400
cluster so once at our internal

00:03:12,939 --> 00:03:17,169
hackathon I came up with an idea of

00:03:15,400 --> 00:03:20,200
display in our cluster is an actual

00:03:17,169 --> 00:03:24,370
graph and just so you can imagine this

00:03:20,200 --> 00:03:26,950
scale our cluster can run hundreds of

00:03:24,370 --> 00:03:31,030
nodes and we can have thousands of

00:03:26,950 --> 00:03:34,510
clients and the data inside of the

00:03:31,030 --> 00:03:38,579
cluster is distributed across all of the

00:03:34,510 --> 00:03:44,139
members so I wanted to display roughly

00:03:38,579 --> 00:03:48,489
danced thousands of nodes well I have a

00:03:44,139 --> 00:03:49,120
confession the demo at hackathon went

00:03:48,489 --> 00:03:53,470
really well

00:03:49,120 --> 00:03:57,760
smoothly because I worked only with

00:03:53,470 --> 00:04:00,489
three members and that's how POC usually

00:03:57,760 --> 00:04:03,310
go right you display something small

00:04:00,489 --> 00:04:07,060
something something simple you raise the

00:04:03,310 --> 00:04:09,579
PR and everybody forgets about it but it

00:04:07,060 --> 00:04:16,030
got me thinking what limits we can push

00:04:09,579 --> 00:04:19,419
our react applications to so today we're

00:04:16,030 --> 00:04:21,519
going to build a very simple data grid

00:04:19,419 --> 00:04:25,000
where you can you can click on a cell

00:04:21,519 --> 00:04:27,220
and it's going to display a checkmark in

00:04:25,000 --> 00:04:30,370
that cell hopefully and first we're

00:04:27,220 --> 00:04:32,849
going to lift lift out state up exactly

00:04:30,370 --> 00:04:37,120
how I react official documentation

00:04:32,849 --> 00:04:38,800
suggest trust to do and here's the plan

00:04:37,120 --> 00:04:40,300
so we gonna create a very naive

00:04:38,800 --> 00:04:40,710
implementation we're gonna refactor it

00:04:40,300 --> 00:04:42,900
use

00:04:40,710 --> 00:04:45,960
standard practices then we're gonna see

00:04:42,900 --> 00:04:48,090
where it fails and why and after that

00:04:45,960 --> 00:04:50,490
we're gonna move state of that

00:04:48,090 --> 00:04:54,390
application down and see if it helps us

00:04:50,490 --> 00:04:58,620
to mitigate the problem so now let's get

00:04:54,390 --> 00:05:02,310
to the actual coding it's gonna be a

00:04:58,620 --> 00:05:03,930
live coding session more or less I'm not

00:05:02,310 --> 00:05:05,730
that cool as a Vladimir to do the actual

00:05:03,930 --> 00:05:09,210
live coding I am a single threaded

00:05:05,730 --> 00:05:11,340
person so I cannot really speak and code

00:05:09,210 --> 00:05:13,680
at the same time I prepared a bunch of

00:05:11,340 --> 00:05:16,590
commits for you and we can apply commits

00:05:13,680 --> 00:05:19,560
one by one and see where it gets us so

00:05:16,590 --> 00:05:22,800
before we take a look at the code actual

00:05:19,560 --> 00:05:25,860
code let me show you what we see in our

00:05:22,800 --> 00:05:28,200
browser so that's the data grid and you

00:05:25,860 --> 00:05:31,890
can click on a cell and it displays a

00:05:28,200 --> 00:05:41,100
check mark as promised so now to the

00:05:31,890 --> 00:05:43,640
code is it big enough for you cool so we

00:05:41,100 --> 00:05:46,410
have here our initial field which is a

00:05:43,640 --> 00:05:49,530
two-dimensional array of size by size

00:05:46,410 --> 00:05:51,000
and size here right now is 10 so it's a

00:05:49,530 --> 00:05:55,290
two-dimensional array of fine done

00:05:51,000 --> 00:06:03,000
defines 10 by 10 we have our parent

00:05:55,290 --> 00:06:04,530
component app and we use set the initial

00:06:03,000 --> 00:06:08,010
state of that component to our initial

00:06:04,530 --> 00:06:10,710
field that two-dimensional array then we

00:06:08,010 --> 00:06:14,490
iterate all of that field and get the

00:06:10,710 --> 00:06:17,160
rolls we iterate over each row and get

00:06:14,490 --> 00:06:20,640
the cells and cell IDs and then we

00:06:17,160 --> 00:06:25,140
render a cell component where we pass

00:06:20,640 --> 00:06:29,370
the content of the cell and we pass set

00:06:25,140 --> 00:06:30,930
content function where we do some ugly

00:06:29,370 --> 00:06:33,150
stuff right it looks pretty I hope the

00:06:30,930 --> 00:06:38,160
out Emer but I didn't want to complicate

00:06:33,150 --> 00:06:42,740
this code too much so and I wanted to

00:06:38,160 --> 00:06:47,060
use basic react API so what we do here

00:06:42,740 --> 00:06:50,250
we copy the all the routes

00:06:47,060 --> 00:06:53,280
besides our target route that's this

00:06:50,250 --> 00:06:54,689
stuff and for the dart for our target

00:06:53,280 --> 00:06:58,559
route that we want to update

00:06:54,689 --> 00:07:01,049
we copy all these cells besides our

00:06:58,559 --> 00:07:03,809
target cell and for our target cell we

00:07:01,049 --> 00:07:06,569
update its content now let's take a look

00:07:03,809 --> 00:07:09,179
at our cell component it's extremely

00:07:06,569 --> 00:07:12,929
simple we have two props content and set

00:07:09,179 --> 00:07:15,689
content and content that's actually that

00:07:12,929 --> 00:07:18,749
check box that we have and set count set

00:07:15,689 --> 00:07:24,149
content is something that is called when

00:07:18,749 --> 00:07:26,159
we click on that cell so now to explore

00:07:24,149 --> 00:07:28,289
if we have any performance problems

00:07:26,159 --> 00:07:33,779
let's increase the size of the field to

00:07:28,289 --> 00:07:38,129
300 control s and see well we have a

00:07:33,779 --> 00:07:42,769
huge grid here click and it doesn't seem

00:07:38,129 --> 00:07:46,349
to have any problems at this point but

00:07:42,769 --> 00:07:49,499
luckily lucky for me and lucky for you I

00:07:46,349 --> 00:07:53,309
have a pretty performant laptop so let

00:07:49,499 --> 00:08:00,239
me throttle my CPU a little bit and see

00:07:53,309 --> 00:08:03,169
if I have a problem now click and it

00:08:00,239 --> 00:08:08,189
takes quite some time to render click

00:08:03,169 --> 00:08:14,189
and it took quite some time to render

00:08:08,189 --> 00:08:19,019
again alright so not everyone out there

00:08:14,189 --> 00:08:20,789
is going to have the most modern laptop

00:08:19,019 --> 00:08:23,610
right people are going to use our

00:08:20,789 --> 00:08:25,829
applications from cell phones I don't

00:08:23,610 --> 00:08:31,019
know maybe one day microwave will be

00:08:25,829 --> 00:08:32,939
able to run react so let's try to

00:08:31,019 --> 00:08:37,919
profile this baby and see where it gets

00:08:32,939 --> 00:08:41,849
us the next commit and the most naive

00:08:37,919 --> 00:08:44,660
profiling by console.log that's all that

00:08:41,849 --> 00:08:49,199
was added that console.log statement

00:08:44,660 --> 00:08:50,879
let's see where we are we have these 100

00:08:49,199 --> 00:08:52,589
cell rented statements because we

00:08:50,879 --> 00:08:55,949
rendered the initial field 10 by 10 now

00:08:52,589 --> 00:08:57,779
let's click on a cell and we see another

00:08:55,949 --> 00:09:06,490
100 statements there we go

00:08:57,779 --> 00:09:09,570
there our performance problem origin so

00:09:06,490 --> 00:09:12,640
if you google briefly how to optimize

00:09:09,570 --> 00:09:14,860
least renders the most top-voted

00:09:12,640 --> 00:09:19,120
stackoverflow answer would be to add

00:09:14,860 --> 00:09:22,660
keys and I guess react actually suggests

00:09:19,120 --> 00:09:24,550
us to do that right so let's do exactly

00:09:22,660 --> 00:09:28,270
that let's add some keys

00:09:24,550 --> 00:09:32,710
I played the next commit and here we go

00:09:28,270 --> 00:09:36,100
here we have a key and let's see if it

00:09:32,710 --> 00:09:38,680
helps so now you can see that the one

00:09:36,100 --> 00:09:42,970
there is no error in our console click

00:09:38,680 --> 00:09:45,520
and we still have 120 words for every

00:09:42,970 --> 00:09:47,830
cell so basically the whole field is we

00:09:45,520 --> 00:09:54,750
rendered when we try to update only one

00:09:47,830 --> 00:09:58,120
cell if only there was a way to see why

00:09:54,750 --> 00:09:59,160
certain component rear end rose luckily

00:09:58,120 --> 00:10:02,430
for us

00:09:59,160 --> 00:10:05,700
amazing react team provided us with

00:10:02,430 --> 00:10:09,460
outstanding dev tools and we have

00:10:05,700 --> 00:10:12,370
profiler and what we're gonna do is

00:10:09,460 --> 00:10:16,750
we're gonna record a session you're

00:10:12,370 --> 00:10:21,660
gonna click on the component and then we

00:10:16,750 --> 00:10:25,750
will see why every cell is we rendered

00:10:21,660 --> 00:10:27,700
so right here on the on the right you

00:10:25,750 --> 00:10:29,680
can see that what did they why did this

00:10:27,700 --> 00:10:32,530
render and it says that props changed

00:10:29,680 --> 00:10:35,490
said content alright let's go to our

00:10:32,530 --> 00:10:40,060
code and see what the hack happens here

00:10:35,490 --> 00:10:43,900
so we apparently use field from the

00:10:40,060 --> 00:10:46,800
outer scope from right here and that's a

00:10:43,900 --> 00:10:51,040
problem that's the source of our problem

00:10:46,800 --> 00:10:54,010
when we update only one cell whole field

00:10:51,040 --> 00:10:55,990
is updated and therefore every set

00:10:54,010 --> 00:10:58,800
content has to be updated because it

00:10:55,990 --> 00:11:02,470
used field from the outer scope right

00:10:58,800 --> 00:11:06,160
let's try to work around that next

00:11:02,470 --> 00:11:10,060
commit and what we can see here right

00:11:06,160 --> 00:11:13,630
now that cell now accepts row index cell

00:11:10,060 --> 00:11:17,350
index and set content the same function

00:11:13,630 --> 00:11:20,050
for every cell let's take a look at what

00:11:17,350 --> 00:11:23,439
set cell function looks like right now

00:11:20,050 --> 00:11:26,670
so now it accepts not only the new

00:11:23,439 --> 00:11:30,009
content but also role ID and cell ID and

00:11:26,670 --> 00:11:33,279
for setting the new field we use a

00:11:30,009 --> 00:11:35,470
callback signature so what we have here

00:11:33,279 --> 00:11:38,589
is our old field passed as a parameter

00:11:35,470 --> 00:11:40,089
and we use that old field to do

00:11:38,589 --> 00:11:45,069
basically the same thing that we did

00:11:40,089 --> 00:11:47,049
before but now we don't have a closure

00:11:45,069 --> 00:11:51,129
and we don't use the field from the

00:11:47,049 --> 00:11:54,869
outer scope so that should be good that

00:11:51,129 --> 00:11:57,610
should help us and for our cell we use

00:11:54,869 --> 00:12:01,089
we have two new probes cell ID and row

00:11:57,610 --> 00:12:04,269
ID and we pass that pops those probes to

00:12:01,089 --> 00:12:06,540
set content that's basically it alright

00:12:04,269 --> 00:12:11,799
let's go there and see if it helps us

00:12:06,540 --> 00:12:15,459
click and we still have 100 renders okay

00:12:11,799 --> 00:12:22,720
profile it to the rescue let's record

00:12:15,459 --> 00:12:25,059
the session click ranked chart so why

00:12:22,720 --> 00:12:28,139
did this render the parent component

00:12:25,059 --> 00:12:30,970
tree rendered and it totally makes sense

00:12:28,139 --> 00:12:33,549
let's go back to our code and see what

00:12:30,970 --> 00:12:34,319
happens here so now when we update a

00:12:33,549 --> 00:12:37,779
field

00:12:34,319 --> 00:12:41,769
when I data a field we update the state

00:12:37,779 --> 00:12:44,559
of our parent component and it it tree

00:12:41,769 --> 00:12:46,749
renders and because because it we

00:12:44,559 --> 00:12:51,490
renders it regrows to render vowel of

00:12:46,749 --> 00:12:55,779
each of our cells components ok and if

00:12:51,490 --> 00:12:58,809
we google one more time the second most

00:12:55,779 --> 00:13:03,819
up voted and some Stack Overflow would

00:12:58,809 --> 00:13:05,860
be to use mammal the other way to go

00:13:03,819 --> 00:13:09,939
around it would be to use pure component

00:13:05,860 --> 00:13:12,519
or should component update so now we

00:13:09,939 --> 00:13:17,649
have mammal and what's gonna happen is

00:13:12,519 --> 00:13:20,679
that if we don't change props about cell

00:13:17,649 --> 00:13:21,129
the cell won't be rendered pretty cool

00:13:20,679 --> 00:13:23,619
right

00:13:21,129 --> 00:13:26,769
let's go back to our application and see

00:13:23,619 --> 00:13:31,749
if it really helps click and only one

00:13:26,769 --> 00:13:33,740
cell rendered woohoo we kind of solved

00:13:31,749 --> 00:13:37,400
the equation right

00:13:33,740 --> 00:13:40,940
and here's the question why am I here

00:13:37,400 --> 00:13:45,610
and what is this talk about if it works

00:13:40,940 --> 00:13:49,190
if we follow by just following the dogs

00:13:45,610 --> 00:13:57,680
well yes and no let's increase the size

00:13:49,190 --> 00:14:00,250
of our field to the same hundred it's

00:13:57,680 --> 00:14:04,090
gonna take a while let me actually

00:14:00,250 --> 00:14:12,380
disable that throttling is going to help

00:14:04,090 --> 00:14:14,120
hopefully yeah and probably I should

00:14:12,380 --> 00:14:19,250
have disabled throttling before

00:14:14,120 --> 00:14:20,840
rendering the field yeah and it's not

00:14:19,250 --> 00:14:25,010
gonna close because the thread is

00:14:20,840 --> 00:14:27,800
blocked all right yeah yeah I can kill

00:14:25,010 --> 00:14:28,190
it or we can wait you can go grab some

00:14:27,800 --> 00:14:35,180
coffee

00:14:28,190 --> 00:14:44,000
in the meantime whoa yeah alright once

00:14:35,180 --> 00:14:48,940
again here we go and we have we should

00:14:44,000 --> 00:14:52,210
have filled 100 by 100

00:14:48,940 --> 00:14:52,210
I'm date

00:14:54,510 --> 00:15:01,990
all righty let's wait for it to show

00:14:58,240 --> 00:15:04,750
yeah now we rendered so click and it's

00:15:01,990 --> 00:15:07,090
pretty fast and now let's go back to

00:15:04,750 --> 00:15:12,430
performance tab and throttle my CPU once

00:15:07,090 --> 00:15:16,300
again 6x slow down click and it was kind

00:15:12,430 --> 00:15:26,160
of an click kind of laggy but well it's

00:15:16,300 --> 00:15:26,160
not really obvious let's make it 15 150

00:15:27,120 --> 00:15:31,560
you really should go and get some coffee

00:15:38,610 --> 00:15:49,000
all righty here we go click it's ok and

00:15:43,990 --> 00:15:53,760
after throttling click and it takes some

00:15:49,000 --> 00:15:57,520
time click and it has rendered only now

00:15:53,760 --> 00:16:02,710
all right so what's going on let's go to

00:15:57,520 --> 00:16:05,020
our profiler and try to like to profile

00:16:02,710 --> 00:16:05,770
this baby and see if we see anything

00:16:05,020 --> 00:16:11,020
weird

00:16:05,770 --> 00:16:14,260
click so in our rank chart we see that

00:16:11,020 --> 00:16:16,210
the actual render of the actual cell

00:16:14,260 --> 00:16:21,339
that we tried to update

00:16:16,210 --> 00:16:23,280
took only 0.2 milliseconds but something

00:16:21,339 --> 00:16:28,240
happened inside of our app that took

00:16:23,280 --> 00:16:36,400
enormous 160 milliseconds and that's why

00:16:28,240 --> 00:16:37,990
we see the lag so what happened there if

00:16:36,400 --> 00:16:40,450
we look at our code we don't see

00:16:37,990 --> 00:16:43,390
anything unusual we follow all the best

00:16:40,450 --> 00:16:48,000
practices but if you take a look at this

00:16:43,390 --> 00:16:49,990
number we still have 22 and five hundred

00:16:48,000 --> 00:16:53,290
twenty two thousand and five hundred

00:16:49,990 --> 00:16:57,070
cells and even if we render only one so

00:16:53,290 --> 00:16:58,720
react still still has to go over twenty

00:16:57,070 --> 00:17:00,820
two and five hundred twenty two thousand

00:16:58,720 --> 00:17:03,400
and five hundred cells and compare the

00:17:00,820 --> 00:17:05,860
props it's extremely fast to compare the

00:17:03,400 --> 00:17:10,730
props it's all one but

00:17:05,860 --> 00:17:20,860
react has to do that for all 22,000

00:17:10,730 --> 00:17:26,659
cells so if we can't move our state up

00:17:20,860 --> 00:17:29,899
can we move it down and maybe that is

00:17:26,659 --> 00:17:34,070
going to help us the next commit a lot

00:17:29,899 --> 00:17:36,710
has changed but don't worry we're gonna

00:17:34,070 --> 00:17:39,379
go all right line by line by line and

00:17:36,710 --> 00:17:40,009
see that it actually is not that

00:17:39,379 --> 00:17:43,059
different

00:17:40,009 --> 00:17:48,679
so now we have a classical class filled

00:17:43,059 --> 00:17:52,009
filled class which accepts its size in

00:17:48,679 --> 00:17:55,070
constructor we have the initial data

00:17:52,009 --> 00:17:57,429
there's going to be our field and it's

00:17:55,070 --> 00:18:00,529
the same to the manage dimensional array

00:17:57,429 --> 00:18:04,249
size by size filled with undefined

00:18:00,529 --> 00:18:08,840
we have cell content method to get the

00:18:04,249 --> 00:18:11,950
data from that field we have set cell

00:18:08,840 --> 00:18:16,369
method to update the content of that

00:18:11,950 --> 00:18:19,879
field and it's the same copy/paste from

00:18:16,369 --> 00:18:23,269
our old set cell method so I'm not going

00:18:19,879 --> 00:18:25,970
to go go over it line by line and we

00:18:23,269 --> 00:18:28,850
have map method to iterate over the

00:18:25,970 --> 00:18:32,929
field let's take a look at our app it's

00:18:28,850 --> 00:18:39,590
much smaller now we just oh and by the

00:18:32,929 --> 00:18:41,419
way we did somewhere before take a look

00:18:39,590 --> 00:18:46,269
at our app component we initialize our

00:18:41,419 --> 00:18:49,159
field with the size variable it's 10 and

00:18:46,269 --> 00:18:52,190
in our app component we iterate all that

00:18:49,159 --> 00:18:56,749
field and we do the same thing we trade

00:18:52,190 --> 00:18:58,759
on each row and render a cell and now

00:18:56,749 --> 00:19:03,220
our cell accepts only row index and cell

00:18:58,759 --> 00:19:08,360
index and let's go to our cell component

00:19:03,220 --> 00:19:10,759
so cell component call set cell with row

00:19:08,360 --> 00:19:14,179
index and cell index of our field and it

00:19:10,759 --> 00:19:18,619
uses cell content method to get the

00:19:14,179 --> 00:19:19,370
actual data let's go to the browser and

00:19:18,619 --> 00:19:23,710
see

00:19:19,370 --> 00:19:27,280
if it works so let's click on a cell and

00:19:23,710 --> 00:19:30,650
nothing happens we have an empty field

00:19:27,280 --> 00:19:34,540
but take a look at the console we still

00:19:30,650 --> 00:19:38,990
have that set cell record in our console

00:19:34,540 --> 00:19:42,760
why what happens here now as our field

00:19:38,990 --> 00:19:46,430
leaves outside of the react it's a

00:19:42,760 --> 00:19:50,450
standalone JavaScript class instance

00:19:46,430 --> 00:19:53,000
react doesn't know when to re-render the

00:19:50,450 --> 00:19:55,100
data react doesn't know that something

00:19:53,000 --> 00:20:00,770
happened in our field and the data was

00:19:55,100 --> 00:20:03,950
updated so we have to somehow help react

00:20:00,770 --> 00:20:09,470
and tell react that it has to rerender

00:20:03,950 --> 00:20:11,300
and what are our options if we used

00:20:09,470 --> 00:20:14,330
class components we could have used

00:20:11,300 --> 00:20:17,330
force update but we don't use class

00:20:14,330 --> 00:20:18,920
components and it would kind of suck to

00:20:17,330 --> 00:20:20,930
rewrite it class components at this

00:20:18,920 --> 00:20:23,150
point right well it's not the heart

00:20:20,930 --> 00:20:27,470
because we have a very simple case but

00:20:23,150 --> 00:20:31,820
for for a more complex application it

00:20:27,470 --> 00:20:35,690
would kind of suck what are other ways

00:20:31,820 --> 00:20:37,910
to update to force react to rear Android

00:20:35,690 --> 00:20:41,030
component we can either change its props

00:20:37,910 --> 00:20:45,710
or we can change its state if we changed

00:20:41,030 --> 00:20:47,690
the props of the component then it would

00:20:45,710 --> 00:20:52,250
kind of kill the whole optimization we

00:20:47,690 --> 00:20:55,520
try to keep props the same so we left

00:20:52,250 --> 00:20:58,340
with only one option we have to change

00:20:55,520 --> 00:21:00,860
this date and that's that's exactly what

00:20:58,340 --> 00:21:06,290
we're gonna do we're gonna introduce

00:21:00,860 --> 00:21:08,450
this ugly function called use forced

00:21:06,290 --> 00:21:10,610
render and inside of that function we're

00:21:08,450 --> 00:21:13,690
gonna have an internal state into the

00:21:10,610 --> 00:21:16,790
state which is initialized with 0 and

00:21:13,690 --> 00:21:19,910
when we want to trigger a force we

00:21:16,790 --> 00:21:23,480
render we just add one to our current

00:21:19,910 --> 00:21:27,860
state so it's going to be 1 2 3 4 and

00:21:23,480 --> 00:21:32,000
etc etc and now we have to somehow

00:21:27,860 --> 00:21:35,030
subscribe to field updates of our field

00:21:32,000 --> 00:21:40,150
so we're gonna add an empty object of

00:21:35,030 --> 00:21:42,400
subscribers to our field we're gonna add

00:21:40,150 --> 00:21:45,890
method called subscribe sell updates

00:21:42,400 --> 00:21:47,690
which accepts row ID cell ID and some

00:21:45,890 --> 00:21:51,860
kind of callback which should be called

00:21:47,690 --> 00:21:55,310
when that cell is updated and we had

00:21:51,860 --> 00:21:58,370
that call back to our map of subscribers

00:21:55,310 --> 00:22:02,050
and if we take a look at our cell set

00:21:58,370 --> 00:22:05,150
method set cell sorry

00:22:02,050 --> 00:22:08,180
what changed here is that now we look up

00:22:05,150 --> 00:22:12,560
the cell subscriber go back from our map

00:22:08,180 --> 00:22:17,360
of subscribers and if if one found we

00:22:12,560 --> 00:22:22,430
call it our app component didn't change

00:22:17,360 --> 00:22:25,970
at all but our cell component now calls

00:22:22,430 --> 00:22:29,720
that custom hook use force render to get

00:22:25,970 --> 00:22:31,850
that force render function and it calls

00:22:29,720 --> 00:22:34,940
use effect and I decided that he's

00:22:31,850 --> 00:22:38,120
attacked it subscribes to the cell

00:22:34,940 --> 00:22:41,780
updates of our field and passes that

00:22:38,120 --> 00:22:43,850
force render function there so now let's

00:22:41,780 --> 00:22:48,320
go back to our browser and see if it

00:22:43,850 --> 00:22:54,680
helps us so now we click and we have our

00:22:48,320 --> 00:22:56,000
check mark pretty cool and I want to

00:22:54,680 --> 00:22:57,740
tell you that actually that this

00:22:56,000 --> 00:23:02,330
actually solves our performance problem

00:22:57,740 --> 00:23:07,250
but you don't have to trust my word and

00:23:02,330 --> 00:23:14,060
we gonna actually go and increase the

00:23:07,250 --> 00:23:16,930
field size to the same 150 that's gonna

00:23:14,060 --> 00:23:16,930
take quite some time

00:23:30,049 --> 00:23:37,830
all right here we go and I have to

00:23:33,780 --> 00:23:43,370
throttle my CPU and now click click

00:23:37,830 --> 00:23:43,370
click it's blazing fast Oh

00:23:47,230 --> 00:23:56,140
and let's take a look at our profiler so

00:23:53,200 --> 00:23:58,720
now when we click on a cell it shows

00:23:56,140 --> 00:24:02,350
only one render because we eliminated

00:23:58,720 --> 00:24:04,840
that expensive recalculating process

00:24:02,350 --> 00:24:06,520
that happens inside of react if you

00:24:04,840 --> 00:24:10,240
interested in that you can Google

00:24:06,520 --> 00:24:13,960
reconcile Rican suede reconciliation

00:24:10,240 --> 00:24:16,090
process and I think that Sophie had a

00:24:13,960 --> 00:24:17,470
great talk about that so I think that if

00:24:16,090 --> 00:24:24,160
you google it you can find it pretty

00:24:17,470 --> 00:24:27,549
easily and the last step we have missed

00:24:24,160 --> 00:24:31,419
one crucial step to our refactoring and

00:24:27,549 --> 00:24:35,020
that unsubscribing from cell updates

00:24:31,419 --> 00:24:38,559
because now our code is a subject to a

00:24:35,020 --> 00:24:41,140
memory leak because we subscribed and we

00:24:38,559 --> 00:24:42,400
never unsubscribe always remember to

00:24:41,140 --> 00:24:45,490
unsubscribe if you subscribe to

00:24:42,400 --> 00:24:48,850
something so now we add unsubscribe cell

00:24:45,490 --> 00:24:51,840
updates function and we delete our

00:24:48,850 --> 00:24:56,169
callback from the map of subscribers and

00:24:51,840 --> 00:24:58,809
for to our use effect we pass a function

00:24:56,169 --> 00:25:03,390
that will call that unsubscribe cell

00:24:58,809 --> 00:25:07,900
updates once cell component is unmounted

00:25:03,390 --> 00:25:12,490
let's go back to our browser and see if

00:25:07,900 --> 00:25:17,980
it still works and it does cool alright

00:25:12,490 --> 00:25:22,110
and to the final words so don't do any

00:25:17,980 --> 00:25:25,840
premature optimizations please I mean

00:25:22,110 --> 00:25:31,230
rules are meant to be broken that's for

00:25:25,840 --> 00:25:34,750
sure but you gotta have a very very

00:25:31,230 --> 00:25:40,600
valid concern and you gotta have a good

00:25:34,750 --> 00:25:43,900
reason to break a rule because in 99 out

00:25:40,600 --> 00:25:46,270
of 100 cases liftin stood up works and

00:25:43,900 --> 00:25:50,730
it works great and everybody knows what

00:25:46,270 --> 00:25:50,730
there is I mean really don't do it guys

00:25:52,500 --> 00:25:59,110
so here are two links the first link is

00:25:56,290 --> 00:26:00,580
the source code of the of that

00:25:59,110 --> 00:26:02,799
implementation and

00:26:00,580 --> 00:26:06,760
second link is the article that this

00:26:02,799 --> 00:26:09,640
talk is based upon and here are my

00:26:06,760 --> 00:26:12,909
contacts if you ever need me just ping

00:26:09,640 --> 00:26:19,120
me on email on Twitter and QR code is

00:26:12,909 --> 00:26:21,580
the contains link to the slides so happy

00:26:19,120 --> 00:26:24,510
to be here and let's learn how to build

00:26:21,580 --> 00:26:28,490
better subscribe together guys thank you

00:26:24,510 --> 00:26:28,490

YouTube URL: https://www.youtube.com/watch?v=3JEQlKGcbHQ


