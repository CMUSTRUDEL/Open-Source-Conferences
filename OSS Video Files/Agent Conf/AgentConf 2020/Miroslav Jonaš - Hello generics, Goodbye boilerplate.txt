Title: Miroslav JonaÅ¡ - Hello generics, Goodbye boilerplate
Publication date: 2020-02-22
Playlist: AgentConf 2020
Description: 
	Hello generics, Goodbye boilerplate
Captions: 
	00:00:37,160 --> 00:00:45,210
hey everyone and obrigado Cera so I'm

00:00:42,900 --> 00:00:47,460
glad I see so many of you still survived

00:00:45,210 --> 00:00:52,050
these two days and there's still a bunch

00:00:47,460 --> 00:00:53,699
of people here I I'm very honored to

00:00:52,050 --> 00:00:56,699
share this stage with so many smart

00:00:53,699 --> 00:00:58,890
people these days and to see so many

00:00:56,699 --> 00:01:02,339
great ideas on this stage and if you

00:00:58,890 --> 00:01:04,920
shared the same with me I would like you

00:01:02,339 --> 00:01:06,420
after my talk to give another applause

00:01:04,920 --> 00:01:08,940
for all the speakers that were in a

00:01:06,420 --> 00:01:10,470
stage so that even if you don't like my

00:01:08,940 --> 00:01:14,190
talk there will still be some sort of

00:01:10,470 --> 00:01:17,360
applause afterwards so I thought this

00:01:14,190 --> 00:01:20,070
picture was fitting for the conference

00:01:17,360 --> 00:01:22,619
one thing I've noticed this morning is

00:01:20,070 --> 00:01:25,350
that none of these peoples are wearing

00:01:22,619 --> 00:01:27,750
helmets I think that back in the days

00:01:25,350 --> 00:01:30,600
probably their skulls were so thick that

00:01:27,750 --> 00:01:32,340
they didn't actually need helmets so if

00:01:30,600 --> 00:01:34,200
you would put one of these letting me

00:01:32,340 --> 00:01:38,130
gadget on their heads it just wouldn't

00:01:34,200 --> 00:01:40,500
work but if you're not one of the people

00:01:38,130 --> 00:01:42,959
that like skiing or snowboarding is I've

00:01:40,500 --> 00:01:45,200
seen only one third of you mentioned

00:01:42,959 --> 00:01:48,119
that they will go from here to like

00:01:45,200 --> 00:01:51,209
don't worry because I have another slide

00:01:48,119 --> 00:01:52,979
for you so as you can see I'm quite

00:01:51,209 --> 00:01:55,950
passionate for the vintage photography

00:01:52,979 --> 00:01:58,259
actually any photography and one more

00:01:55,950 --> 00:02:01,770
thing that I am very passionate about is

00:01:58,259 --> 00:02:03,780
the topic of today's talk but it

00:02:01,770 --> 00:02:06,750
happened in the past that I was

00:02:03,780 --> 00:02:09,450
passionate about something and then I

00:02:06,750 --> 00:02:11,940
was super excited and I thought to

00:02:09,450 --> 00:02:14,160
myself yes this is it this will change

00:02:11,940 --> 00:02:16,050
everything and I would go to people that

00:02:14,160 --> 00:02:20,040
I know and I would share my excitement

00:02:16,050 --> 00:02:23,849
and often not everyone was as excited as

00:02:20,040 --> 00:02:26,069
I was so I'm gonna do a little bit of

00:02:23,849 --> 00:02:28,200
reality check with you so I'm going to

00:02:26,069 --> 00:02:30,420
show you some statements and if you

00:02:28,200 --> 00:02:33,720
agree with these statements just raise

00:02:30,420 --> 00:02:36,330
your hand or just give me any sort of

00:02:33,720 --> 00:02:39,000
audio visual cue that you agree and

00:02:36,330 --> 00:02:41,180
think of it as a late mild exercise

00:02:39,000 --> 00:02:45,510
before the end of the conference so

00:02:41,180 --> 00:02:48,709
statement number one all developers

00:02:45,510 --> 00:02:52,379
allowed to code who agrees with this

00:02:48,709 --> 00:02:57,030
okay let me see those hands no no not

00:02:52,379 --> 00:02:59,519
everyone agrees okay so some of you

00:02:57,030 --> 00:03:00,000
think that not every developer loves to

00:02:59,519 --> 00:03:02,640
code

00:03:00,000 --> 00:03:04,829
I guess you're probably right but I

00:03:02,640 --> 00:03:06,900
wouldn't necessarily call those people

00:03:04,829 --> 00:03:08,790
that don't love to code developers I

00:03:06,900 --> 00:03:12,060
guess if you're developer you really

00:03:08,790 --> 00:03:15,659
like the code now let's try to refine

00:03:12,060 --> 00:03:20,250
this even more all developers love to

00:03:15,659 --> 00:03:21,930
copy-paste code right I mean why would

00:03:20,250 --> 00:03:24,900
you why would you have to type this

00:03:21,930 --> 00:03:26,489
manually right when there's Stack

00:03:24,900 --> 00:03:29,250
Overflow that was built for this purpose

00:03:26,489 --> 00:03:31,470
and there are tutorials and and blogs in

00:03:29,250 --> 00:03:33,810
and even your old project that you can

00:03:31,470 --> 00:03:35,939
just go there and copy some parts and

00:03:33,810 --> 00:03:40,049
put it into your project easy peasy

00:03:35,939 --> 00:03:43,049
right but this is not the highest level

00:03:40,049 --> 00:03:45,150
of development because some developers

00:03:43,049 --> 00:03:47,849
love to copy/paste boilerplate code

00:03:45,150 --> 00:03:49,980
right I mean this is like the highest

00:03:47,849 --> 00:03:51,989
evolutionary level of copy-pasting

00:03:49,980 --> 00:03:53,699
because you don't even have to go

00:03:51,989 --> 00:03:56,299
somewhere else it's already there in

00:03:53,699 --> 00:03:58,799
your project just look into your

00:03:56,299 --> 00:04:00,780
component that you written yesterday or

00:03:58,799 --> 00:04:06,150
a look into the service that you written

00:04:00,780 --> 00:04:08,010
week ago or some parts of your state

00:04:06,150 --> 00:04:10,049
management that was written month ago or

00:04:08,010 --> 00:04:11,250
even couple of months ago right you just

00:04:10,049 --> 00:04:13,590
have to know where to look in your

00:04:11,250 --> 00:04:18,570
project which most of the case is fine

00:04:13,590 --> 00:04:21,810
right but yeah I see they're not there

00:04:18,570 --> 00:04:24,659
are no more hands I guess then you agree

00:04:21,810 --> 00:04:28,289
with me but what is boilerplate actually

00:04:24,659 --> 00:04:31,440
if you look into Google and type

00:04:28,289 --> 00:04:33,900
boilerplate and go to images among the

00:04:31,440 --> 00:04:36,090
things you might find this image and

00:04:33,900 --> 00:04:37,770
this is called Johnson versus

00:04:36,090 --> 00:04:40,080
boilerplate and if it's not clear from

00:04:37,770 --> 00:04:43,800
the image boilerplate is the one with a

00:04:40,080 --> 00:04:45,990
helmet but if you would like to see some

00:04:43,800 --> 00:04:47,400
meaningful information it's probably

00:04:45,990 --> 00:04:49,650
better to go to the kopitiam

00:04:47,400 --> 00:04:52,560
we would find a finish like this with

00:04:49,650 --> 00:04:54,900
boilerplate code are sections of code

00:04:52,560 --> 00:04:58,400
that have to be included over the

00:04:54,900 --> 00:05:01,280
application with little or no alteration

00:04:58,400 --> 00:05:05,230
now recently I read

00:05:01,280 --> 00:05:09,139
few blocks that claim that 90% of good

00:05:05,230 --> 00:05:11,810
codebase is boilerplate now bear with me

00:05:09,139 --> 00:05:15,770
it sounds really controversial how can

00:05:11,810 --> 00:05:17,900
code be good and have such a huge amount

00:05:15,770 --> 00:05:18,860
of boilerplate at the same time but if

00:05:17,900 --> 00:05:21,080
you think about it

00:05:18,860 --> 00:05:24,740
good boilerplate has one characteristic

00:05:21,080 --> 00:05:27,740
and that's common architecture all

00:05:24,740 --> 00:05:29,690
across so that means that you're all

00:05:27,740 --> 00:05:32,900
components were probably built in the

00:05:29,690 --> 00:05:35,600
same way your state management was

00:05:32,900 --> 00:05:38,660
probably built in the same way you use

00:05:35,600 --> 00:05:42,470
services for fetching external data

00:05:38,660 --> 00:05:44,360
through HTTP probably same way and this

00:05:42,470 --> 00:05:46,430
is what's causing the boilerplate now

00:05:44,360 --> 00:05:48,860
this number probably is more fitting to

00:05:46,430 --> 00:05:51,680
some Java beacons not necessarily

00:05:48,860 --> 00:05:55,070
front-end but it's still a high number

00:05:51,680 --> 00:05:58,250
for front ends as well but before I go

00:05:55,070 --> 00:05:59,990
deep into boilerplate and what we can do

00:05:58,250 --> 00:06:04,190
about it let me just briefly introduce

00:05:59,990 --> 00:06:07,460
myself my name is Miroslava Yash not my

00:06:04,190 --> 00:06:09,530
rustle of Enosh that's why my handle has

00:06:07,460 --> 00:06:10,520
this double e so that people would know

00:06:09,530 --> 00:06:14,330
how to pronounce it

00:06:10,520 --> 00:06:16,940
I work in Vienna for a company called 5g

00:06:14,330 --> 00:06:20,479
systems it's a company that's building

00:06:16,940 --> 00:06:23,240
gaming solutions for our clients

00:06:20,479 --> 00:06:26,090
I'm also Corgan either of Vienna J's

00:06:23,240 --> 00:06:28,970
meet up and Corgan either of angular

00:06:26,090 --> 00:06:34,310
Vienna Meetup and co-founder of angular

00:06:28,970 --> 00:06:36,289
Austria Association now in 5g we built a

00:06:34,310 --> 00:06:38,090
lot of applications some of them are

00:06:36,289 --> 00:06:39,620
super small they take just couple of

00:06:38,090 --> 00:06:42,340
kilobytes and we are specifically

00:06:39,620 --> 00:06:44,840
targeting this minimalistic frameworks

00:06:42,340 --> 00:06:47,780
frameworks or libraries such as well

00:06:44,840 --> 00:06:51,050
that actually get rid of all the

00:06:47,780 --> 00:06:54,380
framework e code after compilation but

00:06:51,050 --> 00:06:57,350
we also have this typical big kind of

00:06:54,380 --> 00:06:59,060
admin portal enterprise applications and

00:06:57,350 --> 00:07:01,039
one thing that's common for this

00:06:59,060 --> 00:07:03,560
applications is that we usually build

00:07:01,039 --> 00:07:07,010
them in the same framework and we use

00:07:03,560 --> 00:07:09,169
the same design principles so what

00:07:07,010 --> 00:07:11,930
happens is that when we need to build a

00:07:09,169 --> 00:07:13,159
new feature will probably copy-paste

00:07:11,930 --> 00:07:15,350
bunch of stuff from the previous

00:07:13,159 --> 00:07:18,830
features and not only that

00:07:15,350 --> 00:07:21,500
whenever we find some new way of how to

00:07:18,830 --> 00:07:24,170
improve our code we usually first

00:07:21,500 --> 00:07:26,900
applied to one component or one service

00:07:24,170 --> 00:07:29,030
or one small chunk then when we see that

00:07:26,900 --> 00:07:32,180
it's working we apply it across the

00:07:29,030 --> 00:07:34,190
applique up across the project and then

00:07:32,180 --> 00:07:36,470
copy paste the same same thing to

00:07:34,190 --> 00:07:40,330
another project that we have so there's

00:07:36,470 --> 00:07:43,670
a lot of code duplication going on now

00:07:40,330 --> 00:07:46,040
since we wanted to have our application

00:07:43,670 --> 00:07:48,050
somehow more readable and be able to

00:07:46,040 --> 00:07:50,620
follow the changes we introduced state

00:07:48,050 --> 00:07:54,830
management as probably you have as well

00:07:50,620 --> 00:07:57,410
and in state management showed us that

00:07:54,830 --> 00:07:59,660
boilerplate that we thought was horrible

00:07:57,410 --> 00:08:02,000
yesterday was nothing but a child's

00:07:59,660 --> 00:08:05,230
played today because state management

00:08:02,000 --> 00:08:07,970
brings boilerplate to a whole new level

00:08:05,230 --> 00:08:10,460
but state management is not that bad of

00:08:07,970 --> 00:08:11,810
course it helped us to to follow the

00:08:10,460 --> 00:08:13,760
changes through the system

00:08:11,810 --> 00:08:16,490
whenever something broke we could easily

00:08:13,760 --> 00:08:18,320
just see the chain of actions that

00:08:16,490 --> 00:08:20,480
happened and how they were changing the

00:08:18,320 --> 00:08:23,810
state so that we can reproduce this

00:08:20,480 --> 00:08:29,060
problem and also it helped us to better

00:08:23,810 --> 00:08:30,830
organize our application now this for

00:08:29,060 --> 00:08:33,800
the record is not the typical website

00:08:30,830 --> 00:08:37,039
that we build in our company but I

00:08:33,800 --> 00:08:41,930
thought it was simple enough to show how

00:08:37,039 --> 00:08:47,840
our code how odd functions now this is

00:08:41,930 --> 00:08:50,510
the North corrupt site movie Award for

00:08:47,840 --> 00:08:52,130
most important categories not the one

00:08:50,510 --> 00:08:53,810
that official Oscar promotes

00:08:52,130 --> 00:08:56,110
so you have categories right like most

00:08:53,810 --> 00:08:58,700
revealing trailer most predictable plot

00:08:56,110 --> 00:09:02,390
most ripoff scenes and most unsuitable

00:08:58,700 --> 00:09:05,240
score and as any other website you can

00:09:02,390 --> 00:09:07,340
chat about it with your friends over ICQ

00:09:05,240 --> 00:09:09,950
you can copy the fresh conversion from

00:09:07,340 --> 00:09:14,510
Pirate Bay or you can post it on your

00:09:09,950 --> 00:09:17,840
space now if we would go to second link

00:09:14,510 --> 00:09:20,270
which is nominees we would trigger

00:09:17,840 --> 00:09:22,460
probably router that would then realize

00:09:20,270 --> 00:09:25,550
ok this is a different route I need to

00:09:22,460 --> 00:09:27,800
load nominees component and it would

00:09:25,550 --> 00:09:28,850
starts started to load nominees

00:09:27,800 --> 00:09:31,069
component now

00:09:28,850 --> 00:09:34,069
his component would show first the

00:09:31,069 --> 00:09:36,410
header and then it would fire an action

00:09:34,069 --> 00:09:39,560
now action in this case would be loud

00:09:36,410 --> 00:09:41,509
nominees and we would have a payload of

00:09:39,560 --> 00:09:44,509
here 20/20 because these are the

00:09:41,509 --> 00:09:46,519
nominees that we want to fetch what

00:09:44,509 --> 00:09:49,220
happens when this action is fired is

00:09:46,519 --> 00:09:51,589
that at the same time effects listening

00:09:49,220 --> 00:09:53,860
to actions would realize it has to fetch

00:09:51,589 --> 00:09:56,690
data for nominees from the back end so

00:09:53,860 --> 00:09:59,420
it would contact the service and request

00:09:56,690 --> 00:10:01,730
the data and at the same time reducer

00:09:59,420 --> 00:10:04,730
would set loading to true which would

00:10:01,730 --> 00:10:09,350
show this text and also this loading

00:10:04,730 --> 00:10:13,220
animation now after some time once the

00:10:09,350 --> 00:10:17,060
data arrives we would get the response

00:10:13,220 --> 00:10:19,639
we would create nominees loaded action

00:10:17,060 --> 00:10:22,459
where we would map this payload and this

00:10:19,639 --> 00:10:24,800
would again trigger the reducer it would

00:10:22,459 --> 00:10:28,610
set loading to false and would set

00:10:24,800 --> 00:10:33,290
payload as the nominees now this is the

00:10:28,610 --> 00:10:36,170
happy flow which would then follow with

00:10:33,290 --> 00:10:40,670
our data coming in and we would render

00:10:36,170 --> 00:10:45,560
this nice posters for our movies and we

00:10:40,670 --> 00:10:47,089
would print out all our nominees now as

00:10:45,560 --> 00:10:49,939
I said this is the happy flow if

00:10:47,089 --> 00:10:53,089
everything goes correctly what if we

00:10:49,939 --> 00:10:55,189
would request nominees for a year 2021

00:10:53,089 --> 00:10:58,000
of course these nominees don't exist yet

00:10:55,189 --> 00:11:01,310
because these movies haven't been made

00:10:58,000 --> 00:11:04,009
so we would probably get 404 error and

00:11:01,310 --> 00:11:08,269
what do you get with 404 you usually map

00:11:04,009 --> 00:11:11,089
it in some felt action and failed action

00:11:08,269 --> 00:11:13,639
is then resetting our state back to

00:11:11,089 --> 00:11:15,199
loading false and saving the error so

00:11:13,639 --> 00:11:19,689
that we know what to do next and in this

00:11:15,199 --> 00:11:22,610
case we would render the 404 component

00:11:19,689 --> 00:11:26,269
now we are using for this project

00:11:22,610 --> 00:11:28,910
mostly angular and we are using ng rx

00:11:26,269 --> 00:11:32,689
as our state management system ng rx was

00:11:28,910 --> 00:11:36,439
heavily based on Redux and it's kind of

00:11:32,689 --> 00:11:39,019
off spring between reduction rxjs having

00:11:36,439 --> 00:11:42,350
been baptized by typescript so it's like

00:11:39,019 --> 00:11:44,630
a nice mixture of different technologies

00:11:42,350 --> 00:11:46,940
I mean initially the action creators

00:11:44,630 --> 00:11:50,180
looked like this so we had some classes

00:11:46,940 --> 00:11:52,520
each class had a unique name or maybe

00:11:50,180 --> 00:11:55,250
not so unique name was implementing

00:11:52,520 --> 00:11:57,650
action interface which said that each

00:11:55,250 --> 00:12:00,440
action has to have type so it would have

00:11:57,650 --> 00:12:02,240
type which was some string to these

00:12:00,440 --> 00:12:06,050
nominees action types that flowed

00:12:02,240 --> 00:12:08,390
nominees is actually just a constant and

00:12:06,050 --> 00:12:11,150
this is a unique constant that helps us

00:12:08,390 --> 00:12:12,770
to find action or to distinguish actions

00:12:11,150 --> 00:12:15,050
at a later stage so that we know which

00:12:12,770 --> 00:12:15,950
reducer function to trigger or which

00:12:15,050 --> 00:12:18,970
effector trigger

00:12:15,950 --> 00:12:21,110
and here you can see three different

00:12:18,970 --> 00:12:23,750
actions and there's actually a lot of

00:12:21,110 --> 00:12:26,330
boilerplate just on this screen if it's

00:12:23,750 --> 00:12:29,930
not so clear let me hide the information

00:12:26,330 --> 00:12:32,000
that's being duplicated you can see that

00:12:29,930 --> 00:12:34,310
from all that code this is the only

00:12:32,000 --> 00:12:36,590
information that you need what is the

00:12:34,310 --> 00:12:39,920
name of the class what is the type and

00:12:36,590 --> 00:12:42,170
what is the type of the payload and

00:12:39,920 --> 00:12:45,170
wouldn't it be nice if we could define

00:12:42,170 --> 00:12:47,600
these classes just by specifying this

00:12:45,170 --> 00:12:51,050
information instead of typing all that

00:12:47,600 --> 00:12:53,600
stuff so we started thinking about it

00:12:51,050 --> 00:12:55,490
and looking at our code and the more we

00:12:53,600 --> 00:12:57,980
were looking the more code looked like

00:12:55,490 --> 00:13:00,230
this same same with slight differences

00:12:57,980 --> 00:13:03,020
there was a lot of duplication a lot of

00:13:00,230 --> 00:13:07,400
same things over and over so we said

00:13:03,020 --> 00:13:10,870
okay it's time to bring generics before

00:13:07,400 --> 00:13:13,640
I explain how generics works let's just

00:13:10,870 --> 00:13:16,580
look at this scenario let's say we have

00:13:13,640 --> 00:13:20,030
three classes we have class student'

00:13:16,580 --> 00:13:21,800
class car and class pet now student has

00:13:20,030 --> 00:13:23,840
two input parameters first name and last

00:13:21,800 --> 00:13:26,360
name and it has a getter that returns

00:13:23,840 --> 00:13:29,330
the full name of the person we have them

00:13:26,360 --> 00:13:32,090
card that has brand and model and we

00:13:29,330 --> 00:13:35,000
have a pet that has a name now cars

00:13:32,090 --> 00:13:37,820
usually don't have names in some movies

00:13:35,000 --> 00:13:41,390
maybe but generally you don't name your

00:13:37,820 --> 00:13:43,880
car I guess so let's say we have a

00:13:41,390 --> 00:13:46,610
function that looks like this it takes

00:13:43,880 --> 00:13:48,640
an item gets the name property and

00:13:46,610 --> 00:13:51,560
returns the length of the name property

00:13:48,640 --> 00:13:52,970
and now if we create an instances of

00:13:51,560 --> 00:13:54,840
student Jane Doe

00:13:52,970 --> 00:13:58,500
Dokdo B and

00:13:54,840 --> 00:14:01,770
or SUV car Toyota rav4 and we try to run

00:13:58,500 --> 00:14:04,230
it through our name length function we

00:14:01,770 --> 00:14:06,030
would get the run time exception and not

00:14:04,230 --> 00:14:07,680
only we would get run time exception but

00:14:06,030 --> 00:14:10,530
we would get this famous run time

00:14:07,680 --> 00:14:12,390
exception that's happening so many times

00:14:10,530 --> 00:14:17,060
that doesn't provide any information

00:14:12,390 --> 00:14:19,980
whatsoever property length of undefined

00:14:17,060 --> 00:14:22,080
most likely your application has bunch

00:14:19,980 --> 00:14:23,490
of dot lengths everywhere so when you

00:14:22,080 --> 00:14:25,590
get something like this from the

00:14:23,490 --> 00:14:28,370
minified code you have absolutely no

00:14:25,590 --> 00:14:30,900
idea where to look and this is quite

00:14:28,370 --> 00:14:33,780
tricky of course even when your code is

00:14:30,900 --> 00:14:36,360
small it's still hard to find it so what

00:14:33,780 --> 00:14:39,240
if we would like to get this information

00:14:36,360 --> 00:14:41,490
not in the run time but during our

00:14:39,240 --> 00:14:44,400
compilation time or while we are editing

00:14:41,490 --> 00:14:46,830
our file so let's assume we have

00:14:44,400 --> 00:14:51,240
interface that's defined like this has

00:14:46,830 --> 00:14:54,210
name property has named and that has one

00:14:51,240 --> 00:14:56,760
property name of type string now we can

00:14:54,210 --> 00:14:59,790
modified our function by saying that our

00:14:56,760 --> 00:15:02,880
function takes any parameter T any

00:14:59,790 --> 00:15:05,070
generic parameter T as long as this T

00:15:02,880 --> 00:15:07,950
extends has name which basically means

00:15:05,070 --> 00:15:10,440
you can put whatever parameter in as

00:15:07,950 --> 00:15:13,260
long as it has property name of type

00:15:10,440 --> 00:15:16,770
string so then when we run our code

00:15:13,260 --> 00:15:19,470
again if you have some modern ID it

00:15:16,770 --> 00:15:22,110
would immediately highlight and it would

00:15:19,470 --> 00:15:24,270
return this typescript error saying that

00:15:22,110 --> 00:15:26,820
argument of type car is not assignable

00:15:24,270 --> 00:15:29,910
to parameter of type has name because

00:15:26,820 --> 00:15:31,650
name is missing and this already gives

00:15:29,910 --> 00:15:34,020
you all the information so it's not

00:15:31,650 --> 00:15:35,490
cryptic it doesn't force you to dig

00:15:34,020 --> 00:15:37,860
through the code to figure out where is

00:15:35,490 --> 00:15:40,470
the mistake it tells you exactly what

00:15:37,860 --> 00:15:43,560
the mistake is and this is what generics

00:15:40,470 --> 00:15:46,440
bring us they give us flexibility to

00:15:43,560 --> 00:15:48,030
still have a variable types to still be

00:15:46,440 --> 00:15:50,630
able to feed our functions with

00:15:48,030 --> 00:15:54,840
different classes with different types

00:15:50,630 --> 00:15:59,550
but have some sort of or semi type

00:15:54,840 --> 00:16:02,430
safety now in this mind we create a

00:15:59,550 --> 00:16:04,790
generic action class which we call base

00:16:02,430 --> 00:16:07,279
action and base action takes just one

00:16:04,790 --> 00:16:09,589
generic parameter T

00:16:07,279 --> 00:16:11,509
and since it implements action we had to

00:16:09,589 --> 00:16:15,560
define type otherwise the compiler would

00:16:11,509 --> 00:16:17,810
complain so we just set it to now and we

00:16:15,560 --> 00:16:22,879
have our payload which has the same type

00:16:17,810 --> 00:16:25,160
so now instead of writing this we could

00:16:22,879 --> 00:16:28,699
just write this so instead of writing

00:16:25,160 --> 00:16:31,009
this third line constructor public

00:16:28,699 --> 00:16:33,410
payload number we could just say that

00:16:31,009 --> 00:16:35,689
our class load nominee's implements base

00:16:33,410 --> 00:16:39,949
action of number and we already got rid

00:16:35,689 --> 00:16:42,680
of one line now typically our state

00:16:39,949 --> 00:16:44,480
slices have like ten actions and maybe

00:16:42,680 --> 00:16:47,709
we have ten different features so that's

00:16:44,480 --> 00:16:49,879
like 100 different actions that means we

00:16:47,709 --> 00:16:54,259
successfully just removed hundred lines

00:16:49,879 --> 00:16:56,480
of code without doing any major work now

00:16:54,259 --> 00:16:59,800
one thing we realized is that these

00:16:56,480 --> 00:17:01,910
types and probably in all the other

00:16:59,800 --> 00:17:06,470
state management tools that you have

00:17:01,910 --> 00:17:10,100
been used are just strings and as much

00:17:06,470 --> 00:17:12,079
as you like to make them unique it's

00:17:10,100 --> 00:17:13,939
still just a string it doesn't have to

00:17:12,079 --> 00:17:16,370
be unique someone can make a mistake and

00:17:13,939 --> 00:17:18,949
name action in some completely different

00:17:16,370 --> 00:17:22,429
part of the application with the same

00:17:18,949 --> 00:17:24,429
name and this would cause a problem so

00:17:22,429 --> 00:17:27,530
we were looking at this and we realize

00:17:24,429 --> 00:17:30,440
hey class is unique because it takes

00:17:27,530 --> 00:17:32,899
specific place in the memory so there's

00:17:30,440 --> 00:17:35,149
no way that two classes will be the same

00:17:32,899 --> 00:17:37,669
it's always different and every time we

00:17:35,149 --> 00:17:39,500
create an instance of a class when we

00:17:37,669 --> 00:17:41,840
create an action this action forever

00:17:39,500 --> 00:17:44,899
keeps the reference to the class that

00:17:41,840 --> 00:17:47,570
created it so we could just drop the

00:17:44,899 --> 00:17:48,460
whole read-only type and write something

00:17:47,570 --> 00:17:51,470
like this

00:17:48,460 --> 00:17:53,630
so we successfully managed to go from

00:17:51,470 --> 00:17:56,830
three lines of code to single line of

00:17:53,630 --> 00:17:59,390
code and way more readable by the way

00:17:56,830 --> 00:18:02,270
now at the same time while we were doing

00:17:59,390 --> 00:18:03,649
this ng rx team was doing on their own

00:18:02,270 --> 00:18:06,110
solution they also realized that

00:18:03,649 --> 00:18:09,440
although actions are the base part of

00:18:06,110 --> 00:18:12,440
the state management and it's kind of

00:18:09,440 --> 00:18:15,649
building block of statement it's also

00:18:12,440 --> 00:18:17,750
huge boilerplate so they decided to drop

00:18:15,649 --> 00:18:19,669
classes altogether and they created a

00:18:17,750 --> 00:18:21,230
function that's called create action

00:18:19,669 --> 00:18:25,730
this function

00:18:21,230 --> 00:18:27,620
is slightly wrongly named because it's

00:18:25,730 --> 00:18:29,750
not actually create action its create

00:18:27,620 --> 00:18:32,059
action creator because this function

00:18:29,750 --> 00:18:34,309
returns action creator that will then

00:18:32,059 --> 00:18:38,000
generate the action and you specify

00:18:34,309 --> 00:18:41,419
again type and you specify this props

00:18:38,000 --> 00:18:44,570
function where you say which type you're

00:18:41,419 --> 00:18:47,150
expecting and this injects the type

00:18:44,570 --> 00:18:49,580
safety into your action creator so later

00:18:47,150 --> 00:18:51,190
on when you are creating action it will

00:18:49,580 --> 00:18:56,150
make sure that you are specifying the

00:18:51,190 --> 00:19:00,230
properties of specific type now we were

00:18:56,150 --> 00:19:02,720
kind of excited about what we managed to

00:19:00,230 --> 00:19:05,570
do with actions how we managed to reduce

00:19:02,720 --> 00:19:08,660
them so we thought what can we do to the

00:19:05,570 --> 00:19:11,240
reducers and this is how the reducer

00:19:08,660 --> 00:19:13,730
generally looks like in most of the

00:19:11,240 --> 00:19:16,070
state management libraries it's usually

00:19:13,730 --> 00:19:18,500
function that takes two parameters state

00:19:16,070 --> 00:19:20,960
and the action and returns the state and

00:19:18,500 --> 00:19:23,870
usually you have some clunky switch case

00:19:20,960 --> 00:19:26,690
inside or in simpler cases just if those

00:19:23,870 --> 00:19:28,850
branches that then checks if given

00:19:26,690 --> 00:19:31,669
action has a specific type and if it

00:19:28,850 --> 00:19:34,040
does it will reshape the new state

00:19:31,669 --> 00:19:38,360
otherwise it returns just the default

00:19:34,040 --> 00:19:40,160
state now again in your ex team had

00:19:38,360 --> 00:19:43,220
their own ideas and they didn't like the

00:19:40,160 --> 00:19:46,460
switch case so they created so-called

00:19:43,220 --> 00:19:48,950
own functions which are doing pretty

00:19:46,460 --> 00:19:52,340
much the same thing as switch case just

00:19:48,950 --> 00:19:54,140
slightly shorter for writing so they are

00:19:52,340 --> 00:19:57,650
fitting in with initial state and then

00:19:54,140 --> 00:20:00,200
on certain action type they are passing

00:19:57,650 --> 00:20:04,970
this mapper function that map's state

00:20:00,200 --> 00:20:08,120
and action to the new state and looking

00:20:04,970 --> 00:20:09,890
at this we realize one important thing

00:20:08,120 --> 00:20:12,220
in our applications and that is that

00:20:09,890 --> 00:20:16,130
every time we are loading some data

00:20:12,220 --> 00:20:19,880
every time we fire a load data action we

00:20:16,130 --> 00:20:22,760
set the loading to loading state and we

00:20:19,880 --> 00:20:26,000
reset the error to null at the same time

00:20:22,760 --> 00:20:27,980
every time there is a failure we reset

00:20:26,000 --> 00:20:30,890
the loading or we set the loading to

00:20:27,980 --> 00:20:33,020
failed and we save the error and we keep

00:20:30,890 --> 00:20:34,490
repeating this over and over in every

00:20:33,020 --> 00:20:36,559
slice

00:20:34,490 --> 00:20:39,080
and the only thing that's slightly

00:20:36,559 --> 00:20:41,809
different from case to case are the

00:20:39,080 --> 00:20:45,080
successful ones where we either store

00:20:41,809 --> 00:20:47,120
the data that comes or we do some

00:20:45,080 --> 00:20:49,970
sometimes bit more complicated logic

00:20:47,120 --> 00:20:52,550
like if we have one item and we are

00:20:49,970 --> 00:20:55,160
trying to put it in the in some

00:20:52,550 --> 00:20:57,020
collection then we usually try to find

00:20:55,160 --> 00:20:59,000
which place is the best for this item in

00:20:57,020 --> 00:21:02,360
the collection or if it's an associated

00:20:59,000 --> 00:21:04,490
list and we probably maybe update the

00:21:02,360 --> 00:21:06,770
item in this associates at least so with

00:21:04,490 --> 00:21:09,380
a successful State it wasn't that simple

00:21:06,770 --> 00:21:13,460
and straightforward but for loading and

00:21:09,380 --> 00:21:16,460
for failure it was always the same so we

00:21:13,460 --> 00:21:18,740
thought how can we optimize this how can

00:21:16,460 --> 00:21:20,660
we automate this so that we don't have

00:21:18,740 --> 00:21:23,690
to write these loading branches and

00:21:20,660 --> 00:21:25,910
failed branches over and over again and

00:21:23,690 --> 00:21:28,490
what is the information that we need for

00:21:25,910 --> 00:21:30,920
this so in order to do this our action

00:21:28,490 --> 00:21:32,840
needs to know or need to carry the

00:21:30,920 --> 00:21:36,500
information whether it's load action

00:21:32,840 --> 00:21:38,870
success section or failed action so we

00:21:36,500 --> 00:21:41,990
added something like this action group

00:21:38,870 --> 00:21:44,809
parameter sorry that this looks bit

00:21:41,990 --> 00:21:48,380
unreadable but I try to squeeze

00:21:44,809 --> 00:21:51,530
everything on one screen so we had this

00:21:48,380 --> 00:21:52,280
action group parameter that so for each

00:21:51,530 --> 00:21:55,070
creator

00:21:52,280 --> 00:21:56,809
we either specified as a load action

00:21:55,070 --> 00:21:58,490
group success action group or failure

00:21:56,809 --> 00:22:02,090
and then when we would create an action

00:21:58,490 --> 00:22:03,950
we would again pass this parameter now

00:22:02,090 --> 00:22:06,200
this was again boilerplate so it was

00:22:03,950 --> 00:22:09,290
kind of against what we were trying to

00:22:06,200 --> 00:22:12,309
accomplish so we decided that instead of

00:22:09,290 --> 00:22:14,960
using create action we create our own

00:22:12,309 --> 00:22:16,880
functions that would be called create

00:22:14,960 --> 00:22:19,100
load action create success section and

00:22:16,880 --> 00:22:21,290
create failure action and this would

00:22:19,100 --> 00:22:23,600
then wrap under the hood the action

00:22:21,290 --> 00:22:25,580
group parameter and then when you need

00:22:23,600 --> 00:22:27,710
to create an action you just specify the

00:22:25,580 --> 00:22:29,540
payload that's vital for you that's

00:22:27,710 --> 00:22:33,740
important you don't have to carry this

00:22:29,540 --> 00:22:35,600
action group along it any case if you

00:22:33,740 --> 00:22:37,670
need to access the action group is

00:22:35,600 --> 00:22:39,440
stored in your action creator and in

00:22:37,670 --> 00:22:44,230
your action but you don't have to

00:22:39,440 --> 00:22:47,289
specify there in the creation now it is

00:22:44,230 --> 00:22:50,649
Action Group we were now able to drop

00:22:47,289 --> 00:22:52,899
all these loading parts and failed parts

00:22:50,649 --> 00:22:54,549
and here it might not look that

00:22:52,899 --> 00:22:57,970
impressive because we just dropped two

00:22:54,549 --> 00:23:00,429
lines but imagine this reducer was way

00:22:57,970 --> 00:23:02,620
longer and we had reducers all over our

00:23:00,429 --> 00:23:07,899
application because we had many state

00:23:02,620 --> 00:23:10,019
slices so our saving was quite big but

00:23:07,899 --> 00:23:13,029
we also wanted to make it generic enough

00:23:10,019 --> 00:23:15,610
and this is how the whole code for this

00:23:13,029 --> 00:23:19,179
growth reducer looks like now I'm gonna

00:23:15,610 --> 00:23:21,100
go step by step so that you can follow

00:23:19,179 --> 00:23:23,620
what's happening here we have two

00:23:21,100 --> 00:23:26,590
generic parameters one is s which

00:23:23,620 --> 00:23:29,019
represents our state and a which

00:23:26,590 --> 00:23:31,240
represents our action so we have only

00:23:29,019 --> 00:23:34,240
two constraints is that s extends

00:23:31,240 --> 00:23:37,539
Baystate which means that as we'll need

00:23:34,240 --> 00:23:40,720
to have loading property and we'll need

00:23:37,539 --> 00:23:43,149
to have error property and action hey

00:23:40,720 --> 00:23:46,059
excellence action meaning it has to have

00:23:43,149 --> 00:23:48,159
type specified we have three parameters

00:23:46,059 --> 00:23:51,250
one is initial state which is of type

00:23:48,159 --> 00:23:53,380
state and we have associated list of all

00:23:51,250 --> 00:23:55,779
the action creators we want to handle

00:23:53,380 --> 00:23:59,440
and we have configuration with which we

00:23:55,779 --> 00:24:01,750
can manipulate how how well we want to

00:23:59,440 --> 00:24:05,200
override the functionality for a load

00:24:01,750 --> 00:24:08,500
successful and sailor so first of all we

00:24:05,200 --> 00:24:11,799
take out from this creators object all

00:24:08,500 --> 00:24:14,169
the types and we check if our action

00:24:11,799 --> 00:24:15,789
does not match one of these types then

00:24:14,169 --> 00:24:18,130
we should just remove the state this was

00:24:15,789 --> 00:24:20,919
important because since everything was

00:24:18,130 --> 00:24:24,220
now becoming automated we didn't want a

00:24:20,919 --> 00:24:27,429
reload action across application to

00:24:24,220 --> 00:24:30,159
trigger every reducer we wanted if we

00:24:27,429 --> 00:24:33,429
had for example I mean is reducer we

00:24:30,159 --> 00:24:37,269
wanted to only react on the nominee

00:24:33,429 --> 00:24:39,460
specific load actions so next we would

00:24:37,269 --> 00:24:41,500
check if it's grouped action and then if

00:24:39,460 --> 00:24:44,559
we specify the load reducer we would

00:24:41,500 --> 00:24:48,399
fire the load reducer on the state and

00:24:44,559 --> 00:24:50,620
action otherwise we would just run the

00:24:48,399 --> 00:24:53,980
default load reducer which just sets the

00:24:50,620 --> 00:24:56,500
loading to state loading and error too

00:24:53,980 --> 00:24:57,869
now as you've seen and the same thing is

00:24:56,500 --> 00:25:00,669
with failed so

00:24:57,869 --> 00:25:05,139
we either specify overwrite or we use

00:25:00,669 --> 00:25:06,879
the default one and additionally if it's

00:25:05,139 --> 00:25:08,739
not grouped action at all so if it's

00:25:06,879 --> 00:25:10,749
some generic action coming from router

00:25:08,739 --> 00:25:14,019
or from some component that we don't

00:25:10,749 --> 00:25:16,629
control we would handle it with general

00:25:14,019 --> 00:25:18,369
reducer or again we would fall back to

00:25:16,629 --> 00:25:20,289
default general reducer which just

00:25:18,369 --> 00:25:25,149
returns the state doesn't do anything

00:25:20,289 --> 00:25:28,450
with it and we were again quite excited

00:25:25,149 --> 00:25:30,429
but of what we did with our code so we

00:25:28,450 --> 00:25:31,989
said okay it's time for a real magic

00:25:30,429 --> 00:25:33,940
let's see what we can do with the

00:25:31,989 --> 00:25:36,159
effects for those of you who don't know

00:25:33,940 --> 00:25:38,529
what effects are if you some other

00:25:36,159 --> 00:25:42,299
statements it's sometimes called thunks

00:25:38,529 --> 00:25:45,960
or a synchronous actions it's basically

00:25:42,299 --> 00:25:49,269
code or functionality that you want to

00:25:45,960 --> 00:25:51,999
apply to your code a synchronously that

00:25:49,269 --> 00:25:53,769
doesn't fall inside this synchronous

00:25:51,999 --> 00:25:55,749
loop of state management so that's

00:25:53,769 --> 00:25:56,950
something you want to do on a side note

00:25:55,749 --> 00:25:59,470
there's a side effect

00:25:56,950 --> 00:26:01,869
and when this synchronous action is

00:25:59,470 --> 00:26:06,009
finished you then apply it back to the

00:26:01,869 --> 00:26:08,619
loop so this is how typical effects in

00:26:06,009 --> 00:26:10,749
ng rx looks like we have a create effect

00:26:08,619 --> 00:26:14,169
that listens to the stream of actions as

00:26:10,749 --> 00:26:16,299
I mentioned ng Rx is working on top of

00:26:14,169 --> 00:26:19,090
rxjs so all the actions are actually

00:26:16,299 --> 00:26:22,299
stream of actions observable stream and

00:26:19,090 --> 00:26:25,239
then we can apply standard rxjs

00:26:22,299 --> 00:26:26,889
operators on it so we simply check if is

00:26:25,239 --> 00:26:30,399
the correct type that we want to listen

00:26:26,889 --> 00:26:33,190
to in this case we want to isolate load

00:26:30,399 --> 00:26:37,659
nominees actions and then we apply the

00:26:33,190 --> 00:26:39,999
switch map to call the method from our

00:26:37,659 --> 00:26:43,720
service and feed it with the action and

00:26:39,999 --> 00:26:46,659
then this method from the service will

00:26:43,720 --> 00:26:48,580
probably make HTTP call and eventually

00:26:46,659 --> 00:26:51,460
it would return the response which we

00:26:48,580 --> 00:26:53,799
then map to nominee is loaded or if

00:26:51,460 --> 00:26:56,019
there is an error we return nominees

00:26:53,799 --> 00:26:58,539
load failed and we feed it with the

00:26:56,019 --> 00:27:00,549
error message and the original payload

00:26:58,539 --> 00:27:03,099
in case we need this information for

00:27:00,549 --> 00:27:06,759
presenting for example if you'll try to

00:27:03,099 --> 00:27:08,830
fetch nominees for year 2021 it would

00:27:06,759 --> 00:27:09,690
make sense to show error to the user

00:27:08,830 --> 00:27:12,360
that

00:27:09,690 --> 00:27:15,720
there is no such nominees for year 2021

00:27:12,360 --> 00:27:18,659
so we needed this number now if you look

00:27:15,720 --> 00:27:21,090
at this again every time we created

00:27:18,659 --> 00:27:24,120
these effects we would copy paste the

00:27:21,090 --> 00:27:27,570
code so in this code piece the only

00:27:24,120 --> 00:27:30,389
important part that we need is which

00:27:27,570 --> 00:27:33,570
type do we want to listen what method

00:27:30,389 --> 00:27:35,759
should I call if it's successful how

00:27:33,570 --> 00:27:39,200
should I treat the response and if it

00:27:35,759 --> 00:27:43,139
fails which failure action should I fire

00:27:39,200 --> 00:27:44,970
so we figure out okay we need to do

00:27:43,139 --> 00:27:46,639
something about it we would like to have

00:27:44,970 --> 00:27:49,769
a function that does something like this

00:27:46,639 --> 00:27:52,639
creates which map effect so it tells us

00:27:49,769 --> 00:27:55,620
that you will listen to loud nominees

00:27:52,639 --> 00:27:58,919
when you get to load nominees action you

00:27:55,620 --> 00:28:01,559
will call the get nominees using a

00:27:58,919 --> 00:28:04,019
switch map and then you would map the

00:28:01,559 --> 00:28:06,149
nominees till I mean is loaded otherwise

00:28:04,019 --> 00:28:09,960
if it's favored you'll fire nominees

00:28:06,149 --> 00:28:13,019
load failed and again this is how it

00:28:09,960 --> 00:28:15,480
works under the hood again we have two

00:28:13,019 --> 00:28:17,850
generic parameters one is our request

00:28:15,480 --> 00:28:20,429
which extends action so that's some

00:28:17,850 --> 00:28:22,139
object that represents the action and we

00:28:20,429 --> 00:28:23,269
have the response which can be pretty

00:28:22,139 --> 00:28:27,690
much any type

00:28:23,269 --> 00:28:29,580
now our allowed types are so-called type

00:28:27,690 --> 00:28:31,919
or creators so it's either type string

00:28:29,580 --> 00:28:33,980
or it's a creator function and we can

00:28:31,919 --> 00:28:36,419
also have array of these so we can

00:28:33,980 --> 00:28:38,100
listen not just a single type but a

00:28:36,419 --> 00:28:40,730
bunch of types if we want to handle

00:28:38,100 --> 00:28:43,710
different actions with the same effect

00:28:40,730 --> 00:28:46,590
now we have our method which now takes

00:28:43,710 --> 00:28:52,259
these two generic parameters so it says

00:28:46,590 --> 00:28:55,470
that first input is request type and it

00:28:52,259 --> 00:28:58,529
returns observable of response and then

00:28:55,470 --> 00:29:00,570
we have our inner pipe which again takes

00:28:58,529 --> 00:29:02,970
input parameter action and returns

00:29:00,570 --> 00:29:04,799
operator function of response that an

00:29:02,970 --> 00:29:08,220
abstraction operator function is

00:29:04,799 --> 00:29:10,740
actually function that takes parameter

00:29:08,220 --> 00:29:14,190
of a first type which is response in

00:29:10,740 --> 00:29:16,340
this case and returns the observable of

00:29:14,190 --> 00:29:19,320
the second type which is action and

00:29:16,340 --> 00:29:21,710
finally we have our failure target which

00:29:19,320 --> 00:29:25,559
is just an action creator

00:29:21,710 --> 00:29:29,160
so first we do the same thing as you saw

00:29:25,559 --> 00:29:31,289
before in the big example so we listen

00:29:29,160 --> 00:29:34,620
to actions we filter out specific type

00:29:31,289 --> 00:29:37,380
we apply the switch map we call the

00:29:34,620 --> 00:29:39,390
method with the properties and then if

00:29:37,380 --> 00:29:42,000
it's successful we call the inner pipe

00:29:39,390 --> 00:29:47,130
if it's failure we catch the error and

00:29:42,000 --> 00:29:48,960
we throw the failure target now state

00:29:47,130 --> 00:29:51,780
management wasn't the only thing that we

00:29:48,960 --> 00:29:53,940
applied generics to actually our entire

00:29:51,780 --> 00:29:55,860
solution has bits and pieces with

00:29:53,940 --> 00:29:58,919
generics so I applied it to building

00:29:55,860 --> 00:30:02,010
components to using services like for

00:29:58,919 --> 00:30:05,400
example we only defined how our services

00:30:02,010 --> 00:30:07,530
were gonna call backend ones and all the

00:30:05,400 --> 00:30:10,530
new services actually are using the

00:30:07,530 --> 00:30:14,789
generic class that handle this logic so

00:30:10,530 --> 00:30:16,320
whenever we want to change our for

00:30:14,789 --> 00:30:19,559
example API to something completely

00:30:16,320 --> 00:30:22,530
different or not use HTTP at all but

00:30:19,559 --> 00:30:24,419
fetch from JSON files we just have to do

00:30:22,530 --> 00:30:27,440
it in one place we don't have to change

00:30:24,419 --> 00:30:30,210
every single service that we have

00:30:27,440 --> 00:30:31,980
additionally we also have some

00:30:30,210 --> 00:30:34,140
structures with generics I'm gonna show

00:30:31,980 --> 00:30:34,770
you simple structure that we have

00:30:34,140 --> 00:30:37,110
created

00:30:34,770 --> 00:30:40,470
it's called page table one thing we

00:30:37,110 --> 00:30:43,740
realized is that I guess you already had

00:30:40,470 --> 00:30:46,890
this problem before that when you need

00:30:43,740 --> 00:30:49,799
to fetch data from back-end and you want

00:30:46,890 --> 00:30:52,020
to show some pagination usually in order

00:30:49,799 --> 00:30:54,330
to show properly this pagination buttons

00:30:52,020 --> 00:30:57,840
you need to know what's the final count

00:30:54,330 --> 00:31:01,620
do you have four items do you have 100

00:30:57,840 --> 00:31:03,780
items do we have 5,000 items or rows in

00:31:01,620 --> 00:31:05,820
the table but usually fetching this

00:31:03,780 --> 00:31:10,200
number from database is quite expensive

00:31:05,820 --> 00:31:13,679
information so we had one trick is that

00:31:10,200 --> 00:31:18,419
if we needed to show just 10 rows in the

00:31:13,679 --> 00:31:20,190
table we would request 11 and we would

00:31:18,419 --> 00:31:23,250
store just the 10 but we would store the

00:31:20,190 --> 00:31:25,500
original count and then later on when we

00:31:23,250 --> 00:31:29,130
needed to show or hide the button we

00:31:25,500 --> 00:31:32,100
would simply check ok did we receive 11

00:31:29,130 --> 00:31:34,320
1 more than what we have if yes then

00:31:32,100 --> 00:31:37,409
there is next button there should be

00:31:34,320 --> 00:31:39,179
next page if the number was the same or

00:31:37,409 --> 00:31:40,830
less than our page size then we would

00:31:39,179 --> 00:31:43,350
know that there are no more items and

00:31:40,830 --> 00:31:45,179
there shouldn't be next button and this

00:31:43,350 --> 00:31:47,789
is the structure that represents this so

00:31:45,179 --> 00:31:50,429
it takes two parameters one is item of

00:31:47,789 --> 00:31:53,820
that's simply an array of generic type

00:31:50,429 --> 00:31:56,220
and we have Skip which we use to control

00:31:53,820 --> 00:31:58,830
how much I teams we want to skip from

00:31:56,220 --> 00:32:01,320
the beginning and based on a skip and

00:31:58,830 --> 00:32:04,799
page limit we can return the current

00:32:01,320 --> 00:32:06,539
page and we can always check how many

00:32:04,799 --> 00:32:10,370
more I'd know whether we have more items

00:32:06,539 --> 00:32:14,009
or not and this was important because

00:32:10,370 --> 00:32:16,200
after this we started to change all our

00:32:14,009 --> 00:32:16,610
arrays that we received from the back

00:32:16,200 --> 00:32:20,100
end

00:32:16,610 --> 00:32:22,710
rapping in dispatchable and all our

00:32:20,100 --> 00:32:23,820
components or table components were

00:32:22,710 --> 00:32:26,309
working with this page of all

00:32:23,820 --> 00:32:28,080
collections because we could cheaply get

00:32:26,309 --> 00:32:30,690
information whether we should show

00:32:28,080 --> 00:32:33,990
pagination or not in which stage we are

00:32:30,690 --> 00:32:35,820
and we could simply just send this skip

00:32:33,990 --> 00:32:38,190
or offset to the back end telling them

00:32:35,820 --> 00:32:41,610
how many items they need to skip and how

00:32:38,190 --> 00:32:45,000
many items we want to get now generics

00:32:41,610 --> 00:32:46,860
is very powerful concept for those of

00:32:45,000 --> 00:32:51,330
you that haven't tried it might sound

00:32:46,860 --> 00:32:53,070
bit hacky maybe geeky but once you start

00:32:51,330 --> 00:32:57,029
using generics it gives you a different

00:32:53,070 --> 00:32:59,639
set of goggles or glasses and from then

00:32:57,029 --> 00:33:01,500
on every time you look at your code and

00:32:59,639 --> 00:33:04,830
you see some code application and you

00:33:01,500 --> 00:33:06,809
start copy pasting your code you don't

00:33:04,830 --> 00:33:08,460
actually see the burden you see a

00:33:06,809 --> 00:33:09,960
challenge you see the opportunity of

00:33:08,460 --> 00:33:11,820
improving your code and you start

00:33:09,960 --> 00:33:14,240
thinking okay how can I combine this how

00:33:11,820 --> 00:33:18,659
can I reuse this functionality later on

00:33:14,240 --> 00:33:21,600
and soon when you start applying

00:33:18,659 --> 00:33:24,389
generics you start removing huge chunks

00:33:21,600 --> 00:33:26,730
of code and what's the important thing

00:33:24,389 --> 00:33:28,500
when you start removing code of course

00:33:26,730 --> 00:33:31,169
you have to escort it with proper

00:33:28,500 --> 00:33:35,190
goodbye playlist so this is my goodbye

00:33:31,169 --> 00:33:37,500
playlist for removing code you have some

00:33:35,190 --> 00:33:38,129
classics here like Bocelli's time to say

00:33:37,500 --> 00:33:40,549
goodbye

00:33:38,129 --> 00:33:44,419
you have placebo song to say goodbye for

00:33:40,549 --> 00:33:47,030
those of you who maybe watch dark series

00:33:44,419 --> 00:33:49,780
German series dark there's

00:33:47,030 --> 00:33:52,220
intro song by a parrot called goodbye

00:33:49,780 --> 00:33:54,650
and if you're interested you can head

00:33:52,220 --> 00:33:56,600
over to this link which will take you to

00:33:54,650 --> 00:33:58,520
my Spotify playlist and you can listen

00:33:56,600 --> 00:34:05,090
to this playlist when you remove your

00:33:58,520 --> 00:34:07,610
own code so here is my Twitter handle if

00:34:05,090 --> 00:34:11,560
you want to reach out the solution I

00:34:07,610 --> 00:34:15,190
explained with ng Rx has been actually

00:34:11,560 --> 00:34:18,260
open sourced on a github and it's also

00:34:15,190 --> 00:34:22,100
deployed on NPM so if you're using

00:34:18,260 --> 00:34:24,020
angular it's slightly opinionated so you

00:34:22,100 --> 00:34:26,619
can choose if you want to use it or just

00:34:24,020 --> 00:34:29,690
steal some ideas from it it's up to you

00:34:26,619 --> 00:34:33,409
again here is the link for the playlist

00:34:29,690 --> 00:34:35,090
if you want to listen to and one

00:34:33,409 --> 00:34:38,629
important thing to say is that once you

00:34:35,090 --> 00:34:40,669
start learning and using generics it

00:34:38,629 --> 00:34:42,470
might not make you super hero but at

00:34:40,669 --> 00:34:45,440
least you will look like a super hero to

00:34:42,470 --> 00:34:47,270
your colleagues so with this thank you

00:34:45,440 --> 00:34:48,340
for listening and have fun skiing and

00:34:47,270 --> 00:34:51,530
boarding tomorrow

00:34:48,340 --> 00:34:51,530
[Applause]

00:34:55,300 --> 00:35:01,900
[Applause]

00:34:57,400 --> 00:35:01,900
thank you does anyone have any questions

00:35:03,069 --> 00:35:15,200
there's one up there thanks for the talk

00:35:11,839 --> 00:35:21,710
I know you for a while now that's why I

00:35:15,200 --> 00:35:27,289
allow myself to ask this question let's

00:35:21,710 --> 00:35:30,710
go now but if we use generics in

00:35:27,289 --> 00:35:31,999
typescript right we solve a problem

00:35:30,710 --> 00:35:35,299
which we wouldn't have without

00:35:31,999 --> 00:35:37,009
typescript right yes but without

00:35:35,299 --> 00:35:38,690
typescript you would have a bunch of

00:35:37,009 --> 00:35:43,460
other problems that are more difficult

00:35:38,690 --> 00:35:44,499
to solve okay does that answer your

00:35:43,460 --> 00:35:47,299
question

00:35:44,499 --> 00:35:49,519
partially yeah but but it's really like

00:35:47,299 --> 00:35:52,549
this right we remove type definitions we

00:35:49,519 --> 00:35:54,829
get by typescript and with a feature

00:35:52,549 --> 00:35:59,210
from typescript yeah I guess if we

00:35:54,829 --> 00:36:01,069
didn't have typescript and yeah we would

00:35:59,210 --> 00:36:03,650
have a lot of these read errors in our

00:36:01,069 --> 00:36:05,599
console logs accidentally happening and

00:36:03,650 --> 00:36:07,430
we wouldn't know what to do about it we

00:36:05,599 --> 00:36:13,269
would have to call Erik to style it but

00:36:07,430 --> 00:36:13,269
they wouldn't help us too much Thanks

00:36:13,719 --> 00:36:20,770
what else oh thank you free to go thank

00:36:19,729 --> 00:36:25,570
you

00:36:20,770 --> 00:36:25,570

YouTube URL: https://www.youtube.com/watch?v=6dXkkdhnhcQ


