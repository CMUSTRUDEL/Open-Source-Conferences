Title: DjangoCon 2019 - Using Django as a Micro-Framework: Hacking on the HTTP handlers.. by Carlton Gibson
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Using Django as a Micro-Framework: Hacking on the HTTP handlers and middleware (for fun and profit) by Carlton Gibson

Django, being batteries included and all, is meant to big, clumsy, slow. I'm going to show you how use it as a micro-framework.
I'll show you how the base HTTP layer works, and what those middleware things are all about. I'll show you how to customize that so that Django can keep up with anything.

This talk was presented at: https://2019.djangocon.us/talks/using-django-as-a-micro-framework-on-the/

LINKS:
Follow Carlton Gibson ðŸ‘‡
On Twitter: https://twitter.com/carltongibson


Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,320 --> 00:00:18,230
what I'm slightly jet-like my body is

00:00:16,940 --> 00:00:25,090
telling me that it's 11 o'clock at night

00:00:18,230 --> 00:00:29,480
which is when I go to bed so slides yay

00:00:25,090 --> 00:00:31,400
hello right Thank You Katie for the

00:00:29,480 --> 00:00:32,750
introduction age she said I'm Carlton

00:00:31,400 --> 00:00:35,150
gives me I'm your friendly Django fellow

00:00:32,750 --> 00:00:40,940
I'm at Carlton Gibson on github and

00:00:35,150 --> 00:00:43,820
Twitter using Django as a micro

00:00:40,940 --> 00:00:46,400
framework so what are we going to do we

00:00:43,820 --> 00:00:49,250
are going to look at the core HTTP

00:00:46,400 --> 00:00:52,280
handlers of the framework this is how at

00:00:49,250 --> 00:00:55,000
bottom django handles a web requests

00:00:52,280 --> 00:00:57,920
right so django is a web framework

00:00:55,000 --> 00:01:00,830
handling HTTP requests is what it does

00:00:57,920 --> 00:01:03,110
if it doesn't do anything else so this

00:01:00,830 --> 00:01:05,479
is the heart of the framework that we're

00:01:03,110 --> 00:01:07,630
going to look at on the way through

00:01:05,479 --> 00:01:10,130
we're gonna look at the middleware

00:01:07,630 --> 00:01:13,610
whatever they might be we'll come back

00:01:10,130 --> 00:01:16,909
to that and i'm gonna show you how you

00:01:13,610 --> 00:01:19,130
might configure django as a as a micro

00:01:16,909 --> 00:01:20,420
in a micro framework style why that i

00:01:19,130 --> 00:01:22,729
mean in a kind of single file

00:01:20,420 --> 00:01:25,070
application now I have the emphasis on

00:01:22,729 --> 00:01:28,729
the mites they're right you are never

00:01:25,070 --> 00:01:31,130
going to do this well you might but I

00:01:28,729 --> 00:01:32,899
struggle to think of a case where the

00:01:31,130 --> 00:01:35,210
extra structure that a proper Django

00:01:32,899 --> 00:01:38,509
project gives you isn't of a benefit

00:01:35,210 --> 00:01:39,979
however the point isn't that you're

00:01:38,509 --> 00:01:41,899
going to start configuring Django in a

00:01:39,979 --> 00:01:44,299
micro framework style the point is to

00:01:41,899 --> 00:01:47,899
get under the hood a little bit and to

00:01:44,299 --> 00:01:50,299
open the box people very rightly treat

00:01:47,899 --> 00:01:51,890
Django is a bit of a black box that's it

00:01:50,299 --> 00:01:54,490
does its thing and we don't look inside

00:01:51,890 --> 00:01:57,289
and well you know that's the whole idea

00:01:54,490 --> 00:01:58,579
but I think it leads to thoughts that

00:01:57,289 --> 00:02:00,619
perhaps Django is a little bit more

00:01:58,579 --> 00:02:03,289
complicated than it really is I

00:02:00,619 --> 00:02:04,880
sometimes think see folks making asides

00:02:03,289 --> 00:02:07,609
as if they think Django is somehow a

00:02:04,880 --> 00:02:10,280
little bit clunky right by looking

00:02:07,609 --> 00:02:12,920
inside I want to show you that oh no

00:02:10,280 --> 00:02:14,000
it's not that complicated right it's not

00:02:12,920 --> 00:02:17,240
clunky at all

00:02:14,000 --> 00:02:19,819
and then finally never to miss the

00:02:17,240 --> 00:02:21,650
opportunity to beat one's own drum once

00:02:19,819 --> 00:02:24,319
you see that perhaps it's not that

00:02:21,650 --> 00:02:24,830
complicated after all you might start to

00:02:24,319 --> 00:02:28,840
think

00:02:24,830 --> 00:02:30,830
it you could contribute to Jahangir ho

00:02:28,840 --> 00:02:33,590
right perhaps you might contribute

00:02:30,830 --> 00:02:35,180
itself that those 1200 open accepted

00:02:33,590 --> 00:02:36,470
tickets that Maris and I have a ryone

00:02:35,180 --> 00:02:39,770
well we might be able to get those down

00:02:36,470 --> 00:02:40,550
a little bit more okay right if we get

00:02:39,770 --> 00:02:44,300
through all of that I'm going to

00:02:40,550 --> 00:02:45,590
consider it a success so what is a micro

00:02:44,300 --> 00:02:47,480
framework well to be honest I have no

00:02:45,590 --> 00:02:48,740
idea at all maybe it's just something

00:02:47,480 --> 00:02:53,620
you say to get on the front page of

00:02:48,740 --> 00:02:55,910
hacker news thank you

00:02:53,620 --> 00:02:57,370
one thought is that it might be Lego

00:02:55,910 --> 00:03:00,410
bricks that you put together yourself

00:02:57,370 --> 00:03:02,440
versus the batteries included that Jango

00:03:00,410 --> 00:03:04,790
gives you that you get with Jango I

00:03:02,440 --> 00:03:06,410
don't know well but one thing that I

00:03:04,790 --> 00:03:08,710
think there is to microframeworks is

00:03:06,410 --> 00:03:11,950
that they have really great hello worlds

00:03:08,710 --> 00:03:14,360
okay so let's look at a few examples now

00:03:11,950 --> 00:03:16,640
before I show them to you the disclaimer

00:03:14,360 --> 00:03:18,680
everything I put up I'm putting up

00:03:16,640 --> 00:03:19,220
because I respect it deeply not because

00:03:18,680 --> 00:03:23,150
I hate it

00:03:19,220 --> 00:03:26,180
okay just because it's just cuz it's not

00:03:23,150 --> 00:03:27,530
Jago doesn't mean it's not great I know

00:03:26,180 --> 00:03:30,980
you don't think that I think that but

00:03:27,530 --> 00:03:34,130
it's tech so I have to say okay here's

00:03:30,980 --> 00:03:36,410
the first one this is an Express app

00:03:34,130 --> 00:03:39,530
expresses a nodejs

00:03:36,410 --> 00:03:41,650
web framework in JavaScript okay so this

00:03:39,530 --> 00:03:45,110
is the hello world off the front of the

00:03:41,650 --> 00:03:47,060
no js' web site and so first of all we

00:03:45,110 --> 00:03:48,890
require Express and then we define an

00:03:47,060 --> 00:03:50,390
app we instantiate an out there we

00:03:48,890 --> 00:03:54,800
define what port we're going to serve it

00:03:50,390 --> 00:03:57,320
on then we add a handler to that handles

00:03:54,800 --> 00:04:00,020
get requests to the home page there and

00:03:57,320 --> 00:04:01,130
then we have a function and in my day

00:04:00,020 --> 00:04:03,950
that would have been an anomalous

00:04:01,130 --> 00:04:05,750
function but now JavaScript Hajis has

00:04:03,950 --> 00:04:08,840
these nice called arrow functions all

00:04:05,750 --> 00:04:10,520
that is is like a lander in Python so in

00:04:08,840 --> 00:04:12,230
the on the left hand side of the little

00:04:10,520 --> 00:04:14,120
arrow there it takes a request in a

00:04:12,230 --> 00:04:16,760
response and all you do in the function

00:04:14,120 --> 00:04:18,950
body is write the request body that you

00:04:16,760 --> 00:04:24,530
want that's you that's your handler and

00:04:18,950 --> 00:04:26,480
then at the bottom we can serve it and

00:04:24,530 --> 00:04:28,160
we'd run that with node hello express so

00:04:26,480 --> 00:04:31,910
that's the first example let's do one

00:04:28,160 --> 00:04:33,500
from Python world his flask okay we

00:04:31,910 --> 00:04:36,380
import some stuff at the top there from

00:04:33,500 --> 00:04:38,639
flask we instantiate the flask app again

00:04:36,380 --> 00:04:42,030
we root we get a hand and we

00:04:38,639 --> 00:04:43,680
to the homepage there and here we're

00:04:42,030 --> 00:04:45,569
just accessing something from the

00:04:43,680 --> 00:04:47,400
request to show you how you access the

00:04:45,569 --> 00:04:49,860
request in fast because we're not in

00:04:47,400 --> 00:04:51,330
we're not injecting it as a parameter to

00:04:49,860 --> 00:04:54,270
the function we're pulling it from the

00:04:51,330 --> 00:04:56,370
enclosing scope you run that with Rutte

00:04:54,270 --> 00:05:00,449
flask run or we're gonna corn or

00:04:56,370 --> 00:05:02,789
whatever the final example is from

00:05:00,449 --> 00:05:04,529
starlet which is Tom Christie who's the

00:05:02,789 --> 00:05:07,169
creator of Django rest framework his

00:05:04,529 --> 00:05:09,629
ASCII micro framework so it's an

00:05:07,169 --> 00:05:11,490
asynchronous micro framework here again

00:05:09,629 --> 00:05:14,699
we just import some stuff at the top and

00:05:11,490 --> 00:05:17,129
then we create an app the starlet app

00:05:14,699 --> 00:05:19,590
again with the with the app in hand we

00:05:17,129 --> 00:05:21,840
route a handler to the home page there

00:05:19,590 --> 00:05:24,270
and the handler it takes it's an async

00:05:21,840 --> 00:05:26,159
death function now it's a KO routine we

00:05:24,270 --> 00:05:28,770
pass in a request and this time we're

00:05:26,159 --> 00:05:31,919
returning a JSON response you know we

00:05:28,770 --> 00:05:33,870
could return an HTTP response but this

00:05:31,919 --> 00:05:36,839
is what's on the style at home page at

00:05:33,870 --> 00:05:39,810
the bottom there we can use Yuva corn

00:05:36,839 --> 00:05:43,949
which is an ascii protocol server which

00:05:39,810 --> 00:05:46,379
to run the application okay let me just

00:05:43,949 --> 00:05:48,150
have a sip of water I'm slightly worried

00:05:46,379 --> 00:05:49,860
that I might end up talking so quick to

00:05:48,150 --> 00:05:52,819
too quick but Russell's after me so I

00:05:49,860 --> 00:05:52,819
don't think it's going to be a problem

00:05:56,300 --> 00:06:03,479
okay now these are all solving exactly

00:06:01,050 --> 00:06:06,539
the same problem they're all turning

00:06:03,479 --> 00:06:08,639
requests into responses you have a view

00:06:06,539 --> 00:06:11,069
which takes a request and returns a

00:06:08,639 --> 00:06:13,500
response okay this is the web problem

00:06:11,069 --> 00:06:16,020
this is exactly what we have in Django

00:06:13,500 --> 00:06:20,389
so here we have the minimal django view

00:06:16,020 --> 00:06:23,729
it's exactly the same we we import the

00:06:20,389 --> 00:06:25,409
response object we define a view we pass

00:06:23,729 --> 00:06:28,339
in the request that will be a Django

00:06:25,409 --> 00:06:29,490
request and we return the HTTP response

00:06:28,339 --> 00:06:32,580
okay

00:06:29,490 --> 00:06:34,110
the difference with Django is that the

00:06:32,580 --> 00:06:35,669
other the other examples they kind of

00:06:34,110 --> 00:06:37,620
where the app bit on their sleeve it's

00:06:35,669 --> 00:06:39,810
really easy to see where that app bit is

00:06:37,620 --> 00:06:42,449
but with Django we have to go and look

00:06:39,810 --> 00:06:45,270
for it so his our hello Django project

00:06:42,449 --> 00:06:47,759
we started this with start project with

00:06:45,270 --> 00:06:50,519
start app we added the app to install

00:06:47,759 --> 00:06:52,470
that all the usual stuff right now we

00:06:50,519 --> 00:06:55,230
don't usually go and look

00:06:52,470 --> 00:06:56,790
but if we wanted to find the app we have

00:06:55,230 --> 00:07:00,090
to go and look in here which is in the

00:06:56,790 --> 00:07:01,530
file called whiskey dot pie now given

00:07:00,090 --> 00:07:04,530
the talks this morning you I'd be like

00:07:01,530 --> 00:07:06,390
whiskey whiskey whiskey now well we

00:07:04,530 --> 00:07:09,320
could do we could have an ask you hot

00:07:06,390 --> 00:07:11,520
pie it would be exactly the same most of

00:07:09,320 --> 00:07:14,040
nothing's changed right as Andrew said

00:07:11,520 --> 00:07:15,810
we'd bolted on the same everything I say

00:07:14,040 --> 00:07:17,760
applies just as much to ask is it does

00:07:15,810 --> 00:07:20,400
to whiskey but we're going to focus on

00:07:17,760 --> 00:07:23,040
whiskey here so let's have a look inside

00:07:20,400 --> 00:07:24,270
the whisky dot pie file ok

00:07:23,040 --> 00:07:27,150
now this is the whole thing how does

00:07:24,270 --> 00:07:27,780
that come out the size it's not too bad

00:07:27,150 --> 00:07:31,140
don't worry

00:07:27,780 --> 00:07:34,140
don't try and read it but he eats the

00:07:31,140 --> 00:07:36,810
whole file whisky config for hallo

00:07:34,140 --> 00:07:39,060
Django project exposes the whiskey

00:07:36,810 --> 00:07:42,090
callable as a module level variable cut

00:07:39,060 --> 00:07:45,740
named Abzug named application the

00:07:42,090 --> 00:07:50,340
whiskey callable now whiskey is the

00:07:45,740 --> 00:07:52,920
Python standard for protocol service to

00:07:50,340 --> 00:07:55,050
talk to applications ok so as long as

00:07:52,920 --> 00:07:59,250
you satisfy whisky the whiskey whiskey

00:07:55,050 --> 00:08:00,870
server like Ghana corner or you whiskey

00:07:59,250 --> 00:08:03,930
would be able to talk to your

00:08:00,870 --> 00:08:06,030
application so the whiskey callable is a

00:08:03,930 --> 00:08:08,640
callable that takes an in whiskey

00:08:06,030 --> 00:08:11,940
environment environ and a start response

00:08:08,640 --> 00:08:14,130
callable and it returns a response right

00:08:11,940 --> 00:08:16,770
now this is easier to see than it is to

00:08:14,130 --> 00:08:18,060
talk about but just remember that and

00:08:16,770 --> 00:08:19,590
we'll come back to it in a minute and

00:08:18,060 --> 00:08:21,390
the great thing with whisky is that

00:08:19,590 --> 00:08:23,220
because it defines a contract a whisky

00:08:21,390 --> 00:08:25,710
server can talk to your Python app if

00:08:23,220 --> 00:08:28,080
you satisfied so let's so if we go back

00:08:25,710 --> 00:08:29,940
to whisky dot pi this was the file that

00:08:28,080 --> 00:08:31,919
this is art this is where Jango keeps

00:08:29,940 --> 00:08:33,990
our app the key bits right at the bottom

00:08:31,919 --> 00:08:39,260
and here it is simplified so you can see

00:08:33,990 --> 00:08:39,260
it lets me have another sip of water

00:08:41,990 --> 00:08:47,880
right the key bit is this get whiskey

00:08:44,880 --> 00:08:50,490
application function all it does all

00:08:47,880 --> 00:08:54,839
this whiskey dot pi file does is to

00:08:50,490 --> 00:08:56,670
assign the application object this get

00:08:54,839 --> 00:08:58,589
whiskey application function so let's

00:08:56,670 --> 00:09:00,680
dig down there we have to dig a few

00:08:58,589 --> 00:09:04,050
layers but we'll come back up don't why

00:09:00,680 --> 00:09:06,000
so this get whiskey application function

00:09:04,050 --> 00:09:08,579
it's just a two line wrapper

00:09:06,000 --> 00:09:10,439
it calls Jango dot setup and then it

00:09:08,579 --> 00:09:12,060
returns a thing called with an instance

00:09:10,439 --> 00:09:14,970
of a thing called whiskey handler I

00:09:12,060 --> 00:09:16,980
don't want to talk about Jango setup if

00:09:14,970 --> 00:09:19,560
you've ever wanted to use the Jango RM

00:09:16,980 --> 00:09:21,930
in a script outside of the normal Django

00:09:19,560 --> 00:09:23,699
project and you've probably used it it

00:09:21,930 --> 00:09:27,029
configures the settings and the logging

00:09:23,699 --> 00:09:29,370
and it sets up the ORM if you don't call

00:09:27,029 --> 00:09:31,050
it you have to configure any settings

00:09:29,370 --> 00:09:34,350
that you're going to access yourself and

00:09:31,050 --> 00:09:38,189
you can't use the algorithm okay but if

00:09:34,350 --> 00:09:40,050
we look into whiskey handler now that's

00:09:38,189 --> 00:09:41,730
a bit don't try and read that either but

00:09:40,050 --> 00:09:43,740
I'm putting up because that's the whole

00:09:41,730 --> 00:09:44,339
class we'll dig down into the in the

00:09:43,740 --> 00:09:47,129
bits of there

00:09:44,339 --> 00:09:48,990
it's 23 lines and the point of showing

00:09:47,129 --> 00:09:51,269
you the 23 lines is that there's not

00:09:48,990 --> 00:09:54,000
much there I don't want you to think

00:09:51,269 --> 00:09:55,230
it's super complicated just the only

00:09:54,000 --> 00:09:57,300
thing to note here is that whiskey

00:09:55,230 --> 00:09:59,939
handler is a subclass of Base handler

00:09:57,300 --> 00:10:01,949
just remember that then let's put up the

00:09:59,939 --> 00:10:03,689
call method there and we're just the

00:10:01,949 --> 00:10:08,220
main bit showing I'll simplify it very

00:10:03,689 --> 00:10:09,779
slightly ok now this is exactly the

00:10:08,220 --> 00:10:12,750
whiskey callable that we were looking

00:10:09,779 --> 00:10:14,309
for ok it takes an invite with the

00:10:12,750 --> 00:10:18,029
environment and a start response

00:10:14,309 --> 00:10:21,029
callable and it returns a response ok

00:10:18,029 --> 00:10:23,220
the first thing it does there is it it

00:10:21,029 --> 00:10:26,730
converts the whiskey environ into a

00:10:23,220 --> 00:10:28,529
Django recruit request object ok the

00:10:26,730 --> 00:10:31,529
request object that you see in your

00:10:28,529 --> 00:10:33,689
views the ones that you used to with all

00:10:31,529 --> 00:10:36,569
the you know requests get requests meta

00:10:33,689 --> 00:10:38,370
regret or requests meting requests don't

00:10:36,569 --> 00:10:42,089
get requests putt post all of those

00:10:38,370 --> 00:10:43,529
things ok where the comment is well

00:10:42,089 --> 00:10:44,790
that's it's doing some other whiskey

00:10:43,529 --> 00:10:48,720
stuff that I don't really want to talk

00:10:44,790 --> 00:10:50,309
about it's just a few lines and we call

00:10:48,720 --> 00:10:53,339
the start response callback with the

00:10:50,309 --> 00:10:55,980
response status code so 200 if it was ok

00:10:53,339 --> 00:10:58,589
400 if you made an error 500 if we made

00:10:55,980 --> 00:11:00,569
an error and the headers from the

00:10:58,589 --> 00:11:02,279
request and we call that in where the

00:11:00,569 --> 00:11:06,149
comment is and then we return the

00:11:02,279 --> 00:11:07,740
response ok so that's three of the four

00:11:06,149 --> 00:11:10,800
lines and that must mean that all the

00:11:07,740 --> 00:11:12,629
magic is in this get response line where

00:11:10,800 --> 00:11:17,579
it says response is equal to self get

00:11:12,629 --> 00:11:19,410
response where we pass in the request so

00:11:17,579 --> 00:11:19,720
we are going to dig down into that get

00:11:19,410 --> 00:11:21,279
wrist

00:11:19,720 --> 00:11:24,100
once method and we're gonna see what

00:11:21,279 --> 00:11:26,019
goes on but in order to do that we need

00:11:24,100 --> 00:11:29,290
to go for a little tour via a thing

00:11:26,019 --> 00:11:30,579
called middleware okay so what on earth

00:11:29,290 --> 00:11:35,170
are middleware

00:11:30,579 --> 00:11:38,259
a middleware is a callable that takes a

00:11:35,170 --> 00:11:42,370
request and returns a response just like

00:11:38,259 --> 00:11:44,379
a view okay that's what our view does it

00:11:42,370 --> 00:11:47,680
takes a request and returns a response

00:11:44,379 --> 00:11:49,060
that's the web web problem and the idea

00:11:47,680 --> 00:11:52,720
is that because they have the same

00:11:49,060 --> 00:11:54,910
interface middlewares can wrap views we

00:11:52,720 --> 00:11:57,490
passing a request to our view we want to

00:11:54,910 --> 00:11:59,439
response back but equally if there's a

00:11:57,490 --> 00:12:01,600
middleware wrapped around our view with

00:11:59,439 --> 00:12:02,949
the same interface we could pass we

00:12:01,600 --> 00:12:04,600
could just as well pass our request to

00:12:02,949 --> 00:12:06,850
that and wait for the response to come

00:12:04,600 --> 00:12:09,459
back from that it's a bit like a

00:12:06,850 --> 00:12:10,000
decorator you don't we still pass in a

00:12:09,459 --> 00:12:12,279
response

00:12:10,000 --> 00:12:14,259
we still want back Uruk we still pass in

00:12:12,279 --> 00:12:16,839
a respond a request we still want back a

00:12:14,259 --> 00:12:19,149
response okay so let's look at a very

00:12:16,839 --> 00:12:25,449
simple example simple marijuana this is

00:12:19,149 --> 00:12:27,879
from the Django Docs okay we initialize

00:12:25,449 --> 00:12:29,980
our middleware with whatever view or

00:12:27,879 --> 00:12:32,949
middleware we're wrapping and then it's

00:12:29,980 --> 00:12:35,620
a callable which does what it wants call

00:12:32,949 --> 00:12:37,540
like whatever action it wants to take

00:12:35,620 --> 00:12:39,550
then it calls whatever it was wrapped

00:12:37,540 --> 00:12:42,069
that it wrapped to get the response back

00:12:39,550 --> 00:12:43,720
and then it can do a bit more if it

00:12:42,069 --> 00:12:46,660
likes and then it can return the

00:12:43,720 --> 00:12:49,360
response now that's the structure of a

00:12:46,660 --> 00:12:51,339
middleware okay there are some other

00:12:49,360 --> 00:12:53,559
hooks which I don't want to talk about

00:12:51,339 --> 00:12:55,689
you can add extra methods to middlewares

00:12:53,559 --> 00:12:57,910
that let them do other things process

00:12:55,689 --> 00:13:00,399
view process exception process template

00:12:57,910 --> 00:13:02,769
response proceeds exception is kind of

00:13:00,399 --> 00:13:04,209
all kind of obvious if it lets you

00:13:02,769 --> 00:13:07,899
handle any exceptions that come up

00:13:04,209 --> 00:13:09,519
process exception okay and that's if you

00:13:07,899 --> 00:13:11,290
don't want Django's default exception

00:13:09,519 --> 00:13:13,209
handling to play so you can intercept

00:13:11,290 --> 00:13:15,550
angers the default exception handling

00:13:13,209 --> 00:13:17,500
and return a custom exception Django has

00:13:15,550 --> 00:13:19,990
this thing called template response so

00:13:17,500 --> 00:13:21,790
if your view returns one of those then

00:13:19,990 --> 00:13:24,790
process template response lets you

00:13:21,790 --> 00:13:26,199
process the template response you can

00:13:24,790 --> 00:13:28,720
change the template say or you could

00:13:26,199 --> 00:13:31,660
adjust the context or whatever before

00:13:28,720 --> 00:13:33,059
it's finally rendered process view well

00:13:31,660 --> 00:13:35,369
that's a little bit more

00:13:33,059 --> 00:13:37,019
a little bit more weird I guess the best

00:13:35,369 --> 00:13:38,699
way I can think to describe it is it's

00:13:37,019 --> 00:13:41,969
like a middleware saying hey I'm gonna

00:13:38,699 --> 00:13:44,879
defer to any other middleware and give

00:13:41,969 --> 00:13:46,259
them the option to return a response but

00:13:44,879 --> 00:13:48,089
if none of those are the middleware

00:13:46,259 --> 00:13:50,279
return response then I want to another

00:13:48,089 --> 00:13:53,819
go at this just before the view is

00:13:50,279 --> 00:13:56,579
executed okay that's the best it's not

00:13:53,819 --> 00:13:58,289
perfect but it'll do anyway I don't want

00:13:56,579 --> 00:14:00,539
to talk about any of these let's go back

00:13:58,289 --> 00:14:02,689
to our simple middleware here's the init

00:14:00,539 --> 00:14:06,389
method okay

00:14:02,689 --> 00:14:08,129
it just takes in a get response thing

00:14:06,389 --> 00:14:10,349
now that might that's that could be a

00:14:08,129 --> 00:14:13,379
view or a middle way except it can't be

00:14:10,349 --> 00:14:15,989
a view it can't really be a view why not

00:14:13,379 --> 00:14:18,179
well it would work for our django view

00:14:15,989 --> 00:14:20,009
this is exactly what we need a single

00:14:18,179 --> 00:14:22,499
view that takes a request and returns a

00:14:20,009 --> 00:14:24,869
response but normally we don't just have

00:14:22,499 --> 00:14:27,569
a single view normally we have multiple

00:14:24,869 --> 00:14:29,459
views right so here we've got two views

00:14:27,569 --> 00:14:32,239
we've got hello which returns the

00:14:29,459 --> 00:14:35,669
response hello and goodbye which returns

00:14:32,239 --> 00:14:38,039
responsive goodbye and we route those

00:14:35,669 --> 00:14:42,239
two different URLs so we need to know

00:14:38,039 --> 00:14:45,029
which view to pass the request to hey

00:14:42,239 --> 00:14:47,299
and then in django views i don't

00:14:45,029 --> 00:14:49,829
normally just take a request

00:14:47,299 --> 00:14:51,299
okay whilst in the simplest case we can

00:14:49,829 --> 00:14:53,249
think of a django view is just taking a

00:14:51,299 --> 00:14:56,099
request more generally one takes a

00:14:53,249 --> 00:14:58,139
request pass plus a possible number of

00:14:56,099 --> 00:15:01,589
positional arguments plus a possible

00:14:58,139 --> 00:15:05,519
number of keyword arguments so here we

00:15:01,589 --> 00:15:09,589
have a hello view which takes a name and

00:15:05,519 --> 00:15:12,359
we route that using this path routing

00:15:09,589 --> 00:15:14,759
path URL pattern where we have hello

00:15:12,359 --> 00:15:16,409
plus the name parameter and so when the

00:15:14,759 --> 00:15:19,679
when that is called it needs not just

00:15:16,409 --> 00:15:24,089
the request but the name keyword

00:15:19,679 --> 00:15:29,879
argument as well so for these two

00:15:24,089 --> 00:15:33,029
problems django provides the base

00:15:29,879 --> 00:15:34,829
handler now you remember that whiskey

00:15:33,029 --> 00:15:36,959
handle our application our whiskey

00:15:34,829 --> 00:15:40,129
application was a subclass of base

00:15:36,959 --> 00:15:40,129
handle okay

00:15:42,730 --> 00:15:47,260
and bass handler has this private get

00:15:45,160 --> 00:15:49,540
response method its underscore get

00:15:47,260 --> 00:15:51,610
response method right so whiskey handler

00:15:49,540 --> 00:15:52,780
has it too because it's a sub class now

00:15:51,610 --> 00:15:55,720
I'm not going to show you the source

00:15:52,780 --> 00:15:58,330
code for get response but it's 62 lines

00:15:55,720 --> 00:15:59,950
including the docs stream okay and that

00:15:58,330 --> 00:16:01,720
what it does is resolve and called the

00:15:59,950 --> 00:16:04,030
view then apply the view those those

00:16:01,720 --> 00:16:05,890
exceptions the set process exception

00:16:04,030 --> 00:16:08,500
process view process template response

00:16:05,890 --> 00:16:10,480
hooks it applies those and then it

00:16:08,500 --> 00:16:12,850
returns the response and this the key

00:16:10,480 --> 00:16:14,880
bit there is this method is everything

00:16:12,850 --> 00:16:17,050
that happens inside the request response

00:16:14,880 --> 00:16:19,060
anyway it's it's the bottom of the

00:16:17,050 --> 00:16:21,130
framework this is the bit where Django

00:16:19,060 --> 00:16:23,110
takes the request examines it for the

00:16:21,130 --> 00:16:24,930
keyword arguments that you need works

00:16:23,110 --> 00:16:32,950
out which view it wants to call and

00:16:24,930 --> 00:16:35,680
calls it okay so it if that's the bottom

00:16:32,950 --> 00:16:38,950
we can start heading back up when we

00:16:35,680 --> 00:16:42,190
instantiate our simple middleware we

00:16:38,950 --> 00:16:46,440
don't pass a view we pass it base

00:16:42,190 --> 00:16:46,440
handlers underscore get response method

00:16:46,500 --> 00:16:53,710
or we pass it another middleware because

00:16:50,740 --> 00:16:56,020
middleware can be nested this is the

00:16:53,710 --> 00:16:57,550
default middleware from our project the

00:16:56,020 --> 00:16:59,860
middleware setting and you will seen

00:16:57,550 --> 00:17:01,720
this right in your projects you've all

00:16:59,860 --> 00:17:04,210
added a middleware to this probably at

00:17:01,720 --> 00:17:06,070
the top or at the bottom or very

00:17:04,210 --> 00:17:11,230
specifically after a certain named

00:17:06,070 --> 00:17:12,730
middleware they they need to be in the

00:17:11,230 --> 00:17:14,850
right order because they're called from

00:17:12,730 --> 00:17:17,970
top to bottom so for instance

00:17:14,850 --> 00:17:20,860
authentication middleware which is

00:17:17,970 --> 00:17:22,150
somewhere in there can't even see it to

00:17:20,860 --> 00:17:24,580
to up from the bottom

00:17:22,150 --> 00:17:27,250
that's the middleware that sets the

00:17:24,580 --> 00:17:28,510
request user property on your request so

00:17:27,250 --> 00:17:31,300
when you're in your view and you go

00:17:28,510 --> 00:17:33,670
request user that only works because

00:17:31,300 --> 00:17:35,470
requests stop middleware was in play but

00:17:33,670 --> 00:17:38,320
requests not middleware requires the

00:17:35,470 --> 00:17:41,350
session to be in place so it has to come

00:17:38,320 --> 00:17:44,470
after session dot middleware in the list

00:17:41,350 --> 00:17:46,600
so this is kind of this is the

00:17:44,470 --> 00:17:49,090
middleware onion right each middleware

00:17:46,600 --> 00:17:51,940
gets the request it can do its thing it

00:17:49,090 --> 00:17:54,460
can return it can return a response if

00:17:51,940 --> 00:17:55,840
it likes or it can call the next

00:17:54,460 --> 00:17:57,340
middleware down

00:17:55,840 --> 00:17:59,049
when that's done its thing it will get

00:17:57,340 --> 00:18:01,630
the response back and then it can do

00:17:59,049 --> 00:18:03,309
something else and it can return the

00:18:01,630 --> 00:18:04,900
response it can either return the

00:18:03,309 --> 00:18:06,460
response that it got or it could go now

00:18:04,900 --> 00:18:13,419
I didn't like that response here's a new

00:18:06,460 --> 00:18:15,760
one okay right so you'll remember we had

00:18:13,419 --> 00:18:18,400
a whisky dot pie file that created our

00:18:15,760 --> 00:18:25,299
wsgi application by calling get whiskey

00:18:18,400 --> 00:18:27,580
application ok get yeah get whiskey

00:18:25,299 --> 00:18:29,740
application just calls Django seth dot

00:18:27,580 --> 00:18:34,779
set up and then instantiate a whiskey

00:18:29,740 --> 00:18:36,520
handler which is up which is our WSGI

00:18:34,779 --> 00:18:39,059
caller go callable which is our

00:18:36,520 --> 00:18:42,429
application ok

00:18:39,059 --> 00:18:44,529
and now when we instantiate our whiskey

00:18:42,429 --> 00:18:47,919
handler before our whiskey server calls

00:18:44,529 --> 00:18:50,559
it and before we get we can call get

00:18:47,919 --> 00:18:53,679
response right we have this load

00:18:50,559 --> 00:18:55,450
middleware call an all load middleware

00:18:53,679 --> 00:18:58,360
does is it goes through the settings

00:18:55,450 --> 00:18:59,679
onion and there's at the very heart at

00:18:58,360 --> 00:19:01,779
the very heart of which is the the

00:18:59,679 --> 00:19:06,309
underscore get response handler and it

00:19:01,779 --> 00:19:08,950
instantiates those into a chain into a

00:19:06,309 --> 00:19:10,000
kind of nested object get response plus

00:19:08,950 --> 00:19:11,470
the first middleware

00:19:10,000 --> 00:19:12,700
plus the second middle-way plus the

00:19:11,470 --> 00:19:14,799
third made aware until it's done them

00:19:12,700 --> 00:19:17,320
all and then that becomes the ultimate

00:19:14,799 --> 00:19:20,110
handler which is called when we

00:19:17,320 --> 00:19:22,720
dispatcher okay so with the middleware

00:19:20,110 --> 00:19:25,690
chain chain loaded we can look at get

00:19:22,720 --> 00:19:27,909
response we had always key callable

00:19:25,690 --> 00:19:29,620
remember them that map's the wiz the

00:19:27,909 --> 00:19:32,409
whiskey environment to a Django request

00:19:29,620 --> 00:19:34,149
and then calls get response it does some

00:19:32,409 --> 00:19:36,580
whiskey others are other whiskey stuff

00:19:34,149 --> 00:19:39,450
and then it returns the response so

00:19:36,580 --> 00:19:42,760
finally we're looking to get response

00:19:39,450 --> 00:19:46,990
right here again we take the request

00:19:42,760 --> 00:19:49,450
object we get the response from the

00:19:46,990 --> 00:19:51,669
middleware chain we pass in the request

00:19:49,450 --> 00:19:54,789
the middleware chain is that nested

00:19:51,669 --> 00:19:56,110
structure of middleware with the get

00:19:54,789 --> 00:19:58,320
with the underscore get response

00:19:56,110 --> 00:20:02,110
callable at the middle middle of it that

00:19:58,320 --> 00:20:04,240
gets the response out response closable

00:20:02,110 --> 00:20:07,870
objects append well we add in the

00:20:04,240 --> 00:20:09,700
request so part of the whiskey contract

00:20:07,870 --> 00:20:11,950
is that the whiskey server will call

00:20:09,700 --> 00:20:13,600
clothes on the response objective it's

00:20:11,950 --> 00:20:15,250
got a closed method and that is

00:20:13,600 --> 00:20:16,809
particularly relevant relevant for

00:20:15,250 --> 00:20:18,549
things like file responses where you

00:20:16,809 --> 00:20:19,960
want to when the whiskey server's

00:20:18,549 --> 00:20:21,970
finished with it you wants to close it

00:20:19,960 --> 00:20:23,919
wants to clean up so we just add the

00:20:21,970 --> 00:20:25,330
request there so that the request can be

00:20:23,919 --> 00:20:28,690
cleaned up if there's anything going on

00:20:25,330 --> 00:20:31,240
there then leave it's a 400 error or

00:20:28,690 --> 00:20:33,460
more than a 400 so if it's 400 or 500

00:20:31,240 --> 00:20:40,539
will log the response and then we'll

00:20:33,460 --> 00:20:43,000
return it and that's it okay base

00:20:40,539 --> 00:20:44,950
handler I can't show you the whole class

00:20:43,000 --> 00:20:47,260
but these are the three methods that

00:20:44,950 --> 00:20:49,630
we've talked about load middleware that

00:20:47,260 --> 00:20:52,389
populates the middleware chain so sets

00:20:49,630 --> 00:20:53,860
up the application get underscore get

00:20:52,389 --> 00:20:55,539
response which is this wrapper around

00:20:53,860 --> 00:20:57,190
the Django views which knows how to

00:20:55,539 --> 00:20:58,779
route a URL to a particular view

00:20:57,190 --> 00:21:00,789
function and to get the keyword

00:20:58,779 --> 00:21:05,919
arguments and then get response which is

00:21:00,789 --> 00:21:07,720
what we actually call per request to do

00:21:05,919 --> 00:21:12,309
it now there are a couple of Wiggles

00:21:07,720 --> 00:21:16,360
that I haven't talked about there's

00:21:12,309 --> 00:21:18,460
atomic requests where you can wrap the

00:21:16,360 --> 00:21:22,000
entire request response cycle in a DB

00:21:18,460 --> 00:21:23,230
transaction okay there's exception

00:21:22,000 --> 00:21:25,029
handling which I haven't talked about

00:21:23,230 --> 00:21:25,809
what happens if your view or any one of

00:21:25,029 --> 00:21:28,090
your middlewares

00:21:25,809 --> 00:21:30,100
raises an exception well you need to

00:21:28,090 --> 00:21:32,500
catch that and you know do a nice error

00:21:30,100 --> 00:21:34,960
page or whatever right but those extra

00:21:32,500 --> 00:21:37,840
bits they don't take up any space the

00:21:34,960 --> 00:21:41,649
whole of base handler is just is less

00:21:37,840 --> 00:21:43,539
than 150 lines long right so they can't

00:21:41,649 --> 00:21:44,980
there isn't much room for the stuff I

00:21:43,539 --> 00:21:51,070
haven't shown you that the stuff I

00:21:44,980 --> 00:21:53,590
haven't talked about right and so to

00:21:51,070 --> 00:21:56,279
business how do you fit a january play

00:21:53,590 --> 00:22:00,039
application onto a single shot slider

00:21:56,279 --> 00:22:02,860
like this this is our django micro

00:22:00,039 --> 00:22:05,130
example here we just import some stuff

00:22:02,860 --> 00:22:08,139
at the top and then we call settings

00:22:05,130 --> 00:22:09,789
configure and we just call that with the

00:22:08,139 --> 00:22:11,710
one setting that you really can't get

00:22:09,789 --> 00:22:13,330
rid of and well you could you'd have but

00:22:11,710 --> 00:22:15,309
you'd have to do sub classing and custom

00:22:13,330 --> 00:22:16,929
code and all the rest of it you have to

00:22:15,309 --> 00:22:19,360
tell the settings where the root URL

00:22:16,929 --> 00:22:20,769
Kampf is okay so in this case it's in

00:22:19,360 --> 00:22:23,379
this set very same file because we've

00:22:20,769 --> 00:22:23,740
only got one file then there's our few

00:22:23,379 --> 00:22:25,809
funds

00:22:23,740 --> 00:22:28,330
this is the same Halliwell view function

00:22:25,809 --> 00:22:31,540
that we used to and then we just route

00:22:28,330 --> 00:22:35,980
that view function to the home page like

00:22:31,540 --> 00:22:38,320
the same as all the rest and then we

00:22:35,980 --> 00:22:41,290
instantiate our application which is the

00:22:38,320 --> 00:22:44,170
whiskey callable which is the WSGI

00:22:41,290 --> 00:22:46,660
handler the whisky handler and that's it

00:22:44,170 --> 00:22:54,330
that's how you fit django onto a single

00:22:46,660 --> 00:22:57,730
slot right right there the base again

00:22:54,330 --> 00:22:59,740
there's there's nothing to it right we

00:22:57,730 --> 00:23:01,300
take in a request we pass it to a view

00:22:59,740 --> 00:23:03,940
that's wrapped in an onion of middleware

00:23:01,300 --> 00:23:06,820
that's it there's virtually nothing to

00:23:03,940 --> 00:23:08,290
it importantly it's the same virtually

00:23:06,820 --> 00:23:09,880
nothing to it that all the frameworks

00:23:08,290 --> 00:23:11,800
out there are doing and they're doing it

00:23:09,880 --> 00:23:13,780
seem more or less the same way because

00:23:11,800 --> 00:23:16,480
we're all handing the same problem the

00:23:13,780 --> 00:23:19,990
web problem okay we're turning requests

00:23:16,480 --> 00:23:21,850
into responses the base handler is 150

00:23:19,990 --> 00:23:24,790
lines long the whiskey handler is

00:23:21,850 --> 00:23:27,550
another 20 I put it up in its entire to

00:23:24,790 --> 00:23:30,130
you earlier on right there's really not

00:23:27,550 --> 00:23:34,990
much to it there's no room for it to be

00:23:30,130 --> 00:23:39,070
clunky okay so that's the kind of

00:23:34,990 --> 00:23:41,200
essence of it what to remember you

00:23:39,070 --> 00:23:48,160
probably don't want to put Django in a

00:23:41,200 --> 00:23:50,679
single file alright nobody uses the

00:23:48,160 --> 00:23:52,330
Express HelloWorld there's a express

00:23:50,679 --> 00:23:54,340
starter command line tool which gives

00:23:52,330 --> 00:23:55,960
you a full project with places for your

00:23:54,340 --> 00:23:58,809
static files and all the rest everyone

00:23:55,960 --> 00:24:00,790
uses that same a start project in Django

00:23:58,809 --> 00:24:04,960
you want you want the extra structure

00:24:00,790 --> 00:24:06,190
that it gives you okay don't you know

00:24:04,960 --> 00:24:11,470
unless you're having fun do what you

00:24:06,190 --> 00:24:14,860
like then you do want to use and love

00:24:11,470 --> 00:24:16,660
middleware right they're not that scary

00:24:14,860 --> 00:24:19,210
they're just a callable that has an

00:24:16,660 --> 00:24:21,190
opportunity to do some stuff before the

00:24:19,210 --> 00:24:23,350
next one down and it has an opportunity

00:24:21,190 --> 00:24:26,380
to do some stuff after the next one down

00:24:23,350 --> 00:24:30,390
and you can use them to do all sorts of

00:24:26,380 --> 00:24:32,770
wonderful things see SFR CSRF protection

00:24:30,390 --> 00:24:34,870
the security checks for headers that

00:24:32,770 --> 00:24:36,280
django provides sessions or sent

00:24:34,870 --> 00:24:37,400
occasion you know all of these are out

00:24:36,280 --> 00:24:40,550
of the box

00:24:37,400 --> 00:24:43,400
middleware right middleware is one of

00:24:40,550 --> 00:24:44,990
Django's kind of secret sources it's

00:24:43,400 --> 00:24:46,580
where mote a lot of the power comes from

00:24:44,990 --> 00:24:49,490
okay there's the whole are Emily but

00:24:46,580 --> 00:24:52,250
that's a separate thing right don't make

00:24:49,490 --> 00:24:55,370
a middleware that makes 200 data quick

00:24:52,250 --> 00:24:59,230
basic query on every request but

00:24:55,370 --> 00:25:02,810
investigate them play with them and win

00:24:59,230 --> 00:25:04,220
okay and then hopefully you've seen the

00:25:02,810 --> 00:25:05,660
core of the framework right you've seen

00:25:04,220 --> 00:25:07,910
it's not that complex

00:25:05,660 --> 00:25:11,630
so maybe you'll come and play and start

00:25:07,910 --> 00:25:13,700
contributing to I'm Carlton Gibson I'm

00:25:11,630 --> 00:25:15,950
your friendly Django fellow called

00:25:13,700 --> 00:25:17,690
Holton Gibson on github and Twitter I've

00:25:15,950 --> 00:25:19,370
got a podcast younger chat that's how

00:25:17,690 --> 00:25:20,630
every week listen to that I'm here for

00:25:19,370 --> 00:25:21,950
the rest of the conference and I'm here

00:25:20,630 --> 00:25:23,810
for the sprints on Thursday and Friday

00:25:21,950 --> 00:25:25,910
please come and talk to me I'd love to

00:25:23,810 --> 00:25:27,390
meet you I'd love to come and say hi all

00:25:25,910 --> 00:25:30,890
right thank you

00:25:27,390 --> 00:25:44,180
[Applause]

00:25:30,890 --> 00:25:44,180

YouTube URL: https://www.youtube.com/watch?v=w9cYEovduWI


