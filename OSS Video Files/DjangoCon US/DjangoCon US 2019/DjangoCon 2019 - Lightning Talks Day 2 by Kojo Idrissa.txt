Title: DjangoCon 2019 - Lightning Talks Day 2 by Kojo Idrissa
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Lightning Talks by Kojo Idrissa

Adem Gaygusuz 00:00
Laura Lorenz 5:24
Micah Lyle 10:23
Vince Salvino 15:14
Russell Keith-Magee 20:24
Brad Martsberger 25:19
Jeremy Gatens 30:21
Dane Hillard 35:31
Caleb Collins-Parks 40:27

This talk was presented at: https://2019.djangocon.us/talk/lightning-talks/

LINKS:
Follow Kojo Idrissa ðŸ‘‡
On Twitter: https://twitter.com/Transition
Official homepage: http://kojoidrissa.com/

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:08,890
[Music]

00:00:10,670 --> 00:00:17,350
you

00:00:11,600 --> 00:00:17,350
[Music]

00:00:17,890 --> 00:00:23,260
hello everyone it's lovely to be here

00:00:20,770 --> 00:00:26,560
it's my first time at django con but

00:00:23,260 --> 00:00:30,520
thanks for the warm welcome everyone my

00:00:26,560 --> 00:00:32,470
name is Adam k Jesus I am a Python and

00:00:30,520 --> 00:00:34,449
JavaScript developer currently at credit

00:00:32,470 --> 00:00:36,370
Swiss I'm a consultant that moves around

00:00:34,449 --> 00:00:40,150
quite a lot so I see a lot of different

00:00:36,370 --> 00:00:42,070
code bases I also run a website called

00:00:40,150 --> 00:00:44,920
dynamo which is what I want to talk

00:00:42,070 --> 00:00:46,629
about a little bit today it's made by

00:00:44,920 --> 00:00:51,400
the almighty django web framework you

00:00:46,629 --> 00:00:54,339
might know it better I know Moe is

00:00:51,400 --> 00:00:59,699
website all about football statistics ok

00:00:54,339 --> 00:01:03,369
soccer in your case we're all about data

00:00:59,699 --> 00:01:05,500
content our users the idea actually came

00:01:03,369 --> 00:01:07,540
out of a friend of mine who was tired of

00:01:05,500 --> 00:01:09,820
losing football bets there's quite a

00:01:07,540 --> 00:01:13,090
culture in the UK around watching the

00:01:09,820 --> 00:01:15,220
footy and put in a few bets on the

00:01:13,090 --> 00:01:17,979
football and he was tired of losing he's

00:01:15,220 --> 00:01:20,710
a bit of a techie himself he says I want

00:01:17,979 --> 00:01:25,800
to use data to to give me a bit of an an

00:01:20,710 --> 00:01:32,170
edge so our site gives our users an edge

00:01:25,800 --> 00:01:34,060
and they they pay for that data and it's

00:01:32,170 --> 00:01:36,600
theirs and they they share it and use it

00:01:34,060 --> 00:01:39,510
and what I want to talk about today is a

00:01:36,600 --> 00:01:43,570
tale whereby one of our power users

00:01:39,510 --> 00:01:45,550
decided to rip us off and start sharing

00:01:43,570 --> 00:01:47,200
that data for his own financial gap he

00:01:45,550 --> 00:01:50,860
or she we don't really know financial

00:01:47,200 --> 00:01:51,340
gain across the web this made us quite

00:01:50,860 --> 00:01:54,340
unhappy

00:01:51,340 --> 00:01:58,900
we don't mind people sharing data but it

00:01:54,340 --> 00:02:04,210
was a clean ripoff so software pirates

00:01:58,900 --> 00:02:09,940
can we catch them maybe if we attempt to

00:02:04,210 --> 00:02:16,470
to track their their behavior entered

00:02:09,940 --> 00:02:19,360
Django simple model was created to

00:02:16,470 --> 00:02:21,370
represent the the user's behavior

00:02:19,360 --> 00:02:24,970
through events and we took things like

00:02:21,370 --> 00:02:28,540
user agent IP it sounds invasive but

00:02:24,970 --> 00:02:30,430
they were still in our content and most

00:02:28,540 --> 00:02:31,150
importantly which user ID they were in

00:02:30,430 --> 00:02:36,829
our system

00:02:31,150 --> 00:02:41,150
exposed by a simple endpoint post

00:02:36,829 --> 00:02:43,819
endpoint and then a small snippet of

00:02:41,150 --> 00:02:48,470
JavaScript allowed us to just detect

00:02:43,819 --> 00:02:50,810
when screengrab occurred you'll probably

00:02:48,470 --> 00:02:53,209
notice that it's desktop only but we

00:02:50,810 --> 00:02:57,859
could tell from the pirate that he was

00:02:53,209 --> 00:03:00,140
screen grabbing on desktop and also it

00:02:57,859 --> 00:03:02,420
was easier to the majority of our users

00:03:00,140 --> 00:03:07,129
were mac on desktop so we went with Mac

00:03:02,420 --> 00:03:09,620
because a leap of faith so we we ship

00:03:07,129 --> 00:03:12,049
that within an hour because Django is so

00:03:09,620 --> 00:03:14,780
rapid doing such things and then it

00:03:12,049 --> 00:03:16,579
became a waiting game it turns out we

00:03:14,780 --> 00:03:18,049
didn't have to wait long at all

00:03:16,579 --> 00:03:21,530
as you can see this is on my mobile

00:03:18,049 --> 00:03:23,299
using the awesome Django admin a stream

00:03:21,530 --> 00:03:25,730
of events came in and this is

00:03:23,299 --> 00:03:28,989
specifically people hitting screenshot

00:03:25,730 --> 00:03:32,000
on their keyboard this was fascinating

00:03:28,989 --> 00:03:34,069
but you probably thinking it's perfectly

00:03:32,000 --> 00:03:37,459
fine to screenshot they're well within

00:03:34,069 --> 00:03:39,349
their rights so we thought what we're

00:03:37,459 --> 00:03:40,760
going to do with this data now there

00:03:39,349 --> 00:03:42,169
were work where of course some users

00:03:40,760 --> 00:03:47,449
screen grabbing more frequently than

00:03:42,169 --> 00:03:51,260
others so we thought um and we were and

00:03:47,449 --> 00:03:53,660
we came to an idea this is a small

00:03:51,260 --> 00:03:55,819
snippet in Django settings takes an

00:03:53,660 --> 00:03:57,859
environment variable put this together

00:03:55,819 --> 00:03:59,870
very quickly but again Django allows us

00:03:57,859 --> 00:04:03,290
to do this deployed on Heroku an

00:03:59,870 --> 00:04:05,269
environment variable variable that we

00:04:03,290 --> 00:04:08,569
convert to our keep key value dictionary

00:04:05,269 --> 00:04:12,250
the keys were the user IDs that were

00:04:08,569 --> 00:04:15,319
taking the screen grabs the values were

00:04:12,250 --> 00:04:19,760
discrete numbers that we defined unique

00:04:15,319 --> 00:04:21,919
to each user next we we use that config

00:04:19,760 --> 00:04:23,870
to inject it into the statistics for

00:04:21,919 --> 00:04:26,000
each user so if we come into the view

00:04:23,870 --> 00:04:29,599
and if the users in the dictionary we

00:04:26,000 --> 00:04:31,639
inject a discrete number as you can

00:04:29,599 --> 00:04:34,510
probably see where I'm going when we

00:04:31,639 --> 00:04:38,060
serve up the statistics to each user

00:04:34,510 --> 00:04:41,740
those users would would get a discrete

00:04:38,060 --> 00:04:44,450
number so again it was a waiting game

00:04:41,740 --> 00:04:47,570
they post every day so

00:04:44,450 --> 00:04:51,020
that they play stood and bingo that we

00:04:47,570 --> 00:04:53,150
had the discreet number that that user

00:04:51,020 --> 00:04:55,310
pipes did and we were able to track that

00:04:53,150 --> 00:04:57,680
back to user ID track that back to their

00:04:55,310 --> 00:04:59,480
PayPal account and then contact them

00:04:57,680 --> 00:05:01,310
politely to ask them to take down the

00:04:59,480 --> 00:05:04,670
content and they did in fact take the

00:05:01,310 --> 00:05:06,830
content down towards this proof well we

00:05:04,670 --> 00:05:11,840
were pretty chuffed with our skills at

00:05:06,830 --> 00:05:16,060
hunting pirates and you can in fact you

00:05:11,840 --> 00:05:16,060
can in fact catch a pirate just about

00:05:16,120 --> 00:05:22,040
thank you I'm Arden Pegasus warding off

00:05:19,580 --> 00:05:25,859
pirates one-line with django at time

00:05:22,040 --> 00:05:25,859
[Applause]

00:05:26,330 --> 00:05:30,800
right hi my name is Laura I'm gonna

00:05:28,129 --> 00:05:32,840
explain selenium really fast I work at

00:05:30,800 --> 00:05:34,099
industry Drive we're hiring I'm also

00:05:32,840 --> 00:05:35,659
going to talk a little bit about hip

00:05:34,099 --> 00:05:37,729
tests browserstack behaved and behaved

00:05:35,659 --> 00:05:39,770
Django shoutout to Lee Chou from Django

00:05:37,729 --> 00:05:41,000
Khan 20:18 gave a great talk last year

00:05:39,770 --> 00:05:44,810
you should check it out if you want to

00:05:41,000 --> 00:05:46,039
slower explanation of that stuff ok why

00:05:44,810 --> 00:05:47,479
are we talking about this we want to

00:05:46,039 --> 00:05:49,280
test our websites full-stack features

00:05:47,479 --> 00:05:50,210
meaning we need a JavaScript environment

00:05:49,280 --> 00:05:52,159
if you're not on board with this

00:05:50,210 --> 00:05:53,509
feel free to tune out manual testing

00:05:52,159 --> 00:05:56,389
boring tedious hard to reproduce

00:05:53,509 --> 00:05:58,370
automated testing fun the best not any

00:05:56,389 --> 00:06:00,379
of that other stuff here's a drunk

00:05:58,370 --> 00:06:02,930
history version of what was up with

00:06:00,379 --> 00:06:05,330
selenium the internet was invented yada

00:06:02,930 --> 00:06:08,060
yada a group of people made selenium

00:06:05,330 --> 00:06:10,520
core and selenium RC ability to automate

00:06:08,060 --> 00:06:13,310
stuff with a JavaScript library and to

00:06:10,520 --> 00:06:15,919
push stuff push those directions to

00:06:13,310 --> 00:06:18,560
remote browsers other people were

00:06:15,919 --> 00:06:21,860
working on a way to wrap native browser

00:06:18,560 --> 00:06:23,930
commands instead they combined forces so

00:06:21,860 --> 00:06:25,909
we are now here we can use selenium

00:06:23,930 --> 00:06:27,979
language-specific api is to send test

00:06:25,909 --> 00:06:30,020
directions to local browser or through

00:06:27,979 --> 00:06:31,430
selenium hub to remote browsers talk a

00:06:30,020 --> 00:06:33,229
little bit about third-party services

00:06:31,430 --> 00:06:35,360
for hosting those remote browsers there

00:06:33,229 --> 00:06:37,699
is a future maybe we'll talk about that

00:06:35,360 --> 00:06:38,810
next year there's a bunch of

00:06:37,699 --> 00:06:40,009
infrastructure you could set up but

00:06:38,810 --> 00:06:41,330
we're all django developers so you'll

00:06:40,009 --> 00:06:44,089
probably start with static live server

00:06:41,330 --> 00:06:46,039
test case here's the snippet from Django

00:06:44,089 --> 00:06:48,110
Docs you'll see here that this gives you

00:06:46,039 --> 00:06:49,789
access to this self dot selenium object

00:06:48,110 --> 00:06:51,409
inside your test case which exposes to

00:06:49,789 --> 00:06:53,120
you the selenium Python bindings to be

00:06:51,409 --> 00:06:55,669
able to do these browser activities from

00:06:53,120 --> 00:06:57,889
Python so find element my names and keys

00:06:55,669 --> 00:06:59,779
do some click stuff this is all stuff

00:06:57,889 --> 00:07:02,240
that comes with selenium Python that is

00:06:59,779 --> 00:07:04,370
being abstracted for you maybe I want to

00:07:02,240 --> 00:07:06,830
do some more stuff we did so we subclass

00:07:04,370 --> 00:07:08,270
this and put in some stuff that in this

00:07:06,830 --> 00:07:09,680
case is something you wanted to call

00:07:08,270 --> 00:07:10,969
something else I start located above

00:07:09,680 --> 00:07:12,979
here's some selenium stuff that we're

00:07:10,969 --> 00:07:15,469
doing and maybe you want to implement

00:07:12,979 --> 00:07:17,690
those on your test side so here I have a

00:07:15,469 --> 00:07:20,300
test that uses that subclass using my

00:07:17,690 --> 00:07:22,909
new assertion and here and also some

00:07:20,300 --> 00:07:24,650
other selenium Python stuff if you keep

00:07:22,909 --> 00:07:25,610
reading the selenium Python Docs you'll

00:07:24,650 --> 00:07:27,560
learn that they talk about something

00:07:25,610 --> 00:07:28,940
called a page object paradigm this is

00:07:27,560 --> 00:07:30,830
basically to create classes that

00:07:28,940 --> 00:07:32,000
describe what your pages do specifically

00:07:30,830 --> 00:07:33,889
so you can write your selenium

00:07:32,000 --> 00:07:36,289
abstractions of what your page is

00:07:33,889 --> 00:07:38,990
supposed to do how the UI works in these

00:07:36,289 --> 00:07:40,240
classes and then over in your test you

00:07:38,990 --> 00:07:42,130
can instantiate those page

00:07:40,240 --> 00:07:43,389
objects and call those methods there so

00:07:42,130 --> 00:07:45,310
it's a way like sort of abstracted

00:07:43,389 --> 00:07:48,099
page-by-page instead of a subclass of

00:07:45,310 --> 00:07:49,630
your test case locators is the other

00:07:48,099 --> 00:07:51,190
thing that that those Doc's are going to

00:07:49,630 --> 00:07:53,020
talk to you about so this is an idea

00:07:51,190 --> 00:07:55,660
that for those given pages you could

00:07:53,020 --> 00:07:57,789
create this locators class that has

00:07:55,660 --> 00:07:59,860
these attributes that look a little bit

00:07:57,789 --> 00:08:02,160
like this that way in your code you can

00:07:59,860 --> 00:08:06,310
use these terms instead of actually

00:08:02,160 --> 00:08:08,319
describing the CSS selectors directly in

00:08:06,310 --> 00:08:10,599
them so you can see I'm using them over

00:08:08,319 --> 00:08:11,889
here if you are really lucky maybe

00:08:10,599 --> 00:08:13,180
front-end can tell you what these are

00:08:11,889 --> 00:08:15,750
and you can just spend all of your time

00:08:13,180 --> 00:08:19,330
using these attributes over here but

00:08:15,750 --> 00:08:21,610
haven't totally experienced that yet if

00:08:19,330 --> 00:08:23,740
you want to run stuff on more than one

00:08:21,610 --> 00:08:25,389
browser than your local browser maybe

00:08:23,740 --> 00:08:27,849
you want to use selenium hub this is an

00:08:25,389 --> 00:08:29,470
example of some docker compose files

00:08:27,849 --> 00:08:31,569
that is sort of like a stub of docker

00:08:29,470 --> 00:08:33,370
compose that can set up Chrome and

00:08:31,569 --> 00:08:34,649
Firefox and selenium hubs so that you

00:08:33,370 --> 00:08:36,550
can actually run your tests in

00:08:34,649 --> 00:08:39,070
distributed browsers so you can be

00:08:36,550 --> 00:08:40,810
running multiple kinds at once or you

00:08:39,070 --> 00:08:42,640
can let someone else help you in which

00:08:40,810 --> 00:08:45,390
case I mean use a tool like browser

00:08:42,640 --> 00:08:47,520
stack for example to actually host the

00:08:45,390 --> 00:08:49,959
remote browsers that you want to run

00:08:47,520 --> 00:08:52,270
this is actually showing the output from

00:08:49,959 --> 00:08:54,640
browser stack which includes recording a

00:08:52,270 --> 00:08:56,770
video of your test that you can like

00:08:54,640 --> 00:09:00,190
play at any time so that's usually like

00:08:56,770 --> 00:09:01,570
a really well experience for people if

00:09:00,190 --> 00:09:03,070
you want to go to like the totally next

00:09:01,570 --> 00:09:06,339
level this is what we're just starting

00:09:03,070 --> 00:09:07,810
to get used to now in a year later from

00:09:06,339 --> 00:09:10,600
the talk that I said inspired this whole

00:09:07,810 --> 00:09:12,490
thing is to layer on gherkin behave and

00:09:10,600 --> 00:09:15,339
behave Django to describe your selenium

00:09:12,490 --> 00:09:17,410
tests in gherkin syntax so you can use

00:09:15,339 --> 00:09:19,450
this type of given whatever when

00:09:17,410 --> 00:09:20,950
something then something this might be

00:09:19,450 --> 00:09:22,540
described by your stakeholders or by

00:09:20,950 --> 00:09:25,270
product and this can actually be

00:09:22,540 --> 00:09:30,760
auto-generated or generated yourself

00:09:25,270 --> 00:09:32,260
into these implementations which can be

00:09:30,760 --> 00:09:35,620
implementing something in selenium that

00:09:32,260 --> 00:09:39,190
actually describes what these regex

00:09:35,620 --> 00:09:40,839
matches to these scenarios are if you

00:09:39,190 --> 00:09:43,060
want to go step five plus you can

00:09:40,839 --> 00:09:45,070
actually use this tool called hip test

00:09:43,060 --> 00:09:47,230
it's this nice UI that you used to fill

00:09:45,070 --> 00:09:49,390
out gherkin scenarios and Auto generate

00:09:47,230 --> 00:09:52,120
the stubs for these things and abstract

00:09:49,390 --> 00:09:53,770
things the things of those into action

00:09:52,120 --> 00:09:56,440
words so that you can reuse your

00:09:53,770 --> 00:09:58,690
over and over again couple super fastest

00:09:56,440 --> 00:10:00,370
tips use a screen sharing app to VNC

00:09:58,690 --> 00:10:02,200
into the selenium process feel free to

00:10:00,370 --> 00:10:04,110
throw in a PDB set trace and then take

00:10:02,200 --> 00:10:05,980
control as a human if you need to debug

00:10:04,110 --> 00:10:07,900
webdriver wait is your friend but

00:10:05,980 --> 00:10:10,030
sometimes it needs a nudge we use action

00:10:07,900 --> 00:10:11,850
change move to element with offset and

00:10:10,030 --> 00:10:14,050
yes time dot sleep occasionally

00:10:11,850 --> 00:10:15,280
Mockingjay s has been a lot harder but I

00:10:14,050 --> 00:10:17,050
don't have a lot of time to talk about

00:10:15,280 --> 00:10:20,170
that so if you're interested you can ask

00:10:17,050 --> 00:10:25,270
me later thank you

00:10:20,170 --> 00:10:25,270
[Applause]

00:10:25,440 --> 00:10:30,300
hi I'm Micah I'm a freelance Django

00:10:28,170 --> 00:10:32,490
engineer I do a variety of work for a

00:10:30,300 --> 00:10:33,750
variety of clients and I don't want to

00:10:32,490 --> 00:10:36,209
talk about something that's pretty

00:10:33,750 --> 00:10:38,040
simple and can really be helpful to

00:10:36,209 --> 00:10:40,740
speed up your django code and talk about

00:10:38,040 --> 00:10:41,850
cash properties I'm gonna just talk

00:10:40,740 --> 00:10:43,529
about the difference between a cash

00:10:41,850 --> 00:10:46,230
property on a property and then show an

00:10:43,529 --> 00:10:47,670
example usage within a view test and

00:10:46,230 --> 00:10:50,779
some tests and then show how to use them

00:10:47,670 --> 00:10:53,459
with existing methods so let's dive in

00:10:50,779 --> 00:10:56,040
really simple example we have a django

00:10:53,459 --> 00:10:59,069
model of a person that person has a

00:10:56,040 --> 00:11:01,379
first name and a last name and in this

00:10:59,069 --> 00:11:04,740
example we are gonna use the famous

00:11:01,379 --> 00:11:06,420
bengals NFL receiver Chad Johnson who

00:11:04,740 --> 00:11:12,569
famously changed his name to Chad

00:11:06,420 --> 00:11:14,339
Ochocinco so we've got for the first

00:11:12,569 --> 00:11:15,689
thing we have the property name property

00:11:14,339 --> 00:11:16,949
and the second thing underneath the

00:11:15,689 --> 00:11:19,529
fields we have the property the cash

00:11:16,949 --> 00:11:21,540
property name cash property so they both

00:11:19,529 --> 00:11:23,279
were on the same code if we instantiate

00:11:21,540 --> 00:11:24,750
this person and we print the name

00:11:23,279 --> 00:11:26,579
property followed by the name cash

00:11:24,750 --> 00:11:29,189
property we will get the same result out

00:11:26,579 --> 00:11:30,810
check out Chad Johnson and then if we

00:11:29,189 --> 00:11:33,149
change the person's last name to

00:11:30,810 --> 00:11:35,579
Ochocinco like Chad famously did I think

00:11:33,149 --> 00:11:37,980
in 2008 and we save it you'll notice

00:11:35,579 --> 00:11:40,860
that the property is going to print Chad

00:11:37,980 --> 00:11:42,540
Ochocinco next but the cash property is

00:11:40,860 --> 00:11:43,079
actually still going to print Chad

00:11:42,540 --> 00:11:46,110
Johnson

00:11:43,079 --> 00:11:48,569
that's because cash properties are only

00:11:46,110 --> 00:11:50,040
run once so the first time you access it

00:11:48,569 --> 00:11:53,250
within the life cycle of the instance

00:11:50,040 --> 00:11:55,139
and they do not change unless if you

00:11:53,250 --> 00:11:56,970
look at the bottom is you really need to

00:11:55,139 --> 00:12:01,069
you can delete the cash property and

00:11:56,970 --> 00:12:03,360
re-access it and it will recompute so

00:12:01,069 --> 00:12:05,910
let's talk about actually a real world

00:12:03,360 --> 00:12:09,750
example one of the groups I work with is

00:12:05,910 --> 00:12:13,019
a healthcare group and in their reset

00:12:09,750 --> 00:12:14,819
password view that I happen to do you

00:12:13,019 --> 00:12:19,680
want to get the user from a basin code

00:12:14,819 --> 00:12:21,629
at 64 essentially and instead of doing

00:12:19,680 --> 00:12:23,040
some function like get underscore user I

00:12:21,629 --> 00:12:24,629
figured well within the view if we ever

00:12:23,040 --> 00:12:26,189
need the user on the first time we

00:12:24,629 --> 00:12:28,500
access the user we're just gonna grab it

00:12:26,189 --> 00:12:30,870
and obviously if something goes wrong

00:12:28,500 --> 00:12:32,220
translating that base64 ID we can throw

00:12:30,870 --> 00:12:34,709
a validation error and it'll just return

00:12:32,220 --> 00:12:36,240
the correct response in the view so in

00:12:34,709 --> 00:12:38,250
the bottom snippet there you can see

00:12:36,240 --> 00:12:39,119
self dot user is called twice but that's

00:12:38,250 --> 00:12:42,989
only gonna

00:12:39,119 --> 00:12:45,179
actually run that code once talked about

00:12:42,989 --> 00:12:47,219
in tests so also in this code base I was

00:12:45,179 --> 00:12:48,929
brought in to optimize aspects of the

00:12:47,219 --> 00:12:51,179
code and when I was brought in it had

00:12:48,929 --> 00:12:54,329
about 700 tests and they used the unit

00:12:51,179 --> 00:12:56,759
style setups and frequently did stuff

00:12:54,329 --> 00:12:59,279
like above where you'd have a clinic and

00:12:56,759 --> 00:13:01,319
two clinic locations each being created

00:12:59,279 --> 00:13:02,939
in the setup now each one of these

00:13:01,319 --> 00:13:05,069
creations is making at least one

00:13:02,939 --> 00:13:06,539
database query but some of the tests

00:13:05,069 --> 00:13:08,909
weren't actually using the clinic

00:13:06,539 --> 00:13:11,339
locations or one test wasn't using the

00:13:08,909 --> 00:13:12,239
second clinic location so it's actually

00:13:11,339 --> 00:13:14,189
really nice to make these cash

00:13:12,239 --> 00:13:15,929
properties in the test which you know if

00:13:14,189 --> 00:13:17,699
one of your test cases actually uses

00:13:15,929 --> 00:13:19,949
them since a test case is a new instance

00:13:17,699 --> 00:13:22,949
each time it's only again going to

00:13:19,949 --> 00:13:26,569
create it if you need it a more complex

00:13:22,949 --> 00:13:29,429
example if this group had 700 tests and

00:13:26,569 --> 00:13:31,799
essentially they were they had a

00:13:29,429 --> 00:13:33,689
superclass that setup like four or five

00:13:31,799 --> 00:13:35,399
groups depending on which aspects of the

00:13:33,689 --> 00:13:37,799
test were running and it looks something

00:13:35,399 --> 00:13:39,779
like this and this would be run for

00:13:37,799 --> 00:13:40,979
every single tests so for all seven our

00:13:39,779 --> 00:13:44,369
tests it was making at least four

00:13:40,979 --> 00:13:48,019
queries doing this in the new code

00:13:44,369 --> 00:13:49,829
I created a superclass up there that

00:13:48,019 --> 00:13:51,989
essentially made these as cache

00:13:49,829 --> 00:13:53,999
properties so it made all these groups

00:13:51,989 --> 00:13:55,319
as cache properties that upon access

00:13:53,999 --> 00:13:57,959
would create the relevant group

00:13:55,319 --> 00:14:00,449
corresponding to the user type and then

00:13:57,959 --> 00:14:03,929
for all across all the tests I actually

00:14:00,449 --> 00:14:05,159
mocked and/or patched grouped objects so

00:14:03,929 --> 00:14:07,949
that when you call a group that objects

00:14:05,159 --> 00:14:10,259
get named equals say the patient name it

00:14:07,949 --> 00:14:12,329
actually used a proxy sort of thing that

00:14:10,259 --> 00:14:14,669
would call one of these cache properties

00:14:12,329 --> 00:14:17,159
so that now we weren't necessarily

00:14:14,669 --> 00:14:18,479
getting all we weren't for sure getting

00:14:17,159 --> 00:14:20,699
all four or five of these queries per

00:14:18,479 --> 00:14:22,709
test but rather usually only at most one

00:14:20,699 --> 00:14:26,729
or two because these were groups were

00:14:22,709 --> 00:14:28,379
not all being created in tests so I just

00:14:26,729 --> 00:14:30,629
wanted to show one other case of using

00:14:28,379 --> 00:14:31,649
it on an existing method so cache

00:14:30,629 --> 00:14:33,599
properties don't have to just use a

00:14:31,649 --> 00:14:35,549
decorator you can also use it on an

00:14:33,599 --> 00:14:39,029
existing method so in this very simple

00:14:35,549 --> 00:14:40,679
case we have the class a with X 2 3 and

00:14:39,029 --> 00:14:42,749
then the instance variable Y set to 5

00:14:40,679 --> 00:14:46,679
and notice the method just returns the

00:14:42,749 --> 00:14:47,939
sum of x and y before python 3.6 you had

00:14:46,679 --> 00:14:49,679
to make it a method you could call it

00:14:47,939 --> 00:14:50,910
like a function but you had to put pass

00:14:49,679 --> 00:14:53,639
in the same name

00:14:50,910 --> 00:14:55,980
the property you were naming it but now

00:14:53,639 --> 00:14:59,490
because of the double underscore set

00:14:55,980 --> 00:15:00,449
name feature in Python 3.6 and later you

00:14:59,490 --> 00:15:03,509
do not have to do that

00:15:00,449 --> 00:15:05,459
so yeah that's as of Django 4.0 that's

00:15:03,509 --> 00:15:08,220
going to be obsolete so there you go

00:15:05,459 --> 00:15:10,970
that's cash properties and that's kind

00:15:08,220 --> 00:15:15,840
of what's coming up with Django

00:15:10,970 --> 00:15:15,840
[Applause]

00:15:16,319 --> 00:15:21,899
hi everyone so as a web developer just

00:15:20,009 --> 00:15:23,669
in general I'm sure you have probably

00:15:21,899 --> 00:15:26,939
come across WordPress and maybe you have

00:15:23,669 --> 00:15:28,589
to support it so I'm not gonna slag on

00:15:26,939 --> 00:15:30,989
WordPress it's a great tool for many

00:15:28,589 --> 00:15:33,089
different purposes but when you're

00:15:30,989 --> 00:15:35,069
wielding the power of Django sometimes

00:15:33,089 --> 00:15:37,649
it can be frustrating to support

00:15:35,069 --> 00:15:39,749
something like WordPress so you know

00:15:37,649 --> 00:15:41,729
it's kind of a holy grail of can you

00:15:39,749 --> 00:15:43,709
replace WordPress with Django we're

00:15:41,729 --> 00:15:46,319
trying to do that so many of you have

00:15:43,709 --> 00:15:47,819
probably heard of wagtail and it's super

00:15:46,319 --> 00:15:49,799
popular right now it's a really great

00:15:47,819 --> 00:15:52,079
CMS but it kind of just gives you the

00:15:49,799 --> 00:15:54,029
bare bones of a CMS framework it you are

00:15:52,079 --> 00:15:56,609
free to implement however you want

00:15:54,029 --> 00:16:00,289
whatever kind of content you want it's

00:15:56,609 --> 00:16:03,449
you know you you develop it yourself so

00:16:00,289 --> 00:16:05,759
I'm going to introduce CodeRed CMS which

00:16:03,449 --> 00:16:07,859
is essentially a layer on top of Lag

00:16:05,759 --> 00:16:10,499
tail or a distribution of wagtail you

00:16:07,859 --> 00:16:13,079
could think of it and we have really you

00:16:10,499 --> 00:16:14,759
know designed this to kind of be sort of

00:16:13,079 --> 00:16:17,039
a wordpress or replacement you can

00:16:14,759 --> 00:16:18,389
change the logo you can login and you

00:16:17,039 --> 00:16:20,850
know get get going right away without

00:16:18,389 --> 00:16:22,499
any code for kind of informational

00:16:20,850 --> 00:16:26,429
marketing sites it's really designed for

00:16:22,499 --> 00:16:29,669
that so WordPress has the famous five

00:16:26,429 --> 00:16:32,249
minute install so I'm going to do a five

00:16:29,669 --> 00:16:33,239
minute install of code read CMS and show

00:16:32,249 --> 00:16:35,910
you what it looks like

00:16:33,239 --> 00:16:39,779
so first I would just do pip install

00:16:35,910 --> 00:16:46,169
code read CMS which I have already done

00:16:39,779 --> 00:16:50,399
to avoid any Wi-Fi errors and then next

00:16:46,169 --> 00:16:55,199
you would do code read CMS start your

00:16:50,399 --> 00:16:57,089
project name lightning and you can pass

00:16:55,199 --> 00:16:59,579
in a few extra options too but this is

00:16:57,089 --> 00:17:03,629
going to be very similar to when you do

00:16:59,579 --> 00:17:07,100
Django admin start so just a few steps

00:17:03,629 --> 00:17:07,100
to get everything set up here

00:17:08,860 --> 00:17:15,350
going to set up my database and we have

00:17:13,670 --> 00:17:17,210
gotten some feedback that people would

00:17:15,350 --> 00:17:19,460
actually like a GUI around this as well

00:17:17,210 --> 00:17:21,950
similar to what WordPress has when you

00:17:19,460 --> 00:17:23,990
you know it kind of it asks you to set

00:17:21,950 --> 00:17:25,460
it up through kind of a wizard so that's

00:17:23,990 --> 00:17:28,990
something that would be nice so this is

00:17:25,460 --> 00:17:33,080
just applying the Django migrations and

00:17:28,990 --> 00:17:44,090
I'm going to create a super user so I

00:17:33,080 --> 00:17:47,450
can log in yes that's the greatest

00:17:44,090 --> 00:17:49,640
feature ever by the way and now that I

00:17:47,450 --> 00:17:59,060
have created a user I'm just going to do

00:17:49,640 --> 00:18:01,130
django run server okay so that was kind

00:17:59,060 --> 00:18:03,620
of the normal the normal flow of really

00:18:01,130 --> 00:18:07,850
starting any Django project and if I

00:18:03,620 --> 00:18:09,680
come over to my server now you could see

00:18:07,850 --> 00:18:11,630
that I have just you know very

00:18:09,680 --> 00:18:14,960
bare-bones it named it lightning after

00:18:11,630 --> 00:18:17,300
what I what I named it but let's go

00:18:14,960 --> 00:18:21,730
ahead and log into the wagtail admin

00:18:17,300 --> 00:18:21,730
that kind of replaces the Django admin

00:18:23,260 --> 00:18:28,820
and let's get to work so this looks this

00:18:27,260 --> 00:18:31,580
is pretty much exactly like stock

00:18:28,820 --> 00:18:35,000
wagtail I'm gonna go into my home page

00:18:31,580 --> 00:18:36,680
here and before we do that let's just go

00:18:35,000 --> 00:18:39,980
right into the settings there's a lot of

00:18:36,680 --> 00:18:42,940
settings we're gonna upload our logo so

00:18:39,980 --> 00:18:42,940
we can get started right away

00:18:44,500 --> 00:18:50,930
so I'll just load a logo in there and

00:18:49,100 --> 00:18:53,180
you could do a fav icon and stuff as

00:18:50,930 --> 00:18:55,550
well I save that gives you a nice

00:18:53,180 --> 00:18:57,590
branded experience so that you could use

00:18:55,550 --> 00:19:00,710
this you know especially if you support

00:18:57,590 --> 00:19:03,470
multiple websites it's easy to tell

00:19:00,710 --> 00:19:04,940
which one is which going back you can

00:19:03,470 --> 00:19:07,160
see we now have our little logo in the

00:19:04,940 --> 00:19:08,720
corner but the page is still empty so

00:19:07,160 --> 00:19:12,650
let's fill out a few things on the home

00:19:08,720 --> 00:19:14,660
page now in wagtail when you go to the

00:19:12,650 --> 00:19:16,340
home page you have to define everything

00:19:14,660 --> 00:19:18,350
you want you know every field

00:19:16,340 --> 00:19:20,450
it's a Django model you fill out

00:19:18,350 --> 00:19:22,190
whatever you want on your field a title

00:19:20,450 --> 00:19:25,250
a description

00:19:22,190 --> 00:19:27,200
in image etc with CodeRed CMS we've kind

00:19:25,250 --> 00:19:29,929
of pre-populated a lot of basic stuff

00:19:27,200 --> 00:19:34,009
that basically every website needs so

00:19:29,929 --> 00:19:44,419
I'm gonna load in a hero unit which is

00:19:34,009 --> 00:19:46,730
just an image and it's all based on

00:19:44,419 --> 00:19:49,460
bootstrap so we have a everything is

00:19:46,730 --> 00:19:51,110
great in column based and we can add all

00:19:49,460 --> 00:19:57,440
kinds of content I'm just gonna add some

00:19:51,110 --> 00:20:00,259
text make that in h2 and I'll go ahead

00:19:57,440 --> 00:20:02,629
and preview my homepage and now i've got

00:20:00,259 --> 00:20:04,610
a hero unit with some content in there

00:20:02,629 --> 00:20:06,139
so you can follow this paradigm the

00:20:04,610 --> 00:20:08,000
whole way through and build your entire

00:20:06,139 --> 00:20:10,549
page out without having to do any code

00:20:08,000 --> 00:20:12,470
and if you want to customize it you can

00:20:10,549 --> 00:20:15,919
override a little bit of HTML and CSS

00:20:12,470 --> 00:20:17,929
and you have a fully functioning wagtail

00:20:15,919 --> 00:20:20,000
CMS without having to write any code at

00:20:17,929 --> 00:20:21,440
all so thank you hopefully this is

00:20:20,000 --> 00:20:26,460
useful

00:20:21,440 --> 00:20:29,460
[Applause]

00:20:26,460 --> 00:20:31,470
all right an ecosystem is an

00:20:29,460 --> 00:20:33,899
interconnected system of independent

00:20:31,470 --> 00:20:35,519
parts in a healthy ecosystem consumers

00:20:33,899 --> 00:20:37,289
producers and resources in an

00:20:35,519 --> 00:20:40,110
environment interact in balance with

00:20:37,289 --> 00:20:41,970
each other but an ecosystem can easily

00:20:40,110 --> 00:20:43,980
fall out of balance if you remove a

00:20:41,970 --> 00:20:45,749
critical piece of a system or introduce

00:20:43,980 --> 00:20:48,029
a new participant an ecosystem can

00:20:45,749 --> 00:20:51,029
collapse or find a new unhealthy

00:20:48,029 --> 00:20:52,889
equilibrium software is an ecosystem

00:20:51,029 --> 00:20:55,259
developers write new software that

00:20:52,889 --> 00:20:57,659
software is consumed by users to solve

00:20:55,259 --> 00:20:59,190
problems that use of software generates

00:20:57,659 --> 00:21:01,860
revenue which funds the development of

00:20:59,190 --> 00:21:03,690
yet more software however the open

00:21:01,860 --> 00:21:06,690
source software ecosystem is not at

00:21:03,690 --> 00:21:07,980
present a healthy ecosystem despite the

00:21:06,690 --> 00:21:09,629
fact that open source tools and

00:21:07,980 --> 00:21:11,730
libraries are critical to the health of

00:21:09,629 --> 00:21:13,830
an increasing number of businesses those

00:21:11,730 --> 00:21:15,720
who consume open source software do not

00:21:13,830 --> 00:21:17,850
generally contribute back to the

00:21:15,720 --> 00:21:19,320
ecosystem they consume but they don't

00:21:17,850 --> 00:21:21,149
necessarily contribute to the

00:21:19,320 --> 00:21:23,879
development and maintenance of what they

00:21:21,149 --> 00:21:25,919
consume there are plenty of indicators

00:21:23,879 --> 00:21:27,600
of this imbalance critical pieces of

00:21:25,919 --> 00:21:29,999
infrastructure have been underfunded or

00:21:27,600 --> 00:21:31,619
under maintained important research and

00:21:29,999 --> 00:21:33,350
development work either hasn't been done

00:21:31,619 --> 00:21:35,940
or hasn't been done in a timely fashion

00:21:33,350 --> 00:21:38,159
contributor burnout is prevalent in open

00:21:35,940 --> 00:21:39,990
source communities the problem has been

00:21:38,159 --> 00:21:41,879
well researched and documented but that

00:21:39,990 --> 00:21:44,039
hasn't caused a significant change in

00:21:41,879 --> 00:21:45,600
business practices attempts to raise

00:21:44,039 --> 00:21:47,610
awareness of the problem have been met

00:21:45,600 --> 00:21:50,100
with antipathy attempts to force the

00:21:47,610 --> 00:21:52,289
issue have been met with hostility so

00:21:50,100 --> 00:21:54,269
how can we fix this problem

00:21:52,289 --> 00:21:56,249
well naming a thing gives it power and

00:21:54,269 --> 00:21:59,039
I'd like to suggest a way to name this

00:21:56,249 --> 00:22:00,509
problem carbon emissions are one of the

00:21:59,039 --> 00:22:01,980
largest contributors to climate change

00:22:00,509 --> 00:22:03,690
and so one of the responses to climate

00:22:01,980 --> 00:22:05,669
change has been the emergence of the

00:22:03,690 --> 00:22:07,470
carbon neutrality movement the term

00:22:05,669 --> 00:22:09,059
carbon neutral provides a rallying cry

00:22:07,470 --> 00:22:10,559
for those advocating for change it

00:22:09,059 --> 00:22:12,629
provides an indication of the type of

00:22:10,559 --> 00:22:14,210
change that is required and provides a

00:22:12,629 --> 00:22:16,440
measurable and achievable goal

00:22:14,210 --> 00:22:17,879
businesses can indicate their commitment

00:22:16,440 --> 00:22:20,519
to addressing climate change by adopting

00:22:17,879 --> 00:22:22,259
a carbon neutrality pledge consumers can

00:22:20,519 --> 00:22:24,210
then use those pledges as part of their

00:22:22,259 --> 00:22:26,460
process of deciding which businesses to

00:22:24,210 --> 00:22:28,019
support why am I talking about carbon

00:22:26,460 --> 00:22:30,600
neutrality well the software ecosystem

00:22:28,019 --> 00:22:32,399
is faced with a very similar problem we

00:22:30,600 --> 00:22:34,049
need to balance the consumption of

00:22:32,399 --> 00:22:35,970
open-source software with the need for

00:22:34,049 --> 00:22:38,340
maintenance resources we need software

00:22:35,970 --> 00:22:40,240
consumers to balance their consumption

00:22:38,340 --> 00:22:42,760
with open-source contribution

00:22:40,240 --> 00:22:45,970
we need the software ecosystem to become

00:22:42,760 --> 00:22:47,560
contributor neutral carbon neutrality

00:22:45,970 --> 00:22:49,180
doesn't mean we have to revert to living

00:22:47,560 --> 00:22:50,950
in a cave it asks us to critically

00:22:49,180 --> 00:22:52,600
analyze and monitor our activity to

00:22:50,950 --> 00:22:54,220
ensure that the value we extract from

00:22:52,600 --> 00:22:55,690
the environment is met with an equal

00:22:54,220 --> 00:22:57,520
commitment to give back to that

00:22:55,690 --> 00:22:59,410
ecosystem you can do that by changing

00:22:57,520 --> 00:23:01,180
your behavior or you can do it by

00:22:59,410 --> 00:23:02,320
offsetting the activities that can't be

00:23:01,180 --> 00:23:04,840
can't be minimized

00:23:02,320 --> 00:23:07,120
either way the aim is to have a net zero

00:23:04,840 --> 00:23:09,370
impact on the environment being

00:23:07,120 --> 00:23:11,110
contributor neutral is much the same but

00:23:09,370 --> 00:23:12,640
to the software ecosystem it's a

00:23:11,110 --> 00:23:14,650
commitment to be aware of how much

00:23:12,640 --> 00:23:16,840
open-source software you are using and

00:23:14,650 --> 00:23:19,090
the relationship that you have with the

00:23:16,840 --> 00:23:20,410
producers of that software it means

00:23:19,090 --> 00:23:22,840
trying to be part of the contribution

00:23:20,410 --> 00:23:24,820
process if you can but if you can't it

00:23:22,840 --> 00:23:26,740
means offsetting your consumption by

00:23:24,820 --> 00:23:29,230
providing resources to those that are

00:23:26,740 --> 00:23:30,730
contributing so how do you become

00:23:29,230 --> 00:23:32,680
contributing neutral well at the

00:23:30,730 --> 00:23:34,270
individual level you can contribute to

00:23:32,680 --> 00:23:35,710
open source projects and you can donate

00:23:34,270 --> 00:23:36,760
to open source foundations or to

00:23:35,710 --> 00:23:39,070
individual maintainer

00:23:36,760 --> 00:23:40,900
but the more important activity isn't

00:23:39,070 --> 00:23:43,780
the individual contribution or donations

00:23:40,900 --> 00:23:45,820
it's to change behaviour talk about your

00:23:43,780 --> 00:23:47,710
pledge to be contributor neutral about

00:23:45,820 --> 00:23:50,290
what you are doing to make that pledge

00:23:47,710 --> 00:23:52,120
tell your suppliers that their

00:23:50,290 --> 00:23:55,090
contributor neutrality is a factor in

00:23:52,120 --> 00:23:56,350
your purchasing decisions this isn't a

00:23:55,090 --> 00:23:58,750
new problem but my hope is that by

00:23:56,350 --> 00:24:00,790
giving this problem a name we can rally

00:23:58,750 --> 00:24:03,040
around that and actually generate change

00:24:00,790 --> 00:24:05,350
to embed decisions about open source

00:24:03,040 --> 00:24:07,210
maintenance in the c-suite of companies

00:24:05,350 --> 00:24:09,040
and with managers not just amongst

00:24:07,210 --> 00:24:11,410
engineers on the ground and to actually

00:24:09,040 --> 00:24:12,730
see businesses give this problem the

00:24:11,410 --> 00:24:14,890
same sort of consideration that they

00:24:12,730 --> 00:24:17,470
give their environmental impact here's

00:24:14,890 --> 00:24:19,780
one vision of a potential future imagine

00:24:17,470 --> 00:24:21,670
if when you signed up for your AWS or

00:24:19,780 --> 00:24:23,710
Azure or Google cloud account you could

00:24:21,670 --> 00:24:25,810
tick a box that says I would like to

00:24:23,710 --> 00:24:27,130
offset my open source use that would

00:24:25,810 --> 00:24:28,750
increase the price of your compute

00:24:27,130 --> 00:24:30,640
instance by some small amount but those

00:24:28,750 --> 00:24:32,350
funds would be directed automatically to

00:24:30,640 --> 00:24:34,300
the PSF with a DSF for whatever other

00:24:32,350 --> 00:24:35,770
organization you nominated or when

00:24:34,300 --> 00:24:37,810
picking a SAS vendor you could check a

00:24:35,770 --> 00:24:39,220
similar box and the vendor would add a

00:24:37,810 --> 00:24:40,900
small charge to your monthly bill or

00:24:39,220 --> 00:24:42,700
better yet not even give you the choice

00:24:40,900 --> 00:24:44,140
and just factor it into the actual cost

00:24:42,700 --> 00:24:46,330
of doing business because they are a

00:24:44,140 --> 00:24:48,280
contributor neutral business this would

00:24:46,330 --> 00:24:49,930
fundamentally change the conversation

00:24:48,280 --> 00:24:51,550
around open source funding rather than

00:24:49,930 --> 00:24:53,430
the PSF and the DSM begging for

00:24:51,550 --> 00:24:55,260
donations the money needed to maintain

00:24:53,430 --> 00:24:57,030
Nathan and Django would be baked into

00:24:55,260 --> 00:24:59,430
the operational cost of people using

00:24:57,030 --> 00:25:01,170
those projects if this idea resonates

00:24:59,430 --> 00:25:02,490
with you I need your help we need to get

00:25:01,170 --> 00:25:04,620
this message out there we need resources

00:25:02,490 --> 00:25:05,850
to show people how to take action tools

00:25:04,620 --> 00:25:07,470
to help people compute what they're a

00:25:05,850 --> 00:25:09,450
computer contributor offset should be

00:25:07,470 --> 00:25:11,100
and content that engineers can use to

00:25:09,450 --> 00:25:12,270
help convince the advantages that their

00:25:11,100 --> 00:25:13,800
companies should become contributing

00:25:12,270 --> 00:25:15,360
neutral if you'd like to help out help

00:25:13,800 --> 00:25:18,630
out with this please come find me and

00:25:15,360 --> 00:25:20,960
have a chat thank you very much Thank

00:25:18,630 --> 00:25:20,960
You Russell

00:25:22,280 --> 00:25:27,470
thank you so I'm gonna be talking about

00:25:24,590 --> 00:25:30,500
leveling up the ORM that's my

00:25:27,470 --> 00:25:32,450
information at the bottom my name and

00:25:30,500 --> 00:25:34,670
the talk can be found on the github page

00:25:32,450 --> 00:25:36,950
both as the HTML here and also as a

00:25:34,670 --> 00:25:39,200
markdown file which is sometimes easier

00:25:36,950 --> 00:25:40,730
to grab code out of if you want to know

00:25:39,200 --> 00:25:42,260
about converting markdown to HTML

00:25:40,730 --> 00:25:44,390
presentations you can ask me about that

00:25:42,260 --> 00:25:46,820
later but right now we'll talk about

00:25:44,390 --> 00:25:49,040
levelling up the ORM and what I mean is

00:25:46,820 --> 00:25:51,500
the ORM provides a lot of low-level

00:25:49,040 --> 00:25:53,150
tools that describe what kind of sequel

00:25:51,500 --> 00:25:55,430
it's going to generate it also provides

00:25:53,150 --> 00:25:56,630
some high-level tools that describe the

00:25:55,430 --> 00:25:58,700
intentions of the code that you're

00:25:56,630 --> 00:26:01,040
writing and as much as we can we like to

00:25:58,700 --> 00:26:03,230
work in the high-level space it often

00:26:01,040 --> 00:26:05,270
generate you wind up with more readable

00:26:03,230 --> 00:26:07,310
and more maintainable code so we need a

00:26:05,270 --> 00:26:08,450
couple examples of low-level things and

00:26:07,310 --> 00:26:10,610
a bunch of high-level stuff that's on

00:26:08,450 --> 00:26:11,930
top of that and hopefully be convinced

00:26:10,610 --> 00:26:14,690
that the high-level stuff is more

00:26:11,930 --> 00:26:16,940
readable more maintainable so we'll

00:26:14,690 --> 00:26:19,850
start with django 1.8 where we get the

00:26:16,940 --> 00:26:21,950
introduction of case when case when is a

00:26:19,850 --> 00:26:23,810
low-level conditional expression it's

00:26:21,950 --> 00:26:26,360
low level because you write case when in

00:26:23,810 --> 00:26:29,000
Python you get case when in the sequel

00:26:26,360 --> 00:26:31,580
it's basically translated exactly and

00:26:29,000 --> 00:26:34,280
what can you do with that for example if

00:26:31,580 --> 00:26:38,690
you have a book model and it's rated by

00:26:34,280 --> 00:26:42,980
your users you can aggregate and count

00:26:38,690 --> 00:26:45,020
the number of 1 2 3 4 5 star ratings

00:26:42,980 --> 00:26:46,640
that your users have using case one like

00:26:45,020 --> 00:26:55,370
this you count the case where the rating

00:26:46,640 --> 00:26:57,500
is 5 and etc in django 2.0 we get to

00:26:55,370 --> 00:26:59,270
filter keyword argument in aggregates so

00:26:57,500 --> 00:27:00,530
instead of using case when we can do the

00:26:59,270 --> 00:27:03,620
same thing by saying we're going to

00:27:00,530 --> 00:27:06,050
count the user rating but filter for a

00:27:03,620 --> 00:27:08,300
particular value this is a higher level

00:27:06,050 --> 00:27:10,520
version of the same thing so instead of

00:27:08,300 --> 00:27:13,370
using case when we use this one it's a

00:27:10,520 --> 00:27:15,260
bit more readable more maintainable also

00:27:13,370 --> 00:27:17,450
it may or may not be implemented with

00:27:15,260 --> 00:27:22,190
case when on the back end and in fact in

00:27:17,450 --> 00:27:24,290
some cases it's not Django 2.2 adds bulk

00:27:22,190 --> 00:27:25,880
update so if you have a loop and you're

00:27:24,290 --> 00:27:27,620
saving each time through the loop you've

00:27:25,880 --> 00:27:29,630
got a database query each time through

00:27:27,620 --> 00:27:31,490
the loop and you're going to have a

00:27:29,630 --> 00:27:33,410
performance issue with your latency to

00:27:31,490 --> 00:27:36,200
the database so instead you want to

00:27:33,410 --> 00:27:39,620
generate a single sequel quick query by

00:27:36,200 --> 00:27:41,299
putting your instances in a list and

00:27:39,620 --> 00:27:43,990
then calling volka update once on the

00:27:41,299 --> 00:27:46,429
list this was introduced in django 2.2

00:27:43,990 --> 00:27:48,470
in reality it's built on top of case

00:27:46,429 --> 00:27:50,419
when so if you're not on django 2.2 yet

00:27:48,470 --> 00:27:53,000
you can do a book update using case when

00:27:50,419 --> 00:27:55,399
this is the basic implementation of that

00:27:53,000 --> 00:27:57,230
and I think it's pretty clear that the

00:27:55,399 --> 00:27:59,899
bulk update is much more readable and

00:27:57,230 --> 00:28:01,970
maintainable than generating all these

00:27:59,899 --> 00:28:04,220
one statements and putting it in a case

00:28:01,970 --> 00:28:06,139
but this is an example of the bulk

00:28:04,220 --> 00:28:08,149
update is a higher level abstraction

00:28:06,139 --> 00:28:11,510
built on top of the lower-level building

00:28:08,149 --> 00:28:13,130
block of case when third-party apps can

00:28:11,510 --> 00:28:15,649
also be built on top of the lower level

00:28:13,130 --> 00:28:18,830
things so you have your your book model

00:28:15,649 --> 00:28:20,510
books are many to many with authors and

00:28:18,830 --> 00:28:22,760
genres and you want to ask a question

00:28:20,510 --> 00:28:24,769
like for each author how many books in

00:28:22,760 --> 00:28:26,750
each genre has that author written this

00:28:24,769 --> 00:28:29,149
abstraction has a name this is a pivot

00:28:26,750 --> 00:28:31,100
table and you can pip install django

00:28:29,149 --> 00:28:33,289
pivot and then simply call the pivot

00:28:31,100 --> 00:28:35,179
function and get your pivot table which

00:28:33,289 --> 00:28:37,340
is a lot simpler than writing a whole

00:28:35,179 --> 00:28:39,289
bunch of case wine statements to try to

00:28:37,340 --> 00:28:41,299
pull that out individually the higher

00:28:39,289 --> 00:28:43,450
level version is more readable more

00:28:41,299 --> 00:28:47,510
maintainable

00:28:43,450 --> 00:28:49,340
djenka 111 we got sub queries and sub

00:28:47,510 --> 00:28:52,370
queries have a remarkable performance

00:28:49,340 --> 00:28:53,570
benefit where I work we've had some

00:28:52,370 --> 00:28:55,010
queries that go from minutes to

00:28:53,570 --> 00:28:56,840
milliseconds by changing all of our

00:28:55,010 --> 00:28:59,299
aggregations to use sub queries instead

00:28:56,840 --> 00:29:04,090
of joints and that's a humongous

00:28:59,299 --> 00:29:06,649
performance benefit for us and in case

00:29:04,090 --> 00:29:08,090
you want more evidence of that here's a

00:29:06,649 --> 00:29:11,659
blog article that says basically the

00:29:08,090 --> 00:29:14,059
same thing using these sub queries can

00:29:11,659 --> 00:29:15,860
be a huge performance benefit but just

00:29:14,059 --> 00:29:18,350
because it's possible doesn't mean it's

00:29:15,860 --> 00:29:20,450
easy this is a ticket in the Django

00:29:18,350 --> 00:29:21,980
ticket tracking system that was added a

00:29:20,450 --> 00:29:24,679
couple of months after the release of

00:29:21,980 --> 00:29:26,179
Jenga 111 that said basically can we

00:29:24,679 --> 00:29:28,610
make these sub queries do aggregations

00:29:26,179 --> 00:29:31,309
in fact it was already possible when the

00:29:28,610 --> 00:29:35,269
ticket was entered it's just not easy at

00:29:31,309 --> 00:29:37,610
all so why is it not easy here's the the

00:29:35,269 --> 00:29:40,279
way to do a count of books for each

00:29:37,610 --> 00:29:42,649
author without sub queries a very simple

00:29:40,279 --> 00:29:45,320
code easy to read here's how to do it

00:29:42,649 --> 00:29:48,019
with sub queries so using the low-level

00:29:45,320 --> 00:29:50,299
abstraction is difficult

00:29:48,019 --> 00:29:51,950
it's a lot of code it's a lot of

00:29:50,299 --> 00:29:53,419
boilerplate I promise every single

00:29:51,950 --> 00:29:56,360
character in there is necessary to make

00:29:53,419 --> 00:29:57,889
it work right we don't want to have to

00:29:56,360 --> 00:29:58,519
do that just to get the same thing we

00:29:57,889 --> 00:30:01,220
had before

00:29:58,519 --> 00:30:02,690
so instead pip install Django sequel

00:30:01,220 --> 00:30:04,610
utils and then you can get the same

00:30:02,690 --> 00:30:06,379
thing this way now we're just expressing

00:30:04,610 --> 00:30:09,379
what we want our book count is a

00:30:06,379 --> 00:30:11,179
sub-query count of books and codes you

00:30:09,379 --> 00:30:13,629
can say with me it's more readable it's

00:30:11,179 --> 00:30:13,629
more maintainable

00:30:19,540 --> 00:30:26,919
[Applause]

00:30:24,490 --> 00:30:32,200
to start what do you call a grizzly bear

00:30:26,919 --> 00:30:35,350
with no teeth I've got me there we can

00:30:32,200 --> 00:30:36,909
only go up from here this is a brief

00:30:35,350 --> 00:30:38,799
presentation about the cognitive

00:30:36,909 --> 00:30:40,990
playbook which was first researched by

00:30:38,799 --> 00:30:42,610
dr. Robert Cadell the goal is to

00:30:40,990 --> 00:30:44,950
introduce this framework which is based

00:30:42,610 --> 00:30:46,629
on the geometries of thinking for

00:30:44,950 --> 00:30:48,549
outline transitions and featuring Ben

00:30:46,629 --> 00:30:53,320
Franklin quotes and pictures of murals

00:30:48,549 --> 00:30:54,789
from Philadelphia my name is jeremy

00:30:53,320 --> 00:30:57,190
Gaines and I'm an employee at the

00:30:54,789 --> 00:30:58,960
University Penn proudly representing

00:30:57,190 --> 00:31:01,450
words at the award-winning research

00:30:58,960 --> 00:31:04,629
platform I'm a Tom Petty fan who does

00:31:01,450 --> 00:31:07,419
web design in that order I have a wife

00:31:04,629 --> 00:31:09,700
two sisters and a cat named aria who is

00:31:07,419 --> 00:31:11,499
a princess lastly I bleed sit

00:31:09,700 --> 00:31:14,350
Philadelphia Sixers blue and will

00:31:11,499 --> 00:31:17,110
forever trust the process onto the show

00:31:14,350 --> 00:31:22,899
the best way to learn something to truly

00:31:17,110 --> 00:31:24,429
grok it is to teach others this semester

00:31:22,899 --> 00:31:25,899
I started going back to school to

00:31:24,429 --> 00:31:28,809
complete my master's degree at the

00:31:25,899 --> 00:31:31,690
University of Penn I'm taking course 642

00:31:28,809 --> 00:31:33,580
a cognitive playbook a cognitive

00:31:31,690 --> 00:31:35,379
playbook enables students to understand

00:31:33,580 --> 00:31:38,110
three fundamental perspectives in

00:31:35,379 --> 00:31:40,179
business strategy creation organization

00:31:38,110 --> 00:31:46,899
organizational design and critical

00:31:40,179 --> 00:31:48,580
thinking to understand these

00:31:46,899 --> 00:31:50,590
perspectives we are introduced to

00:31:48,580 --> 00:31:52,690
cognitive plays the Afra mentioned

00:31:50,590 --> 00:31:55,029
geometries of thinking at its core there

00:31:52,690 --> 00:31:57,190
are four cognitive plays point linear

00:31:55,029 --> 00:31:58,960
angular and triangular point of this

00:31:57,190 --> 00:32:03,330
talk is introduced these cognitive plays

00:31:58,960 --> 00:32:03,330
as they help simplify complex problems

00:32:03,450 --> 00:32:08,200
each cognate play has its time and place

00:32:06,129 --> 00:32:14,499
the next section will look at each one

00:32:08,200 --> 00:32:16,629
in detail point thinking point thinking

00:32:14,499 --> 00:32:17,919
is black or white it is useful for

00:32:16,629 --> 00:32:20,049
establishing essentials and

00:32:17,919 --> 00:32:21,669
demonstrating contrast and strategy

00:32:20,049 --> 00:32:23,799
creation it is key to defining a

00:32:21,669 --> 00:32:25,629
business persona an example is

00:32:23,799 --> 00:32:28,600
establishing an organizational identity

00:32:25,629 --> 00:32:30,190
who we are and what we do sample

00:32:28,600 --> 00:32:34,350
question what is the difference between

00:32:30,190 --> 00:32:34,350
good and bad organizational politics

00:32:37,260 --> 00:32:41,710
linear thinking linear thinking is

00:32:39,940 --> 00:32:43,600
shades of grey' it is useful for

00:32:41,710 --> 00:32:46,030
providing yardsticks and reaching simple

00:32:43,600 --> 00:32:48,429
compromise and strategy creation this is

00:32:46,030 --> 00:32:50,740
key to measuring performance if it isn't

00:32:48,429 --> 00:32:52,419
measured it isn't valued an example is

00:32:50,740 --> 00:32:54,600
at your job how much time is allocated

00:32:52,419 --> 00:32:56,860
the firefighting versus fire prevention

00:32:54,600 --> 00:32:58,600
sample question what are the most

00:32:56,860 --> 00:33:05,020
important criteria in assessing the

00:32:58,600 --> 00:33:07,059
quality of management and why angular

00:33:05,020 --> 00:33:09,370
thinking angular thinking is black and

00:33:07,059 --> 00:33:11,590
white it is useful for making sense of

00:33:09,370 --> 00:33:13,480
issues that reduce the two variables but

00:33:11,590 --> 00:33:16,090
cannot be decompressed into point

00:33:13,480 --> 00:33:18,280
slash linear frames in strategy creation

00:33:16,090 --> 00:33:21,010
this looks at what perplexes us an

00:33:18,280 --> 00:33:23,770
example is the classic 2x2 matrix in

00:33:21,010 --> 00:33:27,309
this case the x axis is me winning and

00:33:23,770 --> 00:33:28,780
the y axis is Kojo winning ideally we

00:33:27,309 --> 00:33:32,200
want to land in the northeast quadrant

00:33:28,780 --> 00:33:34,419
where we both win sample question how

00:33:32,200 --> 00:33:38,490
can a large organization exhibit the

00:33:34,419 --> 00:33:38,490
flexibility of a small organization

00:33:38,789 --> 00:33:43,600
triangular thinking triangular thinking

00:33:41,440 --> 00:33:45,820
is thinking in color it is useful for

00:33:43,600 --> 00:33:48,960
structuring complex problems that span

00:33:45,820 --> 00:33:51,250
strategy technology and organization in

00:33:48,960 --> 00:33:54,760
strategy creation it looks at how we

00:33:51,250 --> 00:33:57,400
compete organize and grow an example is

00:33:54,760 --> 00:33:58,690
Jack and Jill there are only three are

00:33:57,400 --> 00:34:01,240
chiral type of ways that they can

00:33:58,690 --> 00:34:03,850
constructively interact Jack and Jill

00:34:01,240 --> 00:34:07,299
can one each do their own thing and have

00:34:03,850 --> 00:34:10,419
minimal contact autonomy in sports this

00:34:07,299 --> 00:34:13,149
is baseball number two settle on a boss

00:34:10,419 --> 00:34:16,149
slash subordinate arrangement control in

00:34:13,149 --> 00:34:19,240
sports this is football number three

00:34:16,149 --> 00:34:21,520
collaborators peers cooperate in sports

00:34:19,240 --> 00:34:23,589
this is basketball sample question

00:34:21,520 --> 00:34:25,839
technology can be used for any mix of

00:34:23,589 --> 00:34:28,089
the three reasons to increase individual

00:34:25,839 --> 00:34:30,339
capabilities autonomy to increase

00:34:28,089 --> 00:34:32,679
collective capabilities cooperation to

00:34:30,339 --> 00:34:34,780
decrease cost control how does your

00:34:32,679 --> 00:34:39,010
organization balance these uses how

00:34:34,780 --> 00:34:40,780
should it the importance of grasping

00:34:39,010 --> 00:34:42,460
patterns our thinking ie the cognitive

00:34:40,780 --> 00:34:45,369
plays have become increasingly critical

00:34:42,460 --> 00:34:47,520
this approach allows you to decide this

00:34:45,369 --> 00:34:50,050
allow this approach allows you to decode

00:34:47,520 --> 00:34:53,320
complexity by isolating form

00:34:50,050 --> 00:34:54,850
as after mention each cognitive play has

00:34:53,320 --> 00:34:56,470
its time in place the challenges and

00:34:54,850 --> 00:34:57,580
mix-and-match appropriately the purpose

00:34:56,470 --> 00:34:59,350
of this talk is to help simplify

00:34:57,580 --> 00:35:00,730
problems by understanding these

00:34:59,350 --> 00:35:02,110
cognitive strategies you'll be able to

00:35:00,730 --> 00:35:04,420
develop well-balanced solutions to

00:35:02,110 --> 00:35:09,370
complex problems in your life bring it

00:35:04,420 --> 00:35:10,600
home here is my contact info thanks for

00:35:09,370 --> 00:35:12,060
your time please let me know if you have

00:35:10,600 --> 00:35:14,770
any questions comments or concerns

00:35:12,060 --> 00:35:16,720
here's my contact info let me know if

00:35:14,770 --> 00:35:19,060
you want to talk sixers django disc golf

00:35:16,720 --> 00:35:20,380
or yoga thanks again for listening and a

00:35:19,060 --> 00:35:22,630
big thank you to the django con

00:35:20,380 --> 00:35:25,210
organizers take care and have a good day

00:35:22,630 --> 00:35:26,980
lastly too long didn't read you

00:35:25,210 --> 00:35:30,640
triangular thinking to solve complex

00:35:26,980 --> 00:35:34,489
problems well done

00:35:30,640 --> 00:35:34,489
[Applause]

00:35:34,830 --> 00:35:39,310
my name is Dane I'm a lead web

00:35:37,090 --> 00:35:41,770
application developer at Ithaca and we

00:35:39,310 --> 00:35:43,990
make JSTOR org and if you were at my

00:35:41,770 --> 00:35:46,630
talk yesterday you know that JSTOR uses

00:35:43,990 --> 00:35:49,090
a ton of micro-services on the back end

00:35:46,630 --> 00:35:52,030
and then we interact with all those

00:35:49,090 --> 00:35:55,119
services in Python and so we had a bunch

00:35:52,030 --> 00:35:57,130
of code that looked like this so we use

00:35:55,119 --> 00:35:59,109
requests and we need to do service

00:35:57,130 --> 00:36:00,970
location to figure out what hosts that

00:35:59,109 --> 00:36:04,000
service lives at so that we can call one

00:36:00,970 --> 00:36:05,920
of them and then we keep the name of

00:36:04,000 --> 00:36:07,420
that service as well as some of the

00:36:05,920 --> 00:36:08,740
endpoints that we're interested in and

00:36:07,420 --> 00:36:11,260
what kinds of parameters that endpoint

00:36:08,740 --> 00:36:14,830
takes and things and then we would have

00:36:11,260 --> 00:36:16,450
these methods that would sort of put all

00:36:14,830 --> 00:36:19,090
that information together format in the

00:36:16,450 --> 00:36:21,430
information being requested through the

00:36:19,090 --> 00:36:24,580
through the workflow and then ultimately

00:36:21,430 --> 00:36:27,820
call that endpoint and get the data and

00:36:24,580 --> 00:36:29,410
then we had a lot of them that looked

00:36:27,820 --> 00:36:31,000
pretty similar so this one does the same

00:36:29,410 --> 00:36:33,790
thing for a different service at a

00:36:31,000 --> 00:36:36,820
different endpoint and these were kind

00:36:33,790 --> 00:36:40,750
of scattered throughout our code and it

00:36:36,820 --> 00:36:42,490
was a lot so we centralize some of that

00:36:40,750 --> 00:36:44,440
by trying to make some centralized

00:36:42,490 --> 00:36:46,240
configuration for all of those service

00:36:44,440 --> 00:36:48,100
names and endpoints and different ways

00:36:46,240 --> 00:36:50,380
of calling these things but ultimately

00:36:48,100 --> 00:36:52,030
that didn't help a lot either they

00:36:50,380 --> 00:36:54,640
really just fixed this part of the code

00:36:52,030 --> 00:36:58,900
and we still had a lot to deal with and

00:36:54,640 --> 00:37:02,290
we really wanted to be able to do

00:36:58,900 --> 00:37:03,760
something a little more SDK like so if

00:37:02,290 --> 00:37:06,880
you imagine some of the some of the

00:37:03,760 --> 00:37:08,350
popular api's that provide an sdk we

00:37:06,880 --> 00:37:09,640
wanted that kind of experience for all

00:37:08,350 --> 00:37:13,359
of our services but we didn't want to

00:37:09,640 --> 00:37:15,340
build an sdk for all of our services so

00:37:13,359 --> 00:37:17,290
we wanted something SDK like and it

00:37:15,340 --> 00:37:20,770
needed to support streaming and service

00:37:17,290 --> 00:37:23,440
location and timeout specs and stub data

00:37:20,770 --> 00:37:26,609
and a bunch of other things so we built

00:37:23,440 --> 00:37:29,619
something that I'm going to show you and

00:37:26,609 --> 00:37:31,240
I'm gonna use the Pokemon API because

00:37:29,619 --> 00:37:33,460
it's pretty cool if you haven't looked

00:37:31,240 --> 00:37:35,980
at it before you should check it out and

00:37:33,460 --> 00:37:39,400
what we're going to do is build a little

00:37:35,980 --> 00:37:44,830
client for this endpoint and to look at

00:37:39,400 --> 00:37:46,980
Pokemon data so I'm gonna make a virtual

00:37:44,830 --> 00:37:46,980
environment

00:37:50,920 --> 00:38:02,630
and I'm going to install AP iron and

00:37:56,140 --> 00:38:04,220
then I'm going to import service class

00:38:02,630 --> 00:38:08,750
because we're interacting with a service

00:38:04,220 --> 00:38:13,100
and it has a JSON endpoint and so we're

00:38:08,750 --> 00:38:18,970
gonna call this poki API and that is a

00:38:13,100 --> 00:38:22,460
service and it has some domain which is

00:38:18,970 --> 00:38:26,960
okay API

00:38:22,460 --> 00:38:32,240
make sure that's right yep and then it's

00:38:26,960 --> 00:38:41,540
got this endpoint returns JSON and it's

00:38:32,240 --> 00:38:54,200
a path is API v2 Pokemon and that

00:38:41,540 --> 00:39:02,210
pokemon has a name oh I read to find the

00:38:54,200 --> 00:39:03,740
class with the quote okay so then we

00:39:02,210 --> 00:39:06,760
want to get some data for Pokemon so

00:39:03,740 --> 00:39:09,470
we're just going to call pokey API dot

00:39:06,760 --> 00:39:14,210
endpoint shouldn't name to that Pokemon

00:39:09,470 --> 00:39:17,600
and then the name is ditto and we get

00:39:14,210 --> 00:39:20,090
that data back and then if we want to

00:39:17,600 --> 00:39:24,680
maybe look at the sprite for the ditto

00:39:20,090 --> 00:39:29,750
that lives in sprites and then there's

00:39:24,680 --> 00:39:31,940
like a front default right so we can get

00:39:29,750 --> 00:39:36,980
that and go look at what did Oh looks

00:39:31,940 --> 00:39:40,190
like there is glory and then if you want

00:39:36,980 --> 00:39:42,680
you know any any other Pokemon you can

00:39:40,190 --> 00:39:51,950
just change the name you want we'll look

00:39:42,680 --> 00:39:53,630
at tree oh there's that one and so the

00:39:51,950 --> 00:39:55,340
thing is basically requests under the

00:39:53,630 --> 00:39:57,770
hood but gives you this kind of SDK like

00:39:55,340 --> 00:39:59,780
experience and you can specify which

00:39:57,770 --> 00:40:01,910
parameters are required for a particular

00:39:59,780 --> 00:40:03,470
our endpoint what the default values can

00:40:01,910 --> 00:40:05,030
be for that you can change the default

00:40:03,470 --> 00:40:07,090
method to you so you don't have to

00:40:05,030 --> 00:40:09,800
always specify method equals post or do

00:40:07,090 --> 00:40:13,700
request dot post so you get this very

00:40:09,800 --> 00:40:14,720
sort of native pythonic experience so

00:40:13,700 --> 00:40:17,630
it's on github

00:40:14,720 --> 00:40:19,280
it's on read the docs so we're not

00:40:17,630 --> 00:40:22,220
sprinting on this but we've had a couple

00:40:19,280 --> 00:40:23,840
people here contribute to it before and

00:40:22,220 --> 00:40:27,160
we'd love you to use it and tell us how

00:40:23,840 --> 00:40:27,160
we can make it better thanks

00:40:27,460 --> 00:40:31,309
[Applause]

00:40:36,010 --> 00:40:44,480
try to speed through this oh thank you

00:40:40,359 --> 00:40:47,390
so I work for a company called 15-5 we

00:40:44,480 --> 00:40:49,390
do employee feedback software and we

00:40:47,390 --> 00:40:53,470
used Ingham as you can probably guess

00:40:49,390 --> 00:40:55,460
and Django admin is great I love it but

00:40:53,470 --> 00:41:00,140
unfortunately when your product is

00:40:55,460 --> 00:41:02,119
really good 55 it you got a lot of

00:41:00,140 --> 00:41:04,820
customers that means like millions of

00:41:02,119 --> 00:41:08,570
rows and your tables and searches can be

00:41:04,820 --> 00:41:11,480
really really really slow so what if

00:41:08,570 --> 00:41:13,250
there was a library you could easily put

00:41:11,480 --> 00:41:15,619
into your application now it speed up to

00:41:13,250 --> 00:41:18,050
your searches and make the searches

00:41:15,619 --> 00:41:20,840
better and there is that's why I'm here

00:41:18,050 --> 00:41:23,390
it's called Django QL you can look it up

00:41:20,840 --> 00:41:24,830
and it's there's a pretty good

00:41:23,390 --> 00:41:28,400
documentation on it there is a video

00:41:24,830 --> 00:41:31,340
which I'm not going to show you and you

00:41:28,400 --> 00:41:33,560
can extend it it's really easy to add in

00:41:31,340 --> 00:41:35,240
I did it like I'm a single day.this like

00:41:33,560 --> 00:41:37,160
it's a really simple commit that's like

00:41:35,240 --> 00:41:39,170
half the work right there you just

00:41:37,160 --> 00:41:42,080
import Django ql search mix in and

00:41:39,170 --> 00:41:44,150
create your ridiculous simple class

00:41:42,080 --> 00:41:47,990
couldn't be simpler and you add it in

00:41:44,150 --> 00:41:50,210
that's it what does this look like well

00:41:47,990 --> 00:41:52,220
there's a little checkbox right here to

00:41:50,210 --> 00:41:54,349
the left you click on that and then you

00:41:52,220 --> 00:41:57,349
can search based on specific fields or

00:41:54,349 --> 00:42:00,710
tables so for example I can search

00:41:57,349 --> 00:42:03,050
search info and then look on the info

00:42:00,710 --> 00:42:04,880
table get the companies with a current

00:42:03,050 --> 00:42:07,670
size of I have all these boolean

00:42:04,880 --> 00:42:14,750
operators greater than less equal to in

00:42:07,670 --> 00:42:15,920
I want greater than a thousand so

00:42:14,750 --> 00:42:18,500
because I'm searching on a specific

00:42:15,920 --> 00:42:19,460
field it's a very fast versus like let's

00:42:18,500 --> 00:42:21,020
say if you have multiple fields

00:42:19,460 --> 00:42:23,839
configured that could be pretty slow

00:42:21,020 --> 00:42:27,589
doing a general search I can see that

00:42:23,839 --> 00:42:29,420
the RB qmj B Company is pretty popular

00:42:27,589 --> 00:42:31,430
they're one of the larger companies I'm

00:42:29,420 --> 00:42:36,380
sure you're here to them make all the

00:42:31,430 --> 00:42:38,210
food bars in the world and yeah if you

00:42:36,380 --> 00:42:40,790
look in the issues for performance you

00:42:38,210 --> 00:42:43,310
can see like I have a comment here for

00:42:40,790 --> 00:42:45,020
tables with a million rows it can like

00:42:43,310 --> 00:42:46,180
greatly speed up performance and for a

00:42:45,020 --> 00:42:48,430
hundred thousand rows you

00:42:46,180 --> 00:42:50,350
also see some performance benefit but of

00:42:48,430 --> 00:42:53,500
course it depends on your exact

00:42:50,350 --> 00:42:56,050
environment and configuration so yeah

00:42:53,500 --> 00:42:59,890
Gengo ql look it up use it really simple

00:42:56,050 --> 00:43:02,880
to add I like it and I think we're all

00:42:59,890 --> 00:43:05,810
hungry so I'm going to end the talk here

00:43:02,880 --> 00:43:19,099
[Applause]

00:43:05,810 --> 00:43:19,099

YouTube URL: https://www.youtube.com/watch?v=5j9JIUuA_cM


