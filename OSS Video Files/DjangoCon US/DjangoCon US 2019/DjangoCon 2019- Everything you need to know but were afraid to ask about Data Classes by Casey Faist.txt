Title: DjangoCon 2019- Everything you need to know but were afraid to ask about Data Classes by Casey Faist
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Everything you need to know but were afraid to ask about Data Classes by Casey Faist

You know you're curious. How are data classes different from other Python classes? Why can't I just use a dictionary? How do I even use these in my existing applications? Come on a cross-language comparative journey to discover just what are, and how best to use, Python 3.7's classiest new feature.

This talk was presented at: https://2019.djangocon.us/talks/everything-you-need-to-know-but-were-to/

LINKS:
Follow Casey Faist ðŸ‘‡
On Twitter: https://twitter.com/cfactoid
Official homepage: https://heroku.com/python

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,320 --> 00:00:20,390
so Oh quick it me Casey faced first of

00:00:19,820 --> 00:00:23,750
her name

00:00:20,390 --> 00:00:26,150
mother sinks at Heroku you have

00:00:23,750 --> 00:00:27,230
questions compliments or complaints

00:00:26,150 --> 00:00:30,619
about deploying to Heroku

00:00:27,230 --> 00:00:33,379
I am all yours come and find me another

00:00:30,619 --> 00:00:36,110
pastime is making friends with designers

00:00:33,379 --> 00:00:39,260
and conning them into making the most

00:00:36,110 --> 00:00:40,760
adorable snake logos so I'm open to

00:00:39,260 --> 00:00:48,739
questions on both of these subjects

00:00:40,760 --> 00:00:50,360
after the talk ok this talk is labeled

00:00:48,739 --> 00:00:54,049
everything you want to know but we're

00:00:50,360 --> 00:00:56,180
afraid tasks about data classes so I'm

00:00:54,049 --> 00:00:57,890
gonna set the scene we're gonna go on a

00:00:56,180 --> 00:01:01,339
little journey together to build the

00:00:57,890 --> 00:01:04,729
empathy for what exactly that means so

00:01:01,339 --> 00:01:06,470
you're at your local Python meetup you

00:01:04,729 --> 00:01:09,229
have pizza you're sitting there

00:01:06,470 --> 00:01:11,390
listening to a talk or a lightning talk

00:01:09,229 --> 00:01:16,939
or working on a project and somebody

00:01:11,390 --> 00:01:17,420
rolls up to you the classes they say in

00:01:16,939 --> 00:01:18,829
class

00:01:17,420 --> 00:01:20,600
somebody else comes over and it's like

00:01:18,829 --> 00:01:23,539
oh they're awesome have you used them

00:01:20,600 --> 00:01:24,979
have you tried them and if you're

00:01:23,539 --> 00:01:26,390
anything like me at this point in the

00:01:24,979 --> 00:01:28,039
story you have like this piece of pizza

00:01:26,390 --> 00:01:35,359
is hanging out of your mouth you're like

00:01:28,039 --> 00:01:37,579
huh what data classes are what I've seen

00:01:35,359 --> 00:01:40,909
at meetups and kind of in talking to

00:01:37,579 --> 00:01:43,070
people there they're not a complicated

00:01:40,909 --> 00:01:45,979
feature they're not that they're not a

00:01:43,070 --> 00:01:47,780
complex feature but they're difficult to

00:01:45,979 --> 00:01:50,780
wrap your head around without the proper

00:01:47,780 --> 00:01:51,649
context like what are they for you know

00:01:50,780 --> 00:01:55,340
where did they come from

00:01:51,649 --> 00:01:57,950
why is it a class is it what are we what

00:01:55,340 --> 00:01:59,479
are we dealing with here um and I don't

00:01:57,950 --> 00:02:05,829
think I was the only one who kind of

00:01:59,479 --> 00:02:10,399
noticed or felt little surprised

00:02:05,829 --> 00:02:15,830
by these so let's kind of unwrap the

00:02:10,399 --> 00:02:18,140
unwrap the story a little bit at this

00:02:15,830 --> 00:02:19,880
stage you're at the perfect step for

00:02:18,140 --> 00:02:21,950
your journey towards data class

00:02:19,880 --> 00:02:23,769
knowledge because we now have recognized

00:02:21,950 --> 00:02:29,540
that we don't know what they are

00:02:23,769 --> 00:02:32,120
excellent first step so with a subject

00:02:29,540 --> 00:02:33,920
like this they're all the Python

00:02:32,120 --> 00:02:37,010
features that roll up they have peps

00:02:33,920 --> 00:02:38,450
they have blog posts they have contexts

00:02:37,010 --> 00:02:40,670
and Twitter discussions in all of this

00:02:38,450 --> 00:02:42,350
content and kind of sifting through how

00:02:40,670 --> 00:02:43,610
do you sift through what do you what are

00:02:42,350 --> 00:02:48,140
you looking for to kind of get that

00:02:43,610 --> 00:02:50,120
context for me when I tried to do this

00:02:48,140 --> 00:02:53,060
it always starts with somebody had a

00:02:50,120 --> 00:02:55,069
question or a pain point somebody needed

00:02:53,060 --> 00:02:55,310
something and that's where this came

00:02:55,069 --> 00:02:59,900
from

00:02:55,310 --> 00:03:01,760
so after a little bit of digging I ended

00:02:59,900 --> 00:03:03,709
up finding a Stack Overflow post

00:03:01,760 --> 00:03:08,900
surprise surprise

00:03:03,709 --> 00:03:10,760
that's four years old go 400k views it's

00:03:08,900 --> 00:03:12,680
been going on for years there's just

00:03:10,760 --> 00:03:15,799
tons of content and the question is this

00:03:12,680 --> 00:03:21,070
is there a way to conveniently define

00:03:15,799 --> 00:03:23,780
see like structures in Python that's it

00:03:21,070 --> 00:03:26,510
the field type has been available since

00:03:23,780 --> 00:03:28,670
Python to seven but this discussion went

00:03:26,510 --> 00:03:30,859
on to talk about all the weird and kind

00:03:28,670 --> 00:03:34,280
of wonky and just not quite right ways

00:03:30,859 --> 00:03:36,230
that people have solved this problem in

00:03:34,280 --> 00:03:38,870
the past

00:03:36,230 --> 00:03:40,220
my experience with C is somewhat limited

00:03:38,870 --> 00:03:42,260
but looking at this thread is really

00:03:40,220 --> 00:03:44,269
informative for me as a Python developer

00:03:42,260 --> 00:03:47,840
trying to wrap my head around what this

00:03:44,269 --> 00:03:49,880
new feature is previously the named

00:03:47,840 --> 00:03:52,670
tuple was considered one of the the best

00:03:49,880 --> 00:03:55,730
ways to address this specific need or a

00:03:52,670 --> 00:03:59,799
good way I know we only have one way of

00:03:55,730 --> 00:04:02,299
doing things in Python but this is not

00:03:59,799 --> 00:04:04,250
not the only thing you could want it's a

00:04:02,299 --> 00:04:07,190
little bit inflexible it's immutable

00:04:04,250 --> 00:04:10,340
there are different different needs you

00:04:07,190 --> 00:04:16,010
could have of a data store like a C

00:04:10,340 --> 00:04:18,650
struct and when this post back last

00:04:16,010 --> 00:04:21,320
October as of last October is

00:04:18,650 --> 00:04:24,020
was updated with hey this is the answer

00:04:21,320 --> 00:04:27,650
you're looking for a C struct in Python

00:04:24,020 --> 00:04:29,990
a data class is that it provides you

00:04:27,650 --> 00:04:33,289
flexibility it syncs with the typing

00:04:29,990 --> 00:04:34,639
module it plays nicely with a lot of the

00:04:33,289 --> 00:04:38,930
new features kind of rolling out around

00:04:34,639 --> 00:04:44,110
attributions and all that stuff so try

00:04:38,930 --> 00:04:44,110
this one okay some context

00:04:48,470 --> 00:04:54,890
is there more I don't have the C

00:04:52,970 --> 00:04:59,560
background so that wasn't quite enough

00:04:54,890 --> 00:04:59,560
for me to sink my teeth into this

00:05:04,860 --> 00:05:09,949
indeed there are more layers to this

00:05:07,590 --> 00:05:09,949
problem

00:05:10,610 --> 00:05:16,620
there's another thing that was discussed

00:05:14,310 --> 00:05:19,349
as part of the part of the data classes

00:05:16,620 --> 00:05:20,159
release was wanting Java Script dot

00:05:19,349 --> 00:05:25,050
notation

00:05:20,159 --> 00:05:27,629
you know blasphemy but right now if you

00:05:25,050 --> 00:05:29,430
want to use a dictionary you want to

00:05:27,629 --> 00:05:31,050
sign something you create your

00:05:29,430 --> 00:05:35,430
dictionary then you have to use this

00:05:31,050 --> 00:05:37,949
bracket quote syntax right if you are

00:05:35,430 --> 00:05:41,159
familiar or views pandas you know that

00:05:37,949 --> 00:05:43,050
they kind of do some magic to get around

00:05:41,159 --> 00:05:47,759
this and use dot notation that's kind of

00:05:43,050 --> 00:05:51,240
nice just like a nice to have write the

00:05:47,759 --> 00:05:55,250
equivalent in JavaScript I know she'll

00:05:51,240 --> 00:05:59,159
hurt your eyes if necessary you get that

00:05:55,250 --> 00:06:01,919
object dot cat gives you directly what

00:05:59,159 --> 00:06:08,159
you need it's just nice we can have nice

00:06:01,919 --> 00:06:10,819
things right another important piece of

00:06:08,159 --> 00:06:13,860
context and the closest down this chain

00:06:10,819 --> 00:06:17,279
is the adders project who's familiar

00:06:13,860 --> 00:06:19,409
with the outers project cool all right

00:06:17,279 --> 00:06:21,990
this is means I can share something

00:06:19,409 --> 00:06:27,449
exciting that's awesome so the outers

00:06:21,990 --> 00:06:29,729
project provides a way to boilerplate

00:06:27,449 --> 00:06:32,190
your classes do you have a regular old

00:06:29,729 --> 00:06:36,289
class you've defined it and you would

00:06:32,190 --> 00:06:39,599
like some boilerplate around quality or

00:06:36,289 --> 00:06:43,789
hashing or X number of things dunder

00:06:39,599 --> 00:06:46,159
boiler plating essentially and I

00:06:43,789 --> 00:06:51,050
actually found when I looked at their

00:06:46,159 --> 00:06:55,259
documentation they have a really good

00:06:51,050 --> 00:06:57,389
discussion on the why not page of that

00:06:55,259 --> 00:06:59,340
website so you're interested go there

00:06:57,389 --> 00:07:02,159
and they actually talk about like why

00:06:59,340 --> 00:07:05,659
would you not use a tuple or a named

00:07:02,159 --> 00:07:08,580
tuple instead of the adder project and

00:07:05,659 --> 00:07:10,379
because data classes are based on the

00:07:08,580 --> 00:07:14,550
implementation is based on the outers

00:07:10,379 --> 00:07:16,500
project the reasoning kind of transfers

00:07:14,550 --> 00:07:18,330
so why would you use a data class

00:07:16,500 --> 00:07:22,050
instead of a name tuple

00:07:18,330 --> 00:07:24,930
reasons are readability sharing code the

00:07:22,050 --> 00:07:33,870
clarities explicitness so if you're

00:07:24,930 --> 00:07:35,520
curious about that go check it out the

00:07:33,870 --> 00:07:37,710
first time I gave this talk I realized

00:07:35,520 --> 00:07:39,810
that I didn't actually describe what I'd

00:07:37,710 --> 00:07:42,210
under method is even though this is a

00:07:39,810 --> 00:07:45,000
central point to what a data classes

00:07:42,210 --> 00:07:47,219
giving to you and I wanted to take step

00:07:45,000 --> 00:07:52,919
back and like clarify this so add under

00:07:47,219 --> 00:07:55,560
method is and I didn't hear it

00:07:52,919 --> 00:07:59,909
pronounced out loud until far too late

00:07:55,560 --> 00:08:03,150
so it is dunder which is very fun you

00:07:59,909 --> 00:08:06,690
have a method that is on top of a class

00:08:03,150 --> 00:08:09,750
and you have two underscores so if you

00:08:06,690 --> 00:08:11,340
ever write if name equals main with the

00:08:09,750 --> 00:08:14,460
two underscores on each side those are

00:08:11,340 --> 00:08:16,710
done durs and what done der's do in

00:08:14,460 --> 00:08:21,000
python very high level where this is not

00:08:16,710 --> 00:08:23,490
a dunder stock but they provide some of

00:08:21,000 --> 00:08:26,180
that magic that lets us type at a high

00:08:23,490 --> 00:08:28,710
level and get compiled down to C and

00:08:26,180 --> 00:08:30,690
massive errors do not occur like it

00:08:28,710 --> 00:08:32,820
knows roughly what to do if you try to

00:08:30,690 --> 00:08:37,050
compare if you try to concatenate for

00:08:32,820 --> 00:08:40,019
example a string and an integer and

00:08:37,050 --> 00:08:41,370
we'll know to make them both strings and

00:08:40,019 --> 00:08:43,740
put them together and give you a new

00:08:41,370 --> 00:08:46,230
string back with what would be that int

00:08:43,740 --> 00:08:50,459
right that happens because of dunder

00:08:46,230 --> 00:08:52,589
magic it's a deep dive but it's

00:08:50,459 --> 00:08:57,480
important for this because in some cases

00:08:52,589 --> 00:08:58,949
you end up writing if you hit these

00:08:57,480 --> 00:09:01,260
specific bugs that we're going to talk

00:08:58,949 --> 00:09:04,040
about you hit them and they're very

00:09:01,260 --> 00:09:07,709
frustrating and they're small but oh

00:09:04,040 --> 00:09:12,810
they're just there it could be better

00:09:07,709 --> 00:09:18,149
and now it can be very easily oh just an

00:09:12,810 --> 00:09:19,769
example name equal rapper those equal

00:09:18,149 --> 00:09:25,410
and rapper are going to be important

00:09:19,769 --> 00:09:27,300
here in a second okay so we've gone

00:09:25,410 --> 00:09:29,640
through some layers we've just a little

00:09:27,300 --> 00:09:31,290
bit of context on where this has come at

00:09:29,640 --> 00:09:35,610
us from

00:09:31,290 --> 00:09:37,560
now let's put it together why why not

00:09:35,610 --> 00:09:39,570
the other tools in our current Python

00:09:37,560 --> 00:09:42,360
toolkit what does this add to our

00:09:39,570 --> 00:09:45,530
current set this is all cool but what is

00:09:42,360 --> 00:09:45,530
that what does it do for us

00:09:51,460 --> 00:10:00,279
before data classes an example so I

00:09:56,760 --> 00:10:03,700
would like to make a wallet I'd like to

00:10:00,279 --> 00:10:05,110
make a class wallet and I needed to do a

00:10:03,700 --> 00:10:09,730
few things things that you would expect

00:10:05,110 --> 00:10:13,630
a wallet to be able to do I want it to

00:10:09,730 --> 00:10:15,910
be a class so it can inherit it can use

00:10:13,630 --> 00:10:17,380
any kind of special class things that I

00:10:15,910 --> 00:10:22,300
need to do

00:10:17,380 --> 00:10:25,000
it contains coins it has qualities that

00:10:22,300 --> 00:10:27,190
like likely won't change and it has a

00:10:25,000 --> 00:10:29,050
total amount I would like my wallet my

00:10:27,190 --> 00:10:35,010
very special wallet to tell me exactly

00:10:29,050 --> 00:10:37,029
how much money is in it I want time so

00:10:35,010 --> 00:10:42,070
let's write this what would this look

00:10:37,029 --> 00:10:44,410
like as a class starting off kind of

00:10:42,070 --> 00:10:46,930
checks out you need to define an

00:10:44,410 --> 00:10:49,930
initialization you need to set all of

00:10:46,930 --> 00:10:52,330
these attributes on your class and then

00:10:49,930 --> 00:10:54,670
we have a custom function for the amount

00:10:52,330 --> 00:10:56,589
in the wallet and that is just it's a

00:10:54,670 --> 00:10:59,260
long line but it's just nickels times

00:10:56,589 --> 00:11:02,800
five dimes times ten pennies times 1

00:10:59,260 --> 00:11:07,120
because explicit and then divided by 100

00:11:02,800 --> 00:11:09,459
because dollars not cents so this is

00:11:07,120 --> 00:11:15,760
where you might start but after a while

00:11:09,459 --> 00:11:19,180
you might hit some problems for example

00:11:15,760 --> 00:11:21,459
if you are working with a class and you

00:11:19,180 --> 00:11:23,950
want to be able to compare wallets so

00:11:21,459 --> 00:11:25,990
you have Casey's wallet over here and

00:11:23,950 --> 00:11:27,700
Veronica's wallet over here you'd like

00:11:25,990 --> 00:11:29,410
to be able to compare do they have the

00:11:27,700 --> 00:11:33,730
same number of dimes they have same

00:11:29,410 --> 00:11:36,459
number of pennies it is occasionally

00:11:33,730 --> 00:11:38,529
helpful because of hashing we'll get to

00:11:36,459 --> 00:11:40,540
this in a second to actually define your

00:11:38,529 --> 00:11:43,480
own equals this is another one of those

00:11:40,540 --> 00:11:45,910
magic classes and Python allows you to

00:11:43,480 --> 00:11:49,240
reach down and make your own magic under

00:11:45,910 --> 00:11:50,380
methods that enforce a specific way for

00:11:49,240 --> 00:11:52,209
this to happen

00:11:50,380 --> 00:11:58,140
and essentially what this does it allows

00:11:52,209 --> 00:12:01,150
you to say my wallet dot nickels is

00:11:58,140 --> 00:12:03,760
other wallet dot nickels and it'll give

00:12:01,150 --> 00:12:06,540
you a boolean in return hey that's

00:12:03,760 --> 00:12:10,740
allowing that to happen

00:12:06,540 --> 00:12:15,550
it's a little bit tricky though because

00:12:10,740 --> 00:12:18,720
remember this is mutable named tuples

00:12:15,550 --> 00:12:21,160
using a tuple for this is immutable and

00:12:18,720 --> 00:12:24,339
because it's mutable our hash could

00:12:21,160 --> 00:12:27,520
potentially change so our equals can get

00:12:24,339 --> 00:12:29,980
wonky this can lead to variables that

00:12:27,520 --> 00:12:31,209
look the same but are not because

00:12:29,980 --> 00:12:35,010
they're pointers aren't in in different

00:12:31,209 --> 00:12:37,959
locations your hash is an integer so

00:12:35,010 --> 00:12:40,120
because of that you might find that's in

00:12:37,959 --> 00:12:41,890
it's necessary for this class to enforce

00:12:40,120 --> 00:12:43,779
this behavior you keep hitting this bug

00:12:41,890 --> 00:12:46,149
with a specific part of your API over

00:12:43,779 --> 00:12:53,380
here and you just need it to behave

00:12:46,149 --> 00:12:55,990
reliably so let's add that and then also

00:12:53,380 --> 00:13:03,060
I the text is getting small I apologize

00:12:55,990 --> 00:13:05,050
but when you call the values of your

00:13:03,060 --> 00:13:06,160
you're trying to print one of your

00:13:05,050 --> 00:13:10,050
values so you want to know how many

00:13:06,160 --> 00:13:12,730
pennies are in your wallet there is

00:13:10,050 --> 00:13:14,770
behavior with the wrapper function not

00:13:12,730 --> 00:13:16,500
the dunder wrapper but the regular repre

00:13:14,770 --> 00:13:20,620
function where it will give you back

00:13:16,500 --> 00:13:22,360
double quotes so you'll get one for

00:13:20,620 --> 00:13:24,910
pennies say we have one penny in our

00:13:22,360 --> 00:13:27,579
wallet you'll get quotes and then double

00:13:24,910 --> 00:13:29,230
quotes and for parsing this is kind of

00:13:27,579 --> 00:13:31,240
annoying it's not the end of the world

00:13:29,230 --> 00:13:32,920
but you'll find yourself across your

00:13:31,240 --> 00:13:35,140
code base just like countering for that

00:13:32,920 --> 00:13:37,390
so say you want to cut it off at the

00:13:35,140 --> 00:13:41,320
source and you define your own

00:13:37,390 --> 00:13:44,200
overriding dunder repre method these are

00:13:41,320 --> 00:13:46,300
niceties we just went through a lot of

00:13:44,200 --> 00:13:51,370
work for like things that are just kind

00:13:46,300 --> 00:13:56,070
of nice and just kind of you know nice

00:13:51,370 --> 00:13:56,070
to have them like nice to use

00:14:00,160 --> 00:14:08,140
after cpython classes so this is the pep

00:14:05,920 --> 00:14:09,850
and I'm bringing this up just because I

00:14:08,140 --> 00:14:12,820
found it really helpful actually when

00:14:09,850 --> 00:14:17,860
when going through this there's a lot of

00:14:12,820 --> 00:14:21,900
text up there but the key points are the

00:14:17,860 --> 00:14:25,150
mutable name tuple with defaults you

00:14:21,900 --> 00:14:27,220
create a data class the same way you'd

00:14:25,150 --> 00:14:30,100
create a regular class and add a

00:14:27,220 --> 00:14:33,330
decorator this decorator it's really

00:14:30,100 --> 00:14:36,130
called just at data classes provides

00:14:33,330 --> 00:14:38,590
generated auto-generated methods so

00:14:36,130 --> 00:14:42,790
that's code you don't have to write it

00:14:38,590 --> 00:14:44,230
initializes your class for you it over

00:14:42,790 --> 00:14:48,130
writes that wrapper so you'll get

00:14:44,230 --> 00:14:49,870
printed lovely strings out and you can

00:14:48,130 --> 00:14:51,640
use that dot notation more effectively

00:14:49,870 --> 00:14:54,700
and you automatically get those

00:14:51,640 --> 00:14:56,500
comparison methods and optionally more

00:14:54,700 --> 00:14:58,570
you can optionally freeze your data

00:14:56,500 --> 00:15:00,280
class and make it immutable you know

00:14:58,570 --> 00:15:02,530
optionally there's there's a lot

00:15:00,280 --> 00:15:05,440
actually of different options you can

00:15:02,530 --> 00:15:14,500
pass in in that data classes parameters

00:15:05,440 --> 00:15:18,010
list taking a big step back a normal

00:15:14,500 --> 00:15:20,050
tuple looks like this you use the

00:15:18,010 --> 00:15:22,530
parentheses and then you get something

00:15:20,050 --> 00:15:24,970
that you can reference by index

00:15:22,530 --> 00:15:27,580
immutable except when it's not as

00:15:24,970 --> 00:15:33,730
discussed by owl Swaggart another talk I

00:15:27,580 --> 00:15:36,160
recommend a named tuple kind of similar

00:15:33,730 --> 00:15:38,860
to what we're functionally the shape of

00:15:36,160 --> 00:15:42,640
it is somewhat similar you can create a

00:15:38,860 --> 00:15:44,380
named tuple called wallet you can give

00:15:42,640 --> 00:15:46,030
it a name which is that first parameter

00:15:44,380 --> 00:15:49,810
and then you can tell it that it has

00:15:46,030 --> 00:15:52,510
named categories within that tuple and

00:15:49,810 --> 00:15:54,220
then when you use the wallet kind

00:15:52,510 --> 00:15:57,490
because it's an inheritance pattern here

00:15:54,220 --> 00:15:59,530
you get a my purse and you can set dimes

00:15:57,490 --> 00:16:03,040
and you can see that that's three so

00:15:59,530 --> 00:16:06,610
that gives you that dot notation and the

00:16:03,040 --> 00:16:08,080
categories and it's simpler it's it's a

00:16:06,610 --> 00:16:10,810
simpler way to kind of get at that

00:16:08,080 --> 00:16:12,280
function right and there are some

00:16:10,810 --> 00:16:13,449
defaults that allow you to kind of play

00:16:12,280 --> 00:16:14,829
with what the the name

00:16:13,449 --> 00:16:16,689
people can do for you there are a lot of

00:16:14,829 --> 00:16:18,879
cases where this is the right choice but

00:16:16,689 --> 00:16:22,600
you need more flexibility you need more

00:16:18,879 --> 00:16:26,859
control you needed to be explicit then

00:16:22,600 --> 00:16:30,009
there are data classes so let's let's

00:16:26,859 --> 00:16:32,439
make one make a data class here we start

00:16:30,009 --> 00:16:36,309
same way we'd start any class definition

00:16:32,439 --> 00:16:39,299
with class my wallet my generic

00:16:36,309 --> 00:16:45,369
container so we can inherit and

00:16:39,299 --> 00:16:50,009
docstrings describe my class the next

00:16:45,369 --> 00:16:56,529
step you add that data class decorator

00:16:50,009 --> 00:16:58,959
men you can give it directly what your

00:16:56,529 --> 00:17:01,779
fields are going to be data classes we

00:16:58,959 --> 00:17:03,730
call these attributes fields well you'll

00:17:01,779 --> 00:17:05,409
see in a little bit they expand to have

00:17:03,730 --> 00:17:11,010
their own kind of special data class

00:17:05,409 --> 00:17:13,839
fields category and you can use the

00:17:11,010 --> 00:17:16,709
class attributes function app truths and

00:17:13,839 --> 00:17:21,569
the type in it a little little little

00:17:16,709 --> 00:17:29,309
attributes from the get-go much quicker

00:17:21,569 --> 00:17:33,580
we have initiated our class done next

00:17:29,309 --> 00:17:35,980
I'd like that custom function so we're

00:17:33,580 --> 00:17:37,799
gonna define the mountain wallet it's

00:17:35,980 --> 00:17:41,130
the same function we just stick it in

00:17:37,799 --> 00:17:41,130
completely valid

00:17:46,539 --> 00:17:52,840
this is actually available in 3:6 as

00:17:49,630 --> 00:17:54,970
well getting back for it using from data

00:17:52,840 --> 00:17:58,480
classes import data class it's in

00:17:54,970 --> 00:18:03,220
standard Lib from 3/7 on so if you're

00:17:58,480 --> 00:18:11,169
pre 3/7 this is what you'll need to do

00:18:03,220 --> 00:18:12,460
and it'll work exactly the same now one

00:18:11,169 --> 00:18:14,500
thing that the standard library does not

00:18:12,460 --> 00:18:17,530
provide as a way to look at what this

00:18:14,500 --> 00:18:18,880
generates but there is a handy package

00:18:17,530 --> 00:18:20,380
that will if you start playing around

00:18:18,880 --> 00:18:22,210
with data classes and you're like what

00:18:20,380 --> 00:18:23,530
is this generating on the back end what

00:18:22,210 --> 00:18:30,539
is the code actually going to run

00:18:23,530 --> 00:18:34,030
there's a package by dan la Altoona and

00:18:30,539 --> 00:18:36,909
this package will take your data class

00:18:34,030 --> 00:18:39,520
and inspect it and print out the code

00:18:36,909 --> 00:18:42,400
that it's generating on your behalf that

00:18:39,520 --> 00:18:48,010
you don't have to think about and I

00:18:42,400 --> 00:18:53,200
apologize for this next slide but it's a

00:18:48,010 --> 00:18:56,919
lot look at all this code we didn't have

00:18:53,200 --> 00:18:59,919
to right look at this we have our

00:18:56,919 --> 00:19:02,530
cleaned up wrapper we have equals we can

00:18:59,919 --> 00:19:06,539
optionally have greater than less than

00:19:02,530 --> 00:19:06,539
equal to all those other comparisons

00:19:06,809 --> 00:19:11,710
it's this is a lot of work done for us

00:19:09,970 --> 00:19:14,640
this is nice this is nice thing we have

00:19:11,710 --> 00:19:14,640
a nice thing here

00:19:18,050 --> 00:19:23,440
there are always some gotchas and this

00:19:20,780 --> 00:19:23,440
is no exception

00:19:24,280 --> 00:19:29,120
inheritance is just a little bit

00:19:27,200 --> 00:19:30,320
different than you might expect so if

00:19:29,120 --> 00:19:32,180
you're going through you're making data

00:19:30,320 --> 00:19:35,560
classes and you have data classes

00:19:32,180 --> 00:19:38,420
inheriting from indeed from data classes

00:19:35,560 --> 00:19:40,370
it might be just a little bit different

00:19:38,420 --> 00:19:42,740
this is from the abstract but to

00:19:40,370 --> 00:19:46,100
highlight it starts at your target

00:19:42,740 --> 00:19:48,770
object and it goes backwards and the way

00:19:46,100 --> 00:19:52,670
that it inherits the different fields

00:19:48,770 --> 00:19:57,980
these attributes for your classes it

00:19:52,670 --> 00:19:59,990
will overwrite with the newest yes it'll

00:19:57,980 --> 00:20:04,880
override the base class fields which may

00:19:59,990 --> 00:20:07,910
or may not be what you want you wear in

00:20:04,880 --> 00:20:09,470
most cases that's it's not going to you

00:20:07,910 --> 00:20:11,630
know it's it's an edge case thing to

00:20:09,470 --> 00:20:16,490
remember if you start seeing seeing

00:20:11,630 --> 00:20:18,650
something weird this is an example of

00:20:16,490 --> 00:20:20,660
that behavior this is directly from the

00:20:18,650 --> 00:20:23,060
path you can go I just reformatted it so

00:20:20,660 --> 00:20:28,070
it was obviously easier to see with a

00:20:23,060 --> 00:20:32,180
bit dark background but essentially it

00:20:28,070 --> 00:20:37,060
will overwrite that later integers if

00:20:32,180 --> 00:20:37,060
you're reusing just be aware

00:20:38,700 --> 00:20:42,840
a cool thing though that this allows you

00:20:41,279 --> 00:20:45,690
to do but does not amount automatically

00:20:42,840 --> 00:20:49,529
provide as the dunder slots method which

00:20:45,690 --> 00:20:54,269
is memory optimization this allows you

00:20:49,529 --> 00:20:57,029
to very easily these we're writing so

00:20:54,269 --> 00:20:58,830
much less code you're gonna just stick

00:20:57,029 --> 00:21:01,259
it in there it's still explicit what the

00:20:58,830 --> 00:21:03,989
class is trying to accomplish but it

00:21:01,259 --> 00:21:08,999
allows you to say hey data class take

00:21:03,989 --> 00:21:11,940
these data fields and don't always load

00:21:08,999 --> 00:21:14,039
them into RAM stick them down and you

00:21:11,940 --> 00:21:17,669
know only call them up when needed it

00:21:14,039 --> 00:21:23,009
optimizes at that level I'm not I'm not

00:21:17,669 --> 00:21:24,330
a slot expert but it is you know it

00:21:23,009 --> 00:21:26,159
looks a lot cleaner to me than other

00:21:24,330 --> 00:21:28,799
implementations I've seen I think that's

00:21:26,159 --> 00:21:30,859
a strength here but you have to do it

00:21:28,799 --> 00:21:30,859
yourself

00:21:34,480 --> 00:21:44,090
and we use them so data classes are not

00:21:40,310 --> 00:21:47,390
ideal if you have a class that needs to

00:21:44,090 --> 00:21:49,400
do lots of like transformations and a

00:21:47,390 --> 00:21:51,290
lot of heavy lifting on the date of the

00:21:49,400 --> 00:21:53,840
year passing it this is essentially a

00:21:51,290 --> 00:21:56,120
state object you have a piece of

00:21:53,840 --> 00:22:00,020
information about what should happen or

00:21:56,120 --> 00:22:03,470
what the current state of an API call is

00:22:00,020 --> 00:22:06,140
or what the current state of X process

00:22:03,470 --> 00:22:07,640
in your application this is a good way

00:22:06,140 --> 00:22:11,540
to kind of pass that around and either

00:22:07,640 --> 00:22:18,950
mute ibly update it or immutably track

00:22:11,540 --> 00:22:20,210
it it's customizable so name tuples

00:22:18,950 --> 00:22:23,630
there's an argument to use them in a

00:22:20,210 --> 00:22:26,570
similar way but you can get a lot more

00:22:23,630 --> 00:22:31,910
fine-grained with how you're using these

00:22:26,570 --> 00:22:36,670
in your applications and there are time

00:22:31,910 --> 00:22:36,670
saver it's a lot of code that

00:22:40,280 --> 00:22:48,740
study all right we have just five

00:22:45,770 --> 00:22:51,860
minutes so I'm gonna bring this up but

00:22:48,740 --> 00:22:55,640
pursued by bear is a an open-source game

00:22:51,860 --> 00:22:57,620
engine that is using data classes as the

00:22:55,640 --> 00:22:59,690
event system so they have a game loop

00:22:57,620 --> 00:23:02,300
they go through and each data class

00:22:59,690 --> 00:23:05,840
creates an event in an action that

00:23:02,300 --> 00:23:09,320
should happen in that game loop and let

00:23:05,840 --> 00:23:16,820
me see if I can make this big enough to

00:23:09,320 --> 00:23:17,180
see that it's not bigger ah okay it's

00:23:16,820 --> 00:23:27,080
bigger now

00:23:17,180 --> 00:23:29,630
ah too much okay there we go okay so you

00:23:27,080 --> 00:23:32,840
can see this is compatible with three

00:23:29,630 --> 00:23:35,750
six it's very important but you come

00:23:32,840 --> 00:23:39,020
down here so in this case a button was

00:23:35,750 --> 00:23:41,570
pressed but it's a mouse button it's got

00:23:39,020 --> 00:23:46,100
a position it's got a scene almost it's

00:23:41,570 --> 00:23:49,210
a base when the buttons released same

00:23:46,100 --> 00:23:49,210
thing updates

00:23:52,549 --> 00:23:58,080
so these are all you're not familiar

00:23:56,580 --> 00:23:59,970
with game development these are

00:23:58,080 --> 00:24:02,330
processes that might take a little bit

00:23:59,970 --> 00:24:04,649
more orchestration there might be

00:24:02,330 --> 00:24:06,149
JavaScript has this idea of listeners

00:24:04,649 --> 00:24:07,440
that you're listening for events and

00:24:06,149 --> 00:24:09,960
things like that but this allows you to

00:24:07,440 --> 00:24:13,019
kind of have an active system so one

00:24:09,960 --> 00:24:21,720
cool way these data classes in your

00:24:13,019 --> 00:24:23,279
project now my present ok no we're good

00:24:21,720 --> 00:24:29,029
it's where the presentation was going to

00:24:23,279 --> 00:24:29,029
be finished all right go get classy yeah

00:24:34,700 --> 00:24:39,869
in the definition for the type classes

00:24:37,169 --> 00:24:43,289
you are there is a the syntax you were

00:24:39,869 --> 00:24:45,600
showing has type annotations yes is the

00:24:43,289 --> 00:24:47,429
type annotation enforced in any way or

00:24:45,600 --> 00:24:49,379
is it just there for documentation

00:24:47,429 --> 00:24:52,259
purposes or what role does that play

00:24:49,379 --> 00:24:56,940
gotcha so it is not enforced this is

00:24:52,259 --> 00:24:58,799
concurrent with static typing in Python

00:24:56,940 --> 00:25:00,600
the plan is not that core Python is

00:24:58,799 --> 00:25:04,279
going to enforce this ever and this does

00:25:00,600 --> 00:25:07,889
not conflict with that it allows you to

00:25:04,279 --> 00:25:11,580
use a static typing enforcing system

00:25:07,889 --> 00:25:13,590
like my PI or something similar to in

00:25:11,580 --> 00:25:15,929
this in this case you could like enforce

00:25:13,590 --> 00:25:17,609
it on your data classes to have an extra

00:25:15,929 --> 00:25:19,830
layer of validation make sure the data

00:25:17,609 --> 00:25:22,259
that you're passing around is correctly

00:25:19,830 --> 00:25:24,590
typed giving you the output you're

00:25:22,259 --> 00:25:29,220
expecting all that stuff so not enforced

00:25:24,590 --> 00:25:30,929
optional also nice optionally in the

00:25:29,220 --> 00:25:32,879
sense of you don't have to annotate at

00:25:30,929 --> 00:25:34,950
all or that you have to annotate with

00:25:32,879 --> 00:25:37,139
any I honestly don't care it's just

00:25:34,950 --> 00:25:40,559
going to be stuff you know I haven't

00:25:37,139 --> 00:25:43,139
written any without annotations so let

00:25:40,559 --> 00:25:51,149
me do that and I'll let you know if it

00:25:43,139 --> 00:25:52,830
blows up any more question all right

00:25:51,149 --> 00:25:54,809
miss case you will also be available

00:25:52,830 --> 00:25:56,759
outside in the hallway if you wanted to

00:25:54,809 --> 00:25:58,130
have longer conversations let's give her

00:25:56,759 --> 00:26:01,270
another round of applause

00:25:58,130 --> 00:26:14,579
[Applause]

00:26:01,270 --> 00:26:14,579

YouTube URL: https://www.youtube.com/watch?v=mm9qAe6u-00


