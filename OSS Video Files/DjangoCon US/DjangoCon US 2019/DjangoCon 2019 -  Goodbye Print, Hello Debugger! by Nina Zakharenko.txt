Title: DjangoCon 2019 -  Goodbye Print, Hello Debugger! by Nina Zakharenko
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 -  Goodbye Print, Hello Debugger! by Nina Zakharenko

Still debugging your code by using print? Learn how to level up your ability to troubleshoot complex code situations by using the power of a fully-featured debugger in this talk aimed at all levels of programming ability.

This talk was presented at: https://2019.djangocon.us/talks/goodbye-print-hello-debugger/

LINKS:
Follow Nina Zakharenko ðŸ‘‡
On Twitter: https://twitter.com/nnja
Official homepage: https://nnja.io

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,380 --> 00:00:24,470
all right um hi jinguk on good evening

00:00:20,360 --> 00:00:26,270
my name is Nina and I'm so glad to be

00:00:24,470 --> 00:00:29,330
back here jinguk on was the first

00:00:26,270 --> 00:00:31,310
conference but i'd ever spoke at back in

00:00:29,330 --> 00:00:35,180
2014 so it's always really good to be

00:00:31,310 --> 00:00:38,960
back now quick show of hands and this is

00:00:35,180 --> 00:00:43,220
a no-judgment zone when you run into a

00:00:38,960 --> 00:00:45,229
bug in your code a bug that needs a

00:00:43,220 --> 00:00:49,100
little bit of investigating how many of

00:00:45,229 --> 00:00:52,519
you use print to debug your code okay

00:00:49,100 --> 00:00:58,989
almost everyone you're in the right

00:00:52,519 --> 00:01:03,979
place how many of you use P DB or IP DB

00:00:58,989 --> 00:01:08,270
ok quite a few maybe 40% and how many of

00:01:03,979 --> 00:01:10,820
you use the debugger in your ID ok only

00:01:08,270 --> 00:01:11,900
a small handful ok so everyone in the

00:01:10,820 --> 00:01:14,600
room is going to learn something new

00:01:11,900 --> 00:01:16,640
today because I'm going to talk to you

00:01:14,600 --> 00:01:18,710
about the benefits of using debuggers

00:01:16,640 --> 00:01:20,420
when programming in Python I'm going to

00:01:18,710 --> 00:01:23,479
show you a few different types of them

00:01:20,420 --> 00:01:25,310
and the slides are going to be available

00:01:23,479 --> 00:01:26,810
after them because there are plenty of

00:01:25,310 --> 00:01:29,659
additional resources throughout this

00:01:26,810 --> 00:01:31,490
talk you can just download the slides to

00:01:29,659 --> 00:01:37,579
follow the links they're available at

00:01:31,490 --> 00:01:39,409
Nina dot t-- o-- / jinguk on 20:19 and

00:01:37,579 --> 00:01:41,179
if you want to try something a little

00:01:39,409 --> 00:01:43,490
fun in this talk if you're learning

00:01:41,179 --> 00:01:45,740
something new you can share tweet use

00:01:43,490 --> 00:01:49,630
the hashtag Django Khan and if you'd

00:01:45,740 --> 00:01:53,630
like you can tag me at nnj on twitter a

00:01:49,630 --> 00:01:55,969
little bit about me I work at Microsoft

00:01:53,630 --> 00:01:59,590
as a Python cloud developer advocate

00:01:55,969 --> 00:02:02,810
where I focus on making a sure and

00:01:59,590 --> 00:02:05,539
Python 4bs code easier to use for

00:02:02,810 --> 00:02:08,270
developers everywhere and that's the

00:02:05,539 --> 00:02:10,460
cute mascot for our team bit if you

00:02:08,270 --> 00:02:12,560
think bit is cute please find me in the

00:02:10,460 --> 00:02:15,350
hallway after first sticker I might even

00:02:12,560 --> 00:02:18,310
have some cliffy stickers to share there

00:02:15,350 --> 00:02:18,310
contrabands

00:02:19,140 --> 00:02:24,370
I've written software for over a decade

00:02:21,909 --> 00:02:26,349
at companies like meetup Retta HBO I've

00:02:24,370 --> 00:02:29,769
worked on projects big and small in a

00:02:26,349 --> 00:02:31,599
wide variety of organizations now if

00:02:29,769 --> 00:02:33,250
you're already using prints you might be

00:02:31,599 --> 00:02:34,590
wondering well what's the point of

00:02:33,250 --> 00:02:37,629
debuggers at all

00:02:34,590 --> 00:02:39,700
the problem with print is that it

00:02:37,629 --> 00:02:41,739
doesn't give us a lot of context if you

00:02:39,700 --> 00:02:43,480
put prints in your code you're probably

00:02:41,739 --> 00:02:44,890
familiar with the process of tweaking

00:02:43,480 --> 00:02:45,970
what you're printing it out because

00:02:44,890 --> 00:02:48,659
you've got it wrong

00:02:45,970 --> 00:02:51,280
adding something rewriting the code

00:02:48,659 --> 00:02:52,480
tweaking or formatting rerunning it

00:02:51,280 --> 00:02:54,370
again

00:02:52,480 --> 00:02:57,220
sometimes the bug is in your print

00:02:54,370 --> 00:03:00,519
statement right I think we've all been

00:02:57,220 --> 00:03:04,989
there they're just you know so angry

00:03:00,519 --> 00:03:06,310
it's tedious it's really tedious so I'm

00:03:04,989 --> 00:03:08,260
going to show you a little demo

00:03:06,310 --> 00:03:10,690
application it's a very simple flask app

00:03:08,260 --> 00:03:12,790
there's no data store all it does is it

00:03:10,690 --> 00:03:14,590
searches that github API for popular

00:03:12,790 --> 00:03:17,670
libraries by stars based on the language

00:03:14,590 --> 00:03:21,459
and that API data comes back as JSON

00:03:17,670 --> 00:03:24,700
pretty standard stuff the meat of the

00:03:21,459 --> 00:03:28,359
code looks like this there's a method

00:03:24,700 --> 00:03:30,730
called repos with most stars we generate

00:03:28,359 --> 00:03:34,569
a query that we'd like to send to the

00:03:30,730 --> 00:03:37,269
API we pass in a few parameters the

00:03:34,569 --> 00:03:39,130
queries the sort that we'd like the

00:03:37,269 --> 00:03:42,269
order and then we get back a response

00:03:39,130 --> 00:03:44,680
and then we do something with that JSON

00:03:42,269 --> 00:03:46,980
okay so let's check out what that looks

00:03:44,680 --> 00:03:46,980
like

00:03:59,069 --> 00:04:04,489
all right can everyone see this maybe

00:04:02,189 --> 00:04:09,840
it's a little bit too big how about now

00:04:04,489 --> 00:04:12,480
okay let's do yeah let's do one more

00:04:09,840 --> 00:04:15,540
down so this is my repos with most stars

00:04:12,480 --> 00:04:20,789
method here I'm creating the query have

00:04:15,540 --> 00:04:24,360
my parameters getting back a status code

00:04:20,789 --> 00:04:26,639
and parsing these items here I'm going

00:04:24,360 --> 00:04:28,800
to take that out for the minute so let's

00:04:26,639 --> 00:04:33,860
say I wanted to troubleshoot something

00:04:28,800 --> 00:04:42,330
with items I can you know print them out

00:04:33,860 --> 00:04:47,580
like that and then I can run my flask

00:04:42,330 --> 00:04:51,870
server here and this is my application

00:04:47,580 --> 00:04:54,030
that we were looking at before I can

00:04:51,870 --> 00:04:57,389
select and deselect languages and submit

00:04:54,030 --> 00:04:59,789
and see what the Python popular Python

00:04:57,389 --> 00:05:03,060
github repositories are by number of

00:04:59,789 --> 00:05:06,650
stars and if I go back to my flask

00:05:03,060 --> 00:05:09,000
project that was the output of my parent

00:05:06,650 --> 00:05:10,889
which you know kind of sucks it's gonna

00:05:09,000 --> 00:05:15,949
take me a lot of work to make something

00:05:10,889 --> 00:05:19,770
useful out of this now if you're using

00:05:15,949 --> 00:05:23,909
Python 3 seven and up there's something

00:05:19,770 --> 00:05:26,490
new called the breakpoint method so all

00:05:23,909 --> 00:05:28,139
you would have to do is take out your

00:05:26,490 --> 00:05:30,300
print and put in those breakpoint

00:05:28,139 --> 00:05:33,539
instead for Python 37 and up

00:05:30,300 --> 00:05:37,409
if you save that now and I'm gonna go

00:05:33,539 --> 00:05:40,620
back and run my flask server and down

00:05:37,409 --> 00:05:42,300
here I'm just going to use curl to hit

00:05:40,620 --> 00:05:46,560
that webpage so I don't have to go back

00:05:42,300 --> 00:05:49,949
and keep logging on it now what this is

00:05:46,560 --> 00:05:52,680
done is it's hit that break point we're

00:05:49,949 --> 00:05:56,880
now on the line after that break point

00:05:52,680 --> 00:06:03,720
was inserted and we can do some really

00:05:56,880 --> 00:06:07,710
cool stuff here the most important thing

00:06:03,720 --> 00:06:10,169
here is that items that JSON that list

00:06:07,710 --> 00:06:12,780
of dictionaries that represents the JSON

00:06:10,169 --> 00:06:15,389
I got back from the API it's just a

00:06:12,780 --> 00:06:17,910
vailable here in this prompt kind of

00:06:15,389 --> 00:06:20,190
like the Python ripple but not exactly

00:06:17,910 --> 00:06:26,280
the same so I can check out the length

00:06:20,190 --> 00:06:30,900
of it I can get one item and you know

00:06:26,280 --> 00:06:33,960
take a look at the keys it's a lot

00:06:30,900 --> 00:06:36,750
easier for me to just really quickly get

00:06:33,960 --> 00:06:40,740
more information about my that my

00:06:36,750 --> 00:06:43,200
objects my state I can even let's say

00:06:40,740 --> 00:06:47,780
the list of items was really long you

00:06:43,200 --> 00:06:53,130
know I can very easily take a slice and

00:06:47,780 --> 00:06:54,660
just work with that subset of data the

00:06:53,130 --> 00:06:57,660
other thing that I can do in this

00:06:54,660 --> 00:07:01,830
special PDD prompt is called interact

00:06:57,660 --> 00:07:03,390
mode so when I enter interact mode you

00:07:01,830 --> 00:07:05,160
see these three arrows and that

00:07:03,390 --> 00:07:09,510
signifies that now we're in a Python

00:07:05,160 --> 00:07:13,260
prompt so I have access to all of the

00:07:09,510 --> 00:07:15,540
same objects that I did in PDB just a

00:07:13,260 --> 00:07:18,960
little bit more powerful so I can hit

00:07:15,540 --> 00:07:20,880
control D to exit the interact mode and

00:07:18,960 --> 00:07:28,310
then control D again to exit the

00:07:20,880 --> 00:07:28,310
debugger or I could do C to continue so

00:07:38,620 --> 00:07:46,819
prynt kind of sad right working with

00:07:44,780 --> 00:07:48,740
json especially if Iying can be really

00:07:46,819 --> 00:07:52,129
annoying sometimes data just doesn't

00:07:48,740 --> 00:07:54,259
look how you expect it to other times

00:07:52,129 --> 00:07:59,599
you have a large nested data structure

00:07:54,259 --> 00:08:01,520
and when you're kind of fighting your

00:07:59,599 --> 00:08:04,610
tools when you're easing print to get

00:08:01,520 --> 00:08:06,349
state about your program it's just going

00:08:04,610 --> 00:08:09,979
to take you a lot more time because a

00:08:06,349 --> 00:08:12,349
debugger helps you examine the state of

00:08:09,979 --> 00:08:14,719
a running program with the debugger

00:08:12,349 --> 00:08:17,060
you're using a tool that's made for the

00:08:14,719 --> 00:08:19,219
job a debugger is going to drop you into

00:08:17,060 --> 00:08:22,189
the point of execution and it's going to

00:08:19,219 --> 00:08:24,199
allow you to see not just the string

00:08:22,189 --> 00:08:25,610
representation of whatever it is that

00:08:24,199 --> 00:08:28,340
you're trying to look at but actually

00:08:25,610 --> 00:08:31,219
allow you to call it to examine the

00:08:28,340 --> 00:08:33,380
arguments given to a function to examine

00:08:31,219 --> 00:08:37,219
other values and variables in that scope

00:08:33,380 --> 00:08:39,200
and a lot more you can even write new

00:08:37,219 --> 00:08:42,529
snippets of code and experiment to your

00:08:39,200 --> 00:08:46,430
heart's content and pull out that code

00:08:42,529 --> 00:08:49,149
afterwards and save it I that's a

00:08:46,430 --> 00:08:51,440
workflow that I do pretty regularly and

00:08:49,149 --> 00:08:53,300
I feel like a lot of folks that are

00:08:51,440 --> 00:08:56,360
starting out in Python are just afraid

00:08:53,300 --> 00:08:59,000
to use debuggers it seems like there's

00:08:56,360 --> 00:09:01,550
too much overhead and using print is

00:08:59,000 --> 00:09:04,269
just so familiar but I hope to show you

00:09:01,550 --> 00:09:07,820
that there is nothing to be afraid of

00:09:04,269 --> 00:09:10,160
when you're using debuggers you can get

00:09:07,820 --> 00:09:11,720
started with them in no time at all it's

00:09:10,160 --> 00:09:13,070
really going to supercharge the way that

00:09:11,720 --> 00:09:15,230
you write code the way that you find

00:09:13,070 --> 00:09:17,779
bugs and you won't have to clean up

00:09:15,230 --> 00:09:19,399
prints littered all over your code base

00:09:17,779 --> 00:09:22,970
as you're examining the state of

00:09:19,399 --> 00:09:25,550
multiple objects I feel that once I gave

00:09:22,970 --> 00:09:27,230
up using print to debug my code my

00:09:25,550 --> 00:09:31,399
productivity as a programmer really

00:09:27,230 --> 00:09:33,500
increased and yours can too so I showed

00:09:31,399 --> 00:09:35,720
you the debugger that was a little bit

00:09:33,500 --> 00:09:37,940
better than print right and adding that

00:09:35,720 --> 00:09:40,100
debugger a breakpoint wasn't that hard

00:09:37,940 --> 00:09:42,050
just remember that's for Python three

00:09:40,100 --> 00:09:45,800
seven I'll go over what you can do for

00:09:42,050 --> 00:09:48,650
other versions later you can do all

00:09:45,800 --> 00:09:51,800
sorts of stuff in that console you can

00:09:48,650 --> 00:09:54,170
call vars do you see the variables in

00:09:51,800 --> 00:09:56,180
your scope you can call der on any of

00:09:54,170 --> 00:10:00,740
the objects to see the methods available

00:09:56,180 --> 00:10:02,810
you can pretty print etc um you can also

00:10:00,740 --> 00:10:07,910
move around the codebase and I'll show

00:10:02,810 --> 00:10:08,990
you that and quite in a little bit what

00:10:07,910 --> 00:10:10,640
you're going to learn today from this

00:10:08,990 --> 00:10:12,500
talk I'm going to cover why you should

00:10:10,640 --> 00:10:14,660
use the buggers I'm going to talk about

00:10:12,500 --> 00:10:16,520
breakpoints and other fundamentals I'm

00:10:14,660 --> 00:10:19,040
going to talk about my workflow the

00:10:16,520 --> 00:10:22,700
tools that are available like PDB IP DB

00:10:19,040 --> 00:10:25,100
IDs breakpoint in Python 37 I'm going to

00:10:22,700 --> 00:10:28,330
show you demos tips tricks and a little

00:10:25,100 --> 00:10:32,720
bit of guidance on when to use what

00:10:28,330 --> 00:10:36,050
because quick disclaimer here this is my

00:10:32,720 --> 00:10:38,180
way these are there are many tools and

00:10:36,050 --> 00:10:39,260
many workflows available for debugging

00:10:38,180 --> 00:10:42,020
but I'm going to show you the workflow

00:10:39,260 --> 00:10:46,690
that I use it doesn't mean that it's the

00:10:42,020 --> 00:10:49,430
right one so choose what's best for you

00:10:46,690 --> 00:10:53,690
now there are a few different types of

00:10:49,430 --> 00:10:56,780
debuggers for c alive pdb is included in

00:10:53,690 --> 00:10:58,760
the standard library it's a great option

00:10:56,780 --> 00:11:02,089
it's portable you don't need to install

00:10:58,760 --> 00:11:05,570
anything else but I tend to use IP DB

00:11:02,089 --> 00:11:10,640
which is installable via pip just pip

00:11:05,570 --> 00:11:12,890
install IP DB and IPTV has all the nice

00:11:10,640 --> 00:11:14,270
features of ipython like syntax

00:11:12,890 --> 00:11:17,740
highlighting better tab completion

00:11:14,270 --> 00:11:20,210
that's what I'm going to show you today

00:11:17,740 --> 00:11:23,839
and so a CLI debugger might look

00:11:20,210 --> 00:11:25,910
something like this now if you're not

00:11:23,839 --> 00:11:28,010
comfortable on the command line or you

00:11:25,910 --> 00:11:32,330
prefer graphical tools there are still

00:11:28,010 --> 00:11:35,150
plenty of options available there's PE

00:11:32,330 --> 00:11:38,390
DB which is a graphical CLI tool there

00:11:35,150 --> 00:11:41,360
are many IDE s available I use Visual

00:11:38,390 --> 00:11:45,170
Studio code but there's also pycharm

00:11:41,360 --> 00:11:46,730
and many others I'm gonna be showing vs

00:11:45,170 --> 00:11:50,120
code today it's what I use for my daily

00:11:46,730 --> 00:11:55,459
editor and debugging in vs code might

00:11:50,120 --> 00:11:57,830
look something like this the foundation

00:11:55,459 --> 00:12:01,280
of either of these methods of debugging

00:11:57,830 --> 00:12:03,040
is the break point a break point is kind

00:12:01,280 --> 00:12:07,730
of like a trap

00:12:03,040 --> 00:12:09,860
imagine that your program and you're

00:12:07,730 --> 00:12:11,480
walking along you're executing code line

00:12:09,860 --> 00:12:13,310
by line and then you trip on something

00:12:11,480 --> 00:12:13,880
and fall into a hole and you need to

00:12:13,310 --> 00:12:17,269
stop

00:12:13,880 --> 00:12:20,290
that's a breakpoint it's gonna stop the

00:12:17,269 --> 00:12:22,570
flow of execution in your program

00:12:20,290 --> 00:12:27,860
temporarily

00:12:22,570 --> 00:12:31,399
now Python 37 use breakpoint why what

00:12:27,860 --> 00:12:34,880
are the advantages well I prefer using I

00:12:31,399 --> 00:12:37,899
pdb IPTV is a third party package it's

00:12:34,880 --> 00:12:40,519
not in the standard library with a

00:12:37,899 --> 00:12:43,970
breakpoint you can set your debugger of

00:12:40,519 --> 00:12:46,790
choice really easily all you need to do

00:12:43,970 --> 00:12:50,389
is export this environment variable it

00:12:46,790 --> 00:12:51,529
offers you know I pdb offers syntax

00:12:50,389 --> 00:12:54,500
highlighting and all those nice things

00:12:51,529 --> 00:12:55,910
and but i can change it later if I feel

00:12:54,500 --> 00:12:57,829
like it I can switch it out in the

00:12:55,910 --> 00:13:00,949
future maybe something new and better

00:12:57,829 --> 00:13:02,959
and shinier will come along I don't have

00:13:00,949 --> 00:13:05,750
to change my workflow so that's one

00:13:02,959 --> 00:13:08,360
great reason for upgrading another great

00:13:05,750 --> 00:13:10,670
reason is there's an environment

00:13:08,360 --> 00:13:13,790
variable that allows you to skip any

00:13:10,670 --> 00:13:15,949
breakpoints at execution for example in

00:13:13,790 --> 00:13:17,660
production I'm going to talk about why

00:13:15,949 --> 00:13:21,199
that's later a little bit or why that's

00:13:17,660 --> 00:13:23,180
important a little bit later on now if

00:13:21,199 --> 00:13:26,870
you're using a version of Python that's

00:13:23,180 --> 00:13:30,649
less than 37 there are other ways to add

00:13:26,870 --> 00:13:32,839
breakpoints you can go the first rail

00:13:30,649 --> 00:13:36,889
and add them directly to your code for

00:13:32,839 --> 00:13:39,050
PDB just import PDB use a semicolon for

00:13:36,889 --> 00:13:42,170
same line and then PDB dots that trace

00:13:39,050 --> 00:13:46,310
or for IP DB just add an eye to both

00:13:42,170 --> 00:13:49,490
places and the second option is that you

00:13:46,310 --> 00:13:51,079
can add them interactively so for those

00:13:49,490 --> 00:13:54,980
of you who are in dance talked earlier

00:13:51,079 --> 00:13:57,680
today about setting up containerized

00:13:54,980 --> 00:13:59,269
development environment in vs code he

00:13:57,680 --> 00:14:02,690
showed you that you can run PDB as a

00:13:59,269 --> 00:14:07,190
module with the - M flag and then you

00:14:02,690 --> 00:14:10,130
can interactively add in where you want

00:14:07,190 --> 00:14:12,649
breakpoints to be now I'm not going to

00:14:10,130 --> 00:14:15,199
cover that approach there are pros and

00:14:12,649 --> 00:14:16,339
cons to either with option 1 it's harder

00:14:15,199 --> 00:14:19,279
to disabled with

00:14:16,339 --> 00:14:21,550
two of your code moves around your

00:14:19,279 --> 00:14:24,230
breakpoint line numbers might change I

00:14:21,550 --> 00:14:30,410
use the first approach exclusively but

00:14:24,230 --> 00:14:32,600
to each their own there are five really

00:14:30,410 --> 00:14:34,759
important commands that you should

00:14:32,600 --> 00:14:37,579
remember when using the debugger because

00:14:34,759 --> 00:14:41,899
you can learn more about the tool as you

00:14:37,579 --> 00:14:43,850
use it you can always get more complex

00:14:41,899 --> 00:14:46,459
more complicated but this is really the

00:14:43,850 --> 00:14:51,019
foundational the list of foundational

00:14:46,459 --> 00:14:52,670
things the first is L for a list or LL

00:14:51,019 --> 00:14:55,370
for long list that's going to print out

00:14:52,670 --> 00:14:59,930
all of the code around the breakpoint

00:14:55,370 --> 00:15:02,209
that was hit and is go to next line s is

00:14:59,930 --> 00:15:04,579
step into so if there's a method being

00:15:02,209 --> 00:15:07,639
called enter it otherwise just go to the

00:15:04,579 --> 00:15:08,420
next line C is for continue to the next

00:15:07,639 --> 00:15:10,730
breakpoint

00:15:08,420 --> 00:15:14,089
or until the program completes and then

00:15:10,730 --> 00:15:17,529
H is for help with an optional command

00:15:14,089 --> 00:15:19,850
if you forget what the commands are it's

00:15:17,529 --> 00:15:23,329
there's documentation available right

00:15:19,850 --> 00:15:25,819
there in the tool and there are tons of

00:15:23,329 --> 00:15:28,610
other useful commands like R for return

00:15:25,819 --> 00:15:30,829
that jumps to the return statement for

00:15:28,610 --> 00:15:31,999
the current function in execution so

00:15:30,829 --> 00:15:35,600
that's useful if there are multiple

00:15:31,999 --> 00:15:37,429
return statements J will jump to a line

00:15:35,600 --> 00:15:39,980
it's gonna help you break out of a loop

00:15:37,429 --> 00:15:43,339
or skip long chunks of code without

00:15:39,980 --> 00:15:45,230
having to continue repeatedly but you

00:15:43,339 --> 00:15:46,879
really can be fully productive by

00:15:45,230 --> 00:15:49,490
starting with the basic commands and

00:15:46,879 --> 00:15:52,129
adding on things as you need them this

00:15:49,490 --> 00:15:55,759
cheat sheet is available to download at

00:15:52,129 --> 00:16:01,759
the same link as the slides and yes my

00:15:55,759 --> 00:16:03,649
cheat sheets match my hair so let's take

00:16:01,759 --> 00:16:05,709
a look at what some of these things look

00:16:03,649 --> 00:16:05,709
like

00:16:13,339 --> 00:16:23,129
okay so we saw what PDB looked like

00:16:19,709 --> 00:16:24,199
before let's look at that again one more

00:16:23,129 --> 00:16:28,379
time

00:16:24,199 --> 00:16:30,989
so PDB black and white have an arrow

00:16:28,379 --> 00:16:34,019
here in my prompt that's not exactly

00:16:30,989 --> 00:16:40,619
what I'm looking for I'd rather use IPTV

00:16:34,019 --> 00:16:44,519
and to do that all I need to do is set

00:16:40,619 --> 00:16:47,309
an environment variable called Python

00:16:44,519 --> 00:16:50,579
break point to the method that I want

00:16:47,309 --> 00:16:53,939
called as my break put function here

00:16:50,579 --> 00:16:58,970
it's IP DB dot set trace now once I do

00:16:53,939 --> 00:16:58,970
that and I hit my debugger again ooh

00:16:59,480 --> 00:17:12,750
fancy colors right this looks a lot

00:17:04,049 --> 00:17:19,829
nicer so I'm going to move my breakpoint

00:17:12,750 --> 00:17:22,980
to the top of my method and let's look

00:17:19,829 --> 00:17:25,319
around a bit so I've moved it right

00:17:22,980 --> 00:17:27,899
after the repose with no stars

00:17:25,319 --> 00:17:39,059
definition I'm just going to clean up

00:17:27,899 --> 00:17:41,220
the space here okay now um let's say I

00:17:39,059 --> 00:17:44,520
wanted to know how this query was

00:17:41,220 --> 00:17:47,370
getting being created I could step into

00:17:44,520 --> 00:17:50,460
this method so remember i can type step

00:17:47,370 --> 00:17:52,200
the long form commands but once you use

00:17:50,460 --> 00:17:54,779
this for like 30 minutes you'll remember

00:17:52,200 --> 00:17:58,529
the shortcuts I'm going to do s for step

00:17:54,779 --> 00:18:04,020
into that has now put me into the create

00:17:58,529 --> 00:18:06,090
query method I can type a for args to

00:18:04,020 --> 00:18:08,940
find out what arguments were passed into

00:18:06,090 --> 00:18:11,039
this function here are the languages and

00:18:08,940 --> 00:18:11,760
here are the minimum amount of stars on

00:18:11,039 --> 00:18:16,320
github

00:18:11,760 --> 00:18:18,899
I can hit next to go to the next line L

00:18:16,320 --> 00:18:21,320
will print out all the lines around my

00:18:18,899 --> 00:18:22,799
breakpoint for a little bit more context

00:18:21,320 --> 00:18:24,150
now

00:18:22,799 --> 00:18:28,740
something important

00:18:24,150 --> 00:18:30,720
to note here I'm currently on why 19 if

00:18:28,740 --> 00:18:32,460
I type in query here if I try to look at

00:18:30,720 --> 00:18:35,040
that query object I'm going to get a

00:18:32,460 --> 00:18:38,850
name error that query is not defined I

00:18:35,040 --> 00:18:41,250
still do this all the time and what you

00:18:38,850 --> 00:18:44,760
need to do here is just step to the next

00:18:41,250 --> 00:18:49,290
line and now query is defined in the

00:18:44,760 --> 00:18:52,590
context well so I'm gonna jump to our

00:18:49,290 --> 00:18:54,180
for a return and I can take a look at my

00:18:52,590 --> 00:18:58,170
query now this is what's gonna get

00:18:54,180 --> 00:19:00,960
returned from this function and I can

00:18:58,170 --> 00:19:05,280
hit next and that will pop me back up

00:19:00,960 --> 00:19:07,620
he's back into my crib out for my create

00:19:05,280 --> 00:19:11,370
query method into the repos with most

00:19:07,620 --> 00:19:13,680
stars method now I'm just going to

00:19:11,370 --> 00:19:18,270
continue on for a little bit let's say I

00:19:13,680 --> 00:19:21,690
use long line to get more context I want

00:19:18,270 --> 00:19:26,550
to jump to after items are defined so

00:19:21,690 --> 00:19:29,880
that would be line 38 now let's say I

00:19:26,550 --> 00:19:34,560
have a bunch of items and I don't

00:19:29,880 --> 00:19:38,100
remember what I did access the key for

00:19:34,560 --> 00:19:42,030
the amount of stars in a repository so I

00:19:38,100 --> 00:19:46,130
can oops there we go sorry a blank line

00:19:42,030 --> 00:19:49,850
doesn't kind of count in this context

00:19:46,130 --> 00:19:49,850
what's going on here

00:19:58,770 --> 00:20:07,140
what's that oh I didn't run the lines

00:20:02,309 --> 00:20:07,890
right um let me continue and then start

00:20:07,140 --> 00:20:14,280
that over again

00:20:07,890 --> 00:20:17,400
oops sorry so let me just go through

00:20:14,280 --> 00:20:20,220
this code what next and make sure that I

00:20:17,400 --> 00:20:24,660
get my response JSON this time and now I

00:20:20,220 --> 00:20:30,260
should have my items available okay

00:20:24,660 --> 00:20:30,260
great pair program debugging my favorite

00:20:30,350 --> 00:20:39,690
okay so let's get an item here and I can

00:20:35,400 --> 00:20:42,150
look at the keys this is still quite a

00:20:39,690 --> 00:20:47,760
bit of work but the nice thing about IP

00:20:42,150 --> 00:20:50,540
DB is I can do an opening bracket here

00:20:47,760 --> 00:20:53,760
in a quote and then I can tab complete

00:20:50,540 --> 00:20:56,429
so I know that the key is called star

00:20:53,760 --> 00:20:59,580
something now if I tab that it'll give

00:20:56,429 --> 00:21:03,780
me all the options I think this star

00:20:59,580 --> 00:21:05,910
gazers count must be some weird legacy

00:21:03,780 --> 00:21:08,610
github code maybe that's what it used to

00:21:05,910 --> 00:21:10,200
be called but it does make the API a

00:21:08,610 --> 00:21:17,400
little bit harder to use with

00:21:10,200 --> 00:21:19,250
autocomplete it's a lot easier so that's

00:21:17,400 --> 00:21:24,020
debugging on the command line

00:21:19,250 --> 00:21:32,220
what does debugging look like in an IDE

00:21:24,020 --> 00:21:36,330
I'm going to remove this line and this

00:21:32,220 --> 00:21:38,010
is Visual Studio code in order to get

00:21:36,330 --> 00:21:40,050
the best experience in Python with

00:21:38,010 --> 00:21:42,030
Visual Studio code you're going to want

00:21:40,050 --> 00:21:44,520
to make sure to download the Python

00:21:42,030 --> 00:21:50,760
extension there are links to that in my

00:21:44,520 --> 00:21:53,670
slides to set breakpoints in this IDE

00:21:50,760 --> 00:21:55,230
and most IDs you're going to look at

00:21:53,670 --> 00:21:58,410
something called the gutter the gutter

00:21:55,230 --> 00:22:01,410
is on the left side here left side of

00:21:58,410 --> 00:22:05,850
the line numbers and if you click on it

00:22:01,410 --> 00:22:08,100
you should see a red dot now to access

00:22:05,850 --> 00:22:10,650
the debugger you're going to click on

00:22:08,100 --> 00:22:12,450
this icon that's a bug with an X on it

00:22:10,650 --> 00:22:15,450
you know no bugs

00:22:12,450 --> 00:22:18,389
very clear icon I like it and you're

00:22:15,450 --> 00:22:20,789
going to want to look in this drop-down

00:22:18,389 --> 00:22:22,590
here if you don't have any debugger

00:22:20,789 --> 00:22:24,480
configurations maybe you're running the

00:22:22,590 --> 00:22:26,820
debugger for the first time you're going

00:22:24,480 --> 00:22:30,210
to want to add a configuration and then

00:22:26,820 --> 00:22:32,309
make sure you have flask selected and to

00:22:30,210 --> 00:22:36,960
start the debugger you can just hit play

00:22:32,309 --> 00:22:38,970
right here and you'll see that my this

00:22:36,960 --> 00:22:40,859
bar at the bottom it's changed the color

00:22:38,970 --> 00:22:43,830
to let me know that I'm in an active

00:22:40,859 --> 00:22:45,779
debugging session now if I wanted to

00:22:43,830 --> 00:22:47,669
look at my website something I really

00:22:45,779 --> 00:22:51,269
like about vs code is I can command

00:22:47,669 --> 00:22:53,220
click to follow links really useful for

00:22:51,269 --> 00:22:57,989
logs and things like that and I'll see

00:22:53,220 --> 00:23:01,289
this yellow arrow here on line 25 that

00:22:57,989 --> 00:23:03,869
is where the my current line of

00:23:01,289 --> 00:23:06,809
execution something that's really nice

00:23:03,869 --> 00:23:10,320
about the visual debugger is I can mouse

00:23:06,809 --> 00:23:13,230
over variables here to take a look at

00:23:10,320 --> 00:23:18,509
what the values might be I also have

00:23:13,230 --> 00:23:21,109
access to a very easy watch so the watch

00:23:18,509 --> 00:23:22,980
will is a place where I can put

00:23:21,109 --> 00:23:24,809
variables that I'm kind of really

00:23:22,980 --> 00:23:27,629
interested in and they will always

00:23:24,809 --> 00:23:30,570
appear on the left hand side there's

00:23:27,629 --> 00:23:36,470
also a nice debugging console here on

00:23:30,570 --> 00:23:36,470
the bottom to the left terminal it has

00:23:37,159 --> 00:23:47,009
tab tab complete and it's what's going

00:23:44,879 --> 00:23:51,659
on here I think I accidentally killed

00:23:47,009 --> 00:23:53,879
that let's try again I'm pretty sure I

00:23:51,659 --> 00:23:55,919
have the butterfly Mac keyboard and I'm

00:23:53,879 --> 00:23:58,739
pretty sure that there's like a stuck

00:23:55,919 --> 00:24:02,549
key because sometimes I get just random

00:23:58,739 --> 00:24:06,119
key presses all right so jumping over

00:24:02,549 --> 00:24:11,389
that looking at my bug console I can now

00:24:06,119 --> 00:24:16,470
take a look at query etc it's also

00:24:11,389 --> 00:24:19,259
really nice for being able to quickly if

00:24:16,470 --> 00:24:22,830
I go back to the debug panel and I look

00:24:19,259 --> 00:24:25,900
at break breakpoints here I can easily

00:24:22,830 --> 00:24:28,790
check or uncheck breakpoints

00:24:25,900 --> 00:24:31,430
so I'm going to uncheck the one that's

00:24:28,790 --> 00:24:38,150
in my API WI I'm going to check the one

00:24:31,430 --> 00:24:41,090
that's an index.html and now if I hit

00:24:38,150 --> 00:24:42,770
play to continue debugging I'm going to

00:24:41,090 --> 00:24:46,250
stop at my breakpoint in the template

00:24:42,770 --> 00:24:49,100
and I can go mouse over these and see

00:24:46,250 --> 00:24:51,350
what the values are so for those of you

00:24:49,100 --> 00:24:54,200
who have worked on templates in the past

00:24:51,350 --> 00:24:56,990
you know how painful how incredibly

00:24:54,200 --> 00:24:58,730
painful this process can be so this is

00:24:56,990 --> 00:25:04,570
probably one of my favorite features of

00:24:58,730 --> 00:25:04,570
id debugging all right

00:25:13,279 --> 00:25:19,190
now here's the link for downloading vs

00:25:16,979 --> 00:25:21,059
code installing the Python extension

00:25:19,190 --> 00:25:24,089
instructions for creating a debugger

00:25:21,059 --> 00:25:25,710
configuration you notice that I might

00:25:24,089 --> 00:25:28,259
have been clicking on those visual

00:25:25,710 --> 00:25:33,299
breakpoints those icons those icons

00:25:28,259 --> 00:25:36,539
correlate to the same commands that you

00:25:33,299 --> 00:25:40,469
used on the CLI C for continue that kind

00:25:36,539 --> 00:25:44,129
of play arrow the the arrow was kind of

00:25:40,469 --> 00:25:47,669
the jump over that's n for next etc kind

00:25:44,129 --> 00:25:49,349
of have a handy guide here now when are

00:25:47,669 --> 00:25:51,389
you gonna want to use what there are a

00:25:49,349 --> 00:25:55,019
lot of options how do you know when you

00:25:51,389 --> 00:25:58,919
want to use what tool I rarely use PDB I

00:25:55,019 --> 00:26:01,440
found the functionality too limited but

00:25:58,919 --> 00:26:03,809
my personal preference seola I use CLI

00:26:01,440 --> 00:26:07,710
debugging for most small programs and

00:26:03,809 --> 00:26:09,659
scripts using i PDB because sometimes I

00:26:07,710 --> 00:26:11,369
just I want to work from the command

00:26:09,659 --> 00:26:14,190
line that's where I'm most productive I

00:26:11,369 --> 00:26:15,839
tend to reach for ID debugging when I'm

00:26:14,190 --> 00:26:19,529
working with a large or complex code

00:26:15,839 --> 00:26:21,570
base or if I want to dive in and debug

00:26:19,529 --> 00:26:24,570
templates but choose the strategy that

00:26:21,570 --> 00:26:26,129
works best for you now a few tips and

00:26:24,570 --> 00:26:28,019
tricks I wanted to share with you a

00:26:26,129 --> 00:26:31,169
simple one this one took me a long time

00:26:28,019 --> 00:26:33,389
to figure out I've spent a lot of time

00:26:31,169 --> 00:26:36,779
on my debugger the bugger pressing and

00:26:33,389 --> 00:26:39,119
for next or pressing you know s for step

00:26:36,779 --> 00:26:46,799
into if you just hit return it will

00:26:39,119 --> 00:26:49,229
rerun the last command you all know how

00:26:46,799 --> 00:26:51,330
important unit tests are right if you

00:26:49,229 --> 00:26:53,580
ever get stuck figuring out why a unit

00:26:51,330 --> 00:26:55,919
test is failing they're a breakpoint in

00:26:53,580 --> 00:26:58,950
there I do that all the time it's really

00:26:55,919 --> 00:27:01,919
handy and this is one of my favorite

00:26:58,950 --> 00:27:04,919
hacks see if I have time for demo at the

00:27:01,919 --> 00:27:07,320
end but I showed you interact in the

00:27:04,919 --> 00:27:13,559
beginning the interact man dropped me

00:27:07,320 --> 00:27:16,200
into a Python rebel where I have access

00:27:13,559 --> 00:27:19,979
to all the the variables and all the

00:27:16,200 --> 00:27:23,460
state you can make a dot PDB RC file

00:27:19,979 --> 00:27:25,380
it's a configuration file and this

00:27:23,460 --> 00:27:27,690
specific configuration

00:27:25,380 --> 00:27:30,779
will allow you to add a new alias a new

00:27:27,690 --> 00:27:33,899
command called interact I that you can

00:27:30,779 --> 00:27:37,350
run to get an interactive ipython rebel

00:27:33,899 --> 00:27:40,580
in your debugger which is really nice

00:27:37,350 --> 00:27:43,710
there's a lot of Handy methods in

00:27:40,580 --> 00:27:46,460
ipython like see paste which allows you

00:27:43,710 --> 00:27:51,090
to paste multiple lines of code while

00:27:46,460 --> 00:27:53,880
retaining indentation so that is really

00:27:51,090 --> 00:27:59,840
really useful there is a link to

00:27:53,880 --> 00:28:03,360
download that Nino dot io / PDB RC and

00:27:59,840 --> 00:28:07,139
there's now new debugging in Jupiter

00:28:03,360 --> 00:28:11,909
notebooks and BS code I want to show you

00:28:07,139 --> 00:28:14,850
that real quick so if you open a

00:28:11,909 --> 00:28:18,179
notebook you should see a button here

00:28:14,850 --> 00:28:20,100
the bug cell and if you hit that it will

00:28:18,179 --> 00:28:24,919
start a debugger session in your

00:28:20,100 --> 00:28:29,100
notebook and you'll see that yellow

00:28:24,919 --> 00:28:31,460
lines show up once my computer decides

00:28:29,100 --> 00:28:34,590
to stop thinking about it there we go

00:28:31,460 --> 00:28:37,830
and you can step over just like you did

00:28:34,590 --> 00:28:40,289
with your other code you can you know

00:28:37,830 --> 00:28:46,379
mouse over here for more information and

00:28:40,289 --> 00:28:50,279
if I play that we'll see my output here

00:28:46,379 --> 00:28:52,590
from this little example notebook so for

00:28:50,279 --> 00:28:54,210
those of you who do a lot of Jupiter

00:28:52,590 --> 00:28:57,690
notebooks you know how time-saving this

00:28:54,210 --> 00:28:59,519
can be now a few gotchas you don't want

00:28:57,690 --> 00:29:01,440
to leave breakpoints in production code

00:28:59,519 --> 00:29:03,450
they could halt your whole running

00:29:01,440 --> 00:29:05,639
program you don't want to be responsible

00:29:03,450 --> 00:29:07,500
for that so even if you're using break

00:29:05,639 --> 00:29:09,090
point in python 37 it's still best

00:29:07,500 --> 00:29:13,620
practice do not commit code with

00:29:09,090 --> 00:29:17,039
breakpoints in it at all a tip for that

00:29:13,620 --> 00:29:19,049
is using git pre-commit hooks pre-commit

00:29:17,039 --> 00:29:22,620
hooks will prevent a commit that matches

00:29:19,049 --> 00:29:24,539
a particular condition and that sounds

00:29:22,620 --> 00:29:26,730
really hard wait but thankfully there's

00:29:24,539 --> 00:29:29,850
a library out there that is it for you

00:29:26,730 --> 00:29:33,389
pre you can see a pre - commit com it's

00:29:29,850 --> 00:29:36,149
written in Python just run pip install /

00:29:33,389 --> 00:29:38,399
- commit and it comes with a hook that

00:29:36,149 --> 00:29:39,350
does the smart thing the debug -

00:29:38,399 --> 00:29:42,290
statement

00:29:39,350 --> 00:29:45,140
and it doesn't just check for keywords

00:29:42,290 --> 00:29:47,630
in a file it uses the ast module to

00:29:45,140 --> 00:29:50,270
check for imports and check for debug

00:29:47,630 --> 00:29:53,900
statements no matter which debugger you

00:29:50,270 --> 00:29:55,400
use so breakpoint PD VI PDB it catches

00:29:53,900 --> 00:29:57,590
at all and it's going to be a lot easier

00:29:55,400 --> 00:30:00,740
to future-proof as Python the language

00:29:57,590 --> 00:30:04,250
grows so set up those pre-commit hooks

00:30:00,740 --> 00:30:06,230
to look for debugger statements you can

00:30:04,250 --> 00:30:08,300
also use them to run a linter to check

00:30:06,230 --> 00:30:13,429
for trailing whitespace unused imports

00:30:08,300 --> 00:30:15,440
etc now just to wrap up by now you

00:30:13,429 --> 00:30:17,660
should have a basic understanding of how

00:30:15,440 --> 00:30:20,870
debugging works and Python as well as

00:30:17,660 --> 00:30:22,790
the tools available from PDB in the

00:30:20,870 --> 00:30:26,179
standard library to graphical debuggers

00:30:22,790 --> 00:30:28,400
and IDs and you should know that fixing

00:30:26,179 --> 00:30:30,380
bugs is a process of mid firming one by

00:30:28,400 --> 00:30:32,540
one but the things you believe to be

00:30:30,380 --> 00:30:34,190
true about the code are true and when

00:30:32,540 --> 00:30:37,760
you find an assumption that isn't you

00:30:34,190 --> 00:30:39,950
found a clue your debugger is the best

00:30:37,760 --> 00:30:41,420
tool that you can use for this and I

00:30:39,950 --> 00:30:44,750
hope I've given you the confidence to

00:30:41,420 --> 00:30:45,290
say goodbye to print and hello to the

00:30:44,750 --> 00:30:48,350
debugger

00:30:45,290 --> 00:30:51,890
I haven't keep included a few additional

00:30:48,350 --> 00:30:53,900
resources in the slides and thank you

00:30:51,890 --> 00:30:57,140
all so much please download the slides

00:30:53,900 --> 00:30:59,330
if you want to learn more about Python

00:30:57,140 --> 00:31:02,150
at Microsoft for additional resources

00:30:59,330 --> 00:31:05,540
you can also check out a kms flash dingo

00:31:02,150 --> 00:31:06,540
con 2019 follow me on twitter and thank

00:31:05,540 --> 00:31:10,450
you so much

00:31:06,540 --> 00:31:17,200
[Applause]

00:31:10,450 --> 00:31:19,260
[Music]

00:31:17,200 --> 00:31:19,260

YouTube URL: https://www.youtube.com/watch?v=y_dCT9TQtyQ


