Title: DjangoCon 2019 - Just Add Await: Retrofitting Async Into Django by Andrew Godwin
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Just Add Await: Retrofitting Async Into Django by Andrew Godwin

Writing async code from scratch is hard; trying to add it into a large, existing framework is harder. Learn about the problems we face trying to make Django async while maintaining backwards compatibility, as well as the problems maintaining hybrid sync-and-async Python codebases in general.

This talk was presented at: https://2019.djangocon.us/talks/just-add-await-retrofitting-async-into/

LINKS:
Follow Andrew Godwin ðŸ‘‡
On Twitter: https://twitter.com/andrewgodwin
Official homepage: http://www.aeracode.org

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,380 --> 00:00:21,260
thank you very much Katie CS good

00:00:17,270 --> 00:00:23,480
morning everyone this is is it just add

00:00:21,260 --> 00:00:25,010
a wait it's maybe not quite as easy as

00:00:23,480 --> 00:00:26,930
the title belies but a brief

00:00:25,010 --> 00:00:27,920
introduction to me first of all I am

00:00:26,930 --> 00:00:29,360
Andrew :

00:00:27,920 --> 00:00:30,800
some of you may know me I've worked on

00:00:29,360 --> 00:00:32,870
things like Jang and migrations and

00:00:30,800 --> 00:00:35,660
South and channels and I've been around

00:00:32,870 --> 00:00:37,580
Jango a while my day job is working out

00:00:35,660 --> 00:00:39,440
of em bright trying to fix their

00:00:37,580 --> 00:00:40,670
wonderful scaling issues and all the

00:00:39,440 --> 00:00:42,800
matters of things and such a large on

00:00:40,670 --> 00:00:44,930
your website and if you want to find me

00:00:42,800 --> 00:00:46,729
on Twitter or my personal website and my

00:00:44,930 --> 00:00:49,850
list of national parks I've been to you

00:00:46,729 --> 00:00:51,110
can go there but please later but what

00:00:49,850 --> 00:00:53,540
we here for we are here for one thing

00:00:51,110 --> 00:00:57,110
which is that I can fit Jango on one

00:00:53,540 --> 00:01:00,290
slide and it's not fast I'm joking it is

00:00:57,110 --> 00:01:02,600
for this it is for the goal that when I

00:01:00,290 --> 00:01:04,670
sat down five six years ago and thought

00:01:02,600 --> 00:01:06,799
about what an async Jango could look

00:01:04,670 --> 00:01:08,090
like it's this it's that you can sit

00:01:06,799 --> 00:01:09,979
down the right thing that looks like

00:01:08,090 --> 00:01:12,260
normal Jango that you can immediately

00:01:09,979 --> 00:01:14,360
understand even if you've never seen a

00:01:12,260 --> 00:01:18,439
synchronous code before but that runs

00:01:14,360 --> 00:01:20,299
asynchronously and while just presenting

00:01:18,439 --> 00:01:23,539
this to you in the abstract by itself

00:01:20,299 --> 00:01:25,460
may seem either super easy or super hard

00:01:23,539 --> 00:01:27,380
there's a very detailed plan behind this

00:01:25,460 --> 00:01:29,659
and the plan to bring a sink into Jango

00:01:27,380 --> 00:01:31,700
as amber sort of alluded to earlier in

00:01:29,659 --> 00:01:34,310
in her keynote so I'm going to go

00:01:31,700 --> 00:01:37,009
through as well as I can and the time I

00:01:34,310 --> 00:01:38,630
have the sort of basic async landscape

00:01:37,009 --> 00:01:39,770
and then going to go through the

00:01:38,630 --> 00:01:42,259
particular problems that comes from

00:01:39,770 --> 00:01:44,719
being a big mature framework like Jango

00:01:42,259 --> 00:01:46,880
and then I'm going to go in-depth my

00:01:44,719 --> 00:01:48,499
deep dive into what it means to actually

00:01:46,880 --> 00:01:50,990
implement some of this in Django's

00:01:48,499 --> 00:01:53,899
requests paths and ORM other bits like

00:01:50,990 --> 00:01:55,700
that so first let's talk about a sinking

00:01:53,899 --> 00:01:58,369
brief you heard from amber the basic

00:01:55,700 --> 00:02:01,219
premise of a sink the idea that threads

00:01:58,369 --> 00:02:02,719
are preemptive but let's go into a bit

00:02:01,219 --> 00:02:04,819
more of what that means in python

00:02:02,719 --> 00:02:06,829
specifically so python has a threading

00:02:04,819 --> 00:02:09,560
library you can just import threading

00:02:06,829 --> 00:02:11,870
and run threads but it's a lie Python

00:02:09,560 --> 00:02:13,580
threads are not actually threads it's

00:02:11,870 --> 00:02:15,950
not a thing that runs on multiple

00:02:13,580 --> 00:02:17,300
processor cause it's just an

00:02:15,950 --> 00:02:19,879
implementation of what's called time

00:02:17,300 --> 00:02:21,950
slicing in Python when you have threads

00:02:19,879 --> 00:02:24,349
it just takes each of the threads you

00:02:21,950 --> 00:02:26,390
have and runs them an equal time slice

00:02:24,349 --> 00:02:29,359
no matter if they've got work to do or

00:02:26,390 --> 00:02:31,249
not if even if the thread is idling it

00:02:29,359 --> 00:02:32,780
will still be context which to go oh

00:02:31,249 --> 00:02:33,939
it's idling and cause it switched away

00:02:32,780 --> 00:02:36,709
from it again

00:02:33,939 --> 00:02:40,249
by comparison co-routines are

00:02:36,709 --> 00:02:42,170
cooperative they only yield and give

00:02:40,249 --> 00:02:44,480
back to the main control of the event

00:02:42,170 --> 00:02:46,819
loop when they hit in the wait what that

00:02:44,480 --> 00:02:48,859
means is if you're not doing anything

00:02:46,819 --> 00:02:50,810
you never even get hit but if you're

00:02:48,859 --> 00:02:53,329
doing a lot you actually can suck up all

00:02:50,810 --> 00:02:55,099
that different time and kind of waste it

00:02:53,329 --> 00:02:57,079
the co-operative is part of the name if

00:02:55,099 --> 00:02:58,969
you want if you are an uncooperative

00:02:57,079 --> 00:03:00,829
co-routine you can ruin everyone else's

00:02:58,969 --> 00:03:02,629
day that's an important thing to think

00:03:00,829 --> 00:03:04,280
about as we sort of go further down into

00:03:02,629 --> 00:03:06,769
when I talk about dangers of a synchrony

00:03:04,280 --> 00:03:09,949
and so we have these two different lands

00:03:06,769 --> 00:03:12,019
and traditionally people in Python have

00:03:09,949 --> 00:03:13,939
sometimes use threads if you've gone

00:03:12,019 --> 00:03:16,189
near the threading module you may have

00:03:13,939 --> 00:03:17,900
some kind of appreciation of how

00:03:16,189 --> 00:03:20,060
difficult it can be and how dangerous it

00:03:17,900 --> 00:03:21,500
can be to go there co-routines are

00:03:20,060 --> 00:03:23,480
different in some ways they are much

00:03:21,500 --> 00:03:25,730
safer in some ways they are harder to

00:03:23,480 --> 00:03:28,099
think about the key thing co-routines

00:03:25,730 --> 00:03:29,989
need is an event loop now amber did

00:03:28,099 --> 00:03:31,549
mention this this is cool the brains of

00:03:29,989 --> 00:03:33,739
the operation is the thing that listens

00:03:31,549 --> 00:03:35,870
on the OS sockets that works out always

00:03:33,739 --> 00:03:38,060
a bite incoming from the network it's

00:03:35,870 --> 00:03:39,799
where the program goes when a car

00:03:38,060 --> 00:03:41,959
routine exits to work out what it's

00:03:39,799 --> 00:03:43,790
doing next you can imagine every care

00:03:41,959 --> 00:03:45,079
routine sort of runs gives back to the

00:03:43,790 --> 00:03:46,280
event loop the vet knew goes oh there's

00:03:45,079 --> 00:03:48,229
a new thing over here on this socket

00:03:46,280 --> 00:03:49,609
who's who has a socket is this care

00:03:48,229 --> 00:03:51,549
routine and then gives control to that

00:03:49,609 --> 00:03:54,109
care routine that's kind of wit does and

00:03:51,549 --> 00:03:56,750
the fun thing is the event loop is a

00:03:54,109 --> 00:03:58,849
thread and this kind of becomes the sort

00:03:56,750 --> 00:04:01,389
of I have this dawning moment about two

00:03:58,849 --> 00:04:03,919
years ago I was like oh that's awful

00:04:01,389 --> 00:04:05,840
when you realize that you can have both

00:04:03,919 --> 00:04:07,219
threads and co-routines and you can have

00:04:05,840 --> 00:04:10,609
multiple event lived in multiple threads

00:04:07,219 --> 00:04:12,979
don't do this so here's a sort of visual

00:04:10,609 --> 00:04:15,829
illustration right so say I'm running a

00:04:12,979 --> 00:04:18,199
standard normal Python application that

00:04:15,829 --> 00:04:20,120
is synchronous by default I can spin up

00:04:18,199 --> 00:04:22,250
an event loop in my synchronous

00:04:20,120 --> 00:04:24,590
application and turn that synchronous

00:04:22,250 --> 00:04:26,389
thread into an asynchronous hosting

00:04:24,590 --> 00:04:28,039
thread and basically what you do is you

00:04:26,389 --> 00:04:29,900
call the event loop and it just blocks

00:04:28,039 --> 00:04:31,969
wherever you call it from it sort of

00:04:29,900 --> 00:04:34,039
absorbs that thread and uses it until it

00:04:31,969 --> 00:04:35,900
returns at the end of it and so you can

00:04:34,039 --> 00:04:37,099
see here that like in this diagram you

00:04:35,900 --> 00:04:38,090
can basically take that synchronous

00:04:37,099 --> 00:04:39,740
thread and turn in

00:04:38,090 --> 00:04:42,650
something that runs multiple co-routines

00:04:39,740 --> 00:04:44,570
inside it but then of course you may

00:04:42,650 --> 00:04:47,090
want to call synchronous code maybe

00:04:44,570 --> 00:04:48,230
legacy piping code or things that just

00:04:47,090 --> 00:04:51,200
need to be synchronous or they're

00:04:48,230 --> 00:04:52,250
simpler from your asynchronous code it's

00:04:51,200 --> 00:04:53,810
now we have to call you have to make a

00:04:52,250 --> 00:04:55,160
separate thread and they call the

00:04:53,810 --> 00:04:57,980
synchronous thread from your

00:04:55,160 --> 00:04:59,419
asynchronous thread and this gets really

00:04:57,980 --> 00:05:01,040
tricky and we'll see how later

00:04:59,419 --> 00:05:03,530
I just appreciate the idea that like

00:05:01,040 --> 00:05:06,260
when we talk about threading in Python a

00:05:03,530 --> 00:05:08,090
thread is either running a event loop

00:05:06,260 --> 00:05:09,710
and there's an asynchronous thread or it

00:05:08,090 --> 00:05:11,000
is not running an event loop and it's a

00:05:09,710 --> 00:05:13,550
synchronous thread and that's kind of

00:05:11,000 --> 00:05:16,400
the dual mode you can have Easter eight

00:05:13,550 --> 00:05:19,250
is one of the two of them now why don't

00:05:16,400 --> 00:05:21,530
we just use threads threads are slow as

00:05:19,250 --> 00:05:24,710
I mentioned it's not a real like

00:05:21,530 --> 00:05:26,630
os-level threading implementation and so

00:05:24,710 --> 00:05:28,850
what ends up happening is the more

00:05:26,630 --> 00:05:30,979
threads you add the more Python just

00:05:28,850 --> 00:05:33,410
naively cycles into each of threads and

00:05:30,979 --> 00:05:35,630
it gets slower and slower and slower if

00:05:33,410 --> 00:05:38,120
you try and run 10,000 threads on Python

00:05:35,630 --> 00:05:40,130
it will just crumble under the weight of

00:05:38,120 --> 00:05:42,680
context switching constantly and never

00:05:40,130 --> 00:05:45,530
get any work done and so the goal here

00:05:42,680 --> 00:05:48,140
is we want to have async as amber eluded

00:05:45,530 --> 00:05:51,080
async is fast as long as your IO bound

00:05:48,140 --> 00:05:52,940
luckily we write websites websites are

00:05:51,080 --> 00:05:54,740
pretty much IO bound the entire time

00:05:52,940 --> 00:05:57,020
either you're waiting for the user to

00:05:54,740 --> 00:05:59,030
upload stuff from HTTP or you're talking

00:05:57,020 --> 00:06:02,150
to a database we're talking to an API

00:05:59,030 --> 00:06:04,010
like all these things are I oh very few

00:06:02,150 --> 00:06:07,220
sites in the world spend their time

00:06:04,010 --> 00:06:08,930
literally a lot in the CPU doing cure

00:06:07,220 --> 00:06:10,580
calculation template rendering for

00:06:08,930 --> 00:06:12,710
example is usually that but even in

00:06:10,580 --> 00:06:14,360
Django template rendering often calls

00:06:12,710 --> 00:06:17,479
the database and so you've there

00:06:14,360 --> 00:06:19,669
immediately got some IO in it and the

00:06:17,479 --> 00:06:21,520
other thing to consider is while async

00:06:19,669 --> 00:06:23,780
may seem like a wonderful solution

00:06:21,520 --> 00:06:26,600
there's a slight issue with the way

00:06:23,780 --> 00:06:28,550
Python was designed and this is no fault

00:06:26,600 --> 00:06:31,250
particularly of the Python core team

00:06:28,550 --> 00:06:33,590
like it is the way it evolved because of

00:06:31,250 --> 00:06:35,090
the way Python I think came out of yield

00:06:33,590 --> 00:06:37,850
and yield from there's a long history

00:06:35,090 --> 00:06:39,830
there async functions are different to

00:06:37,850 --> 00:06:42,860
synchronous functions one function

00:06:39,830 --> 00:06:44,510
cannot be both of them this is really

00:06:42,860 --> 00:06:46,880
awkward when you're designing api's and

00:06:44,510 --> 00:06:48,710
we'll touch on this later but really

00:06:46,880 --> 00:06:51,320
what it ends up being is that you can't

00:06:48,710 --> 00:06:51,630
have one function that you can call from

00:06:51,320 --> 00:06:53,640
the same

00:06:51,630 --> 00:06:56,400
context and that you can call from an

00:06:53,640 --> 00:06:58,710
asynchronous context and answer that

00:06:56,400 --> 00:07:01,080
problem if you do it wrong it's

00:06:58,710 --> 00:07:03,360
dangerous if you're in an asynchronous

00:07:01,080 --> 00:07:05,730
thread and as I mentioned it's sort of

00:07:03,360 --> 00:07:07,530
cooperative so it's your job to do the

00:07:05,730 --> 00:07:09,090
minimum minimum out of work and then

00:07:07,530 --> 00:07:11,790
yield when you're sort of waiting for

00:07:09,090 --> 00:07:14,700
i/o if you have naive synchronous code

00:07:11,790 --> 00:07:17,190
in that carotene that synchronously goes

00:07:14,700 --> 00:07:19,590
and does a blocking fetch you've just

00:07:17,190 --> 00:07:22,200
locked up the entire event loop for that

00:07:19,590 --> 00:07:24,330
second or two seconds that that remote

00:07:22,200 --> 00:07:26,310
web call takes and the event loop cannot

00:07:24,330 --> 00:07:28,470
cut you off it cannot come in and stop

00:07:26,310 --> 00:07:31,350
you you have literally just ruined the

00:07:28,470 --> 00:07:33,600
contract of being cooperative and so if

00:07:31,350 --> 00:07:36,390
you are calling synchronous code in an

00:07:33,600 --> 00:07:37,980
asynchronous and it is dangerous and it

00:07:36,390 --> 00:07:39,900
also it's very easy to do by mistake if

00:07:37,980 --> 00:07:43,080
you just forget to put a weight in that

00:07:39,900 --> 00:07:44,940
can be a problem and so these are all

00:07:43,080 --> 00:07:46,200
problems we face and like here's this

00:07:44,940 --> 00:07:48,080
illustration of that problem right like

00:07:46,200 --> 00:07:49,860
I have an asynchronous thread

00:07:48,080 --> 00:07:52,230
accidentally make one of the co-routines

00:07:49,860 --> 00:07:54,450
synchronous and nothing happens for a

00:07:52,230 --> 00:07:55,800
full second what you want is do you

00:07:54,450 --> 00:07:58,350
think I mentioned earlier where you go

00:07:55,800 --> 00:07:59,940
our I have some synchronous code I'm

00:07:58,350 --> 00:08:03,180
gonna shove it into a separate thread

00:07:59,940 --> 00:08:04,950
and then I can return control to my

00:08:03,180 --> 00:08:07,200
event loop let the event loop do other

00:08:04,950 --> 00:08:08,580
stuff in the meantime and when my thread

00:08:07,200 --> 00:08:09,780
is finished it will then signal the

00:08:08,580 --> 00:08:11,670
event loop to come back and resume my

00:08:09,780 --> 00:08:13,620
care routine that's the pattern you kind

00:08:11,670 --> 00:08:17,130
of what to do if you haven't got the

00:08:13,620 --> 00:08:20,070
impression yet it's very complicated and

00:08:17,130 --> 00:08:22,530
as well get into async code is great but

00:08:20,070 --> 00:08:23,250
I encourage you even when Jango has full

00:08:22,530 --> 00:08:26,310
support for it

00:08:23,250 --> 00:08:28,290
write synchronous code first understand

00:08:26,310 --> 00:08:30,720
your logic understand where it falls

00:08:28,290 --> 00:08:33,120
down and then take the parts of the

00:08:30,720 --> 00:08:35,130
optimization and take those asynchronous

00:08:33,120 --> 00:08:37,169
and that's kind of the fuss you'll hear

00:08:35,130 --> 00:08:39,210
throughout this talk is that a synchrony

00:08:37,169 --> 00:08:42,300
is great and it should be an optional

00:08:39,210 --> 00:08:44,670
add-on so let's talk about django django

00:08:42,300 --> 00:08:47,030
is a big framework I love it it's been a

00:08:44,670 --> 00:08:49,830
big part of my career in programming and

00:08:47,030 --> 00:08:51,330
one of the reasons I like it so much is

00:08:49,830 --> 00:08:53,370
that it's very stable and predictable

00:08:51,330 --> 00:08:54,750
and this of course brings with it a

00:08:53,370 --> 00:08:57,450
whole host of problems when we're saying

00:08:54,750 --> 00:09:00,330
well we want to totally change that one

00:08:57,450 --> 00:09:02,970
of the paradigms it operates on as I

00:09:00,330 --> 00:09:04,860
mentioned a function cannot be both

00:09:02,970 --> 00:09:06,690
synchronous and asynchronous

00:09:04,860 --> 00:09:09,360
and this amazing presents a problem when

00:09:06,690 --> 00:09:11,430
you think of any API in django so let's

00:09:09,360 --> 00:09:13,470
take the caching framework caches are

00:09:11,430 --> 00:09:15,330
usually on the network let's say I'm

00:09:13,470 --> 00:09:17,910
talking to memcache or Redis I have to

00:09:15,330 --> 00:09:19,590
go to a connection ask for the get get

00:09:17,910 --> 00:09:21,750
it back it's usually like you know tens

00:09:19,590 --> 00:09:24,330
of milliseconds which as you compared to

00:09:21,750 --> 00:09:27,510
nor CPU time is an eternity so I should

00:09:24,330 --> 00:09:29,190
be being hazing here but while Django

00:09:27,510 --> 00:09:31,620
has the top one here it has the normal

00:09:29,190 --> 00:09:34,770
cached or get we can't make the bottom

00:09:31,620 --> 00:09:37,260
line work we can't have cache get also

00:09:34,770 --> 00:09:39,270
be asynchronous compatible we can have a

00:09:37,260 --> 00:09:41,700
cache get async and have two different

00:09:39,270 --> 00:09:44,820
functions but as you can imagine that

00:09:41,700 --> 00:09:47,010
makes for a very ugly API like the posle

00:09:44,820 --> 00:09:48,870
we have is actually do cached or async

00:09:47,010 --> 00:09:50,850
get and try namespace them under that

00:09:48,870 --> 00:09:53,550
kind of thing but even that's a little

00:09:50,850 --> 00:09:55,610
bit ugly and a little bit extra code to

00:09:53,550 --> 00:09:58,140
maintain and that's just to start

00:09:55,610 --> 00:10:00,510
Django is built on a series of

00:09:58,140 --> 00:10:03,000
incredible third-party libraries from

00:10:00,510 --> 00:10:06,390
the Python community specifically

00:10:03,000 --> 00:10:08,550
databases things like the memcache

00:10:06,390 --> 00:10:10,440
libraries talked about things like the

00:10:08,550 --> 00:10:12,330
Python imaging library or pillows and is

00:10:10,440 --> 00:10:14,570
now these are all libraries that were

00:10:12,330 --> 00:10:17,700
written in a synchronous world and

00:10:14,570 --> 00:10:21,090
things like databases we have a standard

00:10:17,700 --> 00:10:23,670
called DB API to it's synchronous there

00:10:21,090 --> 00:10:26,070
is no DBA pi3 that's asynchronous there

00:10:23,670 --> 00:10:27,930
is no standard way for all the different

00:10:26,070 --> 00:10:31,320
async my sequel and Postgres libraries

00:10:27,930 --> 00:10:33,480
to present themselves to django even

00:10:31,320 --> 00:10:34,860
sleep is different like it's not even

00:10:33,480 --> 00:10:38,190
the same that it's literally a different

00:10:34,860 --> 00:10:40,380
import from a different place standards

00:10:38,190 --> 00:10:42,720
are really good and one of the problems

00:10:40,380 --> 00:10:45,540
you have when you sort of wander into

00:10:42,720 --> 00:10:47,550
this new world is that they're not there

00:10:45,540 --> 00:10:50,100
anymore and the principle one of these

00:10:47,550 --> 00:10:54,150
of course was how Django presents itself

00:10:50,100 --> 00:10:57,420
to a server whiskey WSGI as it's often

00:10:54,150 --> 00:11:00,450
pronounced better is a wonderful

00:10:57,420 --> 00:11:03,210
standard that has maybe been one of the

00:11:00,450 --> 00:11:05,160
prime reasons Python is so successful as

00:11:03,210 --> 00:11:07,050
a web language because you can pick any

00:11:05,160 --> 00:11:09,450
framework and you can pick any server

00:11:07,050 --> 00:11:11,880
and they will talk to each other like I

00:11:09,450 --> 00:11:13,740
can take G unicorn and I can run flask

00:11:11,880 --> 00:11:15,240
in it I can run Django on it I can run

00:11:13,740 --> 00:11:16,530
anything else in it I can write my awful

00:11:15,240 --> 00:11:17,880
little app I wrote in a weekend as it

00:11:16,530 --> 00:11:20,910
did its own framework

00:11:17,880 --> 00:11:22,529
and we just didn't have this for

00:11:20,910 --> 00:11:24,000
asynchronous stuff there are a few

00:11:22,529 --> 00:11:26,610
proposals from different servers and

00:11:24,000 --> 00:11:28,649
like tight server bindings but I was

00:11:26,610 --> 00:11:31,920
around before whisky was standardized

00:11:28,649 --> 00:11:34,319
and I remember the days of oh this web

00:11:31,920 --> 00:11:35,730
framework has to use this web server you

00:11:34,319 --> 00:11:37,139
have no other option and like that's

00:11:35,730 --> 00:11:41,160
kind of you sort of took them as a

00:11:37,139 --> 00:11:43,290
bundle deal so now we have a SGI and i

00:11:41,160 --> 00:11:45,240
will not go into SGI in full that is I

00:11:43,290 --> 00:11:47,009
put another full 45 minutes of

00:11:45,240 --> 00:11:50,730
presentation that would probably bore

00:11:47,009 --> 00:11:54,540
you all to death but it is a whisky like

00:11:50,730 --> 00:11:57,690
it is as close to whisky as we could get

00:11:54,540 --> 00:12:01,050
it but still being asynchronous and the

00:11:57,690 --> 00:12:03,899
key thing is it is you make an object a

00:12:01,050 --> 00:12:05,339
callable that you give a scope which

00:12:03,899 --> 00:12:07,230
sort of like the environment like oh

00:12:05,339 --> 00:12:09,029
here's your wrote client address here's

00:12:07,230 --> 00:12:11,370
your headers here things like that and

00:12:09,029 --> 00:12:13,740
you get a send and receive callable and

00:12:11,370 --> 00:12:15,660
what that means is unlike WSGI where you

00:12:13,740 --> 00:12:18,540
just get given the input when your calls

00:12:15,660 --> 00:12:20,310
you can sit there and receive packets

00:12:18,540 --> 00:12:22,769
you can do processing between them you

00:12:20,310 --> 00:12:24,720
can send back multiple packets it is

00:12:22,769 --> 00:12:26,220
full duplex as we say in networking and

00:12:24,720 --> 00:12:28,680
this is really useful for things like

00:12:26,220 --> 00:12:32,279
WebSockets but also for HTTP as well

00:12:28,680 --> 00:12:34,250
like modern like HTTP two and three

00:12:32,279 --> 00:12:36,779
features require more and more

00:12:34,250 --> 00:12:38,370
communication between the client and the

00:12:36,779 --> 00:12:42,569
server than just a simple request and

00:12:38,370 --> 00:12:44,100
response and that's just not all the

00:12:42,569 --> 00:12:48,269
language itself kind of works against us

00:12:44,100 --> 00:12:50,790
to some language features that Django

00:12:48,269 --> 00:12:53,220
relies upon heavily do not have an async

00:12:50,790 --> 00:12:56,850
equivalent you may all be familiar with

00:12:53,220 --> 00:12:59,579
the fact that you can for example do dot

00:12:56,850 --> 00:13:01,259
something on a rated model and get the

00:12:59,579 --> 00:13:02,880
idea for example here we have instance

00:13:01,259 --> 00:13:05,100
you can do dot foreign key they give

00:13:02,880 --> 00:13:05,730
your name and jangle happily in the

00:13:05,100 --> 00:13:09,000
background

00:13:05,730 --> 00:13:10,589
pause goku database find the instance

00:13:09,000 --> 00:13:13,170
load into memory and then give you the

00:13:10,589 --> 00:13:16,050
name now while we can do in a weight

00:13:13,170 --> 00:13:18,569
version of say objects don't get so

00:13:16,050 --> 00:13:21,029
obvious dot filter that works fine what

00:13:18,569 --> 00:13:24,269
we can't do is we cannot do asynchronous

00:13:21,029 --> 00:13:26,760
actually access if you are in an async

00:13:24,269 --> 00:13:29,360
thread and you call something like dot

00:13:26,760 --> 00:13:31,620
name and it starts running the ORM

00:13:29,360 --> 00:13:33,450
you've just run synchronous code

00:13:31,620 --> 00:13:35,940
you just block the entire thread for

00:13:33,450 --> 00:13:38,940
half a second maybe and you've broken

00:13:35,940 --> 00:13:40,350
the contract and that's really tricky

00:13:38,940 --> 00:13:42,090
inside and this is one of the things

00:13:40,350 --> 00:13:43,620
that like bought me into Django like I

00:13:42,090 --> 00:13:45,390
saw generally oh I can just traverse

00:13:43,620 --> 00:13:47,160
things easy via dots and we'll talk

00:13:45,390 --> 00:13:48,630
about how to solve this one later but

00:13:47,160 --> 00:13:52,800
it's really one of those little tricky

00:13:48,630 --> 00:13:53,400
things and kind of finally threads do

00:13:52,800 --> 00:13:56,790
matter

00:13:53,400 --> 00:13:58,920
while most code in Python is generally

00:13:56,790 --> 00:14:01,190
thread safe some things are not and

00:13:58,920 --> 00:14:04,589
sequel light is one of those things

00:14:01,190 --> 00:14:06,330
Django and sequel light kind of come to

00:14:04,589 --> 00:14:08,520
get like most test Suites are run at

00:14:06,330 --> 00:14:11,370
least its small scale in sequel light

00:14:08,520 --> 00:14:13,380
and if you take sequel light and you

00:14:11,370 --> 00:14:15,029
make a connection in one thread and then

00:14:13,380 --> 00:14:17,760
try need it from another one it will

00:14:15,029 --> 00:14:19,380
just complain it you and explode and so

00:14:17,760 --> 00:14:21,660
even though we're trying to get rid of

00:14:19,380 --> 00:14:24,089
threads we still have to consider them

00:14:21,660 --> 00:14:26,580
because of the fact that asynchronous

00:14:24,089 --> 00:14:28,980
code is in itself running in a thread

00:14:26,580 --> 00:14:31,260
and if you call synchronous code it runs

00:14:28,980 --> 00:14:33,900
in a different thread and on top of all

00:14:31,260 --> 00:14:37,830
of this we have to get backwards

00:14:33,900 --> 00:14:40,110
compatible Django has been with very

00:14:37,830 --> 00:14:43,350
very few minor exceptions backwards

00:14:40,110 --> 00:14:45,000
compatible since 1.0 like every release

00:14:43,350 --> 00:14:47,700
you can go you can open the release

00:14:45,000 --> 00:14:49,470
notes you can go oh okay I see I just

00:14:47,700 --> 00:14:51,270
these few small changes and they've

00:14:49,470 --> 00:14:54,270
declared in advance and I can get there

00:14:51,270 --> 00:14:55,740
what that means is we have to keep that

00:14:54,270 --> 00:14:57,330
I can't just give you all a version of

00:14:55,740 --> 00:14:58,830
Django it's like oh this is totally

00:14:57,330 --> 00:15:00,450
different here to rewrite from scratch

00:14:58,830 --> 00:15:02,130
because quite rightly you should all say

00:15:00,450 --> 00:15:04,320
no Andrew that's stupid I'm not going to

00:15:02,130 --> 00:15:06,060
use this and so we have to make sure

00:15:04,320 --> 00:15:07,980
that all of these features are accounted

00:15:06,060 --> 00:15:10,830
for and that when you take an existing

00:15:07,980 --> 00:15:12,750
Django application and move it into this

00:15:10,830 --> 00:15:14,820
new version of Django and had one async

00:15:12,750 --> 00:15:17,910
view that all of the rest of it runs

00:15:14,820 --> 00:15:20,820
perfectly fine still and so we have this

00:15:17,910 --> 00:15:21,900
from like async has to as Django like we

00:15:20,820 --> 00:15:24,270
can't replace a whole sale we have to

00:15:21,900 --> 00:15:26,700
play up well you get to add one or two

00:15:24,270 --> 00:15:29,310
async views to your current project but

00:15:26,700 --> 00:15:30,660
the rest it still runs fine things

00:15:29,310 --> 00:15:32,640
should look familiar that util feel

00:15:30,660 --> 00:15:34,560
Django ish you should still have things

00:15:32,640 --> 00:15:36,240
like dot objects and the filters and the

00:15:34,560 --> 00:15:37,380
models and the view should work the same

00:15:36,240 --> 00:15:40,650
way and the middleware should seem

00:15:37,380 --> 00:15:42,959
familiar and they need to be safe Django

00:15:40,650 --> 00:15:44,850
has always stopped you from essentially

00:15:42,959 --> 00:15:45,560
shooting yourself in the foot we try and

00:15:44,850 --> 00:15:47,810
make sure that it

00:15:45,560 --> 00:15:49,910
with things that are safe by default

00:15:47,810 --> 00:15:51,350
debug is the one exception to that and

00:15:49,910 --> 00:15:53,240
we really try make you turn it off in

00:15:51,350 --> 00:15:55,190
production but in general it's very like

00:15:53,240 --> 00:15:56,810
things like the authentication framework

00:15:55,190 --> 00:15:58,220
has since like constant time pass for

00:15:56,810 --> 00:15:59,750
comparison that people don't really

00:15:58,220 --> 00:16:02,990
think about they get attacked with a

00:15:59,750 --> 00:16:05,600
password break and this is all the

00:16:02,990 --> 00:16:08,150
problem of like what it takes to take

00:16:05,600 --> 00:16:10,880
Django and really pull it apart to make

00:16:08,150 --> 00:16:15,440
it async so let's look at some of those

00:16:10,880 --> 00:16:18,290
actual things in detail so if you have

00:16:15,440 --> 00:16:20,180
never like sort of dived into the Django

00:16:18,290 --> 00:16:23,150
internals and give you a brief overview

00:16:20,180 --> 00:16:24,890
of how Django is laid out this is

00:16:23,150 --> 00:16:27,200
obviously a very simplified version of

00:16:24,890 --> 00:16:28,490
Django but essentially Django has a

00:16:27,200 --> 00:16:30,350
couple of different a couple of

00:16:28,490 --> 00:16:33,730
different pieces it's built around a

00:16:30,350 --> 00:16:36,230
recruit a request path where you have a

00:16:33,730 --> 00:16:38,089
WSGI server that calls a thing called

00:16:36,230 --> 00:16:41,029
the handler which sort of translates

00:16:38,089 --> 00:16:42,770
WSGI into what Django thinks of as a

00:16:41,029 --> 00:16:45,290
request the request object we would be

00:16:42,770 --> 00:16:47,210
all use the hand R then sort of stalks

00:16:45,290 --> 00:16:49,670
and runs the middle where it then talks

00:16:47,210 --> 00:16:51,530
to URL Rooter and it ends up with a

00:16:49,670 --> 00:16:54,050
request it's been through middleware and

00:16:51,530 --> 00:16:55,130
a view function and it takes those and

00:16:54,050 --> 00:16:57,200
it runs the view function with the

00:16:55,130 --> 00:16:58,640
request and the view function is then of

00:16:57,200 --> 00:17:00,530
course supplied by you the wonderful

00:16:58,640 --> 00:17:02,300
developer and then you can call the ORM

00:17:00,530 --> 00:17:04,429
you can call template you can call forms

00:17:02,300 --> 00:17:05,929
and then when you return a response the

00:17:04,429 --> 00:17:09,319
handler takes the response object it

00:17:05,929 --> 00:17:11,209
decodes it back into the network so W

00:17:09,319 --> 00:17:14,390
layer and a hands it back to the server

00:17:11,209 --> 00:17:16,550
and this is sort of kind of useful

00:17:14,390 --> 00:17:17,870
because what we can do is we can take

00:17:16,550 --> 00:17:20,420
one of the key things I've learned about

00:17:17,870 --> 00:17:22,880
doing big rewrites which is a phased

00:17:20,420 --> 00:17:25,699
approach in particular we can go outside

00:17:22,880 --> 00:17:27,829
in and this is kind of what we I sort of

00:17:25,699 --> 00:17:31,070
alluded to and amber was talking about

00:17:27,829 --> 00:17:33,170
like what's in Django 3 + 3 1 there's

00:17:31,070 --> 00:17:33,890
three phases sort of I broken down to

00:17:33,170 --> 00:17:36,260
simply Ennis

00:17:33,890 --> 00:17:38,840
the first one is having support for

00:17:36,260 --> 00:17:42,610
talking not just dagger SGI for talking

00:17:38,840 --> 00:17:45,590
to a different back-end protocol a SGI

00:17:42,610 --> 00:17:48,080
phase 2 is making that core part of the

00:17:45,590 --> 00:17:50,929
request path the handler the middleware

00:17:48,080 --> 00:17:53,150
and the views all async capable and the

00:17:50,929 --> 00:17:54,710
third phase is taking the ORM the thing

00:17:53,150 --> 00:17:56,990
I mentioned the top of this talk that's

00:17:54,710 --> 00:17:59,180
probably the best use of async that you

00:17:56,990 --> 00:18:02,420
get the most efficiency out of

00:17:59,180 --> 00:18:04,820
and making that a thing as well and so

00:18:02,420 --> 00:18:07,460
these three each have their own benefit

00:18:04,820 --> 00:18:09,620
the first phase a SGI support is maybe

00:18:07,460 --> 00:18:11,390
the least useful to you the end

00:18:09,620 --> 00:18:13,400
developer and but it's a really

00:18:11,390 --> 00:18:15,800
important foundation for us to how in

00:18:13,400 --> 00:18:18,320
place so that not only do we have the

00:18:15,800 --> 00:18:20,780
ability to build phase 2 but also we we

00:18:18,320 --> 00:18:23,450
sort of tell the ecosystem hey we are

00:18:20,780 --> 00:18:25,580
gonna support a SGI when the next

00:18:23,450 --> 00:18:26,840
release comes around you should probably

00:18:25,580 --> 00:18:28,280
think about making sure you're gonna

00:18:26,840 --> 00:18:29,360
work with this and some servers are

00:18:28,280 --> 00:18:32,180
already thinking about adding support

00:18:29,360 --> 00:18:34,520
beyond just the ones we have now and in

00:18:32,180 --> 00:18:35,870
terms of timing this has shifted in the

00:18:34,520 --> 00:18:37,580
last couple of months my initial goal

00:18:35,870 --> 00:18:40,040
was django 3 for both the first two

00:18:37,580 --> 00:18:43,730
phases but it's been quite a few months

00:18:40,040 --> 00:18:46,160
let's say and so django 3 does have SGI

00:18:43,730 --> 00:18:48,530
support when that releases in late later

00:18:46,160 --> 00:18:52,730
this year it will run against an a SGI

00:18:48,530 --> 00:18:54,320
server phase two which is async views

00:18:52,730 --> 00:18:56,510
and middleware did not make the cut but

00:18:54,320 --> 00:19:01,120
that should almost certainly make into

00:18:56,510 --> 00:19:03,740
django 3 1 and then the our own work is

00:19:01,120 --> 00:19:06,170
the largest and most difficult and most

00:19:03,740 --> 00:19:08,570
unbounded part of this my hope is it

00:19:06,170 --> 00:19:10,580
makes it into django 3.2 and but I'm not

00:19:08,570 --> 00:19:13,310
gonna hold myself to that at this early

00:19:10,580 --> 00:19:15,590
stage and the other key thing is I've

00:19:13,310 --> 00:19:18,650
learned for big rewrites is you have to

00:19:15,590 --> 00:19:19,820
plan for failure if you've seen some of

00:19:18,650 --> 00:19:21,580
my other talks about engineering like

00:19:19,820 --> 00:19:25,190
applying the failure is very important

00:19:21,580 --> 00:19:27,980
even if we cancel at any point of this

00:19:25,190 --> 00:19:29,630
project we have concrete benefits if we

00:19:27,980 --> 00:19:31,370
cancel after phase 1 which we haven't

00:19:29,630 --> 00:19:33,200
done we still have the support to like

00:19:31,370 --> 00:19:35,780
has somebody else coming in a future and

00:19:33,200 --> 00:19:37,220
make it part of Django async if we

00:19:35,780 --> 00:19:39,800
cancel off to phase 2 and just have

00:19:37,220 --> 00:19:41,720
async views that in itself is a huge

00:19:39,800 --> 00:19:43,910
benefit people can now go and use things

00:19:41,720 --> 00:19:45,560
like a sync requests libraries and go

00:19:43,910 --> 00:19:47,390
and talk to things themselves they can't

00:19:45,560 --> 00:19:50,570
use it around the same way but they can

00:19:47,390 --> 00:19:52,400
do a lot of API calls easily and a lot

00:19:50,570 --> 00:19:55,400
of modern web development is API driven

00:19:52,400 --> 00:19:56,630
and of course if we do like half the ORM

00:19:55,400 --> 00:19:59,720
that still don't bring performance

00:19:56,630 --> 00:20:01,160
improvements so let's talk about each of

00:19:59,720 --> 00:20:03,410
those phases in a bit more depth from

00:20:01,160 --> 00:20:06,380
what it means to be outside in it so

00:20:03,410 --> 00:20:07,150
first of all a SGI and the file and bit

00:20:06,380 --> 00:20:11,630
of history here

00:20:07,150 --> 00:20:12,710
Django predates WSGI when I first came

00:20:11,630 --> 00:20:16,789
to Django in around

00:20:12,710 --> 00:20:18,500
the 0.96 era WSGI was this new sort of

00:20:16,789 --> 00:20:20,330
thing but like oh we could have a

00:20:18,500 --> 00:20:23,720
standard that wasn't just tied to one

00:20:20,330 --> 00:20:26,779
server and one of my favorite examples

00:20:23,720 --> 00:20:28,970
of the almost weird few rory around this

00:20:26,779 --> 00:20:30,710
back then and they start walkin though

00:20:28,970 --> 00:20:33,140
people kind of thought django was a bit

00:20:30,710 --> 00:20:34,460
full of itself back then this is one

00:20:33,140 --> 00:20:36,980
favorite quote from our very own James

00:20:34,460 --> 00:20:40,640
Bennett in a 2006 blog post called

00:20:36,980 --> 00:20:42,890
Django and NIH as he says just so you

00:20:40,640 --> 00:20:45,169
know Django is a smug arrogant framework

00:20:42,890 --> 00:20:46,789
that doesn't play nice with others or at

00:20:45,169 --> 00:20:48,770
least that's the impression you'd get

00:20:46,789 --> 00:20:50,059
from reading the rants I want to bring

00:20:48,770 --> 00:20:52,940
this up because like there was a time

00:20:50,059 --> 00:20:54,320
when SS GI was in its own way

00:20:52,940 --> 00:20:57,140
controversial right but there's no

00:20:54,320 --> 00:20:59,480
history here and what is wonderful about

00:20:57,140 --> 00:21:03,409
this is the fact that Django predates

00:20:59,480 --> 00:21:06,860
WSGI we kept the fit the indirection

00:21:03,409 --> 00:21:08,480
between WSGI and Django in there like I

00:21:06,860 --> 00:21:10,549
sort of dusted it off after basically a

00:21:08,480 --> 00:21:12,500
decade and went oh we can still fit a

00:21:10,549 --> 00:21:14,929
new protocol on here we let we left this

00:21:12,500 --> 00:21:16,520
junction point where like you just had W

00:21:14,929 --> 00:21:18,679
I hooked up to it we remove the old one

00:21:16,520 --> 00:21:20,390
years ago but it was still there and

00:21:18,679 --> 00:21:22,669
that's one of the wonderful like history

00:21:20,390 --> 00:21:24,730
things that has come full circle and

00:21:22,669 --> 00:21:27,080
lets us make things more easily and

00:21:24,730 --> 00:21:28,789
there's other things too like we have

00:21:27,080 --> 00:21:30,770
our own request and response objects

00:21:28,789 --> 00:21:33,470
again this is a useful thing because we

00:21:30,770 --> 00:21:34,940
can adapt those to either protocol we

00:21:33,470 --> 00:21:36,320
have our own handler classes as I said

00:21:34,940 --> 00:21:39,500
the perfect place to put this new

00:21:36,320 --> 00:21:41,450
abstraction and of course we have custom

00:21:39,500 --> 00:21:42,919
middleware for those of you who went

00:21:41,450 --> 00:21:45,710
around from PI's in ten years ago which

00:21:42,919 --> 00:21:47,840
is presumably most of you there was this

00:21:45,710 --> 00:21:49,850
wonderful grand vision of WSGI

00:21:47,840 --> 00:21:51,230
middleware and the you wouldn't need

00:21:49,850 --> 00:21:53,750
middleware anywhere else you just write

00:21:51,230 --> 00:21:55,640
it all as WSGI apps and then django

00:21:53,750 --> 00:21:56,440
would sit underneath all of it and there

00:21:55,640 --> 00:22:00,080
are many reasons

00:21:56,440 --> 00:22:02,539
WSGI middleware is a bad idea but it was

00:22:00,080 --> 00:22:04,460
a huge argument at a time and the fact

00:22:02,539 --> 00:22:06,950
we have our middleware means it actually

00:22:04,460 --> 00:22:08,720
is now easier to adapt so what this

00:22:06,950 --> 00:22:11,059
looks like in a sort of zoomed in level

00:22:08,720 --> 00:22:14,570
well as I said you have the server and

00:22:11,059 --> 00:22:17,539
the server calls that handler class the

00:22:14,570 --> 00:22:19,730
handler class basically reads the

00:22:17,539 --> 00:22:21,860
environment so in WSG is you get a big

00:22:19,730 --> 00:22:24,200
dictionary called Enver on which has lot

00:22:21,860 --> 00:22:25,880
the headers and stuff in it it takes

00:22:24,200 --> 00:22:26,350
that and maps to interrupt a request

00:22:25,880 --> 00:22:28,750
object

00:22:26,350 --> 00:22:30,400
and there is a subclass of requests and

00:22:28,750 --> 00:22:33,400
most of the logic there is in that

00:22:30,400 --> 00:22:35,440
subclass so you give whiskey requests

00:22:33,400 --> 00:22:36,460
there are sort of the Enver on it

00:22:35,440 --> 00:22:38,830
decodes a little bit and does the

00:22:36,460 --> 00:22:40,780
headers itself it also does things like

00:22:38,830 --> 00:22:43,150
if there's an input stream from uploaded

00:22:40,780 --> 00:22:44,980
file or post body it takes that and

00:22:43,150 --> 00:22:46,299
wraps it in a file object and if your

00:22:44,980 --> 00:22:47,890
other bits and bobs to clean up the

00:22:46,299 --> 00:22:50,320
request and make it a single nice

00:22:47,890 --> 00:22:52,660
request object once it's done that and

00:22:50,320 --> 00:22:54,880
it has sort of a generic request it then

00:22:52,660 --> 00:22:57,100
passes control to its super class which

00:22:54,880 --> 00:22:58,720
is called base handler now base handler

00:22:57,100 --> 00:23:02,650
has the generic parts of Django the bits

00:22:58,720 --> 00:23:05,080
that back in the day and now happen on

00:23:02,650 --> 00:23:06,700
both the different protocols things like

00:23:05,080 --> 00:23:08,530
if you have an exception that doesn't

00:23:06,700 --> 00:23:11,530
get caught it has a last chance

00:23:08,530 --> 00:23:13,900
exception handler things like if you set

00:23:11,530 --> 00:23:15,340
I want to have transactions around on my

00:23:13,900 --> 00:23:17,380
views it's the thing that wraps

00:23:15,340 --> 00:23:20,020
transactions run all your views and once

00:23:17,380 --> 00:23:21,909
it's done that it also then is in charge

00:23:20,020 --> 00:23:24,250
of taking your middleware setting

00:23:21,909 --> 00:23:25,929
loading the classes and then running the

00:23:24,250 --> 00:23:28,059
requests through them in order so

00:23:25,929 --> 00:23:29,530
basically it takes a request from its

00:23:28,059 --> 00:23:32,049
subclass it runs through the middle

00:23:29,530 --> 00:23:33,789
where it then ends up with a nice

00:23:32,049 --> 00:23:36,070
request that has all the stuff on it

00:23:33,789 --> 00:23:37,840
pass it to the URL resolver it gets like

00:23:36,070 --> 00:23:39,720
a view wraps in a transaction if it has

00:23:37,840 --> 00:23:43,240
to and then it calls the view and you

00:23:39,720 --> 00:23:46,750
can take this whole idea and you can add

00:23:43,240 --> 00:23:48,340
in the a SGI side and you can see here

00:23:46,750 --> 00:23:51,429
that like there is some duplicate code

00:23:48,340 --> 00:23:54,159
of course but we've reused most of that

00:23:51,429 --> 00:23:55,600
right hand side all I have to do is rock

00:23:54,159 --> 00:23:57,789
like that there's a new request subclass

00:23:55,600 --> 00:24:00,010
which is a couple hundred lines there's

00:23:57,789 --> 00:24:02,260
a new handler which passes from the

00:24:00,010 --> 00:24:03,730
scope rather than an Veron but in

00:24:02,260 --> 00:24:05,860
general like those two bits they do

00:24:03,730 --> 00:24:08,289
their specific code and they both hand

00:24:05,860 --> 00:24:12,190
over control to the base handler and in

00:24:08,289 --> 00:24:14,320
Django 3 these are the async parts the

00:24:12,190 --> 00:24:17,320
asua server the handler and the request

00:24:14,320 --> 00:24:19,960
run natively asynchronously and then as

00:24:17,320 --> 00:24:22,000
soon as a CIA handler passes control to

00:24:19,960 --> 00:24:24,760
the base handler it switches and runs in

00:24:22,000 --> 00:24:26,289
a thread in synchronous mode and that's

00:24:24,760 --> 00:24:28,059
kind of nice because it means I didn't

00:24:26,289 --> 00:24:29,650
have to touch the rest of Django we did

00:24:28,059 --> 00:24:31,659
it you just added the bits on the bottom

00:24:29,650 --> 00:24:33,820
left here in red and then it just sort

00:24:31,659 --> 00:24:37,299
of worked it wasn't quite that easy but

00:24:33,820 --> 00:24:39,070
relatively it was fine one of the nice

00:24:37,299 --> 00:24:40,240
things as well is that a SGI is

00:24:39,070 --> 00:24:42,880
deliberately

00:24:40,240 --> 00:24:44,800
mostly wsg are compatible we sort of

00:24:42,880 --> 00:24:46,390
made sure when it specified that there's

00:24:44,800 --> 00:24:48,790
a pretty direct mapping between the two

00:24:46,390 --> 00:24:51,130
of them for example things that you

00:24:48,790 --> 00:24:54,360
might have in the scope or the matter

00:24:51,130 --> 00:24:57,850
have direct comparisons in the scope in

00:24:54,360 --> 00:25:00,780
the a SGI there are some more tricky

00:24:57,850 --> 00:25:05,350
parts uploaded files is particularly fun

00:25:00,780 --> 00:25:08,650
this here is a proceed shortened version

00:25:05,350 --> 00:25:11,679
of what it takes to upload and ingest a

00:25:08,650 --> 00:25:14,650
file in wci you get given a literal file

00:25:11,679 --> 00:25:16,030
object a SJ gives you events and it

00:25:14,650 --> 00:25:17,710
gives you like chunks of the files it

00:25:16,030 --> 00:25:18,850
streams in from the server so if you

00:25:17,710 --> 00:25:20,740
want to go you can actually run before

00:25:18,850 --> 00:25:22,480
the files for the uploaded and but what

00:25:20,740 --> 00:25:25,330
that means is in Django we have to take

00:25:22,480 --> 00:25:27,700
those chunks write them to a spool

00:25:25,330 --> 00:25:29,440
temporary file which is a Python 3 thing

00:25:27,700 --> 00:25:31,360
like you can shove bytes into it and

00:25:29,440 --> 00:25:33,340
they all sort of live in memory and it

00:25:31,360 --> 00:25:35,470
gets too big it pushes down to disk but

00:25:33,340 --> 00:25:36,820
it gives you a file object we rewind it

00:25:35,470 --> 00:25:39,309
to the beginning and we hand it to the

00:25:36,820 --> 00:25:42,910
thing and all of that lets us just

00:25:39,309 --> 00:25:44,170
basically pop the control through to the

00:25:42,910 --> 00:25:45,820
existing place handler and not have to

00:25:44,170 --> 00:25:48,130
touch it and what that meant was that

00:25:45,820 --> 00:25:50,950
first part that first patch what it was

00:25:48,130 --> 00:25:53,260
big was fully self-contained now you may

00:25:50,950 --> 00:25:54,880
may remember I mentioned in the

00:25:53,260 --> 00:25:58,420
beginning presentation that async

00:25:54,880 --> 00:26:00,370
cooling sync is dangerous and it is but

00:25:58,420 --> 00:26:02,830
thankfully it is a danger you can

00:26:00,370 --> 00:26:05,679
understand and contain and what we have

00:26:02,830 --> 00:26:08,140
is a package called ASCII rare for a sui

00:26:05,679 --> 00:26:10,600
ref if you want it has two things in it

00:26:08,140 --> 00:26:13,150
a callable call a callable called sync -

00:26:10,600 --> 00:26:16,330
async another another one called async

00:26:13,150 --> 00:26:19,090
to sync and as the name suggests they

00:26:16,330 --> 00:26:21,970
map one world to the other so for

00:26:19,090 --> 00:26:23,650
example if you call sync to a sink it's

00:26:21,970 --> 00:26:26,140
asynchronous function like for example

00:26:23,650 --> 00:26:27,070
the based handlers or a handle response

00:26:26,140 --> 00:26:29,080
which is the thing we're trying to call

00:26:27,070 --> 00:26:31,150
it wraps in a thread pool

00:26:29,080 --> 00:26:32,650
it handles exceptions well it makes sure

00:26:31,150 --> 00:26:35,740
things like secret lights are happy and

00:26:32,650 --> 00:26:36,880
then it runs the code and while there's

00:26:35,740 --> 00:26:39,460
a lot of stuff in here like things like

00:26:36,880 --> 00:26:41,770
thread locals work - because while Jango

00:26:39,460 --> 00:26:43,780
tries to avoid thread locals I think

00:26:41,770 --> 00:26:46,000
about half of all the Django sites have

00:26:43,780 --> 00:26:48,640
ever seen shove a request into a thread

00:26:46,000 --> 00:26:51,520
local so we have to handle that - like I

00:26:48,640 --> 00:26:53,110
I know it's convenient but it it's fine

00:26:51,520 --> 00:26:55,149
gonna handle it

00:26:53,110 --> 00:26:57,749
and so it doesn't that stuff for you and

00:26:55,149 --> 00:27:01,299
like if you peer into the box it is

00:26:57,749 --> 00:27:02,769
honestly like slightly worrisome but you

00:27:01,299 --> 00:27:05,379
can close the box and just not think

00:27:02,769 --> 00:27:07,059
about it and just think about like well

00:27:05,379 --> 00:27:08,139
and you've done it and there's other

00:27:07,059 --> 00:27:10,840
people and they've got tests so it's

00:27:08,139 --> 00:27:11,440
probably fine and that's that's the go

00:27:10,840 --> 00:27:12,940
all right

00:27:11,440 --> 00:27:14,379
like I want to make it so like you don't

00:27:12,940 --> 00:27:15,909
have to think about this kind of stuff

00:27:14,379 --> 00:27:17,710
every day that you can trust that

00:27:15,909 --> 00:27:20,169
there's a safe way of going between the

00:27:17,710 --> 00:27:23,019
two worlds and as all of this the

00:27:20,169 --> 00:27:24,999
results is janggu three can speak ASG I

00:27:23,019 --> 00:27:27,249
like when it releases in later this year

00:27:24,999 --> 00:27:31,330
it will do that it unfortunately won't

00:27:27,249 --> 00:27:33,340
have a Singh much to my my sadness but

00:27:31,330 --> 00:27:35,139
it does set that groundwork and if you

00:27:33,340 --> 00:27:37,029
really want to it will let you write

00:27:35,139 --> 00:27:39,249
your own handler and start doing async

00:27:37,029 --> 00:27:41,679
things natively and some some big

00:27:39,249 --> 00:27:43,989
companies do do that but the really

00:27:41,679 --> 00:27:45,720
really good part is phase two and I'm

00:27:43,989 --> 00:27:48,879
excited about this maybe you can't tell

00:27:45,720 --> 00:27:50,200
so I said we're doing a phased one sort

00:27:48,879 --> 00:27:53,499
of outside in approach and what that

00:27:50,200 --> 00:27:55,899
looks like is we take phase one here and

00:27:53,499 --> 00:27:58,450
we sweep asynchrony through Jango and

00:27:55,899 --> 00:28:00,879
make it further in so in particular we

00:27:58,450 --> 00:28:04,499
rewrite base Handler so it is also

00:28:00,879 --> 00:28:07,470
asynchronous and so it can handle

00:28:04,499 --> 00:28:09,730
looking at a view in saying is this view

00:28:07,470 --> 00:28:11,529
asynchronous which in Python is T is

00:28:09,730 --> 00:28:13,629
co-routine function callable you can

00:28:11,529 --> 00:28:16,539
tell before you call it if it's

00:28:13,629 --> 00:28:18,879
synchronous we lose sync to async and

00:28:16,539 --> 00:28:20,080
pull in a thread if it's asynchronous we

00:28:18,879 --> 00:28:22,059
can call it natively and how it run in

00:28:20,080 --> 00:28:24,159
our event loop and what this means is

00:28:22,059 --> 00:28:27,340
now you've got a fully asynchronous path

00:28:24,159 --> 00:28:28,929
through from the SGI server all the way

00:28:27,340 --> 00:28:30,519
through to your view which means you

00:28:28,929 --> 00:28:32,019
have all those benefits of being

00:28:30,519 --> 00:28:33,700
natively async you can run very

00:28:32,019 --> 00:28:36,100
concurrently you can do all that stuff

00:28:33,700 --> 00:28:37,840
you can handle thousands and thousands

00:28:36,100 --> 00:28:39,279
of concurrent connections without

00:28:37,840 --> 00:28:41,440
running out of memory and without

00:28:39,279 --> 00:28:43,570
exhausting threads with some caveats

00:28:41,440 --> 00:28:45,700
we'll get to those the other fun thing

00:28:43,570 --> 00:28:48,039
is what I've said there's only two

00:28:45,700 --> 00:28:50,200
things here there's really a third part

00:28:48,039 --> 00:28:52,960
of this test client the thing you used

00:28:50,200 --> 00:28:55,629
to call Jango in tests is the third

00:28:52,960 --> 00:28:57,100
entry point into base handler like when

00:28:55,629 --> 00:28:58,690
you when you try and calls and test it

00:28:57,100 --> 00:29:00,340
doesn't have to do a full call through

00:28:58,690 --> 00:29:02,139
the jjang of staff sort of fakes a

00:29:00,340 --> 00:29:03,639
request object and then sort of quickly

00:29:02,139 --> 00:29:06,039
pops into the handler with a fake

00:29:03,639 --> 00:29:06,700
request object and so what that means is

00:29:06,039 --> 00:29:09,489
we

00:29:06,700 --> 00:29:12,429
basically forever can have synchronous

00:29:09,489 --> 00:29:14,739
code in either the test client or the

00:29:12,429 --> 00:29:17,019
wci handler calling into the newly

00:29:14,739 --> 00:29:18,429
asynchronous base handler and in fact

00:29:17,019 --> 00:29:22,179
you may end up with a case where you

00:29:18,429 --> 00:29:23,980
have sync calling async calling sync and

00:29:22,179 --> 00:29:25,809
like Django is not dropping support for

00:29:23,980 --> 00:29:27,039
WSGI and we're not dropping support for

00:29:25,809 --> 00:29:29,109
synchronous views like those as those

00:29:27,039 --> 00:29:30,700
are staying around and so we have this

00:29:29,109 --> 00:29:31,989
thing where like we this is gonna be a

00:29:30,700 --> 00:29:35,409
stand a part of the way the code runs

00:29:31,989 --> 00:29:37,899
and the naive ways of doing those two

00:29:35,409 --> 00:29:40,659
transitions async code run is that one

00:29:37,899 --> 00:29:42,309
Python recommends for going sync - async

00:29:40,659 --> 00:29:45,159
and thread pool their way around

00:29:42,309 --> 00:29:47,830
they are very naive they do the thing I

00:29:45,159 --> 00:29:50,350
mentioned where the code on the far

00:29:47,830 --> 00:29:52,480
right there does not run in the same

00:29:50,350 --> 00:29:54,159
thread isn't one on the left and if

00:29:52,480 --> 00:29:55,539
you've got middleware that makes a

00:29:54,159 --> 00:29:57,399
database connection and then leaves it

00:29:55,539 --> 00:29:59,739
in the request for a thing to go and do

00:29:57,399 --> 00:30:02,470
later it blows up in the most

00:29:59,739 --> 00:30:05,679
spectacular fashion and the bugs are the

00:30:02,470 --> 00:30:06,940
test just oh it's awful and this it's

00:30:05,679 --> 00:30:08,200
not a sequel light but it's the one you

00:30:06,940 --> 00:30:11,139
find earliest when you were somewhere in

00:30:08,200 --> 00:30:13,029
the test suite and so I'm not going to

00:30:11,139 --> 00:30:17,049
tell you how I do it because it's very

00:30:13,029 --> 00:30:18,879
very awful but when you do this and when

00:30:17,049 --> 00:30:22,179
you call aging to sink and sink to a

00:30:18,879 --> 00:30:25,090
sink there is a mode called thread

00:30:22,179 --> 00:30:28,720
sensitive if you set that mode it does

00:30:25,090 --> 00:30:31,450
some let's say magic this is not magic

00:30:28,720 --> 00:30:33,399
edition it's kind of magic and it runs

00:30:31,450 --> 00:30:37,419
both those synchronous things in the

00:30:33,399 --> 00:30:39,129
same thread again as a whole talk in

00:30:37,419 --> 00:30:40,629
this and you all hate me for it if you

00:30:39,129 --> 00:30:42,850
want to go and be surprised please read

00:30:40,629 --> 00:30:47,879
the code it's tested really well I

00:30:42,850 --> 00:30:50,369
promise so remember there's a caveat to

00:30:47,879 --> 00:30:52,960
middleware middleware is really annoying

00:30:50,369 --> 00:30:55,389
the old solid Django middleware is great

00:30:52,960 --> 00:30:57,309
you had a class that had process view

00:30:55,389 --> 00:30:59,799
process response you call the middle

00:30:57,309 --> 00:31:02,109
where he did some stuff it left then you

00:30:59,799 --> 00:31:03,669
call then you ran the view gave your

00:31:02,109 --> 00:31:05,859
response you call the middleware your

00:31:03,669 --> 00:31:08,710
left out of it the new style is also

00:31:05,859 --> 00:31:10,929
lovely but it has a problem in terms of

00:31:08,710 --> 00:31:13,570
asynchrony the new style middle where

00:31:10,929 --> 00:31:15,669
you give your middleware a function says

00:31:13,570 --> 00:31:17,200
hey call this create a response and so

00:31:15,669 --> 00:31:19,179
the what happens what that means is the

00:31:17,200 --> 00:31:20,170
middleware lives on the stack and all

00:31:19,179 --> 00:31:22,480
the middleware

00:31:20,170 --> 00:31:23,260
it's sort of suspended above the view

00:31:22,480 --> 00:31:25,360
while it runs

00:31:23,260 --> 00:31:27,190
I mean if did you view returns or raises

00:31:25,360 --> 00:31:28,690
an exception it runs back up through the

00:31:27,190 --> 00:31:30,370
middleware zip through it and if you can

00:31:28,690 --> 00:31:33,790
catch the exception you're great

00:31:30,370 --> 00:31:38,140
now what this means is if you want to

00:31:33,790 --> 00:31:40,120
have a synchrony you've got asynchronous

00:31:38,140 --> 00:31:42,160
get response in the base handler

00:31:40,120 --> 00:31:44,380
you've got asynchronous views you may

00:31:42,160 --> 00:31:46,270
even have asynchronous middleware but if

00:31:44,380 --> 00:31:47,980
you've got just one synchronous

00:31:46,270 --> 00:31:50,410
middleware in that stack and of course

00:31:47,980 --> 00:31:52,900
all the middleware that exists is by

00:31:50,410 --> 00:31:55,360
definition synchronous right now you

00:31:52,900 --> 00:31:57,370
have to use a thread and we've got that

00:31:55,360 --> 00:32:00,630
one piece of synchrony that one piece of

00:31:57,370 --> 00:32:03,160
blue in our lovely red end to end async

00:32:00,630 --> 00:32:05,050
stack and what this means is as long as

00:32:03,160 --> 00:32:06,600
you have synchronous middleware you

00:32:05,050 --> 00:32:08,080
don't get the benefits of having

00:32:06,600 --> 00:32:11,050
thousands of thousand connections

00:32:08,080 --> 00:32:13,270
without using any threads we're pretty

00:32:11,050 --> 00:32:14,710
sure the only way around this it's gonna

00:32:13,270 --> 00:32:16,660
have to be to write all of Django's

00:32:14,710 --> 00:32:18,310
middleware to be natively async because

00:32:16,660 --> 00:32:21,400
I think as you can run async middleware

00:32:18,310 --> 00:32:22,840
on sync views that's perfectly fine but

00:32:21,400 --> 00:32:25,150
that's a really sort of tricky one of

00:32:22,840 --> 00:32:29,020
like we may have say like well if you

00:32:25,150 --> 00:32:30,430
want to have this high concurrency here

00:32:29,020 --> 00:32:32,080
to limit your middleware or add some

00:32:30,430 --> 00:32:33,760
warning flags or detection about what

00:32:32,080 --> 00:32:35,020
kind of middle weights running again

00:32:33,760 --> 00:32:36,520
this is sort of in progress we're

00:32:35,020 --> 00:32:38,350
talking about on the forum if you have

00:32:36,520 --> 00:32:40,660
opinions on this I'd love to hear them

00:32:38,350 --> 00:32:42,670
but it's a really tricky one of all we

00:32:40,660 --> 00:32:44,860
want to keep compatibility with some

00:32:42,670 --> 00:32:47,080
restrictions but make sure you get some

00:32:44,860 --> 00:32:49,090
of the benefits too of course

00:32:47,080 --> 00:32:50,650
the main benefit of an async view is you

00:32:49,090 --> 00:32:53,050
can call stuff asynchronously and things

00:32:50,650 --> 00:32:54,970
like databases and stuff like that and

00:32:53,050 --> 00:32:57,310
you still even with a thread being used

00:32:54,970 --> 00:32:59,410
up it's still faster but it's not quite

00:32:57,310 --> 00:33:01,870
as good as it could be and sort of other

00:32:59,410 --> 00:33:03,880
problems to class-based views are a huge

00:33:01,870 --> 00:33:06,730
issue the whole problem I mentioned with

00:33:03,880 --> 00:33:07,570
you can't have a callable a function

00:33:06,730 --> 00:33:10,330
that's both synchronous and asynchronous

00:33:07,570 --> 00:33:13,780
think of that but the whole generic view

00:33:10,330 --> 00:33:15,820
stack that's the problem there we have

00:33:13,780 --> 00:33:17,980
some ideas again some of them are not so

00:33:15,820 --> 00:33:20,620
pretty but we also might not do that and

00:33:17,980 --> 00:33:23,440
in the in the first patch templates are

00:33:20,620 --> 00:33:24,820
fun too templates are synchronous in

00:33:23,440 --> 00:33:27,370
Django we're not going to touch that yet

00:33:24,820 --> 00:33:29,290
but like you may think but where's the

00:33:27,370 --> 00:33:32,290
template rendering your handler path if

00:33:29,290 --> 00:33:33,410
you raise a 500 error or even a even the

00:33:32,290 --> 00:33:35,210
worst error errors

00:33:33,410 --> 00:33:36,650
Kortright the top there's a template

00:33:35,210 --> 00:33:39,440
handler that spins interaction and

00:33:36,650 --> 00:33:42,010
renders that 500 and so a lot of the

00:33:39,440 --> 00:33:44,330
test failures earlier on was me missing

00:33:42,010 --> 00:33:46,070
that a piece of synchronous code was

00:33:44,330 --> 00:33:47,810
being called sneekly on the side by an

00:33:46,070 --> 00:33:49,670
error handler so just go through and

00:33:47,810 --> 00:33:51,140
just add synched async everywhere we

00:33:49,670 --> 00:33:53,600
could to that bring down the number of

00:33:51,140 --> 00:33:54,380
tests and of course trace bats get kind

00:33:53,600 --> 00:33:57,080
of worse

00:33:54,380 --> 00:33:58,820
all those synced async calls take two or

00:33:57,080 --> 00:34:00,020
three lines up in every trace back so

00:33:58,820 --> 00:34:01,520
we're trying to look at a way to make

00:34:00,020 --> 00:34:04,040
that prettier but it made us happier

00:34:01,520 --> 00:34:07,010
thing we live with but the goal of all

00:34:04,040 --> 00:34:09,140
this is that we have async deaf views in

00:34:07,010 --> 00:34:11,120
Django 3-1 I have a branch where they

00:34:09,140 --> 00:34:12,530
totally work and all but two of the

00:34:11,120 --> 00:34:14,510
tests pass which is why it's not where

00:34:12,530 --> 00:34:15,890
it's there's two tests to fail but by

00:34:14,510 --> 00:34:19,370
all accounts you can take that branch

00:34:15,890 --> 00:34:20,690
you can write one async nephew and do

00:34:19,370 --> 00:34:22,250
async little things in it and it works

00:34:20,690 --> 00:34:24,590
perfectly fine you can take an existing

00:34:22,250 --> 00:34:26,840
Django project just add something to it

00:34:24,590 --> 00:34:28,820
and it works and that's always been the

00:34:26,840 --> 00:34:32,540
goal right and then we get to the hard

00:34:28,820 --> 00:34:34,790
part which is the error Ram now this is

00:34:32,540 --> 00:34:36,169
much less defined I not have spent too

00:34:34,790 --> 00:34:38,290
much time here because it's kind of

00:34:36,169 --> 00:34:41,150
beyond the horizon of the second phase

00:34:38,290 --> 00:34:43,400
but I want to reiterate the API design

00:34:41,150 --> 00:34:46,190
and Jack being Django like here is

00:34:43,400 --> 00:34:49,190
crucial you've got to have familiar but

00:34:46,190 --> 00:34:50,780
safe api's and what's nice is things

00:34:49,190 --> 00:34:53,390
like iterating over query sets like the

00:34:50,780 --> 00:34:55,490
Python did give us a sink for so he can

00:34:53,390 --> 00:34:57,350
just make query set work in both sink

00:34:55,490 --> 00:35:00,560
and a sickness modes if you're iterating

00:34:57,350 --> 00:35:03,230
over it don't get won't work until need

00:35:00,560 --> 00:35:04,610
async dog yet but we can do things like

00:35:03,230 --> 00:35:07,820
this that make it much easier to deal

00:35:04,610 --> 00:35:09,140
with we probably can never do this we

00:35:07,820 --> 00:35:12,440
can probably never have asynchrony work

00:35:09,140 --> 00:35:14,360
with calling and traversing models but

00:35:12,440 --> 00:35:17,270
you should probably be using slated

00:35:14,360 --> 00:35:18,920
anyway and so a bit like if you want to

00:35:17,270 --> 00:35:20,690
use the ORM for an asynchronous function

00:35:18,920 --> 00:35:22,400
you have to use select related it's

00:35:20,690 --> 00:35:23,540
going to be basically the conclusion

00:35:22,400 --> 00:35:26,270
there and again this is all optional

00:35:23,540 --> 00:35:28,370
gonna have to do this and the same kind

00:35:26,270 --> 00:35:30,170
of phase approach worked with the ORM we

00:35:28,370 --> 00:35:32,330
start with a fully synchronous one we

00:35:30,170 --> 00:35:34,040
make query set have an async facade

00:35:32,330 --> 00:35:36,050
where it sort of looks a sync and you

00:35:34,040 --> 00:35:37,580
can do stuff but it just runs the rest

00:35:36,050 --> 00:35:39,770
of the ORM in a thread pool behind it

00:35:37,580 --> 00:35:41,840
and then eventually we'll try and make

00:35:39,770 --> 00:35:43,430
the whole thing asynchronous and then

00:35:41,840 --> 00:35:45,580
we'll have a synchronous facade on top

00:35:43,430 --> 00:35:49,480
if you want to call it from say a

00:35:45,580 --> 00:35:51,670
for you in the meantime we get to all of

00:35:49,480 --> 00:35:53,770
that we did add one thing in Django 3

00:35:51,670 --> 00:35:57,010
which is that the Django ORM is now

00:35:53,770 --> 00:35:58,810
fully aware of a sink safety if you try

00:35:57,010 --> 00:36:01,090
and call the ORM from an async context

00:35:58,810 --> 00:36:03,310
in Django 3 it will complain at you

00:36:01,090 --> 00:36:04,480
non-stop it will be like what are you

00:36:03,310 --> 00:36:06,550
doing why are you doing this please stop

00:36:04,480 --> 00:36:08,800
and this is like the important first

00:36:06,550 --> 00:36:10,330
part like we have to make sure it's at

00:36:08,800 --> 00:36:12,190
least somewhat safe so that's the one

00:36:10,330 --> 00:36:14,500
thing we did get the error I'm done but

00:36:12,190 --> 00:36:15,640
it does need a lot more research this is

00:36:14,500 --> 00:36:18,730
one the blondes I'd love to have people

00:36:15,640 --> 00:36:20,710
come and help with I'm I have never

00:36:18,730 --> 00:36:23,320
worked on the query side of the ORM it

00:36:20,710 --> 00:36:25,510
is slightly terrifying and scary in

00:36:23,320 --> 00:36:28,690
there and I'd love some help diving in

00:36:25,510 --> 00:36:31,360
and fixing it all that and that's kind

00:36:28,690 --> 00:36:32,860
of sort of what it takes to dive into

00:36:31,360 --> 00:36:34,300
Django and break it apart a little bit I

00:36:32,860 --> 00:36:36,610
want to spend a little bit of time here

00:36:34,300 --> 00:36:38,170
at the end of the talk looking ahead and

00:36:36,610 --> 00:36:40,390
what this means for Django in the future

00:36:38,170 --> 00:36:44,080
and what this kind of big rewrite really

00:36:40,390 --> 00:36:46,180
means so first of all I really want to

00:36:44,080 --> 00:36:48,670
stress this we are not removing

00:36:46,180 --> 00:36:51,250
synchrony from Django some things just

00:36:48,670 --> 00:36:53,710
don't need to be async this is true of

00:36:51,250 --> 00:36:56,290
people's code like I personally believe

00:36:53,710 --> 00:36:59,410
80 to 90% of the site should be

00:36:56,290 --> 00:37:01,120
synchronous and only a court n 20%

00:36:59,410 --> 00:37:03,460
should be asynchronous but also to

00:37:01,120 --> 00:37:05,410
Django like the URL Rooter is CPU bound

00:37:03,460 --> 00:37:07,180
it does not need updating to be

00:37:05,410 --> 00:37:09,670
asynchronous we just leave it as it is

00:37:07,180 --> 00:37:11,140
and not touch it forms are perfectly

00:37:09,670 --> 00:37:13,480
fine probably unless you're trying to do

00:37:11,140 --> 00:37:15,190
validation small a small problem there

00:37:13,480 --> 00:37:17,350
but in general there are parts we can

00:37:15,190 --> 00:37:19,030
say well this is perfectly fine we can

00:37:17,350 --> 00:37:23,170
just leave this as is and come back to

00:37:19,030 --> 00:37:25,270
it and really for me a sink views are

00:37:23,170 --> 00:37:26,800
the big cornerstone like when we get

00:37:25,270 --> 00:37:29,380
there when we have a release of Django

00:37:26,800 --> 00:37:32,560
we can go async deaf view we have

00:37:29,380 --> 00:37:35,140
unlocked all of this from you have to

00:37:32,560 --> 00:37:37,480
understand weird inside Django stuff too

00:37:35,140 --> 00:37:39,220
you can go into a weekend project where

00:37:37,480 --> 00:37:41,050
you make an asynchronous request library

00:37:39,220 --> 00:37:43,810
or an a or your own small asynchronous

00:37:41,050 --> 00:37:45,910
RM and use it with Django we open up

00:37:43,810 --> 00:37:47,380
Django to the wider aceing ecosystem and

00:37:45,910 --> 00:37:49,780
honestly for me this is the biggest part

00:37:47,380 --> 00:37:51,580
the RM would be great but this really

00:37:49,780 --> 00:37:52,900
opens up the ability to use all those

00:37:51,580 --> 00:37:56,170
wonderful libraries like amber showed

00:37:52,900 --> 00:37:57,430
you in her presentation for example but

00:37:56,170 --> 00:37:58,120
we gotta be careful performance is

00:37:57,430 --> 00:38:00,820
concerned

00:37:58,120 --> 00:38:02,200
we do things in Django to really trim

00:38:00,820 --> 00:38:03,730
down performance like you've got a

00:38:02,200 --> 00:38:05,200
signal that has no listeners it doesn't

00:38:03,730 --> 00:38:06,730
get cold for example is like a special

00:38:05,200 --> 00:38:10,300
edge case doesn't make it faster and

00:38:06,730 --> 00:38:12,670
this is gonna cause some slow down to

00:38:10,300 --> 00:38:15,070
normal synchronous Django it is my

00:38:12,670 --> 00:38:17,440
personal view that if we caused too much

00:38:15,070 --> 00:38:18,970
slowdown we do not do this and we have

00:38:17,440 --> 00:38:21,310
to make sure that it is careful balance

00:38:18,970 --> 00:38:23,820
like we're not gonna ship Django 3-1 but

00:38:21,310 --> 00:38:26,260
makes your site run half as fast like 5%

00:38:23,820 --> 00:38:28,000
10% I might take a penny more than

00:38:26,260 --> 00:38:29,260
that's really pushing it so get really

00:38:28,000 --> 00:38:31,440
careful about that and like what it

00:38:29,260 --> 00:38:33,610
costs us to do all those async switches

00:38:31,440 --> 00:38:37,000
and it's not just technical like there's

00:38:33,610 --> 00:38:39,370
people I have at this point now done one

00:38:37,000 --> 00:38:40,900
and a half big three devices of Django I

00:38:39,370 --> 00:38:43,570
have some experience with burnout and

00:38:40,900 --> 00:38:45,610
it's not good it's not an interest of me

00:38:43,570 --> 00:38:47,490
like like these are projects that are

00:38:45,610 --> 00:38:50,260
very detailed they are very specific and

00:38:47,490 --> 00:38:51,970
it's not just about those of us have

00:38:50,260 --> 00:38:53,860
been in Django forever doing it and

00:38:51,970 --> 00:38:56,050
buffing down getting stuff done that's

00:38:53,860 --> 00:38:58,390
not sustainable what I love about this

00:38:56,050 --> 00:39:01,660
project is it's a perfect example of

00:38:58,390 --> 00:39:03,550
when you can get involved with Django as

00:39:01,660 --> 00:39:05,620
an example like we need to rewrite the

00:39:03,550 --> 00:39:08,350
middleware but if I can give you like

00:39:05,620 --> 00:39:10,270
hey here is othman where it needs to be

00:39:08,350 --> 00:39:11,710
made asynchronous you have a precise

00:39:10,270 --> 00:39:13,720
spec of how it works you have full

00:39:11,710 --> 00:39:16,210
documentation and you know asynchrony

00:39:13,720 --> 00:39:18,880
means and you have a test suite that is

00:39:16,210 --> 00:39:20,950
a very very achievable and approachable

00:39:18,880 --> 00:39:23,020
goal for someone to continue to Chango

00:39:20,950 --> 00:39:24,370
for their first time and so my hope here

00:39:23,020 --> 00:39:25,930
is that we can take this work and not

00:39:24,370 --> 00:39:28,090
just spread it around and make it more

00:39:25,930 --> 00:39:29,350
you know reliable and more sustainable

00:39:28,090 --> 00:39:30,790
but also really bring on new

00:39:29,350 --> 00:39:33,370
contributors and help with this project

00:39:30,790 --> 00:39:35,020
and maybe also have some of you learn

00:39:33,370 --> 00:39:40,270
the true horrors of async when you open

00:39:35,020 --> 00:39:43,000
the box of course you shouldn't also not

00:39:40,270 --> 00:39:45,910
be paid for your time funding is a thing

00:39:43,000 --> 00:39:48,100
that I am sitting on thatis voice on but

00:39:45,910 --> 00:39:49,990
we need funding and like more on this

00:39:48,100 --> 00:39:51,640
will come soon like I have plans that

00:39:49,990 --> 00:39:52,810
are forming on this particular front but

00:39:51,640 --> 00:39:55,090
like if we are going to do a big project

00:39:52,810 --> 00:39:56,620
we need to fund it and make sure it's

00:39:55,090 --> 00:39:58,060
not just people have free time you can

00:39:56,620 --> 00:39:58,570
work on it like that's not good for

00:39:58,060 --> 00:40:02,080
anyone

00:39:58,570 --> 00:40:04,150
and so really like there are async

00:40:02,080 --> 00:40:05,140
experts want to pay for time but even

00:40:04,150 --> 00:40:07,390
people who are new to Jiang you're

00:40:05,140 --> 00:40:08,800
contributing like I don't want you to

00:40:07,390 --> 00:40:11,290
take a financial hit or take it away

00:40:08,800 --> 00:40:13,420
from like freelance contract work too

00:40:11,290 --> 00:40:15,670
to Jango I want that to be a thing that

00:40:13,420 --> 00:40:17,980
you can go no this makes sense to me and

00:40:15,670 --> 00:40:19,450
like maybe it's a small small pay cut

00:40:17,980 --> 00:40:22,660
like I do I open source work but like it

00:40:19,450 --> 00:40:25,750
makes sense and top of all of this of

00:40:22,660 --> 00:40:27,790
course this is really big like this is

00:40:25,750 --> 00:40:29,920
maybe one of the largest changes in all

00:40:27,790 --> 00:40:31,330
of Django's history and I can think of a

00:40:29,920 --> 00:40:33,970
few things when I've been around have

00:40:31,330 --> 00:40:36,040
been very large patches the aptly-named

00:40:33,970 --> 00:40:38,200
a magic removal was just when I arrived

00:40:36,040 --> 00:40:40,570
into Jango which as its name implies

00:40:38,200 --> 00:40:42,430
removed a lot of magic things like

00:40:40,570 --> 00:40:43,810
settings used to automatically import

00:40:42,430 --> 00:40:45,850
remember right this is literally I'm

00:40:43,810 --> 00:40:47,290
really stretching here like things just

00:40:45,850 --> 00:40:49,750
got magically imported to certain places

00:40:47,290 --> 00:40:51,910
and like sister modules got fiddled with

00:40:49,750 --> 00:40:53,890
and it was it was an unpleasant to say

00:40:51,910 --> 00:40:54,940
the least but this is still pretty big

00:40:53,890 --> 00:40:59,110
and we haven't done one of these in a

00:40:54,940 --> 00:41:00,580
while and so like one of the things when

00:40:59,110 --> 00:41:01,990
I was thinking about 18 was like I need

00:41:00,580 --> 00:41:03,370
somewhere to talk to people like the

00:41:01,990 --> 00:41:05,740
Django Forum which we're running now in

00:41:03,370 --> 00:41:07,390
a test phase is partially launched which

00:41:05,740 --> 00:41:09,460
I think I need somewhere to have like

00:41:07,390 --> 00:41:11,650
long conversations that everyone about

00:41:09,460 --> 00:41:13,570
like weird async stuff but not clutter

00:41:11,650 --> 00:41:14,860
up and annoy Django developers with lots

00:41:13,570 --> 00:41:16,930
of weird async stuff that goes on

00:41:14,860 --> 00:41:19,000
forever and ever and like that's kind of

00:41:16,930 --> 00:41:22,300
a difficult part of like how do you as a

00:41:19,000 --> 00:41:25,810
modern open-source organization do this

00:41:22,300 --> 00:41:29,130
kind of stuff but I think finally the

00:41:25,810 --> 00:41:31,390
thing that really gets to me is why

00:41:29,130 --> 00:41:33,520
people often come to me and go like

00:41:31,390 --> 00:41:35,860
Andrew surely acing is just a flash in

00:41:33,520 --> 00:41:37,660
the pan right it's the hot new buzzword

00:41:35,860 --> 00:41:40,180
all the kids the kids talking about it

00:41:37,660 --> 00:41:42,760
but all the kids are talking about why

00:41:40,180 --> 00:41:43,840
why does Django need it and it's a good

00:41:42,760 --> 00:41:46,270
question like there's lots of things I

00:41:43,840 --> 00:41:47,980
think there have been buzzwords or a

00:41:46,270 --> 00:41:50,530
flash in the pan or things that just

00:41:47,980 --> 00:41:52,420
aren't important I think a thing is

00:41:50,530 --> 00:41:53,590
different and obviously amber's talked

00:41:52,420 --> 00:41:56,290
earlier showed a lot of those advantages

00:41:53,590 --> 00:41:59,140
but we live in a world of applications

00:41:56,290 --> 00:42:02,080
where pretty much everything we do is I

00:41:59,140 --> 00:42:05,020
owe bound I can't think of more than one

00:42:02,080 --> 00:42:07,000
site I've worked on that was CPU bound

00:42:05,020 --> 00:42:08,740
that sat there and like used a hundred

00:42:07,000 --> 00:42:10,750
percent of its server if you log into

00:42:08,740 --> 00:42:13,060
pretty much any Django like physical

00:42:10,750 --> 00:42:15,460
server or virtual server but like onto

00:42:13,060 --> 00:42:17,680
the OS and run top it is not at a

00:42:15,460 --> 00:42:19,810
hundred percent CPU usage it is full of

00:42:17,680 --> 00:42:21,160
memory we are memory bound because all

00:42:19,810 --> 00:42:23,810
those threads use a memory after all the

00:42:21,160 --> 00:42:26,210
processes we are not CPU bound

00:42:23,810 --> 00:42:27,980
it is my personal belief that a

00:42:26,210 --> 00:42:31,220
well-written asynchronous django app

00:42:27,980 --> 00:42:32,870
could get a 5 to 10 X efficiency and

00:42:31,220 --> 00:42:35,030
performance improvement if it was

00:42:32,870 --> 00:42:36,770
heavily i/o bound based on some numbers

00:42:35,030 --> 00:42:38,750
and some tests I've run obviously not

00:42:36,770 --> 00:42:40,930
for every app obviously do different

00:42:38,750 --> 00:42:44,030
things different people but it's such a

00:42:40,930 --> 00:42:46,070
huge advantage even putting aside things

00:42:44,030 --> 00:42:48,530
like the fact that we live in a world of

00:42:46,070 --> 00:42:50,990
api's and micro-services right like how

00:42:48,530 --> 00:42:52,490
many big sites are not just Shango

00:42:50,990 --> 00:42:54,230
anymore like you call like two different

00:42:52,490 --> 00:42:56,090
Amazon services and maybe Google Cloud

00:42:54,230 --> 00:42:57,920
Service and maybe over here less icon

00:42:56,090 --> 00:42:59,600
from Mazur and then there's like an API

00:42:57,920 --> 00:43:01,640
servers up here and then there's 3 micro

00:42:59,600 --> 00:43:04,430
services like if you did all those in

00:43:01,640 --> 00:43:06,350
parallel you'd be a lot better off your

00:43:04,430 --> 00:43:08,390
users would have much lower page latency

00:43:06,350 --> 00:43:10,340
and lower page latency is a better user

00:43:08,390 --> 00:43:12,530
experience at the end of the day like

00:43:10,340 --> 00:43:14,450
asynchrony directly comes back to user

00:43:12,530 --> 00:43:16,760
experience like we want sites that are

00:43:14,450 --> 00:43:19,400
responsive and quick our users enjoy

00:43:16,760 --> 00:43:21,860
using like Django is always in my mind

00:43:19,400 --> 00:43:24,410
been about that right Django is there to

00:43:21,860 --> 00:43:26,120
give you the ability to write beautiful

00:43:24,410 --> 00:43:29,090
amazing websites that people love and

00:43:26,120 --> 00:43:31,040
that you do not put too much effort on

00:43:29,090 --> 00:43:33,170
us and again like when we add a Singh to

00:43:31,040 --> 00:43:35,600
Django the goal is that you can

00:43:33,170 --> 00:43:38,300
understand as much or as little as you

00:43:35,600 --> 00:43:40,180
like that you can use as much or as

00:43:38,300 --> 00:43:42,920
little as you like to get those benefits

00:43:40,180 --> 00:43:45,980
and that's for me really is is the pitch

00:43:42,920 --> 00:43:47,660
if you're curious about more there are

00:43:45,980 --> 00:43:49,130
some links here I'll post the slides on

00:43:47,660 --> 00:43:50,150
Twitter just after this if you want to

00:43:49,130 --> 00:43:52,430
not jot them down

00:43:50,150 --> 00:43:54,020
hardly I'll take a picture of them but

00:43:52,430 --> 00:43:56,360
there is a blog post I have that goes

00:43:54,020 --> 00:43:58,310
more into synchrony versus asynchronous

00:43:56,360 --> 00:44:00,380
and what it means to switch threads and

00:43:58,310 --> 00:44:03,040
it has code samples and like some of the

00:44:00,380 --> 00:44:06,640
nasty things I talked about with threads

00:44:03,040 --> 00:44:09,740
dp9 which AMA mentioned which is the

00:44:06,640 --> 00:44:12,050
novella length I would say proposal to

00:44:09,740 --> 00:44:13,820
get a zinc in a Django and then we have

00:44:12,050 --> 00:44:15,740
a page on the wiki which has sort of

00:44:13,820 --> 00:44:17,570
links to the forum and where to go and

00:44:15,740 --> 00:44:19,310
help and ideas a project you could help

00:44:17,570 --> 00:44:21,260
with and if you do want to help please

00:44:19,310 --> 00:44:23,630
come talk to me here come to the sprints

00:44:21,260 --> 00:44:25,760
or even just come to the forum and chat

00:44:23,630 --> 00:44:26,670
and we'd love to hear from you thank you

00:44:25,760 --> 00:44:32,030
very much

00:44:26,670 --> 00:44:45,320
[Applause]

00:44:32,030 --> 00:44:45,320

YouTube URL: https://www.youtube.com/watch?v=d9BAUBEyFgM


