Title: DjangoCon 2019 - Generic View? What is that and why would I use it? by Felipe Lee
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Generic View? What is that and why would I use it? by Felipe Lee

In this talk I'll discuss Django's generic class-based views (CBVs). I'll go into detail on what they are, how they compare to function-based views, and pros/cons for using them. I plan to go deeper into certain aspects of CBVs, explaining some of the internals of how django defines them.

This talk was presented at: https://2019.djangocon.us/talks/generic-view-what-is-that-and-why-would/

LINKS:
Follow Felipe Lee ðŸ‘‡
On Twitter: https://twitter.com/felipeleeg


Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,469 --> 00:00:20,390
hi everyone my name is Felipe I was just

00:00:17,990 --> 00:00:22,520
introduced my talk is gonna be about

00:00:20,390 --> 00:00:25,099
generic views and class-based views in

00:00:22,520 --> 00:00:26,750
general I do want to start by saying

00:00:25,099 --> 00:00:28,490
thank you to all the organizers for

00:00:26,750 --> 00:00:30,109
putting on an amazing Django con it has

00:00:28,490 --> 00:00:33,850
been great I don't know about you all

00:00:30,109 --> 00:00:33,850
anyways but I've had an amazing time oh

00:00:35,170 --> 00:00:46,820
there we go there we go okay um all

00:00:44,350 --> 00:00:50,659
right so a little bit about me I am a

00:00:46,820 --> 00:00:52,760
software engineer at UT Austin I was

00:00:50,659 --> 00:00:54,350
actually trained there at UT because we

00:00:52,760 --> 00:00:57,019
have an amazing program to train people

00:00:54,350 --> 00:00:58,460
that have no background in technology to

00:00:57,019 --> 00:00:59,540
be software developers if you have any

00:00:58,460 --> 00:01:03,470
questions about that you can ask one of

00:00:59,540 --> 00:01:05,900
the many UT people that are here and we

00:01:03,470 --> 00:01:07,729
use Django for a lot of our websites so

00:01:05,900 --> 00:01:11,630
that is also why there are many of us

00:01:07,729 --> 00:01:13,490
here a bit about not some helpful

00:01:11,630 --> 00:01:16,219
knowledge going into my talk is just

00:01:13,490 --> 00:01:19,060
having a basic understanding of Python

00:01:16,219 --> 00:01:22,430
classes you are all routing in Django

00:01:19,060 --> 00:01:24,170
and function based views also a little

00:01:22,430 --> 00:01:28,250
bit of forums but that's not really

00:01:24,170 --> 00:01:29,570
vital and then hopefully you'll walk

00:01:28,250 --> 00:01:31,340
away from this talk with an

00:01:29,570 --> 00:01:35,270
understanding of class-based views and

00:01:31,340 --> 00:01:38,030
specifically generic class-based views

00:01:35,270 --> 00:01:39,409
within Python or within Django sorry and

00:01:38,030 --> 00:01:41,780
then some pros and cons to class-based

00:01:39,409 --> 00:01:46,369
views as well as some examples of good

00:01:41,780 --> 00:01:48,109
and bad use cases a lot of the all have

00:01:46,369 --> 00:01:50,270
code samples throughout my slides and

00:01:48,109 --> 00:01:54,079
they'll be in Python - Django or Python

00:01:50,270 --> 00:01:55,969
3:7 Django - - and then I also have an

00:01:54,079 --> 00:01:59,840
example repo that has some of the

00:01:55,969 --> 00:02:01,609
class-based use usage and the in there I

00:01:59,840 --> 00:02:03,380
also have function based views that like

00:02:01,609 --> 00:02:06,289
mirror the usage so you can kind of see

00:02:03,380 --> 00:02:07,789
what they're like trade-offs and they'll

00:02:06,289 --> 00:02:09,319
be labeled the slides will be the either

00:02:07,789 --> 00:02:11,300
say stamp they'll say sample if it's

00:02:09,319 --> 00:02:14,020
from this repo or if it's from Django

00:02:11,300 --> 00:02:16,430
it'll have the little Django icon

00:02:14,020 --> 00:02:20,569
alright so getting into class-based

00:02:16,430 --> 00:02:22,159
views so first a little bit of history

00:02:20,569 --> 00:02:23,450
there's actually an interesting history

00:02:22,159 --> 00:02:26,599
that led to this

00:02:23,450 --> 00:02:28,670
so one thing that we have a lot with Web

00:02:26,599 --> 00:02:32,840
Apps is a lot of them are just kind of

00:02:28,670 --> 00:02:35,390
crud like you do a lot of crud patterns

00:02:32,840 --> 00:02:37,010
with it and that repeats a lot so Django

00:02:35,390 --> 00:02:38,270
we wanted to make something that would

00:02:37,010 --> 00:02:40,630
make it a little bit easier first so you

00:02:38,270 --> 00:02:44,420
don't end up copy pasting all the time

00:02:40,630 --> 00:02:48,140
and so a solution was to do function

00:02:44,420 --> 00:02:49,489
based generic views which I mean what

00:02:48,140 --> 00:02:51,290
they did is they abstracted bunch of

00:02:49,489 --> 00:02:53,019
logic and you would just pass it a few

00:02:51,290 --> 00:02:54,980
arguments to the function and it would

00:02:53,019 --> 00:02:57,350
handle it so basically you would maybe

00:02:54,980 --> 00:03:00,440
pass it like a template name or like the

00:02:57,350 --> 00:03:01,970
form that you want to use but a problem

00:03:00,440 --> 00:03:03,350
with that is that they're limited you

00:03:01,970 --> 00:03:05,180
can't really extend or customize them

00:03:03,350 --> 00:03:06,739
easily so if your use case was even

00:03:05,180 --> 00:03:09,170
slightly different you basically had to

00:03:06,739 --> 00:03:14,120
recreate the view yourself because of

00:03:09,170 --> 00:03:15,500
how functions are so that's where we got

00:03:14,120 --> 00:03:17,060
the idea for you know class-based views

00:03:15,500 --> 00:03:18,620
because Python classes are meant to

00:03:17,060 --> 00:03:24,319
provide functionality that's easy to

00:03:18,620 --> 00:03:25,819
extend and override so then the question

00:03:24,319 --> 00:03:30,350
became well how do we actually implement

00:03:25,819 --> 00:03:31,579
class space views in Django so one of

00:03:30,350 --> 00:03:33,049
the things we need to keep in mind is

00:03:31,579 --> 00:03:36,650
how do you deploy them how do you use

00:03:33,049 --> 00:03:39,440
them and then how does URL resolver

00:03:36,650 --> 00:03:41,299
actually handle them because it won't be

00:03:39,440 --> 00:03:43,630
the same as with functions or it could

00:03:41,299 --> 00:03:46,160
be but that's what we talked about

00:03:43,630 --> 00:03:47,959
how easy is it to subclass them and

00:03:46,160 --> 00:03:51,650
override whatever functionality you care

00:03:47,959 --> 00:03:53,090
about or need to change and then thread

00:03:51,650 --> 00:03:55,609
safety so you want to make sure that

00:03:53,090 --> 00:03:56,989
every request that comes in is it is on

00:03:55,609 --> 00:04:00,049
its own and it doesn't interact with any

00:03:56,989 --> 00:04:01,850
other requests how easy is it to test

00:04:00,049 --> 00:04:04,040
like do you need to do anything special

00:04:01,850 --> 00:04:07,010
for when you want to test them and how

00:04:04,040 --> 00:04:08,450
easy is it to decorate it because if you

00:04:07,010 --> 00:04:09,590
want to use decorators we want to make

00:04:08,450 --> 00:04:12,769
sure that it's still easy when you

00:04:09,590 --> 00:04:14,420
switch over to a class-based views so

00:04:12,769 --> 00:04:17,750
really quickly let's look at an example

00:04:14,420 --> 00:04:19,760
of URLs by with a function so the second

00:04:17,750 --> 00:04:22,550
argument that you have here is function

00:04:19,760 --> 00:04:24,680
and we just pass it the function without

00:04:22,550 --> 00:04:26,300
it without calling yet or anything that

00:04:24,680 --> 00:04:29,180
you are all resolver will take care of

00:04:26,300 --> 00:04:31,909
calling it with your request and it will

00:04:29,180 --> 00:04:34,000
pass any ARBs or clogs that it needs or

00:04:31,909 --> 00:04:37,210
takes

00:04:34,000 --> 00:04:39,940
and so in essence what this thing is the

00:04:37,210 --> 00:04:42,040
second argument is you want it needs to

00:04:39,940 --> 00:04:43,990
be a palpable that will take in an HTTP

00:04:42,040 --> 00:04:47,920
request and will return an HTTP response

00:04:43,990 --> 00:04:51,580
Oh typo there will return an HTTP

00:04:47,920 --> 00:04:52,840
response and that's enough since what

00:04:51,580 --> 00:04:53,710
you need there but there's a few

00:04:52,840 --> 00:04:58,780
problems when you start thinking about

00:04:53,710 --> 00:05:00,910
how classes work because you with

00:04:58,780 --> 00:05:02,860
classes when you incident when you call

00:05:00,910 --> 00:05:07,300
them you don't normally return something

00:05:02,860 --> 00:05:08,440
that isn't an instance of it so yeah so

00:05:07,300 --> 00:05:10,660
that's one thing to keep in mind another

00:05:08,440 --> 00:05:12,850
thing you think keep in mind is your

00:05:10,660 --> 00:05:15,760
URLs dot PI runs when you start your

00:05:12,850 --> 00:05:18,040
server so if you were to instantiate a

00:05:15,760 --> 00:05:19,990
class right here that's what that would

00:05:18,040 --> 00:05:22,000
happen when you start the server versus

00:05:19,990 --> 00:05:23,770
when every request that comes in so that

00:05:22,000 --> 00:05:27,970
causes some issues that we'll get into a

00:05:23,770 --> 00:05:29,650
little bit yeah so a view instantiation

00:05:27,970 --> 00:05:31,750
and thread safety I'm gonna go over this

00:05:29,650 --> 00:05:34,990
a little bit quickly mostly because this

00:05:31,750 --> 00:05:36,240
isn't directly the meat of my talk or

00:05:34,990 --> 00:05:38,350
the reason for my talk it just kind of

00:05:36,240 --> 00:05:41,760
explains some other reasons why it looks

00:05:38,350 --> 00:05:44,290
how it does now so one of the ideas was

00:05:41,760 --> 00:05:46,660
I'm gonna go over some ideas of what it

00:05:44,290 --> 00:05:49,150
was considered before we got what where

00:05:46,660 --> 00:05:50,830
we are actually now I actually also have

00:05:49,150 --> 00:05:51,940
a link that has the article in case

00:05:50,830 --> 00:05:54,280
you're interested in reading more in

00:05:51,940 --> 00:05:56,050
depth about all the reasons of pros and

00:05:54,280 --> 00:05:58,480
cons and all that so one of the ideas

00:05:56,050 --> 00:06:00,460
was storing the request or storing State

00:05:58,480 --> 00:06:03,310
on the request because like I mentioned

00:06:00,460 --> 00:06:05,830
if you instantiate it in the URLs that

00:06:03,310 --> 00:06:08,260
same instance is gonna be used across

00:06:05,830 --> 00:06:12,220
all your requests so you can't really

00:06:08,260 --> 00:06:15,040
store State on the view because that'll

00:06:12,220 --> 00:06:16,210
be shared so that one of the ideas was

00:06:15,040 --> 00:06:19,150
let's just saw it on the request because

00:06:16,210 --> 00:06:20,890
that gets put in fresh every time but

00:06:19,150 --> 00:06:23,020
obviously that has some cons in that you

00:06:20,890 --> 00:06:24,850
can't well in that you can't store any

00:06:23,020 --> 00:06:27,700
State on the class itself on the

00:06:24,850 --> 00:06:30,160
instance because of the bleeding over so

00:06:27,700 --> 00:06:32,320
that's one issue another idea was with

00:06:30,160 --> 00:06:33,610
call so like basically you would put it

00:06:32,320 --> 00:06:36,970
in there and then when you refer you

00:06:33,610 --> 00:06:40,540
call the instance it would make a

00:06:36,970 --> 00:06:41,410
shallow copy of itself but that's also

00:06:40,540 --> 00:06:43,330
weird

00:06:41,410 --> 00:06:44,919
in like one of the cons is that it is

00:06:43,330 --> 00:06:47,230
weird it's not what you would expect a

00:06:44,919 --> 00:06:50,590
class to do when you call it

00:06:47,230 --> 00:06:51,850
so that's one issue another one is new

00:06:50,590 --> 00:06:53,110
so this is like just when you

00:06:51,850 --> 00:06:55,060
instantiate the class so you would just

00:06:53,110 --> 00:06:57,330
put it basically just the class name you

00:06:55,060 --> 00:06:59,470
wouldn't actually instantiate in URLs

00:06:57,330 --> 00:07:01,300
the issues with this is that you can't

00:06:59,470 --> 00:07:02,680
pass anything to in it so like if you

00:07:01,300 --> 00:07:04,600
want to pass any arguments to it you

00:07:02,680 --> 00:07:06,820
can't really do that easily there's a

00:07:04,600 --> 00:07:09,850
way around that but you'd have to go do

00:07:06,820 --> 00:07:13,630
that other thing so so that was a big

00:07:09,850 --> 00:07:16,240
con to it so another idea was brought up

00:07:13,630 --> 00:07:18,550
to say hey let's define a method on a

00:07:16,240 --> 00:07:22,300
class and this method will take care of

00:07:18,550 --> 00:07:25,470
actually creating our class-based view

00:07:22,300 --> 00:07:27,880
and handling everything as it needs to

00:07:25,470 --> 00:07:29,950
the one of the cons with this though was

00:07:27,880 --> 00:07:33,960
that you also cannot pass arguments to

00:07:29,950 --> 00:07:37,000
it as is so there was a class method too

00:07:33,960 --> 00:07:39,160
and this one you would actually call

00:07:37,000 --> 00:07:42,850
this class method and what this lets you

00:07:39,160 --> 00:07:44,500
do is pass arguments to it and if you

00:07:42,850 --> 00:07:45,850
are familiar at all with class base user

00:07:44,500 --> 00:07:48,760
genera fees you can see that that's

00:07:45,850 --> 00:07:50,980
actually what we went with but but

00:07:48,760 --> 00:07:52,480
there's two more so one more is HTTP

00:07:50,980 --> 00:07:57,490
response subclass so this one's a little

00:07:52,480 --> 00:07:59,650
bit weird so this one they the idea was

00:07:57,490 --> 00:08:01,660
that you would make a view a constructor

00:07:59,650 --> 00:08:07,000
that returned that like creates an HTTP

00:08:01,660 --> 00:08:11,620
response it's weird in that it makes a

00:08:07,000 --> 00:08:13,420
view and HTTP response be tied together

00:08:11,620 --> 00:08:14,800
in an object-oriented way that we kind

00:08:13,420 --> 00:08:17,290
of don't really want it to be because we

00:08:14,800 --> 00:08:19,420
don't want view to be a response we want

00:08:17,290 --> 00:08:22,570
view to return our response eventually

00:08:19,420 --> 00:08:23,830
so some of your things there and the

00:08:22,570 --> 00:08:26,830
other one the final one was you're all

00:08:23,830 --> 00:08:28,570
resolver so another idea was instead of

00:08:26,830 --> 00:08:30,400
messing around with any of that let's

00:08:28,570 --> 00:08:34,240
just make you are always over figure it

00:08:30,400 --> 00:08:36,220
out on its own so it'll take in the or

00:08:34,240 --> 00:08:38,560
it'll check when you pass it hey is this

00:08:36,220 --> 00:08:40,660
a class or is this a function and if

00:08:38,560 --> 00:08:44,169
it's a class do this special handling to

00:08:40,660 --> 00:08:45,400
set it all up and then pass it on but

00:08:44,169 --> 00:08:46,810
that would have cars special handling

00:08:45,400 --> 00:08:49,510
and URL resolver which we didn't want

00:08:46,810 --> 00:08:50,140
and then decorators become a bit of a

00:08:49,510 --> 00:08:53,580
nightmare

00:08:50,140 --> 00:08:56,350
I had to actually decorate your view so

00:08:53,580 --> 00:08:57,000
like I mentioned before as you is the

00:08:56,350 --> 00:09:00,400
way we went

00:08:57,000 --> 00:09:01,030
so as view the way you use it is you so

00:09:00,400 --> 00:09:02,590
this is

00:09:01,030 --> 00:09:06,940
we just have a create to-do list view

00:09:02,590 --> 00:09:08,380
and it's just a class based view and we

00:09:06,940 --> 00:09:10,060
don't instantiate it as I mentioned

00:09:08,380 --> 00:09:12,280
before we don't do that because it

00:09:10,060 --> 00:09:15,700
causes some issues we call as view and

00:09:12,280 --> 00:09:17,320
as you will handle setting everything up

00:09:15,700 --> 00:09:19,450
that we need I'm gonna go into how that

00:09:17,320 --> 00:09:21,670
is handled but for now just know that it

00:09:19,450 --> 00:09:23,710
sets everything up that we need and here

00:09:21,670 --> 00:09:26,980
we'll be able to take a request and

00:09:23,710 --> 00:09:28,750
return a response I have a diagram again

00:09:26,980 --> 00:09:30,640
just to show it and it also has the same

00:09:28,750 --> 00:09:35,020
typo that I didn't fix on the second one

00:09:30,640 --> 00:09:38,290
it returns a response not a request all

00:09:35,020 --> 00:09:41,320
right so at this point we now have class

00:09:38,290 --> 00:09:43,180
space to use they work but we want to

00:09:41,320 --> 00:09:46,270
add some functionality so we start

00:09:43,180 --> 00:09:48,030
getting into mix-ins so the idea was

00:09:46,270 --> 00:09:50,590
that any functionality you want to add

00:09:48,030 --> 00:09:52,030
we should do it in little bits and

00:09:50,590 --> 00:09:54,910
chunks so that you can kind of mix and

00:09:52,030 --> 00:09:56,830
match however you want if you care only

00:09:54,910 --> 00:09:58,690
about this very specific piece you can

00:09:56,830 --> 00:10:00,130
easily grab it without having to either

00:09:58,690 --> 00:10:04,300
recreate it or break something else

00:10:00,130 --> 00:10:06,100
apart so mix-ins were the plan and so we

00:10:04,300 --> 00:10:07,480
would work with class space views with a

00:10:06,100 --> 00:10:11,310
generic class space use would be built

00:10:07,480 --> 00:10:13,960
up through inheritance so for example

00:10:11,310 --> 00:10:15,790
here on the top right we have view and

00:10:13,960 --> 00:10:18,880
that's the view the class-based view

00:10:15,790 --> 00:10:20,380
that just enables everything and then we

00:10:18,880 --> 00:10:21,820
have two mix-ins one of them is context

00:10:20,380 --> 00:10:23,590
mixin one of them is template response

00:10:21,820 --> 00:10:24,850
mixin and so these two add some

00:10:23,590 --> 00:10:27,970
functionality which we'll go into later

00:10:24,850 --> 00:10:30,670
but what we want or what we do with it

00:10:27,970 --> 00:10:33,610
is we combine all three and that'll make

00:10:30,670 --> 00:10:37,170
template view so now we have a generic

00:10:33,610 --> 00:10:41,830
class space you that django provides and

00:10:37,170 --> 00:10:43,570
yeah so let's go into a sample use case

00:10:41,830 --> 00:10:47,980
like why would you even want to use

00:10:43,570 --> 00:10:50,170
generic class space use right so just

00:10:47,980 --> 00:10:52,360
create it creating a new instance of a

00:10:50,170 --> 00:10:55,630
model it's something that's very common

00:10:52,360 --> 00:11:00,240
here's a simple function based view that

00:10:55,630 --> 00:11:02,830
on get will instantiate a form and then

00:11:00,240 --> 00:11:05,130
render your template with the form it's

00:11:02,830 --> 00:11:07,990
pretty simple and then if it's a post

00:11:05,130 --> 00:11:12,010
will instantiate the form pass it the

00:11:07,990 --> 00:11:13,329
data and validate it if it's valid we

00:11:12,010 --> 00:11:15,999
save the form

00:11:13,329 --> 00:11:17,860
then redirect if it's not valid we

00:11:15,999 --> 00:11:20,470
rerender the template with the foreign

00:11:17,860 --> 00:11:21,879
with errors right really simple this is

00:11:20,470 --> 00:11:24,819
a really short view it doesn't really

00:11:21,879 --> 00:11:27,730
take much but like why would you write

00:11:24,819 --> 00:11:29,739
all that when django provides a create

00:11:27,730 --> 00:11:31,329
view a generic view called create view

00:11:29,739 --> 00:11:34,809
and all you have to do is set the

00:11:31,329 --> 00:11:37,059
template name in form class and that's

00:11:34,809 --> 00:11:40,720
it so this already like does everything

00:11:37,059 --> 00:11:42,579
that the function base you did and now

00:11:40,720 --> 00:11:43,989
and your urls basically the way that

00:11:42,579 --> 00:11:45,639
would look is this is the function based

00:11:43,989 --> 00:11:47,589
view he passes the function right on the

00:11:45,639 --> 00:11:49,449
second argument and the class base you

00:11:47,589 --> 00:11:52,779
do to do that create to do list view as

00:11:49,449 --> 00:11:54,279
view and that's it so generic class

00:11:52,779 --> 00:11:55,899
based use are great in that they

00:11:54,279 --> 00:11:58,839
encapsulate a lot of logic that we

00:11:55,899 --> 00:12:00,850
repeat often i'm sure you have to create

00:11:58,839 --> 00:12:02,559
instances all the time so why would you

00:12:00,850 --> 00:12:04,239
want to repeat that type of you for all

00:12:02,559 --> 00:12:09,579
your models or something when you can

00:12:04,239 --> 00:12:13,209
just easily subclass great view so it's

00:12:09,579 --> 00:12:16,059
good to a few pros and cons so so

00:12:13,209 --> 00:12:17,949
function based views some pros explicit

00:12:16,059 --> 00:12:20,049
code flow is like one of the biggest

00:12:17,949 --> 00:12:22,269
pros for function based views in that

00:12:20,049 --> 00:12:24,759
with a function based view it's like any

00:12:22,269 --> 00:12:26,290
Python function as you you can just read

00:12:24,759 --> 00:12:26,619
it straight through and see what it's

00:12:26,290 --> 00:12:31,239
doing

00:12:26,619 --> 00:12:33,429
assuming you wrote it cleanly so you can

00:12:31,239 --> 00:12:35,819
see exactly what's going on there's no

00:12:33,429 --> 00:12:37,809
wondering what happened or anything

00:12:35,819 --> 00:12:41,079
another one is decorators are really

00:12:37,809 --> 00:12:43,179
easy to use easy meaning if you know how

00:12:41,079 --> 00:12:44,499
to use decorators in Python with

00:12:43,179 --> 00:12:45,819
functions you know how to use them with

00:12:44,499 --> 00:12:49,809
function based views because it's the

00:12:45,819 --> 00:12:51,279
same thing some cons they're hard to

00:12:49,809 --> 00:12:53,169
extend and reuse so kind of that same

00:12:51,279 --> 00:12:55,809
issue that we had with the generic views

00:12:53,169 --> 00:12:56,529
in Django the generic function based

00:12:55,809 --> 00:12:58,689
views in Django

00:12:56,529 --> 00:13:00,369
that they were hard to extend and reuse

00:12:58,689 --> 00:13:02,769
you kind of have that same issue with

00:13:00,369 --> 00:13:05,049
your own function based views and the

00:13:02,769 --> 00:13:09,069
other one is HTTP methods are handled

00:13:05,049 --> 00:13:12,970
through conditionals so that gets a

00:13:09,069 --> 00:13:16,360
little bit ugly after a while for

00:13:12,970 --> 00:13:17,799
class-based use though so pros we have

00:13:16,360 --> 00:13:20,079
all the built in generic class space use

00:13:17,799 --> 00:13:24,309
Django provides a ton and they give us a

00:13:20,079 --> 00:13:26,340
lot of functionality and then HTTP

00:13:24,309 --> 00:13:28,320
method and are handled through

00:13:26,340 --> 00:13:30,120
methods on the class so it's a little

00:13:28,320 --> 00:13:31,920
bit cleaner you can just look for the

00:13:30,120 --> 00:13:33,150
method that does exact like if you're

00:13:31,920 --> 00:13:34,560
you doing again you can just go straight

00:13:33,150 --> 00:13:36,779
to the get and see it rather than

00:13:34,560 --> 00:13:38,640
reading through your function logic to

00:13:36,779 --> 00:13:43,290
figure out when do you check to see if

00:13:38,640 --> 00:13:44,670
the methods get and then you can use

00:13:43,290 --> 00:13:47,700
object-oriented techniques meaning you

00:13:44,670 --> 00:13:49,140
can create mix-ins do and head use

00:13:47,700 --> 00:13:50,880
inheritance to your advantage to try to

00:13:49,140 --> 00:13:54,540
like piece together what you need and

00:13:50,880 --> 00:13:56,460
make it easier for yourself one of the

00:13:54,540 --> 00:13:59,520
cons though is and the biggest con is

00:13:56,460 --> 00:14:01,740
implicit code flow so I showed you that

00:13:59,520 --> 00:14:03,450
example earlier of that create view but

00:14:01,740 --> 00:14:05,940
if you don't actually know what create

00:14:03,450 --> 00:14:08,220
view looks like like you don't know what

00:14:05,940 --> 00:14:09,510
it's doing um you're just right now

00:14:08,220 --> 00:14:10,529
taking or unless you're familiar whether

00:14:09,510 --> 00:14:11,790
you're taking my word for it that I'm

00:14:10,529 --> 00:14:13,290
telling you it's doing what that

00:14:11,790 --> 00:14:15,360
function basically was doing it's going

00:14:13,290 --> 00:14:17,910
in and instantiating the form rendering

00:14:15,360 --> 00:14:20,339
the template and handling on post saving

00:14:17,910 --> 00:14:23,400
the form if needed so that can be a

00:14:20,339 --> 00:14:25,440
little bit of an issue especially when

00:14:23,400 --> 00:14:27,000
you're new to coding I know when I first

00:14:25,440 --> 00:14:28,200
started I had a lot of issues in class

00:14:27,000 --> 00:14:33,740
space use cuz I never knew what was

00:14:28,200 --> 00:14:35,850
happening and then decorators are not

00:14:33,740 --> 00:14:37,770
they're not as straightforward to use in

00:14:35,850 --> 00:14:38,820
that classes are different than

00:14:37,770 --> 00:14:40,740
functions so you need to do a few things

00:14:38,820 --> 00:14:43,680
but thankfully Django actually provides

00:14:40,740 --> 00:14:45,589
some ways to help you with that so it's

00:14:43,680 --> 00:14:50,339
not too bad

00:14:45,589 --> 00:14:58,770
and then so getting into some actual

00:14:50,339 --> 00:15:00,930
internals so I really were talking about

00:14:58,770 --> 00:15:03,960
how our base view that actually enables

00:15:00,930 --> 00:15:04,860
class-based views is this this is this

00:15:03,960 --> 00:15:07,470
is it

00:15:04,860 --> 00:15:10,350
it's just a class that has an attribute

00:15:07,470 --> 00:15:11,970
called HTTP method names it uh what

00:15:10,350 --> 00:15:15,000
these method names are basically what's

00:15:11,970 --> 00:15:17,910
allowed in the class base view or what

00:15:15,000 --> 00:15:19,260
methods you're allowed to pass in this

00:15:17,910 --> 00:15:23,490
is different from what you'll handle

00:15:19,260 --> 00:15:25,080
which I'll go into later but yeah and

00:15:23,490 --> 00:15:29,459
the list is cut off because it's long

00:15:25,080 --> 00:15:31,200
and would be not legible otherwise okay

00:15:29,459 --> 00:15:32,790
so on in it the end it's pretty simple

00:15:31,200 --> 00:15:35,610
all it does is it loops through the core

00:15:32,790 --> 00:15:38,100
using pass it and it will set attributes

00:15:35,610 --> 00:15:39,710
or set attribute values to what you

00:15:38,100 --> 00:15:42,200
passed in

00:15:39,710 --> 00:15:46,340
it's really simple but really powerful

00:15:42,200 --> 00:15:48,230
in ways that I will show you later okay

00:15:46,340 --> 00:15:51,340
so you might be wondering hang on we

00:15:48,230 --> 00:15:56,120
don't instantiate our class in the URLs

00:15:51,340 --> 00:15:57,740
and just proving that again here's the

00:15:56,120 --> 00:16:01,070
class-based views in the URLs we don't

00:15:57,740 --> 00:16:03,140
instantiate we call as view so the way

00:16:01,070 --> 00:16:05,500
this works is as view is handles all

00:16:03,140 --> 00:16:07,850
this magic for us so what as we does is

00:16:05,500 --> 00:16:10,820
it's a class only method meaning it's

00:16:07,850 --> 00:16:14,330
meant to be called from the class and it

00:16:10,820 --> 00:16:15,830
will take in it quarks and the name in

00:16:14,330 --> 00:16:21,440
it quarks basically is just telling you

00:16:15,830 --> 00:16:23,210
they are quarks for your in it and then

00:16:21,440 --> 00:16:24,650
so what it does the what we want to be

00:16:23,210 --> 00:16:26,210
careful though so that one of the first

00:16:24,650 --> 00:16:29,420
things to do is we loop through all our

00:16:26,210 --> 00:16:31,280
init quarks and audit two things one we

00:16:29,420 --> 00:16:35,390
don't want any init cards to come in and

00:16:31,280 --> 00:16:37,190
try to set any methods so we check to

00:16:35,390 --> 00:16:38,630
make sure that none of the keys are an

00:16:37,190 --> 00:16:40,730
HTP method name so basically we don't

00:16:38,630 --> 00:16:43,310
want someone to try to pass like get in

00:16:40,730 --> 00:16:44,570
there I guess you could maybe do

00:16:43,310 --> 00:16:48,230
something with lambda or something but

00:16:44,570 --> 00:16:50,060
it's weird things so just avoid it and

00:16:48,230 --> 00:16:51,620
then the next thing is we check to make

00:16:50,060 --> 00:16:54,320
sure it's actually an attribute of the

00:16:51,620 --> 00:16:56,270
view already so we don't want to be

00:16:54,320 --> 00:16:57,590
setting new attributes through this it

00:16:56,270 --> 00:16:59,300
gets a little messy I mean if you really

00:16:57,590 --> 00:17:01,370
want to set a new method but just go to

00:16:59,300 --> 00:17:04,970
find it in your view and then you can

00:17:01,370 --> 00:17:08,930
pass it in so just to be safe we check

00:17:04,970 --> 00:17:10,460
that and then after that so now we get

00:17:08,930 --> 00:17:13,730
into the really interesting bits of as

00:17:10,460 --> 00:17:16,010
view so as view within its definition

00:17:13,730 --> 00:17:18,140
starts defining a new function called

00:17:16,010 --> 00:17:20,720
view which looked may look familiar it's

00:17:18,140 --> 00:17:22,220
just a function based view basically it

00:17:20,720 --> 00:17:25,430
takes a request args and kwargs

00:17:22,220 --> 00:17:27,380
and then the first thing it does is it

00:17:25,430 --> 00:17:29,690
in this what the first thing this view

00:17:27,380 --> 00:17:31,790
does rather is it instantiate our class

00:17:29,690 --> 00:17:33,410
with our inner quarks so here is where

00:17:31,790 --> 00:17:36,230
our init cards come into play and get

00:17:33,410 --> 00:17:39,140
eventually into our class the next thing

00:17:36,230 --> 00:17:41,300
it does is just some handling to make

00:17:39,140 --> 00:17:43,310
sure that if you haven't defined head

00:17:41,300 --> 00:17:48,530
you kind of make head and get the same

00:17:43,310 --> 00:17:49,880
thing because why not and then set up so

00:17:48,530 --> 00:17:52,100
set up is actually pretty neat method

00:17:49,880 --> 00:17:54,500
that just got added and Django 2.2

00:17:52,100 --> 00:17:56,180
and so what that does what we're not

00:17:54,500 --> 00:17:58,610
done with adviye but we'll go back to 8

00:17:56,180 --> 00:18:00,620
now so what that does is it takes our

00:17:58,610 --> 00:18:04,520
request args and kwargs and it sets them

00:18:00,620 --> 00:18:06,290
on your view as attributes and what this

00:18:04,520 --> 00:18:08,780
means is that in any of your methods you

00:18:06,290 --> 00:18:09,920
can now access them pretty easily which

00:18:08,780 --> 00:18:11,800
is great because then you don't have to

00:18:09,920 --> 00:18:14,120
worry about defining your methods

00:18:11,800 --> 00:18:15,410
signature to include requests arguing

00:18:14,120 --> 00:18:17,510
carbs and then worrying about how to get

00:18:15,410 --> 00:18:20,570
it to them you can just know that

00:18:17,510 --> 00:18:22,430
they're there and one of the useful

00:18:20,570 --> 00:18:24,680
things about like Django already did

00:18:22,430 --> 00:18:26,300
that before in Class B in the as you

00:18:24,680 --> 00:18:29,330
before but now it pulled it into setup

00:18:26,300 --> 00:18:31,640
and 2.2 and what that lets you do is if

00:18:29,330 --> 00:18:36,980
there are any attributes you want to be

00:18:31,640 --> 00:18:39,320
accessible in all of your you want

00:18:36,980 --> 00:18:41,240
accessible at any of your methods you

00:18:39,320 --> 00:18:44,240
can set them on here and then just call

00:18:41,240 --> 00:18:46,070
super oh it's so the default will set up

00:18:44,240 --> 00:18:47,990
the request artisan parts and you're set

00:18:46,070 --> 00:18:52,160
now you have attributes you can access

00:18:47,990 --> 00:18:54,440
easily anywhere else all right so back

00:18:52,160 --> 00:18:56,030
to our view function that we're defining

00:18:54,440 --> 00:18:58,180
within as you so we called setup

00:18:56,030 --> 00:19:00,380
immediately after we have a little

00:18:58,180 --> 00:19:02,480
validation to make sure that we did

00:19:00,380 --> 00:19:05,150
actually call super if we overrode it

00:19:02,480 --> 00:19:06,320
because our super first set up if we

00:19:05,150 --> 00:19:08,360
ever wrote it so we just checked the

00:19:06,320 --> 00:19:11,150
request is there and then at the end

00:19:08,360 --> 00:19:13,310
what this view does is return or call

00:19:11,150 --> 00:19:20,090
dispatch with request argument cards and

00:19:13,310 --> 00:19:22,670
return what it gets back so so views

00:19:20,090 --> 00:19:24,140
we'd already said earlier they need to

00:19:22,670 --> 00:19:25,910
take an HTTP request and return a

00:19:24,140 --> 00:19:27,530
response so what we're saying here is

00:19:25,910 --> 00:19:30,080
we're kind of passing that on to

00:19:27,530 --> 00:19:31,730
dispatch and saying like hey dispatch I

00:19:30,080 --> 00:19:34,010
need you to return me a response I'm

00:19:31,730 --> 00:19:37,040
just going to trust you and you can do

00:19:34,010 --> 00:19:37,910
that so now we know dispatch which I

00:19:37,040 --> 00:19:39,680
haven't covered yet but I will in a

00:19:37,910 --> 00:19:44,300
second it's supposed to return a

00:19:39,680 --> 00:19:47,000
response of some kind and then after

00:19:44,300 --> 00:19:50,210
we've finished defining view we do a few

00:19:47,000 --> 00:19:54,410
things on it so view our functions in

00:19:50,210 --> 00:19:55,340
Python or just any like Python object

00:19:54,410 --> 00:19:57,350
which means you can actually set

00:19:55,340 --> 00:19:59,480
attributes on them however you want so

00:19:57,350 --> 00:20:00,830
in this case we set view class and view

00:19:59,480 --> 00:20:03,590
init cards in case you want to access

00:20:00,830 --> 00:20:05,210
them later for whatever reason and then

00:20:03,590 --> 00:20:08,060
the next thing is kind of neat

00:20:05,210 --> 00:20:10,520
so because we're setting up this

00:20:08,060 --> 00:20:12,710
function this function is actually not

00:20:10,520 --> 00:20:14,420
our class-based view obviously but we

00:20:12,710 --> 00:20:16,580
want it to act like it and we went and

00:20:14,420 --> 00:20:18,710
we wanted to look like it and we've

00:20:16,580 --> 00:20:20,120
already taken care of it acting like it

00:20:18,710 --> 00:20:22,430
by returning in the dispatch and all

00:20:20,120 --> 00:20:25,880
that but now to make it look like it we

00:20:22,430 --> 00:20:27,740
use func tool called update wrappers or

00:20:25,880 --> 00:20:29,540
update wrapper and what it does is it

00:20:27,740 --> 00:20:31,250
takes this view it takes our class and

00:20:29,540 --> 00:20:32,840
just kind of takes like the name and the

00:20:31,250 --> 00:20:35,780
doc string and a few other dunder

00:20:32,840 --> 00:20:39,500
attributes and sets them on the view on

00:20:35,780 --> 00:20:42,500
the function and then the last thing is

00:20:39,500 --> 00:20:43,940
I haven't gone over decorators really

00:20:42,500 --> 00:20:46,460
but decorators are typically put on

00:20:43,940 --> 00:20:48,470
dispatch and they sometimes set up

00:20:46,460 --> 00:20:49,910
attributes on the dispatch itself so we

00:20:48,470 --> 00:20:51,380
want those two so we do the same thing

00:20:49,910 --> 00:20:53,660
again with update wrapper except this

00:20:51,380 --> 00:20:55,130
time we pulled them from dispatch and

00:20:53,660 --> 00:20:56,900
what an example of an attribute that

00:20:55,130 --> 00:20:59,840
might be said is like CRS are of exempt

00:20:56,900 --> 00:21:02,360
and then at the very end of as of you it

00:20:59,840 --> 00:21:03,680
returns view as is like we've just

00:21:02,360 --> 00:21:06,260
defined it basically and added a few

00:21:03,680 --> 00:21:09,400
attributes on it so what that means is

00:21:06,260 --> 00:21:12,470
here what this all means what this

00:21:09,400 --> 00:21:14,990
class-based view is that when we're

00:21:12,470 --> 00:21:17,420
calling as view we expect it to return

00:21:14,990 --> 00:21:19,760
view and view is just a function at this

00:21:17,420 --> 00:21:21,850
point and at that point we are basically

00:21:19,760 --> 00:21:27,140
using the same thing as we used with

00:21:21,850 --> 00:21:29,900
function based views final thing for

00:21:27,140 --> 00:21:31,760
view is dispatch so dispatch is really

00:21:29,900 --> 00:21:32,480
simple all it does is receive requests

00:21:31,760 --> 00:21:35,090
stars and kwargs

00:21:32,480 --> 00:21:36,800
and its job is just to figure out what

00:21:35,090 --> 00:21:39,860
is going to handle this request that

00:21:36,800 --> 00:21:42,110
just came in so it just checks to see if

00:21:39,860 --> 00:21:43,850
it's if their method of the request is

00:21:42,110 --> 00:21:46,520
and allowed one so from that list

00:21:43,850 --> 00:21:50,420
earlier that I showed you and if it

00:21:46,520 --> 00:21:53,480
isn't it returns in a 405 HTTP response

00:21:50,420 --> 00:21:55,670
not allowed but if it is allowed then it

00:21:53,480 --> 00:21:57,350
tries to find the handler for it so it

00:21:55,670 --> 00:22:00,050
looks on your view and says hey have you

00:21:57,350 --> 00:22:02,630
defined for example get and if you

00:22:00,050 --> 00:22:03,950
haven't it once again returns HTTP

00:22:02,630 --> 00:22:07,270
method not allowed so that's why I was

00:22:03,950 --> 00:22:09,500
saying that that list is allowed and

00:22:07,270 --> 00:22:10,760
handle like the different there's a

00:22:09,500 --> 00:22:13,100
difference between what it allows and

00:22:10,760 --> 00:22:15,500
what it can handle and here's where that

00:22:13,100 --> 00:22:17,480
gets resolved but if it is if it is

00:22:15,500 --> 00:22:19,760
defined so if you do have get on your

00:22:17,480 --> 00:22:22,040
you then what this does is it'll take it

00:22:19,760 --> 00:22:23,720
it'll call it with requests ours and

00:22:22,040 --> 00:22:26,450
quarks and then it will return that

00:22:23,720 --> 00:22:30,830
so dispatch is also kind of passing on

00:22:26,450 --> 00:22:36,020
the responsibility to something else for

00:22:30,830 --> 00:22:38,540
returning the HTTP response so one thing

00:22:36,020 --> 00:22:40,340
about view is it doesn't actually define

00:22:38,540 --> 00:22:42,919
any of the typical methods that return

00:22:40,340 --> 00:22:46,549
an HTTP response so you can't just use

00:22:42,919 --> 00:22:49,010
view and not define anything special on

00:22:46,549 --> 00:22:51,620
it you have to define get or post or

00:22:49,010 --> 00:22:53,390
whatever you care about it defines a few

00:22:51,620 --> 00:22:57,860
things but if you want to do get post it

00:22:53,390 --> 00:22:58,910
doesn't define those just okay quick

00:22:57,860 --> 00:23:08,809
pause because that was a lot of

00:22:58,910 --> 00:23:12,020
information also okay okay so that's a

00:23:08,809 --> 00:23:14,390
lot of stuff and I don't whether or not

00:23:12,020 --> 00:23:15,950
you've followed it to be honest with you

00:23:14,390 --> 00:23:17,179
like there were parts of that that I

00:23:15,950 --> 00:23:18,950
didn't understand until I was preparing

00:23:17,179 --> 00:23:21,169
for this talk like I've been working in

00:23:18,950 --> 00:23:22,429
Jango for like four years now and there

00:23:21,169 --> 00:23:25,179
are parts that I was like it's just

00:23:22,429 --> 00:23:27,530
magic which it's not it's actually a

00:23:25,179 --> 00:23:30,770
it's not magic it just takes a little

00:23:27,530 --> 00:23:32,510
bit to understand but yeah but it's

00:23:30,770 --> 00:23:35,240
pretty cool and it'll set up set us up

00:23:32,510 --> 00:23:39,650
to do some really cool things making our

00:23:35,240 --> 00:23:45,350
lives easier at least they can so Jango

00:23:39,650 --> 00:23:46,700
provides a lot of generic views and like

00:23:45,350 --> 00:23:50,390
I was mentioning earlier the way that

00:23:46,700 --> 00:23:52,130
works is Django's point of view is we

00:23:50,390 --> 00:23:54,980
provided class-based views through view

00:23:52,130 --> 00:23:56,600
now we're going to provide some generic

00:23:54,980 --> 00:23:58,809
class-based views that you can use to do

00:23:56,600 --> 00:24:01,429
things but the way we want to do that is

00:23:58,809 --> 00:24:04,070
we want to provide a bunch of mix-ins

00:24:01,429 --> 00:24:05,179
and those mixed ins will each do

00:24:04,070 --> 00:24:07,460
something like a little bit of

00:24:05,179 --> 00:24:08,660
functionality that builds up to whatever

00:24:07,460 --> 00:24:12,410
great thing you were doing with your

00:24:08,660 --> 00:24:17,059
website so the most basic one is context

00:24:12,410 --> 00:24:18,770
mixin so when we normally render our

00:24:17,059 --> 00:24:21,020
templates we pass it some type of

00:24:18,770 --> 00:24:23,179
context that's how we pass it the

00:24:21,020 --> 00:24:25,220
variables that we care about right and

00:24:23,179 --> 00:24:26,659
so what context mixin is it's kind of

00:24:25,220 --> 00:24:29,630
meant to do that for class-based views

00:24:26,659 --> 00:24:31,429
and it defines just one attribute extra

00:24:29,630 --> 00:24:35,119
context and defaulted to none

00:24:31,429 --> 00:24:36,919
and I'll go into that right now and it

00:24:35,119 --> 00:24:39,589
only defines one method this method is

00:24:36,919 --> 00:24:41,989
get context data and what it does is it

00:24:39,589 --> 00:24:45,289
takes whatever kwargs we pass it and it

00:24:41,989 --> 00:24:46,669
adds in view so it adds itself in which

00:24:45,289 --> 00:24:48,830
is kind of neat because then that means

00:24:46,669 --> 00:24:51,919
that you can easily access any attribute

00:24:48,830 --> 00:24:53,059
of the view in the template so like if

00:24:51,919 --> 00:24:55,999
you want to look at your user you can

00:24:53,059 --> 00:24:57,649
easily do view dot request user or you

00:24:55,999 --> 00:24:59,749
could access any of the kwargs that the

00:24:57,649 --> 00:25:02,809
view was that was in the request for the

00:24:59,749 --> 00:25:06,169
view so yeah so that's pretty neat and

00:25:02,809 --> 00:25:08,059
then the other thing it does is it takes

00:25:06,169 --> 00:25:09,769
extra context and if it's been defined

00:25:08,059 --> 00:25:11,929
so like if you in any of your methods

00:25:09,769 --> 00:25:15,289
actually defined it beyond none it will

00:25:11,929 --> 00:25:17,269
update the content of quarks with it the

00:25:15,289 --> 00:25:21,889
intention for that was kind of to make

00:25:17,269 --> 00:25:23,659
it so that kind of how I've talked

00:25:21,889 --> 00:25:25,669
earlier about how you can pass things to

00:25:23,659 --> 00:25:28,249
as view and it will eventually make it

00:25:25,669 --> 00:25:29,989
to init which will then set it as an

00:25:28,249 --> 00:25:32,059
attribute or set the value of the

00:25:29,989 --> 00:25:34,399
attribute this means you can kind of

00:25:32,059 --> 00:25:39,619
take it in your URL spy you could pass

00:25:34,399 --> 00:25:41,330
context to the template directly I don't

00:25:39,619 --> 00:25:43,639
know if you want to do that but what I

00:25:41,330 --> 00:25:45,469
like about this is that in any of your

00:25:43,639 --> 00:25:47,089
other methods if you want to put

00:25:45,469 --> 00:25:49,039
anything into the template context

00:25:47,089 --> 00:25:52,129
easily this is what how you can do it

00:25:49,039 --> 00:25:53,719
you could just access extra context just

00:25:52,129 --> 00:25:55,940
create the dictionary or add to it if

00:25:53,719 --> 00:25:57,229
you've already created it and then you

00:25:55,940 --> 00:25:58,969
don't have to worry about it get context

00:25:57,229 --> 00:26:01,219
data will eventually put it into the

00:25:58,969 --> 00:26:06,229
context that hopefully makes its way to

00:26:01,219 --> 00:26:08,059
your template so yeah and then the next

00:26:06,229 --> 00:26:11,509
one is template response mixin so this

00:26:08,059 --> 00:26:12,379
one defines a few attributes not going

00:26:11,509 --> 00:26:13,969
to go over all of them the most

00:26:12,379 --> 00:26:15,320
important one is template name just

00:26:13,969 --> 00:26:19,070
point it at the template that you care

00:26:15,320 --> 00:26:20,389
about and then it's important method

00:26:19,070 --> 00:26:21,979
that it defines it defines a few but the

00:26:20,389 --> 00:26:25,909
most important one is rendered to

00:26:21,979 --> 00:26:27,409
response so this one takes care of as

00:26:25,909 --> 00:26:29,779
you can see at the top it takes in

00:26:27,409 --> 00:26:31,070
context and a few other things but

00:26:29,779 --> 00:26:34,129
context is important one so it takes in

00:26:31,070 --> 00:26:35,299
context and it renders your template

00:26:34,129 --> 00:26:37,219
that you've told it that you've given it

00:26:35,299 --> 00:26:39,529
the name it renders your template with

00:26:37,219 --> 00:26:41,989
your context and so this is actually the

00:26:39,529 --> 00:26:45,579
portion that returns the HTTP response

00:26:41,989 --> 00:26:45,579
because it's rendering your template

00:26:46,750 --> 00:26:53,600
so going to our first generic class base

00:26:50,780 --> 00:26:55,910
view what this is is template view so it

00:26:53,600 --> 00:26:59,210
takes in those two combines those two

00:26:55,910 --> 00:27:01,250
mix-ins and that view the base view and

00:26:59,210 --> 00:27:02,480
all it does on top of that is like Ida

00:27:01,250 --> 00:27:04,580
mentioned none of those other ones

00:27:02,480 --> 00:27:07,580
actually defying get so this one is like

00:27:04,580 --> 00:27:09,320
alright I'll define get and then all you

00:27:07,580 --> 00:27:11,030
just get context data to get my context

00:27:09,320 --> 00:27:13,160
and then I'll pass it to render to

00:27:11,030 --> 00:27:15,140
response and I'm done so this is

00:27:13,160 --> 00:27:18,260
literally all of template view right

00:27:15,140 --> 00:27:19,970
here it's really simple and that's kind

00:27:18,260 --> 00:27:22,400
of the point of doing mixin Stu is to

00:27:19,970 --> 00:27:24,290
let your final views like just do the

00:27:22,400 --> 00:27:29,840
thing that they need to do once they've

00:27:24,290 --> 00:27:31,430
combined all the functionality so for

00:27:29,840 --> 00:27:33,110
example here's template view here's a

00:27:31,430 --> 00:27:37,280
template view for home I just defined

00:27:33,110 --> 00:27:38,660
template name and that's it there's

00:27:37,280 --> 00:27:39,830
another way you could do this though you

00:27:38,660 --> 00:27:41,720
don't even have to define it in your

00:27:39,830 --> 00:27:43,130
views dot pi because of the fact that

00:27:41,720 --> 00:27:45,590
you can take advantage of the fact that

00:27:43,130 --> 00:27:48,080
as you will pass attributes on you can

00:27:45,590 --> 00:27:52,550
set template view and you girls that PI

00:27:48,080 --> 00:27:53,810
and do a home page like this whether or

00:27:52,550 --> 00:27:55,280
not you like to do that is up to you but

00:27:53,810 --> 00:27:57,800
I mean I think this is pretty nice if

00:27:55,280 --> 00:28:02,330
it's a simple home page that doesn't

00:27:57,800 --> 00:28:04,190
need anything else the next one up is

00:28:02,330 --> 00:28:06,260
redirect view so this one provides a few

00:28:04,190 --> 00:28:08,750
things the important ones being URL or

00:28:06,260 --> 00:28:10,580
pattern name and it does exactly what it

00:28:08,750 --> 00:28:14,630
says it's just redirects it's really

00:28:10,580 --> 00:28:16,430
quick and easy and so for example a

00:28:14,630 --> 00:28:19,820
one-way one thing that you could think

00:28:16,430 --> 00:28:21,590
of is say you have a website a URL

00:28:19,820 --> 00:28:23,780
that's show all this and then your

00:28:21,590 --> 00:28:25,280
client says hey you know what instead of

00:28:23,780 --> 00:28:27,500
show all lists I want to rename the URL

00:28:25,280 --> 00:28:31,790
to say list to-do lists for whatever

00:28:27,500 --> 00:28:34,040
reason an easy way to do that is using

00:28:31,790 --> 00:28:36,950
redirect view you can create your new

00:28:34,040 --> 00:28:38,900
your new path put the old view there and

00:28:36,950 --> 00:28:41,330
then in the old path you can just set

00:28:38,900 --> 00:28:44,120
redirect as view and then pass it the

00:28:41,330 --> 00:28:49,000
pattern name to your new or to your new

00:28:44,120 --> 00:28:53,990
URL and you're set although you should

00:28:49,000 --> 00:28:56,540
yeah okay next one up is list view so

00:28:53,990 --> 00:28:57,810
this one's just what it says another

00:28:56,540 --> 00:28:59,340
easy thing that we tend to do a lot

00:28:57,810 --> 00:29:01,770
very often is just listing out a bunch

00:28:59,340 --> 00:29:05,220
of data so it's really easy to set up

00:29:01,770 --> 00:29:06,750
just set a few attributes one of the

00:29:05,220 --> 00:29:08,520
things that this that's cool about it is

00:29:06,750 --> 00:29:11,160
kind of sets you up to be able to

00:29:08,520 --> 00:29:12,540
paginate through data so if you have a

00:29:11,160 --> 00:29:14,760
lot of data it makes it pretty easy to

00:29:12,540 --> 00:29:18,120
do that one downside is it doesn't set

00:29:14,760 --> 00:29:20,370
up an easy way to filter your data so if

00:29:18,120 --> 00:29:21,690
you need to filter it at all yeah I will

00:29:20,370 --> 00:29:26,490
show you an example of how you can

00:29:21,690 --> 00:29:29,190
filter it so here we have two URLs they

00:29:26,490 --> 00:29:30,570
both lead to the same list to do list I

00:29:29,190 --> 00:29:33,510
should have chosen different names

00:29:30,570 --> 00:29:35,100
let's do do list view one of them is

00:29:33,510 --> 00:29:40,980
just straight to the URL the other one

00:29:35,100 --> 00:29:44,490
takes captures name search and the view

00:29:40,980 --> 00:29:47,340
itself my subclass is just or it could

00:29:44,490 --> 00:29:48,570
just be list view setting in the model

00:29:47,340 --> 00:29:50,670
and the template name if I didn't want

00:29:48,570 --> 00:29:52,140
to do filtering that'd be it then which

00:29:50,670 --> 00:29:54,210
is really nice they would then go and

00:29:52,140 --> 00:29:56,670
list all my instances of to do list

00:29:54,210 --> 00:29:58,080
model if I wanted to do pagination I'd

00:29:56,670 --> 00:29:59,610
have to set up a few attributes here but

00:29:58,080 --> 00:30:01,500
that'd be it just kind of telling it how

00:29:59,610 --> 00:30:04,200
many per page and a few other things

00:30:01,500 --> 00:30:06,450
like that but since I want to do

00:30:04,200 --> 00:30:09,210
filtering we need to do a little bit

00:30:06,450 --> 00:30:11,310
more so one of the methods that it

00:30:09,210 --> 00:30:13,020
defines that ListView defines is get

00:30:11,310 --> 00:30:15,320
query set and so that's what it uses to

00:30:13,020 --> 00:30:19,050
go and get all of your model instances

00:30:15,320 --> 00:30:20,820
and so what I did here is I just let it

00:30:19,050 --> 00:30:24,180
that super do its thing and return all

00:30:20,820 --> 00:30:26,790
the instances and then I just check to

00:30:24,180 --> 00:30:28,710
see if I need to actually filter it so

00:30:26,790 --> 00:30:30,810
here I'm taking advantage of the fact

00:30:28,710 --> 00:30:32,700
that kwargs was set as a self attribute

00:30:30,810 --> 00:30:33,840
meaning I don't actually perceive cards

00:30:32,700 --> 00:30:36,660
and get query set but I can easily

00:30:33,840 --> 00:30:38,160
access it and then if I need to I filter

00:30:36,660 --> 00:30:40,220
the query sit and then return it if not

00:30:38,160 --> 00:30:43,320
I just returned the full query set so

00:30:40,220 --> 00:30:45,150
it's not set up to easily do filtering

00:30:43,320 --> 00:30:46,800
like through attributes or anything but

00:30:45,150 --> 00:30:53,649
you can it's pretty simple to set up

00:30:46,800 --> 00:30:55,759
just overriding get query set okay

00:30:53,649 --> 00:31:01,279
another one is detail view so detail

00:30:55,759 --> 00:31:03,889
view lets us just put out the details of

00:31:01,279 --> 00:31:06,649
some model instance it's really simple

00:31:03,889 --> 00:31:08,479
it's kind of basically implement it's

00:31:06,649 --> 00:31:12,679
implemented in a similar way to ListView

00:31:08,479 --> 00:31:14,989
except focusing on a single item and so

00:31:12,679 --> 00:31:17,090
this one same thing it kind of just

00:31:14,989 --> 00:31:18,559
needs the template name and the model I

00:31:17,090 --> 00:31:21,739
took it a little bit further and added

00:31:18,559 --> 00:31:27,409
an other attribute so by default display

00:31:21,739 --> 00:31:29,749
view or just sorry detail view sets your

00:31:27,409 --> 00:31:33,769
instance into the template context just

00:31:29,749 --> 00:31:35,539
as object which I find weird it makes

00:31:33,769 --> 00:31:37,220
sense like for being a generic view but

00:31:35,539 --> 00:31:38,809
if you want it to actually make more

00:31:37,220 --> 00:31:40,309
contextual sense in your template you

00:31:38,809 --> 00:31:42,320
can give it a name and so that's why you

00:31:40,309 --> 00:31:43,669
can set context object names so like I

00:31:42,320 --> 00:31:46,429
just said this is going to be a to-do

00:31:43,669 --> 00:31:49,460
list so it's up to you though you can

00:31:46,429 --> 00:31:50,929
just use object if you like that but you

00:31:49,460 --> 00:31:52,849
might be wondering hang on how does it

00:31:50,929 --> 00:31:55,129
actually know what instance we want the

00:31:52,849 --> 00:31:56,359
details for because you know I didn't

00:31:55,129 --> 00:31:59,359
actually define anything here I just

00:31:56,359 --> 00:32:02,419
said hey here's my detail view go figure

00:31:59,359 --> 00:32:06,320
it out and get something so the way it

00:32:02,419 --> 00:32:10,129
does it is through the URL and in the

00:32:06,320 --> 00:32:12,999
URL we capture the integer PK and call

00:32:10,129 --> 00:32:16,429
it PK and then it'll pass it as a Korg

00:32:12,999 --> 00:32:18,499
and the reason this works is because one

00:32:16,429 --> 00:32:23,659
of the mix-ins that goes into making

00:32:18,499 --> 00:32:25,220
this sets up something called PK URL

00:32:23,659 --> 00:32:27,679
coorg which is the second a last one on

00:32:25,220 --> 00:32:30,320
that list and it defaults it to pk so

00:32:27,679 --> 00:32:31,639
it's just I just went with that name if

00:32:30,320 --> 00:32:33,200
you really care I want to change it to

00:32:31,639 --> 00:32:35,239
something else like ID you can and

00:32:33,200 --> 00:32:39,039
that's all you have to do is in your URL

00:32:35,239 --> 00:32:44,809
capture ID instead and here change this

00:32:39,039 --> 00:32:45,950
attribute to ID so pretty simple form

00:32:44,809 --> 00:32:47,749
view is the next one so now we're

00:32:45,950 --> 00:32:51,200
actually getting into being able to do

00:32:47,749 --> 00:32:54,320
stuff beyond just listing things are

00:32:51,200 --> 00:33:00,320
showing data so form view lets us

00:32:54,320 --> 00:33:01,340
actually render a form and handle it

00:33:00,320 --> 00:33:05,210
process the foreign ones that gets

00:33:01,340 --> 00:33:08,510
submitted and so the way

00:33:05,210 --> 00:33:09,980
hmm sorry I realize I forgot to mention

00:33:08,510 --> 00:33:14,510
one thing earlier uh-huh

00:33:09,980 --> 00:33:16,010
so I was talking about how the way all

00:33:14,510 --> 00:33:18,500
this works is we have mixed ends and

00:33:16,010 --> 00:33:20,660
combine them with views and Django to

00:33:18,500 --> 00:33:23,390
create its generic views actually takes

00:33:20,660 --> 00:33:26,540
those mix-ins and makes our mixin so

00:33:23,390 --> 00:33:28,340
like context mixin gets subclassed and

00:33:26,540 --> 00:33:30,170
added functionality gets added and then

00:33:28,340 --> 00:33:31,520
like template response mixin also gets

00:33:30,170 --> 00:33:33,440
subclass and functionality gets added so

00:33:31,520 --> 00:33:34,670
that's why I like here on forum view we

00:33:33,440 --> 00:33:36,650
don't have either of those we have

00:33:34,670 --> 00:33:41,420
template response oh wait no that's that

00:33:36,650 --> 00:33:42,800
is sorry that's wrong but for base form

00:33:41,420 --> 00:33:45,140
view is basically the same thing base

00:33:42,800 --> 00:33:47,240
form you is view mixed in with other

00:33:45,140 --> 00:33:48,560
things that kind of eventually makes it

00:33:47,240 --> 00:33:50,780
to cult something called base form view

00:33:48,560 --> 00:33:52,630
and then form you just takes that and

00:33:50,780 --> 00:33:54,620
combines it with template response mixin

00:33:52,630 --> 00:33:57,020
but there are other that make sense that

00:33:54,620 --> 00:34:00,190
just our pure mix-ins and when the next

00:33:57,020 --> 00:34:04,280
one comes up I will point that out

00:34:00,190 --> 00:34:06,050
alright so one thing about this though

00:34:04,280 --> 00:34:09,110
is that form view is designed to only

00:34:06,050 --> 00:34:11,120
handle post emissions which is not ideal

00:34:09,110 --> 00:34:12,200
for everything so if you have a get form

00:34:11,120 --> 00:34:13,700
you need to do a little bit different

00:34:12,200 --> 00:34:19,130
stuff but I'll show an example of doing

00:34:13,700 --> 00:34:23,120
that so form handling so if you want to

00:34:19,130 --> 00:34:25,460
set up or what it does for us is it sets

00:34:23,120 --> 00:34:28,750
up this method called get form and what

00:34:25,460 --> 00:34:31,490
it does is it takes a form class and it

00:34:28,750 --> 00:34:33,110
instantiates it and passes it a bunch of

00:34:31,490 --> 00:34:38,000
kwargs through a method called get form

00:34:33,110 --> 00:34:40,850
kwargs and it eventually will make its

00:34:38,000 --> 00:34:44,630
way to the template just as form which

00:34:40,850 --> 00:34:48,610
is typically you know for fine and then

00:34:44,630 --> 00:34:51,110
on post it will by default get the form

00:34:48,610 --> 00:34:53,180
instantiate it Val using that same get

00:34:51,110 --> 00:34:54,980
form so get and post use the same thing

00:34:53,180 --> 00:34:56,810
to instantiate it and then the get farm

00:34:54,980 --> 00:34:58,970
kwargs is the one that actually handles

00:34:56,810 --> 00:35:00,860
whether or not there's data and then it

00:34:58,970 --> 00:35:03,770
validates it and then returns self valid

00:35:00,860 --> 00:35:05,480
or self invalid or self-forming invalid

00:35:03,770 --> 00:35:07,250
and then so basically what we're saying

00:35:05,480 --> 00:35:08,600
what those do is just return some type

00:35:07,250 --> 00:35:10,550
of response because we're in the post

00:35:08,600 --> 00:35:14,540
and we need to return some type of

00:35:10,550 --> 00:35:16,490
formal response so if you want to use it

00:35:14,540 --> 00:35:18,290
you can easily subclass it and just set

00:35:16,490 --> 00:35:20,570
a farm cost and template name and you

00:35:18,290 --> 00:35:22,100
set I took it a step further here though

00:35:20,570 --> 00:35:26,420
and I was like I want to make a form

00:35:22,100 --> 00:35:28,970
that handles a gift for him or get

00:35:26,420 --> 00:35:32,330
submission so I kind of limited the HTTP

00:35:28,970 --> 00:35:34,280
method names to get an options and so I

00:35:32,330 --> 00:35:37,340
need to do a little bit more now so now

00:35:34,280 --> 00:35:39,140
on gets I checked to see if it was a get

00:35:37,340 --> 00:35:41,390
submission and if it was I instantiate

00:35:39,140 --> 00:35:46,130
the form validate it and then return

00:35:41,390 --> 00:35:49,490
form is valid or form invalid and then

00:35:46,130 --> 00:35:51,500
if not it is cut off but if not I just

00:35:49,490 --> 00:35:55,130
returned super which will just render

00:35:51,500 --> 00:35:57,920
the form on the template brand-new and

00:35:55,130 --> 00:36:00,470
so another change is I'll get form cards

00:35:57,920 --> 00:36:02,090
so earlier I didn't show get form Korg's

00:36:00,470 --> 00:36:04,430
because it's pretty simple all it kind

00:36:02,090 --> 00:36:07,370
of does is set up like initial prefix

00:36:04,430 --> 00:36:09,950
and data but like I mentioned it only

00:36:07,370 --> 00:36:11,390
does data for post submissions so the

00:36:09,950 --> 00:36:13,610
reason we need to change it here is just

00:36:11,390 --> 00:36:15,650
to be able to set data from a get

00:36:13,610 --> 00:36:17,450
submission so here we check hey was that

00:36:15,650 --> 00:36:21,320
it get submission if so let's set it in

00:36:17,450 --> 00:36:23,840
the kwargs and then return that and then

00:36:21,320 --> 00:36:27,010
the final thing that we need to do is

00:36:23,840 --> 00:36:29,240
just set up what happens on form valid

00:36:27,010 --> 00:36:31,870
you don't really need to do it here you

00:36:29,240 --> 00:36:34,640
could also just set a success URL but

00:36:31,870 --> 00:36:37,220
here what I do is because I want to

00:36:34,640 --> 00:36:40,040
redirect based on the actual form data I

00:36:37,220 --> 00:36:43,570
just define form valid and pull the form

00:36:40,040 --> 00:36:48,620
data out and redirect accordingly

00:36:43,570 --> 00:36:50,470
okay so create view create view is well

00:36:48,620 --> 00:36:52,490
actually every show you create view but

00:36:50,470 --> 00:36:53,780
create view as I showed you earlier is a

00:36:52,490 --> 00:36:56,180
really simple way of just creating new

00:36:53,780 --> 00:36:58,310
model instances this actually does have

00:36:56,180 --> 00:37:00,530
an example of a mixin that was made up

00:36:58,310 --> 00:37:02,510
of other mix-ins so single object

00:37:00,530 --> 00:37:06,380
template response mixin took another

00:37:02,510 --> 00:37:14,150
mixin did stuff to it and let us add a

00:37:06,380 --> 00:37:15,590
functionality you know okay so update

00:37:14,150 --> 00:37:17,690
view is really similar to create view

00:37:15,590 --> 00:37:19,340
honestly it is so similar that I'm not

00:37:17,690 --> 00:37:20,720
going to show you an example of using it

00:37:19,340 --> 00:37:23,090
because it's basically the same thing

00:37:20,720 --> 00:37:25,760
the only difference is it just on the

00:37:23,090 --> 00:37:26,960
first pass through will instantiate the

00:37:25,760 --> 00:37:31,040
form with the instance that you're

00:37:26,960 --> 00:37:34,100
working with so it's pretty neat but

00:37:31,040 --> 00:37:36,170
simple delete you so this is the last

00:37:34,100 --> 00:37:38,750
generic view that I'm gonna go over and

00:37:36,170 --> 00:37:41,420
so this one is actually interestingly

00:37:38,750 --> 00:37:46,430
more like detail view than create or

00:37:41,420 --> 00:37:47,810
update view in that it will sub it's up

00:37:46,430 --> 00:37:50,359
actually you can see down here it

00:37:47,810 --> 00:37:53,780
subclasses based detail view at one

00:37:50,359 --> 00:37:58,040
point and all it does is add a post

00:37:53,780 --> 00:38:00,350
handler for deleting the instance yeah

00:37:58,040 --> 00:38:01,850
and one weird thing about it is the fact

00:38:00,350 --> 00:38:09,050
that it does it on post though not

00:38:01,850 --> 00:38:12,800
delete it yeah yeah so there's a lot

00:38:09,050 --> 00:38:14,830
more there it it can be kind of hard to

00:38:12,800 --> 00:38:20,330
keep track of everything that they do

00:38:14,830 --> 00:38:23,180
one term that I heard recently to

00:38:20,330 --> 00:38:26,180
describe them was ravioli code in that

00:38:23,180 --> 00:38:27,590
you know that they're good they are they

00:38:26,180 --> 00:38:30,109
can be really great but you don't really

00:38:27,590 --> 00:38:33,200
know what's in them until you go and dig

00:38:30,109 --> 00:38:35,000
in there from the outside it's just like

00:38:33,200 --> 00:38:38,660
this is a nice nice little neat package

00:38:35,000 --> 00:38:41,109
that provides something for me so to

00:38:38,660 --> 00:38:43,640
that end there's this website called or

00:38:41,109 --> 00:38:48,170
that's called classy class-based views

00:38:43,640 --> 00:38:50,170
and at CC BB coda UK and it's really

00:38:48,170 --> 00:38:52,100
neat it like lays out all the

00:38:50,170 --> 00:38:57,170
class-based views that Django provides

00:38:52,100 --> 00:38:58,550
and you can see easy examples of how how

00:38:57,170 --> 00:39:02,270
everything got put together so like

00:38:58,550 --> 00:39:03,500
it'll show you let's see okay I was

00:39:02,270 --> 00:39:05,119
supposed to do screenshots but I didn't

00:39:03,500 --> 00:39:08,420
do the screenshots I'm let's see if this

00:39:05,119 --> 00:39:12,950
actually works it's not so I'll just go

00:39:08,420 --> 00:39:16,900
back to the presentation I can't see

00:39:12,950 --> 00:39:16,900
though because I can't see anything oh

00:39:18,490 --> 00:39:24,290
there we go okay like it a little bit

00:39:22,100 --> 00:39:26,930
too much but yeah so you defines all of

00:39:24,290 --> 00:39:31,700
the views and so for example you can go

00:39:26,930 --> 00:39:35,060
to list view did I actually click I did

00:39:31,700 --> 00:39:36,350
go and it tells you where they came from

00:39:35,060 --> 00:39:37,700
so like it'll show you all the

00:39:36,350 --> 00:39:39,410
attributes and show you hey this

00:39:37,700 --> 00:39:42,050
attribute came from this mixin or this

00:39:39,410 --> 00:39:43,920
view and then if you scroll farther down

00:39:42,050 --> 00:39:45,750
it'll show you all the methods

00:39:43,920 --> 00:39:47,580
and tell you where those came from so

00:39:45,750 --> 00:39:48,930
like on the side you can see and then if

00:39:47,580 --> 00:39:52,170
there's one that came from multiple

00:39:48,930 --> 00:39:57,780
it'll show you like what each of those

00:39:52,170 --> 00:39:59,160
defined so it's a really useful site I

00:39:57,780 --> 00:40:00,210
honestly have it open all the time when

00:39:59,160 --> 00:40:02,310
I'm working with class-based uses

00:40:00,210 --> 00:40:05,490
because I forget what class BC is

00:40:02,310 --> 00:40:12,450
defined things or like how things flow

00:40:05,490 --> 00:40:13,760
exactly so it's really useful yeah what

00:40:12,450 --> 00:40:19,160
did I do

00:40:13,760 --> 00:40:19,160
hang on shouldn't have done that I guess

00:40:24,940 --> 00:40:28,830
this is why people tell me to not do

00:40:26,680 --> 00:40:28,830
that

00:40:37,460 --> 00:40:46,790
mmm oh dang there we go

00:40:41,630 --> 00:40:48,500
okay cool well back probably okay so you

00:40:46,790 --> 00:40:51,200
might be asking yourself all right you

00:40:48,500 --> 00:40:52,760
showed me tons of views and there are

00:40:51,200 --> 00:40:54,200
many more like I said I didn't go

00:40:52,760 --> 00:40:55,580
through I probably went through like

00:40:54,200 --> 00:40:58,640
maybe a third of them so there's tons of

00:40:55,580 --> 00:41:00,260
them which one should I use and so some

00:40:58,640 --> 00:41:01,700
guidelines that I kind of try to follow

00:41:00,260 --> 00:41:02,869
is that if there's one that basically

00:41:01,700 --> 00:41:04,550
does everything that you need

00:41:02,869 --> 00:41:06,800
so like create view did everything I

00:41:04,550 --> 00:41:08,839
needed for my perk for that example just

00:41:06,800 --> 00:41:11,240
use it I mean why would you want to go

00:41:08,839 --> 00:41:15,470
define the code that does the exact same

00:41:11,240 --> 00:41:17,150
thing and then if later your needs

00:41:15,470 --> 00:41:18,650
changed I you need to do more then you

00:41:17,150 --> 00:41:21,980
can just change it out it's not like you

00:41:18,650 --> 00:41:26,750
invested that much in just using it and

00:41:21,980 --> 00:41:35,900
sending a few attributes and then if

00:41:26,750 --> 00:41:38,690
you're I think I deleted one okay I

00:41:35,900 --> 00:41:41,630
switch the slide or accidentally okay um

00:41:38,690 --> 00:41:43,099
so if there are if there's one that you

00:41:41,630 --> 00:41:45,650
just need to extend an override a few

00:41:43,099 --> 00:41:47,599
parts so like for example my ListView I

00:41:45,650 --> 00:41:49,369
wanted to filter the query set but that

00:41:47,599 --> 00:41:51,020
was just one method that I had to

00:41:49,369 --> 00:41:52,550
override and even then it wasn't even

00:41:51,020 --> 00:41:55,640
that much code that I oh that I'd

00:41:52,550 --> 00:41:57,050
changed on there and just use that it's

00:41:55,640 --> 00:41:58,820
more when you get into like when you

00:41:57,050 --> 00:42:03,740
start overwriting a lot of stuff that it

00:41:58,820 --> 00:42:05,030
kind of becomes it kind of ruins the

00:42:03,740 --> 00:42:06,410
point of using a generic view and it

00:42:05,030 --> 00:42:08,240
gets really hard to keep track of what

00:42:06,410 --> 00:42:10,160
you're used what you're doing because

00:42:08,240 --> 00:42:11,570
you're kind of overriding this bit over

00:42:10,160 --> 00:42:12,740
here and then this bit over here and

00:42:11,570 --> 00:42:14,839
it's like wait but how did those two

00:42:12,740 --> 00:42:17,150
interact now and so keeping track of all

00:42:14,839 --> 00:42:18,619
that is amiss so what I would say at

00:42:17,150 --> 00:42:20,599
that point it's just used view or

00:42:18,619 --> 00:42:22,070
template view because those like view is

00:42:20,599 --> 00:42:24,560
just setting you up to be able to use

00:42:22,070 --> 00:42:27,020
class-based views and template view is

00:42:24,560 --> 00:42:28,520
it is a generic view but it's a very

00:42:27,020 --> 00:42:29,720
basic generic view that just kind of

00:42:28,520 --> 00:42:32,599
provides some template loading

00:42:29,720 --> 00:42:33,980
functionality so let's say start with

00:42:32,599 --> 00:42:36,950
those and build your way up I actually

00:42:33,980 --> 00:42:38,270
know people that hate most generic

00:42:36,950 --> 00:42:40,040
class-based views but they like

00:42:38,270 --> 00:42:42,380
class-based use in general like the

00:42:40,040 --> 00:42:44,210
ideal of them the idea of them so they

00:42:42,380 --> 00:42:46,130
use view or template view as their base

00:42:44,210 --> 00:42:49,120
class every time and then just write

00:42:46,130 --> 00:42:52,870
everything else there on their own

00:42:49,120 --> 00:42:54,790
okay creating own view so I'm gonna go

00:42:52,870 --> 00:42:58,690
through this a little bit files because

00:42:54,790 --> 00:43:04,870
I only have a few minutes left no yeah

00:42:58,690 --> 00:43:09,760
okay so why should you make one so this

00:43:04,870 --> 00:43:11,290
kind of makes sense okay mix-ins kind of

00:43:09,760 --> 00:43:12,610
provide all the encapsulate some of the

00:43:11,290 --> 00:43:14,320
logic that you need to repeat across

00:43:12,610 --> 00:43:16,450
reviews and so that's kind of the same

00:43:14,320 --> 00:43:17,800
reason why you would want to make use

00:43:16,450 --> 00:43:19,570
class-based views so that you can take

00:43:17,800 --> 00:43:20,290
advantage of those mix-ins especially

00:43:19,570 --> 00:43:21,430
you can take advantage of the

00:43:20,290 --> 00:43:23,320
pre-existing mixed sense but you can

00:43:21,430 --> 00:43:25,540
also make your own mix-ins if you need

00:43:23,320 --> 00:43:28,260
to repeat something across all of your

00:43:25,540 --> 00:43:30,100
views so for example you have like an

00:43:28,260 --> 00:43:31,660
authorization type thing that you want

00:43:30,100 --> 00:43:33,670
to use in all your views one way to do

00:43:31,660 --> 00:43:36,640
that is make a mixin and then just add

00:43:33,670 --> 00:43:42,780
it to all your views and that handles it

00:43:36,640 --> 00:43:46,720
pretty easily so creating your own I

00:43:42,780 --> 00:43:48,970
would say that if you you can create

00:43:46,720 --> 00:43:50,370
like a base view if you find yourself

00:43:48,970 --> 00:43:54,820
using the same thing over and over again

00:43:50,370 --> 00:43:55,990
and if you can either create a base view

00:43:54,820 --> 00:43:57,520
you can create a mixin it kind of

00:43:55,990 --> 00:43:59,290
depends on what you're doing so like if

00:43:57,520 --> 00:44:00,490
you're doing the same like everything of

00:43:59,290 --> 00:44:01,570
that view is basically the same you're

00:44:00,490 --> 00:44:03,970
just setting a few different attributes

00:44:01,570 --> 00:44:05,920
then yeah creative class-based view

00:44:03,970 --> 00:44:08,890
that's like a base class ways you for

00:44:05,920 --> 00:44:10,810
you if you are doing more like I was

00:44:08,890 --> 00:44:12,700
mentioning the authorization bit where

00:44:10,810 --> 00:44:14,170
it's just a bit of added functionality

00:44:12,700 --> 00:44:15,700
on top of everything else you're doing

00:44:14,170 --> 00:44:20,650
that's different in each of you didn't

00:44:15,700 --> 00:44:24,510
do a mixin I have so when I first

00:44:20,650 --> 00:44:28,960
started uh-huh I had to deal a lot with

00:44:24,510 --> 00:44:32,920
pages where my users wanted to have like

00:44:28,960 --> 00:44:34,630
six or seven forms on the page and at

00:44:32,920 --> 00:44:36,490
the time it was really annoying that any

00:44:34,630 --> 00:44:38,350
every view I was defining every time

00:44:36,490 --> 00:44:39,700
like how to handle all those forms

00:44:38,350 --> 00:44:42,670
especially because like the forms

00:44:39,700 --> 00:44:44,050
themselves were kind of they were

00:44:42,670 --> 00:44:46,270
different but they were handled

00:44:44,050 --> 00:44:48,550
similarly so I was like you know what

00:44:46,270 --> 00:44:50,650
I'm going to write a class base view

00:44:48,550 --> 00:44:52,690
that handles multiple form submissions

00:44:50,650 --> 00:44:56,410
like rendering multiple forms and

00:44:52,690 --> 00:44:59,170
handles multiple form submissions and it

00:44:56,410 --> 00:45:00,250
worked it worked great for me like I was

00:44:59,170 --> 00:45:01,630
like oh this is amazing

00:45:00,250 --> 00:45:02,230
all I have to do is like set a few

00:45:01,630 --> 00:45:05,740
attributes

00:45:02,230 --> 00:45:07,869
and it works but then like six months

00:45:05,740 --> 00:45:10,180
later I had to go back to it and I was

00:45:07,869 --> 00:45:13,090
like what am I even reading like I don't

00:45:10,180 --> 00:45:14,609
understand what I did um like I was

00:45:13,090 --> 00:45:16,720
tricked because I needed I needed to add

00:45:14,609 --> 00:45:17,830
another form and like take out one of

00:45:16,720 --> 00:45:21,520
the previous forms and it was just a

00:45:17,830 --> 00:45:24,070
mess it was so hard to read someone else

00:45:21,520 --> 00:45:26,260
had to then go back after me and do the

00:45:24,070 --> 00:45:27,250
same thing and they also like or like I

00:45:26,260 --> 00:45:29,050
don't know what that's happening I'm

00:45:27,250 --> 00:45:31,300
just gonna like cut in right here and

00:45:29,050 --> 00:45:33,450
kind of stick my coat in and it works

00:45:31,300 --> 00:45:38,290
now kind of but not really

00:45:33,450 --> 00:45:42,000
so make sure that if you are going to

00:45:38,290 --> 00:45:44,170
create your own base classes you do

00:45:42,000 --> 00:45:45,700
think of thinking through make sure that

00:45:44,170 --> 00:45:47,859
you're not doing anything too complex in

00:45:45,700 --> 00:45:49,210
your base classes because if you're

00:45:47,859 --> 00:45:50,530
doing a lot of complex logic you might

00:45:49,210 --> 00:45:53,320
it might be better to just handle it in

00:45:50,530 --> 00:45:57,010
that specific view and save everything

00:45:53,320 --> 00:45:59,560
else and your code base from it or you

00:45:57,010 --> 00:46:00,820
know break it up into like separate

00:45:59,560 --> 00:46:04,060
views it's not like you have to do all

00:46:00,820 --> 00:46:05,650
of that in one view I am NOT going to

00:46:04,060 --> 00:46:08,350
show the code because it is very long

00:46:05,650 --> 00:46:10,390
and a mess and getting it till show

00:46:08,350 --> 00:46:11,800
properly on here would be horrible but

00:46:10,390 --> 00:46:14,980
it is in that repo in case you're

00:46:11,800 --> 00:46:17,650
curious if you want to go read it I have

00:46:14,980 --> 00:46:19,390
a lot of documentation on it which was

00:46:17,650 --> 00:46:21,040
good I guess because I could then figure

00:46:19,390 --> 00:46:22,330
it out but I had to sit for like half an

00:46:21,040 --> 00:46:27,340
hour and to figure out how to add a new

00:46:22,330 --> 00:46:29,619
form okay so an example of a possibly

00:46:27,340 --> 00:46:32,350
good class based view to do is one thing

00:46:29,619 --> 00:46:34,990
we do a lot is we have a lot of cases

00:46:32,350 --> 00:46:36,790
where our users need to search through a

00:46:34,990 --> 00:46:38,260
bunch of our data and then like list out

00:46:36,790 --> 00:46:39,970
a bunch of attributes for that data but

00:46:38,260 --> 00:46:44,619
then they might need to keep filtering

00:46:39,970 --> 00:46:46,960
the list and so we actually decided to

00:46:44,619 --> 00:46:48,430
create a combination of like a form view

00:46:46,960 --> 00:46:50,440
and a list view because we found that we

00:46:48,430 --> 00:46:51,880
were either starting with form view and

00:46:50,440 --> 00:46:53,200
adding all the functionality that list

00:46:51,880 --> 00:46:54,040
view added or starting with list view

00:46:53,200 --> 00:46:56,290
and adding all the form view

00:46:54,040 --> 00:46:59,830
functionality so we created a class that

00:46:56,290 --> 00:47:01,630
does that and that is also linked in

00:46:59,830 --> 00:47:03,670
here I'm also not going to show it cuz

00:47:01,630 --> 00:47:05,530
it's it's not it's much simpler and

00:47:03,670 --> 00:47:07,930
cleaner than the other view home but

00:47:05,530 --> 00:47:10,800
it's still worthier than what I would be

00:47:07,930 --> 00:47:10,800
nice to show on these screens

00:47:13,530 --> 00:47:18,750
okay so just really quick to cook to

00:47:15,810 --> 00:47:20,010
kind of finish up we covered intro to

00:47:18,750 --> 00:47:23,490
class with you so I kind of explained

00:47:20,010 --> 00:47:24,620
how we got to where we are and I like I

00:47:23,490 --> 00:47:26,790
said I linked the article if you're

00:47:24,620 --> 00:47:29,490
interesting it interested in reading

00:47:26,790 --> 00:47:31,350
more in detail what happened

00:47:29,490 --> 00:47:33,450
I went over some pros and cons I went

00:47:31,350 --> 00:47:35,400
over the internals which flows a little

00:47:33,450 --> 00:47:39,210
bit I mean I guess it's the intention of

00:47:35,400 --> 00:47:40,200
today right deep dive um but I yeah if

00:47:39,210 --> 00:47:42,180
you have any questions about that you

00:47:40,200 --> 00:47:43,800
can ask me later and then I talked about

00:47:42,180 --> 00:47:46,920
some of the generic views that I think

00:47:43,800 --> 00:47:48,780
are pretty useful and at least they can

00:47:46,920 --> 00:47:51,270
be really useful so if you find uses

00:47:48,780 --> 00:47:55,830
might as well stick them in I have a

00:47:51,270 --> 00:47:57,780
bunch of resources and uh one thing

00:47:55,830 --> 00:47:59,460
before I finish there are more slides

00:47:57,780 --> 00:48:00,330
actually my talk was really long I can

00:47:59,460 --> 00:48:04,500
talk for a really long time

00:48:00,330 --> 00:48:06,210
uh-huh so I actually have a few more

00:48:04,500 --> 00:48:07,530
slides on like mix-ins and decorators so

00:48:06,210 --> 00:48:09,480
if you're curious you can look at the at

00:48:07,530 --> 00:48:12,360
those slides later which are like you

00:48:09,480 --> 00:48:16,290
know just going past the end of the

00:48:12,360 --> 00:48:17,460
current end huh just want to let you

00:48:16,290 --> 00:48:20,580
know so if you want to look at those but

00:48:17,460 --> 00:48:21,830
um but yeah so that's it for me uh thank

00:48:20,580 --> 00:48:26,030
you everyone

00:48:21,830 --> 00:48:39,320
[Applause]

00:48:26,030 --> 00:48:39,320

YouTube URL: https://www.youtube.com/watch?v=qmKowZNmkCo


