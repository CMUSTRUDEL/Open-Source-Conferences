Title: DjangoCon 2019 - Using a custom template loader at scale by Dane Hillard
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Using a custom template loader at scale by Dane Hillard

You can reuse Django templates with the `{% include %}` tag. But what if you need to share a template across multiple projects? Learn how we built a custom template loader to ship template changes â€” all without deploying any code.

This talk was presented at: https://2019.djangocon.us/talks/using-a-custom-template-loader-at-scale/

LINKS:
Follow Dane Hillard ðŸ‘‡
On Twitter: https://twitter.com/easyaspython
Official homepage: https://dane.engineering

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:15,320 --> 00:00:20,300
so thanks for coming everybody how's

00:00:17,450 --> 00:00:24,740
your first day first day of talks anyway

00:00:20,300 --> 00:00:26,900
great good so I mean anything excuse me

00:00:24,740 --> 00:00:29,210
got a bit of a cold that I'm coming off

00:00:26,900 --> 00:00:31,310
of so I'm the only thing holding you

00:00:29,210 --> 00:00:33,440
from the talks and the rest of your

00:00:31,310 --> 00:00:36,890
evening so thanks for thanks for bearing

00:00:33,440 --> 00:00:38,629
with me and this talk was actually

00:00:36,890 --> 00:00:41,570
originally accepted as one of the deep

00:00:38,629 --> 00:00:43,850
dive talks due to some of my own gross

00:00:41,570 --> 00:00:45,430
incompetence I have scheduling conflict

00:00:43,850 --> 00:00:48,589
so thanks to the organizers for

00:00:45,430 --> 00:00:51,680
accommodating me today instead and

00:00:48,589 --> 00:00:53,600
thanks to all the volunteers and to

00:00:51,680 --> 00:00:57,440
those doing the the captioning up here

00:00:53,600 --> 00:01:02,989
and for making this conference great so

00:00:57,440 --> 00:01:04,970
I talked a little bit about myself give

00:01:02,989 --> 00:01:06,830
you an idea of who I am and how I came

00:01:04,970 --> 00:01:11,510
into Django and how Django plays a role

00:01:06,830 --> 00:01:14,270
in my life now and first this is kind of

00:01:11,510 --> 00:01:17,409
Who I am on the internet so you can find

00:01:14,270 --> 00:01:19,609
me on the web or on Twitter or github

00:01:17,409 --> 00:01:24,469
whatever your sort of preferred medium

00:01:19,609 --> 00:01:26,780
is and throughout the talk my my twitter

00:01:24,469 --> 00:01:28,609
handle is there on the bottom so if you

00:01:26,780 --> 00:01:30,619
have a question or something that you

00:01:28,609 --> 00:01:35,329
don't want to lose track of feel free to

00:01:30,619 --> 00:01:37,670
ask me as I'm giving this talk so I work

00:01:35,329 --> 00:01:40,240
at Ithaca and if it was a nonprofit

00:01:37,670 --> 00:01:43,009
organization in higher education space

00:01:40,240 --> 00:01:45,820
and we do sort of a lot of things

00:01:43,009 --> 00:01:48,140
helping with academic research and

00:01:45,820 --> 00:01:50,990
digital preservation of documents and

00:01:48,140 --> 00:01:55,850
things and specifically I work on JSTOR

00:01:50,990 --> 00:01:59,109
and JSTOR is an academic database online

00:01:55,850 --> 00:02:03,710
database as well as a research platform

00:01:59,109 --> 00:02:07,639
and I guess the way that I came into

00:02:03,710 --> 00:02:14,480
Django was sort of by my personal use

00:02:07,639 --> 00:02:16,340
first so I am a photographer and this

00:02:14,480 --> 00:02:18,540
photo in the middle here was taken in

00:02:16,340 --> 00:02:20,730
Mexico a couple weeks ago

00:02:18,540 --> 00:02:23,549
where I received the worsts more

00:02:20,730 --> 00:02:25,890
sunburned of my adult life so visiting

00:02:23,549 --> 00:02:31,739
sunny California was obviously the next

00:02:25,890 --> 00:02:33,989
natural step and the photo on the on the

00:02:31,739 --> 00:02:35,959
right is also in Joshua Tree which is

00:02:33,989 --> 00:02:39,870
not too far from here

00:02:35,959 --> 00:02:41,970
but I kind of had tried a couple other

00:02:39,870 --> 00:02:45,209
frameworks and a couple of their

00:02:41,970 --> 00:02:46,739
languages along the way in building my

00:02:45,209 --> 00:02:49,019
in building my site I needed something

00:02:46,739 --> 00:02:50,849
that could allow me to upload photos and

00:02:49,019 --> 00:02:54,120
organize them in different ways and

00:02:50,849 --> 00:02:57,510
maybe do blog posts and let customers

00:02:54,120 --> 00:02:58,530
contact me and things like that and none

00:02:57,510 --> 00:03:01,650
of these frameworks that I had been

00:02:58,530 --> 00:03:04,799
trying kind of resonated with me but I

00:03:01,650 --> 00:03:07,049
ultimately gave Django a try after

00:03:04,799 --> 00:03:09,329
having seen a little bit of Python and

00:03:07,049 --> 00:03:11,430
have kind of just been going with it

00:03:09,329 --> 00:03:15,470
ever since and it's been a joy to work

00:03:11,430 --> 00:03:21,269
with and I try to use it where I can so

00:03:15,470 --> 00:03:23,519
back to back to JSTOR around 2014 is

00:03:21,269 --> 00:03:25,859
when I joined the organization and at

00:03:23,519 --> 00:03:30,720
the time we were on this big proprietary

00:03:25,859 --> 00:03:32,579
CMS and it was a little bit it was a

00:03:30,720 --> 00:03:35,120
little bit difficult to change I mean

00:03:32,579 --> 00:03:37,769
think about developers doing these like

00:03:35,120 --> 00:03:40,290
day-long or multiple day-long trunk

00:03:37,769 --> 00:03:42,480
merge activities trying to get

00:03:40,290 --> 00:03:45,090
everyone's changes from the last however

00:03:42,480 --> 00:03:47,370
long it had been into the next release

00:03:45,090 --> 00:03:49,200
and people scrambling to make sure their

00:03:47,370 --> 00:03:51,540
stuff worked so that it could get into

00:03:49,200 --> 00:03:53,910
the next release because who knows how

00:03:51,540 --> 00:03:55,260
long it could be until the next one and

00:03:53,910 --> 00:03:59,459
there was also sort of low visibility

00:03:55,260 --> 00:04:02,190
into problems that might arise so

00:03:59,459 --> 00:04:04,560
anytime something was wrong we had a lot

00:04:02,190 --> 00:04:07,709
of digging to do to be able to kind of

00:04:04,560 --> 00:04:10,109
surmise what was going on and so around

00:04:07,709 --> 00:04:12,840
2014 I joined and we were in the middle

00:04:10,109 --> 00:04:17,299
of a project to get out of this

00:04:12,840 --> 00:04:21,120
situation and so we were at the time

00:04:17,299 --> 00:04:24,690
breaking this big CMS up into a variety

00:04:21,120 --> 00:04:27,990
of micro services and moving a lot of

00:04:24,690 --> 00:04:31,440
those services onto an AWS platform

00:04:27,990 --> 00:04:33,300
and that allowed us to do sort of these

00:04:31,440 --> 00:04:35,780
micro services for the back end as well

00:04:33,300 --> 00:04:40,020
as front end consumer applications

00:04:35,780 --> 00:04:41,460
consuming those api's and then do a lot

00:04:40,020 --> 00:04:42,930
better things like application health

00:04:41,460 --> 00:04:48,090
monitoring and continuous integration

00:04:42,930 --> 00:04:53,340
and auto scaling - so this is kind of

00:04:48,090 --> 00:04:55,289
where Django enters the picture and I

00:04:53,340 --> 00:04:56,759
got it was kind of a good pairing at the

00:04:55,289 --> 00:04:59,639
time because I had learned Django and I

00:04:56,759 --> 00:05:03,360
was I had been using it for a year or

00:04:59,639 --> 00:05:07,289
two at the time and so I knew enough to

00:05:03,360 --> 00:05:09,030
be dangerous and then I also wanted the

00:05:07,289 --> 00:05:11,849
challenge of learning a lot more of

00:05:09,030 --> 00:05:17,120
these detailed pieces of Django that I

00:05:11,849 --> 00:05:19,830
had yet to explore so I signed on and

00:05:17,120 --> 00:05:23,880
kind of the approach that we that we

00:05:19,830 --> 00:05:25,650
took with our applications is to not

00:05:23,880 --> 00:05:27,210
just have one project with many

00:05:25,650 --> 00:05:30,270
applications but actually to have

00:05:27,210 --> 00:05:32,220
several different distinct projects and

00:05:30,270 --> 00:05:34,830
this allowed us to do better fault

00:05:32,220 --> 00:05:36,659
tolerance and better independent

00:05:34,830 --> 00:05:39,990
performance profiling and auto-scaling

00:05:36,659 --> 00:05:43,050
so when say Google crawls the website

00:05:39,990 --> 00:05:45,389
and is hitting the article viewing

00:05:43,050 --> 00:05:48,240
application heavily we don't also want

00:05:45,389 --> 00:05:51,560
search to break under that heavy load so

00:05:48,240 --> 00:05:53,849
we wanted to maintain some amount of

00:05:51,560 --> 00:05:56,669
isolation between these applications and

00:05:53,849 --> 00:05:58,500
then at the same time we also wanted

00:05:56,669 --> 00:06:00,930
them still to share a number of things

00:05:58,500 --> 00:06:03,990
we wanted them to all do authentication

00:06:00,930 --> 00:06:07,050
the same way handle permissions the same

00:06:03,990 --> 00:06:08,520
way doing look and feel and search forms

00:06:07,050 --> 00:06:11,520
and all that kind of stuff the same way

00:06:08,520 --> 00:06:14,880
so being able to centralize some of the

00:06:11,520 --> 00:06:18,419
business logic was still it was still a

00:06:14,880 --> 00:06:21,389
big value to us and so it kind of whoops

00:06:18,419 --> 00:06:28,830
sorry it kind of ended up looking like

00:06:21,389 --> 00:06:31,949
this and so we we made this installable

00:06:28,830 --> 00:06:37,469
app that had all of our shared templates

00:06:31,949 --> 00:06:39,210
and we would install that app into each

00:06:37,469 --> 00:06:40,430
of the each of the consuming front-end

00:06:39,210 --> 00:06:42,860
applications in which

00:06:40,430 --> 00:06:43,820
we needed to use it this might be a

00:06:42,860 --> 00:06:45,530
practice that you're pretty familiar

00:06:43,820 --> 00:06:47,180
with if you use Django you install a

00:06:45,530 --> 00:06:49,130
plug-in you add it to your installed

00:06:47,180 --> 00:06:53,120
apps you can use all the templates from

00:06:49,130 --> 00:06:54,860
it and so on so this felt natural at the

00:06:53,120 --> 00:06:57,890
time and we were pretty happy with it

00:06:54,860 --> 00:06:59,930
for a while but as we kind of grew and

00:06:57,890 --> 00:07:01,870
started breaking out more pieces of the

00:06:59,930 --> 00:07:04,400
CMS we ended up with more applications

00:07:01,870 --> 00:07:07,670
more distinct applications and

00:07:04,400 --> 00:07:09,160
ultimately the problem we ran into was

00:07:07,670 --> 00:07:12,800
that these changes to the look and feel

00:07:09,160 --> 00:07:16,340
required deployment to basically every

00:07:12,800 --> 00:07:18,440
consumer right and so if you imagine

00:07:16,340 --> 00:07:21,830
that each app has to have this

00:07:18,440 --> 00:07:24,440
navigation at the top if you need to add

00:07:21,830 --> 00:07:27,440
one link to the navigation if to deploy

00:07:24,440 --> 00:07:29,180
all 37 applications that need to show

00:07:27,440 --> 00:07:33,670
the application I need to show that

00:07:29,180 --> 00:07:37,370
navigation rather and that wasn't great

00:07:33,670 --> 00:07:40,790
so we were starting to feel these pains

00:07:37,370 --> 00:07:42,560
and didn't really didn't really have a

00:07:40,790 --> 00:07:45,920
great idea where we wanted to go with it

00:07:42,560 --> 00:07:48,920
next but the way we sort of approached

00:07:45,920 --> 00:07:50,270
this was to write down what we wanted

00:07:48,920 --> 00:07:54,140
out of it and what what it needed to

00:07:50,270 --> 00:07:56,630
achieve and then we could go from that

00:07:54,140 --> 00:07:58,790
and try and find a solution so the

00:07:56,630 --> 00:08:00,080
desires really were for all these

00:07:58,790 --> 00:08:03,980
consumers that we have all these

00:08:00,080 --> 00:08:06,920
front-end applications to be able to

00:08:03,980 --> 00:08:09,680
receive these updates without a

00:08:06,920 --> 00:08:12,350
deployment in as near real-time as we

00:08:09,680 --> 00:08:14,420
could do it and in some way that would

00:08:12,350 --> 00:08:17,780
not actually affect the page load

00:08:14,420 --> 00:08:21,560
performance for our users in a in a bad

00:08:17,780 --> 00:08:24,500
way or in an impactful way and so this

00:08:21,560 --> 00:08:29,300
kind of started to sound like a service

00:08:24,500 --> 00:08:31,310
that would that would serve templates we

00:08:29,300 --> 00:08:33,650
didn't know exactly what that meant at

00:08:31,310 --> 00:08:35,720
the time but that's that's kind of what

00:08:33,650 --> 00:08:36,800
we wanted we needed something that was a

00:08:35,720 --> 00:08:40,130
central place that all these

00:08:36,800 --> 00:08:42,650
applications could go and ask for a

00:08:40,130 --> 00:08:44,930
specific template and then receive the

00:08:42,650 --> 00:08:47,480
content of that template and then that

00:08:44,930 --> 00:08:50,600
temp that service could be the one place

00:08:47,480 --> 00:08:51,329
to to make those updates so that all

00:08:50,600 --> 00:08:53,129
these apps

00:08:51,329 --> 00:08:56,610
could then reap the benefits of those

00:08:53,129 --> 00:08:59,009
updates and after quite a bit of digging

00:08:56,610 --> 00:09:02,429
and thinking and reading a lot of

00:08:59,009 --> 00:09:07,739
documentation we settled on custom

00:09:02,429 --> 00:09:09,629
template loaders and so the rest of this

00:09:07,739 --> 00:09:12,269
talk is can I going to cover this

00:09:09,629 --> 00:09:15,179
concept and so we'll cover a little bit

00:09:12,269 --> 00:09:18,600
about what these actually are and how we

00:09:15,179 --> 00:09:22,769
use them at JSTOR and some of the things

00:09:18,600 --> 00:09:25,079
that it helped us achieve and then also

00:09:22,769 --> 00:09:29,179
some of the things we have kind of yet

00:09:25,079 --> 00:09:29,179
to do to reach where we're trying to go

00:09:30,049 --> 00:09:37,379
so first off we'll kind of go into what

00:09:34,589 --> 00:09:39,420
they really are so this picture might be

00:09:37,379 --> 00:09:43,049
something you're used to if you've used

00:09:39,420 --> 00:09:44,610
Django for some time now you've seen it

00:09:43,049 --> 00:09:46,410
probably in some other form either in

00:09:44,610 --> 00:09:48,420
the Django Docs or a number of blog

00:09:46,410 --> 00:09:51,720
posts kind of cover this but essentially

00:09:48,420 --> 00:09:53,670
there's these layers of of the request

00:09:51,720 --> 00:09:56,100
lifecycle that happen when someone

00:09:53,670 --> 00:09:57,720
requests a page on your site and so it

00:09:56,100 --> 00:09:59,850
starts by going down through the web

00:09:57,720 --> 00:10:01,949
server and gets translated through the

00:09:59,850 --> 00:10:03,989
Whiskey layer into something that Python

00:10:01,949 --> 00:10:06,749
can understand and then there's this

00:10:03,989 --> 00:10:09,509
middleware layer that allows you to

00:10:06,749 --> 00:10:11,429
intercept that request as it comes in

00:10:09,509 --> 00:10:14,040
make some changes or add information to

00:10:11,429 --> 00:10:15,600
it and then within the views where you

00:10:14,040 --> 00:10:17,669
have kind of your your business logic

00:10:15,600 --> 00:10:20,339
happening and then you ultimately render

00:10:17,669 --> 00:10:22,259
a template which flows back up the stack

00:10:20,339 --> 00:10:25,439
ultimately into this response that users

00:10:22,259 --> 00:10:29,089
see and this maybe is nothing new for

00:10:25,439 --> 00:10:31,889
you but what we've we really wanted to

00:10:29,089 --> 00:10:35,129
attack was like the part that happens

00:10:31,889 --> 00:10:37,169
underneath that so that's the part we

00:10:35,129 --> 00:10:41,100
had never really seen or thought about

00:10:37,169 --> 00:10:46,049
before and it turned out that template

00:10:41,100 --> 00:10:49,169
loaders are that piece and like most

00:10:46,049 --> 00:10:53,189
things in Django it provides a very

00:10:49,169 --> 00:10:56,399
reasonable and pluggable and easy way to

00:10:53,189 --> 00:11:01,529
kind of get to that piece of the request

00:10:56,399 --> 00:11:03,480
lifecycle so it the the template loaders

00:11:01,529 --> 00:11:04,390
job is ultimately to accept a template

00:11:03,480 --> 00:11:07,300
name and

00:11:04,390 --> 00:11:09,460
return that templates content and that

00:11:07,300 --> 00:11:12,670
going back to our desires it's kind of

00:11:09,460 --> 00:11:15,370
kind of where we wanted to head so there

00:11:12,670 --> 00:11:17,680
are a few template loaders installed by

00:11:15,370 --> 00:11:20,200
default well available by default in

00:11:17,680 --> 00:11:24,130
Django and installed by default if you

00:11:20,200 --> 00:11:26,440
haven't specified your own and the file

00:11:24,130 --> 00:11:29,050
system loader will look for templates

00:11:26,440 --> 00:11:30,970
within your project and then the app

00:11:29,050 --> 00:11:32,890
directory 'slow der will look for

00:11:30,970 --> 00:11:35,170
template directories within each of your

00:11:32,890 --> 00:11:38,350
apps that are installed and then the

00:11:35,170 --> 00:11:41,190
cached loader will wrap some number of

00:11:38,350 --> 00:11:44,050
other loaders so that subsequent

00:11:41,190 --> 00:11:46,180
requests for those templates don't

00:11:44,050 --> 00:11:50,560
involve additional processing each time

00:11:46,180 --> 00:11:53,080
and there's there's I think a couple

00:11:50,560 --> 00:11:54,520
others that are also available but

00:11:53,080 --> 00:11:58,360
they're in the docks if you'd like to

00:11:54,520 --> 00:12:01,060
learn more about those and again its

00:11:58,360 --> 00:12:03,280
main job is to you know given a template

00:12:01,060 --> 00:12:07,390
named return that templates content and

00:12:03,280 --> 00:12:10,000
so a simple simple way to do that is to

00:12:07,390 --> 00:12:12,130
subclass the base loader class and

00:12:10,000 --> 00:12:17,140
there's these two methods get template

00:12:12,130 --> 00:12:20,710
sources and get contents that are sort

00:12:17,140 --> 00:12:23,560
of the meat of things and the get

00:12:20,710 --> 00:12:25,360
template sources method is meant to get

00:12:23,560 --> 00:12:28,180
all the possible locations where that

00:12:25,360 --> 00:12:29,800
loader knows it could look for a

00:12:28,180 --> 00:12:32,410
template it doesn't actually have to

00:12:29,800 --> 00:12:33,850
check that they're there but just return

00:12:32,410 --> 00:12:36,520
a list of locations where it might be

00:12:33,850 --> 00:12:38,830
and then get contents will iterate over

00:12:36,520 --> 00:12:40,870
those locations check if the template is

00:12:38,830 --> 00:12:45,190
available there and if so return the

00:12:40,870 --> 00:12:48,160
content and if it goes through this

00:12:45,190 --> 00:12:50,500
process and ultimately can't can't find

00:12:48,160 --> 00:12:53,110
any template then it raises the template

00:12:50,500 --> 00:12:56,560
does not exist which will then kind of

00:12:53,110 --> 00:13:02,530
defer to later loaders to try and find

00:12:56,560 --> 00:13:05,590
the template being asked for so this is

00:13:02,530 --> 00:13:11,140
this is a kind of a flow that we wanted

00:13:05,590 --> 00:13:14,140
to intercept this is not good

00:13:11,140 --> 00:13:16,450
I don't know what that slide was I think

00:13:14,140 --> 00:13:17,740
this was just - I think this slide was

00:13:16,450 --> 00:13:20,860
just showing

00:13:17,740 --> 00:13:23,590
that you can add that loader into Django

00:13:20,860 --> 00:13:24,580
by there's like in the in the settings

00:13:23,590 --> 00:13:26,560
dot pie file

00:13:24,580 --> 00:13:29,140
there's the templates setting with an

00:13:26,560 --> 00:13:31,330
options setting within that and then

00:13:29,140 --> 00:13:33,370
there's a loaders option that you can

00:13:31,330 --> 00:13:38,380
configure a list of loaders so you would

00:13:33,370 --> 00:13:40,690
just point it to the dotted string path

00:13:38,380 --> 00:13:49,960
of that dotted path string of that

00:13:40,690 --> 00:13:52,750
loader so how did we how do we use this

00:13:49,960 --> 00:13:57,310
how did we get what we wanted using a

00:13:52,750 --> 00:14:01,810
template loader ultimately it looked

00:13:57,310 --> 00:14:04,990
like this so when we when we get down

00:14:01,810 --> 00:14:07,390
into that template rendering process we

00:14:04,990 --> 00:14:10,210
are now have now have this way to

00:14:07,390 --> 00:14:12,790
intercept the loading process using this

00:14:10,210 --> 00:14:15,780
loader class and what we can do in that

00:14:12,790 --> 00:14:18,040
loader class is check if this is a

00:14:15,780 --> 00:14:21,370
template that we are interested in

00:14:18,040 --> 00:14:24,100
loading from this remote service and if

00:14:21,370 --> 00:14:25,990
it is then we can check if that template

00:14:24,100 --> 00:14:28,270
content is already in a cache of some

00:14:25,990 --> 00:14:31,030
kind and if it is we can return that

00:14:28,270 --> 00:14:32,800
template content that's been cached and

00:14:31,030 --> 00:14:35,440
if not we can fetch it from the service

00:14:32,800 --> 00:14:38,800
which will cache it and then return that

00:14:35,440 --> 00:14:41,410
content and if it's not a template that

00:14:38,800 --> 00:14:43,180
we care to fetch from the remote service

00:14:41,410 --> 00:14:46,210
we can just raise template does not

00:14:43,180 --> 00:14:48,040
exist because the future loaders that

00:14:46,210 --> 00:14:51,250
are the default Django loaders file

00:14:48,040 --> 00:14:52,960
system loader after actors loader will

00:14:51,250 --> 00:14:55,350
then be able to to look where they

00:14:52,960 --> 00:14:58,150
normally would in the local file system

00:14:55,350 --> 00:14:59,770
for those for those template content so

00:14:58,150 --> 00:15:01,630
the templates that we want to fetch from

00:14:59,770 --> 00:15:05,110
the service like the navigation and the

00:15:01,630 --> 00:15:09,220
layouts that we have in the footer will

00:15:05,110 --> 00:15:10,960
go to be fetched remotely and all the

00:15:09,220 --> 00:15:12,970
sort of app specific templates and

00:15:10,960 --> 00:15:13,690
things like that can be fetched as they

00:15:12,970 --> 00:15:17,290
normally would be

00:15:13,690 --> 00:15:21,850
so that part on the right there is kind

00:15:17,290 --> 00:15:24,490
of the get contents part and the part on

00:15:21,850 --> 00:15:30,070
the left is the get template sources

00:15:24,490 --> 00:15:33,970
part referring back to that loader API

00:15:30,070 --> 00:15:35,829
and architectural II this looks somewhat

00:15:33,970 --> 00:15:38,110
like this so if we have an articles

00:15:35,829 --> 00:15:40,540
application the first thing that we'll

00:15:38,110 --> 00:15:42,310
do when trying to render a template and

00:15:40,540 --> 00:15:44,320
it knows that it's one of these remote

00:15:42,310 --> 00:15:45,699
templates that it needs to fetch it will

00:15:44,320 --> 00:15:48,040
go to the service to check if it's

00:15:45,699 --> 00:15:51,579
available if not it will call this

00:15:48,040 --> 00:15:55,079
template delivery service and that will

00:15:51,579 --> 00:15:57,550
check the database for that content and

00:15:55,079 --> 00:15:59,170
retrieve it and then put it in the cache

00:15:57,550 --> 00:16:09,279
and then ultimately return it to the

00:15:59,170 --> 00:16:11,139
application so basically we wanted to

00:16:09,279 --> 00:16:14,940
check her obviously if this meet met all

00:16:11,139 --> 00:16:17,290
of our desires first of all and so

00:16:14,940 --> 00:16:19,660
consumers could receive those updates

00:16:17,290 --> 00:16:22,660
without deployment any time we wanted to

00:16:19,660 --> 00:16:25,560
put a new version of a template up we

00:16:22,660 --> 00:16:28,480
would simply add it to the service and

00:16:25,560 --> 00:16:30,160
that update would propagate in a way

00:16:28,480 --> 00:16:32,380
that those those apps could ask for it

00:16:30,160 --> 00:16:35,380
and get the updated content in

00:16:32,380 --> 00:16:36,760
near-real-time pretty close the biggest

00:16:35,380 --> 00:16:39,850
thing is the network call to the cache

00:16:36,760 --> 00:16:43,870
or the network call to the service and

00:16:39,850 --> 00:16:46,740
those things can be improved with with

00:16:43,870 --> 00:16:48,910
bigger machines and horizontal scaling

00:16:46,740 --> 00:16:51,279
and without affecting page load

00:16:48,910 --> 00:16:54,490
performance so with heavy caching and

00:16:51,279 --> 00:16:56,199
things like that most times if a user

00:16:54,490 --> 00:17:00,850
requests a page they'll be getting

00:16:56,199 --> 00:17:02,470
cached content and the the increase in

00:17:00,850 --> 00:17:05,860
in page load time there was fairly

00:17:02,470 --> 00:17:09,459
negligible for us so it kind of checked

00:17:05,860 --> 00:17:13,089
all the boxes and some other things that

00:17:09,459 --> 00:17:15,429
it kind of got us were this ability to

00:17:13,089 --> 00:17:17,970
do per user configuration for testing

00:17:15,429 --> 00:17:20,409
changes to those templates so we have

00:17:17,970 --> 00:17:22,480
kind of this live configuration system

00:17:20,409 --> 00:17:24,220
that we use for feature flags and

00:17:22,480 --> 00:17:27,760
setting string parameters and things

00:17:24,220 --> 00:17:29,830
like that so coupled with this we could

00:17:27,760 --> 00:17:32,890
pretty easily enable new versions of

00:17:29,830 --> 00:17:35,950
templates just for ourselves for testing

00:17:32,890 --> 00:17:37,630
purposes and do things like browse the

00:17:35,950 --> 00:17:39,580
site with changes to the navigation the

00:17:37,630 --> 00:17:41,530
footer or the layout everything like

00:17:39,580 --> 00:17:43,900
that and it made it easy to test impact

00:17:41,530 --> 00:17:48,190
of changes like adding preload or

00:17:43,900 --> 00:17:51,100
prefetch pre-connected tags to our pages

00:17:48,190 --> 00:17:54,660
and things like that too so this was a

00:17:51,100 --> 00:17:58,510
pretty nice kind of fringe benefit and

00:17:54,660 --> 00:18:01,690
we built a system around making this

00:17:58,510 --> 00:18:02,170
easier for ourselves which looks like

00:18:01,690 --> 00:18:04,630
this

00:18:02,170 --> 00:18:06,750
so you can kind of select the layout

00:18:04,630 --> 00:18:09,940
that you're interested in updating

00:18:06,750 --> 00:18:13,720
specify which version of the template

00:18:09,940 --> 00:18:15,720
you want to to add make a description

00:18:13,720 --> 00:18:20,470
for what that change actually does

00:18:15,720 --> 00:18:22,240
upload a new file and put your name as

00:18:20,470 --> 00:18:27,100
the person who uploaded it just as a bit

00:18:22,240 --> 00:18:28,600
of an audit trail and then you get a

00:18:27,100 --> 00:18:32,260
list kind of of all the available

00:18:28,600 --> 00:18:34,840
versions and you can enable that version

00:18:32,260 --> 00:18:36,340
for your local session or you can enable

00:18:34,840 --> 00:18:38,650
that for all users once you've

00:18:36,340 --> 00:18:44,320
determined that that change is desirable

00:18:38,650 --> 00:18:51,700
and situation permitting I will show you

00:18:44,320 --> 00:18:55,930
a live demo let's see it's got to make

00:18:51,700 --> 00:18:59,250
sure I'm on that screen new tab the new

00:18:55,930 --> 00:18:59,250
tab opened on my screen

00:19:06,039 --> 00:19:23,870
so normally jstor org shows a JSTOR logo

00:19:13,580 --> 00:19:25,100
as you might imagine but well this is

00:19:23,870 --> 00:19:27,350
going to be difficult with a separate

00:19:25,100 --> 00:19:29,480
screen I will show you after in the

00:19:27,350 --> 00:19:30,230
interest of time I'm happy to show you

00:19:29,480 --> 00:19:37,490
how this works

00:19:30,230 --> 00:19:39,440
so going back over here this also

00:19:37,490 --> 00:19:41,450
ultimately allowed us to do parallel

00:19:39,440 --> 00:19:48,889
development of a whole site wide

00:19:41,450 --> 00:19:51,470
redesign so we that's good we about two

00:19:48,889 --> 00:19:53,600
years ago had an interest in sort of

00:19:51,470 --> 00:19:55,999
rebranding and changing the entire look

00:19:53,600 --> 00:19:58,700
and feel of the site we wanted to do

00:19:55,999 --> 00:20:01,549
this normally we want to do incremental

00:19:58,700 --> 00:20:04,009
development and deliver deliver value as

00:20:01,549 --> 00:20:05,749
fast as we can and in small pieces but

00:20:04,009 --> 00:20:08,179
with something a project of that nature

00:20:05,749 --> 00:20:10,749
we wanted to kind of wait until it was

00:20:08,179 --> 00:20:12,950
all ready and vetted out and and just so

00:20:10,749 --> 00:20:15,529
so that we could flip it on for everyone

00:20:12,950 --> 00:20:18,139
all at once and using that system that I

00:20:15,529 --> 00:20:18,919
mentioned before we were able to to

00:20:18,139 --> 00:20:21,830
really do that

00:20:18,919 --> 00:20:25,009
we one day we're able to just turn on

00:20:21,830 --> 00:20:27,919
the entire redesign for all of our users

00:20:25,009 --> 00:20:30,110
because we had parallel copies of all

00:20:27,919 --> 00:20:31,730
these templates that were available and

00:20:30,110 --> 00:20:34,639
so we just selected all the ones we

00:20:31,730 --> 00:20:39,440
wanted flipped it on and it all worked

00:20:34,639 --> 00:20:41,889
so we did face a couple problems one of

00:20:39,440 --> 00:20:44,929
which was this thundering herd issue so

00:20:41,889 --> 00:20:47,899
initially we had cached our template

00:20:44,929 --> 00:20:50,210
content at the consumers and we had only

00:20:47,899 --> 00:20:53,299
cached it for some limited amount of

00:20:50,210 --> 00:20:55,399
time and there were times when that

00:20:53,299 --> 00:20:57,470
content fell out of the cache and then

00:20:55,399 --> 00:21:00,950
every consumer went to the service at

00:20:57,470 --> 00:21:02,990
the same time and service got bogged

00:21:00,950 --> 00:21:05,779
down enough that none of them received a

00:21:02,990 --> 00:21:07,549
response and so new requests coming in

00:21:05,779 --> 00:21:09,799
from new users also called the remote

00:21:07,549 --> 00:21:12,980
service and it just spiraled out of

00:21:09,799 --> 00:21:15,740
control so that was a lesson learned and

00:21:12,980 --> 00:21:19,309
we cashed in definitely at the service

00:21:15,740 --> 00:21:21,380
instead and the cash floater

00:21:19,309 --> 00:21:24,740
configuration was a bit confusing it

00:21:21,380 --> 00:21:27,679
normally is only on in production so

00:21:24,740 --> 00:21:29,360
when settings dot debug is false but

00:21:27,679 --> 00:21:32,120
then if you specify your loaders

00:21:29,360 --> 00:21:34,520
explicitly you have to just make sure

00:21:32,120 --> 00:21:36,710
that it's still only on when you want it

00:21:34,520 --> 00:21:38,870
to be an off when you want it to be we

00:21:36,710 --> 00:21:40,460
ran into issues where local in local

00:21:38,870 --> 00:21:41,960
development our templates were being

00:21:40,460 --> 00:21:43,670
cached so we would make a change in the

00:21:41,960 --> 00:21:46,340
template and wouldn't be able to see

00:21:43,670 --> 00:21:50,000
that that update and it just confused us

00:21:46,340 --> 00:21:52,120
a bit so that file management thing that

00:21:50,000 --> 00:21:55,309
I showed you is also a little bit clumsy

00:21:52,120 --> 00:21:59,120
it's easy to upload the wrong copy of a

00:21:55,309 --> 00:22:01,460
file or forget to commit a version of a

00:21:59,120 --> 00:22:05,390
file that you uploaded things like that

00:22:01,460 --> 00:22:07,760
so what's left would be to kind of

00:22:05,390 --> 00:22:10,190
improve that story around adding and

00:22:07,760 --> 00:22:12,230
removing layouts and templates but also

00:22:10,190 --> 00:22:14,990
we may just want to use version control

00:22:12,230 --> 00:22:16,790
for that because it's already good at at

00:22:14,990 --> 00:22:21,980
doing exactly that

00:22:16,790 --> 00:22:24,080
so thanks that's it I also need to

00:22:21,980 --> 00:22:28,130
mention that I'm writing a book it's

00:22:24,080 --> 00:22:29,870
practices of the Python Pro it's the

00:22:28,130 --> 00:22:32,179
this code on the screen here can get you

00:22:29,870 --> 00:22:34,240
40% off on that for the duration of this

00:22:32,179 --> 00:22:38,600
conference but also specifically today

00:22:34,240 --> 00:22:41,360
all of the manning books are $25 for

00:22:38,600 --> 00:22:42,530
print books so see which one of those

00:22:41,360 --> 00:22:45,530
might be cheaper if there's a book

00:22:42,530 --> 00:22:52,970
you're interested in that's all I have

00:22:45,530 --> 00:22:55,970
thank you do you have any problems with

00:22:52,970 --> 00:22:59,750
your caching memory management like are

00:22:55,970 --> 00:23:01,970
you accidentally over caching items and

00:22:59,750 --> 00:23:03,740
keeping them stored or are you able to

00:23:01,970 --> 00:23:08,000
make sure that you're deleting

00:23:03,740 --> 00:23:11,510
everything sorry good question um we

00:23:08,000 --> 00:23:12,830
cache these things separately from most

00:23:11,510 --> 00:23:16,220
other things I think we have a cache

00:23:12,830 --> 00:23:19,040
specifically for this and there's a very

00:23:16,220 --> 00:23:22,700
small handful of templates that we're

00:23:19,040 --> 00:23:23,870
caching so it's the way we've chosen to

00:23:22,700 --> 00:23:25,940
do the infrastructure there it's very

00:23:23,870 --> 00:23:27,880
easy to say cache this forever

00:23:25,940 --> 00:23:31,090
we don't care

00:23:27,880 --> 00:23:33,730
eventually things may like if you reach

00:23:31,090 --> 00:23:36,570
the if you sort of saturate your cache

00:23:33,730 --> 00:23:39,790
right things may eventually fall out but

00:23:36,570 --> 00:23:42,310
there'll be well the oldest things right

00:23:39,790 --> 00:23:46,090
at least access so we have not run into

00:23:42,310 --> 00:23:50,680
any any caching issues at the moment so

00:23:46,090 --> 00:23:53,200
I hope I didn't miss this but for your

00:23:50,680 --> 00:23:56,230
individual apps do you have a way that

00:23:53,200 --> 00:23:58,450
they can customize the templates they're

00:23:56,230 --> 00:24:01,510
requesting or do they all just get the

00:23:58,450 --> 00:24:03,370
same template you know every single app

00:24:01,510 --> 00:24:06,130
if it asks for template a it's always

00:24:03,370 --> 00:24:08,950
the same coming out so it's always the

00:24:06,130 --> 00:24:12,010
same but it's still a template so there

00:24:08,950 --> 00:24:15,490
it still has the places in the template

00:24:12,010 --> 00:24:17,790
that you can fill in information it has

00:24:15,490 --> 00:24:21,220
blocks you can extend it if you like

00:24:17,790 --> 00:24:23,410
it's all the same way that the Django

00:24:21,220 --> 00:24:25,990
template workflow normally works we're

00:24:23,410 --> 00:24:28,810
just getting that initial file from a

00:24:25,990 --> 00:24:32,440
service instead of the file system good

00:24:28,810 --> 00:24:36,250
question well what did you use for

00:24:32,440 --> 00:24:38,020
feature flags that's another talk in

00:24:36,250 --> 00:24:41,500
itself but ultimately it's it's another

00:24:38,020 --> 00:24:44,620
django app we rolled our own partly

00:24:41,500 --> 00:24:46,870
because of the way certain specifics

00:24:44,620 --> 00:24:49,780
around our authentication and and things

00:24:46,870 --> 00:24:54,240
like that work but I would probably

00:24:49,780 --> 00:24:56,950
recommend like Django what is it called

00:24:54,240 --> 00:25:00,730
waffle I think there's one called

00:24:56,950 --> 00:25:02,140
gargoyle - maybe any one anyway there's

00:25:00,730 --> 00:25:05,560
there's a few libraries out there for

00:25:02,140 --> 00:25:08,280
you for sure there's also launched

00:25:05,560 --> 00:25:11,950
darkly which is like a fully managed

00:25:08,280 --> 00:25:15,430
service and API have you messed with

00:25:11,950 --> 00:25:17,440
Redis versus white noise and do you have

00:25:15,430 --> 00:25:21,040
a preference and why I've never used

00:25:17,440 --> 00:25:25,720
white noise white noises for like static

00:25:21,040 --> 00:25:26,710
files right so I suppose we could make

00:25:25,720 --> 00:25:29,800
that work right because they're

00:25:26,710 --> 00:25:31,060
ultimately just static files but yeah if

00:25:29,800 --> 00:25:33,040
we haven't we haven't tried that I

00:25:31,060 --> 00:25:35,860
haven't even tried white noise for for

00:25:33,040 --> 00:25:36,730
like personal apps or anything so that

00:25:35,860 --> 00:25:40,840
could be interesting too

00:25:36,730 --> 00:25:43,780
though for sure yep all right thank you

00:25:40,840 --> 00:25:47,320
so much for joining us you can use this

00:25:43,780 --> 00:25:50,230
towel to get over your coal thank you

00:25:47,320 --> 00:26:03,529
[Applause]

00:25:50,230 --> 00:26:03,529

YouTube URL: https://www.youtube.com/watch?v=pocIpg1FZ3c


