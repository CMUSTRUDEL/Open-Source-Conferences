Title: DjangoCon 2019 -  Logging and Exception Handling for Django by Ryan Sullivan
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 -  Logging and Exception Handling for Django by Ryan Sullivan

Logging is better than print(), but often the effort to set up and use Python logging is perceived to be impractical. In this session we'll review Python's logging API, explore handling exceptions using logging, and discuss various configurations available in Django.

This talk was presented at: https://2019.djangocon.us/talks/logging-and-exception-handling-for/

LINKS:
Follow Ryan Sullivan ðŸ‘‡
On Twitter: https://twitter.com/rgs258
Official homepage: https://www.linkedin.com/in/rgs258

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,740 --> 00:00:18,980
thank you

00:00:16,070 --> 00:00:22,640
Thank You Russ welcome everybody to

00:00:18,980 --> 00:00:24,980
logging and exception handling for Jengo

00:00:22,640 --> 00:00:28,670
I'm Ryan I'm super excited to be here at

00:00:24,980 --> 00:00:31,039
Django con u.s. 2019 first I just want

00:00:28,670 --> 00:00:34,280
to say thank you to the organizers for

00:00:31,039 --> 00:00:35,870
the opportunity to speak here today also

00:00:34,280 --> 00:00:37,850
I wouldn't be doing my job if I didn't

00:00:35,870 --> 00:00:39,050
think my employer the Wharton School of

00:00:37,850 --> 00:00:41,300
Business at the University of

00:00:39,050 --> 00:00:44,030
Pennsylvania specifically my department

00:00:41,300 --> 00:00:47,390
warden research data services who sent

00:00:44,030 --> 00:00:50,000
me here to San Diego if you'd like to

00:00:47,390 --> 00:00:52,879
know more about words specifically our

00:00:50,000 --> 00:00:55,040
API that exposes 60,000 endpoints and

00:00:52,879 --> 00:00:57,379
one and a half petabytes a day of data

00:00:55,040 --> 00:01:00,110
my colleague Tim is giving a talk on

00:00:57,379 --> 00:01:02,390
just that subject right next door it's

00:01:00,110 --> 00:01:04,159
being recorded I hear and you can watch

00:01:02,390 --> 00:01:05,750
it after the conference it's a great

00:01:04,159 --> 00:01:07,780
presentation I've heard it before and I

00:01:05,750 --> 00:01:11,299
recommend to everybody check it out

00:01:07,780 --> 00:01:14,409
thank you for attending logging has been

00:01:11,299 --> 00:01:17,659
around for more than a million years and

00:01:14,409 --> 00:01:19,490
like writing tests we all know that we

00:01:17,659 --> 00:01:22,729
should be doing it many of us still

00:01:19,490 --> 00:01:24,350
don't it is true it's easier to write

00:01:22,729 --> 00:01:26,179
print than it is to write logging it's

00:01:24,350 --> 00:01:29,259
actually six more keystrokes to write

00:01:26,179 --> 00:01:31,909
log or info than it is to write print I

00:01:29,259 --> 00:01:33,409
think that it's worth the effort and I'm

00:01:31,909 --> 00:01:35,810
here to try to convince you that it is

00:01:33,409 --> 00:01:38,329
as well I'll talk for about 35 minutes

00:01:35,810 --> 00:01:40,100
I'll take five minutes of questions and

00:01:38,329 --> 00:01:42,909
hopefully really see you five minutes

00:01:40,100 --> 00:01:47,329
early we'll see if I can stick to that

00:01:42,909 --> 00:01:48,890
so I'm here to talk to you about what

00:01:47,329 --> 00:01:50,990
I've learned or about jinguk I'm sorry

00:01:48,890 --> 00:01:53,929
about logging will talk about

00:01:50,990 --> 00:01:56,569
configuring logging how we import the

00:01:53,929 --> 00:01:59,539
logging module and get a logger gain

00:01:56,569 --> 00:02:02,240
access to the logger placing messages

00:01:59,539 --> 00:02:04,969
into the logger for example using la

00:02:02,240 --> 00:02:09,679
gata info log about warning logger

00:02:04,969 --> 00:02:13,610
exception we will try some code raise

00:02:09,679 --> 00:02:15,680
some exceptions and accept them and see

00:02:13,610 --> 00:02:18,380
how we can handle those and we'll talk a

00:02:15,680 --> 00:02:20,780
little bit about formatting and how

00:02:18,380 --> 00:02:22,190
handlers can receive messages from

00:02:20,780 --> 00:02:26,150
loggers and

00:02:22,190 --> 00:02:26,990
them if you're wondering if you're in

00:02:26,150 --> 00:02:28,690
the right place

00:02:26,990 --> 00:02:31,790
hopefully this session is for everybody

00:02:28,690 --> 00:02:35,240
I'll discuss logging for Django and

00:02:31,790 --> 00:02:38,450
Python at a more entry level at first

00:02:35,240 --> 00:02:41,180
and then we'll go into a dive into the

00:02:38,450 --> 00:02:43,040
logging framework for Python some

00:02:41,180 --> 00:02:44,330
exception handling and then we'll tie it

00:02:43,040 --> 00:02:50,810
together with some next steps and

00:02:44,330 --> 00:02:52,670
recommendations so in a former life I

00:02:50,810 --> 00:02:56,260
worked for Urban Outfitters and I sort

00:02:52,670 --> 00:02:58,490
of did their feeds I was responsible for

00:02:56,260 --> 00:03:01,610
generating feeds and then receiving

00:02:58,490 --> 00:03:05,540
feeds from our from our partners and we

00:03:01,610 --> 00:03:08,300
had a bunch of Java classes that just

00:03:05,540 --> 00:03:11,810
processed feeds and we would cron them

00:03:08,300 --> 00:03:13,430
and I would use bass to try and rotate

00:03:11,810 --> 00:03:17,000
logs and I never knew what was happening

00:03:13,430 --> 00:03:19,250
in my feeds and my god classes as they

00:03:17,000 --> 00:03:20,750
were and so one day I said I need

00:03:19,250 --> 00:03:24,410
something better so I said you know I'm

00:03:20,750 --> 00:03:26,600
just gonna learn log4j and I so I

00:03:24,410 --> 00:03:28,310
printed the documentation because back

00:03:26,600 --> 00:03:29,780
then I printed things and I said I'm

00:03:28,310 --> 00:03:31,490
gonna read it while traveling while I'm

00:03:29,780 --> 00:03:33,230
sitting still and have nothing else to

00:03:31,490 --> 00:03:35,600
do and so I started reading this

00:03:33,230 --> 00:03:39,170
documentation and I got so engrossed in

00:03:35,600 --> 00:03:41,060
it that I actually accidentally left my

00:03:39,170 --> 00:03:43,459
suitcase on the platform of San

00:03:41,060 --> 00:03:45,200
Francisco's regional rail system I was

00:03:43,459 --> 00:03:47,840
really happy that it was still there

00:03:45,200 --> 00:03:50,570
when I got back but the points is that

00:03:47,840 --> 00:03:52,820
it's the the documentation is for live

00:03:50,570 --> 00:03:54,200
for today was actually great and Python

00:03:52,820 --> 00:03:56,810
and Django slogging for the

00:03:54,200 --> 00:03:59,030
documentation is also really engaging

00:03:56,810 --> 00:04:01,489
you can actually really get in there if

00:03:59,030 --> 00:04:06,770
you once you start so I highly recommend

00:04:01,489 --> 00:04:08,870
it I've been doing software for 16 years

00:04:06,770 --> 00:04:10,940
I started with Java I then did

00:04:08,870 --> 00:04:14,090
ColdFusion that's Tim's fault you can

00:04:10,940 --> 00:04:16,010
blame him for it I'm now doing Django on

00:04:14,090 --> 00:04:19,609
Python that's Tim's fault we can all

00:04:16,010 --> 00:04:22,790
thank him for that and now I'm a web

00:04:19,609 --> 00:04:24,890
developer at words team lead VP of

00:04:22,790 --> 00:04:29,600
technology at a start-up which means I

00:04:24,890 --> 00:04:31,130
am a web developer team lead again so

00:04:29,600 --> 00:04:33,020
some success guys here by the end of

00:04:31,130 --> 00:04:34,850
this talk I hope you'll all be familiar

00:04:33,020 --> 00:04:35,870
with the terms and mechanics of logging

00:04:34,850 --> 00:04:37,640
for Python can

00:04:35,870 --> 00:04:39,980
figuring logging in Python and

00:04:37,640 --> 00:04:41,840
particularly with regard to Django and

00:04:39,980 --> 00:04:44,780
placing message in still into the logger

00:04:41,840 --> 00:04:47,090
and outputting those messages why don't

00:04:44,780 --> 00:04:49,430
we just log well at first it's faster to

00:04:47,090 --> 00:04:51,680
just write print the logging API is

00:04:49,430 --> 00:04:54,380
intimidating we're busy people and

00:04:51,680 --> 00:04:56,170
nobody's paying us to log if you work at

00:04:54,380 --> 00:05:00,790
sensory that's not true for you

00:04:56,170 --> 00:05:05,750
everybody else nobody's paying us to log

00:05:00,790 --> 00:05:08,300
so logging can provide us with a tool to

00:05:05,750 --> 00:05:11,570
debug in development and it can also

00:05:08,300 --> 00:05:13,340
give us an opportunity to enhance a

00:05:11,570 --> 00:05:14,600
documentation it's not a replacement for

00:05:13,340 --> 00:05:18,560
documentation I'm not giving you

00:05:14,600 --> 00:05:20,840
permission to do that but you can if you

00:05:18,560 --> 00:05:23,330
if we're writing our log messages into

00:05:20,840 --> 00:05:24,860
our code and then we're writing them at

00:05:23,330 --> 00:05:27,200
appropriate levels we can turn off those

00:05:24,860 --> 00:05:29,180
messages later on and we can still have

00:05:27,200 --> 00:05:30,530
access to the ideas that we were

00:05:29,180 --> 00:05:32,930
thinking about as we were writing those

00:05:30,530 --> 00:05:35,180
those log statements so hopefully we can

00:05:32,930 --> 00:05:37,250
know what we were thinking later on when

00:05:35,180 --> 00:05:39,380
we're looking at our code it can also

00:05:37,250 --> 00:05:42,050
give us runtime information what's

00:05:39,380 --> 00:05:44,630
happening in production and can give us

00:05:42,050 --> 00:05:46,550
flexibility into seeing what's happening

00:05:44,630 --> 00:05:48,620
in other people's packages so if

00:05:46,550 --> 00:05:51,350
everybody plays nicely with the logging

00:05:48,620 --> 00:05:55,220
framework we can all see each other's

00:05:51,350 --> 00:05:57,530
messages later on without having to go

00:05:55,220 --> 00:05:59,930
too deeply into the code instruments at

00:05:57,530 --> 00:06:01,490
two months and then one of the things

00:05:59,930 --> 00:06:04,430
that I really like about logging is that

00:06:01,490 --> 00:06:06,260
it's one of my first troubleshooting

00:06:04,430 --> 00:06:07,340
steps I think everybody here would agree

00:06:06,260 --> 00:06:09,410
that if I wanted their first trouble

00:06:07,340 --> 00:06:10,940
sitting shooting steps when were in

00:06:09,410 --> 00:06:12,410
production when something goes wrong the

00:06:10,940 --> 00:06:14,510
first thing I do is just crank up

00:06:12,410 --> 00:06:16,370
logging as high as it'll go and look for

00:06:14,510 --> 00:06:18,350
what went wrong before I go into any of

00:06:16,370 --> 00:06:20,660
the code and so if we're writing good

00:06:18,350 --> 00:06:23,960
log statements and the debug info level

00:06:20,660 --> 00:06:28,520
we will be able to see those in our own

00:06:23,960 --> 00:06:31,160
code let's just quickly cover some terms

00:06:28,520 --> 00:06:34,700
to level set a package is a collection

00:06:31,160 --> 00:06:36,740
of modules commonly a directory a module

00:06:34,700 --> 00:06:41,540
is a Python file or something we can

00:06:36,740 --> 00:06:44,600
import double underscore name double

00:06:41,540 --> 00:06:47,120
underscore is a variable that is a

00:06:44,600 --> 00:06:49,759
dotted namespace name of the module

00:06:47,120 --> 00:06:52,300
within which it is set and it is

00:06:49,759 --> 00:06:57,020
by the importer that's a lot to say

00:06:52,300 --> 00:07:00,589
that's actually paraphrasing a lot as

00:06:57,020 --> 00:07:02,089
well but the point here is that python

00:07:00,589 --> 00:07:04,879
has modules and when we're interacting

00:07:02,089 --> 00:07:07,219
with a sort of a script a program file

00:07:04,879 --> 00:07:09,139
we're working with a module and then all

00:07:07,219 --> 00:07:10,759
those mazels are arranged into packages

00:07:09,139 --> 00:07:14,089
which are basically the directories and

00:07:10,759 --> 00:07:15,439
a hierarchy of of the application the

00:07:14,089 --> 00:07:18,860
middle logger is an instance of a class

00:07:15,439 --> 00:07:20,629
and represents a logging channel and a

00:07:18,860 --> 00:07:23,930
logging channel is something that we can

00:07:20,629 --> 00:07:26,120
write log messages to and finally an

00:07:23,930 --> 00:07:28,610
exception is an instance of the

00:07:26,120 --> 00:07:31,610
exception class or a subclass of it and

00:07:28,610 --> 00:07:35,960
is the actual actualization of an

00:07:31,610 --> 00:07:37,909
exceptional event so first this Explorer

00:07:35,960 --> 00:07:40,460
locking through a couple of examples the

00:07:37,909 --> 00:07:43,580
first example is Django is logging out

00:07:40,460 --> 00:07:46,580
of the box so Django is logging out of

00:07:43,580 --> 00:07:48,439
the box gives us not a whole lot but it

00:07:46,580 --> 00:07:51,349
gives us something and it sits well and

00:07:48,439 --> 00:07:54,379
we'll get into this it does give us a

00:07:51,349 --> 00:07:56,419
Django logger and a Django dot server

00:07:54,379 --> 00:07:58,339
logger at the info level and this gives

00:07:56,419 --> 00:08:01,339
us a lot of information about the

00:07:58,339 --> 00:08:02,899
request response cycle during the

00:08:01,339 --> 00:08:05,259
running of the application particularly

00:08:02,899 --> 00:08:09,289
run server when run server is running

00:08:05,259 --> 00:08:11,389
that can be helpful for debugging Python

00:08:09,289 --> 00:08:14,209
gives us a route logger by default and

00:08:11,389 --> 00:08:16,969
that's set to warning jingle will also

00:08:14,209 --> 00:08:20,029
give us email admins at the error level

00:08:16,969 --> 00:08:22,729
and that'll be fired whenever debug is

00:08:20,029 --> 00:08:24,800
false so when we're in production but

00:08:22,729 --> 00:08:27,199
there's no file there's an we can only

00:08:24,800 --> 00:08:31,069
see things at the console level so

00:08:27,199 --> 00:08:33,440
here's a wall of text this is my basic

00:08:31,069 --> 00:08:36,680
logging configuration what I like to do

00:08:33,440 --> 00:08:38,990
when I first start a project and this

00:08:36,680 --> 00:08:41,060
adds my preferred format which is a

00:08:38,990 --> 00:08:46,160
wildly verbose because I have a wide

00:08:41,060 --> 00:08:49,040
screen and then it also adds a route

00:08:46,160 --> 00:08:50,630
logger at the info level so again Python

00:08:49,040 --> 00:08:53,630
gives you a route logger out of the box

00:08:50,630 --> 00:08:55,720
but I've chosen to you specifics plis

00:08:53,630 --> 00:09:00,920
utley configure a route logger here

00:08:55,720 --> 00:09:03,470
that's there because I want my route

00:09:00,920 --> 00:09:04,019
logger at the info level and then of

00:09:03,470 --> 00:09:06,360
course you

00:09:04,019 --> 00:09:08,819
see that I'm redefining the Django lager

00:09:06,360 --> 00:09:11,879
and I'm redefining the Django server

00:09:08,819 --> 00:09:13,350
lager I do this because I want to be

00:09:11,879 --> 00:09:16,079
able to configure the route lager and

00:09:13,350 --> 00:09:17,639
the Django lager at two different levels

00:09:16,079 --> 00:09:20,489
I would like to sometimes put different

00:09:17,639 --> 00:09:22,679
handlers on each lager and then I

00:09:20,489 --> 00:09:24,540
configured Django server because I don't

00:09:22,679 --> 00:09:26,279
really like what Django server Django

00:09:24,540 --> 00:09:28,499
does with Django server out of the box I

00:09:26,279 --> 00:09:30,089
want all of those messages to just be

00:09:28,499 --> 00:09:36,540
propagated straight up to the Django

00:09:30,089 --> 00:09:41,040
logger my configuration for it so why

00:09:36,540 --> 00:09:44,309
did this configuration get loaded and

00:09:41,040 --> 00:09:46,860
why is Python respecting it the reason

00:09:44,309 --> 00:09:48,779
for that is that jingle looks to

00:09:46,860 --> 00:09:52,139
settings dot pie or wherever you happen

00:09:48,779 --> 00:09:54,720
to configure Django for a variable names

00:09:52,139 --> 00:09:56,759
logging and the variable names logging

00:09:54,720 --> 00:09:59,579
is a Python dictionary and that Python

00:09:56,759 --> 00:10:01,619
dictionary is then Python does some

00:09:59,579 --> 00:10:04,860
magic to it but effectively then takes

00:10:01,619 --> 00:10:07,860
it and passes it to pythons dict config

00:10:04,860 --> 00:10:10,379
function on the logging module that

00:10:07,860 --> 00:10:14,189
ships with Python and that puts your

00:10:10,379 --> 00:10:16,379
configuration into effect so you can

00:10:14,189 --> 00:10:18,019
configure Python logging in a couple of

00:10:16,379 --> 00:10:19,829
different ways you can do it

00:10:18,019 --> 00:10:21,149
programmatically through the API

00:10:19,829 --> 00:10:23,579
you could do it through a file you can

00:10:21,149 --> 00:10:25,860
actually do it through a port listener a

00:10:23,579 --> 00:10:31,889
listener on a port but Django does it

00:10:25,860 --> 00:10:33,600
this way and will do it this way next so

00:10:31,889 --> 00:10:36,059
what if we wanted to see the logging

00:10:33,600 --> 00:10:39,019
messages that we generate after the

00:10:36,059 --> 00:10:41,639
application restarts as Django is

00:10:39,019 --> 00:10:44,299
configured out-of-the-box we will lose

00:10:41,639 --> 00:10:46,619
all of this messages they will just

00:10:44,299 --> 00:10:49,139
they'll go to the console and then we'll

00:10:46,619 --> 00:10:53,249
we start the application and well nice

00:10:49,139 --> 00:10:55,740
knowing you logs so we can configure a

00:10:53,249 --> 00:10:57,809
file Handler and this is how we might

00:10:55,740 --> 00:10:59,899
configure a basic file handler we are

00:10:57,809 --> 00:11:03,929
configuring a rotating file Handler and

00:10:59,899 --> 00:11:05,699
we are giving the file handler handler a

00:11:03,929 --> 00:11:09,089
location where we want to configure

00:11:05,699 --> 00:11:11,129
where we want those files to go I'll

00:11:09,089 --> 00:11:14,730
give it a format we'll give it our mode

00:11:11,129 --> 00:11:16,949
I'll give it an encoding a format there

00:11:14,730 --> 00:11:17,820
it is and then how many files we want to

00:11:16,949 --> 00:11:20,870
keep

00:11:17,820 --> 00:11:23,700
we want those files to get and this

00:11:20,870 --> 00:11:26,010
configuration here will rotate some log

00:11:23,700 --> 00:11:28,320
files for us and save them between

00:11:26,010 --> 00:11:31,470
restarts then all we really need to do

00:11:28,320 --> 00:11:34,140
is place that handler into our loggers

00:11:31,470 --> 00:11:37,140
in our disk config and now we will get

00:11:34,140 --> 00:11:41,670
all of our log messages saved to a file

00:11:37,140 --> 00:11:46,770
that we can look at later on and now we

00:11:41,670 --> 00:11:48,800
get to keep our fancy log messages so we

00:11:46,770 --> 00:11:53,220
have to get messages into the logger and

00:11:48,800 --> 00:11:54,870
we'll do that by well not this here

00:11:53,220 --> 00:11:57,120
we're just printing some stuff to the

00:11:54,870 --> 00:11:58,560
console and this is what a lot of us

00:11:57,120 --> 00:12:00,900
might do this is what I did for many

00:11:58,560 --> 00:12:03,360
years actually I started out doing

00:12:00,900 --> 00:12:06,750
system dot out dot println and so this

00:12:03,360 --> 00:12:08,100
is a lot cleaner than that but you can

00:12:06,750 --> 00:12:11,820
see here that we're formatting a date

00:12:08,100 --> 00:12:15,990
time into the print string and then we

00:12:11,820 --> 00:12:17,760
are and and this is we've got the only

00:12:15,990 --> 00:12:19,440
way to get rid of these print messages

00:12:17,760 --> 00:12:21,300
these messages from the console later on

00:12:19,440 --> 00:12:23,250
is to comment or delete them which means

00:12:21,300 --> 00:12:24,750
editing the code the formatting is in

00:12:23,250 --> 00:12:26,940
the code the only formatting will ever

00:12:24,750 --> 00:12:29,280
receive is the time stamp where the

00:12:26,940 --> 00:12:30,540
messages were generated and nobody else

00:12:29,280 --> 00:12:31,770
can turn them off you're the only one

00:12:30,540 --> 00:12:33,890
that can turn them off because it's your

00:12:31,770 --> 00:12:36,960
code unless somebody edits your code so

00:12:33,890 --> 00:12:38,820
if we replace these with log messages we

00:12:36,960 --> 00:12:40,200
have basically the same thing except now

00:12:38,820 --> 00:12:43,110
we have two different levels we have

00:12:40,200 --> 00:12:44,700
info and debug and so if somebody

00:12:43,110 --> 00:12:46,290
doesn't want to see the debug messages

00:12:44,700 --> 00:12:48,630
during the running of the application

00:12:46,290 --> 00:12:50,880
they can just raise the level of the

00:12:48,630 --> 00:12:53,250
logger to say that date they don't want

00:12:50,880 --> 00:12:56,150
to see debug messages in which case they

00:12:53,250 --> 00:13:01,050
can turn off those messages themselves

00:12:56,150 --> 00:13:03,420
as well I've taken the the date/time

00:13:01,050 --> 00:13:04,800
string out of the message and I'm

00:13:03,420 --> 00:13:07,260
leaving that to the formatter that we

00:13:04,800 --> 00:13:08,610
had configured earlier and then I'm

00:13:07,260 --> 00:13:10,200
finding and replacing all of my print

00:13:08,610 --> 00:13:15,390
statements with logger dot info because

00:13:10,200 --> 00:13:18,120
why not and now a short introduction to

00:13:15,390 --> 00:13:24,270
pythons logging framework this is the

00:13:18,120 --> 00:13:25,860
dive part so here are some of the

00:13:24,270 --> 00:13:29,490
concepts behind the clasp couple of

00:13:25,860 --> 00:13:31,680
slides so first is the log record and

00:13:29,490 --> 00:13:34,920
the log record is an instance

00:13:31,680 --> 00:13:36,630
of something that's being logged so the

00:13:34,920 --> 00:13:39,779
log record is created when you log a

00:13:36,630 --> 00:13:43,410
message or an exception that's like

00:13:39,779 --> 00:13:44,970
calling log or info etc and it's passed

00:13:43,410 --> 00:13:47,820
around within the logging framework

00:13:44,970 --> 00:13:52,980
until it's either handled by handler or

00:13:47,820 --> 00:13:55,170
it is discarded the log record has a

00:13:52,980 --> 00:13:56,820
number of attributes that are set when

00:13:55,170 --> 00:13:58,589
it's created and you can actually set

00:13:56,820 --> 00:14:01,050
more attributes on the log record you

00:13:58,589 --> 00:14:03,899
can modify the log record as you see fit

00:14:01,050 --> 00:14:06,570
until it's ultimately used and those

00:14:03,899 --> 00:14:08,160
attributes that are some of them are

00:14:06,570 --> 00:14:11,100
described here this is an abbreviated

00:14:08,160 --> 00:14:12,570
list more are available you can use them

00:14:11,100 --> 00:14:13,920
when you're filtering what does

00:14:12,570 --> 00:14:16,290
something we'll discuss in a moment and

00:14:13,920 --> 00:14:18,060
then when you're formatting messages so

00:14:16,290 --> 00:14:20,100
all of these attributes are available to

00:14:18,060 --> 00:14:22,800
you while you're formatting strings that

00:14:20,100 --> 00:14:25,709
are ultimately going to be output by

00:14:22,800 --> 00:14:28,080
your hat by your handlers your

00:14:25,709 --> 00:14:30,120
formatters will be set on your handlers

00:14:28,080 --> 00:14:32,490
and they will output messages in the

00:14:30,120 --> 00:14:36,330
formats that you describe which will use

00:14:32,490 --> 00:14:38,100
these attributes let's talk about

00:14:36,330 --> 00:14:39,630
logging levels this is one of the ones

00:14:38,100 --> 00:14:43,950
that is really fun but kind of

00:14:39,630 --> 00:14:46,050
terrifying they're set to allow you to

00:14:43,950 --> 00:14:48,060
control the granularity of log messages

00:14:46,050 --> 00:14:50,520
that are being output and you can set

00:14:48,060 --> 00:14:51,720
them on loggers handlers and filters and

00:14:50,520 --> 00:14:54,060
they do a different thing when they're

00:14:51,720 --> 00:14:57,390
set on each of those you also get to

00:14:54,060 --> 00:14:58,620
define the log level on the messages

00:14:57,390 --> 00:15:00,720
that you generate so first let's talk

00:14:58,620 --> 00:15:03,000
about generating log messages when you

00:15:00,720 --> 00:15:05,310
call la gorda info you are generating a

00:15:03,000 --> 00:15:08,400
log message at the level info and the

00:15:05,310 --> 00:15:13,709
level info is a constant on the logging

00:15:08,400 --> 00:15:16,890
module that is 20 so if your logger is

00:15:13,709 --> 00:15:18,900
set to log level warning then your log

00:15:16,890 --> 00:15:21,540
level your the logging level of your

00:15:18,900 --> 00:15:24,209
logger is at a higher level 30 than the

00:15:21,540 --> 00:15:26,579
message info that you generated by

00:15:24,209 --> 00:15:28,350
calling logger info and that's why when

00:15:26,579 --> 00:15:30,600
we say that if your logger is set to

00:15:28,350 --> 00:15:34,050
warning only messages of warning or

00:15:30,600 --> 00:15:36,630
higher will be output by that logger and

00:15:34,050 --> 00:15:39,480
your info messages will be discarded if

00:15:36,630 --> 00:15:42,000
however your logger is set to level info

00:15:39,480 --> 00:15:44,160
and you log a message at level info by

00:15:42,000 --> 00:15:45,330
calling la gorda info you'll see that

00:15:44,160 --> 00:15:47,100
message in your logger

00:15:45,330 --> 00:15:51,420
assuming it hasn't been filtered by your

00:15:47,100 --> 00:15:54,060
handler or your filters there are four

00:15:51,420 --> 00:15:58,140
basic classes in the Python logging

00:15:54,060 --> 00:16:00,649
framework and they are loggers which are

00:15:58,140 --> 00:16:04,769
your interface to Python logging and

00:16:00,649 --> 00:16:08,310
they allow you to call la guarda fo

00:16:04,769 --> 00:16:12,000
logger debug etc and place messages into

00:16:08,310 --> 00:16:16,350
the logger their names hierarchically

00:16:12,000 --> 00:16:18,600
and you get them by going to a logging

00:16:16,350 --> 00:16:20,790
convention finding the most capable

00:16:18,600 --> 00:16:23,220
logger inviting them to come work for

00:16:20,790 --> 00:16:27,839
you and then oh that's actually you so

00:16:23,220 --> 00:16:30,120
ok now you get them by calling logging

00:16:27,839 --> 00:16:31,680
dot get logger and passing them a string

00:16:30,120 --> 00:16:34,200
that represents the name of the logger

00:16:31,680 --> 00:16:35,459
that you'd like to receive and so here

00:16:34,200 --> 00:16:37,290
we're using double underscore name

00:16:35,459 --> 00:16:40,500
dunder name which is the name of the

00:16:37,290 --> 00:16:43,500
module in which you are asking for the

00:16:40,500 --> 00:16:45,930
logger and in this way your logger is

00:16:43,500 --> 00:16:47,610
named the same as your modules name

00:16:45,930 --> 00:16:50,700
within the package which gives you one

00:16:47,610 --> 00:16:53,670
logger per module and gives you a really

00:16:50,700 --> 00:16:57,740
nice hierarchy that matches your Python

00:16:53,670 --> 00:17:06,510
package hierarchy inside of your logging

00:16:57,740 --> 00:17:08,669
setup so the logging hierarchy each

00:17:06,510 --> 00:17:11,069
lager represents a logging Channel and

00:17:08,669 --> 00:17:13,319
the hierarchy is represented by a dot

00:17:11,069 --> 00:17:15,000
separated namespace I think I just muted

00:17:13,319 --> 00:17:17,189
that by accident and again so the

00:17:15,000 --> 00:17:18,900
hierarchy is represented by the dot

00:17:17,189 --> 00:17:24,079
separated namespace it's the same as

00:17:18,900 --> 00:17:28,380
Python packages so this slide sort of

00:17:24,079 --> 00:17:31,350
exemplifies the logging hierarchy and so

00:17:28,380 --> 00:17:33,660
as the root is the low the highest level

00:17:31,350 --> 00:17:35,840
logger it has no name it just is the

00:17:33,660 --> 00:17:38,429
highest level logger and will always be

00:17:35,840 --> 00:17:41,850
Django is the second highest logger that

00:17:38,429 --> 00:17:43,830
we have in this configuration and Django

00:17:41,850 --> 00:17:48,210
da server is within Django because

00:17:43,830 --> 00:17:50,880
there's one dot Django debug DB bakken's

00:17:48,210 --> 00:17:54,150
is not within Django dot server but is

00:17:50,880 --> 00:17:57,860
within Django and dot backends is within

00:17:54,150 --> 00:17:57,860
DB is within Django

00:17:58,090 --> 00:18:04,070
another interesting thing to see here is

00:18:00,380 --> 00:18:06,800
the propagate flag when propagate is set

00:18:04,070 --> 00:18:10,640
to true which it is by default any

00:18:06,800 --> 00:18:13,580
message that goes to this logger will be

00:18:10,640 --> 00:18:16,040
propagated to the logger above it if I

00:18:13,580 --> 00:18:18,920
hadn't set propagate to false on Django

00:18:16,040 --> 00:18:21,470
the message is sent to the Django logger

00:18:18,920 --> 00:18:23,060
would also end up in the root logger but

00:18:21,470 --> 00:18:24,860
because I like to configure the root

00:18:23,060 --> 00:18:26,780
logger and the Django logger separately

00:18:24,860 --> 00:18:28,430
so that I can have specific control over

00:18:26,780 --> 00:18:31,040
how Django's messages are output

00:18:28,430 --> 00:18:33,010
separate from how the root loggers

00:18:31,040 --> 00:18:39,470
messages are output I've set the

00:18:33,010 --> 00:18:41,420
propagates of false handlers sind log

00:18:39,470 --> 00:18:43,490
records which are created by loggers to

00:18:41,420 --> 00:18:45,920
their appropriate destination and we've

00:18:43,490 --> 00:18:50,260
seen the console handler the file

00:18:45,920 --> 00:18:50,260
handler and the mail admins handler

00:18:51,580 --> 00:18:57,080
handlers can have levels and handle is

00:18:54,470 --> 00:18:58,820
by default have a level that is not set

00:18:57,080 --> 00:19:02,210
which I did not show you at my level

00:18:58,820 --> 00:19:04,190
slide but handlers with the level not

00:19:02,210 --> 00:19:06,560
set are at the level zero which means

00:19:04,190 --> 00:19:08,960
that they will accept and handle every

00:19:06,560 --> 00:19:11,390
single message if you set a level on a

00:19:08,960 --> 00:19:13,910
handler and that level is higher than

00:19:11,390 --> 00:19:16,330
zero only messages at or above that

00:19:13,910 --> 00:19:19,930
level will be handled by your handler

00:19:16,330 --> 00:19:19,930
generally you don't need to do that

00:19:20,560 --> 00:19:25,370
filters are tests to be performed on

00:19:23,300 --> 00:19:27,890
each log record and they allow you to

00:19:25,370 --> 00:19:33,830
have detailed control over what gets

00:19:27,890 --> 00:19:35,540
logged this is a I forget what it's

00:19:33,830 --> 00:19:38,810
called but it's filtering woodchips it's

00:19:35,540 --> 00:19:42,350
the most wood logging appropriate slide

00:19:38,810 --> 00:19:43,640
I could find for I don't know it's like

00:19:42,350 --> 00:19:45,700
twenty minutes of my life I'll never get

00:19:43,640 --> 00:19:45,700
back

00:19:46,750 --> 00:19:51,530
filters filter out messages so an

00:19:50,000 --> 00:19:53,240
example is that you could have a filter

00:19:51,530 --> 00:19:56,900
that filters out messages that have a

00:19:53,240 --> 00:20:01,490
particular word in the message and you

00:19:56,900 --> 00:20:04,070
don't want mess those words to mess logs

00:20:01,490 --> 00:20:05,870
log records that have those messages to

00:20:04,070 --> 00:20:08,630
be output so this is an example of that

00:20:05,870 --> 00:20:09,980
I've defined the something filter the

00:20:08,630 --> 00:20:12,320
something filter looks for the word

00:20:09,980 --> 00:20:13,700
something and the records message which

00:20:12,320 --> 00:20:15,920
is an attribute on the record and the

00:20:13,700 --> 00:20:17,840
record represents the log record and

00:20:15,920 --> 00:20:19,310
whenever it sees something in the

00:20:17,840 --> 00:20:22,220
message it returns false

00:20:19,310 --> 00:20:24,200
when filter returns false then the

00:20:22,220 --> 00:20:27,350
filter will stop the message from

00:20:24,200 --> 00:20:29,840
processing and this something filter

00:20:27,350 --> 00:20:31,820
being set up as something filter will

00:20:29,840 --> 00:20:34,490
then cause the console handler to not

00:20:31,820 --> 00:20:37,400
write messages that have the word

00:20:34,490 --> 00:20:39,350
something in them another great example

00:20:37,400 --> 00:20:42,650
comes straight from Django and this is

00:20:39,350 --> 00:20:47,660
jangles require debug false filter it is

00:20:42,650 --> 00:20:49,840
the it confuses me every time I look at

00:20:47,660 --> 00:20:53,240
it because what it says is that when

00:20:49,840 --> 00:20:56,270
debug is set to true then it will return

00:20:53,240 --> 00:20:58,490
the opposite what is false which will be

00:20:56,270 --> 00:21:01,370
the filter returning false whenever

00:20:58,490 --> 00:21:05,930
debug is set to true which says that

00:21:01,370 --> 00:21:11,210
mail admins requiring debug false will

00:21:05,930 --> 00:21:13,280
filter any message since to this handler

00:21:11,210 --> 00:21:15,530
mail admins whenever debug is set to

00:21:13,280 --> 00:21:17,450
true but this is an example of a filter

00:21:15,530 --> 00:21:18,980
that ships with Django it's in all of

00:21:17,450 --> 00:21:24,770
your Django applications unless you've

00:21:18,980 --> 00:21:26,360
ripped it out for matters convert log

00:21:24,770 --> 00:21:29,000
messages to strings they use the

00:21:26,360 --> 00:21:31,910
attributes on the log records in order

00:21:29,000 --> 00:21:34,520
to make those strings for you and so

00:21:31,910 --> 00:21:37,610
here's a slide that I added 20 minutes

00:21:34,520 --> 00:21:40,220
ago this is how to make your own

00:21:37,610 --> 00:21:43,040
formatter I love doing this because

00:21:40,220 --> 00:21:45,500
there's one attribute that I want in

00:21:43,040 --> 00:21:47,780
every log record that I don't get out of

00:21:45,500 --> 00:21:51,080
the box by Python because Python isn't a

00:21:47,780 --> 00:21:54,710
web framework Django is and I like to

00:21:51,080 --> 00:21:56,300
see the host name in my logs so the

00:21:54,710 --> 00:21:58,460
first thing that I do is I define my own

00:21:56,300 --> 00:22:00,980
formatter you can name it whatever

00:21:58,460 --> 00:22:02,690
you want and then I just say whenever we

00:22:00,980 --> 00:22:04,250
call format go ahead and try and find

00:22:02,690 --> 00:22:06,920
the host name using good host name and

00:22:04,250 --> 00:22:09,350
if we can get the host name go ahead and

00:22:06,920 --> 00:22:12,950
put it on my record

00:22:09,350 --> 00:22:14,660
otherwise there you go go ahead and put

00:22:12,950 --> 00:22:17,390
it on the log record with the name host

00:22:14,660 --> 00:22:18,680
word host name otherwise still give me

00:22:17,390 --> 00:22:20,720
the word host name and just say I

00:22:18,680 --> 00:22:22,910
couldn't find the host name in this way

00:22:20,720 --> 00:22:25,280
whenever I use this formatter I will

00:22:22,910 --> 00:22:27,500
have the word host name available to me

00:22:25,280 --> 00:22:29,660
to format into my messages so that I can

00:22:27,500 --> 00:22:31,100
see the host name of the server that was

00:22:29,660 --> 00:22:32,900
running the code that generated this

00:22:31,100 --> 00:22:34,970
message if you're running your jingo

00:22:32,900 --> 00:22:39,230
application on more than one server you

00:22:34,970 --> 00:22:40,790
might want to do this so here's an

00:22:39,230 --> 00:22:42,320
example of a formatter and you can see

00:22:40,790 --> 00:22:44,270
here that I'm using that host name and

00:22:42,320 --> 00:22:47,570
if you don't have this slide in your

00:22:44,270 --> 00:22:49,370
code then or something like it then this

00:22:47,570 --> 00:22:52,940
format string is going to throw an error

00:22:49,370 --> 00:22:55,070
every time code executes and try Sakata

00:22:52,940 --> 00:22:58,490
generate a log message because you don't

00:22:55,070 --> 00:23:00,590
want have the host name attribute takes

00:22:58,490 --> 00:23:03,020
the format applies to the format of a

00:23:00,590 --> 00:23:05,120
formatter using the host name adding

00:23:03,020 --> 00:23:06,470
formatter class and then I've taken my

00:23:05,120 --> 00:23:09,200
formatter and I've put it into the

00:23:06,470 --> 00:23:13,670
console as the class sorry as the

00:23:09,200 --> 00:23:16,930
formatter for the console handler we'll

00:23:13,670 --> 00:23:16,930
talk a little bit about exceptions

00:23:17,980 --> 00:23:22,820
raising an exception is to click to

00:23:20,360 --> 00:23:28,250
declare an exceptional event often a

00:23:22,820 --> 00:23:32,090
failure raising an exception creates an

00:23:28,250 --> 00:23:35,390
instance of an exception or a subclass

00:23:32,090 --> 00:23:39,080
of exception and describes the type and

00:23:35,390 --> 00:23:41,720
value of the event exceptions are

00:23:39,080 --> 00:23:43,820
handled when an except Clause declares

00:23:41,720 --> 00:23:47,570
that it receives exceptions of the same

00:23:43,820 --> 00:23:49,760
type and exceptions pop propagate up the

00:23:47,570 --> 00:23:51,800
call stack until they either reach an

00:23:49,760 --> 00:23:56,590
except clause that is capable of

00:23:51,800 --> 00:23:56,590
handling them or else they go unhandled

00:23:56,800 --> 00:24:00,380
so here's an example of raising

00:23:59,030 --> 00:24:02,810
exceptions and this comes from the

00:24:00,380 --> 00:24:04,460
Django tutorial it comes from the pols

00:24:02,810 --> 00:24:07,120
app that we created when we learned to

00:24:04,460 --> 00:24:10,580
Django for the first time possibly and

00:24:07,120 --> 00:24:12,029
here vote is looking for a question and

00:24:10,580 --> 00:24:14,249
in order to get that quest

00:24:12,029 --> 00:24:17,219
and it's calling the shortcut get object

00:24:14,249 --> 00:24:18,989
or 404 good object or 404 is going to go

00:24:17,219 --> 00:24:20,519
and try and find a question and what

00:24:18,989 --> 00:24:25,619
doesn't find a question it's going to

00:24:20,519 --> 00:24:28,529
raise a HTTP 404 and an HTTP 404 is just

00:24:25,619 --> 00:24:32,219
a subclass of exception and in this way

00:24:28,529 --> 00:24:34,349
we are raising an exception what happens

00:24:32,219 --> 00:24:40,080
when we raise an exception up sorry

00:24:34,349 --> 00:24:41,820
that's two slides from now so handling

00:24:40,080 --> 00:24:45,589
an exception is to do something about it

00:24:41,820 --> 00:24:48,479
we accept the except Clause can stop the

00:24:45,589 --> 00:24:51,690
exception from propagating in this first

00:24:48,479 --> 00:24:54,869
example when the user can't be found we

00:24:51,690 --> 00:24:57,029
create a new user and we log the events

00:24:54,869 --> 00:24:58,830
to debug so this is to say that we can

00:24:57,029 --> 00:25:00,210
just see that something happened that we

00:24:58,830 --> 00:25:02,369
were expecting and choose to do

00:25:00,210 --> 00:25:04,919
something else about it in the next

00:25:02,369 --> 00:25:08,129
example the event is simply reported as

00:25:04,919 --> 00:25:10,019
an error and the user remains unset

00:25:08,129 --> 00:25:13,979
that's gonna become somebody else's

00:25:10,019 --> 00:25:17,309
problem in the next line of code in this

00:25:13,979 --> 00:25:19,019
third example we are calling logger dot

00:25:17,309 --> 00:25:20,940
exception which is almost the exact same

00:25:19,019 --> 00:25:22,950
as log or dot error except the logger

00:25:20,940 --> 00:25:25,229
dot exception adds the exception

00:25:22,950 --> 00:25:27,599
information to the message that is being

00:25:25,229 --> 00:25:29,999
created by the logger and that allows

00:25:27,599 --> 00:25:32,639
the stack trace to be available on the

00:25:29,999 --> 00:25:34,589
log record what should allow for matters

00:25:32,639 --> 00:25:36,929
that are capable of processing it to

00:25:34,589 --> 00:25:38,309
show you a stack trace console is a

00:25:36,929 --> 00:25:41,099
great example of that that being the

00:25:38,309 --> 00:25:43,109
stream handler if you call logger dot

00:25:41,099 --> 00:25:45,960
exception not only will you get this

00:25:43,109 --> 00:25:48,179
string but you'll also get the stack

00:25:45,960 --> 00:25:53,219
trace that was generated when user

00:25:48,179 --> 00:25:54,659
objects get failed to find your user and

00:25:53,219 --> 00:25:56,609
then finally we can choose to just

00:25:54,659 --> 00:25:59,639
rearrange the exception here we are

00:25:56,609 --> 00:26:01,409
raising another does not exist exception

00:25:59,639 --> 00:26:03,059
and we're raising it from the exceptions

00:26:01,409 --> 00:26:05,789
so we don't lose any of the information

00:26:03,059 --> 00:26:07,979
that was generated when the first

00:26:05,789 --> 00:26:09,690
exception was generated you could also

00:26:07,979 --> 00:26:12,479
just choose to not wrap this in a

00:26:09,690 --> 00:26:14,639
try-catch and then your exception the

00:26:12,479 --> 00:26:17,639
exception generated by user objects get

00:26:14,639 --> 00:26:20,419
would bubble straight up to somebody

00:26:17,639 --> 00:26:22,710
else become somebody else's problem and

00:26:20,419 --> 00:26:25,790
that's frequently a good thing

00:26:22,710 --> 00:26:29,040
particularly in the case of the 404

00:26:25,790 --> 00:26:33,240
unhandled exceptions are handled by

00:26:29,040 --> 00:26:35,670
jingoes exception handler and so when we

00:26:33,240 --> 00:26:37,800
choose not to strike at or we choose to

00:26:35,670 --> 00:26:39,690
raise an exception dangos exception

00:26:37,800 --> 00:26:41,580
handler will pick those up for us so

00:26:39,690 --> 00:26:44,220
long as those exceptions are being

00:26:41,580 --> 00:26:46,650
thrown in the context of processing of

00:26:44,220 --> 00:26:48,960
you there are probably other contexts in

00:26:46,650 --> 00:26:52,020
which this is true it has a lot to do

00:26:48,960 --> 00:26:54,420
with middleware it's some pretty

00:26:52,020 --> 00:26:56,130
technical stuff but for all intents and

00:26:54,420 --> 00:26:58,410
for these intents of intents and

00:26:56,130 --> 00:27:00,150
purposes of processing of you if you

00:26:58,410 --> 00:27:02,429
choose not to handle an exception

00:27:00,150 --> 00:27:04,830
Django's exception handler will come up

00:27:02,429 --> 00:27:08,190
with a useful message and status code

00:27:04,830 --> 00:27:10,830
for your users and give it to them so if

00:27:08,190 --> 00:27:12,780
you're in dev that useful message might

00:27:10,830 --> 00:27:14,910
be a helpful error page with some yellow

00:27:12,780 --> 00:27:16,650
on top and a whole bunch of gray on the

00:27:14,910 --> 00:27:19,230
bottom that you can scroll through for

00:27:16,650 --> 00:27:21,390
days if you're in Pride it's a gray page

00:27:19,230 --> 00:27:24,300
saying something went wrong and a 500

00:27:21,390 --> 00:27:27,720
message status code and in the case of

00:27:24,300 --> 00:27:29,370
an HTTP 404 that would be a 404 page

00:27:27,720 --> 00:27:31,230
which ever you've configured in your

00:27:29,370 --> 00:27:33,929
application would be shown to your user

00:27:31,230 --> 00:27:37,260
and the status code 404 would be given

00:27:33,929 --> 00:27:38,130
to their client because Django will help

00:27:37,260 --> 00:27:40,080
you in this way

00:27:38,130 --> 00:27:42,000
you don't have to catch every single

00:27:40,080 --> 00:27:45,120
exception don't feel as though you need

00:27:42,000 --> 00:27:47,190
to you can except you see catch

00:27:45,120 --> 00:27:51,000
exceptions that you want to and know how

00:27:47,190 --> 00:27:53,340
to handle and many of them such as when

00:27:51,000 --> 00:27:55,559
the question couldn't be found you can

00:27:53,340 --> 00:28:01,679
just let Django handle for you and it'll

00:27:55,559 --> 00:28:03,570
show your users a 404 this is a really

00:28:01,679 --> 00:28:05,940
fun slide and if there's time I want to

00:28:03,570 --> 00:28:08,340
get back to it but this is why janko's

00:28:05,940 --> 00:28:11,429
heck exception handler actually works in

00:28:08,340 --> 00:28:13,580
the middle err hope we have time for

00:28:11,429 --> 00:28:13,580
that

00:28:14,000 --> 00:28:17,970
invisible exception handlers this is

00:28:16,290 --> 00:28:18,809
talked about this anti-pattern for a

00:28:17,970 --> 00:28:22,110
minute

00:28:18,809 --> 00:28:24,900
this Dill's this is the antipattern of

00:28:22,110 --> 00:28:26,610
dealing with exceptional code like it's

00:28:24,900 --> 00:28:28,140
business code it's a business code is

00:28:26,610 --> 00:28:32,700
the code you write in order to

00:28:28,140 --> 00:28:35,130
accomplish your goals and if you choose

00:28:32,700 --> 00:28:38,040
to conflate the exceptional edged cases

00:28:35,130 --> 00:28:39,419
with your business code and just when

00:28:38,040 --> 00:28:41,039
you see something wrong go

00:28:39,419 --> 00:28:42,539
and writes something to deal with it

00:28:41,039 --> 00:28:45,659
rather than throwing an exception or

00:28:42,539 --> 00:28:47,940
using the exception framework that's

00:28:45,659 --> 00:28:51,839
built into Python it makes it very

00:28:47,940 --> 00:28:54,450
difficult for anybody or impossible for

00:28:51,839 --> 00:28:57,089
anybody to predict how your application

00:28:54,450 --> 00:29:00,479
might fail in production it does nothing

00:28:57,089 --> 00:29:03,029
to document your code so I you know you

00:29:00,479 --> 00:29:04,950
won't really know why you're dealing

00:29:03,029 --> 00:29:06,719
with a situation or even that one might

00:29:04,950 --> 00:29:09,450
arise in the future when you're reading

00:29:06,719 --> 00:29:11,489
your code again and it's not very dry it

00:29:09,450 --> 00:29:14,070
doesn't follow the principles of do not

00:29:11,489 --> 00:29:17,039
repeat yourself instead you'll find

00:29:14,070 --> 00:29:21,059
yourself handling the same exceptions

00:29:17,039 --> 00:29:23,999
over and over again here's a slide on

00:29:21,059 --> 00:29:25,440
making your own exceptions I thought

00:29:23,999 --> 00:29:27,539
about taking this out but I think it's a

00:29:25,440 --> 00:29:30,749
cool slide because it's taken directly

00:29:27,539 --> 00:29:36,289
from pythons LDAP 3 library I anybody

00:29:30,749 --> 00:29:36,289
here use LDAP yeah that's fun right

00:29:37,769 --> 00:29:43,559
when you use LDAP the LDAP 3 library

00:29:40,229 --> 00:29:45,749
you'll end up with LDAP exceptions LDAP

00:29:43,559 --> 00:29:47,849
exception errors and LDAP configuration

00:29:45,749 --> 00:29:49,799
errors amongst a whole bunch of

00:29:47,849 --> 00:29:51,839
different exceptions but one of the nice

00:29:49,799 --> 00:29:54,359
things about the LDAP 3 library is that

00:29:51,839 --> 00:29:57,570
because LDAP is this wildly obtuse

00:29:54,359 --> 00:30:00,209
protocol and it can fail in so many

00:29:57,570 --> 00:30:02,789
amazing different ways the LDAP 3

00:30:00,209 --> 00:30:05,070
library has defined a great exception

00:30:02,789 --> 00:30:06,359
hierarchy so that you can specifically

00:30:05,070 --> 00:30:09,149
handle the exceptions that you're

00:30:06,359 --> 00:30:12,089
interested in well some frameworks might

00:30:09,149 --> 00:30:14,879
only throw messages at the exception

00:30:12,089 --> 00:30:17,190
level that are at their outer exception

00:30:14,879 --> 00:30:19,229
level hopefully every it's every pipe

00:30:17,190 --> 00:30:21,479
every library use has at least one root

00:30:19,229 --> 00:30:23,279
of root exception that extends exception

00:30:21,479 --> 00:30:26,309
so you don't just have to give a catch

00:30:23,279 --> 00:30:29,669
exception you don't want to have to just

00:30:26,309 --> 00:30:31,769
accept exception but you you really

00:30:29,669 --> 00:30:33,239
might want to be able to handle an

00:30:31,769 --> 00:30:34,859
exception at a lower level so

00:30:33,239 --> 00:30:37,200
specifically you might want to handle a

00:30:34,859 --> 00:30:39,989
configuration error rather than having

00:30:37,200 --> 00:30:41,549
to just handle the exception and pythons

00:30:39,989 --> 00:30:43,649
LDAP through library allows you to do

00:30:41,549 --> 00:30:45,329
that so kudos to them for for setting up

00:30:43,649 --> 00:30:48,479
such a nice hierarchy and I recommend

00:30:45,329 --> 00:30:54,229
you doing this as well I strive to do

00:30:48,479 --> 00:30:54,229
this in all of my projects striked you

00:30:54,440 --> 00:30:58,560
re-raising and chaining exceptions so

00:30:56,820 --> 00:31:00,030
when we're handling exceptions sometimes

00:30:58,560 --> 00:31:02,400
it's just best to add some additional

00:31:00,030 --> 00:31:06,210
context and then re-raise the exception

00:31:02,400 --> 00:31:08,910
and this is a great example taken again

00:31:06,210 --> 00:31:12,150
directly from Django this is the manage

00:31:08,910 --> 00:31:12,690
pie file that most of us have seen

00:31:12,150 --> 00:31:15,150
before

00:31:12,690 --> 00:31:17,250
and it does exactly that it tries to

00:31:15,150 --> 00:31:19,500
import Django and when Django isn't

00:31:17,250 --> 00:31:23,970
installed or we are working on the wrong

00:31:19,500 --> 00:31:25,560
virtual virtual environment then it

00:31:23,970 --> 00:31:27,270
gives us a error message and rather than

00:31:25,560 --> 00:31:29,820
just throwing the error message out at

00:31:27,270 --> 00:31:31,830
us it actually raises it rear Aizaz the

00:31:29,820 --> 00:31:34,020
import error with some very nice

00:31:31,830 --> 00:31:36,300
information for us so that we know

00:31:34,020 --> 00:31:37,470
exactly what to do about this it says go

00:31:36,300 --> 00:31:38,940
ahead and activate your virtual

00:31:37,470 --> 00:31:40,560
environment that reminder has been still

00:31:38,940 --> 00:31:43,140
helpful me on a number of occasions and

00:31:40,560 --> 00:31:49,110
knowing exactly why I see that it that

00:31:43,140 --> 00:31:50,870
that helpful message is great so let's

00:31:49,110 --> 00:31:53,570
go through three more quick examples

00:31:50,870 --> 00:31:55,320
first is third-party packages this is

00:31:53,570 --> 00:31:57,630
something that you might find yourself

00:31:55,320 --> 00:31:59,640
wanting to do now that you are using

00:31:57,630 --> 00:32:01,380
logging you might want to see the log

00:31:59,640 --> 00:32:05,580
messages generated by third party

00:32:01,380 --> 00:32:07,440
packages one of those packages is well

00:32:05,580 --> 00:32:10,680
Django it's third-party to you because

00:32:07,440 --> 00:32:12,300
you didn't write it and Django has an

00:32:10,680 --> 00:32:13,860
ORM which is great

00:32:12,300 --> 00:32:19,100
somebody in this room has done a lot of

00:32:13,860 --> 00:32:20,970
work on that thank you to that guy and

00:32:19,100 --> 00:32:26,010
seriously thank you I couldn't thank you

00:32:20,970 --> 00:32:29,220
enough and you have access to all of the

00:32:26,010 --> 00:32:31,710
sequel that's generated by jingoes ORM

00:32:29,220 --> 00:32:33,570
because the developers the core

00:32:31,710 --> 00:32:35,330
developers were thoughtful enough and

00:32:33,570 --> 00:32:38,160
kind enough to write into their

00:32:35,330 --> 00:32:42,720
documentation that if you turn up the

00:32:38,160 --> 00:32:45,750
log level of Django DB backends to debug

00:32:42,720 --> 00:32:49,320
then all of the sequel that's generated

00:32:45,750 --> 00:32:51,630
by Django's RM will be dumped - whatever

00:32:49,320 --> 00:32:53,910
handlers you place on this logger and

00:32:51,630 --> 00:32:55,920
here I've placed the console and file

00:32:53,910 --> 00:32:58,170
loggers and so in this way if you want

00:32:55,920 --> 00:33:02,910
to see the sequel that's being used to

00:32:58,170 --> 00:33:04,680
select or update the database etc you

00:33:02,910 --> 00:33:07,849
can see all of that just by adding this

00:33:04,680 --> 00:33:11,399
to your locking configuration

00:33:07,849 --> 00:33:13,619
another great thing that you can do here

00:33:11,399 --> 00:33:14,909
is set up logging aggregation was

00:33:13,619 --> 00:33:17,190
something like roll bar essentially

00:33:14,909 --> 00:33:20,699
airbrake elastic whatever you should

00:33:17,190 --> 00:33:22,709
like and this is nice because it gives

00:33:20,699 --> 00:33:26,579
you a web interface to all of your log

00:33:22,709 --> 00:33:28,619
files and so you might do that by

00:33:26,579 --> 00:33:30,479
signing up for a roll bar account pip

00:33:28,619 --> 00:33:32,070
installing roll bar adding a little bit

00:33:30,479 --> 00:33:34,079
of configuration this would be some of

00:33:32,070 --> 00:33:36,869
that configuration you would just

00:33:34,079 --> 00:33:38,729
configure roll bar add roll bars

00:33:36,869 --> 00:33:41,609
middleware this is a fancy thing I like

00:33:38,729 --> 00:33:44,129
to do and if you have multiple

00:33:41,609 --> 00:33:46,589
configuration files you don't have to

00:33:44,129 --> 00:33:47,759
add roll bar to dev or it's a local you

00:33:46,589 --> 00:33:50,219
might just want to add it to your

00:33:47,759 --> 00:33:52,169
production configuration and you can do

00:33:50,219 --> 00:33:55,739
that by just placing these two lines

00:33:52,169 --> 00:33:58,169
into however you configure production so

00:33:55,739 --> 00:34:00,139
that roll bar is activated and

00:33:58,169 --> 00:34:02,429
production around your middleware and

00:34:00,139 --> 00:34:04,589
then you'll just add roll bar as a

00:34:02,429 --> 00:34:06,659
handler to your loggers so here I'm

00:34:04,589 --> 00:34:11,399
adding it to the root logger and Django

00:34:06,659 --> 00:34:14,279
logger Django has a great exception

00:34:11,399 --> 00:34:15,779
handler jingoes exception handler will

00:34:14,279 --> 00:34:17,389
not handle your exceptions that are

00:34:15,779 --> 00:34:19,799
processed outside of the context of

00:34:17,389 --> 00:34:23,309
generating a view handling a view that

00:34:19,799 --> 00:34:25,500
is coming up with a get response and so

00:34:23,309 --> 00:34:27,899
if for example you write a man and stop

00:34:25,500 --> 00:34:31,379
I command and something breaks in there

00:34:27,899 --> 00:34:33,779
and all that's gonna happen easier app

00:34:31,379 --> 00:34:36,179
is gonna your app is gonna crash and the

00:34:33,779 --> 00:34:39,899
standard exception hook is going to take

00:34:36,179 --> 00:34:41,399
the the error message that was generated

00:34:39,899 --> 00:34:43,230
by the exception that's crashing your

00:34:41,399 --> 00:34:47,940
application and dump it to standard

00:34:43,230 --> 00:34:50,039
error and you'll have access to that

00:34:47,940 --> 00:34:51,720
exception on your console or wherever

00:34:50,039 --> 00:34:54,089
you receive standard error and that's it

00:34:51,720 --> 00:34:55,769
I hope you're recording standard error

00:34:54,089 --> 00:34:59,849
otherwise you might lose access to that

00:34:55,769 --> 00:35:01,769
forever so one thing you can do is to

00:34:59,849 --> 00:35:03,960
set up an exception hook and the

00:35:01,769 --> 00:35:05,519
exception hook is just any function that

00:35:03,960 --> 00:35:07,829
takes three arguments and those

00:35:05,519 --> 00:35:09,569
arguments the type value and trace back

00:35:07,829 --> 00:35:11,009
and then you can do whatever you want

00:35:09,569 --> 00:35:14,490
with those and what I like to do there

00:35:11,009 --> 00:35:16,710
is I like to call get logger and get a

00:35:14,490 --> 00:35:19,559
logger specifically named accept hook

00:35:16,710 --> 00:35:20,220
this is just a name for a logger that

00:35:19,559 --> 00:35:23,160
I've

00:35:20,220 --> 00:35:25,619
find and then I log critical I say

00:35:23,160 --> 00:35:28,740
uncaught exception I say that I here's

00:35:25,619 --> 00:35:32,460
the exception information to the to the

00:35:28,740 --> 00:35:34,530
logger and then I replace the sister

00:35:32,460 --> 00:35:36,780
except took with this function and then

00:35:34,530 --> 00:35:39,990
that way when the application crashes if

00:35:36,780 --> 00:35:42,900
you have a root logger that is logging

00:35:39,990 --> 00:35:45,630
it to male admins to roll bar and to the

00:35:42,900 --> 00:35:47,220
file then your logger will take the

00:35:45,630 --> 00:35:49,710
exception that caused your application

00:35:47,220 --> 00:35:52,650
to crash and before it dies hopefully

00:35:49,710 --> 00:35:55,200
hopefully but most of the time it will

00:35:52,650 --> 00:35:57,210
put that error message on to the console

00:35:55,200 --> 00:35:58,619
as it usually would also into the files

00:35:57,210 --> 00:36:00,570
so that you don't lose it forever and

00:35:58,619 --> 00:36:02,400
also send you an email message and if

00:36:00,570 --> 00:36:04,050
roll bar is on there you might also see

00:36:02,400 --> 00:36:05,160
that exception in roll bar this is a

00:36:04,050 --> 00:36:11,130
great way to know why your application

00:36:05,160 --> 00:36:12,840
crests crashed if your if you have code

00:36:11,130 --> 00:36:14,369
and managed to you know manage the PI

00:36:12,840 --> 00:36:20,700
commands that you're crowning this is

00:36:14,369 --> 00:36:23,099
great so some next steps I hope that

00:36:20,700 --> 00:36:27,599
we've all there you I hope that you know

00:36:23,099 --> 00:36:29,490
this has been helpful immediately after

00:36:27,599 --> 00:36:30,660
this you could go and configure a root

00:36:29,490 --> 00:36:32,400
logger

00:36:30,660 --> 00:36:35,220
you could add a format that works for

00:36:32,400 --> 00:36:38,460
you you could create a file handler if

00:36:35,220 --> 00:36:40,320
you want a file handler you can add an

00:36:38,460 --> 00:36:42,020
except at the bottom of your settings

00:36:40,320 --> 00:36:45,720
that PI that's where I like to add it

00:36:42,020 --> 00:36:47,820
you can assign the variable logger by

00:36:45,720 --> 00:36:50,580
calling logging get logger dunder name

00:36:47,820 --> 00:36:52,020
at the top of all of your modules you

00:36:50,580 --> 00:36:54,480
could find and replace all of your print

00:36:52,020 --> 00:36:56,130
statements with logging info and logging

00:36:54,480 --> 00:36:58,800
debug whichever you think is appropriate

00:36:56,130 --> 00:37:02,460
and if you wanted to you could create a

00:36:58,800 --> 00:37:03,900
root exception for your application so

00:37:02,460 --> 00:37:06,619
these are some resources that I reviewed

00:37:03,900 --> 00:37:08,730
that I've used over the past three years

00:37:06,619 --> 00:37:11,520
pythons logging documentation is

00:37:08,730 --> 00:37:14,180
fantastic Django's logging documentation

00:37:11,520 --> 00:37:16,500
is also truly excellent

00:37:14,180 --> 00:37:18,330
this is Django's based login

00:37:16,500 --> 00:37:20,310
configuration and it's worth the read if

00:37:18,330 --> 00:37:24,450
you haven't read it before and then

00:37:20,310 --> 00:37:25,080
finally Peter actually wrote a blog post

00:37:24,450 --> 00:37:27,599
called

00:37:25,080 --> 00:37:29,369
jingle logging the right way a couple of

00:37:27,599 --> 00:37:32,079
years ago and it was the inspiration for

00:37:29,369 --> 00:37:34,539
me to learn a lot more about logging and

00:37:32,079 --> 00:37:36,249
for me to give this talk so he knows a

00:37:34,539 --> 00:37:38,319
lot about logging and if you see him

00:37:36,249 --> 00:37:39,880
around the conference definitely

00:37:38,319 --> 00:37:44,529
recommend having it having a chat with

00:37:39,880 --> 00:37:47,349
him he knows he knows a great deal thank

00:37:44,529 --> 00:37:49,479
you for your time you can get the

00:37:47,349 --> 00:37:54,069
examples from this talk of a URL I also

00:37:49,479 --> 00:37:56,259
have the slides posted in the repo and

00:37:54,069 --> 00:37:57,999
I'm happy to take any questions here and

00:37:56,259 --> 00:37:59,259
if we run out of time you have more

00:37:57,999 --> 00:38:07,319
questions feel free to find me in the

00:37:59,259 --> 00:38:11,829
hallway or send me an email thank you hi

00:38:07,319 --> 00:38:13,630
when you're adding debug logs for fixing

00:38:11,829 --> 00:38:15,910
something where one might otherwise use

00:38:13,630 --> 00:38:18,160
print statements and once you've

00:38:15,910 --> 00:38:20,859
completed that how often do you remove

00:38:18,160 --> 00:38:23,009
those debug logs versus treat the new

00:38:20,859 --> 00:38:28,089
logs like code that should have been

00:38:23,009 --> 00:38:31,329
present before and leave them yes later

00:38:28,089 --> 00:38:34,150
yeah absolutely so sort of the way that

00:38:31,329 --> 00:38:36,429
I do that is you know as you develop in

00:38:34,150 --> 00:38:38,289
code you might write you might write the

00:38:36,429 --> 00:38:39,579
code once and then you might rewrite it

00:38:38,289 --> 00:38:41,170
you might rewrite it and you'll find

00:38:39,579 --> 00:38:43,119
that some of your log messages just

00:38:41,170 --> 00:38:44,650
don't make sense anymore and you'll be

00:38:43,119 --> 00:38:46,809
removing them or updating over the

00:38:44,650 --> 00:38:49,359
course of writing your code once your

00:38:46,809 --> 00:38:51,309
code is good enough to ship whatever log

00:38:49,359 --> 00:38:53,199
messages you have in there whatever log

00:38:51,309 --> 00:38:55,689
statements you have are probably

00:38:53,199 --> 00:38:57,999
valuable later on as a reminder to you

00:38:55,689 --> 00:38:59,769
and useful to others and nobody's gonna

00:38:57,999 --> 00:39:01,359
run your code and you're not going to

00:38:59,769 --> 00:39:03,759
run your code in production with your

00:39:01,359 --> 00:39:05,259
log or set to the level debug unless you

00:39:03,759 --> 00:39:06,489
really want to see those messages in

00:39:05,259 --> 00:39:07,869
which case you'll be thankful that

00:39:06,489 --> 00:39:09,400
they're there so the answer that I would

00:39:07,869 --> 00:39:11,859
have for you is leave them don't remove

00:39:09,400 --> 00:39:15,069
them that's the reason that we have

00:39:11,859 --> 00:39:16,749
levels to call on the logger just log in

00:39:15,069 --> 00:39:20,369
at level debug and then turn off debug

00:39:16,749 --> 00:39:24,249
in production thank you

00:39:20,369 --> 00:39:26,079
hi this is kind of a I guess a general

00:39:24,249 --> 00:39:29,859
question but one issue I've had with

00:39:26,079 --> 00:39:32,499
logging is when I then have unit tests

00:39:29,859 --> 00:39:35,739
that are trying to check the logs I end

00:39:32,499 --> 00:39:38,559
up in a bit of a vortex partly because

00:39:35,739 --> 00:39:41,439
the way tests can be run sometimes

00:39:38,559 --> 00:39:43,209
messes with the logging structure do you

00:39:41,439 --> 00:39:45,609
have any suggestions on that if that

00:39:43,209 --> 00:39:48,190
sounds familiar to you

00:39:45,609 --> 00:39:50,890
I really wish I did have an answer and a

00:39:48,190 --> 00:39:52,509
suggestion for that but I'm going to

00:39:50,890 --> 00:39:54,700
admit to you that I've done

00:39:52,509 --> 00:39:57,579
not as much testing as I would have

00:39:54,700 --> 00:39:59,440
lights in my life and I actually haven't

00:39:57,579 --> 00:40:02,470
run into any issues where the logger has

00:39:59,440 --> 00:40:04,480
gotten in the way of my tests so I don't

00:40:02,470 --> 00:40:06,880
have an answer for you there I would

00:40:04,480 --> 00:40:10,480
hope that you could change the level of

00:40:06,880 --> 00:40:18,880
your loggers I in production so you know

00:40:10,480 --> 00:40:24,880
if you were to do something like I'm

00:40:18,880 --> 00:40:26,559
just going to scroll here so if you were

00:40:24,880 --> 00:40:28,420
to do something like this then where

00:40:26,559 --> 00:40:30,190
you're saying that your handler is sorry

00:40:28,420 --> 00:40:31,690
your level for your root logger and for

00:40:30,190 --> 00:40:35,380
Django logger are going to be getting

00:40:31,690 --> 00:40:36,910
this environment variable the root log

00:40:35,380 --> 00:40:39,369
level and the Django log level hopefully

00:40:36,910 --> 00:40:41,559
you could just set a environment

00:40:39,369 --> 00:40:42,880
variable and set that all the way up to

00:40:41,559 --> 00:40:44,109
critical or something and that way you

00:40:42,880 --> 00:40:45,730
would just wouldn't see those log

00:40:44,109 --> 00:40:47,890
messages but I don't know how that's

00:40:45,730 --> 00:40:49,809
going to actually interact between tests

00:40:47,890 --> 00:40:52,239
and logging so I don't have an answer to

00:40:49,809 --> 00:40:54,759
your question I think I heard you say

00:40:52,239 --> 00:40:57,549
earlier that there was a way of setting

00:40:54,759 --> 00:40:59,589
up a configure for listening on a port

00:40:57,549 --> 00:41:02,410
does that mean you could actually change

00:40:59,589 --> 00:41:08,769
a logging level while the application is

00:41:02,410 --> 00:41:11,109
running yes and I don't know how yeah so

00:41:08,769 --> 00:41:12,849
Jake say the Python locking

00:41:11,109 --> 00:41:14,920
documentation makes very clear that you

00:41:12,849 --> 00:41:17,589
can you can set up listening on a port

00:41:14,920 --> 00:41:20,109
or for law configuration and you can do

00:41:17,589 --> 00:41:21,869
exactly that and I think it's really

00:41:20,109 --> 00:41:24,099
cool but again I've never done it so

00:41:21,869 --> 00:41:26,349
thank you for asking though it's really

00:41:24,099 --> 00:41:28,329
useful to look into that you shared that

00:41:26,349 --> 00:41:30,609
example with the accept hook in that

00:41:28,329 --> 00:41:33,519
little block of code but to find one

00:41:30,609 --> 00:41:35,980
where would you put that code is it in

00:41:33,519 --> 00:41:39,299
settings dot PI or where do you you guys

00:41:35,980 --> 00:41:45,519
want to try a live demo why yes I do

00:41:39,299 --> 00:41:48,450
I have hopefully a great example of that

00:41:45,519 --> 00:41:48,450
for us right here

00:41:50,790 --> 00:41:57,870
let's see what happens so I'm going to

00:41:53,700 --> 00:42:00,590
deactivate and then I'm gonna call

00:41:57,870 --> 00:42:00,590
manage top hi

00:42:02,870 --> 00:42:09,750
and I'm going to get this message that

00:42:05,910 --> 00:42:13,230
says critical accept hook uncaught

00:42:09,750 --> 00:42:16,710
exception and so this is sort of I've

00:42:13,230 --> 00:42:21,480
put my own accept in here and the reason

00:42:16,710 --> 00:42:28,200
that that works is that in this code

00:42:21,480 --> 00:42:30,860
it's hard to see in this code that's

00:42:28,200 --> 00:42:30,860
hard to see

00:42:36,820 --> 00:42:40,590
inside have managed up high

00:42:45,020 --> 00:42:52,130
there we go I created a I changed the

00:42:49,580 --> 00:42:54,740
format the its this is this is sort of

00:42:52,130 --> 00:42:56,930
using the API configuration of the

00:42:54,740 --> 00:42:59,570
Python logger I just changed the default

00:42:56,930 --> 00:43:02,270
formatter to be a new formatter and then

00:42:59,570 --> 00:43:04,160
I'm using that formatter well I'm just

00:43:02,270 --> 00:43:07,640
replacing the accept took with a lambda

00:43:04,160 --> 00:43:09,560
here saying that I wanted not to you

00:43:07,640 --> 00:43:11,270
know say uncaught exception so that's

00:43:09,560 --> 00:43:12,860
one place you could put it and then the

00:43:11,270 --> 00:43:14,240
place that I mean you wouldn't actually

00:43:12,860 --> 00:43:16,100
want to put it there but I just think

00:43:14,240 --> 00:43:18,410
that's a an interesting example the

00:43:16,100 --> 00:43:21,110
place that I always put my accept accept

00:43:18,410 --> 00:43:25,280
hooks is right at the bottom of settings

00:43:21,110 --> 00:43:27,230
PI I define the exception method and

00:43:25,280 --> 00:43:28,790
then I just set the accept took and the

00:43:27,230 --> 00:43:30,350
reason I do it in settings dot pi is

00:43:28,790 --> 00:43:32,869
that that's always going to get loaded

00:43:30,350 --> 00:43:34,520
when your application runs and so by

00:43:32,869 --> 00:43:37,190
placing it there you know that you're

00:43:34,520 --> 00:43:40,400
except took is going to be assigned as

00:43:37,190 --> 00:43:44,330
soon as Django fires up I think that

00:43:40,400 --> 00:43:45,470
answers the question okay we will need

00:43:44,330 --> 00:43:47,480
to leave it there so we can get our next

00:43:45,470 --> 00:43:48,640
speaker setup could everyone think run

00:43:47,480 --> 00:43:53,280
again for his presentation

00:43:48,640 --> 00:44:00,300
[Applause]

00:43:53,280 --> 00:44:00,300
[Music]

00:44:02,970 --> 00:44:05,030

YouTube URL: https://www.youtube.com/watch?v=ziegOuE7M4A


