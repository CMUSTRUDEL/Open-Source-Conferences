Title: DjangoCon 2019 -  Prefetching for Fun and Profit by Mike Hansen
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 -  Prefetching for Fun and Profit by Mike Hansen

This talk was presented at: https://2019.djangocon.us/talks/prefetching-for-fun-and-profit/

LINKS:
Follow Mike Hansen ğŸ‘‡
On GitHub: https://github.com/mwhansen


Follow DjangCon US ğŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ğŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:17,480
[Music]

00:00:15,380 --> 00:00:20,300
so a little bit about myself I'm a

00:00:17,480 --> 00:00:22,369
software engineer at rover for those of

00:00:20,300 --> 00:00:24,470
you who are not familiar with Rover it's

00:00:22,369 --> 00:00:26,590
an online marketplace for pet services

00:00:24,470 --> 00:00:29,510
like dog walking or dog boarding

00:00:26,590 --> 00:00:32,029
grooming things like that

00:00:29,510 --> 00:00:35,690
and Rover actually got started about

00:00:32,029 --> 00:00:39,710
eight years ago at a startup weekend as

00:00:35,690 --> 00:00:42,979
a Gengo project and so we've been with

00:00:39,710 --> 00:00:47,239
Jango for many many years and it is

00:00:42,979 --> 00:00:50,710
continued to service well so today I'm

00:00:47,239 --> 00:00:53,000
gonna be talking a bit about prefetching

00:00:50,710 --> 00:00:55,430
and over the last couple of years

00:00:53,000 --> 00:00:59,690
there's been a number of times where

00:00:55,430 --> 00:01:02,119
we've had we've encountered some things

00:00:59,690 --> 00:01:06,140
that are code where it was maybe not

00:01:02,119 --> 00:01:09,380
necessarily the best but digging down

00:01:06,140 --> 00:01:11,390
into Django's internals and learning

00:01:09,380 --> 00:01:15,490
about how the prefetch related

00:01:11,390 --> 00:01:19,250
implementation works we were able to

00:01:15,490 --> 00:01:24,340
come up with I think good solutions to

00:01:19,250 --> 00:01:26,750
the problems we were having so today

00:01:24,340 --> 00:01:29,210
give you a brief overview of what we're

00:01:26,750 --> 00:01:30,560
going to be talking about so the very

00:01:29,210 --> 00:01:35,320
first section we'll be talking about

00:01:30,560 --> 00:01:37,909
N+ 1 query problems this is sort of the

00:01:35,320 --> 00:01:40,609
the main thing that prefetch related is

00:01:37,909 --> 00:01:42,679
trying to solve so it'd be good to just

00:01:40,609 --> 00:01:45,649
make sure that we're familiar with that

00:01:42,679 --> 00:01:49,780
so we know yeah what we're trying to

00:01:45,649 --> 00:01:53,030
avoid the next section is sort of

00:01:49,780 --> 00:01:57,200
prefetching under the hood section and

00:01:53,030 --> 00:02:00,049
so the things that I hope to cover here

00:01:57,200 --> 00:02:02,259
are things which a are not sort of

00:02:00,049 --> 00:02:06,229
covered by the Jango documentation and

00:02:02,259 --> 00:02:08,990
be focused on the things where the

00:02:06,229 --> 00:02:13,580
Django's prefetch related code interacts

00:02:08,990 --> 00:02:15,319
with sort of external code so these are

00:02:13,580 --> 00:02:18,560
the types of things that you'd want to

00:02:15,319 --> 00:02:21,190
know about if you were designing some

00:02:18,560 --> 00:02:24,349
code to interact with chango's prefetch

00:02:21,190 --> 00:02:27,319
related system and then

00:02:24,349 --> 00:02:30,260
given that oh one thing I want to say is

00:02:27,319 --> 00:02:32,780
that section will be probably fairly

00:02:30,260 --> 00:02:37,129
brisk and it is not necessarily my

00:02:32,780 --> 00:02:40,040
intention for for you to sort of

00:02:37,129 --> 00:02:43,400
internalize every kind of line of code

00:02:40,040 --> 00:02:44,389
that we go over and present the main the

00:02:43,400 --> 00:02:47,989
main thing that I want to accomplish

00:02:44,389 --> 00:02:50,870
there is just to sort of call out what

00:02:47,989 --> 00:02:52,909
the main sort of moving parts are with

00:02:50,870 --> 00:02:55,099
prefetch related and how they interact

00:02:52,909 --> 00:02:57,409
so even if you like don't quite

00:02:55,099 --> 00:03:00,260
understand the section of code or you

00:02:57,409 --> 00:03:01,900
know forgot why I covered earlier like

00:03:00,260 --> 00:03:06,549
that's not a big deal

00:03:01,900 --> 00:03:10,189
and so then given that knowing about how

00:03:06,549 --> 00:03:12,739
Pripet related works I'm gonna go over a

00:03:10,189 --> 00:03:16,849
series of what I'm calling case studies

00:03:12,739 --> 00:03:19,489
but these are scenarios where what

00:03:16,849 --> 00:03:22,819
Django provides out of the box maybe

00:03:19,489 --> 00:03:25,519
doesn't isn't necessarily a good

00:03:22,819 --> 00:03:28,879
solution and so with a little bit of

00:03:25,519 --> 00:03:32,169
work we can use Django's internals to

00:03:28,879 --> 00:03:38,449
say come up with something better so

00:03:32,169 --> 00:03:41,930
yeah that being said what do like talks

00:03:38,449 --> 00:03:43,519
are for the audience and so I sort of

00:03:41,930 --> 00:03:45,169
wanted to cover at the beginning like

00:03:43,519 --> 00:03:48,769
what do I want you to get out of this

00:03:45,169 --> 00:03:51,139
talk because I think knowing that maybe

00:03:48,769 --> 00:03:53,389
we'll make this talk more effective for

00:03:51,139 --> 00:03:56,930
you so given that this is to talk about

00:03:53,389 --> 00:04:00,949
prefetching I want you to come away with

00:03:56,930 --> 00:04:02,479
an understanding of the key points with

00:04:00,949 --> 00:04:05,810
respect to how Django implements

00:04:02,479 --> 00:04:09,079
prefetching but I would also like you to

00:04:05,810 --> 00:04:11,180
sort of think about your own like the

00:04:09,079 --> 00:04:14,810
code that you work with on a day to day

00:04:11,180 --> 00:04:16,579
basis and where what sort of problems or

00:04:14,810 --> 00:04:19,880
things you've incurred encountered with

00:04:16,579 --> 00:04:24,440
respect to say data fetching or N+ 1

00:04:19,880 --> 00:04:26,840
query problems and then finally I'd like

00:04:24,440 --> 00:04:28,940
you to see how you can use say knowledge

00:04:26,840 --> 00:04:33,789
of janko's internals to improve your own

00:04:28,940 --> 00:04:36,830
code and I think more generally I think

00:04:33,789 --> 00:04:37,960
one way that we can sort of grow as

00:04:36,830 --> 00:04:40,240
engineers

00:04:37,960 --> 00:04:43,870
and become better software developers is

00:04:40,240 --> 00:04:45,850
to kind of dig into the sort of

00:04:43,870 --> 00:04:48,940
libraries or frameworks that we depend

00:04:45,850 --> 00:04:51,190
on every day especially if we encounter

00:04:48,940 --> 00:04:54,400
something where oh it's not behaving as

00:04:51,190 --> 00:04:56,620
you're expecting then like that's a

00:04:54,400 --> 00:04:59,230
great time to say hey maybe I'm going to

00:04:56,620 --> 00:05:00,520
set aside some time to really dig in to

00:04:59,230 --> 00:05:02,830
see what's going on there

00:05:00,520 --> 00:05:06,130
even though it may be quicker to say

00:05:02,830 --> 00:05:08,890
check Stack Overflow and find some you

00:05:06,130 --> 00:05:12,580
know quick solution but I think being

00:05:08,890 --> 00:05:15,700
able to sort of dive down into the code

00:05:12,580 --> 00:05:18,480
that you work with is a great way that

00:05:15,700 --> 00:05:22,450
we can become better software engineers

00:05:18,480 --> 00:05:25,600
so first thing like I said I'll talk

00:05:22,450 --> 00:05:26,200
about a N+ 1 query problem and so what

00:05:25,600 --> 00:05:29,020
is this

00:05:26,200 --> 00:05:31,930
so the n plus 1 query problem is they're

00:05:29,020 --> 00:05:35,200
calling a data access anti-pattern and

00:05:31,930 --> 00:05:38,440
this commonly occurs when using ORM s

00:05:35,200 --> 00:05:40,660
and so how it works is an initial

00:05:38,440 --> 00:05:44,830
database query is done and it fetches

00:05:40,660 --> 00:05:47,320
multiple rows of data this is the +1 in

00:05:44,830 --> 00:05:50,410
the n plus one query problem and then

00:05:47,320 --> 00:05:53,650
for each of those rows an additional

00:05:50,410 --> 00:05:56,140
query or queries are done to fetch more

00:05:53,650 --> 00:05:59,530
data related to that particular row and

00:05:56,140 --> 00:06:02,440
so this is the N queries in the n plus 1

00:05:59,530 --> 00:06:06,670
problem so for example if in Django we

00:06:02,440 --> 00:06:09,850
run a query to fetch a list of 100 dogs

00:06:06,670 --> 00:06:12,220
and then for each of those dogs we want

00:06:09,850 --> 00:06:15,370
to say display the name of their

00:06:12,220 --> 00:06:19,210
favorite toy well if we sort of do it

00:06:15,370 --> 00:06:21,190
naively then you may you know get into a

00:06:19,210 --> 00:06:24,880
situation where you run a hundred

00:06:21,190 --> 00:06:27,070
queries to fetch all of that data and if

00:06:24,880 --> 00:06:29,650
each database query say takes 10

00:06:27,070 --> 00:06:32,800
milliseconds then you're in a situation

00:06:29,650 --> 00:06:35,020
where like you've already are spending

00:06:32,800 --> 00:06:37,420
you know one second of time during the

00:06:35,020 --> 00:06:40,480
request response cycle just to execute

00:06:37,420 --> 00:06:44,280
all of these database queries so that is

00:06:40,480 --> 00:06:46,630
what we are trying to avoid so what does

00:06:44,280 --> 00:06:49,270
what do you n +1 query problems look

00:06:46,630 --> 00:06:51,370
like so I'm going to go over a couple

00:06:49,270 --> 00:06:54,250
examples of how these commonly

00:06:51,370 --> 00:06:57,460
come up in our code so let's say we have

00:06:54,250 --> 00:07:00,250
a Django template I'm here passed in as

00:06:57,460 --> 00:07:04,120
context to the template we'll say dogs

00:07:00,250 --> 00:07:07,000
is equal to all of our dog objects and

00:07:04,120 --> 00:07:10,270
then we do the initial query so when we

00:07:07,000 --> 00:07:12,070
iterate over this query set django calls

00:07:10,270 --> 00:07:15,010
the database fetches all of the dog

00:07:12,070 --> 00:07:16,449
objects and then as we go through and

00:07:15,010 --> 00:07:18,760
print out their name and the name of

00:07:16,449 --> 00:07:21,880
their favorite toy when we access dog

00:07:18,760 --> 00:07:25,540
dot favorite toy behind-the-scenes

00:07:21,880 --> 00:07:29,070
django does an additional query so hmm

00:07:25,540 --> 00:07:32,889
so the green the top one is our plus one

00:07:29,070 --> 00:07:34,720
in an plus one problem and then the dog

00:07:32,889 --> 00:07:39,400
dot favorite toy gives us the n

00:07:34,720 --> 00:07:42,100
different queries another example that

00:07:39,400 --> 00:07:44,530
where this comes up a lot for us in

00:07:42,100 --> 00:07:48,039
particular is using Django rest

00:07:44,530 --> 00:07:51,389
framework so many of you may have used

00:07:48,039 --> 00:07:54,960
this before so this is a pretty simple

00:07:51,389 --> 00:07:58,330
serializer for right now we're just

00:07:54,960 --> 00:07:59,889
serializing say the ID of a dog and then

00:07:58,330 --> 00:08:02,889
we have a ListView that uses that

00:07:59,889 --> 00:08:05,350
serializer and for the query set we say

00:08:02,889 --> 00:08:10,030
get all of the dogs that belong to a

00:08:05,350 --> 00:08:12,210
particular owner and great so this

00:08:10,030 --> 00:08:16,599
doesn't have an M plus 1 query problem

00:08:12,210 --> 00:08:19,120
here we have our sort of plus 1 query

00:08:16,599 --> 00:08:21,160
which fetches all of the dogs but our

00:08:19,120 --> 00:08:23,200
dog serializer doesn't do any additional

00:08:21,160 --> 00:08:26,020
queries so we're in the clear but maybe

00:08:23,200 --> 00:08:28,389
let's say a month later you say hey our

00:08:26,020 --> 00:08:29,650
dog serializer needs to like we want to

00:08:28,389 --> 00:08:31,990
know about the name of that dog's

00:08:29,650 --> 00:08:37,169
favorite toy and so we add say something

00:08:31,990 --> 00:08:40,630
like this and here when you specify the

00:08:37,169 --> 00:08:43,419
the source we're saying hey that's a the

00:08:40,630 --> 00:08:46,690
favorite toys name and behind the scenes

00:08:43,419 --> 00:08:49,959
Django will do a query there and with

00:08:46,690 --> 00:08:52,390
this sort of setup you run into an M

00:08:49,959 --> 00:08:55,630
plus 1 query problem and maybe some of

00:08:52,390 --> 00:08:59,140
these are harder to see initially

00:08:55,630 --> 00:09:01,510
because maybe your define your views in

00:08:59,140 --> 00:09:04,440
different files from your serializers

00:09:01,510 --> 00:09:06,330
and so you don't necessarily know the

00:09:04,440 --> 00:09:08,340
when you know you go and change the dog

00:09:06,330 --> 00:09:11,370
serializer that you have to change all

00:09:08,340 --> 00:09:15,830
of the views that use it to make sure

00:09:11,370 --> 00:09:15,830
that you fetch the dog's favorite toy

00:09:16,370 --> 00:09:24,510
cool so how does django solve this

00:09:19,350 --> 00:09:27,180
problem so we prefetch related and so

00:09:24,510 --> 00:09:29,370
instead of passing in like dog objects

00:09:27,180 --> 00:09:31,770
not all to the context we can call

00:09:29,370 --> 00:09:33,330
prefetch related and give the name and

00:09:31,770 --> 00:09:37,230
say hey we want to prefetch our favorite

00:09:33,330 --> 00:09:39,330
toy and then when we iterate through all

00:09:37,230 --> 00:09:42,690
of the dogs and print their favorite

00:09:39,330 --> 00:09:46,350
toys name Django doesn't actually do an

00:09:42,690 --> 00:09:47,100
additional query for each dog so how how

00:09:46,350 --> 00:09:49,860
does that work

00:09:47,100 --> 00:09:53,880
well what Django does do is it does one

00:09:49,860 --> 00:09:55,950
additional query for each prefetch that

00:09:53,880 --> 00:09:59,970
you specify for in this example it was

00:09:55,950 --> 00:10:02,070
the favorite toy so kind of how it would

00:09:59,970 --> 00:10:04,230
work behind the scenes is that would go

00:10:02,070 --> 00:10:05,730
through fetch all of the dogs then

00:10:04,230 --> 00:10:08,520
iterate through that list

00:10:05,730 --> 00:10:10,920
collect out the IDS of their favorite

00:10:08,520 --> 00:10:12,870
toys and then execute a query something

00:10:10,920 --> 00:10:16,440
like this where you select all of the

00:10:12,870 --> 00:10:18,300
toys where that toys ID is in the list

00:10:16,440 --> 00:10:24,720
of favorite toy IDs that you just

00:10:18,300 --> 00:10:26,280
collected great so how how does Django

00:10:24,720 --> 00:10:29,580
do this like what is it actually doing

00:10:26,280 --> 00:10:32,610
under the hood so that's what we'll talk

00:10:29,580 --> 00:10:36,140
about next so we'll start at the

00:10:32,610 --> 00:10:39,870
beginning for how we specify prefetches

00:10:36,140 --> 00:10:42,600
so every time prefetch related is called

00:10:39,870 --> 00:10:45,480
on a query set what Django does is it

00:10:42,600 --> 00:10:47,970
returns a new query set and then there's

00:10:45,480 --> 00:10:50,990
a attribute on the query set called

00:10:47,970 --> 00:10:53,280
underscore prefetch related lookups and

00:10:50,990 --> 00:10:54,870
basically what it does is it takes

00:10:53,280 --> 00:10:56,880
everything that you passed into prefetch

00:10:54,870 --> 00:11:00,330
related and just depends it to the end

00:10:56,880 --> 00:11:02,280
of that so for example if we define our

00:11:00,330 --> 00:11:05,400
query set like dogged objects stop

00:11:02,280 --> 00:11:07,140
prefetch related favorite toy we can

00:11:05,400 --> 00:11:10,710
look at this prefetch related lookups

00:11:07,140 --> 00:11:15,060
and see that Oh favorite toy is there if

00:11:10,710 --> 00:11:17,610
we were that to then go and add in say

00:11:15,060 --> 00:11:18,000
an additional prefetch related lookup to

00:11:17,610 --> 00:11:20,910
that

00:11:18,000 --> 00:11:25,170
we can see oh the favorite toys

00:11:20,910 --> 00:11:29,279
manufacturer is now now part of that

00:11:25,170 --> 00:11:31,769
prefetch related lookups attribute okay

00:11:29,279 --> 00:11:35,939
so that's that's sort of where Jango is

00:11:31,769 --> 00:11:39,420
storing the prefetches that you want on

00:11:35,939 --> 00:11:41,730
a given query set so then when the

00:11:39,420 --> 00:11:45,420
queries that gets evaluated say like you

00:11:41,730 --> 00:11:46,529
iterate over all of the values somewhere

00:11:45,420 --> 00:11:48,990
along the line

00:11:46,529 --> 00:11:52,860
fetch all is called it's an internal

00:11:48,990 --> 00:11:55,949
method the first part here where it sets

00:11:52,860 --> 00:11:58,889
result cache let's say if we were to

00:11:55,949 --> 00:12:03,060
iterate for all of the dogs result cache

00:11:58,889 --> 00:12:08,250
would be a list of dog instances then

00:12:03,060 --> 00:12:10,290
after it's fetched all of the dogs it

00:12:08,250 --> 00:12:13,199
checks to see if you've specified any

00:12:10,290 --> 00:12:16,050
prefetch related lookups and if you have

00:12:13,199 --> 00:12:19,319
and it hasn't run the prefetching

00:12:16,050 --> 00:12:21,750
process already then it calls self dot

00:12:19,319 --> 00:12:25,790
underscore prefetch related lookups so

00:12:21,750 --> 00:12:29,040
we sort of trace that through and here

00:12:25,790 --> 00:12:33,180
this internal method calls prefetch

00:12:29,040 --> 00:12:36,720
related objects and it passes in the

00:12:33,180 --> 00:12:39,839
result cache which is the list of say in

00:12:36,720 --> 00:12:44,279
our case the dog instances that we've

00:12:39,839 --> 00:12:46,230
fetched and then the it passes in the

00:12:44,279 --> 00:12:49,769
prefetch related lookups that we've sort

00:12:46,230 --> 00:12:52,199
of specified along the way so we'll

00:12:49,769 --> 00:12:55,290
continue to drill down and take a look

00:12:52,199 --> 00:12:58,139
at prefetch related objects so this is

00:12:55,290 --> 00:13:01,050
the primary function that Django uses to

00:12:58,139 --> 00:13:05,629
perform prefetching so you can find this

00:13:01,050 --> 00:13:09,839
function in Django DB models not query

00:13:05,629 --> 00:13:12,449
and I've gone through and the slides are

00:13:09,839 --> 00:13:14,250
available afterwards I've sort of github

00:13:12,449 --> 00:13:17,000
links to all the places in this source

00:13:14,250 --> 00:13:19,649
code where these things are happening

00:13:17,000 --> 00:13:20,970
but we're not so this function that

00:13:19,649 --> 00:13:24,660
handles a lot of the kind of the

00:13:20,970 --> 00:13:28,949
bookkeeping process during the prefetch

00:13:24,660 --> 00:13:31,529
related process and so for example if

00:13:28,949 --> 00:13:33,560
you have you know like

00:13:31,529 --> 00:13:37,790
I'm favorite toy double underscore

00:13:33,560 --> 00:13:40,589
manufacture the pre-vet related objects

00:13:37,790 --> 00:13:43,410
function keeps track of okay these are

00:13:40,589 --> 00:13:45,329
all the favourite toys you've you've

00:13:43,410 --> 00:13:47,759
fetched and then now you have to get all

00:13:45,329 --> 00:13:50,129
the manufacturers for those so we're not

00:13:47,759 --> 00:13:53,399
going to be digging too much into that

00:13:50,129 --> 00:13:58,920
but one thing that pre-vet related

00:13:53,399 --> 00:14:04,790
objects does do is it calls this gap

00:13:58,920 --> 00:14:07,589
prefetcher function and so the primary

00:14:04,790 --> 00:14:11,160
purpose of this function is to get a

00:14:07,589 --> 00:14:15,449
prefetcher so that makes you wonder okay

00:14:11,160 --> 00:14:19,769
what is a prefetcher well a prefetcher

00:14:15,449 --> 00:14:24,749
is just any object which defines a get

00:14:19,769 --> 00:14:28,290
prefetch query set method that's all so

00:14:24,749 --> 00:14:31,470
for example let's say we have our dog

00:14:28,290 --> 00:14:34,529
class and we access favorite toy from

00:14:31,470 --> 00:14:37,829
the class as opposed to an instance of

00:14:34,529 --> 00:14:40,920
dog then we get something django calls a

00:14:37,829 --> 00:14:43,589
forward one-to-one descriptor okay

00:14:40,920 --> 00:14:46,379
that's some object but you can look and

00:14:43,589 --> 00:14:50,550
that object defines a get prefetch query

00:14:46,379 --> 00:14:54,569
set method so dog dot favorite toy is a

00:14:50,550 --> 00:14:57,120
prefetcher and so i think if there's one

00:14:54,569 --> 00:15:00,420
thing to take away from this section is

00:14:57,120 --> 00:15:02,329
this get prefetch query set method like

00:15:00,420 --> 00:15:06,269
this is sort of the most important thing

00:15:02,329 --> 00:15:10,470
in defining how prefetching is going to

00:15:06,269 --> 00:15:13,110
work um so yeah if you can remember one

00:15:10,470 --> 00:15:15,389
thing it's this get prefetch query set

00:15:13,110 --> 00:15:18,000
method if you'd you know just grep

00:15:15,389 --> 00:15:21,689
through janko's codebase you'll can find

00:15:18,000 --> 00:15:26,779
all of the instances where Django se is

00:15:21,689 --> 00:15:32,069
able to define some prefetching behavior

00:15:26,779 --> 00:15:33,360
for when talking about prefetch related

00:15:32,069 --> 00:15:37,139
you'll see these things called

00:15:33,360 --> 00:15:43,500
descriptors coming up and it's kind of

00:15:37,139 --> 00:15:45,620
hard to sort of work with say defining

00:15:43,500 --> 00:15:47,670
new objects which are

00:15:45,620 --> 00:15:51,420
defining new pre fetchers without

00:15:47,670 --> 00:15:54,209
knowing about descriptors and so a

00:15:51,420 --> 00:15:57,660
descriptor for our purpose is an object

00:15:54,209 --> 00:15:59,670
with implements double underscore get or

00:15:57,660 --> 00:16:03,060
there are a couple other methods here

00:15:59,670 --> 00:16:06,839
that an object can implement to become a

00:16:03,060 --> 00:16:08,910
descriptor and what they do is they

00:16:06,839 --> 00:16:12,120
customize what's returned when the

00:16:08,910 --> 00:16:15,570
object is accessed from an attribute on

00:16:12,120 --> 00:16:20,700
a class instance so that's kind of a lot

00:16:15,570 --> 00:16:23,390
to parse but like if we use Django like

00:16:20,700 --> 00:16:26,520
we're using descriptors all of the time

00:16:23,390 --> 00:16:31,850
like descriptors are what makes Django

00:16:26,520 --> 00:16:34,740
ORM work so for example when we have a

00:16:31,850 --> 00:16:40,170
instance of the dog class and we access

00:16:34,740 --> 00:16:43,140
favorite toy we get a toy you know model

00:16:40,170 --> 00:16:45,660
instance and in order to get that you

00:16:43,140 --> 00:16:48,300
know Django can go behind the scenes and

00:16:45,660 --> 00:16:51,870
fetch that from the database instantiate

00:16:48,300 --> 00:16:56,100
it and return it but that's different

00:16:51,870 --> 00:16:59,339
than here when we accessed a favorite

00:16:56,100 --> 00:17:03,600
toy from the class and so how we get

00:16:59,339 --> 00:17:08,429
this difference in behavior is through

00:17:03,600 --> 00:17:10,800
this descriptor protocol and you know

00:17:08,429 --> 00:17:13,290
like descriptors are just everywhere in

00:17:10,800 --> 00:17:16,050
Python for example like this is how

00:17:13,290 --> 00:17:18,990
methods work in Python is if you have

00:17:16,050 --> 00:17:21,510
some function and you call double

00:17:18,990 --> 00:17:24,209
underscore get and pass in an object

00:17:21,510 --> 00:17:26,670
then what you get is a bound method so

00:17:24,209 --> 00:17:29,580
that's like if you notice you know

00:17:26,670 --> 00:17:31,380
accessing a method from the class you

00:17:29,580 --> 00:17:35,190
get a different type of thing when then

00:17:31,380 --> 00:17:40,290
when you access the that same attribute

00:17:35,190 --> 00:17:44,520
from an instance of that class okay so

00:17:40,290 --> 00:17:49,410
going back to prefetch related objects

00:17:44,520 --> 00:17:51,030
so now we have a prefetcher so that is

00:17:49,410 --> 00:17:54,270
one of the jobs of prefetch related

00:17:51,030 --> 00:17:59,820
objects is to find some object which

00:17:54,270 --> 00:18:03,870
implements get prefetch query set and

00:17:59,820 --> 00:18:07,500
prefetch related object calls a helper

00:18:03,870 --> 00:18:10,350
function called prefetch one level and

00:18:07,500 --> 00:18:13,650
this is really where all of sort of the

00:18:10,350 --> 00:18:18,320
work that we care about for the purposes

00:18:13,650 --> 00:18:23,010
of this talk is done and so this

00:18:18,320 --> 00:18:29,520
function looks basically has this

00:18:23,010 --> 00:18:32,370
outline so so what we're passed in is a

00:18:29,520 --> 00:18:35,370
list of instances so again this is in

00:18:32,370 --> 00:18:38,670
our example this would be a list of dog

00:18:35,370 --> 00:18:42,810
instances and then we get a prefetcher

00:18:38,670 --> 00:18:44,910
which is the thing that we just just

00:18:42,810 --> 00:18:48,090
talked about and so that implements this

00:18:44,910 --> 00:18:50,250
get prefetch query set nothing so the

00:18:48,090 --> 00:18:56,210
first thing it does is it calls that

00:18:50,250 --> 00:18:58,980
method on the prefetcher and so this is

00:18:56,210 --> 00:19:01,500
kind of the interface that get prefetch

00:18:58,980 --> 00:19:04,800
queries that has this is basically where

00:19:01,500 --> 00:19:09,270
all the sort of interesting stuff

00:19:04,800 --> 00:19:12,290
happens with respect to prefetching and

00:19:09,270 --> 00:19:15,870
so what get prefetch query set is

00:19:12,290 --> 00:19:18,590
supposed to return is a six tuple with

00:19:15,870 --> 00:19:22,940
these sort of six pieces of information

00:19:18,590 --> 00:19:27,270
and so sort of talk about what they are

00:19:22,940 --> 00:19:31,430
so the first the first thing in the

00:19:27,270 --> 00:19:35,160
tuple is basically an iterable of

00:19:31,430 --> 00:19:37,650
related objects so when we are doing dog

00:19:35,160 --> 00:19:39,000
objects top prefetch related favorite

00:19:37,650 --> 00:19:43,470
toy

00:19:39,000 --> 00:19:49,100
this rel qsr will be a query set of all

00:19:43,470 --> 00:19:52,550
of those favorite toys then the next to

00:19:49,100 --> 00:19:56,190
the next two things in the tuple are

00:19:52,550 --> 00:20:01,130
functions which take one argument and I

00:19:56,190 --> 00:20:03,780
like to think of these as taking

00:20:01,130 --> 00:20:06,840
basically returning something like I

00:20:03,780 --> 00:20:09,300
think of as like a join value and so

00:20:06,840 --> 00:20:11,820
they return some value which is used to

00:20:09,300 --> 00:20:14,460
associate the in

00:20:11,820 --> 00:20:16,800
stances which are say the list of dogs

00:20:14,460 --> 00:20:20,190
and the related objects which are the

00:20:16,800 --> 00:20:23,190
toys so the first one takes in one of

00:20:20,190 --> 00:20:27,600
the related objects a toy and returns

00:20:23,190 --> 00:20:29,940
the join value and so here our join

00:20:27,600 --> 00:20:34,920
value is going to be the primary key of

00:20:29,940 --> 00:20:39,330
the toy so given a toy we just returned

00:20:34,920 --> 00:20:42,150
its ID then the next one takes one of

00:20:39,330 --> 00:20:45,360
the instances so in this case a dog and

00:20:42,150 --> 00:20:51,030
returns the primary key of the favorite

00:20:45,360 --> 00:20:53,640
toy so these values using these values

00:20:51,030 --> 00:20:57,290
is how Jango is going to know oh I

00:20:53,640 --> 00:21:02,490
should associate this toy with this dog

00:20:57,290 --> 00:21:06,170
it's based on these like join values the

00:21:02,490 --> 00:21:10,710
next three things that are returned

00:21:06,170 --> 00:21:13,320
basically tell prefetch one level or the

00:21:10,710 --> 00:21:15,840
prefetch related subsystem where do I

00:21:13,320 --> 00:21:19,950
now that I know like how to associate

00:21:15,840 --> 00:21:25,100
say toy with a dog like where do I stick

00:21:19,950 --> 00:21:28,020
that data and so the first one is

00:21:25,100 --> 00:21:31,290
whether or not there is a single toy

00:21:28,020 --> 00:21:34,350
object associated with a dog and so in

00:21:31,290 --> 00:21:38,640
this case each dog has one favorite toy

00:21:34,350 --> 00:21:43,230
so single is true the next attribute is

00:21:38,640 --> 00:21:46,800
a cache name and so this is a name

00:21:43,230 --> 00:21:49,350
related to the prefetcher and we'll see

00:21:46,800 --> 00:21:51,660
sort of how this gets used when we take

00:21:49,350 --> 00:21:56,040
these values and store them on the

00:21:51,660 --> 00:22:00,050
instance and then finally there is a

00:21:56,040 --> 00:22:04,020
boolean called is descriptor and this

00:22:00,050 --> 00:22:07,830
applies in the case where a singl is

00:22:04,020 --> 00:22:10,070
true we will see how this gets used but

00:22:07,830 --> 00:22:13,500
it just changes the way the place that

00:22:10,070 --> 00:22:19,920
the related object is stored on the

00:22:13,500 --> 00:22:22,890
instance okay so this is sort of what

00:22:19,920 --> 00:22:25,830
get prefetch query set returns and this

00:22:22,890 --> 00:22:27,990
defines really the

00:22:25,830 --> 00:22:31,019
interesting behavior for prefetch

00:22:27,990 --> 00:22:32,880
related so we'll go through like later

00:22:31,019 --> 00:22:36,600
in the talk and see lots of other

00:22:32,880 --> 00:22:39,450
examples of you know this six tuples and

00:22:36,600 --> 00:22:42,809
how you can get different get different

00:22:39,450 --> 00:22:46,590
behavior in django by customizing the

00:22:42,809 --> 00:22:48,600
values returned there okay

00:22:46,590 --> 00:22:51,299
so we've called get prefetch query set

00:22:48,600 --> 00:22:53,549
we get this six tuple and then what

00:22:51,299 --> 00:22:55,019
prefetch one level is going to do it's

00:22:53,549 --> 00:22:57,149
going to go through all of the related

00:22:55,019 --> 00:23:00,779
objects and figure out which instance

00:22:57,149 --> 00:23:04,620
they're related to so it's going to take

00:23:00,779 --> 00:23:08,250
the so the very first thing we we do is

00:23:04,620 --> 00:23:10,260
we get all related objects which we just

00:23:08,250 --> 00:23:14,700
call list on the first thing that was

00:23:10,260 --> 00:23:18,360
returned from get prefetch get prefetch

00:23:14,700 --> 00:23:21,299
query set and and so basically this is

00:23:18,360 --> 00:23:26,460
the only thing that the prefetch

00:23:21,299 --> 00:23:29,940
one-level code does with this rel qsr

00:23:26,460 --> 00:23:32,700
variable and so it doesn't even have to

00:23:29,940 --> 00:23:34,470
be a query set it just has to be some

00:23:32,700 --> 00:23:40,230
iterable it

00:23:34,470 --> 00:23:42,330
Chango doesn't rely on you know specific

00:23:40,230 --> 00:23:45,600
properties of the thing that's returned

00:23:42,330 --> 00:23:49,710
there it really just calls lists on it

00:23:45,600 --> 00:23:52,289
and then goes from there so in our

00:23:49,710 --> 00:23:55,260
example this Relic us was going to be

00:23:52,289 --> 00:23:57,779
all of those favorite toys right we took

00:23:55,260 --> 00:23:59,820
toys and filter them such that their ID

00:23:57,779 --> 00:24:02,700
was in those lists of favorite toy ids

00:23:59,820 --> 00:24:03,929
that we collected so the next thing

00:24:02,700 --> 00:24:06,299
we're going to do we're going to define

00:24:03,929 --> 00:24:09,360
a cache dictionary and we're going to

00:24:06,299 --> 00:24:13,110
iterate over all of the related objects

00:24:09,360 --> 00:24:17,490
that we've gotten and we're gonna get

00:24:13,110 --> 00:24:20,669
this joined value so here remember this

00:24:17,490 --> 00:24:23,100
rel objeto was a function which took in

00:24:20,669 --> 00:24:25,380
a one of these related objects a toy and

00:24:23,100 --> 00:24:27,240
produce the join value and so in this

00:24:25,380 --> 00:24:30,990
particular case that was going to be the

00:24:27,240 --> 00:24:35,130
primary key for the toy and then once we

00:24:30,990 --> 00:24:37,600
have that we use that value as a key in

00:24:35,130 --> 00:24:40,540
this cache dictionary

00:24:37,600 --> 00:24:42,670
and the value associated with that key

00:24:40,540 --> 00:24:44,800
in the dictionary is going to be a list

00:24:42,670 --> 00:24:48,910
and it's going to be a list of all of

00:24:44,800 --> 00:24:54,030
the related objects so the toys that

00:24:48,910 --> 00:24:57,460
have that joined value and so because

00:24:54,030 --> 00:25:00,070
because in this instance the toy ID is a

00:24:57,460 --> 00:25:02,080
primary key you're at most going you're

00:25:00,070 --> 00:25:08,190
not going to have lists of say more than

00:25:02,080 --> 00:25:14,890
two more than two objects because only

00:25:08,190 --> 00:25:17,140
there's only one say toy per ID okay so

00:25:14,890 --> 00:25:20,440
we've gone through and we've build up

00:25:17,140 --> 00:25:23,320
this cache which Maps our join values to

00:25:20,440 --> 00:25:25,620
list of related objects and then the

00:25:23,320 --> 00:25:28,240
next thing that prefetch one-level does

00:25:25,620 --> 00:25:34,090
is it stores the objects on the

00:25:28,240 --> 00:25:35,950
instances so once we've fetched all the

00:25:34,090 --> 00:25:38,620
related objects like I said we need to

00:25:35,950 --> 00:25:41,320
store them somewhere so it iterates over

00:25:38,620 --> 00:25:45,130
all of our instances so these this is

00:25:41,320 --> 00:25:46,810
the list of dogs again right here you

00:25:45,130 --> 00:25:50,260
know we fetch that on our initial query

00:25:46,810 --> 00:25:54,570
and we have that and then here this

00:25:50,260 --> 00:25:58,780
instance adder is this function that we

00:25:54,570 --> 00:26:03,880
talked about earlier which takes a dog

00:25:58,780 --> 00:26:06,160
and produces the join value so I'm here

00:26:03,880 --> 00:26:11,020
like I said this is the primary key for

00:26:06,160 --> 00:26:14,080
the toy and what we do is we get this

00:26:11,020 --> 00:26:17,740
variable called vowels so we take our

00:26:14,080 --> 00:26:20,350
cash look up to see if the join value is

00:26:17,740 --> 00:26:23,530
in there if it is we returned that list

00:26:20,350 --> 00:26:27,070
of related objects if it's not then we

00:26:23,530 --> 00:26:31,140
get the empty list so now for every

00:26:27,070 --> 00:26:34,780
object we have a list of related objects

00:26:31,140 --> 00:26:41,140
so for every dog we have a list of

00:26:34,780 --> 00:26:43,570
favorite toys and here's where like I

00:26:41,140 --> 00:26:44,920
said those sort of final three values

00:26:43,570 --> 00:26:49,120
from that six tuples

00:26:44,920 --> 00:26:51,549
come into play and so if single is true

00:26:49,120 --> 00:26:55,690
was returned from get prefetch

00:26:51,549 --> 00:26:57,399
qui reset then we sort of fall into a

00:26:55,690 --> 00:27:01,570
conditional block of code that looks

00:26:57,399 --> 00:27:06,580
like this so we know there's only going

00:27:01,570 --> 00:27:11,440
to be at most one a related object so

00:27:06,580 --> 00:27:15,039
here we get that as a singular Val if

00:27:11,440 --> 00:27:18,369
there's no objects in that list we get

00:27:15,039 --> 00:27:21,789
none and so then we fall into three

00:27:18,369 --> 00:27:24,340
cases the first one is if in the when

00:27:21,789 --> 00:27:26,889
you specified the prefetch use specified

00:27:24,340 --> 00:27:29,619
a two adder that is an optional argument

00:27:26,889 --> 00:27:32,559
that you can specify and you say hey

00:27:29,619 --> 00:27:35,440
once you fetch this stick it in this

00:27:32,559 --> 00:27:39,340
attribute so we call set adder on our

00:27:35,440 --> 00:27:44,440
object and to the two adder and we get

00:27:39,340 --> 00:27:47,470
our vowel which is a toy otherwise if

00:27:44,440 --> 00:27:51,369
this descriptor boolean returned was

00:27:47,470 --> 00:27:53,859
true then you basically set the cache

00:27:51,369 --> 00:27:57,489
name attribute on the object to be this

00:27:53,859 --> 00:28:00,100
singular value finally if none of those

00:27:57,489 --> 00:28:04,269
are the case there's this fields cache

00:28:00,100 --> 00:28:06,809
dictionary which lives on the object and

00:28:04,269 --> 00:28:11,259
we put the value in that dictionary

00:28:06,809 --> 00:28:13,749
associated to the key cache name cool so

00:28:11,259 --> 00:28:16,149
this is what happens if you return

00:28:13,749 --> 00:28:19,779
single equals true you can control where

00:28:16,149 --> 00:28:24,369
prefetch related puts you're related

00:28:19,779 --> 00:28:26,649
object if single is false was returned

00:28:24,369 --> 00:28:29,259
from get prefetch query set then we fall

00:28:26,649 --> 00:28:31,899
under two cases again if you've

00:28:29,259 --> 00:28:34,600
specified a specific two adder when you

00:28:31,899 --> 00:28:37,690
specify the prefetch then you're going

00:28:34,600 --> 00:28:40,980
to set that attribute on the object to

00:28:37,690 --> 00:28:44,039
be that list of related objects

00:28:40,980 --> 00:28:47,259
otherwise if that's not the case then

00:28:44,039 --> 00:28:51,519
we'd have to do a little more work here

00:28:47,259 --> 00:28:54,909
but at the end of the day you can see on

00:28:51,519 --> 00:28:58,659
the final line you have a prefetched

00:28:54,909 --> 00:29:03,609
objects cache attribute on say our

00:28:58,659 --> 00:29:04,920
instance like a dog and in that you have

00:29:03,609 --> 00:29:07,670
a key as a cache name

00:29:04,920 --> 00:29:10,800
and you set that to be a query set and

00:29:07,670 --> 00:29:15,060
two lines above that query set you've

00:29:10,800 --> 00:29:17,520
set the result cache on which says hey

00:29:15,060 --> 00:29:22,040
I've already basically fetched that this

00:29:17,520 --> 00:29:22,040
data and this is what those values are

00:29:22,940 --> 00:29:31,080
cool so that was sort of a lot but if we

00:29:27,840 --> 00:29:34,890
go kind of over everything that was done

00:29:31,080 --> 00:29:37,950
in prefetch one level is we call get

00:29:34,890 --> 00:29:40,530
prefetch query set it got this big six

00:29:37,950 --> 00:29:44,280
tuple which defines what is going to do

00:29:40,530 --> 00:29:47,880
we we took that data and went through

00:29:44,280 --> 00:29:50,280
and associated all of the instances with

00:29:47,880 --> 00:29:52,380
their related objects and then finally

00:29:50,280 --> 00:29:54,510
we stored those related objects on the

00:29:52,380 --> 00:29:56,640
instances and how we did that depended

00:29:54,510 --> 00:30:02,970
on those values returned from get

00:29:56,640 --> 00:30:05,430
prefetch query set great so once those

00:30:02,970 --> 00:30:09,690
are there how do we make use of them how

00:30:05,430 --> 00:30:13,250
does Django make use of them and hmm and

00:30:09,690 --> 00:30:17,790
so this depends on which particular

00:30:13,250 --> 00:30:21,260
prefetcher used but in the case where we

00:30:17,790 --> 00:30:24,690
are we have this dog dot favorite toy

00:30:21,260 --> 00:30:27,840
this descriptor will call self dot field

00:30:24,690 --> 00:30:30,810
that get cached value and this looks in

00:30:27,840 --> 00:30:33,150
the fields cache dictionary to see

00:30:30,810 --> 00:30:36,450
whether or not the favorite toy has

00:30:33,150 --> 00:30:38,130
already been fetched so the code in this

00:30:36,450 --> 00:30:41,130
descriptor sort of knows where the

00:30:38,130 --> 00:30:44,480
prefetch related code is going to put

00:30:41,130 --> 00:30:44,480
the related object

00:30:44,570 --> 00:30:51,990
similarly managers on instances will

00:30:49,710 --> 00:30:55,650
check this prefetched objects cache

00:30:51,990 --> 00:30:57,230
within their get query set method so you

00:30:55,650 --> 00:31:01,740
know if you were to do something like

00:30:57,230 --> 00:31:04,200
toy dot dog set dot all right this is

00:31:01,740 --> 00:31:07,710
all of the dogs which have this

00:31:04,200 --> 00:31:11,400
particular toy as their favorite that

00:31:07,710 --> 00:31:14,970
will check on the toys prefetched

00:31:11,400 --> 00:31:17,190
objects cache to see if this query set

00:31:14,970 --> 00:31:18,620
that already has all the dogs there has

00:31:17,190 --> 00:31:24,280
been or

00:31:18,620 --> 00:31:27,980
fetched so that was kind of the main I

00:31:24,280 --> 00:31:30,670
know kind of landmarks in the in the

00:31:27,980 --> 00:31:35,270
prefetching process why do you specify

00:31:30,670 --> 00:31:37,910
the prefetch lookups those gets stored

00:31:35,270 --> 00:31:40,309
on the prefetch related lookups on the

00:31:37,910 --> 00:31:42,860
query set when it's evaluated it calls

00:31:40,309 --> 00:31:45,800
prefetch related objects this function

00:31:42,860 --> 00:31:47,809
goes through finds a prefetcher that's

00:31:45,800 --> 00:31:50,990
one of these things which defines get

00:31:47,809 --> 00:31:53,929
prefetch query set and then the prefetch

00:31:50,990 --> 00:31:56,210
one-level takes that data there and sort

00:31:53,929 --> 00:31:58,520
of joins the initial objects you have

00:31:56,210 --> 00:32:01,600
with the related objects that it just

00:31:58,520 --> 00:32:05,750
fetched combines those together and

00:32:01,600 --> 00:32:08,030
finishes its job and then when there's

00:32:05,750 --> 00:32:10,580
additional code let's say in these

00:32:08,030 --> 00:32:13,610
descriptors or these managers that know

00:32:10,580 --> 00:32:17,890
sort of the right places to check to to

00:32:13,610 --> 00:32:17,890
get access to these pre fetched values

00:32:17,950 --> 00:32:25,100
okay so that was a bit of a whirlwind

00:32:22,850 --> 00:32:27,620
tour but now I sort of want to talk

00:32:25,100 --> 00:32:30,470
about these sort of case studies and

00:32:27,620 --> 00:32:34,670
like how we can actually like make use

00:32:30,470 --> 00:32:36,340
of this information in our code so the

00:32:34,670 --> 00:32:39,350
very first one I want to talk about is

00:32:36,340 --> 00:32:42,200
like let's say suppose we store our user

00:32:39,350 --> 00:32:46,429
model in a different database than the

00:32:42,200 --> 00:32:50,179
dog bottle and so here we have in

00:32:46,429 --> 00:32:53,450
database one our Jango user model and

00:32:50,179 --> 00:32:58,250
over in database two we have our dog

00:32:53,450 --> 00:33:01,330
model and it has a user ID field which

00:32:58,250 --> 00:33:04,130
is a positive integer so we can't use a

00:33:01,330 --> 00:33:07,420
foreign key because you can't have

00:33:04,130 --> 00:33:13,670
foreign keys across databases Django

00:33:07,420 --> 00:33:15,380
like doesn't like that and so but we

00:33:13,670 --> 00:33:22,630
would still like to be able to use this

00:33:15,380 --> 00:33:27,679
in sort of a way that feels like it's

00:33:22,630 --> 00:33:29,179
actually a actually a foreign key so in

00:33:27,679 --> 00:33:32,240
particular we'd like to be able to do

00:33:29,179 --> 00:33:35,060
things like hey for all of the

00:33:32,240 --> 00:33:36,860
dogs and user dogs not all we'd like to

00:33:35,060 --> 00:33:41,420
print the dog and the dogs favorite toys

00:33:36,860 --> 00:33:43,820
name but because we want to be able to

00:33:41,420 --> 00:33:46,340
do things like that we also want to be

00:33:43,820 --> 00:33:48,620
able to be able to do things like user

00:33:46,340 --> 00:33:51,110
dot objects that prefetch related and we

00:33:48,620 --> 00:33:56,590
want to fetch all of the dogs and all of

00:33:51,110 --> 00:34:00,950
their favorite toys great so this is the

00:33:56,590 --> 00:34:03,760
this is sort of our scenario and so how

00:34:00,950 --> 00:34:06,260
do we do this there's a couple of steps

00:34:03,760 --> 00:34:09,530
the first thing we have to do is define

00:34:06,260 --> 00:34:11,210
manager which implements this get

00:34:09,530 --> 00:34:15,530
prefetch query set

00:34:11,210 --> 00:34:17,000
so this is our prefetcher and this is

00:34:15,530 --> 00:34:19,280
the thing you'll get when you access

00:34:17,000 --> 00:34:21,920
user dot dogs right you'll get one of

00:34:19,280 --> 00:34:24,410
these managers so that you can say dot

00:34:21,920 --> 00:34:26,930
counter dot all and do all that with it

00:34:24,410 --> 00:34:29,390
and sort of the two functions we'll be

00:34:26,930 --> 00:34:32,420
interested in are like I said get

00:34:29,390 --> 00:34:34,550
prefetch query set to define the

00:34:32,420 --> 00:34:37,370
prefetching behavior and then also get

00:34:34,550 --> 00:34:39,170
query set so that we know like okay once

00:34:37,370 --> 00:34:41,150
the prefetching is done how do we

00:34:39,170 --> 00:34:45,260
actually get that in use by the dogs

00:34:41,150 --> 00:34:49,100
manager the next piece we have sort of

00:34:45,260 --> 00:34:52,160
in this puzzle is a descriptor this like

00:34:49,100 --> 00:34:56,300
I said and implements this get double

00:34:52,160 --> 00:34:59,780
underscore get method and when it is

00:34:56,300 --> 00:35:02,420
accessed from a class so capital user

00:34:59,780 --> 00:35:06,290
dot dogs it will return the descriptor

00:35:02,420 --> 00:35:09,950
but if it's accessed from a say user

00:35:06,290 --> 00:35:12,110
instance like lower case user dot dot

00:35:09,950 --> 00:35:15,350
dogs it returns one of these dog

00:35:12,110 --> 00:35:19,100
managers and we'll pass in that instance

00:35:15,350 --> 00:35:22,100
so it knows which particular user you're

00:35:19,100 --> 00:35:24,740
talking about and then finally we set

00:35:22,100 --> 00:35:28,280
this dogs to be our dog's descriptor on

00:35:24,740 --> 00:35:31,310
the user so going back and filling in

00:35:28,280 --> 00:35:35,330
the missing pieces what we have to

00:35:31,310 --> 00:35:37,910
define this get prefetch query set so it

00:35:35,330 --> 00:35:41,030
takes in a list of instances in this

00:35:37,910 --> 00:35:45,050
case it will be a list of users an

00:35:41,030 --> 00:35:46,040
optional query set but the main thing we

00:35:45,050 --> 00:35:49,490
do is we go

00:35:46,040 --> 00:35:52,610
through all of the user IDs and collect

00:35:49,490 --> 00:35:55,690
them into a list and so here this list

00:35:52,610 --> 00:35:59,300
is owner IDs it's a list of integers and

00:35:55,690 --> 00:36:01,460
we return the six tuple and so the very

00:35:59,300 --> 00:36:04,580
first thing is going to be basically

00:36:01,460 --> 00:36:07,970
like dogged object stop filter owner ID

00:36:04,580 --> 00:36:10,280
is in this list of integers so we don't

00:36:07,970 --> 00:36:12,080
even need to know about like we don't

00:36:10,280 --> 00:36:14,870
have to have a foreign key there right

00:36:12,080 --> 00:36:18,940
this query executes on database - you're

00:36:14,870 --> 00:36:21,800
just getting all of the dogs that have

00:36:18,940 --> 00:36:24,710
their owner ID in this list of integers

00:36:21,800 --> 00:36:26,180
like Django can do that no problem and

00:36:24,710 --> 00:36:28,820
now we have to come up with the join

00:36:26,180 --> 00:36:32,600
values and we're going to basically join

00:36:28,820 --> 00:36:34,820
on the primary key for the user

00:36:32,600 --> 00:36:37,640
so when we get a related object like a

00:36:34,820 --> 00:36:41,090
dog we return the owner ID and we get a

00:36:37,640 --> 00:36:43,520
user we return the user ID a person can

00:36:41,090 --> 00:36:46,190
have multiple dogs so we'll return false

00:36:43,520 --> 00:36:50,570
for single we'll cash it under the dog's

00:36:46,190 --> 00:36:53,600
name and is descriptor doesn't really

00:36:50,570 --> 00:36:58,130
apply in the case when a single is false

00:36:53,600 --> 00:37:01,910
so we'll return false here and this

00:36:58,130 --> 00:37:03,650
basically is everything you kind of have

00:37:01,910 --> 00:37:05,870
to specify to the prefetch related

00:37:03,650 --> 00:37:09,950
system in order to get the things that

00:37:05,870 --> 00:37:12,680
we want to do to work and then finally

00:37:09,950 --> 00:37:15,950
we also need to implement this get query

00:37:12,680 --> 00:37:19,850
set method which and the first thing it

00:37:15,950 --> 00:37:23,210
tries to do is access the dogs key in

00:37:19,850 --> 00:37:27,050
the users prefetch really prefetch

00:37:23,210 --> 00:37:28,970
objects cache attribute so that and so

00:37:27,050 --> 00:37:31,910
when we perform the prefetching we'll

00:37:28,970 --> 00:37:36,350
get a list of dogs and the prefetch

00:37:31,910 --> 00:37:38,840
related system we'll put it in the for

00:37:36,350 --> 00:37:39,740
each user it'll put it in the dogs key

00:37:38,840 --> 00:37:42,770
and their prefetch

00:37:39,740 --> 00:37:45,410
objects cache attribute if it's not

00:37:42,770 --> 00:37:49,790
there then we sort of apply the default

00:37:45,410 --> 00:37:52,450
behavior of the manager and so now with

00:37:49,790 --> 00:37:55,820
those sort of things in place you can do

00:37:52,450 --> 00:37:58,400
things like this where this is only

00:37:55,820 --> 00:37:59,750
going to do three queries one to fetch

00:37:58,400 --> 00:38:02,060
the users one to

00:37:59,750 --> 00:38:05,840
those users dogs and then one to fetch

00:38:02,060 --> 00:38:11,570
those dogs favorite toys and so that's

00:38:05,840 --> 00:38:16,670
going to basically this looks exactly

00:38:11,570 --> 00:38:18,530
like it would if the dog objects and the

00:38:16,670 --> 00:38:22,280
user objects we're living in the same

00:38:18,530 --> 00:38:29,000
database when you add a foreign key for

00:38:22,280 --> 00:38:30,400
this particular pattern so the next sort

00:38:29,000 --> 00:38:33,830
of scenario I want to look at is that

00:38:30,400 --> 00:38:38,120
hey there's really nothing special about

00:38:33,830 --> 00:38:42,380
those integers we used as a join key in

00:38:38,120 --> 00:38:46,340
the previous example and so you can

00:38:42,380 --> 00:38:48,560
basically sort of join any two models as

00:38:46,340 --> 00:38:52,790
long as you can get values that are

00:38:48,560 --> 00:38:55,280
equal between them so specifically say

00:38:52,790 --> 00:38:58,040
suppose we're able to define a dog's

00:38:55,280 --> 00:39:00,620
classmates as all of the dogs that were

00:38:58,040 --> 00:39:04,280
born in the same year is that dog okay

00:39:00,620 --> 00:39:06,200
and so in our code like this maybe we

00:39:04,280 --> 00:39:08,930
want to iterate through all of the dog's

00:39:06,200 --> 00:39:14,270
classmates and print the classmates

00:39:08,930 --> 00:39:17,030
favorite toys name and and so here if

00:39:14,270 --> 00:39:21,020
you aren't able to do any prefetching

00:39:17,030 --> 00:39:23,180
you get an N plus 1 query problem so I'm

00:39:21,020 --> 00:39:26,330
going to sort of skip all of the part

00:39:23,180 --> 00:39:30,320
with the manager and descriptor before

00:39:26,330 --> 00:39:32,630
and just sort of go into the sort of

00:39:30,320 --> 00:39:35,810
main piece the get prefetch query set

00:39:32,630 --> 00:39:38,060
method and so how's this work so we get

00:39:35,810 --> 00:39:42,470
a list of dogs and then we collect all

00:39:38,060 --> 00:39:45,490
of the years of their birthdates so here

00:39:42,470 --> 00:39:50,090
years will be a list of integers and

00:39:45,490 --> 00:39:52,010
then we define the data so the first bit

00:39:50,090 --> 00:39:54,440
will be all of the dogs which have a

00:39:52,010 --> 00:39:57,530
birthdate in one of the years that we've

00:39:54,440 --> 00:40:00,020
collected and then we have two and how

00:39:57,530 --> 00:40:02,840
are we going to associate a dog with its

00:40:00,020 --> 00:40:07,880
classmates well we're just going to use

00:40:02,840 --> 00:40:11,390
the birth dates year and so here because

00:40:07,880 --> 00:40:13,370
the instance and the related objects are

00:40:11,390 --> 00:40:15,710
both dogs we have the same

00:40:13,370 --> 00:40:18,740
this ain't the same functions to get

00:40:15,710 --> 00:40:20,510
these joint values and again you can

00:40:18,740 --> 00:40:22,940
have multiple classmates we're gonna

00:40:20,510 --> 00:40:27,380
cash it and under the classmates name

00:40:22,940 --> 00:40:31,240
and is the descriptor doesn't apply so

00:40:27,380 --> 00:40:33,890
you know other than all of this sort of

00:40:31,240 --> 00:40:37,190
kind of boilerplate to get the managers

00:40:33,890 --> 00:40:39,710
in place this is really all you need to

00:40:37,190 --> 00:40:45,680
do to be able to prefetch all of the

00:40:39,710 --> 00:40:48,880
dogs that have the same birthday as your

00:40:45,680 --> 00:40:54,110
particular dog that you're interested in

00:40:48,880 --> 00:40:55,520
okay next one kind of want to look at so

00:40:54,110 --> 00:40:58,510
we recently had to add support for

00:40:55,520 --> 00:41:03,200
adding translations to fields in django

00:40:58,510 --> 00:41:05,450
django model fields rover kind of

00:41:03,200 --> 00:41:07,730
expanded into Europe and we needed to

00:41:05,450 --> 00:41:11,360
support a lot more languages and we have

00:41:07,730 --> 00:41:14,000
some models which store have fields

00:41:11,360 --> 00:41:16,040
which store English text and we want to

00:41:14,000 --> 00:41:19,160
be able to present that text to users

00:41:16,040 --> 00:41:22,490
and their preferred language so we went

00:41:19,160 --> 00:41:25,580
with a approach that uses one table to

00:41:22,490 --> 00:41:27,920
store all of them so the main things in

00:41:25,580 --> 00:41:29,900
this table are a generic foreign key to

00:41:27,920 --> 00:41:32,180
the object that we're translating a

00:41:29,900 --> 00:41:34,970
language code to specify which language

00:41:32,180 --> 00:41:39,230
it is a field name to specify which

00:41:34,970 --> 00:41:43,100
field on the content object that we're

00:41:39,230 --> 00:41:47,120
translating and then value which is the

00:41:43,100 --> 00:41:49,490
translation itself so one particular

00:41:47,120 --> 00:41:53,900
example of that in our system is a dog

00:41:49,490 --> 00:41:58,160
breed so a dog breed has a name and we

00:41:53,900 --> 00:42:01,130
want to be able to translate that and so

00:41:58,160 --> 00:42:03,230
we can we can use kind of the reverse

00:42:01,130 --> 00:42:06,440
relationship between the generic foreign

00:42:03,230 --> 00:42:08,420
key using generic relation and say we

00:42:06,440 --> 00:42:09,950
could prefetch all of those but it does

00:42:08,420 --> 00:42:12,140
have the disadvantage that your

00:42:09,950 --> 00:42:14,120
prefetching every language the

00:42:12,140 --> 00:42:16,670
translations for every language even

00:42:14,120 --> 00:42:18,830
though you may only need one so we'd

00:42:16,670 --> 00:42:21,020
like to be able to have something called

00:42:18,830 --> 00:42:22,940
like active translations where we will

00:42:21,020 --> 00:42:25,370
only want to prefetch the subset of

00:42:22,940 --> 00:42:27,210
translations which correspond to the

00:42:25,370 --> 00:42:31,080
active language

00:42:27,210 --> 00:42:33,990
in the sort of request-response cycle so

00:42:31,080 --> 00:42:36,450
if a user preferred languages French we

00:42:33,990 --> 00:42:39,480
only want to fetch the French

00:42:36,450 --> 00:42:43,650
translations additionally since a large

00:42:39,480 --> 00:42:46,440
percentage of our traffic is uses

00:42:43,650 --> 00:42:48,990
English as a primary language we don't

00:42:46,440 --> 00:42:52,380
want to say necessarily take this

00:42:48,990 --> 00:42:53,910
additional query overhead if if we're

00:42:52,380 --> 00:42:55,740
not actually going to use any of the

00:42:53,910 --> 00:42:59,849
translations we don't want you want to

00:42:55,740 --> 00:43:04,800
do those queries cool so how do we how

00:42:59,849 --> 00:43:07,170
do we get prefetch related to do this so

00:43:04,800 --> 00:43:09,359
in our sort of the relevant get prefetch

00:43:07,170 --> 00:43:11,520
query set method we do something like

00:43:09,359 --> 00:43:14,369
check if the active language is equal to

00:43:11,520 --> 00:43:16,770
the default language and that's what

00:43:14,369 --> 00:43:20,369
we'll assume that the the language that

00:43:16,770 --> 00:43:23,790
the the values in the table are stored

00:43:20,369 --> 00:43:26,250
in and if you're equal to that then

00:43:23,790 --> 00:43:28,020
we're just gonna bail out early and

00:43:26,250 --> 00:43:30,270
we're going to return an empty list here

00:43:28,020 --> 00:43:33,089
and it doesn't matter really what we

00:43:30,270 --> 00:43:36,210
return for our join values because

00:43:33,089 --> 00:43:38,730
there's nothing to join and in this case

00:43:36,210 --> 00:43:40,710
we don't we can prefetch the active

00:43:38,730 --> 00:43:42,450
translations but Django won't do any

00:43:40,710 --> 00:43:45,630
database queries we don't have to go to

00:43:42,450 --> 00:43:48,869
the database and come back and then

00:43:45,630 --> 00:43:51,359
additionally for that sort of manager we

00:43:48,869 --> 00:43:54,060
get the query set and then we just have

00:43:51,359 --> 00:43:58,080
to take that query set and filter it by

00:43:54,060 --> 00:44:01,290
the active language during the request

00:43:58,080 --> 00:44:07,430
response cycle so we're able to sort of

00:44:01,290 --> 00:44:10,290
transparently get get field translations

00:44:07,430 --> 00:44:14,310
without having to do a whole lot of

00:44:10,290 --> 00:44:17,640
extra work and extra queries and the

00:44:14,310 --> 00:44:20,700
final one I want to talk about is mainly

00:44:17,640 --> 00:44:22,589
more to showcase kind of the flexibility

00:44:20,700 --> 00:44:25,470
within the prefetch related system as

00:44:22,589 --> 00:44:28,680
opposed to like this being a pattern

00:44:25,470 --> 00:44:31,200
that I would recommend in your code but

00:44:28,680 --> 00:44:34,700
let's say there is a third party dog

00:44:31,200 --> 00:44:37,920
date service which provides a HTTP API

00:44:34,700 --> 00:44:40,110
that lets you fetch possible play dates

00:44:37,920 --> 00:44:43,230
for your dog so

00:44:40,110 --> 00:44:45,720
request looks like this we make get

00:44:43,230 --> 00:44:49,470
requests and we pass our dog ID as a

00:44:45,720 --> 00:44:53,550
query parameter and we get back a list

00:44:49,470 --> 00:44:56,760
of dictionaries basically and we have

00:44:53,550 --> 00:45:00,960
the dog ID is a key in there and then

00:44:56,760 --> 00:45:04,560
playdates which is our list of URLs and

00:45:00,960 --> 00:45:08,040
their HTTP API also happens to support

00:45:04,560 --> 00:45:10,140
multiple dogs per call so if you pass

00:45:08,040 --> 00:45:13,500
multiple dog ID so you get multiple

00:45:10,140 --> 00:45:16,830
dictionaries back with their IDs and

00:45:13,500 --> 00:45:19,020
their play dates and so suppose we have

00:45:16,830 --> 00:45:23,100
code which looks like this in our dog

00:45:19,020 --> 00:45:27,210
model we have a dog dates external ID so

00:45:23,100 --> 00:45:30,120
this is the four dog in our system what

00:45:27,210 --> 00:45:33,330
is the ID in their system and then we

00:45:30,120 --> 00:45:35,610
have a play date available play dates

00:45:33,330 --> 00:45:37,440
property which when you access it it

00:45:35,610 --> 00:45:41,100
goes through makes a get request to this

00:45:37,440 --> 00:45:45,960
URL and then you know and returns

00:45:41,100 --> 00:45:49,560
basically the play dates field from that

00:45:45,960 --> 00:45:52,050
response and so and so now you have

00:45:49,560 --> 00:45:55,460
something like an M plus 1 like request

00:45:52,050 --> 00:45:58,650
problems so you know you're not doing

00:45:55,460 --> 00:46:00,750
queries to a database you're making HTTP

00:45:58,650 --> 00:46:03,630
requests and so if you wanted to go

00:46:00,750 --> 00:46:05,730
through all of the users dogs and print

00:46:03,630 --> 00:46:10,860
the available play dates then you get

00:46:05,730 --> 00:46:12,690
one HTTP call per dog so hmm

00:46:10,860 --> 00:46:16,320
this looks like something that we can

00:46:12,690 --> 00:46:18,150
solve with prefetch related and so we

00:46:16,320 --> 00:46:21,450
can actually do that so in there get

00:46:18,150 --> 00:46:24,480
prefetch query set here we have we get

00:46:21,450 --> 00:46:26,730
passed in a list of dog instances and so

00:46:24,480 --> 00:46:31,980
we can build up one of these URLs that

00:46:26,730 --> 00:46:35,660
has all of the that has all of the dog

00:46:31,980 --> 00:46:38,700
IDs as query parameters and then here in

00:46:35,660 --> 00:46:43,080
we returned well the first thing we

00:46:38,700 --> 00:46:44,790
return is we make a HTTP call get the

00:46:43,080 --> 00:46:46,890
JSON response that's a list of

00:46:44,790 --> 00:46:48,750
dictionaries and now we have to find

00:46:46,890 --> 00:46:51,990
some way to associate that list of

00:46:48,750 --> 00:46:54,000
dictionaries with the dogs and so we'll

00:46:51,990 --> 00:46:57,540
use that dog ID data in there

00:46:54,000 --> 00:47:00,089
and so so the first one takes one of

00:46:57,540 --> 00:47:01,980
these dictionaries gets the dog ID turns

00:47:00,089 --> 00:47:05,609
it into an integer and the second one

00:47:01,980 --> 00:47:08,730
takes one of our dogs and use returns

00:47:05,609 --> 00:47:11,010
the dog dates external ID and we know

00:47:08,730 --> 00:47:14,790
that there's exactly one of these

00:47:11,010 --> 00:47:19,020
dictionaries per dog so a single is true

00:47:14,790 --> 00:47:22,790
we'll store it on a in say underscore

00:47:19,020 --> 00:47:25,290
available play dates and now you can do

00:47:22,790 --> 00:47:27,630
something like this where you do dog dot

00:47:25,290 --> 00:47:29,280
objects up prefetch related available

00:47:27,630 --> 00:47:32,040
play dates and behind the scenes that

00:47:29,280 --> 00:47:35,579
will make a batch request to this API

00:47:32,040 --> 00:47:39,030
and then if I and then you no longer

00:47:35,579 --> 00:47:41,609
have the M plus one problem that you

00:47:39,030 --> 00:47:45,540
would have if you didn't do something

00:47:41,609 --> 00:47:48,210
like this so that was mostly what I

00:47:45,540 --> 00:47:50,760
wanted to go over today this week I'm

00:47:48,210 --> 00:47:53,270
going to be working on getting some of

00:47:50,760 --> 00:47:57,630
this boilerplate code that you need to

00:47:53,270 --> 00:48:00,270
write in order to get your own sort of

00:47:57,630 --> 00:48:03,510
custom pre fetchers into a third-party

00:48:00,270 --> 00:48:05,550
package called Jango prefetch utils so

00:48:03,510 --> 00:48:09,270
I'll be working on that this week and at

00:48:05,550 --> 00:48:12,569
the sprints and I'll be around if you

00:48:09,270 --> 00:48:15,089
are interested in things related to data

00:48:12,569 --> 00:48:20,579
fetching or prefetch related anything

00:48:15,089 --> 00:48:22,960
like that I'm happy to talk on that so

00:48:20,579 --> 00:48:27,080
thank you

00:48:22,960 --> 00:48:33,840
[Applause]

00:48:27,080 --> 00:48:35,900
[Music]

00:48:33,840 --> 00:48:35,900

YouTube URL: https://www.youtube.com/watch?v=QYDixnGetTI


