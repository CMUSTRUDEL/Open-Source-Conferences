Title: DjangoCon 2019 - Awesome Automated APIs with Automagic REST by Timothy Allen
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Awesome Automated APIs with Automagic REST by Timothy Allen

WRDS at The Wharton School runs an API service with over 60,000 individual endpoints, each with different permissions. See how we do it in an automated fashion with Django! Some of the solutions are elegant, some less so, but it works. Much of it is open-sourced, and we're looking to improve them!

This talk was presented at: https://2019.djangocon.us/talks/awesome-automated-apis-with-automagic/

LINKS:
Follow Timothy Allen ğŸ‘‡
On Twitter: https://twitter.com/FlipperPA
Official homepage: https://PyPhilly.org

Follow DjangCon US ğŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ğŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,380 --> 00:00:19,160
yeah we'll see how we do on time thanks

00:00:16,940 --> 00:00:21,710
everybody for coming out this is awesome

00:00:19,160 --> 00:00:23,869
automated api's with automatic rest good

00:00:21,710 --> 00:00:26,300
decisions bad decisions and pushing the

00:00:23,869 --> 00:00:28,580
limits of Django and thanks to the

00:00:26,300 --> 00:00:31,550
practical dev for some of these fun fake

00:00:28,580 --> 00:00:33,680
covers I've included two Bartek for a

00:00:31,550 --> 00:00:35,270
couple photos from past Django cons that

00:00:33,680 --> 00:00:37,309
are in here Bartek is our fantastic

00:00:35,270 --> 00:00:40,340
photographer glad to see him back again

00:00:37,309 --> 00:00:42,800
and to my team at words Wharton research

00:00:40,340 --> 00:00:45,890
data services this was not a one-person

00:00:42,800 --> 00:00:47,479
project obviously so my colleagues are

00:00:45,890 --> 00:00:50,600
some of my favorite people in the world

00:00:47,479 --> 00:00:53,000
and we're very responsible for a lot of

00:00:50,600 --> 00:00:55,940
the work you're about to see so before

00:00:53,000 --> 00:00:57,379
we dive in what is Otto magic rest it's

00:00:55,940 --> 00:00:59,089
basically something we've built that

00:00:57,379 --> 00:01:01,549
lets you automatically build a Django

00:00:59,089 --> 00:01:03,260
rest framework API on top of an existing

00:01:01,549 --> 00:01:05,990
database so if you have a legacy

00:01:03,260 --> 00:01:08,479
database or let's say you download a

00:01:05,990 --> 00:01:11,330
couple hundred tables of baseball data

00:01:08,479 --> 00:01:13,700
going back to the 1880s automatic rest

00:01:11,330 --> 00:01:15,740
we'll build an API on top of that so

00:01:13,700 --> 00:01:17,780
your end users can look at the data

00:01:15,740 --> 00:01:19,189
without needing a login or an admin

00:01:17,780 --> 00:01:20,960
interface although you can apply any

00:01:19,189 --> 00:01:23,570
permissions you want through Django rest

00:01:20,960 --> 00:01:25,850
framework slice and dice the results

00:01:23,570 --> 00:01:28,310
export them to excel without you really

00:01:25,850 --> 00:01:30,380
having to do any hand-holding and while

00:01:28,310 --> 00:01:32,570
this might not be your exact use case

00:01:30,380 --> 00:01:35,299
that you need today or tomorrow some of

00:01:32,570 --> 00:01:38,630
the boundaries we pushed could prove

00:01:35,299 --> 00:01:41,060
useful in many other areas so without

00:01:38,630 --> 00:01:43,759
further ado how do you oh I'm Tim my

00:01:41,060 --> 00:01:45,710
pronouns are he/him I'm an IT director

00:01:43,759 --> 00:01:48,109
over at Wharton research data services

00:01:45,710 --> 00:01:50,749
or words as we call it at the Wharton

00:01:48,109 --> 00:01:52,310
School we hosted Django Khan in 2016 it

00:01:50,749 --> 00:01:54,020
was awesome

00:01:52,310 --> 00:01:57,799
you can find me I'm flipper PA pretty

00:01:54,020 --> 00:01:59,840
much everywhere and aside from my

00:01:57,799 --> 00:02:02,390
full-time job I helped organize the

00:01:59,840 --> 00:02:04,039
Philly Python users group various

00:02:02,390 --> 00:02:06,049
community tech events like BarCamp

00:02:04,039 --> 00:02:08,660
Philly I was a Django Con organizer for

00:02:06,049 --> 00:02:10,789
a couple years I'm a Python ISA and

00:02:08,660 --> 00:02:13,550
Django not in both the PSF and DSM

00:02:10,789 --> 00:02:16,940
member I'm a fun-loving geek a hockey

00:02:13,550 --> 00:02:20,000
fan go flyers guitarist and owned by a

00:02:16,940 --> 00:02:22,129
cat I also happen to really like ice

00:02:20,000 --> 00:02:24,530
cream so I've been at worden research

00:02:22,129 --> 00:02:25,640
data services for about 10 years

00:02:24,530 --> 00:02:27,260
if you want to hear more about the ice

00:02:25,640 --> 00:02:28,970
cream comment my good friend and

00:02:27,260 --> 00:02:33,290
colleague Ryan Sullivan who is speaking

00:02:28,970 --> 00:02:35,180
over there right now in the other room

00:02:33,290 --> 00:02:37,970
has a really good story about my ice

00:02:35,180 --> 00:02:39,410
cream intake at Django Con 2017 in

00:02:37,970 --> 00:02:41,810
Washington it's a it's a pretty

00:02:39,410 --> 00:02:43,520
frightening story so if you get a chance

00:02:41,810 --> 00:02:45,950
to talk to him about that in the hallway

00:02:43,520 --> 00:02:47,569
so as Don mentioned and I mean getting

00:02:45,950 --> 00:02:49,370
introduced by a friend like Don is just

00:02:47,569 --> 00:02:51,800
fantastic and part of what Django con is

00:02:49,370 --> 00:02:53,239
all about but if we have time at the end

00:02:51,800 --> 00:02:56,030
for questions I'll be happy to take any

00:02:53,239 --> 00:02:59,750
that you might have so I want to start

00:02:56,030 --> 00:03:01,340
off by saying thank you I want to give

00:02:59,750 --> 00:03:02,900
thanks to the organizers I know from

00:03:01,340 --> 00:03:05,380
personal experience that putting on

00:03:02,900 --> 00:03:08,030
Django con us is a mammoth effort and

00:03:05,380 --> 00:03:10,790
and you all do it with love style and

00:03:08,030 --> 00:03:12,440
class so giving this talk will really be

00:03:10,790 --> 00:03:14,330
a highlight of my year I really look

00:03:12,440 --> 00:03:18,140
forward to django con every single year

00:03:14,330 --> 00:03:19,760
and special thanks to heat's Kenneth and

00:03:18,140 --> 00:03:21,650
Lacey who all helped out with organizing

00:03:19,760 --> 00:03:23,120
even though they weren't able to attend

00:03:21,650 --> 00:03:25,280
this year that's how much people love

00:03:23,120 --> 00:03:27,170
this conference they work on it even

00:03:25,280 --> 00:03:29,299
when they can't make it and we really

00:03:27,170 --> 00:03:31,100
miss y'all I'd also like to thank the

00:03:29,299 --> 00:03:32,989
Django and Python communities including

00:03:31,100 --> 00:03:35,269
the communities within communities like

00:03:32,989 --> 00:03:36,680
wagtail Django rest framework and

00:03:35,269 --> 00:03:40,010
regional communities like the Philly

00:03:36,680 --> 00:03:41,690
Python users group I'm also pretty open

00:03:40,010 --> 00:03:44,269
that I'm in recovery I've talked about

00:03:41,690 --> 00:03:46,040
this before I started using Python and

00:03:44,269 --> 00:03:48,620
Django right around the time I got clean

00:03:46,040 --> 00:03:50,360
and sober and I can't thank everyone

00:03:48,620 --> 00:03:52,850
enough for welcoming me with open arms

00:03:50,360 --> 00:03:55,370
and in many ways helping give me a new

00:03:52,850 --> 00:03:58,310
purpose it's a testament to the quality

00:03:55,370 --> 00:04:00,200
of this community but most of all thank

00:03:58,310 --> 00:04:02,030
you all for being here it wouldn't be a

00:04:00,200 --> 00:04:03,859
django con without the people y'all can

00:04:02,030 --> 00:04:06,049
have a conference without me but I can't

00:04:03,859 --> 00:04:08,540
have a conference without you I attended

00:04:06,049 --> 00:04:10,880
my first django con us in 2015 and I've

00:04:08,540 --> 00:04:12,739
made some amazing amazing friends over

00:04:10,880 --> 00:04:14,840
the years not just people I go to detect

00:04:12,739 --> 00:04:17,419
advice for tech advice people I go to

00:04:14,840 --> 00:04:18,829
for life advice so if you're new I want

00:04:17,419 --> 00:04:20,870
you to know that you can do that too

00:04:18,829 --> 00:04:22,370
within just a couple years or even a

00:04:20,870 --> 00:04:25,660
couple days here because it really is a

00:04:22,370 --> 00:04:27,979
great community so without further ado

00:04:25,660 --> 00:04:29,960
let's go into a brief history of wort

00:04:27,979 --> 00:04:31,940
and research data services or words as

00:04:29,960 --> 00:04:33,380
we call it around the office it's a

00:04:31,940 --> 00:04:35,900
single source for leading global

00:04:33,380 --> 00:04:38,070
research databases it was founded in

00:04:35,900 --> 00:04:41,070
1992 for work in fact

00:04:38,070 --> 00:04:43,080
and initially provided it was initially

00:04:41,070 --> 00:04:45,930
provided for SAS the statistical

00:04:43,080 --> 00:04:48,510
analysis software with standard & poor's

00:04:45,930 --> 00:04:50,880
and crisp data the Center for research

00:04:48,510 --> 00:04:54,830
and security prices our first academic

00:04:50,880 --> 00:04:57,330
client was Stanford University in 1997

00:04:54,830 --> 00:04:59,310
it sort of happened as an accident when

00:04:57,330 --> 00:05:00,690
a Wharton faculty member left and went

00:04:59,310 --> 00:05:02,310
to Stanford and found out they were

00:05:00,690 --> 00:05:04,890
having a lot harder time doing their

00:05:02,310 --> 00:05:06,510
research our first governmental client

00:05:04,890 --> 00:05:09,510
was the Federal Reserve Bank of New York

00:05:06,510 --> 00:05:12,450
in 2003 and our first corporate client

00:05:09,510 --> 00:05:15,390
was compass Lexecon in 2011 so it's

00:05:12,450 --> 00:05:17,370
multidisciplinary data accounting

00:05:15,390 --> 00:05:19,560
banking economics finance insurance

00:05:17,370 --> 00:05:21,660
marketing statistics health care

00:05:19,560 --> 00:05:25,590
we specialize in entity management and

00:05:21,660 --> 00:05:27,420
data linking it's available too it's

00:05:25,590 --> 00:05:29,700
available as a subscription service and

00:05:27,420 --> 00:05:32,850
you know when we first supported only

00:05:29,700 --> 00:05:36,000
the SAS only SAS was really supported as

00:05:32,850 --> 00:05:38,220
both a language and a data format a few

00:05:36,000 --> 00:05:40,530
brave souls without any kind of help or

00:05:38,220 --> 00:05:44,130
documentation Dovan to C and Fortran for

00:05:40,530 --> 00:05:46,830
looking at the data we provide but if we

00:05:44,130 --> 00:05:48,090
fast forward to today we're still a

00:05:46,830 --> 00:05:51,150
single source for leading global

00:05:48,090 --> 00:05:52,950
research databases but rope tome is 500

00:05:51,150 --> 00:05:54,240
institutions who use our product and

00:05:52,950 --> 00:05:55,950
fifty percent of that growth has been

00:05:54,240 --> 00:05:58,260
international over the past six years

00:05:55,950 --> 00:05:59,880
and you've probably heard of some of

00:05:58,260 --> 00:06:01,950
these fly-by-night schools that

00:05:59,880 --> 00:06:04,620
subscribe to our product Harvard

00:06:01,950 --> 00:06:08,460
Stanford University of Chicago Booth you

00:06:04,620 --> 00:06:12,150
know the non Wharton ones but when I

00:06:08,460 --> 00:06:16,110
started everything ran on a single Sun e

00:06:12,150 --> 00:06:17,040
20 K and we maxed out the RAM CPU and

00:06:16,110 --> 00:06:19,620
were pegged at a hundred percent

00:06:17,040 --> 00:06:21,360
capacity on that but since then we've

00:06:19,620 --> 00:06:23,460
switched to a sort of a sea of white

00:06:21,360 --> 00:06:25,710
Linux boxes backed by net app and this

00:06:23,460 --> 00:06:29,340
has allowed us to grow our product for

00:06:25,710 --> 00:06:31,080
the 63,000 plus active users we have and

00:06:29,340 --> 00:06:35,040
all of those users have accessed through

00:06:31,080 --> 00:06:36,990
our website through SSH and also through

00:06:35,040 --> 00:06:40,110
my remote connects and direct connecting

00:06:36,990 --> 00:06:43,290
to Postgres so yes we are quite insane

00:06:40,110 --> 00:06:47,910
we allow 63 thousand users SSH access to

00:06:43,290 --> 00:06:49,800
our cloud through SSH we support SAS our

00:06:47,910 --> 00:06:51,280
Python and more locally on our cloud

00:06:49,800 --> 00:06:54,310
that people can use

00:06:51,280 --> 00:06:57,610
and we have about 400 terabytes of data

00:06:54,310 --> 00:06:59,080
raw and about 3 petabytes of a total

00:06:57,610 --> 00:07:00,910
storage footprint across our data

00:06:59,080 --> 00:07:04,750
centers so we're working at a pretty

00:07:00,910 --> 00:07:07,810
large scale of data and trying to merge

00:07:04,750 --> 00:07:11,020
Django into this mix has has flexed

00:07:07,810 --> 00:07:12,610
Django's muscles pretty nicely we're

00:07:11,020 --> 00:07:13,990
also continuing our expansion beyond

00:07:12,610 --> 00:07:15,820
financial data well that's been our

00:07:13,990 --> 00:07:17,470
wheelhouse for many years we are

00:07:15,820 --> 00:07:20,410
starting to get into more healthcare

00:07:17,470 --> 00:07:22,690
data and things of that nature we use

00:07:20,410 --> 00:07:25,060
Sun Grid Engine and LDAP to support our

00:07:22,690 --> 00:07:28,710
horizontal scalability across all these

00:07:25,060 --> 00:07:32,080
technologies and and our storage and

00:07:28,710 --> 00:07:33,700
permissions in access control is really

00:07:32,080 --> 00:07:36,250
our biggest concern because each of our

00:07:33,700 --> 00:07:38,740
500 subscribers have a different set of

00:07:36,250 --> 00:07:41,050
the over 300 data products we provide so

00:07:38,740 --> 00:07:43,600
it's all a Lockhart and we have to make

00:07:41,050 --> 00:07:45,310
sure that these institutions only have

00:07:43,600 --> 00:07:46,690
access to the data that they have paid

00:07:45,310 --> 00:07:48,190
the data vendors for because our

00:07:46,690 --> 00:07:51,880
relationships with the data vendors are

00:07:48,190 --> 00:07:53,830
very important to what we do over the

00:07:51,880 --> 00:07:56,020
years having this size of data has

00:07:53,830 --> 00:07:59,470
caused us to make some very dubious data

00:07:56,020 --> 00:08:01,120
base decisions and a little bit of a

00:07:59,470 --> 00:08:03,910
spoiler alert' Postgres has made our

00:08:01,120 --> 00:08:06,130
lives a lot better all of our research

00:08:03,910 --> 00:08:09,130
data as I mentioned was stored in SAS in

00:08:06,130 --> 00:08:13,570
a very arcane format called SAS 7b dat

00:08:09,130 --> 00:08:15,640
we had MySQL backing our website we had

00:08:13,570 --> 00:08:17,740
sequel server also backing our website

00:08:15,640 --> 00:08:19,330
as we transferred from MySQL to sequel

00:08:17,740 --> 00:08:22,930
server but never completely got rid of

00:08:19,330 --> 00:08:24,729
MySQL we had a research data except for

00:08:22,930 --> 00:08:29,200
our New York Stock Exchange trades in

00:08:24,729 --> 00:08:31,990
quotes database all in Oracle and then

00:08:29,200 --> 00:08:33,640
permissions became an ongoing problem no

00:08:31,990 --> 00:08:37,050
matter what we did so we couldn't give

00:08:33,640 --> 00:08:39,310
our end users access to Oracle directly

00:08:37,050 --> 00:08:43,630
because we couldn't get the permissions

00:08:39,310 --> 00:08:45,610
applied properly throughout it so on the

00:08:43,630 --> 00:08:48,550
old Sun e 20 K I mentioned we had all

00:08:45,610 --> 00:08:52,210
the research data in that SAS format and

00:08:48,550 --> 00:08:54,520
trying to get it to Postgres was quite a

00:08:52,210 --> 00:08:58,060
bit of a challenge that has taken a

00:08:54,520 --> 00:08:59,920
couple of years to get done the attempt

00:08:58,060 --> 00:09:01,690
to store the research data in Oracle was

00:08:59,920 --> 00:09:03,280
sort of a partial success but it only

00:09:01,690 --> 00:09:04,780
really worked we could only use it from

00:09:03,280 --> 00:09:07,360
the web because we couldn't let our

00:09:04,780 --> 00:09:09,100
users access it and again without the

00:09:07,360 --> 00:09:12,160
New York Stock Exchange trades in quotes

00:09:09,100 --> 00:09:13,570
database it wasn't that much use the New

00:09:12,160 --> 00:09:15,670
York Stock Exchange trades in quotes

00:09:13,570 --> 00:09:17,290
database makes up eighty percent of our

00:09:15,670 --> 00:09:21,370
total storage footprint I mentioned

00:09:17,290 --> 00:09:23,800
earlier it is uh it's mammoth it's every

00:09:21,370 --> 00:09:25,510
bid trade in quote that happens on the

00:09:23,800 --> 00:09:27,220
New York Stock Exchange since nineteen

00:09:25,510 --> 00:09:29,800
ninety three so you can imagine how much

00:09:27,220 --> 00:09:31,780
data that is so I'm not saying any of

00:09:29,800 --> 00:09:33,640
this to slag any of the other databases

00:09:31,780 --> 00:09:35,590
that I've mentioned they just weren't

00:09:33,640 --> 00:09:37,900
the right choice for our usage profile

00:09:35,590 --> 00:09:40,150
I've used all of these other databases

00:09:37,900 --> 00:09:42,190
with great success in other situations

00:09:40,150 --> 00:09:43,930
but when it came down to the permissions

00:09:42,190 --> 00:09:46,030
Microsoft wanted us to use Active

00:09:43,930 --> 00:09:48,460
Directory Oracle wanted us to use their

00:09:46,030 --> 00:09:50,230
solution oh ID and all promise they

00:09:48,460 --> 00:09:53,440
could get it working with our open LDAP

00:09:50,230 --> 00:09:57,850
but it never quite did so when we

00:09:53,440 --> 00:09:59,530
entered Postgres there was apprehension

00:09:57,850 --> 00:10:02,980
about yet another database and rightly

00:09:59,530 --> 00:10:04,390
so so the head of our division was a

00:10:02,980 --> 00:10:08,260
little bit skeptical because we already

00:10:04,390 --> 00:10:11,140
had data in SAS MySQL Oracle sequel

00:10:08,260 --> 00:10:13,030
server and B DB if you include LDAP so

00:10:11,140 --> 00:10:14,530
we're already five databases deep and

00:10:13,030 --> 00:10:17,410
we're talking about bringing Postgres

00:10:14,530 --> 00:10:20,050
named as a savior this is a opera he has

00:10:17,410 --> 00:10:22,420
heard us sing before so I do not blame

00:10:20,050 --> 00:10:23,530
them one bit for his skepticism so we

00:10:22,420 --> 00:10:25,240
made a promise to him that we'd

00:10:23,530 --> 00:10:27,460
eliminate at least one of the others in

00:10:25,240 --> 00:10:30,280
six months or we would move on from our

00:10:27,460 --> 00:10:34,150
promise of Postgres and we managed to

00:10:30,280 --> 00:10:37,270
replace both Oracle and MySQL within six

00:10:34,150 --> 00:10:39,820
months so the the the carrot that was

00:10:37,270 --> 00:10:41,080
provided of Postgres and the stick of

00:10:39,820 --> 00:10:43,390
having to get off the other database

00:10:41,080 --> 00:10:45,370
worked pretty effectively for us so the

00:10:43,390 --> 00:10:48,370
New York Stock Exchange data was also

00:10:45,370 --> 00:10:49,780
successfully loaded into Postgres with a

00:10:48,370 --> 00:10:52,260
little bit of help from

00:10:49,780 --> 00:10:54,580
siteÃ­s data's columnar store extension

00:10:52,260 --> 00:10:56,470
which allowed us to do it and also

00:10:54,580 --> 00:10:58,420
compress the data which let us keep it

00:10:56,470 --> 00:11:00,850
down to about a hundred terabytes total

00:10:58,420 --> 00:11:03,190
rather than the four hundred tera

00:11:00,850 --> 00:11:07,210
footprint we saw on Raw desk or SAS data

00:11:03,190 --> 00:11:09,130
so good by Oracle we are also in the

00:11:07,210 --> 00:11:11,920
process of career still in the process

00:11:09,130 --> 00:11:15,670
of converting our main django backed

00:11:11,920 --> 00:11:17,320
site to Postgres from a ColdFusion and

00:11:15,670 --> 00:11:18,649
sequel server site so we're continuing

00:11:17,320 --> 00:11:22,220
to reduce this database

00:11:18,649 --> 00:11:24,019
footprint and get everything around

00:11:22,220 --> 00:11:27,769
Postgres which has been working out very

00:11:24,019 --> 00:11:29,930
well for us so all the research data was

00:11:27,769 --> 00:11:33,050
successfully loaded I've talked about

00:11:29,930 --> 00:11:35,029
Pez Prez backing Jango and that we're

00:11:33,050 --> 00:11:37,999
now using Django and wagtail over cold

00:11:35,029 --> 00:11:39,740
fusion and wordpress postcards also

00:11:37,999 --> 00:11:41,749
managed to integrate with our open LDAP

00:11:39,740 --> 00:11:44,300
solution and we've been able to apply

00:11:41,749 --> 00:11:45,800
our ACLs successfully over on the

00:11:44,300 --> 00:11:48,199
Postgres side so we can give our

00:11:45,800 --> 00:11:51,139
end-users direct access to Postgres now

00:11:48,199 --> 00:11:54,920
with only permissions to the schema that

00:11:51,139 --> 00:11:56,990
they should have access to and the situs

00:11:54,920 --> 00:11:58,249
data extension has been a real fine for

00:11:56,990 --> 00:12:00,170
us so if you ever have to work with

00:11:58,249 --> 00:12:02,449
really really really big data look into

00:12:00,170 --> 00:12:04,699
the situs data columnar store they were

00:12:02,449 --> 00:12:07,399
they were recently acquired by Microsoft

00:12:04,699 --> 00:12:10,999
and are continuing to expand their

00:12:07,399 --> 00:12:13,759
offerings for Postgres so from that

00:12:10,999 --> 00:12:15,410
point we've gotten a complete foundation

00:12:13,759 --> 00:12:19,189
built and we started building the

00:12:15,410 --> 00:12:21,259
restful api so in 1992 worden research

00:12:19,189 --> 00:12:23,449
data services was initially founded so

00:12:21,259 --> 00:12:27,050
wharton faculty could dump data to lotus

00:12:23,449 --> 00:12:30,319
1-2-3 the choice spreadsheet program of

00:12:27,050 --> 00:12:33,499
the time and in 2018-2019 words created

00:12:30,319 --> 00:12:35,480
arrest words creates a restful api so

00:12:33,499 --> 00:12:38,600
before I dive too much into the restful

00:12:35,480 --> 00:12:40,639
api some jargon Django rest framework is

00:12:38,600 --> 00:12:42,589
a wonderful package for Django that I'm

00:12:40,639 --> 00:12:44,420
sure many here are familiar with that

00:12:42,589 --> 00:12:46,519
allows you to take django models and

00:12:44,420 --> 00:12:50,120
also build around serializers and views

00:12:46,519 --> 00:12:53,300
to provide RESTful API endpoints out of

00:12:50,120 --> 00:12:56,120
the Django ecosystem it contains an

00:12:53,300 --> 00:13:00,529
enormous amount of tools which have made

00:12:56,120 --> 00:13:02,689
what we want to do possible so the model

00:13:00,529 --> 00:13:04,100
serializes views filters and permissions

00:13:02,689 --> 00:13:05,420
are at the core of what we had to do

00:13:04,100 --> 00:13:07,189
with Django rest framework could these

00:13:05,420 --> 00:13:10,220
same permissions that we allow our end

00:13:07,189 --> 00:13:12,199
users to have through LDAP and through

00:13:10,220 --> 00:13:14,540
postgrads and on the file system we had

00:13:12,199 --> 00:13:16,249
to extend to Django rest framework for

00:13:14,540 --> 00:13:19,119
filters we didn't want to have to build

00:13:16,249 --> 00:13:21,439
endpoints for each and every one

00:13:19,119 --> 00:13:24,129
manually so the filters had to be

00:13:21,439 --> 00:13:27,139
automated in some way through the views

00:13:24,129 --> 00:13:28,339
the models and the serializers also we

00:13:27,139 --> 00:13:31,879
wanted to automate because we have a

00:13:28,339 --> 00:13:32,460
total of 30,000 tables and 30,000

00:13:31,879 --> 00:13:34,740
aliases

00:13:32,460 --> 00:13:37,860
to those tables for a total of 60,000

00:13:34,740 --> 00:13:39,570
end points within our total

00:13:37,860 --> 00:13:41,940
infrastructure so trying to build this

00:13:39,570 --> 00:13:44,060
manually and maintain it manually would

00:13:41,940 --> 00:13:47,070
just have been a non-starter

00:13:44,060 --> 00:13:52,290
so we built a code generator that

00:13:47,070 --> 00:13:53,940
introspected Postgres and we wanted a

00:13:52,290 --> 00:13:55,620
set of web browser belen points that

00:13:53,940 --> 00:13:57,660
were permitted by users so users could

00:13:55,620 --> 00:14:01,260
only see the endpoints that they had

00:13:57,660 --> 00:14:02,790
access to and then we decided we were

00:14:01,260 --> 00:14:05,190
going to create filters for the first

00:14:02,790 --> 00:14:10,800
column in any index within the Postgres

00:14:05,190 --> 00:14:13,080
database so the key here was that by

00:14:10,800 --> 00:14:17,310
introspecting Postgres we could map each

00:14:13,080 --> 00:14:19,740
and every part of our postgrads database

00:14:17,310 --> 00:14:21,720
to the Django rest framework endpoint

00:14:19,740 --> 00:14:23,970
serializers and Django models

00:14:21,720 --> 00:14:26,070
so by this mapping we didn't have to

00:14:23,970 --> 00:14:31,860
manually create a single one of these

00:14:26,070 --> 00:14:34,980
models views or tables so how did we

00:14:31,860 --> 00:14:37,920
build it here's the first step field

00:14:34,980 --> 00:14:40,080
mapping using Django rest framework with

00:14:37,920 --> 00:14:41,850
the 60,000 endpoints proved a challenge

00:14:40,080 --> 00:14:43,770
but the first step was to map all the

00:14:41,850 --> 00:14:46,890
fields so if you take a look here this

00:14:43,770 --> 00:14:49,320
is a Python dictionary which maps

00:14:46,890 --> 00:14:51,810
Postgres is fields such as small an

00:14:49,320 --> 00:14:54,060
integer and bigint over to equivalence

00:14:51,810 --> 00:14:56,040
on the Django side with placeholders

00:14:54,060 --> 00:14:58,260
where we could insert other pieces that

00:14:56,040 --> 00:15:00,690
we needed to successfully build out

00:14:58,260 --> 00:15:02,370
Django models so for example those

00:15:00,690 --> 00:15:04,590
squiggly braces right there might be

00:15:02,370 --> 00:15:06,390
where we insert something like a primary

00:15:04,590 --> 00:15:08,850
key equals true because Django models

00:15:06,390 --> 00:15:10,080
require a primary key and the second one

00:15:08,850 --> 00:15:12,510
at the end of the line with the squiggly

00:15:10,080 --> 00:15:14,490
braces is where we'd put in things like

00:15:12,510 --> 00:15:15,660
if we had to map a column name so I'll

00:15:14,490 --> 00:15:17,580
show that in a second

00:15:15,660 --> 00:15:19,590
we created a Django management command

00:15:17,580 --> 00:15:23,400
to build the models by introspecting all

00:15:19,590 --> 00:15:27,150
this data and we made the first column

00:15:23,400 --> 00:15:28,680
the primary key by default here since

00:15:27,150 --> 00:15:31,200
this is built for a read-only

00:15:28,680 --> 00:15:32,940
environment so the primary key does not

00:15:31,200 --> 00:15:39,440
become as crucial as it does in a

00:15:32,940 --> 00:15:43,290
read/write environment so it turns out

00:15:39,440 --> 00:15:44,670
words like yield in return are not just

00:15:43,290 --> 00:15:46,230
popular in Python

00:15:44,670 --> 00:15:49,080
they are also popular

00:15:46,230 --> 00:15:51,330
finance so we ran into one heck of a

00:15:49,080 --> 00:15:53,160
namespace collision here and I was

00:15:51,330 --> 00:15:56,280
looking through the errors oh why can't

00:15:53,160 --> 00:15:59,040
I use yield why can't I use return and

00:15:56,280 --> 00:16:01,380
it turns out that those are reserved

00:15:59,040 --> 00:16:04,470
words in Python so what we did is put

00:16:01,380 --> 00:16:06,900
together an entire list which you can

00:16:04,470 --> 00:16:09,810
get out of directly out of the command

00:16:06,900 --> 00:16:11,790
line of Python from if you ever need to

00:16:09,810 --> 00:16:14,280
look up the current reserved words list

00:16:11,790 --> 00:16:16,230
and we built a dictionary of all the

00:16:14,280 --> 00:16:18,420
reserved words intact on a couple more

00:16:16,230 --> 00:16:22,200
for Django rest framework like format

00:16:18,420 --> 00:16:24,720
limit and offset and for any columns

00:16:22,200 --> 00:16:26,940
that matched those I know pet bait says

00:16:24,720 --> 00:16:28,740
just to put an underscore at the end but

00:16:26,940 --> 00:16:31,590
just to be a little more explicit we put

00:16:28,740 --> 00:16:33,030
underscore var at the end for those so

00:16:31,590 --> 00:16:34,470
this was our first trick that we needed

00:16:33,030 --> 00:16:36,330
to get around because a lot of those

00:16:34,470 --> 00:16:37,740
60,000 tables that had already been

00:16:36,330 --> 00:16:39,930
built and assembled by our data team

00:16:37,740 --> 00:16:41,370
provided by our data vendors had those

00:16:39,930 --> 00:16:43,170
words in them because they don't care

00:16:41,370 --> 00:16:44,970
about Python they might not be using

00:16:43,170 --> 00:16:47,070
Python they might be a sash up they

00:16:44,970 --> 00:16:49,950
don't care about our reserved words list

00:16:47,070 --> 00:16:51,270
and when you're talking about some of

00:16:49,950 --> 00:16:55,500
these data vendors or the US government

00:16:51,270 --> 00:16:57,960
they're not likely to change them so we

00:16:55,500 --> 00:17:00,960
appended var there and the end result

00:16:57,960 --> 00:17:03,510
was we ended up with some models so this

00:17:00,960 --> 00:17:05,550
is an example of one of the models built

00:17:03,510 --> 00:17:07,980
automatically off of postgrads table

00:17:05,550 --> 00:17:11,270
which has all the necessary mapping for

00:17:07,980 --> 00:17:13,590
Django rest framework in it for the

00:17:11,270 --> 00:17:17,070
Center for research and security prices

00:17:13,590 --> 00:17:18,900
fun summary end point and it has

00:17:17,070 --> 00:17:21,000
successfully created us a model you'll

00:17:18,900 --> 00:17:23,220
see that the first column automatically

00:17:21,000 --> 00:17:25,380
becomes the primary key you'll see that

00:17:23,220 --> 00:17:28,710
yield var since it hit a name collision

00:17:25,380 --> 00:17:30,990
there has yield var as the actual field

00:17:28,710 --> 00:17:33,270
name but toward the end of it we have

00:17:30,990 --> 00:17:35,820
the DB column specifically mapped back

00:17:33,270 --> 00:17:38,280
to the yield column within the Postgres

00:17:35,820 --> 00:17:40,860
table you'll also see a pretty horrific

00:17:38,280 --> 00:17:43,620
hack here under DB table this is the

00:17:40,860 --> 00:17:46,380
first maybe don't try this at home but

00:17:43,620 --> 00:17:48,840
it actually works django doesn't have

00:17:46,380 --> 00:17:50,280
support for multiple ski model yet this

00:17:48,840 --> 00:17:51,750
might be a good idea to work on it

00:17:50,280 --> 00:17:53,400
sprints a couple people have started

00:17:51,750 --> 00:17:55,800
work on it if you want multiple scheme

00:17:53,400 --> 00:17:58,590
out of support for django but for now

00:17:55,800 --> 00:18:00,150
what you can do is hack it by fooling

00:17:58,590 --> 00:18:03,060
out the quoting system where they

00:18:00,150 --> 00:18:05,100
Django by specifying a DB table

00:18:03,060 --> 00:18:07,850
explicitly here with some pretty

00:18:05,100 --> 00:18:10,470
horrible escaping and it actually works

00:18:07,850 --> 00:18:14,550
Thank You stackoverflow for pointing me

00:18:10,470 --> 00:18:16,050
to this solution it works for now and

00:18:14,550 --> 00:18:17,700
that's something we have to test every

00:18:16,050 --> 00:18:20,940
django version because obviously this is

00:18:17,700 --> 00:18:23,510
not a officially supported feature but

00:18:20,940 --> 00:18:25,980
it has worked just fine for us so far

00:18:23,510 --> 00:18:27,960
once we get multiple scheme out of

00:18:25,980 --> 00:18:29,700
support and if anybody is looking to

00:18:27,960 --> 00:18:33,840
volunteer to do that please come talk to

00:18:29,700 --> 00:18:36,140
me so most of our models had about 20

00:18:33,840 --> 00:18:38,580
columns but some had over a thousand and

00:18:36,140 --> 00:18:41,370
this system allowed us to generate the

00:18:38,580 --> 00:18:43,740
entire API anytime the source data

00:18:41,370 --> 00:18:46,220
change as well so we literally have a

00:18:43,740 --> 00:18:48,450
script every night now that at 3:00 a.m.

00:18:46,220 --> 00:18:51,450
analyzes the entire Postgres database

00:18:48,450 --> 00:18:53,040
and rewrites all the models and it's

00:18:51,450 --> 00:18:55,260
kind of nice because this has given us

00:18:53,040 --> 00:18:56,550
an added bonus that we didn't expect we

00:18:55,260 --> 00:18:58,320
have all these changes under version

00:18:56,550 --> 00:19:00,450
control now so we can see how these

00:18:58,320 --> 00:19:02,220
fields change over time because a lot of

00:19:00,450 --> 00:19:05,280
the data loading processes we have are

00:19:02,220 --> 00:19:08,880
completely automated so we're not

00:19:05,280 --> 00:19:11,070
necessarily even aware when standard and

00:19:08,880 --> 00:19:13,260
poors copy stat updates a field or

00:19:11,070 --> 00:19:14,970
removes the field that it's gone but now

00:19:13,260 --> 00:19:18,780
every night I you know every morning I

00:19:14,970 --> 00:19:21,240
wake up and I see the 3 a.m. auto commit

00:19:18,780 --> 00:19:22,650
to get that shows me exactly what fields

00:19:21,240 --> 00:19:25,020
have been added what had been deleted

00:19:22,650 --> 00:19:26,760
what if any have been renamed it's sort

00:19:25,020 --> 00:19:30,470
of a nice sanity check to have as well

00:19:26,760 --> 00:19:30,470
to have it all under version control and

00:19:31,610 --> 00:19:41,070
moving on from there those were a couple

00:19:36,090 --> 00:19:44,850
hacks but it actually worked but that

00:19:41,070 --> 00:19:47,280
led us to some big data problems so well

00:19:44,850 --> 00:19:48,900
we're not on the scale of analyzing you

00:19:47,280 --> 00:19:49,170
know the human genome or anything like

00:19:48,900 --> 00:19:50,820
that

00:19:49,170 --> 00:19:52,860
a hundred ter and a Postgres database

00:19:50,820 --> 00:19:55,110
talking to our friends who actually work

00:19:52,860 --> 00:19:57,450
on Postgres they like using us as a

00:19:55,110 --> 00:19:59,460
pretty big use case and talking to our

00:19:57,450 --> 00:20:00,870
friends in Django they're saying you

00:19:59,460 --> 00:20:03,150
know having this kind of database behind

00:20:00,870 --> 00:20:04,770
a rest framework it's a really good test

00:20:03,150 --> 00:20:07,590
for everybody else because it's a fairly

00:20:04,770 --> 00:20:10,770
big one but we do run into big data

00:20:07,590 --> 00:20:12,690
problems so this gave us some several

00:20:10,770 --> 00:20:13,590
interesting points to solve and while

00:20:12,690 --> 00:20:15,270
you know

00:20:13,590 --> 00:20:18,210
this might not be your exact use case

00:20:15,270 --> 00:20:22,799
some of these problems are things we

00:20:18,210 --> 00:20:25,049
could all benefit from first with 60,000

00:20:22,799 --> 00:20:27,539
tables models and end points

00:20:25,049 --> 00:20:31,980
not many Django projects have 60,000

00:20:27,539 --> 00:20:35,640
models within them we had permissions

00:20:31,980 --> 00:20:37,260
issues so 63,000 users across 500

00:20:35,640 --> 00:20:39,960
subscribers all needed individual

00:20:37,260 --> 00:20:43,049
permission sets within postgrads and

00:20:39,960 --> 00:20:46,860
Django rest framework API the count

00:20:43,049 --> 00:20:49,260
problem so with very very large tables

00:20:46,860 --> 00:20:51,929
millions and billions of rows count gets

00:20:49,260 --> 00:20:53,940
very slow so we do have tables like the

00:20:51,929 --> 00:20:56,190
New York Stock Exchange data that have

00:20:53,940 --> 00:20:58,830
billions of rows and it can take minutes

00:20:56,190 --> 00:21:00,539
for a select count to come back and with

00:20:58,830 --> 00:21:03,059
Django rest framework default limit

00:21:00,539 --> 00:21:04,710
offset pagination it requires select

00:21:03,059 --> 00:21:07,260
counts so we needed to come up with a

00:21:04,710 --> 00:21:09,929
solution for that I mentioned briefly

00:21:07,260 --> 00:21:11,250
filters how do we let people search on

00:21:09,929 --> 00:21:13,860
this we only want them to be able to

00:21:11,250 --> 00:21:16,740
search on index columns so how do we

00:21:13,860 --> 00:21:18,539
automatically create them and also I

00:21:16,740 --> 00:21:21,270
don't know if you know this but Finance

00:21:18,539 --> 00:21:23,100
folks really love spreadsheets so we

00:21:21,270 --> 00:21:24,720
needed to be able to get away so they

00:21:23,100 --> 00:21:26,760
can slice there and dice their data but

00:21:24,720 --> 00:21:28,289
to really sell this to anyone they're

00:21:26,760 --> 00:21:30,330
going to be able to need to get this out

00:21:28,289 --> 00:21:32,700
into a spreadsheet so those were some of

00:21:30,330 --> 00:21:35,279
the problems we had to attack because

00:21:32,700 --> 00:21:37,380
when you have 60,000 models being

00:21:35,279 --> 00:21:40,289
imported and checked into Django that

00:21:37,380 --> 00:21:41,880
takes long system checks to occur so I'm

00:21:40,289 --> 00:21:43,620
sure no people here have used Django

00:21:41,880 --> 00:21:45,809
where when you first a year you know

00:21:43,620 --> 00:21:47,909
Django admin start project my project

00:21:45,809 --> 00:21:48,360
and you fire up run server for the first

00:21:47,909 --> 00:21:51,090
time

00:21:48,360 --> 00:21:52,289
BAM it's right there it's very exciting

00:21:51,090 --> 00:21:54,539
you're like oh I'm gonna get so much

00:21:52,289 --> 00:21:57,090
done and then at the project gets older

00:21:54,539 --> 00:22:00,179
and older the run server starts to lag

00:21:57,090 --> 00:22:01,649
and lag and lag and you miss one column

00:22:00,179 --> 00:22:04,350
and you have to wait for it to restart

00:22:01,649 --> 00:22:07,950
well this run server was taking over two

00:22:04,350 --> 00:22:10,260
hours to spin up on a machine with a

00:22:07,950 --> 00:22:13,260
heck of a lot of cores and 64 gigs of

00:22:10,260 --> 00:22:15,539
RAM so that that was making working on

00:22:13,260 --> 00:22:18,000
it kind of difficult and especially with

00:22:15,539 --> 00:22:19,860
a code generator going on - you know you

00:22:18,000 --> 00:22:21,919
met one thing wrong in the code

00:22:19,860 --> 00:22:25,590
generator and it would blow up in

00:22:21,919 --> 00:22:27,450
absolutely epic and wonderful ways and

00:22:25,590 --> 00:22:29,800
so

00:22:27,450 --> 00:22:32,340
the way we solved that was kind of

00:22:29,800 --> 00:22:35,050
interesting so if you take a look here

00:22:32,340 --> 00:22:39,730
this is an example we ended up building

00:22:35,050 --> 00:22:41,890
a generic view set rather than having a

00:22:39,730 --> 00:22:43,270
different view for each of the models so

00:22:41,890 --> 00:22:45,100
when we had initially started we had a

00:22:43,270 --> 00:22:47,140
different view a different serializer in

00:22:45,100 --> 00:22:49,980
a different model for each we ended up

00:22:47,140 --> 00:22:52,480
getting into some meta programming and

00:22:49,980 --> 00:22:54,160
making the view set generic so what we

00:22:52,480 --> 00:22:56,920
did every Django rest framework end

00:22:54,160 --> 00:22:59,860
point requires a unique base name so we

00:22:56,920 --> 00:23:02,590
took it we took the opportunity here to

00:22:59,860 --> 00:23:05,910
establish a convention for our back end

00:23:02,590 --> 00:23:09,910
and overload it with a bunch of data so

00:23:05,910 --> 00:23:13,120
within the URLs file each of these base

00:23:09,910 --> 00:23:15,010
names contain jangers database

00:23:13,120 --> 00:23:17,230
identifiers because we don't use the

00:23:15,010 --> 00:23:20,940
Django default so that would be the PG

00:23:17,230 --> 00:23:24,130
data the app name so that would be data

00:23:20,940 --> 00:23:27,070
the schema in this case would be crisp

00:23:24,130 --> 00:23:29,500
and the table name in this case would be

00:23:27,070 --> 00:23:32,080
DSF as you can see highlighted up there

00:23:29,500 --> 00:23:34,810
for daily stock file and concatenated

00:23:32,080 --> 00:23:36,460
them with periods and this was nice

00:23:34,810 --> 00:23:40,600
because since it has to be unique within

00:23:36,460 --> 00:23:42,430
the DRF URL namespace we needed it to be

00:23:40,600 --> 00:23:44,950
unique within Postgres as well so it

00:23:42,430 --> 00:23:46,750
ended up working out for us when we

00:23:44,950 --> 00:23:49,480
extract those values in our generic view

00:23:46,750 --> 00:23:51,760
set class and use those values to import

00:23:49,480 --> 00:23:53,890
the models the serializer and the

00:23:51,760 --> 00:23:56,410
permission for the view what we've done

00:23:53,890 --> 00:23:58,900
here is kind of built a lazy loading

00:23:56,410 --> 00:24:02,170
mechanism so rather than having to check

00:23:58,900 --> 00:24:04,540
all of these models for validity at load

00:24:02,170 --> 00:24:06,520
time of run server or even worse when we

00:24:04,540 --> 00:24:08,860
published a production this would take a

00:24:06,520 --> 00:24:10,870
two hour lag her Apache would just be

00:24:08,860 --> 00:24:13,510
spinning what was building this all up

00:24:10,870 --> 00:24:16,180
in memory we made the decision that we

00:24:13,510 --> 00:24:18,790
would be ok to run into those errors at

00:24:16,180 --> 00:24:21,490
execution time rather than during a

00:24:18,790 --> 00:24:23,170
system check and and that decision

00:24:21,490 --> 00:24:27,340
hasn't worked out very it's worked out

00:24:23,170 --> 00:24:29,590
very well for us so by using the get

00:24:27,340 --> 00:24:34,060
adder import module trick you can see

00:24:29,590 --> 00:24:37,750
over here you will see that that has

00:24:34,060 --> 00:24:39,880
actually caused the system's check of

00:24:37,750 --> 00:24:40,760
Django to kind of be pool fooled into

00:24:39,880 --> 00:24:43,070
not having to

00:24:40,760 --> 00:24:44,960
you check it each time so what's the end

00:24:43,070 --> 00:24:47,120
result of this this cut down our load

00:24:44,960 --> 00:24:48,410
time from over two hours to about three

00:24:47,120 --> 00:24:50,540
minutes when publishing to our

00:24:48,410 --> 00:24:53,570
production nodes so it's much much

00:24:50,540 --> 00:24:55,220
faster and more importantly for my

00:24:53,570 --> 00:24:58,220
day-to-day life it made run server

00:24:55,220 --> 00:25:00,020
usable again so I didn't have to you

00:24:58,220 --> 00:25:05,870
know make a maximum of two or three

00:25:00,020 --> 00:25:08,450
changes a day to see if they worked so

00:25:05,870 --> 00:25:09,980
permissions for 63,000 users

00:25:08,450 --> 00:25:12,410
this was another interesting problem we

00:25:09,980 --> 00:25:14,480
had to get since our entire service at

00:25:12,410 --> 00:25:18,080
all levels is backed by LDAP across the

00:25:14,480 --> 00:25:19,880
board web SSH Postgres and the API we do

00:25:18,080 --> 00:25:21,440
share a single username and password

00:25:19,880 --> 00:25:24,080
namespace across our entire

00:25:21,440 --> 00:25:27,380
infrastructure but a yes just a reminder

00:25:24,080 --> 00:25:30,440
we are quite insane we are giving 63,000

00:25:27,380 --> 00:25:32,450
users access to both SSH and Postgres

00:25:30,440 --> 00:25:34,460
and we do spend a fair amount of time

00:25:32,450 --> 00:25:37,370
seeing if they're mining for Bitcoin on

00:25:34,460 --> 00:25:39,050
our servers but permissions really have

00:25:37,370 --> 00:25:40,610
to be automated at the scale for each

00:25:39,050 --> 00:25:41,210
subscribing institution or it's not

00:25:40,610 --> 00:25:44,390
going to work

00:25:41,210 --> 00:25:47,060
and since permissions are applied at the

00:25:44,390 --> 00:25:48,920
schema level we basically just built a

00:25:47,060 --> 00:25:50,810
shim to inherit the same permissions

00:25:48,920 --> 00:25:53,120
that we already have in Postgres into

00:25:50,810 --> 00:25:56,210
Django rest framework so we built this

00:25:53,120 --> 00:25:58,310
check permission function which you'll

00:25:56,210 --> 00:26:00,500
see the magic there actually drops into

00:25:58,310 --> 00:26:02,540
Postgres and checks to see if the

00:26:00,500 --> 00:26:04,820
current user that's logged into Django

00:26:02,540 --> 00:26:09,170
has access to the schema and table that

00:26:04,820 --> 00:26:10,940
we're looking at so it's a it's just a

00:26:09,170 --> 00:26:15,530
little shim and that's all it took and

00:26:10,940 --> 00:26:17,390
it works for us so the end the the user

00:26:15,530 --> 00:26:19,730
experience is when they log in they now

00:26:17,390 --> 00:26:21,590
only see the endpoints they have access

00:26:19,730 --> 00:26:23,060
to if they try to access one that they

00:26:21,590 --> 00:26:24,980
don't have access to it tells them they

00:26:23,060 --> 00:26:26,570
don't have permissions so Django rest

00:26:24,980 --> 00:26:29,660
framework came comes with a really

00:26:26,570 --> 00:26:32,900
amazing set of permissions tools that

00:26:29,660 --> 00:26:36,190
let you extend them including fairly

00:26:32,900 --> 00:26:36,190
straightforward tricks like this

00:26:36,850 --> 00:26:41,780
speeding up the slow count was a pretty

00:26:39,950 --> 00:26:43,160
interesting problem to solve as well and

00:26:41,780 --> 00:26:44,720
I know other people have worked with

00:26:43,160 --> 00:26:47,570
Django rest framework have run into this

00:26:44,720 --> 00:26:50,180
my friend djembe was giving a talk on

00:26:47,570 --> 00:26:51,800
this last year at this very conference

00:26:50,180 --> 00:26:53,639
and this was a problem we were talking

00:26:51,800 --> 00:26:55,919
over because he was running into it

00:26:53,639 --> 00:26:57,179
as well and this is one of those moments

00:26:55,919 --> 00:26:58,739
I've had a lot of great moments with

00:26:57,179 --> 00:27:00,479
Django over the years where I've been

00:26:58,739 --> 00:27:02,700
looking to kind of hack something in on

00:27:00,479 --> 00:27:04,589
the side and then the next version comes

00:27:02,700 --> 00:27:06,389
out and it has the exact feature I was

00:27:04,589 --> 00:27:08,669
looking for this was one of those

00:27:06,389 --> 00:27:09,719
moments so if you take a look here

00:27:08,669 --> 00:27:13,679
you'll see there are a couple

00:27:09,719 --> 00:27:15,690
highlighted points here where I have if

00:27:13,679 --> 00:27:18,179
table estimate count is greater than a

00:27:15,690 --> 00:27:21,119
million what I ended up doing was using

00:27:18,179 --> 00:27:22,979
Postgres as query analyzer here to come

00:27:21,119 --> 00:27:24,690
up with estimates for how many rows it's

00:27:22,979 --> 00:27:27,450
going to be rather than the exact select

00:27:24,690 --> 00:27:29,070
count to cut down the time from minutes

00:27:27,450 --> 00:27:30,629
and minutes and minutes to just a couple

00:27:29,070 --> 00:27:34,019
of milliseconds so what we're saying

00:27:30,629 --> 00:27:36,239
here is we do an estimate count at the

00:27:34,019 --> 00:27:39,899
very top that's the select star from the

00:27:36,239 --> 00:27:43,589
schema and table made lowercase and if

00:27:39,899 --> 00:27:46,649
that estimate says there's estimated

00:27:43,589 --> 00:27:48,690
more than a million rows within the view

00:27:46,649 --> 00:27:51,839
we are going to switch the pagination

00:27:48,690 --> 00:27:53,909
class to this count estimate pagination

00:27:51,839 --> 00:27:56,849
class I wrote instead of Django rest

00:27:53,909 --> 00:27:58,799
framework traditional limit offset

00:27:56,849 --> 00:28:00,809
pagination so what this will do is

00:27:58,799 --> 00:28:03,119
override Django rest framework spazzy

00:28:00,809 --> 00:28:05,070
nation class and use the estimates

00:28:03,119 --> 00:28:08,339
rather than the exact select counts

00:28:05,070 --> 00:28:09,779
thereby eliminating them from the from

00:28:08,339 --> 00:28:13,349
the query plan that has to be executed

00:28:09,779 --> 00:28:15,599
to give you the endpoint and much to my

00:28:13,349 --> 00:28:17,700
shock it actually worked and I had

00:28:15,599 --> 00:28:20,849
initially done this all in raw SQL but

00:28:17,700 --> 00:28:23,039
then Django 2.1 came out and added query

00:28:20,849 --> 00:28:24,509
set dot explains so if you look at the

00:28:23,039 --> 00:28:28,499
second highlighted part you'll see it

00:28:24,509 --> 00:28:31,499
says parse explained and then query set

00:28:28,499 --> 00:28:34,019
dot explained this will give you the

00:28:31,499 --> 00:28:34,739
explain of any query set you have within

00:28:34,019 --> 00:28:37,019
Django

00:28:34,739 --> 00:28:39,209
starting in version 2.1 so that

00:28:37,019 --> 00:28:42,029
eliminated a bunch of ugly code I had

00:28:39,209 --> 00:28:43,950
written to parse it and now I just had

00:28:42,029 --> 00:28:45,570
to have the single reg X to parse the

00:28:43,950 --> 00:28:48,329
explained syntax to give me the estimate

00:28:45,570 --> 00:28:50,700
count of the rows and this has worked

00:28:48,329 --> 00:28:52,379
out really well for us so it's not

00:28:50,700 --> 00:28:54,269
always exactly the same and we've

00:28:52,379 --> 00:28:56,339
modified the pagination code on the

00:28:54,269 --> 00:28:58,320
front end a little bit so that you just

00:28:56,339 --> 00:29:01,019
keep clicking next and next and next and

00:28:58,320 --> 00:29:03,239
the last few pages might be off by a few

00:29:01,019 --> 00:29:04,889
when you're talking millions but for

00:29:03,239 --> 00:29:06,569
things like data browsers who's really

00:29:04,889 --> 00:29:07,520
going to notice you can keep you can

00:29:06,569 --> 00:29:09,890
keep clicking

00:29:07,520 --> 00:29:12,410
next and the last five pages might be

00:29:09,890 --> 00:29:14,930
blanked due to a miscount but would you

00:29:12,410 --> 00:29:16,730
rather have your end-users waiting three

00:29:14,930 --> 00:29:18,980
minutes for a result because of a slow

00:29:16,730 --> 00:29:20,750
select count or a couple milliseconds

00:29:18,980 --> 00:29:22,790
and just have the page count be off by

00:29:20,750 --> 00:29:24,530
one or two when you're talking thousands

00:29:22,790 --> 00:29:30,080
of pages we opted for the latter and

00:29:24,530 --> 00:29:31,850
it's worked out very well for us the

00:29:30,080 --> 00:29:35,450
next trick was getting filters in for

00:29:31,850 --> 00:29:37,910
just indexed columns so we wanted our

00:29:35,450 --> 00:29:40,730
end users to be able to use Django rest

00:29:37,910 --> 00:29:43,130
framework filters to do searches and

00:29:40,730 --> 00:29:45,800
slice and dice data but only on columns

00:29:43,130 --> 00:29:47,830
that were already indexed within the

00:29:45,800 --> 00:29:50,330
database itself so we came up with this

00:29:47,830 --> 00:29:53,780
sequel query against Postgres

00:29:50,330 --> 00:29:56,780
information schema which gives us the

00:29:53,780 --> 00:30:00,860
first column of any index within

00:29:56,780 --> 00:30:02,450
Postgres --is entire database and we

00:30:00,860 --> 00:30:04,040
check it table by table so for each

00:30:02,450 --> 00:30:06,170
table we go through and we pull out this

00:30:04,040 --> 00:30:08,060
metadata and then you'll see we've

00:30:06,170 --> 00:30:10,760
written some logic into this custom view

00:30:08,060 --> 00:30:13,280
set which says depending on what type of

00:30:10,760 --> 00:30:14,930
field it is if it's a car field or a

00:30:13,280 --> 00:30:17,000
text field we'll add it to be a

00:30:14,930 --> 00:30:19,490
searchable field as well as a filterable

00:30:17,000 --> 00:30:21,440
field with the correct kind of filters

00:30:19,490 --> 00:30:23,750
you can do an exact search a contained

00:30:21,440 --> 00:30:26,120
search starts with search or and ends

00:30:23,750 --> 00:30:28,550
with search and if the field type is

00:30:26,120 --> 00:30:30,950
instead an integer type or a numeric

00:30:28,550 --> 00:30:32,990
type or a date type will allow you to

00:30:30,950 --> 00:30:34,520
view an exact search less than less than

00:30:32,990 --> 00:30:39,530
or equals greater than or greater than

00:30:34,520 --> 00:30:41,270
equals and we use the Django rest

00:30:39,530 --> 00:30:44,600
framework filters package I want to give

00:30:41,270 --> 00:30:47,540
a shout out to this package it's a it's

00:30:44,600 --> 00:30:49,280
a drop-in replacement for Django filters

00:30:47,540 --> 00:30:52,700
in many ways but also gives some

00:30:49,280 --> 00:30:55,190
additional features such as the ability

00:30:52,700 --> 00:30:59,840
to do complex query which I'll show in a

00:30:55,190 --> 00:31:03,620
couple minutes the final big gotcha with

00:30:59,840 --> 00:31:04,940
spreadsheets so our users can now slice

00:31:03,620 --> 00:31:07,160
and dice their data with all these

00:31:04,940 --> 00:31:09,560
filters we've built but finance people

00:31:07,160 --> 00:31:11,840
absolutely love their love love

00:31:09,560 --> 00:31:13,460
their spreadsheets so Django rest

00:31:11,840 --> 00:31:17,540
framework ships with several renderers

00:31:13,460 --> 00:31:21,620
the browsable api jason there's one for

00:31:17,540 --> 00:31:24,440
xml django HTML templates even the admin

00:31:21,620 --> 00:31:26,630
so what we did is we built an

00:31:24,440 --> 00:31:29,450
open-source a renderer called Django

00:31:26,630 --> 00:31:31,429
rest framework renderer xlsx which

00:31:29,450 --> 00:31:33,950
literally takes your results for any

00:31:31,429 --> 00:31:35,270
Django rest framework endpoint and just

00:31:33,950 --> 00:31:38,240
adds an xlsx

00:31:35,270 --> 00:31:40,520
option so any point with any data you

00:31:38,240 --> 00:31:40,940
have you can get Excel spreadsheets out

00:31:40,520 --> 00:31:43,010
of them

00:31:40,940 --> 00:31:45,350
so we'll take a look at that in a second

00:31:43,010 --> 00:31:47,690
and you can add that to your Django rest

00:31:45,350 --> 00:31:49,669
framework package today with open pi

00:31:47,690 --> 00:31:52,039
excel it'll just generate them for the

00:31:49,669 --> 00:31:53,929
final endpoints there's also been a lot

00:31:52,039 --> 00:31:55,309
of great contributions for the community

00:31:53,929 --> 00:31:57,559
there for things like styling the

00:31:55,309 --> 00:32:02,480
spreadsheets adding logos things of that

00:31:57,559 --> 00:32:06,919
nature if you need them it's all pip

00:32:02,480 --> 00:32:09,230
installable so we have this to-do list

00:32:06,919 --> 00:32:11,630
when we first started this was kind of

00:32:09,230 --> 00:32:13,580
started as a skunk work project that I

00:32:11,630 --> 00:32:17,720
did a few years ago and then suddenly

00:32:13,580 --> 00:32:20,000
one of our fortune 500 clients pretty

00:32:17,720 --> 00:32:25,159
much wanted it tomorrow so it became a

00:32:20,000 --> 00:32:27,289
high priority that was a to-do list but

00:32:25,159 --> 00:32:31,190
over the past year it's really become a

00:32:27,289 --> 00:32:33,260
done list so before we open sourced it

00:32:31,190 --> 00:32:36,559
these were all the things we wanted to

00:32:33,260 --> 00:32:40,039
get done and we've managed to go through

00:32:36,559 --> 00:32:42,289
them all and get them done django Django

00:32:40,039 --> 00:32:44,240
rest framework and Postgres all allowed

00:32:42,289 --> 00:32:47,240
us to address these needs pretty quickly

00:32:44,240 --> 00:32:49,130
and it really went from sort of a

00:32:47,240 --> 00:32:51,559
personal skunkworks experimentation

00:32:49,130 --> 00:32:52,010
project to production in a little over a

00:32:51,559 --> 00:32:55,010
month

00:32:52,010 --> 00:32:57,070
and while the automatic rest package

00:32:55,010 --> 00:32:59,059
we've released is definitely for a niche

00:32:57,070 --> 00:33:00,970
some of these techniques we've come up

00:32:59,059 --> 00:33:03,649
with I think could be useful for many

00:33:00,970 --> 00:33:05,809
many Django projects and I learned a lot

00:33:03,649 --> 00:33:07,880
about the internals of DRF and Django

00:33:05,809 --> 00:33:10,100
itself so I think it's worth sharing and

00:33:07,880 --> 00:33:12,110
showing that yes Django can really scale

00:33:10,100 --> 00:33:14,529
with a couple little tricks to handle

00:33:12,110 --> 00:33:20,840
this kind of data and be a pass through

00:33:14,529 --> 00:33:22,789
so without further ado let's all pray to

00:33:20,840 --> 00:33:23,960
the Wi-Fi gods a little bit because I

00:33:22,789 --> 00:33:25,580
know it can get trickier I'm actually

00:33:23,960 --> 00:33:27,919
treat cheating I've switched over to my

00:33:25,580 --> 00:33:29,360
hotspot but uh let's see if we can

00:33:27,919 --> 00:33:30,799
actually get away with doing a little

00:33:29,360 --> 00:33:34,100
bit of a live demo because I think

00:33:30,799 --> 00:33:34,429
seeing is believing in these cases but

00:33:34,100 --> 00:33:36,350
before

00:33:34,429 --> 00:33:37,669
we go there if any of you want to get in

00:33:36,350 --> 00:33:39,200
touch with me or want to talk about

00:33:37,669 --> 00:33:40,999
working at the word in school

00:33:39,200 --> 00:33:46,749
feel free to catch me in the hallway

00:33:40,999 --> 00:33:52,279
track and I will quickly switch over to

00:33:46,749 --> 00:33:54,590
mirroring mode and you'll see I've

00:33:52,279 --> 00:33:58,669
cheated a little bit here but here's the

00:33:54,590 --> 00:34:02,899
actual front of the words API good I'm

00:33:58,669 --> 00:34:05,690
logged in and if you're looking to steal

00:34:02,899 --> 00:34:09,740
data you will be able to use this token

00:34:05,690 --> 00:34:11,720
for about the next Oh 10 minutes and 36

00:34:09,740 --> 00:34:15,770
seconds I guess the countdown timer is

00:34:11,720 --> 00:34:17,990
that before I change it back but this is

00:34:15,770 --> 00:34:19,879
the actual front end that our users log

00:34:17,990 --> 00:34:22,010
into for the API so we do provide

00:34:19,879 --> 00:34:23,929
documentation and a nice thing we've

00:34:22,010 --> 00:34:26,089
done here is we use Django rest

00:34:23,929 --> 00:34:28,369
framework soft tokens and we actually

00:34:26,089 --> 00:34:30,559
give the end-users examples where we

00:34:28,369 --> 00:34:33,109
inject their auth token right into the

00:34:30,559 --> 00:34:36,379
code so that they can actually copy and

00:34:33,109 --> 00:34:41,659
paste this and run it and get results

00:34:36,379 --> 00:34:43,250
right away so this will take a second to

00:34:41,659 --> 00:34:47,049
come up because it has to repaint the

00:34:43,250 --> 00:34:49,669
screen but if you're wondering what

00:34:47,049 --> 00:34:53,809
sixty thousand endpoints looks like in

00:34:49,669 --> 00:34:56,329
DRF so there were up to the bees if you

00:34:53,809 --> 00:35:00,170
look at where my mouse is on the right

00:34:56,329 --> 00:35:02,900
we're up to the C's yeah it goes on and

00:35:00,170 --> 00:35:04,910
on and on and on for quite a bit so when

00:35:02,900 --> 00:35:07,700
you actually see this visually it gives

00:35:04,910 --> 00:35:09,710
you an idea of what we've built here all

00:35:07,700 --> 00:35:11,599
of these are automated each of those has

00:35:09,710 --> 00:35:13,910
a model behind it each of those has a

00:35:11,599 --> 00:35:15,950
table behind it and the entire process

00:35:13,910 --> 00:35:19,220
being automated allows us to make this a

00:35:15,950 --> 00:35:21,950
reality but this is you know living

00:35:19,220 --> 00:35:24,380
proof here that you can do really big

00:35:21,950 --> 00:35:27,020
things with big data with Django and do

00:35:24,380 --> 00:35:28,490
them quickly if there's ever a question

00:35:27,020 --> 00:35:30,500
about Django scaling I think between

00:35:28,490 --> 00:35:32,359
Instagram on the one end of having lots

00:35:30,500 --> 00:35:34,400
of people looking at it and how much big

00:35:32,359 --> 00:35:35,599
data can it handle behind it you know

00:35:34,400 --> 00:35:38,119
there there are plenty of good examples

00:35:35,599 --> 00:35:39,950
out there on just how flexible Django

00:35:38,119 --> 00:35:42,650
can be but why don't we look at a

00:35:39,950 --> 00:35:45,950
natural practical example so what I've

00:35:42,650 --> 00:35:48,230
looked up here a q-tip is an identifier

00:35:45,950 --> 00:35:50,480
for a company that never changes

00:35:48,230 --> 00:35:53,900
so while Apple we may all be familiar

00:35:50,480 --> 00:35:58,609
with Apple has the ticker AAPL tickers

00:35:53,900 --> 00:36:01,850
change over time Q sips do not so if we

00:35:58,609 --> 00:36:04,880
take a look here and grab apples Q sip

00:36:01,850 --> 00:36:11,540
you'll see it's right there o 3 7 8 3 3

00:36:04,880 --> 00:36:12,650
100 this endpoint right here is the one

00:36:11,540 --> 00:36:14,150
that I've been talking about most

00:36:12,650 --> 00:36:15,859
because it's fairly relatable at the

00:36:14,150 --> 00:36:19,160
Center for research and security prices

00:36:15,859 --> 00:36:21,560
daily stock file so what this is is end

00:36:19,160 --> 00:36:24,770
of day pricing data for companies going

00:36:21,560 --> 00:36:28,910
back to 1925 so what I've done here is

00:36:24,770 --> 00:36:31,640
I've put apples Q SEP in and instead of

00:36:28,910 --> 00:36:33,560
10 I set the limit to 100 so we can

00:36:31,640 --> 00:36:35,180
actually see right here end of day

00:36:33,560 --> 00:36:37,070
pricing for Apple from the beginning of

00:36:35,180 --> 00:36:40,130
time so if you're wondering when Apple

00:36:37,070 --> 00:36:42,619
went public it was on February 4th 1981

00:36:40,130 --> 00:36:44,359
that's the first record and if we scroll

00:36:42,619 --> 00:36:46,460
down you'll see each of these as an

00:36:44,359 --> 00:36:50,630
individual day there's February 18th

00:36:46,460 --> 00:36:58,580
1981 all the way down so here's the

00:36:50,630 --> 00:37:00,800
first hundred records and you can also

00:36:58,580 --> 00:37:02,930
see here under filters that we've

00:37:00,800 --> 00:37:05,119
automatically added filters for ordering

00:37:02,930 --> 00:37:06,470
and all the fields

00:37:05,119 --> 00:37:09,020
so within Django rest framework

00:37:06,470 --> 00:37:11,000
browsable API that lets you take a look

00:37:09,020 --> 00:37:12,830
and slice and dice right from here so we

00:37:11,000 --> 00:37:14,930
allow our end users access to this

00:37:12,830 --> 00:37:17,030
directly because I think this is a great

00:37:14,930 --> 00:37:19,400
teaching tool for them to understand how

00:37:17,030 --> 00:37:21,920
RESTful API is work because they can

00:37:19,400 --> 00:37:24,050
literally see the URL change as they add

00:37:21,920 --> 00:37:26,060
their filters and quickly things start

00:37:24,050 --> 00:37:27,830
to click so you'll see here that I've

00:37:26,060 --> 00:37:31,160
got the Q sub contains and that's just

00:37:27,830 --> 00:37:38,170
the one example but it does go through

00:37:31,160 --> 00:37:41,570
for any index column and you'll see here

00:37:38,170 --> 00:37:45,800
under the get request that you now have

00:37:41,570 --> 00:37:48,859
JSON API and the Excel spreadsheet so

00:37:45,800 --> 00:37:51,590
I'm gonna see if this actually works and

00:37:48,859 --> 00:37:54,430
hit the xlsx so what this should give us

00:37:51,590 --> 00:37:59,170
is only apples pricing in a spreadsheet

00:37:54,430 --> 00:37:59,170
for every day since they started

00:38:00,240 --> 00:38:14,220
and voila there's a file let's see if it

00:38:05,250 --> 00:38:16,080
actually did it it's saved and voila

00:38:14,220 --> 00:38:18,570
there you have a spreadsheet of all

00:38:16,080 --> 00:38:21,300
apples end of day pricing going back to

00:38:18,570 --> 00:38:23,550
the start of time in 1981 I'm really

00:38:21,300 --> 00:38:25,050
glad that worked if anybody else is

00:38:23,550 --> 00:38:27,230
doing a live demo make sure you have a

00:38:25,050 --> 00:38:32,040
hot spot because conference Wi-Fi is

00:38:27,230 --> 00:38:33,930
never quite that good so that's

00:38:32,040 --> 00:38:37,369
something you can pip install right now

00:38:33,930 --> 00:38:37,369
and get installed on your

00:38:42,320 --> 00:38:48,650
dra-a-a-a-a-a-a-aft unn it's also

00:38:46,800 --> 00:38:50,460
featured on the Django rest framework

00:38:48,650 --> 00:38:51,869
documentation so if you're looking to

00:38:50,460 --> 00:38:53,700
get that kind of functionality and

00:38:51,869 --> 00:38:56,040
that's something you can also call from

00:38:53,700 --> 00:38:57,839
call as an end point from anywhere with

00:38:56,040 --> 00:39:00,240
variables directly just through a get

00:38:57,839 --> 00:39:04,230
request so it's not it doesn't just work

00:39:00,240 --> 00:39:10,080
through the browsable api we've also

00:39:04,230 --> 00:39:11,790
built in under options Django rest

00:39:10,080 --> 00:39:14,910
framework ships with a fairly

00:39:11,790 --> 00:39:17,190
straightforward set of options for

00:39:14,910 --> 00:39:21,599
options calls that returns information

00:39:17,190 --> 00:39:22,980
about about what fields are available

00:39:21,599 --> 00:39:24,690
and things like that we've modified this

00:39:22,980 --> 00:39:27,450
slightly so in addition to what Django

00:39:24,690 --> 00:39:29,730
rest framework provides we have also

00:39:27,450 --> 00:39:32,820
provided a full list of the fields here

00:39:29,730 --> 00:39:35,099
what type of field it is and whether

00:39:32,820 --> 00:39:37,859
it's a filter field so what this allows

00:39:35,099 --> 00:39:40,170
us to do is query the options for an

00:39:37,859 --> 00:39:43,170
endpoint and on our JavaScript front

00:39:40,170 --> 00:39:44,910
ends we will know whether or not it

00:39:43,170 --> 00:39:46,770
should be a searchable field by looking

00:39:44,910 --> 00:39:48,330
at that filter fields and also what type

00:39:46,770 --> 00:39:50,490
it is which can be useful on your

00:39:48,330 --> 00:39:53,130
front-end so providing this additional

00:39:50,490 --> 00:39:55,380
metadata allows our front-end to do some

00:39:53,130 --> 00:39:58,650
pretty neat things I told you about

00:39:55,380 --> 00:40:00,150
Django rest framework filters these are

00:39:58,650 --> 00:40:02,910
some of the things that allows us to do

00:40:00,150 --> 00:40:05,280
more complex operations so these are the

00:40:02,910 --> 00:40:07,160
basics the exact less than less than or

00:40:05,280 --> 00:40:09,960
equal that you can provide in the URLs

00:40:07,160 --> 00:40:11,670
but Django rest framework filters also

00:40:09,960 --> 00:40:13,400
allows us to provide filters like this

00:40:11,670 --> 00:40:17,660
with basic and/or

00:40:13,400 --> 00:40:19,460
logic so if I were to actually copy this

00:40:17,660 --> 00:40:21,740
what they should do is provide us data

00:40:19,460 --> 00:40:24,730
from the endpoint for the first month of

00:40:21,740 --> 00:40:27,830
1991 where the symbol starts with C or

00:40:24,730 --> 00:40:34,010
data from the first month of 1995

00:40:27,830 --> 00:40:36,430
regardless of whether or not it starts

00:40:34,010 --> 00:40:36,430
with C

00:40:57,320 --> 00:41:05,960
if you're wondering Emacs of the

00:40:59,090 --> 00:41:07,400
greatest operating system of all time so

00:41:05,960 --> 00:41:10,280
it's running it's running it's running

00:41:07,400 --> 00:41:13,310
and you'll see here what that's done

00:41:10,280 --> 00:41:14,750
copy and pasted with that complex filter

00:41:13,310 --> 00:41:18,500
that we just saw with the and and or

00:41:14,750 --> 00:41:20,540
logic is return us everything from 1995

00:41:18,500 --> 00:41:22,790
regardless of the start point and then

00:41:20,540 --> 00:41:25,630
when we get back you'll see it only

00:41:22,790 --> 00:41:27,830
provides 1991 where it starts with C so

00:41:25,630 --> 00:41:33,500
I've got to give a big shout out to that

00:41:27,830 --> 00:41:36,740
package so that's one example but how

00:41:33,500 --> 00:41:38,630
did this work on the front end so we

00:41:36,740 --> 00:41:41,120
give examples with jQuery data tables

00:41:38,630 --> 00:41:42,860
where people can create their own front

00:41:41,120 --> 00:41:44,690
points but if we take a look here if I

00:41:42,860 --> 00:41:50,660
come over to the daily stock file that

00:41:44,690 --> 00:41:53,920
we've been talking about and hopefully

00:41:50,660 --> 00:41:53,920
it logs me back in

00:42:00,200 --> 00:42:08,720
I had a queued up for you but of course

00:42:02,360 --> 00:42:10,130
the 20 minute timeout got me alright

00:42:08,720 --> 00:42:13,280
we'll come back to that in a second

00:42:10,130 --> 00:42:15,830
hopefully it actually logs me in but the

00:42:13,280 --> 00:42:17,660
project is up on pi PI so any of these

00:42:15,830 --> 00:42:19,280
things you've seen are now open sourced

00:42:17,660 --> 00:42:22,910
in two different packages there's

00:42:19,280 --> 00:42:24,080
automatic rest which is available which

00:42:22,910 --> 00:42:25,940
covers most of the things we've seen

00:42:24,080 --> 00:42:27,560
like the automatic creation so if you

00:42:25,940 --> 00:42:29,390
have a secondary database and you want

00:42:27,560 --> 00:42:31,190
to build an API around it you should be

00:42:29,390 --> 00:42:32,870
able to write here we completely

00:42:31,190 --> 00:42:34,390
genericized it so there are a lot of

00:42:32,870 --> 00:42:36,950
different options here so you can

00:42:34,390 --> 00:42:39,920
subclass the actual Django command and

00:42:36,950 --> 00:42:41,960
override any of these commands to change

00:42:39,920 --> 00:42:43,790
the database name the owner the root

00:42:41,960 --> 00:42:45,920
Python path where you want it installed

00:42:43,790 --> 00:42:47,960
it all comes with defaults but these

00:42:45,920 --> 00:42:49,820
methods can all be overwritten to give

00:42:47,960 --> 00:42:51,620
yourself options and it comes with a

00:42:49,820 --> 00:42:53,570
couple command-line options - for the

00:42:51,620 --> 00:42:55,130
big ones like the database the owner of

00:42:53,570 --> 00:42:59,840
the schema and postgrads in the path

00:42:55,130 --> 00:43:01,790
right now it only supports postgrads but

00:42:59,840 --> 00:43:04,400
it uses Postgres information schema

00:43:01,790 --> 00:43:06,830
pretty heavily so to write support for

00:43:04,400 --> 00:43:10,910
other databases would mainly be to tweak

00:43:06,830 --> 00:43:14,900
out those those comments that get the

00:43:10,910 --> 00:43:16,250
metadata and it's all been working well

00:43:14,900 --> 00:43:20,930
for us in production now we've been

00:43:16,250 --> 00:43:22,790
using this for well over a year and as

00:43:20,930 --> 00:43:25,340
you can see from on here as we do the

00:43:22,790 --> 00:43:27,380
searches it's pretty lightning fast so

00:43:25,340 --> 00:43:30,710
if I were to change if I were to just

00:43:27,380 --> 00:43:35,660
refresh this screen you'll see BAM it

00:43:30,710 --> 00:43:39,530
comes right up if I change let's do it

00:43:35,660 --> 00:43:42,880
change it to 50 comes right up if we

00:43:39,530 --> 00:43:42,880
want to go to a different endpoint

00:43:47,860 --> 00:43:54,790
let's go to the monthly stock file

00:43:49,300 --> 00:43:57,610
instead of the daily stock file BAM it

00:43:54,790 --> 00:43:59,350
comes right up so for a hundred Tara of

00:43:57,610 --> 00:44:02,140
performance and some of our biggest data

00:43:59,350 --> 00:44:06,550
sets that really isn't too bad on the

00:44:02,140 --> 00:44:09,250
performance level and finally this page

00:44:06,550 --> 00:44:14,020
has come up so what does it look like on

00:44:09,250 --> 00:44:15,760
our actual front end if I come over to

00:44:14,020 --> 00:44:20,740
the data set list for the crisp daily

00:44:15,760 --> 00:44:22,810
stock file you'll see we have this data

00:44:20,740 --> 00:44:27,040
table here this is actually pulling from

00:44:22,810 --> 00:44:28,420
the restful back end so you'll see all

00:44:27,040 --> 00:44:30,010
the data is there and if we want to do

00:44:28,420 --> 00:44:32,800
that same example we just did with

00:44:30,010 --> 00:44:35,770
apples cue sip I can come in here and

00:44:32,800 --> 00:44:38,290
grab the cue sip just to keep things

00:44:35,770 --> 00:44:40,840
consistent I can come over to our

00:44:38,290 --> 00:44:42,670
controls pages and what this is allowed

00:44:40,840 --> 00:44:44,560
us to do is allow our end users to

00:44:42,670 --> 00:44:51,990
basically build an advanced query form

00:44:44,560 --> 00:44:54,340
here so if I come down here you'll see

00:44:51,990 --> 00:44:57,070
these are the fields that have been

00:44:54,340 --> 00:44:59,590
marked as filter fields so those are the

00:44:57,070 --> 00:45:01,240
ones that have the index on Postgres all

00:44:59,590 --> 00:45:03,190
the way back and it carries through all

00:45:01,240 --> 00:45:07,290
the way to the front end so if I say a

00:45:03,190 --> 00:45:11,590
cue sip equal to apples cue sip and

00:45:07,290 --> 00:45:13,030
apply filters it lets you know what

00:45:11,590 --> 00:45:15,520
we've run now if I come back to the data

00:45:13,030 --> 00:45:18,130
table you'll see we're back to the same

00:45:15,520 --> 00:45:21,610
example we looked at of Apple where it

00:45:18,130 --> 00:45:23,050
started on February 4th 1981 so that's a

00:45:21,610 --> 00:45:25,510
full example of what we've done if you

00:45:23,050 --> 00:45:27,190
want to check out automatic rest just

00:45:25,510 --> 00:45:29,350
google automatic rest and it will take

00:45:27,190 --> 00:45:31,360
you to PI pi or github if you have any

00:45:29,350 --> 00:45:33,310
ideas for this I'd love to hear about it

00:45:31,360 --> 00:45:35,170
but most of all I just want to say thank

00:45:33,310 --> 00:45:37,390
you all again for coming in and checking

00:45:35,170 --> 00:45:41,550
out some of the crazy weird stuff we're

00:45:37,390 --> 00:45:41,550
doing over at worden thanks very much

00:45:44,360 --> 00:45:50,750
so I'm a software engineer so I'm not

00:45:47,360 --> 00:45:55,190
quite sure why

00:45:50,750 --> 00:46:00,020
eject location built on 60,000 or not I

00:45:55,190 --> 00:46:01,400
fight it in your services why why is

00:46:00,020 --> 00:46:02,660
that decision because the way I'm

00:46:01,400 --> 00:46:04,940
thinking about it like large

00:46:02,660 --> 00:46:08,570
applications that's I could definitely

00:46:04,940 --> 00:46:12,110
be because wouldn't face those kind of

00:46:08,570 --> 00:46:14,090
problems if it's it was a smaller like

00:46:12,110 --> 00:46:15,830
multiple applications so that's my

00:46:14,090 --> 00:46:18,800
question that's a great question and we

00:46:15,830 --> 00:46:22,900
do run into this a lot and what it comes

00:46:18,800 --> 00:46:24,770
down to is we have attacked that sort of

00:46:22,900 --> 00:46:26,600
that comes from the engineer's

00:46:24,770 --> 00:46:29,270
perspective you're absolutely right but

00:46:26,600 --> 00:46:31,850
for our end users in finance they want

00:46:29,270 --> 00:46:34,340
us to get out of the way so they can do

00:46:31,850 --> 00:46:36,260
their research and having a single spot

00:46:34,340 --> 00:46:37,760
where they can go and not have to think

00:46:36,260 --> 00:46:39,590
about it a lot of this data is also

00:46:37,760 --> 00:46:42,080
denormalized because these are people

00:46:39,590 --> 00:46:44,330
who live in the spreadsheet world that

00:46:42,080 --> 00:46:45,860
is how they do their work we have to get

00:46:44,330 --> 00:46:47,810
out of the way for them to be able to do

00:46:45,860 --> 00:46:50,390
that and if we went to a microservices

00:46:47,810 --> 00:46:52,160
architecture they would have to

00:46:50,390 --> 00:46:53,180
potentially log into different spots

00:46:52,160 --> 00:46:55,700
they would have to go to different

00:46:53,180 --> 00:46:58,760
places so by having one database

00:46:55,700 --> 00:47:02,000
back-end that they can go to for all the

00:46:58,760 --> 00:47:03,710
data that they have access to removes a

00:47:02,000 --> 00:47:06,170
whole level of cognitive dissonance and

00:47:03,710 --> 00:47:08,780
work they would have to do potentially

00:47:06,170 --> 00:47:10,640
to also join these tables we have over

00:47:08,780 --> 00:47:12,110
three hundred and seven products from a

00:47:10,640 --> 00:47:14,180
bunch of different data vendors and

00:47:12,110 --> 00:47:18,320
we're one of the few places where for

00:47:14,180 --> 00:47:20,120
example a PhD in finance can crunch down

00:47:18,320 --> 00:47:24,110
their algorithm on the new york stock

00:47:20,120 --> 00:47:26,120
exchange data and then bounce that off

00:47:24,110 --> 00:47:27,680
of joined to a completely separate

00:47:26,120 --> 00:47:30,230
vendors database to see if that's

00:47:27,680 --> 00:47:32,720
affected by effective executive

00:47:30,230 --> 00:47:34,850
compensation so you know do bonuses

00:47:32,720 --> 00:47:36,650
actually improve the performance of a

00:47:34,850 --> 00:47:37,700
stock on the market they can do that

00:47:36,650 --> 00:47:39,440
kind of thing by keeping everything

00:47:37,700 --> 00:47:41,870
integrated within post grades

00:47:39,440 --> 00:47:44,570
so yes it's that's where my brain

00:47:41,870 --> 00:47:48,980
immediately goes first - but there there

00:47:44,570 --> 00:47:52,430
is there is a reason for our madness yes

00:47:48,980 --> 00:47:54,289
you said there's about 80,000 endpoints

00:47:52,430 --> 00:47:56,390
has anyone

00:47:54,289 --> 00:48:01,719
run out of memory displaying the list on

00:47:56,390 --> 00:48:04,249
me so you'll notice I am a Firefox user

00:48:01,719 --> 00:48:07,609
but when I'm displaying these endpoints

00:48:04,249 --> 00:48:09,799
Here I am using Chrome because yes the

00:48:07,609 --> 00:48:12,169
browser does choke on it so we've gotten

00:48:09,799 --> 00:48:13,910
to the point now so for every there's a

00:48:12,169 --> 00:48:16,099
new endpoint added for every day of New

00:48:13,910 --> 00:48:17,630
York Stock Exchange data I am gonna have

00:48:16,099 --> 00:48:19,400
to rewrite the template here to be a

00:48:17,630 --> 00:48:21,140
little more efficient because it

00:48:19,400 --> 00:48:22,609
actually does chew up all the browser

00:48:21,140 --> 00:48:25,519
memory

00:48:22,609 --> 00:48:28,099
in certain cases say yes good I you've

00:48:25,519 --> 00:48:30,019
you found one of our weak points thank

00:48:28,099 --> 00:48:30,590
you so much thanks everyone you were

00:48:30,019 --> 00:48:36,090
awesome

00:48:30,590 --> 00:48:49,399
[Applause]

00:48:36,090 --> 00:48:49,399

YouTube URL: https://www.youtube.com/watch?v=O6-PbTPAFXw


