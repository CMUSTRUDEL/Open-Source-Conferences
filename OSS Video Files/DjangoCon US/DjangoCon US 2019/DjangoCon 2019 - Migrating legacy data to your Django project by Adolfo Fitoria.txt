Title: DjangoCon 2019 - Migrating legacy data to your Django project by Adolfo Fitoria
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Migrating legacy data to your Django project by Adolfo Fitoria

So you have a project that comes with legacy data from another platform, how do you do a data migration to your projects models without much pain? 
In this talk we'll discuss techniques to migrate from legacy databases, switching database engines or just having having files to your Django project.

This talk was presented at: https://2019.djangocon.us/talks/migrating-legacy-data-to-your-django/

LINKS:
Follow Adolfo Fitoria ðŸ‘‡
On Twitter: https://twitter.com/fitoria
Official homepage: http://fitoria.net

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,530 --> 00:00:20,930
so thank you for coming to my talk my I

00:00:18,260 --> 00:00:26,029
will be speaking about migrating legacy

00:00:20,930 --> 00:00:28,039
data to our your Django project so hi my

00:00:26,029 --> 00:00:30,560
name is Odell Victoria I am from

00:00:28,039 --> 00:00:32,680
Nicaragua a country located in Central

00:00:30,560 --> 00:00:37,790
America and yes is shaped like a Dorito

00:00:32,680 --> 00:00:40,760
so that way you won't forget it never so

00:00:37,790 --> 00:00:43,699
I work for a company called a publishing

00:00:40,760 --> 00:00:47,180
they are provided for software as a

00:00:43,699 --> 00:00:50,659
service solutions for news outlets as

00:00:47,180 --> 00:00:54,500
publications and they are the owners now

00:00:50,659 --> 00:00:57,400
for ellington how many of you have heard

00:00:54,500 --> 00:00:57,400
about Ellington

00:00:57,460 --> 00:01:05,140
okay so Ellington if the majority of the

00:01:02,600 --> 00:01:07,130
group that doesn't know it is the first

00:01:05,140 --> 00:01:10,990
Django project ever

00:01:07,130 --> 00:01:13,970
basically Ellington was the reason why

00:01:10,990 --> 00:01:18,350
Django was created so Ellington is the

00:01:13,970 --> 00:01:21,380
CMS that powered the Loveland Georgian

00:01:18,350 --> 00:01:24,469
world and back in the day and it is

00:01:21,380 --> 00:01:30,890
still being maintained it's alive it's

00:01:24,469 --> 00:01:33,590
great so that's my my work currently so

00:01:30,890 --> 00:01:36,530
let's get into it legacy data what is it

00:01:33,590 --> 00:01:39,409
so your applications we always talk

00:01:36,530 --> 00:01:42,679
about legacy code about COBOL and I like

00:01:39,409 --> 00:01:45,229
to Kay back about all these Fortran code

00:01:42,679 --> 00:01:49,039
but we also have to talk about legacy

00:01:45,229 --> 00:01:53,329
data is the data that comes from all old

00:01:49,039 --> 00:01:55,939
times like humans we have been doing

00:01:53,329 --> 00:01:59,210
data since we have been talking and

00:01:55,939 --> 00:02:03,170
speaking so back in the day we draw into

00:01:59,210 --> 00:02:05,659
capes then we got that into paper then

00:02:03,170 --> 00:02:08,450
we got into computers and we got it into

00:02:05,659 --> 00:02:11,810
magnetic tapes and all these all

00:02:08,450 --> 00:02:14,750
storages then we got into diskettes and

00:02:11,810 --> 00:02:22,129
zip drives anybody use zip drives this

00:02:14,750 --> 00:02:24,080
room okay we are all and also these

00:02:22,129 --> 00:02:24,360
drives and cloud and everything that you

00:02:24,080 --> 00:02:28,350
can

00:02:24,360 --> 00:02:31,260
put data on so but in your Django apps

00:02:28,350 --> 00:02:36,050
is basically two things your database

00:02:31,260 --> 00:02:39,330
and your media files or user uploads

00:02:36,050 --> 00:02:42,690
Django is awesome that's the reason that

00:02:39,330 --> 00:02:44,580
why we here and respectively this

00:02:42,690 --> 00:02:47,460
management command that comes with the

00:02:44,580 --> 00:02:51,270
framework trey scale or Kieran models

00:02:47,460 --> 00:02:53,100
dot pie of a legacy database in specific

00:02:51,270 --> 00:02:56,640
has many options you can just inspect

00:02:53,100 --> 00:02:58,710
one specific table but in this case for

00:02:56,640 --> 00:03:02,520
this talk I will be doing a migration

00:02:58,710 --> 00:03:05,220
from WordPress to jangle so I wanted to

00:03:02,520 --> 00:03:08,490
get the whole WordPress database that is

00:03:05,220 --> 00:03:11,430
small enough so we can digest it in this

00:03:08,490 --> 00:03:15,030
talk it's a good example of what we are

00:03:11,430 --> 00:03:17,520
going to do in the future so inspect if

00:03:15,030 --> 00:03:21,900
it is great but it's not super magic

00:03:17,520 --> 00:03:24,990
it's not fully magic sometimes it fails

00:03:21,900 --> 00:03:28,590
when they have when you have a database

00:03:24,990 --> 00:03:31,230
that has a field that is not supported

00:03:28,590 --> 00:03:34,860
by the Django or a ram in that case

00:03:31,230 --> 00:03:36,989
Django puts text field and it leaves a

00:03:34,860 --> 00:03:40,890
comment that says hey we cannot guess

00:03:36,989 --> 00:03:42,510
this field so come back again and make

00:03:40,890 --> 00:03:47,430
it better you can implement your own

00:03:42,510 --> 00:03:51,060
field class so it works great Django or

00:03:47,430 --> 00:03:54,060
M needs a primary key is a rule and we

00:03:51,060 --> 00:03:58,290
cannot avoid it sometimes we have old

00:03:54,060 --> 00:04:01,560
legacy data designed by people that

00:03:58,290 --> 00:04:04,640
maybe didn't need a primary key so we

00:04:01,560 --> 00:04:06,930
have to even or add one explicitly or

00:04:04,640 --> 00:04:11,880
see if there is a primary key on the

00:04:06,930 --> 00:04:14,489
table and it's not correctly indicated

00:04:11,880 --> 00:04:16,890
in the table structure this happens a

00:04:14,489 --> 00:04:19,739
lot with WordPress within all versions

00:04:16,890 --> 00:04:22,440
of WordPress you have all the tables

00:04:19,739 --> 00:04:24,450
they need have any primary keys and even

00:04:22,440 --> 00:04:26,460
to this day they have primary keys but

00:04:24,450 --> 00:04:30,180
they don't have relationships between

00:04:26,460 --> 00:04:33,240
tables evidence everything goes through

00:04:30,180 --> 00:04:36,090
a single app you can then split it

00:04:33,240 --> 00:04:38,199
manually you cannot work with database

00:04:36,090 --> 00:04:41,529
schemas it tries to guess

00:04:38,199 --> 00:04:44,830
but it's not perfect so you have to

00:04:41,529 --> 00:04:48,610
manually add the DB table trick that we

00:04:44,830 --> 00:04:53,620
saw last day with the first talk by Tim

00:04:48,610 --> 00:04:56,439
Allen legacy data has surprises you will

00:04:53,620 --> 00:04:59,139
have stuff that won't validate to your

00:04:56,439 --> 00:05:01,930
new schema to you know in database so

00:04:59,139 --> 00:05:05,620
you have to work a bit and do some data

00:05:01,930 --> 00:05:08,680
is massaged as I call it and not all DB

00:05:05,620 --> 00:05:13,240
engines work the same way so some field

00:05:08,680 --> 00:05:16,569
length varies between the engine type so

00:05:13,240 --> 00:05:19,449
you have to adapt to that so how do we

00:05:16,569 --> 00:05:22,599
do this we can take advantage of Django

00:05:19,449 --> 00:05:27,580
multiple database support basically the

00:05:22,599 --> 00:05:31,120
first pace the first step is to add new

00:05:27,580 --> 00:05:34,479
database that is our legacy database we

00:05:31,120 --> 00:05:37,330
point it to the right host name and

00:05:34,479 --> 00:05:39,129
Driver and everything and we have our

00:05:37,330 --> 00:05:43,419
default database that is our target

00:05:39,129 --> 00:05:46,060
database then we I what I usually do is

00:05:43,419 --> 00:05:46,949
turn up and you have empty up called

00:05:46,060 --> 00:05:51,610
legacy

00:05:46,949 --> 00:05:55,990
then I added to the Settings dot PI in

00:05:51,610 --> 00:05:58,659
the install up settings and then there

00:05:55,990 --> 00:06:01,740
is something very important to do at

00:05:58,659 --> 00:06:04,960
least I like to do a legacy router

00:06:01,740 --> 00:06:08,860
basically what I say that if the app

00:06:04,960 --> 00:06:12,009
name is legacy use the legacy database

00:06:08,860 --> 00:06:14,349
if the app name is not legacy use the

00:06:12,009 --> 00:06:17,919
default database so in that way we can

00:06:14,349 --> 00:06:22,089
save a little bit of typing instead of

00:06:17,919 --> 00:06:24,520
doing model that objects parenthesis

00:06:22,089 --> 00:06:26,979
using equals legacy we can just do

00:06:24,520 --> 00:06:30,759
modeled up objects got filter or

00:06:26,979 --> 00:06:35,229
whatever we can do we add that router to

00:06:30,759 --> 00:06:38,409
the settings at pi and then we start the

00:06:35,229 --> 00:06:42,279
magic we start to do the manage that PI

00:06:38,409 --> 00:06:46,569
expect to be attached - database equals

00:06:42,279 --> 00:06:49,389
legacy and then with the greater than

00:06:46,569 --> 00:06:52,150
sign you can redirect that output to a

00:06:49,389 --> 00:06:55,330
model so the Marshall PI file

00:06:52,150 --> 00:06:57,669
so you'll have something like this this

00:06:55,330 --> 00:07:00,070
is the structure for just one table but

00:06:57,669 --> 00:07:05,080
normally then models of pie is huge

00:07:00,070 --> 00:07:07,479
depending of the data resize and then

00:07:05,080 --> 00:07:10,810
you have to investigate and look how the

00:07:07,479 --> 00:07:14,560
data is in your legacy database you can

00:07:10,810 --> 00:07:18,639
use many tools for this wherever you

00:07:14,560 --> 00:07:22,750
feel comfortable I tend to use the SQL

00:07:18,639 --> 00:07:25,720
terminal also by reading the model dot

00:07:22,750 --> 00:07:27,940
pi file it's a great tool but we have

00:07:25,720 --> 00:07:30,610
something third party package called

00:07:27,940 --> 00:07:33,669
django extensions that has a function

00:07:30,610 --> 00:07:36,250
called brass models that is a management

00:07:33,669 --> 00:07:41,500
command that reduces this beautiful

00:07:36,250 --> 00:07:45,220
schema relational schemas in a picture

00:07:41,500 --> 00:07:49,810
so you can print it out and have it with

00:07:45,220 --> 00:07:55,389
you as a cheat sheet so you can have it

00:07:49,810 --> 00:07:57,639
always there now to work so the approach

00:07:55,389 --> 00:08:02,590
that I take is to create management

00:07:57,639 --> 00:08:05,380
commands for each use case and then I

00:08:02,590 --> 00:08:08,770
work from the less related model to the

00:08:05,380 --> 00:08:11,349
most remote what I mean by this is that

00:08:08,770 --> 00:08:14,380
the less related model is the one that

00:08:11,349 --> 00:08:18,550
doesn't have dependencies on our table

00:08:14,380 --> 00:08:20,770
so in this case for WordPress I will

00:08:18,550 --> 00:08:24,430
that would be a category model that

00:08:20,770 --> 00:08:26,979
everybody depends on that model but that

00:08:24,430 --> 00:08:30,729
model doesn't depend on anyone and then

00:08:26,979 --> 00:08:35,229
you are going to build up from top to

00:08:30,729 --> 00:08:39,310
bottom the dependencies of each model

00:08:35,229 --> 00:08:42,099
and this graph model commands helps a

00:08:39,310 --> 00:08:44,709
lot because well in this case doesn't it

00:08:42,099 --> 00:08:47,080
doesn't look it doesn't have any errors

00:08:44,709 --> 00:08:49,959
we call were preserve relationships but

00:08:47,080 --> 00:08:52,120
if the database has a foreign keys you

00:08:49,959 --> 00:08:55,029
will see the relationship between each

00:08:52,120 --> 00:09:00,700
table so you can know its dependency

00:08:55,029 --> 00:09:03,970
that it has so my application is very

00:09:00,700 --> 00:09:05,930
simple just for demonstration he has to

00:09:03,970 --> 00:09:11,149
model one Kolkata

00:09:05,930 --> 00:09:13,790
remodel he had just the name and the

00:09:11,149 --> 00:09:17,750
second one is a post model he has a

00:09:13,790 --> 00:09:25,100
title a body foreign there is an image

00:09:17,750 --> 00:09:26,420
field update and category then we start

00:09:25,100 --> 00:09:29,300
with the model that has less

00:09:26,420 --> 00:09:31,940
relationships as we saw category doesn't

00:09:29,300 --> 00:09:34,880
happen doesn't relate to anything and

00:09:31,940 --> 00:09:36,680
it's called buying the post so we cannot

00:09:34,880 --> 00:09:40,580
start by the post we have to start with

00:09:36,680 --> 00:09:43,060
category so I don't know if you can see

00:09:40,580 --> 00:09:49,520
it right in the back but I can make it

00:09:43,060 --> 00:09:53,170
bigger so basically it's a work

00:09:49,520 --> 00:09:57,830
management command in the handle

00:09:53,170 --> 00:10:00,830
function you add the query set that you

00:09:57,830 --> 00:10:04,010
want to import in this case WordPress

00:10:00,830 --> 00:10:09,740
store categories in a table called WP

00:10:04,010 --> 00:10:13,220
terms for each term from WordPress I

00:10:09,740 --> 00:10:15,589
create a category on my application so

00:10:13,220 --> 00:10:20,990
you that's the translation part that you

00:10:15,589 --> 00:10:24,770
do then the second part should be just

00:10:20,990 --> 00:10:27,260
importing the post in this I'll just

00:10:24,770 --> 00:10:30,740
query the target table that is that do

00:10:27,260 --> 00:10:33,800
loopy post I do a filter because in

00:10:30,740 --> 00:10:39,100
WordPress the post table also contain

00:10:33,800 --> 00:10:43,279
images draft also contains pages

00:10:39,100 --> 00:10:47,410
attachments and many stuff not just post

00:10:43,279 --> 00:10:52,279
so I filter by post at post type post

00:10:47,410 --> 00:10:54,800
then I do a for loop and insert the

00:10:52,279 --> 00:10:57,860
tables the data from there will be post

00:10:54,800 --> 00:11:03,370
my post model this there is a title body

00:10:57,860 --> 00:11:06,020
and public for categories we get that

00:11:03,370 --> 00:11:08,470
category by querying the WordPress

00:11:06,020 --> 00:11:10,970
database in this case it uses

00:11:08,470 --> 00:11:14,630
intermediary table called term

00:11:10,970 --> 00:11:18,440
relationship and then you have to query

00:11:14,630 --> 00:11:20,180
the delivery terms table to get the

00:11:18,440 --> 00:11:24,709
right

00:11:20,180 --> 00:11:28,250
from the database it's always important

00:11:24,709 --> 00:11:31,700
in this case that you can you have to be

00:11:28,250 --> 00:11:33,649
prepared for cases like a post dog that

00:11:31,700 --> 00:11:36,860
doesn't have any relationship with

00:11:33,649 --> 00:11:39,649
categories because WordPress allows but

00:11:36,860 --> 00:11:45,140
in this case you have to always add a

00:11:39,649 --> 00:11:51,620
good default that can be good for your

00:11:45,140 --> 00:11:52,310
application so it doesn't break in this

00:11:51,620 --> 00:11:54,800
one

00:11:52,310 --> 00:11:58,490
I'm not importing the images but

00:11:54,800 --> 00:12:00,860
continuing with that just guess that the

00:11:58,490 --> 00:12:04,010
first part is the same and then I get

00:12:00,860 --> 00:12:09,050
image the images in WordPress our store

00:12:04,010 --> 00:12:11,990
in the old people's table also with with

00:12:09,050 --> 00:12:15,410
a post type called attachment and then I

00:12:11,990 --> 00:12:20,060
get the image and save it into Django

00:12:15,410 --> 00:12:22,430
using the URL basically the image in

00:12:20,060 --> 00:12:28,459
WordPress is a full path URL with domain

00:12:22,430 --> 00:12:31,370
and and full file extensions you have to

00:12:28,459 --> 00:12:35,860
do it this way to be able to respect

00:12:31,370 --> 00:12:39,470
your media with your file upload and

00:12:35,860 --> 00:12:43,190
back-end in Django so if you're using s3

00:12:39,470 --> 00:12:44,810
or file system it will just use that and

00:12:43,190 --> 00:12:49,010
you have you don't have to worry about a

00:12:44,810 --> 00:12:51,230
special setup and then you run this

00:12:49,010 --> 00:12:53,360
command and wait and wait and wait

00:12:51,230 --> 00:12:57,589
depending on the size of the database I

00:12:53,360 --> 00:13:01,250
have done migration for stuff that takes

00:12:57,589 --> 00:13:04,339
from one hour and a good case up to

00:13:01,250 --> 00:13:08,060
eight hours with my computer being very

00:13:04,339 --> 00:13:13,399
hot in a way that you can cook something

00:13:08,060 --> 00:13:20,500
on the top of it so let me just show you

00:13:13,399 --> 00:13:24,459
quickly how it looks so this is my

00:13:20,500 --> 00:13:29,899
administration it's empty right now but

00:13:24,459 --> 00:13:32,350
for the legacy has post objects and user

00:13:29,899 --> 00:13:32,350
objects

00:13:32,520 --> 00:13:39,270
this is the WordPress site it's a basic

00:13:35,100 --> 00:13:45,870
site this is my jungle side that is

00:13:39,270 --> 00:13:54,750
empty can you see this on the back so we

00:13:45,870 --> 00:13:57,800
first import categories then you will

00:13:54,750 --> 00:14:00,810
see that on my admin side you will have

00:13:57,800 --> 00:14:10,650
the two categories that are in my demo

00:14:00,810 --> 00:14:15,570
site and then I can have pause and then

00:14:10,650 --> 00:14:18,690
the post with images so they're there so

00:14:15,570 --> 00:14:23,150
if I reload the site you'll see the

00:14:18,690 --> 00:14:27,750
imported data in your dragon application

00:14:23,150 --> 00:14:30,450
so this is not enough getting back into

00:14:27,750 --> 00:14:32,970
the waiting icon this is not enough

00:14:30,450 --> 00:14:38,190
because this is just a sample and it was

00:14:32,970 --> 00:14:40,920
just not optimized enough so we have to

00:14:38,190 --> 00:14:44,280
then optimize all the things this was

00:14:40,920 --> 00:14:48,810
not very efficient we can make it better

00:14:44,280 --> 00:14:51,440
so let's queries mean more speed your we

00:14:48,810 --> 00:14:53,820
you'll be reading thousands of data

00:14:51,440 --> 00:14:57,600
depending on there or your data

00:14:53,820 --> 00:15:00,630
restructure you will have you want to

00:14:57,600 --> 00:15:05,120
avoid queries in loops so there are

00:15:00,630 --> 00:15:07,650
techniques basically to not having each

00:15:05,120 --> 00:15:10,680
loop for loop that we were going to do

00:15:07,650 --> 00:15:15,900
making queries that can be catch or

00:15:10,680 --> 00:15:18,170
repeated you can use catch in more

00:15:15,900 --> 00:15:21,600
importantly when creating new models

00:15:18,170 --> 00:15:25,260
each time you do create your call save

00:15:21,600 --> 00:15:28,560
like in these cases isn't is a query

00:15:25,260 --> 00:15:33,150
it's a connection being open so you can

00:15:28,560 --> 00:15:37,200
use a method called bulk create that

00:15:33,150 --> 00:15:43,460
will group many models and just use one

00:15:37,200 --> 00:15:45,660
credit to insert them all you can also

00:15:43,460 --> 00:15:48,660
query just the field that you

00:15:45,660 --> 00:15:52,830
need so in this case I will just need it

00:15:48,660 --> 00:15:56,370
post title and body and category and we

00:15:52,830 --> 00:15:59,340
don't have to query this whole field

00:15:56,370 --> 00:16:05,310
things I post name to ping ping and post

00:15:59,340 --> 00:16:09,090
modifying all the stuff and you can use

00:16:05,310 --> 00:16:12,060
pagination why when you have a table

00:16:09,090 --> 00:16:15,420
that is very large when you do object at

00:16:12,060 --> 00:16:19,080
all it takes a lot of memory to do all

00:16:15,420 --> 00:16:22,590
that civilization from cql up to jungle

00:16:19,080 --> 00:16:27,390
objects so it's better to run some

00:16:22,590 --> 00:16:30,480
pagination they say it struck me a

00:16:27,390 --> 00:16:34,590
thousand records each time instead of

00:16:30,480 --> 00:16:38,820
all the records at once so your memory

00:16:34,590 --> 00:16:42,150
consumption is less and under skip runs

00:16:38,820 --> 00:16:45,960
faster I did this error back in the day

00:16:42,150 --> 00:16:49,140
and and then I saw that when the time

00:16:45,960 --> 00:16:51,840
passes the actually wearing slower and

00:16:49,140 --> 00:16:55,320
slower and my RAM was getting to 100%

00:16:51,840 --> 00:16:59,190
every time so using pagination it allows

00:16:55,320 --> 00:17:03,870
you to keep decent RAM usage and also

00:16:59,190 --> 00:17:08,550
keeping decent processor usage you can

00:17:03,870 --> 00:17:10,620
see more on this advices on these two

00:17:08,550 --> 00:17:14,070
links in the button I will provide the

00:17:10,620 --> 00:17:19,050
slides links at the end so you can just

00:17:14,070 --> 00:17:23,430
click them so we have the optimized

00:17:19,050 --> 00:17:26,520
version of both commands so in this case

00:17:23,430 --> 00:17:29,700
I have a dictionary called cattle

00:17:26,520 --> 00:17:33,660
ricochet that will save the ID of the

00:17:29,700 --> 00:17:36,360
category as a key and the value of the

00:17:33,660 --> 00:17:39,420
dig will be that category object so we

00:17:36,360 --> 00:17:42,960
can save it post data will be a list of

00:17:39,420 --> 00:17:45,690
possible be used later in both create

00:17:42,960 --> 00:17:49,290
and the only fields are the field that

00:17:45,690 --> 00:17:52,290
we own we just care about the post table

00:17:49,290 --> 00:17:56,700
in this case just post I'll post content

00:17:52,290 --> 00:17:59,040
posted and ID we have a default category

00:17:56,700 --> 00:18:01,230
and we have the

00:17:59,040 --> 00:18:05,010
new query said that is slightly

00:18:01,230 --> 00:18:09,150
different just by adding only and the

00:18:05,010 --> 00:18:13,980
only fields that we need in the loop it

00:18:09,150 --> 00:18:18,300
will be almost the same just that in

00:18:13,980 --> 00:18:22,320
this part I will use the local caching

00:18:18,300 --> 00:18:25,920
of categories basically if the key of

00:18:22,320 --> 00:18:29,460
the category ID is on the dictionary I

00:18:25,920 --> 00:18:30,720
will just return that and if not is if

00:18:29,460 --> 00:18:32,940
it not in the dictionary

00:18:30,720 --> 00:18:36,720
I will query the database so in this

00:18:32,940 --> 00:18:40,530
first part we are avoiding queries in

00:18:36,720 --> 00:18:43,020
loops will happen but it will be much

00:18:40,530 --> 00:18:47,130
less because in this pattern of

00:18:43,020 --> 00:18:49,050
categories and pass objects categories

00:18:47,130 --> 00:18:53,850
can be a few and the post objects will

00:18:49,050 --> 00:18:57,390
be hundreds or thousands then we have

00:18:53,850 --> 00:19:00,650
this post area dot attend post basically

00:18:57,390 --> 00:19:04,940
we add the post subject to the list and

00:19:00,650 --> 00:19:08,550
in the end we just have a bull create

00:19:04,940 --> 00:19:11,700
function that take down list and do a

00:19:08,550 --> 00:19:13,740
save with just one query this both

00:19:11,700 --> 00:19:17,700
create function has another parameter

00:19:13,740 --> 00:19:21,270
for the quantity of object that you want

00:19:17,700 --> 00:19:23,610
for each query so it does somehow some

00:19:21,270 --> 00:19:27,120
kind of pagination in the inserts so you

00:19:23,610 --> 00:19:29,190
can say 100 objects at a time and if you

00:19:27,120 --> 00:19:32,730
send it like 500 you will do five

00:19:29,190 --> 00:19:36,690
queries instead of just one so this

00:19:32,730 --> 00:19:40,290
helps a lot also in performance so in

00:19:36,690 --> 00:19:45,480
the past example with this small data

00:19:40,290 --> 00:19:48,900
set the before the optimization it uses

00:19:45,480 --> 00:19:52,880
14 queries in the default database and

00:19:48,900 --> 00:19:55,980
19 queries in the legacy database and

00:19:52,880 --> 00:19:59,160
for the after example that is optimized

00:19:55,980 --> 00:20:02,760
it uses 7 queries for the default

00:19:59,160 --> 00:20:05,940
database and 13 queries for the legacy

00:20:02,760 --> 00:20:12,000
database so it's an improvement at least

00:20:05,940 --> 00:20:13,080
for the default database in 50% and some

00:20:12,000 --> 00:20:16,499
percentage on the

00:20:13,080 --> 00:20:18,659
this will be quite different depending

00:20:16,499 --> 00:20:21,570
on your use case and your data structure

00:20:18,659 --> 00:20:25,110
so in this case is really good but maybe

00:20:21,570 --> 00:20:32,190
you cannot avoid much queries in your

00:20:25,110 --> 00:20:36,299
case so there is another thing that you

00:20:32,190 --> 00:20:40,230
can do is that you can use this

00:20:36,299 --> 00:20:43,619
technique to migrate and stuff from one

00:20:40,230 --> 00:20:47,789
database engine to another without doing

00:20:43,619 --> 00:20:50,789
any transformation so just basically do

00:20:47,789 --> 00:20:56,730
a model that objected all and save it to

00:20:50,789 --> 00:20:59,220
your target database so there's stuff

00:20:56,730 --> 00:21:02,009
that I didn't know that maybe you should

00:20:59,220 --> 00:21:05,039
know is that validating all the things

00:21:02,009 --> 00:21:09,809
before inserting it into your production

00:21:05,039 --> 00:21:12,809
database the both create and also jungle

00:21:09,809 --> 00:21:15,269
object that create methods do not apply

00:21:12,809 --> 00:21:19,019
any validation there are inside of the

00:21:15,269 --> 00:21:23,489
save method so you want to have do you

00:21:19,019 --> 00:21:26,669
have to take care of that beforehand you

00:21:23,489 --> 00:21:29,460
have to also see if you really need all

00:21:26,669 --> 00:21:32,519
that data that is on your and legacy

00:21:29,460 --> 00:21:37,649
database in that case you don't carry

00:21:32,519 --> 00:21:43,340
any data that is no it's not clean or

00:21:37,649 --> 00:21:46,919
won't be used again also in this case

00:21:43,340 --> 00:21:49,559
you will have to clean data up for

00:21:46,919 --> 00:21:53,970
instance and when migrating stuff like

00:21:49,559 --> 00:21:57,419
content sites maybe some content has

00:21:53,970 --> 00:22:00,989
some tags that are not valid anymore or

00:21:57,419 --> 00:22:02,789
that you don't want to include or you

00:22:00,989 --> 00:22:07,039
want to clean some stuff like for

00:22:02,789 --> 00:22:11,159
instance if your content size has has

00:22:07,039 --> 00:22:13,499
all YouTube embed code that won't work

00:22:11,159 --> 00:22:16,230
because YouTube is started to use iframe

00:22:13,499 --> 00:22:20,489
embeds you will have to transform those

00:22:16,230 --> 00:22:22,889
and your content before prepare for

00:22:20,489 --> 00:22:26,860
exceptions they will happen you don't

00:22:22,889 --> 00:22:30,159
know what the data looks like so

00:22:26,860 --> 00:22:33,880
you have to take care of those

00:22:30,159 --> 00:22:38,519
exceptions on those cases in my case I

00:22:33,880 --> 00:22:46,240
want important data from HTML files

00:22:38,519 --> 00:22:48,720
dating back to 1998 so in some cases the

00:22:46,240 --> 00:22:51,970
five were empty or they had

00:22:48,720 --> 00:22:55,299
inconsistencies on the mark-up or they

00:22:51,970 --> 00:22:57,730
had basically trash or they were hacked

00:22:55,299 --> 00:23:03,190
and back in the day with the phrasing

00:22:57,730 --> 00:23:06,100
was was popular so all those cases you

00:23:03,190 --> 00:23:10,299
have to take care and this is not work

00:23:06,100 --> 00:23:12,760
that that will be super fast to do its

00:23:10,299 --> 00:23:15,240
first to code it but then in the testing

00:23:12,760 --> 00:23:18,970
phase you you will take some times to

00:23:15,240 --> 00:23:21,340
see that everything is okay and this is

00:23:18,970 --> 00:23:25,090
not limited for database only you can do

00:23:21,340 --> 00:23:28,299
this technique with CSV files for HTML

00:23:25,090 --> 00:23:31,450
files you can scrape aside that already

00:23:28,299 --> 00:23:36,130
exist and create a crawler to fetch the

00:23:31,450 --> 00:23:39,580
data you can use well there's another

00:23:36,130 --> 00:23:42,070
case I'll I did in the past the aside

00:23:39,580 --> 00:23:47,860
uses access as a data base for

00:23:42,070 --> 00:23:52,090
production so basically what we did is

00:23:47,860 --> 00:23:53,950
to export access to XML Aquarion

00:23:52,090 --> 00:23:56,980
accessed through XML and then created

00:23:53,950 --> 00:23:59,350
imported for doing that so please if

00:23:56,980 --> 00:24:03,779
you're still used access as a production

00:23:59,350 --> 00:24:10,899
database please try to migrate it and

00:24:03,779 --> 00:24:14,669
don't do it again so the takeaways will

00:24:10,899 --> 00:24:19,630
be migrant data will be tricky always is

00:24:14,669 --> 00:24:23,200
nobody nobody takes care about data a

00:24:19,630 --> 00:24:27,360
lot until you do this processes and data

00:24:23,200 --> 00:24:29,470
can be dirty can be incomplete

00:24:27,360 --> 00:24:32,049
Israel it will show will be clicking

00:24:29,470 --> 00:24:35,139
Django in spectively helps a lot in the

00:24:32,049 --> 00:24:37,899
process but it's not perfect tool it

00:24:35,139 --> 00:24:40,360
won't ever be because databases are

00:24:37,899 --> 00:24:44,590
really hard

00:24:40,360 --> 00:24:46,480
everything is a loop as an inside of a

00:24:44,590 --> 00:24:49,590
management command you can take this

00:24:46,480 --> 00:24:53,100
approach or you can use something like

00:24:49,590 --> 00:24:56,100
normal Python script that calls Django

00:24:53,100 --> 00:24:59,320
less square is equals more speed in

00:24:56,100 --> 00:25:05,860
inserting and also reading and every

00:24:59,320 --> 00:25:08,770
import case is unique so this will be

00:25:05,860 --> 00:25:10,360
all for my side thank you very much for

00:25:08,770 --> 00:25:17,830
attending this talk and I will take

00:25:10,360 --> 00:25:20,650
questions if you like thank you and

00:25:17,830 --> 00:25:22,720
offer thanks for the talk so with what

00:25:20,650 --> 00:25:26,200
was the largest data set that you

00:25:22,720 --> 00:25:29,290
imported how many rows well the largest

00:25:26,200 --> 00:25:32,350
one what is this wheat files that I told

00:25:29,290 --> 00:25:38,460
you about yeah from 98 to 2006 so it was

00:25:32,350 --> 00:25:39,700
around and without dirty files around

00:25:38,460 --> 00:25:42,010
150,000

00:25:39,700 --> 00:25:43,960
how did you manage like went because

00:25:42,010 --> 00:25:45,940
obviously you ran into dirty data and it

00:25:43,960 --> 00:25:47,380
would break you throw an exception not

00:25:45,940 --> 00:25:48,610
caught you know because you're like whoa

00:25:47,380 --> 00:25:50,740
didn't see that one coming

00:25:48,610 --> 00:25:52,600
how did you roll back how did you manage

00:25:50,740 --> 00:25:54,220
your roll back to like okay I've already

00:25:52,600 --> 00:25:56,620
done this part I don't wanna touch these

00:25:54,220 --> 00:25:59,170
again you know get me to this point

00:25:56,620 --> 00:26:01,440
yeah basically what it did in that case

00:25:59,170 --> 00:26:03,880
is I prepared the skip to be incremental

00:26:01,440 --> 00:26:07,120
so I printed out

00:26:03,880 --> 00:26:09,970
IDs so when it broke you can see the

00:26:07,120 --> 00:26:13,780
last ID that was inserted so we can just

00:26:09,970 --> 00:26:16,270
create a filter from this point on you

00:26:13,780 --> 00:26:18,910
can help in this case what for files

00:26:16,270 --> 00:26:21,280
that are static I also created like a

00:26:18,910 --> 00:26:24,400
small table temporal table that was

00:26:21,280 --> 00:26:29,110
storing what file was processed and what

00:26:24,400 --> 00:26:31,630
article was created from that file so

00:26:29,110 --> 00:26:35,610
you can have control on where do you

00:26:31,630 --> 00:26:35,610
live or where do you broke the last time

00:26:38,040 --> 00:26:43,840
any more questions mr. doleful will be

00:26:42,370 --> 00:26:45,310
available in the hallway track if you

00:26:43,840 --> 00:26:46,690
had any longer questions let's give him

00:26:45,310 --> 00:26:49,440
another round of applause for the

00:26:46,690 --> 00:26:49,440
presentation

00:26:50,910 --> 00:27:04,289

YouTube URL: https://www.youtube.com/watch?v=2jVlPkOgjMs


