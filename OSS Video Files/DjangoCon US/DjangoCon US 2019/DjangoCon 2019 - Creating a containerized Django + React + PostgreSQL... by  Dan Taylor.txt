Title: DjangoCon 2019 - Creating a containerized Django + React + PostgreSQL... by  Dan Taylor
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Creating a containerized Django + React + PostgreSQL development environment by  Dan Taylor

There are many reasons to develop with containers, but getting your developer tools to work with containers can be a big challenge. In this talk we'll show how you can easily set up a fully featured containerized Django development environment using Visual Studio Code remote development extensions.

This talk was presented at: https://2019.djangocon.us/talks/creating-a-containerized-django-react/

LINKS:
Follow Dan Taylor ğŸ‘‡
On Twitter: https://twitter.com/qubitron


Follow DjangCon US ğŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ğŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,230 --> 00:00:18,080
good afternoon everyone thank you for

00:00:16,340 --> 00:00:20,720
coming to my talk today so I'm a program

00:00:18,080 --> 00:00:23,119
manager on our Python developer tools at

00:00:20,720 --> 00:00:24,529
Microsoft and today's talk is about how

00:00:23,119 --> 00:00:27,020
you set up a development environment

00:00:24,529 --> 00:00:29,900
that's running inside of a container and

00:00:27,020 --> 00:00:32,090
for this talk we'll be building a sample

00:00:29,900 --> 00:00:33,379
application that's that uses a somewhat

00:00:32,090 --> 00:00:36,980
common configuration where you have

00:00:33,379 --> 00:00:39,590
Django rest framework API with a react

00:00:36,980 --> 00:00:40,940
front end and a Postgres database and to

00:00:39,590 --> 00:00:43,879
build this application we're going to

00:00:40,940 --> 00:00:47,000
use just two dependencies I will be

00:00:43,879 --> 00:00:48,979
using docker and Visual Studio code now

00:00:47,000 --> 00:00:50,449
if you don't use Visual Studio code

00:00:48,979 --> 00:00:52,220
you'll still get a lot out of the talk

00:00:50,449 --> 00:00:53,659
about all the other pieces that here

00:00:52,220 --> 00:00:56,690
you'll learn a lot about containers and

00:00:53,659 --> 00:00:57,979
and react and things like that but the

00:00:56,690 --> 00:00:59,449
neat part because we're using containers

00:00:57,979 --> 00:01:01,070
you just need these two dependencies if

00:00:59,449 --> 00:01:03,470
you want to follow along now please

00:01:01,070 --> 00:01:04,729
don't try and follow along in this room

00:01:03,470 --> 00:01:06,619
with me that you follow along with the

00:01:04,729 --> 00:01:08,299
video afterwards I'm going to be live

00:01:06,619 --> 00:01:10,340
coding here and I don't need we don't

00:01:08,299 --> 00:01:12,920
need gigabytes of docker downloads to be

00:01:10,340 --> 00:01:16,579
happening during the talk so appreciate

00:01:12,920 --> 00:01:18,590
that so what why you know why are you

00:01:16,579 --> 00:01:20,659
all here that's the talk today many of

00:01:18,590 --> 00:01:23,090
you who have adopted are thinking about

00:01:20,659 --> 00:01:24,920
adopting containers in your development

00:01:23,090 --> 00:01:27,530
or production environment and one of the

00:01:24,920 --> 00:01:28,969
key benefits of using containers that we

00:01:27,530 --> 00:01:31,070
hear often is that if it works locally

00:01:28,969 --> 00:01:35,810
it should work in production because

00:01:31,070 --> 00:01:37,520
what a container allows you to do is run

00:01:35,810 --> 00:01:38,659
kind of like a mini operating system

00:01:37,520 --> 00:01:41,149
with all of your applications

00:01:38,659 --> 00:01:44,329
dependencies in sort of the

00:01:41,149 --> 00:01:45,679
containerized environment it's kind of

00:01:44,329 --> 00:01:47,600
like a lightweight VM running on your

00:01:45,679 --> 00:01:48,920
machine and that's typically defined

00:01:47,600 --> 00:01:51,469
with a docker file and you have some

00:01:48,920 --> 00:01:54,049
tools that will build this container

00:01:51,469 --> 00:01:55,549
from a docker file put your app inside

00:01:54,049 --> 00:01:56,920
of that and then run it and then when

00:01:55,549 --> 00:01:59,299
you run that app it does some things

00:01:56,920 --> 00:02:00,829
right and then if you deploy that

00:01:59,299 --> 00:02:02,509
container to production hopefully it

00:02:00,829 --> 00:02:03,920
will do the same things because all of

00:02:02,509 --> 00:02:05,380
the environmental factors around your

00:02:03,920 --> 00:02:09,679
app have been put inside the container

00:02:05,380 --> 00:02:11,240
now an additional benefit that comes

00:02:09,679 --> 00:02:13,210
with containers you can use containers

00:02:11,240 --> 00:02:16,400
to acquire development dependencies so

00:02:13,210 --> 00:02:18,200
if you need a database a Redis cache or

00:02:16,400 --> 00:02:19,519
you know a celery worker or a bunch of

00:02:18,200 --> 00:02:21,650
other micro services that your

00:02:19,519 --> 00:02:23,330
application depends upon you can throw a

00:02:21,650 --> 00:02:24,770
bunch of those into a docker compose

00:02:23,330 --> 00:02:27,020
file and you can use

00:02:24,770 --> 00:02:29,030
docker to build a set of containers that

00:02:27,020 --> 00:02:30,560
you can have locally so it makes it

00:02:29,030 --> 00:02:31,970
really easy to create a lot of the

00:02:30,560 --> 00:02:34,910
complex development environments that we

00:02:31,970 --> 00:02:36,710
have to work with today now one of the

00:02:34,910 --> 00:02:38,300
one of the problems that gets introduced

00:02:36,710 --> 00:02:39,710
when using containers is that boundary

00:02:38,300 --> 00:02:41,630
that container boundary it's a different

00:02:39,710 --> 00:02:43,250
operating system it causes many issues

00:02:41,630 --> 00:02:46,250
for tools it's really hard to actually

00:02:43,250 --> 00:02:48,800
productively edit debug tests do all the

00:02:46,250 --> 00:02:51,110
things that you normally want to do when

00:02:48,800 --> 00:02:54,200
you're working on code so for example

00:02:51,110 --> 00:02:55,550
you you have to typically you might need

00:02:54,200 --> 00:02:57,980
to rebuild the container every time you

00:02:55,550 --> 00:02:59,390
make a code change autocomplete might

00:02:57,980 --> 00:03:01,400
not work if you don't have the Python

00:02:59,390 --> 00:03:02,870
packages installed on your host

00:03:01,400 --> 00:03:05,690
operating system which I'll call the

00:03:02,870 --> 00:03:07,160
local machine and then you know your

00:03:05,690 --> 00:03:09,440
debugger might not be set up to run the

00:03:07,160 --> 00:03:10,880
app in the container and you know for

00:03:09,440 --> 00:03:11,870
example your testing framework not might

00:03:10,880 --> 00:03:12,830
not be in the container because these

00:03:11,870 --> 00:03:15,500
are the things that your app doesn't

00:03:12,830 --> 00:03:16,940
need during production to run so

00:03:15,500 --> 00:03:18,550
typically what what you would do is

00:03:16,940 --> 00:03:21,680
you'd create a different container

00:03:18,550 --> 00:03:22,610
definition for local development and the

00:03:21,680 --> 00:03:25,070
thing that I'm going to be talking about

00:03:22,610 --> 00:03:26,780
today is actually developing fully

00:03:25,070 --> 00:03:28,430
inside of the container where some

00:03:26,780 --> 00:03:30,850
portion of your IDE is actually running

00:03:28,430 --> 00:03:33,980
inside the container environment where

00:03:30,850 --> 00:03:35,120
you'll have like your editor UI talking

00:03:33,980 --> 00:03:37,040
to some back-end running in the

00:03:35,120 --> 00:03:38,720
container and that backends working

00:03:37,040 --> 00:03:40,820
directly with the code the app in the

00:03:38,720 --> 00:03:42,650
development of dependencies so that

00:03:40,820 --> 00:03:44,570
allows you to work a lot a lot faster

00:03:42,650 --> 00:03:45,799
more productive without sacrificing all

00:03:44,570 --> 00:03:48,830
the tools that you're used to when

00:03:45,799 --> 00:03:50,000
you're developing so to make this

00:03:48,830 --> 00:03:52,400
concrete I'm just going to start off

00:03:50,000 --> 00:03:56,750
with a very low-tech example I'm gonna

00:03:52,400 --> 00:03:58,370
create a new containerized dev box just

00:03:56,750 --> 00:04:01,760
from scratch here by running some docker

00:03:58,370 --> 00:04:03,860
commands so with darker you can you can

00:04:01,760 --> 00:04:07,310
pull down a container just by typing

00:04:03,860 --> 00:04:09,860
duck or run and we'll say I want to run

00:04:07,310 --> 00:04:11,900
a bash prompt so I'll type - IT is a run

00:04:09,860 --> 00:04:14,860
interactive and we'll give this new

00:04:11,900 --> 00:04:17,329
container a name Python dev box and

00:04:14,860 --> 00:04:19,070
we'll base it off of the standard Python

00:04:17,329 --> 00:04:20,479
image that's available on docker hub so

00:04:19,070 --> 00:04:21,709
you can use any in the image here if you

00:04:20,479 --> 00:04:25,280
wanted a different version of Python you

00:04:21,709 --> 00:04:26,780
could say Python 3.6 and then when that

00:04:25,280 --> 00:04:31,550
container starts up we just want to run

00:04:26,780 --> 00:04:33,020
bash so there we go I've got you know

00:04:31,550 --> 00:04:34,520
I've got a development container I can

00:04:33,020 --> 00:04:36,950
I'm running on a Windows machine but

00:04:34,520 --> 00:04:38,350
I've got a bash prompt here so let's

00:04:36,950 --> 00:04:41,530
actually install some tools

00:04:38,350 --> 00:04:46,570
it's just for fun let's so we can run

00:04:41,530 --> 00:04:49,300
apt-get and then apt-get install vim so

00:04:46,570 --> 00:04:51,280
I'll put some BIM in here well we were

00:04:49,300 --> 00:04:54,430
having some serious fun so it's going to

00:04:51,280 --> 00:04:55,930
pull the packages down and then we'll

00:04:54,430 --> 00:04:57,640
install them and then we'll let's write

00:04:55,930 --> 00:05:01,450
a little simple piece of code

00:04:57,640 --> 00:05:06,700
we'll go and create a new folder for our

00:05:01,450 --> 00:05:11,110
app and then we'll then hello dot P Y

00:05:06,700 --> 00:05:15,510
and then press I to insert some code

00:05:11,110 --> 00:05:18,550
here let's say hello jinguk on and then

00:05:15,510 --> 00:05:24,750
we'll print that message and then escape

00:05:18,550 --> 00:05:27,940
: w enter : Q I love him okay so we can

00:05:24,750 --> 00:05:29,530
we can run that with pythons installed

00:05:27,940 --> 00:05:37,840
in this container we can get a little

00:05:29,530 --> 00:05:42,970
python Ruppel if we wanted to done that

00:05:37,840 --> 00:05:47,740
I don't know what I typed yeah good

00:05:42,970 --> 00:05:49,630
thing I've got a backup this is like the

00:05:47,740 --> 00:05:54,820
one part of my talk that never messed up

00:05:49,630 --> 00:06:02,050
when I practiced all right we'll just

00:05:54,820 --> 00:06:04,210
restart that hello Django Khan and print

00:06:02,050 --> 00:06:05,740
that message and we can actually even

00:06:04,210 --> 00:06:07,510
debug this running inside of the

00:06:05,740 --> 00:06:09,100
container we can use P DB which is the

00:06:07,510 --> 00:06:11,860
command line debugger built into Python

00:06:09,100 --> 00:06:14,290
so I'll run Python - MP DB so that will

00:06:11,860 --> 00:06:15,630
start the PDB module and we'll debug the

00:06:14,290 --> 00:06:17,950
file hello PA

00:06:15,630 --> 00:06:20,520
so there were stopped on our line of

00:06:17,950 --> 00:06:23,620
code hello Jango Khan we can step over

00:06:20,520 --> 00:06:25,570
we can inspect that variable and we can

00:06:23,620 --> 00:06:28,750
step over and we can see it prints out

00:06:25,570 --> 00:06:32,320
the message all right so that's our nice

00:06:28,750 --> 00:06:34,000
little deaf container however there's

00:06:32,320 --> 00:06:35,440
some problems with that right so we have

00:06:34,000 --> 00:06:36,880
to remember all these docker commands

00:06:35,440 --> 00:06:39,160
I'm not really much of a command-line

00:06:36,880 --> 00:06:41,980
person and so we're limited only to

00:06:39,160 --> 00:06:43,540
command-line developer tools and in this

00:06:41,980 --> 00:06:45,070
case with this simple primitive setup

00:06:43,540 --> 00:06:46,570
the the code will disappear as soon as

00:06:45,070 --> 00:06:48,669
the container stops because containers

00:06:46,570 --> 00:06:51,550
are kind of immutable they get created

00:06:48,669 --> 00:06:52,030
one way and then right with with just

00:06:51,550 --> 00:06:53,230
how

00:06:52,030 --> 00:06:54,550
configured this if I got a website

00:06:53,230 --> 00:06:56,170
running in the container the ports

00:06:54,550 --> 00:06:57,370
aren't exposed so those are all

00:06:56,170 --> 00:06:59,590
additional things that I would need to

00:06:57,370 --> 00:07:00,490
do to make this better so to solve a lot

00:06:59,590 --> 00:07:01,960
of those problems I'm going to show you

00:07:00,490 --> 00:07:03,910
how we can use the Visual Studio code to

00:07:01,960 --> 00:07:05,830
get a full-featured development

00:07:03,910 --> 00:07:07,420
environment without sacrificing all the

00:07:05,830 --> 00:07:08,710
things that were used to so if you're

00:07:07,420 --> 00:07:10,960
not familiar with with Visual Studio

00:07:08,710 --> 00:07:12,490
code it's a free cross-platform and open

00:07:10,960 --> 00:07:14,800
source editor for Microsoft and it's

00:07:12,490 --> 00:07:16,390
fast in light-weight and it's has

00:07:14,800 --> 00:07:17,740
support for multiple languages that are

00:07:16,390 --> 00:07:20,920
enabled through a rich extension

00:07:17,740 --> 00:07:23,200
ecosystem and it has built-in support

00:07:20,920 --> 00:07:24,760
for JavaScript and typescript and you

00:07:23,200 --> 00:07:27,160
get the standard features that you would

00:07:24,760 --> 00:07:29,260
expect from an editor within telephones

00:07:27,160 --> 00:07:31,180
debugging source control and then for

00:07:29,260 --> 00:07:32,890
Python there's a Python extension that's

00:07:31,180 --> 00:07:35,080
developed by my team that adds the

00:07:32,890 --> 00:07:37,210
Python support for those same features

00:07:35,080 --> 00:07:39,370
like intellisense debugging linting

00:07:37,210 --> 00:07:40,810
testing refactoring and this is the the

00:07:39,370 --> 00:07:42,730
most popular extension for the views

00:07:40,810 --> 00:07:44,590
code marketplace so there's a lot of

00:07:42,730 --> 00:07:46,330
Python developers that that are using

00:07:44,590 --> 00:07:48,370
this tool and just so you know it's

00:07:46,330 --> 00:07:49,960
developed in the open on github and we

00:07:48,370 --> 00:07:51,820
put out a new release every month if you

00:07:49,960 --> 00:07:53,440
if you follow our blog if you you can

00:07:51,820 --> 00:07:56,229
stay up to date with all the new stuff

00:07:53,440 --> 00:07:58,270
that's coming out so the the key reason

00:07:56,229 --> 00:07:59,820
I'm talking about Visual Studio code it

00:07:58,270 --> 00:08:03,729
has some unique benefits for this

00:07:59,820 --> 00:08:05,020
particular scenario there's a it has a

00:08:03,729 --> 00:08:07,240
unique architecture that actually

00:08:05,020 --> 00:08:08,650
enables a fully featured just like local

00:08:07,240 --> 00:08:12,760
development experience so Visual Studio

00:08:08,650 --> 00:08:14,860
code is built on top of electron and

00:08:12,760 --> 00:08:16,150
it's written in JavaScript and HTML so

00:08:14,860 --> 00:08:18,520
it's always had this inherent

00:08:16,150 --> 00:08:20,770
client-server model where the back end

00:08:18,520 --> 00:08:22,930
all the guts of the escola ran as a

00:08:20,770 --> 00:08:24,520
server in the UI ran as a separate

00:08:22,930 --> 00:08:28,630
process that's what makes it nice and

00:08:24,520 --> 00:08:32,740
fast so for we we announce remote

00:08:28,630 --> 00:08:34,930
development for 4 vs code at PyCon back

00:08:32,740 --> 00:08:36,520
in May and this in this case what we do

00:08:34,930 --> 00:08:39,099
is we take that back-end we run it in a

00:08:36,520 --> 00:08:41,500
different machine so it can run on a

00:08:39,099 --> 00:08:44,350
remote SSH VM and in this case it's

00:08:41,500 --> 00:08:46,000
running inside of the container so you

00:08:44,350 --> 00:08:47,800
have all of the UI just kind of

00:08:46,000 --> 00:08:49,839
transparently works and we'll show what

00:08:47,800 --> 00:08:51,220
that means in a second so one of the

00:08:49,839 --> 00:08:52,690
benefits of this approach is that you

00:08:51,220 --> 00:08:54,640
can quickly create or switch between

00:08:52,690 --> 00:08:57,339
development environments you just clone

00:08:54,640 --> 00:09:00,070
something open it with vs code and then

00:08:57,339 --> 00:09:01,720
you could just start working because all

00:09:00,070 --> 00:09:03,480
of your dependencies are encoded in sort

00:09:01,720 --> 00:09:05,700
of that docker container environment

00:09:03,480 --> 00:09:07,080
and so others can really quickly

00:09:05,700 --> 00:09:11,280
replicate your environment on a

00:09:07,080 --> 00:09:12,780
different machine and then other tools

00:09:11,280 --> 00:09:14,130
do have similar features I showed you

00:09:12,780 --> 00:09:15,780
what vim looked like and then there's a

00:09:14,130 --> 00:09:18,150
PI tremor also has a remote development

00:09:15,780 --> 00:09:20,580
support but for this talk I'm gonna be

00:09:18,150 --> 00:09:24,240
walking through vs code like I said so

00:09:20,580 --> 00:09:25,290
that's one background so for the rest of

00:09:24,240 --> 00:09:27,420
the talk what I'm going to walk through

00:09:25,290 --> 00:09:29,070
is attaching to an existing container

00:09:27,420 --> 00:09:31,380
and then creating a new development

00:09:29,070 --> 00:09:32,940
container and then adding a react

00:09:31,380 --> 00:09:35,720
front-end to the application and then

00:09:32,940 --> 00:09:39,510
finally building the production version

00:09:35,720 --> 00:09:43,910
alright so we just created this

00:09:39,510 --> 00:09:43,910
command-line development environment for

00:09:43,940 --> 00:09:47,970
from the command prompt let's actually

00:09:45,960 --> 00:09:52,520
attach to this this dev box that we

00:09:47,970 --> 00:09:54,750
created with vs code so I'm gonna open

00:09:52,520 --> 00:09:56,340
visual studio code here so the first

00:09:54,750 --> 00:09:58,560
thing we need to do is install some

00:09:56,340 --> 00:10:02,460
extensions alright so if I go to my

00:09:58,560 --> 00:10:04,310
extensions tab here the first extension

00:10:02,460 --> 00:10:06,660
that we'll need is we'll need docker

00:10:04,310 --> 00:10:09,540
which I've already got that installed

00:10:06,660 --> 00:10:12,000
and this allows us to create and manage

00:10:09,540 --> 00:10:13,350
docker containers and then for remote

00:10:12,000 --> 00:10:15,330
development we want to install the

00:10:13,350 --> 00:10:18,230
remote containers extension so this

00:10:15,330 --> 00:10:20,610
allows remote development to work with

00:10:18,230 --> 00:10:23,700
the docker container scenario that I was

00:10:20,610 --> 00:10:27,660
talking about so once we have those

00:10:23,700 --> 00:10:30,660
installed there'll be a docker icon on

00:10:27,660 --> 00:10:32,370
this left activity bar here and that

00:10:30,660 --> 00:10:33,960
allows us to see all of the containers

00:10:32,370 --> 00:10:36,450
that we have on our machine the images

00:10:33,960 --> 00:10:38,130
that we have built locally and any

00:10:36,450 --> 00:10:41,850
registries that container registries

00:10:38,130 --> 00:10:44,010
that we're connected to so I can see

00:10:41,850 --> 00:10:46,710
that there's the two containers my

00:10:44,010 --> 00:10:48,390
primary and backup one I can just right

00:10:46,710 --> 00:10:51,030
click on this container and say attach

00:10:48,390 --> 00:10:52,740
visual studio code so this will start a

00:10:51,030 --> 00:10:55,770
new instance of visual studio code a new

00:10:52,740 --> 00:10:58,140
UI and it will install the remote server

00:10:55,770 --> 00:11:01,770
into that container that I'd built if we

00:10:58,140 --> 00:11:03,330
look at the details here it's showing us

00:11:01,770 --> 00:11:08,130
all of the docker commands that it's

00:11:03,330 --> 00:11:10,200
running it's copying there the server

00:11:08,130 --> 00:11:11,840
into the container it's gonna I don't

00:11:10,200 --> 00:11:14,340
know all the things that's doing but

00:11:11,840 --> 00:11:15,870
it's doing a lot of stuff and but the

00:11:14,340 --> 00:11:17,190
point is that this is all stuff that you

00:11:15,870 --> 00:11:20,009
know I didn't really have to

00:11:17,190 --> 00:11:23,190
think about setup and manage and then

00:11:20,009 --> 00:11:24,720
once it's finished now this instance of

00:11:23,190 --> 00:11:27,629
Visual Studio code is fully running

00:11:24,720 --> 00:11:28,949
inside of this container so anytime I do

00:11:27,629 --> 00:11:31,410
anything I would normally do with Visual

00:11:28,949 --> 00:11:33,209
Studio code like open a terminal and now

00:11:31,410 --> 00:11:35,819
I get a bash prompt because that's

00:11:33,209 --> 00:11:37,980
that's running in that same container

00:11:35,819 --> 00:11:39,779
now I don't have any files open because

00:11:37,980 --> 00:11:41,459
I actually need to open a folder and I

00:11:39,779 --> 00:11:42,810
also need to install the Python

00:11:41,459 --> 00:11:46,829
extension so that I can start working

00:11:42,810 --> 00:11:48,329
with the Python code in this app so I'll

00:11:46,829 --> 00:11:50,730
go back to my extensions and null search

00:11:48,329 --> 00:11:54,060
for the python extension this time it's

00:11:50,730 --> 00:11:56,579
saying install it's asking if I want to

00:11:54,060 --> 00:11:58,860
install the extension into the container

00:11:56,579 --> 00:12:00,990
so when I when I click this install

00:11:58,860 --> 00:12:04,290
button it will install the Python

00:12:00,990 --> 00:12:07,079
extension like I said into the the

00:12:04,290 --> 00:12:08,430
container environment and then once

00:12:07,079 --> 00:12:11,339
that's finished I'll actually open up

00:12:08,430 --> 00:12:15,029
and now I need to reload vs code but I'm

00:12:11,339 --> 00:12:16,259
gonna open the folder on the on the

00:12:15,029 --> 00:12:17,819
container using this open folder button

00:12:16,259 --> 00:12:20,370
so there's the app folder where I wrote

00:12:17,819 --> 00:12:24,029
that simple hello dot py script I'll

00:12:20,370 --> 00:12:26,430
click that and I'll open and so reload

00:12:24,029 --> 00:12:29,699
will then be escoba then refresh and

00:12:26,430 --> 00:12:32,370
open that application that folder so

00:12:29,699 --> 00:12:36,680
when it opens I'll be able to see my

00:12:32,370 --> 00:12:41,339
files here and I can actually start

00:12:36,680 --> 00:12:43,529
start coding just give it a second here

00:12:41,339 --> 00:12:45,209
it's a little bit faster the second time

00:12:43,529 --> 00:12:46,680
because it doesn't have to do as much so

00:12:45,209 --> 00:12:50,810
there's that file I wrote from the

00:12:46,680 --> 00:12:52,920
command line um I can open it I can

00:12:50,810 --> 00:13:00,240
select my Python interpreter

00:12:52,920 --> 00:13:02,610
I can I can run this piece of code by

00:13:00,240 --> 00:13:05,160
going right click run the Python file in

00:13:02,610 --> 00:13:08,699
terminal I can debug so I can set a

00:13:05,160 --> 00:13:11,850
breakpoint I can click there and I can

00:13:08,699 --> 00:13:16,110
go debug start debugging I'll select a

00:13:11,850 --> 00:13:18,149
Python file and you know I can expect

00:13:16,110 --> 00:13:21,029
variables and everything just kind of

00:13:18,149 --> 00:13:22,620
works as I would expect right but it's

00:13:21,029 --> 00:13:27,990
all running in that that container

00:13:22,620 --> 00:13:30,269
environment so I've got a bunch of

00:13:27,990 --> 00:13:30,870
slides here that are more for reading

00:13:30,269 --> 00:13:33,210
off lines

00:13:30,870 --> 00:13:36,240
go through them fairly quickly but just

00:13:33,210 --> 00:13:38,279
a quick recap we installed the docker

00:13:36,240 --> 00:13:41,190
and remote containers extension and then

00:13:38,279 --> 00:13:43,200
we right clicked from the docker tab and

00:13:41,190 --> 00:13:45,390
then attached to the container that we

00:13:43,200 --> 00:13:47,190
had we installed the Python extension

00:13:45,390 --> 00:13:52,470
into the container and then we opened a

00:13:47,190 --> 00:13:54,410
folder and then some debugging so we can

00:13:52,470 --> 00:13:56,820
run the Python file or or debug the code

00:13:54,410 --> 00:13:58,410
ok so there's still a few problems with

00:13:56,820 --> 00:14:00,810
this I attached to an existing container

00:13:58,410 --> 00:14:02,940
but again I haven't solved the problem

00:14:00,810 --> 00:14:04,529
where my code will disappear or that I

00:14:02,940 --> 00:14:07,680
haven't set up port forwarding so I can

00:14:04,529 --> 00:14:08,760
access websites so the next step we're

00:14:07,680 --> 00:14:11,339
going to take is we're actually going to

00:14:08,760 --> 00:14:13,710
use Visual Studio code to create a new

00:14:11,339 --> 00:14:15,630
development container and and configure

00:14:13,710 --> 00:14:18,990
it with you know more features that we

00:14:15,630 --> 00:14:23,370
need to be productive so let me just go

00:14:18,990 --> 00:14:28,050
back here so to do this I'll I'll close

00:14:23,370 --> 00:14:31,980
out this container and I'll make a new

00:14:28,050 --> 00:14:33,960
container folder and what I like to do I

00:14:31,980 --> 00:14:36,959
like to do code dot from the command

00:14:33,960 --> 00:14:39,330
line to open this folder up it just runs

00:14:36,959 --> 00:14:42,870
vs code in the current location so now

00:14:39,330 --> 00:14:44,670
I'm in this new container folder and to

00:14:42,870 --> 00:14:46,470
create a new development container I'm

00:14:44,670 --> 00:14:49,050
going to run a command in vs code so to

00:14:46,470 --> 00:14:52,020
run a command u you use ctrl shift P or

00:14:49,050 --> 00:14:54,810
command shift P if you're on a Mac and

00:14:52,020 --> 00:14:56,640
then then like all of the all the

00:14:54,810 --> 00:14:58,500
extensions add various commands to this

00:14:56,640 --> 00:15:01,260
menu so this is where a lot of

00:14:58,500 --> 00:15:03,230
functionality shows up so I can search

00:15:01,260 --> 00:15:05,910
here and say add development container

00:15:03,230 --> 00:15:08,430
configuration files and now that will

00:15:05,910 --> 00:15:10,410
let me pick from a set of predefined

00:15:08,430 --> 00:15:14,130
containers that that the vs code team is

00:15:10,410 --> 00:15:15,510
built so if I search for Python I have a

00:15:14,130 --> 00:15:17,279
few different versions of Python that I

00:15:15,510 --> 00:15:20,370
can start with I could use anaconda or

00:15:17,279 --> 00:15:21,750
mini Conda and then for this talk

00:15:20,370 --> 00:15:24,380
obviously I want to use the one that has

00:15:21,750 --> 00:15:28,020
a Python image and a Postgres database

00:15:24,380 --> 00:15:29,790
so I'll select that and what that's

00:15:28,020 --> 00:15:31,230
going to do it's going to add a bunch of

00:15:29,790 --> 00:15:33,540
files to my workspace now this is going

00:15:31,230 --> 00:15:35,100
to take a minute so I'm going to click

00:15:33,540 --> 00:15:36,959
the reopen in container as soon as those

00:15:35,100 --> 00:15:38,190
files exist vs code says ah this is a

00:15:36,959 --> 00:15:41,100
development container do you want to

00:15:38,190 --> 00:15:43,920
open this in a container environment so

00:15:41,100 --> 00:15:44,740
I'll click that reopening container

00:15:43,920 --> 00:15:46,540
button

00:15:44,740 --> 00:15:48,940
there and while that's opening I'll just

00:15:46,540 --> 00:15:50,260
open a new instance of vias code just to

00:15:48,940 --> 00:15:53,290
walk through some of the files that we

00:15:50,260 --> 00:15:55,990
created so this dev container dot JSON

00:15:53,290 --> 00:15:57,160
this defines this tells vs code what

00:15:55,990 --> 00:16:00,670
it's supposed to do

00:15:57,160 --> 00:16:05,410
with this development container it tells

00:16:00,670 --> 00:16:06,610
it you know it's it it tells it which

00:16:05,410 --> 00:16:07,810
file it should use to build the

00:16:06,610 --> 00:16:09,430
container in this case it's going to use

00:16:07,810 --> 00:16:11,740
a docker compose file because it's going

00:16:09,430 --> 00:16:14,320
to build multiple services and then it

00:16:11,740 --> 00:16:16,120
says which service do you want vs code

00:16:14,320 --> 00:16:17,980
to attach to vs code will only attach to

00:16:16,120 --> 00:16:20,230
one of the containers that I'm running

00:16:17,980 --> 00:16:22,600
and then you know where do you want them

00:16:20,230 --> 00:16:23,860
out the workspace and then you can

00:16:22,600 --> 00:16:25,840
include additional settings that only

00:16:23,860 --> 00:16:29,320
apply to this development container so

00:16:25,840 --> 00:16:31,090
for example you know it's that's where

00:16:29,320 --> 00:16:34,840
the Python path is do I want to turn

00:16:31,090 --> 00:16:36,430
linting on and then most importantly

00:16:34,840 --> 00:16:38,800
what extensions do I want to install

00:16:36,430 --> 00:16:42,340
into the container when it starts up and

00:16:38,800 --> 00:16:44,920
then and then so if I look at the docker

00:16:42,340 --> 00:16:47,620
compose file and this is just a

00:16:44,920 --> 00:16:49,780
pre-built image that that the vs code

00:16:47,620 --> 00:16:51,610
gives you it has an application service

00:16:49,780 --> 00:16:53,490
here so this defines the different

00:16:51,610 --> 00:16:56,560
services that docker compose will build

00:16:53,490 --> 00:16:59,230
and then so it's my app is defined by

00:16:56,560 --> 00:17:00,280
this docker file right here and so

00:16:59,230 --> 00:17:03,190
that's the image that's going to be

00:17:00,280 --> 00:17:06,250
built when my docker file runs and then

00:17:03,190 --> 00:17:08,440
that connects to a database which is

00:17:06,250 --> 00:17:10,660
going to be available on with the name

00:17:08,440 --> 00:17:12,370
DB on my local network inside of this

00:17:10,660 --> 00:17:15,870
container and that's just built from a

00:17:12,370 --> 00:17:18,220
standard Postgres image and I set up a

00:17:15,870 --> 00:17:22,209
simple password that I can connect to

00:17:18,220 --> 00:17:23,860
the database with so this container just

00:17:22,209 --> 00:17:25,000
finished opening well I don't know when

00:17:23,860 --> 00:17:27,370
it finished opening but it's finished

00:17:25,000 --> 00:17:31,090
opening and so now I can start working

00:17:27,370 --> 00:17:34,870
with it I've already got Python

00:17:31,090 --> 00:17:42,540
installed let me hide some of these so I

00:17:34,870 --> 00:17:48,100
can get more space back okay that's fine

00:17:42,540 --> 00:17:50,320
so now I can now let's start scaffolding

00:17:48,100 --> 00:17:52,150
our django application so first I'm

00:17:50,320 --> 00:17:53,770
going to create our requirements txt

00:17:52,150 --> 00:17:56,140
file that's going to include all the

00:17:53,770 --> 00:17:57,880
Python dependencies I want and I'll put

00:17:56,140 --> 00:18:02,260
Django in that

00:17:57,880 --> 00:18:04,960
and then I will install those

00:18:02,260 --> 00:18:06,430
requirements from my command line um so

00:18:04,960 --> 00:18:08,590
that will install Django and you notice

00:18:06,430 --> 00:18:11,130
that was super fast I'm pretty sure that

00:18:08,590 --> 00:18:14,830
these containers been mapped to two

00:18:11,130 --> 00:18:16,300
volume mount my my Python package cache

00:18:14,830 --> 00:18:18,940
so that that doesn't need to be

00:18:16,300 --> 00:18:20,260
recreated for every container I open so

00:18:18,940 --> 00:18:25,420
now that we've got Django installed we

00:18:20,260 --> 00:18:28,000
can run Django admin start project and

00:18:25,420 --> 00:18:30,610
we'll create a new site in this current

00:18:28,000 --> 00:18:35,880
folder and then that will give me my my

00:18:30,610 --> 00:18:42,460
Django application and then I can I can

00:18:35,880 --> 00:18:44,530
run that but in this case what I want to

00:18:42,460 --> 00:18:45,880
do is actually when I'm running this

00:18:44,530 --> 00:18:47,650
because it's running inside of the

00:18:45,880 --> 00:18:49,120
container and I want to talk to it from

00:18:47,650 --> 00:18:52,870
outside of the container I need to bind

00:18:49,120 --> 00:18:56,080
to 0.0.0.0 so that the site is available

00:18:52,870 --> 00:19:00,520
to external incoming requests so I'm

00:18:56,080 --> 00:19:03,100
gonna run that on port 8000 I'll get to

00:19:00,520 --> 00:19:08,710
the migrations in a minute and when I

00:19:03,100 --> 00:19:10,180
run so this one actually browse yet but

00:19:08,710 --> 00:19:13,030
I need to because I need to forward a

00:19:10,180 --> 00:19:15,160
port so I'll run I did ctrl shift P

00:19:13,030 --> 00:19:19,270
again and I'll say forward port to the

00:19:15,160 --> 00:19:21,070
container and it will it detected that

00:19:19,270 --> 00:19:23,440
port 8000 is being listened on so I'll

00:19:21,070 --> 00:19:27,250
select port 8000 and then I can open the

00:19:23,440 --> 00:19:33,420
browser and my new Django application

00:19:27,250 --> 00:19:33,420
will come up so we're off and running

00:19:34,140 --> 00:19:38,920
okay so next I want to configure this to

00:19:37,630 --> 00:19:42,190
actually talk to my Postgres database

00:19:38,920 --> 00:19:43,870
that I have if I actually go back to

00:19:42,190 --> 00:19:47,770
this container here my Postgres image is

00:19:43,870 --> 00:19:49,540
running there and just a quick tip you

00:19:47,770 --> 00:19:51,550
can actually attach a shell to this

00:19:49,540 --> 00:19:53,470
Postgres container so that if you want

00:19:51,550 --> 00:19:56,080
to run p sequel commands you can just

00:19:53,470 --> 00:19:58,450
type p sequel - you Postgres and then

00:19:56,080 --> 00:20:01,780
this will allow you to describe the

00:19:58,450 --> 00:20:07,600
tables and you know run your sequel

00:20:01,780 --> 00:20:09,160
queries so now to connect to my Postgres

00:20:07,600 --> 00:20:10,570
back-end i just need to change some of

00:20:09,160 --> 00:20:13,750
my settings here

00:20:10,570 --> 00:20:18,039
let's collapse that will use the

00:20:13,750 --> 00:20:23,649
Postgres QL engine and to use that we

00:20:18,039 --> 00:20:25,480
actually need to install the post crash

00:20:23,649 --> 00:20:29,049
driver it put that in a requirements

00:20:25,480 --> 00:20:31,570
that txt and then the database name to

00:20:29,049 --> 00:20:36,309
use is just Postgres that's the default

00:20:31,570 --> 00:20:41,049
and then user is also default Postgres

00:20:36,309 --> 00:20:43,629
and then the host is DB remember that

00:20:41,049 --> 00:20:48,159
was in our docker compose file as the

00:20:43,629 --> 00:20:49,360
name of the image or the name on the

00:20:48,159 --> 00:20:53,799
network that our database will be

00:20:49,360 --> 00:20:56,590
available on and then finally our super

00:20:53,799 --> 00:21:00,250
secret password and if someone manages

00:20:56,590 --> 00:21:09,159
to hack into my machine there welcome to

00:21:00,250 --> 00:21:12,669
my sample data ok so now when we run

00:21:09,159 --> 00:21:13,809
this I'll just do a quick so typically

00:21:12,669 --> 00:21:16,870
if this database didn't already exist

00:21:13,809 --> 00:21:18,039
you'd have to do a manage py migrate but

00:21:16,870 --> 00:21:22,210
the migrations have already been applied

00:21:18,039 --> 00:21:24,309
my data is created and now now I can run

00:21:22,210 --> 00:21:27,129
server again I'm however this time I'm

00:21:24,309 --> 00:21:30,070
going to set up the debugger so to set

00:21:27,129 --> 00:21:33,460
up the debugger with django we want it

00:21:30,070 --> 00:21:35,200
to always run that manage py migrate or

00:21:33,460 --> 00:21:37,299
manage people i run server command when

00:21:35,200 --> 00:21:40,419
we start so i'll go to the debug tab

00:21:37,299 --> 00:21:41,500
here and i'll click add configuration so

00:21:40,419 --> 00:21:43,330
this will create a debug configuration

00:21:41,500 --> 00:21:45,720
that i can use over and over again I'll

00:21:43,330 --> 00:21:51,399
start with this Django configuration and

00:21:45,720 --> 00:21:53,139
then I will select so this is just tells

00:21:51,399 --> 00:21:55,840
it how to launch Django and I'll just

00:21:53,139 --> 00:22:00,820
add an argument on here that specifies

00:21:55,840 --> 00:22:03,429
that that local port so now when I start

00:22:00,820 --> 00:22:09,840
debugging it'll automatically debug my

00:22:03,429 --> 00:22:15,129
Django app and my development server

00:22:09,840 --> 00:22:19,179
should be running so we'll go look a

00:22:15,129 --> 00:22:23,320
host there and if we go to our admin

00:22:19,179 --> 00:22:24,730
panel I previously ran the create super

00:22:23,320 --> 00:22:28,610
user command

00:22:24,730 --> 00:22:32,169
and there we go this is all set up with

00:22:28,610 --> 00:22:32,169
a Postgres database we have our back-end

00:22:32,649 --> 00:22:39,470
now I want to add some api's to this so

00:22:37,700 --> 00:22:41,000
you notice there's some models already

00:22:39,470 --> 00:22:46,190
built in with django users and groups

00:22:41,000 --> 00:22:48,950
i'd like to expose those as api's that i

00:22:46,190 --> 00:22:54,679
can access as a REST API I'll call those

00:22:48,950 --> 00:22:57,799
from my node back in later so I'm going

00:22:54,679 --> 00:23:00,970
to switch to a different container that

00:22:57,799 --> 00:23:05,090
I've already added some code to so I'll

00:23:00,970 --> 00:23:07,490
close this out and if you're switching

00:23:05,090 --> 00:23:10,220
between multiple containers you may want

00:23:07,490 --> 00:23:11,899
to come in here and just stop your old

00:23:10,220 --> 00:23:14,539
ones just because they'll be using the

00:23:11,899 --> 00:23:18,320
ports that you want so I'll just stop

00:23:14,539 --> 00:23:19,899
those and then I'll go to a deaf

00:23:18,320 --> 00:23:23,799
container back-end

00:23:19,899 --> 00:23:23,799
open this with vs code

00:23:31,130 --> 00:23:36,130
and then I'll select reopen in container

00:23:33,650 --> 00:23:38,390
and while that's opening we'll just

00:23:36,130 --> 00:23:41,530
let's make sure it's actually opening

00:23:38,390 --> 00:23:41,530
and then I'll go back to some slides

00:23:49,090 --> 00:23:52,929
I've had enough failure modes on this

00:23:50,860 --> 00:23:55,059
presentation that I know where it likely

00:23:52,929 --> 00:23:57,039
to fail okay so just a quick recap of

00:23:55,059 --> 00:24:01,179
where we are at so far so we created a

00:23:57,039 --> 00:24:02,919
new dev container using vs code and we

00:24:01,179 --> 00:24:05,139
did that by running the ad development

00:24:02,919 --> 00:24:07,539
container configuration files command we

00:24:05,139 --> 00:24:09,759
selected a pre-existing Python 3 and

00:24:07,539 --> 00:24:13,090
Postgres container and then we used the

00:24:09,759 --> 00:24:18,249
Django admin command to start a new site

00:24:13,090 --> 00:24:21,879
and we ran it on the local IP address

00:24:18,249 --> 00:24:23,919
and then set up port forwarding and I

00:24:21,879 --> 00:24:26,409
didn't cover this but one thing that

00:24:23,919 --> 00:24:28,389
that I did add to the docker compose

00:24:26,409 --> 00:24:30,700
file was to set up that port forwarding

00:24:28,389 --> 00:24:32,350
automatically just by adding this this

00:24:30,700 --> 00:24:33,639
list of ports here said every time I

00:24:32,350 --> 00:24:42,249
open the container those ports are

00:24:33,639 --> 00:24:48,159
always exposed and all right come back

00:24:42,249 --> 00:24:54,369
here I forgot to cover get but I'll get

00:24:48,159 --> 00:25:02,440
to that later so I've opened this this

00:24:54,369 --> 00:25:04,720
new dev container here and so to add the

00:25:02,440 --> 00:25:06,610
API code what I've just done is I

00:25:04,720 --> 00:25:08,350
followed the Django rest framework

00:25:06,610 --> 00:25:10,539
tutorial that's that's available at this

00:25:08,350 --> 00:25:13,450
link and I added the Django rest

00:25:10,539 --> 00:25:14,860
framework package and I'll just walk you

00:25:13,450 --> 00:25:21,539
through what that code looks like

00:25:14,860 --> 00:25:21,539
so I also did Django admin start app

00:25:23,009 --> 00:25:29,610
back-end to create the back-end so

00:25:26,919 --> 00:25:32,649
basically what what code we added here

00:25:29,610 --> 00:25:34,960
first we added some serializers that

00:25:32,649 --> 00:25:36,940
take those users and groups and tell

00:25:34,960 --> 00:25:41,470
Django rest framework how to serialize

00:25:36,940 --> 00:25:46,509
those into JSON objects and then we

00:25:41,470 --> 00:25:48,580
added some views that expose those users

00:25:46,509 --> 00:25:50,440
and groups as a set of REST API so this

00:25:48,580 --> 00:25:52,659
defines multiple endpoints for all your

00:25:50,440 --> 00:25:55,299
different HTTP verbs your get update

00:25:52,659 --> 00:26:00,759
post put those things and then finally

00:25:55,299 --> 00:26:02,770
we added those views as we've mounted

00:26:00,759 --> 00:26:05,200
those views at URL

00:26:02,770 --> 00:26:08,230
path of API and we've defined this

00:26:05,200 --> 00:26:11,050
router and registered it so again that's

00:26:08,230 --> 00:26:14,920
following the standard rest framework

00:26:11,050 --> 00:26:19,840
tutorial stuff so once we've done that

00:26:14,920 --> 00:26:22,590
let's go ahead and run the app again and

00:26:19,840 --> 00:26:31,000
we'll just see what that looks like now

00:26:22,590 --> 00:26:33,780
and so now if I go API oops now we get

00:26:31,000 --> 00:26:36,880
the Django rest framework browsable api

00:26:33,780 --> 00:26:38,170
we can go in here and we can click

00:26:36,880 --> 00:26:41,260
around look and look at the existing

00:26:38,170 --> 00:26:43,929
users that we have we can even create

00:26:41,260 --> 00:26:47,700
users and things like that so if I

00:26:43,929 --> 00:26:47,700
wanted to create a new user I'll just

00:26:48,240 --> 00:26:51,429
name them Jeff for whatever reason

00:26:50,559 --> 00:26:53,920
that's just what I'm feeling right now

00:26:51,429 --> 00:26:56,950
and we'll click post and then now that

00:26:53,920 --> 00:27:02,260
users added to the user list okay so we

00:26:56,950 --> 00:27:03,940
have an API and again that's the code we

00:27:02,260 --> 00:27:04,720
went through I'm just skipping through

00:27:03,940 --> 00:27:07,390
it for now

00:27:04,720 --> 00:27:08,770
and so let's just do while we're here

00:27:07,390 --> 00:27:11,050
let's just play around with a few more

00:27:08,770 --> 00:27:13,840
features of us code so first I'll

00:27:11,050 --> 00:27:16,000
configure tests so if we want to

00:27:13,840 --> 00:27:18,070
configure tests again I can run another

00:27:16,000 --> 00:27:19,870
command in my back-end I just have a few

00:27:18,070 --> 00:27:23,650
tests I've written you using unit tests

00:27:19,870 --> 00:27:27,250
so ctrl shift P or command shift P will

00:27:23,650 --> 00:27:29,350
run the configure test command and we

00:27:27,250 --> 00:27:30,580
support unit test PI tests and nose and

00:27:29,350 --> 00:27:32,440
unfortunately we don't support Jango

00:27:30,580 --> 00:27:34,960
unit tests but it's it's on our backlog

00:27:32,440 --> 00:27:36,220
so I'll select unit tests I'll tell it

00:27:34,960 --> 00:27:39,190
where those tests are there in the

00:27:36,220 --> 00:27:43,720
backend folder and they're named test

00:27:39,190 --> 00:27:45,640
start py so once I do that I can get the

00:27:43,720 --> 00:27:48,880
testing features of es code running here

00:27:45,640 --> 00:27:52,360
I can run tests or debug tests from here

00:27:48,880 --> 00:27:55,150
in code and I can also use a test

00:27:52,360 --> 00:27:57,220
Explorer to view and and run all of my

00:27:55,150 --> 00:27:58,540
tests so getting all this all that like

00:27:57,220 --> 00:28:00,550
I said all of the kind of features that

00:27:58,540 --> 00:28:05,170
that you have with vs Co they just and

00:28:00,550 --> 00:28:05,740
currently work here so now was just just

00:28:05,170 --> 00:28:09,670
for fun

00:28:05,740 --> 00:28:12,370
let's run the Django rest framework code

00:28:09,670 --> 00:28:15,880
through black to format it just to see

00:28:12,370 --> 00:28:16,750
what black things of this code so we'll

00:28:15,880 --> 00:28:17,740
run the format

00:28:16,750 --> 00:28:20,140
document command you can also

00:28:17,740 --> 00:28:22,660
right-click and do format document it

00:28:20,140 --> 00:28:25,960
will ask me what format I want to use

00:28:22,660 --> 00:28:29,410
I'll select black net will install black

00:28:25,960 --> 00:28:31,210
into the the container and now I

00:28:29,410 --> 00:28:32,260
actually have to run the format document

00:28:31,210 --> 00:28:35,410
the command again now that I've

00:28:32,260 --> 00:28:37,030
installed it so black just added some

00:28:35,410 --> 00:28:38,680
spaces and it changed the the single

00:28:37,030 --> 00:28:41,200
quotes double quotes okay that's

00:28:38,680 --> 00:28:42,910
interesting and then like I said I've

00:28:41,200 --> 00:28:48,430
got my source control here so I can see

00:28:42,910 --> 00:28:51,580
those changes and and I can actually

00:28:48,430 --> 00:28:53,020
commit these and and push them when vias

00:28:51,580 --> 00:28:54,820
code set up the container actually

00:28:53,020 --> 00:28:57,910
copied my git config file from my

00:28:54,820 --> 00:29:00,490
desktop so anything that I have on my

00:28:57,910 --> 00:29:02,140
local machine I can implicitly push to

00:29:00,490 --> 00:29:04,390
an access from the get with inside the

00:29:02,140 --> 00:29:13,330
container that's another nice thing that

00:29:04,390 --> 00:29:15,400
I didn't have to set up alright so let's

00:29:13,330 --> 00:29:20,950
go ahead and quickly add the react

00:29:15,400 --> 00:29:25,780
front-end here so let's close out all

00:29:20,950 --> 00:29:27,850
these files so inside of my docker file

00:29:25,780 --> 00:29:29,770
I have actually added to this one I've

00:29:27,850 --> 00:29:31,510
added just some apt-get commands that

00:29:29,770 --> 00:29:34,660
install node I'm pretty sure I got these

00:29:31,510 --> 00:29:36,490
from the node website just pasted those

00:29:34,660 --> 00:29:39,550
in here and then so now this container

00:29:36,490 --> 00:29:41,260
actually has node installed in it so I

00:29:39,550 --> 00:29:45,070
can use that to build the react

00:29:41,260 --> 00:29:47,800
front-end to do that I'm going to use a

00:29:45,070 --> 00:29:51,210
tool called create react app so create

00:29:47,800 --> 00:29:56,430
react app is is you know this isn't your

00:29:51,210 --> 00:29:58,750
your father's react anymore like create

00:29:56,430 --> 00:30:00,640
so I used to work with react a long time

00:29:58,750 --> 00:30:02,560
ago before we had create react app and

00:30:00,640 --> 00:30:03,880
it was just a mess but create react app

00:30:02,560 --> 00:30:05,260
makes things a lot easier because it

00:30:03,880 --> 00:30:08,860
packages all of the things that react

00:30:05,260 --> 00:30:09,970
needs into a very small package so we'll

00:30:08,860 --> 00:30:12,190
just run the npx

00:30:09,970 --> 00:30:16,720
create react app command to build a new

00:30:12,190 --> 00:30:19,750
front-end folder now again this actually

00:30:16,720 --> 00:30:22,990
takes I think like 10 minutes so I'm

00:30:19,750 --> 00:30:24,430
just going to cancel out of that and

00:30:22,990 --> 00:30:27,520
switch to a different container where

00:30:24,430 --> 00:30:30,600
I've already set this up this is a get

00:30:27,520 --> 00:30:30,600
up and go get coffee moment

00:30:30,640 --> 00:30:37,970
so let me close that and then we'll

00:30:34,700 --> 00:30:43,520
switch over to deaf container front end

00:30:37,970 --> 00:30:47,570
and then do the same code dot and then

00:30:43,520 --> 00:30:51,620
we'll just go ahead and reopen that in

00:30:47,570 --> 00:30:53,570
the container and while that's opening

00:30:51,620 --> 00:30:54,740
this take about 30 seconds or so I'll

00:30:53,570 --> 00:30:56,360
just start to look at some of the files

00:30:54,740 --> 00:30:59,659
that we have so after create react out

00:30:56,360 --> 00:31:02,480
ran it it created this front-end folder

00:30:59,659 --> 00:31:07,549
and that basically has my input source

00:31:02,480 --> 00:31:09,320
for react so react is a say I got to

00:31:07,549 --> 00:31:17,950
stop those old containers

00:31:09,320 --> 00:31:17,950
I already will try it again

00:31:27,580 --> 00:31:38,020
like I've confused myself alright so

00:31:35,890 --> 00:31:39,190
also a neat tip your recent files lets

00:31:38,020 --> 00:31:40,450
you pick between whether you want to

00:31:39,190 --> 00:31:41,710
open something inside of the container

00:31:40,450 --> 00:31:46,900
if you just want to open the folder

00:31:41,710 --> 00:31:49,330
normally so I think so this one I'll

00:31:46,900 --> 00:31:51,550
select I'll reopen this in the dev

00:31:49,330 --> 00:31:54,810
container okay so that's building so

00:31:51,550 --> 00:31:56,950
while that's building this one so

00:31:54,810 --> 00:31:59,760
basically the file is in this source

00:31:56,950 --> 00:32:03,720
folder those are all compiled into

00:31:59,760 --> 00:32:06,810
basically from the react syntax into

00:32:03,720 --> 00:32:14,890
this build folder that we have up here

00:32:06,810 --> 00:32:18,670
so this is like the this is JSX which is

00:32:14,890 --> 00:32:20,800
a mix of javascript in HTML it's a it's

00:32:18,670 --> 00:32:22,300
a react concept it's very divisive a lot

00:32:20,800 --> 00:32:24,760
of people don't like it but I personally

00:32:22,300 --> 00:32:26,920
find it really fun to work with but

00:32:24,760 --> 00:32:31,720
basically this is a new function that

00:32:26,920 --> 00:32:33,610
just returns a piece of HTML code I've

00:32:31,720 --> 00:32:35,860
got my CSS here I've got some tests and

00:32:33,610 --> 00:32:39,150
other things so like I said all this

00:32:35,860 --> 00:32:41,440
stuff gets compiled into you know

00:32:39,150 --> 00:32:44,470
mangled JavaScript and things like that

00:32:41,440 --> 00:32:48,160
and how this works is that there's an

00:32:44,470 --> 00:32:49,480
index.html which you can't really read

00:32:48,160 --> 00:32:51,910
here but basically this index dot HTML

00:32:49,480 --> 00:32:53,230
is a static indexed out HTML that

00:32:51,910 --> 00:32:57,070
includes all the JavaScript that got

00:32:53,230 --> 00:32:59,020
built by react and so that's the the

00:32:57,070 --> 00:33:00,840
page the page that we need to return for

00:32:59,020 --> 00:33:06,540
our users to be able to view the site

00:33:00,840 --> 00:33:11,110
and then I think okay so this is started

00:33:06,540 --> 00:33:13,330
so the first thing I'm going to do is

00:33:11,110 --> 00:33:16,030
start the node development server with

00:33:13,330 --> 00:33:18,250
NPM start and so this is going to give

00:33:16,030 --> 00:33:21,220
me a development server that I can use

00:33:18,250 --> 00:33:22,840
where I can edit my code on the fly and

00:33:21,220 --> 00:33:25,720
then the changes will be immediately

00:33:22,840 --> 00:33:27,190
reflected in the browser and but it

00:33:25,720 --> 00:33:28,750
won't this one actually build those

00:33:27,190 --> 00:33:32,620
files that I was talking about this is

00:33:28,750 --> 00:33:37,860
just for for local development and this

00:33:32,620 --> 00:33:37,860
also takes a minute to get kicked off

00:33:40,500 --> 00:33:47,470
so while that's running I'll just do a

00:33:44,680 --> 00:33:49,000
quick recap so we added the note to the

00:33:47,470 --> 00:33:49,710
image by adding these lines to the

00:33:49,000 --> 00:33:53,380
docker file

00:33:49,710 --> 00:33:55,390
we ran the create react app command

00:33:53,380 --> 00:33:58,570
which which generated that folder

00:33:55,390 --> 00:33:59,260
structure over there and our server is

00:33:58,570 --> 00:34:03,790
almost ready

00:33:59,260 --> 00:34:06,400
I'll get my browser going so this server

00:34:03,790 --> 00:34:07,930
is going to start on port 3000 and in

00:34:06,400 --> 00:34:09,880
this case this right now this isn't

00:34:07,930 --> 00:34:11,800
connected at all to my Django

00:34:09,880 --> 00:34:13,300
application this is just a node

00:34:11,800 --> 00:34:18,220
development server that's going to serve

00:34:13,300 --> 00:34:19,830
up some HTML for me so and the reason

00:34:18,220 --> 00:34:25,360
that I want that is that I can come in

00:34:19,830 --> 00:34:28,419
to my source folder my app KS and I can

00:34:25,360 --> 00:34:30,610
say well this changed some of this HTML

00:34:28,419 --> 00:34:34,510
code that says you know hello Django

00:34:30,610 --> 00:34:37,889
Khan I'm not very creative today and if

00:34:34,510 --> 00:34:41,889
that's all working correctly it should

00:34:37,889 --> 00:34:45,070
its recompiling and then the updates

00:34:41,889 --> 00:34:48,730
show up in my browser ok so I'm gonna

00:34:45,070 --> 00:34:50,050
switch this code over to another branch

00:34:48,730 --> 00:34:54,360
where I've written a little bit of code

00:34:50,050 --> 00:34:56,950
to call my back-end API the users API ok

00:34:54,360 --> 00:35:04,240
just throw away my changes before I

00:34:56,950 --> 00:35:06,970
switch branches so I'll switch over to

00:35:04,240 --> 00:35:10,540
that branch which has added a little bit

00:35:06,970 --> 00:35:13,950
of code to this API call

00:35:10,540 --> 00:35:16,030
hopefully ok

00:35:13,950 --> 00:35:18,790
so walking through this code a little

00:35:16,030 --> 00:35:20,950
bit so we just added a few things here

00:35:18,790 --> 00:35:22,720
so the way reactor works it's a

00:35:20,950 --> 00:35:25,840
unidirectional rendering thing you have

00:35:22,720 --> 00:35:28,060
some state and you have a render call

00:35:25,840 --> 00:35:29,800
that will just generate your HTML based

00:35:28,060 --> 00:35:31,300
on what that state is so for what we're

00:35:29,800 --> 00:35:32,980
gonna do here we're going to define a

00:35:31,300 --> 00:35:35,080
user's variable so we're gonna get the

00:35:32,980 --> 00:35:36,880
users from our API we're going to store

00:35:35,080 --> 00:35:39,070
it in this users variable so this

00:35:36,880 --> 00:35:40,210
initializes users and asset users call

00:35:39,070 --> 00:35:42,370
by the way this is I'm using the new

00:35:40,210 --> 00:35:44,710
react hooks that were recently released

00:35:42,370 --> 00:35:45,880
so this doesn't look like react has in

00:35:44,710 --> 00:35:50,599
the past it's actually a little bit

00:35:45,880 --> 00:35:52,640
cleaner so

00:35:50,599 --> 00:35:54,650
then I'll have this use effect call

00:35:52,640 --> 00:35:56,719
which which will get called when the

00:35:54,650 --> 00:35:59,299
page loads and that will fire off an API

00:35:56,719 --> 00:36:02,660
call to the backend to get my API users

00:35:59,299 --> 00:36:05,689
that will then return JSON and with that

00:36:02,660 --> 00:36:07,699
JSON I'll execute the set user's call

00:36:05,689 --> 00:36:10,339
which I've defined up here so that will

00:36:07,699 --> 00:36:12,259
update the state of my app and then when

00:36:10,339 --> 00:36:16,660
that state gets updated this render call

00:36:12,259 --> 00:36:19,849
will happen and it will use the users

00:36:16,660 --> 00:36:22,459
state here to generate a list of

00:36:19,849 --> 00:36:24,979
paragraphs which will show the users and

00:36:22,459 --> 00:36:26,719
the user email alright so that so this

00:36:24,979 --> 00:36:29,119
is these curly braces allow you to

00:36:26,719 --> 00:36:31,039
insert a little bit of JavaScript code

00:36:29,119 --> 00:36:33,920
and then that JavaScript code can

00:36:31,039 --> 00:36:36,529
generate HTML it's kind of confusing but

00:36:33,920 --> 00:36:39,679
I I like it

00:36:36,529 --> 00:36:48,739
so with that update this time let's go

00:36:39,679 --> 00:36:51,469
ahead and do NPM run build ah this is my

00:36:48,739 --> 00:36:54,410
favorite bug that I've come across and

00:36:51,469 --> 00:36:59,119
prepping for this talk to fix this bug I

00:36:54,410 --> 00:37:01,380
just go CD dot dot and then CD back into

00:36:59,119 --> 00:37:13,680
the folder

00:37:01,380 --> 00:37:15,630
and then it works cool so that's that's

00:37:13,680 --> 00:37:18,839
going to build with that's going to

00:37:15,630 --> 00:37:24,809
build the HTML and JavaScript that I

00:37:18,839 --> 00:37:27,299
have up in this build folder here and it

00:37:24,809 --> 00:37:28,920
should finish in a second

00:37:27,299 --> 00:37:32,969
oh and so while that's building I

00:37:28,920 --> 00:37:36,719
actually need to add a URL and endpoint

00:37:32,969 --> 00:37:38,910
they'll return the index.html so so now

00:37:36,719 --> 00:37:39,809
Django is going to serve up my react app

00:37:38,910 --> 00:37:42,209
I'm not going to use the note

00:37:39,809 --> 00:37:46,709
development server so to make that work

00:37:42,209 --> 00:37:50,940
what I do is I have I define a new index

00:37:46,709 --> 00:37:54,180
view and that basically just returns the

00:37:50,940 --> 00:37:56,400
the index.html from my front-end folder

00:37:54,180 --> 00:37:58,259
and in my settings

00:37:56,400 --> 00:38:03,150
the other important thing that I have to

00:37:58,259 --> 00:38:06,539
do in my settings is add this front-end

00:38:03,150 --> 00:38:09,359
folder to my static files list so

00:38:06,539 --> 00:38:11,549
there's so there I define the react app

00:38:09,359 --> 00:38:13,440
der and then I add the build static

00:38:11,549 --> 00:38:17,069
folder to the static files lifts that

00:38:13,440 --> 00:38:20,160
Django is able to find and the reason I

00:38:17,069 --> 00:38:21,630
do that is because this front-end folder

00:38:20,160 --> 00:38:22,859
has no Python code in it there's no

00:38:21,630 --> 00:38:24,239
Django application or anything

00:38:22,859 --> 00:38:27,299
associated with that so we just need to

00:38:24,239 --> 00:38:32,599
tell our back-end to return it so now

00:38:27,299 --> 00:38:35,969
that we've got that we can again we can

00:38:32,599 --> 00:38:38,690
run our back-end and we should see a new

00:38:35,969 --> 00:38:38,690
updated app

00:38:45,230 --> 00:38:50,460
and I'm apologize for the text wrapping

00:38:48,420 --> 00:38:52,170
okay so there we go we are react app it

00:38:50,460 --> 00:38:53,790
gets the API called it's showing us the

00:38:52,170 --> 00:38:55,770
list of users that we have in our

00:38:53,790 --> 00:39:03,150
database so that's kind of the basic

00:38:55,770 --> 00:39:05,070
application so again for the dev server

00:39:03,150 --> 00:39:08,070
we needed to add port 3000 to the map

00:39:05,070 --> 00:39:10,020
mapping and then we were able to edit

00:39:08,070 --> 00:39:12,750
code and reload and then another thing

00:39:10,020 --> 00:39:15,720
that that we that I've done here is in

00:39:12,750 --> 00:39:18,390
the package.json file i've i added this

00:39:15,720 --> 00:39:20,400
proxy command so that when i'm using

00:39:18,390 --> 00:39:23,010
when i am using the development server

00:39:20,400 --> 00:39:23,670
if there's any API calls that it doesn't

00:39:23,010 --> 00:39:25,230
recognize

00:39:23,670 --> 00:39:28,290
it'll just forward those on to the

00:39:25,230 --> 00:39:30,960
backend the django back-end API so

00:39:28,290 --> 00:39:32,250
that's just something you need to do for

00:39:30,960 --> 00:39:37,020
local development to make this setup

00:39:32,250 --> 00:39:40,740
work okay and then that's the code this

00:39:37,020 --> 00:39:43,380
is all for reading offline if you want

00:39:40,740 --> 00:39:45,120
it to follow through okay so now let's

00:39:43,380 --> 00:39:48,780
build a production version of this

00:39:45,120 --> 00:39:54,300
application so as I've said before this

00:39:48,780 --> 00:39:56,250
is all for purposes of making my life

00:39:54,300 --> 00:39:57,810
easier as a developer I can edit code

00:39:56,250 --> 00:39:59,250
and do all those things when I published

00:39:57,810 --> 00:40:00,600
a production I want to remove all these

00:39:59,250 --> 00:40:01,830
things that I have from the container

00:40:00,600 --> 00:40:03,510
and build something that's production

00:40:01,830 --> 00:40:06,150
ready in particular when I'm running

00:40:03,510 --> 00:40:08,100
manage Pui run server this web server

00:40:06,150 --> 00:40:09,450
won't handle production workload if you

00:40:08,100 --> 00:40:13,260
throw a load test at this it might

00:40:09,450 --> 00:40:17,190
actually just like hang and you know

00:40:13,260 --> 00:40:18,990
things like that so - so now I actually

00:40:17,190 --> 00:40:20,610
want to exit the development container

00:40:18,990 --> 00:40:24,600
and to do that I'm going to run another

00:40:20,610 --> 00:40:27,210
command called reopen locally so when I

00:40:24,600 --> 00:40:28,980
run reopen locally that just takes me

00:40:27,210 --> 00:40:34,550
outside of the dev container and

00:40:28,980 --> 00:40:40,980
actually I'll hit close here so before I

00:40:34,550 --> 00:40:43,290
do this I'm going to stop my my

00:40:40,980 --> 00:40:45,650
container so that the ports don't get

00:40:43,290 --> 00:40:45,650
used up

00:40:49,520 --> 00:40:54,690
okay and so I'm going to switch to

00:40:53,130 --> 00:40:56,640
another branch where I've added a new

00:40:54,690 --> 00:41:00,030
set of docker file isn't docker compose

00:40:56,640 --> 00:41:04,470
file so I'll switch to the production

00:41:00,030 --> 00:41:07,380
branch here and so here I've got these

00:41:04,470 --> 00:41:08,369
files the Ducker compose and docker file

00:41:07,380 --> 00:41:10,319
that I'm going to use to build my

00:41:08,369 --> 00:41:13,829
production image now there's a few small

00:41:10,319 --> 00:41:15,480
differences here so in this case I still

00:41:13,829 --> 00:41:18,000
have a local database I can use for

00:41:15,480 --> 00:41:19,380
testing but in this case I've tagged the

00:41:18,000 --> 00:41:21,390
image with the name of the container

00:41:19,380 --> 00:41:24,630
registry that I want to push it to when

00:41:21,390 --> 00:41:27,180
I'm done and then also I have it pulling

00:41:24,630 --> 00:41:29,640
environment variables from a dot M file

00:41:27,180 --> 00:41:32,040
and so this allows me to put passwords

00:41:29,640 --> 00:41:33,810
and connection strings into a file that

00:41:32,040 --> 00:41:35,760
is in my get ignore and will not get

00:41:33,810 --> 00:41:40,109
checked in and so I'm not putting any of

00:41:35,760 --> 00:41:42,839
that information into code and I have

00:41:40,109 --> 00:41:45,420
this repo comes with sample M sample

00:41:42,839 --> 00:41:48,839
where it's got you know here's the the

00:41:45,420 --> 00:41:55,349
template to fill out and I can use this

00:41:48,839 --> 00:42:00,000
I can just say CPM sample to dot F and

00:41:55,349 --> 00:42:01,530
then I'll start I'll start to build this

00:42:00,000 --> 00:42:03,329
I can actually right click and just say

00:42:01,530 --> 00:42:08,190
compose up and that will build that

00:42:03,329 --> 00:42:10,200
docker compose file and it will it will

00:42:08,190 --> 00:42:12,150
run the the containers in it so while

00:42:10,200 --> 00:42:13,829
this is building I'll keep explaining

00:42:12,150 --> 00:42:17,250
some of the different things that I've

00:42:13,829 --> 00:42:21,089
put into these darker files so in this

00:42:17,250 --> 00:42:22,230
case for the docker file before I just

00:42:21,089 --> 00:42:23,849
put everything into one image I

00:42:22,230 --> 00:42:26,400
installed node into the actual container

00:42:23,849 --> 00:42:28,290
in this case I'm actually going to to

00:42:26,400 --> 00:42:29,579
use node just to build the front end and

00:42:28,290 --> 00:42:30,960
then I'm going to take note out of the

00:42:29,579 --> 00:42:33,810
container and I'm going to do that using

00:42:30,960 --> 00:42:36,140
a concept called multistage builds so

00:42:33,810 --> 00:42:38,700
whenever you see multiple from

00:42:36,140 --> 00:42:40,680
declarations in a docker file it's using

00:42:38,700 --> 00:42:43,470
a multi-stage build so this first stage

00:42:40,680 --> 00:42:45,150
it takes a standard node container then

00:42:43,470 --> 00:42:47,400
it runs this weird-lookin command to

00:42:45,150 --> 00:42:50,520
apply all the variables in my den file

00:42:47,400 --> 00:42:55,470
and it runs the build and then I create

00:42:50,520 --> 00:42:56,970
a new Python container from from this

00:42:55,470 --> 00:42:58,680
pre-built image on docker hub in this

00:42:56,970 --> 00:43:01,109
case I'm using an engine X web server

00:42:58,680 --> 00:43:01,760
for serving the static files and it uses

00:43:01,109 --> 00:43:05,420
you

00:43:01,760 --> 00:43:07,880
the server for hosting the jingle

00:43:05,420 --> 00:43:10,070
application there's some configuration

00:43:07,880 --> 00:43:12,320
files but the key thing here is that it

00:43:10,070 --> 00:43:15,020
actually copies the output of the node

00:43:12,320 --> 00:43:16,940
build from that front end from the first

00:43:15,020 --> 00:43:18,380
stage and puts it into the second

00:43:16,940 --> 00:43:19,700
container so I've got the output of the

00:43:18,380 --> 00:43:21,050
node build but then I don't end up with

00:43:19,700 --> 00:43:24,920
a node runtime or any of that stuff in

00:43:21,050 --> 00:43:27,560
the production application and then the

00:43:24,920 --> 00:43:29,510
last step that I do is I run a Python

00:43:27,560 --> 00:43:31,460
manage py collect static so this will

00:43:29,510 --> 00:43:34,210
take all the static files and put them

00:43:31,460 --> 00:43:36,590
into a static files folder in my

00:43:34,210 --> 00:43:38,360
application and this is the static this

00:43:36,590 --> 00:43:40,790
is the folder that my nginx web server

00:43:38,360 --> 00:43:42,860
will serve and again I apply the data

00:43:40,790 --> 00:43:45,950
and file when I'm running that command

00:43:42,860 --> 00:43:49,000
so that it has the the various variables

00:43:45,950 --> 00:43:52,640
and I'll explain why in a minute

00:43:49,000 --> 00:43:56,930
okay so this is probably finished

00:43:52,640 --> 00:44:01,480
building by now alright so if I'd go to

00:43:56,930 --> 00:44:06,080
my local host 8,000

00:44:01,480 --> 00:44:09,020
of the container that I have so that

00:44:06,080 --> 00:44:11,180
that's good that that works and then

00:44:09,020 --> 00:44:12,710
again this is hosted using an engine X

00:44:11,180 --> 00:44:17,360
web server so if I look at the nginx

00:44:12,710 --> 00:44:19,280
configuration I've got it says okay

00:44:17,360 --> 00:44:22,010
hosts all static files basically put

00:44:19,280 --> 00:44:24,020
slash static to serve static files from

00:44:22,010 --> 00:44:26,660
the static files folder this is the

00:44:24,020 --> 00:44:29,600
output of the build and then host my

00:44:26,660 --> 00:44:33,980
Django application I'm using risk yet

00:44:29,600 --> 00:44:37,370
the root on port 8000 now I actually

00:44:33,980 --> 00:44:38,750
have my production secrets in a

00:44:37,370 --> 00:44:39,830
different end file that I have saved

00:44:38,750 --> 00:44:42,350
here and I'm not going to show you this

00:44:39,830 --> 00:44:43,880
file because that's the point

00:44:42,350 --> 00:44:47,030
and then that one actually defines if

00:44:43,880 --> 00:44:48,950
you look at the sample file here it

00:44:47,030 --> 00:44:51,110
actually defines a place to upload

00:44:48,950 --> 00:44:54,620
static files to using the Django

00:44:51,110 --> 00:44:56,000
storages library because for production

00:44:54,620 --> 00:44:57,770
typically I want my files to be

00:44:56,000 --> 00:45:00,590
available as my static files to be

00:44:57,770 --> 00:45:03,410
available on a CDN somewhere so I'll

00:45:00,590 --> 00:45:04,970
start this building again so now that

00:45:03,410 --> 00:45:06,950
I've changed my data file I have to

00:45:04,970 --> 00:45:08,330
rebuild everything so what these

00:45:06,950 --> 00:45:10,700
environment variables will do is while

00:45:08,330 --> 00:45:12,920
this is building it'll actually when it

00:45:10,700 --> 00:45:14,210
runs this collect static command it will

00:45:12,920 --> 00:45:14,609
actually take all the static files and

00:45:14,210 --> 00:45:15,989
upload

00:45:14,609 --> 00:45:19,579
them to a natural storage account that I

00:45:15,989 --> 00:45:21,299
have and that's connected to a CDN and

00:45:19,579 --> 00:45:23,309
when that's finished

00:45:21,299 --> 00:45:26,789
I'll just reload the container and to

00:45:23,309 --> 00:45:31,619
show you what that means so we're almost

00:45:26,789 --> 00:45:33,420
done here so right now when I'm loading

00:45:31,619 --> 00:45:35,970
these files all the static files come

00:45:33,420 --> 00:45:37,739
from my local host so after this is

00:45:35,970 --> 00:45:38,759
finished building and I also remove the

00:45:37,739 --> 00:45:40,609
dead end file from the container

00:45:38,759 --> 00:45:42,539
afterwards because it has my passwords

00:45:40,609 --> 00:45:45,059
so now that this is finished building

00:45:42,539 --> 00:45:47,789
when I reload this all of the static

00:45:45,059 --> 00:45:50,999
files are now surged served from Azure

00:45:47,789 --> 00:45:53,190
edge net and so that will make those

00:45:50,999 --> 00:45:55,079
files available distributed all over the

00:45:53,190 --> 00:45:59,339
world so that it's nice and fast for

00:45:55,079 --> 00:46:03,059
people who browse my website ok so just

00:45:59,339 --> 00:46:05,369
quick recap we reopen the folder locally

00:46:03,059 --> 00:46:07,079
we added some production docker files

00:46:05,369 --> 00:46:09,839
and we stored our secrets and a dot M

00:46:07,079 --> 00:46:12,029
file that's an example of what that dot

00:46:09,839 --> 00:46:16,410
n file looks like with my passwords and

00:46:12,029 --> 00:46:18,650
key removed and I walked you through

00:46:16,410 --> 00:46:20,789
what those production docker files and

00:46:18,650 --> 00:46:22,769
there's the configuration for the U

00:46:20,789 --> 00:46:26,849
whisky server and that's what picks up

00:46:22,769 --> 00:46:28,230
the whisky app for Django and then I

00:46:26,849 --> 00:46:30,119
also have once we have this container

00:46:28,230 --> 00:46:32,730
built you can easily just deploy it up

00:46:30,119 --> 00:46:34,650
to Azure just by using the azure app

00:46:32,730 --> 00:46:36,599
service extension that we have but

00:46:34,650 --> 00:46:40,319
that's a bonus I don't have time to walk

00:46:36,599 --> 00:46:42,960
through that today okay so that was a

00:46:40,319 --> 00:46:44,339
tour of attaching to an existing create

00:46:42,960 --> 00:46:45,960
container creating a new development

00:46:44,339 --> 00:46:47,880
container adding a react front-end and

00:46:45,960 --> 00:46:51,499
then building it for production the

00:46:47,880 --> 00:46:54,329
slides and code are available at the

00:46:51,499 --> 00:46:55,049
AKMs link up there that's HTTP colon

00:46:54,329 --> 00:46:58,289
slash slash

00:46:55,049 --> 00:47:00,930
akms follow our Python blog for any

00:46:58,289 --> 00:47:03,380
updates and follow us on Twitter thank

00:47:00,930 --> 00:47:03,380
you so much

00:47:04,190 --> 00:47:20,109
all right thank you tin

00:47:06,800 --> 00:47:20,109

YouTube URL: https://www.youtube.com/watch?v=hwHRI59iGlw


