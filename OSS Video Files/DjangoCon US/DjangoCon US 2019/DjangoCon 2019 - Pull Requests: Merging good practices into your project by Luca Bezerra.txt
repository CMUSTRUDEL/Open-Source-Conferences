Title: DjangoCon 2019 - Pull Requests: Merging good practices into your project by Luca Bezerra
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Pull Requests: Merging good practices into your project by Luca Bezerra

On average, developers spend 45% of their time fixing bugs and technical debt, instead of developing new features, had those bugs been caught during code review. The attendees will learn tips, tools, processes and recommended practices from my experience and from big players (Django, Facebook, etc).

This talk was presented at: https://2019.djangocon.us/talks/pull-requests-merging-good-practices/

LINKS:
Follow Luca Bezerra 👇
On Twitter: https://twitter.com/lucabezerra_
Official homepage: https://github.com/lucabezerra/

Follow DjangCon US 👇
https://twitter.com/djangocon

Follow DEFNA 👇
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:15,200 --> 00:00:21,140
first of all few disclaimers this is my

00:00:18,350 --> 00:00:24,260
first Jango cone so I'm very happy to be

00:00:21,140 --> 00:00:25,849
here also I like to give kudos to the

00:00:24,260 --> 00:00:27,680
folks who are transcribing these dogs

00:00:25,849 --> 00:00:29,990
because they're having a hard time and

00:00:27,680 --> 00:00:32,210
they're pretty accurate at it and they

00:00:29,990 --> 00:00:35,000
might not like me very much because I'll

00:00:32,210 --> 00:00:38,120
have to speak quite quite fast due to

00:00:35,000 --> 00:00:40,820
the time constraints but here we go so

00:00:38,120 --> 00:00:43,729
also if you guys want to follow along

00:00:40,820 --> 00:00:46,519
this talk this bitly link over there a

00:00:43,729 --> 00:00:48,650
bit that least like Jango co19 has a

00:00:46,519 --> 00:00:51,440
blog post with the links for the

00:00:48,650 --> 00:00:54,680
presentations that all of us from veinte

00:00:51,440 --> 00:00:57,739
are presenting here on Jango kong so

00:00:54,680 --> 00:00:59,540
here we go as said i'm president up

00:00:57,739 --> 00:01:01,430
representing i talk about pull requests

00:00:59,540 --> 00:01:03,559
merging good practices into your into

00:01:01,430 --> 00:01:05,960
your project and the single reason i

00:01:03,559 --> 00:01:08,330
chose to have this image over there is

00:01:05,960 --> 00:01:11,479
that next time you see a door that says

00:01:08,330 --> 00:01:13,900
for you remember it's a pull request so

00:01:11,479 --> 00:01:13,900
here we go

00:01:18,649 --> 00:01:23,479
as i mentioned my name is luka I'm a

00:01:21,680 --> 00:01:26,240
full-stack developer I have a master's

00:01:23,479 --> 00:01:28,399
in computer science I work mostly with

00:01:26,240 --> 00:01:32,659
Django and react maybe some other Python

00:01:28,399 --> 00:01:35,929
frameworks as well I work at veinte

00:01:32,659 --> 00:01:39,619
veinte is a team of experts from brazil

00:01:35,929 --> 00:01:42,229
we do development and consulting for to

00:01:39,619 --> 00:01:43,789
build products the right way and if you

00:01:42,229 --> 00:01:46,070
have any questions about development if

00:01:43,789 --> 00:01:48,020
you want your project to be implemented

00:01:46,070 --> 00:01:50,570
or improved in some way just reach out

00:01:48,020 --> 00:01:53,240
to us there's our website over there if

00:01:50,570 --> 00:01:54,109
you want to check it out so going to the

00:01:53,240 --> 00:01:57,409
content itself

00:01:54,109 --> 00:01:59,210
I imagine the most if not all of you

00:01:57,409 --> 00:02:01,429
have already dealt in some way with pro

00:01:59,210 --> 00:02:03,880
requests if you've heard about it if you

00:02:01,429 --> 00:02:06,229
have to actually work in a pull request

00:02:03,880 --> 00:02:08,569
and you probably have some ideas on how

00:02:06,229 --> 00:02:10,340
to do it but I believe that for all of

00:02:08,569 --> 00:02:13,310
us including me of course there's always

00:02:10,340 --> 00:02:14,569
ways to get better at it and some simple

00:02:13,310 --> 00:02:17,060
things can take you a long way

00:02:14,569 --> 00:02:19,640
in that process first of all let's ask

00:02:17,060 --> 00:02:22,760
why should we review code but instead of

00:02:19,640 --> 00:02:24,020
asking me let's ask the people there's a

00:02:22,760 --> 00:02:25,610
good article

00:02:24,020 --> 00:02:27,680
called the U teammate guide to cold

00:02:25,610 --> 00:02:30,440
reviews by coda C which I think it's

00:02:27,680 --> 00:02:33,440
quite a bold title by the way in which

00:02:30,440 --> 00:02:36,130
they've surveyed 682 developers

00:02:33,440 --> 00:02:38,780
regarding several different things and

00:02:36,130 --> 00:02:40,310
one of the things was on average what

00:02:38,780 --> 00:02:43,030
would they spend most of their time on

00:02:40,310 --> 00:02:45,650
on a daily basis so they said that

00:02:43,030 --> 00:02:47,090
approximately half at a time 51 percent

00:02:45,650 --> 00:02:49,720
of the time they spent developing new

00:02:47,090 --> 00:02:53,120
features and at the same time they spent

00:02:49,720 --> 00:02:55,160
70% of the time working on technical Deb

00:02:53,120 --> 00:02:57,650
and 28 percent of the time working on

00:02:55,160 --> 00:02:59,690
both fixing so that amounts for 45

00:02:57,650 --> 00:03:01,910
percent of their time or almost the

00:02:59,690 --> 00:03:03,230
other half of their time so they're half

00:03:01,910 --> 00:03:05,720
of the time working new features have

00:03:03,230 --> 00:03:09,350
her time working on not new features and

00:03:05,720 --> 00:03:12,170
that's that's because usually that that

00:03:09,350 --> 00:03:15,200
can be improved with good processes in

00:03:12,170 --> 00:03:17,330
code review in code management fixing

00:03:15,200 --> 00:03:19,730
stuff before it breaks so you don't have

00:03:17,330 --> 00:03:21,830
to spend so much time on it they were

00:03:19,730 --> 00:03:24,260
also asked what was the change in your

00:03:21,830 --> 00:03:26,330
development process that had the biggest

00:03:24,260 --> 00:03:28,400
impact to code quality and of course

00:03:26,330 --> 00:03:31,610
they've mentioned a ton of things like

00:03:28,400 --> 00:03:33,500
tools testing automation but the thing

00:03:31,610 --> 00:03:35,900
that stood out the most was code reviews

00:03:33,500 --> 00:03:37,850
so even though usually you hear people

00:03:35,900 --> 00:03:40,610
saying that reviewing code is kind of

00:03:37,850 --> 00:03:43,060
boring people still think it's it's very

00:03:40,610 --> 00:03:46,520
variable and it brings a lot of

00:03:43,060 --> 00:03:48,290
improvement to the process they were

00:03:46,520 --> 00:03:50,510
also asked if they will review code

00:03:48,290 --> 00:03:53,780
before or after deploying the code to

00:03:50,510 --> 00:03:56,959
production I know it's a weird question

00:03:53,780 --> 00:03:58,720
for some of us some people review the

00:03:56,959 --> 00:04:02,090
code after the deploying to production

00:03:58,720 --> 00:04:04,550
most of the people review it before our

00:04:02,090 --> 00:04:07,160
weird amount of people reveal it like

00:04:04,550 --> 00:04:10,610
both after and before the deployed

00:04:07,160 --> 00:04:13,730
production and similar number of people

00:04:10,610 --> 00:04:15,200
don't review code at all and they're

00:04:13,730 --> 00:04:16,850
probably the ones responsible for this

00:04:15,200 --> 00:04:19,400
bug know if you guys are familiar with

00:04:16,850 --> 00:04:21,440
it it was the iOS calculator bug where

00:04:19,400 --> 00:04:27,230
you sum up one plus two plus three in

00:04:21,440 --> 00:04:28,700
with equal 24 so yeah they probably

00:04:27,230 --> 00:04:31,460
didn't test it very much didn't review

00:04:28,700 --> 00:04:34,820
the code so the authors of that study

00:04:31,460 --> 00:04:36,770
came to a shocking conclusion that they

00:04:34,820 --> 00:04:37,910
found out that doing code reviews before

00:04:36,770 --> 00:04:40,220
the deployment

00:04:37,910 --> 00:04:46,130
was far more beneficial than not doing

00:04:40,220 --> 00:04:47,660
code reviews at all so yeah my HRA they

00:04:46,130 --> 00:04:49,940
also came to another conclusion which is

00:04:47,660 --> 00:04:52,280
interesting that doing code reviews both

00:04:49,940 --> 00:04:53,900
before and after the deployment well

00:04:52,280 --> 00:04:55,970
it's kind of the same thing as just

00:04:53,900 --> 00:04:57,770
reviewing it before after the deployment

00:04:55,970 --> 00:04:59,870
and the reason for that according to

00:04:57,770 --> 00:05:01,400
them is that when you're reviewing

00:04:59,870 --> 00:05:03,290
something that you know somebody else is

00:05:01,400 --> 00:05:04,880
gonna review it after you don't pay as

00:05:03,290 --> 00:05:06,740
much attention as you as you would if

00:05:04,880 --> 00:05:10,340
you if you it was the only revision that

00:05:06,740 --> 00:05:13,640
you were doing that code so for a few

00:05:10,340 --> 00:05:15,140
common errors regarding code review some

00:05:13,640 --> 00:05:17,900
people say that code review is a chore

00:05:15,140 --> 00:05:19,220
or they say they don't review code at

00:05:17,900 --> 00:05:20,990
all because it's not important or they

00:05:19,220 --> 00:05:24,110
don't have time for it or just keep the

00:05:20,990 --> 00:05:27,560
code review for the deadline and I know

00:05:24,110 --> 00:05:28,940
this is like I've been in the position

00:05:27,560 --> 00:05:31,610
of saying I'll skip the coder if you do

00:05:28,940 --> 00:05:33,890
to the other line I think maybe a lot of

00:05:31,610 --> 00:05:35,300
us have been and it's very tempting but

00:05:33,890 --> 00:05:36,110
we gotta remember that when you're

00:05:35,300 --> 00:05:37,670
reviewing code

00:05:36,110 --> 00:05:39,050
you're not only improving the quality of

00:05:37,670 --> 00:05:40,520
the process and the project that you're

00:05:39,050 --> 00:05:43,340
working you but you're also learning

00:05:40,520 --> 00:05:44,690
you're learning new ways to to implement

00:05:43,340 --> 00:05:46,400
things you're learning new things about

00:05:44,690 --> 00:05:49,880
the language of framework you work with

00:05:46,400 --> 00:05:51,530
and you're learning up more about your

00:05:49,880 --> 00:05:52,760
project maybe areas of your project that

00:05:51,530 --> 00:05:55,160
you don't know yet

00:05:52,760 --> 00:05:57,680
and also while you're learning you're

00:05:55,160 --> 00:06:00,470
also getting paid to learn so it's like

00:05:57,680 --> 00:06:03,800
that's the best of both worlds right

00:06:00,470 --> 00:06:05,690
and for some best practices here and I

00:06:03,800 --> 00:06:08,990
go through them in a bit of a

00:06:05,690 --> 00:06:10,700
topic-based fashion so forgive me if

00:06:08,990 --> 00:06:14,780
it's too quick it's just due to the time

00:06:10,700 --> 00:06:16,430
constraint one great good practice

00:06:14,780 --> 00:06:19,250
regarding code reviews having pull

00:06:16,430 --> 00:06:21,500
requests templates this is because we as

00:06:19,250 --> 00:06:23,600
human beings tend to be lazy and our

00:06:21,500 --> 00:06:25,790
memory is very error-prone so we can't

00:06:23,600 --> 00:06:28,060
just trust ourselves or our our

00:06:25,790 --> 00:06:30,230
colleagues to remember everything that

00:06:28,060 --> 00:06:31,730
we are supposed to fill out when

00:06:30,230 --> 00:06:33,710
creating a pull request so having a

00:06:31,730 --> 00:06:36,290
template that says everything that the

00:06:33,710 --> 00:06:38,090
developer has to input in order for the

00:06:36,290 --> 00:06:40,730
reviewer to properly review it it's very

00:06:38,090 --> 00:06:42,680
good on github you can just create a

00:06:40,730 --> 00:06:45,740
pull request template file markdown file

00:06:42,680 --> 00:06:47,600
on the root of your project on git lab

00:06:45,740 --> 00:06:49,820
we just create a markdown flying insider

00:06:47,600 --> 00:06:51,510
get like that with lab folder and on

00:06:49,820 --> 00:06:55,980
bitbucket you can go into setting

00:06:51,510 --> 00:06:59,010
and configure it there we you can also

00:06:55,980 --> 00:07:01,080
use a few other tips like status checks

00:06:59,010 --> 00:07:03,870
having status checks in your configured

00:07:01,080 --> 00:07:05,460
in your repository allows you for allows

00:07:03,870 --> 00:07:07,590
you to have a continuous integration

00:07:05,460 --> 00:07:09,270
server for example which is going to run

00:07:07,590 --> 00:07:12,300
your builds for every branch that you

00:07:09,270 --> 00:07:13,980
create and it's gonna it won't allow the

00:07:12,300 --> 00:07:16,320
branch to be actually merged into master

00:07:13,980 --> 00:07:18,600
whatever your main branch is until it

00:07:16,320 --> 00:07:20,040
has best surgeon status checks like has

00:07:18,600 --> 00:07:21,930
it best all the front end and back end

00:07:20,040 --> 00:07:25,590
tests has it test all the winter that's

00:07:21,930 --> 00:07:28,260
error adding guideline files as well is

00:07:25,590 --> 00:07:30,510
a great way to tell people how to

00:07:28,260 --> 00:07:32,070
contribute to your to your project if

00:07:30,510 --> 00:07:33,780
it's an open source project for example

00:07:32,070 --> 00:07:35,730
and people don't know how should they

00:07:33,780 --> 00:07:37,260
like they've made a fix and they don't

00:07:35,730 --> 00:07:41,030
know how to submit it I don't know how

00:07:37,260 --> 00:07:45,540
to create the pull request also creating

00:07:41,030 --> 00:07:47,370
approval or merge rules so as if you if

00:07:45,540 --> 00:07:51,270
someone is making a change in a specific

00:07:47,370 --> 00:07:53,300
file you can have for example your

00:07:51,270 --> 00:07:56,700
repository configured in a way that

00:07:53,300 --> 00:07:58,470
unless someone else some specific person

00:07:56,700 --> 00:08:00,540
approves that pull request it cannot be

00:07:58,470 --> 00:08:02,580
merged for that specific file so you can

00:08:00,540 --> 00:08:04,470
kind of protect specific files there may

00:08:02,580 --> 00:08:07,100
be two important for your project you

00:08:04,470 --> 00:08:10,770
can also define push rules for example

00:08:07,100 --> 00:08:13,830
your pull request the branch of the pull

00:08:10,770 --> 00:08:15,870
request must begin with a JIRA ticket

00:08:13,830 --> 00:08:19,710
number or something like that so you

00:08:15,870 --> 00:08:21,390
keep everything organized another thing

00:08:19,710 --> 00:08:23,130
that's very interesting is good flow

00:08:21,390 --> 00:08:24,990
maybe some of you are already familiar

00:08:23,130 --> 00:08:28,110
with it git flow is a consistent

00:08:24,990 --> 00:08:30,330
architecture that ensures that branches

00:08:28,110 --> 00:08:31,530
are always up to date so the idea is

00:08:30,330 --> 00:08:32,669
that whenever you're going to build a

00:08:31,530 --> 00:08:36,510
new future you're going to branch off

00:08:32,669 --> 00:08:40,590
the master branch so that you're pulling

00:08:36,510 --> 00:08:42,780
from the most up-to-date code and you're

00:08:40,590 --> 00:08:45,210
also not risking conflict because

00:08:42,780 --> 00:08:48,180
everybody is pulling from that same same

00:08:45,210 --> 00:08:49,500
branch get flow also suggest that you

00:08:48,180 --> 00:08:52,260
create a separate branch for each

00:08:49,500 --> 00:08:53,820
feature so the point is maybe you are

00:08:52,260 --> 00:08:57,180
working in a specific part of the

00:08:53,820 --> 00:08:59,760
project like let's say a payment system

00:08:57,180 --> 00:09:01,320
of your product and you're fixing

00:08:59,760 --> 00:09:04,920
something in the logic and somebody says

00:09:01,320 --> 00:09:06,629
oh like the the buy button and the pin

00:09:04,920 --> 00:09:08,970
payment systems should be green instead

00:09:06,629 --> 00:09:10,350
of blue and could you also make that

00:09:08,970 --> 00:09:12,269
change and you say okay I'm already

00:09:10,350 --> 00:09:14,459
working on that on that section of the

00:09:12,269 --> 00:09:16,230
code so I'll just change it but if if

00:09:14,459 --> 00:09:17,639
you do that and maybe your main feature

00:09:16,230 --> 00:09:19,889
that you're working on

00:09:17,639 --> 00:09:21,540
gets like a lot of comments a lot of

00:09:19,889 --> 00:09:24,179
change requests in the pull requests

00:09:21,540 --> 00:09:26,369
you're gonna actually hold off that that

00:09:24,179 --> 00:09:27,600
color change which was a super small

00:09:26,369 --> 00:09:30,209
change that you could have deployed very

00:09:27,600 --> 00:09:31,529
quickly until you actually finish the

00:09:30,209 --> 00:09:33,299
whole feature so you're actually holding

00:09:31,529 --> 00:09:36,689
back features that could have been

00:09:33,299 --> 00:09:38,759
deployed super quickly so I think a

00:09:36,689 --> 00:09:40,230
great way to think about this is to

00:09:38,759 --> 00:09:42,239
remember that branches are cheap and

00:09:40,230 --> 00:09:44,519
they bring great flexibilities so you

00:09:42,239 --> 00:09:46,379
can just push it push something else

00:09:44,519 --> 00:09:49,829
that's super small and it's gonna bring

00:09:46,379 --> 00:09:51,869
a great value value while you work on

00:09:49,829 --> 00:09:55,529
stuff that's bigger and gonna require

00:09:51,869 --> 00:09:59,189
more time another great great tip here

00:09:55,529 --> 00:10:01,949
is to look out for the PR size so if you

00:09:59,189 --> 00:10:04,109
look at this if you look at this image

00:10:01,949 --> 00:10:08,910
right here this is a PR with 71 files

00:10:04,109 --> 00:10:10,649
that have been changed and well-defined

00:10:08,910 --> 00:10:12,360
issues when you're when you are creating

00:10:10,649 --> 00:10:14,579
the the issues in your sprint for your

00:10:12,360 --> 00:10:16,259
sprint or your backlog if you have

00:10:14,579 --> 00:10:18,839
well-defined issues usually they're

00:10:16,259 --> 00:10:20,699
well-well broken down they tend to

00:10:18,839 --> 00:10:22,980
generate smaller PR so that's something

00:10:20,699 --> 00:10:24,720
that's not just up to the developer who

00:10:22,980 --> 00:10:26,910
is doing the change but also for the

00:10:24,720 --> 00:10:29,069
people who are actually managing how the

00:10:26,910 --> 00:10:30,600
issues are gonna be distributed so if

00:10:29,069 --> 00:10:33,239
you look at the as I was mentioning if

00:10:30,600 --> 00:10:34,169
you look at those 71 files ain't nobody

00:10:33,239 --> 00:10:37,470
got time for that

00:10:34,169 --> 00:10:40,169
so probably whoever's gonna probably

00:10:37,470 --> 00:10:41,549
whoever's gonna review that it's gonna

00:10:40,169 --> 00:10:43,439
have like a decrease in the review

00:10:41,549 --> 00:10:45,149
quality because if you have like five

00:10:43,439 --> 00:10:46,559
files to review in a pro request that's

00:10:45,149 --> 00:10:48,929
okay you're gonna spend your time too

00:10:46,559 --> 00:10:50,579
early but you have 71 files or probably

00:10:48,929 --> 00:10:53,759
just gonna go through them like

00:10:50,579 --> 00:10:56,279
diagonally and hope it's a it's working

00:10:53,759 --> 00:10:57,329
fine so you're gonna have a shorter

00:10:56,279 --> 00:11:01,679
attention span and a short attention

00:10:57,329 --> 00:11:03,869
span usually equals more bugs and now an

00:11:01,679 --> 00:11:06,359
analogy that I like to make is that pull

00:11:03,869 --> 00:11:08,970
requests are kind of like kitchen sink

00:11:06,359 --> 00:11:11,429
so I kind of need your input on this one

00:11:08,970 --> 00:11:13,709
now if you look at these two images

00:11:11,429 --> 00:11:16,049
which thing would you be more likely to

00:11:13,709 --> 00:11:18,499
put a new empty dish in like the full

00:11:16,049 --> 00:11:22,499
one or the empty one

00:11:18,499 --> 00:11:25,079
which one yanti one you would put do it

00:11:22,499 --> 00:11:29,579
well that there was not the answer is

00:11:25,079 --> 00:11:31,290
expected for but okay oh my analogy when

00:11:29,579 --> 00:11:33,540
you have something that's already full

00:11:31,290 --> 00:11:34,889
you just think like okay just another

00:11:33,540 --> 00:11:37,110
dish it's not gonna make any difference

00:11:34,889 --> 00:11:40,230
but if you're if you have this like this

00:11:37,110 --> 00:11:41,399
clean super nice-looking sink if you put

00:11:40,230 --> 00:11:44,549
an empty dish there you're gonna be like

00:11:41,399 --> 00:11:48,629
this is kinda you know this is not good

00:11:44,549 --> 00:11:49,860
I like my sink to between so poor

00:11:48,629 --> 00:11:51,749
requests are kind of like that if you

00:11:49,860 --> 00:11:54,989
start piling up whole requests that you

00:11:51,749 --> 00:11:56,699
got a review you would tend to just like

00:11:54,989 --> 00:11:59,309
the more you get you just don't care

00:11:56,699 --> 00:12:01,499
anymore so an idea here is to make a

00:11:59,309 --> 00:12:04,649
habit so maybe reserve a few days of

00:12:01,499 --> 00:12:07,079
your a few minutes of your day to review

00:12:04,649 --> 00:12:09,779
poor requests so reasonably sized

00:12:07,079 --> 00:12:11,429
reasonably sized PRS usually shouldn't

00:12:09,779 --> 00:12:14,059
take much more than a few minutes at

00:12:11,429 --> 00:12:17,399
your day like another 30 minutes and

00:12:14,059 --> 00:12:19,379
also you could define days of the week

00:12:17,399 --> 00:12:20,939
to empty the queue so for example you

00:12:19,379 --> 00:12:23,249
can say that every Wednesday no matter

00:12:20,939 --> 00:12:24,779
what I'm gonna empty all the pure ours

00:12:23,249 --> 00:12:27,119
that I might there are on my queue I'm

00:12:24,779 --> 00:12:28,769
gonna review all of them even if it if

00:12:27,119 --> 00:12:30,480
it means that I'm just gonna work on

00:12:28,769 --> 00:12:32,100
review in pr's the whole day because you

00:12:30,480 --> 00:12:34,919
gotta also remember that maybe you're

00:12:32,100 --> 00:12:36,959
not in the mood for that but the more

00:12:34,919 --> 00:12:38,579
you wait to review PRS the more features

00:12:36,959 --> 00:12:40,169
are gonna be delayed to be deployed to

00:12:38,579 --> 00:12:43,529
production so you're actually holding

00:12:40,169 --> 00:12:46,290
back the project also try to always

00:12:43,529 --> 00:12:47,879
write clear commit messages so avoid the

00:12:46,290 --> 00:12:50,429
first one the top one which just says

00:12:47,879 --> 00:12:51,779
fix PR comments and write maybe a

00:12:50,429 --> 00:12:54,209
paragraph which is going to take you

00:12:51,779 --> 00:12:56,220
like 30 seconds to write and it makes it

00:12:54,209 --> 00:12:57,809
clear what what word changes you did so

00:12:56,220 --> 00:12:59,699
maybe if you want to go back in time and

00:12:57,809 --> 00:13:01,439
revert back to some commit you know

00:12:59,699 --> 00:13:03,629
where the change was made was made what

00:13:01,439 --> 00:13:05,819
was done there and it really helps in

00:13:03,629 --> 00:13:10,100
the overall organization so remember to

00:13:05,819 --> 00:13:12,269
talk about how not just what you did

00:13:10,100 --> 00:13:13,889
there's something here about positive

00:13:12,269 --> 00:13:15,959
and negative feedback so here in the

00:13:13,889 --> 00:13:18,720
left side for you guys I think at the

00:13:15,959 --> 00:13:20,600
right time maybe some of you have seen

00:13:18,720 --> 00:13:24,029
this is an answer from linus torvalds

00:13:20,600 --> 00:13:27,299
towards a guy who who created a PR I

00:13:24,029 --> 00:13:30,509
think for the Linux kernel and Linus is

00:13:27,299 --> 00:13:32,340
not the most polite person and he's

00:13:30,509 --> 00:13:34,050
known for that but especially here

00:13:32,340 --> 00:13:35,400
and you've got to remember there's a

00:13:34,050 --> 00:13:37,200
human on the other side of the code

00:13:35,400 --> 00:13:38,940
review and by the way it's on between

00:13:37,200 --> 00:13:40,860
quotation marks because it's the name of

00:13:38,940 --> 00:13:42,900
an article if you guys want to read it

00:13:40,860 --> 00:13:44,940
it's very nice you should also remember

00:13:42,900 --> 00:13:46,440
that positive feedback doesn't mean to

00:13:44,940 --> 00:13:48,330
always agree with the person you can

00:13:46,440 --> 00:13:51,210
give you disagree of the person giving a

00:13:48,330 --> 00:13:52,920
positive feedback when you do post when

00:13:51,210 --> 00:13:54,930
you give positive feedback people feel

00:13:52,920 --> 00:13:56,250
more inclined to expose ideas and

00:13:54,930 --> 00:14:00,140
because they know that they won't be

00:13:56,250 --> 00:14:03,330
judged there won't be like maybe judge

00:14:00,140 --> 00:14:07,080
and if it brings the idea of the

00:14:03,330 --> 00:14:09,060
fail-fast way of thinking so people are

00:14:07,080 --> 00:14:11,970
gonna be more inclined to exposing their

00:14:09,060 --> 00:14:14,010
ideas and there are years they're gonna

00:14:11,970 --> 00:14:15,810
be put into trial you're gonna find the

00:14:14,010 --> 00:14:17,490
errors much sooner or maybe find that

00:14:15,810 --> 00:14:19,170
the idea is not viable enough and

00:14:17,490 --> 00:14:21,839
they're gonna you're not going to spend

00:14:19,170 --> 00:14:23,880
as much time like working on it to in

00:14:21,839 --> 00:14:25,950
order to like buy it by the end of the

00:14:23,880 --> 00:14:27,390
of the project you find out the idea

00:14:25,950 --> 00:14:29,400
doesn't work so you just spend a lot of

00:14:27,390 --> 00:14:32,850
time a lot of money in it you just

00:14:29,400 --> 00:14:35,070
failed fast and of course if you if you

00:14:32,850 --> 00:14:37,200
provide positive feedback it perpetuates

00:14:35,070 --> 00:14:38,730
positive behavior so whoever received

00:14:37,200 --> 00:14:41,040
that positive feedback is probably gonna

00:14:38,730 --> 00:14:44,760
give positive feedback to other people

00:14:41,040 --> 00:14:47,220
as well when working with poor requests

00:14:44,760 --> 00:14:48,870
there's usually two main roles which is

00:14:47,220 --> 00:14:51,900
being the author of the requester and

00:14:48,870 --> 00:14:54,240
the reviewer as the author I think the

00:14:51,900 --> 00:14:55,980
good the the best idea here is to always

00:14:54,240 --> 00:14:58,200
describe the issue in the pull requests

00:14:55,980 --> 00:14:59,640
not just point to the card or ticket

00:14:58,200 --> 00:15:01,440
because maybe sometimes you're just

00:14:59,640 --> 00:15:05,010
gonna put in there in the description

00:15:01,440 --> 00:15:06,120
oh this fixes but three to four four but

00:15:05,010 --> 00:15:07,680
the person who is reviewing that it's

00:15:06,120 --> 00:15:08,790
gonna have to click on that link go to

00:15:07,680 --> 00:15:10,589
the go to the issue

00:15:08,790 --> 00:15:12,420
read the description maybe read through

00:15:10,589 --> 00:15:13,560
a conversation understand that maybe

00:15:12,420 --> 00:15:16,080
some of the requirements have changed

00:15:13,560 --> 00:15:18,900
and maybe the person is going to review

00:15:16,080 --> 00:15:20,820
it and find something that he or she

00:15:18,900 --> 00:15:22,290
thinks it from because the requirements

00:15:20,820 --> 00:15:24,660
actually changed throughout like some

00:15:22,290 --> 00:15:26,940
conversation so if you just take some

00:15:24,660 --> 00:15:28,709
time to write what was the issue and

00:15:26,940 --> 00:15:31,380
what did you do it makes everyone's life

00:15:28,709 --> 00:15:33,620
much easier as a reviewer remember to

00:15:31,380 --> 00:15:36,270
always ask questions don't make demands

00:15:33,620 --> 00:15:38,160
so instead of just saying fix that thing

00:15:36,270 --> 00:15:39,930
why don't you say like shouldn't it be

00:15:38,160 --> 00:15:44,640
like this so it's the much more polite

00:15:39,930 --> 00:15:46,209
and nicer way to say it also don't say

00:15:44,640 --> 00:15:48,519
like why is this variable doing

00:15:46,209 --> 00:15:50,379
nothing you could also say it instead I

00:15:48,519 --> 00:15:54,459
don't see this variable being used baby

00:15:50,379 --> 00:15:56,559
should remove it because sometimes it's

00:15:54,459 --> 00:15:58,540
something that you might not be seen

00:15:56,559 --> 00:16:00,579
that the person who wrote the code has a

00:15:58,540 --> 00:16:02,559
wife thought about that and you give the

00:16:00,579 --> 00:16:04,660
person the the opportunity to explain

00:16:02,559 --> 00:16:07,300
him or herself and maybe it's something

00:16:04,660 --> 00:16:07,899
that you didn't catch it at first but

00:16:07,300 --> 00:16:10,720
anything

00:16:07,899 --> 00:16:13,029
oh yeah direct that actually makes sense

00:16:10,720 --> 00:16:15,339
remember that you are not a linter to

00:16:13,029 --> 00:16:17,410
give imperative instructions nor you're

00:16:15,339 --> 00:16:19,449
talking to an AI assistant you are a

00:16:17,410 --> 00:16:21,670
human being talking to another one so

00:16:19,449 --> 00:16:24,339
you wouldn't like to be talked in in a

00:16:21,670 --> 00:16:25,990
negative way so try to remember that

00:16:24,339 --> 00:16:29,499
when you're reviewing someone else's

00:16:25,990 --> 00:16:32,679
code another good practice is having a

00:16:29,499 --> 00:16:35,019
minimum of X approvals so of course it

00:16:32,679 --> 00:16:37,300
depends on a team size but the idea is

00:16:35,019 --> 00:16:39,100
to avoid scenarios where you say oh I

00:16:37,300 --> 00:16:40,329
reviewed your code review mine we both

00:16:39,100 --> 00:16:43,300
the proof each other's code and that's

00:16:40,329 --> 00:16:45,670
okay let's go home I do have kind of a

00:16:43,300 --> 00:16:47,470
real-life example of that I used to work

00:16:45,670 --> 00:16:50,980
at a company that had geographically

00:16:47,470 --> 00:16:53,559
separated teams and there was something

00:16:50,980 --> 00:16:55,179
happen with the folks at the other the

00:16:53,559 --> 00:16:56,649
other country the team that was in the

00:16:55,179 --> 00:16:58,689
other country where they would review

00:16:56,649 --> 00:17:00,999
their own code without passing it to us

00:16:58,689 --> 00:17:04,750
which was not the kind of the policy

00:17:00,999 --> 00:17:06,520
that we had established and every now

00:17:04,750 --> 00:17:08,829
and then their code would come with come

00:17:06,520 --> 00:17:10,419
to us with bugs so I don't know if the

00:17:08,829 --> 00:17:11,829
review process was not good enough where

00:17:10,419 --> 00:17:13,809
you're just keeping the review I don't

00:17:11,829 --> 00:17:15,939
know but that would happen it would also

00:17:13,809 --> 00:17:18,579
break the team unity we win we will end

00:17:15,939 --> 00:17:20,649
up like amongst ourselves saying oh

00:17:18,579 --> 00:17:23,230
those guys they always bring like the

00:17:20,649 --> 00:17:26,020
Earthship broken code and you would

00:17:23,230 --> 00:17:27,459
create like a rivalry feeling between

00:17:26,020 --> 00:17:30,580
the teams even though we were a single

00:17:27,459 --> 00:17:32,890
team this practices this practice also

00:17:30,580 --> 00:17:35,230
ensures that at least expose one people

00:17:32,890 --> 00:17:36,760
know the code so one being the person

00:17:35,230 --> 00:17:38,890
who wrote it and X being the number of

00:17:36,760 --> 00:17:40,779
people who review the code so that's

00:17:38,890 --> 00:17:43,059
actually good for management as well so

00:17:40,779 --> 00:17:44,890
if the person who wrote the code may be

00:17:43,059 --> 00:17:46,690
in a sick day or something someone else

00:17:44,890 --> 00:17:48,700
has some knowledge about the code we can

00:17:46,690 --> 00:17:49,409
can review it and fix a bug or something

00:17:48,700 --> 00:17:54,520
like that

00:17:49,409 --> 00:17:57,460
Atlassian suggests that X is I'm sorry

00:17:54,520 --> 00:18:00,400
at lesson suggest that you assign

00:17:57,460 --> 00:18:02,290
reviewers like if you need like

00:18:00,400 --> 00:18:06,040
to a minimum of two approvals you assign

00:18:02,290 --> 00:18:07,930
1.5 times two so three or two put to 2.5

00:18:06,040 --> 00:18:10,630
depending on the team size so you can

00:18:07,930 --> 00:18:12,520
actually speed up the like how how soon

00:18:10,630 --> 00:18:16,030
the pull request is going to be reviewed

00:18:12,520 --> 00:18:17,920
because you're gonna have more people

00:18:16,030 --> 00:18:19,480
assigned to it so whoever's had is

00:18:17,920 --> 00:18:22,840
available it's gonna review that that

00:18:19,480 --> 00:18:24,670
will request sooner another tip is to

00:18:22,840 --> 00:18:27,070
always include screenshots on your why

00:18:24,670 --> 00:18:29,230
or UX changes the cliche says it's a

00:18:27,070 --> 00:18:31,600
picture mm is worth a thousand words and

00:18:29,230 --> 00:18:33,250
also some changes are very small some

00:18:31,600 --> 00:18:35,320
changes are like you're in the context

00:18:33,250 --> 00:18:37,630
you can see them very easily but someone

00:18:35,320 --> 00:18:40,690
who's reviewing doesn't know so you they

00:18:37,630 --> 00:18:43,630
might not be obvious using get blank

00:18:40,690 --> 00:18:45,400
usually we write we run get blamed

00:18:43,630 --> 00:18:47,230
because we wanna know who screwed up

00:18:45,400 --> 00:18:49,630
something in the code but in this case

00:18:47,230 --> 00:18:51,670
it's also very useful to finding out who

00:18:49,630 --> 00:18:53,380
you should assign to review your code

00:18:51,670 --> 00:18:56,020
maybe you're new to that codebase maybe

00:18:53,380 --> 00:18:57,310
you don't know exactly that part and you

00:18:56,020 --> 00:18:58,930
don't know who to assign if you don't

00:18:57,310 --> 00:19:00,820
get playing probably the person who

00:18:58,930 --> 00:19:04,060
appears the most is probably the person

00:19:00,820 --> 00:19:07,390
like recommended to to review the pull

00:19:04,060 --> 00:19:10,600
request also let the automated tools

00:19:07,390 --> 00:19:12,490
that I need epi observations so don't be

00:19:10,600 --> 00:19:14,740
that person who keeps saying oh you

00:19:12,490 --> 00:19:16,690
forgot the semicolon here or your

00:19:14,740 --> 00:19:19,270
writing game okay instead of snake case

00:19:16,690 --> 00:19:22,450
I have a process in your team where you

00:19:19,270 --> 00:19:25,480
have linkers you have pre-commit routine

00:19:22,450 --> 00:19:27,580
that checks for that so that you don't

00:19:25,480 --> 00:19:29,110
need to be the one doing it and being

00:19:27,580 --> 00:19:32,200
the that annoying person that everybody

00:19:29,110 --> 00:19:34,990
hates remember to always teach and not

00:19:32,200 --> 00:19:37,000
just tell how to do things so I'm gonna

00:19:34,990 --> 00:19:39,460
show an example about that but when

00:19:37,000 --> 00:19:42,550
you're like suggesting a change in

00:19:39,460 --> 00:19:44,080
someone else's PR teach why that's wrong

00:19:42,550 --> 00:19:45,940
why that should be done differently

00:19:44,080 --> 00:19:48,550
don't just tell because otherwise the

00:19:45,940 --> 00:19:50,170
person won't actually learn and when

00:19:48,550 --> 00:19:52,120
something breaks after code has been

00:19:50,170 --> 00:19:53,680
reviewed and deployed remember to also

00:19:52,120 --> 00:19:55,180
share the fault because it has gone

00:19:53,680 --> 00:19:56,920
through your eyes even though you were

00:19:55,180 --> 00:19:58,330
not the one who wrote it but you've

00:19:56,920 --> 00:20:01,270
reviewed it so it's kind of your fault

00:19:58,330 --> 00:20:02,920
as well we don't we don't we don't want

00:20:01,270 --> 00:20:04,990
to enforce the policy of pointing

00:20:02,920 --> 00:20:06,220
fingers at people but the person who

00:20:04,990 --> 00:20:08,290
wrote the code is already gonna be under

00:20:06,220 --> 00:20:10,630
pressure of being the author of that so

00:20:08,290 --> 00:20:14,080
help the person with that as long big

00:20:10,630 --> 00:20:16,570
tips about it github has

00:20:14,080 --> 00:20:20,409
some keywords of feature so if you write

00:20:16,570 --> 00:20:22,179
in up here for example clothes found a

00:20:20,409 --> 00:20:24,159
three to four four it will actually

00:20:22,179 --> 00:20:26,039
close that issue when you merge the poor

00:20:24,159 --> 00:20:30,460
request so you don't have to worry about

00:20:26,039 --> 00:20:32,679
managing your issues you can also get

00:20:30,460 --> 00:20:33,820
permalink to ship code snippet so it's

00:20:32,679 --> 00:20:35,710
easier to reference when you're

00:20:33,820 --> 00:20:37,870
reviewing code or mention into someone

00:20:35,710 --> 00:20:39,610
there are some tools like octo hint

00:20:37,870 --> 00:20:42,490
refine a big bucket and refine a github

00:20:39,610 --> 00:20:44,169
which are browser extensions for you to

00:20:42,490 --> 00:20:46,480
have syntax highlighting amongst other

00:20:44,169 --> 00:20:48,580
things that help your reviewing code on

00:20:46,480 --> 00:20:51,850
those platforms like you would see it in

00:20:48,580 --> 00:20:54,309
your text editor review apps from a

00:20:51,850 --> 00:20:57,820
rogue hero go and deploy previews from

00:20:54,309 --> 00:20:59,830
that we file are some tools that they

00:20:57,820 --> 00:21:02,169
they allow you to actually deploy

00:20:59,830 --> 00:21:03,880
changes from a specific branch or you've

00:21:02,169 --> 00:21:08,080
just created and are requesting the full

00:21:03,880 --> 00:21:11,110
review to public URL so you can actually

00:21:08,080 --> 00:21:13,389
see your product your project running on

00:21:11,110 --> 00:21:16,120
the web and maybe who's reviewing it can

00:21:13,389 --> 00:21:19,330
access the real URL instead of having to

00:21:16,120 --> 00:21:21,460
run the project in their machine so

00:21:19,330 --> 00:21:24,130
that's a very nice obviously paid

00:21:21,460 --> 00:21:27,220
feature and linkers as I've mentioned

00:21:24,130 --> 00:21:30,730
before winters are very very helpful for

00:21:27,220 --> 00:21:32,080
a number of things if you access this

00:21:30,730 --> 00:21:34,630
talk you're gonna click on this link

00:21:32,080 --> 00:21:36,789
earth there's a that's actually link for

00:21:34,630 --> 00:21:40,269
talk by Flavia juveniles with really

00:21:36,789 --> 00:21:43,809
great about winters some insights that

00:21:40,269 --> 00:21:46,419
we got from Vinton remember to warn

00:21:43,809 --> 00:21:48,340
people on slack when things have changed

00:21:46,419 --> 00:21:51,519
the status on the pull request review

00:21:48,340 --> 00:21:53,740
thing so if you finished fixing the

00:21:51,519 --> 00:21:55,809
suggestions or you finished reviewing to

00:21:53,740 --> 00:21:57,850
alert the person owns like instead of

00:21:55,809 --> 00:21:59,169
just relying on email or repository

00:21:57,850 --> 00:22:00,970
notifications because some people

00:21:59,169 --> 00:22:03,610
sometimes check images like twice a day

00:22:00,970 --> 00:22:06,519
and it might take a few hours until the

00:22:03,610 --> 00:22:08,889
next check and also remember to always

00:22:06,519 --> 00:22:11,019
test first the feature and then review

00:22:08,889 --> 00:22:12,130
the code because if you test the feature

00:22:11,019 --> 00:22:14,049
and you find out the features not

00:22:12,130 --> 00:22:15,220
working it's not worth reviewing the

00:22:14,049 --> 00:22:17,169
code because it's probably gonna change

00:22:15,220 --> 00:22:19,000
something is broken and the author is

00:22:17,169 --> 00:22:20,799
gonna have to rewrite the code so you're

00:22:19,000 --> 00:22:23,559
gonna have to work twice if you actually

00:22:20,799 --> 00:22:25,899
review the code first and finally some

00:22:23,559 --> 00:22:27,380
real-world examples they're mostly from

00:22:25,899 --> 00:22:30,049
their Django

00:22:27,380 --> 00:22:33,049
you can you I'm not sure if you can read

00:22:30,049 --> 00:22:34,940
it well from there but it's basically

00:22:33,049 --> 00:22:36,620
someone sent a pull request to the

00:22:34,940 --> 00:22:39,860
Django repository the person was

00:22:36,620 --> 00:22:41,660
assigned to review it said there's some

00:22:39,860 --> 00:22:43,010
conflicts please can you resolve this

00:22:41,660 --> 00:22:46,220
first so it's being as polite as

00:22:43,010 --> 00:22:48,650
possible the author is not very used to

00:22:46,220 --> 00:22:50,570
the pull request flow it doesn't know

00:22:48,650 --> 00:22:53,120
exactly how it works and then the

00:22:50,570 --> 00:22:54,919
authors like very patiently explained

00:22:53,120 --> 00:22:56,390
something that for maybe for some of us

00:22:54,919 --> 00:22:58,730
who are already experienced with for

00:22:56,390 --> 00:23:01,190
requests would be like super obvious he

00:22:58,730 --> 00:23:04,130
points out where he can find the

00:23:01,190 --> 00:23:06,440
conflict in his code like the arrow

00:23:04,130 --> 00:23:08,600
signs the equal signs that divide what

00:23:06,440 --> 00:23:13,490
what the current one what an incoming

00:23:08,600 --> 00:23:14,780
change so yeah I've highlighted here he

00:23:13,490 --> 00:23:17,000
says can you please resolve the

00:23:14,780 --> 00:23:18,650
conflicts first and then he says at some

00:23:17,000 --> 00:23:20,750
point you must have pulled the rebate

00:23:18,650 --> 00:23:23,900
with master so check for the signs

00:23:20,750 --> 00:23:26,600
that's where the conflicts are another

00:23:23,900 --> 00:23:29,870
example here is when I was talking about

00:23:26,600 --> 00:23:31,850
teaching not just telling the reviewer

00:23:29,870 --> 00:23:33,919
is again saying oh I use to struggling

00:23:31,850 --> 00:23:35,630
with that maybe if it wasn't Python show

00:23:33,919 --> 00:23:37,520
the error could be this but if since

00:23:35,630 --> 00:23:39,650
it's Python 3 it's probably something

00:23:37,520 --> 00:23:41,120
else so he's not just saying oh do it

00:23:39,650 --> 00:23:43,400
like this because it's the correct thing

00:23:41,120 --> 00:23:45,650
it's actually telling how it should be

00:23:43,400 --> 00:23:49,039
done and why it should work like that

00:23:45,650 --> 00:23:52,549
and a suggestion below here's just

00:23:49,039 --> 00:23:54,440
someone suggesting for the person to

00:23:52,549 --> 00:23:56,059
look at the guidelines of the project so

00:23:54,440 --> 00:23:57,140
having guidelines is also important for

00:23:56,059 --> 00:23:59,780
people to actually know how to

00:23:57,140 --> 00:24:02,390
contribute to your project and here's I

00:23:59,780 --> 00:24:04,100
think it's the last example the

00:24:02,390 --> 00:24:05,900
reviewers suggested for someone to

00:24:04,100 --> 00:24:07,850
create a unit test for the changes

00:24:05,900 --> 00:24:10,820
they're making the person didn't

00:24:07,850 --> 00:24:12,950
actually know how to do it he kind of

00:24:10,820 --> 00:24:14,330
explained to it to the person where

00:24:12,950 --> 00:24:16,370
should where should the tests leave

00:24:14,330 --> 00:24:18,830
because the person doesn't have the

00:24:16,370 --> 00:24:21,409
obligation of knowing where how you

00:24:18,830 --> 00:24:23,360
should project configured and also

00:24:21,409 --> 00:24:26,090
there's a second part of it that he

00:24:23,360 --> 00:24:28,070
commits the the reviewer comments in a

00:24:26,090 --> 00:24:31,309
specific part of the code and instead of

00:24:28,070 --> 00:24:34,280
just saying this should be named it is

00:24:31,309 --> 00:24:37,309
as do you mean a and say if naming

00:24:34,280 --> 00:24:39,049
settings dick so he gave the the author

00:24:37,309 --> 00:24:40,460
the opportunity of explaining him or

00:24:39,049 --> 00:24:42,170
herself and

00:24:40,460 --> 00:24:43,760
the author actually came with an

00:24:42,170 --> 00:24:45,680
explanation saying why he didn't think

00:24:43,760 --> 00:24:46,610
he should be like that so maybe that's

00:24:45,680 --> 00:24:49,490
something you hadn't thought about

00:24:46,610 --> 00:24:51,710
before and there's the opportunity for

00:24:49,490 --> 00:24:56,540
the author to explain and finally

00:24:51,710 --> 00:24:59,330
there's one more thing we do a printer

00:24:56,540 --> 00:25:01,370
we like checklists very much and we've

00:24:59,330 --> 00:25:03,350
created a checklist for code review and

00:25:01,370 --> 00:25:05,420
management it's not something that you

00:25:03,350 --> 00:25:07,070
review you use it like for every pull

00:25:05,420 --> 00:25:09,680
request but something that you might

00:25:07,070 --> 00:25:11,810
want to go through for establishing your

00:25:09,680 --> 00:25:14,300
code review and management process so if

00:25:11,810 --> 00:25:18,320
you access this URL bit ugly flash for

00:25:14,300 --> 00:25:21,140
request checklist you can access it the

00:25:18,320 --> 00:25:24,290
interesting thing is that it is a cache

00:25:21,140 --> 00:25:26,240
page so if you select the options there

00:25:24,290 --> 00:25:28,370
there are check boxes they stay selected

00:25:26,240 --> 00:25:30,620
for like next time you access it it's

00:25:28,370 --> 00:25:32,360
open source so if anyone anyone wants to

00:25:30,620 --> 00:25:33,740
contribute maybe add something change

00:25:32,360 --> 00:25:34,490
something you find a typo or something

00:25:33,740 --> 00:25:36,640
like that

00:25:34,490 --> 00:25:40,720
feel free and it's free to use and share

00:25:36,640 --> 00:25:40,720
and that's it thank you very much

00:25:43,780 --> 00:25:47,840
thank you for that that was a very

00:25:45,530 --> 00:25:50,390
interesting so I'm thinking of a

00:25:47,840 --> 00:25:53,270
scenario where you have like a senior

00:25:50,390 --> 00:25:56,210
developer who is overseeing the work of

00:25:53,270 --> 00:25:58,130
several junior developers and you know

00:25:56,210 --> 00:25:59,810
the senior developer obviously reviews

00:25:58,130 --> 00:26:02,030
the code for the junior developers but

00:25:59,810 --> 00:26:03,650
how do you do you have any advice for

00:26:02,030 --> 00:26:04,790
doing it the other way around when

00:26:03,650 --> 00:26:07,250
there's not necessarily as much

00:26:04,790 --> 00:26:08,810
oversight of the senior developers work

00:26:07,250 --> 00:26:11,060
and there might be like political

00:26:08,810 --> 00:26:13,280
conflicts there might be a little bit

00:26:11,060 --> 00:26:15,290
weird just so just so I'm clear

00:26:13,280 --> 00:26:16,370
information about like the junior

00:26:15,290 --> 00:26:19,490
developer reviewing the senior

00:26:16,370 --> 00:26:21,410
developers cold that it possibly yeah I

00:26:19,490 --> 00:26:23,360
think a good idea for that would be to

00:26:21,410 --> 00:26:24,560
have multiple people reviewing the cold

00:26:23,360 --> 00:26:26,180
maybe somebody who's a bit more

00:26:24,560 --> 00:26:28,520
experienced and also having the junior

00:26:26,180 --> 00:26:32,240
develop or review it so I can get it the

00:26:28,520 --> 00:26:34,550
experience and actually learn the like

00:26:32,240 --> 00:26:39,680
practices that maybe maybe not familiar

00:26:34,550 --> 00:26:41,290
with but I wouldn't I wouldn't suggest

00:26:39,680 --> 00:26:43,610
to have just a junior developer

00:26:41,290 --> 00:26:45,020
reviewing it I would always suggest have

00:26:43,610 --> 00:26:49,010
something someone more experienced

00:26:45,020 --> 00:26:52,940
reviewing with him or her know if you

00:26:49,010 --> 00:26:58,430
answer your question you always all

00:26:52,940 --> 00:27:00,710
three viewers test the code all the

00:26:58,430 --> 00:27:03,320
reviewers test the code like you

00:27:00,710 --> 00:27:06,860
download it and test it if for example

00:27:03,320 --> 00:27:09,950
you have to have two reviewers the two

00:27:06,860 --> 00:27:11,420
reviewers download and test the code you

00:27:09,950 --> 00:27:14,750
mean like one person reviews the other

00:27:11,420 --> 00:27:16,580
person testicle know if all the

00:27:14,750 --> 00:27:19,310
reviewers that are assigned to that pool

00:27:16,580 --> 00:27:21,200
request should download and test the

00:27:19,310 --> 00:27:25,370
code because that's really

00:27:21,200 --> 00:27:28,160
time-consuming so I'm not sure if I

00:27:25,370 --> 00:27:32,720
understood your question 100% so you're

00:27:28,160 --> 00:27:34,460
like are you asking about if the same

00:27:32,720 --> 00:27:39,080
person should review in testicle that it

00:27:34,460 --> 00:27:41,600
yes oh well I think that's that's my

00:27:39,080 --> 00:27:43,340
personal opinion of course but I think

00:27:41,600 --> 00:27:45,680
that's worth it like it is time

00:27:43,340 --> 00:27:47,600
consuming of course but I think you've

00:27:45,680 --> 00:27:49,580
got to have an understanding of how the

00:27:47,600 --> 00:27:51,470
feature works in order to review the

00:27:49,580 --> 00:27:53,390
code properly and you won't do it if

00:27:51,470 --> 00:27:57,330
unless you actually test it manually you

00:27:53,390 --> 00:27:59,470
do the keyway so I think it's worth it

00:27:57,330 --> 00:28:01,750
if it's all the time we have we have a

00:27:59,470 --> 00:28:03,760
another talk in a couple minutes here so

00:28:01,750 --> 00:28:06,500
thank you

00:28:03,760 --> 00:28:19,769
[Applause]

00:28:06,500 --> 00:28:19,769

YouTube URL: https://www.youtube.com/watch?v=Uf-JzdYellc


