Title: DjangoCon 2019 -  Prepping Your Project for Production by Peter Baumgartner
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 -  Prepping Your Project for Production by Peter Baumgartner

Django does a great job following the Python aphorism:

There should be one-- and preferably only one --obvious way to do it.

...until it comes to production deployment. This talk will lead users through the myriad of options to a production environment that is secure, stable, and easy to maintain.

This talk was presented at: https://2019.djangocon.us/talks/prepping-your-project-for-production/

LINKS:
Follow Peter Baumgartner ðŸ‘‡
On Twitter: https://twitter.com/ipmb
Official homepage: https://lincolnloop.com/team/peter-baumgartner/

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,410 --> 00:00:20,689
all right thank you

00:00:16,369 --> 00:00:22,790
I'm Peter Baumgartner founder at Lincoln

00:00:20,689 --> 00:00:24,980
loop we're a Gengo consulting and web

00:00:22,790 --> 00:00:27,500
agency so we built Django sites for

00:00:24,980 --> 00:00:30,830
clients and help clients with deploying

00:00:27,500 --> 00:00:33,320
and designing and tuning and and all

00:00:30,830 --> 00:00:36,230
that stuff I've been doing DevOps and

00:00:33,320 --> 00:00:38,239
sysadmin for a lot of years so I've been

00:00:36,230 --> 00:00:40,400
deploying django sites for a long time

00:00:38,239 --> 00:00:42,800
kind of seeing things that work things

00:00:40,400 --> 00:00:46,309
that don't work it's a dangerous world

00:00:42,800 --> 00:00:48,530
out there there's lots of pitfalls and

00:00:46,309 --> 00:00:52,729
so hopefully this talk kind of helps you

00:00:48,530 --> 00:00:55,640
avoid some of those real quick on my

00:00:52,729 --> 00:00:57,320
philosophy generally we're gonna try to

00:00:55,640 --> 00:01:00,049
keep things as simple as possible

00:00:57,320 --> 00:01:02,150
the fewer moving parts the better the

00:01:00,049 --> 00:01:03,170
the kind of less technology they submit

00:01:02,150 --> 00:01:07,299
somebody else that you have to offend

00:01:03,170 --> 00:01:12,110
depend on the better but we do want to

00:01:07,299 --> 00:01:15,049
maintain stability security performance

00:01:12,110 --> 00:01:16,700
and observability which is kind of a

00:01:15,049 --> 00:01:18,020
fancy word for you want to be able to

00:01:16,700 --> 00:01:21,560
see what the heck's going on with your

00:01:18,020 --> 00:01:26,359
application logs response times errors

00:01:21,560 --> 00:01:27,799
things like that so this is the basic

00:01:26,359 --> 00:01:32,240
talk overview here we're gonna go

00:01:27,799 --> 00:01:33,259
through on the left side we've got kind

00:01:32,240 --> 00:01:36,109
of all the things that are necessary

00:01:33,259 --> 00:01:38,689
just to get your application up onto a

00:01:36,109 --> 00:01:40,909
server somewhere and then on the right

00:01:38,689 --> 00:01:42,890
side we're going to talk about kind of

00:01:40,909 --> 00:01:45,850
next steps from there and other

00:01:42,890 --> 00:01:49,789
considerations you want to think about

00:01:45,850 --> 00:01:53,090
so first up is hosting I'm gonna take

00:01:49,789 --> 00:01:54,499
this talk from kind of assuming that you

00:01:53,090 --> 00:01:55,700
know you don't have a lot of experience

00:01:54,499 --> 00:01:57,560
with this you just want to get your

00:01:55,700 --> 00:01:59,780
application running on the internet

00:01:57,560 --> 00:02:00,770
somewhere there's a bazillion different

00:01:59,780 --> 00:02:03,200
options

00:02:00,770 --> 00:02:05,810
the analogy I'm going to use is like

00:02:03,200 --> 00:02:09,500
your business and your you need an

00:02:05,810 --> 00:02:12,500
office to operate so what type of office

00:02:09,500 --> 00:02:13,520
do you choose first up is

00:02:12,500 --> 00:02:15,740
platform-as-a-service

00:02:13,520 --> 00:02:17,900
this is like a co-working space you can

00:02:15,740 --> 00:02:19,970
walk in with your laptop and you're like

00:02:17,900 --> 00:02:22,349
up and running that's a platform

00:02:19,970 --> 00:02:24,880
as-a-service you bring code and

00:02:22,349 --> 00:02:27,099
that's it there's a bunch of providers

00:02:24,880 --> 00:02:31,330
that offer this Heroku is kind of like

00:02:27,099 --> 00:02:34,530
the the most popular one but lots of

00:02:31,330 --> 00:02:38,020
other ones pros with this approach are

00:02:34,530 --> 00:02:39,550
they handle all the servers for you this

00:02:38,020 --> 00:02:41,860
is kind of the original serverless

00:02:39,550 --> 00:02:45,130
platform it's you know managed and

00:02:41,860 --> 00:02:47,050
monitored all that stuff it's supported

00:02:45,130 --> 00:02:48,550
so you can call and ask somebody or you

00:02:47,050 --> 00:02:50,950
know send in an email and ask for help

00:02:48,550 --> 00:02:55,209
specific to your application stack which

00:02:50,950 --> 00:02:57,130
is kind of unique it also may include

00:02:55,209 --> 00:02:58,630
backing services like your database and

00:02:57,130 --> 00:03:00,610
cache you might be able to just click a

00:02:58,630 --> 00:03:01,810
button and have one of those where some

00:03:00,610 --> 00:03:05,620
of the other options it's not quite as

00:03:01,810 --> 00:03:07,390
easy cons it's you know you may be

00:03:05,620 --> 00:03:10,569
sharing infrastructure with neighbors

00:03:07,390 --> 00:03:13,299
most likely performance could suffer a

00:03:10,569 --> 00:03:14,950
little bit there you generally have to

00:03:13,299 --> 00:03:16,989
kind of operate inside whatever

00:03:14,950 --> 00:03:21,130
framework they give you so you may have

00:03:16,989 --> 00:03:23,799
less flexibility and I put cost with an

00:03:21,130 --> 00:03:25,930
asterisk next to it because sure the

00:03:23,799 --> 00:03:29,859
monthly cost on this option might be

00:03:25,930 --> 00:03:32,049
more but if you account your time of

00:03:29,859 --> 00:03:34,810
setting up servers maintaining servers

00:03:32,049 --> 00:03:37,750
managing servers things like that this

00:03:34,810 --> 00:03:42,880
cost can be really attractive unless you

00:03:37,750 --> 00:03:44,410
you know don't value your time at all so

00:03:42,880 --> 00:03:45,970
next up functions as a service this

00:03:44,410 --> 00:03:48,940
one's really popular right now server

00:03:45,970 --> 00:03:50,650
list platform this is more like maybe

00:03:48,940 --> 00:03:52,150
renting an office you still don't have

00:03:50,650 --> 00:03:54,010
to deal with the office building but

00:03:52,150 --> 00:03:55,569
maybe you have to you know figure out

00:03:54,010 --> 00:03:56,340
how to get a desk in there and things

00:03:55,569 --> 00:03:58,810
like that

00:03:56,340 --> 00:04:01,389
AWS lambda is the real popular one you

00:03:58,810 --> 00:04:05,260
hear about Zappa is a great way to kind

00:04:01,389 --> 00:04:09,549
of get code up onto AWS lambda and other

00:04:05,260 --> 00:04:11,980
providers have similar offerings so pros

00:04:09,549 --> 00:04:13,750
and cons here again it's managed

00:04:11,980 --> 00:04:15,340
monitored they handle all the server

00:04:13,750 --> 00:04:17,950
stuff you don't have to worry about that

00:04:15,340 --> 00:04:20,079
it can be less expensive the pricing is

00:04:17,950 --> 00:04:21,880
totally different so these are generally

00:04:20,079 --> 00:04:24,850
priced per request and the amount of

00:04:21,880 --> 00:04:26,830
time the request takes so you could

00:04:24,850 --> 00:04:29,380
spend more you could spend less often

00:04:26,830 --> 00:04:32,890
slice in the grand scheme of things

00:04:29,380 --> 00:04:34,919
these are really new platforms so there

00:04:32,890 --> 00:04:38,699
may be rough edges getting django to

00:04:34,919 --> 00:04:40,789
run on it you know some of the things

00:04:38,699 --> 00:04:43,740
that you might expect to work normally

00:04:40,789 --> 00:04:45,090
may not or you may need to kind of jump

00:04:43,740 --> 00:04:47,069
through some hoops to do things like

00:04:45,090 --> 00:04:50,219
getting an interactive shell to run

00:04:47,069 --> 00:04:52,169
commands against performance and cold

00:04:50,219 --> 00:04:53,639
starts can be a concern on these

00:04:52,169 --> 00:04:56,580
platforms so make sure you understand

00:04:53,639 --> 00:04:58,169
that before choosing one of these your

00:04:56,580 --> 00:05:00,120
code may not actually even be running

00:04:58,169 --> 00:05:03,529
when a request comes in so it needs to

00:05:00,120 --> 00:05:03,529
start up and that can take time

00:05:04,069 --> 00:05:09,449
kubernetes is one that everybody likes

00:05:07,469 --> 00:05:12,330
to talk about these days

00:05:09,449 --> 00:05:15,120
I put managed on here I would strongly

00:05:12,330 --> 00:05:17,639
recommend not managing your own

00:05:15,120 --> 00:05:20,159
kubernetes service and the only time I

00:05:17,639 --> 00:05:22,169
think that makes sense is either you

00:05:20,159 --> 00:05:23,789
have some in-house staff who knows how

00:05:22,169 --> 00:05:26,189
to do that or you want to learn it and

00:05:23,789 --> 00:05:27,900
understand it for whatever reason

00:05:26,189 --> 00:05:30,500
otherwise let somebody else deal with

00:05:27,900 --> 00:05:33,060
managing and updating it all that stuff

00:05:30,500 --> 00:05:35,610
this is more like renting an entire

00:05:33,060 --> 00:05:36,930
office building you get lots of sweets

00:05:35,610 --> 00:05:39,960
and you can do whatever you want with

00:05:36,930 --> 00:05:42,150
them for a lot of people I think this is

00:05:39,960 --> 00:05:45,389
what kubernetes look looks like this is

00:05:42,150 --> 00:05:48,060
running your blog on kubernetes it's

00:05:45,389 --> 00:05:50,310
it's overkill for a lot of use cases if

00:05:48,060 --> 00:05:54,180
you have one or two services kubernetes

00:05:50,310 --> 00:05:56,189
is probably more than what you need so I

00:05:54,180 --> 00:05:58,860
would kind of steer clear that unless

00:05:56,189 --> 00:06:02,039
there's some reason in your you know

00:05:58,860 --> 00:06:05,759
business or whatever that you're going

00:06:02,039 --> 00:06:07,620
in that that's scale so again with the

00:06:05,759 --> 00:06:10,379
managed options you've got it all

00:06:07,620 --> 00:06:12,360
managed bonnard secured

00:06:10,379 --> 00:06:14,360
cons are you have to know how to use

00:06:12,360 --> 00:06:18,029
kubernetes which is a non-trivial thing

00:06:14,360 --> 00:06:22,560
to need to know and it's it's probably

00:06:18,029 --> 00:06:25,620
overkill and in most folks use cases and

00:06:22,560 --> 00:06:26,969
then finally unmanaged self hosting this

00:06:25,620 --> 00:06:28,800
is basically you get a server somewhere

00:06:26,969 --> 00:06:30,360
and you get to decide how the heck you

00:06:28,800 --> 00:06:34,439
want to set up your app if you want to

00:06:30,360 --> 00:06:36,569
use docker or whatever this is super

00:06:34,439 --> 00:06:39,750
flexible you get to do whatever you want

00:06:36,569 --> 00:06:43,080
cost at least on the surface looks low

00:06:39,750 --> 00:06:44,629
because it's cheaper to rent a server

00:06:43,080 --> 00:06:46,999
than to

00:06:44,629 --> 00:06:50,899
you know use something like Heroku but

00:06:46,999 --> 00:06:52,219
again account for your own time cons of

00:06:50,899 --> 00:06:53,839
this are you have to deal with

00:06:52,219 --> 00:06:56,689
everything that they were dealing with

00:06:53,839 --> 00:06:58,279
for you security monitoring all that I

00:06:56,689 --> 00:07:00,259
think a big one that people don't think

00:06:58,279 --> 00:07:02,659
about in this scenario is documentation

00:07:00,259 --> 00:07:04,999
and training so if you're in a business

00:07:02,659 --> 00:07:08,539
and you want to spin up your own unique

00:07:04,999 --> 00:07:10,879
custom stack you may have a hard time

00:07:08,539 --> 00:07:12,819
finding other people that can manage and

00:07:10,879 --> 00:07:14,990
maintain your unique custom stack

00:07:12,819 --> 00:07:15,800
whereas if you're on a platform

00:07:14,990 --> 00:07:17,809
as-a-service

00:07:15,800 --> 00:07:19,550
generally you can find somebody who

00:07:17,809 --> 00:07:21,020
knows it already and if they don't know

00:07:19,550 --> 00:07:23,800
it you can point them to somebody else's

00:07:21,020 --> 00:07:27,080
docks that are managed and maintained to

00:07:23,800 --> 00:07:29,990
move forward with that this is kind of

00:07:27,080 --> 00:07:31,939
the like building your office from

00:07:29,990 --> 00:07:36,649
scratch like with the wood and the saws

00:07:31,939 --> 00:07:38,539
and all that approach and again if it's

00:07:36,649 --> 00:07:39,709
something you want to learn if it's

00:07:38,539 --> 00:07:41,629
something you're interested in

00:07:39,709 --> 00:07:44,479
yeah great go for it if you're looking

00:07:41,629 --> 00:07:49,430
for an easy way to deploy your project I

00:07:44,479 --> 00:07:52,039
would steer clear of this so far we've

00:07:49,430 --> 00:07:54,379
talked about hosting your application

00:07:52,039 --> 00:07:56,569
but generally django applications don't

00:07:54,379 --> 00:07:59,539
run in a vacuum they need a database or

00:07:56,569 --> 00:08:03,649
a cache or someplace to store files so

00:07:59,539 --> 00:08:05,419
we call those backing services and those

00:08:03,649 --> 00:08:07,939
often hold the state of your application

00:08:05,419 --> 00:08:11,240
the actual data that it depends on to

00:08:07,939 --> 00:08:13,099
run and surprisingly I'm going to

00:08:11,240 --> 00:08:14,809
recommend use managed services for these

00:08:13,099 --> 00:08:17,899
like even more important than your

00:08:14,809 --> 00:08:19,579
application if if your application that

00:08:17,899 --> 00:08:21,860
goes down like yeah it's a bummer but

00:08:19,579 --> 00:08:23,329
you can spend it back up if your

00:08:21,860 --> 00:08:25,459
database goes down and you lose your

00:08:23,329 --> 00:08:27,769
data it could be game over for your

00:08:25,459 --> 00:08:30,139
business so let somebody else dealing

00:08:27,769 --> 00:08:30,529
deal with making sure it's up and

00:08:30,139 --> 00:08:33,289
running

00:08:30,529 --> 00:08:35,209
making sure it's backed up making sure

00:08:33,289 --> 00:08:38,419
it's you know running the latest version

00:08:35,209 --> 00:08:41,630
and all that stuff so every provider

00:08:38,419 --> 00:08:44,949
offers the managed services you need out

00:08:41,630 --> 00:08:47,089
in the box for the most part databases

00:08:44,949 --> 00:08:51,610
object storage which is kind of just

00:08:47,089 --> 00:08:54,100
fancy for some place to put files email

00:08:51,610 --> 00:08:58,470
generally just need like an outbound

00:08:54,100 --> 00:09:00,990
SMTP server elasticsearch and Redis are

00:08:58,470 --> 00:09:02,730
or maybe somewhat different in that

00:09:00,990 --> 00:09:04,980
generally you're not holding your

00:09:02,730 --> 00:09:08,010
primary kind of single source of truth

00:09:04,980 --> 00:09:09,840
in elasticsearch in Redis so if one of

00:09:08,010 --> 00:09:12,600
those goes down you can repopulate it

00:09:09,840 --> 00:09:14,310
from your database so maybe not as

00:09:12,600 --> 00:09:17,040
important to use to manage managed

00:09:14,310 --> 00:09:22,010
service there but you know still they're

00:09:17,040 --> 00:09:25,350
out there and those work really well

00:09:22,010 --> 00:09:29,790
okay so that's hosting let's talk about

00:09:25,350 --> 00:09:32,550
configuration the general kind of

00:09:29,790 --> 00:09:34,800
accepted way to do configuration is the

00:09:32,550 --> 00:09:36,990
twelve factor application configuration

00:09:34,800 --> 00:09:40,770
method where you've got your application

00:09:36,990 --> 00:09:43,500
and when you deploy you bring in some

00:09:40,770 --> 00:09:44,670
set of configuration and those go

00:09:43,500 --> 00:09:49,140
together and kind of make your

00:09:44,670 --> 00:09:51,090
deployment environment the most popular

00:09:49,140 --> 00:09:54,450
way of doing this is environment

00:09:51,090 --> 00:09:55,800
variables there are maybe some reasons

00:09:54,450 --> 00:09:58,530
you don't want to use environment

00:09:55,800 --> 00:10:00,480
variables if you kind of read around

00:09:58,530 --> 00:10:03,180
there are potential security concerns

00:10:00,480 --> 00:10:04,950
with environment variables another

00:10:03,180 --> 00:10:07,350
option which I prefer is a configuration

00:10:04,950 --> 00:10:09,900
file so some sort of machine readable

00:10:07,350 --> 00:10:12,930
file whether it's gamal or Jason that

00:10:09,900 --> 00:10:16,620
you can produce and your application can

00:10:12,930 --> 00:10:18,090
read in you'll also see people doing

00:10:16,620 --> 00:10:19,620
this where they've got multiple Jango

00:10:18,090 --> 00:10:20,960
settings here's my Jango setting for

00:10:19,620 --> 00:10:24,330
production here's for staging

00:10:20,960 --> 00:10:28,440
development I'd recommend against this

00:10:24,330 --> 00:10:30,330
approach for one it's it's not dynamic

00:10:28,440 --> 00:10:32,100
so if you want to do things like review

00:10:30,330 --> 00:10:34,650
apps where you have kind of ephemeral

00:10:32,100 --> 00:10:36,750
instances that you spin up for a branch

00:10:34,650 --> 00:10:39,750
and they live as long as the branch does

00:10:36,750 --> 00:10:41,430
and they get Qaid and then torn down you

00:10:39,750 --> 00:10:43,200
don't really have any sort of dynamic

00:10:41,430 --> 00:10:46,920
way of managing that in this scenario

00:10:43,200 --> 00:10:49,110
and then it this scenario kind of

00:10:46,920 --> 00:10:51,450
encourages you to put secrets like your

00:10:49,110 --> 00:10:53,970
database passwords and API keys into

00:10:51,450 --> 00:10:56,430
your get repo or wherever you're hosting

00:10:53,970 --> 00:10:59,670
your code which is bad

00:10:56,430 --> 00:11:03,300
never put secrets in your code

00:10:59,670 --> 00:11:04,590
repository and I say unencrypted because

00:11:03,300 --> 00:11:06,930
there are ways you can put them in your

00:11:04,590 --> 00:11:11,010
code repository repository encrypted

00:11:06,930 --> 00:11:12,270
which are safer so secrets yeah like

00:11:11,010 --> 00:11:15,020
things like API keys David

00:11:12,270 --> 00:11:17,130
as passwords you don't want them

00:11:15,020 --> 00:11:19,590
someplace where they're easily leaked

00:11:17,130 --> 00:11:21,330
you may not even want some people on

00:11:19,590 --> 00:11:24,360
your development team to have your

00:11:21,330 --> 00:11:29,100
production database password so it's

00:11:24,360 --> 00:11:31,410
keep those out of your code repo as far

00:11:29,100 --> 00:11:33,240
as options for configuration kind of

00:11:31,410 --> 00:11:34,860
where to store your configuration if

00:11:33,240 --> 00:11:37,440
you're on a platform as-a-service

00:11:34,860 --> 00:11:40,110
generally that's baked in you just fill

00:11:37,440 --> 00:11:42,390
out a web form or you know manage

00:11:40,110 --> 00:11:44,160
something on the CLI and those variables

00:11:42,390 --> 00:11:46,950
are handled for you and you know

00:11:44,160 --> 00:11:49,380
hopefully a secure manner if you're

00:11:46,950 --> 00:11:54,660
using Amazon they have something called

00:11:49,380 --> 00:11:56,850
SSM simple Systems Manager which it's

00:11:54,660 --> 00:11:58,920
not really obvious but it can store

00:11:56,850 --> 00:12:01,080
secrets there's a tool called chamber

00:11:58,920 --> 00:12:03,630
that can pull those secrets out of SSM

00:12:01,080 --> 00:12:05,430
and inject them into your application

00:12:03,630 --> 00:12:08,250
either via environment variables or the

00:12:05,430 --> 00:12:09,840
configuration file that I mentioned if

00:12:08,250 --> 00:12:13,290
you're on kubernetes it's got its whole

00:12:09,840 --> 00:12:15,570
thing to do that if you're using a

00:12:13,290 --> 00:12:17,370
self-hosted option and you have a

00:12:15,570 --> 00:12:20,220
configuration management tool hopefully

00:12:17,370 --> 00:12:22,350
that's managing your servers you can

00:12:20,220 --> 00:12:24,750
often store them encrypt it in there

00:12:22,350 --> 00:12:26,700
pretty much every configuration manager

00:12:24,750 --> 00:12:30,090
has a way to store encrypted data and

00:12:26,700 --> 00:12:32,790
and decrypt it on deployment or when you

00:12:30,090 --> 00:12:35,970
push code out and then finally there's

00:12:32,790 --> 00:12:37,950
hashey core vault that is like a whole

00:12:35,970 --> 00:12:40,380
service that you can run that manages

00:12:37,950 --> 00:12:42,090
secrets again if you're kind of just

00:12:40,380 --> 00:12:44,010
starting out I would steer clear from

00:12:42,090 --> 00:12:46,950
this you don't need more stuff to manage

00:12:44,010 --> 00:12:49,110
you need less stuff to manage if you're

00:12:46,950 --> 00:12:50,880
you know companies are already using it

00:12:49,110 --> 00:12:55,500
or something like that and yeah that's a

00:12:50,880 --> 00:12:58,260
great option so how do you work with

00:12:55,500 --> 00:13:01,410
these in Jango you know it's it's pretty

00:12:58,260 --> 00:13:03,840
easy to pull in environment variables or

00:13:01,410 --> 00:13:06,630
something like that in your Jango

00:13:03,840 --> 00:13:08,700
settings but there's some drawbacks and

00:13:06,630 --> 00:13:09,090
and we wrote this project called good

00:13:08,700 --> 00:13:11,150
conf

00:13:09,090 --> 00:13:15,930
you can just pip install good comp and

00:13:11,150 --> 00:13:17,640
it will handle things like are your

00:13:15,930 --> 00:13:19,770
environment variables or sorry is your

00:13:17,640 --> 00:13:23,250
configuration coming from environment

00:13:19,770 --> 00:13:25,230
variables or from a file it'll handle

00:13:23,250 --> 00:13:27,570
typecasting for environment variable

00:13:25,230 --> 00:13:28,980
so when you when you read an environment

00:13:27,570 --> 00:13:31,620
variable in Python it's always going to

00:13:28,980 --> 00:13:34,110
be a string you can say this one's a

00:13:31,620 --> 00:13:37,070
boolean this one's a list this one's an

00:13:34,110 --> 00:13:39,810
integer and have that handled correctly

00:13:37,070 --> 00:13:42,000
and then the last two items send this I

00:13:39,810 --> 00:13:45,150
really like our you can auto generate

00:13:42,000 --> 00:13:47,970
both documentation and sample

00:13:45,150 --> 00:13:49,500
configurations so generally when people

00:13:47,970 --> 00:13:51,210
start using environment variables they

00:13:49,500 --> 00:13:54,750
kind of just scatter them throughout

00:13:51,210 --> 00:13:56,700
their settings file and you may not know

00:13:54,750 --> 00:13:58,800
you know there's no documentation as to

00:13:56,700 --> 00:14:01,470
what what each one does and where they

00:13:58,800 --> 00:14:05,010
are and all that so this handles that

00:14:01,470 --> 00:14:07,320
for you so you to use it you just create

00:14:05,010 --> 00:14:09,480
a class and you could put this in like a

00:14:07,320 --> 00:14:13,010
config dot PI file in your project and

00:14:09,480 --> 00:14:16,920
you define all the bits of configuration

00:14:13,010 --> 00:14:18,960
it's worth noting kind of like so Django

00:14:16,920 --> 00:14:21,210
already has this concept of settings but

00:14:18,960 --> 00:14:22,980
most of the settings in your project

00:14:21,210 --> 00:14:25,140
probably don't change for each

00:14:22,980 --> 00:14:26,880
individual environment you know and your

00:14:25,140 --> 00:14:28,820
installed apps and your middleware and

00:14:26,880 --> 00:14:30,990
your templates and things like that

00:14:28,820 --> 00:14:32,910
those are generally going to be the same

00:14:30,990 --> 00:14:34,790
across all your environments I would not

00:14:32,910 --> 00:14:36,870
consider those configuration

00:14:34,790 --> 00:14:39,090
configuration are the things that that

00:14:36,870 --> 00:14:40,110
do change so you may want to run you

00:14:39,090 --> 00:14:41,520
know you're gonna want to run against

00:14:40,110 --> 00:14:44,100
different databases and all your

00:14:41,520 --> 00:14:47,130
different environments so this is where

00:14:44,100 --> 00:14:50,160
you put that data so you can create the

00:14:47,130 --> 00:14:52,050
class you instantiate it and you also if

00:14:50,160 --> 00:14:57,510
you want to load from files you can tell

00:14:52,050 --> 00:14:59,370
it files where it can load from and then

00:14:57,510 --> 00:15:02,970
in your settings you just load that

00:14:59,370 --> 00:15:05,370
config object and you can access

00:15:02,970 --> 00:15:13,170
attributes on it for the different items

00:15:05,370 --> 00:15:16,320
in it so that's configuration next up is

00:15:13,170 --> 00:15:19,860
your web server so Django run server

00:15:16,320 --> 00:15:22,850
manager I run server is not suitable for

00:15:19,860 --> 00:15:25,260
running in production there are

00:15:22,850 --> 00:15:26,940
generally two other web servers that

00:15:25,260 --> 00:15:29,610
people use well there's a lot of other

00:15:26,940 --> 00:15:32,040
ones but generally you see 2g unicorn

00:15:29,610 --> 00:15:34,590
and you whisky the primary difference

00:15:32,040 --> 00:15:37,779
between those is the amount of

00:15:34,590 --> 00:15:40,640
configuration they offer

00:15:37,779 --> 00:15:43,399
jewnicorn has about 65 different flags

00:15:40,640 --> 00:15:48,560
you can set configuration options USB

00:15:43,399 --> 00:15:51,079
has 931 so like you really can do a lot

00:15:48,560 --> 00:15:53,180
of stuff with you whisky but with all

00:15:51,079 --> 00:15:58,640
that means it's more complicated the

00:15:53,180 --> 00:16:00,740
docks can be challenging at times and so

00:15:58,640 --> 00:16:04,399
if you're just getting started I would

00:16:00,740 --> 00:16:07,370
recommend you unicorn running a project

00:16:04,399 --> 00:16:10,130
with G unicorn looks like this and you

00:16:07,370 --> 00:16:13,130
just point it to your whisky module and

00:16:10,130 --> 00:16:14,750
you give it a port and you set a number

00:16:13,130 --> 00:16:17,899
of workers you want to run so this is

00:16:14,750 --> 00:16:20,180
how many kind of simultaneous processes

00:16:17,899 --> 00:16:23,570
are running that conserve requests I

00:16:20,180 --> 00:16:25,040
also strongly recommend running setting

00:16:23,570 --> 00:16:28,010
a timeout whenever you deploy your

00:16:25,040 --> 00:16:30,500
application so one of the risks here

00:16:28,010 --> 00:16:33,620
with you know we're running for workers

00:16:30,500 --> 00:16:36,560
if you're responding to requests in 100

00:16:33,620 --> 00:16:39,200
or 200 milliseconds you can serve a lot

00:16:36,560 --> 00:16:41,420
of requests with just four workers if

00:16:39,200 --> 00:16:44,060
you're responding to requests in 20 or

00:16:41,420 --> 00:16:46,279
30 seconds that becomes a really big

00:16:44,060 --> 00:16:48,890
problem it's really easy for a single

00:16:46,279 --> 00:16:50,779
user to do a denial of service attack on

00:16:48,890 --> 00:16:54,230
your application and basically take the

00:16:50,779 --> 00:16:55,670
whole thing down so if you have you know

00:16:54,230 --> 00:16:57,560
even though when you first deploy you

00:16:55,670 --> 00:16:59,329
may not have any slow views as you get

00:16:57,560 --> 00:17:01,490
more data in your application as new

00:16:59,329 --> 00:17:05,299
code gets pushed up you may get views

00:17:01,490 --> 00:17:07,970
that kind of act pathologically and it's

00:17:05,299 --> 00:17:10,730
better off to kill those requests

00:17:07,970 --> 00:17:13,339
upfront rather than letting them run and

00:17:10,730 --> 00:17:16,790
block all your workers so in this case

00:17:13,339 --> 00:17:18,829
we've got a timeout of 5 seconds that

00:17:16,790 --> 00:17:21,160
that any requests that lasts more than

00:17:18,829 --> 00:17:24,350
five seconds will get killed and leave

00:17:21,160 --> 00:17:27,049
refresh that worker to reserve another

00:17:24,350 --> 00:17:28,850
request with timeouts you want to make

00:17:27,049 --> 00:17:33,350
sure you have some way of monitoring and

00:17:28,850 --> 00:17:35,510
knowing if that's happening so it's a

00:17:33,350 --> 00:17:38,390
similar config and you whiskey if you're

00:17:35,510 --> 00:17:40,100
using a virtual em you define that other

00:17:38,390 --> 00:17:43,820
than that it's the same thing just

00:17:40,100 --> 00:17:46,970
different names if you do use you

00:17:43,820 --> 00:17:50,270
whiskey also check out there's a project

00:17:46,970 --> 00:17:51,260
on pi PI that we built called PI u

00:17:50,270 --> 00:17:54,040
whiskey which

00:17:51,260 --> 00:17:56,900
let's you install you whiskey as a wheel

00:17:54,040 --> 00:18:00,710
and it's a mini Linux wheel so you can

00:17:56,900 --> 00:18:03,080
install it on Linux without needing to

00:18:00,710 --> 00:18:04,760
compile it or install any sort of

00:18:03,080 --> 00:18:11,270
development headers or anything so it

00:18:04,760 --> 00:18:13,850
can speed up your deployment process ok

00:18:11,270 --> 00:18:17,300
so that's your webserver next up is our

00:18:13,850 --> 00:18:20,630
assets so Django defines assets under

00:18:17,300 --> 00:18:22,520
these two names static and media static

00:18:20,630 --> 00:18:24,800
being your CSS your javascript media

00:18:22,520 --> 00:18:28,340
media being dynamically generated stuff

00:18:24,800 --> 00:18:31,940
that happens on the server for serving

00:18:28,340 --> 00:18:35,450
static assets white noise is the easiest

00:18:31,940 --> 00:18:37,640
way to go you generally you want your

00:18:35,450 --> 00:18:39,830
application to be self-sufficient you

00:18:37,640 --> 00:18:42,650
it's easier if you don't have to depend

00:18:39,830 --> 00:18:45,260
on like you know I have nginx serving my

00:18:42,650 --> 00:18:47,300
static assets well on these different

00:18:45,260 --> 00:18:49,400
hosting platforms nginx may not be an

00:18:47,300 --> 00:18:51,920
option and it's nice to be able to know

00:18:49,400 --> 00:18:55,520
you aren't tied to you know you can move

00:18:51,920 --> 00:18:58,550
to a lambda if you wanted or kubernetes

00:18:55,520 --> 00:19:01,340
or whatever so kind of letting your

00:18:58,550 --> 00:19:04,280
application serve all its own assets is

00:19:01,340 --> 00:19:05,780
actually a benefit I think so white

00:19:04,280 --> 00:19:07,520
noise is really easy pip install white

00:19:05,780 --> 00:19:11,150
noise you change your middleware and

00:19:07,520 --> 00:19:14,150
your static file storage and then Django

00:19:11,150 --> 00:19:19,340
can reasonably efficiently will serve

00:19:14,150 --> 00:19:21,890
your static assets if you're using you

00:19:19,340 --> 00:19:25,490
whiskey you can basically do the same

00:19:21,890 --> 00:19:29,210
thing so you set this man effect

00:19:25,490 --> 00:19:32,770
manifest static file storage what that

00:19:29,210 --> 00:19:35,480
does and white noise does this too is

00:19:32,770 --> 00:19:37,430
when you use to the static template tag

00:19:35,480 --> 00:19:40,160
it will include a hash of the file and

00:19:37,430 --> 00:19:43,820
the file name that means that that file

00:19:40,160 --> 00:19:45,080
the URL is now unique for that contents

00:19:43,820 --> 00:19:46,670
of that file and you can cache it

00:19:45,080 --> 00:19:49,640
forever which we'll talk about in a

00:19:46,670 --> 00:19:53,210
little bit so that static file storage

00:19:49,640 --> 00:19:56,090
does that you then run your collect

00:19:53,210 --> 00:20:00,470
static you gzip everything in your clock

00:19:56,090 --> 00:20:03,590
static and you can run you whiskey with

00:20:00,470 --> 00:20:06,590
these options so

00:20:03,590 --> 00:20:07,670
it'll serve gzip content to browsers

00:20:06,590 --> 00:20:10,460
that support it

00:20:07,670 --> 00:20:13,850
it'll add headers that say you know

00:20:10,460 --> 00:20:15,500
cache this content forever and then the

00:20:13,850 --> 00:20:17,990
offload threads is interesting it can

00:20:15,500 --> 00:20:20,480
actually serve static content out of

00:20:17,990 --> 00:20:26,650
separate threads in your application so

00:20:20,480 --> 00:20:31,520
kind of a little optimization there so

00:20:26,650 --> 00:20:33,770
next up is no js' stuff most Django and

00:20:31,520 --> 00:20:35,510
maybe not most but many Django projects

00:20:33,770 --> 00:20:38,390
these days are using nodejs and one way

00:20:35,510 --> 00:20:42,860
or another either to build JavaScript

00:20:38,390 --> 00:20:46,340
bundles or compiled CSS there's a great

00:20:42,860 --> 00:20:48,350
talk by Jacob CAPA Moss from PyCon last

00:20:46,340 --> 00:20:50,960
year I think that goes into this much

00:20:48,350 --> 00:20:53,660
more in depth but the general practice

00:20:50,960 --> 00:20:56,240
is store those source files in your

00:20:53,660 --> 00:20:58,820
version control when you go through your

00:20:56,240 --> 00:21:00,410
build process which may look different

00:20:58,820 --> 00:21:04,160
depending on the platform you're on if

00:21:00,410 --> 00:21:05,390
you're on Heroku they when you push code

00:21:04,160 --> 00:21:08,030
to it it goes through a build process

00:21:05,390 --> 00:21:10,040
you can use a on Heroku you can use a

00:21:08,030 --> 00:21:11,990
node.js build pack in addition to your

00:21:10,040 --> 00:21:14,480
Python build pack that will call

00:21:11,990 --> 00:21:17,300
whatever system you're using webpack

00:21:14,480 --> 00:21:19,970
parcels something like that to generate

00:21:17,300 --> 00:21:22,580
all those files and the location where

00:21:19,970 --> 00:21:24,800
those files are generated you put that

00:21:22,580 --> 00:21:28,000
in as your into your static files

00:21:24,800 --> 00:21:30,380
directories in the Django settings and

00:21:28,000 --> 00:21:33,740
at that point you can just serve them

00:21:30,380 --> 00:21:36,380
like any other static static assets so

00:21:33,740 --> 00:21:40,010
it's it's pretty straightforward you

00:21:36,380 --> 00:21:41,720
kind of let the the node ecosystem

00:21:40,010 --> 00:21:43,670
handle all the building of the files and

00:21:41,720 --> 00:21:46,580
the Django ecosystem and handle the

00:21:43,670 --> 00:21:48,470
serving of the files if you're doing

00:21:46,580 --> 00:21:50,960
fancy stuff like JavaScript bundle

00:21:48,470 --> 00:21:53,450
splitting you can add django web pack

00:21:50,960 --> 00:21:54,980
loader into the mix and it can do it can

00:21:53,450 --> 00:22:00,380
figure out where those different bundles

00:21:54,980 --> 00:22:02,690
live and how to serve them media is the

00:22:00,380 --> 00:22:04,430
other one so media this is dynamically

00:22:02,690 --> 00:22:06,890
generated content and one way or another

00:22:04,430 --> 00:22:08,900
might be a user uploading an avatar it

00:22:06,890 --> 00:22:12,380
might be you generating a report and

00:22:08,900 --> 00:22:13,760
specific to somebody django storages is

00:22:12,380 --> 00:22:15,470
generally the way you want to do this

00:22:13,760 --> 00:22:16,970
you don't want to store these files on

00:22:15,470 --> 00:22:18,830
your file system if you

00:22:16,970 --> 00:22:21,140
even have a file system and some of

00:22:18,830 --> 00:22:23,990
these hosting up options you you don't

00:22:21,140 --> 00:22:25,370
really have reliable access to a file

00:22:23,990 --> 00:22:28,960
system that's always going to be there

00:22:25,370 --> 00:22:32,180
so starting by uploading this stuff to

00:22:28,960 --> 00:22:34,610
s3 or some other kind of cloud object

00:22:32,180 --> 00:22:36,830
store is the way to go it maintains

00:22:34,610 --> 00:22:38,360
keeps your options open for kind of how

00:22:36,830 --> 00:22:42,500
you want to host your application in the

00:22:38,360 --> 00:22:44,660
future one caveat with this is to be

00:22:42,500 --> 00:22:47,930
careful with public versus private files

00:22:44,660 --> 00:22:50,510
so in the use case I mentioned earlier

00:22:47,930 --> 00:22:52,850
an avatar is public you know like

00:22:50,510 --> 00:22:54,860
anybody can see another user's avatar if

00:22:52,850 --> 00:22:57,290
you're generating a custom report that's

00:22:54,860 --> 00:22:59,750
specific to a user you don't want to

00:22:57,290 --> 00:23:03,050
load that up onto s3 in a public bucket

00:22:59,750 --> 00:23:05,540
because anybody can read it so what you

00:23:03,050 --> 00:23:09,610
can do is set up multiple storages if

00:23:05,540 --> 00:23:12,380
that's your scenario and store your

00:23:09,610 --> 00:23:14,090
story objects and being careful about

00:23:12,380 --> 00:23:16,900
which storage you use to store your

00:23:14,090 --> 00:23:19,070
objects these three settings here are

00:23:16,900 --> 00:23:21,110
what you would use on s3

00:23:19,070 --> 00:23:23,990
if you're using s3 as a back-end which

00:23:21,110 --> 00:23:26,660
is probably the most common one the

00:23:23,990 --> 00:23:28,760
default ACL is public read so you can

00:23:26,660 --> 00:23:30,470
change that and then you can use this

00:23:28,760 --> 00:23:33,800
query string off which lets your

00:23:30,470 --> 00:23:36,410
application generate a custom URL that

00:23:33,800 --> 00:23:39,320
is expires and some point in the future

00:23:36,410 --> 00:23:41,240
so you you only give that URL to the

00:23:39,320 --> 00:23:44,750
user who you've already determined is

00:23:41,240 --> 00:23:46,850
allowed to to use that URL and then it's

00:23:44,750 --> 00:23:49,070
sort of self destructs after some amount

00:23:46,850 --> 00:23:55,790
of time so that's how you handle private

00:23:49,070 --> 00:23:57,760
files okay so at this point we've

00:23:55,790 --> 00:24:01,070
covered all the basics you can go live

00:23:57,760 --> 00:24:02,900
that's kind of all you need and no

00:24:01,070 --> 00:24:05,390
matter what if you've done this no

00:24:02,900 --> 00:24:07,340
matter what option you choose you have

00:24:05,390 --> 00:24:09,230
kind of some flexibility I wouldn't say

00:24:07,340 --> 00:24:11,900
you're very locked into you know a

00:24:09,230 --> 00:24:15,170
certain provider at this point so you

00:24:11,900 --> 00:24:16,760
know you can I if you're if you're just

00:24:15,170 --> 00:24:19,280
starting out I'd recommend starting on a

00:24:16,760 --> 00:24:20,930
platform as a service and you know

00:24:19,280 --> 00:24:22,700
perhaps at some point in the future you

00:24:20,930 --> 00:24:24,410
outgrow that and you move to something

00:24:22,700 --> 00:24:24,830
else but you're in a good place to do

00:24:24,410 --> 00:24:28,570
that

00:24:24,830 --> 00:24:31,810
if you've kind of taken these steps

00:24:28,570 --> 00:24:33,850
so the next part of the talk is going to

00:24:31,810 --> 00:24:35,380
be maybe a little bit more abstract and

00:24:33,850 --> 00:24:38,880
just talk about other kind of

00:24:35,380 --> 00:24:41,980
considerations you need to make as you

00:24:38,880 --> 00:24:47,080
run your application in production so

00:24:41,980 --> 00:24:49,000
performance is the first one you can't

00:24:47,080 --> 00:24:50,350
measure performance you can't do

00:24:49,000 --> 00:24:51,700
anything with performance unless you can

00:24:50,350 --> 00:24:53,580
measure it and the way you want to

00:24:51,700 --> 00:24:56,740
measure performance is using an APM

00:24:53,580 --> 00:24:59,560
application performance monitor new

00:24:56,740 --> 00:25:03,490
relic scout and data dog I'll have great

00:24:59,560 --> 00:25:04,710
options I've used all these in one way

00:25:03,490 --> 00:25:09,900
or another and I think that's probably

00:25:04,710 --> 00:25:12,670
your best bet there's other options

00:25:09,900 --> 00:25:17,460
AWS if you need to help self host the

00:25:12,670 --> 00:25:17,460
data for some reason elastic has an APM

00:25:17,580 --> 00:25:24,520
the next performance thing most people

00:25:20,980 --> 00:25:26,800
notice is the database and it's don't be

00:25:24,520 --> 00:25:28,750
surprised if you push your project out

00:25:26,800 --> 00:25:30,520
to production and you find out it's

00:25:28,750 --> 00:25:33,790
actually slower than it runs on your

00:25:30,520 --> 00:25:35,920
laptop modern laptops are really fast

00:25:33,790 --> 00:25:38,380
and there's two other things and that

00:25:35,920 --> 00:25:40,930
come into play when is network latency

00:25:38,380 --> 00:25:42,490
so if you're comparing running your

00:25:40,930 --> 00:25:44,110
database on your laptop and your

00:25:42,490 --> 00:25:46,720
application on your laptop versus

00:25:44,110 --> 00:25:48,340
running your application on a server in

00:25:46,720 --> 00:25:48,790
your database someplace else on another

00:25:48,340 --> 00:25:50,710
server

00:25:48,790 --> 00:25:54,850
there's latency on that network

00:25:50,710 --> 00:25:56,260
connection that is noticeable and then

00:25:54,850 --> 00:25:58,780
the other is the size of your data set

00:25:56,260 --> 00:26:00,420
so if you're working against a hundred

00:25:58,780 --> 00:26:03,040
rows in your database in your

00:26:00,420 --> 00:26:04,480
development environment and you have a

00:26:03,040 --> 00:26:06,040
million rows in your database in

00:26:04,480 --> 00:26:07,870
production those are going to behave

00:26:06,040 --> 00:26:11,410
very differently when you query them and

00:26:07,870 --> 00:26:12,970
a million rows with a hundred rows you

00:26:11,410 --> 00:26:15,760
won't really notice if your data is

00:26:12,970 --> 00:26:18,670
poorly indexed you will notice that with

00:26:15,760 --> 00:26:23,160
a million rows so those kind of problems

00:26:18,670 --> 00:26:25,750
sort of start to pop up more on database

00:26:23,160 --> 00:26:28,600
if you're unsure what database to use

00:26:25,750 --> 00:26:31,270
use Postgres it's kind of the same as

00:26:28,600 --> 00:26:33,610
default if you have a really good reason

00:26:31,270 --> 00:26:36,100
not to use Postgres that's fine if

00:26:33,610 --> 00:26:38,410
you've got a my sequel DBA in-house at

00:26:36,100 --> 00:26:40,780
your business then my Postgres probably

00:26:38,410 --> 00:26:41,870
is not the best choice my sequel is

00:26:40,780 --> 00:26:44,060
better

00:26:41,870 --> 00:26:46,130
I would steer clear of sequel light

00:26:44,060 --> 00:26:48,710
which is actually a really great

00:26:46,130 --> 00:26:50,750
database but it sort of breaks this idea

00:26:48,710 --> 00:26:53,660
that you can potentially horizontally

00:26:50,750 --> 00:26:56,450
scale your application across multiple

00:26:53,660 --> 00:26:58,340
servers at some point in the future with

00:26:56,450 --> 00:26:59,660
sequel Lite you're sort of tied to the

00:26:58,340 --> 00:27:04,310
file system where the sequel Lite

00:26:59,660 --> 00:27:06,650
database lives as you if you want to

00:27:04,310 --> 00:27:08,270
kind of tune your database further the

00:27:06,650 --> 00:27:11,060
the first and easiest one is this

00:27:08,270 --> 00:27:14,630
connection connect connection max-age

00:27:11,060 --> 00:27:16,160
setting by default Django will open up a

00:27:14,630 --> 00:27:21,320
new database connection for every

00:27:16,160 --> 00:27:24,170
request that has to do SSL negotiation

00:27:21,320 --> 00:27:26,690
potentially and and also authenticate

00:27:24,170 --> 00:27:28,880
with the database it's not uncommon to

00:27:26,690 --> 00:27:31,520
see 20 30 milliseconds spent doing this

00:27:28,880 --> 00:27:33,860
so setting this will let it share that

00:27:31,520 --> 00:27:36,770
connection with multiple requests and

00:27:33,860 --> 00:27:40,070
save some time right off the top next up

00:27:36,770 --> 00:27:41,720
is reducing queries so your APM should

00:27:40,070 --> 00:27:44,930
show you how many queries you're running

00:27:41,720 --> 00:27:48,950
on any individual view if you're running

00:27:44,930 --> 00:27:51,920
hundreds or gasps thousands of queries

00:27:48,950 --> 00:27:54,710
you have a problem so things like select

00:27:51,920 --> 00:27:57,260
related and prefetch related can

00:27:54,710 --> 00:28:02,030
generally help with that a lot of times

00:27:57,260 --> 00:28:03,110
that's just quick change on a query and

00:28:02,030 --> 00:28:04,730
you can get you know if you're doing

00:28:03,110 --> 00:28:09,890
something in a for loop it's easy to go

00:28:04,730 --> 00:28:11,630
from 101 queries to one query and the

00:28:09,890 --> 00:28:13,220
Scout APM actually has a really good

00:28:11,630 --> 00:28:16,940
tool for detecting these sorts of

00:28:13,220 --> 00:28:19,370
situations where these options will help

00:28:16,940 --> 00:28:21,560
and then finally I don't have time to go

00:28:19,370 --> 00:28:22,850
into it but database indexes are huge so

00:28:21,560 --> 00:28:26,060
if you have a query that's running very

00:28:22,850 --> 00:28:28,130
slowly it's it's very possible the you

00:28:26,060 --> 00:28:30,590
just need to add an index to a specific

00:28:28,130 --> 00:28:35,440
field you're querying on and you can use

00:28:30,590 --> 00:28:40,550
DB index and index together to at those

00:28:35,440 --> 00:28:43,520
my unsung hero of performance in Django

00:28:40,550 --> 00:28:45,410
as template fragment caching this is

00:28:43,520 --> 00:28:47,420
where you just take a section of your

00:28:45,410 --> 00:28:48,950
template and you wrap it and these cut

00:28:47,420 --> 00:28:51,350
in this cache tag and you tell it how

00:28:48,950 --> 00:28:53,000
long you want to cache it for and it

00:28:51,350 --> 00:28:55,700
will serve that out of cache after it's

00:28:53,000 --> 00:28:58,250
been generated once

00:28:55,700 --> 00:29:01,100
here's an example from a project I

00:28:58,250 --> 00:29:03,730
worked on this year where their requests

00:29:01,100 --> 00:29:08,330
were originally in the two-second range

00:29:03,730 --> 00:29:09,039
we identified via this is a graph from

00:29:08,330 --> 00:29:12,559
New Relic

00:29:09,039 --> 00:29:14,210
that most of the time was spent actually

00:29:12,559 --> 00:29:15,880
generating the navigation on their site

00:29:14,210 --> 00:29:19,610
which didn't really change a whole lot

00:29:15,880 --> 00:29:22,070
and it was really easy - it was it was

00:29:19,610 --> 00:29:23,450
actually difficult to kind of cache and

00:29:22,070 --> 00:29:26,090
validate it because the data came from

00:29:23,450 --> 00:29:28,340
so many different places but wrapping it

00:29:26,090 --> 00:29:31,280
in a cache tag that lasted for two

00:29:28,340 --> 00:29:33,200
minutes and saying hey you know if you

00:29:31,280 --> 00:29:35,630
make a change it might take a minute to

00:29:33,200 --> 00:29:37,700
show up in your navigation and it was

00:29:35,630 --> 00:29:39,289
you know a ten minute fix that was a

00:29:37,700 --> 00:29:41,299
pretty reasonable trade-off to get down

00:29:39,289 --> 00:29:49,370
to you know 200 millisecond response

00:29:41,299 --> 00:29:52,520
times next up is the CDN so a CDN is

00:29:49,370 --> 00:29:54,650
something that sits between your users

00:29:52,520 --> 00:29:56,419
and your application and ideally very

00:29:54,650 --> 00:29:58,549
close to your users you may hear people

00:29:56,419 --> 00:30:03,799
refer to this as the edge the edge of

00:29:58,549 --> 00:30:06,140
the network so what a CDN can do is take

00:30:03,799 --> 00:30:09,740
content or application serving and store

00:30:06,140 --> 00:30:11,480
it at the edge near the users and same

00:30:09,740 --> 00:30:13,520
thing with the database network latency

00:30:11,480 --> 00:30:15,890
cut out the network latency of

00:30:13,520 --> 00:30:19,370
potentially going halfway around the

00:30:15,890 --> 00:30:20,780
world if you see anybody from Australia

00:30:19,370 --> 00:30:23,179
or New Zealand ask them how their

00:30:20,780 --> 00:30:25,640
general internet browsing experiences

00:30:23,179 --> 00:30:29,600
it's much different than what you might

00:30:25,640 --> 00:30:31,669
be used to if you're from the states so

00:30:29,600 --> 00:30:34,159
CDN providers this isn't something you

00:30:31,669 --> 00:30:38,990
self host its requires being kind of

00:30:34,159 --> 00:30:40,909
globally available your hosting provider

00:30:38,990 --> 00:30:43,640
probably has one if you're on like one

00:30:40,909 --> 00:30:46,100
of the big clouds third party there's

00:30:43,640 --> 00:30:48,020
CloudFlare and fastly CloudFlare has

00:30:46,100 --> 00:30:49,610
like a surprising amount of

00:30:48,020 --> 00:30:54,140
functionality and their free version

00:30:49,610 --> 00:30:55,970
it's a really great option the the

00:30:54,140 --> 00:30:59,059
easiest one here is your static files

00:30:55,970 --> 00:31:01,520
because we earlier gave those all a

00:30:59,059 --> 00:31:05,750
unique URL you can tell your CDN to

00:31:01,520 --> 00:31:07,250
cache those per driver so users gonna or

00:31:05,750 --> 00:31:07,809
they're going to hit the CDN once and

00:31:07,250 --> 00:31:09,549
and

00:31:07,809 --> 00:31:12,999
we'll be served very quickly to your

00:31:09,549 --> 00:31:14,649
users you can also potentially cache

00:31:12,999 --> 00:31:16,659
django responses so if you have pages

00:31:14,649 --> 00:31:20,320
that don't change at all or don't change

00:31:16,659 --> 00:31:22,570
often you can cache those at your CDN as

00:31:20,320 --> 00:31:24,580
well how you do this depends on the

00:31:22,570 --> 00:31:28,749
provider it might be that you send up a

00:31:24,580 --> 00:31:30,519
specific header with the response that

00:31:28,749 --> 00:31:33,609
says it can be cached it might be some

00:31:30,519 --> 00:31:38,139
configuration you do within the specific

00:31:33,609 --> 00:31:41,369
CDN provider so that's a real quick

00:31:38,139 --> 00:31:44,979
overview on performance next up security

00:31:41,369 --> 00:31:47,379
I almost like feel bad putting this in

00:31:44,979 --> 00:31:49,029
because it's there's a lot more to

00:31:47,379 --> 00:31:53,830
security than this but this should at

00:31:49,029 --> 00:31:56,950
least help you get started with your

00:31:53,830 --> 00:31:59,969
code make sure you're monitoring your

00:31:56,950 --> 00:32:02,739
dependencies for vulnerabilities and as

00:31:59,969 --> 00:32:05,169
time goes on we tend to get more and

00:32:02,739 --> 00:32:06,249
more dependencies especially if you're

00:32:05,169 --> 00:32:10,059
depending on anything in the node

00:32:06,249 --> 00:32:12,070
ecosystem so doing this in an automated

00:32:10,059 --> 00:32:14,379
fashion is really the best way

00:32:12,070 --> 00:32:17,019
github security alerts are awesome for

00:32:14,379 --> 00:32:19,450
this if your codes on github if not I

00:32:17,019 --> 00:32:21,909
think some of the other repository

00:32:19,450 --> 00:32:24,039
providers offer this or third parties

00:32:21,909 --> 00:32:25,869
that offer this that will basically just

00:32:24,039 --> 00:32:27,609
scan your requirements and say hey

00:32:25,869 --> 00:32:30,339
there's a known vulnerability for this

00:32:27,609 --> 00:32:32,889
one the other stuff with this is you

00:32:30,339 --> 00:32:38,739
have to actually act on that and update

00:32:32,889 --> 00:32:42,339
that worst update that requirement next

00:32:38,739 --> 00:32:43,839
up is using a lock file so having this

00:32:42,339 --> 00:32:46,629
this kind of comes out of the box with

00:32:43,839 --> 00:32:48,639
the NPM and node stuff if you're using

00:32:46,629 --> 00:32:50,469
pip m or poetry to manage your

00:32:48,639 --> 00:32:53,200
dependencies it's also coming out of the

00:32:50,469 --> 00:32:55,929
box if you're just using requirements

00:32:53,200 --> 00:33:00,279
text file or something you can use pip

00:32:55,929 --> 00:33:02,649
tools has a command line tool called pip

00:33:00,279 --> 00:33:07,389
compile which will take your

00:33:02,649 --> 00:33:10,089
dependencies and create a lock file

00:33:07,389 --> 00:33:13,419
basically of all of them so the goal

00:33:10,089 --> 00:33:16,899
here is a couple of things one is you're

00:33:13,419 --> 00:33:19,119
checking hashes so if you have if you

00:33:16,899 --> 00:33:20,830
say I'm depending on Django you lock

00:33:19,119 --> 00:33:22,300
that down too I'm depending on Joe

00:33:20,830 --> 00:33:24,340
and this should be the hash of the

00:33:22,300 --> 00:33:26,170
package I'm downloading and if for some

00:33:24,340 --> 00:33:29,560
reason you download a package that does

00:33:26,170 --> 00:33:31,840
not match that hash then you fail and

00:33:29,560 --> 00:33:34,360
throw it out there's a problem somebody

00:33:31,840 --> 00:33:37,360
maybe is you know hacked into pi PI or

00:33:34,360 --> 00:33:39,460
there's a rogue maintainer or something

00:33:37,360 --> 00:33:40,720
like that you want to know about these

00:33:39,460 --> 00:33:42,520
events and don't want to just like

00:33:40,720 --> 00:33:47,320
willy-nilly grab packages from the

00:33:42,520 --> 00:33:49,690
internet and then the other one is sub

00:33:47,320 --> 00:33:53,470
dependencies so you are generally going

00:33:49,690 --> 00:33:55,330
to define the dependencies your code

00:33:53,470 --> 00:33:58,360
depends on but those dependencies have

00:33:55,330 --> 00:34:01,360
dependencies and you want to lock those

00:33:58,360 --> 00:34:02,950
down as well that prevents kind of the

00:34:01,360 --> 00:34:04,900
ground from shifting underneath you as

00:34:02,950 --> 00:34:08,740
you deploy your project in different

00:34:04,900 --> 00:34:12,100
environments and also provides that hash

00:34:08,740 --> 00:34:13,929
checking for those and then finally if

00:34:12,100 --> 00:34:16,149
you are dealing with particularly

00:34:13,929 --> 00:34:18,190
sensitive information personally

00:34:16,149 --> 00:34:20,380
identify a little information things

00:34:18,190 --> 00:34:22,960
like that consider an external code

00:34:20,380 --> 00:34:24,399
audit they're expensive

00:34:22,960 --> 00:34:26,050
but they're not like you know

00:34:24,399 --> 00:34:27,669
outrageously expensive you if you're

00:34:26,050 --> 00:34:29,800
running a business you should be able to

00:34:27,669 --> 00:34:33,250
afford to do one of these so they may be

00:34:29,800 --> 00:34:35,950
doing analysis of your actual code

00:34:33,250 --> 00:34:40,540
itself or some sort of penetration

00:34:35,950 --> 00:34:43,149
testing of your site from outside next

00:34:40,540 --> 00:34:45,399
up is your environment so these are kind

00:34:43,149 --> 00:34:47,380
of you could have the really secure code

00:34:45,399 --> 00:34:51,429
and still run it in an insecure manner

00:34:47,380 --> 00:34:53,740
so I recommend like debug false always

00:34:51,429 --> 00:34:54,940
you always set the debug setting as

00:34:53,740 --> 00:34:56,470
false it doesn't matter if it's a

00:34:54,940 --> 00:35:00,220
development environment if it's on the

00:34:56,470 --> 00:35:02,230
internet its debug false and you know

00:35:00,220 --> 00:35:03,940
developers sometimes complain about this

00:35:02,230 --> 00:35:05,920
say oh I want to be able to see you if

00:35:03,940 --> 00:35:07,840
there's an error what happened there's

00:35:05,920 --> 00:35:10,990
much better ways to see errors than the

00:35:07,840 --> 00:35:17,010
debug 500-page I'll get to those in a

00:35:10,990 --> 00:35:19,180
minute the managed check deploy will

00:35:17,010 --> 00:35:21,100
check some of the common security

00:35:19,180 --> 00:35:23,770
settings in Jango and make sure that you

00:35:21,100 --> 00:35:26,140
set them properly for a public

00:35:23,770 --> 00:35:29,710
environment and then finally there's

00:35:26,140 --> 00:35:32,710
Observatory mozilla.org it has a lot of

00:35:29,710 --> 00:35:34,609
overlap with this check deploy one but

00:35:32,710 --> 00:35:36,680
it will basically check that your

00:35:34,609 --> 00:35:38,930
a lot of the security settings in Django

00:35:36,680 --> 00:35:40,339
are headers that for things that like

00:35:38,930 --> 00:35:42,010
you know might prevent clickjacking or

00:35:40,339 --> 00:35:45,710
something like that

00:35:42,010 --> 00:35:47,599
this observatory will actually make a

00:35:45,710 --> 00:35:48,950
request in your app from from the

00:35:47,599 --> 00:35:54,859
internet and make sure that you've got

00:35:48,950 --> 00:35:58,819
those all set up properly authentication

00:35:54,859 --> 00:36:00,950
so Django's admins really awesome and

00:35:58,819 --> 00:36:03,289
really easy to use and putting it on the

00:36:00,950 --> 00:36:07,309
internet is probably not a really great

00:36:03,289 --> 00:36:09,920
idea if you have a Django admin that

00:36:07,309 --> 00:36:12,609
you're using the best option is to put

00:36:09,920 --> 00:36:15,349
it behind a VPN put it behind a firewall

00:36:12,609 --> 00:36:18,500
somehow lock it down so the general

00:36:15,349 --> 00:36:20,450
internet public and angry bots cannot

00:36:18,500 --> 00:36:23,210
sit there and hammer away at the login

00:36:20,450 --> 00:36:26,839
page trying to figure out a valid

00:36:23,210 --> 00:36:28,880
account in some scenarios that may not

00:36:26,839 --> 00:36:33,369
be possible or maybe difficult in that

00:36:28,880 --> 00:36:35,539
case rate limited at a minimum

00:36:33,369 --> 00:36:37,339
CloudFlare can offer rate limiting

00:36:35,539 --> 00:36:39,289
there's lots of other ways to do it you

00:36:37,339 --> 00:36:41,329
can actually do it in Django itself I

00:36:39,289 --> 00:36:45,440
would kind of use that as a last resort

00:36:41,329 --> 00:36:47,539
but it's possible and then multi-factor

00:36:45,440 --> 00:36:50,270
authentication is the other one so if

00:36:47,539 --> 00:36:51,740
you have to have it on the internet use

00:36:50,270 --> 00:36:55,490
some sort of multi-factor authentication

00:36:51,740 --> 00:36:59,029
so if somebody gets their password you

00:36:55,490 --> 00:37:01,760
know lost in a database hack or

00:36:59,029 --> 00:37:04,520
something somebody can't use it to log

00:37:01,760 --> 00:37:07,660
in I haven't used this Jango two-factor

00:37:04,520 --> 00:37:10,369
off project myself but it appears to be

00:37:07,660 --> 00:37:12,950
designed exactly for that I have done

00:37:10,369 --> 00:37:15,170
things where just replace the default

00:37:12,950 --> 00:37:20,270
authentication with some service that

00:37:15,170 --> 00:37:21,980
you control AWS Cognito or like a Google

00:37:20,270 --> 00:37:26,210
suite and then you force anybody who's

00:37:21,980 --> 00:37:31,520
an admin to do multi-factor off at that

00:37:26,210 --> 00:37:33,770
place additional things to consider like

00:37:31,520 --> 00:37:36,349
I said there's a ton in the security

00:37:33,770 --> 00:37:40,069
world this scratches the surface

00:37:36,349 --> 00:37:45,269
SSH if you are running servers or your

00:37:40,069 --> 00:37:47,579
SSH endpoints secure are the keys secure

00:37:45,269 --> 00:37:50,609
your platform web console is a real easy

00:37:47,579 --> 00:37:52,890
way to totally destroy your site so if

00:37:50,609 --> 00:37:55,890
somebody's has a weak password there

00:37:52,890 --> 00:37:57,510
it's kind of game over so definitely

00:37:55,890 --> 00:38:00,990
make sure people are using multi-factor

00:37:57,510 --> 00:38:03,539
authentication their domain registrar's

00:38:00,990 --> 00:38:06,630
and emails are a good kind of backdoor

00:38:03,539 --> 00:38:08,130
method to get into your website hacking

00:38:06,630 --> 00:38:10,250
your email and then triggering a

00:38:08,130 --> 00:38:12,779
password reset or something like that

00:38:10,250 --> 00:38:15,390
backing services is a common one you

00:38:12,779 --> 00:38:18,029
hear so you know like accidentally

00:38:15,390 --> 00:38:22,109
public s3 buckets accidentally public

00:38:18,029 --> 00:38:24,630
MongoDB databases make sure if you can

00:38:22,109 --> 00:38:26,250
those services are private if you're on

00:38:24,630 --> 00:38:28,289
a platform where for some reason you

00:38:26,250 --> 00:38:29,730
can't have them be private make sure

00:38:28,289 --> 00:38:31,349
their password protected and they're

00:38:29,730 --> 00:38:33,869
using strong passwords and probably

00:38:31,349 --> 00:38:35,849
consider rotating your passwords and

00:38:33,869 --> 00:38:40,410
then finally api's if you're using the

00:38:35,849 --> 00:38:43,890
AWS CLI you know kubernetes CLI or

00:38:40,410 --> 00:38:46,140
something are those keys secured you

00:38:43,890 --> 00:38:48,390
know are those rotated periodically when

00:38:46,140 --> 00:38:55,039
a developer leaves are they are they

00:38:48,390 --> 00:38:59,039
revoked so that's security next up is

00:38:55,039 --> 00:39:01,769
observability which covers a lot of

00:38:59,039 --> 00:39:04,500
things covers logging covers error

00:39:01,769 --> 00:39:07,319
reporting covers you know kind of

00:39:04,500 --> 00:39:10,109
tracking metrics monitoring all that

00:39:07,319 --> 00:39:11,819
stuff so first up is Error reporting

00:39:10,109 --> 00:39:15,180
Jango has this really awesome feature

00:39:11,819 --> 00:39:16,859
where it will email you whenever there

00:39:15,180 --> 00:39:18,839
is an error on your website this is

00:39:16,859 --> 00:39:20,880
awesome when you have ten users hitting

00:39:18,839 --> 00:39:22,500
your website it's not so awesome when

00:39:20,880 --> 00:39:24,869
you have 10,000 users hitting your

00:39:22,500 --> 00:39:27,569
website and sending out 10,000 emails

00:39:24,869 --> 00:39:29,640
will both make your application servers

00:39:27,569 --> 00:39:31,319
very angry and probably your email

00:39:29,640 --> 00:39:35,519
provider very angry and might get you

00:39:31,319 --> 00:39:37,500
blocked so in general I recommend kind

00:39:35,519 --> 00:39:39,029
of flipping this off and not counting on

00:39:37,500 --> 00:39:42,089
it in production unless you're running a

00:39:39,029 --> 00:39:44,640
very very small site use something like

00:39:42,089 --> 00:39:46,200
sentry or roll bar these are much better

00:39:44,640 --> 00:39:48,900
tools for this you'll get much more

00:39:46,200 --> 00:39:51,210
information sentry is the one we use

00:39:48,900 --> 00:39:53,579
it's awesome it's built on Jango it's

00:39:51,210 --> 00:39:54,280
open source but use their hosted version

00:39:53,579 --> 00:39:56,050
it

00:39:54,280 --> 00:39:57,730
not that much and it will save you a ton

00:39:56,050 --> 00:39:59,790
of headache this is what I recommend

00:39:57,730 --> 00:40:03,010
instead of running debug false as well

00:39:59,790 --> 00:40:04,150
generally you can run lots of different

00:40:03,010 --> 00:40:07,090
projects or lots of different

00:40:04,150 --> 00:40:09,190
environments on a single instance of

00:40:07,090 --> 00:40:10,990
this so you could have your dev QA

00:40:09,190 --> 00:40:14,440
production all these different instances

00:40:10,990 --> 00:40:18,570
are reporting to sentry and and your

00:40:14,440 --> 00:40:23,340
developers can get their reports they're

00:40:18,570 --> 00:40:27,640
logging so you know historically we log

00:40:23,340 --> 00:40:29,770
you know data into a server a file on a

00:40:27,640 --> 00:40:31,600
server you can go read that file this

00:40:29,770 --> 00:40:36,700
breaks down when you don't have a server

00:40:31,600 --> 00:40:38,440
or when you've got many servers so look

00:40:36,700 --> 00:40:41,440
into how you can kind of aggregate those

00:40:38,440 --> 00:40:45,580
logs and and access them all in a single

00:40:41,440 --> 00:40:48,130
location AWS cloud watch Google stack

00:40:45,580 --> 00:40:52,920
drive it's generally built into the big

00:40:48,130 --> 00:40:56,200
cloud flat platforms I find those

00:40:52,920 --> 00:40:59,080
sufficient I guess they're generally

00:40:56,200 --> 00:41:01,720
kind of clunky in my experience I have

00:40:59,080 --> 00:41:03,310
used data dogs quite a bit which I don't

00:41:01,720 --> 00:41:06,520
you've probably seen me mention this

00:41:03,310 --> 00:41:09,070
service a few times they really have

00:41:06,520 --> 00:41:12,550
like a good suite of tools across the

00:41:09,070 --> 00:41:15,070
board here and it's kind of what they

00:41:12,550 --> 00:41:18,040
focus on so that that's a good option

00:41:15,070 --> 00:41:19,780
for collecting all these logs if you're

00:41:18,040 --> 00:41:21,220
using platform as a service it's

00:41:19,780 --> 00:41:24,580
probably already handled for you at

00:41:21,220 --> 00:41:27,310
least in the short window you also want

00:41:24,580 --> 00:41:29,080
to kind of consider how much time you

00:41:27,310 --> 00:41:30,940
need these logs for you might if you've

00:41:29,080 --> 00:41:33,520
got for compliance reasons you need to

00:41:30,940 --> 00:41:36,430
store this for 30 days make sure you're

00:41:33,520 --> 00:41:38,170
doing that because some you know if

00:41:36,430 --> 00:41:42,270
you're using like a Heroku or something

00:41:38,170 --> 00:41:44,260
you may not have any history in the logs

00:41:42,270 --> 00:41:46,210
and next up monitoring and alerting

00:41:44,260 --> 00:41:47,230
again this is like a little bit

00:41:46,210 --> 00:41:49,990
embarrassing there's like whole

00:41:47,230 --> 00:41:53,980
conferences around this topic so this is

00:41:49,990 --> 00:41:57,280
just like you know super brief intro but

00:41:53,980 --> 00:41:59,050
a few different ways to look at this if

00:41:57,280 --> 00:42:01,180
you're doing any sort of self hosting

00:41:59,050 --> 00:42:03,940
stuff you want to monitor your internal

00:42:01,180 --> 00:42:05,500
stack how is the CPU on your servers are

00:42:03,940 --> 00:42:07,510
you using too much memory are you

00:42:05,500 --> 00:42:10,150
running out of disk space

00:42:07,510 --> 00:42:14,050
is something threshing like you want to

00:42:10,150 --> 00:42:15,910
know that stuff internally you can be

00:42:14,050 --> 00:42:17,560
all well and good and still for some

00:42:15,910 --> 00:42:20,530
reason no traffic can get to your

00:42:17,560 --> 00:42:22,360
website so you also want to have

00:42:20,530 --> 00:42:24,190
external tests and something that's

00:42:22,360 --> 00:42:27,130
hitting your website potentially from

00:42:24,190 --> 00:42:30,250
multiple locations saying yes you are

00:42:27,130 --> 00:42:32,700
actually up and operating properly and

00:42:30,250 --> 00:42:35,410
then you need to alert on this data so

00:42:32,700 --> 00:42:37,060
if you're running a larger team you've

00:42:35,410 --> 00:42:39,400
got like on-call schedules and stuff

00:42:37,060 --> 00:42:41,320
page or duty and ops Jeanie are great we

00:42:39,400 --> 00:42:45,070
use ops Jeanie and are happy with it if

00:42:41,320 --> 00:42:47,230
you're a single person just sending it

00:42:45,070 --> 00:42:50,230
to slack sending it to an SMS sending it

00:42:47,230 --> 00:42:53,020
to an email might be sufficient and also

00:42:50,230 --> 00:42:56,620
be careful of kind of monitor fatigue or

00:42:53,020 --> 00:43:00,310
alerting fatigue here you don't want to

00:42:56,620 --> 00:43:01,930
be paging people at 3:00 a.m. because of

00:43:00,310 --> 00:43:03,610
something that's not really taking the

00:43:01,930 --> 00:43:06,940
site down and maybe not amaze your

00:43:03,610 --> 00:43:08,980
problem so generally my philosophy is

00:43:06,940 --> 00:43:10,420
you know page people when either the

00:43:08,980 --> 00:43:14,890
site's down or you have like very

00:43:10,420 --> 00:43:16,360
elevated error levels otherwise put

00:43:14,890 --> 00:43:17,860
those into a slack channel or something

00:43:16,360 --> 00:43:20,530
and let somebody check it when they're

00:43:17,860 --> 00:43:23,680
fresh and at work and you know can

00:43:20,530 --> 00:43:26,410
handle those kind of important things to

00:43:23,680 --> 00:43:32,080
look at but maybe not site is down level

00:43:26,410 --> 00:43:35,770
important and that is everything I have

00:43:32,080 --> 00:43:38,710
so yeah thanks so much for coming and

00:43:35,770 --> 00:43:41,350
again I'm Pete Baumgartner my slides

00:43:38,710 --> 00:43:44,020
were done by Joni triethyl at yep cup

00:43:41,350 --> 00:43:47,500
she's awesome she did the Jango Khan

00:43:44,020 --> 00:43:49,780
stuff as well I believe and I have a

00:43:47,500 --> 00:43:51,940
booth out here with Lincoln loop so if

00:43:49,780 --> 00:43:53,650
you have any questions I don't know if

00:43:51,940 --> 00:43:55,600
I'm gonna have any time right now if I

00:43:53,650 --> 00:43:57,310
do I'm happy to take some otherwise come

00:43:55,600 --> 00:44:00,100
see me at the booth I'm love talking

00:43:57,310 --> 00:44:02,380
about this stuff and happy to let you

00:44:00,100 --> 00:44:04,710
pick my brain or try to answer anything

00:44:02,380 --> 00:44:04,710
I can

00:44:05,350 --> 00:44:23,400
[Applause]

00:44:10,090 --> 00:44:23,400

YouTube URL: https://www.youtube.com/watch?v=tssYpA6WiQM


