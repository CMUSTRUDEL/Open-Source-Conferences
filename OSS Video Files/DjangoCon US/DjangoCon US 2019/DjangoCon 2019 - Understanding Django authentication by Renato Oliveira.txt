Title: DjangoCon 2019 - Understanding Django authentication by Renato Oliveira
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Understanding Django authentication by Renato Oliveira

Django gives us a built-in authentication system. It's an awesome asset for doing web development strictly with Django, but when you try to do something else, youâ€™ll need to integrate with other options. Understanding it at a base level makes more advanced authentication systems easier to implement.

This talk was presented at: https://2019.djangocon.us/talks/understanding-django-authentication/

LINKS:
Follow Renato Oliveira ğŸ‘‡
On Twitter: https://twitter.com/_renatooliveira
Official homepage: http://www.labcodes.com.br

Follow DjangCon US ğŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ğŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,860 --> 00:00:20,360
so hi everybody how are you today it's a

00:00:18,590 --> 00:00:23,110
recurrent incredible honor to be here

00:00:20,360 --> 00:00:25,670
and to give my first talk at Django calm

00:00:23,110 --> 00:00:27,740
and like my coworker and it's got Nicole

00:00:25,670 --> 00:00:32,510
used to say I'm I look nervous but don't

00:00:27,740 --> 00:00:34,280
worry it's just because I am okay so

00:00:32,510 --> 00:00:37,820
let's say you want to buy a piece of art

00:00:34,280 --> 00:00:40,280
I never bought famous art but I suppose

00:00:37,820 --> 00:00:42,110
you should go to an art dealer okay so

00:00:40,280 --> 00:00:43,970
you talk to your person and they show

00:00:42,110 --> 00:00:47,269
you a painting from a famous artist and

00:00:43,970 --> 00:00:49,699
it's real expensive and you don't want

00:00:47,269 --> 00:00:54,830
to put so much money in something that

00:00:49,699 --> 00:00:57,409
you not sure it's true or not so you

00:00:54,830 --> 00:01:00,559
start making questions who owns it who

00:00:57,409 --> 00:01:03,260
made it and how can you prove and then

00:01:00,559 --> 00:01:05,540
you're a dealer start showing documents

00:01:03,260 --> 00:01:09,830
that prove it proves the painting

00:01:05,540 --> 00:01:13,280
provenance so it was bought from

00:01:09,830 --> 00:01:17,359
somebody couple years ago before that it

00:01:13,280 --> 00:01:20,299
was exposed in this famous museum it was

00:01:17,359 --> 00:01:23,899
found at some point because it was

00:01:20,299 --> 00:01:25,729
declared lost many years ago because the

00:01:23,899 --> 00:01:29,000
painters sewed to somebody that didn't

00:01:25,729 --> 00:01:31,399
care that much about art and then voila

00:01:29,000 --> 00:01:33,289
here's the actual Instagram post by

00:01:31,399 --> 00:01:39,289
Salvador Dali bragging about the

00:01:33,289 --> 00:01:42,409
persistence of memory so what we just

00:01:39,289 --> 00:01:44,539
did or kind of was to get the provenance

00:01:42,409 --> 00:01:47,060
of a piece of art this is the chronology

00:01:44,539 --> 00:01:50,270
of the ownership of a historic object

00:01:47,060 --> 00:01:52,700
and it takes into account many different

00:01:50,270 --> 00:01:55,069
attributes to prove the provenance they

00:01:52,700 --> 00:01:58,159
are sensitive of a piece of art things

00:01:55,069 --> 00:01:59,950
like who has the work the artist when

00:01:58,159 --> 00:02:02,270
and where it was the painting was made

00:01:59,950 --> 00:02:06,350
how it was made and where it was

00:02:02,270 --> 00:02:08,539
exhibited and so event occasions not

00:02:06,350 --> 00:02:10,340
something only related to digital in

00:02:08,539 --> 00:02:13,220
fact there are different types of

00:02:10,340 --> 00:02:16,490
authentication in Windgate sorry we can

00:02:13,220 --> 00:02:18,050
take a look on their next so in this

00:02:16,490 --> 00:02:21,379
talk we'll cover

00:02:18,050 --> 00:02:23,599
authentication types and factors the

00:02:21,379 --> 00:02:24,500
authenticated function authentication

00:02:23,599 --> 00:02:28,610
backhands

00:02:24,500 --> 00:02:30,860
logout in sessions but first my name is

00:02:28,610 --> 00:02:32,870
Janet Oliveira and I'm from the city

00:02:30,860 --> 00:02:36,560
here hissy-fit probably did not the

00:02:32,870 --> 00:02:39,290
first one that you saw here it's an

00:02:36,560 --> 00:02:41,450
oasis city in Brasilia northeast and you

00:02:39,290 --> 00:02:44,570
should go there if you wanna like take

00:02:41,450 --> 00:02:46,520
vacations and I'm a co-founder at lab

00:02:44,570 --> 00:02:48,290
codes and my day job is basically to

00:02:46,520 --> 00:02:52,640
complain that I'm not coding as much as

00:02:48,290 --> 00:02:54,860
out like in the organizer the few

00:02:52,640 --> 00:02:57,290
conference in Brazil from local meetups

00:02:54,860 --> 00:02:58,730
to even Brazilian PyCon and I know how

00:02:57,290 --> 00:03:00,440
hard it is to put together a conference

00:02:58,730 --> 00:03:05,390
like this or like to thanks the

00:03:00,440 --> 00:03:07,310
organizing team for that and I'm a proud

00:03:05,390 --> 00:03:09,650
member of the Python user group from my

00:03:07,310 --> 00:03:12,280
state and I've been working with jungle

00:03:09,650 --> 00:03:15,050
for almost a decade

00:03:12,280 --> 00:03:17,090
little but lab codes were softer studio

00:03:15,050 --> 00:03:19,190
based in Brazil and we specialize in

00:03:17,090 --> 00:03:20,150
creating custom web products fitted for

00:03:19,190 --> 00:03:22,490
specific needs

00:03:20,150 --> 00:03:24,260
we believe that software should be built

00:03:22,490 --> 00:03:26,630
by fulfilling clients and users expect

00:03:24,260 --> 00:03:28,370
Asians and our software is always aim it

00:03:26,630 --> 00:03:31,760
at solving problems in optimizing

00:03:28,370 --> 00:03:33,530
process it's an order owner for me and

00:03:31,760 --> 00:03:35,870
for the team to be here speaking in

00:03:33,530 --> 00:03:38,269
sponsoring and I'll be here to all the

00:03:35,870 --> 00:03:43,910
screens and more ting happy to talk

00:03:38,269 --> 00:03:45,950
about what we do and like I said before

00:03:43,910 --> 00:03:47,720
I work with jungle for almost a decade

00:03:45,950 --> 00:03:49,940
and I've created my share of

00:03:47,720 --> 00:03:52,160
authentication system single sign ons

00:03:49,940 --> 00:03:54,830
custom authentication I've integrated

00:03:52,160 --> 00:03:57,290
with many third-party apps through off

00:03:54,830 --> 00:03:59,030
of queue and others and every time and

00:03:57,290 --> 00:04:01,010
every time I need to do something

00:03:59,030 --> 00:04:05,660
different I need to research all over

00:04:01,010 --> 00:04:07,430
again so ok sorry authentication is not

00:04:05,660 --> 00:04:10,040
something like storing a record in the

00:04:07,430 --> 00:04:13,190
database using a template tag or

00:04:10,040 --> 00:04:18,470
creating an API endpoint if you really

00:04:13,190 --> 00:04:20,780
do that once per project and if you work

00:04:18,470 --> 00:04:22,640
for the same company in the same project

00:04:20,780 --> 00:04:24,050
since you've learned how to jungle the

00:04:22,640 --> 00:04:24,680
change that you've implemented it once

00:04:24,050 --> 00:04:27,290
or Never

00:04:24,680 --> 00:04:31,400
are high so hopefully this talk will

00:04:27,290 --> 00:04:34,160
help us to remember it in the future and

00:04:31,400 --> 00:04:37,039
a little disclaimer here I'll show some

00:04:34,160 --> 00:04:37,980
code because it's a deep dive talk but

00:04:37,039 --> 00:04:40,830
I've got something

00:04:37,980 --> 00:04:46,230
from some things off to try to be more

00:04:40,830 --> 00:04:48,690
direct to the point so authentication is

00:04:46,230 --> 00:04:50,670
the process or actions action or probe

00:04:48,690 --> 00:04:53,910
of providing or showing something to be

00:04:50,670 --> 00:04:55,980
true genuine or valid and like we just

00:04:53,910 --> 00:04:58,050
saw it's not something only related to

00:04:55,980 --> 00:05:01,260
computers in fact there are three types

00:04:58,050 --> 00:05:03,390
of authentication the first type is

00:05:01,260 --> 00:05:06,060
accepting the proof of identity by a

00:05:03,390 --> 00:05:08,460
credible entity it can be a witness a

00:05:06,060 --> 00:05:11,010
reliable friend or our certificate

00:05:08,460 --> 00:05:15,300
authority here the authentication is

00:05:11,010 --> 00:05:18,090
implied so for example a product being

00:05:15,300 --> 00:05:20,160
sold by a known vendor implies offense t

00:05:18,090 --> 00:05:24,510
but even though they are not aware of

00:05:20,160 --> 00:05:27,210
all steps of the supply chain the second

00:05:24,510 --> 00:05:30,330
one is comparing the object attributes

00:05:27,210 --> 00:05:32,700
with no attribute from their origin kind

00:05:30,330 --> 00:05:35,610
of the depth typing of authentication

00:05:32,700 --> 00:05:37,890
and like an art expert might look at

00:05:35,610 --> 00:05:41,370
painting style location in a form of the

00:05:37,890 --> 00:05:44,670
signature also bills authentication is

00:05:41,370 --> 00:05:47,450
done by comparing attributes the tell

00:05:44,670 --> 00:05:49,980
type relies on external formations or

00:05:47,450 --> 00:05:54,060
documentation like a password store in

00:05:49,980 --> 00:05:55,770
the database or even my passport some

00:05:54,060 --> 00:05:57,540
products like medicines they need to

00:05:55,770 --> 00:06:01,830
take all three types of authentication

00:05:57,540 --> 00:06:03,870
to prevent counterfeit so when talking

00:06:01,830 --> 00:06:05,690
about electronic authentication we can

00:06:03,870 --> 00:06:08,520
use different factors to establish

00:06:05,690 --> 00:06:10,290
digital identity and there are there are

00:06:08,520 --> 00:06:12,720
three categories of authentication

00:06:10,290 --> 00:06:15,540
factors in their January book broken

00:06:12,720 --> 00:06:17,280
down as so knowledge factors is

00:06:15,540 --> 00:06:20,400
something that the user knows like a

00:06:17,280 --> 00:06:22,140
username or password possession factors

00:06:20,400 --> 00:06:24,480
is something that the user owns like a

00:06:22,140 --> 00:06:27,360
smart card or security token or a mobile

00:06:24,480 --> 00:06:29,280
device and inherence or biometric

00:06:27,360 --> 00:06:32,280
factors it's something that the user is

00:06:29,280 --> 00:06:35,940
like a fingerprint a voice or RF iris

00:06:32,280 --> 00:06:38,310
pattern single factor authentication is

00:06:35,940 --> 00:06:39,990
based in only one category

00:06:38,310 --> 00:06:41,850
the most common single factor

00:06:39,990 --> 00:06:43,710
authentication method we have is the

00:06:41,850 --> 00:06:45,720
combination of username and password

00:06:43,710 --> 00:06:49,680
it's something that the user there is a

00:06:45,720 --> 00:06:51,660
nose but for more critical systems with

00:06:49,680 --> 00:06:54,060
containing sensitive data

00:06:51,660 --> 00:07:00,240
important to add additional factors to

00:06:54,060 --> 00:07:02,460
establish the security so whoop affects

00:07:00,240 --> 00:07:04,470
our mood sorry mood pop factor

00:07:02,460 --> 00:07:06,960
authentication involves two or more

00:07:04,470 --> 00:07:09,660
independent credentials for more secure

00:07:06,960 --> 00:07:12,510
transactions okay single factor

00:07:09,660 --> 00:07:14,010
authentication username password is the

00:07:12,510 --> 00:07:16,050
most common type of authentication we

00:07:14,010 --> 00:07:17,460
have out there and we are a jungle

00:07:16,050 --> 00:07:22,110
conference so let's see how jungle does

00:07:17,460 --> 00:07:23,850
that gem jungle comes by the fall with

00:07:22,110 --> 00:07:26,310
an authentication system the

00:07:23,850 --> 00:07:29,130
configuration required right there we on

00:07:26,310 --> 00:07:33,350
our settings dot py generated by the

00:07:29,130 --> 00:07:36,210
stat project we need three apps of

00:07:33,350 --> 00:07:38,430
content types and sessions in two meters

00:07:36,210 --> 00:07:40,710
session leader and authentication leader

00:07:38,430 --> 00:07:43,500
the content type is used to allow

00:07:40,710 --> 00:07:46,410
permissions to be binded to be

00:07:43,500 --> 00:07:48,330
associated with any model you create in

00:07:46,410 --> 00:07:51,200
there often sessions contain the core of

00:07:48,330 --> 00:07:53,820
the authentication and session framework

00:07:51,200 --> 00:07:56,100
the main functionality of any

00:07:53,820 --> 00:07:59,970
authentication system is to let the user

00:07:56,100 --> 00:08:01,230
ring is to verify the user identity so

00:07:59,970 --> 00:08:04,710
that's our entry point the

00:08:01,230 --> 00:08:07,140
authentication function what this

00:08:04,710 --> 00:08:09,570
function does is to iterate over a list

00:08:07,140 --> 00:08:10,680
of authentication backends tries to

00:08:09,570 --> 00:08:14,190
authenticate the user with the

00:08:10,680 --> 00:08:16,050
credentials provided and if if any of

00:08:14,190 --> 00:08:19,680
the backends is that this user is denied

00:08:16,050 --> 00:08:22,490
it stops a tempting but if this user is

00:08:19,680 --> 00:08:25,080
authenticated it will return the user

00:08:22,490 --> 00:08:26,880
this function this function is the core

00:08:25,080 --> 00:08:29,580
of the authentication system in Django

00:08:26,880 --> 00:08:34,050
but we ended up adding another concept

00:08:29,580 --> 00:08:36,270
here the authentication backends this is

00:08:34,050 --> 00:08:37,800
the API provided by jungle to enable mud

00:08:36,270 --> 00:08:40,740
post source of authentication

00:08:37,800 --> 00:08:42,419
maybe our company is trying to create a

00:08:40,740 --> 00:08:44,640
single sign-on or you're trying to

00:08:42,419 --> 00:08:49,440
authenticate into another system with

00:08:44,640 --> 00:08:50,840
off to the API is the same you have to

00:08:49,440 --> 00:08:53,040
create an authentication back-end

00:08:50,840 --> 00:08:56,970
defining our front gate and get user

00:08:53,040 --> 00:09:00,140
methods few other stuff register on your

00:08:56,970 --> 00:09:02,310
settings and let Django do the rest by

00:09:00,140 --> 00:09:04,170
default Django comes with an

00:09:02,310 --> 00:09:05,689
authentication backing it actually - but

00:09:04,170 --> 00:09:11,220
it just uses

00:09:05,689 --> 00:09:13,769
by default it's the model back in which

00:09:11,220 --> 00:09:17,999
is the implementation of the default

00:09:13,769 --> 00:09:21,870
single factor authentication jungle so

00:09:17,999 --> 00:09:24,059
it gets the username and password gets

00:09:21,870 --> 00:09:26,180
the user and check their password and

00:09:24,059 --> 00:09:29,459
also if the user can authenticate

00:09:26,180 --> 00:09:31,559
there's a hack here a nice one so the

00:09:29,459 --> 00:09:34,379
time of the response of trying to

00:09:31,559 --> 00:09:36,180
authenticate into a existent user was

00:09:34,379 --> 00:09:38,970
different than a non-existent one

00:09:36,180 --> 00:09:40,740
because the check password hashes the

00:09:38,970 --> 00:09:43,290
password and takes some times to do that

00:09:40,740 --> 00:09:46,829
so it was easier to attackers to

00:09:43,290 --> 00:09:51,449
discover which users are actually in the

00:09:46,829 --> 00:09:53,370
database so this set password on the

00:09:51,449 --> 00:09:57,120
user model was added to add some

00:09:53,370 --> 00:09:59,309
response time so we just verified our

00:09:57,120 --> 00:10:00,990
user identity using a single factor

00:09:59,309 --> 00:10:03,149
authentication but we need to remember

00:10:00,990 --> 00:10:05,490
that we're over HTTP which is a

00:10:03,149 --> 00:10:08,370
stateless so it doesn't carry

00:10:05,490 --> 00:10:09,959
information between requests so we need

00:10:08,370 --> 00:10:12,629
a way to know that the user already

00:10:09,959 --> 00:10:15,689
proved their identity and we don't need

00:10:12,629 --> 00:10:25,559
to ask again on every request this is

00:10:15,689 --> 00:10:27,899
where logging in sessions enter so

00:10:25,559 --> 00:10:29,309
logging is the process to gain access to

00:10:27,899 --> 00:10:31,559
a system by identifying and

00:10:29,309 --> 00:10:34,500
authenticating where I did that with the

00:10:31,559 --> 00:10:36,930
user so we need a way it is to to know

00:10:34,500 --> 00:10:40,410
that the user already stuff is already

00:10:36,930 --> 00:10:43,139
authenticated and we don't need to twist

00:10:40,410 --> 00:10:45,269
over and over again so the login

00:10:43,139 --> 00:10:49,350
function it takes the authenticated user

00:10:45,269 --> 00:10:51,779
and persists it into the request it also

00:10:49,350 --> 00:10:55,290
uses the session framework to store the

00:10:51,779 --> 00:10:58,769
user primary key and can be accessed on

00:10:55,290 --> 00:11:01,829
every request using the session key so

00:10:58,769 --> 00:11:03,540
after the login is executed the user can

00:11:01,829 --> 00:11:05,519
access the login required resource

00:11:03,540 --> 00:11:10,050
without needing provided to provide

00:11:05,519 --> 00:11:13,139
their credentials again log out

00:11:10,050 --> 00:11:15,240
basically induced logging job it flushes

00:11:13,139 --> 00:11:17,250
the user session and change back the

00:11:15,240 --> 00:11:19,279
user and the request to an anonymous

00:11:17,250 --> 00:11:19,279
user

00:11:19,399 --> 00:11:28,500
like we can see on the school and like I

00:11:25,680 --> 00:11:30,269
said before HTTP is a stateless which

00:11:28,500 --> 00:11:31,830
means that the message between client

00:11:30,269 --> 00:11:34,290
and server are completely independent

00:11:31,830 --> 00:11:37,350
from each other and there is no sequence

00:11:34,290 --> 00:11:39,510
or behavior between requests so if you

00:11:37,350 --> 00:11:42,110
want to keep track of your user actions

00:11:39,510 --> 00:11:47,279
you need another way another way to

00:11:42,110 --> 00:11:49,320
manage that session is a temporary in

00:11:47,279 --> 00:11:51,899
the directive information that change

00:11:49,320 --> 00:11:55,500
between two two or more communicating

00:11:51,899 --> 00:11:57,510
devices or a computer in the user it's a

00:11:55,500 --> 00:11:59,760
mechanism that lets you store a betrayal

00:11:57,510 --> 00:12:01,980
data per browser and have that data

00:11:59,760 --> 00:12:04,649
available whenever the browser connected

00:12:01,980 --> 00:12:07,170
again so we could start out that data in

00:12:04,649 --> 00:12:10,620
cookies or URL parameters in fact they

00:12:07,170 --> 00:12:13,980
are very handy in some cases let's

00:12:10,620 --> 00:12:15,810
imagine a hotel aggregator service to

00:12:13,980 --> 00:12:17,519
find a place you need to put the CD you

00:12:15,810 --> 00:12:20,790
want to go check in and check out dates

00:12:17,519 --> 00:12:23,910
number of rooms people traveling with

00:12:20,790 --> 00:12:26,490
you and in the future traveling for work

00:12:23,910 --> 00:12:28,140
and then you found the right room and

00:12:26,490 --> 00:12:30,300
you need to share the information with

00:12:28,140 --> 00:12:34,050
someone else or maybe you want to save

00:12:30,300 --> 00:12:35,910
to look at it later a good way to do

00:12:34,050 --> 00:12:38,490
that to have all that information you

00:12:35,910 --> 00:12:42,690
need a URL it's insanely ugly as I know

00:12:38,490 --> 00:12:45,060
but it's very useful that prevents us to

00:12:42,690 --> 00:12:47,940
create an account or log into the system

00:12:45,060 --> 00:12:50,399
just to save the search and also allows

00:12:47,940 --> 00:12:53,040
us to share the URL with someone else

00:12:50,399 --> 00:12:59,220
and whoever whoever gets it will see the

00:12:53,040 --> 00:13:01,170
same information but for sensitive data

00:12:59,220 --> 00:13:05,730
the best ways to store on the server

00:13:01,170 --> 00:13:08,070
side so there are many ways to store

00:13:05,730 --> 00:13:11,310
browser data in Django

00:13:08,070 --> 00:13:13,380
it can be a database a file a cache and

00:13:11,310 --> 00:13:16,350
you can even use Django to store in your

00:13:13,380 --> 00:13:18,269
cookies but encrypted but jungles

00:13:16,350 --> 00:13:20,459
default implementation uses database

00:13:18,269 --> 00:13:22,500
actually we have all the implementations

00:13:20,459 --> 00:13:26,550
in jungle but it comes by default

00:13:22,500 --> 00:13:29,220
installed with database so the session

00:13:26,550 --> 00:13:31,920
model has three attributes the session

00:13:29,220 --> 00:13:34,290
key session data and the expired date

00:13:31,920 --> 00:13:35,700
and it lives inside the session lab when

00:13:34,290 --> 00:13:38,760
you'll be great migrate for the first

00:13:35,700 --> 00:13:41,880
time it the table is created but if for

00:13:38,760 --> 00:13:44,220
each time our session was updated hit

00:13:41,880 --> 00:13:49,500
the database it wouldn't be very

00:13:44,220 --> 00:13:53,490
performant perform attic for that jungle

00:13:49,500 --> 00:13:55,769
has a session store object there is an

00:13:53,490 --> 00:13:58,620
interface to access or session data

00:13:55,769 --> 00:14:01,529
without all the model databases overhead

00:13:58,620 --> 00:14:05,699
and it only saves once per request

00:14:01,529 --> 00:14:08,250
request the session store is a subclass

00:14:05,699 --> 00:14:10,560
of the session base and there is a

00:14:08,250 --> 00:14:13,110
implementation for each session basic

00:14:10,560 --> 00:14:15,029
option Django provides to us and it

00:14:13,110 --> 00:14:18,990
exposed some methods to handle the

00:14:15,029 --> 00:14:21,300
session data create delete load and save

00:14:18,990 --> 00:14:24,630
which actually saves the data in the

00:14:21,300 --> 00:14:27,149
database it's also a dicta like object

00:14:24,630 --> 00:14:32,070
so you can deal with all the data using

00:14:27,149 --> 00:14:34,800
dictionary operations you can use the

00:14:32,070 --> 00:14:37,560
session biased instantiating the session

00:14:34,800 --> 00:14:39,990
store object directly using the session

00:14:37,560 --> 00:14:42,750
key you already have it if you already

00:14:39,990 --> 00:14:46,230
have it or not passing anything if you

00:14:42,750 --> 00:14:50,220
creating a new one but when you create

00:14:46,230 --> 00:14:53,100
when you cooperate it will create the

00:14:50,220 --> 00:14:55,440
session key it will create a new session

00:14:53,100 --> 00:14:57,240
key sorry and story o session data in

00:14:55,440 --> 00:15:01,980
the database so you can access it later

00:14:57,240 --> 00:15:04,589
and thanks to the session leader we can

00:15:01,980 --> 00:15:07,290
also use it on on our views already

00:15:04,589 --> 00:15:11,370
instantiated as a request attribute like

00:15:07,290 --> 00:15:13,290
we saw earlier in this talk but and when

00:15:11,370 --> 00:15:16,680
the session mid where is instantiated it

00:15:13,290 --> 00:15:19,380
gets the session store based on what we

00:15:16,680 --> 00:15:22,410
defined on our settings in our case the

00:15:19,380 --> 00:15:25,800
database back-end and its save is it and

00:15:22,410 --> 00:15:28,319
save it as an attribute when the process

00:15:25,800 --> 00:15:30,120
request is called it tries to get the

00:15:28,319 --> 00:15:32,970
session ID cookie to recover their

00:15:30,120 --> 00:15:35,310
session from the database but if you are

00:15:32,970 --> 00:15:37,110
accessing the site for the first time it

00:15:35,310 --> 00:15:41,310
will be none and the new session store

00:15:37,110 --> 00:15:42,209
will be created it's also thanks to the

00:15:41,310 --> 00:15:45,180
session widower

00:15:42,209 --> 00:15:45,810
that after we change the session store

00:15:45,180 --> 00:15:48,990
object

00:15:45,810 --> 00:15:54,090
it gets save it into the database let's

00:15:48,990 --> 00:15:58,500
look at the simplified code so we get if

00:15:54,090 --> 00:16:03,630
our session was modified access or if

00:15:58,500 --> 00:16:06,240
it's empty if it was modified we get the

00:16:03,630 --> 00:16:10,020
session expire date if we set that to

00:16:06,240 --> 00:16:13,520
none the session will expire every time

00:16:10,020 --> 00:16:16,740
the browser closes if not we're going to

00:16:13,520 --> 00:16:19,470
it will going to be expired with the

00:16:16,740 --> 00:16:24,900
default value we have on our settings if

00:16:19,470 --> 00:16:27,900
the default is two weeks so but let's

00:16:24,900 --> 00:16:30,480
skim you might that if they did the

00:16:27,900 --> 00:16:33,990
modified flag we want to be true if we

00:16:30,480 --> 00:16:37,890
modify the session itself so if we

00:16:33,990 --> 00:16:40,740
modify the session fool here to a bar or

00:16:37,890 --> 00:16:45,120
delete it it will be modified but we if

00:16:40,740 --> 00:16:47,640
we modify a an idle of the session foo

00:16:45,120 --> 00:16:50,570
it won't be modified so the session

00:16:47,640 --> 00:16:54,060
won't be save again save it again

00:16:50,570 --> 00:16:56,070
so after saving the sessions session

00:16:54,060 --> 00:16:58,680
jungle will set the cook and send it to

00:16:56,070 --> 00:17:03,780
the users so we can use again on the

00:16:58,680 --> 00:17:06,050
next request so we now understand how

00:17:03,780 --> 00:17:09,360
login works how authentic eight calls

00:17:06,050 --> 00:17:11,459
authentication backends how our phantom

00:17:09,360 --> 00:17:13,500
backends are implemented and we

00:17:11,459 --> 00:17:15,720
understand sessions and how they work

00:17:13,500 --> 00:17:18,510
now we are going to see how those pieces

00:17:15,720 --> 00:17:20,130
are glued together and to provide the

00:17:18,510 --> 00:17:23,180
authentication feature in Django and

00:17:20,130 --> 00:17:27,449
I'll talk about four different scenarios

00:17:23,180 --> 00:17:29,700
so authenticated user often know an

00:17:27,449 --> 00:17:32,730
authenticated user an authenticated user

00:17:29,700 --> 00:17:36,720
with a session session change user

00:17:32,730 --> 00:17:40,290
authentication and logout so an

00:17:36,720 --> 00:17:44,360
authenticated user when or an

00:17:40,290 --> 00:17:47,550
authenticated request arrives in jungles

00:17:44,360 --> 00:17:50,850
project the first mid wire to be used is

00:17:47,550 --> 00:17:53,430
the session leader it tries to get the

00:17:50,850 --> 00:17:55,710
session and since it's your first time

00:17:53,430 --> 00:17:57,690
in the site for a while you don't have

00:17:55,710 --> 00:17:59,220
the session itself so it creates a new

00:17:57,690 --> 00:18:03,360
session store object

00:17:59,220 --> 00:18:06,570
with a session kid none after that we go

00:18:03,360 --> 00:18:08,220
to authentication widower it checks if

00:18:06,570 --> 00:18:10,320
you already have the session mirror

00:18:08,220 --> 00:18:12,840
installed because it's required and

00:18:10,320 --> 00:18:15,120
tries to assign a user to the request

00:18:12,840 --> 00:18:17,480
since you're not authenticated it will

00:18:15,120 --> 00:18:21,000
be an instance of the anonymous user

00:18:17,480 --> 00:18:22,910
this get functions function here calls

00:18:21,000 --> 00:18:26,280
actually calls the authentic e

00:18:22,910 --> 00:18:29,040
authentication back in get user sorry

00:18:26,280 --> 00:18:31,040
this get user function actually call the

00:18:29,040 --> 00:18:33,690
authentication back in get user function

00:18:31,040 --> 00:18:37,980
that we defined on the beginning of the

00:18:33,690 --> 00:18:40,890
talk so after that we get to our view it

00:18:37,980 --> 00:18:44,930
does its job renders what needs to be

00:18:40,890 --> 00:18:44,930
render and we go back to the mid where

00:18:48,140 --> 00:18:54,840
so the session we do our verifies that

00:18:51,930 --> 00:18:57,300
this if the session store is modified if

00:18:54,840 --> 00:19:00,330
what if it was access it and if it's

00:18:57,300 --> 00:19:03,150
empty since we didn't change anything on

00:19:00,330 --> 00:19:05,340
our session nothing will happen here the

00:19:03,150 --> 00:19:10,560
cookie won't be set and we don't have a

00:19:05,340 --> 00:19:14,750
session actually ok so next case is an

00:19:10,560 --> 00:19:17,640
authenticated user with a session change

00:19:14,750 --> 00:19:21,390
so until we get to the view it's

00:19:17,640 --> 00:19:23,820
basically the same the session mid word

00:19:21,390 --> 00:19:24,890
tries to get the session it can't so it

00:19:23,820 --> 00:19:27,600
creates a new one

00:19:24,890 --> 00:19:30,450
the off mid where binds the anonymous

00:19:27,600 --> 00:19:32,580
user with the request and then we get to

00:19:30,450 --> 00:19:35,490
the view and in the view here I'll

00:19:32,580 --> 00:19:36,330
change like a bit of the session just to

00:19:35,490 --> 00:19:40,290
see what happens

00:19:36,330 --> 00:19:42,780
Oh add my name here Ranade and the view

00:19:40,290 --> 00:19:45,090
wrap things up returns what need to be

00:19:42,780 --> 00:19:50,580
rendered and we get back to the session

00:19:45,090 --> 00:19:53,160
middle so since we added something on

00:19:50,580 --> 00:19:56,640
our session it is modified it is access

00:19:53,160 --> 00:20:00,540
it and is not empty so we will calculate

00:19:56,640 --> 00:20:02,880
the session expiry date we'll save the

00:20:00,540 --> 00:20:04,920
session and we will set the cookie in

00:20:02,880 --> 00:20:08,420
the response to be attach it to the

00:20:04,920 --> 00:20:11,129
browser as we can see here on our

00:20:08,420 --> 00:20:15,999
developer tools of choice

00:20:11,129 --> 00:20:18,789
and now we have a session attach it to

00:20:15,999 --> 00:20:22,110
an anonymous user let's see what happens

00:20:18,789 --> 00:20:25,809
when that user logs into the system so

00:20:22,110 --> 00:20:28,870
again we go over the session leader but

00:20:25,809 --> 00:20:30,970
now we have a session ID cookie we get

00:20:28,870 --> 00:20:36,279
that and create a new instance of the

00:20:30,970 --> 00:20:38,350
session store with that key we follow to

00:20:36,279 --> 00:20:41,309
the authentication widower and it will

00:20:38,350 --> 00:20:47,409
bind a non Mose user with the request

00:20:41,309 --> 00:20:49,210
and we get our login view login view is

00:20:47,409 --> 00:20:53,200
a form view and like we saw on

00:20:49,210 --> 00:20:56,259
Philippe's talk it will call the is

00:20:53,200 --> 00:21:00,879
valid function on the authentication

00:20:56,259 --> 00:21:03,519
form that is valid function actually

00:21:00,879 --> 00:21:05,830
calls the errors property which calls

00:21:03,519 --> 00:21:08,440
the full clean method which will call

00:21:05,830 --> 00:21:11,139
the clean method and that's where the

00:21:08,440 --> 00:21:13,450
magic happens we get the username and

00:21:11,139 --> 00:21:16,470
password and we call the authenticate

00:21:13,450 --> 00:21:18,700
function like we saw earlier the

00:21:16,470 --> 00:21:21,039
authenticate function we will terr it

00:21:18,700 --> 00:21:23,200
over the authentication back ends we

00:21:21,039 --> 00:21:25,749
only have one so it will check the

00:21:23,200 --> 00:21:27,700
password and with it we'll return the

00:21:25,749 --> 00:21:31,570
user the authenticated user to the

00:21:27,700 --> 00:21:34,659
authenticated function which we returned

00:21:31,570 --> 00:21:37,840
the user to the authentication form with

00:21:34,659 --> 00:21:39,999
the backend as an attribute and the

00:21:37,840 --> 00:21:43,860
authentication for will be valid because

00:21:39,999 --> 00:21:47,710
we don't raise any errors errors here

00:21:43,860 --> 00:21:50,409
the post receives true from the form is

00:21:47,710 --> 00:21:52,809
valid so it will call the form valid

00:21:50,409 --> 00:21:59,049
function which you perform the login

00:21:52,809 --> 00:22:02,590
itself so we it will verify that the

00:21:59,049 --> 00:22:05,519
user the authenticated sorry it will

00:22:02,590 --> 00:22:09,009
verify if the user has the authenticated

00:22:05,519 --> 00:22:11,440
authenticated session key it's hard it

00:22:09,009 --> 00:22:13,450
doesn't so it wasn't as encoded before

00:22:11,440 --> 00:22:17,139
us so it will cycle the click the key

00:22:13,450 --> 00:22:20,289
this process actually gets the previous

00:22:17,139 --> 00:22:23,139
data we had on our session creates a new

00:22:20,289 --> 00:22:24,630
key and keep that data again

00:22:23,139 --> 00:22:26,520
so when

00:22:24,630 --> 00:22:30,480
logging and we have something on our

00:22:26,520 --> 00:22:32,880
sessions it will be maintained we start

00:22:30,480 --> 00:22:35,010
the session P and the back end in the

00:22:32,880 --> 00:22:37,200
session and we attach the user to the

00:22:35,010 --> 00:22:42,950
request and now we can go back to the

00:22:37,200 --> 00:22:45,710
session middle so in the session middle

00:22:42,950 --> 00:22:49,380
our request was accessed

00:22:45,710 --> 00:22:51,990
modified and is not empty so we'll set

00:22:49,380 --> 00:22:54,390
the expire date and your saver session

00:22:51,990 --> 00:22:57,710
so the user can access through every

00:22:54,390 --> 00:23:04,280
request and we set the session ID cookie

00:22:57,710 --> 00:23:07,560
and then we are logging in now to logout

00:23:04,280 --> 00:23:10,110
so again the request arrives in the

00:23:07,560 --> 00:23:15,530
session leader it gets the user session

00:23:10,110 --> 00:23:17,850
key and its initiate a new session store

00:23:15,530 --> 00:23:21,480
the request then follows to the

00:23:17,850 --> 00:23:24,300
authentication mirror and so it gets the

00:23:21,480 --> 00:23:27,060
user and this function calls this get

00:23:24,300 --> 00:23:31,250
user function here it will get the user

00:23:27,060 --> 00:23:34,350
ID from the session so we start the user

00:23:31,250 --> 00:23:37,710
private primary key in the session key

00:23:34,350 --> 00:23:43,170
value of our session it will retrieve

00:23:37,710 --> 00:23:48,870
that it will get the backend from the

00:23:43,170 --> 00:23:52,890
session actually also and for each of

00:23:48,870 --> 00:23:56,220
the authentication backends it will load

00:23:52,890 --> 00:23:59,760
the backend and try to get the user if

00:23:56,220 --> 00:24:02,400
we sorry not for each for the backend we

00:23:59,760 --> 00:24:05,520
had define it it will load the back end

00:24:02,400 --> 00:24:10,410
and get the user and it will return the

00:24:05,520 --> 00:24:13,350
user to our previous out mid or get user

00:24:10,410 --> 00:24:16,770
function so we get to our logout view

00:24:13,350 --> 00:24:20,310
with our user in the request it will

00:24:16,770 --> 00:24:23,790
call the logout function which will

00:24:20,310 --> 00:24:26,790
flush the session and replace the user

00:24:23,790 --> 00:24:30,900
back to in the request with the

00:24:26,790 --> 00:24:34,590
anonymous user and then we follow again

00:24:30,900 --> 00:24:36,120
to the session mid where the session is

00:24:34,590 --> 00:24:38,250
now empty because we flush it it

00:24:36,120 --> 00:24:41,100
actually flushes

00:24:38,250 --> 00:24:43,020
a clean and the delete so it raised the

00:24:41,100 --> 00:24:45,630
data from the session and deletes the

00:24:43,020 --> 00:24:47,880
key so the session is now empty

00:24:45,630 --> 00:24:50,850
and since you is still have the session

00:24:47,880 --> 00:24:53,700
ID cookie on our cookies it can be

00:24:50,850 --> 00:24:56,480
deleted and we are final lock it out

00:24:53,700 --> 00:25:01,110
thank you Thanks

00:24:56,480 --> 00:25:14,420
[Applause]

00:25:01,110 --> 00:25:14,420

YouTube URL: https://www.youtube.com/watch?v=zb_riMIp2Sw


