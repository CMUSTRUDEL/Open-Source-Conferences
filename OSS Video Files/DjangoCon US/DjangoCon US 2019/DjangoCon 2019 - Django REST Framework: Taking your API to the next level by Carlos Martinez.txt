Title: DjangoCon 2019 - Django REST Framework: Taking your API to the next level by Carlos Martinez
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - Django REST Framework: Taking your API to the next level by Carlos Martinez

Django rest framework offers common solutions to make filters, manage permissions, validations but there are a lot options you can customize to give you better results for current or future projects.

This talk was presented at: https://2019.djangocon.us/talks/django-rest-framework-taking-your-api-to/

LINKS:
Follow Carlos Martinez ðŸ‘‡
On Twitter: https://twitter.com/carlosmart626
Official homepage: https://carlosmart.co

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,380 --> 00:00:23,390
thank you yes thank you everyone for

00:00:17,720 --> 00:00:26,390
joining to this talk okay let's begin I

00:00:23,390 --> 00:00:31,010
will talk regarding the agarose

00:00:26,390 --> 00:00:35,420
framework and how to make it in you go

00:00:31,010 --> 00:00:39,620
to an the next level so first of all who

00:00:35,420 --> 00:00:42,860
are our used a Django rest framework or

00:00:39,620 --> 00:00:46,760
no Django rest framework so great I

00:00:42,860 --> 00:00:50,449
don't need to make a review so Who am I

00:00:46,760 --> 00:00:52,690
Carlos Martinez I'm from Colombia come

00:00:50,449 --> 00:00:57,860
back end developer at uoit

00:00:52,690 --> 00:01:02,540
you can follow me Twitter on github and

00:00:57,860 --> 00:01:05,479
I'll also I have on a small block in

00:01:02,540 --> 00:01:07,010
this is Colombia there's the place that

00:01:05,479 --> 00:01:13,400
I came from

00:01:07,010 --> 00:01:19,460
I'm Granada the Python Bogota group we

00:01:13,400 --> 00:01:23,570
have a meet-up for about 2,500 members

00:01:19,460 --> 00:01:26,090
right now I also do photography Tom to

00:01:23,570 --> 00:01:31,909
time I have a daughter and I do travel

00:01:26,090 --> 00:01:36,950
photography so let's begin we're going

00:01:31,909 --> 00:01:38,719
to start with a five-minute M API and we

00:01:36,950 --> 00:01:43,130
are going to do something like have

00:01:38,719 --> 00:01:50,420
users create events have promoters for

00:01:43,130 --> 00:01:52,789
events and to create tickets so while we

00:01:50,420 --> 00:01:56,090
are doing this one we're start to think

00:01:52,789 --> 00:01:59,179
about these five topics how to display

00:01:56,090 --> 00:02:02,869
different data based on context for

00:01:59,179 --> 00:02:05,569
instance I don't want to say to get the

00:02:02,869 --> 00:02:08,450
same feels for an event based inside our

00:02:05,569 --> 00:02:12,370
ticket for instance how to get better

00:02:08,450 --> 00:02:16,940
performance how to filter information

00:02:12,370 --> 00:02:18,830
inside the API configure permissions and

00:02:16,940 --> 00:02:24,200
how to render results in different

00:02:18,830 --> 00:02:26,420
formats let me get out of here and let's

00:02:24,200 --> 00:02:30,200
take a look how our first version of the

00:02:26,420 --> 00:02:33,519
API is going to look like so this is our

00:02:30,200 --> 00:02:37,129
tickets endpoint as you can see I'm

00:02:33,519 --> 00:02:40,310
sending out a nested object for event

00:02:37,129 --> 00:02:46,280
and also for user on each ticket that I

00:02:40,310 --> 00:02:50,980
get user has only fields doesn't have

00:02:46,280 --> 00:02:55,370
any nested object in particular and for

00:02:50,980 --> 00:02:57,860
promoter for Evan sorry I got the same

00:02:55,370 --> 00:03:01,069
but only promoter is the nested object

00:02:57,860 --> 00:03:06,410
so that's it that's everything the API

00:03:01,069 --> 00:03:11,810
is working but now the problem is here

00:03:06,410 --> 00:03:15,319
that we have here is if I get only 10

00:03:11,810 --> 00:03:18,110
items I guess I have right now yeah it's

00:03:15,319 --> 00:03:23,690
not quite much it works fine I get

00:03:18,110 --> 00:03:27,019
responses in about let's take a look how

00:03:23,690 --> 00:03:31,069
much time is taken it's about 100

00:03:27,019 --> 00:03:37,760
milliseconds but let's start to to

00:03:31,069 --> 00:03:40,750
create a few more tickets always happens

00:03:37,760 --> 00:03:40,750
this kind of things

00:03:44,220 --> 00:03:49,200
come on dick

00:03:56,730 --> 00:04:01,630
give me one second please

00:03:59,020 --> 00:04:09,550
maybe I'm in the wrong branch yep that

00:04:01,630 --> 00:04:13,570
was the race okay sometimes happens okay

00:04:09,550 --> 00:04:16,540
right now I'm creating 5,000 new tickets

00:04:13,570 --> 00:04:20,410
for this API including promoters and

00:04:16,540 --> 00:04:24,130
users so it is continue going to create

00:04:20,410 --> 00:04:27,010
a few more what we're going to see in

00:04:24,130 --> 00:04:29,560
our API is that all these response times

00:04:27,010 --> 00:04:33,790
is going to grow bigger and bigger and

00:04:29,560 --> 00:04:39,010
begin bigger every time so our API is

00:04:33,790 --> 00:04:41,860
not done so first of all something that

00:04:39,010 --> 00:04:45,610
we can start to thinking about this when

00:04:41,860 --> 00:04:48,550
we have nested objects we can reuse our

00:04:45,610 --> 00:04:50,710
serializers so instead I have difference

00:04:48,550 --> 00:04:55,140
realizers for what is a representation

00:04:50,710 --> 00:04:58,390
of an event bit and inside of ticket and

00:04:55,140 --> 00:05:02,230
create a neutralizer class we can start

00:04:58,390 --> 00:05:07,450
to to use something called dynamic

00:05:02,230 --> 00:05:10,600
sterilizers so we can reuse our logic in

00:05:07,450 --> 00:05:12,820
a once or in once or Eliezer and use it

00:05:10,600 --> 00:05:17,710
for different purposes and different

00:05:12,820 --> 00:05:22,120
sections of the API so this is dynamic

00:05:17,710 --> 00:05:23,650
steriliser class that you can use it is

00:05:22,120 --> 00:05:26,680
based on multi rÃ©aliser

00:05:23,650 --> 00:05:31,870
from Django rest framework but the

00:05:26,680 --> 00:05:35,350
difference is that it has different

00:05:31,870 --> 00:05:39,810
attribute to get fields and that's what

00:05:35,350 --> 00:05:42,940
does really the trick then you will can

00:05:39,810 --> 00:05:48,370
create for instance in this case and an

00:05:42,940 --> 00:05:51,070
event sterilizer with one space to get

00:05:48,370 --> 00:05:54,340
the representation that you expect to

00:05:51,070 --> 00:05:56,740
get for this particular nested object so

00:05:54,340 --> 00:06:00,300
you can define

00:05:56,740 --> 00:06:04,870
static methods to get those fields in

00:06:00,300 --> 00:06:06,610
this this particular satellizer so if

00:06:04,870 --> 00:06:10,930
everything works fine you continues

00:06:06,610 --> 00:06:16,270
creating more things let me continue

00:06:10,930 --> 00:06:19,300
there we I just create too much so

00:06:16,270 --> 00:06:22,060
that's that's the main thing that you

00:06:19,300 --> 00:06:24,490
can do with dynamics analyzer so you can

00:06:22,060 --> 00:06:27,730
for instance create a static method to

00:06:24,490 --> 00:06:31,480
get location fields but you can get only

00:06:27,730 --> 00:06:34,390
another one method to return ID and name

00:06:31,480 --> 00:06:36,760
for instance if you need it to so that's

00:06:34,390 --> 00:06:40,360
the way you can create those particular

00:06:36,760 --> 00:06:44,770
methods that way you can save time reuse

00:06:40,360 --> 00:06:47,590
logic within the server laser that you

00:06:44,770 --> 00:06:55,990
already create and there's no code

00:06:47,590 --> 00:06:59,920
duplication so what about getting better

00:06:55,990 --> 00:07:01,840
performance as you can imagine you we

00:06:59,920 --> 00:07:04,590
started pretty good we started pretty

00:07:01,840 --> 00:07:07,840
fast there's no issues but the things

00:07:04,590 --> 00:07:10,570
started to get worse and worse when we

00:07:07,840 --> 00:07:15,160
get more users involved in our in our

00:07:10,570 --> 00:07:19,920
application so let's see if that already

00:07:15,160 --> 00:07:24,670
finishes well I'm going to stop this and

00:07:19,920 --> 00:07:28,630
let's take a look to how its it is it is

00:07:24,670 --> 00:07:32,500
working now I mean in the right one

00:07:28,630 --> 00:07:38,920
branch so let me switch back to the

00:07:32,500 --> 00:07:44,470
worse scenario right now previously I

00:07:38,920 --> 00:07:47,610
just read about 15,000 elements is

00:07:44,470 --> 00:07:53,350
trying to render that information and

00:07:47,610 --> 00:07:57,040
you can see here the howdy-ho jungle is

00:07:53,350 --> 00:07:59,830
making too many queries to the API today

00:07:57,040 --> 00:08:01,390
sorry to the database to get all the

00:07:59,830 --> 00:08:05,290
information that I am asking in this

00:08:01,390 --> 00:08:07,270
particular endpoint so until jungle

00:08:05,290 --> 00:08:09,470
doesn't get all that information is not

00:08:07,270 --> 00:08:15,290
going to respond

00:08:09,470 --> 00:08:21,320
so that's the reason we should start you

00:08:15,290 --> 00:08:26,960
to used prefetch and prefetch what

00:08:21,320 --> 00:08:30,050
really does it it will create for us a

00:08:26,960 --> 00:08:32,810
different query to a database to try to

00:08:30,050 --> 00:08:35,599
get all data that we need to make a

00:08:32,810 --> 00:08:40,190
representation for a seller Eliezer

00:08:35,599 --> 00:08:43,760
really easy and in just one query if

00:08:40,190 --> 00:08:46,190
that's that the case for instance let's

00:08:43,760 --> 00:08:49,570
take a look to what happens when you

00:08:46,190 --> 00:08:53,390
create the when you get ticket objects

00:08:49,570 --> 00:08:55,790
dot all it shows only is going to create

00:08:53,390 --> 00:08:59,060
a select with all the fields forum the

00:08:55,790 --> 00:09:01,790
table that you need but when you add

00:08:59,060 --> 00:09:05,270
select related what is going to do is

00:09:01,790 --> 00:09:07,570
going to get all the fields related to

00:09:05,270 --> 00:09:10,210
that model in particular that you have

00:09:07,570 --> 00:09:15,410
relation in in that model in particular

00:09:10,210 --> 00:09:17,390
so here is the same query but now gets

00:09:15,410 --> 00:09:20,570
not only the information about ticket

00:09:17,390 --> 00:09:23,180
but also the information about user so

00:09:20,570 --> 00:09:27,020
it's not going to go again to the

00:09:23,180 --> 00:09:29,630
database and make a hundred thousand or

00:09:27,020 --> 00:09:32,600
you of queries but instead it's going to

00:09:29,630 --> 00:09:35,780
be just one so that small change is

00:09:32,600 --> 00:09:40,810
going to save you a lot of time it's

00:09:35,780 --> 00:09:44,450
going to save you a lot of heads edges

00:09:40,810 --> 00:09:47,090
so that's the important thing but that

00:09:44,450 --> 00:09:50,900
you need to take a look how to get

00:09:47,090 --> 00:09:53,750
everything in in just one query prefetch

00:09:50,900 --> 00:09:57,070
related is going to be only one that

00:09:53,750 --> 00:10:00,890
which is useful but keep in mind that is

00:09:57,070 --> 00:10:04,370
great for many to many relationships and

00:10:00,890 --> 00:10:08,360
the previous one as we can see we get

00:10:04,370 --> 00:10:11,120
where user ID equals two users that ID

00:10:08,360 --> 00:10:14,960
so that way is making the relationship

00:10:11,120 --> 00:10:17,000
between them on prefetch related is

00:10:14,960 --> 00:10:19,160
going to be a little bit different but

00:10:17,000 --> 00:10:22,200
is even though it's going to be better

00:10:19,160 --> 00:10:25,320
than not making any profit related

00:10:22,200 --> 00:10:28,019
so in this case in particular is going

00:10:25,320 --> 00:10:30,540
to do two queries the first one to get

00:10:28,019 --> 00:10:32,430
the information about a ticket and the

00:10:30,540 --> 00:10:34,920
second one is going to get the

00:10:32,430 --> 00:10:37,050
information about the events but it's

00:10:34,920 --> 00:10:39,449
going to select only the IDS that they

00:10:37,050 --> 00:10:42,329
need to get direct to get the

00:10:39,449 --> 00:10:44,490
information that they expect so for

00:10:42,329 --> 00:10:47,699
instance is you make a filter for

00:10:44,490 --> 00:10:50,670
tickets and you are getting just set of

00:10:47,699 --> 00:10:53,160
tickets that is going it's going to

00:10:50,670 --> 00:10:56,430
create a different set of ID's that is

00:10:53,160 --> 00:11:02,610
going to query for the table parent so

00:10:56,430 --> 00:11:04,709
it's going to be way smaller also

00:11:02,610 --> 00:11:08,100
something that you can do and you can

00:11:04,709 --> 00:11:11,760
improve is to use the prefetch object

00:11:08,100 --> 00:11:13,560
what really help you out is to get

00:11:11,760 --> 00:11:16,470
information that you really need for

00:11:13,560 --> 00:11:22,079
that particular representation on the

00:11:16,470 --> 00:11:23,760
API so if you get if you see here inside

00:11:22,079 --> 00:11:25,860
the profit related

00:11:23,760 --> 00:11:29,100
instead of having the string of the

00:11:25,860 --> 00:11:33,260
related field I'm getting prefetch

00:11:29,100 --> 00:11:36,779
object inside a set a string of the

00:11:33,260 --> 00:11:39,990
attribute or the external or the Frankie

00:11:36,779 --> 00:11:42,899
and I can create a new query set and

00:11:39,990 --> 00:11:46,470
select the things that I really need so

00:11:42,899 --> 00:11:50,010
with that dot only I am Li asking for in

00:11:46,470 --> 00:11:52,500
this case ID and name so the query is

00:11:50,010 --> 00:11:55,769
going to be a little bit more smaller

00:11:52,500 --> 00:11:57,750
and when you have a lot of data to to

00:11:55,769 --> 00:12:01,649
get in it's going to to make the change

00:11:57,750 --> 00:12:04,740
so let's take a look if that already

00:12:01,649 --> 00:12:08,790
finishes yep it takes two minutes and

00:12:04,740 --> 00:12:10,709
five seconds to complete it so our user

00:12:08,790 --> 00:12:14,279
is gone from the application it's not

00:12:10,709 --> 00:12:18,990
going to continue with us

00:12:14,279 --> 00:12:23,130
so prefetch and related and select

00:12:18,990 --> 00:12:27,089
related is a must to our hour when our

00:12:23,130 --> 00:12:30,930
applications are growing next that we

00:12:27,089 --> 00:12:34,319
can do is to start to make an filter how

00:12:30,930 --> 00:12:36,529
to get out our information in a better

00:12:34,319 --> 00:12:36,529
way

00:12:37,310 --> 00:12:45,120
one package that is really useful to get

00:12:40,140 --> 00:12:49,560
this is to use jungle URL filter you can

00:12:45,120 --> 00:12:53,029
set up two ways the easy way is this one

00:12:49,560 --> 00:12:57,720
you only add jungle filter back end for

00:12:53,029 --> 00:12:59,520
URL filter integrations DRF and you can

00:12:57,720 --> 00:13:05,070
select the filters that you expect to

00:12:59,520 --> 00:13:07,589
get filters on and with this in

00:13:05,070 --> 00:13:10,110
particular you will be able to get to do

00:13:07,589 --> 00:13:12,649
something like this so you can go for

00:13:10,110 --> 00:13:16,380
the endpoint events and you can filter

00:13:12,649 --> 00:13:19,800
to get a set of ID's if you need to or

00:13:16,380 --> 00:13:22,170
you can get the name and make sure it

00:13:19,800 --> 00:13:26,940
contains any particular string that you

00:13:22,170 --> 00:13:30,740
expect to get or if a related object has

00:13:26,940 --> 00:13:33,480
some particular name in this case and

00:13:30,740 --> 00:13:36,089
you can start to filter even more

00:13:33,480 --> 00:13:40,050
complicated things so it's going to help

00:13:36,089 --> 00:13:45,120
you to get complex queries inside the

00:13:40,050 --> 00:13:48,900
URL but you can also make it without

00:13:45,120 --> 00:13:52,550
class and use a model filter set that

00:13:48,900 --> 00:13:55,980
you can reuse on different endpoints

00:13:52,550 --> 00:13:58,020
it's the same thing the same logic it's

00:13:55,980 --> 00:14:06,270
pretty similar to to make a serialize

00:13:58,020 --> 00:14:09,690
err a mole sterilizer alright so but we

00:14:06,270 --> 00:14:12,450
already make prefetch we already make a

00:14:09,690 --> 00:14:16,410
few things regarding filtering what

00:14:12,450 --> 00:14:20,579
about cache we can start to use the

00:14:16,410 --> 00:14:23,760
jungle powerful cache that we have out

00:14:20,579 --> 00:14:26,940
of the box so to do it you need to

00:14:23,760 --> 00:14:29,220
activate those middle words with a red

00:14:26,940 --> 00:14:31,079
arrow arrow and make sure that the

00:14:29,220 --> 00:14:34,440
common field comma meal where is in the

00:14:31,079 --> 00:14:37,410
middle somewhere in the middle and to

00:14:34,440 --> 00:14:41,480
make it work using Django rest framework

00:14:37,410 --> 00:14:44,790
you need to call these two decorators

00:14:41,480 --> 00:14:49,110
Vario cookie with a method decorator

00:14:44,790 --> 00:14:51,870
body and cookie and the decorator to get

00:14:49,110 --> 00:14:55,590
catch a page and you can set up them

00:14:51,870 --> 00:15:00,180
time if that you want and if you need to

00:14:55,590 --> 00:15:05,100
and I recommend it to make it select and

00:15:00,180 --> 00:15:08,820
create our K prefix so that way you you

00:15:05,100 --> 00:15:14,120
won't forget how to invalidate your

00:15:08,820 --> 00:15:14,120
country you your cash at this point so

00:15:14,570 --> 00:15:21,330
if you set up these in is working is

00:15:19,560 --> 00:15:23,430
going to give you a better performance

00:15:21,330 --> 00:15:26,910
please do not forget you invalidate

00:15:23,430 --> 00:15:30,480
catch cash in some way so drop these

00:15:26,910 --> 00:15:33,750
lines of code somewhere in your code to

00:15:30,480 --> 00:15:36,300
make sure then when something change the

00:15:33,750 --> 00:15:42,740
cash is invalidated at the right time

00:15:36,300 --> 00:15:45,540
and not after the time expired but

00:15:42,740 --> 00:15:48,990
there's something else that we can do to

00:15:45,540 --> 00:15:52,350
improve our performance using cash one

00:15:48,990 --> 00:15:56,160
is a really good package called Jango

00:15:52,350 --> 00:16:00,750
cash shops and what is going to help you

00:15:56,160 --> 00:16:03,330
out is to cash all or m transactions

00:16:00,750 --> 00:16:07,080
that you are doing and you can cash

00:16:03,330 --> 00:16:11,100
multiple queries heads so to use cash

00:16:07,080 --> 00:16:12,060
ops unit you need to start to working we

00:16:11,100 --> 00:16:15,480
using Redis

00:16:12,060 --> 00:16:19,020
so to be able to use it you've had to

00:16:15,480 --> 00:16:23,790
stall ups as many packages already set

00:16:19,020 --> 00:16:26,010
up your readies cash and you can use

00:16:23,790 --> 00:16:30,210
these configurations to set up a few

00:16:26,010 --> 00:16:35,490
things regarding what you expect to cash

00:16:30,210 --> 00:16:38,730
ups to start to to make cash for you and

00:16:35,490 --> 00:16:41,250
you can set up your own models and your

00:16:38,730 --> 00:16:44,130
applications to be cash so you can

00:16:41,250 --> 00:16:47,700
define what operation is going to be

00:16:44,130 --> 00:16:50,310
cash by default what is going to be

00:16:47,700 --> 00:16:51,600
their time out but by default on on

00:16:50,310 --> 00:16:55,380
different applications and different

00:16:51,600 --> 00:17:00,150
models if you need to and you can define

00:16:55,380 --> 00:17:02,940
to to create a cash for everything but

00:17:00,150 --> 00:17:05,820
it's not quite recommended because you

00:17:02,940 --> 00:17:11,820
made up having cash on different things

00:17:05,820 --> 00:17:16,980
that you really don't want to so if you

00:17:11,820 --> 00:17:19,160
need to you can also make cash you can

00:17:16,980 --> 00:17:24,150
use cash ops to to make it by yourself

00:17:19,160 --> 00:17:27,540
so as you can see we have this get

00:17:24,150 --> 00:17:30,560
corset from mold you set and you can

00:17:27,540 --> 00:17:35,570
define the your query has as expected

00:17:30,560 --> 00:17:39,900
but at the end you append dot cash and

00:17:35,570 --> 00:17:42,870
open a closing parenthesis with that is

00:17:39,900 --> 00:17:46,110
going to be cash in in Redis and you

00:17:42,870 --> 00:17:49,110
will get their results not roll from

00:17:46,110 --> 00:17:51,570
your database but instead from readies

00:17:49,110 --> 00:17:56,370
so it's going to help you out with

00:17:51,570 --> 00:17:58,470
performance but what about permissions

00:17:56,370 --> 00:18:02,910
what we can do to improve our

00:17:58,470 --> 00:18:08,570
permissions actually jagat already has a

00:18:02,910 --> 00:18:11,070
very great permission system but we can

00:18:08,570 --> 00:18:13,830
try to use something called dry

00:18:11,070 --> 00:18:20,070
permissions and it's going to improve

00:18:13,830 --> 00:18:23,520
our experience so in your package we

00:18:20,070 --> 00:18:26,790
installed whip dry dressed from dry

00:18:23,520 --> 00:18:30,300
erase permissions I let you our stall it

00:18:26,790 --> 00:18:33,180
up and what I'm we're going to do is to

00:18:30,300 --> 00:18:36,570
in in our beset we're going to add

00:18:33,180 --> 00:18:40,080
permission classes this line over here

00:18:36,570 --> 00:18:43,680
and you can define if that's pull the

00:18:40,080 --> 00:18:46,710
campaign or app is require

00:18:43,680 --> 00:18:49,500
authentication but also add dry

00:18:46,710 --> 00:18:52,140
permissions and now you can start to

00:18:49,500 --> 00:18:56,910
doing something like this so in your

00:18:52,140 --> 00:19:00,090
models you can define a set of global

00:18:56,910 --> 00:19:02,790
permissions in these cases is these

00:19:00,090 --> 00:19:04,860
examples are a has permission to read

00:19:02,790 --> 00:19:08,580
has permission to write or has

00:19:04,860 --> 00:19:12,030
permission to create so you get access

00:19:08,580 --> 00:19:15,810
to their request at this point you can

00:19:12,030 --> 00:19:16,650
say you can get the user and you can

00:19:15,810 --> 00:19:20,130
make samba

00:19:16,650 --> 00:19:24,809
you can get required permission require

00:19:20,130 --> 00:19:27,930
an attribute inside the the the user or

00:19:24,809 --> 00:19:31,559
anything from their request so you can

00:19:27,930 --> 00:19:36,090
define different different sets of rules

00:19:31,559 --> 00:19:40,460
for each of one and you can also have

00:19:36,090 --> 00:19:43,170
object permissions so it's not only

00:19:40,460 --> 00:19:45,809
global but also you can have access to

00:19:43,170 --> 00:19:48,660
the instance itself and make some

00:19:45,809 --> 00:19:53,100
validations the first example is going

00:19:48,660 --> 00:19:56,280
to make like the user is related to that

00:19:53,100 --> 00:19:59,910
particular object and also you can

00:19:56,280 --> 00:20:02,070
require has mentioned before I require a

00:19:59,910 --> 00:20:06,770
particular permission already granted

00:20:02,070 --> 00:20:06,770
for that user that is requesting access

00:20:07,100 --> 00:20:13,800
but even though you can add also

00:20:10,670 --> 00:20:17,250
permission not to only the object but

00:20:13,800 --> 00:20:20,929
also to a field or an action so if you

00:20:17,250 --> 00:20:24,960
have a field and you want to protect you

00:20:20,929 --> 00:20:28,410
get right to a particular field you can

00:20:24,960 --> 00:20:33,750
set up this method and you can protect

00:20:28,410 --> 00:20:37,590
this particular change and if you define

00:20:33,750 --> 00:20:41,580
in AB you set and different action you

00:20:37,590 --> 00:20:44,850
can use it in with the name and you can

00:20:41,580 --> 00:20:46,440
make a restriction over there and so all

00:20:44,850 --> 00:20:49,920
the logical regard and permission is

00:20:46,440 --> 00:20:53,309
going to be only on each model so it's

00:20:49,920 --> 00:21:00,570
easier to find where the the actual

00:20:53,309 --> 00:21:02,820
logic is there but you can customize a

00:21:00,570 --> 00:21:08,150
little bit more maybe you want to share

00:21:02,820 --> 00:21:11,760
a set of permissions within different

00:21:08,150 --> 00:21:15,570
models one way to do it is to create our

00:21:11,760 --> 00:21:18,450
custom permission so this is based on

00:21:15,570 --> 00:21:23,760
rest framework permission itself and you

00:21:18,450 --> 00:21:25,980
can use it for different because you

00:21:23,760 --> 00:21:29,760
only need to implement the implementing

00:21:25,980 --> 00:21:30,540
method has permission and has some

00:21:29,760 --> 00:21:33,270
utility

00:21:30,540 --> 00:21:39,600
for instance safe methods are going to

00:21:33,270 --> 00:21:42,300
be get meta and options so you are given

00:21:39,600 --> 00:21:45,870
in this case access to make wear and

00:21:42,300 --> 00:21:48,330
make requests to that method but it is

00:21:45,870 --> 00:21:50,940
not one of these methods is going to

00:21:48,330 --> 00:21:54,180
require a permission before you can

00:21:50,940 --> 00:21:57,690
grant it access for patch pollute post

00:21:54,180 --> 00:22:00,570
so done time to can help you out to you

00:21:57,690 --> 00:22:03,870
at this permission two different view

00:22:00,570 --> 00:22:07,050
sets and then you can protect in a

00:22:03,870 --> 00:22:10,670
different way that particular be set

00:22:07,050 --> 00:22:10,670
that you that you had that permission

00:22:11,150 --> 00:22:18,150
but how to use them dry permissions when

00:22:14,940 --> 00:22:21,420
you are outside of a model you said if

00:22:18,150 --> 00:22:23,430
you create an API bill you're going to

00:22:21,420 --> 00:22:26,390
see that it will throw you an error

00:22:23,430 --> 00:22:28,920
because there is not a key request so

00:22:26,390 --> 00:22:33,150
important in those cases you will need

00:22:28,920 --> 00:22:35,550
to create your fertilizer with context

00:22:33,150 --> 00:22:38,280
it's going to require to provide a

00:22:35,550 --> 00:22:42,300
request otherwise it's going to throw

00:22:38,280 --> 00:22:47,250
your never because the model has not way

00:22:42,300 --> 00:22:48,960
to to get the request and make and run

00:22:47,250 --> 00:22:57,510
all your logic that you are defining

00:22:48,960 --> 00:23:00,750
there and that's one but I want to bring

00:22:57,510 --> 00:23:05,570
to you guys to to take your your API to

00:23:00,750 --> 00:23:10,380
another level is to use some renders so

00:23:05,570 --> 00:23:15,360
yesterday we saw this package working

00:23:10,380 --> 00:23:18,300
when using automatic so this is going to

00:23:15,360 --> 00:23:22,850
be on our example is very very useful to

00:23:18,300 --> 00:23:26,420
and very easy to implement so on your

00:23:22,850 --> 00:23:31,610
model you said you only need to add this

00:23:26,420 --> 00:23:35,880
particular class XLS file mixing and

00:23:31,610 --> 00:23:39,870
inside renderer classes you need to add

00:23:35,880 --> 00:23:43,140
Excel renderer so we tell you without in

00:23:39,870 --> 00:23:44,130
mind you can will you can create Excel

00:23:43,140 --> 00:23:49,530
files

00:23:44,130 --> 00:23:51,780
just calling the the API by created by

00:23:49,530 --> 00:23:56,280
adding a new header or make an

00:23:51,780 --> 00:23:59,160
explicitly on the URL don't forget if

00:23:56,280 --> 00:24:03,960
you need to if you want to get to

00:23:59,160 --> 00:24:06,660
continue having the API HTML view from

00:24:03,960 --> 00:24:07,890
your from Django rest framework don't

00:24:06,660 --> 00:24:10,380
forget to add browsable

00:24:07,890 --> 00:24:16,500
API render otherwise is going to be just

00:24:10,380 --> 00:24:20,430
JSON or or Excel all this code is going

00:24:16,500 --> 00:24:22,380
to be available on this repo I'll give

00:24:20,430 --> 00:24:26,520
you a couple seconds you can take a

00:24:22,380 --> 00:24:30,180
picture and let's take a look to how it

00:24:26,520 --> 00:24:36,630
works after we do all the things to do

00:24:30,180 --> 00:24:43,920
this API so let's take a look so I'm

00:24:36,630 --> 00:24:48,660
going to change the branch to master and

00:24:43,920 --> 00:24:54,680
our previous response took two minutes

00:24:48,660 --> 00:24:57,210
and a little more and now is only 124

00:24:54,680 --> 00:24:59,340
milliseconds of course it's paginate it

00:24:57,210 --> 00:25:05,280
but that's the idea to get quick

00:24:59,340 --> 00:25:10,050
responses and we are getting the event

00:25:05,280 --> 00:25:12,540
and the user here and you can see here

00:25:10,050 --> 00:25:16,200
remember the last time we try I try to

00:25:12,540 --> 00:25:18,750
do to this these are the locks to all

00:25:16,200 --> 00:25:20,850
the queries that the jungle was doing to

00:25:18,750 --> 00:25:25,410
get that in front that representation

00:25:20,850 --> 00:25:27,660
and now this is it this is what is

00:25:25,410 --> 00:25:30,530
really doing right now to get all that

00:25:27,660 --> 00:25:35,640
information so it's a very small query

00:25:30,530 --> 00:25:38,150
our DevOps team is going to love us to

00:25:35,640 --> 00:25:42,300
do the Christine that that kind of stuff

00:25:38,150 --> 00:25:46,440
but of course you can get even a little

00:25:42,300 --> 00:25:51,540
bit more it's going to take extra time

00:25:46,440 --> 00:25:56,160
to to render it depends on how many data

00:25:51,540 --> 00:25:56,550
do you want you to get in this case I'm

00:25:56,160 --> 00:25:57,840
getting

00:25:56,550 --> 00:26:02,110
[Music]

00:25:57,840 --> 00:26:05,680
all almost all that does it no 10,000

00:26:02,110 --> 00:26:09,330
items but is getting seven megabytes of

00:26:05,680 --> 00:26:13,450
data at this point in and I took about

00:26:09,330 --> 00:26:15,760
three minutes so maybe that's not what

00:26:13,450 --> 00:26:18,610
you're expecting to to to get that's not

00:26:15,760 --> 00:26:22,270
exactly maybe what you need but you can

00:26:18,610 --> 00:26:28,930
define the limits using the jungle rest

00:26:22,270 --> 00:26:31,210
framework pagination so well that's

00:26:28,930 --> 00:26:36,910
that's it for now

00:26:31,210 --> 00:26:39,600
I want to thank you to my team at UOIT

00:26:36,910 --> 00:26:43,510
and also for the client that I work with

00:26:39,600 --> 00:26:44,380
building engines that's that's where all

00:26:43,510 --> 00:26:48,610
the magic happens

00:26:44,380 --> 00:26:50,540
and I learned that all these things so

00:26:48,610 --> 00:26:52,420
thank you

00:26:50,540 --> 00:26:59,839
[Applause]

00:26:52,420 --> 00:26:59,839
[Music]

00:27:02,179 --> 00:27:04,240

YouTube URL: https://www.youtube.com/watch?v=695y8rdHsA4


