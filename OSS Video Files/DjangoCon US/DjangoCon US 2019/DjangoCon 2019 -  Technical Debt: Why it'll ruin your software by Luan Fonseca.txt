Title: DjangoCon 2019 -  Technical Debt: Why it'll ruin your software by Luan Fonseca
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 -  Technical Debt: Why it'll ruin your software by Luan Fonseca

Technical Debt is one of the main reasons why software fails, we are used to think that it is just bad code. This talk propose a bigger picture view of what it means in a Sustainable Software era, how can we identify bottlenecks that are generating more debt and then how to healthy deal with it.

This talk was presented at: https://2019.djangocon.us/talks/technical-debt-why-it-ll-ruin-your/

LINKS:
Follow Luan Fonseca ðŸ‘‡
On Twitter: https://twitter.com/luanfonceca


Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:19,369
[Music]

00:00:15,410 --> 00:00:22,910
hi everyone technical depth in white if

00:00:19,369 --> 00:00:26,180
you were in your software and here you

00:00:22,910 --> 00:00:28,130
can see a really known monument and it's

00:00:26,180 --> 00:00:30,710
located in Italy more specific link

00:00:28,130 --> 00:00:33,800
Pizza and it's called Leaning Tower of

00:00:30,710 --> 00:00:36,830
Pisa just visit our this building has a

00:00:33,800 --> 00:00:39,410
very interesting story behind it because

00:00:36,830 --> 00:00:41,750
it was built on the 12th century and due

00:00:39,410 --> 00:00:44,780
to a soft ground which could not sustain

00:00:41,750 --> 00:00:47,870
the weight of the monument it started to

00:00:44,780 --> 00:00:51,290
lean ok destroyed a structure was

00:00:47,870 --> 00:00:54,860
stabilized in 2001 after 8 years of you

00:00:51,290 --> 00:00:57,140
work one fun fact is one of those he

00:00:54,860 --> 00:01:00,170
works and fixes in fact maybe leaning

00:00:57,140 --> 00:01:02,809
worse well I don't know if you guys

00:01:00,170 --> 00:01:04,850
already passed through this but I read

00:01:02,809 --> 00:01:08,330
did a factoring that makes the problem

00:01:04,850 --> 00:01:09,770
worse so I came blame then and now I

00:01:08,330 --> 00:01:13,190
hope you have two questions in mind

00:01:09,770 --> 00:01:16,369
first one why the pizza towers will it's

00:01:13,190 --> 00:01:19,250
technical debt and in my Italian because

00:01:16,369 --> 00:01:21,710
I didn't say about pizza no the first

00:01:19,250 --> 00:01:24,259
one you know through the to the end of

00:01:21,710 --> 00:01:27,409
this talk and the second one no I am not

00:01:24,259 --> 00:01:29,899
from Italy I'm from Brazil actually I'm

00:01:27,409 --> 00:01:33,560
from a really a really decent place from

00:01:29,899 --> 00:01:35,179
Italy I am from city called his CV where

00:01:33,560 --> 00:01:37,460
this accent that you're here is

00:01:35,179 --> 00:01:39,590
Portuguese so his Seif is a city that

00:01:37,460 --> 00:01:41,299
has the best carnaval in the world and

00:01:39,590 --> 00:01:44,060
at least seven people who agree because

00:01:41,299 --> 00:01:46,700
every Brazilian speaker that hasn't this

00:01:44,060 --> 00:01:48,920
conference are also from his if so it's

00:01:46,700 --> 00:01:51,259
really nice ok

00:01:48,920 --> 00:01:54,530
my name is Luo Fonseca I am work with

00:01:51,259 --> 00:01:57,049
jungle since version 1.2 almost like 10

00:01:54,530 --> 00:01:58,850
years already and I'm the founder of

00:01:57,049 --> 00:02:02,299
open source project called speaker 5

00:01:58,850 --> 00:02:03,530
cone which we manage almost all meetups

00:02:02,299 --> 00:02:06,770
in conference for the Python community

00:02:03,530 --> 00:02:09,950
back in Brazil and also I'm a software

00:02:06,770 --> 00:02:13,310
engineer at lab codes which lab codes is

00:02:09,950 --> 00:02:15,140
a software studio that's based in Brazil

00:02:13,310 --> 00:02:18,739
and we specialize in creating Cousteau a

00:02:15,140 --> 00:02:21,049
product fitted for specific needs and we

00:02:18,739 --> 00:02:22,430
believe that software should be built by

00:02:21,049 --> 00:02:23,400
fulfilling clients and users

00:02:22,430 --> 00:02:25,890
expectations

00:02:23,400 --> 00:02:28,140
our software is always aim it at solving

00:02:25,890 --> 00:02:30,540
problems in optimizing process

00:02:28,140 --> 00:02:32,550
it's incredible honour for us to be part

00:02:30,540 --> 00:02:34,860
of this conference giving talks and

00:02:32,550 --> 00:02:38,069
sponsoring because I'd have a talk today

00:02:34,860 --> 00:02:42,629
Nicky did that yesterday and Hinata will

00:02:38,069 --> 00:02:44,269
be on Thursday Vic yeah ok tomorrow Oh

00:02:42,629 --> 00:02:47,670
tomorrow thanks

00:02:44,269 --> 00:02:49,280
and ok the agenda of this talk will

00:02:47,670 --> 00:02:51,330
start with a short story about John

00:02:49,280 --> 00:02:55,440
showing the reality of everyday

00:02:51,330 --> 00:02:57,599
programmer then will you go find out why

00:02:55,440 --> 00:03:00,420
technical depth is always seen as a bad

00:02:57,599 --> 00:03:03,810
thing in who should be responsible for

00:03:00,420 --> 00:03:06,110
that after that we will go through some

00:03:03,810 --> 00:03:09,599
solutions that are not so good and

00:03:06,110 --> 00:03:12,239
another and you can check another that

00:03:09,599 --> 00:03:14,910
can be healthier for these problems

00:03:12,239 --> 00:03:16,829
about technical depth we discuss if it's

00:03:14,910 --> 00:03:20,340
lucrative for the companies to deal with

00:03:16,829 --> 00:03:22,470
technical depth and what word the guys

00:03:20,340 --> 00:03:25,650
that connect the concept of technical

00:03:22,470 --> 00:03:29,430
depth and based off everything like that

00:03:25,650 --> 00:03:32,579
we'll discuss what came programmers get

00:03:29,430 --> 00:03:37,590
beyond profit on dealing with technical

00:03:32,579 --> 00:03:39,930
depth ok John the programmer this is

00:03:37,590 --> 00:03:42,810
John Jones is a senior's of the

00:03:39,930 --> 00:03:45,540
developer hours if a ton of work to do

00:03:42,810 --> 00:03:47,450
Jones is a five-star program with years

00:03:45,540 --> 00:03:50,639
and years of expertise in Django

00:03:47,450 --> 00:03:52,950
suddenly a new project appears on John

00:03:50,639 --> 00:03:55,079
on John's tasks this new project needs

00:03:52,950 --> 00:03:57,120
to have a payment system social

00:03:55,079 --> 00:03:59,910
identification an integration if a third

00:03:57,120 --> 00:04:01,440
party shipping service the due date for

00:03:59,910 --> 00:04:05,370
that for everything like that it was

00:04:01,440 --> 00:04:07,470
like one-off but John Johnson's awesome

00:04:05,370 --> 00:04:09,870
level awesome employee which always

00:04:07,470 --> 00:04:13,500
deliver his tasks he went there took the

00:04:09,870 --> 00:04:15,599
project in delivery in time after that

00:04:13,500 --> 00:04:17,880
when the rest of the his team went there

00:04:15,599 --> 00:04:20,099
to review his code we found that the

00:04:17,880 --> 00:04:22,860
Jones code have some problems like

00:04:20,099 --> 00:04:25,380
inconsistent payment bugs sometimes the

00:04:22,860 --> 00:04:26,669
shipments were in beam processor and the

00:04:25,380 --> 00:04:28,889
authentication

00:04:26,669 --> 00:04:33,570
deserve certification were to nave

00:04:28,889 --> 00:04:36,240
unchecking the social accounts okay John

00:04:33,570 --> 00:04:38,430
knew that his could have some bugs

00:04:36,240 --> 00:04:40,560
when John was close to the due date on

00:04:38,430 --> 00:04:43,050
delivering that and other project

00:04:40,560 --> 00:04:46,530
appears on the John schedule so he

00:04:43,050 --> 00:04:48,120
hadn't time to fix those problems they

00:04:46,530 --> 00:04:50,940
had to deliver the project the way he

00:04:48,120 --> 00:04:52,560
was but John is positive and kept

00:04:50,940 --> 00:04:53,840
thinking okay in the future you come

00:04:52,560 --> 00:04:56,430
back and fix everything

00:04:53,840 --> 00:05:00,870
spoiler we all know that this won't

00:04:56,430 --> 00:05:03,690
happen right so after they have you did

00:05:00,870 --> 00:05:06,000
Tim found some problems on his code like

00:05:03,690 --> 00:05:07,979
the code responsible for the payments on

00:05:06,000 --> 00:05:10,860
his app were not flexible enough to

00:05:07,979 --> 00:05:12,360
accept different currencies if the

00:05:10,860 --> 00:05:16,380
shipping service is down for any reason

00:05:12,360 --> 00:05:18,479
the delivery could not happen also user

00:05:16,380 --> 00:05:20,190
with deactivate account like if I did

00:05:18,479 --> 00:05:23,849
that evade my account on Facebook and

00:05:20,190 --> 00:05:26,460
try to sign in on John's project it will

00:05:23,849 --> 00:05:29,190
work which doesn't make sense besides

00:05:26,460 --> 00:05:32,909
that all the code was not tested as it

00:05:29,190 --> 00:05:35,520
should be and that at some points that

00:05:32,909 --> 00:05:38,669
we call technical depth and why is that

00:05:35,520 --> 00:05:40,889
because as he chose a first-time

00:05:38,669 --> 00:05:43,560
solution because of the delivery date is

00:05:40,889 --> 00:05:46,229
too close the code had some problems in

00:05:43,560 --> 00:05:48,659
the T anything except that we are okay

00:05:46,229 --> 00:05:50,250
with some problems in the code because

00:05:48,659 --> 00:05:53,490
in the future if I think that we will do

00:05:50,250 --> 00:05:56,219
some changes in the future in the future

00:05:53,490 --> 00:05:58,590
if this business logic on the project

00:05:56,219 --> 00:06:01,020
changed the cost of changing John's code

00:05:58,590 --> 00:06:04,860
will be higher because people will need

00:06:01,020 --> 00:06:07,830
to fix new issues and everything that we

00:06:04,860 --> 00:06:10,409
accepted as a bad thing was a not so

00:06:07,830 --> 00:06:12,180
good thing so that's the moment when

00:06:10,409 --> 00:06:16,289
technical depth was introduced on John's

00:06:12,180 --> 00:06:17,789
code what happened in Pizza Tower is

00:06:16,289 --> 00:06:20,099
closer to what we understand the

00:06:17,789 --> 00:06:21,960
technical depth started with a few

00:06:20,099 --> 00:06:24,690
problems and suddenly those problems

00:06:21,960 --> 00:06:27,900
collided so quickly that past sometime

00:06:24,690 --> 00:06:31,620
it will fall down the same happens with

00:06:27,900 --> 00:06:33,060
our software's refers usually is more

00:06:31,620 --> 00:06:35,460
visible during the process because

00:06:33,060 --> 00:06:37,349
through the development process we are

00:06:35,460 --> 00:06:39,590
feeling that some features in bug fix

00:06:37,349 --> 00:06:44,490
are taking more time than it should take

00:06:39,590 --> 00:06:46,289
so we are used to think that having some

00:06:44,490 --> 00:06:48,599
level of technical depth from our

00:06:46,289 --> 00:06:49,940
software is a bad thing I mean usually

00:06:48,599 --> 00:06:51,890
it is

00:06:49,940 --> 00:06:56,390
but we can see it as a strategic move

00:06:51,890 --> 00:06:59,740
because if we can have delivered some

00:06:56,390 --> 00:07:02,600
have fast deliveries because of some

00:06:59,740 --> 00:07:06,020
technical depth that we allow it to have

00:07:02,600 --> 00:07:08,150
it's awesome for a product the major

00:07:06,020 --> 00:07:10,280
issue on that is when we forget that we

00:07:08,150 --> 00:07:12,740
did this in the past and then come back

00:07:10,280 --> 00:07:15,140
to fix it imagine that technical devs

00:07:12,740 --> 00:07:17,690
like the mac and cheese for yesterday if

00:07:15,140 --> 00:07:19,550
you have like one or two it's okay but

00:07:17,690 --> 00:07:23,540
after they did 12 is it may become a

00:07:19,550 --> 00:07:26,090
problem right so accepting that it's a

00:07:23,540 --> 00:07:27,740
trade off we can move fast and pay the

00:07:26,090 --> 00:07:29,660
consequences for that decision later

00:07:27,740 --> 00:07:32,120
it's a really cool thing to do for us I

00:07:29,660 --> 00:07:33,560
don't know how many of you already paid

00:07:32,120 --> 00:07:35,720
the consequence from that mac and cheese

00:07:33,560 --> 00:07:38,810
but remember that the cost increases

00:07:35,720 --> 00:07:41,000
over time so if you identify with any of

00:07:38,810 --> 00:07:43,250
those situations on your day to day

00:07:41,000 --> 00:07:45,620
tasks it really okay as soon as I we

00:07:43,250 --> 00:07:48,710
have our backlog some dedicated time the

00:07:45,620 --> 00:07:50,900
future to come back and fix and that's a

00:07:48,710 --> 00:07:54,500
really common scenario on delivering new

00:07:50,900 --> 00:07:57,050
things on a day to day sprint that you

00:07:54,500 --> 00:08:00,410
accept that situation okay on the future

00:07:57,050 --> 00:08:02,780
you come back if we look on the emerging

00:08:00,410 --> 00:08:04,990
foul a technical depth quadrant which I

00:08:02,780 --> 00:08:09,320
highly recommend you to check out later

00:08:04,990 --> 00:08:12,919
we can see easily where John is because

00:08:09,320 --> 00:08:15,200
he's on the top part of the quadrant

00:08:12,919 --> 00:08:17,300
being being reckless imprudent because

00:08:15,200 --> 00:08:20,210
he knew that didn't have that much time

00:08:17,300 --> 00:08:22,460
to implement a better solution

00:08:20,210 --> 00:08:24,860
but also addressed that in the future

00:08:22,460 --> 00:08:28,430
he'll come back and fix so he is kind of

00:08:24,860 --> 00:08:31,010
in the middle when we focus on the name

00:08:28,430 --> 00:08:33,050
that we are repeating same technical

00:08:31,010 --> 00:08:36,050
depth technical depth we are guided to

00:08:33,050 --> 00:08:37,460
think that it's a developer's issue for

00:08:36,050 --> 00:08:39,320
some reason because we are the

00:08:37,460 --> 00:08:41,800
programmers and we created in this

00:08:39,320 --> 00:08:44,620
technical winds adapt and we need to pay

00:08:41,800 --> 00:08:47,540
well the problem is that sometimes

00:08:44,620 --> 00:08:51,010
software is a huge of the entire

00:08:47,540 --> 00:08:54,770
structure of processes in some company

00:08:51,010 --> 00:08:58,450
also the entire Indian industry have

00:08:54,770 --> 00:09:02,360
changed this since war created a term in

00:08:58,450 --> 00:09:03,769
1992 so as engine scenario the problem

00:09:02,360 --> 00:09:06,199
of that not so good

00:09:03,769 --> 00:09:09,199
code that he wrote is more a management

00:09:06,199 --> 00:09:11,929
or a product team issue than his because

00:09:09,199 --> 00:09:13,579
we don't give them enough time to

00:09:11,929 --> 00:09:17,540
improve to create a better solution

00:09:13,579 --> 00:09:19,040
because we know that Joey is a good

00:09:17,540 --> 00:09:22,549
developer but he needed to be

00:09:19,040 --> 00:09:24,889
deliberated on delivering some prone we

00:09:22,549 --> 00:09:27,139
deliver it on didn't forget about some

00:09:24,889 --> 00:09:30,350
problems the order to deliver in the

00:09:27,139 --> 00:09:32,329
date that was scheduled to him and so

00:09:30,350 --> 00:09:33,829
sometimes the bottlenecks that are

00:09:32,329 --> 00:09:36,290
creating technical depth in your

00:09:33,829 --> 00:09:38,569
software doesn't came directly from the

00:09:36,290 --> 00:09:41,360
technical team it can be from other

00:09:38,569 --> 00:09:43,369
parts of the company like the management

00:09:41,360 --> 00:09:46,309
team may not be up to date and the

00:09:43,369 --> 00:09:48,559
development team speed velocity so they

00:09:46,309 --> 00:09:52,489
can schedule more things then your team

00:09:48,559 --> 00:09:54,619
has hence to do it also the product team

00:09:52,489 --> 00:09:57,049
might not have a have given a

00:09:54,619 --> 00:09:59,259
big-picture plan for the developers so

00:09:57,049 --> 00:10:03,559
we can't we are not able to anticipate

00:09:59,259 --> 00:10:07,129
things on architectural side and even

00:10:03,559 --> 00:10:09,290
the UI in UX themes may have been like

00:10:07,129 --> 00:10:12,649
too far on the development process from

00:10:09,290 --> 00:10:16,100
the devs so they can create infeasible

00:10:12,649 --> 00:10:19,819
experiencing experience on the design it

00:10:16,100 --> 00:10:28,040
might be creating more bar next to the

00:10:19,819 --> 00:10:29,389
development team to deliver like also we

00:10:28,040 --> 00:10:32,389
can forget that sometimes we need to

00:10:29,389 --> 00:10:34,490
blame ourselves for bad decisions

00:10:32,389 --> 00:10:35,749
because if you like that if you're

00:10:34,490 --> 00:10:37,999
choosing a new framework for a new

00:10:35,749 --> 00:10:42,589
project and you will just choosing the

00:10:37,999 --> 00:10:45,439
new hybrid framework that has in Anor

00:10:42,589 --> 00:10:47,929
also we didn't give attention the

00:10:45,439 --> 00:10:51,019
invitation for a framework that's dying

00:10:47,929 --> 00:10:53,829
and we still pick that we need to accept

00:10:51,019 --> 00:10:58,279
that was organs our consequence or

00:10:53,829 --> 00:11:01,100
accept that as our decisions or even if

00:10:58,279 --> 00:11:04,429
we know that our application is not well

00:11:01,100 --> 00:11:06,499
tested and we don't do anything to fix

00:11:04,429 --> 00:11:11,059
it it's also our problem you need to do

00:11:06,499 --> 00:11:13,069
with okay how can we do it properly with

00:11:11,059 --> 00:11:14,990
technical depth after they find out

00:11:13,069 --> 00:11:16,450
those problems we have in our

00:11:14,990 --> 00:11:18,460
applications we need to

00:11:16,450 --> 00:11:23,130
see what are the possible tools that can

00:11:18,460 --> 00:11:23,130
help us to fight to fix those problems

00:11:23,400 --> 00:11:29,140
imagine that if they stopped and working

00:11:26,980 --> 00:11:31,930
on a piece a tower and bring everything

00:11:29,140 --> 00:11:34,030
down to rebuild it the chance of the

00:11:31,930 --> 00:11:36,250
same mistakes and even new ones mistakes

00:11:34,030 --> 00:11:37,030
could appear on the new tower is really

00:11:36,250 --> 00:11:38,620
huge

00:11:37,030 --> 00:11:41,020
not even fingernail amount of money that

00:11:38,620 --> 00:11:44,260
was spent to bring everything down and

00:11:41,020 --> 00:11:47,050
rebuilt it also in the piece of tower if

00:11:44,260 --> 00:11:49,900
they just postpone problem by adding

00:11:47,050 --> 00:11:51,990
more people to try to hang the tower on

00:11:49,900 --> 00:11:55,870
the other side to prevent it to leaning

00:11:51,990 --> 00:11:58,750
it will be not to be sustainable and in

00:11:55,870 --> 00:12:00,880
fact if we relate this to software

00:11:58,750 --> 00:12:03,520
development is worse because if you add

00:12:00,880 --> 00:12:06,520
more people to work like ok we decided

00:12:03,520 --> 00:12:08,680
that the core team will work on fixing

00:12:06,520 --> 00:12:11,320
bug fix and we will bring a new team to

00:12:08,680 --> 00:12:13,330
work on technical depth that's the worse

00:12:11,320 --> 00:12:15,460
scenario because the people that are

00:12:13,330 --> 00:12:17,590
getting into we don't have the context

00:12:15,460 --> 00:12:20,250
of your software they don't know they

00:12:17,590 --> 00:12:24,040
stack we don't know how your team works

00:12:20,250 --> 00:12:26,770
so yard quarantine you need to explain

00:12:24,040 --> 00:12:28,060
them the context the everything like

00:12:26,770 --> 00:12:29,880
that so that's what the worst scenario

00:12:28,060 --> 00:12:32,800
don't do that please

00:12:29,880 --> 00:12:35,170
what happened on the PISA tower was like

00:12:32,800 --> 00:12:36,850
exactly like that the towers were

00:12:35,170 --> 00:12:39,940
leaning and then when they decide to

00:12:36,850 --> 00:12:42,220
stop it tourism and - it was fix it so

00:12:39,940 --> 00:12:44,290
if we did that to our software it can be

00:12:42,220 --> 00:12:47,290
a good thing but it can be a challenge

00:12:44,290 --> 00:12:50,230
to convince your managers to do a we

00:12:47,290 --> 00:12:52,060
will spend three months just cleaning up

00:12:50,230 --> 00:12:54,670
the house and things in technical depth

00:12:52,060 --> 00:12:56,680
instead of doing new features and bug

00:12:54,670 --> 00:12:59,310
fixes it can be really hard to convince

00:12:56,680 --> 00:13:02,280
but if you if you can do that it's also

00:12:59,310 --> 00:13:06,280
but we can emerge a new problem on that

00:13:02,280 --> 00:13:10,390
if we have these moments of stopping

00:13:06,280 --> 00:13:14,680
everything in cleaning everything it is

00:13:10,390 --> 00:13:17,590
not sustainable because imagine that if

00:13:14,680 --> 00:13:19,450
you are space like for most working and

00:13:17,590 --> 00:13:23,250
then you expect it will stop one month

00:13:19,450 --> 00:13:26,650
to fix to technical the apps and some

00:13:23,250 --> 00:13:29,580
architectural problems after four year

00:13:26,650 --> 00:13:31,140
for most you need to stop again

00:13:29,580 --> 00:13:33,450
so the best solution for that is to

00:13:31,140 --> 00:13:35,970
create a culture in your company of

00:13:33,450 --> 00:13:39,810
refactoring in order to avoid that stop

00:13:35,970 --> 00:13:43,260
in fixing and stopping and fixing okay

00:13:39,810 --> 00:13:46,890
if we just create a new board on our

00:13:43,260 --> 00:13:49,110
JIRA or before tau or any tasks to that

00:13:46,890 --> 00:13:52,140
your teen use if you just create a new

00:13:49,110 --> 00:13:54,029
board for technical data issues after

00:13:52,140 --> 00:13:56,339
some time it may get invisible for

00:13:54,029 --> 00:13:59,310
editing because imagine like if your

00:13:56,339 --> 00:14:01,589
day-to-day backlog is alright invisible

00:13:59,310 --> 00:14:04,050
you can see just like ten tasks on your

00:14:01,589 --> 00:14:09,110
backlog imagine one that's separate from

00:14:04,050 --> 00:14:13,140
the main one so it's not that good idea

00:14:09,110 --> 00:14:15,870
okay what can we do so however those are

00:14:13,140 --> 00:14:19,290
solution that more people do we can

00:14:15,870 --> 00:14:23,610
think on better solution so what options

00:14:19,290 --> 00:14:25,950
are this we have some basic everything

00:14:23,610 --> 00:14:27,839
we see we need to come up with few

00:14:25,950 --> 00:14:31,290
feasible solutions for dealing with

00:14:27,839 --> 00:14:35,550
technical depth the impact is a process

00:14:31,290 --> 00:14:38,610
of identify mark plane act and test on

00:14:35,550 --> 00:14:40,950
technical debt problems as it says the

00:14:38,610 --> 00:14:43,860
first ones all about find it so we need

00:14:40,950 --> 00:14:46,230
to look our code and ask for the Deaf

00:14:43,860 --> 00:14:48,839
that are more awareness on the code

00:14:46,230 --> 00:14:51,839
where we can find some technical debt

00:14:48,839 --> 00:14:54,240
points then the second one we need to

00:14:51,839 --> 00:14:56,100
make sure those candidates are visible

00:14:54,240 --> 00:14:58,709
for the team by creating texts on our

00:14:56,100 --> 00:15:01,620
board marketers technical debt issues

00:14:58,709 --> 00:15:04,770
for instance and we should should also

00:15:01,620 --> 00:15:07,020
set a priority on those tasks and if you

00:15:04,770 --> 00:15:10,040
are using JIRA for instance if Judah has

00:15:07,020 --> 00:15:12,930
a mechanism that over time it's

00:15:10,040 --> 00:15:14,490
increasing the priority of this tasks so

00:15:12,930 --> 00:15:16,140
it's really align it with technical debt

00:15:14,490 --> 00:15:17,880
because technical debt costs are

00:15:16,140 --> 00:15:23,970
increasing over time so we are working

00:15:17,880 --> 00:15:25,649
together okay and basing on that if we

00:15:23,970 --> 00:15:28,649
mark those tasks we need to stick to a

00:15:25,649 --> 00:15:31,740
plan and really stick to it in order to

00:15:28,649 --> 00:15:33,269
work in a healthy way to deal with

00:15:31,740 --> 00:15:35,850
technical debt means to delivering

00:15:33,269 --> 00:15:39,300
things which is our the hardest problem

00:15:35,850 --> 00:15:41,670
I think after that we should act on

00:15:39,300 --> 00:15:43,290
decreasing like fixing really the fixing

00:15:41,670 --> 00:15:44,940
this just those debts

00:15:43,290 --> 00:15:48,270
and the most important part is the last

00:15:44,940 --> 00:15:51,780
one because I as any factor in process

00:15:48,270 --> 00:15:54,330
we need to test that we didn't break any

00:15:51,780 --> 00:15:57,600
behavior for software I got that

00:15:54,330 --> 00:15:59,640
strategy for a book called refactoring

00:15:57,600 --> 00:16:02,850
for software designs mail managing

00:15:59,640 --> 00:16:05,640
technical depth it's really good in easy

00:16:02,850 --> 00:16:07,290
book okay

00:16:05,640 --> 00:16:09,450
if you don't know how many tasks you

00:16:07,290 --> 00:16:12,450
should put on the backlog of our team of

00:16:09,450 --> 00:16:14,640
your own company we should just use

00:16:12,450 --> 00:16:17,040
Pareto principle where just 20 percent

00:16:14,640 --> 00:16:19,740
of the things productive is assign it to

00:16:17,040 --> 00:16:22,530
those technical depth tasks and the rest

00:16:19,740 --> 00:16:24,810
can be used for like features bug or any

00:16:22,530 --> 00:16:30,810
other technical stuff that your

00:16:24,810 --> 00:16:32,970
developers team works and if your

00:16:30,810 --> 00:16:34,770
process have some big releases like we

00:16:32,970 --> 00:16:37,860
have two-week sprints then one Hill is

00:16:34,770 --> 00:16:39,750
you can do a post-mortem meeting after

00:16:37,860 --> 00:16:42,090
that just to discuss it can be a quickie

00:16:39,750 --> 00:16:45,300
one just discuss like technical depth

00:16:42,090 --> 00:16:47,640
things that we face it or introduce unit

00:16:45,300 --> 00:16:51,240
on the code during that sprint that's

00:16:47,640 --> 00:16:54,030
the that's nice because you can make the

00:16:51,240 --> 00:16:56,430
candidates for technical depth tasks

00:16:54,030 --> 00:17:00,120
earlier you make them visible earlier so

00:16:56,430 --> 00:17:03,660
we can we have more have less cost on

00:17:00,120 --> 00:17:05,850
those tasks and they're that those are

00:17:03,660 --> 00:17:07,140
three examples of possible solutions but

00:17:05,850 --> 00:17:09,360
I highly recommend you to be really

00:17:07,140 --> 00:17:12,449
critic about everything and see what

00:17:09,360 --> 00:17:15,089
best suits you because we need to fit

00:17:12,449 --> 00:17:20,760
that on your day-to-day schedule or

00:17:15,089 --> 00:17:23,760
culture of developers oh and let's dig

00:17:20,760 --> 00:17:26,120
deep on the economical view of course of

00:17:23,760 --> 00:17:30,870
working in dealing with a system with

00:17:26,120 --> 00:17:33,930
some live of technical depth so this is

00:17:30,870 --> 00:17:36,240
a shirt that I fell in love in from day

00:17:33,930 --> 00:17:39,300
one that I think this there is that this

00:17:36,240 --> 00:17:41,220
talk from GB rice burger on YouTube you

00:17:39,300 --> 00:17:43,530
can find this is the economic of

00:17:41,220 --> 00:17:46,010
software design it is amazing one and a

00:17:43,530 --> 00:17:48,930
half hour but you can totally see it and

00:17:46,010 --> 00:17:53,090
that talk he explains the cost of the

00:17:48,930 --> 00:17:56,340
next new feature on your software and

00:17:53,090 --> 00:17:57,240
how can we decrease the uncertainty of

00:17:56,340 --> 00:17:59,789
that

00:17:57,240 --> 00:18:03,419
because if I go to anyone here they hey

00:17:59,789 --> 00:18:06,419
how much your team takes to deliver a

00:18:03,419 --> 00:18:09,030
new feature we can say that you said two

00:18:06,419 --> 00:18:13,110
weeks I don't know

00:18:09,030 --> 00:18:17,270
and then this chart explain why that's

00:18:13,110 --> 00:18:21,780
so hard to to to be explain it to have a

00:18:17,270 --> 00:18:23,580
real number on that and this shot if you

00:18:21,780 --> 00:18:26,640
look on dit it has a comparison

00:18:23,580 --> 00:18:28,860
comparison of two lines where one of

00:18:26,640 --> 00:18:32,220
those is creating a software from the

00:18:28,860 --> 00:18:33,929
beginning with design and without as we

00:18:32,220 --> 00:18:36,559
can see the growth of the cost of

00:18:33,929 --> 00:18:38,940
software that were built without design

00:18:36,559 --> 00:18:43,679
without thinking about refactoring with

00:18:38,940 --> 00:18:48,600
practicing design in general it grows

00:18:43,679 --> 00:18:50,730
really quicker than the blue one even if

00:18:48,600 --> 00:18:53,360
the design first software architecture

00:18:50,730 --> 00:18:56,130
has a higher cost if we compare the

00:18:53,360 --> 00:18:58,409
beginning costs the blue one has a

00:18:56,130 --> 00:19:01,710
bigger cost in the beginning but after

00:18:58,409 --> 00:19:05,400
full time this amount is mitigated it

00:19:01,710 --> 00:19:08,400
really pays off so if you write our

00:19:05,400 --> 00:19:10,620
software without design you are betting

00:19:08,400 --> 00:19:13,049
that this - at line moment will never

00:19:10,620 --> 00:19:16,200
happen because when did when that moment

00:19:13,049 --> 00:19:18,659
happens the cost of implementing the

00:19:16,200 --> 00:19:21,470
next new feature will be higher than

00:19:18,659 --> 00:19:24,299
rewrite everything on your software so

00:19:21,470 --> 00:19:26,309
if you want to bet on that it's okay

00:19:24,299 --> 00:19:31,140
but you can think about design and

00:19:26,309 --> 00:19:33,230
prevent that okay poor quality software

00:19:31,140 --> 00:19:37,140
has become one of the most expensive

00:19:33,230 --> 00:19:41,220
topics in human history last year see I

00:19:37,140 --> 00:19:43,559
asked you did our report on us software

00:19:41,220 --> 00:19:47,010
costs which was calculated considering

00:19:43,559 --> 00:19:49,280
legacy code massive failure cost of

00:19:47,010 --> 00:19:51,720
trouble in canceled projects

00:19:49,280 --> 00:19:55,440
infrastructure so have a notion this

00:19:51,720 --> 00:19:59,909
amount is about two-thirds of the total

00:19:55,440 --> 00:20:04,110
health expensive in 2018 us that's the

00:19:59,909 --> 00:20:07,590
how much is the cost of doing bad

00:20:04,110 --> 00:20:10,800
software programmers is painting the

00:20:07,590 --> 00:20:14,730
averages about 3.8 hours a day

00:20:10,800 --> 00:20:17,490
debugging bad your local it's code or if

00:20:14,730 --> 00:20:21,420
the codes that hard to maintain or read

00:20:17,490 --> 00:20:23,790
so imagine all that money being used for

00:20:21,420 --> 00:20:25,830
likes better better wage social

00:20:23,790 --> 00:20:28,760
initiatives training and personal

00:20:25,830 --> 00:20:32,820
improvement we can use that money barrel

00:20:28,760 --> 00:20:36,600
this is word this is the guy that coined

00:20:32,820 --> 00:20:39,780
the term technical depth there's a short

00:20:36,600 --> 00:20:42,150
talk about four minutes of hints planing

00:20:39,780 --> 00:20:43,710
the technical depth concept and where it

00:20:42,150 --> 00:20:47,010
came from I really recommend you to her

00:20:43,710 --> 00:20:51,800
to look on that and he created that

00:20:47,010 --> 00:20:54,060
concept on 1992 the same year I was born

00:20:51,800 --> 00:20:55,500
using a financial metaphor to explain

00:20:54,060 --> 00:20:59,390
for non tech people

00:20:55,500 --> 00:21:03,000
the implied cost of additional work

00:20:59,390 --> 00:21:05,580
everything that we know today about good

00:21:03,000 --> 00:21:11,480
practice on software as I owe everything

00:21:05,580 --> 00:21:14,490
like that passed through Ward before I

00:21:11,480 --> 00:21:16,350
also word brought brought they quick

00:21:14,490 --> 00:21:18,950
concept like if you have weak padded

00:21:16,350 --> 00:21:21,920
today's is because Ward did it in

00:21:18,950 --> 00:21:27,150
nineteen ninety Algonquin it's something

00:21:21,920 --> 00:21:32,130
and also he's a activist an agile ensign

00:21:27,150 --> 00:21:35,010
patterns so if we explain his concept we

00:21:32,130 --> 00:21:38,280
can see something like that and the

00:21:35,010 --> 00:21:40,380
definition of the debt met for even if

00:21:38,280 --> 00:21:42,780
we have a great code with the best

00:21:40,380 --> 00:21:46,680
practice applied that doesn't mean that

00:21:42,780 --> 00:21:48,870
we have a low technical depth what he's

00:21:46,680 --> 00:21:52,230
saying is that technical that is not a

00:21:48,870 --> 00:21:54,900
technical thing in the if the code isn't

00:21:52,230 --> 00:21:57,630
a line if you do a cord with less the

00:21:54,900 --> 00:21:59,550
couple classes in sign part and is

00:21:57,630 --> 00:22:01,580
everything that doesn't mean that your

00:21:59,550 --> 00:22:05,490
code doesn't have technical depth

00:22:01,580 --> 00:22:07,410
because the main argument on his concept

00:22:05,490 --> 00:22:10,380
is that technical depth is about the

00:22:07,410 --> 00:22:12,300
domain language in your pure software if

00:22:10,380 --> 00:22:14,550
the code isn't aligned with the domain

00:22:12,300 --> 00:22:17,130
of your project we will always be on a

00:22:14,550 --> 00:22:19,230
technical depth because we you always

00:22:17,130 --> 00:22:24,690
continue to grow our software without

00:22:19,230 --> 00:22:26,999
thinking and worse than stop without not

00:22:24,690 --> 00:22:29,609
giving back knowledge that we gained

00:22:26,999 --> 00:22:31,169
through time I mean if you startin to

00:22:29,609 --> 00:22:33,629
work on our projects under your project

00:22:31,169 --> 00:22:35,970
today after two years you have a

00:22:33,629 --> 00:22:37,979
completely different knowledge about the

00:22:35,970 --> 00:22:39,899
domain if you don't break don't bring

00:22:37,979 --> 00:22:42,179
that domain that knowledge and domain

00:22:39,899 --> 00:22:47,340
back to the software you are creating

00:22:42,179 --> 00:22:49,529
technical depth also so what you have

00:22:47,340 --> 00:22:51,960
beyond profit besides like saving money

00:22:49,529 --> 00:22:54,090
and delivery of things fast there are

00:22:51,960 --> 00:22:56,820
several things that we can identify as

00:22:54,090 --> 00:22:58,950
point of proof of troubles on your life

00:22:56,820 --> 00:23:03,179
cause it by dealing with technical depth

00:22:58,950 --> 00:23:05,729
or day to day job atrophy of the assist

00:23:03,179 --> 00:23:08,039
of the team's technical ability it's a

00:23:05,729 --> 00:23:09,840
really important one because who he

00:23:08,039 --> 00:23:11,909
already had or still have some code

00:23:09,840 --> 00:23:17,249
running or deprecated framework or

00:23:11,909 --> 00:23:18,960
Python - like in imaginable and it's

00:23:17,249 --> 00:23:22,529
really a common scenario for us and

00:23:18,960 --> 00:23:23,789
that's hard to deal with because we need

00:23:22,529 --> 00:23:26,220
to accept the consequences of that

00:23:23,789 --> 00:23:28,590
deprecated software sometimes you need

00:23:26,220 --> 00:23:31,769
to copy copy and paste code in your own

00:23:28,590 --> 00:23:34,109
code base to avoid some bogey or

00:23:31,769 --> 00:23:37,879
something like that or even worse

00:23:34,109 --> 00:23:41,039
usually we fork the original project

00:23:37,879 --> 00:23:42,840
uploading in your github and start to

00:23:41,039 --> 00:23:45,149
install it from there in fixing from

00:23:42,840 --> 00:23:49,729
there so we have a lot of difficult

00:23:45,149 --> 00:23:49,729
scenarios to work on a deprecated code

00:23:50,269 --> 00:23:56,369
besides that we could face some

00:23:52,559 --> 00:23:59,450
compatibility issue with new tools like

00:23:56,369 --> 00:24:01,049
if you want to use hiroko or some same

00:23:59,450 --> 00:24:04,259
product as ourselves

00:24:01,049 --> 00:24:08,580
deployment - for a deprecated framework

00:24:04,259 --> 00:24:11,190
it probably won't be that integrated as

00:24:08,580 --> 00:24:14,580
django is we've awoken things like that

00:24:11,190 --> 00:24:17,359
imagine also how hard it can be for

00:24:14,580 --> 00:24:21,149
someone to be reallocated in the market

00:24:17,359 --> 00:24:23,309
like if we someone passed like five

00:24:21,149 --> 00:24:26,399
seven years of work in a deprecated

00:24:23,309 --> 00:24:28,710
software and then suddenly he sees that

00:24:26,399 --> 00:24:30,960
he is completely out of market and tried

00:24:28,710 --> 00:24:33,539
to become a jungle developer imagine

00:24:30,960 --> 00:24:36,210
it's how much concepts we have in jungle

00:24:33,539 --> 00:24:37,660
that that deprecated software just does

00:24:36,210 --> 00:24:41,830
it don't have it

00:24:37,660 --> 00:24:45,100
that can be a really hard thing to be

00:24:41,830 --> 00:24:47,420
also a lot of insight in depression

00:24:45,100 --> 00:24:50,570
technical that brings a lot of weight to

00:24:47,420 --> 00:24:52,730
our lives as developers because if you

00:24:50,570 --> 00:24:55,730
are consisting dealing with bad code a

00:24:52,730 --> 00:24:59,240
test that looks like okay that's that to

00:24:55,730 --> 00:25:01,370
to day tasks tasks when you start to dig

00:24:59,240 --> 00:25:05,330
in the code you see that like two weeks

00:25:01,370 --> 00:25:08,270
one month so let's bring in scientific

00:25:05,330 --> 00:25:12,080
as you don't know when this kind of

00:25:08,270 --> 00:25:14,740
tasks will appear or some bug or some

00:25:12,080 --> 00:25:17,480
weird comport behavior on the

00:25:14,740 --> 00:25:19,460
application so we start to get into

00:25:17,480 --> 00:25:22,940
because we don't know if something like

00:25:19,460 --> 00:25:26,120
that will come up over time and a

00:25:22,940 --> 00:25:27,920
healthy growth doesn't make sense for a

00:25:26,120 --> 00:25:32,200
company to grow like three hundred

00:25:27,920 --> 00:25:35,480
percent each year if our developer teeny

00:25:32,200 --> 00:25:38,180
doesn't scale and had the time in hands

00:25:35,480 --> 00:25:39,680
to work on that velocity it's really

00:25:38,180 --> 00:25:42,170
comes in Alfred setups to bloomer eyes

00:25:39,680 --> 00:25:45,050
excessive from working hours because

00:25:42,170 --> 00:25:47,360
there were some high peak of purchase in

00:25:45,050 --> 00:25:49,960
the application and then the dives needs

00:25:47,360 --> 00:25:53,120
to wake up like 3:00 in the morning on a

00:25:49,960 --> 00:25:56,660
Thursday just to he start this ever

00:25:53,120 --> 00:25:59,450
because the memory was like out of

00:25:56,660 --> 00:26:01,970
caught up in a real in a realistic in

00:25:59,450 --> 00:26:04,430
respectful world pragmatic world world

00:26:01,970 --> 00:26:06,860
the machines could take care like if you

00:26:04,430 --> 00:26:10,970
have a load balancing before that that

00:26:06,860 --> 00:26:14,300
could start in in turn off some servers

00:26:10,970 --> 00:26:15,560
so you don't need to beat that person or

00:26:14,300 --> 00:26:18,830
that thing because the machine will do

00:26:15,560 --> 00:26:20,600
that and as I just said earlier you are

00:26:18,830 --> 00:26:23,840
not going to be able to do cool things

00:26:20,600 --> 00:26:27,050
burn it out so take care

00:26:23,840 --> 00:26:29,330
and now the pizza tower is now

00:26:27,050 --> 00:26:30,860
sustainable this is one of the rare

00:26:29,330 --> 00:26:34,580
situation where a buddy became the

00:26:30,860 --> 00:26:37,100
feature because it will not fail anymore

00:26:34,580 --> 00:26:40,040
and it became a monument like worldwide

00:26:37,100 --> 00:26:42,500
famous and even though it's still

00:26:40,040 --> 00:26:45,830
leaning but Cellini on a control all the

00:26:42,500 --> 00:26:48,430
way but not like because of the everyone

00:26:45,830 --> 00:26:51,350
I try to push it is because very

00:26:48,430 --> 00:26:53,510
engineering a solution that we will hang

00:26:51,350 --> 00:26:56,240
that in the same way happen with John

00:26:53,510 --> 00:26:59,210
software if we apply out those feasible

00:26:56,240 --> 00:27:01,520
solutions we can have the same scenario

00:26:59,210 --> 00:27:05,270
on a sustainable software which is the

00:27:01,520 --> 00:27:07,340
best case and all those reference

00:27:05,270 --> 00:27:11,620
reference that I used to wrote this talk

00:27:07,340 --> 00:27:14,179
is only this github awesome list the

00:27:11,620 --> 00:27:17,360
technical depth concept they talk from

00:27:14,179 --> 00:27:19,970
eBay rice berg everything the book that

00:27:17,360 --> 00:27:23,419
I get the impact and also a lot of

00:27:19,970 --> 00:27:26,140
others reference and I really would like

00:27:23,419 --> 00:27:29,120
for you to contribute it with some

00:27:26,140 --> 00:27:32,860
architectural and technical depth links

00:27:29,120 --> 00:27:36,550
with videos talks books everything so

00:27:32,860 --> 00:27:40,430
that's it thank you so much

00:27:36,550 --> 00:27:53,809
[Applause]

00:27:40,430 --> 00:27:53,809

YouTube URL: https://www.youtube.com/watch?v=9VSk-RATgBY


