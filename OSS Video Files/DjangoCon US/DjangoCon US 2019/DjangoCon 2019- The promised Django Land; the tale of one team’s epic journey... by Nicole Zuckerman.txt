Title: DjangoCon 2019- The promised Django Land; the tale of one teamâ€™s epic journey... by Nicole Zuckerman
Publication date: 2019-10-25
Playlist: DjangoCon US 2019
Description: 
	DjangoCon 2019 - The promised Django Land; the tale of one teamâ€™s epic journey from Flask by Nicole Zuckerman

Many orgs change frameworks mid-stream to more or less success; in this talk, you'll get a real-life fairytale of switching from Flask to Django, why each was valuable, how they got team buy-in, what technical decisions made things easier/harder, and how they switched without stopping product work.

This talk was presented at: https://2019.djangocon.us/talks/the-promised-django-land-the-tale-of-one/

LINKS:
Follow Nicole Zuckerman ğŸ‘‡
On Twitter: https://twitter.com/zuckerpunch


Follow DjangCon US ğŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ğŸ‘‡
https://twitter.com/defnado
https://www.defna.org/

Intro music: "This Is How We Quirk It" by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.
Captions: 
	00:00:00,000 --> 00:00:12,679
[Music]

00:00:14,710 --> 00:00:24,800
greetings thank you for joining me today

00:00:18,290 --> 00:00:28,100
I'm Nicole yep that's me that one I'm

00:00:24,800 --> 00:00:30,920
gonna be telling you a story today this

00:00:28,100 --> 00:00:33,440
story takes place where I work a company

00:00:30,920 --> 00:00:35,780
that's called clover health we offer

00:00:33,440 --> 00:00:39,019
health insurance to Medicare eligible

00:00:35,780 --> 00:00:40,550
folks ie people who are 65 plus or who

00:00:39,019 --> 00:00:42,620
have disabilities that qualify them

00:00:40,550 --> 00:00:45,350
sooner trying to improve people's health

00:00:42,620 --> 00:00:48,920
outcomes and be kinda nice to interact

00:00:45,350 --> 00:00:52,010
with we'll start with chapter one

00:00:48,920 --> 00:00:54,379
origins this is our back story wherein

00:00:52,010 --> 00:00:57,379
we meet our cast of characters we'll

00:00:54,379 --> 00:00:59,870
then explore what we plan to do versus

00:00:57,379 --> 00:01:01,670
what actually happened we'll talk about

00:00:59,870 --> 00:01:03,470
some of the technical challenges and

00:01:01,670 --> 00:01:07,299
then do an assessment of our work

00:01:03,470 --> 00:01:07,299
success are you ready

00:01:09,280 --> 00:01:13,729
just so you know this isn't going to be

00:01:11,510 --> 00:01:15,680
a why Django is better than flask talk

00:01:13,729 --> 00:01:18,140
they're both useful tools so if you were

00:01:15,680 --> 00:01:21,979
hoping to do some flask bashing I won't

00:01:18,140 --> 00:01:24,100
blame you if you leave now five four

00:01:21,979 --> 00:01:27,320
three okay I'm going

00:01:24,100 --> 00:01:29,810
once upon a time in a land far far away

00:01:27,320 --> 00:01:32,719
called clover health the engineering

00:01:29,810 --> 00:01:36,530
team built an API in flask this was the

00:01:32,719 --> 00:01:37,820
right decision for them at the time they

00:01:36,530 --> 00:01:40,009
wanted the flexibility to build

00:01:37,820 --> 00:01:42,200
applications without an external set of

00:01:40,009 --> 00:01:43,820
opinions shaping the code and one of the

00:01:42,200 --> 00:01:45,289
code to be easy to trace and understand

00:01:43,820 --> 00:01:47,689
without requiring skills with a

00:01:45,289 --> 00:01:49,310
third-party framework and they wanted to

00:01:47,689 --> 00:01:52,159
use a set of tools consistent with their

00:01:49,310 --> 00:01:54,770
data pipelines and other systems but

00:01:52,159 --> 00:01:56,600
over time the team became very sad

00:01:54,770 --> 00:01:58,340
because there were too many ways of

00:01:56,600 --> 00:02:00,679
doing one thing with no established

00:01:58,340 --> 00:02:02,149
pattern for people to follow and because

00:02:00,679 --> 00:02:04,039
people ended up rolling their own stuff

00:02:02,149 --> 00:02:06,020
from scratch a lot of times they wrote

00:02:04,039 --> 00:02:08,149
boilerplate code day after day and any

00:02:06,020 --> 00:02:09,860
new engineer who joined the team also

00:02:08,149 --> 00:02:11,240
had to learn flask if they didn't

00:02:09,860 --> 00:02:14,000
already have experience using it in a

00:02:11,240 --> 00:02:15,319
production environment even worse they

00:02:14,000 --> 00:02:17,150
had to learn how to do things from the

00:02:15,319 --> 00:02:19,580
sequel alchemy documentation which is

00:02:17,150 --> 00:02:21,170
like notoriously evil and if there were

00:02:19,580 --> 00:02:22,220
going to be like a fan OHS in this

00:02:21,170 --> 00:02:23,800
presentation that would be sequel

00:02:22,220 --> 00:02:26,450
alchemy documentation

00:02:23,800 --> 00:02:28,100
it turned out that the API is the team

00:02:26,450 --> 00:02:29,600
ends at a building weren't so different

00:02:28,100 --> 00:02:31,580
from what Jango could handle after all

00:02:29,600 --> 00:02:33,680
so the engineers got together in small

00:02:31,580 --> 00:02:35,660
groups and talked about it and there was

00:02:33,680 --> 00:02:37,580
much discussion and much disagreement

00:02:35,660 --> 00:02:39,170
and then they talked about it some more

00:02:37,580 --> 00:02:44,270
does that sound like your engineering

00:02:39,170 --> 00:02:46,670
organization and then one day Paul who

00:02:44,270 --> 00:02:47,930
is starring as Nick Fury in this came to

00:02:46,670 --> 00:02:50,000
the team with a proposal for how we

00:02:47,930 --> 00:02:52,190
could transition the Jango and show them

00:02:50,000 --> 00:02:53,990
the path to Jango land he'd written a

00:02:52,190 --> 00:02:56,030
proof-of-concept for a library in Jango

00:02:53,990 --> 00:02:57,260
to make it easier thought through an

00:02:56,030 --> 00:02:59,330
initial design of how to accommodate

00:02:57,260 --> 00:03:01,730
trance flask while transitioning to

00:02:59,330 --> 00:03:03,920
Jango and looked into ways to adding

00:03:01,730 --> 00:03:05,360
schema support for Postgres he did all

00:03:03,920 --> 00:03:07,490
this but he couldn't make the decision

00:03:05,360 --> 00:03:10,880
alone the team needed to pursue it of

00:03:07,490 --> 00:03:14,030
their own accord and there was much

00:03:10,880 --> 00:03:15,410
discussion on the team again when moving

00:03:14,030 --> 00:03:17,450
to Jango actually encouraged a

00:03:15,410 --> 00:03:19,370
consistent pattern for building api's or

00:03:17,450 --> 00:03:20,900
would we have the same struggles with

00:03:19,370 --> 00:03:22,610
the engineering time saved getting up to

00:03:20,900 --> 00:03:24,470
speed or writing endpoints using the

00:03:22,610 --> 00:03:25,580
rest framework outweigh the time

00:03:24,470 --> 00:03:28,130
investment it would take to actually

00:03:25,580 --> 00:03:29,510
port the existing code to Jango would we

00:03:28,130 --> 00:03:31,850
have the support and the time to do it

00:03:29,510 --> 00:03:33,760
or would be being interrupted midway

00:03:31,850 --> 00:03:37,330
through by some product direction shift

00:03:33,760 --> 00:03:42,110
we decided as a team to go for it on

00:03:37,330 --> 00:03:46,430
apparantly March 31st in 2017 this is

00:03:42,110 --> 00:03:49,280
the slide deck from that day and to be

00:03:46,430 --> 00:03:51,170
honest I love Jango I wasn't at first

00:03:49,280 --> 00:03:52,850
fully in support of this plan I was like

00:03:51,170 --> 00:03:54,920
we have a ton of patterns right now

00:03:52,850 --> 00:03:56,810
we're just gonna have a ton of patterns

00:03:54,920 --> 00:03:59,810
then like what's this actually going to

00:03:56,810 --> 00:04:03,140
save us but we agreed on a thing so we

00:03:59,810 --> 00:04:07,459
were gonna do it James Bennet starring

00:04:03,140 --> 00:04:09,980
as vision in this and myself as Scarlett

00:04:07,459 --> 00:04:12,560
which not so Scarlett but yeah go with

00:04:09,980 --> 00:04:15,350
it use our hack week time to create a

00:04:12,560 --> 00:04:18,530
Jenga API repo in April of 2017

00:04:15,350 --> 00:04:19,940
apparently and started creating an MVP

00:04:18,530 --> 00:04:22,040
Django project that would serve new

00:04:19,940 --> 00:04:24,410
features in Django and legacy code from

00:04:22,040 --> 00:04:26,810
flask we were able to route requests

00:04:24,410 --> 00:04:28,370
through Django to flask and set up a

00:04:26,810 --> 00:04:30,110
couple of rudimentary endpoints in

00:04:28,370 --> 00:04:33,349
Django to serve as an example of what

00:04:30,110 --> 00:04:34,940
pattern to follow in the future but like

00:04:33,349 --> 00:04:37,279
any port there was more work than could

00:04:34,940 --> 00:04:39,139
be completed in two and a half days

00:04:37,279 --> 00:04:41,269
however would we complete a task we set

00:04:39,139 --> 00:04:45,379
for ourselves this is where you insert a

00:04:41,269 --> 00:04:47,479
commercial break our true our two

00:04:45,379 --> 00:04:49,369
intrepid heroes were rescued from the

00:04:47,479 --> 00:04:51,439
monumental effort by their many friends

00:04:49,369 --> 00:04:53,449
on the web applications team at Clover

00:04:51,439 --> 00:04:55,609
health who created this django

00:04:53,449 --> 00:04:57,889
stewardship group to push forward the

00:04:55,609 --> 00:04:59,689
great work they met every week from

00:04:57,889 --> 00:05:01,329
April to September breaking down

00:04:59,689 --> 00:05:03,289
problems discussing solutions

00:05:01,329 --> 00:05:05,389
volunteering for tasks that would make

00:05:03,289 --> 00:05:08,089
this project a success they did these

00:05:05,389 --> 00:05:10,179
tasks in their non project time while

00:05:08,089 --> 00:05:12,439
still in their normal workday and

00:05:10,179 --> 00:05:14,479
collaboratively in small breakout groups

00:05:12,439 --> 00:05:16,549
from the main stewardship group which

00:05:14,479 --> 00:05:18,889
was just like all engineers who were

00:05:16,549 --> 00:05:20,389
interested in api's but this wasn't

00:05:18,889 --> 00:05:22,519
enough and we were afraid we'd never get

00:05:20,389 --> 00:05:24,110
over the initial development mountain to

00:05:22,519 --> 00:05:28,069
the land beyond where we'd be able to

00:05:24,110 --> 00:05:30,409
create new django halves in peace to

00:05:28,069 --> 00:05:32,089
engineers in particular santiago who's

00:05:30,409 --> 00:05:34,610
playing hawkeye in this and rohan in the

00:05:32,089 --> 00:05:36,859
role of black widow were staffed on

00:05:34,610 --> 00:05:38,569
support engineering / this thing called

00:05:36,859 --> 00:05:40,249
reliability support i'm not sure if you

00:05:38,569 --> 00:05:42,769
all have this at your organization's but

00:05:40,249 --> 00:05:44,569
this was a project that engineers

00:05:42,769 --> 00:05:46,610
rotated on to for a period of time where

00:05:44,569 --> 00:05:49,309
they were responsible for triaging bugs

00:05:46,610 --> 00:05:51,860
handling outages upgrading packages etc

00:05:49,309 --> 00:05:53,589
so on their stint on support engineering

00:05:51,860 --> 00:05:55,339
they decided to focus a two-week sprint

00:05:53,589 --> 00:05:57,559
completely on moving the Django project

00:05:55,339 --> 00:06:00,469
closer to its final goal which was

00:05:57,559 --> 00:06:02,360
having Django in production serving

00:06:00,469 --> 00:06:04,329
endpoints itself and passing along any

00:06:02,360 --> 00:06:07,939
request it couldn't handle two flasks

00:06:04,329 --> 00:06:09,860
they got buy-in from the managers of the

00:06:07,939 --> 00:06:13,039
team and set out tackling one hurdle

00:06:09,860 --> 00:06:14,539
after another I could go into all the

00:06:13,039 --> 00:06:16,099
struggles that they faced during those

00:06:14,539 --> 00:06:19,339
two weeks but that would be like its own

00:06:16,099 --> 00:06:20,779
talk in itself so suffice to say they

00:06:19,339 --> 00:06:22,219
faced many struggles and setbacks but

00:06:20,779 --> 00:06:24,799
they pushed the work forward getting us

00:06:22,219 --> 00:06:27,729
like 90% of the way there and when the

00:06:24,799 --> 00:06:31,339
sprint was done they sat down and went

00:06:27,729 --> 00:06:32,809
and the stewardship group picked up the

00:06:31,339 --> 00:06:36,559
mantle again and got the project the

00:06:32,809 --> 00:06:37,699
final distance to production so if that

00:06:36,559 --> 00:06:42,110
was a lot of talking with just some

00:06:37,699 --> 00:06:44,389
random Avengers photos for you here's

00:06:42,110 --> 00:06:47,899
the TLDR we got the whole team

00:06:44,389 --> 00:06:50,280
discussing and got some alignment we

00:06:47,899 --> 00:06:52,020
used hack week to get the ball rolling

00:06:50,280 --> 00:06:54,420
a stewardship group to break the project

00:06:52,020 --> 00:06:55,410
down and to bite sized pieces and take

00:06:54,420 --> 00:06:57,540
some of those off

00:06:55,410 --> 00:06:59,130
we got like 90% of the way there with a

00:06:57,540 --> 00:07:00,000
sprint by two engineers much like it's

00:06:59,130 --> 00:07:02,520
not so bad

00:07:00,000 --> 00:07:03,810
and then the stewardship group got the

00:07:02,520 --> 00:07:04,980
rest of those like odds and ends that

00:07:03,810 --> 00:07:10,650
we're preventing us from getting to

00:07:04,980 --> 00:07:14,130
production cool backstory good Chapter

00:07:10,650 --> 00:07:16,830
two the Royal plan and the reality or

00:07:14,130 --> 00:07:21,450
what we intended first is what we

00:07:16,830 --> 00:07:23,820
actually did the plan was to port over

00:07:21,450 --> 00:07:26,400
time we would find and share good

00:07:23,820 --> 00:07:28,890
patterns for incremental porting any

00:07:26,400 --> 00:07:32,220
greenhouse any greenfield projects in

00:07:28,890 --> 00:07:34,530
django whenever possible small updates

00:07:32,220 --> 00:07:37,050
to the flask api could stay in flask but

00:07:34,530 --> 00:07:39,690
major refactor could be porting to

00:07:37,050 --> 00:07:42,390
django if you touch the idea was that if

00:07:39,690 --> 00:07:44,040
you touch the legacy flask app port it

00:07:42,390 --> 00:07:45,480
if at all possible and make sure to

00:07:44,040 --> 00:07:48,120
include that in the project scope of

00:07:45,480 --> 00:07:49,320
work we wanted to make django flexible

00:07:48,120 --> 00:07:51,030
enough to handle the way that flask

00:07:49,320 --> 00:07:53,460
works so that we're only really

00:07:51,030 --> 00:07:55,380
developing in django and let flask

00:07:53,460 --> 00:07:58,950
remain as it is and not sink further

00:07:55,380 --> 00:08:03,030
effort into developing it anymore the

00:07:58,950 --> 00:08:05,850
reality poured over time we didn't

00:08:03,030 --> 00:08:07,950
actually end up like finding good

00:08:05,850 --> 00:08:11,040
patterns and getting a system for

00:08:07,950 --> 00:08:14,060
sharing them mostly we settled on let's

00:08:11,040 --> 00:08:16,350
make a decision and stick with it which

00:08:14,060 --> 00:08:18,870
not quite the lofty goal we were going

00:08:16,350 --> 00:08:21,720
for but like it's effective and

00:08:18,870 --> 00:08:24,090
practical we do actually do what any

00:08:21,720 --> 00:08:27,810
greenfield projects in django for the

00:08:24,090 --> 00:08:30,450
most part small ish updates to flask

00:08:27,810 --> 00:08:33,960
stay in flask although the definition of

00:08:30,450 --> 00:08:37,229
small is somewhat malleable and reef

00:08:33,960 --> 00:08:40,260
actors large reef actors we do port to

00:08:37,229 --> 00:08:41,729
django we did in fact make django

00:08:40,260 --> 00:08:44,030
flexible to handle the way the flask

00:08:41,729 --> 00:08:47,330
works rather than the other way around

00:08:44,030 --> 00:08:50,610
but we still had to make updates in

00:08:47,330 --> 00:08:53,900
flask to some libraries that affected

00:08:50,610 --> 00:08:53,900
projects that we couldn't point yet

00:08:54,120 --> 00:08:58,819
the plan request routing how will Jango

00:08:57,540 --> 00:09:01,230
and flask talk to each other

00:08:58,819 --> 00:09:02,970
initially we'd consider having Jango

00:09:01,230 --> 00:09:04,889
import our flask application and call

00:09:02,970 --> 00:09:07,050
the views directly sharing the same you

00:09:04,889 --> 00:09:08,579
whiskey process as we thought it through

00:09:07,050 --> 00:09:10,079
though it would be kind of tricky to get

00:09:08,579 --> 00:09:12,509
the sequel alchemy database sessions

00:09:10,079 --> 00:09:14,579
playing nicely with the Jango sessions

00:09:12,509 --> 00:09:16,350
for things like auto about automatic

00:09:14,579 --> 00:09:18,600
roll backs in the event of a failure of

00:09:16,350 --> 00:09:20,370
some kind we wanted to retain the

00:09:18,600 --> 00:09:22,110
atomicity of our transaction regardless

00:09:20,370 --> 00:09:23,639
of whether everything happened in Jango

00:09:22,110 --> 00:09:26,300
everything in flask or some combination

00:09:23,639 --> 00:09:26,300
of the two

00:09:27,629 --> 00:09:32,910
latency was one of the things that we

00:09:30,749 --> 00:09:34,920
were kind of concerned about but in the

00:09:32,910 --> 00:09:36,360
end it turned out that it kind of didn't

00:09:34,920 --> 00:09:39,870
matter which way we did it the latency

00:09:36,360 --> 00:09:44,220
was like low enough for us to just like

00:09:39,870 --> 00:09:49,279
go with whatever was most convenient so

00:09:44,220 --> 00:09:51,600
Jango calling flask directly maybe not

00:09:49,279 --> 00:09:53,670
ultimately what we ended up doing was

00:09:51,600 --> 00:09:55,800
standing both Jango and flask up

00:09:53,670 --> 00:09:58,559
independently but having Jango send

00:09:55,800 --> 00:10:02,069
requests to flask to handle if Jango

00:09:58,559 --> 00:10:04,439
doesn't have the a per endpoint yet over

00:10:02,069 --> 00:10:06,540
the network so and flask would send a

00:10:04,439 --> 00:10:10,679
response back to django django would

00:10:06,540 --> 00:10:14,910
serve it up to the front end so we ended

00:10:10,679 --> 00:10:16,050
up doing this over the network and so it

00:10:14,910 --> 00:10:18,749
kind of looked like this we have this

00:10:16,050 --> 00:10:21,689
front-end sends requests to the django

00:10:18,749 --> 00:10:25,199
api django API handles it if it can if

00:10:21,689 --> 00:10:28,189
not goes to flask back to django back to

00:10:25,199 --> 00:10:28,189
the front end in the response

00:10:31,290 --> 00:10:36,430
and the request to flasks were only in

00:10:34,990 --> 00:10:42,430
the case that jangle Django would

00:10:36,430 --> 00:10:44,680
otherwise be raising a for Oh for my

00:10:42,430 --> 00:10:46,600
grand vision was uni-directional flow

00:10:44,680 --> 00:10:48,430
this was a sanity measure I felt was

00:10:46,600 --> 00:10:49,870
really important to make it easier for

00:10:48,430 --> 00:10:52,030
us all to understand the relationship

00:10:49,870 --> 00:10:53,860
between Django and flask Django might

00:10:52,030 --> 00:10:56,680
ask for data from flask when it needs it

00:10:53,860 --> 00:10:59,740
but I didn't ever want flask a call into

00:10:56,680 --> 00:11:03,760
Django to get info that way to me

00:10:59,740 --> 00:11:05,560
like madness and just constantly calling

00:11:03,760 --> 00:11:08,460
each other in this infinite recursion

00:11:05,560 --> 00:11:11,710
that sounded terrible

00:11:08,460 --> 00:11:13,300
so rather than having Django asked for

00:11:11,710 --> 00:11:15,930
flask and flask asked for Django for

00:11:13,300 --> 00:11:19,000
info which we imagined would get messy I

00:11:15,930 --> 00:11:22,120
kind of railroaded this through our team

00:11:19,000 --> 00:11:25,210
and was like Django has flasks for info

00:11:22,120 --> 00:11:27,220
flasks must remain isolated and not ask

00:11:25,210 --> 00:11:29,620
anything of Django flasks tried to only

00:11:27,220 --> 00:11:31,030
serve information to Django that means

00:11:29,620 --> 00:11:33,520
for some tools that were used by both

00:11:31,030 --> 00:11:35,890
flask and Django we ported the tool but

00:11:33,520 --> 00:11:36,850
still had to maintain it medium term in

00:11:35,890 --> 00:11:40,510
flask as well

00:11:36,850 --> 00:11:42,190
I felt like duplicated code was easier

00:11:40,510 --> 00:11:46,540
to reason about than have flask and

00:11:42,190 --> 00:11:49,420
Django interdependent what do you know

00:11:46,540 --> 00:11:51,220
we actually stuck to something for the

00:11:49,420 --> 00:11:52,510
most part it was something of a struggle

00:11:51,220 --> 00:11:55,240
when tools are written in Django and

00:11:52,510 --> 00:11:56,680
someone wanted to use it in flask but we

00:11:55,240 --> 00:11:58,900
stayed strong on this one with one

00:11:56,680 --> 00:12:00,760
exception when I was doing my test run

00:11:58,900 --> 00:12:03,820
of this talk for folks at Clover to get

00:12:00,760 --> 00:12:05,920
feedback one of my co-workers did a well

00:12:03,820 --> 00:12:08,140
actually there is one place in Flast

00:12:05,920 --> 00:12:09,670
that calls Django but it's only one and

00:12:08,140 --> 00:12:12,220
that's pretty good over like two and a

00:12:09,670 --> 00:12:13,780
half years he felt it really important

00:12:12,220 --> 00:12:15,880
for me to caveat this thing like we only

00:12:13,780 --> 00:12:17,440
did this because those that is like

00:12:15,880 --> 00:12:19,330
slated to be pulled out on its own in

00:12:17,440 --> 00:12:21,310
the near future they work closely with

00:12:19,330 --> 00:12:23,200
like the authors of those services to

00:12:21,310 --> 00:12:24,970
ensure there was no circular dependency

00:12:23,200 --> 00:12:26,560
and like didn't make the decision

00:12:24,970 --> 00:12:30,340
lightly he must have liked seeing the

00:12:26,560 --> 00:12:31,630
disappointment on my face so in general

00:12:30,340 --> 00:12:32,800
this doesn't mean that we still have

00:12:31,630 --> 00:12:34,510
tools that exist in both locations

00:12:32,800 --> 00:12:36,930
though and we have to make sure that we

00:12:34,510 --> 00:12:40,090
have like feature parity between them

00:12:36,930 --> 00:12:42,340
the plan was to use the same database so

00:12:40,090 --> 00:12:44,110
there'd be no duplicated data we still

00:12:42,340 --> 00:12:45,400
have one complete source of truth and

00:12:44,110 --> 00:12:50,350
there was less has to end up

00:12:45,400 --> 00:12:52,720
maintain in reality we did end up doing

00:12:50,350 --> 00:12:54,490
that we have no duplicate data but we

00:12:52,720 --> 00:12:57,160
have to keep structure consistent across

00:12:54,490 --> 00:12:58,870
Jango and flask models we have our one

00:12:57,160 --> 00:13:00,750
source of truth but we have a multitude

00:12:58,870 --> 00:13:03,820
of ways to write to a table and

00:13:00,750 --> 00:13:06,160
potentially lakhs we have fewer of

00:13:03,820 --> 00:13:10,030
databases to maintain but it is a hell

00:13:06,160 --> 00:13:12,010
of a thing to manage it some of the

00:13:10,030 --> 00:13:14,610
challenges were as I mentioned keeping

00:13:12,010 --> 00:13:17,860
consistent models in both applications

00:13:14,610 --> 00:13:20,710
making Jango schema aware that was a

00:13:17,860 --> 00:13:23,020
thing that we knew that we would have to

00:13:20,710 --> 00:13:26,920
do but didn't realize it was going to be

00:13:23,020 --> 00:13:29,770
such a pain he's our databases use

00:13:26,920 --> 00:13:34,830
schemas like this stuff comes from the

00:13:29,770 --> 00:13:37,500
public dot table or like this stuff is

00:13:34,830 --> 00:13:42,010
comes from data from our internal apps

00:13:37,500 --> 00:13:45,120
table and so now we needed Jango to

00:13:42,010 --> 00:13:45,120
support that as well

00:13:45,370 --> 00:13:53,290
fake migrations ended up being a huge

00:13:48,190 --> 00:13:55,420
pain we and we had to like write pretty

00:13:53,290 --> 00:13:57,820
extensive documentation to explain it so

00:13:55,420 --> 00:13:59,800
that other engineers who were not us

00:13:57,820 --> 00:14:03,460
would like understand it when it came

00:13:59,800 --> 00:14:06,940
time to write a migration so the first

00:14:03,460 --> 00:14:11,340
time we migrated the first time we wrote

00:14:06,940 --> 00:14:16,480
a migration for a table in Django we

00:14:11,340 --> 00:14:19,030
read it with like - fake like Manish up

00:14:16,480 --> 00:14:22,720
high safe migrate or like managed up

00:14:19,030 --> 00:14:24,580
high migrate - fake to say like pretend

00:14:22,720 --> 00:14:25,840
like you actually ran this thing but the

00:14:24,580 --> 00:14:27,580
tables actually already in the structure

00:14:25,840 --> 00:14:31,030
so don't actually worry about it and

00:14:27,580 --> 00:14:32,680
then after that all migrations had to be

00:14:31,030 --> 00:14:36,840
handled in Django so there was no

00:14:32,680 --> 00:14:36,840
ability to like manage back and forth

00:14:39,150 --> 00:14:43,900
another problem is this is kind of what

00:14:41,590 --> 00:14:45,310
not only our data well mostly what our

00:14:43,900 --> 00:14:48,120
database said it but look like but also

00:14:45,310 --> 00:14:52,210
just our dev environments in general

00:14:48,120 --> 00:14:55,150
this is what it really did we would run

00:14:52,210 --> 00:14:56,770
flask migrations and then we would run

00:14:55,150 --> 00:14:58,370
Django migrations and then we switch

00:14:56,770 --> 00:15:00,770
back into flask and run the

00:14:58,370 --> 00:15:02,570
and then we switch back into Django to

00:15:00,770 --> 00:15:05,360
run those fixtures for things that were

00:15:02,570 --> 00:15:07,600
managed in Django and then we would

00:15:05,360 --> 00:15:10,700
create fake data and then you were done

00:15:07,600 --> 00:15:13,190
but that only got more complicated over

00:15:10,700 --> 00:15:18,140
time so here's a glimpse into our make

00:15:13,190 --> 00:15:20,420
file we're in online 296 you see refresh

00:15:18,140 --> 00:15:22,430
DB to get our local dev database set up

00:15:20,420 --> 00:15:24,890
and containing fake data we run

00:15:22,430 --> 00:15:26,839
migrations on the flask app and then

00:15:24,890 --> 00:15:29,540
fixtures on flask app and then switch to

00:15:26,839 --> 00:15:32,420
Django to run migrations on Django

00:15:29,540 --> 00:15:33,950
online 297 and then run fixtures in

00:15:32,420 --> 00:15:35,510
Django and then back to flask where we

00:15:33,950 --> 00:15:37,400
create random data and then switch back

00:15:35,510 --> 00:15:40,339
to Django again to make more data and

00:15:37,400 --> 00:15:44,029
then stripe data and then add local user

00:15:40,339 --> 00:15:46,070
stuff and so it's okay if everything

00:15:44,029 --> 00:15:49,100
works right but so many things could go

00:15:46,070 --> 00:15:50,839
wrong it's not really desirable plus it

00:15:49,100 --> 00:15:54,589
requires leaving notes in the code like

00:15:50,839 --> 00:15:58,160
this to note that like you can't use DB

00:15:54,589 --> 00:15:59,750
in it or create DB commands when you're

00:15:58,160 --> 00:16:03,260
doing your local dev setup that that is

00:15:59,750 --> 00:16:04,160
like specifically for circle CI because

00:16:03,260 --> 00:16:05,930
you could totally end up in a state

00:16:04,160 --> 00:16:08,270
where you're like oh create DB that

00:16:05,930 --> 00:16:10,550
looks like what I need to do and run

00:16:08,270 --> 00:16:12,050
that locally and be like why the heck is

00:16:10,550 --> 00:16:14,800
this not working I have no idea why I

00:16:12,050 --> 00:16:14,800
don't have fake data

00:16:15,700 --> 00:16:20,779
another part of the plan was just to

00:16:17,930 --> 00:16:23,600
have Django do authentication of the

00:16:20,779 --> 00:16:27,320
user and then construct and pass a flask

00:16:23,600 --> 00:16:29,690
user object to the flask process and use

00:16:27,320 --> 00:16:32,330
the same user table defining permissions

00:16:29,690 --> 00:16:35,870
and stuff like that and this is great

00:16:32,330 --> 00:16:37,700
because like Django has like great

00:16:35,870 --> 00:16:39,490
authentication it was going to be very

00:16:37,700 --> 00:16:44,870
easy to just do out-of-the-box

00:16:39,490 --> 00:16:47,330
relatively little work in reality flask

00:16:44,870 --> 00:16:50,390
needed the user in order to do

00:16:47,330 --> 00:16:52,760
authorization checks and we needed

00:16:50,390 --> 00:16:55,400
consistent occation across Django a

00:16:52,760 --> 00:16:56,690
flask and other internal tools and we

00:16:55,400 --> 00:16:59,060
didn't want to write to a shared user

00:16:56,690 --> 00:17:02,420
session table from both Django and flask

00:16:59,060 --> 00:17:03,589
so we ended up using JSON web tokens it

00:17:02,420 --> 00:17:06,439
was supposed to be an intermediate

00:17:03,589 --> 00:17:08,929
measure that was like going to be made

00:17:06,439 --> 00:17:11,569
more robust as like a follow-on project

00:17:08,929 --> 00:17:12,079
but wall that doesn't always happen

00:17:11,569 --> 00:17:13,100
right

00:17:12,079 --> 00:17:14,329
I definitely didn't get the love and

00:17:13,100 --> 00:17:18,289
attention right away I thought it should

00:17:14,329 --> 00:17:22,100
have so Jenko and flasks have different

00:17:18,289 --> 00:17:24,789
session tables and so we moved the

00:17:22,100 --> 00:17:27,289
session info into the JSON web token

00:17:24,789 --> 00:17:30,289
telling Jenko to use our existing user

00:17:27,289 --> 00:17:32,210
table which we had to modify in flask to

00:17:30,289 --> 00:17:38,169
meet Django's needs and now you see

00:17:32,210 --> 00:17:41,269
where the migration stuff was like so

00:17:38,169 --> 00:17:43,850
those were some that was like our grand

00:17:41,269 --> 00:17:46,519
vision and then the kind of chaos of

00:17:43,850 --> 00:17:47,749
what we actually did fortunately we had

00:17:46,519 --> 00:17:50,480
some support for making all this stuff

00:17:47,749 --> 00:17:52,909
happen we had a voluntary task force

00:17:50,480 --> 00:17:54,950
that stewardship group for the most part

00:17:52,909 --> 00:17:56,989
that met weekly where our work was done

00:17:54,950 --> 00:17:58,789
as part of your normal work day not like

00:17:56,989 --> 00:18:01,639
hero hours at midnight because I am like

00:17:58,789 --> 00:18:03,769
allergic to those we had engineering

00:18:01,639 --> 00:18:06,320
support sorry engineering managers

00:18:03,769 --> 00:18:08,690
supporting it where like you could say

00:18:06,320 --> 00:18:12,499
in your standup I'm spending half a day

00:18:08,690 --> 00:18:14,269
today porting xx thing to Django API and

00:18:12,499 --> 00:18:16,309
acknowledging with them that if they

00:18:14,269 --> 00:18:17,690
chose to say please don't do that we

00:18:16,309 --> 00:18:19,789
need you to work on this project thing

00:18:17,690 --> 00:18:21,109
that like the work of porting was

00:18:19,789 --> 00:18:22,730
literally not going to happen and we'd

00:18:21,109 --> 00:18:27,649
be stuck straddling these two things for

00:18:22,730 --> 00:18:31,489
a very long time so we had support but

00:18:27,649 --> 00:18:37,330
how do we encourage adoption one of the

00:18:31,489 --> 00:18:39,889
first things we did was document how to

00:18:37,330 --> 00:18:41,809
how to use Django rest framework the way

00:18:39,889 --> 00:18:43,609
that we plan to use it in our

00:18:41,809 --> 00:18:45,739
organization because there's tons of

00:18:43,609 --> 00:18:47,299
tutorials and how to's out there for how

00:18:45,739 --> 00:18:50,419
to use Django how to use Django rest

00:18:47,299 --> 00:18:52,489
framework but there's like a huge gap

00:18:50,419 --> 00:18:57,200
between I'm gonna write my little poles

00:18:52,489 --> 00:18:59,830
app and this is my real life production

00:18:57,200 --> 00:19:04,519
code how how do I stitch these together

00:18:59,830 --> 00:19:07,730
we also had working sessions to hammer

00:19:04,519 --> 00:19:08,659
out any like any problems that came up

00:19:07,730 --> 00:19:10,759
where you could like work with other

00:19:08,659 --> 00:19:12,649
people's who do it and not just like

00:19:10,759 --> 00:19:15,739
share bear the burden by yourself

00:19:12,649 --> 00:19:17,359
we also this is kind of coincidental we

00:19:15,739 --> 00:19:19,519
got as many people involved in the port

00:19:17,359 --> 00:19:20,359
as possible so we ended up maximizing

00:19:19,519 --> 00:19:22,249
the number of people who were

00:19:20,359 --> 00:19:24,590
comfortable with the new world very

00:19:22,249 --> 00:19:25,880
early on so there weren't that many late

00:19:24,590 --> 00:19:28,789
adopters who were like

00:19:25,880 --> 00:19:30,289
I don't know how this works we had a

00:19:28,789 --> 00:19:31,730
slack channel full of knowledgeable

00:19:30,289 --> 00:19:32,600
people who were happy to help our clear

00:19:31,730 --> 00:19:34,160
road blocks

00:19:32,600 --> 00:19:35,360
there was a github group to review your

00:19:34,160 --> 00:19:37,039
code once it's ported or make

00:19:35,360 --> 00:19:39,910
suggestions and there were office hours

00:19:37,039 --> 00:19:43,970
where you could get help right away

00:19:39,910 --> 00:19:45,289
cool so six months later everything

00:19:43,970 --> 00:19:48,350
that's crossed out was done

00:19:45,289 --> 00:19:49,910
authentication was handled albeit with

00:19:48,350 --> 00:19:53,240
this intermediate solution that wasn't

00:19:49,910 --> 00:19:55,100
as robust as we wanted um we taken care

00:19:53,240 --> 00:19:58,309
of event logging there was an internal

00:19:55,100 --> 00:20:03,440
tool that we ported that was for like

00:19:58,309 --> 00:20:05,419
obtaining member attributes that was

00:20:03,440 --> 00:20:06,950
like a core piece of the things that we

00:20:05,419 --> 00:20:08,809
needed support and some basic

00:20:06,950 --> 00:20:10,580
functionality for logging interactions

00:20:08,809 --> 00:20:12,470
with members the one thing we didn't

00:20:10,580 --> 00:20:13,940
totally finished getting to during that

00:20:12,470 --> 00:20:16,309
six month period that we had planned to

00:20:13,940 --> 00:20:19,280
was this internal library for tracking

00:20:16,309 --> 00:20:20,630
temporal data it was like 90% done just

00:20:19,280 --> 00:20:22,490
needed a few little tests here and there

00:20:20,630 --> 00:20:26,030
but we all know that that last 10% is

00:20:22,490 --> 00:20:30,140
like takes forever but still that's

00:20:26,030 --> 00:20:31,429
pretty good okay so this is where the

00:20:30,140 --> 00:20:33,650
plot thickens right the technical

00:20:31,429 --> 00:20:36,970
challenges the meat and potatoes the

00:20:33,650 --> 00:20:40,309
intermediate step of JSON web tokens was

00:20:36,970 --> 00:20:42,530
is is still kind of a pain it took us

00:20:40,309 --> 00:20:45,919
like two years to actually do it the way

00:20:42,530 --> 00:20:48,230
that we wanted to do it where we had

00:20:45,919 --> 00:20:51,260
consistent authentication across all of

00:20:48,230 --> 00:20:52,820
our tools another problem was that some

00:20:51,260 --> 00:20:54,590
things worked okay as they were in

00:20:52,820 --> 00:20:56,659
flasks though we never ended up porting

00:20:54,590 --> 00:21:01,429
them because if it ain't broke don't fix

00:20:56,659 --> 00:21:05,120
it there's also things that were too big

00:21:01,429 --> 00:21:06,860
to port so like you needed to make a

00:21:05,120 --> 00:21:08,030
specific project in order to do it if

00:21:06,860 --> 00:21:11,679
it's valuable enough to spend the time

00:21:08,030 --> 00:21:13,880
on we also had to balance business needs

00:21:11,679 --> 00:21:17,390
expedience with the desire to write only

00:21:13,880 --> 00:21:20,059
in Django we had more internal tools

00:21:17,390 --> 00:21:26,690
support still and migrations are still a

00:21:20,059 --> 00:21:28,280
huge pain but then plot twist over the

00:21:26,690 --> 00:21:29,720
team over time the team generally

00:21:28,280 --> 00:21:31,730
arrived at the idea that microservices

00:21:29,720 --> 00:21:32,750
would make our lives better and because

00:21:31,730 --> 00:21:34,010
there was so much tied up in one

00:21:32,750 --> 00:21:35,780
monolith it made things too

00:21:34,010 --> 00:21:37,549
interdependent made teams reliant on

00:21:35,780 --> 00:21:39,080
each other before they could ship

00:21:37,549 --> 00:21:40,190
anything and

00:21:39,080 --> 00:21:43,370
we weren't living living under a rock

00:21:40,190 --> 00:21:44,630
before then we knew like microservices

00:21:43,370 --> 00:21:47,659
was a way that a lot of people were

00:21:44,630 --> 00:21:48,679
going we just hadn't quite figured out

00:21:47,659 --> 00:21:50,390
yet the shape of how we were gonna

00:21:48,679 --> 00:21:52,340
differentiate ourselves from other

00:21:50,390 --> 00:21:54,950
health insurance plans that were

00:21:52,340 --> 00:21:56,450
targeting this audience so it would be

00:21:54,950 --> 00:21:57,559
like a little pre-emptive to start

00:21:56,450 --> 00:22:00,559
breaking things up when we were like

00:21:57,559 --> 00:22:02,059
what is what is our product really so

00:22:00,559 --> 00:22:03,350
now that we have had a better idea of

00:22:02,059 --> 00:22:04,730
what it looked like it made more sense

00:22:03,350 --> 00:22:06,769
to start breaking things out into these

00:22:04,730 --> 00:22:09,860
smaller separate services but then what

00:22:06,769 --> 00:22:12,649
happens to our beautiful Django API we

00:22:09,860 --> 00:22:15,230
don't want it to be should well it's

00:22:12,649 --> 00:22:16,820
actually alive in with us today we have

00:22:15,230 --> 00:22:18,830
tons of rights to the repo and regular

00:22:16,820 --> 00:22:20,450
deploys it spawned a lot of patterns

00:22:18,830 --> 00:22:22,639
that we began using when we broke out

00:22:20,450 --> 00:22:25,250
our little micro services a little baby

00:22:22,639 --> 00:22:26,809
Jingu services some of my co-workers

00:22:25,250 --> 00:22:31,250
created this library called temple

00:22:26,809 --> 00:22:34,190
Django which naming whatever that's a

00:22:31,250 --> 00:22:36,409
project template you get it no that

00:22:34,190 --> 00:22:39,260
helps ensure future micro services one

00:22:36,409 --> 00:22:41,000
use Django to follow some best practices

00:22:39,260 --> 00:22:43,039
and patterns finally that we've

00:22:41,000 --> 00:22:45,019
established for packaging for a package

00:22:43,039 --> 00:22:45,559
installs and like Sphinx ox and stuff

00:22:45,019 --> 00:22:48,649
like that

00:22:45,559 --> 00:22:50,929
we definitely benefit from the speed of

00:22:48,649 --> 00:22:55,549
writing Django ORM queries instead of

00:22:50,929 --> 00:22:56,899
sequel alchemy or at least I do and we

00:22:55,549 --> 00:23:00,649
get all the confidence of Django like

00:22:56,899 --> 00:23:02,000
security right out of the box some of

00:23:00,649 --> 00:23:03,230
the drawbacks are that some things may

00:23:02,000 --> 00:23:04,789
always live in flask and this

00:23:03,230 --> 00:23:07,510
complicates our dev environments we have

00:23:04,789 --> 00:23:09,620
to run like 8,000 services at a time our

00:23:07,510 --> 00:23:12,649
fixtures and our fate data are still

00:23:09,620 --> 00:23:15,080
complicated surprise Django also has

00:23:12,649 --> 00:23:16,519
many ways to write views and some

00:23:15,080 --> 00:23:18,710
patterns we still don't use the

00:23:16,519 --> 00:23:20,450
out-of-the-box Django way like for unit

00:23:18,710 --> 00:23:22,639
tests even though one of the reasons

00:23:20,450 --> 00:23:27,019
that we wanted to switch was like ah

00:23:22,639 --> 00:23:28,399
give us some principles so where does

00:23:27,019 --> 00:23:30,940
this leave us now we're still supporting

00:23:28,399 --> 00:23:34,669
both we're having thorough documentation

00:23:30,940 --> 00:23:36,409
and sorry thorough conversations about

00:23:34,669 --> 00:23:38,419
when it's the right time to refactor at

00:23:36,409 --> 00:23:40,220
least and we're not complaining all the

00:23:38,419 --> 00:23:42,769
time about proliferation of patterns so

00:23:40,220 --> 00:23:44,720
like that's a success and we're spending

00:23:42,769 --> 00:23:46,669
personally I'm spending a lot less time

00:23:44,720 --> 00:23:48,649
googling sequel alchemy ORM

00:23:46,669 --> 00:23:52,350
documentation which like meaningfully

00:23:48,649 --> 00:23:54,090
improves my quality of life so

00:23:52,350 --> 00:23:55,889
if you're gonna take something away from

00:23:54,090 --> 00:23:58,860
this talk other than my very soothing

00:23:55,889 --> 00:24:01,500
storytime voice let it be get buy-in

00:23:58,860 --> 00:24:04,080
from both ground level and management

00:24:01,500 --> 00:24:05,820
that might seem like a no-brainer but it

00:24:04,080 --> 00:24:09,149
will really hamstring your efforts if

00:24:05,820 --> 00:24:11,070
not everyone is on board for us

00:24:09,149 --> 00:24:11,669
rewriting everything in one push wasn't

00:24:11,070 --> 00:24:13,250
gonna work

00:24:11,669 --> 00:24:16,620
but like have that honest conversation

00:24:13,250 --> 00:24:18,600
where you talk about what the goals are

00:24:16,620 --> 00:24:19,799
and what the values are which are not

00:24:18,600 --> 00:24:21,389
necessarily the same thing

00:24:19,799 --> 00:24:24,059
so like know what you're getting into

00:24:21,389 --> 00:24:25,409
and spread the knowledge around the more

00:24:24,059 --> 00:24:27,149
people who are comfortable in your new

00:24:25,409 --> 00:24:32,700
framework while you pour it the better

00:24:27,149 --> 00:24:33,840
right so part to a new Django where do

00:24:32,700 --> 00:24:35,879
we go from here do we call this a

00:24:33,840 --> 00:24:38,039
success personally I think it's a

00:24:35,879 --> 00:24:39,929
success in progress we're seeing

00:24:38,039 --> 00:24:42,360
meaningful change and the things that

00:24:39,929 --> 00:24:43,919
we're bothering us from before and we

00:24:42,360 --> 00:24:45,450
haven't wasted a lot of time or

00:24:43,919 --> 00:24:48,600
resources porting things that don't need

00:24:45,450 --> 00:24:51,539
to move or sinking more time into

00:24:48,600 --> 00:24:52,919
something that wasn't a good fit we do

00:24:51,539 --> 00:24:55,950
have some added complications and

00:24:52,919 --> 00:24:57,990
wrinkles like migrations etc but they're

00:24:55,950 --> 00:25:01,080
relatively small potatoes and our kind

00:24:57,990 --> 00:25:02,519
of livable tech debt one important thing

00:25:01,080 --> 00:25:04,379
for me is that had we not set up the

00:25:02,519 --> 00:25:05,940
expectation upfront that this port will

00:25:04,379 --> 00:25:07,769
likely take us a few years we're not

00:25:05,940 --> 00:25:09,240
going to front-load at all I might feel

00:25:07,769 --> 00:25:10,740
differently about the fact that we're

00:25:09,240 --> 00:25:12,960
two years in and still working on this

00:25:10,740 --> 00:25:14,879
but knowing what the priorities were

00:25:12,960 --> 00:25:17,580
upfront which is like keep doing product

00:25:14,879 --> 00:25:20,490
work maintain your work-life balance do

00:25:17,580 --> 00:25:22,620
this sustainably precluded my worrying

00:25:20,490 --> 00:25:24,600
about not doing it fast enough so the

00:25:22,620 --> 00:25:26,279
work is still going on maybe in a couple

00:25:24,600 --> 00:25:29,789
of years we'll regret some of these

00:25:26,279 --> 00:25:32,610
choices after all but maybe you can find

00:25:29,789 --> 00:25:34,320
out to come work with me you too can

00:25:32,610 --> 00:25:36,360
shape the future of tech at Clover

00:25:34,320 --> 00:25:39,029
health and I mean work with me you can't

00:25:36,360 --> 00:25:40,200
work with that dog her name's Chloe and

00:25:39,029 --> 00:25:44,639
the position has already been filled by

00:25:40,200 --> 00:25:46,409
me we're hiring engineers in remote from

00:25:44,639 --> 00:25:47,460
all over the US so come talk to me if

00:25:46,409 --> 00:25:53,210
that's something you're interested in

00:25:47,460 --> 00:25:53,210
and thank you for attending my storytime

00:25:57,700 --> 00:26:03,190
you just have one question I mean while

00:26:00,340 --> 00:26:06,610
you were porting the API from flask to

00:26:03,190 --> 00:26:09,010
Django was it considered that you could

00:26:06,610 --> 00:26:10,840
have just added an nginx layer on top of

00:26:09,010 --> 00:26:13,870
these two and then use the configuration

00:26:10,840 --> 00:26:16,240
to read out the if I'm point to flask

00:26:13,870 --> 00:26:18,820
answer the Django while slowly migrating

00:26:16,240 --> 00:26:21,570
from class to Django or just wondering

00:26:18,820 --> 00:26:23,530
let me restate the question as I hear it

00:26:21,570 --> 00:26:25,300
you're saying why didn't we just put

00:26:23,530 --> 00:26:26,950
nginx over and have nginx do the routing

00:26:25,300 --> 00:26:33,220
of like this goes to Django this goes to

00:26:26,950 --> 00:26:34,480
flask we thought about it I think this

00:26:33,220 --> 00:26:35,770
is like two and a half years ago so I'm

00:26:34,480 --> 00:26:39,760
struggling to remember but I think the

00:26:35,770 --> 00:26:42,310
reason was that we we wanted to keep

00:26:39,760 --> 00:26:45,490
knowledge of like what was ported and

00:26:42,310 --> 00:26:47,500
what wasn't kind of local rather than

00:26:45,490 --> 00:26:48,970
adding another place that has to figure

00:26:47,500 --> 00:26:50,500
out whether something is ported and then

00:26:48,970 --> 00:26:53,800
when you port something you have to let

00:26:50,500 --> 00:26:55,420
nginx know as well I think that was why

00:26:53,800 --> 00:26:57,130
mostly for simplicity of like how many

00:26:55,420 --> 00:27:05,080
places do I have to change something I

00:26:57,130 --> 00:27:07,120
poured it hi Nicole hi even the dance

00:27:05,080 --> 00:27:08,230
you ended up having to do with JWT s and

00:27:07,120 --> 00:27:10,840
the fact that something's never moved

00:27:08,230 --> 00:27:14,410
off of flask kind of as a result of the

00:27:10,840 --> 00:27:15,720
setup looking back do you still just you

00:27:14,410 --> 00:27:19,090
and the team still feel good about

00:27:15,720 --> 00:27:21,490
having the kind of flask routing happen

00:27:19,090 --> 00:27:22,870
over the network as compared to a code

00:27:21,490 --> 00:27:25,540
base you and I used to work on where

00:27:22,870 --> 00:27:28,630
Django was kind of a wrapper around the

00:27:25,540 --> 00:27:31,600
old legacy code base I think in general

00:27:28,630 --> 00:27:33,220
the team feels pretty good about the

00:27:31,600 --> 00:27:35,200
strategy that we ended up choosing it

00:27:33,220 --> 00:27:37,000
doesn't get in most people's way most of

00:27:35,200 --> 00:27:39,520
the time there are definitely other

00:27:37,000 --> 00:27:42,160
methods that would probably have worked

00:27:39,520 --> 00:27:43,720
but our general problem and engineering

00:27:42,160 --> 00:27:45,550
was like we could do this we could do

00:27:43,720 --> 00:27:47,320
that what are we going to do and we just

00:27:45,550 --> 00:27:49,060
need it to like pick a thing stick with

00:27:47,320 --> 00:27:53,260
it and we weren't really concerned about

00:27:49,060 --> 00:27:55,600
like buyer's remorse all right thank you

00:27:53,260 --> 00:27:56,250
so much let's give Nicole another round

00:27:55,600 --> 00:27:59,190
of applause week

00:27:56,250 --> 00:28:12,460
[Applause]

00:27:59,190 --> 00:28:12,460

YouTube URL: https://www.youtube.com/watch?v=EPlITGkRmA0


