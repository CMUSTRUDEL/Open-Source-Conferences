Title: DjangoCon US 2016 - Confident Asset Deployments With Webpack & Django by Scott Burns
Publication date: 2016-08-12
Playlist: DjangoCon US 2016
Description: 
	Confident Asset Deployments With Webpack & Django by Scott Burns

Webpack

What is it?
What does it do?
Source transformations
Output
Why Djangos collectstatic is not up to the job?

Must run after deployment
Doesn't do all the things
Slow
Integration on both sides

Webpack bundle tracker to output build stats
Django Webpack bundle loader to read those files
How to render links in templates.

This talk was presented at: https://2016.djangocon.us/schedule/presentation/12/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:20,010 --> 00:00:23,519
if you're on the slack team forge a new

00:00:22,800 --> 00:00:25,710
path

00:00:23,519 --> 00:00:28,109
I made a channel in case you want to

00:00:25,710 --> 00:00:30,210
kind of chat afterwards or or whenever

00:00:28,109 --> 00:00:32,880
and it's called confident deploys so

00:00:30,210 --> 00:00:35,460
join that if you if you want to I'll

00:00:32,880 --> 00:00:38,010
probably publish my slides there and

00:00:35,460 --> 00:00:40,530
Twitter as well also tomorrow afternoon

00:00:38,010 --> 00:00:43,410
Jack McCoy is talking about the reactive

00:00:40,530 --> 00:00:45,059
Django so so this talk is basically how

00:00:43,410 --> 00:00:47,039
you might get that set up the his pop is

00:00:45,059 --> 00:00:49,200
really like why you might want to use

00:00:47,039 --> 00:00:51,989
react with your Jenga talk so I

00:00:49,200 --> 00:00:55,320
definitely suggest going to their before

00:00:51,989 --> 00:00:57,690
we begin I have a small secret last year

00:00:55,320 --> 00:00:58,649
we were beginning to build a new react

00:00:57,690 --> 00:01:00,449
application work

00:00:58,649 --> 00:01:03,120
we had just paired a first friend

00:01:00,449 --> 00:01:05,580
developer Amazon he to figure out how to

00:01:03,120 --> 00:01:07,860
make our Django application work with

00:01:05,580 --> 00:01:09,540
web pack because he was he was gung-ho

00:01:07,860 --> 00:01:12,510
about using webpack and we knew that it

00:01:09,540 --> 00:01:14,479
was probably the way to work so the way

00:01:12,510 --> 00:01:18,060
to to move forward with our application

00:01:14,479 --> 00:01:20,700
so the ideas that I've been present are

00:01:18,060 --> 00:01:24,180
not my ideas the code I'm present is not

00:01:20,700 --> 00:01:26,759
my code I fortunately stumbled across a

00:01:24,180 --> 00:01:29,340
way of Sloane who's a developer in India

00:01:26,759 --> 00:01:30,900
and his blog and a couple of the

00:01:29,340 --> 00:01:33,450
packages that I'm gonna show have been

00:01:30,900 --> 00:01:36,320
super helpful without his work I

00:01:33,450 --> 00:01:38,610
wouldn't be here talking to you today so

00:01:36,320 --> 00:01:39,990
as a brief overview what are we gonna

00:01:38,610 --> 00:01:43,140
talk about we're gonna start with some

00:01:39,990 --> 00:01:46,399
philosophy specifics right now how they

00:01:43,140 --> 00:01:49,200
implement an asset deployment workflow

00:01:46,399 --> 00:01:51,799
around the philosophy and we'll finally

00:01:49,200 --> 00:01:55,079
finish with a little bit of philosophy

00:01:51,799 --> 00:01:57,630
so what do we mean by confident asset

00:01:55,079 --> 00:02:00,950
deployments sort of work from right to

00:01:57,630 --> 00:02:03,360
left deployments are just changes

00:02:00,950 --> 00:02:05,700
changes you want to introduce to your

00:02:03,360 --> 00:02:07,950
application I could be to production it

00:02:05,700 --> 00:02:10,770
could be the staging it could be testing

00:02:07,950 --> 00:02:12,300
and hopefully you're putting on these

00:02:10,770 --> 00:02:15,060
features that

00:02:12,300 --> 00:02:18,180
in front of your users but obviously

00:02:15,060 --> 00:02:20,940
we're humans were also deploying fixes

00:02:18,180 --> 00:02:27,570
as well by assets

00:02:20,940 --> 00:02:29,190
I mean JavaScript CSS and images and in

00:02:27,570 --> 00:02:31,590
this case I sort of mean first party

00:02:29,190 --> 00:02:33,660
images images that you include with your

00:02:31,590 --> 00:02:37,560
site not necessarily images uploaded by

00:02:33,660 --> 00:02:39,660
your users content what are some

00:02:37,560 --> 00:02:41,190
attributes of deployments that I think

00:02:39,660 --> 00:02:43,560
can help us become confident that

00:02:41,190 --> 00:02:45,510
they're going to work well the first is

00:02:43,560 --> 00:02:46,620
that they need to be easy to begin you

00:02:45,510 --> 00:02:49,440
should be able to do it from your local

00:02:46,620 --> 00:02:51,150
machine ideally though this talk is not

00:02:49,440 --> 00:02:53,580
about it you should do it maybe from

00:02:51,150 --> 00:02:56,010
chat ops you know from your from slack

00:02:53,580 --> 00:02:58,350
or however you communicate but if they

00:02:56,010 --> 00:03:02,490
require you to be logged in to some

00:02:58,350 --> 00:03:04,350
secret system somewhere that's that's

00:03:02,490 --> 00:03:07,440
not great because you're less likely to

00:03:04,350 --> 00:03:09,750
do that they need to be reversible what

00:03:07,440 --> 00:03:12,840
I mean by reversible is I never like to

00:03:09,750 --> 00:03:15,480
edit resources specifically in my assets

00:03:12,840 --> 00:03:17,640
if I'm going to deploy a change I want

00:03:15,480 --> 00:03:22,530
to create completely new assets because

00:03:17,640 --> 00:03:24,720
no matter the scale that you work at and

00:03:22,530 --> 00:03:26,670
you want to be able to kind of back out

00:03:24,720 --> 00:03:30,209
of that deployment and get back to a

00:03:26,670 --> 00:03:33,000
known good state quickly they need to be

00:03:30,209 --> 00:03:35,880
fast a slow process a slow deployment

00:03:33,000 --> 00:03:38,130
deployment process it necessarily means

00:03:35,880 --> 00:03:40,260
that it just introduces more time in

00:03:38,130 --> 00:03:41,090
which things might break so if you can

00:03:40,260 --> 00:03:45,570
deploy quickly

00:03:41,090 --> 00:03:50,459
there's just fewer things to go wrong it

00:03:45,570 --> 00:03:54,420
has to be automated automate the

00:03:50,459 --> 00:03:57,510
deployment to be improved through code

00:03:54,420 --> 00:04:00,480
and not necessarily any human sort of

00:03:57,510 --> 00:04:03,390
relearning your process if we make

00:04:00,480 --> 00:04:05,640
improvements to our deployment we do so

00:04:03,390 --> 00:04:07,190
we should do so through code and you

00:04:05,640 --> 00:04:09,660
know through a PR something that can be

00:04:07,190 --> 00:04:11,550
reviewed instead of like a Google

00:04:09,660 --> 00:04:15,330
spreadsheet that people aren't going to

00:04:11,550 --> 00:04:17,760
read it needs to include as few third

00:04:15,330 --> 00:04:20,460
parties as possible I don't believe that

00:04:17,760 --> 00:04:22,800
we should depend on github being up or

00:04:20,460 --> 00:04:25,319
pi PI or NPM or any third

00:04:22,800 --> 00:04:28,740
we should be able to deploy whenever we

00:04:25,319 --> 00:04:31,500
want however we want and it needs to be

00:04:28,740 --> 00:04:34,470
tested I'm not going to get into how we

00:04:31,500 --> 00:04:37,229
tests or what we test but if you're

00:04:34,470 --> 00:04:40,379
delivering you know software that users

00:04:37,229 --> 00:04:42,900
depend on whether they pay for it or or

00:04:40,379 --> 00:04:44,699
however you you make money you need to

00:04:42,900 --> 00:04:46,979
be able to test before things get to

00:04:44,699 --> 00:04:49,590
production that things are going to work

00:04:46,979 --> 00:04:51,180
the way you expect so you should

00:04:49,590 --> 00:04:52,650
probably test it back in you should

00:04:51,180 --> 00:04:56,970
probably test the front end if it

00:04:52,650 --> 00:04:57,690
matters to you why are we talking about

00:04:56,970 --> 00:05:01,139
this now

00:04:57,690 --> 00:05:03,659
it's 2016 Django is 10 years old the web

00:05:01,139 --> 00:05:06,960
is even older you think that sort of

00:05:03,659 --> 00:05:10,080
asset deployments are kind of a fixed

00:05:06,960 --> 00:05:12,659
problem well the tool chains have

00:05:10,080 --> 00:05:16,889
improved and specifically on the

00:05:12,659 --> 00:05:18,750
JavaScript side of things there are many

00:05:16,889 --> 00:05:21,150
different tools these days out there for

00:05:18,750 --> 00:05:25,020
sort of bundling up your applications

00:05:21,150 --> 00:05:25,710
and minifying them what I mean by

00:05:25,020 --> 00:05:27,419
minifides

00:05:25,710 --> 00:05:30,870
is basically reduce all the white space

00:05:27,419 --> 00:05:34,680
in your assets so that the requests that

00:05:30,870 --> 00:05:35,909
you do serve are as small as possible so

00:05:34,680 --> 00:05:39,110
these tool chains have gotten a lot

00:05:35,909 --> 00:05:41,699
better than the last couple of years

00:05:39,110 --> 00:05:45,090
communities move at different speeds if

00:05:41,699 --> 00:05:47,789
anybody is somewhat involved with the

00:05:45,090 --> 00:05:50,580
JavaScript community and all the sorts

00:05:47,789 --> 00:05:52,830
of project communities you know that

00:05:50,580 --> 00:05:55,199
they may they tend to move very very

00:05:52,830 --> 00:05:57,000
quickly and that's okay they move much

00:05:55,199 --> 00:05:59,159
more quickly than Python and much more

00:05:57,000 --> 00:06:01,289
polluting than Django it's just kind of

00:05:59,159 --> 00:06:05,340
a younger community they're in a very

00:06:01,289 --> 00:06:08,159
sort of fast growth stage but as web

00:06:05,340 --> 00:06:09,779
developers we want to use the best tools

00:06:08,159 --> 00:06:12,330
regardless of what community they come

00:06:09,779 --> 00:06:14,340
from to accomplish the needs that our

00:06:12,330 --> 00:06:16,889
website needs you know we're ultimately

00:06:14,340 --> 00:06:20,789
tasked with delivering value to our

00:06:16,889 --> 00:06:22,919
users to our stakeholders so whatever

00:06:20,789 --> 00:06:25,229
tool a community comes from we need to

00:06:22,919 --> 00:06:27,690
be able to use it so it's back in

00:06:25,229 --> 00:06:31,520
developers we need to adapt and sort of

00:06:27,690 --> 00:06:32,800
build the best tooling and an

00:06:31,520 --> 00:06:35,470
infrastructure

00:06:32,800 --> 00:06:38,349
can to deliver the best sights and

00:06:35,470 --> 00:06:39,610
experiences for our users what this

00:06:38,349 --> 00:06:42,129
means is that we need to build bridges

00:06:39,610 --> 00:06:45,280
and not wrappers what I mean by a

00:06:42,129 --> 00:06:48,460
wrapper is maybe a high level Jenga

00:06:45,280 --> 00:06:51,030
command management command that beneath

00:06:48,460 --> 00:06:54,849
beneath the sheets sort of runs

00:06:51,030 --> 00:06:56,560
third-party tools from communities for

00:06:54,849 --> 00:06:58,419
instance collect static you can

00:06:56,560 --> 00:07:00,280
configure collect static which is which

00:06:58,419 --> 00:07:04,030
is a django management command that ties

00:07:00,280 --> 00:07:06,849
into the static files application that

00:07:04,030 --> 00:07:09,639
can be it can be sort of coerced to when

00:07:06,849 --> 00:07:12,129
you run it to eventually post process

00:07:09,639 --> 00:07:13,690
your CSS to minify it to post positive j

00:07:12,129 --> 00:07:15,250
it your javascript is sort of

00:07:13,690 --> 00:07:18,129
concatenate all your javascript files

00:07:15,250 --> 00:07:19,569
into a single file and hanifi it but I'm

00:07:18,129 --> 00:07:22,090
gonna take the stance that this is the

00:07:19,569 --> 00:07:24,280
wrong way to do things because the tool

00:07:22,090 --> 00:07:26,379
chains of its root I think we need to

00:07:24,280 --> 00:07:29,349
work more towards building bridges

00:07:26,379 --> 00:07:33,340
between your system for building your

00:07:29,349 --> 00:07:35,620
front-end applications and Django and so

00:07:33,340 --> 00:07:37,650
rest of the rest of this talk I kind of

00:07:35,620 --> 00:07:40,750
want to demonstrate how we can do that

00:07:37,650 --> 00:07:44,560
so what does this look like from code

00:07:40,750 --> 00:07:46,060
perspective I've gotten kind of a third

00:07:44,560 --> 00:07:48,699
of the way through the talk and I

00:07:46,060 --> 00:07:53,289
haven't mentioned web pack at all so web

00:07:48,699 --> 00:07:54,909
pack is a system for all of your modules

00:07:53,289 --> 00:07:57,250
specifically on the front end

00:07:54,909 --> 00:08:01,330
so these days we can build our front end

00:07:57,250 --> 00:08:04,659
with a great great mini great many tools

00:08:01,330 --> 00:08:07,029
and tool chains so this this picture I

00:08:04,659 --> 00:08:08,710
think is actually great this is from the

00:08:07,029 --> 00:08:10,750
web packed I can't have got I oh it's

00:08:08,710 --> 00:08:13,000
it's the picture you see when you first

00:08:10,750 --> 00:08:14,199
start learning to a web pack so we can

00:08:13,000 --> 00:08:16,680
build our front-end we can build our

00:08:14,199 --> 00:08:18,969
JavaScript and sort of plain JavaScript

00:08:16,680 --> 00:08:21,849
but we can also maybe write it in

00:08:18,969 --> 00:08:25,960
CoffeeScript or we can use JSX if we're

00:08:21,849 --> 00:08:27,370
building react apps and it depends you

00:08:25,960 --> 00:08:30,159
know for a particular JavaScript

00:08:27,370 --> 00:08:33,010
component it might depend on having some

00:08:30,159 --> 00:08:37,360
CSS on the page you might write this CSS

00:08:33,010 --> 00:08:39,760
and less or sass or just raw CSS and

00:08:37,360 --> 00:08:43,120
those CSS files might require some

00:08:39,760 --> 00:08:45,520
images on the page as well so all of

00:08:43,120 --> 00:08:46,070
these dependencies sort of make up our

00:08:45,520 --> 00:08:48,530
front-end out

00:08:46,070 --> 00:08:51,350
patience whether we want to or not so

00:08:48,530 --> 00:08:53,140
web packs goal is to sort of build the

00:08:51,350 --> 00:08:56,930
graph of how all these things

00:08:53,140 --> 00:09:00,170
interrelate and then produce for us a

00:08:56,930 --> 00:09:02,300
few JavaScript files much fewer many

00:09:00,170 --> 00:09:07,760
fewer JavaScript files maybe CSS file

00:09:02,300 --> 00:09:11,690
and images so through this process sort

00:09:07,760 --> 00:09:14,840
of web pack creates bundles that include

00:09:11,690 --> 00:09:16,940
all your code and you can sort of

00:09:14,840 --> 00:09:19,640
transform it take it from CoffeeScript

00:09:16,940 --> 00:09:23,900
or sass to actual JavaScript and CSS

00:09:19,640 --> 00:09:26,060
that your browser's understand so how do

00:09:23,900 --> 00:09:30,080
we get installed with web pack well um

00:09:26,060 --> 00:09:31,850
we if you install it with - guess so -

00:09:30,080 --> 00:09:34,430
guess who's gonna save web pack in your

00:09:31,850 --> 00:09:38,600
package that JSON file and that's gee

00:09:34,430 --> 00:09:40,610
will sort of put the web pack binary

00:09:38,600 --> 00:09:43,130
into your path we're also going to

00:09:40,610 --> 00:09:44,990
install a web pack little tracker which

00:09:43,130 --> 00:09:46,910
is a package written by a waste that I

00:09:44,990 --> 00:09:50,720
mentioned before and we're gonna see how

00:09:46,910 --> 00:09:54,260
we use that very quickly so web pack is

00:09:50,720 --> 00:09:56,690
sort of driven by a web pack config dot

00:09:54,260 --> 00:09:59,810
J's file you can think of this as your

00:09:56,690 --> 00:10:02,660
settings dot pi file for web pack you

00:09:59,810 --> 00:10:04,610
basically write this once and it drives

00:10:02,660 --> 00:10:06,440
web pack it tells web pack exactly how

00:10:04,610 --> 00:10:10,640
to build the bundle where to find your

00:10:06,440 --> 00:10:13,790
actual code and how to how to bundle it

00:10:10,640 --> 00:10:15,890
up any plugins you might need so the

00:10:13,790 --> 00:10:17,780
this this particular code snippet that

00:10:15,890 --> 00:10:20,330
I'm showing it was about as basic as it

00:10:17,780 --> 00:10:22,340
gets anything that you'll actually use

00:10:20,330 --> 00:10:25,130
for your site it's gonna be more complex

00:10:22,340 --> 00:10:26,660
but web pack tends to move quickly the

00:10:25,130 --> 00:10:28,760
plugins that people write forward move

00:10:26,660 --> 00:10:30,350
quickly so anything that I really show

00:10:28,760 --> 00:10:32,480
you it's gonna be wrong in about six

00:10:30,350 --> 00:10:35,000
months but there's many tutorials up

00:10:32,480 --> 00:10:37,880
there there's lots of sort of bootstraps

00:10:35,000 --> 00:10:39,980
packages you can learn you can find and

00:10:37,880 --> 00:10:42,500
eventually find a web pack config file

00:10:39,980 --> 00:10:45,070
that works for you but the basics

00:10:42,500 --> 00:10:47,960
involve a couple of different points

00:10:45,070 --> 00:10:49,220
different pieces of data and so we're

00:10:47,960 --> 00:10:51,949
focusing kind of on the

00:10:49,220 --> 00:10:54,589
moduli exports that's kind of a fancy

00:10:51,949 --> 00:10:58,370
way that javascript he knows how to

00:10:54,589 --> 00:11:00,740
essentially like namespace outputs from

00:10:58,370 --> 00:11:02,689
different files so the first important

00:11:00,740 --> 00:11:05,209
thing is the entry property of this

00:11:02,689 --> 00:11:07,310
object the intrigue property tells

00:11:05,209 --> 00:11:09,589
webpack essentially where to start

00:11:07,310 --> 00:11:11,779
looking for your code and you can give

00:11:09,589 --> 00:11:15,279
it a name in this case app so the

00:11:11,779 --> 00:11:17,930
property is app and it points to a index

00:11:15,279 --> 00:11:19,790
jjs i'm not going to show you this file

00:11:17,930 --> 00:11:21,740
but this file is essentially where you

00:11:19,790 --> 00:11:24,709
begin importing all of your actual

00:11:21,740 --> 00:11:27,230
front-end code you can import you know

00:11:24,709 --> 00:11:31,220
your java scripts and your javascript

00:11:27,230 --> 00:11:33,500
files along with CSS which looks weird

00:11:31,220 --> 00:11:35,990
in a javascript file but trust me you

00:11:33,500 --> 00:11:38,750
can make it work the next section the

00:11:35,990 --> 00:11:40,660
next property is output where should

00:11:38,750 --> 00:11:44,300
webpack put all these put all these

00:11:40,660 --> 00:11:49,100
files in this cover DS path dot resolve

00:11:44,300 --> 00:11:50,750
is kind of like OS path and in python

00:11:49,100 --> 00:11:52,759
and we're basically just we want to put

00:11:50,750 --> 00:11:54,709
it into the Buggles directory of the

00:11:52,759 --> 00:11:57,160
static directory that's alongside this

00:11:54,709 --> 00:12:01,100
file and we're going to give it a name

00:11:57,160 --> 00:12:03,199
we're gonna essentially the we want to

00:12:01,100 --> 00:12:06,620
give it a specific name so the little

00:12:03,199 --> 00:12:08,029
name token here will be the name of the

00:12:06,620 --> 00:12:10,550
entry point so we can have multiple

00:12:08,029 --> 00:12:13,209
entry points in this case we're going to

00:12:10,550 --> 00:12:16,300
produce a file called app - something

00:12:13,209 --> 00:12:19,220
that something is to hatch so anytime

00:12:16,300 --> 00:12:20,899
web pack rebuilds the bundle if your

00:12:19,220 --> 00:12:23,360
code changes or any third-party code

00:12:20,899 --> 00:12:26,740
changes this hash is going to change

00:12:23,360 --> 00:12:29,589
because the hash is essentially a unique

00:12:26,740 --> 00:12:32,949
token of all the contents of your file

00:12:29,589 --> 00:12:36,920
so this is how we can start to begin to

00:12:32,949 --> 00:12:38,689
build basically immutable assets every

00:12:36,920 --> 00:12:40,610
different every different bundle that we

00:12:38,689 --> 00:12:42,189
build is going to have a unique hash on

00:12:40,610 --> 00:12:45,170
it

00:12:42,189 --> 00:12:47,389
and we can add plugins to wet back

00:12:45,170 --> 00:12:50,080
basically plugins that can sort of

00:12:47,389 --> 00:12:52,900
inject code before doing

00:12:50,080 --> 00:12:54,790
after the build process so the one thing

00:12:52,900 --> 00:12:57,610
I'm gonna show you here is bundle

00:12:54,790 --> 00:13:00,780
tracker so bundle tracker just need to

00:12:57,610 --> 00:13:03,970
be given a file name and we're going to

00:13:00,780 --> 00:13:06,640
write essentially the statistics of how

00:13:03,970 --> 00:13:11,470
the build is proceeding to this web pack

00:13:06,640 --> 00:13:14,800
- stats JSON file I think in the react

00:13:11,470 --> 00:13:16,510
Django talk later later tomorrow

00:13:14,800 --> 00:13:18,520
Jeff will talk more about the loaders

00:13:16,510 --> 00:13:20,050
but fortunately I don't have enough time

00:13:18,520 --> 00:13:25,180
and that's where a lots of the magic

00:13:20,050 --> 00:13:27,100
that and view comes in so to

00:13:25,180 --> 00:13:29,080
build the bundle we just need to run web

00:13:27,100 --> 00:13:31,630
pack and pass it the config flag and

00:13:29,080 --> 00:13:36,040
past this this file as the config dot

00:13:31,630 --> 00:13:40,050
flag what this does is build the bundle

00:13:36,040 --> 00:13:42,490
and it also writes out this because we

00:13:40,050 --> 00:13:45,160
because we defined the bundle tracker

00:13:42,490 --> 00:13:48,610
plugin writes out that web pack - dad

00:13:45,160 --> 00:13:51,880
stays on file that file isn't just a

00:13:48,610 --> 00:13:55,420
small little tiny snippet of JSON and it

00:13:51,880 --> 00:13:58,180
basically has the status during the

00:13:55,420 --> 00:14:00,550
build the status is building but when

00:13:58,180 --> 00:14:03,490
it's done and it finished successfully

00:14:00,550 --> 00:14:06,640
the status has done and then also writes

00:14:03,490 --> 00:14:08,680
out chunks so the in this example the

00:14:06,640 --> 00:14:10,780
only truck it rolled out was the app

00:14:08,680 --> 00:14:13,480
yeah that basically the name of our

00:14:10,780 --> 00:14:17,230
entry point and so it has the name of

00:14:13,480 --> 00:14:20,290
the file and like I said it's AB - some

00:14:17,230 --> 00:14:24,130
hash and it also has they basically the

00:14:20,290 --> 00:14:26,740
full path it I wrote the bundle - so

00:14:24,130 --> 00:14:29,110
this this kind of absolutely the entire

00:14:26,740 --> 00:14:31,630
knowledge of what web packing then it's

00:14:29,110 --> 00:14:33,130
not the bundle itself and there's I

00:14:31,630 --> 00:14:35,740
demonstrating the bundle because the

00:14:33,130 --> 00:14:37,330
funda was just a bunch of JavaScript and

00:14:35,740 --> 00:14:40,420
whatever and it really depends on on

00:14:37,330 --> 00:14:42,880
your site but this encapsulates what web

00:14:40,420 --> 00:14:46,360
pack did what the the actual assets that

00:14:42,880 --> 00:14:49,540
it produced and if you get this far

00:14:46,360 --> 00:14:50,980
congratulations because it can be it can

00:14:49,540 --> 00:14:52,690
be difficult getting to the point of

00:14:50,980 --> 00:14:55,410
actually making web back be what you

00:14:52,690 --> 00:14:59,080
want it to but I promise it's worth it

00:14:55,410 --> 00:15:00,739
so what are we kind of dealing with on

00:14:59,080 --> 00:15:04,589
the files

00:15:00,739 --> 00:15:06,689
where do things with so managed taka is

00:15:04,589 --> 00:15:08,639
a highlight it's our sort of it's our

00:15:06,689 --> 00:15:10,980
it's our interface into Django

00:15:08,639 --> 00:15:15,209
management commands next to it is this

00:15:10,980 --> 00:15:18,540
web packed up config is file when we run

00:15:15,209 --> 00:15:21,899
web pack and execute a build it changes

00:15:18,540 --> 00:15:23,459
web pack - that's JSON changes the the

00:15:21,899 --> 00:15:26,279
content of that file but the name of the

00:15:23,459 --> 00:15:29,309
files just stays the same and then next

00:15:26,279 --> 00:15:32,009
to it we have our static directory and

00:15:29,309 --> 00:15:36,629
you know our file that contains our

00:15:32,009 --> 00:15:39,029
JavaScript is index.jsp is and it builds

00:15:36,629 --> 00:15:42,119
the bundle into the bubbles I would

00:15:39,029 --> 00:15:44,639
suggest ignoring the bundles directory

00:15:42,119 --> 00:15:48,299
it's usually good practice with virtual

00:15:44,639 --> 00:15:52,019
assistants to not version-control build

00:15:48,299 --> 00:15:54,600
artifacts and then you know an app in

00:15:52,019 --> 00:15:57,149
the App / app directory that's the rest

00:15:54,600 --> 00:16:00,419
of the Django that's the rest of your

00:15:57,149 --> 00:16:03,179
Django project so your urls by all of

00:16:00,419 --> 00:16:08,759
your applications that actually sort of

00:16:03,179 --> 00:16:11,220
implement your back-end logic so we

00:16:08,759 --> 00:16:14,789
actually want to get this we want to

00:16:11,220 --> 00:16:17,730
reference this file in our tablets

00:16:14,789 --> 00:16:19,109
because we've just built our assets we

00:16:17,730 --> 00:16:22,019
need to reference them in our templates

00:16:19,109 --> 00:16:24,239
so how do we do that one way to do that

00:16:22,019 --> 00:16:27,089
is to use kind of the static files the

00:16:24,239 --> 00:16:30,449
static tag and everybody's probably

00:16:27,089 --> 00:16:34,069
seeing this this is how you know for a

00:16:30,449 --> 00:16:37,049
very long time this is how we referenced

00:16:34,069 --> 00:16:39,929
front-end assets so behind the scenes

00:16:37,049 --> 00:16:42,239
the static static files application

00:16:39,929 --> 00:16:44,429
basically provides a way for you to

00:16:42,239 --> 00:16:45,959
organize all your assets and then

00:16:44,429 --> 00:16:49,259
reference them in templates without part

00:16:45,959 --> 00:16:51,720
coding or past or anything like that the

00:16:49,259 --> 00:16:53,879
problem with this is though that every

00:16:51,720 --> 00:16:55,109
time we run a web pack build with

00:16:53,879 --> 00:16:58,379
changes we're going to get a different

00:16:55,109 --> 00:17:01,230
hash so if we forget to kind of update

00:16:58,379 --> 00:17:02,819
this HTML document we're never going to

00:17:01,230 --> 00:17:05,130
reference the new bundle which is bad

00:17:02,819 --> 00:17:07,139
because we're gonna get very confused we

00:17:05,130 --> 00:17:09,809
thought we fixed this javascript bug but

00:17:07,139 --> 00:17:12,040
we didn't change our template so users

00:17:09,809 --> 00:17:16,120
don't actually get linked to this new

00:17:12,040 --> 00:17:19,300
script so Eric's continued to happen if

00:17:16,120 --> 00:17:21,520
only there was a way because that so

00:17:19,300 --> 00:17:24,010
another package that OAS wrote is called

00:17:21,520 --> 00:17:26,710
Django webpack letter we took install it

00:17:24,010 --> 00:17:30,100
the normal way and then we kind of just

00:17:26,710 --> 00:17:33,850
have to tweak our settings hi so our

00:17:30,100 --> 00:17:37,180
Daniel application will use it so make

00:17:33,850 --> 00:17:40,840
sure that in static file stores and that

00:17:37,180 --> 00:17:43,000
settings that high setting

00:17:40,840 --> 00:17:46,510
we put static we put this static

00:17:43,000 --> 00:17:49,780
directory in there we also need to

00:17:46,510 --> 00:17:51,310
implement the web pack loader setting so

00:17:49,780 --> 00:17:54,670
basically we need to give it the bundle

00:17:51,310 --> 00:17:56,710
directory name this is the this is the

00:17:54,670 --> 00:17:59,140
directory under which web pack is

00:17:56,710 --> 00:18:00,970
producing is writing bundles out so in

00:17:59,140 --> 00:18:02,680
this case it's just bundles and we also

00:18:00,970 --> 00:18:05,380
needed to tell it the stats file what

00:18:02,680 --> 00:18:07,060
file is sort of tracking the bundles

00:18:05,380 --> 00:18:10,390
that are written into this directory and

00:18:07,060 --> 00:18:15,220
in this sort of toy toy project it's wet

00:18:10,390 --> 00:18:17,230
back - that's JSON finally we need to

00:18:15,220 --> 00:18:19,450
input we need to put webpack loader in

00:18:17,230 --> 00:18:25,300
our installed applications so Django is

00:18:19,450 --> 00:18:29,650
able to reference it in our templates so

00:18:25,300 --> 00:18:33,130
how do we get the built assets into our

00:18:29,650 --> 00:18:35,470
templates the same way well now our

00:18:33,130 --> 00:18:37,570
index.html looks a little bit different

00:18:35,470 --> 00:18:39,550
we can load the render bundle tag from

00:18:37,570 --> 00:18:41,950
my pack loader and then when we need to

00:18:39,550 --> 00:18:43,840
render the actual script tag we don't

00:18:41,950 --> 00:18:46,990
have to write a script tag ourselves we

00:18:43,840 --> 00:18:48,780
use this render bundle tag and behind

00:18:46,990 --> 00:18:51,730
the scenes it will produce the correct

00:18:48,780 --> 00:18:54,250
script tag for us if we were able to

00:18:51,730 --> 00:18:56,530
bring you the CSS bundles it would

00:18:54,250 --> 00:18:59,830
produce the right link to our style

00:18:56,530 --> 00:19:01,660
sheets so what this does is behind the

00:18:59,830 --> 00:19:04,210
scenes you use a static files but it

00:19:01,660 --> 00:19:07,780
also uses that web pack that's - that's

00:19:04,210 --> 00:19:09,940
JSON file to extract the name of this

00:19:07,780 --> 00:19:15,480
particular bundle and use it when

00:19:09,940 --> 00:19:18,220
building when writing out the link so

00:19:15,480 --> 00:19:20,980
when we're at the point all we need to

00:19:18,220 --> 00:19:22,690
do to deploy - bro to production is one

00:19:20,980 --> 00:19:23,790
of new web pack builds commit the

00:19:22,690 --> 00:19:26,220
changes that occur

00:19:23,790 --> 00:19:28,560
in the stats file but none of our

00:19:26,220 --> 00:19:30,570
templates need to change so this

00:19:28,560 --> 00:19:32,100
produces this this makes deployments

00:19:30,570 --> 00:19:35,100
that are essentially one small little

00:19:32,100 --> 00:19:37,110
JSON file changes and every template

00:19:35,100 --> 00:19:39,480
that references then through this winter

00:19:37,110 --> 00:19:43,350
bundle still continues to work exactly

00:19:39,480 --> 00:19:46,050
as we would expect so what what is

00:19:43,350 --> 00:19:47,730
rendered is kind of the correct as we

00:19:46,050 --> 00:19:50,760
would expect it it renders a script tag

00:19:47,730 --> 00:19:52,320
with the correct source type char sets

00:19:50,760 --> 00:19:55,740
everything that a browser needs to be

00:19:52,320 --> 00:19:57,480
able to find that file so for the

00:19:55,740 --> 00:20:00,660
digital people in the audience we have

00:19:57,480 --> 00:20:03,330
web pack running independently agenda so

00:20:00,660 --> 00:20:06,240
when we run a web pack build it produces

00:20:03,330 --> 00:20:09,740
the sweat packs stats JSON file also

00:20:06,240 --> 00:20:12,030
produces the bundle itself when Django

00:20:09,740 --> 00:20:14,190
receives requests and needs to render

00:20:12,030 --> 00:20:16,500
out a template that references that

00:20:14,190 --> 00:20:21,120
bundle it just needs to read the web

00:20:16,500 --> 00:20:23,280
pack stats file when that bundle changes

00:20:21,120 --> 00:20:25,320
and we produce a new bundle the content

00:20:23,280 --> 00:20:27,120
of the stats file changes but nothing

00:20:25,320 --> 00:20:29,240
else in your project changes you don't

00:20:27,120 --> 00:20:32,190
have to update any templates yourself

00:20:29,240 --> 00:20:34,290
Django we've configured Django through

00:20:32,190 --> 00:20:36,150
web pack loader to just read that file

00:20:34,290 --> 00:20:43,470
and produce it differently in your

00:20:36,150 --> 00:20:46,110
template so I don't think that we should

00:20:43,470 --> 00:20:48,600
serve our assets from Django I recommend

00:20:46,110 --> 00:20:51,960
using s3 if you're worried about

00:20:48,600 --> 00:20:54,390
performance a CDN if you must but to me

00:20:51,960 --> 00:20:56,790
s3 kind of is a perfect place to put

00:20:54,390 --> 00:21:00,270
your assets the permissions are a lot

00:20:56,790 --> 00:21:02,220
heat a lot more easy to handle and you

00:21:00,270 --> 00:21:04,860
know ingressing into your production

00:21:02,220 --> 00:21:08,210
network and it's also accessible from

00:21:04,860 --> 00:21:11,330
everywhere what this means is you can

00:21:08,210 --> 00:21:14,190
build build your bundle through web pack

00:21:11,330 --> 00:21:16,770
commit that change and upload the bundle

00:21:14,190 --> 00:21:18,450
test3 and then as you're you know

00:21:16,770 --> 00:21:20,970
testing if you if you have your project

00:21:18,450 --> 00:21:23,100
running under CI you can actually test

00:21:20,970 --> 00:21:25,110
you know you can do in browser tests

00:21:23,100 --> 00:21:28,440
through the actual bundle that's already

00:21:25,110 --> 00:21:30,210
produced in an s3 that your users will

00:21:28,440 --> 00:21:34,770
actually use you know once you deploy

00:21:30,210 --> 00:21:36,389
these changes why don't we use sort of

00:21:34,770 --> 00:21:39,209
just pure static files

00:21:36,389 --> 00:21:40,679
why don't we use white static it's it

00:21:39,209 --> 00:21:43,169
comes from with it comes with Jenga why

00:21:40,679 --> 00:21:44,519
don't we use that well first to run it

00:21:43,169 --> 00:21:45,839
you know sort of in your production

00:21:44,519 --> 00:21:48,749
environment you have to be able to get

00:21:45,839 --> 00:21:50,459
to production and depending on the level

00:21:48,749 --> 00:21:54,200
of you know security in your project

00:21:50,459 --> 00:21:56,639
that could be difficult it's slow um

00:21:54,200 --> 00:21:59,190
anytime you make any change to any of

00:21:56,639 --> 00:22:02,159
your assets through and need to deploy

00:21:59,190 --> 00:22:04,889
them through collect static it copies

00:22:02,159 --> 00:22:07,799
everything so in the meantime you are

00:22:04,889 --> 00:22:10,259
potentially you know serving requests

00:22:07,799 --> 00:22:12,389
that reference assets that aren't

00:22:10,259 --> 00:22:14,879
actually ready because quick static is

00:22:12,389 --> 00:22:16,349
slow and finally if you want to do

00:22:14,879 --> 00:22:18,029
anything fancy with your assets and

00:22:16,349 --> 00:22:20,279
collect static you have to include both

00:22:18,029 --> 00:22:23,219
postprocessors which means installing

00:22:20,279 --> 00:22:25,229
software on your production servers that

00:22:23,219 --> 00:22:28,019
aren't that are only used that's only

00:22:25,229 --> 00:22:30,239
used when you run in select static and I

00:22:28,019 --> 00:22:31,889
like to include sort of the bare minimum

00:22:30,239 --> 00:22:35,849
of the software on my production servers

00:22:31,889 --> 00:22:37,440
as possible in general I think we need

00:22:35,849 --> 00:22:39,829
to worry about separating of concerns

00:22:37,440 --> 00:22:43,619
Django does what it does really well and

00:22:39,829 --> 00:22:47,519
web pack and tools like it do what they

00:22:43,619 --> 00:22:49,169
do really well if you sort of use this

00:22:47,519 --> 00:22:50,519
kind of workflow the front-end

00:22:49,169 --> 00:22:53,399
developers on your team are going to

00:22:50,519 --> 00:22:55,139
love you because any tutorial that they

00:22:53,399 --> 00:22:56,999
find about some new JavaScript

00:22:55,139 --> 00:22:58,950
technology is not going to be written

00:22:56,999 --> 00:23:00,509
from the perspective of integrating it

00:22:58,950 --> 00:23:02,940
in the Django project it's gonna be

00:23:00,509 --> 00:23:04,459
written with what back or something like

00:23:02,940 --> 00:23:06,929
that

00:23:04,459 --> 00:23:08,820
DevOps but with just operations in

00:23:06,929 --> 00:23:10,440
general will love you because you don't

00:23:08,820 --> 00:23:12,239
have to they don't have to sort of punch

00:23:10,440 --> 00:23:15,719
a hole in your network so that when you

00:23:12,239 --> 00:23:17,700
do need to deploy you would have to you

00:23:15,719 --> 00:23:20,609
know get to your some production server

00:23:17,700 --> 00:23:22,440
and run collect static click static is

00:23:20,609 --> 00:23:25,589
not needed anymore in this kind of in

00:23:22,440 --> 00:23:28,139
this world so operations is able to lock

00:23:25,589 --> 00:23:29,820
down your servers even more I think it's

00:23:28,139 --> 00:23:32,399
great for new developers on your team to

00:23:29,820 --> 00:23:35,190
they don't need to learn sort of new

00:23:32,399 --> 00:23:37,159
extra Django management commands and

00:23:35,190 --> 00:23:42,570
they also don't need access to sensitive

00:23:37,159 --> 00:23:44,190
systems so I hope that this is kind of a

00:23:42,570 --> 00:23:46,990
interest

00:23:44,190 --> 00:23:49,960
it might not work for your team but I

00:23:46,990 --> 00:23:51,730
hope you kind of think about the the

00:23:49,960 --> 00:23:53,140
philosophical points that I'm trying to

00:23:51,730 --> 00:23:55,900
make about you know building better

00:23:53,140 --> 00:23:57,640
workflows for not only back and

00:23:55,900 --> 00:24:00,700
developers like ourselves but also the

00:23:57,640 --> 00:24:02,820
front-end developers on our team thank

00:24:00,700 --> 00:24:02,820
you

00:24:08,300 --> 00:24:13,429
so we have some time for a few questions

00:24:10,580 --> 00:24:18,410
anyone had a question that command to

00:24:13,429 --> 00:24:20,260
actually get the hash or to change that

00:24:18,410 --> 00:24:22,580
JSON file that holds that hash that

00:24:20,260 --> 00:24:26,059
dangle webpack uses in the templates to

00:24:22,580 --> 00:24:28,340
bind that that bundle can you just pass

00:24:26,059 --> 00:24:31,070
in any way could you pass in like a the

00:24:28,340 --> 00:24:34,040
actual hash so in case I wanted to

00:24:31,070 --> 00:24:35,870
deploy or to use a like an environment

00:24:34,040 --> 00:24:37,700
variable instead of changing a JSON file

00:24:35,870 --> 00:24:39,590
instead of like having that commit in

00:24:37,700 --> 00:24:42,770
there to do the deployment I could just

00:24:39,590 --> 00:24:46,309
pass in a variable and that would just

00:24:42,770 --> 00:24:52,280
kick off my deployment that's a great

00:24:46,309 --> 00:24:53,720
question what I would say is so the hash

00:24:52,280 --> 00:24:55,790
is dependent on the contents of your

00:24:53,720 --> 00:24:58,700
file and you might not know what that's

00:24:55,790 --> 00:25:00,620
gonna be until you build the file but

00:24:58,700 --> 00:25:02,420
you can use that stats file in other

00:25:00,620 --> 00:25:03,980
ways so you could use that stats file

00:25:02,420 --> 00:25:05,690
maybe upload it you know to a build

00:25:03,980 --> 00:25:08,300
server or something like that and it

00:25:05,690 --> 00:25:09,530
could reference that file if that makes

00:25:08,300 --> 00:25:11,390
sense and sort of introduced an

00:25:09,530 --> 00:25:16,250
environment variable into you know your

00:25:11,390 --> 00:25:20,390
your machine or something like that yeah

00:25:16,250 --> 00:25:21,500
I've got two questions one okay the big

00:25:20,390 --> 00:25:24,380
one is that we're using something

00:25:21,500 --> 00:25:28,270
similar time we run like a production

00:25:24,380 --> 00:25:31,670
build we end up with the old hashed

00:25:28,270 --> 00:25:33,200
coded files as well as the new one do

00:25:31,670 --> 00:25:42,160
you like run some sort of housekeeping

00:25:33,200 --> 00:25:44,240
dude take care of that old versions

00:25:42,160 --> 00:25:47,150
depending on how much you're willing to

00:25:44,240 --> 00:25:49,580
pay s3 you know these files if you kind

00:25:47,150 --> 00:25:51,320
of if you minify them and gzip them they

00:25:49,580 --> 00:25:53,390
end up being very small you know there

00:25:51,320 --> 00:25:54,860
are hundreds of kilobytes that they're

00:25:53,390 --> 00:25:57,440
pretty small in the grand scheme of

00:25:54,860 --> 00:26:00,920
things that doesn't cost a lot skip most

00:25:57,440 --> 00:26:04,340
so no I typically I don't ever delete

00:26:00,920 --> 00:26:06,230
built bundles just because I don't want

00:26:04,340 --> 00:26:08,660
the possibility the off-chance

00:26:06,230 --> 00:26:10,040
possibility of somebody referencing that

00:26:08,660 --> 00:26:12,230
in a page somewhere

00:26:10,040 --> 00:26:14,480
and so like when you're doing

00:26:12,230 --> 00:26:16,070
development to use a separate web pack

00:26:14,480 --> 00:26:18,230
config so that you're not creating the

00:26:16,070 --> 00:26:21,470
cache things yes yeah I didn't show that

00:26:18,230 --> 00:26:25,910
but there's a way to basically a

00:26:21,470 --> 00:26:28,130
development build just a fjs file that

00:26:25,910 --> 00:26:35,090
only lives on your machine right with

00:26:28,130 --> 00:26:37,400
your settings file yeah you can make

00:26:35,090 --> 00:26:39,230
that so it transparently it looks the

00:26:37,400 --> 00:26:43,670
same but you're building separate

00:26:39,230 --> 00:26:45,530
bundles question you were saying that

00:26:43,670 --> 00:26:47,000
this is reversible is that reversible

00:26:45,530 --> 00:26:48,860
because you've got the hashed or because

00:26:47,000 --> 00:26:50,240
you're using some sort of configuration

00:26:48,860 --> 00:26:53,950
management system so you always can go

00:26:50,240 --> 00:26:53,950
back to an earlier building and

00:26:54,970 --> 00:27:01,400
redeployment process but what I meant by

00:26:58,310 --> 00:27:03,740
reversible is because we never delete or

00:27:01,400 --> 00:27:06,350
edit existing files we just produce new

00:27:03,740 --> 00:27:08,900
ones if we produce new ones that aren't

00:27:06,350 --> 00:27:10,880
correct or something that's gummed up in

00:27:08,900 --> 00:27:13,640
your deployment process you can always

00:27:10,880 --> 00:27:18,620
maybe revert to master and deploy things

00:27:13,640 --> 00:27:21,500
that exist that you know work I have a

00:27:18,620 --> 00:27:23,750
question so John this nature is to keep

00:27:21,500 --> 00:27:25,850
static files inside application folders

00:27:23,750 --> 00:27:32,000
right to have multiple applications you

00:27:25,850 --> 00:27:34,640
handle this yeah it was a very like toy

00:27:32,000 --> 00:27:36,560
and I probably do you need to write sort

00:27:34,640 --> 00:27:38,840
of how we actually do it at work

00:27:36,560 --> 00:27:40,700
but what is what what we do is that we

00:27:38,840 --> 00:27:43,580
have multiple entry files for the

00:27:40,700 --> 00:27:45,950
different aspects of our website and so

00:27:43,580 --> 00:27:49,430
we have multiple wean of having multiple

00:27:45,950 --> 00:27:51,860
stats files and I didn't show it but the

00:27:49,430 --> 00:27:53,660
web pack loader settings and settings up

00:27:51,860 --> 00:27:56,600
high you can actually build it as a

00:27:53,660 --> 00:27:58,850
dictionary kind of like your databases

00:27:56,600 --> 00:28:00,770
kind of how you spell specify databases

00:27:58,850 --> 00:28:04,400
and so you can specify sort of each

00:28:00,770 --> 00:28:05,900
stats file and and have kind of

00:28:04,400 --> 00:28:08,410
different aspects of your site built as

00:28:05,900 --> 00:28:08,410

YouTube URL: https://www.youtube.com/watch?v=xnK1DvzJR5g


