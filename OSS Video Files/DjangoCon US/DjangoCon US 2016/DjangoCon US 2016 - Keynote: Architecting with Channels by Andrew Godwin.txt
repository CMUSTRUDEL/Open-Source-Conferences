Title: DjangoCon US 2016 - Keynote: Architecting with Channels by Andrew Godwin
Publication date: 2016-08-14
Playlist: DjangoCon US 2016
Description: 
	Keynote: Architecting with Channels by Andrew Godwin
Going through Websockets and Channels, and the 'real hard problem' of  asynchoronous coordination.

This talk was presented at: https://2016.djangocon.us/schedule/general-sessions/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:13,910 --> 00:00:19,260
so today's speaker is Angie Godwin

00:00:16,590 --> 00:00:21,720
he is a django core developer he works

00:00:19,260 --> 00:00:24,150
for Eventbrite the ticketing system as a

00:00:21,720 --> 00:00:25,529
senior software engineer probably very

00:00:24,150 --> 00:00:27,180
familiar with him if you ever used the

00:00:25,529 --> 00:00:29,519
package south which then turned into

00:00:27,180 --> 00:00:32,369
migrations in Django 1:7 and now he's

00:00:29,519 --> 00:00:33,030
working on channels he as you heard

00:00:32,369 --> 00:00:34,530
yesterday

00:00:33,030 --> 00:00:36,840
or as you saw Jeff points to people

00:00:34,530 --> 00:00:38,820
towards the front of the room who like

00:00:36,840 --> 00:00:40,680
to attend Jenkins almost religiously

00:00:38,820 --> 00:00:43,079
Essenes they have been to every one and

00:00:40,680 --> 00:00:45,780
this will mark Django Andrews ninth

00:00:43,079 --> 00:00:48,379
Django con IE everyone in the US and the

00:00:45,780 --> 00:00:51,149
ninth China is spoken at one as well so

00:00:48,379 --> 00:00:53,489
his talk my alternative title for this

00:00:51,149 --> 00:00:55,350
talk is teaching a pony new tricks and

00:00:53,489 --> 00:00:59,719
he is gonna speak to us about

00:00:55,350 --> 00:00:59,719
architecting channels and Ruth laurels

00:01:12,750 --> 00:01:17,920
there we go classic thank you very much

00:01:16,179 --> 00:01:19,719
great and hello everybody hope you had a

00:01:17,920 --> 00:01:21,970
good night last night and good morning

00:01:19,719 --> 00:01:24,729
so I am here to talk to you about

00:01:21,970 --> 00:01:26,740
channels and to warm you up a bit of

00:01:24,729 --> 00:01:29,289
light audience participation who here

00:01:26,740 --> 00:01:31,929
has heard of channels at all it has done

00:01:29,289 --> 00:01:36,159
it's about as in 95 - in the room who

00:01:31,929 --> 00:01:38,740
here has used web channels so far so 20

00:01:36,159 --> 00:01:41,380
people and who here has used web sockets

00:01:38,740 --> 00:01:44,799
at all in any capacity and about I say

00:01:41,380 --> 00:01:47,079
hot one third so yes as I said before I

00:01:44,799 --> 00:01:48,759
am Andrew Godwin I'm a Django Cordover /

00:01:47,079 --> 00:01:51,759
I'm a senior software engineer at

00:01:48,759 --> 00:01:54,069
Eventbrite as well and in a past life by

00:01:51,759 --> 00:01:56,259
about two years ago and backwards I did

00:01:54,069 --> 00:01:58,420
a lot of migrations work and what I

00:01:56,259 --> 00:02:00,640
wanted to do today is entirely unrelated

00:01:58,420 --> 00:02:03,700
is about channels but first a bit of

00:02:00,640 --> 00:02:07,299
history that mixes in with that so in

00:02:03,700 --> 00:02:08,979
2010 I was deep in the throes of Django

00:02:07,299 --> 00:02:11,920
development also this point not a Django

00:02:08,979 --> 00:02:14,950
core developer and this is when I first

00:02:11,920 --> 00:02:16,540
encountered WebSockets and I sort of ran

00:02:14,950 --> 00:02:17,620
across them I think randomly they were

00:02:16,540 --> 00:02:19,420
still in development at this point that

00:02:17,620 --> 00:02:21,850
the spec wasn't finalized kept changing

00:02:19,420 --> 00:02:24,609
I kept like filling security features

00:02:21,850 --> 00:02:26,139
and my first exposure was sort of you

00:02:24,609 --> 00:02:27,400
know time to try and do like games

00:02:26,139 --> 00:02:29,200
programming on the where were some kind

00:02:27,400 --> 00:02:30,579
of interactive site and there's still

00:02:29,200 --> 00:02:34,000
very early in the web development for me

00:02:30,579 --> 00:02:36,940
at least and part of that was sort of

00:02:34,000 --> 00:02:38,769
like well I wasn't sure what was going

00:02:36,940 --> 00:02:40,900
on I wasn't sure how Python would work

00:02:38,769 --> 00:02:43,000
with it but I was trying to figure out a

00:02:40,900 --> 00:02:43,930
way to run Python with WebSockets and if

00:02:43,000 --> 00:02:46,540
you saw the talk yesterday about

00:02:43,930 --> 00:02:48,459
channels you know that Python by itself

00:02:46,540 --> 00:02:51,190
is not very well designed WebSockets

00:02:48,459 --> 00:02:53,380
it's a protocol that encourages long

00:02:51,190 --> 00:02:55,510
live stateful connections on the orders

00:02:53,380 --> 00:02:57,459
of thousands per machine Python doesn't

00:02:55,510 --> 00:02:59,620
have a good threading model that matches

00:02:57,459 --> 00:03:00,880
that like button has threading but it's

00:02:59,620 --> 00:03:03,130
not particularly efficient at that kind

00:03:00,880 --> 00:03:05,799
of scale and so my first port of call

00:03:03,130 --> 00:03:07,060
was event ler at the time you know gee

00:03:05,799 --> 00:03:08,349
event is now more popular would say but

00:03:07,060 --> 00:03:10,299
at the time event that was quite popular

00:03:08,349 --> 00:03:11,859
too and I sort of took to the event

00:03:10,299 --> 00:03:13,870
alert they had some all the type of code

00:03:11,859 --> 00:03:16,810
I went in there and fix it up like I

00:03:13,870 --> 00:03:18,310
have like three commits back in 2010 on

00:03:16,810 --> 00:03:18,920
the code base or event that for this one

00:03:18,310 --> 00:03:20,810
thing

00:03:18,920 --> 00:03:22,190
i fiddle around with for a bit and it

00:03:20,810 --> 00:03:24,230
was it was quite fun I got some stuff

00:03:22,190 --> 00:03:25,850
working but there was no real need for I

00:03:24,230 --> 00:03:26,930
couldn't see the use for it and so you

00:03:25,850 --> 00:03:30,530
know time moved on

00:03:26,930 --> 00:03:32,020
con 2012 and the thing that happened

00:03:30,530 --> 00:03:34,880
that really sort of piqued my interest

00:03:32,020 --> 00:03:37,130
was the answer of meteor so who here is

00:03:34,880 --> 00:03:39,459
head of meteor ends up what's a good

00:03:37,130 --> 00:03:41,360
like 60 percent of you say meteor is a

00:03:39,459 --> 00:03:44,090
JavaScript based framework that

00:03:41,360 --> 00:03:45,770
basically has sort of native data

00:03:44,090 --> 00:03:47,989
binding interface right like you can

00:03:45,770 --> 00:03:49,160
make a website and then just drag things

00:03:47,989 --> 00:03:50,630
around on one screen they just

00:03:49,160 --> 00:03:53,000
mysteriously rearrange on the other

00:03:50,630 --> 00:03:55,580
screen and this is just a feature that

00:03:53,000 --> 00:03:57,410
comes with it by default and I saw this

00:03:55,580 --> 00:03:58,880
and I was like oh there's a good use

00:03:57,410 --> 00:04:00,470
WebSockets like those finally a sort of

00:03:58,880 --> 00:04:03,980
good demonstration of what they meant

00:04:00,470 --> 00:04:05,540
and meteor itself has grown and gone

00:04:03,980 --> 00:04:08,660
since then but it is still it is still

00:04:05,540 --> 00:04:10,640
in j/s it does use it's the back

00:04:08,660 --> 00:04:12,530
next door and I have opinions on MongoDB

00:04:10,640 --> 00:04:17,359
that I'm sure you can imagine what they

00:04:12,530 --> 00:04:19,280
are and so while it's a lovely idea

00:04:17,359 --> 00:04:22,970
it's not quite what I was looking for

00:04:19,280 --> 00:04:26,510
for Django obviously Tom 2014 I am

00:04:22,970 --> 00:04:28,520
coming towards the end of the migrations

00:04:26,510 --> 00:04:30,590
bullet in Django like the moving south

00:04:28,520 --> 00:04:32,750
into Jan goes away she was a full

00:04:30,590 --> 00:04:35,690
rewrite but so it was kind of moving the

00:04:32,750 --> 00:04:37,580
concept in and so again like I had a bit

00:04:35,690 --> 00:04:40,340
of free time which is kind of rarity at

00:04:37,580 --> 00:04:41,660
this point thank what what what what

00:04:40,340 --> 00:04:44,150
interests me next what am I looking for

00:04:41,660 --> 00:04:46,880
and so at this point I was looking at in

00:04:44,150 --> 00:04:49,130
sort of full detail what would it mean

00:04:46,880 --> 00:04:50,840
for Django to do WebSockets like what

00:04:49,130 --> 00:04:53,660
was that what were the usage be how we

00:04:50,840 --> 00:04:55,490
implement it is it even possible and so

00:04:53,660 --> 00:04:57,050
my first version of this was codenamed

00:04:55,490 --> 00:04:58,940
Django on air but this has never been

00:04:57,050 --> 00:05:00,979
released it's it sort of folder on my

00:04:58,940 --> 00:05:03,500
machine so much code to get out and this

00:05:00,979 --> 00:05:06,320
was a very early prototype of what a

00:05:03,500 --> 00:05:08,060
meteor is Django would look like it used

00:05:06,320 --> 00:05:09,590
a external server to do WebSocket

00:05:08,060 --> 00:05:09,950
termination this is very common in

00:05:09,590 --> 00:05:12,710
Django

00:05:09,950 --> 00:05:15,890
currently it wasn't particularly great

00:05:12,710 --> 00:05:19,370
the syntax was awful erratically slowly

00:05:15,890 --> 00:05:23,270
but I like the idea and then the

00:05:19,370 --> 00:05:24,680
following year 2015 I sort of kept going

00:05:23,270 --> 00:05:27,229
with the idea and refined it sort of

00:05:24,680 --> 00:05:30,680
rewrote the idea and then 2015 is when I

00:05:27,229 --> 00:05:32,690
first announced channelers and

00:05:30,680 --> 00:05:35,660
if you want to know what channel's is in

00:05:32,690 --> 00:05:37,729
full detail that talked to me yesterday

00:05:35,660 --> 00:05:39,530
or my talk from PyCon is a good move to

00:05:37,729 --> 00:05:41,900
that and this talk is much more about

00:05:39,530 --> 00:05:43,370
like what is channels aiming for what is

00:05:41,900 --> 00:05:45,820
the vision channels like what does it

00:05:43,370 --> 00:05:48,919
even mean because a lot of people think

00:05:45,820 --> 00:05:50,919
that channels is just for WebSockets

00:05:48,919 --> 00:05:53,600
that is it is a means to bring

00:05:50,919 --> 00:05:55,880
WebSockets a Jango then we're done

00:05:53,600 --> 00:05:59,150
move on everything's fine that's not

00:05:55,880 --> 00:06:00,889
true channels was indeed born from

00:05:59,150 --> 00:06:03,590
things like Jango on air might have to

00:06:00,889 --> 00:06:05,870
bring WebSockets into Jango but it has

00:06:03,590 --> 00:06:07,850
become much bigger than that and like

00:06:05,870 --> 00:06:09,050
today I have to show you a bit more of

00:06:07,850 --> 00:06:12,160
what the scope is and what the

00:06:09,050 --> 00:06:14,449
possibilities are with channels so

00:06:12,160 --> 00:06:16,669
underlying all of this is what I call

00:06:14,449 --> 00:06:18,919
the real hard problem say if you talk

00:06:16,669 --> 00:06:20,690
some I talk at PyCon I touched on this

00:06:18,919 --> 00:06:23,510
briefly but today I want to go into it

00:06:20,690 --> 00:06:26,030
in a bit more detail so a lot of people

00:06:23,510 --> 00:06:27,169
think well WebSockets they're not that

00:06:26,030 --> 00:06:29,720
they're not that hard we just you know

00:06:27,169 --> 00:06:31,430
bring in async I or something will tie

00:06:29,720 --> 00:06:33,080
in an event loop then we'll just do

00:06:31,430 --> 00:06:34,660
socket termination Autobahn is great

00:06:33,080 --> 00:06:36,770
library for that I recommend it heavily

00:06:34,660 --> 00:06:38,090
what what's the problem there like you

00:06:36,770 --> 00:06:39,800
know it's it's tricky but we can

00:06:38,090 --> 00:06:42,020
engineer it all right and I agree that

00:06:39,800 --> 00:06:42,800
bit is very easy but that's not the real

00:06:42,020 --> 00:06:44,570
hard problem

00:06:42,800 --> 00:06:46,310
the real hard problem is asynchronous

00:06:44,570 --> 00:06:49,039
coordination and I'll explain what that

00:06:46,310 --> 00:06:51,800
is in a bit more detail but before I do

00:06:49,039 --> 00:06:54,590
that I want to first look at what do you

00:06:51,800 --> 00:06:56,930
use WebSockets for because a lot of this

00:06:54,590 --> 00:06:58,699
what I'm about to explain to you it's

00:06:56,930 --> 00:07:00,349
not driven from an initial design

00:06:58,699 --> 00:07:03,740
shipment from a revised design of

00:07:00,349 --> 00:07:05,750
designing a thing trying out with ideas

00:07:03,740 --> 00:07:07,849
and examples and real projects and

00:07:05,750 --> 00:07:09,590
realizing that the problem that I solved

00:07:07,849 --> 00:07:10,669
initially wasn't in the hard problem the

00:07:09,590 --> 00:07:12,889
hard problem was hiding somewhere

00:07:10,669 --> 00:07:15,740
underneath so why do you use WebSockets

00:07:12,889 --> 00:07:17,720
well first of all you don't always use

00:07:15,740 --> 00:07:19,580
them they're not some kind of magical

00:07:17,720 --> 00:07:22,159
panacea that solves every problem you

00:07:19,580 --> 00:07:24,470
might have they're pretty great I think

00:07:22,159 --> 00:07:25,970
personally but they won't solve like

00:07:24,470 --> 00:07:28,180
your standard like rendering the page

00:07:25,970 --> 00:07:30,169
issues and that kind of stuff and

00:07:28,180 --> 00:07:31,760
they're in architectural decision

00:07:30,169 --> 00:07:33,740
consideration an architecture is all

00:07:31,760 --> 00:07:36,229
about trade-offs if anybody ever tells

00:07:33,740 --> 00:07:38,330
you that a piece of software or solution

00:07:36,229 --> 00:07:40,669
fixes all your problems they are lying

00:07:38,330 --> 00:07:42,380
to you don't listen to them architecture

00:07:40,669 --> 00:07:44,090
is always about a set of trade-offs and

00:07:42,380 --> 00:07:45,410
so for WebSockets you have thing

00:07:44,090 --> 00:07:47,690
like this this isn't obviously not

00:07:45,410 --> 00:07:48,500
exhaustive but WebSockets are

00:07:47,690 --> 00:07:50,510
bi-directional

00:07:48,500 --> 00:07:52,850
so unlike a normal request you can send

00:07:50,510 --> 00:07:54,530
things both ways very easily like a

00:07:52,850 --> 00:07:57,110
request response and hate to be is just

00:07:54,530 --> 00:07:59,090
one way and then one way back there low

00:07:57,110 --> 00:08:01,100
overhead like unlike if you do like a

00:07:59,090 --> 00:08:03,710
sort of very frequent hasty poling

00:08:01,100 --> 00:08:04,729
WebSockets wants to open a very small

00:08:03,710 --> 00:08:08,210
amount of data to send and receive

00:08:04,729 --> 00:08:09,710
packets however on the flip side they're

00:08:08,210 --> 00:08:11,330
quite complex to set up like you had to

00:08:09,710 --> 00:08:13,699
have JavaScript terminating them on the

00:08:11,330 --> 00:08:15,470
client side and moreover they're not

00:08:13,699 --> 00:08:17,510
supported in every single browser these

00:08:15,470 --> 00:08:18,950
days supports a lot better I think a

00:08:17,510 --> 00:08:20,360
couple of mobile browsers are the last

00:08:18,950 --> 00:08:22,490
holdouts of the current versions but

00:08:20,360 --> 00:08:23,840
there's still a few issues are there and

00:08:22,490 --> 00:08:26,810
with proxies and firewalls and things

00:08:23,840 --> 00:08:29,690
like that and so with this in mind you

00:08:26,810 --> 00:08:31,580
still want to use normal HTTP for things

00:08:29,690 --> 00:08:33,830
like rendering pages and serving images

00:08:31,580 --> 00:08:35,839
all this kind of stuff and WebSockets

00:08:33,830 --> 00:08:37,539
are designed for a subset of

00:08:35,839 --> 00:08:40,279
applications that really benefit from

00:08:37,539 --> 00:08:42,890
very like what what is incorrectly I

00:08:40,279 --> 00:08:44,390
kind of terms real-time updates so

00:08:42,890 --> 00:08:46,550
things like streaming updates for a live

00:08:44,390 --> 00:08:48,140
blog things like chat applications

00:08:46,550 --> 00:08:49,550
collaborative editing things like you

00:08:48,140 --> 00:08:51,230
know like if you ever use Google Docs

00:08:49,550 --> 00:08:53,690
like that kind of editing is best done

00:08:51,230 --> 00:08:55,550
via WebSockets and gain backends my very

00:08:53,690 --> 00:08:58,670
first interests most lockers - these

00:08:55,550 --> 00:09:00,709
will benefit from very heavy very chatty

00:08:58,670 --> 00:09:02,750
real-time communication between a server

00:09:00,709 --> 00:09:04,310
and a web browser it's very much sort of

00:09:02,750 --> 00:09:07,010
the next step in web applications like

00:09:04,310 --> 00:09:09,740
it's no longer click submit a request or

00:09:07,010 --> 00:09:11,300
response bang is more like no we can not

00:09:09,740 --> 00:09:13,580
reload the page and tie these things in

00:09:11,300 --> 00:09:15,560
dynamically and these days things like

00:09:13,580 --> 00:09:17,089
reaction and background anger growing

00:09:15,560 --> 00:09:21,020
it's even easier than ever to do this

00:09:17,089 --> 00:09:22,520
and if you look at these particular

00:09:21,020 --> 00:09:24,500
applications you realize that something

00:09:22,520 --> 00:09:28,160
fundamental underlies almost all of them

00:09:24,500 --> 00:09:31,550
and that's broadcast so this is where

00:09:28,160 --> 00:09:33,770
one client or maybe the database or

00:09:31,550 --> 00:09:35,630
whatever makes an event to say it in the

00:09:33,770 --> 00:09:38,029
chat example I send a message to the

00:09:35,630 --> 00:09:40,130
chat and what has happened is everybody

00:09:38,029 --> 00:09:42,440
else is listening on the chat has to

00:09:40,130 --> 00:09:44,600
receive that message and so that's a

00:09:42,440 --> 00:09:45,740
broadcast operation is taking one input

00:09:44,600 --> 00:09:48,470
and giving it to all the connected

00:09:45,740 --> 00:09:49,970
clients if you have the simple server

00:09:48,470 --> 00:09:51,380
that has what we have an event loop we

00:09:49,970 --> 00:09:54,620
have Auto bar a sing heyo

00:09:51,380 --> 00:09:56,450
it's very trivial you just say ok every

00:09:54,620 --> 00:09:57,800
connection I have send it over that's

00:09:56,450 --> 00:09:59,420
not the whole problem

00:09:57,800 --> 00:10:01,370
the whole problem is when you go to two

00:09:59,420 --> 00:10:02,780
servers and then suddenly there's a

00:10:01,370 --> 00:10:05,540
mysterious gap between the two servers

00:10:02,780 --> 00:10:07,700
where you have to go well I need to

00:10:05,540 --> 00:10:09,350
Center into one server and the other

00:10:07,700 --> 00:10:11,570
server has to mysteriously no it

00:10:09,350 --> 00:10:12,890
happened and then work out if it needs

00:10:11,570 --> 00:10:13,970
to send it and then send it to all the

00:10:12,890 --> 00:10:16,100
clients if they need to have it

00:10:13,970 --> 00:10:18,650
themselves and that is what I call the

00:10:16,100 --> 00:10:21,260
real hard problem like taking a simple

00:10:18,650 --> 00:10:23,750
example locally is easy enough scaling

00:10:21,260 --> 00:10:25,280
it to a cluster of 10 20 30 servers that

00:10:23,750 --> 00:10:27,320
have to coordinate that's really

00:10:25,280 --> 00:10:29,210
difficult and that's the problem I ran

00:10:27,320 --> 00:10:31,340
up against in 2014 with on air that I

00:10:29,210 --> 00:10:33,860
was like we need to step back and solve

00:10:31,340 --> 00:10:35,990
this problem more directly and so

00:10:33,860 --> 00:10:38,450
channels is not just a WebSocket

00:10:35,990 --> 00:10:40,640
solution the underlying key pilot

00:10:38,450 --> 00:10:43,250
channels is it's a foundation for

00:10:40,640 --> 00:10:45,080
running services like this at scale it's

00:10:43,250 --> 00:10:47,210
the underpinnings of a system that lets

00:10:45,080 --> 00:10:48,890
you solve the hard problem because I

00:10:47,210 --> 00:10:50,600
believe frameworks are there to solve

00:10:48,890 --> 00:10:52,370
the hard problems for you and let you do

00:10:50,600 --> 00:10:53,900
the easy fun problems instead as a

00:10:52,370 --> 00:10:56,930
programmer that's what I want personally

00:10:53,900 --> 00:10:58,550
I don't do hard work and so yeah who was

00:10:56,930 --> 00:11:00,920
lady programmers is the best thing and

00:10:58,550 --> 00:11:02,750
so channels is is trying to provide that

00:11:00,920 --> 00:11:05,060
underlying layer right the idea is to

00:11:02,750 --> 00:11:07,160
give you the solution to the server

00:11:05,060 --> 00:11:09,260
coordination problem so you can get on

00:11:07,160 --> 00:11:10,700
with your application also making a chat

00:11:09,260 --> 00:11:12,940
is five light inside you'll see later

00:11:10,700 --> 00:11:15,980
it's six lines but we'll get there and

00:11:12,940 --> 00:11:17,360
if you think about what this means and

00:11:15,980 --> 00:11:19,700
I'll show you in the rest of this talk

00:11:17,360 --> 00:11:21,920
this actually brings a lot more than

00:11:19,700 --> 00:11:23,870
WebSockets so WebSockets are one of the

00:11:21,920 --> 00:11:25,460
obvious uses for this but there's also

00:11:23,870 --> 00:11:27,830
things like tasks offloading so I'm sure

00:11:25,460 --> 00:11:30,080
a lot of you use celery celery is one

00:11:27,830 --> 00:11:32,120
version of this and celery is very good

00:11:30,080 --> 00:11:34,040
for things that must run at some point

00:11:32,120 --> 00:11:36,410
and channels offers a very similar

00:11:34,040 --> 00:11:38,690
functionality for things that probably

00:11:36,410 --> 00:11:40,610
should run straight away so it varies a

00:11:38,690 --> 00:11:42,140
different guarantees version of that but

00:11:40,610 --> 00:11:44,150
things that you would have to run during

00:11:42,140 --> 00:11:46,460
the request normally you can offload

00:11:44,150 --> 00:11:47,750
them just to a channel and another so

00:11:46,460 --> 00:11:49,520
we'll just pick them up and because of

00:11:47,750 --> 00:11:51,800
the coordination you can have another

00:11:49,520 --> 00:11:53,090
server entirely separate doing that as

00:11:51,800 --> 00:11:55,610
well as the server you're currently on

00:11:53,090 --> 00:11:58,070
all different processes and only that

00:11:55,610 --> 00:11:59,690
Channel email integration so one of the

00:11:58,070 --> 00:12:01,910
flexibilities of channels is it's

00:11:59,690 --> 00:12:04,190
written around a generic protocol

00:12:01,910 --> 00:12:06,470
abstraction and it's an invented system

00:12:04,190 --> 00:12:07,760
and so sure there's events for

00:12:06,470 --> 00:12:10,340
WebSockets for sending and receiving

00:12:07,760 --> 00:12:11,730
things in actually and disconnection but

00:12:10,340 --> 00:12:13,560
you can tie in things like

00:12:11,730 --> 00:12:15,570
I got a chat message or send a chat

00:12:13,560 --> 00:12:17,880
message or I received an email and

00:12:15,570 --> 00:12:19,769
similarly you can inject these into a

00:12:17,880 --> 00:12:21,410
cluster of servers that runs channels

00:12:19,769 --> 00:12:23,279
and they have get handled correctly

00:12:21,410 --> 00:12:25,110
other things that are very popular

00:12:23,279 --> 00:12:28,079
things like Internet of Things protocols

00:12:25,110 --> 00:12:29,639
mqtt is a popular example here if you

00:12:28,079 --> 00:12:32,459
are in the industry that made sense to

00:12:29,639 --> 00:12:34,139
you if not I'm sorry but these are

00:12:32,459 --> 00:12:36,570
things where like small embedded devices

00:12:34,139 --> 00:12:40,350
talk specialized like low bandwidth

00:12:36,570 --> 00:12:41,699
protocols to servers Jango again isn't

00:12:40,350 --> 00:12:43,920
very good at understanding these because

00:12:41,699 --> 00:12:45,389
it's so tied to this HTTP

00:12:43,920 --> 00:12:49,070
request/response model and so power of

00:12:45,389 --> 00:12:51,750
channels is breaking open that seal so I

00:12:49,070 --> 00:12:53,190
said it's a hard problem I'm sure some

00:12:51,750 --> 00:12:55,139
of you believe me thank you for trusting

00:12:53,190 --> 00:12:56,639
in me but let's look at why because I

00:12:55,139 --> 00:12:59,820
like I like explaining things a bit more

00:12:56,639 --> 00:13:01,800
detail so when one is faced with scaling

00:12:59,820 --> 00:13:04,769
WebSockets in particular they are

00:13:01,800 --> 00:13:06,750
possibly the worst case of network

00:13:04,769 --> 00:13:08,310
engineering scaling they are stateful

00:13:06,750 --> 00:13:10,199
which means that they open the stick

00:13:08,310 --> 00:13:12,990
that open for potentially days at a time

00:13:10,199 --> 00:13:14,639
like you know you can't just load bands

00:13:12,990 --> 00:13:17,339
from across servers randomly because if

00:13:14,639 --> 00:13:18,930
everyone connects at like 8:00 p.m. for

00:13:17,339 --> 00:13:20,850
like some kind of sports game and then

00:13:18,930 --> 00:13:22,019
it just sits open for a while if you

00:13:20,850 --> 00:13:23,970
routed it real quickly they're all on

00:13:22,019 --> 00:13:24,990
one cluster and you can't you can't just

00:13:23,970 --> 00:13:26,579
cut them off and reroute them without

00:13:24,990 --> 00:13:28,800
cutting off the connection so that

00:13:26,579 --> 00:13:30,300
doesn't help not only that you have

00:13:28,800 --> 00:13:32,279
internal network issues

00:13:30,300 --> 00:13:35,069
so with this coordination I showed you

00:13:32,279 --> 00:13:36,959
you could just broadcast everything

00:13:35,069 --> 00:13:38,430
multicast to the entire network that

00:13:36,959 --> 00:13:39,930
you're on which is great until you

00:13:38,430 --> 00:13:41,610
realize that you only have like a 1

00:13:39,930 --> 00:13:44,250
Gigabit Ethernet cable on all the

00:13:41,610 --> 00:13:45,449
servers and trust me with a couple of

00:13:44,250 --> 00:13:47,130
servers you can easily saturate that

00:13:45,449 --> 00:13:48,839
because the more you add it gets

00:13:47,130 --> 00:13:50,940
exponentially more complex and they try

00:13:48,839 --> 00:13:53,279
to send to each other and finally you

00:13:50,940 --> 00:13:55,440
get bottlenecks so not just in the

00:13:53,279 --> 00:13:56,670
networking but if you say ok well we'll

00:13:55,440 --> 00:13:58,260
solve the networking issue by having a

00:13:56,670 --> 00:14:00,149
centralized server send things through

00:13:58,260 --> 00:14:01,589
well now great gratulations

00:14:00,149 --> 00:14:04,610
you have a simple point of failure well

00:14:01,589 --> 00:14:04,610
done that's fantastic for you

00:14:05,130 --> 00:14:08,940
so yeah these are all considerations

00:14:06,899 --> 00:14:10,170
like you know and as you get through the

00:14:08,940 --> 00:14:12,000
process you heat each of these in turn

00:14:10,170 --> 00:14:13,350
and go well I've sold it by having a

00:14:12,000 --> 00:14:14,069
central server at all it's a but it's a

00:14:13,350 --> 00:14:16,589
single point of failure

00:14:14,069 --> 00:14:17,940
well I've amended another Network cetera

00:14:16,589 --> 00:14:20,640
and so this is the sort of problem that

00:14:17,940 --> 00:14:22,949
I think channels and Django in general

00:14:20,640 --> 00:14:25,230
should be solving for you because these

00:14:22,949 --> 00:14:28,230
are generally problems that benefit from

00:14:25,230 --> 00:14:29,910
refocused expert expertise that I do not

00:14:28,230 --> 00:14:31,650
expect most programs to have like you

00:14:29,910 --> 00:14:33,510
should understand the concerns here and

00:14:31,650 --> 00:14:34,770
that's a good programming but you

00:14:33,510 --> 00:14:36,960
shouldn't be able to sit down and write

00:14:34,770 --> 00:14:38,850
a good cross Network char did not

00:14:36,960 --> 00:14:40,230
message delivery system in a few weeks

00:14:38,850 --> 00:14:43,680
that's nothing I expect you to do

00:14:40,230 --> 00:14:45,660
generally as programmers and so Charles

00:14:43,680 --> 00:14:47,550
is built on this abstraction that lets

00:14:45,660 --> 00:14:48,990
you send between servers and in

00:14:47,550 --> 00:14:50,810
particular it's a little bit more than

00:14:48,990 --> 00:14:53,220
just channels so there are five key

00:14:50,810 --> 00:14:55,380
endpoints and channels this is basically

00:14:53,220 --> 00:14:58,230
entire basically our channels written is

00:14:55,380 --> 00:15:00,360
English so you can send to a channel you

00:14:58,230 --> 00:15:02,430
can receive from channels to send more

00:15:00,360 --> 00:15:04,710
than one in fact you can send to a group

00:15:02,430 --> 00:15:05,700
and I group is just a collection channel

00:15:04,710 --> 00:15:08,310
so you can add and remove them from

00:15:05,700 --> 00:15:10,200
groups and so sending and receiving from

00:15:08,310 --> 00:15:13,980
channels is the first high problem so

00:15:10,200 --> 00:15:15,510
say I have a WebSocket on box a and I'm

00:15:13,980 --> 00:15:17,880
sending stuff somebody used to put it on

00:15:15,510 --> 00:15:20,280
box B channels knows that when you send

00:15:17,880 --> 00:15:21,990
to channel B to go onto the network hop

00:15:20,280 --> 00:15:24,420
across and go to that box it solves that

00:15:21,990 --> 00:15:26,760
routing problem for you but moreover if

00:15:24,420 --> 00:15:28,140
I'm sending to a room of people and

00:15:26,760 --> 00:15:30,120
they're all in a group called room hey

00:15:28,140 --> 00:15:32,430
when I sent a group room a channel

00:15:30,120 --> 00:15:33,960
tonneaus to go to that group expand the

00:15:32,430 --> 00:15:35,910
channel list send the right child

00:15:33,960 --> 00:15:37,920
message to each server and then deliver

00:15:35,910 --> 00:15:39,330
it to all the people and that's sold for

00:15:37,920 --> 00:15:42,630
you that that's the key part of channels

00:15:39,330 --> 00:15:45,510
and it's not just done from Django it's

00:15:42,630 --> 00:15:48,000
a Python level abstraction so yes you

00:15:45,510 --> 00:15:51,150
can do it from Django you can do it from

00:15:48,000 --> 00:15:52,800
the web server which is the way so as a

00:15:51,150 --> 00:15:54,870
bit of background charles runs as two

00:15:52,800 --> 00:15:57,510
processes usually daphne which is a

00:15:54,870 --> 00:15:59,400
server that takes HTTP WebSocket to make

00:15:57,510 --> 00:16:01,590
them into messages on the channel layer

00:15:59,400 --> 00:16:03,780
and then Django reads off the channel

00:16:01,590 --> 00:16:05,520
layer and then excuse those messages so

00:16:03,780 --> 00:16:06,510
it's kind of a separate process but you

00:16:05,520 --> 00:16:07,740
can have more than that you can have

00:16:06,510 --> 00:16:09,570
script two like you could have a

00:16:07,740 --> 00:16:11,400
management command that when you run it

00:16:09,570 --> 00:16:13,350
sends a channel message like if you want

00:16:11,400 --> 00:16:14,520
to have things on a scheduled task you

00:16:13,350 --> 00:16:16,080
can just make a cron that calls a

00:16:14,520 --> 00:16:17,760
managed script and just injects messages

00:16:16,080 --> 00:16:22,020
into channels so it's a very flexible

00:16:17,760 --> 00:16:25,320
way you can call it from and of course

00:16:22,020 --> 00:16:26,730
part of Django is that Django is very

00:16:25,320 --> 00:16:28,410
good at getting out of your way or

00:16:26,730 --> 00:16:29,940
letting you change things if you want to

00:16:28,410 --> 00:16:32,550
and so the very first prototype of this

00:16:29,940 --> 00:16:35,460
was built on Redis and the idea is that

00:16:32,550 --> 00:16:37,260
every single process has a local

00:16:35,460 --> 00:16:38,460
abstraction layer which is codenamed a

00:16:37,260 --> 00:16:40,200
SGI

00:16:38,460 --> 00:16:43,050
and you that's where you call those

00:16:40,200 --> 00:16:45,030
those API methods on and then they use

00:16:43,050 --> 00:16:47,280
Redis to communicate the first version

00:16:45,030 --> 00:16:49,530
was like this it works pretty well and

00:16:47,280 --> 00:16:51,360
this is still the basic two point we

00:16:49,530 --> 00:16:53,160
recommend but there are other options

00:16:51,360 --> 00:16:56,370
and because it's Django it's a pluggable

00:16:53,160 --> 00:16:58,170
back in so there's Redis if you feel

00:16:56,370 --> 00:17:00,330
like it there's posit shared memory

00:16:58,170 --> 00:17:02,730
segments if you ever feel like writing

00:17:00,330 --> 00:17:04,860
POSIX IPC code don't it's my

00:17:02,730 --> 00:17:06,839
recommendation it takes a while to get

00:17:04,860 --> 00:17:09,839
right but if you want to run everything

00:17:06,839 --> 00:17:11,220
on one machine shared memory is much

00:17:09,839 --> 00:17:12,750
faster than Redis because it just the

00:17:11,220 --> 00:17:15,030
true writes into a section of memory and

00:17:12,750 --> 00:17:16,980
then there's a sort of a simple Locker

00:17:15,030 --> 00:17:19,500
thing to read from it so this is a nice

00:17:16,980 --> 00:17:21,540
low air barrier of entry solution for

00:17:19,500 --> 00:17:23,820
you know on a vellum machine there's no

00:17:21,540 --> 00:17:26,520
extra - server Terron there's no extra

00:17:23,820 --> 00:17:27,900
overhead it's very fast but then if

00:17:26,520 --> 00:17:30,930
you're in production you want a bit more

00:17:27,900 --> 00:17:33,750
of an architecture and so if you want to

00:17:30,930 --> 00:17:35,310
say you can have more than one Redis

00:17:33,750 --> 00:17:37,740
because as I said before single points

00:17:35,310 --> 00:17:39,780
of failure very bad and so you can have

00:17:37,740 --> 00:17:41,610
a sharded Redis and then we're over you

00:17:39,780 --> 00:17:44,460
can have solid Redis with shared memory

00:17:41,610 --> 00:17:45,960
in front of it such that if a process is

00:17:44,460 --> 00:17:47,280
local it will go just through the memory

00:17:45,960 --> 00:17:49,860
if it's on different machine it goes

00:17:47,280 --> 00:17:51,330
through the memory into Redis out for

00:17:49,860 --> 00:17:53,520
the other memory into other machine and

00:17:51,330 --> 00:17:55,890
this just is in channels right now you

00:17:53,520 --> 00:17:58,290
can just use this and so this is kind of

00:17:55,890 --> 00:17:59,730
the solution to well at scale you don't

00:17:58,290 --> 00:18:01,710
want to have everything going into the

00:17:59,730 --> 00:18:03,510
network as I said before that's a huge

00:18:01,710 --> 00:18:06,120
like overflow issue with it with the

00:18:03,510 --> 00:18:08,310
your connection but you also don't want

00:18:06,120 --> 00:18:11,010
everything on one machine to the

00:18:08,310 --> 00:18:14,190
architecture like this let you make that

00:18:11,010 --> 00:18:16,650
balance and moreover the specification

00:18:14,190 --> 00:18:17,850
is a actually fully specified there's a

00:18:16,650 --> 00:18:20,390
real document for this and with like

00:18:17,850 --> 00:18:22,590
must and should and everything and

00:18:20,390 --> 00:18:24,390
that's good right

00:18:22,590 --> 00:18:26,640
and second of all it's very flexible

00:18:24,390 --> 00:18:29,250
like the API is deliberately just enough

00:18:26,640 --> 00:18:30,930
that you can if you want to write it

00:18:29,250 --> 00:18:31,740
back and that fits your deployments and

00:18:30,930 --> 00:18:33,930
your needs

00:18:31,740 --> 00:18:36,720
this still sits within the specification

00:18:33,930 --> 00:18:38,550
the idea being that at large scale the

00:18:36,720 --> 00:18:40,890
best person who knows about going

00:18:38,550 --> 00:18:42,300
structure is you and so the

00:18:40,890 --> 00:18:44,100
flexibilities are there for when you as

00:18:42,300 --> 00:18:46,050
you scale up as you get bigger you can

00:18:44,100 --> 00:18:47,220
take or chance to rise and mutate it to

00:18:46,050 --> 00:18:49,590
your will there's no need to be locked

00:18:47,220 --> 00:18:51,840
into a certain solution if you're

00:18:49,590 --> 00:18:54,450
curious have a lot of time

00:18:51,840 --> 00:18:57,600
the specifications here it's about 20

00:18:54,450 --> 00:18:59,190
pages long so good luck but it's it's a

00:18:57,600 --> 00:19:02,430
it's a good like Sunday night read trust

00:18:59,190 --> 00:19:03,690
me and so that's kind of the low level

00:19:02,430 --> 00:19:06,360
part of channels and that's what is

00:19:03,690 --> 00:19:09,120
codenamed ASG I and on top of that sits

00:19:06,360 --> 00:19:12,690
this sort of like nice abstraction layer

00:19:09,120 --> 00:19:14,520
that is for Jango so channels is very

00:19:12,690 --> 00:19:15,930
much a sort of wrapper around these

00:19:14,520 --> 00:19:17,790
lower level operations so I showed you

00:19:15,930 --> 00:19:19,830
this for those five things before like

00:19:17,790 --> 00:19:22,950
you know send receive group ad group

00:19:19,830 --> 00:19:25,860
remove and channels is very much the

00:19:22,950 --> 00:19:28,230
Jango nicety layer around all this stuff

00:19:25,860 --> 00:19:30,300
it's like part of a larger whole to show

00:19:28,230 --> 00:19:31,590
you what that large of hole is channels

00:19:30,300 --> 00:19:34,260
is currently five packages

00:19:31,590 --> 00:19:35,610
this may seem slightly daunting slash

00:19:34,260 --> 00:19:38,490
insane it makes a lot of sense

00:19:35,610 --> 00:19:40,140
so channels is the django integration

00:19:38,490 --> 00:19:42,120
and this is what a lot of you will

00:19:40,140 --> 00:19:44,160
interact with on a daily basis and never

00:19:42,120 --> 00:19:46,830
touch anything else on this slide but

00:19:44,160 --> 00:19:48,990
Daphne is a separate server that

00:19:46,830 --> 00:19:50,880
understands the channels protocol so

00:19:48,990 --> 00:19:52,500
when you actually do run server on

00:19:50,880 --> 00:19:54,840
channels it just runs Daphne for you

00:19:52,500 --> 00:19:57,870
it's kind of like jewnicorn but a SGI

00:19:54,840 --> 00:19:59,430
not WSGI and that sort of handles all

00:19:57,870 --> 00:20:02,190
the termination of WebSockets all the

00:19:59,430 --> 00:20:03,780
simulation of HTTP and then just send us

00:20:02,190 --> 00:20:05,640
things on a known format to channel

00:20:03,780 --> 00:20:07,440
there so that's sort of how the real

00:20:05,640 --> 00:20:10,470
world has talked to and you you can

00:20:07,440 --> 00:20:12,630
scale that part of this isn't part of

00:20:10,470 --> 00:20:14,250
the system differently to the channels

00:20:12,630 --> 00:20:16,230
part so if you have a lot of connections

00:20:14,250 --> 00:20:17,610
but not a lot of work you have a lot

00:20:16,230 --> 00:20:19,980
more Daphne's and you have channel

00:20:17,610 --> 00:20:21,570
workers you have a lot of sort of work

00:20:19,980 --> 00:20:23,340
going on the very heavy web but very few

00:20:21,570 --> 00:20:25,440
connections you can scale the workers

00:20:23,340 --> 00:20:27,600
and not Daphne so play flexible in that

00:20:25,440 --> 00:20:29,610
sense then underneath those hit the

00:20:27,600 --> 00:20:32,070
channel their implementations and so the

00:20:29,610 --> 00:20:34,140
bottom three things here as he Redis is

00:20:32,070 --> 00:20:37,110
the Redis back-end I mentioned before as

00:20:34,140 --> 00:20:39,120
he IPC is the posited memory back-end

00:20:37,110 --> 00:20:41,400
and as you RAF is a common thing that

00:20:39,120 --> 00:20:43,620
with inherit from that also carries N in

00:20:41,400 --> 00:20:45,660
memory back in for like unit tests and

00:20:43,620 --> 00:20:48,450
that kind of stuff and together they are

00:20:45,660 --> 00:20:49,770
just what you as the important the

00:20:48,450 --> 00:20:51,690
project and selling for like settings

00:20:49,770 --> 00:20:54,780
use the writers back-end host this is

00:20:51,690 --> 00:20:56,700
the host list encryption key here go and

00:20:54,780 --> 00:20:58,110
it solves the rest of it for you if you

00:20:56,700 --> 00:21:00,450
want to you can subclass them or make

00:20:58,110 --> 00:21:01,530
your own like their packages because you

00:21:00,450 --> 00:21:03,810
can want your own one if you want to

00:21:01,530 --> 00:21:05,420
write one based on mq p or some other

00:21:03,810 --> 00:21:08,280
format feel free

00:21:05,420 --> 00:21:10,020
and so what the child's provide like

00:21:08,280 --> 00:21:12,810
what is this wrapper in Django giving

00:21:10,020 --> 00:21:15,930
you so first of all it gives you routing

00:21:12,810 --> 00:21:18,270
and so when you send things on channels

00:21:15,930 --> 00:21:20,040
cows have names so like you know when I

00:21:18,270 --> 00:21:22,440
connect to a socket it's you I get a

00:21:20,040 --> 00:21:24,780
message on WebSocket dot connect when I

00:21:22,440 --> 00:21:27,510
send a message to a Django instance I

00:21:24,780 --> 00:21:29,670
get looks like it got receive and by

00:21:27,510 --> 00:21:30,960
default the low that likely is that you

00:21:29,670 --> 00:21:32,820
receive messages said oh yeah

00:21:30,960 --> 00:21:34,740
you've got a message on receive content

00:21:32,820 --> 00:21:36,510
was this what chance would write there's

00:21:34,740 --> 00:21:38,850
a routing layer so like you say well I

00:21:36,510 --> 00:21:40,860
have a year-olds pie like file could

00:21:38,850 --> 00:21:43,140
routing dot pie they say well for this

00:21:40,860 --> 00:21:45,510
channel call this function or for

00:21:43,140 --> 00:21:47,430
connections on this path for this

00:21:45,510 --> 00:21:50,040
function and so not only can you route

00:21:47,430 --> 00:21:51,600
different channels different places but

00:21:50,040 --> 00:21:53,490
you can route by URL path you can route

00:21:51,600 --> 00:21:55,320
by other attributes in the message if

00:21:53,490 --> 00:21:57,330
you want to can route by method and I

00:21:55,320 --> 00:21:58,530
sure why you want to but you can and so

00:21:57,330 --> 00:22:00,300
it's a very flexible way of doing all

00:21:58,530 --> 00:22:02,070
this stuff and as we'll see you later on

00:22:00,300 --> 00:22:04,950
the presentation is useful beyond

00:22:02,070 --> 00:22:06,930
incoming messages consumers which is a

00:22:04,950 --> 00:22:09,060
standardized way of writing message

00:22:06,930 --> 00:22:12,060
handling so the idea with channels is

00:22:09,060 --> 00:22:14,220
very much to be as familiar and quote

00:22:12,060 --> 00:22:16,320
quote Django ish as possible and so a

00:22:14,220 --> 00:22:18,330
consumer is a standardized way of

00:22:16,320 --> 00:22:20,940
handling messages that looks just like a

00:22:18,330 --> 00:22:23,520
view a view takes a request and returns

00:22:20,940 --> 00:22:25,890
a response a consumer takes a message

00:22:23,520 --> 00:22:28,350
and send 0 or more messages that's all

00:22:25,890 --> 00:22:30,210
they do and you've got you tie them into

00:22:28,350 --> 00:22:32,760
routing like you tie views into URLs at

00:22:30,210 --> 00:22:34,230
PI and Django handles the event looking

00:22:32,760 --> 00:22:35,970
for you handle the management handles

00:22:34,230 --> 00:22:37,860
error handling and handles debug logging

00:22:35,970 --> 00:22:39,330
all that's done for you and all you have

00:22:37,860 --> 00:22:41,220
to write these nice single contained

00:22:39,330 --> 00:22:43,740
functions of when you get a WebSocket

00:22:41,220 --> 00:22:45,960
message do this when someone connects

00:22:43,740 --> 00:22:47,550
haven't this group and there'd be some

00:22:45,960 --> 00:22:50,610
exams later but that's kind of the basic

00:22:47,550 --> 00:22:53,430
idea and then again some hard problem

00:22:50,610 --> 00:22:56,640
sessions like one of the things that I

00:22:53,430 --> 00:22:57,660
do by having the fact like when you send

00:22:56,640 --> 00:22:59,940
the messages in the channels from

00:22:57,660 --> 00:23:02,310
WebSockets they go into this pool and

00:22:59,940 --> 00:23:04,530
then one of the servers plucks them out

00:23:02,310 --> 00:23:06,540
and runs them which means that if I send

00:23:04,530 --> 00:23:07,680
three messages in different servers

00:23:06,540 --> 00:23:10,260
might pluck them out and run them at

00:23:07,680 --> 00:23:11,670
different times like I might send one

00:23:10,260 --> 00:23:15,180
message to set my username that go to

00:23:11,670 --> 00:23:17,100
server a another one to send the measure

00:23:15,180 --> 00:23:18,490
the other server B and say one thing

00:23:17,100 --> 00:23:21,520
channel provides is

00:23:18,490 --> 00:23:23,350
a session framework for channels so like

00:23:21,520 --> 00:23:25,420
sessions for HTTP you would have

00:23:23,350 --> 00:23:27,970
sessions on a WebSocket that says okay

00:23:25,420 --> 00:23:29,920
set this WebSockets username to this and

00:23:27,970 --> 00:23:32,050
then when another thing runs it can read

00:23:29,920 --> 00:23:34,059
in the session and even though it is a

00:23:32,050 --> 00:23:35,620
different machine via the Django

00:23:34,059 --> 00:23:38,020
sessions framework it can still read the

00:23:35,620 --> 00:23:40,470
data at the cross and this also comes

00:23:38,020 --> 00:23:43,420
with utilities for enforcing

00:23:40,470 --> 00:23:45,640
serialization ordering so if you say

00:23:43,420 --> 00:23:47,230
send two messages you can tell channels

00:23:45,640 --> 00:23:48,940
make sure that this one has finished

00:23:47,230 --> 00:23:50,650
running first before you run the other

00:23:48,940 --> 00:23:52,630
one otherwise I've run in parallel which

00:23:50,650 --> 00:23:55,330
is faster but sometimes can cause some

00:23:52,630 --> 00:23:58,390
very interesting race conditions it has

00:23:55,330 --> 00:24:00,880
authentication if you want you set one

00:23:58,390 --> 00:24:03,880
thing like one lying on a consumer or a

00:24:00,880 --> 00:24:06,220
class and it automatically takes the

00:24:03,880 --> 00:24:08,110
cookies from an HTTP request from the

00:24:06,220 --> 00:24:10,059
WebSocket connection turns it into a

00:24:08,110 --> 00:24:12,790
Django user and stores it on the session

00:24:10,059 --> 00:24:15,100
on the channel and so WebSockets just

00:24:12,790 --> 00:24:16,870
come with users that the same uses as

00:24:15,100 --> 00:24:18,790
your rest of your code users you can

00:24:16,870 --> 00:24:20,350
give the same stuff on them you can ask

00:24:18,790 --> 00:24:22,660
for permission checks all the same and

00:24:20,350 --> 00:24:24,700
so by default you get good

00:24:22,660 --> 00:24:26,620
authentication and permission checking

00:24:24,700 --> 00:24:28,990
on WebSockets which is something a lot

00:24:26,620 --> 00:24:30,250
of frameworks don't provide then finally

00:24:28,990 --> 00:24:32,830
there's some handy helpers around it

00:24:30,250 --> 00:24:35,020
feels like I said run server inch when

00:24:32,830 --> 00:24:37,000
Charles is installed just runs a run

00:24:35,020 --> 00:24:38,980
server to handle web sockets like run

00:24:37,000 --> 00:24:39,880
server is suddenly this thing that runs

00:24:38,980 --> 00:24:41,580
things in parallel

00:24:39,880 --> 00:24:43,990
handles WebSockets is fully flexible

00:24:41,580 --> 00:24:46,600
there is a run worth command that wraps

00:24:43,990 --> 00:24:48,130
running a process that runs commands for

00:24:46,600 --> 00:24:50,590
you and a lot of this stuff is covered

00:24:48,130 --> 00:24:52,390
in much more detail in the rather

00:24:50,590 --> 00:24:53,590
extensive documentation I've been a lot

00:24:52,390 --> 00:24:57,940
of time writing so if you're interested

00:24:53,590 --> 00:24:59,220
that's all there but let's try and have

00:24:57,940 --> 00:25:02,740
it more of a concrete example let's

00:24:59,220 --> 00:25:05,650
let's look at making a chat because it's

00:25:02,740 --> 00:25:07,510
the very easiest thing to show off but

00:25:05,650 --> 00:25:09,820
it's the shortest one so this is all you

00:25:07,510 --> 00:25:13,059
need to do a chat in channels as I said

00:25:09,820 --> 00:25:14,530
it's six lines you say when someone

00:25:13,059 --> 00:25:18,280
connects you add them to a group called

00:25:14,530 --> 00:25:19,390
chat when someone sends a message you

00:25:18,280 --> 00:25:22,179
send a message to that group

00:25:19,390 --> 00:25:23,920
when someone disconnects from the group

00:25:22,179 --> 00:25:25,330
the last two lines are by the way

00:25:23,920 --> 00:25:27,040
optional there to make it more efficient

00:25:25,330 --> 00:25:29,050
so really it's four lines headed Lieber

00:25:27,040 --> 00:25:31,840
yeah I like something nice clean code

00:25:29,050 --> 00:25:32,509
and so you write these lines in a

00:25:31,840 --> 00:25:34,849
consumers

00:25:32,509 --> 00:25:37,969
file you hook them up in routing like

00:25:34,849 --> 00:25:39,829
this that's it when you launch one

00:25:37,969 --> 00:25:41,479
server the chat will work yet to write

00:25:39,829 --> 00:25:46,429
some JavaScript but you know that's easy

00:25:41,479 --> 00:25:47,719
right no no a blob was of that and in

00:25:46,429 --> 00:25:49,639
fact you can just to do WebSocket dial

00:25:47,719 --> 00:25:51,049
connect it's easy these days so that's

00:25:49,639 --> 00:25:53,559
that and that's the simplicity of a

00:25:51,049 --> 00:25:56,179
basic Charles chat example and of course

00:25:53,559 --> 00:25:57,469
it wouldn't be Django without an easy

00:25:56,179 --> 00:25:59,509
way to do that so there's of course

00:25:57,469 --> 00:26:01,969
class-based consumers where you go well

00:25:59,509 --> 00:26:03,079
that pattern of connecting and joining a

00:26:01,969 --> 00:26:05,149
group and leaving a group is actually

00:26:03,079 --> 00:26:06,919
really common and so you just inherit

00:26:05,149 --> 00:26:09,139
from my topic you say well connection

00:26:06,919 --> 00:26:11,509
groups is chat and that means that this

00:26:09,139 --> 00:26:13,039
generic consumer will handle joining the

00:26:11,509 --> 00:26:14,839
group when you connect leaving the group

00:26:13,039 --> 00:26:16,819
when you disconnect and then you used to

00:26:14,839 --> 00:26:19,549
find a receive method it says well when

00:26:16,819 --> 00:26:22,190
I receive some messages just run this

00:26:19,549 --> 00:26:24,649
group send only yeah that's now that's

00:26:22,190 --> 00:26:26,149
interesting Lee still sits lines but I

00:26:24,649 --> 00:26:28,159
say six or more readable lines and more

00:26:26,149 --> 00:26:29,599
reusable lines and then again with

00:26:28,159 --> 00:26:31,699
routing the nice thing is because a

00:26:29,599 --> 00:26:34,069
clasp is consumer it knows what channels

00:26:31,699 --> 00:26:36,319
it wants you just say route class and

00:26:34,069 --> 00:26:39,079
the routing extract the channels from

00:26:36,319 --> 00:26:40,279
the consumer and so consumer tells the

00:26:39,079 --> 00:26:42,859
routing framework hi

00:26:40,279 --> 00:26:44,719
I listened on WebSocket connect looks

00:26:42,859 --> 00:26:46,399
like it receive looks like a disconnect

00:26:44,719 --> 00:26:48,679
and then routing good okay and I just

00:26:46,399 --> 00:26:52,339
pulls an out for you so it's similar in

00:26:48,679 --> 00:26:53,649
that sense and then of course if you'd

00:26:52,339 --> 00:26:55,940
like a full body example that has

00:26:53,649 --> 00:26:57,919
multiple chat channels for your written

00:26:55,940 --> 00:27:01,069
JavaScript other things authentication

00:26:57,919 --> 00:27:02,479
this is a repo full of fully worked

00:27:01,069 --> 00:27:03,919
examples of this and two other things

00:27:02,479 --> 00:27:06,379
that you can go and look at and play

00:27:03,919 --> 00:27:09,109
around with it has documentation lots of

00:27:06,379 --> 00:27:11,329
comments and it even has read Me's with

00:27:09,109 --> 00:27:12,739
fun tasks to try of like challenges for

00:27:11,329 --> 00:27:13,849
you to do so if you're that kind of

00:27:12,739 --> 00:27:18,259
program it's a real good way of doing

00:27:13,849 --> 00:27:20,509
that stuff now normally my next sample

00:27:18,259 --> 00:27:22,449
is a live blog but I was bored last week

00:27:20,509 --> 00:27:24,559
so it's not that anymore

00:27:22,449 --> 00:27:26,479
something people have been asking for a

00:27:24,559 --> 00:27:28,339
while in channels is a more high-level

00:27:26,479 --> 00:27:30,139
abstraction going back to meet you'll

00:27:28,339 --> 00:27:31,940
one of the things meets your did was

00:27:30,139 --> 00:27:33,859
well we had this really easy way to like

00:27:31,940 --> 00:27:35,029
you know you move this slider web page

00:27:33,859 --> 00:27:36,379
and it imagine him as the other ones

00:27:35,029 --> 00:27:39,139
appear that's great right like channel

00:27:36,379 --> 00:27:41,959
yeah so last week a wrote this and so

00:27:39,139 --> 00:27:43,549
channels now has full multiplexing which

00:27:41,959 --> 00:27:45,379
means it has a built in way of sending

00:27:43,549 --> 00:27:46,010
different streams down the same

00:27:45,379 --> 00:27:48,049
WebSocket

00:27:46,010 --> 00:27:50,299
and it has data binding and data binding

00:27:48,049 --> 00:27:54,260
is that thing where you move the sliders

00:27:50,299 --> 00:27:56,000
and the other stuff moves so you was

00:27:54,260 --> 00:27:57,710
this of about seven eight lines eight

00:27:56,000 --> 00:28:00,559
lines of code you can do this now you

00:27:57,710 --> 00:28:02,990
just go okay I have a data binding on my

00:28:00,559 --> 00:28:04,160
model it sends down a stream which is

00:28:02,990 --> 00:28:05,929
sort of that thing inside WebSocket

00:28:04,160 --> 00:28:09,200
could get vowel there's a permission

00:28:05,929 --> 00:28:12,890
check because security so I have done I

00:28:09,200 --> 00:28:15,200
have done be very secure return true

00:28:12,890 --> 00:28:17,780
you know top-notch style passed any PC I

00:28:15,200 --> 00:28:18,860
ordered it and so there's such a

00:28:17,780 --> 00:28:21,020
permission is for inbound

00:28:18,860 --> 00:28:23,210
so like when somebody says oh my user

00:28:21,020 --> 00:28:25,700
change the slider it goes okay how they

00:28:23,210 --> 00:28:27,530
do this yes true and then the group

00:28:25,700 --> 00:28:29,600
names has a bounce it says well when I

00:28:27,530 --> 00:28:32,090
get a change who do I send it to now

00:28:29,600 --> 00:28:34,160
here it's hard-coded to just be a fixed

00:28:32,090 --> 00:28:36,650
string but say you're doing a live blog

00:28:34,160 --> 00:28:38,660
you would say oh send it to live blog

00:28:36,650 --> 00:28:41,240
dot idea of live blog and that way

00:28:38,660 --> 00:28:43,520
people could connect to this binding

00:28:41,240 --> 00:28:46,669
stream as label there on and the rest of

00:28:43,520 --> 00:28:48,080
it handles for you and because I haven't

00:28:46,669 --> 00:28:51,049
done this in many years let's do it like

00:28:48,080 --> 00:28:52,400
demo well no it's a keynote so here's

00:28:51,049 --> 00:28:55,370
one I prepared earlier well it's

00:28:52,400 --> 00:28:58,040
perfectly C say we're paired and so this

00:28:55,370 --> 00:29:00,410
is that code you just saw with a few

00:28:58,040 --> 00:29:03,410
more comments because I'm nice running

00:29:00,410 --> 00:29:05,750
and so you know you do the thing and the

00:29:03,410 --> 00:29:07,820
sliders move automatically there is no

00:29:05,750 --> 00:29:09,980
extra code on the Django site other than

00:29:07,820 --> 00:29:12,950
what I just showed you the better part

00:29:09,980 --> 00:29:15,049
is that it's hooked into signals so any

00:29:12,950 --> 00:29:17,720
change you make I can just go in here

00:29:15,049 --> 00:29:19,460
and say oh this is now one and as soon

00:29:17,720 --> 00:29:21,860
as I hit save that slider moves in the

00:29:19,460 --> 00:29:23,720
background it's a similar stem oh I can

00:29:21,860 --> 00:29:25,220
do because like them is a very risky but

00:29:23,720 --> 00:29:27,049
that's the simplest that's sort of how

00:29:25,220 --> 00:29:29,410
you get from this right like you can

00:29:27,049 --> 00:29:29,410
just have

00:29:32,990 --> 00:29:37,799
and so that's I think the the power

00:29:36,450 --> 00:29:39,450
channels and like one of the things I

00:29:37,799 --> 00:29:41,160
always struggled with was where's your

00:29:39,450 --> 00:29:42,929
channels sit on that spectrum and like

00:29:41,160 --> 00:29:44,820
for a long times like well really

00:29:42,929 --> 00:29:46,559
somebody else should write this package

00:29:44,820 --> 00:29:48,809
because it's a bit too opinionated for

00:29:46,559 --> 00:29:50,250
Django and then there is a well Django's

00:29:48,809 --> 00:29:51,660
job as a framework is to be a bit

00:29:50,250 --> 00:29:54,240
opinionated and to have a common pattern

00:29:51,660 --> 00:29:56,790
and so having this in there let you do

00:29:54,240 --> 00:29:58,470
and I will put this out the binding

00:29:56,790 --> 00:29:59,910
framework is fully sub class of all it

00:29:58,470 --> 00:30:01,440
is not just WebSockets you can do

00:29:59,910 --> 00:30:02,700
whatever you like with it but having a

00:30:01,440 --> 00:30:04,770
nice common one in there I think will

00:30:02,700 --> 00:30:06,900
really help jangula liking it you can go

00:30:04,770 --> 00:30:08,910
away today and write a live blog in

00:30:06,900 --> 00:30:11,160
about ten lines of code that just uses

00:30:08,910 --> 00:30:13,500
this framework and moreover I think

00:30:11,160 --> 00:30:15,059
about next week I will have a basic

00:30:13,500 --> 00:30:16,440
JavaScript side wrapper that sort of

00:30:15,059 --> 00:30:19,470
wraps some of these operations for you

00:30:16,440 --> 00:30:20,910
that it's very framework agnostic I do

00:30:19,470 --> 00:30:23,580
not wish to pick a side in the jowls pit

00:30:20,910 --> 00:30:25,140
Wars but it lets you do things like has

00:30:23,580 --> 00:30:27,000
the stream separation for you and does

00:30:25,140 --> 00:30:31,110
reconnection for you that be part of it

00:30:27,000 --> 00:30:33,390
as well and so again that thing you just

00:30:31,110 --> 00:30:35,730
saw is in the examples repo with more

00:30:33,390 --> 00:30:38,220
comments and challenges and things for

00:30:35,730 --> 00:30:39,630
to do as well one thing to show you is

00:30:38,220 --> 00:30:42,360
that you can change the names I and

00:30:39,630 --> 00:30:44,309
those change to it's fun and so this is

00:30:42,360 --> 00:30:45,450
kind of you know I pushed out this

00:30:44,309 --> 00:30:47,669
morning because I thought I should have

00:30:45,450 --> 00:30:49,380
something to show off here it's pretty

00:30:47,669 --> 00:30:51,090
it's pretty stable but it's not entirely

00:30:49,380 --> 00:30:54,240
finished yet the jobs whose stuff is

00:30:51,090 --> 00:30:55,530
still to come but it is kind of like one

00:30:54,240 --> 00:30:56,760
of the last things before channels one

00:30:55,530 --> 00:30:58,830
point in all its like getting this kind

00:30:56,760 --> 00:31:00,660
of stuff in place and hopefully when we

00:30:58,830 --> 00:31:03,150
when we land there we're gonna have good

00:31:00,660 --> 00:31:05,070
support for like things you'll stir you

00:31:03,150 --> 00:31:06,960
want to do like WebSockets and data

00:31:05,070 --> 00:31:08,790
binding and that kind of stuff but also

00:31:06,960 --> 00:31:11,490
good low levels of pour for other

00:31:08,790 --> 00:31:14,010
protocols let's look at that in a little

00:31:11,490 --> 00:31:16,169
bit more detail and so I mentioned at

00:31:14,010 --> 00:31:18,179
the start of the presentation that I was

00:31:16,169 --> 00:31:19,950
like oh you can do email and chance and

00:31:18,179 --> 00:31:20,460
all these kind of things MQTT what does

00:31:19,950 --> 00:31:23,700
that mean

00:31:20,460 --> 00:31:26,010
well if we look at the way channels

00:31:23,700 --> 00:31:27,870
works before it makes things into single

00:31:26,010 --> 00:31:30,090
events like channels is an invented

00:31:27,870 --> 00:31:31,710
system that's all it does and so for

00:31:30,090 --> 00:31:32,760
WebSockets it says well the events are

00:31:31,710 --> 00:31:35,429
connect receive

00:31:32,760 --> 00:31:36,750
disconnect understand pretty simple and

00:31:35,429 --> 00:31:38,490
you can do the same for other protocols

00:31:36,750 --> 00:31:41,730
like emails will you send them and

00:31:38,490 --> 00:31:44,190
receive them so we could have a server a

00:31:41,730 --> 00:31:45,270
bit like Daphne but the email that when

00:31:44,190 --> 00:31:46,210
someone sends you an email

00:31:45,270 --> 00:31:47,590
puts them

00:31:46,210 --> 00:31:49,750
John to a channel called email dot

00:31:47,590 --> 00:31:51,250
receive and then another channel will

00:31:49,750 --> 00:31:53,230
email that send where you put messages

00:31:51,250 --> 00:31:55,330
and they get delivered and then suddenly

00:31:53,230 --> 00:31:58,150
you have the same thing I just showed

00:31:55,330 --> 00:31:59,440
you four WebSockets but for email you

00:31:58,150 --> 00:32:01,450
have routing on email you can route by

00:31:59,440 --> 00:32:02,710
domain you can route by subject you can

00:32:01,450 --> 00:32:05,380
do all this stuff if you have consumers

00:32:02,710 --> 00:32:07,930
on email and suddenly you have inside

00:32:05,380 --> 00:32:10,630
Jango an email answering system that can

00:32:07,930 --> 00:32:12,160
live in Apps you know next to your other

00:32:10,630 --> 00:32:14,350
code if you want to be you don't have to

00:32:12,160 --> 00:32:16,060
do this which is some like slack slack

00:32:14,350 --> 00:32:17,590
has messages you receive them you send

00:32:16,060 --> 00:32:19,810
them you have things like join and

00:32:17,590 --> 00:32:21,490
receive join in leave notifications you

00:32:19,810 --> 00:32:24,990
do that kind of system Lee as well amp

00:32:21,490 --> 00:32:27,220
you mqtt which is a very simplistic

00:32:24,990 --> 00:32:29,260
publish/subscribe protocol for Internet

00:32:27,220 --> 00:32:31,300
of Things again like you can implement a

00:32:29,260 --> 00:32:32,860
server that sits there on the boundary

00:32:31,300 --> 00:32:34,990
of your Django installation and

00:32:32,860 --> 00:32:37,480
translates these external protocols into

00:32:34,990 --> 00:32:39,730
something that understands some basic

00:32:37,480 --> 00:32:42,340
their channels format internally and

00:32:39,730 --> 00:32:44,890
what is kind of doing is channels is not

00:32:42,340 --> 00:32:47,680
this generic messaging task solution it

00:32:44,890 --> 00:32:49,570
is very much a coordination layer for

00:32:47,680 --> 00:32:52,120
doing messaging between servers like

00:32:49,570 --> 00:32:54,580
though writing complex systems in the

00:32:52,120 --> 00:32:56,470
age of the modern web that work across a

00:32:54,580 --> 00:32:58,060
cluster they let you write code in a

00:32:56,470 --> 00:33:00,190
sensible way that won't dead loss all

00:32:58,060 --> 00:33:03,880
that kind of stuff and it applies beyond

00:33:00,190 --> 00:33:05,080
just WebSockets and so the process of

00:33:03,880 --> 00:33:07,990
doing some of this it's not too

00:33:05,080 --> 00:33:09,520
difficult and so if you are interested

00:33:07,990 --> 00:33:11,140
in doing one of these things please

00:33:09,520 --> 00:33:12,460
first of all email me I will happily

00:33:11,140 --> 00:33:15,310
give you twenty pages of advice probably

00:33:12,460 --> 00:33:17,800
I can type very fast but essentially

00:33:15,310 --> 00:33:19,600
what you do is while you're Django code

00:33:17,800 --> 00:33:21,460
is so synchronous the idea is that

00:33:19,600 --> 00:33:23,560
channels is the binding glue between

00:33:21,460 --> 00:33:24,910
asynchronous and synchronous code so you

00:33:23,560 --> 00:33:26,650
can write except for an asynchronous

00:33:24,910 --> 00:33:28,690
process that handles the protocol in

00:33:26,650 --> 00:33:32,140
question let's say we're doing a no

00:33:28,690 --> 00:33:33,640
slack you know it has a nice async i/o

00:33:32,140 --> 00:33:35,050
based process that uses lots of long

00:33:33,640 --> 00:33:37,750
live connections and listens to the API

00:33:35,050 --> 00:33:39,430
and stuff like that and then using

00:33:37,750 --> 00:33:41,410
channels you just tie in this

00:33:39,430 --> 00:33:43,570
implementation with dot send and not

00:33:41,410 --> 00:33:45,400
receive many on the channel layer to the

00:33:43,570 --> 00:33:47,230
rest of your service and all the

00:33:45,400 --> 00:33:49,720
coordination and scheduling is done for

00:33:47,230 --> 00:33:52,540
you by channels and so initially you say

00:33:49,720 --> 00:33:54,310
well you make a server you make sure it

00:33:52,540 --> 00:33:56,020
takes a channel layer object that has

00:33:54,310 --> 00:33:57,280
these send and receive methods on it

00:33:56,020 --> 00:33:59,860
there's a standard for that as I said

00:33:57,280 --> 00:34:00,519
before and then you just make sure it

00:33:59,860 --> 00:34:03,339
sends two in front

00:34:00,519 --> 00:34:05,589
and then with that kind of effort you

00:34:03,339 --> 00:34:06,940
suddenly have this almost networking

00:34:05,589 --> 00:34:08,859
like protocol that you can just use to

00:34:06,940 --> 00:34:10,270
coordinate between processes like if you

00:34:08,859 --> 00:34:12,069
choose multi-processing in python it's

00:34:10,270 --> 00:34:15,250
like that but without the sort of

00:34:12,069 --> 00:34:16,770
spawning element in the way and then

00:34:15,250 --> 00:34:19,839
once you've written this server and

00:34:16,770 --> 00:34:21,639
presumably you have our hope at least

00:34:19,839 --> 00:34:22,690
have some kind of scrawled speck on the

00:34:21,639 --> 00:34:24,789
back of a napkin or what that must just

00:34:22,690 --> 00:34:26,319
mean I recommend at least something you

00:34:24,789 --> 00:34:28,750
can then take that and then implement

00:34:26,319 --> 00:34:30,760
consumers against it so if you said okay

00:34:28,750 --> 00:34:32,109
I have a sniper server and that sends

00:34:30,760 --> 00:34:34,510
slap dot receive

00:34:32,109 --> 00:34:36,819
slap joined you can then run consumers

00:34:34,510 --> 00:34:39,059
on the channels that will receive okay

00:34:36,819 --> 00:34:41,649
both receive messages always have a

00:34:39,059 --> 00:34:44,169
username they always have a body text

00:34:41,649 --> 00:34:45,940
and like you you have the specification

00:34:44,169 --> 00:34:47,529
that you understand on both sides and

00:34:45,940 --> 00:34:48,940
then you can write consumers against it

00:34:47,529 --> 00:34:50,859
this could be different teams your to

00:34:48,940 --> 00:34:52,470
two specifications are a great way of

00:34:50,859 --> 00:34:55,720
establishing team boundaries in

00:34:52,470 --> 00:34:59,500
companies and well the other things if

00:34:55,720 --> 00:35:02,230
you have sort of very different channels

00:34:59,500 --> 00:35:03,970
so like you know by default Jango under

00:35:02,230 --> 00:35:06,099
channels runs in a big blob of stuff

00:35:03,970 --> 00:35:07,630
where everything has everything you can

00:35:06,099 --> 00:35:09,339
actually save individual servers well

00:35:07,630 --> 00:35:10,960
this is the beefy server just run these

00:35:09,339 --> 00:35:12,220
channels this is the web server

00:35:10,960 --> 00:35:13,720
don't run the long live channels and

00:35:12,220 --> 00:35:15,520
other options on those things to sort of

00:35:13,720 --> 00:35:19,059
make the channels run of different

00:35:15,520 --> 00:35:20,559
servers if you want to and so if you

00:35:19,059 --> 00:35:22,539
look at the bigger picture at all of

00:35:20,559 --> 00:35:25,059
this you end up this sort of like this

00:35:22,539 --> 00:35:27,549
exploding diagram of wonderfulness aware

00:35:25,059 --> 00:35:31,390
like at the center sits ascii and we

00:35:27,549 --> 00:35:33,849
have HTTP we have django workers but

00:35:31,390 --> 00:35:35,349
also other protocols we part of the same

00:35:33,849 --> 00:35:37,270
system you can have a scheduler sending

00:35:35,349 --> 00:35:38,589
in events you can have custom daemons I

00:35:37,270 --> 00:35:41,619
do like thumbnailing for you and stuff

00:35:38,589 --> 00:35:44,170
like this and what this really I'm going

00:35:41,619 --> 00:35:46,900
for here is you know in the age of the

00:35:44,170 --> 00:35:48,760
modern web services and back-end

00:35:46,900 --> 00:35:51,430
services are no longer just a simple

00:35:48,760 --> 00:35:53,200
it's HTTP request/response if they are

00:35:51,430 --> 00:35:55,750
congratulations you have a nice site I

00:35:53,200 --> 00:35:56,950
love the idea of this some of my best

00:35:55,750 --> 00:35:59,289
projects of ones that like just static

00:35:56,950 --> 00:36:01,000
sites but increasingly bigger and more

00:35:59,289 --> 00:36:03,220
complex sites have a more complex

00:36:01,000 --> 00:36:05,609
architecture and one of the things I'm

00:36:03,220 --> 00:36:08,529
trying to do with channels is push a

00:36:05,609 --> 00:36:09,759
standardized solution for perfectionist

00:36:08,529 --> 00:36:11,650
with deadlines the idea of bringing

00:36:09,759 --> 00:36:13,780
Django's promise forwards into the

00:36:11,650 --> 00:36:15,280
future of well how do we solve these new

00:36:13,780 --> 00:36:17,440
problems in a way that you standardized

00:36:15,280 --> 00:36:19,690
and flexible and that will get out of

00:36:17,440 --> 00:36:21,580
your way when you need it to and it's

00:36:19,690 --> 00:36:23,770
very much a tool for you to use nothing

00:36:21,580 --> 00:36:26,440
in channels ships entirely finished it's

00:36:23,770 --> 00:36:27,910
kind of on purpose the idea is that it's

00:36:26,440 --> 00:36:30,130
very easy to just take it and finish it

00:36:27,910 --> 00:36:32,950
off the direction you want but it's the

00:36:30,130 --> 00:36:34,900
80% step it's 80% of all the work it's

00:36:32,950 --> 00:36:36,490
all the hard work done for you and then

00:36:34,900 --> 00:36:38,200
you can build on top of it I mean if as

00:36:36,490 --> 00:36:40,000
you grow if you want you can

00:36:38,200 --> 00:36:43,960
increasingly remove parts of it and put

00:36:40,000 --> 00:36:45,460
over versions in and there's more to be

00:36:43,960 --> 00:36:48,070
done right channels is going to hit one

00:36:45,460 --> 00:36:49,600
point not pretty soon the application to

00:36:48,070 --> 00:36:51,850
be an official turn your project is on

00:36:49,600 --> 00:36:53,640
the way now I've got the DEP in with

00:36:51,850 --> 00:36:56,080
what official project means first of all

00:36:53,640 --> 00:36:57,580
and we will start some funding if you're

00:36:56,080 --> 00:36:58,900
interested in working on channels please

00:36:57,580 --> 00:37:01,900
come and talk to me here or other

00:36:58,900 --> 00:37:03,070
sprints we have as said crater at the

00:37:01,900 --> 00:37:05,470
start we have some funding from is

00:37:03,070 --> 00:37:08,620
either four channels a very nice number

00:37:05,470 --> 00:37:10,720
I'm fifty thousand dollars and it's in

00:37:08,620 --> 00:37:12,280
mark just four panels and so if you want

00:37:10,720 --> 00:37:14,440
to help maintain it or write new servers

00:37:12,280 --> 00:37:16,330
or do anything under the Sun brother we

00:37:14,440 --> 00:37:19,120
have funding to help give you for things

00:37:16,330 --> 00:37:21,070
like that as well and then I want to

00:37:19,120 --> 00:37:23,170
finally end on a bit of a look forward

00:37:21,070 --> 00:37:26,500
so if you think of a history of the web

00:37:23,170 --> 00:37:28,030
in 1995 you're probably a desktop

00:37:26,500 --> 00:37:30,100
application right the web is a very new

00:37:28,030 --> 00:37:31,660
thing there's like the sort of terrible

00:37:30,100 --> 00:37:34,660
McDonald's site with gifts it's about

00:37:31,660 --> 00:37:36,670
all the web is at this point in 2005 we

00:37:34,660 --> 00:37:38,200
are sort of in the dot-com age like your

00:37:36,670 --> 00:37:40,570
website you have a nice rounded corners

00:37:38,200 --> 00:37:41,950
and gradients it's really lovely and

00:37:40,570 --> 00:37:45,370
this is where Django is born right you

00:37:41,950 --> 00:37:46,450
know Django is born in 2005 in 2015

00:37:45,370 --> 00:37:48,580
we've moved on

00:37:46,450 --> 00:37:51,280
we now rich JavaScript websites we now

00:37:48,580 --> 00:37:53,740
mobile apps talking to API backends and

00:37:51,280 --> 00:37:55,720
then in another 10 years who knows where

00:37:53,740 --> 00:37:57,420
we'll be like it's this open question

00:37:55,720 --> 00:37:59,530
like if the current rate of progress

00:37:57,420 --> 00:38:02,010
things get more complicated like

00:37:59,530 --> 00:38:04,030
websites getting more complicated and

00:38:02,010 --> 00:38:05,500
part of the question I always ask

00:38:04,030 --> 00:38:08,860
channels is what are the goals of a

00:38:05,500 --> 00:38:10,330
framework like does Django adapt and

00:38:08,860 --> 00:38:12,910
move on with the times do we adapt to

00:38:10,330 --> 00:38:14,620
what a changing web means or do we stay

00:38:12,910 --> 00:38:18,060
and do a good job what we already do and

00:38:14,620 --> 00:38:21,250
I'm sure you can guess my opinion I am

00:38:18,060 --> 00:38:23,710
very much of the opinion that like we

00:38:21,250 --> 00:38:25,740
should keep advancing django and keep

00:38:23,710 --> 00:38:28,230
that promise of

00:38:25,740 --> 00:38:30,300
framework sections of deadlines for the

00:38:28,230 --> 00:38:32,430
modern web not just not just for the the

00:38:30,300 --> 00:38:34,760
old web in the previous web thank you

00:38:32,430 --> 00:38:34,760
very much

00:38:51,990 --> 00:38:56,800
so we have some time for questions let's

00:38:55,360 --> 00:39:11,170
come to the mics at the front you've a

00:38:56,800 --> 00:39:12,730
set of Thrones of the room so this is

00:39:11,170 --> 00:39:14,910
the thing like Django is built around

00:39:12,730 --> 00:39:16,900
relational databases and so

00:39:14,910 --> 00:39:18,310
unfortunately we don't have the

00:39:16,900 --> 00:39:20,140
advantage of a another thing to saw we

00:39:18,310 --> 00:39:22,660
can use now if you have another store

00:39:20,140 --> 00:39:24,280
that used the ORM abstraction which we

00:39:22,660 --> 00:39:25,690
have the specification for now it would

00:39:24,280 --> 00:39:27,760
also work against that like the admin

00:39:25,690 --> 00:39:29,610
does but it has ample yes post res

00:39:27,760 --> 00:39:32,530
killing right River overall all right

00:39:29,610 --> 00:39:36,520
but in the general case like the number

00:39:32,530 --> 00:39:37,540
of applications where you do that kind

00:39:36,520 --> 00:39:38,740
of slider interface

00:39:37,540 --> 00:39:40,270
it doesn't that loves a good demo of

00:39:38,740 --> 00:39:41,710
rice you take a live blog or a chat and

00:39:40,270 --> 00:39:45,100
like you do want to that and store in

00:39:41,710 --> 00:39:47,910
that case so yeah you're right over here

00:39:45,100 --> 00:39:51,040
do you see ASCII turning into a pepper

00:39:47,910 --> 00:39:53,170
it is written in the pet style I cannot

00:39:51,040 --> 00:39:57,520
confirm or deny that was the intention

00:39:53,170 --> 00:39:59,920
I would like to eventually so like I

00:39:57,520 --> 00:40:02,500
believe that improve for proof for

00:39:59,920 --> 00:40:04,090
implementation first so like when I'm

00:40:02,500 --> 00:40:05,710
happy with it and it's working well I

00:40:04,090 --> 00:40:09,520
will then take it to the right and also

00:40:05,710 --> 00:40:10,510
I need to I've talked to some flowers

00:40:09,520 --> 00:40:12,460
people initially but I reached out to

00:40:10,510 --> 00:40:15,520
other frameworks and Python and say like

00:40:12,460 --> 00:40:17,140
well this is what all of us can we agree

00:40:15,520 --> 00:40:20,100
on this step forward I would love it to

00:40:17,140 --> 00:40:20,100
be a Python my thing as well

00:40:23,490 --> 00:40:32,960
but my question is this is a good system

00:40:26,970 --> 00:40:39,480
does this provide the holy grail of

00:40:32,960 --> 00:40:41,250
guaranteed delivery so when you have an

00:40:39,480 --> 00:40:43,830
image you have you have two options you

00:40:41,250 --> 00:40:46,770
have at most once or at least once now

00:40:43,830 --> 00:40:49,230
Charles is at most one so it is when it

00:40:46,770 --> 00:40:50,280
fails it does not deliver they up the

00:40:49,230 --> 00:40:52,380
other option is when it failed he

00:40:50,280 --> 00:40:54,660
delivers twice there's there's no Holy

00:40:52,380 --> 00:40:56,460
Grail in the middle unfortunately in all

00:40:54,660 --> 00:40:57,870
my testing it always received 107

00:40:56,460 --> 00:40:59,970
reliability because I'm not sitting

00:40:57,870 --> 00:41:02,850
there putting cables out it generally is

00:40:59,970 --> 00:41:05,640
very reliable but I as an engineer I

00:41:02,850 --> 00:41:17,700
must say that when if it will fail with

00:41:05,640 --> 00:41:19,530
non deliverer design no that's position

00:41:17,700 --> 00:41:22,080
on a on a socket so the idea is that a

00:41:19,530 --> 00:41:23,640
socket is a continuous thing but the

00:41:22,080 --> 00:41:25,560
serving system is a set of separate

00:41:23,640 --> 00:41:27,390
servers and so it makes sure that the

00:41:25,560 --> 00:41:30,300
socket as a single entity still has a

00:41:27,390 --> 00:41:32,340
persistence layer at the other end over

00:41:30,300 --> 00:41:34,980
yeah if you want sessions in that sense

00:41:32,340 --> 00:41:36,750
I HTTP cookies right like you you cannot

00:41:34,980 --> 00:41:38,280
set those my sockets unfortunately but

00:41:36,750 --> 00:41:40,500
what you can do is do things using

00:41:38,280 --> 00:41:44,370
javascript in local storage but that

00:41:40,500 --> 00:41:45,960
gets into more complex end of things do

00:41:44,370 --> 00:41:50,850
you have any big features plan for the

00:41:45,960 --> 00:41:52,410
1.11 integration not yet like all the

00:41:50,850 --> 00:41:56,010
features that I am planning are just in

00:41:52,410 --> 00:41:57,390
the external version and also 1.11 is

00:41:56,010 --> 00:42:00,090
still target we're not even released one

00:41:57,390 --> 00:42:01,980
point ten yet so we'll see but the idea

00:42:00,090 --> 00:42:03,660
is every like channels will be will hit

00:42:01,980 --> 00:42:05,340
one point nor as an external project and

00:42:03,660 --> 00:42:07,800
will continue as that for at least a

00:42:05,340 --> 00:42:10,470
while like whether it Rosen's core not

00:42:07,800 --> 00:42:12,090
ever is a question like in many ways

00:42:10,470 --> 00:42:14,970
Django core has wanted to more things

00:42:12,090 --> 00:42:17,250
out of court for a few years and so this

00:42:14,970 --> 00:42:18,480
may prove the first example of that what

00:42:17,250 --> 00:42:19,620
we will do though is many like start

00:42:18,480 --> 00:42:21,090
mentioning it more in the official

00:42:19,620 --> 00:42:23,310
documentation and that kind of stuff but

00:42:21,090 --> 00:42:24,600
like making it obvious it exists that

00:42:23,310 --> 00:42:27,440
they're not making it perhaps fully cool

00:42:24,600 --> 00:42:27,440
we'll see it really

00:42:30,170 --> 00:42:36,779
I'm I'm really impressed

00:42:32,430 --> 00:42:40,319
thank you good stuff can you say

00:42:36,779 --> 00:42:44,459
something about how you load tested yes

00:42:40,319 --> 00:42:47,369
so we have somebody doing running low

00:42:44,459 --> 00:42:50,880
tests at a moment like on AWS with

00:42:47,369 --> 00:42:53,039
locusts stuff like that so generally so

00:42:50,880 --> 00:42:55,589
HTTP load testing there are tools for

00:42:53,039 --> 00:42:58,200
this WebSocket testing there are far

00:42:55,589 --> 00:42:59,819
less tools for this we have I have

00:42:58,200 --> 00:43:01,109
written a custom web socket testing tool

00:42:59,819 --> 00:43:03,180
but there are other ones too but

00:43:01,109 --> 00:43:05,789
generally like basically just setting up

00:43:03,180 --> 00:43:07,079
the system having custom consumers like

00:43:05,789 --> 00:43:08,849
you know do things like I'll take the

00:43:07,079 --> 00:43:10,170
number and accurate back and testing

00:43:08,849 --> 00:43:12,150
like is the ordering correct is the

00:43:10,170 --> 00:43:14,180
content not corrupted method of stuff

00:43:12,150 --> 00:43:16,680
so far the load tests have shown

00:43:14,180 --> 00:43:18,150
performance on par is unicorn and a

00:43:16,680 --> 00:43:19,799
hundred cent reliability so those are

00:43:18,150 --> 00:43:21,690
going well but we're still in the early

00:43:19,799 --> 00:43:22,920
stages of doing load testing so I want

00:43:21,690 --> 00:43:29,940
to be more confident before I come out

00:43:22,920 --> 00:43:31,920
with a big bro you had mentioned early

00:43:29,940 --> 00:43:34,170
on about authentication having the

00:43:31,920 --> 00:43:36,690
authentication layer is that a shared

00:43:34,170 --> 00:43:39,180
authentication with Jango such that if

00:43:36,690 --> 00:43:41,309
you authenticate to Jango then you're

00:43:39,180 --> 00:43:45,660
WebSocket connection is a that is

00:43:41,309 --> 00:43:47,339
correct yes so in particular when what

00:43:45,660 --> 00:43:48,869
it's open they get to send cookie

00:43:47,339 --> 00:43:51,089
headers as part of the negotiation

00:43:48,869 --> 00:43:52,619
person they I mean they start at HTTP

00:43:51,089 --> 00:43:54,930
and said of headers and cookies and then

00:43:52,619 --> 00:43:57,359
convert into binary halfway through so

00:43:54,930 --> 00:43:58,920
if you want to and we can we grab the

00:43:57,359 --> 00:44:00,269
cookies and then extract the

00:43:58,920 --> 00:44:01,619
authentication from the cookies and make

00:44:00,269 --> 00:44:03,749
it just whatever your logging has on the

00:44:01,619 --> 00:44:05,459
site so if you want to have it it

00:44:03,749 --> 00:44:07,709
carries through if you don't you have a

00:44:05,459 --> 00:44:12,119
separate login by tokens for sockets too

00:44:07,709 --> 00:44:13,859
if you want to well there's no more

00:44:12,119 --> 00:44:16,640
questions thank you much the questions a

00:44:13,859 --> 00:44:16,640

YouTube URL: https://www.youtube.com/watch?v=mqV9cjcsbF4


