Title: DjangoCon US 2016 - Entomology 101: Effective Bug Hunting by Frank Wiles
Publication date: 2016-08-11
Playlist: DjangoCon US 2016
Description: 
	DjangoCon US 2016 - Entomology 101: Effective Bug Hunting by Frank Wiles

From Frank's his early childhood of having a simple ant farm, up to and including his long experience in the deepest, most pristine, and undisturbed wilds of the Internet, his experience has honed his abilities to find and identify bugs. Learn some of the best tools of the trade that will help in your daily hunts.

Bug hunting tech you will learn about:

django-debug-toolbar
pdb/ipdb
using iPython embed
effectively using Python logging so you don't need to use the last quite so often
Bug hunting is all about visibility. You may have the best net ever invented, but you can't catch a bug you can't see. Sure, you can spend all day turning over rocks and hope for the best or you can gear up with the tried and true night vision goggles all the pros use.

This talk was presented at: https://2016.djangocon.us/schedule/presentation/52/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:02,450
come on

00:00:14,450 --> 00:00:20,490
so the deadline for putting in a talk

00:00:18,840 --> 00:00:23,520
was coming up and I was actually kind of

00:00:20,490 --> 00:00:25,980
stressing about it I wasn't coming up

00:00:23,520 --> 00:00:29,189
with any good ideas and work had been

00:00:25,980 --> 00:00:31,320
super busy and I get home and my

00:00:29,189 --> 00:00:34,800
youngest daughter was like let's go look

00:00:31,320 --> 00:00:37,170
for bugs in the yard and it was hot and

00:00:34,800 --> 00:00:38,610
I was tired work had been stressful and

00:00:37,170 --> 00:00:41,820
I really wasn't feeling it but we went

00:00:38,610 --> 00:00:45,859
out there and you know how do you say no

00:00:41,820 --> 00:00:49,890
to to that cute face so I go out and and

00:00:45,859 --> 00:00:52,589
while we're out there was like you know

00:00:49,890 --> 00:00:54,690
daddy hunts bugs all day at work it's

00:00:52,589 --> 00:00:59,760
like really I was like well computer

00:00:54,690 --> 00:01:01,679
bugs and apparently I'm not very good at

00:00:59,760 --> 00:01:03,120
finding real bugs cuz we didn't find any

00:01:01,679 --> 00:01:04,739
bugs that day which might have been

00:01:03,120 --> 00:01:08,220
because it was like a hundred degrees

00:01:04,739 --> 00:01:11,820
outside right but we're all bug hunters

00:01:08,220 --> 00:01:14,250
right we just do it in comfy chairs and

00:01:11,820 --> 00:01:19,680
with air conditioning and not in the

00:01:14,250 --> 00:01:21,570
Kansas Heat are the Kansas humidity but

00:01:19,680 --> 00:01:23,670
one of the things we were going on a bug

00:01:21,570 --> 00:01:26,220
hunt you've got to get the proper

00:01:23,670 --> 00:01:28,829
equipment right so we need to get we

00:01:26,220 --> 00:01:34,409
need a dress for the part and we need to

00:01:28,829 --> 00:01:37,110
get our net and get ready to go on a bug

00:01:34,409 --> 00:01:42,079
hunt so as a developer what's one of the

00:01:37,110 --> 00:01:44,850
first things you reach for for equipment

00:01:42,079 --> 00:01:46,829
when you're debugging the print

00:01:44,850 --> 00:01:48,810
statement right everybody does that who

00:01:46,829 --> 00:01:50,460
everybody here we've all we've all used

00:01:48,810 --> 00:01:54,119
the print statement you shouldn't use

00:01:50,460 --> 00:01:56,789
the prints tape and you may be thinking

00:01:54,119 --> 00:01:59,250
it's a trick question and you should be

00:01:56,789 --> 00:02:01,200
using this print statement all right you

00:01:59,250 --> 00:02:03,149
guys we should all be using Python 3

00:02:01,200 --> 00:02:08,460
right right yeah you should use that

00:02:03,149 --> 00:02:09,750
print statement there's better tools if

00:02:08,460 --> 00:02:12,090
anyone what kind of bug you're hunting

00:02:09,750 --> 00:02:15,630
we're looking for common bugs regular

00:02:12,090 --> 00:02:18,360
bugs we can use something a little

00:02:15,630 --> 00:02:21,210
easier that helps in more general way

00:02:18,360 --> 00:02:23,880
specifically for django django debug

00:02:21,210 --> 00:02:24,370
tool bar who here uses django debug tool

00:02:23,880 --> 00:02:26,349
bar

00:02:24,370 --> 00:02:28,599
okay good most everybody but some people

00:02:26,349 --> 00:02:30,010
have it I'm always surprised the people

00:02:28,599 --> 00:02:31,599
who have never heard of it and never

00:02:30,010 --> 00:02:33,250
looked at it and think it's hard to use

00:02:31,599 --> 00:02:35,530
or that it's something difficult so

00:02:33,250 --> 00:02:38,340
we're going to take a quick look at Jago

00:02:35,530 --> 00:02:38,340
debug tool bar

00:02:46,020 --> 00:02:51,060
so I've got a silly little app that I'm

00:02:49,380 --> 00:02:54,120
working on and if you look over here

00:02:51,060 --> 00:02:56,820
there's this little highlighted thing if

00:02:54,120 --> 00:02:58,920
I click this it shows me all sorts of

00:02:56,820 --> 00:03:04,620
interesting information about my site it

00:02:58,920 --> 00:03:06,360
shows me oops it shows me which versions

00:03:04,620 --> 00:03:09,450
of things are installed how long

00:03:06,360 --> 00:03:11,640
different things took right I'm which

00:03:09,450 --> 00:03:14,790
time do I spend in the request Dom

00:03:11,640 --> 00:03:15,900
content shows settings all the different

00:03:14,790 --> 00:03:17,010
things if I'm confused I don't need to

00:03:15,900 --> 00:03:19,200
go look at my settings file what

00:03:17,010 --> 00:03:24,630
settings are being used right now what

00:03:19,200 --> 00:03:27,780
type of headers and then the request

00:03:24,630 --> 00:03:31,730
itself all my cookies everything I'd

00:03:27,780 --> 00:03:36,540
want to know about your average Django

00:03:31,730 --> 00:03:39,000
request this is one that I think people

00:03:36,540 --> 00:03:41,550
don't use enough which shows all the

00:03:39,000 --> 00:03:47,430
sequel queries this is where your app

00:03:41,550 --> 00:03:51,380
gets slow we can see the whole statement

00:03:47,430 --> 00:03:55,380
and then exactly where it was generated

00:03:51,380 --> 00:03:59,280
we can see a query plan from postgres

00:03:55,380 --> 00:04:01,440
see if we're missing an index if

00:03:59,280 --> 00:04:04,260
something's not showing up in your

00:04:01,440 --> 00:04:06,450
template you can print out statements

00:04:04,260 --> 00:04:08,310
and see that it's set in the context or

00:04:06,450 --> 00:04:13,040
you can just click into here and see

00:04:08,310 --> 00:04:13,040
exactly what is in your template context

00:04:13,520 --> 00:04:18,180
you can also see the signals that are

00:04:15,660 --> 00:04:21,890
fired any times you called cash any

00:04:18,180 --> 00:04:21,890
logging statements you used

00:04:32,530 --> 00:04:36,860
what publicize my voice is a little

00:04:34,640 --> 00:04:42,770
hoarse a little bit under the weather

00:04:36,860 --> 00:04:44,540
but sometimes there's harder bugs bugs

00:04:42,770 --> 00:04:49,850
that you just can't fix with debug tool

00:04:44,540 --> 00:04:52,100
bar scary bugs so maybe you need to

00:04:49,850 --> 00:04:54,140
reach for something like PDB the Python

00:04:52,100 --> 00:04:56,960
debugger who here uses the Python

00:04:54,140 --> 00:04:59,240
debugger surprised it's almost the same

00:04:56,960 --> 00:05:01,850
number of people I never ever use

00:04:59,240 --> 00:05:03,620
debuggers I don't know why I I don't

00:05:01,850 --> 00:05:06,380
it's just never been my thing I'm never

00:05:03,620 --> 00:05:08,780
confused about the program's flow I'm

00:05:06,380 --> 00:05:13,370
always just confused about I'm just

00:05:08,780 --> 00:05:15,260
wrong about what data is set where I

00:05:13,370 --> 00:05:17,420
think it's set right I think I've got a

00:05:15,260 --> 00:05:19,100
list it's actually a tuple I think I've

00:05:17,420 --> 00:05:22,310
got a dictionary filled with data and

00:05:19,100 --> 00:05:23,690
it's actually a nun right like that that

00:05:22,310 --> 00:05:25,550
those are my confusion those were my

00:05:23,690 --> 00:05:27,080
bugs come from they don't come from I

00:05:25,550 --> 00:05:29,090
don't understand why this if isn't

00:05:27,080 --> 00:05:34,130
firing it's not fiery because the data

00:05:29,090 --> 00:05:35,960
is not set right so you can pdb if

00:05:34,130 --> 00:05:37,910
you're not familiar with Python

00:05:35,960 --> 00:05:40,250
debuggers you can run your program

00:05:37,910 --> 00:05:43,250
through and a few set trace at any

00:05:40,250 --> 00:05:45,020
particular spot your program will stop

00:05:43,250 --> 00:05:46,850
and then you can slow the iterate

00:05:45,020 --> 00:05:48,380
through go to the next slide go to the

00:05:46,850 --> 00:05:49,940
next function show me the value of this

00:05:48,380 --> 00:05:53,870
variable here and you step through your

00:05:49,940 --> 00:05:57,050
program line by line like I said I don't

00:05:53,870 --> 00:05:59,420
particularly find that useful but maybe

00:05:57,050 --> 00:06:01,280
you will this is really helpful if you

00:05:59,420 --> 00:06:02,690
were very give a very very complicated

00:06:01,280 --> 00:06:04,130
program and you're very confused as to

00:06:02,690 --> 00:06:07,130
why you end up over here when you think

00:06:04,130 --> 00:06:08,450
you should be over here but in my

00:06:07,130 --> 00:06:09,770
experience if your programs that

00:06:08,450 --> 00:06:11,180
complicated you should probably work on

00:06:09,770 --> 00:06:12,350
just simplifying your program rather

00:06:11,180 --> 00:06:19,430
than getting into more advanced

00:06:12,350 --> 00:06:22,550
debugging so yeah not a huge fan I am

00:06:19,430 --> 00:06:24,170
however a huge fan of this you can embed

00:06:22,550 --> 00:06:27,020
a Python shell and I Python shell

00:06:24,170 --> 00:06:29,150
anywhere you want it's in my opinion

00:06:27,020 --> 00:06:31,460
basically the same thing as using a

00:06:29,150 --> 00:06:33,520
bugger so let me show you a quick

00:06:31,460 --> 00:06:33,520
example

00:06:39,849 --> 00:06:48,699
so this is the view for this dashboard

00:06:42,909 --> 00:06:51,399
page we're looking at and if I do this

00:06:48,699 --> 00:06:53,080
so far my Python import embed and then

00:06:51,399 --> 00:06:57,369
call in bed I use it so much I have a

00:06:53,080 --> 00:07:00,009
hotkey for it in in sublime so if i go

00:06:57,369 --> 00:07:01,749
back here and i refresh the page you'll

00:07:00,009 --> 00:07:04,569
see it's just spinning it's just waiting

00:07:01,749 --> 00:07:07,360
and if i go back over to my run server

00:07:04,569 --> 00:07:10,389
it's now dropped me into an I Python

00:07:07,360 --> 00:07:14,830
shell right in that's so i can say self

00:07:10,389 --> 00:07:16,959
request user and right in there what's

00:07:14,830 --> 00:07:23,919
in the context i can add stuff to the

00:07:16,959 --> 00:07:27,339
context and then when i exit it

00:07:23,919 --> 00:07:29,949
continues on normally and we go we've

00:07:27,339 --> 00:07:39,909
refreshed the page now and if i look in

00:07:29,949 --> 00:07:42,309
here in my context we've added fubar

00:07:39,909 --> 00:07:44,259
there into the context so I'm really

00:07:42,309 --> 00:07:45,879
just plugged right in at that line but I

00:07:44,259 --> 00:07:47,639
can navigate with ipython which is

00:07:45,879 --> 00:07:49,629
something I use all the time and not

00:07:47,639 --> 00:07:52,889
stepping through with the debugger and

00:07:49,629 --> 00:07:52,889
having to remember all those commands

00:08:03,750 --> 00:08:15,390
and of course it jumped me back and I

00:08:12,210 --> 00:08:19,980
think the real secret to a defective bug

00:08:15,390 --> 00:08:21,990
hunt is to use login there's really two

00:08:19,980 --> 00:08:24,060
kinds of bugs there's the bugs that I've

00:08:21,990 --> 00:08:26,190
just generated locally in my local

00:08:24,060 --> 00:08:28,110
development and then there's the bugs

00:08:26,190 --> 00:08:30,750
that happen after we've deployed to

00:08:28,110 --> 00:08:33,960
staging or production right logging

00:08:30,750 --> 00:08:36,390
gives me the information for both I've

00:08:33,960 --> 00:08:39,090
got good logging and i'm logging locally

00:08:36,390 --> 00:08:41,340
I get my answers about what my data set

00:08:39,090 --> 00:08:44,130
to and then when i go to production i

00:08:41,340 --> 00:08:47,430
have that same data and so i'm killing

00:08:44,130 --> 00:08:53,910
two birds with one stone two bugs with

00:08:47,430 --> 00:08:56,900
one stone so obviously you can just use

00:08:53,910 --> 00:09:00,630
the standard Python logging library and

00:08:56,900 --> 00:09:05,850
it's really it's really hard to use this

00:09:00,630 --> 00:09:07,980
is an example of using Python logon you

00:09:05,850 --> 00:09:11,100
just set up this strings it to standard

00:09:07,980 --> 00:09:12,960
out you're using containers in a good 12

00:09:11,100 --> 00:09:17,010
factor app this is really all you need

00:09:12,960 --> 00:09:18,900
to do for a script you can set different

00:09:17,010 --> 00:09:21,660
levels so you can turn off so right now

00:09:18,900 --> 00:09:23,820
we're logging the debug level so we see

00:09:21,660 --> 00:09:26,850
everything from the debug level and

00:09:23,820 --> 00:09:29,130
above and so we would see both testing

00:09:26,850 --> 00:09:31,350
and debug in our logs when we ran this

00:09:29,130 --> 00:09:33,810
if we set that to just info we would

00:09:31,350 --> 00:09:37,950
only see the testing so we can turn off

00:09:33,810 --> 00:09:43,800
the really verbose data that we don't

00:09:37,950 --> 00:09:46,170
want to see there's a slightly better

00:09:43,800 --> 00:09:51,660
version that are Monroe no sure did call

00:09:46,170 --> 00:09:53,880
log book it's quite a bit faster so if

00:09:51,660 --> 00:09:55,470
you really get into logging and you do a

00:09:53,880 --> 00:09:57,210
lot of logging and you're worried about

00:09:55,470 --> 00:09:59,339
eking out that last little bit of

00:09:57,210 --> 00:10:00,990
performance to your app having a whole

00:09:59,339 --> 00:10:04,980
lot of logging statements is actually

00:10:00,990 --> 00:10:07,430
fairly slow the log book is quite a bit

00:10:04,980 --> 00:10:11,460
faster I think it's about twice as fast

00:10:07,430 --> 00:10:13,200
and it's just about as easy to use here

00:10:11,460 --> 00:10:16,969
we just set up slightly differently and

00:10:13,200 --> 00:10:20,459
again this will just log to standard out

00:10:16,969 --> 00:10:24,449
will log here's some info finding bugs

00:10:20,459 --> 00:10:28,409
is fun there's also a Python the library

00:10:24,449 --> 00:10:30,359
called struct log it's example does not

00:10:28,409 --> 00:10:32,579
fit well on a slide it's much more

00:10:30,359 --> 00:10:35,159
verbose but what it allows you to do is

00:10:32,579 --> 00:10:38,639
as you're going through your code you

00:10:35,159 --> 00:10:41,159
can say bind this variable here to this

00:10:38,639 --> 00:10:43,229
name in my structured log and then when

00:10:41,159 --> 00:10:45,479
i get to a point where i want to emit a

00:10:43,229 --> 00:10:47,819
log i just say admit this log and all

00:10:45,479 --> 00:10:50,309
the variables that i have found their

00:10:47,819 --> 00:10:52,859
values end up in the structured log and

00:10:50,309 --> 00:10:55,679
you can decide to output them as json or

00:10:52,859 --> 00:11:02,099
as CSV or however you want to use them

00:10:55,679 --> 00:11:03,299
downstream so as I mentioned my daughter

00:11:02,099 --> 00:11:05,669
doesn't think I'm very good at bug

00:11:03,299 --> 00:11:07,519
hunting because when we went out there

00:11:05,669 --> 00:11:11,939
you know I kept turning over rocks and

00:11:07,519 --> 00:11:13,919
we weren't finding any bugs so one of

00:11:11,939 --> 00:11:17,129
the one of the techniques for finding

00:11:13,919 --> 00:11:19,499
where is your bug is to divide and

00:11:17,129 --> 00:11:21,299
conquer first I lift up this rock nope

00:11:19,499 --> 00:11:24,059
no bun and go over here and lift up this

00:11:21,299 --> 00:11:25,319
bug let's rock nobody so it's got to be

00:11:24,059 --> 00:11:27,899
here it's got to be under this middle

00:11:25,319 --> 00:11:30,599
boat this middle rock and so I can dig

00:11:27,899 --> 00:11:32,069
in there once I verified it's not over

00:11:30,599 --> 00:11:34,889
here and it's not over here it must be

00:11:32,069 --> 00:11:38,369
somewhere in here I can dig in and get

00:11:34,889 --> 00:11:40,349
into the meat of things another thing

00:11:38,369 --> 00:11:43,679
that I found people don't do is they

00:11:40,349 --> 00:11:47,579
keep attacking the problem from the kind

00:11:43,679 --> 00:11:50,489
of the same state and often if you start

00:11:47,579 --> 00:11:51,659
with a clean slate fresh data clear out

00:11:50,489 --> 00:11:54,269
your database get rid all your testing

00:11:51,659 --> 00:11:57,749
data recreate whatever you need all

00:11:54,269 --> 00:12:01,139
right fresh perspective go grab lunch go

00:11:57,749 --> 00:12:02,759
walk go grab a coffee when I used to be

00:12:01,139 --> 00:12:04,649
a smoker I can't tell you how many times

00:12:02,759 --> 00:12:06,899
I'd be so frustrated with the bug that

00:12:04,649 --> 00:12:08,249
get up to go outside for a smoke and I

00:12:06,899 --> 00:12:11,609
wouldn't even make it outside before I

00:12:08,249 --> 00:12:16,169
go oh that's where my problem is just

00:12:11,609 --> 00:12:17,819
getting your mind out of the problem and

00:12:16,169 --> 00:12:20,549
then a fresh set of eyes some people

00:12:17,819 --> 00:12:22,679
talked about this is called rubber ducky

00:12:20,549 --> 00:12:24,329
debugging and talk to you just say it

00:12:22,679 --> 00:12:26,459
out loud get your friend to come over

00:12:24,329 --> 00:12:28,499
take a look at it with you sometimes

00:12:26,459 --> 00:12:29,970
just explaining the problem to them will

00:12:28,499 --> 00:12:33,480
will help you find it

00:12:29,970 --> 00:12:36,540
and then if you've got this complicated

00:12:33,480 --> 00:12:38,639
mess whatever you do only change one

00:12:36,540 --> 00:12:39,899
thing at a time because you're never

00:12:38,639 --> 00:12:41,430
going to be able to figure out where

00:12:39,899 --> 00:12:43,500
this is coming from where your problems

00:12:41,430 --> 00:12:51,300
lie if you're pulling out four wires at

00:12:43,500 --> 00:12:53,480
a time anybody have any questions happy

00:12:51,300 --> 00:12:53,480
does

00:12:58,750 --> 00:13:03,500
we actually might want to get you to put

00:13:01,550 --> 00:13:05,630
the hat back on and grab the net for an

00:13:03,500 --> 00:13:08,330
official photo that sounds like a good

00:13:05,630 --> 00:13:10,670
plan um but yeah we actually do have

00:13:08,330 --> 00:13:13,670
plenty of time for questions so please

00:13:10,670 --> 00:13:15,590
don't be shy just for recording purposes

00:13:13,670 --> 00:13:28,460
to come up to the mics on either side

00:13:15,590 --> 00:13:29,840
and let's chat hey are you doing you

00:13:28,460 --> 00:13:32,870
just basically described the story of my

00:13:29,840 --> 00:13:34,790
life and it's all ours right this is all

00:13:32,870 --> 00:13:39,230
I do yeah there's all I do is find the

00:13:34,790 --> 00:13:40,460
stuff and I guess could make a lot of

00:13:39,230 --> 00:13:43,940
comments but I'm not going to do that

00:13:40,460 --> 00:13:48,530
I'll ask the question after you've done

00:13:43,940 --> 00:13:51,230
all this stuff talk I would love to see

00:13:48,530 --> 00:13:53,870
talk about the role of regular

00:13:51,230 --> 00:13:57,880
expressions and funny things like that

00:13:53,870 --> 00:14:01,970
right you know to find all the instances

00:13:57,880 --> 00:14:03,470
of this particular bug yeah well I mean

00:14:01,970 --> 00:14:05,960
that's really more of a problem of being

00:14:03,470 --> 00:14:07,910
dry of not repeating yourself like you

00:14:05,960 --> 00:14:09,770
know you should really only have a bug

00:14:07,910 --> 00:14:11,930
in that same bug in one spot right like

00:14:09,770 --> 00:14:14,060
if you're having to find it copied in

00:14:11,930 --> 00:14:19,900
many many places that's probably just

00:14:14,060 --> 00:14:22,339
bad design right but yeah you know using

00:14:19,900 --> 00:14:24,290
using regular expressions to find common

00:14:22,339 --> 00:14:27,020
patterns happens I do a lot of

00:14:24,290 --> 00:14:29,060
refactoring for people and so I'll see

00:14:27,020 --> 00:14:32,089
that they're using something a bad

00:14:29,060 --> 00:14:34,370
pattern it's more about a maintenance

00:14:32,089 --> 00:14:36,380
nightmare than really a bug it does what

00:14:34,370 --> 00:14:39,440
it needs to do it's just you know

00:14:36,380 --> 00:14:41,150
verbose or slower or something like that

00:14:39,440 --> 00:14:43,220
and so I'll have to search through a

00:14:41,150 --> 00:14:49,880
code base there's a really great tool

00:14:43,220 --> 00:14:52,640
called ack ack that will it's basically

00:14:49,880 --> 00:14:54,770
grep for programmers so you can say

00:14:52,640 --> 00:14:57,770
search all you can say ack dash dash

00:14:54,770 --> 00:14:59,300
python search and a search string and it

00:14:57,770 --> 00:15:03,020
will search from the current directory

00:14:59,300 --> 00:15:05,570
down only Python files for that string

00:15:03,020 --> 00:15:08,060
or you can say a cash dash CSS and it

00:15:05,570 --> 00:15:10,080
will only look for CSS but also as smart

00:15:08,060 --> 00:15:12,930
looks for SAS and last

00:15:10,080 --> 00:15:15,090
and those kinds of things so that that

00:15:12,930 --> 00:15:17,430
saves me so much time and it gives you

00:15:15,090 --> 00:15:18,780
some context lines around each match so

00:15:17,430 --> 00:15:30,000
you can kind of see where in the code

00:15:18,780 --> 00:15:32,430
here I'll show you an example so you can

00:15:30,000 --> 00:15:34,170
see it picked up a bunch of HTML docks

00:15:32,430 --> 00:15:38,010
and stuff where I mentioned you're right

00:15:34,170 --> 00:15:40,940
and so if I just do ack dash I Python

00:15:38,010 --> 00:15:42,900
it'll only find it in the Python files

00:15:40,940 --> 00:15:45,780
yeah that's good to know because some of

00:15:42,900 --> 00:15:48,870
us go into strange code bases large

00:15:45,780 --> 00:15:51,030
strange code base so rewriting it is is

00:15:48,870 --> 00:15:53,550
not an option you know refactoring is

00:15:51,030 --> 00:15:56,130
not an option you know what fixing bugs

00:15:53,550 --> 00:15:58,170
is a requirement yep ya know another one

00:15:56,130 --> 00:16:00,840
I really i use sublime text and it's got

00:15:58,170 --> 00:16:02,070
a really great search replace feature so

00:16:00,840 --> 00:16:03,600
you can step through and be like i

00:16:02,070 --> 00:16:05,550
should replace this I shouldn't replace

00:16:03,600 --> 00:16:06,690
that I should be replacing this one and

00:16:05,550 --> 00:16:09,750
it kind of walks you through and you can

00:16:06,690 --> 00:16:15,150
do multiple files with the same so that

00:16:09,750 --> 00:16:18,990
might be a something to use hi we talked

00:16:15,150 --> 00:16:20,640
quick question so you mentioned a pdb

00:16:18,990 --> 00:16:23,520
and how you're not too fond of it and

00:16:20,640 --> 00:16:25,980
then you mentioned ipython and how you

00:16:23,520 --> 00:16:28,110
love it what are your thoughts on IP DB

00:16:25,980 --> 00:16:30,540
which is PDV with an i Python shell um

00:16:28,110 --> 00:16:32,670
it's so the thing that I had never

00:16:30,540 --> 00:16:35,070
clicked for me until recently is that

00:16:32,670 --> 00:16:36,900
with so I pdb is better like it's got

00:16:35,070 --> 00:16:39,090
the better tab completion type interface

00:16:36,900 --> 00:16:40,650
and everything and the history the thing

00:16:39,090 --> 00:16:44,190
that never clicked for me was that with

00:16:40,650 --> 00:16:45,960
pdb you could you can issue the interact

00:16:44,190 --> 00:16:49,440
command and then it basically gives you

00:16:45,960 --> 00:16:51,510
an iPhone shell at that point but for me

00:16:49,440 --> 00:16:54,510
I that was the first thing I was always

00:16:51,510 --> 00:16:56,100
typing right and so I just switched over

00:16:54,510 --> 00:16:58,880
to going straight to the shell because I

00:16:56,100 --> 00:17:01,470
didn't need to step through anything I

00:16:58,880 --> 00:17:03,810
just I don't know I'm very rarely

00:17:01,470 --> 00:17:07,470
confused as to why I'm in this function

00:17:03,810 --> 00:17:09,000
or why you know how this float I just

00:17:07,470 --> 00:17:11,370
need to see the data here and then maybe

00:17:09,000 --> 00:17:14,250
over here but I don't typically need to

00:17:11,370 --> 00:17:15,839
do that in one session as those more of

00:17:14,250 --> 00:17:17,699
a habit thing I think it could be I

00:17:15,839 --> 00:17:22,250
think you'll like the new IP DVD with

00:17:17,699 --> 00:17:22,250
ipython 50 I'll check it out

00:17:24,260 --> 00:17:30,690
hi this is a little bit more of a bigger

00:17:27,110 --> 00:17:33,090
open-ended question but you know I find

00:17:30,690 --> 00:17:35,160
that as you become more experienced

00:17:33,090 --> 00:17:37,590
programming you sort of develop your own

00:17:35,160 --> 00:17:40,679
way of debugging and you you get better

00:17:37,590 --> 00:17:42,570
at debug basically but when working with

00:17:40,679 --> 00:17:45,390
a novice program or someone who's

00:17:42,570 --> 00:17:47,309
learning a lot of times they sort of

00:17:45,390 --> 00:17:48,780
tend to shoot in the dark because they

00:17:47,309 --> 00:17:51,210
they haven't really learned how to

00:17:48,780 --> 00:17:52,799
properly debug yet and you know I always

00:17:51,210 --> 00:17:55,520
say the first step is look at the error

00:17:52,799 --> 00:17:58,530
message right but do you have any

00:17:55,520 --> 00:18:00,000
experience or just comments on when

00:17:58,530 --> 00:18:02,220
you're working with someone who's new to

00:18:00,000 --> 00:18:06,330
programming how to sort of guide them

00:18:02,220 --> 00:18:08,340
through the debugging process um so what

00:18:06,330 --> 00:18:10,140
it depends on the bug if it's really

00:18:08,340 --> 00:18:12,049
like if I walk up and I see the air and

00:18:10,140 --> 00:18:14,880
I know exactly what they've done right

00:18:12,049 --> 00:18:17,340
that's different that if I have to dig a

00:18:14,880 --> 00:18:19,980
little bit if I'm digging a little bit I

00:18:17,340 --> 00:18:22,049
very much tell them exactly why I'm

00:18:19,980 --> 00:18:24,240
doing the thing i'm doing right i'm

00:18:22,049 --> 00:18:26,730
gonna look over here because i think the

00:18:24,240 --> 00:18:28,200
problem is in the template and it's just

00:18:26,730 --> 00:18:30,360
that you're using the wrong template

00:18:28,200 --> 00:18:31,919
variable name and it's not that the date

00:18:30,360 --> 00:18:34,650
is wrong it's just you're using it wrong

00:18:31,919 --> 00:18:36,090
here oh no I'm wrong look you've used it

00:18:34,650 --> 00:18:37,620
right so it's that the data is not

00:18:36,090 --> 00:18:39,690
getting set so we now need to go to the

00:18:37,620 --> 00:18:42,270
view and look and see how the data is

00:18:39,690 --> 00:18:45,270
being said right instead of just going

00:18:42,270 --> 00:18:46,559
it's right here because I might jump

00:18:45,270 --> 00:18:52,470
through three or four files real quick

00:18:46,559 --> 00:18:54,960
and confuse them right yeah I don't know

00:18:52,470 --> 00:18:57,540
it's debugging is hard right like it's

00:18:54,960 --> 00:18:59,130
it is something you get better at as you

00:18:57,540 --> 00:19:01,049
give it hopefully also you get better at

00:18:59,130 --> 00:19:05,419
not n bugging and not putting them in

00:19:01,049 --> 00:19:07,919
the first place but you know but

00:19:05,419 --> 00:19:10,890
debugging is is what we do is why we see

00:19:07,919 --> 00:19:12,720
you know is it I the one thing i do when

00:19:10,890 --> 00:19:14,700
i when i teach training classes is I

00:19:12,720 --> 00:19:18,299
tell people I was like you know just

00:19:14,700 --> 00:19:23,130
last week I spent two hours going what

00:19:18,299 --> 00:19:24,390
the why is this not working and you

00:19:23,130 --> 00:19:26,370
know it ended up being something very

00:19:24,390 --> 00:19:28,770
small that I just overlooked three or

00:19:26,370 --> 00:19:30,870
four times right and so to give them

00:19:28,770 --> 00:19:32,820
that encouragement that it still happens

00:19:30,870 --> 00:19:33,350
to me it still happens to people better

00:19:32,820 --> 00:19:35,210
than me

00:19:33,350 --> 00:19:38,150
right like you're never going to get rid

00:19:35,210 --> 00:19:41,780
of this it's always just a matter of you

00:19:38,150 --> 00:19:44,330
know working through each one you

00:19:41,780 --> 00:19:46,070
mentioned regular expressions there in

00:19:44,330 --> 00:19:47,870
the last one and I just realized that

00:19:46,070 --> 00:19:49,789
for me the hardest thing in the world to

00:19:47,870 --> 00:19:52,340
debug is a problem with the regular

00:19:49,789 --> 00:19:53,929
expressions in URLs da pie and I'm

00:19:52,340 --> 00:19:56,720
really good with regular expressions I

00:19:53,929 --> 00:19:58,580
came from the parole world and so I've

00:19:56,720 --> 00:19:59,780
read mastering regular expressions five

00:19:58,580 --> 00:20:01,220
or six times I'm really good with

00:19:59,780 --> 00:20:03,260
regular expressions but for whatever

00:20:01,220 --> 00:20:05,659
reason that is the hardest thing like I

00:20:03,260 --> 00:20:08,750
don't see them to see the problem in the

00:20:05,659 --> 00:20:11,299
URLs alright we have I think we have

00:20:08,750 --> 00:20:13,159
enough time to get these two and that

00:20:11,299 --> 00:20:15,950
one so we'll let you go ahead since you

00:20:13,159 --> 00:20:17,960
were net yeah I was just wondering if

00:20:15,950 --> 00:20:19,789
you had any specific tools that you know

00:20:17,960 --> 00:20:21,740
of or strategies as far as like

00:20:19,789 --> 00:20:24,049
debugging microservices if you have like

00:20:21,740 --> 00:20:25,730
a Python microservices architecture if

00:20:24,049 --> 00:20:28,280
you're familiar with like because i

00:20:25,730 --> 00:20:29,630
think like pdb and those sorts of tools

00:20:28,280 --> 00:20:31,490
work really well if you have something

00:20:29,630 --> 00:20:33,350
monolithic but like if you're trying to

00:20:31,490 --> 00:20:34,850
trace something across a bunch of

00:20:33,350 --> 00:20:37,039
different even if they're all Jenga rest

00:20:34,850 --> 00:20:39,320
framework a penis you've got to be

00:20:37,039 --> 00:20:41,690
slogging right and you need to log them

00:20:39,320 --> 00:20:44,090
into one central thing so that your you

00:20:41,690 --> 00:20:46,100
can look at them and then you can see ok

00:20:44,090 --> 00:20:47,450
I'm issuing this request and I got back

00:20:46,100 --> 00:20:49,220
to this data and then it went to this

00:20:47,450 --> 00:20:50,570
service and it issued this request and

00:20:49,220 --> 00:20:52,100
it asks for this data and it got this

00:20:50,570 --> 00:20:53,690
data back and each one and that's really

00:20:52,100 --> 00:20:54,770
the only way you can do it right because

00:20:53,690 --> 00:20:56,720
otherwise like you said you're gonna

00:20:54,770 --> 00:20:58,070
have to put a set trace in here and step

00:20:56,720 --> 00:20:59,539
through stuff than centrix over here and

00:20:58,070 --> 00:21:06,590
step through stuff and that doesn't work

00:20:59,539 --> 00:21:08,840
very well ok yeah um Janko toolbar is

00:21:06,590 --> 00:21:10,880
really great but what if you're someone

00:21:08,840 --> 00:21:13,640
who's doing a single page app app and

00:21:10,880 --> 00:21:15,799
using something like react Jas and

00:21:13,640 --> 00:21:18,919
everything's in Ajax and suddenly all

00:21:15,799 --> 00:21:21,320
I'm doing is using the browser's console

00:21:18,919 --> 00:21:22,909
to see what the network traffic is do

00:21:21,320 --> 00:21:26,150
you have something to recommend for

00:21:22,909 --> 00:21:28,400
folks in that situation so if you're

00:21:26,150 --> 00:21:31,190
using react and redux there's really

00:21:28,400 --> 00:21:34,280
good browser plug-ins for Redux that can

00:21:31,190 --> 00:21:36,080
show you your the Redux devtools is

00:21:34,280 --> 00:21:37,610
really great but also one thing that

00:21:36,080 --> 00:21:39,440
people miss and I'm going to have to

00:21:37,610 --> 00:21:41,679
look this up real quick because i don't

00:21:39,440 --> 00:21:44,419
remember in this project what one of my

00:21:41,679 --> 00:21:53,619
AP is our hair

00:21:44,419 --> 00:21:53,619
but if you okay

00:22:03,740 --> 00:22:10,040
if you hit the Jenga rest framework

00:22:05,559 --> 00:22:11,870
endpoint debug tool bar still works and

00:22:10,040 --> 00:22:13,550
it like so for example if you want to

00:22:11,870 --> 00:22:16,700
see the queries or you want to see

00:22:13,550 --> 00:22:18,170
anything about so if you hit the browser

00:22:16,700 --> 00:22:19,580
interface that supposed to be the human

00:22:18,170 --> 00:22:21,050
consumable part if you have any

00:22:19,580 --> 00:22:22,640
questions about how that date is getting

00:22:21,050 --> 00:22:24,679
in there on the Django side you can

00:22:22,640 --> 00:22:26,090
still use the debug tool bar but in it

00:22:24,679 --> 00:22:27,740
entirely in the JavaScript world you've

00:22:26,090 --> 00:22:30,460
got to rely on the JavaScript tools

00:22:27,740 --> 00:22:33,559
really to help you there well thank you

00:22:30,460 --> 00:22:35,120
I've got one quick question as a big fan

00:22:33,559 --> 00:22:37,010
of spectrum and if there are people in

00:22:35,120 --> 00:22:39,410
this room who don't know spectrum Trek

00:22:37,010 --> 00:22:41,300
check it out twitter.com / dev spectrum

00:22:39,410 --> 00:22:47,480
if there are any new or cool features on

00:22:41,300 --> 00:22:48,860
the way so right now I'm so spectrum as

00:22:47,480 --> 00:22:50,660
a product that we put out that that

00:22:48,860 --> 00:22:52,370
makes logging useful for the developer

00:22:50,660 --> 00:22:54,380
right now I'm just adding support for

00:22:52,370 --> 00:22:56,840
other languages so we've got a chrome

00:22:54,380 --> 00:23:00,650
plugin and so you can get console dot

00:22:56,840 --> 00:23:03,440
log and I'm slowly adding in Ruby and go

00:23:00,650 --> 00:23:07,190
and JavaScript logging libraries for

00:23:03,440 --> 00:23:09,820
spectrum okay I think we're in time so

00:23:07,190 --> 00:23:09,820
thanks a lot everybody

00:23:13,290 --> 00:23:15,350

YouTube URL: https://www.youtube.com/watch?v=Z4oieDoQEk0


