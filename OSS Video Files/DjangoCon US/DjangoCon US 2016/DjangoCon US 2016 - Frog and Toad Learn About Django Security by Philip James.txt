Title: DjangoCon US 2016 - Frog and Toad Learn About Django Security by Philip James
Publication date: 2016-08-11
Playlist: DjangoCon US 2016
Description: 
	DjangoCon US 2016 - Frog and Toad Learn About Django Security by Philip James

Django Security Talk Notes

Introduction
Philip James, how long Iâ€™ve worked with Python and Django, background at EB
Introduction to the story, and the characters
Safe-ish: Talk about Djangoâ€™s Security Model and how it tries to provide sane defaults for developers
Run-through of the parts of the django security model

XSS (brief definition)

Django escapes characters by default

How?

How do you turn it off? Mark Safe, | n, safe

CSRF (brief definition)

Django has middleware that checks POST requests for a token

How?

Token is stored in cookie, also

Could be better? Make cookie httponly

Side-effect: harder to JS. Also, only an issue if youâ€™re already owned, so maybe not an issue?

How to get around it? csrf_exempt

SQLi (brief definition)

Djangoâ€™s ORM makes clean sql, (even when given bad data?)

How?

How to get around it: extra()/RawSQL()

Clickjacking protection (brief definition)

Django has middleware that sets headers browsers are supposed to respect

Which browsers? https://docs.djangoproject.com/en/1.8/ref/clickjacking/#limitations

How to get around it: xframe_options_exempt, xframe_options_deny, xframe_options_sameorigin

HTTPS

This one is less "out of the box" than the others, so wonâ€™t be talked about here.
Host Header Validation (brief definition)

Django verifies against allowed hosts in settings

How? get_host()

Session security

What are django sessions?

Cookie-based by design

How can we make this better?

Overall: Vigilance. Be aware of uses of this within your product

XSS, CSRF, SQLi, Clickjacking: Have them all enabled, write rules to check for "escape-hatch" functions

HTTPS:

Use it!

Set the correct settings

SECURE_SSL_REDIRECT: How does it work?

Other things

django-secure

https://www.ponycheckup.com/

http://nerd.kelseyinnis.com/blog/2015/09/08/making-django-really-really-ridiculously-secure/

This talk was presented at: https://2016.djangocon.us/schedule/presentation/10/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:14,059 --> 00:00:18,600
thank you all so much for coming to

00:00:16,500 --> 00:00:20,970
Jango Kahn's story our I'm really happy

00:00:18,600 --> 00:00:24,269
you could all join me today today's

00:00:20,970 --> 00:00:30,060
story is frog and toad learn Django

00:00:24,269 --> 00:00:34,140
security frog and toad are friends one

00:00:30,060 --> 00:00:36,989
day frog came up to toad and said I have

00:00:34,140 --> 00:00:39,030
this great idea for a startup I'll do

00:00:36,989 --> 00:00:40,800
all the business II work and you toad

00:00:39,030 --> 00:00:43,010
can code all of it doesn't that sound

00:00:40,800 --> 00:00:43,010
great

00:00:43,430 --> 00:00:49,469
the startup is going to be called besos

00:00:46,050 --> 00:00:51,660
books it'll be a site for selling books

00:00:49,469 --> 00:00:53,250
authors can have a forum where they put

00:00:51,660 --> 00:00:55,379
in book information the book information

00:00:53,250 --> 00:00:57,090
will get put on a page and people can

00:00:55,379 --> 00:00:58,829
come to our site and buy books that

00:00:57,090 --> 00:01:04,100
authors put up I'm sure it'll be easy

00:00:58,829 --> 00:01:07,650
I'm sure we'll make lots of money now

00:01:04,100 --> 00:01:10,619
toad is a Django toad not a flask frog

00:01:07,650 --> 00:01:13,650
and so he decides that he's going to

00:01:10,619 --> 00:01:15,420
make pesos books in Django and he goes

00:01:13,650 --> 00:01:19,080
back to toad and tells him this and toad

00:01:15,420 --> 00:01:21,390
says that's great but all of the other

00:01:19,080 --> 00:01:23,909
startup friends that I have in the lily

00:01:21,390 --> 00:01:28,229
pond keep losing customers because of

00:01:23,909 --> 00:01:29,939
security exploits is Django secure so

00:01:28,229 --> 00:01:31,740
toad thinks about it and he goes and

00:01:29,939 --> 00:01:32,430
does some reading and he discovers that

00:01:31,740 --> 00:01:34,860
yes

00:01:32,430 --> 00:01:37,490
within reason Django is secure and he

00:01:34,860 --> 00:01:40,670
goes to tell his friend frog about it

00:01:37,490 --> 00:01:43,770
the first thing he tells frog about is

00:01:40,670 --> 00:01:45,950
xxs or cross-site scripting

00:01:43,770 --> 00:01:48,869
vulnerabilities now

00:01:45,950 --> 00:01:51,930
frog asks what's a cross-site scripting

00:01:48,869 --> 00:01:53,880
vulnerability and toad says I'm glad you

00:01:51,930 --> 00:01:57,990
asked frog a cross-site scripting

00:01:53,880 --> 00:02:00,090
vulnerability is when someone who can

00:01:57,990 --> 00:02:03,180
put information on to our into our site

00:02:00,090 --> 00:02:05,969
that we render to a page puts in things

00:02:03,180 --> 00:02:08,250
to be rendered that are supposed to harm

00:02:05,969 --> 00:02:10,830
or affect the user in a way we don't

00:02:08,250 --> 00:02:12,480
want so because we have a forum where

00:02:10,830 --> 00:02:13,900
authors can put in book information if

00:02:12,480 --> 00:02:16,450
they put it if they

00:02:13,900 --> 00:02:17,590
put in some nasty JavaScript our users

00:02:16,450 --> 00:02:19,510
could lose their credit card information

00:02:17,590 --> 00:02:22,599
or have all sorts of secrets stolen and

00:02:19,510 --> 00:02:24,549
that would be very bad frog says yes

00:02:22,599 --> 00:02:27,849
that would be very bad toad does Django

00:02:24,549 --> 00:02:31,959
protect us from this and toad says yes

00:02:27,849 --> 00:02:34,750
dango does if the user puts in something

00:02:31,959 --> 00:02:37,329
like a script tag Django when we render

00:02:34,750 --> 00:02:39,940
that to HTML is going to escape the

00:02:37,329 --> 00:02:43,569
nasty characters in that strip tag or in

00:02:39,940 --> 00:02:45,670
that script tag and because to--it is a

00:02:43,569 --> 00:02:48,250
very clever toad he dug into the Django

00:02:45,670 --> 00:02:50,200
source code and saw exactly the function

00:02:48,250 --> 00:02:51,370
that is doing this and toad was

00:02:50,200 --> 00:02:53,260
surprised that it's actually a very

00:02:51,370 --> 00:02:55,150
simple function a function that

00:02:53,260 --> 00:02:59,170
basically hasn't been changed and Simon

00:02:55,150 --> 00:03:00,819
Willison wrote it like a decade ago what

00:02:59,170 --> 00:03:02,590
the very simple escaping function does

00:03:00,819 --> 00:03:04,810
is look for characters that could be

00:03:02,590 --> 00:03:08,200
harmful and replace them with safe HTML

00:03:04,810 --> 00:03:09,819
entities toad is very clever toad and so

00:03:08,200 --> 00:03:12,310
he found out where that function lives

00:03:09,819 --> 00:03:16,269
and because he wanted a complete picture

00:03:12,310 --> 00:03:21,669
of how Django handles this rendering

00:03:16,269 --> 00:03:24,910
system he learned that where Escape is

00:03:21,669 --> 00:03:28,209
called is in nodes when the context is

00:03:24,910 --> 00:03:30,489
used to render a template a tree of

00:03:28,209 --> 00:03:33,849
nodes is created to represent the HTML

00:03:30,489 --> 00:03:35,230
in that template if a template should

00:03:33,849 --> 00:03:37,900
have something change about it because a

00:03:35,230 --> 00:03:40,629
variable has been put in a aptly named

00:03:37,900 --> 00:03:42,340
variable node is created that variable

00:03:40,629 --> 00:03:45,940
node has a render method like all nodes

00:03:42,340 --> 00:03:47,650
in the Django rip Dom representation it

00:03:45,940 --> 00:03:49,239
has a method called a conditional escape

00:03:47,650 --> 00:03:51,129
which checks if it should escape the

00:03:49,239 --> 00:03:53,829
string and if it does it calls that

00:03:51,129 --> 00:03:56,620
escape function that toad discovered

00:03:53,829 --> 00:03:59,680
earlier frog is very happy about this

00:03:56,620 --> 00:04:01,389
and asks his friend toad but toad what

00:03:59,680 --> 00:04:02,980
if there are cases where we really don't

00:04:01,389 --> 00:04:05,680
want things escaped for some reason we

00:04:02,980 --> 00:04:07,060
actually do want HTML on the page toe it

00:04:05,680 --> 00:04:09,400
isn't sure about this he thinks that's a

00:04:07,060 --> 00:04:11,199
bad idea for security but he tells his

00:04:09,400 --> 00:04:13,750
friend frog well we have these helpers

00:04:11,199 --> 00:04:17,139
called mark safe and pipe n and pipe

00:04:13,750 --> 00:04:18,609
safe that will let us put HTML right

00:04:17,139 --> 00:04:20,139
into the page and have it rendered the

00:04:18,609 --> 00:04:22,510
way we expect but we should be very

00:04:20,139 --> 00:04:24,010
careful about using these frog frog

00:04:22,510 --> 00:04:25,180
knowledge say Julian says yes of course

00:04:24,010 --> 00:04:27,330
we should be very careful about using

00:04:25,180 --> 00:04:31,210
these

00:04:27,330 --> 00:04:34,110
the next thing that toad tells frog

00:04:31,210 --> 00:04:37,229
about is CSRF or cross-site request

00:04:34,110 --> 00:04:38,740
forgeries and the way he tells it is

00:04:37,229 --> 00:04:40,620
frogs ass

00:04:38,740 --> 00:04:42,849
what else is Django protect us from and

00:04:40,620 --> 00:04:45,759
toad replies well Django tries to

00:04:42,849 --> 00:04:47,770
protect us from CSRF attacks CSRF stands

00:04:45,759 --> 00:04:49,120
for cross-site request forgery and it

00:04:47,770 --> 00:04:51,550
could cause our site to do things

00:04:49,120 --> 00:04:53,919
against the users wishes here's an

00:04:51,550 --> 00:04:55,930
example say our site had a delete button

00:04:53,919 --> 00:04:57,729
for authors to delete their books if

00:04:55,930 --> 00:04:59,860
that button was just a simple request

00:04:57,729 --> 00:05:01,960
against our site and we didn't have CSRF

00:04:59,860 --> 00:05:03,789
configured correctly some other site

00:05:01,960 --> 00:05:05,909
could link to our site and trick authors

00:05:03,789 --> 00:05:07,870
until eating their books to that link

00:05:05,909 --> 00:05:09,699
frog says whoo

00:05:07,870 --> 00:05:11,770
that sounds bad we don't want to do that

00:05:09,699 --> 00:05:13,259
toad agrees we don't want to do that and

00:05:11,770 --> 00:05:16,300
luckily out of the box

00:05:13,259 --> 00:05:21,099
Django tries to protect us from that by

00:05:16,300 --> 00:05:22,689
using CR SCR CSRF view middleware toad

00:05:21,099 --> 00:05:24,430
is a very clever toad so he digs into

00:05:22,689 --> 00:05:27,779
the source code and finds exactly where

00:05:24,430 --> 00:05:30,189
the CSRF hew middleware is defined

00:05:27,779 --> 00:05:31,599
Toyota digs even deeper because he wants

00:05:30,189 --> 00:05:33,250
to have a whole picture of how the

00:05:31,599 --> 00:05:35,729
system works and comes up with some

00:05:33,250 --> 00:05:39,250
clever pseudocode to explain to frog

00:05:35,729 --> 00:05:40,930
what the CSRF system is doing if the

00:05:39,250 --> 00:05:43,539
middleware detects that a request is a

00:05:40,930 --> 00:05:46,509
post it gets the CSRF token from the

00:05:43,539 --> 00:05:49,719
cookie that's on the request it gets the

00:05:46,509 --> 00:05:53,409
CSRF middleware token from the request

00:05:49,719 --> 00:05:55,569
post data and if they both match and the

00:05:53,409 --> 00:05:57,819
request is accepted and everything moves

00:05:55,569 --> 00:06:01,830
on if they don't match then the request

00:05:57,819 --> 00:06:03,219
is rejected and the user gets an error

00:06:01,830 --> 00:06:05,680
frog

00:06:03,219 --> 00:06:07,089
thinks this is amazing he likes that

00:06:05,680 --> 00:06:09,339
their site is protected because he heard

00:06:07,089 --> 00:06:11,169
about some weird thing years ago where

00:06:09,339 --> 00:06:12,430
Google tried to helpfully preload links

00:06:11,169 --> 00:06:17,949
and ended up deleting a lot of blog

00:06:12,430 --> 00:06:20,770
posts so he asks this is great toad but

00:06:17,949 --> 00:06:23,169
is there a way to get around it and toad

00:06:20,770 --> 00:06:25,020
says well yes again we should be very

00:06:23,169 --> 00:06:28,689
careful about using these things but

00:06:25,020 --> 00:06:30,490
there is CSRF exempt which is a

00:06:28,689 --> 00:06:32,800
decorator that we can put around our

00:06:30,490 --> 00:06:35,800
views and when we decorate our views

00:06:32,800 --> 00:06:39,350
this way then we skip the CSRF

00:06:35,800 --> 00:06:41,780
protection in the middleware

00:06:39,350 --> 00:06:44,420
so it is a very clever toad and he looks

00:06:41,780 --> 00:06:47,660
up exactly where that CSRF exempt

00:06:44,420 --> 00:06:49,130
decorator lives and then plays around a

00:06:47,660 --> 00:06:51,440
bit with how he would use it for both

00:06:49,130 --> 00:06:54,200
function based views and class based

00:06:51,440 --> 00:06:55,970
views you notice is that for class based

00:06:54,200 --> 00:06:58,610
views he has to import a second method

00:06:55,970 --> 00:07:05,780
decorator which strikes him as odd but

00:06:58,610 --> 00:07:08,420
he moves on appropriately he now updates

00:07:05,780 --> 00:07:12,200
his pseudo code if the request is a post

00:07:08,420 --> 00:07:16,520
and the view is not CSRF exempt then we

00:07:12,200 --> 00:07:18,110
do everything else now they were frog

00:07:16,520 --> 00:07:20,090
and toad were walking along as they said

00:07:18,110 --> 00:07:22,220
this and they were ending their day

00:07:20,090 --> 00:07:25,520
enjoying some lovely lovely

00:07:22,220 --> 00:07:28,400
chocolate-chip cookies back at frogs

00:07:25,520 --> 00:07:29,690
house and toad said you know these

00:07:28,400 --> 00:07:31,970
cookies remind me do you want to know

00:07:29,690 --> 00:07:33,200
something interesting frog and frog said

00:07:31,970 --> 00:07:36,320
yes I would love to know something

00:07:33,200 --> 00:07:38,930
interesting you are my friend and tow it

00:07:36,320 --> 00:07:41,390
says there's a special thing you can do

00:07:38,930 --> 00:07:44,270
with cookies where you can say this

00:07:41,390 --> 00:07:48,400
cookie should be HTTP only and therefore

00:07:44,270 --> 00:07:51,380
only be able to be read by the server

00:07:48,400 --> 00:07:53,620
but the Django CSRF cookies aren't set

00:07:51,380 --> 00:07:55,820
that way isn't that interesting frog

00:07:53,620 --> 00:07:57,200
frog isn't exactly sure why that's

00:07:55,820 --> 00:07:58,550
interesting but he knows along because

00:07:57,200 --> 00:08:02,480
he likes toad and toadette is doing all

00:07:58,550 --> 00:08:05,080
this work for him and toad says this is

00:08:02,480 --> 00:08:08,660
interesting because it means that

00:08:05,080 --> 00:08:13,490
javascript can read and effect the CSRF

00:08:08,660 --> 00:08:17,510
cookie that is set in the request that

00:08:13,490 --> 00:08:19,550
is set in the browser and frog goes well

00:08:17,510 --> 00:08:22,220
that certainly is interesting he's still

00:08:19,550 --> 00:08:24,920
not sure he gets it and toad goes and we

00:08:22,220 --> 00:08:28,130
asked some Django people why this might

00:08:24,920 --> 00:08:32,240
be and the answer is for JavaScript

00:08:28,130 --> 00:08:33,919
forms when you do that jQuery AJAX you

00:08:32,240 --> 00:08:36,620
need to set it up with the correct CSRF

00:08:33,919 --> 00:08:39,530
token and you need to be able to read

00:08:36,620 --> 00:08:41,990
that CSRF token so it can't be set HTTP

00:08:39,530 --> 00:08:47,210
only isn't that interesting frog and

00:08:41,990 --> 00:08:50,590
frog goes yes very interesting what else

00:08:47,210 --> 00:08:55,390
do we need to be protected from

00:08:50,590 --> 00:08:58,570
next toad tells frog about sequel I

00:08:55,390 --> 00:09:00,910
injections and he says these are really

00:08:58,570 --> 00:09:02,950
bad these are so bad that if we're

00:09:00,910 --> 00:09:03,940
vulnerable to these we could lose

00:09:02,950 --> 00:09:05,410
everything we could lose all our

00:09:03,940 --> 00:09:06,820
financial data all of our user data

00:09:05,410 --> 00:09:08,490
people could buy all the books they

00:09:06,820 --> 00:09:10,990
wanted it would be horrible

00:09:08,490 --> 00:09:12,850
frog looks appropriately alarmed and

00:09:10,990 --> 00:09:14,650
says are we protected from this and toad

00:09:12,850 --> 00:09:17,280
says well yes yes we are protected from

00:09:14,650 --> 00:09:22,420
this because Django does the right thing

00:09:17,280 --> 00:09:26,080
which as it turns out is nothing all

00:09:22,420 --> 00:09:28,950
Django does is not screw up the barrier

00:09:26,080 --> 00:09:31,330
between code and data when you make a

00:09:28,950 --> 00:09:34,630
query set and you make a request against

00:09:31,330 --> 00:09:37,540
the database with the ORM Django keeps

00:09:34,630 --> 00:09:39,490
the sequel logic separate from the data

00:09:37,540 --> 00:09:42,070
that is being collected with the sequel

00:09:39,490 --> 00:09:44,290
logic and passes them as two separate

00:09:42,070 --> 00:09:46,720
parts all the way to the database

00:09:44,290 --> 00:09:48,370
handler and then the database handler

00:09:46,720 --> 00:09:50,710
does the escaping that is appropriate

00:09:48,370 --> 00:09:54,040
for that database Django just has to not

00:09:50,710 --> 00:09:56,740
screw things up and it doesn't frog goes

00:09:54,040 --> 00:09:58,030
that's great but I was talking to some

00:09:56,740 --> 00:09:59,980
analysts and they said that sometimes

00:09:58,030 --> 00:10:01,750
they really need to get like raw sequel

00:09:59,980 --> 00:10:03,520
into the database toad isn't very

00:10:01,750 --> 00:10:05,950
certain about this but he says okay if

00:10:03,520 --> 00:10:07,510
we actually need to do this Django has

00:10:05,950 --> 00:10:09,160
some methods that can do this

00:10:07,510 --> 00:10:10,750
there's the dot extra method there's the

00:10:09,160 --> 00:10:13,150
raw sequel there's the dot raw on

00:10:10,750 --> 00:10:14,890
managers but we really shouldn't do this

00:10:13,150 --> 00:10:17,500
unless we're absolutely certain we want

00:10:14,890 --> 00:10:21,340
to be doing this and frog says of course

00:10:17,500 --> 00:10:23,560
toad will be perfectly safe the next

00:10:21,340 --> 00:10:28,300
thing that toad tells frog about is

00:10:23,560 --> 00:10:31,270
clickjacking clickjacking Toto strong is

00:10:28,300 --> 00:10:36,040
particularly subtle what people can do

00:10:31,270 --> 00:10:38,590
is wrap our entire page in an iframe on

00:10:36,040 --> 00:10:40,570
a different URL and make it look like

00:10:38,590 --> 00:10:41,680
people are browsing our site when really

00:10:40,570 --> 00:10:44,320
they're browsing somebody else's site

00:10:41,680 --> 00:10:46,330
and if they're browsing somebody else's

00:10:44,320 --> 00:10:47,770
site with our site and iframe then when

00:10:46,330 --> 00:10:49,960
they enter their password into our site

00:10:47,770 --> 00:10:51,580
that person could collect it isn't that

00:10:49,960 --> 00:10:54,100
awful and frog goes yes that's very

00:10:51,580 --> 00:10:56,590
awful how we can prevent that right and

00:10:54,100 --> 00:10:58,960
so it says yes we can prevent that

00:10:56,590 --> 00:11:01,570
through the X frame options middleware

00:10:58,960 --> 00:11:02,860
which is also enabled by default on

00:11:01,570 --> 00:11:06,320
Django

00:11:02,860 --> 00:11:08,180
the X frames option the X frame options

00:11:06,320 --> 00:11:10,340
middleware tolerance because he's a very

00:11:08,180 --> 00:11:17,110
clever tone lives in this particular

00:11:10,340 --> 00:11:20,180
location on github and makes sure that

00:11:17,110 --> 00:11:22,400
the browser's would respect it will only

00:11:20,180 --> 00:11:25,640
display the site if it's the same origin

00:11:22,400 --> 00:11:28,810
of course you can get around that with

00:11:25,640 --> 00:11:31,750
the X frames option exempt decorator and

00:11:28,810 --> 00:11:34,400
it only works in certain browsers

00:11:31,750 --> 00:11:36,050
unfortunately but it's a very good thing

00:11:34,400 --> 00:11:38,120
to do if you're worried about running an

00:11:36,050 --> 00:11:40,340
e-commerce site like say Bezos books

00:11:38,120 --> 00:11:41,390
where people could be trying to steal

00:11:40,340 --> 00:11:46,040
your credit card information or

00:11:41,390 --> 00:11:47,680
passwords next toad tells frog about

00:11:46,040 --> 00:11:50,120
host header validation

00:11:47,680 --> 00:11:53,570
howÃ­s header validation works with

00:11:50,120 --> 00:11:57,560
clickjacking in a way to make sure that

00:11:53,570 --> 00:11:59,390
only the host that is supposed to be

00:11:57,560 --> 00:12:01,910
rendering the site can render this site

00:11:59,390 --> 00:12:04,820
toad made the mistake very early on as

00:12:01,910 --> 00:12:06,320
many django developers do of not setting

00:12:04,820 --> 00:12:08,840
the correct

00:12:06,320 --> 00:12:10,640
allowed hosts in his settings file

00:12:08,840 --> 00:12:12,620
before he deployed to production and got

00:12:10,640 --> 00:12:14,300
that lovely error that means that he

00:12:12,620 --> 00:12:15,620
spent 10 minutes googling because he

00:12:14,300 --> 00:12:18,950
couldn't figure out why django wasn't

00:12:15,620 --> 00:12:21,920
working and the pseudocode looks

00:12:18,950 --> 00:12:24,920
something like this the requests in in

00:12:21,920 --> 00:12:26,780
the middle where the middleware checks

00:12:24,920 --> 00:12:28,790
the request checks the domain of the

00:12:26,780 --> 00:12:31,220
request sees if it's an allowed host and

00:12:28,790 --> 00:12:37,520
then proceeds otherwise it raises an

00:12:31,220 --> 00:12:39,380
error finally they get two passwords and

00:12:37,520 --> 00:12:40,940
toad is really excited about passwords

00:12:39,380 --> 00:12:44,060
which is weird because nobody should be

00:12:40,940 --> 00:12:45,110
very excited about passwords and Frog

00:12:44,060 --> 00:12:46,250
says toad you're so excited about

00:12:45,110 --> 00:12:48,620
pastors why are you so excited about

00:12:46,250 --> 00:12:49,850
passwords and toad says the reason I'm

00:12:48,620 --> 00:12:53,270
so excited about passwords is because

00:12:49,850 --> 00:12:55,730
what Django does is so cool Django

00:12:53,270 --> 00:12:57,440
hashes passwords which is common all

00:12:55,730 --> 00:12:59,420
Goodwyn web frameworks should hash

00:12:57,440 --> 00:13:00,890
passwords but the way it hashes

00:12:59,420 --> 00:13:04,580
passwords and the way it does password

00:13:00,890 --> 00:13:06,590
upgrades is really nifty when it hashes

00:13:04,580 --> 00:13:09,140
your password on login it checks this

00:13:06,590 --> 00:13:13,370
Django contrib auth hashes check pardon

00:13:09,140 --> 00:13:15,370
and if you have upgraded your hasher it

00:13:13,370 --> 00:13:16,810
checks against the old hash

00:13:15,370 --> 00:13:18,880
the password against the old hash to see

00:13:16,810 --> 00:13:20,560
if it should be a login and if so it

00:13:18,880 --> 00:13:22,540
automatically rehashes it with the new

00:13:20,560 --> 00:13:24,880
algorithm so you get automatic security

00:13:22,540 --> 00:13:26,170
upgrades as you're moving through the

00:13:24,880 --> 00:13:28,600
lifetime of your product isn't that

00:13:26,170 --> 00:13:29,529
amazing frog says yes that's amazing

00:13:28,600 --> 00:13:34,210
that's so cool

00:13:29,529 --> 00:13:36,160
and - it smiles so having gone through

00:13:34,210 --> 00:13:39,040
all that frog

00:13:36,160 --> 00:13:41,920
so all that toad discovered Frog asks

00:13:39,040 --> 00:13:43,930
toad that's all great really quite

00:13:41,920 --> 00:13:44,350
amazing but what can we do to make this

00:13:43,930 --> 00:13:47,350
better

00:13:44,350 --> 00:13:54,850
how can we improve the security of our

00:13:47,350 --> 00:13:57,220
Django site and toad says well the first

00:13:54,850 --> 00:13:59,260
thing we can do is be constantly

00:13:57,220 --> 00:14:03,430
vigilant all those things I talked about

00:13:59,260 --> 00:14:05,410
all the ways to get around the built-in

00:14:03,430 --> 00:14:08,740
Django security features we should be

00:14:05,410 --> 00:14:12,040
doing everything we can to limit the use

00:14:08,740 --> 00:14:13,570
of those one great way of doing this is

00:14:12,040 --> 00:14:15,430
having our code review tool

00:14:13,570 --> 00:14:19,360
automatically alert us when it detects

00:14:15,430 --> 00:14:23,680
things like CSRF exempt or pipe n or

00:14:19,360 --> 00:14:26,170
mark safe so that me especially as CTO I

00:14:23,680 --> 00:14:29,320
am CTO right and frog says yes yes your

00:14:26,170 --> 00:14:31,030
CTL that me as CTO get alerted when

00:14:29,320 --> 00:14:33,880
somebody is using these very unsafe

00:14:31,030 --> 00:14:35,470
parts of Django additionally we should

00:14:33,880 --> 00:14:37,780
be doing regular code reviews and we

00:14:35,470 --> 00:14:39,220
should be having tests to make sure that

00:14:37,780 --> 00:14:41,200
all of our security features are up to

00:14:39,220 --> 00:14:43,089
snuff we should also be doing regular

00:14:41,200 --> 00:14:46,180
security audits to make sure that our

00:14:43,089 --> 00:14:48,490
product can't be hacked into by people

00:14:46,180 --> 00:14:50,320
who aren't us frog says that sounds like

00:14:48,490 --> 00:14:52,420
a lot of work are you sure we need to do

00:14:50,320 --> 00:14:54,880
all of that until it says yes it's very

00:14:52,420 --> 00:14:56,589
important if we don't do this and if we

00:14:54,880 --> 00:14:58,690
don't do this on a regular basis we

00:14:56,589 --> 00:15:00,370
might be exposed and lose all of our

00:14:58,690 --> 00:15:02,650
customers data frog looks suitably

00:15:00,370 --> 00:15:08,410
alarmed and says yes that is very very

00:15:02,650 --> 00:15:11,320
bad the next thing that we could be

00:15:08,410 --> 00:15:15,010
doing says toad is making sure our site

00:15:11,320 --> 00:15:16,450
is served over HTTPS and luckily Django

00:15:15,010 --> 00:15:19,209
makes this easier and easier all the

00:15:16,450 --> 00:15:21,850
time you can serve cookies securely you

00:15:19,209 --> 00:15:24,520
can set your settings to you to only

00:15:21,850 --> 00:15:25,839
allow secure URLs but it's very critical

00:15:24,520 --> 00:15:27,790
especially since we're an e-commerce

00:15:25,839 --> 00:15:31,270
site that we only use

00:15:27,790 --> 00:15:32,560
HTTP on our site so I know it's going to

00:15:31,270 --> 00:15:35,230
be a little bit more money to get the

00:15:32,560 --> 00:15:37,900
HTTPS certificate frog but it is very

00:15:35,230 --> 00:15:40,120
worth it I promise you do you want the

00:15:37,900 --> 00:15:41,530
government snooping in on what are on

00:15:40,120 --> 00:15:44,080
what books our users are buying

00:15:41,530 --> 00:15:45,670
frog thinks about it thinks about the

00:15:44,080 --> 00:15:46,900
romances he's been buying recently and

00:15:45,670 --> 00:15:52,060
says no I don't want anybody knowing

00:15:46,900 --> 00:15:54,910
what I'm buying on our site the next

00:15:52,060 --> 00:15:57,960
thing we could be doing says toad is

00:15:54,910 --> 00:16:01,210
having a content security policy a

00:15:57,960 --> 00:16:03,040
content security policy is another thing

00:16:01,210 --> 00:16:05,440
that the browser respects that you set

00:16:03,040 --> 00:16:09,430
on your server and what it says is hey

00:16:05,440 --> 00:16:12,250
browser please only allow content from

00:16:09,430 --> 00:16:13,750
these domains and the browser says well

00:16:12,250 --> 00:16:15,460
you've told me to only load-count it

00:16:13,750 --> 00:16:17,860
allow a content from these domains I'm

00:16:15,460 --> 00:16:20,470
going to block hard anything that you

00:16:17,860 --> 00:16:22,540
tell me to block but I will also if you

00:16:20,470 --> 00:16:24,580
tell me to just log I will let you know

00:16:22,540 --> 00:16:26,950
when you are loading content from

00:16:24,580 --> 00:16:29,860
unauthorized domains which is really

00:16:26,950 --> 00:16:33,100
great for frog and toad site because it

00:16:29,860 --> 00:16:34,960
means they can allow certain HTML to be

00:16:33,100 --> 00:16:37,870
put in to load images from certain sites

00:16:34,960 --> 00:16:40,990
but not allow images or links from other

00:16:37,870 --> 00:16:42,730
sites and block those at the CSP level

00:16:40,990 --> 00:16:46,170
rather than having to write complicated

00:16:42,730 --> 00:16:50,320
rules for checking the HTML in the code

00:16:46,170 --> 00:16:52,660
so toad recommends - frog we must set a

00:16:50,320 --> 00:16:54,250
CSP policy at the very least we should

00:16:52,660 --> 00:16:56,950
set a logging policy so we know where

00:16:54,250 --> 00:16:59,080
our users are trying to access assets

00:16:56,950 --> 00:17:00,970
but if we could we should be trying to

00:16:59,080 --> 00:17:02,560
set a blocking policy so we don't allow

00:17:00,970 --> 00:17:07,120
anything that we don't trust on our site

00:17:02,560 --> 00:17:10,630
the next thing we could be doing says

00:17:07,120 --> 00:17:13,390
toad is setting Django encrypted fields

00:17:10,630 --> 00:17:16,900
and using those to store confidential

00:17:13,390 --> 00:17:18,760
information like passwords or user

00:17:16,900 --> 00:17:21,610
credit card information or any other

00:17:18,760 --> 00:17:24,430
personally identifying information if we

00:17:21,610 --> 00:17:26,200
set this and set it with a key and come

00:17:24,430 --> 00:17:28,030
up with a good key management policy

00:17:26,200 --> 00:17:30,490
which is unfortunately tricky l in its

00:17:28,030 --> 00:17:33,160
own right then we can be reasonably

00:17:30,490 --> 00:17:35,800
certain that at least at rest our data

00:17:33,160 --> 00:17:37,360
our user's data will be protected which

00:17:35,800 --> 00:17:39,100
is very important you understand it's

00:17:37,360 --> 00:17:40,620
important right frog and frog says yes I

00:17:39,100 --> 00:17:43,050
understand it's important

00:17:40,620 --> 00:17:44,940
and Toad says with Django encrypted

00:17:43,050 --> 00:17:47,820
fields protecting our data at rest and

00:17:44,940 --> 00:17:51,540
HTTP protecting our data in transit we

00:17:47,820 --> 00:17:53,520
now have a much tighter attack surface

00:17:51,540 --> 00:17:57,000
and it's much harder for our users data

00:17:53,520 --> 00:18:00,270
to get leaked the other thing we could

00:17:57,000 --> 00:18:02,790
do which is fortunately now bundled into

00:18:00,270 --> 00:18:04,920
a lot of later versions of Django is use

00:18:02,790 --> 00:18:07,230
Django secure and set some of the

00:18:04,920 --> 00:18:09,540
settings there to really tighten down

00:18:07,230 --> 00:18:16,050
any of the areas of Django that we

00:18:09,540 --> 00:18:19,770
haven't explicitly covered and there's a

00:18:16,050 --> 00:18:23,070
great tool online says toad called pony

00:18:19,770 --> 00:18:25,080
check up which will go over our entire

00:18:23,070 --> 00:18:27,690
site and scan for common Django

00:18:25,080 --> 00:18:29,460
vulnerabilities and I've heard it says

00:18:27,690 --> 00:18:31,590
toad that if we get a hundred percent on

00:18:29,460 --> 00:18:37,500
our site on pony check up Eric will give

00:18:31,590 --> 00:18:40,710
us a sticker of course there are lots of

00:18:37,500 --> 00:18:44,670
other resources in the community one of

00:18:40,710 --> 00:18:46,679
which are talks from previous django

00:18:44,670 --> 00:18:48,570
cons like making Django ridiculously

00:18:46,679 --> 00:18:50,610
secure by Kelsey Gilmore in his last

00:18:48,570 --> 00:18:52,740
year but also her security talk from

00:18:50,610 --> 00:18:56,429
Pike on this year which toad very much

00:18:52,740 --> 00:18:59,490
encourages frog to go watch having done

00:18:56,429 --> 00:19:04,220
all of this and having tried to firmly

00:18:59,490 --> 00:19:06,630
explain to frog all the vagaries of

00:19:04,220 --> 00:19:08,550
securing a Django site and everything

00:19:06,630 --> 00:19:10,320
that Django does and digging deep into

00:19:08,550 --> 00:19:11,910
the code examples to prove to himself

00:19:10,320 --> 00:19:12,470
that the Django security works the way

00:19:11,910 --> 00:19:15,690
it should

00:19:12,470 --> 00:19:18,090
toad goes and asks frog frog do you have

00:19:15,690 --> 00:19:21,559
any other questions and frog thinks

00:19:18,090 --> 00:19:23,760
about it and things about it and says

00:19:21,559 --> 00:19:25,350
I'm not sure I want to run a startup

00:19:23,760 --> 00:19:27,800
anymore but I definitely know a lot more

00:19:25,350 --> 00:19:27,800
about security

00:19:35,919 --> 00:19:40,429
so thank you very much

00:19:37,789 --> 00:19:42,230
as AJ mentioned my name is Phillip James

00:19:40,429 --> 00:19:43,700
I am a senior software engineer at

00:19:42,230 --> 00:19:44,809
Eventbrite if you're interested in

00:19:43,700 --> 00:19:47,179
hearing more about that come talk to me

00:19:44,809 --> 00:19:49,730
these slides are online I am

00:19:47,179 --> 00:19:53,090
deliberately leaving time for questions

00:19:49,730 --> 00:19:54,470
this was supposed to be this story is an

00:19:53,090 --> 00:19:55,879
overview of everything that Django

00:19:54,470 --> 00:19:58,100
security is doing and some suggestions

00:19:55,879 --> 00:20:00,379
for making it better the reason there

00:19:58,100 --> 00:20:02,869
isn't a ton more content in this talk is

00:20:00,379 --> 00:20:05,169
because Django does a pretty great job

00:20:02,869 --> 00:20:08,090
out of the box trying to secure it

00:20:05,169 --> 00:20:10,820
having as part of my job had to do kind

00:20:08,090 --> 00:20:13,730
of audits of other web frameworks and

00:20:10,820 --> 00:20:16,460
other web security tools yet Django does

00:20:13,730 --> 00:20:18,409
it right some things that I didn't

00:20:16,460 --> 00:20:19,340
mention that are also super important

00:20:18,409 --> 00:20:22,610
and far the reason I didn't mention them

00:20:19,340 --> 00:20:24,919
is because my lightning talk Django has

00:20:22,610 --> 00:20:27,200
a session cookie sorry no session cookie

00:20:24,919 --> 00:20:28,809
Django has a secret key that if you cut

00:20:27,200 --> 00:20:31,490
my lightning talk you may have seen that

00:20:28,809 --> 00:20:32,929
that secret key does a lot for you that

00:20:31,490 --> 00:20:36,259
you may not realize under the hood like

00:20:32,929 --> 00:20:39,499
doing assigned cookies secure sessions

00:20:36,259 --> 00:20:41,389
and password reset tokens so if you in

00:20:39,499 --> 00:20:44,539
the list of things of ways to make

00:20:41,389 --> 00:20:46,700
Django better if you have at any time in

00:20:44,539 --> 00:20:49,999
the entire lifecycle of your codebase

00:20:46,700 --> 00:20:52,129
push to our secret key to a repo and you

00:20:49,999 --> 00:20:54,019
are still using the secret key please

00:20:52,129 --> 00:20:55,190
please please change it now put in an

00:20:54,019 --> 00:20:58,369
environment variable and never think

00:20:55,190 --> 00:20:59,720
about it again I we have

00:20:58,369 --> 00:21:01,399
probably way more time than I was

00:20:59,720 --> 00:21:04,340
intending for questions sorry about that

00:21:01,399 --> 00:21:06,590
but you know send complaints to Russell

00:21:04,340 --> 00:21:10,879
Keith McGee at Russell at Keith - McGee

00:21:06,590 --> 00:21:15,379
calm and I will open it up for questions

00:21:10,879 --> 00:21:17,869
this time hi what recommendations do you

00:21:15,379 --> 00:21:19,490
have around packages or things that help

00:21:17,869 --> 00:21:22,970
with Jango for things like denial of

00:21:19,490 --> 00:21:26,090
service and more sort of behavioral

00:21:22,970 --> 00:21:29,179
analysis about things that aren't

00:21:26,090 --> 00:21:29,690
strictly strictly dangerous but can be

00:21:29,179 --> 00:21:32,450
dangerous

00:21:29,690 --> 00:21:35,269
yeah that's a great question so I'm

00:21:32,450 --> 00:21:38,990
going to answer this question from two

00:21:35,269 --> 00:21:40,940
approaches one is the approach of a lot

00:21:38,990 --> 00:21:42,740
of users are just hitting my site in

00:21:40,940 --> 00:21:44,779
some way and one is a lot of

00:21:42,740 --> 00:21:48,029
semi-legitimate users are just kind of

00:21:44,779 --> 00:21:50,759
overloading my site right

00:21:48,029 --> 00:21:52,979
I'm going to argue that the hey a lot of

00:21:50,759 --> 00:21:54,629
users are hitting my site is firmly in

00:21:52,979 --> 00:21:56,190
the realm of something that Django

00:21:54,629 --> 00:21:58,679
should not be handling that is the web

00:21:56,190 --> 00:22:00,119
servers job either you figure out a way

00:21:58,679 --> 00:22:02,580
to throw more boxes in front of it or

00:22:00,119 --> 00:22:04,259
you use varnish to do good caching if

00:22:02,580 --> 00:22:06,210
you don't have a lot of content changing

00:22:04,259 --> 00:22:08,399
on your pages but if you are trying to

00:22:06,210 --> 00:22:11,099
do DDoS mitigation mitigation at the

00:22:08,399 --> 00:22:14,070
django level feel free to disagree with

00:22:11,099 --> 00:22:15,899
me I think you've already lost if you

00:22:14,070 --> 00:22:17,489
are having a lot of legitimate actions

00:22:15,899 --> 00:22:20,039
come through your site where like people

00:22:17,489 --> 00:22:22,169
are you think somebody who has a real

00:22:20,039 --> 00:22:23,759
user account might be trying to like

00:22:22,169 --> 00:22:25,889
heavily spam your site or try to break

00:22:23,759 --> 00:22:28,320
it through repetition i heavily

00:22:25,889 --> 00:22:30,809
recommend rate limiting both on like web

00:22:28,320 --> 00:22:34,679
flows and on especially on api flows a

00:22:30,809 --> 00:22:36,239
lot of api packages will build in some

00:22:34,679 --> 00:22:37,979
form of rate limiting right now but it's

00:22:36,239 --> 00:22:39,839
also not that difficult to add I don't

00:22:37,979 --> 00:22:41,729
remember rest framework has rate

00:22:39,839 --> 00:22:43,649
limiting built in Tom's nodding so yeah

00:22:41,729 --> 00:22:46,019
you can do rate limiting at the API

00:22:43,649 --> 00:22:49,529
level but then that's your question yeah

00:22:46,019 --> 00:22:52,769
thank you thank you go this way so when

00:22:49,529 --> 00:22:55,739
using encrypted fields what do you have

00:22:52,769 --> 00:22:57,419
any tips I know it probably be a talk on

00:22:55,739 --> 00:22:59,639
its own but you have any tips for the

00:22:57,419 --> 00:23:01,019
key management policies key management

00:22:59,639 --> 00:23:08,969
is really hard it's Turtles all the way

00:23:01,019 --> 00:23:10,589
down my advice is twofold one make sure

00:23:08,969 --> 00:23:14,279
that it's something that your entire

00:23:10,589 --> 00:23:16,109
team is aware of isn't like key

00:23:14,279 --> 00:23:17,429
management is hard but often the reason

00:23:16,109 --> 00:23:19,529
key management is hard is because

00:23:17,429 --> 00:23:20,820
there's like one flaw that turns out to

00:23:19,529 --> 00:23:22,289
be a human flaw where there was this

00:23:20,820 --> 00:23:23,219
backdoor that nobody knew about to get

00:23:22,289 --> 00:23:26,309
to the place where you're storing your

00:23:23,219 --> 00:23:29,489
keys but that's the human side on the

00:23:26,309 --> 00:23:31,919
technical side I have never seen a

00:23:29,489 --> 00:23:33,239
strong argument against Google keys are

00:23:31,919 --> 00:23:35,190
and especially because there's not

00:23:33,239 --> 00:23:37,019
really anything out on the market

00:23:35,190 --> 00:23:38,460
publicly available that's better I know

00:23:37,019 --> 00:23:40,109
some companies that have rolled their

00:23:38,460 --> 00:23:42,690
own solutions on top of keys are to make

00:23:40,109 --> 00:23:44,700
that better but dig deep into Google

00:23:42,690 --> 00:23:47,369
keys are and should see if that would

00:23:44,700 --> 00:23:49,379
work for you if you don't have dedicated

00:23:47,369 --> 00:23:50,789
security people on your team key

00:23:49,379 --> 00:23:53,339
management is the kind of thing where

00:23:50,789 --> 00:23:54,809
it's probably worth hiring a security

00:23:53,339 --> 00:23:56,190
consultant because you really want to

00:23:54,809 --> 00:23:58,589
get it right and you really want to get

00:23:56,190 --> 00:23:59,639
it right the first time but you probably

00:23:58,589 --> 00:24:01,320
already knew that because why are you

00:23:59,639 --> 00:24:01,950
asking the question so I might eel the

00:24:01,320 --> 00:24:04,620
artists

00:24:01,950 --> 00:24:09,450
use Google keys are it solves most of

00:24:04,620 --> 00:24:11,700
the problem yeah over here hello I have

00:24:09,450 --> 00:24:15,260
a very specific question I'll try to

00:24:11,700 --> 00:24:19,620
explain so we have Django project behind

00:24:15,260 --> 00:24:23,669
some front-end server over HTTP and I'd

00:24:19,620 --> 00:24:25,740
like to use all this SS SSL rate related

00:24:23,669 --> 00:24:28,019
Django settings to secure it

00:24:25,740 --> 00:24:31,110
but behind front-end server we have a

00:24:28,019 --> 00:24:35,250
reverse proxy server which is over HTTP

00:24:31,110 --> 00:24:38,549
and if I will enable all these HTTP only

00:24:35,250 --> 00:24:42,210
features I will break reverse proxy so

00:24:38,549 --> 00:24:46,799
what to do that's a great question I

00:24:42,210 --> 00:24:48,240
would say that you I think in your heart

00:24:46,799 --> 00:24:52,470
of hearts you might already know the

00:24:48,240 --> 00:24:56,730
answer and the answer is wherever if

00:24:52,470 --> 00:24:58,860
you're wherever your HTTP is terminating

00:24:56,730 --> 00:25:02,250
is the last place that your server is

00:24:58,860 --> 00:25:04,260
going to see HTTPS right and so if you

00:25:02,250 --> 00:25:06,480
have an HTTP remote proxy in the middle

00:25:04,260 --> 00:25:23,370
does it really need to be HTTP or can

00:25:06,480 --> 00:25:27,330
you make it HTTP right yeah okay

00:25:23,370 --> 00:25:29,399
so unfortunately it's not so easy to use

00:25:27,330 --> 00:25:33,960
HTTP for reverse proxy because we

00:25:29,399 --> 00:25:37,080
generate they have domain for it which

00:25:33,960 --> 00:25:41,039
includes version and hash and stuff it's

00:25:37,080 --> 00:25:42,360
complex it looks like that guy might

00:25:41,039 --> 00:25:43,769
have a solution I think I'm gonna

00:25:42,360 --> 00:25:45,950
encourage you to talk to him afterwards

00:25:43,769 --> 00:25:50,570
it's not an area that I am an expert in

00:25:45,950 --> 00:25:53,100
but my it probably is possible it's also

00:25:50,570 --> 00:25:54,720
there's probably a hole in it somewhere

00:25:53,100 --> 00:25:56,659
if you try to configure it that way

00:25:54,720 --> 00:26:01,830
looks like you should talk to that guy

00:25:56,659 --> 00:26:04,019
okay thanks hey yeah hi

00:26:01,830 --> 00:26:05,340
so you mentioned the use of django

00:26:04,019 --> 00:26:07,500
encrypted fields and i was just

00:26:05,340 --> 00:26:10,470
wondering if you had any experience or

00:26:07,500 --> 00:26:12,179
opinion about doing a field level

00:26:10,470 --> 00:26:14,130
encryption in the application layer

00:26:12,179 --> 00:26:15,010
versus the database layer using

00:26:14,130 --> 00:26:18,220
something like

00:26:15,010 --> 00:26:21,159
my sequel has AES and crypt Postgres has

00:26:18,220 --> 00:26:24,250
a PG crib and I think aside from the

00:26:21,159 --> 00:26:26,470
concern about portability you know do

00:26:24,250 --> 00:26:29,230
you have any experience or opinion on

00:26:26,470 --> 00:26:32,669
that I don't have any experience doing

00:26:29,230 --> 00:26:35,139
things that way my guess is if you can

00:26:32,669 --> 00:26:37,690
my general philosophy would be that if

00:26:35,139 --> 00:26:39,970
you can get it working locally and you

00:26:37,690 --> 00:26:41,440
can specifically write tests that prove

00:26:39,970 --> 00:26:43,659
that it works locally then you're

00:26:41,440 --> 00:26:45,340
probably fine I'm willing to bet there's

00:26:43,659 --> 00:26:47,919
probably someone in this room who may

00:26:45,340 --> 00:26:52,840
have done that but I don't have any

00:26:47,919 --> 00:26:54,190
direct experience with it hi looks like

00:26:52,840 --> 00:26:59,529
that mic is dead but she's got one for

00:26:54,190 --> 00:27:01,779
you okay so so it's very nice that I can

00:26:59,529 --> 00:27:03,639
encrypt fields in the database and I

00:27:01,779 --> 00:27:06,549
should do that probably in more cases

00:27:03,639 --> 00:27:11,620
than I do even emails our PII at some

00:27:06,549 --> 00:27:14,200
low level level right anyway but I'm

00:27:11,620 --> 00:27:17,889
also supposed to encrypt database

00:27:14,200 --> 00:27:19,389
passwords on the file system I don't

00:27:17,889 --> 00:27:21,070
want to put them in settings but I also

00:27:19,389 --> 00:27:23,529
don't want to use environment variables

00:27:21,070 --> 00:27:26,320
because then it's clear text somewhere

00:27:23,529 --> 00:27:30,250
this is a standard problem wish I could

00:27:26,320 --> 00:27:33,610
use keys are but for government reasons

00:27:30,250 --> 00:27:36,340
our development environment is Windows

00:27:33,610 --> 00:27:39,370
desktop and PI crypto was hard enough I

00:27:36,340 --> 00:27:41,710
don't want to compile cookies are so is

00:27:39,370 --> 00:27:44,830
there a way that I can use the Jango

00:27:41,710 --> 00:27:49,809
secret key that will be an environment

00:27:44,830 --> 00:27:51,299
variable any way to decrypt other things

00:27:49,809 --> 00:27:55,240
that are in settings

00:27:51,299 --> 00:27:56,799
does your in does your secret key need

00:27:55,240 --> 00:27:58,000
to be consistent or you still reliant on

00:27:56,799 --> 00:28:03,700
sessions and the normal authentication

00:27:58,000 --> 00:28:05,350
methods does my secret key need to be

00:28:03,700 --> 00:28:10,750
consistent from server to server or

00:28:05,350 --> 00:28:14,620
overtime from server to server yes I

00:28:10,750 --> 00:28:22,090
said Cass is less secure than using mod

00:28:14,620 --> 00:28:24,220
off-gas and it really is sure the most

00:28:22,090 --> 00:28:26,889
of the things secret key does and Django

00:28:24,220 --> 00:28:28,750
are things that are incredibly helpful

00:28:26,889 --> 00:28:31,210
and incredibly necessary if you are

00:28:28,750 --> 00:28:33,700
into the standard way that Django off

00:28:31,210 --> 00:28:36,450
works if you are using a completely

00:28:33,700 --> 00:28:38,770
different authentication method then

00:28:36,450 --> 00:28:39,909
you're not as relying on the secret key

00:28:38,770 --> 00:28:43,600
and you can just set the secret key to

00:28:39,909 --> 00:28:45,400
like you know call out to random every

00:28:43,600 --> 00:28:46,480
time you load up a server right if it

00:28:45,400 --> 00:28:47,440
doesn't need to be consistent then you

00:28:46,480 --> 00:28:49,980
don't need to even set it an environment

00:28:47,440 --> 00:28:53,130
variable it's just like there to run

00:28:49,980 --> 00:28:55,270
over time but if you need consistency

00:28:53,130 --> 00:28:57,789
and you can't use pi crypto and you

00:28:55,270 --> 00:28:58,809
can't use keys are I can use PI crypto

00:28:57,789 --> 00:29:01,090
you can't you - oh but it's a

00:28:58,809 --> 00:29:03,309
pain to recompile right right that's it

00:29:01,090 --> 00:29:05,590
okay but keys are is the one that I

00:29:03,309 --> 00:29:07,150
would recommend so man that is a great

00:29:05,590 --> 00:29:08,440
question and you don't want to in any

00:29:07,150 --> 00:29:10,809
sort of source control because you don't

00:29:08,440 --> 00:29:13,150
want to in plain text at all I mean I

00:29:10,809 --> 00:29:15,760
mean what what I guess what I'm asking

00:29:13,150 --> 00:29:17,620
is what in the innards of Django which I

00:29:15,760 --> 00:29:21,390
don't know as well as you do Oh would I

00:29:17,620 --> 00:29:24,700
call to encrypt decrypt things using the

00:29:21,390 --> 00:29:28,000
secret key or using any key oh I see

00:29:24,700 --> 00:29:32,650
what you're saying so in the innards of

00:29:28,000 --> 00:29:35,350
Django the secret key is used basically

00:29:32,650 --> 00:29:39,940
in two functions it's used to create

00:29:35,350 --> 00:29:41,710
salted H max for things like the

00:29:39,940 --> 00:29:43,360
password reset token so it's not

00:29:41,710 --> 00:29:46,659
necessarily an encryption that's just

00:29:43,360 --> 00:29:50,020
like creating a hash and it is used for

00:29:46,659 --> 00:29:52,179
the secure cookie signer okay so if

00:29:50,020 --> 00:29:54,280
you're not using not cookies so it's not

00:29:52,179 --> 00:29:57,100
there yeah then you might lion

00:29:54,280 --> 00:29:59,080
it is a key that should be secure so I

00:29:57,100 --> 00:30:02,380
could use it with PI crypto and that's

00:29:59,080 --> 00:30:04,179
my way forward probably so possibly but

00:30:02,380 --> 00:30:06,039
I think the API should try and compile

00:30:04,179 --> 00:30:07,210
keys are maybe you're talking about keys

00:30:06,039 --> 00:30:09,039
are I recommend you talking to Marcus

00:30:07,210 --> 00:30:10,750
yeah Marcus it's down here at the front

00:30:09,039 --> 00:30:14,440
y'all should connect all right question

00:30:10,750 --> 00:30:16,840
I rear I your talk covered a lot of

00:30:14,440 --> 00:30:18,669
things we should do to protect against

00:30:16,840 --> 00:30:21,010
known for its sure what kind of

00:30:18,669 --> 00:30:23,110
defensive programming things should we

00:30:21,010 --> 00:30:26,020
be doing to protect us against the

00:30:23,110 --> 00:30:28,240
unknown threats the ones that may appear

00:30:26,020 --> 00:30:30,190
at some point but we would rather be

00:30:28,240 --> 00:30:33,190
safe when they come out rather than find

00:30:30,190 --> 00:30:34,570
may have to hurry to fix our science

00:30:33,190 --> 00:30:37,440
that's a great question I'm gonna cover

00:30:34,570 --> 00:30:42,400
the mic a bit because I'm gonna yell

00:30:37,440 --> 00:30:45,210
constant vigilance seriously you if

00:30:42,400 --> 00:30:48,100
you're an allergic accompany to have a

00:30:45,210 --> 00:30:49,780
like a group of coders who care about

00:30:48,100 --> 00:30:51,850
security making sure that they are

00:30:49,780 --> 00:30:55,870
trying to review as much code as

00:30:51,850 --> 00:30:58,840
possible you there's no such thing as

00:30:55,870 --> 00:31:00,370
perfect security you can't predict the

00:30:58,840 --> 00:31:02,260
threats that are going to come what you

00:31:00,370 --> 00:31:04,060
can do is make sure that you are

00:31:02,260 --> 00:31:05,380
following good security practices like

00:31:04,060 --> 00:31:07,060
sanitizing data when it comes in

00:31:05,380 --> 00:31:09,010
thinking about how it renders when it

00:31:07,060 --> 00:31:10,900
goes out and making sure that that is

00:31:09,010 --> 00:31:12,430
probably still going to be sane no

00:31:10,900 --> 00:31:13,660
matter what the exploit is because I

00:31:12,430 --> 00:31:17,650
think we're reaching a point where the

00:31:13,660 --> 00:31:18,820
exploits are in we're finding more

00:31:17,650 --> 00:31:20,620
exploits in the browsers we're finding

00:31:18,820 --> 00:31:22,270
some exploits in the servers there's a

00:31:20,620 --> 00:31:25,120
whole category of like certificate

00:31:22,270 --> 00:31:26,920
exploits that is kind of outside the

00:31:25,120 --> 00:31:29,140
scope of what Django can do django

00:31:26,920 --> 00:31:32,500
assumes that by the time a request gets

00:31:29,140 --> 00:31:33,640
to it that a lot of the ssl and

00:31:32,500 --> 00:31:36,670
certificate termination has already

00:31:33,640 --> 00:31:39,370
happened if you want to ask what we do

00:31:36,670 --> 00:31:41,380
specifically we have a group of security

00:31:39,370 --> 00:31:42,940
reviewers we have a group of PCI

00:31:41,380 --> 00:31:45,190
reviewers that look at different things

00:31:42,940 --> 00:31:47,800
because PCI comes with its own bundle of

00:31:45,190 --> 00:31:50,170
tricks and we also make sure that we are

00:31:47,800 --> 00:31:52,210
in our chat which happens to be slack

00:31:50,170 --> 00:31:53,980
subscribing to a lot of security feeds

00:31:52,210 --> 00:31:56,050
so as soon as the Seavey's get announced

00:31:53,980 --> 00:31:58,150
we know and we can get on top of it and

00:31:56,050 --> 00:31:59,470
a lot of times we find that because

00:31:58,150 --> 00:32:01,240
we've been doing security review

00:31:59,470 --> 00:32:03,310
thinking about what's going in and

00:32:01,240 --> 00:32:07,570
what's coming out that we don't need to

00:32:03,310 --> 00:32:09,370
do much and we also don't Django has

00:32:07,570 --> 00:32:11,170
been looked at by so many eyes and

00:32:09,370 --> 00:32:13,420
reviewed so many times that oftentimes

00:32:11,170 --> 00:32:17,140
the new security bugs that are coming

00:32:13,420 --> 00:32:19,090
out are in semi obscure parts of Django

00:32:17,140 --> 00:32:22,030
that we weren't using already so you

00:32:19,090 --> 00:32:24,100
know the answer to your question is

00:32:22,030 --> 00:32:25,570
constant vigilance but B try to be aware

00:32:24,100 --> 00:32:26,860
of your attack surface and that's why I

00:32:25,570 --> 00:32:28,480
really recommend people going and

00:32:26,860 --> 00:32:30,010
watching Kelsey Gilmerton hisses talk

00:32:28,480 --> 00:32:32,530
from last year because she describes

00:32:30,010 --> 00:32:34,780
think about your attack surface think

00:32:32,530 --> 00:32:36,520
about if somebody wanted to attack me

00:32:34,780 --> 00:32:38,860
who's the most likely person to attack

00:32:36,520 --> 00:32:40,710
me and what is their motivation where

00:32:38,860 --> 00:32:43,900
are they going to be coming from I

00:32:40,710 --> 00:32:46,720
Eventbrite our attack service is

00:32:43,900 --> 00:32:48,880
manifold but to go with the obvious case

00:32:46,720 --> 00:32:50,669
people might want free tickets right so

00:32:48,880 --> 00:32:52,840
let's make sure that the

00:32:50,669 --> 00:32:55,120
everything around orders and everything

00:32:52,840 --> 00:32:56,710
around registration is really tight so

00:32:55,120 --> 00:32:59,379
that people can't just like willy-nilly

00:32:56,710 --> 00:33:02,590
get a free ticket but there are some

00:32:59,379 --> 00:33:05,110
places where we may not need to focus as

00:33:02,590 --> 00:33:06,940
much it was a roundabout answer sorry

00:33:05,110 --> 00:33:09,789
did I kind of answer your question it

00:33:06,940 --> 00:33:12,370
was it was great I mean really I think

00:33:09,789 --> 00:33:14,679
you know expanding on all the other

00:33:12,370 --> 00:33:16,600
things that go with security rather than

00:33:14,679 --> 00:33:19,059
pretty protected here's this problem

00:33:16,600 --> 00:33:21,039
because people who think about security

00:33:19,059 --> 00:33:23,019
and say here's the five things I have to

00:33:21,039 --> 00:33:25,269
protect against now I'm done right the

00:33:23,019 --> 00:33:26,919
whole other side of the perspective

00:33:25,269 --> 00:33:28,840
which is there are any number of threats

00:33:26,919 --> 00:33:30,730
out there think about dinner this in a

00:33:28,840 --> 00:33:32,289
systemic way rather than just one two

00:33:30,730 --> 00:33:33,490
three four five and I'm a rip off what

00:33:32,289 --> 00:33:34,330
you said which is they say that there

00:33:33,490 --> 00:33:37,600
are kind of two ways to think about

00:33:34,330 --> 00:33:39,450
security one is the descriptive

00:33:37,600 --> 00:33:42,129
nomenclature way where you try to like

00:33:39,450 --> 00:33:43,360
name every possible attack out there and

00:33:42,129 --> 00:33:45,580
then come out with mitigation steps for

00:33:43,360 --> 00:33:47,110
every name and then and then there's

00:33:45,580 --> 00:33:49,120
like the holistic strategy where it's

00:33:47,110 --> 00:33:51,610
like well we know these are common

00:33:49,120 --> 00:33:53,470
attack patterns we know where the attack

00:33:51,610 --> 00:33:55,659
vectors could be let's focus on like

00:33:53,470 --> 00:33:59,259
building skills that are for these

00:33:55,659 --> 00:34:01,330
specific patterns I'm not a fan of the

00:33:59,259 --> 00:34:02,799
nomenclature specific model of looking

00:34:01,330 --> 00:34:04,720
at security I don't care what you call

00:34:02,799 --> 00:34:07,120
this exploit I want general practices

00:34:04,720 --> 00:34:09,629
that will help me in the future okay one

00:34:07,120 --> 00:34:12,159
final question and then we'll wrap up

00:34:09,629 --> 00:34:15,099
thanks for the talk are there are any

00:34:12,159 --> 00:34:17,740
tools out there to check that my website

00:34:15,099 --> 00:34:21,879
debit that I don't use like type safe in

00:34:17,740 --> 00:34:24,190
templates anywhere so like say that

00:34:21,879 --> 00:34:27,339
again other - it's out there out there

00:34:24,190 --> 00:34:29,470
to root for to try to prove almost my

00:34:27,339 --> 00:34:32,649
site in terms of making sure that I

00:34:29,470 --> 00:34:37,510
don't use pipe safe in templates where I

00:34:32,649 --> 00:34:40,899
should not CSF CSRF except that's where

00:34:37,510 --> 00:34:42,159
I should not that is a great question I

00:34:40,899 --> 00:34:43,569
don't know if it was a leading question

00:34:42,159 --> 00:34:45,010
maybe you were trying to suggest a tool

00:34:43,569 --> 00:34:46,800
there's one that I actually thought that

00:34:45,010 --> 00:34:49,480
just came out yesterday called brute XSS

00:34:46,800 --> 00:34:51,069
that is going to try you feed it a URL

00:34:49,480 --> 00:34:53,829
and it's gonna try to do a bunch of

00:34:51,069 --> 00:34:58,690
brute XSS attacks against your site what

00:34:53,829 --> 00:35:00,339
we do at Eventbrite is we do have

00:34:58,690 --> 00:35:02,109
auditors that try to do some of that for

00:35:00,339 --> 00:35:04,859
us we don't have a

00:35:02,109 --> 00:35:07,420
of automated tools to try to check for

00:35:04,859 --> 00:35:12,539
XSS because our site is very large and

00:35:07,420 --> 00:35:15,069
very old and so what we do do is anytime

00:35:12,539 --> 00:35:16,720
anybody is using anything that looks

00:35:15,069 --> 00:35:19,480
like that even like matches the

00:35:16,720 --> 00:35:21,369
characters safe or pipe n we make sure a

00:35:19,480 --> 00:35:24,130
security reviewer is right there looking

00:35:21,369 --> 00:35:25,839
at making sure that like this isn't

00:35:24,130 --> 00:35:28,059
vulnerable and the same for CSRF exempt

00:35:25,839 --> 00:35:30,099
right like if it has CSRF in the name of

00:35:28,059 --> 00:35:31,599
the review a security reviewer is going

00:35:30,099 --> 00:35:34,660
to have eyes on it and is going to have

00:35:31,599 --> 00:35:36,220
to approve it before it goes out I'm

00:35:34,660 --> 00:35:38,950
sure there are tools out there feel free

00:35:36,220 --> 00:35:40,829
to tweet them at that hashtag and I'll

00:35:38,950 --> 00:35:44,650
retweet them and people can find them

00:35:40,829 --> 00:35:45,999
but I keep harping on the same thing of

00:35:44,650 --> 00:35:47,499
constant vigilance just like try to be

00:35:45,999 --> 00:35:50,920
as aware as possible of what your

00:35:47,499 --> 00:35:52,749
codebase has all right Philip if people

00:35:50,920 --> 00:35:54,489
will have further questions for you it

00:35:52,749 --> 00:35:55,900
sounds like tweeting at you as a good

00:35:54,489 --> 00:35:57,819
suggestion are you gonna be around

00:35:55,900 --> 00:35:59,289
during Sprint's are you open to folks

00:35:57,819 --> 00:36:00,430
just coming up to you in the hall and

00:35:59,289 --> 00:36:01,420
talking about this subject

00:36:00,430 --> 00:36:02,890
you're welcome there just come talk to

00:36:01,420 --> 00:36:05,819
me and I will be here with Sprint's I

00:36:02,890 --> 00:36:08,259
will be sprinting with the beware folk

00:36:05,819 --> 00:36:10,690
come get a coin come talk to me about

00:36:08,259 --> 00:36:12,220
security and yeah I'm always happy to

00:36:10,690 --> 00:36:14,769
talk about more security stuff or to

00:36:12,220 --> 00:36:18,489
talk about frog and toad oh if you do

00:36:14,769 --> 00:36:19,839
have feedback you can like be you can

00:36:18,489 --> 00:36:21,970
give me the feedback directly or you can

00:36:19,839 --> 00:36:23,710
use the guidebook feedback form this was

00:36:21,970 --> 00:36:26,410
a bit of an experiment being more

00:36:23,710 --> 00:36:27,730
story-driven with the talk I'm curious

00:36:26,410 --> 00:36:28,989
if people liked it or not you don't tell

00:36:27,730 --> 00:36:31,480
me right now I don't want you all like

00:36:28,989 --> 00:36:33,940
shouting at me but do leave me feedback

00:36:31,480 --> 00:36:35,589
tweet at me send me email I don't have

00:36:33,940 --> 00:36:37,480
my email up there but you can tweet at

00:36:35,589 --> 00:36:40,839
me you can even send me a DM if you're

00:36:37,480 --> 00:36:42,069
bad I'll block you and that's it thank

00:36:40,839 --> 00:36:44,369
you all so much all right thanks so much

00:36:42,069 --> 00:36:44,369
for

00:36:49,630 --> 00:36:55,950
what if you would like more James family

00:36:54,119 --> 00:36:58,450
experiments

00:36:55,950 --> 00:37:00,099
Nicole James around the corner right

00:36:58,450 --> 00:37:02,140
after this is giving a talk on beginner

00:37:00,099 --> 00:37:04,210
workshops so you just can't get enough

00:37:02,140 --> 00:37:07,109
of the James family go see here workshop

00:37:04,210 --> 00:37:07,109

YouTube URL: https://www.youtube.com/watch?v=vF0M-1OJlWI


