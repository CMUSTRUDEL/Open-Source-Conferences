Title: DjangoCon US 2016 - SSL All The Things by Markus Holtermann
Publication date: 2016-08-14
Playlist: DjangoCon US 2016
Description: 
	DjangoCon US 2016 - SSL All The Things by Markus Holtermann

Over the last few years SSL/TLS encryption of not only websites but many other services as well has risen tremendously. The Let’s Encrypt organization and certificate authority (CA) makes that pretty easy. Since September 2015 almost 1.8 million certificates have been issued. And you can use it, too. For free!

In this talk I'll demonstrate how to integrate SSL/TLS and point out some common pitfalls. I’ll briefly layout the Let's Encrypt ACME protocol and explain what you need to set up in Django to make SSL/TLS the default and only way to access your site.
Captions: 
	00:00:15,200 --> 00:00:20,240
my more regular contributions to Django

00:00:17,480 --> 00:00:21,770
started in I think four empty 14 when I

00:00:20,240 --> 00:00:23,990
picked up every other part in the

00:00:21,770 --> 00:00:27,349
migration framework that was about to be

00:00:23,990 --> 00:00:29,779
released and in 2015 the core team

00:00:27,349 --> 00:00:32,270
decided they were too lazy to merge my

00:00:29,779 --> 00:00:34,989
poor request and made me do it myself

00:00:32,270 --> 00:00:38,870
which made me become a core developer

00:00:34,989 --> 00:00:40,850
that's most 2015 since April I'm working

00:00:38,870 --> 00:00:44,870
as a senior software engineer at later P

00:00:40,850 --> 00:00:46,910
in unique we try to Atlanta PI we try to

00:00:44,870 --> 00:00:51,020
make online purchasing and selling of

00:00:46,910 --> 00:00:53,390
goods more easy and our entire idea

00:00:51,020 --> 00:00:56,210
behind the process is that it should be

00:00:53,390 --> 00:00:59,000
really really convenient for us as a

00:00:56,210 --> 00:01:01,970
client of our merchants to buy digital

00:00:59,000 --> 00:01:03,770
to digital goods and the idea behind

00:01:01,970 --> 00:01:08,030
which is also part of the name is

00:01:03,770 --> 00:01:10,189
yourself first and pay later similar way

00:01:08,030 --> 00:01:13,250
when you go into a restaurant and order

00:01:10,189 --> 00:01:16,639
dinner now back to the topic

00:01:13,250 --> 00:01:19,189
SSL all the things ever since Snowden

00:01:16,639 --> 00:01:22,700
revealed that the NSA is well spying on

00:01:19,189 --> 00:01:24,679
all of us and that it is actually

00:01:22,700 --> 00:01:27,049
security and the urge for security

00:01:24,679 --> 00:01:29,329
increased pretty much especially over in

00:01:27,049 --> 00:01:31,490
Germany where we have really huge and

00:01:29,329 --> 00:01:34,130
high data security and privacy standards

00:01:31,490 --> 00:01:37,579
and that applies to many other European

00:01:34,130 --> 00:01:40,850
countries as well and well there's a

00:01:37,579 --> 00:01:43,819
risk of public for example in public the

00:01:40,850 --> 00:01:45,529
unencrypted Wi-Fi swear people might be

00:01:43,819 --> 00:01:48,200
able to wiretap on the network

00:01:45,529 --> 00:01:49,939
communications you have which might be

00:01:48,200 --> 00:01:51,979
the email communication you have and

00:01:49,939 --> 00:01:53,929
depending on how the email server is set

00:01:51,979 --> 00:01:56,509
up or you're trying to set up this might

00:01:53,929 --> 00:02:00,139
be the business emails where you reveal

00:01:56,509 --> 00:02:03,709
the purchase of whatever other company

00:02:00,139 --> 00:02:05,749
you do and well you don't want this you

00:02:03,709 --> 00:02:08,479
want the owner of the cafe next door or

00:02:05,749 --> 00:02:10,700
any other person who is indica feed to

00:02:08,479 --> 00:02:13,970
be able to wiretap on your communication

00:02:10,700 --> 00:02:15,770
and yeah so there's some need for

00:02:13,970 --> 00:02:17,810
encryption there I mean do you also

00:02:15,770 --> 00:02:21,439
don't want internet service providers to

00:02:17,810 --> 00:02:24,620
inject advertisements into your website

00:02:21,439 --> 00:02:26,750
which is otherwise at free so

00:02:24,620 --> 00:02:29,330
this is something that happens we have

00:02:26,750 --> 00:02:32,750
that in Germany which is really scary

00:02:29,330 --> 00:02:35,120
and the bad map use up user experience

00:02:32,750 --> 00:02:38,319
and not to mention from a security

00:02:35,120 --> 00:02:41,870
perspective that is really awful but

00:02:38,319 --> 00:02:44,629
well but before we go into any details I

00:02:41,870 --> 00:02:46,629
need to tell you something more there's

00:02:44,629 --> 00:02:49,459
a disclaimer I'm not a cryptographer and

00:02:46,629 --> 00:02:51,709
the all the examples I give here to the

00:02:49,459 --> 00:02:54,739
best of my knowledge if I don't know

00:02:51,709 --> 00:02:56,900
something I talk to people I'm trusting

00:02:54,739 --> 00:02:59,170
that know more about the stuff that I do

00:02:56,900 --> 00:03:01,760
and ask them their for their opinion

00:02:59,170 --> 00:03:04,579
which still means we are all human and

00:03:01,760 --> 00:03:05,090
there might be errors in there here they

00:03:04,579 --> 00:03:07,010
are

00:03:05,090 --> 00:03:08,390
if there is something if you spot

00:03:07,010 --> 00:03:10,099
something in the slide that's clearly

00:03:08,390 --> 00:03:12,200
wrong please talk to me after the slide

00:03:10,099 --> 00:03:14,360
after the talk outside

00:03:12,200 --> 00:03:18,019
I will update the slides a property

00:03:14,360 --> 00:03:20,120
before I publish them this top will not

00:03:18,019 --> 00:03:22,160
cover everything you know about SSL but

00:03:20,120 --> 00:03:25,069
you need to know about SSL TLS and stuff

00:03:22,160 --> 00:03:26,360
that would be too much for one talk and

00:03:25,069 --> 00:03:30,350
would probably be done enough for an

00:03:26,360 --> 00:03:34,069
entire conference also if you think of

00:03:30,350 --> 00:03:37,790
SSL or here SSL TLS I probably always

00:03:34,069 --> 00:03:41,870
mean tls/ssl being just the common term

00:03:37,790 --> 00:03:46,160
for both of them SSL two and three are

00:03:41,870 --> 00:03:48,470
broken do not use them till s1 dot and

00:03:46,160 --> 00:03:50,989
1.1 are discouraged and you probably

00:03:48,470 --> 00:03:53,440
should not use them either but there are

00:03:50,989 --> 00:03:55,849
at least better than SSL and

00:03:53,440 --> 00:03:57,709
future-looking cryptographers at Google

00:03:55,849 --> 00:03:59,359
came up with the implementation of a

00:03:57,709 --> 00:04:01,790
post quantum cryptography the

00:03:59,359 --> 00:04:03,799
cryptographic algorithm a couple of days

00:04:01,790 --> 00:04:08,329
or weeks ago which is called New Hope

00:04:03,799 --> 00:04:10,609
yes after the Star Wars film SSL stands

00:04:08,329 --> 00:04:12,560
for Secure Sockets Layer TLS for

00:04:10,609 --> 00:04:15,319
transport layer security but well this

00:04:12,560 --> 00:04:18,919
is just works there borrow cryptographic

00:04:15,319 --> 00:04:22,820
protocols for communication system most

00:04:18,919 --> 00:04:25,610
notably networks and either of them

00:04:22,820 --> 00:04:29,630
provides two out of three parts of the

00:04:25,610 --> 00:04:31,550
topic of information security the first

00:04:29,630 --> 00:04:33,950
one being confidentiality which is

00:04:31,550 --> 00:04:35,540
provided through encryption which means

00:04:33,950 --> 00:04:39,350
nobody else can

00:04:35,540 --> 00:04:42,500
read what is being transmitted the other

00:04:39,350 --> 00:04:44,480
one is integrity which is provided

00:04:42,500 --> 00:04:47,810
through signing which means nobody else

00:04:44,480 --> 00:04:51,560
can change what you send without this

00:04:47,810 --> 00:04:53,870
receiver noticing the third part of

00:04:51,560 --> 00:04:55,700
information security is availability

00:04:53,870 --> 00:04:58,310
which is something you need to handle on

00:04:55,700 --> 00:05:00,590
different layer for example scaling and

00:04:58,310 --> 00:05:02,750
redundancy in your service but this is

00:05:00,590 --> 00:05:09,440
something these two protocols cannot

00:05:02,750 --> 00:05:11,390
provide well know that we are genuine we

00:05:09,440 --> 00:05:13,070
in order or most of the things we do

00:05:11,390 --> 00:05:15,590
with tangle with these days our websites

00:05:13,070 --> 00:05:18,950
let's start with talking about what you

00:05:15,590 --> 00:05:23,120
need to do to get a website running and

00:05:18,950 --> 00:05:24,950
this is obviously a web server and a web

00:05:23,120 --> 00:05:27,710
server configuration is something you

00:05:24,950 --> 00:05:30,830
which is the first step you want to wear

00:05:27,710 --> 00:05:34,340
you wear your client letting the browser

00:05:30,830 --> 00:05:36,710
use of the browser if a user speaks SSL

00:05:34,340 --> 00:05:39,680
with when when talking to your website

00:05:36,710 --> 00:05:41,450
so let's look at what you need to define

00:05:39,680 --> 00:05:43,880
or configure in your web server to make

00:05:41,450 --> 00:05:48,230
SSL working on and get it up and running

00:05:43,880 --> 00:05:49,460
and well let's start with Apache tear

00:05:48,230 --> 00:05:52,520
because it comes first in the alphabet

00:05:49,460 --> 00:05:55,880
you need to switch on the SSL engine

00:05:52,520 --> 00:05:57,920
which happens with this line then you

00:05:55,880 --> 00:06:00,290
want to define a cipher sheet which is

00:05:57,920 --> 00:06:02,860
something I took from cipher list I'm

00:06:00,290 --> 00:06:05,860
one of those websites that provide

00:06:02,860 --> 00:06:08,930
security standards and recommendations

00:06:05,860 --> 00:06:10,820
you want to make sure that also this the

00:06:08,930 --> 00:06:13,880
ciphers the connection between the

00:06:10,820 --> 00:06:16,220
client and the server is going to use

00:06:13,880 --> 00:06:18,140
this I first you want not that the

00:06:16,220 --> 00:06:20,180
client wants because that might mean

00:06:18,140 --> 00:06:23,240
what mean the client is able to or

00:06:20,180 --> 00:06:28,490
somebody might be able to reduce the

00:06:23,240 --> 00:06:30,740
security of that connection and well you

00:06:28,490 --> 00:06:35,330
also want to you know to use SSL I said

00:06:30,740 --> 00:06:37,070
before Apache 2.4 already disabled SSL 2

00:06:35,330 --> 00:06:37,580
by default or doesn't even support it

00:06:37,070 --> 00:06:41,950
anymore

00:06:37,580 --> 00:06:44,840
so excluding SSL 3 might be just enough

00:06:41,950 --> 00:06:47,949
but well you might also want to want to

00:06:44,840 --> 00:06:50,979
exclude TLS 1.2 and 1.1

00:06:47,949 --> 00:06:53,469
and well then you define the server key

00:06:50,979 --> 00:06:54,430
and the server certificate and last but

00:06:53,469 --> 00:06:58,930
not least there's a thing called

00:06:54,430 --> 00:07:01,629
diffie-hellman parameter which is used

00:06:58,930 --> 00:07:04,270
for the initial key exchange between the

00:07:01,629 --> 00:07:06,249
browser and entire server and setting a

00:07:04,270 --> 00:07:10,300
custom one there is also probably a good

00:07:06,249 --> 00:07:12,249
idea when you look at the SS at the

00:07:10,300 --> 00:07:16,419
nginx configuration well that pretty

00:07:12,249 --> 00:07:18,099
much looks the same now the question

00:07:16,419 --> 00:07:20,379
arises where the hell do we get this

00:07:18,099 --> 00:07:23,319
certificate from that was just talking

00:07:20,379 --> 00:07:25,469
about and basis well let's encrypt comes

00:07:23,319 --> 00:07:27,849
into play

00:07:25,469 --> 00:07:30,460
what the heck is let's encrypt you might

00:07:27,849 --> 00:07:33,759
ask yourself and how does this entire

00:07:30,460 --> 00:07:36,520
SSL thing works anyway and well this is

00:07:33,759 --> 00:07:40,389
a huge complex topic that I try to break

00:07:36,520 --> 00:07:44,500
down in in this talk and let's start off

00:07:40,389 --> 00:07:46,419
with how SSL works or how the how do how

00:07:44,500 --> 00:07:48,249
does it client how does your browser now

00:07:46,419 --> 00:07:52,240
that the communication it does with the

00:07:48,249 --> 00:07:56,409
server's actually trustworthy and with

00:07:52,240 --> 00:07:59,529
for that let's start with what CAS are

00:07:56,409 --> 00:08:02,919
CI stands for certification certificate

00:07:59,529 --> 00:08:05,620
authority and these are trusted entities

00:08:02,919 --> 00:08:08,339
we are all browsers rely on in order to

00:08:05,620 --> 00:08:11,379
establish so-called chain of trust

00:08:08,339 --> 00:08:13,839
browsers or email clients on any other

00:08:11,379 --> 00:08:16,270
client that has encrypted communication

00:08:13,839 --> 00:08:17,889
with a with a server ever so called

00:08:16,270 --> 00:08:20,399
pre-installed or I have a pre-installed

00:08:17,889 --> 00:08:23,800
list of socket root certificates and

00:08:20,399 --> 00:08:25,960
this list is created by the browser

00:08:23,800 --> 00:08:30,430
email vendors MEDLINE vendors such as

00:08:25,960 --> 00:08:33,099
Google or Mozilla and they this list is

00:08:30,430 --> 00:08:37,029
trusted by them and is called the

00:08:33,099 --> 00:08:39,610
so-called trust store the root

00:08:37,029 --> 00:08:42,610
certificate authorities then go ahead

00:08:39,610 --> 00:08:46,320
and normally sign so-called intermediate

00:08:42,610 --> 00:08:48,850
certificates which are then used to

00:08:46,320 --> 00:08:51,899
scientific --it you use for your website

00:08:48,850 --> 00:08:54,279
for example they are not signing your

00:08:51,899 --> 00:08:56,949
website order your certificate with a

00:08:54,279 --> 00:08:59,080
root certificate but with an certificate

00:08:56,949 --> 00:09:01,180
in between

00:08:59,080 --> 00:09:05,500
and we can see the reason for that when

00:09:01,180 --> 00:09:08,020
you look to the right root CA 2 & 3 root

00:09:05,500 --> 00:09:10,210
3 as you can see root CI 3 is not in the

00:09:08,020 --> 00:09:12,250
trust store so browsers don't

00:09:10,210 --> 00:09:15,010
necessarily trust the intermediate

00:09:12,250 --> 00:09:16,110
certificate that is was signed by that's

00:09:15,010 --> 00:09:21,160
a CA

00:09:16,110 --> 00:09:23,140
however if ii see a so-called cross

00:09:21,160 --> 00:09:25,330
cross signed this intermediate

00:09:23,140 --> 00:09:28,330
certificate you have the chain of trust

00:09:25,330 --> 00:09:30,160
from here over there to serve to a

00:09:28,330 --> 00:09:34,710
certificate you would use on your server

00:09:30,160 --> 00:09:37,660
and well the connection is trusted and

00:09:34,710 --> 00:09:39,700
well let's encrypt this one of these

00:09:37,660 --> 00:09:42,520
certificate authorities that is not

00:09:39,700 --> 00:09:42,940
trusted or not in a trust or at least

00:09:42,520 --> 00:09:49,300
not yet

00:09:42,940 --> 00:09:51,490
and well they have some another CA that

00:09:49,300 --> 00:09:54,510
trust them which is called in I didn't

00:09:51,490 --> 00:09:57,370
trust and since let's encrypt has

00:09:54,510 --> 00:10:00,040
control over there in intermediate

00:09:57,370 --> 00:10:02,560
certificate they can still sign whatever

00:10:00,040 --> 00:10:06,490
website they want and your browser is

00:10:02,560 --> 00:10:09,790
going to trust that this is probably a

00:10:06,490 --> 00:10:12,070
good idea good idea but given some

00:10:09,790 --> 00:10:14,200
security measures in the back end in the

00:10:12,070 --> 00:10:17,830
background this is probably a good idea

00:10:14,200 --> 00:10:19,690
in this this column in context and well

00:10:17,830 --> 00:10:22,210
let's encrypt offers an API to get

00:10:19,690 --> 00:10:24,220
pretty much unlimited certificates for

00:10:22,210 --> 00:10:27,370
the domain you have that is under your

00:10:24,220 --> 00:10:29,800
control and under your control means you

00:10:27,370 --> 00:10:35,560
need to be able to provide something on

00:10:29,800 --> 00:10:37,750
port 80 via HTTP by now letting provided

00:10:35,560 --> 00:10:40,210
more than 5 million certificates and

00:10:37,750 --> 00:10:43,300
they set up like one half two years ago

00:10:40,210 --> 00:10:46,450
which is pretty impressive now let's

00:10:43,300 --> 00:10:48,640
look at the process in which you get one

00:10:46,450 --> 00:10:51,070
of those certificates and this process

00:10:48,640 --> 00:10:53,740
is called a CME or automatic certificate

00:10:51,070 --> 00:10:56,710
management environment it's a fairly

00:10:53,740 --> 00:10:58,450
simple JSON API with some crypto magic

00:10:56,710 --> 00:11:01,690
that I'm not going to explain in detail

00:10:58,450 --> 00:11:03,520
but the entire process only has like

00:11:01,690 --> 00:11:05,530
four steps and there are three things

00:11:03,520 --> 00:11:07,480
you need for this process one being an

00:11:05,530 --> 00:11:09,610
account key which is something you need

00:11:07,480 --> 00:11:11,230
to both wait that you use to

00:11:09,610 --> 00:11:12,460
authenticate yourself or your server

00:11:11,230 --> 00:11:15,610
against the

00:11:12,460 --> 00:11:17,770
let's encrypt certificate certificate

00:11:15,610 --> 00:11:20,770
key which is the one you put in your

00:11:17,770 --> 00:11:22,810
apache or nginx configuration and a

00:11:20,770 --> 00:11:25,690
certificate signing request correct

00:11:22,810 --> 00:11:31,000
breakfast which includes all the domains

00:11:25,690 --> 00:11:34,000
you want to sign in your certificate so

00:11:31,000 --> 00:11:38,640
the API starts with well here I am this

00:11:34,000 --> 00:11:40,630
is my key please register me and/or

00:11:38,640 --> 00:11:43,089
authenticate me if I'm already

00:11:40,630 --> 00:11:44,529
registered you can provide a email

00:11:43,089 --> 00:11:46,270
address for example there or pager

00:11:44,529 --> 00:11:49,630
number in case your certificate is going

00:11:46,270 --> 00:11:52,330
to going to expire but this is this

00:11:49,630 --> 00:11:54,430
optional and pause then there's this

00:11:52,330 --> 00:11:55,180
certificate signing request that you

00:11:54,430 --> 00:11:58,000
sent over

00:11:55,180 --> 00:11:59,230
and as a response let's encrypt is going

00:11:58,000 --> 00:12:01,570
to provide you with a bunch of

00:11:59,230 --> 00:12:04,320
challenges these challenges you're

00:12:01,570 --> 00:12:08,020
writing to a web server directory and a

00:12:04,320 --> 00:12:09,850
provided name whether provided with a

00:12:08,020 --> 00:12:12,910
specific content let's encrypt is going

00:12:09,850 --> 00:12:16,570
to provide you and in the next step in

00:12:12,910 --> 00:12:18,339
this that you have here you're telling

00:12:16,570 --> 00:12:19,900
the I to encrypt okay I'm done I've

00:12:18,339 --> 00:12:21,880
written all the challenges and let's

00:12:19,900 --> 00:12:23,920
encrypt is going to request all those

00:12:21,880 --> 00:12:27,010
challenges on those domains Y upon 80

00:12:23,920 --> 00:12:28,810
what I just said so when you have

00:12:27,010 --> 00:12:31,920
control over a domain you are able to

00:12:28,810 --> 00:12:34,360
provide content under a certain domain

00:12:31,920 --> 00:12:35,650
if you don't have the content or if you

00:12:34,360 --> 00:12:36,940
don't have to control over that domain

00:12:35,650 --> 00:12:41,860
you can't provide the content which

00:12:36,940 --> 00:12:45,010
means this tab has is secure and well

00:12:41,860 --> 00:12:47,080
lastly you request the certificate from

00:12:45,010 --> 00:12:50,470
let's encrypt once or let's encrypt

00:12:47,080 --> 00:12:51,910
checked all the challenges and that's

00:12:50,470 --> 00:12:56,560
pretty much all the magic that let's

00:12:51,910 --> 00:12:58,360
encrypt us well this is the bare

00:12:56,560 --> 00:13:00,640
configuration of how you would include

00:12:58,360 --> 00:13:02,740
the how you would define the the

00:13:00,640 --> 00:13:05,560
challenge directory for example so

00:13:02,740 --> 00:13:07,390
there's this let's encrypt is going to

00:13:05,560 --> 00:13:09,610
request something on very known a CMU

00:13:07,390 --> 00:13:12,390
challenges so this is a directory or

00:13:09,610 --> 00:13:16,029
path in the URL you have to provide and

00:13:12,390 --> 00:13:19,899
everything else is pretty much explained

00:13:16,029 --> 00:13:21,960
in there and well just well completion

00:13:19,899 --> 00:13:24,880
the same for engineers

00:13:21,960 --> 00:13:27,400
now that we know how to how let's

00:13:24,880 --> 00:13:30,070
encrypt is working how do we actually

00:13:27,400 --> 00:13:32,100
use it and well there's an official

00:13:30,070 --> 00:13:34,960
client which does all the magic

00:13:32,100 --> 00:13:39,040
literally it rewrites your Apache config

00:13:34,960 --> 00:13:40,420
if you wanted to and well they are also

00:13:39,040 --> 00:13:43,630
working as far as I know on

00:13:40,420 --> 00:13:45,580
implementation for engine X and well

00:13:43,630 --> 00:13:48,430
while this might be a good idea for

00:13:45,580 --> 00:13:50,140
people who just start with server

00:13:48,430 --> 00:13:52,390
management this is probably a bad idea

00:13:50,140 --> 00:13:53,380
for enterprises at which point you want

00:13:52,390 --> 00:13:55,750
to use configuration and system

00:13:53,380 --> 00:13:58,330
management tools for reasoning they are

00:13:55,750 --> 00:14:02,020
pleased to watch my talk from 2015

00:13:58,330 --> 00:14:04,600
I can Australia that's a script called a

00:14:02,020 --> 00:14:08,080
seam in tiny by Daniel rattler which is

00:14:04,600 --> 00:14:10,090
like 200 lines give or take it's easy to

00:14:08,080 --> 00:14:13,270
understand into and it does exactly

00:14:10,090 --> 00:14:15,490
those four steps I showed before it's a

00:14:13,270 --> 00:14:19,840
really recommended treat if you want to

00:14:15,490 --> 00:14:21,640
look start looking at let's encrypt this

00:14:19,840 --> 00:14:26,110
is gives you a really good idea of how

00:14:21,640 --> 00:14:28,930
it's working I that project and

00:14:26,110 --> 00:14:33,040
added system deep support and a few

00:14:28,930 --> 00:14:34,660
other things and if this exact

00:14:33,040 --> 00:14:36,460
implementation doesn't work for you well

00:14:34,660 --> 00:14:39,670
go ahead fork it and adjust it as you

00:14:36,460 --> 00:14:42,550
want there's also a bunch of other tools

00:14:39,670 --> 00:14:44,950
for example let's encrypt WS by Alex

00:14:42,550 --> 00:14:48,180
gainer which as the name suggests

00:14:44,950 --> 00:14:51,400
supports or implements AWS support

00:14:48,180 --> 00:14:53,800
there's a tool called a proxy by Amber

00:14:51,400 --> 00:14:56,500
Brown which is a reverse proxy which

00:14:53,800 --> 00:14:59,910
just does all the magic you'd only

00:14:56,500 --> 00:15:03,100
define the domains and nothing else and

00:14:59,910 --> 00:15:05,170
well this is the crude script we use at

00:15:03,100 --> 00:15:09,130
I use for my websites and we use a

00:15:05,170 --> 00:15:12,940
Django project you provide the

00:15:09,130 --> 00:15:13,540
information I said you need to and be

00:15:12,940 --> 00:15:16,000
done with it

00:15:13,540 --> 00:15:18,430
you run this every whatever every month

00:15:16,000 --> 00:15:20,200
or so the certificates provided by let's

00:15:18,430 --> 00:15:22,930
encrypt have a maximum exploration

00:15:20,200 --> 00:15:25,870
lifetime of 90 days which also means

00:15:22,930 --> 00:15:28,690
that in case something happens you have

00:15:25,870 --> 00:15:30,850
you lost for 90 days but then the

00:15:28,690 --> 00:15:33,330
certificate is invalid anyway and nobody

00:15:30,850 --> 00:15:35,800
can use it

00:15:33,330 --> 00:15:38,170
being a Django Cohen there's actually

00:15:35,800 --> 00:15:39,520
not much we need to do a just in Django

00:15:38,170 --> 00:15:42,310
to make necessary

00:15:39,520 --> 00:15:44,530
that's one thing or two things you might

00:15:42,310 --> 00:15:46,720
want to adjust or I recommend you want

00:15:44,530 --> 00:15:49,240
to address which is the which are the

00:15:46,720 --> 00:15:51,010
secure settings for two quickies which

00:15:49,240 --> 00:15:53,560
is the session cookie and this year's RF

00:15:51,010 --> 00:15:56,470
cookie and also you probably don't want

00:15:53,560 --> 00:16:01,120
to run your website on HTTP and HTTPS

00:15:56,470 --> 00:16:03,700
only HTTPS if you want to go into

00:16:01,120 --> 00:16:06,820
further details on what things you could

00:16:03,700 --> 00:16:10,440
possibly set have a look at this this

00:16:06,820 --> 00:16:15,490
list of features django supports

00:16:10,440 --> 00:16:18,280
out-of-the-box in terms of ssl it does a

00:16:15,490 --> 00:16:21,130
lot of features that you probably when

00:16:18,280 --> 00:16:24,040
you use engine X or Apache would not do

00:16:21,130 --> 00:16:28,330
in general but as part of the reverse

00:16:24,040 --> 00:16:30,550
proxy inversion in front and well let me

00:16:28,330 --> 00:16:34,240
go through those things in the next

00:16:30,550 --> 00:16:36,990
couple of minutes let's encrypt

00:16:34,240 --> 00:16:40,300
certificates as briefly mentioned are

00:16:36,990 --> 00:16:42,070
valid for 90 days if you lose them or if

00:16:40,300 --> 00:16:45,730
they are compromised you can revoke them

00:16:42,070 --> 00:16:47,800
by an API call same applies for your

00:16:45,730 --> 00:16:51,160
account key if you lose that you can

00:16:47,800 --> 00:16:54,220
change that and be safe again if you

00:16:51,160 --> 00:16:56,470
lose your certificate key well this is

00:16:54,220 --> 00:17:00,010
the same as if you have if the

00:16:56,470 --> 00:17:02,860
certificate is compromised you get a new

00:17:00,010 --> 00:17:05,440
key get in use a signing request get a

00:17:02,860 --> 00:17:07,120
new certificate into your done well you

00:17:05,440 --> 00:17:10,270
probably want to revoke the key as well

00:17:07,120 --> 00:17:14,170
but yeah then there's a thing called

00:17:10,270 --> 00:17:16,960
called HD STS or HTTP strict Transport

00:17:14,170 --> 00:17:19,960
Security which means your browsers

00:17:16,960 --> 00:17:22,750
after the first visit visit to the HTTPS

00:17:19,960 --> 00:17:25,720
site is only ever going to request an

00:17:22,750 --> 00:17:29,500
HTTPS version of this slide and not even

00:17:25,720 --> 00:17:34,120
trying HTTP which means if you turn it

00:17:29,500 --> 00:17:36,190
on and turn it off and disable SSL then

00:17:34,120 --> 00:17:39,120
all the client works the browsers that

00:17:36,190 --> 00:17:41,490
went to this website before

00:17:39,120 --> 00:17:44,010
cannot access it anymore because you

00:17:41,490 --> 00:17:46,820
don't have SSL anymore so if you enable

00:17:44,010 --> 00:17:50,220
it be sure about what you do there

00:17:46,820 --> 00:17:53,130
there's a similar thing called HP KP HDB

00:17:50,220 --> 00:17:55,950
public key pinning which works on a

00:17:53,130 --> 00:17:58,380
slightly separate level it's probably

00:17:55,950 --> 00:18:01,590
not too useful for most people only ever

00:17:58,380 --> 00:18:04,320
when you like a really big organization

00:18:01,590 --> 00:18:08,100
or company and are subject to DNS

00:18:04,320 --> 00:18:11,540
attacks or so it has the same drawbacks

00:18:08,100 --> 00:18:14,010
as as HSTs that it's not ever gonna be

00:18:11,540 --> 00:18:17,340
your clients won't be able to connect

00:18:14,010 --> 00:18:21,000
with you if this changes or if you if

00:18:17,340 --> 00:18:23,940
you lose the t configuration there you

00:18:21,000 --> 00:18:25,710
can use magic you can use let's encrypt

00:18:23,940 --> 00:18:27,480
other certificates provided by let's

00:18:25,710 --> 00:18:31,230
encrypt for any kind of other service

00:18:27,480 --> 00:18:34,590
that uses SSL by just providing a

00:18:31,230 --> 00:18:37,010
service that answers that supplies these

00:18:34,590 --> 00:18:39,960
challenges on port 80 for that domain

00:18:37,010 --> 00:18:42,059
that's it you get the certificate for

00:18:39,960 --> 00:18:45,240
that domain put it wherever you use it

00:18:42,059 --> 00:18:51,330
and be done with it for example I use it

00:18:45,240 --> 00:18:54,140
myself for my ISE bouncer well speaking

00:18:51,330 --> 00:18:57,030
of cryptography things can go wrong and

00:18:54,140 --> 00:18:59,730
things can go horribly wrong and there's

00:18:57,030 --> 00:19:04,950
no finite list of things that could go

00:18:59,730 --> 00:19:08,309
wrong HSTs h PK p if you want to look

00:19:04,950 --> 00:19:10,679
use it please be aware the downsides and

00:19:08,309 --> 00:19:14,400
what could possibly happen and how you

00:19:10,679 --> 00:19:18,000
how bad you can break your side but you

00:19:14,400 --> 00:19:20,120
probably want to use it so this is kind

00:19:18,000 --> 00:19:23,040
of a trade-off

00:19:20,120 --> 00:19:26,940
speaking of cryptography you have keys

00:19:23,040 --> 00:19:30,090
and well occasionally you probably you

00:19:26,940 --> 00:19:32,520
will leak a key probably or hopefully

00:19:30,090 --> 00:19:34,260
only ever once no hopefully never but

00:19:32,520 --> 00:19:37,220
it's going to happen happen to everybody

00:19:34,260 --> 00:19:37,220
and

00:19:39,049 --> 00:19:43,649
so you want to be able to you have want

00:19:42,059 --> 00:19:46,740
to have a process in place to reveal

00:19:43,649 --> 00:19:48,990
keys and I said before let's encrypt has

00:19:46,740 --> 00:19:52,200
that implemented and has the feature

00:19:48,990 --> 00:19:56,279
there just be a well that you want how

00:19:52,200 --> 00:19:59,970
you handle that people say SS alleged or

00:19:56,279 --> 00:20:02,130
Matias that uses lots more resources yes

00:19:59,970 --> 00:20:04,500
of course it does need more resources in

00:20:02,130 --> 00:20:07,080
computation power but honestly that

00:20:04,500 --> 00:20:10,320
doesn't really matter if any of them

00:20:07,080 --> 00:20:12,570
more or less more than hardware so I'd

00:20:10,320 --> 00:20:16,769
say that last four years probably you

00:20:12,570 --> 00:20:20,159
probably don't gonna recognize it is a

00:20:16,769 --> 00:20:21,779
incomplete list of sources the first one

00:20:20,159 --> 00:20:25,049
was briefly mentioned before cipher list

00:20:21,779 --> 00:20:27,750
it's a good recommendation for you see

00:20:25,049 --> 00:20:29,700
ciphers and use well this is the

00:20:27,750 --> 00:20:32,490
configuration you might want to use the

00:20:29,700 --> 00:20:34,590
second one is probably your go-to page

00:20:32,490 --> 00:20:37,980
if something with the SSL configuration

00:20:34,590 --> 00:20:40,820
is broken or if you want to see how good

00:20:37,980 --> 00:20:43,980
or bad you configured your web servers

00:20:40,820 --> 00:20:47,159
seriously this is the like the reference

00:20:43,980 --> 00:20:50,340
proof from my perspective for it's my

00:20:47,159 --> 00:20:53,100
SSL set up correctly and then as a

00:20:50,340 --> 00:20:57,169
couple of blog posts and other resources

00:20:53,100 --> 00:21:00,289
of how to use or not he used as as well

00:20:57,169 --> 00:21:00,289
thank you

00:21:06,100 --> 00:21:10,549
so we do have time for some questions if

00:21:09,169 --> 00:21:12,320
you have a question please come down to

00:21:10,549 --> 00:21:13,720
the mic for the recording purposes we've

00:21:12,320 --> 00:21:16,850
got about five minutes

00:21:13,720 --> 00:21:18,650
hey amigo how you doing if you turn on

00:21:16,850 --> 00:21:20,720
the secure cookies I had two minor

00:21:18,650 --> 00:21:23,720
questions one how does run server handle

00:21:20,720 --> 00:21:25,880
that and two if you have to share your

00:21:23,720 --> 00:21:28,900
cookies from Django with a legacy code

00:21:25,880 --> 00:21:31,940
base legacy code base across your domain

00:21:28,900 --> 00:21:35,270
say ColdFusion how does that work as

00:21:31,940 --> 00:21:39,020
well one you don't so which is the

00:21:35,270 --> 00:21:41,510
reason why I had the point I had the

00:21:39,020 --> 00:21:42,770
environment variables in here so this is

00:21:41,510 --> 00:21:44,690
something you want to set in production

00:21:42,770 --> 00:21:46,220
but you don't want to use in development

00:21:44,690 --> 00:21:48,890
because development is not going to work

00:21:46,220 --> 00:21:52,010
unless you said local SSL setup which is

00:21:48,890 --> 00:21:54,770
kind of a painful the other one I didn't

00:21:52,010 --> 00:21:57,200
really get if I have a domain say

00:21:54,770 --> 00:21:58,909
Wharton that UPenn dot edu with two sub

00:21:57,200 --> 00:22:01,130
domains like vagrant that weren't at

00:21:58,909 --> 00:22:03,860
UPenn dot edu and ColdFusion dot were

00:22:01,130 --> 00:22:06,440
denied UPenn dot edu how do I share a

00:22:03,860 --> 00:22:08,570
cookie across Wharton at UPenn dot edu

00:22:06,440 --> 00:22:10,220
as secure does it still work across the

00:22:08,570 --> 00:22:12,649
entire domain if you set the cookie for

00:22:10,220 --> 00:22:18,860
Wharton at UPenn dot edu and not the

00:22:12,649 --> 00:22:22,309
actual server read up in the

00:22:18,860 --> 00:22:24,140
documentation it should be India if it's

00:22:22,309 --> 00:22:26,000
if it's not this is probably a topic

00:22:24,140 --> 00:22:29,140
something you should add to the good

00:22:26,000 --> 00:22:32,149
documentation as a possible problem and

00:22:29,140 --> 00:22:34,190
the aspirants please submit a ticket and

00:22:32,149 --> 00:22:35,899
possibly a pet will do somebody should

00:22:34,190 --> 00:22:37,640
also totally do a lightning talk called

00:22:35,899 --> 00:22:41,750
oh crap I just committed my django

00:22:37,640 --> 00:22:44,659
secret key that's also a good idea all

00:22:41,750 --> 00:22:47,529
right two more questions sort of similar

00:22:44,659 --> 00:22:50,570
to the last one but a different case

00:22:47,529 --> 00:22:53,770
let's say you you know so let's say you

00:22:50,570 --> 00:22:57,140
use a bunch of vendors possibly add

00:22:53,770 --> 00:23:01,279
servers analytics vendors and they're

00:22:57,140 --> 00:23:03,230
not running on HTTP any suggestions on

00:23:01,279 --> 00:23:09,919
how you can still protect your site or

00:23:03,230 --> 00:23:13,429
is it just companies or networks don't

00:23:09,919 --> 00:23:15,260
provide SSL mm-hmm there's not much you

00:23:13,429 --> 00:23:17,640
can do except for either list with oh

00:23:15,260 --> 00:23:21,360
yes five users insecure content or

00:23:17,640 --> 00:23:23,429
not use SSL I might even air on this

00:23:21,360 --> 00:23:25,650
side of well your psyche uses insecure

00:23:23,429 --> 00:23:30,330
content or hope for the people use

00:23:25,650 --> 00:23:32,910
applicants and not love the content I

00:23:30,330 --> 00:23:34,470
don't know honestly Destin there's not

00:23:32,910 --> 00:23:36,690
much you can do at least the majorette

00:23:34,470 --> 00:23:39,450
metrics as far as I read a couple of

00:23:36,690 --> 00:23:45,090
weeks ago they are slowly moving over to

00:23:39,450 --> 00:23:50,370
to issue DHS to HTTPS right slowly yes

00:23:45,090 --> 00:23:52,530
sorry hi I was wondering if you've used

00:23:50,370 --> 00:23:54,840
lots and Cripps built-in cert bots

00:23:52,530 --> 00:23:57,210
utility and if there's any advantages or

00:23:54,840 --> 00:24:01,169
disadvantages to using the Acme tiny

00:23:57,210 --> 00:24:03,419
instead the let's encrypt official

00:24:01,169 --> 00:24:07,140
client that's too much magic from my

00:24:03,419 --> 00:24:09,240
perspective I only want mice to get my

00:24:07,140 --> 00:24:11,490
certificates and deal with the rest must

00:24:09,240 --> 00:24:12,860
myself or with tools that are meant to

00:24:11,490 --> 00:24:17,360
do that

00:24:12,860 --> 00:24:19,950
so no I haven't used anything else okay

00:24:17,360 --> 00:24:22,640
all right one more round of applause for

00:24:19,950 --> 00:24:22,640

YouTube URL: https://www.youtube.com/watch?v=B32-KLL1tHU


