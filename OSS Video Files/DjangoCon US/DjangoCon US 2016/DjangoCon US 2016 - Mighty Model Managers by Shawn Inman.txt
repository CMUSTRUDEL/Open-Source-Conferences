Title: DjangoCon US 2016 - Mighty Model Managers by Shawn Inman
Publication date: 2016-08-24
Playlist: DjangoCon US 2016
Description: 
	Mighty Model Managers by Shawn Inman

Model Managers are an amazing part of the Django Framework. When put to use, they can bring enhanced readability, encapsulation of logic, increased security, and performance. But they're often overlooked - even by those with years of experience. Let's fix that. We'll go through examples that demonstrate how easy Model Managers are to integrate into a project and why they're so important.

This talk was presented at: https://2016.djangocon.us/schedule/presentation/62/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:14,270 --> 00:00:17,760
all right so thanks everybody for coming

00:00:16,619 --> 00:00:19,619
out I really appreciate it

00:00:17,760 --> 00:00:22,650
this talk is called mighty model

00:00:19,619 --> 00:00:23,939
managers as he said so first of all I

00:00:22,650 --> 00:00:26,130
have to give you all props it's pretty

00:00:23,939 --> 00:00:27,300
full in here it's 4:40 and it's

00:00:26,130 --> 00:00:29,700
beautiful outside and you're here to

00:00:27,300 --> 00:00:31,169
talk with me about a part of Django core

00:00:29,700 --> 00:00:32,700
that's been around for years so you are

00:00:31,169 --> 00:00:37,050
the true believers so give yourselves a

00:00:32,700 --> 00:00:39,300
hand so we're gonna be talking about

00:00:37,050 --> 00:00:41,579
model managers specifically cardiac

00:00:39,300 --> 00:00:43,949
rating model managers subclasses and how

00:00:41,579 --> 00:00:46,829
that makes our lives much easier and it

00:00:43,949 --> 00:00:49,109
really does so get excited so first off

00:00:46,829 --> 00:00:50,910
why are we here not like in an

00:00:49,109 --> 00:00:53,250
existential sense I mean like why are we

00:00:50,910 --> 00:00:56,879
here as makers of software hey what are

00:00:53,250 --> 00:00:59,249
our jobs and for me I think that really

00:00:56,879 --> 00:01:01,469
making software is primarily about the

00:00:59,249 --> 00:01:03,570
process of managing complexity and so

00:01:01,469 --> 00:01:05,370
depending on the case you know sometimes

00:01:03,570 --> 00:01:07,530
we're managing complexity on behalf of

00:01:05,370 --> 00:01:09,510
our users or the complexity in a

00:01:07,530 --> 00:01:11,070
business process but a lot of times you

00:01:09,510 --> 00:01:12,600
gotta take a step back and make sure

00:01:11,070 --> 00:01:14,640
we're doing it right and that we're

00:01:12,600 --> 00:01:16,409
managing complexity for ourselves in the

00:01:14,640 --> 00:01:18,030
applications that we make and we can

00:01:16,409 --> 00:01:18,630
probably all agree on that at least to

00:01:18,030 --> 00:01:21,540
some extent

00:01:18,630 --> 00:01:23,939
so why listen to me talk about managing

00:01:21,540 --> 00:01:27,060
complexity what do I know right well

00:01:23,939 --> 00:01:29,939
this is my family so my wife and I have

00:01:27,060 --> 00:01:32,070
four amazing kids there ages 6 and under

00:01:29,939 --> 00:01:33,509
I love it and I love them very much but

00:01:32,070 --> 00:01:37,890
I learned a lot about managing

00:01:33,509 --> 00:01:40,170
complexity along the way I also I work

00:01:37,890 --> 00:01:41,969
for a company called E fellow we work in

00:01:40,170 --> 00:01:43,560
healthcare which is also like got its

00:01:41,969 --> 00:01:44,909
own complexity but that's not really as

00:01:43,560 --> 00:01:48,180
cute as a picture of a bunch of kids

00:01:44,909 --> 00:01:50,430
right so oh so why do I want to talk

00:01:48,180 --> 00:01:51,930
about model managers well the thing is

00:01:50,430 --> 00:01:54,960
that they're part of the core framework

00:01:51,930 --> 00:01:56,969
the documentation is spot-on they're

00:01:54,960 --> 00:01:58,979
really useful and I feel like they're

00:01:56,969 --> 00:02:00,630
overlooked in the community I have a

00:01:58,979 --> 00:02:02,310
bunch of friends and you know we talk

00:02:00,630 --> 00:02:03,509
and I feel like it solves a number of

00:02:02,310 --> 00:02:05,310
problems when people really aren't

00:02:03,509 --> 00:02:06,539
looking at them I think it's one of

00:02:05,310 --> 00:02:09,660
those things you just get it working and

00:02:06,539 --> 00:02:10,860
sometimes you step away so um my goal is

00:02:09,660 --> 00:02:12,930
that we can talk about this stuff today

00:02:10,860 --> 00:02:14,760
and you'll be inclined to take at least

00:02:12,930 --> 00:02:16,170
one thing away from you it's the

00:02:14,760 --> 00:02:19,380
implement and one of your applications

00:02:16,170 --> 00:02:23,500
we're gonna get there I promise so

00:02:19,380 --> 00:02:25,620
there are a ton of benefits to using

00:02:23,500 --> 00:02:28,630
managers they improve semantics

00:02:25,620 --> 00:02:30,460
readability encapsulation of logic ease

00:02:28,630 --> 00:02:32,920
of maintenance and there's a lot more

00:02:30,460 --> 00:02:36,010
but this is a short talk so we'll keep

00:02:32,920 --> 00:02:38,260
it quick but um so show of hands how

00:02:36,010 --> 00:02:40,990
many here in attendance use model

00:02:38,260 --> 00:02:42,610
managers in your code today okay so a

00:02:40,990 --> 00:02:43,840
whole bunch of things that's great so

00:02:42,610 --> 00:02:44,950
for anyone who didn't raise your hand

00:02:43,840 --> 00:02:47,470
there's a little bit of a trick question

00:02:44,950 --> 00:02:50,170
so sorry at your expense but if you use

00:02:47,470 --> 00:02:52,600
the R ORM at all you use model managers

00:02:50,170 --> 00:02:54,490
in one way or another so this simple

00:02:52,600 --> 00:02:57,490
line right here animal dot objects at

00:02:54,490 --> 00:02:59,590
all this called objects objects is the

00:02:57,490 --> 00:03:02,230
default model manager that Django gives

00:02:59,590 --> 00:03:04,300
you right out of the box so it's right

00:03:02,230 --> 00:03:05,800
here is providing us a query set back

00:03:04,300 --> 00:03:10,420
and we're saying give me all so I'm

00:03:05,800 --> 00:03:12,340
getting all instances of my pretty

00:03:10,420 --> 00:03:14,560
simple if you want to see it a little

00:03:12,340 --> 00:03:15,850
more explicitly you can actually code it

00:03:14,560 --> 00:03:17,410
right out this is what's happening for

00:03:15,850 --> 00:03:19,240
you behind the scenes so when you define

00:03:17,410 --> 00:03:20,770
animal you could put objects equals

00:03:19,240 --> 00:03:22,180
models that manager it wouldn't

00:03:20,770 --> 00:03:27,610
accomplish anything new but it would be

00:03:22,180 --> 00:03:29,410
really explicit so what's the job of a

00:03:27,610 --> 00:03:32,260
manager is that the only job is to give

00:03:29,410 --> 00:03:33,940
us a query excitement not really so the

00:03:32,260 --> 00:03:35,500
first job of a model manager is to

00:03:33,940 --> 00:03:38,050
control the query set that you get back

00:03:35,500 --> 00:03:39,880
when you want to inspect it but aside

00:03:38,050 --> 00:03:42,280
from that the second job is to provide

00:03:39,880 --> 00:03:43,840
table level functionality for the model

00:03:42,280 --> 00:03:46,450
so if you think of it this way if you

00:03:43,840 --> 00:03:48,370
wanted to implement functionality on an

00:03:46,450 --> 00:03:50,350
instance of a model you'd create a

00:03:48,370 --> 00:03:51,790
method and you'd put it on that model if

00:03:50,350 --> 00:03:53,440
you wanted to provide table level

00:03:51,790 --> 00:03:55,570
functionality or something operates

00:03:53,440 --> 00:03:57,700
against all the instances of a model you

00:03:55,570 --> 00:04:03,970
would create it on that models manager

00:03:57,700 --> 00:04:05,350
instead so as is usually the case if you

00:04:03,970 --> 00:04:07,140
start tweaking things a little bit you

00:04:05,350 --> 00:04:09,580
can get some really interesting results

00:04:07,140 --> 00:04:12,160
so to demonstrate that let's talk a

00:04:09,580 --> 00:04:14,410
little bit about a sample project so we

00:04:12,160 --> 00:04:16,000
get together with our team we decide we

00:04:14,410 --> 00:04:18,370
need an application for keeping track of

00:04:16,000 --> 00:04:20,109
the people within our organization it's

00:04:18,370 --> 00:04:22,570
really simple it only needs to remember

00:04:20,109 --> 00:04:24,240
two things about a person their name and

00:04:22,570 --> 00:04:27,970
their role within the company

00:04:24,240 --> 00:04:29,920
so you say no big deal you're either an

00:04:27,970 --> 00:04:31,600
author or an editor sorry so you say no

00:04:29,920 --> 00:04:33,760
big deal you head back you code up this

00:04:31,600 --> 00:04:36,430
model right here everything is good to

00:04:33,760 --> 00:04:39,600
go you toss it into the admin and now we

00:04:36,430 --> 00:04:42,430
can we can start tracking these things

00:04:39,600 --> 00:04:44,140
mmm the query that model real simple

00:04:42,430 --> 00:04:45,520
like we talked about just person person

00:04:44,140 --> 00:04:48,850
that objects not all and then you get

00:04:45,520 --> 00:04:50,680
your results item but the semantics of

00:04:48,850 --> 00:04:52,660
this are a little weird and we're all

00:04:50,680 --> 00:04:55,210
used to seeing you know modeled objects

00:04:52,660 --> 00:04:57,310
at all all the time it's commonplace to

00:04:55,210 --> 00:04:58,840
us but people aren't object people are

00:04:57,310 --> 00:05:00,880
people so if we want to make that

00:04:58,840 --> 00:05:02,800
slightly more semantic it's a really

00:05:00,880 --> 00:05:04,660
simple change all you have to do is as

00:05:02,800 --> 00:05:06,010
we said before you can you still use the

00:05:04,660 --> 00:05:08,550
default manager that comes right out of

00:05:06,010 --> 00:05:11,500
the box with Django just rename it so

00:05:08,550 --> 00:05:13,420
from now on if I want to query in a more

00:05:11,500 --> 00:05:15,730
semantic way if thinking my list of

00:05:13,420 --> 00:05:18,070
person objects I say person dot people

00:05:15,730 --> 00:05:21,670
dot all again same result just a little

00:05:18,070 --> 00:05:23,380
bit more semantics along the way this is

00:05:21,670 --> 00:05:25,150
a small change but honestly readability

00:05:23,380 --> 00:05:26,500
is important I think this community gets

00:05:25,150 --> 00:05:29,410
that in general we have a lot of

00:05:26,500 --> 00:05:31,600
emphasis on code quality and abate and

00:05:29,410 --> 00:05:33,490
and a number of other things you don't

00:05:31,600 --> 00:05:34,630
have to take my word for it astray Frey

00:05:33,490 --> 00:05:38,250
did a whole talk about this yesterday

00:05:34,630 --> 00:05:38,250
and I'm sure he'll be happy to tell you

00:05:38,400 --> 00:05:42,820
so another thing you may be thinking

00:05:41,050 --> 00:05:44,890
like is this this is really matter and

00:05:42,820 --> 00:05:46,480
it does and I think that I can convince

00:05:44,890 --> 00:05:48,010
you you probably wouldn't leave your

00:05:46,480 --> 00:05:50,320
model looking like this in the Django

00:05:48,010 --> 00:05:52,510
admin persons is not a great way of

00:05:50,320 --> 00:05:54,100
representing my instances of person you

00:05:52,510 --> 00:05:55,840
would go to your model you would add the

00:05:54,100 --> 00:05:58,240
verbose name for it and I'll all would

00:05:55,840 --> 00:06:00,130
be right you do it that way the thing is

00:05:58,240 --> 00:06:01,750
just because the end user isn't seeing

00:06:00,130 --> 00:06:03,010
the change or the way that we query our

00:06:01,750 --> 00:06:07,419
models doesn't mean that that's not

00:06:03,010 --> 00:06:09,580
important so we talked about a lot a lot

00:06:07,419 --> 00:06:11,650
about semantics and some fuzzy stuff and

00:06:09,580 --> 00:06:13,690
not everybody may be convinced that it's

00:06:11,650 --> 00:06:17,169
worth it but there's some much more

00:06:13,690 --> 00:06:18,880
concrete benefits to be had the

00:06:17,169 --> 00:06:21,490
encapsulation of business logic is

00:06:18,880 --> 00:06:24,250
really important especially as your

00:06:21,490 --> 00:06:26,770
application starts to grow so say

00:06:24,250 --> 00:06:28,270
someone comes to you and they ask I need

00:06:26,770 --> 00:06:30,760
to get a list of all of our editors how

00:06:28,270 --> 00:06:33,070
can I do that you say go ahead person

00:06:30,760 --> 00:06:35,410
dot people without filter roll equals e

00:06:33,070 --> 00:06:38,470
there's all of our editors no problem

00:06:35,410 --> 00:06:39,970
the issue is that that query most likely

00:06:38,470 --> 00:06:42,130
is going to be replicated throughout

00:06:39,970 --> 00:06:45,070
your view code all over the application

00:06:42,130 --> 00:06:47,020
if you need to create a report of all

00:06:45,070 --> 00:06:48,490
editors you're gonna write that query if

00:06:47,020 --> 00:06:49,780
you need to send a mail message to all

00:06:48,490 --> 00:06:51,670
your editors you're probably gonna write

00:06:49,780 --> 00:06:56,230
that query it's gonna be sprinkled

00:06:51,670 --> 00:06:57,670
throughout and it's it works but you

00:06:56,230 --> 00:06:59,980
kind of wonder like is this the right

00:06:57,670 --> 00:07:03,730
way to do it Bernie does not think it's

00:06:59,980 --> 00:07:06,490
the right way to do it so we can do a

00:07:03,730 --> 00:07:08,710
lot better than that so what we'll do is

00:07:06,490 --> 00:07:10,960
we'll set up a manager subclass lists it

00:07:08,710 --> 00:07:13,000
specifically for editors there's there's

00:07:10,960 --> 00:07:15,190
two quick steps of that first we'll

00:07:13,000 --> 00:07:16,390
subclass manager and only thing you need

00:07:15,190 --> 00:07:18,250
to do is provide and get query set

00:07:16,390 --> 00:07:19,660
method so in here you can see we're just

00:07:18,250 --> 00:07:21,160
we're putting the filter right inside

00:07:19,660 --> 00:07:23,710
the manager so this is all wrapped up

00:07:21,160 --> 00:07:26,500
then we just have to reference that

00:07:23,710 --> 00:07:28,780
manager in our model so we can leave the

00:07:26,500 --> 00:07:30,520
existing model into the existing manager

00:07:28,780 --> 00:07:33,040
intact and we'll set up a reference

00:07:30,520 --> 00:07:36,250
called editors who are new our new model

00:07:33,040 --> 00:07:37,840
or a new manager so now the query

00:07:36,250 --> 00:07:39,790
process is a little bit different but

00:07:37,840 --> 00:07:41,560
it's really clean again readability so

00:07:39,790 --> 00:07:43,990
person editors thought all is pretty

00:07:41,560 --> 00:07:45,220
priestly you know it's very obvious to

00:07:43,990 --> 00:07:46,420
anyone who's writing the code new

00:07:45,220 --> 00:07:48,070
members of the team everyone's gonna

00:07:46,420 --> 00:07:52,210
understand exactly what's going on with

00:07:48,070 --> 00:07:53,950
that so what if we wanted to say I

00:07:52,210 --> 00:07:55,570
needed to replicate that process for

00:07:53,950 --> 00:07:57,460
authors you know the editor is not the

00:07:55,570 --> 00:07:59,110
only person I care about it's really

00:07:57,460 --> 00:08:00,490
straightforward so I'll create another

00:07:59,110 --> 00:08:03,070
manager I'll call it offers an author

00:08:00,490 --> 00:08:04,240
manager reference that in my model just

00:08:03,070 --> 00:08:05,650
like this and it can live right

00:08:04,240 --> 00:08:07,630
alongside the other two there's really

00:08:05,650 --> 00:08:10,750
no limit the amount of managers that you

00:08:07,630 --> 00:08:12,160
can have again the same process the

00:08:10,750 --> 00:08:13,750
query first thing that authors thought

00:08:12,160 --> 00:08:15,700
all so this is good this is familiar

00:08:13,750 --> 00:08:18,790
everyone's gonna get this who's using

00:08:15,700 --> 00:08:22,690
your application there's some drawbacks

00:08:18,790 --> 00:08:25,120
though for this approach so because we

00:08:22,690 --> 00:08:27,490
are getting a query set back when we say

00:08:25,120 --> 00:08:29,230
person got editors dot all you're

00:08:27,490 --> 00:08:31,390
getting a rock or Django greats at the

00:08:29,230 --> 00:08:32,740
base query side so there's no customer

00:08:31,390 --> 00:08:35,260
operations you don't have any way to

00:08:32,740 --> 00:08:36,729
inject custom code there the other thing

00:08:35,260 --> 00:08:37,780
is we're creating a subclass every time

00:08:36,729 --> 00:08:39,160
we want to have one of these little

00:08:37,780 --> 00:08:40,599
handy shortcuts and that's gonna start

00:08:39,160 --> 00:08:43,000
feeling pretty heavy after a while

00:08:40,599 --> 00:08:46,050
especially if you need to do an

00:08:43,000 --> 00:08:48,720
intermediary step for all of those so

00:08:46,050 --> 00:08:50,220
it'll work for now but there's probably

00:08:48,720 --> 00:08:53,790
a way that we can make us better there

00:08:50,220 --> 00:08:56,850
is so what we can do is we can instead

00:08:53,790 --> 00:08:58,709
subclass query say so now I have two

00:08:56,850 --> 00:09:00,480
parts of this process I have a person

00:08:58,709 --> 00:09:02,730
query set and I'm just going to expose

00:09:00,480 --> 00:09:04,529
two methods authors and editors and

00:09:02,730 --> 00:09:06,360
that's where I'm gonna do my filter the

00:09:04,529 --> 00:09:09,029
query set is filtering itself on the

00:09:06,360 --> 00:09:11,220
roll I'm gonna create a new manager

00:09:09,029 --> 00:09:13,110
called person manager and I'm just gonna

00:09:11,220 --> 00:09:14,760
set up pass-through methods to those two

00:09:13,110 --> 00:09:17,430
I'm gonna have authors and editors and

00:09:14,760 --> 00:09:19,410
all it's doing is calling it's calling

00:09:17,430 --> 00:09:21,870
get Corey set that authors without

00:09:19,410 --> 00:09:23,640
editor I can throw away my other editors

00:09:21,870 --> 00:09:26,519
now this is gonna replace them so our

00:09:23,640 --> 00:09:29,279
our model now it's gonna look like this

00:09:26,519 --> 00:09:30,930
we're gonna have an hour person there's

00:09:29,279 --> 00:09:35,660
only one manager is called people and it

00:09:30,930 --> 00:09:38,370
points directly at the person manager so

00:09:35,660 --> 00:09:39,000
now this is what my query interface

00:09:38,370 --> 00:09:40,440
looks like

00:09:39,000 --> 00:09:43,140
a little is slightly different but it's

00:09:40,440 --> 00:09:44,820
better it's getting better so I have the

00:09:43,140 --> 00:09:46,980
ability to say person dot people about

00:09:44,820 --> 00:09:48,870
editors I get my same results as perform

00:09:46,980 --> 00:09:51,829
person had people about authors same

00:09:48,870 --> 00:09:54,839
results as before and since now I've

00:09:51,829 --> 00:09:56,279
subclass query set my custom operations

00:09:54,839 --> 00:09:58,380
are now here so I can chain these

00:09:56,279 --> 00:10:00,570
together I couldn't do that before so I

00:09:58,380 --> 00:10:01,829
could say person not people that authors

00:10:00,570 --> 00:10:03,810
editors which that doesn't make sense

00:10:01,829 --> 00:10:06,060
yet because you can only be one or the

00:10:03,810 --> 00:10:10,410
other but we'll show how that comes into

00:10:06,060 --> 00:10:12,209
play in just a few so now the team gets

00:10:10,410 --> 00:10:14,310
back together and they say the app is

00:10:12,209 --> 00:10:15,990
great but we need to be able to track

00:10:14,310 --> 00:10:18,089
whether a person is full-time or

00:10:15,990 --> 00:10:20,520
part-time no worries I'm just gonna

00:10:18,089 --> 00:10:22,290
update the model so we add that employee

00:10:20,520 --> 00:10:26,279
type attribute neither full-time or

00:10:22,290 --> 00:10:28,949
part-time no worries now we'll head back

00:10:26,279 --> 00:10:30,690
to our query set we'll add some new

00:10:28,949 --> 00:10:32,310
methods for full timers and part timers

00:10:30,690 --> 00:10:36,270
there just to mean the filter again

00:10:32,310 --> 00:10:39,209
hiding that away and then we'll next go

00:10:36,270 --> 00:10:41,670
over to a manager and add those

00:10:39,209 --> 00:10:45,660
supporting methods there as well right

00:10:41,670 --> 00:10:49,199
so now when I query against this model I

00:10:45,660 --> 00:10:51,449
have person dot people that full timers

00:10:49,199 --> 00:10:53,160
and I'll get my full-time employees just

00:10:51,449 --> 00:10:56,459
like you would expect but also I can

00:10:53,160 --> 00:10:57,620
change so I can say full timers dot

00:10:56,459 --> 00:10:59,240
authors

00:10:57,620 --> 00:11:00,860
thinking my full-time authors or

00:10:59,240 --> 00:11:06,500
part-timers are out there yeah my

00:11:00,860 --> 00:11:07,850
part-time authors but as I was going

00:11:06,500 --> 00:11:10,190
through this I started learning about

00:11:07,850 --> 00:11:12,170
this I thought there's a lot of repeat

00:11:10,190 --> 00:11:14,240
code here right we're just essentially

00:11:12,170 --> 00:11:16,520
are our manager is acting as a

00:11:14,240 --> 00:11:20,240
pass-through there's got to be a better

00:11:16,520 --> 00:11:21,800
way to do this hmm so as of Django 1:7

00:11:20,240 --> 00:11:23,380
some of you may be familiar there SEC

00:11:21,800 --> 00:11:27,110
there actually is a better way to do it

00:11:23,380 --> 00:11:29,480
what we can do is we can ask Django to

00:11:27,110 --> 00:11:31,700
extract the manager straight from a

00:11:29,480 --> 00:11:33,050
query set that we provide and it'll do

00:11:31,700 --> 00:11:36,920
it based on whatever methods that the

00:11:33,050 --> 00:11:39,920
query set has on it so what we do to

00:11:36,920 --> 00:11:42,440
make that work is we'll say people

00:11:39,920 --> 00:11:44,060
equals person query set dot as manager

00:11:42,440 --> 00:11:45,500
and now we can delete the manager

00:11:44,060 --> 00:11:47,330
entirely if you're not doing anything

00:11:45,500 --> 00:11:49,040
else just get rid of it so now we're

00:11:47,330 --> 00:11:52,570
only gonna have a query set with the

00:11:49,040 --> 00:11:52,570
methods that we're looking for filter by

00:11:52,990 --> 00:12:02,930
nobody talks about strong bad or I love

00:11:55,490 --> 00:12:05,690
strong bad so again health care health

00:12:02,930 --> 00:12:07,550
care is it can be really really tricky

00:12:05,690 --> 00:12:10,700
there's a lot of things that I ended up

00:12:07,550 --> 00:12:12,950
doing to support our application you

00:12:10,700 --> 00:12:15,620
know we had to add things like soft

00:12:12,950 --> 00:12:17,540
deletes or you know different status

00:12:15,620 --> 00:12:18,800
fields or things that you want to filter

00:12:17,540 --> 00:12:22,430
away I feel like this comes up all the

00:12:18,800 --> 00:12:24,980
time so managers are a terrific option

00:12:22,430 --> 00:12:26,630
at preventing mistakes that happen in

00:12:24,980 --> 00:12:29,120
your codebase and I like to joke about

00:12:26,630 --> 00:12:31,040
this as a way of preventing or

00:12:29,120 --> 00:12:32,540
protecting future you from present is

00:12:31,040 --> 00:12:33,770
half the time it's my own code that I

00:12:32,540 --> 00:12:36,470
wrote that I forget today exclude

00:12:33,770 --> 00:12:39,170
something so mmm the team gets back

00:12:36,470 --> 00:12:41,209
together and they say the leading the

00:12:39,170 --> 00:12:43,070
leading the person instances from a

00:12:41,209 --> 00:12:44,870
database is just is way too heavy we

00:12:43,070 --> 00:12:45,800
need to enable a soft delete and you say

00:12:44,870 --> 00:12:47,660
yeah I got this

00:12:45,800 --> 00:12:50,930
so you yeah didn't his active feel to

00:12:47,660 --> 00:12:52,700
your model just a boolean field but it's

00:12:50,930 --> 00:12:54,680
so easy to forget the filter on that

00:12:52,700 --> 00:12:57,830
every time that you run a query you have

00:12:54,680 --> 00:13:00,140
to remember at is active to the chain of

00:12:57,830 --> 00:13:01,120
filters or you're gonna end up with bad

00:13:00,140 --> 00:13:04,280
data or

00:13:01,120 --> 00:13:05,980
so hmm anybody here ever done something

00:13:04,280 --> 00:13:08,390
like that before I do that all the time

00:13:05,980 --> 00:13:09,710
and I'm I Packer on I used to be in

00:13:08,390 --> 00:13:11,360
banking and now I'm in healthcare it's

00:13:09,710 --> 00:13:14,630
like two really bad places to make

00:13:11,360 --> 00:13:18,200
mistakes like that so anyway

00:13:14,630 --> 00:13:20,180
so hmm depending on your industry too it

00:13:18,200 --> 00:13:22,460
can be harmless inconvenience or it can

00:13:20,180 --> 00:13:26,720
be a major bias issue depending on what

00:13:22,460 --> 00:13:29,240
situation so one way we can do this is

00:13:26,720 --> 00:13:30,890
we can leverage all this encapsulation

00:13:29,240 --> 00:13:33,740
that we have built into our application

00:13:30,890 --> 00:13:35,270
and really use it to our advantage so

00:13:33,740 --> 00:13:36,920
I'm gonna add a private method here

00:13:35,270 --> 00:13:38,780
called active I'm gonna assume that

00:13:36,920 --> 00:13:42,380
someone who's creating is my model

00:13:38,780 --> 00:13:43,940
doesn't need to use this active exactly

00:13:42,380 --> 00:13:45,980
method explicitly they're just gonna

00:13:43,940 --> 00:13:48,140
they're gonna get active records by

00:13:45,980 --> 00:13:50,260
using my other methods that I exposed so

00:13:48,140 --> 00:13:52,550
all I can do or all I need to do is

00:13:50,260 --> 00:13:54,560
internally within my full-timers bar

00:13:52,550 --> 00:13:56,720
timers etc I'm just gonna chain in the

00:13:54,560 --> 00:14:00,320
call to active right in there but now by

00:13:56,720 --> 00:14:02,150
default when I when I query against this

00:14:00,320 --> 00:14:03,740
model I'm only gonna get active users

00:14:02,150 --> 00:14:05,060
again do no one had to do anything

00:14:03,740 --> 00:14:07,550
different I didn't have to go rewrite

00:14:05,060 --> 00:14:10,460
all of my my queries against the person

00:14:07,550 --> 00:14:12,380
model to add this active to chained it

00:14:10,460 --> 00:14:14,180
in there I could just do it which is

00:14:12,380 --> 00:14:16,250
phenomenal you can do this with things

00:14:14,180 --> 00:14:18,110
like start dates for you know employee

00:14:16,250 --> 00:14:19,910
records or there's there's a million

00:14:18,110 --> 00:14:21,950
different applications for it but really

00:14:19,910 --> 00:14:24,170
anywhere that you need to hide something

00:14:21,950 --> 00:14:26,060
that you know you can you can sort of

00:14:24,170 --> 00:14:30,440
encapsulate that scope for even

00:14:26,060 --> 00:14:31,760
refinement without causing pain so so

00:14:30,440 --> 00:14:34,580
yeah we're gonna include only active

00:14:31,760 --> 00:14:36,770
records by default there's only one

00:14:34,580 --> 00:14:38,300
caveat to this approach here so you may

00:14:36,770 --> 00:14:42,740
notice we're not overriding the default

00:14:38,300 --> 00:14:44,540
query set that we're returning um so if

00:14:42,740 --> 00:14:46,220
we were to run at all so a person that

00:14:44,540 --> 00:14:49,310
people got all we would get in active

00:14:46,220 --> 00:14:51,230
records and that's by design here um you

00:14:49,310 --> 00:14:53,570
don't have to do it this way but there's

00:14:51,230 --> 00:14:55,670
one thing you have to really keep keep

00:14:53,570 --> 00:14:59,630
in mind is that when you assume control

00:14:55,670 --> 00:15:01,190
of the default manager or a model what

00:14:59,630 --> 00:15:02,840
you're doing is you're saying I want to

00:15:01,190 --> 00:15:04,520
control the instance or to control the

00:15:02,840 --> 00:15:07,010
queries that that gets returned from my

00:15:04,520 --> 00:15:08,600
model under all instances most of the

00:15:07,010 --> 00:15:10,440
time you're just referencing that from

00:15:08,600 --> 00:15:12,690
within your application and that's exact

00:15:10,440 --> 00:15:14,190
what it also counts for things like that

00:15:12,690 --> 00:15:16,020
you're running a dumb theta for example

00:15:14,190 --> 00:15:18,570
and it dumped eight a scenario you

00:15:16,020 --> 00:15:20,460
scenario you may want everything so you

00:15:18,570 --> 00:15:22,980
every use case is gonna be slightly

00:15:20,460 --> 00:15:24,660
different so your mileage may vary

00:15:22,980 --> 00:15:27,900
it's just gonna depend on how you want

00:15:24,660 --> 00:15:30,060
to use it the other thing to note is

00:15:27,900 --> 00:15:32,010
that there are specific methods that you

00:15:30,060 --> 00:15:33,660
can call are the specific attributes

00:15:32,010 --> 00:15:35,550
that you can set on a method with any

00:15:33,660 --> 00:15:36,270
query set so that when you call as

00:15:35,550 --> 00:15:38,040
manager

00:15:36,270 --> 00:15:41,400
they don't necessarily come over by

00:15:38,040 --> 00:15:43,440
default into the into the manager so um

00:15:41,400 --> 00:15:45,480
for instance no private methods come

00:15:43,440 --> 00:15:47,640
over by default when you call as manager

00:15:45,480 --> 00:15:49,800
and there's also there's another

00:15:47,640 --> 00:15:51,870
attribute called query set only and if

00:15:49,800 --> 00:15:53,700
you set that it's pretty obvious in

00:15:51,870 --> 00:15:55,110
names like Korea said only will prevent

00:15:53,700 --> 00:15:56,700
those methods from coming in for the

00:15:55,110 --> 00:15:59,600
manager so if you need to hide something

00:15:56,700 --> 00:16:04,140
you can certainly do that

00:15:59,600 --> 00:16:05,850
that's coverage so testing is outside

00:16:04,140 --> 00:16:08,630
the scope of this talk but it's pretty

00:16:05,850 --> 00:16:11,370
easy to see how this is a big win for

00:16:08,630 --> 00:16:14,640
for test coverage in general from within

00:16:11,370 --> 00:16:14,970
our application so really what boils

00:16:14,640 --> 00:16:16,530
down to

00:16:14,970 --> 00:16:18,270
you only have tests the query once

00:16:16,530 --> 00:16:20,310
inside the manager you don't need to

00:16:18,270 --> 00:16:22,470
test the query at 40 different

00:16:20,310 --> 00:16:29,070
touchpoints from within your application

00:16:22,470 --> 00:16:30,330
so it's a big win there one thing also I

00:16:29,070 --> 00:16:31,740
want to know if there's another talk

00:16:30,330 --> 00:16:33,510
that's coming up directly after this

00:16:31,740 --> 00:16:34,800
then it's actually in this room it's

00:16:33,510 --> 00:16:36,840
called I didn't know query sets could do

00:16:34,800 --> 00:16:38,880
that and it's actually a much deeper

00:16:36,840 --> 00:16:40,710
dive it I paired back to scope a little

00:16:38,880 --> 00:16:44,040
bit on this talk so they didn't step on

00:16:40,710 --> 00:16:47,190
that talk but he's going to really dive

00:16:44,040 --> 00:16:49,050
deep into using F objects and Q objects

00:16:47,190 --> 00:16:51,210
and how you can write frosty cold

00:16:49,050 --> 00:16:53,460
queries and do really complex into three

00:16:51,210 --> 00:16:54,480
sets it pairs really well with this

00:16:53,460 --> 00:16:55,830
because I know what you're going to do

00:16:54,480 --> 00:16:57,220
is you're going to do all those complex

00:16:55,830 --> 00:17:00,560
things and then you're going to

00:16:57,220 --> 00:17:03,190
Rustom that's a method so that you save

00:17:00,560 --> 00:17:05,540
everyone else the pain so hang out here

00:17:03,190 --> 00:17:07,730
also wanna give a quick shout out um

00:17:05,540 --> 00:17:10,730
this talk was really heavily inspired by

00:17:07,730 --> 00:17:13,310
the documentation for model managers

00:17:10,730 --> 00:17:15,080
that it's out there and anyone who's

00:17:13,310 --> 00:17:17,120
contributed to the docs they're doing

00:17:15,080 --> 00:17:18,650
amazing work when I was first getting

00:17:17,120 --> 00:17:20,089
into Python five years ago the real

00:17:18,650 --> 00:17:21,740
reason that I was drawn towards the

00:17:20,089 --> 00:17:23,870
Django framework was just the quality

00:17:21,740 --> 00:17:25,910
and the the community support around

00:17:23,870 --> 00:17:28,610
documentation I think honestly that it's

00:17:25,910 --> 00:17:31,000
unparalleled and so give those folks a

00:17:28,610 --> 00:17:31,000
hand real quick

00:17:36,850 --> 00:17:45,260
hi thank you very much um the the bit at

00:17:43,040 --> 00:17:48,830
the end with dot all got me thinking

00:17:45,260 --> 00:17:51,020
could you could you put could you

00:17:48,830 --> 00:17:56,270
override the dot all method on your

00:17:51,020 --> 00:17:59,570
query set manager or it queries fits in

00:17:56,270 --> 00:18:02,480
my neighbors mix-up yeah glass and put a

00:17:59,570 --> 00:18:07,070
keyword argument in it that defaults to

00:18:02,480 --> 00:18:10,430
say true so I'm thinking you know your

00:18:07,070 --> 00:18:12,380
is active equals true and then use that

00:18:10,430 --> 00:18:15,440
and a filter underneath would there be

00:18:12,380 --> 00:18:20,920
any gotchas or scary side effects of

00:18:15,440 --> 00:18:23,720
overriding dot all a good question I

00:18:20,920 --> 00:18:25,250
can't say it with an authority but I do

00:18:23,720 --> 00:18:27,110
know that what you'd want to do is

00:18:25,250 --> 00:18:29,240
override the in it of the query set in

00:18:27,110 --> 00:18:30,980
order to get what you're looking for and

00:18:29,240 --> 00:18:32,810
so you can there obviously it's Python

00:18:30,980 --> 00:18:35,470
objects you can pass corners into it I

00:18:32,810 --> 00:18:37,760
don't see why that wouldn't work but I

00:18:35,470 --> 00:18:39,350
was doing some experimenting with

00:18:37,760 --> 00:18:41,390
overriding it for this clock would just

00:18:39,350 --> 00:18:43,370
kind of vary in it I wasn't sure if

00:18:41,390 --> 00:18:45,710
they'd be beginning I don't want to get

00:18:43,370 --> 00:18:47,480
crazy but I do believe that you could

00:18:45,710 --> 00:18:49,310
pass into it if you wanted to

00:18:47,480 --> 00:18:52,640
the only thing is is that it's a little

00:18:49,310 --> 00:18:54,050
little LED eyes with it would just have

00:18:52,640 --> 00:18:55,220
to be a really known quantity I guess

00:18:54,050 --> 00:18:56,570
for anyone who's gonna agree against

00:18:55,220 --> 00:18:58,550
your model the whole goal with this is

00:18:56,570 --> 00:19:00,350
to make it you know really

00:18:58,550 --> 00:19:03,530
straightforward yeah I was just thinking

00:19:00,350 --> 00:19:05,420
of the use case in which 95% of time you

00:19:03,530 --> 00:19:07,670
wanted active things and you could count

00:19:05,420 --> 00:19:10,220
on someone to specify I want an inactive

00:19:07,670 --> 00:19:11,240
record when that came up yeah yeah you

00:19:10,220 --> 00:19:12,559
certainly could

00:19:11,240 --> 00:19:15,230
other thing that I've seen too is that

00:19:12,559 --> 00:19:17,870
you can actually make so I I made active

00:19:15,230 --> 00:19:19,400
a private method here but I've seen it

00:19:17,870 --> 00:19:21,559
as a public method and then you also

00:19:19,400 --> 00:19:23,420
expose a public method that really

00:19:21,559 --> 00:19:25,250
includes everything but you may get some

00:19:23,420 --> 00:19:27,140
obnoxiously long names so if someone's

00:19:25,250 --> 00:19:29,360
doing it they're totally opting in that

00:19:27,140 --> 00:19:30,770
I want I want everything including bad

00:19:29,360 --> 00:19:32,510
records and deleted records and

00:19:30,770 --> 00:19:33,320
everything so there's a lot of different

00:19:32,510 --> 00:19:36,370
ways to approach it

00:19:33,320 --> 00:19:40,940
I think it's a such a generic concept

00:19:36,370 --> 00:19:43,190
thank you yeah hi have you ever tried

00:19:40,940 --> 00:19:46,070
using model managers to do other things

00:19:43,190 --> 00:19:48,800
besides filtering I'm thinking just as

00:19:46,070 --> 00:19:51,380
examples like logging or initiating

00:19:48,800 --> 00:19:52,700
hooks or putting things in caches or

00:19:51,380 --> 00:19:54,470
anything like that yeah absolutely that

00:19:52,700 --> 00:19:55,820
was actually one thing that I was

00:19:54,470 --> 00:19:57,080
thinking about talking I didn't cover

00:19:55,820 --> 00:19:59,179
which is it's a really great way of

00:19:57,080 --> 00:20:01,820
caching because you're because we're

00:19:59,179 --> 00:20:03,830
sort of doing this composable idea of

00:20:01,820 --> 00:20:05,540
cheating together all these filters you

00:20:03,830 --> 00:20:07,730
can do really it's almost like a Russian

00:20:05,540 --> 00:20:09,710
doll caching idea where you can cache

00:20:07,730 --> 00:20:11,510
really small bits of queries and bring

00:20:09,710 --> 00:20:15,500
them all together so absolutely it's a

00:20:11,510 --> 00:20:16,880
really good way of doing that it's we

00:20:15,500 --> 00:20:18,290
experimented with this within the health

00:20:16,880 --> 00:20:20,540
care thing about using this as a way of

00:20:18,290 --> 00:20:22,220
logging access to certain models it's a

00:20:20,540 --> 00:20:25,460
little bit hard to wedge the user

00:20:22,220 --> 00:20:27,380
context into a query play but absolutely

00:20:25,460 --> 00:20:29,120
you can do a lot of things that are not

00:20:27,380 --> 00:20:35,360
necessarily query related in there

00:20:29,120 --> 00:20:37,630
because it's just a method so thank you

00:20:35,360 --> 00:20:40,520
um so quick me if I'm wrong here but

00:20:37,630 --> 00:20:43,640
overriding the objects property on a

00:20:40,520 --> 00:20:45,679
model to say like persons equals the

00:20:43,640 --> 00:20:48,440
fall manager that still leaves the

00:20:45,679 --> 00:20:51,140
objects as an accessible property on

00:20:48,440 --> 00:20:53,210
that model correct it's not so when you

00:20:51,140 --> 00:20:55,280
what happens is Django will look for the

00:20:53,210 --> 00:20:58,309
first instance of a manager that it

00:20:55,280 --> 00:20:59,750
encounters and you could you could still

00:20:58,309 --> 00:21:01,610
leave like so if you're worried about

00:20:59,750 --> 00:21:03,440
backwards compatibility you could have

00:21:01,610 --> 00:21:05,270
two references to the same manager one

00:21:03,440 --> 00:21:07,280
called objects one called people they

00:21:05,270 --> 00:21:09,860
could live next to each other but dot

00:21:07,280 --> 00:21:11,450
objects would not be for the Oval okay

00:21:09,860 --> 00:21:12,590
so you're saying up to explicitly call

00:21:11,450 --> 00:21:15,140
that out yes

00:21:12,590 --> 00:21:16,120
okay yeah Django won't automatically

00:21:15,140 --> 00:21:19,870
give you a

00:21:16,120 --> 00:21:23,710
yours there thank you sure my question

00:21:19,870 --> 00:21:25,510
kind of piggybacks off for that if does

00:21:23,710 --> 00:21:26,770
that play with if you use people instead

00:21:25,510 --> 00:21:32,260
of objects does that play well with

00:21:26,770 --> 00:21:34,150
Django rest framework I you know I

00:21:32,260 --> 00:21:36,760
couldn't I couldn't answer that I know I

00:21:34,150 --> 00:21:39,190
would guess yes because the what the the

00:21:36,760 --> 00:21:40,480
ORM does is it does it this is a kind of

00:21:39,190 --> 00:21:44,049
what I'm just saying it does discover

00:21:40,480 --> 00:21:45,970
what instances of a manager's class or

00:21:44,049 --> 00:21:47,650
subclass our president your model so

00:21:45,970 --> 00:21:49,450
it's probably leaning on the or and to

00:21:47,650 --> 00:21:52,620
do that but I honestly I'd have to test

00:21:49,450 --> 00:21:52,620
that that's a good question

00:21:53,679 --> 00:21:57,640
I just really liked how your your names

00:21:55,990 --> 00:22:01,179
worked out and those filter methods and

00:21:57,640 --> 00:22:04,360
stuff and yeah anyway I was curious did

00:22:01,179 --> 00:22:06,610
you have other clever ways of naming

00:22:04,360 --> 00:22:07,750
things with when you're like doing

00:22:06,610 --> 00:22:12,120
things where you're adding additional

00:22:07,750 --> 00:22:15,130
select related to something like so a

00:22:12,120 --> 00:22:18,549
really common example would be listing

00:22:15,130 --> 00:22:20,110
comments on a page and you want to do

00:22:18,549 --> 00:22:22,210
some user profile information with each

00:22:20,110 --> 00:22:24,610
comment you do select related and it'd

00:22:22,210 --> 00:22:27,970
be a common thing you'd want with a lot

00:22:24,610 --> 00:22:29,260
of queries sure you're saying sort of

00:22:27,970 --> 00:22:31,539
query the same data two different ways

00:22:29,260 --> 00:22:32,860
just two different managers like one

00:22:31,539 --> 00:22:34,899
would include additional data one would

00:22:32,860 --> 00:22:36,520
not could correct yeah so yeah you can

00:22:34,899 --> 00:22:38,320
certainly do that yeah I mean so we

00:22:36,520 --> 00:22:39,970
should as I mentioned you can have

00:22:38,320 --> 00:22:41,860
really an infinite number of managers

00:22:39,970 --> 00:22:43,750
living alongside of each other so you

00:22:41,860 --> 00:22:46,450
know if you were clever about it you

00:22:43,750 --> 00:22:49,600
could probably even like leverage a lot

00:22:46,450 --> 00:22:51,610
of one base query set in subclass you

00:22:49,600 --> 00:22:52,960
know subclass your subclass to include

00:22:51,610 --> 00:22:57,460
the additional information in there as

00:22:52,960 --> 00:22:59,860
well okay yeah I was more interested in

00:22:57,460 --> 00:23:01,630
if you've personally come across things

00:22:59,860 --> 00:23:04,270
I really good at naming things that seem

00:23:01,630 --> 00:23:06,490
so I was trying to make it readable yeah

00:23:04,270 --> 00:23:08,970
I have not personally done that okay

00:23:06,490 --> 00:23:08,970
thank you

00:23:10,990 --> 00:23:14,760

YouTube URL: https://www.youtube.com/watch?v=YGwSNkdwAEs


