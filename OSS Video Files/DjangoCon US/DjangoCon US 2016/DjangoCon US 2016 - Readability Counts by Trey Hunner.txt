Title: DjangoCon US 2016 - Readability Counts by Trey Hunner
Publication date: 2016-08-11
Playlist: DjangoCon US 2016
Description: 
	DjangoCon US 2016 - Readability Counts by Trey Hunner

Most code is read many more times than it is written. Constructing readable code is important, but that doesn't mean it's easy.

If you've ever found unreadable PEP8-compliant code and wondered how to fix it, this talk is for you.

Long-lived code must be maintainable and readability is a prerequisite of maintainability. It's easier to identify unreadable code than it is to create readable code.

Let's talk about how to shape tricky code into something more readable and more maintainable.

During this talk we'll discuss:

whitespace
self-documenting code
modularity
expectation management
We'll conclude this talk with a checklist of questions you can use to make your own code more readable.

This talk was presented at: https://2016.djangocon.us/schedule/presentation/14/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:02,450
come on

00:00:14,520 --> 00:00:22,210
hey everyone let's talking about

00:00:18,460 --> 00:00:24,460
readability so before we talk about

00:00:22,210 --> 00:00:26,220
readability let's just kind of make sure

00:00:24,460 --> 00:00:29,170
that we're all on the same page so

00:00:26,220 --> 00:00:31,779
textbook definition readability is

00:00:29,170 --> 00:00:35,380
really just the measure of how easily we

00:00:31,779 --> 00:00:36,670
can read our code so I'm assuming you're

00:00:35,380 --> 00:00:39,820
all here because you care about

00:00:36,670 --> 00:00:41,920
readability but why do we actually care

00:00:39,820 --> 00:00:48,600
about readability what makes it actually

00:00:41,920 --> 00:00:51,219
important so every time you fix a bug

00:00:48,600 --> 00:00:53,649
change some functionality or add a new

00:00:51,219 --> 00:00:57,399
feature to your code you probably need

00:00:53,649 --> 00:01:01,570
to read some code so you probably read

00:00:57,399 --> 00:01:03,519
code more often than you write it also

00:01:01,570 --> 00:01:05,860
you do sometimes need to change code

00:01:03,519 --> 00:01:08,740
code doesn't always stagnate immediately

00:01:05,860 --> 00:01:10,770
after you write it in order to change

00:01:08,740 --> 00:01:13,150
something you need to read it so

00:01:10,770 --> 00:01:14,770
readability is really a prerequisite for

00:01:13,150 --> 00:01:16,180
maintainability you can't have

00:01:14,770 --> 00:01:20,560
maintainable code unless you have a

00:01:16,180 --> 00:01:22,750
readable code lastly not all teams are

00:01:20,560 --> 00:01:24,640
immortal you do sometimes need to hire

00:01:22,750 --> 00:01:26,560
developers and those developers will

00:01:24,640 --> 00:01:28,720
need to be on board into your team it's

00:01:26,560 --> 00:01:32,590
a lot easier to onboard people when they

00:01:28,720 --> 00:01:35,140
can read your code so before we get

00:01:32,590 --> 00:01:37,450
started let's make it clear what we're

00:01:35,140 --> 00:01:38,799
not going to talk about we're not going

00:01:37,450 --> 00:01:41,200
to talk about how easy it is to write

00:01:38,799 --> 00:01:43,689
code we're not going to talk about how

00:01:41,200 --> 00:01:46,630
easy it is for the computer to read your

00:01:43,689 --> 00:01:49,450
code and to run your code we're only

00:01:46,630 --> 00:01:52,860
talking about how easy it is for humans

00:01:49,450 --> 00:01:52,860
to read your code

00:01:54,650 --> 00:01:59,330
so we'll talk about how to structure

00:01:57,470 --> 00:02:02,300
your code which pretty much boils down

00:01:59,330 --> 00:02:05,360
to where you put your line breaks we'll

00:02:02,300 --> 00:02:07,010
also talk about naming unnamed things

00:02:05,360 --> 00:02:09,410
and also naming things more

00:02:07,010 --> 00:02:11,510
descriptively and finally will

00:02:09,410 --> 00:02:15,470
reconsider some of the programming

00:02:11,510 --> 00:02:17,330
idioms that we use every day we'll be

00:02:15,470 --> 00:02:19,760
looking at a lot of small code examples

00:02:17,330 --> 00:02:21,410
so if you can't keep up don't worry I'm

00:02:19,760 --> 00:02:26,720
going to tweet out the code afterwards

00:02:21,410 --> 00:02:27,800
there's a lot going on all right so

00:02:26,720 --> 00:02:30,590
let's talk about the structure of our

00:02:27,800 --> 00:02:32,660
code first in the modern age line length

00:02:30,590 --> 00:02:35,630
is not a technical limitation any more

00:02:32,660 --> 00:02:39,020
screens are really wide line length is

00:02:35,630 --> 00:02:42,380
not about punch cards it's about how

00:02:39,020 --> 00:02:47,360
readable your code is long lines are not

00:02:42,380 --> 00:02:49,280
easy to read line length is a little

00:02:47,360 --> 00:02:50,930
flawed though because when it comes to

00:02:49,280 --> 00:02:53,680
readability indentation isn't quite the

00:02:50,930 --> 00:02:56,810
same as code so instead of focusing on

00:02:53,680 --> 00:02:59,000
line lang I'd propose that we focus on

00:02:56,810 --> 00:03:01,640
text with this is basically line length

00:02:59,000 --> 00:03:03,290
where we ignore the indentation now I

00:03:01,640 --> 00:03:05,720
don't know what a good average text with

00:03:03,290 --> 00:03:09,140
is I prefer kind of a 60 character

00:03:05,720 --> 00:03:12,350
maximum but really most importantly we

00:03:09,140 --> 00:03:14,450
should focus on making our code readable

00:03:12,350 --> 00:03:17,260
when it comes to text with and not

00:03:14,450 --> 00:03:19,280
worrying about some arbitrary limit

00:03:17,260 --> 00:03:23,030
short lines are not our end goal

00:03:19,280 --> 00:03:25,930
readability is our end goal all right

00:03:23,030 --> 00:03:25,930
let's talk about line breaks

00:03:28,550 --> 00:03:33,860
so this code has a text with under 60

00:03:32,030 --> 00:03:34,910
characters as you read this code you're

00:03:33,860 --> 00:03:36,800
probably trying to figure out what it

00:03:34,910 --> 00:03:38,870
does you're not going to figure out what

00:03:36,800 --> 00:03:40,480
it does until you figured out what the

00:03:38,870 --> 00:03:42,680
structure of this code actually is

00:03:40,480 --> 00:03:44,570
you'll eventually notice that that first

00:03:42,680 --> 00:03:46,910
statement there has a generator

00:03:44,570 --> 00:03:48,620
expression with two loops in it and that

00:03:46,910 --> 00:03:50,450
second statement has a generator

00:03:48,620 --> 00:03:53,480
expression with one loop and a condition

00:03:50,450 --> 00:03:55,130
in it this code is hard to read because

00:03:53,480 --> 00:03:57,320
the line breaks were inserted completely

00:03:55,130 --> 00:03:58,940
arbitrarily the author simply wraps

00:03:57,320 --> 00:04:01,310
their lines whenever they got near some

00:03:58,940 --> 00:04:03,650
maximum text with their line length the

00:04:01,310 --> 00:04:06,020
author was valuing text width or the

00:04:03,650 --> 00:04:07,340
line length is the most important thing

00:04:06,020 --> 00:04:13,430
they completely forgot about readability

00:04:07,340 --> 00:04:15,440
is this code more readable this is the

00:04:13,430 --> 00:04:16,880
same code as before but the line breaks

00:04:15,440 --> 00:04:19,519
have been moved around to split up the

00:04:16,880 --> 00:04:21,680
code in the logical parts so these line

00:04:19,519 --> 00:04:23,510
breaks were not inserted arbitrarily at

00:04:21,680 --> 00:04:27,830
all these were inserted with the Express

00:04:23,510 --> 00:04:30,530
goal of readability all right let's let

00:04:27,830 --> 00:04:34,220
take a look at another example let's say

00:04:30,530 --> 00:04:36,440
you're creating a Django model and one

00:04:34,220 --> 00:04:39,830
of your model fields has a whole bunch

00:04:36,440 --> 00:04:41,510
of arguments passed into it so we're

00:04:39,830 --> 00:04:43,550
passing a lot of arguments into this

00:04:41,510 --> 00:04:47,810
foreign key field here and it's feeling

00:04:43,550 --> 00:04:53,000
a little unwieldy is this a good way to

00:04:47,810 --> 00:04:55,370
wrap our code over multiple lines what

00:04:53,000 --> 00:05:00,800
about this way is this better or is this

00:04:55,370 --> 00:05:06,410
worse what about this one how does this

00:05:00,800 --> 00:05:08,590
compare would anything change if we were

00:05:06,410 --> 00:05:13,760
using exclusively keyword arguments here

00:05:08,590 --> 00:05:15,950
would that affect our choice at all so

00:05:13,760 --> 00:05:17,330
personally I usually prefer that last

00:05:15,950 --> 00:05:20,660
strategy for wrapping my lines

00:05:17,330 --> 00:05:22,580
especially with all keyword arguments I

00:05:20,660 --> 00:05:23,930
almost always prefer that last one the

00:05:22,580 --> 00:05:25,730
first one's a little difficult to read

00:05:23,930 --> 00:05:26,870
and that second one that can be kind of

00:05:25,730 --> 00:05:29,930
problematic when you have really long

00:05:26,870 --> 00:05:31,220
lines like we do here all right so let's

00:05:29,930 --> 00:05:34,010
take a look at that last strategy a

00:05:31,220 --> 00:05:37,669
little more closely would it be better

00:05:34,010 --> 00:05:39,050
to leave off the closing parenthesis or

00:05:37,669 --> 00:05:41,080
rather to put that closing parenthesis

00:05:39,050 --> 00:05:44,750
on its own line

00:05:41,080 --> 00:05:47,150
okay got a lot of nods here what if we

00:05:44,750 --> 00:05:50,300
added a trailing comma will this be an

00:05:47,150 --> 00:05:52,789
improvement or is this worse better okay

00:05:50,300 --> 00:05:56,810
all right so personally I also prefer

00:05:52,789 --> 00:05:58,340
this last this last one here now I am

00:05:56,810 --> 00:05:59,690
certain that there are some of you in

00:05:58,340 --> 00:06:02,270
this room who are not nodding your heads

00:05:59,690 --> 00:06:05,240
who disagree with this preference of

00:06:02,270 --> 00:06:09,229
mine that fact is okay the fact that we

00:06:05,240 --> 00:06:11,600
disagree means that we need to document

00:06:09,229 --> 00:06:13,760
the way that we're wrapping our function

00:06:11,600 --> 00:06:16,789
calls in our style guide for every

00:06:13,760 --> 00:06:20,320
project we make you do have a style

00:06:16,789 --> 00:06:20,320
guide for every project you make right

00:06:21,100 --> 00:06:32,360
your style guy doesn't just mention pep

00:06:23,660 --> 00:06:41,530
eight dramatically drink some water here

00:06:32,360 --> 00:06:43,370
as you think about this all right so

00:06:41,530 --> 00:06:46,220
consistency lies at the heart of

00:06:43,370 --> 00:06:48,500
readability you need to make sure that

00:06:46,220 --> 00:06:50,810
you are defining a style guide with

00:06:48,500 --> 00:06:55,699
really explicit conventions in every

00:06:50,810 --> 00:06:58,070
single Django project that you make do

00:06:55,699 --> 00:07:03,440
poets use a maximum line length to wrap

00:06:58,070 --> 00:07:05,990
their lines no poets break up their line

00:07:03,440 --> 00:07:07,669
breaks of purpose in poetry inserting a

00:07:05,990 --> 00:07:10,220
line break as an art form in code

00:07:07,669 --> 00:07:12,590
inserting a line break as an art form so

00:07:10,220 --> 00:07:15,590
as programmers we should wrap our lines

00:07:12,590 --> 00:07:17,539
with great care and remember all your

00:07:15,590 --> 00:07:20,630
projects should have a style guide that

00:07:17,539 --> 00:07:21,949
goes well beyond Pepe your code style

00:07:20,630 --> 00:07:25,400
conventions should be explicitly

00:07:21,949 --> 00:07:28,789
documented all right let's talk about

00:07:25,400 --> 00:07:31,010
naming things if a concept is important

00:07:28,789 --> 00:07:33,320
it needs a name names give you something

00:07:31,010 --> 00:07:36,320
to communicate about unfortunately

00:07:33,320 --> 00:07:38,440
naming things is hard naming a thing

00:07:36,320 --> 00:07:41,990
requires that you describe it and

00:07:38,440 --> 00:07:43,729
describing a thing isn't always easy not

00:07:41,990 --> 00:07:45,770
only that once you've described a thing

00:07:43,729 --> 00:07:47,570
you need to shorten that description

00:07:45,770 --> 00:07:49,880
into a name and that's not always easy

00:07:47,570 --> 00:07:53,000
either if you can't think of a good

00:07:49,880 --> 00:07:53,689
short name use a long and descriptive

00:07:53,000 --> 00:07:57,110
one

00:07:53,689 --> 00:07:59,360
that's a lot better than a subpar name

00:07:57,110 --> 00:08:00,919
that's really short you can always short

00:07:59,360 --> 00:08:03,349
a name tomorrow it's hard to make a name

00:08:00,919 --> 00:08:08,110
a little bit longer so worried about

00:08:03,349 --> 00:08:08,110
accuracy not the length of your names

00:08:08,589 --> 00:08:16,339
okay let's look it take a look at some

00:08:10,699 --> 00:08:18,529
code with some poor variable names I bet

00:08:16,339 --> 00:08:25,219
that you do not know what s C stands for

00:08:18,529 --> 00:08:27,289
in this code anyone want to guess does

00:08:25,219 --> 00:08:29,059
not stand for South Carolina so you

00:08:27,289 --> 00:08:32,180
might know if you had more context that

00:08:29,059 --> 00:08:33,769
it stands for state capitals don't use

00:08:32,180 --> 00:08:37,339
to letter variable names in Python code

00:08:33,769 --> 00:08:38,629
use descriptive names now speaking of

00:08:37,339 --> 00:08:44,480
descriptive names what does the I

00:08:38,629 --> 00:08:48,829
variable here represent index okay is it

00:08:44,480 --> 00:08:51,939
a 2-tuple maybe something else is is I

00:08:48,829 --> 00:08:55,100
sub-zero capitals or is it states or

00:08:51,939 --> 00:08:56,839
something else entirely so when you see

00:08:55,100 --> 00:08:59,480
an index access there should be a red

00:08:56,839 --> 00:09:02,930
flag index accesses can usually be

00:08:59,480 --> 00:09:05,540
replaced by variables we can do this

00:09:02,930 --> 00:09:09,079
with tuple unpacking so you can probably

00:09:05,540 --> 00:09:11,319
tell now that smc means state and

00:09:09,079 --> 00:09:14,360
capital or maybe you could guess that

00:09:11,319 --> 00:09:16,879
avoid using arbitrary indexes in your

00:09:14,360 --> 00:09:20,389
code whenever possible use to plumb

00:09:16,879 --> 00:09:23,509
packing instead it's often a lot more

00:09:20,389 --> 00:09:28,459
explicit to have named variables than it

00:09:23,509 --> 00:09:30,589
is to have indexes in your code now you

00:09:28,459 --> 00:09:32,600
probably did guest at smc means state

00:09:30,589 --> 00:09:35,750
and capital or maybe you know because I

00:09:32,600 --> 00:09:38,269
told you but there's no reason not to

00:09:35,750 --> 00:09:40,189
use real words here instead this makes

00:09:38,269 --> 00:09:43,550
our code a lot easier to read and it

00:09:40,189 --> 00:09:47,149
wasn't that hard to type name every

00:09:43,550 --> 00:09:50,029
variable with care optimized for Mac you

00:09:47,149 --> 00:09:53,029
maximum accuracy and optimized for

00:09:50,029 --> 00:09:54,559
maximum completeness make sure you're

00:09:53,029 --> 00:09:56,769
describing everything as fully as you

00:09:54,559 --> 00:09:56,769
can

00:09:57,060 --> 00:10:02,140
okay let's take a look at an example of

00:09:59,800 --> 00:10:06,550
code that can use some more variable

00:10:02,140 --> 00:10:09,040
names this code returns a list of all

00:10:06,550 --> 00:10:13,120
anagrams of words that are in the

00:10:09,040 --> 00:10:14,589
candidates list it's not bad code but

00:10:13,120 --> 00:10:17,709
it's also not the most descriptive code

00:10:14,589 --> 00:10:21,700
the if statement in particular is pretty

00:10:17,709 --> 00:10:24,040
loaded there's a lot going on there what

00:10:21,700 --> 00:10:29,620
if we have stract it out that logic into

00:10:24,040 --> 00:10:32,950
its own function so with this is anagram

00:10:29,620 --> 00:10:35,620
function here I think it's a lot more

00:10:32,950 --> 00:10:38,500
obvious that we're checking whether two

00:10:35,620 --> 00:10:39,700
words are in fact anagrams we've broken

00:10:38,500 --> 00:10:41,950
down the problem and described the

00:10:39,700 --> 00:10:43,690
process that we're using and left out

00:10:41,950 --> 00:10:46,089
the details the details are inside that

00:10:43,690 --> 00:10:48,130
function let's take a look at that

00:10:46,089 --> 00:10:50,110
function so this is pretty much exactly

00:10:48,130 --> 00:10:52,350
what we had insider if statement before

00:10:50,110 --> 00:10:55,149
it could use a little bit of work

00:10:52,350 --> 00:10:57,100
firstly weird one upper word to upper

00:10:55,149 --> 00:11:00,360
those both appear twice we've got some

00:10:57,100 --> 00:11:04,420
code duplication there let's fix that

00:11:00,360 --> 00:11:06,190
okay that's a lot better I certainly

00:11:04,420 --> 00:11:09,399
find that conditional on that last line

00:11:06,190 --> 00:11:13,870
easier to read but I think there's still

00:11:09,399 --> 00:11:18,040
more room for improvement so one

00:11:13,870 --> 00:11:21,670
strategy that we could employ here is to

00:11:18,040 --> 00:11:22,930
read our code allowed so I want to read

00:11:21,670 --> 00:11:25,449
my code allowed to see how descriptive

00:11:22,930 --> 00:11:27,310
it is here we're sorting our words

00:11:25,449 --> 00:11:29,440
checking whether sorted versions are

00:11:27,310 --> 00:11:32,440
equal and then checking whether the

00:11:29,440 --> 00:11:36,310
unsorted versions are are sorry checking

00:11:32,440 --> 00:11:40,000
whether the words are not in fact the

00:11:36,310 --> 00:11:41,769
same word now that description took me a

00:11:40,000 --> 00:11:43,180
little bit to read because it's not the

00:11:41,769 --> 00:11:44,949
easiest thing to figure out that

00:11:43,180 --> 00:11:46,570
description isn't very helpful it's not

00:11:44,949 --> 00:11:51,160
very much like how we describe this in

00:11:46,570 --> 00:11:53,050
English we add some comments to describe

00:11:51,160 --> 00:11:55,180
this in actual English we can see that

00:11:53,050 --> 00:11:56,980
we're actually checking whether the

00:11:55,180 --> 00:11:59,560
words have the same letters and whether

00:11:56,980 --> 00:12:01,180
they're not the same words now this code

00:11:59,560 --> 00:12:03,579
has format a little bit strangely but it

00:12:01,180 --> 00:12:05,970
is more descriptive we've added comments

00:12:03,579 --> 00:12:08,410
to describe what's actually going on

00:12:05,970 --> 00:12:09,190
whenever you add comments though that

00:12:08,410 --> 00:12:10,510
might be

00:12:09,190 --> 00:12:12,610
that you actually need another variable

00:12:10,510 --> 00:12:16,810
name or a better variable name in this

00:12:12,610 --> 00:12:18,220
case we need some more variable names so

00:12:16,810 --> 00:12:19,810
here we've turned those conditional

00:12:18,220 --> 00:12:22,450
statements into two new variables that

00:12:19,810 --> 00:12:25,890
describe what they actually do are

00:12:22,450 --> 00:12:28,390
different letters and have same words

00:12:25,890 --> 00:12:30,370
describes exactly what we're doing that

00:12:28,390 --> 00:12:32,160
last line literally says return have

00:12:30,370 --> 00:12:34,240
same letters and are different words

00:12:32,160 --> 00:12:35,920
we've broken down this problem to make

00:12:34,240 --> 00:12:37,210
it more clear and more readable because

00:12:35,920 --> 00:12:41,200
we're conveying the intent of our

00:12:37,210 --> 00:12:43,060
algorithm not just the details okay so

00:12:41,200 --> 00:12:46,060
we ended up adding four extra lines to

00:12:43,060 --> 00:12:48,640
that code but we broke down our process

00:12:46,060 --> 00:12:52,840
a bit in doing so it's a little bit more

00:12:48,640 --> 00:12:55,030
understandable at first glance you may

00:12:52,840 --> 00:12:56,350
think this example is silly I mean what

00:12:55,030 --> 00:12:58,600
we started with wasn't really that

00:12:56,350 --> 00:13:00,850
complex but this process was a

00:12:58,600 --> 00:13:02,080
worthwhile mental exercise regardless

00:13:00,850 --> 00:13:04,540
even if we're going to end up reverting

00:13:02,080 --> 00:13:06,340
this code afterwards the exercise of

00:13:04,540 --> 00:13:08,290
refactoring your code to be more self

00:13:06,340 --> 00:13:10,840
documenting is almost always a

00:13:08,290 --> 00:13:11,800
worthwhile endeavor it helps you reframe

00:13:10,840 --> 00:13:16,570
the way that you actually think about

00:13:11,800 --> 00:13:18,670
your code okay let's take a look at a

00:13:16,570 --> 00:13:19,990
complex Django model method I'm gonna go

00:13:18,670 --> 00:13:22,480
through this one a little bit quickly

00:13:19,990 --> 00:13:23,680
and there's a lot of code here I don't

00:13:22,480 --> 00:13:25,690
want you to read this code I'd like you

00:13:23,680 --> 00:13:29,590
to unfocus your eyes and focus on just

00:13:25,690 --> 00:13:32,800
the shape of this code there did you do

00:13:29,590 --> 00:13:34,420
it okay so the first thing you'll notice

00:13:32,800 --> 00:13:36,250
is that this code is broke up into three

00:13:34,420 --> 00:13:37,900
sections there's three sections because

00:13:36,250 --> 00:13:41,290
there are three logical parts to this

00:13:37,900 --> 00:13:43,840
code if we had very or if we add on

00:13:41,290 --> 00:13:45,400
comments to each of those sections we

00:13:43,840 --> 00:13:48,760
can better see what's actually going on

00:13:45,400 --> 00:13:50,320
now remember i said comments are maybe a

00:13:48,760 --> 00:13:51,820
step in the direction of making

00:13:50,320 --> 00:13:53,710
variables that don't exist or making

00:13:51,820 --> 00:13:56,500
variables with better names we're

00:13:53,710 --> 00:13:58,960
missing variables here we could name

00:13:56,500 --> 00:14:01,630
these sections by making methods for

00:13:58,960 --> 00:14:03,610
them so even when you see the code here

00:14:01,630 --> 00:14:05,280
you're tempted to read the comment

00:14:03,610 --> 00:14:12,970
because the comments was actually saying

00:14:05,280 --> 00:14:15,040
what's going on now second step make

00:14:12,970 --> 00:14:17,380
methods for these if we split these out

00:14:15,040 --> 00:14:19,360
into helper functions those names

00:14:17,380 --> 00:14:22,150
actually describe what the code is doing

00:14:19,360 --> 00:14:23,470
I left in the dock strings because you

00:14:22,150 --> 00:14:25,060
know there's no reason not to leave

00:14:23,470 --> 00:14:26,740
documentation documentation is not quite

00:14:25,060 --> 00:14:30,370
the same as comments it's always good to

00:14:26,740 --> 00:14:32,530
document your things if we call those

00:14:30,370 --> 00:14:34,300
methods in our original function this

00:14:32,530 --> 00:14:35,800
now describes the actual process this is

00:14:34,300 --> 00:14:37,360
almost like English here if we wanted to

00:14:35,800 --> 00:14:39,460
see what each of these is doing we can

00:14:37,360 --> 00:14:44,710
jump into that function we don't have to

00:14:39,460 --> 00:14:46,300
be distracted by the fact that it's

00:14:44,710 --> 00:14:50,710
doing some really detailed stuff under

00:14:46,300 --> 00:14:52,000
the hood okay so brief recap read your

00:14:50,710 --> 00:14:53,800
code allowed to ensure that you're

00:14:52,000 --> 00:14:55,990
describing the intent of your algorithm

00:14:53,800 --> 00:14:58,810
in detail remember that comments are

00:14:55,990 --> 00:15:00,520
great for describing things but

00:14:58,810 --> 00:15:02,620
sometimes a comment is just the first

00:15:00,520 --> 00:15:04,950
step toward a better variable name or a

00:15:02,620 --> 00:15:07,000
variable name that didn't exist before

00:15:04,950 --> 00:15:09,790
also make sure you're giving a name to

00:15:07,000 --> 00:15:14,110
everything and in general describe for

00:15:09,790 --> 00:15:15,670
descriptive and self documenting code ok

00:15:14,110 --> 00:15:17,260
so this section is a little long I may

00:15:15,670 --> 00:15:22,060
end up skipping over one or two of these

00:15:17,260 --> 00:15:23,650
little subsections here basically let's

00:15:22,060 --> 00:15:26,590
talk about the code constructs that we

00:15:23,650 --> 00:15:28,990
actually use and make sure that our code

00:15:26,590 --> 00:15:32,770
constructs are as specific as they

00:15:28,990 --> 00:15:34,750
should be when given the opportunity I

00:15:32,770 --> 00:15:36,520
prefer to use a more special purpose

00:15:34,750 --> 00:15:41,380
tool than a more general purpose tool if

00:15:36,520 --> 00:15:44,860
it makes sense specific problems call

00:15:41,380 --> 00:15:48,460
for specific solutions so let's take a

00:15:44,860 --> 00:15:50,350
look at exception handling here we're

00:15:48,460 --> 00:15:52,510
opening a database connection reading

00:15:50,350 --> 00:15:53,590
from it and closing the connection we

00:15:52,510 --> 00:15:56,110
need to make sure that we're closing the

00:15:53,590 --> 00:15:59,500
connection every time that we exit this

00:15:56,110 --> 00:16:02,590
code even if an exception occurs so we

00:15:59,500 --> 00:16:04,750
have this tri finally block here now

00:16:02,590 --> 00:16:06,340
whenever you see any code that has kind

00:16:04,750 --> 00:16:09,850
of a cleanup step think about whether or

00:16:06,340 --> 00:16:11,590
not you could use a context manager it's

00:16:09,850 --> 00:16:13,660
not that hard to actually write your own

00:16:11,590 --> 00:16:15,700
context managers you just need a dunder

00:16:13,660 --> 00:16:17,170
enter and add under exit method by the

00:16:15,700 --> 00:16:19,180
way dunder stands for double underscore

00:16:17,170 --> 00:16:22,090
or anyone who's not familiar with that

00:16:19,180 --> 00:16:25,900
nomenclature let's look at how this

00:16:22,090 --> 00:16:27,580
context manager is actually used okay so

00:16:25,900 --> 00:16:29,020
this is a little bit more clear than

00:16:27,580 --> 00:16:30,640
what we had before in the sense that

00:16:29,020 --> 00:16:32,710
we're not distracted by the fact that we

00:16:30,640 --> 00:16:34,930
have to close our database connection

00:16:32,710 --> 00:16:36,700
when we're done with it every time the

00:16:34,930 --> 00:16:39,380
code does that work for us

00:16:36,700 --> 00:16:41,330
now we just implemented our own context

00:16:39,380 --> 00:16:43,760
manager but the standard library already

00:16:41,330 --> 00:16:45,680
had one we could have used in context

00:16:43,760 --> 00:16:47,540
live club closing you don't always have

00:16:45,680 --> 00:16:49,400
to implement your own context managers

00:16:47,540 --> 00:16:51,890
but you can if you want to and it's not

00:16:49,400 --> 00:16:55,130
that hard so when you have a clean up

00:16:51,890 --> 00:16:58,460
step think of a context manager okay

00:16:55,130 --> 00:17:00,650
let's talk about four loops this code

00:16:58,460 --> 00:17:03,230
loops over something you can tell that

00:17:00,650 --> 00:17:04,670
even though it's blurred out this code

00:17:03,230 --> 00:17:07,610
actually does a little bit of something

00:17:04,670 --> 00:17:09,560
more though specifically the purpose of

00:17:07,610 --> 00:17:11,750
this code is to loop over something

00:17:09,560 --> 00:17:14,060
check a condition and create a new list

00:17:11,750 --> 00:17:16,550
from every item that passes that

00:17:14,060 --> 00:17:18,260
condition so we're using a list append

00:17:16,550 --> 00:17:20,420
an if statement and a for loop to

00:17:18,260 --> 00:17:24,350
accomplish this task there's a better

00:17:20,420 --> 00:17:26,420
way to write this code though here we

00:17:24,350 --> 00:17:27,710
are accomplishing the same task but

00:17:26,420 --> 00:17:30,050
instead of using a for loop in an if

00:17:27,710 --> 00:17:32,330
statement and a depend call we're using

00:17:30,050 --> 00:17:34,730
a list comprehension we've removed a lot

00:17:32,330 --> 00:17:37,030
of the unnecessary information that our

00:17:34,730 --> 00:17:40,910
brains would have to process otherwise

00:17:37,030 --> 00:17:43,160
at a glance we can see that this code is

00:17:40,910 --> 00:17:46,130
not just looping it's creating one list

00:17:43,160 --> 00:17:47,420
from another list that's a better

00:17:46,130 --> 00:17:51,170
description of what our code actually

00:17:47,420 --> 00:17:55,550
does when you have a specific problem

00:17:51,170 --> 00:17:57,050
use a specific tool okay I'm going to

00:17:55,550 --> 00:18:00,110
skip this one you can look at the slides

00:17:57,050 --> 00:18:05,210
afterwards well we'll go over it very

00:18:00,110 --> 00:18:07,160
briefly so essentially if you have

00:18:05,210 --> 00:18:09,530
something that has methods that look

00:18:07,160 --> 00:18:12,680
like this contains set add remove is

00:18:09,530 --> 00:18:15,410
empty this is very similar to what

00:18:12,680 --> 00:18:16,910
Python objects actually do under the

00:18:15,410 --> 00:18:18,440
hood what a container does of any

00:18:16,910 --> 00:18:20,600
variety of what a list does what a

00:18:18,440 --> 00:18:22,730
dictionary does think about whether or

00:18:20,600 --> 00:18:24,650
not you should be making your own

00:18:22,730 --> 00:18:26,150
version of those containers you can do

00:18:24,650 --> 00:18:28,550
that with abstract base classes in the

00:18:26,150 --> 00:18:33,020
standard library or you can roll it

00:18:28,550 --> 00:18:35,740
yourself using dunder methods let's talk

00:18:33,020 --> 00:18:35,740
about functions

00:18:36,450 --> 00:18:45,750
this code connects to an imap server and

00:18:39,500 --> 00:18:47,610
reads email notice that one of these

00:18:45,750 --> 00:18:49,590
functions returns a server object and

00:18:47,610 --> 00:18:52,410
the other three functions except a

00:18:49,590 --> 00:18:56,010
server object should be a head that

00:18:52,410 --> 00:18:57,330
something weird is going on here if you

00:18:56,010 --> 00:19:00,360
ever find that you're passing the same

00:18:57,330 --> 00:19:02,580
data to multiple functions think about

00:19:00,360 --> 00:19:04,470
making a class this is exactly what

00:19:02,580 --> 00:19:06,350
classes were designed for I know there's

00:19:04,470 --> 00:19:08,520
a big push back against making classes

00:19:06,350 --> 00:19:11,460
an object or any programming in general

00:19:08,520 --> 00:19:13,170
but classes bundle functionality and

00:19:11,460 --> 00:19:15,030
data together whenever you're doing that

00:19:13,170 --> 00:19:22,110
in your code it's appropriate to use

00:19:15,030 --> 00:19:24,960
them okay let's do a recap when you find

00:19:22,110 --> 00:19:26,910
yourself wrapping code in redundant try

00:19:24,960 --> 00:19:28,380
final ease or try except blocks and

00:19:26,910 --> 00:19:30,270
whenever you have a clean up step in

00:19:28,380 --> 00:19:34,530
general think about using a context

00:19:30,270 --> 00:19:36,570
manager also when you're making one list

00:19:34,530 --> 00:19:38,180
from another list there's an idiom for

00:19:36,570 --> 00:19:41,010
that it's called the list comprehension

00:19:38,180 --> 00:19:45,450
it might be a little bit more clear to

00:19:41,010 --> 00:19:49,020
use than using a for loop and when one

00:19:45,450 --> 00:19:51,300
object looks like a container but isn't

00:19:49,020 --> 00:19:52,800
a container it probably should be a

00:19:51,300 --> 00:19:56,000
container you can turn it into a

00:19:52,800 --> 00:19:58,200
container by using gunder methods

00:19:56,000 --> 00:19:59,430
they'll be afraid to use those done your

00:19:58,200 --> 00:20:02,040
methods either regardless of whether

00:19:59,430 --> 00:20:04,110
it's for context manager a container or

00:20:02,040 --> 00:20:06,120
anything else dunder methods are your

00:20:04,110 --> 00:20:07,350
friend they're not I'm not calling the

00:20:06,120 --> 00:20:11,850
magic methods because they are not

00:20:07,350 --> 00:20:16,770
magical if you have a specific problem

00:20:11,850 --> 00:20:18,690
use a specific solution when you're

00:20:16,770 --> 00:20:22,020
writing code stop to pause every once in

00:20:18,690 --> 00:20:24,120
a while and actively consider the

00:20:22,020 --> 00:20:25,740
readability of your code you can use

00:20:24,120 --> 00:20:28,320
this checklist as a starting point for

00:20:25,740 --> 00:20:30,750
your own reflections on your own codes

00:20:28,320 --> 00:20:32,580
readability as you use this checklist on

00:20:30,750 --> 00:20:33,900
your code start to build up that code

00:20:32,580 --> 00:20:36,000
style guide that we talked about earlier

00:20:33,900 --> 00:20:39,810
that I know you all have that want to

00:20:36,000 --> 00:20:42,590
improve and remember that every project

00:20:39,810 --> 00:20:45,000
does need a detailed code style guide

00:20:42,590 --> 00:20:46,470
the more decisions you can offload to

00:20:45,000 --> 00:20:50,160
the style guide the more brainpower

00:20:46,470 --> 00:20:53,030
you'll have left over to spend on more

00:20:50,160 --> 00:20:55,050
interesting and less trivial things and

00:20:53,030 --> 00:20:56,550
finally here's a list of videos I

00:20:55,050 --> 00:20:57,690
recommend washing when you get home some

00:20:56,550 --> 00:21:00,690
of which contradicts some of the things

00:20:57,690 --> 00:21:03,240
I said some of which support them we

00:21:00,690 --> 00:21:08,130
have time for questions we do we have

00:21:03,240 --> 00:21:13,500
time for two short questions Hydra great

00:21:08,130 --> 00:21:16,440
talk um I often forget myself as a

00:21:13,500 --> 00:21:20,130
Python nista when I can break up a list

00:21:16,440 --> 00:21:22,440
comprehension so are there rules does

00:21:20,130 --> 00:21:24,330
Python care and what are the rules from

00:21:22,440 --> 00:21:26,400
trying to follow your example and break

00:21:24,330 --> 00:21:28,380
up a list comprehension to replace a

00:21:26,400 --> 00:21:30,480
four if statement when you can create a

00:21:28,380 --> 00:21:33,390
list comprehension out of a four loop no

00:21:30,480 --> 00:21:35,970
more like I'm used to writing it as one

00:21:33,390 --> 00:21:37,920
big long thing it does Python care where

00:21:35,970 --> 00:21:40,470
I split it into multiple line right

00:21:37,920 --> 00:21:42,690
right so as long if you were inside

00:21:40,470 --> 00:21:45,420
parentheses square brackets or curly

00:21:42,690 --> 00:21:47,400
braces in Python Python allows you to

00:21:45,420 --> 00:21:49,170
break that up wherever you want in fact

00:21:47,400 --> 00:21:50,940
you can even indent your coded really

00:21:49,170 --> 00:21:54,360
weird ways just to make people unhappy

00:21:50,940 --> 00:21:58,200
don't do that though it implicit line

00:21:54,360 --> 00:22:00,060
wrapping is a really easy thing in

00:21:58,200 --> 00:22:01,710
Python so you can break it up wherever I

00:22:00,060 --> 00:22:03,780
would recommend breaking it up before

00:22:01,710 --> 00:22:06,300
the four claws and before the basically

00:22:03,780 --> 00:22:10,380
before the logical components cool thank

00:22:06,300 --> 00:22:12,960
you yep thanks we go talk do you have a

00:22:10,380 --> 00:22:14,910
suggestion for a good guy starting god

00:22:12,960 --> 00:22:18,780
that's out there that you recommend to

00:22:14,910 --> 00:22:20,730
look at two then adopt around the that

00:22:18,780 --> 00:22:22,710
it looked at two what two other good

00:22:20,730 --> 00:22:25,800
style guides out there that we can adopt

00:22:22,710 --> 00:22:28,800
two and adjust to our own personal needs

00:22:25,800 --> 00:22:33,300
know this is kind of one of those do as

00:22:28,800 --> 00:22:37,130
I say not as I do situations none of my

00:22:33,300 --> 00:22:37,130
open source projects have a style guide

00:22:43,460 --> 00:22:50,309
all right well with that let's get ready

00:22:48,510 --> 00:22:53,420
for the next session coming up in five

00:22:50,309 --> 00:22:53,420
minutes thanks Trey

00:23:03,940 --> 00:23:06,000

YouTube URL: https://www.youtube.com/watch?v=NvkC5UBJqeY


