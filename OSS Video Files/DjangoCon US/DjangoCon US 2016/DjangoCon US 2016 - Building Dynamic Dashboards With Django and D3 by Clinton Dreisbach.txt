Title: DjangoCon US 2016 - Building Dynamic Dashboards With Django and D3 by Clinton Dreisbach
Publication date: 2016-08-11
Playlist: DjangoCon US 2016
Description: 
	DjangoCon US 2016 - Building Dynamic Dashboards With Django and D3 by Clinton Dreisbach

Django does a great job of building dynamic web applications, but it's not always clear how to use it for a single-page JavaScript-driven application like a data dashboard. We will walk through a dashboard built with Django for emergency services data and dig into the following questions.

How do I serve data up to my dashboard? We'll show how the Django REST Framework can make this easy.
How do I allow deep linking to particular queries on my dashboard? We'll use django-url-filter to transform a URL hash into a database query.
How do I get statistical calculations like quartiles out of Django? We'll stretch the Django ORM to use PostgreSQL's powerful statistics functions.
How do I make all of this work with D3? We'll have a brief survey of how D3 works and see how to plug data from Django into it.

This talk was presented at: https://2016.djangocon.us/schedule/presentation/40/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:02,450
come on

00:00:15,830 --> 00:00:22,970
this is my first jade cocon which is

00:00:18,600 --> 00:00:22,970
super exciting for me I am older

00:00:25,720 --> 00:00:28,869
I'm a little nervous not because of the

00:00:27,339 --> 00:00:30,460
talk but because I brought my

00:00:28,869 --> 00:00:31,419
four-year-old son and he's in daycare

00:00:30,460 --> 00:00:33,930
he's the first time going to a

00:00:31,419 --> 00:00:35,320
conference so if my phone starts buzzing

00:00:33,930 --> 00:00:37,420
uncontrollably

00:00:35,320 --> 00:00:38,559
we'll see what do about that I mean if

00:00:37,420 --> 00:00:40,390
you see a little Hobbit running around

00:00:38,559 --> 00:00:42,309
tonight bowling that would be mine say

00:00:40,390 --> 00:00:46,030
hello to him he looks just like Noble

00:00:42,309 --> 00:00:48,760
Baggins it's uncanny

00:00:46,030 --> 00:00:50,769
cool so before we get started today I

00:00:48,760 --> 00:00:52,329
just want to make one note about content

00:00:50,769 --> 00:00:54,489
the dashboard that I'm going to show

00:00:52,329 --> 00:00:56,530
this is all a case study based off the

00:00:54,489 --> 00:00:58,869
dashboard I've built and just released

00:00:56,530 --> 00:01:01,540
his open-source last week it's all based

00:00:58,869 --> 00:01:04,119
around nine-one-one data which is of

00:01:01,540 --> 00:01:06,700
course police data and the police are

00:01:04,119 --> 00:01:08,710
very touchy subject right now I just

00:01:06,700 --> 00:01:10,840
want to state that up front in case

00:01:08,710 --> 00:01:12,939
anyone has any issues with that that is

00:01:10,840 --> 00:01:15,040
okay I understand this is not a pro

00:01:12,939 --> 00:01:16,299
priest all I hundred percent fully

00:01:15,040 --> 00:01:19,060
support the black lives matter movement

00:01:16,299 --> 00:01:21,939
this is not an anti please talk either

00:01:19,060 --> 00:01:23,680
it's just about 9-1-1 data but with that

00:01:21,939 --> 00:01:25,150
said i worked on this in coordination

00:01:23,680 --> 00:01:27,250
with my local police department where i

00:01:25,150 --> 00:01:29,140
also built an application to help the

00:01:27,250 --> 00:01:33,100
detect racial profiling or traffic stops

00:01:29,140 --> 00:01:35,679
and prevent that great so the problem

00:01:33,100 --> 00:01:37,509
that i had to solve i started at my job

00:01:35,679 --> 00:01:39,039
and they came to me and said hey we want

00:01:37,509 --> 00:01:41,200
to go this dashboard that handles

00:01:39,039 --> 00:01:43,869
millions of 911 rights we have a

00:01:41,200 --> 00:01:46,600
prototype here it is the prototype is

00:01:43,869 --> 00:01:48,880
built it's a static site it uses a csv

00:01:46,600 --> 00:01:50,619
file for the backend it serves

00:01:48,880 --> 00:01:53,530
everything in the front end and it's

00:01:50,619 --> 00:01:55,780
cool but it really doesn't scale you can

00:01:53,530 --> 00:01:58,119
see it here it looks nice but it really

00:01:55,780 --> 00:01:59,649
doesn't scale and so they said hey we

00:01:58,119 --> 00:02:01,899
would like for you to build something

00:01:59,649 --> 00:02:04,869
better that we can really use millions

00:02:01,899 --> 00:02:06,520
and millions of records for this is when

00:02:04,869 --> 00:02:09,729
i end up building and we'll look at it

00:02:06,520 --> 00:02:11,620
in detail later but with this i built it

00:02:09,729 --> 00:02:14,830
with the backend of django where I do

00:02:11,620 --> 00:02:16,560
all my data processing and then a front

00:02:14,830 --> 00:02:19,420
end using d3

00:02:16,560 --> 00:02:22,510
d3 if you're not familiar is a data

00:02:19,420 --> 00:02:24,880
visualization library in JavaScript it's

00:02:22,510 --> 00:02:27,250
fairly intimidating who in here is ever

00:02:24,880 --> 00:02:30,190
seen or been intimidated by particularly

00:02:27,250 --> 00:02:31,420
d3 or and/or JavaScript that's awesome

00:02:30,190 --> 00:02:32,320
you're not going to have to see too much

00:02:31,420 --> 00:02:34,910
of it so

00:02:32,320 --> 00:02:36,080
okay Carter might talk actually

00:02:34,910 --> 00:02:39,400
recommends hey maybe you don't want use

00:02:36,080 --> 00:02:39,400
t3 but

00:02:41,020 --> 00:02:50,230
so the architecture of it so here's the

00:02:47,950 --> 00:02:51,940
tools that I use this is my stack I use

00:02:50,230 --> 00:02:53,200
Django of course it's right now I'm

00:02:51,940 --> 00:02:55,450
running on June you know 1/8 but I want

00:02:53,200 --> 00:02:57,190
to upgrade it I don't mention the

00:02:55,450 --> 00:02:59,830
database I use here I use post or sequel

00:02:57,190 --> 00:03:01,870
which I see is kind of a necessity for

00:02:59,830 --> 00:03:03,670
this and you'll see why later I use the

00:03:01,870 --> 00:03:06,330
jig no rest framework which has been

00:03:03,670 --> 00:03:10,270
great for me I absolutely love it

00:03:06,330 --> 00:03:12,580
obscure library kanji no URL filter and

00:03:10,270 --> 00:03:13,000
then on the JavaScript side I use

00:03:12,580 --> 00:03:14,740
something called

00:03:13,000 --> 00:03:17,230
are active Jas this gives us the ability

00:03:14,740 --> 00:03:18,820
to reactive programming I'll kind of

00:03:17,230 --> 00:03:20,650
explain what reactive programming is as

00:03:18,820 --> 00:03:22,450
we get further into the dashboard and

00:03:20,650 --> 00:03:24,400
then d3

00:03:22,450 --> 00:03:26,680
of course is my visualization library in

00:03:24,400 --> 00:03:29,440
DD 3 is a higher-level library on top of

00:03:26,680 --> 00:03:31,030
that and then leaflet leaflet is a

00:03:29,440 --> 00:03:34,690
mapping library that allow us to have

00:03:31,030 --> 00:03:37,390
dynamic maps before we get started I

00:03:34,690 --> 00:03:39,820
think just so we have context it'd be

00:03:37,390 --> 00:03:49,000
nice to see what we're looking at so I'm

00:03:39,820 --> 00:03:51,040
going to pull that up right here so the

00:03:49,000 --> 00:03:52,870
dashboard that I'm talking about this is

00:03:51,040 --> 00:03:54,400
it this is using New Orleans data I

00:03:52,870 --> 00:03:55,330
don't live in New Orleans and live in

00:03:54,400 --> 00:03:57,160
Durham North Carolina

00:03:55,330 --> 00:03:59,440
the Durham one is the one that I created

00:03:57,160 --> 00:04:00,970
for my local police department this is

00:03:59,440 --> 00:04:02,770
using public data that's a really good

00:04:00,970 --> 00:04:05,230
point this is open source so you can use

00:04:02,770 --> 00:04:07,840
it with public data but here I can see

00:04:05,230 --> 00:04:09,460
the call volume over time you see it

00:04:07,840 --> 00:04:11,170
dips and then this is because we don't

00:04:09,460 --> 00:04:13,390
have today's data yet

00:04:11,170 --> 00:04:15,130
I can click through and see if I want to

00:04:13,390 --> 00:04:17,470
see all general assistance calls only

00:04:15,130 --> 00:04:19,960
click that now I've just got general

00:04:17,470 --> 00:04:23,140
assistance calls I can see how heavy it

00:04:19,960 --> 00:04:26,290
is all over town I can with response

00:04:23,140 --> 00:04:29,200
time and see that the median response

00:04:26,290 --> 00:04:30,910
time for general assistance calls is 5

00:04:29,200 --> 00:04:33,250
minutes and 26 seconds for the last few

00:04:30,910 --> 00:04:36,880
weeks that's not too bad overall it

00:04:33,250 --> 00:04:42,210
could be worse and then I can even look

00:04:36,880 --> 00:04:42,210
and see all the calls by location

00:04:46,100 --> 00:04:49,940
Wow this isn't gonna work

00:04:50,850 --> 00:04:56,699
so yeah this clusters them so I can go

00:04:54,120 --> 00:04:58,919
in look at individual calls and see like

00:04:56,699 --> 00:05:02,069
this call right here was a complete

00:04:58,919 --> 00:05:04,050
other and I can see high call volume

00:05:02,069 --> 00:05:06,449
locations which this is being used

00:05:04,050 --> 00:05:08,479
actually detect mental health promise of

00:05:06,449 --> 00:05:10,919
community and some places using that

00:05:08,479 --> 00:05:12,690
okay now that we just have the like

00:05:10,919 --> 00:05:20,130
brief is over you how do you build

00:05:12,690 --> 00:05:22,740
something like this with Django cool so

00:05:20,130 --> 00:05:24,840
this is the architecture and I'm going

00:05:22,740 --> 00:05:26,250
to come back to this again at the end so

00:05:24,840 --> 00:05:28,259
you're gonna get to see this again but

00:05:26,250 --> 00:05:30,210
if you look here you can see I start

00:05:28,259 --> 00:05:32,550
with a request that comes in I load a

00:05:30,210 --> 00:05:34,800
page and then I sort of push everything

00:05:32,550 --> 00:05:36,990
off to the front end where I'm handling

00:05:34,800 --> 00:05:39,479
everything with d3 I'm using Django

00:05:36,990 --> 00:05:41,639
really to generate summary stats which

00:05:39,479 --> 00:05:43,080
are the summarizations that you see on

00:05:41,639 --> 00:05:49,620
the front end it takes the filters that

00:05:43,080 --> 00:05:50,310
come in and generates it okay Django how

00:05:49,620 --> 00:05:53,789
I use it

00:05:50,310 --> 00:05:55,979
well so for Jake for the Django side of

00:05:53,789 --> 00:05:58,770
this I have an end point for every page

00:05:55,979 --> 00:06:01,110
that you saw when I flip through the

00:05:58,770 --> 00:06:02,820
dashboard so this is really simple

00:06:01,110 --> 00:06:05,580
there's three little end points here

00:06:02,820 --> 00:06:09,419
that all they have an api prefix because

00:06:05,580 --> 00:06:12,690
they all serve out JSON responses they

00:06:09,419 --> 00:06:15,479
all serve very they try to keep a

00:06:12,690 --> 00:06:17,849
compact and I they're all summarized

00:06:15,479 --> 00:06:19,199
ahead of time most of that's done in the

00:06:17,849 --> 00:06:22,740
database to make this as fast as

00:06:19,199 --> 00:06:24,389
possible the way I approached that was I

00:06:22,740 --> 00:06:26,729
came up with this idea of a summary

00:06:24,389 --> 00:06:28,500
model where I put all the analysis that

00:06:26,729 --> 00:06:31,590
we need to do to display an entire

00:06:28,500 --> 00:06:34,979
dashboard page in here this is just a

00:06:31,590 --> 00:06:39,479
very small subset of it you can see here

00:06:34,979 --> 00:06:40,500
in this I don't have a laser pointer so

00:06:39,479 --> 00:06:42,180
it's gonna be hard to point but that's

00:06:40,500 --> 00:06:43,979
okay you can see here in this I have

00:06:42,180 --> 00:06:47,159
sort of a base one folk tall overview

00:06:43,979 --> 00:06:50,250
and then I used in my subclasses this

00:06:47,159 --> 00:06:52,320
idea of annotations each page is really

00:06:50,250 --> 00:06:54,560
about a specific subject so we've got a

00:06:52,320 --> 00:06:57,029
page that's about the amount of calls

00:06:54,560 --> 00:06:58,000
for especially for departments and

00:06:57,029 --> 00:06:59,950
planning they want to see

00:06:58,000 --> 00:07:01,540
the number of calls for the public we

00:06:59,950 --> 00:07:03,490
really want to see the response time I

00:07:01,540 --> 00:07:06,400
care a lot about where the response time

00:07:03,490 --> 00:07:08,800
is in my community and so I can have a

00:07:06,400 --> 00:07:12,430
different annotation for that here but

00:07:08,800 --> 00:07:14,740
every one of the particular integrations

00:07:12,430 --> 00:07:18,310
I want to do whether it's did you know

00:07:14,740 --> 00:07:20,710
by day week by district by type of call

00:07:18,310 --> 00:07:22,720
by unit all those different things I can

00:07:20,710 --> 00:07:24,430
do and I just put the different

00:07:22,720 --> 00:07:27,550
annotations for how I want to aggregate

00:07:24,430 --> 00:07:29,230
that inside of each one here you might

00:07:27,550 --> 00:07:31,480
notice it here down the bottom on that

00:07:29,230 --> 00:07:35,290
last annotation for the mean the average

00:07:31,480 --> 00:07:38,350
seconds of officer response time seconds

00:07:35,290 --> 00:07:41,110
is not a standard Jango function for the

00:07:38,350 --> 00:07:44,919
ORM so I'll talk a little bit about why

00:07:41,110 --> 00:07:46,660
that happened how useful that's been so

00:07:44,919 --> 00:07:48,100
admission I use post for a sequel and I

00:07:46,660 --> 00:07:49,570
find that to be a necessity for this

00:07:48,100 --> 00:07:51,880
sort of work because it really does have

00:07:49,570 --> 00:07:53,590
some great things inside of it in terms

00:07:51,880 --> 00:07:54,990
of being able to do different types of

00:07:53,590 --> 00:07:56,830
queries that you can't necessarily do

00:07:54,990 --> 00:07:59,860
because it goes outside the single

00:07:56,830 --> 00:08:01,810
standard but here here's an example of

00:07:59,860 --> 00:08:03,910
where I was able to build a custom

00:08:01,810 --> 00:08:06,160
function around the jingle or my Django

00:08:03,910 --> 00:08:08,440
was so useful we enter option if that I

00:08:06,160 --> 00:08:11,200
was pressured at the beginning a little

00:08:08,440 --> 00:08:12,970
bit to use a different technology just

00:08:11,200 --> 00:08:15,760
because we had several people internally

00:08:12,970 --> 00:08:17,350
who were very good at javascript the

00:08:15,760 --> 00:08:19,450
discussion came up you maybe we should

00:08:17,350 --> 00:08:21,250
use node for this and one of the big

00:08:19,450 --> 00:08:24,760
arguments that I made in favor of using

00:08:21,250 --> 00:08:27,040
Django was how great it is at letting us

00:08:24,760 --> 00:08:28,570
customize that or I'll build things

00:08:27,040 --> 00:08:34,089
around it to make it fit our needs

00:08:28,570 --> 00:08:36,280
exactly so here a little helper function

00:08:34,089 --> 00:08:38,710
called precision where depending on the

00:08:36,280 --> 00:08:40,960
amount of data that I am looking at when

00:08:38,710 --> 00:08:42,250
I'm looking at a week you know I'm

00:08:40,960 --> 00:08:44,650
looking at a month I'm looking at a

00:08:42,250 --> 00:08:46,390
whole year of data it's going to use a

00:08:44,650 --> 00:08:49,420
different precision when we're looking

00:08:46,390 --> 00:08:51,400
at the data and you know it may be month

00:08:49,420 --> 00:08:54,339
day or hour and then down here at the

00:08:51,400 --> 00:08:58,330
bottom on volume by date you know I have

00:08:54,339 --> 00:08:59,860
I truncate that date by the precision so

00:08:58,330 --> 00:09:01,300
it's grouping it together like fine

00:08:59,860 --> 00:09:02,950
we'll get a year of data excruciating

00:09:01,300 --> 00:09:05,620
together by month if I'm looking at less

00:09:02,950 --> 00:09:07,200
than that it's screaming together by day

00:09:05,620 --> 00:09:08,910
I'm looking at

00:09:07,200 --> 00:09:11,160
less than seven days it's grouping it

00:09:08,910 --> 00:09:13,560
together by our and that is going to

00:09:11,160 --> 00:09:17,520
happen dynamically in our dashboard just

00:09:13,560 --> 00:09:19,500
to take a quick look here all right so

00:09:17,520 --> 00:09:21,480
last seven days when I move to last

00:09:19,500 --> 00:09:23,450
seven days here we're suddenly looking

00:09:21,480 --> 00:09:27,440
at it by our and we can really see

00:09:23,450 --> 00:09:30,000
what's happening if I go back here and

00:09:27,440 --> 00:09:31,830
your date and then I'll change that to a

00:09:30,000 --> 00:09:34,800
more custom range okay so that's my day

00:09:31,830 --> 00:09:36,660
you can see by day and then if I go in

00:09:34,800 --> 00:09:42,060
here and say oh yeah I'm not January

00:09:36,660 --> 00:09:44,900
2016 but uh January 2015 it might be

00:09:42,060 --> 00:09:44,900
quicker to type that

00:09:56,200 --> 00:10:05,210
this is uh this is live all right here

00:10:03,110 --> 00:10:12,650
let me click apply Wow

00:10:05,210 --> 00:10:16,880
okay oh look at my future date I was

00:10:12,650 --> 00:10:19,360
because I um cuz I'm a nut I thought

00:10:16,880 --> 00:10:21,770
that this was August I don't know Oh

00:10:19,360 --> 00:10:23,120
take second there but yeah now we're

00:10:21,770 --> 00:10:25,520
looking at it by month this much flatter

00:10:23,120 --> 00:10:27,350
lie so this is a really cool feature

00:10:25,520 --> 00:10:29,720
that I was asked for that

00:10:27,350 --> 00:10:32,150
Django just made easy to do jeido plus

00:10:29,720 --> 00:10:33,800
Postgres in this case when you see here

00:10:32,150 --> 00:10:37,040
with this day trunk again that's not

00:10:33,800 --> 00:10:38,630
standard function I had this whole thing

00:10:37,040 --> 00:10:39,980
in my blog and I go into that function a

00:10:38,630 --> 00:10:42,320
little bit further there I don't really

00:10:39,980 --> 00:10:44,330
have time in five minutes to die set the

00:10:42,320 --> 00:10:46,520
date trunk function but with something I

00:10:44,330 --> 00:10:48,470
was able to add easily in this case I

00:10:46,520 --> 00:10:51,260
was also able to add aggregation easily

00:10:48,470 --> 00:10:55,700
I needed percentiles um you know so I

00:10:51,260 --> 00:10:58,030
work at RTI International work

00:10:55,700 --> 00:11:01,940
specifically our Center for data science

00:10:58,030 --> 00:11:04,130
person not a particularly heavy a piece

00:11:01,940 --> 00:11:05,540
of data science but in this case we

00:11:04,130 --> 00:11:08,870
really wanted not just to see the

00:11:05,540 --> 00:11:10,010
average response time but you know 75%

00:11:08,870 --> 00:11:11,810
of calls what's their response time

00:11:10,010 --> 00:11:13,430
because that's going to matter a lot

00:11:11,810 --> 00:11:15,290
more the average across time can get

00:11:13,430 --> 00:11:16,640
artificially lowered but we really want

00:11:15,290 --> 00:11:18,380
to be able to see what's the real

00:11:16,640 --> 00:11:20,060
response time on the ground so what's

00:11:18,380 --> 00:11:22,250
here I was able to go and say give me

00:11:20,060 --> 00:11:24,290
the quartiles that is you know 25

00:11:22,250 --> 00:11:26,360
percent of Falls how quickly are they

00:11:24,290 --> 00:11:30,710
responded to 50 percent 75 percent of

00:11:26,360 --> 00:11:32,300
the total number of calls lastly with

00:11:30,710 --> 00:11:35,030
these summary models I just call a bunch

00:11:32,300 --> 00:11:36,560
of functions and return a bunch of JSON

00:11:35,030 --> 00:11:38,330
in this case you're seeing a data

00:11:36,560 --> 00:11:41,930
structure here that gets turned into

00:11:38,330 --> 00:11:43,730
JSON by Django rest framework and this

00:11:41,930 --> 00:11:46,190
was this is for the volume page I've got

00:11:43,730 --> 00:11:47,480
volume I'd a source and all these

00:11:46,190 --> 00:11:50,330
different types of ways that we want to

00:11:47,480 --> 00:11:53,780
look at the volume and then we look at

00:11:50,330 --> 00:11:57,650
the we also have the heat map which

00:11:53,780 --> 00:12:01,520
shows by day of the week an hour what

00:11:57,650 --> 00:12:03,650
the amount of calls were the key to this

00:12:01,520 --> 00:12:06,700
and the key to doing of one of the big

00:12:03,650 --> 00:12:06,700
things that was demanded

00:12:06,980 --> 00:12:11,240
was jindal URL filter so one of the big

00:12:09,800 --> 00:12:13,430
demands one of the things that I had to

00:12:11,240 --> 00:12:15,980
have this project was the ability for

00:12:13,430 --> 00:12:17,600
every view to be bookmarked if they

00:12:15,980 --> 00:12:19,250
click through on three different charts

00:12:17,600 --> 00:12:21,050
and they drove down to say hey in this

00:12:19,250 --> 00:12:22,310
district on Mondays for general

00:12:21,050 --> 00:12:22,970
assistance calls this is what I'm

00:12:22,310 --> 00:12:24,980
looking at

00:12:22,970 --> 00:12:26,510
we they want to be able to send that to

00:12:24,980 --> 00:12:28,100
someone else not just a book market so

00:12:26,510 --> 00:12:30,529
they can look it up again but you know

00:12:28,100 --> 00:12:31,970
for people who aren't necessarily at Ted

00:12:30,529 --> 00:12:33,910
before this one do something quick you

00:12:31,970 --> 00:12:36,500
know you've got you've got a let's say

00:12:33,910 --> 00:12:38,480
you've got a lawyer who's looking at

00:12:36,500 --> 00:12:39,769
this public public data and wants to

00:12:38,480 --> 00:12:41,209
send it to their client or you got

00:12:39,769 --> 00:12:42,170
someone within the police station he

00:12:41,209 --> 00:12:43,839
wants to send to the chief

00:12:42,170 --> 00:12:47,720
it would just be able to send that URL

00:12:43,839 --> 00:12:49,519
so I use J no URL filter now a lot

00:12:47,720 --> 00:12:53,060
people may be familiar with Jago filter

00:12:49,519 --> 00:12:54,709
because that's highly shown on the

00:12:53,060 --> 00:12:56,269
Django rest framework website it's a

00:12:54,709 --> 00:12:59,779
separate library but it's often used

00:12:56,269 --> 00:13:01,940
with Django rest framework jiggle URL

00:12:59,779 --> 00:13:04,100
filter is its little brother that isn't

00:13:01,940 --> 00:13:06,199
nearly as good but it's super hackable

00:13:04,100 --> 00:13:08,690
and it's very small I shouldn't say it's

00:13:06,199 --> 00:13:10,130
not as good it's just quirky right and

00:13:08,690 --> 00:13:12,649
if you look at how many people use it

00:13:10,130 --> 00:13:14,089
not many but it's very very hackable and

00:13:12,649 --> 00:13:16,579
that was important because I had a

00:13:14,089 --> 00:13:18,709
couple of things I need to do here the

00:13:16,579 --> 00:13:21,529
big one was I needed to be able to call

00:13:18,709 --> 00:13:23,329
query set methods I had certain ways of

00:13:21,529 --> 00:13:26,209
looking at my data that I couldn't just

00:13:23,329 --> 00:13:28,490
put in a like you know called objects

00:13:26,209 --> 00:13:30,500
filter statement I needed to be able to

00:13:28,490 --> 00:13:32,690
say hey I need everything during a ship

00:13:30,500 --> 00:13:35,449
which is you know 7:00 a.m. to 7:00 p.m.

00:13:32,690 --> 00:13:36,529
and so I might make methods on my query

00:13:35,449 --> 00:13:39,079
set you certainly don't have to

00:13:36,529 --> 00:13:43,399
understand this code up here but note

00:13:39,079 --> 00:13:45,050
that what it does is it will seer to see

00:13:43,399 --> 00:13:47,120
if there's an attribute with that filter

00:13:45,050 --> 00:13:49,190
name on the query set and so which goes

00:13:47,120 --> 00:13:51,680
in and calls that instead of sending it

00:13:49,190 --> 00:13:54,290
over to filter and that became very very

00:13:51,680 --> 00:13:55,819
useful so you can see here how it

00:13:54,290 --> 00:13:57,620
translates it right if I have get

00:13:55,819 --> 00:13:59,329
parameters of District seven major ten

00:13:57,620 --> 00:14:01,760
those will go straight to filter but

00:13:59,329 --> 00:14:04,790
shift because shift is up is a method on

00:14:01,760 --> 00:14:07,130
my query set will get called here if

00:14:04,790 --> 00:14:09,139
that's one of the parameters the other

00:14:07,130 --> 00:14:10,670
big hack was I need to build my filter

00:14:09,139 --> 00:14:12,769
from a data structure instead of

00:14:10,670 --> 00:14:16,100
building it from classes and objects the

00:14:12,769 --> 00:14:18,490
reason why is because I have the filter

00:14:16,100 --> 00:14:20,270
and I have the way ways to select it on

00:14:18,490 --> 00:14:22,790
my front

00:14:20,270 --> 00:14:24,920
I didn't want to have to recreate that

00:14:22,790 --> 00:14:27,110
right one of the easiest ways to make

00:14:24,920 --> 00:14:28,399
mistakes and programming is by repeating

00:14:27,110 --> 00:14:30,290
yourself because you will never get

00:14:28,399 --> 00:14:31,760
exactly the same and so I certainly

00:14:30,290 --> 00:14:34,100
didn't want to do that here I want to be

00:14:31,760 --> 00:14:34,399
able to have this data structure right

00:14:34,100 --> 00:14:37,130
here

00:14:34,399 --> 00:14:38,779
which is a pretty arcane data structure

00:14:37,130 --> 00:14:40,790
like most things that you put together

00:14:38,779 --> 00:14:41,660
while you're coding it you know this is

00:14:40,790 --> 00:14:46,190
sort of put that you're playing together

00:14:41,660 --> 00:14:48,230
while that follows init it got a little

00:14:46,190 --> 00:14:49,610
funky but it's so you know relatively

00:14:48,230 --> 00:14:51,320
self-explanatory what it's happening

00:14:49,610 --> 00:14:53,930
here I've got filters based Alzheimer's

00:14:51,320 --> 00:14:56,000
even a some shift and district and

00:14:53,930 --> 00:14:59,029
nature group and whether or not the call

00:14:56,000 --> 00:15:00,410
was canceled and with this it can just

00:14:59,029 --> 00:15:02,450
translate it straight in JSON and then

00:15:00,410 --> 00:15:05,000
my front end can consume that to build

00:15:02,450 --> 00:15:06,800
all the filters that I have along the

00:15:05,000 --> 00:15:11,209
top of the page we'll see that again

00:15:06,800 --> 00:15:12,860
when we go back to look at it my API

00:15:11,209 --> 00:15:15,770
endpoints are simple there's not a lot

00:15:12,860 --> 00:15:19,100
of detail to go in to on them but you

00:15:15,770 --> 00:15:21,860
can see here a call it takes those get

00:15:19,100 --> 00:15:24,290
parameters from the request which are

00:15:21,860 --> 00:15:26,150
going to be up the top of the page or be

00:15:24,290 --> 00:15:28,820
in the URL bar right so it's bookmark

00:15:26,150 --> 00:15:30,470
boy and send other people and then it's

00:15:28,820 --> 00:15:32,450
just going to take my overview model or

00:15:30,470 --> 00:15:35,890
my summary model call to dipped on it

00:15:32,450 --> 00:15:37,940
and send that back nothing major there

00:15:35,890 --> 00:15:40,720
the front end is where this got really

00:15:37,940 --> 00:15:43,839
interesting and how it works with Django

00:15:40,720 --> 00:15:46,400
so I front end I mentioned that it's

00:15:43,839 --> 00:15:48,680
reacted so what do I mean by that

00:15:46,400 --> 00:15:50,810
reactive really just means that there is

00:15:48,680 --> 00:15:52,580
a flow of data there's events that

00:15:50,810 --> 00:15:55,130
happen there's things that monitor those

00:15:52,580 --> 00:15:57,200
events and react to them in this case

00:15:55,130 --> 00:15:59,330
the things that you might see someone do

00:15:57,200 --> 00:16:00,830
while uses pages they change filters

00:15:59,330 --> 00:16:02,779
which they can do in one of two places

00:16:00,830 --> 00:16:06,529
right they can click a drop-down that

00:16:02,779 --> 00:16:07,760
let's pull that up so they can click one

00:16:06,529 --> 00:16:10,370
of these dropdowns like I just want to

00:16:07,760 --> 00:16:12,680
look at Monday to see the URL changes up

00:16:10,370 --> 00:16:14,510
here immediately and it reloads I might

00:16:12,680 --> 00:16:17,750
also say I just want to look at this

00:16:14,510 --> 00:16:19,700
district right so this updates in two

00:16:17,750 --> 00:16:22,610
different places and the thing I just

00:16:19,700 --> 00:16:25,430
selected here district 3 I could slip

00:16:22,610 --> 00:16:26,959
district 7 here or I could go in here

00:16:25,430 --> 00:16:28,520
and clear it right I have two different

00:16:26,959 --> 00:16:29,059
ways that can update these filters but

00:16:28,520 --> 00:16:34,069
every time

00:16:29,059 --> 00:16:35,929
do the URL top of the page changes the

00:16:34,069 --> 00:16:37,939
application watches for those changes in

00:16:35,929 --> 00:16:41,629
the URL right if I went change a URL

00:16:37,939 --> 00:16:42,919
just by manually changing it I went here

00:16:41,629 --> 00:16:44,839
and said I don't care about its nature

00:16:42,919 --> 00:16:47,179
group I wouldn't really expect someone

00:16:44,839 --> 00:16:48,949
to do this but they might have a

00:16:47,179 --> 00:16:51,049
bookmark in that case this would be

00:16:48,949 --> 00:16:53,239
necessary it will show those changes in

00:16:51,049 --> 00:16:55,099
the URL and then it sends requests to

00:16:53,239 --> 00:16:57,289
the backend from your data it gets that

00:16:55,099 --> 00:16:58,669
request back we have made the data and

00:16:57,289 --> 00:17:00,799
when the data is updated the page is

00:16:58,669 --> 00:17:03,079
updated if anyone's ever written like a

00:17:00,799 --> 00:17:06,110
fairly complex JavaScript application

00:17:03,079 --> 00:17:08,419
using pretty standard tools let's say

00:17:06,110 --> 00:17:10,129
you just use jQuery which is an awesome

00:17:08,419 --> 00:17:11,569
library but whenever you have something

00:17:10,129 --> 00:17:13,519
new you need to update you know there's

00:17:11,569 --> 00:17:14,809
a lot of linkage linkages you have two

00:17:13,519 --> 00:17:17,029
different ways you can update something

00:17:14,809 --> 00:17:19,069
now you've got a link both of them with

00:17:17,029 --> 00:17:21,619
this sort of way of looking at it it

00:17:19,069 --> 00:17:24,470
made it very easy to add new controls to

00:17:21,619 --> 00:17:28,149
add new charts and not have to have sort

00:17:24,470 --> 00:17:30,710
of an exponentially growing so linkages

00:17:28,149 --> 00:17:32,119
like I said reactive programming the big

00:17:30,710 --> 00:17:33,649
words that you might hear about are

00:17:32,119 --> 00:17:36,230
unidirectional write everything flowed

00:17:33,649 --> 00:17:37,820
one way you know would this change

00:17:36,230 --> 00:17:39,470
happen then this would happen this would

00:17:37,820 --> 00:17:42,619
happen I don't have data syncing two

00:17:39,470 --> 00:17:43,850
different ways and then it was a data

00:17:42,619 --> 00:17:47,809
flow write data go away and I've been

00:17:43,850 --> 00:17:50,090
driven so let's this is a sort of a

00:17:47,809 --> 00:17:51,950
summary of the different events and the

00:17:50,090 --> 00:17:54,470
reactions that I saw in my application

00:17:51,950 --> 00:17:55,970
and all of these look kind of

00:17:54,470 --> 00:17:58,009
synchronous right when a user clicks on

00:17:55,970 --> 00:18:00,019
a chart the filter changes when the

00:17:58,009 --> 00:18:02,659
filter changes that URL hash is updated

00:18:00,019 --> 00:18:04,039
but note that this is asynchronous and

00:18:02,659 --> 00:18:05,659
that was part of this that worked really

00:18:04,039 --> 00:18:07,999
well because it means I can come in at

00:18:05,659 --> 00:18:09,919
at the points there's no direct chain of

00:18:07,999 --> 00:18:11,899
things I have to do if any of these

00:18:09,919 --> 00:18:14,389
things change the the things that should

00:18:11,899 --> 00:18:16,720
happen happen right so like I showed

00:18:14,389 --> 00:18:20,330
when I just go and change the URL hash

00:18:16,720 --> 00:18:23,570
manually the Ajax requested is sent for

00:18:20,330 --> 00:18:26,149
new call data and then each one of those

00:18:23,570 --> 00:18:28,730
charts actually monitors a specific

00:18:26,149 --> 00:18:30,769
subset of the data so if only that

00:18:28,730 --> 00:18:32,809
subset changes then only that chart

00:18:30,769 --> 00:18:34,730
updates a pretty slick way of doing

00:18:32,809 --> 00:18:37,610
things this is a similar thing to what

00:18:34,730 --> 00:18:41,690
you see if anyone's ever used we fjs

00:18:37,610 --> 00:18:42,210
it's the same model but it our active

00:18:41,690 --> 00:18:44,100
was what

00:18:42,210 --> 00:18:47,279
we use because it was a little simpler

00:18:44,100 --> 00:18:49,139
it works really well with Django and it

00:18:47,279 --> 00:18:53,129
was written by people I respect over at

00:18:49,139 --> 00:18:55,440
the Guardian because a simple component

00:18:53,129 --> 00:18:56,639
that you might see so I've got some

00:18:55,440 --> 00:18:59,070
jumps up here that shows I've got a

00:18:56,639 --> 00:19:01,710
template and then I've got this data

00:18:59,070 --> 00:19:03,409
hidden true thing right so I have a

00:19:01,710 --> 00:19:06,059
little chart header I want to hide and

00:19:03,409 --> 00:19:10,139
open in fact you can see it right here

00:19:06,059 --> 00:19:12,809
like pretty simple stuff not normally

00:19:10,139 --> 00:19:14,940
complicated but here I have the template

00:19:12,809 --> 00:19:17,360
where you can see it says like unless

00:19:14,940 --> 00:19:21,119
hidden show this right this is it

00:19:17,360 --> 00:19:22,799
rendered once it monitors the data which

00:19:21,119 --> 00:19:25,320
is the whole point of the way the

00:19:22,799 --> 00:19:27,360
statute works is it monitors the data to

00:19:25,320 --> 00:19:34,799
update so as soon as the data updates

00:19:27,360 --> 00:19:36,749
this is weird okay I haven't talked

00:19:34,799 --> 00:19:40,529
about d3 at all yet let me have five

00:19:36,749 --> 00:19:42,059
minutes awesome visualizations so but

00:19:40,529 --> 00:19:44,879
what I was going to say about d3 is

00:19:42,059 --> 00:19:46,769
there are d3 is really it can be easily

00:19:44,879 --> 00:19:50,190
followed up as a toolkit for building

00:19:46,769 --> 00:19:53,159
visualizations it is not particularly

00:19:50,190 --> 00:19:55,619
good to think of it as a chart library

00:19:53,159 --> 00:19:57,990
because it's not a chart library would

00:19:55,619 --> 00:20:01,200
give you some charts d3 gives you a lot

00:19:57,990 --> 00:20:03,749
of tools I sort of describe it as you

00:20:01,200 --> 00:20:06,269
know you can get you it's like a bag of

00:20:03,749 --> 00:20:07,889
Lotus parts you can build your Lotus

00:20:06,269 --> 00:20:10,139
it's going to be awesome but you got to

00:20:07,889 --> 00:20:11,460
build it and so getting you know going

00:20:10,139 --> 00:20:13,679
in just picking out the Ford Taurus from

00:20:11,460 --> 00:20:15,119
a lot is sometimes a smarter move and

00:20:13,679 --> 00:20:16,769
there's a lot of higher-level libraries

00:20:15,119 --> 00:20:19,259
on top of e3 that I recommend

00:20:16,769 --> 00:20:21,509
I used mu D 3 because I liked it styling

00:20:19,259 --> 00:20:22,710
it didn't really mope was doing but

00:20:21,509 --> 00:20:25,080
there's a lot of other ones to look at

00:20:22,710 --> 00:20:27,749
one I've been using recently is plotly

00:20:25,080 --> 00:20:29,340
Jas of the team behind flatly open

00:20:27,749 --> 00:20:32,070
source their JavaScript library it's

00:20:29,340 --> 00:20:35,309
awesome it's also like two megabytes

00:20:32,070 --> 00:20:37,139
giant that's the only downside but here

00:20:35,309 --> 00:20:38,879
you can see a simple chart object that I

00:20:37,139 --> 00:20:41,279
built this higher level object on top of

00:20:38,879 --> 00:20:43,289
the three you know it says so filter

00:20:41,279 --> 00:20:45,960
things by data we received when I click

00:20:43,289 --> 00:20:47,789
on it and that's the formatting stuff in

00:20:45,960 --> 00:20:49,799
there and then I have this monitor chart

00:20:47,789 --> 00:20:53,220
and this is how I look up the reactive

00:20:49,799 --> 00:20:54,700
nature of this so whenever data in the

00:20:53,220 --> 00:20:58,240
volume by the

00:20:54,700 --> 00:21:01,210
weak subset of that data tree changes

00:20:58,240 --> 00:21:03,730
the call update on this chart all my

00:21:01,210 --> 00:21:05,830
chart objects have a create and update

00:21:03,730 --> 00:21:08,740
method that's really that's the entire

00:21:05,830 --> 00:21:10,540
API behind my entire system here's when

00:21:08,740 --> 00:21:13,960
the page loads call create when the data

00:21:10,540 --> 00:21:15,700
updates call update monitor chart is

00:21:13,960 --> 00:21:17,260
simple it just takes up what's called a

00:21:15,700 --> 00:21:19,870
key path to give that sort of half into

00:21:17,260 --> 00:21:22,420
the tree of data and says hey call this

00:21:19,870 --> 00:21:23,950
function when that changes unless the

00:21:22,420 --> 00:21:25,870
page is currently loading that was a

00:21:23,950 --> 00:21:28,590
little protection I put in there because

00:21:25,870 --> 00:21:31,480
a lot of stuff is asynchronously loading

00:21:28,590 --> 00:21:33,760
the heat map was where I actually use d3

00:21:31,480 --> 00:21:36,430
for real the heat map was very very cool

00:21:33,760 --> 00:21:38,860
to show how to do this would require an

00:21:36,430 --> 00:21:41,470
entire class on d3 which I am NOT going

00:21:38,860 --> 00:21:44,890
to go but and the great part is I built

00:21:41,470 --> 00:21:48,100
it directly off of one of Mike Moustakas

00:21:44,890 --> 00:21:48,850
examples on his exit site blocks org if

00:21:48,100 --> 00:21:51,300
you're interested in doing

00:21:48,850 --> 00:21:53,740
visualizations is amazing examples there

00:21:51,300 --> 00:21:55,720
it was cool until I was teaching some

00:21:53,740 --> 00:21:57,520
people data science and then one of them

00:21:55,720 --> 00:21:59,710
made of their example project had his

00:21:57,520 --> 00:22:01,780
axe and heat map in it I went oh okay I

00:21:59,710 --> 00:22:03,940
guess more than one person has looked at

00:22:01,780 --> 00:22:06,190
that example but this heat map here

00:22:03,940 --> 00:22:10,060
showing you know by day of week in by

00:22:06,190 --> 00:22:12,010
hour how many calls there are and again

00:22:10,060 --> 00:22:13,570
I just have a create update function so

00:22:12,010 --> 00:22:16,240
I was able to plug this into the way

00:22:13,570 --> 00:22:18,400
everything else works very easily by

00:22:16,240 --> 00:22:20,350
having this create an update function so

00:22:18,400 --> 00:22:22,000
every one of my visualizations has the

00:22:20,350 --> 00:22:26,560
same API because of the way the data

00:22:22,000 --> 00:22:29,050
flow works so my lessons learned first

00:22:26,560 --> 00:22:30,970
one was for building something that's so

00:22:29,050 --> 00:22:33,340
data intensive like a dashboard reactive

00:22:30,970 --> 00:22:35,410
programming really simplifies those

00:22:33,340 --> 00:22:37,900
interactions it made it much more simple

00:22:35,410 --> 00:22:39,460
to work with I learned that I should

00:22:37,900 --> 00:22:42,450
always use higher full hybrid on top of

00:22:39,460 --> 00:22:46,380
d3 I started by not doing that and I

00:22:42,450 --> 00:22:49,120
know my computer for it was not fun I

00:22:46,380 --> 00:22:51,880
really really that was like two weeks

00:22:49,120 --> 00:22:54,430
that I've ever getting back and then I

00:22:51,880 --> 00:22:55,870
didn't talk about this in here but this

00:22:54,430 --> 00:22:57,700
is an open source application you can

00:22:55,870 --> 00:22:59,290
look at it when you have serious

00:22:57,700 --> 00:23:00,020
front-end work happening when I have

00:22:59,290 --> 00:23:01,730
like simple

00:23:00,020 --> 00:23:03,830
fine work I like to just use the

00:23:01,730 --> 00:23:06,140
standard sort of Django asset pipeline

00:23:03,830 --> 00:23:08,120
tools of I let Jamie compressor myself

00:23:06,140 --> 00:23:10,040
but for serious burning work where you

00:23:08,120 --> 00:23:12,040
have a lot of stuff going on using

00:23:10,040 --> 00:23:14,840
webpack and Django webpack loader is

00:23:12,040 --> 00:23:16,550
really great really simple I was able to

00:23:14,840 --> 00:23:18,170
use it with this and even make a plug-in

00:23:16,550 --> 00:23:20,290
system for it it works really really

00:23:18,170 --> 00:23:23,030
well

00:23:20,290 --> 00:23:26,600
running we're getting near the end so

00:23:23,030 --> 00:23:27,950
this again it might make a little more

00:23:26,600 --> 00:23:30,350
sense to you now that the talk-through

00:23:27,950 --> 00:23:34,580
reactive programming how it works how

00:23:30,350 --> 00:23:36,950
all these things are connected if you

00:23:34,580 --> 00:23:39,470
want to see the code behind this there's

00:23:36,950 --> 00:23:41,150
a link at the bottom to get io / CFS you

00:23:39,470 --> 00:23:43,790
can look at the code there and if you go

00:23:41,150 --> 00:23:46,190
to CFS demo the RT ICDs net org that's a

00:23:43,790 --> 00:23:49,490
mouthful you can actually play with the

00:23:46,190 --> 00:23:51,140
application with the live New Orleans

00:23:49,490 --> 00:23:53,360
data and updates nightly so it should

00:23:51,140 --> 00:23:54,500
continue to have live data I know I

00:23:53,360 --> 00:23:56,570
don't have a lot of time for questions

00:23:54,500 --> 00:24:03,740
but I'd like to take any if there's if

00:23:56,570 --> 00:24:05,690
there's a minute so so is this

00:24:03,740 --> 00:24:09,920
application like maintaining with any of

00:24:05,690 --> 00:24:12,260
the officers out or doing folding over

00:24:09,920 --> 00:24:14,300
in house and then they analyze the data

00:24:12,260 --> 00:24:16,580
and then they're like okay we send these

00:24:14,300 --> 00:24:18,410
officers in these locations today so for

00:24:16,580 --> 00:24:20,240
my local police station is only internal

00:24:18,410 --> 00:24:21,770
intranet it's mainly used other like

00:24:20,240 --> 00:24:23,450
cops at meetings which I got to go to I

00:24:21,770 --> 00:24:23,840
felt like I was an external wire it was

00:24:23,450 --> 00:24:29,060
badass

00:24:23,840 --> 00:24:30,470
I am I am NOT crazy Pro police but

00:24:29,060 --> 00:24:31,820
there's something about feeling like

00:24:30,470 --> 00:24:34,450
ants from a wire that's pretty cool

00:24:31,820 --> 00:24:37,190
um so this used to house some internet

00:24:34,450 --> 00:24:38,900
but yeah it's been really useful for

00:24:37,190 --> 00:24:42,200
them to be able to find real problems in

00:24:38,900 --> 00:24:45,710
the city my question is actually related

00:24:42,200 --> 00:24:48,830
I was wondering I really like how simple

00:24:45,710 --> 00:24:50,720
it is we could go from the URL you know

00:24:48,830 --> 00:24:52,880
all the way down my stack but how do you

00:24:50,720 --> 00:24:54,410
how you control situations where you

00:24:52,880 --> 00:24:56,540
know someone can't put like you know

00:24:54,410 --> 00:24:59,960
dungar user or gun dirt email or

00:24:56,540 --> 00:25:01,610
something alright at work early so yeah

00:24:59,960 --> 00:25:04,940
I mean the things that they're able to

00:25:01,610 --> 00:25:06,770
access are slowly filtering on that

00:25:04,940 --> 00:25:08,300
query set yeah you know there's

00:25:06,770 --> 00:25:10,460
solutions what's your solution

00:25:08,300 --> 00:25:11,370
I mean Jingu your uncle's or filters out

00:25:10,460 --> 00:25:13,770
the things that can't

00:25:11,370 --> 00:25:15,990
we reset okay and anything that comes as

00:25:13,770 --> 00:25:17,010
a candy usage discards okay I think

00:25:15,990 --> 00:25:18,360
there's probable time I have for

00:25:17,010 --> 00:25:20,100
questions but I'm gonna go right outside

00:25:18,360 --> 00:25:22,410
the door here if anyone has any further

00:25:20,100 --> 00:25:25,400
ones I know this is a big topic for 25

00:25:22,410 --> 00:25:25,400

YouTube URL: https://www.youtube.com/watch?v=XXG-ESzB9Q8


