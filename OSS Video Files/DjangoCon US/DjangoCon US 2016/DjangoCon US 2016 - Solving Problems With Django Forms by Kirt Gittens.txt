Title: DjangoCon US 2016 - Solving Problems With Django Forms by Kirt Gittens
Publication date: 2016-08-11
Playlist: DjangoCon US 2016
Description: 
	DjangoCon US 2016 - Solving Problems With Django Forms by Kirt Gittens

We'll look at a few core problems that we were able to solve with Django forms.

Dynamic Field Creation: What if you don't know what fields should be present on a Django form until runtime?. Solutions:

Viewing a form's fields as a data structure (convert a field definition to a dictionary) Manipulate self.fields on a form to dynamically add / remove forms from a field.

Pitfalls:

A fields validated attributes can't be manipulated dynamically because of Validators within the forms API. Dynamic form layouts become difficult to manage, crispyforms does not scale as a solution!

Validate a form via an API: How can external validations behave the same as internal errors? Solutions:

form.clean() can be used for form wide errors, and form.add_error can be used to integrate those external validation errors into your existing form so that calls like is_valid() still work as expected with your external validations.

Adding fields at runtime: How can the user add fields to a form after it has been rendered?

Solutions:

Javascript can be used for the UI, and if the fields are properly named, the same validations will work as long as the fields are part of the form.

Pitfalls: Creating a solution that creates a dynamic field that is validated, but doesn't render can cause issues with your layout solution (crispyforms fails again here)

This talk was presented at: https://2016.djangocon.us/schedule/presentation/27/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:15,290 --> 00:00:19,790
so before we get started just to raise

00:00:17,570 --> 00:00:22,910
hands how many people have heard of or

00:00:19,790 --> 00:00:25,820
worked with crispy forms okay so there's

00:00:22,910 --> 00:00:27,289
a lot of people I want to like see how

00:00:25,820 --> 00:00:29,059
many people are gonna be upset at me if

00:00:27,289 --> 00:00:32,809
I like say things about crispy forms

00:00:29,059 --> 00:00:35,090
before I get started so quit just to

00:00:32,809 --> 00:00:36,260
introduce myself I'm Kirk Gittens like

00:00:35,090 --> 00:00:39,710
you said I'm a software engineer at

00:00:36,260 --> 00:00:42,739
dealer track and a dealer track we work

00:00:39,710 --> 00:00:44,720
a lot with django forms we have a lot of

00:00:42,739 --> 00:00:48,560
situations where we need really

00:00:44,720 --> 00:00:51,200
complicated data entry a lot of dynamic

00:00:48,560 --> 00:00:53,829
validations and dynamic forms I'll kind

00:00:51,200 --> 00:00:57,620
of get into what I mean by dynamic forms

00:00:53,829 --> 00:00:58,910
but this talk comes from a lot of what

00:00:57,620 --> 00:01:00,800
we've been building at the alert rack

00:00:58,910 --> 00:01:02,930
and what we've learned in terms of how

00:01:00,800 --> 00:01:06,470
to kind of use Django forms to extend

00:01:02,930 --> 00:01:08,360
its capabilities to be dynamic but

00:01:06,470 --> 00:01:10,729
before I go into the problems that we

00:01:08,360 --> 00:01:12,259
actually solved I want to kind of back

00:01:10,729 --> 00:01:15,350
up and talk about what Django forms

00:01:12,259 --> 00:01:16,700
actually is and this is kind of parallel

00:01:15,350 --> 00:01:19,520
to what's in the Junior documentation

00:01:16,700 --> 00:01:22,999
but basically like Django forms offers

00:01:19,520 --> 00:01:24,859
you abstractions over three kind of core

00:01:22,999 --> 00:01:27,170
things right so you get an abstraction

00:01:24,859 --> 00:01:28,759
over the structuring of a form which

00:01:27,170 --> 00:01:30,380
tells you like what fields are going to

00:01:28,759 --> 00:01:32,450
be on the form when you write your form

00:01:30,380 --> 00:01:34,789
class you define these class level

00:01:32,450 --> 00:01:37,459
variables that are objects that are your

00:01:34,789 --> 00:01:38,869
fields so the structure of your form is

00:01:37,459 --> 00:01:40,579
basically that like what fields are

00:01:38,869 --> 00:01:43,130
going to be on the phone

00:01:40,579 --> 00:01:44,840
then there's the rendering of a form

00:01:43,130 --> 00:01:47,749
which is like Django takes care of

00:01:44,840 --> 00:01:49,670
actually creating the HTML elements that

00:01:47,749 --> 00:01:52,369
your users need to actually put data

00:01:49,670 --> 00:01:54,439
into and so Django takes care of that

00:01:52,369 --> 00:01:56,539
for you there's a template tag all you

00:01:54,439 --> 00:01:58,399
need to do is use the form tag and it

00:01:56,539 --> 00:02:00,319
renders the form so Django forms gives

00:01:58,399 --> 00:02:02,569
you functionality for that and the last

00:02:00,319 --> 00:02:06,590
part is validating and processing the

00:02:02,569 --> 00:02:09,679
data and that is where you define a set

00:02:06,590 --> 00:02:13,520
of rules for when the data that the user

00:02:09,679 --> 00:02:16,400
enters is going to be accepted so you

00:02:13,520 --> 00:02:18,440
have your the basic Jinga validations

00:02:16,400 --> 00:02:19,849
that you get from like validators that

00:02:18,440 --> 00:02:21,439
these are things that ginger adds like

00:02:19,849 --> 00:02:23,150
when you create like an integer or

00:02:21,439 --> 00:02:25,350
fields that capture like numeric data

00:02:23,150 --> 00:02:26,790
and you set up Max and min value

00:02:25,350 --> 00:02:27,780
you have those kind of validations and

00:02:26,790 --> 00:02:29,370
then you have more complicated

00:02:27,780 --> 00:02:32,490
validation so you can write in your form

00:02:29,370 --> 00:02:34,590
clean or your individual field clean so

00:02:32,490 --> 00:02:36,930
these are kind of the three main things

00:02:34,590 --> 00:02:38,490
that Django gives you and so a lot of

00:02:36,930 --> 00:02:40,130
the situations that we're having a

00:02:38,490 --> 00:02:42,660
dealer track we needed to create dynamic

00:02:40,130 --> 00:02:46,140
we need to basically make all three of

00:02:42,660 --> 00:02:48,510
these things dynamic and so starting

00:02:46,140 --> 00:02:51,360
with structuring what I mean by creating

00:02:48,510 --> 00:02:53,670
a dynamic form structure is that we

00:02:51,360 --> 00:02:55,740
needed we had a situation where we

00:02:53,670 --> 00:02:58,140
needed a form where the fields on it

00:02:55,740 --> 00:02:59,640
might change depending on certain pieces

00:02:58,140 --> 00:03:02,190
of user context and this is like

00:02:59,640 --> 00:03:03,540
probably a problem that multiple it's

00:03:02,190 --> 00:03:04,650
not just unique to us right a lot of

00:03:03,540 --> 00:03:07,260
people might have to deal with something

00:03:04,650 --> 00:03:08,880
like this so like the reason why you

00:03:07,260 --> 00:03:10,860
might need to do something like this is

00:03:08,880 --> 00:03:13,890
like say you have a really basic form

00:03:10,860 --> 00:03:15,720
that captures some data but then you

00:03:13,890 --> 00:03:17,880
need to introduce a piece of context to

00:03:15,720 --> 00:03:19,200
change the form right so you can do that

00:03:17,880 --> 00:03:21,840
like this right you can add an if

00:03:19,200 --> 00:03:24,120
condition that adds a field to the form

00:03:21,840 --> 00:03:26,370
right self dot fields is dictionary you

00:03:24,120 --> 00:03:28,650
can put a field into it dynamically when

00:03:26,370 --> 00:03:32,330
you instantiate the form and everything

00:03:28,650 --> 00:03:32,330
works the problem with this is that

00:03:32,480 --> 00:03:36,510
that's yeah that's a right slide so the

00:03:35,250 --> 00:03:38,820
problem with this is it doesn't scale

00:03:36,510 --> 00:03:39,630
when you have a lot of conditions so

00:03:38,820 --> 00:03:41,820
when you start getting really

00:03:39,630 --> 00:03:43,470
complicated layouts that have a ton of

00:03:41,820 --> 00:03:45,870
conditions and a ton of fields that need

00:03:43,470 --> 00:03:47,790
to change this solution doesn't work too

00:03:45,870 --> 00:03:50,160
well because you'll have a really messy

00:03:47,790 --> 00:03:51,540
form in it that like has a ton of if

00:03:50,160 --> 00:03:53,970
conditions and a bunch of custom

00:03:51,540 --> 00:03:55,410
business logic and what you want to do

00:03:53,970 --> 00:03:57,390
is separate the two of those things

00:03:55,410 --> 00:03:59,520
right you want to be able to separate

00:03:57,390 --> 00:04:01,890
your logic that determines what you see

00:03:59,520 --> 00:04:05,910
as part of the form structure from those

00:04:01,890 --> 00:04:07,260
rules and so the way that we chose to

00:04:05,910 --> 00:04:09,720
solve this problem is by treating our

00:04:07,260 --> 00:04:12,720
fields as data and what that means is

00:04:09,720 --> 00:04:14,580
like the way that you define forms or

00:04:12,720 --> 00:04:18,209
fields with Django right now is you use

00:04:14,580 --> 00:04:19,530
like it's an object right and you set

00:04:18,209 --> 00:04:21,750
some quarks on that object when you

00:04:19,530 --> 00:04:24,120
instantiate it and that determines what

00:04:21,750 --> 00:04:26,669
Django renders and how jenga validates

00:04:24,120 --> 00:04:27,930
it but all the information you could

00:04:26,669 --> 00:04:30,960
basically represent as a dictionary

00:04:27,930 --> 00:04:32,880
right instead of an object and working

00:04:30,960 --> 00:04:35,970
at it working with it as a dictionary

00:04:32,880 --> 00:04:37,800
makes it a lot easier to kind of move

00:04:35,970 --> 00:04:40,129
the layouts around

00:04:37,800 --> 00:04:42,330
your data becomes a lot more valuable so

00:04:40,129 --> 00:04:44,430
you we start off with a solution that

00:04:42,330 --> 00:04:46,800
looks something like this right so your

00:04:44,430 --> 00:04:48,449
fields now become like entries in an

00:04:46,800 --> 00:04:50,699
order dictionary and your field

00:04:48,449 --> 00:04:52,680
structure is no longer directly tied to

00:04:50,699 --> 00:04:54,900
the form instead of having a class

00:04:52,680 --> 00:04:57,300
definition that says here's the fields

00:04:54,900 --> 00:04:59,190
here's the order you have this which

00:04:57,300 --> 00:05:01,919
basically takes in your field structure

00:04:59,190 --> 00:05:03,150
object which is you know basically the

00:05:01,919 --> 00:05:05,280
same as what self-thought fields

00:05:03,150 --> 00:05:07,949
ultimately builds but what you get now

00:05:05,280 --> 00:05:09,720
is you have a layout that's separate so

00:05:07,949 --> 00:05:12,270
if you want to have a different layout

00:05:09,720 --> 00:05:14,430
you define a different variable with a

00:05:12,270 --> 00:05:15,960
new order dictionary and you can

00:05:14,430 --> 00:05:18,539
actually take this a step further and

00:05:15,960 --> 00:05:20,280
move the actual field objects out of it

00:05:18,539 --> 00:05:26,310
or rather these field variables with the

00:05:20,280 --> 00:05:28,139
data and kind of replace them with the

00:05:26,310 --> 00:05:30,539
way the solution works is so you now

00:05:28,139 --> 00:05:32,460
instead of having a order dictionary

00:05:30,539 --> 00:05:34,620
that contains the actual names you

00:05:32,460 --> 00:05:37,319
create a list of strings and you grab

00:05:34,620 --> 00:05:39,780
those names from some sort of module in

00:05:37,319 --> 00:05:41,219
this example I'm using a class but you

00:05:39,780 --> 00:05:45,539
could swap that out for anything right

00:05:41,219 --> 00:05:47,520
so you have a list now that defines your

00:05:45,539 --> 00:05:49,889
field layout and it's completely

00:05:47,520 --> 00:05:51,750
separate from your Django form so what

00:05:49,889 --> 00:05:54,270
you can do and what we actually do with

00:05:51,750 --> 00:05:56,009
dealer track is we have an API call that

00:05:54,270 --> 00:05:58,889
determines what fields are on the form

00:05:56,009 --> 00:06:01,740
at runtime so our API takes care of the

00:05:58,889 --> 00:06:03,210
context and you know all of the specific

00:06:01,740 --> 00:06:05,669
business rules that determine what

00:06:03,210 --> 00:06:08,039
fields need to be on the form and then

00:06:05,669 --> 00:06:11,789
it spits out just a list of strings and

00:06:08,039 --> 00:06:13,919
this knows what to do after it has that

00:06:11,789 --> 00:06:16,139
list of strings right it does a get

00:06:13,919 --> 00:06:18,840
attribute on the class that contains the

00:06:16,139 --> 00:06:20,789
field so we have this kind of class that

00:06:18,840 --> 00:06:22,800
or that will contain all the possible

00:06:20,789 --> 00:06:24,000
fields that could be on the form since

00:06:22,800 --> 00:06:26,550
you need to have a superset you need

00:06:24,000 --> 00:06:29,490
those fields definitions somewhere so we

00:06:26,550 --> 00:06:31,620
grab an attribute from that class we

00:06:29,490 --> 00:06:33,150
basically like instantiate the actual

00:06:31,620 --> 00:06:36,120
Django field object whether it's a

00:06:33,150 --> 00:06:37,710
character field or you know like an

00:06:36,120 --> 00:06:39,870
integer field or something like that and

00:06:37,710 --> 00:06:41,460
then we just stick it into cell table

00:06:39,870 --> 00:06:44,969
fields because we can add entries so

00:06:41,460 --> 00:06:46,380
that really simply so that's what you

00:06:44,969 --> 00:06:48,650
need to do to have a dynamic field

00:06:46,380 --> 00:06:50,060
layout but

00:06:48,650 --> 00:06:52,550
other piece of it is actually rendering

00:06:50,060 --> 00:06:54,560
this so we need to get HTML from this

00:06:52,550 --> 00:06:56,060
dynamic field layout so we know about

00:06:54,560 --> 00:06:58,400
the Jenga form tag right

00:06:56,060 --> 00:07:00,229
you just place it into your template and

00:06:58,400 --> 00:07:01,430
it renders all the fields on your form

00:07:00,229 --> 00:07:03,919
for you

00:07:01,430 --> 00:07:06,350
one of the problems with this though is

00:07:03,919 --> 00:07:08,509
if you need to have any custom HTML or

00:07:06,350 --> 00:07:11,210
CSS instead of what January Django

00:07:08,509 --> 00:07:13,430
generates for you it becomes difficult

00:07:11,210 --> 00:07:16,250
because you're not exactly sure what

00:07:13,430 --> 00:07:17,960
elements are going to be on the page so

00:07:16,250 --> 00:07:20,750
for a while we had a solution that

00:07:17,960 --> 00:07:22,880
worked with Django krispies forms but I

00:07:20,750 --> 00:07:25,460
think for stuff like this it's probably

00:07:22,880 --> 00:07:27,410
I would it by staying away from ginger

00:07:25,460 --> 00:07:29,810
krispies forms because it forces you to

00:07:27,410 --> 00:07:32,539
tie your particular form to a particular

00:07:29,810 --> 00:07:36,070
layout so crispy forms gives you

00:07:32,539 --> 00:07:39,110
abstractions over like the actual HTML

00:07:36,070 --> 00:07:40,880
elements that you'll see on the page but

00:07:39,110 --> 00:07:42,289
if you have a dynamic layout you don't

00:07:40,880 --> 00:07:43,940
really want to tied it up directly to

00:07:42,289 --> 00:07:46,520
your form definition right you could use

00:07:43,940 --> 00:07:48,530
that layout in multiple forms and you

00:07:46,520 --> 00:07:51,860
don't want to you know be tied to one

00:07:48,530 --> 00:07:55,010
particular rendering of that so that's

00:07:51,860 --> 00:07:57,620
kind of how the dynamic field structure

00:07:55,010 --> 00:07:58,699
problem works so one of the other

00:07:57,620 --> 00:08:02,330
problems that we had to solve was

00:07:58,699 --> 00:08:03,979
dynamic form validation kind of an

00:08:02,330 --> 00:08:06,500
example of why you would want to do this

00:08:03,979 --> 00:08:08,060
kind of a really trivial one is like if

00:08:06,500 --> 00:08:11,060
you have an address field in your

00:08:08,060 --> 00:08:12,500
application you might want to call it to

00:08:11,060 --> 00:08:14,860
a third-party service to validate that

00:08:12,500 --> 00:08:17,000
your address is actually correct right

00:08:14,860 --> 00:08:19,220
but the problem is that third-party

00:08:17,000 --> 00:08:20,630
service has errors your Django form has

00:08:19,220 --> 00:08:23,810
errors and you want the two of those to

00:08:20,630 --> 00:08:25,610
really act as one because it's just

00:08:23,810 --> 00:08:28,539
interesting to talk about our actual use

00:08:25,610 --> 00:08:32,029
case a dealer track was that we have

00:08:28,539 --> 00:08:33,650
third-party users who write validations

00:08:32,029 --> 00:08:36,680
in a language that we've created that

00:08:33,650 --> 00:08:38,570
influence our gender form so and then

00:08:36,680 --> 00:08:40,339
those validations that they write are

00:08:38,570 --> 00:08:43,909
evaluated by a micro service that we

00:08:40,339 --> 00:08:45,770
have and that all that aspect of it is

00:08:43,909 --> 00:08:47,350
actually pretty complicated but Django

00:08:45,770 --> 00:08:50,120
allows us to kind of not worry about

00:08:47,350 --> 00:08:51,620
dealing with those errors that once we

00:08:50,120 --> 00:08:54,110
actually get them back from the API so

00:08:51,620 --> 00:08:55,910
all you need to really do to integrate

00:08:54,110 --> 00:08:58,160
external errors that you get from

00:08:55,910 --> 00:09:01,720
another service with the internal errors

00:08:58,160 --> 00:09:04,480
of your form is just call add error so

00:09:01,720 --> 00:09:06,759
like I wouldn't actually call clean or

00:09:04,480 --> 00:09:09,100
call an API directly in clean like this

00:09:06,759 --> 00:09:11,230
but basically the approach is kind of

00:09:09,100 --> 00:09:15,100
the same right you make a call-out

00:09:11,230 --> 00:09:17,459
through an API you map up the errors

00:09:15,100 --> 00:09:19,569
that you get back from the API with the

00:09:17,459 --> 00:09:21,730
the fields that you have in your form

00:09:19,569 --> 00:09:24,790
and then you just call that air and

00:09:21,730 --> 00:09:26,980
Django takes care of the rest so what's

00:09:24,790 --> 00:09:28,509
good about this is like if you have an

00:09:26,980 --> 00:09:30,399
existing infrastructure for displaying

00:09:28,509 --> 00:09:32,170
errors to the user like I'm sure a lot

00:09:30,399 --> 00:09:34,269
of web applications do right you need

00:09:32,170 --> 00:09:36,459
your user to see in a lot of cases

00:09:34,269 --> 00:09:38,319
what's wrong on the form this allows you

00:09:36,459 --> 00:09:40,149
to integrate those external errors as if

00:09:38,319 --> 00:09:41,829
they came from Django and you don't have

00:09:40,149 --> 00:09:44,410
to worry about doing any of the extra

00:09:41,829 --> 00:09:46,600
work so you just add error takes a field

00:09:44,410 --> 00:09:49,600
and an error message and it displays it

00:09:46,600 --> 00:09:51,370
on that particular field and it adds it

00:09:49,600 --> 00:09:53,680
to the field in the Django form and then

00:09:51,370 --> 00:09:57,430
however your display works it's going to

00:09:53,680 --> 00:09:59,319
continue to work the same way so one

00:09:57,430 --> 00:10:01,630
last problem that we looked at a dealer

00:09:59,319 --> 00:10:04,259
track was having user driven fields and

00:10:01,630 --> 00:10:07,899
basically what I mean by this is like

00:10:04,259 --> 00:10:11,649
you give the a user ability to add like

00:10:07,899 --> 00:10:14,519
a field to your Gengo form so um kind of

00:10:11,649 --> 00:10:16,990
to look at an example of this right like

00:10:14,519 --> 00:10:18,699
okay so this is in the middle of the

00:10:16,990 --> 00:10:21,399
animation but basically this

00:10:18,699 --> 00:10:23,769
demonstrates like say you have a list of

00:10:21,399 --> 00:10:26,980
potential optional inputs that you want

00:10:23,769 --> 00:10:28,660
the user to be able to add the user can

00:10:26,980 --> 00:10:31,269
select one and add it to your Django

00:10:28,660 --> 00:10:32,290
form so there might it seems like at

00:10:31,269 --> 00:10:34,839
first there might be a lot of problems

00:10:32,290 --> 00:10:36,759
because like we think of Django forms

00:10:34,839 --> 00:10:38,829
it's like you have a static definition

00:10:36,759 --> 00:10:40,899
of the form but you can actually handle

00:10:38,829 --> 00:10:43,480
this completely with our previous

00:10:40,899 --> 00:10:44,829
solution obviously you need a little bit

00:10:43,480 --> 00:10:46,870
of JavaScript to kind of make sure that

00:10:44,829 --> 00:10:50,170
this works the way that it is supposed

00:10:46,870 --> 00:10:52,089
to work but there's basically like three

00:10:50,170 --> 00:10:54,430
really simple pieces to the solution so

00:10:52,089 --> 00:10:56,019
on the UI aspect actually rendering the

00:10:54,430 --> 00:10:59,079
fields is taking care about JavaScript

00:10:56,019 --> 00:11:01,149
so um which might seem a little strange

00:10:59,079 --> 00:11:04,569
because you'll have initially a mismatch

00:11:01,149 --> 00:11:08,350
between what the user actually is seeing

00:11:04,569 --> 00:11:09,550
and data entering and what is actually

00:11:08,350 --> 00:11:13,300
on your Django form when you render it

00:11:09,550 --> 00:11:14,949
but you allow JavaScript to basically

00:11:13,300 --> 00:11:15,370
implement the functionality to allow

00:11:14,949 --> 00:11:17,350
that you

00:11:15,370 --> 00:11:19,600
to add the fields to the forum and then

00:11:17,350 --> 00:11:20,920
when you save your dynamic field

00:11:19,600 --> 00:11:23,500
structure part that we talked about

00:11:20,920 --> 00:11:25,750
before comes into play because now you

00:11:23,500 --> 00:11:27,700
can change you can add those additional

00:11:25,750 --> 00:11:30,760
fields that the user added to the form

00:11:27,700 --> 00:11:32,800
so the JavaScript part is not that

00:11:30,760 --> 00:11:34,450
complicated it looks kind of like this

00:11:32,800 --> 00:11:38,380
is like a really trivial implementation

00:11:34,450 --> 00:11:40,690
of it and basically the key part is that

00:11:38,380 --> 00:11:43,270
you need to pass data from your template

00:11:40,690 --> 00:11:46,000
context in when you're rendering the

00:11:43,270 --> 00:11:48,490
Django template to JavaScript so like

00:11:46,000 --> 00:11:50,290
here I have the drop down contents which

00:11:48,490 --> 00:11:51,880
is like a list of all the potential

00:11:50,290 --> 00:11:54,100
fields I want to allow the user to add

00:11:51,880 --> 00:11:58,120
and then save drop-down fields as a

00:11:54,100 --> 00:12:00,580
dictionary of the field if the user has

00:11:58,120 --> 00:12:02,470
saved data for it already and the value

00:12:00,580 --> 00:12:03,640
that the user has saved for it the

00:12:02,470 --> 00:12:05,710
reason why I need both of those things

00:12:03,640 --> 00:12:08,080
is because like I don't want to wipe out

00:12:05,710 --> 00:12:09,660
or I don't want the easier to lose any

00:12:08,080 --> 00:12:12,190
data right so if they save something

00:12:09,660 --> 00:12:13,570
when they reload the form javascript

00:12:12,190 --> 00:12:15,700
needs to create the fields that they've

00:12:13,570 --> 00:12:18,580
already saved so all this does is it

00:12:15,700 --> 00:12:21,460
loops through the drop-down contents and

00:12:18,580 --> 00:12:23,170
if the user saved data for it it creates

00:12:21,460 --> 00:12:25,000
like a static field that looks like

00:12:23,170 --> 00:12:27,400
everything else if the user hasn't it

00:12:25,000 --> 00:12:28,750
adds it to the drop-down and then what

00:12:27,400 --> 00:12:30,580
actually drives adopt down is just like

00:12:28,750 --> 00:12:32,830
a really simple JavaScript that checks

00:12:30,580 --> 00:12:36,520
for a change and adds a field in the

00:12:32,830 --> 00:12:38,740
same way that this white the Django

00:12:36,520 --> 00:12:41,020
formed side of it is even simpler

00:12:38,740 --> 00:12:42,790
because we have our base fields which

00:12:41,020 --> 00:12:44,950
are what you see when you render the

00:12:42,790 --> 00:12:47,500
form and then you have the drop down

00:12:44,950 --> 00:12:49,060
fields and now when you're saving you

00:12:47,500 --> 00:12:51,880
can just add the drop-down fields into

00:12:49,060 --> 00:12:53,410
your field structure because you can

00:12:51,880 --> 00:12:55,000
change it at any point you can have a

00:12:53,410 --> 00:12:56,920
different you can load with a different

00:12:55,000 --> 00:12:58,690
form than you say with and now your

00:12:56,920 --> 00:13:00,640
validations work even though those

00:12:58,690 --> 00:13:05,050
fields weren't in your form when the

00:13:00,640 --> 00:13:06,760
user loaded the page so one last thing I

00:13:05,050 --> 00:13:10,000
kind of want to talk about a little bit

00:13:06,760 --> 00:13:11,890
is so a lot of these problems ended up

00:13:10,000 --> 00:13:15,040
leading us to the decision to move away

00:13:11,890 --> 00:13:17,770
from the architecture that we currently

00:13:15,040 --> 00:13:19,750
had which was Jenga forms and actually

00:13:17,770 --> 00:13:26,650
just regular HTML Django templates and

00:13:19,750 --> 00:13:28,499
we moved to react js3 dots and so but

00:13:26,650 --> 00:13:30,539
the actual back end is pretty much the

00:13:28,499 --> 00:13:32,369
exact same in reaction redox you still

00:13:30,539 --> 00:13:34,289
have we still use our dynamic field

00:13:32,369 --> 00:13:36,959
structure and that actually helps us

00:13:34,289 --> 00:13:40,769
more when we move to react J s because

00:13:36,959 --> 00:13:43,079
what happens is we implement react

00:13:40,769 --> 00:13:45,989
components that mirror the Django fields

00:13:43,079 --> 00:13:47,909
and then what happens is you send your

00:13:45,989 --> 00:13:49,859
whole field structure instead of letting

00:13:47,909 --> 00:13:52,949
Jenga render it you can dump it as a

00:13:49,859 --> 00:13:55,049
JSON and treat it as data once again and

00:13:52,949 --> 00:13:58,529
send it to the front end and let react

00:13:55,049 --> 00:14:00,029
render it and then react to takes kind

00:13:58,529 --> 00:14:02,639
of treats it you can treat your forms

00:14:00,029 --> 00:14:05,399
then as like pages in your single page

00:14:02,639 --> 00:14:07,049
application our yeah single page

00:14:05,399 --> 00:14:09,679
application framework with react and

00:14:07,049 --> 00:14:12,599
then what we use redux for us to kind of

00:14:09,679 --> 00:14:14,339
imitate this sort of like state storage

00:14:12,599 --> 00:14:17,009
and save that you would get with like

00:14:14,339 --> 00:14:20,009
doing regular post requests so Redux is

00:14:17,009 --> 00:14:22,589
just like a plugin that you can use that

00:14:20,009 --> 00:14:24,719
allows you to store state react just

00:14:22,589 --> 00:14:26,429
handles the actual rendering so django

00:14:24,719 --> 00:14:28,589
form spits out a field structure the

00:14:26,429 --> 00:14:31,289
same thing that we had before react

00:14:28,589 --> 00:14:33,839
renders it because you have the same

00:14:31,289 --> 00:14:36,239
react components that mirror the Django

00:14:33,839 --> 00:14:37,589
fields and then redux just takes care of

00:14:36,239 --> 00:14:41,549
making sure that the data that the user

00:14:37,589 --> 00:14:43,289
enters is saved and then when the user

00:14:41,549 --> 00:14:46,949
you know wants to post back to the form

00:14:43,289 --> 00:14:50,309
they can do that via Ajax uh so that's

00:14:46,949 --> 00:14:51,899
really it um any questions I think I

00:14:50,309 --> 00:14:56,039
have some time for questions and answer

00:14:51,899 --> 00:14:59,009
so sorry guys in the last part about

00:14:56,039 --> 00:15:02,249
using star using react and redux yeah

00:14:59,009 --> 00:15:04,769
how do you handle the server-side

00:15:02,249 --> 00:15:07,529
validation right you usually get

00:15:04,769 --> 00:15:10,889
messages from the bagging how do you

00:15:07,529 --> 00:15:13,229
present those into the reacts UI right

00:15:10,889 --> 00:15:15,899
so the way that this actually works is

00:15:13,229 --> 00:15:18,179
we're kind of and this is like kind of

00:15:15,899 --> 00:15:20,309
this solution is not in the best stages

00:15:18,179 --> 00:15:24,179
that it currently could be but our

00:15:20,309 --> 00:15:26,279
back-end basically instantiates a Django

00:15:24,179 --> 00:15:28,319
form that because we have that field

00:15:26,279 --> 00:15:30,479
structure which represents a Django form

00:15:28,319 --> 00:15:32,429
so the backend instantiated Django form

00:15:30,479 --> 00:15:35,789
with the data that it gets via Ajax from

00:15:32,429 --> 00:15:37,829
react we get four marries back and then

00:15:35,789 --> 00:15:41,549
we just send those four mayor's back as

00:15:37,829 --> 00:15:41,980
JSON to react yes and then react renders

00:15:41,549 --> 00:15:44,680
at the

00:15:41,980 --> 00:15:45,390
way that we would before is that answer

00:15:44,680 --> 00:15:51,850
your question

00:15:45,390 --> 00:15:53,470
thanks do you want to go thanks for the

00:15:51,850 --> 00:15:58,060
talk that was really interesting in fact

00:15:53,470 --> 00:16:00,970
I work with a Django based CMS called

00:15:58,060 --> 00:16:02,860
wagtail that's very similar and the way

00:16:00,970 --> 00:16:06,520
that it's handling its own forms and

00:16:02,860 --> 00:16:09,880
it's admin do you have any use cases

00:16:06,520 --> 00:16:11,680
where you have like saved the state of

00:16:09,880 --> 00:16:14,050
the form at the time that it rendered

00:16:11,680 --> 00:16:17,110
because if the form is just data then

00:16:14,050 --> 00:16:19,240
you could save that JSON string of that

00:16:17,110 --> 00:16:21,010
dictionary and then access that form and

00:16:19,240 --> 00:16:22,810
the exact state as it was during that

00:16:21,010 --> 00:16:27,580
time and then you kind of have this sort

00:16:22,810 --> 00:16:31,480
of Django like the migration state type

00:16:27,580 --> 00:16:34,350
thing with your forms so um with redux

00:16:31,480 --> 00:16:37,780
that actually kind of is what you get so

00:16:34,350 --> 00:16:40,660
Redux tracks the state of the form so as

00:16:37,780 --> 00:16:43,750
soon as you render the page get initial

00:16:40,660 --> 00:16:46,390
populates the field values and then that

00:16:43,750 --> 00:16:48,580
also populates redux estate so at that

00:16:46,390 --> 00:16:49,810
point you have a state that basically

00:16:48,580 --> 00:16:54,370
represents all of the data that you have

00:16:49,810 --> 00:16:56,740
on the page and that state stays updated

00:16:54,370 --> 00:16:59,230
so if the user changes something on the

00:16:56,740 --> 00:17:02,050
UI element it updates in the redox state

00:16:59,230 --> 00:17:04,210
and then that's kind of how we don't do

00:17:02,050 --> 00:17:06,160
anything else to like capture the post

00:17:04,210 --> 00:17:08,620
seder redux just stays updated with the

00:17:06,160 --> 00:17:09,970
state and then when you save or you know

00:17:08,620 --> 00:17:12,040
when you post back to the server via

00:17:09,970 --> 00:17:14,080
Ajax it's the same state and whatever

00:17:12,040 --> 00:17:20,830
the user updated gets updated when you

00:17:14,080 --> 00:17:24,610
send it back so I really love the idea

00:17:20,830 --> 00:17:27,400
of sending the form structure to react

00:17:24,610 --> 00:17:30,340
as Jason and having a reacts components

00:17:27,400 --> 00:17:33,340
that mirror the Django form structure so

00:17:30,340 --> 00:17:35,650
my question is just do you are your

00:17:33,340 --> 00:17:38,380
react components for forms open source

00:17:35,650 --> 00:17:40,990
or do you know of any available projects

00:17:38,380 --> 00:17:42,940
that have fields that mirror the Django

00:17:40,990 --> 00:17:45,730
form structure that is a good question

00:17:42,940 --> 00:17:47,650
because we really should and I think

00:17:45,730 --> 00:17:49,060
that is like an ultimate goal of ours is

00:17:47,650 --> 00:17:51,940
to open-source the solution once it

00:17:49,060 --> 00:17:53,680
becomes like detangled from all the

00:17:51,940 --> 00:17:55,810
weird special case stuff that we have

00:17:53,680 --> 00:17:56,710
written in it so

00:17:55,810 --> 00:17:58,060
that's probably that's probably

00:17:56,710 --> 00:17:59,620
something that's gonna happen in the

00:17:58,060 --> 00:18:01,150
future because I can see that being

00:17:59,620 --> 00:18:03,850
useful to a lot of people who want to

00:18:01,150 --> 00:18:06,130
integrate Django into react is if you

00:18:03,850 --> 00:18:08,740
want to go that route we already have a

00:18:06,130 --> 00:18:10,450
solution built and I want to be able to

00:18:08,740 --> 00:18:12,100
say that it's going to be open source at

00:18:10,450 --> 00:18:13,840
some point in the near future I just

00:18:12,100 --> 00:18:16,630
can't tell you exactly when that would

00:18:13,840 --> 00:18:18,400
be so I don't know if there are other

00:18:16,630 --> 00:18:19,930
projects that had that sort of thing I

00:18:18,400 --> 00:18:22,840
know we can't be the only people

00:18:19,930 --> 00:18:24,430
integrating Django and react and I think

00:18:22,840 --> 00:18:26,590
there's another talk even happening

00:18:24,430 --> 00:18:28,240
about that integration so I'd be curious

00:18:26,590 --> 00:18:30,130
to see you know what other libraries are

00:18:28,240 --> 00:18:32,040
out there I don't really know great

00:18:30,130 --> 00:18:35,410
thanks so much

00:18:32,040 --> 00:18:37,570
hey you mentioned you have sometimes

00:18:35,410 --> 00:18:40,360
third party services where you do

00:18:37,570 --> 00:18:43,020
validation or uncertain user inputs yeah

00:18:40,360 --> 00:18:45,310
and that you don't want to do the actual

00:18:43,020 --> 00:18:47,200
appending of the errors in the forms

00:18:45,310 --> 00:18:49,000
clean method yeah so where do you

00:18:47,200 --> 00:18:53,290
actually do that or what's your approach

00:18:49,000 --> 00:18:56,290
there so I meant like doing the service

00:18:53,290 --> 00:18:58,090
call in the actual form clean what I

00:18:56,290 --> 00:18:59,920
would just do is like move that out into

00:18:58,090 --> 00:19:01,420
methods so you don't have this huge is

00:18:59,920 --> 00:19:03,520
you're gonna have a whole bunch of stuff

00:19:01,420 --> 00:19:05,440
and you're clean if you have any sort of

00:19:03,520 --> 00:19:06,400
complex requirements as far as the data

00:19:05,440 --> 00:19:10,000
they can be entered

00:19:06,400 --> 00:19:11,320
so yeah in terms of like where you would

00:19:10,000 --> 00:19:14,260
add the third-party errors I would just

00:19:11,320 --> 00:19:16,480
do it in a another method on your form

00:19:14,260 --> 00:19:18,130
that gets called and clean but make sure

00:19:16,480 --> 00:19:19,810
that you're clean doesn't become some

00:19:18,130 --> 00:19:25,120
unmanageable thing it's kind of what I

00:19:19,810 --> 00:19:27,870
was getting out with that hello thank

00:19:25,120 --> 00:19:31,930
you for your report I have a question so

00:19:27,870 --> 00:19:36,070
was your approach front-end controls the

00:19:31,930 --> 00:19:37,960
structure of the form right so are there

00:19:36,070 --> 00:19:41,470
some security issues like cross-site

00:19:37,960 --> 00:19:43,840
scripting like from JavaScript I can

00:19:41,470 --> 00:19:50,530
post some unwanted fields that shouldn't

00:19:43,840 --> 00:19:51,940
be there so I guess content the content

00:19:50,530 --> 00:19:53,260
does not control the structure of the

00:19:51,940 --> 00:19:54,850
forum right the data

00:19:53,260 --> 00:19:57,520
I guess you're talking about more the

00:19:54,850 --> 00:20:00,670
user driven fields thing and even that

00:19:57,520 --> 00:20:03,100
there is a super that always has to be a

00:20:00,670 --> 00:20:05,500
superset of what is allowable because

00:20:03,100 --> 00:20:07,270
you can't let the user define custom

00:20:05,500 --> 00:20:08,740
fields or if you do you kind of have to

00:20:07,270 --> 00:20:09,400
hack around it and do something where

00:20:08,740 --> 00:20:10,810
like

00:20:09,400 --> 00:20:13,270
the custom field that the user is

00:20:10,810 --> 00:20:15,040
defining is actually some it's a

00:20:13,270 --> 00:20:17,770
concrete field on the back end you can

00:20:15,040 --> 00:20:20,230
never let the user modify your actual

00:20:17,770 --> 00:20:21,700
form structure so what we have is like

00:20:20,230 --> 00:20:23,770
we have a super set of all the possible

00:20:21,700 --> 00:20:26,170
things the user could do we don't let

00:20:23,770 --> 00:20:27,490
them add their own dynamic things that

00:20:26,170 --> 00:20:28,570
aren't part of our super set because

00:20:27,490 --> 00:20:32,350
that you're right that would have

00:20:28,570 --> 00:20:35,200
security issues I mean even so like

00:20:32,350 --> 00:20:37,840
there is for example a field like credit

00:20:35,200 --> 00:20:40,450
card number and you expect it only in

00:20:37,840 --> 00:20:42,340
some circumstances like user should feel

00:20:40,450 --> 00:20:46,570
in his first and last name or some

00:20:42,340 --> 00:20:49,750
checkbox but I can construct JSON that

00:20:46,570 --> 00:20:53,290
contains credit card without those

00:20:49,750 --> 00:20:54,970
fields and I can send it so do have some

00:20:53,290 --> 00:20:58,690
additional server-side validation for

00:20:54,970 --> 00:21:03,460
such cases yes so the field structure

00:20:58,690 --> 00:21:04,750
the form that renders a has to match or

00:21:03,460 --> 00:21:06,550
rather the form that the user enters

00:21:04,750 --> 00:21:08,530
data into has to match the backend

00:21:06,550 --> 00:21:10,960
they're not two separate structures so

00:21:08,530 --> 00:21:13,500
if I send you if I render a field

00:21:10,960 --> 00:21:18,070
structure but then the user enters and

00:21:13,500 --> 00:21:20,260
additional I guess in that case that

00:21:18,070 --> 00:21:21,580
doesn't really hit the server side if I

00:21:20,260 --> 00:21:23,590
understand what you're suggesting is

00:21:21,580 --> 00:21:26,220
that like somebody scripts an additional

00:21:23,590 --> 00:21:29,140
field that isn't really on the form

00:21:26,220 --> 00:21:32,590
these in the form but it appears only in

00:21:29,140 --> 00:21:34,570
some right and right in that case your

00:21:32,590 --> 00:21:37,090
field structure on the back end would

00:21:34,570 --> 00:21:39,370
know that that's not there and so that

00:21:37,090 --> 00:21:40,870
data the data would you would get some

00:21:39,370 --> 00:21:42,700
sort of validation error on the back end

00:21:40,870 --> 00:21:44,050
when you try and post a field that isn't

00:21:42,700 --> 00:21:49,870
there that would cause a problem

00:21:44,050 --> 00:21:54,100
so okay thanks have you tried to allow a

00:21:49,870 --> 00:21:57,220
user to get halfway through a kind of

00:21:54,100 --> 00:21:58,960
long form and save their state and then

00:21:57,220 --> 00:22:00,550
come back to it and pick up where they

00:21:58,960 --> 00:22:03,520
left off maybe in the middle of one

00:22:00,550 --> 00:22:05,550
particular form yeah so we've gone back

00:22:03,520 --> 00:22:07,750
and forth about that it seems like like

00:22:05,550 --> 00:22:09,430
but yeah do you have some others like

00:22:07,750 --> 00:22:10,900
specific questions about like doing that

00:22:09,430 --> 00:22:13,750
it just like yeah have you had

00:22:10,900 --> 00:22:15,760
challenges since you have tried to have

00:22:13,750 --> 00:22:18,640
you had challenges integrating that kind

00:22:15,760 --> 00:22:21,430
of work doing that with this work yes um

00:22:18,640 --> 00:22:22,240
the problems with that we have had a lot

00:22:21,430 --> 00:22:23,470
of challenges with that

00:22:22,240 --> 00:22:26,950
prongs of that tend to be like

00:22:23,470 --> 00:22:29,620
validation like we have all these

00:22:26,950 --> 00:22:31,059
problems about like what kind of

00:22:29,620 --> 00:22:33,400
validation some validates those are not

00:22:31,059 --> 00:22:34,780
important all the time for instance like

00:22:33,400 --> 00:22:36,490
in that case if you want the user to be

00:22:34,780 --> 00:22:38,559
able to say partial data and come back

00:22:36,490 --> 00:22:40,090
later oh you don't want you don't want

00:22:38,559 --> 00:22:41,770
to always run your required validation

00:22:40,090 --> 00:22:45,190
but you're required validation is

00:22:41,770 --> 00:22:46,900
important so we've gone I we go back and

00:22:45,190 --> 00:22:49,510
forth about like what you actually do in

00:22:46,900 --> 00:22:51,910
those circumstances but I think it's

00:22:49,510 --> 00:22:53,770
definitely with this structure it's not

00:22:51,910 --> 00:22:55,510
a super difficult problem to solve I

00:22:53,770 --> 00:22:57,100
think you can go back and forth pretty

00:22:55,510 --> 00:23:03,429
easily on what you actually want the

00:22:57,100 --> 00:23:06,059
end-user behavior to be right so I think

00:23:03,429 --> 00:23:06,059

YouTube URL: https://www.youtube.com/watch?v=rsy0W-eBrQA


