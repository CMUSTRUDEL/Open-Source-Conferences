Title: DjangoCon US 2016 - A New Look Into APIS - Graphene by Syrus Akbary
Publication date: 2016-08-12
Playlist: DjangoCon US 2016
Description: 
	A New Look Into APIS - Graphene by Syrus Akbary

REST API's have been with us a long time. It's time to ask if we can create better API's with new paradigms. We will discuss new ways to query and manipulate data so that our code becomes simpler and easier to scale.

GraphQL is a query language created by Facebook in 2012 which provides a common interface between the client and the server for data fetching and manipulations. We will do a quick overview of GraphQL and focus later on Graphene, the main GraphQL framework for Python.

Graphene allows us to reuse our existing Django Models to create schemas quickly and easily. We would like to think of it as the next natural step from the Django Rest Framework.

This talk was presented at: https://2016.djangocon.us/schedule/presentation/38/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:14,240 --> 00:00:20,689
today I will be speaking about graphene

00:00:17,580 --> 00:00:24,750
graphene is a new way for us to create

00:00:20,689 --> 00:00:27,000
API is very early swing before I start I

00:00:24,750 --> 00:00:30,150
would like to give up a quick

00:00:27,000 --> 00:00:32,189
introduction about myself she was like

00:00:30,150 --> 00:00:34,260
Barry I am clueless like developer I've

00:00:32,189 --> 00:00:38,070
been working with back-end and front-end

00:00:34,260 --> 00:00:40,469
for almost 10 years right now right now

00:00:38,070 --> 00:00:42,600
I'm working on a firm in charge of the

00:00:40,469 --> 00:00:45,329
data communication between services

00:00:42,600 --> 00:00:46,829
using rothko if you find this talk

00:00:45,329 --> 00:00:50,010
interesting just let me know we are

00:00:46,829 --> 00:00:52,739
hiring a lot of people will be welcome

00:00:50,010 --> 00:00:55,289
to hire more you might know some of my

00:00:52,739 --> 00:00:58,289
packages or you might not I did hydrate

00:00:55,289 --> 00:01:01,079
which is my template engine for Python a

00:00:58,289 --> 00:01:02,520
value they email by leaving email unlike

00:01:01,079 --> 00:01:05,250
other packages you can check our

00:01:02,520 --> 00:01:09,450
predator that leaving it have /co

00:01:05,250 --> 00:01:13,229
Cyclery today i will be doing a google

00:01:09,450 --> 00:01:16,530
interaction about caffeine but before

00:01:13,229 --> 00:01:18,390
that I will review a little bit like

00:01:16,530 --> 00:01:21,570
what is West what we can include from

00:01:18,390 --> 00:01:24,960
rest from there we'll go to Rocco what

00:01:21,570 --> 00:01:26,909
Rocco makes better than rest and then to

00:01:24,960 --> 00:01:29,549
graphene which is a framework for using

00:01:26,909 --> 00:01:31,079
Rockville Pike and then from there we

00:01:29,549 --> 00:01:33,840
can see how we can use for free with

00:01:31,079 --> 00:01:36,479
Django very very easily so on first

00:01:33,840 --> 00:01:38,729
slide what is the typical jungle

00:01:36,479 --> 00:01:42,000
structure the ground of jungle structure

00:01:38,729 --> 00:01:44,490
is using the jungle in our back-end or

00:01:42,000 --> 00:01:47,579
our models and also I mean a program you

00:01:44,490 --> 00:01:49,560
know I am in panel and usually we used

00:01:47,579 --> 00:01:52,049
to have server-side general templates

00:01:49,560 --> 00:01:54,149
so what's younger the one who was in

00:01:52,049 --> 00:01:59,340
charge of rendering the layout however

00:01:54,149 --> 00:02:02,430
in the past years we also have desktop

00:01:59,340 --> 00:02:04,649
web apps which are powered by react and

00:02:02,430 --> 00:02:07,229
angular and mobile apps and the way they

00:02:04,649 --> 00:02:09,970
communicate with Django is through some

00:02:07,229 --> 00:02:11,980
APRs so for communicating

00:02:09,970 --> 00:02:14,050
between these desktop web apps or mobile

00:02:11,980 --> 00:02:17,950
apps with or Django back-end

00:02:14,050 --> 00:02:21,370
they there was a dominant market which

00:02:17,950 --> 00:02:23,560
was rest how many of you know what what

00:02:21,370 --> 00:02:25,950
is rest or reading using the demo

00:02:23,560 --> 00:02:28,270
whispering worried their applications

00:02:25,950 --> 00:02:32,590
that's a lot perfect you will love

00:02:28,270 --> 00:02:35,290
cooking so I will do a very quick

00:02:32,590 --> 00:02:38,020
example about rest imagine we want to

00:02:35,290 --> 00:02:41,130
create a conference application where we

00:02:38,020 --> 00:02:44,220
have talks and we have a speakers and

00:02:41,130 --> 00:02:46,900
these thoughts have a title meet have a

00:02:44,220 --> 00:02:49,630
timescale so when the fog is happening

00:02:46,900 --> 00:02:52,450
and also we have the user model which

00:02:49,630 --> 00:02:54,850
have a name and have an avatar and Paul

00:02:52,450 --> 00:02:58,300
have a speaker which is a user and we

00:02:54,850 --> 00:03:03,100
can get the focus of our user which is

00:02:58,300 --> 00:03:05,140
referencing so if we want to create this

00:03:03,100 --> 00:03:06,190
conference application and we want to

00:03:05,140 --> 00:03:08,830
get all the thoughts

00:03:06,190 --> 00:03:10,900
what is the title for each talk what is

00:03:08,830 --> 00:03:12,970
the name and the avatar of the speaker

00:03:10,900 --> 00:03:14,950
of each of the parts more or less this

00:03:12,970 --> 00:03:18,040
is how we have to do it in a cool

00:03:14,950 --> 00:03:20,080
restaurant so we love the schedule the

00:03:18,040 --> 00:03:23,320
scale will return a list of thoughts

00:03:20,080 --> 00:03:26,290
a list of ideas then we love we love we

00:03:23,320 --> 00:03:27,940
load a detail of each talk it's all we

00:03:26,290 --> 00:03:30,340
will return us like the title of the

00:03:27,940 --> 00:03:30,730
talk and probably the idea of the

00:03:30,340 --> 00:03:32,530
speaker

00:03:30,730 --> 00:03:35,830
I'm from the idea of the speaker we will

00:03:32,530 --> 00:03:38,769
fetch again the user information from

00:03:35,830 --> 00:03:42,190
this ad as we can see when we are making

00:03:38,769 --> 00:03:44,190
almost 72-pin quest for just feeling one

00:03:42,190 --> 00:03:48,640
view and this is not performing at all

00:03:44,190 --> 00:03:50,620
but before going forward on that what

00:03:48,640 --> 00:03:53,170
are the main points about that we have

00:03:50,620 --> 00:03:55,420
to deal about using a part of these

00:03:53,170 --> 00:03:58,120
events we have to deal with API version

00:03:55,420 --> 00:04:00,310
we have to deal with input valuation the

00:03:58,120 --> 00:04:02,980
means if you if we want to create a user

00:04:00,310 --> 00:04:04,420
or we want to filter or do pagination we

00:04:02,980 --> 00:04:05,920
have to make sure for example for

00:04:04,420 --> 00:04:09,459
pagination that we wish to see by

00:04:05,920 --> 00:04:12,280
integer another string we have to make

00:04:09,459 --> 00:04:16,390
sure that they output reflect the types

00:04:12,280 --> 00:04:18,850
that we want also we have to deal with

00:04:16,390 --> 00:04:21,190
data under fetching or over fetching

00:04:18,850 --> 00:04:21,650
that means like a model have a lot of

00:04:21,190 --> 00:04:23,540
fields

00:04:21,650 --> 00:04:25,580
some of you doesn't want all the fields

00:04:23,540 --> 00:04:28,190
loaded right like sometimes we just want

00:04:25,580 --> 00:04:31,130
the name of our user and not anything

00:04:28,190 --> 00:04:33,830
else we have to deal with network and

00:04:31,130 --> 00:04:37,550
with network what you see for the first

00:04:33,830 --> 00:04:39,800
three bullet points we can see the

00:04:37,550 --> 00:04:45,260
jungle rest frame worry solved this you

00:04:39,800 --> 00:04:47,419
know partially good way but whatever the

00:04:45,260 --> 00:04:51,110
last three what about the you want to

00:04:47,419 --> 00:04:51,800
specify what is the data we want how we

00:04:51,110 --> 00:04:54,680
can solve that

00:04:51,800 --> 00:04:56,720
so I usually are usually a good way of

00:04:54,680 --> 00:04:59,150
something that is moving everything

00:04:56,720 --> 00:05:02,510
together all these seven HTTP and points

00:04:59,150 --> 00:05:05,630
into what so we will create a new one

00:05:02,510 --> 00:05:09,080
point which is Alta with username and

00:05:05,630 --> 00:05:11,330
other time for example and it's very

00:05:09,080 --> 00:05:13,250
normal that after some time we can get

00:05:11,330 --> 00:05:15,139
questions like oh could you please have

00:05:13,250 --> 00:05:17,479
an option to get the data back without

00:05:15,139 --> 00:05:19,990
this field but without honor extra field

00:05:17,479 --> 00:05:22,610
for a new video that I'm creating

00:05:19,990 --> 00:05:24,350
because of that we can see that the

00:05:22,610 --> 00:05:26,660
logic of fetching is moved from the kind

00:05:24,350 --> 00:05:28,760
who previously knows what we want to

00:05:26,660 --> 00:05:30,860
serve it which isn't now the one

00:05:28,760 --> 00:05:33,680
responsible knowing what the client was

00:05:30,860 --> 00:05:35,810
and because of that each time the client

00:05:33,680 --> 00:05:38,030
wants to fetch more or less say that we

00:05:35,810 --> 00:05:40,430
have to go back to the server and change

00:05:38,030 --> 00:05:43,910
your logic there and it's not very

00:05:40,430 --> 00:05:45,800
scholar why because if dream money we

00:05:43,910 --> 00:05:47,330
have a lot of times and we just change a

00:05:45,800 --> 00:05:49,639
little bit the logic there we always

00:05:47,330 --> 00:05:51,199
have to go back to a server to change

00:05:49,639 --> 00:05:53,000
and we start and everything and it's not

00:05:51,199 --> 00:05:56,120
it's not the best way that we can do

00:05:53,000 --> 00:05:58,310
there because of that reasons a lot of

00:05:56,120 --> 00:06:01,310
companies are investing a lot of time in

00:05:58,310 --> 00:06:03,440
how we can improve this process one of

00:06:01,310 --> 00:06:06,169
these companies was faced it could

00:06:03,440 --> 00:06:08,900
presented Rockwell's one year ago but

00:06:06,169 --> 00:06:11,840
they didn't back you up since three

00:06:08,900 --> 00:06:15,560
years ago I think um what is what girl

00:06:11,840 --> 00:06:20,270
what girl is a way that let us define or

00:06:15,560 --> 00:06:21,800
quarry the data we want this is the

00:06:20,270 --> 00:06:25,550
whole world in this case I'm just

00:06:21,800 --> 00:06:28,190
getting the name of my user as you can

00:06:25,550 --> 00:06:32,180
see this rock quarry is very similar to

00:06:28,190 --> 00:06:33,700
geisha and the rock girl response or

00:06:32,180 --> 00:06:35,920
they use unresponsive

00:06:33,700 --> 00:06:38,350
we'll get from requesting this is just

00:06:35,920 --> 00:06:40,900
like that for a beard me but fill with

00:06:38,350 --> 00:06:43,450
beta so we can think of rock you'll like

00:06:40,900 --> 00:06:46,780
the Jason we want to fetch but without

00:06:43,450 --> 00:06:49,030
anybody just the keys so going to a more

00:06:46,780 --> 00:06:52,930
complicated example we want to get my

00:06:49,030 --> 00:06:54,820
name but also my talks the title of each

00:06:52,930 --> 00:06:57,220
of the talks that I'm doing and the time

00:06:54,820 --> 00:06:59,830
of like when they talk is happening I

00:06:57,220 --> 00:07:05,710
hope you can already guess what will be

00:06:59,830 --> 00:07:08,650
the response of that is just the data we

00:07:05,710 --> 00:07:12,430
are requesting but feel like the days

00:07:08,650 --> 00:07:15,130
before requesting filled with data and

00:07:12,430 --> 00:07:17,320
it's very tweeted knowing what we are

00:07:15,130 --> 00:07:19,780
querying because the response will it

00:07:17,320 --> 00:07:23,260
will look exactly like that for a year

00:07:19,780 --> 00:07:26,740
ago so let's see how we can create that

00:07:23,260 --> 00:07:28,330
rock club and skim away from that we

00:07:26,740 --> 00:07:30,850
have to create the root query which is a

00:07:28,330 --> 00:07:34,120
type of we did when we first worried

00:07:30,850 --> 00:07:36,460
this great this quarry type Dimitri on

00:07:34,120 --> 00:07:39,880
it the me field is returning a user type

00:07:36,460 --> 00:07:44,170
user type of name may feel an alternate

00:07:39,880 --> 00:07:46,510
and thought is returning a list oh sorry

00:07:44,170 --> 00:07:49,630
a list of thoughts and Paul have a title

00:07:46,510 --> 00:07:51,880
and a time on it so what are the real

00:07:49,630 --> 00:07:54,820
advantages of battle we have for

00:07:51,880 --> 00:07:56,650
evaluation if I can do up worried that

00:07:54,820 --> 00:07:59,080
we don't expect for example is scoring a

00:07:56,650 --> 00:08:02,710
feel that that's Nexus we will honor but

00:07:59,080 --> 00:08:05,890
not only that God oculus is pretty tight

00:08:02,710 --> 00:08:07,270
both input and output so if we expect to

00:08:05,890 --> 00:08:09,190
receive a number and we will take a

00:08:07,270 --> 00:08:12,730
swing it will show on the road without

00:08:09,190 --> 00:08:15,160
executing anything and also for the

00:08:12,730 --> 00:08:18,370
actor so if we expect or the clients

00:08:15,160 --> 00:08:21,610
face to receive in the hair or sample

00:08:18,370 --> 00:08:24,580
for our page then it should receive it

00:08:21,610 --> 00:08:26,950
and it will check it always but not only

00:08:24,580 --> 00:08:29,440
that we will not have the problem of

00:08:26,950 --> 00:08:32,110
data under fetching or over pretty why

00:08:29,440 --> 00:08:34,660
because he's the kind now the one who

00:08:32,110 --> 00:08:36,880
knows what it wants and then the client

00:08:34,660 --> 00:08:39,940
sites how much data you want to reside

00:08:36,880 --> 00:08:42,430
to see also we have introspection but

00:08:39,940 --> 00:08:44,410
what I mean with this introspection what

00:08:42,430 --> 00:08:46,690
I mean is actually the client could see

00:08:44,410 --> 00:08:49,089
what are all the types that are

00:08:46,690 --> 00:08:50,860
in my universe and could see like

00:08:49,089 --> 00:08:56,790
description or what are the relation

00:08:50,860 --> 00:08:56,790
between that going back sorry

00:08:57,569 --> 00:09:03,610
going back to introspection another

00:09:02,110 --> 00:09:06,370
powerful powerful thing about

00:09:03,610 --> 00:09:08,920
introspection is let us have validation

00:09:06,370 --> 00:09:11,259
without query and it let us have for

00:09:08,920 --> 00:09:12,970
example an IDE per query that I will

00:09:11,259 --> 00:09:16,000
show you later and it makes things very

00:09:12,970 --> 00:09:17,470
very easy also we have the resolver

00:09:16,000 --> 00:09:19,389
context so it's time we are resolving

00:09:17,470 --> 00:09:20,980
appeal we know what is it's fine for

00:09:19,389 --> 00:09:23,019
example if I thought you might talks I

00:09:20,980 --> 00:09:28,600
know that I'm fetching the talks from my

00:09:23,019 --> 00:09:30,819
user and I can I also we will have only

00:09:28,600 --> 00:09:34,120
one round three for data fetching so we

00:09:30,819 --> 00:09:41,949
will not have any more the point of any

00:09:34,120 --> 00:09:43,899
poor latency or HTTP errors okay another

00:09:41,949 --> 00:09:45,939
cool thing is we have gradual in a lot

00:09:43,899 --> 00:09:47,529
of languages not just JavaScript which

00:09:45,939 --> 00:09:49,870
was the main implementation that

00:09:47,529 --> 00:09:52,300
Facebook page we have gradually iPhone

00:09:49,870 --> 00:09:54,370
we have gradually in Ruby rails we have

00:09:52,300 --> 00:09:57,610
graphical and go in LEC running almost

00:09:54,370 --> 00:10:01,600
any language you can imagine that but

00:09:57,610 --> 00:10:03,579
let's go deeper into the walk or for

00:10:01,600 --> 00:10:05,319
Python graphing we are frame is a frame

00:10:03,579 --> 00:10:07,779
where I traded for using Rockwell and

00:10:05,319 --> 00:10:10,899
become very very easy so it's the main

00:10:07,779 --> 00:10:13,560
way of using graphical Python so what

00:10:10,899 --> 00:10:17,319
I'm going to give some data of cocaine

00:10:13,560 --> 00:10:20,230
it's the most popular repository outside

00:10:17,319 --> 00:10:24,250
Facebook we have right now around 770

00:10:20,230 --> 00:10:25,810
stars it's used across 20 companies more

00:10:24,250 --> 00:10:28,540
or less in production after amis

00:10:25,810 --> 00:10:31,269
included it have a very large community

00:10:28,540 --> 00:10:34,329
and these let us fix things or improved

00:10:31,269 --> 00:10:37,439
very very fast and not only that we

00:10:34,329 --> 00:10:40,509
support pipe from Python 2.6 to Python 3

00:10:37,439 --> 00:10:42,759
very easy like without any change in

00:10:40,509 --> 00:10:47,949
your code and it's fully compatible from

00:10:42,759 --> 00:10:50,889
Django 1.6 1.6 plus so going back to or

00:10:47,949 --> 00:10:52,449
more we have we want to create your

00:10:50,889 --> 00:10:55,029
compressed application and we have

00:10:52,449 --> 00:10:55,500
follows the talk model on the user model

00:10:55,029 --> 00:10:58,830
with

00:10:55,500 --> 00:11:00,630
we feel that they described before if we

00:10:58,830 --> 00:11:03,690
want to create or we want to implement

00:11:00,630 --> 00:11:05,670
the following a graphical schema that

00:11:03,690 --> 00:11:08,580
could execute this query this is how we

00:11:05,670 --> 00:11:11,130
have to do it in Python so we create the

00:11:08,580 --> 00:11:13,170
query type which is inheriting from

00:11:11,130 --> 00:11:16,370
graphene object type and defines the

00:11:13,170 --> 00:11:20,070
mean field which is referencing the user

00:11:16,370 --> 00:11:21,750
the user is a more graphic type or the

00:11:20,070 --> 00:11:25,740
type to have a name which is a string

00:11:21,750 --> 00:11:27,990
and port which is a list and talk is

00:11:25,740 --> 00:11:30,570
just our object ID we have title and

00:11:27,990 --> 00:11:35,790
dynamite title is the strain time is a

00:11:30,570 --> 00:11:38,340
day time so we can see that with just

00:11:35,790 --> 00:11:40,350
nine nights of code we can define a

00:11:38,340 --> 00:11:44,430
world human universe and it's very easy

00:11:40,350 --> 00:11:47,580
to follow it one thing I'm more proud of

00:11:44,430 --> 00:11:50,430
is a play on the playground let us pour

00:11:47,580 --> 00:11:52,770
your play with graphene or broccoli -

00:11:50,430 --> 00:11:55,200
berries so you can actually go your

00:11:52,770 --> 00:11:57,030
computer's go to this URL and play with

00:11:55,200 --> 00:12:00,660
it by yourself I'm going to do a very

00:11:57,030 --> 00:12:03,540
quick demo about how it works so first

00:12:00,660 --> 00:12:07,380
we pour the paint we need it the is

00:12:03,540 --> 00:12:09,750
using pi 500 GS which let us haba python

00:12:07,380 --> 00:12:11,670
interpreter in your browser so we create

00:12:09,750 --> 00:12:14,850
the user type we have a string we need a

00:12:11,670 --> 00:12:16,890
name it to the screen we have the query

00:12:14,850 --> 00:12:22,880
type which is another object type of

00:12:16,890 --> 00:12:25,770
Tokyo this prototype had me feeling it

00:12:22,880 --> 00:12:27,839
depends on the user and then we create

00:12:25,770 --> 00:12:32,570
the scheme and we define which is a

00:12:27,839 --> 00:12:32,570
route prototype which in this case is if

00:12:35,150 --> 00:12:41,339
we try to execute the following query we

00:12:39,150 --> 00:12:43,050
want to get my name right now we have to

00:12:41,339 --> 00:12:44,550
give of course it will return now

00:12:43,050 --> 00:12:47,070
because we don't that we are not

00:12:44,550 --> 00:12:50,190
defining how we want how we are

00:12:47,070 --> 00:12:53,040
resolving this thing so with if we trade

00:12:50,190 --> 00:12:54,839
the following function you resolve me um

00:12:53,040 --> 00:12:56,980
we can say like okay

00:12:54,839 --> 00:13:00,130
each time you are requesting a user

00:12:56,980 --> 00:13:02,230
my username is your Sigma and we put it

00:13:00,130 --> 00:13:04,899
again we can see how you filter the data

00:13:02,230 --> 00:13:06,760
we want but not only that let's

00:13:04,899 --> 00:13:08,800
complicate it a little bit so we can

00:13:06,760 --> 00:13:11,529
make the previous example that I was

00:13:08,800 --> 00:13:15,250
talking before so we want to create the

00:13:11,529 --> 00:13:19,329
top top the top the top type will have a

00:13:15,250 --> 00:13:22,899
title which is a string and we have a

00:13:19,329 --> 00:13:26,350
speaker which is referencing the user in

00:13:22,899 --> 00:13:27,880
this case we can use the same jumbo

00:13:26,350 --> 00:13:32,290
reference with the strings and we will

00:13:27,880 --> 00:13:33,940
map to the correct class in this also we

00:13:32,290 --> 00:13:37,420
are adding the thoughts view which is a

00:13:33,940 --> 00:13:42,910
list not reference the cost the class

00:13:37,420 --> 00:13:44,980
type so right now everyone we are not

00:13:42,910 --> 00:13:46,630
requesting the pottsfield so we are

00:13:44,980 --> 00:13:50,589
fetching the same data but it would want

00:13:46,630 --> 00:13:54,610
to fetch a talk so we can see how now it

00:13:50,589 --> 00:13:57,459
receives like a empty empty list in this

00:13:54,610 --> 00:13:59,410
case I'm just saying like ok I'm

00:13:57,459 --> 00:14:01,720
creating or I'm returning the user we

00:13:59,410 --> 00:14:04,029
have this for tonight if we have to give

00:14:01,720 --> 00:14:06,339
this again we can see how right now it's

00:14:04,029 --> 00:14:09,010
fetches the data for each of the tops

00:14:06,339 --> 00:14:11,440
but let's complicate it again under it

00:14:09,010 --> 00:14:13,600
we want to query not just like a random

00:14:11,440 --> 00:14:17,019
user but we wanted to worry for example

00:14:13,600 --> 00:14:19,180
I use are given an ID so we are saying

00:14:17,019 --> 00:14:21,519
when we create a user field in the query

00:14:19,180 --> 00:14:27,010
and we say what we have the ID argument

00:14:21,519 --> 00:14:28,990
which is a string also we are defining

00:14:27,010 --> 00:14:32,250
how we want to resolve a random user

00:14:28,990 --> 00:14:32,250
given an ID

00:14:40,830 --> 00:14:46,510
so I'm pretty here a dictionary of users

00:14:44,529 --> 00:14:48,790
which in this case is just like a

00:14:46,510 --> 00:14:55,180
mapping with an ID and the correct

00:14:48,790 --> 00:14:59,020
object type or the correct instance and

00:14:55,180 --> 00:15:00,790
let's try it and see how it works so for

00:14:59,020 --> 00:15:04,200
example to me I'm just returning I'm

00:15:00,790 --> 00:15:06,490
just gonna get the user with the ID one

00:15:04,200 --> 00:15:08,529
I'm gonna execute it and see how it

00:15:06,490 --> 00:15:12,010
works okay it works perfectly in the

00:15:08,529 --> 00:15:14,890
same way and also I'm independent how we

00:15:12,010 --> 00:15:16,029
want to resolve a user so we get the ID

00:15:14,890 --> 00:15:22,300
from the argonauts

00:15:16,029 --> 00:15:25,300
ID and now we can execute again but now

00:15:22,300 --> 00:15:27,070
we can change from me to you sir and if

00:15:25,300 --> 00:15:29,010
we execute this query will return no

00:15:27,070 --> 00:15:39,250
because we are not giving there any ID

00:15:29,010 --> 00:15:43,260
but actually random data okay so here if

00:15:39,250 --> 00:15:43,260
we specify an argument for example ready

00:15:43,920 --> 00:15:49,750
we can say for daily one is fetching

00:15:46,510 --> 00:15:55,330
serious Akbari which is me myself by 382

00:15:49,750 --> 00:15:57,300
is fetching there the Peter user so this

00:15:55,330 --> 00:16:00,370
is more or less valid later on good but

00:15:57,300 --> 00:16:03,760
but let's go a little bit deeper I have

00:16:00,370 --> 00:16:06,310
Co means but I will try to go fast ittle

00:16:03,760 --> 00:16:08,740
bit deeper about like how graphene work

00:16:06,310 --> 00:16:10,630
with Jack let's see we have these models

00:16:08,740 --> 00:16:12,730
in our Django application so we have the

00:16:10,630 --> 00:16:14,800
user mode have our name which is a char

00:16:12,730 --> 00:16:17,140
field and avatar which is our image

00:16:14,800 --> 00:16:20,339
field and a poke model with our idle

00:16:17,140 --> 00:16:22,630
time and our reference to the speaker a

00:16:20,339 --> 00:16:25,420
very good thing about graphene is

00:16:22,630 --> 00:16:28,329
written actually Mac ultimately from our

00:16:25,420 --> 00:16:30,459
jungle models to rock will types so we

00:16:28,329 --> 00:16:34,360
don't have to type again and again the

00:16:30,459 --> 00:16:34,959
same things so let's see how it will

00:16:34,360 --> 00:16:36,910
look like

00:16:34,959 --> 00:16:38,870
actually we create a class user if you

00:16:36,910 --> 00:16:42,350
are ready have been using

00:16:38,870 --> 00:16:44,450
it's very similar to Astoria lighters so

00:16:42,350 --> 00:16:46,370
we specify which model we want in this

00:16:44,450 --> 00:16:49,160
case each of these types it will get the

00:16:46,370 --> 00:16:52,550
fields from the jungle model and we can

00:16:49,160 --> 00:16:53,810
also specify for example which fields we

00:16:52,550 --> 00:16:56,000
want to map into Bravo

00:16:53,810 --> 00:16:57,800
so for user we just want the ID name and

00:16:56,000 --> 00:16:59,810
after we don't want the password we

00:16:57,800 --> 00:17:03,110
don't want any other field and for the

00:16:59,810 --> 00:17:04,610
toad we want to exclude the ID I always

00:17:03,110 --> 00:17:09,079
wanted to do a demo but I don't have

00:17:04,610 --> 00:17:11,870
time so why we should use graphing in

00:17:09,079 --> 00:17:13,970
your pattern white brought to graph your

00:17:11,870 --> 00:17:16,510
graphene is better the first thing is

00:17:13,970 --> 00:17:19,280
much easier to maintain our various APRs

00:17:16,510 --> 00:17:22,310
you will have one recommendation on UI

00:17:19,280 --> 00:17:24,380
for free given the introspection you can

00:17:22,310 --> 00:17:26,810
recreate the recommendation from the

00:17:24,380 --> 00:17:28,459
schema universe you have so you don't

00:17:26,810 --> 00:17:30,890
need to spend any time more in

00:17:28,459 --> 00:17:34,760
documentation or in the idea it's

00:17:30,890 --> 00:17:36,440
everything also you can have a very

00:17:34,760 --> 00:17:38,840
quick easy integration with your phone

00:17:36,440 --> 00:17:42,440
from 10 with react thanks to react

00:17:38,840 --> 00:17:44,480
related library by paper as you have

00:17:42,440 --> 00:17:47,540
seen have seamless integration with

00:17:44,480 --> 00:17:49,400
China but overall the most important

00:17:47,540 --> 00:17:52,160
things is the development process will

00:17:49,400 --> 00:17:54,830
be much faster in a basing our own

00:17:52,160 --> 00:17:57,410
experience we lower the times by the

00:17:54,830 --> 00:17:59,600
development time by 2 or 3 and that's

00:17:57,410 --> 00:18:01,970
quite important why because we don't

00:17:59,600 --> 00:18:03,830
need to go back to the server always

00:18:01,970 --> 00:18:05,450
each time we want to face two different

00:18:03,830 --> 00:18:08,000
things

00:18:05,450 --> 00:18:11,420
graphene is a service I know that can be

00:18:08,000 --> 00:18:14,929
used on the web and Burdine also be run

00:18:11,420 --> 00:18:17,810
on a neo4j database in my own data

00:18:14,929 --> 00:18:20,150
center yeah it could be run like any

00:18:17,810 --> 00:18:22,540
data like it could be run in Django it

00:18:20,150 --> 00:18:24,500
could be run like actually one guy built

00:18:22,540 --> 00:18:26,060
graphene integration with google

00:18:24,500 --> 00:18:28,220
appengine and you can build with almost

00:18:26,060 --> 00:18:29,960
anything you want it's transparent like

00:18:28,220 --> 00:18:32,179
if you want to be another tool on top of

00:18:29,960 --> 00:18:34,010
that it's very easy there it's not

00:18:32,179 --> 00:18:36,110
required to use John Cornyn and you have

00:18:34,010 --> 00:18:38,330
the tools for doing it with John but

00:18:36,110 --> 00:18:40,520
actually you can integrate with flask or

00:18:38,330 --> 00:18:40,910
Google App Engine or almost anything you

00:18:40,520 --> 00:18:44,000
want

00:18:40,910 --> 00:18:46,610
I thank you for your talk

00:18:44,000 --> 00:18:48,380
um does the graphene library have a

00:18:46,610 --> 00:18:50,750
sense of permissioning where a user

00:18:48,380 --> 00:18:53,150
might have access to some data but not

00:18:50,750 --> 00:18:55,160
others yes actually there is one thing

00:18:53,150 --> 00:18:57,140
but I didn't cover today because I

00:18:55,160 --> 00:18:59,390
didn't have enough time which is middle

00:18:57,140 --> 00:19:01,010
work middle work at this time we are

00:18:59,390 --> 00:19:03,890
resolving appeal for example thoughts

00:19:01,010 --> 00:19:05,720
for a user and we can check it there you

00:19:03,890 --> 00:19:08,240
are you sir have permission for getting

00:19:05,720 --> 00:19:10,100
the thoughts upon our user so yeah we

00:19:08,240 --> 00:19:12,020
can have like permissions very easy and

00:19:10,100 --> 00:19:14,660
for example with Django quarry on upon

00:19:12,020 --> 00:19:16,760
your open source a more thing that we

00:19:14,660 --> 00:19:19,220
are using is here so it's very easy to

00:19:16,760 --> 00:19:24,820
add permissions on top of that and see

00:19:19,220 --> 00:19:24,820
what user what the user is capable of

00:19:44,470 --> 00:19:48,740
yes thanks for your talk is very

00:19:46,670 --> 00:19:52,280
interesting my question is specifically

00:19:48,740 --> 00:19:55,970
around you know like in the example the

00:19:52,280 --> 00:19:59,660
data was defined in the query file yes

00:19:55,970 --> 00:20:01,580
at what point do you put that data into

00:19:59,660 --> 00:20:04,460
like some kind of graph database or like

00:20:01,580 --> 00:20:06,440
how does that generate IDs you there is

00:20:04,460 --> 00:20:08,330
no matter you can find you can decide

00:20:06,440 --> 00:20:09,650
how you want to fetch it a data so

00:20:08,330 --> 00:20:12,500
actually if you want I can give you

00:20:09,650 --> 00:20:14,570
every if you visit my github like you've

00:20:12,500 --> 00:20:16,370
had a slice feels like very I just the

00:20:14,570 --> 00:20:18,920
last repo I created like that sample

00:20:16,370 --> 00:20:20,960
what I did using Django and you can

00:20:18,920 --> 00:20:23,120
check there that we have a result method

00:20:20,960 --> 00:20:25,730
and we want to for example get certain

00:20:23,120 --> 00:20:27,520
tasks right I mean there is other method

00:20:25,730 --> 00:20:30,410
we defined how we want to fetch you say

00:20:27,520 --> 00:20:31,910
so actually there you can specify how

00:20:30,410 --> 00:20:33,150
you want to do the integration with

00:20:31,910 --> 00:20:35,820
project

00:20:33,150 --> 00:20:38,130
actually Raphael have nothing to with

00:20:35,820 --> 00:20:39,840
grass-like have to do with grass in the

00:20:38,130 --> 00:20:41,820
way that you have types and you have a

00:20:39,840 --> 00:20:44,220
relation between types but other than

00:20:41,820 --> 00:20:48,500
that you can do integration without

00:20:44,220 --> 00:20:48,500
sequel database or no sequel or whatever

00:21:05,840 --> 00:21:12,870
the second general you know time to show

00:21:08,790 --> 00:21:17,430
you're gonna show how the graphene query

00:21:12,870 --> 00:21:21,270
models to map to django models similar

00:21:17,430 --> 00:21:23,820
to the rest framework does that have

00:21:21,270 --> 00:21:25,800
support for the Postgres a new post

00:21:23,820 --> 00:21:29,220
quest fields like today saamana reveals

00:21:25,800 --> 00:21:32,580
actually - it not only have support with

00:21:29,220 --> 00:21:37,080
the latest possible fuels but also have

00:21:32,580 --> 00:21:39,060
support for example the sequel to me but

00:21:37,080 --> 00:21:40,890
it's yeah it's it's very easy to an

00:21:39,060 --> 00:21:48,390
integration with these things like we

00:21:40,890 --> 00:21:51,090
have support with JSON it's or in the

00:21:48,390 --> 00:21:53,190
kind of hard coded example the query

00:21:51,090 --> 00:21:57,180
object kind of like drilled down to

00:21:53,190 --> 00:21:59,670
define the relations explicitly when you

00:21:57,180 --> 00:22:02,100
integrate with django will a graph QL

00:21:59,670 --> 00:22:03,570
query and it would do this joins under

00:22:02,100 --> 00:22:05,610
the hood automatically for you some yes

00:22:03,570 --> 00:22:07,710
actually there is a very good example I

00:22:05,610 --> 00:22:10,380
recommend you to check which is a Star

00:22:07,710 --> 00:22:13,260
Wars API example if you go to graphene

00:22:10,380 --> 00:22:15,090
python.org there is a button there which

00:22:13,260 --> 00:22:17,520
is like check out check out or Star Wars

00:22:15,090 --> 00:22:19,710
whatever all the relations and all of

00:22:17,520 --> 00:22:20,659
these are will be automatically gone

00:22:19,710 --> 00:22:40,429
without any

00:22:20,659 --> 00:22:42,169
your side and I told you mine was very

00:22:40,429 --> 00:22:44,419
related to the Commission's when I was

00:22:42,169 --> 00:22:46,970
just wondering about off if that even is

00:22:44,419 --> 00:22:48,739
a thing with the graduates go yes

00:22:46,970 --> 00:22:51,830
actually like you can check very easily

00:22:48,739 --> 00:22:54,139
like what is the context and each type

00:22:51,830 --> 00:22:56,659
you are you are requesting in the case

00:22:54,139 --> 00:22:58,999
of the Jama integration the context will

00:22:56,659 --> 00:23:00,470
be the request context so you can check

00:22:58,999 --> 00:23:01,940
there each time you always always

00:23:00,470 --> 00:23:08,629
something what is a user who is

00:23:01,940 --> 00:23:15,249
requesting data from there it's very

00:23:08,629 --> 00:23:15,249

YouTube URL: https://www.youtube.com/watch?v=BG1H6IrNbAk


