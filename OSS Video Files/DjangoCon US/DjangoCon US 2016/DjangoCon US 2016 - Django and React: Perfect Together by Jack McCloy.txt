Title: DjangoCon US 2016 - Django and React: Perfect Together by Jack McCloy
Publication date: 2016-08-11
Playlist: DjangoCon US 2016
Description: 
	DjangoCon US 2016 - Django and React: Perfect Together by Jack McCloy

React is a JavaScript library that makes it much easier to build dynamic single-page sites. I won't much dive into how React works, but the main advantage is that it allows you to build your view layer in a declarative way, and with reusable components.

We'll start with an overview how React works, with an eye towards how it's different from interpretive libraries like jQuery. This overview will center around how state is managed in React vs. jQuery, which is the biggest hurdle for many developers when they're learning React. So if you haven't quite wrapped your head around the difference between "2-way data binding" and "1-way data binding", or if you've heard someone talk about "data-down/actions-up", "flux", or "redux" and weren't quite sure what they were talking about, this will clear all that up.

Then we'll take a look at how you can integrate React into a Django project. We'll talk about how you might want to structure things if you're starting with a brand new project, but we'll also talk about ways you can start to take advantage of React's strengths even in projects that are already mature.

Finally, we'll talk about some of the challenging parts of working with React for the first time - how to handle front-end permissioning in React based on your back-end API, how to think about url routing when you literally have two routers, deployment, and the general confusion that goes along with using npm and webpack for the first time.

This talk was presented at: https://2016.djangocon.us/schedule/presentation/46/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:02,450
come on

00:00:14,600 --> 00:00:23,820
hi everyone um so my name is Jack and I

00:00:21,480 --> 00:00:26,430
have - there we go

00:00:23,820 --> 00:00:29,310
well I'm a software developer from New

00:00:26,430 --> 00:00:31,829
York City and one of the reasons why I'm

00:00:29,310 --> 00:00:33,210
giving this talk is most of my recent

00:00:31,829 --> 00:00:35,250
projects three out of my last four

00:00:33,210 --> 00:00:38,550
recent projects were Django projects

00:00:35,250 --> 00:00:41,070
that also used react so I've dug deep

00:00:38,550 --> 00:00:42,720
into how the two can fit together and I

00:00:41,070 --> 00:00:45,690
really like how they fit together

00:00:42,720 --> 00:00:48,899
hopefully some has anyone here worked on

00:00:45,690 --> 00:00:50,370
any react projects okay so a handful so

00:00:48,899 --> 00:00:53,160
not a roomful of beginners that's

00:00:50,370 --> 00:00:55,679
exciting if you are a beginner I kind of

00:00:53,160 --> 00:00:58,739
geared this talk for people who know

00:00:55,679 --> 00:01:00,420
Django but haven't really used react yet

00:00:58,739 --> 00:01:05,010
or kind of just thinking about it and

00:01:00,420 --> 00:01:06,960
looking at it so I've been a Django user

00:01:05,010 --> 00:01:09,420
for over five years

00:01:06,960 --> 00:01:11,880
react user for about the last year or so

00:01:09,420 --> 00:01:13,170
a little longer than that and for what

00:01:11,880 --> 00:01:15,509
it's worth I don't consider myself to be

00:01:13,170 --> 00:01:17,369
any kind of expert on either of those

00:01:15,509 --> 00:01:19,829
things just someone who put in a lot of

00:01:17,369 --> 00:01:21,540
time working on Django projects and

00:01:19,829 --> 00:01:25,950
react projects and might have a little

00:01:21,540 --> 00:01:29,280
bit to share I'm gonna cry and talk fast

00:01:25,950 --> 00:01:31,890
if I talk too fast slow me down but um

00:01:29,280 --> 00:01:34,530
it's kind of a broad scope to this talk

00:01:31,890 --> 00:01:36,479
so I'm more worried about not having

00:01:34,530 --> 00:01:38,729
enough time than I am about like filling

00:01:36,479 --> 00:01:40,710
time I'll try and save some time for Q&A

00:01:38,729 --> 00:01:42,329
at the end but that's my contact info

00:01:40,710 --> 00:01:44,490
you can hit me up on Twitter or github

00:01:42,329 --> 00:01:47,159
if you have any questions that we didn't

00:01:44,490 --> 00:01:48,450
have time for today and also be around

00:01:47,159 --> 00:01:54,630
for the next couple days for the sprints

00:01:48,450 --> 00:01:56,549
so what are the goals of this talk the

00:01:54,630 --> 00:01:59,280
title of the talk really could be a

00:01:56,549 --> 00:02:03,060
crash course in react for people who

00:01:59,280 --> 00:02:05,369
already know Django the first goal is to

00:02:03,060 --> 00:02:07,020
understand what react does how react

00:02:05,369 --> 00:02:09,450
works because a lot of people are

00:02:07,020 --> 00:02:11,070
talking about it and people in the

00:02:09,450 --> 00:02:12,600
Django community some people have picked

00:02:11,070 --> 00:02:14,550
the tires on it some people have used it

00:02:12,600 --> 00:02:16,680
heavily but a lot of people haven't so

00:02:14,550 --> 00:02:20,670
it's kind of an intro to react for

00:02:16,680 --> 00:02:23,730
Django people and the goal is to build a

00:02:20,670 --> 00:02:25,110
mental map for react so that you know

00:02:23,730 --> 00:02:25,540
how to think about it it's going to take

00:02:25,110 --> 00:02:27,489
longer

00:02:25,540 --> 00:02:30,579
a 45-minute talk to build a good mental

00:02:27,489 --> 00:02:35,560
map for react but hopefully this will be

00:02:30,579 --> 00:02:37,239
a good primer we're going to become

00:02:35,560 --> 00:02:40,209
familiar with some of the key parts of a

00:02:37,239 --> 00:02:42,489
reactive project and learn how to set up

00:02:40,209 --> 00:02:45,040
a reactive project inside of a Django

00:02:42,489 --> 00:02:47,079
environment one of the other big

00:02:45,040 --> 00:02:49,780
challenges of learning react is that a

00:02:47,079 --> 00:02:52,900
lot of reactive projects and most of the

00:02:49,780 --> 00:02:56,670
react or plate examples use JSX and

00:02:52,900 --> 00:02:59,739
quote unquote new JavaScript es6 or ES 7

00:02:56,670 --> 00:03:00,579
so we'll be diving into a little bit of

00:02:59,739 --> 00:03:02,620
that just so you know what you're

00:03:00,579 --> 00:03:04,209
looking at it's one of the things that

00:03:02,620 --> 00:03:07,359
can add some intimidation to learning to

00:03:04,209 --> 00:03:09,220
react and then finally we'll bring it

00:03:07,359 --> 00:03:12,159
all together by showing how Django and

00:03:09,220 --> 00:03:13,659
react can fit together in a project and

00:03:12,159 --> 00:03:16,180
we're actually going to start here a

00:03:13,659 --> 00:03:18,970
little bit at a high-level view before

00:03:16,180 --> 00:03:20,769
digging into the reactive part we'll

00:03:18,970 --> 00:03:22,930
look at the separation of concerns in a

00:03:20,769 --> 00:03:25,750
Django and reactive project that uses

00:03:22,930 --> 00:03:28,599
both so Django follows the MVC pattern

00:03:25,750 --> 00:03:31,180
for building user interfaces in the MVC

00:03:28,599 --> 00:03:33,190
pattern there are three parts the model

00:03:31,180 --> 00:03:35,769
the view and the controller and they're

00:03:33,190 --> 00:03:38,260
all interconnected this is kind of how

00:03:35,769 --> 00:03:40,840
they're interconnected the model updates

00:03:38,260 --> 00:03:43,479
the view the view is what's seen by the

00:03:40,840 --> 00:03:46,389
user the user can do stuff to manipulate

00:03:43,479 --> 00:03:48,549
the controller that this is based on the

00:03:46,389 --> 00:03:51,040
users interaction with the view and then

00:03:48,549 --> 00:03:54,909
the controller updates the model this is

00:03:51,040 --> 00:03:57,280
how Django works sort of there's a cool

00:03:54,909 --> 00:03:59,769
question on the Django FAQ page

00:03:57,280 --> 00:04:02,590
Django appears to be an MVC framework

00:03:59,769 --> 00:04:04,690
but you call the controller the view and

00:04:02,590 --> 00:04:07,239
the view the template how come you don't

00:04:04,690 --> 00:04:09,159
use the standard needs and the answer

00:04:07,239 --> 00:04:12,280
that Django gives is in our

00:04:09,159 --> 00:04:14,739
interpretation of MVC the view describes

00:04:12,280 --> 00:04:17,919
the data that gets presented to the user

00:04:14,739 --> 00:04:21,010
it's not necessarily how the data looks

00:04:17,919 --> 00:04:23,710
but what data is being presented it's

00:04:21,010 --> 00:04:25,780
sensible to separate content from

00:04:23,710 --> 00:04:28,060
presentation and that's where Django

00:04:25,780 --> 00:04:31,360
templates come in it's kind of a

00:04:28,060 --> 00:04:32,530
pedantic answer to that question but

00:04:31,360 --> 00:04:33,729
that's also part of the reason why I

00:04:32,530 --> 00:04:35,950
like it but what they're saying

00:04:33,729 --> 00:04:38,710
essentially is that in Django the

00:04:35,950 --> 00:04:41,350
part of the MVC is split into two things

00:04:38,710 --> 00:04:43,960
the view that you keep in views that py

00:04:41,350 --> 00:04:47,820
that renders data to your templates that

00:04:43,960 --> 00:04:50,950
actually are the view that the user sees

00:04:47,820 --> 00:04:52,840
so the map of an MVC from Django's

00:04:50,950 --> 00:04:55,060
perspective looks more like this where

00:04:52,840 --> 00:04:57,010
the model corresponds to your models PI

00:04:55,060 --> 00:04:59,470
file your views corresponds to your

00:04:57,010 --> 00:05:03,760
views PI they render data to your

00:04:59,470 --> 00:05:06,040
templates which is what the user sees he

00:05:03,760 --> 00:05:07,750
or she interacts with the templates to

00:05:06,040 --> 00:05:09,700
manipulate the controller which is kind

00:05:07,750 --> 00:05:13,810
of like the framework itself and the

00:05:09,700 --> 00:05:17,820
controller updates the model react fits

00:05:13,810 --> 00:05:17,820
here react fits where the templates are

00:05:19,260 --> 00:05:25,450
it replaces your Django templates and

00:05:22,690 --> 00:05:27,430
based on how the user interacts with

00:05:25,450 --> 00:05:29,290
those templates dispatches actions that

00:05:27,430 --> 00:05:32,170
then update Django that update the

00:05:29,290 --> 00:05:34,900
controller so this is what your MVC

00:05:32,170 --> 00:05:37,030
looks like in a react project the first

00:05:34,900 --> 00:05:39,460
thing about react to understand is that

00:05:37,030 --> 00:05:41,950
it's not a full MVC framework and it

00:05:39,460 --> 00:05:43,360
doesn't try to be if you use it in a

00:05:41,950 --> 00:05:46,390
Django project it'll fit where your

00:05:43,360 --> 00:05:49,660
templates used to fit it won't replace

00:05:46,390 --> 00:05:51,910
anything else in a Django project and

00:05:49,660 --> 00:05:53,320
keep in mind templates like it's the

00:05:51,910 --> 00:05:55,420
broad view of templates it's not just

00:05:53,320 --> 00:05:56,980
the templates files but also the files

00:05:55,420 --> 00:06:00,340
and packages that your templates use

00:05:56,980 --> 00:06:03,130
jQuery potentially CSS all of your

00:06:00,340 --> 00:06:09,610
JavaScript files that are imported into

00:06:03,130 --> 00:06:12,220
your templates so why would you want to

00:06:09,610 --> 00:06:14,800
do this Django templates work perfectly

00:06:12,220 --> 00:06:17,650
well why would you want to start stop

00:06:14,800 --> 00:06:21,600
using them and start using something

00:06:17,650 --> 00:06:24,280
that is significantly more complicated

00:06:21,600 --> 00:06:26,320
sorry about that

00:06:24,280 --> 00:06:29,380
that you have to learn from scratch and

00:06:26,320 --> 00:06:33,460
that's outside the Django ecosystem that

00:06:29,380 --> 00:06:35,410
you already know real well and love and

00:06:33,460 --> 00:06:37,480
the answer to that is maybe you don't

00:06:35,410 --> 00:06:39,630
maybe you don't want to use react and it

00:06:37,480 --> 00:06:42,340
would be over engineering to use react

00:06:39,630 --> 00:06:44,710
Django templates are perfectly fine for

00:06:42,340 --> 00:06:46,300
plenty of sites and we all know that

00:06:44,710 --> 00:06:49,190
because we've used that for plenty of

00:06:46,300 --> 00:06:51,290
sites they work but react lets you do

00:06:49,190 --> 00:06:53,690
certain things that would be really

00:06:51,290 --> 00:06:58,040
really hard to do if not impossible to

00:06:53,690 --> 00:07:01,880
do using just Django templates the first

00:06:58,040 --> 00:07:04,580
thing um that react templates let you do

00:07:01,880 --> 00:07:07,280
is it lets you turn your site into a

00:07:04,580 --> 00:07:09,290
single page app from the users

00:07:07,280 --> 00:07:11,030
perspective single page apps when

00:07:09,290 --> 00:07:13,820
they're built the right way they are

00:07:11,030 --> 00:07:15,650
faster they feel more modern it's

00:07:13,820 --> 00:07:17,150
something that's really been popular in

00:07:15,650 --> 00:07:19,340
the JavaScript community for a couple of

00:07:17,150 --> 00:07:21,410
years now and has been a little bit

00:07:19,340 --> 00:07:24,590
slower to become popular in the Django

00:07:21,410 --> 00:07:27,320
community and the Ruby community I know

00:07:24,590 --> 00:07:29,870
the channels are doing some work to be

00:07:27,320 --> 00:07:32,110
able to use templates to build single

00:07:29,870 --> 00:07:35,900
page apps but this is a big reason why

00:07:32,110 --> 00:07:37,400
react is deserving of a look another

00:07:35,900 --> 00:07:39,800
thing that you get with react is the

00:07:37,400 --> 00:07:43,820
ability to reuse parts of your code base

00:07:39,800 --> 00:07:46,100
for ios and android in addition to just

00:07:43,820 --> 00:07:49,490
your web app i'm not going to dive too

00:07:46,100 --> 00:07:50,120
much into this but it basically works

00:07:49,490 --> 00:07:52,850
like this

00:07:50,120 --> 00:07:54,980
your react their react templates are

00:07:52,850 --> 00:07:57,169
made up of components they're like

00:07:54,980 --> 00:07:59,690
building blocks that you assemble

00:07:57,169 --> 00:08:02,350
together to form your UI and each one of

00:07:59,690 --> 00:08:05,180
those building blocks does two things it

00:08:02,350 --> 00:08:07,970
performs some internal logic and then

00:08:05,180 --> 00:08:10,520
based on that internal logic it renders

00:08:07,970 --> 00:08:12,980
a chunk of what your users see it

00:08:10,520 --> 00:08:16,640
renders a chunk of UI with react native

00:08:12,980 --> 00:08:18,860
you get to keep the part of your

00:08:16,640 --> 00:08:22,190
templates that perform that logic and

00:08:18,860 --> 00:08:26,680
use them across platforms and then

00:08:22,190 --> 00:08:30,530
render out different code either HTML or

00:08:26,680 --> 00:08:34,130
iOS or Java based on the platform that

00:08:30,530 --> 00:08:35,630
the user is using and then finally this

00:08:34,130 --> 00:08:37,880
is probably the biggest reason why react

00:08:35,630 --> 00:08:40,789
as quote ons as because it has is it

00:08:37,880 --> 00:08:43,760
makes it much easier to manage and

00:08:40,789 --> 00:08:46,310
manipulate complicated state in most

00:08:43,760 --> 00:08:47,900
small projects there isn't complicated

00:08:46,310 --> 00:08:49,430
state the state is simple so there's not

00:08:47,900 --> 00:08:51,200
much to manage you can keep it all in

00:08:49,430 --> 00:08:53,990
your head more or less when you start

00:08:51,200 --> 00:08:55,400
working on a bigger project a managing

00:08:53,990 --> 00:08:56,620
state can become a real nightmare and

00:08:55,400 --> 00:09:00,110
I'm sure it's something that you've

00:08:56,620 --> 00:09:01,820
potentially run into that is the biggest

00:09:00,110 --> 00:09:02,690
selling point of react and the biggest

00:09:01,820 --> 00:09:05,779
thing that it makes much

00:09:02,690 --> 00:09:09,980
much easier so we're going to zoom in

00:09:05,779 --> 00:09:12,889
for a bit on the react part of this map

00:09:09,980 --> 00:09:14,149
so that you can understand and get a

00:09:12,889 --> 00:09:16,639
feel for that and we're going to zoom

00:09:14,149 --> 00:09:18,920
back out and look at how Django and

00:09:16,639 --> 00:09:22,129
react work together as part of a full

00:09:18,920 --> 00:09:24,290
system oh and one more thing since one

00:09:22,129 --> 00:09:27,129
since react is taking care of your UI

00:09:24,290 --> 00:09:29,509
your views are going to feed it raw data

00:09:27,129 --> 00:09:31,759
your view layer is really just an API

00:09:29,509 --> 00:09:33,290
layer react doesn't care what the rest

00:09:31,759 --> 00:09:36,019
of your stack is but using something

00:09:33,290 --> 00:09:38,509
like Django rest framework is it makes a

00:09:36,019 --> 00:09:41,709
heck of a lot of sense because then your

00:09:38,509 --> 00:09:45,319
views are just an API layer by default

00:09:41,709 --> 00:09:47,240
so the home page for react highlights a

00:09:45,319 --> 00:09:50,420
couple of things that differentiate it

00:09:47,240 --> 00:09:52,490
from other UI frameworks if you

00:09:50,420 --> 00:09:54,709
understand these three things you'll

00:09:52,490 --> 00:09:56,269
understand the fundamentals of react the

00:09:54,709 --> 00:09:58,310
first one we already talked about

00:09:56,269 --> 00:10:01,040
it's that react doesn't make assumptions

00:09:58,310 --> 00:10:03,769
about the rest of your technology stack

00:10:01,040 --> 00:10:05,930
react is your UI layer it provides a

00:10:03,769 --> 00:10:09,199
really good toolset arguably the best

00:10:05,930 --> 00:10:11,269
toolset for building your UI and it

00:10:09,199 --> 00:10:15,050
doesn't try to do anything else other

00:10:11,269 --> 00:10:17,959
than that the second point on the home

00:10:15,050 --> 00:10:20,230
page is that react is declarative and

00:10:17,959 --> 00:10:22,670
this one is a little bit tougher to grok

00:10:20,230 --> 00:10:23,870
react makes it painless to create

00:10:22,670 --> 00:10:26,870
interactive UI

00:10:23,870 --> 00:10:30,709
you might put an asterisk after the word

00:10:26,870 --> 00:10:33,079
painless it's painless once you go

00:10:30,709 --> 00:10:35,600
through the significant pain of like

00:10:33,079 --> 00:10:37,040
learning how to use it but once you

00:10:35,600 --> 00:10:41,360
understand that it is pretty painless

00:10:37,040 --> 00:10:44,860
it's actually very painless and yeah

00:10:41,360 --> 00:10:48,050
it's quite easy to use once you get it

00:10:44,860 --> 00:10:50,300
you design simple views for each state

00:10:48,050 --> 00:10:52,730
in your application and react will

00:10:50,300 --> 00:10:55,730
efficiently update and render the right

00:10:52,730 --> 00:10:57,290
components when your data changes so

00:10:55,730 --> 00:11:00,920
basically this means that when you use

00:10:57,290 --> 00:11:04,189
react your application state is kept

00:11:00,920 --> 00:11:06,920
separate from your done you declare what

00:11:04,189 --> 00:11:10,250
your Dom should look like given a

00:11:06,920 --> 00:11:12,439
certain state that your application is

00:11:10,250 --> 00:11:15,350
in and then when your application state

00:11:12,439 --> 00:11:15,920
changes your Dom changes as a result of

00:11:15,350 --> 00:11:18,019
that

00:11:15,920 --> 00:11:20,540
but react controls this change you don't

00:11:18,019 --> 00:11:23,029
control this change you only manage the

00:11:20,540 --> 00:11:24,740
state and what the state and what the

00:11:23,029 --> 00:11:28,370
Dom is supposed to look like given a

00:11:24,740 --> 00:11:29,959
state and then finally declarative views

00:11:28,370 --> 00:11:32,990
make your code more predictable and

00:11:29,959 --> 00:11:34,850
easier to debug it also makes your code

00:11:32,990 --> 00:11:38,000
a heck of a lot easier to test

00:11:34,850 --> 00:11:39,949
so how a declarative component compares

00:11:38,000 --> 00:11:42,230
with doing things the interpretive way

00:11:39,949 --> 00:11:45,019
with jQuery let's say you've got a very

00:11:42,230 --> 00:11:48,500
simple page you got a button and a div

00:11:45,019 --> 00:11:51,470
and you'll have two views where state

00:11:48,500 --> 00:11:53,570
one is the button shows the word hide

00:11:51,470 --> 00:11:55,310
and the div is their state two the

00:11:53,570 --> 00:11:59,180
button shows the word show and the div

00:11:55,310 --> 00:12:01,670
is not there this is how you code it out

00:11:59,180 --> 00:12:04,310
in jQuery I'm not including the actual

00:12:01,670 --> 00:12:06,529
HTML page where the Dom elements are

00:12:04,310 --> 00:12:08,750
declared but you have a JavaScript file

00:12:06,529 --> 00:12:11,240
you bind the click event to your button

00:12:08,750 --> 00:12:13,610
that click event will call a function

00:12:11,240 --> 00:12:16,940
every time it's fired that function is

00:12:13,610 --> 00:12:19,339
going to check what state the div is in

00:12:16,940 --> 00:12:22,490
whether the div is visible or not and

00:12:19,339 --> 00:12:26,570
then interpret from that state whether

00:12:22,490 --> 00:12:28,610
or not the div should still be show

00:12:26,570 --> 00:12:30,800
it'll interpret your application state

00:12:28,610 --> 00:12:32,149
based on what it sees and from that

00:12:30,800 --> 00:12:35,120
interpretation it's either going to show

00:12:32,149 --> 00:12:37,250
the div or hide it if the state is

00:12:35,120 --> 00:12:41,240
interpreted from your dot I know this is

00:12:37,250 --> 00:12:43,209
really bad jQuery by the light but yeah

00:12:41,240 --> 00:12:45,170
how you would do the same thing in react

00:12:43,209 --> 00:12:47,570
it's going to look very differently

00:12:45,170 --> 00:12:50,000
react uses components we already talked

00:12:47,570 --> 00:12:52,550
about that a bit and this file

00:12:50,000 --> 00:12:54,680
represents a single react component the

00:12:52,550 --> 00:12:57,620
easiest way to think about components is

00:12:54,680 --> 00:13:02,209
as a container for some part of your UI

00:12:57,620 --> 00:13:03,560
and this code looks it uses es6 so it

00:13:02,209 --> 00:13:05,690
might look a little bit different than

00:13:03,560 --> 00:13:08,329
the JavaScript that you used to see talk

00:13:05,690 --> 00:13:11,720
about that for just one second es six is

00:13:08,329 --> 00:13:13,910
the 2015 JavaScript specification it

00:13:11,720 --> 00:13:15,800
adds a whole bunch of stuff to

00:13:13,910 --> 00:13:18,920
JavaScript that never was there before

00:13:15,800 --> 00:13:22,160
it adds classes it adds modules so you

00:13:18,920 --> 00:13:24,350
could import an export javascript from

00:13:22,160 --> 00:13:25,010
files just like you can with Python

00:13:24,350 --> 00:13:26,709
packages

00:13:25,010 --> 00:13:29,510
it adds iterators and generators

00:13:26,709 --> 00:13:32,630
promises there's also an

00:13:29,510 --> 00:13:35,720
seven which is finalized last month but

00:13:32,630 --> 00:13:37,520
isn't really widely supported yet the

00:13:35,720 --> 00:13:39,590
point is that javascript is evolving and

00:13:37,520 --> 00:13:41,960
as it does it's becoming way more

00:13:39,590 --> 00:13:44,360
pythonic these are a handful of tweets

00:13:41,960 --> 00:13:46,580
that I found just of people noticing the

00:13:44,360 --> 00:13:51,170
similarities between modern JavaScript

00:13:46,580 --> 00:13:52,970
and Python my favorite is it turns out

00:13:51,170 --> 00:13:55,580
yes it's up in the corner on the right

00:13:52,970 --> 00:13:57,770
turns out es6 is basically Python with

00:13:55,580 --> 00:14:03,740
the added bonus of irritating front-end

00:13:57,770 --> 00:14:05,180
devs and this is me joking a year ago

00:14:03,740 --> 00:14:07,130
that by the time they get to es nine

00:14:05,180 --> 00:14:11,330
JavaScript and Python are going to be

00:14:07,130 --> 00:14:12,980
syntactically identical so back to the

00:14:11,330 --> 00:14:15,050
react component that we're looking at it

00:14:12,980 --> 00:14:18,710
represents a single section of your UI

00:14:15,050 --> 00:14:20,360
and it does two things inside the first

00:14:18,710 --> 00:14:22,880
thing that it does is it manages the

00:14:20,360 --> 00:14:24,110
state of this UI section and the second

00:14:22,880 --> 00:14:26,150
thing it does is it renders the

00:14:24,110 --> 00:14:29,240
component itself it actually renders the

00:14:26,150 --> 00:14:31,610
Dom elements based on this state the

00:14:29,240 --> 00:14:32,930
internal functions I collapse them so

00:14:31,610 --> 00:14:37,190
that we can see the component as a whole

00:14:32,930 --> 00:14:39,770
at the top we have the we import react

00:14:37,190 --> 00:14:41,930
and component because this file is going

00:14:39,770 --> 00:14:44,540
to be a react component we create our

00:14:41,930 --> 00:14:48,550
component as a class that extends the

00:14:44,540 --> 00:14:50,900
base react component we can do that now

00:14:48,550 --> 00:14:52,190
inside our class inside our react

00:14:50,900 --> 00:14:54,980
component we have three function

00:14:52,190 --> 00:14:57,170
functions the constructor a function

00:14:54,980 --> 00:14:59,090
called toggle showing and the render

00:14:57,170 --> 00:14:59,990
function and then we will look at all

00:14:59,090 --> 00:15:02,450
three of those in a moment

00:14:59,990 --> 00:15:04,910
but all the way at the bottom we have

00:15:02,450 --> 00:15:06,890
our export statement to export the

00:15:04,910 --> 00:15:08,330
component so this is one thing that's

00:15:06,890 --> 00:15:11,060
Python and JavaScript are a little bit

00:15:08,330 --> 00:15:13,790
different on in Python every named

00:15:11,060 --> 00:15:16,010
object is exported automatically in

00:15:13,790 --> 00:15:19,610
JavaScript you have to explicitly export

00:15:16,010 --> 00:15:21,260
the things that you want to export to be

00:15:19,610 --> 00:15:22,640
able to import them somewhere else so

00:15:21,260 --> 00:15:25,040
let's go back and look at those three

00:15:22,640 --> 00:15:27,050
internal front functions the constructor

00:15:25,040 --> 00:15:29,510
looks like this it sets the properties

00:15:27,050 --> 00:15:31,910
and the initial state of your component

00:15:29,510 --> 00:15:33,350
we haven't talked about properties and

00:15:31,910 --> 00:15:35,480
we probably won't get a chance to talk

00:15:33,350 --> 00:15:38,840
about them but they're essentially

00:15:35,480 --> 00:15:40,850
immutable parameters that that come from

00:15:38,840 --> 00:15:41,540
other components you cannot change them

00:15:40,850 --> 00:15:42,860
in the context

00:15:41,540 --> 00:15:45,199
of the component that you're looking at

00:15:42,860 --> 00:15:47,540
in this case there are no properties but

00:15:45,199 --> 00:15:50,120
there is some state there's state made

00:15:47,540 --> 00:15:53,600
up of a single boolean saying whether or

00:15:50,120 --> 00:15:56,180
not the Dib is show toggle showing is a

00:15:53,600 --> 00:15:58,250
function that when called toggles the is

00:15:56,180 --> 00:16:01,009
showing value the state from true to

00:15:58,250 --> 00:16:03,560
false or from false to true we use this

00:16:01,009 --> 00:16:05,540
set state to do that it's how you manage

00:16:03,560 --> 00:16:09,230
internal state inside a react component

00:16:05,540 --> 00:16:10,970
and then finally the render function is

00:16:09,230 --> 00:16:13,579
exactly what you'd expect it to be it's

00:16:10,970 --> 00:16:15,800
what it's what gets rendered in this

00:16:13,579 --> 00:16:18,800
case one of two things can be rendered

00:16:15,800 --> 00:16:21,410
and it all depends on the value of this

00:16:18,800 --> 00:16:23,690
dot state that is showing what's

00:16:21,410 --> 00:16:26,180
rendered is JSX it's very similar to

00:16:23,690 --> 00:16:27,560
HTML but you can use variables inside

00:16:26,180 --> 00:16:31,990
JSX the same way that you can use

00:16:27,560 --> 00:16:34,069
variables inside Django templates and

00:16:31,990 --> 00:16:36,259
yeah I just want to talk for a second

00:16:34,069 --> 00:16:40,759
about the on-click property that we put

00:16:36,259 --> 00:16:42,980
on each one of those buttons it calls

00:16:40,759 --> 00:16:45,380
that toggle showing function that we

00:16:42,980 --> 00:16:48,620
defined that switches the internal state

00:16:45,380 --> 00:16:51,560
and since the component states change

00:16:48,620 --> 00:16:52,880
the component is then re-rendered based

00:16:51,560 --> 00:16:55,360
on the new state if you've ever heard

00:16:52,880 --> 00:16:58,339
the expression data down actions up or

00:16:55,360 --> 00:17:00,319
one-way data-binding or one directional

00:16:58,339 --> 00:17:03,230
data binding this is what people are

00:17:00,319 --> 00:17:05,260
talking about when you hit the click

00:17:03,230 --> 00:17:08,900
button that action the on click event

00:17:05,260 --> 00:17:11,319
travels up the component it changes the

00:17:08,900 --> 00:17:14,480
component state and then that new state

00:17:11,319 --> 00:17:17,079
causes the render function to be

00:17:14,480 --> 00:17:20,540
recalled based on that new state and

00:17:17,079 --> 00:17:24,049
that data flows down the actions go up

00:17:20,540 --> 00:17:26,150
and the data goes down back to the log

00:17:24,049 --> 00:17:28,570
might not seem like this pattern is any

00:17:26,150 --> 00:17:32,809
easier and it's definitely a more

00:17:28,570 --> 00:17:35,360
complicated pattern for simple sites in

00:17:32,809 --> 00:17:37,730
this example this very little state

00:17:35,360 --> 00:17:39,620
where react shines is in examples where

00:17:37,730 --> 00:17:41,809
there is a lot of state to manage and

00:17:39,620 --> 00:17:43,940
when different components are affected

00:17:41,809 --> 00:17:46,610
by the same state so that brings us to

00:17:43,940 --> 00:17:47,840
the components themselves react if you

00:17:46,610 --> 00:17:51,049
haven't picked up on this already is

00:17:47,840 --> 00:17:53,059
component based you build encapsulated

00:17:51,049 --> 00:17:54,980
components that each manage their own

00:17:53,059 --> 00:17:57,919
state and then you compose

00:17:54,980 --> 00:17:59,299
them to make complicated you is since

00:17:57,919 --> 00:18:01,910
the component logic is written in

00:17:59,299 --> 00:18:04,400
JavaScript instead of templates you can

00:18:01,910 --> 00:18:07,940
easily pass rich data through your app

00:18:04,400 --> 00:18:10,429
and keep state totally unrelated to your

00:18:07,940 --> 00:18:12,440
Dom so we just built a single component

00:18:10,429 --> 00:18:15,169
the way to build a complex react to UI

00:18:12,440 --> 00:18:18,710
is to assemble these single components

00:18:15,169 --> 00:18:20,179
together like Legos you react that

00:18:18,710 --> 00:18:21,830
shouldn't be a monolith it should be a

00:18:20,179 --> 00:18:25,070
collection of components that each

00:18:21,830 --> 00:18:27,980
ideally does a single thing or renders a

00:18:25,070 --> 00:18:29,720
single part of your UI so let's look at

00:18:27,980 --> 00:18:31,580
an example where you have a single page

00:18:29,720 --> 00:18:33,799
app that has two views a landing page

00:18:31,580 --> 00:18:38,270
and a pricing page we want to build this

00:18:33,799 --> 00:18:40,880
as a single page app so the top of our

00:18:38,270 --> 00:18:42,260
component is so the top component in our

00:18:40,880 --> 00:18:46,820
tree is going to be the same in both

00:18:42,260 --> 00:18:48,200
cases I think I called it in X having

00:18:46,820 --> 00:18:50,020
the same parent all the way at the top

00:18:48,200 --> 00:18:52,309
that's what makes it a single page ad

00:18:50,020 --> 00:18:53,660
there's a plug-in called react router

00:18:52,309 --> 00:18:56,780
that I'm not going to have time to cover

00:18:53,660 --> 00:18:59,809
it handles URL routing inside a react

00:18:56,780 --> 00:19:03,080
app but I just wanted to let you know it

00:18:59,809 --> 00:19:04,820
exists and then the index component is

00:19:03,080 --> 00:19:06,950
going to render one of two possible

00:19:04,820 --> 00:19:09,590
components based on the properties it

00:19:06,950 --> 00:19:13,250
gets from react router it's going to

00:19:09,590 --> 00:19:15,590
either render landing or pricing landing

00:19:13,250 --> 00:19:17,299
is a component that renders your landing

00:19:15,590 --> 00:19:19,240
page pricing as a component that renders

00:19:17,299 --> 00:19:22,370
your pricing page each of those pages

00:19:19,240 --> 00:19:23,900
might be made up by other components

00:19:22,370 --> 00:19:26,330
might be made up by a whole tree of

00:19:23,900 --> 00:19:27,770
other components but the render page of

00:19:26,330 --> 00:19:31,940
your index method is going to look

00:19:27,770 --> 00:19:36,110
something like this where our top

00:19:31,940 --> 00:19:38,809
component index is not rendering HTML is

00:19:36,110 --> 00:19:40,370
rendering other components based on the

00:19:38,809 --> 00:19:44,059
properties that it gets from the router

00:19:40,370 --> 00:19:46,669
so render can render one of two things

00:19:44,059 --> 00:19:48,470
it can actually render Dom or it can

00:19:46,669 --> 00:19:52,690
render other components that eventually

00:19:48,470 --> 00:19:55,549
further down the tree render done and

00:19:52,690 --> 00:19:59,360
when the path name from your router

00:19:55,549 --> 00:20:03,440
changes what's rendered changes without

00:19:59,360 --> 00:20:04,940
a page reload so your application is

00:20:03,440 --> 00:20:07,280
built like a giant tree where the

00:20:04,940 --> 00:20:08,630
current view is made up of all of the

00:20:07,280 --> 00:20:10,790
components being

00:20:08,630 --> 00:20:13,100
all the way down to the base of the tree

00:20:10,790 --> 00:20:15,170
and when your application state changes

00:20:13,100 --> 00:20:17,480
all the components below it that are

00:20:15,170 --> 00:20:19,550
being rendered are going to internally

00:20:17,480 --> 00:20:23,600
check whether they need to change too

00:20:19,550 --> 00:20:24,920
and if they do they'll rerender it

00:20:23,600 --> 00:20:27,200
sounds like that would be super

00:20:24,920 --> 00:20:28,850
inefficient the way that it works is

00:20:27,200 --> 00:20:32,240
actually very efficient I'm not going to

00:20:28,850 --> 00:20:34,640
get into that but it's really fast and

00:20:32,240 --> 00:20:35,990
performant there's way more to say about

00:20:34,640 --> 00:20:38,090
react but I want to bring it back and

00:20:35,990 --> 00:20:40,850
show you how to integrate and react with

00:20:38,090 --> 00:20:45,050
the Django project because that's what

00:20:40,850 --> 00:20:48,380
this talk is about so lightning round

00:20:45,050 --> 00:20:50,780
this is how you get started using Django

00:20:48,380 --> 00:20:55,400
and react together the first thing is

00:20:50,780 --> 00:20:56,630
that you need a node for it you notice

00:20:55,400 --> 00:21:00,670
what's going to manage all of your

00:20:56,630 --> 00:21:03,920
JavaScript packages and including react

00:21:00,670 --> 00:21:05,630
so you want to install node and NPM

00:21:03,920 --> 00:21:08,000
which is the known package manager and

00:21:05,630 --> 00:21:10,040
then you want to initialize NPM inside

00:21:08,000 --> 00:21:13,450
your Django project and this is going to

00:21:10,040 --> 00:21:17,300
create a file called package JSON and

00:21:13,450 --> 00:21:23,600
package JSON is similar in terms of what

00:21:17,300 --> 00:21:26,000
it does to requirements txt for pay you

00:21:23,600 --> 00:21:29,870
want to install the node packages that

00:21:26,000 --> 00:21:32,840
you need and the way to do this is NPM

00:21:29,870 --> 00:21:35,120
install package name and then have a

00:21:32,840 --> 00:21:36,800
little flag at the end to define whether

00:21:35,120 --> 00:21:39,050
you want that package installed globally

00:21:36,800 --> 00:21:43,130
whether you want that package installed

00:21:39,050 --> 00:21:46,150
for the dev dependencies for development

00:21:43,130 --> 00:21:50,660
only or from development and production

00:21:46,150 --> 00:21:52,870
so here is what selection from my

00:21:50,660 --> 00:21:55,340
package JSON from one of my projects

00:21:52,870 --> 00:21:57,860
just a couple of things these are all

00:21:55,340 --> 00:22:00,650
the dependencies for this project that's

00:21:57,860 --> 00:22:03,770
needed for prod and also for dev a

00:22:00,650 --> 00:22:06,530
couple of things to focus in on all of

00:22:03,770 --> 00:22:10,940
the stuff that starts with bable bable

00:22:06,530 --> 00:22:16,450
is a shim for lack of a better word that

00:22:10,940 --> 00:22:19,190
takes your es 2016 or 2015 your es6

00:22:16,450 --> 00:22:20,869
javascript and reduces it down to

00:22:19,190 --> 00:22:24,979
JavaScript that older Brad

00:22:20,869 --> 00:22:27,289
can read radium is a package that you

00:22:24,979 --> 00:22:29,509
probably won't use in a typical reactor

00:22:27,289 --> 00:22:31,639
project I like it a lot in class I have

00:22:29,509 --> 00:22:33,739
a vendetta against CSS and one of the

00:22:31,639 --> 00:22:36,919
things that react lets you do is

00:22:33,739 --> 00:22:39,829
eliminate all CSS rhenium helps you do

00:22:36,919 --> 00:22:43,849
it by letting you do media queries with

00:22:39,829 --> 00:22:45,379
and react without using CSS webpack

00:22:43,849 --> 00:22:48,649
stuff all the stuff that starts with web

00:22:45,379 --> 00:22:50,899
pack web pack is a module builder it

00:22:48,649 --> 00:22:53,839
builds the bundle for your app that your

00:22:50,899 --> 00:22:57,889
Django template is going to read from

00:22:53,839 --> 00:23:00,440
and build the app from um both for prod

00:22:57,889 --> 00:23:02,029
and for dev it's probably for you going

00:23:00,440 --> 00:23:05,119
to eliminate the need for tools like

00:23:02,029 --> 00:23:07,609
grunt and gulp and it also gives you hot

00:23:05,119 --> 00:23:11,539
reloading so just like when you change a

00:23:07,609 --> 00:23:13,609
Python file your server restarts when

00:23:11,539 --> 00:23:15,349
you change in JavaScript file your known

00:23:13,609 --> 00:23:17,329
server will be able to restart if you

00:23:15,349 --> 00:23:18,889
use webpack it's not the only way to do

00:23:17,329 --> 00:23:21,349
it it's just kind of the preferred way

00:23:18,889 --> 00:23:23,899
to do it I guess or a preferred way to

00:23:21,349 --> 00:23:25,489
do it and then finally something that I

00:23:23,899 --> 00:23:29,359
am probably not going to get a chance to

00:23:25,489 --> 00:23:31,969
talk about is redux which is something

00:23:29,359 --> 00:23:34,609
you should learn and make use of it's a

00:23:31,969 --> 00:23:37,279
package it's also a pattern for managing

00:23:34,609 --> 00:23:39,829
and updating application state that lets

00:23:37,279 --> 00:23:43,459
all of the state updates happen in the

00:23:39,829 --> 00:23:45,589
same place so you can simplify state

00:23:43,459 --> 00:23:47,959
management even further and also put in

00:23:45,589 --> 00:23:52,459
dev tools there so it's easier to see

00:23:47,959 --> 00:23:54,319
what's going on so yeah the next step is

00:23:52,459 --> 00:23:56,389
learn redux it's a hundred percent worth

00:23:54,319 --> 00:23:59,869
the time it takes to learn there's a

00:23:56,389 --> 00:24:02,690
really good video course by the creator

00:23:59,869 --> 00:24:04,099
of redux that I linked to here I'll

00:24:02,690 --> 00:24:06,019
publish these slides afterwards by the

00:24:04,099 --> 00:24:09,579
way but you should definitely check that

00:24:06,019 --> 00:24:12,409
out a few if you care to learn react

00:24:09,579 --> 00:24:14,899
then the next step is you make a server

00:24:12,409 --> 00:24:19,009
j/s file this is the file that you use

00:24:14,899 --> 00:24:21,889
to run your known server in your dev

00:24:19,009 --> 00:24:26,569
environment it's kind of like manage py

00:24:21,889 --> 00:24:29,569
run a server you would do no dot server

00:24:26,569 --> 00:24:34,110
or known space server j/s to start your

00:24:29,569 --> 00:24:38,370
known server it's mine looks like this

00:24:34,110 --> 00:24:40,799
and it basically just tells your web app

00:24:38,370 --> 00:24:43,590
your web pack development server how to

00:24:40,799 --> 00:24:45,659
run and it makes use of a configuration

00:24:43,590 --> 00:24:49,019
file where you store all your web pack

00:24:45,659 --> 00:24:55,679
configurations making that configuration

00:24:49,019 --> 00:24:58,049
file is the next step the config file I

00:24:55,679 --> 00:25:00,480
couldn't fit the whole thing on here let

00:24:58,049 --> 00:25:11,309
me see if I can actually can you see

00:25:00,480 --> 00:25:14,639
that or no on you see it now no all

00:25:11,309 --> 00:25:16,260
right um this is it just to it so I'm

00:25:14,639 --> 00:25:20,370
gonna have to describe this without

00:25:16,260 --> 00:25:26,130
showing it unfortunately and now I've

00:25:20,370 --> 00:25:29,519
made it so that I can't see it yeah but

00:25:26,130 --> 00:25:32,639
in your web pack config it gives you the

00:25:29,519 --> 00:25:36,080
ability to use different loaders to use

00:25:32,639 --> 00:25:39,029
different modules to use different

00:25:36,080 --> 00:25:40,919
inputs and outputs the inputs they're

00:25:39,029 --> 00:25:43,590
called entries and the outputs which is

00:25:40,919 --> 00:25:45,000
just called output is the part that

00:25:43,590 --> 00:25:47,460
you're going to be most concerned about

00:25:45,000 --> 00:25:50,340
what the output does is it tells webpack

00:25:47,460 --> 00:25:52,950
where to put that big old bundle that it

00:25:50,340 --> 00:25:54,480
creates so that javascript knows where

00:25:52,950 --> 00:25:58,049
to list of that Django knows where to

00:25:54,480 --> 00:26:00,750
look for it and then entry defines what

00:25:58,049 --> 00:26:04,289
the top component in your component your

00:26:00,750 --> 00:26:06,570
react component tree is so if you want

00:26:04,289 --> 00:26:08,880
to slowly integrate react into an

00:26:06,570 --> 00:26:12,210
existing Django project you might have

00:26:08,880 --> 00:26:15,539
multiple entries a small react app

00:26:12,210 --> 00:26:18,120
inside Django to manage a small thing

00:26:15,539 --> 00:26:20,429
that can grow over time but you can have

00:26:18,120 --> 00:26:22,230
multiple entry points multiple react

00:26:20,429 --> 00:26:23,970
trees I guess you would call them and

00:26:22,230 --> 00:26:27,659
you would define them in your web pack

00:26:23,970 --> 00:26:34,289
config I only have one and I call it

00:26:27,659 --> 00:26:38,010
main there we go

00:26:34,289 --> 00:26:39,600
I can see my notes again but yeah this

00:26:38,010 --> 00:26:42,240
is just to that in there there's also

00:26:39,600 --> 00:26:45,240
your index JSX file which is your top

00:26:42,240 --> 00:26:47,180
most react file which I included it just

00:26:45,240 --> 00:26:50,720
to

00:26:47,180 --> 00:26:54,140
and then two more components that that

00:26:50,720 --> 00:26:58,910
index JSX uses a fruit which is where

00:26:54,140 --> 00:27:01,940
your apps roots are defined and apt JSX

00:26:58,910 --> 00:27:04,760
which is the uppermost component that

00:27:01,940 --> 00:27:08,600
render that has the potential to render

00:27:04,760 --> 00:27:10,880
Dom and not just render other components

00:27:08,600 --> 00:27:12,860
it'll render other components too but it

00:27:10,880 --> 00:27:16,370
can also render now like a loading Dom

00:27:12,860 --> 00:27:19,970
and then finally here's how you hook the

00:27:16,370 --> 00:27:21,380
two of them together you install Django

00:27:19,970 --> 00:27:25,220
whim pack loader which is a nice little

00:27:21,380 --> 00:27:28,580
package that lets you call your web pack

00:27:25,220 --> 00:27:30,110
bundle so all of that react code and the

00:27:28,580 --> 00:27:32,270
other JavaScript packages that you're

00:27:30,110 --> 00:27:35,930
using lets you pull that from inside a

00:27:32,270 --> 00:27:40,760
django template and you add web pack

00:27:35,930 --> 00:27:43,400
loader to your installed apps and if you

00:27:40,760 --> 00:27:44,660
have multiple entry points you'll want

00:27:43,400 --> 00:27:46,730
to do some additional configuration

00:27:44,660 --> 00:27:51,080
that's really well documented on web

00:27:46,730 --> 00:27:53,300
pack loaders github and then finally the

00:27:51,080 --> 00:27:57,770
last step is inside a django template

00:27:53,300 --> 00:27:59,480
you load render bundle from your from

00:27:57,770 --> 00:28:04,490
web pack loader at the top of the page

00:27:59,480 --> 00:28:06,860
and then inside the HTML of the page we

00:28:04,490 --> 00:28:08,930
render the bundle that we're trying to

00:28:06,860 --> 00:28:14,210
render we called it main in web pack

00:28:08,930 --> 00:28:14,750
config so just as render bundle main and

00:28:14,210 --> 00:28:19,250
that's it

00:28:14,750 --> 00:28:23,030
that is basically how to integrate it

00:28:19,250 --> 00:28:25,400
into a project so I have more stuff that

00:28:23,030 --> 00:28:28,160
I can cover and I'm prepared to cover

00:28:25,400 --> 00:28:30,680
but I figured now would be a decent time

00:28:28,160 --> 00:28:33,740
to stop for like two or three minutes of

00:28:30,680 --> 00:28:35,900
questions in case anyone wants to jump

00:28:33,740 --> 00:28:41,960
in because I know that it might be green

00:28:35,900 --> 00:28:44,930
territory we use the same code base as

00:28:41,960 --> 00:28:48,800
owns a Mason but I would like to know

00:28:44,930 --> 00:28:52,490
what is the reality of that because I'm

00:28:48,800 --> 00:28:54,260
glad to say exactly the same but I don't

00:28:52,490 --> 00:28:57,440
think if you haven't your component your

00:28:54,260 --> 00:28:58,940
logic right and then your render short

00:28:57,440 --> 00:29:00,560
you're actually rendering different

00:28:58,940 --> 00:29:02,620
things right and you

00:29:00,560 --> 00:29:05,000
in a web application you have different

00:29:02,620 --> 00:29:07,460
components as well so that what is the

00:29:05,000 --> 00:29:09,830
reality of that yeah I mean I haven't

00:29:07,460 --> 00:29:12,560
worked too much with it but I know

00:29:09,830 --> 00:29:14,390
several people that have the kind of

00:29:12,560 --> 00:29:20,720
you're talking about with react native

00:29:14,390 --> 00:29:23,180
right yeah so react the first of all iOS

00:29:20,720 --> 00:29:25,190
react native is more mature than Android

00:29:23,180 --> 00:29:27,320
react native right now some most of the

00:29:25,190 --> 00:29:30,170
problems that people are having seem to

00:29:27,320 --> 00:29:32,240
be coming from Android react native it's

00:29:30,170 --> 00:29:34,640
good for certain types of applications

00:29:32,240 --> 00:29:37,640
applications that like render template

00:29:34,640 --> 00:29:39,350
views it's bad for applications that are

00:29:37,640 --> 00:29:42,440
super animation heavy and have a lot of

00:29:39,350 --> 00:29:44,450
like interstitial animations is also

00:29:42,440 --> 00:29:46,430
what I've heard in terms of structuring

00:29:44,450 --> 00:29:49,880
that project react lets you do it one of

00:29:46,430 --> 00:29:53,380
two different ways inside a component

00:29:49,880 --> 00:29:57,680
you can render different code based on

00:29:53,380 --> 00:30:00,620
the based on whether it is a web app or

00:29:57,680 --> 00:30:02,630
an iOS app or an Android app another

00:30:00,620 --> 00:30:06,980
thing that you can do is you can have

00:30:02,630 --> 00:30:11,110
different components to define what your

00:30:06,980 --> 00:30:16,870
app is so you can have index component

00:30:11,110 --> 00:30:20,630
JSX next to index component is JSX and

00:30:16,870 --> 00:30:22,850
you will just import that as index

00:30:20,630 --> 00:30:25,370
component and react is smart enough to

00:30:22,850 --> 00:30:27,230
know that if you're building an iOS app

00:30:25,370 --> 00:30:29,060
it wants to use the one that's iOS and

00:30:27,230 --> 00:30:31,490
if you're building if it's a web app

00:30:29,060 --> 00:30:36,590
that wants to use the one that's JSX

00:30:31,490 --> 00:30:38,240
does that answer it at all okay yeah I

00:30:36,590 --> 00:30:40,280
mean I think that the benefit is if you

00:30:38,240 --> 00:30:42,380
want your mobile app to do totally

00:30:40,280 --> 00:30:44,960
different things then your web app you

00:30:42,380 --> 00:30:46,490
probably wouldn't but if you want your

00:30:44,960 --> 00:30:48,050
mobile app if it's really just a

00:30:46,490 --> 00:30:49,910
distribution game where you want your

00:30:48,050 --> 00:30:52,220
Android app and your iOS app to be very

00:30:49,910 --> 00:30:53,870
similar to one another then being able

00:30:52,220 --> 00:30:56,360
to share the same codebase I think makes

00:30:53,870 --> 00:30:57,860
a heck of a lot of sense so I have two

00:30:56,360 --> 00:30:59,600
quick questions you mentioned Django

00:30:57,860 --> 00:31:01,330
rest framework and react yeah

00:30:59,600 --> 00:31:04,250
what's the workflow look like for

00:31:01,330 --> 00:31:06,620
logging for example and sending back and

00:31:04,250 --> 00:31:08,870
CSRF token and am I simply just grabbing

00:31:06,620 --> 00:31:11,030
that token on a JavaScript JavaScript ID

00:31:08,870 --> 00:31:13,520
from the cookie and appending it to a

00:31:11,030 --> 00:31:14,030
request or what's the react way of doing

00:31:13,520 --> 00:31:16,850
that

00:31:14,030 --> 00:31:18,590
yeah I'll show you some code afterwards

00:31:16,850 --> 00:31:20,840
or if you're around for the next couple

00:31:18,590 --> 00:31:24,200
of days basically the way that I do it

00:31:20,840 --> 00:31:29,030
is I have Ajax calls inside my Redux

00:31:24,200 --> 00:31:31,550
workflow where I make a from the

00:31:29,030 --> 00:31:35,120
perspective of a component it I just

00:31:31,550 --> 00:31:38,360
have a call that says get artists or

00:31:35,120 --> 00:31:40,700
something like that and inside that get

00:31:38,360 --> 00:31:43,010
artists function that I'll define it's

00:31:40,700 --> 00:31:46,820
going to check what artists I already

00:31:43,010 --> 00:31:49,310
have in my Redux store redux is kind of

00:31:46,820 --> 00:31:51,710
like the back end of your front-end and

00:31:49,310 --> 00:31:53,870
I'm getting deeper than I who wanted to

00:31:51,710 --> 00:31:55,640
on this but it'll check if I need to

00:31:53,870 --> 00:31:57,650
make a fetch first of all it'll check if

00:31:55,640 --> 00:32:00,110
I need to make an AJAX call if I do

00:31:57,650 --> 00:32:02,270
it'll make that Ajax call and get the

00:32:00,110 --> 00:32:06,760
response and then load it into my

00:32:02,270 --> 00:32:08,990
browser's local store ok Club yeah I

00:32:06,760 --> 00:32:11,360
appreciate that that probably doesn't

00:32:08,990 --> 00:32:14,420
fully answer your question no no that's

00:32:11,360 --> 00:32:16,370
and my next question is react can get

00:32:14,420 --> 00:32:17,870
really complicated as you know you can

00:32:16,370 --> 00:32:19,550
have models and a lot of business logic

00:32:17,870 --> 00:32:21,110
on the front end you can do the same

00:32:19,550 --> 00:32:23,690
thing on the back end in your experience

00:32:21,110 --> 00:32:26,900
how do you handle where that logic

00:32:23,690 --> 00:32:29,630
should land as far as Django models or

00:32:26,900 --> 00:32:30,170
models and react but where do we draw

00:32:29,630 --> 00:32:32,690
that line

00:32:30,170 --> 00:32:36,770
sure react doesn't have models that has

00:32:32,690 --> 00:32:39,890
modules so you're like importing modules

00:32:36,770 --> 00:32:43,010
from it's not like Django models so much

00:32:39,890 --> 00:32:47,300
I guess your react data stores could be

00:32:43,010 --> 00:32:51,890
similar to modules but um those would be

00:32:47,300 --> 00:32:54,560
populated by your uh your Django models

00:32:51,890 --> 00:32:57,560
um so what I would typically do is I

00:32:54,560 --> 00:32:59,480
would get the data from Django put it

00:32:57,560 --> 00:33:02,240
into react so I don't have to get it

00:32:59,480 --> 00:33:04,130
again if I need it again and sort of use

00:33:02,240 --> 00:33:07,310
it the same way that you would kind of

00:33:04,130 --> 00:33:09,620
use like SQLite if you were building an

00:33:07,310 --> 00:33:12,110
iOS app where you have like a local data

00:33:09,620 --> 00:33:15,590
store just for that user just for that

00:33:12,110 --> 00:33:18,410
session and then everything else just

00:33:15,590 --> 00:33:20,420
lives in Django and you have a workflow

00:33:18,410 --> 00:33:22,580
where you check if you need it if you do

00:33:20,420 --> 00:33:25,520
you grab it from Django if you already

00:33:22,580 --> 00:33:27,580
have it then you don't thanks yeah of

00:33:25,520 --> 00:33:27,580
course

00:33:27,650 --> 00:33:31,530
hadar a lovely talk I've really been

00:33:30,000 --> 00:33:32,940
appreciating a lot of the conversation

00:33:31,530 --> 00:33:34,860
I've heard around Django and react

00:33:32,940 --> 00:33:37,560
together my question for you is about

00:33:34,860 --> 00:33:40,260
style management and CSS David you don't

00:33:37,560 --> 00:33:42,450
like CSS and they're using radium for

00:33:40,260 --> 00:33:44,970
media queries sure are you using any of

00:33:42,450 --> 00:33:47,820
the libraries Khan Academy has one at

00:33:44,970 --> 00:33:51,480
the name of it to manage inline styles

00:33:47,820 --> 00:33:55,620
in virtual Dom elements no I'm not using

00:33:51,480 --> 00:33:58,550
those basically my CSS is so I've put a

00:33:55,620 --> 00:34:03,030
kind of rigid separation between

00:33:58,550 --> 00:34:05,490
components that render pages are only

00:34:03,030 --> 00:34:07,740
made up of other dumb components that

00:34:05,490 --> 00:34:09,120
don't manage any internal state so I

00:34:07,740 --> 00:34:11,250
have a component from button and I have

00:34:09,120 --> 00:34:13,649
a component for div and things like that

00:34:11,250 --> 00:34:16,409
and I define what those should look like

00:34:13,649 --> 00:34:18,240
by passing props to them and then all of

00:34:16,409 --> 00:34:19,980
the radium calls are done internally and

00:34:18,240 --> 00:34:22,710
I really actually only use radium for

00:34:19,980 --> 00:34:25,530
the hover and focus media queries things

00:34:22,710 --> 00:34:28,700
like that for things like with I do that

00:34:25,530 --> 00:34:31,470
declaratively by having a reducer that

00:34:28,700 --> 00:34:33,390
manages the window width so I can access

00:34:31,470 --> 00:34:35,250
that and declarative fashion does that

00:34:33,390 --> 00:34:38,310
answer your question yeah it does a bit

00:34:35,250 --> 00:34:41,100
um how do you reuse any style share

00:34:38,310 --> 00:34:44,460
based on unit 14 components sure um you

00:34:41,100 --> 00:34:46,590
just have it inherit from a parent like

00:34:44,460 --> 00:34:49,110
if you're using the same button

00:34:46,590 --> 00:34:50,909
everywhere you you really don't have to

00:34:49,110 --> 00:34:54,030
you're importing the button into your

00:34:50,909 --> 00:34:56,460
component so it's not like your button

00:34:54,030 --> 00:34:58,890
almost becomes a composite of the Dom

00:34:56,460 --> 00:35:02,220
element and also the style in the same

00:34:58,890 --> 00:35:04,020
way that it would be if you had a button

00:35:02,220 --> 00:35:05,600
that you put like I don't know button

00:35:04,020 --> 00:35:10,410
the success on if you're using bootstrap

00:35:05,600 --> 00:35:13,350
right thank you sure my question is

00:35:10,410 --> 00:35:17,430
about a little bit of architecture or

00:35:13,350 --> 00:35:18,990
maybe deciding when you are where you

00:35:17,430 --> 00:35:20,970
should migrate your application to

00:35:18,990 --> 00:35:23,940
something like react like for example

00:35:20,970 --> 00:35:28,140
the the button example that you made is

00:35:23,940 --> 00:35:29,820
traveling in jQuery right yep but how do

00:35:28,140 --> 00:35:32,370
you know when hey I could really use

00:35:29,820 --> 00:35:34,860
something that manages my state instead

00:35:32,370 --> 00:35:37,800
of just adding classes to my stuff and

00:35:34,860 --> 00:35:40,530
checking with jQuery but you know

00:35:37,800 --> 00:35:43,980
installing react is not

00:35:40,530 --> 00:35:45,990
like oh one comment thing I really have

00:35:43,980 --> 00:35:48,270
to commit to it it's probably going to

00:35:45,990 --> 00:35:52,080
change your build and a bunch of stuff

00:35:48,270 --> 00:35:53,730
yeah so when do you know hey we should

00:35:52,080 --> 00:35:56,610
really be using something more robust

00:35:53,730 --> 00:35:58,470
than just jQuery you know I mean I would

00:35:56,610 --> 00:36:00,150
say if you're starting a new project

00:35:58,470 --> 00:36:02,010
then you already know react it makes a

00:36:00,150 --> 00:36:04,020
lot of sense because it's no harder to

00:36:02,010 --> 00:36:06,150
do it that way if you're starting from

00:36:04,020 --> 00:36:09,510
scratch if you have an existing project

00:36:06,150 --> 00:36:11,280
that isn't using react I mean you'll

00:36:09,510 --> 00:36:14,940
know when you're spending a lot of time

00:36:11,280 --> 00:36:18,060
debugging jQuery because managing state

00:36:14,940 --> 00:36:19,830
is an issue so like how you do that

00:36:18,060 --> 00:36:21,960
exact calculus of whether or not the

00:36:19,830 --> 00:36:23,610
investment is worth it really has a lot

00:36:21,960 --> 00:36:28,440
to do with how much of a headache it is

00:36:23,610 --> 00:36:30,930
to fix problems that that happened when

00:36:28,440 --> 00:36:38,690
your state and your da more like

00:36:30,930 --> 00:36:40,590
intermixed so a thanks for the talk I

00:36:38,690 --> 00:36:42,630
have heard a lot of different opinions

00:36:40,590 --> 00:36:44,850
about combining like front-end and

00:36:42,630 --> 00:36:48,300
back-end especially in our Django

00:36:44,850 --> 00:36:52,410
projects and I'm wondering how you

00:36:48,300 --> 00:36:55,170
handle packaging up your your project

00:36:52,410 --> 00:36:57,360
for deployment since a lot of people

00:36:55,170 --> 00:36:59,580
have opinions about separating front-end

00:36:57,360 --> 00:37:01,590
and back-end bundles and whatnot like or

00:36:59,580 --> 00:37:05,010
a lot of people that I work with are

00:37:01,590 --> 00:37:07,170
really against having PIP you know be

00:37:05,010 --> 00:37:08,280
dependent on NPM and I tend to agree

00:37:07,170 --> 00:37:11,070
with them but I wanted to see what you

00:37:08,280 --> 00:37:14,190
thought about that um yeah I mean I tend

00:37:11,070 --> 00:37:16,200
to agree with that as well like Python

00:37:14,190 --> 00:37:19,920
Django has to run on the server its

00:37:16,200 --> 00:37:23,600
back-end react can either be deployed on

00:37:19,920 --> 00:37:26,990
the server or on the client it's

00:37:23,600 --> 00:37:29,490
front-end I like to keep them separate

00:37:26,990 --> 00:37:31,700
yeah thanks is that does that answer

00:37:29,490 --> 00:37:31,700
your question

00:37:32,510 --> 00:37:36,600
thanks for the talk this really

00:37:34,440 --> 00:37:39,000
demystifies react and makes it clear

00:37:36,600 --> 00:37:45,090
this is a state-based view technology

00:37:39,000 --> 00:37:47,280
yep so the previous call a previous

00:37:45,090 --> 00:37:48,840
questioner somewhat got into the issue

00:37:47,280 --> 00:37:50,490
that I wanted to know about which is

00:37:48,840 --> 00:37:52,340
when you're in development you mentioned

00:37:50,490 --> 00:37:55,070
running node

00:37:52,340 --> 00:37:57,920
both as sort of compass like watcher and

00:37:55,070 --> 00:38:00,980
also as a server for development to

00:37:57,920 --> 00:38:05,540
serve up some resources okay Django is

00:38:00,980 --> 00:38:07,850
going to call for in production and

00:38:05,540 --> 00:38:09,410
deployment I gather that you don't do

00:38:07,850 --> 00:38:11,120
that and I just wanted to verify that

00:38:09,410 --> 00:38:15,290
that's true that's exactly right yeah

00:38:11,120 --> 00:38:16,310
okay thank you so cool we have five

00:38:15,290 --> 00:38:17,810
minutes left

00:38:16,310 --> 00:38:19,430
there's any more questions if not I'll

00:38:17,810 --> 00:38:25,280
jump into some stuff that I wanted to

00:38:19,430 --> 00:38:27,410
cover but didn't have time to awesome so

00:38:25,280 --> 00:38:31,520
stuff I wish I had time to cover this is

00:38:27,410 --> 00:38:33,830
also a really good like I don't know

00:38:31,520 --> 00:38:36,980
study guide for what to do next if

00:38:33,830 --> 00:38:39,620
you're going to start doing any react

00:38:36,980 --> 00:38:42,350
development the first thing is the

00:38:39,620 --> 00:38:44,660
component life cycle so inside every

00:38:42,350 --> 00:38:46,940
react component there are seven things

00:38:44,660 --> 00:38:49,610
that can potentially change the props or

00:38:46,940 --> 00:38:52,130
the state of that react component it's

00:38:49,610 --> 00:38:55,160
only seven but knowing what they are

00:38:52,130 --> 00:38:58,220
knowing when they're cold in terms of

00:38:55,160 --> 00:39:00,830
when a component gets instantiated when

00:38:58,220 --> 00:39:03,560
a component gets released they call it

00:39:00,830 --> 00:39:05,390
mounted and unmounted can be really

00:39:03,560 --> 00:39:06,950
helpful I have a slide in this deck that

00:39:05,390 --> 00:39:09,550
you can look at that like does a brief

00:39:06,950 --> 00:39:15,380
description of what each one of them is

00:39:09,550 --> 00:39:19,730
the next thing is flux and Redux so flux

00:39:15,380 --> 00:39:22,730
was the little history react came out

00:39:19,730 --> 00:39:24,320
some people found that managing state in

00:39:22,730 --> 00:39:26,570
between components in react was

00:39:24,320 --> 00:39:30,500
sometimes challenging someone solved it

00:39:26,570 --> 00:39:33,860
with a pattern called flux that let a

00:39:30,500 --> 00:39:36,350
state be stored in one place relative to

00:39:33,860 --> 00:39:38,930
a component and then other components

00:39:36,350 --> 00:39:41,150
lower down the tree would access that

00:39:38,930 --> 00:39:43,340
state indirectly they would access that

00:39:41,150 --> 00:39:45,170
state as property so they couldn't edit

00:39:43,340 --> 00:39:48,500
it directly but then they could pass

00:39:45,170 --> 00:39:50,840
actions back to a flux store that would

00:39:48,500 --> 00:39:52,040
then cause it all to update the problem

00:39:50,840 --> 00:39:53,420
with that is you would have a whole

00:39:52,040 --> 00:39:57,380
bunch of different flux stores at

00:39:53,420 --> 00:40:00,380
different levels of your app Redux which

00:39:57,380 --> 00:40:03,720
is kind of a flux like architecture that

00:40:00,380 --> 00:40:06,359
everyone's moving towards it is

00:40:03,720 --> 00:40:08,040
Fluxx except it says all of your state

00:40:06,359 --> 00:40:10,619
transformations all of your state

00:40:08,040 --> 00:40:14,910
transitions should happen in exactly the

00:40:10,619 --> 00:40:18,330
same place in a Redux store reducer and

00:40:14,910 --> 00:40:21,180
what that lets you do is you have your

00:40:18,330 --> 00:40:24,119
application state all in exactly one

00:40:21,180 --> 00:40:27,180
place as a giant JSON tree basically and

00:40:24,119 --> 00:40:30,090
your application renders from that and

00:40:27,180 --> 00:40:31,890
if you want to change anything in your

00:40:30,090 --> 00:40:33,660
application if you have a button click

00:40:31,890 --> 00:40:36,510
or whatever you don't do it internally

00:40:33,660 --> 00:40:40,770
in the component you dispatch an action

00:40:36,510 --> 00:40:43,950
to your Redux store and what Redux does

00:40:40,770 --> 00:40:47,210
is it preserves your last state but also

00:40:43,950 --> 00:40:50,790
creates a new state for your app to

00:40:47,210 --> 00:40:53,640
transition into what it lets you do is

00:40:50,790 --> 00:40:55,650
debug things a lot more easily because

00:40:53,640 --> 00:40:58,109
you have what your state was and what

00:40:55,650 --> 00:40:59,880
your state now is so anytime you can

00:40:58,109 --> 00:41:02,520
hook it so that anytime an error gets

00:40:59,880 --> 00:41:05,400
thrown for a user that it sends their

00:41:02,520 --> 00:41:08,220
entire state history to a server so that

00:41:05,400 --> 00:41:10,619
you can debug more easily it lets you

00:41:08,220 --> 00:41:12,839
see what your react to what your

00:41:10,619 --> 00:41:17,390
application state is all at one time all

00:41:12,839 --> 00:41:20,130
in one place it's super useful to learn

00:41:17,390 --> 00:41:22,380
react router and Redux router those are

00:41:20,130 --> 00:41:25,260
the two routers that people use for URL

00:41:22,380 --> 00:41:27,390
routing inside of a react app they do

00:41:25,260 --> 00:41:29,550
essentially the same thing react router

00:41:27,390 --> 00:41:32,160
is simple and perfect for most apps

00:41:29,550 --> 00:41:34,349
Redux router add some more functionality

00:41:32,160 --> 00:41:36,690
that react router doesn't have it's

00:41:34,349 --> 00:41:37,830
probably too Company it's not too

00:41:36,690 --> 00:41:39,780
complicated it's probably over

00:41:37,830 --> 00:41:45,089
engineering for most apps but if you

00:41:39,780 --> 00:41:48,540
need it it's great and then yeah I will

00:41:45,089 --> 00:41:51,330
put some gists for authentication and

00:41:48,540 --> 00:41:52,260
access restriction using Django because

00:41:51,330 --> 00:41:54,089
that's something that I kind of

00:41:52,260 --> 00:41:55,910
scratched my head on for a while and

00:41:54,089 --> 00:41:58,619
that too the slide before I publish it

00:41:55,910 --> 00:42:00,720
basically you wrap your components

00:41:58,619 --> 00:42:03,390
inside an authentication wrapper that

00:42:00,720 --> 00:42:05,640
checks whether or not a user is logged

00:42:03,390 --> 00:42:10,230
in prior to rendering the component and

00:42:05,640 --> 00:42:12,810
then yeah cool I'll guess along with

00:42:10,230 --> 00:42:15,119
this learning react isn't hard because

00:42:12,810 --> 00:42:16,680
it's hard it's hard because it includes

00:42:15,119 --> 00:42:18,300
a heck of a lot of patterns

00:42:16,680 --> 00:42:21,210
but you're probably not already familiar

00:42:18,300 --> 00:42:22,440
with if you haven't used it before there

00:42:21,210 --> 00:42:24,329
are a bunch of little things to learn

00:42:22,440 --> 00:42:28,109
that are each easy on their own but

00:42:24,329 --> 00:42:29,609
altogether it makes learning react feel

00:42:28,109 --> 00:42:31,859
overwhelming at the beginning or at

00:42:29,609 --> 00:42:33,630
least it did for me but once you know

00:42:31,859 --> 00:42:35,700
react it can make state management

00:42:33,630 --> 00:42:38,339
inside a complicated app much much

00:42:35,700 --> 00:42:42,210
easier it plays really nice with Jenga

00:42:38,339 --> 00:42:44,430
because it doesn't try to do this stuff

00:42:42,210 --> 00:42:46,440
that Django already does well it tries

00:42:44,430 --> 00:42:48,390
to do one thing manage your templates

00:42:46,440 --> 00:42:48,599
and it does a really really good job at

00:42:48,390 --> 00:42:52,200
that

00:42:48,599 --> 00:42:54,030
so ah like I said feel free to reach out

00:42:52,200 --> 00:42:55,470
to me I'm on Twitter I'm on github and

00:42:54,030 --> 00:42:58,650
I'll be here for the next couple days

00:42:55,470 --> 00:43:01,369
for the for the sprints thank you all so

00:42:58,650 --> 00:43:01,369

YouTube URL: https://www.youtube.com/watch?v=zYHv6U86X0Y


