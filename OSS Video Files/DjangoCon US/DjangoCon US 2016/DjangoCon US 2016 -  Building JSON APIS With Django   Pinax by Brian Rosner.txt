Title: DjangoCon US 2016 -  Building JSON APIS With Django   Pinax by Brian Rosner
Publication date: 2016-08-12
Playlist: DjangoCon US 2016
Description: 
	Building JSON APIS With Django / Pinax by Brian Rosner

Javascript is a language we simply cannot ignore. It isn't just Javascript too. Objective-C, Swift and Java are all languages we are finding we need to work with to meet client expectations about a web app.

The role Django (and Python) plays in this new world is becoming a bit more limited. There are plenty of great efforts to get Python running everywhere, but this talk isn't about any of that. This talk is about building the API all of these frontends need to communicate with to drive persistent and business logic.

pinax-api was originally built to serve the needs of a particular client at Eldarion, but later pulled out as its own app. It provides a simple and modern interface to building an API with Django. At its core, pinax-api leverages the JSON:API spec that was built out of Ember.

The talk will cover:

what is JSON:API
JSON:API in pinax-api
API primitives provided by pinax-pai
how pinax-api leverages Django to its fullest
automatic documentation generation using API Blueprint
why not Django REST Framework?

This talk was presented at: https://2016.djangocon.us/schedule/presentation/45/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:14,389 --> 00:00:19,140
all right I would be talking about

00:00:16,080 --> 00:00:22,710
building a JSON API with Jago and

00:00:19,140 --> 00:00:24,390
connects I like to say building Jacob

00:00:22,710 --> 00:00:25,920
Atkins for the modern world because I

00:00:24,390 --> 00:00:28,260
feel like web application architecture

00:00:25,920 --> 00:00:29,789
has changed so drastically over the last

00:00:28,260 --> 00:00:33,270
several years so many years ago when the

00:00:29,789 --> 00:00:35,430
iPhone was was introduced we had no idea

00:00:33,270 --> 00:00:38,010
what little device could do it what it

00:00:35,430 --> 00:00:39,930
would change our expectations fast

00:00:38,010 --> 00:00:41,850
courts it did it passports of today and

00:00:39,930 --> 00:00:44,610
we have an app for nearly everything

00:00:41,850 --> 00:00:46,649
that we're putting on to the web both in

00:00:44,610 --> 00:00:49,020
a web app is so much more than just the

00:00:46,649 --> 00:00:50,489
traditional Django Model View template

00:00:49,020 --> 00:00:52,430
there's so much more that goes into it

00:00:50,489 --> 00:00:55,020
the view layers becoming more complex

00:00:52,430 --> 00:00:57,210
and we need to implement api's to let

00:00:55,020 --> 00:01:00,559
the smarter richer clients be able to

00:00:57,210 --> 00:01:02,430
interact with our data so before I get

00:01:00,559 --> 00:01:06,150
before I get started let me talk a

00:01:02,430 --> 00:01:09,030
little bit about myself here my name is

00:01:06,150 --> 00:01:11,610
Brian Rosner I lived in Denver Colorado

00:01:09,030 --> 00:01:13,729
with my wife and we have a baby due in

00:01:11,610 --> 00:01:13,729
October

00:01:15,830 --> 00:01:21,990
I work as a chief architect at all

00:01:18,720 --> 00:01:24,920
darien l darien is a web agency where we

00:01:21,990 --> 00:01:28,799
build web apps using Django and connects

00:01:24,920 --> 00:01:30,119
I work on pin ax at work I have the

00:01:28,799 --> 00:01:32,070
delivers a bill work on connects but

00:01:30,119 --> 00:01:35,189
also my spare time I'll speak a little

00:01:32,070 --> 00:01:38,310
more about connects in a moment l darien

00:01:35,189 --> 00:01:40,979
also recently open sourced a passive

00:01:38,310 --> 00:01:42,780
platform as-a-service named Cal it's a

00:01:40,979 --> 00:01:45,869
foundation for our commercial l variant

00:01:42,780 --> 00:01:48,180
cloud has which was originally named

00:01:45,869 --> 00:01:50,970
Gondor and quell it selfies as much as

00:01:48,180 --> 00:01:52,470
what i'm talking about here today and it

00:01:50,970 --> 00:01:56,790
also helps drive the development for it

00:01:52,470 --> 00:01:59,420
unpacks and in the api work but enough

00:01:56,790 --> 00:02:01,770
about me i'm here to talk about 10x API

00:01:59,420 --> 00:02:02,740
Penix API was built out of some

00:02:01,770 --> 00:02:04,990
requirements we have

00:02:02,740 --> 00:02:09,250
or a development project we had a tall

00:02:04,990 --> 00:02:11,620
variant the goal of Connect CPI was is

00:02:09,250 --> 00:02:15,640
to provide a few primitives for building

00:02:11,620 --> 00:02:16,660
a RESTful API using Django and using

00:02:15,640 --> 00:02:17,230
Django and pin acts that would be

00:02:16,660 --> 00:02:19,690
implemented

00:02:17,230 --> 00:02:21,580
hopefully these sorts of hska that we've

00:02:19,690 --> 00:02:24,100
built for these apps are going to be

00:02:21,580 --> 00:02:27,040
used without throughout the whole pin

00:02:24,100 --> 00:02:28,750
apps ecosystem before I get too far into

00:02:27,040 --> 00:02:35,140
Independence API I'm going to step back

00:02:28,750 --> 00:02:37,230
and talk about connects itself so px is

00:02:35,140 --> 00:02:42,519
an open source platform built on Django

00:02:37,230 --> 00:02:44,140
it it has a standard project layout

00:02:42,519 --> 00:02:46,900
which which if you're familiar with

00:02:44,140 --> 00:02:48,310
Django as we all are he would do a J go

00:02:46,900 --> 00:02:50,920
admin a start project and you get a

00:02:48,310 --> 00:02:53,739
project and that has some conventions

00:02:50,920 --> 00:02:55,900
that are already baked into it so packs

00:02:53,739 --> 00:02:57,940
kind of builds upon that and provides

00:02:55,900 --> 00:02:59,980
even more convention around things that

00:02:57,940 --> 00:03:01,360
are more specific such as through our

00:02:59,980 --> 00:03:04,090
starter projects we have various other

00:03:01,360 --> 00:03:05,920
projects like a couch social project

00:03:04,090 --> 00:03:08,470
that kind of are more tailored towards a

00:03:05,920 --> 00:03:13,120
specific set of requirements you may

00:03:08,470 --> 00:03:14,829
have for building your site and also

00:03:13,120 --> 00:03:16,480
these starter projects are made up of

00:03:14,829 --> 00:03:17,680
reusable apps there's a lot of reusable

00:03:16,480 --> 00:03:19,870
apps that we have in the Pentax

00:03:17,680 --> 00:03:20,829
ecosystem and they're all used as the

00:03:19,870 --> 00:03:22,570
building blocks of these starter

00:03:20,829 --> 00:03:24,459
projects actually implement the

00:03:22,570 --> 00:03:26,079
functionalities that are there and then

00:03:24,459 --> 00:03:27,579
default templates there are a lot of

00:03:26,079 --> 00:03:29,049
default templates that we provide out of

00:03:27,579 --> 00:03:30,670
the box with and actually you don't have

00:03:29,049 --> 00:03:33,340
to worry about spending time well you

00:03:30,670 --> 00:03:36,280
know various views and the way that they

00:03:33,340 --> 00:03:38,320
look you can you can rely on some like

00:03:36,280 --> 00:03:40,239
bootstrap or other CSS frameworks to

00:03:38,320 --> 00:03:42,519
actually do that stuff for you and you

00:03:40,239 --> 00:03:46,359
can just focus on on the stuff that

00:03:42,519 --> 00:03:48,430
makes your site different it's a like I

00:03:46,359 --> 00:03:50,440
mentioned earlier the reasoning for px

00:03:48,430 --> 00:03:52,660
API was due to requirements of an old

00:03:50,440 --> 00:03:54,549
area development project during our

00:03:52,660 --> 00:03:58,239
discovery and research phase we came

00:03:54,549 --> 00:04:00,040
across the JSON API specification the

00:03:58,239 --> 00:04:02,980
specification provided a lot of clarity

00:04:00,040 --> 00:04:05,980
on building api's it specifically rust

00:04:02,980 --> 00:04:07,260
restful api it eliminated all the bike

00:04:05,980 --> 00:04:09,500
shedding that was

00:04:07,260 --> 00:04:12,209
that came about with how is the JSON

00:04:09,500 --> 00:04:13,980
payload structured because you can go on

00:04:12,209 --> 00:04:15,720
and on days about whether or not the key

00:04:13,980 --> 00:04:17,150
is here or there or how it's really

00:04:15,720 --> 00:04:26,220
structured and this just takes care of

00:04:17,150 --> 00:04:27,870
all of that Jason Jason API itself was a

00:04:26,220 --> 00:04:32,610
big reason why we decided to build

00:04:27,870 --> 00:04:34,680
parents API daniel roebuck is the

00:04:32,610 --> 00:04:38,660
obvious obvious choice is a very well

00:04:34,680 --> 00:04:41,490
structured very well architected app and

00:04:38,660 --> 00:04:42,600
it does it didn't quite work well when I

00:04:41,490 --> 00:04:44,850
looked at a lot of the different

00:04:42,600 --> 00:04:48,479
resources that are available to connect

00:04:44,850 --> 00:04:50,789
Jason API to Django rest framework and

00:04:48,479 --> 00:04:55,410
be able to take advantage of all of the

00:04:50,789 --> 00:04:56,490
components of JSON API such as doesn't

00:04:55,410 --> 00:04:58,470
relationship to something I'll go a

00:04:56,490 --> 00:05:00,060
little more into that and I do need to

00:04:58,470 --> 00:05:02,729
admit there's a little there's a little

00:05:00,060 --> 00:05:04,830
bit of a hint of not invented here

00:05:02,729 --> 00:05:06,960
syndrome but I justify it because we

00:05:04,830 --> 00:05:10,530
wanted to take full advantage of the

00:05:06,960 --> 00:05:12,090
spec and marry it with an axe in some

00:05:10,530 --> 00:05:13,560
very specific way is that really only

00:05:12,090 --> 00:05:19,560
the bill from the ground up approach was

00:05:13,560 --> 00:05:22,530
going to be able to do so this is an

00:05:19,560 --> 00:05:26,370
actual flow chart that we had with the

00:05:22,530 --> 00:05:28,530
development client at all barian I say

00:05:26,370 --> 00:05:30,389
this is an increasingly common modern

00:05:28,530 --> 00:05:32,010
application architecture

00:05:30,389 --> 00:05:36,210
logged you through the experience that

00:05:32,010 --> 00:05:38,310
I've had with regard to search about

00:05:36,210 --> 00:05:40,229
actually build not fir for our customers

00:05:38,310 --> 00:05:42,510
at the top there you'd have to be on the

00:05:40,229 --> 00:05:49,410
database where all your data lives and

00:05:42,510 --> 00:05:50,940
it is it's being exposed as an API and

00:05:49,410 --> 00:05:53,159
traditionally the the view of the

00:05:50,940 --> 00:05:54,539
application is that a lot of this time a

00:05:53,159 --> 00:05:58,110
lot of times this is all kind of in one

00:05:54,539 --> 00:05:59,699
in one code base in one one process but

00:05:58,110 --> 00:06:00,780
but that's that's changing quite a bit

00:05:59,699 --> 00:06:02,729
because a lot of times you end up

00:06:00,780 --> 00:06:04,470
needing to actually split off these

00:06:02,729 --> 00:06:05,370
front ends as they're there into their

00:06:04,470 --> 00:06:07,470
own project because you need to

00:06:05,370 --> 00:06:09,120
implement in a different language and in

00:06:07,470 --> 00:06:11,190
this particular case it was because we

00:06:09,120 --> 00:06:13,169
need to implement these front ends

00:06:11,190 --> 00:06:17,909
specifically the the shop front end in

00:06:13,169 --> 00:06:19,380
in node react yes and we'd us so looking

00:06:17,909 --> 00:06:21,000
towards the future of a prod

00:06:19,380 --> 00:06:22,800
like this it isn't going to be a big

00:06:21,000 --> 00:06:25,200
surprise when the client comes up and

00:06:22,800 --> 00:06:26,070
says we need to add in iOS and Android

00:06:25,200 --> 00:06:27,270
app today

00:06:26,070 --> 00:06:34,380
it just becomes a new front-end that's

00:06:27,270 --> 00:06:36,860
able to communicate with the API so a

00:06:34,380 --> 00:06:40,080
little bit more about JSON API itself

00:06:36,860 --> 00:06:41,190
there's the the JSON API org is the URL

00:06:40,080 --> 00:06:43,020
that actually talks about the

00:06:41,190 --> 00:06:45,510
specification itself there's gonna be a

00:06:43,020 --> 00:06:48,240
lot more in-depth details available

00:06:45,510 --> 00:06:50,940
there that I'm not going to get into

00:06:48,240 --> 00:06:55,770
here the the way that I look at the

00:06:50,940 --> 00:06:57,840
specification is as an object graph the

00:06:55,770 --> 00:06:58,890
object the object graph is naturally as

00:06:57,840 --> 00:07:01,260
a developer you need to be creating

00:06:58,890 --> 00:07:02,610
these objects in your applications

00:07:01,260 --> 00:07:03,960
through through the creation of your

00:07:02,610 --> 00:07:07,950
models that you create your Jenga

00:07:03,960 --> 00:07:10,890
project etc my specification is

00:07:07,950 --> 00:07:12,780
optimized it's optimized in a way that

00:07:10,890 --> 00:07:14,460
creates the efficient writes and you can

00:07:12,780 --> 00:07:17,580
also design it in a way to have really

00:07:14,460 --> 00:07:19,440
efficient I'm sorry rich said the

00:07:17,580 --> 00:07:20,730
backwards yeah enables the efficient

00:07:19,440 --> 00:07:22,650
reads when you keep resent in a way that

00:07:20,730 --> 00:07:24,710
makes it great for efficient rice as

00:07:22,650 --> 00:07:28,350
well for example let's say you have a

00:07:24,710 --> 00:07:29,850
blog post and the blog post is being

00:07:28,350 --> 00:07:31,860
requested by your front end in your

00:07:29,850 --> 00:07:33,420
front end actually needs to display the

00:07:31,860 --> 00:07:34,590
comments as well well that could

00:07:33,420 --> 00:07:38,550
actually be turned into two different

00:07:34,590 --> 00:07:41,610
HTTP requests but that's gonna increase

00:07:38,550 --> 00:07:43,170
latency for for your front ends so the

00:07:41,610 --> 00:07:45,930
way that JSON API works is that you can

00:07:43,170 --> 00:07:48,540
actually use relationships and compound

00:07:45,930 --> 00:07:51,030
documents to say I want the blog post

00:07:48,540 --> 00:07:53,250
but I also want its comments or I also

00:07:51,030 --> 00:07:54,330
want its author all on the same payload

00:07:53,250 --> 00:08:01,850
so you don't have to go ask for this

00:07:54,330 --> 00:08:05,340
information over and over again and also

00:08:01,850 --> 00:08:07,620
JSON API is it's registered with the the

00:08:05,340 --> 00:08:09,360
internet assigned numbers authority so

00:08:07,620 --> 00:08:11,280
this actually available was a specific

00:08:09,360 --> 00:08:18,030
content type application the end

00:08:11,280 --> 00:08:19,920
behavior I plus JSON so some of these

00:08:18,030 --> 00:08:23,490
design influences that I had when I was

00:08:19,920 --> 00:08:24,780
building connects API it was what's

00:08:23,490 --> 00:08:26,930
kubernetes kubernetes wasn't something

00:08:24,780 --> 00:08:29,990
that upholds something specifically from

00:08:26,930 --> 00:08:32,300
but it has it has a really great HT

00:08:29,990 --> 00:08:34,550
API that I used as the influence the

00:08:32,300 --> 00:08:37,340
basis of kind of the thinking that I had

00:08:34,550 --> 00:08:39,350
with regard to API is in general Django

00:08:37,340 --> 00:08:41,120
is obviously a big influences I want to

00:08:39,350 --> 00:08:44,930
make sure that connects API was

00:08:41,120 --> 00:08:46,070
something that that work really well Jo

00:08:44,930 --> 00:08:50,630
because that's I think that's really

00:08:46,070 --> 00:08:53,720
important and Jane Rimmer also was a big

00:08:50,630 --> 00:08:54,950
influence in the way that that connects

00:08:53,720 --> 00:08:56,360
API came about because some of the

00:08:54,950 --> 00:08:58,610
architectural picks that are available

00:08:56,360 --> 00:09:03,530
the way that it's designed like you know

00:08:58,610 --> 00:09:04,460
in this case it's a just a copy so is I

00:09:03,530 --> 00:09:07,250
think a perfect example of that

00:09:04,460 --> 00:09:08,750
yes as well with the ecosystem because

00:09:07,250 --> 00:09:10,820
of these applications are changing so

00:09:08,750 --> 00:09:13,490
drastically with requirements we need to

00:09:10,820 --> 00:09:14,480
implement I wanted to make sure that

00:09:13,490 --> 00:09:16,400
this is something that works well for

00:09:14,480 --> 00:09:21,500
that because that's what Kinect is

00:09:16,400 --> 00:09:23,570
trying to solve as well so that gives a

00:09:21,500 --> 00:09:24,980
little more details of the specific API

00:09:23,570 --> 00:09:29,360
primitives that are available connects

00:09:24,980 --> 00:09:30,860
API you have the API resource when the

00:09:29,360 --> 00:09:34,180
resource is the representation of the

00:09:30,860 --> 00:09:37,400
data to the outside world relationships

00:09:34,180 --> 00:09:40,640
which link made it together for example

00:09:37,400 --> 00:09:43,750
an author to a blog post an endpoint set

00:09:40,640 --> 00:09:46,280
which is a derivative of a Jane Doe view

00:09:43,750 --> 00:09:48,220
jingo view class different HTTP methods

00:09:46,280 --> 00:09:54,110
are mapped to different instance methods

00:09:48,220 --> 00:09:56,600
forming a rest more restful interface so

00:09:54,110 --> 00:10:00,710
a little more about an API resource in

00:09:56,600 --> 00:10:02,060
particular a Pentax CPR resource you can

00:10:00,710 --> 00:10:04,100
think of it as comical jingle form but

00:10:02,060 --> 00:10:05,900
without any validation

00:10:04,100 --> 00:10:08,060
this is really important to think about

00:10:05,900 --> 00:10:09,080
in this lake is do you think well if the

00:10:08,060 --> 00:10:10,430
data is there that's where we need

00:10:09,080 --> 00:10:14,120
evaluated because you're dealing with

00:10:10,430 --> 00:10:15,980
untrusted input it's the way that this

00:10:14,120 --> 00:10:18,350
is designed is that the API resource is

00:10:15,980 --> 00:10:21,050
actually completely agnostic to where

00:10:18,350 --> 00:10:23,390
the data is sourced and then there's

00:10:21,050 --> 00:10:24,440
ultimately helpers that are used in the

00:10:23,390 --> 00:10:26,300
endpoints which will go over to here a

00:10:24,440 --> 00:10:30,740
little bit that links it to link it to

00:10:26,300 --> 00:10:34,820
the datasets so the reason why this is

00:10:30,740 --> 00:10:38,420
done this way is for portability so for

00:10:34,820 --> 00:10:39,830
example that so for example this here

00:10:38,420 --> 00:10:40,420
doesn't necessarily need to be tied

00:10:39,830 --> 00:10:42,970
specifically

00:10:40,420 --> 00:10:44,950
to a data source it's tied to the

00:10:42,970 --> 00:10:46,329
representation of data which commits

00:10:44,950 --> 00:10:48,160
which allows us to be portable and then

00:10:46,329 --> 00:10:51,130
used inside that happen client layer as

00:10:48,160 --> 00:10:52,990
well and some particular design

00:10:51,130 --> 00:10:55,089
decisions that were made around this was

00:10:52,990 --> 00:10:56,800
that you'd be able to encapsulate this

00:10:55,089 --> 00:10:57,579
in this own project that's separated

00:10:56,800 --> 00:10:59,620
from the project that actually

00:10:57,579 --> 00:11:01,209
implements how to get this data and then

00:10:59,620 --> 00:11:03,730
that can also be used as your client

00:11:01,209 --> 00:11:07,899
that talks back to your API that keeps

00:11:03,730 --> 00:11:08,980
it all together nicely the model the

00:11:07,899 --> 00:11:10,810
model later will implement your

00:11:08,980 --> 00:11:13,690
validation so in this case we have an

00:11:10,810 --> 00:11:16,350
author which is just a jingo jango model

00:11:13,690 --> 00:11:18,459
you would build dissin Jango the

00:11:16,350 --> 00:11:19,899
validation lives there using genome

00:11:18,459 --> 00:11:21,399
model validation so all your validation

00:11:19,899 --> 00:11:24,430
would already be capsulated through your

00:11:21,399 --> 00:11:25,959
model and then the finnex api will call

00:11:24,430 --> 00:11:27,760
right into that the model could actually

00:11:25,959 --> 00:11:29,110
even be a debt doesn't even need to be a

00:11:27,760 --> 00:11:33,690
django model it could be anything that

00:11:29,110 --> 00:11:33,690
you can pull data from the data into

00:11:34,589 --> 00:11:43,630
FedEx API uses relationship relationship

00:11:39,160 --> 00:11:46,630
information to to serialize leakage so a

00:11:43,630 --> 00:11:51,220
relationship defines how you link data

00:11:46,630 --> 00:11:53,279
together we have here the same resource

00:11:51,220 --> 00:11:56,079
that actually adds in the relationship

00:11:53,279 --> 00:11:57,970
information here so relationship can

00:11:56,079 --> 00:11:59,860
either be a non collection which would

00:11:57,970 --> 00:12:03,970
be a minute to one maybe be many many

00:11:59,860 --> 00:12:05,529
authors to one publisher or it could be

00:12:03,970 --> 00:12:08,560
a collection which in this case would be

00:12:05,529 --> 00:12:11,800
an author has posts and the post is

00:12:08,560 --> 00:12:12,940
being defined here using so the string

00:12:11,800 --> 00:12:15,640
values that are there is the first

00:12:12,940 --> 00:12:17,199
argument are actually the API type that

00:12:15,640 --> 00:12:19,959
are all being registered as you create

00:12:17,199 --> 00:12:22,060
your resources through the API dot

00:12:19,959 --> 00:12:23,230
register and then it's able to kind of

00:12:22,060 --> 00:12:24,899
fill up this graph and it will know how

00:12:23,230 --> 00:12:33,300
to serialize it once it comes time to

00:12:24,899 --> 00:12:38,230
serialize the data an API endpoint set

00:12:33,300 --> 00:12:40,959
an API endpoint set is kind of what

00:12:38,230 --> 00:12:43,180
binds the resources to these methods so

00:12:40,959 --> 00:12:46,000
when you perform a get it's gonna get

00:12:43,180 --> 00:12:47,260
translated into in the next API into a

00:12:46,000 --> 00:12:49,170
retrieve method where you would actually

00:12:47,260 --> 00:12:52,829
implement the logical so here a second

00:12:49,170 --> 00:12:55,510
an API resource endpoint set is actually

00:12:52,829 --> 00:12:59,440
derives from the endpoint set itself and

00:12:55,510 --> 00:13:01,750
that's largely what you use to create

00:12:59,440 --> 00:13:06,190
the endpoint set that link the the

00:13:01,750 --> 00:13:08,010
resource to the to the endpoint set all

00:13:06,190 --> 00:13:12,370
of the URLs are automatically generated

00:13:08,010 --> 00:13:14,649
and it provides simple validation a

00:13:12,370 --> 00:13:15,939
simple validation primitive to actually

00:13:14,649 --> 00:13:21,100
connect the data to the resource and

00:13:15,939 --> 00:13:23,740
I'll show here this is the first part of

00:13:21,100 --> 00:13:26,529
it cuz this can get really long your

00:13:23,740 --> 00:13:29,199
actual resource a little bit of an

00:13:26,529 --> 00:13:32,560
author in this case so here we actually

00:13:29,199 --> 00:13:37,089
are importing the the resource we are

00:13:32,560 --> 00:13:39,130
binding the endpoint set to the to the

00:13:37,089 --> 00:13:40,600
resource the author resource and this is

00:13:39,130 --> 00:13:44,019
where you define the kind of the basic

00:13:40,600 --> 00:13:46,180
bits of the of the author and how it's

00:13:44,019 --> 00:13:48,519
gonna hook up into your URL so there's a

00:13:46,180 --> 00:13:50,500
base name which is just largely it's

00:13:48,519 --> 00:13:53,680
just the singular name of the of the

00:13:50,500 --> 00:13:55,269
model or whatever the data model is and

00:13:53,680 --> 00:13:56,800
then the basic reg acts which actually

00:13:55,269 --> 00:13:59,680
defines kind of where it's going to live

00:13:56,800 --> 00:14:01,660
in your in your URL namespace but it's

00:13:59,680 --> 00:14:03,670
not at the collection level and then the

00:14:01,660 --> 00:14:05,560
look of actually defines how oh look for

00:14:03,670 --> 00:14:07,269
the individual object that's inside that

00:14:05,560 --> 00:14:10,060
inside that collection so in this case

00:14:07,269 --> 00:14:12,100
the field is a PK so you actually kind

00:14:10,060 --> 00:14:14,079
of think of a URL comma it kind of all

00:14:12,100 --> 00:14:15,670
just this all kind of gets compiled down

00:14:14,079 --> 00:14:19,829
into the single reg X which would be

00:14:15,670 --> 00:14:22,839
authors with the PK be mapped out of it

00:14:19,829 --> 00:14:25,390
and then these are the methods that you

00:14:22,839 --> 00:14:29,680
would define in your endpoint set to

00:14:25,390 --> 00:14:31,569
actually link everything all together so

00:14:29,680 --> 00:14:34,449
you'd have a list retrieve create update

00:14:31,569 --> 00:14:36,670
destroy which roughly map into a get on

00:14:34,449 --> 00:14:39,040
the collection they get on the on the

00:14:36,670 --> 00:14:44,709
individual endpoint or the individual

00:14:39,040 --> 00:14:46,510
object a post on the collection and then

00:14:44,709 --> 00:14:47,890
a put on the individual object and

00:14:46,510 --> 00:14:50,439
ultimately a delete on the individual

00:14:47,890 --> 00:14:52,720
object and the validation primitive

00:14:50,439 --> 00:14:55,240
inside of create and update is through

00:14:52,720 --> 00:14:58,120
is through the validate method which

00:14:55,240 --> 00:15:00,699
actually just says on this particular

00:14:58,120 --> 00:15:01,220
resource class I'm gonna validate this

00:15:00,699 --> 00:15:03,199
data

00:15:01,220 --> 00:15:05,660
asses in the resource actually defers it

00:15:03,199 --> 00:15:06,860
off to whatever the model is and you can

00:15:05,660 --> 00:15:08,480
actually write whatever validation logic

00:15:06,860 --> 00:15:11,000
you want in that with statement and

00:15:08,480 --> 00:15:12,500
it'll handle all the API errors that

00:15:11,000 --> 00:15:15,170
come right back out of that so for

00:15:12,500 --> 00:15:16,370
example if the name needed to have the

00:15:15,170 --> 00:15:18,410
letter A in it or whatever the

00:15:16,370 --> 00:15:21,050
requirements may be it can raise the

00:15:18,410 --> 00:15:23,240
validation air in the in the context

00:15:21,050 --> 00:15:25,189
Angela taken care of turning that into

00:15:23,240 --> 00:15:26,899
your API airs for you you don't have to

00:15:25,189 --> 00:15:27,949
write you need that logic at all that

00:15:26,899 --> 00:15:33,649
didn't the same applies for the other

00:15:27,949 --> 00:15:35,660
thing there's a lot of other features

00:15:33,649 --> 00:15:37,189
that are available in the pin ax API

00:15:35,660 --> 00:15:40,790
that I'm not gonna be able to get into a

00:15:37,189 --> 00:15:43,149
lot of the details of authentication is

00:15:40,790 --> 00:15:45,139
one you know are you who you say you are

00:15:43,149 --> 00:15:46,670
permissions can you access a given

00:15:45,139 --> 00:15:49,250
resource clues are all built into the

00:15:46,670 --> 00:15:51,500
independent API that can help those

00:15:49,250 --> 00:15:53,360
individual methods ensure that the right

00:15:51,500 --> 00:15:56,569
person is in the person that you can

00:15:53,360 --> 00:15:58,639
trust is actually accessing them and

00:15:56,569 --> 00:16:03,319
then the other big bit of the next API

00:15:58,639 --> 00:16:04,310
that is really helpful is using API

00:16:03,319 --> 00:16:08,689
blueprint which is actually a

00:16:04,310 --> 00:16:10,910
specification for writing documentation

00:16:08,689 --> 00:16:12,559
that's Miss machine readable is

00:16:10,910 --> 00:16:14,360
automatically generated through all of

00:16:12,559 --> 00:16:17,540
your endpoint sets and then you can

00:16:14,360 --> 00:16:19,309
actually define specific customizations

00:16:17,540 --> 00:16:20,720
to that documentation and what's nice

00:16:19,309 --> 00:16:22,730
about using leveraging if you have

00:16:20,720 --> 00:16:24,949
blueprints is that you have the ability

00:16:22,730 --> 00:16:29,509
to leverage all the tooling that's

00:16:24,949 --> 00:16:30,920
available and it's ecosystem so one

00:16:29,509 --> 00:16:32,089
really neat thing is that you can

00:16:30,920 --> 00:16:33,139
actually write out your connect say if

00:16:32,089 --> 00:16:35,509
you use it you can write it read guide

00:16:33,139 --> 00:16:37,490
using Pentax api and then use one of the

00:16:35,509 --> 00:16:40,160
tooling that enables you to actually

00:16:37,490 --> 00:16:41,509
generate a client without having to

00:16:40,160 --> 00:16:43,790
actually write any client code and it

00:16:41,509 --> 00:16:45,980
can be in any language because they all

00:16:43,790 --> 00:16:49,069
the tooling in their ecosystem supports

00:16:45,980 --> 00:16:50,269
about ten different languages and that's

00:16:49,069 --> 00:16:53,120
it's all available at us at an

00:16:50,269 --> 00:16:57,399
individual endpoint that you could hook

00:16:53,120 --> 00:16:59,899
up and that is everything that I have

00:16:57,399 --> 00:17:02,240
you can actually look at connects api's

00:16:59,899 --> 00:17:02,870
codes on github you know column slash

00:17:02,240 --> 00:17:04,909
pin axe

00:17:02,870 --> 00:17:06,339
slash panic so yeah there's a ton of

00:17:04,909 --> 00:17:08,470
documentation there that goes

00:17:06,339 --> 00:17:09,789
a really great detail on how to actually

00:17:08,470 --> 00:17:11,819
do a lot of the stuff that I've

00:17:09,789 --> 00:17:15,850
described here with a lot of examples

00:17:11,819 --> 00:17:17,350
and my website and my Twitter and if you

00:17:15,850 --> 00:17:18,189
need any help I can either stuff you can

00:17:17,350 --> 00:17:21,429
check out

00:17:18,189 --> 00:17:23,679
connexes slack in youtube or even look

00:17:21,429 --> 00:17:26,049
it up right on the panache project how

00:17:23,679 --> 00:17:29,470
much you can get there through the get

00:17:26,049 --> 00:17:32,320
up your elbow if there's any questions

00:17:29,470 --> 00:17:34,090
we have the user we have time for a few

00:17:32,320 --> 00:17:37,360
questions I ask you to wait for the

00:17:34,090 --> 00:17:39,340
microphone so we can pick it up so I'm

00:17:37,360 --> 00:17:41,440
not completely sure where if this

00:17:39,340 --> 00:17:44,320
question is valid but I'm wondering how

00:17:41,440 --> 00:17:49,330
does this complement or differentiate

00:17:44,320 --> 00:17:53,919
from json-rpc so JSON API versus JSON

00:17:49,330 --> 00:17:57,279
RPC I haven't seen JSON RPC but in that

00:17:53,919 --> 00:17:59,919
particular case would be an RPC or a

00:17:57,279 --> 00:18:03,730
remote procedure call that would be done

00:17:59,919 --> 00:18:05,289
more about actually serializing the the

00:18:03,730 --> 00:18:07,960
actual method calls that would translate

00:18:05,289 --> 00:18:10,409
into something specifically it would

00:18:07,960 --> 00:18:12,640
already be written in your Python code

00:18:10,409 --> 00:18:15,580
this is actually kind of providing a

00:18:12,640 --> 00:18:17,380
layer between how you actually call into

00:18:15,580 --> 00:18:18,279
into this versus the code to your

00:18:17,380 --> 00:18:19,630
writing so something that would work

00:18:18,279 --> 00:18:23,399
really well that would fit inside the

00:18:19,630 --> 00:18:23,399
Django instead of a jingle project

00:18:30,990 --> 00:18:46,980
oh hi um so my question is can you

00:18:43,320 --> 00:18:49,940
provide completed samples or point me to

00:18:46,980 --> 00:18:53,610
a lane or something the right time

00:18:49,940 --> 00:18:58,289
really compared peanuts API I can shrink

00:18:53,610 --> 00:19:01,799
or explain work or provide real real

00:18:58,289 --> 00:19:03,840
cases going on you when you see Yangon

00:19:01,799 --> 00:19:05,059
explain why they say it doesn't work for

00:19:03,840 --> 00:19:07,950
me

00:19:05,059 --> 00:19:09,390
yeah so our documentation actually has a

00:19:07,950 --> 00:19:11,490
lot of examples of how you might

00:19:09,390 --> 00:19:14,580
integrate with with real genome with

00:19:11,490 --> 00:19:18,240
real Jango models like blog posts and

00:19:14,580 --> 00:19:19,770
stuff I'm not sure if how I would look

00:19:18,240 --> 00:19:21,510
compared to Ginga rest frame work but

00:19:19,770 --> 00:19:23,370
you can see a lot of the things like I

00:19:21,510 --> 00:19:26,039
need to accomplish this one thing let's

00:19:23,370 --> 00:19:27,840
say for example I need to expose blog

00:19:26,039 --> 00:19:30,750
posts you can you could see how that

00:19:27,840 --> 00:19:32,880
would look and how it all connects and

00:19:30,750 --> 00:19:34,860
then you can easily hit it using just

00:19:32,880 --> 00:19:36,419
some curl or whatever to kind of see

00:19:34,860 --> 00:19:39,630
what it looks like when that data comes

00:19:36,419 --> 00:19:41,070
back the JSON API the specification

00:19:39,630 --> 00:19:43,020
their website has a ton of information

00:19:41,070 --> 00:19:44,520
about exactly the way that data is going

00:19:43,020 --> 00:19:46,049
to come back and how you how you would

00:19:44,520 --> 00:19:49,020
expect it and how you might implement a

00:19:46,049 --> 00:19:51,809
client that actually does interact with

00:19:49,020 --> 00:19:53,279
that API there's a lot of because it's

00:19:51,809 --> 00:19:55,289
built off a specification there's a lot

00:19:53,279 --> 00:19:57,120
of other clients already built that know

00:19:55,289 --> 00:19:59,700
how to speak that through that

00:19:57,120 --> 00:20:08,669
specification who's that mister your

00:19:59,700 --> 00:20:11,549
question briefly they've got a spring

00:20:08,669 --> 00:20:15,690
we're actually added JSON API support in

00:20:11,549 --> 00:20:17,970
the last session today 33.4 so that's

00:20:15,690 --> 00:20:20,880
why I'm asking about the concrete

00:20:17,970 --> 00:20:22,830
difference yes I was I was here we

00:20:20,880 --> 00:20:24,299
started this project back in January so

00:20:22,830 --> 00:20:26,789
at the time there wasn't much other than

00:20:24,299 --> 00:20:28,380
some for matters that were that were

00:20:26,789 --> 00:20:29,730
third-party that you can install with

00:20:28,380 --> 00:20:32,490
Django rest framework that will actually

00:20:29,730 --> 00:20:34,020
take the already serialize format of

00:20:32,490 --> 00:20:36,510
Django rest framework and translate that

00:20:34,020 --> 00:20:38,929
into JSON API so you can use any clients

00:20:36,510 --> 00:20:41,070
that I already have it whereas though

00:20:38,929 --> 00:20:42,510
the point of this one was to hopefully

00:20:41,070 --> 00:20:43,380
get something that was actually native

00:20:42,510 --> 00:20:44,850
to JSON API

00:20:43,380 --> 00:20:47,070
was able to take advantage of all of the

00:20:44,850 --> 00:20:48,660
bits of the specification such as

00:20:47,070 --> 00:20:51,870
relationships in the compound documents

00:20:48,660 --> 00:20:52,920
and all that kind of stuff so I'm not

00:20:51,870 --> 00:20:55,170
sure I've been seeing the stuff that

00:20:52,920 --> 00:20:56,540
they put into general remark recently so

00:20:55,170 --> 00:21:01,490
I'd have to look at that

00:20:56,540 --> 00:21:01,490

YouTube URL: https://www.youtube.com/watch?v=j3sFrY1Fm7M


