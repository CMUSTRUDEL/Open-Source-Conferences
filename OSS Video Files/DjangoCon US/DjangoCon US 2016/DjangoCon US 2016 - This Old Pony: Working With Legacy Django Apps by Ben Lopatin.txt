Title: DjangoCon US 2016 - This Old Pony: Working With Legacy Django Apps by Ben Lopatin
Publication date: 2016-08-22
Playlist: DjangoCon US 2016
Description: 
	This Old Pony: Working With Legacy Django Apps by Ben Lopatin

Legacy software is software that already exists. It may be a project you've inherited after joining a team, a new client's application, or something you wrote last year, or last month. Most software developers seem to prefer "greenfield" development, where you get to start from a clean slate. The reality is that there's a lot of "brownfield" development out there, that it rarely makes sense to throw away working software, and we can control the experience quite a bit to make our lives, and the software, better. If you haven't worked with legacy software chances are pretty good you will.

We'll first walk through what "legacy" means, and what this looks like specifically for Django developers and Django projects. We'll also cover some of the scenarios in which you may find yourself working with legacy codebases. This includes the types of issues you'll be presented with, both generally and specific to Django.

What do we mean by legacy code?
What does a legacy Django project look like?
What kinds of issues will you need to deal with?
How to approach the codebase
Tools for working with your new legacy codebase
Introducing or fixing tests
Common issues to look for and how to solve them
Legacy deployment processes and other scary nightmares
More features! Balancing business needs and "perfect" code
Deciding when to upgrade Django and other dependency versions, and how to do this

This talk was presented at: https://2016.djangocon.us/schedule/presentation/31/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:14,450 --> 00:00:22,619
Mic Check now it sounds good all right

00:00:17,510 --> 00:00:24,529
great so uh again I'm a co-founder and

00:00:22,619 --> 00:00:27,060
full developer at welfare interactive

00:00:24,529 --> 00:00:29,390
I'm 50% of the company we're based in

00:00:27,060 --> 00:00:32,460
the DC area I'm out of upstate New York

00:00:29,390 --> 00:00:33,870
and I am been elope pretty much

00:00:32,460 --> 00:00:35,460
everywhere on the internet and that's

00:00:33,870 --> 00:00:37,440
also what I look like pretty much

00:00:35,460 --> 00:00:40,829
everywhere on the internet I have for

00:00:37,440 --> 00:00:42,930
the last decade plus so today we're

00:00:40,829 --> 00:00:45,539
going to talk about legacy software

00:00:42,930 --> 00:00:47,700
legacy Django specifically and I want

00:00:45,539 --> 00:00:49,110
you to think for a moment about legacy

00:00:47,700 --> 00:00:51,629
software what do you picture I want you

00:00:49,110 --> 00:00:56,100
to picture something in your head might

00:00:51,629 --> 00:00:59,940
look a little bit like this but the mind

00:00:56,100 --> 00:01:01,800
does wander these aren't fire and

00:00:59,940 --> 00:01:06,420
there's something else you know if it

00:01:01,800 --> 00:01:07,830
conjures up all kinds of things note

00:01:06,420 --> 00:01:12,180
said well that wasn't also a pony in

00:01:07,830 --> 00:01:14,549
there like a slide so here you go what

00:01:12,180 --> 00:01:16,890
we want to do before we start is is

00:01:14,549 --> 00:01:19,259
define our terms so what do we mean we

00:01:16,890 --> 00:01:21,570
talk about not just like it's a Jenga by

00:01:19,259 --> 00:01:22,950
legacy software in general and there are

00:01:21,570 --> 00:01:25,920
a few definitions that will work with

00:01:22,950 --> 00:01:30,930
the first is just code that someone else

00:01:25,920 --> 00:01:32,130
wrote you know at the risk of you know

00:01:30,930 --> 00:01:35,070
begging the question a philosophical

00:01:32,130 --> 00:01:37,950
question about identity this can also be

00:01:35,070 --> 00:01:39,840
passed to you okay if anyone's ever

00:01:37,950 --> 00:01:41,850
looked at code that you wrote like a

00:01:39,840 --> 00:01:43,500
month ago I was gonna say a year ago but

00:01:41,850 --> 00:01:47,970
a month ago might spice now this could

00:01:43,500 --> 00:01:49,680
be considered legacy code Michael

00:01:47,970 --> 00:01:51,360
feathers who literally wrote the book on

00:01:49,680 --> 00:01:54,570
working with legacy software defines it

00:01:51,360 --> 00:01:57,000
as code with no tests I think this is a

00:01:54,570 --> 00:01:59,820
good example of a characteristics of

00:01:57,000 --> 00:02:03,329
legacy software but I I don't like this

00:01:59,820 --> 00:02:04,890
as a definition the reason it calls this

00:02:03,329 --> 00:02:05,940
is basically a code that you don't know

00:02:04,890 --> 00:02:08,130
if you're improving it

00:02:05,940 --> 00:02:10,830
you make changes I think that's pretty

00:02:08,130 --> 00:02:12,270
accurate another that I want to go with

00:02:10,830 --> 00:02:15,930
a little bit more strongly is that it's

00:02:12,270 --> 00:02:17,430
often it's in production so all right if

00:02:15,930 --> 00:02:20,400
you write code there's basically there's

00:02:17,430 --> 00:02:22,320
this to wait for like decision tree what

00:02:20,400 --> 00:02:25,230
can happen with the code it can be used

00:02:22,320 --> 00:02:26,400
or it can be not used but so if you

00:02:25,230 --> 00:02:27,450
have code that's not being used it's

00:02:26,400 --> 00:02:29,760
probably thrown away and it doesn't

00:02:27,450 --> 00:02:32,820
really matter anymore it's code that's

00:02:29,760 --> 00:02:35,100
used so here we this bridge is an old

00:02:32,820 --> 00:02:36,420
bridge I imagine it's still there but

00:02:35,100 --> 00:02:38,400
this is that this is a bridge that's in

00:02:36,420 --> 00:02:41,880
use all right and that'll actually be a

00:02:38,400 --> 00:02:43,680
little bit important as we go so the

00:02:41,880 --> 00:02:47,820
reason this is important is because this

00:02:43,680 --> 00:02:49,830
written software is an investment it you

00:02:47,820 --> 00:02:51,330
know it there's this literal investment

00:02:49,830 --> 00:02:53,040
potentially of time and money that went

00:02:51,330 --> 00:02:54,810
into it but it's already there you

00:02:53,040 --> 00:02:56,430
already have patterns you don't have a

00:02:54,810 --> 00:02:59,220
lot of information that's that's

00:02:56,430 --> 00:03:00,900
encapsulated in this software and as

00:02:59,220 --> 00:03:02,460
much as it might paint us to say a lot

00:03:00,900 --> 00:03:03,930
of these systems still deliver value and

00:03:02,460 --> 00:03:06,660
that's that's the point of the software

00:03:03,930 --> 00:03:09,360
it's to do something there might be

00:03:06,660 --> 00:03:11,250
people depending on this and actually we

00:03:09,360 --> 00:03:15,510
know there are does anyone here think at

00:03:11,250 --> 00:03:17,459
all using legacy software and the world

00:03:15,510 --> 00:03:21,000
runs on it all right it's it's out there

00:03:17,459 --> 00:03:23,190
that's not to forgive it and say ah well

00:03:21,000 --> 00:03:24,570
let's just live with it as is but it's

00:03:23,190 --> 00:03:26,850
to acknowledge and it's out there and

00:03:24,570 --> 00:03:28,620
that we need to work with it so when we

00:03:26,850 --> 00:03:30,870
talk about legacy Django let's define

00:03:28,620 --> 00:03:32,220
this a little bit more tightly it's

00:03:30,870 --> 00:03:34,500
really good not gonna be that different

00:03:32,220 --> 00:03:36,450
but there's some characteristics that we

00:03:34,500 --> 00:03:38,550
can talk about with with Django I think

00:03:36,450 --> 00:03:40,260
the first is going to be obvious you're

00:03:38,550 --> 00:03:42,209
likely working with an outdated version

00:03:40,260 --> 00:03:45,300
of Django your products dependent on the

00:03:42,209 --> 00:03:47,970
outdated version you could also have

00:03:45,300 --> 00:03:50,820
some issues around how it's deployed you

00:03:47,970 --> 00:03:52,769
know if you've got if you have Django at

00:03:50,820 --> 00:03:54,209
one three product that might be a

00:03:52,769 --> 00:03:56,130
problem enough and it's to play with mod

00:03:54,209 --> 00:03:58,739
PHP let's say and so now you have this

00:03:56,130 --> 00:04:02,430
other issue that kind of compounding the

00:03:58,739 --> 00:04:06,000
problem you could have no testing

00:04:02,430 --> 00:04:07,440
project this is not the worst problem

00:04:06,000 --> 00:04:11,220
you can have with regard to testing

00:04:07,440 --> 00:04:12,450
we'll get to that so you know you can

00:04:11,220 --> 00:04:14,910
also have some older dependencies

00:04:12,450 --> 00:04:17,790
they're outside of Django and again

00:04:14,910 --> 00:04:20,370
these are not by and large totally

00:04:17,790 --> 00:04:21,959
unique issues - Django but we're gonna

00:04:20,370 --> 00:04:24,030
be talking about it's in a way that kind

00:04:21,959 --> 00:04:26,220
of that how we work with Django there

00:04:24,030 --> 00:04:27,540
shouldn't patterns it whether certain

00:04:26,220 --> 00:04:28,889
kind of patterns you might see in legacy

00:04:27,540 --> 00:04:32,130
software and they show up in certain

00:04:28,889 --> 00:04:32,790
places in Django so when we're talking

00:04:32,130 --> 00:04:34,530
this I want to bring out some

00:04:32,790 --> 00:04:37,400
assumptions obviously one of them is

00:04:34,530 --> 00:04:39,450
working with Django another one is that

00:04:37,400 --> 00:04:40,710
the soft assumption we already mentioned

00:04:39,450 --> 00:04:43,080
you're probably working with an outdated

00:04:40,710 --> 00:04:44,910
version of Django a really important one

00:04:43,080 --> 00:04:47,370
which is not necessary but it's going to

00:04:44,910 --> 00:04:50,010
be that we're working with the project

00:04:47,370 --> 00:04:51,360
here so you come onto that it's already

00:04:50,010 --> 00:04:52,979
running a production that people depend

00:04:51,360 --> 00:04:54,419
on this credit so it's not like oh

00:04:52,979 --> 00:04:56,330
here's a project here's some code we're

00:04:54,419 --> 00:04:58,440
thinking about redeploying this

00:04:56,330 --> 00:05:00,930
everything we're gonna talk about still

00:04:58,440 --> 00:05:03,090
applies but it's a little bit different

00:05:00,930 --> 00:05:05,700
I'll be a little bit simpler to solve

00:05:03,090 --> 00:05:08,310
and of course it's in production people

00:05:05,700 --> 00:05:10,260
are still relying on it now the goal in

00:05:08,310 --> 00:05:12,360
all this is to improve the code base -

00:05:10,260 --> 00:05:14,340
let's say maybe fix bugs add features

00:05:12,360 --> 00:05:15,870
that's probably wider if no one wants to

00:05:14,340 --> 00:05:18,510
do anything to the codebase like fix

00:05:15,870 --> 00:05:20,400
bugs or add features you have to ask why

00:05:18,510 --> 00:05:21,300
are you doing anything with it this

00:05:20,400 --> 00:05:23,850
isn't really the only reasons you're

00:05:21,300 --> 00:05:25,560
gonna be working on the code and so the

00:05:23,850 --> 00:05:28,680
goal is to make these really discreet

00:05:25,560 --> 00:05:30,660
steps as you go there's an analogy that

00:05:28,680 --> 00:05:32,550
a friend uses that you know this is uh

00:05:30,660 --> 00:05:34,830
it's like we're gonna told house so this

00:05:32,550 --> 00:05:36,780
old ponies from this old house I like

00:05:34,830 --> 00:05:38,430
the analogy of a bridge so bridge is

00:05:36,780 --> 00:05:40,710
going to span two points and let people

00:05:38,430 --> 00:05:43,919
get from point A to point B if they can

00:05:40,710 --> 00:05:45,539
fail catch draws the goal is to try and

00:05:43,919 --> 00:05:47,100
do work on it before it gets that point

00:05:45,539 --> 00:05:48,720
but you have to keep the bridge open as

00:05:47,100 --> 00:05:51,270
you go and so that kind of goes into our

00:05:48,720 --> 00:05:53,550
assumption about you know people still

00:05:51,270 --> 00:05:55,500
getting value out of this now I'm gonna

00:05:53,550 --> 00:05:59,190
tell you a lot about what to look for

00:05:55,500 --> 00:06:02,070
and then some solutions it's not this is

00:05:59,190 --> 00:06:03,740
not codified these are things that I've

00:06:02,070 --> 00:06:06,300
been have picked up you know I've spent

00:06:03,740 --> 00:06:08,250
more time working on existing Django

00:06:06,300 --> 00:06:12,780
puts gonna have creating Greenfield work

00:06:08,250 --> 00:06:14,250
and you know from Lotta's I've heard the

00:06:12,780 --> 00:06:15,960
stuff that you might consider legacy I

00:06:14,250 --> 00:06:17,080
had to work on it later and I've worked

00:06:15,960 --> 00:06:19,780
on

00:06:17,080 --> 00:06:22,629
that and other people wrote sometimes

00:06:19,780 --> 00:06:29,020
other Django agencies so you might say

00:06:22,629 --> 00:06:32,379
that it's just like my opinion man it is

00:06:29,020 --> 00:06:35,469
based on some on some learnings so the

00:06:32,379 --> 00:06:38,349
first step when you and you get to my

00:06:35,469 --> 00:06:41,050
legacy bodies disco derby you want to

00:06:38,349 --> 00:06:42,610
assess what you have this is going to be

00:06:41,050 --> 00:06:46,360
like the first step in the you dilute

00:06:42,610 --> 00:06:48,069
your orientem serve decide and act the

00:06:46,360 --> 00:06:50,440
reason why you need to get some context

00:06:48,069 --> 00:06:52,449
we really need to understand where the

00:06:50,440 --> 00:06:55,240
pipe is coming from where it's at before

00:06:52,449 --> 00:06:58,360
you can start making changes to the code

00:06:55,240 --> 00:07:01,110
base so the first step is actually the

00:06:58,360 --> 00:07:03,490
zero step is to ask questions this is

00:07:01,110 --> 00:07:05,229
talking to people find out they might be

00:07:03,490 --> 00:07:07,930
stakeholders it might be your manager

00:07:05,229 --> 00:07:09,279
it could be clients and you want to get

00:07:07,930 --> 00:07:11,680
some understanding from outside of the

00:07:09,279 --> 00:07:14,169
code base you want to know what is this

00:07:11,680 --> 00:07:15,879
supposed to do someone might know that

00:07:14,169 --> 00:07:17,199
you know some of my day this is an old

00:07:15,879 --> 00:07:18,430
code base it might be someone who's new

00:07:17,199 --> 00:07:19,719
and say well this is what it does and

00:07:18,430 --> 00:07:21,580
someone else would say well it's

00:07:19,719 --> 00:07:23,229
supposed to do this and what I know

00:07:21,580 --> 00:07:24,550
about known bugs this is really

00:07:23,229 --> 00:07:26,500
important I think before you started

00:07:24,550 --> 00:07:29,650
digging into the code base find out what

00:07:26,500 --> 00:07:30,940
you can about known bugs and then

00:07:29,650 --> 00:07:32,139
planned features as well this is going

00:07:30,940 --> 00:07:34,960
to influence how you look at like the

00:07:32,139 --> 00:07:37,560
architecture this brings you to reading

00:07:34,960 --> 00:07:40,379
the code this is an art not a science

00:07:37,560 --> 00:07:42,969
basically we can be doing is looking for

00:07:40,379 --> 00:07:45,099
you want to get an idea of what it does

00:07:42,969 --> 00:07:47,770
look for things like I don't know

00:07:45,099 --> 00:07:51,729
confusing areas in the code base look at

00:07:47,770 --> 00:07:54,099
the architecture code would smell is

00:07:51,729 --> 00:07:57,069
gonna be a big one the style and so you

00:07:54,099 --> 00:07:58,569
know how is this written no one could

00:07:57,069 --> 00:08:00,909
avoid some of those bugs are beforehand

00:07:58,569 --> 00:08:02,560
- will help you might even see bugs that

00:08:00,909 --> 00:08:03,789
are obvious as you read through it you

00:08:02,560 --> 00:08:05,529
might see some that wouldn't have been

00:08:03,789 --> 00:08:07,870
but they are now because someone told

00:08:05,529 --> 00:08:09,310
you about an issue and right at this

00:08:07,870 --> 00:08:11,139
point you're just basically taking notes

00:08:09,310 --> 00:08:14,110
remember we're not we're not making any

00:08:11,139 --> 00:08:16,509
changes to the code base there are some

00:08:14,110 --> 00:08:17,589
tools to help you with this the main

00:08:16,509 --> 00:08:19,629
ones are gonna be reading it there's

00:08:17,589 --> 00:08:22,330
really nothing more you can do to get

00:08:19,629 --> 00:08:24,909
beyond that but some of these tools will

00:08:22,330 --> 00:08:26,680
help get you some understanding of

00:08:24,909 --> 00:08:28,530
what's going on in the code so I pretty

00:08:26,680 --> 00:08:30,870
much I use flake eight

00:08:28,530 --> 00:08:34,560
my term as well they didn't pay me to

00:08:30,870 --> 00:08:36,120
say that and you can also use a pilot

00:08:34,560 --> 00:08:37,710
and what these are gonna do with flake

00:08:36,120 --> 00:08:39,270
eight is going to combine central

00:08:37,710 --> 00:08:40,860
stylistic analysis if you're not easy

00:08:39,270 --> 00:08:43,740
right in I'm gonna guess a lot of people

00:08:40,860 --> 00:08:47,460
are mansome some static analysis of your

00:08:43,740 --> 00:08:48,990
code and what do you think this is good

00:08:47,460 --> 00:08:50,580
this could be a lot just could show you

00:08:48,990 --> 00:08:53,220
a lot of errors and what I've done is I

00:08:50,580 --> 00:08:55,530
have a script that I've linked on a blog

00:08:53,220 --> 00:08:57,090
post basically just take this output and

00:08:55,530 --> 00:08:58,800
give you a summary of what this looks

00:08:57,090 --> 00:09:00,900
like on a module one module basis and an

00:08:58,800 --> 00:09:02,040
error type I error type basis because if

00:09:00,900 --> 00:09:03,690
you find out that there's a whole bunch

00:09:02,040 --> 00:09:06,600
of modules that have like oh there's no

00:09:03,690 --> 00:09:08,310
spacing or an operator that that's going

00:09:06,600 --> 00:09:10,410
to impact how you read it but it's not

00:09:08,310 --> 00:09:11,460
gonna it's not that serious whereas you

00:09:10,410 --> 00:09:14,130
find out there's a whole bunch of names

00:09:11,460 --> 00:09:15,630
use places that are never defined that

00:09:14,130 --> 00:09:16,830
might be a source of Mon time errors so

00:09:15,630 --> 00:09:19,650
you want to kind of categorize this as

00:09:16,830 --> 00:09:21,330
you go now now that we could have done

00:09:19,650 --> 00:09:23,880
this it would see that the obvious next

00:09:21,330 --> 00:09:25,650
step is to get into testing but I'm

00:09:23,880 --> 00:09:27,480
going to suggest there might be a

00:09:25,650 --> 00:09:29,460
intermediary step and that's adding a

00:09:27,480 --> 00:09:31,560
little bit of logging if you remember we

00:09:29,460 --> 00:09:32,790
wanted to talk to people and Terra Gate

00:09:31,560 --> 00:09:35,070
them about some of the issues in the

00:09:32,790 --> 00:09:38,520
code and basically want to do is

00:09:35,070 --> 00:09:41,040
understand production errors so again

00:09:38,520 --> 00:09:42,540
there's another sponsor not paying to

00:09:41,040 --> 00:09:43,800
say this I'm the century quite a bit for

00:09:42,540 --> 00:09:46,110
this you don't have to use them it could

00:09:43,800 --> 00:09:47,460
be a similar service and you want to add

00:09:46,110 --> 00:09:49,830
in this exception handling

00:09:47,460 --> 00:09:53,010
um it's not good enough to get emails

00:09:49,830 --> 00:09:54,780
about an error - like a mailbox that no

00:09:53,010 --> 00:09:56,040
one's checking you want to get these you

00:09:54,780 --> 00:09:56,370
want to make sure you know what's going

00:09:56,040 --> 00:09:59,250
on

00:09:56,370 --> 00:10:01,200
get good stack traces and there's also a

00:09:59,250 --> 00:10:03,210
point which I'd suggest making some code

00:10:01,200 --> 00:10:07,650
changes before getting looking at tests

00:10:03,210 --> 00:10:09,750
and that's code looks like this when you

00:10:07,650 --> 00:10:11,010
see this in a code probably not gonna

00:10:09,750 --> 00:10:13,650
even look like this is probably gonna be

00:10:11,010 --> 00:10:15,690
like 20 lines and there's some calls to

00:10:13,650 --> 00:10:18,089
external services and then there's like

00:10:15,690 --> 00:10:19,520
an except clause and maybe there's like

00:10:18,089 --> 00:10:23,400
one but it's just like it here except

00:10:19,520 --> 00:10:24,930
Chris wrote this yeah maybe there wasn't

00:10:23,400 --> 00:10:26,040
time maybe this was a temporary thing

00:10:24,930 --> 00:10:29,010
maybe the code was going to be thrown

00:10:26,040 --> 00:10:30,060
away who knows but this there are

00:10:29,010 --> 00:10:32,880
exceptions you're being swallowed

00:10:30,060 --> 00:10:34,120
and maybe it's acceptable to some degree

00:10:32,880 --> 00:10:36,160
because this is something

00:10:34,120 --> 00:10:37,810
customer view they don't see this and so

00:10:36,160 --> 00:10:41,050
it's not that big of a deal but this

00:10:37,810 --> 00:10:42,580
could be hiding bugs so what you can do

00:10:41,050 --> 00:10:44,650
is you can go ahead and add some login

00:10:42,580 --> 00:10:46,900
here if you're not if you're not

00:10:44,650 --> 00:10:48,550
familiar with the exception logger

00:10:46,900 --> 00:10:51,310
basically the students are gonna send

00:10:48,550 --> 00:10:53,170
the whole stack trace out so if you're

00:10:51,310 --> 00:10:54,760
using something like century you'll get

00:10:53,170 --> 00:10:56,650
what looks like an error message it's

00:10:54,760 --> 00:10:57,940
never raised but you'll get the full

00:10:56,650 --> 00:10:59,410
status and you can see what's going on

00:10:57,940 --> 00:11:02,830
this will allow you later to come back

00:10:59,410 --> 00:11:06,160
to this code and properly address it and

00:11:02,830 --> 00:11:09,640
that brings us now to testing in case

00:11:06,160 --> 00:11:13,050
you're wondering why testing I'll give

00:11:09,640 --> 00:11:14,980
you a little visual prompt that why'd I

00:11:13,050 --> 00:11:16,960
even talk before I had like a whole

00:11:14,980 --> 00:11:20,170
bunch of screenshots of that from

00:11:16,960 --> 00:11:21,760
airports the you know this is gonna help

00:11:20,170 --> 00:11:23,320
you fix bugs it's gonna guide

00:11:21,760 --> 00:11:25,089
development you don't have to do

00:11:23,320 --> 00:11:26,650
religious test driven development you

00:11:25,089 --> 00:11:28,060
can do a little bit of that and it's

00:11:26,650 --> 00:11:31,120
gonna be a deployment confidence you

00:11:28,060 --> 00:11:32,589
know that where you have close to a

00:11:31,120 --> 00:11:35,220
hundred percent confidence that you know

00:11:32,589 --> 00:11:37,480
what you deploy is it's going to work

00:11:35,220 --> 00:11:39,850
and what am I put here is it testified

00:11:37,480 --> 00:11:42,490
information about code quality and

00:11:39,850 --> 00:11:44,500
that's gonna be key in more than three

00:11:42,490 --> 00:11:46,959
or four slides but but that's the goal

00:11:44,500 --> 00:11:49,630
it's gonna tell us what's going on so

00:11:46,959 --> 00:11:51,520
that's of course if we have tests so

00:11:49,630 --> 00:11:54,910
what are the test suite scenarios you've

00:11:51,520 --> 00:11:56,290
come to this new project basically if

00:11:54,910 --> 00:11:57,339
dr. Seuss you're writing about test this

00:11:56,290 --> 00:11:59,350
and how he would write about the

00:11:57,339 --> 00:12:03,070
scenarios ok you could have a few get a

00:11:59,350 --> 00:12:03,430
break test no test test load tests are

00:12:03,070 --> 00:12:04,480
great

00:12:03,430 --> 00:12:07,420
this means you probably have a lot of

00:12:04,480 --> 00:12:08,980
coverage they're meaningful tests I want

00:12:07,420 --> 00:12:11,830
to put emphasis on that coverage is a

00:12:08,980 --> 00:12:13,900
great metric but it is a false god do

00:12:11,830 --> 00:12:17,110
not real chip it it just means that

00:12:13,900 --> 00:12:18,790
every lines been evaluated yeah you get

00:12:17,110 --> 00:12:20,470
out of junky tests that you know don't

00:12:18,790 --> 00:12:21,730
test every type that can go in and you

00:12:20,470 --> 00:12:23,410
can have failures because you didn't

00:12:21,730 --> 00:12:24,640
test that we weren't meaningful so it's

00:12:23,410 --> 00:12:26,020
good covers will tell you where there

00:12:24,640 --> 00:12:29,500
might be dragons but it's not going to

00:12:26,020 --> 00:12:30,940
tell you this is amazing so that but

00:12:29,500 --> 00:12:32,170
this is you know give great test and

00:12:30,940 --> 00:12:34,450
you're probably golden everything is

00:12:32,170 --> 00:12:36,940
passing and it's passing because these

00:12:34,450 --> 00:12:38,890
are good tests you could have no tests

00:12:36,940 --> 00:12:40,959
again not the worst scenario you could

00:12:38,890 --> 00:12:44,050
have because at least you don't have any

00:12:40,959 --> 00:12:46,239
noise so we have signal and noise bad

00:12:44,050 --> 00:12:47,859
test I think are the worst scenario

00:12:46,239 --> 00:12:50,019
especially they're combined with slow

00:12:47,859 --> 00:12:51,579
tests now bad tests could be that you

00:12:50,019 --> 00:12:53,589
have coverage everything works and it's

00:12:51,579 --> 00:12:54,639
just a bunch of stupid tests I don't

00:12:53,589 --> 00:12:57,189
know someone went through a just like

00:12:54,639 --> 00:12:58,869
mod it's someone patched the like test

00:12:57,189 --> 00:13:04,809
case class so that all the asserts

00:12:58,869 --> 00:13:07,059
always pass I don't know like a but

00:13:04,809 --> 00:13:08,349
these are terrible tests you could also

00:13:07,059 --> 00:13:10,359
have tests that are failing because you

00:13:08,349 --> 00:13:11,979
have test drift you know people just

00:13:10,359 --> 00:13:13,089
started off you know no one was running

00:13:11,979 --> 00:13:14,859
the tests and they were they were making

00:13:13,089 --> 00:13:16,869
changes the codebase nut you know off

00:13:14,859 --> 00:13:20,129
the new tests I'm you get errors for

00:13:16,869 --> 00:13:22,449
very similar reasons this is bad this is

00:13:20,129 --> 00:13:23,679
this is not information this is just

00:13:22,449 --> 00:13:24,489
told me that the tests are not good it's

00:13:23,679 --> 00:13:26,349
not something anything about the

00:13:24,489 --> 00:13:29,139
codebase so the strategy I would

00:13:26,349 --> 00:13:29,919
recommend here is I need to change the

00:13:29,139 --> 00:13:31,479
raking the codebase you make

00:13:29,919 --> 00:13:32,949
incrementally what are the same thing

00:13:31,479 --> 00:13:33,609
with these tasks and basically the first

00:13:32,949 --> 00:13:36,220
thing you're doing

00:13:33,609 --> 00:13:38,739
silence anything that is bad especially

00:13:36,220 --> 00:13:39,669
if you don't know why because really

00:13:38,739 --> 00:13:41,829
what you want to do if there's a test

00:13:39,669 --> 00:13:43,149
that's failing was an error indicates

00:13:41,829 --> 00:13:44,919
that either the test needs to be fixed

00:13:43,149 --> 00:13:47,079
or the code underneath it that's being

00:13:44,919 --> 00:13:48,479
test needs to be fixed and if you can't

00:13:47,079 --> 00:13:50,679
figure out what that is at first

00:13:48,479 --> 00:13:52,149
silence the noise and wait till you can

00:13:50,679 --> 00:13:54,819
come back and see if you can get a

00:13:52,149 --> 00:13:55,599
signal out of that and of course we have

00:13:54,819 --> 00:13:56,829
slow tests

00:13:55,599 --> 00:14:00,129
slow tests are bad because no one wants

00:13:56,829 --> 00:14:01,689
to run them it's terrible but this could

00:14:00,129 --> 00:14:02,259
mean like it takes five minutes during

00:14:01,689 --> 00:14:05,049
the test suite

00:14:02,259 --> 00:14:07,149
I run a project where it took 90 minutes

00:14:05,049 --> 00:14:08,559
to run I ran it a few times they stopped

00:14:07,149 --> 00:14:10,269
it after like 20 isn't it on my computer

00:14:08,559 --> 00:14:11,829
felt it went to sleep and I asked the

00:14:10,269 --> 00:14:13,779
client said yeah it takes 90 minutes

00:14:11,829 --> 00:14:17,289
after I ran it on another like you know

00:14:13,779 --> 00:14:19,509
server instance somewhere so the the

00:14:17,289 --> 00:14:20,589
solution there is to speeds up and the

00:14:19,509 --> 00:14:21,909
reason those tests are really slowly

00:14:20,589 --> 00:14:24,429
because they were really fixture

00:14:21,909 --> 00:14:26,529
dependent I would argue pin it outside

00:14:24,429 --> 00:14:28,839
of the scope of this talk using heavy

00:14:26,529 --> 00:14:31,029
fixture fix your files in general is not

00:14:28,839 --> 00:14:32,439
the best idea but if you have a legacy

00:14:31,029 --> 00:14:34,779
project you might have a lot of them

00:14:32,439 --> 00:14:37,029
we're talking like thousands of

00:14:34,779 --> 00:14:39,399
thousands of Records and every single

00:14:37,029 --> 00:14:40,809
test case loads all of these and that's

00:14:39,399 --> 00:14:41,949
where all the time comes into play it

00:14:40,809 --> 00:14:43,809
can also be because the code underneath

00:14:41,949 --> 00:14:45,579
the test is slow can be because you're

00:14:43,809 --> 00:14:47,409
making X the the code or the test for

00:14:45,579 --> 00:14:48,879
making calls to external services so

00:14:47,409 --> 00:14:49,979
these are basically all anti patterns

00:14:48,879 --> 00:14:52,359
and what you have to do is figure out

00:14:49,979 --> 00:14:53,259
need to prioritize which of these you're

00:14:52,359 --> 00:14:56,049
going to speed up first

00:14:53,259 --> 00:14:57,390
so with fixtures I was able to get these

00:14:56,049 --> 00:14:59,310
down to 90 seconds

00:14:57,390 --> 00:15:02,250
like four lines of code by just using

00:14:59,310 --> 00:15:04,380
Jenko nose and the fast fixture Penske's

00:15:02,250 --> 00:15:05,820
if you want to use that it's not

00:15:04,380 --> 00:15:07,800
currently supported in the latest

00:15:05,820 --> 00:15:12,050
version Jago knows but I have a fork and

00:15:07,800 --> 00:15:12,050
github that does but it's not testing

00:15:14,600 --> 00:15:18,330
and you can also just make sure you're

00:15:16,680 --> 00:15:19,950
not using the database excessively make

00:15:18,330 --> 00:15:21,450
sure nothing too much i/o that could

00:15:19,950 --> 00:15:23,070
mean not saving models and use me to

00:15:21,450 --> 00:15:24,660
test a method on a model class that just

00:15:23,070 --> 00:15:28,680
uses something out of the model or

00:15:24,660 --> 00:15:31,650
mocking and mocking is great for this

00:15:28,680 --> 00:15:33,420
so that's your priority that's gonna

00:15:31,650 --> 00:15:35,130
help kind of give you a guide to what's

00:15:33,420 --> 00:15:36,720
there when you're adding any kind of new

00:15:35,130 --> 00:15:39,510
test though we want to prioritize

00:15:36,720 --> 00:15:41,970
especially get no tests how we add these

00:15:39,510 --> 00:15:42,570
in because the there might be a

00:15:41,970 --> 00:15:45,480
temptation

00:15:42,570 --> 00:15:47,040
we'll just write a full test week yeah

00:15:45,480 --> 00:15:48,480
the temptation she probably put it aside

00:15:47,040 --> 00:15:49,830
especially if you have code that's

00:15:48,480 --> 00:15:51,570
that's in production need to make

00:15:49,830 --> 00:15:54,690
changes to the first thing you know

00:15:51,570 --> 00:15:57,660
prioritize our bugs this is actually

00:15:54,690 --> 00:16:01,590
it's a beautiful millipede from Virginia

00:15:57,660 --> 00:16:04,020
so it's not really that a bug but um you

00:16:01,590 --> 00:16:05,610
want to add in tester most any time you

00:16:04,020 --> 00:16:07,620
have a bug you read tests for it and and

00:16:05,610 --> 00:16:10,020
you fix it that's probably not near the

00:16:07,620 --> 00:16:12,510
most viewable the the next that's there

00:16:10,020 --> 00:16:14,010
could be what I've called you know

00:16:12,510 --> 00:16:16,590
there's smoke tester this integration

00:16:14,010 --> 00:16:18,000
test we're just load the views if you

00:16:16,590 --> 00:16:19,710
don't have any testers a lot of stuff

00:16:18,000 --> 00:16:21,510
you want to test one of the basic things

00:16:19,710 --> 00:16:23,880
you do is just do some client you know

00:16:21,510 --> 00:16:26,070
using the Django test case client to

00:16:23,880 --> 00:16:27,600
load views that's going to be a it's not

00:16:26,070 --> 00:16:28,620
the cheapest way of testing but it's

00:16:27,600 --> 00:16:32,730
going to be the quickest way of testing

00:16:28,620 --> 00:16:33,960
a lot if you don't have any tests and

00:16:32,730 --> 00:16:35,640
that's really important when upgrading

00:16:33,960 --> 00:16:38,550
Django is urgent because you want to get

00:16:35,640 --> 00:16:41,600
as much tested as possible and then any

00:16:38,550 --> 00:16:43,950
time you add a new feature yeah this and

00:16:41,600 --> 00:16:45,720
refactoring so refactoring is by

00:16:43,950 --> 00:16:47,100
definition it shouldn't be changing how

00:16:45,720 --> 00:16:49,920
code works should really just be

00:16:47,100 --> 00:16:51,180
changing names and extracting code this

00:16:49,920 --> 00:16:54,330
is a really good opportunity to add

00:16:51,180 --> 00:16:57,090
tests for what your refactoring and then

00:16:54,330 --> 00:16:58,380
that brings us to the upgrade this is

00:16:57,090 --> 00:17:00,450
everyone's favorite part of working with

00:16:58,380 --> 00:17:02,970
legacy Django is upgrading to the newest

00:17:00,450 --> 00:17:04,470
best django version because within you

00:17:02,970 --> 00:17:07,190
know an hour of work you're done and

00:17:04,470 --> 00:17:07,190
you're on it

00:17:09,730 --> 00:17:16,880
it's an hour different you know relative

00:17:12,860 --> 00:17:19,490
time the issues gonna have here is wrong

00:17:16,880 --> 00:17:21,169
these backward incompatibilities so you

00:17:19,490 --> 00:17:23,089
know all kinds of things that have

00:17:21,169 --> 00:17:25,789
changed each Django version it could be

00:17:23,089 --> 00:17:27,259
as simple as you know URL patterns is

00:17:25,789 --> 00:17:29,000
deprecated or it could be that you're

00:17:27,259 --> 00:17:30,700
using you know get query set was renamed

00:17:29,000 --> 00:17:33,470
and you've got to fix this in your code

00:17:30,700 --> 00:17:37,240
the the superpower here it's gonna help

00:17:33,470 --> 00:17:39,289
you do this as talks I'll repeat it

00:17:37,240 --> 00:17:40,250
talks is a great it's a test to if

00:17:39,289 --> 00:17:41,809
you're not familiar with it it's

00:17:40,250 --> 00:17:43,580
predominantly you've probably seen it in

00:17:41,809 --> 00:17:46,519
with reusable apps or their Python

00:17:43,580 --> 00:17:47,990
libraries and controls testing

00:17:46,519 --> 00:17:49,970
environments kind of isolate testing

00:17:47,990 --> 00:17:51,529
environments for a matrix of of whatever

00:17:49,970 --> 00:17:53,690
you want look all kinds of dependencies

00:17:51,529 --> 00:17:55,279
so you usually use it with a Django

00:17:53,690 --> 00:17:57,440
reputable app but it's really useful

00:17:55,279 --> 00:17:59,960
with your own project when you want to

00:17:57,440 --> 00:18:01,970
test a small matrix like I want to test

00:17:59,960 --> 00:18:03,919
this code base against the current

00:18:01,970 --> 00:18:06,169
version of Django and the next version

00:18:03,919 --> 00:18:08,929
and the next version and maybe see where

00:18:06,169 --> 00:18:10,879
I have some issues so the way this works

00:18:08,929 --> 00:18:12,500
is you set up a tox file this is your

00:18:10,879 --> 00:18:14,929
configuration file the reason want to

00:18:12,500 --> 00:18:17,509
point this out is that you'll see that I

00:18:14,929 --> 00:18:18,529
have there's a requirements file that

00:18:17,509 --> 00:18:19,970
we're installing the dependencies from

00:18:18,529 --> 00:18:22,129
and then Django is isolated separately

00:18:19,970 --> 00:18:23,779
the one thing I found doing this is that

00:18:22,129 --> 00:18:26,960
you do need to pull the Django version

00:18:23,779 --> 00:18:28,220
out of the requirements file and so you

00:18:26,960 --> 00:18:30,379
know that would be like a say a root

00:18:28,220 --> 00:18:31,970
requirements file in this case and then

00:18:30,379 --> 00:18:34,100
you can define it here so we're gonna

00:18:31,970 --> 00:18:35,720
run these tests against each of these

00:18:34,100 --> 00:18:37,159
versions of Django and that's a really

00:18:35,720 --> 00:18:38,929
great way of kind of doing this in place

00:18:37,159 --> 00:18:41,240
you can see what code how could works

00:18:38,929 --> 00:18:42,919
you could potentially change your code

00:18:41,240 --> 00:18:44,419
base get it working in this version

00:18:42,919 --> 00:18:47,149
whatever version you have deployed and

00:18:44,419 --> 00:18:48,980
the next and then at that point just

00:18:47,149 --> 00:18:50,570
deploy the changes and then and then

00:18:48,980 --> 00:18:53,509
upgrade Django that's kind of a nice way

00:18:50,570 --> 00:18:55,970
of doing it the goal is going to be

00:18:53,509 --> 00:18:58,009
getting to an LTS version I don't care

00:18:55,970 --> 00:19:00,259
if you want to get to like you know 110

00:18:58,009 --> 00:19:01,700
you get to the LTS version first for a

00:19:00,259 --> 00:19:03,169
lot of legacy apps that are in

00:19:01,700 --> 00:19:04,309
production that's probably that's what

00:19:03,169 --> 00:19:08,509
you want to do that's your baseline is

00:19:04,309 --> 00:19:09,889
to go from LTS - LTS but this is it's

00:19:08,509 --> 00:19:11,179
literally not even the fun part fun

00:19:09,889 --> 00:19:11,710
parts working with all the dependencies

00:19:11,179 --> 00:19:16,210
you

00:19:11,710 --> 00:19:19,720
these reasonable apps these posts a few

00:19:16,210 --> 00:19:21,340
minor problems there you can have some

00:19:19,720 --> 00:19:25,300
integration with obsolete libraries in

00:19:21,340 --> 00:19:26,500
there hopefully no one is working you

00:19:25,300 --> 00:19:29,530
don't have to do too much work with soap

00:19:26,500 --> 00:19:31,180
in Django and there's a lot of new

00:19:29,530 --> 00:19:32,920
libraries out there for that but like

00:19:31,180 --> 00:19:35,730
there was a gap where there was nothing

00:19:32,920 --> 00:19:38,140
new and you were pretty much screwed

00:19:35,730 --> 00:19:39,760
over specification and this is not an

00:19:38,140 --> 00:19:41,500
issue in your project so much as the

00:19:39,760 --> 00:19:43,300
dependencies where dependencies over

00:19:41,500 --> 00:19:46,120
specify the version compatibility and

00:19:43,300 --> 00:19:48,730
you're screwed because you get personal

00:19:46,120 --> 00:19:51,250
support mismatches so here's a diagram

00:19:48,730 --> 00:19:52,960
of this is what versions look like I

00:19:51,250 --> 00:19:54,750
know if you guys but this is what they

00:19:52,960 --> 00:19:58,960
look like

00:19:54,750 --> 00:20:00,640
so here we have you know the bottom is

00:19:58,960 --> 00:20:03,970
gonna be the lowest version of Django

00:20:00,640 --> 00:20:05,740
that the teal packages can battle with

00:20:03,970 --> 00:20:07,480
in the top is the you know the the upper

00:20:05,740 --> 00:20:09,430
most whether or not these are specified

00:20:07,480 --> 00:20:11,710
by the way this is just what we actually

00:20:09,430 --> 00:20:13,660
have and so that orange is that's the

00:20:11,710 --> 00:20:17,080
current Django version and now you

00:20:13,660 --> 00:20:19,120
upgrade and now you have this you have

00:20:17,080 --> 00:20:20,020
packages that have not been updated you

00:20:19,120 --> 00:20:21,010
have package that have been updated

00:20:20,020 --> 00:20:23,380
they're like you know we're not

00:20:21,010 --> 00:20:25,570
supporting that version anymore and this

00:20:23,380 --> 00:20:27,430
is the problem you run into so you have

00:20:25,570 --> 00:20:29,740
to you have to solve this right that's

00:20:27,430 --> 00:20:31,480
why we're here it's for solutions the

00:20:29,740 --> 00:20:34,090
first solution is what I call patent

00:20:31,480 --> 00:20:35,710
thread where it's a no and there's an

00:20:34,090 --> 00:20:37,540
upstream and it's an you know it's on PI

00:20:35,710 --> 00:20:40,630
P I you know what I'm gonna I'm gonna be

00:20:37,540 --> 00:20:42,100
helpful I'm gonna you know patches make

00:20:40,630 --> 00:20:44,530
it work with an expert in Django give a

00:20:42,100 --> 00:20:47,020
pull request and within a couple hours

00:20:44,530 --> 00:20:50,140
it's gonna be up to PI P and we'll be

00:20:47,020 --> 00:20:51,880
good to go that's how it works if

00:20:50,140 --> 00:20:54,070
anyone's done e working a bunch of that

00:20:51,880 --> 00:20:55,780
you know that it's the weekend you need

00:20:54,070 --> 00:20:57,100
stuff to do you wanna do that or maybe

00:20:55,780 --> 00:20:59,980
you don't care about the package anymore

00:20:57,100 --> 00:21:02,080
is the maintainer so this this is not a

00:20:59,980 --> 00:21:03,280
bad strategy to take but it should not

00:21:02,080 --> 00:21:06,670
be your first job you should be a good

00:21:03,280 --> 00:21:07,840
secondary another tragedies to work now

00:21:06,670 --> 00:21:10,610
this could be forking as another

00:21:07,840 --> 00:21:13,940
published project to be forking to a

00:21:10,610 --> 00:21:16,760
index orchids be forking and using your

00:21:13,940 --> 00:21:19,570
fourth version from get yeah or or

00:21:16,760 --> 00:21:23,570
mercurial or perforce or what I don't

00:21:19,570 --> 00:21:25,730
you guys use perforce well you can do

00:21:23,570 --> 00:21:26,930
that and you can also kind of vendor it

00:21:25,730 --> 00:21:28,130
and have a vendor for where you've

00:21:26,930 --> 00:21:30,110
actually have the code just for the

00:21:28,130 --> 00:21:32,660
added to your codebase and work on it

00:21:30,110 --> 00:21:35,150
from there related to that you could

00:21:32,660 --> 00:21:36,860
just extract what you need you might

00:21:35,150 --> 00:21:38,270
just using one or two modules and it's

00:21:36,860 --> 00:21:40,130
this huge app but you know it's got

00:21:38,270 --> 00:21:42,770
models with doesn't even have stealth

00:21:40,130 --> 00:21:44,330
migrations and there's all this other

00:21:42,770 --> 00:21:46,400
crap okay I just need this template tag

00:21:44,330 --> 00:21:47,360
library I just need this and I actually

00:21:46,400 --> 00:21:48,470
don't even need to change anything

00:21:47,360 --> 00:21:49,820
because there's nothing in there that's

00:21:48,470 --> 00:21:52,040
incompatible with the version of Django

00:21:49,820 --> 00:21:55,220
I've got so you just pull that out as a

00:21:52,040 --> 00:21:55,490
separate app no vendored and you're good

00:21:55,220 --> 00:21:58,370
to go

00:21:55,490 --> 00:22:02,510
ideally with tests but I didn't tell you

00:21:58,370 --> 00:22:04,010
this but you just included and of course

00:22:02,510 --> 00:22:04,820
needs removing replace so you just say

00:22:04,010 --> 00:22:06,050
you know what we're not gonna be we

00:22:04,820 --> 00:22:07,640
don't need this dependence anymore we

00:22:06,050 --> 00:22:10,280
can make do with something here or we

00:22:07,640 --> 00:22:12,800
can find an actively maintained

00:22:10,280 --> 00:22:14,780
alternative some of the tools you might

00:22:12,800 --> 00:22:17,750
use for working with dependencies here

00:22:14,780 --> 00:22:21,620
are pure and pip tools the reason I like

00:22:17,750 --> 00:22:22,940
pure is pure and this is the example

00:22:21,620 --> 00:22:25,460
from the pure site I know it's not

00:22:22,940 --> 00:22:27,560
Django you basically put in your

00:22:25,460 --> 00:22:29,390
requirements file and it will look at

00:22:27,560 --> 00:22:30,770
your requirements and then we you know

00:22:29,390 --> 00:22:33,980
it'll update the requirements file in

00:22:30,770 --> 00:22:35,120
place with updated versions this is good

00:22:33,980 --> 00:22:35,510
for just kind of testing to see what

00:22:35,120 --> 00:22:37,690
works

00:22:35,510 --> 00:22:42,950
you just upgrade everything is a great

00:22:37,690 --> 00:22:43,910
let's see what breaks so that's one

00:22:42,950 --> 00:22:45,200
dependencies and there's some other

00:22:43,910 --> 00:22:47,270
issues you're gonna find in a code base

00:22:45,200 --> 00:22:51,260
I'd be remiss we didn't talk about

00:22:47,270 --> 00:22:54,320
formatting there are stickers

00:22:51,260 --> 00:22:55,550
I have more stickers later to freeze it

00:22:54,320 --> 00:22:56,950
this is not a dangerous for big issues

00:22:55,550 --> 00:23:01,400
not even pipe monsters a vehicle though

00:22:56,950 --> 00:23:02,570
since we have standard see it if you

00:23:01,400 --> 00:23:04,640
guys are the talk on on readability

00:23:02,570 --> 00:23:06,530
understand there's a readability issue I

00:23:04,640 --> 00:23:09,290
I think that a lot of the bad formatting

00:23:06,530 --> 00:23:11,540
will see can it hides bugs and so that's

00:23:09,290 --> 00:23:13,880
why it's an issue it's not just an

00:23:11,540 --> 00:23:16,190
aesthetic issue there are a few tools

00:23:13,880 --> 00:23:19,850
you can work with here auto Pepe twill

00:23:16,190 --> 00:23:22,620
automatically format and PI Chand again

00:23:19,850 --> 00:23:24,830
we can do some formatting I

00:23:22,620 --> 00:23:26,790
and cautious about doing too much

00:23:24,830 --> 00:23:30,059
Foreman I just going to aren't tests in

00:23:26,790 --> 00:23:32,820
place it should be kosher but it you

00:23:30,059 --> 00:23:34,770
know you want to be very cautious in

00:23:32,820 --> 00:23:36,390
other settings and really the issue with

00:23:34,770 --> 00:23:38,420
settings is not just maybe gnarly

00:23:36,390 --> 00:23:41,910
settings but secrets

00:23:38,420 --> 00:23:42,840
does anyone ever hear actually don't

00:23:41,910 --> 00:23:50,520
raise your hand if you've ever committed

00:23:42,840 --> 00:23:53,130
a secret it happens there sometimes but

00:23:50,520 --> 00:23:55,470
this is kind of just wait but it's

00:23:53,130 --> 00:23:57,660
written and so you you want to get these

00:23:55,470 --> 00:24:00,780
out curly is one of those first changes

00:23:57,660 --> 00:24:02,660
you make I may be with with logging get

00:24:00,780 --> 00:24:05,940
this stuff out there's a tool for that

00:24:02,660 --> 00:24:08,340
called bandit it's a Python tool as part

00:24:05,940 --> 00:24:09,900
of the OpenStack open ya OpenStack

00:24:08,340 --> 00:24:11,910
project and it will look for security

00:24:09,900 --> 00:24:13,590
vulnerabilities in code it's just gonna

00:24:11,910 --> 00:24:15,540
build an ast and do this and it'll look

00:24:13,590 --> 00:24:16,770
for stuff like that it's not hundred

00:24:15,540 --> 00:24:19,500
percent but it'll give you some good

00:24:16,770 --> 00:24:21,090
signal the other thing is just having

00:24:19,500 --> 00:24:23,490
one big app you know you have this

00:24:21,090 --> 00:24:25,830
monolithic app and you've got like 50

00:24:23,490 --> 00:24:27,390
models and a URLs file a URL

00:24:25,830 --> 00:24:29,400
configuration that's got I mean it's

00:24:27,390 --> 00:24:31,530
just huge and you can understand what's

00:24:29,400 --> 00:24:34,350
going on the solution is pretty simple

00:24:31,530 --> 00:24:35,400
and you break this up the way you start

00:24:34,350 --> 00:24:37,620
with this so I think it's with the

00:24:35,400 --> 00:24:40,590
simplest things you know you are Ellison

00:24:37,620 --> 00:24:41,340
views you can do models too but save

00:24:40,590 --> 00:24:42,960
those for last

00:24:41,340 --> 00:24:45,420
typically the way you move models is you

00:24:42,960 --> 00:24:47,760
use the DB table attribute in the

00:24:45,420 --> 00:24:49,650
metaclass and just define the table name

00:24:47,760 --> 00:24:51,330
so you have that you know keep the table

00:24:49,650 --> 00:24:53,309
name what it is and then with a little

00:24:51,330 --> 00:24:55,950
bit of migrations dancing maybe some

00:24:53,309 --> 00:24:57,480
squashing some faking you don't change

00:24:55,950 --> 00:24:59,700
the database but you make change up

00:24:57,480 --> 00:25:02,460
think you move stuff around and and that

00:24:59,700 --> 00:25:05,340
will work now there is similar this is

00:25:02,460 --> 00:25:09,030
these big views lots of logic and views

00:25:05,340 --> 00:25:10,110
this is uh this is hard to test it's

00:25:09,030 --> 00:25:12,900
hard to read through there are a few

00:25:10,110 --> 00:25:15,660
solutions to this I just kind of find it

00:25:12,900 --> 00:25:18,360
there's a blog post 2006 by Janice buck

00:25:15,660 --> 00:25:21,750
about this in in rails so we know about

00:25:18,360 --> 00:25:23,100
this issue that models is kind of one of

00:25:21,750 --> 00:25:26,340
the solutions of this putting a lot of

00:25:23,100 --> 00:25:28,770
the logic and the model itself I'm a fan

00:25:26,340 --> 00:25:30,360
of humongous and managers if you guys

00:25:28,770 --> 00:25:32,220
for the manager stock hopefully be

00:25:30,360 --> 00:25:35,539
persuaded to this there's a lot of logic

00:25:32,220 --> 00:25:36,950
you can put in managers that that

00:25:35,539 --> 00:25:38,269
might be in your views and it's just

00:25:36,950 --> 00:25:40,909
much better place in managers it's much

00:25:38,269 --> 00:25:43,009
easier to test here and we could say

00:25:40,909 --> 00:25:45,559
expansive forms as well it specifically

00:25:43,009 --> 00:25:46,879
a lot of if you saw the forms talk do a

00:25:45,559 --> 00:25:48,259
lot of interesting validation there

00:25:46,879 --> 00:25:50,899
there's a lot of things that can be

00:25:48,259 --> 00:25:53,869
pushed to form validation out of views

00:25:50,899 --> 00:25:57,049
it's not just views does anyone here use

00:25:53,869 --> 00:25:58,609
any management commands they're an

00:25:57,049 --> 00:25:59,690
interface the user interfaces or an

00:25:58,609 --> 00:26:01,639
interface

00:25:59,690 --> 00:26:03,409
they should have comparable levels of

00:26:01,639 --> 00:26:05,419
logic in them so management commands you

00:26:03,409 --> 00:26:07,940
go just take input from the you know

00:26:05,419 --> 00:26:09,470
from the command line and then go out to

00:26:07,940 --> 00:26:10,940
another function so manager some rails

00:26:09,470 --> 00:26:14,119
pull the data in if you're doing like

00:26:10,940 --> 00:26:16,940
CSV munging in the manager class you're

00:26:14,119 --> 00:26:18,619
probably doing it wrong and then the end

00:26:16,940 --> 00:26:21,289
we want to make as few changes as we can

00:26:18,619 --> 00:26:23,149
kind of sequentially refactor as you go

00:26:21,289 --> 00:26:24,889
okay you don't have to do you know have

00:26:23,149 --> 00:26:27,220
to change everything you have a new

00:26:24,889 --> 00:26:30,320
feature you can put that in the new app

00:26:27,220 --> 00:26:32,119
if you you're using some old code making

00:26:30,320 --> 00:26:34,639
some modifications there refactor that

00:26:32,119 --> 00:26:36,200
class or that module and real quickly

00:26:34,639 --> 00:26:39,559
just a few items that we didn't talk

00:26:36,200 --> 00:26:40,070
about these all matter a little bit some

00:26:39,559 --> 00:26:42,229
more than others

00:26:40,070 --> 00:26:44,179
on may deployments going to help a lot

00:26:42,229 --> 00:26:47,239
when you're starting out and trying to

00:26:44,179 --> 00:26:51,129
get some of these changes out but in the

00:26:47,239 --> 00:26:51,129
nature of time blend it there

00:26:58,860 --> 00:27:06,940
we do have a few minutes if anyone has a

00:27:01,899 --> 00:27:13,210
question hi I use PyCharm and how do I

00:27:06,940 --> 00:27:18,070
use PyCharm to do PO with you well so

00:27:13,210 --> 00:27:19,899
the thing I would use there it is really

00:27:18,070 --> 00:27:23,769
for formatting the code and for reading

00:27:19,899 --> 00:27:26,289
through it so yeah and optimizing

00:27:23,769 --> 00:27:27,730
imports and it can it'll show you - I

00:27:26,289 --> 00:27:29,769
don't know what you need to have

00:27:27,730 --> 00:27:31,480
configured but it can show you a lot of

00:27:29,769 --> 00:27:33,960
hints about like where something's going

00:27:31,480 --> 00:27:42,159
on you see the little red or yellow or

00:27:33,960 --> 00:27:43,600
there's a great time um okay so and this

00:27:42,159 --> 00:27:45,490
is directly from experience with a

00:27:43,600 --> 00:27:49,360
legacy app didn't like that what you're

00:27:45,490 --> 00:27:51,909
talking about when you talk about having

00:27:49,360 --> 00:27:52,539
large managers small views I get that I

00:27:51,909 --> 00:27:58,779
appreciate that

00:27:52,539 --> 00:28:01,299
I run into situations though where there

00:27:58,779 --> 00:28:04,899
is way too much cross dependency between

00:28:01,299 --> 00:28:08,639
models you have huge managers with logic

00:28:04,899 --> 00:28:11,049
that isn't really related to itself yep

00:28:08,639 --> 00:28:12,309
where do you start with that I mean I

00:28:11,049 --> 00:28:15,070
know that's that's far the refactoring

00:28:12,309 --> 00:28:17,799
part of it but I mean it's one of those

00:28:15,070 --> 00:28:20,320
if you want to keep traffic crossing the

00:28:17,799 --> 00:28:23,289
bridge so to speak yeah you know and a

00:28:20,320 --> 00:28:24,399
lot and this tends to accompany most of

00:28:23,289 --> 00:28:26,919
what you were talking about you know

00:28:24,399 --> 00:28:30,399
like with the test suite is kind of

00:28:26,919 --> 00:28:33,100
present but a lot of it fails so I'm

00:28:30,399 --> 00:28:35,619
just what are your comments on that so

00:28:33,100 --> 00:28:36,820
he was gonna brief think little slide

00:28:35,619 --> 00:28:38,289
about that didn't I think one of the

00:28:36,820 --> 00:28:40,240
first things you do is just refactor the

00:28:38,289 --> 00:28:41,230
view so before you just taking that

00:28:40,240 --> 00:28:44,080
stuff out and putting into a separate

00:28:41,230 --> 00:28:47,470
function method that can be the first

00:28:44,080 --> 00:28:52,980
step rather than putting to a manager a

00:28:47,470 --> 00:28:56,429
model right away I to use a lot of just

00:28:52,980 --> 00:28:56,429
palpable functions

00:28:59,580 --> 00:29:12,389
and I've also used top-level functions

00:29:08,730 --> 00:29:17,039
that managers reference because I find

00:29:12,389 --> 00:29:19,980
those easier to test yeah once your

00:29:17,039 --> 00:29:22,200
question you mentioned refactoring how

00:29:19,980 --> 00:29:28,080
should I explain my customers this

00:29:22,200 --> 00:29:30,119
refactoring is valuable that's really

00:29:28,080 --> 00:29:31,259
that's a really good question and that

00:29:30,119 --> 00:29:33,029
your customer could be any of it could

00:29:31,259 --> 00:29:38,940
be a client could be you know manager

00:29:33,029 --> 00:29:40,590
your boss that I mean it depends on the

00:29:38,940 --> 00:29:42,239
person one of these I like to use in the

00:29:40,590 --> 00:29:44,909
physical examples and say it's basically

00:29:42,239 --> 00:29:46,679
having a you know a messy job site

00:29:44,909 --> 00:29:47,940
you're gonna have injuries you need be

00:29:46,679 --> 00:29:49,499
able to see what's going on and it's

00:29:47,940 --> 00:29:51,809
really difficult to do that you'd also

00:29:49,499 --> 00:29:54,450
just I'm sure some staffs out there you

00:29:51,809 --> 00:29:56,700
say look I read in this book just point

00:29:54,450 --> 00:29:59,039
to book they're never gonna read that's

00:29:56,700 --> 00:30:01,019
like twenty percent likelihood of errors

00:29:59,039 --> 00:30:03,149
and they know that that's one you really

00:30:01,019 --> 00:30:05,999
they're concerned about speed of

00:30:03,149 --> 00:30:07,649
delivery and bugs usually and so you can

00:30:05,999 --> 00:30:09,059
say look this makes it really hard to

00:30:07,649 --> 00:30:10,499
work on this we're spending a little

00:30:09,059 --> 00:30:12,059
time upfront to do it

00:30:10,499 --> 00:30:14,070
customership how you used to hearing

00:30:12,059 --> 00:30:16,850
that too but saying look there's some

00:30:14,070 --> 00:30:19,139
bugs and if you can point to issues that

00:30:16,850 --> 00:30:21,899
work would have been easier to find that

00:30:19,139 --> 00:30:23,159
saying and better written code then if

00:30:21,899 --> 00:30:25,889
that can be gonna work your starting

00:30:23,159 --> 00:30:30,779
point I don't have a great answer for

00:30:25,889 --> 00:30:32,940
that all right so it's time for lunch

00:30:30,779 --> 00:30:34,799
everyone and real quick there's I have

00:30:32,940 --> 00:30:36,170
more there's some Iowa epics that here's

00:30:34,799 --> 00:30:41,530
upfront and I haven't worked

00:30:36,170 --> 00:30:41,530

YouTube URL: https://www.youtube.com/watch?v=16x6AOmSOFQ


