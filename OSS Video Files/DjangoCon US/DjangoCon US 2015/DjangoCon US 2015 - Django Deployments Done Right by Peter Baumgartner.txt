Title: DjangoCon US 2015 - Django Deployments Done Right by Peter Baumgartner
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	Django Deployments Done Right

There's no single standard toolkit for deploying Django sites. In our years of consulting, we've seen lots of deployment systems in the wild and where they break down or cause pain. Independent of the system you use (Salt, Ansible, Fabric, Chef, Docker, etc.), there are a few principles a good deployment should follow:

Deployments don't take the site down or interrupt active users on the site.
Deployments don't involve more than one step or are completely automated.
Deployments are fast.
A failed deployment never takes down the current running version of the code.
Rolling back to a previous deployment is a single step.
By following these principles, deployments go from being error-prone, nerve-wracking experiences to trivial non-events in your daily development cycle. This talk will walk you through the steps necessary to create a better deployment process.
Captions: 
	00:00:16,070 --> 00:00:22,380
cool thanks everybody sorry for the

00:00:19,380 --> 00:00:24,990
issues getting the display going I am

00:00:22,380 --> 00:00:29,010
going without my notes here so hopefully

00:00:24,990 --> 00:00:31,140
I remember everything really quick about

00:00:29,010 --> 00:00:33,480
me I'm the founder at Lincoln loop

00:00:31,140 --> 00:00:38,760
here's a shot of a few of us at PyCon

00:00:33,480 --> 00:00:40,710
last year this year and at lincoln loop

00:00:38,760 --> 00:00:42,629
we do django development and consulting

00:00:40,710 --> 00:00:45,200
and everything that goes along with

00:00:42,629 --> 00:00:49,440
building django sites like devops

00:00:45,200 --> 00:00:52,140
javascript ux design today we'll talk

00:00:49,440 --> 00:00:54,600
about deployment which is something a

00:00:52,140 --> 00:00:57,899
topic i'm kind of interested in at the

00:00:54,600 --> 00:01:00,480
moment i'm also the co-author of this

00:00:57,899 --> 00:01:02,820
book high-performance django and it's

00:01:00,480 --> 00:01:06,090
all about how to build django sites that

00:01:02,820 --> 00:01:07,710
scale and are fast you can get a copy at

00:01:06,090 --> 00:01:11,420
high-performance django comm and there's

00:01:07,710 --> 00:01:15,210
little coupons in your swag bag as well

00:01:11,420 --> 00:01:18,960
so today's talk is django deployments

00:01:15,210 --> 00:01:20,369
done right but really I probably could

00:01:18,960 --> 00:01:20,820
have called a Python deployments done

00:01:20,369 --> 00:01:22,530
right

00:01:20,820 --> 00:01:26,930
there's not a whole lot of django

00:01:22,530 --> 00:01:28,979
specific stuff in here and honestly

00:01:26,930 --> 00:01:30,979
deployments done right probably would

00:01:28,979 --> 00:01:35,369
have fit most of it as well

00:01:30,979 --> 00:01:39,150
deployments for web applications all

00:01:35,369 --> 00:01:42,110
look kind of similar and so you know

00:01:39,150 --> 00:01:45,600
whether we were doing rails or node or

00:01:42,110 --> 00:01:49,140
Python or Django or whatever a lot of

00:01:45,600 --> 00:01:52,710
these things will still apply so first

00:01:49,140 --> 00:01:55,649
off what is a deployment I think it is

00:01:52,710 --> 00:01:57,360
in two ways one is the noun like the

00:01:55,649 --> 00:01:59,159
deployment is kind of all your stuff you

00:01:57,360 --> 00:02:01,829
have set up your servers your software

00:01:59,159 --> 00:02:04,740
how it all interacts and then the verb

00:02:01,829 --> 00:02:07,229
like the actual act of getting all that

00:02:04,740 --> 00:02:09,119
stuff onto your servers and keeping it

00:02:07,229 --> 00:02:11,280
up-to-date so today we're mostly going

00:02:09,119 --> 00:02:14,390
to be talking about the verb

00:02:11,280 --> 00:02:19,500
but I may interchange these a little bit

00:02:14,390 --> 00:02:22,230
so why do you want a good deployment

00:02:19,500 --> 00:02:23,819
first off uptime this is obvious like

00:02:22,230 --> 00:02:25,740
you don't want deployments to take down

00:02:23,819 --> 00:02:27,720
your site that's a problem you don't

00:02:25,740 --> 00:02:28,680
want to be scared to do deployments

00:02:27,720 --> 00:02:33,209
because they're going to take down your

00:02:28,680 --> 00:02:35,220
site but maybe less obvious is the

00:02:33,209 --> 00:02:38,540
humans that are working with the

00:02:35,220 --> 00:02:40,739
deployments one thing I've noticed is

00:02:38,540 --> 00:02:42,959
having bad to point that sort of feels

00:02:40,739 --> 00:02:45,410
like this it's like showing up at a

00:02:42,959 --> 00:02:48,720
messy office you can't find anything

00:02:45,410 --> 00:02:50,550
it's stressful you know there's probably

00:02:48,720 --> 00:02:52,830
one person that knows where the thing

00:02:50,550 --> 00:02:55,709
that you need is and there's these

00:02:52,830 --> 00:02:58,860
gatekeepers and it's it's really it's

00:02:55,709 --> 00:03:00,600
really bad for for people like I do a

00:02:58,860 --> 00:03:03,120
lot of consulting work and I work on

00:03:00,600 --> 00:03:04,500
lots of different sites and I know it's

00:03:03,120 --> 00:03:06,480
the difference at the end of the day

00:03:04,500 --> 00:03:08,220
when I'm working with a site that's you

00:03:06,480 --> 00:03:10,500
know got a really poor process and not

00:03:08,220 --> 00:03:12,930
well-managed and kind of a mess versus

00:03:10,500 --> 00:03:16,230
one that's kind of clean and tidy and

00:03:12,930 --> 00:03:18,600
does what I expect it's stressful it

00:03:16,230 --> 00:03:21,290
tends to lead to burnout and burnout

00:03:18,600 --> 00:03:24,180
leads to people leaving your company so

00:03:21,290 --> 00:03:26,790
there's a case that you know the the

00:03:24,180 --> 00:03:30,900
humans are very important to the

00:03:26,790 --> 00:03:32,250
deployment process and for me this is a

00:03:30,900 --> 00:03:34,560
good deployment you know it's kind of

00:03:32,250 --> 00:03:36,959
neat tidy you know everything is there

00:03:34,560 --> 00:03:38,820
aren't a lot of moving parts it's it's

00:03:36,959 --> 00:03:41,790
just simple good deployments are

00:03:38,820 --> 00:03:44,760
non-events it shouldn't be a you know

00:03:41,790 --> 00:03:46,680
hand wringing palms sweating like oh

00:03:44,760 --> 00:03:48,780
gosh I hope nothing breaks event when

00:03:46,680 --> 00:03:51,420
you do a deployment it should just

00:03:48,780 --> 00:03:53,100
happen and nobody really notices and

00:03:51,420 --> 00:03:57,060
good deployments are also empowering

00:03:53,100 --> 00:04:00,650
good deployments let's let your all your

00:03:57,060 --> 00:04:04,650
users users in the sense of developers

00:04:00,650 --> 00:04:07,350
get software onto servers where you know

00:04:04,650 --> 00:04:09,570
it's at staging or production that's our

00:04:07,350 --> 00:04:11,910
job as developers you know we built

00:04:09,570 --> 00:04:15,720
software and we want the world to see it

00:04:11,910 --> 00:04:18,000
and sort of not letting people manage

00:04:15,720 --> 00:04:19,769
that process of getting their software

00:04:18,000 --> 00:04:22,289
under production and having gatekeepers

00:04:19,769 --> 00:04:24,960
in the middle it is really kind of

00:04:22,289 --> 00:04:27,960
limiting so you know empowering develop

00:04:24,960 --> 00:04:30,750
- to do this stuff it's pretty powerful

00:04:27,960 --> 00:04:33,330
and then finally there's a business case

00:04:30,750 --> 00:04:35,639
for good deployments so if you know you

00:04:33,330 --> 00:04:38,840
can't convince your boss that burnout

00:04:35,639 --> 00:04:42,780
and stress is a bad thing you know

00:04:38,840 --> 00:04:44,190
good deployments you ship faster you get

00:04:42,780 --> 00:04:46,979
new features out to production quicker

00:04:44,190 --> 00:04:50,580
you fix bugs quicker and you recover

00:04:46,979 --> 00:04:54,270
from failure more quickly in my notes I

00:04:50,580 --> 00:04:58,680
had something from the state of DevOps

00:04:54,270 --> 00:05:01,349
report by puppet labs and they have you

00:04:58,680 --> 00:05:03,690
know they did a study on the differences

00:05:01,349 --> 00:05:06,720
between high-performing IT organizations

00:05:03,690 --> 00:05:08,970
and low-performing IT organizations and

00:05:06,720 --> 00:05:10,289
the numbers are really fascinating if I

00:05:08,970 --> 00:05:12,060
had my notes I would tell you what they

00:05:10,289 --> 00:05:15,900
were but like it's like you know they

00:05:12,060 --> 00:05:19,620
deploy 30 times more per day and they

00:05:15,900 --> 00:05:22,110
are you know 60 times faster to fail or

00:05:19,620 --> 00:05:24,030
to recover from failures and all this

00:05:22,110 --> 00:05:26,419
stuff so so there's a really big

00:05:24,030 --> 00:05:28,919
business use case here and then also

00:05:26,419 --> 00:05:30,210
having happy people that are at your

00:05:28,919 --> 00:05:32,220
company happy people are more productive

00:05:30,210 --> 00:05:33,330
and they're gonna leave less and you're

00:05:32,220 --> 00:05:36,210
not going to have brain drain and be

00:05:33,330 --> 00:05:37,500
training people all the time so there's

00:05:36,210 --> 00:05:41,099
a great business case for good

00:05:37,500 --> 00:05:44,639
deployments now what makes a good

00:05:41,099 --> 00:05:47,340
deployment first off it works it's

00:05:44,639 --> 00:05:49,590
surprising how many times we see people

00:05:47,340 --> 00:05:52,440
get this wrong like you know they've got

00:05:49,590 --> 00:05:55,169
a deployment process and they deploy and

00:05:52,440 --> 00:05:58,080
you know we had an issue a while ago

00:05:55,169 --> 00:06:00,449
where we made a bunch of changes to

00:05:58,080 --> 00:06:03,630
somebody's celery worker queue and they

00:06:00,449 --> 00:06:05,400
deployed it and things broke and nothing

00:06:03,630 --> 00:06:07,830
worked and we said well well you know

00:06:05,400 --> 00:06:09,479
what happened and you know the one guy

00:06:07,830 --> 00:06:11,550
who was in charge of the deployment said

00:06:09,479 --> 00:06:14,520
oh I have to go in and restart celery

00:06:11,550 --> 00:06:16,199
manually after we do deployments nobody

00:06:14,520 --> 00:06:18,900
else knew that but the one person did

00:06:16,199 --> 00:06:23,159
and so this kind of stuff is really

00:06:18,900 --> 00:06:25,860
common so yeah when it works and it's

00:06:23,159 --> 00:06:27,449
reliable it works every time and you

00:06:25,860 --> 00:06:31,349
know in the off event it doesn't work it

00:06:27,449 --> 00:06:32,729
doesn't break things in the process next

00:06:31,349 --> 00:06:34,889
up it's boring

00:06:32,729 --> 00:06:37,139
this is

00:06:34,889 --> 00:06:41,879
kind of the part where I go on a little

00:06:37,139 --> 00:06:45,240
rant about docker Daka is really cool

00:06:41,879 --> 00:06:47,250
technology and I think it's interesting

00:06:45,240 --> 00:06:48,000
for a lot of stuff if you're just

00:06:47,250 --> 00:06:50,909
getting started

00:06:48,000 --> 00:06:54,169
with deployments it's very likely not

00:06:50,909 --> 00:06:56,460
not the best choice for you docker

00:06:54,169 --> 00:06:58,830
solves a lot of interesting problems but

00:06:56,460 --> 00:07:02,789
it also kind of brings in a lot of

00:06:58,830 --> 00:07:04,830
problems of its own so I prefer kind of

00:07:02,789 --> 00:07:09,719
using technology that's tried to true

00:07:04,830 --> 00:07:12,629
tried and true true and proven and and

00:07:09,719 --> 00:07:13,830
docker you you know you end up using a

00:07:12,629 --> 00:07:15,629
lot of kind of bleeding edge technology

00:07:13,830 --> 00:07:17,729
it's it's great for a lot of use cases

00:07:15,629 --> 00:07:19,740
but for your standard hey I just need to

00:07:17,729 --> 00:07:24,210
get a Django site out on the web it's

00:07:19,740 --> 00:07:27,030
probably overkill for your purposes next

00:07:24,210 --> 00:07:29,610
up it's user friendly so you know

00:07:27,030 --> 00:07:31,020
everybody should know how to use your

00:07:29,610 --> 00:07:33,060
deployment system that doesn't mean they

00:07:31,020 --> 00:07:35,129
need to know all the internals of how

00:07:33,060 --> 00:07:38,550
your system works but they should know

00:07:35,129 --> 00:07:45,000
how to get the code from their laptop to

00:07:38,550 --> 00:07:47,279
get to a server next up it's fast I'll

00:07:45,000 --> 00:07:49,620
give you an anecdote here as well so so

00:07:47,279 --> 00:07:54,060
we worked with somebody who had a

00:07:49,620 --> 00:07:56,719
deployment system and the idea was all

00:07:54,060 --> 00:07:59,490
the tests had to pass every time before

00:07:56,719 --> 00:08:01,409
they could deploy their software sounds

00:07:59,490 --> 00:08:03,180
like a really good idea you know we want

00:08:01,409 --> 00:08:05,699
to make make sure our test suite passes

00:08:03,180 --> 00:08:07,860
before we put it into production their

00:08:05,699 --> 00:08:11,340
tests we took something like 45 minutes

00:08:07,860 --> 00:08:13,020
to an hour to run so when they wanted to

00:08:11,340 --> 00:08:15,240
do a deployment they needed to wait an

00:08:13,020 --> 00:08:18,150
hour before their servers ever got

00:08:15,240 --> 00:08:21,750
updated well a problem snuck through

00:08:18,150 --> 00:08:23,250
their continuous integration you know it

00:08:21,750 --> 00:08:25,560
didn't get caught in their tests and

00:08:23,250 --> 00:08:28,770
they deployed a change that took down

00:08:25,560 --> 00:08:31,469
their sites they knew what the fix was

00:08:28,770 --> 00:08:33,570
if they could push it out it would have

00:08:31,469 --> 00:08:36,209
been a 30 second or a minute long issue

00:08:33,570 --> 00:08:38,430
but instead it had to go through this

00:08:36,209 --> 00:08:42,510
hour-long pipeline to get into

00:08:38,430 --> 00:08:44,370
production so fast deployments are

00:08:42,510 --> 00:08:46,529
really important for recovery and

00:08:44,370 --> 00:08:48,709
they're also important for closing

00:08:46,529 --> 00:08:53,339
feedback loop with developers you know

00:08:48,709 --> 00:08:55,170
we we write code we test it locally we

00:08:53,339 --> 00:08:57,389
write tests we put it on staging

00:08:55,170 --> 00:08:59,579
environments but truly we never really

00:08:57,389 --> 00:09:02,129
know how it's going to operate until we

00:08:59,579 --> 00:09:04,050
put it into production so being able to

00:09:02,129 --> 00:09:05,550
give your developers that quick cycle of

00:09:04,050 --> 00:09:07,889
hey I built something it's in production

00:09:05,550 --> 00:09:10,939
it works and I can move on to the next

00:09:07,889 --> 00:09:14,759
thing it is really important to

00:09:10,939 --> 00:09:16,019
productivity next time it's not

00:09:14,759 --> 00:09:18,559
disruptive

00:09:16,019 --> 00:09:20,879
you shouldn't have to deploy after hours

00:09:18,559 --> 00:09:23,939
your deployments shouldn't take down the

00:09:20,879 --> 00:09:26,189
site you know even for a few seconds

00:09:23,939 --> 00:09:30,240
people shouldn't get 500 errors when

00:09:26,189 --> 00:09:33,509
deployments happen and then finally a

00:09:30,240 --> 00:09:36,449
couple of $5 words here it's ident and

00:09:33,509 --> 00:09:38,339
deterministic and in deployment these

00:09:36,449 --> 00:09:41,129
words are kind of blend into each other

00:09:38,339 --> 00:09:43,800
but basically it's I dump it in you can

00:09:41,129 --> 00:09:45,990
run it over and over again and you get

00:09:43,800 --> 00:09:48,870
the same thing and it's deterministic

00:09:45,990 --> 00:09:53,399
given the same inputs you get the same

00:09:48,870 --> 00:09:55,319
output so when you deploy you should

00:09:53,399 --> 00:09:57,540
expect that if you deploy on one server

00:09:55,319 --> 00:10:02,610
you're gonna get the exact same thing on

00:09:57,540 --> 00:10:05,879
another server so to me that's a good

00:10:02,610 --> 00:10:11,399
deployment now how do we how do we build

00:10:05,879 --> 00:10:14,759
all this stuff so first off use

00:10:11,399 --> 00:10:18,870
configuration management it's kind of

00:10:14,759 --> 00:10:20,910
key to this all working if you are not

00:10:18,870 --> 00:10:24,449
using configuration management today

00:10:20,910 --> 00:10:28,500
look at salt or ansible they are Python

00:10:24,449 --> 00:10:29,939
based and they also yeah you're gonna

00:10:28,500 --> 00:10:32,339
probably be most comfortable with those

00:10:29,939 --> 00:10:34,800
unless somebody in your shop has

00:10:32,339 --> 00:10:38,189
experience with chef or puppet or one of

00:10:34,800 --> 00:10:40,170
these other systems fabric is not a

00:10:38,189 --> 00:10:42,720
configuration management tool it's a

00:10:40,170 --> 00:10:44,490
remote execution tool and you can do

00:10:42,720 --> 00:10:47,220
configuration management like things

00:10:44,490 --> 00:10:48,779
with it but you're gonna paint yourself

00:10:47,220 --> 00:10:52,319
into a corner and you're gonna have this

00:10:48,779 --> 00:10:54,209
really messy system it's there's there's

00:10:52,319 --> 00:10:56,629
better tools out there so so don't use

00:10:54,209 --> 00:10:59,800
it for configuration management and then

00:10:56,629 --> 00:11:01,940
use it for everything like you

00:10:59,800 --> 00:11:03,530
configure your servers with your

00:11:01,940 --> 00:11:05,570
configuration management system and then

00:11:03,530 --> 00:11:07,430
update your software with other thing

00:11:05,570 --> 00:11:10,400
and then do deployments with another

00:11:07,430 --> 00:11:12,830
thing because that's kind of violating

00:11:10,400 --> 00:11:14,990
the don't repeat yourself principle and

00:11:12,830 --> 00:11:17,660
you're gonna end up in situations where

00:11:14,990 --> 00:11:20,210
those systems diverge and one stops over

00:11:17,660 --> 00:11:22,610
the other so once you kind of get

00:11:20,210 --> 00:11:25,850
everything codified into configuration

00:11:22,610 --> 00:11:29,000
management that's what you want to use

00:11:25,850 --> 00:11:30,890
to sort of drive all this stuff that

00:11:29,000 --> 00:11:33,520
includes you know setup updates deploys

00:11:30,890 --> 00:11:33,520
everything

00:11:34,310 --> 00:11:42,590
next up pin your dependencies this sort

00:11:39,200 --> 00:11:44,420
of is that deterministic thing when we

00:11:42,590 --> 00:11:47,570
deploy our software we want to know

00:11:44,420 --> 00:11:49,220
exactly what we're getting so that

00:11:47,570 --> 00:11:51,410
doesn't mean in your pip requirements

00:11:49,220 --> 00:11:53,920
you put you know install Django or even

00:11:51,410 --> 00:11:56,240
install Django less than one nine

00:11:53,920 --> 00:11:57,710
there's a chance that a minor version

00:11:56,240 --> 00:12:00,550
update you know if there's a security

00:11:57,710 --> 00:12:03,370
issue could be backwards incompatible so

00:12:00,550 --> 00:12:06,440
make sure you pin to specific versions

00:12:03,370 --> 00:12:09,140
one thing I would consider is actually

00:12:06,440 --> 00:12:11,450
just using setup that PI and putting

00:12:09,140 --> 00:12:13,550
your in your requirements and the

00:12:11,450 --> 00:12:14,960
install requires there that sort of

00:12:13,550 --> 00:12:18,040
gives you a constraint that you can't

00:12:14,960 --> 00:12:20,960
link to crazy third-party github repos

00:12:18,040 --> 00:12:24,410
you don't want to count on some random

00:12:20,960 --> 00:12:27,110
person on the Internet's code or repo

00:12:24,410 --> 00:12:30,530
being up or existing when you're doing

00:12:27,110 --> 00:12:33,160
deployments now there's certain

00:12:30,530 --> 00:12:36,650
scenarios where you can't use pi PI

00:12:33,160 --> 00:12:39,920
maybe you've got proprietary code that's

00:12:36,650 --> 00:12:41,870
shared among multiple projects maybe

00:12:39,920 --> 00:12:44,840
there's you know you need to fork

00:12:41,870 --> 00:12:47,960
something and it's not available on pi

00:12:44,840 --> 00:12:50,540
PI in that scenario consider setting up

00:12:47,960 --> 00:12:53,620
your own pi PI it's it's not that

00:12:50,540 --> 00:12:55,760
difficult to do a simple index which

00:12:53,620 --> 00:12:58,220
basically is going to get you what you

00:12:55,760 --> 00:13:02,420
need there's a project called pip to PI

00:12:58,220 --> 00:13:04,790
that will take a requirements file and

00:13:02,420 --> 00:13:06,680
dump out a directory structure that's

00:13:04,790 --> 00:13:08,540
compatible with pip and you just point

00:13:06,680 --> 00:13:11,450
pip to that and you can install stuff

00:13:08,540 --> 00:13:13,279
from it so copying that to a server that

00:13:11,450 --> 00:13:17,319
has nginx or push

00:13:13,279 --> 00:13:20,839
it up to s3 is a pretty viable solution

00:13:17,319 --> 00:13:23,629
next up if you're if you've got code

00:13:20,839 --> 00:13:25,550
that is you know you're you've fought

00:13:23,629 --> 00:13:27,649
some project and you're diverging

00:13:25,550 --> 00:13:29,779
significantly or the other project is

00:13:27,649 --> 00:13:31,639
you know dead in the water and not

00:13:29,779 --> 00:13:33,459
getting updates anymore considered as

00:13:31,639 --> 00:13:36,680
been during it put it in your project

00:13:33,459 --> 00:13:38,389
the the fewer external things you need

00:13:36,680 --> 00:13:40,999
to manage the better so just drop the

00:13:38,389 --> 00:13:43,759
code right in there and you know take

00:13:40,999 --> 00:13:46,790
ownership of it and then finally if you

00:13:43,759 --> 00:13:48,110
insist on installing out of git repo or

00:13:46,790 --> 00:13:50,870
something like that make sure it's one

00:13:48,110 --> 00:13:57,139
you own and don't don't count on other

00:13:50,870 --> 00:13:59,059
people's stuff next up this may seem

00:13:57,139 --> 00:14:02,689
obvious but see a lot of people that

00:13:59,059 --> 00:14:04,970
don't do this when you deploy you should

00:14:02,689 --> 00:14:09,230
reload and not restart your services so

00:14:04,970 --> 00:14:12,259
the difference is during a restart you

00:14:09,230 --> 00:14:14,990
basically tell your Wisby server or

00:14:12,259 --> 00:14:16,610
whatever to shut down and come back up

00:14:14,990 --> 00:14:18,889
and you're gonna have a couple seconds

00:14:16,610 --> 00:14:20,209
during that time where all their costs

00:14:18,889 --> 00:14:23,990
coming into your application are going

00:14:20,209 --> 00:14:26,059
to get dropped so what I would you know

00:14:23,990 --> 00:14:28,699
recommend doing instead is is graceful

00:14:26,059 --> 00:14:30,529
reloads and what that does is typically

00:14:28,699 --> 00:14:32,120
your whiskey worker is going to have

00:14:30,529 --> 00:14:33,709
multiple processes that are serving

00:14:32,120 --> 00:14:35,839
requests it's going to let the old

00:14:33,709 --> 00:14:38,000
processes finish it's going to bring new

00:14:35,839 --> 00:14:39,889
processes up alongside them once the old

00:14:38,000 --> 00:14:41,899
ones are finished they die and the new

00:14:39,889 --> 00:14:44,959
ones are already serving new incoming

00:14:41,899 --> 00:14:46,730
requests your front end POC sees

00:14:44,959 --> 00:14:49,879
probably support this as well nginx

00:14:46,730 --> 00:14:53,930
varnish h a proxy and that just looks

00:14:49,879 --> 00:14:57,170
like a service nginx reload on most Linn

00:14:53,930 --> 00:15:00,230
experience it works out of the box with

00:14:57,170 --> 00:15:04,730
upstart if you're using the current abun

00:15:00,230 --> 00:15:06,829
- LTS and if you're on system D putting

00:15:04,730 --> 00:15:10,519
this line in there the exact reload

00:15:06,829 --> 00:15:13,339
which is going to send the hop signal to

00:15:10,519 --> 00:15:15,649
your whiskey server which most the

00:15:13,339 --> 00:15:18,620
whisky servers will do the graceful

00:15:15,649 --> 00:15:20,920
reload when they get that signal that'll

00:15:18,620 --> 00:15:20,920
cover it

00:15:21,830 --> 00:15:27,170
next I'm making a user-friendly if

00:15:25,700 --> 00:15:29,450
you're using configuration management

00:15:27,170 --> 00:15:32,120
you might have a line like this if

00:15:29,450 --> 00:15:34,280
you're using salt that is going to SSH

00:15:32,120 --> 00:15:38,390
into your salt master server and update

00:15:34,280 --> 00:15:40,880
all your web servers that's not good

00:15:38,390 --> 00:15:43,550
and ansible you know if you're doing

00:15:40,880 --> 00:15:46,370
ansible it might look like this also not

00:15:43,550 --> 00:15:47,990
good it's kind of exposing all the

00:15:46,370 --> 00:15:51,290
details of your configuration management

00:15:47,990 --> 00:15:54,350
system to your developers and you don't

00:15:51,290 --> 00:15:55,340
need to do that much better is something

00:15:54,350 --> 00:15:57,830
like this

00:15:55,340 --> 00:16:00,200
I said fabric is not a configuration

00:15:57,830 --> 00:16:04,070
management system but it is really great

00:16:00,200 --> 00:16:05,720
at remote execution so right a deploy

00:16:04,070 --> 00:16:08,480
function and all your deployed function

00:16:05,720 --> 00:16:11,090
does is is called these other ones and

00:16:08,480 --> 00:16:13,190
if your users you know are coming in and

00:16:11,090 --> 00:16:15,200
have used anything like Heroku or

00:16:13,190 --> 00:16:18,320
something like that they're going to be

00:16:15,200 --> 00:16:21,710
much more comfortable with a script like

00:16:18,320 --> 00:16:23,810
this or a fabric command like this other

00:16:21,710 --> 00:16:28,340
than instead of stead of the other

00:16:23,810 --> 00:16:30,230
options while you're in there

00:16:28,340 --> 00:16:33,260
consider considering adding some other

00:16:30,230 --> 00:16:36,770
stuff for your users and most of these

00:16:33,260 --> 00:16:39,140
are wrappers around really simple you

00:16:36,770 --> 00:16:41,840
know kind of bash command-line options

00:16:39,140 --> 00:16:44,750
so you know hey I can double deploy to

00:16:41,840 --> 00:16:47,630
production can I easily get a branch out

00:16:44,750 --> 00:16:49,490
to a server for other people to look at

00:16:47,630 --> 00:16:50,900
it that's a super common scenario you

00:16:49,490 --> 00:16:53,120
know hey I'm working on something can

00:16:50,900 --> 00:16:56,720
you guys look it over making that

00:16:53,120 --> 00:16:59,150
scenario really easy is is great for

00:16:56,720 --> 00:17:00,830
them another common thing you know hey I

00:16:59,150 --> 00:17:03,170
need to just check the logs on the

00:17:00,830 --> 00:17:04,610
server something weirds happening they

00:17:03,170 --> 00:17:07,280
shouldn't have to SSH in anytime

00:17:04,610 --> 00:17:09,620
somebody's SSH into a server consider

00:17:07,280 --> 00:17:13,190
that an opportunity for improvement

00:17:09,620 --> 00:17:14,480
and you know the status hey what what

00:17:13,190 --> 00:17:16,880
version of the code is running on the

00:17:14,480 --> 00:17:19,780
server and you know is our all our

00:17:16,880 --> 00:17:22,330
services up and stuff like that so

00:17:19,780 --> 00:17:26,510
fabric has this really nice

00:17:22,330 --> 00:17:28,580
- shell flag that will list all the

00:17:26,510 --> 00:17:32,240
fabric commands here's an example from

00:17:28,580 --> 00:17:34,040
our lincoln loop website and it has a

00:17:32,240 --> 00:17:36,080
bunch of handy stuff and

00:17:34,040 --> 00:17:37,940
we went through most of them that also

00:17:36,080 --> 00:17:40,880
has like hey I need to open up a Jango

00:17:37,940 --> 00:17:42,530
shell or I need to see what releases

00:17:40,880 --> 00:17:46,460
happen or roll back to a previous or

00:17:42,530 --> 00:17:47,870
release when you run those you get

00:17:46,460 --> 00:17:50,059
something like this as a user

00:17:47,870 --> 00:17:52,160
there's the server status it shows you

00:17:50,059 --> 00:17:54,049
like the load and who's logged in and

00:17:52,160 --> 00:17:56,179
what version of the codes running and

00:17:54,049 --> 00:18:02,960
when the last time you whiskey restarted

00:17:56,179 --> 00:18:09,860
so next up on how we do how we do a good

00:18:02,960 --> 00:18:13,070
deployment is isolating each build so

00:18:09,860 --> 00:18:15,860
this was something that wasn't really

00:18:13,070 --> 00:18:20,510
feasible a couple years ago and wasn't

00:18:15,860 --> 00:18:22,220
super easy up until a few months ago so

00:18:20,510 --> 00:18:27,230
what we're talking about is basically

00:18:22,220 --> 00:18:29,000
every time you build a new or you do a

00:18:27,230 --> 00:18:31,309
new release you're building a fresh

00:18:29,000 --> 00:18:33,590
virtual LEM you're putting all your

00:18:31,309 --> 00:18:36,350
dependencies in it you're putting a copy

00:18:33,590 --> 00:18:38,240
of your code in it probably even a copy

00:18:36,350 --> 00:18:41,360
of your static files in it and you sort

00:18:38,240 --> 00:18:43,340
of have this bundled you know directory

00:18:41,360 --> 00:18:46,820
that has everything to run this version

00:18:43,340 --> 00:18:50,299
of code it's really nice for a few a few

00:18:46,820 --> 00:18:52,850
reasons one is if if you do have

00:18:50,299 --> 00:18:55,910
something that breaks down during the

00:18:52,850 --> 00:18:59,929
deployment you're not doing it in your

00:18:55,910 --> 00:19:02,270
running version of the code so you know

00:18:59,929 --> 00:19:03,470
the typical process is hey I've got my

00:19:02,270 --> 00:19:06,679
code on the server I'm just going to

00:19:03,470 --> 00:19:08,480
update it on the fly and install my any

00:19:06,679 --> 00:19:11,120
new requirements I have and then reload

00:19:08,480 --> 00:19:13,160
my server if something breaks during

00:19:11,120 --> 00:19:15,590
that process you've now broken your

00:19:13,160 --> 00:19:18,169
production site and you know are

00:19:15,590 --> 00:19:19,940
scrambling to fix it so this way we you

00:19:18,169 --> 00:19:20,510
can kind of build build one in the

00:19:19,940 --> 00:19:22,580
background

00:19:20,510 --> 00:19:26,630
once it's all ready you switch over to

00:19:22,580 --> 00:19:27,980
it it helps with that determinism you

00:19:26,630 --> 00:19:30,590
don't have any Croft left over from

00:19:27,980 --> 00:19:34,700
previous builds it has anybody here been

00:19:30,590 --> 00:19:36,559
bitten by like a stray pyc file that you

00:19:34,700 --> 00:19:38,120
know you deleted everything but the pyc

00:19:36,559 --> 00:19:41,419
file is still there and imports aren't

00:19:38,120 --> 00:19:44,150
working yeah so you know stuff like that

00:19:41,419 --> 00:19:45,200
old old versions of stuff that you've

00:19:44,150 --> 00:19:47,870
now removed from

00:19:45,200 --> 00:19:49,340
requirements but are still in there all

00:19:47,870 --> 00:19:52,340
those types of things can kind of bite

00:19:49,340 --> 00:19:55,760
you and prevent you from having kind of

00:19:52,340 --> 00:19:58,610
a true build so the other nice thing

00:19:55,760 --> 00:20:01,909
that this creates is it's really easy to

00:19:58,610 --> 00:20:03,740
roll back quickly to previous versions

00:20:01,909 --> 00:20:06,549
in the event of an issue so I'll show

00:20:03,740 --> 00:20:06,549
you that in a second

00:20:06,669 --> 00:20:13,250
here's again as an example from our

00:20:09,230 --> 00:20:15,620
Lincoln lucam website it's really simple

00:20:13,250 --> 00:20:19,519
but the same thing applies for you know

00:20:15,620 --> 00:20:21,980
larger sites so we have this sort of

00:20:19,519 --> 00:20:24,860
home directory for our site it's got a

00:20:21,980 --> 00:20:27,139
data directory in it in that goes any

00:20:24,860 --> 00:20:28,850
sort of user-generated content stuff

00:20:27,139 --> 00:20:31,789
that isn't version so you know user

00:20:28,850 --> 00:20:35,240
uploads and stuff like that it's got a

00:20:31,789 --> 00:20:37,669
deploy em JSON file I'm not really going

00:20:35,240 --> 00:20:41,120
to go into this but that's a kind of a

00:20:37,669 --> 00:20:45,549
twelve factor type application thing

00:20:41,120 --> 00:20:49,880
where we store secrets like API keys or

00:20:45,549 --> 00:20:52,130
your you know database IP and password

00:20:49,880 --> 00:20:53,659
and all that so that comes in from the

00:20:52,130 --> 00:20:57,529
configuration system and then the app

00:20:53,659 --> 00:21:00,950
reads it there's a package cache which

00:20:57,529 --> 00:21:02,840
is sort of the secret to making being

00:21:00,950 --> 00:21:06,320
able to create new virtual ends every

00:21:02,840 --> 00:21:08,779
time really fast so the the change that

00:21:06,320 --> 00:21:11,269
happened a few months ago is that pip

00:21:08,779 --> 00:21:14,870
now when you install dependencies will

00:21:11,269 --> 00:21:18,679
build Python wheels wheels are like

00:21:14,870 --> 00:21:22,519
binary kind of blobs of Python modules

00:21:18,679 --> 00:21:25,460
so if you have C extensions like common

00:21:22,519 --> 00:21:30,440
ones psycho PG to the Postgres driver or

00:21:25,460 --> 00:21:31,789
pillow your image manipulator those two

00:21:30,440 --> 00:21:34,970
usually take really long time to build

00:21:31,789 --> 00:21:37,850
like on the you know minutes so that

00:21:34,970 --> 00:21:39,679
made it really hard to build fresh every

00:21:37,850 --> 00:21:42,200
time because your deployment got really

00:21:39,679 --> 00:21:44,510
really slow the nice thing is that pit

00:21:42,200 --> 00:21:46,730
by default now creates these wheels and

00:21:44,510 --> 00:21:50,179
sticks them into a cache and will check

00:21:46,730 --> 00:21:52,960
their first for if you if you have an

00:21:50,179 --> 00:21:57,230
updated versions it's almost an instant

00:21:52,960 --> 00:21:59,120
install so using that that package cache

00:21:57,230 --> 00:22:02,870
and keeping kind of outs

00:21:59,120 --> 00:22:05,240
of our versioned repo we can reinstall

00:22:02,870 --> 00:22:08,540
everything really quickly there's a

00:22:05,240 --> 00:22:11,090
check out of a repo you whiskey cache

00:22:08,540 --> 00:22:13,610
you can ignore its we're actually using

00:22:11,090 --> 00:22:15,320
you whiskey's caching mechanism

00:22:13,610 --> 00:22:17,570
there's our you whiskey configuration

00:22:15,320 --> 00:22:19,880
file which tells you is gay how to run

00:22:17,570 --> 00:22:23,720
and then there's a virtual ends

00:22:19,880 --> 00:22:26,000
directory so this is what the virtual

00:22:23,720 --> 00:22:31,340
ends directory looks like those are

00:22:26,000 --> 00:22:32,840
commit hashes of our code and the date

00:22:31,340 --> 00:22:36,140
you know that each one's a directory

00:22:32,840 --> 00:22:37,820
it's actually a virtual lump and you can

00:22:36,140 --> 00:22:41,540
see the date on there that shows the

00:22:37,820 --> 00:22:43,880
time when that one was deployed and the

00:22:41,540 --> 00:22:46,700
trick to kind of making this all work is

00:22:43,880 --> 00:22:48,920
you don't run out of a commit hash you

00:22:46,700 --> 00:22:50,600
run out of this current directory the

00:22:48,920 --> 00:22:54,020
current directory is just a symlink

00:22:50,600 --> 00:22:57,230
to whatever is currently running us key

00:22:54,020 --> 00:23:00,490
points to that any sort of like static

00:22:57,230 --> 00:23:03,170
file serving points to that and so

00:23:00,490 --> 00:23:05,480
updating to a new one or rolling back to

00:23:03,170 --> 00:23:07,460
a previous one all it is is you change

00:23:05,480 --> 00:23:11,570
the sim link you reload your services

00:23:07,460 --> 00:23:14,570
and you're on a new version so this is

00:23:11,570 --> 00:23:20,420
really nice for a bunch of reasons one

00:23:14,570 --> 00:23:23,840
is if you have here's an example I ran

00:23:20,420 --> 00:23:25,580
into so we had a site and it had

00:23:23,840 --> 00:23:27,410
dependencies and those dependencies have

00:23:25,580 --> 00:23:31,880
dependencies and one of the sub

00:23:27,410 --> 00:23:34,640
dependencies got updated and broke one

00:23:31,880 --> 00:23:40,370
of our dependencies and that dependency

00:23:34,640 --> 00:23:43,250
wasn't pinned in the McCain and so we

00:23:40,370 --> 00:23:46,190
had a working version of the code we

00:23:43,250 --> 00:23:50,270
deployed a new version and things broke

00:23:46,190 --> 00:23:53,360
and we weren't sure why and once we

00:23:50,270 --> 00:23:55,370
finally pinned it down you know you you

00:23:53,360 --> 00:23:57,200
try to like release a new version or

00:23:55,370 --> 00:23:59,030
roll back to the previous version and

00:23:57,200 --> 00:24:01,070
it's still broken you know you're using

00:23:59,030 --> 00:24:05,360
the same code but something else down

00:24:01,070 --> 00:24:07,460
the stack is broken so using this it

00:24:05,360 --> 00:24:10,429
went in the in the event when those

00:24:07,460 --> 00:24:11,960
things happen you can flip back to a

00:24:10,429 --> 00:24:12,390
previous working version of the code

00:24:11,960 --> 00:24:15,000
even

00:24:12,390 --> 00:24:17,790
your dependency tree has broken even if

00:24:15,000 --> 00:24:20,160
you know pipey I went down or github

00:24:17,790 --> 00:24:22,290
went down or whatever you always know

00:24:20,160 --> 00:24:24,090
that you have some good working version

00:24:22,290 --> 00:24:27,060
that you can quickly flip back to and

00:24:24,090 --> 00:24:28,710
that can be priceless you know other

00:24:27,060 --> 00:24:31,140
scenarios we've run into like hey you

00:24:28,710 --> 00:24:33,630
deploy code and somebody put something

00:24:31,140 --> 00:24:35,610
in it that broke and that person is not

00:24:33,630 --> 00:24:38,400
available right now and you don't have

00:24:35,610 --> 00:24:40,590
time to dig in and troubleshoot it hey

00:24:38,400 --> 00:24:42,030
let's just punt and rollback and you

00:24:40,590 --> 00:24:43,170
know we'll know we know or be safe and

00:24:42,030 --> 00:24:48,240
we don't have to muck around with our

00:24:43,170 --> 00:24:49,650
get history or anything like that so the

00:24:48,240 --> 00:24:52,940
other interesting thing that that this

00:24:49,650 --> 00:24:55,320
kind of gives you is the ability to

00:24:52,940 --> 00:24:58,200
build once and deploy everywhere and

00:24:55,320 --> 00:24:59,880
that's kind of one of the big things

00:24:58,200 --> 00:25:01,650
that people like about docker the you

00:24:59,880 --> 00:25:03,090
know the promise of docker that you

00:25:01,650 --> 00:25:05,040
build and you know exactly what's in

00:25:03,090 --> 00:25:08,880
there and you can ship that image to

00:25:05,040 --> 00:25:10,920
multiple servers so what you can do is

00:25:08,880 --> 00:25:12,470
have a build server maybe it's Jenkins

00:25:10,920 --> 00:25:15,750
or something like that a new a new

00:25:12,470 --> 00:25:17,790
commit comes in and it starts building

00:25:15,750 --> 00:25:21,270
all your dependencies and into these

00:25:17,790 --> 00:25:22,170
wheels you can build it all and to throw

00:25:21,270 --> 00:25:25,410
it all into a tarball

00:25:22,170 --> 00:25:27,330
and ship that archive off to all your

00:25:25,410 --> 00:25:29,490
servers which simply unpack it and run

00:25:27,330 --> 00:25:31,380
it you don't need to install all your

00:25:29,490 --> 00:25:33,750
development headers on your production

00:25:31,380 --> 00:25:36,200
servers they just live in one spot and

00:25:33,750 --> 00:25:39,480
everybody else gets precompiled wheels

00:25:36,200 --> 00:25:42,810
there's a project by Arman Kona hair

00:25:39,480 --> 00:25:45,410
from did flask and ginger he's over here

00:25:42,810 --> 00:25:48,840
with sentry today called platter and

00:25:45,410 --> 00:25:50,370
it's a really small Python script I

00:25:48,840 --> 00:25:53,310
don't know it's probably four or five

00:25:50,370 --> 00:25:57,800
hundred lines that does all this for you

00:25:53,310 --> 00:26:00,810
so you can you can also stop all your

00:25:57,800 --> 00:26:03,030
static files in there and it's a really

00:26:00,810 --> 00:26:05,460
nice way to kind of isolate Python

00:26:03,030 --> 00:26:07,260
builds and be able to ship you know a

00:26:05,460 --> 00:26:12,720
single file out to your servers which

00:26:07,260 --> 00:26:15,860
you can easily unpack and run next up is

00:26:12,720 --> 00:26:18,120
database migrations so some of you may

00:26:15,860 --> 00:26:19,590
have noticed like if we're going to

00:26:18,120 --> 00:26:21,930
easily roll back to previous versions

00:26:19,590 --> 00:26:23,280
how do database migrations play into

00:26:21,930 --> 00:26:25,380
that you know

00:26:23,280 --> 00:26:28,500
what about backwards migrations and all

00:26:25,380 --> 00:26:32,070
that quite frankly I've never seen

00:26:28,500 --> 00:26:34,110
people really used backwards migrations

00:26:32,070 --> 00:26:35,760
effectively the idea that you can you

00:26:34,110 --> 00:26:38,250
know move forward and then move

00:26:35,760 --> 00:26:39,780
backwards what I would recommend instead

00:26:38,250 --> 00:26:42,900
is just maintaining backwards

00:26:39,780 --> 00:26:45,330
compatibility for a little bit until you

00:26:42,900 --> 00:26:47,940
know that your current code is good code

00:26:45,330 --> 00:26:51,300
so if you need if you think you're gonna

00:26:47,940 --> 00:26:52,980
delete a column don't release the code

00:26:51,300 --> 00:26:54,740
that doesn't depend on that column and

00:26:52,980 --> 00:26:58,110
delete the column in the same deploy

00:26:54,740 --> 00:26:59,970
release the code first and once you're

00:26:58,110 --> 00:27:03,150
sure everything's working then release a

00:26:59,970 --> 00:27:05,760
migration which is going to delete that

00:27:03,150 --> 00:27:09,570
column so you always maintain kind of a

00:27:05,760 --> 00:27:11,550
buffer that you can roll back if you

00:27:09,570 --> 00:27:14,880
have a really large database and get

00:27:11,550 --> 00:27:18,390
sufficient enough a sufficient amount of

00:27:14,880 --> 00:27:21,800
traffic you can run into the risk of

00:27:18,390 --> 00:27:24,780
locking your database with a migration

00:27:21,800 --> 00:27:28,530
so you know maybe you're adding a new

00:27:24,780 --> 00:27:30,390
column and it needs to have a default

00:27:28,530 --> 00:27:33,210
value or something like that and you

00:27:30,390 --> 00:27:35,370
know your your database starts ripping

00:27:33,210 --> 00:27:37,140
through all the columns it puts a lock

00:27:35,370 --> 00:27:39,930
on the table and nobody else can write

00:27:37,140 --> 00:27:42,870
to the table until that migration

00:27:39,930 --> 00:27:47,070
completes so if you have a scenario like

00:27:42,870 --> 00:27:48,630
that there's a post that describes it

00:27:47,070 --> 00:27:53,160
all in detail much better than I could

00:27:48,630 --> 00:27:57,060
it's there it's by also in my notes

00:27:53,160 --> 00:27:58,820
Ludvig Han I think is his name and it

00:27:57,060 --> 00:28:02,370
basically gives you techniques on how to

00:27:58,820 --> 00:28:04,620
identify migrations that are going to be

00:28:02,370 --> 00:28:06,900
problematic how to split those

00:28:04,620 --> 00:28:09,600
migrations up into multiple migrations

00:28:06,900 --> 00:28:13,620
that will allow you to do the same thing

00:28:09,600 --> 00:28:19,380
without locking your database and it's a

00:28:13,620 --> 00:28:20,250
really great resource and I think this

00:28:19,380 --> 00:28:25,500
is last one

00:28:20,250 --> 00:28:27,960
tracking releases so you want to when

00:28:25,500 --> 00:28:30,560
you release new code know that new code

00:28:27,960 --> 00:28:32,940
was released and

00:28:30,560 --> 00:28:37,200
when it was released and what was

00:28:32,940 --> 00:28:39,960
released this is like hugely important

00:28:37,200 --> 00:28:42,750
for regression testing it's really

00:28:39,960 --> 00:28:44,610
common on big high-traffic sites that

00:28:42,750 --> 00:28:46,620
you know you're moving fast and you're

00:28:44,610 --> 00:28:49,170
releasing new code and a week later

00:28:46,620 --> 00:28:52,140
somebody checks your you know app

00:28:49,170 --> 00:28:54,750
metrics and holy cow were 30% slower

00:28:52,140 --> 00:28:58,110
than we were a week ago what the heck

00:28:54,750 --> 00:29:01,260
happened you know and you've put in tons

00:28:58,110 --> 00:29:05,220
of new stuff in the interim being able

00:29:01,260 --> 00:29:07,640
to go back and see you know hey on this

00:29:05,220 --> 00:29:10,890
date we released this this commit and

00:29:07,640 --> 00:29:14,250
end performance degraded immediately

00:29:10,890 --> 00:29:16,350
after that is huge and it's it's it's

00:29:14,250 --> 00:29:18,660
frequent that it's not immediate it's

00:29:16,350 --> 00:29:20,220
like hey I need to know from a week ago

00:29:18,660 --> 00:29:23,100
or two weeks ago or something like that

00:29:20,220 --> 00:29:25,110
so getting this data really close to

00:29:23,100 --> 00:29:28,020
where your tracking performance is

00:29:25,110 --> 00:29:30,870
helpful if you pay New Relic a bunch of

00:29:28,020 --> 00:29:33,780
money you can get them to you can you

00:29:30,870 --> 00:29:36,120
can do this op bead includes it includes

00:29:33,780 --> 00:29:37,890
it and you know you can even just like

00:29:36,120 --> 00:29:39,360
push it to a slack channel it might not

00:29:37,890 --> 00:29:42,120
get it close to your performance but at

00:29:39,360 --> 00:29:45,330
least you have that data somewhere that

00:29:42,120 --> 00:29:48,860
you can reference it later and usually

00:29:45,330 --> 00:29:51,060
these are just like a curl API call and

00:29:48,860 --> 00:29:52,890
really easy to add into your

00:29:51,060 --> 00:29:55,170
configuration management system kind of

00:29:52,890 --> 00:29:58,020
at the last step like hey new codes

00:29:55,170 --> 00:30:01,110
deployed make a curl call to this REST

00:29:58,020 --> 00:30:07,260
API and it'll handle the all the release

00:30:01,110 --> 00:30:09,510
tracking for you so to wrap up the thing

00:30:07,260 --> 00:30:11,820
I've noticed with building our own

00:30:09,510 --> 00:30:14,100
configuration management system and and

00:30:11,820 --> 00:30:17,370
building it for clients over the years

00:30:14,100 --> 00:30:20,430
is probably the the biggest difference

00:30:17,370 --> 00:30:22,830
the biggest you know thing that that

00:30:20,430 --> 00:30:25,500
helped us was that we are always

00:30:22,830 --> 00:30:26,820
chipping away and making it better if

00:30:25,500 --> 00:30:28,560
you're not using configuration

00:30:26,820 --> 00:30:31,440
management today you don't need to sit

00:30:28,560 --> 00:30:33,360
down and stop everything and spend a

00:30:31,440 --> 00:30:34,980
week or two to you know build out the

00:30:33,360 --> 00:30:38,010
perfect configuration management system

00:30:34,980 --> 00:30:39,510
start small like add you know next time

00:30:38,010 --> 00:30:41,370
you need to add a new user to a server

00:30:39,510 --> 00:30:42,840
do it and do it with a configuration

00:30:41,370 --> 00:30:43,149
management system next time you need to

00:30:42,840 --> 00:30:45,429
chain

00:30:43,149 --> 00:30:46,779
configuration file you know put that

00:30:45,429 --> 00:30:49,539
into your configuration management

00:30:46,779 --> 00:30:52,359
system and and slowly chip away over

00:30:49,539 --> 00:30:54,369
time you know think of the humans that

00:30:52,359 --> 00:30:56,859
need to use this system you know that

00:30:54,369 --> 00:30:59,169
anecdote I gave earlier about hey you

00:30:56,859 --> 00:31:01,119
know oh yeah we we have a we have a

00:30:59,169 --> 00:31:03,279
configuration management system but it

00:31:01,119 --> 00:31:05,169
doesn't restart celery when when you

00:31:03,279 --> 00:31:08,229
deploy that's going to come back to bite

00:31:05,169 --> 00:31:11,080
somebody like you know soon so when you

00:31:08,229 --> 00:31:12,789
run into those issues fix them figure

00:31:11,080 --> 00:31:14,320
out how you can you know anytime you do

00:31:12,789 --> 00:31:17,139
have a failure figure out what went

00:31:14,320 --> 00:31:19,269
wrong and how you can fix it and make

00:31:17,139 --> 00:31:20,710
that fix it's not something that you

00:31:19,269 --> 00:31:22,749
need to invest tons and tons of time

00:31:20,710 --> 00:31:25,029
into but you need to kind of chip away

00:31:22,749 --> 00:31:26,469
at it and make things better and

00:31:25,029 --> 00:31:28,299
eventually you'll get to a system that's

00:31:26,469 --> 00:31:30,460
really really nice and really reliable

00:31:28,299 --> 00:31:34,089
and has all those features I talked

00:31:30,460 --> 00:31:36,669
about earlier if it's slow look into why

00:31:34,089 --> 00:31:39,549
it's slow can you make it faster can you

00:31:36,669 --> 00:31:41,529
you know do some caching or something of

00:31:39,549 --> 00:31:43,839
some files like we talked about with the

00:31:41,529 --> 00:31:46,089
wheels you know that's that's one thing

00:31:43,839 --> 00:31:49,479
we ran into with with our deployments we

00:31:46,089 --> 00:31:51,909
were doing some node stuff for front-end

00:31:49,479 --> 00:31:54,339
files you know building stuff with gulp

00:31:51,909 --> 00:31:56,830
and it it took I don't know 20 or 30

00:31:54,339 --> 00:31:58,690
seconds and I spend an hour looking into

00:31:56,830 --> 00:32:00,219
it and figured out how to you know cut

00:31:58,690 --> 00:32:02,830
that time in half

00:32:00,219 --> 00:32:04,719
all that time adds up and if nobody ever

00:32:02,830 --> 00:32:06,639
looks at it you're gonna end up with

00:32:04,719 --> 00:32:09,639
this system that's slow and people don't

00:32:06,639 --> 00:32:10,869
want to use and then finally make it

00:32:09,639 --> 00:32:13,479
easier when people ask you questions

00:32:10,869 --> 00:32:15,999
when people are confused figure out why

00:32:13,479 --> 00:32:16,539
and figure out how you can improve and

00:32:15,999 --> 00:32:18,909
make it better

00:32:16,539 --> 00:32:20,349
so you know people don't have questions

00:32:18,909 --> 00:32:22,690
in the future that they can empower

00:32:20,349 --> 00:32:24,549
themselves to do this to build their own

00:32:22,690 --> 00:32:27,729
software and to put it on to your

00:32:24,549 --> 00:32:30,279
systems and that will make make people

00:32:27,729 --> 00:32:31,450
happier both on the sysadmin side that

00:32:30,279 --> 00:32:33,999
they're not you know constantly

00:32:31,450 --> 00:32:36,190
answering the same questions and on the

00:32:33,999 --> 00:32:38,469
development side that they're you know

00:32:36,190 --> 00:32:43,419
they don't need to have a gatekeeper to

00:32:38,469 --> 00:32:46,779
to get this code out so that's it thanks

00:32:43,419 --> 00:32:48,519
I have a few minutes left so I'd be

00:32:46,779 --> 00:32:50,710
happy to field a few questions and I

00:32:48,519 --> 00:32:54,969
also am at the booth for link and loop

00:32:50,710 --> 00:32:57,599
over here and yeah feel free to come

00:32:54,969 --> 00:32:57,599
talk to me thanks

00:33:02,500 --> 00:33:07,490
thanks very great talk I come from a

00:33:05,420 --> 00:33:10,160
sysadmin background and in the sysadmin

00:33:07,490 --> 00:33:12,230
world we're starting to learn all the

00:33:10,160 --> 00:33:14,030
kind of similar stuff that you've just

00:33:12,230 --> 00:33:16,250
been describing that we've we're coming

00:33:14,030 --> 00:33:17,750
from a perspective of you know things

00:33:16,250 --> 00:33:19,130
systems that don't change for a couple

00:33:17,750 --> 00:33:20,660
of years and oh hang on you want to

00:33:19,130 --> 00:33:24,800
deploy twice a week or twice a day or

00:33:20,660 --> 00:33:26,750
twice an hour whatever the big movies

00:33:24,800 --> 00:33:30,260
and changes in the system will people

00:33:26,750 --> 00:33:32,660
like Jean Kim who has written a couple

00:33:30,260 --> 00:33:34,870
of things the Phoenix project I'm just

00:33:32,660 --> 00:33:36,650
wondering if you're familiar with that

00:33:34,870 --> 00:33:39,770
come talk to you later

00:33:36,650 --> 00:33:41,630
and and Tom Lehman Chile who along with

00:33:39,770 --> 00:33:45,650
a couple of co-authors have has written

00:33:41,630 --> 00:33:46,730
a book which is cloud administration and

00:33:45,650 --> 00:33:47,960
they don't use the word cloud anywhere

00:33:46,730 --> 00:33:50,390
except on the front cover which is great

00:33:47,960 --> 00:33:52,910
but basically coming from a sysadmin

00:33:50,390 --> 00:33:57,110
perspective these similar kind of things

00:33:52,910 --> 00:33:59,420
so was what trying to ask a question

00:33:57,110 --> 00:34:01,190
rather than just deliver a comment but

00:33:59,420 --> 00:34:02,960
you know if you if you had heard of

00:34:01,190 --> 00:34:05,090
those things or not a bit then I know

00:34:02,960 --> 00:34:07,660
I'm not familiar with them and I I do

00:34:05,090 --> 00:34:11,120
have a was originally a sysadmin

00:34:07,660 --> 00:34:13,910
probably not a very strong one and then

00:34:11,120 --> 00:34:15,860
became a developer so I do have some

00:34:13,910 --> 00:34:18,770
empathy from the sysadmin

00:34:15,860 --> 00:34:21,260
side of things but you know I I wasn't

00:34:18,770 --> 00:34:23,600
like a down in the trenches for 15 years

00:34:21,260 --> 00:34:26,080
type guys so I'll have to check those

00:34:23,600 --> 00:34:26,080
out Thanks

00:34:26,419 --> 00:34:31,880
can you talk about the the symlinks used

00:34:30,679 --> 00:34:34,429
for the virtual ends that you talked

00:34:31,880 --> 00:34:35,660
about using the current symlink seems

00:34:34,429 --> 00:34:37,400
like a really good way to solve a lot of

00:34:35,660 --> 00:34:41,810
problems is there some similar you use

00:34:37,400 --> 00:34:43,610
for the actual for the code also so that

00:34:41,810 --> 00:34:45,830
you mentioned not leaving croft like the

00:34:43,610 --> 00:34:48,650
right speed files does that is that how

00:34:45,830 --> 00:34:53,870
you do that was great also so yeah

00:34:48,650 --> 00:34:56,720
there's this repo directory here and

00:34:53,870 --> 00:35:01,010
that's a directory above the virtual m's

00:34:56,720 --> 00:35:05,360
that is our git checkout so we literally

00:35:01,010 --> 00:35:08,300
do a git pull on that and then we copy a

00:35:05,360 --> 00:35:13,570
like a flat copy of that code directly

00:35:08,300 --> 00:35:13,570
into the virtual lamp and we are

00:35:13,609 --> 00:35:18,380
we put a set up top hi file in it's like

00:35:16,309 --> 00:35:22,640
super simple but then we pip install

00:35:18,380 --> 00:35:24,859
that that copy of the code into that

00:35:22,640 --> 00:35:26,660
virtual imp so it's all sort of baked in

00:35:24,859 --> 00:35:28,460
there and it's independent of the repo

00:35:26,660 --> 00:35:30,650
even if you do like a fourth push and

00:35:28,460 --> 00:35:33,619
blow out the commit like that that is

00:35:30,650 --> 00:35:37,119
sort of you know baked in there and you

00:35:33,619 --> 00:35:41,380
can't mess with it so yeah thank you

00:35:37,119 --> 00:35:43,430
hi again with the separate virtual ends

00:35:41,380 --> 00:35:45,769
does that mean that your Python

00:35:43,430 --> 00:35:47,509
processes need to be restarted or can

00:35:45,769 --> 00:35:51,799
you reload those right when you're

00:35:47,509 --> 00:35:56,269
switching virtual so what we're trying

00:35:51,799 --> 00:35:58,640
to do is yeah that's an if you if you're

00:35:56,269 --> 00:36:00,319
you know your USQ process or your celery

00:35:58,640 --> 00:36:03,019
process or something like that it's

00:36:00,319 --> 00:36:05,119
running from within that virtual em yeah

00:36:03,019 --> 00:36:08,359
you can't reload it you know because

00:36:05,119 --> 00:36:09,920
it's it's still that copy so what we've

00:36:08,359 --> 00:36:13,309
done is sort of taking a different

00:36:09,920 --> 00:36:15,289
philosophy a little bit and looked at

00:36:13,309 --> 00:36:18,619
you whiskey and celery more like we're

00:36:15,289 --> 00:36:20,599
looking at nginx or Postgres those are

00:36:18,619 --> 00:36:22,329
like system level services so you

00:36:20,599 --> 00:36:25,940
whiskey and celery are gonna get

00:36:22,329 --> 00:36:28,009
installed kind of on the system at a

00:36:25,940 --> 00:36:31,489
higher level and then they just point

00:36:28,009 --> 00:36:35,210
into those directories and those virtual

00:36:31,489 --> 00:36:37,609
M's which lets you kind of do all that

00:36:35,210 --> 00:36:39,470
stuff so we don't have long-running

00:36:37,609 --> 00:36:42,200
processes that are getting kicked off

00:36:39,470 --> 00:36:46,450
from managed PI they're getting kicked

00:36:42,200 --> 00:36:46,450
off you know by external kind of Python

00:36:48,940 --> 00:36:54,170
so this morning I did that as your

00:36:51,829 --> 00:36:56,900
Microsoft challenge and I pushed to

00:36:54,170 --> 00:37:00,349
github and boom it went live yep and I

00:36:56,900 --> 00:37:03,079
was able to do that and this feels like

00:37:00,349 --> 00:37:06,470
a really big you know learning curve so

00:37:03,079 --> 00:37:10,220
at what point will I not want to just do

00:37:06,470 --> 00:37:13,940
the Microsoft Azure or Heroku or yeah

00:37:10,220 --> 00:37:15,470
whatever method as a beginner or as just

00:37:13,940 --> 00:37:18,999
like a kind of if when you're doing

00:37:15,470 --> 00:37:21,319
small scale smaller scale development

00:37:18,999 --> 00:37:24,170
platform as a service is amazing I

00:37:21,319 --> 00:37:25,950
strongly recommend it like you as if you

00:37:24,170 --> 00:37:27,720
don't want to do

00:37:25,950 --> 00:37:30,570
the stuff they probably do this stuff in

00:37:27,720 --> 00:37:33,060
the background for you but at some point

00:37:30,570 --> 00:37:35,610
if you know you're learning more and

00:37:33,060 --> 00:37:38,160
you're using new services or you're

00:37:35,610 --> 00:37:39,900
starting to you know get lots of traffic

00:37:38,160 --> 00:37:42,540
and you're starting you know those

00:37:39,900 --> 00:37:45,840
services can get expensive quickly when

00:37:42,540 --> 00:37:48,120
you're you know running large-scale

00:37:45,840 --> 00:37:51,210
stuff and at some point you start to

00:37:48,120 --> 00:37:53,040
kind of feel pain you like you're you

00:37:51,210 --> 00:37:54,690
know I'm too constricted using this I

00:37:53,040 --> 00:37:57,090
want to do something that's not possible

00:37:54,690 --> 00:37:59,070
on here or holy cow I'm paying a ton of

00:37:57,090 --> 00:38:01,920
money and I think I could do this you

00:37:59,070 --> 00:38:03,300
know cheaper on my own at that point you

00:38:01,920 --> 00:38:04,830
know you that that's when you start

00:38:03,300 --> 00:38:08,190
looking at you know how do I kind of

00:38:04,830 --> 00:38:11,700
manage all this stuff myself but I'm I'm

00:38:08,190 --> 00:38:14,400
very it's it's kind of sad to me how

00:38:11,700 --> 00:38:16,260
much stuff there is that developers need

00:38:14,400 --> 00:38:19,200
to know to get a website online these

00:38:16,260 --> 00:38:21,840
days and anything that kind of makes

00:38:19,200 --> 00:38:23,820
that smaller and and prevents people

00:38:21,840 --> 00:38:26,760
from like just getting so overwhelmed

00:38:23,820 --> 00:38:29,610
that they give up is a good thing so I'm

00:38:26,760 --> 00:38:32,370
a big fan of pass and and and all that

00:38:29,610 --> 00:38:34,620
stuff and it works great at a certain

00:38:32,370 --> 00:38:39,030
point and there's points where it

00:38:34,620 --> 00:38:41,880
doesn't this might be a kind of out

00:38:39,030 --> 00:38:44,010
there question if you have multiple

00:38:41,880 --> 00:38:45,660
projects that sort of depend on each

00:38:44,010 --> 00:38:47,040
other and depend on versioning so what

00:38:45,660 --> 00:38:50,460
you're talking about like being able to

00:38:47,040 --> 00:38:52,260
easily roll back but then what would be

00:38:50,460 --> 00:38:53,760
your suggestion for if you have that

00:38:52,260 --> 00:38:55,860
where you're deploying multiple projects

00:38:53,760 --> 00:39:00,510
completely separate but maybe one of

00:38:55,860 --> 00:39:02,550
them messes up yeah right

00:39:00,510 --> 00:39:05,430
so if they're not dependent on each

00:39:02,550 --> 00:39:07,440
other you just create like two of these

00:39:05,430 --> 00:39:09,990
directories and and serve them

00:39:07,440 --> 00:39:11,550
separately the the challenging part is

00:39:09,990 --> 00:39:16,530
when they start to depend on each other

00:39:11,550 --> 00:39:18,810
and there's no how to talk on how to how

00:39:16,530 --> 00:39:20,220
to kind of gracefully you know you start

00:39:18,810 --> 00:39:22,050
talking about then like you're in a

00:39:20,220 --> 00:39:24,120
service-oriented architecture and

00:39:22,050 --> 00:39:26,910
there's multiple services and how do I

00:39:24,120 --> 00:39:30,270
ensure that this service you know is

00:39:26,910 --> 00:39:32,700
talking the same same you know messages

00:39:30,270 --> 00:39:36,040
that this service understands that's

00:39:32,700 --> 00:39:37,570
really hard and my

00:39:36,040 --> 00:39:42,610
take on it is like the whole

00:39:37,570 --> 00:39:45,040
micro-services stuff is you don't do it

00:39:42,610 --> 00:39:48,180
until you like really really feel the

00:39:45,040 --> 00:39:52,300
pain of the big monolithic project and

00:39:48,180 --> 00:39:54,370
stick with you know there's there's you

00:39:52,300 --> 00:39:58,060
know really big organizations that have

00:39:54,370 --> 00:40:01,060
I think like Twitter and maybe Google to

00:39:58,060 --> 00:40:03,370
have like monolithic repos that are huge

00:40:01,060 --> 00:40:04,930
that encompass like multiple services

00:40:03,370 --> 00:40:07,510
and everything but then they still have

00:40:04,930 --> 00:40:09,430
like you know hey there's one commit

00:40:07,510 --> 00:40:12,610
that represents a certain state of the

00:40:09,430 --> 00:40:15,270
world and you know it gets really hard

00:40:12,610 --> 00:40:20,500
you know I've done this sort of system

00:40:15,270 --> 00:40:22,600
sorry stop I've done this service system

00:40:20,500 --> 00:40:24,910
you know with like multiple projects and

00:40:22,600 --> 00:40:28,150
yeah you can do like to commit hashes as

00:40:24,910 --> 00:40:31,750
your unique identifier but that breaks

00:40:28,150 --> 00:40:34,350
down pretty quickly so I don't hope that

00:40:31,750 --> 00:40:34,350

YouTube URL: https://www.youtube.com/watch?v=SUczHTa7WmQ


