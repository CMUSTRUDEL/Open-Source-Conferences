Title: DjangoCon US 2015 -  Lightning Talks - Part 2
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	Lightning Talks

Dmitry Filippov "Django assistance in PyCharm"

Paul Bailey "End the Holy Wars of Formatting"

Trey Hunner "JavaScript is Becoming Pythonic"

Eduardo Rivas " Sublime Text  Django"

Jeff Sumner "Texas Swim Center"

Francisco Saldana "Keeping Fast Fast: Rapid Iteration with TransactionTestCase"

Raphael Merx "Mocking Outbound Requests with HTTPretty"

James Tauber "Building a Learning Management System with Pinax"

Miroslav Shubernetskiy "Filtering in Django"

Armin Ronacher "rb - Scaling Redis in Python"

Brendan Sterne "Code Wiki"

Russell Keith-Magee "Professional Yak Coiffure"
Captions: 
	00:00:15,440 --> 00:00:21,449
I'm so excited to be here today and

00:00:18,420 --> 00:00:23,250
opening this lighting talk session I

00:00:21,449 --> 00:00:25,890
bellucci filippov by Sean product

00:00:23,250 --> 00:00:27,539
manager and in this talk I'm going to

00:00:25,890 --> 00:00:29,369
show you some of the essential Python

00:00:27,539 --> 00:00:32,520
features that make many jungle

00:00:29,369 --> 00:00:36,000
developers more productive so here i

00:00:32,520 --> 00:00:38,219
have a very simple django poles project

00:00:36,000 --> 00:00:41,820
opened in PyCharm and very first feature

00:00:38,219 --> 00:00:46,350
i wanted to show you is Django managed

00:00:41,820 --> 00:00:49,829
by console you can get it by eating

00:00:46,350 --> 00:00:54,899
control out there here's it you can just

00:00:49,829 --> 00:00:57,510
start typing the task name it

00:00:54,899 --> 00:00:59,910
autocompletes everything it also

00:00:57,510 --> 00:01:04,860
provides you the options you have for

00:00:59,910 --> 00:01:09,570
this task here is it an app name so our

00:01:04,860 --> 00:01:11,510
application oh it also supports the fazi

00:01:09,570 --> 00:01:14,640
search in completion so you can just

00:01:11,510 --> 00:01:18,600
type their middle part of the task name

00:01:14,640 --> 00:01:21,180
and it will also be completed you can

00:01:18,600 --> 00:01:24,840
also get control Q and it will give you

00:01:21,180 --> 00:01:31,710
a quick documentation for that task so

00:01:24,840 --> 00:01:35,090
here we have Django okay one two three

00:01:31,710 --> 00:01:38,400
one two three and hear how it works

00:01:35,090 --> 00:01:40,470
another cool thing about PyCharm is that

00:01:38,400 --> 00:01:43,140
it has really reached navigational

00:01:40,470 --> 00:01:47,750
capabilities so you can go to everywhere

00:01:43,140 --> 00:01:51,540
go to in search for any file or model or

00:01:47,750 --> 00:01:57,090
method just by clicking double shift for

00:01:51,540 --> 00:01:59,820
example let's go to the detail view we

00:01:57,090 --> 00:02:02,790
can also go to the team played by just

00:01:59,820 --> 00:02:06,689
clicking this small icon here we can go

00:02:02,790 --> 00:02:10,050
back by clicking this one searching yep

00:02:06,689 --> 00:02:12,780
choosing the right one we can go to the

00:02:10,050 --> 00:02:15,959
URLs by clicking ctrl be

00:02:12,780 --> 00:02:19,380
going back and this is really useful to

00:02:15,959 --> 00:02:22,380
go around your code another great thing

00:02:19,380 --> 00:02:25,410
and a great feature in pycharm that many

00:02:22,380 --> 00:02:27,600
Jago developers like the most from the

00:02:25,410 --> 00:02:30,090
feedback that I've got is a Python

00:02:27,600 --> 00:02:33,180
debugger it can be used to debug the

00:02:30,090 --> 00:02:35,600
Python code without node up but it also

00:02:33,180 --> 00:02:40,680
can be used to debug Django team plays

00:02:35,600 --> 00:02:42,930
so just let's go to the team played put

00:02:40,680 --> 00:02:46,830
some break points right inside the

00:02:42,930 --> 00:02:48,739
editor here here and here and run the

00:02:46,830 --> 00:02:54,090
Django server in the debug mode pycharm

00:02:48,739 --> 00:02:57,690
automatically opens the browser so we go

00:02:54,090 --> 00:03:02,040
here and this is the point when PyCharm

00:02:57,690 --> 00:03:04,200
debugger stop the execution and we have

00:03:02,040 --> 00:03:07,140
everything here you can inspect your

00:03:04,200 --> 00:03:12,959
variables you can move them to watches

00:03:07,140 --> 00:03:18,090
you can even set values for them like

00:03:12,959 --> 00:03:19,620
well here too k and do other ordinary

00:03:18,090 --> 00:03:23,220
things like stepping through your cold

00:03:19,620 --> 00:03:25,470
navigating to the next breakpoint all

00:03:23,220 --> 00:03:26,970
the usual stuff so here how it works and

00:03:25,470 --> 00:03:28,820
the last but not the least thing I

00:03:26,970 --> 00:03:31,320
wanted to show you is how I run my tests

00:03:28,820 --> 00:03:33,000
so I'm navigating with search everywhere

00:03:31,320 --> 00:03:39,090
to my test file you can see the bunch of

00:03:33,000 --> 00:03:41,010
tests here I'm just creating new run

00:03:39,090 --> 00:03:44,310
configuration it would be Django test

00:03:41,010 --> 00:03:45,959
configuration give it a name test by

00:03:44,310 --> 00:03:48,660
Chum recognizes all the tests in your

00:03:45,959 --> 00:03:52,170
file and in your project actually you

00:03:48,660 --> 00:03:54,239
can run it and you can see that all

00:03:52,170 --> 00:03:57,180
tests are pests you can see the problems

00:03:54,239 --> 00:04:03,359
here the test results here you can

00:03:57,180 --> 00:04:10,200
navigate to any test right from here

00:04:03,359 --> 00:04:14,010
break it run it results pot failed fix

00:04:10,200 --> 00:04:21,570
it buy it again and now we are all set

00:04:14,010 --> 00:04:25,290
so this was just a quick demo of Python

00:04:21,570 --> 00:04:28,980
capabilities please feel free to

00:04:25,290 --> 00:04:31,200
I know widen doesn't work okay please

00:04:28,980 --> 00:04:33,870
feel free to visit our website to learn

00:04:31,200 --> 00:04:35,490
more follow us on twitter if you have

00:04:33,870 --> 00:04:38,310
any questions I will be around and

00:04:35,490 --> 00:04:40,380
please feel free to request any features

00:04:38,310 --> 00:04:46,830
you might have in mind they are very

00:04:40,380 --> 00:04:48,360
welcome so thank you very much ok my

00:04:46,830 --> 00:04:50,610
name is paul bailey and i'm going to

00:04:48,360 --> 00:04:55,620
talk about ending the holy wars of

00:04:50,610 --> 00:04:57,330
formatting so i know this was mentioned

00:04:55,620 --> 00:05:01,200
at least in one other talk and we had

00:04:57,330 --> 00:05:04,280
two talks about style but if you never

00:05:01,200 --> 00:05:08,700
seen the beyond pepe video from PI con

00:05:04,280 --> 00:05:12,120
2008 it's great by raymond heading juror

00:05:08,700 --> 00:05:16,110
he talks about you know going beyond

00:05:12,120 --> 00:05:18,360
just format spacing and going into

00:05:16,110 --> 00:05:20,700
better architecture decisions and things

00:05:18,360 --> 00:05:22,920
that you should do to make your code

00:05:20,700 --> 00:05:25,950
better and one of the great quotes from

00:05:22,920 --> 00:05:29,610
the talk is Pepe unto thyself and not

00:05:25,950 --> 00:05:32,340
unto others so use it as a tool to make

00:05:29,610 --> 00:05:36,240
your code better but not necessarily the

00:05:32,340 --> 00:05:39,300
beat other people down but there's a

00:05:36,240 --> 00:05:41,220
problem with this we're Python the ESA's

00:05:39,300 --> 00:05:44,160
I mean one of the big reasons we get in

00:05:41,220 --> 00:05:47,670
the Python is because we love elegant

00:05:44,160 --> 00:05:50,190
code some of us are probably OCD and

00:05:47,670 --> 00:05:53,790
like to like have everything lined up

00:05:50,190 --> 00:05:57,500
exactly we get kind of mad when things

00:05:53,790 --> 00:06:01,350
go over 80 characters and so we are

00:05:57,500 --> 00:06:05,460
wasting mental energy and as developers

00:06:01,350 --> 00:06:08,250
a lot of times we're fighting styles in

00:06:05,460 --> 00:06:11,010
code reviews maybe we're spending too

00:06:08,250 --> 00:06:14,520
much energy on spacing and things that

00:06:11,010 --> 00:06:16,470
don't mean as much you know like the

00:06:14,520 --> 00:06:17,850
naming talk was great today that's

00:06:16,470 --> 00:06:20,610
definitely something you want to focus

00:06:17,850 --> 00:06:23,730
more energy on then some of your just

00:06:20,610 --> 00:06:26,460
trivial formatting things and then also

00:06:23,730 --> 00:06:28,410
we have developers that are maybe doing

00:06:26,460 --> 00:06:31,770
python that are coming from another

00:06:28,410 --> 00:06:35,640
background they have different sense of

00:06:31,770 --> 00:06:37,920
style you know older newer developers

00:06:35,640 --> 00:06:42,780
different languages

00:06:37,920 --> 00:06:45,450
and styles change over time also I kinda

00:06:42,780 --> 00:06:49,110
have to use this to basically say like I

00:06:45,450 --> 00:06:54,690
have a secret confession i like to space

00:06:49,110 --> 00:06:57,840
indentations of the four yes but exactly

00:06:54,690 --> 00:07:01,640
Wow at least it's not three space

00:06:57,840 --> 00:07:05,910
invitation I think that's like the worst

00:07:01,640 --> 00:07:08,280
yes I know it's it's awful but there is

00:07:05,910 --> 00:07:12,000
a solution we don't have to waste our

00:07:08,280 --> 00:07:14,700
time and our mental energy on just

00:07:12,000 --> 00:07:17,450
trivial formatting issues we can

00:07:14,700 --> 00:07:19,980
autoformat our code and have a

00:07:17,450 --> 00:07:24,600
consistent style throughout our whole

00:07:19,980 --> 00:07:27,350
code base with not much work so this was

00:07:24,600 --> 00:07:31,950
actually popularized by the go format

00:07:27,350 --> 00:07:34,980
tool written for go and there's actually

00:07:31,950 --> 00:07:38,280
tool for python that was released in

00:07:34,980 --> 00:07:40,740
March by Google it's called a yet

00:07:38,280 --> 00:07:42,060
another Python formatting actually they

00:07:40,740 --> 00:07:44,640
don't have that anywhere in there I'm

00:07:42,060 --> 00:07:46,410
assuming that's what it means so there's

00:07:44,640 --> 00:07:50,550
a link to the github you can also pip

00:07:46,410 --> 00:07:51,830
install it and also you know we're web

00:07:50,550 --> 00:07:54,860
developers so we're probably doing

00:07:51,830 --> 00:07:57,290
JavaScript formatting there's a

00:07:54,860 --> 00:08:01,140
JavaScript formatting tool by our do

00:07:57,290 --> 00:08:03,480
called j/s format and so just to kind of

00:08:01,140 --> 00:08:05,850
run through a little example here I'm

00:08:03,480 --> 00:08:08,400
the web chair for pi Texas so I went

00:08:05,850 --> 00:08:11,970
ahead and ran this on the PI Texas code

00:08:08,400 --> 00:08:16,560
and it is a newer newer tool like I said

00:08:11,970 --> 00:08:19,650
so um you know some of the options or

00:08:16,560 --> 00:08:24,680
the features aren't there yet so I wrote

00:08:19,650 --> 00:08:27,150
a little script that basically lets me

00:08:24,680 --> 00:08:29,820
you know I don't want to run formatting

00:08:27,150 --> 00:08:31,920
on migrations that's generate a code so

00:08:29,820 --> 00:08:33,990
let's just skip some of that so you know

00:08:31,920 --> 00:08:35,970
I put a few options in there that aren't

00:08:33,990 --> 00:08:38,760
in the default tool when made this

00:08:35,970 --> 00:08:42,780
little script you can copy this and kind

00:08:38,760 --> 00:08:44,760
of you know use it to your own risk but

00:08:42,780 --> 00:08:47,370
there's three different styles of coding

00:08:44,760 --> 00:08:49,530
that come with the tool by default

00:08:47,370 --> 00:08:51,480
there's a google there's a Pepe and

00:08:49,530 --> 00:08:53,329
there's a chromium style

00:08:51,480 --> 00:08:55,470
which all have their own default

00:08:53,329 --> 00:08:58,500
configurations there's a million

00:08:55,470 --> 00:09:02,279
different options that you can kind of

00:08:58,500 --> 00:09:08,760
style with it and i know there you go i

00:09:02,279 --> 00:09:10,170
set my two spaces so what's it sure um i

00:09:08,760 --> 00:09:13,589
guess i don't know the mac command there

00:09:10,170 --> 00:09:16,589
we go yeah so I mean you can pass it

00:09:13,589 --> 00:09:21,380
like a JSON or a dictionary type object

00:09:16,589 --> 00:09:24,120
and it has you know hundreds of little

00:09:21,380 --> 00:09:26,430
tweaks that you can do to it to get the

00:09:24,120 --> 00:09:29,730
style that you want and all of your

00:09:26,430 --> 00:09:31,260
formatting will then all of your code

00:09:29,730 --> 00:09:35,790
base will be on that formatting so this

00:09:31,260 --> 00:09:40,079
is fairly boring but here you go have it

00:09:35,790 --> 00:09:43,079
come up here this is all of the kind of

00:09:40,079 --> 00:09:48,570
whitespace changes that did to the PI

00:09:43,079 --> 00:09:50,790
Texas code base so if you're in Texas on

00:09:48,570 --> 00:09:54,329
the twenty-fifth through 27th come to PI

00:09:50,790 --> 00:10:00,329
Texas it's in college station and that's

00:09:54,329 --> 00:10:02,250
the end of my talk my name is Trey I'm

00:10:00,329 --> 00:10:04,589
going to show you how javascript is

00:10:02,250 --> 00:10:06,029
becoming a little bit more like Python a

00:10:04,589 --> 00:10:07,769
word of warning i will be going very

00:10:06,029 --> 00:10:12,000
quickly and there are code examples on

00:10:07,769 --> 00:10:13,110
almost every slide so ekman script is

00:10:12,000 --> 00:10:15,300
the language specification that

00:10:13,110 --> 00:10:16,709
javascript is based on in this

00:10:15,300 --> 00:10:18,360
presentation I'm going to show off

00:10:16,709 --> 00:10:20,339
features that were added in equus script

00:10:18,360 --> 00:10:23,670
6 which is also known as xmas script

00:10:20,339 --> 00:10:26,010
2015 ekta script 6 isn't yet supported

00:10:23,670 --> 00:10:28,649
by any browsers but you can start using

00:10:26,010 --> 00:10:31,500
it today you just need to use bable

00:10:28,649 --> 00:10:33,569
bable allows you to compile your xmas

00:10:31,500 --> 00:10:35,730
crypt 6 code down to xmas crypt 5 code

00:10:33,569 --> 00:10:38,519
which is understood by all modern web

00:10:35,730 --> 00:10:40,500
browsers this pre compilation process is

00:10:38,519 --> 00:10:41,940
kind of like the pre compilation step

00:10:40,500 --> 00:10:45,630
that's necessary for something like

00:10:41,940 --> 00:10:47,940
coffee script so our first new feature

00:10:45,630 --> 00:10:50,370
is fat arrows fat arrows are a new

00:10:47,940 --> 00:10:52,410
shortened function syntax fat arrows can

00:10:50,370 --> 00:10:55,110
be used kind of like lambda functions in

00:10:52,410 --> 00:10:57,120
Python they also have a longer syntax

00:10:55,110 --> 00:10:59,699
but i'm going to only show off the short

00:10:57,120 --> 00:11:02,010
syntax of my slides today we don't use

00:10:59,699 --> 00:11:03,360
lambdas very often in Python partially

00:11:02,010 --> 00:11:05,279
because we don't use callbacks very

00:11:03,360 --> 00:11:07,410
often in JavaScript

00:11:05,279 --> 00:11:08,759
callbacks are used all the time so fat

00:11:07,410 --> 00:11:12,360
error functions are actually really

00:11:08,759 --> 00:11:14,100
useful when you combine fat error

00:11:12,360 --> 00:11:16,620
functions with JavaScript array methods

00:11:14,100 --> 00:11:18,930
they can serve a similar purpose to list

00:11:16,620 --> 00:11:20,339
comprehensions in Python in addition to

00:11:18,930 --> 00:11:22,319
being easier on the eyes fat arrow

00:11:20,339 --> 00:11:24,809
functions inherit the this binding of

00:11:22,319 --> 00:11:26,339
their outer scope for anyone who is

00:11:24,809 --> 00:11:30,540
wrestled with javascript function

00:11:26,339 --> 00:11:32,550
binding that's a really big deal with

00:11:30,540 --> 00:11:34,980
template strings you can now do string

00:11:32,550 --> 00:11:37,259
interpolation in JavaScript so this is

00:11:34,980 --> 00:11:40,230
kind of like Python strings format

00:11:37,259 --> 00:11:42,959
method except that string template

00:11:40,230 --> 00:11:45,809
strings in Java Script interpolate using

00:11:42,959 --> 00:11:50,040
the current scope automatically unlike

00:11:45,809 --> 00:11:51,689
Python string.format template strings

00:11:50,040 --> 00:11:54,269
also allow you to make multi-line

00:11:51,689 --> 00:11:56,430
strings so this is kind of like pythons

00:11:54,269 --> 00:11:59,089
triple quoted strings you Candice triple

00:11:56,430 --> 00:12:01,079
a shin at the same time as well

00:11:59,089 --> 00:12:04,439
javascript did not use to have a class

00:12:01,079 --> 00:12:06,839
in tax it does now is what it looks like

00:12:04,439 --> 00:12:08,639
of course no class implementation is

00:12:06,839 --> 00:12:11,809
complete without a properly loaded foot

00:12:08,639 --> 00:12:14,970
gun so JavaScript also supports

00:12:11,809 --> 00:12:16,769
inheritance actually think the super

00:12:14,970 --> 00:12:18,689
syntax is a little bit more elegant in

00:12:16,769 --> 00:12:20,459
JavaScript that it is in Python you can

00:12:18,689 --> 00:12:22,709
see that in both of those methods there

00:12:20,459 --> 00:12:26,250
I realize this is a lot of code you can

00:12:22,709 --> 00:12:27,809
look at the slides afterwards JavaScript

00:12:26,250 --> 00:12:29,459
now has a spread operator this is

00:12:27,809 --> 00:12:31,920
similar to pythons argument on packing

00:12:29,459 --> 00:12:33,860
operator and Python it's the asterisk

00:12:31,920 --> 00:12:37,649
symbol in java script we use three dots

00:12:33,860 --> 00:12:41,399
you can use this to unpack an array into

00:12:37,649 --> 00:12:43,199
the arguments of a function call you can

00:12:41,399 --> 00:12:44,939
also use the spread operator to unpack

00:12:43,199 --> 00:12:47,279
one array inside of another array and

00:12:44,939 --> 00:12:52,649
this example combined would be the array

00:12:47,279 --> 00:12:53,910
one two three four the rest operator is

00:12:52,649 --> 00:12:55,679
basically the opposite of the spread

00:12:53,910 --> 00:12:57,779
operator again instead of an asterisk

00:12:55,679 --> 00:12:59,220
this uses three dots in JavaScript this

00:12:57,779 --> 00:13:00,899
allows us to make a function that can

00:12:59,220 --> 00:13:03,089
take a variable number of arguments so

00:13:00,899 --> 00:13:06,839
for example our most difference function

00:13:03,089 --> 00:13:09,209
here takes any number of arguments in

00:13:06,839 --> 00:13:11,399
this code example we're using the rest

00:13:09,209 --> 00:13:15,899
operator once and the spread operator

00:13:11,399 --> 00:13:17,910
twice JavaScript now allows you to

00:13:15,899 --> 00:13:18,960
specify default parameter values this

00:13:17,910 --> 00:13:20,610
does not mean that

00:13:18,960 --> 00:13:22,770
script has keyword arguments it doesn't

00:13:20,610 --> 00:13:28,200
these are just default values for

00:13:22,770 --> 00:13:29,970
positional arguments just like Python

00:13:28,200 --> 00:13:32,970
JavaScript now has iterable unpacking

00:13:29,970 --> 00:13:35,640
you can unpack a raise into multiple

00:13:32,970 --> 00:13:37,710
variables or you can use this for

00:13:35,640 --> 00:13:42,530
multiple assignment or for variable

00:13:37,710 --> 00:13:44,970
swapping here x y&z would be 14 and to

00:13:42,530 --> 00:13:46,440
this one is actually wishful thinking

00:13:44,970 --> 00:13:48,270
because this is only a proposed language

00:13:46,440 --> 00:13:49,920
feature the currently proposed syntax

00:13:48,270 --> 00:13:51,870
for JavaScript decorators looks just

00:13:49,920 --> 00:13:53,550
like pythons decorator syntax so

00:13:51,870 --> 00:13:56,610
hopefully JavaScript will had that have

00:13:53,550 --> 00:13:59,190
decorators soon javascript actually has

00:13:56,610 --> 00:14:00,930
modules now they're properly named

00:13:59,190 --> 00:14:03,570
spaced and they work pretty similar to

00:14:00,930 --> 00:14:05,880
the way modules work in Python so unlike

00:14:03,570 --> 00:14:09,320
many other languages importing and

00:14:05,880 --> 00:14:11,520
namespacing just like in Python are

00:14:09,320 --> 00:14:13,140
linked together in JavaScript so

00:14:11,520 --> 00:14:16,740
whenever you import something it's going

00:14:13,140 --> 00:14:18,090
to be named spaced so I just showed you

00:14:16,740 --> 00:14:20,550
a small handful of new features

00:14:18,090 --> 00:14:22,380
supported by JavaScript you can learn

00:14:20,550 --> 00:14:25,020
more about Babel and about xmas script

00:14:22,380 --> 00:14:26,460
six or action script 2015 and try it out

00:14:25,020 --> 00:14:29,550
right from your web browser by going to

00:14:26,460 --> 00:14:30,750
the babel website feel free to reach out

00:14:29,550 --> 00:14:36,210
to me on twitter if you have any

00:14:30,750 --> 00:14:38,310
questions about this all right i'm here

00:14:36,210 --> 00:14:41,550
to talk a little bit about sublime text

00:14:38,310 --> 00:14:44,280
and how you can convert it into a more

00:14:41,550 --> 00:14:48,840
Django friendly text editor or even an

00:14:44,280 --> 00:14:52,350
ID so I'm going to be focusing in in

00:14:48,840 --> 00:14:53,910
three main plugins anaconda something

00:14:52,350 --> 00:14:57,930
for get or mercurial if you're into that

00:14:53,910 --> 00:14:59,790
and M it so first of all what you get

00:14:57,930 --> 00:15:01,950
for free when you're using sublime text

00:14:59,790 --> 00:15:05,100
to work with Python or Django you get

00:15:01,950 --> 00:15:06,990
snippets syntax highlighting multiple

00:15:05,100 --> 00:15:10,890
edit points regex search code folding

00:15:06,990 --> 00:15:13,470
all that stuff right so anaconda is like

00:15:10,890 --> 00:15:15,630
the biggest one which you're going to

00:15:13,470 --> 00:15:19,020
install and you're going to get Auto

00:15:15,630 --> 00:15:21,500
competition go to definition find usages

00:15:19,020 --> 00:15:24,690
of a function of the class or variable

00:15:21,500 --> 00:15:27,810
display sickness of classes and

00:15:24,690 --> 00:15:30,320
functions get a doc string for anything

00:15:27,810 --> 00:15:33,350
that you have in your environment and

00:15:30,320 --> 00:15:36,540
live Pepe tour you in flake eight

00:15:33,350 --> 00:15:39,420
hinting in your code so here I'm

00:15:36,540 --> 00:15:42,240
demonstrating two features for example

00:15:39,420 --> 00:15:44,550
in the first one on the top you can see

00:15:42,240 --> 00:15:46,980
i'm importing from Django DB models

00:15:44,550 --> 00:15:49,770
import and let's say I want to know

00:15:46,980 --> 00:15:51,810
which are my options regarding integer

00:15:49,770 --> 00:15:55,050
fields right so I just type some

00:15:51,810 --> 00:15:57,930
integers and I get the competition for

00:15:55,050 --> 00:16:00,060
every single possible integer field I

00:15:57,930 --> 00:16:02,190
can get so it's easier if you don't

00:16:00,060 --> 00:16:05,570
remember you know where to find some

00:16:02,190 --> 00:16:09,210
stuff in Django like words resolve

00:16:05,570 --> 00:16:11,340
where's the generic of use and the

00:16:09,210 --> 00:16:14,700
second example you can see on the first

00:16:11,340 --> 00:16:16,860
line I've imported the least view the

00:16:14,700 --> 00:16:19,190
generic list view and I can get the doc

00:16:16,860 --> 00:16:22,680
string right there in case you need help

00:16:19,190 --> 00:16:25,770
knowing what what I'm getting a little

00:16:22,680 --> 00:16:29,430
hint on how to use it the little white

00:16:25,770 --> 00:16:32,850
outlines you see in the in the second

00:16:29,430 --> 00:16:35,040
screen shot they show the where you have

00:16:32,850 --> 00:16:37,170
in this case would be paid Pepe tour

00:16:35,040 --> 00:16:39,090
flake eight errors for example the least

00:16:37,170 --> 00:16:41,760
you have imported by having been using

00:16:39,090 --> 00:16:44,490
it so you can detect right as you write

00:16:41,760 --> 00:16:46,770
your code if you're importing anything

00:16:44,490 --> 00:16:49,320
I'm not using it or defining a variable

00:16:46,770 --> 00:16:51,480
and not using it or a typo which has

00:16:49,320 --> 00:16:53,550
been any many times where I just think

00:16:51,480 --> 00:16:56,190
I've defined it a variable but it turns

00:16:53,550 --> 00:16:58,590
out I just miss one letter and I get a

00:16:56,190 --> 00:17:02,130
huge exception I don't understand you

00:16:58,590 --> 00:17:05,490
you get say from that with this you can

00:17:02,130 --> 00:17:08,550
also get a full report on your pet bait

00:17:05,490 --> 00:17:10,410
and flick aight flake eight errors so

00:17:08,550 --> 00:17:12,750
for example you can see if you're not

00:17:10,410 --> 00:17:15,390
complying with line lengths or whatever

00:17:12,750 --> 00:17:17,430
you can also set your own rules here

00:17:15,390 --> 00:17:19,589
because I know not everybody follows

00:17:17,430 --> 00:17:22,230
every single little error that Pepe

00:17:19,589 --> 00:17:25,439
gives you so for example I'm using 89

00:17:22,230 --> 00:17:26,550
characters there you can do pretty much

00:17:25,439 --> 00:17:28,020
whatever you like there's a

00:17:26,550 --> 00:17:30,300
configuration file you have you can

00:17:28,020 --> 00:17:32,430
commit it to your version control and

00:17:30,300 --> 00:17:35,370
that'll make it easy for every developer

00:17:32,430 --> 00:17:36,470
using the same plugins as you to have

00:17:35,370 --> 00:17:40,100
the same lint

00:17:36,470 --> 00:17:42,650
capacities so next one is forget and

00:17:40,100 --> 00:17:46,429
mercurial you get VCS gutter that is

00:17:42,650 --> 00:17:49,429
little indicators right beside your line

00:17:46,429 --> 00:17:53,090
numbers I'm showing later you can do any

00:17:49,429 --> 00:17:54,890
VCS operation from the comment palette

00:17:53,090 --> 00:17:59,240
so you don't need to open a terminal or

00:17:54,890 --> 00:18:01,100
a separate application to to get do any

00:17:59,240 --> 00:18:04,580
of this at commit check out poop push

00:18:01,100 --> 00:18:07,460
plaintiff or lug so here for example if

00:18:04,580 --> 00:18:09,289
you see on the top one on line fourteen

00:18:07,460 --> 00:18:12,530
and fifteen I have two little plus signs

00:18:09,289 --> 00:18:15,799
those say those are new lines and then

00:18:12,530 --> 00:18:18,440
online 79 and 18 I have a little red

00:18:15,799 --> 00:18:20,299
marker you can say you can see i deleted

00:18:18,440 --> 00:18:22,669
some lines there so it's easy to see

00:18:20,299 --> 00:18:25,610
which code you've been touching before

00:18:22,669 --> 00:18:28,190
committing and then I have a diff right

00:18:25,610 --> 00:18:30,919
in sublime text when I can see which

00:18:28,190 --> 00:18:33,650
lines I change in the previous comment

00:18:30,919 --> 00:18:37,429
or a comet your coworker did or whatever

00:18:33,650 --> 00:18:41,120
and then Emmett you know become a CSS

00:18:37,429 --> 00:18:44,830
HTML Willie Nelson right so you can

00:18:41,120 --> 00:18:46,730
expand CSS selectors into full HTML

00:18:44,830 --> 00:18:49,549
abbreviations for pretty much any rule

00:18:46,730 --> 00:18:51,679
and free prefixes in case you need to

00:18:49,549 --> 00:18:54,799
you're not using auto prefix or

00:18:51,679 --> 00:18:57,590
something like that so for example this

00:18:54,799 --> 00:19:00,710
is bootstrap it's super useful for me to

00:18:57,590 --> 00:19:02,990
for prototyping lorem ipsum and stuff

00:19:00,710 --> 00:19:06,380
like that bye but in the first line on

00:19:02,990 --> 00:19:10,250
the top you can see I read in a CSS

00:19:06,380 --> 00:19:14,169
selector class container class row then

00:19:10,250 --> 00:19:17,630
I want to have three four column grid

00:19:14,169 --> 00:19:20,299
cells with an h2 and then a paragraph

00:19:17,630 --> 00:19:22,370
just hit tab and you get a full HTML

00:19:20,299 --> 00:19:26,530
structure out of it so it's super easy

00:19:22,370 --> 00:19:28,640
to get prototyping it helps a lot with

00:19:26,530 --> 00:19:32,330
when you're working with templates too

00:19:28,640 --> 00:19:34,820
and this is for prefixing you know if

00:19:32,330 --> 00:19:38,510
you're using something new as as flexbox

00:19:34,820 --> 00:19:42,830
you can simply prefix any CSS property

00:19:38,510 --> 00:19:44,090
with a dash and you'll get automatic

00:19:42,830 --> 00:19:47,690
prefixing with the current browser

00:19:44,090 --> 00:19:53,000
support so yeah that's it thanks

00:19:47,690 --> 00:19:55,789
I work here at the University of Texas

00:19:53,000 --> 00:19:57,679
and just a quarter mile east of here

00:19:55,789 --> 00:20:05,629
there's the Texas Swim Center where we

00:19:57,679 --> 00:20:06,740
have oh it magic to fix itself sorry

00:20:05,629 --> 00:20:09,350
where we have a million and a half

00:20:06,740 --> 00:20:12,350
gallon pool that all of our athletes can

00:20:09,350 --> 00:20:14,899
train in and is part of that pool they

00:20:12,350 --> 00:20:17,029
have a longhorn aquatics club where they

00:20:14,899 --> 00:20:20,389
help recruit the next generation of

00:20:17,029 --> 00:20:22,250
Texas athletes so we have 6 to 17 year

00:20:20,389 --> 00:20:23,990
olds who come in and use the pool

00:20:22,250 --> 00:20:26,840
routinely and they were actually doing

00:20:23,990 --> 00:20:28,429
like manual check-ins and getting really

00:20:26,840 --> 00:20:31,429
long lines and they requested that we

00:20:28,429 --> 00:20:32,899
build them a badge system just like the

00:20:31,429 --> 00:20:35,000
athletes had so that they could print

00:20:32,899 --> 00:20:38,750
out badges for everyone they could scan

00:20:35,000 --> 00:20:40,759
in solve all those line problems we're

00:20:38,750 --> 00:20:43,850
kind of a new agile team we decided to

00:20:40,759 --> 00:20:45,830
try and apply best practices listen to

00:20:43,850 --> 00:20:48,289
our you user experience person and we

00:20:45,830 --> 00:20:50,210
started out by developing personas and

00:20:48,289 --> 00:20:52,879
writing user stories like we'd never

00:20:50,210 --> 00:20:56,179
done for the first time we had some fun

00:20:52,879 --> 00:20:59,269
with it and there are a couple of the

00:20:56,179 --> 00:21:01,309
personas that we created some of the

00:20:59,269 --> 00:21:03,259
user stories we wrote and as we really

00:21:01,309 --> 00:21:05,240
thought about the the people who are

00:21:03,259 --> 00:21:07,340
going to be using the center we realized

00:21:05,240 --> 00:21:10,429
that our customer had sent us way to

00:21:07,340 --> 00:21:12,139
detail to spec that in fact the badges

00:21:10,429 --> 00:21:14,120
weren't needed at all for these people

00:21:12,139 --> 00:21:15,950
there were only about 600 of them we

00:21:14,120 --> 00:21:17,120
ended up doing pin numbers it saved us

00:21:15,950 --> 00:21:20,720
we didn't have to do credit card

00:21:17,120 --> 00:21:21,919
processing for lost badges and fees for

00:21:20,720 --> 00:21:24,820
those we didn't have to deal with

00:21:21,919 --> 00:21:27,320
printers by not just diving in and

00:21:24,820 --> 00:21:32,120
starting on exactly what they told us it

00:21:27,320 --> 00:21:36,769
was a big lesson for us so I just we

00:21:32,120 --> 00:21:39,799
didn't do any batches this is what we

00:21:36,769 --> 00:21:42,470
ended up building we had some JavaScript

00:21:39,799 --> 00:21:44,720
that we really enjoyed but I guess they

00:21:42,470 --> 00:21:47,960
wanted to slide so there's no live demo

00:21:44,720 --> 00:21:52,419
here of the taking photos we ended up

00:21:47,960 --> 00:21:57,409
using just the webcam in the html5 new

00:21:52,419 --> 00:22:00,440
audio and video capture and one of our

00:21:57,409 --> 00:22:01,490
lessons learns there I don't think it's

00:22:00,440 --> 00:22:03,440
really ready for prime

00:22:01,490 --> 00:22:04,940
but luckily for the Swim Center there's

00:22:03,440 --> 00:22:06,980
really sort of three computers that it

00:22:04,940 --> 00:22:08,540
runs on so we're able to easily say you

00:22:06,980 --> 00:22:11,240
must use the latest version of Chrome

00:22:08,540 --> 00:22:14,570
the latest version of Firefox and then

00:22:11,240 --> 00:22:21,340
it was able to work and so here's one

00:22:14,570 --> 00:22:24,140
where I took my picture afterwards and

00:22:21,340 --> 00:22:29,270
as you can see I haven't paid also

00:22:24,140 --> 00:22:31,100
that's not actually me but one of the

00:22:29,270 --> 00:22:33,380
other best practices we tried to do was

00:22:31,100 --> 00:22:36,890
actually for the first time write tests

00:22:33,380 --> 00:22:38,540
and do code reviews and then so I was

00:22:36,890 --> 00:22:40,040
really proud of the part over on the

00:22:38,540 --> 00:22:42,020
right there where you can see we

00:22:40,040 --> 00:22:43,970
actually have tests it's very exciting

00:22:42,020 --> 00:22:47,540
maybe not for all of y'all but for us it

00:22:43,970 --> 00:22:50,660
was and that we got together in almost

00:22:47,540 --> 00:22:53,720
every line of code we wrote we reviewed

00:22:50,660 --> 00:22:55,850
together looked over it and I was really

00:22:53,720 --> 00:22:57,559
excited to go and start looking at

00:22:55,850 --> 00:22:59,390
metrics to try and figure out okay of

00:22:57,559 --> 00:23:01,010
the bugs reported how quickly were we

00:22:59,390 --> 00:23:03,410
able to respond when we actually had

00:23:01,010 --> 00:23:05,210
test frameworks and stuff and the answer

00:23:03,410 --> 00:23:06,890
was we didn't have any bugs submitted

00:23:05,210 --> 00:23:08,420
during user acceptance tests and during

00:23:06,890 --> 00:23:11,480
our first couple of weeks of production

00:23:08,420 --> 00:23:13,580
so we couldn't get that metric so if

00:23:11,480 --> 00:23:15,350
anyone else out there is is still not

00:23:13,580 --> 00:23:19,220
quite in the doing tests doing code

00:23:15,350 --> 00:23:22,429
reviews I highly encourage you to do it

00:23:19,220 --> 00:23:25,760
so my conclusions take the time to

00:23:22,429 --> 00:23:29,350
understand the requirements to think

00:23:25,760 --> 00:23:29,350
about things before you just dive in

00:23:29,920 --> 00:23:33,410
capturing audio and visual and html5 I

00:23:32,270 --> 00:23:37,790
didn't think it was quite ready for

00:23:33,410 --> 00:23:40,130
prime time worked great for a couple of

00:23:37,790 --> 00:23:44,179
computers that we could keep up to date

00:23:40,130 --> 00:23:48,200
and code reviews and testing if folks

00:23:44,179 --> 00:23:53,809
aren't trying them please do so thank

00:23:48,200 --> 00:23:56,090
you hi my name is Francisco Saldana I'm

00:23:53,809 --> 00:23:59,080
a full stack developer for ginger I oh

00:23:56,090 --> 00:24:01,160
we do mental health care at scale and

00:23:59,080 --> 00:24:04,450
I'm going to give a brief presentation

00:24:01,160 --> 00:24:07,700
about keeping fast things fast

00:24:04,450 --> 00:24:10,429
performance keeping performance

00:24:07,700 --> 00:24:13,460
degradation from affecting your rapid

00:24:10,429 --> 00:24:17,570
iteration with transaction test case

00:24:13,460 --> 00:24:18,970
ah ok so what is fast fast is different

00:24:17,570 --> 00:24:23,330
to different things to different people

00:24:18,970 --> 00:24:26,029
for product fast is rapid iteration on

00:24:23,330 --> 00:24:27,890
new ideas we want to test whether or not

00:24:26,029 --> 00:24:32,659
they are going to fail or we were they

00:24:27,890 --> 00:24:36,080
going to succeed fast for users is user

00:24:32,659 --> 00:24:38,960
experience we don't want users to be

00:24:36,080 --> 00:24:41,330
seeing like these loading indicators on

00:24:38,960 --> 00:24:43,429
their screens so I make a product for

00:24:41,330 --> 00:24:47,120
doctors doctors don't have the time to

00:24:43,429 --> 00:24:50,899
wait for their web pages to load they

00:24:47,120 --> 00:24:52,850
want to see patients so why do we care

00:24:50,899 --> 00:24:54,950
about this the care about this because

00:24:52,850 --> 00:24:56,809
we want to meet the needs we want to

00:24:54,950 --> 00:24:58,789
make sure we want we want to rapidly

00:24:56,809 --> 00:25:02,179
meet the needs of consumers of the calm

00:24:58,789 --> 00:25:06,130
of the customers and we want to prove

00:25:02,179 --> 00:25:10,190
that that works before the quickly

00:25:06,130 --> 00:25:14,390
because we're a start-up mode we believe

00:25:10,190 --> 00:25:16,880
in beautiful user experiences so that we

00:25:14,390 --> 00:25:21,049
because we want these because we want

00:25:16,880 --> 00:25:24,770
users to have we know from from the from

00:25:21,049 --> 00:25:27,140
the data that users will navigate away

00:25:24,770 --> 00:25:28,850
from our side we will lose users if we

00:25:27,140 --> 00:25:32,929
don't provide them a Latin see free

00:25:28,850 --> 00:25:34,880
quick user experience and there's a

00:25:32,929 --> 00:25:37,850
famous social network application

00:25:34,880 --> 00:25:40,909
founder that believes in this move fast

00:25:37,850 --> 00:25:43,669
and break things thing so I am an

00:25:40,909 --> 00:25:45,470
engineer and as an engineer I really

00:25:43,669 --> 00:25:48,289
want to build systems that are reliable

00:25:45,470 --> 00:25:51,140
that are stable and that our customers

00:25:48,289 --> 00:25:53,090
can depend on so how do we do this how

00:25:51,140 --> 00:25:58,250
do we move fast without breaking too

00:25:53,090 --> 00:26:00,350
many things so my proposal Django gives

00:25:58,250 --> 00:26:02,059
us a lot of tools for that I'll show you

00:26:00,350 --> 00:26:04,669
one of them so here's your

00:26:02,059 --> 00:26:08,059
standard-issue endpoint we have the view

00:26:04,669 --> 00:26:11,720
function here and we have like an

00:26:08,059 --> 00:26:13,940
authorization decorator and hey we're

00:26:11,720 --> 00:26:17,779
going to add a rest controller or rest

00:26:13,940 --> 00:26:21,740
serialization a rest serialization here

00:26:17,779 --> 00:26:24,049
to put data out so it happens to be

00:26:21,740 --> 00:26:24,350
really really slow because are you are

00:26:24,049 --> 00:26:25,880
you

00:26:24,350 --> 00:26:28,250
model is too big or something like that

00:26:25,880 --> 00:26:31,929
and so we add a little optimization here

00:26:28,250 --> 00:26:36,980
to only get the fields that we need so

00:26:31,929 --> 00:26:40,130
iteration happens and one of the and one

00:26:36,980 --> 00:26:45,230
of us adds a new fields to the rest

00:26:40,130 --> 00:26:47,990
serialization the rest serializer so

00:26:45,230 --> 00:26:50,570
what's that what that's going to do but

00:26:47,990 --> 00:26:54,049
the problem is now it like it's really

00:26:50,570 --> 00:26:55,820
really slow what happened it turns out

00:26:54,049 --> 00:26:58,880
by adding this field with this

00:26:55,820 --> 00:27:01,039
optimization this rest controller is not

00:26:58,880 --> 00:27:02,870
going to make a per user query that's

00:27:01,039 --> 00:27:04,580
really bad even though it doesn't break

00:27:02,870 --> 00:27:06,620
the behavior of the end point even if

00:27:04,580 --> 00:27:09,650
the end point passes all of the tests of

00:27:06,620 --> 00:27:12,830
correctness it makes the performance

00:27:09,650 --> 00:27:16,760
incredibly bad so how do we how do we

00:27:12,830 --> 00:27:19,730
how we prevent that from happening enter

00:27:16,760 --> 00:27:22,100
transaction test case so transaction

00:27:19,730 --> 00:27:24,590
test case is imported from the same

00:27:22,100 --> 00:27:26,900
place you get test case you just say

00:27:24,590 --> 00:27:29,480
django tests import transaction test

00:27:26,900 --> 00:27:31,100
case make one of your tests inherit from

00:27:29,480 --> 00:27:36,080
it and you get this awesome little

00:27:31,100 --> 00:27:38,659
utility function called called assert

00:27:36,080 --> 00:27:40,520
number queries a certain um queries and

00:27:38,659 --> 00:27:42,770
so what we do to ensure that this

00:27:40,520 --> 00:27:45,799
doesn't happen is we can create a cup

00:27:42,770 --> 00:27:48,970
like a hundred users using like a user

00:27:45,799 --> 00:27:51,980
factory and then we can run our endpoint

00:27:48,970 --> 00:27:58,159
inside of this a certain impaired use

00:27:51,980 --> 00:28:00,650
context and it will it will report to us

00:27:58,159 --> 00:28:03,169
it'll actually fail the test if the

00:28:00,650 --> 00:28:05,630
number of queries is not we're expecting

00:28:03,169 --> 00:28:08,090
so instead of getting performance

00:28:05,630 --> 00:28:10,400
degradation that gets reported to us

00:28:08,090 --> 00:28:12,289
through the support system our

00:28:10,400 --> 00:28:14,210
continuous integration system actually

00:28:12,289 --> 00:28:18,500
catches this before we roll it out to

00:28:14,210 --> 00:28:21,100
production so continuous integration for

00:28:18,500 --> 00:28:24,500
the win it helps with mitigating

00:28:21,100 --> 00:28:27,860
problems with rapid iteration and it

00:28:24,500 --> 00:28:31,090
catches these degradation errors thank

00:28:27,860 --> 00:28:36,020
you so much my name is Francisco Saldana

00:28:31,090 --> 00:28:39,780
available I'm at ginger I oh thanks

00:28:36,020 --> 00:28:42,630
all right um so the link Django apps we

00:28:39,780 --> 00:28:45,570
often find ourselves making a request

00:28:42,630 --> 00:28:47,760
for our server now what happens when we

00:28:45,570 --> 00:28:49,320
are the ones making requests on Twitter

00:28:47,760 --> 00:28:51,990
you're outside world like we need a

00:28:49,320 --> 00:28:54,179
mocking tool for that today I'm going to

00:28:51,990 --> 00:28:57,179
talk about HTTP that lets you do exactly

00:28:54,179 --> 00:29:01,830
this my name is Raphael and I work for a

00:28:57,179 --> 00:29:04,559
company called cap tricity so making

00:29:01,830 --> 00:29:07,380
real HTTP requests in your test is a

00:29:04,559 --> 00:29:09,299
pretty bad idea the one of the obvious

00:29:07,380 --> 00:29:12,510
reasons is that it's going to slow down

00:29:09,299 --> 00:29:15,120
your tests but more importantly if your

00:29:12,510 --> 00:29:17,880
remote endpoint is not available the

00:29:15,120 --> 00:29:18,870
test is going to fail so like for

00:29:17,880 --> 00:29:21,840
example if you have a service

00:29:18,870 --> 00:29:24,299
architecture you don't want to need to

00:29:21,840 --> 00:29:29,549
like put up your various services to

00:29:24,299 --> 00:29:33,030
make your build pass here's an example

00:29:29,549 --> 00:29:36,539
of a simple setup for HTTP let's say we

00:29:33,030 --> 00:29:39,150
want to call the jenga project URL so we

00:29:36,539 --> 00:29:41,850
decorate the text the test method with

00:29:39,150 --> 00:29:44,100
HTTP that activate and then we can use

00:29:41,850 --> 00:29:48,870
the request module for example to make a

00:29:44,100 --> 00:29:52,350
request to that to that URI and in the

00:29:48,870 --> 00:29:54,600
end HTTP has by default returned a 200

00:29:52,350 --> 00:29:56,370
and this test is going to pass without

00:29:54,600 --> 00:30:02,669
making a single request to the outside

00:29:56,370 --> 00:30:05,010
world now what about if we want to test

00:30:02,669 --> 00:30:07,260
that our remote endpoint has been called

00:30:05,010 --> 00:30:10,620
and that it's been called with like

00:30:07,260 --> 00:30:13,169
specific arguments so imagine that I

00:30:10,620 --> 00:30:15,000
have a create cat method and this create

00:30:13,169 --> 00:30:18,570
cat method is support it's supposed to

00:30:15,000 --> 00:30:24,120
call a remote endpoint on create a CAD

00:30:18,570 --> 00:30:26,760
calm / AP I so I register that you are I

00:30:24,120 --> 00:30:29,159
I make it return the 201 by default I

00:30:26,760 --> 00:30:31,350
call my create cat method and at the end

00:30:29,159 --> 00:30:33,900
of my test I can test that the we

00:30:31,350 --> 00:30:35,850
already has been called and that the

00:30:33,900 --> 00:30:41,039
create can methods supply the name in

00:30:35,850 --> 00:30:44,130
the request body now what if we want the

00:30:41,039 --> 00:30:46,620
response that is marked by HTT pretty to

00:30:44,130 --> 00:30:48,120
depend on the request that we made so

00:30:46,620 --> 00:30:51,240
HTTP has

00:30:48,120 --> 00:30:54,450
uses callbacks for that and you can use

00:30:51,240 --> 00:30:58,350
it to almost create a simple mocking of

00:30:54,450 --> 00:31:01,050
the remote server so coming back to the

00:30:58,350 --> 00:31:02,910
create cat example let's say that the

00:31:01,050 --> 00:31:06,150
cats that we create remotely need to

00:31:02,910 --> 00:31:09,720
have an owner but so i'm going to send a

00:31:06,150 --> 00:31:12,090
request to slash owners / bob / cats but

00:31:09,720 --> 00:31:14,490
the owner Bob can not exist in the

00:31:12,090 --> 00:31:16,590
remote server in which case that

00:31:14,490 --> 00:31:19,440
endpoint is going to return it for four

00:31:16,590 --> 00:31:21,810
and my create cat method is supposed to

00:31:19,440 --> 00:31:25,320
call that endpoint and if it gets a 404

00:31:21,810 --> 00:31:27,540
create Bob and then try again so to do

00:31:25,320 --> 00:31:29,370
that I can set a variable Bob exists and

00:31:27,540 --> 00:31:32,400
I set it to false at the beginning pop

00:31:29,370 --> 00:31:34,290
does not exist yet I create I have a

00:31:32,400 --> 00:31:36,990
create owner endpoint that is going to

00:31:34,290 --> 00:31:39,780
turn that variable to true when it's

00:31:36,990 --> 00:31:41,940
called I have a create cat endpoint that

00:31:39,780 --> 00:31:44,420
is going to return the 404 is Bob does

00:31:41,940 --> 00:31:48,540
not exist yet and it's going to return a

00:31:44,420 --> 00:31:51,360
201 if Bob does exist so I used those

00:31:48,540 --> 00:31:55,380
callbacks in my HTTP that register you

00:31:51,360 --> 00:31:57,150
or I functions and then I can use my

00:31:55,380 --> 00:31:59,310
create cat method and at the end of my

00:31:57,150 --> 00:32:04,020
test I can assert that bob has indeed

00:31:59,310 --> 00:32:06,120
been created if you're making requests

00:32:04,020 --> 00:32:08,460
with the request module I will encourage

00:32:06,120 --> 00:32:10,790
using responses which is which pretty

00:32:08,460 --> 00:32:13,710
much does the exact same thing as HTTP

00:32:10,790 --> 00:32:15,780
but marks the risk the request module

00:32:13,710 --> 00:32:18,630
itself instead of marking at the circuit

00:32:15,780 --> 00:32:20,370
level and I've heard that HTTP really

00:32:18,630 --> 00:32:23,820
does not work well with Python 3 but

00:32:20,370 --> 00:32:28,920
responses does that's all i have for you

00:32:23,820 --> 00:32:31,950
today so thank you hi everyone my name

00:32:28,920 --> 00:32:34,440
is james tabor i'm on twitter at j taba

00:32:31,950 --> 00:32:35,700
i work for a company called aryan it's

00:32:34,440 --> 00:32:37,530
one of the sponsors of this conference

00:32:35,700 --> 00:32:39,420
but i'm not going to be talking about l

00:32:37,530 --> 00:32:42,420
darian i'm going to be talking about pin

00:32:39,420 --> 00:32:44,070
acts and specifically nice and efforts

00:32:42,420 --> 00:32:46,440
to build a learning management system

00:32:44,070 --> 00:32:48,720
with pin acts now for those of you who

00:32:46,440 --> 00:32:50,220
haven't been too early january cons and

00:32:48,720 --> 00:32:51,870
might not be familiar with what pin acts

00:32:50,220 --> 00:32:54,180
is all about i'm going to start off

00:32:51,870 --> 00:32:55,980
talking a little bit about pin acts in

00:32:54,180 --> 00:32:59,130
general before diving into the learning

00:32:55,980 --> 00:33:01,350
management system so pinnix provides

00:32:59,130 --> 00:33:01,980
what a lot of sites have in common so

00:33:01,350 --> 00:33:04,470
you can focus

00:33:01,980 --> 00:33:06,419
what makes your site different it's an

00:33:04,470 --> 00:33:09,210
open source project started that i

00:33:06,419 --> 00:33:11,610
started in 2008 with a bunch of other

00:33:09,210 --> 00:33:14,580
people to really supercharge django

00:33:11,610 --> 00:33:16,049
development by providing all the kinds

00:33:14,580 --> 00:33:18,360
of things that you find yourself writing

00:33:16,049 --> 00:33:20,669
again and again in websites whether it's

00:33:18,360 --> 00:33:23,010
things like profiles or notifications

00:33:20,669 --> 00:33:25,320
announcements teams invitations

00:33:23,010 --> 00:33:28,980
favoriting referrals all of that kind of

00:33:25,320 --> 00:33:31,230
stuff pentax aims to provide for you so

00:33:28,980 --> 00:33:34,500
it's an ecosystem of reusable django

00:33:31,230 --> 00:33:37,049
apps at its core but it's also a bunch

00:33:34,500 --> 00:33:38,820
of project conventions default templates

00:33:37,049 --> 00:33:40,799
using bootstrap so you can get up and

00:33:38,820 --> 00:33:43,320
running really quickly and starter

00:33:40,799 --> 00:33:46,530
projects django project templates that

00:33:43,320 --> 00:33:48,600
pre combine certain reusable apps so you

00:33:46,530 --> 00:33:50,370
can get running right away and even if

00:33:48,600 --> 00:33:51,960
you're not interested in the specifics

00:33:50,370 --> 00:33:54,540
of the learning management system stuff

00:33:51,960 --> 00:33:56,330
pentax is is something you can use for

00:33:54,540 --> 00:33:58,650
pretty much all of your django projects

00:33:56,330 --> 00:34:01,020
certainly i have for the last seven

00:33:58,650 --> 00:34:05,820
years and hundreds of other people have

00:34:01,020 --> 00:34:07,980
as well back in 2008 at the very first

00:34:05,820 --> 00:34:09,359
django con i gave a talk about pin acts

00:34:07,980 --> 00:34:11,609
that was the first talk about pinnix and

00:34:09,359 --> 00:34:13,770
I had this slide that basically showed

00:34:11,609 --> 00:34:15,899
that these pin tax apps could naturally

00:34:13,770 --> 00:34:17,970
group into certain application domains

00:34:15,899 --> 00:34:20,369
things like social networks intranets

00:34:17,970 --> 00:34:22,379
ecommerce and so on but one of the use

00:34:20,369 --> 00:34:24,149
cases that I gave back in that talk was

00:34:22,379 --> 00:34:26,639
learning management it was something

00:34:24,149 --> 00:34:27,990
that I saw as a possibility but it's

00:34:26,639 --> 00:34:29,909
only been recently that we've actually

00:34:27,990 --> 00:34:32,340
really dived into learning management

00:34:29,909 --> 00:34:36,929
what do I mean by a learning management

00:34:32,340 --> 00:34:40,500
system I really mean any web application

00:34:36,929 --> 00:34:43,710
that facilitates learning it could be

00:34:40,500 --> 00:34:45,510
online learning in a small environment

00:34:43,710 --> 00:34:47,609
it could be a MOOC it could be something

00:34:45,510 --> 00:34:50,639
that's used as a compliment in

00:34:47,609 --> 00:34:52,350
face-to-face training and so on but it's

00:34:50,639 --> 00:34:54,210
a web application that enables all of

00:34:52,350 --> 00:34:57,510
that kind of stuff and I think of it

00:34:54,210 --> 00:34:59,490
really as having two aspects to it the

00:34:57,510 --> 00:35:02,670
management system and the learning

00:34:59,490 --> 00:35:04,650
system so the kinds of things that you

00:35:02,670 --> 00:35:06,330
typically get in the management system

00:35:04,650 --> 00:35:07,830
part of a learning management system at

00:35:06,330 --> 00:35:09,750
groups enrollment calendaring

00:35:07,830 --> 00:35:11,670
announcements profiles messaging blogs

00:35:09,750 --> 00:35:13,560
forums document management submission

00:35:11,670 --> 00:35:14,850
boxes what's interesting about all of

00:35:13,560 --> 00:35:16,350
those things is

00:35:14,850 --> 00:35:18,540
fairly generic things and they're

00:35:16,350 --> 00:35:20,910
exactly the kind of thing that p ax has

00:35:18,540 --> 00:35:23,280
already to a certain extent provided

00:35:20,910 --> 00:35:25,140
either already or could very easily add

00:35:23,280 --> 00:35:26,580
and so one of the things that we're

00:35:25,140 --> 00:35:28,380
doing is part of the pin acts open

00:35:26,580 --> 00:35:31,050
source project is bringing together

00:35:28,380 --> 00:35:33,900
these existing components writing some

00:35:31,050 --> 00:35:36,000
additional ones in order to you know

00:35:33,900 --> 00:35:38,210
basically build an open-source learning

00:35:36,000 --> 00:35:41,100
management system in python and django

00:35:38,210 --> 00:35:43,170
but as well as the management system

00:35:41,100 --> 00:35:45,530
side of things there's also the learning

00:35:43,170 --> 00:35:48,870
side of things that focuses more on

00:35:45,530 --> 00:35:51,000
activities that individual students do

00:35:48,870 --> 00:35:52,860
things like building quizzes organizing

00:35:51,000 --> 00:35:54,960
things into learning paths having

00:35:52,860 --> 00:35:56,970
adaptive learning spaced repetition all

00:35:54,960 --> 00:35:58,890
that kind of stuff as well as

00:35:56,970 --> 00:36:01,710
gamification things like levels points

00:35:58,890 --> 00:36:03,630
and badges now again pentax does some of

00:36:01,710 --> 00:36:05,610
this already especially the gamification

00:36:03,630 --> 00:36:09,990
stuff we're trying to bring all that

00:36:05,610 --> 00:36:12,390
together to to to provide an open source

00:36:09,990 --> 00:36:14,310
learning management platform based on

00:36:12,390 --> 00:36:16,050
django so just a really quick example

00:36:14,310 --> 00:36:20,280
one of the things that we're doing for

00:36:16,050 --> 00:36:22,320
that for the learning activities is a

00:36:20,280 --> 00:36:24,060
really pluggable object oriented

00:36:22,320 --> 00:36:26,640
architecture where you can basically say

00:36:24,060 --> 00:36:29,100
i want to a lick at style quiz here

00:36:26,640 --> 00:36:30,690
where I get to give five options but you

00:36:29,100 --> 00:36:32,700
can plug in what's the what's the

00:36:30,690 --> 00:36:34,530
provider that tells you what question to

00:36:32,700 --> 00:36:35,610
ask what student when and you're not

00:36:34,530 --> 00:36:37,140
having to build any of the

00:36:35,610 --> 00:36:40,140
infrastructure around that you can focus

00:36:37,140 --> 00:36:42,180
on the core learning algorithms so we

00:36:40,140 --> 00:36:43,830
are going to be sprinting on this in

00:36:42,180 --> 00:36:46,470
particular as well as pin acts in

00:36:43,830 --> 00:36:48,300
general and I certainly encourage you

00:36:46,470 --> 00:36:49,740
all to to join us there if you're

00:36:48,300 --> 00:36:51,840
interested specifically in learning

00:36:49,740 --> 00:36:53,910
management systems or what pin acts can

00:36:51,840 --> 00:36:56,460
do in general to help your django

00:36:53,910 --> 00:36:58,680
development Phoenix project you can

00:36:56,460 --> 00:37:01,530
follow on twitter the URL is pinnix

00:36:58,680 --> 00:37:05,930
project com to get hub repos you should

00:37:01,530 --> 00:37:08,610
know about one for the overall LMS and

00:37:05,930 --> 00:37:11,460
one specifically for these pluggable

00:37:08,610 --> 00:37:13,700
learning activities and that's it thank

00:37:11,460 --> 00:37:13,700
you very much

00:37:14,390 --> 00:37:19,380
hey guys so my name is miroslav by the

00:37:17,460 --> 00:37:21,750
way great great pronunciation of my last

00:37:19,380 --> 00:37:25,470
name very few people get that so thumbs

00:37:21,750 --> 00:37:27,180
up how is it going automatic alright so

00:37:25,470 --> 00:37:29,670
i'll be talking about janky oil filter

00:37:27,180 --> 00:37:32,730
that's a library recently released which

00:37:29,670 --> 00:37:34,590
aims to help to do filtering from there

00:37:32,730 --> 00:37:37,350
is data sources in django by using

00:37:34,590 --> 00:37:39,420
structured urls so before i get to some

00:37:37,350 --> 00:37:41,690
examples or what that means some use

00:37:39,420 --> 00:37:44,670
cases why would you want to have

00:37:41,690 --> 00:37:46,440
filtering at all so it's pretty useful

00:37:44,670 --> 00:37:48,300
when you have pagination for example

00:37:46,440 --> 00:37:49,980
Django admin instead of seeing lots of

00:37:48,300 --> 00:37:52,110
lots of lots of pages you might want to

00:37:49,980 --> 00:37:54,510
see subset of the data so filtering

00:37:52,110 --> 00:37:56,910
comes in pretty handy it's also pretty

00:37:54,510 --> 00:37:58,860
useful in the API is especially when

00:37:56,910 --> 00:38:01,800
you're doing bulk operations so you want

00:37:58,860 --> 00:38:03,540
to update particular resources but not

00:38:01,800 --> 00:38:06,000
all of them so filtering comes in handy

00:38:03,540 --> 00:38:08,010
it's also pretty nice when you're moving

00:38:06,000 --> 00:38:09,990
the filtering logic to the client side

00:38:08,010 --> 00:38:12,690
for example in angular or reactive

00:38:09,990 --> 00:38:14,700
locations users can use drop downs and

00:38:12,690 --> 00:38:16,920
text boxes or whatever to construct

00:38:14,700 --> 00:38:18,810
filtering criteria so then all the

00:38:16,920 --> 00:38:21,630
client side needs to do is construct the

00:38:18,810 --> 00:38:24,450
filtering URL you pass it it back end

00:38:21,630 --> 00:38:26,640
and back end will do the magic all right

00:38:24,450 --> 00:38:29,010
so in order to accomplish all of that

00:38:26,640 --> 00:38:31,230
this library tries to make a few

00:38:29,010 --> 00:38:33,870
promises and let's go over all of them

00:38:31,230 --> 00:38:36,120
one by one so first promise it tries to

00:38:33,870 --> 00:38:38,700
make the girls as human friendly as it

00:38:36,120 --> 00:38:42,330
can possibly can by default you can

00:38:38,700 --> 00:38:44,790
filter whether you're filtering by heels

00:38:42,330 --> 00:38:47,730
having particular values so for example

00:38:44,790 --> 00:38:50,820
you can filter or ID is equal to one you

00:38:47,730 --> 00:38:53,460
can also filter negated filters so where

00:38:50,820 --> 00:38:58,440
ID is not one you can also apply custom

00:38:53,460 --> 00:39:01,410
lockups where IE is either one two or

00:38:58,440 --> 00:39:03,630
three and you can do other standard

00:39:01,410 --> 00:39:06,030
django or ammo cups like contains

00:39:03,630 --> 00:39:09,090
executive all the other goodness or

00:39:06,030 --> 00:39:10,860
Django another promise it makes is try

00:39:09,090 --> 00:39:13,290
to make the filtering as safe as it can

00:39:10,860 --> 00:39:15,660
possibly can so before actually doing

00:39:13,290 --> 00:39:17,970
any filtering in the back end all the

00:39:15,660 --> 00:39:20,760
values submitted are validated by using

00:39:17,970 --> 00:39:23,220
Django form fields so for example since

00:39:20,760 --> 00:39:25,970
ID is an integer field to validate

00:39:23,220 --> 00:39:27,760
string digit 1

00:39:25,970 --> 00:39:32,090
would use integer field for validation

00:39:27,760 --> 00:39:33,859
some more fine examples last example

00:39:32,090 --> 00:39:35,720
where the column is joined usually

00:39:33,859 --> 00:39:38,270
probably be datetime color maybe

00:39:35,720 --> 00:39:40,460
database but since the lookup is a year

00:39:38,270 --> 00:39:44,810
we would use the integer field to

00:39:40,460 --> 00:39:47,150
validate 2015 versus date-time field and

00:39:44,810 --> 00:39:49,460
I promise it makes it tries to make it

00:39:47,150 --> 00:39:51,800
as easy as possible to filter unrelated

00:39:49,460 --> 00:39:54,260
models so for example in this case

00:39:51,800 --> 00:39:56,240
you're filtering you're cutting user

00:39:54,260 --> 00:39:58,340
models by filtering and an attribute and

00:39:56,240 --> 00:40:00,859
the profile model so it comes in pretty

00:39:58,340 --> 00:40:03,200
handy and as I as you might have noticed

00:40:00,859 --> 00:40:05,869
a lot of these filters look a lot like

00:40:03,200 --> 00:40:08,930
ginger or rum and that's because they

00:40:05,869 --> 00:40:10,849
are it that was the whole point of the

00:40:08,930 --> 00:40:12,650
design to make it as simple as possible

00:40:10,849 --> 00:40:14,900
and I think Django and does a really

00:40:12,650 --> 00:40:17,030
awesome job of making these filtering

00:40:14,900 --> 00:40:19,250
operations really easy you don't have to

00:40:17,030 --> 00:40:20,750
think about joins and all this mean 21

00:40:19,250 --> 00:40:23,119
relationships you just say I want to

00:40:20,750 --> 00:40:26,420
filter that so this library tries to do

00:40:23,119 --> 00:40:29,359
the same thing in the URLs and finally

00:40:26,420 --> 00:40:31,369
it makes the last promise that its data

00:40:29,359 --> 00:40:34,580
source agnostic what that means it

00:40:31,369 --> 00:40:37,460
completely decouples parsing URL and

00:40:34,580 --> 00:40:39,859
validating all the filtering clauses to

00:40:37,460 --> 00:40:42,770
actually filtering data what that means

00:40:39,859 --> 00:40:45,410
is you can filter data not only from

00:40:42,770 --> 00:40:47,599
Django or em or queries ads you can

00:40:45,410 --> 00:40:48,830
filter other sources of data so for

00:40:47,599 --> 00:40:50,720
example there is a work in progress

00:40:48,830 --> 00:40:53,210
right now to add support to filter

00:40:50,720 --> 00:40:55,099
sequel alchemy query objects but you can

00:40:53,210 --> 00:40:56,660
add the filter back end to filter pretty

00:40:55,099 --> 00:40:58,940
much anything else could be

00:40:56,660 --> 00:41:02,450
collection Python lists read as database

00:40:58,940 --> 00:41:04,420
anything else you can think of also out

00:41:02,450 --> 00:41:06,380
of the box it comes in with bunch of

00:41:04,420 --> 00:41:08,780
integrations one of them is doing the

00:41:06,380 --> 00:41:10,730
rest framework if you ever use Jenga

00:41:08,780 --> 00:41:13,490
filters library it's very similar you

00:41:10,730 --> 00:41:14,900
just supply a custom back end fields you

00:41:13,490 --> 00:41:17,869
want to filter on and we'll just do the

00:41:14,900 --> 00:41:19,730
magic you can also use the library

00:41:17,869 --> 00:41:22,010
directly it's pretty easy to use you

00:41:19,730 --> 00:41:24,320
just can construct the class for filter

00:41:22,010 --> 00:41:26,540
set instantiate it give it a bunch of

00:41:24,320 --> 00:41:29,690
data give it a query set and then called

00:41:26,540 --> 00:41:32,630
the filter up method and we'll do the

00:41:29,690 --> 00:41:34,280
filtering and that's about it you can

00:41:32,630 --> 00:41:37,130
find more information on the deck

00:41:34,280 --> 00:41:38,599
communication here's the link or you can

00:41:37,130 --> 00:41:39,069
ask me some questions on Twitter and

00:41:38,599 --> 00:41:41,349
find

00:41:39,069 --> 00:41:43,390
only a shameless plug i work for yellow

00:41:41,349 --> 00:41:45,549
track you're super excited to be

00:41:43,390 --> 00:41:47,680
sponsoring this Jenga con for the first

00:41:45,549 --> 00:41:49,930
time so you haven't stopped by make sure

00:41:47,680 --> 00:41:53,199
to stop by our booth we actually hadn't

00:41:49,930 --> 00:41:55,539
made a bunch of pins so if this is my

00:41:53,199 --> 00:41:57,249
favorite one a chaotic Jenga not so if

00:41:55,539 --> 00:41:58,809
you haven't run out of them already make

00:41:57,249 --> 00:42:05,049
sure to grab one I think it's pretty

00:41:58,809 --> 00:42:08,109
cool right thanks so much hello how many

00:42:05,049 --> 00:42:09,729
of you using a red is how many of you

00:42:08,109 --> 00:42:14,259
have so much data it doesn't fit onto a

00:42:09,729 --> 00:42:15,759
single server well it will happen at one

00:42:14,259 --> 00:42:17,739
point that you have so much stuff that

00:42:15,759 --> 00:42:20,619
it doesn't fit on one server and why

00:42:17,739 --> 00:42:22,930
does it over to so basically the whole

00:42:20,619 --> 00:42:24,759
point of our be it's called the rightist

00:42:22,930 --> 00:42:27,880
blaster and it's basically a simplified

00:42:24,759 --> 00:42:30,819
version of talking to multiple reddit

00:42:27,880 --> 00:42:32,140
servers in a very convenient way the

00:42:30,819 --> 00:42:33,819
idea is that you distribute your data

00:42:32,140 --> 00:42:37,479
set across multiple different servers

00:42:33,819 --> 00:42:39,279
and you can basically have more reddish

00:42:37,479 --> 00:42:41,589
data then you can fit into the realm on

00:42:39,279 --> 00:42:44,199
a single machine into this a very

00:42:41,589 --> 00:42:46,660
convenient way so it's not right it's

00:42:44,199 --> 00:42:49,660
cluster but it is based on the same idea

00:42:46,660 --> 00:42:51,190
in a sense that you take the key and you

00:42:49,660 --> 00:42:54,999
distribute it across multiple different

00:42:51,190 --> 00:42:56,650
nodes that you have the idea is that the

00:42:54,999 --> 00:42:58,119
library will automatically figure out

00:42:56,650 --> 00:42:59,709
the most efficient way to get the data

00:42:58,119 --> 00:43:01,509
from this individual servers by

00:42:59,709 --> 00:43:03,249
automatically building reddy's pipelines

00:43:01,509 --> 00:43:06,459
depending on which server your target

00:43:03,249 --> 00:43:08,170
and when it's possible it will also

00:43:06,459 --> 00:43:10,569
merge commands together so if you do get

00:43:08,170 --> 00:43:13,660
get get get get it will auto do an M get

00:43:10,569 --> 00:43:15,069
to to the right notes so even if the

00:43:13,660 --> 00:43:18,039
keys go two very different notes of

00:43:15,069 --> 00:43:22,539
other mighty built the pipeline's it's

00:43:18,039 --> 00:43:24,609
available on pi PI as RB and the idea is

00:43:22,539 --> 00:43:26,140
that you just create this cluster so the

00:43:24,609 --> 00:43:29,049
thing with RB is that it's completely

00:43:26,140 --> 00:43:30,880
based on piratas so if you have used by

00:43:29,049 --> 00:43:32,709
reuters before this is exactly the same

00:43:30,880 --> 00:43:35,349
it just wraps by writers in a more

00:43:32,709 --> 00:43:37,749
convenient way so you all you have to do

00:43:35,349 --> 00:43:39,249
is to create the cluster you created as

00:43:37,749 --> 00:43:42,309
many notes as you think you will have at

00:43:39,249 --> 00:43:45,609
one point and then you can point them to

00:43:42,309 --> 00:43:47,769
the same service if necessary and from

00:43:45,609 --> 00:43:49,180
that moment on you can either use the

00:43:47,769 --> 00:43:51,099
routing client which is the most

00:43:49,180 --> 00:43:52,220
convenient way for just getting very

00:43:51,099 --> 00:43:53,840
basic

00:43:52,220 --> 00:43:55,609
understanding of how it works you get

00:43:53,840 --> 00:43:57,650
the routing client from the cluster and

00:43:55,609 --> 00:44:00,050
from that point on it works exactly as

00:43:57,650 --> 00:44:01,340
any other radius client it just execute

00:44:00,050 --> 00:44:03,800
commands and will automatically go to

00:44:01,340 --> 00:44:06,770
the right note this however is

00:44:03,800 --> 00:44:09,080
serialized so if you target so we

00:44:06,770 --> 00:44:11,540
friends have less 32 different nodes we

00:44:09,080 --> 00:44:15,290
target so this will do 30 to request one

00:44:11,540 --> 00:44:16,520
after another which is not ideal as an

00:44:15,290 --> 00:44:19,040
alternative you can use the mapping

00:44:16,520 --> 00:44:21,230
client which you use with them with

00:44:19,040 --> 00:44:23,869
block it's just too with class the map

00:44:21,230 --> 00:44:25,609
as client and that client will then not

00:44:23,869 --> 00:44:27,859
return the response immediately it will

00:44:25,609 --> 00:44:30,200
set the time promise objects and then

00:44:27,859 --> 00:44:32,359
only after the with block ends it will

00:44:30,200 --> 00:44:35,230
actually go out and send a request to

00:44:32,359 --> 00:44:38,810
the servers we don't use Chi event in

00:44:35,230 --> 00:44:41,270
century anywhere so because we are not

00:44:38,810 --> 00:44:42,920
really based on that but this in itself

00:44:41,270 --> 00:44:45,650
does a synchronous i/o behind the scenes

00:44:42,920 --> 00:44:46,880
for you which is very convenient so it

00:44:45,650 --> 00:44:49,340
doesn't actually spawn any threat so

00:44:46,880 --> 00:44:50,420
anything of that sort and then just to

00:44:49,340 --> 00:44:52,220
do anything you have this promise

00:44:50,420 --> 00:44:53,630
objects at the end of the map call you

00:44:52,220 --> 00:44:54,770
guarantee that the value on it is

00:44:53,630 --> 00:44:57,470
resolved but you can also attach

00:44:54,770 --> 00:44:59,630
callbacks if you want you can also

00:44:57,470 --> 00:45:01,460
target all the machines at once so if

00:44:59,630 --> 00:45:03,650
you want to flush the databases on all

00:45:01,460 --> 00:45:05,420
the machines which is kind of scary you

00:45:03,650 --> 00:45:07,609
can just do this cluster all this client

00:45:05,420 --> 00:45:09,680
and and i will just execute against them

00:45:07,609 --> 00:45:11,540
you can also explicitly target with the

00:45:09,680 --> 00:45:13,010
fan out specific notes if you want for

00:45:11,540 --> 00:45:15,349
instance to see which operating systems

00:45:13,010 --> 00:45:17,000
run on this particular hosts you can

00:45:15,349 --> 00:45:19,369
just do that and then the promise object

00:45:17,000 --> 00:45:21,020
is a dictionary of the whole study to

00:45:19,369 --> 00:45:23,270
the individual response that came back

00:45:21,020 --> 00:45:25,940
from it and that's pretty much all you

00:45:23,270 --> 00:45:28,880
can get the doc set our b dot read the

00:45:25,940 --> 00:45:32,030
docs torque and the package is on pi PI

00:45:28,880 --> 00:45:34,099
available open source license and if you

00:45:32,030 --> 00:45:36,800
haven't used century yet you should

00:45:34,099 --> 00:45:38,119
definitely look at what we're doing we

00:45:36,800 --> 00:45:40,670
have two booths out there and we also

00:45:38,119 --> 00:45:44,830
sponsor at a conference so have a look

00:45:40,670 --> 00:45:44,830
at that as well thank you

00:45:45,880 --> 00:45:53,119
hey folks my name is Brian Stern I work

00:45:49,279 --> 00:45:54,769
for indeed and I really really believe

00:45:53,119 --> 00:45:56,839
that everyone should be able to automate

00:45:54,769 --> 00:45:58,910
the boring stuff with Python not just

00:45:56,839 --> 00:46:00,680
developers but like salespeople and

00:45:58,910 --> 00:46:03,170
marketers and client support and all

00:46:00,680 --> 00:46:04,730
that kind of stuff and so we piloted

00:46:03,170 --> 00:46:06,799
something I think may be interesting to

00:46:04,730 --> 00:46:09,619
y'all it's a concept like a code wiki

00:46:06,799 --> 00:46:13,029
and so what is it well a collection of

00:46:09,619 --> 00:46:15,980
self-contained pages of useful code and

00:46:13,029 --> 00:46:17,390
for example some marketing person might

00:46:15,980 --> 00:46:19,039
need to know like what are you know it

00:46:17,390 --> 00:46:20,450
indeed what are the top 10 things that

00:46:19,039 --> 00:46:22,490
people are searching for right now and

00:46:20,450 --> 00:46:24,799
that's really just a sequel statement

00:46:22,490 --> 00:46:26,029
and a print statement and so that's like

00:46:24,799 --> 00:46:28,150
a document that you could put into a

00:46:26,029 --> 00:46:30,980
code wiki and then run it and so forth

00:46:28,150 --> 00:46:32,539
or maybe you want a graph so you you

00:46:30,980 --> 00:46:34,549
know do some sequel code and then you

00:46:32,539 --> 00:46:36,259
plot something you know that could be a

00:46:34,549 --> 00:46:38,109
document in a code wiki it might be

00:46:36,259 --> 00:46:40,670
useful for someone to gather this data

00:46:38,109 --> 00:46:42,230
the code wiki idea is based on ipython

00:46:40,670 --> 00:46:44,990
notebook and if you don't know what that

00:46:42,230 --> 00:46:46,910
is it's a JSON document that has

00:46:44,990 --> 00:46:48,680
basically an input cell where you put

00:46:46,910 --> 00:46:51,380
some Python in there and then when that

00:46:48,680 --> 00:46:52,970
runs it puts the output in a matching

00:46:51,380 --> 00:46:54,769
output cell and then another input cell

00:46:52,970 --> 00:46:57,079
output cell comes from the scientific

00:46:54,769 --> 00:46:59,089
community and it's awesome and so these

00:46:57,079 --> 00:47:01,940
form the basis of pages in the code wiki

00:46:59,089 --> 00:47:03,500
and so anything that you can do in

00:47:01,940 --> 00:47:05,059
ipython notebook you can do in your code

00:47:03,500 --> 00:47:06,920
wiki and so that means you've got

00:47:05,059 --> 00:47:08,869
obviously the full power of Python which

00:47:06,920 --> 00:47:12,710
is amazing also pandas for data

00:47:08,869 --> 00:47:14,329
manipulation and so forth and it has

00:47:12,710 --> 00:47:16,069
some syntactic sugar to make sequel

00:47:14,329 --> 00:47:19,400
really easy and it actually is going to

00:47:16,069 --> 00:47:20,839
support multiple languages also you know

00:47:19,400 --> 00:47:23,049
you gather data from multiple sources

00:47:20,839 --> 00:47:25,579
and then you want to really easily

00:47:23,049 --> 00:47:27,589
output them and so it supports some

00:47:25,579 --> 00:47:30,200
syntactic sugar for like putting HTML

00:47:27,589 --> 00:47:33,259
templates in there and this is something

00:47:30,200 --> 00:47:35,150
we added markdown so you can just

00:47:33,259 --> 00:47:36,859
quickly like gather data from a couple

00:47:35,150 --> 00:47:39,589
sources put a little mark down to render

00:47:36,859 --> 00:47:41,420
some HTML and of course if you want to

00:47:39,589 --> 00:47:43,039
iterate through results coming from

00:47:41,420 --> 00:47:44,900
sequel or some other data source like

00:47:43,039 --> 00:47:46,940
Google Spreadsheets you can use Django

00:47:44,900 --> 00:47:48,559
templating and then that will use that

00:47:46,940 --> 00:47:53,210
to generate this nicely formatted output

00:47:48,559 --> 00:47:54,980
a really neat extension of this idea is

00:47:53,210 --> 00:47:57,049
if you've got a page in a code wiki and

00:47:54,980 --> 00:47:57,319
it does something useful but what if you

00:47:57,049 --> 00:47:58,880
want to

00:47:57,319 --> 00:48:01,489
change one of the parameters so you want

00:47:58,880 --> 00:48:03,619
the top search terms but not in the u.s.

00:48:01,489 --> 00:48:05,989
in France okay well why don't we make

00:48:03,619 --> 00:48:07,910
these pages parameterize abal and we did

00:48:05,989 --> 00:48:09,799
it by convention the first cell in the

00:48:07,910 --> 00:48:11,690
ipython notebook if you assign things

00:48:09,799 --> 00:48:14,420
that becomes a parameter to that

00:48:11,690 --> 00:48:15,920
notebook and then what you can do is you

00:48:14,420 --> 00:48:17,449
can basically have a page in your wiki

00:48:15,920 --> 00:48:18,949
that runs in a dashboard mode when

00:48:17,449 --> 00:48:20,630
someone goes to it it says oh you know

00:48:18,949 --> 00:48:23,119
enter the parameters and run it and then

00:48:20,630 --> 00:48:26,380
it'll run with those parameters so for

00:48:23,119 --> 00:48:28,459
example that plotting you know document

00:48:26,380 --> 00:48:29,930
here it is with three parameters you can

00:48:28,459 --> 00:48:32,089
choose what country you want to look at

00:48:29,930 --> 00:48:37,219
and the date range for this particular

00:48:32,089 --> 00:48:38,479
search it's you know a pilot project we

00:48:37,219 --> 00:48:40,219
kind of released it out there just to

00:48:38,479 --> 00:48:41,719
see what would happen and it turns out

00:48:40,219 --> 00:48:43,160
that lots of people really jumped on

00:48:41,719 --> 00:48:44,719
this idea and started to automate the

00:48:43,160 --> 00:48:47,089
boring parts of their jobs pulling data

00:48:44,719 --> 00:48:51,440
from different services filtering

00:48:47,089 --> 00:48:53,299
joining and so forth and so this is what

00:48:51,440 --> 00:48:54,680
it looks like in dashboard mode you know

00:48:53,299 --> 00:48:56,539
you go to the page you can enter your

00:48:54,680 --> 00:49:00,380
queries that has default to hit go you

00:48:56,539 --> 00:49:01,849
get your results and one of the other

00:49:00,380 --> 00:49:03,559
neat things is well what if you could

00:49:01,849 --> 00:49:05,420
just subscribe to this daily so the idea

00:49:03,559 --> 00:49:07,849
is like I want this report to show up in

00:49:05,420 --> 00:49:09,140
the morning and so you can easily put in

00:49:07,849 --> 00:49:10,789
some parameters click look like a click

00:49:09,140 --> 00:49:13,160
and then we have it on a cron and just

00:49:10,789 --> 00:49:14,869
automatically runs and emails you we

00:49:13,160 --> 00:49:16,039
have a configurable permission system so

00:49:14,869 --> 00:49:17,599
some people can just run these

00:49:16,039 --> 00:49:19,999
dashboards but not see the code behind

00:49:17,599 --> 00:49:21,769
it other people can see the code and the

00:49:19,999 --> 00:49:23,719
idea is that it's a shared learning

00:49:21,769 --> 00:49:25,069
environment so people go to this and and

00:49:23,719 --> 00:49:27,349
see like what did you do to automate

00:49:25,069 --> 00:49:28,940
part of your job oh let me copy that and

00:49:27,349 --> 00:49:30,769
so like a sales person can take an

00:49:28,940 --> 00:49:32,479
existing one make some modifications and

00:49:30,769 --> 00:49:35,959
now they've got something useful for

00:49:32,479 --> 00:49:39,650
them our security people this is what

00:49:35,959 --> 00:49:41,449
they said so obviously you know you're

00:49:39,650 --> 00:49:43,789
running like user-supplied code on a web

00:49:41,449 --> 00:49:46,279
server so what we had to do was isolate

00:49:43,789 --> 00:49:47,779
the code and so what we do is we like

00:49:46,279 --> 00:49:49,880
drop an ipod on notebook which is just

00:49:47,779 --> 00:49:51,890
json onto a queue and we've got a

00:49:49,880 --> 00:49:55,249
cluster of docker containers that

00:49:51,890 --> 00:49:57,019
basically spin up run it take the JSON

00:49:55,249 --> 00:49:58,609
output and send it back and then get rid

00:49:57,019 --> 00:50:00,229
of the container and we also run those

00:49:58,609 --> 00:50:01,849
in a restricted VLAN so you've got some

00:50:00,229 --> 00:50:04,650
security around where the code actually

00:50:01,849 --> 00:50:06,720
runs and you could imagine that you know

00:50:04,650 --> 00:50:08,579
the power Python you can access data

00:50:06,720 --> 00:50:10,230
basically from anywhere and join it

00:50:08,579 --> 00:50:13,230
together so you can do some really

00:50:10,230 --> 00:50:14,849
interesting things here like here's an

00:50:13,230 --> 00:50:16,710
example that you know goes to a

00:50:14,849 --> 00:50:18,539
particular indeed page using selenium

00:50:16,710 --> 00:50:20,789
right from the code wiki that goes to a

00:50:18,539 --> 00:50:22,079
page takes a picture and emails it to me

00:50:20,789 --> 00:50:25,200
so if I want to just check the state of

00:50:22,079 --> 00:50:28,289
a particular page every day this has

00:50:25,200 --> 00:50:30,960
sort of unleashed the Kraken we now have

00:50:28,289 --> 00:50:31,950
I think over 500 of these documents and

00:50:30,960 --> 00:50:34,170
we've got people from all over the

00:50:31,950 --> 00:50:35,670
organization writing them it's been a

00:50:34,170 --> 00:50:37,740
really interesting to sort of see the

00:50:35,670 --> 00:50:40,559
the take off of this concept of like

00:50:37,740 --> 00:50:42,660
this shared code wiki thing so that's it

00:50:40,559 --> 00:50:44,549
we're going to open source this but it's

00:50:42,660 --> 00:50:45,839
not it's not quite ready yet and if

00:50:44,549 --> 00:50:46,980
you're interested in this concept I'm

00:50:45,839 --> 00:50:52,859
happy to talk more about if anyone's

00:50:46,980 --> 00:50:54,660
interested so thank you alright so yeah

00:50:52,859 --> 00:50:56,369
my name is Russell Keith McGee at this

00:50:54,660 --> 00:50:58,829
point you probably know me from my work

00:50:56,369 --> 00:51:00,299
on Jango what you may not know is that

00:50:58,829 --> 00:51:02,160
I've also got an interest in user

00:51:00,299 --> 00:51:04,950
interfaces especially native user

00:51:02,160 --> 00:51:07,170
interfaces my motivation here is to

00:51:04,950 --> 00:51:08,880
develop tools that follow the UNIX

00:51:07,170 --> 00:51:11,549
philosophy of doing one thing and doing

00:51:08,880 --> 00:51:12,990
it really well but with a humane and

00:51:11,549 --> 00:51:14,880
pretty user interface on front of it

00:51:12,990 --> 00:51:16,470
I've been collecting these experiments

00:51:14,880 --> 00:51:18,569
for a while under the heading of a

00:51:16,470 --> 00:51:20,670
project called beware because my end

00:51:18,569 --> 00:51:22,680
goal is to have a wide range of ide like

00:51:20,670 --> 00:51:24,869
pieces test runners debuggers maybe even

00:51:22,680 --> 00:51:26,369
a text editor but as standalone tools

00:51:24,869 --> 00:51:29,789
not as one great big monolithic

00:51:26,369 --> 00:51:31,260
integrated ite the journey started for

00:51:29,789 --> 00:51:33,569
me two years ago when I released a tool

00:51:31,260 --> 00:51:35,579
called cricket cricket is a GUI test

00:51:33,569 --> 00:51:37,260
runner for Python you pip install

00:51:35,579 --> 00:51:38,910
cricket into your virtual environment

00:51:37,260 --> 00:51:40,890
you run it on your project and it froze

00:51:38,910 --> 00:51:42,420
up a GUI locus which discovers all of

00:51:40,890 --> 00:51:44,069
your tests and allows you to run the

00:51:42,420 --> 00:51:45,240
test suite you can then see the full

00:51:44,069 --> 00:51:46,589
structure of your test suite and the

00:51:45,240 --> 00:51:48,000
tree on the left hand side you can see

00:51:46,589 --> 00:51:49,920
the progress of the test suite as it

00:51:48,000 --> 00:51:51,450
runs you can see which tests are passing

00:51:49,920 --> 00:51:52,920
which ones have failed and you can

00:51:51,450 --> 00:51:55,980
inspect that information while the test

00:51:52,920 --> 00:51:58,140
suite is actually running now cricket

00:51:55,980 --> 00:52:00,210
was built using TK inter which is the

00:51:58,140 --> 00:52:01,829
word which is the widget toolkit which

00:52:00,210 --> 00:52:07,260
comes out of the box with Python but

00:52:01,829 --> 00:52:08,910
taking into has some quirks so that

00:52:07,260 --> 00:52:11,609
started for me a very long process of

00:52:08,910 --> 00:52:14,099
yak shaving the first step was a new

00:52:11,609 --> 00:52:16,950
widget toolkit called toga toga is a

00:52:14,099 --> 00:52:18,080
cross-platform 100% system native python

00:52:16,950 --> 00:52:20,030
native widget toolkit

00:52:18,080 --> 00:52:21,830
that you can install using clipping

00:52:20,030 --> 00:52:24,020
store Togo now it's still very very

00:52:21,830 --> 00:52:25,670
early days but you can use it on OSX and

00:52:24,020 --> 00:52:28,520
Linux and if you squint hard enough

00:52:25,670 --> 00:52:31,100
windows all from the same source cloud

00:52:28,520 --> 00:52:33,770
base now there are lots of other widget

00:52:31,100 --> 00:52:35,420
toolkits out there cutie WX so you have

00:52:33,770 --> 00:52:37,550
to really have a good reason to write a

00:52:35,420 --> 00:52:39,260
new one being pure python is one of

00:52:37,550 --> 00:52:41,930
those reasons it's mildly compelling

00:52:39,260 --> 00:52:43,700
cutie + WX art Pippin steerable because

00:52:41,930 --> 00:52:45,350
there is a great big binary component

00:52:43,700 --> 00:52:47,480
that needs to exist toddler is one

00:52:45,350 --> 00:52:50,060
hundred percent pure python what's

00:52:47,480 --> 00:52:51,830
probably not enough so a little over a

00:52:50,060 --> 00:52:53,660
year ago archos odd to try and make

00:52:51,830 --> 00:52:54,950
Taylor work on mobile platforms so they

00:52:53,660 --> 00:52:58,660
do would be able to write cross-platform

00:52:54,950 --> 00:53:01,130
iOS and Android applications in Python

00:52:58,660 --> 00:53:03,680
now of course in order for target to

00:53:01,130 --> 00:53:05,270
work on mobile platforms Python needs to

00:53:03,680 --> 00:53:06,590
work on mobile platforms and so for the

00:53:05,270 --> 00:53:08,300
last year most of what I've been doing

00:53:06,590 --> 00:53:10,490
on this project has been looking at

00:53:08,300 --> 00:53:12,800
Python on mobile networks been going

00:53:10,490 --> 00:53:14,840
pretty well on iOS there is now a patch

00:53:12,800 --> 00:53:16,490
in the in the ticket tracker and they

00:53:14,840 --> 00:53:18,710
further Python ticket tracker that

00:53:16,490 --> 00:53:20,960
enables iOS build support in the main

00:53:18,710 --> 00:53:22,190
tree that's also been wrapped up into a

00:53:20,960 --> 00:53:23,780
separate project so you don't have to

00:53:22,190 --> 00:53:24,920
wait until that patch is merged into the

00:53:23,780 --> 00:53:27,140
tree it's completely will work

00:53:24,920 --> 00:53:29,120
completely standalone and about a month

00:53:27,140 --> 00:53:30,320
ago I announced a tool called booth case

00:53:29,120 --> 00:53:32,750
to make the process even easier

00:53:30,320 --> 00:53:35,000
briefcase is a dist utils extension that

00:53:32,750 --> 00:53:37,610
will convert any project with a setup py

00:53:35,000 --> 00:53:39,710
file into a working native iOS mobile

00:53:37,610 --> 00:53:42,200
project including installing all the

00:53:39,710 --> 00:53:44,030
local native dependencies and just

00:53:42,200 --> 00:53:45,680
quietly also works on OS X so you can

00:53:44,030 --> 00:53:47,090
get a standalone app that you can

00:53:45,680 --> 00:53:50,660
distribute with a fully self-contained

00:53:47,090 --> 00:53:52,720
version of Python now on android it's a

00:53:50,660 --> 00:53:56,150
little bit more complicated android

00:53:52,720 --> 00:53:58,220
really wants you to use java there is a

00:53:56,150 --> 00:54:00,860
patch for android that lets you run C

00:53:58,220 --> 00:54:02,840
Python on Android but it doesn't really

00:54:00,860 --> 00:54:05,240
work that well for various reasons I

00:54:02,840 --> 00:54:06,500
can't go into here but I do have

00:54:05,240 --> 00:54:09,410
something up my sleeves that will

00:54:06,500 --> 00:54:11,840
address this I'm not announcing it now I

00:54:09,410 --> 00:54:15,500
will be on Saturday when I'm at the

00:54:11,840 --> 00:54:16,970
Vancouver pi day so watch this space and

00:54:15,500 --> 00:54:18,770
if you want to know more I am

00:54:16,970 --> 00:54:24,080
susceptible to having drinks book for me

00:54:18,770 --> 00:54:26,030
so I'm not just interested in mobile

00:54:24,080 --> 00:54:27,690
though I won't Python Python all the

00:54:26,030 --> 00:54:29,550
things so what about the browser

00:54:27,690 --> 00:54:31,109
I've got a story there too as well a

00:54:29,550 --> 00:54:33,060
couple of weeks back announced the

00:54:31,109 --> 00:54:34,829
project called Batavia but behavior is

00:54:33,060 --> 00:54:37,589
an implementation of a Python virtual

00:54:34,829 --> 00:54:39,300
machine written in JavaScript unload

00:54:37,589 --> 00:54:41,730
projects like stoked brethren or pipe

00:54:39,300 --> 00:54:43,770
ijs it's tiny it's just 10 kilobytes of

00:54:41,730 --> 00:54:46,140
compressed JavaScript and it allows you

00:54:43,770 --> 00:54:48,390
to write run Python bug code in the

00:54:46,140 --> 00:54:50,099
browser why would you want to let's

00:54:48,390 --> 00:54:51,480
imagine you've got a django form that

00:54:50,099 --> 00:54:52,589
form is a validate method implementing

00:54:51,480 --> 00:54:55,140
some client side validation logic

00:54:52,589 --> 00:54:56,670
written in Python you will have client

00:54:55,140 --> 00:54:58,050
side validation that matches well you

00:54:56,670 --> 00:55:00,000
can use introspection on the server side

00:54:58,050 --> 00:55:02,460
to extract the byte code for the

00:55:00,000 --> 00:55:03,930
validate method ship that to the client

00:55:02,460 --> 00:55:06,599
as part of the rendered page and then

00:55:03,930 --> 00:55:08,250
run it in the clients browser and presto

00:55:06,599 --> 00:55:10,170
you will have language parity between

00:55:08,250 --> 00:55:11,900
the client and the server without having

00:55:10,170 --> 00:55:14,250
to do to your hands writing JavaScript

00:55:11,900 --> 00:55:15,450
one taken for spin wheel courtesy of our

00:55:14,250 --> 00:55:17,760
friends at Microsoft you can visit

00:55:15,450 --> 00:55:19,740
Batavia as your website's but net see a

00:55:17,760 --> 00:55:21,540
working dinner typing some Python 3 code

00:55:19,740 --> 00:55:24,839
hit run and it will run that Python 3 in

00:55:21,540 --> 00:55:26,359
your browser so that's my yard unless I

00:55:24,839 --> 00:55:28,829
have but two hands with which to shave

00:55:26,359 --> 00:55:30,420
so I definitely want help if any this

00:55:28,829 --> 00:55:33,150
sounds interesting please come and get

00:55:30,420 --> 00:55:35,130
in touch one more thing as I said before

00:55:33,150 --> 00:55:36,839
I sometimes do Django as well one of

00:55:35,130 --> 00:55:38,400
those roles is president of the DSF one

00:55:36,839 --> 00:55:40,589
of the things that DSF does is the DSF

00:55:38,400 --> 00:55:42,089
fellowship there is a program where the

00:55:40,589 --> 00:55:44,400
weather DSF pace they have Tim Graham

00:55:42,089 --> 00:55:46,050
work full-time on django django

00:55:44,400 --> 00:55:47,250
fellowship however costs money we did a

00:55:46,050 --> 00:55:49,290
fundraiser at the start of the year it

00:55:47,250 --> 00:55:51,420
was extremely successful but that money

00:55:49,290 --> 00:55:52,859
you're starting to run out so this is a

00:55:51,420 --> 00:55:54,390
shakedown if we want the fellowship to

00:55:52,859 --> 00:55:56,430
continue we need to keep raising money

00:55:54,390 --> 00:55:58,170
if you want to use if you use jangler

00:55:56,430 --> 00:56:01,109
commercially we need your company we

00:55:58,170 --> 00:56:02,910
need you to help us pay Tim we think

00:56:01,109 --> 00:56:04,230
he's worth every penny and then some we

00:56:02,910 --> 00:56:06,630
hope you agree if you want to contribute

00:56:04,230 --> 00:56:08,760
head to django project com / fundraising

00:56:06,630 --> 00:56:10,740
there you'll have a couple of options as

00:56:08,760 --> 00:56:12,119
in January you can donate once off but

00:56:10,740 --> 00:56:14,430
we've now added the ability for monthly

00:56:12,119 --> 00:56:15,540
subscriptions if you can would really

00:56:14,430 --> 00:56:17,339
lucky to take that one up because that

00:56:15,540 --> 00:56:18,180
lets us establish a baseline income

00:56:17,339 --> 00:56:19,680
rather than having to do best

00:56:18,180 --> 00:56:21,329
fundraising all the time there's also

00:56:19,680 --> 00:56:23,220
some options for your Amazon smile and

00:56:21,329 --> 00:56:25,109
burn every if you if you can do your

00:56:23,220 --> 00:56:28,000
employee does go does donation matching

00:56:25,109 --> 00:56:30,060
thank you very much

00:56:28,000 --> 00:56:30,060

YouTube URL: https://www.youtube.com/watch?v=Peo-n4spSRA


