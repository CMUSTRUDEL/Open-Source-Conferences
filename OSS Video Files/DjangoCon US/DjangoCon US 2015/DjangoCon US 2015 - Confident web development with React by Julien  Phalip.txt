Title: DjangoCon US 2015 - Confident web development with React by Julien  Phalip
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	Confident web development with React

React has become increasingly popular over the past year and is already used in large-scale products and companies such as Facebook, Instagram, Khan Academy, Hipchat and Netflix. This rapid success can in part be explained by React's performance qualities as well as its clean, predictable development workflow. To boot, its learning curve is very short despite it introducing a pretty radically different way of approaching front-end web development. Overall, React tends to greatly appeal to Django developers as both tools share the same philosophies of elegance and practicality.

React can benefit all types of web applications, from single-page apps to more conventional websites and can easily be introduced to complement existing web architectures. While React is Javascript-based and is primarily a client-side presentation tool, it remains agnostic about the rest of the stack and works really well with backend technologies like Django.

In this talk I will present how React and Django can work together to build powerful, easier-to-maintain web applications with confidence. I will start with a brief introduction of React's key concepts: the Flux architecture, the virtual DOM, JSX and the React component life-cyle. I will then explain how React can integrate with Django-powered backends and discuss some advanced topics such as server-side rendering, isomorphic JS, animations, testing, production environments and integration with asset pipelines. Numerous code samples will illustrate the various concepts presented. By the end of this talk, members of the audience who are unfamiliar with React will have a good grasp of its functioning and of its benefits; those already familiar with React will also have learned several useful tips applicable to their Django projects.

Help us caption & translate this video!

http://amara.org/v/HIYT/
Captions: 
	00:00:17,210 --> 00:00:22,250
yeah

00:00:19,109 --> 00:00:25,170
so thank you for coming today to my talk

00:00:22,250 --> 00:00:28,920
just very briefly about me so I work

00:00:25,170 --> 00:00:31,920
with Jango since 2007 being a jungle

00:00:28,920 --> 00:00:33,559
coke meter since 2011 and if you ever

00:00:31,920 --> 00:00:36,710
interested in what I'm saying you can

00:00:33,559 --> 00:00:39,780
always check out my Twitter account I

00:00:36,710 --> 00:00:42,090
work on neuron we are a web agency based

00:00:39,780 --> 00:00:43,920
in San Francisco and have offices all

00:00:42,090 --> 00:00:46,170
around the world and I encourage you to

00:00:43,920 --> 00:00:49,620
check out our website if you'd like to

00:00:46,170 --> 00:00:51,300
see what we are to so about this talk so

00:00:49,620 --> 00:00:52,980
this talk is about jungle and react and

00:00:51,300 --> 00:00:55,110
while it does assume that you know a

00:00:52,980 --> 00:00:56,879
little bit about react are still going

00:00:55,110 --> 00:00:59,100
to cover some of the basic principles of

00:00:56,879 --> 00:01:01,170
flux and react and then I'll show some

00:00:59,100 --> 00:01:05,309
examples of how jungle and react can

00:01:01,170 --> 00:01:09,299
work together so first about flux so

00:01:05,309 --> 00:01:11,820
flux is an architecture whose core

00:01:09,299 --> 00:01:16,110
principle is based on a unidirectional

00:01:11,820 --> 00:01:17,520
data flow now that cooperative principle

00:01:16,110 --> 00:01:19,170
is not particularly novel or

00:01:17,520 --> 00:01:21,210
groundbreaking it's been used for a long

00:01:19,170 --> 00:01:23,909
time in many disciplines like video

00:01:21,210 --> 00:01:25,200
games for example and you may also argue

00:01:23,909 --> 00:01:27,000
that it's been used in the web in

00:01:25,200 --> 00:01:29,729
general with traditional websites if you

00:01:27,000 --> 00:01:32,820
consider the traditional HTTP request

00:01:29,729 --> 00:01:36,900
server-side pre-rendering response cycle

00:01:32,820 --> 00:01:41,329
over and over but it easily it is a bit

00:01:36,900 --> 00:01:44,369
new in the world of rich client-side web

00:01:41,329 --> 00:01:45,020
application so let's see how it all

00:01:44,369 --> 00:01:47,850
works

00:01:45,020 --> 00:01:49,950
typically it starts with an action an

00:01:47,850 --> 00:01:51,570
action may is basically an even that is

00:01:49,950 --> 00:01:54,210
triggered by various things it could be

00:01:51,570 --> 00:01:56,460
triggered by a user clicking on

00:01:54,210 --> 00:01:59,399
something on in the user interface it

00:01:56,460 --> 00:02:00,899
could be also regular even that is

00:01:59,399 --> 00:02:03,119
triggered at a regular interval by a

00:02:00,899 --> 00:02:06,210
timer it could also be there are being

00:02:03,119 --> 00:02:08,039
pushed via WebSockets from a server so

00:02:06,210 --> 00:02:10,860
one of our action is triggered direction

00:02:08,039 --> 00:02:12,460
is caught by a dispatcher which will

00:02:10,860 --> 00:02:15,010
then pass that

00:02:12,460 --> 00:02:16,720
and long to store a story just

00:02:15,010 --> 00:02:19,950
responsible for holding the state of

00:02:16,720 --> 00:02:23,380
your application so when a the store may

00:02:19,950 --> 00:02:26,860
notify the state and internal data and

00:02:23,380 --> 00:02:29,110
then pass that data over to views and

00:02:26,860 --> 00:02:32,530
then the view is responsible for

00:02:29,110 --> 00:02:34,780
rendering itself you may also have sub

00:02:32,530 --> 00:02:36,910
views so in that case you will pass

00:02:34,780 --> 00:02:38,740
along that data down to its abuse and

00:02:36,910 --> 00:02:41,350
then serve use with rather than cells

00:02:38,740 --> 00:02:42,700
and so on so what's very important in

00:02:41,350 --> 00:02:45,550
this architecture is that whenever

00:02:42,700 --> 00:02:47,020
something changes needs to change in the

00:02:45,550 --> 00:02:49,690
state of your application what you want

00:02:47,020 --> 00:02:52,240
to do is to trigger a new action so for

00:02:49,690 --> 00:02:53,920
example if a user will click somewhere

00:02:52,240 --> 00:02:57,070
on interface and you will trigger an

00:02:53,920 --> 00:02:58,720
action a new action and then that action

00:02:57,070 --> 00:03:01,450
would be caught by the dispatcher and

00:02:58,720 --> 00:03:03,580
then you will enter this whole cycle

00:03:01,450 --> 00:03:05,530
again you will then go through this

00:03:03,580 --> 00:03:10,180
entire cycle of rerun during the entire

00:03:05,530 --> 00:03:11,920
int the entire interface react itself is

00:03:10,180 --> 00:03:14,700
really just about this view system it

00:03:11,920 --> 00:03:18,010
just focuses purely on running

00:03:14,700 --> 00:03:19,870
everything that sits outside well there

00:03:18,010 --> 00:03:22,050
are several implementations available

00:03:19,870 --> 00:03:27,880
out there I can say for example redux

00:03:22,050 --> 00:03:29,710
reflux flam hogs flexor and an old multi

00:03:27,880 --> 00:03:34,900
there's about an hour couple dozens

00:03:29,710 --> 00:03:37,060
extra it's it's still you know pretty

00:03:34,900 --> 00:03:38,650
new there are no clear winners at this

00:03:37,060 --> 00:03:41,320
point so it really comes down to

00:03:38,650 --> 00:03:44,770
personal preference and to the nature of

00:03:41,320 --> 00:03:46,300
your application hopefully within the

00:03:44,770 --> 00:03:48,280
next few months there will be one or two

00:03:46,300 --> 00:03:49,840
that emerge as de facto standouts but

00:03:48,280 --> 00:03:51,760
for now I'll just encourage you to try

00:03:49,840 --> 00:03:56,740
it a few and see what which one feels

00:03:51,760 --> 00:03:58,990
the best so let's see now what some of

00:03:56,740 --> 00:04:01,090
the advantages of flex are so first of

00:03:58,990 --> 00:04:04,240
all it streamlines the rendering process

00:04:01,090 --> 00:04:05,770
as we just saw anytime that anything

00:04:04,240 --> 00:04:08,560
happens that would might impact the

00:04:05,770 --> 00:04:12,790
state of your application you enter the

00:04:08,560 --> 00:04:15,390
the same entire rendering process which

00:04:12,790 --> 00:04:17,950
means that you will approach the

00:04:15,390 --> 00:04:20,410
rendering of your page initially the

00:04:17,950 --> 00:04:23,590
first time the same way as on the second

00:04:20,410 --> 00:04:24,670
time the third time etc and because of

00:04:23,590 --> 00:04:26,860
that

00:04:24,670 --> 00:04:31,990
is that your cognitive load is

00:04:26,860 --> 00:04:33,370
drastically reduced because you you

00:04:31,990 --> 00:04:35,380
don't really need to worry about how the

00:04:33,370 --> 00:04:38,050
different views impact each other as the

00:04:35,380 --> 00:04:41,140
state of your application challenges you

00:04:38,050 --> 00:04:47,200
you can really focus on one particular

00:04:41,140 --> 00:04:49,480
view at a time that that then makes for

00:04:47,200 --> 00:04:52,360
a simpler codebase because you don't

00:04:49,480 --> 00:04:54,550
have to deal with mutations for your

00:04:52,360 --> 00:04:56,440
views that eliminates a whole class of

00:04:54,550 --> 00:04:58,480
potential bugs that you basically never

00:04:56,440 --> 00:05:01,480
have to worry about and that is very

00:04:58,480 --> 00:05:03,610
liberating so all of that put together

00:05:01,480 --> 00:05:05,770
really makes for consistent predictable

00:05:03,610 --> 00:05:08,590
behaviors and that goes a long way in

00:05:05,770 --> 00:05:11,740
making you as a developer more confident

00:05:08,590 --> 00:05:15,190
about your application now let's see

00:05:11,740 --> 00:05:17,050
some advantages of react specifically so

00:05:15,190 --> 00:05:18,550
react abstracts the down with component

00:05:17,050 --> 00:05:19,990
it allows you to think of the

00:05:18,550 --> 00:05:23,140
architecture of your application really

00:05:19,990 --> 00:05:26,080
in terms of modules and sub-modules and

00:05:23,140 --> 00:05:29,440
again you can always focus on one piece

00:05:26,080 --> 00:05:32,440
at a time it also handles all the Dom

00:05:29,440 --> 00:05:33,970
mutations automatically we teaching the

00:05:32,440 --> 00:05:36,370
Dom is something that can be quite

00:05:33,970 --> 00:05:38,710
complex sometimes especially in to do in

00:05:36,370 --> 00:05:41,920
an efficient way well react will handle

00:05:38,710 --> 00:05:44,110
all that for you and it is also agnostic

00:05:41,920 --> 00:05:45,520
about the rest of the stack the only

00:05:44,110 --> 00:05:47,230
thing that react really cares about is

00:05:45,520 --> 00:05:49,210
that you feel it some data and will take

00:05:47,230 --> 00:05:51,070
care of all the rendering it really

00:05:49,210 --> 00:05:52,630
doesn't matter in which context react is

00:05:51,070 --> 00:05:54,460
used it could be used to render your

00:05:52,630 --> 00:05:56,290
entire application but it can also be

00:05:54,460 --> 00:05:58,870
used to just render one little piece of

00:05:56,290 --> 00:06:01,060
an existing website for example and I

00:05:58,870 --> 00:06:03,100
also doesn't matter where the data came

00:06:01,060 --> 00:06:05,980
from why the data change how it was

00:06:03,100 --> 00:06:07,570
changed which means that you can use use

00:06:05,980 --> 00:06:08,680
it with pretty much any background and

00:06:07,570 --> 00:06:13,360
obviously in our case we'll be using

00:06:08,680 --> 00:06:14,920
Django so to illustrate some some of

00:06:13,360 --> 00:06:17,620
those concepts I'm going to walk you

00:06:14,920 --> 00:06:20,230
through a small demo app that I built

00:06:17,620 --> 00:06:23,530
it's very simple it's just a list of

00:06:20,230 --> 00:06:25,630
photos you may filter those photos based

00:06:23,530 --> 00:06:28,690
on whether it's black and white or color

00:06:25,630 --> 00:06:29,890
and you can also then select some of

00:06:28,690 --> 00:06:32,740
those photos to mail them as your

00:06:29,890 --> 00:06:35,050
favorites but first let's see what are

00:06:32,740 --> 00:06:35,620
the pieces involved so first we have

00:06:35,050 --> 00:06:37,420
Django

00:06:35,620 --> 00:06:38,230
which will be responsible for providing

00:06:37,420 --> 00:06:40,150
a REST API

00:06:38,230 --> 00:06:43,180
that allows you to access and manipulate

00:06:40,150 --> 00:06:44,530
the data server side and then we have

00:06:43,180 --> 00:06:46,900
reacted will be responsible for

00:06:44,530 --> 00:06:50,680
rendering the UI client-side and to

00:06:46,900 --> 00:06:53,010
handle all the user interactions now

00:06:50,680 --> 00:06:55,930
let's see how the species fit together

00:06:53,010 --> 00:06:58,240
so first we have the client so that this

00:06:55,930 --> 00:07:00,580
case will be the browser react will be

00:06:58,240 --> 00:07:03,880
rendering the page and then whenever the

00:07:00,580 --> 00:07:05,590
user will click on on the photos the

00:07:03,880 --> 00:07:09,610
post request will be emitted to the

00:07:05,590 --> 00:07:11,970
server to the API and then Django will

00:07:09,610 --> 00:07:14,590
update the database

00:07:11,970 --> 00:07:17,710
we then serialize the current state of

00:07:14,590 --> 00:07:19,960
the data and then pass it over to back

00:07:17,710 --> 00:07:23,680
to the client and then react will be

00:07:19,960 --> 00:07:26,470
able to rerun at the page to reflect the

00:07:23,680 --> 00:07:28,900
changes that have been made and we try

00:07:26,470 --> 00:07:32,680
and follow this unidirectional flow of

00:07:28,900 --> 00:07:36,010
data now you may be wondering okay so

00:07:32,680 --> 00:07:37,690
how does react do to render the page

00:07:36,010 --> 00:07:41,260
initially how does he have access to the

00:07:37,690 --> 00:07:45,250
data to hydrate the Stahl's meaning to

00:07:41,260 --> 00:07:46,540
load the stores with initial data I'm

00:07:45,250 --> 00:07:48,220
going to cover a couple different

00:07:46,540 --> 00:07:51,130
methods one that you might think of as

00:07:48,220 --> 00:07:54,070
conventional is when the server we first

00:07:51,130 --> 00:07:57,670
returned and pretty much empty document

00:07:54,070 --> 00:07:59,470
HTML document and I will do another Ajax

00:07:57,670 --> 00:08:00,990
request just to fetch the data so we can

00:07:59,470 --> 00:08:04,600
then render the content of that page

00:08:00,990 --> 00:08:07,540
another method which might think of less

00:08:04,600 --> 00:08:09,850
conventional is when the server so in

00:08:07,540 --> 00:08:13,000
this case jungle will serialize the data

00:08:09,850 --> 00:08:15,880
and stick the data into the initial HTML

00:08:13,000 --> 00:08:18,220
document and pass it as a global

00:08:15,880 --> 00:08:22,780
JavaScript variable and that is for

00:08:18,220 --> 00:08:27,240
example how Instagram does it so now

00:08:22,780 --> 00:08:27,240
let's take a look at a working day or

00:08:32,820 --> 00:08:43,620
okay so can you see yeah right so so

00:08:41,820 --> 00:08:47,040
here we have our application we have our

00:08:43,620 --> 00:08:52,020
overlay photos to the left you may

00:08:47,040 --> 00:08:55,680
filter the furrows and whether they're

00:08:52,020 --> 00:08:57,870
black and white or color you can also

00:08:55,680 --> 00:09:00,690
represent the same list in two different

00:08:57,870 --> 00:09:05,540
ways you can represent Li here as a list

00:09:00,690 --> 00:09:08,850
or as a as a grid of thumbnails and

00:09:05,540 --> 00:09:10,680
whenever you click on a photo you will

00:09:08,850 --> 00:09:13,680
see that first it will highlight that

00:09:10,680 --> 00:09:15,510
photo and it will also update the panel

00:09:13,680 --> 00:09:17,180
to the right which lists all of the

00:09:15,510 --> 00:09:19,680
favorites that have been selected so

00:09:17,180 --> 00:09:21,900
what's important to you what I want to

00:09:19,680 --> 00:09:24,600
emphasize here is whenever I click on an

00:09:21,900 --> 00:09:27,230
event I'm sorry on a photo whenever I

00:09:24,600 --> 00:09:30,800
click on any of those buttons the entire

00:09:27,230 --> 00:09:34,110
page gets refreshed

00:09:30,800 --> 00:09:38,550
you can't really see it because react is

00:09:34,110 --> 00:09:42,630
really fast doing that but any even here

00:09:38,550 --> 00:09:45,900
triggers a full page refresh and you can

00:09:42,630 --> 00:09:54,240
see also here that whenever I click

00:09:45,900 --> 00:09:57,110
photo it sounds requests to the to the

00:09:54,240 --> 00:10:01,710
server suppose request delete request

00:09:57,110 --> 00:10:07,280
all right so now let's see how what the

00:10:01,710 --> 00:10:07,280
code looks like I'm going to start with

00:10:09,650 --> 00:10:13,250
the model

00:10:14,360 --> 00:10:23,540
so it's a really simple stuff here we

00:10:18,799 --> 00:10:25,549
can you all see yeah so we only have two

00:10:23,540 --> 00:10:27,739
models here a photo which would hold

00:10:25,549 --> 00:10:30,589
just all of the photos each photo has a

00:10:27,739 --> 00:10:32,629
URL also has a boolean flag that will

00:10:30,589 --> 00:10:35,720
indicate whether it's a color or black

00:10:32,629 --> 00:10:37,839
and white and then another model the

00:10:35,720 --> 00:10:40,549
favorite model which will hold basically

00:10:37,839 --> 00:10:45,889
all the pointers to the photos that have

00:10:40,549 --> 00:10:48,559
been favorited then the API the API here

00:10:45,889 --> 00:10:50,839
was built with Django rest framework if

00:10:48,559 --> 00:10:52,069
you're familiar with Django rest

00:10:50,839 --> 00:10:54,619
framework it should all looks pretty

00:10:52,069 --> 00:10:57,949
standard the only thing that I'm doing

00:10:54,619 --> 00:11:03,559
here that is a little bit different is

00:10:57,949 --> 00:11:07,009
for the favorite end point when I add or

00:11:03,559 --> 00:11:08,689
remove a favorite so for example when I

00:11:07,009 --> 00:11:12,019
add a favorite so that's the create

00:11:08,689 --> 00:11:13,999
method here I will first do the the

00:11:12,019 --> 00:11:18,769
actual action of adding the favorite to

00:11:13,999 --> 00:11:21,999
the database but then I will also see

00:11:18,769 --> 00:11:24,589
realize all of the current favorites and

00:11:21,999 --> 00:11:26,779
send that back with the response and

00:11:24,589 --> 00:11:29,029
this is just a small optimization here

00:11:26,779 --> 00:11:31,249
that I'm doing and I'll just explain why

00:11:29,029 --> 00:11:33,949
I'm doing this and you can see here that

00:11:31,249 --> 00:11:35,899
I'm doing the same for the destro method

00:11:33,949 --> 00:11:40,279
which is called when you delete or

00:11:35,899 --> 00:11:43,749
remove a favorite okay so then let's

00:11:40,279 --> 00:11:47,299
take a look at the view the view is

00:11:43,749 --> 00:11:51,559
extremely simple it's this one at the

00:11:47,299 --> 00:11:55,069
top ajax hydration all it does really is

00:11:51,559 --> 00:11:57,319
that it will run out this template and

00:11:55,069 --> 00:11:59,419
it's basically empty there's nothing in

00:11:57,319 --> 00:12:02,239
there we just have the links to our

00:11:59,419 --> 00:12:06,129
JavaScript and CSS and here I've just

00:12:02,239 --> 00:12:09,139
added a header and as you can see here

00:12:06,129 --> 00:12:12,199
initially we basically have absolutely

00:12:09,139 --> 00:12:16,089
nothing so we do need to do that second

00:12:12,199 --> 00:12:16,089
Ajax request to load the data

00:12:22,010 --> 00:12:27,540
so that is done with this function here

00:12:24,720 --> 00:12:31,050
so this function gets called as you

00:12:27,540 --> 00:12:33,720
first display the page that ng page in

00:12:31,050 --> 00:12:39,750
the browser so first we will render our

00:12:33,720 --> 00:12:43,589
react main view so this random method

00:12:39,750 --> 00:12:45,570
here is going to get cold so the very

00:12:43,589 --> 00:12:47,279
first time that that this is going to

00:12:45,570 --> 00:12:49,050
get cold the store isn't it won't be

00:12:47,279 --> 00:12:51,240
hydrated it will there won't be any data

00:12:49,050 --> 00:12:53,370
at this point so we will first display

00:12:51,240 --> 00:12:56,930
this progress bar so this is what you

00:12:53,370 --> 00:12:56,930
can see here when i refresh the page

00:13:01,610 --> 00:13:04,610
okay

00:13:06,250 --> 00:13:13,760
then here I'm just waiting for a second

00:13:11,180 --> 00:13:17,510
is just to simulate a slow slow

00:13:13,760 --> 00:13:19,400
connection to the internet but really

00:13:17,510 --> 00:13:23,170
what this what this does is that it

00:13:19,400 --> 00:13:23,170
wouldn't call this method fetch data

00:13:40,210 --> 00:13:47,870
fetch data really only does it just runs

00:13:43,970 --> 00:13:50,210
a couple Ajax calls too so we call our

00:13:47,870 --> 00:13:52,460
API fetch that data and once we receive

00:13:50,210 --> 00:13:54,740
all of it then we are ready to hydrate

00:13:52,460 --> 00:14:01,300
the store so we basically load that data

00:13:54,740 --> 00:14:04,970
into our store at that point our view is

00:14:01,300 --> 00:14:06,500
automatically going to be rear-ended so

00:14:04,970 --> 00:14:09,320
this random method is going to get

00:14:06,500 --> 00:14:11,150
called again and at that point we still

00:14:09,320 --> 00:14:12,770
we are still displaying the progress bar

00:14:11,150 --> 00:14:17,870
that progress bar is still displayed on

00:14:12,770 --> 00:14:20,060
the page but at that point the store has

00:14:17,870 --> 00:14:22,850
been hydrated so we are going to render

00:14:20,060 --> 00:14:24,860
this instead which is the album

00:14:22,850 --> 00:14:28,670
component that's a custom component that

00:14:24,860 --> 00:14:31,520
I've made and react will be smart enough

00:14:28,670 --> 00:14:37,070
to know that it needs to remove the

00:14:31,520 --> 00:14:39,920
progress bar and instead dump our album

00:14:37,070 --> 00:14:42,550
component by the way you can see here

00:14:39,920 --> 00:14:46,610
that I'm using progress bar that's just

00:14:42,550 --> 00:14:49,190
a premade component that I've taken from

00:14:46,610 --> 00:14:51,530
the react bootstrap library which is a

00:14:49,190 --> 00:14:53,510
reacting permutation of bootstrap but it

00:14:51,530 --> 00:14:56,570
kind of shows how you can build your

00:14:53,510 --> 00:15:00,730
application a bit like LEGO pieces so

00:14:56,570 --> 00:15:00,730
now let's drill down into our ad on our

00:15:02,800 --> 00:15:06,580
album component

00:15:08,590 --> 00:15:15,400
again very simple here all that we do is

00:15:10,930 --> 00:15:17,020
to add two sub components the photo

00:15:15,400 --> 00:15:19,270
panel which is basically the grid of

00:15:17,020 --> 00:15:22,360
photos to the left and the favori panel

00:15:19,270 --> 00:15:23,500
which is the the small panel to the

00:15:22,360 --> 00:15:26,230
right that displays all of the

00:15:23,500 --> 00:15:29,020
favourites that have been selected by

00:15:26,230 --> 00:15:30,910
the user in each case we also pass down

00:15:29,020 --> 00:15:33,580
some data so the photo panel needs to

00:15:30,910 --> 00:15:35,050
know about the photos so you can run out

00:15:33,580 --> 00:15:36,760
the photos and also the favorite so he

00:15:35,050 --> 00:15:39,100
knows how to highlight the different

00:15:36,760 --> 00:15:41,350
photos that have been favorited and

00:15:39,100 --> 00:15:43,090
whereas the favorite panel only needs to

00:15:41,350 --> 00:15:45,640
know about the favorites so here we

00:15:43,090 --> 00:15:48,910
consider with passing down data to the

00:15:45,640 --> 00:15:51,760
sub views take a look at the photo panel

00:15:48,910 --> 00:15:53,950
that's probably the most complex again

00:15:51,760 --> 00:15:56,200
this random method is going to get

00:15:53,950 --> 00:15:58,330
called automatically at this point first

00:15:56,200 --> 00:16:03,880
thing that we do here is to just filter

00:15:58,330 --> 00:16:07,120
the data set that we have based on those

00:16:03,880 --> 00:16:17,890
I'm not sure what's so big here because

00:16:07,120 --> 00:16:21,280
of the resolution yeah yeah okay so it's

00:16:17,890 --> 00:16:23,800
going to loot for whatever is selected

00:16:21,280 --> 00:16:25,990
here to filter down and be to know

00:16:23,800 --> 00:16:28,300
exactly what photos we need to to

00:16:25,990 --> 00:16:29,350
display and that's just a custom method

00:16:28,300 --> 00:16:32,170
here just a little bit of JavaScript

00:16:29,350 --> 00:16:34,270
that's going to go through the list and

00:16:32,170 --> 00:16:40,600
only return the photos that we actually

00:16:34,270 --> 00:16:44,770
want to display all right so now that we

00:16:40,600 --> 00:16:47,440
have the list of the photos to display

00:16:44,770 --> 00:16:51,190
we then render some more components some

00:16:47,440 --> 00:16:55,270
most sub components here I am going to

00:16:51,190 --> 00:16:57,730
call this function run the photos it's

00:16:55,270 --> 00:16:59,470
just a custom method that I haven't here

00:16:57,730 --> 00:17:02,110
in this class in this components class

00:16:59,470 --> 00:17:05,770
all I do here is to loop through all the

00:17:02,110 --> 00:17:09,190
photos I do a little bit of computation

00:17:05,770 --> 00:17:11,470
and I try to find out for example if the

00:17:09,190 --> 00:17:13,480
photo the current photo is favorited so

00:17:11,470 --> 00:17:16,690
I can figure out what color if I need to

00:17:13,480 --> 00:17:19,510
display any highlighting around it so

00:17:16,690 --> 00:17:20,950
that's the style here and then based on

00:17:19,510 --> 00:17:22,850
what we've selected between

00:17:20,950 --> 00:17:26,209
the thumbnails

00:17:22,850 --> 00:17:28,429
or the least option we are going to take

00:17:26,209 --> 00:17:30,620
two different paths so in this case if

00:17:28,429 --> 00:17:32,780
we're if we decided that we wanted to

00:17:30,620 --> 00:17:35,960
show as a thumbnail then we're going to

00:17:32,780 --> 00:17:38,210
run out this this particular photo as a

00:17:35,960 --> 00:17:40,400
thumbnail that's another component that

00:17:38,210 --> 00:17:44,299
I've picked from the rear bootstrap

00:17:40,400 --> 00:17:49,130
library and then we assign the URL etc

00:17:44,299 --> 00:17:52,690
and a given style or if in the at this

00:17:49,130 --> 00:17:55,520
point I have selected this piece then

00:17:52,690 --> 00:17:57,110
this this function is going to get cold

00:17:55,520 --> 00:18:00,830
and I run I'm going to render it as a

00:17:57,110 --> 00:18:02,809
list group item component again you can

00:18:00,830 --> 00:18:06,830
see here that there's absolutely no code

00:18:02,809 --> 00:18:09,110
that says remove the thumbnail add the

00:18:06,830 --> 00:18:11,840
list items instead of vice versa all I

00:18:09,110 --> 00:18:14,360
have to say I can code this component a

00:18:11,840 --> 00:18:16,070
very declarative way I can only focus on

00:18:14,360 --> 00:18:18,409
a given state and say this is how you

00:18:16,070 --> 00:18:20,630
should display given this state or you

00:18:18,409 --> 00:18:23,270
displayed this way given this state all

00:18:20,630 --> 00:18:25,400
of the transitions here are basically

00:18:23,270 --> 00:18:30,400
handled by react because it's going to

00:18:25,400 --> 00:18:33,530
go through that method every time and

00:18:30,400 --> 00:18:37,730
you can see here that I am passing an

00:18:33,530 --> 00:18:41,630
action to both methods here so whether I

00:18:37,730 --> 00:18:43,280
click on photo here or a list item here

00:18:41,630 --> 00:18:46,549
the same action is going to be triggered

00:18:43,280 --> 00:18:49,640
it's called toggle favorite now you can

00:18:46,549 --> 00:18:51,950
see what what is going to catch that

00:18:49,640 --> 00:18:55,460
action and deal with it

00:18:51,950 --> 00:18:57,890
so it's this method here first we try

00:18:55,460 --> 00:19:00,530
and figure out whether the current photo

00:18:57,890 --> 00:19:02,090
that's been clicked is a favorite if it

00:19:00,530 --> 00:19:04,370
is then we are going to remove it from

00:19:02,090 --> 00:19:06,169
our favorites if it's not done we are

00:19:04,370 --> 00:19:09,950
going to add it so let's take a look for

00:19:06,169 --> 00:19:11,900
sample add adding and now here I'm going

00:19:09,950 --> 00:19:13,640
to do two things and really the this

00:19:11,900 --> 00:19:15,200
first thing is not particularly react

00:19:13,640 --> 00:19:18,919
specific it's more of an optimization

00:19:15,200 --> 00:19:20,990
for the user experience I do not want to

00:19:18,919 --> 00:19:22,760
wait for the round-trip to the server to

00:19:20,990 --> 00:19:26,929
be able to display feedback to the user

00:19:22,760 --> 00:19:28,940
that the photo has been favorited so

00:19:26,929 --> 00:19:31,280
what i'm doing here is done holding a

00:19:28,940 --> 00:19:34,070
local data structure which is basically

00:19:31,280 --> 00:19:35,770
an array that holds all of the current

00:19:34,070 --> 00:19:38,140
favorites and i

00:19:35,770 --> 00:19:39,970
add that photo to that local data

00:19:38,140 --> 00:19:42,460
structure and then I will call this

00:19:39,970 --> 00:19:44,470
method here property propagate state

00:19:42,460 --> 00:19:46,630
which is going to trigger a full render

00:19:44,470 --> 00:19:49,300
of the entire page which is going to

00:19:46,630 --> 00:19:53,860
cause the photo you just clicked to

00:19:49,300 --> 00:19:56,680
already be highlighted and this is

00:19:53,860 --> 00:19:59,920
because and this is called an optimistic

00:19:56,680 --> 00:20:01,990
update is one you trust that the back

00:19:59,920 --> 00:20:03,760
end is most likely going to work and you

00:20:01,990 --> 00:20:05,650
just don't want to let the user wait too

00:20:03,760 --> 00:20:07,870
long before they see anything change on

00:20:05,650 --> 00:20:10,390
the interface and then this is when we

00:20:07,870 --> 00:20:13,000
actually change the actual data server

00:20:10,390 --> 00:20:16,120
side so for that we need to run a post

00:20:13,000 --> 00:20:20,380
request to our API and I will pass down

00:20:16,120 --> 00:20:24,490
the photo then what I do here and again

00:20:20,380 --> 00:20:26,470
this is this piece is optional if you

00:20:24,490 --> 00:20:29,380
remember earlier I said whenever I run

00:20:26,470 --> 00:20:31,240
an API call I always return the current

00:20:29,380 --> 00:20:35,080
state of the data server side because

00:20:31,240 --> 00:20:37,120
this is really the the authoritative

00:20:35,080 --> 00:20:39,360
data this is the data are really trust

00:20:37,120 --> 00:20:41,560
to want to stand a stain on the server I

00:20:39,360 --> 00:20:46,170
returned that from the server so then I

00:20:41,560 --> 00:20:48,640
can replace my local data structure with

00:20:46,170 --> 00:20:51,370
the data that was provided from the

00:20:48,640 --> 00:20:53,560
server and here I'm only doing this just

00:20:51,370 --> 00:20:56,230
to give myself some extra confidence

00:20:53,560 --> 00:20:59,110
that the UI reflects the actual state of

00:20:56,230 --> 00:21:00,640
the data server-side if everything went

00:20:59,110 --> 00:21:02,470
well really nothing is going to change

00:21:00,640 --> 00:21:05,500
but react is going to be smart enough to

00:21:02,470 --> 00:21:08,380
figure that out because here I replace

00:21:05,500 --> 00:21:11,470
the data that came back from the server

00:21:08,380 --> 00:21:13,630
I replace it with into the local store

00:21:11,470 --> 00:21:15,240
and I'm propagate the state so that's

00:21:13,630 --> 00:21:17,830
going to trigger another full render

00:21:15,240 --> 00:21:20,110
however react is going to be spun enough

00:21:17,830 --> 00:21:23,950
to know that okay well I had already

00:21:20,110 --> 00:21:26,410
made that chance previously I was I had

00:21:23,950 --> 00:21:28,300
already highlighted that photo and I see

00:21:26,410 --> 00:21:30,370
that you're asking me to highlight the

00:21:28,300 --> 00:21:32,260
photo again so I'm not gonna do anything

00:21:30,370 --> 00:21:34,060
so this is not only is this going to

00:21:32,260 --> 00:21:36,940
have very low impact on the performance

00:21:34,060 --> 00:21:39,430
and this catch method here is if

00:21:36,940 --> 00:21:41,890
something ever went wrong on the server

00:21:39,430 --> 00:21:44,110
then I'm going to fetch the data again

00:21:41,890 --> 00:21:48,930
from the server and then that is also

00:21:44,110 --> 00:21:51,290
going to retrigger a full render

00:21:48,930 --> 00:21:54,000
and that's going to allow me to rollback

00:21:51,290 --> 00:21:56,700
previously I had optimistically updated

00:21:54,000 --> 00:21:58,290
interface but if something went wrong on

00:21:56,700 --> 00:22:01,650
the server that's going to basically

00:21:58,290 --> 00:22:04,410
revert that change and I do the same

00:22:01,650 --> 00:22:07,110
thing when I want to remove server he a

00:22:04,410 --> 00:22:09,540
favorite year I first optimistically

00:22:07,110 --> 00:22:12,720
removed that that favorite from my local

00:22:09,540 --> 00:22:15,510
my local storage and then throw a

00:22:12,720 --> 00:22:17,720
trigger full render and then same thing

00:22:15,510 --> 00:22:20,070
I send a request to the server and

00:22:17,720 --> 00:22:22,530
something again I replaced the local

00:22:20,070 --> 00:22:24,600
data with the new the the server the

00:22:22,530 --> 00:22:31,530
data I came back from the server and

00:22:24,600 --> 00:22:33,810
rerender everything so that was for the

00:22:31,530 --> 00:22:36,980
ajax hydration that i mentioned earlier

00:22:33,810 --> 00:22:42,470
there is another technique for the

00:22:36,980 --> 00:22:42,470
purely the initial rendering and that is

00:22:44,480 --> 00:22:50,310
this one so this is exactly the same

00:22:48,330 --> 00:22:54,240
table it looks on you know works exactly

00:22:50,310 --> 00:22:59,330
the same the only thing that changes

00:22:54,240 --> 00:22:59,330
here is that we are going to be calling

00:23:00,710 --> 00:23:09,480
this view serialized hydration so what

00:23:06,900 --> 00:23:12,900
we do here we first serialize the data

00:23:09,480 --> 00:23:16,770
using the sterilizers from my api the

00:23:12,900 --> 00:23:19,770
same ones i then dump it all of that

00:23:16,770 --> 00:23:25,430
stuff into a JSON object and I pass that

00:23:19,770 --> 00:23:29,270
over to my template and here we just

00:23:25,430 --> 00:23:37,410
dump that JSON object into the HTML

00:23:29,270 --> 00:23:39,240
inside a global variable so this is here

00:23:37,410 --> 00:23:44,250
where you can see if I show the source

00:23:39,240 --> 00:23:45,720
you can see that's the object so what's

00:23:44,250 --> 00:23:47,490
what's good about this what's

00:23:45,720 --> 00:23:51,300
interesting about this is that it saves

00:23:47,490 --> 00:23:53,700
you from doing an extra exact score so

00:23:51,300 --> 00:23:56,310
it means that along with the initial

00:23:53,700 --> 00:23:58,140
HTML document you will already have the

00:23:56,310 --> 00:24:00,210
data you'll be able to write away start

00:23:58,140 --> 00:24:02,520
rendering things now you may want to be

00:24:00,210 --> 00:24:04,500
cautious if you have a gigantic

00:24:02,520 --> 00:24:07,170
of data that may not be suitable because

00:24:04,500 --> 00:24:09,480
it's going to make the initial call to

00:24:07,170 --> 00:24:12,450
the server slower so you need to you

00:24:09,480 --> 00:24:13,110
need to find out what one method works

00:24:12,450 --> 00:24:14,970
best for you

00:24:13,110 --> 00:24:21,480
these are the Ajax hydration order that

00:24:14,970 --> 00:24:24,450
pre serialized method okay so I was for

00:24:21,480 --> 00:24:26,930
a brief demo there there's something

00:24:24,450 --> 00:24:29,880
else I want you to talk about which is

00:24:26,930 --> 00:24:31,200
server-side rendering so server-side

00:24:29,880 --> 00:24:34,740
rendering may be interesting in

00:24:31,200 --> 00:24:39,030
different cases first of all if you are

00:24:34,740 --> 00:24:42,380
concerned about SEO obviously would be

00:24:39,030 --> 00:24:45,180
much more easier for search engines to

00:24:42,380 --> 00:24:47,310
crawl your side and to index the content

00:24:45,180 --> 00:24:49,740
of your site if all of that good stuff

00:24:47,310 --> 00:24:55,380
all that content was pre-rendered as

00:24:49,740 --> 00:24:57,480
part of the HTML document doing

00:24:55,380 --> 00:25:01,710
server-side rendering also is also good

00:24:57,480 --> 00:25:04,830
for if your audience has a large amount

00:25:01,710 --> 00:25:08,240
of mobile devices that it's also good

00:25:04,830 --> 00:25:11,880
because it will save some resource and

00:25:08,240 --> 00:25:13,710
CPU processing on your on your device

00:25:11,880 --> 00:25:17,580
because that we save them the effort of

00:25:13,710 --> 00:25:22,050
rendering the page initially inside the

00:25:17,580 --> 00:25:23,490
browser and it's also good because since

00:25:22,050 --> 00:25:25,320
the page comes pre-rendered you can

00:25:23,490 --> 00:25:27,540
already start consuming it you don't

00:25:25,320 --> 00:25:31,470
have to wait a little time for it to

00:25:27,540 --> 00:25:33,420
render and react make that actually

00:25:31,470 --> 00:25:35,520
pretty easy to do the cool thing about

00:25:33,420 --> 00:25:37,170
it is that again I'm actually react

00:25:35,520 --> 00:25:39,570
really doesn't care in which context

00:25:37,170 --> 00:25:41,100
it's being used it means that you can

00:25:39,570 --> 00:25:45,300
actually use the exact same code to

00:25:41,100 --> 00:25:47,580
render things on the server as you would

00:25:45,300 --> 00:25:50,700
and as I shown earlier in the browser

00:25:47,580 --> 00:25:52,410
and that is called universal JavaScript

00:25:50,700 --> 00:25:54,390
Universal just stands for the fact that

00:25:52,410 --> 00:25:56,460
it's the actual same code that you use

00:25:54,390 --> 00:26:01,350
that is sometimes also referred as

00:25:56,460 --> 00:26:02,730
isomorphic JavaScript and it's actually

00:26:01,350 --> 00:26:04,890
easy to implement if you use the right

00:26:02,730 --> 00:26:07,860
tools I recommend using Python react

00:26:04,890 --> 00:26:09,690
it's a small nifty Python application

00:26:07,860 --> 00:26:12,600
that will allow you to do server-side

00:26:09,690 --> 00:26:14,300
rendering with any Python frameworks and

00:26:12,600 --> 00:26:17,600
it does come with

00:26:14,300 --> 00:26:21,350
jungle support you will also need to use

00:26:17,600 --> 00:26:24,440
a very simple node HTTP server to do

00:26:21,350 --> 00:26:29,390
this so let's see how all those species

00:26:24,440 --> 00:26:31,850
fit together so first in the client so

00:26:29,390 --> 00:26:33,530
that's our browser when the user would

00:26:31,850 --> 00:26:36,470
first type in the URL to access your

00:26:33,530 --> 00:26:40,580
website so there will be a get request

00:26:36,470 --> 00:26:44,900
on to the server Jango we then fetch the

00:26:40,580 --> 00:26:47,480
data serialize it as JSON and send that

00:26:44,900 --> 00:26:50,000
over the HTTP to that separate node

00:26:47,480 --> 00:26:52,550
server that's that note server all that

00:26:50,000 --> 00:26:54,770
it does is just to render HTML it will

00:26:52,550 --> 00:26:57,740
use the data that you provided and then

00:26:54,770 --> 00:27:00,140
use the react component so those

00:26:57,740 --> 00:27:02,780
JavaScript react component to render

00:27:00,140 --> 00:27:05,090
whatever component you want and then it

00:27:02,780 --> 00:27:06,800
will return some HTML Django will put

00:27:05,090 --> 00:27:10,910
that all that together and send it over

00:27:06,800 --> 00:27:12,410
to the client and past that point any

00:27:10,910 --> 00:27:13,300
subsequent refreshed and nietzsche

00:27:12,410 --> 00:27:15,950
happen

00:27:13,300 --> 00:27:17,810
will be done by react client-side

00:27:15,950 --> 00:27:20,090
exactly the same way as i showed earlier

00:27:17,810 --> 00:27:22,400
and the cool thing is that we will use

00:27:20,090 --> 00:27:25,280
exactly the same code is the same react

00:27:22,400 --> 00:27:30,200
components that i showed earlier so

00:27:25,280 --> 00:27:34,910
let's take a look at a quick demo so it

00:27:30,200 --> 00:27:38,440
is this function this URL here again

00:27:34,910 --> 00:27:41,480
exactly the same exactly the same thing

00:27:38,440 --> 00:27:44,330
works and behave the same it's the exact

00:27:41,480 --> 00:27:44,900
same code basically now let's see what

00:27:44,330 --> 00:27:51,260
happens

00:27:44,900 --> 00:27:52,940
server-side so here this is the view the

00:27:51,260 --> 00:27:55,250
Jago view that it's going to get cold

00:27:52,940 --> 00:27:58,660
here again i first serialize the data

00:27:55,250 --> 00:28:02,000
using the same serializers from my api

00:27:58,660 --> 00:28:03,590
we then call this small function that's

00:28:02,000 --> 00:28:06,890
a function that's provided by python

00:28:03,590 --> 00:28:09,770
react all that you need to pass to that

00:28:06,890 --> 00:28:11,360
function is the reference to the

00:28:09,770 --> 00:28:13,130
component that you want to render and

00:28:11,360 --> 00:28:15,350
then the data that you've just

00:28:13,130 --> 00:28:18,110
serialized so in the background that

00:28:15,350 --> 00:28:19,760
function is going to call that separate

00:28:18,110 --> 00:28:25,010
node server is going to send all that

00:28:19,760 --> 00:28:27,710
data to that server via HTTP that node

00:28:25,010 --> 00:28:31,160
server is also very simple it's

00:28:27,710 --> 00:28:34,850
basically just a dozen line of code it

00:28:31,160 --> 00:28:38,440
will receive the data passed from Django

00:28:34,850 --> 00:28:40,520
the HTTP that contains both

00:28:38,440 --> 00:28:43,370
specification of which component to

00:28:40,520 --> 00:28:45,260
render and then with which data and then

00:28:43,370 --> 00:28:49,220
call that react rendered function which

00:28:45,260 --> 00:28:51,320
is going to use a very same or same

00:28:49,220 --> 00:28:54,050
component that I was showing earlier and

00:28:51,320 --> 00:28:57,140
then you will it will resolve into some

00:28:54,050 --> 00:29:00,850
HTML which we are going to return back

00:28:57,140 --> 00:29:03,980
to jungle so this is where we are now

00:29:00,850 --> 00:29:05,510
now we have all of our rendered HTML and

00:29:03,980 --> 00:29:10,850
we are ready to pass it down to our

00:29:05,510 --> 00:29:13,940
Django template and here we basically

00:29:10,850 --> 00:29:18,140
just output that HTML into our template

00:29:13,940 --> 00:29:23,890
and you can see here that we have all of

00:29:18,140 --> 00:29:26,750
the HTML that has been pre rendered and

00:29:23,890 --> 00:29:29,300
pass that point the exact same rare

00:29:26,750 --> 00:29:35,900
component take it over from there and

00:29:29,300 --> 00:29:40,180
the the same the same happens it's

00:29:35,900 --> 00:29:40,180
exactly the same thing ok

00:29:42,930 --> 00:29:49,520
there's another couple topics I wanted

00:29:45,480 --> 00:29:51,630
to cover first about acid pipelines I

00:29:49,520 --> 00:29:56,670
personally recommend using something

00:29:51,630 --> 00:29:59,280
like webpack go and browser or gulp and

00:29:56,670 --> 00:30:01,770
browserify for bundling all your

00:29:59,280 --> 00:30:04,650
JavaScript code up until about a year

00:30:01,770 --> 00:30:06,900
ago I was using pretty heavily jungle

00:30:04,650 --> 00:30:09,360
pipelines and jungle compressor to do

00:30:06,900 --> 00:30:11,310
that sort of stuff but the tooling in

00:30:09,360 --> 00:30:13,770
the JavaScript world has improved a lot

00:30:11,310 --> 00:30:15,120
in the past year and now I think it's a

00:30:13,770 --> 00:30:17,070
bit more flexible to use those

00:30:15,120 --> 00:30:20,850
JavaScript tools to handle that stuff

00:30:17,070 --> 00:30:22,860
and also phonon developers are already

00:30:20,850 --> 00:30:24,540
used to using those tools and they feel

00:30:22,860 --> 00:30:28,050
much more comfortable using those as

00:30:24,540 --> 00:30:30,330
opposed to more opaque tools like django

00:30:28,050 --> 00:30:32,670
pipelines or django compressor i also

00:30:30,330 --> 00:30:36,710
recommend using babel for the JSX

00:30:32,670 --> 00:30:42,360
transpiling JSX is that template ish

00:30:36,710 --> 00:30:46,830
syntax that was showing in the code

00:30:42,360 --> 00:30:48,120
samples earlier that react uses babel we

00:30:46,830 --> 00:30:50,180
just transform that into actual

00:30:48,120 --> 00:30:53,280
JavaScript that your browser can execute

00:30:50,180 --> 00:30:56,070
and then finally when it comes the time

00:30:53,280 --> 00:30:59,280
comes to push code to production and I

00:30:56,070 --> 00:31:02,370
recommend using Django static files the

00:30:59,280 --> 00:31:04,860
app and also the manifest steady file

00:31:02,370 --> 00:31:07,020
storage which will apply a unique hash

00:31:04,860 --> 00:31:09,180
to each of your assets which will

00:31:07,020 --> 00:31:11,280
guarantee that all the caches in your

00:31:09,180 --> 00:31:14,580
browser in the city ends its etc will be

00:31:11,280 --> 00:31:17,790
busted and your users will be using the

00:31:14,580 --> 00:31:20,820
very latest version of your assets and

00:31:17,790 --> 00:31:24,600
finally also wanting to talk a bit about

00:31:20,820 --> 00:31:26,250
testing a good test read should contain

00:31:24,600 --> 00:31:28,800
some unit tests for that it could use

00:31:26,250 --> 00:31:32,880
some JavaScript frameworks like Jasmine

00:31:28,800 --> 00:31:34,770
mocha just queue unit also I recommend

00:31:32,880 --> 00:31:36,450
doing some functional testing for that

00:31:34,770 --> 00:31:39,240
you can use something like selenium and

00:31:36,450 --> 00:31:41,400
Django does come with some support for

00:31:39,240 --> 00:31:42,060
that in particular with the live server

00:31:41,400 --> 00:31:44,010
test case

00:31:42,060 --> 00:31:45,000
if you're interesting all that stuff you

00:31:44,010 --> 00:31:46,170
should stick around because there's

00:31:45,000 --> 00:31:48,260
going to be a talk right after this

00:31:46,170 --> 00:31:50,340
that's gonna cover some of those topics

00:31:48,260 --> 00:31:52,650
but I also wanted to cover one

00:31:50,340 --> 00:31:54,090
particular method which is sort of a

00:31:52,650 --> 00:31:56,740
hybrid between unit and integration

00:31:54,090 --> 00:31:59,170
testing and that is actually using the

00:31:56,740 --> 00:32:02,440
same tools as I was describing earlier

00:31:59,170 --> 00:32:04,210
about server-side rendering even if you

00:32:02,440 --> 00:32:06,010
don't really care about server-side

00:32:04,210 --> 00:32:08,860
rendering you could use the same tools

00:32:06,010 --> 00:32:18,580
to do some amount of testing I'm going

00:32:08,860 --> 00:32:21,790
to show you how that works so here we

00:32:18,580 --> 00:32:23,620
have a very simple test case method in

00:32:21,790 --> 00:32:26,890
the setup here I'll just create a bunch

00:32:23,620 --> 00:32:28,870
of a bunch of photos for the 1 2 & 3 and

00:32:26,890 --> 00:32:32,860
I'm going to create some favorites so

00:32:28,870 --> 00:32:36,370
just mocking photo 2 & 3 as favorites so

00:32:32,860 --> 00:32:39,400
then in the test method I first

00:32:36,370 --> 00:32:42,550
serialized the favorite data again using

00:32:39,400 --> 00:32:45,730
the same serialize for my sterilizer for

00:32:42,550 --> 00:32:48,429
my API we then called the same render

00:32:45,730 --> 00:32:50,410
component method from Python react so

00:32:48,429 --> 00:32:54,480
what is this going to do is going to

00:32:50,410 --> 00:32:57,580
render our favorite panel component by

00:32:54,480 --> 00:32:59,770
passing the favorite data over to the

00:32:57,580 --> 00:33:02,290
node server that's running in the

00:32:59,770 --> 00:33:04,600
background and then render that

00:33:02,290 --> 00:33:09,540
component again here we're talking about

00:33:04,600 --> 00:33:15,190
this one to the to the right and just

00:33:09,540 --> 00:33:16,870
and just that component in this case so

00:33:15,190 --> 00:33:19,960
then you you basically retrieve all of

00:33:16,870 --> 00:33:21,790
the HTML that's been rendered for that

00:33:19,960 --> 00:33:24,220
component and then you can basically

00:33:21,790 --> 00:33:27,190
test the content of that HTML you could

00:33:24,220 --> 00:33:29,770
test for example which of the photos are

00:33:27,190 --> 00:33:31,750
present inside that HTML so here I check

00:33:29,770 --> 00:33:33,730
that photo 1 since it's not a favorite I

00:33:31,750 --> 00:33:37,420
check that it's not in the HTML and I

00:33:33,730 --> 00:33:41,350
check that flu 2 and 3 actually are you

00:33:37,420 --> 00:33:43,230
may also use something like a tool

00:33:41,350 --> 00:33:46,240
called PI query it's a pretty nifty

00:33:43,230 --> 00:33:50,490
Python library which sort of mimics the

00:33:46,240 --> 00:33:54,190
the API from jQuery except in Python

00:33:50,490 --> 00:33:57,040
that allows you to select pieces of your

00:33:54,190 --> 00:34:00,280
HTML so in this case I'm selecting the

00:33:57,040 --> 00:34:03,160
deep that has the badge class so it's

00:34:00,280 --> 00:34:06,370
this thing here and I just checked that

00:34:03,160 --> 00:34:08,920
it's text is 2 since we only have two

00:34:06,370 --> 00:34:11,560
favorites in this case

00:34:08,920 --> 00:34:14,440
and you may also use a method that comes

00:34:11,560 --> 00:34:16,990
with the Django tilting framework assert

00:34:14,440 --> 00:34:20,130
HTML equal where you can compare two

00:34:16,990 --> 00:34:23,800
blocks of HTML so here I'm I'm

00:34:20,130 --> 00:34:25,960
inspecting the HTML from the h4 tag and

00:34:23,800 --> 00:34:28,930
that's this whole thing here so favorite

00:34:25,960 --> 00:34:33,010
and the badge and I'm checking that it

00:34:28,930 --> 00:34:34,690
actually is exactly that HTML now I

00:34:33,010 --> 00:34:37,600
don't recommend using this for huge

00:34:34,690 --> 00:34:39,130
amounts of HTML but if you strategic

00:34:37,600 --> 00:34:41,940
about it it can be pretty powerful

00:34:39,130 --> 00:34:45,130
because essentially we here we're using

00:34:41,940 --> 00:34:46,810
Python and Django to test JavaScript

00:34:45,130 --> 00:34:48,850
because the background this is actual

00:34:46,810 --> 00:34:55,210
JavaScript that's been used to render

00:34:48,850 --> 00:34:57,580
that HTML and that's about it for my

00:34:55,210 --> 00:34:59,890
talk so thanks again for coming I

00:34:57,580 --> 00:35:01,690
published all the code if you're

00:34:59,890 --> 00:35:03,820
interested in checking that out and I

00:35:01,690 --> 00:35:06,040
also publish my slide later and I'm

00:35:03,820 --> 00:35:09,150
happy to try and answer some of your

00:35:06,040 --> 00:35:09,150
questions thank you

00:35:14,820 --> 00:35:19,690
hi great tie

00:35:16,750 --> 00:35:21,580
thank you Thanks I'm curious if you've

00:35:19,690 --> 00:35:23,580
explored good ways to integrate this

00:35:21,580 --> 00:35:28,960
with Django forms at all

00:35:23,580 --> 00:35:32,790
Django forms yeah forms form sets or if

00:35:28,960 --> 00:35:37,300
if this is geared more towards you know

00:35:32,790 --> 00:35:40,840
application style or native style web

00:35:37,300 --> 00:35:44,340
page rendering right so I assume you're

00:35:40,840 --> 00:35:48,160
talking about validating the data I

00:35:44,340 --> 00:35:53,620
don't know I I have not I don't see why

00:35:48,160 --> 00:35:55,030
you wouldn't some but I guess so at the

00:35:53,620 --> 00:35:57,970
end of the day if you you if we're going

00:35:55,030 --> 00:36:00,730
to use react to render your forms you do

00:35:57,970 --> 00:36:03,460
want to use react components so you

00:36:00,730 --> 00:36:06,760
cannot use just the output that the

00:36:03,460 --> 00:36:08,500
Django forms will give you but there

00:36:06,760 --> 00:36:15,580
might be a way of turning that into

00:36:08,500 --> 00:36:17,910
instead of rendering raw HTML you could

00:36:15,580 --> 00:36:21,190
configure your forms to instead render

00:36:17,910 --> 00:36:24,670
react components you could take that

00:36:21,190 --> 00:36:30,960
route otherwise you you could just use

00:36:24,670 --> 00:36:35,470
the you could still use the forms

00:36:30,960 --> 00:36:39,400
validating process but just hand over

00:36:35,470 --> 00:36:42,310
all the rendering to react I guess the

00:36:39,400 --> 00:36:44,350
reason I bring it up is I've I like the

00:36:42,310 --> 00:36:46,780
convenience of Django forms right you

00:36:44,350 --> 00:36:51,070
can just set it all up and then render

00:36:46,780 --> 00:36:54,420
with as P or anything like that but then

00:36:51,070 --> 00:36:58,180
I've found it difficult to construct

00:36:54,420 --> 00:37:00,010
native style apps and so you know

00:36:58,180 --> 00:37:01,600
generally I would I would gravitate more

00:37:00,010 --> 00:37:03,400
towards this method if that's what I

00:37:01,600 --> 00:37:05,050
were trying to do so I was just curious

00:37:03,400 --> 00:37:07,420
about you know what your experience was

00:37:05,050 --> 00:37:09,490
with that yeah so again I have not used

00:37:07,420 --> 00:37:11,970
Django phones with this but I believe

00:37:09,490 --> 00:37:15,160
you would have to sort of reemployment

00:37:11,970 --> 00:37:17,560
the outputting of HTML from the Django

00:37:15,160 --> 00:37:18,820
forms so and actually that would be a

00:37:17,560 --> 00:37:20,170
cool project actually it would be

00:37:18,820 --> 00:37:21,460
awesome if somebody you want to take

00:37:20,170 --> 00:37:23,110
that on and that's something I'll

00:37:21,460 --> 00:37:23,800
definitely look into it's interesting

00:37:23,110 --> 00:37:26,100
thank you

00:37:23,800 --> 00:37:26,100
Thanks

00:37:26,800 --> 00:37:33,140
hey there so I've been using react

00:37:30,560 --> 00:37:35,180
lately kind of similarly to how your you

00:37:33,140 --> 00:37:36,980
presented it here it's been really

00:37:35,180 --> 00:37:37,910
useful it's been very fun but the one

00:37:36,980 --> 00:37:41,030
thing that still makes me very

00:37:37,910 --> 00:37:42,650
uncomfortable is JSX alright and it also

00:37:41,030 --> 00:37:44,210
makes the front-end developers I work

00:37:42,650 --> 00:37:45,440
with very uncomfortable because they're

00:37:44,210 --> 00:37:47,990
used to working in something like

00:37:45,440 --> 00:37:49,790
handlebars for example and so embedding

00:37:47,990 --> 00:37:52,850
I mean even having things like if you're

00:37:49,790 --> 00:37:55,250
specifying a class on a Dom component it

00:37:52,850 --> 00:37:57,410
use classname you know camel cased

00:37:55,250 --> 00:37:59,660
attribute instead yeah

00:37:57,410 --> 00:38:02,690
is there any compelling reason to use

00:37:59,660 --> 00:38:06,740
JSX over trying to use one of the

00:38:02,690 --> 00:38:08,720
alternatives really I think it comes

00:38:06,740 --> 00:38:11,030
down to personal preference I personally

00:38:08,720 --> 00:38:12,890
actually really like it and I know that

00:38:11,030 --> 00:38:17,330
the community is pretty divided about it

00:38:12,890 --> 00:38:19,780
some love it some hate it i I just I

00:38:17,330 --> 00:38:21,470
just advised you just go with whatever

00:38:19,780 --> 00:38:22,700
works best for you

00:38:21,470 --> 00:38:24,200
I there's something you might be

00:38:22,700 --> 00:38:28,490
interested in looking into is react

00:38:24,200 --> 00:38:30,890
template it's a library that it's

00:38:28,490 --> 00:38:34,100
basically an interface in between so it

00:38:30,890 --> 00:38:38,000
will you will be able to write templates

00:38:34,100 --> 00:38:40,940
I can look like angular templates but

00:38:38,000 --> 00:38:43,369
will output JavaScript so it's basically

00:38:40,940 --> 00:38:45,380
a replacement for JSX so in my book you

00:38:43,369 --> 00:38:48,109
might want to look into that it will

00:38:45,380 --> 00:38:51,770
definitely look a lot more familiar and

00:38:48,109 --> 00:38:56,600
you'll be able to use regular HTML ish

00:38:51,770 --> 00:38:58,130
or attributes and tags do you think

00:38:56,600 --> 00:39:00,590
there's any downside to doing that is

00:38:58,130 --> 00:39:03,020
really just personal preference no

00:39:00,590 --> 00:39:04,609
downside that I can think of at the end

00:39:03,020 --> 00:39:07,790
of day is just it's basically just

00:39:04,609 --> 00:39:09,170
JavaScript what I like about it is that

00:39:07,790 --> 00:39:12,619
it gives you a bit more power than you

00:39:09,170 --> 00:39:14,420
would have with templates typically

00:39:12,619 --> 00:39:16,580
because you have the all the power of

00:39:14,420 --> 00:39:19,850
JavaScript constructs and data

00:39:16,580 --> 00:39:21,560
structures and and you know processing

00:39:19,850 --> 00:39:24,260
that you can use your advantage to do

00:39:21,560 --> 00:39:26,869
cool things for looping through lists

00:39:24,260 --> 00:39:31,210
and you know doing some kind of

00:39:26,869 --> 00:39:33,530
computation so I like that but I do

00:39:31,210 --> 00:39:37,010
understand that it's a bit off-putting

00:39:33,530 --> 00:39:37,940
for you know if you really if you feel

00:39:37,010 --> 00:39:46,730
more comfortable with

00:39:37,940 --> 00:39:50,000
HTML like syntax okay so my question is

00:39:46,730 --> 00:39:51,050
whether Django you sort of you're

00:39:50,000 --> 00:39:53,089
showing here that looks like Django

00:39:51,050 --> 00:39:56,180
effectively is being reduced to Django

00:39:53,089 --> 00:39:59,180
rest framework purely serving the the

00:39:56,180 --> 00:40:00,829
API portions of what's going on and

00:39:59,180 --> 00:40:02,780
maybe some really really light

00:40:00,829 --> 00:40:05,150
templating to put up the initial page

00:40:02,780 --> 00:40:07,670
that then react is doing all the the

00:40:05,150 --> 00:40:09,920
actual hard work here is is this a

00:40:07,670 --> 00:40:12,170
question where Django's place in the

00:40:09,920 --> 00:40:14,180
world is just changing or is there room

00:40:12,170 --> 00:40:16,790
for Django to interact better with these

00:40:14,180 --> 00:40:18,410
parts or is there some intersection

00:40:16,790 --> 00:40:20,329
conglomerate that above the two that we

00:40:18,410 --> 00:40:21,470
can use preferably one that means I

00:40:20,329 --> 00:40:26,170
don't have to write JavaScript for a

00:40:21,470 --> 00:40:28,730
living no I don't think so at all so

00:40:26,170 --> 00:40:31,000
what I think is great we react is that

00:40:28,730 --> 00:40:33,470
it's great for doing really complex

00:40:31,000 --> 00:40:34,760
dynamic sites that you know when you

00:40:33,470 --> 00:40:38,030
have lots of things that's changed all

00:40:34,760 --> 00:40:40,339
over the place but that's not all web

00:40:38,030 --> 00:40:42,650
sites not all web sites I like I like

00:40:40,339 --> 00:40:45,560
that and so some web sites are a bit

00:40:42,650 --> 00:40:48,109
more static and Django is perfect for

00:40:45,560 --> 00:40:51,230
those you know the traditional Django

00:40:48,109 --> 00:40:54,170
not just the API side of Django but you

00:40:51,230 --> 00:40:57,650
can then still use react to to focus on

00:40:54,170 --> 00:41:01,010
the small bits of your site that may be

00:40:57,650 --> 00:41:04,849
a little bit more dynamic so I just see

00:41:01,010 --> 00:41:06,890
react as a complement to you as a

00:41:04,849 --> 00:41:09,680
general developer not totally not as a

00:41:06,890 --> 00:41:12,260
replacement for jungle at all it has to

00:41:09,680 --> 00:41:14,390
be used react really shines when you

00:41:12,260 --> 00:41:16,700
have things that change that are dynamic

00:41:14,390 --> 00:41:19,339
but that doesn't mean that all websites

00:41:16,700 --> 00:41:21,109
need that or if they do it sometimes

00:41:19,339 --> 00:41:25,869
just a small portion of that site and

00:41:21,109 --> 00:41:25,869
you can eat both cases you can use react

00:41:29,190 --> 00:41:32,269

YouTube URL: https://www.youtube.com/watch?v=ixnoL8N_dd4


