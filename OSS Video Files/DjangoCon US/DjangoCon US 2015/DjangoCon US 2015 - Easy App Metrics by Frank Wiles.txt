Title: DjangoCon US 2015 - Easy App Metrics by Frank Wiles
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	Easy App Metrics by Frank Wiles

What to collect
How super easy it can be
Techniques for collecting today, but using tomorrow
Processing your metrics out of band to not slow down your code
Tips for scaling in large systems
Visualizing your metrics with Graphana

Help us caption & translate this video!

http://amara.org/v/HH6c/
Captions: 
	00:00:15,619 --> 00:00:19,830
thanks everybody they said to make you

00:00:18,000 --> 00:00:24,330
into a fun right so I thought I'd do

00:00:19,830 --> 00:00:26,279
that so as many of you know Django came

00:00:24,330 --> 00:00:29,310
from a journalism background and we've

00:00:26,279 --> 00:00:31,470
had some talks today that relate Django

00:00:29,310 --> 00:00:32,969
and like literary terms and so I'm going

00:00:31,470 --> 00:00:34,620
to take it back to the journalism roots

00:00:32,969 --> 00:00:38,969
and do a little bit of the who what

00:00:34,620 --> 00:00:40,829
where when how of at metrics but I'm

00:00:38,969 --> 00:00:43,440
going to screw up the order a little bit

00:00:40,829 --> 00:00:45,420
so first who me i'm the founder of

00:00:43,440 --> 00:00:48,059
evolution systems and have been working

00:00:45,420 --> 00:00:49,559
with durango for a really long time for

00:00:48,059 --> 00:00:51,480
this torrent the most important part of

00:00:49,559 --> 00:00:53,910
my open source world is a project called

00:00:51,480 --> 00:00:55,590
Jango at metrics that helps make some

00:00:53,910 --> 00:00:57,570
doing some of this a little easier and

00:00:55,590 --> 00:00:59,370
we'll get to that towards the end but

00:00:57,570 --> 00:01:01,020
then we're going to talk about most

00:00:59,370 --> 00:01:03,899
importantly the why when I first

00:01:01,020 --> 00:01:05,630
proposed this talk i thought you know i

00:01:03,899 --> 00:01:08,369
want the shorter time frame because

00:01:05,630 --> 00:01:10,530
covering how to do metrics I can't fill

00:01:08,369 --> 00:01:12,360
45 minutes with right it would just get

00:01:10,530 --> 00:01:13,530
really boring and repetitive but then

00:01:12,360 --> 00:01:14,880
when I went to actually do it the

00:01:13,530 --> 00:01:16,920
landscape is moved and things have

00:01:14,880 --> 00:01:18,930
gotten a little easier and so I can't

00:01:16,920 --> 00:01:22,130
even feel 25 minutes with it on how to

00:01:18,930 --> 00:01:24,570
do metrics that you know the code part

00:01:22,130 --> 00:01:26,670
that part has become really really easy

00:01:24,570 --> 00:01:28,560
the hard part is what should I be

00:01:26,670 --> 00:01:31,710
tracking and why should I be tracking it

00:01:28,560 --> 00:01:33,829
so let's cover some of those things i

00:01:31,710 --> 00:01:36,509
come from kansas i had mentioned

00:01:33,829 --> 00:01:38,939
Django's from Lawrence Kansas my state

00:01:36,509 --> 00:01:43,439
has some trouble with believing facts

00:01:38,939 --> 00:01:46,079
and so but I and I know about you guys I

00:01:43,439 --> 00:01:48,229
am driven by facts if you can show me

00:01:46,079 --> 00:01:50,520
some numbers and I believe that you

00:01:48,229 --> 00:01:52,590
somewhat accurately collected those

00:01:50,520 --> 00:01:55,649
numbers I'm much more likely to take

00:01:52,590 --> 00:01:57,149
action than you know what I feel like

00:01:55,649 --> 00:01:59,850
that button should be a little bigger or

00:01:57,149 --> 00:02:02,490
I feel like we should make this feature

00:01:59,850 --> 00:02:04,439
more prominent so this helps give you

00:02:02,490 --> 00:02:06,689
ammunition with your co-workers and your

00:02:04,439 --> 00:02:08,489
bosses for things that you want to get

00:02:06,689 --> 00:02:12,239
done or what you don't want to have to

00:02:08,489 --> 00:02:13,740
do so obviously we collect a lot of

00:02:12,239 --> 00:02:16,080
metrics and have pretty

00:02:13,740 --> 00:02:20,280
graphs for the the kinds of things you

00:02:16,080 --> 00:02:22,530
expect ops you know what's the load how

00:02:20,280 --> 00:02:25,710
much disk space those kinds of things so

00:02:22,530 --> 00:02:27,480
we need we need it for that but we can

00:02:25,710 --> 00:02:30,600
also use metrics to decide on

00:02:27,480 --> 00:02:33,330
development prioritization if you have

00:02:30,600 --> 00:02:38,190
and also to be able to tell customers

00:02:33,330 --> 00:02:39,630
know you'll get requests from your co

00:02:38,190 --> 00:02:41,490
workers or customers saying you know

00:02:39,630 --> 00:02:44,760
it'd be really great if you could make

00:02:41,490 --> 00:02:47,460
it do this I know you do you handle CSV

00:02:44,760 --> 00:02:50,010
but really we really want an actual

00:02:47,460 --> 00:02:51,420
Excel download and you're not too keen

00:02:50,010 --> 00:02:53,490
on it well you can go look and you know

00:02:51,420 --> 00:02:55,860
what you're the only customer that uses

00:02:53,490 --> 00:02:57,630
that feature at all right maybe we

00:02:55,860 --> 00:02:59,040
shouldn't prioritize that because it's

00:02:57,630 --> 00:03:05,280
just not something that's being heavily

00:02:59,040 --> 00:03:09,000
used we can also use metrics to make

00:03:05,280 --> 00:03:10,890
design decisions all designers are going

00:03:09,000 --> 00:03:13,500
to hate me for this slide I did like

00:03:10,890 --> 00:03:15,150
everything wrong right like which is

00:03:13,500 --> 00:03:16,830
funny because this is the slide that

00:03:15,150 --> 00:03:19,440
took me the longest actually design

00:03:16,830 --> 00:03:21,210
right so I guess that's good for

00:03:19,440 --> 00:03:22,920
designers it's gotten so easy to do it

00:03:21,210 --> 00:03:25,560
right that you have to work hard to do

00:03:22,920 --> 00:03:27,480
it wrong I'm pretty sure my chrome

00:03:25,560 --> 00:03:32,760
doesn't even allow you to use Comic Sans

00:03:27,480 --> 00:03:35,910
anymore so but you there's a lot of

00:03:32,760 --> 00:03:38,340
things in on our sites on web apps where

00:03:35,910 --> 00:03:40,230
we do them kind of out of history we

00:03:38,340 --> 00:03:41,580
keep we put the controls at the top let

00:03:40,230 --> 00:03:43,920
me put the controls again at the bottom

00:03:41,580 --> 00:03:46,050
well if you track where they're actually

00:03:43,920 --> 00:03:47,760
used it may be that the nature of your

00:03:46,050 --> 00:03:49,260
app is the user always scrolls to the

00:03:47,760 --> 00:03:51,270
bottom of the page because that's where

00:03:49,260 --> 00:03:54,060
the newest data is and so they're only

00:03:51,270 --> 00:03:56,220
using the controls at the bottom and so

00:03:54,060 --> 00:03:57,840
get rid of them at the top you can get

00:03:56,220 --> 00:03:59,850
some screen real estate back maybe other

00:03:57,840 --> 00:04:02,070
control should go up there and if you

00:03:59,850 --> 00:04:05,370
track the difference not just I used

00:04:02,070 --> 00:04:07,740
feature X but I used feature X from this

00:04:05,370 --> 00:04:10,910
spot on the page that can become an

00:04:07,740 --> 00:04:10,910
important in four piece of information

00:04:13,610 --> 00:04:21,900
we can use stats against our data with

00:04:18,799 --> 00:04:24,120
with internal things internal politics

00:04:21,900 --> 00:04:26,669
who should get more funding who should

00:04:24,120 --> 00:04:27,510
get a new staff member should we bother

00:04:26,669 --> 00:04:30,990
to have those

00:04:27,510 --> 00:04:33,000
meetings what we talked about in our

00:04:30,990 --> 00:04:36,300
world about you know getting rid of the

00:04:33,000 --> 00:04:38,580
walls between dev and ops but we can use

00:04:36,300 --> 00:04:41,580
stats to get rid of some walls between

00:04:38,580 --> 00:04:44,280
dev and ops and sales and marketing

00:04:41,580 --> 00:04:45,630
because if I can give the sales guys

00:04:44,280 --> 00:04:47,760
some numbers that they didn't know about

00:04:45,630 --> 00:04:49,260
or the marketing guys some insight into

00:04:47,760 --> 00:04:51,090
what they're wanting now they're my

00:04:49,260 --> 00:04:52,770
friend and they're going to be a little

00:04:51,090 --> 00:04:54,480
more understanding when I tell them hey

00:04:52,770 --> 00:04:56,460
this is going to take six weeks to build

00:04:54,480 --> 00:04:58,770
are you sure we really want to do this I

00:04:56,460 --> 00:05:01,080
can't do that right now or whatever else

00:04:58,770 --> 00:05:04,490
so this can be a way to kind of break

00:05:01,080 --> 00:05:04,490
down some walls inside your organization

00:05:06,770 --> 00:05:12,180
so we're going to grab lots of crazy

00:05:10,080 --> 00:05:14,840
metrics but we have to remember that you

00:05:12,180 --> 00:05:17,640
know correlation is not causation

00:05:14,840 --> 00:05:20,940
necessarily so if you see a big spike in

00:05:17,640 --> 00:05:23,400
your graph that doesn't necessarily mean

00:05:20,940 --> 00:05:25,680
that the other thing that happened at

00:05:23,400 --> 00:05:29,490
that same time point is what caused it

00:05:25,680 --> 00:05:35,970
right so it's usually just a signal of I

00:05:29,490 --> 00:05:37,050
need to dig deeper into this problem so

00:05:35,970 --> 00:05:39,570
what kinds of things should we be

00:05:37,050 --> 00:05:42,270
tracking specifically so most of you can

00:05:39,570 --> 00:05:44,040
probably come up with the oh before I

00:05:42,270 --> 00:05:47,130
cover that I need to cover costs I

00:05:44,040 --> 00:05:48,840
talked about costs on metrics there's a

00:05:47,130 --> 00:05:51,120
couple of things to consider there's the

00:05:48,840 --> 00:05:52,410
actual storage costs right I'm going to

00:05:51,120 --> 00:05:54,060
collect all this data how much is it

00:05:52,410 --> 00:05:56,370
going to cost me to store there's the

00:05:54,060 --> 00:05:58,050
time it takes me to implement it and

00:05:56,370 --> 00:06:00,360
then there's also the what this does to

00:05:58,050 --> 00:06:02,850
the runtime right I don't want to slow

00:06:00,360 --> 00:06:05,850
my app down considerably by tracking 9

00:06:02,850 --> 00:06:08,220
million things on every page on every

00:06:05,850 --> 00:06:10,410
action so I need to balance them but

00:06:08,220 --> 00:06:13,440
keep in mind that metrics are pretty

00:06:10,410 --> 00:06:16,440
darn cheap and if you set your retention

00:06:13,440 --> 00:06:18,300
policies right with graphite or with

00:06:16,440 --> 00:06:22,500
hosted services will get into some of

00:06:18,300 --> 00:06:27,420
that you can store a metric for like 20

00:06:22,500 --> 00:06:30,390
megs of space for a 10 year period so

00:06:27,420 --> 00:06:33,030
don't be too afraid of collecting too

00:06:30,390 --> 00:06:34,920
much data but do keep in mind that

00:06:33,030 --> 00:06:38,670
they're you know they're not absolutely

00:06:34,920 --> 00:06:40,980
free so we know to track the default

00:06:38,670 --> 00:06:43,470
things right load disk space

00:06:40,980 --> 00:06:45,360
usage how many whiskey processes we have

00:06:43,470 --> 00:06:47,100
going how many worker processes are

00:06:45,360 --> 00:06:48,780
running most everybody knows to track

00:06:47,100 --> 00:06:51,260
that stuff and it's a good place to

00:06:48,780 --> 00:06:53,250
start right it's better than nothing but

00:06:51,260 --> 00:06:55,560
there's other things that you might not

00:06:53,250 --> 00:06:58,110
think about that are good to be able to

00:06:55,560 --> 00:07:01,850
overlay and look at along with feature

00:06:58,110 --> 00:07:07,020
rollouts and bugs that can help you

00:07:01,850 --> 00:07:08,700
solve real problems so table sizes right

00:07:07,020 --> 00:07:10,500
not just how much disk space does the

00:07:08,700 --> 00:07:12,000
database use what happened i did this

00:07:10,500 --> 00:07:14,490
deploy and all of a sudden this tables

00:07:12,000 --> 00:07:16,890
blown up in size was that does that make

00:07:14,490 --> 00:07:18,270
sense or is that maybe something really

00:07:16,890 --> 00:07:20,430
bizarre and a bug that we just haven't

00:07:18,270 --> 00:07:21,780
detected yet and how long people how

00:07:20,430 --> 00:07:24,870
many deploys are we doing how long do

00:07:21,780 --> 00:07:28,920
they take you know when did we have

00:07:24,870 --> 00:07:31,020
outages how many times does somebody ssh

00:07:28,920 --> 00:07:32,460
into the server that can be a really

00:07:31,020 --> 00:07:34,890
good metric of we're not doing enough

00:07:32,460 --> 00:07:36,210
ops automation all right and it's

00:07:34,890 --> 00:07:39,510
something that you can easily script up

00:07:36,210 --> 00:07:40,830
and keep track of but more importantly

00:07:39,510 --> 00:07:42,000
than just keeping track of some raw

00:07:40,830 --> 00:07:44,220
numbers we need to make sure that we

00:07:42,000 --> 00:07:46,230
segregate some of this data so like I

00:07:44,220 --> 00:07:47,880
use this bottom example here of support

00:07:46,230 --> 00:07:49,980
tickets we don't want just tickets

00:07:47,880 --> 00:07:51,570
created and resolved but we want you

00:07:49,980 --> 00:07:53,750
know is this created by somebody

00:07:51,570 --> 00:07:55,980
internal versus external what department

00:07:53,750 --> 00:07:57,420
you know we want to have a little bit

00:07:55,980 --> 00:07:59,520
more dimension to some of these these

00:07:57,420 --> 00:08:00,840
data points so that we can see are these

00:07:59,520 --> 00:08:02,880
support tickets all generated by

00:08:00,840 --> 00:08:04,530
customers or they all generated by that

00:08:02,880 --> 00:08:06,830
one guy in that one department who's

00:08:04,530 --> 00:08:12,930
really just kind of you know a pain

00:08:06,830 --> 00:08:14,820
right so we have basic app metrics and

00:08:12,930 --> 00:08:16,620
this is kind of like what marketing and

00:08:14,820 --> 00:08:19,290
sales wants to see in growth hackers

00:08:16,620 --> 00:08:22,230
right you want to see like sign ups and

00:08:19,290 --> 00:08:23,880
free paid and upgrades downgrades we all

00:08:22,230 --> 00:08:25,320
know that kind of stuff you know how

00:08:23,880 --> 00:08:27,510
many people like you want to Instagram

00:08:25,320 --> 00:08:30,240
or whatever but you know there's some

00:08:27,510 --> 00:08:32,400
other things like what emails are we

00:08:30,240 --> 00:08:34,500
sending to customers by type I mean we

00:08:32,400 --> 00:08:36,660
know how many we sent probably if you

00:08:34,500 --> 00:08:39,300
use mail gun or a service like they give

00:08:36,660 --> 00:08:42,270
you an invoice is that you said 4812

00:08:39,300 --> 00:08:44,160
last year or last week but by what type

00:08:42,270 --> 00:08:46,590
is though are those all password resets

00:08:44,160 --> 00:08:48,300
we don't know you know how many times

00:08:46,590 --> 00:08:50,550
are people logging in long gate does

00:08:48,300 --> 00:08:52,260
anyone ever log out you know that can be

00:08:50,550 --> 00:08:54,120
a design decision if we don't spend any

00:08:52,260 --> 00:08:54,840
time on what our log out page looks like

00:08:54,120 --> 00:08:58,290
because

00:08:54,840 --> 00:08:59,550
one person does it every five days so

00:08:58,290 --> 00:09:01,110
you know most people the cookie just

00:08:59,550 --> 00:09:08,400
times out you don't actually physically

00:09:01,110 --> 00:09:10,560
log out so having that data helps us to

00:09:08,400 --> 00:09:12,240
see how things are being used in the app

00:09:10,560 --> 00:09:15,030
and where we should be focusing our time

00:09:12,240 --> 00:09:17,370
right and bug fixes and new features in

00:09:15,030 --> 00:09:19,340
performance you know a lot of people

00:09:17,370 --> 00:09:21,930
track how many items are in the queue

00:09:19,340 --> 00:09:24,870
but they don't necessarily track how

00:09:21,930 --> 00:09:28,380
long individual types of jobs take in

00:09:24,870 --> 00:09:30,660
that particular Q so you know how long

00:09:28,380 --> 00:09:32,880
does it take from i click password reset

00:09:30,660 --> 00:09:37,200
to I've told mail gun to send the email

00:09:32,880 --> 00:09:40,530
if that's a second cool if that's 15

00:09:37,200 --> 00:09:42,210
minutes not cool right because I'm a

00:09:40,530 --> 00:09:44,010
user and I think something's wrong and

00:09:42,210 --> 00:09:45,690
now i'm hitting at five or six times and

00:09:44,010 --> 00:09:47,760
i'm plugging up your queue because I

00:09:45,690 --> 00:09:49,860
kind of expect to get an email within a

00:09:47,760 --> 00:09:50,850
minute or so you know I don't

00:09:49,860 --> 00:09:52,530
necessarily expect it to be

00:09:50,850 --> 00:09:56,310
instantaneous but I expect it to be a

00:09:52,530 --> 00:09:58,680
minute what's our cache hit rates you

00:09:56,310 --> 00:10:02,310
know we're using caching but you know

00:09:58,680 --> 00:10:06,810
are we using it in effectively and I'm

00:10:02,310 --> 00:10:09,780
like API usage is this all on off is

00:10:06,810 --> 00:10:12,810
this all you know off are just our

00:10:09,780 --> 00:10:14,040
normal customer are our customers what

00:10:12,810 --> 00:10:16,200
endpoints are being hit the most

00:10:14,040 --> 00:10:18,810
sometimes you'll find that a feature is

00:10:16,200 --> 00:10:21,120
used very heavily from an API and not

00:10:18,810 --> 00:10:23,610
use it all from your desktop app or use

00:10:21,120 --> 00:10:26,430
the lot desktop and API but never on

00:10:23,610 --> 00:10:30,380
mobile and so you can de-emphasize that

00:10:26,430 --> 00:10:33,720
in design and in terms of bug fixes and

00:10:30,380 --> 00:10:36,060
we should track random internal stuff

00:10:33,720 --> 00:10:38,070
when did we have meetings how many staff

00:10:36,060 --> 00:10:40,560
members did we have then is we might go

00:10:38,070 --> 00:10:43,140
to correlate bug fix to how many people

00:10:40,560 --> 00:10:46,560
were working right how many people on

00:10:43,140 --> 00:10:48,620
vacation that week we might see that

00:10:46,560 --> 00:10:53,040
when one particular staff member leaves

00:10:48,620 --> 00:10:54,210
that bugs go up or go down maybe that

00:10:53,040 --> 00:10:55,980
person was more important than we think

00:10:54,210 --> 00:11:00,270
or that job was more important than we

00:10:55,980 --> 00:11:02,360
think how many times your coworkers are

00:11:00,270 --> 00:11:05,370
having to work more than 40 hours and

00:11:02,360 --> 00:11:06,930
you know are we generating problems

00:11:05,370 --> 00:11:08,240
because of burnout we can track these

00:11:06,930 --> 00:11:11,330
things and

00:11:08,240 --> 00:11:14,420
but we can't correlate them without some

00:11:11,330 --> 00:11:16,370
sort of visualization and you know we

00:11:14,420 --> 00:11:19,790
should track chat messages and emojis

00:11:16,370 --> 00:11:21,830
used and you know but we we can have

00:11:19,790 --> 00:11:23,959
some fun with it right I have this

00:11:21,830 --> 00:11:25,880
coffee example here did you do it in the

00:11:23,959 --> 00:11:29,990
office or did you go to Starbucks and

00:11:25,880 --> 00:11:31,550
was a grande or venti or whatever to not

00:11:29,990 --> 00:11:33,830
so much that I want you to track your

00:11:31,550 --> 00:11:35,779
coffee consumption at that level but to

00:11:33,830 --> 00:11:37,910
think about that on in terms of metrics

00:11:35,779 --> 00:11:40,130
right it's not just how many celery

00:11:37,910 --> 00:11:43,220
tasks did we do it's which of them and

00:11:40,130 --> 00:11:45,380
why and you know what kind of spectrum

00:11:43,220 --> 00:11:47,870
were we doing this was this how many

00:11:45,380 --> 00:11:54,680
free users use that feature versus paid

00:11:47,870 --> 00:11:56,180
users so in the when what you should be

00:11:54,680 --> 00:11:59,300
doing it now you should have done it

00:11:56,180 --> 00:12:01,339
yesterday but we can talk a little bit

00:11:59,300 --> 00:12:03,890
about time travel here in a little bit

00:12:01,339 --> 00:12:05,360
on how to do this but you need it before

00:12:03,890 --> 00:12:07,640
you need to have some metrics in place

00:12:05,360 --> 00:12:09,230
before you really need them right so

00:12:07,640 --> 00:12:11,589
start collecting them early even if you

00:12:09,230 --> 00:12:15,790
don't have a good plan to visualize them

00:12:11,589 --> 00:12:19,730
so how do we go about doing this right

00:12:15,790 --> 00:12:21,350
there's the easy stuff you know Google

00:12:19,730 --> 00:12:24,260
Analytics everybody's got that on their

00:12:21,350 --> 00:12:26,570
site right and then there's you know

00:12:24,260 --> 00:12:28,160
some stuff that helps with ops you can

00:12:26,570 --> 00:12:31,010
use upbeat who's one of the sponsors

00:12:28,160 --> 00:12:32,510
here you use new relic data dog those

00:12:31,010 --> 00:12:34,880
are pretty easy to set up and they give

00:12:32,510 --> 00:12:37,040
you a lot of insight into your app I

00:12:34,880 --> 00:12:39,110
kind of hate some of these services

00:12:37,040 --> 00:12:40,970
because before they existed everybody

00:12:39,110 --> 00:12:42,680
had to come to rub sis for performance

00:12:40,970 --> 00:12:44,360
help and now they have these services

00:12:42,680 --> 00:12:47,120
and they can see oh it's this one query

00:12:44,360 --> 00:12:49,430
that's making my site slow and and so

00:12:47,120 --> 00:12:52,610
but then there's other services like

00:12:49,430 --> 00:12:54,230
librado and mixpanel and Kenai oh that

00:12:52,610 --> 00:12:57,410
let you kind of create your own metrics

00:12:54,230 --> 00:12:59,450
and create ways to graph them and it's

00:12:57,410 --> 00:13:01,209
the kinds of things that you would do if

00:12:59,450 --> 00:13:04,160
you were hosting your own metrics

00:13:01,209 --> 00:13:06,140
without having to do any of the ops work

00:13:04,160 --> 00:13:08,029
or set up yourself those do they have

00:13:06,140 --> 00:13:09,740
different pricing and and some different

00:13:08,029 --> 00:13:11,899
features so check those out but if you

00:13:09,740 --> 00:13:14,029
really kind of want to get to the the

00:13:11,899 --> 00:13:18,110
top level right you got it you've got to

00:13:14,029 --> 00:13:21,320
do it yourself so how do you do it

00:13:18,110 --> 00:13:24,350
yourself the best way to visualize is

00:13:21,320 --> 00:13:25,760
vaanam there are other dashboard systems

00:13:24,350 --> 00:13:27,380
out there but if you don't have one

00:13:25,760 --> 00:13:30,170
picked out that you really love you

00:13:27,380 --> 00:13:32,240
should look at grifone oh it is

00:13:30,170 --> 00:13:34,790
beautiful you can show it to bosses and

00:13:32,240 --> 00:13:36,730
clients and everybody likes looking at

00:13:34,790 --> 00:13:39,350
it nobody's going to say this looks like

00:13:36,730 --> 00:13:43,520
matplotlib or something that you know we

00:13:39,350 --> 00:13:45,440
did for fun but you know so pretty is

00:13:43,520 --> 00:13:47,030
important if people don't like looking

00:13:45,440 --> 00:13:48,920
at it they're not going to look at it on

00:13:47,030 --> 00:13:50,770
a regular basis and reformers actually

00:13:48,920 --> 00:13:54,140
besides being beautiful it's easy to use

00:13:50,770 --> 00:13:56,510
it can target graphite and in flux DB

00:13:54,140 --> 00:13:58,820
for its its sources and more importantly

00:13:56,510 --> 00:14:02,090
you can target multiple of them so you

00:13:58,820 --> 00:14:04,010
can kind of chard your metrics as you

00:14:02,090 --> 00:14:05,810
need to to grow so you can have some

00:14:04,010 --> 00:14:07,730
metrics pulling from cluster one and

00:14:05,810 --> 00:14:13,280
some from cluster to all on the same

00:14:07,730 --> 00:14:14,660
dashboard so you need to the one of the

00:14:13,280 --> 00:14:17,030
mistakes I see people make is they have

00:14:14,660 --> 00:14:18,530
one big dashboard with 9,000 things on

00:14:17,030 --> 00:14:20,450
it and nobody's going to look at that

00:14:18,530 --> 00:14:22,820
and nobody going to find it useful so

00:14:20,450 --> 00:14:24,110
create special purpose dashboards for

00:14:22,820 --> 00:14:25,640
the kinds of things that you're looking

00:14:24,110 --> 00:14:27,920
at what things do we care about in this

00:14:25,640 --> 00:14:31,280
release what things the sales care about

00:14:27,920 --> 00:14:33,440
what things do marketing care about but

00:14:31,280 --> 00:14:34,730
once you've got them set up you're going

00:14:33,440 --> 00:14:36,170
to look at them a lot maybe stick them

00:14:34,730 --> 00:14:37,400
on a big screen and the lobby and have

00:14:36,170 --> 00:14:39,170
them rotate and you're going to kind of

00:14:37,400 --> 00:14:42,650
stop looking at them but you need to be

00:14:39,170 --> 00:14:44,360
able to dig in and look for new and

00:14:42,650 --> 00:14:46,280
interesting facts so spend some time

00:14:44,360 --> 00:14:48,500
every now and again just overlaying

00:14:46,280 --> 00:14:51,710
different metrics to see see what falls

00:14:48,500 --> 00:14:53,930
out I think the main reason people don't

00:14:51,710 --> 00:14:55,520
do metrics is because graphite is a pain

00:14:53,930 --> 00:14:57,440
in the butt to install who here has

00:14:55,520 --> 00:15:00,950
wasted a day trying to get a graphite

00:14:57,440 --> 00:15:02,180
set up okay this is so most maybe I'm

00:15:00,950 --> 00:15:04,280
wrong maybe people don't use it because

00:15:02,180 --> 00:15:06,140
it's hard so there's an easier way and

00:15:04,280 --> 00:15:07,550
that's graphite API it gets rid of all

00:15:06,140 --> 00:15:08,870
the hard parts of the setup and gives

00:15:07,550 --> 00:15:12,400
you just the parts you need to work with

00:15:08,870 --> 00:15:14,900
Griffin oh so check out graphite API and

00:15:12,400 --> 00:15:16,910
then in flux DB is the new kid on the

00:15:14,900 --> 00:15:19,580
block it's written and go and it's the

00:15:16,910 --> 00:15:21,590
hot new thing its main difference is you

00:15:19,580 --> 00:15:24,110
can have individual metric points and

00:15:21,590 --> 00:15:26,060
then attach arbitrary tags to them so

00:15:24,110 --> 00:15:30,310
you instead of having in graphite you

00:15:26,060 --> 00:15:33,250
would have cpu load for us east you know

00:15:30,310 --> 00:15:35,080
box 5

00:15:33,250 --> 00:15:38,350
with influx TB you can just have cpu

00:15:35,080 --> 00:15:41,770
load and have your availability zone and

00:15:38,350 --> 00:15:43,810
and instance type be just tags against

00:15:41,770 --> 00:15:46,720
that and so you can do more aggregations

00:15:43,810 --> 00:15:49,630
and query a more easily so how do you

00:15:46,720 --> 00:15:52,090
transport these metrics around you use

00:15:49,630 --> 00:15:53,920
stats deep stats these are really easy

00:15:52,090 --> 00:15:55,810
service to run the biggest mistake

00:15:53,920 --> 00:15:57,790
people make is they have a stats t

00:15:55,810 --> 00:15:59,560
system and then they have like 20 web

00:15:57,790 --> 00:16:01,630
servers all talking to it and and that

00:15:59,560 --> 00:16:03,700
actually gets slow and it can slow your

00:16:01,630 --> 00:16:05,620
app down so run one on every spot you're

00:16:03,700 --> 00:16:07,510
going to collect metrics and use it to

00:16:05,620 --> 00:16:11,200
shovel them to wherever they end up

00:16:07,510 --> 00:16:13,600
getting stored another thing that people

00:16:11,200 --> 00:16:15,190
don't tend to notice is that if you're

00:16:13,600 --> 00:16:16,810
using log stash you guys are taking logs

00:16:15,190 --> 00:16:18,790
right and you're doing stuff with logs

00:16:16,810 --> 00:16:20,980
and shoving them off into a service you

00:16:18,790 --> 00:16:23,230
can use long stash to generate metrics

00:16:20,980 --> 00:16:25,090
off of logs based on regular expressions

00:16:23,230 --> 00:16:27,520
so you don't necessarily retool your app

00:16:25,090 --> 00:16:32,050
to put this stuff in you can generate

00:16:27,520 --> 00:16:33,820
law metrics off of logs and then if you

00:16:32,050 --> 00:16:35,710
want to do front-end metrics then all

00:16:33,820 --> 00:16:38,740
you need is a little API that you can

00:16:35,710 --> 00:16:40,480
just suck these in from your JavaScript

00:16:38,740 --> 00:16:43,450
and shove them into the rest of your

00:16:40,480 --> 00:16:45,640
your back-end so how do you do time

00:16:43,450 --> 00:16:49,030
travel most of these systems you can

00:16:45,640 --> 00:16:52,030
punch you can push into with a specific

00:16:49,030 --> 00:16:53,680
time point so when did this happen so

00:16:52,030 --> 00:16:55,420
you can go back and replay all those

00:16:53,680 --> 00:16:56,800
logs you've been storing an s3 to come

00:16:55,420 --> 00:17:03,400
up with what the data that you're

00:16:56,800 --> 00:17:06,640
looking for to show trends over time so

00:17:03,400 --> 00:17:10,089
how do we do this with Python the stats

00:17:06,640 --> 00:17:11,650
the app is very simple you get a stats d

00:17:10,089 --> 00:17:13,030
client and then you have a counter that

00:17:11,650 --> 00:17:14,770
you can increment you can increment and

00:17:13,030 --> 00:17:17,410
decrement you can increment by more than

00:17:14,770 --> 00:17:19,990
one these are just simple examples you

00:17:17,410 --> 00:17:22,089
can have gauges so right now my stress

00:17:19,990 --> 00:17:23,470
levels at twenty-five percent out of 100

00:17:22,089 --> 00:17:25,900
I'm just picking arbitrary numbers here

00:17:23,470 --> 00:17:27,550
and then you can do timing how long did

00:17:25,900 --> 00:17:29,590
I sleep last night well I got about

00:17:27,550 --> 00:17:31,330
eight hours you just need to store it in

00:17:29,590 --> 00:17:33,730
milliseconds so you can have timings of

00:17:31,330 --> 00:17:39,040
how long did this particular thing take

00:17:33,730 --> 00:17:42,850
and then in flux DB this just is very

00:17:39,040 --> 00:17:44,950
similar but they take a specific format

00:17:42,850 --> 00:17:46,510
that's the measurement name whatever

00:17:44,950 --> 00:17:49,090
arbitrary tags you want to

00:17:46,510 --> 00:17:51,820
match to that and then the time value

00:17:49,090 --> 00:17:56,530
and then what the value of the field was

00:17:51,820 --> 00:17:57,910
so giving Django a 10 out of 10 and I'm

00:17:56,530 --> 00:18:03,880
attaching that it was in Austin and it

00:17:57,910 --> 00:18:07,990
barbecue is the predominant food so to

00:18:03,880 --> 00:18:11,380
the Django bit Django AB metrics is a

00:18:07,990 --> 00:18:14,020
little utility that is kind of like a

00:18:11,380 --> 00:18:16,300
haystack in that it abstract sout where

00:18:14,020 --> 00:18:18,370
you're storing this so you can use

00:18:16,300 --> 00:18:20,860
Django add metrics and target Mixpanel

00:18:18,370 --> 00:18:23,110
librado stats d store them in your

00:18:20,860 --> 00:18:24,520
database storm in Redis you know so if

00:18:23,110 --> 00:18:26,170
you have a personal home page you want

00:18:24,520 --> 00:18:28,270
to collect some metrics on you don't

00:18:26,170 --> 00:18:29,710
want to set all that stuff up just storm

00:18:28,270 --> 00:18:32,740
in the database and you can do some

00:18:29,710 --> 00:18:35,140
simple aggregations and roll ups and or

00:18:32,740 --> 00:18:37,180
in Redis so you can put this in when

00:18:35,140 --> 00:18:38,470
your app is small and change where

00:18:37,180 --> 00:18:41,950
you're storing them over time without

00:18:38,470 --> 00:18:45,010
having to retool everything so you can

00:18:41,950 --> 00:18:47,890
have a simple metric like code examples

00:18:45,010 --> 00:18:50,200
so that just increments the code example

00:18:47,890 --> 00:19:00,100
metric or we can time things with the

00:18:50,200 --> 00:19:01,630
context or we can set a gauge if the NSA

00:19:00,100 --> 00:19:03,070
knows more about what your users are

00:19:01,630 --> 00:19:06,640
doing with your application than you do

00:19:03,070 --> 00:19:08,800
you're doing something wrong you know so

00:19:06,640 --> 00:19:11,050
I think that you know if all you're

00:19:08,800 --> 00:19:13,450
using is google analytics they probably

00:19:11,050 --> 00:19:16,300
know more about what is going on in your

00:19:13,450 --> 00:19:18,550
app than you do so embrace your inner

00:19:16,300 --> 00:19:22,950
NSA agent and get in there and be a

00:19:18,550 --> 00:19:22,950
little snoopy anybody any questions

00:19:37,990 --> 00:19:43,760
hey thanks for the nice overview so my

00:19:41,270 --> 00:19:45,860
question would be how do you decide how

00:19:43,760 --> 00:19:47,900
to generate the data if you're going to

00:19:45,860 --> 00:19:49,910
do it directly from your application or

00:19:47,900 --> 00:19:52,280
you're going to log it and then have

00:19:49,910 --> 00:19:55,100
something parse it out like how do you

00:19:52,280 --> 00:19:56,840
how do you make the call and what comes

00:19:55,100 --> 00:19:59,240
into the decision I mean I think that

00:19:56,840 --> 00:20:00,620
the biggest is do I already have the

00:19:59,240 --> 00:20:02,720
code written or not like if I've got a

00:20:00,620 --> 00:20:04,730
big app that's got a lot of things going

00:20:02,720 --> 00:20:06,500
on i'm probably going to try to collect

00:20:04,730 --> 00:20:07,550
the metrics from the outside so i'm

00:20:06,500 --> 00:20:10,040
going to i'm going to try and pull it

00:20:07,550 --> 00:20:12,830
off of logs the other reason that i

00:20:10,040 --> 00:20:15,200
would might use off of logs instead of

00:20:12,830 --> 00:20:18,380
inside the app is because of performance

00:20:15,200 --> 00:20:22,460
if i don't need the answers in real time

00:20:18,380 --> 00:20:24,980
or near real time but trying to collect

00:20:22,460 --> 00:20:27,010
that metric any other way would slow the

00:20:24,980 --> 00:20:30,020
app down i'm going to push it into

00:20:27,010 --> 00:20:32,980
elasticsearch Kabana and pull or use log

00:20:30,020 --> 00:20:34,940
stash and pull those out and maybe re

00:20:32,980 --> 00:20:36,560
transmit that into something like

00:20:34,940 --> 00:20:39,190
graphite just so that I can have it

00:20:36,560 --> 00:20:43,040
overlaid with the other the other beds

00:20:39,190 --> 00:20:45,410
Thanks hmm do you have support for the

00:20:43,040 --> 00:20:47,750
influx DB tagging kind of stuff and at

00:20:45,410 --> 00:20:51,170
metrics I don't yet I'd hope to have

00:20:47,750 --> 00:20:53,000
time to add that and for for today but I

00:20:51,170 --> 00:20:54,200
haven't done the influx d be back in yet

00:20:53,000 --> 00:20:58,160
ok anybody wants to help with that

00:20:54,200 --> 00:21:00,770
they'd be awesome but sprints yeah hey I

00:20:58,160 --> 00:21:02,570
was just wondering if you had any tools

00:21:00,770 --> 00:21:04,970
or recommendations for more like more of

00:21:02,570 --> 00:21:07,190
those esoteric metrics you were

00:21:04,970 --> 00:21:10,280
suggesting like the culture e-type ones

00:21:07,190 --> 00:21:11,870
like or so s or yeah I mean we'll pull

00:21:10,280 --> 00:21:13,550
requests and things you can so github

00:21:11,870 --> 00:21:15,320
will do web hooks right so you can

00:21:13,550 --> 00:21:17,210
listen for those and then just shove

00:21:15,320 --> 00:21:19,700
metrics and you can go and backfill that

00:21:17,210 --> 00:21:21,680
pretty easily by hitting the API things

00:21:19,700 --> 00:21:23,630
like do we have a meeting you know like

00:21:21,680 --> 00:21:25,670
I you know do you maybe off your

00:21:23,630 --> 00:21:28,090
calendar you look for this string

00:21:25,670 --> 00:21:30,770
meeting and automatically pull them in

00:21:28,090 --> 00:21:32,300
maybe a very small little web app that

00:21:30,770 --> 00:21:34,400
you can just hit a button and say hey

00:21:32,300 --> 00:21:36,350
I'm in a meeting or you know maybe you

00:21:34,400 --> 00:21:40,580
want to track good meeting versus bad

00:21:36,350 --> 00:21:44,030
meeting like you know I know that when I

00:21:40,580 --> 00:21:46,010
was able to you know show that all the

00:21:44,030 --> 00:21:48,050
requests were coming when I was an IT

00:21:46,010 --> 00:21:49,490
manager although most is like seventy

00:21:48,050 --> 00:21:50,930
percent of my requests that were eating

00:21:49,490 --> 00:21:52,670
up most of my time was coming from

00:21:50,930 --> 00:21:54,500
1department when that department

00:21:52,670 --> 00:21:56,660
complained about how long things were

00:21:54,500 --> 00:21:59,600
taking I said well you know almost all

00:21:56,660 --> 00:22:01,400
my requests are coming from you and you

00:21:59,600 --> 00:22:04,100
know how about you give me some of your

00:22:01,400 --> 00:22:05,660
budget so I can hire more people and we

00:22:04,100 --> 00:22:08,150
can both flow better and he's like

00:22:05,660 --> 00:22:10,040
absolutely i didn't realize that you're

00:22:08,150 --> 00:22:11,870
doing all of our work right but if i

00:22:10,040 --> 00:22:14,480
didn't have numbers like that I just be

00:22:11,870 --> 00:22:16,040
you know he said she said kind of

00:22:14,480 --> 00:22:19,960
argument so no it's your fault no it's

00:22:16,040 --> 00:22:19,960
your fault it's Steve's fault you know

00:22:22,870 --> 00:22:28,700
hi i am from OB thanks for the mention

00:22:25,700 --> 00:22:31,240
out i have a sort of almost cultural

00:22:28,700 --> 00:22:34,970
question and do you have any tips on

00:22:31,240 --> 00:22:39,620
making your co-workers or co-developers

00:22:34,970 --> 00:22:44,870
a care more about performance so i think

00:22:39,620 --> 00:22:46,400
like anything you know if you measure it

00:22:44,870 --> 00:22:48,860
people care about it right if you can

00:22:46,400 --> 00:22:50,840
show them that your work over the last

00:22:48,860 --> 00:22:52,970
week slowed everything down by ten

00:22:50,840 --> 00:22:55,010
percent they're going to start to at

00:22:52,970 --> 00:22:56,720
least check that it may be valid like it

00:22:55,010 --> 00:22:59,060
there's that there was no way to make it

00:22:56,720 --> 00:23:01,370
any faster and the feature was necessary

00:22:59,060 --> 00:23:02,990
and so you can't get you know you can't

00:23:01,370 --> 00:23:05,660
get too hard on them for taking longer

00:23:02,990 --> 00:23:07,730
with more functionality but you know

00:23:05,660 --> 00:23:10,760
most of the time nobody is noticing no

00:23:07,730 --> 00:23:13,160
one's looking you know and you can if

00:23:10,760 --> 00:23:15,110
you're not seeing it on a change by

00:23:13,160 --> 00:23:16,430
change kind of basis you you can't

00:23:15,110 --> 00:23:18,140
figure out it's harder to figure out the

00:23:16,430 --> 00:23:19,760
root cause if you only look at your

00:23:18,140 --> 00:23:21,620
performance numbers every six months or

00:23:19,760 --> 00:23:23,030
only when the ball starts to complain

00:23:21,620 --> 00:23:26,870
that the homepage has taken too long to

00:23:23,030 --> 00:23:28,190
load like what was it I'd have well go

00:23:26,870 --> 00:23:29,990
look through that last eight thousand

00:23:28,190 --> 00:23:32,150
commits and and we'll try and figure out

00:23:29,990 --> 00:23:35,300
what where the problems were or who the

00:23:32,150 --> 00:23:36,850
problem is right it could be that ninety

00:23:35,300 --> 00:23:39,500
percent of your developers are kind of

00:23:36,850 --> 00:23:41,300
performance savvy and there's the ten

00:23:39,500 --> 00:23:43,340
percent that aren't and they just need

00:23:41,300 --> 00:23:45,410
some mentoring but if you're actually

00:23:43,340 --> 00:23:48,380
looking at this stuff on a regular basis

00:23:45,410 --> 00:23:50,750
you know somebody gets an email it's

00:23:48,380 --> 00:23:53,360
like with testing you know I have

00:23:50,750 --> 00:23:55,910
projects where if testing falls below

00:23:53,360 --> 00:23:58,610
eighty percent coverage it doesn't pass

00:23:55,910 --> 00:24:00,380
CI and then can't be deployed so boom

00:23:58,610 --> 00:24:01,730
everybody's just got to keep that up and

00:24:00,380 --> 00:24:04,280
sure sometimes people just game the

00:24:01,730 --> 00:24:05,720
numbers but like if it's something maybe

00:24:04,280 --> 00:24:08,300
need performance testing like the guy

00:24:05,720 --> 00:24:10,010
was talking about the last talk and have

00:24:08,300 --> 00:24:16,460
that be something that's you know

00:24:10,010 --> 00:24:18,470
stopping the build Thanks hmm so this is

00:24:16,460 --> 00:24:21,050
kind of a tooling question on graph on

00:24:18,470 --> 00:24:22,430
ax you can get data from a lot of

00:24:21,050 --> 00:24:25,730
different places and you can put it in a

00:24:22,430 --> 00:24:27,440
lot of different places but knowing what

00:24:25,730 --> 00:24:30,500
data to put together to actually get

00:24:27,440 --> 00:24:33,620
meaningful insights is burley kind of a

00:24:30,500 --> 00:24:35,030
pain yeah and is that something or fauna

00:24:33,620 --> 00:24:38,360
makes it kind of easy to take these

00:24:35,030 --> 00:24:40,250
disparate pieces of data and try to

00:24:38,360 --> 00:24:42,200
match them together and they do it makes

00:24:40,250 --> 00:24:44,090
it easier yes it easier it makes it

00:24:42,200 --> 00:24:46,070
easier it's not easy and that's why I

00:24:44,090 --> 00:24:47,990
say I think you should go play you know

00:24:46,070 --> 00:24:50,660
a little bit I mean you nobody has all

00:24:47,990 --> 00:24:52,490
week to sit around and just you know

00:24:50,660 --> 00:24:55,850
graph numbers on top of each other and

00:24:52,490 --> 00:24:57,410
see what sticks but you know try and you

00:24:55,850 --> 00:24:59,360
know try and look at everything every

00:24:57,410 --> 00:25:01,460
now and again and see does any of this

00:24:59,360 --> 00:25:06,140
match up with anything else does it you

00:25:01,460 --> 00:25:12,440
know does overworked mean more bugs you

00:25:06,140 --> 00:25:15,410
know it's so kind of touching on that

00:25:12,440 --> 00:25:17,270
last question you touched on earlier in

00:25:15,410 --> 00:25:19,940
your talk about how these aren't for

00:25:17,270 --> 00:25:22,730
free but I was kind of curious if there

00:25:19,940 --> 00:25:24,170
were any like good guidelines or any

00:25:22,730 --> 00:25:26,180
hard-and-fast rules in terms of

00:25:24,170 --> 00:25:28,820
monitoring every little thing in the

00:25:26,180 --> 00:25:30,470
office or in your project or whatever I

00:25:28,820 --> 00:25:32,330
mean I think that you know I think we

00:25:30,470 --> 00:25:35,750
could all agree that if you needed to

00:25:32,330 --> 00:25:37,850
hire a person to track shoe size at your

00:25:35,750 --> 00:25:39,620
company probably not a metric worth

00:25:37,850 --> 00:25:43,420
collecting right so I'll be like there's

00:25:39,620 --> 00:25:45,950
time cause actual costs you know so it

00:25:43,420 --> 00:25:48,080
it's a balancing act but if you have a

00:25:45,950 --> 00:25:50,300
time tracking system already that you're

00:25:48,080 --> 00:25:51,860
using for other reasons then pulling

00:25:50,300 --> 00:25:53,420
data out of that and shall they get into

00:25:51,860 --> 00:25:55,190
something that you can graph against

00:25:53,420 --> 00:25:56,980
other things you know that's probably

00:25:55,190 --> 00:26:00,950
what the 30 minutes it takes to do that

00:25:56,980 --> 00:26:02,510
if you've got a calendar or you know all

00:26:00,950 --> 00:26:05,660
meetings happen in the conference room

00:26:02,510 --> 00:26:07,280
and you have an app that tracks when's

00:26:05,660 --> 00:26:10,430
the conference room in use it may be

00:26:07,280 --> 00:26:12,050
worth collecting meetings you know it

00:26:10,430 --> 00:26:14,690
may be worth collecting employee

00:26:12,050 --> 00:26:17,180
happiness if you have other reasons that

00:26:14,690 --> 00:26:17,960
are doing that if HR has got a system

00:26:17,180 --> 00:26:19,760
that

00:26:17,960 --> 00:26:20,899
surveys everybody every three months it

00:26:19,760 --> 00:26:23,870
might be worth collecting that and

00:26:20,899 --> 00:26:26,390
shoving you no min max of average mean

00:26:23,870 --> 00:26:36,440
into integra fauna and see if anything

00:26:26,390 --> 00:26:40,000
shakes out thank you all right that's

00:26:36,440 --> 00:26:40,000

YouTube URL: https://www.youtube.com/watch?v=UCl88qqZa1U


