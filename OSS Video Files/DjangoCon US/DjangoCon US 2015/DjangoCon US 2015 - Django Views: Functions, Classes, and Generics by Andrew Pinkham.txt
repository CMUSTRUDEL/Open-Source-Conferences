Title: DjangoCon US 2015 - Django Views: Functions, Classes, and Generics by Andrew Pinkham
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	Django Views: Functions, Classes, and Generics

The goal of this talk is to make views and HTTP as clear as daylight. This talk is for you if you're confused about:

how function views compare to class-based views
when to use generic class-based views-
the difference between class-based views and generic class-based views-
or when to use any of these
This talk will start with an introduction to HTTP and how Django handles HTTP. We will then look at each kind of view in Django, focusing on how each works and why Django implements it that way. This will allow us to look at the advantages and shortcomings of each type of view. Finally, with a full understanding of Django views, we will be able to easily determine when to use each type of view.

Table of Contents:

What is HTTP, anyway?
Django's HTTP Request/Response Cycle
What is a callable?
History of View Functions
Functions
Generics
Classes and Generics
View Functions
(or How I Learned to Stop Worrying and Love Non-Compliance)
Class Based Views
(or As DRY as the Sahara)
Generic Class Based Views
(or Oh For The Love of Graph Theory)
Enhancing Views
(or 1-Size fits no-one)
Fixing Your Views
When to Use What
Captions: 
	00:00:15,740 --> 00:00:23,580
so as just mentioned my name is Andrew

00:00:20,010 --> 00:00:25,260
I'm a freelance software consultant and

00:00:23,580 --> 00:00:27,420
also a technical instructor I teach

00:00:25,260 --> 00:00:29,279
Django in corporate and startup settings

00:00:27,420 --> 00:00:30,779
I have a class coming up at the end of

00:00:29,279 --> 00:00:32,520
September which I'll come back to

00:00:30,779 --> 00:00:35,010
because perhaps most interestingly isn't

00:00:32,520 --> 00:00:36,719
also mentioned I'm the author of Django

00:00:35,010 --> 00:00:39,450
and leash the book is currently

00:00:36,719 --> 00:00:43,200
available for pre-order pre-order on

00:00:39,450 --> 00:00:44,430
Amazon and Pearson's hedging their bets

00:00:43,200 --> 00:00:47,670
they're saying that it's going to ship

00:00:44,430 --> 00:00:48,899
in December we sort of expected to

00:00:47,670 --> 00:00:50,940
actually ship at the very end of

00:00:48,899 --> 00:00:54,149
November but you didn't hear that from

00:00:50,940 --> 00:00:56,219
me so the goal for today is to make it

00:00:54,149 --> 00:00:58,530
to that by the end of this talk if you

00:00:56,219 --> 00:01:00,570
currently can't answer some of these

00:00:58,530 --> 00:01:01,770
questions I want to make it so that you

00:01:00,570 --> 00:01:04,409
look at these questions you can go oh

00:01:01,770 --> 00:01:06,390
you know what I got this I know exactly

00:01:04,409 --> 00:01:08,700
how to answer these questions and so the

00:01:06,390 --> 00:01:11,610
goal is to make it really easy to get

00:01:08,700 --> 00:01:13,740
through all of these will actually come

00:01:11,610 --> 00:01:15,720
back to the questions themselves the

00:01:13,740 --> 00:01:18,630
talk itself is split into two three

00:01:15,720 --> 00:01:20,430
totally unequal parts we're going to

00:01:18,630 --> 00:01:22,200
start at the very beginning with the

00:01:20,430 --> 00:01:23,900
largest section and it's essentially

00:01:22,200 --> 00:01:26,369
trying to define the problem and

00:01:23,900 --> 00:01:28,860
understand the high-level concepts that

00:01:26,369 --> 00:01:31,110
allow for the solution we're then going

00:01:28,860 --> 00:01:33,000
to actually examine the solutions and

00:01:31,110 --> 00:01:34,979
possible solutions and see how to

00:01:33,000 --> 00:01:36,780
interact with them and then finally the

00:01:34,979 --> 00:01:38,820
smallest section is going to be a little

00:01:36,780 --> 00:01:42,450
bit about the tools that might help you

00:01:38,820 --> 00:01:45,540
ease the the solution process the

00:01:42,450 --> 00:01:47,399
fundamentals right the problem solution

00:01:45,540 --> 00:01:49,200
we're going to look at Python cobbles

00:01:47,399 --> 00:01:51,570
we're gonna examine HTTP and this is

00:01:49,200 --> 00:01:54,000
going to allow us to step back and look

00:01:51,570 --> 00:01:57,299
at django views from a very high-level

00:01:54,000 --> 00:01:59,340
perspective then we'll actually look at

00:01:57,299 --> 00:02:01,799
views we'll start with a little bit of a

00:01:59,340 --> 00:02:05,130
history and then we'll look at each type

00:02:01,799 --> 00:02:09,140
of view available in django at the

00:02:05,130 --> 00:02:10,430
moment and finally we will enhance

00:02:09,140 --> 00:02:13,430
we'll look at a couple options that

00:02:10,430 --> 00:02:14,450
might be useful depending on what your

00:02:13,430 --> 00:02:18,200
choices are

00:02:14,450 --> 00:02:20,510
um I typically like to provide slides

00:02:18,200 --> 00:02:22,340
and code and eventually I will sit down

00:02:20,510 --> 00:02:24,530
and write an article with all of this

00:02:22,340 --> 00:02:27,740
and based on feedback and so you can

00:02:24,530 --> 00:02:29,990
find all of that material at this link

00:02:27,740 --> 00:02:31,340
currently the slides are up online so if

00:02:29,990 --> 00:02:33,080
you want to follow along you can do that

00:02:31,340 --> 00:02:34,580
and all of the code that will be

00:02:33,080 --> 00:02:36,470
appearing including an eye Python

00:02:34,580 --> 00:02:39,410
notebook which you can fool around with

00:02:36,470 --> 00:02:40,700
is currently posted on github so we're

00:02:39,410 --> 00:02:44,210
going to dive straight into it let's

00:02:40,700 --> 00:02:46,010
talk about Python callable z' um you're

00:02:44,210 --> 00:02:48,740
used to seeing Python calls all the time

00:02:46,010 --> 00:02:51,950
right the function is sort of the most

00:02:48,740 --> 00:02:54,680
basic it takes an input it gives you

00:02:51,950 --> 00:02:56,240
output this is this might seem like okay

00:02:54,680 --> 00:02:57,590
Andrew why are you talking about this

00:02:56,240 --> 00:02:59,090
this is really really basic but I want

00:02:57,590 --> 00:03:01,220
to make sure we're all on the same page

00:02:59,090 --> 00:03:04,490
for maybe some of them the the more

00:03:01,220 --> 00:03:07,610
advanced stuff python comes with

00:03:04,490 --> 00:03:09,440
anonymous functions which allows you to

00:03:07,610 --> 00:03:11,270
sort of define them on the fly they're

00:03:09,440 --> 00:03:13,850
interesting but not really the point

00:03:11,270 --> 00:03:16,520
here it should come as no surprise that

00:03:13,850 --> 00:03:20,150
methods are also callable right a method

00:03:16,520 --> 00:03:22,670
takes input and it provides output may

00:03:20,150 --> 00:03:24,380
be a little more surprisingly however is

00:03:22,670 --> 00:03:25,910
the fact that you can see that when I

00:03:24,380 --> 00:03:28,670
instantiate the class

00:03:25,910 --> 00:03:31,250
I'm calling the class and that is in

00:03:28,670 --> 00:03:33,350
fact I am calling it it makes it a

00:03:31,250 --> 00:03:35,330
callable so some people in the room will

00:03:33,350 --> 00:03:38,540
go oh yes well of course there's the

00:03:35,330 --> 00:03:40,400
dunder init method and we use that to

00:03:38,540 --> 00:03:43,910
make it so that a class is called that's

00:03:40,400 --> 00:03:45,800
where we control initialization yes it's

00:03:43,910 --> 00:03:47,120
a lit that if you look at the the Python

00:03:45,800 --> 00:03:48,740
C code it's a little bit more

00:03:47,120 --> 00:03:51,890
complicated than that but that is in

00:03:48,740 --> 00:03:53,210
fact yes what makes a class callable and

00:03:51,890 --> 00:03:54,500
you'll say great so we have we have

00:03:53,210 --> 00:03:56,900
functions and we have methods and

00:03:54,500 --> 00:04:00,380
actually turns out we can also make it

00:03:56,900 --> 00:04:02,690
so that on top of functions methods and

00:04:00,380 --> 00:04:05,510
classes you can make objects callable

00:04:02,690 --> 00:04:08,450
with the dunder callable method so what

00:04:05,510 --> 00:04:10,760
that means is that you have virtually

00:04:08,450 --> 00:04:13,310
everything in Python that can be a

00:04:10,760 --> 00:04:15,290
callable given certain requirements

00:04:13,310 --> 00:04:18,080
right and you can see here I simply

00:04:15,290 --> 00:04:21,049
asked Python hey can I call this right

00:04:18,080 --> 00:04:22,940
so now that we all are really really

00:04:21,049 --> 00:04:25,430
clear on what a call

00:04:22,940 --> 00:04:29,060
we can move into the rest of the talk

00:04:25,430 --> 00:04:31,670
and we're going to start with HTTP you

00:04:29,060 --> 00:04:33,260
you've surely seen books about this

00:04:31,670 --> 00:04:35,240
articles about this presentations about

00:04:33,260 --> 00:04:36,980
this and and we could we could sort of

00:04:35,240 --> 00:04:40,010
start we go yes well it's it stands for

00:04:36,980 --> 00:04:42,290
this it defines how a client and a

00:04:40,010 --> 00:04:44,270
server communicate right the client will

00:04:42,290 --> 00:04:46,550
issue a request method the server does

00:04:44,270 --> 00:04:49,220
whatever it needs to and the server is

00:04:46,550 --> 00:04:50,660
going to return a response and at that

00:04:49,220 --> 00:04:53,930
point we could begin to talk about the

00:04:50,660 --> 00:04:55,790
the different methods available and we

00:04:53,930 --> 00:04:58,460
could go through and we outline all the

00:04:55,790 --> 00:05:01,220
ones that are important we can then get

00:04:58,460 --> 00:05:03,530
into a real battle about post input and

00:05:01,220 --> 00:05:05,570
the meaning of idempotent methods and I

00:05:03,530 --> 00:05:08,060
can stand up here and I can really go

00:05:05,570 --> 00:05:10,130
through this and you know ye shall not

00:05:08,060 --> 00:05:13,510
and whatever goes but that really misses

00:05:10,130 --> 00:05:18,260
the point for us and the point is this

00:05:13,510 --> 00:05:20,720
your website must adhere to HTTP when

00:05:18,260 --> 00:05:24,290
you were building a website the problem

00:05:20,720 --> 00:05:26,900
you are trying to solve is adherence to

00:05:24,290 --> 00:05:30,020
HTTP right so if I go and build a server

00:05:26,900 --> 00:05:32,870
and I have the following request methods

00:05:30,020 --> 00:05:36,350
and then I define the following response

00:05:32,870 --> 00:05:39,350
codes not only will my web server not

00:05:36,350 --> 00:05:40,760
work but I have created a monster and

00:05:39,350 --> 00:05:44,540
you really need to pull me aside and

00:05:40,760 --> 00:05:47,630
have a word with me so I'm going to you

00:05:44,540 --> 00:05:49,520
know really emphasize the fact that when

00:05:47,630 --> 00:05:53,050
you are building a website your goal

00:05:49,520 --> 00:05:55,970
first and foremost is to adhere to HTTP

00:05:53,050 --> 00:05:57,980
now I'm also going to assert a little

00:05:55,970 --> 00:06:00,320
more baselessly that the goal of all

00:05:57,980 --> 00:06:03,530
software is to solve a problem or to

00:06:00,320 --> 00:06:05,390
automate behavior and I admit look

00:06:03,530 --> 00:06:08,690
sometimes it's really not clear which of

00:06:05,390 --> 00:06:10,220
the two things that's doing but I'm

00:06:08,690 --> 00:06:12,050
still going to tell you yes I am

00:06:10,220 --> 00:06:14,540
absolutely correct on this you will take

00:06:12,050 --> 00:06:19,130
my word for it um that means that in the

00:06:14,540 --> 00:06:21,860
context of HTTP and Jango HTTP is the

00:06:19,130 --> 00:06:24,980
central problem that the web frame that

00:06:21,860 --> 00:06:27,860
any web framework must solve right it is

00:06:24,980 --> 00:06:31,220
it is everything else is a nicety it's

00:06:27,860 --> 00:06:33,410
there to help you but as a website is

00:06:31,220 --> 00:06:35,449
defined as just something that adheres

00:06:33,410 --> 00:06:37,460
to the HTTP spec

00:06:35,449 --> 00:06:40,039
then that is the first problem it must

00:06:37,460 --> 00:06:42,349
fix and it also means that your the

00:06:40,039 --> 00:06:44,240
behavior it's automating it's trying to

00:06:42,349 --> 00:06:46,400
make it so that you have to do the least

00:06:44,240 --> 00:06:50,479
amount of work possible to adhere to

00:06:46,400 --> 00:06:55,189
this which allows us to move directly

00:06:50,479 --> 00:06:58,430
into Django I don't know how many people

00:06:55,189 --> 00:07:01,210
here have not done the Django tutorial

00:06:58,430 --> 00:07:06,830
who here's really just getting started

00:07:01,210 --> 00:07:09,080
okay so I want to I'm glad to see that I

00:07:06,830 --> 00:07:11,210
just want to talk real quick about what

00:07:09,080 --> 00:07:12,889
a view is when you do the tutorial

00:07:11,210 --> 00:07:15,409
you're gonna see that there's some text

00:07:12,889 --> 00:07:17,449
it says if you as a type of webpage

00:07:15,409 --> 00:07:20,240
Russell Keith McGee two years ago Django

00:07:17,449 --> 00:07:22,909
Khan said a views are for displaying

00:07:20,240 --> 00:07:25,310
content I'm gonna go so far as to say

00:07:22,909 --> 00:07:27,229
that it's dynamic generation of content

00:07:25,310 --> 00:07:30,409
right the Washington Post is a

00:07:27,229 --> 00:07:32,990
collection of web pages some of these

00:07:30,409 --> 00:07:35,180
web pages are similar right there are a

00:07:32,990 --> 00:07:37,879
whole bunch of articles on the web site

00:07:35,180 --> 00:07:39,830
and they all meet the following

00:07:37,879 --> 00:07:41,899
structure right the articles are all the

00:07:39,830 --> 00:07:43,669
same thing and so you typically if you

00:07:41,899 --> 00:07:46,879
were building this in Django would have

00:07:43,669 --> 00:07:51,620
a view for the articles right it becomes

00:07:46,879 --> 00:07:53,689
a type of web page so you have your user

00:07:51,620 --> 00:07:56,779
show up and what's going to happen is

00:07:53,689 --> 00:07:57,770
they're going to that oh yes

00:07:56,779 --> 00:07:59,899
they're going to issue you an HTTP

00:07:57,770 --> 00:08:01,310
request the website is going to compute

00:07:59,899 --> 00:08:03,620
and it's going to get a response back

00:08:01,310 --> 00:08:06,069
this is how every website works and

00:08:03,620 --> 00:08:07,909
we're interested in the internals in

00:08:06,069 --> 00:08:10,759
Django you're gonna start by building

00:08:07,909 --> 00:08:13,639
django models you might go ahead and

00:08:10,759 --> 00:08:17,599
build forms oh yes you generate the the

00:08:13,639 --> 00:08:19,580
database based on the the models you're

00:08:17,599 --> 00:08:21,620
then gonna go ahead and make template

00:08:19,580 --> 00:08:23,330
files and which allows you to build the

00:08:21,620 --> 00:08:25,249
views if your websites really

00:08:23,330 --> 00:08:27,649
complicated you might have middleware

00:08:25,249 --> 00:08:29,930
and context processors at which point

00:08:27,649 --> 00:08:32,750
you'll then load django it will get you

00:08:29,930 --> 00:08:35,569
the following tools and you can now work

00:08:32,750 --> 00:08:37,490
with this your user is going to just as

00:08:35,569 --> 00:08:39,050
before issue an HTTP request it goes

00:08:37,490 --> 00:08:41,690
through the middleware gets into the

00:08:39,050 --> 00:08:45,050
dispatch it will find a URL pattern and

00:08:41,690 --> 00:08:48,209
then find a view the view might interact

00:08:45,050 --> 00:08:51,509
with a model it might interact

00:08:48,209 --> 00:08:52,999
forms and it might go and interact with

00:08:51,509 --> 00:08:56,160
the templates

00:08:52,999 --> 00:08:58,259
it's then always going to return back to

00:08:56,160 --> 00:09:00,920
the user the opposite way through the

00:08:58,259 --> 00:09:02,939
middleware and then send it back data um

00:09:00,920 --> 00:09:05,850
you'll notice that in all of these cases

00:09:02,939 --> 00:09:07,259
I said might because the truth of the

00:09:05,850 --> 00:09:08,790
matter is that this is the only thing

00:09:07,259 --> 00:09:11,699
that's really important all right

00:09:08,790 --> 00:09:16,499
everything else is simply a way to try

00:09:11,699 --> 00:09:18,990
and I'm glad that got laughs this is

00:09:16,499 --> 00:09:20,999
this is simply this is the core of

00:09:18,990 --> 00:09:23,629
Django this is the only thing that you

00:09:20,999 --> 00:09:26,339
would really need to be a web framework

00:09:23,629 --> 00:09:29,160
everything else is really useful

00:09:26,339 --> 00:09:31,920
phenomenally helpful but this is this is

00:09:29,160 --> 00:09:33,119
the heart of it before we go any further

00:09:31,920 --> 00:09:35,009
I want to note that that was a

00:09:33,119 --> 00:09:36,839
simplification that animation is nice

00:09:35,009 --> 00:09:40,410
but it doesn't deal with all sorts of

00:09:36,839 --> 00:09:41,670
things and so please don't email me

00:09:40,410 --> 00:09:46,470
about the fact that it's wrong I know

00:09:41,670 --> 00:09:47,699
it's wrong it's somewhat wrong right so

00:09:46,470 --> 00:09:49,769
we're gonna focus on this and in

00:09:47,699 --> 00:09:52,439
particular we're going to focus on views

00:09:49,769 --> 00:09:54,540
now because views are so heavily tied to

00:09:52,439 --> 00:09:56,910
URL patterns I'm going to have to deal

00:09:54,540 --> 00:09:58,799
with URL patterns a little bit and the

00:09:56,910 --> 00:10:01,799
entire goal is going to be to deal with

00:09:58,799 --> 00:10:04,589
views in the context of HTTP so this is

00:10:01,799 --> 00:10:05,790
an HTTP or the format of an HTTP method

00:10:04,589 --> 00:10:09,029
this is what your server actually

00:10:05,790 --> 00:10:11,490
expects to receive when it comes in and

00:10:09,029 --> 00:10:13,350
we have these two systems and they are

00:10:11,490 --> 00:10:15,600
going to be looking at that request and

00:10:13,350 --> 00:10:17,540
trying to handle it the first thing is

00:10:15,600 --> 00:10:20,369
it's going to the URL pattern is

00:10:17,540 --> 00:10:21,990
primarily interested in handling the

00:10:20,369 --> 00:10:24,209
path to the resource right it looks at

00:10:21,990 --> 00:10:25,829
the URL path and it goes yep I'm trying

00:10:24,209 --> 00:10:28,230
to figure out which view to call and

00:10:25,829 --> 00:10:31,410
maybe it will take that some information

00:10:28,230 --> 00:10:33,089
from the URL path and hand it to the

00:10:31,410 --> 00:10:35,399
view maybe not

00:10:33,089 --> 00:10:38,579
um but that means that the view is

00:10:35,399 --> 00:10:40,350
really interested in the HTTP method

00:10:38,579 --> 00:10:42,629
there's nothing else in Django that's

00:10:40,350 --> 00:10:44,129
going to handle that for us this allows

00:10:42,629 --> 00:10:46,619
us to come back to the original question

00:10:44,129 --> 00:10:48,119
which is what is a view and when you

00:10:46,619 --> 00:10:51,240
look at it from a much more technical

00:10:48,119 --> 00:10:53,610
standpoint now we accept the HTTP

00:10:51,240 --> 00:10:56,399
request object and at which point we are

00:10:53,610 --> 00:10:59,100
going to in the view generate data based

00:10:56,399 --> 00:11:01,680
on the HTTP request method

00:10:59,100 --> 00:11:04,139
any data that is coming along with the

00:11:01,680 --> 00:11:07,019
request and any data that the URL

00:11:04,139 --> 00:11:09,449
dispatcher is giving or is taking from

00:11:07,019 --> 00:11:12,000
the URL pattern and then handing to our

00:11:09,449 --> 00:11:15,149
view at which point the view will always

00:11:12,000 --> 00:11:19,740
always always return an HTTP response

00:11:15,149 --> 00:11:22,589
object that should be ringing a few

00:11:19,740 --> 00:11:26,160
bells oh look it's we have to accept and

00:11:22,589 --> 00:11:27,420
we have to return the secret to views is

00:11:26,160 --> 00:11:30,870
that whoops

00:11:27,420 --> 00:11:34,410
the secret to views is that any Python

00:11:30,870 --> 00:11:37,230
callable can be a view which sort of

00:11:34,410 --> 00:11:40,350
raises the question why do we talk about

00:11:37,230 --> 00:11:42,779
functions in classes and generics why do

00:11:40,350 --> 00:11:46,680
we limit it to this let's take a trip

00:11:42,779 --> 00:11:53,180
down memory lane back in 2005 when

00:11:46,680 --> 00:11:55,230
Django was nothing but a tarball the the

00:11:53,180 --> 00:11:58,740
official recommendation for building

00:11:55,230 --> 00:12:00,000
views was to use Django functions we now

00:11:58,740 --> 00:12:01,860
know that that's not really because

00:12:00,000 --> 00:12:04,380
functions are sort of any sort of

00:12:01,860 --> 00:12:06,600
inherent part of Django but simply

00:12:04,380 --> 00:12:09,000
through the simplest form of Python

00:12:06,600 --> 00:12:11,760
callable and so that were they were what

00:12:09,000 --> 00:12:13,560
made the most sense to use very quickly

00:12:11,760 --> 00:12:14,190
thereafter people said you know what

00:12:13,560 --> 00:12:15,839
would be great

00:12:14,190 --> 00:12:17,430
we are constantly reprogramming all of

00:12:15,839 --> 00:12:19,199
these webpages again and again and again

00:12:17,430 --> 00:12:21,000
can we just put them in Django so that

00:12:19,199 --> 00:12:22,440
we can just use them straight out of the

00:12:21,000 --> 00:12:25,170
box people said yeah sure that sounds

00:12:22,440 --> 00:12:27,360
like a great idea um there's a problem

00:12:25,170 --> 00:12:30,389
with this right when you when you try

00:12:27,360 --> 00:12:33,300
and have extensible and or you have this

00:12:30,389 --> 00:12:35,399
behavior and you say this is almost

00:12:33,300 --> 00:12:37,470
exactly what I want right this is almost

00:12:35,399 --> 00:12:38,970
exact exactly the behavior I want it's

00:12:37,470 --> 00:12:40,740
just a little bit different the

00:12:38,970 --> 00:12:43,920
difficulty there is that if you're using

00:12:40,740 --> 00:12:45,389
a function functions are rigid right you

00:12:43,920 --> 00:12:47,550
can't sort of just dig in there and

00:12:45,389 --> 00:12:50,970
change a little thing you have to use

00:12:47,550 --> 00:12:52,800
the function entirely or not at all

00:12:50,970 --> 00:12:54,949
and that sort of became a problem with

00:12:52,800 --> 00:12:58,050
the generic views and they said can we

00:12:54,949 --> 00:12:59,699
can we do this better oh we can try and

00:12:58,050 --> 00:13:01,290
extend the number of parameters we can

00:12:59,699 --> 00:13:02,870
do X Y and C and eventually they

00:13:01,290 --> 00:13:04,649
realized oh we're reimplemented

00:13:02,870 --> 00:13:05,490
object-oriented programming well that's

00:13:04,649 --> 00:13:08,819
ridiculous

00:13:05,490 --> 00:13:12,290
why don't we simply use a class to

00:13:08,819 --> 00:13:16,650
instantiate objects that are views

00:13:12,290 --> 00:13:19,050
this was this was a pretty successful

00:13:16,650 --> 00:13:21,960
idea right this is this is Alex Gaynor

00:13:19,050 --> 00:13:24,660
saying wow this would be so useful I'm

00:13:21,960 --> 00:13:26,850
sorry if that's not large enough it's so

00:13:24,660 --> 00:13:31,110
useful to have right we'd be able to go

00:13:26,850 --> 00:13:33,060
ahead and just extend it and so in 2008

00:13:31,110 --> 00:13:35,430
Joseph Coker Hans I'm sorry if I'm

00:13:33,060 --> 00:13:37,290
mispronouncing I went ahead and opened

00:13:35,430 --> 00:13:39,990
the ticket and so the discussion became

00:13:37,290 --> 00:13:42,000
well we're going to fix generic views by

00:13:39,990 --> 00:13:45,510
allowing them to be extensible but first

00:13:42,000 --> 00:13:47,010
we actually need a class that is a view

00:13:45,510 --> 00:13:50,490
right we need to be able to instantiate

00:13:47,010 --> 00:13:51,900
just a simple object view and so they

00:13:50,490 --> 00:13:53,310
said well what do we want for that oh

00:13:51,900 --> 00:13:55,410
well we need to make sure that when

00:13:53,310 --> 00:13:56,940
people are using it it's really obvious

00:13:55,410 --> 00:13:58,650
how to use it we need to make sure

00:13:56,940 --> 00:14:01,410
that's extendable because that was sort

00:13:58,650 --> 00:14:04,470
of the original idea and we need to make

00:14:01,410 --> 00:14:07,320
sure that it's thread safe turns out

00:14:04,470 --> 00:14:11,580
that last one's really hard and so it

00:14:07,320 --> 00:14:13,530
took until 2011 to really get it right

00:14:11,580 --> 00:14:14,850
to really sit down and say okay we're

00:14:13,530 --> 00:14:16,440
gonna work through the entire thing and

00:14:14,850 --> 00:14:18,840
get it right and at which point they

00:14:16,440 --> 00:14:21,540
released the class-based view along with

00:14:18,840 --> 00:14:23,640
the generic views and this is sort of

00:14:21,540 --> 00:14:25,650
where we ran into a naming problem

00:14:23,640 --> 00:14:27,090
because we'd started with generic views

00:14:25,650 --> 00:14:28,710
and that was it was obvious what those

00:14:27,090 --> 00:14:30,210
were right like oh it's just behavior

00:14:28,710 --> 00:14:31,560
that's pre-programmed for us and now

00:14:30,210 --> 00:14:33,780
we've introduced this class-based view

00:14:31,560 --> 00:14:35,820
right it's just a view that instantiates

00:14:33,780 --> 00:14:37,350
an object view or it's a class that

00:14:35,820 --> 00:14:39,270
instantiates an object view excuse me

00:14:37,350 --> 00:14:41,640
and they said well we'll just add class

00:14:39,270 --> 00:14:43,410
based in front of generic everyone will

00:14:41,640 --> 00:14:45,450
understand right there will be no

00:14:43,410 --> 00:14:47,130
confusion there unfortunately there was

00:14:45,450 --> 00:14:49,320
a lot of confusion and there's sort of

00:14:47,130 --> 00:14:51,870
the remains a lot of confusion one of

00:14:49,320 --> 00:14:53,700
the ways I've started discussing it is

00:14:51,870 --> 00:14:56,250
to talk about class-based views as

00:14:53,700 --> 00:14:58,380
object views yes there's a class but the

00:14:56,250 --> 00:15:00,540
actual views are the objects that you're

00:14:58,380 --> 00:15:02,160
instantiate and that helps a lot of

00:15:00,540 --> 00:15:04,500
people go oh yes of course

00:15:02,160 --> 00:15:06,450
and the other thing is that the the main

00:15:04,500 --> 00:15:08,130
point of the generic views is not that

00:15:06,450 --> 00:15:10,230
they're class-based or objects that's

00:15:08,130 --> 00:15:12,540
that's certainly incredibly useful for

00:15:10,230 --> 00:15:14,460
extending behavior and taking control

00:15:12,540 --> 00:15:15,630
but that's really not the point the

00:15:14,460 --> 00:15:18,870
point of the matter is that they're

00:15:15,630 --> 00:15:21,480
generic views and where that leaves us

00:15:18,870 --> 00:15:24,420
the state of the the the pony as of

00:15:21,480 --> 00:15:25,680
Django 1.30 for all the the the

00:15:24,420 --> 00:15:28,410
beginners in the

00:15:25,680 --> 00:15:31,010
the state of the ponies is a joke lump

00:15:28,410 --> 00:15:33,360
sending Django joke where we talk about

00:15:31,010 --> 00:15:35,670
people saying no you can't have that

00:15:33,360 --> 00:15:37,050
pony in terms of new Django features and

00:15:35,670 --> 00:15:39,000
so you will regularly hear people say

00:15:37,050 --> 00:15:41,040
the state of the Pony to refer to the

00:15:39,000 --> 00:15:44,390
state of Django I did not think about

00:15:41,040 --> 00:15:47,130
that inside joke sorry about that

00:15:44,390 --> 00:15:49,050
so we currently have three options right

00:15:47,130 --> 00:15:50,850
the function views simply because it's a

00:15:49,050 --> 00:15:52,590
callable right we can use any color ball

00:15:50,850 --> 00:15:54,390
and so naturally you you can use a

00:15:52,590 --> 00:15:55,920
function of you and and then the object

00:15:54,390 --> 00:15:59,550
views or the class-based views are there

00:15:55,920 --> 00:16:01,860
and useful because they put you know

00:15:59,550 --> 00:16:04,530
three years of time into really making

00:16:01,860 --> 00:16:06,660
sure it was safe and usable and so

00:16:04,530 --> 00:16:08,820
people don't create their own because

00:16:06,660 --> 00:16:10,470
it's a lot of work to do that and why

00:16:08,820 --> 00:16:12,660
wouldn't i just use these and then the

00:16:10,470 --> 00:16:15,330
generic views are simply pre-programmed

00:16:12,660 --> 00:16:19,500
views for you to use and so you know not

00:16:15,330 --> 00:16:21,120
really in the same category and that

00:16:19,500 --> 00:16:21,570
means that we can now move into looking

00:16:21,120 --> 00:16:24,900
at each one

00:16:21,570 --> 00:16:26,300
so the function views we now know even

00:16:24,900 --> 00:16:29,520
though they're considered the original

00:16:26,300 --> 00:16:31,260
it's simply that they follow what it

00:16:29,520 --> 00:16:33,420
means to be a view and they're colobus

00:16:31,260 --> 00:16:36,210
right so we're gonna begin by setting up

00:16:33,420 --> 00:16:38,940
a little project this is a model it's

00:16:36,210 --> 00:16:41,430
really uninspiring but you get the point

00:16:38,940 --> 00:16:42,990
it's got a name and a slug because i

00:16:41,430 --> 00:16:44,940
can't get away from building views

00:16:42,990 --> 00:16:46,710
without a URL a pattern i'm going to go

00:16:44,940 --> 00:16:50,340
ahead and build a URL pattern it's going

00:16:46,710 --> 00:16:53,970
to call my view and it takes in a single

00:16:50,340 --> 00:16:55,770
parameter called this look this is

00:16:53,970 --> 00:16:58,470
assets to program this and this is sort

00:16:55,770 --> 00:17:01,260
of your stereotypical view for all all

00:16:58,470 --> 00:17:03,420
of the beginners in the room this is

00:17:01,260 --> 00:17:05,880
this is sort of how we think of views I

00:17:03,420 --> 00:17:08,220
take in some data I fetch something from

00:17:05,880 --> 00:17:11,580
the database and then I return something

00:17:08,220 --> 00:17:13,709
via the template this is not a great

00:17:11,580 --> 00:17:15,630
example unfortunately because it means

00:17:13,709 --> 00:17:19,260
that I'm using all of these other

00:17:15,630 --> 00:17:20,459
subsystems when I meant to just focus on

00:17:19,260 --> 00:17:22,440
one thing

00:17:20,459 --> 00:17:24,900
and the only thing that really matters

00:17:22,440 --> 00:17:28,860
is you can see the first parameter I'm

00:17:24,900 --> 00:17:32,220
taking in is the request and the render

00:17:28,860 --> 00:17:34,800
is using that to return an HTTP response

00:17:32,220 --> 00:17:37,650
and so you can see the idea here is that

00:17:34,800 --> 00:17:38,900
we're doing that can anyone tell me

00:17:37,650 --> 00:17:41,690
what's missing

00:17:38,900 --> 00:17:43,720
from our stereotypical view does anyone

00:17:41,690 --> 00:17:45,710
see something that's that's that sort of

00:17:43,720 --> 00:17:47,450
should maybe be in there

00:17:45,710 --> 00:17:50,570
feel free to actually shut this out but

00:17:47,450 --> 00:17:52,010
I'm actually asking you a question the

00:17:50,570 --> 00:17:55,550
method yes

00:17:52,010 --> 00:17:58,190
we haven't bothered to handle the HTTP

00:17:55,550 --> 00:17:59,930
method at all it's not even in our code

00:17:58,190 --> 00:18:01,730
there are many ways we can do this it's

00:17:59,930 --> 00:18:03,710
it's fairly easy right I can just add an

00:18:01,730 --> 00:18:06,020
if condition and say look if it's the

00:18:03,710 --> 00:18:08,720
get method you know do the following and

00:18:06,020 --> 00:18:10,880
if it's not the get method please return

00:18:08,720 --> 00:18:13,010
an HTTP response not allowed and tell

00:18:10,880 --> 00:18:15,620
them that the only thing we accept is

00:18:13,010 --> 00:18:17,059
the get method this is horrible

00:18:15,620 --> 00:18:19,309
you're not gonna program this come on

00:18:17,059 --> 00:18:23,000
like not that's not great thankfully

00:18:19,309 --> 00:18:25,580
Django introduces the HTTP the decorator

00:18:23,000 --> 00:18:27,910
I'm not gonna get that out to help that

00:18:25,580 --> 00:18:31,160
and so here we simply say look this view

00:18:27,910 --> 00:18:33,110
it only accepts get and head and

00:18:31,160 --> 00:18:38,210
everything else it will return in HTTP

00:18:33,110 --> 00:18:41,780
405 method on our return an HTTP

00:18:38,210 --> 00:18:44,809
response for a 5 error code there we are

00:18:41,780 --> 00:18:48,050
turns out there's a shortcut a shortcut

00:18:44,809 --> 00:18:53,840
for getting head called require safe and

00:18:48,050 --> 00:18:56,059
so we can simply move that over and at

00:18:53,840 --> 00:18:57,950
which point we can actually see all the

00:18:56,059 --> 00:19:00,679
changes to our code by using a tool

00:18:57,950 --> 00:19:04,160
called telnet you can actually write the

00:19:00,679 --> 00:19:07,040
HTTP HTTP requests directly in your

00:19:04,160 --> 00:19:08,900
command line if you are running a server

00:19:07,040 --> 00:19:12,170
this is actually kind of fun right so

00:19:08,900 --> 00:19:14,120
I'm actually typing in get a path and it

00:19:12,170 --> 00:19:16,610
is returning this data to me and I can

00:19:14,120 --> 00:19:19,070
see oh yeah that it expects that and it

00:19:16,610 --> 00:19:21,950
gives that stuff back to me if I give it

00:19:19,070 --> 00:19:24,559
a method that is it's not expecting like

00:19:21,950 --> 00:19:26,630
options it's going to say nope I have no

00:19:24,559 --> 00:19:29,059
idea what this is I'm not programmed to

00:19:26,630 --> 00:19:31,850
handle this and what I can tell you is

00:19:29,059 --> 00:19:33,730
that I can handle getting head you can

00:19:31,850 --> 00:19:35,780
see it on the third line from the bottom

00:19:33,730 --> 00:19:38,960
you'll notice that throughout this talk

00:19:35,780 --> 00:19:40,610
I'm going to avoid post even though it's

00:19:38,960 --> 00:19:42,350
commonly used because the CSRF

00:19:40,610 --> 00:19:44,390
middleware is going to get in the way

00:19:42,350 --> 00:19:46,640
and simply kind of interject itself and

00:19:44,390 --> 00:19:50,130
go hi by the way you're not being secure

00:19:46,640 --> 00:19:52,650
if you were to disable it you would get

00:19:50,130 --> 00:19:55,170
four or five err please don't disable it

00:19:52,650 --> 00:19:57,900
unless you really really really know

00:19:55,170 --> 00:19:59,070
what you're doing um we're gonna go

00:19:57,900 --> 00:20:01,170
through and we're just gonna create

00:19:59,070 --> 00:20:03,900
another view just to see a slightly

00:20:01,170 --> 00:20:06,750
different case um so here is just

00:20:03,900 --> 00:20:08,550
another URL pattern and here is a view

00:20:06,750 --> 00:20:11,100
and you'll go oh look this is for

00:20:08,550 --> 00:20:13,680
handling forms and we say oh okay so if

00:20:11,100 --> 00:20:16,470
it's a post I behave a specific way and

00:20:13,680 --> 00:20:20,040
if it's not a post you know I expect to

00:20:16,470 --> 00:20:22,590
get and I I behave a a different way um

00:20:20,040 --> 00:20:24,840
that's like showing up at your 24-hour

00:20:22,590 --> 00:20:26,850
diner and ninety percent of the time

00:20:24,840 --> 00:20:28,620
you're going to say yes I would like the

00:20:26,850 --> 00:20:31,170
scrambled eggs and you're going so

00:20:28,620 --> 00:20:32,700
people are going to ask for scrambled

00:20:31,170 --> 00:20:33,600
eggs 90 percent of the time and so

00:20:32,700 --> 00:20:36,210
you're just going to give them scrambled

00:20:33,600 --> 00:20:38,130
eggs but you're also for 10 percent of

00:20:36,210 --> 00:20:40,400
the time giving the people who are

00:20:38,130 --> 00:20:43,170
asking for hamburger or the hashbrowns

00:20:40,400 --> 00:20:45,180
scrambled eggs that's really frustrating

00:20:43,170 --> 00:20:47,400
and you're probably not going to do well

00:20:45,180 --> 00:20:50,010
with that crowd and so even though

00:20:47,400 --> 00:20:52,800
you're handling post you're not actually

00:20:50,010 --> 00:20:56,580
handling any of the other HTTP methods

00:20:52,800 --> 00:20:59,240
right you can see that it's I've sort of

00:20:56,580 --> 00:21:01,910
brought a laser and it's not working um

00:20:59,240 --> 00:21:04,230
you can see that the the topmost

00:21:01,910 --> 00:21:06,600
condition there the else simply says

00:21:04,230 --> 00:21:08,610
else doesn't check for any other HTTP

00:21:06,600 --> 00:21:11,160
method that's that's not so great so

00:21:08,610 --> 00:21:13,290
even if you're partially handling the

00:21:11,160 --> 00:21:15,360
HTTP method you really do want to think

00:21:13,290 --> 00:21:18,690
about whether you're handling all of

00:21:15,360 --> 00:21:23,940
them and that's how you should deal with

00:21:18,690 --> 00:21:26,790
function views in Django um we can now

00:21:23,940 --> 00:21:28,650
turn to class-based views and the key

00:21:26,790 --> 00:21:30,270
advantage to class-based views is the

00:21:28,650 --> 00:21:32,490
fact that they're classes you're dealing

00:21:30,270 --> 00:21:35,190
with object-oriented programming and

00:21:32,490 --> 00:21:37,410
it's a really powerful way not the only

00:21:35,190 --> 00:21:39,750
way but a very powerful way to adhere to

00:21:37,410 --> 00:21:43,170
dry which is don't repeat yourself in

00:21:39,750 --> 00:21:44,730
Python so once again we're going to

00:21:43,170 --> 00:21:46,350
we're going to convert the last two

00:21:44,730 --> 00:21:48,840
views that we had that we built into

00:21:46,350 --> 00:21:51,180
class-based views um I have to deal with

00:21:48,840 --> 00:21:53,040
the URL pattern I can't go in I don't

00:21:51,180 --> 00:21:56,340
have enough time to go into detail as to

00:21:53,040 --> 00:21:58,380
why I'm changing this there's a lot of

00:21:56,340 --> 00:22:01,500
documentation and I cover this in great

00:21:58,380 --> 00:22:03,360
detail in my talk at Django Con 2013

00:22:01,500 --> 00:22:05,820
the bottom line is you have to believe

00:22:03,360 --> 00:22:08,850
me for the moment that I have to make

00:22:05,820 --> 00:22:10,890
this change for this to work we can then

00:22:08,850 --> 00:22:13,080
actually look at our code and the first

00:22:10,890 --> 00:22:15,120
thing I'm going to do is get rid of the

00:22:13,080 --> 00:22:17,220
decorator it's gone I don't need it

00:22:15,120 --> 00:22:19,919
the next thing I'm going to do is change

00:22:17,220 --> 00:22:22,530
the name of this function to get and I'm

00:22:19,919 --> 00:22:26,070
going to add self in anticipation of

00:22:22,530 --> 00:22:28,380
having this as a class I indent and I

00:22:26,070 --> 00:22:31,860
put it under a class that is the only

00:22:28,380 --> 00:22:34,520
difference right it is exactly the same

00:22:31,860 --> 00:22:37,169
thing except it is now it now has a

00:22:34,520 --> 00:22:40,799
class that it belongs to and is now a

00:22:37,169 --> 00:22:43,080
method um there is however a huge amount

00:22:40,799 --> 00:22:45,330
of beauty to this because it makes

00:22:43,080 --> 00:22:48,630
explicit the problem you are trying to

00:22:45,330 --> 00:22:50,970
solve this code only works if an HTTP

00:22:48,630 --> 00:22:54,630
GET method is used and everything else

00:22:50,970 --> 00:22:57,510
is not handled or rather will return to

00:22:54,630 --> 00:22:59,580
four or five error um almost everything

00:22:57,510 --> 00:23:01,890
as it turns out class-based views are

00:22:59,580 --> 00:23:03,390
kind of neat if you give them a get

00:23:01,890 --> 00:23:05,820
method they will automatically give you

00:23:03,390 --> 00:23:08,909
head method handling and it will also

00:23:05,820 --> 00:23:11,940
always give you option handling which is

00:23:08,909 --> 00:23:13,080
really really cool and much better than

00:23:11,940 --> 00:23:16,169
what you're getting with with the

00:23:13,080 --> 00:23:18,210
function views the same thing is is sort

00:23:16,169 --> 00:23:20,640
of similar when we come back to our form

00:23:18,210 --> 00:23:22,380
view and we say oh okay well we need to

00:23:20,640 --> 00:23:26,039
do a little bit more here because what

00:23:22,380 --> 00:23:28,049
we actually wanted was get and post and

00:23:26,039 --> 00:23:29,909
so we can go ahead and create two

00:23:28,049 --> 00:23:31,860
methods for the class-based views and

00:23:29,909 --> 00:23:33,809
we're going to go ahead and define a

00:23:31,860 --> 00:23:36,270
bunch of attributes the get method is

00:23:33,809 --> 00:23:39,539
completely uninteresting right I take

00:23:36,270 --> 00:23:41,159
input I provide output to a page not

00:23:39,539 --> 00:23:43,140
route the code is not really the point

00:23:41,159 --> 00:23:45,840
input output just the get method and

00:23:43,140 --> 00:23:48,210
with post that's sort of the same thing

00:23:45,840 --> 00:23:50,640
you handle the form however you need to

00:23:48,210 --> 00:23:52,830
but the bottom line is that this is

00:23:50,640 --> 00:23:55,950
behavior that is defined only for the

00:23:52,830 --> 00:23:58,470
post method um and of course you're

00:23:55,950 --> 00:24:00,980
getting options and head because of the

00:23:58,470 --> 00:24:03,390
way we've we built this this is very

00:24:00,980 --> 00:24:06,450
different from what we had originally

00:24:03,390 --> 00:24:08,730
and one of the things that I found with

00:24:06,450 --> 00:24:10,700
beginners is if you if you look at this

00:24:08,730 --> 00:24:13,130
as a beginner it's it's

00:24:10,700 --> 00:24:15,020
a lot to take in you go well there's an

00:24:13,130 --> 00:24:16,610
if condition but then there's a second

00:24:15,020 --> 00:24:18,710
if condition and there's this implicit

00:24:16,610 --> 00:24:21,560
return that has multiple behavior and

00:24:18,710 --> 00:24:23,360
when I ask people taking my class how

00:24:21,560 --> 00:24:26,000
many behaviors do you think is in here

00:24:23,360 --> 00:24:30,170
the answers I typically get are either

00:24:26,000 --> 00:24:32,450
two or four when the truth if you look

00:24:30,170 --> 00:24:34,610
here is that there are three and that

00:24:32,450 --> 00:24:38,720
becomes much easier to see in this

00:24:34,610 --> 00:24:40,670
context so CB V's despite the fact that

00:24:38,720 --> 00:24:41,840
we say they're class-based views despite

00:24:40,670 --> 00:24:43,430
the fact that we say are more

00:24:41,840 --> 00:24:47,090
complicated and take a little bit more

00:24:43,430 --> 00:24:50,090
of cut more code can actually be used in

00:24:47,090 --> 00:24:53,420
certain contexts in really interesting

00:24:50,090 --> 00:24:55,220
very helpful ways so part of this if

00:24:53,420 --> 00:24:57,590
you're totally new you may not know why

00:24:55,220 --> 00:25:00,410
I'm defending these quite so much

00:24:57,590 --> 00:25:02,180
there's a certain when they were

00:25:00,410 --> 00:25:04,280
introduced because of the confusion

00:25:02,180 --> 00:25:06,350
around them a lot of people said well

00:25:04,280 --> 00:25:08,780
they're not worth using at all or ever

00:25:06,350 --> 00:25:12,290
and so part of my position is weight

00:25:08,780 --> 00:25:14,510
these are a tool and tools do have

00:25:12,290 --> 00:25:16,640
purposes and can be used in certain

00:25:14,510 --> 00:25:18,200
contexts as long as you understand what

00:25:16,640 --> 00:25:20,630
the tool does and when those contexts

00:25:18,200 --> 00:25:22,940
are so I'm just trying to provide when

00:25:20,630 --> 00:25:26,300
and the context um this allows us to

00:25:22,940 --> 00:25:28,490
sort of look at the the the odd view set

00:25:26,300 --> 00:25:29,960
in in the game which are the generic

00:25:28,490 --> 00:25:31,340
class base use and I'm just going to

00:25:29,960 --> 00:25:33,770
dive right in because there's so much

00:25:31,340 --> 00:25:36,080
here and you can see that this is all of

00:25:33,770 --> 00:25:38,090
model detail now right I've completely

00:25:36,080 --> 00:25:40,280
removed the get method it's nowhere I'm

00:25:38,090 --> 00:25:42,560
just sort of invoke hitting this and

00:25:40,280 --> 00:25:44,150
this is this feels awful because you're

00:25:42,560 --> 00:25:46,190
looking at this you know like well wait

00:25:44,150 --> 00:25:48,020
this is like a game of Mad Libs how do I

00:25:46,190 --> 00:25:50,420
know what to fill in or how to fill it

00:25:48,020 --> 00:25:52,190
in and this gets even worse with with

00:25:50,420 --> 00:25:54,020
the model create I've removed get and

00:25:52,190 --> 00:25:55,610
I've removed post but the attributes are

00:25:54,020 --> 00:25:58,220
exactly the same as they were before and

00:25:55,610 --> 00:25:59,990
I mean at least you have some small

00:25:58,220 --> 00:26:02,720
comfort and saying well it's exactly the

00:25:59,990 --> 00:26:04,430
way it worked before right Andrew no it

00:26:02,720 --> 00:26:06,860
isn't no and and that's sort of the

00:26:04,430 --> 00:26:08,960
problem is is suddenly on our new form

00:26:06,860 --> 00:26:09,680
we now have the put verb which has been

00:26:08,960 --> 00:26:11,420
instantiated

00:26:09,680 --> 00:26:13,010
and you go okay well hold on let me let

00:26:11,420 --> 00:26:15,680
me sit back and go through this what

00:26:13,010 --> 00:26:18,920
does this look like that's the actual

00:26:15,680 --> 00:26:23,450
graph of how all of the generic views

00:26:18,920 --> 00:26:25,220
are related it's really kind of insane

00:26:23,450 --> 00:26:28,480
when I gave my talk at Django Con 2013

00:26:25,220 --> 00:26:31,160
this is the image that I presented um

00:26:28,480 --> 00:26:33,230
you feel you take so much time going oh

00:26:31,160 --> 00:26:36,200
I have no idea what I'm doing I don't

00:26:33,230 --> 00:26:38,780
understand the point really wasn't that

00:26:36,200 --> 00:26:40,760
it's a terrible idea because if you

00:26:38,780 --> 00:26:42,980
start using generic views it turns you

00:26:40,760 --> 00:26:44,750
into a real powerhouse I mean you can

00:26:42,980 --> 00:26:47,780
become a super coder you will leave

00:26:44,750 --> 00:26:49,670
websites in your wake the problem is is

00:26:47,780 --> 00:26:52,100
that you spend so much time doing stuff

00:26:49,670 --> 00:26:53,570
that doesn't make any sense to try and

00:26:52,100 --> 00:26:55,550
get there that it can be really

00:26:53,570 --> 00:26:57,440
frustrating there are tools that are

00:26:55,550 --> 00:27:02,690
very helpful and we'll come back to this

00:26:57,440 --> 00:27:06,890
one but the idea for the idea here is

00:27:02,690 --> 00:27:10,850
that if you're a beginner the idea was

00:27:06,890 --> 00:27:14,090
that by having these B classes we would

00:27:10,850 --> 00:27:16,670
be able to go ahead and extend them and

00:27:14,090 --> 00:27:17,810
by overcomplicating them it's it's

00:27:16,670 --> 00:27:19,850
become a bit of a problem because

00:27:17,810 --> 00:27:22,070
beginners go well how do I extend them

00:27:19,850 --> 00:27:24,500
how do I learn how to go about them and

00:27:22,070 --> 00:27:28,790
unfortunately my advice is that if

00:27:24,500 --> 00:27:30,710
you're a beginner don't write try and

00:27:28,790 --> 00:27:32,180
use them if you see that there is a

00:27:30,710 --> 00:27:35,450
generic class-based view that does

00:27:32,180 --> 00:27:37,490
exactly what you want use it see how you

00:27:35,450 --> 00:27:38,150
just get it to do exactly what it was

00:27:37,490 --> 00:27:40,280
built for

00:27:38,150 --> 00:27:42,110
if you then once you've become

00:27:40,280 --> 00:27:44,420
comfortable with that then begin to go

00:27:42,110 --> 00:27:47,780
oh okay well maybe I can begin to look

00:27:44,420 --> 00:27:49,340
at the methods there's this thing that

00:27:47,780 --> 00:27:50,720
happens you can see it on the mailing

00:27:49,340 --> 00:27:53,330
list I see it a lot in my classes where

00:27:50,720 --> 00:27:57,080
people go oh I would like to use the

00:27:53,330 --> 00:28:00,050
following generic view to do X Y & Z and

00:27:57,080 --> 00:28:03,230
the answer is always well yes you can do

00:28:00,050 --> 00:28:07,520
that but there are better options for

00:28:03,230 --> 00:28:08,570
how you can go about building that I've

00:28:07,520 --> 00:28:10,490
got to felt that was going to get more

00:28:08,570 --> 00:28:12,230
laughs really nice to see a little

00:28:10,490 --> 00:28:15,260
contingency over there okay

00:28:12,230 --> 00:28:17,090
and so that's that's the thing is that

00:28:15,260 --> 00:28:19,070
with with generic views yes you can

00:28:17,090 --> 00:28:21,770
absolutely customize them to do whatever

00:28:19,070 --> 00:28:23,600
it is that you want but maybe it's not

00:28:21,770 --> 00:28:24,770
always the best idea to do that and

00:28:23,600 --> 00:28:27,290
unfortunately the only way to figure

00:28:24,770 --> 00:28:32,300
that out is to get familiar with them

00:28:27,290 --> 00:28:34,820
and that's sort of unfortunate so now

00:28:32,300 --> 00:28:36,080
that we understand really how all of

00:28:34,820 --> 00:28:38,419
these work

00:28:36,080 --> 00:28:41,630
how do we sort of tackle the problem of

00:28:38,419 --> 00:28:43,909
using and building views for the

00:28:41,630 --> 00:28:46,669
function views and all of that jazz I

00:28:43,909 --> 00:28:48,919
think it's fairly straightforward I do

00:28:46,669 --> 00:28:51,500
want to take a quick look at classic

00:28:48,919 --> 00:28:53,750
class-based views because last time I

00:28:51,500 --> 00:28:57,860
presented this and the last few times

00:28:53,750 --> 00:29:00,440
I've given this or similar talks the

00:28:57,860 --> 00:29:02,360
most people go wait could you show the

00:29:00,440 --> 00:29:03,740
tool how does this actually work so

00:29:02,360 --> 00:29:05,720
you're going to show up on this website

00:29:03,740 --> 00:29:08,750
and it's going to show you all of the

00:29:05,720 --> 00:29:11,000
generic views at the top level and you

00:29:08,750 --> 00:29:13,190
can click on any of them and so I'm

00:29:11,000 --> 00:29:16,340
gonna click on detail view and it's

00:29:13,190 --> 00:29:18,799
going to show me all of the classes that

00:29:16,340 --> 00:29:22,100
are related that this view inherits as

00:29:18,799 --> 00:29:25,700
well as it provides a link directly to

00:29:22,100 --> 00:29:27,470
the documentation and below this there

00:29:25,700 --> 00:29:30,230
are the attributes these are all of the

00:29:27,470 --> 00:29:33,289
attributes that I can override including

00:29:30,230 --> 00:29:36,559
their current defaults so that I can see

00:29:33,289 --> 00:29:38,840
exactly what is going on this is really

00:29:36,559 --> 00:29:40,549
where you want to start right if you you

00:29:38,840 --> 00:29:42,679
decide oh I'm going to use a generic

00:29:40,549 --> 00:29:44,450
view I'm gonna go ahead and I'm gonna

00:29:42,679 --> 00:29:45,980
try and figure out what attributes I

00:29:44,450 --> 00:29:48,529
need to define once you're comfortable

00:29:45,980 --> 00:29:50,269
with defining the attributes and going

00:29:48,529 --> 00:29:52,250
okay yeah I can get that behavior by

00:29:50,269 --> 00:29:55,220
changing just attributes you can begin

00:29:52,250 --> 00:29:56,539
to look at the methods right this is

00:29:55,220 --> 00:29:58,639
where you go yep totally comfortable

00:29:56,539 --> 00:30:01,039
with the the attributes but I need to

00:29:58,639 --> 00:30:02,960
just tweak this one thing this allows

00:30:01,039 --> 00:30:05,450
you to see all of the methods that are

00:30:02,960 --> 00:30:08,450
being used you'll typically want to

00:30:05,450 --> 00:30:11,899
start with the methods that the class

00:30:08,450 --> 00:30:14,659
space of you uses right yet post put so

00:30:11,899 --> 00:30:17,029
right here I can just click on yet and

00:30:14,659 --> 00:30:19,250
it will show me the implementation as

00:30:17,029 --> 00:30:20,720
well as tell me where it's actually

00:30:19,250 --> 00:30:23,000
defined because it's not actually

00:30:20,720 --> 00:30:24,049
defined in details view if you look all

00:30:23,000 --> 00:30:29,659
the way to the right you can see it's

00:30:24,049 --> 00:30:31,549
defined in base detail for you and so

00:30:29,659 --> 00:30:34,279
that's that's class-based they're classy

00:30:31,549 --> 00:30:36,500
class-based views and sort of the go-to

00:30:34,279 --> 00:30:40,639
tool for trying to get through generic

00:30:36,500 --> 00:30:42,289
views I'm also when I was build when I

00:30:40,639 --> 00:30:45,710
was writing my book when I was compiling

00:30:42,289 --> 00:30:48,840
my book um I I found that I spent a lot

00:30:45,710 --> 00:30:51,480
of time writing decorators in Django

00:30:48,840 --> 00:30:53,220
to get it to do what I wanted and I'm

00:30:51,480 --> 00:30:56,070
slowly going to be taking them and

00:30:53,220 --> 00:30:57,840
putting them out onto the Internet and

00:30:56,070 --> 00:31:00,210
so I've started a project called Django

00:30:57,840 --> 00:31:02,400
decorator plus I'm a little burnt out

00:31:00,210 --> 00:31:04,529
from book writing to be perfectly honest

00:31:02,400 --> 00:31:08,760
with you and so I haven't gotten as much

00:31:04,529 --> 00:31:11,549
work done on this but I do have my

00:31:08,760 --> 00:31:13,529
replacement for the required

00:31:11,549 --> 00:31:15,510
decorator for function views because I

00:31:13,529 --> 00:31:18,000
think it's silly that the class-based

00:31:15,510 --> 00:31:20,490
views gets you options and head out of

00:31:18,000 --> 00:31:22,890
the box but that the the decorator

00:31:20,490 --> 00:31:24,809
doesn't so I fixed that and I've gone

00:31:22,890 --> 00:31:27,210
ahead and recreated the decorator these

00:31:24,809 --> 00:31:30,029
are two shortcuts for the decorator and

00:31:27,210 --> 00:31:33,659
they're equivalent to just get and get

00:31:30,029 --> 00:31:36,480
posts but again you know I say get but

00:31:33,659 --> 00:31:39,179
that's actually get head options and get

00:31:36,480 --> 00:31:42,510
post is get post head options so I'm

00:31:39,179 --> 00:31:46,409
hoping that that will provide the basis

00:31:42,510 --> 00:31:51,539
for for adhering to HTTP methods or

00:31:46,409 --> 00:31:53,549
adhering to the HTTP spec in function

00:31:51,539 --> 00:31:55,980
views sorry I keep getting distracted by

00:31:53,549 --> 00:31:56,610
the timer which brings us to our

00:31:55,980 --> 00:31:59,460
conclusions

00:31:56,610 --> 00:32:02,370
I want to we can come back to these

00:31:59,460 --> 00:32:05,210
these questions are the yes the

00:32:02,370 --> 00:32:08,010
questions that I was hoping you would

00:32:05,210 --> 00:32:12,240
find easy at this point maybe hopefully

00:32:08,010 --> 00:32:13,500
these these are sort of tackle able if

00:32:12,240 --> 00:32:17,700
that's a word

00:32:13,500 --> 00:32:20,340
so jangle handles HTTP for me why do I

00:32:17,700 --> 00:32:22,799
need to worry about it well as we now

00:32:20,340 --> 00:32:25,080
know it doesn't handle it for you right

00:32:22,799 --> 00:32:27,059
it will translate the HTTP into a nice

00:32:25,080 --> 00:32:29,130
Python object and allows you to

00:32:27,059 --> 00:32:32,700
manipulate all of that data and to to

00:32:29,130 --> 00:32:34,950
easily use that in in Python but it's

00:32:32,700 --> 00:32:36,990
not handling it for you right you are

00:32:34,950 --> 00:32:40,500
still taking care in the URL patterns of

00:32:36,990 --> 00:32:42,360
the URL path to the resource and in

00:32:40,500 --> 00:32:43,919
views you really do want to be

00:32:42,360 --> 00:32:46,770
considering at all points

00:32:43,919 --> 00:32:48,419
what HTTP method is being used and how

00:32:46,770 --> 00:32:50,429
you react to it because otherwise you're

00:32:48,419 --> 00:32:52,770
building an API that is only using part

00:32:50,429 --> 00:32:53,760
of the information and some user on the

00:32:52,770 --> 00:32:56,970
other end it's going to be really

00:32:53,760 --> 00:33:00,210
unhappy with you when is Django

00:32:56,970 --> 00:33:02,940
deprecating function views it's not

00:33:00,210 --> 00:33:05,880
right the the the the idea between

00:33:02,940 --> 00:33:08,670
kind of view is you know except specific

00:33:05,880 --> 00:33:11,760
input provide specific output and any

00:33:08,670 --> 00:33:13,530
callable can can be that and so function

00:33:11,760 --> 00:33:17,480
views are not anything inherent to

00:33:13,530 --> 00:33:20,390
Django and they're not going anywhere

00:33:17,480 --> 00:33:24,210
aren't all class-based views generic

00:33:20,390 --> 00:33:27,840
know hopefully the the walk through

00:33:24,210 --> 00:33:30,300
history helps split the difference right

00:33:27,840 --> 00:33:32,520
the idea is we have generic views and

00:33:30,300 --> 00:33:34,410
that is very much its own concept and

00:33:32,520 --> 00:33:39,090
then we have object views and that is

00:33:34,410 --> 00:33:40,770
very much its own concept and we there

00:33:39,090 --> 00:33:43,200
is some discussion about whether each

00:33:40,770 --> 00:33:45,120
one solves the problem it was designed

00:33:43,200 --> 00:33:47,310
to solve and those are valid

00:33:45,120 --> 00:33:49,890
conversations to have but it's difficult

00:33:47,310 --> 00:33:54,540
to have that conversation if people

00:33:49,890 --> 00:33:56,730
continue to confuse the two finally how

00:33:54,540 --> 00:33:58,410
do I choose what kind of view to use

00:33:56,730 --> 00:34:02,100
this is this is easily the hardest

00:33:58,410 --> 00:34:04,140
question on here and I have a set of

00:34:02,100 --> 00:34:05,880
questions that I ask myself whenever I'm

00:34:04,140 --> 00:34:08,100
building with you and the first is is

00:34:05,880 --> 00:34:10,410
there a generic view that does exactly

00:34:08,100 --> 00:34:12,930
what I want or almost what I want and

00:34:10,410 --> 00:34:15,570
can I simply plug into it if yes use a

00:34:12,930 --> 00:34:18,390
generic view right that's you know it's

00:34:15,570 --> 00:34:19,980
there for just that if there isn't you

00:34:18,390 --> 00:34:21,570
sort of left with the choice between a

00:34:19,980 --> 00:34:23,970
class-based view and a function-based

00:34:21,570 --> 00:34:26,520
view but we now know that there is

00:34:23,970 --> 00:34:28,290
essentially equivalent the only reason

00:34:26,520 --> 00:34:30,240
that you might want to use a class-based

00:34:28,290 --> 00:34:32,730
view is if you have behavior that is

00:34:30,240 --> 00:34:34,590
shared across multiple views at which

00:34:32,730 --> 00:34:37,470
point using object-oriented programming

00:34:34,590 --> 00:34:39,570
is incredibly helpful but if you don't

00:34:37,470 --> 00:34:41,610
it's entirely up to your preference

00:34:39,570 --> 00:34:43,500
right you could use function views or

00:34:41,610 --> 00:34:47,460
class-based views and it doesn't really

00:34:43,500 --> 00:34:48,420
matter which brings me to sort of the

00:34:47,460 --> 00:34:52,350
key takeaways

00:34:48,420 --> 00:34:56,520
the view is Django's solution to

00:34:52,350 --> 00:34:58,830
handling HTTP all views are callable

00:34:56,520 --> 00:35:02,250
color python cobbles it doesn't matter

00:34:58,830 --> 00:35:05,070
um please use the require HTTP methods

00:35:02,250 --> 00:35:07,980
if you are using function methods or at

00:35:05,070 --> 00:35:12,780
least consider how you're handling HTTP

00:35:07,980 --> 00:35:14,770
methods and finally please think of the

00:35:12,780 --> 00:35:16,990
two concepts of generic views

00:35:14,770 --> 00:35:19,900
and class-based views as very different

00:35:16,990 --> 00:35:22,840
very separate thank you very much all

00:35:19,900 --> 00:35:24,580
for coming I hope this was helpful again

00:35:22,840 --> 00:35:26,920
all of the related material is at that

00:35:24,580 --> 00:35:29,800
first link my book is currently

00:35:26,920 --> 00:35:32,860
available for pre-order and it's

00:35:29,800 --> 00:35:35,290
currently discounted Amazon is in charge

00:35:32,860 --> 00:35:37,900
of that and they won't give me an answer

00:35:35,290 --> 00:35:39,550
as to whether the discount remains after

00:35:37,900 --> 00:35:41,740
or if that's simply a pre-order thing

00:35:39,550 --> 00:35:43,180
but it's currently discounted and

00:35:41,740 --> 00:35:44,680
finally at the end of September as I

00:35:43,180 --> 00:35:46,780
mentioned at the beginning or the the

00:35:44,680 --> 00:35:49,180
beginning of October rather I'm going to

00:35:46,780 --> 00:35:51,880
be teaching a class in Django locally as

00:35:49,180 --> 00:35:54,340
a thank you for all coming to this that

00:35:51,880 --> 00:35:57,130
is a promo code that you can use for 20%

00:35:54,340 --> 00:35:59,380
off questions

00:35:57,130 --> 00:36:01,990
I'm also if we're out of time I'm happy

00:35:59,380 --> 00:36:04,570
to take questions in the hallway I have

00:36:01,990 --> 00:36:06,180
I have 40 seconds I'm sorry for I cut

00:36:04,570 --> 00:36:10,030
this so close and that we started late

00:36:06,180 --> 00:36:11,320
are there any questions again feel free

00:36:10,030 --> 00:36:14,220
to just grab me throughout the

00:36:11,320 --> 00:36:19,780
conference if you do at any point I

00:36:14,220 --> 00:36:21,820
think there's a there's a mic based on

00:36:19,780 --> 00:36:23,710
the flexibility of a class-based view

00:36:21,820 --> 00:36:25,780
doesn't it and the fact that it gives

00:36:23,710 --> 00:36:27,460
you all those methods to define kind of

00:36:25,780 --> 00:36:29,560
for free doesn't it make sense to always

00:36:27,460 --> 00:36:31,750
use a class-based view over a function

00:36:29,560 --> 00:36:36,970
view because you'll need to deal with

00:36:31,750 --> 00:36:38,890
other methods um it's it's sort of your

00:36:36,970 --> 00:36:41,950
honestly is really your preference

00:36:38,890 --> 00:36:43,660
because at that point you know it will

00:36:41,950 --> 00:36:45,040
get you head and options but let's say

00:36:43,660 --> 00:36:46,870
that you're using the decorators from

00:36:45,040 --> 00:36:49,360
decorator plus you get that same

00:36:46,870 --> 00:36:51,820
behavior in a function view for just

00:36:49,360 --> 00:36:54,070
calling return and there's so there's

00:36:51,820 --> 00:36:57,400
really very little difference if it's

00:36:54,070 --> 00:36:59,880
really a very very simple view is there

00:36:57,400 --> 00:37:03,340
possibly like a performance optimization

00:36:59,880 --> 00:37:05,950
overhead for you know performance hit

00:37:03,340 --> 00:37:07,570
for using a class method over a function

00:37:05,950 --> 00:37:09,910
in the view class view or a function of

00:37:07,570 --> 00:37:12,250
you there might be a small performance

00:37:09,910 --> 00:37:14,020
it but that's I mean that's not really

00:37:12,250 --> 00:37:15,250
where your performance problems are

00:37:14,020 --> 00:37:16,600
going to be right typically your

00:37:15,250 --> 00:37:22,870
performance problems are going to be in

00:37:16,600 --> 00:37:24,670
IO okay so cool thanks hi so I'm

00:37:22,870 --> 00:37:26,770
wondering about

00:37:24,670 --> 00:37:30,960
you know let's let's say for example you

00:37:26,770 --> 00:37:34,150
have a model or an object of the model

00:37:30,960 --> 00:37:36,280
such as like a task and you know you can

00:37:34,150 --> 00:37:38,349
perform different modifications on it

00:37:36,280 --> 00:37:40,089
right so I guess you would use like an

00:37:38,349 --> 00:37:44,500
update view or something like that as a

00:37:40,089 --> 00:37:47,230
base for you if you wanted to modify it

00:37:44,500 --> 00:37:51,160
in different ways at different stages of

00:37:47,230 --> 00:37:54,400
time do you have a recommendation on how

00:37:51,160 --> 00:37:58,240
you would do that so like you know let's

00:37:54,400 --> 00:38:00,970
say at one point the task is unassigned

00:37:58,240 --> 00:38:02,980
and then you post that it's been

00:38:00,970 --> 00:38:04,990
assigned to a particular person I'm

00:38:02,980 --> 00:38:07,869
thinking of you know a sort of simple

00:38:04,990 --> 00:38:10,000
ticketing system right sure and then the

00:38:07,869 --> 00:38:11,290
person updates it and so they post you

00:38:10,000 --> 00:38:13,660
know the status of it and then

00:38:11,290 --> 00:38:16,059
eventually it gets closed could you

00:38:13,660 --> 00:38:18,099
handle all of that in a single class or

00:38:16,059 --> 00:38:21,250
would you split it into different URLs

00:38:18,099 --> 00:38:23,619
do you have any thoughts on that that

00:38:21,250 --> 00:38:25,180
depends entirely on how you want to

00:38:23,619 --> 00:38:27,700
handle it you certainly could have a

00:38:25,180 --> 00:38:32,589
single edit view where you can change

00:38:27,700 --> 00:38:36,339
all of this all of the the fields on the

00:38:32,589 --> 00:38:38,260
model you certainly could have multiple

00:38:36,339 --> 00:38:40,270
right you you might just have one where

00:38:38,260 --> 00:38:44,619
you click on it and it immediately

00:38:40,270 --> 00:38:47,230
updates and changes a status flag so

00:38:44,619 --> 00:38:49,210
it's sort of up to you I may be

00:38:47,230 --> 00:38:50,730
misunderstanding the the question though

00:38:49,210 --> 00:38:54,059
I'm not super clear on all the details

00:38:50,730 --> 00:38:56,619
I'm happy to talk about it afterwards

00:38:54,059 --> 00:38:58,299
thank you all very very much for coming

00:38:56,619 --> 00:39:00,160
I hope that was helpful feel free to

00:38:58,299 --> 00:39:03,660
grab me during the conference if you

00:39:00,160 --> 00:39:03,660

YouTube URL: https://www.youtube.com/watch?v=BJiOERA49ZQ


