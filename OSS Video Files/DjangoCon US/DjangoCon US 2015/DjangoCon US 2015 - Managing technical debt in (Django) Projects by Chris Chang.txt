Title: DjangoCon US 2015 - Managing technical debt in (Django) Projects by Chris Chang
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	Managing technical debt in (Django) Projects by Chris Chang

We talk about testing, code quality, and coverage. But why? Because we want to spend less time dealing with technical debt and more time creating new technical debt (aka new features). Many times, we think we made the obvious smart decision only to regret it later; you discovered you’re damned if you do, damned if you don’t. Should you write a monolithic app or tangle of microservices? They’re all terrible worlds we’ve made for ourselves. Having maintained, inherited, and created several large Django projects, I hope to share my experience so you don’t have to go through the same pains I did.

We’ll start off with a few minutes covering basics like testing, coverage and how they relate to the long term health of a project. Now, everyone knowing the same terminology, we move on to learning to recognize the many early warning signs and smells of excessive technical debt. The most important thing, and most of the material is about setting up the organizational structure for dealing with technical debt: code review, continuous integration, rotating developers (no silos), tradeoffs, making sure you have processes for onboarding new developers, and strategies for documentation. It’s changes like these that end up keeping things moving, not writing “better” code.

Finally, we’ll wrap up with a few minutes talking about Django specific tips: don’t customize the admin, tricks for naming things, signals, organizing tests, and more. Much of this comes from my time at The Texas Tribune, where we needed Django projects launched the next day, all while maintaining a 6 year old Django project.

Help us caption & translate this video!

http://amara.org/v/HHp4/
Captions: 
	00:00:15,680 --> 00:00:23,930
I'm Chris Chang you can find me on

00:00:19,650 --> 00:00:33,000
github at CRC check my twitter handle is

00:00:23,930 --> 00:00:35,960
CCR RCC RCC are are you can also find me

00:00:33,000 --> 00:00:38,070
on IMDB I'm Christian too

00:00:35,960 --> 00:00:41,780
I'm also looking for more Pinterest

00:00:38,070 --> 00:00:44,879
friends I am I am cPanel on Pinterest I

00:00:41,780 --> 00:00:45,930
currently work at tabbed out but a lot

00:00:44,879 --> 00:00:49,110
of the knowledge that I'm going to be

00:00:45,930 --> 00:00:52,379
sharing is things I've learned from a

00:00:49,110 --> 00:00:53,460
lot of time at the Texas Tribune - you

00:00:52,379 --> 00:00:55,050
may have seen a lot of other texted

00:00:53,460 --> 00:01:01,020
ripping people around oh I see some

00:00:55,050 --> 00:01:03,480
right there so everyone always starts

00:01:01,020 --> 00:01:07,080
off talks like this with dictionary

00:01:03,480 --> 00:01:08,460
definitions wikipedia says technical

00:01:07,080 --> 00:01:11,369
debt can be thought of as work that

00:01:08,460 --> 00:01:14,060
needs to be done before a particular job

00:01:11,369 --> 00:01:17,400
can be considered complete or proper and

00:01:14,060 --> 00:01:19,560
then something Jean Kim says is left

00:01:17,400 --> 00:01:21,869
unchecked technical debt will ensure

00:01:19,560 --> 00:01:27,119
that the only work that gets done is

00:01:21,869 --> 00:01:28,619
unplanned work another thing Jean Jean

00:01:27,119 --> 00:01:31,799
Kim says about technical debt is that

00:01:28,619 --> 00:01:35,579
it's what you feel the next time you

00:01:31,799 --> 00:01:37,560
want to make a change and for me

00:01:35,579 --> 00:01:42,000
personally a technical debt is every

00:01:37,560 --> 00:01:45,060
line of code and just in case you were

00:01:42,000 --> 00:01:47,759
curious I checked and urban dictionary

00:01:45,060 --> 00:01:50,369
does not have a definition for technical

00:01:47,759 --> 00:01:52,920
tip I also think it's important to just

00:01:50,369 --> 00:01:55,649
know about what technical it feels like

00:01:52,920 --> 00:01:58,469
and it's when you fix one bug only to

00:01:55,649 --> 00:02:00,649
create another bug and it's when you

00:01:58,469 --> 00:02:02,460
can't even deliver features anymore

00:02:00,649 --> 00:02:04,820
because you don't know what

00:02:02,460 --> 00:02:08,099
repercussions your change will have and

00:02:04,820 --> 00:02:10,500
it can get so bad where you can't even

00:02:08,099 --> 00:02:13,550
install security patches because you

00:02:10,500 --> 00:02:13,550
don't know what will break

00:02:14,830 --> 00:02:19,220
and it's when you're using a rapid

00:02:17,690 --> 00:02:23,780
development framework and you can't

00:02:19,220 --> 00:02:24,800
rapidly develop it's when you hear a lot

00:02:23,780 --> 00:02:27,500
of it works for me

00:02:24,800 --> 00:02:32,090
around the office every time you're

00:02:27,500 --> 00:02:33,410
trying to replicate something and the

00:02:32,090 --> 00:02:35,480
great thing about Django is it does let

00:02:33,410 --> 00:02:38,480
you build things very quickly but it can

00:02:35,480 --> 00:02:44,900
also get you into this technical debt

00:02:38,480 --> 00:02:48,290
trap and the main thing that I learned

00:02:44,900 --> 00:02:52,040
is that you don't want to let Django

00:02:48,290 --> 00:02:56,570
become the scapegoat for your team's

00:02:52,040 --> 00:02:58,880
inability to develop new features and

00:02:56,570 --> 00:03:01,310
the last thing about technical that is

00:02:58,880 --> 00:03:06,590
it's it's like when everything is on

00:03:01,310 --> 00:03:13,790
fire all the time and this is this is

00:03:06,590 --> 00:03:18,160
your life so like there's no magic trip

00:03:13,790 --> 00:03:22,670
tips for how to clean and technical debt

00:03:18,160 --> 00:03:25,370
so anyways here's some tips I've kind of

00:03:22,670 --> 00:03:27,830
organized them from things you can do on

00:03:25,370 --> 00:03:30,530
your own the things that you can do

00:03:27,830 --> 00:03:32,360
amongst your team and finally things

00:03:30,530 --> 00:03:34,370
that require going outside your team and

00:03:32,360 --> 00:03:43,880
to the non-technical people in your

00:03:34,370 --> 00:03:45,890
organization so first scene is Django

00:03:43,880 --> 00:03:47,630
testing you should you should do it

00:03:45,890 --> 00:03:51,019
there's three other sessions at Jenga

00:03:47,630 --> 00:03:53,390
con about testing don't let your dreams

00:03:51,019 --> 00:03:57,470
be dreams yesterday you said you would

00:03:53,390 --> 00:04:04,660
write tests today so just do it make

00:03:57,470 --> 00:04:08,950
your dreams come true just just do it so

00:04:04,660 --> 00:04:12,070
when should you write a test because a

00:04:08,950 --> 00:04:14,330
lot of times a lot of people will just

00:04:12,070 --> 00:04:17,410
there's a lot of I find that there's a

00:04:14,330 --> 00:04:20,539
lot of looked intest in the first place

00:04:17,410 --> 00:04:23,300
so maybe if you can ease people in that

00:04:20,539 --> 00:04:24,860
would help a lot and something that I

00:04:23,300 --> 00:04:25,860
always thought was if you're making an

00:04:24,860 --> 00:04:27,180
assumption

00:04:25,860 --> 00:04:30,139
that's a good sign that you should be

00:04:27,180 --> 00:04:34,860
running tests to check that assumption

00:04:30,139 --> 00:04:36,389
and I can I could see justify not

00:04:34,860 --> 00:04:40,199
writing a lot of tests upfront like

00:04:36,389 --> 00:04:41,729
doing TDD a lot of people might consider

00:04:40,199 --> 00:04:43,889
that premature optimization to be

00:04:41,729 --> 00:04:47,159
dividing a lot of tests upfront but if

00:04:43,889 --> 00:04:50,129
you're doing that you should do at least

00:04:47,159 --> 00:04:53,159
be doing regression testing as a wise

00:04:50,129 --> 00:04:58,669
man once said fool me once shame on you

00:04:53,159 --> 00:05:01,889
fool me you can't get fooled again and

00:04:58,669 --> 00:05:05,150
you will get you will sleep better when

00:05:01,889 --> 00:05:07,289
you have good test coverage it's a fact

00:05:05,150 --> 00:05:09,750
so I want to give an example about

00:05:07,289 --> 00:05:11,370
testing your assumption let's say I had

00:05:09,750 --> 00:05:15,870
a function where I just wanted to turn

00:05:11,370 --> 00:05:18,779
in a zip plus 9 or a zip a u.s. postal

00:05:15,870 --> 00:05:20,370
zip I just won in the first 5 so that's

00:05:18,779 --> 00:05:22,919
pretty easy I mean I just gonna it's a

00:05:20,370 --> 00:05:25,740
strain oh let's take the first 5 but if

00:05:22,919 --> 00:05:28,110
you look at these examples I've set up

00:05:25,740 --> 00:05:29,669
and I've written this as in the form of

00:05:28,110 --> 00:05:32,909
a doc test which I personally don't use

00:05:29,669 --> 00:05:34,039
but if it's nice on the slide you start

00:05:32,909 --> 00:05:36,750
to see it at the bottom

00:05:34,039 --> 00:05:40,409
my assumption that taking the first five

00:05:36,750 --> 00:05:44,060
digits falls apart and if you had tests

00:05:40,409 --> 00:05:46,699
then it'll you'll be able to catch that

00:05:44,060 --> 00:05:49,580
and if you don't have a single test

00:05:46,699 --> 00:05:52,319
here's one that someone posted recently

00:05:49,580 --> 00:05:54,990
and that's if you just use the client to

00:05:52,319 --> 00:05:57,330
load your homepage I don't have the

00:05:54,990 --> 00:06:00,889
facts to back it up but you'll get 80%

00:05:57,330 --> 00:06:00,889
discover just for this one test

00:06:04,640 --> 00:06:13,770
and the the thing that I really like is

00:06:10,620 --> 00:06:16,370
is if you like to feature you better

00:06:13,770 --> 00:06:16,370
write a test for it

00:06:19,430 --> 00:06:23,820
so coverage is another great tool for

00:06:22,230 --> 00:06:27,030
just helping you discover where you

00:06:23,820 --> 00:06:28,500
should be with your missing tests and a

00:06:27,030 --> 00:06:31,830
lot of organizations will strive to get

00:06:28,500 --> 00:06:34,410
100% coverage but it's more important

00:06:31,830 --> 00:06:38,760
that your tests are quality just for

00:06:34,410 --> 00:06:41,460
writing a test to get for example just

00:06:38,760 --> 00:06:45,450
checking the Unicode method of a model

00:06:41,460 --> 00:06:48,800
may or may not actually be useful you'll

00:06:45,450 --> 00:06:48,800
have to find that on your own

00:06:48,890 --> 00:06:54,630
so some signs that your your tests are

00:06:52,080 --> 00:06:57,930
crappy one is it like can other people

00:06:54,630 --> 00:06:59,580
read and extend your tests will they

00:06:57,930 --> 00:07:02,450
take your tests and use it as a template

00:06:59,580 --> 00:07:04,740
for their own tests and be happy with it

00:07:02,450 --> 00:07:06,030
are the tests getting maintained

00:07:04,740 --> 00:07:08,700
whenever the code is beginning maintain

00:07:06,030 --> 00:07:10,050
or are people looking in frustrated

00:07:08,700 --> 00:07:13,410
because they have to also maintain the

00:07:10,050 --> 00:07:14,640
tests and the tests described the

00:07:13,410 --> 00:07:17,100
problem in a way where you could throw

00:07:14,640 --> 00:07:19,770
away the code and people could use the

00:07:17,100 --> 00:07:22,110
test to rebuild the code and it's not

00:07:19,770 --> 00:07:24,000
only the tests but the same could be

00:07:22,110 --> 00:07:25,860
said about your documentation and maybe

00:07:24,000 --> 00:07:28,140
even your readme could you throw away

00:07:25,860 --> 00:07:29,400
all your code and could someone use the

00:07:28,140 --> 00:07:35,790
readme to reconstruct your entire

00:07:29,400 --> 00:07:40,140
application another thing that's a big

00:07:35,790 --> 00:07:43,919
source of technical debt is bit rot also

00:07:40,140 --> 00:07:46,020
known as software entropy and I think

00:07:43,919 --> 00:07:48,480
that if you're not actively touching a

00:07:46,020 --> 00:07:52,590
piece of code it's getting worse just

00:07:48,480 --> 00:07:53,820
lying around it's also a sign for me as

00:07:52,590 --> 00:07:55,770
the smell as an organization if you

00:07:53,820 --> 00:07:58,830
don't have the manpower to actively

00:07:55,770 --> 00:08:02,669
maintain all of your code and if you're

00:07:58,830 --> 00:08:05,790
interested in in this kind of learning

00:08:02,669 --> 00:08:09,180
more about this there's a series of

00:08:05,790 --> 00:08:13,200
management books called the improvement

00:08:09,180 --> 00:08:14,370
kata also known as the Toyota kata every

00:08:13,200 --> 00:08:15,960
time I research that the

00:08:14,370 --> 00:08:17,370
all I got was a bunch of marketing

00:08:15,960 --> 00:08:21,470
seminars that were trying to sell me

00:08:17,370 --> 00:08:21,470
something but maybe you'll a better look

00:08:22,190 --> 00:08:28,530
so if you imagine your code if your

00:08:25,590 --> 00:08:32,930
organization as as a globe are there

00:08:28,530 --> 00:08:35,490
areas where there's like here be dragons

00:08:32,930 --> 00:08:37,710
where people just don't know what that

00:08:35,490 --> 00:08:42,479
code is and they don't want to touch it

00:08:37,710 --> 00:08:44,940
no one knows what it is that's why it's

00:08:42,479 --> 00:08:46,880
born that everyone at throw organization

00:08:44,940 --> 00:08:51,660
knows as much as the code as possible

00:08:46,880 --> 00:08:53,550
and one tool that will help developers

00:08:51,660 --> 00:08:58,080
be more a lot more productive in this is

00:08:53,550 --> 00:09:00,260
continuous integration one quote that I

00:08:58,080 --> 00:09:02,339
made up based off of this other quote is

00:09:00,260 --> 00:09:04,589
any tasks you do at least once a month

00:09:02,339 --> 00:09:09,200
should take less time than it takes to

00:09:04,589 --> 00:09:10,830
get a cup of coffee there's a post

00:09:09,200 --> 00:09:14,550
different oh it's been there the whole

00:09:10,830 --> 00:09:19,020
time there's a sky here that is a really

00:09:14,550 --> 00:09:21,060
great intro to a lot of CI tools some

00:09:19,020 --> 00:09:23,459
that I particularly like are Jenkins if

00:09:21,060 --> 00:09:26,520
you're doing stuff yourself Travis CI is

00:09:23,459 --> 00:09:27,930
really great if you're doing open-source

00:09:26,520 --> 00:09:31,290
stuff it's a great thing much I have CI

00:09:27,930 --> 00:09:33,930
is you can even do like post GIS testing

00:09:31,290 --> 00:09:36,270
I didn't know you could do that till

00:09:33,930 --> 00:09:38,640
last year and I think it's great that a

00:09:36,270 --> 00:09:42,750
free tool will let you write tests that

00:09:38,640 --> 00:09:46,500
require post jizz talks is another great

00:09:42,750 --> 00:09:47,910
tool it'll help you Piku run your test

00:09:46,500 --> 00:09:51,390
suite against different versions of

00:09:47,910 --> 00:09:53,190
Python and Django just to know we'll the

00:09:51,390 --> 00:09:55,339
next version of Django break my tool or

00:09:53,190 --> 00:09:55,339
not

00:09:56,930 --> 00:10:02,550
here's an xkcd I really like that just

00:09:59,310 --> 00:10:07,620
basically tells you whether or not it's

00:10:02,550 --> 00:10:10,260
worth to automate a task and here's the

00:10:07,620 --> 00:10:11,730
here's the opposite if kcd saying that

00:10:10,260 --> 00:10:13,910
you should never automate the task I

00:10:11,730 --> 00:10:13,910
guess

00:10:17,420 --> 00:10:24,000
Soko quality is also a really basic

00:10:20,040 --> 00:10:26,450
thing there's a difference between a

00:10:24,000 --> 00:10:29,060
senior developer and a junior developer

00:10:26,450 --> 00:10:32,970
practice makes perfect

00:10:29,060 --> 00:10:34,710
always iterate on your code a great

00:10:32,970 --> 00:10:39,810
thing to help with this is just working

00:10:34,710 --> 00:10:43,530
on open source projects keep your code

00:10:39,810 --> 00:10:48,600
simple code that requires less context

00:10:43,530 --> 00:10:52,020
to read is more understandable so by

00:10:48,600 --> 00:10:53,910
keeping things simple I don't mean keep

00:10:52,020 --> 00:10:55,650
your feature set as dumbed down as

00:10:53,910 --> 00:10:57,480
possible you can do fancy stuff in your

00:10:55,650 --> 00:11:00,090
code as long as it's a pattern that's

00:10:57,480 --> 00:11:01,230
reused across your codebase and that the

00:11:00,090 --> 00:11:04,740
people are working with are also

00:11:01,230 --> 00:11:08,610
familiar with it for example if you're

00:11:04,740 --> 00:11:14,880
in a Django project and you're using

00:11:08,610 --> 00:11:16,410
pandas to do some filtering that may not

00:11:14,880 --> 00:11:18,870
be simple but if everyone on your team

00:11:16,410 --> 00:11:20,190
is also a data scientist that may be the

00:11:18,870 --> 00:11:25,530
most obvious tool for everyone on the

00:11:20,190 --> 00:11:30,720
team like avoid still fake special

00:11:25,530 --> 00:11:33,030
snowflake patterns I always choose

00:11:30,720 --> 00:11:36,720
readability over performance let the

00:11:33,030 --> 00:11:39,300
tools catch up to the Kogan style not

00:11:36,720 --> 00:11:41,430
the other way around like it's not like

00:11:39,300 --> 00:11:44,250
python is being directly executed by

00:11:41,430 --> 00:11:46,890
your computer anyways and the great

00:11:44,250 --> 00:11:49,470
thing is python has something built-in

00:11:46,890 --> 00:11:53,490
called import this and if you've never

00:11:49,470 --> 00:11:55,640
run it this is what it looks like except

00:11:53,490 --> 00:12:00,050
by I was just wondering if anyone else

00:11:55,640 --> 00:12:00,050
constantly misspells import like I do I

00:12:00,650 --> 00:12:06,990
cut it off but import this will just

00:12:04,800 --> 00:12:10,140
give you the Zen of Python by 10 Peters

00:12:06,990 --> 00:12:13,080
and I actually a how to print it out put

00:12:10,140 --> 00:12:14,280
it by my desk and if you're looking at a

00:12:13,080 --> 00:12:16,320
piece of code and you're wondering what

00:12:14,280 --> 00:12:19,970
you should be doing with it it's good to

00:12:16,320 --> 00:12:19,970
have this in the back of your mind to

00:12:20,480 --> 00:12:26,750
here's here's an example of two ways to

00:12:24,300 --> 00:12:30,120
do the same thing let's say I've got a

00:12:26,750 --> 00:12:34,740
interval of objects and I want to get

00:12:30,120 --> 00:12:36,450
the Instagram app attribute out I really

00:12:34,740 --> 00:12:40,860
love functional style so I personally

00:12:36,450 --> 00:12:44,040
love using map but every time I do it in

00:12:40,860 --> 00:12:45,390
code review my teammates say I should

00:12:44,040 --> 00:12:48,320
just use a list comprehension

00:12:45,390 --> 00:12:52,620
so I guess no I do a list comprehension

00:12:48,320 --> 00:12:55,370
but I guess just look at this in like

00:12:52,620 --> 00:13:01,320
right now and just see which one looks

00:12:55,370 --> 00:13:04,680
more readable to you and there's so much

00:13:01,320 --> 00:13:06,060
discussion around code quality here are

00:13:04,680 --> 00:13:08,250
some like keywords you can look up

00:13:06,060 --> 00:13:10,730
there's like whether or not comments

00:13:08,250 --> 00:13:12,960
actually help or hurt code readability

00:13:10,730 --> 00:13:15,690
there's something a real-life called

00:13:12,960 --> 00:13:18,330
cyclomatic complexity the great thing is

00:13:15,690 --> 00:13:21,240
that is you can quantify readability and

00:13:18,330 --> 00:13:23,910
if you throw this into something like a

00:13:21,240 --> 00:13:27,510
Jenkins job you can actually track how

00:13:23,910 --> 00:13:31,560
readable your code is over time there's

00:13:27,510 --> 00:13:35,640
a whole paid discussion and PI flakes is

00:13:31,560 --> 00:13:38,820
kind of an extension to that and so I

00:13:35,640 --> 00:13:40,709
mention code review code review is

00:13:38,820 --> 00:13:43,470
probably the single most practical way

00:13:40,709 --> 00:13:45,300
that you as a team can get better a lot

00:13:43,470 --> 00:13:48,330
of people say though that people take

00:13:45,300 --> 00:13:51,690
too much time to review and people just

00:13:48,330 --> 00:13:53,310
want to like deliver and some people may

00:13:51,690 --> 00:13:57,450
say like I'm the boss or I'm the big

00:13:53,310 --> 00:13:59,209
boss I don't need a code review or like

00:13:57,450 --> 00:14:02,220
we need to push this hotfix out ASAP

00:13:59,209 --> 00:14:05,910
but we all know that coding and a

00:14:02,220 --> 00:14:11,490
pressure is the best and it's always

00:14:05,910 --> 00:14:13,950
always perfect let's say you're you're a

00:14:11,490 --> 00:14:17,640
team of one person can you still do code

00:14:13,950 --> 00:14:22,470
review you you can't I guess what I do a

00:14:17,640 --> 00:14:25,529
lot is I'll sleep on a change just

00:14:22,470 --> 00:14:30,080
opening a pull request puts all the code

00:14:25,529 --> 00:14:33,330
in front of you it gives you a new a new

00:14:30,080 --> 00:14:36,720
view of everything you'll discover

00:14:33,330 --> 00:14:38,730
patterns that work oh why did I name it

00:14:36,720 --> 00:14:41,010
one way up here and change the name down

00:14:38,730 --> 00:14:42,420
here that's things you can't see on a

00:14:41,010 --> 00:14:43,439
commit buy commit level but you'll be

00:14:42,420 --> 00:14:48,089
able to catch

00:14:43,439 --> 00:14:49,979
on a pull request and if you just want

00:14:48,089 --> 00:14:53,579
to practice you can practice with others

00:14:49,979 --> 00:14:56,459
on an open-source project and this quote

00:14:53,579 --> 00:14:59,039
I really like it's as iron sharpens iron

00:14:56,459 --> 00:15:02,039
so does one person sharpens another

00:14:59,039 --> 00:15:05,970
and that really applies when I think

00:15:02,039 --> 00:15:09,989
with code reviews and to do a code

00:15:05,970 --> 00:15:12,049
review you do a pull request usually and

00:15:09,989 --> 00:15:14,039
the general rule about pull requests is

00:15:12,049 --> 00:15:15,720
well a lot of people would say the best

00:15:14,039 --> 00:15:18,389
practice for blow requests is one pull

00:15:15,720 --> 00:15:21,359
request is only one change and I am

00:15:18,389 --> 00:15:22,439
saying I if you want to reduce tetryl

00:15:21,359 --> 00:15:27,329
debt you should you should Bend this

00:15:22,439 --> 00:15:30,269
rule there's something I learned called

00:15:27,329 --> 00:15:32,879
the Boy Scout rule and I thought it was

00:15:30,269 --> 00:15:34,799
do a good turn daily and I wasn't sure

00:15:32,879 --> 00:15:36,779
what that had to do with pour requests

00:15:34,799 --> 00:15:38,459
and then I thought it was like be

00:15:36,779 --> 00:15:41,129
prepared and I wasn't sure how that

00:15:38,459 --> 00:15:43,799
worked either but it turns out that the

00:15:41,129 --> 00:15:47,970
Boy Scout Boy Scout rule is based off

00:15:43,799 --> 00:15:50,159
the quote from Robert baden-powell leave

00:15:47,970 --> 00:15:52,769
the world a little better than you found

00:15:50,159 --> 00:15:54,449
it and the idea is if you're in the pull

00:15:52,769 --> 00:15:57,689
request and you're going in and you see

00:15:54,449 --> 00:15:59,209
typos just go ahead and fix them if you

00:15:57,689 --> 00:16:02,009
see like little mistakes here in there

00:15:59,209 --> 00:16:03,119
go ahead and fix them wider in the code

00:16:02,009 --> 00:16:06,239
while they're right there in front of

00:16:03,119 --> 00:16:08,129
you and the cutoff for this though I

00:16:06,239 --> 00:16:10,199
would say is if you start having to mess

00:16:08,129 --> 00:16:12,809
with tests while you're doing this

00:16:10,199 --> 00:16:15,269
that's a sign that this little change

00:16:12,809 --> 00:16:17,279
you're making is gonna be it's gonna

00:16:15,269 --> 00:16:19,649
actually hurt the readability of the DIF

00:16:17,279 --> 00:16:22,429
enough of the poor quests where you

00:16:19,649 --> 00:16:27,959
should leave it alone open a ticket

00:16:22,429 --> 00:16:32,009
revisit it later and code review is also

00:16:27,959 --> 00:16:33,209
a lot more than just reviewing code when

00:16:32,009 --> 00:16:35,639
you're reviewing code you should also be

00:16:33,209 --> 00:16:39,809
making sure that what the code is doing

00:16:35,639 --> 00:16:42,029
is repeatable I guess for example of

00:16:39,809 --> 00:16:45,299
that is I wrote this utility last week

00:16:42,029 --> 00:16:48,359
and I was trying to run it and it wasn't

00:16:45,299 --> 00:16:50,249
working so I went back to the poor

00:16:48,359 --> 00:16:52,649
request to edit it and discover that I

00:16:50,249 --> 00:16:55,199
was using the utility in the completely

00:16:52,649 --> 00:16:56,970
wrong way but I had a documented in the

00:16:55,199 --> 00:17:02,519
pull request what

00:16:56,970 --> 00:17:06,510
right way to use it was and also along

00:17:02,519 --> 00:17:07,589
with code is documentation for example

00:17:06,510 --> 00:17:11,280
if you're adding a new feature to your

00:17:07,589 --> 00:17:12,809
CMS there's users for that CMS you have

00:17:11,280 --> 00:17:16,260
to make sure that they know that this

00:17:12,809 --> 00:17:19,589
change is coming and they know you have

00:17:16,260 --> 00:17:21,780
to educate them about the changes that

00:17:19,589 --> 00:17:24,689
are upcoming I think it said that and

00:17:21,780 --> 00:17:27,839
then there's also just is this code

00:17:24,689 --> 00:17:29,220
maintainable does the feature you're

00:17:27,839 --> 00:17:33,090
adding justifier the technical debt that

00:17:29,220 --> 00:17:37,740
you're adding for example you may decide

00:17:33,090 --> 00:17:43,289
that to get this in the template you use

00:17:37,740 --> 00:17:45,270
a template tag but then during code

00:17:43,289 --> 00:17:48,330
review you may decide wait a second you

00:17:45,270 --> 00:17:53,580
can just use as this jQuery one-liner to

00:17:48,330 --> 00:17:56,280
do the same thing and that's exam an

00:17:53,580 --> 00:17:58,590
example of doing like two things one

00:17:56,280 --> 00:18:00,539
with significantly more technical debt

00:17:58,590 --> 00:18:01,650
than the other and if you're really

00:18:00,539 --> 00:18:04,080
interested in code review

00:18:01,650 --> 00:18:07,679
I think Raymond head ensures beyond Pepe

00:18:04,080 --> 00:18:11,299
talk is really great it is the most

00:18:07,679 --> 00:18:17,280
hyped talk that I've ever heard I think

00:18:11,299 --> 00:18:19,470
and I think it justifies it and going

00:18:17,280 --> 00:18:21,600
back to how if something has been

00:18:19,470 --> 00:18:23,970
maintainable or not there's something

00:18:21,600 --> 00:18:26,070
that I liked doing on my pull requests

00:18:23,970 --> 00:18:28,140
at The Texas Tribune and that's I would

00:18:26,070 --> 00:18:32,669
add a technical debt note and the basis

00:18:28,140 --> 00:18:34,289
of that is on fiscal bills they would

00:18:32,669 --> 00:18:36,419
have something called a fiscal note and

00:18:34,289 --> 00:18:38,179
I'll read with the Legislative Budget

00:18:36,419 --> 00:18:42,419
board of Texas says about that and just

00:18:38,179 --> 00:18:45,419
substitute in your head the typical pull

00:18:42,419 --> 00:18:47,159
request version a fiscal note is a

00:18:45,419 --> 00:18:49,590
written estimate of the cost savings

00:18:47,159 --> 00:18:51,750
revenue gained or revenue loss that may

00:18:49,590 --> 00:18:53,460
result from implementation of

00:18:51,750 --> 00:18:55,919
requirements in a bill or Joint

00:18:53,460 --> 00:18:58,320
Resolution it serves as a tool to help

00:18:55,919 --> 00:19:01,280
legislators better understand how a bill

00:18:58,320 --> 00:19:04,710
might impact the state budget as a whole

00:19:01,280 --> 00:19:07,050
individual indices and in some instances

00:19:04,710 --> 00:19:10,290
local governments

00:19:07,050 --> 00:19:11,340
so you can see the idea is that when

00:19:10,290 --> 00:19:12,510
you're building code you have to make

00:19:11,340 --> 00:19:19,800
sure that you can deliver it over the

00:19:12,510 --> 00:19:24,030
long term and probably the best way to

00:19:19,800 --> 00:19:25,890
actually really accelerate the code

00:19:24,030 --> 00:19:30,980
review process is its pair pair

00:19:25,890 --> 00:19:33,510
programming it's like a code review but

00:19:30,980 --> 00:19:37,740
instead of having to wait for someone to

00:19:33,510 --> 00:19:39,930
comment and then you're like right next

00:19:37,740 --> 00:19:42,000
to them and it only takes a few seconds

00:19:39,930 --> 00:19:44,100
my preferred tools for doing this are

00:19:42,000 --> 00:19:47,250
team mates in vim but you can also just

00:19:44,100 --> 00:19:52,770
stand next to each other not stand or

00:19:47,250 --> 00:19:55,700
sit and just be on the same you could

00:19:52,770 --> 00:20:00,930
even be on the same machine in this case

00:19:55,700 --> 00:20:05,940
the human is a driver and the cat is the

00:20:00,930 --> 00:20:07,200
navigator and there's also a variation

00:20:05,940 --> 00:20:08,490
of this that I've learned about I've

00:20:07,200 --> 00:20:11,280
never tried it but I'm curious about it

00:20:08,490 --> 00:20:13,740
it's called ping pong pair grameen and

00:20:11,280 --> 00:20:15,390
so where one person writes a test then

00:20:13,740 --> 00:20:17,690
the other person implements the tests

00:20:15,390 --> 00:20:20,100
and then they swap it back and forth and

00:20:17,690 --> 00:20:22,130
the difference one difference is that

00:20:20,100 --> 00:20:24,420
with ping pong pair programming

00:20:22,130 --> 00:20:25,770
it's actually an async process you don't

00:20:24,420 --> 00:20:31,890
actually have to be there next to each

00:20:25,770 --> 00:20:34,170
other so you can do it

00:20:31,890 --> 00:20:37,590
I mean you won't have that as tight as a

00:20:34,170 --> 00:20:40,620
feedback loop as actually being next to

00:20:37,590 --> 00:20:43,050
each other but you can get close to true

00:20:40,620 --> 00:20:47,520
Peregrine's programming without without

00:20:43,050 --> 00:20:51,770
that and it's also very important that

00:20:47,520 --> 00:20:51,770
you just get along with your teammates

00:20:52,280 --> 00:20:59,100
when you're hiring you should make sure

00:20:56,280 --> 00:21:02,880
that you only hire people that you get

00:20:59,100 --> 00:21:05,190
along with I know back at the Tribune we

00:21:02,880 --> 00:21:07,650
assume that once people came to us they

00:21:05,190 --> 00:21:11,120
were typically proficient and at that

00:21:07,650 --> 00:21:13,410
point we just hired them based off of

00:21:11,120 --> 00:21:16,730
whether or not we were to get along with

00:21:13,410 --> 00:21:16,730
them hi Liam

00:21:16,930 --> 00:21:29,920
and I would say that the worst co-worker

00:21:20,620 --> 00:21:32,890
ever is probably past you so now going

00:21:29,920 --> 00:21:35,020
outside the organization I mentioned

00:21:32,890 --> 00:21:37,510
this a few times already about any any

00:21:35,020 --> 00:21:39,580
action you can take to get a faster

00:21:37,510 --> 00:21:43,210
feedback loop over every action in every

00:21:39,580 --> 00:21:46,000
change is something that you're gonna

00:21:43,210 --> 00:21:48,490
try and do want to do you should learn

00:21:46,000 --> 00:21:53,410
how to say no I shall learn how to

00:21:48,490 --> 00:21:55,840
embrace failure as an organization you

00:21:53,410 --> 00:21:58,930
should what I like to do is try to make

00:21:55,840 --> 00:22:00,400
myself obsolete I think you should

00:21:58,930 --> 00:22:04,300
always work like you're training your

00:22:00,400 --> 00:22:07,090
replacement and the idea behind that is

00:22:04,300 --> 00:22:08,830
that if you're automating away all the

00:22:07,090 --> 00:22:11,790
routine stuff you have to do it frees

00:22:08,830 --> 00:22:15,940
you up to do the more creative things

00:22:11,790 --> 00:22:19,650
and can you go on a vacation or a

00:22:15,940 --> 00:22:19,650
conference without bringing your laptop

00:22:21,330 --> 00:22:28,360
and as an organization you should admit

00:22:24,070 --> 00:22:29,530
that technical debt is a problem that

00:22:28,360 --> 00:22:33,370
way you can start treating technical

00:22:29,530 --> 00:22:35,830
debt as a ticket to be worked on instead

00:22:33,370 --> 00:22:37,920
of something that just swept under the

00:22:35,830 --> 00:22:37,920
carpet

00:22:39,810 --> 00:22:44,110
if you treat paying off technical debt

00:22:42,250 --> 00:22:46,750
as a feature then you can actually act

00:22:44,110 --> 00:22:49,210
upon it one thing that'll help is

00:22:46,750 --> 00:22:51,760
actually writing out your your technical

00:22:49,210 --> 00:22:53,500
debt items as actionable small tasks

00:22:51,760 --> 00:22:57,910
something like upgrades Django to

00:22:53,500 --> 00:22:59,650
version change this old view to this new

00:22:57,910 --> 00:23:02,140
pattern that we started using and

00:22:59,650 --> 00:23:03,640
something I like doing is I really like

00:23:02,140 --> 00:23:08,350
just writing a list of technical debt

00:23:03,640 --> 00:23:11,830
and I use fire for things that are gonna

00:23:08,350 --> 00:23:15,310
blow up I use poop for things that might

00:23:11,830 --> 00:23:18,310
be publicly embarrassing and then I use

00:23:15,310 --> 00:23:21,130
this table flip guy and I changed the

00:23:18,310 --> 00:23:22,480
size of the table based off of how

00:23:21,130 --> 00:23:24,900
frustrating it will be to code the

00:23:22,480 --> 00:23:24,900
solution

00:23:26,749 --> 00:23:31,200
and so there's some things about agile

00:23:29,190 --> 00:23:32,609
that I think even with you're using

00:23:31,200 --> 00:23:40,919
agile or not there's things you can take

00:23:32,609 --> 00:23:44,759
away from it this the main theme is it's

00:23:40,919 --> 00:23:46,709
not just about sprints and tasks but

00:23:44,759 --> 00:23:49,409
it's also what I really like about agile

00:23:46,709 --> 00:23:54,749
is you're always improving the process

00:23:49,409 --> 00:23:57,059
that you work and I think a lot of agile

00:23:54,749 --> 00:24:02,700
is actually just common sense

00:23:57,059 --> 00:24:05,789
wrapped in marketing jargon so jingo

00:24:02,700 --> 00:24:08,489
jango is great it lets you write things

00:24:05,789 --> 00:24:10,259
with less difficulty I think the the

00:24:08,489 --> 00:24:12,629
testing framework of jingo is the best

00:24:10,259 --> 00:24:14,519
I've ever seen anywhere else I've every

00:24:12,629 --> 00:24:18,989
time I use another framework I wish I

00:24:14,519 --> 00:24:20,579
was using Django just for the testing it

00:24:18,989 --> 00:24:23,849
has better he's included there's less

00:24:20,579 --> 00:24:25,200
boilerplate to do a lot of the same

00:24:23,849 --> 00:24:28,229
things and it's got a lot it's great a

00:24:25,200 --> 00:24:29,309
great community if there's a feature you

00:24:28,229 --> 00:24:32,549
want someone else is probably already

00:24:29,309 --> 00:24:35,249
worked on it but I do have some tips

00:24:32,549 --> 00:24:40,259
some tips for working with Django one is

00:24:35,249 --> 00:24:41,759
don't customize the Django admin think

00:24:40,259 --> 00:24:45,629
of the admin as a developer interface

00:24:41,759 --> 00:24:50,629
not a CMS if it seems like it's a lot a

00:24:45,629 --> 00:24:50,629
technical debt to write your own CMS

00:24:51,349 --> 00:24:57,749
it's based off of my experience it's

00:24:54,269 --> 00:25:00,479
actually not because when you're running

00:24:57,749 --> 00:25:02,159
an extension to the Django admin what

00:25:00,479 --> 00:25:04,950
you're doing is you're tightly cap

00:25:02,159 --> 00:25:07,320
coupling in your admin to something that

00:25:04,950 --> 00:25:10,320
keeps you from upgrading Django in the

00:25:07,320 --> 00:25:11,789
future because guess what the Django

00:25:10,320 --> 00:25:12,529
admin changes with that every version

00:25:11,789 --> 00:25:16,499
too

00:25:12,529 --> 00:25:18,509
and a side benefit is if you write your

00:25:16,499 --> 00:25:20,399
own CMS you'll often end up with a

00:25:18,509 --> 00:25:27,119
better use user experience for your

00:25:20,399 --> 00:25:29,599
customers and if you want to use a

00:25:27,119 --> 00:25:31,859
custom admin element guess what there's

00:25:29,599 --> 00:25:33,749
there's hundreds of them

00:25:31,859 --> 00:25:36,720
this is just a screenshot of the Django

00:25:33,749 --> 00:25:40,620
patches packages page for

00:25:36,720 --> 00:25:44,190
Minik extensions the other thing you can

00:25:40,620 --> 00:25:45,900
do is clean as you cook when you're in

00:25:44,190 --> 00:25:49,049
your code just delete it

00:25:45,900 --> 00:25:50,700
that's what source control is for if you

00:25:49,049 --> 00:25:53,880
think that there's a feature that you

00:25:50,700 --> 00:25:57,210
might actually want don't comment it out

00:25:53,880 --> 00:25:59,640
with a block comment wrap it in an if

00:25:57,210 --> 00:26:01,350
statement because if it's something that

00:25:59,640 --> 00:26:02,970
you actually may want to turn on and off

00:26:01,350 --> 00:26:08,640
you should treat it like a future switch

00:26:02,970 --> 00:26:09,900
and not like a code block you could even

00:26:08,640 --> 00:26:11,549
extend that and use something like

00:26:09,900 --> 00:26:13,230
jingle waffle or an a/b testing

00:26:11,549 --> 00:26:18,419
framework to actually turn it into a

00:26:13,230 --> 00:26:24,030
feature switch and the main thing is if

00:26:18,419 --> 00:26:26,039
you find something I was gonna put this

00:26:24,030 --> 00:26:28,140
if you see something say something

00:26:26,039 --> 00:26:32,419
if you see something terrible make a

00:26:28,140 --> 00:26:32,419
ticket for it so it's not forgotten

00:26:32,870 --> 00:26:37,500
another thing with Django is naming

00:26:36,270 --> 00:26:41,390
themes is also really important there's

00:26:37,500 --> 00:26:44,210
actually talk about this on Wednesday

00:26:41,390 --> 00:26:50,330
are the names you're picking groupable

00:26:44,210 --> 00:26:53,400
for example if you're using s for a

00:26:50,330 --> 00:26:55,230
variable name and you want to find and

00:26:53,400 --> 00:26:59,640
replace all instances of s you're gonna

00:26:55,230 --> 00:27:03,500
have a bad time use unique app and model

00:26:59,640 --> 00:27:06,659
names and the main reason for that is

00:27:03,500 --> 00:27:08,400
the Django will let you have your own

00:27:06,659 --> 00:27:09,900
namespaces and build your own app some

00:27:08,400 --> 00:27:11,520
model names but there's a few there's

00:27:09,900 --> 00:27:13,470
enough places where they all come

00:27:11,520 --> 00:27:16,740
together where it's worth it just to try

00:27:13,470 --> 00:27:20,039
and make everything unique and the other

00:27:16,740 --> 00:27:24,150
thing is make your variables in your

00:27:20,039 --> 00:27:28,140
test read as if they're English like and

00:27:24,150 --> 00:27:31,590
for example here's a contrived testing

00:27:28,140 --> 00:27:35,220
example let's say have a article and I

00:27:31,590 --> 00:27:37,789
want a cookie manager that only gives me

00:27:35,220 --> 00:27:37,789
the active ones

00:27:40,420 --> 00:27:45,940
so I've got all these required fields so

00:27:43,090 --> 00:27:51,310
when I make an article I have to add all

00:27:45,940 --> 00:27:54,610
these fields and but here's an example

00:27:51,310 --> 00:27:58,630
using Factory boy where now my test

00:27:54,610 --> 00:28:00,430
setup only has what's relevant to the

00:27:58,630 --> 00:28:04,240
test if I'm only testing active articles

00:28:00,430 --> 00:28:07,150
here I've explicitly said give me an

00:28:04,240 --> 00:28:10,750
article that's active and then I

00:28:07,150 --> 00:28:12,610
supposed to like assert a is in this

00:28:10,750 --> 00:28:14,980
corset now it's a sort of this article

00:28:12,610 --> 00:28:21,280
is in this corset which reads more like

00:28:14,980 --> 00:28:23,140
English and the thing about unique names

00:28:21,280 --> 00:28:25,780
is I really love Michelle Plus which is

00:28:23,140 --> 00:28:31,380
part of jingo extensions a great thing

00:28:25,780 --> 00:28:31,380
that does is from one line you can start

00:28:33,000 --> 00:28:37,750
messing with objects immediately and if

00:28:35,950 --> 00:28:41,050
you don't have unique names using shell

00:28:37,750 --> 00:28:43,170
plus you lose that ability of shell plus

00:28:41,050 --> 00:28:46,720
unless you start adding more total debt

00:28:43,170 --> 00:28:50,890
in the form of shims around shell plus

00:28:46,720 --> 00:28:53,770
and another tip I would have say is

00:28:50,890 --> 00:28:56,890
avoid the Django test client don't use

00:28:53,770 --> 00:28:59,020
it for unit tests but do use it for

00:28:56,890 --> 00:29:01,870
integration tests because when you use

00:28:59,020 --> 00:29:03,370
the the test client you're not only

00:29:01,870 --> 00:29:05,530
hitting your view you're also hitting

00:29:03,370 --> 00:29:08,650
like the URL router the request

00:29:05,530 --> 00:29:10,840
middleware all the parts of the review

00:29:08,650 --> 00:29:16,410
the response mental where the context

00:29:10,840 --> 00:29:16,410
processor and who knows what else

00:29:21,620 --> 00:29:30,320
I'd say avoid model inheritance there's

00:29:27,740 --> 00:29:32,630
a not to plug jingo extensions again but

00:29:30,320 --> 00:29:35,779
jingo extensions does come with some

00:29:32,630 --> 00:29:39,409
examples of what should be you what an

00:29:35,779 --> 00:29:41,059
abstract base class or I mix in should

00:29:39,409 --> 00:29:43,730
do there's like a timestamp date field

00:29:41,059 --> 00:29:46,460
there's a title slug field things like

00:29:43,730 --> 00:29:48,740
that that are very routine you can

00:29:46,460 --> 00:29:52,279
definitely do that as a mix in but you

00:29:48,740 --> 00:29:54,559
shouldn't read the feature that Django

00:29:52,279 --> 00:29:57,500
has mono mix-ins and then jump to try

00:29:54,559 --> 00:29:59,929
and use it everywhere for one thing

00:29:57,500 --> 00:30:02,659
it'll make it very hard to trace what

00:29:59,929 --> 00:30:06,049
field comes from wearing and we're

00:30:02,659 --> 00:30:10,490
jumping around you'll just get lost very

00:30:06,049 --> 00:30:12,110
quickly another thing is this goes back

00:30:10,490 --> 00:30:13,610
to kind of touching everything something

00:30:12,110 --> 00:30:15,740
I like to do is every time I have a pull

00:30:13,610 --> 00:30:18,730
request I just like checking to see

00:30:15,740 --> 00:30:22,340
what's out of date and I like bumping

00:30:18,730 --> 00:30:24,350
and your requirement that I can of

00:30:22,340 --> 00:30:32,240
course this only works when you have

00:30:24,350 --> 00:30:34,159
test coverage and the other thing you

00:30:32,240 --> 00:30:36,200
can do is you can you can trade you can

00:30:34,159 --> 00:30:38,330
purposely get rid of technical debt and

00:30:36,200 --> 00:30:40,970
purposely give yourself technical debt

00:30:38,330 --> 00:30:46,070
for depending on what you're optimizing

00:30:40,970 --> 00:30:48,320
for something that I think freed up the

00:30:46,070 --> 00:30:50,919
work at the texted reviewing a lot is

00:30:48,320 --> 00:30:53,510
something I call Taco Bell feature and

00:30:50,919 --> 00:30:59,990
there were a lot of sections of the site

00:30:53,510 --> 00:31:02,419
that were frozen and there was a lot of

00:30:59,990 --> 00:31:04,370
content but the problem is even though

00:31:02,419 --> 00:31:06,649
this was all content whenever we added

00:31:04,370 --> 00:31:12,529
new content it would change all the old

00:31:06,649 --> 00:31:14,419
content as a as a side-effect so the

00:31:12,529 --> 00:31:17,230
idea was is there a way to freeze this

00:31:14,419 --> 00:31:19,640
content in a way so that we can continue

00:31:17,230 --> 00:31:24,950
developing without having to worry about

00:31:19,640 --> 00:31:28,429
what changed and you should ask me or

00:31:24,950 --> 00:31:29,360
anyone else about how that works and the

00:31:28,429 --> 00:31:33,320
great things after we did that we

00:31:29,360 --> 00:31:35,390
deleted so many templates so many CSS

00:31:33,320 --> 00:31:39,400
files we could delete

00:31:35,390 --> 00:31:41,810
so many models after that it was amazing

00:31:39,400 --> 00:31:42,800
and when you're developing a picture you

00:31:41,810 --> 00:31:44,510
should decide upfront which are

00:31:42,800 --> 00:31:47,810
optimized before is it more important

00:31:44,510 --> 00:31:49,310
that you deliver the MVP as quickly as

00:31:47,810 --> 00:31:54,230
possible or is it more important that

00:31:49,310 --> 00:31:56,800
this be something that that it can

00:31:54,230 --> 00:31:59,210
sustain for for a while

00:31:56,800 --> 00:32:01,900
like if we were startup getting the

00:31:59,210 --> 00:32:04,160
first to market is a real thing that

00:32:01,900 --> 00:32:11,750
that is probably more important than

00:32:04,160 --> 00:32:13,190
building something maintainable I'm

00:32:11,750 --> 00:32:14,860
surprised how many people haven't really

00:32:13,190 --> 00:32:17,090
seen this this this works for

00:32:14,860 --> 00:32:22,130
contractors but it also works for code

00:32:17,090 --> 00:32:26,810
you should decide good fees good fast or

00:32:22,130 --> 00:32:31,670
cheap pick two you can't pick three you

00:32:26,810 --> 00:32:40,940
can also pick one but you what are you

00:32:31,670 --> 00:32:43,220
doing and so like I like to ride write

00:32:40,940 --> 00:32:45,080
crappy code sometimes my general rule is

00:32:43,220 --> 00:32:47,960
if everything can fit in one screen of

00:32:45,080 --> 00:32:50,570
code I can make it as crappy as I want

00:32:47,960 --> 00:32:53,870
in fact if this is throwaway code I

00:32:50,570 --> 00:32:56,750
introduce errors on purpose just to make

00:32:53,870 --> 00:32:58,070
it look just make it obvious because

00:32:56,750 --> 00:33:00,770
there's nothing worse than finding a

00:32:58,070 --> 00:33:03,280
piece of code that was hastily written

00:33:00,770 --> 00:33:06,650
but also has unit tests and

00:33:03,280 --> 00:33:09,230
documentation and then realizing that

00:33:06,650 --> 00:33:14,020
the author had no idea what they were

00:33:09,230 --> 00:33:14,020
doing and was just making stuff up

00:33:18,120 --> 00:33:24,160
so in preparation for this there's a

00:33:22,230 --> 00:33:28,030
there's a lot of material about this

00:33:24,160 --> 00:33:34,150
that I found I really enjoyed these are

00:33:28,030 --> 00:33:36,580
actually videos not reading i've got

00:33:34,150 --> 00:33:39,460
linked to these links to these and if

00:33:36,580 --> 00:33:43,450
you just google these words they'll also

00:33:39,460 --> 00:33:45,730
take you to the right place here's some

00:33:43,450 --> 00:33:52,540
reading lists that are his actual

00:33:45,730 --> 00:33:54,010
reading i actually read it a real book

00:33:52,540 --> 00:33:57,130
in preparation for this called the

00:33:54,010 --> 00:33:59,980
Phoenix project so you'll have to find

00:33:57,130 --> 00:34:02,440
that in the bookstore look look for this

00:33:59,980 --> 00:34:11,169
book when you're there and if you can't

00:34:02,440 --> 00:34:12,790
find that book look for this book so

00:34:11,169 --> 00:34:15,300
there's a lot of other similar judicial

00:34:12,790 --> 00:34:17,620
discussions questions about difficult at

00:34:15,300 --> 00:34:20,200
each one of these could be their own

00:34:17,620 --> 00:34:23,830
talk and our talks - there's like

00:34:20,200 --> 00:34:26,919
micro-services vs. monoliths there's the

00:34:23,830 --> 00:34:28,810
single responsibility principle one that

00:34:26,919 --> 00:34:32,460
I really like is knowing about the not

00:34:28,810 --> 00:34:35,500
invented here principle or syndrome

00:34:32,460 --> 00:34:41,590
being aware of feature creep you don't

00:34:35,500 --> 00:34:45,580
want your app to become this huge giant

00:34:41,590 --> 00:34:47,950
mutant and I put insert product

00:34:45,580 --> 00:34:50,230
development buzz right here but really

00:34:47,950 --> 00:34:52,600
like just if we're really caring about

00:34:50,230 --> 00:34:54,700
this stuff you should look into like go

00:34:52,600 --> 00:34:56,830
outside technical talks and just look at

00:34:54,700 --> 00:35:02,050
like business strategy and product

00:34:56,830 --> 00:35:03,490
development so like this is my homework

00:35:02,050 --> 00:35:06,130
for you these are the these are all the

00:35:03,490 --> 00:35:08,260
important things is I think you should

00:35:06,130 --> 00:35:09,940
you should get frustrated while you're

00:35:08,260 --> 00:35:12,370
at work but get frustrated in a

00:35:09,940 --> 00:35:15,760
constructive way I also think you should

00:35:12,370 --> 00:35:19,270
be as lazy as possible automate away as

00:35:15,760 --> 00:35:20,890
many routine themes as possible try to

00:35:19,270 --> 00:35:24,250
always get a faster feedback loop in any

00:35:20,890 --> 00:35:28,060
process always be touching all of your

00:35:24,250 --> 00:35:29,380
code treat fixing technical debt as a

00:35:28,060 --> 00:35:33,029
feature

00:35:29,380 --> 00:35:36,180
clean Nagi code foster a generally good

00:35:33,029 --> 00:35:38,769
coding culture ever add to your office

00:35:36,180 --> 00:35:42,400
remember that everything must be

00:35:38,769 --> 00:35:46,049
repeatable and plan it ahead for the

00:35:42,400 --> 00:35:53,039
whole lifecycle or the product and

00:35:46,049 --> 00:35:57,699
thanks keep making Jenko sausages

00:35:53,039 --> 00:35:59,559
there's a link to view my talk and for

00:35:57,699 --> 00:36:17,410
some reason you can also run my talk as

00:35:59,559 --> 00:36:19,180
a docker container ok um question so

00:36:17,410 --> 00:36:20,349
when you're coding along and you're

00:36:19,180 --> 00:36:22,180
looking at this code and it's all

00:36:20,349 --> 00:36:23,650
building up and inevitably every

00:36:22,180 --> 00:36:25,569
programmer in the world looks at and

00:36:23,650 --> 00:36:27,069
goes I'm gonna have to change that later

00:36:25,569 --> 00:36:29,019
I just know I'm going to have to change

00:36:27,069 --> 00:36:32,109
that later but I need to get this out

00:36:29,019 --> 00:36:33,910
how do you decide is it inevitably some

00:36:32,109 --> 00:36:35,650
technical debt will build up because of

00:36:33,910 --> 00:36:38,920
schedule because of lack of information

00:36:35,650 --> 00:36:41,709
at that moment so but you could in

00:36:38,920 --> 00:36:44,709
theory stop and take the time to do it

00:36:41,709 --> 00:36:46,239
the perfect way and either way could be

00:36:44,709 --> 00:36:48,640
reasonable so how do you make that call

00:36:46,239 --> 00:36:51,069
I'd say it's called buy buy buy it

00:36:48,640 --> 00:36:52,630
management almost and what I like to do

00:36:51,069 --> 00:36:55,599
is I like to litter my code with with

00:36:52,630 --> 00:36:59,859
two do's and I have like a keywords I

00:36:55,599 --> 00:37:01,719
use one thing that I really liked is

00:36:59,859 --> 00:37:03,849
with you can have a Jenkins job actually

00:37:01,719 --> 00:37:05,019
that just indexes all the two dues in

00:37:03,849 --> 00:37:10,619
your code and you can kind of track that

00:37:05,019 --> 00:37:10,619
over time to thank you

00:37:16,550 --> 00:37:25,800
and just a note statements to begin I

00:37:20,760 --> 00:37:27,480
have a comment or another question do

00:37:25,800 --> 00:37:29,430
you have any experience with a wide

00:37:27,480 --> 00:37:33,390
variety of skill sets where some people

00:37:29,430 --> 00:37:35,190
are far ahead with newer technology or

00:37:33,390 --> 00:37:36,600
far ahead with more of the legacy things

00:37:35,190 --> 00:37:38,660
you're working with and keeping people

00:37:36,600 --> 00:37:42,000
on the same page when moving forward

00:37:38,660 --> 00:37:43,230
yeah having as much overlap as possible

00:37:42,000 --> 00:37:45,720
is something you should strive to do

00:37:43,230 --> 00:37:51,270
pair programming is the best way to

00:37:45,720 --> 00:37:56,820
achieve that but it's a everyone's

00:37:51,270 --> 00:38:00,030
different so that's not a real answer of

00:37:56,820 --> 00:38:09,540
it you should try to do code review and

00:38:00,030 --> 00:38:11,010
compare programming they can and I kind

00:38:09,540 --> 00:38:12,360
of like that

00:38:11,010 --> 00:38:13,980
but they can also turn into bike

00:38:12,360 --> 00:38:15,420
shedding sessions too which is why you

00:38:13,980 --> 00:38:22,740
should keep the poor guys as small as

00:38:15,420 --> 00:38:23,430
possible where does where does bit rot

00:38:22,740 --> 00:38:24,840
come from

00:38:23,430 --> 00:38:31,830
if the code itself isn't actually

00:38:24,840 --> 00:38:36,470
changing well I think the requirements

00:38:31,830 --> 00:38:39,420
is a good example if you're if you can't

00:38:36,470 --> 00:38:40,950
if you freeze your requirements and you

00:38:39,420 --> 00:38:43,500
never upgraded them your app will always

00:38:40,950 --> 00:38:47,670
work but eventually you'll want to make

00:38:43,500 --> 00:38:53,250
a change and you'll discover that it's

00:38:47,670 --> 00:38:58,310
not backwards compatible there's there's

00:38:53,250 --> 00:38:58,310
one of my links actually talks about the

00:38:59,990 --> 00:39:06,600
organizational debt is weight the way we

00:39:04,890 --> 00:39:09,510
look at tickle debt is wrong one of the

00:39:06,600 --> 00:39:12,600
points he makes is that if code is left

00:39:09,510 --> 00:39:15,300
alone it's fine as long as it works and

00:39:12,600 --> 00:39:17,270
there's this truth in that too if you've

00:39:15,300 --> 00:39:19,950
got code that's around and it works I

00:39:17,270 --> 00:39:21,510
would say just if so you have to change

00:39:19,950 --> 00:39:23,960
it be prepared to throw the whole thing

00:39:21,510 --> 00:39:23,960
away though

00:39:26,180 --> 00:39:31,770
hey thanks for the talk a really

00:39:29,040 --> 00:39:35,040
important topic especially for large

00:39:31,770 --> 00:39:38,040
projects I wanted to ask you about

00:39:35,040 --> 00:39:39,660
Django waffle and an a/b testing

00:39:38,040 --> 00:39:41,850
framework how do you keep something like

00:39:39,660 --> 00:39:44,400
that from kind of exploding all the

00:39:41,850 --> 00:39:46,170
branches in your code and like how do

00:39:44,400 --> 00:39:49,860
you manage all that complexity it

00:39:46,170 --> 00:39:52,740
creates I don't have that much

00:39:49,860 --> 00:39:55,830
experience with waffle but in my own

00:39:52,740 --> 00:39:58,830
mental planning for that I always

00:39:55,830 --> 00:40:01,980
thought if you can track what switches

00:39:58,830 --> 00:40:05,870
you're actually using and make it a task

00:40:01,980 --> 00:40:10,380
to go through and turn dead switches to

00:40:05,870 --> 00:40:12,950
static code if you make that a feature

00:40:10,380 --> 00:40:16,890
that you have to code and you plan for

00:40:12,950 --> 00:40:24,090
then I would say that's how I would feel

00:40:16,890 --> 00:40:26,190
to deal with that hey thanks for the

00:40:24,090 --> 00:40:27,660
awesome talk it was great um I was

00:40:26,190 --> 00:40:30,060
wondering do you have any tips for how

00:40:27,660 --> 00:40:32,070
to incentivize good code quality and

00:40:30,060 --> 00:40:34,500
within a team because I find like the

00:40:32,070 --> 00:40:35,790
stick method is definitely much less

00:40:34,500 --> 00:40:37,680
effective than the current method of

00:40:35,790 --> 00:40:39,930
like getting developers to buy into this

00:40:37,680 --> 00:40:44,000
kind of stuff yeah my thought about this

00:40:39,930 --> 00:40:47,130
is to use bots basically if you have a

00:40:44,000 --> 00:40:49,950
github as a new feature where you can't

00:40:47,130 --> 00:40:54,660
merge pull request and let us it meets

00:40:49,950 --> 00:40:57,360
criteria now some people just may not

00:40:54,660 --> 00:41:01,620
listen that's why I also like the whole

00:40:57,360 --> 00:41:03,470
hiring thing is also part of it too it's

00:41:01,620 --> 00:41:06,900
kind of its kind of terrible but

00:41:03,470 --> 00:41:11,730
sometimes you just need to change your

00:41:06,900 --> 00:41:13,319
change your team but also I people may

00:41:11,730 --> 00:41:15,989
have a hard time listening to

00:41:13,319 --> 00:41:18,690
human but if you've bought that says the

00:41:15,989 --> 00:41:20,029
macaw of the somatic complexity of your

00:41:18,690 --> 00:41:22,229
code is too high

00:41:20,029 --> 00:41:26,729
reduce it or the code coverage is not

00:41:22,229 --> 00:41:28,890
there at it I want to say that people

00:41:26,729 --> 00:41:33,880
will more likely to listen to a bot than

00:41:28,890 --> 00:41:36,590
a another human and thank you very much

00:41:33,880 --> 00:41:39,639
[Applause]

00:41:36,590 --> 00:41:39,639
[Music]

00:41:44,100 --> 00:41:47,699

YouTube URL: https://www.youtube.com/watch?v=6uzVKpjVaPc


