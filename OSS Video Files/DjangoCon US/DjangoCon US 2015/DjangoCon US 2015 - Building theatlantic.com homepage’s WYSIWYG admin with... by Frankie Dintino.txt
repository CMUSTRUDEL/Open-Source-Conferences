Title: DjangoCon US 2015 - Building theatlantic.com homepage’s WYSIWYG admin with... by Frankie Dintino
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	Building theatlantic.com homepage’s WYSIWYG admin with Django and Knockout by Frankie Dintino

While the front-end of theatlantic.com was written in PHP up until its recent rewrite, we have relied on a robust Django-powered admin to manage content for nearly two years. At the time when we began coding the redesign we had already developed an adequate solution for curating content into modules on our site: a combination of Grappelli’s drag-and-drop sortable inline feature and django-nested-admin, a project we wrote for nested InlineModelAdmins. However, it soon became clear that our current system would not meet the needs of editors managing The Atlantic’s new responsive and visually-striking homepage. The workflow employed by the editors with our sortable nested inlines—edit, save, preview; adjust, save again, preview; …—would have been too burdensome.

This challenge led me to propose we build a new tool that could “live-edit” the homepage in a WYSIWYG interface. It occurred to me that, if we could find a way to bind the ModelAdmin’s formsets to a javascript model, and used one of the many MVC javascript frameworks, we could build the interface using two-way data binding to sync changes with a hidden form. A project that would have taken months could, with the right framework, be built in just a few weeks.

So why Knockout.js? I evaluated most of the popular options. Though I initially adopted AngularJS, I later abandoned it because, while it is a fine framework, it is not ideal for integrating with DOM elements that live outside angular. I stumbled through quite a few angular controllers and directives (violating their best practices every step along the way) before changing direction. Knockout, by comparison, turned out to be absolutely perfect for the task at hand.

This talk will discuss what was involved in using Knockout to build two-way data binding with django formsets, and how we implemented sorting with drag-and-drop functionality, inline editing of html, and image uploads and cropping. It will also touch briefly on the challenges we faced making everything testable, and feature a live demo of updating theatlantic.com homepage using our new modular Django CMS.

Help us caption & translate this video!

http://amara.org/v/HH6g/
Captions: 
	00:00:15,949 --> 00:00:21,480
so first of all I'd like to thank you

00:00:18,390 --> 00:00:23,250
gencon for selectman presentation Thank

00:00:21,480 --> 00:00:24,990
You Lana for helping a seven year and

00:00:23,250 --> 00:00:27,150
thank all of you for come to see my

00:00:24,990 --> 00:00:28,260
presentation today I'm going to be

00:00:27,150 --> 00:00:31,140
talking about building the entire

00:00:28,260 --> 00:00:34,910
compound pages wysiwyg a min with Django

00:00:31,140 --> 00:00:37,469
and knock xjs the purposes of

00:00:34,910 --> 00:00:41,010
demonstrating techniques here I created

00:00:37,469 --> 00:00:43,920
sort of bare bones repo that illustrates

00:00:41,010 --> 00:00:50,430
techniques that you can check out and

00:00:43,920 --> 00:00:52,350
run have your letter so introductions my

00:00:50,430 --> 00:00:54,870
name is franky don t know as was

00:00:52,350 --> 00:00:57,030
mentioned I work for the Atlantic if

00:00:54,870 --> 00:01:00,210
you're not familiar with it it's a 150

00:00:57,030 --> 00:01:02,070
eight-year-old monthly publication it's

00:01:00,210 --> 00:01:05,129
been a website for 20 years of those

00:01:02,070 --> 00:01:06,930
i've been working at 45 if you're not

00:01:05,129 --> 00:01:08,490
immediately familiar with the name you

00:01:06,930 --> 00:01:10,680
may have seen one of our recent magazine

00:01:08,490 --> 00:01:13,200
features such as what license really

00:01:10,680 --> 00:01:15,119
wants the case for reparations why

00:01:13,200 --> 00:01:19,560
women's go can't have it all organized

00:01:15,119 --> 00:01:21,270
be them active military so in april of

00:01:19,560 --> 00:01:22,770
this year we launched a redesign of the

00:01:21,270 --> 00:01:25,470
site which have been in the works for

00:01:22,770 --> 00:01:27,780
very long time the front end was written

00:01:25,470 --> 00:01:30,329
in PHP so the back end at this point had

00:01:27,780 --> 00:01:32,009
been migrated to django the site was not

00:01:30,329 --> 00:01:36,780
responsive and the home page at a fixed

00:01:32,009 --> 00:01:39,360
layout so you had a carousel module that

00:01:36,780 --> 00:01:43,259
rotated in four items in a row of five

00:01:39,360 --> 00:01:47,310
items a list of three and then a video

00:01:43,259 --> 00:01:49,619
in a grid and that never changed as a

00:01:47,310 --> 00:01:50,510
brief aside on almost everything you see

00:01:49,619 --> 00:01:52,280
on the atlanta com

00:01:50,510 --> 00:01:55,040
homepage and spin the case for quite a

00:01:52,280 --> 00:01:56,810
while is hand selected or curated there

00:01:55,040 --> 00:01:59,960
are two people whose job it is select

00:01:56,810 --> 00:02:03,850
every store in a cage I ran the numbers

00:01:59,960 --> 00:02:06,470
and updates per day come on pages 33

00:02:03,850 --> 00:02:07,970
grand you know some of those are typos

00:02:06,470 --> 00:02:11,240
fixes and things like that but it's

00:02:07,970 --> 00:02:12,800
still a fairly impressive number on many

00:02:11,240 --> 00:02:15,950
cases the homepage is the most highly

00:02:12,800 --> 00:02:19,030
trafficked page on our site and we also

00:02:15,950 --> 00:02:21,530
feel that the homepage serves as a

00:02:19,030 --> 00:02:24,530
representative for the brand but forward

00:02:21,530 --> 00:02:28,760
the continent we think is the most

00:02:24,530 --> 00:02:31,370
compelling would be great so before the

00:02:28,760 --> 00:02:33,670
redesign the main interface looked like

00:02:31,370 --> 00:02:36,080
this if you're familiar with propelling

00:02:33,670 --> 00:02:40,130
it's basically propelling in lines

00:02:36,080 --> 00:02:42,650
though using a module we built called

00:02:40,130 --> 00:02:44,860
Jango nested admin that allows you to

00:02:42,650 --> 00:02:47,810
drag and drop between in lines and

00:02:44,860 --> 00:02:49,190
arbitrarily nest field lines some people

00:02:47,810 --> 00:02:55,730
might characterize that as admin abuse

00:02:49,190 --> 00:02:58,190
we've got to be extremely helpful so

00:02:55,730 --> 00:03:01,060
with the new homepage um it was going to

00:02:58,190 --> 00:03:04,280
be fully responsive rewritten in Django

00:03:01,060 --> 00:03:05,890
and we're going for a flexible modular

00:03:04,280 --> 00:03:08,090
structure that would allow editors

00:03:05,890 --> 00:03:10,090
automatically group articles and build a

00:03:08,090 --> 00:03:13,870
rhythm as the user Scrolls down the page

00:03:10,090 --> 00:03:15,739
so here's the sort of battering of

00:03:13,870 --> 00:03:18,800
modules that you might see on the

00:03:15,739 --> 00:03:20,750
homepage and I've already used this term

00:03:18,800 --> 00:03:24,019
balance the operating concept of the

00:03:20,750 --> 00:03:26,600
homepage design is that there arose such

00:03:24,019 --> 00:03:28,970
more of one or more articles which we

00:03:26,600 --> 00:03:31,640
called modules it can be freely arranged

00:03:28,970 --> 00:03:33,050
in whatever order when feedback from

00:03:31,640 --> 00:03:34,519
user testing actually we're adding even

00:03:33,050 --> 00:03:37,250
more modules these are the ones that we

00:03:34,519 --> 00:03:40,040
lost with so that we can make the site

00:03:37,250 --> 00:03:42,110
with dance we found the proce be

00:03:40,040 --> 00:03:46,160
sufficiently flexible while still in

00:03:42,110 --> 00:03:48,980
campbell so why do you build the admit

00:03:46,160 --> 00:03:51,610
why would the old system of nested in

00:03:48,980 --> 00:03:54,470
lines not suffice for the new homepage

00:03:51,610 --> 00:03:58,740
first of all the new home pages in

00:03:54,470 --> 00:04:02,370
really gorgeous art selected for stories

00:03:58,740 --> 00:04:05,220
and you know a lot of variety and how

00:04:02,370 --> 00:04:06,690
things are arranged so the cycle that

00:04:05,220 --> 00:04:08,550
they've been using previously where they

00:04:06,690 --> 00:04:11,640
would edit something preview the

00:04:08,550 --> 00:04:14,280
homepage live then go back and edit it

00:04:11,640 --> 00:04:16,950
and save again and go and preview would

00:04:14,280 --> 00:04:20,090
be really cumbersome for something that

00:04:16,950 --> 00:04:23,370
particularly in a responsive situation

00:04:20,090 --> 00:04:24,750
our editors are perfectionist and it's

00:04:23,370 --> 00:04:27,180
something that's a brat quite right at

00:04:24,750 --> 00:04:29,460
450 pixel why they're going to go back

00:04:27,180 --> 00:04:32,550
and edit the copy also I thought it

00:04:29,460 --> 00:04:34,560
would be a fun challenge so the goal was

00:04:32,550 --> 00:04:36,210
to build a WYSIWYG interface to edit the

00:04:34,560 --> 00:04:39,390
home page while we're using as much

00:04:36,210 --> 00:04:41,820
existing code as possible so that

00:04:39,390 --> 00:04:45,120
existing code I mentioned briefly a

00:04:41,820 --> 00:04:48,720
moment ago Django nest today you can

00:04:45,120 --> 00:04:50,580
find it on github the address here as I

00:04:48,720 --> 00:04:52,290
said it allows for arbitrarily deep neck

00:04:50,580 --> 00:04:53,970
stand in line from the admin and

00:04:52,290 --> 00:04:56,700
provides a drive and drop functionality

00:04:53,970 --> 00:05:00,900
similar to trend with propellers I can

00:04:56,700 --> 00:05:02,940
run with or without propellers I rewrote

00:05:00,900 --> 00:05:06,480
Django nested admin for the purpose of

00:05:02,940 --> 00:05:09,270
this project to expose an API so that i

00:05:06,480 --> 00:05:11,340
can call methods that perform operations

00:05:09,270 --> 00:05:13,590
such as the leaf insert explain

00:05:11,340 --> 00:05:15,480
programmatically rather than than

00:05:13,590 --> 00:05:18,300
working the way they currently do and

00:05:15,480 --> 00:05:19,950
repelling where it's based on event

00:05:18,300 --> 00:05:23,610
handlers on user and click like clicking

00:05:19,950 --> 00:05:25,140
a button or dragging and dropping so I

00:05:23,610 --> 00:05:28,050
cannot get a plan for how I might

00:05:25,140 --> 00:05:30,240
achieve this wysiwyg interface I'm going

00:05:28,050 --> 00:05:31,920
to dwell on this diagram for just a

00:05:30,240 --> 00:05:33,750
moment because well it's maybe a bit

00:05:31,920 --> 00:05:35,370
overwhelming I think it really gets to

00:05:33,750 --> 00:05:38,220
the heart of detection being discussed

00:05:35,370 --> 00:05:41,790
since presentation so I penguin nested

00:05:38,220 --> 00:05:45,960
admin which let's say you visit you know

00:05:41,790 --> 00:05:47,850
the amend to edit the home page J gonna

00:05:45,960 --> 00:05:50,370
stab and renders all the in lines and

00:05:47,850 --> 00:05:52,950
form fields what I wanted to do is take

00:05:50,370 --> 00:05:55,260
those cornfields and build big JSON

00:05:52,950 --> 00:05:57,720
object that's basically serializes

00:05:55,260 --> 00:06:00,720
performed a better hook that into a

00:05:57,720 --> 00:06:01,800
knockout view model or angular though in

00:06:00,720 --> 00:06:04,349
this case of traffic

00:06:01,800 --> 00:06:06,419
scale and set up two-way data binding

00:06:04,349 --> 00:06:08,699
between the original form fields and the

00:06:06,419 --> 00:06:11,280
values that I serialized drama from

00:06:08,699 --> 00:06:13,349
their creative view that would be the

00:06:11,280 --> 00:06:16,169
template and then that template we've

00:06:13,349 --> 00:06:18,659
had buttons and drag-and-drop ability

00:06:16,169 --> 00:06:20,099
that the user could interact with and

00:06:18,659 --> 00:06:22,050
that would you know update the view

00:06:20,099 --> 00:06:24,720
model which would in turn called Jango

00:06:22,050 --> 00:06:27,569
vested admin EP eyes and then the cycle

00:06:24,720 --> 00:06:31,500
would repeat so this was how how could I

00:06:27,569 --> 00:06:32,909
did well on this building it now I was

00:06:31,500 --> 00:06:35,159
going to talk about why i picked

00:06:32,909 --> 00:06:37,979
knockout over angular but i'm a little

00:06:35,159 --> 00:06:39,750
concerned for time so if i have so much

00:06:37,979 --> 00:06:41,460
for time at the end and people are

00:06:39,750 --> 00:06:44,159
interested i'm having to talk about it

00:06:41,460 --> 00:06:45,930
work if I don't you know run into me and

00:06:44,159 --> 00:06:51,240
ask me but I'm just going to give these

00:06:45,930 --> 00:06:55,469
slides for now anyway decision use

00:06:51,240 --> 00:06:58,349
knockout spoiler alert I couldn't tell

00:06:55,469 --> 00:07:00,659
from the title the top but I want to use

00:06:58,349 --> 00:07:03,960
angular's expression compiler which is

00:07:00,659 --> 00:07:06,210
definitely weird I recognized somebody

00:07:03,960 --> 00:07:09,770
helpfully pull out that functionality

00:07:06,210 --> 00:07:12,150
from angular and created an NPM module i

00:07:09,770 --> 00:07:16,199
forked it because I wanted to add some

00:07:12,150 --> 00:07:20,789
newer angular features to it but I'll

00:07:16,199 --> 00:07:25,080
explain why in a moment so how do we get

00:07:20,789 --> 00:07:26,969
from this top row where we go from form

00:07:25,080 --> 00:07:33,090
fields to the JSON object to the few

00:07:26,969 --> 00:07:35,490
model um a brief refresher Jengo in the

00:07:33,090 --> 00:07:38,129
admin Django has a pretty simple

00:07:35,490 --> 00:07:40,409
convention for how he needs form fields

00:07:38,129 --> 00:07:42,719
and inline fields for fields it's just

00:07:40,409 --> 00:07:45,000
the name of the field dead example you

00:07:42,719 --> 00:07:50,460
have a field of title that's the name in

00:07:45,000 --> 00:07:52,830
the form of contents and content for in

00:07:50,460 --> 00:07:55,830
lines um it's not that much more

00:07:52,830 --> 00:07:58,979
complicated you have the related name so

00:07:55,830 --> 00:08:01,289
in this case of you know we had a item

00:07:58,979 --> 00:08:04,349
that is a foreign key to a module so the

00:08:01,289 --> 00:08:05,990
reverse arm key is modularsquare said

00:08:04,349 --> 00:08:09,920
the module underscores

00:08:05,990 --> 00:08:12,050
dash and then an index for which in line

00:08:09,920 --> 00:08:15,860
it is in the list and then the field

00:08:12,050 --> 00:08:17,930
name on that in line and this convention

00:08:15,860 --> 00:08:20,750
is followed everywhere for Django nested

00:08:17,930 --> 00:08:22,460
admin for the arbitrarily deep testing

00:08:20,750 --> 00:08:24,400
we just sort of continue to do more

00:08:22,460 --> 00:08:27,710
prefixes so then it would be like

00:08:24,400 --> 00:08:33,500
modularsquare set 0 dash item underscore

00:08:27,710 --> 00:08:35,980
set dash y dash be open so here's like a

00:08:33,500 --> 00:08:40,130
really simple form submission abridged

00:08:35,980 --> 00:08:45,080
of somebody skating a form of two in

00:08:40,130 --> 00:08:47,210
lines so you have an IP name field you

00:08:45,080 --> 00:08:50,060
have total forms initial forms of

00:08:47,210 --> 00:08:53,590
maximum forms those are management form

00:08:50,060 --> 00:08:56,150
fields the management form our

00:08:53,590 --> 00:08:59,870
management form fields are hidden fields

00:08:56,150 --> 00:09:02,000
that tell Django how many in lungs were

00:08:59,870 --> 00:09:04,160
there originally and how many were added

00:09:02,000 --> 00:09:05,900
that it knows which one should be update

00:09:04,160 --> 00:09:08,630
operations and which one should be

00:09:05,900 --> 00:09:11,570
inserted operations and then you have a

00:09:08,630 --> 00:09:14,180
you know your module set dash 0 dash ID

00:09:11,570 --> 00:09:16,640
that's the idea the first one then the

00:09:14,180 --> 00:09:21,620
second one module set one does an MIP

00:09:16,640 --> 00:09:23,750
cuz it's new and there's this title so

00:09:21,620 --> 00:09:27,260
you can do a fairly straightforward

00:09:23,750 --> 00:09:29,720
conversion of the syntax of the Django

00:09:27,260 --> 00:09:32,540
input forms into an angular expression

00:09:29,720 --> 00:09:34,670
that would match with JSON object so

00:09:32,540 --> 00:09:37,670
obviously if there's no in lines just

00:09:34,670 --> 00:09:40,550
map it to the property ID as ID and name

00:09:37,670 --> 00:09:43,250
is name on but forward in line so

00:09:40,550 --> 00:09:45,440
instead of module underscore set dash 0

00:09:43,250 --> 00:09:48,410
dash you have module underscore set

00:09:45,440 --> 00:09:51,830
which is now an array and then array

00:09:48,410 --> 00:09:54,260
index zero and then dot I key because

00:09:51,830 --> 00:09:56,630
that thing with Iran and the thing that

00:09:54,260 --> 00:09:59,840
angular expressions gets us is that we

00:09:56,630 --> 00:10:01,940
can compile this expression pass in an

00:09:59,840 --> 00:10:05,120
empty JavaScript object and it'll build

00:10:01,940 --> 00:10:07,940
all the intermediate steps so 0 won't be

00:10:05,120 --> 00:10:10,279
an undefined error 0 it will construct

00:10:07,940 --> 00:10:12,920
the array and then fill an empty

00:10:10,279 --> 00:10:16,399
that sign any property with the value

00:10:12,920 --> 00:10:18,050
that you tell it to and then just by

00:10:16,399 --> 00:10:20,540
convention I needed something to do with

00:10:18,050 --> 00:10:22,610
the management forms they couldn't go

00:10:20,540 --> 00:10:24,620
with the module set of ray because there

00:10:22,610 --> 00:10:26,870
are different properties and they they

00:10:24,620 --> 00:10:28,870
applied to the in line as a whole rather

00:10:26,870 --> 00:10:31,220
than each individual row in the in line

00:10:28,870 --> 00:10:34,519
so by convention i call them under

00:10:31,220 --> 00:10:38,209
spurns for MGMT but there's something

00:10:34,519 --> 00:10:42,019
special about that so with that initial

00:10:38,209 --> 00:10:45,019
form submission the serialized data

00:10:42,019 --> 00:10:47,350
would look something like this after an

00:10:45,019 --> 00:10:50,990
evening your management forum values

00:10:47,350 --> 00:10:53,329
your module set array and that contains

00:10:50,990 --> 00:10:57,829
objects that have properties those ten

00:10:53,329 --> 00:10:59,990
lines so here's a brief code sample that

00:10:57,829 --> 00:11:01,879
sort of shows the the process from start

00:10:59,990 --> 00:11:04,790
to finish building the view model of

00:11:01,879 --> 00:11:06,259
finding her tongue feels so we require

00:11:04,790 --> 00:11:08,809
the angular expressions which actually

00:11:06,259 --> 00:11:10,339
don't really do I exposed to the global

00:11:08,809 --> 00:11:12,470
object is required you guys doesn't work

00:11:10,339 --> 00:11:16,040
in agenda but that's beside the point

00:11:12,470 --> 00:11:19,819
for Clara edge to this way and then

00:11:16,040 --> 00:11:21,949
obviously I would pull the name off area

00:11:19,819 --> 00:11:23,569
over the inputs pull the names off of

00:11:21,949 --> 00:11:26,420
them and use regular expressions convert

00:11:23,569 --> 00:11:28,759
them but just for demonstration purposes

00:11:26,420 --> 00:11:30,529
I'm used more on a particular field so

00:11:28,759 --> 00:11:33,079
you have module lunch corset def series

00:11:30,529 --> 00:11:35,720
titled and a django version of the

00:11:33,079 --> 00:11:37,339
angular version and if knockout version

00:11:35,720 --> 00:11:39,230
is identical to the angular version

00:11:37,339 --> 00:11:41,000
except arrays need to have an open

00:11:39,230 --> 00:11:44,000
closed parenthesis because they're

00:11:41,000 --> 00:11:47,149
technically callable and knocked out so

00:11:44,000 --> 00:11:49,339
it's a weird quirk seems like something

00:11:47,149 --> 00:11:52,209
that they could do away with but it is

00:11:49,339 --> 00:11:54,679
what it is so I grabbed the input field

00:11:52,209 --> 00:11:57,350
compile the expression and assign the

00:11:54,679 --> 00:12:00,230
data that like I said builds up the

00:11:57,350 --> 00:12:01,970
empty parts of the JSON object so it

00:12:00,230 --> 00:12:04,579
will build a module set object from the

00:12:01,970 --> 00:12:05,959
top level that will be an array it'll

00:12:04,579 --> 00:12:11,929
fill in the first one with a new object

00:12:05,959 --> 00:12:14,050
and set the title to food after I do

00:12:11,929 --> 00:12:17,560
that I had a data bond attribute

00:12:14,050 --> 00:12:20,080
input knockout functions just by the

00:12:17,560 --> 00:12:25,180
datapod action every way of finding

00:12:20,080 --> 00:12:28,000
behaviors or values to the model is done

00:12:25,180 --> 00:12:31,329
by the data by attribute so data bind

00:12:28,000 --> 00:12:34,089
and then value is the pharmd handler for

00:12:31,329 --> 00:12:36,420
form field values value calling the

00:12:34,089 --> 00:12:38,649
knockout expression does a few morrow

00:12:36,420 --> 00:12:41,709
I'm using a plug-in called knockout

00:12:38,649 --> 00:12:43,870
mapping which it allows you to pass in a

00:12:41,709 --> 00:12:47,079
JSON object ability model without all

00:12:43,870 --> 00:12:48,670
these intermediate steps and then apply

00:12:47,079 --> 00:12:50,709
the binding from a few models which will

00:12:48,670 --> 00:12:55,540
find all the inputs with data find a

00:12:50,709 --> 00:12:57,250
tribute and add the match up to the end

00:12:55,540 --> 00:13:00,550
result in the form would be like an

00:12:57,250 --> 00:13:03,160
input element with its name and a

00:13:00,550 --> 00:13:05,440
defined value colon and then the

00:13:03,160 --> 00:13:07,690
knockout expression and that would have

00:13:05,440 --> 00:13:09,730
two-way data binding so if somebody

00:13:07,690 --> 00:13:12,310
edited that form field it would update

00:13:09,730 --> 00:13:13,870
the view model and vice versa if we

00:13:12,310 --> 00:13:15,820
programmatically updated the view model

00:13:13,870 --> 00:13:18,550
it would update the form field

00:13:15,820 --> 00:13:20,760
automatically so now we have to wave

00:13:18,550 --> 00:13:23,170
data bindings what do we do from here

00:13:20,760 --> 00:13:29,050
well we build a template that looks like

00:13:23,170 --> 00:13:31,810
the home page luckily for for me um my

00:13:29,050 --> 00:13:33,730
coworker Chris varna is really skilled

00:13:31,810 --> 00:13:36,010
in the CSS and flexbox he was able to

00:13:33,730 --> 00:13:38,410
take all the different designs for the

00:13:36,010 --> 00:13:40,510
modules and use the exact same markup

00:13:38,410 --> 00:13:42,310
for everything so every article has the

00:13:40,510 --> 00:13:45,490
same markup on the home page every

00:13:42,310 --> 00:13:47,770
module is just nested ul's and allies

00:13:45,490 --> 00:13:50,920
which makes building the knockout tech

00:13:47,770 --> 00:13:53,589
version of the template really simple so

00:13:50,920 --> 00:13:56,050
I used the forage five iterate over the

00:13:53,589 --> 00:13:59,199
modules an iterative of the items and

00:13:56,050 --> 00:14:01,449
then have the HTML for the articles and

00:13:59,199 --> 00:14:03,430
then that is sort of like a dynamic

00:14:01,449 --> 00:14:08,020
version now of what we were otherwise

00:14:03,430 --> 00:14:09,850
doing those gender templates once we

00:14:08,020 --> 00:14:13,180
have that we could add knockout behavior

00:14:09,850 --> 00:14:15,490
bindings so integrations with things

00:14:13,180 --> 00:14:18,940
like ckeditor for in long text editing

00:14:15,490 --> 00:14:20,740
select to for dynamic dropdowns sortable

00:14:18,940 --> 00:14:21,440
so that users can drag and drop to

00:14:20,740 --> 00:14:24,500
rearrange

00:14:21,440 --> 00:14:26,030
things and supplied for another open

00:14:24,500 --> 00:14:28,340
source project of ours but Django crop

00:14:26,030 --> 00:14:31,280
duster they can upload images and crop

00:14:28,340 --> 00:14:35,180
them however they see fit so now I'm

00:14:31,280 --> 00:14:37,450
going to do a brief demo of the whole

00:14:35,180 --> 00:14:37,450
process

00:14:45,670 --> 00:14:51,190
so this is a demo version of the home

00:14:47,590 --> 00:14:53,230
page um I'm gonna mess around a little

00:14:51,190 --> 00:14:56,380
bit sort of show the features without be

00:14:53,230 --> 00:15:04,000
able to kill using this technique so you

00:14:56,380 --> 00:15:06,550
can delete things undelete them we have

00:15:04,000 --> 00:15:09,040
something called the stash you can drop

00:15:06,550 --> 00:15:11,110
things into for safekeeping later and

00:15:09,040 --> 00:15:14,410
then if you want to return them just

00:15:11,110 --> 00:15:16,450
sort of drag them back in um you can

00:15:14,410 --> 00:15:25,300
rearrange things by dragging and

00:15:16,450 --> 00:15:28,360
dropping normal and you can click to

00:15:25,300 --> 00:15:30,760
just edit any of the text anywhere and

00:15:28,360 --> 00:15:35,350
these little labels pull down so lets

00:15:30,760 --> 00:15:38,290
you drop down click on well we'll just

00:15:35,350 --> 00:15:40,180
pretend that we've happen there should

00:15:38,290 --> 00:15:41,320
be like a name rule for like whenever

00:15:40,180 --> 00:15:45,220
you give it generally don't uncover

00:15:41,320 --> 00:15:50,830
these one bug so I'm going to switch out

00:15:45,220 --> 00:15:53,200
the top module with feature from the

00:15:50,830 --> 00:15:56,650
next magazine issue so click on it

00:15:53,200 --> 00:16:02,830
choose what type of content an amazing

00:15:56,650 --> 00:16:05,650
article we go save and pump it up so

00:16:02,830 --> 00:16:07,870
that it will pull the image field off of

00:16:05,650 --> 00:16:10,750
the article and then reap prop it

00:16:07,870 --> 00:16:14,260
automatically to fit the art direction

00:16:10,750 --> 00:16:16,660
of the homepage when it's imported so

00:16:14,260 --> 00:16:20,050
that can take a little bit time for him

00:16:16,660 --> 00:16:24,250
processing white dog still can't have it

00:16:20,050 --> 00:16:30,930
all written by me um with a cover shoot

00:16:24,250 --> 00:16:30,930
of my dog and we'll go ahead and save

00:16:55,610 --> 00:17:00,940
and there's our homepage with the hero

00:17:13,910 --> 00:17:19,140
last thoughts and questions so the gold

00:17:16,890 --> 00:17:20,820
is talk was not just a shows of

00:17:19,140 --> 00:17:23,070
something neat that we did although

00:17:20,820 --> 00:17:24,750
force that was part of it but to

00:17:23,070 --> 00:17:26,550
illustrate a specific technique for

00:17:24,750 --> 00:17:29,880
booking together flybridge can make

00:17:26,550 --> 00:17:31,740
really need different experiences um for

00:17:29,880 --> 00:17:33,570
instance you could take this technique

00:17:31,740 --> 00:17:35,670
and combine it with masonry which is

00:17:33,570 --> 00:17:39,150
like a javascript library for arranging

00:17:35,670 --> 00:17:41,130
grids and maybe Django CMS and builds

00:17:39,150 --> 00:17:44,240
like a really fully featured flexible

00:17:41,130 --> 00:17:44,240

YouTube URL: https://www.youtube.com/watch?v=RWLQTCUpyWw


