Title: DjangoCon US 2015 - Intro to Client-Side Testing by Mark Lavin
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	Intro to Client-Side Testing

Intro/Background
Example Project
Getting Started with Selenium
Navigating pages
Finding elements
Waiting on actions
Unittesting with QUnit
Why QUnit?
Tests and assertions
Test fixtures
Additional Resources
Q&A

Help us caption & translate this video!

http://amara.org/v/HIXN/
Captions: 
	00:00:15,920 --> 00:00:22,800
what does repeat all of the things they

00:00:18,270 --> 00:00:26,849
just said I work for cactus group I'm

00:00:22,800 --> 00:00:28,949
the co-author of lightweight Django you

00:00:26,849 --> 00:00:32,850
can find me on twitter i'm dr. oh yes

00:00:28,949 --> 00:00:35,280
I'm em Lavin on github and the rest of

00:00:32,850 --> 00:00:37,530
the internet if you can help me acquire

00:00:35,280 --> 00:00:44,520
the M lab and Twitter account like come

00:00:37,530 --> 00:00:49,649
see me after be interested so what's the

00:00:44,520 --> 00:00:52,500
what's the goal of this talk the gold

00:00:49,649 --> 00:00:56,010
this talk is to get you started writing

00:00:52,500 --> 00:00:58,680
tests from a practical standpoint this

00:00:56,010 --> 00:01:00,870
isn't supposed to be an in-depth review

00:00:58,680 --> 00:01:03,480
of all available JavaScript testing

00:01:00,870 --> 00:01:06,030
tools and I'm not here to convince you

00:01:03,480 --> 00:01:08,720
to do testing like that argument I don't

00:01:06,030 --> 00:01:12,720
think needs to be made anymore

00:01:08,720 --> 00:01:14,159
especially not in this this community so

00:01:12,720 --> 00:01:17,280
the workflow is I'm going to show you a

00:01:14,159 --> 00:01:18,960
little example project I'm going to show

00:01:17,280 --> 00:01:21,150
you some integration tests for that

00:01:18,960 --> 00:01:25,890
project and then we'll go through some

00:01:21,150 --> 00:01:29,100
unit tests for that project so what are

00:01:25,890 --> 00:01:33,390
we going to test today this is a project

00:01:29,100 --> 00:01:35,790
that lives on file AP IM lavin org and

00:01:33,390 --> 00:01:40,189
the source code is available on my

00:01:35,790 --> 00:01:45,540
github account it's a minimal REST API

00:01:40,189 --> 00:01:48,270
using JSON web tokens for auth it does

00:01:45,540 --> 00:01:50,220
drag and drop file uploads there's a

00:01:48,270 --> 00:01:55,200
limit please don't try to upload like

00:01:50,220 --> 00:01:58,350
100 gigs my server please the front end

00:01:55,200 --> 00:02:02,040
uses backbone I'm not going to show you

00:01:58,350 --> 00:02:03,600
any of the code for the views any of the

00:02:02,040 --> 00:02:05,369
backbone code I'm only going to show you

00:02:03,600 --> 00:02:09,300
the tests if you want to take the time

00:02:05,369 --> 00:02:10,979
and review the project code itself at do

00:02:09,300 --> 00:02:13,769
so in your own time

00:02:10,979 --> 00:02:19,200
it looks like this you login there's a

00:02:13,769 --> 00:02:22,409
guest login when you after you login you

00:02:19,200 --> 00:02:25,700
see this blob and an empty line because

00:02:22,409 --> 00:02:29,430
they didn't spend any time styling this

00:02:25,700 --> 00:02:32,330
when you drag a file it's there and then

00:02:29,430 --> 00:02:34,860
there's a little X and you can delete it

00:02:32,330 --> 00:02:37,290
that's what the project looks like on

00:02:34,860 --> 00:02:40,230
the back end it looks like this there's

00:02:37,290 --> 00:02:42,329
not that many views there's you know the

00:02:40,230 --> 00:02:46,140
API route which renders the single page

00:02:42,329 --> 00:02:49,709
app there's a an endpoint to exchange an

00:02:46,140 --> 00:02:52,859
API token of the username password for

00:02:49,709 --> 00:02:54,900
an API token you can get uploads to list

00:02:52,859 --> 00:02:59,099
all uploads you can post a new upload

00:02:54,900 --> 00:03:00,629
you can get uploads like details for

00:02:59,099 --> 00:03:06,690
single upload you can delete an upload

00:03:00,629 --> 00:03:10,769
there's no put for updating yeah it's

00:03:06,690 --> 00:03:13,799
super restful but users don't care about

00:03:10,769 --> 00:03:16,560
rest like users don't care about how

00:03:13,799 --> 00:03:18,269
restful the back end is they want to do

00:03:16,560 --> 00:03:20,669
things on the site they want to log into

00:03:18,269 --> 00:03:23,069
the site they want to navigate around

00:03:20,669 --> 00:03:27,780
they want to submit data they want to

00:03:23,069 --> 00:03:29,609
see their data and so those are the

00:03:27,780 --> 00:03:31,919
things that you want to test to make

00:03:29,609 --> 00:03:33,780
sure that this works as expected and

00:03:31,919 --> 00:03:37,769
that's what selenium is really good at

00:03:33,780 --> 00:03:40,200
selenium drives a browser and you can

00:03:37,769 --> 00:03:43,230
interact with the Dom you can fill in

00:03:40,200 --> 00:03:44,910
data you can click links you can assert

00:03:43,230 --> 00:03:49,919
things about the current state of the

00:03:44,910 --> 00:03:52,109
Dom some basic selenium set up this

00:03:49,919 --> 00:03:54,540
almost comes straight out of the Django

00:03:52,109 --> 00:03:58,260
docs is to use the live static server

00:03:54,540 --> 00:04:02,280
test case and do some setup tear down of

00:03:58,260 --> 00:04:04,919
the selenium webdriver the setup and

00:04:02,280 --> 00:04:07,260
teardown can be a little slow that's why

00:04:04,919 --> 00:04:10,680
it's done once per class rather than per

00:04:07,260 --> 00:04:13,109
test that means you don't get perfect

00:04:10,680 --> 00:04:16,799
test isolation and it can lead to

00:04:13,109 --> 00:04:19,260
problems I like phantom j/s for the

00:04:16,799 --> 00:04:23,610
driver it's a headless webkit browser

00:04:19,260 --> 00:04:24,870
you can install with NPM you could

00:04:23,610 --> 00:04:26,520
replace this with Firefox

00:04:24,870 --> 00:04:28,290
or Chrome or ie or you may want to run

00:04:26,520 --> 00:04:32,220
your tests against all of them that's

00:04:28,290 --> 00:04:34,320
all available options phantom Jas also

00:04:32,220 --> 00:04:37,260
works well it's installed by default on

00:04:34,320 --> 00:04:41,910
Travis CI so it integrates well with CI

00:04:37,260 --> 00:04:45,750
environments a selenium test looks

00:04:41,910 --> 00:04:48,300
something like this you tell the browser

00:04:45,750 --> 00:04:51,419
to get a page and then you assert

00:04:48,300 --> 00:04:53,940
something about that page so i say when

00:04:51,419 --> 00:04:58,380
i get the page i should see the login

00:04:53,940 --> 00:05:02,550
form so i find that login form by its

00:04:58,380 --> 00:05:04,770
HTML ID and i look for that little Dom

00:05:02,550 --> 00:05:06,479
element that's the file upload and they

00:05:04,770 --> 00:05:10,039
should the user should not be able to

00:05:06,479 --> 00:05:10,039
see that if they haven't logged in

00:05:11,120 --> 00:05:18,419
moving on to that you can fill out forms

00:05:15,240 --> 00:05:21,630
so we have a login form we know it's

00:05:18,419 --> 00:05:24,240
there we find it and we get the inputs

00:05:21,630 --> 00:05:27,810
by their name there's a user name input

00:05:24,240 --> 00:05:31,110
and there's a password input and you use

00:05:27,810 --> 00:05:34,260
send keys to emulate like the user

00:05:31,110 --> 00:05:36,560
typing in the form you can also make

00:05:34,260 --> 00:05:39,090
this work with you know select boxes

00:05:36,560 --> 00:05:43,979
file inputs you can do all those things

00:05:39,090 --> 00:05:45,930
you can fill them out the nice thing

00:05:43,979 --> 00:05:48,360
about selenium and the reason you need

00:05:45,930 --> 00:05:51,450
to use the static live server test case

00:05:48,360 --> 00:05:53,970
to get really meaningful tests is that

00:05:51,450 --> 00:05:57,570
if you try to do interactions like

00:05:53,970 --> 00:06:00,180
filling in forms and that form element

00:05:57,570 --> 00:06:03,330
one isn't found it's going to air but

00:06:00,180 --> 00:06:06,539
more so if the form element is in the

00:06:03,330 --> 00:06:09,630
Dom but it's not visible to the user it

00:06:06,539 --> 00:06:11,849
will air which can give you something

00:06:09,630 --> 00:06:15,990
far more meaningful than what like

00:06:11,849 --> 00:06:17,580
Django's test client can give you not

00:06:15,990 --> 00:06:20,940
just that it's in the Dom but that's

00:06:17,580 --> 00:06:23,490
actually visible to a user now you can

00:06:20,940 --> 00:06:27,539
submit forms by either submitting the

00:06:23,490 --> 00:06:30,229
form element or by you know we could

00:06:27,539 --> 00:06:33,750
have found the submit button and hit hit

00:06:30,229 --> 00:06:35,729
clicked it this is a little helper

00:06:33,750 --> 00:06:39,300
method this isn't actually a test itself

00:06:35,729 --> 00:06:40,889
a test for this might look

00:06:39,300 --> 00:06:43,830
something like this I want to you call

00:06:40,889 --> 00:06:46,740
my little helper to log in and then I

00:06:43,830 --> 00:06:50,009
need to wait for the browser I need to

00:06:46,740 --> 00:06:51,780
wait until something happens in a

00:06:50,009 --> 00:06:54,090
traditional web application this might

00:06:51,780 --> 00:06:56,849
be like a redirect to another page and I

00:06:54,090 --> 00:06:59,759
need to wait for that redirect to happen

00:06:56,849 --> 00:07:03,419
in my single page app I need to wait for

00:06:59,759 --> 00:07:05,520
the API call to go to the server and

00:07:03,419 --> 00:07:08,849
come back and then the DOM is going to

00:07:05,520 --> 00:07:11,009
change and I'm asserting how I expect

00:07:08,849 --> 00:07:14,639
the Dom to change in this case I'm going

00:07:11,009 --> 00:07:17,789
to wait until I can see the upload it

00:07:14,639 --> 00:07:20,759
should now be visible and I'm going to

00:07:17,789 --> 00:07:22,139
wait five seconds it'll air if it takes

00:07:20,759 --> 00:07:24,389
more than five seconds for that to

00:07:22,139 --> 00:07:29,400
happen and then again i'm going to

00:07:24,389 --> 00:07:31,770
assert things so the file upload area

00:07:29,400 --> 00:07:33,960
should be visible and now the login

00:07:31,770 --> 00:07:37,259
shouldn't be visible to the user that's

00:07:33,960 --> 00:07:39,780
what I'm certain here there are also

00:07:37,259 --> 00:07:43,770
implicit weights that are available in

00:07:39,780 --> 00:07:47,699
selenium and those just wait for a set

00:07:43,770 --> 00:07:49,770
amount of time sometimes writing these

00:07:47,699 --> 00:07:51,810
assertions on how it should explicitly

00:07:49,770 --> 00:07:53,940
wait can get a little tricky and it's

00:07:51,810 --> 00:07:56,750
like a cheap fall back to just wait but

00:07:53,940 --> 00:07:59,159
if you just say wait for a second and

00:07:56,750 --> 00:08:02,219
you start doing this in a lot of tests

00:07:59,159 --> 00:08:03,900
you've added a second to each test run

00:08:02,219 --> 00:08:06,449
and then you've added another second to

00:08:03,900 --> 00:08:09,770
each test run and it really starts to

00:08:06,449 --> 00:08:12,419
add up it can really you know add

00:08:09,770 --> 00:08:14,729
useless time to your test running and

00:08:12,419 --> 00:08:17,490
these tests aren't particularly fast to

00:08:14,729 --> 00:08:20,219
begin with so you know follow the Zen of

00:08:17,490 --> 00:08:25,349
Python explicit weights or better than

00:08:20,219 --> 00:08:28,860
implicit weights users aren't always

00:08:25,349 --> 00:08:31,050
right so other things you might want to

00:08:28,860 --> 00:08:33,029
assert with selenium would be like they

00:08:31,050 --> 00:08:35,909
fill in their password but they miss a

00:08:33,029 --> 00:08:39,419
character and they should see an error

00:08:35,909 --> 00:08:43,229
and you know make sure that you're

00:08:39,419 --> 00:08:46,320
rendering the errors correctly these are

00:08:43,229 --> 00:08:48,839
great end to end tests but they're slow

00:08:46,320 --> 00:08:50,640
and they can be fragile if you're

00:08:48,839 --> 00:08:51,940
thinking about how we're building these

00:08:50,640 --> 00:08:55,810
assertions

00:08:51,940 --> 00:09:00,610
we're finding elements by HTML ID we're

00:08:55,810 --> 00:09:03,040
finding elements by class name if a

00:09:00,610 --> 00:09:05,770
front-end developer or designer comes in

00:09:03,040 --> 00:09:09,130
and tweak some of the class names now

00:09:05,770 --> 00:09:11,170
this test fails even though like the

00:09:09,130 --> 00:09:14,560
functionality should still work my test

00:09:11,170 --> 00:09:20,650
fails or if the error message changed

00:09:14,560 --> 00:09:23,650
slightly so you know you want to use

00:09:20,650 --> 00:09:27,700
these as they couple well and pair well

00:09:23,650 --> 00:09:29,830
with other tests in your test suite so

00:09:27,700 --> 00:09:32,850
these are integration style tests let's

00:09:29,830 --> 00:09:37,900
talk about you know pure JavaScript

00:09:32,850 --> 00:09:40,690
testing you know it for edge cases

00:09:37,900 --> 00:09:44,410
really tricky logic it's hard to beat

00:09:40,690 --> 00:09:46,210
like isolated unit tests and sometimes

00:09:44,410 --> 00:09:48,150
this goes out the window when we write

00:09:46,210 --> 00:09:52,330
JavaScript because we're primarily

00:09:48,150 --> 00:09:56,130
Python focus but I feel like the Django

00:09:52,330 --> 00:09:59,050
community really values testing and

00:09:56,130 --> 00:10:02,290
maybe the reason is you know people

00:09:59,050 --> 00:10:04,480
don't know what tools are out there and

00:10:02,290 --> 00:10:06,520
part of why it's hard to know what tools

00:10:04,480 --> 00:10:08,200
are out there is that in the time I've

00:10:06,520 --> 00:10:10,390
been talking about this slide I think

00:10:08,200 --> 00:10:13,780
like eight more testing frameworks have

00:10:10,390 --> 00:10:15,250
been written for JavaScript so I'll tell

00:10:13,780 --> 00:10:20,380
you about the ones that were in

00:10:15,250 --> 00:10:27,000
existence when I started my talk some of

00:10:20,380 --> 00:10:31,150
the popular ones are qunit mocha jasmine

00:10:27,000 --> 00:10:33,430
karma protractor I mean you they sound

00:10:31,150 --> 00:10:35,740
like testing frameworks and you probably

00:10:33,430 --> 00:10:39,850
would a googled karma and thought like

00:10:35,740 --> 00:10:44,920
yeah definitely like that jasmine that

00:10:39,850 --> 00:10:46,660
was the one I was thinking of so I'm

00:10:44,920 --> 00:10:51,580
gonna save you some trouble and tell you

00:10:46,660 --> 00:10:53,710
to just use qunit I'm going to tell you

00:10:51,580 --> 00:10:55,690
why and if you don't agree with my why

00:10:53,710 --> 00:10:59,860
you know check out one of these other

00:10:55,690 --> 00:11:02,560
ones I like qunit because it has a

00:10:59,860 --> 00:11:04,300
familiar xunit style that style that

00:11:02,560 --> 00:11:05,100
everyone is ripped off from small talk

00:11:04,300 --> 00:11:08,940
since the beginning

00:11:05,100 --> 00:11:11,790
of history there are other frameworks

00:11:08,940 --> 00:11:13,980
that choose to do a more like BDD style

00:11:11,790 --> 00:11:16,650
like that lettuce cucumber style oh we

00:11:13,980 --> 00:11:19,170
would have in Python those would be like

00:11:16,650 --> 00:11:21,420
jasmine and mocha is actually really

00:11:19,170 --> 00:11:23,850
weird they're like just choose however

00:11:21,420 --> 00:11:25,140
you want to write your tests now you

00:11:23,850 --> 00:11:27,090
kind of want things to be a little more

00:11:25,140 --> 00:11:31,290
opinionated or I like things to be a

00:11:27,090 --> 00:11:33,600
little more opinionated so jasmine is is

00:11:31,290 --> 00:11:38,370
a very popular BDD style testing

00:11:33,600 --> 00:11:40,830
framework if you like X unit that's a

00:11:38,370 --> 00:11:46,020
bit of high barrier for some people if

00:11:40,830 --> 00:11:50,250
you like xunit use qunit it's used by

00:11:46,020 --> 00:11:52,320
large projects like jQuery and Trey

00:11:50,250 --> 00:11:55,430
hunter I don't know if he's here thank

00:11:52,320 --> 00:11:59,370
you he's added this to django 19

00:11:55,430 --> 00:12:06,660
fantastic work to cover unit tests for

00:11:59,370 --> 00:12:09,510
the admin setting up q unit is about

00:12:06,660 --> 00:12:14,010
creating a static HTML page which

00:12:09,510 --> 00:12:17,310
includes all the qunit pieces there's

00:12:14,010 --> 00:12:22,950
some CSS for q unit and there's the q

00:12:17,310 --> 00:12:25,580
unit java script itself for my project

00:12:22,950 --> 00:12:28,890
or the project i'm showing you here

00:12:25,580 --> 00:12:32,040
there's the code that we want to test

00:12:28,890 --> 00:12:34,110
which is the models and the views the

00:12:32,040 --> 00:12:37,290
backbone models and views not Django

00:12:34,110 --> 00:12:40,200
models and views and it uses backbone so

00:12:37,290 --> 00:12:43,080
it depends on backbone which depends on

00:12:40,200 --> 00:12:44,700
underscore and depends on jQuery so

00:12:43,080 --> 00:12:47,850
those are all included and then at the

00:12:44,700 --> 00:12:52,800
very bottom i have two new files that's

00:12:47,850 --> 00:12:54,690
the test models and test views I know

00:12:52,800 --> 00:12:56,640
that this the end script tags are

00:12:54,690 --> 00:12:59,580
missing it's like a weird error with

00:12:56,640 --> 00:13:01,680
reveal j/s which is what i'm using for

00:12:59,580 --> 00:13:07,440
my slides so put your script tags in

00:13:01,680 --> 00:13:13,620
there they're in in the repo our first q

00:13:07,440 --> 00:13:16,140
unit test uses q unit test which names

00:13:13,620 --> 00:13:17,790
the test and then has the test function

00:13:16,140 --> 00:13:20,370
itself

00:13:17,790 --> 00:13:23,960
the test function is given a single

00:13:20,370 --> 00:13:28,800
argument which is the assertion pieces

00:13:23,960 --> 00:13:31,260
and it has all the assertion api's you

00:13:28,800 --> 00:13:34,170
kind of expect from X unit like expect

00:13:31,260 --> 00:13:39,720
or assert equals or assert okay or

00:13:34,170 --> 00:13:41,580
assert not okay or not equals in this

00:13:39,720 --> 00:13:44,340
case and you don't have to know too much

00:13:41,580 --> 00:13:48,090
about backbone I hope to at least read

00:13:44,340 --> 00:13:50,850
what this test is doing I'm creating an

00:13:48,090 --> 00:13:53,610
instance of a backbone model similar to

00:13:50,850 --> 00:13:57,990
a Django model and I'm asserting that a

00:13:53,610 --> 00:14:00,540
method call URL that that method call

00:13:57,990 --> 00:14:04,020
returns the URL that I expect that's

00:14:00,540 --> 00:14:07,020
that's really it so again pretty

00:14:04,020 --> 00:14:12,050
standard unit test create an instance of

00:14:07,020 --> 00:14:17,360
a class call one method a cert one thing

00:14:12,050 --> 00:14:17,360
just what you want from a unit testing

00:14:18,020 --> 00:14:21,810
things you're also probably familiar

00:14:19,920 --> 00:14:23,190
with from unit testing are things like

00:14:21,810 --> 00:14:25,740
setup and teardown I mean we were

00:14:23,190 --> 00:14:28,770
looking at setup and teardown for

00:14:25,740 --> 00:14:30,390
selenium they don't call it setup and

00:14:28,770 --> 00:14:34,290
teardown anymore they call it before

00:14:30,390 --> 00:14:38,070
each and after each and it it uses a

00:14:34,290 --> 00:14:42,420
qunit module this is the thing that I

00:14:38,070 --> 00:14:46,920
hate the most about qunit the module

00:14:42,420 --> 00:14:50,280
groupings of tests are implicit by

00:14:46,920 --> 00:14:54,570
ordering so any test declared after this

00:14:50,280 --> 00:14:56,640
is part of the module and they're all

00:14:54,570 --> 00:14:58,740
part of the module until they're the

00:14:56,640 --> 00:15:03,510
file ends or until there's another

00:14:58,740 --> 00:15:10,350
module declaration which is clearly not

00:15:03,510 --> 00:15:12,630
Python so in this case i want to start

00:15:10,350 --> 00:15:18,270
testing I want to start testing my

00:15:12,630 --> 00:15:19,920
backbone views so before each test I'm

00:15:18,270 --> 00:15:22,800
going to create an instance of that view

00:15:19,920 --> 00:15:24,480
and I insert it into the DOM and then

00:15:22,800 --> 00:15:26,730
after each test I rip it out of the Dom

00:15:24,480 --> 00:15:30,420
so for every test that's going to run I

00:15:26,730 --> 00:15:31,860
get a fresh copy of my view that I'm

00:15:30,420 --> 00:15:37,690
going to test

00:15:31,860 --> 00:15:40,720
any state that you attach to this will

00:15:37,690 --> 00:15:43,420
be available using this inside of any

00:15:40,720 --> 00:15:46,210
test in the module so any test after

00:15:43,420 --> 00:15:47,710
this module has access to this view

00:15:46,210 --> 00:15:55,180
because everyone understands how

00:15:47,710 --> 00:16:00,970
JavaScript this works right so here's a

00:15:55,180 --> 00:16:03,880
test that tests this view again I want

00:16:00,970 --> 00:16:07,630
to call a method on my view my view has

00:16:03,880 --> 00:16:10,690
a method called add file and it takes an

00:16:07,630 --> 00:16:12,790
instance of a model so i create an

00:16:10,690 --> 00:16:15,040
instance of the model i call the method

00:16:12,790 --> 00:16:18,640
and I assert that there's a new Dom

00:16:15,040 --> 00:16:20,200
element and I could assert more things

00:16:18,640 --> 00:16:22,390
about that Dom element and this is

00:16:20,200 --> 00:16:25,060
pretty minimal I could assert like the

00:16:22,390 --> 00:16:29,500
text of the Dom element or I could have

00:16:25,060 --> 00:16:34,030
looked at seeing how the Dom element

00:16:29,500 --> 00:16:36,280
relates to the model itself but you know

00:16:34,030 --> 00:16:39,040
there's there's no user interaction here

00:16:36,280 --> 00:16:42,940
there's no user right there's no clicks

00:16:39,040 --> 00:16:45,340
or API calls this is just calling

00:16:42,940 --> 00:16:50,470
methods on objects and asserting what

00:16:45,340 --> 00:16:52,840
happens when you do them as a little

00:16:50,470 --> 00:16:56,410
bonus a cue unit doesn't come with any

00:16:52,840 --> 00:16:58,900
mocking but it does play well with a

00:16:56,410 --> 00:17:01,810
library called Scion j/s I think I'm

00:16:58,900 --> 00:17:06,730
pronouncing that right also super

00:17:01,810 --> 00:17:13,120
googleable so in this case I want to

00:17:06,730 --> 00:17:14,980
mock a thing this view this other view I

00:17:13,120 --> 00:17:17,589
want to test actually handles the

00:17:14,980 --> 00:17:19,540
drag-and-drop so when the file gets

00:17:17,589 --> 00:17:22,390
dropped it makes an API call to the

00:17:19,540 --> 00:17:25,689
server to post and the server is not

00:17:22,390 --> 00:17:30,550
running when you load this page so i

00:17:25,689 --> 00:17:33,100
need to mock that call so in my setup

00:17:30,550 --> 00:17:36,220
teardown you know not set up tear down

00:17:33,100 --> 00:17:38,250
but my before each after each i create

00:17:36,220 --> 00:17:42,190
an instance of the view and then i patch

00:17:38,250 --> 00:17:43,870
the collections create method and again

00:17:42,190 --> 00:17:46,600
and that's a little bit of backbone to

00:17:43,870 --> 00:17:52,330
know here but collection create actually

00:17:46,600 --> 00:17:54,790
does that post to the server and then a

00:17:52,330 --> 00:17:58,270
test which might use this is again I

00:17:54,790 --> 00:18:01,090
want to fake like a user did a

00:17:58,270 --> 00:18:05,980
drag-and-drop so I create a fake Dom

00:18:01,090 --> 00:18:08,740
event called drop and then digging deep

00:18:05,980 --> 00:18:11,770
into how drag and drop works in

00:18:08,740 --> 00:18:14,830
JavaScript when there's a drag and drop

00:18:11,770 --> 00:18:16,930
there's a data transfer and data

00:18:14,830 --> 00:18:19,630
transfer contains a list of files that

00:18:16,930 --> 00:18:23,770
the users dragging but I'm again

00:18:19,630 --> 00:18:29,710
constructing it like a user just clicked

00:18:23,770 --> 00:18:32,710
and created this event and then I call

00:18:29,710 --> 00:18:39,310
the drop callback which would be called

00:18:32,710 --> 00:18:42,160
in this case and assert that create

00:18:39,310 --> 00:18:44,440
would have been called the API call

00:18:42,160 --> 00:18:46,810
would have been called and I can assert

00:18:44,440 --> 00:18:51,010
again more things about what that call

00:18:46,810 --> 00:18:52,720
would be there's some hover state there

00:18:51,010 --> 00:18:54,670
for the drag and drop and it gets

00:18:52,720 --> 00:18:59,380
asserted here as well but it's not

00:18:54,670 --> 00:19:01,180
really part of the mocking to run queue

00:18:59,380 --> 00:19:05,080
unit tests you just load that file in

00:19:01,180 --> 00:19:06,580
your browser and looks like this you

00:19:05,080 --> 00:19:11,020
know highlights all the things as they

00:19:06,580 --> 00:19:13,690
run they run usually pretty fast their

00:19:11,020 --> 00:19:16,300
command line tools to automate this you

00:19:13,690 --> 00:19:18,970
know you can use your favorite node task

00:19:16,300 --> 00:19:22,240
runner like grunt or gulp or you can

00:19:18,970 --> 00:19:25,420
just use Phantom on your own of course

00:19:22,240 --> 00:19:28,750
we also know a cheap way to automate

00:19:25,420 --> 00:19:32,170
things in a browser with Python it's

00:19:28,750 --> 00:19:34,420
called selenium so we could just load

00:19:32,170 --> 00:19:37,840
this file with selenium and then assert

00:19:34,420 --> 00:19:40,920
that there weren't any failures by

00:19:37,840 --> 00:19:43,900
reading the Dom it's kind of a cheap way

00:19:40,920 --> 00:19:47,350
I don't know that I would do this if I

00:19:43,900 --> 00:19:49,690
had a huge test suite of qunit but it

00:19:47,350 --> 00:19:52,420
lowers that barrier of entry like grunt

00:19:49,690 --> 00:19:55,240
and gulp are like non trivial things to

00:19:52,420 --> 00:19:56,070
add to your stack you have to really be

00:19:55,240 --> 00:20:00,360
committed

00:19:56,070 --> 00:20:05,180
to add them so this is a way sort of you

00:20:00,360 --> 00:20:08,090
know get started with Q unit tests and

00:20:05,180 --> 00:20:16,350
you know without all those tooling

00:20:08,090 --> 00:20:21,140
pieces so for this project when you run

00:20:16,350 --> 00:20:24,000
them all these things run there are

00:20:21,140 --> 00:20:29,430
selenium tests which drive this browser

00:20:24,000 --> 00:20:31,880
interaction there are q unit tests which

00:20:29,430 --> 00:20:35,360
cover the client-side interaction or

00:20:31,880 --> 00:20:40,650
actually aren't any Python unit tests

00:20:35,360 --> 00:20:43,730
for all the view code but those are

00:20:40,650 --> 00:20:50,940
pretty those wouldn't be hard to write

00:20:43,730 --> 00:20:52,830
I'm just too lazy but this actually gets

00:20:50,940 --> 00:20:55,110
I think like there's like two or three

00:20:52,830 --> 00:20:57,840
lines that aren't covered in this case

00:20:55,110 --> 00:20:59,850
which are like all the 404 handling like

00:20:57,840 --> 00:21:03,720
you asked for a file that doesn't exist

00:20:59,850 --> 00:21:05,610
like the user can't do that in the user

00:21:03,720 --> 00:21:10,850
like in the user interface the user

00:21:05,610 --> 00:21:10,850
can't easily do that so it's not covered

00:21:14,990 --> 00:21:19,470
some resources obviously the Django

00:21:17,490 --> 00:21:22,860
documentation on testing is you know

00:21:19,470 --> 00:21:26,910
your first go-to place and the Python

00:21:22,860 --> 00:21:31,710
selenium bindings also have great great

00:21:26,910 --> 00:21:34,110
descriptions of all those API methods

00:21:31,710 --> 00:21:38,100
for waiting on events there's different

00:21:34,110 --> 00:21:40,530
ways to find and detect when the Dom

00:21:38,100 --> 00:21:42,660
changes in my cases I was waiting for

00:21:40,530 --> 00:21:46,680
the visibility of an element but you can

00:21:42,660 --> 00:21:49,830
wait for the title of the page to change

00:21:46,680 --> 00:21:52,440
you can wait for things to disappear or

00:21:49,830 --> 00:21:55,050
reappear there's there's lots of

00:21:52,440 --> 00:21:57,990
different ways you can use that the

00:21:55,050 --> 00:22:03,180
queue unit docks and the scion j/s docs

00:21:57,990 --> 00:22:05,490
also very helpful some photos are still

00:22:03,180 --> 00:22:08,390
from Flickr Creative Commons thank you

00:22:05,490 --> 00:22:08,390
very much

00:22:09,210 --> 00:22:13,990
my slides are available in this

00:22:12,010 --> 00:22:17,860
extraordinarily long link which he'll

00:22:13,990 --> 00:22:24,640
tweet out I didn't use the Libyan DNS

00:22:17,860 --> 00:22:27,910
bit ly com to do it but we have a book

00:22:24,640 --> 00:22:30,460
signing at 250 as well we actually do

00:22:27,910 --> 00:22:32,890
have like five minutes so i will take

00:22:30,460 --> 00:22:34,870
questions you now or then or everyone

00:22:32,890 --> 00:22:39,480
can run and get some lunch or find out

00:22:34,870 --> 00:22:39,480

YouTube URL: https://www.youtube.com/watch?v=5AWuT5hEgRA


