Title: DjangoCon US 2015 - Hunting for Treasure in Django by Sebastian Vetter
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	Hunting for Treasure in Django  by Sebastian Vetter

Django is a comprehensive web framework that provides well-defined concepts such as request, response, middleware and view that make our lives as perfectionists with deadlines much easier. What many of us are not aware of is the rich collection of utilities and tooling around these concepts that are part of the famework. Decorators, helper functions and context managers that are used internally but can make life as a developer much easier as well.

Introduction (~ 2 mins)

A little bit about me.
Why am I talking about this?
Django's Hidden Treasures (~ 4 mins)

The reason for this talks.
What do I consider hidden treasures?
Which Django modules are interesting?
Are they documented and were do I find it?
Examples of hidden treasures:

A quick introduction of the module.
What's a possible use case for it?
How does it solve it?
Where is it used in the Django?

cached_property (~ 2 mins)

import_string (~ 2 mins)

lazy, LazyObject and lazy_property (~ 3 mins)

decorators module (~ 4 mins)

classonlymethod
decorator_from_middleware
update_wrapper and wraps (technically not Django)
django.views (~ 4 mins)

debug.cleanse_setting
decorators.debug.sensitive_parameters
decorators.debug.sensitive_post_parameters
Wrapping up (~ 2 mins)

Django documentation links.
Some suggestions for further investigation.
Captions: 
	00:00:16,220 --> 00:00:25,080
hello thanks for the introduction yeah

00:00:21,900 --> 00:00:29,220
as Adam just said I'm Sebastian I am

00:00:25,080 --> 00:00:32,809
currently my main profession is a django

00:00:29,220 --> 00:00:36,540
web developer I've done some Python

00:00:32,809 --> 00:00:38,870
academic work I work for a company

00:00:36,540 --> 00:00:43,140
called modify in Vancouver in Canada

00:00:38,870 --> 00:00:46,110
which I just moved to about six seven

00:00:43,140 --> 00:00:49,170
months ago and if you want to find me

00:00:46,110 --> 00:00:51,629
online I'm usually found as alva sheet

00:00:49,170 --> 00:00:53,879
and the slides for this talk are going

00:00:51,629 --> 00:00:56,070
to be online on speaker deck this is the

00:00:53,879 --> 00:00:59,670
bitly link i'll have that later on the

00:00:56,070 --> 00:01:03,390
slides as well but let's find some

00:00:59,670 --> 00:01:06,210
treasures what I mean by that is we're

00:01:03,390 --> 00:01:09,810
all or most of us are familiar with

00:01:06,210 --> 00:01:12,600
firms and views and all the sort of good

00:01:09,810 --> 00:01:17,310
things that Django has to offer and the

00:01:12,600 --> 00:01:19,650
things that we use Django for but they

00:01:17,310 --> 00:01:22,130
are an old hat for those of us that have

00:01:19,650 --> 00:01:25,350
worked with it for a long time as well

00:01:22,130 --> 00:01:27,780
so I'm trying to talk about a little bit

00:01:25,350 --> 00:01:33,710
more about what the hidden treasures are

00:01:27,780 --> 00:01:36,659
and what I mean by that is basically

00:01:33,710 --> 00:01:39,180
when you look through the code in Django

00:01:36,659 --> 00:01:41,360
you come across like utility functions

00:01:39,180 --> 00:01:44,220
and things like that that are

00:01:41,360 --> 00:01:46,439
implemented in Django to facilitate all

00:01:44,220 --> 00:01:48,990
those other features but they might

00:01:46,439 --> 00:01:51,540
actually be useful in your project or

00:01:48,990 --> 00:01:53,579
for your use case and you don't have to

00:01:51,540 --> 00:01:58,890
write and maintain those little pieces

00:01:53,579 --> 00:02:00,930
of code yourself the first question

00:01:58,890 --> 00:02:04,020
around that is where do you find that

00:02:00,930 --> 00:02:07,320
and the way I found those was mostly

00:02:04,020 --> 00:02:09,479
through either looking at the Django

00:02:07,320 --> 00:02:12,450
source code itself because I wanted to

00:02:09,479 --> 00:02:13,380
try and understand this or that piece of

00:02:12,450 --> 00:02:15,360
code or

00:02:13,380 --> 00:02:17,370
something went wrong and I didn't quite

00:02:15,360 --> 00:02:19,440
understand what I did wrong so I had to

00:02:17,370 --> 00:02:21,810
dig into the code to understand it

00:02:19,440 --> 00:02:23,670
properly class-based view and they're

00:02:21,810 --> 00:02:27,870
nested nature are a very good example

00:02:23,670 --> 00:02:30,570
for that and obviously working with

00:02:27,870 --> 00:02:33,780
smart people that or talking to smart

00:02:30,570 --> 00:02:35,610
people that told me oh basically this

00:02:33,780 --> 00:02:37,740
thing that you were doing over here

00:02:35,610 --> 00:02:39,750
there is something in Django that

00:02:37,740 --> 00:02:43,790
already does that and you can just use

00:02:39,750 --> 00:02:47,130
it and then there was my personal

00:02:43,790 --> 00:02:49,620
favorite source of information is a

00:02:47,130 --> 00:02:52,110
funky Bob that I had the pleasure to

00:02:49,620 --> 00:02:57,330
meet over and over again during my time

00:02:52,110 --> 00:03:00,960
in mebane but he's like the person to

00:02:57,330 --> 00:03:04,140
ask questions on IRC and he's a great

00:03:00,960 --> 00:03:06,930
resource but generally IRC is a great

00:03:04,140 --> 00:03:09,510
resource to ask questions and then there

00:03:06,930 --> 00:03:11,550
is sprinting at conferences and that

00:03:09,510 --> 00:03:13,890
goes back to like meeting smart people

00:03:11,550 --> 00:03:16,110
and talking to those people learning

00:03:13,890 --> 00:03:20,040
what other people do and picking their

00:03:16,110 --> 00:03:22,740
brains so what I'll be doing is I'll

00:03:20,040 --> 00:03:27,120
just pick a few things out that I've

00:03:22,740 --> 00:03:30,360
been that now I found really useful and

00:03:27,120 --> 00:03:32,820
point out like how I've used them and

00:03:30,360 --> 00:03:36,720
what might be a good way of for you to

00:03:32,820 --> 00:03:40,580
use those one of my personal favorites

00:03:36,720 --> 00:03:44,670
probably is the cash property decorator

00:03:40,580 --> 00:03:46,920
so it is basically just a decorator what

00:03:44,670 --> 00:03:49,560
it does it's all in the name it's a

00:03:46,920 --> 00:03:52,490
property on a class the return value

00:03:49,560 --> 00:03:55,590
gets cached so you don't have to re

00:03:52,490 --> 00:03:58,380
compute whatever it is inside that

00:03:55,590 --> 00:04:00,200
function so this is basically what it

00:03:58,380 --> 00:04:03,180
looks like you have your class and

00:04:00,200 --> 00:04:06,750
instead of using the app property

00:04:03,180 --> 00:04:09,480
decorator there is a cash property

00:04:06,750 --> 00:04:13,020
decorator provided by Django that cash

00:04:09,480 --> 00:04:15,540
as the result of the function now this

00:04:13,020 --> 00:04:18,630
can be useful for things like very

00:04:15,540 --> 00:04:21,960
compute heavy properties or a property

00:04:18,630 --> 00:04:24,990
that you expose that relates to multiple

00:04:21,960 --> 00:04:26,950
different tables in a database and you

00:04:24,990 --> 00:04:30,160
have to aggregate data

00:04:26,950 --> 00:04:35,010
some sort or you're accessing another

00:04:30,160 --> 00:04:40,020
web api and retrieve data that way so

00:04:35,010 --> 00:04:44,290
sorry as an example let's take this

00:04:40,020 --> 00:04:47,320
class of a color object and we have that

00:04:44,290 --> 00:04:49,840
object as a hex value and we have this

00:04:47,320 --> 00:04:52,060
amazing remote API that for any given

00:04:49,840 --> 00:04:55,630
hex value of a color gives you the name

00:04:52,060 --> 00:04:58,030
and you expose that as a property which

00:04:55,630 --> 00:05:00,730
means every time you have that you

00:04:58,030 --> 00:05:03,490
access that property you'll make a

00:05:00,730 --> 00:05:06,730
remote call to the API and this is what

00:05:03,490 --> 00:05:09,220
it looks like you create your color you

00:05:06,730 --> 00:05:11,350
access the name attribute in this case

00:05:09,220 --> 00:05:14,200
the property and it makes a request and

00:05:11,350 --> 00:05:17,230
the next time you request that property

00:05:14,200 --> 00:05:22,030
is doing a remote call to the API as

00:05:17,230 --> 00:05:24,670
well which is obviously not the most

00:05:22,030 --> 00:05:26,650
efficient way of doing it and then you

00:05:24,670 --> 00:05:28,720
get to the point where you think like

00:05:26,650 --> 00:05:31,000
okay I can just cash that somewhere on

00:05:28,720 --> 00:05:33,670
the object and one of the ways I've done

00:05:31,000 --> 00:05:35,470
that before is you have an under name on

00:05:33,670 --> 00:05:38,650
the same object and you check whether

00:05:35,470 --> 00:05:41,350
debt is none or not and then you store

00:05:38,650 --> 00:05:44,620
it there and only returned the cash

00:05:41,350 --> 00:05:47,680
value after that but it can be so much

00:05:44,620 --> 00:05:51,040
easier it basically comes down to

00:05:47,680 --> 00:05:53,740
importing the cash property from Django

00:05:51,040 --> 00:05:57,700
utils functional and then just wrapping

00:05:53,740 --> 00:05:59,860
their property in cash property and it

00:05:57,700 --> 00:06:02,560
ends up being exactly that you're

00:05:59,860 --> 00:06:05,200
basically just doing that remote call

00:06:02,560 --> 00:06:07,600
once and after that you have it cached

00:06:05,200 --> 00:06:09,850
on the property and internally it's

00:06:07,600 --> 00:06:15,430
basically just cashed in the double

00:06:09,850 --> 00:06:17,290
under the only thing in this

00:06:15,430 --> 00:06:20,500
specific case to be aware of is query

00:06:17,290 --> 00:06:24,520
set which is the thing that has bitten

00:06:20,500 --> 00:06:26,290
me once or twice you create a query set

00:06:24,520 --> 00:06:28,660
you return that and you think oh yeah

00:06:26,290 --> 00:06:30,880
that's cash so I don't hit the database

00:06:28,660 --> 00:06:33,520
but that's actually not what happens

00:06:30,880 --> 00:06:36,000
because the query sets are lazily

00:06:33,520 --> 00:06:40,400
evaluated which means you're just

00:06:36,000 --> 00:06:42,949
cashing the wrapper query the coin

00:06:40,400 --> 00:06:45,020
as a rapper and not the actual database

00:06:42,949 --> 00:06:48,259
call so if you like in this case

00:06:45,020 --> 00:06:52,310
retrieve a list of objects you have to

00:06:48,259 --> 00:06:54,350
turn that into an actual list or into a

00:06:52,310 --> 00:06:58,940
set or something like that for it to be

00:06:54,350 --> 00:07:03,669
cached as an actual list of objects in

00:06:58,940 --> 00:07:06,919
the cache property and that's it and

00:07:03,669 --> 00:07:10,720
basically all you need to know is Django

00:07:06,919 --> 00:07:13,070
utils functional import cash property

00:07:10,720 --> 00:07:15,860
these links are basically on the slides

00:07:13,070 --> 00:07:18,620
for if you want to look into the slides

00:07:15,860 --> 00:07:22,490
and find some references this references

00:07:18,620 --> 00:07:26,330
the dock center sources so this is our

00:07:22,490 --> 00:07:29,030
first treasure a next favorite of mine

00:07:26,330 --> 00:07:32,449
something that I've used a little bit

00:07:29,030 --> 00:07:35,979
and found to be used a little bit is the

00:07:32,449 --> 00:07:39,110
import string in third-party project

00:07:35,979 --> 00:07:42,229
what does is basically you pass it a

00:07:39,110 --> 00:07:45,650
string that is a dotted path and that

00:07:42,229 --> 00:07:47,900
points to a class or a function and then

00:07:45,650 --> 00:07:51,320
it validates that that's a valid path

00:07:47,900 --> 00:07:53,510
and it returns the imported actual

00:07:51,320 --> 00:07:59,210
function or a class that you point to

00:07:53,510 --> 00:08:01,490
and in the case of the request library

00:07:59,210 --> 00:08:04,400
for example you could just pass in

00:08:01,490 --> 00:08:07,340
requests or get as a string and what you

00:08:04,400 --> 00:08:10,159
get back from the import string function

00:08:07,340 --> 00:08:12,199
is the function object and you can use

00:08:10,159 --> 00:08:15,139
that exactly the same way you would if

00:08:12,199 --> 00:08:20,380
you import requests and use requests or

00:08:15,139 --> 00:08:22,820
get so where is that going to be useful

00:08:20,380 --> 00:08:25,159
well as i said in third party

00:08:22,820 --> 00:08:28,190
applications where you're providing

00:08:25,159 --> 00:08:31,209
functionality to another developer and

00:08:28,190 --> 00:08:34,760
that developer doesn't have access to

00:08:31,209 --> 00:08:37,219
the internals of your library like there

00:08:34,760 --> 00:08:39,260
is only monkey patching to extend some

00:08:37,219 --> 00:08:42,229
very custom functionality or things like

00:08:39,260 --> 00:08:46,250
that that you could do so in this case

00:08:42,229 --> 00:08:47,779
it comes in very handy to say in the

00:08:46,250 --> 00:08:50,510
settings for Django I can basically

00:08:47,779 --> 00:08:54,140
specify a function or a class that has

00:08:50,510 --> 00:08:55,880
that complies with the specific API

00:08:54,140 --> 00:09:00,830
and then I can use that instead of the

00:08:55,880 --> 00:09:04,100
default so as an example in a web store

00:09:00,830 --> 00:09:09,160
a product is uniquely identified by a

00:09:04,100 --> 00:09:12,170
slug in that's used in the URL and then

00:09:09,160 --> 00:09:15,020
you also want to provide your users that

00:09:12,170 --> 00:09:17,770
you have this Web Store framework

00:09:15,020 --> 00:09:20,660
written for to customize that slug and

00:09:17,770 --> 00:09:24,020
because I'm a sucker for emojis I want

00:09:20,660 --> 00:09:28,880
all of my slugs to be emojis so I'm

00:09:24,020 --> 00:09:31,700
using this custom emoji slugga fire and

00:09:28,880 --> 00:09:35,360
then internally as the person writing

00:09:31,700 --> 00:09:37,760
that piece of web store framework called

00:09:35,360 --> 00:09:41,630
I can basically just take that string

00:09:37,760 --> 00:09:45,140
and say import string and get back

00:09:41,630 --> 00:09:48,770
whatever that user has or that developer

00:09:45,140 --> 00:09:51,860
has written as custom code pass the

00:09:48,770 --> 00:09:54,950
values as defined by my API contract and

00:09:51,860 --> 00:09:57,470
then return that value there is

00:09:54,950 --> 00:10:00,140
something to that I'm not taking into

00:09:57,470 --> 00:10:01,760
account here import string still raises

00:10:00,140 --> 00:10:03,620
an import error if there's something

00:10:01,760 --> 00:10:05,600
wrong so you have to catch that yourself

00:10:03,620 --> 00:10:07,910
but it's something that's really useful

00:10:05,600 --> 00:10:11,630
because you don't have to provide all

00:10:07,910 --> 00:10:14,030
those little checks and things like that

00:10:11,630 --> 00:10:16,250
that you have to go through when you do

00:10:14,030 --> 00:10:22,190
this manually that's all taken care of

00:10:16,250 --> 00:10:24,470
by Django so Django utils module loading

00:10:22,190 --> 00:10:29,120
import import string is all that you

00:10:24,470 --> 00:10:32,030
need to remember when it's been called

00:10:29,120 --> 00:10:36,560
import by path previously I think it was

00:10:32,030 --> 00:10:40,580
deprecated in 1.6 and it will be removed

00:10:36,560 --> 00:10:44,690
in 1.9 so there might be some

00:10:40,580 --> 00:10:47,900
differences in naming there and this is

00:10:44,690 --> 00:10:55,220
the second treasure that we found that I

00:10:47,900 --> 00:10:59,600
found hope you so the next one I want to

00:10:55,220 --> 00:11:05,140
look at is the lazy function and lazy

00:10:59,600 --> 00:11:07,610
object and we've definitely all used it

00:11:05,140 --> 00:11:10,610
and that's because

00:11:07,610 --> 00:11:12,230
django settings are basically based on

00:11:10,610 --> 00:11:14,329
that sort of concept I'm not quite sure

00:11:12,230 --> 00:11:16,370
whether that's the reason why the lazy

00:11:14,329 --> 00:11:18,620
object thing exists in the first place

00:11:16,370 --> 00:11:22,010
but it's one of the most prominent

00:11:18,620 --> 00:11:27,050
places where it's used and what it does

00:11:22,010 --> 00:11:32,450
is basically it provides a way of

00:11:27,050 --> 00:11:36,100
delaying the execution of an object by

00:11:32,450 --> 00:11:38,630
wrapping that callable in another object

00:11:36,100 --> 00:11:41,240
so as I said it's used in the Django

00:11:38,630 --> 00:11:44,450
functions and one of the reasons it

00:11:41,240 --> 00:11:47,480
exists is because the way Django is

00:11:44,450 --> 00:11:49,700
executed when you load it some of the

00:11:47,480 --> 00:11:51,860
pieces that you might rely on in other

00:11:49,700 --> 00:11:55,370
parts of your code might not be

00:11:51,860 --> 00:11:58,100
available at that point that you're

00:11:55,370 --> 00:12:04,519
executing that function and one of the

00:11:58,100 --> 00:12:09,019
best examples is the having a reverse

00:12:04,519 --> 00:12:11,839
lookup for a URL in your on the either

00:12:09,019 --> 00:12:14,899
the class attribute level or on the

00:12:11,839 --> 00:12:17,810
module level of your code because that

00:12:14,899 --> 00:12:20,300
code is executed as at Paris time and

00:12:17,810 --> 00:12:22,910
you can't really be sure that your URL

00:12:20,300 --> 00:12:25,399
config is fully loaded at that point

00:12:22,910 --> 00:12:29,300
this might actually just return an empty

00:12:25,399 --> 00:12:32,899
string and you don't really know why so

00:12:29,300 --> 00:12:35,480
for this is a slightly bad example

00:12:32,899 --> 00:12:39,170
because there is already a reverse under

00:12:35,480 --> 00:12:42,470
lazy as well as some some other under

00:12:39,170 --> 00:12:45,079
lazy function in in Django but it's a

00:12:42,470 --> 00:12:50,899
very easy way to illustrate the sort of

00:12:45,079 --> 00:12:54,949
problem and when one of the problems

00:12:50,899 --> 00:12:57,649
with that where I actually had to make

00:12:54,949 --> 00:13:00,699
or could make good use of that I just

00:12:57,649 --> 00:13:04,459
came across recently which is per user

00:13:00,699 --> 00:13:06,410
storage I had a model and a file field

00:13:04,459 --> 00:13:09,980
on that but i wanted to store those

00:13:06,410 --> 00:13:13,300
files in a user-specific bucket so I had

00:13:09,980 --> 00:13:17,569
s3 and because we don't have per user

00:13:13,300 --> 00:13:19,960
storage in Django it was basically in a

00:13:17,569 --> 00:13:23,430
way of okay I've got a writer

00:13:19,960 --> 00:13:26,380
rapper and provide that but as three

00:13:23,430 --> 00:13:29,590
especially the general storage

00:13:26,380 --> 00:13:31,540
implementation fell over at that point

00:13:29,590 --> 00:13:36,190
when I was starting to load my

00:13:31,540 --> 00:13:40,450
application and it was like why well it

00:13:36,190 --> 00:13:45,430
turned out that as the s3 storage were

00:13:40,450 --> 00:13:48,040
basically trying to connect to s3 at the

00:13:45,430 --> 00:13:50,800
point in time when the file was parsed

00:13:48,040 --> 00:13:52,660
and then because I didn't have my

00:13:50,800 --> 00:13:54,430
credentials from the settings file at

00:13:52,660 --> 00:13:55,660
that point it would just say like I

00:13:54,430 --> 00:13:58,930
can't really connect with our

00:13:55,660 --> 00:14:02,470
credentials so because I couldn't put it

00:13:58,930 --> 00:14:04,570
in any other place the easiest way to

00:14:02,470 --> 00:14:07,000
get around that was basically having

00:14:04,570 --> 00:14:08,920
those three lines of code in there you

00:14:07,000 --> 00:14:11,740
write a function that returns the object

00:14:08,920 --> 00:14:15,220
that you actually want to have and then

00:14:11,740 --> 00:14:17,560
you create a simple lazy object and a

00:14:15,220 --> 00:14:20,650
simple lazy object will only return and

00:14:17,560 --> 00:14:23,380
instantiate that object that you

00:14:20,650 --> 00:14:25,480
returned in your function at the point

00:14:23,380 --> 00:14:28,480
when it's accessed for the first time

00:14:25,480 --> 00:14:35,230
and then you can just stick your private

00:14:28,480 --> 00:14:37,780
storage object the lazy object into your

00:14:35,230 --> 00:14:42,910
file field definition and it just works

00:14:37,780 --> 00:14:46,330
so that saved me a lot of time and once

00:14:42,910 --> 00:14:50,430
again you'll find those two in the

00:14:46,330 --> 00:14:55,690
utility of functional excuse me the

00:14:50,430 --> 00:15:00,630
Johnny Utah's functional module and it's

00:14:55,690 --> 00:15:07,240
actually fairly easy to use them and

00:15:00,630 --> 00:15:10,660
that is our third treasure and then the

00:15:07,240 --> 00:15:13,960
last one that I'd like to look at is the

00:15:10,660 --> 00:15:18,910
request factory that's actually one of

00:15:13,960 --> 00:15:21,070
the things that has saved me quite a bit

00:15:18,910 --> 00:15:23,050
of time in testing so it's not something

00:15:21,070 --> 00:15:26,560
that you would actually use in your

00:15:23,050 --> 00:15:28,120
day-to-day code that you're running in

00:15:26,560 --> 00:15:32,410
your application but it's something that

00:15:28,120 --> 00:15:37,540
will actually help you during testing

00:15:32,410 --> 00:15:45,519
so it's also fairly simple it takes a

00:15:37,540 --> 00:15:48,579
URL and the HD sorry the HTTP method

00:15:45,519 --> 00:15:51,759
that you're trying to use and then from

00:15:48,579 --> 00:15:54,009
that it creates the jungle request

00:15:51,759 --> 00:15:56,139
object that you're familiar with in your

00:15:54,009 --> 00:15:58,420
actual code as well so it behaves

00:15:56,139 --> 00:16:02,439
exactly the same way but you don't have

00:15:58,420 --> 00:16:05,319
to go through a full request response

00:16:02,439 --> 00:16:10,889
cycle as you would do with something

00:16:05,319 --> 00:16:13,779
like the client test case in Django so

00:16:10,889 --> 00:16:18,430
the easiest way of using it is basically

00:16:13,779 --> 00:16:20,709
it's in the Django test module and you

00:16:18,430 --> 00:16:22,920
just import it from there you use it

00:16:20,709 --> 00:16:25,660
similar to what you would do with

00:16:22,920 --> 00:16:27,939
requests for example you have a get or a

00:16:25,660 --> 00:16:30,339
post and you pass in the URL and the

00:16:27,939 --> 00:16:36,610
parameters that you want to use with

00:16:30,339 --> 00:16:39,810
that and as I said one of the things

00:16:36,610 --> 00:16:42,430
that I've used it for is testing

00:16:39,810 --> 00:16:45,639
requests related code for example in

00:16:42,430 --> 00:16:48,600
views and something like that where you

00:16:45,639 --> 00:16:51,160
would have to mock quite a lot of

00:16:48,600 --> 00:16:53,649
functionality of the request so that it

00:16:51,160 --> 00:16:57,759
behaves like a request when which

00:16:53,649 --> 00:16:59,860
basically then ends up you writing a lot

00:16:57,759 --> 00:17:02,079
of mocking code just to get that little

00:16:59,860 --> 00:17:03,910
piece of functionality when there is

00:17:02,079 --> 00:17:08,709
something that's already there that can

00:17:03,910 --> 00:17:11,799
construct it so one very good use case

00:17:08,709 --> 00:17:14,409
for that in my experience is also

00:17:11,799 --> 00:17:17,439
writing Miller were classes where you

00:17:14,409 --> 00:17:19,539
basically have those requests responses

00:17:17,439 --> 00:17:22,240
that are getting passed in and processed

00:17:19,539 --> 00:17:28,900
in certain ways and they can get fairly

00:17:22,240 --> 00:17:30,850
complex so in this case you're basically

00:17:28,900 --> 00:17:33,190
you basically just have some middle

00:17:30,850 --> 00:17:35,830
where you've got your logic in the

00:17:33,190 --> 00:17:38,169
process request and it expects a request

00:17:35,830 --> 00:17:40,390
so you should pass in a request or

00:17:38,169 --> 00:17:43,210
something that looks extremely similar

00:17:40,390 --> 00:17:45,150
to what a request looks like and based

00:17:43,210 --> 00:17:49,710
on that sort of

00:17:45,150 --> 00:17:52,950
having the mocking logic in that can be

00:17:49,710 --> 00:17:54,600
quite substantial so one way of getting

00:17:52,950 --> 00:17:57,240
around that is basically have your test

00:17:54,600 --> 00:18:01,020
function import the request Factory and

00:17:57,240 --> 00:18:03,270
then having creating your request you

00:18:01,020 --> 00:18:04,950
can even pass in query parameters or

00:18:03,270 --> 00:18:07,440
things like that and then you just

00:18:04,950 --> 00:18:10,290
passing that request or manipulate that

00:18:07,440 --> 00:18:12,870
request in some specific way so you you

00:18:10,290 --> 00:18:15,330
know the type of data that you're

00:18:12,870 --> 00:18:20,160
passing in and you can test against that

00:18:15,330 --> 00:18:25,920
and then obviously you proceed with your

00:18:20,160 --> 00:18:29,700
test as you normally would and that's

00:18:25,920 --> 00:18:32,670
basically it that's the you find it in

00:18:29,700 --> 00:18:34,800
Django test and it might make your test

00:18:32,670 --> 00:18:36,660
a little bit faster especially when

00:18:34,800 --> 00:18:40,920
you're sort of looking at the more unit

00:18:36,660 --> 00:18:43,050
type unit test type testing and it saves

00:18:40,920 --> 00:18:49,340
you a lot of time in terms of mocking

00:18:43,050 --> 00:18:53,310
things and the treasure is now all yours

00:18:49,340 --> 00:18:57,570
There is obviously there is a lot of

00:18:53,310 --> 00:19:01,320
additional treasures in the Django code

00:18:57,570 --> 00:19:04,470
base and especially Django utils is a

00:19:01,320 --> 00:19:07,050
trough of just like those little

00:19:04,470 --> 00:19:08,940
functions that clean up your strings and

00:19:07,050 --> 00:19:11,910
and all those types of things that are

00:19:08,940 --> 00:19:15,030
really really useful and maybe just for

00:19:11,910 --> 00:19:17,850
your specific use case but some of them

00:19:15,030 --> 00:19:20,910
aren't quite well documented in the

00:19:17,850 --> 00:19:23,940
Django docks so I would encourage

00:19:20,910 --> 00:19:26,660
everyone to just take a peek under the

00:19:23,940 --> 00:19:29,700
hood and look at some of those little

00:19:26,660 --> 00:19:32,460
functions and things like that just to

00:19:29,700 --> 00:19:35,070
see what is in there and maybe there is

00:19:32,460 --> 00:19:37,110
something that you see okay I've

00:19:35,070 --> 00:19:43,530
actually written this in five places

00:19:37,110 --> 00:19:47,250
maybe I should just use that and that

00:19:43,530 --> 00:19:49,410
got me quicker through my top than I

00:19:47,250 --> 00:19:54,530
intended but that gives you a little bit

00:19:49,410 --> 00:19:54,530
of time for questions thanks

00:20:02,620 --> 00:20:11,330
hey hello there yeah and so I have a

00:20:09,200 --> 00:20:13,130
question kind of led to this is there

00:20:11,330 --> 00:20:14,480
anything that isn't a django treasure do

00:20:13,130 --> 00:20:15,950
you think should be like it's something

00:20:14,480 --> 00:20:17,660
that is there a pattern you can think of

00:20:15,950 --> 00:20:20,030
that should go into one of these places

00:20:17,660 --> 00:20:23,510
you're talking about and Django yes what

00:20:20,030 --> 00:20:27,200
would you think it is it's I think the

00:20:23,510 --> 00:20:31,280
swappable models are a piece of private

00:20:27,200 --> 00:20:34,370
api that I really liked because I had a

00:20:31,280 --> 00:20:38,510
sort of CMS type use case um where it

00:20:34,370 --> 00:20:43,730
was extremely handy from a library

00:20:38,510 --> 00:20:47,390
perspective to expose or give the user

00:20:43,730 --> 00:20:51,310
the developer the ability to swap out a

00:20:47,390 --> 00:20:53,990
little bit of customized functionality

00:20:51,310 --> 00:20:55,730
without having to go through like

00:20:53,990 --> 00:20:58,010
multi-table inheritance or things like

00:20:55,730 --> 00:21:00,440
that right okay so I think that's a

00:20:58,010 --> 00:21:03,890
that's a very that would be a very nice

00:21:00,440 --> 00:21:15,160
piece of call to make migrations

00:21:03,890 --> 00:21:15,160
impossible but yes thank you any

00:21:20,360 --> 00:21:24,679
okay so you were you mentioned this

00:21:22,610 --> 00:21:26,330
there are these things hidden in utils

00:21:24,679 --> 00:21:27,590
some of them admittedly we've hidden

00:21:26,330 --> 00:21:28,460
them because we kind of like people not

00:21:27,590 --> 00:21:29,840
to use them because then they're

00:21:28,460 --> 00:21:33,710
officially have to be supported but for

00:21:29,840 --> 00:21:34,850
those that are good how do we get the

00:21:33,710 --> 00:21:36,080
message out there is it is it just a

00:21:34,850 --> 00:21:37,520
matter of dropping another line in the

00:21:36,080 --> 00:21:40,520
docks or is it just going to get lost if

00:21:37,520 --> 00:21:43,309
that sort of stuff in there and well the

00:21:40,520 --> 00:21:45,230
ones that I've tried to pick here as

00:21:43,309 --> 00:21:47,330
well are the ones that have public

00:21:45,230 --> 00:21:51,980
documentation and are considered public

00:21:47,330 --> 00:21:53,870
API so the documentation is there I'm

00:21:51,980 --> 00:21:56,690
not quite sure what the best way would

00:21:53,870 --> 00:21:59,510
be to be more prominent about here is

00:21:56,690 --> 00:22:01,520
like cash property I think cash property

00:21:59,510 --> 00:22:05,330
is actually one of the things that quite

00:22:01,520 --> 00:22:08,179
a few people know because I think Daniel

00:22:05,330 --> 00:22:09,980
Daniel Greenfield Roy wrote a package

00:22:08,179 --> 00:22:12,590
that basically provides that

00:22:09,980 --> 00:22:14,510
functionality outside of Django so there

00:22:12,590 --> 00:22:17,720
must be demand of using it outside of

00:22:14,510 --> 00:22:22,540
Django as well and some people must know

00:22:17,720 --> 00:22:26,179
that it exists I wouldn't know what it's

00:22:22,540 --> 00:22:29,059
probably just like telling people more

00:22:26,179 --> 00:22:31,309
about it and like pointing out when you

00:22:29,059 --> 00:22:33,650
see somewhere in a in an open source

00:22:31,309 --> 00:22:36,860
package that someone's writing something

00:22:33,650 --> 00:22:39,110
that actually has existing Django

00:22:36,860 --> 00:22:41,120
functionality saying like by the way you

00:22:39,110 --> 00:22:46,179
don't have to maintain that you can

00:22:41,120 --> 00:22:49,179
remove those 15 5 20 lines of code

00:22:46,179 --> 00:22:49,179
thanks

00:22:54,700 --> 00:22:59,239
so probably a dumb question that

00:22:57,679 --> 00:23:02,570
everybody else knows the answer to but I

00:22:59,239 --> 00:23:04,070
don't so um we mentioned early on one of

00:23:02,570 --> 00:23:08,139
the good places to find treasure was the

00:23:04,070 --> 00:23:14,960
Django IRC channel mm-hmm where is that

00:23:08,139 --> 00:23:21,139
um so the IRC channel is on freenode

00:23:14,960 --> 00:23:25,999
it's hashtag hash Django for the Django

00:23:21,139 --> 00:23:29,210
room and there is a gazillion chat

00:23:25,999 --> 00:23:31,460
clients out there that support IRC there

00:23:29,210 --> 00:23:33,710
is it depends on like this sort of

00:23:31,460 --> 00:23:36,169
operating system that you're working on

00:23:33,710 --> 00:23:38,619
what your preference is whether you

00:23:36,169 --> 00:23:43,820
prefer working in a text environment or

00:23:38,619 --> 00:23:45,799
more you I type environment but there

00:23:43,820 --> 00:23:48,349
are I think if you're the best way

00:23:45,799 --> 00:23:51,919
probably is to just search for IRC on

00:23:48,349 --> 00:23:53,899
the in the Django docks and there is a

00:23:51,919 --> 00:23:57,039
reference there somewhere where to find

00:23:53,899 --> 00:23:57,039
it and how to set it up

00:24:02,669 --> 00:24:07,990
alright there we go I just wanted to

00:24:05,289 --> 00:24:10,600
share one of my little spots for hidden

00:24:07,990 --> 00:24:12,249
treasures which is lots of the functions

00:24:10,600 --> 00:24:14,919
that are exposed to the template tags

00:24:12,249 --> 00:24:16,330
and filters are also really useful else

00:24:14,919 --> 00:24:18,340
wearing your code base that have nothing

00:24:16,330 --> 00:24:20,830
to do with display templates like you

00:24:18,340 --> 00:24:22,539
need to store clarified values in your

00:24:20,830 --> 00:24:25,749
database for something you can easily go

00:24:22,539 --> 00:24:28,240
from Django default filters import

00:24:25,749 --> 00:24:29,679
slugga Phi and use that against you know

00:24:28,240 --> 00:24:31,149
first middle and last name or whatever

00:24:29,679 --> 00:24:33,039
and lots of those template tags and

00:24:31,149 --> 00:24:36,249
filters can be imported and used the

00:24:33,039 --> 00:24:41,190
same way outside a template land yeah

00:24:36,249 --> 00:24:41,190

YouTube URL: https://www.youtube.com/watch?v=vglyQXyhc8o


