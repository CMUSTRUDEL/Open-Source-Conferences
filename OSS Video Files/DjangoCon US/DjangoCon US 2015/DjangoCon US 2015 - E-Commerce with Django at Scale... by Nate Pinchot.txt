Title: DjangoCon US 2015 - E-Commerce with Django at Scale... by Nate Pinchot
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	E-Commerce with Django at Scale: Effective Performance Lessons Learned

I'll take you through the most effective performance lessons we've learned and show you how you can implement them (with example code).

TWO-PASS CACHING WITH CLASS-BASED VIEWS

By far, this is one of the most effective performance optimizations we have done in terms of HTTP response time.

Using class-based views, we are able to do two-pass caching. On the first pass of the view, we render everything that's not specific to the user. No AJAX calls needed to get user specific content on the page. I'll show you how.

DATA CACHING STRATEGY

I'll review how we use multiple levels of data caching to greatly improve the amount of time it takes to rebuild the entire cache.

DB READ REPLICAS FOR PERFORMANCE / CUSTOM BACKEND FOR FAILOVER

Read replica databases are great for performance. You've set up a few read replicas and implemented a fancy new database router which sends read queries to the read replicas (round robin) for any data that doesn't need to be up-to-the-millisecond fresh (e.g. blog posts, product descriptions).

You're sitting back and relishing in the improved performance when one of your database read replicas goes offline. Now what? I'll show you how we implemented a custom database backend to handle this gracefully.

MIGRATIONS RULES

This is less of a performance optimization and more of a set of rules we try to stick to. I'll review some snafus we've had and how we avoided future production issues while keeping the site at 99% uptime.
Captions: 
	00:00:15,680 --> 00:00:20,939
thank you all for coming so my name is

00:00:18,750 --> 00:00:23,340
Nate pincha and this talk is ecommerce

00:00:20,939 --> 00:00:25,769
with Django at scale effective

00:00:23,340 --> 00:00:26,760
performance lessons learned so I'm going

00:00:25,769 --> 00:00:28,320
to take you through some of the things

00:00:26,760 --> 00:00:31,019
we learned while building our e-commerce

00:00:28,320 --> 00:00:33,630
site at undercover tourist I've got four

00:00:31,019 --> 00:00:38,129
topics for you database read replicas

00:00:33,630 --> 00:00:40,140
and failover data caching strategy to

00:00:38,129 --> 00:00:43,379
pass rendering with class-based views

00:00:40,140 --> 00:00:45,570
and migration rules go a lot to cover

00:00:43,379 --> 00:00:48,090
and just a little bit of time so we're

00:00:45,570 --> 00:00:50,250
going to go quickly first up we have

00:00:48,090 --> 00:00:51,840
database read replicas and failover I'm

00:00:50,250 --> 00:00:54,180
going to show you how we can implement a

00:00:51,840 --> 00:00:57,960
simple custom database back-end that

00:00:54,180 --> 00:00:59,280
allows for read replica failover so why

00:00:57,960 --> 00:01:02,340
do we need read replicas and why are

00:00:59,280 --> 00:01:03,809
they important hey one of the easiest

00:01:02,340 --> 00:01:05,580
ways to scale your database read

00:01:03,809 --> 00:01:10,409
operations of course there are other

00:01:05,580 --> 00:01:11,790
options shouting partitioning and if you

00:01:10,409 --> 00:01:13,170
have tons of money you can just pay

00:01:11,790 --> 00:01:17,790
Oracle and everything will magically

00:01:13,170 --> 00:01:19,650
work so what can we get out of the box

00:01:17,790 --> 00:01:21,960
let's take a look before we implement a

00:01:19,650 --> 00:01:23,340
custom database back-end Django has a

00:01:21,960 --> 00:01:25,229
functional example in their

00:01:23,340 --> 00:01:26,549
documentation and you can use it as a

00:01:25,229 --> 00:01:28,650
great starting point for getting read

00:01:26,549 --> 00:01:30,299
replicas working you can get up and

00:01:28,650 --> 00:01:33,210
running quickly by adding your read

00:01:30,299 --> 00:01:36,140
replicas to the databases setting and by

00:01:33,210 --> 00:01:39,420
using Django's built in database routers

00:01:36,140 --> 00:01:41,040
so this is a quick example of and it's

00:01:39,420 --> 00:01:43,530
taken from the documentation it's

00:01:41,040 --> 00:01:44,880
extremely simple and straightforward you

00:01:43,530 --> 00:01:47,369
may have seen this before if you haven't

00:01:44,880 --> 00:01:50,009
please go check out Jacobs documentation

00:01:47,369 --> 00:01:51,990
it's great there is a problem with this

00:01:50,009 --> 00:01:54,720
implementation though and it could be

00:01:51,990 --> 00:01:56,880
kind of a big one there's no support for

00:01:54,720 --> 00:01:58,140
failover so just because you have read

00:01:56,880 --> 00:02:00,090
replicas doesn't mean you'll have a

00:01:58,140 --> 00:02:01,469
hundred percent up time or you'll have a

00:02:00,090 --> 00:02:03,570
hundred percent up time for your site

00:02:01,469 --> 00:02:06,119
because one of them goes down some of

00:02:03,570 --> 00:02:07,619
your queries might fail read replicas

00:02:06,119 --> 00:02:10,379
are used for scaling but they can also

00:02:07,619 --> 00:02:11,790
be a great fault tolerance mechanism so

00:02:10,379 --> 00:02:13,680
if one of you read replicas were to go

00:02:11,790 --> 00:02:15,209
down some of the people visit

00:02:13,680 --> 00:02:16,829
your site who could have been potential

00:02:15,209 --> 00:02:20,219
customers are now going to see an error

00:02:16,829 --> 00:02:22,260
page at best or a loading bar until a

00:02:20,219 --> 00:02:24,000
connection timeout at worst and either

00:02:22,260 --> 00:02:27,480
way you're going to end up losing

00:02:24,000 --> 00:02:29,310
potential customers so let's go through

00:02:27,480 --> 00:02:31,530
the implementation I should note that

00:02:29,310 --> 00:02:33,689
this read replica database back-end is

00:02:31,530 --> 00:02:36,180
only for Django's ORM and not for third

00:02:33,689 --> 00:02:38,489
party or Em's like sqlalchemy and I'm

00:02:36,180 --> 00:02:39,569
also going to be referencing my sequel

00:02:38,489 --> 00:02:43,260
here but this should also work for

00:02:39,569 --> 00:02:44,849
postgres before we look at the code I'm

00:02:43,260 --> 00:02:46,409
going to warn you that this is using

00:02:44,849 --> 00:02:48,389
monkey patching in order to accomplish

00:02:46,409 --> 00:02:51,269
failing over from read replica

00:02:48,389 --> 00:02:53,250
connection errors why well we don't

00:02:51,269 --> 00:02:55,230
really need to but it's the most

00:02:53,250 --> 00:02:56,939
reasonable option the other choice would

00:02:55,230 --> 00:02:59,549
be to implement a full database back-end

00:02:56,939 --> 00:03:01,230
either way the best way I've found it

00:02:59,549 --> 00:03:03,419
possible to recover from a database

00:03:01,230 --> 00:03:05,400
connection failure is inside the

00:03:03,419 --> 00:03:07,799
database back-end unfortunately there's

00:03:05,400 --> 00:03:10,439
no way in a database router to handle a

00:03:07,799 --> 00:03:12,180
connection error also Django

00:03:10,439 --> 00:03:14,099
unfortunately stores references to the

00:03:12,180 --> 00:03:16,500
database on private properties of the

00:03:14,099 --> 00:03:17,970
ORM instance objects and these

00:03:16,500 --> 00:03:19,979
references are used in multiple places

00:03:17,970 --> 00:03:22,019
whenever Django needs to reconnect to

00:03:19,979 --> 00:03:23,159
the database so the best place to

00:03:22,019 --> 00:03:26,299
recover from a database connection

00:03:23,159 --> 00:03:28,739
failure is inside the database back-end

00:03:26,299 --> 00:03:30,510
this is an overview of the code we're

00:03:28,739 --> 00:03:34,079
going to use to implement our backend

00:03:30,510 --> 00:03:35,760
and let's walk through it so in order

00:03:34,079 --> 00:03:37,859
for Django to recognize her back in we

00:03:35,760 --> 00:03:39,900
need to implement the database wrapper

00:03:37,859 --> 00:03:41,669
class since we're piggybacking off

00:03:39,900 --> 00:03:43,609
Django's implementation we can just

00:03:41,669 --> 00:03:46,139
import it and use it like it's our own

00:03:43,609 --> 00:03:47,939
next we need a reference to the get new

00:03:46,139 --> 00:03:49,579
connection method so we can call it

00:03:47,939 --> 00:03:51,599
whenever our custom method is called

00:03:49,579 --> 00:03:53,519
after we've stored a reference to the

00:03:51,599 --> 00:03:55,349
original method we can overwrite it with

00:03:53,519 --> 00:03:57,889
our custom method that handles the Reeb

00:03:55,349 --> 00:04:00,180
replica failure that's the monkey patch

00:03:57,889 --> 00:04:01,739
our custom method is very simple and

00:04:00,180 --> 00:04:03,989
straightforward we call the original

00:04:01,739 --> 00:04:04,889
method and trap any connection errors at

00:04:03,989 --> 00:04:07,709
the moment you'll see we're just

00:04:04,889 --> 00:04:08,879
rewriting the exception and the heart of

00:04:07,709 --> 00:04:10,409
our custom back and we'll be the

00:04:08,879 --> 00:04:12,509
exception handling but before we get

00:04:10,409 --> 00:04:16,109
into that we need to add a few custom

00:04:12,509 --> 00:04:18,900
settings through our databases so here's

00:04:16,109 --> 00:04:23,560
an overview notice we're using our my

00:04:18,900 --> 00:04:25,120
sequel failover back-end engine so

00:04:23,560 --> 00:04:27,280
custom setting we need is for a dual

00:04:25,120 --> 00:04:29,590
purpose first this is a way we can

00:04:27,280 --> 00:04:31,120
identify read replicas that have the

00:04:29,590 --> 00:04:32,620
same master database when we're trying

00:04:31,120 --> 00:04:34,870
to find another one in the event of a

00:04:32,620 --> 00:04:36,940
failure in addition this is also the

00:04:34,870 --> 00:04:40,060
master database that will use if all the

00:04:36,940 --> 00:04:42,460
read replicas have failed this next

00:04:40,060 --> 00:04:44,290
setting is not for a custom fit over but

00:04:42,460 --> 00:04:45,820
it's still very important in order to

00:04:44,290 --> 00:04:47,650
feel over within a reasonable amount of

00:04:45,820 --> 00:04:49,600
time before a connection timeout we need

00:04:47,650 --> 00:04:52,060
to define the connection timeout for the

00:04:49,600 --> 00:04:53,410
database for Jengo is my sequel back end

00:04:52,060 --> 00:04:55,870
this gets passed directly to the

00:04:53,410 --> 00:04:58,600
database driver and note this is a

00:04:55,870 --> 00:05:00,700
connection timeout not a query timeout

00:04:58,600 --> 00:05:02,139
I've used five seconds here which is

00:05:00,700 --> 00:05:04,780
actually what we use in production for

00:05:02,139 --> 00:05:07,630
our read replicas but please test then

00:05:04,780 --> 00:05:09,280
see if you need something different so

00:05:07,630 --> 00:05:12,340
getting back to the implementation let's

00:05:09,280 --> 00:05:13,720
drill down into our method we need to do

00:05:12,340 --> 00:05:16,180
something better than just rear acing

00:05:13,720 --> 00:05:18,700
the airs so let's implement the

00:05:16,180 --> 00:05:19,960
exception handling first thing we want

00:05:18,700 --> 00:05:22,240
to do is make sure we're working with a

00:05:19,960 --> 00:05:23,860
read replica that has failover support

00:05:22,240 --> 00:05:25,690
so we checked for a fill over master

00:05:23,860 --> 00:05:28,090
setting I'm gonna bring that back so you

00:05:25,690 --> 00:05:29,530
can see it and this setting is only on

00:05:28,090 --> 00:05:33,760
the read replicas that we want to

00:05:29,530 --> 00:05:35,590
support failover for next we'll be

00:05:33,760 --> 00:05:36,850
hitting this exception from we may be

00:05:35,590 --> 00:05:38,169
having this exception from another

00:05:36,850 --> 00:05:40,870
failover so we grabbed the database

00:05:38,169 --> 00:05:43,000
alias and we also have an optional

00:05:40,870 --> 00:05:45,910
keyword argument and the database alias

00:05:43,000 --> 00:05:49,660
is the databases settings dictionary

00:05:45,910 --> 00:05:51,610
alias key this may not be also the first

00:05:49,660 --> 00:05:53,020
failure so we keep track of the previous

00:05:51,610 --> 00:05:54,940
failures with the optional keyword

00:05:53,020 --> 00:05:57,789
arguments and add the current failure

00:05:54,940 --> 00:05:59,860
and here's the heart of our failover

00:05:57,789 --> 00:06:02,020
this is very simple but let's step

00:05:59,860 --> 00:06:04,510
through it quickly we'll go through our

00:06:02,020 --> 00:06:06,760
databases we're looking for a database

00:06:04,510 --> 00:06:08,320
that has not previously failed and we

00:06:06,760 --> 00:06:10,870
want a read replica for the same master

00:06:08,320 --> 00:06:12,460
database if we find a usable read

00:06:10,870 --> 00:06:15,340
replica will start in the new DB

00:06:12,460 --> 00:06:16,780
variable and if we didn't find a usable

00:06:15,340 --> 00:06:18,520
read replica will fall back to the

00:06:16,780 --> 00:06:20,289
master database in case you're not

00:06:18,520 --> 00:06:22,900
familiar with the else keyword this

00:06:20,289 --> 00:06:25,780
means I didn't hit a break on the for

00:06:22,900 --> 00:06:27,610
loop and we're all set we've got a new

00:06:25,780 --> 00:06:29,110
database to use so we'll just override

00:06:27,610 --> 00:06:31,539
the host in the connection parameters

00:06:29,110 --> 00:06:33,460
and we can get a new connection I should

00:06:31,539 --> 00:06:35,160
note that you may also need to replace

00:06:33,460 --> 00:06:37,410
the port user name etc

00:06:35,160 --> 00:06:42,390
password in case your different database

00:06:37,410 --> 00:06:44,870
hosts have different values for those so

00:06:42,390 --> 00:06:46,770
now whenever someone visits your site

00:06:44,870 --> 00:06:49,020
everybody can be a potential customer

00:06:46,770 --> 00:06:51,060
and so that's how we implemented

00:06:49,020 --> 00:06:54,000
automatic read replicas feel over it

00:06:51,060 --> 00:06:55,830
with a custom database back-end in case

00:06:54,000 --> 00:06:57,810
your hands are not very fast then you

00:06:55,830 --> 00:07:01,680
scribbled all that down the code will be

00:06:57,810 --> 00:07:06,420
online on github so data caching

00:07:01,680 --> 00:07:08,880
strategy why well hitting the database

00:07:06,420 --> 00:07:11,130
is expensive cash isn't expensive and

00:07:08,880 --> 00:07:15,330
not hitting the database multiple times

00:07:11,130 --> 00:07:17,520
for the same data is even better so for

00:07:15,330 --> 00:07:21,030
our data caching strategy first we need

00:07:17,520 --> 00:07:23,160
a database our database populates our

00:07:21,030 --> 00:07:25,950
shared data objects and our data objects

00:07:23,160 --> 00:07:30,180
and our data objects are also populated

00:07:25,950 --> 00:07:32,010
by our shared data objects our views are

00:07:30,180 --> 00:07:36,240
populated by our shared data objects and

00:07:32,010 --> 00:07:38,430
data objects and finally our shared data

00:07:36,240 --> 00:07:43,320
objects data objects and views are

00:07:38,430 --> 00:07:45,330
stored in the cache we also need a way

00:07:43,320 --> 00:07:48,390
to refresh our cash so we can use a

00:07:45,330 --> 00:07:50,550
scheduling mechanism squeaking such as a

00:07:48,390 --> 00:07:53,280
cron job to automatically refresh the

00:07:50,550 --> 00:07:54,930
frequently used data objects so that's

00:07:53,280 --> 00:07:56,700
our data caching strategy I don't have

00:07:54,930 --> 00:07:58,200
any code for this section but this is an

00:07:56,700 --> 00:08:00,480
important stepping stone for the next

00:07:58,200 --> 00:08:01,980
section the main takeaway here is you

00:08:00,480 --> 00:08:04,770
want to make sure you're building your

00:08:01,980 --> 00:08:06,810
data objects or view models using shared

00:08:04,770 --> 00:08:09,360
data objects or shared view models

00:08:06,810 --> 00:08:10,980
whenever possible for example if you

00:08:09,360 --> 00:08:13,740
sell products that appear on different

00:08:10,980 --> 00:08:15,660
pages of your website you might have a

00:08:13,740 --> 00:08:18,000
page that lists products only for a

00:08:15,660 --> 00:08:21,360
certain category or you might have a

00:08:18,000 --> 00:08:22,980
page that lists all products so with

00:08:21,360 --> 00:08:25,020
this casting strategy you want to make

00:08:22,980 --> 00:08:28,080
sure that you're caching each product

00:08:25,020 --> 00:08:30,240
data object or view model which would be

00:08:28,080 --> 00:08:31,800
a shared data object to review model at

00:08:30,240 --> 00:08:35,090
that point and then you can use that

00:08:31,800 --> 00:08:37,830
cache data object on both of those views

00:08:35,090 --> 00:08:40,250
so to pass rendering with class face

00:08:37,830 --> 00:08:40,250
views

00:08:40,409 --> 00:08:45,180
first as we did with the other topic

00:08:43,649 --> 00:08:47,120
let's take a look at what we got on it

00:08:45,180 --> 00:08:49,709
we can get out of the box of Django

00:08:47,120 --> 00:08:51,839
cashing your views with Django is simple

00:08:49,709 --> 00:08:54,540
and there are examples in the

00:08:51,839 --> 00:08:57,149
documentation you set up your cache

00:08:54,540 --> 00:08:58,620
server with the caches setting and then

00:08:57,149 --> 00:09:03,959
you wrap the view function in the URL

00:08:58,620 --> 00:09:06,240
con for a simple this is what it would

00:09:03,959 --> 00:09:08,519
look like this is directly from the

00:09:06,240 --> 00:09:10,560
documentation so I'm not going to go

00:09:08,519 --> 00:09:11,850
through it but you've decided you want

00:09:10,560 --> 00:09:15,329
to implement this because you want your

00:09:11,850 --> 00:09:17,370
site to be very fast so your first

00:09:15,329 --> 00:09:19,189
potential customer mr. hacker cat comes

00:09:17,370 --> 00:09:21,329
to your site and logged in and

00:09:19,189 --> 00:09:24,269
everything works perfectly and it's

00:09:21,329 --> 00:09:26,100
really fast on page reload he can't boss

00:09:24,269 --> 00:09:27,360
your site because your database servers

00:09:26,100 --> 00:09:30,540
are still happy everything is coming

00:09:27,360 --> 00:09:36,629
from cash so then your next potential

00:09:30,540 --> 00:09:38,970
customer visits your site and well still

00:09:36,629 --> 00:09:40,889
welcoming a minute hacker cat this

00:09:38,970 --> 00:09:42,569
person is devastated by your website and

00:09:40,889 --> 00:09:44,850
thinks your site might be a giant

00:09:42,569 --> 00:09:46,380
security risk so good luck getting that

00:09:44,850 --> 00:09:49,620
potential customer to enter their credit

00:09:46,380 --> 00:09:52,649
card data the good news is Django has a

00:09:49,620 --> 00:09:55,170
solution for this actually to the first

00:09:52,649 --> 00:09:57,389
one is very headers you got another

00:09:55,170 --> 00:09:59,819
simple decorator and each user's views

00:09:57,389 --> 00:10:02,339
will be cached separately the second

00:09:59,819 --> 00:10:04,199
option is template fragment caching you

00:10:02,339 --> 00:10:07,050
make use of the cache template tag and

00:10:04,199 --> 00:10:08,699
you specify and parameter such as the

00:10:07,050 --> 00:10:11,819
user ID and everything will just work

00:10:08,699 --> 00:10:14,899
perfectly so this is what these could

00:10:11,819 --> 00:10:17,040
look like again this is from Django's

00:10:14,899 --> 00:10:21,000
documentation so I'm not going to review

00:10:17,040 --> 00:10:24,089
it so that seems really good what's the

00:10:21,000 --> 00:10:26,130
problem we get caching per user and we

00:10:24,089 --> 00:10:29,160
can even specify sections over templates

00:10:26,130 --> 00:10:30,779
the cash per user the problem is if many

00:10:29,160 --> 00:10:32,819
are most of your views have used a

00:10:30,779 --> 00:10:35,160
specific content you'll need lots of

00:10:32,819 --> 00:10:37,949
cash storage which means the solution is

00:10:35,160 --> 00:10:39,839
not infinitely scalable I do realize the

00:10:37,949 --> 00:10:42,449
caching HTML is a very small footprint

00:10:39,839 --> 00:10:44,220
there's another problem as well with the

00:10:42,449 --> 00:10:46,740
solution you'll your views will need to

00:10:44,220 --> 00:10:48,269
be rendered and cash for each user so if

00:10:46,740 --> 00:10:50,040
you have a view it doesn't render very

00:10:48,269 --> 00:10:52,290
fast that means each user has to wait 10

00:10:50,040 --> 00:10:53,600
seconds for that view to render now

00:10:52,290 --> 00:10:54,560
you're probably saying wait a moment

00:10:53,600 --> 00:10:57,170
just showed us we should use a

00:10:54,560 --> 00:10:58,370
multi-layered caching solution so why

00:10:57,170 --> 00:11:00,380
are you saying Django's built-in support

00:10:58,370 --> 00:11:02,240
won't be good enough if your data

00:11:00,380 --> 00:11:04,399
objects or shared data objects are large

00:11:02,240 --> 00:11:05,990
or if you have many of them to load for

00:11:04,399 --> 00:11:08,180
a page then can still take a while for

00:11:05,990 --> 00:11:09,920
all these objects the load and the

00:11:08,180 --> 00:11:11,750
template to render so if you have lots

00:11:09,920 --> 00:11:13,310
of products to sell there will be a lot

00:11:11,750 --> 00:11:14,779
of template tag surrender and you want

00:11:13,310 --> 00:11:18,430
your pages to be rendered very quickly

00:11:14,779 --> 00:11:21,500
in all cases so the next step after

00:11:18,430 --> 00:11:23,300
we've decided that you know we're going

00:11:21,500 --> 00:11:26,990
to use very headers or the cache

00:11:23,300 --> 00:11:29,449
template tag is that we can actually do

00:11:26,990 --> 00:11:31,310
a little bit better because if we're

00:11:29,449 --> 00:11:33,259
using all those I'm loading a lot of

00:11:31,310 --> 00:11:34,819
objects through the cache then it could

00:11:33,259 --> 00:11:39,889
still take a while for our views to

00:11:34,819 --> 00:11:44,449
render so what we can do is use to pass

00:11:39,889 --> 00:11:46,699
rendering is what i've called it so the

00:11:44,449 --> 00:11:54,130
next section is actually code so

00:11:46,699 --> 00:11:54,130
hopefully alright see how this works so

00:11:56,139 --> 00:12:02,990
to pass rendering the idea is very

00:12:00,889 --> 00:12:06,139
simple let's take a look at the process

00:12:02,990 --> 00:12:08,930
flow first we will load the data in our

00:12:06,139 --> 00:12:10,850
view will render the template on the

00:12:08,930 --> 00:12:13,339
first pass and this is going to be all

00:12:10,850 --> 00:12:15,589
the data that's not specifically tied to

00:12:13,339 --> 00:12:17,300
a user this path will have lots of

00:12:15,589 --> 00:12:19,639
template eggs surrender and could take a

00:12:17,300 --> 00:12:20,870
while for example is something that

00:12:19,639 --> 00:12:24,800
would be rendered in this view would be

00:12:20,870 --> 00:12:27,949
blog comments or products so next we'll

00:12:24,800 --> 00:12:30,769
catch the first pass result and finally

00:12:27,949 --> 00:12:33,889
run to the second pass this Pass will

00:12:30,769 --> 00:12:35,480
render all the user specific data and it

00:12:33,889 --> 00:12:37,759
will run our much more quickly in

00:12:35,480 --> 00:12:39,980
comparison to the first pass for example

00:12:37,759 --> 00:12:42,290
this would include the number of items

00:12:39,980 --> 00:12:45,230
in your shopping cart or the person's

00:12:42,290 --> 00:12:47,839
name so this is a layered approach to

00:12:45,230 --> 00:12:50,959
content rendering and caching so then

00:12:47,839 --> 00:12:52,490
when the next person visits the page the

00:12:50,959 --> 00:12:54,560
only thing we need to do is load the

00:12:52,490 --> 00:12:56,509
first pass render from cache and render

00:12:54,560 --> 00:12:58,730
the user specific content this will be

00:12:56,509 --> 00:13:00,829
extremely fast because there'll only be

00:12:58,730 --> 00:13:03,800
one cache hit and a few template tag

00:13:00,829 --> 00:13:06,170
surrender so let's take a look at how we

00:13:03,800 --> 00:13:08,120
can implement this

00:13:06,170 --> 00:13:09,769
first we've got a very simple class

00:13:08,120 --> 00:13:11,420
based view which inherits from a class

00:13:09,769 --> 00:13:13,700
called cash view that will define in a

00:13:11,420 --> 00:13:15,889
moment and we've also got a couple extra

00:13:13,700 --> 00:13:17,720
methods here that will be used by a cash

00:13:15,889 --> 00:13:20,570
for your parent class so let's take a

00:13:17,720 --> 00:13:22,399
look at those first is get first passed

00:13:20,570 --> 00:13:23,959
context of ours this is where we'll

00:13:22,399 --> 00:13:25,310
implement all of our context variables

00:13:23,959 --> 00:13:28,160
for our template as you would normally

00:13:25,310 --> 00:13:30,290
think of them you know non-user specific

00:13:28,160 --> 00:13:32,300
data again blog comments products

00:13:30,290 --> 00:13:35,060
anything not specific to the person

00:13:32,300 --> 00:13:37,370
viewing the page next we've got get

00:13:35,060 --> 00:13:38,870
second pass context of ours this will be

00:13:37,370 --> 00:13:40,850
anything that's specific to the person

00:13:38,870 --> 00:13:43,279
viewing the page perhaps a shopping cart

00:13:40,850 --> 00:13:45,740
count or a user specific message there's

00:13:43,279 --> 00:13:47,180
also one very other important item that

00:13:45,740 --> 00:13:50,449
is specific to everyone who's going to

00:13:47,180 --> 00:13:51,980
submit a form the csrf token you may be

00:13:50,449 --> 00:13:53,630
thinking we don't need to worry about

00:13:51,980 --> 00:13:56,300
that because Django handles it for us

00:13:53,630 --> 00:13:57,949
and you're right but we do need to be

00:13:56,300 --> 00:13:59,720
specific to each person viewing the page

00:13:57,949 --> 00:14:02,389
so I'm going to show you how we handle

00:13:59,720 --> 00:14:07,130
that in a moment so let's build out the

00:14:02,389 --> 00:14:08,690
cash view implementation we need a few

00:14:07,130 --> 00:14:10,459
imports from standard Django

00:14:08,690 --> 00:14:12,860
functionality and you can see those at

00:14:10,459 --> 00:14:17,630
the top and I'm going to remove those so

00:14:12,860 --> 00:14:19,250
we can focus on the cached view so the

00:14:17,630 --> 00:14:21,290
main functionality for the home view is

00:14:19,250 --> 00:14:26,149
a call to the render method under cash

00:14:21,290 --> 00:14:28,640
for you so let's break that down the

00:14:26,149 --> 00:14:30,890
first thing in the render method is a

00:14:28,640 --> 00:14:33,250
call to the render first pass so I'm

00:14:30,890 --> 00:14:35,420
going to drop out the home view and

00:14:33,250 --> 00:14:40,100
let's pull out the render first pass

00:14:35,420 --> 00:14:43,820
method and let's break down what's going

00:14:40,100 --> 00:14:46,699
on in there so first we try to load the

00:14:43,820 --> 00:14:49,670
render template from the cache and if we

00:14:46,699 --> 00:14:51,019
couldn't load it will build it building

00:14:49,670 --> 00:14:53,149
the template we need the first pass

00:14:51,019 --> 00:14:55,100
context variables and these are the non

00:14:53,149 --> 00:14:57,769
user specific context variables for the

00:14:55,100 --> 00:14:59,630
view then we render the template to a

00:14:57,769 --> 00:15:01,730
string using Django's render two string

00:14:59,630 --> 00:15:03,680
method you may notice here we're not

00:15:01,730 --> 00:15:05,779
using a request context and this means

00:15:03,680 --> 00:15:07,339
you won't be able to render CSRF tokens

00:15:05,779 --> 00:15:08,839
I know I've mentioned this a couple

00:15:07,339 --> 00:15:11,209
times now and I'll come back to in a

00:15:08,839 --> 00:15:13,910
moment so we save a render template to

00:15:11,209 --> 00:15:17,149
the cash and we return our first pass

00:15:13,910 --> 00:15:19,430
template so back in a render method we

00:15:17,149 --> 00:15:20,060
need to do the second pass like we did

00:15:19,430 --> 00:15:21,530
with the first pass

00:15:20,060 --> 00:15:23,420
surrender will need the context

00:15:21,530 --> 00:15:27,350
variables and these will be the user

00:15:23,420 --> 00:15:29,030
specific context variables next we turn

00:15:27,350 --> 00:15:30,710
the result of the first pass render into

00:15:29,030 --> 00:15:32,810
a template this will be part of the

00:15:30,710 --> 00:15:34,540
magic of the two past templates I'll go

00:15:32,810 --> 00:15:36,740
into more detail on this in a moment

00:15:34,540 --> 00:15:38,510
then will render the second pass

00:15:36,740 --> 00:15:40,610
template notice we're using a request

00:15:38,510 --> 00:15:43,220
context here so this will allow csrf

00:15:40,610 --> 00:15:45,710
tokens to render and finally we return

00:15:43,220 --> 00:15:47,690
the second pass rendered so let's get

00:15:45,710 --> 00:15:49,580
back to the CSRF token now that you've

00:15:47,690 --> 00:15:52,370
seen the implementation I'm going to

00:15:49,580 --> 00:15:54,520
expose the magic behind it let's take a

00:15:52,370 --> 00:15:57,260
quick look at a simple Django template

00:15:54,520 --> 00:15:58,430
so here's a simple template that has a

00:15:57,260 --> 00:16:00,320
welcome message for the user who's

00:15:58,430 --> 00:16:01,730
viewing the page and a simple form where

00:16:00,320 --> 00:16:04,340
they can input a quantity to purchase

00:16:01,730 --> 00:16:06,290
our products unfortunately if we were

00:16:04,340 --> 00:16:08,540
under this through our cash view you'll

00:16:06,290 --> 00:16:11,390
see a while a lot of warnings like this

00:16:08,540 --> 00:16:13,670
and the csrf tokens won't be rendered

00:16:11,390 --> 00:16:15,200
the reason we get this area's error is

00:16:13,670 --> 00:16:16,810
very straightforward so let's take a

00:16:15,200 --> 00:16:19,730
quick look back at our cash view class

00:16:16,810 --> 00:16:22,280
remember when I mentioned that the

00:16:19,730 --> 00:16:26,390
render two string method wouldn't render

00:16:22,280 --> 00:16:28,280
our CSRF tokens this is this is why so

00:16:26,390 --> 00:16:31,370
let's go back to the HTML template and

00:16:28,280 --> 00:16:33,440
address the issue so remember we're

00:16:31,370 --> 00:16:35,210
going to render this template twice so

00:16:33,440 --> 00:16:38,060
on the first pass we want to render

00:16:35,210 --> 00:16:41,570
these lines which have non user specific

00:16:38,060 --> 00:16:43,490
data and for the second we want to

00:16:41,570 --> 00:16:45,800
render these lines which have the user

00:16:43,490 --> 00:16:49,520
specific data and of course the CSRF

00:16:45,800 --> 00:16:52,370
token so how can we accomplish that so

00:16:49,520 --> 00:16:54,560
if you watch closely and the animation

00:16:52,370 --> 00:16:56,840
works and doesn't speed ahead 50 slides

00:16:54,560 --> 00:17:00,380
you'll see that this will be our new

00:16:56,840 --> 00:17:02,600
first pass template so what's going on

00:17:00,380 --> 00:17:04,520
here the solution is that will render

00:17:02,600 --> 00:17:06,650
the first pass template to become the

00:17:04,520 --> 00:17:08,990
second pass template by using Django's

00:17:06,650 --> 00:17:10,910
open block closed block open variable

00:17:08,990 --> 00:17:14,120
and close variable template tags and

00:17:10,910 --> 00:17:16,910
that's the magic then we render our

00:17:14,120 --> 00:17:24,290
first pass template and we'll end up

00:17:16,910 --> 00:17:27,560
with this so then we can render that as

00:17:24,290 --> 00:17:29,480
the second pass template at this point

00:17:27,560 --> 00:17:31,040
the only template logic which remains in

00:17:29,480 --> 00:17:34,309
our template is the second pass template

00:17:31,040 --> 00:17:37,559
variables and the CSRF token

00:17:34,309 --> 00:17:39,120
so this way we rendered our second pass

00:17:37,559 --> 00:17:42,150
template and we get two very important

00:17:39,120 --> 00:17:44,880
things first we can render the CSRF

00:17:42,150 --> 00:17:46,559
token and more importantly we'll be able

00:17:44,880 --> 00:17:48,900
to render the template extremely quickly

00:17:46,559 --> 00:17:50,220
because we only need one cache it and

00:17:48,900 --> 00:17:52,679
the Django template only has a few

00:17:50,220 --> 00:17:54,420
template tags to parse so that's to pass

00:17:52,679 --> 00:17:57,630
rendering with temp with class base

00:17:54,420 --> 00:18:01,110
views migration rules this is a quick

00:17:57,630 --> 00:18:02,790
one so raise your hand if you've never

00:18:01,110 --> 00:18:07,820
had to take down your production site

00:18:02,790 --> 00:18:09,720
during migrations for a deploy okay I

00:18:07,820 --> 00:18:12,870
don't have anything for you in this

00:18:09,720 --> 00:18:16,110
section so hopefully you'll enjoy its

00:18:12,870 --> 00:18:18,000
thumb so these are some simple rules

00:18:16,110 --> 00:18:19,800
we've put in place so that when we

00:18:18,000 --> 00:18:21,690
deploy production in our multi server

00:18:19,800 --> 00:18:23,280
environment we can do it while keeping

00:18:21,690 --> 00:18:25,140
our site online and without spewing a

00:18:23,280 --> 00:18:26,910
bunch of errors these may seem like

00:18:25,140 --> 00:18:29,910
common sense once I get started but I

00:18:26,910 --> 00:18:31,590
think it's still helpful first don't go

00:18:29,910 --> 00:18:34,140
from a more precise to a less precise

00:18:31,590 --> 00:18:35,820
value type for example don't go from a

00:18:34,140 --> 00:18:38,429
double to a float or to an integer

00:18:35,820 --> 00:18:40,650
instead make a new column with a new

00:18:38,429 --> 00:18:44,250
value type and copy the values from the

00:18:40,650 --> 00:18:47,309
existing column second don't rename

00:18:44,250 --> 00:18:49,020
columns or tables instead make a new

00:18:47,309 --> 00:18:51,470
column or table and copy the data from

00:18:49,020 --> 00:18:54,780
the existing table into the new one and

00:18:51,470 --> 00:18:57,059
will last but not least don't delete

00:18:54,780 --> 00:18:59,940
columns or tables there's no instead on

00:18:57,059 --> 00:19:01,470
this one just don't delete them you can

00:18:59,940 --> 00:19:02,850
delete them eventually obviously you

00:19:01,470 --> 00:19:05,309
don't want your database to fill up and

00:19:02,850 --> 00:19:07,590
run out of space but way to fill few

00:19:05,309 --> 00:19:09,809
versions out and then delete them in

00:19:07,590 --> 00:19:14,040
case you need to roll back or in case

00:19:09,809 --> 00:19:16,350
the deploy fails so that's it thank you

00:19:14,040 --> 00:19:19,429
I appreciate your time sorry for the

00:19:16,350 --> 00:19:19,429
technical difficulties

00:19:21,470 --> 00:19:26,390
I hope that's been helpful again the

00:19:23,809 --> 00:19:28,220
code will be on github I can give you a

00:19:26,390 --> 00:19:30,350
link come find me but the username is n

00:19:28,220 --> 00:19:32,030
pin shot just my first initial in my

00:19:30,350 --> 00:19:33,860
last name on github it's already up

00:19:32,030 --> 00:19:36,919
there feel free to check it out it's a

00:19:33,860 --> 00:19:39,700
working very simple Django project that

00:19:36,919 --> 00:19:43,630
shows all the code from from this

00:19:39,700 --> 00:19:46,730
presentation and one quick note if I may

00:19:43,630 --> 00:19:49,340
we are looking for Python programmer so

00:19:46,730 --> 00:19:50,720
if you are looking for a company that's

00:19:49,340 --> 00:19:53,539
self sustained and fun to work with

00:19:50,720 --> 00:19:56,409
check out undercover tourist calm and

00:19:53,539 --> 00:19:56,409

YouTube URL: https://www.youtube.com/watch?v=QZLHULo7fzo


