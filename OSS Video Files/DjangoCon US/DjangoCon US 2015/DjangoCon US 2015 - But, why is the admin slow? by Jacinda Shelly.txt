Title: DjangoCon US 2015 - But, why is the admin slow? by Jacinda Shelly
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	But, why is the admin slow?

This is the general outline I'm working from so far. I think this could change slightly as I develop the talk, but this outline conveys the general theme.

Introduction and display of basic django-debug-toolbar usage (2 min)

Things the admin does well (3 min)

Makes development very fast
For many use cases, it "does the right thing" automatically. For example, modifying the HTML in a callable won't cause new queries.
What can sneak up on you (5 min)

Having lots of related items visible in the list view
Using list_select_related
Overriding queryset for additional select_related and prefetch_related options
What to avoid in callables (3 min)

Queries that will be executed on every row
The default widgets for many-to-many and foreign key fields (3 min)

What widgets to use to replace the defaults based on how many options you have in your database
Custom aggregates in the list view (i.e. custom querysets) (3 min)

When this is a good idea
When this is too slow and you need other options
More general performance improvements through caching (3-5 min)

Django's caching framework
Caching with third-party packages / tools
Custom caching with Redis
Questions (Remaining time)
Captions: 
	00:00:15,920 --> 00:00:23,910
hello um thank you he said my name is

00:00:21,090 --> 00:00:26,460
Jason de Chelly this is my second time

00:00:23,910 --> 00:00:27,930
speaking at django con I'm very excited

00:00:26,460 --> 00:00:30,420
to be here hope you guys have all been

00:00:27,930 --> 00:00:32,189
having a great time so far i've been

00:00:30,420 --> 00:00:34,800
using django for a little over four

00:00:32,189 --> 00:00:38,070
years I've given a couple of tutorials

00:00:34,800 --> 00:00:39,960
on the admin love reading and rowing I

00:00:38,070 --> 00:00:44,040
haven't had time to well much recently

00:00:39,960 --> 00:00:45,960
and I found in the tutorials that I gave

00:00:44,040 --> 00:00:47,969
that performance improvements were

00:00:45,960 --> 00:00:50,700
always a topic of interest and in

00:00:47,969 --> 00:00:53,280
particular there were a few really easy

00:00:50,700 --> 00:00:55,469
things to miss and a few really easy

00:00:53,280 --> 00:00:58,320
things to change particularly around the

00:00:55,469 --> 00:01:01,020
list view that people always seem to

00:00:58,320 --> 00:01:05,339
find interesting so I decided to develop

00:01:01,020 --> 00:01:09,020
a talk around the basic progression is

00:01:05,339 --> 00:01:11,900
this you just started using the admin

00:01:09,020 --> 00:01:13,770
you're relatively new to django and

00:01:11,900 --> 00:01:17,159
people have been telling you it's this

00:01:13,770 --> 00:01:22,950
killer feature first you feel like this

00:01:17,159 --> 00:01:27,900
i am a god I only wrote one line of code

00:01:22,950 --> 00:01:30,960
and I have this whole web page now

00:01:27,900 --> 00:01:33,210
people start using it they start asking

00:01:30,960 --> 00:01:36,710
you to make feature changes it's really

00:01:33,210 --> 00:01:41,070
easy you change one line of code and

00:01:36,710 --> 00:01:43,380
they have what they want you say they

00:01:41,070 --> 00:01:45,390
say can you show this column absolutely

00:01:43,380 --> 00:01:47,280
can you order by this column absolutely

00:01:45,390 --> 00:01:50,430
all of these tiny little changes that

00:01:47,280 --> 00:01:53,070
are normally somewhat difficult if

00:01:50,430 --> 00:01:57,479
you're doing them by hand and Django has

00:01:53,070 --> 00:02:02,479
provided all of this to you for free but

00:01:57,479 --> 00:02:02,479
then there's always a but thin

00:02:03,230 --> 00:02:09,920
you haven't changed any code but all of

00:02:06,650 --> 00:02:12,230
a sudden your users start talking to you

00:02:09,920 --> 00:02:15,110
about how this page seems to be loading

00:02:12,230 --> 00:02:17,540
really really slowly your database has

00:02:15,110 --> 00:02:20,540
grown so you might suspect that it's

00:02:17,540 --> 00:02:22,550
something to do with queries but you're

00:02:20,540 --> 00:02:23,750
not really sure you're you're new to

00:02:22,550 --> 00:02:27,920
django you're not really sure how to

00:02:23,750 --> 00:02:30,260
figure out what's going on here and now

00:02:27,920 --> 00:02:32,330
you're thinking oh I'm gonna have to

00:02:30,260 --> 00:02:34,250
scrap the admin and it's going to be a

00:02:32,330 --> 00:02:35,600
month or two months or three months of

00:02:34,250 --> 00:02:38,780
work to rebuild all of this

00:02:35,600 --> 00:02:41,810
functionality from scratch and you're

00:02:38,780 --> 00:02:43,940
starting to tell your team lead or your

00:02:41,810 --> 00:02:45,650
client or your boss how much time this

00:02:43,940 --> 00:02:47,150
is going to cost and how many features

00:02:45,650 --> 00:02:49,400
you're going to have to put off doing so

00:02:47,150 --> 00:02:59,150
you can rebuild the admin and they're

00:02:49,400 --> 00:03:01,780
like no no so what do we do in this talk

00:02:59,150 --> 00:03:04,700
we're going to go through by example

00:03:01,780 --> 00:03:08,140
exactly this case and we're going to use

00:03:04,700 --> 00:03:10,220
a debug tool that is very common very

00:03:08,140 --> 00:03:11,720
very commonly used in the Django

00:03:10,220 --> 00:03:13,910
ecosystem and then if you haven't heard

00:03:11,720 --> 00:03:15,650
about it yet this talk is probably worth

00:03:13,910 --> 00:03:18,890
it for just telling you about jingo

00:03:15,650 --> 00:03:22,130
debug tool are the example that we're

00:03:18,890 --> 00:03:26,540
going to be using is a library in this

00:03:22,130 --> 00:03:30,920
library we have users we have authors

00:03:26,540 --> 00:03:33,260
and we have books people can check out

00:03:30,920 --> 00:03:35,930
books and that is represented by the

00:03:33,260 --> 00:03:38,570
loan books module which is a mini to

00:03:35,930 --> 00:03:42,080
mini relationship between a book and a

00:03:38,570 --> 00:03:45,410
user so you can see this here down

00:03:42,080 --> 00:03:47,900
towards the bottom we have our books

00:03:45,410 --> 00:03:50,420
relationship which is many to many for

00:03:47,900 --> 00:03:56,360
our library user everything else is

00:03:50,420 --> 00:03:57,860
basically just default user fields we

00:03:56,360 --> 00:04:00,320
have an author model which is incredibly

00:03:57,860 --> 00:04:03,800
simple we just have the first name and

00:04:00,320 --> 00:04:06,650
the last name of the author we have a

00:04:03,800 --> 00:04:09,290
book model which has a mini to mini

00:04:06,650 --> 00:04:12,320
relationship with authors because many

00:04:09,290 --> 00:04:13,760
books can be you know a book can have

00:04:12,320 --> 00:04:15,950
many authors and an author can have many

00:04:13,760 --> 00:04:16,820
books we also keep some ancillary

00:04:15,950 --> 00:04:18,500
information

00:04:16,820 --> 00:04:21,620
that's useful to a library like the

00:04:18,500 --> 00:04:26,410
title and how much we would charge you

00:04:21,620 --> 00:04:26,410
every day if you returned your book late

00:04:26,740 --> 00:04:31,790
finally we have the actual through model

00:04:29,270 --> 00:04:34,430
so when you have a loaned book you have

00:04:31,790 --> 00:04:36,500
a relationship between the patron who

00:04:34,430 --> 00:04:38,660
check the book out the book itself when

00:04:36,500 --> 00:04:40,190
it's due whether their fines have been

00:04:38,660 --> 00:04:43,070
paid or not how many times has been

00:04:40,190 --> 00:04:44,870
renewed and things like that the

00:04:43,070 --> 00:04:46,880
original code for this has more comments

00:04:44,870 --> 00:04:48,800
in it but they basically just say what I

00:04:46,880 --> 00:04:54,160
told you right here so I removed them so

00:04:48,800 --> 00:04:58,760
that I can make the slides bigger next

00:04:54,160 --> 00:05:01,730
django debug tool bar it's on github the

00:04:58,760 --> 00:05:04,310
installation is very simple just add it

00:05:01,730 --> 00:05:05,570
to installed apps for a local

00:05:04,310 --> 00:05:07,730
development so if you're using run

00:05:05,570 --> 00:05:09,680
server typically all you have to do is

00:05:07,730 --> 00:05:15,980
add this to installed apps and you get

00:05:09,680 --> 00:05:17,450
this nice bar sidebar that when you

00:05:15,980 --> 00:05:19,310
click on each of the fields will tell

00:05:17,450 --> 00:05:20,870
you additional information so you can

00:05:19,310 --> 00:05:24,560
see how long it's taking for the page to

00:05:20,870 --> 00:05:26,210
load what your settings are what we'll

00:05:24,560 --> 00:05:29,240
be concentrating on is how many queries

00:05:26,210 --> 00:05:31,700
you're running but some other useful

00:05:29,240 --> 00:05:33,920
things in particular like templates if

00:05:31,700 --> 00:05:35,960
you've ever had a case where your

00:05:33,920 --> 00:05:37,610
template isn't loading and you're not

00:05:35,960 --> 00:05:39,740
sure what directory is being looked at

00:05:37,610 --> 00:05:43,640
this will give you that information if

00:05:39,740 --> 00:05:45,890
you click on that kind of sub field a

00:05:43,640 --> 00:05:49,220
quick tip if your local development

00:05:45,890 --> 00:05:51,050
environment is a virtual machine there's

00:05:49,220 --> 00:05:53,720
an internal ip's setting with django

00:05:51,050 --> 00:05:58,040
debug tool bar what this is is a white

00:05:53,720 --> 00:06:00,590
list of ips coming to the server that

00:05:58,040 --> 00:06:03,290
you want to show that sidebar to because

00:06:00,590 --> 00:06:05,990
for example if you have a dev server

00:06:03,290 --> 00:06:08,930
that's sort of accessible by all of your

00:06:05,990 --> 00:06:11,300
devs and might be public state facing

00:06:08,930 --> 00:06:13,220
you don't necessarily want the debug

00:06:11,300 --> 00:06:15,920
tool bar showing up or a demo server for

00:06:13,220 --> 00:06:20,060
example where it's safe to have the

00:06:15,920 --> 00:06:22,070
debug tool bar but not but you don't

00:06:20,060 --> 00:06:25,849
want it to be shown to everyone visiting

00:06:22,070 --> 00:06:29,059
you can restrict it via internal ip's

00:06:25,849 --> 00:06:32,209
also if you're using a local vm it

00:06:29,059 --> 00:06:36,789
sometimes once what it perceives the vm

00:06:32,209 --> 00:06:39,979
of your local system to be generally

00:06:36,789 --> 00:06:41,749
never use django debug tool bar on a

00:06:39,979 --> 00:06:45,110
production server unless you're

00:06:41,749 --> 00:06:49,819
absolutely certain that it is not facing

00:06:45,110 --> 00:06:51,589
the world because it exposes a crap ton

00:06:49,819 --> 00:06:52,819
of information about your system that

00:06:51,589 --> 00:06:56,659
you don't want exposed to the whole

00:06:52,819 --> 00:06:58,729
world so obligatory warnings out of the

00:06:56,659 --> 00:07:01,999
way the first thing that our users asked

00:06:58,729 --> 00:07:06,069
us to do is display a list of all of the

00:07:01,999 --> 00:07:09,110
books that are out on loan so in here we

00:07:06,069 --> 00:07:11,119
see the loan book our unicode definition

00:07:09,110 --> 00:07:12,679
had the name of the user who checked out

00:07:11,119 --> 00:07:15,189
the book and the title of the book

00:07:12,679 --> 00:07:18,349
itself this is all randomly generated

00:07:15,189 --> 00:07:21,860
django by default will show 100 rows and

00:07:18,349 --> 00:07:23,749
you can see here we are executing 204

00:07:21,860 --> 00:07:29,029
sequel queries every time we load this

00:07:23,749 --> 00:07:31,309
page this this seems excessive so what

00:07:29,029 --> 00:07:33,319
can we do about that well if you click

00:07:31,309 --> 00:07:35,959
on it django debug toolbar allows you to

00:07:33,319 --> 00:07:38,959
see what queries are actually being

00:07:35,959 --> 00:07:40,999
executed and in more recent versions it

00:07:38,959 --> 00:07:43,069
helpfully includes information about

00:07:40,999 --> 00:07:45,019
which queries are actually being

00:07:43,069 --> 00:07:48,529
duplicated so the resolution on this is

00:07:45,019 --> 00:07:52,849
a little poor but what's happening here

00:07:48,529 --> 00:07:57,379
is for every row in that list view it's

00:07:52,849 --> 00:07:59,599
requesting the objects the library user

00:07:57,379 --> 00:08:02,300
object as well as the book object for

00:07:59,599 --> 00:08:04,429
every single row and this has a lot of

00:08:02,300 --> 00:08:06,860
overhead especially if you're not using

00:08:04,429 --> 00:08:09,800
a local system there's network latency

00:08:06,860 --> 00:08:14,869
there's overhead to actually set up the

00:08:09,800 --> 00:08:17,029
connection zoomed in you can see the

00:08:14,869 --> 00:08:19,429
specific instance is happening so book

00:08:17,029 --> 00:08:22,819
and then user over and over and over

00:08:19,429 --> 00:08:25,279
again so to recap the problem we're

00:08:22,819 --> 00:08:28,369
seeing is this was our Unicode

00:08:25,279 --> 00:08:30,529
definition it's a join of self-taught

00:08:28,369 --> 00:08:35,300
patron and self book so the user in the

00:08:30,529 --> 00:08:38,419
book now because it's in a Unicode

00:08:35,300 --> 00:08:39,560
method Django can't go in to see that

00:08:38,419 --> 00:08:42,349
these are foreign key

00:08:39,560 --> 00:08:44,180
and it should be using select related so

00:08:42,349 --> 00:08:48,140
we have a couple of different solutions

00:08:44,180 --> 00:08:51,650
that we can use here solution one is to

00:08:48,140 --> 00:08:54,980
use list display and explicitly include

00:08:51,650 --> 00:08:57,290
those foreign keys because if you use a

00:08:54,980 --> 00:08:58,910
foreign key in list display Django is

00:08:57,290 --> 00:09:01,279
smart enough to know to use select

00:08:58,910 --> 00:09:03,920
related in that case it doesn't know to

00:09:01,279 --> 00:09:06,740
use it if the foreign keys that you're

00:09:03,920 --> 00:09:10,580
accessing are inside of a callable only

00:09:06,740 --> 00:09:12,710
if you use them in list display solution

00:09:10,580 --> 00:09:16,100
to if we wanted to keep it in a callable

00:09:12,710 --> 00:09:18,710
and not use list display we can also set

00:09:16,100 --> 00:09:21,050
list select related to true what this

00:09:18,710 --> 00:09:24,650
does is for all of the foreign keys on

00:09:21,050 --> 00:09:26,210
your model it will fetch all of the

00:09:24,650 --> 00:09:29,470
information for all of the foreign keys

00:09:26,210 --> 00:09:32,270
that Django can reach from that model

00:09:29,470 --> 00:09:35,420
solution to be you can actually be a

00:09:32,270 --> 00:09:38,930
little bit more explicit as of Django

00:09:35,420 --> 00:09:42,020
1.6 plus with list select related and

00:09:38,930 --> 00:09:47,540
specify which foreign keys you want so

00:09:42,020 --> 00:09:49,820
if in the list view you want to say

00:09:47,540 --> 00:09:51,650
you're using only one of those foreign

00:09:49,820 --> 00:09:52,850
keys in the list view but not both of

00:09:51,650 --> 00:09:54,530
them and you don't want Django to just

00:09:52,850 --> 00:09:56,630
go randomly fetch all of the foreign

00:09:54,530 --> 00:10:00,380
keys that it can possibly reach which it

00:09:56,630 --> 00:10:03,190
will do and which can also be costly

00:10:00,380 --> 00:10:05,030
performance wise you can specify

00:10:03,190 --> 00:10:07,970
specifically the foreign keys that

00:10:05,030 --> 00:10:10,640
you're using in that list you so say we

00:10:07,970 --> 00:10:13,250
apply solution one this is the output

00:10:10,640 --> 00:10:15,320
that will get we now have two columns

00:10:13,250 --> 00:10:16,670
one for patron that shows the name of

00:10:15,320 --> 00:10:18,920
the user who's checked out the book and

00:10:16,670 --> 00:10:21,950
one for book which shows the title and

00:10:18,920 --> 00:10:24,740
we've gone from 200 for queries to for

00:10:21,950 --> 00:10:29,720
queries and more importantly we've have

00:10:24,740 --> 00:10:31,990
a 20x speed up from around 28 to 30

00:10:29,720 --> 00:10:34,820
milliseconds to around one and a half

00:10:31,990 --> 00:10:37,700
this is using sequel light on a local

00:10:34,820 --> 00:10:39,940
connection if you had a real production

00:10:37,700 --> 00:10:42,350
setup where your database server is

00:10:39,940 --> 00:10:44,150
located on a different server from your

00:10:42,350 --> 00:10:46,839
app server and you had network latency

00:10:44,150 --> 00:10:51,350
and connection overhead and postgres

00:10:46,839 --> 00:10:53,240
this would be even more significant so

00:10:51,350 --> 00:10:57,890
20 x speed up with one

00:10:53,240 --> 00:10:59,089
of code all right so couple of notes

00:10:57,890 --> 00:11:02,209
because we can dig a little bit deeper

00:10:59,089 --> 00:11:04,160
on this what if we had used the second

00:11:02,209 --> 00:11:07,040
solution and if you remember I said that

00:11:04,160 --> 00:11:14,570
you can specify which foreign keys to

00:11:07,040 --> 00:11:17,300
use and we we left out list display went

00:11:14,570 --> 00:11:20,779
back to using the default Unicode and

00:11:17,300 --> 00:11:22,250
just specified patron what happens is we

00:11:20,779 --> 00:11:26,870
end up with a hundred and four queries

00:11:22,250 --> 00:11:29,540
because for each row in the column

00:11:26,870 --> 00:11:31,310
you're going through and it knows enough

00:11:29,540 --> 00:11:34,459
to use select related to get all the

00:11:31,310 --> 00:11:36,170
users but you didn't tell it that you

00:11:34,459 --> 00:11:37,760
still needed the books so it's going

00:11:36,170 --> 00:11:39,290
through and it's executing a separate

00:11:37,760 --> 00:11:44,480
quarry for each row to get the title of

00:11:39,290 --> 00:11:47,959
the book so that the reason that this is

00:11:44,480 --> 00:11:50,899
important is sometimes your requirements

00:11:47,959 --> 00:11:53,540
will change and where previously you

00:11:50,899 --> 00:11:55,339
would only wanted to show two of the

00:11:53,540 --> 00:11:58,220
three foreign keys in your list view

00:11:55,339 --> 00:12:00,020
your users now asked for you to show the

00:11:58,220 --> 00:12:03,339
third foreign key don't forget to update

00:12:00,020 --> 00:12:05,510
it in your list display or you might

00:12:03,339 --> 00:12:08,140
have complaints about how all of a

00:12:05,510 --> 00:12:12,760
sudden the page is loading really slowly

00:12:08,140 --> 00:12:16,760
all right so full solution for to be

00:12:12,760 --> 00:12:19,100
same thing for queries but one thing

00:12:16,760 --> 00:12:20,930
that is interesting to note and that is

00:12:19,100 --> 00:12:24,980
another part of Django default behavior

00:12:20,930 --> 00:12:29,450
that a lot of novices or beginners don't

00:12:24,980 --> 00:12:31,700
know or don't realize or don't realize

00:12:29,450 --> 00:12:35,950
the implications of is that for every

00:12:31,700 --> 00:12:39,079
query Django gets all of the fields on

00:12:35,950 --> 00:12:41,450
your model no matter how many of those

00:12:39,079 --> 00:12:42,470
fields there are and no matter how

00:12:41,450 --> 00:12:44,779
you're doing it whether it's through the

00:12:42,470 --> 00:12:47,510
admin or through the ORM if you are

00:12:44,779 --> 00:12:49,490
getting a model Django will cash all of

00:12:47,510 --> 00:12:53,829
the fields by default unless you tell it

00:12:49,490 --> 00:12:56,120
not to so we're only using book title

00:12:53,829 --> 00:12:57,740
user first name and use your last name

00:12:56,120 --> 00:13:00,920
but we're getting all of these extra

00:12:57,740 --> 00:13:04,400
fields let's see what we can do about

00:13:00,920 --> 00:13:06,889
this because in some cases you'll have

00:13:04,400 --> 00:13:08,869
fields that are very large

00:13:06,889 --> 00:13:10,369
and Django is fetching them from the

00:13:08,869 --> 00:13:11,480
database even though you never use them

00:13:10,369 --> 00:13:15,920
they take up a lot of space in memory

00:13:11,480 --> 00:13:19,299
it's very slow what you can do is use a

00:13:15,920 --> 00:13:23,059
custom query set this is one of the most

00:13:19,299 --> 00:13:25,939
powerful features of the Django admin in

00:13:23,059 --> 00:13:29,179
my opinion and something that I actually

00:13:25,939 --> 00:13:31,489
use relatively often i could have

00:13:29,179 --> 00:13:35,809
alternately titled this talk custom

00:13:31,489 --> 00:13:40,249
query sets for fun and profit so what

00:13:35,809 --> 00:13:43,089
we're doing here is the ORM has a method

00:13:40,249 --> 00:13:45,859
called only which allows you to specify

00:13:43,089 --> 00:13:47,029
specifically which fields from your

00:13:45,859 --> 00:13:50,329
model you want to fetch from the

00:13:47,029 --> 00:13:52,279
database so in this case what we're

00:13:50,329 --> 00:13:55,009
doing is we're overriding the get query

00:13:52,279 --> 00:14:00,439
set method we're taking the query set

00:13:55,009 --> 00:14:03,529
from from the parent and then adding

00:14:00,439 --> 00:14:06,319
only patron first name Patriot last name

00:14:03,529 --> 00:14:08,149
and book daily fine yes book daily fine

00:14:06,319 --> 00:14:11,269
is a mistake that's on purpose we'll

00:14:08,149 --> 00:14:13,249
we'll get to that you can modify the

00:14:11,269 --> 00:14:17,660
query set to your heart's content as

00:14:13,249 --> 00:14:21,379
long as it actually returns a query set

00:14:17,660 --> 00:14:23,059
at the end because if you forget to

00:14:21,379 --> 00:14:25,220
return a query set you'll get a very

00:14:23,059 --> 00:14:27,110
uninformative error that says that your

00:14:25,220 --> 00:14:29,660
database is not properly configured I

00:14:27,110 --> 00:14:31,699
may or may not have run across that and

00:14:29,660 --> 00:14:34,279
scratch my head for a few minutes when i

00:14:31,699 --> 00:14:38,660
was working through the examples in this

00:14:34,279 --> 00:14:40,999
talk there's also a corresponding method

00:14:38,660 --> 00:14:45,439
called defer that does the opposite of

00:14:40,999 --> 00:14:48,439
only so if you use query set objects

00:14:45,439 --> 00:14:51,049
defer in a quarry set what that will do

00:14:48,439 --> 00:14:53,119
is it will load everything except for

00:14:51,049 --> 00:14:55,339
the fields that you specify so if you

00:14:53,119 --> 00:14:56,839
only have one really large field that

00:14:55,339 --> 00:14:58,879
you want to avoid loading because you're

00:14:56,839 --> 00:15:01,999
not using it for that query set you can

00:14:58,879 --> 00:15:04,519
use defer for that instead now I did

00:15:01,999 --> 00:15:06,789
make a mistake here you know previously

00:15:04,519 --> 00:15:09,529
we may have shown the daily fine and

00:15:06,789 --> 00:15:10,669
that that worked great but I'm supposed

00:15:09,529 --> 00:15:14,809
to be showing the title but what happens

00:15:10,669 --> 00:15:16,939
if if I leave this mistaken end up with

00:15:14,809 --> 00:15:18,100
104 queries again are we sensing a

00:15:16,939 --> 00:15:22,519
pattern

00:15:18,100 --> 00:15:24,649
so what's happening here is the the

00:15:22,519 --> 00:15:26,990
quarry set is doing what we want in that

00:15:24,649 --> 00:15:30,379
first query that's listed we're getting

00:15:26,990 --> 00:15:33,620
first name last name the primary keys

00:15:30,379 --> 00:15:36,110
and daily fine and that's it now what

00:15:33,620 --> 00:15:38,060
Django has to do on every row because

00:15:36,110 --> 00:15:41,360
you did not cash the title that you

00:15:38,060 --> 00:15:43,370
needed is on every row it now goes and

00:15:41,360 --> 00:15:45,170
fetches the title because it realizes at

00:15:43,370 --> 00:15:48,170
the last second that it needed that

00:15:45,170 --> 00:15:53,170
title this is this is inefficient it's

00:15:48,170 --> 00:15:55,490
very easy to fix just put the correct

00:15:53,170 --> 00:15:57,050
the correct reference in their book

00:15:55,490 --> 00:16:00,769
Thunder title instead of book under

00:15:57,050 --> 00:16:02,750
sundar daily fine but i just wanted to

00:16:00,769 --> 00:16:04,670
point that out because oftentimes if

00:16:02,750 --> 00:16:06,620
you're using only you really want to

00:16:04,670 --> 00:16:09,680
check your queries after that to make

00:16:06,620 --> 00:16:11,810
sure that you're not using something 10

00:16:09,680 --> 00:16:15,459
lines down in the function that you

00:16:11,810 --> 00:16:19,639
forgot to get in the only earlier

00:16:15,459 --> 00:16:21,259
because then your data your then jangle

00:16:19,639 --> 00:16:25,610
will have to go and fetch that for every

00:16:21,259 --> 00:16:27,319
object in the query alright so once it's

00:16:25,610 --> 00:16:30,110
fixed we're back to for queries it's

00:16:27,319 --> 00:16:33,259
great we have a minor speed up from our

00:16:30,110 --> 00:16:35,000
previous speed up it's about Oh point

00:16:33,259 --> 00:16:36,800
three milliseconds in this case which

00:16:35,000 --> 00:16:39,110
isn't a lot because we don't have any

00:16:36,800 --> 00:16:43,430
large fields and we're not saving a lot

00:16:39,110 --> 00:16:44,839
by leaving out the other fields but if

00:16:43,430 --> 00:16:46,670
you did have large fields this would be

00:16:44,839 --> 00:16:49,579
useful all right let's try something

00:16:46,670 --> 00:16:51,920
else a little bit more complicated one

00:16:49,579 --> 00:16:54,740
of our users has come along and asked

00:16:51,920 --> 00:16:56,779
well this is great but in the books I

00:16:54,740 --> 00:16:58,730
would like to see a list of all of the

00:16:56,779 --> 00:17:01,699
authors so in the books list view I want

00:16:58,730 --> 00:17:04,429
to see all of the authors all right this

00:17:01,699 --> 00:17:07,520
is easy we we add a callable called

00:17:04,429 --> 00:17:09,980
authors display we add the authors

00:17:07,520 --> 00:17:11,419
display callable to list display and

00:17:09,980 --> 00:17:13,669
because we learned our lesson from last

00:17:11,419 --> 00:17:15,799
time we're using list select related and

00:17:13,669 --> 00:17:21,409
we're setting it to true what could

00:17:15,799 --> 00:17:24,709
possibly go wrong well 104 queries again

00:17:21,409 --> 00:17:27,169
the reason for this is because authors

00:17:24,709 --> 00:17:29,760
is a mini to mini fields not a foreign

00:17:27,169 --> 00:17:32,190
key select related is for foreign keys

00:17:29,760 --> 00:17:34,260
prefetch related is what you want if

00:17:32,190 --> 00:17:36,840
you're going in the other direction you

00:17:34,260 --> 00:17:39,290
can see duplicated 100 times because

00:17:36,840 --> 00:17:41,430
getting the author's every time so for

00:17:39,290 --> 00:17:42,780
going in the opposite direction if you

00:17:41,430 --> 00:17:44,400
have a mini to mini relationship or

00:17:42,780 --> 00:17:45,990
you're doing a reverse foreign key look

00:17:44,400 --> 00:17:48,690
up you want prefetch related and

00:17:45,990 --> 00:17:50,670
unfortunately there is no switch for

00:17:48,690 --> 00:17:53,130
this in the Django admin the way there

00:17:50,670 --> 00:17:55,770
is for select related probably because

00:17:53,130 --> 00:17:58,500
it would be more difficult but you know

00:17:55,770 --> 00:18:02,790
that's something someone will look into

00:17:58,500 --> 00:18:05,670
some day instead what we do is another

00:18:02,790 --> 00:18:08,130
custom query set to save the day where

00:18:05,670 --> 00:18:10,320
do the same thing except in this case we

00:18:08,130 --> 00:18:12,990
take our book admin get the query set

00:18:10,320 --> 00:18:20,100
that Django is using prefetch related

00:18:12,990 --> 00:18:23,100
authors and now five quarts this is the

00:18:20,100 --> 00:18:25,560
actual query that it's running Django

00:18:23,100 --> 00:18:26,940
computes in advance all of the primary

00:18:25,560 --> 00:18:29,400
keys that it needs to get for prefetch

00:18:26,940 --> 00:18:30,870
related and you're off to the races so

00:18:29,400 --> 00:18:33,810
this is useful you can put more

00:18:30,870 --> 00:18:36,570
information in your admin without

00:18:33,810 --> 00:18:38,580
sacrificing performance and you can keep

00:18:36,570 --> 00:18:39,990
the admin around for longer which means

00:18:38,580 --> 00:18:42,840
you can develop features and get your

00:18:39,990 --> 00:18:45,330
system up and running and off to the

00:18:42,840 --> 00:18:48,180
races all right last example that we're

00:18:45,330 --> 00:18:49,320
going to go through is counting so now

00:18:48,180 --> 00:18:51,990
your users have come back to you and

00:18:49,320 --> 00:18:54,360
they're like all right what you've done

00:18:51,990 --> 00:18:56,820
so far is great we want to see how many

00:18:54,360 --> 00:18:59,490
books the author has written that we

00:18:56,820 --> 00:19:02,460
have in our library in the ListView all

00:18:59,490 --> 00:19:06,390
right we can do this at a callable self

00:19:02,460 --> 00:19:11,340
works count add the list add book count

00:19:06,390 --> 00:19:14,550
to the list display and we have 104

00:19:11,340 --> 00:19:19,110
queries again because we have one count

00:19:14,550 --> 00:19:21,840
query for every row this one this one's

00:19:19,110 --> 00:19:23,550
a little trickier right like how do you

00:19:21,840 --> 00:19:25,770
deal with this there's no foreign key

00:19:23,550 --> 00:19:27,240
here there's there's no reverse foreign

00:19:25,770 --> 00:19:29,040
key relationship so select related

00:19:27,240 --> 00:19:30,750
prefetch related not going to work we're

00:19:29,040 --> 00:19:34,830
gonna have to do like custom caching

00:19:30,750 --> 00:19:39,430
what do we what do we do here well the

00:19:34,830 --> 00:19:43,270
answer is we use Django's aggregate

00:19:39,430 --> 00:19:44,740
Shin allottee so one of the interesting

00:19:43,270 --> 00:19:48,640
things that you can do with aggregates

00:19:44,740 --> 00:19:50,590
is annotate and what that does is it

00:19:48,640 --> 00:19:55,030
takes an aggregate and actually adds it

00:19:50,590 --> 00:19:57,480
as a field sort of and Django knows how

00:19:55,030 --> 00:20:00,250
to deal with this so this one is

00:19:57,480 --> 00:20:02,320
probably a little bit more complicated

00:20:00,250 --> 00:20:05,080
to the beginners in the room so I'll

00:20:02,320 --> 00:20:07,360
step through it but we still have book

00:20:05,080 --> 00:20:10,570
count in list display but in our query

00:20:07,360 --> 00:20:13,300
set what we did is we used annotate and

00:20:10,570 --> 00:20:17,440
we said that book count should be the

00:20:13,300 --> 00:20:19,720
name of the pseudo field that we're

00:20:17,440 --> 00:20:21,970
using and we're doing a count of works

00:20:19,720 --> 00:20:24,190
so now you can actually reference that

00:20:21,970 --> 00:20:26,200
in the in the sequel and Django knows

00:20:24,190 --> 00:20:29,800
how to refer to that and pull that out

00:20:26,200 --> 00:20:33,100
so now that we have this we are back to

00:20:29,800 --> 00:20:34,830
for queries once again and you can see

00:20:33,100 --> 00:20:39,370
here the queries that are being executed

00:20:34,830 --> 00:20:42,730
where you have that as book account that

00:20:39,370 --> 00:20:44,020
allows Django to refer to this within

00:20:42,730 --> 00:20:46,990
the core itself so you can do everything

00:20:44,020 --> 00:20:51,460
in the database in a single query and as

00:20:46,990 --> 00:20:54,040
a side note you can in the author model

00:20:51,460 --> 00:20:56,140
where you defined this call a bowl you

00:20:54,040 --> 00:20:57,670
can't remove the collar bowl Django kind

00:20:56,140 --> 00:21:00,490
of freaks out even though I don't think

00:20:57,670 --> 00:21:02,770
it should but you can set book count

00:21:00,490 --> 00:21:05,200
admin order fields to be booked count

00:21:02,770 --> 00:21:07,180
and then you can actually sort by how

00:21:05,200 --> 00:21:09,820
many books and author has written and

00:21:07,180 --> 00:21:14,560
you can order by that which is pretty

00:21:09,820 --> 00:21:16,750
nifty a few random notes before it so

00:21:14,560 --> 00:21:18,880
that's the end of all of the examples a

00:21:16,750 --> 00:21:21,310
few random notes if you have an issue

00:21:18,880 --> 00:21:22,840
and you just can't get things working

00:21:21,310 --> 00:21:26,800
fast enough and you want some really

00:21:22,840 --> 00:21:30,280
quick hacky solutions you can decrease

00:21:26,800 --> 00:21:32,050
list per page which will just decrease

00:21:30,280 --> 00:21:33,880
the number of rows that you have on a

00:21:32,050 --> 00:21:37,000
single page and maybe give you a little

00:21:33,880 --> 00:21:39,880
bit of extra time to figure things out

00:21:37,000 --> 00:21:42,670
before like all hell breaks loose so by

00:21:39,880 --> 00:21:45,580
default django will do a 100 you could

00:21:42,670 --> 00:21:49,390
reduce that to like 25 and then your

00:21:45,580 --> 00:21:50,560
queries will be decreased by 4x until

00:21:49,390 --> 00:21:50,960
you actually figure out a better way to

00:21:50,560 --> 00:21:55,039
do

00:21:50,960 --> 00:21:57,980
I show full result count is if you have

00:21:55,039 --> 00:22:00,159
filters you know how it shows the count

00:21:57,980 --> 00:22:05,210
of how many objects you have in total

00:22:00,159 --> 00:22:07,850
that's if you have a really large number

00:22:05,210 --> 00:22:09,799
of rows that query in itself can be slow

00:22:07,850 --> 00:22:12,770
so show full result palette was

00:22:09,799 --> 00:22:14,960
introduced in 18 and it removes that but

00:22:12,770 --> 00:22:17,419
it doesn't remove the default pagination

00:22:14,960 --> 00:22:19,010
at the bottom which also does that query

00:22:17,419 --> 00:22:22,669
so you need to remove pagination if

00:22:19,010 --> 00:22:25,850
you're doing that and I don't recommend

00:22:22,669 --> 00:22:30,020
any of these really as a long-term

00:22:25,850 --> 00:22:31,640
solution they're just quick hacks if

00:22:30,020 --> 00:22:34,580
someone is breathing down your neck and

00:22:31,640 --> 00:22:37,190
you need a way to get some time to

00:22:34,580 --> 00:22:38,720
actually fix the problem and that's the

00:22:37,190 --> 00:22:40,809
end of my presentation thank you all for

00:22:38,720 --> 00:22:40,809
listening

00:22:45,660 --> 00:22:52,500
and I think we have maybe a couple of

00:22:48,430 --> 00:22:52,500
minutes for questions if anyone has any

00:22:57,970 --> 00:23:00,660
really

00:23:09,500 --> 00:23:13,820
hey okay so you've shown us a bunch of

00:23:12,020 --> 00:23:15,500
stuff here how much of this could be

00:23:13,820 --> 00:23:16,640
baked into Django's core how much of it

00:23:15,500 --> 00:23:18,710
is just something you need to be aware

00:23:16,640 --> 00:23:21,230
of is there actually room to improve

00:23:18,710 --> 00:23:24,350
Django's core admin here to avoid some

00:23:21,230 --> 00:23:26,390
of these problems so that's that's an

00:23:24,350 --> 00:23:28,910
interesting question I think a lot of it

00:23:26,390 --> 00:23:32,090
would have to be introspecting kala

00:23:28,910 --> 00:23:35,660
bowls because that's where you end up

00:23:32,090 --> 00:23:37,550
with some of the problems I don't know

00:23:35,660 --> 00:23:41,680
how I'm sure that you could build that

00:23:37,550 --> 00:23:43,880
optimization in I don't know what the

00:23:41,680 --> 00:23:45,980
priority of that would be compared to

00:23:43,880 --> 00:23:47,240
like other features that people really

00:23:45,980 --> 00:23:50,000
want because basically what you'd have

00:23:47,240 --> 00:23:51,680
to do is like int respects dunder

00:23:50,000 --> 00:23:54,650
unicode methods to see if people are

00:23:51,680 --> 00:23:56,330
using foreign keys and actually look at

00:23:54,650 --> 00:23:58,040
all the calls that people are putting in

00:23:56,330 --> 00:24:01,030
list display to see if they include

00:23:58,040 --> 00:24:04,640
things that could be automatically

00:24:01,030 --> 00:24:06,290
select related prefetch related I

00:24:04,640 --> 00:24:08,180
haven't looked into that enough to know

00:24:06,290 --> 00:24:09,650
if it could be baked in it might be

00:24:08,180 --> 00:24:12,530
possible to do something clever with

00:24:09,650 --> 00:24:19,130
that and include have Django detect that

00:24:12,530 --> 00:24:22,520
automatically hi thanks for the great

00:24:19,130 --> 00:24:26,150
talk I've used Django debug tool bar to

00:24:22,520 --> 00:24:28,310
sort through queries of you know a

00:24:26,150 --> 00:24:30,770
custom web page but I never thought to

00:24:28,310 --> 00:24:32,480
use it for the admin so its a good

00:24:30,770 --> 00:24:35,960
application I'm wondering if you have

00:24:32,480 --> 00:24:39,140
any advice on you know sorting through

00:24:35,960 --> 00:24:41,630
the list of SQL queries because it can

00:24:39,140 --> 00:24:46,280
be you know expansive like you were

00:24:41,630 --> 00:24:48,890
saying 104 or or upwards and how can you

00:24:46,280 --> 00:24:53,060
distill that down to you know exactly

00:24:48,890 --> 00:24:56,030
where is it calling all of these queries

00:24:53,060 --> 00:24:56,990
within your code I've had some trouble

00:24:56,030 --> 00:25:00,530
with that and I'm wondering if you have

00:24:56,990 --> 00:25:02,930
any advice for that so I think within

00:25:00,530 --> 00:25:06,730
the admin it's usually easier to figure

00:25:02,930 --> 00:25:13,880
out then if you're on a custom web page

00:25:06,730 --> 00:25:15,650
because it's a lot meliss tu the queries

00:25:13,880 --> 00:25:17,960
are all going to be in order if you have

00:25:15,650 --> 00:25:20,660
issues it's generally because you're

00:25:17,960 --> 00:25:22,490
executing queries on every row and

00:25:20,660 --> 00:25:23,660
Django debug tool bar will

00:25:22,490 --> 00:25:25,460
in the most recent version as i

00:25:23,660 --> 00:25:30,470
mentioned helpfully indicate which ones

00:25:25,460 --> 00:25:32,990
are being duplicated short of that the

00:25:30,470 --> 00:25:37,370
the way that I typically approach it is

00:25:32,990 --> 00:25:40,640
to look for patterns where queries are

00:25:37,370 --> 00:25:42,650
being executed on things that I think

00:25:40,640 --> 00:25:48,290
should already have been cashed in the

00:25:42,650 --> 00:25:49,970
code and there's probably an opportunity

00:25:48,290 --> 00:25:51,650
there for someone to write a tool to

00:25:49,970 --> 00:25:52,809
actually go through and analyze some of

00:25:51,650 --> 00:25:55,700
these quarries and make recommendations

00:25:52,809 --> 00:25:57,440
specific to django about you know how

00:25:55,700 --> 00:26:00,320
you could use the ORM to figure this out

00:25:57,440 --> 00:26:04,370
but it's right now there's there's not

00:26:00,320 --> 00:26:06,470
much that is that you can do beyond

00:26:04,370 --> 00:26:08,710
being familiar with your models and

00:26:06,470 --> 00:26:11,690
familiar enough without worries are

00:26:08,710 --> 00:26:13,370
executed by the ORM to be able to see

00:26:11,690 --> 00:26:17,090
the patterns one thing that you can do

00:26:13,370 --> 00:26:22,370
that I found helpful is to purposefully

00:26:17,090 --> 00:26:25,010
I write queries and look at the sequel

00:26:22,370 --> 00:26:29,000
that's generated just as a learning

00:26:25,010 --> 00:26:32,900
experience because that will help you

00:26:29,000 --> 00:26:35,320
get a sense for the relationship between

00:26:32,900 --> 00:26:37,429
things that you're writing in Python and

00:26:35,320 --> 00:26:42,770
the number of queries that are actually

00:26:37,429 --> 00:26:45,880
generated if if you're using a debugger

00:26:42,770 --> 00:26:49,760
can you like pause halfway through and

00:26:45,880 --> 00:26:52,670
look if Django debug tool bar is like

00:26:49,760 --> 00:26:54,020
counting half of the requests I don't

00:26:52,670 --> 00:26:55,340
know if you could do that with Django

00:26:54,020 --> 00:26:58,970
debug tool or someone else might know

00:26:55,340 --> 00:27:00,890
but I do know that if I'm using the

00:26:58,970 --> 00:27:02,510
debugger and I have logging turned on so

00:27:00,890 --> 00:27:05,059
that it's actually logging rock quarries

00:27:02,510 --> 00:27:08,740
as you step through you can see which

00:27:05,059 --> 00:27:14,030
queries are being generated at each step

00:27:08,740 --> 00:27:15,770
thank you so in terms of what Django

00:27:14,030 --> 00:27:18,309
could do out of the box is perhaps like

00:27:15,770 --> 00:27:20,900
a query count warning like in debug more

00:27:18,309 --> 00:27:23,360
sees that you're doing over 50 queries

00:27:20,900 --> 00:27:26,390
just you know print out you know this

00:27:23,360 --> 00:27:29,320
pages like 300 queries

00:27:26,390 --> 00:27:36,620
let's look into it that's a good idea

00:27:29,320 --> 00:27:39,200
Sprint's are coming up also a just

00:27:36,620 --> 00:27:43,070
obligatory note the company I work for

00:27:39,200 --> 00:27:46,160
doctor on demand is is hiring a django

00:27:43,070 --> 00:27:48,610
developer so if anyone's interested get

00:27:46,160 --> 00:27:50,660
in touch there are no more questions

00:27:48,610 --> 00:27:52,960
thank you all I'm sure everyone wants to

00:27:50,660 --> 00:27:52,960

YouTube URL: https://www.youtube.com/watch?v=vdlZmbJcAvI


