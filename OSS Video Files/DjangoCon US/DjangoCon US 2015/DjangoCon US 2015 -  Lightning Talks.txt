Title: DjangoCon US 2015 -  Lightning Talks
Publication date: 2017-11-03
Playlist: DjangoCon US 2015
Description: 
	Lightning Talks

Ricardo Ferraz Leal "Leveraging Neutron Sciences with Django"

Grant Jenks "Python Sorted Containers Module"

Tracy Osborn "Hello Web App Kickstarter Campaign"

Dan Dietz "Fabric Bolt"

Andrew Godwin "Channels Everywhere"
Captions: 
	00:00:16,100 --> 00:00:22,760
alright so my name is Ricardo I'm sort

00:00:20,970 --> 00:00:24,840
of a hybrid I'm like fifty percent

00:00:22,760 --> 00:00:27,210
scientist fifty percent software

00:00:24,840 --> 00:00:29,429
engineer so I'm going to talk about

00:00:27,210 --> 00:00:31,859
neutrons today so I work for the

00:00:29,429 --> 00:00:35,520
spallation neutron source at oak ridge

00:00:31,859 --> 00:00:37,530
national lab this is a picture of the

00:00:35,520 --> 00:00:39,450
spallation neutron source for those who

00:00:37,530 --> 00:00:41,820
don't know this is in oakridge oakridge

00:00:39,450 --> 00:00:44,610
was one of the secret cities that was

00:00:41,820 --> 00:00:47,190
built for the manhattan project so we

00:00:44,610 --> 00:00:50,239
run him for the the little boy the bomb

00:00:47,190 --> 00:00:52,620
that was dropped in over over Japan

00:00:50,239 --> 00:00:55,770
honey was was enriched over there in

00:00:52,620 --> 00:00:58,109
oakridge things changed is not secret as

00:00:55,770 --> 00:01:00,859
it anymore and today for example we have

00:00:58,109 --> 00:01:04,559
the most powerful computer in the world

00:01:00,859 --> 00:01:07,200
we also have huge programs in in biology

00:01:04,559 --> 00:01:09,210
in material science we have

00:01:07,200 --> 00:01:12,720
environmental science we also have

00:01:09,210 --> 00:01:14,010
bobcats and bears in the parking lot and

00:01:12,720 --> 00:01:18,840
this is really true because I've seen

00:01:14,010 --> 00:01:20,640
them okay so just a quick introduction

00:01:18,840 --> 00:01:22,080
about spallation neutron source so we

00:01:20,640 --> 00:01:24,630
pretty get we work with neutrons

00:01:22,080 --> 00:01:28,650
neutrons they have properties that allow

00:01:24,630 --> 00:01:31,290
us to study matter they have they have a

00:01:28,650 --> 00:01:33,360
thigh that is a wavelength that is

00:01:31,290 --> 00:01:35,700
similar to the distance between atoms so

00:01:33,360 --> 00:01:37,409
we can study matter with neutrons so to

00:01:35,700 --> 00:01:41,850
produce neutrons basically what we have

00:01:37,409 --> 00:01:43,950
is we produce hydrogen ions so another

00:01:41,850 --> 00:01:46,350
more for other january two electrons we

00:01:43,950 --> 00:01:48,450
speed this do you take in a linear

00:01:46,350 --> 00:01:51,479
accelerator to roughly ninety percent of

00:01:48,450 --> 00:01:52,829
the speed of light we then chop off the

00:01:51,479 --> 00:01:55,740
two electrons because you don't need

00:01:52,829 --> 00:02:01,320
them and then we accumulate them in this

00:01:55,740 --> 00:02:05,520
ring and then we fire this to a mercury

00:02:01,320 --> 00:02:09,259
mercury target and we obtain neutrons

00:02:05,520 --> 00:02:12,350
like and those neutrons they are then

00:02:09,259 --> 00:02:14,120
directed to instruments

00:02:12,350 --> 00:02:15,950
okay this is an example of an instrument

00:02:14,120 --> 00:02:17,450
that we have here this is pretty huge as

00:02:15,950 --> 00:02:21,500
you can see we can see like a little guy

00:02:17,450 --> 00:02:24,260
over there so basically what we have we

00:02:21,500 --> 00:02:25,820
get those neutrons we have a sample I

00:02:24,260 --> 00:02:27,770
don't know can you see them oh yeah cool

00:02:25,820 --> 00:02:30,110
okay there's a sample over there so we

00:02:27,770 --> 00:02:32,930
shoot our sample with neutrons those

00:02:30,110 --> 00:02:34,310
neutrons are scattered and we get them

00:02:32,930 --> 00:02:36,140
on detectors I'm not going through the

00:02:34,310 --> 00:02:39,020
data we get the neutrons oh and all that

00:02:36,140 --> 00:02:41,840
so basically i will use django Django is

00:02:39,020 --> 00:02:44,000
used everywhere along all this process

00:02:41,840 --> 00:02:46,010
so all the instruments we have I think

00:02:44,000 --> 00:02:48,050
we have around 12-15 instruments they

00:02:46,010 --> 00:02:51,260
all have Django's somehow so we use

00:02:48,050 --> 00:02:53,810
Django to monitor everything and this is

00:02:51,260 --> 00:02:55,460
an example of how you so you use Django

00:02:53,810 --> 00:02:58,040
to monitor all the process you use a lot

00:02:55,460 --> 00:02:59,930
of JavaScript fancy plots fancy fancy

00:02:58,040 --> 00:03:02,990
stuff alright and then there's another

00:02:59,930 --> 00:03:05,330
thing that we also do so we do data

00:03:02,990 --> 00:03:07,100
reduction because our data is huge we

00:03:05,330 --> 00:03:08,690
have to submit our data to a cluster

00:03:07,100 --> 00:03:12,440
this is part of the project that I'm

00:03:08,690 --> 00:03:14,150
working so the idea is something like

00:03:12,440 --> 00:03:15,920
these we have a reduction and every

00:03:14,150 --> 00:03:18,350
reduction is composed by several scans

00:03:15,920 --> 00:03:21,290
we want to minimize their horse so what

00:03:18,350 --> 00:03:23,120
what the users or scientists usually do

00:03:21,290 --> 00:03:25,010
they measure the same thing several

00:03:23,120 --> 00:03:26,660
times so for example for a small angle

00:03:25,010 --> 00:03:29,630
scattering experiment which is basically

00:03:26,660 --> 00:03:32,000
measuring the deviations of our of the

00:03:29,630 --> 00:03:33,830
scattered neutrons we have the same

00:03:32,000 --> 00:03:35,870
sample a protein for example and we

00:03:33,830 --> 00:03:37,580
dissolve it in several concentrations so

00:03:35,870 --> 00:03:42,620
we measure everything we average and we

00:03:37,580 --> 00:03:44,810
have some data okay so then this is the

00:03:42,620 --> 00:03:47,150
mediator is due to a cluster we can

00:03:44,810 --> 00:03:49,190
either submit a reduction composed of

00:03:47,150 --> 00:03:53,570
several scans is a simple MPI job or a

00:03:49,190 --> 00:03:55,730
single MPI job or multiple jobs and now

00:03:53,570 --> 00:03:57,740
this is what I'm working so I don't have

00:03:55,730 --> 00:03:59,480
much experience with Django and I've got

00:03:57,740 --> 00:04:01,400
a lot of questions I'm taking advantage

00:03:59,480 --> 00:04:03,950
of these five minutes to get response

00:04:01,400 --> 00:04:05,630
from you okay so what we have what I

00:04:03,950 --> 00:04:07,430
have basically I have more reduction

00:04:05,630 --> 00:04:10,640
more reduction is composed by several

00:04:07,430 --> 00:04:12,980
scans and I have this job what I submit

00:04:10,640 --> 00:04:14,810
either a reduction or I submit several

00:04:12,980 --> 00:04:17,180
scans so I have this polymorphic

00:04:14,810 --> 00:04:20,359
Association I have no clue how to do

00:04:17,180 --> 00:04:22,880
this in Django okay another thing that i

00:04:20,359 --> 00:04:25,550
have so i have my results and my results

00:04:22,880 --> 00:04:28,280
it depends on the inputs of that

00:04:25,550 --> 00:04:30,979
the scientists to give me and they they

00:04:28,280 --> 00:04:33,020
can be ideal for this would be Jason but

00:04:30,979 --> 00:04:35,750
Jason's so far as we heard after lunch

00:04:33,020 --> 00:04:38,449
we don't we only have Jason with a key

00:04:35,750 --> 00:04:42,500
and a value there's no nested Jason

00:04:38,449 --> 00:04:44,389
still supported in Django so I'm

00:04:42,500 --> 00:04:46,849
summarizing everything so basically I

00:04:44,389 --> 00:04:48,319
need something like these where I get

00:04:46,849 --> 00:04:50,240
all my objects and I get the type

00:04:48,319 --> 00:04:52,069
associated the reduction of us can I

00:04:50,240 --> 00:04:56,569
also have something that I didn't tell

00:04:52,069 --> 00:04:58,340
so I have my my so the forms that we saw

00:04:56,569 --> 00:05:00,710
that you saw before just to submit data

00:04:58,340 --> 00:05:03,169
they are cluttered with a lot of so I

00:05:00,710 --> 00:05:04,849
have like 100 entries in my form even

00:05:03,169 --> 00:05:06,860
more sometimes they open this you know

00:05:04,849 --> 00:05:08,389
like I have default values sometimes the

00:05:06,860 --> 00:05:10,370
user stick a button and I have like a

00:05:08,389 --> 00:05:12,110
jquery very fancy thing that show ups

00:05:10,370 --> 00:05:14,539
with parameter that I have to change and

00:05:12,110 --> 00:05:16,400
my templates they are clutter they are

00:05:14,539 --> 00:05:18,409
huge and I wonder if I can have this

00:05:16,400 --> 00:05:20,750
desert have this better i saw this

00:05:18,409 --> 00:05:24,349
package crispy forms i don't know if

00:05:20,750 --> 00:05:25,729
it's good or not i think because i

00:05:24,349 --> 00:05:29,800
talked about with some people some like

00:05:25,729 --> 00:05:34,279
some some don't and also about about

00:05:29,800 --> 00:05:36,080
Jason I so but also the Jason the proper

00:05:34,279 --> 00:05:38,110
Jason is not still support in Django I

00:05:36,080 --> 00:05:42,590
wonder if he's going to be supporting

00:05:38,110 --> 00:05:44,150
1185 or only in a 1.9 well and that's so

00:05:42,590 --> 00:05:49,969
what I have for you so please come and

00:05:44,150 --> 00:05:52,009
help me all right thank you very much so

00:05:49,969 --> 00:05:53,719
this talk is about sorted containers

00:05:52,009 --> 00:05:56,599
it's a python module I've been working

00:05:53,719 --> 00:06:00,110
on this is going to be sorted containers

00:05:56,599 --> 00:06:01,759
in five minutes my name is grant Jenks

00:06:00,110 --> 00:06:03,889
I've been working on Python since about

00:06:01,759 --> 00:06:05,840
two thousand eleven like many of you I

00:06:03,889 --> 00:06:09,740
was pleasantly surprised and impressed

00:06:05,840 --> 00:06:11,629
by pythons batteries included slogan not

00:06:09,740 --> 00:06:14,449
long into Python development I started

00:06:11,629 --> 00:06:17,330
asking questions like these how do you

00:06:14,449 --> 00:06:19,460
sort a Python dictionary by key how do

00:06:17,330 --> 00:06:21,800
you sort it by value how do I get the

00:06:19,460 --> 00:06:24,550
maximum value out of a dictionary could

00:06:21,800 --> 00:06:27,259
I somehow search at dictionaries keys

00:06:24,550 --> 00:06:29,960
these questions get viewed millions of

00:06:27,259 --> 00:06:33,409
times for every priority queue or cash

00:06:29,960 --> 00:06:36,080
or in memory index or even indexable set

00:06:33,409 --> 00:06:38,659
that somebody needs in response i got

00:06:36,080 --> 00:06:39,230
some great answers the first is ordered

00:06:38,659 --> 00:06:41,690
it

00:06:39,230 --> 00:06:44,780
so you might have actually also used

00:06:41,690 --> 00:06:46,100
Django's sorted at one point you

00:06:44,780 --> 00:06:48,320
quickly learn though that ordered

00:06:46,100 --> 00:06:51,140
doesn't stay sorted it just stays

00:06:48,320 --> 00:06:53,720
ordered there's also counter which is

00:06:51,140 --> 00:06:56,240
pretty clever another Raymond hettinger

00:06:53,720 --> 00:06:58,700
contraption it's combined with another

00:06:56,240 --> 00:07:01,460
module called heap queue which helps you

00:06:58,700 --> 00:07:04,970
maintain a binary heap and all of these

00:07:01,460 --> 00:07:07,100
were wonderfully fast except when they

00:07:04,970 --> 00:07:09,080
weren't so they kind of assumed that

00:07:07,100 --> 00:07:11,240
updates can be batched and sorted

00:07:09,080 --> 00:07:13,880
methods can work lazily and that gets us

00:07:11,240 --> 00:07:17,480
really far actually like really far but

00:07:13,880 --> 00:07:20,900
sometimes you want even more so if C++

00:07:17,480 --> 00:07:23,480
and Java and.net all have sorted map

00:07:20,900 --> 00:07:25,210
like data types why doesn't Python I

00:07:23,480 --> 00:07:27,770
found the answer from Nick Coughlin

00:07:25,210 --> 00:07:30,410
paraphrasing Guido if a user is

00:07:27,770 --> 00:07:32,120
sophisticated enough to realize that the

00:07:30,410 --> 00:07:34,220
built-in types aren't the right solution

00:07:32,120 --> 00:07:36,100
for their problem then they're also up

00:07:34,220 --> 00:07:39,890
to the task of finding an appropriate

00:07:36,100 --> 00:07:42,560
third-party library to that I say good

00:07:39,890 --> 00:07:44,180
luck if you go out there you'll find a

00:07:42,560 --> 00:07:46,220
dozen different solutions they'll all

00:07:44,180 --> 00:07:47,960
have different api's they all have

00:07:46,220 --> 00:07:50,240
varying levels of compatibility and

00:07:47,960 --> 00:07:52,190
performance and if we decided only by

00:07:50,240 --> 00:07:55,670
most downloaded then we'd end up going

00:07:52,190 --> 00:07:58,490
with B list so let's try that b-list

00:07:55,670 --> 00:08:00,950
implements a b-tree data type in c with

00:07:58,490 --> 00:08:03,080
a node size of 128 and i was pretty

00:08:00,950 --> 00:08:05,810
happy with it until one day I made this

00:08:03,080 --> 00:08:08,900
discovery I'm surprised here because b

00:08:05,810 --> 00:08:10,820
list should shuffle 128 pointers while

00:08:08,900 --> 00:08:13,670
bisect should shuffle a thousand

00:08:10,820 --> 00:08:17,510
pointers like how can bisect be faster

00:08:13,670 --> 00:08:19,370
here so I went back and I tried trying

00:08:17,510 --> 00:08:21,590
tried to write something in Python I

00:08:19,370 --> 00:08:24,020
tried evaluating a lot of different

00:08:21,590 --> 00:08:25,850
kinds of sorted tree data types there's

00:08:24,020 --> 00:08:29,660
red black there skip list there splay

00:08:25,850 --> 00:08:31,630
there's randomized there's treat a lot

00:08:29,660 --> 00:08:34,070
of these are all written in C or C++

00:08:31,630 --> 00:08:36,110
there's one that's a skip list

00:08:34,070 --> 00:08:39,169
implantation in Python but it was kind

00:08:36,110 --> 00:08:41,870
of slow all I can say in five minutes is

00:08:39,169 --> 00:08:44,690
that sorted containers runs with this

00:08:41,870 --> 00:08:46,910
idea it's kind of like a bee tree but

00:08:44,690 --> 00:08:50,180
it's only half-heartedly so it relies

00:08:46,910 --> 00:08:52,070
entirely on the bisect module and while

00:08:50,180 --> 00:08:53,720
it's slow to program in Python

00:08:52,070 --> 00:08:56,690
the interpreter the Python interpreter

00:08:53,720 --> 00:08:59,240
is written in C so if you think of it as

00:08:56,690 --> 00:09:01,340
programming the interpreter you actually

00:08:59,240 --> 00:09:04,490
are writing C code and it turns out

00:09:01,340 --> 00:09:08,360
lists are really fast like really fast

00:09:04,490 --> 00:09:10,150
and trees not so much so listen to what

00:09:08,360 --> 00:09:13,400
some smart people have to say about it

00:09:10,150 --> 00:09:15,440
Alex Martelli riots good stuff I like

00:09:13,400 --> 00:09:17,390
the simple effective implementation idea

00:09:15,440 --> 00:09:19,610
of splitting the sorted containers into

00:09:17,390 --> 00:09:22,520
smaller fragments to avoid the order and

00:09:19,610 --> 00:09:24,920
insertion costs Jeff nup writes that

00:09:22,520 --> 00:09:26,840
last part fastest see extensions was

00:09:24,920 --> 00:09:28,700
difficult to believe I would need some

00:09:26,840 --> 00:09:30,410
sort of performance comparison to be

00:09:28,700 --> 00:09:32,780
convinced this is true the author

00:09:30,410 --> 00:09:35,450
includes this in the docs it is and

00:09:32,780 --> 00:09:37,160
Kevin Samuel says I'm quite amazed not

00:09:35,450 --> 00:09:38,930
just by the code quality but the actual

00:09:37,160 --> 00:09:41,380
amount of work you put it stuff that is

00:09:38,930 --> 00:09:43,310
not code documentation benchmarking

00:09:41,380 --> 00:09:46,100
implementation explanations and it was a

00:09:43,310 --> 00:09:48,650
true inspiration actually from Django to

00:09:46,100 --> 00:09:52,340
be this driven to create that much in

00:09:48,650 --> 00:09:54,560
terms of docs lastly marc sommerfeld

00:09:52,340 --> 00:09:56,270
makes a short plea he writes pythons

00:09:54,560 --> 00:09:58,520
batteries included standard library

00:09:56,270 --> 00:09:59,840
seems to have a battery missing and the

00:09:58,520 --> 00:10:02,240
argument that we've never had it before

00:09:59,840 --> 00:10:03,710
has worn thin it's time that Python

00:10:02,240 --> 00:10:06,050
offered a full range of collection

00:10:03,710 --> 00:10:09,350
classes out of the box including sorted

00:10:06,050 --> 00:10:15,830
ones so I submit sorted containers thank

00:10:09,350 --> 00:10:18,260
you so I hope you all forget me forgive

00:10:15,830 --> 00:10:23,060
me for doing a purely promotional talk

00:10:18,260 --> 00:10:24,530
here marketing marketing this I'm Tracy

00:10:23,060 --> 00:10:26,570
Osborne you might have seen the book

00:10:24,530 --> 00:10:27,680
I've written and I'm really really proud

00:10:26,570 --> 00:10:30,500
of it and you've haven't seen it yet

00:10:27,680 --> 00:10:34,490
come find me and hello web app is an

00:10:30,500 --> 00:10:37,460
introductory into Django and I aimed it

00:10:34,490 --> 00:10:39,020
at non programmers and designers and

00:10:37,460 --> 00:10:42,740
people who are used to using the website

00:10:39,020 --> 00:10:45,260
and I start out with templates first and

00:10:42,740 --> 00:10:48,140
doing static files and check out the

00:10:45,260 --> 00:10:49,940
website so this is the original book

00:10:48,140 --> 00:10:55,010
it's awesome you can buy it off me here

00:10:49,940 --> 00:10:56,990
and on amazon as well for later and i

00:10:55,010 --> 00:10:58,460
wanted to point out the most helpful

00:10:56,990 --> 00:11:00,890
critical review which i think is really

00:10:58,460 --> 00:11:02,660
funny where it says overpriced book hey

00:11:00,890 --> 00:11:04,420
i self-published very introductory

00:11:02,660 --> 00:11:07,540
certainly not worth twenty dollar

00:11:04,420 --> 00:11:10,420
at least it's on luxurious paper so I'll

00:11:07,540 --> 00:11:14,290
take it I'm designer I'd your IRA I did

00:11:10,420 --> 00:11:16,899
everything by content as well written

00:11:14,290 --> 00:11:20,019
and thank you mr. critical review or mr.

00:11:16,899 --> 00:11:22,630
and mrs. but I'm really up here I really

00:11:20,019 --> 00:11:23,920
want to expand this there you go this is

00:11:22,630 --> 00:11:26,320
why I'm really up here because I wrote

00:11:23,920 --> 00:11:27,670
this book and I am fundraising for the

00:11:26,320 --> 00:11:30,160
second book which is hella web app

00:11:27,670 --> 00:11:32,199
internet introductory concepts so anyone

00:11:30,160 --> 00:11:34,690
who has gone through a hello web app and

00:11:32,199 --> 00:11:36,870
has it basic web app or the awesome

00:11:34,690 --> 00:11:39,130
ginger girls tutorial or any other

00:11:36,870 --> 00:11:43,029
tutorial that launched them into their

00:11:39,130 --> 00:11:45,790
first basic web app this new book will

00:11:43,029 --> 00:11:49,449
cover any concepts like adding stripe

00:11:45,790 --> 00:11:51,699
adding an API working sessions adding

00:11:49,449 --> 00:11:54,339
user uploaded images always like things

00:11:51,699 --> 00:11:56,589
that you would build upon a basic web

00:11:54,339 --> 00:11:58,329
app and it's going awesome I just

00:11:56,589 --> 00:12:01,060
launched it five days ago i'm almost at

00:11:58,329 --> 00:12:03,279
the minimum goal which is fantastic but

00:12:01,060 --> 00:12:04,510
two kicks arse of two very lisa

00:12:03,279 --> 00:12:06,220
Kickstarter's of you back the

00:12:04,510 --> 00:12:08,019
kickstarter campaign you'll get the new

00:12:06,220 --> 00:12:09,670
book by december and if you back the

00:12:08,019 --> 00:12:11,860
first campaign you would know i'm a year

00:12:09,670 --> 00:12:14,740
late from that one that will not happen

00:12:11,860 --> 00:12:18,339
this time I promise the PACU be in your

00:12:14,740 --> 00:12:19,480
hands by December so yeah hello web app

00:12:18,339 --> 00:12:21,430
intermediate concepts that is

00:12:19,480 --> 00:12:22,990
fundraising on Kickstarter watch the

00:12:21,430 --> 00:12:27,130
video because you get to see faces like

00:12:22,990 --> 00:12:28,630
this in the video and thank you to

00:12:27,130 --> 00:12:30,279
everyone who backed the last Kickstarter

00:12:28,630 --> 00:12:39,120
and has been so supportive my journey

00:12:30,279 --> 00:12:39,120
with my book Wow Django con

00:12:42,110 --> 00:12:48,150
all right my name is dan deets and I'm

00:12:45,480 --> 00:12:51,990
going to be giving you a quick overview

00:12:48,150 --> 00:12:56,100
of something that we built called fabric

00:12:51,990 --> 00:13:02,520
Bowl and the title of this talk is look

00:12:56,100 --> 00:13:06,320
ma no command line so go ahead and wait

00:13:02,520 --> 00:13:06,320
for the presentation to pull up here

00:13:06,890 --> 00:13:15,900
perfect alright a little bit of a false

00:13:11,340 --> 00:13:18,750
start first of all we've got a company

00:13:15,900 --> 00:13:20,670
bolt effect that supports this project

00:13:18,750 --> 00:13:26,310
so I'm just going to give a shameless

00:13:20,670 --> 00:13:29,040
plug for our company Django dash 2013

00:13:26,310 --> 00:13:31,230
was where we originally developed this

00:13:29,040 --> 00:13:32,190
piece of software so I don't know if

00:13:31,230 --> 00:13:34,470
you're familiar with the competition

00:13:32,190 --> 00:13:37,440
that hasn't run for a couple years now

00:13:34,470 --> 00:13:41,600
but we like to say we take we took first

00:13:37,440 --> 00:13:43,890
place but we actually tied for first so

00:13:41,600 --> 00:13:48,060
what we tried to do was solve some

00:13:43,890 --> 00:13:50,070
problems that we saw we built a tool

00:13:48,060 --> 00:13:52,650
that's designed to help with deployments

00:13:50,070 --> 00:13:54,390
okay so there's less of people that use

00:13:52,650 --> 00:13:56,790
fabric I'm not going to get into that

00:13:54,390 --> 00:13:59,940
but when you're using fabric to manage

00:13:56,790 --> 00:14:02,730
deployment systems you need programmers

00:13:59,940 --> 00:14:05,400
in order to execute those deployment

00:14:02,730 --> 00:14:07,050
tasks you also need your programmers to

00:14:05,400 --> 00:14:08,870
have permissions to connect to

00:14:07,050 --> 00:14:11,580
appropriate machine so they have to have

00:14:08,870 --> 00:14:12,780
the elevated permissions to you know go

00:14:11,580 --> 00:14:15,360
out to your production servers and all

00:14:12,780 --> 00:14:16,530
that good stuff and then you also have

00:14:15,360 --> 00:14:18,000
to keep track of what's actually

00:14:16,530 --> 00:14:19,380
happening so when you run those

00:14:18,000 --> 00:14:22,080
deployments you want logging you want

00:14:19,380 --> 00:14:25,920
tracking know what's being released okay

00:14:22,080 --> 00:14:28,730
so what we wanted to do was be able to

00:14:25,920 --> 00:14:32,940
take something safely to production

00:14:28,730 --> 00:14:34,260
without you so a normal workflow could

00:14:32,940 --> 00:14:35,670
look like this all kinds of

00:14:34,260 --> 00:14:37,560
organizations have different workflows

00:14:35,670 --> 00:14:40,230
but you could be doing programming send

00:14:37,560 --> 00:14:42,420
something the QA you have them client

00:14:40,230 --> 00:14:44,310
review potentially in a staging

00:14:42,420 --> 00:14:45,900
environment something like that project

00:14:44,310 --> 00:14:48,130
manager is working with the customer

00:14:45,900 --> 00:14:49,810
saying hey great this is all good to go

00:14:48,130 --> 00:14:51,970
we got it approved to go on friday right

00:14:49,810 --> 00:14:53,980
so it's monday to prove to go out at

00:14:51,970 --> 00:14:55,870
some point in the future so then friday

00:14:53,980 --> 00:14:58,450
rolls around they stop you from working

00:14:55,870 --> 00:15:00,190
because you're happily working on the

00:14:58,450 --> 00:15:04,570
next feature and then you run that

00:15:00,190 --> 00:15:06,790
deployment so wouldn't be great if that

00:15:04,570 --> 00:15:08,410
project manager or some other non

00:15:06,790 --> 00:15:12,220
technical person could go ahead and run

00:15:08,410 --> 00:15:13,450
that deployment its kind when when we

00:15:12,220 --> 00:15:15,760
have a workflow that's constantly

00:15:13,450 --> 00:15:17,500
interrupting a developer to run those

00:15:15,760 --> 00:15:19,900
deployments and manage all of that stuff

00:15:17,500 --> 00:15:22,240
it's kind of like the driver here having

00:15:19,900 --> 00:15:24,480
to get out and change his own tires so

00:15:22,240 --> 00:15:28,120
that's at least from our perspective

00:15:24,480 --> 00:15:29,320
access control you can have a system

00:15:28,120 --> 00:15:31,750
like this where you have developers that

00:15:29,320 --> 00:15:33,700
have machines and they have to have that

00:15:31,750 --> 00:15:35,860
ssh keys installed and then those

00:15:33,700 --> 00:15:37,780
ssh-keys configured on all the those

00:15:35,860 --> 00:15:39,910
other machines out there wouldn't be

00:15:37,780 --> 00:15:42,100
great if we had a system where we could

00:15:39,910 --> 00:15:43,600
have a central place where those keys

00:15:42,100 --> 00:15:45,670
are stored it has access and then we

00:15:43,600 --> 00:15:47,290
hand out permissions in a nice web

00:15:45,670 --> 00:15:49,830
interface to different types of folks to

00:15:47,290 --> 00:15:53,380
give them different levels of access

00:15:49,830 --> 00:15:56,800
being able to track releases is great so

00:15:53,380 --> 00:15:58,840
we had a fantastic talk from Lincoln

00:15:56,800 --> 00:16:01,870
loop earlier today where they're talking

00:15:58,840 --> 00:16:03,760
about doing releases and best practices

00:16:01,870 --> 00:16:05,590
and you don't want to be able to answer

00:16:03,760 --> 00:16:07,810
a question like I think we released this

00:16:05,590 --> 00:16:10,630
you know sometime last week we want to

00:16:07,810 --> 00:16:14,650
be able to say yeah you know 342 on

00:16:10,630 --> 00:16:16,750
Monday is when it went out so what we

00:16:14,650 --> 00:16:19,270
did was we built a web interface it's a

00:16:16,750 --> 00:16:22,210
django project to run your fabric tasks

00:16:19,270 --> 00:16:23,800
and so you can create users in the

00:16:22,210 --> 00:16:25,960
system you can hand out permissions you

00:16:23,800 --> 00:16:27,580
can manage all that stuff and then you

00:16:25,960 --> 00:16:30,520
can actually track what happened when

00:16:27,580 --> 00:16:32,710
those deployments run so it's really

00:16:30,520 --> 00:16:35,020
easy to get started pip install fabric

00:16:32,710 --> 00:16:36,460
bowl you do your knit you migrate it

00:16:35,020 --> 00:16:38,080
your run server and you're up and

00:16:36,460 --> 00:16:39,970
running and then you have a beautiful

00:16:38,080 --> 00:16:42,580
interface that looks like this welcome

00:16:39,970 --> 00:16:45,100
to fabric bowl you would go in and

00:16:42,580 --> 00:16:47,320
configure your hosts you would configure

00:16:45,100 --> 00:16:50,470
stages so you'd say okay these hosts are

00:16:47,320 --> 00:16:53,410
what I use for doing you know my testing

00:16:50,470 --> 00:16:56,740
staging whatever and I've got a stage

00:16:53,410 --> 00:16:58,360
over here for production once you

00:16:56,740 --> 00:16:59,830
actually get to the point where you want

00:16:58,360 --> 00:17:00,470
to run a deployment you would select a

00:16:59,830 --> 00:17:02,360
stage

00:17:00,470 --> 00:17:04,250
and then you actually can see over here

00:17:02,360 --> 00:17:06,050
on the right hand side there's a drop

00:17:04,250 --> 00:17:08,120
list to select from the task you'd like

00:17:06,050 --> 00:17:10,400
to deploy once you go through that

00:17:08,120 --> 00:17:12,410
process you click deploy you actually

00:17:10,400 --> 00:17:14,540
see what happened so we have a status

00:17:12,410 --> 00:17:16,550
that shows yep everything was great and

00:17:14,540 --> 00:17:18,080
here's the full log of everything that

00:17:16,550 --> 00:17:19,400
happened so all of that beautiful log

00:17:18,080 --> 00:17:21,500
that you would normally get working on

00:17:19,400 --> 00:17:23,480
the command line we capture store it we

00:17:21,500 --> 00:17:26,210
keep it for later so in the event that

00:17:23,480 --> 00:17:27,950
something bad would happen we go back

00:17:26,210 --> 00:17:29,990
and we review okay here's all of my

00:17:27,950 --> 00:17:32,150
deployments they look wonderful but I

00:17:29,990 --> 00:17:33,710
did have a failure you could actually go

00:17:32,150 --> 00:17:37,210
back and say okay what happened during

00:17:33,710 --> 00:17:37,210
that failure you know what was the issue

00:17:37,450 --> 00:17:43,040
what I really wanted to do was invite

00:17:40,460 --> 00:17:45,500
people to help us on the sprints so

00:17:43,040 --> 00:17:48,140
we've been taking feedback from people

00:17:45,500 --> 00:17:49,970
so last night at the party we ran into

00:17:48,140 --> 00:17:51,440
Mike asking some questions he's like man

00:17:49,970 --> 00:17:54,890
who really gave if we had a feature like

00:17:51,440 --> 00:17:56,750
that so we would love your input come

00:17:54,890 --> 00:17:59,150
help us give us ideas for features how

00:17:56,750 --> 00:18:00,950
to make things awesome our core

00:17:59,150 --> 00:18:03,950
developers that maintain the project are

00:18:00,950 --> 00:18:05,150
here so thursday and friday we're going

00:18:03,950 --> 00:18:08,720
to be sprinting we've got nathaniel

00:18:05,150 --> 00:18:10,550
myself Beth unfortunately didn't want to

00:18:08,720 --> 00:18:12,230
come she's like not a programmer and

00:18:10,550 --> 00:18:15,080
going to be bored to tears so didn't

00:18:12,230 --> 00:18:18,860
want to come and then we've got Dallas

00:18:15,080 --> 00:18:20,690
resident the Texan AKA Jared in fact I

00:18:18,860 --> 00:18:23,360
think his pictures a little bit bigger

00:18:20,690 --> 00:18:26,720
there I think yep everything really is

00:18:23,360 --> 00:18:29,210
bigger in Texas you can check us out on

00:18:26,720 --> 00:18:31,430
fabric bolt I yo and then of course the

00:18:29,210 --> 00:18:37,300
github project MIT license pull it down

00:18:31,430 --> 00:18:37,300
test it out try it and that's all I got

00:18:38,260 --> 00:18:43,640
okay hello everyone i am andrew kerwin

00:18:41,390 --> 00:18:45,980
again and i am here to talk not about

00:18:43,640 --> 00:18:47,450
databases or migrations this time but

00:18:45,980 --> 00:18:51,200
instead about a product i'm working on

00:18:47,450 --> 00:18:52,520
for the last couple of months i say so

00:18:51,200 --> 00:18:55,010
the background of this is I've always

00:18:52,520 --> 00:18:57,170
been annoyed by the lack of support for

00:18:55,010 --> 00:18:58,730
things like web sockets in Django I love

00:18:57,170 --> 00:19:01,420
web sockets they're pretty great they do

00:18:58,730 --> 00:19:05,090
a lot of interesting stuff and so oh

00:19:01,420 --> 00:19:07,700
right we're having interesting let me

00:19:05,090 --> 00:19:08,300
try plugging in again hang on perfect

00:19:07,700 --> 00:19:11,990
okay

00:19:08,300 --> 00:19:13,670
so so channels is a sort of idea that I

00:19:11,990 --> 00:19:15,080
came up with a while back and I've sort

00:19:13,670 --> 00:19:19,490
of started in funding now and so what it

00:19:15,080 --> 00:19:21,200
is is it takes one of Jango's most core

00:19:19,490 --> 00:19:23,540
concepts and changes it around so Django

00:19:21,200 --> 00:19:24,830
is web framework that's tied to request

00:19:23,540 --> 00:19:26,990
response right everything you do in

00:19:24,830 --> 00:19:28,730
Django the middle where the URL routing

00:19:26,990 --> 00:19:30,830
the views I will apply this request

00:19:28,730 --> 00:19:32,390
response cycle project like celery try

00:19:30,830 --> 00:19:34,610
and break that up having tasks but the

00:19:32,390 --> 00:19:36,530
cool part of Django is still that and so

00:19:34,610 --> 00:19:37,430
what I think like me what if that wasn't

00:19:36,530 --> 00:19:39,260
it well if there's a different

00:19:37,430 --> 00:19:41,210
abstraction we can take here that still

00:19:39,260 --> 00:19:42,680
preserves the simplicity of Django but

00:19:41,210 --> 00:19:45,410
lets you do stuff with WebSockets with

00:19:42,680 --> 00:19:47,840
HTTP to push with background tasks all

00:19:45,410 --> 00:19:50,420
other stuff that happens kind of outside

00:19:47,840 --> 00:19:54,170
that old hasty one request response

00:19:50,420 --> 00:19:55,670
world and so I took the call by the area

00:19:54,170 --> 00:19:58,580
of a view that takes a request and

00:19:55,670 --> 00:20:00,110
returns response and took a new

00:19:58,580 --> 00:20:02,030
abstraction a sort of slightly lower one

00:20:00,110 --> 00:20:03,740
is called a consumer and I consumer

00:20:02,030 --> 00:20:05,660
listens on a channel and takes a message

00:20:03,740 --> 00:20:08,480
at a time and it returns zero two more

00:20:05,660 --> 00:20:10,610
messages now this seems very simplistic

00:20:08,480 --> 00:20:13,490
and it makes no sense out of context so

00:20:10,610 --> 00:20:15,050
that season context so first of all what

00:20:13,490 --> 00:20:17,210
this means is that you can implement a

00:20:15,050 --> 00:20:18,890
view as a consumer because what channels

00:20:17,210 --> 00:20:21,530
does is it makes a channel for incoming

00:20:18,890 --> 00:20:23,210
whiskey requests so you have a thing

00:20:21,530 --> 00:20:25,070
listen to that channel it takes the

00:20:23,210 --> 00:20:26,450
requests it does stuff with them and it

00:20:25,070 --> 00:20:29,180
sends back responses on the response

00:20:26,450 --> 00:20:31,100
channels now this is just left plugged

00:20:29,180 --> 00:20:32,840
into Django's URL routing system by

00:20:31,100 --> 00:20:34,700
default but if you want to you could do

00:20:32,840 --> 00:20:37,610
little stuff it but that's not the fun

00:20:34,700 --> 00:20:39,950
part the fun part is that as well as all

00:20:37,610 --> 00:20:41,570
the normal HD whiskey stuff you get lots

00:20:39,950 --> 00:20:43,640
of other things as well so for example

00:20:41,570 --> 00:20:46,040
channels comes with WebSockets support

00:20:43,640 --> 00:20:47,360
so you run a WebSocket server and then

00:20:46,040 --> 00:20:49,610
you get WebSocket channels you can

00:20:47,360 --> 00:20:51,470
connect to or you can listen on and so

00:20:49,610 --> 00:20:52,820
you can say when someone connects you

00:20:51,470 --> 00:20:55,580
can taste it you can just have a view

00:20:52,820 --> 00:20:56,930
that talk to a model when someone what

00:20:55,580 --> 00:20:59,630
you can have custom channels so you can

00:20:56,930 --> 00:21:01,220
say ok whenever this thing happens on

00:20:59,630 --> 00:21:03,710
the site send a message to channel amex

00:21:01,220 --> 00:21:05,660
and whenever that channel gets the

00:21:03,710 --> 00:21:08,990
message you can send stuff back to web

00:21:05,660 --> 00:21:10,220
sockets and so on and then that's kind

00:21:08,990 --> 00:21:12,200
of brought together in a concept called

00:21:10,220 --> 00:21:14,900
a group so one of the things you have

00:21:12,200 --> 00:21:16,730
with WebSockets in particular is lots of

00:21:14,900 --> 00:21:18,710
clients connect and you also sort of

00:21:16,730 --> 00:21:20,510
group them away these people are looking

00:21:18,710 --> 00:21:21,800
at the liveblog lead

00:21:20,510 --> 00:21:23,360
looking at our front page they're

00:21:21,800 --> 00:21:25,400
looking at the chat over here and you

00:21:23,360 --> 00:21:27,290
want to send messages to all of them at

00:21:25,400 --> 00:21:29,390
once and so there's also a group

00:21:27,290 --> 00:21:32,570
abstraction channels where you go okay

00:21:29,390 --> 00:21:34,250
we're going to have whatever somebody

00:21:32,570 --> 00:21:35,480
connects we have a thing listening on

00:21:34,250 --> 00:21:36,830
the connector channel for web sockets

00:21:35,480 --> 00:21:39,890
and it puts them into the groups they

00:21:36,830 --> 00:21:42,080
connect and handles that stuff and you

00:21:39,890 --> 00:21:43,970
can do more so because you have these

00:21:42,080 --> 00:21:45,650
custom channels you can do things like

00:21:43,970 --> 00:21:48,080
okay whenever someone uploads a new

00:21:45,650 --> 00:21:49,730
avatar in the save method we put a

00:21:48,080 --> 00:21:51,590
message on to a different channel and

00:21:49,730 --> 00:21:55,700
then that channels consumer does

00:21:51,590 --> 00:21:57,440
thumbnailing and that's a very brief

00:21:55,700 --> 00:21:58,610
equation and I'm sure none of you get

00:21:57,440 --> 00:22:01,520
what's going on here so let's go a bit

00:21:58,610 --> 00:22:03,950
further so what was happening is I'm

00:22:01,520 --> 00:22:06,230
splitting Django apart I've taken Django

00:22:03,950 --> 00:22:07,910
which usually runs as a single instance

00:22:06,230 --> 00:22:10,070
process and making it three different

00:22:07,910 --> 00:22:11,330
layers well I call it interface layer

00:22:10,070 --> 00:22:13,520
which is the thing that talks to the

00:22:11,330 --> 00:22:15,560
outside wall so you have your normal

00:22:13,520 --> 00:22:17,120
whiskey interface you have a web socket

00:22:15,560 --> 00:22:18,760
interface you could have a HTTP to

00:22:17,120 --> 00:22:21,200
interface in the future and other ones

00:22:18,760 --> 00:22:23,240
there is a channel layer and the channel

00:22:21,200 --> 00:22:25,070
layer is sponsible routing between the

00:22:23,240 --> 00:22:27,160
two on the other side of it and there's

00:22:25,070 --> 00:22:29,540
a worker layer and what happens is

00:22:27,160 --> 00:22:32,630
rather than Django running is a single

00:22:29,540 --> 00:22:34,850
process that takes a thing does one

00:22:32,630 --> 00:22:37,310
thing at a time returns the thing the

00:22:34,850 --> 00:22:39,380
interface layers sort of handle all the

00:22:37,310 --> 00:22:41,120
negotiating negotiation with the outside

00:22:39,380 --> 00:22:43,190
world and put those messages on to the

00:22:41,120 --> 00:22:45,050
channel where and then the workers much

00:22:43,190 --> 00:22:47,810
likes every workers do for example just

00:22:45,050 --> 00:22:49,730
take one 1 message at a time run the

00:22:47,810 --> 00:22:53,720
appropriate consumer and do the right

00:22:49,730 --> 00:22:55,880
stuff so the kind of point here is that

00:22:53,720 --> 00:22:57,980
this is approaching some kind of

00:22:55,880 --> 00:22:59,900
asynchronous programming right I think I

00:22:57,980 --> 00:23:03,770
think programming is great it's really

00:22:59,900 --> 00:23:06,770
tricky and so my goal is to give the

00:23:03,770 --> 00:23:08,420
people of Django a way to do the useful

00:23:06,770 --> 00:23:10,870
parts of a sink without having to know

00:23:08,420 --> 00:23:12,950
things about like race conditions and

00:23:10,870 --> 00:23:15,080
deadlox and live blocks and all the

00:23:12,950 --> 00:23:16,610
other stuff that even with good

00:23:15,080 --> 00:23:18,380
frameworks you're going to run into some

00:23:16,610 --> 00:23:24,040
really quite nasty problems with this

00:23:18,380 --> 00:23:26,210
stuff so channels is this project I have

00:23:24,040 --> 00:23:27,560
documentation that's far more verbose I

00:23:26,210 --> 00:23:30,380
could do in an hour on the stage here

00:23:27,560 --> 00:23:32,060
even at my pace so if you want to go

00:23:30,380 --> 00:23:33,510
with the augmentation it shows you an

00:23:32,060 --> 00:23:35,040
example and

00:23:33,510 --> 00:23:37,770
the idea of this project is it's meant

00:23:35,040 --> 00:23:39,480
to be a way to prototype something that

00:23:37,770 --> 00:23:41,220
could be in Django itself in the future

00:23:39,480 --> 00:23:43,260
so it's currently a third-party app you

00:23:41,220 --> 00:23:44,790
installed it plug it in it will just

00:23:43,260 --> 00:23:47,130
take over and do stuff there's some

00:23:44,790 --> 00:23:50,460
worked examples in there as well and

00:23:47,130 --> 00:23:52,470
then as a final thing I've put up an

00:23:50,460 --> 00:23:55,320
example project called the earth which

00:23:52,470 --> 00:23:57,030
is kind of like a link aggregator reddit

00:23:55,320 --> 00:23:58,740
ish kind of thing but with live comments

00:23:57,030 --> 00:24:00,690
and chat and stuff like that so that's

00:23:58,740 --> 00:24:01,890
also up for you to use there's a chat

00:24:00,690 --> 00:24:03,450
example you can go and play with now if

00:24:01,890 --> 00:24:05,370
you like and the source code but that's

00:24:03,450 --> 00:24:07,260
up to so you can see how that works and

00:24:05,370 --> 00:24:09,380
that's that in a nutshell thank you very

00:24:07,260 --> 00:24:09,380

YouTube URL: https://www.youtube.com/watch?v=c27VZqTDWLw


