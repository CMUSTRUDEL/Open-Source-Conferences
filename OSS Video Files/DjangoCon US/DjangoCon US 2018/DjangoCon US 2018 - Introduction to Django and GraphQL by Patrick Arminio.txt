Title: DjangoCon US 2018 - Introduction to Django and GraphQL by Patrick Arminio
Publication date: 2018-11-10
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - Introduction to Django and GraphQL by Patrick Arminio

GraphQL has grown a lot overtime, but it seems to still be a new “thing” in the Python and Django World. This talk will be an introduction to GraphQL, explaining why it has been created and how you can use it in Python and Django.

Short speaker introduction
Small digression on how the “old” web used to be and how it has now evolved into the modern web
Really quick explanation of REST (just to make sure everyone is familiar with it)
What are some limitations of REST? What can we do about it?
Introduction to GraphQL, what it is, how’s using it and when has it been created?
GraphQL: query language syntax
GraphQL: types and introspection
GraphQL: operation, how to read data,update data and more
How to use Graphql with Python and Django
Let’s make a simple API
How to create queries
How to create mutations
Things to consider (security caching and performance)
Closing thoughts

This talk was presented at: https://2018.djangocon.us/talk/introduction-to-django-and-graphql/

LINKS:
Follow Patrick Arminio 👇
On Twitter: https://twitter.com/patrick91
Official homepage: https://patrick.wtf

Follow DjangCon US 👇
https://twitter.com/djangocon

Follow DEFNA 👇
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:16,160 --> 00:00:21,480
so hi everyone my name is Patrick and

00:00:19,170 --> 00:00:23,460
currently HR personal - Italy

00:00:21,480 --> 00:00:24,869
and I currently live in London and I'm

00:00:23,460 --> 00:00:26,820
interesting in both back-end and

00:00:24,869 --> 00:00:28,859
front-end I've been using jungle for

00:00:26,820 --> 00:00:30,990
about 10 years now and doing front-end

00:00:28,859 --> 00:00:32,520
for about more less the same time and

00:00:30,990 --> 00:00:34,920
you can find me as Patrick and divine

00:00:32,520 --> 00:00:38,010
online if you want to tweet me or if you

00:00:34,920 --> 00:00:40,190
have any question today I'm gonna talk

00:00:38,010 --> 00:00:43,260
about the courage that I've been using

00:00:40,190 --> 00:00:45,660
over the past two years I think more or

00:00:43,260 --> 00:00:47,250
less and one of the reason why I try to

00:00:45,660 --> 00:00:49,320
experiment with technologies because I

00:00:47,250 --> 00:00:50,910
really want to improve my my workflow I

00:00:49,320 --> 00:00:54,570
want to try to find new technology that

00:00:50,910 --> 00:00:57,300
can speed up my developer experience and

00:00:54,570 --> 00:00:59,430
also improve the user experience for the

00:00:57,300 --> 00:01:04,680
user of my job site build or the website

00:00:59,430 --> 00:01:06,450
I do so before digging into what graphic

00:01:04,680 --> 00:01:08,820
release I'm gonna do like a small

00:01:06,450 --> 00:01:12,090
digression on do well the web used to be

00:01:08,820 --> 00:01:15,960
and what the web is now so used to be

00:01:12,090 --> 00:01:17,280
like something like a simple collection

00:01:15,960 --> 00:01:19,020
on documents where you had a single

00:01:17,280 --> 00:01:20,340
server and you had like a little

00:01:19,020 --> 00:01:22,979
document where the user could navigate

00:01:20,340 --> 00:01:25,590
between them using links and usually

00:01:22,979 --> 00:01:27,750
these documents were just HTML CSS and

00:01:25,590 --> 00:01:31,560
maybe some JavaScript over like some

00:01:27,750 --> 00:01:34,590
animations but over time the web has has

00:01:31,560 --> 00:01:36,689
changed as we all know and the older

00:01:34,590 --> 00:01:37,820
poems have changed as well so for

00:01:36,689 --> 00:01:40,259
example we could have something like

00:01:37,820 --> 00:01:42,119
different data sources and one single

00:01:40,259 --> 00:01:45,689
back-end I will handle this data and

00:01:42,119 --> 00:01:46,950
then send the data to all these clients

00:01:45,689 --> 00:01:50,460
that we can have like smart watches

00:01:46,950 --> 00:01:55,579
phones desktop devices anywhere fridges

00:01:50,460 --> 00:01:58,049
in like these days so one of the ways we

00:01:55,579 --> 00:02:00,149
used to communicate between a client and

00:01:58,049 --> 00:02:02,939
a back end with use APs and most

00:02:00,149 --> 00:02:04,590
specifically using recipe is if you're

00:02:02,939 --> 00:02:06,420
not familiar with API it's basically

00:02:04,590 --> 00:02:08,580
says that your API is a collection of

00:02:06,420 --> 00:02:12,170
resources and each resources as its own

00:02:08,580 --> 00:02:12,170
end point and you would do

00:02:12,579 --> 00:02:17,829
it would use ACP birds - you do

00:02:15,159 --> 00:02:21,879
operation on those resources like get

00:02:17,829 --> 00:02:24,159
post delete and part the problem is the

00:02:21,879 --> 00:02:25,900
rest is not perfect is actually it's not

00:02:24,159 --> 00:02:29,200
a standard as well so everyone is doing

00:02:25,900 --> 00:02:31,120
it a little bit differently and one of

00:02:29,200 --> 00:02:32,950
the issue that I usually had is that you

00:02:31,120 --> 00:02:35,470
have to do too many API calls if you not

00:02:32,950 --> 00:02:37,599
fetch data so let's suppose that we have

00:02:35,470 --> 00:02:40,540
this simple API that's returning a user

00:02:37,599 --> 00:02:42,459
data so let's say that returns a user

00:02:40,540 --> 00:02:43,989
with their name a list of friends and

00:02:42,459 --> 00:02:47,139
avatar

00:02:43,989 --> 00:02:48,790
this is nice we're using links so we can

00:02:47,139 --> 00:02:50,590
fetch data for all the other users the

00:02:48,790 --> 00:02:52,060
problem is if I'm building an

00:02:50,590 --> 00:02:54,190
application where I need to show all

00:02:52,060 --> 00:02:56,079
this data in one single screen I need to

00:02:54,190 --> 00:02:59,049
do an additional two requests in this

00:02:56,079 --> 00:03:01,450
case so one request for each each user

00:02:59,049 --> 00:03:04,329
and this is a waste of bandwidth for the

00:03:01,450 --> 00:03:06,970
user and also it was mainly to to

00:03:04,329 --> 00:03:08,439
implement in the front-end so one

00:03:06,970 --> 00:03:10,510
solution would be to get another

00:03:08,439 --> 00:03:12,040
endpoint where you can do user be

00:03:10,510 --> 00:03:17,260
friends and then get something like this

00:03:12,040 --> 00:03:18,970
where you have the friends expanded the

00:03:17,260 --> 00:03:20,349
problem is that you might need also the

00:03:18,970 --> 00:03:22,269
images of this user in another

00:03:20,349 --> 00:03:24,940
application so you might end up doing

00:03:22,269 --> 00:03:26,949
more and more endpoints for all your

00:03:24,940 --> 00:03:28,870
different use cases especially if you

00:03:26,949 --> 00:03:32,470
want to do for example light version of

00:03:28,870 --> 00:03:35,590
your application and this over time it

00:03:32,470 --> 00:03:37,239
gets really really big and for example

00:03:35,590 --> 00:03:38,799
Corsair at some point that like a

00:03:37,239 --> 00:03:43,060
thousand different rest endpoints that

00:03:38,799 --> 00:03:51,459
dare to maintain a document and think I

00:03:43,060 --> 00:03:52,900
think we can if we can if we can reduce

00:03:51,459 --> 00:03:54,970
this number of endpoints that we have

00:03:52,900 --> 00:03:58,349
the document is better and the issues

00:03:54,970 --> 00:04:00,879
that we have too much data when we send

00:03:58,349 --> 00:04:03,280
information to the client so for example

00:04:00,879 --> 00:04:07,180
instead of building the API in with

00:04:03,280 --> 00:04:09,069
different endpoints we could send just

00:04:07,180 --> 00:04:10,449
one single API we return all the data

00:04:09,069 --> 00:04:12,519
that's possible to have at the problem

00:04:10,449 --> 00:04:14,109
with this one is that if I'm building a

00:04:12,519 --> 00:04:14,799
screen that only needs for example the

00:04:14,109 --> 00:04:17,139
username

00:04:14,799 --> 00:04:19,539
we're basically wasting bandwidth and

00:04:17,139 --> 00:04:20,480
CPU resources because we're sending data

00:04:19,539 --> 00:04:24,470
that's not needed

00:04:20,480 --> 00:04:26,330
client so can we can we do better we

00:04:24,470 --> 00:04:28,010
could we could X and rest

00:04:26,330 --> 00:04:29,510
the programs I said is not a stand as

00:04:28,010 --> 00:04:32,000
everyone is doing things differently

00:04:29,510 --> 00:04:33,800
which means that we need to document or

00:04:32,000 --> 00:04:36,110
the macos engine that we build for

00:04:33,800 --> 00:04:38,060
example we could to I don't know get

00:04:36,110 --> 00:04:39,830
parameter to where to expand some fields

00:04:38,060 --> 00:04:42,410
we can use address to say oh this is a

00:04:39,830 --> 00:04:48,470
client mobile clients or send images

00:04:42,410 --> 00:04:50,000
smaller and so on so for some of this

00:04:48,470 --> 00:04:52,520
reason you have cat was creating

00:04:50,000 --> 00:04:56,680
graphical swabs somehow some of those

00:04:52,520 --> 00:04:59,000
issues quite put in a very nice way

00:04:56,680 --> 00:05:02,030
graphic L was created by Facebook in

00:04:59,000 --> 00:05:04,280
about 2012 and it's been open sourcing

00:05:02,030 --> 00:05:06,320
in 2015 so it's it's been using

00:05:04,280 --> 00:05:09,290
production for a bit and also it's been

00:05:06,320 --> 00:05:13,460
used by lots of companies they say like

00:05:09,290 --> 00:05:15,080
Twitter github Coursera and so on so

00:05:13,460 --> 00:05:16,970
graphically is a specification and it's

00:05:15,080 --> 00:05:20,750
defined as a query language for the

00:05:16,970 --> 00:05:23,330
api's that means basically we can send a

00:05:20,750 --> 00:05:26,240
document to our graphical API and then

00:05:23,330 --> 00:05:28,460
we get back a visual result so basically

00:05:26,240 --> 00:05:31,160
the client that is in charge of saying

00:05:28,460 --> 00:05:37,520
well what the data is needed for for the

00:05:31,160 --> 00:05:39,620
application a difference with REST API

00:05:37,520 --> 00:05:41,570
so that you only have one single HTTP

00:05:39,620 --> 00:05:43,040
endpoint which is usually slash

00:05:41,570 --> 00:05:45,260
graphical and you would send a post

00:05:43,040 --> 00:05:47,330
request with a document saying oh this

00:05:45,260 --> 00:05:49,640
is the data I need and the document will

00:05:47,330 --> 00:05:51,350
look something more or less like this so

00:05:49,640 --> 00:05:53,630
in this case we're saying oh I need the

00:05:51,350 --> 00:05:56,210
user their name their email and their

00:05:53,630 --> 00:05:58,310
list of friends with the name and when

00:05:56,210 --> 00:05:59,540
we send this request as soon if we have

00:05:58,310 --> 00:06:01,400
data on the backend we get something

00:05:59,540 --> 00:06:04,190
like this but which is basically what we

00:06:01,400 --> 00:06:06,500
asked for if we change the document we

00:06:04,190 --> 00:06:09,680
can we basically are changing the

00:06:06,500 --> 00:06:11,420
response as well another interesting

00:06:09,680 --> 00:06:15,080
thing or graphical is that you have type

00:06:11,420 --> 00:06:17,840
so every field in your API is typed you

00:06:15,080 --> 00:06:20,000
have two different types one is that one

00:06:17,840 --> 00:06:22,040
is colors which are basically like base

00:06:20,000 --> 00:06:23,780
types like integers float string and so

00:06:22,040 --> 00:06:26,510
on you can also define custom types if

00:06:23,780 --> 00:06:29,780
you need to know define like date/time

00:06:26,510 --> 00:06:31,760
and so on and then you have object eyes

00:06:29,780 --> 00:06:32,630
which are basically a collection of type

00:06:31,760 --> 00:06:34,400
so you have

00:06:32,630 --> 00:06:36,320
different fields we can either have

00:06:34,400 --> 00:06:40,670
another scholar type or another object

00:06:36,320 --> 00:06:43,190
type for example in our previous API we

00:06:40,670 --> 00:06:45,680
can have a type of user they have name

00:06:43,190 --> 00:06:47,030
email and a list of friends and then you

00:06:45,680 --> 00:06:51,590
have a type of friend which is a

00:06:47,030 --> 00:06:54,220
literally as a name another cool thing I

00:06:51,590 --> 00:06:58,070
think it's the introspection so every

00:06:54,220 --> 00:06:59,660
graphical API by default returns the

00:06:58,070 --> 00:07:01,940
schema so basically you can get all the

00:06:59,660 --> 00:07:04,340
fields that you have on this in this API

00:07:01,940 --> 00:07:06,890
this allows to use tools or a graphical

00:07:04,340 --> 00:07:08,390
to basically introspect the API without

00:07:06,890 --> 00:07:10,130
actually having to read the code or

00:07:08,390 --> 00:07:12,530
remembering everything and I'm gonna

00:07:10,130 --> 00:07:14,540
show you a quick demo of this later so

00:07:12,530 --> 00:07:17,540
for example in this case we are getting

00:07:14,540 --> 00:07:22,940
the information about this API without

00:07:17,540 --> 00:07:25,510
having to read the documentation so I

00:07:22,940 --> 00:07:28,210
only show you out showing you how to

00:07:25,510 --> 00:07:30,950
enter the quiz of course we want to do

00:07:28,210 --> 00:07:32,630
multiple operations and in graphical you

00:07:30,950 --> 00:07:35,030
have three main operations which are

00:07:32,630 --> 00:07:37,370
query mutations and subscript

00:07:35,030 --> 00:07:39,740
subscription please allows you to get

00:07:37,370 --> 00:07:43,010
data from the backend mutation allow you

00:07:39,740 --> 00:07:44,960
to do any operation which side effects

00:07:43,010 --> 00:07:47,360
like creating data or sending emails and

00:07:44,960 --> 00:07:49,610
then yes substitution which allows you

00:07:47,360 --> 00:07:53,780
to subscribe to events and say for

00:07:49,610 --> 00:07:55,430
example with something changes this is a

00:07:53,780 --> 00:07:59,930
document that you send to do a query and

00:07:55,430 --> 00:08:02,450
since it is like the common operation

00:07:59,930 --> 00:08:04,880
this is like the short version of doing

00:08:02,450 --> 00:08:09,790
a Queen the actual syntax like this

00:08:04,880 --> 00:08:12,710
which basically the first token is the

00:08:09,790 --> 00:08:14,480
operation type then there is a operation

00:08:12,710 --> 00:08:16,490
name which is basically use only for

00:08:14,480 --> 00:08:18,310
debugging then you can have parameters

00:08:16,490 --> 00:08:20,150
and something interesting of the

00:08:18,310 --> 00:08:22,220
graphical is also that you can have

00:08:20,150 --> 00:08:24,350
parameters for like nested field so for

00:08:22,220 --> 00:08:28,300
example in this case you can limit the

00:08:24,350 --> 00:08:31,180
number of friends in the response and

00:08:28,300 --> 00:08:34,250
then same for mutation you have the type

00:08:31,180 --> 00:08:35,990
name of the operation and optional

00:08:34,250 --> 00:08:38,510
parameters and substitution works the

00:08:35,990 --> 00:08:40,700
same so synthesis is quite simple and

00:08:38,510 --> 00:08:44,030
easy to use

00:08:40,700 --> 00:08:45,590
so this is really nice we can you can't

00:08:44,030 --> 00:08:48,050
we can use a bit Python using in this

00:08:45,590 --> 00:08:50,270
library called graphene Python and I

00:08:48,050 --> 00:08:52,850
think it's the only library available so

00:08:50,270 --> 00:08:55,700
far for graphic um it's easy to install

00:08:52,850 --> 00:08:57,850
just to pip install graphene and then to

00:08:55,700 --> 00:09:00,110
create a small other world you can

00:08:57,850 --> 00:09:02,330
create a class called pretty where you

00:09:00,110 --> 00:09:04,550
define the fields and in this case we're

00:09:02,330 --> 00:09:06,950
just defining hello field which is

00:09:04,550 --> 00:09:09,290
returning a string in this case and then

00:09:06,950 --> 00:09:11,890
you need to specify the solver function

00:09:09,290 --> 00:09:14,420
it's all functions are basically the

00:09:11,890 --> 00:09:16,670
methods have been code when you request

00:09:14,420 --> 00:09:19,040
a field so in this case when we request

00:09:16,670 --> 00:09:21,440
the yellow field the result below is

00:09:19,040 --> 00:09:23,630
going to be called with and it's going

00:09:21,440 --> 00:09:25,460
to return only heijunka Khan for now and

00:09:23,630 --> 00:09:28,580
also you can execute them directly by

00:09:25,460 --> 00:09:33,800
usually you would have a like a a jungle

00:09:28,580 --> 00:09:35,150
view like Mississippi called to execute

00:09:33,800 --> 00:09:37,460
this scheme instead of executing

00:09:35,150 --> 00:09:39,860
indirectly and yes there is also an

00:09:37,460 --> 00:09:41,390
extension for jungle is allowed to use

00:09:39,860 --> 00:09:43,910
all the jungle features like forms

00:09:41,390 --> 00:09:46,370
mothers and so on it's easy to install

00:09:43,910 --> 00:09:47,840
needed any update in solar up so you can

00:09:46,370 --> 00:09:50,350
use the views and then we need to

00:09:47,840 --> 00:09:54,710
specify the part of the schema so the

00:09:50,350 --> 00:09:58,130
genre view is able to fetch a schema Urd

00:09:54,710 --> 00:09:59,960
the view to the path to the URLs and you

00:09:58,130 --> 00:10:03,950
can also need the enable the ID

00:09:59,960 --> 00:10:05,570
graphical and then it's quite easy you

00:10:03,950 --> 00:10:09,590
can basically use the model to create

00:10:05,570 --> 00:10:12,710
the graphical types without typing again

00:10:09,590 --> 00:10:14,090
the order fields that you have and then

00:10:12,710 --> 00:10:16,280
in the resolver function you can just

00:10:14,090 --> 00:10:18,500
return a query set which is basically

00:10:16,280 --> 00:10:23,330
going to be converted by graphing into a

00:10:18,500 --> 00:10:26,720
graphical types i was quite quick let's

00:10:23,330 --> 00:10:28,280
let's create a simple API and this is

00:10:26,720 --> 00:10:29,540
based on the the jungle pools

00:10:28,280 --> 00:10:31,940
application more or less

00:10:29,540 --> 00:10:34,280
let's say that we have two to two models

00:10:31,940 --> 00:10:35,540
one is pool which is only a question and

00:10:34,280 --> 00:10:38,380
then there is a choice which is linked

00:10:35,540 --> 00:10:41,540
to a pool we've got a choice tax and

00:10:38,380 --> 00:10:43,340
number of woods so the first thing we

00:10:41,540 --> 00:10:45,050
want to do is to create the object ID

00:10:43,340 --> 00:10:46,910
which has basically the types for

00:10:45,050 --> 00:10:50,690
graphical those types are going to be

00:10:46,910 --> 00:10:53,180
shown in the in your API so using junk

00:10:50,690 --> 00:10:54,260
object type it's quite easy to create

00:10:53,180 --> 00:10:57,230
the start

00:10:54,260 --> 00:10:59,240
it's basically up to the base class to

00:10:57,230 --> 00:11:02,690
create all the the fields aren't needed

00:10:59,240 --> 00:11:05,330
for any models you cannot you can also

00:11:02,690 --> 00:11:08,750
extend add additional fields and

00:11:05,330 --> 00:11:11,390
additional Authority if you need to then

00:11:08,750 --> 00:11:14,390
the first view we can do is the to list

00:11:11,390 --> 00:11:16,070
all the pools and it's the document that

00:11:14,390 --> 00:11:17,780
we can send to the backend to to fetch

00:11:16,070 --> 00:11:18,830
all the pools would look something like

00:11:17,780 --> 00:11:21,380
this

00:11:18,830 --> 00:11:23,840
so we fetch the field called pool then

00:11:21,380 --> 00:11:27,380
we fetch the question for this pool and

00:11:23,840 --> 00:11:28,970
then the choice set and in Python would

00:11:27,380 --> 00:11:32,480
look something like this so we have a

00:11:28,970 --> 00:11:34,670
query and feel this list of pull types

00:11:32,480 --> 00:11:38,480
and then reserve a function is returning

00:11:34,670 --> 00:11:42,140
order from the condom database then we

00:11:38,480 --> 00:11:44,720
can do a query for a single post as I

00:11:42,140 --> 00:11:46,220
said in graph QL we can pass arguments

00:11:44,720 --> 00:11:47,540
to each field so in this case for

00:11:46,220 --> 00:11:50,030
example we want to fetch the port with

00:11:47,540 --> 00:11:52,100
ID ABC and we can do it like this and

00:11:50,030 --> 00:11:53,540
the rest is similar to the previous one

00:11:52,100 --> 00:11:56,060
the only difference that the field name

00:11:53,540 --> 00:11:59,630
is pulled singular and except except an

00:11:56,060 --> 00:12:02,000
argument in Python looks like this we

00:11:59,630 --> 00:12:03,710
define a graph in field and then we pass

00:12:02,000 --> 00:12:06,650
the list of arguments and this is just

00:12:03,710 --> 00:12:08,540
ID which is a type of Jeff in der ID and

00:12:06,650 --> 00:12:10,780
then in the resolver function we also

00:12:08,540 --> 00:12:16,250
get this parameter that we returned a

00:12:10,780 --> 00:12:19,160
full object then for the mutation we can

00:12:16,250 --> 00:12:24,320
create one allows us allows us to create

00:12:19,160 --> 00:12:25,820
a pool so the document that we can send

00:12:24,320 --> 00:12:28,190
looks like this basically is like a

00:12:25,820 --> 00:12:30,020
function that accepts a question and a

00:12:28,190 --> 00:12:33,290
list of choices and then we get back to

00:12:30,020 --> 00:12:34,550
the pool pool object and in Python we

00:12:33,290 --> 00:12:38,810
look something like this we need to

00:12:34,550 --> 00:12:40,700
extend the graph in mutation defined it

00:12:38,810 --> 00:12:42,230
the the fields that this mutation is

00:12:40,700 --> 00:12:45,170
returning and then the list of arguments

00:12:42,230 --> 00:12:47,330
and then we need to create a mutation

00:12:45,170 --> 00:12:50,330
for mutate function that is basically if

00:12:47,330 --> 00:12:52,790
you use forms if I can save no jungle

00:12:50,330 --> 00:12:58,220
form then gets all the arguments and

00:12:52,790 --> 00:13:01,690
then you can create the the pool so

00:12:58,220 --> 00:13:01,690
let's quickly tested

00:13:06,010 --> 00:13:09,610
so I have this

00:13:13,870 --> 00:13:18,670
should be

00:13:16,480 --> 00:13:21,940
so I already have an instance of jungle

00:13:18,670 --> 00:13:24,520
running with this back-end code and so

00:13:21,940 --> 00:13:28,090
let's say I want to fetch just a list of

00:13:24,520 --> 00:13:31,380
pools with the the the question that I

00:13:28,090 --> 00:13:34,480
can easily do like this so basically

00:13:31,380 --> 00:13:36,760
every time I need to do like an API call

00:13:34,480 --> 00:13:39,130
I can just send the document that I need

00:13:36,760 --> 00:13:41,410
we destruction it back and I can can

00:13:39,130 --> 00:13:43,900
fetch it like this and if you want to

00:13:41,410 --> 00:13:47,380
get the choice set you can just do

00:13:43,900 --> 00:13:49,480
something like this and then I came back

00:13:47,380 --> 00:13:52,360
I can get back the list of choices for

00:13:49,480 --> 00:13:56,340
this pool there's also the ability to

00:13:52,360 --> 00:13:56,340
get like a single pool as I showed you

00:14:02,100 --> 00:14:06,970
so in this case we are passing an

00:14:04,210 --> 00:14:11,770
argument with ID 1 and then we get the

00:14:06,970 --> 00:14:13,840
data for just that single and if you

00:14:11,770 --> 00:14:16,950
want to do if you want to create a new a

00:14:13,840 --> 00:14:19,950
new pool you can use the mutation rate

00:14:16,950 --> 00:14:19,950
pool

00:14:36,080 --> 00:14:42,170
then a typo so it's since everything is

00:14:40,040 --> 00:14:43,640
that the idea is telling me that there

00:14:42,170 --> 00:14:47,390
are somewhere so in this case is 10 I

00:14:43,640 --> 00:14:49,280
mean the problem and choices and when I

00:14:47,390 --> 00:14:51,500
run this mutation is basically going to

00:14:49,280 --> 00:14:54,050
create the fool on the back end and so

00:14:51,500 --> 00:14:56,800
so when I return me return that to me

00:14:54,050 --> 00:14:56,800
which is quite nice

00:14:56,830 --> 00:15:04,640
also like a quick damn I wanted to show

00:14:59,390 --> 00:15:07,040
you there is support for Django Chalmers

00:15:04,640 --> 00:15:10,730
is seen not mature yet but you basically

00:15:07,040 --> 00:15:12,650
can have a subscription at least in this

00:15:10,730 --> 00:15:15,530
case so basically every time a pool is

00:15:12,650 --> 00:15:18,200
updated the number of words can update

00:15:15,530 --> 00:15:21,080
and we have the time so forth I have a

00:15:18,200 --> 00:15:24,680
boat mutation where basically I can just

00:15:21,080 --> 00:15:27,560
send a boat to the to this pool so every

00:15:24,680 --> 00:15:31,850
time I click patients can update in both

00:15:27,560 --> 00:15:34,220
the pages so on the left side basically

00:15:31,850 --> 00:15:35,630
we get the response from the back end on

00:15:34,220 --> 00:15:37,940
the right side we have a WebSocket

00:15:35,630 --> 00:15:39,500
connection running with jungle Chalmers

00:15:37,940 --> 00:15:39,920
that's receiving the updates in real

00:15:39,500 --> 00:15:42,350
time

00:15:39,920 --> 00:15:46,460
she's quite handy the only issues I

00:15:42,350 --> 00:15:51,500
think I find that seen on mature yet but

00:15:46,460 --> 00:15:53,570
hopefully soon we can I have been I have

00:15:51,500 --> 00:15:56,840
a nicer nice a way to use Django

00:15:53,570 --> 00:15:57,200
Chalmers with your fin but it can be

00:15:56,840 --> 00:16:00,740
done

00:15:57,200 --> 00:16:03,860
so there's also integration with rest

00:16:00,740 --> 00:16:05,780
Famer and with Django forms so basically

00:16:03,860 --> 00:16:07,940
you can to be use the forms that you

00:16:05,780 --> 00:16:10,280
have and the serialize that you have to

00:16:07,940 --> 00:16:13,250
get to create a new mutation the program

00:16:10,280 --> 00:16:17,360
that this is feel like people I would

00:16:13,250 --> 00:16:18,770
say it's in beta it's no it works but

00:16:17,360 --> 00:16:20,870
doesn't have all the features that we

00:16:18,770 --> 00:16:22,250
need and I'm gonna be working on this

00:16:20,870 --> 00:16:26,270
during the sprints if you want to help

00:16:22,250 --> 00:16:30,050
and see how actually works so that

00:16:26,270 --> 00:16:32,780
that's cool this is a really nice list

00:16:30,050 --> 00:16:34,310
for my opinion problem is like it's a

00:16:32,780 --> 00:16:36,860
new technology especially especially in

00:16:34,310 --> 00:16:38,330
the Python world and there are some

00:16:36,860 --> 00:16:43,710
things we need to keep in mind

00:16:38,330 --> 00:16:46,440
especially with security one

00:16:43,710 --> 00:16:48,930
one of the most asked question on on

00:16:46,440 --> 00:16:50,970
github and Nasik overflow is how to do

00:16:48,930 --> 00:16:53,490
authentication and there are three ways

00:16:50,970 --> 00:16:55,020
to do to do authentication one is to use

00:16:53,490 --> 00:16:57,210
Django session and this works really

00:16:55,020 --> 00:17:00,270
well if you have a an API that only

00:16:57,210 --> 00:17:03,420
works on your website so you don't have

00:17:00,270 --> 00:17:05,130
any mobile applications the other the

00:17:03,420 --> 00:17:07,410
other ways to use others like you do

00:17:05,130 --> 00:17:09,900
with a REST API so sending like a token

00:17:07,410 --> 00:17:12,720
and the last one is to use parameters so

00:17:09,900 --> 00:17:15,060
since you can add arguments to throw the

00:17:12,720 --> 00:17:16,920
fields that you have you can for example

00:17:15,060 --> 00:17:18,600
send the token as a argument for a

00:17:16,920 --> 00:17:20,610
mutation and this might work in some

00:17:18,600 --> 00:17:24,240
cases when you only have one mutation

00:17:20,610 --> 00:17:26,970
that needs authentication it's a it's up

00:17:24,240 --> 00:17:29,400
it's up to your requirements so another

00:17:26,970 --> 00:17:30,930
thing is permission so like if you if

00:17:29,400 --> 00:17:32,130
you've been used to Django rest

00:17:30,930 --> 00:17:34,950
framework it's really easy to add

00:17:32,130 --> 00:17:37,350
permission to all the resources that you

00:17:34,950 --> 00:17:41,160
have unfortunately there is no built-in

00:17:37,350 --> 00:17:44,430
features in graphene yet but something

00:17:41,160 --> 00:17:46,590
nice I really want to work on is having

00:17:44,430 --> 00:17:48,690
permissions on the field level so for

00:17:46,590 --> 00:17:52,350
example you can have an API where you

00:17:48,690 --> 00:17:55,110
have a user and the email only it's only

00:17:52,350 --> 00:17:57,450
shown if the user is the current user if

00:17:55,110 --> 00:17:59,280
a super user and also you can have

00:17:57,450 --> 00:18:02,880
public and private fields like you can

00:17:59,280 --> 00:18:04,230
hide fields to a certain user like it if

00:18:02,880 --> 00:18:06,870
AB is doing something like that by the

00:18:04,230 --> 00:18:09,270
ever single graphical API that's being

00:18:06,870 --> 00:18:11,910
used also for like a public arts access

00:18:09,270 --> 00:18:14,940
both the private access and they have

00:18:11,910 --> 00:18:17,370
something's are only available to in the

00:18:14,940 --> 00:18:20,640
private API but they only have one code

00:18:17,370 --> 00:18:22,310
base also it's really easy to build

00:18:20,640 --> 00:18:25,710
malicious queries because we are giving

00:18:22,310 --> 00:18:26,760
loads of power to the front end so you

00:18:25,710 --> 00:18:29,280
can be in something like this and

00:18:26,760 --> 00:18:31,220
imagine that this goes on and on so you

00:18:29,280 --> 00:18:34,740
basically can do a Creator

00:18:31,220 --> 00:18:37,080
takes a lot of time and it's gonna it's

00:18:34,740 --> 00:18:41,460
easy to to someone to toss your server I

00:18:37,080 --> 00:18:43,140
guess some strategies to fix those those

00:18:41,460 --> 00:18:44,970
issues for example could be having

00:18:43,140 --> 00:18:46,520
timeout so you could say if a query

00:18:44,970 --> 00:18:49,530
takes more than one second you can

00:18:46,520 --> 00:18:52,650
discard it because one second is really

00:18:49,530 --> 00:18:54,630
too much for a user in might not

00:18:52,650 --> 00:18:57,570
terminate anyway you can also do limits

00:18:54,630 --> 00:19:01,110
on the nesting which basically says oft

00:18:57,570 --> 00:19:03,060
if the user is requesting field that's I

00:19:01,110 --> 00:19:04,890
don't know four levels deep and not

00:19:03,060 --> 00:19:08,040
gonna do this query because it shouldn't

00:19:04,890 --> 00:19:10,170
be happening they can also have pre

00:19:08,040 --> 00:19:12,630
costs basically you can add the score to

00:19:10,170 --> 00:19:15,470
each field and calculate the cost of pre

00:19:12,630 --> 00:19:19,170
so if you have nested fields we can

00:19:15,470 --> 00:19:21,929
increment the cost based on the number

00:19:19,170 --> 00:19:23,940
of fields that you have and this

00:19:21,929 --> 00:19:27,990
basically allows you to say oh I wanna

00:19:23,940 --> 00:19:31,620
only wanna run with less expensive or

00:19:27,990 --> 00:19:33,300
not of 50 to the made-up number and you

00:19:31,620 --> 00:19:35,970
can also do static quiz it's something

00:19:33,300 --> 00:19:38,510
that there are a few few companies doing

00:19:35,970 --> 00:19:40,679
I think Instagram is doing it basically

00:19:38,510 --> 00:19:43,440
since they've control of the old

00:19:40,679 --> 00:19:44,940
pipeline which they can build a list of

00:19:43,440 --> 00:19:47,610
quizzes they're doing on the on the

00:19:44,940 --> 00:19:49,980
application and basically save it on the

00:19:47,610 --> 00:19:52,560
back end in either in the database or on

00:19:49,980 --> 00:19:54,390
files basically the front end is gonna

00:19:52,560 --> 00:19:56,030
send instead of sending I Jason

00:19:54,390 --> 00:19:58,830
documents gonna send an ID that

00:19:56,030 --> 00:20:03,870
corresponds to to appear and this allows

00:19:58,830 --> 00:20:05,460
you to tow suffix and it should its then

00:20:03,870 --> 00:20:09,210
we have the caching which is basically

00:20:05,460 --> 00:20:11,250
we are doing post request and as you

00:20:09,210 --> 00:20:14,070
know post request is not easy to cast so

00:20:11,250 --> 00:20:19,260
you need to either do back end caution

00:20:14,070 --> 00:20:21,300
or client rush so with that said I'm one

00:20:19,260 --> 00:20:23,310
of the reason I want to give this talk

00:20:21,300 --> 00:20:25,679
is because I want to see more people

00:20:23,310 --> 00:20:28,560
using graphical in Python and also wanna

00:20:25,679 --> 00:20:31,080
see this library improved a lot because

00:20:28,560 --> 00:20:33,390
it's it's nice but it's not there yet I

00:20:31,080 --> 00:20:35,520
think there is loads of room for

00:20:33,390 --> 00:20:38,580
improvement from this library and also I

00:20:35,520 --> 00:20:41,100
think graphical is amazing amazing

00:20:38,580 --> 00:20:42,630
technology especially for AI developers

00:20:41,100 --> 00:20:46,980
when you have to work with front-end

00:20:42,630 --> 00:20:49,860
people and people working on can

00:20:46,980 --> 00:20:51,630
different clients and also it's good for

00:20:49,860 --> 00:20:53,880
the user because we are not wasting the

00:20:51,630 --> 00:20:56,850
user fun with imagine if you have like

00:20:53,880 --> 00:20:59,130
us like lower hand phone or if you have

00:20:56,850 --> 00:21:00,600
a connection that's really slow you only

00:20:59,130 --> 00:21:01,220
sign in the data that the client needs

00:21:00,600 --> 00:21:05,090
and

00:21:01,220 --> 00:21:07,280
it should be performant so I'm gonna be

00:21:05,090 --> 00:21:15,470
at the sprints if you want to work on

00:21:07,280 --> 00:21:18,110
graphene and thank you so usually when

00:21:15,470 --> 00:21:20,660
you develop a library like that you have

00:21:18,110 --> 00:21:23,450
like a problem that it solves can you

00:21:20,660 --> 00:21:27,830
kind of say in general what this solves

00:21:23,450 --> 00:21:30,830
oh yeah so as I said sort of most of the

00:21:27,830 --> 00:21:33,020
issues that you have my heavy brass API

00:21:30,830 --> 00:21:35,060
so basically over fetching and under

00:21:33,020 --> 00:21:40,220
fetching the data and the sobriety in

00:21:35,060 --> 00:21:42,950
documentation in my experience when I

00:21:40,220 --> 00:21:44,810
built a graphical API said then we have

00:21:42,950 --> 00:21:46,880
to write any documentation because the

00:21:44,810 --> 00:21:49,430
people working in the front end we just

00:21:46,880 --> 00:21:51,410
read use the graphical idea to to touch

00:21:49,430 --> 00:21:53,780
the date the information about the API

00:21:51,410 --> 00:21:56,180
so I didn't really have to explain to

00:21:53,780 --> 00:21:58,430
them but this this is the Queen that you

00:21:56,180 --> 00:22:01,250
need to do and also every time that to

00:21:58,430 --> 00:22:03,710
do like a new new screen on the

00:22:01,250 --> 00:22:05,570
application I didn't have to build

00:22:03,710 --> 00:22:07,820
another endpoint because basically they

00:22:05,570 --> 00:22:11,750
can change the response that can get

00:22:07,820 --> 00:22:14,510
sent Li to the front end and how does

00:22:11,750 --> 00:22:17,210
this look from the client side from the

00:22:14,510 --> 00:22:21,080
JavaScript how does usually create these

00:22:17,210 --> 00:22:23,150
queries yeah so there are different ways

00:22:21,080 --> 00:22:26,000
you can go vanilla so basically just

00:22:23,150 --> 00:22:28,790
sending an HTTP request with the it's

00:22:26,000 --> 00:22:31,070
it's basically suggestion with the Queen

00:22:28,790 --> 00:22:32,770
or you can use lots of dab a few

00:22:31,070 --> 00:22:35,900
frameworks that there is a folder and

00:22:32,770 --> 00:22:39,380
relay Apple is like the community one

00:22:35,900 --> 00:22:41,510
made by I think now it's a company but

00:22:39,380 --> 00:22:43,340
it's like all open-source and there's

00:22:41,510 --> 00:22:47,510
also relay that's been made by Facebook

00:22:43,340 --> 00:22:48,770
guy I will I use Apple though and mainly

00:22:47,510 --> 00:22:50,600
because it works with different

00:22:48,770 --> 00:22:53,870
frameworks so you can easily react

00:22:50,600 --> 00:22:55,250
angular Vijay yes and so on what we can

00:22:53,870 --> 00:22:59,200
show later if you wanna have a look I

00:22:55,250 --> 00:23:07,669
know it works because it's another talk

00:22:59,200 --> 00:23:07,669

YouTube URL: https://www.youtube.com/watch?v=ruteI4aAd0o


