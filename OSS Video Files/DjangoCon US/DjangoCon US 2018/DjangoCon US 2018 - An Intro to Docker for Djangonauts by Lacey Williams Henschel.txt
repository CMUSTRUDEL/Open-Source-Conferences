Title: DjangoCon US 2018 - An Intro to Docker for Djangonauts by Lacey Williams Henschel
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - An Intro to Docker for Djangonauts by Lacey Williams Henschel

If youâ€™ve never used it before, Docker can be a little overwhelming. There is new vocabulary to learn, new commands to memorize, and new files to add to each project. Most resources fall into one of two camps: they teach you the bare bones of Docker but still leave you with too many questions to comfortably try it on your own, or they throw you into the deep end by assuming youâ€™re more familiar with Docker than you are.

In this talk, you will find that middle ground: a talk that doesnâ€™t assume youâ€™re familiar with Docker and so keeps everything simple, but leaves you with enough information that you can get started as soon as you leave the room. Together, we will step through the parts of a Dockerfile and learn what they do. Then, Iâ€™ll introduce you to Docker Compose and explain why using it to run multiple containers is helpful. Finally, you will learn to run commands and execute scripts from the command line using Docker, how to enter a container and why you might need to, and what to do before you go home for the day.

Audience: Djangonauts who are curious about Docker, need to learn to use it for work or personal projects, or who seek a better understanding of containers in general. Audience members might be beginners to Python/Django or not, but they are definitely beginners to containerizing all the things.

The audience should be familiar with basic Python concepts such as variables and running things from the command line. Some basic familiarity with Django would be helpful, but beginner Djangonauts will be able to follow along.

This talk was presented at: https://2018.djangocon.us/talk/an-intro-to-docker-for-djangonauts/

LINKS:
Follow Lacey Williams Henschel ðŸ‘‡
On Twitter: https://twitter.com/laceynwilliams
Official homepage: https://www.laceyhenschel.com

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,740 --> 00:00:18,930
everyone is the mic positioned okay

00:00:17,850 --> 00:00:20,730
awesome

00:00:18,930 --> 00:00:22,350
thank you all right thank you so much

00:00:20,730 --> 00:00:24,960
for coming in my talk my name is Lacey

00:00:22,350 --> 00:00:26,340
and we are here to talk about docker and

00:00:24,960 --> 00:00:29,400
we're gonna do so with some Harry Potter

00:00:26,340 --> 00:00:31,080
metaphors I do promise that if you are

00:00:29,400 --> 00:00:32,969
not a huge Harry Potter fan the

00:00:31,080 --> 00:00:34,500
metaphors are not such that you won't be

00:00:32,969 --> 00:00:36,510
able to follow along with the talk if

00:00:34,500 --> 00:00:37,920
you are a Harry Potter fan hopefully

00:00:36,510 --> 00:00:39,570
these metaphors will help elucidate

00:00:37,920 --> 00:00:41,910
things for you and delight you in the

00:00:39,570 --> 00:00:44,070
process I work for a company called

00:00:41,910 --> 00:00:45,899
rebus and that's kind of why I'm giving

00:00:44,070 --> 00:00:48,090
this talk whenever I started with rebus

00:00:45,899 --> 00:00:50,700
a year ago I'd never use docker before

00:00:48,090 --> 00:00:52,350
and I found it very very confusing it

00:00:50,700 --> 00:00:55,320
wasn't like anything else I'd ever used

00:00:52,350 --> 00:00:57,239
so that's kind of why I'm here I wanted

00:00:55,320 --> 00:01:01,140
to help demystify this for you because

00:00:57,239 --> 00:01:03,120
it was very mysterious for me so one of

00:01:01,140 --> 00:01:05,640
the things that was confusing for me is

00:01:03,120 --> 00:01:07,409
what really is docker we're kind of used

00:01:05,640 --> 00:01:09,360
to working in virtual environments some

00:01:07,409 --> 00:01:12,060
of us work in virtual machines but

00:01:09,360 --> 00:01:13,860
docker asks us to understand these

00:01:12,060 --> 00:01:16,020
concepts in a very very different way

00:01:13,860 --> 00:01:18,900
and that's a really large learning curve

00:01:16,020 --> 00:01:20,850
for a lot of people in short it feels

00:01:18,900 --> 00:01:22,470
kind of like magic and most of us don't

00:01:20,850 --> 00:01:24,540
really like things that are too magical

00:01:22,470 --> 00:01:26,430
because then we can't understand them

00:01:24,540 --> 00:01:29,100
they're difficult to debug and it's

00:01:26,430 --> 00:01:30,060
harder for us to do our jobs so some of

00:01:29,100 --> 00:01:32,070
the things that I really love about

00:01:30,060 --> 00:01:34,619
docker is that it helps you separate

00:01:32,070 --> 00:01:36,810
your dependencies which is very handy it

00:01:34,619 --> 00:01:39,450
shares your operating system so it's

00:01:36,810 --> 00:01:41,130
pretty lightweight it puts all of your

00:01:39,450 --> 00:01:43,439
team members on the same page when it

00:01:41,130 --> 00:01:45,149
comes to your development environment so

00:01:43,439 --> 00:01:48,450
I've been in situation several times

00:01:45,149 --> 00:01:50,369
before where a co-worker was helping me

00:01:48,450 --> 00:01:52,229
debug something but my environment had a

00:01:50,369 --> 00:01:54,000
weird setting that was the problem if

00:01:52,229 --> 00:01:55,890
any of you have ever coached at a django

00:01:54,000 --> 00:01:58,259
girl's workshop on installation night we

00:01:55,890 --> 00:01:59,880
see a lot of these issues as well with

00:01:58,259 --> 00:02:02,460
docker you don't have those everyone's

00:01:59,880 --> 00:02:04,560
doing the exact same thing and you don't

00:02:02,460 --> 00:02:06,570
need to install any Python at all you

00:02:04,560 --> 00:02:08,640
can skip having a system Python entirely

00:02:06,570 --> 00:02:09,959
so if you have a job where you work on

00:02:08,640 --> 00:02:11,280
multiple projects or you're an

00:02:09,959 --> 00:02:13,260
open-source maintainer and you have

00:02:11,280 --> 00:02:13,740
multiple projects keeping track of all

00:02:13,260 --> 00:02:15,600
these different

00:02:13,740 --> 00:02:17,520
Python installations can be a little bit

00:02:15,600 --> 00:02:20,700
challenging and with docker you can just

00:02:17,520 --> 00:02:22,170
skip that step however I said before

00:02:20,700 --> 00:02:24,480
learning all of this is kind of a

00:02:22,170 --> 00:02:25,800
learning curve so this talk really is

00:02:24,480 --> 00:02:28,650
designed for people who have had very

00:02:25,800 --> 00:02:30,810
little to no experience with docker it's

00:02:28,650 --> 00:02:34,050
going to be a pretty basic pretty low

00:02:30,810 --> 00:02:35,640
level but the hope is that whenever you

00:02:34,050 --> 00:02:37,410
walk away from this talk you'll be able

00:02:35,640 --> 00:02:39,330
to fork a project that I'll give you

00:02:37,410 --> 00:02:41,370
play around with it get docker running

00:02:39,330 --> 00:02:44,070
on your own machine and learn to love it

00:02:41,370 --> 00:02:45,660
as much as I do but I do want to talk

00:02:44,070 --> 00:02:47,790
first about the place of virtual

00:02:45,660 --> 00:02:49,470
environments in a docker setup I'm not

00:02:47,790 --> 00:02:51,480
telling you to totally ditch virtual

00:02:49,470 --> 00:02:53,460
environments in favor of docker I still

00:02:51,480 --> 00:02:54,780
use virtual environments a lot mostly

00:02:53,460 --> 00:02:56,280
because I'm really lazy and I like the

00:02:54,780 --> 00:02:59,220
work on command so I can switch between

00:02:56,280 --> 00:03:00,450
projects more efficiently but you know

00:02:59,220 --> 00:03:01,740
with the virtual environment you still

00:03:00,450 --> 00:03:04,050
do have to have a system Python

00:03:01,740 --> 00:03:05,430
installed which can get a little hairy

00:03:04,050 --> 00:03:08,340
depending on the number of projects that

00:03:05,430 --> 00:03:10,920
you work on so we're gonna start out by

00:03:08,340 --> 00:03:13,170
talking about Polyjuice potion Polyjuice

00:03:10,920 --> 00:03:15,120
potion in the Harry Potter books is this

00:03:13,170 --> 00:03:17,100
potion that you use to turn into someone

00:03:15,120 --> 00:03:18,810
else so you brew a potion you put a

00:03:17,100 --> 00:03:20,670
piece of that person's hair into this

00:03:18,810 --> 00:03:23,670
potion and then you turn into that

00:03:20,670 --> 00:03:26,040
person this is a lot how docker images

00:03:23,670 --> 00:03:28,650
and containers work so we're gonna use

00:03:26,040 --> 00:03:30,390
that analogy in this analogy docker is

00:03:28,650 --> 00:03:32,010
the potion itself it's the thing that

00:03:30,390 --> 00:03:34,770
you've brewed it's the vessel through

00:03:32,010 --> 00:03:36,420
which everything else happens when you

00:03:34,770 --> 00:03:38,940
start a project in docker you first

00:03:36,420 --> 00:03:40,980
start out by defining an image the image

00:03:38,940 --> 00:03:43,620
is like that person's hair that you want

00:03:40,980 --> 00:03:46,140
to turn into it defines all of the basic

00:03:43,620 --> 00:03:48,090
software for your project a more a more

00:03:46,140 --> 00:03:49,950
official explanation is that it's the

00:03:48,090 --> 00:03:53,160
executive all that contains all the

00:03:49,950 --> 00:03:55,530
packages that your project needs the

00:03:53,160 --> 00:03:57,990
container is you docker also has this

00:03:55,530 --> 00:03:59,970
concept called a container a container

00:03:57,990 --> 00:04:02,640
is a copy of your image that's running

00:03:59,970 --> 00:04:03,870
around actually running your project so

00:04:02,640 --> 00:04:05,550
whenever you drinks the Polyjuice potion

00:04:03,870 --> 00:04:07,440
you've had this potion that had

00:04:05,550 --> 00:04:09,480
someone's hair in it you turn into that

00:04:07,440 --> 00:04:10,950
post that person and you're a copy of

00:04:09,480 --> 00:04:14,010
them running around and causing mischief

00:04:10,950 --> 00:04:15,780
and and investigating so just to review

00:04:14,010 --> 00:04:17,520
this vocabulary we've learned about the

00:04:15,780 --> 00:04:20,010
concept of an image and the concept of a

00:04:17,520 --> 00:04:22,109
container the image is the executive and

00:04:20,010 --> 00:04:24,840
the container is the runtime instance of

00:04:22,109 --> 00:04:26,669
that image when you're using docker

00:04:24,840 --> 00:04:27,630
you'll also become familiar with a new

00:04:26,669 --> 00:04:29,580
file there's a

00:04:27,630 --> 00:04:31,410
that you'll use called a dockerfile and

00:04:29,580 --> 00:04:33,630
it lives in the same place of in your

00:04:31,410 --> 00:04:36,390
code as your managed by file and that

00:04:33,630 --> 00:04:38,790
defines all of the specifics about the

00:04:36,390 --> 00:04:41,730
image that you want to use so in that

00:04:38,790 --> 00:04:43,830
way it's the DNA of your project it is

00:04:41,730 --> 00:04:45,960
the hair it tells you all right let's

00:04:43,830 --> 00:04:47,670
you tell docker what version of python

00:04:45,960 --> 00:04:49,500
that you want to use what environment

00:04:47,670 --> 00:04:52,110
variables you'll need it installs things

00:04:49,500 --> 00:04:53,730
for you so now we have this new

00:04:52,110 --> 00:04:55,460
vocabulary word that I'll just keep on

00:04:53,730 --> 00:04:59,490
this slide for a moment

00:04:55,460 --> 00:05:01,470
so restated you use this hair to turn

00:04:59,490 --> 00:05:03,150
into someone else and then you drink

00:05:01,470 --> 00:05:05,700
that potion to transform the way that

00:05:03,150 --> 00:05:07,530
you look you use the docker file to tell

00:05:05,700 --> 00:05:09,000
docker how to build your image and then

00:05:07,530 --> 00:05:11,340
you run your project in a container so

00:05:09,000 --> 00:05:14,220
that's the analogy more explicitly if

00:05:11,340 --> 00:05:15,900
that helps you so this is the basic

00:05:14,220 --> 00:05:17,760
layout of a docker file and we're gonna

00:05:15,900 --> 00:05:19,320
go through this line by line because I

00:05:17,760 --> 00:05:21,450
don't like magic and a lot of tutorials

00:05:19,320 --> 00:05:23,040
will tell you just to copy and paste and

00:05:21,450 --> 00:05:26,250
that keeps you from understanding things

00:05:23,040 --> 00:05:28,140
more fully so the first line specifies

00:05:26,250 --> 00:05:30,300
the image that you want your image to be

00:05:28,140 --> 00:05:31,860
based on you don't have to start your

00:05:30,300 --> 00:05:33,720
image from scratch you can give your

00:05:31,860 --> 00:05:35,760
image a parent in this case we're gonna

00:05:33,720 --> 00:05:37,860
base our image off of the Python image

00:05:35,760 --> 00:05:39,510
in the docker hub there are all kinds of

00:05:37,860 --> 00:05:41,130
images published by all kinds of

00:05:39,510 --> 00:05:43,170
different organizations and people and

00:05:41,130 --> 00:05:45,000
Python has put their images up there

00:05:43,170 --> 00:05:48,900
tagged with the specific version so you

00:05:45,000 --> 00:05:51,840
can use the one you need env Python

00:05:48,900 --> 00:05:53,790
unbuffered one creates an area Balcon on

00:05:51,840 --> 00:05:55,650
buffered and setting it to one makes it

00:05:53,790 --> 00:05:57,450
truthy because one is truth a zero is

00:05:55,650 --> 00:05:59,370
false II and this means that you'll be

00:05:57,450 --> 00:06:01,550
able to see your output in the console

00:05:59,370 --> 00:06:04,800
whenever you're running your project

00:06:01,550 --> 00:06:07,140
Python don't write bytecode keeps docker

00:06:04,800 --> 00:06:10,650
from writing pyc files which helps to

00:06:07,140 --> 00:06:12,180
keep your docker image nice and tidy now

00:06:10,650 --> 00:06:14,280
your container will have its own

00:06:12,180 --> 00:06:16,440
directory structure so you'll have to

00:06:14,280 --> 00:06:19,290
copy your requirements file from your

00:06:16,440 --> 00:06:21,420
machine into your container and this

00:06:19,290 --> 00:06:23,850
line will do that for you but it puts it

00:06:21,420 --> 00:06:25,080
in a special directory called code since

00:06:23,850 --> 00:06:27,030
your container has its own file system

00:06:25,080 --> 00:06:28,680
you don't want to just dump all of your

00:06:27,030 --> 00:06:29,940
files directly in there you want to put

00:06:28,680 --> 00:06:31,560
them in their own place so that they're

00:06:29,940 --> 00:06:33,410
easier for you to find if you need to

00:06:31,560 --> 00:06:35,820
hop into your container and look around

00:06:33,410 --> 00:06:37,260
then you install your requirements with

00:06:35,820 --> 00:06:39,240
a command that you're pretty used to you

00:06:37,260 --> 00:06:41,490
just have to prefix it with run and you

00:06:39,240 --> 00:06:45,120
copy the rest of your files into that

00:06:41,490 --> 00:06:47,009
code directory this handy line worked or

00:06:45,120 --> 00:06:49,560
such the working directory of your

00:06:47,009 --> 00:06:51,419
container as code so whenever you're in

00:06:49,560 --> 00:06:54,180
the container you can run the commands

00:06:51,419 --> 00:06:56,370
like manage PI create super user without

00:06:54,180 --> 00:06:58,009
having to prefix it with code to make

00:06:56,370 --> 00:07:00,569
sure that you're in the right directory

00:06:58,009 --> 00:07:03,000
then you have to expose your containers

00:07:00,569 --> 00:07:05,819
port 8000 so that you can use your

00:07:03,000 --> 00:07:07,680
browser locally and then you have to run

00:07:05,819 --> 00:07:10,020
your server so you type out this command

00:07:07,680 --> 00:07:11,819
to tell docker to go ahead and and run

00:07:10,020 --> 00:07:13,470
manage PI run server the way that you're

00:07:11,819 --> 00:07:16,050
used to so docker will do this for you

00:07:13,470 --> 00:07:18,389
so now we're actually ready to start

00:07:16,050 --> 00:07:20,639
using our potion we're going to learn

00:07:18,389 --> 00:07:23,009
some things here so you you run docker

00:07:20,639 --> 00:07:24,509
build to build your image so that you

00:07:23,009 --> 00:07:27,000
have this thing that you can base your

00:07:24,509 --> 00:07:29,220
container off of and when you run docker

00:07:27,000 --> 00:07:31,470
build you will see a whole lot of output

00:07:29,220 --> 00:07:33,060
and so docker is executing all of the

00:07:31,470 --> 00:07:35,099
steps that you defined in your docker

00:07:33,060 --> 00:07:37,139
file and at the bottom it will say

00:07:35,099 --> 00:07:39,840
successfully built and then this this

00:07:37,139 --> 00:07:41,849
kind of nonsense string that nonsense

00:07:39,840 --> 00:07:45,419
string is the name of your image in this

00:07:41,849 --> 00:07:47,460
case a TF BC etc but that's not super

00:07:45,419 --> 00:07:50,520
intuitive for most people so docker

00:07:47,460 --> 00:07:53,940
allows us to give our images a specific

00:07:50,520 --> 00:07:55,889
name so we can name this image and get

00:07:53,940 --> 00:07:57,930
to it more easily which which is really

00:07:55,889 --> 00:07:59,849
helpful but then you see that it that

00:07:57,930 --> 00:08:01,979
docker will also go ahead and tag our

00:07:59,849 --> 00:08:04,259
image once we name it so we've seen

00:08:01,979 --> 00:08:06,690
those tags before we referred to the

00:08:04,259 --> 00:08:08,639
three-point-six tag of the Python image

00:08:06,690 --> 00:08:11,159
if you don't provide a specific tag

00:08:08,639 --> 00:08:12,659
docker will just tag it latest but

00:08:11,159 --> 00:08:14,250
tagging things is the way that you can

00:08:12,659 --> 00:08:15,659
manage like specific releases of your

00:08:14,250 --> 00:08:18,630
image the way that Python does with

00:08:15,659 --> 00:08:20,490
their versions now I mentioned that

00:08:18,630 --> 00:08:22,800
docker builds your image with particular

00:08:20,490 --> 00:08:24,479
steps docker is layered and that's a

00:08:22,800 --> 00:08:26,909
really important concept to understand

00:08:24,479 --> 00:08:29,610
every line in your docker file is its

00:08:26,909 --> 00:08:31,289
own layer in your image and you can see

00:08:29,610 --> 00:08:33,390
this whenever docker is building your

00:08:31,289 --> 00:08:35,039
image you've got step one which will

00:08:33,390 --> 00:08:36,659
build step two and it will go through

00:08:35,039 --> 00:08:39,300
these one at a time so it's very

00:08:36,659 --> 00:08:41,039
explicit about what it's doing what this

00:08:39,300 --> 00:08:43,200
means is that the very first time that

00:08:41,039 --> 00:08:45,000
you build your image docker will build

00:08:43,200 --> 00:08:47,430
everything by hand it'll make all of

00:08:45,000 --> 00:08:49,350
those those layers from scratch the

00:08:47,430 --> 00:08:50,850
second time through whenever you're

00:08:49,350 --> 00:08:51,870
building your image if you haven't

00:08:50,850 --> 00:08:53,339
changed anything

00:08:51,870 --> 00:08:54,990
docker doesn't care about building it

00:08:53,339 --> 00:08:56,850
from scratch for you it'll go ahead and

00:08:54,990 --> 00:08:59,970
use a cache so that it doesn't have to

00:08:56,850 --> 00:09:02,250
do all that work over again but if you

00:08:59,970 --> 00:09:04,410
change a line in your docker file docker

00:09:02,250 --> 00:09:06,740
will rebuild that particular layer and

00:09:04,410 --> 00:09:10,230
all of the layers that come after that

00:09:06,740 --> 00:09:11,790
so what that means is that say we we add

00:09:10,230 --> 00:09:14,250
something new to our requirements file

00:09:11,790 --> 00:09:16,050
whenever docker is building before it

00:09:14,250 --> 00:09:17,730
gets to that step it will use a cache

00:09:16,050 --> 00:09:19,709
and it won't try to execute those steps

00:09:17,730 --> 00:09:21,540
from scratch but once it gets to

00:09:19,709 --> 00:09:23,160
installing the requirements it knows

00:09:21,540 --> 00:09:25,020
that something has changed and it will

00:09:23,160 --> 00:09:27,810
download all of those requirements again

00:09:25,020 --> 00:09:29,490
fresh and then it will build steps you

00:09:27,810 --> 00:09:33,240
know five six seven eight from scratch

00:09:29,490 --> 00:09:34,740
as well so now we're finished talking

00:09:33,240 --> 00:09:37,950
about Polyjuice potion and we're going

00:09:34,740 --> 00:09:39,959
to talk about some charms some spells so

00:09:37,950 --> 00:09:41,640
this is all about how you interact with

00:09:39,959 --> 00:09:42,930
with your container is whenever you're

00:09:41,640 --> 00:09:44,070
actually running your project in

00:09:42,930 --> 00:09:46,080
development

00:09:44,070 --> 00:09:47,850
you run the docker images command to see

00:09:46,080 --> 00:09:50,010
the images that you have so we can see

00:09:47,850 --> 00:09:53,430
our Hogwarts image and its original

00:09:50,010 --> 00:09:55,260
image ID we can also reveal our

00:09:53,430 --> 00:09:57,990
containers by running docker container

00:09:55,260 --> 00:09:59,700
LS this will show us any containers that

00:09:57,990 --> 00:10:01,110
we currently have running and we can see

00:09:59,700 --> 00:10:02,850
right now that we don't have any running

00:10:01,110 --> 00:10:05,579
because we've built our image but we

00:10:02,850 --> 00:10:07,290
haven't done anything with it so in

00:10:05,579 --> 00:10:10,980
order to do something with that image we

00:10:07,290 --> 00:10:13,350
run docker run docker run - P 8000 colon

00:10:10,980 --> 00:10:15,959
8000 Hogwarts will execute everything

00:10:13,350 --> 00:10:18,180
that we had in that image it will it

00:10:15,959 --> 00:10:21,209
will actually start making a copy of the

00:10:18,180 --> 00:10:23,700
container that will exist for us so if

00:10:21,209 --> 00:10:25,890
we run that show us our containers

00:10:23,700 --> 00:10:27,870
command again then we will see all of

00:10:25,890 --> 00:10:29,610
these or not all of these there's only

00:10:27,870 --> 00:10:30,990
one right now we will see this container

00:10:29,610 --> 00:10:32,970
that we've created so we can see the

00:10:30,990 --> 00:10:34,860
images based on the command that it's

00:10:32,970 --> 00:10:37,920
running and some other metadata about

00:10:34,860 --> 00:10:40,560
this particular container we can also

00:10:37,920 --> 00:10:42,990
hop into our container specifically

00:10:40,560 --> 00:10:44,850
using the docker exec command so

00:10:42,990 --> 00:10:49,200
exacting into your container is docker

00:10:44,850 --> 00:10:50,880
exact - IT and the ID of your container

00:10:49,200 --> 00:10:54,089
and you can get the ID of your container

00:10:50,880 --> 00:10:55,829
from docker container LS and then shell

00:10:54,089 --> 00:10:57,600
and once you're there you can see that

00:10:55,829 --> 00:10:59,040
you're at the root and you can also see

00:10:57,600 --> 00:11:01,110
that you're right there in your code

00:10:59,040 --> 00:11:02,550
directory because you specified that

00:11:01,110 --> 00:11:05,130
with the worked or command in your

00:11:02,550 --> 00:11:06,810
docker file so whenever you reveal the

00:11:05,130 --> 00:11:08,460
contents of this directory you'll see

00:11:06,810 --> 00:11:10,470
your docker file your manager

00:11:08,460 --> 00:11:12,210
file so you can see that your code was

00:11:10,470 --> 00:11:15,240
copied over the way that you told it to

00:11:12,210 --> 00:11:17,520
in your docker file if you go up a level

00:11:15,240 --> 00:11:19,230
then you'll be able to see that you have

00:11:17,520 --> 00:11:21,330
that code directory it's the second one

00:11:19,230 --> 00:11:23,100
there in the third line but the

00:11:21,330 --> 00:11:24,800
container also has its own set of

00:11:23,100 --> 00:11:26,790
directories it's doing its own thing

00:11:24,800 --> 00:11:28,230
most of the time you won't really need

00:11:26,790 --> 00:11:30,180
to worry about that but I want you to

00:11:28,230 --> 00:11:31,950
know about it because sometimes you will

00:11:30,180 --> 00:11:34,740
need to hop into your container to poke

00:11:31,950 --> 00:11:37,040
around and debug some things hop out of

00:11:34,740 --> 00:11:40,200
your container like with control D and

00:11:37,040 --> 00:11:42,090
then if we run docker container LS again

00:11:40,200 --> 00:11:43,530
even though we've hopped into our

00:11:42,090 --> 00:11:45,210
container to look around and now we've

00:11:43,530 --> 00:11:47,010
hopped out we can see that nothing

00:11:45,210 --> 00:11:48,480
changed with our container we didn't

00:11:47,010 --> 00:11:50,580
stop it we didn't start it we didn't

00:11:48,480 --> 00:11:53,550
touch it we just kind of poked at it and

00:11:50,580 --> 00:11:54,990
nothing changed if we wanted to stop our

00:11:53,550 --> 00:11:57,090
container that's a pretty intuitive

00:11:54,990 --> 00:12:00,570
command docker stop and the ID of our

00:11:57,090 --> 00:12:02,670
container and then Dockers start to

00:12:00,570 --> 00:12:04,560
restart the container whenever you stop

00:12:02,670 --> 00:12:06,420
a container the container still exists

00:12:04,560 --> 00:12:08,670
it just sort of pauses for a moment and

00:12:06,420 --> 00:12:10,380
then docker start will restart that

00:12:08,670 --> 00:12:13,560
particular container so you're not

00:12:10,380 --> 00:12:15,510
creating a fresh copy docker kill

00:12:13,560 --> 00:12:17,340
however will trash your container

00:12:15,510 --> 00:12:19,500
entirely and kill it with fire and you

00:12:17,340 --> 00:12:21,360
will never see it again something to

00:12:19,500 --> 00:12:23,820
keep in mind about docker kill versus

00:12:21,360 --> 00:12:25,980
docker stopped is that with docker stop

00:12:23,820 --> 00:12:27,420
you still have all of your data so if

00:12:25,980 --> 00:12:29,910
you've created test data you've created

00:12:27,420 --> 00:12:31,320
a super user running docker stop and

00:12:29,910 --> 00:12:34,080
then docker start you'll still have

00:12:31,320 --> 00:12:35,790
access to all of that docker kill also

00:12:34,080 --> 00:12:37,110
kills your data but I'll tell you a

00:12:35,790 --> 00:12:38,580
little bit later how you can get around

00:12:37,110 --> 00:12:42,210
that but that's a pretty important thing

00:12:38,580 --> 00:12:44,370
to know so one of my favorite features

00:12:42,210 --> 00:12:48,060
of docker that makes it so pleasant for

00:12:44,370 --> 00:12:50,130
django development is docker compose so

00:12:48,060 --> 00:12:53,820
this particular command this docker run

00:12:50,130 --> 00:12:56,100
- PE 8000 colon 8000 hogwarts is kind of

00:12:53,820 --> 00:12:58,200
a lot to type it's not super flexible

00:12:56,100 --> 00:12:59,430
it's not very intuitive and you might be

00:12:58,200 --> 00:13:00,870
thinking like why would I type this

00:12:59,430 --> 00:13:02,640
whole command whenever I could just type

00:13:00,870 --> 00:13:04,830
manage my run server and my life would

00:13:02,640 --> 00:13:06,660
continue to be simple and this is where

00:13:04,830 --> 00:13:07,170
docker compose comes in to help you out

00:13:06,660 --> 00:13:10,110
with that

00:13:07,170 --> 00:13:13,050
so docker compose is this sort of add-on

00:13:10,110 --> 00:13:14,970
- docker it's free if you're on a Mac

00:13:13,050 --> 00:13:16,470
then it's included with docker if you're

00:13:14,970 --> 00:13:19,260
on another system it's a separate

00:13:16,470 --> 00:13:20,950
download and the magical thing that it

00:13:19,260 --> 00:13:22,870
lets you do is run more than

00:13:20,950 --> 00:13:24,340
container at once so you can have

00:13:22,870 --> 00:13:26,290
separate containers for your database

00:13:24,340 --> 00:13:28,120
for your webserver for other things that

00:13:26,290 --> 00:13:30,010
your code might be doing and you can

00:13:28,120 --> 00:13:31,990
also relate those containers to each

00:13:30,010 --> 00:13:34,150
other which can be very handy and I'll

00:13:31,990 --> 00:13:36,040
go through that in a moment too so just

00:13:34,150 --> 00:13:37,660
to put a Harry Potter and metaphor in

00:13:36,040 --> 00:13:39,760
here because I have two docker compose

00:13:37,660 --> 00:13:41,590
is kind of like Hermione's magical bags

00:13:39,760 --> 00:13:44,140
she the character in Harry Potter has

00:13:41,590 --> 00:13:46,000
this bag that expands to fit anything

00:13:44,140 --> 00:13:48,880
that she possibly need she puts a tent

00:13:46,000 --> 00:13:50,590
in there and everything docker composes

00:13:48,880 --> 00:13:52,270
like that it lets you create just a

00:13:50,590 --> 00:13:54,220
laundry list of all of the things that

00:13:52,270 --> 00:13:57,700
your project is going to need and have

00:13:54,220 --> 00:13:59,380
separate containers for them so this is

00:13:57,700 --> 00:14:01,060
an example of a docker compose file

00:13:59,380 --> 00:14:02,860
whenever you're using compose you'll

00:14:01,060 --> 00:14:04,540
have a docker file the way that we

00:14:02,860 --> 00:14:06,130
talked about earlier but you'll also

00:14:04,540 --> 00:14:10,180
have a separate file called docker

00:14:06,130 --> 00:14:11,650
compose Gamal you start out with the

00:14:10,180 --> 00:14:13,120
version number three is the most current

00:14:11,650 --> 00:14:15,520
version of compose so that's the one

00:14:13,120 --> 00:14:17,620
that we're using and then you define

00:14:15,520 --> 00:14:19,240
your services your services are the

00:14:17,620 --> 00:14:21,130
containers that you want to start

00:14:19,240 --> 00:14:23,110
whenever you start your your project

00:14:21,130 --> 00:14:25,420
with docker compose for the purposes of

00:14:23,110 --> 00:14:27,520
this example we are using a database

00:14:25,420 --> 00:14:31,960
container and also a web container to

00:14:27,520 --> 00:14:33,100
separate our data from our code now one

00:14:31,960 --> 00:14:34,870
of the other things I really love about

00:14:33,100 --> 00:14:36,760
docker is that just like I don't have to

00:14:34,870 --> 00:14:37,990
have a local Python installation I don't

00:14:36,760 --> 00:14:40,540
have to have a local Postgres

00:14:37,990 --> 00:14:43,360
installation either I can tell docker to

00:14:40,540 --> 00:14:45,610
go out grab the most recent Postgres

00:14:43,360 --> 00:14:47,830
image or a specific tag if I want to use

00:14:45,610 --> 00:14:49,480
that and then it will all just work I

00:14:47,830 --> 00:14:51,490
don't have to configure anything locally

00:14:49,480 --> 00:14:54,160
other than changing my settings dot PI

00:14:51,490 --> 00:14:57,070
file so that's a really really huge plus

00:14:54,160 --> 00:14:59,170
for me I do have a sample project that

00:14:57,070 --> 00:15:00,790
I'll link to at the end that shows the

00:14:59,170 --> 00:15:02,920
changes that you need to make with your

00:15:00,790 --> 00:15:04,510
settings top PI file but just know that

00:15:02,920 --> 00:15:06,190
you are changing your database back-end

00:15:04,510 --> 00:15:07,720
whenever you do that in compose so you

00:15:06,190 --> 00:15:11,020
have to do the related things that you

00:15:07,720 --> 00:15:13,510
have to do now we jump into our web

00:15:11,020 --> 00:15:15,390
service and this allows us to do a lot

00:15:13,510 --> 00:15:17,800
of things we have a lot of options here

00:15:15,390 --> 00:15:19,810
for example we can run more than one

00:15:17,800 --> 00:15:21,460
command so if we want to we can run

00:15:19,810 --> 00:15:23,920
migrations every time we start our

00:15:21,460 --> 00:15:27,430
project and also run our server so we

00:15:23,920 --> 00:15:30,340
can skip a step there and compose also

00:15:27,430 --> 00:15:32,680
introduces this concept of a volume so I

00:15:30,340 --> 00:15:34,510
told you earlier that whenever you kill

00:15:32,680 --> 00:15:34,780
your container you kill all of the data

00:15:34,510 --> 00:15:36,340
that

00:15:34,780 --> 00:15:39,160
associated with your project like your

00:15:36,340 --> 00:15:41,710
super user or any test records that

00:15:39,160 --> 00:15:42,760
you'd created if you use a volume then

00:15:41,710 --> 00:15:44,710
that's not true anymore

00:15:42,760 --> 00:15:46,480
you can stick your data in a special

00:15:44,710 --> 00:15:49,030
volume that will persist between

00:15:46,480 --> 00:15:51,100
containers so you kill your container

00:15:49,030 --> 00:15:52,990
and then you restart a new one but you

00:15:51,100 --> 00:15:56,410
still have all of that test data that

00:15:52,990 --> 00:15:58,840
you created you can map your containers

00:15:56,410 --> 00:16:01,150
port 8000 to your own local machines

00:15:58,840 --> 00:16:04,300
port 8000 so you skip that step as well

00:16:01,150 --> 00:16:06,760
from your docker run command that we

00:16:04,300 --> 00:16:08,890
were going through earlier and then we

00:16:06,760 --> 00:16:11,440
can relate the web container to the

00:16:08,890 --> 00:16:13,420
database container so we can say that

00:16:11,440 --> 00:16:15,100
our web service depends on our database

00:16:13,420 --> 00:16:16,780
service we really need those to work

00:16:15,100 --> 00:16:19,000
together in order for the project to

00:16:16,780 --> 00:16:21,430
work so docker will start the database

00:16:19,000 --> 00:16:24,520
container first and then start the web

00:16:21,430 --> 00:16:26,340
container second now what this means is

00:16:24,520 --> 00:16:29,230
that the last line in our docker file

00:16:26,340 --> 00:16:31,060
that was running one run server we don't

00:16:29,230 --> 00:16:34,150
need that anymore so we can kill it with

00:16:31,060 --> 00:16:36,040
fire and we can move on the way that you

00:16:34,150 --> 00:16:38,620
use compose instead of running docker

00:16:36,040 --> 00:16:40,480
run you just run docker compose up and

00:16:38,620 --> 00:16:42,790
it will take care of both building your

00:16:40,480 --> 00:16:44,680
image and also starting your project if

00:16:42,790 --> 00:16:45,310
you've already built that image once

00:16:44,680 --> 00:16:47,740
before

00:16:45,310 --> 00:16:49,510
just like docker build will do it won't

00:16:47,740 --> 00:16:52,150
rebuild it if that thing has changed it

00:16:49,510 --> 00:16:53,530
will use that cache but it will also go

00:16:52,150 --> 00:16:55,240
ahead and rebuild things if something

00:16:53,530 --> 00:16:57,310
changes as well if you want to make

00:16:55,240 --> 00:17:00,970
absolutely sure that your image gets

00:16:57,310 --> 00:17:02,560
rebuilt just pass the build flag once

00:17:00,970 --> 00:17:04,480
you run docker compose up you'll see a

00:17:02,560 --> 00:17:05,920
lot of output and you'll see some things

00:17:04,480 --> 00:17:07,390
that confirm what I've talked about

00:17:05,920 --> 00:17:09,580
already so you see that the database

00:17:07,390 --> 00:17:11,350
service starts first you see the web

00:17:09,580 --> 00:17:13,300
service and then you see that they get

00:17:11,350 --> 00:17:15,100
attached docker relates them to one

00:17:13,300 --> 00:17:17,170
another we can also see that our

00:17:15,100 --> 00:17:20,160
migrations were performed and that our

00:17:17,170 --> 00:17:23,290
server started so we're ready to go and

00:17:20,160 --> 00:17:25,120
we can see that we do now have two

00:17:23,290 --> 00:17:27,940
containers instead of run whenever we

00:17:25,120 --> 00:17:31,540
run docker container LS so we see that

00:17:27,940 --> 00:17:33,130
we have our post gross image and our web

00:17:31,540 --> 00:17:34,960
image and we can also see that they have

00:17:33,130 --> 00:17:36,850
much better names now they still have

00:17:34,960 --> 00:17:39,100
those container IDs but they also

00:17:36,850 --> 00:17:40,840
automatically get names that are based

00:17:39,100 --> 00:17:42,250
on the name of our project and also the

00:17:40,840 --> 00:17:45,670
name of the service which is a lot

00:17:42,250 --> 00:17:47,230
easier to handle and we can run regular

00:17:45,670 --> 00:17:48,030
commands like we're used to from the

00:17:47,230 --> 00:17:49,980
command lines

00:17:48,030 --> 00:17:51,540
if you wanted to run make migrations you

00:17:49,980 --> 00:17:53,970
have to prefix things with docker

00:17:51,540 --> 00:17:55,800
compose run and the name of the service

00:17:53,970 --> 00:17:57,450
that you want to touch but then you can

00:17:55,800 --> 00:18:00,060
run everything the way that you're used

00:17:57,450 --> 00:18:01,950
to this is a lot to type but you you can

00:18:00,060 --> 00:18:04,350
also map these as shortcuts so you can

00:18:01,950 --> 00:18:05,850
create a shortcut phrase that will do

00:18:04,350 --> 00:18:07,200
all this for you and then you can just

00:18:05,850 --> 00:18:11,280
run the manage stop by and make

00:18:07,200 --> 00:18:13,680
migrations after that and then that RM

00:18:11,280 --> 00:18:15,330
flag means trash this container whenever

00:18:13,680 --> 00:18:16,770
I'm done with it so whenever you run

00:18:15,330 --> 00:18:19,110
something like this and you've already

00:18:16,770 --> 00:18:21,660
run docker compose up docker is going to

00:18:19,110 --> 00:18:24,030
start a second web container for you to

00:18:21,660 --> 00:18:25,530
run these migrations all it's doing is

00:18:24,030 --> 00:18:26,940
running those migrations and you already

00:18:25,530 --> 00:18:29,400
have your container that's running your

00:18:26,940 --> 00:18:30,540
server so you don't need the migrations

00:18:29,400 --> 00:18:33,210
container anymore

00:18:30,540 --> 00:18:36,000
so at passing the RM flag we'll go ahead

00:18:33,210 --> 00:18:38,160
and remove that container so that you

00:18:36,000 --> 00:18:41,190
don't clutter up your your system with

00:18:38,160 --> 00:18:42,690
that you can hop into the shell the way

00:18:41,190 --> 00:18:44,910
that you're used to with this in the

00:18:42,690 --> 00:18:46,290
same way which is pretty handy so

00:18:44,910 --> 00:18:48,180
basically anything that you're used to

00:18:46,290 --> 00:18:48,870
doing with a Django project from the

00:18:48,180 --> 00:18:50,940
command line

00:18:48,870 --> 00:18:52,890
you can still do with docker as long as

00:18:50,940 --> 00:18:54,780
you prefix it with docker compose run

00:18:52,890 --> 00:18:58,350
the name of your service and then you

00:18:54,780 --> 00:19:00,720
just proceed as normal you can stop and

00:18:58,350 --> 00:19:02,430
start your docker containers at will so

00:19:00,720 --> 00:19:05,190
you can stop specifically the web

00:19:02,430 --> 00:19:07,200
container restart it specifically this

00:19:05,190 --> 00:19:09,300
is very handy if you're using something

00:19:07,200 --> 00:19:11,780
like celery you can have a specific

00:19:09,300 --> 00:19:13,860
celery container and if you're not

00:19:11,780 --> 00:19:15,870
working on the celery portion of your

00:19:13,860 --> 00:19:17,610
project you can stop only the celery

00:19:15,870 --> 00:19:18,930
container so that you can move on with

00:19:17,610 --> 00:19:21,090
your life and you don't get all of the

00:19:18,930 --> 00:19:22,530
output from you know syncing something

00:19:21,090 --> 00:19:24,060
every five minutes or reaching out to an

00:19:22,530 --> 00:19:27,060
API every two minutes or something like

00:19:24,060 --> 00:19:28,560
that at the end of the day when you're

00:19:27,060 --> 00:19:30,570
ready to go home you run docker compose

00:19:28,560 --> 00:19:33,410
down and docker will shut down your

00:19:30,570 --> 00:19:36,090
containers and trash them for you and

00:19:33,410 --> 00:19:38,070
then if you want to check out a project

00:19:36,090 --> 00:19:39,960
and kind of play with this yourself this

00:19:38,070 --> 00:19:41,880
will link you to a github repository I

00:19:39,960 --> 00:19:44,130
highly encourage you to fork that

00:19:41,880 --> 00:19:45,330
repository and play around with it and

00:19:44,130 --> 00:19:47,280
get to know it a little bit if you have

00:19:45,330 --> 00:19:49,440
any questions please feel free to ask me

00:19:47,280 --> 00:19:51,600
about those or file those as issues and

00:19:49,440 --> 00:19:53,610
I want to leave you with this quote from

00:19:51,600 --> 00:19:55,440
Albus Dumbledore it is the unknown we

00:19:53,610 --> 00:19:58,020
fear when we look upon docker nothing

00:19:55,440 --> 00:20:00,120
more I do genuinely hope that this talk

00:19:58,020 --> 00:20:00,360
helped demystify docker for you a little

00:20:00,120 --> 00:20:02,040
bit

00:20:00,360 --> 00:20:03,660
I really love it but that was a journey

00:20:02,040 --> 00:20:05,429
for me to get to loving it so I

00:20:03,660 --> 00:20:07,830
understand if you've been a little bit

00:20:05,429 --> 00:20:09,270
frustrated with docker in the past if

00:20:07,830 --> 00:20:11,040
that's been you I would really love to

00:20:09,270 --> 00:20:12,360
talk with you about that and and help

00:20:11,040 --> 00:20:14,549
make this make a little bit more sense

00:20:12,360 --> 00:20:16,559
to you I will tweet all of these out and

00:20:14,549 --> 00:20:18,660
I'll also post my slides but there are a

00:20:16,559 --> 00:20:21,120
lot of resources that are pretty

00:20:18,660 --> 00:20:23,490
friendly to learn about using docker

00:20:21,120 --> 00:20:25,740
some of these go specifically into the

00:20:23,490 --> 00:20:27,630
docker parts of things some of these are

00:20:25,740 --> 00:20:29,700
more the kind of django side of things

00:20:27,630 --> 00:20:30,990
but hopefully they'll help coalesce

00:20:29,700 --> 00:20:32,580
things for you and again I'll tweet

00:20:30,990 --> 00:20:34,070
these out I'll also post my slides so

00:20:32,580 --> 00:20:36,990
you'll be able to link directly to these

00:20:34,070 --> 00:20:43,140
that's all I have for today so thank you

00:20:36,990 --> 00:20:46,100
very much thank you for the talk it is

00:20:43,140 --> 00:20:49,590
the mystifying do you have any advice on

00:20:46,100 --> 00:20:52,260
how to use the debugger while doing

00:20:49,590 --> 00:20:55,429
django development in docker breakpoints

00:20:52,260 --> 00:20:58,290
and that sort of thing so I usually use

00:20:55,429 --> 00:21:01,200
like PI tests that trace whenever I'm

00:20:58,290 --> 00:21:03,500
debugging I am I'm really bad about

00:21:01,200 --> 00:21:06,690
using the the built-in Python debugger

00:21:03,500 --> 00:21:11,490
but my experience is whenever I run you

00:21:06,690 --> 00:21:13,770
know docker compose run RM web PI test

00:21:11,490 --> 00:21:15,360
for example it will go ahead and stop at

00:21:13,770 --> 00:21:17,370
the set trace and allow me to poke

00:21:15,360 --> 00:21:18,960
around the way that I'm used to so it it

00:21:17,370 --> 00:21:20,520
doesn't really change things I would

00:21:18,960 --> 00:21:23,400
assume that using the regular Python

00:21:20,520 --> 00:21:24,720
debugger would be similar but I would I

00:21:23,400 --> 00:21:26,490
would like to sit down with you and kind

00:21:24,720 --> 00:21:26,790
of step through that and see if that's

00:21:26,490 --> 00:21:29,760
true

00:21:26,790 --> 00:21:32,820
hi thank you very much for that talk so

00:21:29,760 --> 00:21:35,340
container data files that you've

00:21:32,820 --> 00:21:37,200
generated in the container how would you

00:21:35,340 --> 00:21:39,480
get that out to your system and vice

00:21:37,200 --> 00:21:41,370
versa if you have files in your system

00:21:39,480 --> 00:21:43,679
that you need for the container how

00:21:41,370 --> 00:21:46,679
would you get that in so if if you have

00:21:43,679 --> 00:21:48,090
like a CSV file for example that you

00:21:46,679 --> 00:21:49,980
need then you just put that in your

00:21:48,090 --> 00:21:52,890
project directory the way that you

00:21:49,980 --> 00:21:55,230
normally would and then you have access

00:21:52,890 --> 00:21:56,940
to it that way if your system generates

00:21:55,230 --> 00:21:59,880
files then my experience is that they

00:21:56,940 --> 00:22:01,320
show up in your project directory and

00:21:59,880 --> 00:22:02,970
that still exists locally like they

00:22:01,320 --> 00:22:05,910
won't be just in the container they'll

00:22:02,970 --> 00:22:08,370
also be in your local file system thank

00:22:05,910 --> 00:22:10,320
you a quick question about pulling

00:22:08,370 --> 00:22:11,880
dependencies that maybe aren't in pipe

00:22:10,320 --> 00:22:13,320
higher or like in a local mirror you

00:22:11,880 --> 00:22:16,380
need ssh authentication

00:22:13,320 --> 00:22:18,240
how do you do that in your docker build

00:22:16,380 --> 00:22:22,650
without hard coding secrets in the

00:22:18,240 --> 00:22:24,540
docker file so there is a way to to use

00:22:22,650 --> 00:22:27,450
docker secrets to kind of manage that

00:22:24,540 --> 00:22:28,920
it's a little bit I can't really like

00:22:27,450 --> 00:22:31,740
sum it up in 30 seconds but there is a

00:22:28,920 --> 00:22:33,240
way to do that and I see Steven here I

00:22:31,740 --> 00:22:35,760
will also be able to talk to you about

00:22:33,240 --> 00:22:37,890
that but yeah so it involves setting up

00:22:35,760 --> 00:22:39,930
some docker secrets which is sort of its

00:22:37,890 --> 00:22:42,570
own talk but there there is a way to do

00:22:39,930 --> 00:22:44,670
that and then if if you're comfortable

00:22:42,570 --> 00:22:49,140
kind of hard coding things then we have

00:22:44,670 --> 00:22:51,240
a rep sis has a generator where you can

00:22:49,140 --> 00:22:53,100
put in the repository and it'll sort of

00:22:51,240 --> 00:22:55,860
spit out like forget lab versus github

00:22:53,100 --> 00:22:57,180
etc what you need but if you obviously

00:22:55,860 --> 00:22:58,740
you don't really want to hard-code those

00:22:57,180 --> 00:23:02,880
tokens so dr. secrets wouldn't be the

00:22:58,740 --> 00:23:04,740
way to go with that anymore would you

00:23:02,880 --> 00:23:07,710
like to take I think we're probably out

00:23:04,740 --> 00:23:10,850
of time all right well thank you so much

00:23:07,710 --> 00:23:10,850
give Hanna

00:23:12,340 --> 00:23:15,609

YouTube URL: https://www.youtube.com/watch?v=qsEfVSTZO9Q


