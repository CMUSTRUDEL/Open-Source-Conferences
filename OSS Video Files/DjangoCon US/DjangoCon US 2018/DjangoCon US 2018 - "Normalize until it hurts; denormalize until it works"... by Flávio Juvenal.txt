Title: DjangoCon US 2018 - "Normalize until it hurts; denormalize until it works"... by Fl√°vio Juvenal
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - "Normalize until it hurts; denormalize until it works" in Django by Fl√°vio Juvenal

There‚Äôs a good practice that says ‚Äúa database is a representer of facts‚Äù. If there‚Äôs more than one way to extract a single fact from the database, then there‚Äôs a redundancy in it. Every redundancy can cause different anomalies in the data, which in turn cause bugs in the application. To avoid that, there‚Äôs a process called normalization, which involves following sets of rules to restructure the database to remove redundancies without losing the original facts. The traditional set of normalization rules are the so-called Normal Forms: First Normal Form, Second, Third, etc. Unfortunately, those are frequently overlooked by developers due to their excessive formalism. But in fact, even the Normal Forms aren‚Äôt enough to avoid anomalies, since they‚Äôre concerned about redundancies only in a single table*. Since cross-table dependencies are very common in modern applications, we must go beyond normal forms to prevent problems.

In this talk, we‚Äôll present normalization rules on a friendly language, going beyond normal forms. We‚Äôll understand how the software requirements cause dependencies in database tables, both in-table and cross-tables. We‚Äôll show real examples of non-trivial dependencies that happen on Django models. We‚Äôll discuss how normalization prevents redundancies, inconsistencies, anomalies, and bugs. Knowing that normalization can cause slowdowns in queries, we‚Äôll present how to increase performance with denormalization, which is not the same of not normalizing. Instead, denormalization means being able to represent data in multiple ways to speed up queries without introducing inconsistencies. We‚Äôll discuss Django-related denormalization tools that use cronjobs, indexes, caching, materialized views and triggers, and NoSQL.

*It‚Äôs common to ignore the fact that normal forms only discuss redundancies inside a single table/record/relval. More about this in this article reviewed by Codd, Fagin and Date, key figures of the relational model.

This talk was presented at: https://2018.djangocon.us/talk/normalize-until-it-hurts-denormalize-it/

LINKS:
Follow Fl√°vio Juvenal üëá
On Twitter: https://twitter.com/flaviojuvenal
Official homepage: https://www.vinta.com.br

Follow DjangCon US üëá
https://twitter.com/djangocon

Follow DEFNA üëá
https://twitter.com/defnado
https://www.defna.org/
YouTube URL: https://www.youtube.com/watch?v=01Hm2-NAM3w


