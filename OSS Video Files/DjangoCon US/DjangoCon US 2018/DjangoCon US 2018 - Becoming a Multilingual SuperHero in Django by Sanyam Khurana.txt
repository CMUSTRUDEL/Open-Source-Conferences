Title: DjangoCon US 2018 - Becoming a Multilingual SuperHero in Django by Sanyam Khurana
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - Becoming a Multilingual SuperHero in Django by Sanyam Khurana

You have got this super awesome REST API served through Django/DRF based project and suddenly these requirements come in:

We need to have a local support for the Chinese language!

In case, you’ve not written your application with localization and internationalization in mind, then “Boy! You’re in danger! You should better start praying to almighty to give you strength and endurance to support yet another language in your app”.

In this talk, we’ll see how do we support localization and serve our app in different languages, based on what language the client wants to communicate in. As a backend, we should be language agnostic and allow all clients to communicate with us in one of the languages we support.

We’ll see how to support translation for static data (using makemessages / compilemessages) and dynamic data, using various third-party services such as django-translations and transifex.

Here, static data is translations for all the fields, error messages etc. that the app already has and dynamic data is the custom data input by the user in the app.

This would enable you to have your admin panel, as well as RESTful APIs, served in different languages.

This talk was presented at: https://2018.djangocon.us/talk/becoming-a-multilingual-superhero-in/

LINKS:
Follow Sanyam Khurana 👇
On Twitter: https://twitter.com/ErSanyamKhurana
Official homepage: http://www.sanyamkhurana.com/blog/

Follow DjangCon US 👇
https://twitter.com/djangocon

Follow DEFNA 👇
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,529 --> 00:00:24,960
thank you so much let me just introduce

00:00:20,460 --> 00:00:27,480
myself first I'm one of you

00:00:24,960 --> 00:00:29,970
a part of the community I am a cpython

00:00:27,480 --> 00:00:32,489
contributor and bhaktraj

00:00:29,970 --> 00:00:34,980
access on Baxter Python or gee I've been

00:00:32,489 --> 00:00:36,660
contributed to most elastico system of

00:00:34,980 --> 00:00:40,770
projects ranging from add-ons matinee

00:00:36,660 --> 00:00:42,690
tasks cluster gecko engine etc I've been

00:00:40,770 --> 00:00:45,809
a ji-suk mentor for Debian and Archie

00:00:42,690 --> 00:00:48,750
South mentor I work as a back in dev at

00:00:45,809 --> 00:00:52,170
field a powering iOS and Android and web

00:00:48,750 --> 00:00:54,840
apps this talk came directly from one of

00:00:52,170 --> 00:00:58,829
the projects I walked on which was for a

00:00:54,840 --> 00:01:02,160
Chinese client so imagine you've got

00:00:58,829 --> 00:01:03,719
this awesome RESTful API built on Jango

00:01:02,160 --> 00:01:06,900
and DRF and suddenly this requirement

00:01:03,719 --> 00:01:09,090
comes in we want this app and the CMS or

00:01:06,900 --> 00:01:11,939
the admin panel in Chinese or we want it

00:01:09,090 --> 00:01:14,430
in German so if you have this humongous

00:01:11,939 --> 00:01:16,110
codebase not written with all those you

00:01:14,430 --> 00:01:18,659
get text and you get X lazy stuff in

00:01:16,110 --> 00:01:19,950
mind then boy you're in danger and you

00:01:18,659 --> 00:01:21,360
should better start praying to the

00:01:19,950 --> 00:01:22,920
Almighty to give you the strength and

00:01:21,360 --> 00:01:26,310
endurance on your part to become

00:01:22,920 --> 00:01:29,009
muddling with superhero the first and

00:01:26,310 --> 00:01:31,799
foremost thing to enable translation is

00:01:29,009 --> 00:01:34,110
to tell Jango what is the list of

00:01:31,799 --> 00:01:37,579
languages just support where does that

00:01:34,110 --> 00:01:39,780
find the translation for static data and

00:01:37,579 --> 00:01:41,850
what is the default language it should

00:01:39,780 --> 00:01:43,710
fall back on in case there is no

00:01:41,850 --> 00:01:45,960
translation available for the requested

00:01:43,710 --> 00:01:49,350
language so we'll have a look at the

00:01:45,960 --> 00:01:51,509
settings so we include a bunch of

00:01:49,350 --> 00:01:54,240
settings first is the middleware classes

00:01:51,509 --> 00:01:57,090
we have this special middleware which is

00:01:54,240 --> 00:01:58,710
locale Middleville which is placed just

00:01:57,090 --> 00:02:02,009
after the session middleware and before

00:01:58,710 --> 00:02:03,750
the complemented where the order of the

00:02:02,009 --> 00:02:07,619
middleware is quite important and we

00:02:03,750 --> 00:02:10,020
will see next how it plays a role we

00:02:07,619 --> 00:02:11,670
define the list of languages so in this

00:02:10,020 --> 00:02:12,430
particular example I am supporting

00:02:11,670 --> 00:02:16,329
English

00:02:12,430 --> 00:02:19,450
five Chinese and traditional Chinese we

00:02:16,329 --> 00:02:23,980
also defined some more attributes one of

00:02:19,450 --> 00:02:25,870
them is use i18n which essentially makes

00:02:23,980 --> 00:02:27,730
some optimization to load all the

00:02:25,870 --> 00:02:30,219
internationalisation machinery that

00:02:27,730 --> 00:02:34,120
helps you in localization

00:02:30,219 --> 00:02:36,129
we make use l10n to true which will help

00:02:34,120 --> 00:02:39,700
you format dates numbers calendars

00:02:36,129 --> 00:02:41,889
according to the current locale we set

00:02:39,700 --> 00:02:44,709
the default language to English in this

00:02:41,889 --> 00:02:49,389
case and then we define the locale parts

00:02:44,709 --> 00:02:51,819
so this is a directory where all your

00:02:49,389 --> 00:02:55,150
static strength translations goes so

00:02:51,819 --> 00:02:57,639
we'll see next how it plays a role but

00:02:55,150 --> 00:02:59,680
first we need to decide how to track the

00:02:57,639 --> 00:03:02,980
language the client wants to communicate

00:02:59,680 --> 00:03:05,919
in so there are different ways to get

00:03:02,980 --> 00:03:07,419
the preference in an HTTP request and in

00:03:05,919 --> 00:03:09,400
order to retrieve the language

00:03:07,419 --> 00:03:11,319
preference from clients request locale

00:03:09,400 --> 00:03:13,000
middleware tries to determine the user's

00:03:11,319 --> 00:03:15,790
language preference by the following

00:03:13,000 --> 00:03:18,190
algorithm so first it would look for

00:03:15,790 --> 00:03:20,560
language prefix in the requested URL so

00:03:18,190 --> 00:03:24,159
for example if usually /e and slash a

00:03:20,560 --> 00:03:27,220
slash resource in stands for the

00:03:24,159 --> 00:03:29,889
language goal and this is only performed

00:03:27,220 --> 00:03:32,139
when you're using i18n patterns function

00:03:29,889 --> 00:03:34,060
in your route your account failing that

00:03:32,139 --> 00:03:36,699
it looks for the language session key in

00:03:34,060 --> 00:03:38,590
the current user session fading that it

00:03:36,699 --> 00:03:41,739
looks for a cookie the name of the

00:03:38,590 --> 00:03:44,829
cookie used is set by the language

00:03:41,739 --> 00:03:47,439
cookie name setting the default the

00:03:44,829 --> 00:03:48,939
default name is Django language failing

00:03:47,439 --> 00:03:51,370
that it looks for the accept language

00:03:48,939 --> 00:03:53,560
HTTP header this header is sent by your

00:03:51,370 --> 00:03:55,479
browser and tells the server which

00:03:53,560 --> 00:03:58,449
languages you prefer in order of

00:03:55,479 --> 00:04:00,970
priority Django will try each language

00:03:58,449 --> 00:04:03,939
in the header until it finds one with

00:04:00,970 --> 00:04:07,030
the available translations for the rest

00:04:03,939 --> 00:04:09,659
API I personally have found the accept

00:04:07,030 --> 00:04:12,430
language header a much cleaner way to

00:04:09,659 --> 00:04:15,069
accomplish the task and for enabling

00:04:12,430 --> 00:04:17,739
multiple languages for the admin panel

00:04:15,069 --> 00:04:20,169
routes since it's a get request will

00:04:17,739 --> 00:04:22,060
prefer having I 18 end patterns function

00:04:20,169 --> 00:04:25,510
and modify the route your account

00:04:22,060 --> 00:04:28,570
as shown here so all we say is like we

00:04:25,510 --> 00:04:31,110
describe the URL here and we just wrap

00:04:28,570 --> 00:04:34,570
it up in the i18n patterns function so

00:04:31,110 --> 00:04:36,550
once we do this the iodine and patterns

00:04:34,570 --> 00:04:39,730
will automatically prepend the current

00:04:36,550 --> 00:04:41,560
active language code to all the old

00:04:39,730 --> 00:04:44,070
patterns defined within the iodine

00:04:41,560 --> 00:04:46,419
patterns function so all your admin urls

00:04:44,070 --> 00:04:49,030
with the current configuration having

00:04:46,419 --> 00:04:51,910
set its e in and E inactivated will have

00:04:49,030 --> 00:04:55,810
the URLs as shown here so the start here

00:04:51,910 --> 00:04:58,360
indicates that anything can come over as

00:04:55,810 --> 00:04:59,650
a suffix so for whatever language you

00:04:58,360 --> 00:05:01,930
want the Adhan panel to be accessible

00:04:59,650 --> 00:05:03,490
the use of corresponding language code

00:05:01,930 --> 00:05:07,600
in the URL can help you in accessing

00:05:03,490 --> 00:05:10,180
that this is also flag which is known as

00:05:07,600 --> 00:05:13,389
prefix default language once it is set

00:05:10,180 --> 00:05:16,389
to false the default language code will

00:05:13,389 --> 00:05:18,370
not be prepend 'add so and you can

00:05:16,389 --> 00:05:21,820
access the admin route add just slash

00:05:18,370 --> 00:05:25,210
admin although you can do this to all

00:05:21,820 --> 00:05:26,680
the URLs but for the API endpoints we

00:05:25,210 --> 00:05:32,220
prefer to supply this bit of information

00:05:26,680 --> 00:05:35,560
in accept language HTTP header so got us

00:05:32,220 --> 00:05:37,419
throughout this talk I'll go through

00:05:35,560 --> 00:05:40,600
some of the gotcha moments which I

00:05:37,419 --> 00:05:43,690
personally felt a bit annoying like I

00:05:40,600 --> 00:05:46,330
was completely banging my head so we'll

00:05:43,690 --> 00:05:48,100
see the local middleware should always

00:05:46,330 --> 00:05:50,650
come before the common middleware and

00:05:48,100 --> 00:05:53,950
after this session middleware and why is

00:05:50,650 --> 00:05:56,500
that because as we see in the HTTP

00:05:53,950 --> 00:05:58,389
request how how do you pass the HTTP

00:05:56,500 --> 00:06:00,789
request then the session middle will

00:05:58,389 --> 00:06:02,650
would first set the language code in the

00:06:00,789 --> 00:06:04,240
cookie if we are using that particular

00:06:02,650 --> 00:06:07,600
method and then only the local

00:06:04,240 --> 00:06:08,919
middleware can at the local middleware

00:06:07,600 --> 00:06:12,789
could actually process that information

00:06:08,919 --> 00:06:15,240
and take the language code from there so

00:06:12,789 --> 00:06:18,039
what does the local middle help with

00:06:15,240 --> 00:06:21,370
it's a secret sauce in the translation

00:06:18,039 --> 00:06:23,590
machinery let's have a look at the

00:06:21,370 --> 00:06:26,410
Django's request response cycle to

00:06:23,590 --> 00:06:28,840
understand it in a better way

00:06:26,410 --> 00:06:30,849
it is the following for the request part

00:06:28,840 --> 00:06:33,310
it passes it and decides what

00:06:30,849 --> 00:06:35,260
translation object to install in the

00:06:33,310 --> 00:06:37,240
current thread context

00:06:35,260 --> 00:06:40,060
for the response part it does two things

00:06:37,240 --> 00:06:42,340
so first of all it will set the content

00:06:40,060 --> 00:06:44,980
language header in the response for

00:06:42,340 --> 00:06:48,370
decline to know what language is used in

00:06:44,980 --> 00:06:50,170
the response so for example if a client

00:06:48,370 --> 00:06:52,810
is requesting German language but we do

00:06:50,170 --> 00:06:55,090
not support German in this example then

00:06:52,810 --> 00:06:57,220
the default fallback will be on English

00:06:55,090 --> 00:06:58,660
and in the content language I did we say

00:06:57,220 --> 00:07:01,420
that this particular response is in

00:06:58,660 --> 00:07:03,730
English and the second thing it does is

00:07:01,420 --> 00:07:06,130
it formats the URL with activated

00:07:03,730 --> 00:07:09,100
language if the i18n patterns function

00:07:06,130 --> 00:07:12,880
is used so it will say slash e'en slash

00:07:09,100 --> 00:07:15,550
whatever so the question is what to

00:07:12,880 --> 00:07:17,830
translate majorly there are two kinds of

00:07:15,550 --> 00:07:20,500
data so one is the static data which

00:07:17,830 --> 00:07:23,560
will include all the model names field

00:07:20,500 --> 00:07:25,810
name of models error messages that will

00:07:23,560 --> 00:07:26,770
be starting in the application when we

00:07:25,810 --> 00:07:30,400
come to dynamic data

00:07:26,770 --> 00:07:32,910
it essentially includes the field value

00:07:30,400 --> 00:07:36,370
in models that will be input by the user

00:07:32,910 --> 00:07:38,320
so for static strings we would need

00:07:36,370 --> 00:07:42,430
model names field names error messages

00:07:38,320 --> 00:07:44,980
and we use them in many places in Django

00:07:42,430 --> 00:07:48,130
templates all our code files

00:07:44,980 --> 00:07:50,530
the models are py and let's see how we

00:07:48,130 --> 00:07:53,200
support those translation in all those

00:07:50,530 --> 00:07:55,510
places so anything that should be

00:07:53,200 --> 00:07:59,050
translated in templates should be marked

00:07:55,510 --> 00:08:01,270
with either trans or trans block tag to

00:07:59,050 --> 00:08:03,790
make the translation work there is one

00:08:01,270 --> 00:08:06,310
more thing to take care of and datas

00:08:03,790 --> 00:08:09,730
loading the internationalization i18n

00:08:06,310 --> 00:08:12,790
tag at the top of every file that uses

00:08:09,730 --> 00:08:15,340
transfer block cards so let's see it in

00:08:12,790 --> 00:08:17,470
action I have a dummy page which say

00:08:15,340 --> 00:08:20,500
sign up it includes a username and

00:08:17,470 --> 00:08:23,500
password label and have a input for

00:08:20,500 --> 00:08:27,010
username and password pretty simple now

00:08:23,500 --> 00:08:32,770
how do I make internationalization and

00:08:27,010 --> 00:08:34,870
localization here so I include to enable

00:08:32,770 --> 00:08:37,599
the translation and serve the static

00:08:34,870 --> 00:08:39,790
page I will first load the translation

00:08:37,599 --> 00:08:42,190
tag and mark all this stuff with

00:08:39,790 --> 00:08:45,430
translation so I've included the i18n

00:08:42,190 --> 00:08:47,590
tags now I'll for the all the static

00:08:45,430 --> 00:08:49,750
strings I mark them with the trans tag

00:08:47,590 --> 00:08:52,060
I said sign up user name and password

00:08:49,750 --> 00:08:54,310
are marked for translation if there are

00:08:52,060 --> 00:08:56,200
translation available then please go

00:08:54,310 --> 00:09:00,670
ahead and replace these with those

00:08:56,200 --> 00:09:02,890
static translations gotcha - the i18n

00:09:00,670 --> 00:09:05,710
tag should be loaded in every file even

00:09:02,890 --> 00:09:07,540
if it extends other file that already

00:09:05,710 --> 00:09:10,720
has it loaded now this particular thing

00:09:07,540 --> 00:09:13,870
can leave you bizarre like always

00:09:10,720 --> 00:09:16,270
remember to include IIT intake at top of

00:09:13,870 --> 00:09:19,780
all the templates that uses translation

00:09:16,270 --> 00:09:21,580
if you don't do it you'll keep like you

00:09:19,780 --> 00:09:24,520
you'll keep pulling out your hair some

00:09:21,580 --> 00:09:27,580
wondering what happened but it won't

00:09:24,520 --> 00:09:29,770
work so let's discuss about how to

00:09:27,580 --> 00:09:33,130
support translations and all dot py

00:09:29,770 --> 00:09:36,580
files so we'll talk about models so I

00:09:33,130 --> 00:09:39,460
have this user model here which has the

00:09:36,580 --> 00:09:41,650
verbose name defined with the you get

00:09:39,460 --> 00:09:43,300
text lazy function so if you see the

00:09:41,650 --> 00:09:45,700
import at the top of the file

00:09:43,300 --> 00:09:47,560
it's from Django Tour Tootles or

00:09:45,700 --> 00:09:50,620
translation import you get text lazy at

00:09:47,560 --> 00:09:53,190
underscore and all the verbose name

00:09:50,620 --> 00:09:56,530
property are marked with you get X lazy

00:09:53,190 --> 00:09:59,200
so wherever they occur in your CMS or

00:09:56,530 --> 00:10:02,890
whatever the translation so they picked

00:09:59,200 --> 00:10:05,320
up so both you get text and you get X

00:10:02,890 --> 00:10:07,720
lazy are just Python objects that are

00:10:05,320 --> 00:10:10,810
evaluated to strength at different times

00:10:07,720 --> 00:10:13,050
so the string representation depends on

00:10:10,810 --> 00:10:16,420
whichever language is being activated

00:10:13,050 --> 00:10:22,210
let's see how let's see the it in action

00:10:16,420 --> 00:10:24,010
so I imported you get text and then I

00:10:22,210 --> 00:10:26,440
imported a bunch of utility functions

00:10:24,010 --> 00:10:27,430
activate and get language here so first

00:10:26,440 --> 00:10:30,160
of all I do

00:10:27,430 --> 00:10:32,230
activate Ian's so I activated English

00:10:30,160 --> 00:10:34,810
language just to make sure that it

00:10:32,230 --> 00:10:36,820
worked I use the get language function

00:10:34,810 --> 00:10:39,580
to know that okay English is activated

00:10:36,820 --> 00:10:41,350
then I called you get text for sign up

00:10:39,580 --> 00:10:43,480
and since the translation was there I

00:10:41,350 --> 00:10:46,510
get the English representation similarly

00:10:43,480 --> 00:10:49,180
I did it for simplified Chinese so I

00:10:46,510 --> 00:10:51,610
activated it I try to get language and

00:10:49,180 --> 00:10:53,860
then I try to get the translation

00:10:51,610 --> 00:10:59,680
we'll see where do we actually put those

00:10:53,860 --> 00:11:01,410
static string translations later so the

00:10:59,680 --> 00:11:04,680
idea is like

00:11:01,410 --> 00:11:06,449
how do we decide which one to use should

00:11:04,680 --> 00:11:09,449
we use yoga text or should we use you

00:11:06,449 --> 00:11:12,360
greater sleazy well if you need

00:11:09,449 --> 00:11:15,720
immediate evaluation of the translation

00:11:12,360 --> 00:11:17,670
then always use you get text for example

00:11:15,720 --> 00:11:19,529
in all your views or py file because

00:11:17,670 --> 00:11:22,430
once the request is coming in you need

00:11:19,529 --> 00:11:27,149
immediate evaluation so use UK text and

00:11:22,430 --> 00:11:28,800
use UK takes lazy in for lazy

00:11:27,149 --> 00:11:34,529
referencing this thing object for

00:11:28,800 --> 00:11:37,410
example in your models or py so now that

00:11:34,529 --> 00:11:39,389
we have all the static data marked with

00:11:37,410 --> 00:11:41,610
trance tag you get text and you get ex

00:11:39,389 --> 00:11:43,680
lazy methods it's time to generate the

00:11:41,610 --> 00:11:46,620
translation files and fill in the

00:11:43,680 --> 00:11:49,230
translations so all the translations

00:11:46,620 --> 00:11:52,649
goes in Jango dot Pio file Pio stands

00:11:49,230 --> 00:11:54,360
for portable object format and for

00:11:52,649 --> 00:11:56,220
generating the Jango dot Pio file for

00:11:54,360 --> 00:11:58,259
simplified Chinese we'll run the

00:11:56,220 --> 00:12:01,079
following management command will say

00:11:58,259 --> 00:12:02,819
Python managed or py meek messages now

00:12:01,079 --> 00:12:06,569
we give a flag which is minus L

00:12:02,819 --> 00:12:09,449
indicating the language code once we do

00:12:06,569 --> 00:12:12,829
this we'll see something like this in

00:12:09,449 --> 00:12:15,180
our project directory there would be a

00:12:12,829 --> 00:12:16,819
folder named as locales so if you

00:12:15,180 --> 00:12:19,589
remember in these settings we already

00:12:16,819 --> 00:12:23,069
mentioned that what is the path of the

00:12:19,589 --> 00:12:25,670
locale folder so this is how it comes

00:12:23,069 --> 00:12:30,269
into play so we have locale folder

00:12:25,670 --> 00:12:32,339
inside that we have this ghcn folder

00:12:30,269 --> 00:12:35,310
defined because we just executed the

00:12:32,339 --> 00:12:37,889
command inside it we get locale messages

00:12:35,310 --> 00:12:41,730
directory and inside it we get the

00:12:37,889 --> 00:12:43,199
Django door to your file done now if we

00:12:41,730 --> 00:12:43,589
have a look at the jungle door to your

00:12:43,199 --> 00:12:47,850
file

00:12:43,589 --> 00:12:51,899
considering the static template that was

00:12:47,850 --> 00:12:54,360
shown earlier the signup page will have

00:12:51,899 --> 00:12:56,220
something like this so this is

00:12:54,360 --> 00:13:00,059
automatically generated by Django

00:12:56,220 --> 00:13:01,800
it has message ID and message STR so

00:13:00,059 --> 00:13:05,040
message ID is the text marked for

00:13:01,800 --> 00:13:07,470
translation and the message STR is its

00:13:05,040 --> 00:13:09,209
translated form you have to do this for

00:13:07,470 --> 00:13:11,699
all the languages that you want to

00:13:09,209 --> 00:13:13,319
support and for each respective language

00:13:11,699 --> 00:13:14,260
there would be a different Django dot P

00:13:13,319 --> 00:13:18,140
or file

00:13:14,260 --> 00:13:20,630
so let's fill in this for the Chinese

00:13:18,140 --> 00:13:26,500
language so once I fill this in I'll get

00:13:20,630 --> 00:13:29,480
something like this and so far so good

00:13:26,500 --> 00:13:31,370
gotcha for while running the make

00:13:29,480 --> 00:13:38,029
messages command if you have the virtual

00:13:31,370 --> 00:13:41,770
environment placed in your in your inner

00:13:38,029 --> 00:13:46,279
in your in the route Jango directory

00:13:41,770 --> 00:13:48,260
then it it would kind of try to generate

00:13:46,279 --> 00:13:50,540
Django or Pio files for all the packages

00:13:48,260 --> 00:13:52,610
that are in virtual environment so don't

00:13:50,540 --> 00:13:55,430
make this mistake pace of virtual iment

00:13:52,610 --> 00:13:57,440
out of your Django project and this

00:13:55,430 --> 00:13:59,899
might not seem as a big problem right

00:13:57,440 --> 00:14:06,200
now but we will see how it can be

00:13:59,899 --> 00:14:07,399
potentially very big problem so now this

00:14:06,200 --> 00:14:09,740
is the crux of the whole presentation

00:14:07,399 --> 00:14:14,240
which took me like three days to figure

00:14:09,740 --> 00:14:16,190
it out I was banging my head like III

00:14:14,240 --> 00:14:18,290
kept on reading the documentation I

00:14:16,190 --> 00:14:20,839
really like okay let's see let's see if

00:14:18,290 --> 00:14:23,390
it's not working why is it so so notice

00:14:20,839 --> 00:14:26,540
that when you mention the language and

00:14:23,390 --> 00:14:28,640
settings you do it by language name so

00:14:26,540 --> 00:14:30,680
in this case we have Z H which stands

00:14:28,640 --> 00:14:33,709
for Chinese and C n for simplified

00:14:30,680 --> 00:14:37,190
Chinese and this is all in lowercase

00:14:33,709 --> 00:14:39,890
separated by - but when you did this in

00:14:37,190 --> 00:14:43,580
make messages command you used local

00:14:39,890 --> 00:14:47,450
name which was Z H underscore CN so CN

00:14:43,580 --> 00:14:50,330
is the region and it's it's it should be

00:14:47,450 --> 00:14:52,970
in caps separated by an underscore if

00:14:50,330 --> 00:14:55,850
you make a mistake here you won't see

00:14:52,970 --> 00:14:57,890
any error and your translations won't

00:14:55,850 --> 00:14:58,850
work either there is a small cave it

00:14:57,890 --> 00:15:01,279
there's a small line in the

00:14:58,850 --> 00:15:06,040
documentation with chase this is how you

00:15:01,279 --> 00:15:10,250
should do it so take care hell and yeah

00:15:06,040 --> 00:15:12,620
so we have defined all the satisfying

00:15:10,250 --> 00:15:14,589
translations and now we will see how to

00:15:12,620 --> 00:15:17,149
compile these static stream translations

00:15:14,589 --> 00:15:19,700
will run the command Python - or py

00:15:17,149 --> 00:15:23,329
compiled messages and as soon as we do

00:15:19,700 --> 00:15:25,250
that this will generate Django dot Emma

00:15:23,329 --> 00:15:28,130
files corresponding to all the Django

00:15:25,250 --> 00:15:30,440
dot po5 Satar there Django

00:15:28,130 --> 00:15:33,380
the mo file stands for machine readable

00:15:30,440 --> 00:15:35,360
object as soon so as soon as this is

00:15:33,380 --> 00:15:36,649
generated Jango can quickly pick it up

00:15:35,360 --> 00:15:40,490
and show these are texturing

00:15:36,649 --> 00:15:42,050
translations gotcha six the compiled

00:15:40,490 --> 00:15:44,089
messages command would generate the

00:15:42,050 --> 00:15:45,889
Jango demo files for every package in a

00:15:44,089 --> 00:15:49,610
virtual moment if it is in the root

00:15:45,889 --> 00:15:51,889
directory of your project so I made this

00:15:49,610 --> 00:15:55,279
mistake I had the virtual mount inside

00:15:51,889 --> 00:15:58,250
my root directory and then once I ran

00:15:55,279 --> 00:16:00,560
the compiled messages command it was

00:15:58,250 --> 00:16:04,279
failing and I was like why is it failing

00:16:00,560 --> 00:16:06,949
so I I threw the trees back I realized

00:16:04,279 --> 00:16:09,920
that okay this was particularly some

00:16:06,949 --> 00:16:12,889
other external package and it was trying

00:16:09,920 --> 00:16:15,529
to generate the django demo files for

00:16:12,889 --> 00:16:19,670
the packages data in my virtual element

00:16:15,529 --> 00:16:21,500
so gotcha seven always restart the

00:16:19,670 --> 00:16:25,300
Whiskey server after compiled messages

00:16:21,500 --> 00:16:27,410
otherwise the translations won't work so

00:16:25,300 --> 00:16:29,750
let's go on to the dynamic link

00:16:27,410 --> 00:16:31,850
translations so most of the data in our

00:16:29,750 --> 00:16:34,100
django application is dynamic and user

00:16:31,850 --> 00:16:37,339
generated we can employ two approaches

00:16:34,100 --> 00:16:41,209
in supporting translations so first is

00:16:37,339 --> 00:16:43,790
like enable the end user to enter

00:16:41,209 --> 00:16:47,509
information in multiple languages so we

00:16:43,790 --> 00:16:50,180
have to take care of how do we make the

00:16:47,509 --> 00:16:52,279
changes in the database for this and the

00:16:50,180 --> 00:16:54,649
second one is like translating the

00:16:52,279 --> 00:16:56,079
dynamic text using third-party services

00:16:54,649 --> 00:16:58,339
such as transifex

00:16:56,079 --> 00:16:59,959
so transifex is nothing it's a third

00:16:58,339 --> 00:17:03,860
party service you just dump all your

00:16:59,959 --> 00:17:06,140
data and there are actual translators in

00:17:03,860 --> 00:17:07,850
place which translate it and gives all

00:17:06,140 --> 00:17:10,159
the data back through Web book which you

00:17:07,850 --> 00:17:11,750
can store it so we'll just see the first

00:17:10,159 --> 00:17:14,839
approach because the second approach is

00:17:11,750 --> 00:17:17,299
dependent on the first one so let's do

00:17:14,839 --> 00:17:20,059
it for the model fields so the tricky

00:17:17,299 --> 00:17:22,720
part begins here now you want to support

00:17:20,059 --> 00:17:25,490
multilingual data in your databases and

00:17:22,720 --> 00:17:26,990
let's assume that the user can input in

00:17:25,490 --> 00:17:29,390
just two languages say Chinese and

00:17:26,990 --> 00:17:31,120
English for simplicity and we can use

00:17:29,390 --> 00:17:34,490
the Django model translation package

00:17:31,120 --> 00:17:36,290
here which will create columns for each

00:17:34,490 --> 00:17:38,780
of the attributes title map for

00:17:36,290 --> 00:17:40,010
translations if you see this code this

00:17:38,780 --> 00:17:42,470
is very similar to what you

00:17:40,010 --> 00:17:45,200
for Django admin for any data model in

00:17:42,470 --> 00:17:47,690
your app so you just say that I want to

00:17:45,200 --> 00:17:49,550
translate first name and last name in

00:17:47,690 --> 00:17:52,520
whatever languages I have defined in the

00:17:49,550 --> 00:17:55,430
settings as soon as you do that and you

00:17:52,520 --> 00:17:57,380
if you see these sequel behind it it is

00:17:55,430 --> 00:17:59,120
something like this so here the first

00:17:57,380 --> 00:18:01,040
name is the default field that was

00:17:59,120 --> 00:18:02,450
defined on the model and which tends to

00:18:01,040 --> 00:18:03,860
store and retrieve the value of the

00:18:02,450 --> 00:18:06,140
first name for the default language set

00:18:03,860 --> 00:18:08,480
in design or Django app which is English

00:18:06,140 --> 00:18:11,030
in this case and for each subsequent

00:18:08,480 --> 00:18:13,490
language data Django project supports a

00:18:11,030 --> 00:18:15,230
new field with the same name of pairs

00:18:13,490 --> 00:18:17,600
affixed with the language code it is

00:18:15,230 --> 00:18:19,280
created so it is first name underscores

00:18:17,600 --> 00:18:22,340
edits and to go see and for simplified

00:18:19,280 --> 00:18:24,760
Chinese version so what if you don't

00:18:22,340 --> 00:18:27,830
want to burden your user with adding

00:18:24,760 --> 00:18:29,540
information in multiple languages you

00:18:27,830 --> 00:18:30,260
can use a third-party service such as

00:18:29,540 --> 00:18:32,240
transifex

00:18:30,260 --> 00:18:36,470
for all the incoming data as we

00:18:32,240 --> 00:18:38,870
discussed so since you all are still

00:18:36,470 --> 00:18:40,580
here full of energy here are some bonus

00:18:38,870 --> 00:18:44,290
tips and tricks for internationalization

00:18:40,580 --> 00:18:44,290
and debugging translation issues for you

00:18:45,100 --> 00:18:50,050
we we discussed that the request

00:18:47,750 --> 00:18:52,460
response cycle exactly knows which

00:18:50,050 --> 00:18:55,520
language is being requested by the

00:18:52,460 --> 00:18:58,040
client but what if you are using async

00:18:55,520 --> 00:19:00,290
tasks such as the celery cue how does

00:18:58,040 --> 00:19:03,950
your async task know what language was

00:19:00,290 --> 00:19:06,370
there when it was called so whenever the

00:19:03,950 --> 00:19:09,310
async task is called the caller should

00:19:06,370 --> 00:19:11,390
supply the info for the language

00:19:09,310 --> 00:19:14,390
otherwise we'll have the default

00:19:11,390 --> 00:19:16,010
language already set so I have this send

00:19:14,390 --> 00:19:17,990
company registration email task here

00:19:16,010 --> 00:19:19,490
where I have to find the default

00:19:17,990 --> 00:19:22,070
language code will be in Chinese because

00:19:19,490 --> 00:19:24,830
this was the Chinese are so in case like

00:19:22,070 --> 00:19:26,750
if a user is requesting English this

00:19:24,830 --> 00:19:30,380
should be overwrite or once the caller

00:19:26,750 --> 00:19:31,580
is calling this particular task so this

00:19:30,380 --> 00:19:34,220
is service function which is being

00:19:31,580 --> 00:19:36,380
called by the task and it accepts the

00:19:34,220 --> 00:19:38,300
language code so what it does is it

00:19:36,380 --> 00:19:40,010
first of all activates the language code

00:19:38,300 --> 00:19:41,300
so that whenever the template is

00:19:40,010 --> 00:19:46,040
rendered it is rendered in that

00:19:41,300 --> 00:19:48,980
particular language secondly it in the

00:19:46,040 --> 00:19:52,669
context itself it populates all the urls

00:19:48,980 --> 00:19:55,279
that should be the

00:19:52,669 --> 00:19:57,679
that should be exactly matching the same

00:19:55,279 --> 00:20:00,080
language code that was in the request so

00:19:57,679 --> 00:20:04,580
we use something known as translate URL

00:20:00,080 --> 00:20:06,739
here we give give it the URL as well as

00:20:04,580 --> 00:20:08,749
the language code so this language code

00:20:06,739 --> 00:20:11,330
right in the parameter goes here and

00:20:08,749 --> 00:20:13,039
then it knows like if it is the Chinese

00:20:11,330 --> 00:20:15,980
version of the template the URL also

00:20:13,039 --> 00:20:18,669
points to the Chinese version which is

00:20:15,980 --> 00:20:21,889
through the iodine and patterns function

00:20:18,669 --> 00:20:24,679
so what happens when you switch language

00:20:21,889 --> 00:20:27,710
in templates so we have something known

00:20:24,679 --> 00:20:32,119
as get current language we use that and

00:20:27,710 --> 00:20:35,929
we get the language code here so assume

00:20:32,119 --> 00:20:37,999
that this page in Chinese so will get

00:20:35,929 --> 00:20:40,340
the welcome to our page message in

00:20:37,999 --> 00:20:43,220
Chinese but for the second block which

00:20:40,340 --> 00:20:46,820
is this one we have overridden it and

00:20:43,220 --> 00:20:48,739
said that okay we have used language en

00:20:46,820 --> 00:20:50,779
and said that okay this particular block

00:20:48,739 --> 00:20:52,549
should overwrite the English language so

00:20:50,779 --> 00:20:54,440
even if this particular page is in

00:20:52,549 --> 00:20:56,720
Chinese the first message will be in

00:20:54,440 --> 00:20:59,629
Chinese but the second one the welcome

00:20:56,720 --> 00:21:01,639
to our page will be in English because

00:20:59,629 --> 00:21:05,269
we have used the language template tag

00:21:01,639 --> 00:21:07,730
to override AK now how do we support

00:21:05,269 --> 00:21:09,440
multiple languages in templates so

00:21:07,730 --> 00:21:11,629
assume that you have a website and you

00:21:09,440 --> 00:21:13,879
want to display like we support these

00:21:11,629 --> 00:21:16,700
many languages and you just click on the

00:21:13,879 --> 00:21:19,999
link and it will redirect you to the

00:21:16,700 --> 00:21:23,059
particular lang particular website that

00:21:19,999 --> 00:21:24,889
supports our language so if you

00:21:23,059 --> 00:21:26,869
localized urals get reversed in

00:21:24,889 --> 00:21:29,899
templates they always use the current

00:21:26,869 --> 00:21:32,929
language this is very important and to

00:21:29,899 --> 00:21:35,119
link to a URL in another language we use

00:21:32,929 --> 00:21:36,980
the language template tag it enables the

00:21:35,119 --> 00:21:39,350
given language in the enclosed template

00:21:36,980 --> 00:21:42,230
section as shown we use the gate

00:21:39,350 --> 00:21:46,249
available languages we get them in the

00:21:42,230 --> 00:21:47,989
languages variable we can then iterate

00:21:46,249 --> 00:21:51,350
on it and we get the language code a

00:21:47,989 --> 00:21:54,259
language name as shown in the previous

00:21:51,350 --> 00:21:55,879
one we just override the language code

00:21:54,259 --> 00:21:58,190
with the help of the language template

00:21:55,879 --> 00:22:01,480
tag and as soon as we do that we just

00:21:58,190 --> 00:22:04,820
keep onto entering the links that's it

00:22:01,480 --> 00:22:06,110
gotcha it check in the Django shell if

00:22:04,820 --> 00:22:08,870
the translations are work

00:22:06,110 --> 00:22:11,120
with activate and you get text we

00:22:08,870 --> 00:22:13,220
already discussed it you can just

00:22:11,120 --> 00:22:15,020
activate a language get a you get text

00:22:13,220 --> 00:22:16,870
representation so that you know if it is

00:22:15,020 --> 00:22:20,059
working or not

00:22:16,870 --> 00:22:22,580
Gaussian 9 so some strings are still not

00:22:20,059 --> 00:22:24,950
being translated if you go in your

00:22:22,580 --> 00:22:27,740
Django dot Pio files they would have

00:22:24,950 --> 00:22:31,040
been marked as fuzzy so these are

00:22:27,740 --> 00:22:35,270
particularly strings dad django magnus

00:22:31,040 --> 00:22:37,100
fuzzy because they want your translator

00:22:35,270 --> 00:22:38,780
to have a second look at it once you're

00:22:37,100 --> 00:22:41,169
sure that the translation is perfect

00:22:38,780 --> 00:22:43,429
then you can remove that fuzzy line and

00:22:41,169 --> 00:22:47,270
compile the messages again and the

00:22:43,429 --> 00:22:49,790
translation would work so conclusion

00:22:47,270 --> 00:22:52,250
Django's translation support is indeed

00:22:49,790 --> 00:22:54,350
very powerful but the initial setup

00:22:52,250 --> 00:22:56,990
becomes a lot of pain due to simple

00:22:54,350 --> 00:22:58,760
gotcha moments which we discussed and it

00:22:56,990 --> 00:23:01,130
can potentially cause a lot of headaches

00:22:58,760 --> 00:23:03,169
and sometimes pulling out your hair the

00:23:01,130 --> 00:23:05,000
more early you support your project in

00:23:03,169 --> 00:23:08,660
different languages and write the code

00:23:05,000 --> 00:23:10,540
correctly the easier it would be in the

00:23:08,660 --> 00:23:13,520
future to support multiple languages oh

00:23:10,540 --> 00:23:14,960
do you know something you just became a

00:23:13,520 --> 00:23:16,190
multilingual superhero with apps

00:23:14,960 --> 00:23:20,929
supporting multiple languages

00:23:16,190 --> 00:23:23,030
congratulations so I'm also writing this

00:23:20,929 --> 00:23:24,860
book which is leveling up your Python

00:23:23,030 --> 00:23:26,660
skills it would be a free and open

00:23:24,860 --> 00:23:30,650
source book the alpha version should be

00:23:26,660 --> 00:23:33,410
live til mean 2019 you can subscribe to

00:23:30,650 --> 00:23:37,309
updates if you want and I'll be

00:23:33,410 --> 00:23:39,500
available on these platforms you would

00:23:37,309 --> 00:23:42,590
find the articles on multiple lingual

00:23:39,500 --> 00:23:45,350
translations on my medium and here's my

00:23:42,590 --> 00:23:49,690
mail here's my code mentor ID github and

00:23:45,350 --> 00:23:49,690
Twitter share love thank you

00:23:52,460 --> 00:23:58,520
so when you there was a stuff that you

00:23:55,250 --> 00:24:01,160
ran to auto-generate the strings that

00:23:58,520 --> 00:24:04,370
needed to be translated and that was for

00:24:01,160 --> 00:24:06,710
the particular locale correct what

00:24:04,370 --> 00:24:08,299
happens if you change some screens and

00:24:06,710 --> 00:24:10,780
you add some strings later does it

00:24:08,299 --> 00:24:13,450
overwrite the entire file does it like

00:24:10,780 --> 00:24:16,250
keep the strings that are already around

00:24:13,450 --> 00:24:19,760
so Django is particularly very smart

00:24:16,250 --> 00:24:22,670
around that concept so say I ran

00:24:19,760 --> 00:24:24,650
the file at a particular instance and it

00:24:22,670 --> 00:24:26,840
includes say three strings for static

00:24:24,650 --> 00:24:28,760
translation then at later point of time

00:24:26,840 --> 00:24:32,330
I included more strings and then

00:24:28,760 --> 00:24:34,220
whenever I write whenever I run that

00:24:32,330 --> 00:24:36,440
particular command again it won't

00:24:34,220 --> 00:24:40,580
override it but it would include all

00:24:36,440 --> 00:24:43,190
those things and at each of this step in

00:24:40,580 --> 00:24:45,020
the comments it also mentioned the line

00:24:43,190 --> 00:24:46,820
number and the file at which the

00:24:45,020 --> 00:24:48,830
particular translation occurs so it

00:24:46,820 --> 00:24:51,090
would it would check that and it would

00:24:48,830 --> 00:24:56,810
override that if it is needed thank you

00:24:51,090 --> 00:24:56,810

YouTube URL: https://www.youtube.com/watch?v=aiZ_1gsS4F8


