Title: DjangoCon US 2018 - ORM: The Sequel by Katie McLaughlin
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - ORM: The Sequel by Katie McLaughlin

Django tutorials often use the perspective of a complete newcomer to Python and web development, and while they provide a good practical on-ramp for brand new developers, they are often not quite right for developers from other backgrounds.

The common backbone of MVC development, no matter the base language, is the database and the language specifically for itâ€™s manipulation: Structured Query Language (SQL). But Django hides this behind itâ€™s amazing drawcard, the Object Relational Model (ORM).

But how can a developer already familiar with SQL get a handle on the ORM?

This talk endeavours to introduce the ORM using shared SQL and relational database concepts, showcasing the features the ORM uses to make database querying and manipulation a joy, rather than a burden, to the polyglot developer.

This talk was presented at: https://2018.djangocon.us/talk/orm-the-sequel/

LINKS:
Follow Katie McLaughlin ðŸ‘‡
On Twitter: https://twitter.com/glasnt

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,410 --> 00:00:22,350
hi I'm Katie I'm a site reliability

00:00:18,810 --> 00:00:24,240
engineer at D vo we do hosted Jango as a

00:00:22,350 --> 00:00:25,650
service if that sort of thing sounds

00:00:24,240 --> 00:00:28,740
interesting to you come talk to me

00:00:25,650 --> 00:00:30,960
afterwards um and as Russell said I do a

00:00:28,740 --> 00:00:34,350
lot of things around Jango but I'm not

00:00:30,960 --> 00:00:37,110
currently a Jango developer I still look

00:00:34,350 --> 00:00:41,070
at the odd Django admin page and go oh

00:00:37,110 --> 00:00:43,620
my gosh this is so cool I can just go in

00:00:41,070 --> 00:00:46,050
here and I can see my records and I can

00:00:43,620 --> 00:00:49,680
go and edit them and my day is made

00:00:46,050 --> 00:00:51,989
easier but the more I learn about Django

00:00:49,680 --> 00:00:56,340
the more I understand how the admin

00:00:51,989 --> 00:00:59,579
works it's powered by the ormm the ORM

00:00:56,340 --> 00:01:01,890
the object relational mapper which

00:00:59,579 --> 00:01:04,769
allows us to interact with our data as

00:01:01,890 --> 00:01:06,960
Python objects now here's where I could

00:01:04,769 --> 00:01:09,600
start teaching you about how the ORM

00:01:06,960 --> 00:01:11,340
works based on abstract thoughts and

00:01:09,600 --> 00:01:14,070
concepts assuming that you know nothing

00:01:11,340 --> 00:01:14,760
about technology but I'm gonna go a

00:01:14,070 --> 00:01:17,820
different way

00:01:14,760 --> 00:01:20,009
you see I might be new to Django but

00:01:17,820 --> 00:01:22,710
I've been in tech for more than a decade

00:01:20,009 --> 00:01:26,009
now and I have an eclectic background

00:01:22,710 --> 00:01:29,369
I've been doing development in various

00:01:26,009 --> 00:01:31,799
languages like Ruby and tassel and power

00:01:29,369 --> 00:01:34,979
shell and Sybase power builder and

00:01:31,799 --> 00:01:36,960
Oracle and all of these things have

00:01:34,979 --> 00:01:38,610
something in common when you're working

00:01:36,960 --> 00:01:42,049
with data you need a database and

00:01:38,610 --> 00:01:45,689
databases mostly have a shared language

00:01:42,049 --> 00:01:48,659
SQL structured query language yes I know

00:01:45,689 --> 00:01:52,110
there's graph QL now but having

00:01:48,659 --> 00:01:54,180
knowledge of how to write SQL is still a

00:01:52,110 --> 00:01:58,110
fundamental skill for developers and it

00:01:54,180 --> 00:02:00,180
will be for a long time and it's a good

00:01:58,110 --> 00:02:03,630
skill to have because it means you have

00:02:00,180 --> 00:02:06,450
a common context in everything context

00:02:03,630 --> 00:02:08,700
is important for a developer coming at a

00:02:06,450 --> 00:02:10,619
problem from a different text Jack being

00:02:08,700 --> 00:02:12,450
able to leverage shared skills is

00:02:10,619 --> 00:02:13,430
fundamental to the able to fast-track

00:02:12,450 --> 00:02:15,950
learning

00:02:13,430 --> 00:02:18,019
so given that this talk is going to go a

00:02:15,950 --> 00:02:20,000
bit differently I'm not going to assume

00:02:18,019 --> 00:02:22,819
that you're a little tiny bird who

00:02:20,000 --> 00:02:25,189
doesn't know a terminal from a graphical

00:02:22,819 --> 00:02:28,340
user interface and we're not going to

00:02:25,189 --> 00:02:30,049
start with a blank project instead we're

00:02:28,340 --> 00:02:33,170
going to jump straight into an existing

00:02:30,049 --> 00:02:35,840
project assuming that you know how to do

00:02:33,170 --> 00:02:39,260
SQL and we're going to go hunting for

00:02:35,840 --> 00:02:41,329
bugs so for our application we're going

00:02:39,260 --> 00:02:45,859
to use something near and dear to my

00:02:41,329 --> 00:02:47,540
heart emoji I I'm giving a talk at a

00:02:45,859 --> 00:02:51,680
django con did you think I wasn't gonna

00:02:47,540 --> 00:02:54,799
mention emoji so here is our sample

00:02:51,680 --> 00:02:58,519
project based on the website emoji PDA

00:02:54,799 --> 00:03:01,280
my version is called Unicode X it's just

00:02:58,519 --> 00:03:03,530
a little tiny Django application that

00:03:01,280 --> 00:03:06,319
shows how emoji appear on different

00:03:03,530 --> 00:03:08,239
platforms so on the front page we can

00:03:06,319 --> 00:03:09,920
see the best sparkles in a unicorn in a

00:03:08,239 --> 00:03:12,709
desert island and if I click on the

00:03:09,920 --> 00:03:15,260
sparkles I can see how the sparkle emoji

00:03:12,709 --> 00:03:17,389
appears on different platforms there are

00:03:15,260 --> 00:03:20,349
a few different versions for Android and

00:03:17,389 --> 00:03:22,910
Apple but as you can see there's a bug

00:03:20,349 --> 00:03:24,500
one of the records here has something

00:03:22,910 --> 00:03:27,560
wrong and the image isn't loading

00:03:24,500 --> 00:03:29,239
properly in our web browser so we could

00:03:27,560 --> 00:03:30,949
jump in and use the admin to work out

00:03:29,239 --> 00:03:32,750
what's going on but instead we're going

00:03:30,949 --> 00:03:34,849
to use something called the Django shell

00:03:32,750 --> 00:03:37,430
the Django shell is a command-line

00:03:34,849 --> 00:03:39,470
interface into your project and a lot of

00:03:37,430 --> 00:03:41,569
my examples today are going to be shown

00:03:39,470 --> 00:03:44,720
using this literal terminal which looks

00:03:41,569 --> 00:03:47,810
a lot like what I use every day which is

00:03:44,720 --> 00:03:50,359
the active term - terminal on Mac OS

00:03:47,810 --> 00:03:52,190
Mojave for those playing at home so to

00:03:50,359 --> 00:03:54,139
get into the Django shell we first need

00:03:52,190 --> 00:03:56,239
to navigate to our project and then

00:03:54,139 --> 00:03:58,430
depending on what your project setup is

00:03:56,239 --> 00:04:00,889
you're going to have to initialize your

00:03:58,430 --> 00:04:03,379
virtual environment setup hip in front a

00:04:00,889 --> 00:04:08,120
docker container and then we're going to

00:04:03,379 --> 00:04:09,979
run manage the pie shell once you run

00:04:08,120 --> 00:04:12,109
that you will get a command-line

00:04:09,979 --> 00:04:14,780
interface into your Django project and

00:04:12,109 --> 00:04:16,989
all we've done here is load the Django

00:04:14,780 --> 00:04:19,789
environment path into this particular

00:04:16,989 --> 00:04:22,729
shell so from here we can interact with

00:04:19,789 --> 00:04:25,550
our Django project directly and the

00:04:22,729 --> 00:04:26,280
shell is pretty powerful but you need to

00:04:25,550 --> 00:04:28,530
understand

00:04:26,280 --> 00:04:32,430
how to call Django and ORM commands in

00:04:28,530 --> 00:04:35,850
order to be able to use it so how would

00:04:32,430 --> 00:04:38,310
I as a database nerd interact with it

00:04:35,850 --> 00:04:41,040
well an unknown system the first thing I

00:04:38,310 --> 00:04:43,650
want to do is find all the tables all of

00:04:41,040 --> 00:04:45,930
them now depending on what flavor of

00:04:43,650 --> 00:04:48,690
database I'm used to I could show tables

00:04:45,930 --> 00:04:51,120
I could select start from DB a dot

00:04:48,690 --> 00:04:54,450
tables but we're not in a database

00:04:51,120 --> 00:04:57,240
console we're in the ORM so to list all

00:04:54,450 --> 00:05:01,020
the tables in a new Django project in

00:04:57,240 --> 00:05:03,390
the RM there's no good way and this is

00:05:01,020 --> 00:05:06,540
what made me get stuck for a little bit

00:05:03,390 --> 00:05:09,030
because I had no idea what was going on

00:05:06,540 --> 00:05:11,700
but turns out I worked it out and now

00:05:09,030 --> 00:05:13,530
I'm gonna tell you in Django you have a

00:05:11,700 --> 00:05:15,720
project and your project has multiple

00:05:13,530 --> 00:05:18,419
applications and each of those can have

00:05:15,720 --> 00:05:21,600
one or more models and the model is the

00:05:18,419 --> 00:05:24,630
powerhouse the ORM manipulates model

00:05:21,600 --> 00:05:26,430
objects but to be able to work out what

00:05:24,630 --> 00:05:28,740
models we have without looking at the

00:05:26,430 --> 00:05:30,419
code because I don't know Django I just

00:05:28,740 --> 00:05:32,910
have a shell I don't know what I'm doing

00:05:30,419 --> 00:05:35,010
I want to be able to somehow get a list

00:05:32,910 --> 00:05:36,630
of all the models so I can import them

00:05:35,010 --> 00:05:39,090
and then start working out what they do

00:05:36,630 --> 00:05:40,770
but thankfully Django is clever and has

00:05:39,090 --> 00:05:43,500
a whole bunch of internal API so that I

00:05:40,770 --> 00:05:46,500
can leverage so what I can do is I can

00:05:43,500 --> 00:05:47,729
use this particular helper script you

00:05:46,500 --> 00:05:49,740
may not understand what it does right

00:05:47,729 --> 00:05:52,050
now but by the end if you go back don't

00:05:49,740 --> 00:05:53,760
make sense all I'm doing is going

00:05:52,050 --> 00:05:55,560
through all the apps of my project and

00:05:53,760 --> 00:05:57,320
for all those apps getting all the

00:05:55,560 --> 00:06:00,240
models and for all those models

00:05:57,320 --> 00:06:02,039
generating an import statement so if I

00:06:00,240 --> 00:06:04,140
go back to my terminal and paste this

00:06:02,039 --> 00:06:06,900
particular code I end up getting a whole

00:06:04,140 --> 00:06:09,510
bunch of useful import statements as a

00:06:06,900 --> 00:06:12,360
new Django developer this is so very

00:06:09,510 --> 00:06:14,370
helpful and by looking at this I can see

00:06:12,360 --> 00:06:16,380
that Django's got a bunch of models

00:06:14,370 --> 00:06:18,419
there and I can also see something

00:06:16,380 --> 00:06:20,130
called Unicode X which matches my

00:06:18,419 --> 00:06:21,720
project name which is really helpful to

00:06:20,130 --> 00:06:23,789
me because that's probably the models

00:06:21,720 --> 00:06:25,860
that I'm most interested in so we can

00:06:23,789 --> 00:06:30,240
see that there's code point vendor

00:06:25,860 --> 00:06:32,130
vendor version and design and because

00:06:30,240 --> 00:06:34,620
I'm interested in the database I want to

00:06:32,130 --> 00:06:38,099
know exactly what these models map to so

00:06:34,620 --> 00:06:40,050
I can use the Django API again and I can

00:06:38,099 --> 00:06:42,539
check for the DB table for my

00:06:40,050 --> 00:06:44,699
particular model to be able to do that I

00:06:42,539 --> 00:06:47,039
first need to go from unicode X dot

00:06:44,699 --> 00:06:48,900
models import code point and then I can

00:06:47,039 --> 00:06:51,720
ask it for the database table in this

00:06:48,900 --> 00:06:53,250
case Unicode x underscore code point we

00:06:51,720 --> 00:06:56,460
are going to be referring to this table

00:06:53,250 --> 00:06:57,900
and similar tables a lot next thing I'd

00:06:56,460 --> 00:07:00,509
want to do is see all the columns in the

00:06:57,900 --> 00:07:04,289
table and I can do that with various

00:07:00,509 --> 00:07:05,699
database things again or instead of the

00:07:04,289 --> 00:07:08,340
other call that I had before which was

00:07:05,699 --> 00:07:10,680
get DB table I can go get fields and I

00:07:08,340 --> 00:07:12,240
can see all the fields against my

00:07:10,680 --> 00:07:15,139
particular table in this case there's an

00:07:12,240 --> 00:07:17,490
ID a name a description and a code point

00:07:15,139 --> 00:07:19,860
so now I know what my database looks

00:07:17,490 --> 00:07:24,389
like now I want to see what's in there

00:07:19,860 --> 00:07:27,569
I want to select star to do that I just

00:07:24,389 --> 00:07:29,430
call objects dot all which gets me a

00:07:27,569 --> 00:07:31,530
list of all the objects that I have and

00:07:29,430 --> 00:07:34,159
it matches what I saw on the home page

00:07:31,530 --> 00:07:36,569
of my project which is really useful and

00:07:34,159 --> 00:07:39,210
good because it means that I'm in the

00:07:36,569 --> 00:07:41,250
right place which is helpful this is

00:07:39,210 --> 00:07:44,219
being returned as a query set which we

00:07:41,250 --> 00:07:46,650
can act on further a cruise set is not a

00:07:44,219 --> 00:07:49,830
list as much as it may look like a list

00:07:46,650 --> 00:07:50,880
it is not a list it is special so now

00:07:49,830 --> 00:07:51,930
that we know how to get all the things

00:07:50,880 --> 00:07:54,750
how do we just get some of the things

00:07:51,930 --> 00:07:56,909
how do we add a where clause well the

00:07:54,750 --> 00:08:00,210
whole room makes it easy we can add a

00:07:56,909 --> 00:08:03,270
filter so I can ask it to filter on just

00:08:00,210 --> 00:08:06,419
code points that are sparkles and I can

00:08:03,270 --> 00:08:09,000
get the sparkles but this is still a set

00:08:06,419 --> 00:08:09,719
I want to get a specific object and to

00:08:09,000 --> 00:08:12,900
do that

00:08:09,719 --> 00:08:16,229
I need to use get and if I get it I will

00:08:12,900 --> 00:08:19,500
get just a instance of the model I won't

00:08:16,229 --> 00:08:21,449
get a query set and get is important

00:08:19,500 --> 00:08:23,460
because get will return one and one only

00:08:21,449 --> 00:08:27,509
and if you try to get more than one

00:08:23,460 --> 00:08:28,650
thing Python will explode novel ously at

00:08:27,509 --> 00:08:31,529
you and tell you that you have a

00:08:28,650 --> 00:08:35,370
multiple objects returned error this one

00:08:31,529 --> 00:08:36,750
has hit me multiple times and now that

00:08:35,370 --> 00:08:39,570
we've covered the basics this is where

00:08:36,750 --> 00:08:41,669
joins come in anyone who has done any

00:08:39,570 --> 00:08:44,459
SQL for any amount of time has had

00:08:41,669 --> 00:08:46,829
countless interactions with inner joins

00:08:44,459 --> 00:08:50,459
outer joins leftmost outer up down joins

00:08:46,829 --> 00:08:53,160
charm joins and it can get a bit

00:08:50,459 --> 00:08:53,670
confusing but thankfully the Orang makes

00:08:53,160 --> 00:08:55,890
us free

00:08:53,670 --> 00:08:59,550
EEZ and you don't have to remember all

00:08:55,890 --> 00:09:01,670
that stuff if I wanted to do say a joint

00:08:59,550 --> 00:09:04,800
on my code point and design table

00:09:01,670 --> 00:09:07,740
joining on my firing key instead of

00:09:04,800 --> 00:09:09,120
having to do all this SQL I just filter

00:09:07,740 --> 00:09:11,640
on something a little bit more

00:09:09,120 --> 00:09:15,510
complicated I filter on code point

00:09:11,640 --> 00:09:17,220
double underscore name equal sparkles if

00:09:15,510 --> 00:09:19,680
I run this in my terminal I get a list

00:09:17,220 --> 00:09:24,720
of all sparkles what's happening here is

00:09:19,680 --> 00:09:26,520
we have two fields and we can go from

00:09:24,720 --> 00:09:28,110
one particular field to another field

00:09:26,520 --> 00:09:30,360
and we separate them all by double

00:09:28,110 --> 00:09:34,260
underscores and Django knows what we're

00:09:30,360 --> 00:09:37,590
talking about by default if we we need

00:09:34,260 --> 00:09:39,870
to end on a lookup so from what we saw

00:09:37,590 --> 00:09:41,940
before we had a design and a code point

00:09:39,870 --> 00:09:44,700
and a code point had a name so we're not

00:09:41,940 --> 00:09:47,790
ending on a lookup Django interpreters

00:09:44,700 --> 00:09:49,970
is an exact match so in this particular

00:09:47,790 --> 00:09:53,730
case these two queries would be the same

00:09:49,970 --> 00:09:55,860
as an aside we've seen exact before in

00:09:53,730 --> 00:09:58,980
the very first screenshot of an inside

00:09:55,860 --> 00:10:01,320
of an of the admin screen it was sitting

00:09:58,980 --> 00:10:03,260
up there the entire time the filters on

00:10:01,320 --> 00:10:06,780
the right hand side are just adding

00:10:03,260 --> 00:10:08,910
filters on to our query and that

00:10:06,780 --> 00:10:10,890
particular one is is super user the

00:10:08,910 --> 00:10:13,650
double underscore exact equals one which

00:10:10,890 --> 00:10:16,740
happens to match what my UI is selected

00:10:13,650 --> 00:10:20,610
so the admins running this ORM stuff

00:10:16,740 --> 00:10:22,380
that's pretty cool so what if we were to

00:10:20,610 --> 00:10:24,630
try to build the longest possible chain

00:10:22,380 --> 00:10:26,310
here we'd need to find out how all our

00:10:24,630 --> 00:10:27,780
models link together so we could jump

00:10:26,310 --> 00:10:30,690
from one to the next and one to the next

00:10:27,780 --> 00:10:33,030
to do that we would need to discover the

00:10:30,690 --> 00:10:35,280
entire schema and we had tools to do

00:10:33,030 --> 00:10:37,890
this already we could go and get all the

00:10:35,280 --> 00:10:41,940
fields for each of our models and work

00:10:37,890 --> 00:10:46,650
out how they relate together or we could

00:10:41,940 --> 00:10:48,480
use UML diagrams UML unified modeling

00:10:46,650 --> 00:10:51,270
language and I am sorry we are going to

00:10:48,480 --> 00:10:54,510
talk a bit about UML because even though

00:10:51,270 --> 00:10:56,220
you may have some terrible memories from

00:10:54,510 --> 00:10:58,620
your college or university days about

00:10:56,220 --> 00:11:01,080
this sort of stuff for an unknown system

00:10:58,620 --> 00:11:02,670
they are extremely useful to be able to

00:11:01,080 --> 00:11:05,460
work out how things interact together

00:11:02,670 --> 00:11:07,529
and because it's Django we have a helper

00:11:05,460 --> 00:11:09,420
for this it does require

00:11:07,529 --> 00:11:11,009
us to do some installing beforehand

00:11:09,420 --> 00:11:13,860
because while it's not called Django

00:11:11,009 --> 00:11:16,050
it's still very useful Django so to do

00:11:13,860 --> 00:11:17,850
that I'm on a Mac so this is how you do

00:11:16,050 --> 00:11:20,699
it on a Mac first we need something to

00:11:17,850 --> 00:11:23,279
visualize so we install graph is which

00:11:20,699 --> 00:11:25,589
allows us to define dot models which

00:11:23,279 --> 00:11:28,290
then have a graphical user a graphical

00:11:25,589 --> 00:11:30,660
implementation they can go from text to

00:11:28,290 --> 00:11:33,029
pretty picture ok we've installed that

00:11:30,660 --> 00:11:34,589
great then we need the Python wrapper

00:11:33,029 --> 00:11:36,649
for graph phase and we also need this

00:11:34,589 --> 00:11:39,180
wonderful thing called Django extensions

00:11:36,649 --> 00:11:40,110
so far everything I've showed you is

00:11:39,180 --> 00:11:42,389
native Django

00:11:40,110 --> 00:11:44,879
I'm the asari I'm a site reliability

00:11:42,389 --> 00:11:47,220
engineer I normally don't get to install

00:11:44,879 --> 00:11:49,439
random stuff on clients machines so

00:11:47,220 --> 00:11:52,309
finding out that Django extensions

00:11:49,439 --> 00:11:54,509
existed didn't happen for a while until

00:11:52,309 --> 00:11:57,180
after the last time I gave this talk and

00:11:54,509 --> 00:11:59,220
someone told me about it but if you have

00:11:57,180 --> 00:12:00,839
the ability to please install it it is

00:11:59,220 --> 00:12:03,749
so useful for things that are outside

00:12:00,839 --> 00:12:05,610
Zangara core once we install that we

00:12:03,749 --> 00:12:07,290
have to tell Django that it's around so

00:12:05,610 --> 00:12:09,269
we need to go into our settings file and

00:12:07,290 --> 00:12:11,279
we need to add it into the installed

00:12:09,269 --> 00:12:14,009
apps and if you haven't used Django

00:12:11,279 --> 00:12:16,139
extensions before you install it with a

00:12:14,009 --> 00:12:18,180
hyphen and you add it to install apps

00:12:16,139 --> 00:12:20,250
with an underscore that is very

00:12:18,180 --> 00:12:22,889
important to know the difference because

00:12:20,250 --> 00:12:24,600
I keep on getting missing that kind of

00:12:22,889 --> 00:12:26,069
stuff and it's not just this package

00:12:24,600 --> 00:12:28,350
it's other packages as well because

00:12:26,069 --> 00:12:32,160
there's this thing called like valid

00:12:28,350 --> 00:12:37,019
characters that are like not a superset

00:12:32,160 --> 00:12:40,939
of each anyway Unicode once we have that

00:12:37,019 --> 00:12:43,709
installed we can start using the extra

00:12:40,939 --> 00:12:46,470
method that Django extensions allows us

00:12:43,709 --> 00:12:48,269
to do on manage pipe which allows us to

00:12:46,470 --> 00:12:51,089
run instead of how before we ran shell

00:12:48,269 --> 00:12:52,829
we can run graph models and it takes a

00:12:51,089 --> 00:12:55,019
couple of parameters in this case I'm

00:12:52,829 --> 00:12:58,019
telling it to graph all of Unicode X and

00:12:55,019 --> 00:13:00,179
I want to output to a UML dot PNG file

00:12:58,019 --> 00:13:03,000
and we don't get any output but we do

00:13:00,179 --> 00:13:06,209
get a file on disk which is this and

00:13:03,000 --> 00:13:08,999
this shows how our different models work

00:13:06,209 --> 00:13:11,819
together it also matches how the Django

00:13:08,999 --> 00:13:14,160
project on website looked like in 2005

00:13:11,819 --> 00:13:16,379
so let's update it in this particular

00:13:14,160 --> 00:13:18,000
diagram we can see that the various

00:13:16,379 --> 00:13:20,410
models are interacting with each other

00:13:18,000 --> 00:13:23,230
linking on foreign keys

00:13:20,410 --> 00:13:25,569
so a design has a foreign key for code

00:13:23,230 --> 00:13:27,910
point and vendor version code point has

00:13:25,569 --> 00:13:29,620
a bunch of values but then vendor

00:13:27,910 --> 00:13:31,480
version relates to vendor this is

00:13:29,620 --> 00:13:34,269
proposed we're in third normal form and

00:13:31,480 --> 00:13:37,480
otherwise we'd be duplicating data about

00:13:34,269 --> 00:13:40,360
our vendors everywhere and how it works

00:13:37,480 --> 00:13:44,639
in reality because databases sometimes

00:13:40,360 --> 00:13:44,639
reflect reality it's a thing they do a

00:13:44,699 --> 00:13:50,439
emoji is a code point in a standard but

00:13:48,339 --> 00:13:52,750
the graphical representation on your

00:13:50,439 --> 00:13:54,009
device doesn't have to match the

00:13:52,750 --> 00:13:56,740
standard and it doesn't have to match

00:13:54,009 --> 00:14:00,069
anyone else and they've evolved over

00:13:56,740 --> 00:14:01,629
time so both Android and Windows used to

00:14:00,069 --> 00:14:03,550
be black and white and then they both

00:14:01,629 --> 00:14:06,129
got updated and now they're converging

00:14:03,550 --> 00:14:08,610
and so we can see how these emoji have

00:14:06,129 --> 00:14:10,959
evolved over time and this is what our

00:14:08,610 --> 00:14:13,899
project is designed to do it's designed

00:14:10,959 --> 00:14:15,939
to show these differences over time so

00:14:13,899 --> 00:14:18,310
now that we have our model we can get

00:14:15,939 --> 00:14:20,079
our longest possible chain which we can

00:14:18,310 --> 00:14:21,910
start from the left and work our way

00:14:20,079 --> 00:14:25,029
over to the right so how long as

00:14:21,910 --> 00:14:27,069
possible chain is going to be well we

00:14:25,029 --> 00:14:29,199
have to use all the models here so we

00:14:27,069 --> 00:14:30,699
could import from all the things or we

00:14:29,199 --> 00:14:33,160
could just import from staff as we're

00:14:30,699 --> 00:14:35,620
lazy and then we can start from one side

00:14:33,160 --> 00:14:38,649
and work our way across so code point

00:14:35,620 --> 00:14:41,439
objects filter design vendor version

00:14:38,649 --> 00:14:44,439
vendor name contains because that's a

00:14:41,439 --> 00:14:47,589
valid lookup Microsoft and then we get

00:14:44,439 --> 00:14:49,029
all the code points that map to a design

00:14:47,589 --> 00:14:50,649
that map to a vendor version that map to

00:14:49,029 --> 00:14:52,540
a vendor that's called Microsoft and

00:14:50,649 --> 00:14:54,819
there's a bunch of different lookup

00:14:52,540 --> 00:14:57,610
options we can use here we can use like

00:14:54,819 --> 00:15:01,509
we can use various forms of like we can

00:14:57,610 --> 00:15:05,009
later then crests and ranges now and etc

00:15:01,509 --> 00:15:08,319
and there's a whole bunch more thing is

00:15:05,009 --> 00:15:10,870
we've been doing ends together and image

00:15:08,319 --> 00:15:12,639
and this and that we want to be able to

00:15:10,870 --> 00:15:13,300
do ORS and nots and all the other fancy

00:15:12,639 --> 00:15:16,870
stuff

00:15:13,300 --> 00:15:19,930
so this is where Q comes in q as inquiry

00:15:16,870 --> 00:15:23,079
which allows us to build knots and or

00:15:19,930 --> 00:15:24,970
statements in our where clause so let's

00:15:23,079 --> 00:15:26,500
start with some comparisons we're going

00:15:24,970 --> 00:15:29,139
to go back to a really simple example

00:15:26,500 --> 00:15:31,600
where we want code points that are

00:15:29,139 --> 00:15:32,930
called sparkles and have the description

00:15:31,600 --> 00:15:35,810
shiny

00:15:32,930 --> 00:15:37,490
and this would be this particular SQL

00:15:35,810 --> 00:15:40,460
which is going to do select star from

00:15:37,490 --> 00:15:42,740
code point where the name is and the

00:15:40,460 --> 00:15:44,540
description is we know that this is

00:15:42,740 --> 00:15:46,220
exact same as declaring double

00:15:44,540 --> 00:15:48,830
underscore exact on both because we're

00:15:46,220 --> 00:15:51,410
not declaring a lookup at the end so

00:15:48,830 --> 00:15:53,089
going back here what we could also do is

00:15:51,410 --> 00:15:55,610
we can change our filters together a

00:15:53,089 --> 00:15:58,520
filter returns a query set so we can

00:15:55,610 --> 00:16:00,080
then have another filter on that query

00:15:58,520 --> 00:16:01,279
set which returns another query set and

00:16:00,080 --> 00:16:03,529
we can chain these commands together

00:16:01,279 --> 00:16:06,320
which helps us build up some really

00:16:03,529 --> 00:16:08,540
complex filters but what we can also do

00:16:06,320 --> 00:16:10,459
instead of just having these positional

00:16:08,540 --> 00:16:13,720
arguments we can wrap these in queue and

00:16:10,459 --> 00:16:16,250
this allows us to have more flexibility

00:16:13,720 --> 00:16:17,540
in this particular case we're chaining

00:16:16,250 --> 00:16:19,520
these together just as separate

00:16:17,540 --> 00:16:22,670
parameters as filter but what we can

00:16:19,520 --> 00:16:24,589
also do is use ant which will have the

00:16:22,670 --> 00:16:26,420
same SQL output in all these examples

00:16:24,589 --> 00:16:29,690
our SQL hasn't changed and these are

00:16:26,420 --> 00:16:31,580
equivalent searches what we could also

00:16:29,690 --> 00:16:35,660
do is we could just have one as queue

00:16:31,580 --> 00:16:37,130
and one as a argument but we can't do it

00:16:35,660 --> 00:16:40,010
the other way because in all of this we

00:16:37,130 --> 00:16:44,510
still need to have valid Python it's a

00:16:40,010 --> 00:16:46,880
little bit annoying but another example

00:16:44,510 --> 00:16:49,820
of this is when we want to start

00:16:46,880 --> 00:16:52,070
searching on the same field if we want

00:16:49,820 --> 00:16:53,720
to build up a knot or an or we want to

00:16:52,070 --> 00:16:55,820
see if something is called something or

00:16:53,720 --> 00:16:57,890
something we can't put it together

00:16:55,820 --> 00:16:59,480
unless we wrap it in queue because it's

00:16:57,890 --> 00:17:01,970
not valid Python because we're

00:16:59,480 --> 00:17:03,500
duplicating our keyword arguments if we

00:17:01,970 --> 00:17:05,569
wrap it in queue they're both now

00:17:03,500 --> 00:17:08,750
positional arguments and it doesn't

00:17:05,569 --> 00:17:11,510
conflict in Python state of how syntax

00:17:08,750 --> 00:17:14,000
works and from before we know that we

00:17:11,510 --> 00:17:17,240
can replace a comma with an ampersand

00:17:14,000 --> 00:17:20,870
and from there we can have the Union set

00:17:17,240 --> 00:17:23,750
where the code is both called sparkles

00:17:20,870 --> 00:17:25,490
and unicorn but no such emoji exists

00:17:23,750 --> 00:17:29,270
what we actually need is an or which

00:17:25,490 --> 00:17:32,990
will be or so it'll be either sparkles

00:17:29,270 --> 00:17:35,150
or unicorn but how does that even work

00:17:32,990 --> 00:17:38,480
I mean it's valid Python but we're using

00:17:35,150 --> 00:17:43,179
this pipe character um who here has done

00:17:38,480 --> 00:17:46,310
bit masking the last five years yeah so

00:17:43,179 --> 00:17:48,500
this is a little bit of magic

00:17:46,310 --> 00:17:51,790
but we're also about to see some actual

00:17:48,500 --> 00:17:55,160
Django core code so don't be alarmed

00:17:51,790 --> 00:17:57,740
this is part of what Django is doing

00:17:55,160 --> 00:17:59,870
it's declaring the class Q and what it's

00:17:57,740 --> 00:18:02,090
doing is in the double underscore or

00:17:59,870 --> 00:18:05,480
double underscore or dunder or which is

00:18:02,090 --> 00:18:07,670
the Python syntax invalid way of

00:18:05,480 --> 00:18:09,320
referring to just the single ampersand

00:18:07,670 --> 00:18:11,570
in the single pipe because there are

00:18:09,320 --> 00:18:13,190
methods in Python that you cannot refer

00:18:11,570 --> 00:18:15,200
to by their actual names because

00:18:13,190 --> 00:18:17,270
functions have to be called certain

00:18:15,200 --> 00:18:19,850
things what we're doing is we're

00:18:17,270 --> 00:18:21,860
overriding what happens when two Q

00:18:19,850 --> 00:18:24,200
objects are odd together or ANDed

00:18:21,860 --> 00:18:26,030
together and we're combining them which

00:18:24,200 --> 00:18:28,190
means that we're meta typing in the

00:18:26,030 --> 00:18:30,830
middle of Python which means that we can

00:18:28,190 --> 00:18:33,380
construct some really elegant queries

00:18:30,830 --> 00:18:35,120
and that's great and what's also great

00:18:33,380 --> 00:18:37,490
is this stuff's been in Django for ten

00:18:35,120 --> 00:18:39,080
years now and it still works and it's

00:18:37,490 --> 00:18:42,440
still great and it still gets the

00:18:39,080 --> 00:18:44,840
functionality that you want what we can

00:18:42,440 --> 00:18:47,870
also do here is we can start using knots

00:18:44,840 --> 00:18:50,660
using tilde as a negation we can saying

00:18:47,870 --> 00:18:54,230
we can have queries that say I want it

00:18:50,660 --> 00:18:55,880
to be sparkles or not unicorn and once

00:18:54,230 --> 00:18:58,460
we have more filters we can have more

00:18:55,880 --> 00:18:59,690
results we can start having more complex

00:18:58,460 --> 00:19:02,570
things where we want to check whether

00:18:59,690 --> 00:19:05,330
the filthy code point has a design that

00:19:02,570 --> 00:19:07,580
has an image that contains and we can

00:19:05,330 --> 00:19:10,250
throw this into our thing and we can

00:19:07,580 --> 00:19:12,400
work out what's going on but the problem

00:19:10,250 --> 00:19:14,750
here is we've got some truncated results

00:19:12,400 --> 00:19:17,180
turns out this is a feature and not a

00:19:14,750 --> 00:19:17,990
bug we actually have as many results as

00:19:17,180 --> 00:19:19,760
is returned

00:19:17,990 --> 00:19:21,860
but because we're printing this out to

00:19:19,760 --> 00:19:24,350
the terminal and there is a feature in

00:19:21,860 --> 00:19:26,630
Django that means that it stops after 21

00:19:24,350 --> 00:19:28,400
Records because otherwise it could print

00:19:26,630 --> 00:19:30,500
out a million records into your terminal

00:19:28,400 --> 00:19:31,910
which is an actual bug that actually

00:19:30,500 --> 00:19:35,450
happened and now they have this feature

00:19:31,910 --> 00:19:36,860
you're welcome what we can do is we can

00:19:35,450 --> 00:19:38,780
check how many results we're actually

00:19:36,860 --> 00:19:41,060
going to get with count and we can see

00:19:38,780 --> 00:19:44,270
that there's 44 of them but how does

00:19:41,060 --> 00:19:47,450
this method actually work what happened

00:19:44,270 --> 00:19:49,070
is well that's the thing I could show

00:19:47,450 --> 00:19:51,650
you the SQL or I could show you how to

00:19:49,070 --> 00:19:54,410
find the SQL of your own statements what

00:19:51,650 --> 00:19:56,570
we can do is we can from django DB

00:19:54,410 --> 00:19:59,090
connection import queries and what we

00:19:56,570 --> 00:19:59,750
can do is ask it to return the last

00:19:59,090 --> 00:20:01,370
query

00:19:59,750 --> 00:20:04,910
that it used when it connected to the

00:20:01,370 --> 00:20:07,670
database and we get out some interesting

00:20:04,910 --> 00:20:09,920
from a formatted SQL which I can then

00:20:07,670 --> 00:20:12,560
prettily format out for you we're doing

00:20:09,920 --> 00:20:15,050
a select count star on the tables with

00:20:12,560 --> 00:20:18,470
the join with the things but what do we

00:20:15,050 --> 00:20:20,300
start changing things if we have a count

00:20:18,470 --> 00:20:24,920
here and what we're doing instead of

00:20:20,300 --> 00:20:26,990
having the filter we have two filters if

00:20:24,920 --> 00:20:30,200
we want to filter on design image

00:20:26,990 --> 00:20:32,570
contains and then starts with well we

00:20:30,200 --> 00:20:34,730
can run the query and we can see that

00:20:32,570 --> 00:20:37,760
there are far too many records to be

00:20:34,730 --> 00:20:41,060
reasonable and if we check the query we

00:20:37,760 --> 00:20:42,650
can see that we've got a Cartesian

00:20:41,060 --> 00:20:44,180
product going on which if you've been a

00:20:42,650 --> 00:20:45,500
database developer for any amount of

00:20:44,180 --> 00:20:47,150
time you know that these are the bane of

00:20:45,500 --> 00:20:48,830
your existence and trying to find out

00:20:47,150 --> 00:20:51,800
these things before they catch you in

00:20:48,830 --> 00:20:53,480
production is really useful the problem

00:20:51,800 --> 00:20:54,710
here is that we're joining on two tables

00:20:53,480 --> 00:20:57,830
but we're not connecting them together

00:20:54,710 --> 00:20:59,960
so it's having all of the results and

00:20:57,830 --> 00:21:02,030
all of the results and multiplying them

00:20:59,960 --> 00:21:05,270
together so instead of 44 results we get

00:21:02,030 --> 00:21:06,950
700 but what we can do is we can also

00:21:05,270 --> 00:21:10,910
check what we're going to run before we

00:21:06,950 --> 00:21:13,340
run it where we can run dot query on our

00:21:10,910 --> 00:21:15,200
particular filter and if we ask it for a

00:21:13,340 --> 00:21:18,800
string representation we can get some

00:21:15,200 --> 00:21:20,420
SQL you can use this to check kind of

00:21:18,800 --> 00:21:22,160
what your query is going to be executing

00:21:20,420 --> 00:21:25,850
before you run it but it will not be the

00:21:22,160 --> 00:21:28,130
exact same why if we go back into our

00:21:25,850 --> 00:21:30,700
terminal and instead of running this

00:21:28,130 --> 00:21:33,440
particular filter we save it to a value

00:21:30,700 --> 00:21:34,520
we haven't executed anything yet so

00:21:33,440 --> 00:21:36,530
there's not going to be any query

00:21:34,520 --> 00:21:40,100
because we started a new terminal we

00:21:36,530 --> 00:21:41,900
don't have any state but if I check for

00:21:40,100 --> 00:21:44,480
the string representation and then I

00:21:41,900 --> 00:21:46,970
execute it and then I can pair the two

00:21:44,480 --> 00:21:50,270
SQL queries we can see that Django has

00:21:46,970 --> 00:21:51,800
added the limit 21 for us so just if

00:21:50,270 --> 00:21:54,710
you're going to be using the doc query

00:21:51,800 --> 00:21:56,720
just be aware that it may not be the

00:21:54,710 --> 00:21:58,490
exact query and if you want to check it

00:21:56,720 --> 00:22:00,860
check what's what's actually run against

00:21:58,490 --> 00:22:04,010
your database so putting it all together

00:22:00,860 --> 00:22:05,840
let's go bug hunting let's go back to

00:22:04,010 --> 00:22:07,970
the beginning let's try to find where

00:22:05,840 --> 00:22:10,280
this particular error occurred let's

00:22:07,970 --> 00:22:12,590
find the bug first thing we want to do

00:22:10,280 --> 00:22:13,580
load up our new shell but because we've

00:22:12,590 --> 00:22:14,900
got Django extension

00:22:13,580 --> 00:22:16,670
installed we can use this cool thing

00:22:14,900 --> 00:22:18,680
called shell plus which means that

00:22:16,670 --> 00:22:20,810
everything is important for imported for

00:22:18,680 --> 00:22:23,060
us automatically which is really useful

00:22:20,810 --> 00:22:24,890
as long as you remember to always use

00:22:23,060 --> 00:22:26,480
shell plus because otherwise you will

00:22:24,890 --> 00:22:27,710
forget to then import your statements

00:22:26,480 --> 00:22:31,880
when you're on the native shell again

00:22:27,710 --> 00:22:35,750
ask me how I know so we want to find the

00:22:31,880 --> 00:22:37,610
particular design that's broken and we

00:22:35,750 --> 00:22:39,500
know that that design is a code point

00:22:37,610 --> 00:22:42,020
sparkles and we also remember that it

00:22:39,500 --> 00:22:44,270
was Twitter so we want to filter on code

00:22:42,020 --> 00:22:47,180
named sparkles vendor version vendor

00:22:44,270 --> 00:22:49,610
name Twitter and we get back all the

00:22:47,180 --> 00:22:52,160
sparkles from Twitter so from here we

00:22:49,610 --> 00:22:54,830
want to get just the one result we can

00:22:52,160 --> 00:22:57,320
save this result in a variable and then

00:22:54,830 --> 00:23:00,080
we can see that we've saved in the

00:22:57,320 --> 00:23:02,680
variable and then we can do our get in a

00:23:00,080 --> 00:23:06,170
number of ways we can get just the first

00:23:02,680 --> 00:23:08,630
instance the the index 0 of the

00:23:06,170 --> 00:23:10,970
particular object that we want or we

00:23:08,630 --> 00:23:14,510
could filter further where we check the

00:23:10,970 --> 00:23:16,490
exact 1.0 name and then since this is a

00:23:14,510 --> 00:23:18,710
singleton query set we can then get it

00:23:16,490 --> 00:23:21,050
we can either get by adding a get on to

00:23:18,710 --> 00:23:23,930
the end because it's 1 and get only does

00:23:21,050 --> 00:23:26,060
one that'd be great or we can change our

00:23:23,930 --> 00:23:28,220
listing to be get in the first place and

00:23:26,060 --> 00:23:30,080
then we get our design from here

00:23:28,220 --> 00:23:32,180
something is wrong with the values in

00:23:30,080 --> 00:23:35,540
this so what were our fields again oh

00:23:32,180 --> 00:23:38,660
yes we had a file field called image and

00:23:35,540 --> 00:23:43,930
if we use that to work out what the

00:23:38,660 --> 00:23:46,460
value of this field is ah found the bug

00:23:43,930 --> 00:23:49,160
that's not a valid file name that's why

00:23:46,460 --> 00:23:55,160
we had a broken image we found a bug

00:23:49,160 --> 00:23:58,040
it's an actual bug emoji sorry the RM is

00:23:55,160 --> 00:24:01,040
great not right but what if the ORM

00:23:58,040 --> 00:24:03,650
doesn't do what we want what if we just

00:24:01,040 --> 00:24:09,380
really want to drop into R or SQL well

00:24:03,650 --> 00:24:12,500
don't never use roar SQL anymore but but

00:24:09,380 --> 00:24:16,070
but but but but but what if I want to do

00:24:12,500 --> 00:24:18,830
aggregation well the RN does aggregation

00:24:16,070 --> 00:24:20,390
for you you can do counts in aggregate

00:24:18,830 --> 00:24:22,970
and you can see how many objects you

00:24:20,390 --> 00:24:26,429
have but but but our other calculated

00:24:22,970 --> 00:24:28,559
fields I want to be able to do uppers

00:24:26,429 --> 00:24:30,480
I want to be able to have calculated

00:24:28,559 --> 00:24:32,639
queries and stuff well you can do that

00:24:30,480 --> 00:24:34,230
anyway with annotate you can amaze your

00:24:32,639 --> 00:24:36,240
friends by how much you can do but the

00:24:34,230 --> 00:24:39,480
RM natively without dropping into R or

00:24:36,240 --> 00:24:41,429
SQL but but I want sub queries I want to

00:24:39,480 --> 00:24:43,080
be able to have a query in a query so I

00:24:41,429 --> 00:24:45,629
can query where I query well you can

00:24:43,080 --> 00:24:47,970
just do that anyway but but the

00:24:45,629 --> 00:24:52,499
explained plans the RM doesn't do

00:24:47,970 --> 00:24:54,629
explain yes it does but but but it

00:24:52,499 --> 00:24:55,769
doesn't do this obscure Postgres command

00:24:54,629 --> 00:25:00,210
where you can just write your own query

00:24:55,769 --> 00:25:02,070
expression but-but-but-but the docs the

00:25:00,210 --> 00:25:06,629
docs say that you can fall back to R or

00:25:02,070 --> 00:25:10,639
SQL yes the docs do say that but these

00:25:06,629 --> 00:25:14,070
Doc's haven't been updated in 10 years

00:25:10,639 --> 00:25:16,440
be warning about how R or SQL can

00:25:14,070 --> 00:25:19,679
subject you to SQL injection attacks has

00:25:16,440 --> 00:25:21,570
been added five years ago I will be

00:25:19,679 --> 00:25:23,460
sprinting on updating the documentation

00:25:21,570 --> 00:25:26,820
to make sure that it is up-to-date with

00:25:23,460 --> 00:25:29,610
the current state of how the model query

00:25:26,820 --> 00:25:32,850
api's mean you never have to use R or

00:25:29,610 --> 00:25:35,190
again no really don't use raw and that's

00:25:32,850 --> 00:25:36,659
my time so discover more yourself

00:25:35,190 --> 00:25:39,659
there's a bunch of that I didn't cover

00:25:36,659 --> 00:25:41,490
today including f where you can actually

00:25:39,659 --> 00:25:43,950
interact with your fields there are more

00:25:41,490 --> 00:25:45,450
functions and there's also how to

00:25:43,950 --> 00:25:46,799
actually create the models in the first

00:25:45,450 --> 00:25:49,350
place which i still don't really know

00:25:46,799 --> 00:25:50,970
how to do which is fun and also the

00:25:49,350 --> 00:25:53,399
types you can have and the relationships

00:25:50,970 --> 00:25:55,169
between them and that's all I had

00:25:53,399 --> 00:25:58,019
hopefully this will help you go and

00:25:55,169 --> 00:26:00,450
scout and find out bugs and also be

00:25:58,019 --> 00:26:02,399
reminded that even if you've worked in

00:26:00,450 --> 00:26:04,440
any other kind of tech staff before any

00:26:02,399 --> 00:26:06,690
other kind of industry before you have

00:26:04,440 --> 00:26:09,509
skills and you can apply these skills in

00:26:06,690 --> 00:26:12,419
many ways and you never start from zero

00:26:09,509 --> 00:26:13,610
you always build on what you know thank

00:26:12,419 --> 00:26:19,480
you for your time

00:26:13,610 --> 00:26:21,540
[Applause]

00:26:19,480 --> 00:26:21,540

YouTube URL: https://www.youtube.com/watch?v=p9Bgr5VOISo


