Title: DjangoCon US 2018 - Containerless Django: Deploying without Docker by Peter Baumgartner
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - Containerless Django: Deploying without Docker by Peter Baumgartner

Docker or more generally, containers, are great for lots of use cases, but they don’t come for free. Container runtimes, network virtualization, orchestration platforms, and registries are all added to the stack. Like all software, they bring their own bugs and operational burden with them. For most Django sites, containers are a heavyweight solution to a lightweight problem.

Despite the overhead, Docker gets a lot of things right. It makes it easy to generate an image of your application in a known state, test the image, pull the image down to your server, apply a specific configuration environment, and run it in a secure sandbox.

But guess what? We can do all that without Docker! Using mostly “boring” software that is already a part of your server or development environment. I’ll walk you through each step of the pipeline and show you how to:

Generate immutable deployment artifacts
Test the artifact
Deploy the artifact
Sandbox your application to improve security
Quickly rollback to a previous version

This talk was presented at: https://2018.djangocon.us/talk/containerless-django-deploying-without/

LINKS:
Follow Peter Baumgartner 👇
On Twitter: https://twitter.com/ipmb
Official homepage: https://lincolnloop.com/team/peter-baumgartner/

Follow DjangCon US 👇
https://twitter.com/djangocon

Follow DEFNA 👇
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,590 --> 00:00:23,160
all right thank you so this is container

00:00:20,369 --> 00:00:25,560
list Jango deploying without docker I

00:00:23,160 --> 00:00:27,390
tried to use some buzzwords here but

00:00:25,560 --> 00:00:33,030
really this is just like regular

00:00:27,390 --> 00:00:37,079
deployment but we're gonna try to do a

00:00:33,030 --> 00:00:38,550
little better so real quick about me I'm

00:00:37,079 --> 00:00:42,600
the founder at Lincoln loop we're a

00:00:38,550 --> 00:00:45,120
django development agency we've been we

00:00:42,600 --> 00:00:48,539
do kind of full stack django solutions

00:00:45,120 --> 00:00:51,989
so everything from design to DevOps and

00:00:48,539 --> 00:00:53,699
that's primarily my role at the company

00:00:51,989 --> 00:00:57,379
these days i've been doing it for a long

00:00:53,699 --> 00:00:59,760
time before that i was edmond and

00:00:57,379 --> 00:01:03,030
co-author of a book high performance

00:00:59,760 --> 00:01:05,369
django which is also has quite a bit

00:01:03,030 --> 00:01:11,010
about deploying django so i've done

00:01:05,369 --> 00:01:13,799
quite a bit of this how many of you have

00:01:11,010 --> 00:01:15,470
seen stranger things or maybe not seen

00:01:13,799 --> 00:01:18,030
stranger things

00:01:15,470 --> 00:01:19,740
okay well I'm gonna make some references

00:01:18,030 --> 00:01:23,280
to stranger things in this talk

00:01:19,740 --> 00:01:24,900
Halloween's coming up I don't think I'll

00:01:23,280 --> 00:01:26,930
make any major spoilers but I'll

00:01:24,900 --> 00:01:28,590
reference a few characters in it so

00:01:26,930 --> 00:01:30,900
docker is cool

00:01:28,590 --> 00:01:33,119
I like docker docker is kind of like

00:01:30,900 --> 00:01:35,369
this steve harrington guy right he's got

00:01:33,119 --> 00:01:36,720
like you know great hair he's like the

00:01:35,369 --> 00:01:40,079
cool guy at school

00:01:36,720 --> 00:01:41,549
drives a nice car i feel like you know

00:01:40,079 --> 00:01:44,009
the kind of popular opinion of docker

00:01:41,549 --> 00:01:47,310
these days is the same like it's great

00:01:44,009 --> 00:01:49,560
it solves all your problems and like I

00:01:47,310 --> 00:01:51,299
said docker is cool one of the things I

00:01:49,560 --> 00:01:53,399
really like about it is this pipeline

00:01:51,299 --> 00:01:56,850
that it gives you it kind of forces you

00:01:53,399 --> 00:01:59,820
into you write code on your machine you

00:01:56,850 --> 00:02:02,369
check it in and your continuous

00:01:59,820 --> 00:02:04,880
integration system picks it up it builds

00:02:02,369 --> 00:02:07,890
your image which you can then test and

00:02:04,880 --> 00:02:09,810
push that image out to any number of

00:02:07,890 --> 00:02:11,400
servers in any different environment and

00:02:09,810 --> 00:02:13,240
you can be guaranteed that the thing you

00:02:11,400 --> 00:02:16,210
tested is the thing that you're running

00:02:13,240 --> 00:02:18,550
that environment it gives you some

00:02:16,210 --> 00:02:21,790
security right out-of-the-box so in the

00:02:18,550 --> 00:02:25,470
unlit event that a you know hacker

00:02:21,790 --> 00:02:28,150
attacks your system and gains access to

00:02:25,470 --> 00:02:30,700
your application in ways you don't want

00:02:28,150 --> 00:02:33,040
them to it's very difficult for them to

00:02:30,700 --> 00:02:36,880
kind of leak outside of the container

00:02:33,040 --> 00:02:40,720
and do things to other services or

00:02:36,880 --> 00:02:42,820
systems it also gives you isolation and

00:02:40,720 --> 00:02:44,740
beyond that security isolation it gives

00:02:42,820 --> 00:02:46,030
you isolation from kind of having some

00:02:44,740 --> 00:02:48,040
sort of global state that you have to

00:02:46,030 --> 00:02:50,860
deal with so when you're deploying lots

00:02:48,040 --> 00:02:52,120
of different services on a single

00:02:50,860 --> 00:02:53,950
instance you don't have to worry about

00:02:52,120 --> 00:02:57,610
conflicting versions of software

00:02:53,950 --> 00:03:01,480
libraries all that stuff and it gives

00:02:57,610 --> 00:03:03,160
you this developer parody from

00:03:01,480 --> 00:03:04,660
development machine through two

00:03:03,160 --> 00:03:06,310
productions so I know that the thing I

00:03:04,660 --> 00:03:07,960
run in development is the same thing

00:03:06,310 --> 00:03:10,450
that I run in development or in

00:03:07,960 --> 00:03:13,420
production that's great I like all these

00:03:10,450 --> 00:03:15,460
things about docker so Steve's over here

00:03:13,420 --> 00:03:17,380
like hey man just bundled the entire OS

00:03:15,460 --> 00:03:21,580
like all your problems are gonna go away

00:03:17,380 --> 00:03:23,890
right well not exactly you know this is

00:03:21,580 --> 00:03:26,650
a great solution if your platform

00:03:23,890 --> 00:03:29,710
as-a-service if you're running hundreds

00:03:26,650 --> 00:03:31,360
or thousands of services absolutely like

00:03:29,710 --> 00:03:33,010
the this is probably the right solution

00:03:31,360 --> 00:03:35,530
for you but my guess is most of the

00:03:33,010 --> 00:03:37,870
people here are not in that scenario

00:03:35,530 --> 00:03:40,930
you're deploying maybe one or a handful

00:03:37,870 --> 00:03:42,220
of services and and maybe you know going

00:03:40,930 --> 00:03:46,050
to the point of bundling the entire

00:03:42,220 --> 00:03:48,640
operating system is is overboard for you

00:03:46,050 --> 00:03:51,850
so that kind of leads into some of my

00:03:48,640 --> 00:03:53,590
philosophy when I'm building systems and

00:03:51,850 --> 00:03:55,120
I'll use a couple of quotes here to show

00:03:53,590 --> 00:03:59,410
I'm not like the only person that thinks

00:03:55,120 --> 00:04:01,810
this way Mike Perham he's a ruby

00:03:59,410 --> 00:04:04,960
developer he wrote sidekick which is

00:04:01,810 --> 00:04:07,570
sort of Ruby's version of celery he says

00:04:04,960 --> 00:04:10,180
no code runs faster than no code no code

00:04:07,570 --> 00:04:12,400
has fewer bugs than no code no code uses

00:04:10,180 --> 00:04:16,810
less memory than no code and no code is

00:04:12,400 --> 00:04:18,489
easier to understand than no code so the

00:04:16,810 --> 00:04:22,840
less code you run generally the better

00:04:18,489 --> 00:04:25,300
off you are and this one is Henrik your

00:04:22,840 --> 00:04:26,500
tech he's a JavaScript developer he says

00:04:25,300 --> 00:04:29,050
for an optimal program

00:04:26,500 --> 00:04:32,620
experience constantly ask yourself do I

00:04:29,050 --> 00:04:34,240
really need all this crap and I think

00:04:32,620 --> 00:04:36,010
it's important these days like we are

00:04:34,240 --> 00:04:38,230
bombarded with frameworks and new

00:04:36,010 --> 00:04:40,210
technologies and all this stuff and it's

00:04:38,230 --> 00:04:42,070
good to rather than just sort of adopt

00:04:40,210 --> 00:04:44,730
it willy-nilly take a step back and say

00:04:42,070 --> 00:04:50,830
like you know is this what I really need

00:04:44,730 --> 00:04:53,380
so docker has its drawbacks as well it's

00:04:50,830 --> 00:04:55,180
slow like you're you know downloading

00:04:53,380 --> 00:04:57,460
entire operating systems and uploading

00:04:55,180 --> 00:04:59,020
them and and all this stuff you you've

00:04:57,460 --> 00:05:02,020
got really big build artifacts and it

00:04:59,020 --> 00:05:05,140
takes time to ship those around you know

00:05:02,020 --> 00:05:08,380
build them and all that don't when

00:05:05,140 --> 00:05:09,550
people say Dockers lightweight it's not

00:05:08,380 --> 00:05:11,020
a lightweight solution like it's

00:05:09,550 --> 00:05:13,150
lightweight compared to running an

00:05:11,020 --> 00:05:14,890
entire server or compared to like a

00:05:13,150 --> 00:05:16,960
virtual machine like we used to run them

00:05:14,890 --> 00:05:18,790
but maybe not as lightweight as running

00:05:16,960 --> 00:05:22,480
something you know directly on a Linux

00:05:18,790 --> 00:05:24,669
system like we've done for years it

00:05:22,480 --> 00:05:27,160
creates all these extra abstractions so

00:05:24,669 --> 00:05:29,260
you know when you're running in docker

00:05:27,160 --> 00:05:32,290
you've got now an extra network you have

00:05:29,260 --> 00:05:34,360
to handle and doing things like working

00:05:32,290 --> 00:05:38,070
with the filesystem can become more

00:05:34,360 --> 00:05:41,410
challenging so you don't get it for free

00:05:38,070 --> 00:05:43,270
and kind of the same philosophy I talked

00:05:41,410 --> 00:05:45,490
about before more software more problems

00:05:43,270 --> 00:05:48,130
docker is about a million lines of go

00:05:45,490 --> 00:05:50,140
code there's 3,000 open issues for it

00:05:48,130 --> 00:05:51,850
like you should not expect that it just

00:05:50,140 --> 00:05:54,100
runs flawlessly for you all the time and

00:05:51,850 --> 00:05:56,770
it's a it's an extra layer on top of

00:05:54,100 --> 00:06:01,030
what everybody is you know been running

00:05:56,770 --> 00:06:02,830
for years so the cool guys Steve like

00:06:01,030 --> 00:06:04,390
maybe he's not so cool maybe goes in the

00:06:02,830 --> 00:06:08,800
parking lot and drops your friends

00:06:04,390 --> 00:06:10,930
camera on the floor how did we get here

00:06:08,800 --> 00:06:12,490
like you know like one of the things

00:06:10,930 --> 00:06:14,350
like we should kind of take a step back

00:06:12,490 --> 00:06:17,320
like if we're gonna look at things like

00:06:14,350 --> 00:06:19,470
why why is docker so popular and I would

00:06:17,320 --> 00:06:22,300
say one of the primary reasons is

00:06:19,470 --> 00:06:26,770
deployments kind of sucked like we

00:06:22,300 --> 00:06:28,780
didn't do them very well we had this

00:06:26,770 --> 00:06:31,360
issue for a long time where you know we

00:06:28,780 --> 00:06:34,150
use pip and requirements files and we

00:06:31,360 --> 00:06:36,160
did install stuff and then some sub

00:06:34,150 --> 00:06:38,080
dependency of our dependencies would

00:06:36,160 --> 00:06:39,160
change versions and everything would

00:06:38,080 --> 00:06:42,370
break

00:06:39,160 --> 00:06:45,040
a lot of times we're building software

00:06:42,370 --> 00:06:46,690
on a server that we also want to you

00:06:45,040 --> 00:06:48,370
know run it from so we had all these

00:06:46,690 --> 00:06:50,470
build tools and development packages

00:06:48,370 --> 00:06:52,900
that had to be installed there was like

00:06:50,470 --> 00:06:55,330
tons of opportunity for things to kind

00:06:52,900 --> 00:06:57,580
of go wrong or to kind of have deal with

00:06:55,330 --> 00:07:02,470
this global state and lack of isolation

00:06:57,580 --> 00:07:04,420
and conflicting versions of software and

00:07:02,470 --> 00:07:05,770
today if you're building django apps

00:07:04,420 --> 00:07:07,510
there's a good chance you're probably

00:07:05,770 --> 00:07:09,430
touching node two you might be using

00:07:07,510 --> 00:07:11,440
something like web pack to build your

00:07:09,430 --> 00:07:13,570
javascript files so now we've just like

00:07:11,440 --> 00:07:15,190
compounded the problem like not only do

00:07:13,570 --> 00:07:17,410
we have to deal with all the Python

00:07:15,190 --> 00:07:20,830
versions and all that but we also have

00:07:17,410 --> 00:07:23,380
to deal with node versions if you were

00:07:20,830 --> 00:07:26,110
doing ops work and you were trying to

00:07:23,380 --> 00:07:27,730
build stuff like this these things

00:07:26,110 --> 00:07:29,260
probably made you mad and frustrated at

00:07:27,730 --> 00:07:32,130
your developers that were throwing all

00:07:29,260 --> 00:07:35,350
these new tools at you

00:07:32,130 --> 00:07:37,750
so if if we were kind of you know had

00:07:35,350 --> 00:07:40,300
these sucky deployments what is the

00:07:37,750 --> 00:07:44,260
ideal deployment in my opinion it's this

00:07:40,300 --> 00:07:46,090
you download a binary you create a

00:07:44,260 --> 00:07:47,800
configuration file that says how you

00:07:46,090 --> 00:07:52,660
want that binary to run in a given

00:07:47,800 --> 00:07:55,240
environment and you run it and this type

00:07:52,660 --> 00:07:57,190
of software exists like traffic and

00:07:55,240 --> 00:08:00,100
telegraph those are services built with

00:07:57,190 --> 00:08:02,950
go nginx which I'm sure many familiar

00:08:00,100 --> 00:08:05,800
with webserver reverse proxy written in

00:08:02,950 --> 00:08:07,480
C you can download a binary of these you

00:08:05,800 --> 00:08:10,090
can give them a configuration file and

00:08:07,480 --> 00:08:12,100
they run and I think if all software

00:08:10,090 --> 00:08:16,180
worked like this or more software work

00:08:12,100 --> 00:08:18,730
like this that docker would be you know

00:08:16,180 --> 00:08:21,100
would have a lot less popularity like I

00:08:18,730 --> 00:08:26,250
don't see a lot of benefit that it

00:08:21,100 --> 00:08:29,590
brings if we had software like this but

00:08:26,250 --> 00:08:31,570
Python is not C or go C and go have

00:08:29,590 --> 00:08:31,900
really good stories for doing stuff like

00:08:31,570 --> 00:08:34,000
this

00:08:31,900 --> 00:08:37,120
Python requires a virtual machine the

00:08:34,000 --> 00:08:40,390
Python virtual machine to run it you

00:08:37,120 --> 00:08:45,010
can't just run Python files without it

00:08:40,390 --> 00:08:46,960
it uses dynamic linking so your Python

00:08:45,010 --> 00:08:48,940
files may reference some library and

00:08:46,960 --> 00:08:51,680
it's expecting to find those libraries

00:08:48,940 --> 00:08:53,089
kind of in your global system

00:08:51,680 --> 00:08:56,240
in packaging isn't straightforward

00:08:53,089 --> 00:08:58,999
there's no obvious solution to I want a

00:08:56,240 --> 00:09:00,649
single file that is my Django project or

00:08:58,999 --> 00:09:04,939
my Python project and I want to run it

00:09:00,649 --> 00:09:07,579
so no stranger things in analogy I would

00:09:04,939 --> 00:09:10,459
say pythons kind of like Jonathan Byers

00:09:07,579 --> 00:09:12,889
here he's you know this emo guy he's got

00:09:10,459 --> 00:09:16,519
a bowl cut he's you know confused about

00:09:12,889 --> 00:09:21,679
where he fits in like not nearly as

00:09:16,519 --> 00:09:23,720
sleek as Steve is and the question I've

00:09:21,679 --> 00:09:25,459
been kind of asking myself is you know

00:09:23,720 --> 00:09:27,410
can we do better than this like is there

00:09:25,459 --> 00:09:31,879
some sort of Holy Grail that that solves

00:09:27,410 --> 00:09:33,529
this solution for Python I wanted this

00:09:31,879 --> 00:09:37,300
for years I think ever since I saw

00:09:33,529 --> 00:09:39,649
somebody run you know Jenkins in a

00:09:37,300 --> 00:09:42,170
single download and you can like run

00:09:39,649 --> 00:09:45,290
Jenkins like how can we do that with

00:09:42,170 --> 00:09:47,209
Python well this would be a terrible

00:09:45,290 --> 00:09:49,730
talk if we couldn't do better we can do

00:09:47,209 --> 00:09:51,230
better and we already are like there's a

00:09:49,730 --> 00:09:55,449
lot of things that we're using every day

00:09:51,230 --> 00:09:58,279
that have improved the situation so

00:09:55,449 --> 00:10:00,230
Pippins and poetry a lot of you probably

00:09:58,279 --> 00:10:02,689
maybe worked with pip amber at least

00:10:00,230 --> 00:10:06,709
heard of it it's creating a lock file

00:10:02,689 --> 00:10:09,649
that is making sure all our dependencies

00:10:06,709 --> 00:10:11,149
we removed that problem dependency

00:10:09,649 --> 00:10:13,699
shifting underneath us with these tools

00:10:11,149 --> 00:10:16,279
we can guarantee a kind of deterministic

00:10:13,699 --> 00:10:18,050
build when I install a project on one

00:10:16,279 --> 00:10:22,490
machine I'm gonna get the same packages

00:10:18,050 --> 00:10:25,449
on another machine precompiled wheels

00:10:22,490 --> 00:10:27,439
exists for lots of popular libraries so

00:10:25,449 --> 00:10:28,939
you know one of the problems was all

00:10:27,439 --> 00:10:30,790
these build and development tools that

00:10:28,939 --> 00:10:34,129
we needed just to install our project

00:10:30,790 --> 00:10:37,699
pillow the image manipulation library

00:10:34,129 --> 00:10:39,499
and psycho PG to binary are two really

00:10:37,699 --> 00:10:42,170
common ones that's the one you use to

00:10:39,499 --> 00:10:43,970
connect to Postgres so I can install

00:10:42,170 --> 00:10:46,100
these packages they have compiled C

00:10:43,970 --> 00:10:47,269
extensions in them but I don't have to

00:10:46,100 --> 00:10:48,709
worry about it I don't have to build

00:10:47,269 --> 00:10:53,420
them I don't need the build tool chain

00:10:48,709 --> 00:10:56,089
on my machine to use them but there's

00:10:53,420 --> 00:10:57,740
still a lot of holes we still have this

00:10:56,089 --> 00:11:00,799
whole like assembling a virtual end

00:10:57,740 --> 00:11:03,019
thing that we have to do we have to deal

00:11:00,799 --> 00:11:04,790
with the static files from our Django

00:11:03,019 --> 00:11:07,550
application somehow

00:11:04,790 --> 00:11:09,139
and we need to have a production web

00:11:07,550 --> 00:11:11,269
server like if we want to just download

00:11:09,139 --> 00:11:18,019
a single thing and run it it has to be a

00:11:11,269 --> 00:11:21,199
web server there's lots of projects out

00:11:18,019 --> 00:11:23,800
here or out there that that have kind of

00:11:21,199 --> 00:11:26,949
worked on on this problem lots of people

00:11:23,800 --> 00:11:29,300
have the problem and want to solve it so

00:11:26,949 --> 00:11:30,709
I'm not going to go through each one of

00:11:29,300 --> 00:11:32,449
these individually but these are all

00:11:30,709 --> 00:11:34,459
projects out there that are designed in

00:11:32,449 --> 00:11:37,579
some way to kind of create a pipeline

00:11:34,459 --> 00:11:40,070
with Python where you can build your

00:11:37,579 --> 00:11:42,949
software on one machine and then deploy

00:11:40,070 --> 00:11:46,430
it elsewhere without needing to kind of

00:11:42,949 --> 00:11:48,829
build and assemble it Peck's is an

00:11:46,430 --> 00:11:52,550
interesting one it's been around for a

00:11:48,829 --> 00:11:55,250
long time it's from Twitter and it uses

00:11:52,550 --> 00:11:57,829
this concept from Python called zip

00:11:55,250 --> 00:12:01,250
applications and I always try it away

00:11:57,829 --> 00:12:03,440
from packs I'd heard like it's slow it's

00:12:01,250 --> 00:12:06,139
cumbersome it's you know hard to use

00:12:03,440 --> 00:12:08,350
whatever so it's it's not something I

00:12:06,139 --> 00:12:12,170
ever kind of saw as a viable solution

00:12:08,350 --> 00:12:14,060
but zip apps are interesting so zip

00:12:12,170 --> 00:12:17,959
applications there they've been part of

00:12:14,060 --> 00:12:20,180
Python since version 2.6 they're not

00:12:17,959 --> 00:12:23,779
dead they just got improved support in

00:12:20,180 --> 00:12:27,230
Python 3.5 and what they are is a way to

00:12:23,779 --> 00:12:29,660
create a zip archive of Python files and

00:12:27,230 --> 00:12:33,680
then you can actually run the zip

00:12:29,660 --> 00:12:37,819
archive with Python it's it's kind of

00:12:33,680 --> 00:12:39,500
weird and crazy but it works so the big

00:12:37,819 --> 00:12:41,660
problem with zip applications is there's

00:12:39,500 --> 00:12:44,540
no way of handling dependencies so if I

00:12:41,660 --> 00:12:46,760
want to run you know I can run my Python

00:12:44,540 --> 00:12:49,399
files without a problem but if I want to

00:12:46,760 --> 00:12:54,079
run Jango there's no kind of way for me

00:12:49,399 --> 00:12:57,589
to pip install it well there's a new

00:12:54,079 --> 00:13:00,819
project out there called Shiv and it is

00:12:57,589 --> 00:13:05,959
kind of a reimagine a ssin of packs and

00:13:00,819 --> 00:13:08,180
it comes from it comes from LinkedIn and

00:13:05,959 --> 00:13:10,579
it's a way to build these zip apps and

00:13:08,180 --> 00:13:13,130
include all the dependencies in them so

00:13:10,579 --> 00:13:14,990
you can then generate a single artifact

00:13:13,130 --> 00:13:18,529
which you can run through the pipeline

00:13:14,990 --> 00:13:22,159
build test deploy the common

00:13:18,529 --> 00:13:25,549
extension for zip apps is P Y Z so I can

00:13:22,159 --> 00:13:29,629
create a zip app and then execute it

00:13:25,549 --> 00:13:31,939
kind of like a binary you know I still

00:13:29,629 --> 00:13:36,949
need Python but other than that

00:13:31,939 --> 00:13:42,549
everything's included so can we teach

00:13:36,949 --> 00:13:42,549
django to run as a zip out yeah sir yes

00:13:43,119 --> 00:13:48,559
you can the first thing you need to do

00:13:46,189 --> 00:13:51,319
is make sure your Django project is a

00:13:48,559 --> 00:13:53,149
proper Python package I would recommend

00:13:51,319 --> 00:13:55,729
doing this anyways it's in my opinion

00:13:53,149 --> 00:13:58,249
it's kind of best practice so it's very

00:13:55,729 --> 00:14:00,199
simple to do you just create a set up

00:13:58,249 --> 00:14:03,919
that PI file you drop it in the root of

00:14:00,199 --> 00:14:07,159
your repo and really there's only three

00:14:03,919 --> 00:14:08,779
things necessary here named version

00:14:07,159 --> 00:14:12,199
which you can set arbitrary it doesn't

00:14:08,779 --> 00:14:14,209
matter and packages setup tools includes

00:14:12,199 --> 00:14:15,949
this nice function called fine packages

00:14:14,209 --> 00:14:19,219
and that will go out and find all your

00:14:15,949 --> 00:14:21,199
Python files and include them when it

00:14:19,219 --> 00:14:24,470
wants to distribute your application

00:14:21,199 --> 00:14:26,209
application the last one here is

00:14:24,470 --> 00:14:28,159
optional but I bring it up because we're

00:14:26,209 --> 00:14:30,649
going to talk about it later your

00:14:28,159 --> 00:14:33,859
console scripts entry points console

00:14:30,649 --> 00:14:36,649
scripts this is how when you install

00:14:33,859 --> 00:14:39,229
Django that Django admin shell command

00:14:36,649 --> 00:14:43,339
works and it's basically a way of saying

00:14:39,229 --> 00:14:44,959
telling setup tools that when I when you

00:14:43,339 --> 00:14:47,389
when somebody installs this create a

00:14:44,959 --> 00:14:49,729
script they can run that execute this

00:14:47,389 --> 00:14:52,189
Python function so with this I could

00:14:49,729 --> 00:14:54,919
instead of distributive creating a

00:14:52,189 --> 00:14:57,229
managed by file I can basically do it

00:14:54,919 --> 00:14:58,399
with this line here in setup tools and

00:14:57,229 --> 00:15:02,839
it will create it for me when the

00:14:58,399 --> 00:15:04,159
project installs so the next thing we

00:15:02,839 --> 00:15:06,649
need to deal with is templates our

00:15:04,159 --> 00:15:08,869
templates in static files that fine

00:15:06,649 --> 00:15:11,869
packages command will get all of your

00:15:08,869 --> 00:15:15,349
Python files but it will gladly ignore

00:15:11,869 --> 00:15:16,899
all of their types of files so we need

00:15:15,349 --> 00:15:19,819
to get our static files and templates

00:15:16,899 --> 00:15:22,459
the kind of simplest way to do this is

00:15:19,819 --> 00:15:25,179
to create this manifest INF i'll it also

00:15:22,459 --> 00:15:28,129
goes in the root of your project and

00:15:25,179 --> 00:15:30,829
graft means take this directory and

00:15:28,129 --> 00:15:31,770
anything in it any subdirectories all

00:15:30,829 --> 00:15:34,380
that

00:15:31,770 --> 00:15:39,570
so we would include our collected static

00:15:34,380 --> 00:15:41,760
files and our templates in that now we

00:15:39,570 --> 00:15:45,030
need a production web server you know if

00:15:41,760 --> 00:15:46,980
you're running a django application in a

00:15:45,030 --> 00:15:49,770
docker container you'd expect when you

00:15:46,980 --> 00:15:54,240
start your docker container that it

00:15:49,770 --> 00:15:56,340
serves web requests right so the common

00:15:54,240 --> 00:15:59,790
ones are RG unicorn and u whiskey

00:15:56,340 --> 00:16:01,650
typically we use mod whiskey's also out

00:15:59,790 --> 00:16:07,020
there I'm gonna say that gram sitting in

00:16:01,650 --> 00:16:09,870
the front row but we want these to run

00:16:07,020 --> 00:16:12,180
from our entry point typically what

00:16:09,870 --> 00:16:14,160
we're doing when we deploy these is we

00:16:12,180 --> 00:16:16,800
start our web server and then we tell it

00:16:14,160 --> 00:16:18,480
to import our application and we want to

00:16:16,800 --> 00:16:20,970
kind of flip that on its head we want to

00:16:18,480 --> 00:16:24,030
start our application and tell it to run

00:16:20,970 --> 00:16:27,450
the web server so you can do that

00:16:24,030 --> 00:16:29,460
you could also ship provides a way that

00:16:27,450 --> 00:16:31,140
you can kind of dynamically swap the

00:16:29,460 --> 00:16:33,510
entry point when you start it up but

00:16:31,140 --> 00:16:35,400
feels like kind of a hack let's kind of

00:16:33,510 --> 00:16:39,600
pretend like it is this you know static

00:16:35,400 --> 00:16:42,810
binary so one option is jewnicorn and

00:16:39,600 --> 00:16:45,150
white noise so white noise you use to

00:16:42,810 --> 00:16:47,280
serve your static files in an efficient

00:16:45,150 --> 00:16:49,260
way and it's not too difficult to write

00:16:47,280 --> 00:16:53,760
your own management command which then

00:16:49,260 --> 00:16:56,700
starts G unicorn there's another option

00:16:53,760 --> 00:16:59,520
which we've released recently called

00:16:56,700 --> 00:17:01,680
Django PI you whiskey so we've been

00:16:59,520 --> 00:17:04,440
working with the developer of you

00:17:01,680 --> 00:17:08,310
whiskey when you pip install you whiskey

00:17:04,440 --> 00:17:10,890
you get a binary executable it's not a

00:17:08,310 --> 00:17:14,160
Python thing that you can work with so

00:17:10,890 --> 00:17:16,380
PI you whiskey is a way you can build

00:17:14,160 --> 00:17:18,570
you whiskey's the library and then

00:17:16,380 --> 00:17:21,150
import it in your Python code and run it

00:17:18,570 --> 00:17:22,620
so this includes that management command

00:17:21,150 --> 00:17:26,010
I was talking about so you can run

00:17:22,620 --> 00:17:28,500
manage pi pi u whiskey and you get a

00:17:26,010 --> 00:17:31,890
kind of production web server right out

00:17:28,500 --> 00:17:36,180
of the box pi u whiskey is also

00:17:31,890 --> 00:17:37,890
distributed on pi pi as a wheel so you

00:17:36,180 --> 00:17:39,780
don't have to worry about compiling it

00:17:37,890 --> 00:17:42,620
or anything like that it just you

00:17:39,780 --> 00:17:42,620
download it and it works

00:17:42,670 --> 00:17:48,280
and so with all those pieces in place

00:17:44,770 --> 00:17:50,410
now we can build our zip app what I'm

00:17:48,280 --> 00:17:53,110
gonna do is gonna look just like you

00:17:50,410 --> 00:17:55,360
would probably build any sort of Django

00:17:53,110 --> 00:17:57,670
site for the most part if you were using

00:17:55,360 --> 00:17:59,470
it in docker or you know building it on

00:17:57,670 --> 00:18:02,410
your server or whatever I'm gonna use

00:17:59,470 --> 00:18:04,240
Pippin to install my dependencies that

00:18:02,410 --> 00:18:07,180
way I get the benefit of that lock file

00:18:04,240 --> 00:18:09,340
and that deterministic build then I'm

00:18:07,180 --> 00:18:11,860
gonna do whatever I need to do to build

00:18:09,340 --> 00:18:14,620
my static files this is this is the part

00:18:11,860 --> 00:18:16,840
where you call webpack or run or parcel

00:18:14,620 --> 00:18:19,840
or whatever you're doing and make all

00:18:16,840 --> 00:18:21,790
that happen then I'm gonna run collect

00:18:19,840 --> 00:18:24,790
static get all those static files and

00:18:21,790 --> 00:18:29,500
collect them into a directory and then I

00:18:24,790 --> 00:18:31,690
do the part with Shiv so Shiv you can

00:18:29,500 --> 00:18:34,600
just pip install it install Shiv it's

00:18:31,690 --> 00:18:38,800
just Python and I'll explain these

00:18:34,600 --> 00:18:40,210
options here so - oh is output so I can

00:18:38,800 --> 00:18:43,810
tell it I want to create this file

00:18:40,210 --> 00:18:45,610
called your project py z - II is that

00:18:43,810 --> 00:18:48,850
entry point I talked about so it says

00:18:45,610 --> 00:18:51,280
when I run my project or your project py

00:18:48,850 --> 00:18:53,020
z this is the function I want you to

00:18:51,280 --> 00:18:57,430
call when this one's the one that

00:18:53,020 --> 00:19:00,580
managed out PI uses site packages lets

00:18:57,430 --> 00:19:03,700
me include a preexisting site packages

00:19:00,580 --> 00:19:05,290
directory so i can point to the one that

00:19:03,700 --> 00:19:12,490
Pippin views when it installed my

00:19:05,290 --> 00:19:14,710
project I can also use this ship except

00:19:12,490 --> 00:19:16,960
accepts most of the arguments that pip

00:19:14,710 --> 00:19:19,450
does so you can also pip install

00:19:16,960 --> 00:19:22,660
projects and they will or pip install

00:19:19,450 --> 00:19:26,920
apps and they'll end up in your final

00:19:22,660 --> 00:19:29,290
zip app next is Python so I can't I can

00:19:26,920 --> 00:19:32,920
say like if this gets executed just by

00:19:29,290 --> 00:19:35,200
itself pick up this Python it ends up as

00:19:32,920 --> 00:19:38,650
a shebang line like the first line you

00:19:35,200 --> 00:19:40,450
often see in a script you can also call

00:19:38,650 --> 00:19:42,910
it with Python is the first argument if

00:19:40,450 --> 00:19:45,750
I want to choose a specific Python and

00:19:42,910 --> 00:19:48,310
then the last - the last line there is

00:19:45,750 --> 00:19:51,790
those are just standard pip arguments no

00:19:48,310 --> 00:19:54,250
depths says install my project but don't

00:19:51,790 --> 00:19:56,230
install it with any dependencies that I

00:19:54,250 --> 00:19:57,549
might have specified and

00:19:56,230 --> 00:19:58,929
the dot is like the current working

00:19:57,549 --> 00:20:04,059
directory so that would be where my

00:19:58,929 --> 00:20:07,419
setup dot PI file is so that runs it

00:20:04,059 --> 00:20:09,760
builds this zip app and I'm left with

00:20:07,419 --> 00:20:13,150
something like this so I can run my

00:20:09,760 --> 00:20:14,980
project py z your project up he was a PI

00:20:13,150 --> 00:20:18,570
you whiskey and then I can pass it

00:20:14,980 --> 00:20:20,830
whatever arguments you whiskey accepts

00:20:18,570 --> 00:20:23,260
the only requirement here is that I have

00:20:20,830 --> 00:20:29,410
Python installed everything else is in

00:20:23,260 --> 00:20:31,900
this zip out so the next part we need to

00:20:29,410 --> 00:20:33,070
figure out is configuration a lot of

00:20:31,900 --> 00:20:35,410
times you'll see people installing

00:20:33,070 --> 00:20:37,360
Django apps and then like mucking around

00:20:35,410 --> 00:20:39,220
with settings files or creating them

00:20:37,360 --> 00:20:41,860
dynamically and kind of injecting them

00:20:39,220 --> 00:20:44,410
into the project that won't work with

00:20:41,860 --> 00:20:50,850
this with this solution you kind of have

00:20:44,410 --> 00:20:53,740
a frozen state of your your Python app

00:20:50,850 --> 00:20:54,790
so we want to run the same zip app but

00:20:53,740 --> 00:20:56,740
we're on a run it in different

00:20:54,790 --> 00:20:58,929
environments we want to run it for our

00:20:56,740 --> 00:21:02,679
tests we want to run in staging we want

00:20:58,929 --> 00:21:04,419
to run it in production so one option is

00:21:02,679 --> 00:21:05,860
is multiple settings files you have a

00:21:04,419 --> 00:21:07,330
bunch of settings files for all your

00:21:05,860 --> 00:21:09,179
different environments and you toggle

00:21:07,330 --> 00:21:11,740
them with the Django settings module in

00:21:09,179 --> 00:21:13,690
environment variable I don't recommend

00:21:11,740 --> 00:21:15,880
this approach you still have to deal

00:21:13,690 --> 00:21:17,500
with secrets like database passwords and

00:21:15,880 --> 00:21:20,350
API keys and you don't want to put those

00:21:17,500 --> 00:21:23,230
into your project so this isn't a great

00:21:20,350 --> 00:21:25,179
option another option is environment

00:21:23,230 --> 00:21:28,299
variables so this is kind of the 12

00:21:25,179 --> 00:21:30,520
factor method of building apps you you

00:21:28,299 --> 00:21:32,429
create a grappling and then you use

00:21:30,520 --> 00:21:35,919
environment variables to configure them

00:21:32,429 --> 00:21:39,130
that's a viable solution there's another

00:21:35,919 --> 00:21:43,540
one this is another project I've been

00:21:39,130 --> 00:21:45,880
working on with Chris Bevin as well it's

00:21:43,540 --> 00:21:49,210
called good conf so what good kampf does

00:21:45,880 --> 00:21:51,549
is it lets you define a set of variables

00:21:49,210 --> 00:21:53,470
that you might want to change and this

00:21:51,549 --> 00:21:56,350
isn't Django specific it's would work

00:21:53,470 --> 00:21:58,929
with any Python application and you so

00:21:56,350 --> 00:22:00,910
you create your your kind of

00:21:58,929 --> 00:22:03,220
configuration and it might be your

00:22:00,910 --> 00:22:05,980
database URL or your API keys and that

00:22:03,220 --> 00:22:08,860
kind of thing and then you can define

00:22:05,980 --> 00:22:09,940
that in a JSON or Yambol file some sort

00:22:08,860 --> 00:22:11,769
of structured format

00:22:09,940 --> 00:22:14,649
it's easy for a build tool or a

00:22:11,769 --> 00:22:18,190
configuration management system to pump

00:22:14,649 --> 00:22:21,220
out and then your django app will pick

00:22:18,190 --> 00:22:22,899
up those files and read them one of the

00:22:21,220 --> 00:22:24,970
one of the things I really like about

00:22:22,899 --> 00:22:28,600
this is it lets you document all those

00:22:24,970 --> 00:22:29,950
variables that you're using to configure

00:22:28,600 --> 00:22:31,870
your app which with environment

00:22:29,950 --> 00:22:35,110
variables they kind of tend to get added

00:22:31,870 --> 00:22:37,259
willy-nilly and people don't ever you

00:22:35,110 --> 00:22:39,909
know know which ones are available and

00:22:37,259 --> 00:22:42,519
the other thing is this will fall back

00:22:39,909 --> 00:22:44,320
on environment variables too so I can

00:22:42,519 --> 00:22:48,759
take my same project and run it you know

00:22:44,320 --> 00:22:52,210
the way I want to with with a

00:22:48,759 --> 00:22:53,830
configuration file but I could also run

00:22:52,210 --> 00:22:55,210
it on Heroku or in docker where

00:22:53,830 --> 00:22:58,210
environment variables are kind of

00:22:55,210 --> 00:23:00,490
preferred and I don't know if I

00:22:58,210 --> 00:23:02,620
mentioned this I think I skipped it but

00:23:00,490 --> 00:23:05,559
the other concern with environment

00:23:02,620 --> 00:23:08,259
variables is it's really easy to leak

00:23:05,559 --> 00:23:10,120
them on accident you can have a you know

00:23:08,259 --> 00:23:13,360
a program crash and it dumps out your

00:23:10,120 --> 00:23:15,340
environment somewhere or child process

00:23:13,360 --> 00:23:18,340
runs and it now has access to your

00:23:15,340 --> 00:23:20,889
environment so by putting them in a file

00:23:18,340 --> 00:23:23,460
instead I would argue you get a little

00:23:20,889 --> 00:23:23,460
better security

00:23:24,419 --> 00:23:32,110
so now kind of going back to this

00:23:28,539 --> 00:23:37,450
pipeline the docker pipeline how do we

00:23:32,110 --> 00:23:39,070
replicate that with a zip app so you'd

00:23:37,450 --> 00:23:41,169
use a continued continuous integration

00:23:39,070 --> 00:23:43,480
system there's a bazillion out there

00:23:41,169 --> 00:23:47,919
travis circle CI bitbucket get lab

00:23:43,480 --> 00:23:50,409
whatever you build your project that's

00:23:47,919 --> 00:23:52,480
that slide I showed you with pip M and

00:23:50,409 --> 00:23:55,899
collect static and all that and just

00:23:52,480 --> 00:23:57,730
like you would with docker and you're

00:23:55,899 --> 00:24:00,970
gonna run Shiv which is going to

00:23:57,730 --> 00:24:03,250
generate your zip app you'll run your

00:24:00,970 --> 00:24:05,710
tests against that so you'll have your

00:24:03,250 --> 00:24:08,590
tests built in as part of that so you

00:24:05,710 --> 00:24:12,610
can ensure again the thing you test is

00:24:08,590 --> 00:24:14,559
the exact same thing you deploy and then

00:24:12,610 --> 00:24:17,049
once your tests pass you push it to some

00:24:14,559 --> 00:24:19,360
central location that could be Amazon s3

00:24:17,049 --> 00:24:23,350
or you know wherever you can pull it

00:24:19,360 --> 00:24:23,710
down to deploy and now a deployment just

00:24:23,350 --> 00:24:26,500
is

00:24:23,710 --> 00:24:28,480
download the thing and run it which is

00:24:26,500 --> 00:24:30,970
awesome like your Ops teams are gonna

00:24:28,480 --> 00:24:33,429
love you for you know simplifying their

00:24:30,970 --> 00:24:35,500
life and it's great for development

00:24:33,429 --> 00:24:38,500
teams too because they can kind of take

00:24:35,500 --> 00:24:41,649
full control over everything in the CI

00:24:38,500 --> 00:24:43,630
pipeline they you know if you want to

00:24:41,649 --> 00:24:45,669
switch you were using grunt before and

00:24:43,630 --> 00:24:48,100
now you want to use webpack like you

00:24:45,669 --> 00:24:49,840
don't have to your developers can kind

00:24:48,100 --> 00:24:51,520
of manage that and they know the the

00:24:49,840 --> 00:24:56,279
only thing they have to churn out and

00:24:51,520 --> 00:24:56,279
end is this zip app to be deployed

00:24:57,450 --> 00:25:01,659
so zip apps like aren't looking so bad

00:25:00,010 --> 00:25:03,820
like pythons looking a little better

00:25:01,659 --> 00:25:07,510
he's no longer the kind of awkward dude

00:25:03,820 --> 00:25:11,559
with the bowl cut right but that's not

00:25:07,510 --> 00:25:14,529
all docker brains what about security so

00:25:11,559 --> 00:25:17,440
how do we get you know similar sense of

00:25:14,529 --> 00:25:20,039
security here well system DS got your

00:25:17,440 --> 00:25:20,039
back on this one

00:25:20,520 --> 00:25:25,779
system he's awesome like if you are not

00:25:23,679 --> 00:25:29,020
familiar with it definitely check it out

00:25:25,779 --> 00:25:31,809
it gets a bad rap in a Linux community

00:25:29,020 --> 00:25:36,130
sometimes but it is on every modern

00:25:31,809 --> 00:25:38,130
Linux distro you know learn it use it

00:25:36,130 --> 00:25:41,679
love it

00:25:38,130 --> 00:25:43,990
so well I'll mention quick if you're not

00:25:41,679 --> 00:25:46,750
super familiar with system D it's how

00:25:43,990 --> 00:25:49,779
all the services on your Linux machines

00:25:46,750 --> 00:25:52,929
start up and run and stop and restart

00:25:49,779 --> 00:25:55,899
and all that it manages that and the way

00:25:52,929 --> 00:25:59,140
you define a service is the service file

00:25:55,899 --> 00:26:00,610
and you tell it what command you wanted

00:25:59,140 --> 00:26:03,100
to run and you can give it all sorts of

00:26:00,610 --> 00:26:06,970
other flags that tell it how you want it

00:26:03,100 --> 00:26:10,360
to run so I'm going to give you some

00:26:06,970 --> 00:26:13,539
that are gonna deal with security you

00:26:10,360 --> 00:26:16,600
drop these in your service file protect

00:26:13,539 --> 00:26:19,240
system strict that will make your entire

00:26:16,600 --> 00:26:21,730
file system read-only so you know right

00:26:19,240 --> 00:26:24,340
off the bat it's super easy like now if

00:26:21,730 --> 00:26:27,669
some in the scenario we're protecting

00:26:24,340 --> 00:26:29,830
against here is some nefarious user has

00:26:27,669 --> 00:26:32,110
hacked your application and is now

00:26:29,830 --> 00:26:36,370
trying to run commands you know on your

00:26:32,110 --> 00:26:37,480
host system so we've now made the entire

00:26:36,370 --> 00:26:40,590
file system read-only they

00:26:37,480 --> 00:26:43,630
can't create any files or edit any files

00:26:40,590 --> 00:26:45,730
there's a protect home equals true that

00:26:43,630 --> 00:26:47,440
just basically removes any home direct

00:26:45,730 --> 00:26:49,059
removes any access to any home

00:26:47,440 --> 00:26:50,980
directories so even if somebody has like

00:26:49,059 --> 00:26:54,419
the bad permissions on their home

00:26:50,980 --> 00:26:56,710
directory like they can't access it

00:26:54,419 --> 00:26:58,750
dynamic user equals true so best

00:26:56,710 --> 00:27:02,260
practice is that you've run each service

00:26:58,750 --> 00:27:03,910
as its own user that way one service

00:27:02,260 --> 00:27:06,480
doesn't potentially gain access to

00:27:03,910 --> 00:27:08,620
things and other service is doing

00:27:06,480 --> 00:27:10,809
usually you would you know create these

00:27:08,620 --> 00:27:12,790
users as you set up the services dynamic

00:27:10,809 --> 00:27:14,860
user equals true just tell system D like

00:27:12,790 --> 00:27:17,710
hey do that for me like just create some

00:27:14,860 --> 00:27:19,450
user I don't care who it is and you know

00:27:17,710 --> 00:27:23,559
when the service is done you can remove

00:27:19,450 --> 00:27:25,720
it there's capability bounding set so

00:27:23,559 --> 00:27:29,530
this is probably familiar if some of you

00:27:25,720 --> 00:27:32,530
have used docker quite a bit this lets

00:27:29,530 --> 00:27:34,600
you determine the capabilities the kind

00:27:32,530 --> 00:27:37,870
of Linux capabilities that the process

00:27:34,600 --> 00:27:38,590
has access to the tilde means like

00:27:37,870 --> 00:27:41,860
negate it

00:27:38,590 --> 00:27:44,200
so this says my service cannot do

00:27:41,860 --> 00:27:46,299
anything in the caps this admin group so

00:27:44,200 --> 00:27:49,419
that basically is removing like kind of

00:27:46,299 --> 00:27:52,450
route like abilities or anything the

00:27:49,419 --> 00:27:53,320
service is doing and there's a whole

00:27:52,450 --> 00:27:55,679
bunch of others too

00:27:53,320 --> 00:27:58,410
so I could create a a primer profile

00:27:55,679 --> 00:28:01,929
that gives you really really fine grain

00:27:58,410 --> 00:28:05,320
permission control and there's these

00:28:01,929 --> 00:28:07,330
which the system D Doc's recommend

00:28:05,320 --> 00:28:09,820
adding I'm not going to go through each

00:28:07,330 --> 00:28:12,040
one private temp is an interesting one

00:28:09,820 --> 00:28:14,320
that's like a attack vector you see

00:28:12,040 --> 00:28:16,299
sometimes where two services are both

00:28:14,320 --> 00:28:18,669
writing to a temp directory one service

00:28:16,299 --> 00:28:20,230
gets hacked and it starts reading what

00:28:18,669 --> 00:28:22,270
the other service is doing in the temp

00:28:20,230 --> 00:28:24,520
directory and gains some sort of

00:28:22,270 --> 00:28:28,299
interesting thing it shouldn't through

00:28:24,520 --> 00:28:31,750
that so this will bind Mau to a private

00:28:28,299 --> 00:28:33,760
temp directory for every service another

00:28:31,750 --> 00:28:35,940
thing interesting I don't have time to

00:28:33,760 --> 00:28:38,790
talk about it but one of the kind of

00:28:35,940 --> 00:28:41,380
things that people really like about

00:28:38,790 --> 00:28:43,480
things like kubernetes is the ability to

00:28:41,380 --> 00:28:45,580
do rolling deployments Bluegreen

00:28:43,480 --> 00:28:47,679
deployments where you have one version

00:28:45,580 --> 00:28:50,260
of your software running and you want to

00:28:47,679 --> 00:28:50,980
run a new version this is typically than

00:28:50,260 --> 00:28:53,590
kind of a

00:28:50,980 --> 00:28:56,530
pain point for the Python community and

00:28:53,590 --> 00:28:58,210
that kind of reloading and getting the

00:28:56,530 --> 00:29:00,010
new service running as your project gets

00:28:58,210 --> 00:29:02,380
bigger it takes longer for you to start

00:29:00,010 --> 00:29:04,809
up your service and it's sort of

00:29:02,380 --> 00:29:06,370
difficult to do that dance where you

00:29:04,809 --> 00:29:09,610
take one service down and bring the new

00:29:06,370 --> 00:29:12,090
one up without any downtime and sort of

00:29:09,610 --> 00:29:14,500
the common practice these days is

00:29:12,090 --> 00:29:16,720
managing that via your load balancer or

00:29:14,500 --> 00:29:18,669
something where you bring both both ends

00:29:16,720 --> 00:29:19,990
up you've got your your blue version

00:29:18,669 --> 00:29:22,390
your green version they're both running

00:29:19,990 --> 00:29:24,340
side by side for a moment once your new

00:29:22,390 --> 00:29:26,530
version kind of passes health checks and

00:29:24,340 --> 00:29:27,940
is happy you drop your old one out and

00:29:26,530 --> 00:29:29,440
and then you just point all your traffic

00:29:27,940 --> 00:29:31,210
to your new one

00:29:29,440 --> 00:29:33,370
if you're interested in it you can do

00:29:31,210 --> 00:29:35,049
this with system D on a single machine

00:29:33,370 --> 00:29:36,700
without having to orchestrate and

00:29:35,049 --> 00:29:38,950
coordinate with load balancers or use

00:29:36,700 --> 00:29:40,299
something like kubernetes I don't have

00:29:38,950 --> 00:29:45,179
time to go into it but I'd be happy to

00:29:40,299 --> 00:29:45,179
kind of show somebody after the talk

00:29:46,320 --> 00:29:51,340
isolation that was the other thing we

00:29:48,190 --> 00:29:54,880
mentioned was cool about docker so how

00:29:51,340 --> 00:29:57,910
do we handle that I'll be frank it's not

00:29:54,880 --> 00:30:01,780
as good you still need to install Python

00:29:57,910 --> 00:30:05,110
globally if you're using Python packages

00:30:01,780 --> 00:30:08,049
that are referencing you know libraries

00:30:05,110 --> 00:30:09,460
on the server there's a chance you may

00:30:08,049 --> 00:30:10,960
need to install those you don't need the

00:30:09,460 --> 00:30:13,860
development packages but you may need

00:30:10,960 --> 00:30:16,540
the library itself if you don't have

00:30:13,860 --> 00:30:20,710
these wheels built for for all your

00:30:16,540 --> 00:30:22,540
packages but that being said it's really

00:30:20,710 --> 00:30:24,190
easy to install multiple Python versions

00:30:22,540 --> 00:30:25,990
on a server if you're using a bun too

00:30:24,190 --> 00:30:28,150
there's a personal package archive

00:30:25,990 --> 00:30:31,299
called dead snakes you can easily

00:30:28,150 --> 00:30:33,820
install three six three seven two seven

00:30:31,299 --> 00:30:34,450
whatever they'll all happily live

00:30:33,820 --> 00:30:37,540
side-by-side

00:30:34,450 --> 00:30:39,520
so yeah Dockers got better isolation but

00:30:37,540 --> 00:30:41,530
it you know at the end of the day do you

00:30:39,520 --> 00:30:44,110
really need it especially if we're you

00:30:41,530 --> 00:30:48,700
know kind of bundling our apps in this

00:30:44,110 --> 00:30:50,049
way and then how about parody what that

00:30:48,700 --> 00:30:52,510
was kind of the last thing on my

00:30:50,049 --> 00:30:54,250
original slide is you get this parody

00:30:52,510 --> 00:30:58,210
from your development she machine all

00:30:54,250 --> 00:30:59,770
the way to production in this scenario

00:30:58,210 --> 00:31:01,390
you're still going to get it from your

00:30:59,770 --> 00:31:03,580
continuous integration system all the

00:31:01,390 --> 00:31:04,690
way to production that's probably the

00:31:03,580 --> 00:31:07,930
important bit

00:31:04,690 --> 00:31:09,910
as far as locally you can use docker

00:31:07,930 --> 00:31:14,260
it's a great use case for docker to run

00:31:09,910 --> 00:31:19,000
a image that's the same as your deployed

00:31:14,260 --> 00:31:21,460
machine or not like you know we have

00:31:19,000 --> 00:31:23,740
lots of developers that work on Macs and

00:31:21,460 --> 00:31:24,850
deploy to Linux and that's generally you

00:31:23,740 --> 00:31:28,030
know something you can do these days

00:31:24,850 --> 00:31:36,490
without being terrified that you know

00:31:28,030 --> 00:31:39,130
the world's going to break so pros and

00:31:36,490 --> 00:31:41,170
cons approach like hopefully I've showed

00:31:39,130 --> 00:31:46,690
you at this point like you can deploy a

00:31:41,170 --> 00:31:49,270
single file Python project Prost is it's

00:31:46,690 --> 00:31:50,770
simpler you don't have to put docker on

00:31:49,270 --> 00:31:52,300
your server you don't have to manage a

00:31:50,770 --> 00:31:55,960
docker registry or pay somebody to

00:31:52,300 --> 00:31:57,760
manage one for you and you are now

00:31:55,960 --> 00:31:58,930
depending on about a million less lines

00:31:57,760 --> 00:32:01,330
of go code

00:31:58,930 --> 00:32:04,780
my guess is for most people when

00:32:01,330 --> 00:32:07,420
something breaks with docker it's like a

00:32:04,780 --> 00:32:09,220
crap moment like I have no way to debug

00:32:07,420 --> 00:32:10,630
this or deal with this on my own

00:32:09,220 --> 00:32:14,710
hopefully somebody else is dealt with

00:32:10,630 --> 00:32:16,570
this and I can google it you get smaller

00:32:14,710 --> 00:32:20,770
artifacts so we're not bundling the

00:32:16,570 --> 00:32:24,460
entire OS if you if you are building

00:32:20,770 --> 00:32:27,220
docker images kind of naively it's not

00:32:24,460 --> 00:32:30,310
uncommon to have a gig or two gig docker

00:32:27,220 --> 00:32:32,080
images with this you're probably looking

00:32:30,310 --> 00:32:32,380
more at like 100 Meg's or something like

00:32:32,080 --> 00:32:35,440
that

00:32:32,380 --> 00:32:37,300
depends on your project because your

00:32:35,440 --> 00:32:38,980
artifacts are smaller your deployments

00:32:37,300 --> 00:32:41,590
are faster it's a big difference

00:32:38,980 --> 00:32:45,760
deploying you know 100 Meg artifact

00:32:41,590 --> 00:32:47,740
versus a two gig artifact and then

00:32:45,760 --> 00:32:49,750
finally it's just Python like there's

00:32:47,740 --> 00:32:52,300
not a whole lot of magic going on here

00:32:49,750 --> 00:32:55,030
there's not a million lines of go code

00:32:52,300 --> 00:32:56,770
that you're depending on so when things

00:32:55,030 --> 00:32:57,910
do break you can look under the hood and

00:32:56,770 --> 00:33:04,060
figure it out

00:32:57,910 --> 00:33:05,440
Shiv is a very simple project and I just

00:33:04,060 --> 00:33:08,800
realized I didn't really explain how

00:33:05,440 --> 00:33:13,600
Shiv works so I'll give you that really

00:33:08,800 --> 00:33:15,100
quick so what what Shiv does is it takes

00:33:13,600 --> 00:33:18,130
all your dependencies or your site

00:33:15,100 --> 00:33:18,580
packages directory it puts it into the

00:33:18,130 --> 00:33:21,520
zip

00:33:18,580 --> 00:33:23,620
at the zip file along with like a small

00:33:21,520 --> 00:33:29,020
bootstrap script and when you execute

00:33:23,620 --> 00:33:32,590
the zip app it will unpack the your site

00:33:29,020 --> 00:33:34,660
packages and then basically inject the

00:33:32,590 --> 00:33:36,850
path where it unpacked them into your

00:33:34,660 --> 00:33:39,850
Python path so it's the first thing that

00:33:36,850 --> 00:33:42,520
gets picked up you can read the code and

00:33:39,850 --> 00:33:46,600
understand it and it's not terribly

00:33:42,520 --> 00:33:49,060
difficult to understand the second time

00:33:46,600 --> 00:33:52,270
you run it it knows where that kind of

00:33:49,060 --> 00:33:53,890
temporary cache it created is and so it

00:33:52,270 --> 00:34:00,970
doesn't need to unpack them the second

00:33:53,890 --> 00:34:02,670
time cons so it's not as isolated it's

00:34:00,970 --> 00:34:05,530
true containers that's true

00:34:02,670 --> 00:34:07,890
it requires Python being installed on

00:34:05,530 --> 00:34:07,890
your server

00:34:08,040 --> 00:34:13,480
it's Python specific so docker you can

00:34:11,920 --> 00:34:17,830
use with any number of languages and

00:34:13,480 --> 00:34:20,740
it'll work the same not so with this and

00:34:17,830 --> 00:34:22,240
it's not cross-platform compatible I

00:34:20,740 --> 00:34:24,610
mean technically docker isn't really

00:34:22,240 --> 00:34:26,380
either but you can't build stuff you

00:34:24,610 --> 00:34:29,530
can't build a zip app with C extensions

00:34:26,380 --> 00:34:31,120
on your Mac and ship it to Linux but you

00:34:29,530 --> 00:34:34,570
could build it in a docker container

00:34:31,120 --> 00:34:39,540
that is Linux on your Mac and send it

00:34:34,570 --> 00:34:43,810
that way so what's the sweet spot here

00:34:39,540 --> 00:34:45,250
you know docker a few takes away to

00:34:43,810 --> 00:34:47,890
anything from this talk docker is not

00:34:45,250 --> 00:34:51,550
for everybody and this solution

00:34:47,890 --> 00:34:52,960
certainly isn't for everybody I would

00:34:51,550 --> 00:34:56,980
say if you're if you're deploying

00:34:52,960 --> 00:34:59,740
primarily Python services you've

00:34:56,980 --> 00:35:01,960
outgrown platform as a service I'm a

00:34:59,740 --> 00:35:05,770
huge fan of platform as-a-service things

00:35:01,960 --> 00:35:08,020
like Heroku Python anywhere all these

00:35:05,770 --> 00:35:09,400
options out there it should be where

00:35:08,020 --> 00:35:12,040
you're starting when you're looking to

00:35:09,400 --> 00:35:14,200
deploy stuff unless for some reason

00:35:12,040 --> 00:35:18,400
you're like super interested in learning

00:35:14,200 --> 00:35:19,750
these things these kind of tools you

00:35:18,400 --> 00:35:22,780
don't have to worry about it they deal

00:35:19,750 --> 00:35:25,240
with it for you but people tend to

00:35:22,780 --> 00:35:27,370
outgrow them like they either find like

00:35:25,240 --> 00:35:29,200
at some point it makes more sense from a

00:35:27,370 --> 00:35:31,510
financial perspective to bringing these

00:35:29,200 --> 00:35:32,490
things in-house or they need more

00:35:31,510 --> 00:35:36,290
flexibility than

00:35:32,490 --> 00:35:38,580
get with with one of these options and

00:35:36,290 --> 00:35:40,260
this is an arbitrary number but I'm

00:35:38,580 --> 00:35:42,480
gonna say if you have fewer than 50

00:35:40,260 --> 00:35:44,690
services to maintain so if you have a

00:35:42,480 --> 00:35:46,490
hundreds of services a thousand services

00:35:44,690 --> 00:35:50,190
something like kubernetes

00:35:46,490 --> 00:35:52,380
is probably where you want to be it's

00:35:50,190 --> 00:35:54,830
kind of the it's designed for doing

00:35:52,380 --> 00:35:57,270
exactly that but most people aren't

00:35:54,830 --> 00:35:59,280
Google scale most people are not

00:35:57,270 --> 00:36:01,230
deploying hundreds and thousands of

00:35:59,280 --> 00:36:05,660
service services most people are

00:36:01,230 --> 00:36:08,450
deploying one too and and at that scale

00:36:05,660 --> 00:36:12,930
the payoff might not be there

00:36:08,450 --> 00:36:17,250
so next time you're faced with a scary

00:36:12,930 --> 00:36:21,990
deployment scenario I hope you remember

00:36:17,250 --> 00:36:24,510
there are multiple options docker is a

00:36:21,990 --> 00:36:27,300
great option and but Python is not so

00:36:24,510 --> 00:36:32,360
bad on its own and you can certainly

00:36:27,300 --> 00:36:35,570
have you know these secure single file

00:36:32,360 --> 00:36:43,350
deployments with Python

00:36:35,570 --> 00:36:46,890
so thank you I be thanks very much for

00:36:43,350 --> 00:36:49,380
they talk have you used Shiv and the zip

00:36:46,890 --> 00:36:52,440
apps at all with lambda I realize it's

00:36:49,380 --> 00:36:55,920
not entirely or aw slam door a sure

00:36:52,440 --> 00:37:03,030
functions or whatever I haven't yet but

00:36:55,920 --> 00:37:06,359
I noticed that in the configuration

00:37:03,030 --> 00:37:08,910
setup top hi you exposed manage dot pi

00:37:06,359 --> 00:37:10,859
I was wondering for use with mod whiskey

00:37:08,910 --> 00:37:12,420
if there might be any way to expose do

00:37:10,859 --> 00:37:13,800
you have to expose whiskey dot PI in

00:37:12,420 --> 00:37:18,960
some way in the zip is that a

00:37:13,800 --> 00:37:22,020
possibility right so the the way I've

00:37:18,960 --> 00:37:25,619
been running the Wizards with this is by

00:37:22,020 --> 00:37:27,270
wrapping it in a management command so I

00:37:25,619 --> 00:37:30,030
call I can still call the management

00:37:27,270 --> 00:37:33,270
command and then that executes the

00:37:30,030 --> 00:37:38,040
whiskey application another option would

00:37:33,270 --> 00:37:42,690
be to change the entry point via so you

00:37:38,040 --> 00:37:45,999
would install you know I'm not super up

00:37:42,690 --> 00:37:48,219
to date on how mod whiskey work

00:37:45,999 --> 00:37:54,309
but I bet Graham has lots of ideas on

00:37:48,219 --> 00:37:58,629
this yeah so you you could execute you

00:37:54,309 --> 00:38:02,949
could include other servers in your zip

00:37:58,629 --> 00:38:04,929
app assuming they're Python and adjust

00:38:02,949 --> 00:38:07,100
the entry point to run those if you

00:38:04,929 --> 00:38:14,739
wanted to thank you

00:38:07,100 --> 00:38:14,739

YouTube URL: https://www.youtube.com/watch?v=Jzf8gTLN1To


