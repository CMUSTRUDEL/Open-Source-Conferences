Title: DjangoCon US 2018 - Code Review Skills for Pythonistas by Nina Zakharenko
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - Code Review Skills for Pythonistas by Nina Zakharenko

As teams and projects grow, code review becomes increasingly important to support the maintainability of complex codebases. In this talk, Iâ€™ll cover guidelines for writing consistent python code beyond pep8, how to look out for common python gotchas, and what python tools are available to automate various parts of the review process. Most importantly, Iâ€™ll cover the human aspect of code reviews - how we can be better at approaching reviews with empathy and understanding from the perspective of both a reviewer and a submitter. Following these successful code review practices will lead to happier teams and healthier code bases.

This talk was presented at: https://2018.djangocon.us/talk/code-review-skills-for-pythonistas/

LINKS:
Follow Nina Zakharenko ðŸ‘‡
On Twitter: https://twitter.com/nnja
Official homepage: http://nnja.io
Github: https://github.com/nnja/

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,680 --> 00:00:21,750
hi everyone I hope you're having a

00:00:18,270 --> 00:00:23,640
lovely Gengo con my name is Nina I've

00:00:21,750 --> 00:00:25,529
been writing code professionally for

00:00:23,640 --> 00:00:27,060
over a decade now I've worked at some

00:00:25,529 --> 00:00:31,170
companies you might have heard of like

00:00:27,060 --> 00:00:33,239
HBO meetup reddit these days I work at

00:00:31,170 --> 00:00:35,520
Microsoft as a cloud developer advocate

00:00:33,239 --> 00:00:38,160
that means that my goal is to make the

00:00:35,520 --> 00:00:42,149
Python experience on Azure a pleasure

00:00:38,160 --> 00:00:44,070
for Python developers everywhere that

00:00:42,149 --> 00:00:45,870
right there is our mascot bit if you

00:00:44,070 --> 00:00:47,430
think he's cute please find me after the

00:00:45,870 --> 00:00:50,969
talk I have lots of stickers to give

00:00:47,430 --> 00:00:53,160
away and today we're going to talk about

00:00:50,969 --> 00:00:55,140
code review skills for Python uses

00:00:53,160 --> 00:00:58,020
the slides are available online at the

00:00:55,140 --> 00:00:59,820
link up above grab a copy to follow

00:00:58,020 --> 00:01:01,920
along if you'd like to share with your

00:00:59,820 --> 00:01:05,790
coworkers there's lots of links in the

00:01:01,920 --> 00:01:08,310
slides and helpful resources quick show

00:01:05,790 --> 00:01:12,240
of hands how many people here have been

00:01:08,310 --> 00:01:15,630
part of a code review okay almost

00:01:12,240 --> 00:01:18,180
everyone now how many of you have only

00:01:15,630 --> 00:01:23,250
had a positive experience with code

00:01:18,180 --> 00:01:30,090
reviews three people I want to talk to

00:01:23,250 --> 00:01:32,430
you after this okay so not many and my

00:01:30,090 --> 00:01:34,229
goal today is to change that so after

00:01:32,430 --> 00:01:36,390
this talk you're going to know how to

00:01:34,229 --> 00:01:39,540
make the code review process one that's

00:01:36,390 --> 00:01:41,640
positive and productive let's try

00:01:39,540 --> 00:01:43,380
something fun during this talk if you're

00:01:41,640 --> 00:01:44,970
on Twitter if you're learning something

00:01:43,380 --> 00:01:47,310
new if you're excited about something

00:01:44,970 --> 00:01:49,380
you've heard today please go ahead ahead

00:01:47,310 --> 00:01:51,509
and share tweet the hashtag for this

00:01:49,380 --> 00:01:56,250
conference is Jango Khan you can app

00:01:51,509 --> 00:01:57,659
mention me my username is an nja now to

00:01:56,250 --> 00:02:00,360
briefly cover what we're going to talk

00:01:57,659 --> 00:02:02,280
about today I want to tell you what the

00:02:00,360 --> 00:02:04,439
proven benefits of code review are and

00:02:02,280 --> 00:02:06,630
those are going to be based on research

00:02:04,439 --> 00:02:08,819
and on case studies we're going to talk

00:02:06,630 --> 00:02:10,349
about setting standards I'm gonna go

00:02:08,819 --> 00:02:12,209
over some tools with you that are gonna

00:02:10,349 --> 00:02:12,680
make the review process a lot better and

00:02:12,209 --> 00:02:14,689
easier

00:02:12,680 --> 00:02:16,969
Python developers with automation

00:02:14,689 --> 00:02:19,489
because everybody likes it when their

00:02:16,969 --> 00:02:21,620
job is easier I'm gonna give you

00:02:19,489 --> 00:02:23,840
specific examples of how to be an

00:02:21,620 --> 00:02:25,849
effective reviewer and a submitter how

00:02:23,840 --> 00:02:27,680
to submit your PRS for maximum impact

00:02:25,849 --> 00:02:29,780
and lastly I'm going to share how to use

00:02:27,680 --> 00:02:34,340
those tools to build a much stronger

00:02:29,780 --> 00:02:36,560
team what will you take away from this

00:02:34,340 --> 00:02:38,540
talk if you're a complete beginner

00:02:36,560 --> 00:02:40,609
you're gonna have a comprehensive

00:02:38,540 --> 00:02:43,280
overview of code review best practices

00:02:40,609 --> 00:02:45,319
if you're intermediate you're gonna

00:02:43,280 --> 00:02:47,900
learn about tooling and automation if

00:02:45,319 --> 00:02:49,790
you're a total pro you're going to learn

00:02:47,900 --> 00:02:55,010
about the hardest part and that's the

00:02:49,790 --> 00:02:57,019
people factor remember that this talk is

00:02:55,010 --> 00:02:59,239
not one-size-fits-all I'm offering you

00:02:57,019 --> 00:03:01,189
suggestions here--he to adjust them

00:02:59,239 --> 00:03:03,439
based on your own work situation there's

00:03:01,189 --> 00:03:05,659
some factors here like team size taking

00:03:03,439 --> 00:03:08,510
the time to review will affect a team of

00:03:05,659 --> 00:03:10,459
to much greater than a team of 10 your

00:03:08,510 --> 00:03:12,379
product type makes a difference if

00:03:10,459 --> 00:03:15,019
you're in an agency you might have

00:03:12,379 --> 00:03:16,519
tighter deadlines you might have more of

00:03:15,019 --> 00:03:20,269
an incentive to just try to push code

00:03:16,519 --> 00:03:21,769
out the door and if you're working on

00:03:20,269 --> 00:03:24,349
open source that's also a big factor

00:03:21,769 --> 00:03:26,540
when your coworkers you have a lot more

00:03:24,349 --> 00:03:28,040
motivation to work together if you're

00:03:26,540 --> 00:03:30,290
working on open source the rules are

00:03:28,040 --> 00:03:32,389
just a little bit different paycheck

00:03:30,290 --> 00:03:34,849
really offers incentives that's hard to

00:03:32,389 --> 00:03:36,889
compete with and you might have some

00:03:34,849 --> 00:03:40,810
friction there because of things like

00:03:36,889 --> 00:03:43,549
language barriers different time zones

00:03:40,810 --> 00:03:45,889
it's also not one size fits all because

00:03:43,549 --> 00:03:48,169
of defect tolerance what is a defect

00:03:45,889 --> 00:03:51,079
tolerance it's the rate of failure

00:03:48,169 --> 00:03:53,180
that's acceptable in your software if

00:03:51,079 --> 00:03:55,220
you're dealing with something like a

00:03:53,180 --> 00:03:56,870
cell phone game you have a high defect

00:03:55,220 --> 00:03:59,870
tolerance if the phone game crashes

00:03:56,870 --> 00:04:01,400
whatever who cares right but you'll have

00:03:59,870 --> 00:04:03,379
low tolerance if you're writing software

00:04:01,400 --> 00:04:07,879
as a person thing like medical equipment

00:04:03,379 --> 00:04:11,030
or an airplane because um you might get

00:04:07,879 --> 00:04:13,430
zapped in it in in a medical machine if

00:04:11,030 --> 00:04:16,220
your codes not thoroughly reviewed and

00:04:13,430 --> 00:04:18,620
tested and someone left but that this is

00:04:16,220 --> 00:04:23,120
true this happened in the in the course

00:04:18,620 --> 00:04:26,060
of software development um

00:04:23,120 --> 00:04:29,360
and code reviews can seem really

00:04:26,060 --> 00:04:30,860
frustrating on the surface just I mean

00:04:29,360 --> 00:04:34,310
look at this developer she's so angry

00:04:30,860 --> 00:04:37,520
that she's eating her laptop code

00:04:34,310 --> 00:04:40,520
reviews shouldn't be this frustrating we

00:04:37,520 --> 00:04:43,699
don't want that to be us some of those

00:04:40,520 --> 00:04:45,710
apparent frustrations people think I

00:04:43,699 --> 00:04:47,479
might add a time demand that can be

00:04:45,710 --> 00:04:50,720
especially noticeable on smaller teams

00:04:47,479 --> 00:04:54,199
and ads process and everyone hates

00:04:50,720 --> 00:04:56,389
process right it can bring up some team

00:04:54,199 --> 00:05:00,320
tensions I mean these can bring up egos

00:04:56,389 --> 00:05:01,850
personality and compatibility is can

00:05:00,320 --> 00:05:04,130
flare up some of those hidden tensions

00:05:01,850 --> 00:05:05,720
between team members and lastly every

00:05:04,130 --> 00:05:07,850
once in a while we'll just run into a

00:05:05,720 --> 00:05:12,620
really smart dev who thinks that their

00:05:07,850 --> 00:05:14,330
code is just too good to be reviewed how

00:05:12,620 --> 00:05:16,490
do you change these attitudes you need

00:05:14,330 --> 00:05:19,130
to start by selling the benefits in the

00:05:16,490 --> 00:05:22,130
short term it's true frustrations and

00:05:19,130 --> 00:05:24,919
slowdowns are inevitable but like with

00:05:22,130 --> 00:05:27,020
all things the more you practice the

00:05:24,919 --> 00:05:30,530
more velocity you'll have over time the

00:05:27,020 --> 00:05:31,850
better you'll get the biggest benefit

00:05:30,530 --> 00:05:34,280
though is that you're gonna find bugs

00:05:31,850 --> 00:05:36,139
and you're gonna find design flaws they

00:05:34,280 --> 00:05:39,260
can be found in fixed before the code is

00:05:36,139 --> 00:05:42,139
done there have been multiple case

00:05:39,260 --> 00:05:44,060
studies from IBM AT&T Microsoft that

00:05:42,139 --> 00:05:46,490
have shown that code review can lower

00:05:44,060 --> 00:05:48,860
the bug rate by up to 80%

00:05:46,490 --> 00:05:52,669
and it can increase productivity by up

00:05:48,860 --> 00:05:55,130
to 15% because at the end of the day the

00:05:52,669 --> 00:05:59,930
goal is to find those bugs before your

00:05:55,130 --> 00:06:02,120
customers do reviews also help us feel a

00:05:59,930 --> 00:06:04,190
sense of shared ownership and shared

00:06:02,120 --> 00:06:04,940
knowledge throughout the team we're in

00:06:04,190 --> 00:06:07,760
this together

00:06:04,940 --> 00:06:09,680
no developer becomes the only expert

00:06:07,760 --> 00:06:12,020
because everyone gains familiar 8

00:06:09,680 --> 00:06:15,680
familiarity with different parts of the

00:06:12,020 --> 00:06:17,660
codebase by participating in reviews why

00:06:15,680 --> 00:06:21,110
is it important that no single developer

00:06:17,660 --> 00:06:24,050
is the only expert we call this the

00:06:21,110 --> 00:06:25,820
lottery factor it's a measurement of how

00:06:24,050 --> 00:06:28,720
much concentrated specialized knowledge

00:06:25,820 --> 00:06:31,520
belongs to individual team members

00:06:28,720 --> 00:06:33,260
Miguel this tweet is about Miguel he

00:06:31,520 --> 00:06:34,550
works for the New York City Transit

00:06:33,260 --> 00:06:36,740
System

00:06:34,550 --> 00:06:39,770
and when the subway vending machines go

00:06:36,740 --> 00:06:43,490
down he's the only person that knows how

00:06:39,770 --> 00:06:45,590
to reboot the system there's a problem

00:06:43,490 --> 00:06:47,990
here because his commute home takes

00:06:45,590 --> 00:06:50,599
three hours and he turns his cell phone

00:06:47,990 --> 00:06:53,509
off during that commute that's bad

00:06:50,599 --> 00:06:55,520
enough but what happens if Miguel wins

00:06:53,509 --> 00:06:57,289
the lottery tomorrow and decides that he

00:06:55,520 --> 00:06:59,720
never wants to work another day in his

00:06:57,289 --> 00:07:02,150
life that's a huge problem

00:06:59,720 --> 00:07:04,129
that's the lottery factor well one

00:07:02,150 --> 00:07:08,900
person completely sabotaging this

00:07:04,129 --> 00:07:11,449
project if they left tomorrow so the

00:07:08,900 --> 00:07:13,520
benefits of code review we find bugs we

00:07:11,449 --> 00:07:15,770
do so before our customers do we share

00:07:13,520 --> 00:07:18,169
ownership in the product we share

00:07:15,770 --> 00:07:21,740
knowledge about our code we reduce that

00:07:18,169 --> 00:07:24,020
dreaded lottery factor we need to

00:07:21,740 --> 00:07:26,030
encourage consistency here because at

00:07:24,020 --> 00:07:29,599
the end of the day the code isn't yours

00:07:26,030 --> 00:07:31,250
it actually belongs to your company that

00:07:29,599 --> 00:07:33,169
means that your code needs to fit your

00:07:31,250 --> 00:07:35,840
company's style guides and standards and

00:07:33,169 --> 00:07:37,900
not your own or your projects style

00:07:35,840 --> 00:07:40,759
guides and standards not your own

00:07:37,900 --> 00:07:42,469
so what reviews do is encourage

00:07:40,759 --> 00:07:45,860
consistency and that makes the code more

00:07:42,469 --> 00:07:48,740
robust because let's be real nobody

00:07:45,860 --> 00:07:51,789
stays that a company forever code

00:07:48,740 --> 00:07:54,319
longevity is really an important factor

00:07:51,789 --> 00:07:56,750
code reviews need to be universal and

00:07:54,319 --> 00:07:58,460
they need to follow guidelines doesn't

00:07:56,750 --> 00:07:59,810
matter how junior or senior you are

00:07:58,460 --> 00:08:02,479
everybody on the team should be

00:07:59,810 --> 00:08:04,219
submitting and reviewing code if only

00:08:02,479 --> 00:08:05,840
senior developers are doing code review

00:08:04,219 --> 00:08:09,590
that's actually a huge bottleneck on

00:08:05,840 --> 00:08:12,199
your team I worked with a developer in a

00:08:09,590 --> 00:08:15,500
Java shop who insisted on formatting his

00:08:12,199 --> 00:08:17,029
code C++ style instead of Java style so

00:08:15,500 --> 00:08:19,069
there's a little bit of a difference in

00:08:17,029 --> 00:08:21,169
terms of where the braces go for the

00:08:19,069 --> 00:08:23,360
opening function in Java it's on the

00:08:21,169 --> 00:08:26,060
same line in C++ it's on the new line

00:08:23,360 --> 00:08:28,310
and has caused some nightmare dips as

00:08:26,060 --> 00:08:30,949
you can imagine and a lot of frustration

00:08:28,310 --> 00:08:34,310
amongst the team who was maintaining his

00:08:30,949 --> 00:08:36,020
code when I protested I was told well

00:08:34,310 --> 00:08:38,270
you know what that's okay he's allowed

00:08:36,020 --> 00:08:43,010
to do that he's the most senior engineer

00:08:38,270 --> 00:08:44,570
and that's fine and some of you are kind

00:08:43,010 --> 00:08:46,820
of shaking your heads but it's a true

00:08:44,570 --> 00:08:48,290
story and special cases like this

00:08:46,820 --> 00:08:51,110
inequality

00:08:48,290 --> 00:08:54,889
it really breeds dissatisfaction nobody

00:08:51,110 --> 00:08:57,380
should be special in this process so how

00:08:54,889 --> 00:09:00,350
do we do all of this well let's jump

00:08:57,380 --> 00:09:03,199
right in a style guide a style guide is

00:09:00,350 --> 00:09:05,990
what distinguishes personal tastes from

00:09:03,199 --> 00:09:08,810
opinion and many of you might be

00:09:05,990 --> 00:09:12,290
thinking well we have pepp eight isn't

00:09:08,810 --> 00:09:14,720
that good enough not really top eight

00:09:12,290 --> 00:09:19,399
the surface that only offers some

00:09:14,720 --> 00:09:21,019
suggestions whatever whatever style

00:09:19,399 --> 00:09:23,630
guide you choose it should be a critic

00:09:21,019 --> 00:09:26,240
on beforehand google has a lengthy one

00:09:23,630 --> 00:09:28,610
for example it goes through the pros and

00:09:26,240 --> 00:09:30,290
cons of every decision made at the end

00:09:28,610 --> 00:09:32,660
of the day it doesn't matter which one

00:09:30,290 --> 00:09:35,209
you choose just pick one stick with it

00:09:32,660 --> 00:09:37,069
because great code bases look like

00:09:35,209 --> 00:09:38,779
they're written by an individual when

00:09:37,069 --> 00:09:41,560
actually they were worked on by a team

00:09:38,779 --> 00:09:44,029
mis style guide helps enforce that

00:09:41,560 --> 00:09:46,130
Python has some other useful tools that

00:09:44,029 --> 00:09:48,829
help with this process called formatters

00:09:46,130 --> 00:09:50,779
Auto pep eight is the least strict it

00:09:48,829 --> 00:09:53,660
just formats or code to adhere to pep

00:09:50,779 --> 00:09:54,440
eight black is brand new and it's my

00:09:53,660 --> 00:09:57,260
personal favor

00:09:54,440 --> 00:10:00,319
it's the uncompromising Python formatter

00:09:57,260 --> 00:10:03,819
it has almost no configuration options

00:10:00,319 --> 00:10:05,899
so there's no room for disagreement

00:10:03,819 --> 00:10:09,199
basically you pick a line length and

00:10:05,899 --> 00:10:11,779
that's it y APF which stands for yet

00:10:09,199 --> 00:10:15,199
another Python formatter you're seeing a

00:10:11,779 --> 00:10:16,819
theme it's a very configurable it even

00:10:15,199 --> 00:10:20,690
allows you to specify the style guide to

00:10:16,819 --> 00:10:23,389
follow there's a really cool demo of

00:10:20,690 --> 00:10:25,880
black written by Jose Padilla check it

00:10:23,389 --> 00:10:27,769
out after my talk of course for those of

00:10:25,880 --> 00:10:29,779
you who have your laptops open and you

00:10:27,769 --> 00:10:33,290
could see what formatting options black

00:10:29,779 --> 00:10:35,000
might take on your current code there's

00:10:33,290 --> 00:10:37,730
also a really amazing support for black

00:10:35,000 --> 00:10:39,319
in my favorite editor vs code if you

00:10:37,730 --> 00:10:41,899
don't know what V has code is it's a

00:10:39,319 --> 00:10:44,389
free open-source editor with amazing

00:10:41,899 --> 00:10:47,480
Python support its cross-platform runs

00:10:44,389 --> 00:10:49,519
on Linux Mac windows in order to set up

00:10:47,480 --> 00:10:51,769
black and BS code you need to install

00:10:49,519 --> 00:10:53,839
the Python extension pip install black

00:10:51,769 --> 00:10:56,360
update a handful of settings and that's

00:10:53,839 --> 00:11:00,860
it you can then use vs code to format

00:10:56,360 --> 00:11:02,000
your code with black on save maybe Bob

00:11:00,860 --> 00:11:05,089
wasn't in the

00:11:02,000 --> 00:11:07,279
maybe in fact C++ style formatting isn't

00:11:05,089 --> 00:11:09,860
is better but the problem was he wasn't

00:11:07,279 --> 00:11:11,569
following convention consistent code

00:11:09,860 --> 00:11:15,350
will be a lot easier to maintain by a

00:11:11,569 --> 00:11:17,209
team code review also needs to be done

00:11:15,350 --> 00:11:19,790
by your peers and not by management

00:11:17,209 --> 00:11:20,360
because the end goal is not to get in

00:11:19,790 --> 00:11:22,639
trouble

00:11:20,360 --> 00:11:24,379
bugs found during code review should

00:11:22,639 --> 00:11:26,750
never come up in the performance review

00:11:24,379 --> 00:11:29,120
process that's why we're doing code

00:11:26,750 --> 00:11:33,170
reviews in the first place and to add on

00:11:29,120 --> 00:11:35,449
that don't point fingers maintain a no

00:11:33,170 --> 00:11:37,730
blame culture when the team reviews code

00:11:35,449 --> 00:11:39,949
the team becomes responsible for code

00:11:37,730 --> 00:11:41,779
quality not just an individual this

00:11:39,949 --> 00:11:43,879
really needs support from management if

00:11:41,779 --> 00:11:45,170
you work in an organization because if

00:11:43,879 --> 00:11:46,879
you get in trouble for sharing your

00:11:45,170 --> 00:11:49,100
mistakes if you're just gonna brush them

00:11:46,879 --> 00:11:51,139
under the rug next time you won't be

00:11:49,100 --> 00:11:53,680
able to learn from them support your

00:11:51,139 --> 00:11:56,180
teammates here it's not a competition

00:11:53,680 --> 00:11:58,550
when code reviews become this really

00:11:56,180 --> 00:12:00,470
positive process developers aren't gonna

00:11:58,550 --> 00:12:02,360
dread it they're gonna want their code

00:12:00,470 --> 00:12:04,220
reviewed they're going to be excited

00:12:02,360 --> 00:12:06,079
about the process it's not just going to

00:12:04,220 --> 00:12:10,309
be something that they have to do every

00:12:06,079 --> 00:12:12,319
day code review fundamentals they need

00:12:10,309 --> 00:12:13,790
to be done by your peers style guides

00:12:12,319 --> 00:12:16,610
and formatters help encourage

00:12:13,790 --> 00:12:21,680
consistency maintain a healthy no blame

00:12:16,610 --> 00:12:23,449
culture how do we do code reviews

00:12:21,680 --> 00:12:25,519
there's two sides of this coin for

00:12:23,449 --> 00:12:27,199
effective reviews we need to learn not

00:12:25,519 --> 00:12:32,870
just how to be a great submitter but

00:12:27,199 --> 00:12:35,870
also how to be a great reviewer I love

00:12:32,870 --> 00:12:37,939
this comic here on the Left the person

00:12:35,870 --> 00:12:39,709
is saying there's no need to double

00:12:37,939 --> 00:12:42,430
check these changes if some problems

00:12:39,709 --> 00:12:45,829
remain the reviewer will catch them

00:12:42,430 --> 00:12:47,629
person on the right no need to look at

00:12:45,829 --> 00:12:53,509
these changes too closely I'm sure the

00:12:47,629 --> 00:12:55,220
author knows what he's doing you need to

00:12:53,509 --> 00:12:57,649
be really careful not to get rubber

00:12:55,220 --> 00:13:00,139
stamped what is rubber stamping it's

00:12:57,649 --> 00:13:02,600
when the submitted code is so complex

00:13:00,139 --> 00:13:04,870
the reviewer thinks that it's obvious

00:13:02,600 --> 00:13:07,189
that the author knows what they're doing

00:13:04,870 --> 00:13:09,139
they just rubber-stamp

00:13:07,189 --> 00:13:12,939
approved approve the code without fully

00:13:09,139 --> 00:13:15,360
understanding it don't be too clever

00:13:12,939 --> 00:13:17,549
readability really counts

00:13:15,360 --> 00:13:19,350
submitting over complicated code is a

00:13:17,549 --> 00:13:22,379
surefire way of getting that rubber

00:13:19,350 --> 00:13:25,019
stamp I have a developer friend who used

00:13:22,379 --> 00:13:26,850
to love showing off how smart he was by

00:13:25,019 --> 00:13:29,489
checking in all these complex over

00:13:26,850 --> 00:13:31,110
engineered solutions he stopped doing it

00:13:29,489 --> 00:13:34,079
when he realized that he was punishing

00:13:31,110 --> 00:13:38,339
himself it meant that he always ended up

00:13:34,079 --> 00:13:40,230
being the maintainer of that code once

00:13:38,339 --> 00:13:42,389
he came to that realization he stopped

00:13:40,230 --> 00:13:43,429
flexing and started writing maintainable

00:13:42,389 --> 00:13:45,959
code

00:13:43,429 --> 00:13:51,230
remember readability counts

00:13:45,959 --> 00:13:54,720
I think Russ Olson said it best here

00:13:51,230 --> 00:13:58,079
good code is like a good joke it needs

00:13:54,720 --> 00:14:02,189
no explanation if you feel like a piece

00:13:58,079 --> 00:14:04,860
of code is confusing it is leave a

00:14:02,189 --> 00:14:05,189
comment either in code or in your review

00:14:04,860 --> 00:14:07,860
tool

00:14:05,189 --> 00:14:11,489
better yet refactor it so that it's more

00:14:07,860 --> 00:14:13,529
readable and understandable I find the

00:14:11,489 --> 00:14:15,569
process of submitting code reviews a

00:14:13,529 --> 00:14:18,029
little bit easier to think about when I

00:14:15,569 --> 00:14:20,220
think about it in stages ranging from

00:14:18,029 --> 00:14:22,649
before I even submit the pull request to

00:14:20,220 --> 00:14:25,230
after the review has been completed at

00:14:22,649 --> 00:14:26,669
stage zero were before submission what

00:14:25,230 --> 00:14:28,230
kinds of things do we need to think

00:14:26,669 --> 00:14:32,040
about before we even think about

00:14:28,230 --> 00:14:34,470
starting the review the most important

00:14:32,040 --> 00:14:36,660
thing provide the context the why this

00:14:34,470 --> 00:14:39,809
helps the reviewer a lot why did you

00:14:36,660 --> 00:14:42,419
write this line of code link to any

00:14:39,809 --> 00:14:45,149
underlying issues or tickets like a bug

00:14:42,419 --> 00:14:46,439
report that would give more context if

00:14:45,149 --> 00:14:49,350
there's not enough ticket in that

00:14:46,439 --> 00:14:50,910
context provide more I'm sorry if

00:14:49,350 --> 00:14:54,239
there's not enough context in that

00:14:50,910 --> 00:14:57,149
ticket provide more document why the

00:14:54,239 --> 00:15:01,769
change was needed for larger PRS you can

00:14:57,149 --> 00:15:03,929
even provide a change log and remember

00:15:01,769 --> 00:15:07,889
to point out any unintended side effects

00:15:03,929 --> 00:15:11,429
your code might have remind yourself

00:15:07,889 --> 00:15:13,589
that you are the primary reviewer before

00:15:11,429 --> 00:15:15,989
submitting you want to review your code

00:15:13,589 --> 00:15:18,860
as if you were giving someone else a

00:15:15,989 --> 00:15:21,509
code review before I submit my PR

00:15:18,860 --> 00:15:23,699
sometimes I'll look at it again in the

00:15:21,509 --> 00:15:25,199
context of a github diff and sometimes

00:15:23,699 --> 00:15:26,610
I'll see new issues crop up there's just

00:15:25,199 --> 00:15:29,029
something about that

00:15:26,610 --> 00:15:31,589
switch that gives me a new perspective

00:15:29,029 --> 00:15:35,610
this lets you anticipate any problem

00:15:31,589 --> 00:15:37,800
areas before the reviewer does as the

00:15:35,610 --> 00:15:39,959
primary reviewer it's your

00:15:37,800 --> 00:15:43,140
responsibility to make sure that your

00:15:39,959 --> 00:15:45,570
code works that it's thoroughly tested

00:15:43,140 --> 00:15:47,550
you always QA your own changes because

00:15:45,570 --> 00:15:52,370
you don't want to rely on someone else

00:15:47,550 --> 00:15:56,490
to catch your mistakes before submitting

00:15:52,370 --> 00:15:58,920
you can also try a checklist what makes

00:15:56,490 --> 00:16:01,980
a good checklist check off the small

00:15:58,920 --> 00:16:06,029
stuff did you check for a reusable code

00:16:01,980 --> 00:16:08,010
or utility methods libraries did you

00:16:06,029 --> 00:16:10,610
remove any debugger debugger statements

00:16:08,010 --> 00:16:12,720
if you don't have pre-commit hook setup

00:16:10,610 --> 00:16:15,060
that might be something that you check

00:16:12,720 --> 00:16:18,000
for him are your commit messages clear

00:16:15,060 --> 00:16:21,360
and understandable you can also check

00:16:18,000 --> 00:16:25,800
for the big stuff is your code secure is

00:16:21,360 --> 00:16:30,029
it going to scale is it maintainable is

00:16:25,800 --> 00:16:32,160
it resilient against outages for this

00:16:30,029 --> 00:16:34,290
process I highly recommend a book called

00:16:32,160 --> 00:16:36,209
the checklist manifesto it's pretty

00:16:34,290 --> 00:16:38,459
short it's a book about how having

00:16:36,209 --> 00:16:42,149
checklists help doctors make surgery

00:16:38,459 --> 00:16:44,850
safer helped pilots fly safe plane

00:16:42,149 --> 00:16:48,300
safely and guess what checklists can

00:16:44,850 --> 00:16:50,970
help developers too we made it to stage

00:16:48,300 --> 00:16:54,079
one we've submitted the review at this

00:16:50,970 --> 00:16:56,459
point you're starting a conversation

00:16:54,079 --> 00:16:59,910
don't get too attached to your code

00:16:56,459 --> 00:17:03,169
before the review even starts anticipate

00:16:59,910 --> 00:17:05,309
comments anticipate feedback and

00:17:03,169 --> 00:17:07,589
acknowledge that you're probably going

00:17:05,309 --> 00:17:09,390
to make a few mistakes remember the

00:17:07,589 --> 00:17:12,059
entire point of a review is to find

00:17:09,390 --> 00:17:15,299
problems and problems will be found so

00:17:12,059 --> 00:17:18,329
don't be caught by surprise here stage 2

00:17:15,299 --> 00:17:21,059
is optional is submitting a work and

00:17:18,329 --> 00:17:23,610
progress pull request when might you

00:17:21,059 --> 00:17:24,900
want to do that as a rule of thumb if

00:17:23,610 --> 00:17:26,939
you're working on something big and

00:17:24,900 --> 00:17:31,919
complex when your code is about 30 to

00:17:26,939 --> 00:17:35,100
50% done this drives perfection is crazy

00:17:31,919 --> 00:17:37,679
right but you can't be afraid of showing

00:17:35,100 --> 00:17:40,169
and complete incremental work here it's

00:17:37,679 --> 00:17:40,410
hard to just let that go let go of the

00:17:40,169 --> 00:17:42,120
does

00:17:40,410 --> 00:17:43,380
to make everything beautiful and perfect

00:17:42,120 --> 00:17:47,250
but that's not what a work-in-progress

00:17:43,380 --> 00:17:49,650
pull request is about when code is a

00:17:47,250 --> 00:17:51,900
work-in-progress good types of feedback

00:17:49,650 --> 00:17:54,030
to get here are architecture

00:17:51,900 --> 00:17:58,410
architectural issues overall design

00:17:54,030 --> 00:18:01,020
problems suggestions for design patterns

00:17:58,410 --> 00:18:03,090
you really want this feedback this type

00:18:01,020 --> 00:18:06,030
of feedback before you approach being

00:18:03,090 --> 00:18:08,990
done they'll save you a lot of time you

00:18:06,030 --> 00:18:11,400
don't need to rewrite a finished product

00:18:08,990 --> 00:18:15,390
feedback at this stage early and often

00:18:11,400 --> 00:18:17,760
helps the process a lot stage 3 we're

00:18:15,390 --> 00:18:21,990
almost done we can see the finish line

00:18:17,760 --> 00:18:25,650
it's so close the type of feedback that

00:18:21,990 --> 00:18:28,470
we prefer to get at this point nitpicks

00:18:25,650 --> 00:18:30,930
variable names maybe some requests for

00:18:28,470 --> 00:18:33,930
more documentation or comments any other

00:18:30,930 --> 00:18:37,140
small optimizations as the code evolves

00:18:33,930 --> 00:18:39,900
it should be should become more firm no

00:18:37,140 --> 00:18:42,420
one wants to hear change it all at this

00:18:39,900 --> 00:18:44,210
stage if you did it means you've had

00:18:42,420 --> 00:18:47,010
some sort of breakdown in communication

00:18:44,210 --> 00:18:48,840
this kind of process prevents wasting

00:18:47,010 --> 00:18:52,980
time and effort for bigger more complex

00:18:48,840 --> 00:18:54,900
pull requests at this point you also

00:18:52,980 --> 00:18:56,880
want to ask yourself did I solve one

00:18:54,900 --> 00:18:59,040
issue with my pull request if you solve

00:18:56,880 --> 00:19:00,950
multiple problems you want to break up

00:18:59,040 --> 00:19:03,870
your code into multiple pull requests

00:19:00,950 --> 00:19:06,000
this will really help the reviewer if

00:19:03,870 --> 00:19:09,600
you solved it on a related problem make

00:19:06,000 --> 00:19:12,120
a new PR with a separate diff you can

00:19:09,600 --> 00:19:13,770
even make a branch of your code from a

00:19:12,120 --> 00:19:17,550
future branch and this will help keep

00:19:13,770 --> 00:19:19,710
that other diff small we want to keep

00:19:17,550 --> 00:19:21,870
review small because they help review or

00:19:19,710 --> 00:19:24,930
burn out some case studies have shown

00:19:21,870 --> 00:19:26,910
that reviews reviewers become less

00:19:24,930 --> 00:19:30,330
effective when they look at more than

00:19:26,910 --> 00:19:32,850
500 lines of code in a session keep it

00:19:30,330 --> 00:19:35,340
small keep it relevant if a big review

00:19:32,850 --> 00:19:40,110
is unavoidable consider giving the

00:19:35,340 --> 00:19:42,660
review or some extra time you can also

00:19:40,110 --> 00:19:44,720
use automated tools and static analysis

00:19:42,660 --> 00:19:47,690
to help streamline the review process

00:19:44,720 --> 00:19:50,220
first and most importantly a linter

00:19:47,690 --> 00:19:52,170
hopefully you all have linting set up

00:19:50,220 --> 00:19:54,080
for your Python projects if you don't

00:19:52,170 --> 00:19:56,750
it's the first thing that you should

00:19:54,080 --> 00:19:58,549
when you leave us talk what is code

00:19:56,750 --> 00:20:00,529
linting it's an automated way of

00:19:58,549 --> 00:20:02,330
checking syntax or if you want to get

00:20:00,529 --> 00:20:05,539
fancy you can set it up to check style

00:20:02,330 --> 00:20:08,059
guide violations - here's an example of

00:20:05,539 --> 00:20:10,100
some winter output a linter can

00:20:08,059 --> 00:20:12,620
integrate with your code editor any

00:20:10,100 --> 00:20:15,260
editor that edits Python supports this

00:20:12,620 --> 00:20:17,269
and this way that reviewer doesn't have

00:20:15,260 --> 00:20:21,919
to waste any of their own time pointing

00:20:17,269 --> 00:20:23,899
out syntax errors pilot is a great

00:20:21,919 --> 00:20:25,760
linting option for python there's lots

00:20:23,899 --> 00:20:28,519
and lots of configuration options

00:20:25,760 --> 00:20:31,279
integrations coding standards error

00:20:28,519 --> 00:20:35,029
detection refactoring help editor

00:20:31,279 --> 00:20:36,559
integration make sure you take the time

00:20:35,029 --> 00:20:39,200
to learn your linter and its

00:20:36,559 --> 00:20:41,570
configuration options I'll show you one

00:20:39,200 --> 00:20:43,340
of my favorite pilant rules I don't know

00:20:41,570 --> 00:20:45,649
if any of you have done that but it's

00:20:43,340 --> 00:20:47,750
kind of a common gotcha for me I'm

00:20:45,649 --> 00:20:50,510
refactoring out parameter arguments

00:20:47,750 --> 00:20:53,960
copying and pasting them and I end up

00:20:50,510 --> 00:20:56,659
with a trailing comma it's really hard

00:20:53,960 --> 00:20:59,149
to notice but there's a trailing comma

00:20:56,659 --> 00:21:03,289
after bar after the assignment to bar

00:20:59,149 --> 00:21:06,340
and what that does is make bar a tuple

00:21:03,289 --> 00:21:09,980
instead of an integer and this causes

00:21:06,340 --> 00:21:12,350
vague errors test failures it's a little

00:21:09,980 --> 00:21:14,870
bit non-obvious tracking down the sort

00:21:12,350 --> 00:21:17,630
of bug if you don't have any type

00:21:14,870 --> 00:21:19,220
hinting enabled in your project because

00:21:17,630 --> 00:21:22,039
it just has most messed up my day

00:21:19,220 --> 00:21:24,679
multiple times pilot comes to the rescue

00:21:22,039 --> 00:21:26,899
here there's a rule trailing comma tuple

00:21:24,679 --> 00:21:32,480
you can set it up and catch this sort of

00:21:26,899 --> 00:21:35,090
stuff you can use vulture qy to find

00:21:32,480 --> 00:21:37,269
unused and unreadable unreachable code

00:21:35,090 --> 00:21:40,279
in python using static code analysis

00:21:37,269 --> 00:21:42,590
this doesn't work so well when the call

00:21:40,279 --> 00:21:45,080
code is called by introspection and

00:21:42,590 --> 00:21:46,760
because python is dynamic vulture can

00:21:45,080 --> 00:21:49,220
make mistakes so it's really good

00:21:46,760 --> 00:21:51,649
practice to double check the results

00:21:49,220 --> 00:22:01,010
when used correctly can really help keep

00:21:51,649 --> 00:22:03,529
a code base Queen here's an example of

00:22:01,010 --> 00:22:07,940
vulture we have some code here we have 3

00:22:03,529 --> 00:22:10,910
methods foo bar Baz we are only

00:22:07,940 --> 00:22:13,640
foo and bar when we run vulture on this

00:22:10,910 --> 00:22:16,640
file it will tell us with 60% confidence

00:22:13,640 --> 00:22:18,430
that the function Baz is unused that's

00:22:16,640 --> 00:22:20,810
pretty cool

00:22:18,430 --> 00:22:23,210
 recommit hooks allow you to

00:22:20,810 --> 00:22:24,680
short-circuit a commit and make checks

00:22:23,210 --> 00:22:26,690
before the code even reaches your

00:22:24,680 --> 00:22:29,690
repository you can do things here like

00:22:26,690 --> 00:22:31,700
run a linter check your syntax check for

00:22:29,690 --> 00:22:33,740
- dues - but our statements I'm used

00:22:31,700 --> 00:22:36,020
imports any other stuff that litter is

00:22:33,740 --> 00:22:38,120
up your code you can enforce styling

00:22:36,020 --> 00:22:41,150
here with auto Pepe or the black

00:22:38,120 --> 00:22:42,620
formatter there is even an option to

00:22:41,150 --> 00:22:45,760
completely reject the commit if

00:22:42,620 --> 00:22:50,090
conditions aren't met sounds great right

00:22:45,760 --> 00:22:54,260
it also sounds like a lot of work and we

00:22:50,090 --> 00:22:56,390
developers are pretty lazy thankfully

00:22:54,260 --> 00:23:01,010
someone else has set up a great tool for

00:22:56,390 --> 00:23:02,630
us it's called pre - commit comm if you

00:23:01,010 --> 00:23:05,030
don't want to write your own pre-commit

00:23:02,630 --> 00:23:07,370
hooks it's an amazing library with lots

00:23:05,030 --> 00:23:09,980
of resources available it's written in

00:23:07,370 --> 00:23:12,890
Python and it gives really nice well

00:23:09,980 --> 00:23:15,230
formatted command-line output extra nice

00:23:12,890 --> 00:23:17,630
here you can test your hooks without

00:23:15,230 --> 00:23:18,920
actually trying to commit which becomes

00:23:17,630 --> 00:23:22,880
really tedious when you're writing

00:23:18,920 --> 00:23:24,890
pre-commit hooks from scratch supports a

00:23:22,880 --> 00:23:28,700
few nice hooks for python we got auto

00:23:24,890 --> 00:23:31,940
path 8 to run Pepe on your source like a

00:23:28,700 --> 00:23:34,970
PI flakes check ast to check if the file

00:23:31,940 --> 00:23:37,430
contains valid Python debug statements

00:23:34,970 --> 00:23:39,350
to check for debugger statements I don't

00:23:37,430 --> 00:23:41,390
believe there's support for black the

00:23:39,350 --> 00:23:42,950
black formatter just yet so if anybody

00:23:41,390 --> 00:23:46,760
has the time and wants to contribute

00:23:42,950 --> 00:23:48,830
that back please do and there are a lot

00:23:46,760 --> 00:23:51,280
more hooks that aren't Python specific

00:23:48,830 --> 00:23:53,300
like trimming trailing whitespace

00:23:51,280 --> 00:23:56,180
checking for files that have merged

00:23:53,300 --> 00:24:00,070
conflict strings and them verifying your

00:23:56,180 --> 00:24:03,650
JSON lots of time-saving features here

00:24:00,070 --> 00:24:06,020
tests there are tons of talks about

00:24:03,650 --> 00:24:14,330
tests so I'm going to touch on them very

00:24:06,020 --> 00:24:16,880
briefly write them please tests need to

00:24:14,330 --> 00:24:18,470
be passing for somebody new to be able

00:24:16,880 --> 00:24:21,860
to meaningfully contribute to your

00:24:18,470 --> 00:24:25,910
project and tests help you identify

00:24:21,860 --> 00:24:28,880
my problems immediately nobody wants to

00:24:25,910 --> 00:24:34,400
work with scumbag programmer who commits

00:24:28,880 --> 00:24:36,950
untested code he's a bad guy continuous

00:24:34,400 --> 00:24:39,080
integration what is it it's an automated

00:24:36,950 --> 00:24:41,420
build with every push get on your linter

00:24:39,080 --> 00:24:44,450
run your tests lots of available tools

00:24:41,420 --> 00:24:45,290
here see Python uses Azure DevOps

00:24:44,450 --> 00:24:49,700
pipelines

00:24:45,290 --> 00:24:52,309
there's also travis circle CI the cool

00:24:49,700 --> 00:24:54,380
thing about as your DevOps pipelines is

00:24:52,309 --> 00:24:58,850
that they support multiple platforms Mac

00:24:54,380 --> 00:25:01,070
Linux and Windows there are lots of lots

00:24:58,850 --> 00:25:03,350
of these tools are free for small teams

00:25:01,070 --> 00:25:05,150
or open source projects all of them

00:25:03,350 --> 00:25:06,679
integrate with github pull requests so

00:25:05,150 --> 00:25:11,360
you'll see some nice output like that

00:25:06,679 --> 00:25:13,340
right in your PR coverage helps to what

00:25:11,360 --> 00:25:15,380
is coverage it's the percent of code

00:25:13,340 --> 00:25:18,220
that's executed when a test suite runs

00:25:15,380 --> 00:25:21,260
it gauges the effectiveness of your test

00:25:18,220 --> 00:25:26,419
coverage Qi is a great tool it can

00:25:21,260 --> 00:25:28,280
generate nice HTML reports remember we

00:25:26,419 --> 00:25:30,080
talked about fault tolerance earlier in

00:25:28,280 --> 00:25:31,970
the talk if you have a low fault

00:25:30,080 --> 00:25:34,640
tolerance for example if your software

00:25:31,970 --> 00:25:36,110
runs in a nuclear power plant your

00:25:34,640 --> 00:25:40,250
coverage should be close to a hundred

00:25:36,110 --> 00:25:44,360
percent coverage tools also integrate

00:25:40,250 --> 00:25:47,750
into github there is a coverage Qi

00:25:44,360 --> 00:25:51,169
there's coveralls io automation in the

00:25:47,750 --> 00:25:53,720
space saves everyone time now we're at

00:25:51,169 --> 00:25:55,520
the last stage our review is complete

00:25:53,720 --> 00:25:57,740
the reviewer has finished looking at

00:25:55,520 --> 00:25:59,450
your code we're still not done though at

00:25:57,740 --> 00:26:01,549
this stage we need to remember to be

00:25:59,450 --> 00:26:04,190
responsive don't just ignore any

00:26:01,549 --> 00:26:06,940
comments that we're left respond to them

00:26:04,190 --> 00:26:08,809
even if you don't agree with them and

00:26:06,940 --> 00:26:12,650
especially if you decide not to

00:26:08,809 --> 00:26:14,780
implement that suggestion make sure you

00:26:12,650 --> 00:26:18,020
come to some mutual agreement with the

00:26:14,780 --> 00:26:21,049
reviewer if you decide not to not to go

00:26:18,020 --> 00:26:24,080
ahead with their suggestion if there are

00:26:21,049 --> 00:26:25,640
any comments let the reviewer know that

00:26:24,080 --> 00:26:27,500
you've put changes when your code is

00:26:25,640 --> 00:26:32,240
ready to be reviewed it's still a

00:26:27,500 --> 00:26:35,330
conversation but don't bite what is

00:26:32,240 --> 00:26:37,400
bike shedding it's when you're arguing

00:26:35,330 --> 00:26:39,770
over really minor issues one more

00:26:37,400 --> 00:26:42,110
serious ones are being overlooked for

00:26:39,770 --> 00:26:44,240
example people arguing about what color

00:26:42,110 --> 00:26:47,570
to paint the bike shed when the house

00:26:44,240 --> 00:26:48,980
isn't even done if you're going back and

00:26:47,570 --> 00:26:51,770
forth about something more than three

00:26:48,980 --> 00:26:52,870
times step away from the keyboard use

00:26:51,770 --> 00:26:55,490
your words

00:26:52,870 --> 00:26:57,350
don't forget to record the result of the

00:26:55,490 --> 00:26:59,150
conversation in the pull request to

00:26:57,350 --> 00:27:01,780
maintain context for anyone else who

00:26:59,150 --> 00:27:04,940
might be looking at it later

00:27:01,780 --> 00:27:08,420
bike shed calm if you want to learn more

00:27:04,940 --> 00:27:10,100
about bike shedding if you're co-located

00:27:08,420 --> 00:27:11,390
that's great you can just walk over to

00:27:10,100 --> 00:27:14,270
the other person's desk for a

00:27:11,390 --> 00:27:16,670
conversation if not a tool that I really

00:27:14,270 --> 00:27:18,680
like is vs code live share it's an

00:27:16,670 --> 00:27:20,780
extension for vs code it allows

00:27:18,680 --> 00:27:23,780
real-time sharing between two of us code

00:27:20,780 --> 00:27:26,060
instances you keep your own editor your

00:27:23,780 --> 00:27:28,160
own fonts your own themes most

00:27:26,060 --> 00:27:31,310
importantly your own keyboard shortcuts

00:27:28,160 --> 00:27:35,480
because I'm not looking to start you

00:27:31,310 --> 00:27:37,180
know VI versus Emacs editor worse we

00:27:35,480 --> 00:27:41,090
just want to collaborate

00:27:37,180 --> 00:27:43,220
you can edit collaborate collaboratively

00:27:41,090 --> 00:27:45,350
but navigate independently and you don't

00:27:43,220 --> 00:27:47,690
need to learn anything new super cool

00:27:45,350 --> 00:27:49,310
for remote teams takes a lot of pain out

00:27:47,690 --> 00:27:51,820
of the process there's a link to

00:27:49,310 --> 00:27:54,610
download the extension in my slides if

00:27:51,820 --> 00:27:58,250
you disagree with the reviewers comments

00:27:54,610 --> 00:27:59,630
no radio silence here try to carefully

00:27:58,250 --> 00:28:01,940
explain what the reviewer might have

00:27:59,630 --> 00:28:03,500
missed open a friendly discussion until

00:28:01,940 --> 00:28:06,320
you understand why the reviewer left the

00:28:03,500 --> 00:28:09,080
comment it's possible the reviewer

00:28:06,320 --> 00:28:13,850
missed some of your thought process but

00:28:09,080 --> 00:28:16,790
maybe you're just wrong it happens to

00:28:13,850 --> 00:28:21,190
the rest of us when you're wrong that's

00:28:16,790 --> 00:28:23,090
okay learn to gracefully accept defeat

00:28:21,190 --> 00:28:24,770
don't take any of this feedback

00:28:23,090 --> 00:28:26,360
personally think about it as an

00:28:24,770 --> 00:28:28,640
opportunity for growth admitting that

00:28:26,360 --> 00:28:30,650
you don't know something is really hard

00:28:28,640 --> 00:28:33,110
it can be a great way to trigger

00:28:30,650 --> 00:28:36,650
impostor syndrome that's present and

00:28:33,110 --> 00:28:39,470
many of us don't take it personally you

00:28:36,650 --> 00:28:41,330
are not your code use it as an

00:28:39,470 --> 00:28:43,820
opportunity to grow remember we're all

00:28:41,330 --> 00:28:46,670
working towards the same goal it's to

00:28:43,820 --> 00:28:48,860
ship code and be grateful but someone

00:28:46,670 --> 00:28:51,980
took the time to revere code

00:28:48,860 --> 00:28:54,740
for thanks if you can how do I be a

00:28:51,980 --> 00:28:58,130
great submitter we provide context we

00:28:54,740 --> 00:29:01,309
review our own code first we expect a

00:28:58,130 --> 00:29:04,610
conversation and we submit work in

00:29:01,309 --> 00:29:07,210
progress PRS when necessary we use

00:29:04,610 --> 00:29:11,030
automated tools to help us we're

00:29:07,210 --> 00:29:14,860
responsive and when necessary we learn

00:29:11,030 --> 00:29:14,860
to gracefully accept defeat

00:29:15,040 --> 00:29:19,610
we talked spent a lot of time talking

00:29:17,480 --> 00:29:22,040
about how to be a great submitter let's

00:29:19,610 --> 00:29:26,540
cover the other side of this story how

00:29:22,040 --> 00:29:29,900
do we be a good reviewer I love this

00:29:26,540 --> 00:29:31,970
comic - the therapist asks why do you

00:29:29,900 --> 00:29:34,910
think you're so hostile in code reviews

00:29:31,970 --> 00:29:40,250
and the developments if only I had been

00:29:34,910 --> 00:29:41,840
more popular in high school code review

00:29:40,250 --> 00:29:44,960
should not look like an appointment with

00:29:41,840 --> 00:29:47,660
your therapist you need to approach them

00:29:44,960 --> 00:29:50,210
objectively and without ego leave some

00:29:47,660 --> 00:29:51,350
of those emotions behind have empathy

00:29:50,210 --> 00:29:53,299
towards others

00:29:51,350 --> 00:29:56,120
there should be no room for hostility

00:29:53,299 --> 00:29:58,850
here have empathy towards yourself to

00:29:56,120 --> 00:30:02,120
check in before you start are you hungry

00:29:58,850 --> 00:30:06,020
are you thirsty are you angry maybe

00:30:02,120 --> 00:30:08,299
you're dehydrated or tired check in with

00:30:06,020 --> 00:30:10,309
yourself do you know if you need it have

00:30:08,299 --> 00:30:12,830
some water have some coffee take a walk

00:30:10,309 --> 00:30:14,809
come back to it because remember that

00:30:12,830 --> 00:30:19,100
all of these feelings can affect the

00:30:14,809 --> 00:30:22,070
review process take care of yourself the

00:30:19,100 --> 00:30:23,900
objective during the review you can say

00:30:22,070 --> 00:30:26,179
something like I noticed that this

00:30:23,900 --> 00:30:32,059
method is missing a doctrine instead of

00:30:26,179 --> 00:30:34,400
you forgot to write the doctrine reviews

00:30:32,059 --> 00:30:37,070
are a learning opportunity not a chance

00:30:34,400 --> 00:30:38,720
to catch someone else being wrong this

00:30:37,070 --> 00:30:42,080
type of phrasing really helps from

00:30:38,720 --> 00:30:44,140
keeping it personal try to ask some

00:30:42,080 --> 00:30:46,760
questions instead of giving answers

00:30:44,140 --> 00:30:49,669
would it make more sense if we did it

00:30:46,760 --> 00:30:54,020
this way did you think about trying this

00:30:49,669 --> 00:30:57,140
other approach offer suggestions you can

00:30:54,020 --> 00:30:59,770
say things like it might be easier - or

00:30:57,140 --> 00:31:02,450
we tend to do it this way instead

00:30:59,770 --> 00:31:09,220
because suggestions are better than

00:31:02,450 --> 00:31:15,230
mediums avoid these terms always simply

00:31:09,220 --> 00:31:17,029
easily just obviously if it was so

00:31:15,230 --> 00:31:19,789
obvious the submitter wouldn't have done

00:31:17,029 --> 00:31:22,100
it in the first place they might be

00:31:19,789 --> 00:31:25,249
missing context they might be unaware of

00:31:22,100 --> 00:31:29,840
a concept especially avoid this one

00:31:25,249 --> 00:31:31,609
well actually don't say it it's

00:31:29,840 --> 00:31:34,940
something that you might say when

00:31:31,609 --> 00:31:36,499
something or someone is mostly right but

00:31:34,940 --> 00:31:39,019
you feel like you need to interrupt them

00:31:36,499 --> 00:31:41,330
with a very minor correction usually

00:31:39,019 --> 00:31:43,549
it's not worth it I recommend reading

00:31:41,330 --> 00:31:46,129
the recurse Center for this gem and many

00:31:43,549 --> 00:31:49,549
more weaker centers social rules for

00:31:46,129 --> 00:31:51,769
this gem and many more I'm not sure if

00:31:49,549 --> 00:31:53,690
any of you practice yoga I do

00:31:51,769 --> 00:31:55,700
occasionally and this happens in my

00:31:53,690 --> 00:31:57,679
class all the time the teacher will

00:31:55,700 --> 00:32:00,409
somehow it twist herself into a pretzel

00:31:57,679 --> 00:32:04,100
and then she'll just tell the class to

00:32:00,409 --> 00:32:06,220
now simply put your feet behind your

00:32:04,100 --> 00:32:06,220
head

00:32:06,309 --> 00:32:12,080
few of you would consider this simple I

00:32:09,200 --> 00:32:14,600
mean I certainly don't but that looks

00:32:12,080 --> 00:32:16,669
hard so remember this uncomfortable

00:32:14,600 --> 00:32:21,169
little guy when you start saying one of

00:32:16,669 --> 00:32:22,850
those words to be effective you really

00:32:21,169 --> 00:32:25,779
need to have clear feedback your

00:32:22,850 --> 00:32:29,059
opinions need to be strongly supported

00:32:25,779 --> 00:32:30,950
you need to share the how and why why

00:32:29,059 --> 00:32:32,629
you think this change is necessary how

00:32:30,950 --> 00:32:35,200
you might go upon with the

00:32:32,629 --> 00:32:37,669
implementation link to blogs

00:32:35,200 --> 00:32:41,090
documentation other resources I backup

00:32:37,669 --> 00:32:42,739
your opinions and don't feign surprised

00:32:41,090 --> 00:32:44,809
if someone doesn't know something even

00:32:42,739 --> 00:32:47,450
if you consider it a basic concept like

00:32:44,809 --> 00:32:49,210
you know gasp I can't believe that Dave

00:32:47,450 --> 00:32:52,399
doesn't know about the singleton pattern

00:32:49,210 --> 00:32:54,799
design pattern cut down on the snark and

00:32:52,399 --> 00:32:55,429
innuendos this isn't the time or the

00:32:54,799 --> 00:32:57,559
place

00:32:55,429 --> 00:33:01,509
reviews can bring up a lot of emotions

00:32:57,559 --> 00:33:03,499
for both sides so be cognizant of that

00:33:01,509 --> 00:33:06,859
also make sure you stay away from

00:33:03,499 --> 00:33:09,970
critical emoji only feedback if you

00:33:06,859 --> 00:33:14,450
leave a thumbs down emoji and no comment

00:33:09,970 --> 00:33:15,540
it's not a great call something like

00:33:14,450 --> 00:33:22,110
this is

00:33:15,540 --> 00:33:24,120
not clear feedback remember to

00:33:22,110 --> 00:33:25,740
compliment good work and great ideas I

00:33:24,120 --> 00:33:27,780
like to leave a thumbs up when I see

00:33:25,740 --> 00:33:31,020
something like a great refactoring a

00:33:27,780 --> 00:33:32,820
particularly clean solution something

00:33:31,020 --> 00:33:35,760
really elegant because reviews shouldn't

00:33:32,820 --> 00:33:37,800
be all about the bad for large reviews

00:33:35,760 --> 00:33:43,020
with a lot of comments consider leaving

00:33:37,800 --> 00:33:45,000
at least one compliment and you don't

00:33:43,020 --> 00:33:46,770
want to be a perfectionist this tweet

00:33:45,000 --> 00:33:50,520
says it a lot better than I can

00:33:46,770 --> 00:33:55,890
the goal is better code not exactly the

00:33:50,520 --> 00:33:58,440
code that I would have written for big

00:33:55,890 --> 00:34:00,390
issues don't let perfect get in the way

00:33:58,440 --> 00:34:03,480
of perfectly acceptable prioritize

00:34:00,390 --> 00:34:05,480
what's important to you usually 90 95

00:34:03,480 --> 00:34:07,470
percent of the way there is good enough

00:34:05,480 --> 00:34:08,909
when you press for complete

00:34:07,470 --> 00:34:10,649
perfectionism you end up taking

00:34:08,909 --> 00:34:12,810
ownership away from the person who wrote

00:34:10,649 --> 00:34:16,429
the code it takes their feelings of

00:34:12,810 --> 00:34:19,110
accomplishment and creativity away but

00:34:16,429 --> 00:34:21,419
it's also okay to nitpick things like

00:34:19,110 --> 00:34:24,629
syntax issues spelling errors poor

00:34:21,419 --> 00:34:27,450
variable names missing corner cases save

00:34:24,629 --> 00:34:28,980
those nitpicks for last you might ask

00:34:27,450 --> 00:34:31,110
what's the harm and letting some of

00:34:28,980 --> 00:34:33,120
these pass by well it's the broken

00:34:31,110 --> 00:34:35,040
window of theory if I see sloppy code I

00:34:33,120 --> 00:34:39,210
assume it's okay to check in sloppy code

00:34:35,040 --> 00:34:41,490
to you at this point you need to specify

00:34:39,210 --> 00:34:45,389
if your nitpicks are blocking merge or

00:34:41,490 --> 00:34:48,120
not as a PR submitter I think of

00:34:45,389 --> 00:34:50,340
nitpicks as a compliment if the rest of

00:34:48,120 --> 00:34:53,070
your code is so well written that the

00:34:50,340 --> 00:34:57,990
small stuff sticks out you did a great

00:34:53,070 --> 00:34:59,700
job don't burn out as a reviewer those

00:34:57,990 --> 00:35:01,380
case studies have shown that you should

00:34:59,700 --> 00:35:05,490
look at about two to four hundred lines

00:35:01,380 --> 00:35:07,590
of code at a time for maximum impact in

00:35:05,490 --> 00:35:09,960
practice reviewing between two and four

00:35:07,590 --> 00:35:12,330
hundred lines of code within a 1690

00:35:09,960 --> 00:35:15,630
window 90 minute window will let you

00:35:12,330 --> 00:35:17,370
find about 70 to 90% of the bugs if 10

00:35:15,630 --> 00:35:19,020
bugs exist in your code a properly

00:35:17,370 --> 00:35:22,860
conducted review would find between

00:35:19,020 --> 00:35:24,900
seven and nine of them after five

00:35:22,860 --> 00:35:26,520
hundred lines of code those studies have

00:35:24,900 --> 00:35:27,850
shown that the ability to find bugs

00:35:26,520 --> 00:35:30,640
drops dramatically

00:35:27,850 --> 00:35:33,790
if the code stops making sense you're

00:35:30,640 --> 00:35:35,680
probably tired you might need to take a

00:35:33,790 --> 00:35:39,490
break you might miss something

00:35:35,680 --> 00:35:41,320
a good rule of thumb if you work in a

00:35:39,490 --> 00:35:43,780
company try to do those reviews within

00:35:41,320 --> 00:35:45,880
24 to 48 hours after they're submitted

00:35:43,780 --> 00:35:48,130
this is especially easy when those

00:35:45,880 --> 00:35:50,050
reviews are small this lets you look at

00:35:48,130 --> 00:35:52,090
those reviews incremental e it prevents

00:35:50,050 --> 00:35:54,010
buildup it also means that the code is

00:35:52,090 --> 00:35:57,820
fresh in the submitters mind for

00:35:54,010 --> 00:36:01,290
questions obviously this rule is I said

00:35:57,820 --> 00:36:04,150
obviously shame on me it's not obvious

00:36:01,290 --> 00:36:07,690
but a good rule of thumb is to be

00:36:04,150 --> 00:36:10,780
flexible for open source projects try to

00:36:07,690 --> 00:36:12,670
keep at least respond within 48 to 72

00:36:10,780 --> 00:36:17,020
hours if you can because it helps keep

00:36:12,670 --> 00:36:19,060
excitement and momentum up you don't

00:36:17,020 --> 00:36:20,440
want to end up like this guy just who's

00:36:19,060 --> 00:36:25,810
still waiting and waiting and waiting

00:36:20,440 --> 00:36:28,690
for code review so how can we be a great

00:36:25,810 --> 00:36:32,230
levira we have empathy we watch our

00:36:28,690 --> 00:36:36,040
language we have clear feedback we give

00:36:32,230 --> 00:36:38,680
compliments for good work we're now

00:36:36,040 --> 00:36:42,580
perfectionist about the project about

00:36:38,680 --> 00:36:44,530
the process we avoid reviewer burnout we

00:36:42,580 --> 00:36:47,440
finish those reviews as soon as possible

00:36:44,530 --> 00:36:49,960
and we don't leave people hanging this

00:36:47,440 --> 00:36:52,000
this is not just anecdotes I've become a

00:36:49,960 --> 00:36:54,430
much stronger engineer by giving and

00:36:52,000 --> 00:36:56,170
receiving code reviews especially at a

00:36:54,430 --> 00:36:58,090
company that had a great review culture

00:36:56,170 --> 00:37:00,370
I used it as an opportunity to learn

00:36:58,090 --> 00:37:01,960
from others I started anticipating

00:37:00,370 --> 00:37:05,650
whatever viewer might point out before

00:37:01,960 --> 00:37:08,590
even getting to the review process code

00:37:05,650 --> 00:37:11,530
reviews sound like hard work and they

00:37:08,590 --> 00:37:13,420
are I'm not going to sugarcoat it but

00:37:11,530 --> 00:37:16,870
now you know what to do to reap the

00:37:13,420 --> 00:37:20,560
rewards you can use this as a huge

00:37:16,870 --> 00:37:22,810
advantage when somebody new joins Sasha

00:37:20,560 --> 00:37:24,880
said it best during her talk on giving

00:37:22,810 --> 00:37:28,450
and getting technical help she said

00:37:24,880 --> 00:37:31,120
hiring send senior engineers is hard we

00:37:28,450 --> 00:37:33,790
all know that instead you can hire

00:37:31,120 --> 00:37:36,310
junior engineers and you can grow them

00:37:33,790 --> 00:37:38,800
into your functional and functional and

00:37:36,310 --> 00:37:41,210
productive part of your team code

00:37:38,800 --> 00:37:44,450
reviews are an absolutely fantastic

00:37:41,210 --> 00:37:46,520
way of doing that if you're not doing

00:37:44,450 --> 00:37:49,310
code reviews you're missing a huge

00:37:46,520 --> 00:37:51,920
opportunity there provably shown to

00:37:49,310 --> 00:37:53,960
improve code quality against across all

00:37:51,920 --> 00:37:56,150
kinds of organizations all kinds of code

00:37:53,960 --> 00:37:57,500
bases think about what's blocking your

00:37:56,150 --> 00:37:59,360
team from trying out some of the

00:37:57,500 --> 00:38:01,940
techniques I told you about today and

00:37:59,360 --> 00:38:07,450
figure out ways of eliminating those

00:38:01,940 --> 00:38:10,700
blockers remember allocate the time

00:38:07,450 --> 00:38:14,330
develop don't force the process code

00:38:10,700 --> 00:38:17,120
reviews are not a one-stop fix you need

00:38:14,330 --> 00:38:19,040
to use them in addition to tests QA and

00:38:17,120 --> 00:38:23,900
other kinds of methods for maximum

00:38:19,040 --> 00:38:26,120
impact what did we learn my coworker

00:38:23,900 --> 00:38:28,250
Sarah Dresner she said that co-workers

00:38:26,120 --> 00:38:31,900
were good at code review are worth their

00:38:28,250 --> 00:38:35,000
weight in gold i 100% agree with her and

00:38:31,900 --> 00:38:37,240
the most important thing we learned that

00:38:35,000 --> 00:38:39,770
code reviews decrease WTFs per minute

00:38:37,240 --> 00:38:44,960
which is the only valid measurement of

00:38:39,770 --> 00:38:46,640
code quality that's affect we all want

00:38:44,960 --> 00:38:50,690
to work with the team on the left and

00:38:46,640 --> 00:38:55,100
not with the team on the right less WTF

00:38:50,690 --> 00:38:56,840
with too much happier developers if you

00:38:55,100 --> 00:38:58,910
want to check if you want to learn more

00:38:56,840 --> 00:39:01,850
about what I work on at Microsoft check

00:38:58,910 --> 00:39:04,520
out the link bit dot we slash Python

00:39:01,850 --> 00:39:07,700
adjourn my slides are available for

00:39:04,520 --> 00:39:09,740
download at least and go code reviews

00:39:07,700 --> 00:39:11,960
there are tons of links to additional

00:39:09,740 --> 00:39:14,750
resources here including a link to my

00:39:11,960 --> 00:39:16,430
blog post about the top 3 gacho's to

00:39:14,750 --> 00:39:19,760
look out for when your code reviewing

00:39:16,430 --> 00:39:22,340
Django applications and some links to

00:39:19,760 --> 00:39:24,830
examples code Styles lots of great

00:39:22,340 --> 00:39:27,110
things in there if you have comments

00:39:24,830 --> 00:39:29,990
questions feedback if you agree with me

00:39:27,110 --> 00:39:32,120
or if you disagree with me please send

00:39:29,990 --> 00:39:34,440
me a message on Twitter I'd love to hear

00:39:32,120 --> 00:39:41,929
from you thank you so much

00:39:34,440 --> 00:39:41,929

YouTube URL: https://www.youtube.com/watch?v=ZsT7nSRQ8S4


