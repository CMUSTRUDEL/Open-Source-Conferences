Title: DjangoCon US 2018 - Packaging Django Apps for Distribution on PyPI by Laura Hampton
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - Packaging Django Apps for Distribution on PyPI by Laura Hampton

One of the strengths of Django is that it allows you to use apps created by other developers, so you don’t have to spend time rewriting something that someone else has already written. However, creating Python packages for distribution via the Python Package Index is a process that is unfamiliar to most developers. In this talk, you will learn about creating a reusable Django app. The talk will cover how a Django app differs from a package like requests, and how an app interacts with models and URLs in an existing project.

While the talk will include a discussion of how to upload a Django app to PyPI, the parts that discuss how to make reusable Django apps will be useful to developers who are working at organizations where they may not be able to open-source their code.

This talk is intended for Django developers who have some familiarity with how Django works, and an interest in code reuse and packaging.

This talk was presented at: https://2018.djangocon.us/talk/packaging-django-apps-for-distribution/

LINKS:
Follow Laura Hampton 👇
On Twitter: https://twitter.com/incunabulista
Official homepage: http://www.laura-hampton.com

Follow DjangCon US 👇
https://twitter.com/djangocon

Follow DEFNA 👇
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,800 --> 00:00:21,029
hello my name is Laura and I am a Python

00:00:19,380 --> 00:00:23,490
developer I live in New York City I

00:00:21,029 --> 00:00:24,930
previously worked with Ernest and Dustin

00:00:23,490 --> 00:00:28,140
and a bunch of other awesome people on

00:00:24,930 --> 00:00:30,560
the pipe reei project and now I work at

00:00:28,140 --> 00:00:30,560
data dawg

00:00:30,830 --> 00:00:35,399
so as developers we may need to write

00:00:33,270 --> 00:00:37,680
the same or similar code over and over

00:00:35,399 --> 00:00:40,500
but we don't want to reinvent the wheel

00:00:37,680 --> 00:00:42,210
if you have a single piece feature or

00:00:40,500 --> 00:00:43,739
piece of functionality on your Django

00:00:42,210 --> 00:00:46,020
project that you might want to use on

00:00:43,739 --> 00:00:49,200
another site you might consider making

00:00:46,020 --> 00:00:50,940
it into a package this talk is for

00:00:49,200 --> 00:00:52,590
people who want to make Django packages

00:00:50,940 --> 00:00:55,410
to share on pi PI or with their

00:00:52,590 --> 00:00:58,500
co-workers or we're curious about what

00:00:55,410 --> 00:01:00,809
goes into packaging and Django app this

00:00:58,500 --> 00:01:02,750
talk will cover best practices for

00:01:00,809 --> 00:01:05,250
creating and distributing django apps

00:01:02,750 --> 00:01:06,360
however there are a couple topics that

00:01:05,250 --> 00:01:08,850
I'm not gonna have time to cover

00:01:06,360 --> 00:01:10,650
extensively I'm not gonna have an

00:01:08,850 --> 00:01:14,130
extensive discussion of security or

00:01:10,650 --> 00:01:16,170
licensing or how to choose a license or

00:01:14,130 --> 00:01:18,090
open I won't really talk about open

00:01:16,170 --> 00:01:20,340
sourcing your package beyond making the

00:01:18,090 --> 00:01:21,750
code available to users and I'm not

00:01:20,340 --> 00:01:26,009
really going to discuss open source

00:01:21,750 --> 00:01:27,960
community building and cultivation so

00:01:26,009 --> 00:01:30,630
what is a package we're familiar with

00:01:27,960 --> 00:01:32,369
the import statement and and that

00:01:30,630 --> 00:01:35,250
packages are important that you can use

00:01:32,369 --> 00:01:37,170
import syntax with them most packages

00:01:35,250 --> 00:01:38,610
give us access to classes and functions

00:01:37,170 --> 00:01:40,619
that are not defined in our current

00:01:38,610 --> 00:01:42,560
Python file so using them is like

00:01:40,619 --> 00:01:45,210
choosing chocolates from a chocolate box

00:01:42,560 --> 00:01:48,299
package is also an overloaded term in

00:01:45,210 --> 00:01:50,340
the Python world so packages are

00:01:48,299 --> 00:01:53,880
something that contain multiple files

00:01:50,340 --> 00:01:55,979
and may contain things like compiled C

00:01:53,880 --> 00:01:58,979
extensions or data files or things like

00:01:55,979 --> 00:02:00,659
Django templates modules our single file

00:01:58,979 --> 00:02:03,060
of Python code and I'm not really going

00:02:00,659 --> 00:02:05,130
to talk that much about them so all

00:02:03,060 --> 00:02:07,890
packages are modules but not all modules

00:02:05,130 --> 00:02:09,899
are packages and a distribution which

00:02:07,890 --> 00:02:11,670
will talk about eventually is a package

00:02:09,899 --> 00:02:14,569
that has a version a version and is

00:02:11,670 --> 00:02:14,569
ready for publication

00:02:14,629 --> 00:02:20,129
so there are some differences between a

00:02:17,069 --> 00:02:22,739
Jenga utility package like requests and

00:02:20,129 --> 00:02:25,879
in Django package Django apps are mostly

00:02:22,739 --> 00:02:28,230
Python code so they can be packaged like

00:02:25,879 --> 00:02:31,709
requests or like a another type of

00:02:28,230 --> 00:02:33,840
utility package like that but instead of

00:02:31,709 --> 00:02:36,030
using bits and pieces of the of the your

00:02:33,840 --> 00:02:37,799
Django package Django app you can

00:02:36,030 --> 00:02:39,389
install the whole app in your Django

00:02:37,799 --> 00:02:41,129
project so it's sort of like adding a

00:02:39,389 --> 00:02:42,450
melted chunk of chocolate to a recipe

00:02:41,129 --> 00:02:46,079
when you're making chocolate cake or

00:02:42,450 --> 00:02:47,930
chocolate sauce an app is a

00:02:46,079 --> 00:02:50,099
self-contained part of a Django project

00:02:47,930 --> 00:02:52,530
that you might take off your initial

00:02:50,099 --> 00:02:54,540
Django project and reuse so it's

00:02:52,530 --> 00:02:56,579
something useful like user registration

00:02:54,540 --> 00:02:57,599
or a blog app or a contact form that

00:02:56,579 --> 00:03:03,480
will apply to a bunch of different

00:02:57,599 --> 00:03:05,760
Django projects these apps can be

00:03:03,480 --> 00:03:07,530
installed but by pip installing them and

00:03:05,760 --> 00:03:11,669
then adding them to install the apps and

00:03:07,530 --> 00:03:13,530
settings and set the appropriate URLs in

00:03:11,669 --> 00:03:16,010
the URL conference settings and you're

00:03:13,530 --> 00:03:16,010
off to the races

00:03:16,250 --> 00:03:20,879
so a simple Django project might contain

00:03:19,019 --> 00:03:22,979
a handful of apps like the Django girl's

00:03:20,879 --> 00:03:25,560
blog the or the poles app from the

00:03:22,979 --> 00:03:27,419
Django documentation whereas a complex

00:03:25,560 --> 00:03:28,979
project might have tens or even hundreds

00:03:27,419 --> 00:03:38,359
of installed apps it's a lot of

00:03:28,979 --> 00:03:40,680
chocolate so what makes a good app

00:03:38,359 --> 00:03:43,189
Django apps tend to follow the UNIX

00:03:40,680 --> 00:03:45,689
philosophy do one thing and do it well

00:03:43,189 --> 00:03:48,239
so it for instance we should think about

00:03:45,689 --> 00:03:50,009
them like LS which lists files in a

00:03:48,239 --> 00:03:51,870
directory and gives information about

00:03:50,009 --> 00:03:54,689
them like their permissions or their

00:03:51,870 --> 00:03:57,060
types it doesn't search files for you

00:03:54,689 --> 00:03:58,709
and it doesn't edit them and so we

00:03:57,060 --> 00:04:01,530
should be able to explain what your app

00:03:58,709 --> 00:04:04,109
does in one or two brief sentences my

00:04:01,530 --> 00:04:06,930
app signs up new users my app displays

00:04:04,109 --> 00:04:10,530
blog posts or my app collects pulls

00:04:06,930 --> 00:04:12,000
votes in a poll and displays them the

00:04:10,530 --> 00:04:14,519
installation of your app should be

00:04:12,000 --> 00:04:16,349
minimally invasive so don't go doing

00:04:14,519 --> 00:04:22,949
things like substituting sequel alchemy

00:04:16,349 --> 00:04:25,050
for the Django ORM make sure make sure

00:04:22,949 --> 00:04:26,260
all the files relevant to your app are

00:04:25,050 --> 00:04:28,330
in the app directory

00:04:26,260 --> 00:04:30,550
and don't set things in stone for your

00:04:28,330 --> 00:04:33,040
users supply some basic templates or a

00:04:30,550 --> 00:04:35,830
default form form class but let the user

00:04:33,040 --> 00:04:37,570
substitute another if they wish don't

00:04:35,830 --> 00:04:39,910
make assumptions also about where the

00:04:37,570 --> 00:04:41,710
code will live don't force people to do

00:04:39,910 --> 00:04:43,930
strange things to their Python path in

00:04:41,710 --> 00:04:47,310
order to make their app work or your app

00:04:43,930 --> 00:04:49,480
work also it's a good idea to use URL

00:04:47,310 --> 00:04:51,550
namespaces because other install the

00:04:49,480 --> 00:04:56,800
apps may have identical URLs to the ones

00:04:51,550 --> 00:04:59,590
that you're using so when you're setting

00:04:56,800 --> 00:05:01,240
up your django application you as a

00:04:59,590 --> 00:05:03,790
package you can either choose to use a

00:05:01,240 --> 00:05:05,800
source directory or not the source

00:05:03,790 --> 00:05:08,260
directory sits one level down from the

00:05:05,800 --> 00:05:10,150
main folder of your app and the source

00:05:08,260 --> 00:05:11,560
directory does a couple good things in

00:05:10,150 --> 00:05:15,070
terms of the functionality of your app

00:05:11,560 --> 00:05:16,740
it forces you to pip install your app in

00:05:15,070 --> 00:05:19,300
order for your tests to work properly

00:05:16,740 --> 00:05:22,720
which makes sure that pip install works

00:05:19,300 --> 00:05:25,360
and works the way you expect it you can

00:05:22,720 --> 00:05:28,570
also use you should also think about

00:05:25,360 --> 00:05:30,670
shipping a skeleton django project or

00:05:28,570 --> 00:05:32,260
some scripts that emulate it so that

00:05:30,670 --> 00:05:37,290
your tests will run on your user's

00:05:32,260 --> 00:05:39,310
machine and please also do have tests

00:05:37,290 --> 00:05:41,020
because tests will lead to better

00:05:39,310 --> 00:05:44,800
contributions from you and from other

00:05:41,020 --> 00:05:47,380
people you should also think carefully

00:05:44,800 --> 00:05:50,110
about the name for your project it

00:05:47,380 --> 00:05:52,630
should be it should be unique and not

00:05:50,110 --> 00:05:54,790
one used already on pi PI because they

00:05:52,630 --> 00:05:57,130
are unique identifiers for your project

00:05:54,790 --> 00:06:00,160
and they're also used in the pipe eiu RL

00:05:57,130 --> 00:06:02,650
for your project a valid name consists

00:06:00,160 --> 00:06:04,960
on pi pi consists only of ascii letters

00:06:02,650 --> 00:06:07,540
and numbers period underscore in - and

00:06:04,960 --> 00:06:09,910
start an end with a letter or number and

00:06:07,540 --> 00:06:12,520
a package that works with django should

00:06:09,910 --> 00:06:14,560
have django in the name partly so that

00:06:12,520 --> 00:06:16,540
it's not taking a module namespace that

00:06:14,560 --> 00:06:19,410
could be used for other projects and

00:06:16,540 --> 00:06:22,030
also shows that it's django specific

00:06:19,410 --> 00:06:24,070
also don't name your app so it conflicts

00:06:22,030 --> 00:06:26,590
with an existing installed one of

00:06:24,070 --> 00:06:30,040
Django's existing installed apps like

00:06:26,590 --> 00:06:32,650
auth admin or messages also don't name

00:06:30,040 --> 00:06:34,150
your project after an obscenity or an

00:06:32,650 --> 00:06:36,910
offensive word or dirty joke or

00:06:34,150 --> 00:06:38,890
something that might sound like it

00:06:36,910 --> 00:06:42,130
because people may use and discuss your

00:06:38,890 --> 00:06:45,750
app at work and it's also good a good

00:06:42,130 --> 00:06:48,640
idea to be respectful of your users so

00:06:45,750 --> 00:06:50,650
you numbering is also worth

00:06:48,640 --> 00:06:52,480
consideration there used to

00:06:50,650 --> 00:06:55,390
differentiate one release from all other

00:06:52,480 --> 00:06:57,910
releases version numbers must be unique

00:06:55,390 --> 00:07:00,220
and versions must be numbered so they

00:06:57,910 --> 00:07:04,150
consistently increase and it's a good

00:07:00,220 --> 00:07:07,360
idea to follows pep 440 closely so pep

00:07:04,150 --> 00:07:10,690
440 allows for semantic versioning like

00:07:07,360 --> 00:07:12,310
Abe B dot C or it allows for year and

00:07:10,690 --> 00:07:17,970
month type versioning as long as it

00:07:12,310 --> 00:07:17,970
confirms to the regex that's in pep 440

00:07:18,090 --> 00:07:21,970
it's important also to have

00:07:20,290 --> 00:07:25,510
documentation for your package if you

00:07:21,970 --> 00:07:27,460
expect to other people to use it spanks

00:07:25,510 --> 00:07:30,190
is standard for building documentation

00:07:27,460 --> 00:07:32,110
first - projects it's also a good idea

00:07:30,190 --> 00:07:35,080
to upload your project to read the docs

00:07:32,110 --> 00:07:36,580
and include Doc's in your package if you

00:07:35,080 --> 00:07:38,950
do something with your package that's

00:07:36,580 --> 00:07:41,890
weird or awesome or cool or hacky please

00:07:38,950 --> 00:07:44,740
document it document your dependencies

00:07:41,890 --> 00:07:47,560
if you include any custom forms or

00:07:44,740 --> 00:07:49,090
templates document those and I want to

00:07:47,560 --> 00:07:51,790
remind you that doc strings are not

00:07:49,090 --> 00:07:54,250
documentation auto-generated

00:07:51,790 --> 00:07:59,080
documentation is not documentation and

00:07:54,250 --> 00:08:03,160
code is not documentation documentation

00:07:59,080 --> 00:08:04,540
is at minimum full sentences in a human

00:08:03,160 --> 00:08:08,130
language telling your users the

00:08:04,540 --> 00:08:10,840
following how to install your package

00:08:08,130 --> 00:08:13,420
what versions of Django and Python it

00:08:10,840 --> 00:08:15,160
works with what the dependencies are

00:08:13,420 --> 00:08:18,460
even if they're automatically installed

00:08:15,160 --> 00:08:20,920
all of your apps public API all of its

00:08:18,460 --> 00:08:24,160
models views and forms what they're for

00:08:20,920 --> 00:08:26,740
what they do and what the user is

00:08:24,160 --> 00:08:29,560
expected to do with them and also how to

00:08:26,740 --> 00:08:30,880
install the app in your project and how

00:08:29,560 --> 00:08:33,729
the users should change their settings

00:08:30,880 --> 00:08:36,430
and their config items to make the your

00:08:33,729 --> 00:08:38,200
package work you should also include

00:08:36,430 --> 00:08:42,729
where to find source code in report bugs

00:08:38,200 --> 00:08:44,420
and suggest features your package also

00:08:42,729 --> 00:08:46,220
needs a readme

00:08:44,420 --> 00:08:48,430
and this can double is the long

00:08:46,220 --> 00:08:50,690
description for your package on pi PI

00:08:48,430 --> 00:08:52,460
it's the first thing that potential

00:08:50,690 --> 00:08:54,170
users and contributors will see about

00:08:52,460 --> 00:08:56,810
your project and it's not a replacement

00:08:54,170 --> 00:08:58,400
for full documentation but you should be

00:08:56,810 --> 00:09:00,080
able to provide enough information so

00:08:58,400 --> 00:09:03,050
your user can find out what your app

00:09:00,080 --> 00:09:05,210
does and if it'll work for them provide

00:09:03,050 --> 00:09:07,490
links to your full documentation and

00:09:05,210 --> 00:09:09,470
your readme and also provide information

00:09:07,490 --> 00:09:12,500
on dependencies and how to get the app

00:09:09,470 --> 00:09:14,480
working tell your users what level of

00:09:12,500 --> 00:09:16,010
support to expect and whether the

00:09:14,480 --> 00:09:17,690
project is actively maintained or

00:09:16,010 --> 00:09:19,100
updated or whether it's like a toy

00:09:17,690 --> 00:09:21,170
project that you've put online because

00:09:19,100 --> 00:09:24,560
it's there and then you don't plan to

00:09:21,170 --> 00:09:26,690
support it the options for formatting

00:09:24,560 --> 00:09:29,390
the readme or long description formats

00:09:26,690 --> 00:09:31,940
on PI pi include getup flavored markdown

00:09:29,390 --> 00:09:35,330
common mark restructured text and plain

00:09:31,940 --> 00:09:37,510
text you should also choose a license

00:09:35,330 --> 00:09:39,800
and this tool will help you choose one

00:09:37,510 --> 00:09:41,480
it's useful if you plan to distribute

00:09:39,800 --> 00:09:43,310
your project so people outside your

00:09:41,480 --> 00:09:44,840
company can use it and if you want the

00:09:43,310 --> 00:09:47,930
wider public to use it it needs a

00:09:44,840 --> 00:09:52,970
license so head over to choose a license

00:09:47,930 --> 00:09:54,160
and pick one now I'm going to talk about

00:09:52,970 --> 00:09:57,500
setup tools

00:09:54,160 --> 00:10:00,140
it contains setup a function with a lot

00:09:57,500 --> 00:10:02,030
of arguments it is the build script to

00:10:00,140 --> 00:10:03,470
make package and a consider your package

00:10:02,030 --> 00:10:05,000
in a consistent way that can then be

00:10:03,470 --> 00:10:07,160
installed on other people's computers

00:10:05,000 --> 00:10:10,310
and it provides metadata about your

00:10:07,160 --> 00:10:13,250
package to pi PI and end-users and I'm

00:10:10,310 --> 00:10:15,820
only going to cover a certain very small

00:10:13,250 --> 00:10:18,350
segment of setup tools keyword arguments

00:10:15,820 --> 00:10:21,440
it's important to work with your users

00:10:18,350 --> 00:10:23,600
versions of dependencies avoid and avoid

00:10:21,440 --> 00:10:25,070
conflicting with the users what a user

00:10:23,600 --> 00:10:29,570
might already have installed in a

00:10:25,070 --> 00:10:31,250
project it's a good idea to aim to allow

00:10:29,570 --> 00:10:34,130
all versions of Jango with upstream

00:10:31,250 --> 00:10:36,110
support and it's best to specify version

00:10:34,130 --> 00:10:39,380
ranges of defense of other dependencies

00:10:36,110 --> 00:10:41,450
that your app will work with it's also a

00:10:39,380 --> 00:10:44,870
good idea to work with your users

00:10:41,450 --> 00:10:46,310
versions of Python and to write for the

00:10:44,870 --> 00:10:48,440
versions of Python that Django will

00:10:46,310 --> 00:10:54,680
support and this will include Python 2 7

00:10:48,440 --> 00:10:57,530
through 2020 or until 2020 classifiers

00:10:54,680 --> 00:10:59,209
allow tagging your app to make it easy

00:10:57,530 --> 00:11:01,439
to find

00:10:59,209 --> 00:11:03,179
idiot and you shouldn't consider

00:11:01,439 --> 00:11:05,579
including versions of Python that your

00:11:03,179 --> 00:11:07,739
package will work with which license

00:11:05,579 --> 00:11:09,329
your package uses which OS it works on

00:11:07,739 --> 00:11:13,679
and which versions of Django your app

00:11:09,329 --> 00:11:17,389
will work with setup tools provides a

00:11:13,679 --> 00:11:20,429
command line tool Python setup I upload

00:11:17,389 --> 00:11:22,529
but based depending on your

00:11:20,429 --> 00:11:25,679
configuration on your machine it may not

00:11:22,529 --> 00:11:27,239
use HTTPS so it's a good idea to use

00:11:25,679 --> 00:11:31,799
twine instead and I will speak about

00:11:27,239 --> 00:11:33,869
more about twine in a minute you should

00:11:31,799 --> 00:11:36,660
also consider including non code files

00:11:33,869 --> 00:11:40,410
like your license your readme your

00:11:36,660 --> 00:11:42,509
documentation in your package and you

00:11:40,410 --> 00:11:45,119
can do this by passing include package

00:11:42,509 --> 00:11:47,639
data equals true which will include the

00:11:45,119 --> 00:11:53,009
pet of the files listed in your manifest

00:11:47,639 --> 00:11:55,559
in and this is a small manifest that can

00:11:53,009 --> 00:11:57,959
get quite long and there's a tool for

00:11:55,559 --> 00:11:59,970
checking them called check manifest

00:11:57,959 --> 00:12:03,929
where'd you go there you are okay so

00:11:59,970 --> 00:12:05,910
check manifest and it checks the files

00:12:03,929 --> 00:12:07,350
entered in your manifest in against the

00:12:05,910 --> 00:12:08,519
files you've checked in to get which

00:12:07,350 --> 00:12:10,259
makes sure that you haven't forgotten

00:12:08,519 --> 00:12:15,359
like pieces of your documentation or

00:12:10,259 --> 00:12:17,129
your license or you read me it's a good

00:12:15,359 --> 00:12:19,889
idea to choose to use setup tools

00:12:17,129 --> 00:12:22,379
instead of dist utils dis to tails was

00:12:19,889 --> 00:12:23,910
created in 1998 and is in the process of

00:12:22,379 --> 00:12:26,369
being phased out in favour of setup

00:12:23,910 --> 00:12:28,289
tools setup tools is a drop-in

00:12:26,369 --> 00:12:29,609
replacement for dist utils and allows

00:12:28,289 --> 00:12:32,759
you to declare dependencies on other

00:12:29,609 --> 00:12:34,619
packages setup tools has consistent

00:12:32,759 --> 00:12:36,449
behavior across python versions and is

00:12:34,619 --> 00:12:41,429
more frequently updated than dist utils

00:12:36,449 --> 00:12:43,379
i also want to speak briefly now about

00:12:41,429 --> 00:12:47,429
the difference between requirement text

00:12:43,379 --> 00:12:49,139
and setup pi or setup tools setup has an

00:12:47,429 --> 00:12:50,759
argument called install requires that

00:12:49,139 --> 00:12:52,429
specify other packages that your app

00:12:50,759 --> 00:12:55,199
depends on and will automatically

00:12:52,429 --> 00:12:56,699
install them when the app is installed

00:12:55,199 --> 00:12:59,639
Unwin package is installed on another

00:12:56,699 --> 00:13:01,619
person's computer so set of tools us for

00:12:59,639 --> 00:13:04,529
specifying dependencies and metadata for

00:13:01,619 --> 00:13:06,269
a package requirement text is a list of

00:13:04,529 --> 00:13:08,639
packages and their versions that's been

00:13:06,269 --> 00:13:10,319
generated by pip freeze and it's for

00:13:08,639 --> 00:13:11,520
replicating the packages that are

00:13:10,319 --> 00:13:14,400
installed in someone else's

00:13:11,520 --> 00:13:15,930
virtual environment requirement text is

00:13:14,400 --> 00:13:18,660
basically arguments that are passed to

00:13:15,930 --> 00:13:23,850
pip install when you want to use virtual

00:13:18,660 --> 00:13:25,800
and as a development environment so now

00:13:23,850 --> 00:13:32,250
it's time to upload your app to the

00:13:25,800 --> 00:13:34,350
cheese job so there are two file formats

00:13:32,250 --> 00:13:35,730
to upload your package in a wheel or

00:13:34,350 --> 00:13:37,890
built distribution or a source

00:13:35,730 --> 00:13:41,100
distribution pip will preferentially

00:13:37,890 --> 00:13:43,230
install wheels but upload both a wheel

00:13:41,100 --> 00:13:45,120
and a source distribution to PI pi and

00:13:43,230 --> 00:13:48,090
setup tools can create both a wheel and

00:13:45,120 --> 00:13:50,120
a source distribution in one shot the

00:13:48,090 --> 00:13:54,000
wheel is a special package for working

00:13:50,120 --> 00:13:55,800
those the wheel is a compressed file

00:13:54,000 --> 00:14:01,380
format that has the code for your

00:13:55,800 --> 00:14:02,640
distribution and ends in WHL wheels just

00:14:01,380 --> 00:14:04,770
have to be moved to the right location

00:14:02,640 --> 00:14:06,830
in the file system to be installed and

00:14:04,770 --> 00:14:11,850
they unzip themselves when they're

00:14:06,830 --> 00:14:13,800
placed in that location wheels have a

00:14:11,850 --> 00:14:16,110
faster installation of pure Python and

00:14:13,800 --> 00:14:18,270
in style installing compiled C

00:14:16,110 --> 00:14:20,670
extensions doesn't require require a

00:14:18,270 --> 00:14:24,570
compiler on the target computer on the

00:14:20,670 --> 00:14:26,340
target computer so the wheel comes from

00:14:24,570 --> 00:14:28,250
the old name for pi PI which was the

00:14:26,340 --> 00:14:30,510
cheese shop which was named for the

00:14:28,250 --> 00:14:32,880
Monty Python sketch in which a man

00:14:30,510 --> 00:14:36,470
attempts to buy cheese from a cheese

00:14:32,880 --> 00:14:39,000
shop that has no cheese and now we have

00:14:36,470 --> 00:14:41,970
hundreds of thousands of packages and

00:14:39,000 --> 00:14:47,160
the in pipe I so now it's called the

00:14:41,970 --> 00:14:48,870
warehouse and it is full of cheese so

00:14:47,160 --> 00:14:51,390
why build source distributions if the

00:14:48,870 --> 00:14:53,190
wheel can do all this awesome stuff the

00:14:51,390 --> 00:14:57,090
sorcerer archive distribution contains

00:14:53,190 --> 00:14:59,460
tests Docs and code so your users can

00:14:57,090 --> 00:15:06,030
download all of that in one compressed

00:14:59,460 --> 00:15:08,430
tar file people are tar folder zip thing

00:15:06,030 --> 00:15:10,680
people may want to tell their your codes

00:15:08,430 --> 00:15:12,000
so they can look at it or modify it they

00:15:10,680 --> 00:15:14,490
may want the docs in the code together

00:15:12,000 --> 00:15:18,930
or they may want to build different for

00:15:14,490 --> 00:15:20,460
different architectures such as arm so

00:15:18,930 --> 00:15:22,740
in the world of Python packaging there's

00:15:20,460 --> 00:15:24,990
also something called an egg it's a zip

00:15:22,740 --> 00:15:26,550
file with metadata which is Bill

00:15:24,990 --> 00:15:28,980
distribution with Python bytecode

00:15:26,550 --> 00:15:31,830
they've been largely superseded by the

00:15:28,980 --> 00:15:35,640
wheel format don't make eggs don't

00:15:31,830 --> 00:15:37,350
upload eggs eggs don't Unseld --vs when

00:15:35,640 --> 00:15:38,940
they're installed so you need special

00:15:37,350 --> 00:15:42,029
file loaders to get access to things

00:15:38,940 --> 00:15:45,120
inside like translated pages Django no

00:15:42,029 --> 00:15:46,950
longer ships with these loaders and eggs

00:15:45,120 --> 00:15:49,140
also can't declare dependencies on other

00:15:46,950 --> 00:15:51,680
packages and finally pip does not

00:15:49,140 --> 00:15:57,510
support them why are they called eggs

00:15:51,680 --> 00:15:59,180
because pythons lay eggs so finally

00:15:57,510 --> 00:16:01,440
we're ready to create the distribution

00:15:59,180 --> 00:16:02,850
before creating your package make sure

00:16:01,440 --> 00:16:04,529
you have the latest versions of setup

00:16:02,850 --> 00:16:08,040
tool and wheel and then you can create

00:16:04,529 --> 00:16:10,470
your source distribution and built

00:16:08,040 --> 00:16:15,270
distribution all in one shot so there

00:16:10,470 --> 00:16:18,149
you go and you'll see here that the

00:16:15,270 --> 00:16:21,510
built distribution is what ends in WHL

00:16:18,149 --> 00:16:24,839
and the source distribution is the tar

00:16:21,510 --> 00:16:27,120
file so now we're ready to talk about

00:16:24,839 --> 00:16:30,180
twine which is a tool for uploading

00:16:27,120 --> 00:16:32,490
files for pi pi it's named for tying up

00:16:30,180 --> 00:16:35,730
packages with with twine to include them

00:16:32,490 --> 00:16:38,160
in the warehouse and it's a good idea to

00:16:35,730 --> 00:16:40,589
use twine instead of setup I upload

00:16:38,160 --> 00:16:43,709
because it uploads over HTTP by default

00:16:40,589 --> 00:16:45,779
twine only acts as an uploader if you

00:16:43,709 --> 00:16:47,810
you have to build your source and wheel

00:16:45,779 --> 00:16:50,310
distribution first using setup tools

00:16:47,810 --> 00:16:52,500
twine can upload any packaging format

00:16:50,310 --> 00:16:55,170
and it's a good idea to use twine

00:16:52,500 --> 00:16:56,970
because setup I upload also builds and

00:16:55,170 --> 00:16:59,730
uploads the project in a single step so

00:16:56,970 --> 00:17:04,230
you can't test your built-in source

00:16:59,730 --> 00:17:06,630
distributions first so this is how you

00:17:04,230 --> 00:17:09,270
upload with twine note that I have

00:17:06,630 --> 00:17:15,829
passed a site that is not the official

00:17:09,270 --> 00:17:18,839
pi pi endpoint it is the pi pi sandbox

00:17:15,829 --> 00:17:20,910
uses the same code as pi pi dot org and

00:17:18,839 --> 00:17:22,589
it's a good idea to upload to the

00:17:20,910 --> 00:17:24,650
sandbox if you want to make a toy

00:17:22,589 --> 00:17:26,880
project to see how this process works

00:17:24,650 --> 00:17:28,860
also to see make sure that your

00:17:26,880 --> 00:17:30,150
description and your files look ok and

00:17:28,860 --> 00:17:31,559
then your package is the way you brought

00:17:30,150 --> 00:17:33,990
wanded because you don't want to have to

00:17:31,559 --> 00:17:35,700
bump your version number if you have a

00:17:33,990 --> 00:17:38,000
formatting issue or a typo in your

00:17:35,700 --> 00:17:38,000
reaping

00:17:38,440 --> 00:17:44,290
finally it's a good idea to think about

00:17:41,620 --> 00:17:46,270
the future of your of your of your

00:17:44,290 --> 00:17:49,270
package don't upload your package and

00:17:46,270 --> 00:17:51,160
forget about it upload code to github or

00:17:49,270 --> 00:17:52,660
another code hosting site so people can

00:17:51,160 --> 00:17:55,600
have a place to file issues and make

00:17:52,660 --> 00:17:57,310
pull requests tag your releases on your

00:17:55,600 --> 00:18:00,130
code hosting site so people can see the

00:17:57,310 --> 00:18:01,510
code where you made your releases put

00:18:00,130 --> 00:18:04,420
your Docs and read the docs if you

00:18:01,510 --> 00:18:06,400
haven't already be prepared to respond

00:18:04,420 --> 00:18:09,190
to bug reports and pull requests and

00:18:06,400 --> 00:18:11,320
also have an email address with GPG keys

00:18:09,190 --> 00:18:13,330
if you roll that way where people can

00:18:11,320 --> 00:18:15,070
report security issues without having to

00:18:13,330 --> 00:18:17,740
post them publicly on a code hosting

00:18:15,070 --> 00:18:19,750
site and make sure that it's not your

00:18:17,740 --> 00:18:21,220
personal email address unless you want

00:18:19,750 --> 00:18:24,940
to get emails about your package in

00:18:21,220 --> 00:18:27,100
perpetuity it's also a good idea to

00:18:24,940 --> 00:18:29,320
regularly run tests against it installed

00:18:27,100 --> 00:18:31,600
with any new versions of Python or

00:18:29,320 --> 00:18:35,110
Django and fix any issues and keep it up

00:18:31,600 --> 00:18:37,300
to date mmm and finally I would like to

00:18:35,110 --> 00:18:39,790
thank James Bennett Katie McLaughlin

00:18:37,300 --> 00:18:41,260
Russell Russell Keith Magee and Phil

00:18:39,790 --> 00:18:42,970
James and Nick James for their help

00:18:41,260 --> 00:18:45,220
reviewing my talk and forgiving

00:18:42,970 --> 00:18:48,700
technical help with it all of the errors

00:18:45,220 --> 00:18:50,840
in it are entirely my own and thank you

00:18:48,700 --> 00:18:59,259
very much for coming

00:18:50,840 --> 00:18:59,259

YouTube URL: https://www.youtube.com/watch?v=EdD6Ifjlle4


