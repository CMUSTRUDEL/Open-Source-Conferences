Title: DjangoCon US 2018 - It's about time by Russell Keith-Magee
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - It's about time by Russell Keith-Magee

Hereâ€™s a fun experiment: Mention timezones within earshot of any experienced programmer. Now wait until the profanity stops.

Handling dates and time is an incredibly common requirement in computer applications. Thatâ€™s hardly surprising - we all use computers to record when we did old things, track how long things take, and to plan when weâ€™re going to do things. So why is dealing with time so difficult?

Well, itâ€™s because time has a very sordid history. What we even think of as time has changed. In this talk, youâ€™ll travel through time, and see the impact that two thousand years of history have had on our modern life. Youâ€™ll be shown how all this wibbly-wobbly, timey-wimey history stuff affects the data modelling and APIs we use on a daily basis.

This is going to take someâ€¦ time.

This talk was presented at: https://2018.djangocon.us/talk/it-s-about-time/

LINKS:
Follow Russell Keith-Magee ðŸ‘‡
On Twitter: https://twitter.com/freakboy3742
Official homepage: https://cecinestpasun.com

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,800 --> 00:00:21,000
thank you very much for those kind words

00:00:18,140 --> 00:00:22,890
hi I am Russell Keith McGee I come from

00:00:21,000 --> 00:00:24,960
another country otherwise known as Perth

00:00:22,890 --> 00:00:26,640
Western Australia I'd like to begin by

00:00:24,960 --> 00:00:27,779
recognizing the Kumagai peoples as the

00:00:26,640 --> 00:00:30,929
traditional owners of the land where

00:00:27,779 --> 00:00:32,969
we're meeting today in my day job I am a

00:00:30,929 --> 00:00:35,040
senior data engineer at savato we are a

00:00:32,969 --> 00:00:36,750
market research company we use Python

00:00:35,040 --> 00:00:38,460
and data science to help brands to

00:00:36,750 --> 00:00:40,140
understand their customers they helped

00:00:38,460 --> 00:00:41,370
me get to conferences like Jango Khan

00:00:40,140 --> 00:00:44,370
which is something I'm very very

00:00:41,370 --> 00:00:45,719
grateful about but I am better known for

00:00:44,370 --> 00:00:47,160
my involvement in the Jango community

00:00:45,719 --> 00:00:49,680
I've been a member of the Jango Corps

00:00:47,160 --> 00:00:51,149
team for almost 13 years I was president

00:00:49,680 --> 00:00:53,910
of the Jango software foundation from

00:00:51,149 --> 00:00:56,370
2010 to 2015 and I served on the Jango

00:00:53,910 --> 00:00:59,579
Technical Review Board for the 1.73 1.11

00:00:56,370 --> 00:01:01,289
releases more recently I've been doing

00:00:59,579 --> 00:01:03,780
most of my open-source contribution work

00:01:01,289 --> 00:01:05,880
on the be ware project beware is trying

00:01:03,780 --> 00:01:08,130
to bring Python to modern computing

00:01:05,880 --> 00:01:10,619
platforms like phones and tablets the

00:01:08,130 --> 00:01:12,479
aim is to make using Python as simple

00:01:10,619 --> 00:01:14,189
for developing native applications as

00:01:12,479 --> 00:01:15,750
Jango makes web development something

00:01:14,189 --> 00:01:17,250
that's accessible for newcomers but

00:01:15,750 --> 00:01:20,970
powerful enough for heavy lifting

00:01:17,250 --> 00:01:22,740
purposes but no matter how simple Jango

00:01:20,970 --> 00:01:24,180
makes web programming or beware makes

00:01:22,740 --> 00:01:26,640
mobile programming there are some

00:01:24,180 --> 00:01:30,390
problems that are just capital H hard

00:01:26,640 --> 00:01:31,799
and one of the big ones is dates and

00:01:30,390 --> 00:01:33,750
time now

00:01:31,799 --> 00:01:35,130
something that you may not know about me

00:01:33,750 --> 00:01:37,740
I am a her ology nuts

00:01:35,130 --> 00:01:38,939
I love clocks and watches and how that

00:01:37,740 --> 00:01:41,820
happened is an interesting and

00:01:38,939 --> 00:01:43,470
conveniently topical story my

00:01:41,820 --> 00:01:45,509
undergraduate degree is actually in

00:01:43,470 --> 00:01:47,280
physics but I went into university

00:01:45,509 --> 00:01:48,540
intending to do as much computing as I

00:01:47,280 --> 00:01:49,950
possibly could so I picked up some

00:01:48,540 --> 00:01:52,320
first-year computer programming leap

00:01:49,950 --> 00:01:53,820
units as electives at this point I had

00:01:52,320 --> 00:01:56,009
actually been programming for a few

00:01:53,820 --> 00:01:57,450
years so classes covering if statements

00:01:56,009 --> 00:01:59,520
and while loops wasn't really you know a

00:01:57,450 --> 00:02:01,200
technical challenge and when the time

00:01:59,520 --> 00:02:02,850
came for a mid semester assignment one

00:02:01,200 --> 00:02:04,530
of the requirements write a program that

00:02:02,850 --> 00:02:06,090
will ask the user for a date and return

00:02:04,530 --> 00:02:08,819
whether it's a leap year and how many

00:02:06,090 --> 00:02:10,649
days will be in that year cool and that

00:02:08,819 --> 00:02:12,480
was meant to be a prompt to do a bunch

00:02:10,649 --> 00:02:13,470
of keyboard inputs convert to an integer

00:02:12,480 --> 00:02:16,590
take a modular

00:02:13,470 --> 00:02:17,940
for use an if statement but I decided I

00:02:16,590 --> 00:02:20,070
wasn't going to do the obvious thing I

00:02:17,940 --> 00:02:21,900
was going to show off and build the best

00:02:20,070 --> 00:02:24,240
darn calendar utility the world's ever

00:02:21,900 --> 00:02:26,340
seen which started beyond a bit of a

00:02:24,240 --> 00:02:29,550
journey because when you dig into it

00:02:26,340 --> 00:02:30,810
it's not just mod for the solar year the

00:02:29,550 --> 00:02:33,840
amount of time it takes for the Sun to

00:02:30,810 --> 00:02:36,060
orbit the Earth isn't exactly 365 and a

00:02:33,840 --> 00:02:38,580
quarter days so in addition to having a

00:02:36,060 --> 00:02:40,800
leap leap day every four years there's a

00:02:38,580 --> 00:02:43,290
special case every 100 years where you

00:02:40,800 --> 00:02:44,730
don't add the leap day and every 400

00:02:43,290 --> 00:02:46,380
years there's a leap a special case to

00:02:44,730 --> 00:02:49,200
the special case where you do add the

00:02:46,380 --> 00:02:50,700
leap year where did these rules come

00:02:49,200 --> 00:02:52,020
from well the rules are called the

00:02:50,700 --> 00:02:54,480
Gregorian calendar because they were

00:02:52,020 --> 00:02:56,070
adopted by Pope Gregory the 13th in a

00:02:54,480 --> 00:02:59,130
papal bull named Integra visemes in

00:02:56,070 --> 00:03:00,959
October 1582 why did they adopt such a

00:02:59,130 --> 00:03:03,810
complex set of rules well because the

00:03:00,959 --> 00:03:05,640
year was shifting prior to 1580 to the

00:03:03,810 --> 00:03:07,950
right the Western Roman Catholic world

00:03:05,640 --> 00:03:10,680
used the Julian calendar adopted by

00:03:07,950 --> 00:03:12,570
Julius Caesar in 45 BC but the Julian

00:03:10,680 --> 00:03:15,240
calendar only has the every four years

00:03:12,570 --> 00:03:17,790
leap year rule and so every hundred and

00:03:15,240 --> 00:03:21,360
twenty-eight years the calendar year

00:03:17,790 --> 00:03:23,940
gets a day ahead of the solar year as a

00:03:21,360 --> 00:03:25,860
result by the 1500s the solar year was

00:03:23,940 --> 00:03:27,840
10 days out of alignment with a calendar

00:03:25,860 --> 00:03:29,610
year so that meant that the vernal

00:03:27,840 --> 00:03:30,989
equinox the date in the northern spring

00:03:29,610 --> 00:03:33,959
where day and night of the same length

00:03:30,989 --> 00:03:37,620
didn't happen on March 20th but on April

00:03:33,959 --> 00:03:39,000
1st so what well it's a problem when

00:03:37,620 --> 00:03:41,670
you're computing the date of religious

00:03:39,000 --> 00:03:43,739
holidays the date of Easter is the first

00:03:41,670 --> 00:03:45,390
Sunday after the first ecclesiastical

00:03:43,739 --> 00:03:48,330
full moon falling on or after the vernal

00:03:45,390 --> 00:03:51,739
equinox so if the date of the vernal

00:03:48,330 --> 00:03:54,150
equinox is moving you've got a problem

00:03:51,739 --> 00:03:56,010
the process of calculating the date of

00:03:54,150 --> 00:03:57,690
Easter is called computers from the

00:03:56,010 --> 00:03:59,670
Latin word for computation and it was

00:03:57,690 --> 00:04:01,019
the major problem addressed by astronomy

00:03:59,670 --> 00:04:03,170
and mathematics between the age of

00:04:01,019 --> 00:04:05,790
Aristotle and the a and the Renaissance

00:04:03,170 --> 00:04:07,290
the process of adopting the Gregorian

00:04:05,790 --> 00:04:08,760
calendar though that has some pretty

00:04:07,290 --> 00:04:11,910
hilarious consequences

00:04:08,760 --> 00:04:14,190
pop quiz this year marks the 100th

00:04:11,910 --> 00:04:17,010
anniversary of Red October the start of

00:04:14,190 --> 00:04:18,330
the 1918 Russian Revolution what month

00:04:17,010 --> 00:04:21,750
did it start

00:04:18,330 --> 00:04:23,880
if you said October you'd be wrong

00:04:21,750 --> 00:04:26,130
because Imperial Russia as part of the

00:04:23,880 --> 00:04:27,300
Eastern Orthodoxy didn't adopt the Roman

00:04:26,130 --> 00:04:29,819
Catholic aghori own cow

00:04:27,300 --> 00:04:31,860
until after the revolution so when the

00:04:29,819 --> 00:04:34,530
Russian October Revolution happened on

00:04:31,860 --> 00:04:36,479
October 25th that was on the Julian

00:04:34,530 --> 00:04:38,610
calendar and it was November 7th in

00:04:36,479 --> 00:04:41,129
Western Europe on the Gregorian calendar

00:04:38,610 --> 00:04:43,590
the Roman Catholic world that made the

00:04:41,129 --> 00:04:46,220
calendar adjustment in October 1582 so

00:04:43,590 --> 00:04:48,210
that year October only had twenty days

00:04:46,220 --> 00:04:51,990
but in the opening in the Roman Catholic

00:04:48,210 --> 00:04:54,090
world Sweden changed in 1700 but they

00:04:51,990 --> 00:04:57,360
got the math wrong and can be over

00:04:54,090 --> 00:04:59,610
compensated by a day and so in 1712 they

00:04:57,360 --> 00:05:02,569
adjusted a second time resulting and the

00:04:59,610 --> 00:05:06,210
one and only example of February 30th

00:05:02,569 --> 00:05:09,449
the British Empire changed in 1750 to

00:05:06,210 --> 00:05:12,030
Turkey didn't change until 1926 and so

00:05:09,449 --> 00:05:14,220
the number of days in the year the

00:05:12,030 --> 00:05:17,190
number of days in February and even the

00:05:14,220 --> 00:05:18,960
number of days in October can vary

00:05:17,190 --> 00:05:20,639
depending upon what year you're

00:05:18,960 --> 00:05:24,210
evaluating and where you are in the

00:05:20,639 --> 00:05:25,949
world so that's where my interest in

00:05:24,210 --> 00:05:27,690
dates and times started let's just say

00:05:25,949 --> 00:05:32,099
my first year computer programming

00:05:27,690 --> 00:05:33,630
assignment was comprehensive and Liz

00:05:32,099 --> 00:05:38,669
Murphy my first year computer science

00:05:33,630 --> 00:05:41,099
lecturer was a very patient woman now

00:05:38,669 --> 00:05:43,110
this is an amusing story but I want to

00:05:41,099 --> 00:05:44,849
make a point like a lot of problems in

00:05:43,110 --> 00:05:47,610
computer science something that seems

00:05:44,849 --> 00:05:50,729
relatively simple like what is your name

00:05:47,610 --> 00:05:53,520
what is your sex how many days are there

00:05:50,729 --> 00:05:55,440
this year can seem really simple on the

00:05:53,520 --> 00:05:57,990
surface and trivially easy to implement

00:05:55,440 --> 00:06:00,180
but in practice you actually need to

00:05:57,990 --> 00:06:01,650
understand a lot of human history if

00:06:00,180 --> 00:06:04,860
you're going to implement a robust

00:06:01,650 --> 00:06:07,469
solution but they are solvable problems

00:06:04,860 --> 00:06:10,440
these edge cases exist for reasons and

00:06:07,469 --> 00:06:12,029
there is logic behind them frankly the

00:06:10,440 --> 00:06:13,919
results are the reasons and logic behind

00:06:12,029 --> 00:06:15,690
them is fascinating you just have to be

00:06:13,919 --> 00:06:16,610
aware that there are edge cases and pay

00:06:15,690 --> 00:06:19,740
attention to them

00:06:16,610 --> 00:06:21,330
the problems we see on a daily basis in

00:06:19,740 --> 00:06:22,529
computing with dates and time handling

00:06:21,330 --> 00:06:24,389
is because people either don't

00:06:22,529 --> 00:06:25,949
understand the complexities of problems

00:06:24,389 --> 00:06:28,050
they're trying to solve or they don't

00:06:25,949 --> 00:06:29,909
care or they don't communicate the

00:06:28,050 --> 00:06:31,469
limitations of the solution they've used

00:06:29,909 --> 00:06:33,599
or they're willing to make those

00:06:31,469 --> 00:06:36,120
limitations someone else's problem in

00:06:33,599 --> 00:06:39,000
the future and that's exactly how we got

00:06:36,120 --> 00:06:41,100
y2k a generation of programmers took the

00:06:39,000 --> 00:06:43,170
vernacular at the time and wrote systems

00:06:41,100 --> 00:06:45,420
that stored the year using two digits

00:06:43,170 --> 00:06:48,990
instead of four 75 and still instead of

00:06:45,420 --> 00:06:51,450
1975 and in 1975 the math works fine and

00:06:48,990 --> 00:06:54,120
bytes were actually expensive but come

00:06:51,450 --> 00:06:55,860
1999 the shortcut has transformed from a

00:06:54,120 --> 00:06:59,340
space-saving optimization to a major

00:06:55,860 --> 00:07:00,870
engineering headache and yet despite the

00:06:59,340 --> 00:07:03,660
fact that as an industry we went through

00:07:00,870 --> 00:07:05,490
this just 18 years ago I still see

00:07:03,660 --> 00:07:09,120
official forms that ask for a date and

00:07:05,490 --> 00:07:10,710
provide two boxes for the year and we're

00:07:09,120 --> 00:07:12,870
lining up for a repeat performance in

00:07:10,710 --> 00:07:15,450
less than twenty years many computer

00:07:12,870 --> 00:07:17,340
systems store time as epoch the number

00:07:15,450 --> 00:07:20,580
of seconds since midnight UTC January

00:07:17,340 --> 00:07:23,340
1st 1970 which will be fine right up

00:07:20,580 --> 00:07:26,160
until 3:14 in the morning on January

00:07:23,340 --> 00:07:27,840
19th 2038 when that count will be larger

00:07:26,160 --> 00:07:30,300
than what you can sign so store in a

00:07:27,840 --> 00:07:31,920
signed 32-bit integer and if you're

00:07:30,300 --> 00:07:34,020
thinking oh it's a problem we can solve

00:07:31,920 --> 00:07:35,220
in the future or will be using 64-bit

00:07:34,020 --> 00:07:37,020
machines by then so it won't be a

00:07:35,220 --> 00:07:38,820
problem well firstly you want to guess

00:07:37,020 --> 00:07:41,820
how much 1970s COBOL call you had to be

00:07:38,820 --> 00:07:45,750
updated in 1999 and secondly we have

00:07:41,820 --> 00:07:49,050
already seen epoch box in May 2006 AOL

00:07:45,750 --> 00:07:51,030
servers crashed why because their code

00:07:49,050 --> 00:07:53,970
involved generating events that should

00:07:51,030 --> 00:07:56,070
never timeout and the programmer used a

00:07:53,970 --> 00:07:57,540
hack they just added a billion seconds

00:07:56,070 --> 00:07:59,060
to whatever the current epoch timestamp

00:07:57,540 --> 00:08:02,550
was when when they created the event

00:07:59,060 --> 00:08:03,990
which was fine right up until 1:27 in

00:08:02,550 --> 00:08:07,740
the morning why is it always the morning

00:08:03,990 --> 00:08:09,390
of May 13th 2006 when adding 1 billion

00:08:07,740 --> 00:08:11,490
seconds overflowed the signed 32-bit

00:08:09,390 --> 00:08:13,230
limit and never happened events were

00:08:11,490 --> 00:08:17,030
created using an already expired

00:08:13,230 --> 00:08:19,230
timestamp but here's the thing all

00:08:17,030 --> 00:08:21,300
computer systems have limitations all

00:08:19,230 --> 00:08:23,070
computer systems make assumptions

00:08:21,300 --> 00:08:24,480
the problem with AOL server wasn't that

00:08:23,070 --> 00:08:26,760
they used a hack to make dates

00:08:24,480 --> 00:08:28,230
non-expiring the problem with y2k wasn't

00:08:26,760 --> 00:08:30,510
the system used two characters to story

00:08:28,230 --> 00:08:32,849
here the problem was that the technique

00:08:30,510 --> 00:08:34,740
you the technique that was used set a

00:08:32,849 --> 00:08:36,930
hard deadline for the end of life of

00:08:34,740 --> 00:08:39,570
that code and the end of life either

00:08:36,930 --> 00:08:41,910
wasn't understood wasn't institutionally

00:08:39,570 --> 00:08:42,750
communicated and as a result when the

00:08:41,910 --> 00:08:47,700
clock ran out

00:08:42,750 --> 00:08:49,920
hilarity ensued okay so how do we bide

00:08:47,700 --> 00:08:51,720
our time with Python well there is not

00:08:49,920 --> 00:08:52,080
surprisingly a Python built in module

00:08:51,720 --> 00:08:54,000
called

00:08:52,080 --> 00:08:54,870
time time is a library for thinking

00:08:54,000 --> 00:08:56,430
about time the way

00:08:54,870 --> 00:08:58,560
your computer thinks about it in epoch

00:08:56,430 --> 00:09:00,029
in practice unless you're doing

00:08:58,560 --> 00:09:02,400
something that interacts with hardware

00:09:00,029 --> 00:09:04,470
in some way time is almost certainly not

00:09:02,400 --> 00:09:06,240
the module you want to be using the

00:09:04,470 --> 00:09:07,560
module you probably want to use for most

00:09:06,240 --> 00:09:09,510
of your date and time requirements is

00:09:07,560 --> 00:09:11,010
the date time module date time contains

00:09:09,510 --> 00:09:13,170
tools for dealing with dates and times

00:09:11,010 --> 00:09:16,380
at a human level days months years hours

00:09:13,170 --> 00:09:18,480
minutes seconds and so on the

00:09:16,380 --> 00:09:20,700
Constructors all seem relatively

00:09:18,480 --> 00:09:22,680
straightforward like but if you actually

00:09:20,700 --> 00:09:25,560
use those constructors you're going to

00:09:22,680 --> 00:09:29,460
have a bad time take the first one sure

00:09:25,560 --> 00:09:30,930
that's a date where every conference

00:09:29,460 --> 00:09:33,089
call for papers has this problem the

00:09:30,930 --> 00:09:37,710
plaque on us call for papers closes on

00:09:33,089 --> 00:09:39,540
January 3rd 2019 January 3rd we're okay

00:09:37,710 --> 00:09:42,810
so we just attach a time right okay you

00:09:39,540 --> 00:09:44,070
touch a time what time zone okay yeah

00:09:42,810 --> 00:09:45,540
but what about things that actually did

00:09:44,070 --> 00:09:47,490
happen on a date like you know births

00:09:45,540 --> 00:09:49,529
and deaths and things like that well as

00:09:47,490 --> 00:09:51,720
soon as you don't have time information

00:09:49,529 --> 00:09:53,610
for a date you have lost vital context

00:09:51,720 --> 00:09:55,380
and if you try to do math without that

00:09:53,610 --> 00:09:57,570
context you're going to get bitten

00:09:55,380 --> 00:09:58,950
someone asks Google now how old is

00:09:57,570 --> 00:10:01,770
Stephen Hawking and got the response

00:09:58,950 --> 00:10:04,350
Stephen Hawking died tomorrow at age 76

00:10:01,770 --> 00:10:06,180
now Stephen Hawking did die on March

00:10:04,350 --> 00:10:07,980
14th and he did do a lot of very

00:10:06,180 --> 00:10:10,260
interesting things with space-time but

00:10:07,980 --> 00:10:12,060
without knowing that he died in England

00:10:10,260 --> 00:10:14,339
and the person asking the question was

00:10:12,060 --> 00:10:16,680
in the US where it was still March 13th

00:10:14,339 --> 00:10:18,390
you can't do that math you're missing

00:10:16,680 --> 00:10:20,130
vital information you make an assumption

00:10:18,390 --> 00:10:22,920
and the assumption has in this case

00:10:20,130 --> 00:10:25,020
hilarious consequences and if you

00:10:22,920 --> 00:10:27,270
specify time information without a date

00:10:25,020 --> 00:10:30,089
the time also loses context and you get

00:10:27,270 --> 00:10:31,170
similar problems okay so that means we

00:10:30,089 --> 00:10:33,240
should be using date times the

00:10:31,170 --> 00:10:35,430
constructor for date time has one non

00:10:33,240 --> 00:10:37,740
obvious part teaser info that's the time

00:10:35,430 --> 00:10:39,150
zone info if you don't provide a teaser

00:10:37,740 --> 00:10:41,130
info object when you construct a date

00:10:39,150 --> 00:10:43,290
time it's called a naive date time and

00:10:41,130 --> 00:10:45,330
for most practical purposes it's useless

00:10:43,290 --> 00:10:47,520
a date with a date and time without a

00:10:45,330 --> 00:10:50,640
time zone is an accident waiting to

00:10:47,520 --> 00:10:52,110
happen if you do provide a teaser info

00:10:50,640 --> 00:10:53,910
object it's what's called an unaware

00:10:52,110 --> 00:10:56,700
date time and that's something you can

00:10:53,910 --> 00:10:59,550
work with but where do you get a teaser

00:10:56,700 --> 00:11:00,870
info object from to make date/time

00:10:59,550 --> 00:11:02,730
actually useful you actually have to use

00:11:00,870 --> 00:11:05,310
a third party module and the module you

00:11:02,730 --> 00:11:06,750
should be using is called PI TZ I'd

00:11:05,310 --> 00:11:08,730
argue if you're doing anything with

00:11:06,750 --> 00:11:09,990
dates and times and you don't have pi T

00:11:08,730 --> 00:11:11,610
there's a dependency you're almost

00:11:09,990 --> 00:11:14,040
certainly doing date sometimes wrong

00:11:11,610 --> 00:11:16,290
it's a third-party module because it

00:11:14,040 --> 00:11:18,360
can't be built into Python or Django and

00:11:16,290 --> 00:11:21,240
the reason why is another one of those

00:11:18,360 --> 00:11:23,970
human things pi TZ is a wrapper around

00:11:21,240 --> 00:11:25,589
the Olson time zone database the Olson

00:11:23,970 --> 00:11:27,600
database contains a list of time zones

00:11:25,589 --> 00:11:29,610
the offset from time zone from UTC the

00:11:27,600 --> 00:11:32,699
time at the Greenwich prime meridian and

00:11:29,610 --> 00:11:34,560
it is published regularly multiple

00:11:32,699 --> 00:11:36,600
updates per year the current database is

00:11:34,560 --> 00:11:39,600
called the 2018 ee database so there's

00:11:36,600 --> 00:11:41,160
been five updates this year that might

00:11:39,600 --> 00:11:42,750
regular update cycle is why it can't be

00:11:41,160 --> 00:11:45,060
part of python itself it has a release

00:11:42,750 --> 00:11:47,940
cadence that is just not compatible with

00:11:45,060 --> 00:11:50,010
Python or Django the 2018 edie database

00:11:47,940 --> 00:11:52,139
was published on May 4th because North

00:11:50,010 --> 00:11:53,579
Korea gave the world five days notice

00:11:52,139 --> 00:11:55,410
that they were going to change their

00:11:53,579 --> 00:11:58,079
time zone to match South Korea and

00:11:55,410 --> 00:12:04,079
sometimes these changes are officially

00:11:58,079 --> 00:12:05,970
announced as being retroactive okay so

00:12:04,079 --> 00:12:07,589
why is a whole database format needed

00:12:05,970 --> 00:12:09,329
okay your time zone is just an integer

00:12:07,589 --> 00:12:10,829
number of hours from offset from gmt

00:12:09,329 --> 00:12:12,449
plus an add an hour for daylight savings

00:12:10,829 --> 00:12:14,279
right No

00:12:12,449 --> 00:12:16,220
here are some amusing selections from

00:12:14,279 --> 00:12:18,240
the time boat time zone database file

00:12:16,220 --> 00:12:20,220
Darwin and the Northern Territory of

00:12:18,240 --> 00:12:22,860
Australia observes a nine hours and 30

00:12:20,220 --> 00:12:23,519
minutes offset from UTC Adelaide and

00:12:22,860 --> 00:12:25,170
South Australia

00:12:23,519 --> 00:12:26,730
observes nine hours and 30 minutes but

00:12:25,170 --> 00:12:28,290
ten hours and 30 minutes during daylight

00:12:26,730 --> 00:12:30,449
savings time which is observed during

00:12:28,290 --> 00:12:31,910
the southern summer six months out of

00:12:30,449 --> 00:12:34,949
phase with the northern hemisphere

00:12:31,910 --> 00:12:36,750
Broken Hill is a town in the state of

00:12:34,949 --> 00:12:38,310
New South Wales in Australia but even

00:12:36,750 --> 00:12:41,459
though it's in New South Wales it

00:12:38,310 --> 00:12:43,769
observes South Australian time but it

00:12:41,459 --> 00:12:46,290
uses New South Wales dates for daylight

00:12:43,769 --> 00:12:50,100
saving transitions which most of the

00:12:46,290 --> 00:12:51,810
time is the same but not always eucla is

00:12:50,100 --> 00:12:53,370
a very small border town in western

00:12:51,810 --> 00:12:54,720
australia it does in the observe western

00:12:53,370 --> 00:12:57,120
australian standard time of plus eight

00:12:54,720 --> 00:13:00,089
hours uses 8 hours and 45 minutes offset

00:12:57,120 --> 00:13:01,380
Lord Howe Island uses 10 hours 30

00:13:00,089 --> 00:13:03,810
minutes offset during the winter and

00:13:01,380 --> 00:13:07,410
offsets by 30 minutes for daylight

00:13:03,810 --> 00:13:12,329
saving we haven't even left Australia

00:13:07,410 --> 00:13:14,310
yet this region down here it doesn't

00:13:12,329 --> 00:13:16,980
look anything like this it looks like

00:13:14,310 --> 00:13:18,360
this and last I heard there was a Django

00:13:16,980 --> 00:13:19,949
deployment in Antarctica so this is a

00:13:18,360 --> 00:13:20,960
case the Django core team needs to care

00:13:19,949 --> 00:13:24,110
about

00:13:20,960 --> 00:13:26,420
so once you've installed PTZ pip install

00:13:24,110 --> 00:13:28,670
pi TZ you can reference any time zone by

00:13:26,420 --> 00:13:30,649
name or use the UTC time zone in the

00:13:28,670 --> 00:13:32,600
Pacific time zone which is what's used

00:13:30,649 --> 00:13:35,930
in San Diego is identified as America

00:13:32,600 --> 00:13:37,910
Los Angeles how actually using that time

00:13:35,930 --> 00:13:40,580
zone object however that's a little bit

00:13:37,910 --> 00:13:42,080
more difficult right we just create an

00:13:40,580 --> 00:13:45,740
instance and pass the teaser info in

00:13:42,080 --> 00:13:48,020
when we create the date time right well

00:13:45,740 --> 00:13:51,100
know what's wrong with this picture

00:13:48,020 --> 00:13:55,459
well 5:42 p.m. 15th of October 2018

00:13:51,100 --> 00:13:57,500
LM t-minus one day 1607 what's LMT and

00:13:55,459 --> 00:13:59,930
where did that seven minute spit coming

00:13:57,500 --> 00:14:01,520
the offset turns out back in the day

00:13:59,930 --> 00:14:03,200
time zones weren't something that was

00:14:01,520 --> 00:14:05,209
shared across the whole of a continental

00:14:03,200 --> 00:14:07,430
region they were based upon trying train

00:14:05,209 --> 00:14:10,070
timetables and every train station kept

00:14:07,430 --> 00:14:12,170
its own concept of time it was only when

00:14:10,070 --> 00:14:13,820
we got centrally coordinated time that

00:14:12,170 --> 00:14:16,010
the idea of Pacific Standard Time

00:14:13,820 --> 00:14:17,870
existed and when you try to map

00:14:16,010 --> 00:14:19,700
historical times on the modern time

00:14:17,870 --> 00:14:21,980
zones you get some interesting offsets

00:14:19,700 --> 00:14:23,089
Los Angeles for example used an offset

00:14:21,980 --> 00:14:23,750
there was seven minutes from the

00:14:23,089 --> 00:14:25,610
now-standard

00:14:23,750 --> 00:14:28,940
eight hours which is minus one day plus

00:14:25,610 --> 00:14:31,100
sixteen hours from LNT LMT is lund a

00:14:28,940 --> 00:14:32,990
local Mean Time which is essentially the

00:14:31,100 --> 00:14:34,520
same as UTC but UTC wasn't formally

00:14:32,990 --> 00:14:38,240
standard until it standardized until the

00:14:34,520 --> 00:14:40,490
1960s so referring to 1900 data UTC

00:14:38,240 --> 00:14:43,400
prior to 1960 doesn't make any sense

00:14:40,490 --> 00:14:45,260
and because ln t minus one day plus

00:14:43,400 --> 00:14:47,330
sixteen hours seven minutes is the

00:14:45,260 --> 00:14:49,970
earliest chronological entry in the

00:14:47,330 --> 00:14:52,070
ulsan database for America Los Angeles

00:14:49,970 --> 00:14:54,860
in the absence of any other information

00:14:52,070 --> 00:14:58,430
at time of construction that's the date

00:14:54,860 --> 00:15:00,980
that gets used so time zones themselves

00:14:58,430 --> 00:15:02,180
are time sensitive and if you think

00:15:00,980 --> 00:15:03,920
about it that kind of makes sense you

00:15:02,180 --> 00:15:07,040
can't apply summer time for a date in

00:15:03,920 --> 00:15:09,500
the middle of winter so what you

00:15:07,040 --> 00:15:11,870
actually have to do is create a naive

00:15:09,500 --> 00:15:14,120
date/time object and then localize that

00:15:11,870 --> 00:15:15,650
object when you localize the time zone

00:15:14,120 --> 00:15:17,660
definition can take into account the

00:15:15,650 --> 00:15:19,370
date that you are converting and then

00:15:17,660 --> 00:15:23,329
construct the appropriate teaser info

00:15:19,370 --> 00:15:24,980
object to pass into the date time so the

00:15:23,329 --> 00:15:27,440
date time module gives us primitives for

00:15:24,980 --> 00:15:29,650
storing dates but those primitives can

00:15:27,440 --> 00:15:31,640
be difficult to construct manually and

00:15:29,650 --> 00:15:33,140
unfortunately it's even harder when you

00:15:31,640 --> 00:15:34,410
consider that in most cases the data

00:15:33,140 --> 00:15:36,389
isn't coming in in a

00:15:34,410 --> 00:15:38,639
nice clean well sorted numerical format

00:15:36,389 --> 00:15:40,079
the problem of parsing dates from text

00:15:38,639 --> 00:15:41,579
is one of the areas where the Python

00:15:40,079 --> 00:15:43,500
standard library has limitations and

00:15:41,579 --> 00:15:45,509
it's not because the standard library is

00:15:43,500 --> 00:15:47,449
bad it's because it's a hard problem and

00:15:45,509 --> 00:15:52,139
it's a hard problem again because of

00:15:47,449 --> 00:15:56,100
people so today is Monday October 15th

00:15:52,139 --> 00:16:01,199
last Monday was the 8th of October 2018

00:15:56,100 --> 00:16:04,410
I mean October 8th 2018 I mean it's 2018

00:16:01,199 --> 00:16:06,689
s October 8th day month year month day

00:16:04,410 --> 00:16:08,370
year and year month day are all common

00:16:06,689 --> 00:16:09,449
orderings for dates depending upon where

00:16:08,370 --> 00:16:11,519
you are in the world if you are

00:16:09,449 --> 00:16:13,470
accepting date input you have to be

00:16:11,519 --> 00:16:15,360
aware that there are cultural variations

00:16:13,470 --> 00:16:21,750
in the way people represent dates and

00:16:15,360 --> 00:16:23,670
yes I'm looking at you America date time

00:16:21,750 --> 00:16:25,769
has a mechanism for passing dates STRP

00:16:23,670 --> 00:16:27,360
time now if you happen to know the exact

00:16:25,769 --> 00:16:29,160
format that your humans will be

00:16:27,360 --> 00:16:30,959
inputting dates it generally works fine

00:16:29,160 --> 00:16:32,430
the problem is that you probably don't

00:16:30,959 --> 00:16:35,819
know what format your humans will be

00:16:32,430 --> 00:16:37,079
providing dates ISO 8601 is the

00:16:35,819 --> 00:16:38,880
international standard format for

00:16:37,079 --> 00:16:40,380
representing dates and like all good

00:16:38,880 --> 00:16:43,050
international standards it's the format

00:16:40,380 --> 00:16:44,639
no one actually uses it's it uses year

00:16:43,050 --> 00:16:46,709
month day hour minute second and then

00:16:44,639 --> 00:16:49,949
either a UTC offset in hours minutes or

00:16:46,709 --> 00:16:52,170
a Zed for Zulu or unit UTC time it's

00:16:49,949 --> 00:16:54,569
also unfortunately the one format that s

00:16:52,170 --> 00:16:59,850
late date time that STR P time doesn't

00:16:54,569 --> 00:17:02,160
pass natively there's also a subtle

00:16:59,850 --> 00:17:06,329
problem lying in wait with a ISO 8601

00:17:02,160 --> 00:17:08,069
format date times ISO 8601 specifies the

00:17:06,329 --> 00:17:10,819
date in two hours minutes seconds then

00:17:08,069 --> 00:17:13,770
specifies a UTC offset in hours minutes

00:17:10,819 --> 00:17:15,750
there you've got a problem because a UTC

00:17:13,770 --> 00:17:19,020
offset isn't the same thing as a

00:17:15,750 --> 00:17:21,150
timezone take my own home time zone you

00:17:19,020 --> 00:17:23,819
to see +8 hours now it's not just

00:17:21,150 --> 00:17:26,189
important because of me 1/6 of the

00:17:23,819 --> 00:17:26,750
world's population lives in that time

00:17:26,189 --> 00:17:29,880
zone

00:17:26,750 --> 00:17:32,460
what UTC a plus 8 hours won't tell you

00:17:29,880 --> 00:17:33,390
is where they are which timezone those

00:17:32,460 --> 00:17:36,450
people are living in

00:17:33,390 --> 00:17:38,669
so UTC is a plus 8 hours uniquely

00:17:36,450 --> 00:17:40,320
identifies a point in time but it

00:17:38,669 --> 00:17:42,840
doesn't help you work out the right

00:17:40,320 --> 00:17:44,280
format for a particular user and it

00:17:42,840 --> 00:17:45,840
doesn't tell you if any of those places

00:17:44,280 --> 00:17:47,970
are observing daylight saving time or

00:17:45,840 --> 00:17:48,210
when daylight saving time went into or

00:17:47,970 --> 00:17:52,080
will

00:17:48,210 --> 00:17:53,760
effect dealing with dates is clearly a

00:17:52,080 --> 00:17:55,110
complex problem and so lots of people

00:17:53,760 --> 00:17:57,240
have tried their hands at doing it

00:17:55,110 --> 00:17:59,549
better date you till arrow moment Maya

00:17:57,240 --> 00:18:01,440
DeLorean are all pipe eye modules that

00:17:59,549 --> 00:18:03,630
attempt to make date/time handling

00:18:01,440 --> 00:18:05,399
easier date parsing is one of the areas

00:18:03,630 --> 00:18:07,350
they're tackled whether they succeed or

00:18:05,399 --> 00:18:09,690
not is a bit of a value judgment they do

00:18:07,350 --> 00:18:12,929
tend to be more flexible in what they

00:18:09,690 --> 00:18:14,880
accept as valid input but the price paid

00:18:12,929 --> 00:18:17,549
flat flexibility is occasional in

00:18:14,880 --> 00:18:19,799
accuracy no amount of fancy logic will

00:18:17,549 --> 00:18:23,130
tell you whether 8 10 18 is October 8th

00:18:19,799 --> 00:18:24,990
October 18th or August 10th so your

00:18:23,130 --> 00:18:27,000
mileage may vary if you use these

00:18:24,990 --> 00:18:29,309
libraries be aware they are not magic

00:18:27,000 --> 00:18:31,380
ones for fixing date handling they make

00:18:29,309 --> 00:18:34,289
assumptions those assumptions have

00:18:31,380 --> 00:18:37,049
consequences and that again is not a bad

00:18:34,289 --> 00:18:38,820
thing all code makes assumptions you

00:18:37,049 --> 00:18:40,799
just need to be aware what assumptions

00:18:38,820 --> 00:18:42,679
your code is making and validate that

00:18:40,799 --> 00:18:45,179
those assumptions are reasonable but

00:18:42,679 --> 00:18:46,350
once you've been able to pass a date in

00:18:45,179 --> 00:18:48,000
the time you've got a time zone you've

00:18:46,350 --> 00:18:50,220
got a valid time stamp now you need to

00:18:48,000 --> 00:18:52,679
keep it that way which again can be

00:18:50,220 --> 00:18:55,049
harder than you think so we've created

00:18:52,679 --> 00:18:56,190
our time stamp we've used localized to

00:18:55,049 --> 00:18:58,140
make sure it's in the right place we can

00:18:56,190 --> 00:19:00,059
now do some date time math what time was

00:18:58,140 --> 00:19:01,980
it 10 minutes ago well we can use time

00:19:00,059 --> 00:19:05,100
Delta which is a piece of the date/time

00:19:01,980 --> 00:19:08,159
library and we get a time 10 minutes ago

00:19:05,100 --> 00:19:11,309
fantastic sure but let's try different

00:19:08,159 --> 00:19:13,260
dates say 305 a.m. March 11th 2018

00:19:11,309 --> 00:19:15,000
Pacific Daylight Saving Time what time

00:19:13,260 --> 00:19:17,700
was it 10 minutes ago well we just

00:19:15,000 --> 00:19:19,799
subtract 10 minutes right well no

00:19:17,700 --> 00:19:21,539
because that says that 10 minutes ago is

00:19:19,799 --> 00:19:24,299
255 Pacific Daylight Time

00:19:21,539 --> 00:19:25,980
but at 2:00 a.m. March 11th the Pacific

00:19:24,299 --> 00:19:30,179
time zone started daylight savings so

00:19:25,980 --> 00:19:32,940
255 PDT doesn't exist that time makes no

00:19:30,179 --> 00:19:35,520
sense no accurate clock red 255 a.m. on

00:19:32,940 --> 00:19:37,529
that date what you need to do is

00:19:35,520 --> 00:19:39,299
normalize the timezone normalization

00:19:37,529 --> 00:19:41,190
takes a timezone aware object and

00:19:39,299 --> 00:19:42,570
adjusts the teaser info object to be

00:19:41,190 --> 00:19:44,820
correct for the time that is being

00:19:42,570 --> 00:19:47,700
displayed in this case the time 10

00:19:44,820 --> 00:19:51,600
minutes before 305 a.m. was 1:55 a.m.

00:19:47,700 --> 00:19:54,899
PST and you need to do this every time

00:19:51,600 --> 00:19:58,260
you do date/time math another edge case

00:19:54,899 --> 00:19:59,909
leap seconds just as a leap year exists

00:19:58,260 --> 00:20:01,120
to adjust the calendar year relative to

00:19:59,909 --> 00:20:03,309
the solar year a leap

00:20:01,120 --> 00:20:05,830
second exists to adjust the solar day

00:20:03,309 --> 00:20:07,270
against the calendar day and in the

00:20:05,830 --> 00:20:09,610
handling of leap seconds has caused

00:20:07,270 --> 00:20:11,440
major multiple software crisis crashes

00:20:09,610 --> 00:20:13,390
in recent history it's enough of a risk

00:20:11,440 --> 00:20:16,240
of the New York Stock Exchange routinely

00:20:13,390 --> 00:20:18,760
stops trading for 61 minutes during leap

00:20:16,240 --> 00:20:20,830
second transitions to avoid problems so

00:20:18,760 --> 00:20:24,130
any math around eight times is

00:20:20,830 --> 00:20:25,960
inherently difficult too alright so

00:20:24,130 --> 00:20:27,220
we've got ourselves a date/time object

00:20:25,960 --> 00:20:28,300
we know the times owner the person who

00:20:27,220 --> 00:20:29,530
gave us the data we've passed it

00:20:28,300 --> 00:20:31,150
correctly we've made sure we've got the

00:20:29,530 --> 00:20:32,500
math right when we transformed it it's

00:20:31,150 --> 00:20:34,270
now time to display that you another

00:20:32,500 --> 00:20:35,860
user this means we need to know the time

00:20:34,270 --> 00:20:38,440
zone of the person who is going to read

00:20:35,860 --> 00:20:40,000
the data to display it and all of the

00:20:38,440 --> 00:20:41,920
same problems happen all over again time

00:20:40,000 --> 00:20:44,200
zone offsets formats all these problems

00:20:41,920 --> 00:20:46,120
exist on the display end as well if

00:20:44,200 --> 00:20:48,160
you've got up time zone aware date/time

00:20:46,120 --> 00:20:49,900
object converting it to other time zones

00:20:48,160 --> 00:20:51,550
it's relatively straightforward you can

00:20:49,900 --> 00:20:53,020
use the as time zone method on the

00:20:51,550 --> 00:20:54,370
date/time object you just need to make

00:20:53,020 --> 00:20:57,010
sure you actually know the time zone of

00:20:54,370 --> 00:20:58,330
the person you're targeting but there is

00:20:57,010 --> 00:20:59,860
another trap that the developers and

00:20:58,330 --> 00:21:01,360
designers fall into and they do it with

00:20:59,860 --> 00:21:04,179
the best of intentions trying to make

00:21:01,360 --> 00:21:05,980
numerical dates seem more human when you

00:21:04,179 --> 00:21:08,940
say your product is going to be released

00:21:05,980 --> 00:21:10,990
this summer or for Americans this fall

00:21:08,940 --> 00:21:13,570
everyone's south of the Equator rolls

00:21:10,990 --> 00:21:15,340
their eyes if there is any possibility

00:21:13,570 --> 00:21:16,750
your audiences international please

00:21:15,340 --> 00:21:19,000
don't use these phrases

00:21:16,750 --> 00:21:20,170
they aren't helpful they like an inside

00:21:19,000 --> 00:21:21,970
joke they're great if you know the

00:21:20,170 --> 00:21:23,590
context but just plain confusing if you

00:21:21,970 --> 00:21:25,690
don't and if your intention is to

00:21:23,590 --> 00:21:28,780
communicate effectively why would you

00:21:25,690 --> 00:21:30,250
intentionally be confusing and you may

00:21:28,780 --> 00:21:32,920
think oh yeah but my audience is all

00:21:30,250 --> 00:21:34,510
local they all know this really what

00:21:32,920 --> 00:21:35,950
about recent immigrants what about

00:21:34,510 --> 00:21:38,350
people from outside the country who need

00:21:35,950 --> 00:21:41,020
to use your service there is no service

00:21:38,350 --> 00:21:42,580
more American than the IRS and I am an

00:21:41,020 --> 00:21:44,170
Australian citizen who has lived mine

00:21:42,580 --> 00:21:46,270
lived and worked my entire life in

00:21:44,170 --> 00:21:47,950
Australia but I have to dig through the

00:21:46,270 --> 00:21:49,960
IRS website to work out how to sort out

00:21:47,950 --> 00:21:51,309
my tax affairs with my employer when

00:21:49,960 --> 00:21:53,740
they say they're closed on Labor Day

00:21:51,309 --> 00:21:56,200
well Labor Day is the first Monday and

00:21:53,740 --> 00:21:59,860
March so why is the IRS closed in

00:21:56,200 --> 00:22:01,480
September sorry my humble request for

00:21:59,860 --> 00:22:03,130
anyone doing date time based designs is

00:22:01,480 --> 00:22:04,600
when you're using dates consider how

00:22:03,130 --> 00:22:07,120
they're going to be consumed

00:22:04,600 --> 00:22:09,190
if you ever display a date always

00:22:07,120 --> 00:22:10,630
display a year always use a text version

00:22:09,190 --> 00:22:12,730
of the month localized for your reader

00:22:10,630 --> 00:22:15,010
always display a time zone and in logs

00:22:12,730 --> 00:22:17,350
always use ISO 8601 for

00:22:15,010 --> 00:22:18,580
details like year and timezone don't

00:22:17,350 --> 00:22:20,470
have to be front and center in your

00:22:18,580 --> 00:22:23,320
design it can be a column heading or as

00:22:20,470 --> 00:22:25,750
hover text but included somehow reading

00:22:23,320 --> 00:22:26,320
a blog post that says published third of

00:22:25,750 --> 00:22:28,690
May

00:22:26,320 --> 00:22:30,640
without a year how do I know if this

00:22:28,690 --> 00:22:31,990
information is current or not and when

00:22:30,640 --> 00:22:33,549
you're trying to correlate between a log

00:22:31,990 --> 00:22:34,809
of database and web server event and

00:22:33,549 --> 00:22:37,240
you've got a timestamp that is accurate

00:22:34,809 --> 00:22:38,980
to the millisecond and then you work out

00:22:37,240 --> 00:22:42,040
the two events at 8 hours apart because

00:22:38,980 --> 00:22:43,750
ones in Perth time and ones in UTC or if

00:22:42,040 --> 00:22:45,429
you're in Django more likely six hours

00:22:43,750 --> 00:22:50,740
out because ones in UTC and ones in

00:22:45,429 --> 00:22:52,510
Chicago time Thank You Adrian so in

00:22:50,740 --> 00:22:54,340
summary a date means nothing without a

00:22:52,510 --> 00:22:56,260
time a time means nothing without a date

00:22:54,340 --> 00:22:58,750
both are meaningless without a time zone

00:22:56,260 --> 00:23:00,669
or more specifically and accurate times

00:22:58,750 --> 00:23:02,559
don't resist the temptation to guess

00:23:00,669 --> 00:23:04,510
because every time you guess someone's

00:23:02,559 --> 00:23:07,809
time zone assume you're going to get it

00:23:04,510 --> 00:23:09,340
wrong when you read dates localized for

00:23:07,809 --> 00:23:11,260
the author's format do everything you

00:23:09,340 --> 00:23:12,850
can to get that right once you've got

00:23:11,260 --> 00:23:14,380
that time zone information don't ever

00:23:12,850 --> 00:23:17,110
lose it because you can't get it back

00:23:14,380 --> 00:23:18,910
and localized for the reader on output

00:23:17,110 --> 00:23:21,160
just considering how that output would

00:23:18,910 --> 00:23:24,100
be consumed not just now but in a year

00:23:21,160 --> 00:23:25,809
from now in many respects there's a

00:23:24,100 --> 00:23:27,340
really strong parallel here with Unicode

00:23:25,809 --> 00:23:29,020
handling the fundamental thing about

00:23:27,340 --> 00:23:31,570
getting Unicode right you need to know

00:23:29,020 --> 00:23:33,370
not guess know what format your data is

00:23:31,570 --> 00:23:34,900
in porting from the one of the big

00:23:33,370 --> 00:23:36,429
problems porting from Python 2 to Python

00:23:34,900 --> 00:23:38,440
3 was that it forced you to pay

00:23:36,429 --> 00:23:40,780
attention to this detail and verify it

00:23:38,440 --> 00:23:42,880
every step whether or not what you had

00:23:40,780 --> 00:23:44,230
was a Unicode string or data encoded in

00:23:42,880 --> 00:23:47,169
a particular format and if it was

00:23:44,230 --> 00:23:48,820
encoded what format it was in if you've

00:23:47,169 --> 00:23:50,740
just got a blob of bytes and you don't

00:23:48,820 --> 00:23:52,210
know its format it's really really hard

00:23:50,740 --> 00:23:55,120
to accurately reverse-engineer the

00:23:52,210 --> 00:23:57,220
format similarly if you don't have or

00:23:55,120 --> 00:23:59,679
you lose date time or timezone

00:23:57,220 --> 00:24:01,510
information related to a timestamp it's

00:23:59,679 --> 00:24:04,030
almost impossible to reverse-engineer

00:24:01,510 --> 00:24:06,280
accurately you can guess your guests

00:24:04,030 --> 00:24:08,590
might even be right right up until it

00:24:06,280 --> 00:24:10,030
isn't the only solution is to be

00:24:08,590 --> 00:24:11,650
rigorous from the outset and make sure

00:24:10,030 --> 00:24:13,480
at every step of the process you know

00:24:11,650 --> 00:24:17,140
what you have and once you've got it

00:24:13,480 --> 00:24:19,299
don't forget what you've got but my time

00:24:17,140 --> 00:24:22,120
is running out so I'd better wrap it up

00:24:19,299 --> 00:24:23,980
as I said at the start my undergraduate

00:24:22,120 --> 00:24:26,260
degree is in physics physics is the

00:24:23,980 --> 00:24:27,760
study of fundamental forces and at the

00:24:26,260 --> 00:24:28,630
very very early phases of a physics

00:24:27,760 --> 00:24:31,090
degree you get introduced

00:24:28,630 --> 00:24:32,620
- MK sa MKS a is the set fundamental set

00:24:31,090 --> 00:24:34,900
of units meters kilograms seconds and

00:24:32,620 --> 00:24:36,250
amperes and because these fundamental

00:24:34,900 --> 00:24:37,930
units are important they've all been

00:24:36,250 --> 00:24:40,000
quantified and standardized there is an

00:24:37,930 --> 00:24:41,620
ISO standard kilogram it's a thing that

00:24:40,000 --> 00:24:43,390
a physical object that defines what a

00:24:41,620 --> 00:24:46,630
kilogram is you can pick it up you can

00:24:43,390 --> 00:24:48,190
hold it no not anyone but people can you

00:24:46,630 --> 00:24:50,020
can compare it to other weights to other

00:24:48,190 --> 00:24:51,640
kilograms and you can do the same with

00:24:50,020 --> 00:24:53,860
two samples of a meter and two samples

00:24:51,640 --> 00:24:58,000
of an ampere but you can't do that with

00:24:53,860 --> 00:25:01,150
time is this second the same length is

00:24:58,000 --> 00:25:03,310
this second you can't put a standard in

00:25:01,150 --> 00:25:05,500
a second in a bottle there is no formal

00:25:03,310 --> 00:25:08,950
standard that is physical about a second

00:25:05,500 --> 00:25:11,500
time is ephemeral it just is so you know

00:25:08,950 --> 00:25:15,250
don't feel bad about time being hard it

00:25:11,500 --> 00:25:16,600
is that's just physics and it's really

00:25:15,250 --> 00:25:18,400
easy to throw your hands up and declare

00:25:16,600 --> 00:25:19,990
time zones how do they even work and

00:25:18,400 --> 00:25:21,070
I'll admit even I do that when I've been

00:25:19,990 --> 00:25:24,130
bitten by them for the third time in a

00:25:21,070 --> 00:25:26,050
day but just like physics and humans you

00:25:24,130 --> 00:25:27,610
can understand them if you put your mind

00:25:26,050 --> 00:25:29,440
to it you consider the full breadth of

00:25:27,610 --> 00:25:31,420
human experience treated as a challenge

00:25:29,440 --> 00:25:34,300
rather than an impossibility and plan

00:25:31,420 --> 00:25:38,170
and like all planning when is the best

00:25:34,300 --> 00:25:39,190
time to plan ahead of time thank you

00:25:38,170 --> 00:25:48,229
very much

00:25:39,190 --> 00:25:48,229

YouTube URL: https://www.youtube.com/watch?v=y13thlpbri8


