Title: DjangoCon US 2018 - Python on your phone: Building mobile apps with Kivy by Derek Payton
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	Many Django developers are familiar with building APIs, but what about when you need to build a mobile client consume them? Wouldnâ€™t it be great if you could build a mobile application using the same language as your backend?

Well, you can!

This talk will introduce Kivy, a framework for building multi-touch applications. Weâ€™ll cover all the basics, includingâ€¦

Why youâ€™d want to build mobile apps in Python, and what other options exist
How to install Kivy (Itâ€™s really easy!)
Basic examples of what a Kivy app looks like
The Kv Design language, a YAML-esque abstraction for rapidly building UIâ€™s
How to access the hardware features of your device
How to package your app for the Google Play and iOS App stores

Weâ€™ll provide everything you need to know to get started building Python-powered phone apps with Kivy.

This talk was presented at: https://2018.djangocon.us/talk/python-on-your-phone-building-mobile/

LINKS:
Follow Derek Payton ðŸ‘‡
On Twitter: https://twitter.com/dmpayton
Official homepage: http://rootaccess.space

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,590 --> 00:00:22,289
yeah so my name is Derek by day I'm the

00:00:20,189 --> 00:00:25,500
director of development at order slip we

00:00:22,289 --> 00:00:29,910
build apps for small restaurants to have

00:00:25,500 --> 00:00:32,329
mobile ordering by night and all of my

00:00:29,910 --> 00:00:34,020
other free time I do things like

00:00:32,329 --> 00:00:36,149
co-found a hackerspace

00:00:34,020 --> 00:00:38,129
which to my knowledge is the only one

00:00:36,149 --> 00:00:40,739
between LA and the Bay Area which is

00:00:38,129 --> 00:00:42,510
kind of cool I'm on the board of

00:00:40,739 --> 00:00:44,550
directors for an organization called 59

00:00:42,510 --> 00:00:46,739
days of code we do a lot of tech

00:00:44,550 --> 00:00:48,440
education and trying to grow the

00:00:46,739 --> 00:00:51,239
technology scene in the Central Valley

00:00:48,440 --> 00:00:57,059
and then I also run my local Fresno

00:00:51,239 --> 00:00:58,590
Python chapter all of the slides as well

00:00:57,059 --> 00:01:01,170
as the code that we're gonna take a look

00:00:58,590 --> 00:01:05,489
at is online on github

00:01:01,170 --> 00:01:08,040
Billy / QV - Jenga con definitely

00:01:05,489 --> 00:01:10,830
recommend checking that out grab a

00:01:08,040 --> 00:01:12,540
picture look it up follow along there'll

00:01:10,830 --> 00:01:16,729
be some URLs in there as well but you

00:01:12,540 --> 00:01:16,729
can check out as we go through the talk

00:01:18,200 --> 00:01:26,369
so I am NOT a mobile app developer my

00:01:24,689 --> 00:01:33,030
whole background is web development I've

00:01:26,369 --> 00:01:34,890
been using Django sin 0.9 5 or 6 and so

00:01:33,030 --> 00:01:36,210
that's that's kind of where I'm coming

00:01:34,890 --> 00:01:38,579
from in this right I've been using

00:01:36,210 --> 00:01:45,299
Python for quite a while it's a language

00:01:38,579 --> 00:01:47,579
that I really like but I when I lived in

00:01:45,299 --> 00:01:52,040
San Diego there's a classical radio

00:01:47,579 --> 00:01:54,509
station called K USC based out of LA and

00:01:52,040 --> 00:01:56,340
we live just outside of their broadcast

00:01:54,509 --> 00:01:59,009
range right there's this one Hill in

00:01:56,340 --> 00:02:00,899
Escondido where there's a target and in

00:01:59,009 --> 00:02:06,790
the parking lot you can you can get this

00:02:00,899 --> 00:02:11,080
classical station but

00:02:06,790 --> 00:02:15,550
so kose they stream online they didn't

00:02:11,080 --> 00:02:19,270
have a mobile app they also didn't have

00:02:15,550 --> 00:02:22,780
a mobile-friendly website and I thought

00:02:19,270 --> 00:02:24,130
to myself this is a solvable problem I

00:02:22,780 --> 00:02:27,040
can do this

00:02:24,130 --> 00:02:31,000
and so I I dive in started learning

00:02:27,040 --> 00:02:32,920
Android and they put this together this

00:02:31,000 --> 00:02:37,390
was just something to scratch my own

00:02:32,920 --> 00:02:40,660
itch stream there they grabbed their mp3

00:02:37,390 --> 00:02:42,670
stream play it on the phone script their

00:02:40,660 --> 00:02:45,640
website once a minute to get what's now

00:02:42,670 --> 00:02:49,720
playing it was native Android XML

00:02:45,640 --> 00:02:54,370
layouts and and so forth but there was a

00:02:49,720 --> 00:02:57,220
problem and the problem was that it

00:02:54,370 --> 00:02:58,630
wasn't enjoyable I've been doing Python

00:02:57,220 --> 00:03:01,720
I love Python I mean a part of the

00:02:58,630 --> 00:03:02,620
community that that excitement that you

00:03:01,720 --> 00:03:03,880
feel when you're learning new things

00:03:02,620 --> 00:03:06,730
when you're when you're building new

00:03:03,880 --> 00:03:08,830
stuff it wasn't there for me and I'm not

00:03:06,730 --> 00:03:12,430
trying to knock Java or native

00:03:08,830 --> 00:03:16,930
development but the problem is that I

00:03:12,430 --> 00:03:18,940
really like Python and ultimately I want

00:03:16,930 --> 00:03:22,209
to build software that runs on my phone

00:03:18,940 --> 00:03:25,600
but I would also prefer to build things

00:03:22,209 --> 00:03:27,400
with Python so that kind of leaves me

00:03:25,600 --> 00:03:27,640
figuring out what what options do we

00:03:27,400 --> 00:03:29,650
have

00:03:27,640 --> 00:03:31,510
what are the options that we have and

00:03:29,650 --> 00:03:34,780
the first one that I have to mention is

00:03:31,510 --> 00:03:37,450
the beware project so beware is a

00:03:34,780 --> 00:03:39,570
project aimed at building applications

00:03:37,450 --> 00:03:43,810
in Python across multiple platforms

00:03:39,570 --> 00:03:45,160
using native you is you should

00:03:43,810 --> 00:03:47,230
definitely check it out

00:03:45,160 --> 00:03:49,390
beware developers are here at GenCon

00:03:47,230 --> 00:03:51,580
rescued McGee Philippines

00:03:49,390 --> 00:03:53,830
James Katie McLaughlin they're going to

00:03:51,580 --> 00:03:55,870
be sprinting on it definitely seek them

00:03:53,830 --> 00:03:59,380
out ask them questions learn more about

00:03:55,870 --> 00:04:05,040
the viewer project and that brings us to

00:03:59,380 --> 00:04:07,299
QV which is a framework for building

00:04:05,040 --> 00:04:09,930
multi-touch applications across

00:04:07,299 --> 00:04:09,930
platforms

00:04:12,299 --> 00:04:19,829
so it's all geared towards multi-touch

00:04:15,750 --> 00:04:22,930
it's not specifically mobile development

00:04:19,829 --> 00:04:25,030
you can build something that runs on

00:04:22,930 --> 00:04:27,759
your phone yes of course

00:04:25,030 --> 00:04:29,199
pinch-to-zoom all of that is there but

00:04:27,759 --> 00:04:31,360
it's also for things like if you need to

00:04:29,199 --> 00:04:33,400
build out a kiosk running on a touch

00:04:31,360 --> 00:04:37,810
screen TV that's a really good

00:04:33,400 --> 00:04:40,660
application for giving TV use open

00:04:37,810 --> 00:04:43,810
source under the MIT license and it's

00:04:40,660 --> 00:04:47,410
cross platform runs on Android and iOS

00:04:43,810 --> 00:04:51,789
also Windows Linux Mac OS what-have-you

00:04:47,410 --> 00:04:54,210
and QV is pretty fast and it's just

00:04:51,789 --> 00:04:57,789
because of scythe on right the bulk of

00:04:54,210 --> 00:04:59,350
the bottleneck in developing mobile apps

00:04:57,789 --> 00:05:01,240
with Python is into your application

00:04:59,350 --> 00:05:05,169
code it's going to be the graphics and

00:05:01,240 --> 00:05:07,720
the rendering and so psyphon kind of

00:05:05,169 --> 00:05:09,940
bridges that gap allows you to add a

00:05:07,720 --> 00:05:11,800
static type definition or declarations

00:05:09,940 --> 00:05:15,039
to your Python code effectively

00:05:11,800 --> 00:05:18,840
compiling it into C and then you're

00:05:15,039 --> 00:05:18,840
basically just running C at that point

00:05:19,050 --> 00:05:31,169
so we'll do a quick little demo and kind

00:05:24,820 --> 00:05:34,210
of take a look at what Q looks like so

00:05:31,169 --> 00:05:39,280
there's tons of examples in the QB code

00:05:34,210 --> 00:05:45,039
base and we're gonna look at one the QP

00:05:39,280 --> 00:05:47,620
catalog QP catalog is just a collection

00:05:45,039 --> 00:05:50,979
of different layouts and widgets kind of

00:05:47,620 --> 00:05:53,110
showcasing what QV looks like these are

00:05:50,979 --> 00:05:55,419
all QV widgets with heavy you're not

00:05:53,110 --> 00:05:58,169
building native UI is they have their

00:05:55,419 --> 00:06:01,810
own UI layer but you can do things

00:05:58,169 --> 00:06:04,120
different layouts box layout stack

00:06:01,810 --> 00:06:05,650
things up put them in a grid there's

00:06:04,120 --> 00:06:08,139
different things you can do with buttons

00:06:05,650 --> 00:06:11,229
kind of showcasing different buttons and

00:06:08,139 --> 00:06:14,099
offense they're things like progress

00:06:11,229 --> 00:06:19,080
bars and sliders all of this implemented

00:06:14,099 --> 00:06:21,479
kind of in an extensible manner and

00:06:19,080 --> 00:06:24,729
available to use

00:06:21,479 --> 00:06:28,689
now the QP UI

00:06:24,729 --> 00:06:32,199
is not super exciting very grayscale

00:06:28,689 --> 00:06:33,819
with some blue accents and it's it's

00:06:32,199 --> 00:06:36,789
totally customizable you can change all

00:06:33,819 --> 00:06:37,900
the colors and whatnot but maybe you

00:06:36,789 --> 00:06:39,759
want something a little more complex

00:06:37,900 --> 00:06:44,169
without having to put a ton of work into

00:06:39,759 --> 00:06:51,400
it and that is where there's a project

00:06:44,169 --> 00:06:54,219
called QV MD that implements material

00:06:51,400 --> 00:06:56,289
design in give you so if something like

00:06:54,219 --> 00:06:58,599
this is more up your alley

00:06:56,289 --> 00:07:01,599
there's a lot of material design widgets

00:06:58,599 --> 00:07:04,659
included with this all styled according

00:07:01,599 --> 00:07:06,669
to the material design spec everything

00:07:04,659 --> 00:07:09,580
you know buttons again a lot of the same

00:07:06,669 --> 00:07:12,460
things you see in regular QV menus it

00:07:09,580 --> 00:07:15,699
all looks decent and it's a way to kind

00:07:12,460 --> 00:07:17,740
of give you a good starting starting

00:07:15,699 --> 00:07:27,370
point for building out more of your apps

00:07:17,740 --> 00:07:31,810
UI and with that we kind of go into

00:07:27,370 --> 00:07:33,520
looking at the code so this is where it

00:07:31,810 --> 00:07:37,719
becomes kind of beneficial to follow

00:07:33,520 --> 00:07:41,680
along the first thing that we need to do

00:07:37,719 --> 00:07:43,870
is install siphon and QV specific

00:07:41,680 --> 00:07:45,939
versions of QV work with specific

00:07:43,870 --> 00:07:47,800
versions of scythe on so you want to

00:07:45,939 --> 00:07:48,999
make sure look at the documentation and

00:07:47,800 --> 00:07:52,259
see what version of south on you need

00:07:48,999 --> 00:07:55,120
there's other useful but optional

00:07:52,259 --> 00:07:57,550
dependencies as well things like PI game

00:07:55,120 --> 00:07:59,559
so remember when QP implements its own

00:07:57,550 --> 00:08:02,860
UI layer on the desktop it's using PI

00:07:59,559 --> 00:08:06,279
game to draw the window and write to

00:08:02,860 --> 00:08:10,499
that canvas and this is our first hello

00:08:06,279 --> 00:08:16,930
world we have seven lines of Python that

00:08:10,499 --> 00:08:19,539
display hello world not a whole lot of

00:08:16,930 --> 00:08:23,490
excitement going on here very simple

00:08:19,539 --> 00:08:25,569
just writing some text on to the window

00:08:23,490 --> 00:08:27,669
seven lines of code doesn't get a whole

00:08:25,569 --> 00:08:29,499
lot simpler than that first thing we

00:08:27,669 --> 00:08:30,849
want to do as we step through this is

00:08:29,499 --> 00:08:35,140
import the app class and the label

00:08:30,849 --> 00:08:36,740
widget your application must inherit

00:08:35,140 --> 00:08:38,630
from the app class

00:08:36,740 --> 00:08:40,610
you need to implement a build method

00:08:38,630 --> 00:08:43,190
that returns a single widget this is the

00:08:40,610 --> 00:08:45,980
root widget of your entire widget

00:08:43,190 --> 00:08:49,490
hierarchy the widget tree and then we

00:08:45,980 --> 00:08:53,720
run it not a whole lot going on here

00:08:49,490 --> 00:08:57,950
besides that now cubies meant for

00:08:53,720 --> 00:09:01,120
multi-touch uses so it makes it really

00:08:57,950 --> 00:09:05,420
easy to do interesting things with

00:09:01,120 --> 00:09:11,899
zooming rotating scaling and so forth so

00:09:05,420 --> 00:09:14,320
looking at this example same thing we

00:09:11,899 --> 00:09:18,970
have hello world displayed in the window

00:09:14,320 --> 00:09:22,330
but we can also set touch points and

00:09:18,970 --> 00:09:26,899
play around with the text a little bit

00:09:22,330 --> 00:09:29,020
so it's this is kind of the core of all

00:09:26,899 --> 00:09:31,930
of the multi-touch interactions on key B

00:09:29,020 --> 00:09:34,339
is this thing called the scatter layout

00:09:31,930 --> 00:09:37,220
this is how it implements those

00:09:34,339 --> 00:09:39,020
multi-touch functionality so the same

00:09:37,220 --> 00:09:41,149
thing imported the app and the label and

00:09:39,020 --> 00:09:41,959
the scatter layout only this time we're

00:09:41,149 --> 00:09:43,970
going to essentially at the scatter

00:09:41,959 --> 00:09:46,700
layout we have our label we're going to

00:09:43,970 --> 00:09:49,370
add that as a child onto the layout and

00:09:46,700 --> 00:09:51,140
return that layout that's all we have to

00:09:49,370 --> 00:09:54,020
do to get some neat multi-touch

00:09:51,140 --> 00:10:04,600
functionality into our app and anything

00:09:54,020 --> 00:10:07,490
can go into a scatter layout events so

00:10:04,600 --> 00:10:09,350
we don't just want to show things on the

00:10:07,490 --> 00:10:10,970
page we want to allow people to interact

00:10:09,350 --> 00:10:14,480
with buttons right what do you do when

00:10:10,970 --> 00:10:16,370
you press a button what happens next the

00:10:14,480 --> 00:10:20,870
code for this slide is a little too long

00:10:16,370 --> 00:10:28,220
to look at it once on once line but what

00:10:20,870 --> 00:10:30,470
we can do and kind of showing a demo we

00:10:28,220 --> 00:10:33,560
have a button that gets rendered to the

00:10:30,470 --> 00:10:35,000
very middle of the window the button

00:10:33,560 --> 00:10:37,010
says click me when we click the button

00:10:35,000 --> 00:10:41,720
we have a pop-up that has another button

00:10:37,010 --> 00:10:44,180
that says close me very simple event

00:10:41,720 --> 00:10:47,900
handling here what we're going to end up

00:10:44,180 --> 00:10:49,400
doing is importing the float layout so

00:10:47,900 --> 00:10:50,540
the float layout works very much like

00:10:49,400 --> 00:10:53,120
CSS

00:10:50,540 --> 00:10:56,630
in terms of positioning we also want to

00:10:53,120 --> 00:10:58,850
import the pop-up widget going into our

00:10:56,630 --> 00:11:02,240
build methane we instantiate the float

00:10:58,850 --> 00:11:04,580
layout create a button the the sizing in

00:11:02,240 --> 00:11:07,610
the position hint do exactly what you

00:11:04,580 --> 00:11:09,200
would expect we add the button to the

00:11:07,610 --> 00:11:12,710
float layout and then we have this

00:11:09,200 --> 00:11:14,990
pop-up now one thing that you might

00:11:12,710 --> 00:11:16,400
notice in here as we define the pop-up

00:11:14,990 --> 00:11:18,380
and the button that goes inside of it

00:11:16,400 --> 00:11:21,050
we're not attaching the pop-up to the

00:11:18,380 --> 00:11:23,690
float layout and the reason for that

00:11:21,050 --> 00:11:24,740
we'll get to in the next example but

00:11:23,690 --> 00:11:28,280
it's something that I wanted to point

00:11:24,740 --> 00:11:29,810
out here the event handling itself is

00:11:28,280 --> 00:11:32,810
pretty simple we have the open button

00:11:29,810 --> 00:11:34,880
and we want to bind the unreleased event

00:11:32,810 --> 00:11:37,100
to pop-up dot open and on the close

00:11:34,880 --> 00:11:43,490
button we want to bind the on release

00:11:37,100 --> 00:11:50,480
event to pop-up dismiss and then finally

00:11:43,490 --> 00:11:53,000
we return the layout now as you build

00:11:50,480 --> 00:11:56,120
out your Python app doing all of your

00:11:53,000 --> 00:11:59,120
widgets in Python as your app grows and

00:11:56,120 --> 00:12:01,430
becomes more complex doing all of this

00:11:59,120 --> 00:12:05,870
stuff in Python can become a little bit

00:12:01,430 --> 00:12:09,290
messy very verbose and you know can can

00:12:05,870 --> 00:12:11,150
be kind of tough to navigate so QB tries

00:12:09,290 --> 00:12:15,160
to solve this with the Cavey design

00:12:11,150 --> 00:12:18,380
language the QV design language is a

00:12:15,160 --> 00:12:22,340
very llamÃ³ esque language where you

00:12:18,380 --> 00:12:23,930
define the tree of your widgets and it

00:12:22,340 --> 00:12:28,600
uses that to instantiate the actual

00:12:23,930 --> 00:12:31,670
Python objects so now in our main PI

00:12:28,600 --> 00:12:33,980
this is all the Python that we have we

00:12:31,670 --> 00:12:36,380
have five lines of Python there's

00:12:33,980 --> 00:12:39,620
nothing in our demo app and we just run

00:12:36,380 --> 00:12:43,310
it we have this demo DAV right very

00:12:39,620 --> 00:12:45,050
llamÃ³ ask the name demo havea the name

00:12:43,310 --> 00:12:47,030
of your kv file is derived from the name

00:12:45,050 --> 00:12:50,480
of your application class so we have

00:12:47,030 --> 00:12:53,930
demo app we get demo DAV this is the

00:12:50,480 --> 00:12:56,300
same hierarchy that we had before with

00:12:53,930 --> 00:13:00,920
the buttons the pop-up button inside the

00:12:56,300 --> 00:13:03,590
pop-up and as we go into the specifics

00:13:00,920 --> 00:13:04,160
we see the same attributes the size in

00:13:03,590 --> 00:13:05,930
position

00:13:04,160 --> 00:13:09,379
on release what we're doing with the

00:13:05,930 --> 00:13:12,050
unreleased now from within kV we can

00:13:09,379 --> 00:13:16,190
access the root widget look up the

00:13:12,050 --> 00:13:17,389
pop-up by ID and call open on it now an

00:13:16,190 --> 00:13:18,920
interesting thing to keep in mind here

00:13:17,389 --> 00:13:22,310
is that everything to the right of the

00:13:18,920 --> 00:13:24,110
colon is valid Python syntax you can use

00:13:22,310 --> 00:13:26,779
data structures lists tuples

00:13:24,110 --> 00:13:30,470
dictionaries list comprehensions you can

00:13:26,779 --> 00:13:31,459
call functions you can do math there's

00:13:30,470 --> 00:13:33,439
all sorts of things that you can do you

00:13:31,459 --> 00:13:38,660
can treat it as a valid Python

00:13:33,439 --> 00:13:43,310
expression we have our pop up again that

00:13:38,660 --> 00:13:45,110
we are initializing same attributes as

00:13:43,310 --> 00:13:48,560
before with the addition of the on

00:13:45,110 --> 00:13:50,839
parent that we're adding now just like

00:13:48,560 --> 00:13:52,579
the build method needs to return a

00:13:50,839 --> 00:13:55,730
single widget that's your root widget

00:13:52,579 --> 00:13:58,550
same with doubt your kv lang files you

00:13:55,730 --> 00:14:02,810
need one widget at the very top so the

00:13:58,550 --> 00:14:06,350
pop-up currently is now inside the float

00:14:02,810 --> 00:14:08,209
layout right it has a parent and that's

00:14:06,350 --> 00:14:09,980
not what we want we want to pop up to

00:14:08,209 --> 00:14:11,389
have no parent if it has a parent it's

00:14:09,980 --> 00:14:13,279
going to get rendered at the screen and

00:14:11,389 --> 00:14:15,470
we don't want that to happen until we

00:14:13,279 --> 00:14:19,699
press the button so all we're doing here

00:14:15,470 --> 00:14:21,920
is saying when it gets parented if the

00:14:19,699 --> 00:14:25,610
parent is the layout just automatically

00:14:21,920 --> 00:14:27,500
remove itself from the layout and we get

00:14:25,610 --> 00:14:34,430
the same functionality that we had

00:14:27,500 --> 00:14:37,160
before and then of course we have the

00:14:34,430 --> 00:14:47,149
the same button same on release look up

00:14:37,160 --> 00:14:52,069
the pop-up by ID and dismiss it so as

00:14:47,149 --> 00:14:54,800
you can see updating our example 3 to

00:14:52,069 --> 00:14:56,689
work with the key V Lane works exactly

00:14:54,800 --> 00:14:59,000
the same we have something that's a

00:14:56,689 --> 00:15:00,920
little bit easier to read and understand

00:14:59,000 --> 00:15:04,990
it works just as it did when we were

00:15:00,920 --> 00:15:04,990
doing everything straight in Python

00:15:07,510 --> 00:15:14,529
so we've done through we have put an app

00:15:11,589 --> 00:15:17,889
together and know we want to get it on

00:15:14,529 --> 00:15:19,660
our phone right so we've built in QV app

00:15:17,889 --> 00:15:24,160
we need to package it for mobile devices

00:15:19,660 --> 00:15:27,389
the answer to that question how do we

00:15:24,160 --> 00:15:29,740
get from QV app to mobile app on Android

00:15:27,389 --> 00:15:31,660
Python for Android so Python for Android

00:15:29,740 --> 00:15:33,699
is part of the Kyuubi project it does

00:15:31,660 --> 00:15:37,389
exactly what it what it says it packages

00:15:33,699 --> 00:15:41,829
Python apps for Android it does only run

00:15:37,389 --> 00:15:43,540
on Linux which can be problematic the

00:15:41,829 --> 00:15:46,600
kewpie project does have a VirtualBox

00:15:43,540 --> 00:15:49,660
disk image with everything needed to run

00:15:46,600 --> 00:15:54,459
it so windows developers Mac developers

00:15:49,660 --> 00:15:58,300
there is a way forward similarly on the

00:15:54,459 --> 00:16:00,160
iOS side there is QV iOS so it's a tool

00:15:58,300 --> 00:16:03,699
chain for compiling Python apps to run

00:16:00,160 --> 00:16:05,260
on iOS same problems obviously you are

00:16:03,699 --> 00:16:08,680
probably aware that you can only package

00:16:05,260 --> 00:16:11,440
iOS apps on a Mac so you kind of run

00:16:08,680 --> 00:16:14,529
into this situation where you're you

00:16:11,440 --> 00:16:17,829
need the the specific platforms to build

00:16:14,529 --> 00:16:21,940
for those devices but you shouldn't use

00:16:17,829 --> 00:16:24,250
either of those and and the reason why

00:16:21,940 --> 00:16:26,529
is because if you use them specifically

00:16:24,250 --> 00:16:28,630
now you have this whole build process

00:16:26,529 --> 00:16:30,040
for Android and a whole bunch of custom

00:16:28,630 --> 00:16:31,690
stuff for that and then this whole build

00:16:30,040 --> 00:16:34,839
process for iOS and much of stuff for

00:16:31,690 --> 00:16:37,660
that and it can get really unwieldy so

00:16:34,839 --> 00:16:39,880
instead of using those directly you

00:16:37,660 --> 00:16:41,290
should use billdozer so build those or

00:16:39,880 --> 00:16:44,350
is a tool for creating application

00:16:41,290 --> 00:16:47,470
packages it's another part of the kewpie

00:16:44,350 --> 00:16:50,079
project you can build for Android and

00:16:47,470 --> 00:16:52,329
iOS using a common spec file so you

00:16:50,079 --> 00:16:55,300
define all of your configuration and

00:16:52,329 --> 00:16:59,290
attributes in one place and then go from

00:16:55,300 --> 00:17:02,620
there it's really easy to install pip

00:16:59,290 --> 00:17:05,679
install billdozer and then run billdozer

00:17:02,620 --> 00:17:09,400
init billdozer in it gives you a default

00:17:05,679 --> 00:17:11,350
billdozer dot spec file and from what i

00:17:09,400 --> 00:17:13,900
have found out in most cases that seems

00:17:11,350 --> 00:17:16,329
to work just fine I haven't run into any

00:17:13,900 --> 00:17:18,490
major issues with that so the billdozer

00:17:16,329 --> 00:17:20,409
top spec file is basically just an ini

00:17:18,490 --> 00:17:21,699
file where you can configure the name of

00:17:20,409 --> 00:17:24,189
your application

00:17:21,699 --> 00:17:27,309
the package domain source directory any

00:17:24,189 --> 00:17:29,080
other assets you want to bundle in also

00:17:27,309 --> 00:17:31,750
platform specific configuration as well

00:17:29,080 --> 00:17:34,780
Android permissions API versions so

00:17:31,750 --> 00:17:40,270
forth there's similar iOS just specific

00:17:34,780 --> 00:17:44,410
options for for Apple devices as well so

00:17:40,270 --> 00:17:45,790
when we want to build on our phone we've

00:17:44,410 --> 00:17:49,960
we've filled out our builders or top

00:17:45,790 --> 00:17:52,120
spec file and now we run billdozer

00:17:49,960 --> 00:17:54,340
Android II button what that does is it

00:17:52,120 --> 00:17:56,710
goes through if you haven't already

00:17:54,340 --> 00:17:59,620
installed the Android SDK and the

00:17:56,710 --> 00:18:01,330
Android NDK and Python for Android this

00:17:59,620 --> 00:18:04,090
command will do all of that for you in

00:18:01,330 --> 00:18:05,860
one go so it's a lot to download this

00:18:04,090 --> 00:18:07,630
can take quite a while to run the first

00:18:05,860 --> 00:18:09,309
time you run it but once you've run it

00:18:07,630 --> 00:18:10,690
once you've done it now you have

00:18:09,309 --> 00:18:12,280
everything you need and it becomes a lot

00:18:10,690 --> 00:18:16,179
faster as you start iterating on your

00:18:12,280 --> 00:18:18,760
app and testing on your mobile device so

00:18:16,179 --> 00:18:20,320
this command will package up your apk

00:18:18,760 --> 00:18:23,200
file and drop it into a bin directory

00:18:20,320 --> 00:18:25,960
which is nice but you might want to run

00:18:23,200 --> 00:18:28,570
it on your phone to test and so all you

00:18:25,960 --> 00:18:31,929
do is you talk on deploy run as an

00:18:28,570 --> 00:18:35,830
additional commands to that and so

00:18:31,929 --> 00:18:37,780
deploy will then take the apk use ADB

00:18:35,830 --> 00:18:40,030
put it on your device and then run will

00:18:37,780 --> 00:18:43,419
open it up so you have one command to

00:18:40,030 --> 00:18:47,110
build your entire app build the apk put

00:18:43,419 --> 00:18:54,250
it on your phone and open it up in just

00:18:47,110 --> 00:18:57,850
a couple of seconds so building UIs is

00:18:54,250 --> 00:18:59,370
great phones these days have a lot of

00:18:57,850 --> 00:19:02,110
really neat hardware you have

00:18:59,370 --> 00:19:04,450
accelerometers gyroscopes camera

00:19:02,110 --> 00:19:05,799
functionality all phones vibrate you

00:19:04,450 --> 00:19:08,350
want to do things with those how do you

00:19:05,799 --> 00:19:09,940
do hardware things and so the example

00:19:08,350 --> 00:19:15,850
that we're gonna look at is the

00:19:09,940 --> 00:19:18,940
accelerometer enter PI genius so PI

00:19:15,850 --> 00:19:23,640
genius allows you to access Java classes

00:19:18,940 --> 00:19:27,370
through the Java native interface and

00:19:23,640 --> 00:19:29,710
the way that you do this is that you for

00:19:27,370 --> 00:19:33,730
the accelerometer example you have to

00:19:29,710 --> 00:19:35,690
build a Java class to interact with the

00:19:33,730 --> 00:19:38,150
Android sensor manager

00:19:35,690 --> 00:19:40,400
there's a lot more code here than I can

00:19:38,150 --> 00:19:44,120
fit onto this slide it's also Java

00:19:40,400 --> 00:19:45,530
I don't know Java that well so you have

00:19:44,120 --> 00:19:47,530
to build all this out in Java create

00:19:45,530 --> 00:19:50,630
that bridge and then on the Python side

00:19:47,530 --> 00:19:52,880
import auto class instantiate it enable

00:19:50,630 --> 00:19:58,130
the accelerometer and you can go read

00:19:52,880 --> 00:20:01,790
from the accelerometer similarly you

00:19:58,130 --> 00:20:03,830
have PI objects for the iOS side so PI

00:20:01,790 --> 00:20:06,890
August's similar to PI genius lets you

00:20:03,830 --> 00:20:15,950
do i OS r objective-c things from within

00:20:06,890 --> 00:20:20,090
Python so I'm not an objective-c

00:20:15,950 --> 00:20:23,330
developer either this is the example

00:20:20,090 --> 00:20:28,700
that's given you have to use a core

00:20:23,330 --> 00:20:31,160
motion on the iOS side in order to

00:20:28,700 --> 00:20:33,679
interact with the accelerometer and then

00:20:31,160 --> 00:20:36,350
the Python side looks somewhat similar

00:20:33,679 --> 00:20:38,929
to how you would do it on Android right

00:20:36,350 --> 00:20:40,720
you import auto class in this case we're

00:20:38,929 --> 00:20:43,130
going to instantiate the the bridge

00:20:40,720 --> 00:20:46,400
start the accelerometer and we can start

00:20:43,130 --> 00:20:49,460
reading values from it but we have

00:20:46,400 --> 00:20:50,660
another problem is that I don't want to

00:20:49,460 --> 00:20:52,910
write Java I don't want to write

00:20:50,660 --> 00:20:56,450
objective-c I just want to write some

00:20:52,910 --> 00:20:58,250
Python and so again we have another

00:20:56,450 --> 00:21:00,799
layer of abstraction that the quv

00:20:58,250 --> 00:21:03,440
project has provided called

00:21:00,799 --> 00:21:06,919
player so it's platform-independent api

00:21:03,440 --> 00:21:08,720
is for common hardware features it

00:21:06,919 --> 00:21:11,840
supports a number of features on both

00:21:08,720 --> 00:21:14,120
Android and iOS if you're not running on

00:21:11,840 --> 00:21:15,890
one of those platforms I see you're

00:21:14,120 --> 00:21:19,280
doing something on on Linux or Windows

00:21:15,890 --> 00:21:21,410
Mac OS it will use available libraries

00:21:19,280 --> 00:21:22,900
on those platforms to kind of fill in

00:21:21,410 --> 00:21:26,540
the gap so if you have an accelerometer

00:21:22,900 --> 00:21:29,090
on on a desktop or you know whatever you

00:21:26,540 --> 00:21:31,640
know Linux thing that you're doing you

00:21:29,090 --> 00:21:34,970
can still do hardware things with plier

00:21:31,640 --> 00:21:38,260
through one simpler interface and so now

00:21:34,970 --> 00:21:42,590
instead of having to write a bunch of

00:21:38,260 --> 00:21:46,040
Java and objective-c you have six lines

00:21:42,590 --> 00:21:48,480
of Python with no platform dependent

00:21:46,040 --> 00:21:50,220
code which becomes really nice right

00:21:48,480 --> 00:21:52,200
just cool import the accelerometer

00:21:50,220 --> 00:21:54,960
enable it go

00:21:52,200 --> 00:22:06,990
I didn't have to dip into any platform

00:21:54,960 --> 00:22:12,030
dependent code so that's kind of the

00:22:06,990 --> 00:22:13,559
gist of giving and I'm going really fast

00:22:12,030 --> 00:22:17,970
Wow

00:22:13,559 --> 00:22:19,890
so kind of showing off the one of the

00:22:17,970 --> 00:22:21,929
reasons why I started messing with QV is

00:22:19,890 --> 00:22:23,760
I really like playing guitar I'm really

00:22:21,929 --> 00:22:26,700
bad at playing guitar but I really like

00:22:23,760 --> 00:22:28,799
playing guitar and as I was going

00:22:26,700 --> 00:22:32,280
through trying to learn build up muscle

00:22:28,799 --> 00:22:33,840
memory learn chords there's that there

00:22:32,280 --> 00:22:36,000
there's this trick where you go from

00:22:33,840 --> 00:22:39,600
guitar chord e guitar chord just kind of

00:22:36,000 --> 00:22:43,950
strumming chord to chord to chord trying

00:22:39,600 --> 00:22:45,780
to build up muscle memory and so i QV op

00:22:43,950 --> 00:22:56,820
that I put together is this thing called

00:22:45,780 --> 00:23:00,480
chord wise which is just that support

00:22:56,820 --> 00:23:04,650
wise lets you choose guitar chords this

00:23:00,480 --> 00:23:06,390
is all a QB app choose what guitar

00:23:04,650 --> 00:23:11,490
chords you want to practice you can

00:23:06,390 --> 00:23:14,850
select and deselect chords and then

00:23:11,490 --> 00:23:16,410
dumps you into practice mode sending

00:23:14,850 --> 00:23:19,500
them at you in 4/4 time at a hundred

00:23:16,410 --> 00:23:21,360
feet so minute there is audio there's a

00:23:19,500 --> 00:23:23,610
little metronome that plays as well so

00:23:21,360 --> 00:23:28,220
you can kind of keep time and this has

00:23:23,610 --> 00:23:30,419
been kind of helpful for my own playing

00:23:28,220 --> 00:23:33,000
trying to learn new chords and build up

00:23:30,419 --> 00:23:35,520
that muscle memory and it's it's been a

00:23:33,000 --> 00:23:37,620
neat experience right being able to to

00:23:35,520 --> 00:23:39,450
build this put it on my phone I have it

00:23:37,620 --> 00:23:41,040
with me anywhere there's a couple

00:23:39,450 --> 00:23:43,980
guitars at my office I have my one at

00:23:41,040 --> 00:23:46,650
home and I can just pull up my phone and

00:23:43,980 --> 00:23:50,390
start practicing using this Q V app

00:23:46,650 --> 00:23:50,390
running on Android

00:23:55,600 --> 00:24:01,100
so we can totally build mobile apps in

00:23:58,610 --> 00:24:03,440
Python you totally should build mobile

00:24:01,100 --> 00:24:07,220
apps in Python I would love to see the

00:24:03,440 --> 00:24:09,010
Python ecosystem grow in that regard

00:24:07,220 --> 00:24:11,510
there's been a lot of efforts to doing

00:24:09,010 --> 00:24:13,039
interesting things from Python both on

00:24:11,510 --> 00:24:15,409
mobile apps things like in the browser I

00:24:13,039 --> 00:24:17,389
would love to see Python everywhere I

00:24:15,409 --> 00:24:19,610
probably like the language a little too

00:24:17,389 --> 00:24:22,330
much but a lot of that has to do with

00:24:19,610 --> 00:24:29,620
the community and all the support here

00:24:22,330 --> 00:24:29,620
so that's kind of it questions so far

00:24:33,190 --> 00:24:39,799
so once you've built your app how do you

00:24:35,899 --> 00:24:44,240
get it to your phone yeah so that takes

00:24:39,799 --> 00:24:46,370
us back to build asura right so all of

00:24:44,240 --> 00:24:50,779
all of that getting your app onto your

00:24:46,370 --> 00:24:53,840
phone happens inside build over this

00:24:50,779 --> 00:24:57,590
command specifically this command will

00:24:53,840 --> 00:24:58,880
build your app in debug mode it will

00:24:57,590 --> 00:25:01,460
deploy it to your phone it'll put the

00:24:58,880 --> 00:25:04,330
apk on your phone there's a similar

00:25:01,460 --> 00:25:06,679
command for iOS and then run it directly

00:25:04,330 --> 00:25:08,720
so that's that's pretty much all that's

00:25:06,679 --> 00:25:11,080
needed it's a single command to give it

00:25:08,720 --> 00:25:14,690
everything up and running on your device

00:25:11,080 --> 00:25:17,000
does Peavey require your size on yes

00:25:14,690 --> 00:25:19,429
okay and then another question is can

00:25:17,000 --> 00:25:22,039
you mix and match the Python and design

00:25:19,429 --> 00:25:24,409
designer of widgets like if you write

00:25:22,039 --> 00:25:26,029
your own which is in Python versus that

00:25:24,409 --> 00:25:29,480
designer app that you show can you mix

00:25:26,029 --> 00:25:31,279
and match those widgets yeah so you can

00:25:29,480 --> 00:25:33,740
you can obviously you know design your

00:25:31,279 --> 00:25:34,700
your own widgets you know you probably

00:25:33,740 --> 00:25:35,990
want to do that if you want to make

00:25:34,700 --> 00:25:37,940
things extensible right you don't want

00:25:35,990 --> 00:25:39,740
if you have a button with certain

00:25:37,940 --> 00:25:42,679
parameters certain position colors and

00:25:39,740 --> 00:25:44,929
whatnot you probably don't want to pass

00:25:42,679 --> 00:25:47,360
all of those options in - every time you

00:25:44,929 --> 00:25:49,539
instantiate that button so of course you

00:25:47,360 --> 00:25:52,190
can you know through object inheritance

00:25:49,539 --> 00:25:54,529
define your own custom button and set

00:25:52,190 --> 00:25:57,110
those yourself and use those throughout

00:25:54,529 --> 00:25:58,970
your app okay I guess the next question

00:25:57,110 --> 00:26:01,760
would be in your plier example I saw

00:25:58,970 --> 00:26:03,260
that you're using x-range does that

00:26:01,760 --> 00:26:05,210
support Python 3 years that Python 2

00:26:03,260 --> 00:26:08,360
only so

00:26:05,210 --> 00:26:11,400
this example I see where's that example

00:26:08,360 --> 00:26:14,190
so yeah so this code example is a little

00:26:11,400 --> 00:26:19,350
bit older Q V itself does support Python

00:26:14,190 --> 00:26:20,490
3 billdozer and so specifically Python

00:26:19,350 --> 00:26:24,540
for Android

00:26:20,490 --> 00:26:25,950
it does have Python 3 support sort of I

00:26:24,540 --> 00:26:28,650
haven't been able to quite get it to

00:26:25,950 --> 00:26:32,220
work you have to use a custom NDK for

00:26:28,650 --> 00:26:35,220
that so I would say if you specifically

00:26:32,220 --> 00:26:38,580
are targeting Android you're for now

00:26:35,220 --> 00:26:40,530
you're probably stuck doing Python 2 if

00:26:38,580 --> 00:26:44,520
you can get that the kris tax NDK to

00:26:40,530 --> 00:26:46,710
work which I wasn't able to then by all

00:26:44,520 --> 00:26:49,590
means use Python 3 cool thanks

00:26:46,710 --> 00:26:52,590
so it looks like everything that you've

00:26:49,590 --> 00:26:55,830
shown primarily is oriented toward user

00:26:52,590 --> 00:26:58,650
interface type work does Givi support

00:26:55,830 --> 00:27:04,350
background services and other non UI

00:26:58,650 --> 00:27:07,350
based applications I haven't had a need

00:27:04,350 --> 00:27:11,130
for that so I haven't really come across

00:27:07,350 --> 00:27:16,830
it so the answer honestly is I don't

00:27:11,130 --> 00:27:19,980
know I I'm afraid I don't have a more a

00:27:16,830 --> 00:27:21,060
better answer than that I haven't I

00:27:19,980 --> 00:27:25,190
haven't come across anything in Kivu

00:27:21,060 --> 00:27:28,020
that you know is like background work so

00:27:25,190 --> 00:27:30,570
the material design demo you showed at

00:27:28,020 --> 00:27:33,000
the beginning is that just how deep is

00:27:30,570 --> 00:27:34,440
that thing I presume it's a theme how

00:27:33,000 --> 00:27:36,150
deep is that theme is it just sort of a

00:27:34,440 --> 00:27:37,950
coat of white and blue paint or is it

00:27:36,150 --> 00:27:40,290
actually changing behaviour in any way

00:27:37,950 --> 00:27:41,640
so what they've done is the QV MD

00:27:40,290 --> 00:27:44,750
project and I don't have a link in my

00:27:41,640 --> 00:27:48,420
slides so I'll update my slides online

00:27:44,750 --> 00:27:50,580
but they've they've created a custom set

00:27:48,420 --> 00:27:53,700
of widgets right so instead of button

00:27:50,580 --> 00:27:55,830
you have MD button that you use

00:27:53,700 --> 00:27:58,470
throughout your application so with this

00:27:55,830 --> 00:28:00,390
you can you can absolutely mix and match

00:27:58,470 --> 00:28:03,090
regular Kitty widgets with material

00:28:00,390 --> 00:28:04,500
design widgets if you wanted to but

00:28:03,090 --> 00:28:06,000
they're actually material design widgets

00:28:04,500 --> 00:28:09,720
they're not just give you idjits painted

00:28:06,000 --> 00:28:11,850
blue yeah so I'm not entirely certain

00:28:09,720 --> 00:28:14,910
about how they're set up kind of behind

00:28:11,850 --> 00:28:17,880
the scenes I know that this looks pretty

00:28:14,910 --> 00:28:18,900
darn close to material design and I'm

00:28:17,880 --> 00:28:20,760
not really sure what you mean by

00:28:18,900 --> 00:28:24,090
actual material design widgets because

00:28:20,760 --> 00:28:27,240
MD is more of a specification right then

00:28:24,090 --> 00:28:29,970
here's a library to use in things I said

00:28:27,240 --> 00:28:32,070
more City more in terms of if I had a

00:28:29,970 --> 00:28:34,290
actual native Android application but we

00:28:32,070 --> 00:28:39,750
okay would it be would I notice any

00:28:34,290 --> 00:28:41,580
difference whatsoever good question we

00:28:39,750 --> 00:28:44,820
should test it out and see how well it

00:28:41,580 --> 00:28:47,070
how close it comes sure I know in using

00:28:44,820 --> 00:28:50,130
material design for web stuff

00:28:47,070 --> 00:28:52,200
this looks pretty close from from

00:28:50,130 --> 00:28:53,970
everything that I've seen okay related

00:28:52,200 --> 00:28:55,080
to that accessibility what's the

00:28:53,970 --> 00:28:59,220
accessibility story would give you

00:28:55,080 --> 00:29:00,929
idjits I would imagine there isn't a

00:28:59,220 --> 00:29:03,300
very strong accessibility story there

00:29:00,929 --> 00:29:05,429
simply because it is implementing its

00:29:03,300 --> 00:29:06,750
own UI layer right it's a canvas and

00:29:05,429 --> 00:29:09,179
it's just kind of drawing onto the

00:29:06,750 --> 00:29:10,460
screen none of it is native so I don't

00:29:09,179 --> 00:29:12,690
know how well you can tap into

00:29:10,460 --> 00:29:14,850
accessibility features on the platform

00:29:12,690 --> 00:29:17,940
that you're building on Joe

00:29:14,850 --> 00:29:19,830
thanks my question is about push

00:29:17,940 --> 00:29:21,630
notifications like I use firebase for

00:29:19,830 --> 00:29:25,380
push notifications in native Android and

00:29:21,630 --> 00:29:28,650
iOS is that anyhow about here yeah so

00:29:25,380 --> 00:29:31,670
push notifications again I'm not I'm not

00:29:28,650 --> 00:29:35,630
super familiar with with how they're

00:29:31,670 --> 00:29:38,130
implemented on native Android and iOS I

00:29:35,630 --> 00:29:39,690
know that in my experience like at work

00:29:38,130 --> 00:29:40,950
we had to go through and like create a

00:29:39,690 --> 00:29:43,980
firebase accountant and do all this

00:29:40,950 --> 00:29:45,450
weird stuff I don't think that there's

00:29:43,980 --> 00:29:47,940
anything that would stop you from doing

00:29:45,450 --> 00:29:49,950
that again because we have PI genius and

00:29:47,940 --> 00:29:52,620
we have PI objects right you can hook

00:29:49,950 --> 00:29:54,750
into any objective-c libraries and in

00:29:52,620 --> 00:29:55,920
you know call classes and and and

00:29:54,750 --> 00:29:57,450
whatnot with that so I would imagine

00:29:55,920 --> 00:29:59,100
it's doable

00:29:57,450 --> 00:30:00,630
there isn't anything out of the box in

00:29:59,100 --> 00:30:03,270
queue that provides that purely from the

00:30:00,630 --> 00:30:05,809
Python side yeah so I was wondering

00:30:03,270 --> 00:30:07,890
what's going on or the hood is it

00:30:05,809 --> 00:30:11,190
packaging the standard Python

00:30:07,890 --> 00:30:13,470
interpreter into the application

00:30:11,190 --> 00:30:17,900
packages is it running on - under

00:30:13,470 --> 00:30:20,160
Android yeah so JVM or more or less its

00:30:17,900 --> 00:30:23,520
packaging my understanding is that it's

00:30:20,160 --> 00:30:24,840
packaging cpython right and I'd I I kind

00:30:23,520 --> 00:30:27,150
of wanna I should should have qualified

00:30:24,840 --> 00:30:30,570
this in the beginning I am by no means a

00:30:27,150 --> 00:30:31,740
kitty expert right I occasionally want

00:30:30,570 --> 00:30:33,840
to do

00:30:31,740 --> 00:30:36,149
mobile app development I would love to

00:30:33,840 --> 00:30:38,399
do Python with that and so this is kind

00:30:36,149 --> 00:30:40,889
of what I've discovered along the way is

00:30:38,399 --> 00:30:43,110
I've done a couple things with QB so

00:30:40,889 --> 00:30:45,059
again my understanding is that yes I

00:30:43,110 --> 00:30:49,710
believe it is packaging regular cpython

00:30:45,059 --> 00:30:51,690
up to run on Android again I'm a little

00:30:49,710 --> 00:30:55,289
light on specifics of how it's doing

00:30:51,690 --> 00:30:58,529
that regarding plier you said that gives

00:30:55,289 --> 00:31:00,690
you access to the hardware what kind of

00:30:58,529 --> 00:31:07,610
hardware you showed one with this all

00:31:00,690 --> 00:31:11,100
the Ramat herbut camera or yeah so the

00:31:07,610 --> 00:31:14,309
player project on github they have a

00:31:11,100 --> 00:31:16,919
table where you can kind of see what's

00:31:14,309 --> 00:31:20,159
available on what platform so Android is

00:31:16,919 --> 00:31:22,289
I mean what do you mean here so Android

00:31:20,159 --> 00:31:25,409
is pretty well covered in terms of what

00:31:22,289 --> 00:31:28,110
you can access iOS a little bit less so

00:31:25,409 --> 00:31:32,519
and then it gets you know less as you go

00:31:28,110 --> 00:31:34,440
down into desktop operating systems but

00:31:32,519 --> 00:31:36,539
there's a lot here that you you can do

00:31:34,440 --> 00:31:41,639
things like the proximity sensor on

00:31:36,539 --> 00:31:44,549
Android sending SMS messages on both iOS

00:31:41,639 --> 00:31:46,440
and Android again Android is is much

00:31:44,549 --> 00:31:49,440
more fleshed out in terms of what player

00:31:46,440 --> 00:31:52,649
supports then iOS but there's a lot here

00:31:49,440 --> 00:31:54,960
that you can work with hey thank you a

00:31:52,649 --> 00:31:56,639
really good talk I just had a question

00:31:54,960 --> 00:31:57,929
of what are some like good apps that

00:31:56,639 --> 00:32:01,879
have been made with plier that you know

00:31:57,929 --> 00:32:04,830
about alongside your cord sure yeah

00:32:01,879 --> 00:32:06,899
so there was that I'm a little bit

00:32:04,830 --> 00:32:08,879
bummed I went I originally had a slide

00:32:06,899 --> 00:32:11,370
of my talk saying if you get bored go

00:32:08,879 --> 00:32:13,919
download does anybody remember 2048

00:32:11,370 --> 00:32:14,820
threes when that was all the rage so

00:32:13,919 --> 00:32:17,100
there was a really cool and

00:32:14,820 --> 00:32:18,840
implementation of that built-in TV that

00:32:17,100 --> 00:32:20,610
was on the App Store and in preparing

00:32:18,840 --> 00:32:22,950
for this talk the other day I went to go

00:32:20,610 --> 00:32:23,970
you know get it in and add it it's my

00:32:22,950 --> 00:32:27,509
slide and it's not on the App Store

00:32:23,970 --> 00:32:29,240
anymore which is super unfortunate

00:32:27,509 --> 00:32:35,039
because that would have been really cool

00:32:29,240 --> 00:32:37,500
but I mean searching for QV in the App

00:32:35,039 --> 00:32:39,210
Store will yield some results as well

00:32:37,500 --> 00:32:41,580
they have a showcase on their website

00:32:39,210 --> 00:32:43,600
kind of showing what's been done with it

00:32:41,580 --> 00:32:47,110
I've seen screenshots from

00:32:43,600 --> 00:32:50,080
several different games there is a an

00:32:47,110 --> 00:32:53,380
event library called Givens which is

00:32:50,080 --> 00:32:56,260
great for you know event handling and

00:32:53,380 --> 00:32:58,780
and it has been used to make some some

00:32:56,260 --> 00:33:00,820
games in Kibby well in that case Thank

00:32:58,780 --> 00:33:02,090
You Derek for a great talk let's give

00:33:00,820 --> 00:33:09,599
Derek a began

00:33:02,090 --> 00:33:09,599
[Applause]

00:33:11,190 --> 00:33:13,250

YouTube URL: https://www.youtube.com/watch?v=dLKcqtmbZnw


