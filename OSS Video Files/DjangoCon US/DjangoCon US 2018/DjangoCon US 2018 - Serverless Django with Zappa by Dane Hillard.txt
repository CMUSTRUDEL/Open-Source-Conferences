Title: DjangoCon US 2018 - Serverless Django with Zappa by Dane Hillard
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - Serverless Django with Zappa by Dane Hillard

A common set of considerations when planning to release a new application are around hosting and resources:

Which platforms will support my app?
What OS should I use?
What WSGI server should I use?
How much memory and CPU do I need?
Zappa, a framework for running serverless WSGI applications on top of AWS Lambda, can help address these and other questions around application deployment. With some configuration (as code), Zappa can get you up and running quickly, letting you focus on developing the application instead of the infrastructure.

In this talk weâ€™ll go through some of these kinds of questions to see how they might be answered in traditional solutions and then see how Zappa handles them. Weâ€™ll also talk about a few specific configuration options for handling SSL certificates and running Django commands on the Zappa-deployed application.

This talk was presented at: https://2019.djangocon.us/talks/djang...

LINKS:
Follow Dane Hillard ðŸ‘‡
On Twitter: https://twitter.com/easyaspython
Official homepage: https://easyaspython.com

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,680 --> 00:00:21,380
yeah so thank you as she said my name is

00:00:18,600 --> 00:00:25,050
Jane and I am a web developer at Ithaca

00:00:21,380 --> 00:00:28,260
you may know us from JSTOR org it's an

00:00:25,050 --> 00:00:30,330
academic research platform and on

00:00:28,260 --> 00:00:32,550
Twitter I'm easy as Python and github

00:00:30,330 --> 00:00:36,090
I'm Dane aah

00:00:32,550 --> 00:00:39,660
so feel free to connect and I am here

00:00:36,090 --> 00:00:42,690
today to talk to you about Zappa well

00:00:39,660 --> 00:00:45,469
not not this Zappa although he wants to

00:00:42,690 --> 00:00:49,559
talk all on his own many talks fur hats

00:00:45,469 --> 00:00:53,399
but Zappa nonetheless and specifically

00:00:49,559 --> 00:00:58,190
how we can do serverless Django with

00:00:53,399 --> 00:01:00,750
Zappa and specifically I mean this Zappa

00:00:58,190 --> 00:01:05,010
it's sort of framework written by a guy

00:01:00,750 --> 00:01:08,700
named rich Jones and what it really does

00:01:05,010 --> 00:01:12,240
is let you do serverless AWS deployments

00:01:08,700 --> 00:01:14,600
for Python applications and so during

00:01:12,240 --> 00:01:20,939
this talk I'm going to kind of emphasize

00:01:14,600 --> 00:01:22,890
these pieces here in bold colors so what

00:01:20,939 --> 00:01:25,350
we're gonna do is talk about each of

00:01:22,890 --> 00:01:27,720
those in a little bit of detail so I'll

00:01:25,350 --> 00:01:30,030
talk about servers what a server really

00:01:27,720 --> 00:01:34,140
is and what the last part of serverless

00:01:30,030 --> 00:01:37,770
really means and then some specifics

00:01:34,140 --> 00:01:39,840
about Amazon Web Services and how you go

00:01:37,770 --> 00:01:43,170
about actually deploying an application

00:01:39,840 --> 00:01:49,159
there so first let's talk a little bit

00:01:43,170 --> 00:01:52,649
about servers they are at their core a

00:01:49,159 --> 00:01:56,549
thing that a user can make a request to

00:01:52,649 --> 00:02:00,030
and receive a response from as a result

00:01:56,549 --> 00:02:01,409
and so many of you being Django

00:02:00,030 --> 00:02:04,590
developers are probably intimately

00:02:01,409 --> 00:02:06,299
familiar with this idea but what really

00:02:04,590 --> 00:02:09,780
happens and how do how do we achieve

00:02:06,299 --> 00:02:12,880
that workflow along the way

00:02:09,780 --> 00:02:16,420
so you have a server and when a request

00:02:12,880 --> 00:02:19,150
comes in it typically gets handled at

00:02:16,420 --> 00:02:24,430
first by a web server which knows how to

00:02:19,150 --> 00:02:28,960
speak HTTP and then that passes it along

00:02:24,430 --> 00:02:31,600
to something like gee unicorn which is a

00:02:28,960 --> 00:02:34,050
way to translate an HTTP request into

00:02:31,600 --> 00:02:37,780
something that Python can understand and

00:02:34,050 --> 00:02:41,860
ultimately it will end up at your django

00:02:37,780 --> 00:02:43,870
application and there's there's some

00:02:41,860 --> 00:02:45,810
additional things that you'll probably

00:02:43,870 --> 00:02:49,000
be using if you're doing any kind of

00:02:45,810 --> 00:02:51,130
dynamic application you'll probably need

00:02:49,000 --> 00:02:54,060
to talk to a database you'll probably

00:02:51,130 --> 00:02:56,770
need static assets to style your pages

00:02:54,060 --> 00:02:59,530
and you'll probably want a certificate

00:02:56,770 --> 00:03:05,380
of some kind if you want to be working

00:02:59,530 --> 00:03:07,630
over HTTP and as you get more traffic to

00:03:05,380 --> 00:03:10,420
your application you want to be able to

00:03:07,630 --> 00:03:12,760
handle more concurrent requests so

00:03:10,420 --> 00:03:14,170
you'll start making more processes for

00:03:12,760 --> 00:03:17,230
your django application and each of

00:03:14,170 --> 00:03:19,690
those can handle a request at a time and

00:03:17,230 --> 00:03:21,519
then when your server inevitably can't

00:03:19,690 --> 00:03:23,680
handle the load and falls over you

00:03:21,519 --> 00:03:25,540
decide maybe you'll make several of

00:03:23,680 --> 00:03:30,640
those servers and put them behind a load

00:03:25,540 --> 00:03:32,860
balancer so you you start it you start

00:03:30,640 --> 00:03:36,190
scaling horizontally to handle all this

00:03:32,860 --> 00:03:38,830
traffic and that's fine but if you're

00:03:36,190 --> 00:03:41,380
like me and don't really have time to do

00:03:38,830 --> 00:03:43,750
a lot of automation of your your DevOps

00:03:41,380 --> 00:03:46,690
and things like that managing all of

00:03:43,750 --> 00:03:52,000
these servers can get kind of tedious

00:03:46,690 --> 00:03:58,330
and kind of frustrating so how do we do

00:03:52,000 --> 00:04:00,310
how do we do less like Ron Swanson there

00:03:58,330 --> 00:04:02,620
has to be a better way and we want to

00:04:00,310 --> 00:04:07,090
free ourselves of the earthly burden of

00:04:02,620 --> 00:04:09,610
all this machinery so what les really

00:04:07,090 --> 00:04:12,880
means to me in in server lists which is

00:04:09,610 --> 00:04:16,810
sort of a marketing buzzword is that you

00:04:12,880 --> 00:04:19,060
do less management and you do less sort

00:04:16,810 --> 00:04:20,260
of fiddling with all of these moving

00:04:19,060 --> 00:04:22,210
parts

00:04:20,260 --> 00:04:24,280
and try to find a way to more easily

00:04:22,210 --> 00:04:26,440
manage all of these things in an

00:04:24,280 --> 00:04:28,200
automated fashion and abstract some of

00:04:26,440 --> 00:04:34,810
those things so that you don't have to

00:04:28,200 --> 00:04:38,080
see the hairy details every day so this

00:04:34,810 --> 00:04:42,220
again is what a server might look like

00:04:38,080 --> 00:04:44,410
and we want to find a way to basically

00:04:42,220 --> 00:04:46,150
take these different pieces that are on

00:04:44,410 --> 00:04:49,630
the server and get them off of the

00:04:46,150 --> 00:04:51,190
server so that we don't have to deal

00:04:49,630 --> 00:04:54,490
with them anymore or or can deal with

00:04:51,190 --> 00:04:58,120
them in a better way so let's start with

00:04:54,490 --> 00:05:01,960
certain how many of you are familiar

00:04:58,120 --> 00:05:06,420
with let's encrypt great that's like

00:05:01,960 --> 00:05:11,170
half of your so it essentially lets you

00:05:06,420 --> 00:05:14,290
much more easily set up a cert and and

00:05:11,170 --> 00:05:17,500
serve your website over HTTPS to the

00:05:14,290 --> 00:05:20,160
world and Amazon also has an answer to

00:05:17,500 --> 00:05:23,560
this called Amazon certificate manager

00:05:20,160 --> 00:05:25,540
so for the sake of argument let's let's

00:05:23,560 --> 00:05:27,370
offload that to the Amazon certificate

00:05:25,540 --> 00:05:29,950
manager this way we can just easily

00:05:27,370 --> 00:05:33,430
create a certificate in the in the

00:05:29,950 --> 00:05:36,780
console and apply it to the resources

00:05:33,430 --> 00:05:40,390
that we want that certificate to be on

00:05:36,780 --> 00:05:43,540
so that's that's sort of locked in and

00:05:40,390 --> 00:05:46,740
now that is off of our server and then

00:05:43,540 --> 00:05:50,020
the next thing is those static assets

00:05:46,740 --> 00:05:52,600
you might all it could be the media that

00:05:50,020 --> 00:05:54,430
your users are uploading as well so

00:05:52,600 --> 00:05:57,850
right now you might store those on your

00:05:54,430 --> 00:05:59,860
server at least temporarily when they

00:05:57,850 --> 00:06:02,130
when they are uploaded or when you do a

00:05:59,860 --> 00:06:05,140
collect static during your deployment

00:06:02,130 --> 00:06:07,300
but we can store those in Amazon as well

00:06:05,140 --> 00:06:10,300
it has the thing called simple storage

00:06:07,300 --> 00:06:14,410
service and you can refer to those those

00:06:10,300 --> 00:06:17,770
different files by their by their object

00:06:14,410 --> 00:06:21,880
basically in s3 so let's lock that in

00:06:17,770 --> 00:06:24,400
and the last the last remaining pieces

00:06:21,880 --> 00:06:27,460
are really the parts that are important

00:06:24,400 --> 00:06:32,020
to the request response lifecycle that

00:06:27,460 --> 00:06:35,110
leads from HTTP requests down to

00:06:32,020 --> 00:06:37,810
Python translation down to Django so how

00:06:35,110 --> 00:06:42,250
do we get rid of that stuff that seems

00:06:37,810 --> 00:06:44,620
kind of tricky so one way we could

00:06:42,250 --> 00:06:49,629
imagine doing this is with some other

00:06:44,620 --> 00:06:51,970
Amazon tools so we're taking away the

00:06:49,629 --> 00:06:55,840
job of routing from nginx and using

00:06:51,970 --> 00:07:00,129
instead Amazon's API gateway and we're

00:06:55,840 --> 00:07:04,270
taking the job of translating requests

00:07:00,129 --> 00:07:06,039
from HTTP to Python away and using

00:07:04,270 --> 00:07:08,889
lambda to do that so how many of you

00:07:06,039 --> 00:07:12,729
have heard of lambda okay that's like

00:07:08,889 --> 00:07:15,580
most of you so that's great

00:07:12,729 --> 00:07:20,889
lambda is Amazon's functions as a

00:07:15,580 --> 00:07:24,120
service essentially and what they do is

00:07:20,889 --> 00:07:27,969
let you respond to a request by

00:07:24,120 --> 00:07:30,370
executing some function and it would be

00:07:27,969 --> 00:07:32,680
great because it would be great if we

00:07:30,370 --> 00:07:37,240
could use Jango as the underlying

00:07:32,680 --> 00:07:40,300
function for this and effectively get

00:07:37,240 --> 00:07:42,699
rid of our server so as you can see sort

00:07:40,300 --> 00:07:44,979
of from this last transition we've kind

00:07:42,699 --> 00:07:48,190
of freed ourselves of the need for this

00:07:44,979 --> 00:07:53,440
server wrapping all of our code so how

00:07:48,190 --> 00:07:57,370
how do we get there and how more

00:07:53,440 --> 00:08:01,960
importantly how do we respond to more

00:07:57,370 --> 00:08:05,080
activity in our application so let's

00:08:01,960 --> 00:08:08,620
let's talk a little bit about what the

00:08:05,080 --> 00:08:10,539
details are under the hood in AWS so

00:08:08,620 --> 00:08:13,659
imagine we are creating a website where

00:08:10,539 --> 00:08:14,020
we can post pictures of puppies all the

00:08:13,659 --> 00:08:19,330
best

00:08:14,020 --> 00:08:23,469
poppers what we need for our first

00:08:19,330 --> 00:08:26,919
certificate is to create a certificate

00:08:23,469 --> 00:08:29,289
in Amazon's certificate manager and then

00:08:26,919 --> 00:08:31,150
what that lets us do is reference that

00:08:29,289 --> 00:08:34,329
certificate with an Amazon resource

00:08:31,150 --> 00:08:37,539
number or an arm so that long string you

00:08:34,329 --> 00:08:40,300
see is the identifier basically for that

00:08:37,539 --> 00:08:42,089
cert by the way best barbers com still

00:08:40,300 --> 00:08:48,240
available so you

00:08:42,089 --> 00:08:52,490
by that and then for our static assets

00:08:48,240 --> 00:08:55,769
we need a bucket to store those in in s3

00:08:52,490 --> 00:09:00,180
and so we're gonna tell we're gonna tell

00:08:55,769 --> 00:09:03,319
Zappa how to where to put its stuff by

00:09:00,180 --> 00:09:06,930
referencing that bucket name as well and

00:09:03,319 --> 00:09:10,290
the next piece just sort of the crux of

00:09:06,930 --> 00:09:14,850
it is that we need to put our Django

00:09:10,290 --> 00:09:18,300
application into lambda and there's sort

00:09:14,850 --> 00:09:20,759
of this wrapper around it that does that

00:09:18,300 --> 00:09:22,889
whiskey translation for us and then

00:09:20,759 --> 00:09:28,040
lambda can handle all of that horizontal

00:09:22,889 --> 00:09:30,240
scaling that we talked about earlier so

00:09:28,040 --> 00:09:33,629
once we once we were able to do that

00:09:30,240 --> 00:09:35,730
we're sort of home free and and with the

00:09:33,629 --> 00:09:39,930
API gateway we can manage our different

00:09:35,730 --> 00:09:43,259
environments and and route requests for

00:09:39,930 --> 00:09:45,589
different domains two different sets of

00:09:43,259 --> 00:09:49,170
applications

00:09:45,589 --> 00:09:52,829
so to recap Amazon certificate manager

00:09:49,170 --> 00:09:54,600
for SSL certs and s3 for a static file

00:09:52,829 --> 00:09:57,959
storage and if you're feeling really

00:09:54,600 --> 00:09:59,220
ambitious you can put cloud front in

00:09:57,959 --> 00:10:02,129
front of it to get a globally

00:09:59,220 --> 00:10:04,920
distributed set of of static files to

00:10:02,129 --> 00:10:09,720
speed up delivery to users and then

00:10:04,920 --> 00:10:12,870
lambda for our request workers and the

00:10:09,720 --> 00:10:16,769
API gateway to route requests to

00:10:12,870 --> 00:10:22,379
different applications so the next step

00:10:16,769 --> 00:10:27,089
is deployment hopefully you can do it

00:10:22,379 --> 00:10:31,459
the first time so the way the way that

00:10:27,089 --> 00:10:36,660
we do this with Zappa is basically to

00:10:31,459 --> 00:10:39,329
initialize our configuration and set up

00:10:36,660 --> 00:10:41,269
the details in our Zappa settings so how

00:10:39,329 --> 00:10:44,490
do we do this

00:10:41,269 --> 00:10:48,059
in order to get your application set up

00:10:44,490 --> 00:10:52,199
with Zappa like here I've just basically

00:10:48,059 --> 00:10:55,639
started with Django start project best

00:10:52,199 --> 00:10:59,610
poppers so you have your single

00:10:55,639 --> 00:11:01,679
application module package rather with

00:10:59,610 --> 00:11:04,139
your settings and your URL patterns and

00:11:01,679 --> 00:11:09,269
your whiskey hi as well as your managed

00:11:04,139 --> 00:11:14,519
up hi and you'll also need your AWS

00:11:09,269 --> 00:11:15,990
credentials listed and the way I prefer

00:11:14,519 --> 00:11:19,199
to do this is to have a different

00:11:15,990 --> 00:11:21,809
profile for each of my projects even if

00:11:19,199 --> 00:11:24,029
they end up using a similar set of

00:11:21,809 --> 00:11:26,579
credentials so once you have those two

00:11:24,029 --> 00:11:31,559
things in place you can just pip install

00:11:26,579 --> 00:11:33,870
Zappa and run Zappa in it and what

00:11:31,559 --> 00:11:35,970
that's going to do is detect your

00:11:33,870 --> 00:11:37,379
application type so it's not actually

00:11:35,970 --> 00:11:39,389
just Django that is supported it's

00:11:37,379 --> 00:11:41,790
really any whiskey application and even

00:11:39,389 --> 00:11:43,980
some non whiskey applications if I if I

00:11:41,790 --> 00:11:46,769
remember correctly and then it will

00:11:43,980 --> 00:11:49,230
create that s3 bucket so that it can

00:11:46,769 --> 00:11:51,509
upload artifacts for your application

00:11:49,230 --> 00:11:55,709
and then it will create this Zappa

00:11:51,509 --> 00:11:59,639
settings JSON file and at first that'll

00:11:55,709 --> 00:12:02,339
look probably something like this so you

00:11:59,639 --> 00:12:05,879
have a staging environment maybe a

00:12:02,339 --> 00:12:08,519
production environment and each one will

00:12:05,879 --> 00:12:10,620
have the AWS region that that is

00:12:08,519 --> 00:12:12,480
deployed to you and then it will

00:12:10,620 --> 00:12:16,499
automatically figure out your Django

00:12:12,480 --> 00:12:18,480
settings module and the profile name is

00:12:16,499 --> 00:12:21,660
referring to that AWS credentials

00:12:18,480 --> 00:12:24,480
profile and then the project name is

00:12:21,660 --> 00:12:26,399
your Django project and the s3 bucket is

00:12:24,480 --> 00:12:32,429
that bucket name that we talked about

00:12:26,399 --> 00:12:34,649
earlier so then now that you've got all

00:12:32,429 --> 00:12:35,790
this configuration in place you're sort

00:12:34,649 --> 00:12:39,499
of ready to do your first deployment

00:12:35,790 --> 00:12:42,990
it's it's pretty much that easy so you

00:12:39,499 --> 00:12:46,740
run zappa deploy staging and staging is

00:12:42,990 --> 00:12:49,970
the name of that environment from your

00:12:46,740 --> 00:12:54,629
set it premieres APIs headings JSON and

00:12:49,970 --> 00:12:56,309
what that will do is well I won't make

00:12:54,629 --> 00:12:58,679
you read all of this code here or this

00:12:56,309 --> 00:13:00,509
output here but what happens is that it

00:12:58,679 --> 00:13:02,220
will freeze your Python requirements

00:13:00,509 --> 00:13:04,380
along with all of your application code

00:13:02,220 --> 00:13:07,050
into a single zip file

00:13:04,380 --> 00:13:10,170
and then it'll upload that zip file to

00:13:07,050 --> 00:13:14,430
s3 into that bucket and then it will

00:13:10,170 --> 00:13:16,310
create API gateway routes for you and it

00:13:14,430 --> 00:13:20,010
will create lambda functions that

00:13:16,310 --> 00:13:22,080
ultimately point to the Django view code

00:13:20,010 --> 00:13:24,570
that you need to execute in response to

00:13:22,080 --> 00:13:27,600
requests and then hook the API gateway

00:13:24,570 --> 00:13:30,630
to those lambda functions and

00:13:27,600 --> 00:13:32,870
importantly it prints out the URL you

00:13:30,630 --> 00:13:37,110
can visit your application at the end

00:13:32,870 --> 00:13:39,870
it's some long randomly generated string

00:13:37,110 --> 00:13:43,260
of characters followed by this execute

00:13:39,870 --> 00:13:46,380
API a US East one or whatever region

00:13:43,260 --> 00:13:51,930
you're in Amazon AWS comm and then slash

00:13:46,380 --> 00:13:56,370
your environment and updating your

00:13:51,930 --> 00:13:58,860
application is quite similar again it's

00:13:56,370 --> 00:14:00,570
it's downloading all of your

00:13:58,860 --> 00:14:04,200
dependencies packaging them up as a zip

00:14:00,570 --> 00:14:05,400
uploading that to s3 and then since

00:14:04,200 --> 00:14:09,210
you're updating your application it'll

00:14:05,400 --> 00:14:12,150
update the lambda and redeploy the API

00:14:09,210 --> 00:14:15,690
gateway and then give you the URL to

00:14:12,150 --> 00:14:19,460
visit that again so the next step after

00:14:15,690 --> 00:14:22,980
this is getting your certs in order and

00:14:19,460 --> 00:14:25,080
fortunately that is very easy to so once

00:14:22,980 --> 00:14:28,350
you've created a certificate and Amazon

00:14:25,080 --> 00:14:31,620
certificate manager you can take that on

00:14:28,350 --> 00:14:34,920
that AWS resource manager our resource

00:14:31,620 --> 00:14:37,740
number string and specify it in your

00:14:34,920 --> 00:14:40,950
environment as the certificate arm and

00:14:37,740 --> 00:14:43,260
then tell it the domain that you want to

00:14:40,950 --> 00:14:47,310
certify and then you just run zappa

00:14:43,260 --> 00:14:50,130
certify state and that will certify the

00:14:47,310 --> 00:14:54,770
staging domain that you specified using

00:14:50,130 --> 00:14:58,920
the cert that you specified and then

00:14:54,770 --> 00:15:03,480
through this you also get log storage

00:14:58,920 --> 00:15:04,860
and tailing so you can see what's

00:15:03,480 --> 00:15:07,050
happening in your application in real

00:15:04,860 --> 00:15:08,520
time as well as persist those logs for

00:15:07,050 --> 00:15:10,950
later use

00:15:08,520 --> 00:15:13,140
you also get management commands and

00:15:10,950 --> 00:15:16,560
even the ability to run raw Python

00:15:13,140 --> 00:15:21,029
against your lambda against your invite

00:15:16,560 --> 00:15:22,170
where the lamda lives and as as you

00:15:21,029 --> 00:15:22,890
should know from lambda you get

00:15:22,170 --> 00:15:26,400
auto-scaling

00:15:22,890 --> 00:15:28,200
to meet your request load some points

00:15:26,400 --> 00:15:31,800
there though are to watch out for

00:15:28,200 --> 00:15:33,210
concurrency and cold start time you can

00:15:31,800 --> 00:15:34,320
read more about that there's a there's a

00:15:33,210 --> 00:15:35,339
good article I could point in to you

00:15:34,320 --> 00:15:37,500
later

00:15:35,339 --> 00:15:41,339
but essentially just if you're if you're

00:15:37,500 --> 00:15:44,570
trying to serve very fast requests you

00:15:41,339 --> 00:15:46,950
may want to look into that first and

00:15:44,570 --> 00:15:47,310
importantly you'll probably have a way

00:15:46,950 --> 00:15:51,480
lower

00:15:47,310 --> 00:15:53,460
AWS bill because you don't have servers

00:15:51,480 --> 00:15:57,660
running when they're not serving any

00:15:53,460 --> 00:16:00,839
requests so a request comes in it is

00:15:57,660 --> 00:16:02,940
managed by that lambda function and as

00:16:00,839 --> 00:16:05,790
soon as that response is sent that

00:16:02,940 --> 00:16:08,940
lambda goes away and you only pay for

00:16:05,790 --> 00:16:13,470
the execution time of that request

00:16:08,940 --> 00:16:16,430
lifecycle and a couple of odds and ends

00:16:13,470 --> 00:16:19,290
to are like serverless database options

00:16:16,430 --> 00:16:21,150
amazon did release or or a service

00:16:19,290 --> 00:16:24,630
recently that's their my sequel

00:16:21,150 --> 00:16:27,270
compatible product and it's so it's a

00:16:24,630 --> 00:16:29,610
managed solution but the cost is really

00:16:27,270 --> 00:16:31,650
comparable to any of their other

00:16:29,610 --> 00:16:33,270
database solutions at the moment so

00:16:31,650 --> 00:16:35,400
there wouldn't necessarily be a price

00:16:33,270 --> 00:16:38,100
game there although you might still like

00:16:35,400 --> 00:16:41,700
the the managed solution facet of it

00:16:38,100 --> 00:16:44,220
there's also DynamoDB but that's a no

00:16:41,700 --> 00:16:46,140
sequel solution and i don't know at

00:16:44,220 --> 00:16:49,050
least at the time of writing this talk

00:16:46,140 --> 00:16:52,680
of any of any production ready drivers

00:16:49,050 --> 00:16:54,660
for django for using demo DB there are a

00:16:52,680 --> 00:16:58,740
couple of other options out there that

00:16:54,660 --> 00:17:01,100
are not necessarily django specific that

00:16:58,740 --> 00:17:04,439
are also not relational databases but

00:17:01,100 --> 00:17:07,589
might still persist data for you in a

00:17:04,439 --> 00:17:09,449
way that's that's useful to you and then

00:17:07,589 --> 00:17:12,000
you can also run asynchronous tasks so

00:17:09,449 --> 00:17:15,689
Zappa can actually run functions from

00:17:12,000 --> 00:17:18,360
your code on a schedule if you like you

00:17:15,689 --> 00:17:20,670
can specify things in like a cron syntax

00:17:18,360 --> 00:17:21,870
and say every four hours please run this

00:17:20,670 --> 00:17:25,440
thing

00:17:21,870 --> 00:17:28,050
if you wanted to do celery workers and

00:17:25,440 --> 00:17:29,250
things like that you'd you'd have to

00:17:28,050 --> 00:17:31,820
look into that yourself because that's

00:17:29,250 --> 00:17:36,270
not it don't mean I'm familiar with but

00:17:31,820 --> 00:17:38,700
you can also split your application into

00:17:36,270 --> 00:17:40,710
separate lambdas if you like if you

00:17:38,700 --> 00:17:43,230
really need sort of separate

00:17:40,710 --> 00:17:44,760
asynchronous behavior and long-running

00:17:43,230 --> 00:17:45,870
lambdas aren't super well supported

00:17:44,760 --> 00:17:49,110
although I did see that

00:17:45,870 --> 00:17:52,440
AWS recently upped the execution limit

00:17:49,110 --> 00:17:56,760
to 15 minutes I think it was previously

00:17:52,440 --> 00:17:59,880
5 so you've got triple the time to to do

00:17:56,760 --> 00:18:03,450
what you need to do so some some tips

00:17:59,880 --> 00:18:06,750
are that you would probably want to

00:18:03,450 --> 00:18:12,240
exclude most of your unneeded files node

00:18:06,750 --> 00:18:14,340
modules is huge I mean it's it's I don't

00:18:12,240 --> 00:18:16,100
know you don't want to ship more than

00:18:14,340 --> 00:18:20,640
you have to

00:18:16,100 --> 00:18:23,820
so like node modules if you use pycharm

00:18:20,640 --> 00:18:27,120
your die idea folder and if you are

00:18:23,820 --> 00:18:28,860
uploading media files locally you

00:18:27,120 --> 00:18:30,750
probably want to exclude that directory

00:18:28,860 --> 00:18:33,510
too and it just reduces the zip file

00:18:30,750 --> 00:18:37,050
size so it can zip it faster and ship it

00:18:33,510 --> 00:18:38,790
faster when you go to deploy and then

00:18:37,050 --> 00:18:44,310
the other major tip I have is that you

00:18:38,790 --> 00:18:45,810
should automate your process you there's

00:18:44,310 --> 00:18:48,360
there's a number of options out there a

00:18:45,810 --> 00:18:50,790
lot of people use fabric I personally

00:18:48,360 --> 00:18:53,280
use NPM scripts because I'm already

00:18:50,790 --> 00:18:56,730
using webpack from my static assets so I

00:18:53,280 --> 00:19:00,390
have a few scripts already so my package

00:18:56,730 --> 00:19:03,720
JSON looks something like this that's a

00:19:00,390 --> 00:19:05,910
lot of stuff but if you if you want to

00:19:03,720 --> 00:19:07,920
know more about this I'm happy to like

00:19:05,910 --> 00:19:12,630
show you this file and talk about all

00:19:07,920 --> 00:19:15,330
the parts of it in the hall and what it

00:19:12,630 --> 00:19:17,730
essentially allows me to do is deploy my

00:19:15,330 --> 00:19:21,680
django application by just running npm

00:19:17,730 --> 00:19:25,770
run deploy - - stage equals production

00:19:21,680 --> 00:19:28,110
so that's basically all i have and if

00:19:25,770 --> 00:19:32,010
you'd like to like I said see more of

00:19:28,110 --> 00:19:33,170
this or talk about anything specific or

00:19:32,010 --> 00:19:36,260
see a live demo

00:19:33,170 --> 00:19:44,300
I'm happy to do that and here's my

00:19:36,260 --> 00:19:46,070
contact info again so thanks hi thanks

00:19:44,300 --> 00:19:48,620
for the presentation what are some of

00:19:46,070 --> 00:19:51,380
the cost considerations for performance

00:19:48,620 --> 00:19:54,410
so how would you compare you pay for

00:19:51,380 --> 00:19:57,740
every invocation of the lambda function

00:19:54,410 --> 00:19:59,330
there's a small price individually how

00:19:57,740 --> 00:20:02,390
would that compare to having your own

00:19:59,330 --> 00:20:05,780
easy to instance yeah good question so I

00:20:02,390 --> 00:20:07,720
was previously running for applications

00:20:05,780 --> 00:20:12,110
on an ec2 instance and spending

00:20:07,720 --> 00:20:14,450
something around $50 a month I don't

00:20:12,110 --> 00:20:16,880
remember the the ec2 instance size that

00:20:14,450 --> 00:20:20,660
I was using but I'm essentially paying

00:20:16,880 --> 00:20:22,280
zero dollars per month now and Amazon

00:20:20,660 --> 00:20:25,010
gives you something like three and a

00:20:22,280 --> 00:20:28,700
half million invitations free for a

00:20:25,010 --> 00:20:32,450
month so if you're if you're at sort of

00:20:28,700 --> 00:20:34,220
a hobby level amount of traffic I would

00:20:32,450 --> 00:20:36,530
say there's almost no likelihood that

00:20:34,220 --> 00:20:38,000
it's gonna be more expensive they're

00:20:36,530 --> 00:20:40,250
certainly gonna be a break-even point

00:20:38,000 --> 00:20:41,810
there if you're if you're getting so

00:20:40,250 --> 00:20:44,180
many requests that your lambda is

00:20:41,810 --> 00:20:47,930
essentially running all the time I could

00:20:44,180 --> 00:20:51,770
definitely see that that might perhaps

00:20:47,930 --> 00:20:56,650
even outrun your ec2 cost so definitely

00:20:51,770 --> 00:21:01,370
a consideration yeah good question I did

00:20:56,650 --> 00:21:03,980
does Zappa also help you when you said

00:21:01,370 --> 00:21:05,360
it goes to the SS goes to s3 does that

00:21:03,980 --> 00:21:07,100
do it automatically when you collect

00:21:05,360 --> 00:21:08,870
asset does it go to x3 or do you have to

00:21:07,100 --> 00:21:12,140
do some configurations in there yeah

00:21:08,870 --> 00:21:15,620
good question so is Apple will not do

00:21:12,140 --> 00:21:17,180
that for you there are a couple of

00:21:15,620 --> 00:21:18,800
really good solutions out there for

00:21:17,180 --> 00:21:20,990
putting your static assets into s3

00:21:18,800 --> 00:21:26,360
there's a library called Jango storages

00:21:20,990 --> 00:21:28,490
and it just takes a few small pieces of

00:21:26,360 --> 00:21:30,980
configuration like adding some settings

00:21:28,490 --> 00:21:33,520
to your settings about pi and maybe

00:21:30,980 --> 00:21:36,440
creating the buckets yourself initially

00:21:33,520 --> 00:21:38,860
but you can essentially collect your

00:21:36,440 --> 00:21:42,350
static files and upload your media files

00:21:38,860 --> 00:21:43,399
directly to s3 using Jango storages so

00:21:42,350 --> 00:21:45,799
that's how I'm doing it

00:21:43,399 --> 00:21:47,690
early you mentioned some serverless

00:21:45,799 --> 00:21:50,899
database options how does that compare

00:21:47,690 --> 00:21:53,469
to like a standard RDS instance can you

00:21:50,899 --> 00:21:57,289
clarify your question I mentioned that

00:21:53,469 --> 00:22:00,200
Aurora and dynamodb and under server

00:21:57,289 --> 00:22:01,429
Ellis databases in the talk I just want

00:22:00,200 --> 00:22:03,529
to know if that's any is anything

00:22:01,429 --> 00:22:05,599
special about that for using with lambda

00:22:03,529 --> 00:22:09,190
as compared to I can already ask

00:22:05,599 --> 00:22:11,479
post-grad citizens I see I mean

00:22:09,190 --> 00:22:13,190
Aurora again is like my sequel

00:22:11,479 --> 00:22:15,769
compatible so if you're already using my

00:22:13,190 --> 00:22:18,259
sequel you can probably switch to Aurora

00:22:15,769 --> 00:22:19,879
pretty easily

00:22:18,259 --> 00:22:24,789
you have to migrate your data and stuff

00:22:19,879 --> 00:22:27,589
obviously but I think the serverless

00:22:24,789 --> 00:22:29,659
aspect of their Aurora product is really

00:22:27,589 --> 00:22:31,759
just them saying we have a managed

00:22:29,659 --> 00:22:33,679
solution for this instead of you having

00:22:31,759 --> 00:22:36,109
to go and click and create an RDS

00:22:33,679 --> 00:22:38,509
instance yourself and run backups and

00:22:36,109 --> 00:22:41,450
make sure that it's handling the load

00:22:38,509 --> 00:22:43,909
that you're getting so it also manages

00:22:41,450 --> 00:22:45,889
that horizontal scaling I'm so if you're

00:22:43,909 --> 00:22:49,309
if you're having a lot of database reads

00:22:45,889 --> 00:22:50,539
it'll scale out for you but in terms of

00:22:49,309 --> 00:22:53,389
sort of how you interact with the

00:22:50,539 --> 00:22:55,759
database for Aurora at least I don't

00:22:53,389 --> 00:22:57,799
imagine there's a difference if you went

00:22:55,759 --> 00:23:00,169
to dynamo DB or some other non

00:22:57,799 --> 00:23:03,019
relational database that would be a more

00:23:00,169 --> 00:23:06,019
significant shift does that answer your

00:23:03,019 --> 00:23:08,089
question all right cool hey thanks for

00:23:06,019 --> 00:23:10,099
your talk can you tell us about the

00:23:08,089 --> 00:23:11,719
latency for a request and are you aware

00:23:10,099 --> 00:23:13,129
of any factors that change that latency

00:23:11,719 --> 00:23:16,399
depending on the no complexity of your

00:23:13,129 --> 00:23:18,259
slug or help up sighs yeah it's not

00:23:16,399 --> 00:23:21,799
something I've delved super far into to

00:23:18,259 --> 00:23:22,609
be honest but anecdotally on a totally

00:23:21,799 --> 00:23:25,339
cold start

00:23:22,609 --> 00:23:28,279
I have websites again receiving like

00:23:25,339 --> 00:23:30,169
hobby levels of traffic but they take

00:23:28,279 --> 00:23:32,179
maybe a couple seconds to load if I

00:23:30,169 --> 00:23:36,259
haven't hit them in a while and then

00:23:32,179 --> 00:23:38,599
some subsequent requests are essentially

00:23:36,259 --> 00:23:42,369
instantaneous as far as I can I can feel

00:23:38,599 --> 00:23:45,140
I can show you just real quick like

00:23:42,369 --> 00:23:48,219
maybe I can't here we go

00:23:45,140 --> 00:23:48,219
[Music]

00:23:48,730 --> 00:23:55,120
sorry multiple desktops well I can show

00:23:53,390 --> 00:23:59,570
I'm happy to show you in the hallway but

00:23:55,120 --> 00:24:01,429
yeah it's quick loading all right so

00:23:59,570 --> 00:24:03,710
we're about out of time thank you so

00:24:01,429 --> 00:24:10,399
much Dame's

00:24:03,710 --> 00:24:10,399

YouTube URL: https://www.youtube.com/watch?v=ZfynWM4-jFE


