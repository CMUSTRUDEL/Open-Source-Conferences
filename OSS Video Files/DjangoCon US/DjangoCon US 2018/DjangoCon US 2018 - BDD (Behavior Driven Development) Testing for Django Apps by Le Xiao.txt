Title: DjangoCon US 2018 - BDD (Behavior Driven Development) Testing for Django Apps by Le Xiao
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - BDD (Behavior Driven Development) Testing for Django Apps by Le Xiao

Unit tests focus on classes and methods while integration tests focus on components and basic business logic. However, neither of these is executed against the full system environment nor take account of the systemâ€™s behaviors as a whole. Therefore, our app will not be assured to work properly in production environments if we limit our testing approach to only two types of tests. Incorporating BDD testing into our appâ€™s testing plan addresses these limitations.

BDD is experiencing increasing industry adoption but can still prove daunting to implement from scratch. Our talk will describe how we implement a BDD framework stack by answering following questions:

How do we design structured and reusable test code for BDD?
How do we integrate BDD tests with our CI/CD pipeline?
How do we speed up the execution of BDD automated tests?
How do we set up our BDD framework?
What are the limits of BDD testing?

This talk was presented at: https://2018.djangocon.us/talk/bdd-behavior-driven-development-testing/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,470 --> 00:00:22,020
thank you so much thank you so much

00:00:17,670 --> 00:00:24,210
darling so my name is Laura and this is

00:00:22,020 --> 00:00:28,800
my first time to give a speech in jungle

00:00:24,210 --> 00:00:31,349
: I'm super excited so today's topic is

00:00:28,800 --> 00:00:33,360
about obdds in Jungle Yap so before we

00:00:31,349 --> 00:00:35,130
head into our first light I'd actually

00:00:33,360 --> 00:00:38,129
asked you guys no question so how many

00:00:35,130 --> 00:00:40,079
of you have know BDD or even say applied

00:00:38,129 --> 00:00:44,340
ability in your development just put up

00:00:40,079 --> 00:00:47,670
your hands real quick hmm good looks

00:00:44,340 --> 00:00:49,739
like San Diego PD has a green market in

00:00:47,670 --> 00:00:53,100
San Diego so let me do a quick

00:00:49,739 --> 00:00:54,719
introduction for ability so PD

00:00:53,100 --> 00:00:58,109
represents for behavior driven

00:00:54,719 --> 00:00:59,730
development so it is a method ours which

00:00:58,109 --> 00:01:01,710
is designed for improving the

00:00:59,730 --> 00:01:03,899
communication between the tech people in

00:01:01,710 --> 00:01:07,920
a non tech people so it's a purely

00:01:03,899 --> 00:01:10,830
business oriented and its user

00:01:07,920 --> 00:01:14,250
and can be easily understood by the non

00:01:10,830 --> 00:01:18,450
tech people so who is this this mass

00:01:14,250 --> 00:01:20,880
storage why we need a BDD so because

00:01:18,450 --> 00:01:24,420
they say it's a behavior driven so it's

00:01:20,880 --> 00:01:25,920
user behavior focus and they focus more

00:01:24,420 --> 00:01:28,770
on user behaviors they are just

00:01:25,920 --> 00:01:30,689
functions and also it focus more on a

00:01:28,770 --> 00:01:33,270
software development rather than just

00:01:30,689 --> 00:01:35,640
testing itself and also because this

00:01:33,270 --> 00:01:38,490
behave driven development comes with the

00:01:35,640 --> 00:01:40,560
description that means if the

00:01:38,490 --> 00:01:44,310
description can be applied to different

00:01:40,560 --> 00:01:46,439
platforms I'd like to break down my

00:01:44,310 --> 00:01:49,439
presentation into four parts so first

00:01:46,439 --> 00:01:52,380
are going to introduce how we set up our

00:01:49,439 --> 00:01:55,290
baby framework in the real production

00:01:52,380 --> 00:01:58,979
and the second is on how we integrate

00:01:55,290 --> 00:02:01,649
our ability with our CI CD process the

00:01:58,979 --> 00:02:03,689
sir saying is how we do the refinement

00:02:01,649 --> 00:02:06,000
so how we just speed up execution for

00:02:03,689 --> 00:02:09,360
this testing and it's certain for saying

00:02:06,000 --> 00:02:12,390
is we I cannot describe was an

00:02:09,360 --> 00:02:13,400
invitation for the ability so before we

00:02:12,390 --> 00:02:15,290
set

00:02:13,400 --> 00:02:17,450
our framework we need to collect our

00:02:15,290 --> 00:02:20,360
requirements from our non tech business

00:02:17,450 --> 00:02:24,290
people so we are using gherkin language

00:02:20,360 --> 00:02:29,150
to write down your description so ger

00:02:24,290 --> 00:02:32,599
king is it's a language around keywords

00:02:29,150 --> 00:02:34,970
so as you can see here we have three

00:02:32,599 --> 00:02:37,700
levels feature scenario and step and

00:02:34,970 --> 00:02:40,900
each level will have his own sub

00:02:37,700 --> 00:02:44,540
keywords so which can make it executable

00:02:40,900 --> 00:02:47,120
this is this more example so as you can

00:02:44,540 --> 00:02:49,370
see the feature is every talk you have

00:02:47,120 --> 00:02:51,139
your future name and then you know

00:02:49,370 --> 00:02:53,720
feature you're gonna have your scenario

00:02:51,139 --> 00:02:55,099
name and within the scenario you're

00:02:53,720 --> 00:02:58,159
going to describe how you're going to

00:02:55,099 --> 00:03:00,650
execute your test and you're ready I

00:02:58,159 --> 00:03:03,139
also like to add some tags for scenarios

00:03:00,650 --> 00:03:04,819
so that I can just keep some tests I

00:03:03,139 --> 00:03:07,250
don't want to wrong an hour so you can

00:03:04,819 --> 00:03:11,170
use the data table to have your own

00:03:07,250 --> 00:03:15,109
specified parameters or your your own

00:03:11,170 --> 00:03:17,510
predefined data so no matter we have our

00:03:15,109 --> 00:03:20,599
requirements ready we need to set up our

00:03:17,510 --> 00:03:25,359
BDD so we need to get some tools for our

00:03:20,599 --> 00:03:28,180
beauty so you already except for your

00:03:25,359 --> 00:03:32,389
feature files you're Sunita say Daniel

00:03:28,180 --> 00:03:35,239
which is for manipulating your browsers

00:03:32,389 --> 00:03:38,120
and our so we need a Singh quarter

00:03:35,239 --> 00:03:40,699
behave is design framework for beauty in

00:03:38,120 --> 00:03:42,709
Python and thanks to our jungle

00:03:40,699 --> 00:03:44,389
committee we have a jungle testing

00:03:42,709 --> 00:03:47,329
equation which is called behave jungle

00:03:44,389 --> 00:03:48,470
and the first thing is we need to sing

00:03:47,329 --> 00:03:52,430
quarter page objects

00:03:48,470 --> 00:03:55,159
it's a methodology for just gathering

00:03:52,430 --> 00:03:59,090
all your Dom elements in your page and

00:03:55,159 --> 00:04:03,049
it's easier for you to do the management

00:03:59,090 --> 00:04:05,000
for your animates know we now can get

00:04:03,049 --> 00:04:07,489
our hands dirty now

00:04:05,000 --> 00:04:09,349
so first install all the dependencies I

00:04:07,489 --> 00:04:12,409
mentioned in the in the slides and

00:04:09,349 --> 00:04:16,909
selenium behave jungle and also PDB for

00:04:12,409 --> 00:04:17,780
debugging and then you have to install

00:04:16,909 --> 00:04:21,199
your webdriver

00:04:17,780 --> 00:04:25,250
so because synonymy is webdriver to

00:04:21,199 --> 00:04:26,160
control the browsers and we need a

00:04:25,250 --> 00:04:29,580
contract

00:04:26,160 --> 00:04:31,670
for calm and for gorge ever for the fat

00:04:29,580 --> 00:04:34,950
fox and make sure you have already

00:04:31,670 --> 00:04:36,690
stored your webdriver correctly make

00:04:34,950 --> 00:04:37,920
sure the past is correct the version

00:04:36,690 --> 00:04:40,670
scrap otherwise you're going to have

00:04:37,920 --> 00:04:42,810
some compatible issues with Daniel and

00:04:40,670 --> 00:04:44,550
for the Mac users you are really lucky

00:04:42,810 --> 00:04:49,020
you can use a homebrew to install all of

00:04:44,550 --> 00:04:51,210
them it's very good and the third thing

00:04:49,020 --> 00:04:53,430
is we need to create our features so

00:04:51,210 --> 00:04:55,590
following the gurgling style you've

00:04:53,430 --> 00:04:58,770
created features and then I want to

00:04:55,590 --> 00:05:00,480
emphasize we also applied our own on

00:04:58,770 --> 00:05:03,060
step combination I cannot to introduce

00:05:00,480 --> 00:05:06,480
that in the following slide the

00:05:03,060 --> 00:05:08,580
convention here is we are doing in this

00:05:06,480 --> 00:05:11,550
way so with the keywords you see in the

00:05:08,580 --> 00:05:14,580
cooking style language and then somebody

00:05:11,550 --> 00:05:17,040
do something in the page of the action

00:05:14,580 --> 00:05:18,960
words so the page objects as I mentioned

00:05:17,040 --> 00:05:21,690
before is where you're going to have all

00:05:18,960 --> 00:05:24,930
your elements ready and then it's easier

00:05:21,690 --> 00:05:28,890
for you to maintain and simplify to your

00:05:24,930 --> 00:05:31,410
UI of course and you can repeat reduced

00:05:28,890 --> 00:05:33,470
or duplication of the code and action

00:05:31,410 --> 00:05:37,410
words is where we have all our

00:05:33,470 --> 00:05:39,690
implementation for the steps and also

00:05:37,410 --> 00:05:42,270
it's because we want to mention your

00:05:39,690 --> 00:05:47,040
steps easily so we're just using an

00:05:42,270 --> 00:05:49,620
action words to represent them now so

00:05:47,040 --> 00:05:52,140
you can see that there is example so for

00:05:49,620 --> 00:05:54,420
logging so when nine logging with a user

00:05:52,140 --> 00:05:56,610
name and password in the login page of

00:05:54,420 --> 00:06:00,120
logging action so that's how the staff

00:05:56,610 --> 00:06:02,220
looks like with all those predefined

00:06:00,120 --> 00:06:04,110
stuff we can now build our co structure

00:06:02,220 --> 00:06:07,740
like this and now I just want to point

00:06:04,110 --> 00:06:09,660
out if you want to have some predefined

00:06:07,740 --> 00:06:13,290
data to load in your test we can use

00:06:09,660 --> 00:06:15,120
fixture and second if you want to do

00:06:13,290 --> 00:06:18,180
some quick ways you can just use factory

00:06:15,120 --> 00:06:20,520
poi if anyone knows that to generate

00:06:18,180 --> 00:06:24,240
some thick data that's very that's very

00:06:20,520 --> 00:06:26,880
quick and I'm going to go through those

00:06:24,240 --> 00:06:29,100
files very quickly so first you need an

00:06:26,880 --> 00:06:31,950
environment pie so um pie is where you

00:06:29,100 --> 00:06:33,930
configure your test running so they

00:06:31,950 --> 00:06:35,950
sound the gherkins the feature file

00:06:33,930 --> 00:06:40,240
you're going to iterate your run

00:06:35,950 --> 00:06:43,270
sir those Lavos so before the beginning

00:06:40,240 --> 00:06:47,290
of the of the running testing and also

00:06:43,270 --> 00:06:49,600
feature scenario and steps and by the

00:06:47,290 --> 00:06:52,120
for the behavior jungle already set up

00:06:49,600 --> 00:06:53,890
the database for you before all and then

00:06:52,120 --> 00:06:58,720
they will flash out to your database

00:06:53,890 --> 00:07:02,860
after scenario and they were tear down

00:06:58,720 --> 00:07:04,210
the database after all for the action

00:07:02,860 --> 00:07:06,760
words you need to load action because

00:07:04,210 --> 00:07:08,590
one feature can have multiple steps and

00:07:06,760 --> 00:07:11,470
that's why you need a medical action

00:07:08,590 --> 00:07:13,600
words and you need to tell ability frame

00:07:11,470 --> 00:07:15,700
of say which section where you want to

00:07:13,600 --> 00:07:19,510
load in so based on what Convention for

00:07:15,700 --> 00:07:22,090
the step definition we use we just tell

00:07:19,510 --> 00:07:24,840
the baby if we find the keywords inside

00:07:22,090 --> 00:07:29,440
the step we're loading the corresponding

00:07:24,840 --> 00:07:31,300
action ways and for the action words

00:07:29,440 --> 00:07:32,470
that's where your implement their steps

00:07:31,300 --> 00:07:34,660
so easily

00:07:32,470 --> 00:07:38,770
you're just importing your page objects

00:07:34,660 --> 00:07:40,630
and then until the beauties say you what

00:07:38,770 --> 00:07:43,210
do you want to perform so here is

00:07:40,630 --> 00:07:45,250
example I log importing a login page and

00:07:43,210 --> 00:07:47,740
then I tell really say I'm monologuing

00:07:45,250 --> 00:07:52,420
and input my username and password and

00:07:47,740 --> 00:07:55,960
login so for the page object and this is

00:07:52,420 --> 00:07:57,640
one of examples so you just select all

00:07:55,960 --> 00:08:00,130
the elements you need to perform your

00:07:57,640 --> 00:08:01,810
behaviors so you have your user field in

00:08:00,130 --> 00:08:05,740
in field you have your password field

00:08:01,810 --> 00:08:10,090
and the selecting method will be ID cos

00:08:05,740 --> 00:08:12,340
name and xx pass and so if you can talk

00:08:10,090 --> 00:08:13,930
to your front-end designer is it just

00:08:12,340 --> 00:08:15,970
tell them just give you some identifiers

00:08:13,930 --> 00:08:20,500
that make your life easier for PT

00:08:15,970 --> 00:08:22,810
testing and now here's a step by this

00:08:20,500 --> 00:08:25,360
where you are gonna match your action

00:08:22,810 --> 00:08:27,580
words with your step definition so that

00:08:25,360 --> 00:08:29,890
means make sure you really has no syntax

00:08:27,580 --> 00:08:32,260
meaning just they will execute all those

00:08:29,890 --> 00:08:34,930
steps in order so just have to find a

00:08:32,260 --> 00:08:36,910
matching between your action words and

00:08:34,930 --> 00:08:39,940
your view or your steps so it's a

00:08:36,910 --> 00:08:42,520
mapping file no after accompanying all

00:08:39,940 --> 00:08:45,070
of them you are good to go and you can

00:08:42,520 --> 00:08:47,079
run the commands so and this is how the

00:08:45,070 --> 00:08:49,879
command looks like so

00:08:47,079 --> 00:08:52,579
Python magpie is like a you on shore

00:08:49,879 --> 00:08:55,519
server in Django and had a behave option

00:08:52,579 --> 00:08:58,790
so you also can keep your database after

00:08:55,519 --> 00:09:00,379
running the testing that's easier for

00:08:58,790 --> 00:09:05,269
your the next wrong or even say you have

00:09:00,379 --> 00:09:08,360
some same database no I also did a quick

00:09:05,269 --> 00:09:10,759
demo for you and I created a app based

00:09:08,360 --> 00:09:14,089
on a gender tutorial and I run in a Ted

00:09:10,759 --> 00:09:17,990
be testing audacity so the demo is about

00:09:14,089 --> 00:09:20,930
I just loaded for my presentation and I

00:09:17,990 --> 00:09:22,850
said ah it's pretty bad and I increase

00:09:20,930 --> 00:09:25,160
what the votes for you to increase by

00:09:22,850 --> 00:09:26,899
one okay so the horror rounding just

00:09:25,160 --> 00:09:30,860
allows for three seconds remember this

00:09:26,899 --> 00:09:33,680
time is very important later on now

00:09:30,860 --> 00:09:37,339
we're going to talk about our code

00:09:33,680 --> 00:09:40,040
delivery process so everything will be

00:09:37,339 --> 00:09:42,980
online and we need some tools to help us

00:09:40,040 --> 00:09:45,350
so first for the BD we need a feature

00:09:42,980 --> 00:09:48,560
for management tool which is we are

00:09:45,350 --> 00:09:52,370
using hip tasks and for a CI platform we

00:09:48,560 --> 00:09:54,800
are using Travis CI and it therefore for

00:09:52,370 --> 00:09:57,769
a for the open source and or so we need

00:09:54,800 --> 00:10:00,079
a cross-platform test to hear can say

00:09:57,769 --> 00:10:02,329
bunch of them on the market and we are

00:10:00,079 --> 00:10:04,009
using browser stack and also you are

00:10:02,329 --> 00:10:06,379
more than welcome to use headless mode

00:10:04,009 --> 00:10:09,800
of a browser so net can be running very

00:10:06,379 --> 00:10:12,829
fast so phantoms as popular yeah

00:10:09,800 --> 00:10:14,720
whatever you like and then I got to talk

00:10:12,829 --> 00:10:15,920
about a walking fro so first you're

00:10:14,720 --> 00:10:18,079
running order tests in your local

00:10:15,920 --> 00:10:19,879
machine make sure they're passed I can

00:10:18,079 --> 00:10:21,410
run them in chrome corundum into Firefox

00:10:19,879 --> 00:10:23,480
after they are passed

00:10:21,410 --> 00:10:25,550
you can push the carry in the github and

00:10:23,480 --> 00:10:28,699
github is ready integrated ways Travis

00:10:25,550 --> 00:10:30,800
CI so I'm traveling say I we're going to

00:10:28,699 --> 00:10:33,680
do the parallel testing because we

00:10:30,800 --> 00:10:35,000
really want to have our testing passed

00:10:33,680 --> 00:10:38,059
in different browsers different

00:10:35,000 --> 00:10:41,029
operating systems so this is called

00:10:38,059 --> 00:10:42,769
compatible testing and after running out

00:10:41,029 --> 00:10:47,180
of them we're gonna have our reports

00:10:42,769 --> 00:10:49,939
ready on our management - so once we see

00:10:47,180 --> 00:10:52,160
our management - reports we cannot your

00:10:49,939 --> 00:10:52,910
check out or what scenarios I have

00:10:52,160 --> 00:10:55,519
already filled

00:10:52,910 --> 00:10:57,480
I filled we're going to debug those

00:10:55,519 --> 00:11:01,490
testing code in

00:10:57,480 --> 00:11:05,640
the corresponding yes corresponding

00:11:01,490 --> 00:11:08,460
platforms and then you do the same thing

00:11:05,640 --> 00:11:16,800
again we push a to the github and Kosar

00:11:08,460 --> 00:11:19,650
loop now so we just um needs a quick

00:11:16,800 --> 00:11:21,780
overview of the VD so we know just come

00:11:19,650 --> 00:11:24,150
to the refinement of PD as you can see

00:11:21,780 --> 00:11:27,060
BD is very costly just one scenario cost

00:11:24,150 --> 00:11:29,280
us three seconds to wrong so we don't

00:11:27,060 --> 00:11:32,280
want to around every sing for BDD

00:11:29,280 --> 00:11:33,990
so first the the principle here is you

00:11:32,280 --> 00:11:36,570
have to identify your critical tests

00:11:33,990 --> 00:11:38,460
well and the second thing is you have to

00:11:36,570 --> 00:11:40,860
minimize your unnecessary you are in

00:11:38,460 --> 00:11:46,590
action we are not using beauty to test

00:11:40,860 --> 00:11:48,540
against and the UI designing and or so

00:11:46,590 --> 00:11:51,590
sir saying is we can play a little trick

00:11:48,540 --> 00:11:54,930
with that to accelerate your execution

00:11:51,590 --> 00:11:57,180
so we do some prerequisites tab by using

00:11:54,930 --> 00:11:59,400
the test Chi and foreign jungle testing

00:11:57,180 --> 00:12:03,450
framework and then pass on the cookies

00:11:59,400 --> 00:12:06,750
into a webdriver I'll share the code so

00:12:03,450 --> 00:12:12,150
the code here is we are using the client

00:12:06,750 --> 00:12:14,730
to log in your app so you login with the

00:12:12,150 --> 00:12:17,430
username and a password and then after

00:12:14,730 --> 00:12:20,160
completing or your prerequisite steps

00:12:17,430 --> 00:12:22,410
you're just passing your cookies into

00:12:20,160 --> 00:12:24,330
your webdriver and then use the web

00:12:22,410 --> 00:12:27,300
server so that the web server will have

00:12:24,330 --> 00:12:29,730
the session of the server and then do to

00:12:27,300 --> 00:12:32,250
just keep doing the user behavior so

00:12:29,730 --> 00:12:34,980
you're gonna perform in our page now

00:12:32,250 --> 00:12:37,500
remember that we have a previous demo on

00:12:34,980 --> 00:12:41,010
three seconds for round ability now

00:12:37,500 --> 00:12:44,370
let's see how fast it can be now so same

00:12:41,010 --> 00:12:46,290
thing logging with the client and then

00:12:44,370 --> 00:12:48,690
tier devoting yeah

00:12:46,290 --> 00:12:51,000
two seconds around two seconds and we

00:12:48,690 --> 00:12:53,580
say one second okay one second really

00:12:51,000 --> 00:12:55,530
means a lot if you if especially when

00:12:53,580 --> 00:12:57,390
you around the testing on cloud and you

00:12:55,530 --> 00:12:59,700
can run this testing on those

00:12:57,390 --> 00:13:04,340
cross-platform tears the charger by

00:12:59,700 --> 00:13:04,340
minutes so save time save your morning

00:13:04,430 --> 00:13:09,930
no we are having our debugging tools so

00:13:07,350 --> 00:13:12,240
somehow we don't have bugging our cat

00:13:09,930 --> 00:13:14,399
developing code we have our barking the

00:13:12,240 --> 00:13:16,860
testing so especially you need to know

00:13:14,399 --> 00:13:19,170
how to debug it and by default behaved

00:13:16,860 --> 00:13:21,660
will capture all the standing out so

00:13:19,170 --> 00:13:27,029
maybe you're not able to do some point

00:13:21,660 --> 00:13:29,339
and we just need to trick back trace

00:13:27,029 --> 00:13:32,370
back the stack the memory stack to say

00:13:29,339 --> 00:13:35,610
where you failed here's a code for

00:13:32,370 --> 00:13:37,470
debugging and as you can see we want to

00:13:35,610 --> 00:13:39,690
have this in a debugging mode so when

00:13:37,470 --> 00:13:42,269
you set an option for it so we say

00:13:39,690 --> 00:13:45,300
behave behave debacle narrow is to know

00:13:42,269 --> 00:13:47,250
and if it's failed really is in your

00:13:45,300 --> 00:13:48,930
step so after step you're going to trace

00:13:47,250 --> 00:13:50,850
back your stack and see where it failed

00:13:48,930 --> 00:13:54,209
to check out a verbose check out your

00:13:50,850 --> 00:13:56,009
logic yeah so that's how the command

00:13:54,209 --> 00:13:59,569
looks like so you need to customize your

00:13:56,009 --> 00:14:02,250
command to run this testing so make sure

00:13:59,569 --> 00:14:03,360
you have a no capture option on your

00:14:02,250 --> 00:14:05,519
command

00:14:03,360 --> 00:14:09,690
otherwise it was not able to just

00:14:05,519 --> 00:14:13,529
capture breakpoints no here's the last

00:14:09,690 --> 00:14:15,300
part the new mutations of BDD so BB is

00:14:13,529 --> 00:14:19,110
really good and it's very user friendly

00:14:15,300 --> 00:14:21,240
and but I'm not sailing snicker well

00:14:19,110 --> 00:14:25,560
here it does have some limitations

00:14:21,240 --> 00:14:26,970
so first the logic of description is

00:14:25,560 --> 00:14:29,220
linear as you can say they have many

00:14:26,970 --> 00:14:32,100
keywords and they execute keywords in

00:14:29,220 --> 00:14:34,769
order so if you want to have some

00:14:32,100 --> 00:14:37,230
conditions to run ability like if I else

00:14:34,769 --> 00:14:39,449
so one way for you to do that is you

00:14:37,230 --> 00:14:42,779
just have our data table ready and

00:14:39,449 --> 00:14:46,589
iterate the records to against your VD

00:14:42,779 --> 00:14:48,959
testing and second well the solution is

00:14:46,589 --> 00:14:52,589
you just create a medical scenarios and

00:14:48,959 --> 00:14:54,899
passing different parameters the second

00:14:52,589 --> 00:14:58,560
limitation would be it's very hard for

00:14:54,899 --> 00:15:03,779
you to interact with those complex

00:14:58,560 --> 00:15:07,680
widget like a data picker because you

00:15:03,779 --> 00:15:11,660
need to tell sanim to click the very

00:15:07,680 --> 00:15:13,680
specified button a specified link to use

00:15:11,660 --> 00:15:17,040
this

00:15:13,680 --> 00:15:21,200
to use the VD so I do suggest don't

00:15:17,040 --> 00:15:24,529
don't put yourself to you how to code in

00:15:21,200 --> 00:15:28,589
interacting with the complex jazz widget

00:15:24,529 --> 00:15:30,450
the third thing is the arrows raising

00:15:28,589 --> 00:15:33,390
the difference in browsers can be

00:15:30,450 --> 00:15:36,060
various so somehow you may face a error

00:15:33,390 --> 00:15:38,490
in Chrome like the enmund is not

00:15:36,060 --> 00:15:41,100
available in this page however when you

00:15:38,490 --> 00:15:43,110
do the same testing in Firefox it may

00:15:41,100 --> 00:15:44,700
raise the error for your like this

00:15:43,110 --> 00:15:47,910
element is not interactable

00:15:44,700 --> 00:15:49,740
so I do such as if you run our test

00:15:47,910 --> 00:15:51,149
against whether you have a sentiment on

00:15:49,740 --> 00:15:53,640
your page

00:15:51,149 --> 00:15:58,550
don't use arrows to raise up so just

00:15:53,640 --> 00:16:00,839
create some just selecting multiple

00:15:58,550 --> 00:16:02,700
multiple elements with the same class

00:16:00,839 --> 00:16:05,610
name or same ID and say whether the

00:16:02,700 --> 00:16:10,140
array is empty or it's not empty so that

00:16:05,610 --> 00:16:12,390
can be very good okay that's war I have

00:16:10,140 --> 00:16:16,500
today and this is my email and feel free

00:16:12,390 --> 00:16:26,279
to send me any questions and how many

00:16:16,500 --> 00:16:27,600
means we have okay I had a question I

00:16:26,279 --> 00:16:30,089
wanted to know if you could elaborate

00:16:27,600 --> 00:16:32,250
any more on one of your biggest gacho's

00:16:30,089 --> 00:16:35,850
and I know you had a slide dedicated to

00:16:32,250 --> 00:16:42,180
it but what kind of vexed you the most

00:16:35,850 --> 00:16:44,850
with starting you had a slide on some of

00:16:42,180 --> 00:16:46,620
your watches or things to note you're

00:16:44,850 --> 00:16:47,610
not selling a snake-oil so I just I

00:16:46,620 --> 00:16:48,600
wanted to know one of your biggest

00:16:47,610 --> 00:16:51,660
gotchas and one of the biggest

00:16:48,600 --> 00:16:54,690
challenges you had so for learning

00:16:51,660 --> 00:16:56,310
beauty I sure you are just you are

00:16:54,690 --> 00:16:59,970
manipulating the elements on your page

00:16:56,310 --> 00:17:02,820
and it can have some courageous when you

00:16:59,970 --> 00:17:05,220
do the beauty testing like the page is

00:17:02,820 --> 00:17:07,350
ready loaded but your PD framework

00:17:05,220 --> 00:17:10,230
didn't catch that animates and it threw

00:17:07,350 --> 00:17:12,929
out an arrow so you do have to set up

00:17:10,230 --> 00:17:15,120
some waiting time for it so that's the

00:17:12,929 --> 00:17:17,699
big challenge because if you do on your

00:17:15,120 --> 00:17:19,819
local machine it can be very fast but if

00:17:17,699 --> 00:17:24,209
you're doing online or even push up your

00:17:19,819 --> 00:17:25,750
CI platform somehow you know that the

00:17:24,209 --> 00:17:27,730
enemies may not be catch

00:17:25,750 --> 00:17:31,419
so you need to check your nana work and

00:17:27,730 --> 00:17:34,059
check out whether liz has been captured

00:17:31,419 --> 00:17:36,760
and you set up your waiting time like

00:17:34,059 --> 00:17:38,610
one second or two seconds to help you

00:17:36,760 --> 00:17:41,620
with that so that's the that's the thing

00:17:38,610 --> 00:17:43,659
do you usually use asynchronous waits or

00:17:41,620 --> 00:17:45,669
do you just use like sleep or something

00:17:43,659 --> 00:17:48,039
like that oh yeah I'm trouble with time

00:17:45,669 --> 00:17:49,809
sleep so when you check a check about

00:17:48,039 --> 00:17:51,970
this framework they are using for behave

00:17:49,809 --> 00:17:55,270
I treat they are setting infinite loop

00:17:51,970 --> 00:17:57,220
and then if the running time just

00:17:55,270 --> 00:17:59,890
surpassed 10 seconds they're gonna stop

00:17:57,220 --> 00:18:03,580
and it's or Panero can you say anything

00:17:59,890 --> 00:18:06,280
about any sort of design patterns

00:18:03,580 --> 00:18:09,669
between you and UI or front-end that

00:18:06,280 --> 00:18:12,059
makes it easier for you to not test like

00:18:09,669 --> 00:18:13,840
the UI design while you're making these

00:18:12,059 --> 00:18:19,510
page locators and

00:18:13,840 --> 00:18:21,610
etc yes so you already if you err so if

00:18:19,510 --> 00:18:23,799
you have a very complex landing page you

00:18:21,610 --> 00:18:26,679
have many animation on a page and it's

00:18:23,799 --> 00:18:29,950
very hard for to use BDD actually yes so

00:18:26,679 --> 00:18:32,650
that's why I'm saying PD its methodology

00:18:29,950 --> 00:18:34,390
for you to have our integration testing

00:18:32,650 --> 00:18:37,270
between your front end and your back end

00:18:34,390 --> 00:18:41,740
and you just need to say whether there

00:18:37,270 --> 00:18:45,789
was exactly singing on your page to the

00:18:41,740 --> 00:18:47,500
data from our API for example so when we

00:18:45,789 --> 00:18:50,020
do this thing we already talked to our

00:18:47,500 --> 00:18:53,799
front-end developer so kami has some I

00:18:50,020 --> 00:18:57,159
mean specific Casa name ID is easier for

00:18:53,799 --> 00:19:01,299
you to testing because even though this

00:18:57,159 --> 00:19:03,460
ability can Super X pass the X past can

00:19:01,299 --> 00:19:07,360
be very slow if you do that beta testing

00:19:03,460 --> 00:19:09,490
so I do suggest we can use ID or is a

00:19:07,360 --> 00:19:13,480
COS name your front-end and can be very

00:19:09,490 --> 00:19:16,120
helpful for BDD so we use a little bit

00:19:13,480 --> 00:19:18,610
BDD but a lot of times there's problems

00:19:16,120 --> 00:19:21,580
with the versions between Chrome and

00:19:18,610 --> 00:19:24,690
Firefox and whatever we're using for a

00:19:21,580 --> 00:19:27,130
CI how do you handle that

00:19:24,690 --> 00:19:29,210
you mean how to handle the errors in

00:19:27,130 --> 00:19:31,669
Chrome Firefox like

00:19:29,210 --> 00:19:33,980
that regards to versioning like how do

00:19:31,669 --> 00:19:37,610
you either keep everything up to date or

00:19:33,980 --> 00:19:39,529
keep everything into one version um like

00:19:37,610 --> 00:19:42,710
the whole sync with someone you because

00:19:39,529 --> 00:19:45,320
it's really so that's why we use the

00:19:42,710 --> 00:19:47,480
cross-platform - so like a sauce lever

00:19:45,320 --> 00:19:50,510
browser stack they well I handle those

00:19:47,480 --> 00:19:52,610
settings for you so the early when we do

00:19:50,510 --> 00:19:54,950
to see iock Travis we set up our

00:19:52,610 --> 00:19:56,960
versions you already we use the latest

00:19:54,950 --> 00:20:01,010
well a ladies version for the browser

00:19:56,960 --> 00:20:03,070
and if it's not compatible with the

00:20:01,010 --> 00:20:06,409
sanam they will give you the indication

00:20:03,070 --> 00:20:08,149
so like a above the stack or like

00:20:06,409 --> 00:20:11,240
browser stack it has a page for you to

00:20:08,149 --> 00:20:12,890
set up your browser version if the

00:20:11,240 --> 00:20:14,809
synonym is not compatible with those who

00:20:12,890 --> 00:20:19,250
version they'd want to show up so that's

00:20:14,809 --> 00:20:21,289
how we reference our settings you

00:20:19,250 --> 00:20:23,659
mentioned some weaknesses of BDD but

00:20:21,289 --> 00:20:26,360
what are some unique strengths of BDD do

00:20:23,659 --> 00:20:29,690
you guys - both BDD and then also unit

00:20:26,360 --> 00:20:33,140
testing or what combination is yeah but

00:20:29,690 --> 00:20:35,419
um so like what I said beauty is not

00:20:33,140 --> 00:20:37,100
everything so you have to do this in

00:20:35,419 --> 00:20:39,110
your testing functional testing before

00:20:37,100 --> 00:20:41,899
we can do BDD beauty is a company

00:20:39,110 --> 00:20:44,409
mentoring testing and didn't cover

00:20:41,899 --> 00:20:47,330
everything already

00:20:44,409 --> 00:20:49,340
we say something you may now say your

00:20:47,330 --> 00:20:52,159
front-end but you have to consider it

00:20:49,340 --> 00:20:55,039
like some error information going to

00:20:52,159 --> 00:20:57,010
survive in your page women are test the

00:20:55,039 --> 00:20:59,690
miscibility but you have to picture

00:20:57,010 --> 00:21:02,870
there are some proper showing up in your

00:20:59,690 --> 00:21:06,100
page just continuing on the last one how

00:21:02,870 --> 00:21:08,990
do you measure test coverage with Dave

00:21:06,100 --> 00:21:10,940
so yeah so that's why we need a

00:21:08,990 --> 00:21:14,330
description so the description will be

00:21:10,940 --> 00:21:16,490
measured by the user so actually it is

00:21:14,330 --> 00:21:18,380
kind of like a mixing with integration

00:21:16,490 --> 00:21:20,419
testing and a user acceptance testing

00:21:18,380 --> 00:21:24,380
and with the description has been

00:21:20,419 --> 00:21:26,630
approved you can just make sure you can

00:21:24,380 --> 00:21:28,490
make sure that your testing is covered

00:21:26,630 --> 00:21:30,200
especially for the user behaviors and

00:21:28,490 --> 00:21:31,880
they say that okay and that's what I

00:21:30,200 --> 00:21:35,090
want for performing the behaviors on

00:21:31,880 --> 00:21:37,279
your on your on your page then they said

00:21:35,090 --> 00:21:39,590
okay it's covered that's what we say so

00:21:37,279 --> 00:21:41,480
it's a purity user behave and the way

00:21:39,590 --> 00:21:42,260
owning tests against the requirements we

00:21:41,480 --> 00:21:49,549
collect

00:21:42,260 --> 00:21:51,630
so that's Anissa coverage well let's

00:21:49,549 --> 00:21:58,969
give a round of hand

00:21:51,630 --> 00:21:58,969

YouTube URL: https://www.youtube.com/watch?v=k-pQt9SwZec


