Title: DjangoCon US 2018 - Fundamentals of Kubernetes for Django developers by Graham Dumpleton
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - Fundamentals of Kubernetes for Django developers by Graham Dumpleton

A hot topic in recent years is running applications in containers. Tools such as docker and rkt have made deployment of applications using Linux containers easier, but they do not alone provide everything that is needed to easily manage many applications, or run containers at scale across a cluster of machines.

In this talk you will learn about the fundamental concepts and terminology of Kubernetes and why it is emerging as the de-facto standard for container orchestration and scheduling.

The talk will step through how to deploy to Kubernetes a Python web application, implemented using Django, as a way of seeing what happens under the covers when you do so.

This talk was presented at: https://2018.djangocon.us/talk/fundamentals-of-kubernetes-for-django/

LINKS:
Follow Graham Dumpleton ðŸ‘‡
On Twitter: https://twitter.com/GrahamDumpleton
Official homepage: http://blog.dscpl.com.au

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,859 --> 00:00:22,470
if you know for me who I am I am NOT a

00:00:19,170 --> 00:00:24,240
Django developer I know about the

00:00:22,470 --> 00:00:26,550
internals of Django hadn't had a deploy

00:00:24,240 --> 00:00:30,359
it but I don't actually have really had

00:00:26,550 --> 00:00:33,390
a write django apps so my history is I

00:00:30,359 --> 00:00:35,100
am the developer of mod whiskey for

00:00:33,390 --> 00:00:38,340
Apache for hosting whiskey applications

00:00:35,100 --> 00:00:40,500
with patchy also responsible for a

00:00:38,340 --> 00:00:43,469
Python package called wrapped which is

00:00:40,500 --> 00:00:46,320
for me decorators and you may also know

00:00:43,469 --> 00:00:48,629
of me from New Relic where I wrote the

00:00:46,320 --> 00:00:51,239
Python agent for New Relic and do lots

00:00:48,629 --> 00:00:52,949
of evil things to your Python code I

00:00:51,239 --> 00:00:56,460
don't work in New Relic now I currently

00:00:52,949 --> 00:00:58,829
work at openshift Red Hat where I am a

00:00:56,460 --> 00:01:04,439
developer advocate for kubernetes and

00:00:58,829 --> 00:01:11,060
openshift and I always have problem my

00:01:04,439 --> 00:01:11,060
pointer okay we'll go to backup plan

00:01:12,830 --> 00:01:18,570
that's better

00:01:15,090 --> 00:01:21,540
so kubernetes I don't know how many here

00:01:18,570 --> 00:01:23,040
are familiar with kubernetes anyone

00:01:21,540 --> 00:01:26,280
where I put their hands up and know

00:01:23,040 --> 00:01:28,500
about it okay so for those who have got

00:01:26,280 --> 00:01:32,460
into kubernetes already would be this be

00:01:28,500 --> 00:01:36,869
a fair explanation would you say it's

00:01:32,460 --> 00:01:39,060
more tears so Cuba is its it's an

00:01:36,869 --> 00:01:41,369
up-and-coming thing but it's a very

00:01:39,060 --> 00:01:43,860
large ecosystem and can be very very

00:01:41,369 --> 00:01:46,560
very confusing one you start to get it's

00:01:43,860 --> 00:01:48,509
a very large learning curve if we if we

00:01:46,560 --> 00:01:51,930
look at the like the landscape of what

00:01:48,509 --> 00:01:54,270
exists around kubernetes there is a lot

00:01:51,930 --> 00:01:56,490
a lot of stuff now saying to come around

00:01:54,270 --> 00:01:58,530
it they are software package you can you

00:01:56,490 --> 00:02:00,090
can use with kubernetes but also all the

00:01:58,530 --> 00:02:03,509
different companies of bringing stuff to

00:02:00,090 --> 00:02:05,880
it so there's a lot in that there which

00:02:03,509 --> 00:02:07,770
potentially could learn so it can

00:02:05,880 --> 00:02:09,479
depending on how deep you go into that

00:02:07,770 --> 00:02:12,060
it can you can get very very complicated

00:02:09,479 --> 00:02:13,890
and it's very mind blowing so if you are

00:02:12,060 --> 00:02:15,960
getting into it be patient we

00:02:13,890 --> 00:02:21,209
it can take a long time to to get up to

00:02:15,960 --> 00:02:24,390
speed on it to make it easier rather

00:02:21,209 --> 00:02:26,400
than just dry dive in and think okay

00:02:24,390 --> 00:02:28,520
I'll go and get original kubernetes

00:02:26,400 --> 00:02:31,590
distribution and start using that I

00:02:28,520 --> 00:02:33,870
strongly encourage you to look around at

00:02:31,590 --> 00:02:35,910
easier ways of getting into kubernetes

00:02:33,870 --> 00:02:38,550
and there's different ways there we've

00:02:35,910 --> 00:02:41,130
hosted versions of kubernetes and also

00:02:38,550 --> 00:02:42,750
distributions of kubernetes as a way to

00:02:41,130 --> 00:02:45,510
think about kubernetes it's like a

00:02:42,750 --> 00:02:48,570
kernel so whereas you got a Linux kernel

00:02:45,510 --> 00:02:50,610
which is the guts in there which helps

00:02:48,570 --> 00:02:52,560
you to run applications on a Linux

00:02:50,610 --> 00:02:54,870
operating system you're never going to

00:02:52,560 --> 00:02:56,580
install that kernel yourself it's always

00:02:54,870 --> 00:02:57,959
better to go get a distribution so

00:02:56,580 --> 00:03:01,670
you're always going to go get a bun to

00:02:57,959 --> 00:03:04,590
off door or CentOS Red Hat or other

00:03:01,670 --> 00:03:06,690
Linux distribution so it's better to go

00:03:04,590 --> 00:03:08,910
through that because they will provide

00:03:06,690 --> 00:03:11,400
you an experience which is going to

00:03:08,910 --> 00:03:13,200
provide extra bits on top of kubernetes

00:03:11,400 --> 00:03:15,480
is going to make your job easier to

00:03:13,200 --> 00:03:17,730
understand it and use it so think of

00:03:15,480 --> 00:03:19,260
kubernetes has been like a kernel and in

00:03:17,730 --> 00:03:21,420
this case it's going to be the kernel

00:03:19,260 --> 00:03:24,079
for a cluster of machines where you're

00:03:21,420 --> 00:03:27,000
going to want to deploy an application

00:03:24,079 --> 00:03:28,410
I'll say more about that later so

00:03:27,000 --> 00:03:30,329
stepping back there from that bit of

00:03:28,410 --> 00:03:32,700
warning about getting into kubernetes

00:03:30,329 --> 00:03:34,650
and where you should perhaps go to start

00:03:32,700 --> 00:03:36,510
looking at it what exactly we're talking

00:03:34,650 --> 00:03:38,880
about no we are talking about containers

00:03:36,510 --> 00:03:40,650
now we all heard the containers now is -

00:03:38,880 --> 00:03:42,079
it's the big buzzword from the last few

00:03:40,650 --> 00:03:44,190
years

00:03:42,079 --> 00:03:46,470
containers has actually been around for

00:03:44,190 --> 00:03:49,739
quite a long time Google in their

00:03:46,470 --> 00:03:52,140
infrastructure has been using containers

00:03:49,739 --> 00:03:56,390
since about 2002 2003 I can't remember

00:03:52,140 --> 00:03:59,640
exactly when but even before that it was

00:03:56,390 --> 00:04:00,780
the single source of ideas of what you

00:03:59,640 --> 00:04:03,120
were doing talking about with containers

00:04:00,780 --> 00:04:06,750
existed in the form of chroot jails in

00:04:03,120 --> 00:04:09,329
BSD and also Solaris zones so they're

00:04:06,750 --> 00:04:11,760
not a new concept but containers are a

00:04:09,329 --> 00:04:13,950
thing that has come more popular of late

00:04:11,760 --> 00:04:16,140
and it was became popular because of our

00:04:13,950 --> 00:04:18,539
company which when they announced it was

00:04:16,140 --> 00:04:22,380
called cloud but you'll know them as

00:04:18,539 --> 00:04:25,860
docker so this company called doc cloud

00:04:22,380 --> 00:04:27,070
at PyCon at Santa Clara in a lightning

00:04:25,860 --> 00:04:29,080
talk

00:04:27,070 --> 00:04:31,120
a really simple way of running up an

00:04:29,080 --> 00:04:35,140
application inside of what we call a

00:04:31,120 --> 00:04:36,580
container so what is a container easiest

00:04:35,140 --> 00:04:38,290
way to think about it is to compare in

00:04:36,580 --> 00:04:41,080
terms of what we've done in the past

00:04:38,290 --> 00:04:42,970
if you familiar with virtualization in

00:04:41,080 --> 00:04:46,330
the idea of running an operating system

00:04:42,970 --> 00:04:48,010
inside a sandbox on your operating

00:04:46,330 --> 00:04:51,460
system so I might have a Mac and I want

00:04:48,010 --> 00:04:53,470
to run Windows or Linux I can install a

00:04:51,460 --> 00:04:54,580
version of an operating system we know

00:04:53,470 --> 00:04:56,860
that all Linux

00:04:54,580 --> 00:04:59,410
inside a virtual environment virtual

00:04:56,860 --> 00:05:01,510
machine I might box in little sandbox

00:04:59,410 --> 00:05:03,000
and uncap quite happy to work away in

00:05:01,510 --> 00:05:05,920
that and I could actually install

00:05:03,000 --> 00:05:07,900
multiple operating systems mobile users

00:05:05,920 --> 00:05:10,630
of Windows or a mix of Windows and Linux

00:05:07,900 --> 00:05:12,820
and then in size that I can run an

00:05:10,630 --> 00:05:15,180
application and it's providing a sandbox

00:05:12,820 --> 00:05:18,820
environment where you can run stuff and

00:05:15,180 --> 00:05:21,790
kept away and it's isolated from your

00:05:18,820 --> 00:05:23,170
host operating system but also your

00:05:21,790 --> 00:05:25,180
other operating system running in a

00:05:23,170 --> 00:05:28,870
separate virtual environment or virtual

00:05:25,180 --> 00:05:33,460
machine so containers the idea behind

00:05:28,870 --> 00:05:35,860
them is a lightweight way of running up

00:05:33,460 --> 00:05:38,950
an application inside of a container or

00:05:35,860 --> 00:05:41,560
sandbox on a host operating system now

00:05:38,950 --> 00:05:44,200
the difference from traditional virtual

00:05:41,560 --> 00:05:46,090
machines is that in a traditional

00:05:44,200 --> 00:05:48,940
virtual machine you are running a whole

00:05:46,090 --> 00:05:52,210
operating system inside that sandbox and

00:05:48,940 --> 00:05:54,250
then you're running your apps so you've

00:05:52,210 --> 00:05:55,900
got a whole lot of application services

00:05:54,250 --> 00:05:58,480
in your system services in there for

00:05:55,900 --> 00:06:02,560
that operating system and as well as

00:05:58,480 --> 00:06:04,900
your application in a container you are

00:06:02,560 --> 00:06:06,730
take making use of the fact you've got a

00:06:04,900 --> 00:06:09,010
host operating system running under all

00:06:06,730 --> 00:06:11,170
underneath already and you're going to

00:06:09,010 --> 00:06:14,440
run just the processes for your

00:06:11,170 --> 00:06:17,020
application in that sandbox so you're

00:06:14,440 --> 00:06:19,420
not going to run additional processes in

00:06:17,020 --> 00:06:22,090
there for system services it's just the

00:06:19,420 --> 00:06:23,710
processes for your application so with a

00:06:22,090 --> 00:06:25,660
django conference so in this case we're

00:06:23,710 --> 00:06:28,180
talking about jan your web application

00:06:25,660 --> 00:06:30,070
so you might be running your django epic

00:06:28,180 --> 00:06:32,340
avocation under modern whisky which I

00:06:30,070 --> 00:06:34,960
hope you are but I know you're not

00:06:32,340 --> 00:06:37,300
you're probably using us Georg unicorn

00:06:34,960 --> 00:06:39,160
I'm sure so all you're doing is you're

00:06:37,300 --> 00:06:41,169
running that whiskey server inside of

00:06:39,160 --> 00:06:44,080
that container with your Django

00:06:41,169 --> 00:06:46,599
application unit okay but because it's

00:06:44,080 --> 00:06:48,969
in this containerized environment it's

00:06:46,599 --> 00:06:51,819
still protected you know if you I get in

00:06:48,969 --> 00:06:54,699
to that container all I can see is those

00:06:51,819 --> 00:06:58,090
processes for that application I cannot

00:06:54,699 --> 00:06:59,560
see operating system services in the

00:06:58,090 --> 00:07:01,210
underlying host operating system and I

00:06:59,560 --> 00:07:04,749
can't see applications inside of other

00:07:01,210 --> 00:07:06,939
containers so it's protecting things so

00:07:04,749 --> 00:07:08,650
that's what it is and it's meant to be

00:07:06,939 --> 00:07:10,270
this more lightweight thing because

00:07:08,650 --> 00:07:12,099
we're not starting up a whole operating

00:07:10,270 --> 00:07:13,360
system it's much quicker you and you

00:07:12,099 --> 00:07:17,949
need to start up your just your

00:07:13,360 --> 00:07:19,029
processes now to run off something in

00:07:17,949 --> 00:07:21,039
the container

00:07:19,029 --> 00:07:24,069
what docker did in terms of what they

00:07:21,039 --> 00:07:26,229
announced was they provide a couple of

00:07:24,069 --> 00:07:28,629
things and it's all focused around

00:07:26,229 --> 00:07:30,159
hauling a container as I said and not a

00:07:28,629 --> 00:07:32,650
new thing they've existed for a long

00:07:30,159 --> 00:07:34,449
time and the way you use them normally

00:07:32,650 --> 00:07:36,310
is using what's called Linux containers

00:07:34,449 --> 00:07:38,169
or Aleksey so there is this way of

00:07:36,310 --> 00:07:40,599
running up processes in constrained

00:07:38,169 --> 00:07:42,819
environments on the operating system but

00:07:40,599 --> 00:07:44,199
that was always a difficult thing docker

00:07:42,819 --> 00:07:46,500
made it quite simple because they

00:07:44,199 --> 00:07:49,360
provided this program called docker and

00:07:46,500 --> 00:07:52,000
there was two important things for that

00:07:49,360 --> 00:07:54,460
there was one which was docker build

00:07:52,000 --> 00:07:55,839
command and the idea there she could

00:07:54,460 --> 00:07:58,870
provide out what was called a docker

00:07:55,839 --> 00:08:03,310
file with a set of instructions of how

00:07:58,870 --> 00:08:05,649
to build a image which contained all the

00:08:03,310 --> 00:08:07,240
bits and pieces you need so you start

00:08:05,649 --> 00:08:10,479
out with a base image for the operating

00:08:07,240 --> 00:08:12,520
system so might be a 1 2 and then you'll

00:08:10,479 --> 00:08:15,490
add your instructions on top of how to

00:08:12,520 --> 00:08:17,439
actually install your application with

00:08:15,490 --> 00:08:19,389
all the dependencies it needs all the

00:08:17,439 --> 00:08:23,589
different Python packages into that they

00:08:19,389 --> 00:08:25,899
all get built into an image you want to

00:08:23,589 --> 00:08:27,339
then run that image and we can run that

00:08:25,899 --> 00:08:29,259
up on their box but what usually is

00:08:27,339 --> 00:08:31,270
going to happen is we're going to push

00:08:29,259 --> 00:08:34,390
that image up into what's called an

00:08:31,270 --> 00:08:36,880
image registry once you've got an image

00:08:34,390 --> 00:08:39,870
registry we can then do docker run and

00:08:36,880 --> 00:08:41,949
we run it up and away we go

00:08:39,870 --> 00:08:45,010
so that's what they made a very simple

00:08:41,949 --> 00:08:47,470
process to do before that using LXE was

00:08:45,010 --> 00:08:49,029
a lot of different steps to do that the

00:08:47,470 --> 00:08:50,949
docker run command when we take that

00:08:49,029 --> 00:08:53,199
image is going to do a lot of work to

00:08:50,949 --> 00:08:54,600
create that sandbox environment for you

00:08:53,199 --> 00:08:56,190
but

00:08:54,600 --> 00:08:58,110
even though we talked about docker it's

00:08:56,190 --> 00:08:59,880
still underneath using Linux containers

00:08:58,110 --> 00:09:01,620
it's using the features of the operating

00:08:59,880 --> 00:09:06,649
system docker was just bringing the

00:09:01,620 --> 00:09:09,990
tooling to make that easy to do now

00:09:06,649 --> 00:09:12,360
running single containers with your

00:09:09,990 --> 00:09:15,600
application we can do that you can get

00:09:12,360 --> 00:09:18,270
it working okay better ways of doing you

00:09:15,600 --> 00:09:20,760
can be happy the problems occur when we

00:09:18,270 --> 00:09:23,520
start to want to run many many

00:09:20,760 --> 00:09:26,730
containers especially if we want to run

00:09:23,520 --> 00:09:29,070
across multiple hosts because we can

00:09:26,730 --> 00:09:30,660
only scale-up applications the number of

00:09:29,070 --> 00:09:32,670
instances or replicas of that

00:09:30,660 --> 00:09:34,290
application we were around on the single

00:09:32,670 --> 00:09:36,480
hosts so far we're going to run out of

00:09:34,290 --> 00:09:39,089
resources so we need to start to put

00:09:36,480 --> 00:09:41,070
them across hosts now docker was great

00:09:39,089 --> 00:09:44,100
for running up an application in

00:09:41,070 --> 00:09:45,630
container on one machine when we start

00:09:44,100 --> 00:09:47,459
to go beyond that one machine that's

00:09:45,630 --> 00:09:50,010
where it got stuff to get more difficult

00:09:47,459 --> 00:09:52,290
because you had to start tracking oh I

00:09:50,010 --> 00:09:54,839
need to run ten instances to this I can

00:09:52,290 --> 00:09:56,610
only fit five on this host okay so I

00:09:54,839 --> 00:09:58,380
rerouted five here I have to remember

00:09:56,610 --> 00:10:01,650
I've got five here after run five over

00:09:58,380 --> 00:10:03,990
here but then I've got all these

00:10:01,650 --> 00:10:05,370
different instances of them and they all

00:10:03,990 --> 00:10:08,850
going to listen they all expect to

00:10:05,370 --> 00:10:10,320
listen on port 80 so HTTP traffic but

00:10:08,850 --> 00:10:12,180
they can't all this into port 80 because

00:10:10,320 --> 00:10:14,010
they're on the same host so we need to

00:10:12,180 --> 00:10:15,990
worry about port assignments and put

00:10:14,010 --> 00:10:17,220
them all on different ports but then you

00:10:15,990 --> 00:10:18,600
have to worry about well how do i

00:10:17,220 --> 00:10:20,250
distribute traffic you have to start

00:10:18,600 --> 00:10:22,200
putting load balancers across it and

00:10:20,250 --> 00:10:24,150
distribute traffic so very very quickly

00:10:22,200 --> 00:10:25,680
starts become very complicated to be

00:10:24,150 --> 00:10:28,970
able to do that all yourself and track

00:10:25,680 --> 00:10:31,890
it and this is where kubernetes comes in

00:10:28,970 --> 00:10:34,620
give me a guess as my kernel as I

00:10:31,890 --> 00:10:37,380
mentioned before is a means of managing

00:10:34,620 --> 00:10:40,110
the deployment of applications inside

00:10:37,380 --> 00:10:43,950
containers distributed across a cluster

00:10:40,110 --> 00:10:46,410
of machines or what we call nodes so

00:10:43,950 --> 00:10:49,140
typical communities cluster what you'll

00:10:46,410 --> 00:10:51,300
have is some master nodes I've got one

00:10:49,140 --> 00:10:53,070
here but if we talk about fault tolerant

00:10:51,300 --> 00:10:56,070
or high availability systems you'll

00:10:53,070 --> 00:10:57,570
actually have three at least an odd

00:10:56,070 --> 00:10:59,279
number and you may have other

00:10:57,570 --> 00:11:01,230
infrastructure noise in there which have

00:10:59,279 --> 00:11:03,089
other bits of pieces like the router but

00:11:01,230 --> 00:11:04,230
I've simplifies this I've got one master

00:11:03,089 --> 00:11:07,980
node and I'm saying everything's running

00:11:04,230 --> 00:11:10,140
on there that's a smart main smart of of

00:11:07,980 --> 00:11:13,230
communities that's where the database is

00:11:10,140 --> 00:11:15,810
they're tracking how what we're

00:11:13,230 --> 00:11:17,610
deploying and so on and also router and

00:11:15,810 --> 00:11:18,900
other bits and pieces and then we all

00:11:17,610 --> 00:11:22,860
have our nodes that's where your

00:11:18,900 --> 00:11:24,360
applications are going to run so that's

00:11:22,860 --> 00:11:27,360
what kuba DS is going to do it provides

00:11:24,360 --> 00:11:29,400
that ability so in this talk I'm not

00:11:27,360 --> 00:11:31,470
going to delve down too into the depths

00:11:29,400 --> 00:11:34,110
of what how kubernetes works I'm just

00:11:31,470 --> 00:11:35,850
going to step through and running a or

00:11:34,110 --> 00:11:38,670
deploying an application inside of

00:11:35,850 --> 00:11:40,470
kubernetes using communities command

00:11:38,670 --> 00:11:42,390
line tool and I'm gonna use that as a

00:11:40,470 --> 00:11:45,300
means to just introduce different

00:11:42,390 --> 00:11:47,400
concepts of kubernetes so that if you

00:11:45,300 --> 00:11:48,870
are going into communities at least then

00:11:47,400 --> 00:11:50,760
you've heard what these concepts are

00:11:48,870 --> 00:11:53,210
once it before at least and they might

00:11:50,760 --> 00:11:55,950
make a bit more sense to you

00:11:53,210 --> 00:11:57,930
so deploying we've already built our

00:11:55,950 --> 00:11:59,670
image with docker build for example we

00:11:57,930 --> 00:12:01,320
have it already up in an image registry

00:11:59,670 --> 00:12:03,510
somewhere and a popular place that

00:12:01,320 --> 00:12:06,570
people do store images up a place called

00:12:03,510 --> 00:12:08,850
docker hub as a public image registry

00:12:06,570 --> 00:12:11,370
which was run recently created by the

00:12:08,850 --> 00:12:13,020
docker company inc but there are other

00:12:11,370 --> 00:12:15,840
image registries you can run your own as

00:12:13,020 --> 00:12:19,080
well so if I want to run up an image

00:12:15,840 --> 00:12:20,940
inside of kubernetes so if you're using

00:12:19,080 --> 00:12:23,280
docker I'd use docker run here I'm just

00:12:20,940 --> 00:12:25,770
going to use cube cuttle run it's a very

00:12:23,280 --> 00:12:27,600
very similar I want to name that so my

00:12:25,770 --> 00:12:30,690
I'm going to name my application blog I

00:12:27,600 --> 00:12:32,400
tell it with my images and I tell it the

00:12:30,690 --> 00:12:34,620
port that I need to expose if you've

00:12:32,400 --> 00:12:37,080
used docker before you'll see very very

00:12:34,620 --> 00:12:39,060
similar to docker run the difference is

00:12:37,080 --> 00:12:41,010
that if I use docker run it's going to

00:12:39,060 --> 00:12:42,540
run it on my own machine where the

00:12:41,010 --> 00:12:45,630
docker service is all the one you've

00:12:42,540 --> 00:12:47,580
logged into here because we've got a

00:12:45,630 --> 00:12:50,070
cluster of machines and I've just said

00:12:47,580 --> 00:12:51,720
ok I want to run run instance kubernetes

00:12:50,070 --> 00:12:55,050
is going to go okay I've got a cluster

00:12:51,720 --> 00:12:57,720
of machines I can run this on it will go

00:12:55,050 --> 00:12:59,670
and work out for us where to run it and

00:12:57,720 --> 00:13:06,240
make a decision for us and get it up and

00:12:59,670 --> 00:13:08,250
running now when we do that there's

00:13:06,240 --> 00:13:10,110
actually like when we run docker run

00:13:08,250 --> 00:13:11,460
it's actually taking an action of doing

00:13:10,110 --> 00:13:13,650
that it's actually going to essentially

00:13:11,460 --> 00:13:15,480
go right through and run it up and start

00:13:13,650 --> 00:13:16,250
it kubernetes works a bit different to

00:13:15,480 --> 00:13:18,870
hotdoggers

00:13:16,250 --> 00:13:21,840
when I run that docker run command it's

00:13:18,870 --> 00:13:23,910
not actually really starting things up

00:13:21,840 --> 00:13:26,070
what it's actually doing is going to set

00:13:23,910 --> 00:13:29,040
up some configuration and if we actually

00:13:26,070 --> 00:13:30,960
run that same command and put dry run

00:13:29,040 --> 00:13:32,970
- output yam will fall in there you can

00:13:30,960 --> 00:13:35,460
see what it's doing what all it's

00:13:32,970 --> 00:13:37,680
actually going to do is create a yeah

00:13:35,460 --> 00:13:40,050
more description of what it is I want

00:13:37,680 --> 00:13:42,510
deployed and that's actually going to be

00:13:40,050 --> 00:13:44,580
stuck inside of what's called a data

00:13:42,510 --> 00:13:47,250
store inside of kubernetes which

00:13:44,580 --> 00:13:48,750
actually uses a CD and that's

00:13:47,250 --> 00:13:50,580
effectively all it's going to do that's

00:13:48,750 --> 00:13:54,030
all the command does updates that

00:13:50,580 --> 00:13:55,890
database of information where kubernetes

00:13:54,030 --> 00:13:57,660
works is what's calling declarative

00:13:55,890 --> 00:13:58,860
model so rather than actually you do

00:13:57,660 --> 00:13:59,520
something that causes an action

00:13:58,860 --> 00:14:00,990
immediately

00:13:59,520 --> 00:14:03,530
all you're doing is updating

00:14:00,990 --> 00:14:05,750
configuration of what I want my

00:14:03,530 --> 00:14:08,250
application and deployment to look like

00:14:05,750 --> 00:14:10,200
who knows comes along as he's always

00:14:08,250 --> 00:14:11,700
checking these configuration objects

00:14:10,200 --> 00:14:13,860
which exists inside of the database

00:14:11,700 --> 00:14:16,050
again oh I've got a new configuration

00:14:13,860 --> 00:14:18,990
object or a configuration object has

00:14:16,050 --> 00:14:20,670
changed and I need to now go make the

00:14:18,990 --> 00:14:22,170
cluster or what you wanted for your

00:14:20,670 --> 00:14:24,000
deployment like what you have in the

00:14:22,170 --> 00:14:27,570
cluster agree with what their

00:14:24,000 --> 00:14:29,760
configuration says so because it's a new

00:14:27,570 --> 00:14:32,280
one communities go good oh you could

00:14:29,760 --> 00:14:34,500
deployment configuration I'll go and do

00:14:32,280 --> 00:14:36,930
the steps needed to actually satisfy

00:14:34,500 --> 00:14:39,840
what your configuration says so in this

00:14:36,930 --> 00:14:41,550
case a deployment it was given a name it

00:14:39,840 --> 00:14:43,830
was given some labels automatically to

00:14:41,550 --> 00:14:46,950
help us identify our configuration later

00:14:43,830 --> 00:14:48,180
on which is very important had a number

00:14:46,950 --> 00:14:51,090
of instances which was just one

00:14:48,180 --> 00:14:55,590
initially and we have a description of

00:14:51,090 --> 00:14:57,180
container of what now we image and our

00:14:55,590 --> 00:14:57,960
imaged which we're going to run inside

00:14:57,180 --> 00:15:01,050
of that container

00:14:57,960 --> 00:15:02,640
okay so Kiba knees will go off and run

00:15:01,050 --> 00:15:03,930
up an instance of that for me I've told

00:15:02,640 --> 00:15:08,160
it I didn't want one so it'll go into

00:15:03,930 --> 00:15:11,430
one I can then query back once I've done

00:15:08,160 --> 00:15:13,620
that I can create do a query back of the

00:15:11,430 --> 00:15:15,360
resources which we've created and you'll

00:15:13,620 --> 00:15:17,340
actually see my deployment day.you but

00:15:15,360 --> 00:15:19,650
actually see some other resources

00:15:17,340 --> 00:15:21,660
created there as well and this is where

00:15:19,650 --> 00:15:24,510
my command only created one the

00:15:21,660 --> 00:15:27,030
deployment but communities a stepped in

00:15:24,510 --> 00:15:29,190
said ok to satisfy your requirement of

00:15:27,030 --> 00:15:30,330
having your deployment well actually

00:15:29,190 --> 00:15:33,060
need to go and create some other

00:15:30,330 --> 00:15:34,550
resource objects in there more

00:15:33,060 --> 00:15:36,730
configuration

00:15:34,550 --> 00:15:40,430
first one is what's called a replica set

00:15:36,730 --> 00:15:43,160
it's the thing which is going to manage

00:15:40,430 --> 00:15:45,370
your instances of replication and so so

00:15:43,160 --> 00:15:47,450
it pulls out of that deployment config

00:15:45,370 --> 00:15:49,610
information about the number of replicas

00:15:47,450 --> 00:15:51,110
you we needed the description of the

00:15:49,610 --> 00:15:53,200
container and the image that you need to

00:15:51,110 --> 00:15:55,880
run it's created a replica set for me

00:15:53,200 --> 00:15:58,070
there's an aspect of communities which

00:15:55,880 --> 00:16:00,589
sits in there looks for now for replicas

00:15:58,070 --> 00:16:03,230
sets when it sees that's created it goes

00:16:00,589 --> 00:16:05,060
oh I need to now do something based on

00:16:03,230 --> 00:16:07,190
this replica set so it pulls out the

00:16:05,060 --> 00:16:08,959
description into container it knows only

00:16:07,190 --> 00:16:13,190
one twin instance and it creates what's

00:16:08,959 --> 00:16:16,060
called a pot now pod I mentioned

00:16:13,190 --> 00:16:19,430
containers well what's the relationship

00:16:16,060 --> 00:16:22,820
normally when I say container pot is the

00:16:19,430 --> 00:16:25,339
same thing but in effect a pod can be

00:16:22,820 --> 00:16:27,950
one or more containers so when we talked

00:16:25,339 --> 00:16:29,630
about our description back there you can

00:16:27,950 --> 00:16:31,790
see our containers in our gamal

00:16:29,630 --> 00:16:33,529
description was actually a list but I'm

00:16:31,790 --> 00:16:35,089
only describing one so technically I can

00:16:33,529 --> 00:16:37,970
have more than one container in what's

00:16:35,089 --> 00:16:41,480
called a pot this name pod where does it

00:16:37,970 --> 00:16:43,310
come from pod of whales and docker well

00:16:41,480 --> 00:16:45,770
they had their logo over whale so that's

00:16:43,310 --> 00:16:47,420
where the naming come from but you can

00:16:45,770 --> 00:16:53,149
more or less think about a pod as being

00:16:47,420 --> 00:16:55,190
a container most of the time so now I've

00:16:53,149 --> 00:16:56,959
introduced a deployment that triggers

00:16:55,190 --> 00:16:58,880
the creation of a replica set and I've

00:16:56,959 --> 00:17:03,680
got a pod which is my running instance

00:16:58,880 --> 00:17:05,449
in my container I if I now - need to

00:17:03,680 --> 00:17:08,390
look at what my application is doing I

00:17:05,449 --> 00:17:10,579
can use that pod as the name of that pod

00:17:08,390 --> 00:17:12,199
as a means of getting out say logs find

00:17:10,579 --> 00:17:17,360
out what happened when application

00:17:12,199 --> 00:17:23,360
started up but more importantly is if I

00:17:17,360 --> 00:17:24,620
want to scale it what happens then if I

00:17:23,360 --> 00:17:27,050
want to scale this command called coop

00:17:24,620 --> 00:17:29,510
cuddle scale and I can actually refer to

00:17:27,050 --> 00:17:31,760
my deployment confi for that and I say I

00:17:29,510 --> 00:17:34,070
know you want have two replicas of my

00:17:31,760 --> 00:17:36,169
application and all again this has gone

00:17:34,070 --> 00:17:38,510
back all ganda back has changed that

00:17:36,169 --> 00:17:40,400
deployment config kubernetes has knows

00:17:38,510 --> 00:17:41,870
the change in the configuration it says

00:17:40,400 --> 00:17:44,419
I need to now make the cluster match

00:17:41,870 --> 00:17:47,000
that so it'll go and update the replica

00:17:44,419 --> 00:17:48,870
set say I've got two replicas and then

00:17:47,000 --> 00:17:51,660
control for that looking at

00:17:48,870 --> 00:17:56,760
kicks in and goes up to I'll create

00:17:51,660 --> 00:17:58,710
another pod for you and kuba reasons

00:17:56,760 --> 00:18:04,140
once again making decisions for you

00:17:58,710 --> 00:18:06,720
about where it's going to run them now

00:18:04,140 --> 00:18:09,090
if I come along and delete a pod it's

00:18:06,720 --> 00:18:11,400
just a configuration object so I can

00:18:09,090 --> 00:18:12,840
delete that configuration object now

00:18:11,400 --> 00:18:15,240
this is where the power of kubernetes

00:18:12,840 --> 00:18:19,559
comes in I have to leave that cubing it

00:18:15,240 --> 00:18:21,360
that pod object and because that pod

00:18:19,559 --> 00:18:22,670
script that that particular pod

00:18:21,360 --> 00:18:24,900
configuration object has gone away

00:18:22,670 --> 00:18:27,090
community says oh you don't want that

00:18:24,900 --> 00:18:28,980
anymore it will actually shut down that

00:18:27,090 --> 00:18:32,250
terminate that container shut down your

00:18:28,980 --> 00:18:33,960
application and it'll go away but some

00:18:32,250 --> 00:18:36,300
things on magics going to happen now you

00:18:33,960 --> 00:18:39,240
said that you wanted two instances your

00:18:36,300 --> 00:18:42,030
application now that is the truth you

00:18:39,240 --> 00:18:43,800
always want to I deleted one pod so what

00:18:42,030 --> 00:18:46,620
happens is that even though I delete it

00:18:43,800 --> 00:18:48,960
and to community shuts it down

00:18:46,620 --> 00:18:50,790
it knows I wanted to so what happens it

00:18:48,960 --> 00:18:51,470
goes and gives me another one back in

00:18:50,790 --> 00:18:54,990
its place

00:18:51,470 --> 00:18:56,790
so I deleted the pod here explicitly but

00:18:54,990 --> 00:18:59,340
if this was your application your

00:18:56,790 --> 00:19:01,110
application had actually crashed and the

00:18:59,340 --> 00:19:04,530
whole server accident and so that

00:19:01,110 --> 00:19:06,150
container had exited you out your

00:19:04,530 --> 00:19:07,370
application will replace for you

00:19:06,150 --> 00:19:09,870
automatically

00:19:07,370 --> 00:19:12,210
if I just run docker run command and

00:19:09,870 --> 00:19:14,960
don't do anything extra and my pod stops

00:19:12,210 --> 00:19:16,800
it's gone it's not there anymore

00:19:14,960 --> 00:19:18,630
communities in this case would replace

00:19:16,800 --> 00:19:22,860
it for you and keep things running for

00:19:18,630 --> 00:19:24,240
you now you mentioned for that women

00:19:22,860 --> 00:19:26,490
communities is running at a cluster of

00:19:24,240 --> 00:19:29,730
machines so take an example if I lose a

00:19:26,490 --> 00:19:31,800
whole machine now kubernetes will notice

00:19:29,730 --> 00:19:33,750
I've lost a whole machine all those pods

00:19:31,800 --> 00:19:36,570
effectively invisible to it and now

00:19:33,750 --> 00:19:39,240
again it will notice this and will start

00:19:36,570 --> 00:19:41,610
up new instances your application for

00:19:39,240 --> 00:19:44,130
you on other nodes in that cluster or

00:19:41,610 --> 00:19:46,020
all automatically so you're now not

00:19:44,130 --> 00:19:48,570
gonna have a problem with if you've got

00:19:46,020 --> 00:19:49,740
a very basic system of getting a page at

00:19:48,570 --> 00:19:51,480
free a and the morning C your

00:19:49,740 --> 00:19:53,280
application is down kubernetes will

00:19:51,480 --> 00:19:58,020
worry about keeping things urgent

00:19:53,280 --> 00:20:00,240
running for you so we have pods that is

00:19:58,020 --> 00:20:02,220
their application effectively if I do

00:20:00,240 --> 00:20:04,080
query on those pods I

00:20:02,220 --> 00:20:07,679
get back and I'll find that each of them

00:20:04,080 --> 00:20:10,740
has an IP address when I run docker on a

00:20:07,679 --> 00:20:13,320
box with my by myself and I need

00:20:10,740 --> 00:20:16,650
multiple instances there is that whole

00:20:13,320 --> 00:20:19,530
host is one IP address in case of a pod

00:20:16,650 --> 00:20:21,150
each pod has an own separate IP address

00:20:19,530 --> 00:20:23,220
so it's like a little host of its own

00:20:21,150 --> 00:20:26,340
even though they may be running on the

00:20:23,220 --> 00:20:28,289
same underlying host each has their own

00:20:26,340 --> 00:20:31,890
IP address and this is very important

00:20:28,289 --> 00:20:35,190
because example for about running having

00:20:31,890 --> 00:20:36,510
to keep track of is your app all running

00:20:35,190 --> 00:20:39,240
on the same host if you're doing using

00:20:36,510 --> 00:20:40,740
docker you can all use port 80 so you

00:20:39,240 --> 00:20:42,929
have to have this one has to run port 80

00:20:40,740 --> 00:20:45,210
this one has to run port 81 this one 82

00:20:42,929 --> 00:20:48,360
because each one has its own IP address

00:20:45,210 --> 00:20:50,130
it also has its own port namespace this

00:20:48,360 --> 00:20:51,990
means they can all run on port 80 and

00:20:50,130 --> 00:20:56,700
they don't have a problem having to

00:20:51,990 --> 00:20:59,039
track all that now those IP addresses if

00:20:56,700 --> 00:21:01,860
I take that IP address and try to access

00:20:59,039 --> 00:21:02,659
that from my Marian medical machine that

00:21:01,860 --> 00:21:05,100
will not work

00:21:02,659 --> 00:21:09,330
these are IP addresses which are

00:21:05,100 --> 00:21:10,110
internal to the cluster only so how do I

00:21:09,330 --> 00:21:12,720
access it

00:21:10,110 --> 00:21:14,280
I got multiple instances and that's a

00:21:12,720 --> 00:21:16,049
problem because I only want one entry

00:21:14,280 --> 00:21:20,309
point and I can't even access from

00:21:16,049 --> 00:21:22,380
outside the cluster so just to prove

00:21:20,309 --> 00:21:25,049
that they do work though you can't

00:21:22,380 --> 00:21:26,220
actually get into a pod so one way of

00:21:25,049 --> 00:21:28,590
getting into pole is very similar to

00:21:26,220 --> 00:21:30,809
docker you can go docker exact same

00:21:28,590 --> 00:21:32,789
thing communities and go to petal exec

00:21:30,809 --> 00:21:34,650
and get into pod I can use an IP address

00:21:32,789 --> 00:21:37,679
but I said it's not useful there outside

00:21:34,650 --> 00:21:41,010
of the cluster so what we need to do is

00:21:37,679 --> 00:21:43,320
we first off is we need to somehow come

00:21:41,010 --> 00:21:45,750
up with a single IP address for all of

00:21:43,320 --> 00:21:48,059
these instances and that's done using

00:21:45,750 --> 00:21:50,760
what's called by creating a service of

00:21:48,059 --> 00:21:54,419
resource object and we can do that using

00:21:50,760 --> 00:21:57,330
coop cuddle expose command so we exposed

00:21:54,419 --> 00:22:00,179
our deployment for a blog that creates a

00:21:57,330 --> 00:22:02,789
service object and it's created a new IP

00:22:00,179 --> 00:22:06,059
address in this case we have one IP

00:22:02,789 --> 00:22:07,860
address and what's actually doing under

00:22:06,059 --> 00:22:09,720
the covers and how this works returns a

00:22:07,860 --> 00:22:12,690
bit on how the kubernetes cluster set up

00:22:09,720 --> 00:22:15,870
but it's setting up an IP router so I've

00:22:12,690 --> 00:22:18,150
now got one IP address and if I

00:22:15,870 --> 00:22:20,640
that IP address the traffic will go to

00:22:18,150 --> 00:22:22,440
one of the instances of the pot so it's

00:22:20,640 --> 00:22:26,160
handling that load balancing for me

00:22:22,440 --> 00:22:28,260
across all of those instances but that

00:22:26,160 --> 00:22:32,040
IP address is still not accessible

00:22:28,260 --> 00:22:34,890
outside of the cluster that IP address

00:22:32,040 --> 00:22:38,160
so we'll have a host name communities

00:22:34,890 --> 00:22:40,320
has an internal DNS server so when that

00:22:38,160 --> 00:22:42,330
is created that IP address has a host

00:22:40,320 --> 00:22:45,240
name of blog because that's what my

00:22:42,330 --> 00:22:46,620
service was created yes so if I need to

00:22:45,240 --> 00:22:49,380
access that internally so it was a

00:22:46,620 --> 00:22:51,059
back-end service like a back in service

00:22:49,380 --> 00:22:52,410
for your not a database because that's a

00:22:51,059 --> 00:22:55,590
bad example cuz you don't have multiple

00:22:52,410 --> 00:22:57,030
instances but if I need to access it I

00:22:55,590 --> 00:22:59,280
can just use that as a host name so I

00:22:57,030 --> 00:23:01,080
don't have to hardware host names but to

00:22:59,280 --> 00:23:04,500
get access to this outside there a few

00:23:01,080 --> 00:23:06,330
different methods you can use kubernetes

00:23:04,500 --> 00:23:09,690
sports the idea of wet exposing a

00:23:06,330 --> 00:23:12,630
service you can call it expose it as

00:23:09,690 --> 00:23:14,220
what's called a node port service now

00:23:12,630 --> 00:23:16,620
that by default when I created it was a

00:23:14,220 --> 00:23:19,500
what's called a cluster IP so for node

00:23:16,620 --> 00:23:21,660
port it will automatically can create

00:23:19,500 --> 00:23:23,580
you access to or from outside your

00:23:21,660 --> 00:23:26,580
cluster but no ports all that's going to

00:23:23,580 --> 00:23:27,960
do is give you a magic port number to

00:23:26,580 --> 00:23:30,630
access it's not going to be the port

00:23:27,960 --> 00:23:32,910
number you originally expose so it can't

00:23:30,630 --> 00:23:34,950
be port 80 for example it's going to be

00:23:32,910 --> 00:23:36,420
a random port which is not very useful

00:23:34,950 --> 00:23:38,070
to as if we're gonna have a web service

00:23:36,420 --> 00:23:40,800
because we need them to be on port 80 or

00:23:38,070 --> 00:23:41,790
for for free the next option is you can

00:23:40,800 --> 00:23:45,690
use what's called a load balancer

00:23:41,790 --> 00:23:47,640
service this one the underlying

00:23:45,690 --> 00:23:49,470
infrastructure of kubernetes you can

00:23:47,640 --> 00:23:51,120
have a pool of IP addresses here when I

00:23:49,470 --> 00:23:53,370
create a load balancer service it will

00:23:51,120 --> 00:23:56,520
allocate me an IP address of my own

00:23:53,370 --> 00:23:58,170
outside of the cluster that way if I use

00:23:56,520 --> 00:24:01,440
that IP address from outside it can

00:23:58,170 --> 00:24:03,540
reroute traffic through to one of the

00:24:01,440 --> 00:24:05,580
instances of my pod internally and that

00:24:03,540 --> 00:24:07,880
way I can use a particular port that I

00:24:05,580 --> 00:24:10,679
want so you could expose it on port 80

00:24:07,880 --> 00:24:12,960
so that's one way if you're going to use

00:24:10,679 --> 00:24:15,480
a hosted service for communities such as

00:24:12,960 --> 00:24:17,610
Google cloud that's what they'll use in

00:24:15,480 --> 00:24:20,400
that particular case there's actually a

00:24:17,610 --> 00:24:21,780
better way when we if we're going to use

00:24:20,400 --> 00:24:23,100
the load balancer service and we have a

00:24:21,780 --> 00:24:24,570
lots and lots of services we need to

00:24:23,100 --> 00:24:28,050
expose we have to have a lot an

00:24:24,570 --> 00:24:29,950
individual IP address rules and more

00:24:28,050 --> 00:24:32,140
useful way of doing it is to have

00:24:29,950 --> 00:24:34,840
one entry point for the whole cluster

00:24:32,140 --> 00:24:38,049
and have a router in there such as H a

00:24:34,840 --> 00:24:41,080
proxy or nginx or even a hardware based

00:24:38,049 --> 00:24:43,510
rather like f5 and use the fact that

00:24:41,080 --> 00:24:45,610
when a web browser makes a request with

00:24:43,510 --> 00:24:47,350
HTTP traffic it puts a host header on

00:24:45,610 --> 00:24:49,600
there telling you watch hosts I'm doing

00:24:47,350 --> 00:24:51,070
there so the alternative is what we can

00:24:49,600 --> 00:24:54,160
use is what's called an ingress in

00:24:51,070 --> 00:24:55,420
communities now in Grace's start could

00:24:54,160 --> 00:24:57,429
be more complicated because there isn't

00:24:55,420 --> 00:24:59,440
a simple way of creating them from the

00:24:57,429 --> 00:25:02,500
coop cuddle command-line you have to

00:24:59,440 --> 00:25:04,840
start delving down into creating yeah

00:25:02,500 --> 00:25:06,250
more descriptions yourself and this is

00:25:04,840 --> 00:25:08,290
this has actually begun to become the

00:25:06,250 --> 00:25:10,390
norm I I started out with using coop

00:25:08,290 --> 00:25:12,220
cuddle commands but in practice when you

00:25:10,390 --> 00:25:14,470
start getting anything more complicated

00:25:12,220 --> 00:25:16,870
very simple use case you're gonna having

00:25:14,470 --> 00:25:19,090
to start learning yeah Milland J or JSON

00:25:16,870 --> 00:25:20,590
and all of these resource descriptions

00:25:19,090 --> 00:25:22,179
for kubernetes you guys I start

00:25:20,590 --> 00:25:23,980
constructing and that's why you may your

00:25:22,179 --> 00:25:26,799
mind starts blowing very quickly with

00:25:23,980 --> 00:25:29,650
kubernetes in the case when ingress I

00:25:26,799 --> 00:25:32,860
can create a channel description I need

00:25:29,650 --> 00:25:35,110
to expose this service with a particular

00:25:32,860 --> 00:25:37,780
host name and I want to have all traffic

00:25:35,110 --> 00:25:40,960
for that routed through to it and the

00:25:37,780 --> 00:25:43,750
port internally is going to be 8080 but

00:25:40,960 --> 00:25:45,940
I'm going to expose this as port 80 so

00:25:43,750 --> 00:25:47,950
that's all in again will file and I can

00:25:45,940 --> 00:25:50,320
use coop code or crate with that yema

00:25:47,950 --> 00:25:52,840
file pass it in and it will go and

00:25:50,320 --> 00:25:54,730
create with this ingress object again

00:25:52,840 --> 00:25:56,290
it's an object but there's magic in

00:25:54,730 --> 00:25:58,450
there a kubernetes it's going to see

00:25:56,290 --> 00:26:00,790
that ingress object created and it's

00:25:58,450 --> 00:26:03,610
going to dynamically reconfigure the

00:26:00,790 --> 00:26:05,559
routing layer for me to do whatever is

00:26:03,610 --> 00:26:08,770
needed to do to be able to route that

00:26:05,559 --> 00:26:11,830
traffic fruit so it might reconfigure

00:26:08,770 --> 00:26:15,040
engine X or H a proxy or whatever router

00:26:11,830 --> 00:26:18,640
your system you have such that now as

00:26:15,040 --> 00:26:20,200
long as you have a DNS cname outside in

00:26:18,640 --> 00:26:22,660
the real world which points to the IP

00:26:20,200 --> 00:26:25,720
address of your router when someone

00:26:22,660 --> 00:26:27,460
accessed that hostname your traffic will

00:26:25,720 --> 00:26:31,600
hate to do traffic will get routed

00:26:27,460 --> 00:26:34,480
through into your application so there

00:26:31,600 --> 00:26:35,440
are all the bits and pieces if we step

00:26:34,480 --> 00:26:38,800
back now and look at all the different

00:26:35,440 --> 00:26:41,559
things we have got running we can get

00:26:38,800 --> 00:26:43,299
used to cut or get to to query things

00:26:41,559 --> 00:26:45,309
now I mentioned

00:26:43,299 --> 00:26:46,960
very briefly before about how labels got

00:26:45,309 --> 00:26:48,549
added onto things labels are very

00:26:46,960 --> 00:26:51,309
important in Cuba notice the way you

00:26:48,549 --> 00:26:52,779
identify your applications because you

00:26:51,309 --> 00:26:55,269
may have lots of different applications

00:26:52,779 --> 00:26:57,429
in your kubernetes cluster if they're

00:26:55,269 --> 00:26:59,379
all in the same namespace they're all

00:26:57,429 --> 00:27:00,759
together but I need a way of being able

00:26:59,379 --> 00:27:02,499
to pick out just the ones for my

00:27:00,759 --> 00:27:04,600
application so what you do is you label

00:27:02,499 --> 00:27:07,149
them so I can then start to make do

00:27:04,600 --> 00:27:09,399
queries or operations based on based on

00:27:07,149 --> 00:27:11,860
labels so I'm querying these here's

00:27:09,399 --> 00:27:15,190
based on what's called a label selector

00:27:11,860 --> 00:27:17,950
and the label was run and the name was

00:27:15,190 --> 00:27:18,730
blog and I can pull them back out and

00:27:17,950 --> 00:27:20,649
it's really weird

00:27:18,730 --> 00:27:22,480
you can go phuket or get all and you'd

00:27:20,649 --> 00:27:25,539
think oh that'll give me back everything

00:27:22,480 --> 00:27:27,100
in there which has this label know all

00:27:25,539 --> 00:27:29,529
only actually means a few things that's

00:27:27,100 --> 00:27:31,629
really weird so in this case ingress is

00:27:29,529 --> 00:27:34,269
not part of also to get them I had to go

00:27:31,629 --> 00:27:36,489
query on all the but I can pull

00:27:34,269 --> 00:27:39,399
out now based on my label and I see I've

00:27:36,489 --> 00:27:40,840
got my deployment replica set my pod my

00:27:39,399 --> 00:27:43,119
service from when I exposed the

00:27:40,840 --> 00:27:45,100
deployment and my ingress so lots of

00:27:43,119 --> 00:27:47,109
different things but effective they're

00:27:45,100 --> 00:27:49,179
all just configuration objects and

00:27:47,109 --> 00:27:51,669
kubernetes is all working off them to

00:27:49,179 --> 00:27:55,409
descent she make that cluster look like

00:27:51,669 --> 00:27:58,149
what you wanted now I mentioned before

00:27:55,409 --> 00:28:00,999
deleting pods now imagine we want to

00:27:58,149 --> 00:28:02,499
restart our application now now we could

00:28:00,999 --> 00:28:04,809
be brute force and go in there and just

00:28:02,499 --> 00:28:06,820
delete all our pods using our label

00:28:04,809 --> 00:28:10,119
selector so we're only deleting the ones

00:28:06,820 --> 00:28:12,279
for our application and it will it'll

00:28:10,119 --> 00:28:15,460
terminate all those pods and it'll

00:28:12,279 --> 00:28:17,440
replace them right this is not actually

00:28:15,460 --> 00:28:19,690
a very good way of deleting or

00:28:17,440 --> 00:28:21,460
restarting an app because it's going to

00:28:19,690 --> 00:28:23,109
lead all the instances your application

00:28:21,460 --> 00:28:25,239
at the same time and there could be a

00:28:23,109 --> 00:28:27,460
period there where there's known no

00:28:25,239 --> 00:28:29,409
instance of your application running so

00:28:27,460 --> 00:28:31,059
people will start getting you know five

00:28:29,409 --> 00:28:34,720
hundreds or five hour free service

00:28:31,059 --> 00:28:36,220
unavailable now kubernetes unfortunately

00:28:34,720 --> 00:28:38,529
doesn't provide a really nice way of

00:28:36,220 --> 00:28:42,850
doing a restart unless this has changed

00:28:38,529 --> 00:28:44,649
in your version so I did this so there

00:28:42,850 --> 00:28:46,179
are some various tricks you can use now

00:28:44,649 --> 00:28:48,249
I mentioned before how kubernetes

00:28:46,179 --> 00:28:50,350
watches those configuration objects and

00:28:48,249 --> 00:28:52,629
when it sees a change it will do

00:28:50,350 --> 00:28:54,429
something to actually to the cluster to

00:28:52,629 --> 00:28:56,620
make it agree with it and we can

00:28:54,429 --> 00:29:00,190
actually trigger a restart

00:28:56,620 --> 00:29:01,840
by updating a part of what's called the

00:29:00,190 --> 00:29:04,660
pod template which is a part of our

00:29:01,840 --> 00:29:06,670
deployment in this case we can update an

00:29:04,660 --> 00:29:09,430
annotation we can put the date/time on

00:29:06,670 --> 00:29:11,830
there and by doing that there's a change

00:29:09,430 --> 00:29:15,460
kubernetes sees that oh that has changed

00:29:11,830 --> 00:29:17,530
I better restart all my application

00:29:15,460 --> 00:29:18,700
because I've made this change I've been

00:29:17,530 --> 00:29:22,600
I'll restart it in case that's

00:29:18,700 --> 00:29:24,460
significant it's a bit of a mess I think

00:29:22,600 --> 00:29:26,410
those people who in who probably know a

00:29:24,460 --> 00:29:27,610
lot more about aspects of kubernetes and

00:29:26,410 --> 00:29:29,410
running it in production than me and

00:29:27,610 --> 00:29:30,760
might might tell me I know I'm really

00:29:29,410 --> 00:29:32,530
stupid it's actually really easy we're

00:29:30,760 --> 00:29:37,179
doing this that's the best way I know of

00:29:32,530 --> 00:29:39,490
doing it now when we do do it in this

00:29:37,179 --> 00:29:40,929
way rather than having a situation where

00:29:39,490 --> 00:29:43,900
be deleting all their pods at the same

00:29:40,929 --> 00:29:45,910
time and having a period of time when

00:29:43,900 --> 00:29:48,550
application may not be available what

00:29:45,910 --> 00:29:51,700
happens is dictated by what's called a

00:29:48,550 --> 00:29:53,170
deployment strategy and there's

00:29:51,700 --> 00:29:55,330
different deployment strategies that you

00:29:53,170 --> 00:29:58,000
can have in kubernetes the default one

00:29:55,330 --> 00:30:00,550
is what's called a rolling update so

00:29:58,000 --> 00:30:02,740
when I do trigger my my redeployment

00:30:00,550 --> 00:30:04,929
using my nasty little technique there

00:30:02,740 --> 00:30:06,280
the default is this rolling update so

00:30:04,929 --> 00:30:07,990
what will actually happen is rather than

00:30:06,280 --> 00:30:11,470
delete everything and shut everything

00:30:07,990 --> 00:30:13,080
down it will go okay you have two

00:30:11,470 --> 00:30:15,700
instances in my up running already

00:30:13,080 --> 00:30:17,559
I'll leave those alone for now but I'll

00:30:15,700 --> 00:30:19,570
start up a new instance of an

00:30:17,559 --> 00:30:22,210
application is a new pod so I've now got

00:30:19,570 --> 00:30:24,420
free once that's up and running property

00:30:22,210 --> 00:30:27,340
it'll shut one of the other ones down

00:30:24,420 --> 00:30:29,230
and it'll start a new one so there's

00:30:27,340 --> 00:30:31,330
another one second new one get that out

00:30:29,230 --> 00:30:33,190
and then shut down there so essentially

00:30:31,330 --> 00:30:35,980
we're able to do a rolling update and as

00:30:33,190 --> 00:30:38,590
is a built-in feature of kubernetes you

00:30:35,980 --> 00:30:40,630
don't have to yourself worry about all

00:30:38,590 --> 00:30:44,980
the mechanics of doing that it'll be all

00:30:40,630 --> 00:30:47,130
handle for you now rolling updates are

00:30:44,980 --> 00:30:49,950
not necessarily always a good idea

00:30:47,130 --> 00:30:54,100
they're good for ensuring no uptime

00:30:49,950 --> 00:30:55,720
redeployment or Easter but if you need

00:30:54,100 --> 00:30:57,970
to do something like a database

00:30:55,720 --> 00:30:59,559
migration you know using Django and

00:30:57,970 --> 00:31:01,150
you've made some changes you've done

00:30:59,559 --> 00:31:03,190
your make migrations you've rebuilt your

00:31:01,150 --> 00:31:08,020
image you need to put out that change

00:31:03,190 --> 00:31:10,540
and you set up your your image to do a

00:31:08,020 --> 00:31:12,400
Python managed PI migrate

00:31:10,540 --> 00:31:14,830
as when the just before the application

00:31:12,400 --> 00:31:16,180
starts up inside the container rolling

00:31:14,830 --> 00:31:18,220
updates and not necessarily a good idea

00:31:16,180 --> 00:31:19,930
for that because if you're making a

00:31:18,220 --> 00:31:22,840
change to the schema of your database

00:31:19,930 --> 00:31:24,700
and you're starting up a new instance of

00:31:22,840 --> 00:31:27,270
your application while the old ones are

00:31:24,700 --> 00:31:29,650
running it's going to do that migrate

00:31:27,270 --> 00:31:32,200
meanwhile your old instance is still

00:31:29,650 --> 00:31:34,450
handling requests and you've changed the

00:31:32,200 --> 00:31:37,810
schema underneath if the change to that

00:31:34,450 --> 00:31:39,480
schema is not compatible then your old

00:31:37,810 --> 00:31:42,880
instance will start failing requests

00:31:39,480 --> 00:31:48,250
okay so the alternative there is if you

00:31:42,880 --> 00:31:50,110
did need to have a schema change

00:31:48,250 --> 00:31:51,430
happening in there as you can swap to

00:31:50,110 --> 00:31:53,260
what's called a recreate deployment

00:31:51,430 --> 00:31:55,810
strategy and that is where it'll shatter

00:31:53,260 --> 00:31:58,570
ink down and then start everything up in

00:31:55,810 --> 00:32:04,480
you so that way if you do doing it it

00:31:58,570 --> 00:32:06,190
gives you that option now by default the

00:32:04,480 --> 00:32:09,040
role the rolling update was we're

00:32:06,190 --> 00:32:10,840
changing it is case of having to go in

00:32:09,040 --> 00:32:12,760
and modify those configs and there are a

00:32:10,840 --> 00:32:14,650
few different ways of modifying configs

00:32:12,760 --> 00:32:16,210
now I've done a one particular way he

00:32:14,650 --> 00:32:17,770
just using cucit I'll patch it allows

00:32:16,210 --> 00:32:19,210
you centrally selectively say I want to

00:32:17,770 --> 00:32:21,310
make a change inside of an existing

00:32:19,210 --> 00:32:23,830
config and I can actually go and change

00:32:21,310 --> 00:32:25,290
that deployment strategy you do have to

00:32:23,830 --> 00:32:28,030
be a little bit careful though because

00:32:25,290 --> 00:32:30,510
some things like Palomas traitor for

00:32:28,030 --> 00:32:33,430
example you can have a type which is

00:32:30,510 --> 00:32:35,950
recreate I want to set that set but I

00:32:33,430 --> 00:32:37,720
may have to remove bits and pieces which

00:32:35,950 --> 00:32:42,580
are in there from the existing rolling

00:32:37,720 --> 00:32:44,230
update in this case there is a rolling

00:32:42,580 --> 00:32:45,670
update parameters part of the

00:32:44,230 --> 00:32:47,680
configuration if I leave that in there

00:32:45,670 --> 00:32:50,170
and just change it to create it will

00:32:47,680 --> 00:32:51,550
have probably I'll get an error it won't

00:32:50,170 --> 00:32:53,050
actually allow me Duke says I've got a

00:32:51,550 --> 00:32:56,230
thing in there which is not valid for

00:32:53,050 --> 00:32:58,000
that so you do a little tricky but you

00:32:56,230 --> 00:32:59,230
can do this with patch and I mentioned

00:32:58,000 --> 00:33:01,150
patch only because I can show it easily

00:32:59,230 --> 00:33:03,430
on slide but if you're staying to try

00:33:01,150 --> 00:33:05,590
and script these things you do need an

00:33:03,430 --> 00:33:07,150
easy way of scripted you don't want to

00:33:05,590 --> 00:33:10,450
be able to necessarily jumping in edit

00:33:07,150 --> 00:33:11,590
edit raw configurations yourself but

00:33:10,450 --> 00:33:13,480
these are the ways you can edit things

00:33:11,590 --> 00:33:17,110
this cou petal patch which is that's one

00:33:13,480 --> 00:33:18,610
example of it you can use cout petal

00:33:17,110 --> 00:33:20,560
edit and what it will do is actually

00:33:18,610 --> 00:33:23,080
just throw you into an editor with the

00:33:20,560 --> 00:33:24,520
raw yanil and you can start making

00:33:23,080 --> 00:33:26,260
changes yes

00:33:24,520 --> 00:33:28,150
and it will go up and just replace the

00:33:26,260 --> 00:33:30,610
existing config I don't do that

00:33:28,150 --> 00:33:32,290
other options and this is more typical

00:33:30,610 --> 00:33:35,680
option you'll end up using more

00:33:32,290 --> 00:33:37,780
complicated ones is if creative

00:33:35,680 --> 00:33:39,760
resources using coop cuddle creep from

00:33:37,780 --> 00:33:41,800
original raw file and if you want to

00:33:39,760 --> 00:33:44,740
make changes you're going to use replace

00:33:41,800 --> 00:33:47,050
or apply to essentially have a copy of

00:33:44,740 --> 00:33:49,420
your original config you'll make the

00:33:47,050 --> 00:33:51,520
changes and you'll apply that then to

00:33:49,420 --> 00:33:54,790
replace the whole lot in one go and

00:33:51,520 --> 00:33:56,410
preferably you have your your config

00:33:54,790 --> 00:33:59,140
under version control so that you can

00:33:56,410 --> 00:34:00,700
recreate it later and so on so avoid

00:33:59,140 --> 00:34:03,760
patch and edit they're great for doing

00:34:00,700 --> 00:34:05,710
ad-hoc mucking around in and so on but

00:34:03,760 --> 00:34:10,570
not good if you want replicate our

00:34:05,710 --> 00:34:11,230
ability to reproduce things Doc's will

00:34:10,570 --> 00:34:12,550
tell you about all the different

00:34:11,230 --> 00:34:14,320
attributes you can change your things

00:34:12,550 --> 00:34:15,520
there's actually a cou couple explain

00:34:14,320 --> 00:34:17,260
command where you can actually get very

00:34:15,520 --> 00:34:18,850
simple Doc's out very quickly on

00:34:17,260 --> 00:34:22,390
resource if you will need to jump into

00:34:18,850 --> 00:34:25,750
things now deploy no strategy I mention

00:34:22,390 --> 00:34:28,180
rolling update when you start up that

00:34:25,750 --> 00:34:29,350
new instance of the application how

00:34:28,180 --> 00:34:31,630
though do you know that is ready to

00:34:29,350 --> 00:34:33,370
handle requests now what if there's a

00:34:31,630 --> 00:34:36,460
failure with that starting up and it's

00:34:33,370 --> 00:34:39,250
not ready to accept requests you can add

00:34:36,460 --> 00:34:41,110
what's in called health checks first one

00:34:39,250 --> 00:34:42,760
is a readiness probe so what happens you

00:34:41,110 --> 00:34:44,140
can define our readiness probe on there

00:34:42,760 --> 00:34:50,830
and you can define different ways

00:34:44,140 --> 00:34:53,620
typical ways is juicy HTTP GET and as

00:34:50,830 --> 00:34:55,360
that when that application instances

00:34:53,620 --> 00:34:57,610
started up it'll start triggering that

00:34:55,360 --> 00:35:00,070
probe and when it gets back a successful

00:34:57,610 --> 00:35:01,870
response that it is worked it'll go good

00:35:00,070 --> 00:35:03,880
that one's fine I can I can add that

00:35:01,870 --> 00:35:05,710
into my service there's a list of

00:35:03,880 --> 00:35:07,600
endpoints that the service maps to shut

00:35:05,710 --> 00:35:10,420
down my old one so health checks are

00:35:07,600 --> 00:35:12,790
very important being able to do things

00:35:10,420 --> 00:35:14,020
like rolling updates nicely such that

00:35:12,790 --> 00:35:16,510
you know your application is going to be

00:35:14,020 --> 00:35:17,650
ready liveness probe is another one

00:35:16,510 --> 00:35:20,320
which sits thing that's actually going

00:35:17,650 --> 00:35:21,370
to you always run as well which can tell

00:35:20,320 --> 00:35:24,280
you whether application is actually

00:35:21,370 --> 00:35:26,230
working properly if I were those fails

00:35:24,280 --> 00:35:28,630
readiness Pro fails it can take that

00:35:26,230 --> 00:35:30,520
particular instance out of the service

00:35:28,630 --> 00:35:32,650
so it's no longer being traffic routed

00:35:30,520 --> 00:35:36,280
to it and Lively's fails it will

00:35:32,650 --> 00:35:37,580
actually shut the pod down replace it so

00:35:36,280 --> 00:35:39,560
I can create that I can

00:35:37,580 --> 00:35:40,970
just patch it in in this case of working

00:35:39,560 --> 00:35:43,190
out where and the confi gonna need to do

00:35:40,970 --> 00:35:45,950
it and I said you can also instead of

00:35:43,190 --> 00:35:47,570
HTTP GET you can also use for certain

00:35:45,950 --> 00:35:49,610
things soccer connections or run at

00:35:47,570 --> 00:35:53,660
random and sydejko main container to

00:35:49,610 --> 00:35:55,010
implement those probes we've database

00:35:53,660 --> 00:35:56,990
grace variations part of that rot that

00:35:55,010 --> 00:35:58,880
deployment strategy you can also deploy

00:35:56,990 --> 00:36:01,220
just fine what are called deployment

00:35:58,880 --> 00:36:03,260
hooks so in the case of a rolling

00:36:01,220 --> 00:36:04,610
deployment when I trigger that

00:36:03,260 --> 00:36:06,590
deployment I can have what's called a

00:36:04,610 --> 00:36:08,870
pre hook before anything happens I can

00:36:06,590 --> 00:36:10,910
define something when it's finished and

00:36:08,870 --> 00:36:12,710
it's done all the replacements I can

00:36:10,910 --> 00:36:16,580
have another hook which is I can have a

00:36:12,710 --> 00:36:19,840
post talk for database migrations - my

00:36:16,580 --> 00:36:22,370
great performance type our mana Greg

00:36:19,840 --> 00:36:24,170
rather than embedding into the container

00:36:22,370 --> 00:36:26,960
itself such it's run when the container

00:36:24,170 --> 00:36:28,310
starts which would get run every for

00:36:26,960 --> 00:36:30,500
every single container if you have more

00:36:28,310 --> 00:36:31,730
than one an alternative there is to

00:36:30,500 --> 00:36:33,650
break that out and if your using

00:36:31,730 --> 00:36:35,810
recreate deployment strategy you can

00:36:33,650 --> 00:36:37,610
define most deployment hook so you can

00:36:35,810 --> 00:36:40,430
actually run up a container which just

00:36:37,610 --> 00:36:42,050
is going to do the migration so in this

00:36:40,430 --> 00:36:43,730
case what would happen is you have all

00:36:42,050 --> 00:36:45,890
your existing apps running it would shut

00:36:43,730 --> 00:36:48,260
them all down you can run a container to

00:36:45,890 --> 00:36:50,600
do the migration and then you can

00:36:48,260 --> 00:36:53,210
actually start up all the new ones so

00:36:50,600 --> 00:36:55,280
deployments ready all these things are

00:36:53,210 --> 00:36:58,220
improving Eddie's as a dolt fault thing

00:36:55,280 --> 00:37:01,040
and you don't have to build them in you

00:36:58,220 --> 00:37:03,140
can now build on your top of this and

00:37:01,040 --> 00:37:04,670
building up your own custom deployment

00:37:03,140 --> 00:37:06,710
strategies you can do Bluegreen

00:37:04,670 --> 00:37:08,030
deployments so Bluegreen deployments you

00:37:06,710 --> 00:37:10,100
might for example have one deployment

00:37:08,030 --> 00:37:11,390
you might decide okay I'll leave that

00:37:10,100 --> 00:37:13,940
one alone I'll create a totally new

00:37:11,390 --> 00:37:16,670
deployment I get all that up and running

00:37:13,940 --> 00:37:17,930
a test it and then all I need to do with

00:37:16,670 --> 00:37:20,900
Bluegreen strategies essentially

00:37:17,930 --> 00:37:23,060
switched the ingress to point at my

00:37:20,900 --> 00:37:25,100
alternate deployment so you can build up

00:37:23,060 --> 00:37:26,510
these alternate deployment strategies as

00:37:25,100 --> 00:37:28,670
well so if you want

00:37:26,510 --> 00:37:29,450
canary a be testing and various

00:37:28,670 --> 00:37:34,100
complicated

00:37:29,450 --> 00:37:36,470
other ones like that next one is how do

00:37:34,100 --> 00:37:37,820
I update my application now I cheated

00:37:36,470 --> 00:37:39,620
when I changed the reason you know I

00:37:37,820 --> 00:37:41,210
said coop I'll run and I said run up my

00:37:39,620 --> 00:37:43,990
image a big use the latest version

00:37:41,210 --> 00:37:48,020
that's actually really bad never do that

00:37:43,990 --> 00:37:50,570
always use a version number because

00:37:48,020 --> 00:37:51,550
latest can map to anything every time I

00:37:50,570 --> 00:37:53,950
do a dock

00:37:51,550 --> 00:37:57,010
build and I do a docker tag latest

00:37:53,950 --> 00:37:59,590
effectively can match that so it can

00:37:57,010 --> 00:38:03,970
change under me so if I did want to

00:37:59,590 --> 00:38:06,370
upgrade my application now I have 1.0

00:38:03,970 --> 00:38:08,800
version running I can just change the

00:38:06,370 --> 00:38:10,780
image name in the deployment config and

00:38:08,800 --> 00:38:13,600
change a new tag and it will do a

00:38:10,780 --> 00:38:15,420
redeployment for me okay automatically

00:38:13,600 --> 00:38:17,730
for you

00:38:15,420 --> 00:38:21,580
storage I'm running out of time so

00:38:17,730 --> 00:38:26,140
storage people originally with docker

00:38:21,580 --> 00:38:28,360
saw it as being 412 factor apps cloud

00:38:26,140 --> 00:38:30,310
native apps that didn't have any storage

00:38:28,360 --> 00:38:32,110
if you're using Heroku you're very very

00:38:30,310 --> 00:38:34,810
familiar with that if you deploy stuff

00:38:32,110 --> 00:38:36,520
to Heroku there is no storage if I write

00:38:34,810 --> 00:38:38,620
to the local filesystem applications

00:38:36,520 --> 00:38:40,570
just and I've lost that you always had

00:38:38,620 --> 00:38:42,640
to have data outside in a separate

00:38:40,570 --> 00:38:44,920
database or storing stuffings s free or

00:38:42,640 --> 00:38:46,300
rather some other external mechanism one

00:38:44,920 --> 00:38:48,970
of the good thing about Cuvier is a

00:38:46,300 --> 00:38:51,340
sports concept to persistent volumes and

00:38:48,970 --> 00:38:53,950
this is very handy if you need to bring

00:38:51,340 --> 00:38:55,690
in apps so called legacy apps or non

00:38:53,950 --> 00:38:57,700
twelve factory rats we do have a

00:38:55,690 --> 00:38:59,740
requirement for storage or if you need

00:38:57,700 --> 00:39:03,010
to just support storing of image uploads

00:38:59,740 --> 00:39:05,140
you know in a blog app for example so I

00:39:03,010 --> 00:39:07,240
can actually mount in persistent volumes

00:39:05,140 --> 00:39:09,700
into my container and the way this works

00:39:07,240 --> 00:39:11,410
is that I send you to tell communities I

00:39:09,700 --> 00:39:14,140
need persistent storage

00:39:11,410 --> 00:39:15,460
I need this amount and this is the type

00:39:14,140 --> 00:39:17,680
of storage I need and this is very

00:39:15,460 --> 00:39:19,900
important there's different types of

00:39:17,680 --> 00:39:23,980
storage rewrite one three only many and

00:39:19,900 --> 00:39:26,650
read might many now rewrite once if you

00:39:23,980 --> 00:39:29,080
familiar with Amazon that equates to

00:39:26,650 --> 00:39:30,730
elastic block storage elastic block

00:39:29,080 --> 00:39:33,840
stories volumes can only be mounted on

00:39:30,730 --> 00:39:36,400
one node at a time

00:39:33,840 --> 00:39:37,720
read write many down the bottom there's

00:39:36,400 --> 00:39:41,040
traditional file service or it's like

00:39:37,720 --> 00:39:44,080
NFS you can mount that wherever you want

00:39:41,040 --> 00:39:45,940
and this is important because if I have

00:39:44,080 --> 00:39:48,070
an app and I want to scale it up and

00:39:45,940 --> 00:39:48,810
have mobile instances and I can't use

00:39:48,070 --> 00:39:51,010
the top one

00:39:48,810 --> 00:39:52,480
because kumys are going to make

00:39:51,010 --> 00:39:54,610
decisions about where it runs the

00:39:52,480 --> 00:39:57,790
instances my apps and it could run model

00:39:54,610 --> 00:40:01,390
instant nodes so if you're using the

00:39:57,790 --> 00:40:03,730
wrong storage type and you say rewrite

00:40:01,390 --> 00:40:05,170
once it'll only bring up one instance or

00:40:03,730 --> 00:40:07,569
whatever instances put

00:40:05,170 --> 00:40:10,329
that node this is a really thing about

00:40:07,569 --> 00:40:11,680
cuban easy to be careful of is you can

00:40:10,329 --> 00:40:15,069
set up a configuration and that

00:40:11,680 --> 00:40:16,660
configuration could be wrong or be

00:40:15,069 --> 00:40:19,089
telling communities to do something that

00:40:16,660 --> 00:40:20,650
it can't satisfy and when i run that

00:40:19,089 --> 00:40:23,680
command or update the contact you do not

00:40:20,650 --> 00:40:25,420
get an error communities will just spit

00:40:23,680 --> 00:40:26,410
its wheels because it can't actually

00:40:25,420 --> 00:40:27,670
satisfy it

00:40:26,410 --> 00:40:30,369
that's one of the weird things and

00:40:27,670 --> 00:40:32,500
stories an example if I use rewrite one

00:40:30,369 --> 00:40:34,720
storage anything around on one node ten

00:40:32,500 --> 00:40:36,549
instances why they learning it for note

00:40:34,720 --> 00:40:38,049
for instance is running it's because

00:40:36,549 --> 00:40:39,910
communities could have satisfy that

00:40:38,049 --> 00:40:42,309
request because it couldn't perhaps put

00:40:39,910 --> 00:40:44,140
more instances here app on that one node

00:40:42,309 --> 00:40:45,369
it's tried to just rip them elsewhere

00:40:44,140 --> 00:40:50,829
and it's just sitting there waiting for

00:40:45,369 --> 00:40:54,280
storage what you can't get so if you do

00:40:50,829 --> 00:40:56,380
have stuck with using EBS on Amazon you

00:40:54,280 --> 00:41:00,250
asked like with one replica or you have

00:40:56,380 --> 00:41:02,559
to do tricks like tell kubernetes to set

00:41:00,250 --> 00:41:04,359
up all my instances my app to run on one

00:41:02,559 --> 00:41:05,829
node but then you lose your your

00:41:04,359 --> 00:41:07,420
fault-tolerant a bit because if i lose

00:41:05,829 --> 00:41:08,799
the whole node I've got no instances

00:41:07,420 --> 00:41:10,150
because you know the idea of communities

00:41:08,799 --> 00:41:12,760
it will distribute the instances across

00:41:10,150 --> 00:41:16,380
the nodes so if you do lose a node then

00:41:12,760 --> 00:41:17,650
it still got other instances running

00:41:16,380 --> 00:41:19,359
again

00:41:17,650 --> 00:41:21,970
persistent volumes is like ingress you

00:41:19,359 --> 00:41:24,609
have to start mucking around with raw

00:41:21,970 --> 00:41:26,079
definitions and then you could just

00:41:24,609 --> 00:41:28,150
create it get your persistent volume

00:41:26,079 --> 00:41:29,650
claim you have to then also start

00:41:28,150 --> 00:41:31,240
mucking around the deployment column

00:41:29,650 --> 00:41:33,280
figures change that deployment conf you

00:41:31,240 --> 00:41:34,750
can say okay I need this persistent file

00:41:33,280 --> 00:41:36,400
your claim for this deployment but I

00:41:34,750 --> 00:41:38,470
also need to then say where that is

00:41:36,400 --> 00:41:40,540
going to be mounted inside of that

00:41:38,470 --> 00:41:41,799
particular container ok so there's lots

00:41:40,540 --> 00:41:45,190
of mucking around it to bring all these

00:41:41,799 --> 00:41:47,530
things together but anyways we do have

00:41:45,190 --> 00:41:50,650
storage with Django we want to get in

00:41:47,530 --> 00:41:53,349
there and do things like set up our CPUs

00:41:50,650 --> 00:41:55,480
and so we can do that we can go in there

00:41:53,349 --> 00:41:57,940
Kubek sack when our create super user

00:41:55,480 --> 00:42:02,829
I'm using SQLite and fine I've got my

00:41:57,940 --> 00:42:05,170
storage if I want to change config like

00:42:02,829 --> 00:42:06,640
various systems like this I can set

00:42:05,170 --> 00:42:08,049
environment variables which passed down

00:42:06,640 --> 00:42:09,339
into config so I've been using mod

00:42:08,049 --> 00:42:12,460
basically I can make that deployment

00:42:09,339 --> 00:42:15,460
configure a region more importantly

00:42:12,460 --> 00:42:18,579
environment passing is good for thinking

00:42:15,460 --> 00:42:19,109
up things like databases so I could hear

00:42:18,579 --> 00:42:20,970
of just

00:42:19,109 --> 00:42:22,950
faster than all the details of where my

00:42:20,970 --> 00:42:24,390
databases and environment variables but

00:42:22,950 --> 00:42:27,259
humanizes offers another thing called

00:42:24,390 --> 00:42:29,220
secrets and that is ability to put

00:42:27,259 --> 00:42:31,650
configuration in what's called a secret

00:42:29,220 --> 00:42:34,829
and I can actually have that as a

00:42:31,650 --> 00:42:36,930
separate object and I can use then use

00:42:34,829 --> 00:42:38,549
that from multiple things so I may have

00:42:36,930 --> 00:42:40,289
here I've already pre deployed my

00:42:38,549 --> 00:42:42,299
database it has a secret with my

00:42:40,289 --> 00:42:44,579
credentials in it and without needing to

00:42:42,299 --> 00:42:46,170
know what they are I can say okay set my

00:42:44,579 --> 00:42:47,309
environment but pull those variables

00:42:46,170 --> 00:42:48,869
from the secret and set them all

00:42:47,309 --> 00:42:51,180
automatically and I can link them

00:42:48,869 --> 00:42:52,499
together in addition to secret it's

00:42:51,180 --> 00:42:54,029
another thing called config maps they

00:42:52,499 --> 00:42:55,589
essentially work exactly the same but

00:42:54,029 --> 00:42:58,349
secrets have some better guarantees on

00:42:55,589 --> 00:43:00,869
how that information is managed such

00:42:58,349 --> 00:43:02,579
that it's not stored on disk so if I

00:43:00,869 --> 00:43:04,470
shut down a machine ship it out I

00:43:02,579 --> 00:43:08,400
haven't put my secrets out and giving

00:43:04,470 --> 00:43:10,410
them away to somewhere and I can get

00:43:08,400 --> 00:43:11,630
back in view my creation you can see

00:43:10,410 --> 00:43:15,150
where it's coming from

00:43:11,630 --> 00:43:17,609
now that's the guts of it that's very

00:43:15,150 --> 00:43:19,140
simple example of running an app now I

00:43:17,609 --> 00:43:21,749
mention these distributions earlier

00:43:19,140 --> 00:43:24,599
distributions can make things simpler

00:43:21,749 --> 00:43:26,759
because they can add on extra bits which

00:43:24,599 --> 00:43:28,769
make your life make it easier from a

00:43:26,759 --> 00:43:30,480
developer's perspective good news is

00:43:28,769 --> 00:43:33,930
very much regard as being an Operations

00:43:30,480 --> 00:43:36,119
platform as developers that's not great

00:43:33,930 --> 00:43:38,069
operations tinder that's our stuff we

00:43:36,119 --> 00:43:40,319
don't want to touch it that's where you

00:43:38,069 --> 00:43:44,640
might look at some of the distributions

00:43:40,319 --> 00:43:46,529
so open shift from Red Hat and ok ok D

00:43:44,640 --> 00:43:49,950
which is the upstream version of that

00:43:46,529 --> 00:43:51,569
and also pivotal we'vewe've coming over

00:43:49,950 --> 00:43:53,460
from Cloud Foundry they have mechanisms

00:43:51,569 --> 00:43:56,190
or tooling which allow which are much

00:43:53,460 --> 00:43:57,779
more developer-friendly in legs build up

00:43:56,190 --> 00:43:59,759
things and I'm going to skip through a

00:43:57,779 --> 00:44:01,680
quick example of how to do what I just

00:43:59,759 --> 00:44:04,430
did but using openshift using their

00:44:01,680 --> 00:44:06,150
tooling it's still kubernetes underneath

00:44:04,430 --> 00:44:09,450
there's a few little things that are

00:44:06,150 --> 00:44:11,009
different but I can go into over shift

00:44:09,450 --> 00:44:12,690
and one of the things here is that in

00:44:11,009 --> 00:44:14,730
when I did before I had an existing

00:44:12,690 --> 00:44:16,680
image here I'm going to go into

00:44:14,730 --> 00:44:18,720
openshift we'll say here is my source

00:44:16,680 --> 00:44:21,450
code repository on github

00:44:18,720 --> 00:44:23,339
deploy it for me and it's going to do

00:44:21,450 --> 00:44:25,859
that platform as a service type thing if

00:44:23,339 --> 00:44:28,470
me with Heroku it'll take my source code

00:44:25,859 --> 00:44:30,089
and build into an image for me and it

00:44:28,470 --> 00:44:32,490
will go off and create a dew point for

00:44:30,089 --> 00:44:35,910
me created service

00:44:32,490 --> 00:44:38,490
get all running for me I can also do

00:44:35,910 --> 00:44:40,140
things like adding in volume very easily

00:44:38,490 --> 00:44:42,990
because there's extra commands in there

00:44:40,140 --> 00:44:46,020
to very easily claim storage and math it

00:44:42,990 --> 00:44:47,280
in straight away so I've deployed it got

00:44:46,020 --> 00:44:53,330
my service already it didn't have to

00:44:47,280 --> 00:44:56,550
expose it and I can add in my storage

00:44:53,330 --> 00:44:57,900
and I can then expose it so free steps

00:44:56,550 --> 00:45:02,100
are very quickly done although what I

00:44:57,900 --> 00:45:04,050
did before and in this case some of the

00:45:02,100 --> 00:45:05,580
things underneath if I'd now query it

00:45:04,050 --> 00:45:07,260
back you'll see a lot of the things a

00:45:05,580 --> 00:45:09,300
bit different and this is a bit of a

00:45:07,260 --> 00:45:11,670
historical because when OpenShift was

00:45:09,300 --> 00:45:13,440
first created things like deployment

00:45:11,670 --> 00:45:16,140
didn't exist in communities things like

00:45:13,440 --> 00:45:18,450
ingress didn't exist in kubernetes so

00:45:16,140 --> 00:45:19,980
you might see people talking about all

00:45:18,450 --> 00:45:21,869
open shifts not really communities

00:45:19,980 --> 00:45:23,340
because it's different and it's just a

00:45:21,869 --> 00:45:25,110
history of it we things like these

00:45:23,340 --> 00:45:26,820
didn't exist so open ships went and

00:45:25,110 --> 00:45:29,640
created their own and that's actually

00:45:26,820 --> 00:45:32,760
fed into kubernetes in developing things

00:45:29,640 --> 00:45:36,510
like develop deployment and and ingress

00:45:32,760 --> 00:45:38,280
in kubernetes overshift is in the

00:45:36,510 --> 00:45:41,040
process of migrating across to using

00:45:38,280 --> 00:45:42,060
these new ones in there but do look at

00:45:41,040 --> 00:45:45,359
some of the distributions they do

00:45:42,060 --> 00:45:48,030
provide simpler tooling for this and one

00:45:45,359 --> 00:45:50,220
further example in cuban into over egypt

00:45:48,030 --> 00:45:52,140
is so if i won't deploy database there

00:45:50,220 --> 00:45:54,030
is think as if there's a concept of

00:45:52,140 --> 00:45:55,710
templates in there and i can say here

00:45:54,030 --> 00:45:57,750
create the database and that's all I

00:45:55,710 --> 00:45:59,490
need to do it'll go and create it

00:45:57,750 --> 00:46:01,380
create new credentials create that

00:45:59,490 --> 00:46:06,500
secret which I can then bring you from

00:46:01,380 --> 00:46:09,600
farm it into map just like that

00:46:06,500 --> 00:46:12,060
there's also have web consoles which are

00:46:09,600 --> 00:46:13,830
much more developer-friendly a default

00:46:12,060 --> 00:46:15,480
plain-vanilla communities doesn't really

00:46:13,830 --> 00:46:17,700
have a console there is a management

00:46:15,480 --> 00:46:19,350
console you can do for yourself all that

00:46:17,700 --> 00:46:24,240
stuff comes out of the box with open

00:46:19,350 --> 00:46:26,010
shift and that's running at time so

00:46:24,240 --> 00:46:28,230
cleaning up I've mentioned labels before

00:46:26,010 --> 00:46:29,880
has been very important that's where it

00:46:28,230 --> 00:46:32,070
comes in important deleting stuff you

00:46:29,880 --> 00:46:33,869
use your labels for deleting things I

00:46:32,070 --> 00:46:36,180
mentioned templates there are the

00:46:33,869 --> 00:46:38,910
tempting systems to look at helm and

00:46:36,180 --> 00:46:41,190
case on it as but there are others as

00:46:38,910 --> 00:46:42,660
well they help you to essentially define

00:46:41,190 --> 00:46:45,480
your application as a whole lot of

00:46:42,660 --> 00:46:46,440
templates and they to very easily do

00:46:45,480 --> 00:46:50,099
reproducible to

00:46:46,440 --> 00:46:51,569
appointments so look at those building

00:46:50,099 --> 00:46:53,910
you may be familiar with docker builds

00:46:51,569 --> 00:46:56,040
because that all becomes standards under

00:46:53,910 --> 00:46:57,920
the change initiative there are now

00:46:56,040 --> 00:47:00,869
alternative tools for doing builds

00:46:57,920 --> 00:47:03,089
builder is an example doing build has a

00:47:00,869 --> 00:47:05,069
companion program called Skopje for

00:47:03,089 --> 00:47:06,480
doing pushing images and so on and

00:47:05,069 --> 00:47:08,310
they're all wrapped together with thing

00:47:06,480 --> 00:47:10,170
called pod man the source to image is

00:47:08,310 --> 00:47:14,460
what open ship uses for doing its pass

00:47:10,170 --> 00:47:17,790
type builds very quick one don't run up

00:47:14,460 --> 00:47:21,890
don't design your images so to run his

00:47:17,790 --> 00:47:24,150
route please please do don't do that

00:47:21,890 --> 00:47:27,500
run them so they can run as arbitrary

00:47:24,150 --> 00:47:29,670
ideas geezer ideas much better and

00:47:27,500 --> 00:47:30,810
there's very strict so I'll skip disk so

00:47:29,670 --> 00:47:34,050
I'm running out of time you can go back

00:47:30,810 --> 00:47:36,450
if you want to play with it some

00:47:34,050 --> 00:47:37,710
resource we can go kubernetes by example

00:47:36,450 --> 00:47:39,270
is a great place we can go to learn

00:47:37,710 --> 00:47:40,829
about some of the low level concepts and

00:47:39,270 --> 00:47:44,099
communities what they're for how to use

00:47:40,829 --> 00:47:45,810
them there's a site called category you

00:47:44,099 --> 00:47:48,450
can go and it'll spin up an instance of

00:47:45,810 --> 00:47:51,210
kubernetes for you and it will have on

00:47:48,450 --> 00:47:54,089
one side so two instructions a terminal

00:47:51,210 --> 00:47:56,130
and you can go through and just do it

00:47:54,089 --> 00:47:57,420
all on the spot just click on the

00:47:56,130 --> 00:48:00,450
instructions and all run them all for

00:47:57,420 --> 00:48:02,130
you you play with kubernetes that way if

00:48:00,450 --> 00:48:04,680
you want to run communities yourself on

00:48:02,130 --> 00:48:06,329
your inbox mini coop so rather than go

00:48:04,680 --> 00:48:08,369
and try and do the whole hog of setting

00:48:06,329 --> 00:48:10,020
up a whole cluster you can use mini coop

00:48:08,369 --> 00:48:11,700
it just runs it up inside of a VM and

00:48:10,020 --> 00:48:13,170
there are similar things for open ship

00:48:11,700 --> 00:48:15,060
even chief has like a decoder

00:48:13,170 --> 00:48:18,060
environment as well which is low no

00:48:15,060 --> 00:48:21,050
creature calm has mini same as mini

00:48:18,060 --> 00:48:23,400
coop and finally if you want resources

00:48:21,050 --> 00:48:24,930
I've got my name on a couple of books if

00:48:23,400 --> 00:48:26,670
you want to look at this from openshift

00:48:24,930 --> 00:48:28,740
side more and they are free free

00:48:26,670 --> 00:48:33,030
downloads and that's it

00:48:28,740 --> 00:48:34,410
I'd any time for questions later no time

00:48:33,030 --> 00:48:36,390
for questions if Gramps willing to take

00:48:34,410 --> 00:48:39,370
questions in the hall afterwards you can

00:48:36,390 --> 00:48:46,839
find him then so thank you grandma

00:48:39,370 --> 00:48:46,839

YouTube URL: https://www.youtube.com/watch?v=kbarwyun-c4


