Title: DjangoCon US 2018 - Pseu, Pseu, Pseudio. Pseudonymization in Django. by Frank Valcarcel
Publication date: 2018-11-10
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - Pseu, Pseu, Pseudio. Pseudonymization in Django. by Frank Valcarcel

The General Data Protection Regulation, better known as GDPR, is a regulation on data protection and privacy for all individuals within the European Union. GDPR went into effect on May 25, 2018 and was the cause of the “Great Privacy Policy Update” that occurred in the weeks prior.

This talk will cover what GDPR is and why you should care about it, but we won’t stop there. This is not going to be another talk on data protection policy. No.

In this talk, we’re going to jump right into discussing HOW to implement data patterns that comply with regulations like GDPR by examining a pattern known as pseudonymization.

Pseudonymization is a data de-identification procedure where fields of personally identifiable information (PII) within a data record are replaced by one or more artificial identifiers. These artificial identifiers are also called pseudonyms. Pseudonyms make a data record less identifiable without sacrificing data analysis and processing. GDPR requires that PII undergo either pseudonymization or complete data anonymization.

For the hands-on portion of this talk, we’ll construct a Django User Model where we apply pseudonyms to the data attributes which qualify as PII. We’ll explore a couple strategies for implementing a compliant pseudonymization pattern, examining their individual approaches and performance, and we’ll discuss limitations of pseudonymizing certain attributes and how to achieve compliance through consent.

GDPR sets a precedent for responsible data management. Whether your application serves citizens of the EU or not, the regulations serve as an encouragement for protecting your user’s identities. This talk is great for everyone from beginners to expert Django developers… and fans of Phil Collins :)

This talk was presented at: https://2018.djangocon.us/talk/pseu-pseu-pseudio-pseudonymization-in/

LINKS:
Follow Frank Valcarcel 👇
On Twitter: https://twitter.com/fmdfrank
Official homepage: https://www.cuttlesoft.com

Follow DjangCon US 👇
https://twitter.com/djangocon

Follow DEFNA 👇
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:17,250 --> 00:00:24,660
this is all okay hey everybody thanks

00:00:22,500 --> 00:00:29,269
for joining me for what is probably

00:00:24,660 --> 00:00:31,590
gonna be my my silliest talk of the year

00:00:29,269 --> 00:00:33,210
does just get one thing out of the way

00:00:31,590 --> 00:00:36,090
how many people who know who Phil

00:00:33,210 --> 00:00:38,399
Collins is by show of hands all right

00:00:36,090 --> 00:00:41,190
we're gonna have a lot of fun for those

00:00:38,399 --> 00:00:43,620
of you who do not know who Phil is I've

00:00:41,190 --> 00:00:47,520
got plenty of background information on

00:00:43,620 --> 00:00:48,690
him and he's a yeah well we'll get to

00:00:47,520 --> 00:00:51,449
that part so this talk is called

00:00:48,690 --> 00:00:54,899
Sussudio and it will cover its

00:00:51,449 --> 00:00:55,980
anonymization techniques in Django hi

00:00:54,899 --> 00:01:01,559
I'm Frank

00:00:55,980 --> 00:01:06,170
I'm FMD Frank on Twitter but I am also

00:01:01,559 --> 00:01:08,250
on quite the extended Twitter sabbatical

00:01:06,170 --> 00:01:09,590
you're welcome to go look at my greatest

00:01:08,250 --> 00:01:11,900
hits

00:01:09,590 --> 00:01:14,880
there they are there for you to peruse

00:01:11,900 --> 00:01:16,470
but I may not I may not go bet I don't

00:01:14,880 --> 00:01:18,689
know if I will ever return to the

00:01:16,470 --> 00:01:21,119
Twittersphere I work at a company called

00:01:18,689 --> 00:01:27,119
cuddle soft we have offices in Denver

00:01:21,119 --> 00:01:28,560
Atlanta and Tallahassee Florida and I'm

00:01:27,119 --> 00:01:29,970
an avid pythonista I've been using

00:01:28,560 --> 00:01:31,439
Python as my primary programming

00:01:29,970 --> 00:01:35,240
language for the better part of eight

00:01:31,439 --> 00:01:38,340
years this is my first time at Jenga con

00:01:35,240 --> 00:01:41,210
and I'm very excited to be here I'm also

00:01:38,340 --> 00:01:43,920
the co-founder and chair of Pi Colorado

00:01:41,210 --> 00:01:45,479
we'll be having our inaugural conference

00:01:43,920 --> 00:01:46,590
next year in August I'm happy to talk to

00:01:45,479 --> 00:01:48,450
anybody more about that if you're

00:01:46,590 --> 00:01:51,210
interested please come visit me in

00:01:48,450 --> 00:01:55,409
Denver it's beautiful and then I also

00:01:51,210 --> 00:01:56,479
run Boulder Python in Colorado so yeah

00:01:55,409 --> 00:02:02,100
thanks for having me

00:01:56,479 --> 00:02:03,659
so my speaker in spirit is Phillip oh I

00:02:02,100 --> 00:02:05,600
got forgot his name Phillip sorry it's

00:02:03,659 --> 00:02:08,819
right here Phillip David Charles Collins

00:02:05,600 --> 00:02:10,039
he's an English musician and he's a

00:02:08,819 --> 00:02:11,760
drummer singer songwriter

00:02:10,039 --> 00:02:13,459
multi-instrumentalist record producer

00:02:11,760 --> 00:02:14,870
and an act

00:02:13,459 --> 00:02:18,110
he was the drummer and singer of a rock

00:02:14,870 --> 00:02:20,150
band known as Genesis and during the 80s

00:02:18,110 --> 00:02:22,459
Collins had more u.s. top 40 singles

00:02:20,150 --> 00:02:24,260
than any other artists which if you're

00:02:22,459 --> 00:02:26,510
old enough like me to remember the 80s

00:02:24,260 --> 00:02:27,950
that's actually quite impressive he

00:02:26,510 --> 00:02:29,239
co-wrote a lot of the music on Disney's

00:02:27,950 --> 00:02:31,100
Tarzan for the younger folks in the

00:02:29,239 --> 00:02:35,209
crowd that will be probably how you know

00:02:31,100 --> 00:02:37,220
him and I also I just learned that Peter

00:02:35,209 --> 00:02:40,420
Gabriel none of this is relevant to the

00:02:37,220 --> 00:02:42,620
talk you've probably figured it out but

00:02:40,420 --> 00:02:44,660
Peter Gabriel was the original lead

00:02:42,620 --> 00:02:48,170
singer of Genesis and Phil took over for

00:02:44,660 --> 00:02:50,510
him so why why is Phil my co-speaker and

00:02:48,170 --> 00:02:53,440
spirit well siddhanam ization is an

00:02:50,510 --> 00:02:55,640
incredibly difficult word to say try it

00:02:53,440 --> 00:02:58,069
how many of you got it right yeah so

00:02:55,640 --> 00:03:01,850
Sussudio is close enough and that was

00:02:58,069 --> 00:03:03,890
enough reason for me as of any to do a

00:03:01,850 --> 00:03:05,750
Phil Collins inspired data privacy talk

00:03:03,890 --> 00:03:07,160
also I'm pretty confident I'm the only

00:03:05,750 --> 00:03:09,410
one who have ever to attempted this so

00:03:07,160 --> 00:03:12,760
we'll see how it goes

00:03:09,410 --> 00:03:18,070
alright so if you've never heard of Phil

00:03:12,760 --> 00:03:22,489
that's okay I got you we've got a

00:03:18,070 --> 00:03:25,310
Spotify playlist of some of Phil's

00:03:22,489 --> 00:03:27,709
greatest hits he is on Twitter he's Phil

00:03:25,310 --> 00:03:29,570
Collins feed if you're interested it

00:03:27,709 --> 00:03:31,730
starts with C studio which is the song I

00:03:29,570 --> 00:03:33,500
started this talk off with it gets kind

00:03:31,730 --> 00:03:34,970
of sappy towards the middle like this

00:03:33,500 --> 00:03:37,660
talk will I don't know are there any

00:03:34,970 --> 00:03:41,299
tissues if there are you'll need them

00:03:37,660 --> 00:03:43,190
this is heavy stuff y'all and of course

00:03:41,299 --> 00:03:46,820
this playlist ends with the air drumming

00:03:43,190 --> 00:03:51,680
spectacular in the air tonight so please

00:03:46,820 --> 00:03:53,090
check it out enjoy it alright so let's

00:03:51,680 --> 00:03:55,519
get to the meat and potatoes what what

00:03:53,090 --> 00:03:59,329
is what is this very difficult word to

00:03:55,519 --> 00:04:03,380
say well it's a data D identification

00:03:59,329 --> 00:04:05,420
procedure data records are replaced by

00:04:03,380 --> 00:04:08,690
one or more artificial identifier called

00:04:05,420 --> 00:04:10,400
pseudonyms and the idea behind

00:04:08,690 --> 00:04:12,890
pseudonyms is that it makes the data

00:04:10,400 --> 00:04:15,079
data record less identifiable without

00:04:12,890 --> 00:04:18,739
sacrificing data analysis and processing

00:04:15,079 --> 00:04:20,030
and so why would you do this well

00:04:18,739 --> 00:04:24,620
anything worth protecting is worth

00:04:20,030 --> 00:04:26,930
protecting well and it it provides you

00:04:24,620 --> 00:04:28,520
some security through obscurity

00:04:26,930 --> 00:04:31,340
so you can secure a data set from

00:04:28,520 --> 00:04:33,620
identify identification and it's also

00:04:31,340 --> 00:04:35,930
kind of required by the law not kind of

00:04:33,620 --> 00:04:37,340
it is required by the law I only say

00:04:35,930 --> 00:04:38,780
kind of because there are these gray

00:04:37,340 --> 00:04:42,440
areas which I'm not gonna get into

00:04:38,780 --> 00:04:44,000
because I am NOT a lawyer so do not ask

00:04:42,440 --> 00:04:46,160
me legal advice if you have a question

00:04:44,000 --> 00:04:48,680
at the end and it smells to me like it's

00:04:46,160 --> 00:04:50,960
of need of counsel I will tell you I

00:04:48,680 --> 00:04:57,169
cannot answer that and that you need a

00:04:50,960 --> 00:04:58,610
lawyer so a couple more things as a note

00:04:57,169 --> 00:05:00,560
we're not going to get into the

00:04:58,610 --> 00:05:03,350
mechanics of gdpr I will reference some

00:05:00,560 --> 00:05:04,669
articles if it's important and

00:05:03,350 --> 00:05:06,400
interesting for you to go read it's

00:05:04,669 --> 00:05:08,539
actually not that dense of a regulation

00:05:06,400 --> 00:05:10,060
so we will be avoiding things like

00:05:08,539 --> 00:05:13,070
consent the difference between

00:05:10,060 --> 00:05:14,690
collectors and data processors or how it

00:05:13,070 --> 00:05:16,729
affects your organization again if you

00:05:14,690 --> 00:05:20,030
ask me those questions I am NOT a lawyer

00:05:16,729 --> 00:05:21,500
and I will tell you that but it's

00:05:20,030 --> 00:05:23,360
important for us to define exactly what

00:05:21,500 --> 00:05:26,419
it is that we are discussing today and

00:05:23,360 --> 00:05:28,699
that is specifically personal data this

00:05:26,419 --> 00:05:31,639
is also known as personally identifiable

00:05:28,699 --> 00:05:35,500
information the gist is that personal

00:05:31,639 --> 00:05:37,400
data is any identifiable data or PII

00:05:35,500 --> 00:05:39,860
note that gdpr

00:05:37,400 --> 00:05:41,000
refers to it as just personal data one

00:05:39,860 --> 00:05:42,710
of the things about the regulation that

00:05:41,000 --> 00:05:44,780
I don't like so much is that it does

00:05:42,710 --> 00:05:46,520
paint in very very broad strokes so

00:05:44,780 --> 00:05:51,229
essentially any information that can be

00:05:46,520 --> 00:05:55,370
used to identify a user a person there's

00:05:51,229 --> 00:05:59,960
there's this regulation around so some

00:05:55,370 --> 00:06:01,910
examples basically it's this is if you

00:05:59,960 --> 00:06:03,740
can identify someone with it or it can

00:06:01,910 --> 00:06:06,800
be used to identify someone with or

00:06:03,740 --> 00:06:09,190
without a secondary data point then yes

00:06:06,800 --> 00:06:13,340
it's personally identifiable information

00:06:09,190 --> 00:06:16,610
if you're unsure chances are that it's

00:06:13,340 --> 00:06:18,410
personally identifiable information so

00:06:16,610 --> 00:06:21,080
let's talk about data privacy techniques

00:06:18,410 --> 00:06:23,930
right there's two very popular methods

00:06:21,080 --> 00:06:26,389
there is pseudonymous ation and a non

00:06:23,930 --> 00:06:27,620
anonymization beyond being very

00:06:26,389 --> 00:06:30,410
difficult to pronounce the first few

00:06:27,620 --> 00:06:32,360
times that you practice them they are

00:06:30,410 --> 00:06:37,490
they're the two most common approaches

00:06:32,360 --> 00:06:39,650
to doing data privacy over PII siddhanam

00:06:37,490 --> 00:06:42,169
ization we kind of covered a bit already

00:06:39,650 --> 00:06:44,960
I want to also point out that according

00:06:42,169 --> 00:06:46,880
to article 25 of GDP our data must be

00:06:44,960 --> 00:06:48,979
protected and by design and by default

00:06:46,880 --> 00:06:50,600
so these are important things to

00:06:48,979 --> 00:06:53,660
consider when you are planning even in

00:06:50,600 --> 00:06:55,820
the planning stages of a system and if

00:06:53,660 --> 00:06:57,770
you want to understand the requirements

00:06:55,820 --> 00:07:02,960
underneath the regulation I recommend

00:06:57,770 --> 00:07:03,400
you read articles 25 and 32 I'll note

00:07:02,960 --> 00:07:07,039
that

00:07:03,400 --> 00:07:08,630
gep are only recommends one technique by

00:07:07,039 --> 00:07:10,160
name and that is siddhanam is a ssin

00:07:08,630 --> 00:07:14,800
although they spell it with an S and not

00:07:10,160 --> 00:07:17,150
a Z it's something I've learned

00:07:14,800 --> 00:07:19,400
anonymization is a more permanent D

00:07:17,150 --> 00:07:21,710
identification procedure with

00:07:19,400 --> 00:07:24,949
anonymization you render the use the the

00:07:21,710 --> 00:07:26,990
the users data unidentifiable so maybe

00:07:24,949 --> 00:07:29,289
one of the reasons why the many teams of

00:07:26,990 --> 00:07:31,520
lawyers that wrote GDP ARS regulations

00:07:29,289 --> 00:07:33,800
avoided using anonymization is that the

00:07:31,520 --> 00:07:35,840
fact the mere fact of the operation of

00:07:33,800 --> 00:07:37,490
anonymizing a data set makes it no

00:07:35,840 --> 00:07:39,289
longer personal or personally

00:07:37,490 --> 00:07:41,389
identifiable so it actually doesn't fall

00:07:39,289 --> 00:07:42,550
underneath the purview of gdpr which is

00:07:41,389 --> 00:07:45,440
something i think is really interesting

00:07:42,550 --> 00:07:47,360
if you are struggling to understand the

00:07:45,440 --> 00:07:49,039
differences I'll have some examples on

00:07:47,360 --> 00:07:50,030
sadhana's ation but if you're struggling

00:07:49,039 --> 00:07:53,690
to understand the differences between

00:07:50,030 --> 00:07:55,490
the two I've made this drawing to help

00:07:53,690 --> 00:07:58,539
articulate the differences between

00:07:55,490 --> 00:08:01,820
siddhanam ization and anonymization

00:07:58,539 --> 00:08:03,530
anonymization is essentially like I

00:08:01,820 --> 00:08:05,440
think of it as analogy to like Batman's

00:08:03,530 --> 00:08:08,539
very clever disguise right when he puts

00:08:05,440 --> 00:08:11,500
it when he puts the mask on you can't

00:08:08,539 --> 00:08:14,960
tell it's Bruce Wayne anymore thank you

00:08:11,500 --> 00:08:16,070
but Superman not so much he's got he

00:08:14,960 --> 00:08:18,260
combs his hair a little bit differently

00:08:16,070 --> 00:08:20,479
and he put some glasses on so at least

00:08:18,260 --> 00:08:22,580
to all the people in Metropolis that are

00:08:20,479 --> 00:08:24,320
just not that keen to see that he is the

00:08:22,580 --> 00:08:26,419
same person he is siddhanam eyes they

00:08:24,320 --> 00:08:28,490
can't tell it's him but to us the

00:08:26,419 --> 00:08:29,449
readers there's no anonymization layer

00:08:28,490 --> 00:08:32,029
going on right

00:08:29,449 --> 00:08:34,400
I really just use this as an excuse to

00:08:32,029 --> 00:08:38,240
make this incredibly funny slide I think

00:08:34,400 --> 00:08:42,169
it worked out so let's dive deeper into

00:08:38,240 --> 00:08:43,610
siddhanam is a ssin techniques the the

00:08:42,169 --> 00:08:45,800
one that we will probably go over in

00:08:43,610 --> 00:08:47,180
this is the one that we are going to go

00:08:45,800 --> 00:08:50,029
over is a technique called data masking

00:08:47,180 --> 00:08:52,310
and so Tomas data characters are in a

00:08:50,029 --> 00:08:54,020
record are shuffled or substituted in

00:08:52,310 --> 00:08:56,180
words maybe some may be substituted

00:08:54,020 --> 00:08:58,130
or obscured completely the result is

00:08:56,180 --> 00:08:59,720
usually a realistic data set that cannot

00:08:58,130 --> 00:09:02,300
be reverse engineered without the re

00:08:59,720 --> 00:09:05,270
identifying information or the or the

00:09:02,300 --> 00:09:07,250
algorithm to reverse the masking

00:09:05,270 --> 00:09:09,610
technique there are a lot of techniques

00:09:07,250 --> 00:09:12,410
that fall under this broader category

00:09:09,610 --> 00:09:15,050
there's also a method known as

00:09:12,410 --> 00:09:18,080
approximation which is instead of saving

00:09:15,050 --> 00:09:20,210
the information the users PII by itself

00:09:18,080 --> 00:09:22,700
you approximate it so one of the common

00:09:20,210 --> 00:09:24,440
practices this is used for is for date

00:09:22,700 --> 00:09:25,820
of births sometimes you don't want to

00:09:24,440 --> 00:09:27,920
save a date of birth you just want to

00:09:25,820 --> 00:09:29,510
know how old or maybe the birth month or

00:09:27,920 --> 00:09:31,040
maybe the birth year so then you have a

00:09:29,510 --> 00:09:33,800
table with those numbers and you're

00:09:31,040 --> 00:09:35,270
increment those once a user subscribes

00:09:33,800 --> 00:09:38,630
or enters that information and you don't

00:09:35,270 --> 00:09:42,020
save that user's date of birth record

00:09:38,630 --> 00:09:45,140
specifically another method very popular

00:09:42,020 --> 00:09:46,640
encryption and this is something that I

00:09:45,140 --> 00:09:49,160
expect most people will be familiar with

00:09:46,640 --> 00:09:53,050
I do have a question though is does

00:09:49,160 --> 00:09:57,680
anybody know if this is required by gdpr

00:09:53,050 --> 00:09:59,870
no it is not not as a data D

00:09:57,680 --> 00:10:01,940
identification procedure encryption is

00:09:59,870 --> 00:10:04,330
required for data at rest and in transit

00:10:01,940 --> 00:10:06,740
but it is not the recommended nor

00:10:04,330 --> 00:10:08,810
requirement under gdpr for how to

00:10:06,740 --> 00:10:12,350
identify how to de-identify your user

00:10:08,810 --> 00:10:13,520
data this is actually kind of

00:10:12,350 --> 00:10:15,440
interesting because one of the big

00:10:13,520 --> 00:10:16,820
premises is why I doing this talking

00:10:15,440 --> 00:10:18,410
siddhanam ization there's a it's fun

00:10:16,820 --> 00:10:20,780
because the Phil Collins aspect but -

00:10:18,410 --> 00:10:23,120
it's actually better for you as an

00:10:20,780 --> 00:10:24,770
organization and someone who's serving

00:10:23,120 --> 00:10:26,540
maybe the role as the data processor and

00:10:24,770 --> 00:10:28,480
the and the database administrator

00:10:26,540 --> 00:10:31,160
siddhanam ization gives you a lot of

00:10:28,480 --> 00:10:33,770
value back that you don't necessarily

00:10:31,160 --> 00:10:36,260
have to jump to encrypting that data set

00:10:33,770 --> 00:10:37,790
because this will add compute resource

00:10:36,260 --> 00:10:39,860
or compute resource requirements that

00:10:37,790 --> 00:10:41,180
you don't necessarily need this is at

00:10:39,860 --> 00:10:45,470
least my philosophy again I'm not a

00:10:41,180 --> 00:10:49,810
lawyer so and then the final pattern is

00:10:45,470 --> 00:10:53,480
tokenization which is very common used

00:10:49,810 --> 00:10:55,520
commonly used by companies like PayPal

00:10:53,480 --> 00:10:58,130
or Apple pay or stripe they will

00:10:55,520 --> 00:10:59,960
tokenize a credit card information and

00:10:58,130 --> 00:11:01,280
then they use that token to retrieve

00:10:59,960 --> 00:11:03,140
that information when they need it they

00:11:01,280 --> 00:11:05,330
only process those that those data

00:11:03,140 --> 00:11:07,700
points when they need to otherwise it's

00:11:05,330 --> 00:11:09,290
saved on either the clients

00:11:07,700 --> 00:11:15,620
the client side the vendor side as this

00:11:09,290 --> 00:11:18,130
token representation this is song 2 on

00:11:15,620 --> 00:11:20,900
the playlist if you're following along

00:11:18,130 --> 00:11:23,120
alright so I'm going to go over a simple

00:11:20,900 --> 00:11:24,470
implementation example this is going to

00:11:23,120 --> 00:11:27,230
set the foundation for how we're going

00:11:24,470 --> 00:11:29,810
to scale this up in our in our Django

00:11:27,230 --> 00:11:31,250
example so Python already supports a

00:11:29,810 --> 00:11:32,810
common pattern that allows engineers to

00:11:31,250 --> 00:11:35,360
replace attributes with a set of methods

00:11:32,810 --> 00:11:37,040
that can intercept values when they are

00:11:35,360 --> 00:11:41,690
written in there and when there are read

00:11:37,040 --> 00:11:43,640
any guesses as to what they are not

00:11:41,690 --> 00:11:48,350
trick question but they are either

00:11:43,640 --> 00:11:50,000
getters and setters of the properties so

00:11:48,350 --> 00:11:53,020
for the following examples and for the

00:11:50,000 --> 00:11:55,010
continuing examples through the Django

00:11:53,020 --> 00:11:56,300
methods that I'm going to show you all

00:11:55,010 --> 00:11:59,330
we're going to use this ring credibly

00:11:56,300 --> 00:12:01,610
simple masking algorithm the masking

00:11:59,330 --> 00:12:03,860
algorithm does it all it does is shift

00:12:01,610 --> 00:12:06,920
each character one ordinal to the right

00:12:03,860 --> 00:12:08,300
and then when it reaiiy denta Faiz them

00:12:06,920 --> 00:12:10,760
it shifts them to the left it doesn't it

00:12:08,300 --> 00:12:14,060
arranged so that it can not overrun the

00:12:10,760 --> 00:12:15,590
owner no ranges for ASCII characters so

00:12:14,060 --> 00:12:17,390
it's it's intelligent from that point

00:12:15,590 --> 00:12:18,530
but it's very unintelligent if you use

00:12:17,390 --> 00:12:21,740
this in production because it's an

00:12:18,530 --> 00:12:24,730
insanely easy to reverse engineer I'm

00:12:21,740 --> 00:12:28,400
also not going to talk about algorithms

00:12:24,730 --> 00:12:31,670
or best practices for doing masking

00:12:28,400 --> 00:12:34,510
because we first I shouldn't share it

00:12:31,670 --> 00:12:37,310
with you - this is being recorded and

00:12:34,510 --> 00:12:39,650
why would I like why would I you know

00:12:37,310 --> 00:12:41,240
implicate all of us by sharing an

00:12:39,650 --> 00:12:43,460
algorithm that then somebody here may go

00:12:41,240 --> 00:12:47,900
and use and then that is reverse

00:12:43,460 --> 00:12:49,850
engineer now I am culpable so it's also

00:12:47,900 --> 00:12:51,680
this is a lot easier for everybody

00:12:49,850 --> 00:12:55,310
usually to understand and so if I had a

00:12:51,680 --> 00:12:57,440
more complex or sophisticated masking

00:12:55,310 --> 00:13:00,410
algorithm that would take the bulk of

00:12:57,440 --> 00:13:01,760
time we have for the talk so to mask and

00:13:00,410 --> 00:13:05,660
unmask we're just gonna have two methods

00:13:01,760 --> 00:13:07,670
mask and unmask and then essentially

00:13:05,660 --> 00:13:09,890
this is how it would work right we're

00:13:07,670 --> 00:13:12,650
shifting my name Frank Val cárcel over

00:13:09,890 --> 00:13:15,220
every character over one and that's what

00:13:12,650 --> 00:13:17,720
the masked version of it would look like

00:13:15,220 --> 00:13:20,240
so an implementation of this if we're

00:13:17,720 --> 00:13:21,050
just using a basic user class we have

00:13:20,240 --> 00:13:22,940
undone

00:13:21,050 --> 00:13:24,080
or name property sorry an underscore

00:13:22,940 --> 00:13:25,850
name attribute and then we have a

00:13:24,080 --> 00:13:28,399
property method for it called name and a

00:13:25,850 --> 00:13:31,130
setter on name and then we just call our

00:13:28,399 --> 00:13:34,550
mask and unmask methods underneath those

00:13:31,130 --> 00:13:36,260
two functions and so it'll look

00:13:34,550 --> 00:13:38,750
something like this now so when I

00:13:36,260 --> 00:13:41,029
instantiate user I'll set the user name

00:13:38,750 --> 00:13:43,130
as my name if I print user name it's

00:13:41,029 --> 00:13:44,660
coming from the property so it'll return

00:13:43,130 --> 00:13:46,399
my name but if I'm looking at the

00:13:44,660 --> 00:13:48,380
underscore name attribute its returning

00:13:46,399 --> 00:13:50,149
the sadhana mised version this is

00:13:48,380 --> 00:13:51,890
important to understand because what's

00:13:50,149 --> 00:13:54,170
being saved in the object and therefore

00:13:51,890 --> 00:13:57,290
could be serialized later is the sadhana

00:13:54,170 --> 00:13:59,029
mised version it wouldn't be my name my

00:13:57,290 --> 00:14:04,360
name is only being reaiiy denta fide in

00:13:59,029 --> 00:14:04,360
transit so let's look at django example

00:14:04,390 --> 00:14:10,640
this is song 3 on the playlist if you're

00:14:06,890 --> 00:14:11,750
following along and so we're going to

00:14:10,640 --> 00:14:13,040
take the same concepts i'm going to add

00:14:11,750 --> 00:14:16,730
a few attributes but we're gonna focus

00:14:13,040 --> 00:14:21,140
in on the name field quick question how

00:14:16,730 --> 00:14:24,380
many of these attributes are PII all of

00:14:21,140 --> 00:14:26,779
them yeah they're all identifiable

00:14:24,380 --> 00:14:28,339
because together something like the IP

00:14:26,779 --> 00:14:30,290
address with one of the other data

00:14:28,339 --> 00:14:33,620
points makes this the user who saved

00:14:30,290 --> 00:14:35,899
identifiable so we're gonna move our

00:14:33,620 --> 00:14:38,420
shifting algorithm are masking algorithm

00:14:35,899 --> 00:14:39,649
into a utils file the code for this is

00:14:38,420 --> 00:14:42,200
all available later I'll share the link

00:14:39,649 --> 00:14:45,560
with you and then our mask and unmask

00:14:42,200 --> 00:14:47,089
methods then now here's the user

00:14:45,560 --> 00:14:48,860
attribute again focusing in on just the

00:14:47,089 --> 00:14:52,220
name field we've done the same process

00:14:48,860 --> 00:14:53,750
its underscore name and we have a getter

00:14:52,220 --> 00:14:55,550
and a setter applied to it which will

00:14:53,750 --> 00:14:59,990
mask and unmask as that data moves in

00:14:55,550 --> 00:15:02,300
and out of the objects so the problem is

00:14:59,990 --> 00:15:03,380
that we're not done and for sake of time

00:15:02,300 --> 00:15:04,790
I'm going to speed through the rest of

00:15:03,380 --> 00:15:05,980
this because I want to get to the second

00:15:04,790 --> 00:15:08,510
example

00:15:05,980 --> 00:15:10,130
the models query set doesn't yet support

00:15:08,510 --> 00:15:13,730
our properties you can not filter you

00:15:10,130 --> 00:15:16,510
cannot exclude on the identifiable data

00:15:13,730 --> 00:15:19,310
values right you have to know that Frank

00:15:16,510 --> 00:15:21,110
will be siddhanam eyes and mastic is

00:15:19,310 --> 00:15:22,160
Bowl or something like that right and so

00:15:21,110 --> 00:15:24,380
therefore that's not a very intuitive

00:15:22,160 --> 00:15:26,420
way to interact with your data models

00:15:24,380 --> 00:15:27,949
the other thing is that if pseudonyms

00:15:26,420 --> 00:15:29,120
are now included in all of our user

00:15:27,949 --> 00:15:31,010
objects everywhere that we're retrieving

00:15:29,120 --> 00:15:33,410
them which pollutes the user model I'm

00:15:31,010 --> 00:15:34,640
sorry it's the object it's it's useless

00:15:33,410 --> 00:15:37,370
it's just going to add

00:15:34,640 --> 00:15:39,170
wait to that that data object and we

00:15:37,370 --> 00:15:41,800
don't need it and then also the Django

00:15:39,170 --> 00:15:44,060
admin has no idea what to do with this

00:15:41,800 --> 00:15:48,230
so first let's start updating the query

00:15:44,060 --> 00:15:50,150
set we are going to monkey patch some of

00:15:48,230 --> 00:15:51,320
the methods on query set so that we can

00:15:50,150 --> 00:15:53,120
filter and exclude I'm not going to do

00:15:51,320 --> 00:15:54,140
all of them I'm just gonna do filter and

00:15:53,120 --> 00:15:55,460
exclude and I'll show you that we

00:15:54,140 --> 00:15:56,900
actually get a few more there's a bit

00:15:55,460 --> 00:15:59,900
bang for your buck by just monkey

00:15:56,900 --> 00:16:01,370
patching these also for sake of time I

00:15:59,900 --> 00:16:03,680
won't be looking at the source code but

00:16:01,370 --> 00:16:05,240
just to note the reasons why this is the

00:16:03,680 --> 00:16:07,070
reason why this is here is that when you

00:16:05,240 --> 00:16:08,840
patch filter exclude you get filter

00:16:07,070 --> 00:16:10,700
exclude and get out of the box so you

00:16:08,840 --> 00:16:13,130
only have to match that one function and

00:16:10,700 --> 00:16:16,700
you can see this in the source code that

00:16:13,130 --> 00:16:18,860
they all just call filter exclude then

00:16:16,700 --> 00:16:20,690
we'll insert our mast values and we will

00:16:18,860 --> 00:16:22,970
super the parent instance of our custom

00:16:20,690 --> 00:16:24,440
models query set for everything else so

00:16:22,970 --> 00:16:27,860
this is what this will look like in code

00:16:24,440 --> 00:16:30,680
we have our mast fields name and then we

00:16:27,860 --> 00:16:32,630
iterate over the masks fields and create

00:16:30,680 --> 00:16:37,550
aka a keyword argument that they mean

00:16:32,630 --> 00:16:41,930
then passed to our there's our filter

00:16:37,550 --> 00:16:43,970
exclude customize method so now we'll be

00:16:41,930 --> 00:16:45,440
able to do things like filter on the

00:16:43,970 --> 00:16:47,810
identifiable name or exclude on the

00:16:45,440 --> 00:16:51,020
identifiable names and then the last

00:16:47,810 --> 00:16:53,240
thing we need to do is override the off

00:16:51,020 --> 00:16:54,410
user manager get query set and you can

00:16:53,240 --> 00:16:55,870
see how I've done that there for the

00:16:54,410 --> 00:16:57,800
object

00:16:55,870 --> 00:17:01,220
second thing we have to do is exclude

00:16:57,800 --> 00:17:02,420
pseudonyms and suitor names are really

00:17:01,220 --> 00:17:03,740
useless like I said they pollute the

00:17:02,420 --> 00:17:05,930
models so there's actually a method

00:17:03,740 --> 00:17:07,550
called defer the gist is that if you

00:17:05,930 --> 00:17:09,860
don't need a particular field when you

00:17:07,550 --> 00:17:11,360
fetch the data you can tell Jango not to

00:17:09,860 --> 00:17:14,209
retrieve them from the database using

00:17:11,360 --> 00:17:16,280
defer so it's very similar to the last

00:17:14,209 --> 00:17:19,339
we'll create a new list

00:17:16,280 --> 00:17:21,410
hey f strings for the win will iterate

00:17:19,339 --> 00:17:23,510
all over all the attributes in our model

00:17:21,410 --> 00:17:25,040
that start with underscore and then

00:17:23,510 --> 00:17:27,530
we'll add them to our keyword arguments

00:17:25,040 --> 00:17:30,170
that we passed to defer which is chained

00:17:27,530 --> 00:17:36,860
at the end of our monkey patched filter

00:17:30,170 --> 00:17:38,210
or exclude and now when we query using

00:17:36,860 --> 00:17:40,880
filter we can use the identifiable

00:17:38,210 --> 00:17:42,110
information and then also the object

00:17:40,880 --> 00:17:44,210
that is returned does not have those

00:17:42,110 --> 00:17:46,790
pseudonyms in inside of it

00:17:44,210 --> 00:17:48,850
I didn't overwrite all you would have to

00:17:46,790 --> 00:17:51,290
overwrite all in this method

00:17:48,850 --> 00:17:54,080
the last step here is updating the

00:17:51,290 --> 00:17:55,820
Django admin so right read is masked and

00:17:54,080 --> 00:17:57,830
unmasked but what about Django admin

00:17:55,820 --> 00:17:59,300
well it doesn't know how to do this it

00:17:57,830 --> 00:18:00,860
doesn't know that we want to display the

00:17:59,300 --> 00:18:02,810
unmasked values in the admin it doesn't

00:18:00,860 --> 00:18:07,130
know to mask those values when you

00:18:02,810 --> 00:18:08,810
submit the forms in the admin so we have

00:18:07,130 --> 00:18:13,850
to start by telling it what fields we

00:18:08,810 --> 00:18:15,410
want to show then we'll begin to define

00:18:13,850 --> 00:18:17,270
a form that we can swap out in place for

00:18:15,410 --> 00:18:18,710
the default one Django wants to use you

00:18:17,270 --> 00:18:21,560
can see we're overwriting the built-in

00:18:18,710 --> 00:18:23,990
user change form from Django contributes

00:18:21,560 --> 00:18:27,230
and we're creating a form with the new

00:18:23,990 --> 00:18:28,640
char field on initialization we get the

00:18:27,230 --> 00:18:30,980
correct value and check it against the

00:18:28,640 --> 00:18:32,600
validator for our masked field which

00:18:30,980 --> 00:18:34,070
could be important with something like a

00:18:32,600 --> 00:18:36,560
phone number if you were using phone

00:18:34,070 --> 00:18:38,180
regex and when the forms clean method is

00:18:36,560 --> 00:18:43,520
called we can get the appropriate value

00:18:38,180 --> 00:18:45,530
or error out on invalid input next we've

00:18:43,520 --> 00:18:47,210
got to register this so we have our base

00:18:45,530 --> 00:18:48,590
fields of the model namely username and

00:18:47,210 --> 00:18:51,050
password but now we've created a group

00:18:48,590 --> 00:18:53,210
of subfields called personal data and

00:18:51,050 --> 00:18:55,370
we've added the name property to it and

00:18:53,210 --> 00:18:57,260
last we told Django admin how we would

00:18:55,370 --> 00:18:59,180
like to use how we would like the users

00:18:57,260 --> 00:19:01,100
to be displayed in the user list I will

00:18:59,180 --> 00:19:03,710
note that this last step could be very

00:19:01,100 --> 00:19:05,480
important and you may want to under the

00:19:03,710 --> 00:19:07,340
regulations of gdpr you may want to add

00:19:05,480 --> 00:19:09,830
some logging on this because creating an

00:19:07,340 --> 00:19:11,600
article 30 each processor shall maintain

00:19:09,830 --> 00:19:13,040
a record of all categories of processing

00:19:11,600 --> 00:19:14,870
activities carried out on behalf of a

00:19:13,040 --> 00:19:16,910
controller and a controller can be

00:19:14,870 --> 00:19:18,830
someone with access to the Django admin

00:19:16,910 --> 00:19:20,420
whereas a processor could be you the

00:19:18,830 --> 00:19:22,790
engineer who wrote this process right

00:19:20,420 --> 00:19:24,590
you are obligated and responsible for

00:19:22,790 --> 00:19:26,900
logging every time someone reaiiy denta

00:19:24,590 --> 00:19:28,820
Faiz this PII when it happened who did

00:19:26,900 --> 00:19:31,490
it and sometimes why they did it what

00:19:28,820 --> 00:19:33,140
that business process was and so we are

00:19:31,490 --> 00:19:34,610
set this we have we have finally

00:19:33,140 --> 00:19:36,710
encapsulated some pseudonymous ation

00:19:34,610 --> 00:19:38,330
through the entire lifecycle of this

00:19:36,710 --> 00:19:40,160
object and how we manage the data of

00:19:38,330 --> 00:19:42,350
this object it's stored in the database

00:19:40,160 --> 00:19:46,460
as its sadhana Mies field and when we

00:19:42,350 --> 00:19:49,730
retrieve it it will be the identify that

00:19:46,460 --> 00:19:52,610
identified values and best we have

00:19:49,730 --> 00:19:54,260
access through the Django admin to work

00:19:52,610 --> 00:19:55,580
with that data as it as it says

00:19:54,260 --> 00:19:59,180
identified but it's always going to be

00:19:55,580 --> 00:20:00,710
saved as a pseudonymous field so the

00:19:59,180 --> 00:20:01,550
next example is a new and improved

00:20:00,710 --> 00:20:03,020
method

00:20:01,550 --> 00:20:06,080
it's a it's a lot more straightforward

00:20:03,020 --> 00:20:07,670
than the last one I show the last one

00:20:06,080 --> 00:20:09,050
that I build up from it because there's

00:20:07,670 --> 00:20:10,730
there's a lot of work that needs to be

00:20:09,050 --> 00:20:12,560
done on legacy code and just because the

00:20:10,730 --> 00:20:15,170
last method was naive doesn't mean that

00:20:12,560 --> 00:20:17,690
doesn't make it wrong that you may have

00:20:15,170 --> 00:20:20,300
a system that has very few fields that

00:20:17,690 --> 00:20:22,730
constitute PII and you need to create

00:20:20,300 --> 00:20:25,730
some safety and regulation compliance

00:20:22,730 --> 00:20:27,320
for your clients that last method isn't

00:20:25,730 --> 00:20:29,110
bad it's just that there are better ones

00:20:27,320 --> 00:20:33,970
if you are starting from the ground up

00:20:29,110 --> 00:20:33,970
if you're following along this is song 7

00:20:34,210 --> 00:20:40,070
so we are going to do data masking the

00:20:36,890 --> 00:20:41,600
custom fields using a custom field class

00:20:40,070 --> 00:20:43,300
we will automatically mask values on

00:20:41,600 --> 00:20:45,560
their way in and out of the database

00:20:43,300 --> 00:20:47,780
with this approach we no longer require

00:20:45,560 --> 00:20:49,490
getters and setters the custom query set

00:20:47,780 --> 00:20:51,140
and corresponding user manager or the

00:20:49,490 --> 00:20:54,040
bulk of changes we did to the user admin

00:20:51,140 --> 00:20:56,270
because we're doing at the field level

00:20:54,040 --> 00:20:59,000
so we're taking the same user model as

00:20:56,270 --> 00:21:02,900
before and here's our customized field

00:20:59,000 --> 00:21:04,280
it's called sadhana mais field the class

00:21:02,900 --> 00:21:06,770
constructor and Deconstructor methods

00:21:04,280 --> 00:21:08,180
will accept a field type so we need to

00:21:06,770 --> 00:21:09,740
tell it what kind of field we are saving

00:21:08,180 --> 00:21:12,950
underneath this will set the appropriate

00:21:09,740 --> 00:21:14,390
database column and our deconstruct

00:21:12,950 --> 00:21:16,130
method has to mirror any argument

00:21:14,390 --> 00:21:17,600
changes we make in the constructor this

00:21:16,130 --> 00:21:21,260
is the only thing I don't like about

00:21:17,600 --> 00:21:25,640
this method we will also override the

00:21:21,260 --> 00:21:28,880
get internal type which specifies the

00:21:25,640 --> 00:21:32,540
internal type of the field I'm sorry

00:21:28,880 --> 00:21:34,640
try to show it to you guys if you've

00:21:32,540 --> 00:21:37,400
seen the field the source code for field

00:21:34,640 --> 00:21:39,590
this will look familiar we are we are

00:21:37,400 --> 00:21:41,990
essentially overriding some of it to

00:21:39,590 --> 00:21:43,460
provide and masking an unmasking method

00:21:41,990 --> 00:21:45,380
when that data goes in and comes out of

00:21:43,460 --> 00:21:46,880
the database and all of that work is

00:21:45,380 --> 00:21:49,160
done by these two methods get prepped

00:21:46,880 --> 00:21:51,230
value is called prior to interacting

00:21:49,160 --> 00:21:53,030
with the database and then from Devia DB

00:21:51,230 --> 00:21:55,070
value is called in at a value is pulled

00:21:53,030 --> 00:21:56,570
from the database so this is the core of

00:21:55,070 --> 00:21:57,800
this implementation this is what makes

00:21:56,570 --> 00:22:00,080
it sing

00:21:57,800 --> 00:22:01,940
we'll use get prepped value as an

00:22:00,080 --> 00:22:04,670
opportunity to mask values before they

00:22:01,940 --> 00:22:06,760
are saved and will mask values for query

00:22:04,670 --> 00:22:09,110
purposes which they this is really cool

00:22:06,760 --> 00:22:11,030
also will unmask our values when they're

00:22:09,110 --> 00:22:12,350
pulled from the DB and their before

00:22:11,030 --> 00:22:15,410
they're converted to a Python object

00:22:12,350 --> 00:22:16,820
using DB value and so this is what it

00:22:15,410 --> 00:22:19,790
would look like when we apply it to our

00:22:16,820 --> 00:22:23,300
user model we have a field noun for name

00:22:19,790 --> 00:22:25,370
of pseudonymous field and we tell it

00:22:23,300 --> 00:22:27,380
what type of field it will be like what

00:22:25,370 --> 00:22:29,270
the field is underneath the hood there's

00:22:27,380 --> 00:22:31,160
a tuple here that accepts the masking in

00:22:29,270 --> 00:22:32,780
the unmasking algorithm so these are not

00:22:31,160 --> 00:22:34,460
tied to the customized field you can

00:22:32,780 --> 00:22:35,990
swap these out you can use different

00:22:34,460 --> 00:22:37,070
ones for different field types in fact

00:22:35,990 --> 00:22:38,690
that may be one of the ways to improve

00:22:37,070 --> 00:22:40,850
upon this is to have something

00:22:38,690 --> 00:22:42,680
underneath that knows intuitively how to

00:22:40,850 --> 00:22:44,480
shift something like a phone number or

00:22:42,680 --> 00:22:47,450
something like a zip code or something

00:22:44,480 --> 00:22:49,040
like a name or a date of birth and you

00:22:47,450 --> 00:22:53,840
can see that there's still validations

00:22:49,040 --> 00:22:58,340
that can happen on the phone field and

00:22:53,840 --> 00:23:00,200
that's it y'all so thank you I am gonna

00:22:58,340 --> 00:23:02,090
take questions there is a sample there's

00:23:00,200 --> 00:23:04,970
some sample code and a blog post

00:23:02,090 --> 00:23:13,120
associated to this and you can find them

00:23:04,970 --> 00:23:19,010
at those links I see yes sample could

00:23:13,120 --> 00:23:25,100
have you packaged up this pseudonym ice

00:23:19,010 --> 00:23:25,730
field by PI by PI so it can be used by

00:23:25,100 --> 00:23:29,450
other people

00:23:25,730 --> 00:23:31,090
I wanted to well so I shouldn't say I we

00:23:29,450 --> 00:23:33,740
wanted to this is a collective effort

00:23:31,090 --> 00:23:34,600
with the number of engineers at that

00:23:33,740 --> 00:23:37,400
couple soft

00:23:34,600 --> 00:23:41,600
we've chosen not to you mostly because

00:23:37,400 --> 00:23:44,840
the pseudonym ice field code isn't that

00:23:41,600 --> 00:23:46,820
it isn't that verbose and we don't see

00:23:44,840 --> 00:23:48,760
the value in having something like that

00:23:46,820 --> 00:23:50,570
easily like injectable and like are

00:23:48,760 --> 00:23:52,760
available for your code you can just

00:23:50,570 --> 00:23:54,290
copy and paste it we also think that

00:23:52,760 --> 00:23:56,380
there's a number of ways to improve upon

00:23:54,290 --> 00:23:58,760
it which we haven't gotten around to yet

00:23:56,380 --> 00:24:00,710
but it's just not I don't know to me it

00:23:58,760 --> 00:24:01,760
doesn't it's not significant enough of

00:24:00,710 --> 00:24:04,420
source code that we need to have a

00:24:01,760 --> 00:24:07,010
package for it hi thanks for the talk

00:24:04,420 --> 00:24:09,200
can you explain why you wouldn't use

00:24:07,010 --> 00:24:11,720
encryption as a pseudonymous ation

00:24:09,200 --> 00:24:14,810
method instead of kind of rolling your

00:24:11,720 --> 00:24:17,150
own pretty much there's a lot of reasons

00:24:14,810 --> 00:24:19,100
to use it so it just depends on the use

00:24:17,150 --> 00:24:21,380
case I think siddhanam is a ssin doesn't

00:24:19,100 --> 00:24:24,230
require encryption as it's masking

00:24:21,380 --> 00:24:26,330
unmasking method i think you can achieve

00:24:24,230 --> 00:24:27,670
a lot with the clever sorting or

00:24:26,330 --> 00:24:29,890
shifting algorithm

00:24:27,670 --> 00:24:33,850
that you control or that maybe even you

00:24:29,890 --> 00:24:35,860
cede somehow right encryption encrypting

00:24:33,850 --> 00:24:38,080
and decrypting the the objects

00:24:35,860 --> 00:24:40,420
attributes adds a lot of compute

00:24:38,080 --> 00:24:42,250
resources or adds the requirement of

00:24:40,420 --> 00:24:43,780
needing a lot of compute resources and

00:24:42,250 --> 00:24:47,170
so sometimes I just don't think it's

00:24:43,780 --> 00:24:50,890
necessary to add that type of overhead

00:24:47,170 --> 00:24:52,210
when there are perfectly you know there

00:24:50,890 --> 00:24:54,940
are methods that exist that will

00:24:52,210 --> 00:24:58,630
perfectly handle the regulatory

00:24:54,940 --> 00:25:00,640
compliance of it the other reason is

00:24:58,630 --> 00:25:02,770
that think about it from like a database

00:25:00,640 --> 00:25:04,840
administrators perspective like

00:25:02,770 --> 00:25:07,210
sometimes you encrypt something and it

00:25:04,840 --> 00:25:10,450
fills out a lot more space than you know

00:25:07,210 --> 00:25:11,890
like a phone number would whereas like

00:25:10,450 --> 00:25:13,390
if you are saving a phone number that's

00:25:11,890 --> 00:25:16,000
just shift shifted around using some

00:25:13,390 --> 00:25:17,350
unique method the the database space and

00:25:16,000 --> 00:25:18,880
therefore the representation of that

00:25:17,350 --> 00:25:21,040
data and the database looks a lot more

00:25:18,880 --> 00:25:26,430
like the identified data right versus

00:25:21,040 --> 00:25:28,330
some you know long hash hi I was just

00:25:26,430 --> 00:25:31,600
trying to figure out how to phrase this

00:25:28,330 --> 00:25:34,270
question so this is a really useful

00:25:31,600 --> 00:25:37,350
example of how to adhere to gdpr

00:25:34,270 --> 00:25:40,240
I guess that the broader question is if

00:25:37,350 --> 00:25:44,130
this is a useful way to make data more

00:25:40,240 --> 00:25:48,280
anonymized irrespective of gdpr

00:25:44,130 --> 00:25:51,490
criteria do you have general advice for

00:25:48,280 --> 00:26:03,640
like people building whole apps to be

00:25:51,490 --> 00:26:08,860
more for their users yeah we use this

00:26:03,640 --> 00:26:10,030
method to achieve HIPAA compliance just

00:26:08,860 --> 00:26:11,350
because just because there's a

00:26:10,030 --> 00:26:12,880
regulation telling you you should do

00:26:11,350 --> 00:26:14,110
this doesn't mean that you shouldn't do

00:26:12,880 --> 00:26:17,620
it if you don't have to adhere to said

00:26:14,110 --> 00:26:18,910
regulation like I said it in in one of

00:26:17,620 --> 00:26:20,370
the earlier slides like anything worth

00:26:18,910 --> 00:26:24,280
protecting is worth protecting well and

00:26:20,370 --> 00:26:26,320
I think as engineers our responsibility

00:26:24,280 --> 00:26:29,290
over time has increased in white how we

00:26:26,320 --> 00:26:30,850
need to handle users data especially so

00:26:29,290 --> 00:26:32,170
I'm a consultant and especially for

00:26:30,850 --> 00:26:35,350
folks that are consulting for other

00:26:32,170 --> 00:26:38,860
entities right like if your client

00:26:35,350 --> 00:26:40,780
doesn't appreciate having some kind of

00:26:38,860 --> 00:26:41,350
data privacy technique in place to

00:26:40,780 --> 00:26:43,660
secure you

00:26:41,350 --> 00:26:45,370
data there's no reason why you shouldn't

00:26:43,660 --> 00:26:47,080
have that right I don't necessarily

00:26:45,370 --> 00:26:49,360
think this method adds a lot of

00:26:47,080 --> 00:26:51,070
complexity over top of what you're

00:26:49,360 --> 00:26:54,429
trying to achieve and then at the end of

00:26:51,070 --> 00:26:56,169
the day that that client could go on

00:26:54,429 --> 00:26:57,250
three years and have somebody working on

00:26:56,169 --> 00:26:58,450
the project that doesn't know how to

00:26:57,250 --> 00:27:00,669
configure and that's three bucket for

00:26:58,450 --> 00:27:02,679
the database backups but you did all of

00:27:00,669 --> 00:27:04,030
their users a solid by just implementing

00:27:02,679 --> 00:27:07,030
some kind of siddhanam ization technique

00:27:04,030 --> 00:27:08,679
right yes my question is what is like

00:27:07,030 --> 00:27:11,110
the specific threat model that this

00:27:08,679 --> 00:27:12,820
tries to achieve because if your

00:27:11,110 --> 00:27:14,470
database was dumped a computer could

00:27:12,820 --> 00:27:17,049
easily reverse-engineer a lot of these

00:27:14,470 --> 00:27:18,370
because it's not encryption so I guess

00:27:17,049 --> 00:27:20,650
the question is what's the threat model

00:27:18,370 --> 00:27:25,059
that this actually solves that's a

00:27:20,650 --> 00:27:27,390
really good question and the if we're

00:27:25,059 --> 00:27:31,570
just talking about database dumps I

00:27:27,390 --> 00:27:33,730
disagree I don't think that I think it

00:27:31,570 --> 00:27:36,549
could take a long time to decrypt this

00:27:33,730 --> 00:27:38,260
if you have a smart masking algorithm

00:27:36,549 --> 00:27:41,370
this one's not smart

00:27:38,260 --> 00:27:45,100
this one's route this was don't use this

00:27:41,370 --> 00:27:46,870
but there's a lot of synonymous Asian

00:27:45,100 --> 00:27:49,990
techniques that avoid shifting as like

00:27:46,870 --> 00:27:52,000
the primary basis for moving around that

00:27:49,990 --> 00:27:54,460
data or sorry ID identifying that data

00:27:52,000 --> 00:27:56,470
and you can mix and match so tokenizing

00:27:54,460 --> 00:27:58,240
is not encryption but yet nobody can

00:27:56,470 --> 00:28:00,940
reverse-engineer token to get back the

00:27:58,240 --> 00:28:03,580
valid credit card information to steal

00:28:00,940 --> 00:28:06,760
those credit card numbers right so I

00:28:03,580 --> 00:28:08,799
just presented masking and the shifting

00:28:06,760 --> 00:28:10,059
algorithm as a way for us to all easily

00:28:08,799 --> 00:28:12,159
understand like what was going on with

00:28:10,059 --> 00:28:16,710
the data in transit what do you guys do

00:28:12,159 --> 00:28:24,090
for I know we had a large health

00:28:16,710 --> 00:28:34,690
provider and logging of the audit trails

00:28:24,090 --> 00:28:38,140
once they're anonymized Frank will be a

00:28:34,690 --> 00:28:40,780
big one the hallway that is a really

00:28:38,140 --> 00:28:42,669
good question the the challenge is that

00:28:40,780 --> 00:28:44,830
it's always really specific to like what

00:28:42,669 --> 00:28:47,470
the use case is so like something in the

00:28:44,830 --> 00:28:50,650
Django admin like creating a log for

00:28:47,470 --> 00:28:54,570
that you know would solve that problem

00:28:50,650 --> 00:28:57,599
on on accessing data between systems

00:28:54,570 --> 00:28:59,940
we like cloud watch and then and then

00:28:57,599 --> 00:29:01,529
because we can use I am to create the

00:28:59,940 --> 00:29:03,090
roles that we need and we can track

00:29:01,529 --> 00:29:05,609
which roles are accessing the data from

00:29:03,090 --> 00:29:08,700
which services and then also I am in

00:29:05,609 --> 00:29:11,039
cloud watch give you a ton of like

00:29:08,700 --> 00:29:12,509
transparency into just access of systems

00:29:11,039 --> 00:29:14,369
or access of services and things like

00:29:12,509 --> 00:29:17,369
that and you can control when user

00:29:14,369 --> 00:29:20,509
passwords need to be reset you can

00:29:17,369 --> 00:29:23,669
enforce multi-factor a lot of cool stuff

00:29:20,509 --> 00:29:25,740
ok so let's thank Frank one more time

00:29:23,669 --> 00:29:33,059
for the talk and the nostalgia

00:29:25,740 --> 00:29:33,059

YouTube URL: https://www.youtube.com/watch?v=wRro4xv8n6k


