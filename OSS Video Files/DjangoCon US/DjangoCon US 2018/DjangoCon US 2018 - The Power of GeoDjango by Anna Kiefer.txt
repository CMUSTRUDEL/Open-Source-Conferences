Title: DjangoCon US 2018 - The Power of GeoDjango by Anna Kiefer
Publication date: 2018-11-10
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - The Power of GeoDjango by Anna Kiefer

GeoDjango is Djangoâ€™s robust geographic Web framework to build GIS applications and handle geospatial data. It relies on PostGIS (PostgreSQLâ€™s database for geospatial objects) and the Python library GDAL. This talk will discuss how GeoDjango uses these to extend Django models to handle complex geometries and geographic queries. This talk is intended for software developers and those interested in mapping location data. There will be a short demonstration on how GeoDjango works with popular mapping frameworks like Leaflet and OpenStreetMaps. We will create a GeoDjango model, seed our PostGIS database using raw location data, and make a simple route and view so we can actually visualize some data on a Leaflet map. We will also discuss the difference between raster and vector data, geos geometries and geojson, and spatial reference systems.

This talk was presented at: https://2018.djangocon.us/talk/the-power-of-geodjango/

LINKS:
Follow Anna Kiefer ðŸ‘‡
Official homepage: http://www.annaskiefer.com/index.html

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,800 --> 00:00:22,529
sorry for those technical difficulties

00:00:18,650 --> 00:00:25,560
but thanks for being here my name is

00:00:22,529 --> 00:00:28,500
Anna Kieffer and I work at Kabbalah

00:00:25,560 --> 00:00:30,990
Analytics I'm a software engineer and

00:00:28,500 --> 00:00:33,090
we're an energy analytic startup and the

00:00:30,990 --> 00:00:36,180
focus is on mapping and data analytics

00:00:33,090 --> 00:00:39,600
data in an analytics and mapping the us

00:00:36,180 --> 00:00:41,489
distribution grid and so this is data

00:00:39,600 --> 00:00:44,070
related to production capacity

00:00:41,489 --> 00:00:46,050
generation and investment as well as

00:00:44,070 --> 00:00:48,110
soft energy infrastructure things like

00:00:46,050 --> 00:00:51,390
substations transformers feeder lines

00:00:48,110 --> 00:00:54,780
things you can't just find say on Google

00:00:51,390 --> 00:00:57,090
or searching in Google Maps and so I do

00:00:54,780 --> 00:00:59,640
a lot with geospatial data hence this

00:00:57,090 --> 00:01:06,090
talk which is intended to be a gentle

00:00:59,640 --> 00:01:08,640
introduction to GIS and goj go so all of

00:01:06,090 --> 00:01:10,860
you probably recognize this this is a

00:01:08,640 --> 00:01:13,500
human readable address and it identifies

00:01:10,860 --> 00:01:15,960
where we are right now it's useful for

00:01:13,500 --> 00:01:18,900
humans but it's not so useful for

00:01:15,960 --> 00:01:21,000
computers humans misspell things there's

00:01:18,900 --> 00:01:25,159
formatting differences the difference

00:01:21,000 --> 00:01:27,869
between Drive and dr for example and so

00:01:25,159 --> 00:01:29,820
to get around these problems we use

00:01:27,869 --> 00:01:32,430
coordinate systems which model a

00:01:29,820 --> 00:01:34,759
location on the Earth's surface and they

00:01:32,430 --> 00:01:37,320
allow us to map features more easily

00:01:34,759 --> 00:01:39,840
there are two common types of coordinate

00:01:37,320 --> 00:01:42,960
systems geographic coordinate systems

00:01:39,840 --> 00:01:45,030
and projected coordinate systems and

00:01:42,960 --> 00:01:47,310
geographic coordinate systems to find

00:01:45,030 --> 00:01:50,340
locations on the earth as a 3d sphere

00:01:47,310 --> 00:01:51,509
while projected use a 2d surface and

00:01:50,340 --> 00:01:55,740
they're better for sort of distance

00:01:51,509 --> 00:01:56,880
queries length area so let's see if we

00:01:55,740 --> 00:02:03,930
can do a little bit better than this

00:01:56,880 --> 00:02:06,119
address so this so this is our location

00:02:03,930 --> 00:02:09,209
in degrees minutes seconds and this uses

00:02:06,119 --> 00:02:12,769
a geographic coordinate system and it

00:02:09,209 --> 00:02:18,239
also uses what's known as world geodetic

00:02:12,769 --> 00:02:20,280
well gee geodetic system 1984 and so

00:02:18,239 --> 00:02:22,260
that's a little bit better but that's

00:02:20,280 --> 00:02:24,900
not the only geographic coordinate

00:02:22,260 --> 00:02:28,830
system we could use this is decimal

00:02:24,900 --> 00:02:32,519
degrees and it also uses wgs84 and it's

00:02:28,830 --> 00:02:34,709
even simpler but again so this isn't the

00:02:32,519 --> 00:02:36,000
only there's I mentioned geographic

00:02:34,709 --> 00:02:39,989
coordinate systems and projected

00:02:36,000 --> 00:02:41,250
coordinate systems this is a projected

00:02:39,989 --> 00:02:47,069
coordinate system some of you may

00:02:41,250 --> 00:02:52,170
recognize it's goes by UTM it uses the

00:02:47,069 --> 00:02:56,069
universal Mercator time I believe and it

00:02:52,170 --> 00:02:58,170
also uses map datum wgs84 first number

00:02:56,069 --> 00:03:00,049
is the grid zone designation followed by

00:02:58,170 --> 00:03:06,109
the coordinates easting and northing

00:03:00,049 --> 00:03:11,040
distance measurements but so the wgs84

00:03:06,109 --> 00:03:14,160
was invented by the Department of

00:03:11,040 --> 00:03:16,230
Defense but they're not they invented

00:03:14,160 --> 00:03:19,109
other ones as well them and other

00:03:16,230 --> 00:03:21,720
organizations and so this is the

00:03:19,109 --> 00:03:25,049
military grid reference system and it's

00:03:21,720 --> 00:03:27,209
used by NATO militaries but that's not

00:03:25,049 --> 00:03:29,040
the only one there's a state plane

00:03:27,209 --> 00:03:34,019
coordinate system which divides the us

00:03:29,040 --> 00:03:36,239
into 124 Geographic zones but that's not

00:03:34,019 --> 00:03:38,459
the only one as well because we're in

00:03:36,239 --> 00:03:41,040
the u.s. we should probably use feet not

00:03:38,459 --> 00:03:43,200
the metric system so that's in feet but

00:03:41,040 --> 00:03:44,819
there's also something known as the

00:03:43,200 --> 00:03:47,579
international foot which is not equal

00:03:44,819 --> 00:03:49,019
the u.s. survey foot so this is a

00:03:47,579 --> 00:03:52,650
representation in terms of the u.s.

00:03:49,019 --> 00:03:56,099
survey foot but there's additional ones

00:03:52,650 --> 00:03:57,389
this is the maidenhead reference that's

00:03:56,099 --> 00:03:59,760
the Maidenhead reference system it's

00:03:57,389 --> 00:04:04,290
used by amateur radio operators around

00:03:59,760 --> 00:04:06,989
the world and finally or no not finally

00:04:04,290 --> 00:04:11,430
sorry this is a different global area

00:04:06,989 --> 00:04:14,280
reference system developed finally this

00:04:11,430 --> 00:04:16,760
is what I found actually yesterday it's

00:04:14,280 --> 00:04:19,349
called what three words and it tries to

00:04:16,760 --> 00:04:23,610
take all of our points on earth and give

00:04:19,349 --> 00:04:25,740
them three words and this is where we

00:04:23,610 --> 00:04:26,220
are right now dose feels unity which I

00:04:25,740 --> 00:04:30,960
take to me

00:04:26,220 --> 00:04:33,890
we're all tired and so all of these are

00:04:30,960 --> 00:04:36,300
valid ways of representing our location

00:04:33,890 --> 00:04:38,340
but as you can see they're all different

00:04:36,300 --> 00:04:42,480
formats and so we need to get this you

00:04:38,340 --> 00:04:44,490
know into a standard format and I

00:04:42,480 --> 00:04:45,480
basically mention these to show you all

00:04:44,490 --> 00:04:48,030
the different coordinate reference

00:04:45,480 --> 00:04:49,920
systems there are and the importance of

00:04:48,030 --> 00:04:52,590
standardizing our data and how geo Jango

00:04:49,920 --> 00:04:53,790
and post GIS uses these and turns them

00:04:52,590 --> 00:04:56,490
into standardized while still being

00:04:53,790 --> 00:04:58,140
flexible so the next time one of your

00:04:56,490 --> 00:05:02,090
friends asked you where you live we use

00:04:58,140 --> 00:05:02,090
one of these other reference systems

00:05:02,150 --> 00:05:08,400
okay so for those of you unfamiliar geo

00:05:05,940 --> 00:05:10,890
Django is Django's robust framework for

00:05:08,400 --> 00:05:12,150
handling geospatial data it gives

00:05:10,890 --> 00:05:14,370
developers the ability to store

00:05:12,150 --> 00:05:17,340
geospatial data query aggregate and

00:05:14,370 --> 00:05:20,430
filter it and it provides support for

00:05:17,340 --> 00:05:23,280
for spatial database backends Postgres

00:05:20,430 --> 00:05:25,590
sequel light my sequel and oracle and

00:05:23,280 --> 00:05:27,390
Postgres and sequel light are in bold

00:05:25,590 --> 00:05:31,190
because it offers the most support for

00:05:27,390 --> 00:05:35,280
those two and even amongst those two

00:05:31,190 --> 00:05:37,830
posts grass and post GIS have the most

00:05:35,280 --> 00:05:39,960
support don't fight me on this but I

00:05:37,830 --> 00:05:42,390
think spatial light and sequel light has

00:05:39,960 --> 00:05:43,680
some limited support for some function

00:05:42,390 --> 00:05:49,590
some geospatial functions that are

00:05:43,680 --> 00:05:53,660
common so I'll be using Postgres this is

00:05:49,590 --> 00:05:56,190
Postgres plus the earth equals post GIS

00:05:53,660 --> 00:05:57,720
ok so now how to discuss how post GIS

00:05:56,190 --> 00:06:02,820
deals with all of those coordinate

00:05:57,720 --> 00:06:04,590
systems that we saw in our last slide ok

00:06:02,820 --> 00:06:07,800
so for those of you who have used

00:06:04,590 --> 00:06:10,979
geospatial data this is might look

00:06:07,800 --> 00:06:12,380
familiar to you this is known as the

00:06:10,979 --> 00:06:16,790
srid

00:06:12,380 --> 00:06:20,250
what's a spatial reference identifier

00:06:16,790 --> 00:06:22,410
and the srid defines what coordinate

00:06:20,250 --> 00:06:25,710
system you would like to use now there

00:06:22,410 --> 00:06:26,760
are many SR IDs hundreds and they're

00:06:25,710 --> 00:06:29,220
used for different geographies around

00:06:26,760 --> 00:06:32,850
the world but to perform geospatial

00:06:29,220 --> 00:06:37,289
functions on the same data it has to be

00:06:32,850 --> 00:06:39,630
of the same SR ID so this defining your

00:06:37,289 --> 00:06:40,020
own srid could be good if all of your

00:06:39,630 --> 00:06:41,400
data is

00:06:40,020 --> 00:06:45,629
say in one state or in one small

00:06:41,400 --> 00:06:47,400
geography but oftentimes it's not so

00:06:45,629 --> 00:06:50,280
post GIS offers the ability it sort of

00:06:47,400 --> 00:06:53,970
throws the it has the ability to put in

00:06:50,280 --> 00:06:55,860
unique SSR IDs but it's sort of

00:06:53,970 --> 00:06:59,280
recommends that you use srid for three

00:06:55,860 --> 00:07:02,190
to six and that maps to the wgs84 which

00:06:59,280 --> 00:07:04,409
i mentioned earlier and then when you

00:07:02,190 --> 00:07:05,909
need to use you need to measure

00:07:04,409 --> 00:07:09,120
something like area distance or length

00:07:05,909 --> 00:07:11,250
you use a function to create that column

00:07:09,120 --> 00:07:16,009
and then in your projected coordinate

00:07:11,250 --> 00:07:18,539
system and measure it that way okay so

00:07:16,009 --> 00:07:20,520
now I want to just discuss a little bit

00:07:18,539 --> 00:07:21,750
of sort of geo Jango data models which

00:07:20,520 --> 00:07:24,120
looks surprisingly similar to the

00:07:21,750 --> 00:07:29,310
regular data models except there's one

00:07:24,120 --> 00:07:33,090
spatial field type and that's the point

00:07:29,310 --> 00:07:34,979
line string polygon or multi-point not

00:07:33,090 --> 00:07:37,889
circles though circles it turns out are

00:07:34,979 --> 00:07:40,020
much more difficult and complicated than

00:07:37,889 --> 00:07:41,250
you thought in elementary school so you

00:07:40,020 --> 00:07:44,580
don't define circles you define them as

00:07:41,250 --> 00:07:47,250
polygons and geo Jenko also has support

00:07:44,580 --> 00:07:49,949
for a raster data which I'll get to in a

00:07:47,250 --> 00:07:51,900
little bit and then Roseman I mentioned

00:07:49,949 --> 00:07:54,050
you can put in an SR ID or use the

00:07:51,900 --> 00:07:59,909
default which is 43:26

00:07:54,050 --> 00:08:02,400
and a lot of mapping frameworks and

00:07:59,909 --> 00:08:05,039
user-facing use coordinates in lat/long

00:08:02,400 --> 00:08:06,960
order but that's actually incorrect

00:08:05,039 --> 00:08:09,029
well according to post GIS it needs to

00:08:06,960 --> 00:08:11,400
be in XY order which would be longitude

00:08:09,029 --> 00:08:15,120
latitude so the very first application I

00:08:11,400 --> 00:08:18,029
developed I did not know this and all of

00:08:15,120 --> 00:08:23,370
my points to turn it up I think in Asia

00:08:18,029 --> 00:08:28,650
somewhere so okay and then these can be

00:08:23,370 --> 00:08:31,800
initialized using wkt wkb hexadecimal or

00:08:28,650 --> 00:08:33,870
geo json and so this all looks well and

00:08:31,800 --> 00:08:37,529
good but as i was thinking when i first

00:08:33,870 --> 00:08:38,969
started wait what the heck is wkt i

00:08:37,529 --> 00:08:43,709
didn't know anything about what time you

00:08:38,969 --> 00:08:48,779
came to you was so this is just a

00:08:43,709 --> 00:08:50,640
representation of wkt wkt stands for

00:08:48,779 --> 00:08:53,160
well known text and it's a text markup

00:08:50,640 --> 00:08:55,050
language defined by the open geospatial

00:08:53,160 --> 00:08:57,330
consortium

00:08:55,050 --> 00:08:59,130
which of which the US Department of

00:08:57,330 --> 00:09:02,940
Defense is a part of and many other 500

00:08:59,130 --> 00:09:04,350
other government institutions and it

00:09:02,940 --> 00:09:05,700
shows bleep beneath it it's binary

00:09:04,350 --> 00:09:08,970
equivalent and that's how the data is

00:09:05,700 --> 00:09:09,960
actually stored in the database all

00:09:08,970 --> 00:09:12,450
right so now that we have a better

00:09:09,960 --> 00:09:16,110
understanding of what these data formats

00:09:12,450 --> 00:09:17,970
are we can tackle what I mentioned the

00:09:16,110 --> 00:09:21,120
last slide the differences between

00:09:17,970 --> 00:09:30,030
vector and raster data as it relates to

00:09:21,120 --> 00:09:33,300
GIS okay so on the Left we have raster

00:09:30,030 --> 00:09:35,820
data and this is represented by largely

00:09:33,300 --> 00:09:37,940
satellite imagery raster a raster

00:09:35,820 --> 00:09:42,300
consists of matrix of cells or pixels

00:09:37,940 --> 00:09:43,860
organized into rows or X&Y columns where

00:09:42,300 --> 00:09:47,280
each cell contains a value of

00:09:43,860 --> 00:09:49,890
information and this is good for

00:09:47,280 --> 00:09:54,570
representing continuous data real-world

00:09:49,890 --> 00:09:57,980
phenomena like temperature elevation or

00:09:54,570 --> 00:10:00,300
other spectral data continuous data and

00:09:57,980 --> 00:10:04,680
vector data on the other hand is good

00:10:00,300 --> 00:10:06,210
for representing geometries and all

00:10:04,680 --> 00:10:09,840
vector data consists of a list of

00:10:06,210 --> 00:10:12,120
coordinates that define vertices so

00:10:09,840 --> 00:10:14,160
again two points lines and polygons and

00:10:12,120 --> 00:10:16,050
that is usually large small storage

00:10:14,160 --> 00:10:19,950
requirements where's raster data has

00:10:16,050 --> 00:10:22,560
large storage requirements and so that

00:10:19,950 --> 00:10:30,750
is polygons representing the County of

00:10:22,560 --> 00:10:33,930
San Diego ok and so here are the steps

00:10:30,750 --> 00:10:37,170
they look remarkably like you know

00:10:33,930 --> 00:10:39,950
setting up a regular Gengo model you get

00:10:37,170 --> 00:10:42,150
or create your geospatial data somehow

00:10:39,950 --> 00:10:45,360
and create your django model as you

00:10:42,150 --> 00:10:48,440
would defining your srid and your

00:10:45,360 --> 00:10:51,170
geospatial field point line polygons etc

00:10:48,440 --> 00:10:53,370
you find some way to import your data

00:10:51,170 --> 00:10:55,260
and then you can start querying and

00:10:53,370 --> 00:11:02,850
there's a ton of different querying

00:10:55,260 --> 00:11:05,820
methods that are really fun so you can

00:11:02,850 --> 00:11:07,120
perform data discovery min/max you've

00:11:05,820 --> 00:11:09,940
got a bounding box area

00:11:07,120 --> 00:11:12,190
length similar and you can query and

00:11:09,940 --> 00:11:15,790
filter similar to the way you would as

00:11:12,190 --> 00:11:17,500
usual querying using jingoes ORM it

00:11:15,790 --> 00:11:20,350
comes with contains within intersects

00:11:17,500 --> 00:11:21,640
borders overlaps touches tons and you'll

00:11:20,350 --> 00:11:23,260
need to look up the documentation as I

00:11:21,640 --> 00:11:25,170
did probably many times to figure out

00:11:23,260 --> 00:11:28,120
the differences between some of these

00:11:25,170 --> 00:11:30,810
and then you can aggregate data based on

00:11:28,120 --> 00:11:35,050
filters and create new geometries using

00:11:30,810 --> 00:11:37,210
Union you know Airy unary union or

00:11:35,050 --> 00:11:40,570
cascaded Union which can merge lines

00:11:37,210 --> 00:11:47,260
polygons and Multi polygons and mines

00:11:40,570 --> 00:11:48,850
polygons and points okay and now just to

00:11:47,260 --> 00:11:52,720
go of some other popular libraries that

00:11:48,850 --> 00:11:55,839
I use a lot I use Shapley which is good

00:11:52,720 --> 00:11:57,339
for vector geometries geo pandas as well

00:11:55,839 --> 00:11:59,260
which is good for vector geometry ama

00:11:57,339 --> 00:12:02,920
trees and Ross stereo which I don't have

00:11:59,260 --> 00:12:05,020
much experience with but I have heard

00:12:02,920 --> 00:12:13,000
it's really popular to manipulate raster

00:12:05,020 --> 00:12:15,370
data okay so so far we've covered on all

00:12:13,000 --> 00:12:17,080
these things geo Django's supported

00:12:15,370 --> 00:12:19,600
geography field types or geo spatial

00:12:17,080 --> 00:12:22,690
field types different coordinate systems

00:12:19,600 --> 00:12:25,920
projected vers geographic raster vector

00:12:22,690 --> 00:12:28,510
data distance and spatial query methods

00:12:25,920 --> 00:12:34,330
and data formats and data translations

00:12:28,510 --> 00:12:36,310
so are we all done no we haven't

00:12:34,330 --> 00:12:37,839
discussed one important aspect that I've

00:12:36,310 --> 00:12:44,760
spent a lot of time on and that's a

00:12:37,839 --> 00:12:44,760
debugging in troubleshooting okay

00:12:45,400 --> 00:12:49,610
so some of these geospatial libraries

00:12:48,410 --> 00:12:51,500
can be frustrating incredibly

00:12:49,610 --> 00:12:54,290
frustrating especially when you're doing

00:12:51,500 --> 00:12:56,780
really complex geospatial analysis

00:12:54,290 --> 00:12:58,160
I've often received geometry and

00:12:56,780 --> 00:12:58,810
topology exceptions that are difficult

00:12:58,160 --> 00:13:02,090
to debug

00:12:58,810 --> 00:13:03,830
g-dog being one of them notorious for

00:13:02,090 --> 00:13:05,960
having different versioning issues I

00:13:03,830 --> 00:13:08,150
hope I don't know if the creator of G

00:13:05,960 --> 00:13:11,030
Dollaz here but I love G doll but it can

00:13:08,150 --> 00:13:13,930
have some issues and so for example

00:13:11,030 --> 00:13:18,350
here's one that I just want to touch on

00:13:13,930 --> 00:13:21,800
so you can see above I have G Oh JSON

00:13:18,350 --> 00:13:24,200
with a multi polygon and and it's an

00:13:21,800 --> 00:13:26,410
empty the there's empty list discordant

00:13:24,200 --> 00:13:30,890
as it's coordinates and I'm able to

00:13:26,410 --> 00:13:32,960
initialize my gos geometry and when I

00:13:30,890 --> 00:13:35,300
print its well-known text it comes out

00:13:32,960 --> 00:13:38,060
empty but the valid method comes out

00:13:35,300 --> 00:13:39,860
true and that's because geo Jango is not

00:13:38,060 --> 00:13:43,430
validating that there are actual

00:13:39,860 --> 00:13:45,700
polygons within my multi polygon and

00:13:43,430 --> 00:13:49,810
this is different to the below block

00:13:45,700 --> 00:13:52,760
which shows I'm trying to instantiate a

00:13:49,810 --> 00:13:55,100
polygon and that is an empty geometry an

00:13:52,760 --> 00:13:57,650
empty list and then I get a jido error

00:13:55,100 --> 00:13:59,180
that says you know basically invalid

00:13:57,650 --> 00:14:01,510
geometry pointer you can't and

00:13:59,180 --> 00:14:04,760
instantiate a polygon with an empty list

00:14:01,510 --> 00:14:06,680
and so this showed up I imported four

00:14:04,760 --> 00:14:09,950
hours a lot of multi polygons it turns

00:14:06,680 --> 00:14:11,270
out they were empty and I thought they

00:14:09,950 --> 00:14:15,680
were valid because I was printing is

00:14:11,270 --> 00:14:17,660
valid or in this so I was printing valid

00:14:15,680 --> 00:14:19,010
and it was turning out okay so that's

00:14:17,660 --> 00:14:22,250
just one issue that I can't have come

00:14:19,010 --> 00:14:26,980
across so I've compiled a hopefully

00:14:22,250 --> 00:14:26,980
helpful list of tips to debug

00:14:27,190 --> 00:14:33,170
okay so despite the example I just gave

00:14:29,420 --> 00:14:35,480
I do think that the the valid method and

00:14:33,170 --> 00:14:37,730
shape please is valid method are really

00:14:35,480 --> 00:14:40,550
useful for figuring out whether or not a

00:14:37,730 --> 00:14:42,380
polygon is valid if it's a line and

00:14:40,550 --> 00:14:44,270
there's a break in it I believe is valid

00:14:42,380 --> 00:14:46,010
we return false

00:14:44,270 --> 00:14:51,860
it'll validate whether or not polygons

00:14:46,010 --> 00:14:54,800
are entirely closed and so and then when

00:14:51,860 --> 00:14:56,240
in doubt plot it using QGIS I mentioned

00:14:54,800 --> 00:14:57,540
that at before that I was working on I

00:14:56,240 --> 00:15:01,980
was trying to plot the US

00:14:57,540 --> 00:15:04,230
landfills in the US and they weren't

00:15:01,980 --> 00:15:05,459
appearing on my map at all and I

00:15:04,230 --> 00:15:07,889
realized that a lot of them were in the

00:15:05,459 --> 00:15:10,740
Pacific Ocean which might be valid but

00:15:07,889 --> 00:15:12,209
it was not where I wanted them to be so

00:15:10,740 --> 00:15:17,490
it helps to plot them using free

00:15:12,209 --> 00:15:19,380
software QGIS being one of them also

00:15:17,490 --> 00:15:21,509
plotting them helps discover slivers and

00:15:19,380 --> 00:15:24,540
between features maybe holes and

00:15:21,509 --> 00:15:26,850
polygons or breaks and lines oftentimes

00:15:24,540 --> 00:15:28,860
these will import smoothly but you'll

00:15:26,850 --> 00:15:31,910
get errors down the line when querying

00:15:28,860 --> 00:15:34,230
them and so I found that very helpful

00:15:31,910 --> 00:15:38,190
other things are memory and performance

00:15:34,230 --> 00:15:40,889
issues that I've come across I came

00:15:38,190 --> 00:15:42,329
across a map on this the other day one

00:15:40,889 --> 00:15:45,690
of my geospatial queries was taking

00:15:42,329 --> 00:15:47,970
hours and I realized that the M was

00:15:45,690 --> 00:15:49,740
actually miles and not meters some

00:15:47,970 --> 00:15:52,769
somewhere along the line I must have

00:15:49,740 --> 00:15:54,240
transformed it into miles and and that

00:15:52,769 --> 00:15:56,370
was causing a lot of the other

00:15:54,240 --> 00:15:58,769
geometries around it to be contained in

00:15:56,370 --> 00:16:02,130
the filter and so make sure you have

00:15:58,769 --> 00:16:05,279
your units correct and then there's also

00:16:02,130 --> 00:16:08,399
a helpful simplified method that you can

00:16:05,279 --> 00:16:10,589
use and this you can add a tolerance

00:16:08,399 --> 00:16:13,680
decimal that's between 1 and zero and

00:16:10,589 --> 00:16:14,970
that simplifies the coordinates so it'll

00:16:13,680 --> 00:16:16,980
cut out some of the coordinates and

00:16:14,970 --> 00:16:19,860
depending on the precision needed in

00:16:16,980 --> 00:16:22,769
your app that can be very helpful and

00:16:19,860 --> 00:16:25,829
speed up queries finally the prepared

00:16:22,769 --> 00:16:28,380
also does something similar it prepares

00:16:25,829 --> 00:16:32,970
it for more efficient geospatial

00:16:28,380 --> 00:16:34,139
analysis and then some of you might be

00:16:32,970 --> 00:16:36,240
familiar with this there's something

00:16:34,139 --> 00:16:38,519
called the right hand rule and that

00:16:36,240 --> 00:16:39,930
basically says that all of the Interior

00:16:38,519 --> 00:16:41,699
coordinates need to go in a certain

00:16:39,930 --> 00:16:43,670
direction they need to go clockwise and

00:16:41,699 --> 00:16:45,990
the exterior need to go counterclockwise

00:16:43,670 --> 00:16:47,850
and this has resulted in a lot of jido

00:16:45,990 --> 00:16:54,120
errors that I've spent a lot of time

00:16:47,850 --> 00:16:57,899
trying to debug ok so I'm gonna give a

00:16:54,120 --> 00:16:59,339
short demo this is the app one of the

00:16:57,899 --> 00:17:02,399
apps that I've worked on and I just

00:16:59,339 --> 00:17:06,470
think it shows how we've used post GIS

00:17:02,399 --> 00:17:06,470
and goj go

00:17:09,079 --> 00:17:13,189
sorry I should have had this up before

00:17:19,690 --> 00:17:25,060
and it's our app called grit Assessor

00:17:21,400 --> 00:17:28,470
and it Maps Us distribution data okay so

00:17:25,060 --> 00:17:31,420
here's the US and actually I'm going to

00:17:28,470 --> 00:17:32,830
just go ahead and search I think I've

00:17:31,420 --> 00:17:35,620
got that correct this is our our

00:17:32,830 --> 00:17:37,030
location where we are currently at the

00:17:35,620 --> 00:17:44,470
Marriott there we go there's some nice

00:17:37,030 --> 00:17:46,450
reverse geocoding going on alright and

00:17:44,470 --> 00:17:47,950
so the green are sorry the orange our

00:17:46,450 --> 00:17:49,510
feeder systems around us

00:17:47,950 --> 00:17:51,550
the yellow our transmission lines and

00:17:49,510 --> 00:17:54,460
then land parcels will start to come in

00:17:51,550 --> 00:17:55,450
and those are polygons or the polygons

00:17:54,460 --> 00:17:56,980
will start to come in and those of land

00:17:55,450 --> 00:17:59,020
parcels scuse me

00:17:56,980 --> 00:18:02,260
and so you can see we've used polygons

00:17:59,020 --> 00:18:05,590
multi-line strings and points to

00:18:02,260 --> 00:18:13,870
represent where we are in the energy

00:18:05,590 --> 00:18:15,400
around us all right so now I'm not gonna

00:18:13,870 --> 00:18:26,920
click around too much just wanted to

00:18:15,400 --> 00:18:30,520
just show that all the way left there we

00:18:26,920 --> 00:18:34,570
go oh I see I need to go back well I

00:18:30,520 --> 00:18:38,200
think the last okay well I think the

00:18:34,570 --> 00:18:41,500
last slide is just thank you what's up

00:18:38,200 --> 00:18:44,440
Oh it'll go back oh there we go thank

00:18:41,500 --> 00:18:45,910
you sorry alright there we go my last

00:18:44,440 --> 00:18:48,550
slide thank you all so much for staying

00:18:45,910 --> 00:18:50,050
till 5 p.m. this has been really fun and

00:18:48,550 --> 00:18:51,550
yeah thank you to the Django Khan

00:18:50,050 --> 00:18:56,310
community and all of you

00:18:51,550 --> 00:18:58,370
[Applause]

00:18:56,310 --> 00:18:58,370

YouTube URL: https://www.youtube.com/watch?v=Ow9P8UsKZzM


