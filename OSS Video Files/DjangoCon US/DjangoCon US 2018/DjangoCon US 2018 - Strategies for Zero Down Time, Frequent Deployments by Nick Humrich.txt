Title: DjangoCon US 2018 - Strategies for Zero Down Time, Frequent Deployments by Nick Humrich
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - Strategies for Zero Down Time, Frequent Deployments by Nick Humrich

Deployments can be stressful, but shouldâ€™nt be. We all hear about big companies deploying several, if not thousands of times a day. In order to acheive this, you have to be able to deploy without impacting performance at all; you need to feel confident and comfortable when you deploy. Even a couple miliseconds of downtime is unacceptable in these environments. Whether you have to provide SLAâ€™s to your customers or not, being able to deploy without any downtime, allows you to deploy more often, which leads to faster turnaround time on both bug fixes and features. Successfully deploying without and downtime, however, is non-trivial. Perhaps you have heard the term Blue/Green deployment, and wonder what that is. Come learn about some of the strategies used for deployments, as well as all the changes to your code and your process you will have to make in order for it to truly work, and make you feel more confident on every deploy to production.

This talk was presented at: https://2018.djangocon.us/talk/strategies-for-zero-down-time-frequent/

LINKS:
Follow Nick Humrich ðŸ‘‡
On Twitter: https://twitter.com/nhumrich
Official homepage: http://blog.humrich.us

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,410 --> 00:00:21,449
it's really quickly I really hope you

00:00:17,730 --> 00:00:23,699
enjoyed my zero downtime slide it's

00:00:21,449 --> 00:00:29,539
actually not zero it's like a 99.99%

00:00:23,699 --> 00:00:31,740
uptime but close enough so uh I guess uh

00:00:29,539 --> 00:00:32,700
there's there's two questions we need to

00:00:31,740 --> 00:00:34,739
answer first

00:00:32,700 --> 00:00:36,480
as we get started one is like what is

00:00:34,739 --> 00:00:40,440
downtime and why do we normally have

00:00:36,480 --> 00:00:42,210
downtime so specifically for this talk

00:00:40,440 --> 00:00:45,210
I'm only gonna be talking about the

00:00:42,210 --> 00:00:46,860
downtime that happens when you deploy so

00:00:45,210 --> 00:00:49,940
downtime that happens just because you

00:00:46,860 --> 00:00:52,500
have you know code issues or whatever

00:00:49,940 --> 00:00:55,890
not really gonna go into because it's

00:00:52,500 --> 00:00:58,379
about zero downtime deployments right so

00:00:55,890 --> 00:00:59,789
downtime is when you deploy you can have

00:00:58,379 --> 00:01:03,600
downtime either that's a maintenance

00:00:59,789 --> 00:01:06,750
window you have scheduled time to be

00:01:03,600 --> 00:01:12,390
down or maybe it's just the deployment

00:01:06,750 --> 00:01:14,280
process itself causes downtime why is

00:01:12,390 --> 00:01:16,710
this so common I think there's a couple

00:01:14,280 --> 00:01:18,720
answers the most simple is that the

00:01:16,710 --> 00:01:22,320
tutorials when we learn things like

00:01:18,720 --> 00:01:23,610
Django etc they're not teaching us the

00:01:22,320 --> 00:01:25,259
deployment mechanism because it's a

00:01:23,610 --> 00:01:26,729
little too complicated right off the bat

00:01:25,259 --> 00:01:29,250
they're just teaching us how to run

00:01:26,729 --> 00:01:31,079
things locally right so you have a

00:01:29,250 --> 00:01:34,470
command that's just run my server and

00:01:31,079 --> 00:01:35,880
your server is now running and so when

00:01:34,470 --> 00:01:39,119
you make a code change or so used to

00:01:35,880 --> 00:01:41,670
just Oh control see spin it up again now

00:01:39,119 --> 00:01:44,399
my new codes running so if we do those

00:01:41,670 --> 00:01:46,710
similar strategies we cause downtime

00:01:44,399 --> 00:01:49,320
while we deploy even if it's only a few

00:01:46,710 --> 00:01:52,680
milliseconds even if it's only seconds

00:01:49,320 --> 00:01:55,229
it can still impact our customers I

00:01:52,680 --> 00:01:57,090
think there's also another reason why we

00:01:55,229 --> 00:01:59,399
have downtime specifically maintenance

00:01:57,090 --> 00:02:04,020
windows and I think we teach ourselves

00:01:59,399 --> 00:02:06,299
that scheduling downtime is faster from

00:02:04,020 --> 00:02:08,369
a development point of view where you

00:02:06,299 --> 00:02:10,349
get into this habit because you think

00:02:08,369 --> 00:02:12,390
about what would it what would I have to

00:02:10,349 --> 00:02:13,660
do to not have downtime while I deploy

00:02:12,390 --> 00:02:15,850
and you usually come

00:02:13,660 --> 00:02:19,930
with like maybe a two or three or four

00:02:15,850 --> 00:02:21,820
week process and from that point of view

00:02:19,930 --> 00:02:25,600
it kind of sounds like having downtime

00:02:21,820 --> 00:02:28,410
is much faster I schedule window I spend

00:02:25,600 --> 00:02:32,890
like an hour doing it now I'm back up

00:02:28,410 --> 00:02:35,140
right and in in a lot of cases a

00:02:32,890 --> 00:02:37,270
maintenance window can be faster it can

00:02:35,140 --> 00:02:39,970
be less development time but in a lot of

00:02:37,270 --> 00:02:42,070
cases it's not and one example that I

00:02:39,970 --> 00:02:44,650
really like to share is at one of my

00:02:42,070 --> 00:02:46,510
companies we decided we were gonna do a

00:02:44,650 --> 00:02:48,330
maintenance window to do this big change

00:02:46,510 --> 00:02:51,490
we had all the state in our database

00:02:48,330 --> 00:02:53,770
massive blocks of JSON and we had to

00:02:51,490 --> 00:02:57,850
completely change how it looked in the

00:02:53,770 --> 00:03:00,010
database and so we scheduled a four hour

00:02:57,850 --> 00:03:02,560
maintenance window on the weekend in the

00:03:00,010 --> 00:03:04,570
middle of the night to do it and so we

00:03:02,560 --> 00:03:07,240
were just gonna do downtime run the

00:03:04,570 --> 00:03:09,280
script take a couple hours go back up

00:03:07,240 --> 00:03:11,710
well what happened was about two and a

00:03:09,280 --> 00:03:14,200
half hours in we realized there was a

00:03:11,710 --> 00:03:15,670
bug in the code and once we got like two

00:03:14,200 --> 00:03:19,510
and a half hours in we hit a customer

00:03:15,670 --> 00:03:21,550
whose data was so weird that our script

00:03:19,510 --> 00:03:25,720
actually broke and so it didn't work so

00:03:21,550 --> 00:03:27,370
we had to rollback go back up and keep

00:03:25,720 --> 00:03:29,440
going well you can't do a maintenance

00:03:27,370 --> 00:03:31,120
window every hour of every day because

00:03:29,440 --> 00:03:33,370
you're you that's your users would not

00:03:31,120 --> 00:03:34,660
like that right so we had to wait

00:03:33,370 --> 00:03:37,600
another two weeks to do another

00:03:34,660 --> 00:03:39,190
maintenance window in the meantime of

00:03:37,600 --> 00:03:40,510
these two weeks we realized hey the

00:03:39,190 --> 00:03:42,670
issue was we never tested this on

00:03:40,510 --> 00:03:44,530
production data so we copied the

00:03:42,670 --> 00:03:46,240
database we tested it on production data

00:03:44,530 --> 00:03:48,880
everything was fine right so two weeks

00:03:46,240 --> 00:03:50,860
later schedule another downtime same

00:03:48,880 --> 00:03:53,800
thing two and a half hours in there's a

00:03:50,860 --> 00:03:55,690
bug what happened well the customer with

00:03:53,800 --> 00:03:57,160
the issue actually changed their data in

00:03:55,690 --> 00:03:59,290
those two weeks that we were testing

00:03:57,160 --> 00:04:02,890
right so you never know what's going to

00:03:59,290 --> 00:04:04,990
happen so again back up so basically six

00:04:02,890 --> 00:04:07,900
weeks later we finally got this out into

00:04:04,990 --> 00:04:09,160
production right we figured it would

00:04:07,900 --> 00:04:12,010
take us about three weeks to do it

00:04:09,160 --> 00:04:13,600
without downtime so reality is if we did

00:04:12,010 --> 00:04:15,010
it in the first place without scheduling

00:04:13,600 --> 00:04:19,330
maintenance window it actually would

00:04:15,010 --> 00:04:21,370
have been faster now understandably

00:04:19,330 --> 00:04:25,120
these certain types of situations aren't

00:04:21,370 --> 00:04:27,050
common so oftentimes it can be faster to

00:04:25,120 --> 00:04:28,879
just schedule meanit's window

00:04:27,050 --> 00:04:34,280
once you get in the habit of not having

00:04:28,879 --> 00:04:36,199
downtime it actually gets really easy so

00:04:34,280 --> 00:04:39,289
I think another reason we have downtime

00:04:36,199 --> 00:04:42,050
is because we're scared of deployments

00:04:39,289 --> 00:04:43,900
and this is what I like to call the

00:04:42,050 --> 00:04:46,009
deployment death trap

00:04:43,900 --> 00:04:49,039
basically what this means is we have

00:04:46,009 --> 00:04:52,460
downtime when we deploy and because we

00:04:49,039 --> 00:04:54,710
have downtime we do it less often right

00:04:52,460 --> 00:04:57,229
if it annoys your users if you're down

00:04:54,710 --> 00:05:00,349
so you deploy less often so that you

00:04:57,229 --> 00:05:01,849
don't impact your users as much well

00:05:00,349 --> 00:05:03,380
because you're not deploying as often

00:05:01,849 --> 00:05:08,150
the changes that you make to production

00:05:03,380 --> 00:05:10,430
they just get bigger and bigger and

00:05:08,150 --> 00:05:15,530
because you have bigger changes you have

00:05:10,430 --> 00:05:17,960
more risk right and we all know that

00:05:15,530 --> 00:05:19,039
fear leads to the dark side right so if

00:05:17,960 --> 00:05:21,069
you're trying to avoid the dark side

00:05:19,039 --> 00:05:24,560
this is a bad strategy

00:05:21,069 --> 00:05:26,509
but but more importantly I you're higher

00:05:24,560 --> 00:05:30,860
risk actually leads to deploying less

00:05:26,509 --> 00:05:32,750
often so it's a cycle right you you have

00:05:30,860 --> 00:05:34,669
these fears and because you have fears

00:05:32,750 --> 00:05:35,900
you do it less often and it just gets

00:05:34,669 --> 00:05:39,319
worse and worse and worse because things

00:05:35,900 --> 00:05:41,389
are just gonna get worse over time the

00:05:39,319 --> 00:05:43,699
alternative to this is called continuous

00:05:41,389 --> 00:05:45,500
delivery and it's basically the concept

00:05:43,699 --> 00:05:47,620
of taking every single commit and

00:05:45,500 --> 00:05:52,250
deploying it all the way to production

00:05:47,620 --> 00:05:54,139
by itself and you can kind of achieve

00:05:52,250 --> 00:05:58,430
continuous delivery if your sole focus

00:05:54,139 --> 00:06:00,020
is deploying often you know you want to

00:05:58,430 --> 00:06:01,969
really focus on just the point as often

00:06:00,020 --> 00:06:04,130
as I can basically every time it if

00:06:01,969 --> 00:06:05,779
possible you're gonna realize that means

00:06:04,130 --> 00:06:09,469
shorter time to production that's what

00:06:05,779 --> 00:06:12,020
TTP stands for so the time that you

00:06:09,469 --> 00:06:14,990
finish your code to the time it get some

00:06:12,020 --> 00:06:17,029
production is shorter because that's

00:06:14,990 --> 00:06:18,229
what you're focusing on and because

00:06:17,029 --> 00:06:20,419
that's what you're focusing on you're

00:06:18,229 --> 00:06:22,340
gonna do smaller commits you're not

00:06:20,419 --> 00:06:23,569
gonna write big massive features and

00:06:22,340 --> 00:06:25,210
deploy them all at once you're going to

00:06:23,569 --> 00:06:27,469
do it in tiny bits and pieces and

00:06:25,210 --> 00:06:30,259
because what you're deploying is tiny

00:06:27,469 --> 00:06:32,900
and small the risk of said change of

00:06:30,259 --> 00:06:34,729
production is actually really small

00:06:32,900 --> 00:06:38,349
you're not as worried about the deploy

00:06:34,729 --> 00:06:40,670
you won't break as many things and

00:06:38,349 --> 00:06:42,740
ultimately it's

00:06:40,670 --> 00:06:44,270
gonna be easier to test and if you do

00:06:42,740 --> 00:06:46,640
break production if you do is caused

00:06:44,270 --> 00:06:49,670
downtime you know exactly what change

00:06:46,640 --> 00:06:55,460
caused it because you only deployed one

00:06:49,670 --> 00:06:57,080
change and this is also a cycle as you

00:06:55,460 --> 00:07:00,050
start to have less stress you start to

00:06:57,080 --> 00:07:01,820
do it more often right and then the last

00:07:00,050 --> 00:07:04,160
bullet point says more secure code as

00:07:01,820 --> 00:07:06,020
well and that's kind of a hint that if

00:07:04,160 --> 00:07:08,000
you have like is your day or security

00:07:06,020 --> 00:07:09,980
vulnerability that you find because

00:07:08,000 --> 00:07:11,840
you're already in the habit of taking

00:07:09,980 --> 00:07:15,200
these changes all the way to production

00:07:11,840 --> 00:07:17,570
really fast you can actually secure your

00:07:15,200 --> 00:07:19,520
application really fast rather than

00:07:17,570 --> 00:07:22,090
waiting for like the next release cycle

00:07:19,520 --> 00:07:24,500
to fix this bug or doing some crazy

00:07:22,090 --> 00:07:26,120
hotfix you can just use our normal

00:07:24,500 --> 00:07:28,720
release cycle to just deploy your

00:07:26,120 --> 00:07:32,210
security patches

00:07:28,720 --> 00:07:34,370
so in the book continuous delivery they

00:07:32,210 --> 00:07:37,160
basically say this all the time if it's

00:07:34,370 --> 00:07:38,690
painful do it more often and this is

00:07:37,160 --> 00:07:41,480
like the mantra that you can tell

00:07:38,690 --> 00:07:42,860
yourself to actually fix not just

00:07:41,480 --> 00:07:45,890
deployments but pretty much everything

00:07:42,860 --> 00:07:49,040
in development process the concept here

00:07:45,890 --> 00:07:50,330
is imagine they like it really hurt when

00:07:49,040 --> 00:07:53,120
you tried to touch your elbow to your

00:07:50,330 --> 00:07:55,880
ear I just imagine that was a ton of

00:07:53,120 --> 00:07:57,440
pain you wouldn't really care because

00:07:55,880 --> 00:07:59,830
you never touch your elbow to your ear

00:07:57,440 --> 00:08:02,390
right you just not do it

00:07:59,830 --> 00:08:04,640
but if it hurt every single time you had

00:08:02,390 --> 00:08:06,650
to stand up you'd most likely go to a

00:08:04,640 --> 00:08:10,850
doctor get it fixed see what you could

00:08:06,650 --> 00:08:14,480
do so basically the premise is you're

00:08:10,850 --> 00:08:16,400
trying to push your pain and do it more

00:08:14,480 --> 00:08:19,220
often because out of self-preservation

00:08:16,400 --> 00:08:22,160
as yourself and as an organization you

00:08:19,220 --> 00:08:23,510
will fix the pain right so if

00:08:22,160 --> 00:08:25,780
deployments are painful and you're

00:08:23,510 --> 00:08:29,420
forcing yourself to do them all the time

00:08:25,780 --> 00:08:31,820
you will naturally fix it so it's not

00:08:29,420 --> 00:08:34,340
painful and again this isn't just

00:08:31,820 --> 00:08:37,850
deployments this can impact every single

00:08:34,340 --> 00:08:39,860
thing in your workflow if it's painful

00:08:37,850 --> 00:08:41,630
you do it more often and by doing it

00:08:39,860 --> 00:08:43,970
more often you will be incentivized to

00:08:41,630 --> 00:08:46,790
fix it for example the keynote this

00:08:43,970 --> 00:08:48,170
morning right the Python core developers

00:08:46,790 --> 00:08:49,520
found it really painful to do all these

00:08:48,170 --> 00:08:52,480
code reviews so what did they eventually

00:08:49,520 --> 00:08:54,440
do they fixed it they made a bot right

00:08:52,480 --> 00:08:58,300
so we do eventually

00:08:54,440 --> 00:09:00,410
fix these things that are painful so

00:08:58,300 --> 00:09:02,420
basically we need to all commit to

00:09:00,410 --> 00:09:04,010
having no downtime in order to have no

00:09:02,420 --> 00:09:05,390
downtime and it sounds kind of silly

00:09:04,010 --> 00:09:06,860
because you're like you haven't taught

00:09:05,390 --> 00:09:09,590
me anything you've just told me not to

00:09:06,860 --> 00:09:12,280
have downtime and just committing

00:09:09,590 --> 00:09:15,380
actually will kind of create it um

00:09:12,280 --> 00:09:17,240
so having no downtime means you don't

00:09:15,380 --> 00:09:18,830
have to deploy on weekends means are not

00:09:17,240 --> 00:09:20,420
up in the middle of night you get a

00:09:18,830 --> 00:09:22,430
deploy in the middle of the day when

00:09:20,420 --> 00:09:23,720
traffic is hottest because that's also

00:09:22,430 --> 00:09:28,460
when all your coworkers are nearby to

00:09:23,720 --> 00:09:30,230
help you you 90 percent of the time when

00:09:28,460 --> 00:09:31,820
you get an alert it's usually because of

00:09:30,230 --> 00:09:33,830
a deployment or a bug issue right so

00:09:31,820 --> 00:09:36,560
would you rather be alerted while you're

00:09:33,830 --> 00:09:40,310
at work and not at home sleeping right

00:09:36,560 --> 00:09:43,660
so like having no downtime is is useful

00:09:40,310 --> 00:09:46,430
to you as well not just your customers

00:09:43,660 --> 00:09:50,630
so now we'll get into the details how

00:09:46,430 --> 00:09:51,920
exactly does one have no downtime so the

00:09:50,630 --> 00:09:53,120
very first strategy and having no

00:09:51,920 --> 00:09:55,040
downtime is called a Bluegreen

00:09:53,120 --> 00:09:56,870
deployment it's really simple you

00:09:55,040 --> 00:09:58,760
basically have two environments a green

00:09:56,870 --> 00:10:01,520
one and a blue grin and a blue one hence

00:09:58,760 --> 00:10:03,740
Bluegreen right you have a router of

00:10:01,520 --> 00:10:05,420
some sort specifically I've left this

00:10:03,740 --> 00:10:07,070
generic it could be a load balancer it

00:10:05,420 --> 00:10:09,680
could be DNS could be various many

00:10:07,070 --> 00:10:11,450
things and then when you deploy you just

00:10:09,680 --> 00:10:14,900
change this era when you just point it

00:10:11,450 --> 00:10:17,810
to blue so basically you have all your

00:10:14,900 --> 00:10:19,010
production stuff running on green you

00:10:17,810 --> 00:10:21,200
deploy everything that you want to

00:10:19,010 --> 00:10:23,750
deploy to blue and then you flip the

00:10:21,200 --> 00:10:26,060
switch that's a blue green deployment

00:10:23,750 --> 00:10:28,970
there's a lot of kind of variations of

00:10:26,060 --> 00:10:31,820
this for example in this diagram it has

00:10:28,970 --> 00:10:32,960
two databases databases are actually

00:10:31,820 --> 00:10:35,210
really hard to sync if you don't know

00:10:32,960 --> 00:10:38,690
what you're doing so most people

00:10:35,210 --> 00:10:40,670
actually have one database and then they

00:10:38,690 --> 00:10:42,170
just have the blue green and you could

00:10:40,670 --> 00:10:44,089
also have variations where you just

00:10:42,170 --> 00:10:45,700
threw a blue green on one piece at a

00:10:44,089 --> 00:10:49,510
time

00:10:45,700 --> 00:10:52,970
so blue green is pretty common pattern

00:10:49,510 --> 00:10:56,360
but the biggest Conda blue green is the

00:10:52,970 --> 00:10:58,640
fact that if you are at larger scale so

00:10:56,360 --> 00:11:00,410
like more than five hosts or whatever

00:10:58,640 --> 00:11:03,880
they can start to get really costly

00:11:00,410 --> 00:11:05,600
because your two colors have to match

00:11:03,880 --> 00:11:08,420
essentially identically in

00:11:05,600 --> 00:11:09,200
infrastructure this gets really

00:11:08,420 --> 00:11:11,149
applicated when you're doing

00:11:09,200 --> 00:11:13,610
auto-scaling because your blue will

00:11:11,149 --> 00:11:14,779
currently have no traffic so if it's

00:11:13,610 --> 00:11:16,550
Auto scale that will now be at its

00:11:14,779 --> 00:11:18,410
minimum scale but if you deploy during

00:11:16,550 --> 00:11:20,180
your highest load your greens at its

00:11:18,410 --> 00:11:22,070
highest scale so as soon as you switch

00:11:20,180 --> 00:11:23,750
you're now gonna have downtime because

00:11:22,070 --> 00:11:26,720
you've just swapped to an environment

00:11:23,750 --> 00:11:28,490
that's not scaled correctly so this does

00:11:26,720 --> 00:11:30,290
cause some headaches of how do you scale

00:11:28,490 --> 00:11:32,269
how do you keep them intact and the most

00:11:30,290 --> 00:11:34,100
common problem with this is just cost at

00:11:32,269 --> 00:11:35,420
a certain point the organization just

00:11:34,100 --> 00:11:39,470
can't afford to have to production

00:11:35,420 --> 00:11:41,480
arounds running all the time some people

00:11:39,470 --> 00:11:43,339
say the cost is okay cuz they treat the

00:11:41,480 --> 00:11:44,899
blue is like their staging environment

00:11:43,339 --> 00:11:50,269
so they can always use it it matches

00:11:44,899 --> 00:11:52,760
production that's fine um the other

00:11:50,269 --> 00:11:54,880
strategy is a rolling deployment I think

00:11:52,760 --> 00:11:58,389
this one is more common to bigger places

00:11:54,880 --> 00:12:00,920
basically imagine you have version 1.1

00:11:58,389 --> 00:12:03,560
right is the black pac-man ghosts and

00:12:00,920 --> 00:12:04,810
you're trying to deploy version 1.2 the

00:12:03,560 --> 00:12:07,220
green pac-man ghosts

00:12:04,810 --> 00:12:09,470
basically what happens is if you have

00:12:07,220 --> 00:12:11,839
six instances or six nodes in production

00:12:09,470 --> 00:12:14,570
or anything like that you take one of

00:12:11,839 --> 00:12:18,040
them and you swap it out so you put

00:12:14,570 --> 00:12:20,959
version 1.2 on just one instance and

00:12:18,040 --> 00:12:22,790
then you wait for a period of time maybe

00:12:20,959 --> 00:12:25,040
it's a minute maybe it's an hour kind of

00:12:22,790 --> 00:12:26,149
to you and then once everything is okay

00:12:25,040 --> 00:12:30,769
and you know everything's fine you just

00:12:26,149 --> 00:12:32,060
keep going one at a time this saves you

00:12:30,769 --> 00:12:34,660
from the cost perspective because you

00:12:32,060 --> 00:12:36,860
always have the same number of instances

00:12:34,660 --> 00:12:40,190
because we're actually deploying it to

00:12:36,860 --> 00:12:42,880
the same environment but this can get

00:12:40,190 --> 00:12:45,019
really tricky if you have stateful

00:12:42,880 --> 00:12:47,300
services so for example if you're doing

00:12:45,019 --> 00:12:50,000
sticky sessions and you require servers

00:12:47,300 --> 00:12:51,440
to keep in memory your session this can

00:12:50,000 --> 00:12:52,910
cause issues because all the sudden you

00:12:51,440 --> 00:12:55,100
just pulled an instance out and replaced

00:12:52,910 --> 00:12:58,880
it so anything pointing to that instance

00:12:55,100 --> 00:12:59,990
could be broken potentially right here's

00:12:58,880 --> 00:13:02,199
some here's some things that you

00:12:59,990 --> 00:13:05,690
probably shouldn't do if you care about

00:13:02,199 --> 00:13:09,230
downtime a common deployment strategy I

00:13:05,690 --> 00:13:10,940
see is people say oh well I have Tomcat

00:13:09,230 --> 00:13:12,740
or in genetics running in front calling

00:13:10,940 --> 00:13:14,329
this other process so I'm just going to

00:13:12,740 --> 00:13:15,769
spin up another process and then I'm

00:13:14,329 --> 00:13:19,940
going to change my configuration file to

00:13:15,769 --> 00:13:22,000
point to the other process this can be a

00:13:19,940 --> 00:13:24,200
huge issue because

00:13:22,000 --> 00:13:26,210
your two processes could share

00:13:24,200 --> 00:13:27,410
dependencies so as soon as you install

00:13:26,210 --> 00:13:31,130
the new dependencies you could break

00:13:27,410 --> 00:13:33,140
yield one also there is actually

00:13:31,130 --> 00:13:36,740
downtime when you do this it might be

00:13:33,140 --> 00:13:40,100
milliseconds but it is there as it takes

00:13:36,740 --> 00:13:41,450
engine X to swap to new another common

00:13:40,100 --> 00:13:43,160
one is people just push their code

00:13:41,450 --> 00:13:45,050
straight to their deployment server or

00:13:43,160 --> 00:13:46,550
whatever right get it distributed you

00:13:45,050 --> 00:13:49,580
can push code to anyone anywhere so just

00:13:46,550 --> 00:13:51,380
get pushed directly to the server and

00:13:49,580 --> 00:13:53,720
then very similar to process swap is

00:13:51,380 --> 00:13:55,910
like a directory symlink whereas if you

00:13:53,720 --> 00:13:59,480
have Engine X calling files instead of a

00:13:55,910 --> 00:14:02,000
process you could create some sim link

00:13:59,480 --> 00:14:04,190
file that engine X points to and then

00:14:02,000 --> 00:14:05,570
use you know the operating system to

00:14:04,190 --> 00:14:07,490
change where that symlink actually

00:14:05,570 --> 00:14:09,560
points to and again there actually is

00:14:07,490 --> 00:14:13,459
downtime when you do this it might be a

00:14:09,560 --> 00:14:15,800
couple milliseconds but it is there also

00:14:13,459 --> 00:14:17,959
this is really hard to scale all of

00:14:15,800 --> 00:14:20,320
these is really hard to scale so if you

00:14:17,959 --> 00:14:22,610
start to go you know above two servers

00:14:20,320 --> 00:14:26,000
you have to do that for every server

00:14:22,610 --> 00:14:27,380
manually and that's just hard so here

00:14:26,000 --> 00:14:30,410
are some tools that actually support

00:14:27,380 --> 00:14:32,570
these both of these strategies directly

00:14:30,410 --> 00:14:34,670
both kubernetes an elastic beanstalk

00:14:32,570 --> 00:14:36,770
both support them by name so rolling

00:14:34,670 --> 00:14:38,209
deployment blue/green deployments Heroku

00:14:36,770 --> 00:14:41,990
supports both but they call them their

00:14:38,209 --> 00:14:44,390
own thing because that's Roku's way so

00:14:41,990 --> 00:14:45,830
if you just want like a simple solution

00:14:44,390 --> 00:14:47,600
that kind of does these things for you

00:14:45,830 --> 00:14:49,010
these are some of the tools that do them

00:14:47,600 --> 00:14:52,010
I'm sure there's a lot more but these

00:14:49,010 --> 00:14:53,779
are the ones I'm familiar with so

00:14:52,010 --> 00:14:55,700
everything we've talked about so far is

00:14:53,779 --> 00:14:58,250
actually the easy parts it's everything

00:14:55,700 --> 00:15:00,200
that you do once you solve once you

00:14:58,250 --> 00:15:01,180
write once or maybe your ops team does

00:15:00,200 --> 00:15:04,760
all of it for you

00:15:01,180 --> 00:15:08,500
the really hard part comes to how does

00:15:04,760 --> 00:15:11,480
your application itself actually handle

00:15:08,500 --> 00:15:14,120
downtime because even if the deployment

00:15:11,480 --> 00:15:16,130
strategy doesn't cause downtime the code

00:15:14,120 --> 00:15:19,430
in your application might when it swaps

00:15:16,130 --> 00:15:21,250
so this is called the main the main

00:15:19,430 --> 00:15:23,300
process here is backwards compatibility

00:15:21,250 --> 00:15:24,680
ultimately when your code causes

00:15:23,300 --> 00:15:26,120
downtime during a deployment it's

00:15:24,680 --> 00:15:31,700
because it's not actually backwards

00:15:26,120 --> 00:15:33,920
compatible with itself and so give you a

00:15:31,700 --> 00:15:35,030
couple of examples in in the blue-green

00:15:33,920 --> 00:15:35,740
deployment

00:15:35,030 --> 00:15:37,600
it almost looks like

00:15:35,740 --> 00:15:40,970
backwards-compatibility isn't an issue

00:15:37,600 --> 00:15:43,130
because your client the web server the

00:15:40,970 --> 00:15:45,590
client the web server is talking to your

00:15:43,130 --> 00:15:48,050
app server which is talking to its

00:15:45,590 --> 00:15:50,060
database so if you swap all of them at

00:15:48,050 --> 00:15:52,070
the same time there's no backwards

00:15:50,060 --> 00:15:54,140
compatibility issues that's kind of the

00:15:52,070 --> 00:15:56,960
misconception that blue/green kind of

00:15:54,140 --> 00:15:59,500
tells us but the reality is front-end

00:15:56,960 --> 00:16:03,410
code is loaded in your browser once and

00:15:59,500 --> 00:16:06,770
it stays there until a user refreshes so

00:16:03,410 --> 00:16:08,600
even though the server serving the

00:16:06,770 --> 00:16:10,040
front-end code has changed the front-end

00:16:08,600 --> 00:16:12,530
code already loaded in someone's browser

00:16:10,040 --> 00:16:16,400
might not have so if you've changed your

00:16:12,530 --> 00:16:18,170
back-end server and our old fronting

00:16:16,400 --> 00:16:23,780
code can't handle it you've just broken

00:16:18,170 --> 00:16:24,830
everyone who hasn't refreshed in the

00:16:23,780 --> 00:16:28,250
rolling deployment world backwards

00:16:24,830 --> 00:16:29,990
compatibility is a lot more easier to

00:16:28,250 --> 00:16:32,870
understand you actually have two

00:16:29,990 --> 00:16:36,370
versions of your code running at the

00:16:32,870 --> 00:16:38,360
same time this gets really bad because

00:16:36,370 --> 00:16:41,450
it's not per user

00:16:38,360 --> 00:16:42,890
it's like per request so one user might

00:16:41,450 --> 00:16:45,740
hit green and then black and then green

00:16:42,890 --> 00:16:50,360
and then black so everything has to work

00:16:45,740 --> 00:16:52,090
the same in both versions right so in

00:16:50,360 --> 00:16:54,560
order to handle backwards compatibility

00:16:52,090 --> 00:16:58,070
there's lots of things you can do in

00:16:54,560 --> 00:16:59,540
your application to fix this the very

00:16:58,070 --> 00:17:04,430
first one is your applications need to

00:16:59,540 --> 00:17:06,980
be stateless basically any time you need

00:17:04,430 --> 00:17:08,510
to use a session in memory or some type

00:17:06,980 --> 00:17:10,370
of sticky sessions you should probably

00:17:08,510 --> 00:17:11,990
shy away from that there are some

00:17:10,370 --> 00:17:14,600
possibilities to get around this and

00:17:11,990 --> 00:17:16,190
some people do it if they have like a

00:17:14,600 --> 00:17:18,380
hard requirement on it

00:17:16,190 --> 00:17:20,510
but basically you should shy away from

00:17:18,380 --> 00:17:23,420
anything and use a database for anything

00:17:20,510 --> 00:17:24,620
that you need state wise maybe that's

00:17:23,420 --> 00:17:26,780
Redis like maybe it's an in-memory

00:17:24,620 --> 00:17:28,100
database depending on your use case but

00:17:26,780 --> 00:17:34,190
either way you should use some type of

00:17:28,100 --> 00:17:35,630
datastore for any type of state second

00:17:34,190 --> 00:17:40,370
is for all your fronting code you should

00:17:35,630 --> 00:17:42,110
probably use a CDN I say you can self

00:17:40,370 --> 00:17:43,700
host it because you don't actually need

00:17:42,110 --> 00:17:46,340
to use like a real CDN but the main

00:17:43,700 --> 00:17:48,980
concept is you need a version in all of

00:17:46,340 --> 00:17:50,510
your fronting code all your CSS all

00:17:48,980 --> 00:17:53,059
javascript all everything needs to be

00:17:50,510 --> 00:17:54,590
versioned and then when you reference it

00:17:53,059 --> 00:17:58,400
you need a reference that specific

00:17:54,590 --> 00:18:02,059
version because if you have like main je

00:17:58,400 --> 00:18:04,669
s calling foo bar je s and you've just

00:18:02,059 --> 00:18:06,500
updated foo bar J s anyone who has

00:18:04,669 --> 00:18:08,990
mayonnaise in the browser but hasn't yet

00:18:06,500 --> 00:18:11,330
loaded fruit bar J yes might now load it

00:18:08,990 --> 00:18:13,280
and it might now be a new version that

00:18:11,330 --> 00:18:15,799
mayonnaise isn't handling so it'll

00:18:13,280 --> 00:18:17,480
actually break the JavaScript itself so

00:18:15,799 --> 00:18:19,070
to fix this you just version everything

00:18:17,480 --> 00:18:21,790
and so that main J's will call the

00:18:19,070 --> 00:18:23,870
specific version it knows about and

00:18:21,790 --> 00:18:26,030
because you're calling all these

00:18:23,870 --> 00:18:28,970
versions you essentially have to keep

00:18:26,030 --> 00:18:31,100
every version forever it's not

00:18:28,970 --> 00:18:33,169
technically true you can delete versions

00:18:31,100 --> 00:18:35,230
once you know they're no longer used but

00:18:33,169 --> 00:18:37,130
if you're using a CDN like s3 or

00:18:35,230 --> 00:18:38,990
CloudFlare or something it's actually

00:18:37,130 --> 00:18:40,910
usually cheaper just to keep it forever

00:18:38,990 --> 00:18:46,669
than it is to spend your own time trying

00:18:40,910 --> 00:18:48,020
to delete it the next is your api's

00:18:46,669 --> 00:18:52,429
themselves have to be backwards

00:18:48,020 --> 00:18:54,590
compatible so basically this means that

00:18:52,429 --> 00:18:56,510
the fields in your API whether it's a

00:18:54,590 --> 00:18:59,900
json api whether you're using templates

00:18:56,510 --> 00:19:01,070
on django side the actual fields need to

00:18:59,900 --> 00:19:03,169
stay the same name

00:19:01,070 --> 00:19:06,080
you can't rename them you can't delete

00:19:03,169 --> 00:19:08,030
them and you can totally add new fields

00:19:06,080 --> 00:19:10,429
that's totally fine but you can't make

00:19:08,030 --> 00:19:14,299
them required because a required field

00:19:10,429 --> 00:19:15,980
will break the old client and if you

00:19:14,299 --> 00:19:17,870
really do need to change something like

00:19:15,980 --> 00:19:20,530
the structure of your api or the fields

00:19:17,870 --> 00:19:23,090
in the api you need to use versions and

00:19:20,530 --> 00:19:26,150
the prom with versions is you now have

00:19:23,090 --> 00:19:27,799
to maintain all versions forever because

00:19:26,150 --> 00:19:29,900
you don't know which clients are calling

00:19:27,799 --> 00:19:32,120
the old version now if you can control

00:19:29,900 --> 00:19:33,290
that like you only have JavaScript you

00:19:32,120 --> 00:19:34,880
could eventually delete the old version

00:19:33,290 --> 00:19:37,730
if you have to make sure you maintain

00:19:34,880 --> 00:19:41,210
both versions until all clients are done

00:19:37,730 --> 00:19:43,070
using it I commonly see people use new

00:19:41,210 --> 00:19:44,630
API is rather than versions because it's

00:19:43,070 --> 00:19:48,860
sometimes easier to just create a new

00:19:44,630 --> 00:19:50,900
one and then probably the one that most

00:19:48,860 --> 00:19:52,610
people don't think about but is actually

00:19:50,900 --> 00:19:56,710
incredibly important is your database

00:19:52,610 --> 00:19:56,710
itself has to be backwards compatible so

00:19:56,890 --> 00:20:01,490
imagine I have a really basic model in

00:19:59,240 --> 00:20:03,020
Django call genre and this is straight

00:20:01,490 --> 00:20:07,100
from the Django tutorial

00:20:03,020 --> 00:20:09,170
right and it's just a 200 character

00:20:07,100 --> 00:20:11,330
field in your database when you create a

00:20:09,170 --> 00:20:13,940
migration this is the migration that

00:20:11,330 --> 00:20:16,280
Jenko creates it's really simple just

00:20:13,940 --> 00:20:19,130
creating a field 200 characters no big

00:20:16,280 --> 00:20:21,559
deal but now imagine you were going to

00:20:19,130 --> 00:20:25,160
change that character limit from 200 to

00:20:21,559 --> 00:20:27,200
100 what would happen is as soon as you

00:20:25,160 --> 00:20:30,110
ran the migration all the code currently

00:20:27,200 --> 00:20:31,610
in the production would break because it

00:20:30,110 --> 00:20:35,000
might be inserting more than hundred

00:20:31,610 --> 00:20:36,650
characters right so you really have to

00:20:35,000 --> 00:20:38,240
be careful about the schema changes that

00:20:36,650 --> 00:20:40,059
you make in your database and make sure

00:20:38,240 --> 00:20:42,650
that they are backwards compatible

00:20:40,059 --> 00:20:44,059
there's also some weird gotchas without

00:20:42,650 --> 00:20:47,420
even changing your schema that you don't

00:20:44,059 --> 00:20:49,070
think about so for in this example if

00:20:47,420 --> 00:20:50,840
you notice the only thing we've changed

00:20:49,070 --> 00:20:53,120
to the model is we've added this DB

00:20:50,840 --> 00:20:56,510
index equals true field it's all we've

00:20:53,120 --> 00:20:58,070
done the migration it creates looks

00:20:56,510 --> 00:21:00,559
exactly like it it just says okay now

00:20:58,070 --> 00:21:01,970
I'm gonna index this field this looks

00:21:00,559 --> 00:21:04,429
like you haven't changed your schema at

00:21:01,970 --> 00:21:08,960
all but what's actually going to happen

00:21:04,429 --> 00:21:11,059
is most databases for example Postgres

00:21:08,960 --> 00:21:14,540
will actually do a full table lock on

00:21:11,059 --> 00:21:16,760
the entire table while it indexes so now

00:21:14,540 --> 00:21:22,520
all your servers cannot talk to this

00:21:16,760 --> 00:21:23,990
table while this index is happening post

00:21:22,520 --> 00:21:25,670
grass has a future for you to do

00:21:23,990 --> 00:21:27,260
concurrent indexes you can actually

00:21:25,670 --> 00:21:29,480
create the index concurrently without

00:21:27,260 --> 00:21:32,630
locking the table so in this scenario

00:21:29,480 --> 00:21:35,510
you would just you'd have to modify the

00:21:32,630 --> 00:21:37,550
migration yourself to use more proper

00:21:35,510 --> 00:21:39,380
techniques there's no easy answer here

00:21:37,550 --> 00:21:40,900
because ultimately it boils down to you

00:21:39,380 --> 00:21:43,130
need to know your database really well

00:21:40,900 --> 00:21:46,420
you are gonna have issues where your

00:21:43,130 --> 00:21:51,260
database does weird things for example

00:21:46,420 --> 00:21:52,580
we we had an issue once where we ran a

00:21:51,260 --> 00:21:55,220
migration and we knew it was going to do

00:21:52,580 --> 00:21:56,750
a full table lock but we realized that

00:21:55,220 --> 00:21:59,600
the table was small enough that the full

00:21:56,750 --> 00:22:02,210
table lock would only take like a second

00:21:59,600 --> 00:22:03,980
at most and we figured that was ok we

00:22:02,210 --> 00:22:05,300
were gonna do it anyway but there was

00:22:03,980 --> 00:22:07,520
this really weird issue where a

00:22:05,300 --> 00:22:09,140
developer actually was connected to the

00:22:07,520 --> 00:22:11,830
production database at the time that we

00:22:09,140 --> 00:22:14,540
ran a migration and so the migration

00:22:11,830 --> 00:22:16,309
requested a lock but was waiting for

00:22:14,540 --> 00:22:16,880
their connection to stop because they

00:22:16,309 --> 00:22:20,270
had already had

00:22:16,880 --> 00:22:22,700
Laak so migration is basically locked

00:22:20,270 --> 00:22:24,920
and every other connection in production

00:22:22,700 --> 00:22:25,460
is waiting for the migrations lock to

00:22:24,920 --> 00:22:28,340
release

00:22:25,460 --> 00:22:29,780
so basically production is down for 40

00:22:28,340 --> 00:22:32,240
minutes until we realized all we had to

00:22:29,780 --> 00:22:34,400
do is kill that connection right so

00:22:32,240 --> 00:22:35,930
there's going to be weird gotchas with

00:22:34,400 --> 00:22:38,540
your database things that you will not

00:22:35,930 --> 00:22:39,800
see coming but ultimately you have to

00:22:38,540 --> 00:22:41,750
really think about what's in your

00:22:39,800 --> 00:22:45,680
database and how is it not backwards

00:22:41,750 --> 00:22:46,970
compatible with itself basically another

00:22:45,680 --> 00:22:48,890
rule of thumb is if you have to do a

00:22:46,970 --> 00:22:51,050
data migration there's a three-step

00:22:48,890 --> 00:22:53,420
process but try to avoid doing a data

00:22:51,050 --> 00:22:55,880
migration or a schema migration if

00:22:53,420 --> 00:22:57,860
necessary data migration is basically

00:22:55,880 --> 00:22:59,210
you're taking the data in the database

00:22:57,860 --> 00:23:01,280
and changing it but you're not actually

00:22:59,210 --> 00:23:02,630
changing the database itself so this

00:23:01,280 --> 00:23:04,760
would be like a script you write that

00:23:02,630 --> 00:23:05,930
dumps a column changes it puts it back

00:23:04,760 --> 00:23:08,840
in or something like that

00:23:05,930 --> 00:23:10,610
um again you can do this but if you do

00:23:08,840 --> 00:23:13,460
use a three-step process which we'll

00:23:10,610 --> 00:23:15,050
talk about and then the last hint is you

00:23:13,460 --> 00:23:17,240
should always run your migration before

00:23:15,050 --> 00:23:19,220
you deploy not during a lot of people

00:23:17,240 --> 00:23:21,320
they get in the habit you know of just

00:23:19,220 --> 00:23:23,420
running migration spinning up the server

00:23:21,320 --> 00:23:27,280
so every time you spin up a server it's

00:23:23,420 --> 00:23:29,660
trying to run the migration if you

00:23:27,280 --> 00:23:31,130
accidentally make your migration like

00:23:29,660 --> 00:23:32,810
let's say you're not using Jenko to do

00:23:31,130 --> 00:23:37,100
it you could end up running your

00:23:32,810 --> 00:23:38,810
migration over and over but also what's

00:23:37,100 --> 00:23:41,780
more important is you want to catch

00:23:38,810 --> 00:23:44,870
migration failures before you even begin

00:23:41,780 --> 00:23:46,310
to deploy you don't want your deployment

00:23:44,870 --> 00:23:47,810
to fail because your migration failed

00:23:46,310 --> 00:23:49,610
you want to catch that as a separate

00:23:47,810 --> 00:23:52,840
step so you should always run your

00:23:49,610 --> 00:23:58,700
migration is its own step in in your CI

00:23:52,840 --> 00:24:00,380
before you go to actually deploy so the

00:23:58,700 --> 00:24:02,540
3-step deploy process is actually really

00:24:00,380 --> 00:24:05,270
simple you basically change your code to

00:24:02,540 --> 00:24:06,920
handle it both ways so let's say you had

00:24:05,270 --> 00:24:10,040
a column genre and you wanted to change

00:24:06,920 --> 00:24:13,160
it to 100 characters you would take your

00:24:10,040 --> 00:24:14,360
code and you would adjust it to handle

00:24:13,160 --> 00:24:16,490
both ways you would actually make a

00:24:14,360 --> 00:24:19,610
whole new column like genre 2 or

00:24:16,490 --> 00:24:20,990
something and you would take your code

00:24:19,610 --> 00:24:23,090
and you would write the code to say hey

00:24:20,990 --> 00:24:27,140
if Jean Row 2 exists use that field

00:24:23,090 --> 00:24:29,870
otherwise keep using genre now your code

00:24:27,140 --> 00:24:30,680
can handle both ways right once your

00:24:29,870 --> 00:24:32,480
code is

00:24:30,680 --> 00:24:34,100
Floyd and it can handle both ways you

00:24:32,480 --> 00:24:36,050
now run a script that actually moves the

00:24:34,100 --> 00:24:37,640
data over so it copies the one column

00:24:36,050 --> 00:24:39,620
adjust the data puts it in the second

00:24:37,640 --> 00:24:41,420
column since your code can handle both

00:24:39,620 --> 00:24:43,490
ways it still works even in production

00:24:41,420 --> 00:24:45,140
while you're doing this and then lastly

00:24:43,490 --> 00:24:46,790
you probably want to remove that from

00:24:45,140 --> 00:24:48,530
your code so that your code doesn't have

00:24:46,790 --> 00:24:51,950
all these weird ugly of statements from

00:24:48,530 --> 00:24:53,510
days past right um you might want to

00:24:51,950 --> 00:24:54,770
remove it from your database but maybe

00:24:53,510 --> 00:24:56,210
you don't care maybe you just keep that

00:24:54,770 --> 00:24:59,240
data in the database forever and you

00:24:56,210 --> 00:25:02,150
just don't use it so that's a three step

00:24:59,240 --> 00:25:04,070
deploy process it can take a couple days

00:25:02,150 --> 00:25:06,860
or a couple minutes kind of depending on

00:25:04,070 --> 00:25:08,510
you some people like to leave step one

00:25:06,860 --> 00:25:10,490
in production for a while so that

00:25:08,510 --> 00:25:12,320
they're only migrating the data of the

00:25:10,490 --> 00:25:16,790
users who haven't used the app in a

00:25:12,320 --> 00:25:20,840
while but ultimately how fast this takes

00:25:16,790 --> 00:25:22,430
is kind up to you and then the last

00:25:20,840 --> 00:25:24,710
thing you need to do to your application

00:25:22,430 --> 00:25:27,920
is you need to make sure it has health

00:25:24,710 --> 00:25:29,900
checks you want your deployments process

00:25:27,920 --> 00:25:32,060
to know if you're actually healthy or

00:25:29,900 --> 00:25:32,900
not while you're deploying so it helps

00:25:32,060 --> 00:25:34,640
to have health checks in your

00:25:32,900 --> 00:25:38,110
application so you can actually say hey

00:25:34,640 --> 00:25:40,670
I'm up I'm alive I'm fine no code issues

00:25:38,110 --> 00:25:44,300
this also allows you to automatically

00:25:40,670 --> 00:25:48,080
rollback a bad deploy so if you have

00:25:44,300 --> 00:25:49,940
health checks that are failing then you

00:25:48,080 --> 00:25:54,260
just roll back automatically no problem

00:25:49,940 --> 00:25:55,970
right so those are kind of the simple

00:25:54,260 --> 00:25:57,890
things well not really simple but those

00:25:55,970 --> 00:26:00,650
are those are like the key concepts on

00:25:57,890 --> 00:26:02,870
how to have a backwards compatible

00:26:00,650 --> 00:26:05,900
application so that you can deploy it

00:26:02,870 --> 00:26:07,430
with no downtime so now the only thing

00:26:05,900 --> 00:26:10,780
that remains is trying to do it often

00:26:07,430 --> 00:26:14,350
and ultimately at the end of the day

00:26:10,780 --> 00:26:18,770
doing it often actually boils down to

00:26:14,350 --> 00:26:19,970
feeling confident right you don't do

00:26:18,770 --> 00:26:21,380
things often because you don't feel

00:26:19,970 --> 00:26:24,200
confident enough and as long as we felt

00:26:21,380 --> 00:26:25,640
confident enough in our deployment we

00:26:24,200 --> 00:26:27,950
would do it often because why would why

00:26:25,640 --> 00:26:29,150
would we not do it if we feel like

00:26:27,950 --> 00:26:32,480
there's no downtime and there's no

00:26:29,150 --> 00:26:33,920
impact so there's a whole bunch of

00:26:32,480 --> 00:26:36,710
things you can do to kind of increase

00:26:33,920 --> 00:26:38,960
confidence in your deployments I think

00:26:36,710 --> 00:26:42,380
the biggest the biggest one is artifact

00:26:38,960 --> 00:26:44,419
deployments artifacts is basically

00:26:42,380 --> 00:26:47,749
instead of taking your code

00:26:44,419 --> 00:26:50,840
and doing like pip install as you deploy

00:26:47,749 --> 00:26:53,210
you actually want to do that once before

00:26:50,840 --> 00:26:55,999
you deploy anywhere this is a concept

00:26:53,210 --> 00:26:57,499
that docker will kind of give you is you

00:26:55,999 --> 00:26:59,419
do all the installation all the

00:26:57,499 --> 00:27:01,629
dependencies everything once you package

00:26:59,419 --> 00:27:04,100
that up into one big artifact and then

00:27:01,629 --> 00:27:06,139
instead of your deployment process doing

00:27:04,100 --> 00:27:08,960
installations your deployment process

00:27:06,139 --> 00:27:10,519
just takes the artifact and runs it all

00:27:08,960 --> 00:27:12,619
right so if you're using Dockers that

00:27:10,519 --> 00:27:14,570
would be a docker build and then you

00:27:12,619 --> 00:27:17,419
just deploy the exact same docker image

00:27:14,570 --> 00:27:19,399
every time if you are using docker you

00:27:17,419 --> 00:27:20,600
wouldn't want to like push to stage and

00:27:19,399 --> 00:27:22,779
then push to master you would actually

00:27:20,600 --> 00:27:25,369
want to use the exact same image in

00:27:22,779 --> 00:27:26,749
every environment and that increases

00:27:25,369 --> 00:27:29,769
confidence because you know that what

00:27:26,749 --> 00:27:33,070
you're deploying is exactly what you had

00:27:29,769 --> 00:27:36,019
deployed in your previous environment

00:27:33,070 --> 00:27:37,549
the next thing is roll backs you want to

00:27:36,019 --> 00:27:40,999
make rolling back your deployment

00:27:37,549 --> 00:27:42,739
incredibly incredibly easy if rolling

00:27:40,999 --> 00:27:44,989
back is a manual process if it's

00:27:42,739 --> 00:27:47,330
something that's painful you're gonna be

00:27:44,989 --> 00:27:48,950
less likely to deploy because if you run

00:27:47,330 --> 00:27:51,200
into a problem rolling back it's gonna

00:27:48,950 --> 00:27:53,559
be hard so you really want a dedicate

00:27:51,200 --> 00:27:59,480
effort into making your rollback process

00:27:53,559 --> 00:28:01,279
really simple and in a way that your

00:27:59,480 --> 00:28:02,720
developers or whoever would do the

00:28:01,279 --> 00:28:05,679
rollback can just like click one button

00:28:02,720 --> 00:28:09,109
or a slot command or something like that

00:28:05,679 --> 00:28:10,909
then roll backs are always your plan B

00:28:09,109 --> 00:28:13,609
if anything goes south

00:28:10,909 --> 00:28:15,289
rolling back is always an option because

00:28:13,609 --> 00:28:18,710
you're now backwards compatible so

00:28:15,289 --> 00:28:20,480
rolling back should be fine so it's

00:28:18,710 --> 00:28:25,039
really helpful to have good rollback

00:28:20,480 --> 00:28:26,299
process so that you feel less fear when

00:28:25,039 --> 00:28:28,399
you deploy because you know there's

00:28:26,299 --> 00:28:29,840
always the possibility of oh if anything

00:28:28,399 --> 00:28:31,239
goes south I'll just roll back we'll be

00:28:29,840 --> 00:28:34,220
fine

00:28:31,239 --> 00:28:36,009
the next is Canaries and this requires

00:28:34,220 --> 00:28:39,379
kind of a little bit of a precursor

00:28:36,009 --> 00:28:42,529
there's actually in the deployment realm

00:28:39,379 --> 00:28:44,570
there's actually two Canaries one is

00:28:42,529 --> 00:28:46,159
what Amazon calls the canary and one is

00:28:44,570 --> 00:28:47,799
what Google calls a canary and there are

00:28:46,159 --> 00:28:50,679
actually two entirely different things

00:28:47,799 --> 00:28:54,759
so this gets really confusing sometimes

00:28:50,679 --> 00:28:58,530
I'm going to talk about both of them but

00:28:54,759 --> 00:29:01,710
this one oli will references Amazon scan

00:28:58,530 --> 00:29:04,230
which is basically an API test that runs

00:29:01,710 --> 00:29:06,750
right after your deployment so the

00:29:04,230 --> 00:29:10,549
concept is once you deploy you want to

00:29:06,750 --> 00:29:13,320
run a suite of tests against production

00:29:10,549 --> 00:29:16,200
maybe is like a real simulated user to

00:29:13,320 --> 00:29:21,059
do some key important things and then if

00:29:16,200 --> 00:29:22,919
anything in that test fails then you can

00:29:21,059 --> 00:29:23,820
roll back automatically your Canaries

00:29:22,919 --> 00:29:25,850
could just trigger it

00:29:23,820 --> 00:29:28,610
hey this API is now failing rollback

00:29:25,850 --> 00:29:30,840
this dramatically increases confidence

00:29:28,610 --> 00:29:32,549
because you can know that you haven't

00:29:30,840 --> 00:29:34,950
broken any important business processes

00:29:32,549 --> 00:29:36,960
for example at Amazon they have a canary

00:29:34,950 --> 00:29:38,400
that actually runs every 20 seconds that

00:29:36,960 --> 00:29:41,960
goes and buys a banana puts it in a

00:29:38,400 --> 00:29:44,250
shopping cart and actually ships it so

00:29:41,960 --> 00:29:46,290
they're trying to prove that like their

00:29:44,250 --> 00:29:48,990
website can actually take orders all the

00:29:46,290 --> 00:29:51,870
time because that is really important to

00:29:48,990 --> 00:29:54,030
Amazon believe it or not so you want to

00:29:51,870 --> 00:29:55,919
have things in production that kind of

00:29:54,030 --> 00:29:59,400
test your key features and allow you to

00:29:55,919 --> 00:30:00,960
know if you need a rollback or not the

00:29:59,400 --> 00:30:03,390
next I'm gonna call shadow deploys this

00:30:00,960 --> 00:30:06,960
is what Google calls a canary it's the

00:30:03,390 --> 00:30:08,429
concept of you have you have an it's

00:30:06,960 --> 00:30:10,590
kind of like rolling deploys where you

00:30:08,429 --> 00:30:12,150
swap out an instance but instead you

00:30:10,590 --> 00:30:15,960
kind of have one sitting here as a

00:30:12,150 --> 00:30:18,059
shadow and it either takes a replica of

00:30:15,960 --> 00:30:20,850
traffic or a very small percentage of

00:30:18,059 --> 00:30:23,190
traffic that way you can actually test

00:30:20,850 --> 00:30:26,940
your deployment before fully committing

00:30:23,190 --> 00:30:29,040
I think the safest way to do this is

00:30:26,940 --> 00:30:32,309
actually a replica of traffic so you

00:30:29,040 --> 00:30:34,679
want to take your real traffic and you

00:30:32,309 --> 00:30:36,809
want to replicate it and send it against

00:30:34,679 --> 00:30:39,419
your shadow deploy and then you can

00:30:36,809 --> 00:30:41,730
actually compare the responses of both

00:30:39,419 --> 00:30:43,650
your current server and your new server

00:30:41,730 --> 00:30:47,610
and make sure that there's not any

00:30:43,650 --> 00:30:49,440
serious differences um the replicating

00:30:47,610 --> 00:30:53,010
is actually ridiculously difficult it

00:30:49,440 --> 00:30:56,190
turns out so a more simple concept is

00:30:53,010 --> 00:30:59,250
you just send potentially like 1% of all

00:30:56,190 --> 00:31:00,570
your traffic to your new one and then

00:30:59,250 --> 00:31:02,130
once it's up for a little bit of time

00:31:00,570 --> 00:31:05,840
and it's got enough traffic you can feel

00:31:02,130 --> 00:31:09,380
confident then you trigger the deploy

00:31:05,840 --> 00:31:12,100
the next one is called feature toggles

00:31:09,380 --> 00:31:14,559
basically this is a concept of taking

00:31:12,100 --> 00:31:17,740
release and separating it from her

00:31:14,559 --> 00:31:19,990
actual deployment itself often times we

00:31:17,740 --> 00:31:23,320
have business requirements that do not

00:31:19,990 --> 00:31:24,610
coordinate with developer changes for

00:31:23,320 --> 00:31:28,030
example you might have this big

00:31:24,610 --> 00:31:29,350
marketing push that says hey we want to

00:31:28,030 --> 00:31:31,750
release this feature but we've already

00:31:29,350 --> 00:31:34,120
like got all these email campaigns ready

00:31:31,750 --> 00:31:35,380
to go and all this stuff and we don't

00:31:34,120 --> 00:31:37,929
want you to release the future until

00:31:35,380 --> 00:31:40,270
then so basically you can't deploy until

00:31:37,929 --> 00:31:42,610
Tuesday right but if you have any

00:31:40,270 --> 00:31:45,370
security changes or small bug fixes etc

00:31:42,610 --> 00:31:47,559
you now have to wait till Tuesday or you

00:31:45,370 --> 00:31:49,480
have to do something different like some

00:31:47,559 --> 00:31:50,100
crazy hotfix release in order to fix

00:31:49,480 --> 00:31:54,250
those things

00:31:50,100 --> 00:31:56,320
so if we use feature toggles you

00:31:54,250 --> 00:31:58,270
actually separate that release from the

00:31:56,320 --> 00:31:59,770
deployment you don't want to use

00:31:58,270 --> 00:32:02,770
deployments to release big features

00:31:59,770 --> 00:32:05,169
because that is scary so how a future

00:32:02,770 --> 00:32:06,610
toggle works in concept a lot of people

00:32:05,169 --> 00:32:08,559
use environment variables it can be a

00:32:06,610 --> 00:32:10,390
service itself but basically it really

00:32:08,559 --> 00:32:14,620
is just an if block in your code that

00:32:10,390 --> 00:32:17,919
says if this toggle is on do the new

00:32:14,620 --> 00:32:20,530
thing otherwise do the old thing right

00:32:17,919 --> 00:32:22,419
and if you have that if statement then

00:32:20,530 --> 00:32:24,250
you can actually push out your code to

00:32:22,419 --> 00:32:26,230
production for a new feature without

00:32:24,250 --> 00:32:28,480
customers seeing that new feature and

00:32:26,230 --> 00:32:31,330
then as soon as you turn that toggle on

00:32:28,480 --> 00:32:32,890
now they'll see the new feature you can

00:32:31,330 --> 00:32:36,010
get really sophisticated with future

00:32:32,890 --> 00:32:37,750
toggles and make it so you can test the

00:32:36,010 --> 00:32:39,909
toggle in production without your

00:32:37,750 --> 00:32:41,890
customers that you can actually test in

00:32:39,909 --> 00:32:43,210
production safely like real joke about

00:32:41,890 --> 00:32:47,020
testing in production but you can

00:32:43,210 --> 00:32:49,510
totally do it I've kind of hinted at

00:32:47,020 --> 00:32:51,640
this but having multiple environments so

00:32:49,510 --> 00:32:52,840
not just production but having like a

00:32:51,640 --> 00:32:54,460
development environment maybe a

00:32:52,840 --> 00:32:57,220
pre-production environment is really

00:32:54,460 --> 00:32:59,409
going to help because you're now you now

00:32:57,220 --> 00:33:01,960
have a pipeline so to speak of your code

00:32:59,409 --> 00:33:05,200
that you're rolling towards production

00:33:01,960 --> 00:33:06,400
and the closer you get to production the

00:33:05,200 --> 00:33:09,549
more confident you're going to feel

00:33:06,400 --> 00:33:10,780
about it and it really helps if every

00:33:09,549 --> 00:33:14,039
single one of your environments has a

00:33:10,780 --> 00:33:16,570
specific purpose you don't want to come

00:33:14,039 --> 00:33:17,830
I'm complete a bunch of concepts into

00:33:16,570 --> 00:33:19,780
one environment be like oh we're going

00:33:17,830 --> 00:33:21,700
to do testing and performance testing

00:33:19,780 --> 00:33:23,380
and monitoring like all on one

00:33:21,700 --> 00:33:24,909
environment so it helps if you have

00:33:23,380 --> 00:33:25,900
multiple environments for each purpose

00:33:24,909 --> 00:33:27,340
and then as it

00:33:25,900 --> 00:33:29,440
passes through each environment in your

00:33:27,340 --> 00:33:31,480
pipeline you start to gain more and more

00:33:29,440 --> 00:33:33,840
confidence that the code going out of

00:33:31,480 --> 00:33:36,100
production is going to be okay

00:33:33,840 --> 00:33:37,750
this one isn't directly related to

00:33:36,100 --> 00:33:40,150
deployments but it's really important

00:33:37,750 --> 00:33:42,460
and its concept of a worker tear and if

00:33:40,150 --> 00:33:44,050
you use celery it's very similar you're

00:33:42,460 --> 00:33:45,370
probably gonna have background processes

00:33:44,050 --> 00:33:48,430
that are doing things long-running

00:33:45,370 --> 00:33:52,240
processes you typically want to deploy

00:33:48,430 --> 00:33:54,340
those two separate hosts or things so

00:33:52,240 --> 00:33:56,580
that when you deploy those long-running

00:33:54,340 --> 00:33:59,080
processes don't just get shut off

00:33:56,580 --> 00:34:01,960
especially if you have processes that

00:33:59,080 --> 00:34:03,880
run longer than say an hour then that

00:34:01,960 --> 00:34:06,550
means you you don't want to deploy all

00:34:03,880 --> 00:34:08,679
the time because now your long-running

00:34:06,550 --> 00:34:09,730
processes are gonna just keep getting

00:34:08,679 --> 00:34:12,159
queued up and they're never going to

00:34:09,730 --> 00:34:13,480
finish so if you have an actual separate

00:34:12,159 --> 00:34:15,790
worker tier that can handle these

00:34:13,480 --> 00:34:17,860
long-running processes it really helps

00:34:15,790 --> 00:34:19,540
so that you can deploy less often to the

00:34:17,860 --> 00:34:23,770
worker tier but still deploy often to

00:34:19,540 --> 00:34:26,080
your web I'm testing is really big

00:34:23,770 --> 00:34:28,090
obviously I specifically say contract

00:34:26,080 --> 00:34:30,100
testing here because I want to emphasize

00:34:28,090 --> 00:34:32,230
that selenium testing is not sufficient

00:34:30,100 --> 00:34:34,060
you're really trying to test for

00:34:32,230 --> 00:34:36,750
backwards compatibility ultimately and

00:34:34,060 --> 00:34:39,940
selenium testing is really brittle and

00:34:36,750 --> 00:34:42,010
just because it breaks doesn't mean that

00:34:39,940 --> 00:34:45,730
functionality really broke so you want

00:34:42,010 --> 00:34:47,200
really hard contract like API tests that

00:34:45,730 --> 00:34:49,210
if they break you know you broke

00:34:47,200 --> 00:34:53,260
backwards compatibility you know you're

00:34:49,210 --> 00:34:55,570
gonna have an issue and then this is

00:34:53,260 --> 00:34:57,430
probably the hardest step at all but try

00:34:55,570 --> 00:34:59,350
to encourage yourself to have zero

00:34:57,430 --> 00:35:02,320
manual steps in your entire process

00:34:59,350 --> 00:35:03,970
other than you you know doing the like

00:35:02,320 --> 00:35:06,640
code review maybe and clicking the merge

00:35:03,970 --> 00:35:08,950
button at that point everything should

00:35:06,640 --> 00:35:10,900
be automated as much as possible we're

00:35:08,950 --> 00:35:14,650
humans we don't work 24/7

00:35:10,900 --> 00:35:16,570
we take vacations right you don't want

00:35:14,650 --> 00:35:18,700
to deploy to be delayed two weeks

00:35:16,570 --> 00:35:20,230
because your coworker had to take a

00:35:18,700 --> 00:35:23,590
vacation and they're the one who clicks

00:35:20,230 --> 00:35:25,420
deploy so the less manual steps in your

00:35:23,590 --> 00:35:26,980
pipeline the better it might be a good

00:35:25,420 --> 00:35:31,120
starting point to just make it a one

00:35:26,980 --> 00:35:33,010
button click for deployments um but this

00:35:31,120 --> 00:35:36,970
is really hard because it means you feel

00:35:33,010 --> 00:35:39,730
confident in your process itself this

00:35:36,970 --> 00:35:41,500
one goes along with future toggles but

00:35:39,730 --> 00:35:43,599
not having future branches is actually

00:35:41,500 --> 00:35:46,810
really going to help you future branches

00:35:43,599 --> 00:35:49,420
encourage you to work on code for a long

00:35:46,810 --> 00:35:52,480
period of time and make these big giant

00:35:49,420 --> 00:35:54,070
changes to your environment but if we

00:35:52,480 --> 00:35:56,339
instead force everyone to only use

00:35:54,070 --> 00:35:58,570
master and commit to no branches at all

00:35:56,339 --> 00:36:01,240
it's actually much better because people

00:35:58,570 --> 00:36:05,109
are going to do smaller smaller commits

00:36:01,240 --> 00:36:10,710
all the time and that's pretty much all

00:36:05,109 --> 00:36:10,710
my strategies um so I can take questions

00:36:11,910 --> 00:36:18,400
[Applause]

00:36:15,780 --> 00:36:21,880
great talk thank you of a question well

00:36:18,400 --> 00:36:23,170
how are you handling feature flags is

00:36:21,880 --> 00:36:25,000
that something you rolled your own using

00:36:23,170 --> 00:36:26,950
a service just curious thank you yeah so

00:36:25,000 --> 00:36:28,900
so my current company we actually did

00:36:26,950 --> 00:36:33,460
roll our own we wrote our own service to

00:36:28,900 --> 00:36:35,410
do it we used to use just like

00:36:33,460 --> 00:36:37,329
environment variables and we would just

00:36:35,410 --> 00:36:39,550
change that environment variable when we

00:36:37,329 --> 00:36:41,260
wanted to turn it on but then we're now

00:36:39,550 --> 00:36:43,510
very heavily invested in micro services

00:36:41,260 --> 00:36:47,079
so we realized oftentimes a feature now

00:36:43,510 --> 00:36:49,750
spans more than one code base and so we

00:36:47,079 --> 00:36:50,140
ended up rolling our own service to do

00:36:49,750 --> 00:36:51,849
that

00:36:50,140 --> 00:36:54,250
you could also just use a key value

00:36:51,849 --> 00:36:56,410
store like console or something but

00:36:54,250 --> 00:36:58,619
basically we just wrote our own so that

00:36:56,410 --> 00:37:00,670
you could just click it on and then

00:36:58,619 --> 00:37:02,380
every service gets it on at the same

00:37:00,670 --> 00:37:04,329
time great talk

00:37:02,380 --> 00:37:09,520
I had a follow-up question about schema

00:37:04,329 --> 00:37:13,329
migrations so how do you socialize the

00:37:09,520 --> 00:37:15,670
need for doing the multi step migration

00:37:13,329 --> 00:37:17,500
changes because as a developer when you

00:37:15,670 --> 00:37:19,390
have a ticket to make a change you know

00:37:17,500 --> 00:37:21,190
the obvious thing is you make a pull

00:37:19,390 --> 00:37:23,770
request that implements the change from

00:37:21,190 --> 00:37:26,380
one thing to another and how do you kind

00:37:23,770 --> 00:37:28,150
of socialize the need to to do it in the

00:37:26,380 --> 00:37:30,400
multiple steps like you described yeah

00:37:28,150 --> 00:37:33,010
so the answer to that's really

00:37:30,400 --> 00:37:34,900
complicated I think it basically boils

00:37:33,010 --> 00:37:37,210
down to you really do need buy-in from

00:37:34,900 --> 00:37:39,069
the top basically because it's a culture

00:37:37,210 --> 00:37:41,319
change really you have to as a culture

00:37:39,069 --> 00:37:43,630
accept that as a company you are not

00:37:41,319 --> 00:37:45,579
going to do downtime and so it ends up

00:37:43,630 --> 00:37:47,530
becoming part of the code review because

00:37:45,579 --> 00:37:49,869
in the code review you now say hey will

00:37:47,530 --> 00:37:53,230
this schema change cause downtime maybe

00:37:49,869 --> 00:37:54,850
we should do a three step process so we

00:37:53,230 --> 00:37:56,020
you look for it in our code reviews it's

00:37:54,850 --> 00:37:58,090
one of the things we specifically look

00:37:56,020 --> 00:38:00,040
for but again that requires buy-in

00:37:58,090 --> 00:38:02,890
everywhere everyone has to commit to hey

00:38:00,040 --> 00:38:03,940
we're not doing downtime if you have SLA

00:38:02,890 --> 00:38:07,090
is this is really easy because it's

00:38:03,940 --> 00:38:10,210
forced upon you but otherwise it kind of

00:38:07,090 --> 00:38:12,550
does take top-level commitment well for

00:38:10,210 --> 00:38:13,990
wanting they how do you get from here to

00:38:12,550 --> 00:38:17,770
there so if you have an existing

00:38:13,990 --> 00:38:20,650
deployment that is very manual very very

00:38:17,770 --> 00:38:22,300
hands-on it does have downtime are there

00:38:20,650 --> 00:38:23,859
any any suggestions or have you got any

00:38:22,300 --> 00:38:26,830
suggestions for how you can take that

00:38:23,859 --> 00:38:28,240
and get to eventual eventually a zero

00:38:26,830 --> 00:38:31,869
downtime or do you just kind of have to

00:38:28,240 --> 00:38:33,880
retool everything can switch yeah so the

00:38:31,869 --> 00:38:36,190
first step is you probably need a scale

00:38:33,880 --> 00:38:38,020
of at least two if you just have one

00:38:36,190 --> 00:38:41,560
server it's probably just not gonna work

00:38:38,020 --> 00:38:44,380
so that's step one and then once you

00:38:41,560 --> 00:38:45,910
have to really you just commit to it if

00:38:44,380 --> 00:38:47,590
it's painful do it more often and

00:38:45,910 --> 00:38:49,210
honestly that's all you need to do if

00:38:47,590 --> 00:38:51,910
you just commit to that you will

00:38:49,210 --> 00:38:54,310
eventually get there one step at a time

00:38:51,910 --> 00:38:57,790
by grabbing the most painful thing and

00:38:54,310 --> 00:38:59,830
fixing it one at a time I had a question

00:38:57,790 --> 00:39:02,410
about your last slide there we talked

00:38:59,830 --> 00:39:04,290
about committing to master uh-huh

00:39:02,410 --> 00:39:06,720
curious how you handle that like with

00:39:04,290 --> 00:39:09,160
during review like usually our review

00:39:06,720 --> 00:39:10,960
phases you have a you have a branch and

00:39:09,160 --> 00:39:13,600
you do review on that branch then merge

00:39:10,960 --> 00:39:14,680
it to not even maybe master but maybe

00:39:13,600 --> 00:39:16,930
somewhere else how do you how do you

00:39:14,680 --> 00:39:19,330
guys do that yeah so the code review

00:39:16,930 --> 00:39:22,510
process itself is kind of like a poor

00:39:19,330 --> 00:39:24,970
request model so you're trying to you're

00:39:22,510 --> 00:39:26,350
basically trying to put something on

00:39:24,970 --> 00:39:28,150
master and that's typically where it

00:39:26,350 --> 00:39:30,670
gets code reviewed and then at that

00:39:28,150 --> 00:39:34,060
point once it's on master you're

00:39:30,670 --> 00:39:36,100
basically committing to get it all the

00:39:34,060 --> 00:39:38,680
way out to production so if it breaks

00:39:36,100 --> 00:39:40,300
anywhere in the pipeline between then to

00:39:38,680 --> 00:39:40,930
production or is like maybe it failed

00:39:40,300 --> 00:39:43,000
the test

00:39:40,930 --> 00:39:44,920
you have now committed yourself that you

00:39:43,000 --> 00:39:46,930
will get master stable again and you

00:39:44,920 --> 00:39:49,060
will get it out to production so you now

00:39:46,930 --> 00:39:51,940
kind of have to watch it and fix it

00:39:49,060 --> 00:39:54,010
fix those bugs etc so that is the hard

00:39:51,940 --> 00:39:55,420
part about it is you're you kind of feel

00:39:54,010 --> 00:39:58,600
like you're babysitting these commits

00:39:55,420 --> 00:39:59,740
once they're merged maybe but I think

00:39:58,600 --> 00:40:03,430
it's actually a lot less work in the

00:39:59,740 --> 00:40:06,210
long run okay we that will route of time

00:40:03,430 --> 00:40:08,630
so thank you very much Nick

00:40:06,210 --> 00:40:11,889
and with

00:40:08,630 --> 00:40:11,889

YouTube URL: https://www.youtube.com/watch?v=hulRKdSPUOc


