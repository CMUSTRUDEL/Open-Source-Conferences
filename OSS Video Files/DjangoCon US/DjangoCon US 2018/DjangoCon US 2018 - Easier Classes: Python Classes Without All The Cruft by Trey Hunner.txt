Title: DjangoCon US 2018 - Easier Classes: Python Classes Without All The Cruft by Trey Hunner
Publication date: 2018-11-08
Playlist: DjangoCon US 2018
Description: 
	DjangoCon US 2018 - Easier Classes: Python Classes Without All The Cruft by Trey Hunner

When bundling up data, sometimes tuples and dictionaries donâ€™t quite cut it. Pythonâ€™s classes are powerful tools for data storage and manipulation, but it can take quite a bit of boilerplate code to make a well-behaved Python class. In this talk weâ€™re going to discuss how a well-behaved class should work and take a look at a number of helper libraries for creating well-behaved classes.

Weâ€™ll first see how to make classes with proper string representations, comparability, iterability, and immutability. Then weâ€™ll dive into helper tools built-in to the standard library and available in third-party libraries and briefly discuss which of these tools makes sense to use with Djangoâ€™s classes.

Weâ€™ll look at namedtuple, NamedTuple (not a typo), attrs, and the new Python 3.7 dataclasses.

Most of the libraries discussed in this talk are only available in Python 3, so if youâ€™re not using Python 3, hopefully this talk will encourage you to upgrade.

This talk was presented at: https://2018.djangocon.us/talk/easier-classes-python-classes-without/

LINKS:
Follow Trey Hunner ğŸ‘‡
On Twitter: https://twitter.com/treyhunner
Official homepage: https://treyhunner.com

Follow DjangCon US ğŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ğŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,050 --> 00:00:07,709
[Music]

00:00:15,379 --> 00:00:20,250
all right so we are going to be time

00:00:18,270 --> 00:00:21,449
crunch so we're gonna get started I'm

00:00:20,250 --> 00:00:23,970
not really gonna introduce myself

00:00:21,449 --> 00:00:26,340
because I don't have time I will say

00:00:23,970 --> 00:00:27,840
that I teach Python so I run a Python

00:00:26,340 --> 00:00:30,689
skill building service called Python

00:00:27,840 --> 00:00:33,660
morsels I have stickers if you want one

00:00:30,689 --> 00:00:35,040
find me afterward and I teach on-site

00:00:33,660 --> 00:00:38,100
with companies I actually do Python and

00:00:35,040 --> 00:00:40,379
Django training as well so that is me

00:00:38,100 --> 00:00:43,800
we're going to talk about classes

00:00:40,379 --> 00:00:46,079
I am very tempted to say that I'd like

00:00:43,800 --> 00:00:47,629
to talk about pythonic classes but that

00:00:46,079 --> 00:00:51,059
word pythonic is a little bit

00:00:47,629 --> 00:00:52,530
controversial or loaded and it's

00:00:51,059 --> 00:00:54,210
definitely little bit overused so

00:00:52,530 --> 00:00:58,020
instead I want to say that we're talking

00:00:54,210 --> 00:01:01,140
about friendly classes our goal is to

00:00:58,020 --> 00:01:03,899
make classes that are friendlier for

00:01:01,140 --> 00:01:05,040
other developers to use so friendly

00:01:03,899 --> 00:01:07,290
classes have a nice string

00:01:05,040 --> 00:01:10,070
representation and they can be compared

00:01:07,290 --> 00:01:13,530
to each other in ways that make sense

00:01:10,070 --> 00:01:16,650
more than that even they can overload

00:01:13,530 --> 00:01:18,330
operators so you can use plus/minus any

00:01:16,650 --> 00:01:21,570
type of operators that make sense on

00:01:18,330 --> 00:01:22,920
your class maybe iterability hash

00:01:21,570 --> 00:01:24,150
ability there's a lot of stuff we could

00:01:22,920 --> 00:01:25,700
implement in our class to make it

00:01:24,150 --> 00:01:28,110
friendlier for other developers to use

00:01:25,700 --> 00:01:29,670
so the first example we're going to look

00:01:28,110 --> 00:01:32,909
at we're gonna look at two examples here

00:01:29,670 --> 00:01:35,009
first one's a month class we want this

00:01:32,909 --> 00:01:37,950
class to accept attributes which means

00:01:35,009 --> 00:01:39,630
we're going to need an initializer we

00:01:37,950 --> 00:01:41,189
also want this class to have a helpful

00:01:39,630 --> 00:01:44,310
string representation which means we

00:01:41,189 --> 00:01:47,130
have to have a dunder repper dunder by

00:01:44,310 --> 00:01:49,649
the way stands for double underscore and

00:01:47,130 --> 00:01:52,320
these are essentially special methods

00:01:49,649 --> 00:01:54,600
that allow us to communicate with Python

00:01:52,320 --> 00:01:57,060
this is a contract we have with the

00:01:54,600 --> 00:02:01,369
Python interpreter if we want our class

00:01:57,060 --> 00:02:03,899
to also be comparable using for example

00:02:01,369 --> 00:02:06,840
equality and inequality we're going to

00:02:03,899 --> 00:02:08,789
need dunder EQ on our class now we don't

00:02:06,840 --> 00:02:10,470
need dunder any we did in Python to

00:02:08,789 --> 00:02:12,780
Python three you get that for free if

00:02:10,470 --> 00:02:13,650
you've got a dunder Eq if we want to go

00:02:12,780 --> 00:02:15,060
even further

00:02:13,650 --> 00:02:17,430
though and not just have comparable

00:02:15,060 --> 00:02:19,980
classes but classes that are sortable or

00:02:17,430 --> 00:02:22,620
orderable we're going to need to

00:02:19,980 --> 00:02:24,989
implement less than which means we need

00:02:22,620 --> 00:02:26,700
to dunder LT method we also need greater

00:02:24,989 --> 00:02:27,959
than though that's gendered GT and

00:02:26,700 --> 00:02:29,190
there's more than just less than and

00:02:27,959 --> 00:02:31,890
greater than there's less than an equal

00:02:29,190 --> 00:02:34,769
to that's dunder le and greater than or

00:02:31,890 --> 00:02:36,750
equal to is dunder GE so after all of

00:02:34,769 --> 00:02:39,000
this our class is going to be pretty big

00:02:36,750 --> 00:02:43,650
and it's going to have a lot of code

00:02:39,000 --> 00:02:45,390
duplication so all of these comparison

00:02:43,650 --> 00:02:48,150
methods all these dunder methods here

00:02:45,390 --> 00:02:49,950
are pretty much the same method the only

00:02:48,150 --> 00:02:54,720
real difference between these methods is

00:02:49,950 --> 00:02:57,239
the operator that they all use so there

00:02:54,720 --> 00:02:59,129
is a helper in the Python standard

00:02:57,239 --> 00:03:00,480
library that will make this class a

00:02:59,129 --> 00:03:02,190
little bit shorter make it a little bit

00:03:00,480 --> 00:03:04,620
easier for us to create this class it's

00:03:02,190 --> 00:03:06,420
called total ordering it lives in the

00:03:04,620 --> 00:03:08,549
func tools module it allows us to make

00:03:06,420 --> 00:03:10,109
dunder EQ and dunder LT and it figures

00:03:08,549 --> 00:03:12,690
out the other ones from these it kind of

00:03:10,109 --> 00:03:14,970
extrapolates from those to figure out

00:03:12,690 --> 00:03:16,890
how to make those others for us so this

00:03:14,970 --> 00:03:20,849
is much shorter than the class that we

00:03:16,890 --> 00:03:22,590
just had but there's still essentially a

00:03:20,849 --> 00:03:23,880
lot of boilerplate code in fact I would

00:03:22,590 --> 00:03:25,950
argue this entire class is just

00:03:23,880 --> 00:03:27,480
boilerplate code we don't really need to

00:03:25,950 --> 00:03:28,950
implement all this ourselves we could

00:03:27,480 --> 00:03:29,400
just copy-paste it from somewhere on the

00:03:28,950 --> 00:03:32,340
Internet

00:03:29,400 --> 00:03:33,510
so we're gonna take a look at how to

00:03:32,340 --> 00:03:35,609
make this class a little bit better

00:03:33,510 --> 00:03:37,319
before we do that I want to look at our

00:03:35,609 --> 00:03:40,049
second code example so we made a month

00:03:37,319 --> 00:03:41,730
class here I also want to make a point

00:03:40,049 --> 00:03:43,620
class so our points going to be a little

00:03:41,730 --> 00:03:46,949
bit different for month we want a three

00:03:43,620 --> 00:03:48,599
dimensional point that will also have an

00:03:46,949 --> 00:03:50,669
initializer because we want to accept

00:03:48,599 --> 00:03:54,150
three arguments for our three dimensions

00:03:50,669 --> 00:03:55,560
there it will also be comparable well so

00:03:54,150 --> 00:03:58,169
it also has a nice string representation

00:03:55,560 --> 00:04:00,629
and its comparable so all three of those

00:03:58,169 --> 00:04:03,299
we had in our month but we don't want it

00:04:00,629 --> 00:04:05,190
to be orderable necessarily so we don't

00:04:03,299 --> 00:04:09,030
want our point to be orderable we do

00:04:05,190 --> 00:04:10,859
though want to be able to you do this so

00:04:09,030 --> 00:04:12,239
this is tuple unpacking or multiple

00:04:10,859 --> 00:04:18,090
assignment we want to be able to unpack

00:04:12,239 --> 00:04:20,510
our point object into x y&z variables to

00:04:18,090 --> 00:04:24,419
do this we need to make our class

00:04:20,510 --> 00:04:26,550
iterable to make our class iterable we

00:04:24,419 --> 00:04:27,510
need to under eight or method so we can

00:04:26,550 --> 00:04:29,640
actually make our

00:04:27,510 --> 00:04:33,210
classes work kind of like this kind of

00:04:29,640 --> 00:04:35,910
like tuples - in Python if we wanted to

00:04:33,210 --> 00:04:38,310
we could also make our class immutable

00:04:35,910 --> 00:04:40,680
what immutable means is that if we try

00:04:38,310 --> 00:04:43,560
to assign to an attribute on our class

00:04:40,680 --> 00:04:45,690
say px equals four we get an error so

00:04:43,560 --> 00:04:46,980
we're setting our class in stone once

00:04:45,690 --> 00:04:49,230
we've created it we can't actually

00:04:46,980 --> 00:04:52,200
change those attributes once we've made

00:04:49,230 --> 00:04:53,940
our class for this this one's a little

00:04:52,200 --> 00:04:56,460
weird we need add under set adder which

00:04:53,940 --> 00:04:58,110
you pretty much never see and once we've

00:04:56,460 --> 00:04:59,340
made a dunder set adder we might decide

00:04:58,110 --> 00:04:59,910
sort of like if you give a mouse a

00:04:59,340 --> 00:05:02,090
cookie

00:04:59,910 --> 00:05:04,860
we need our class who also be hashable

00:05:02,090 --> 00:05:06,360
so we want our class to work as in

00:05:04,860 --> 00:05:08,340
dictionary keys we wanted to work in

00:05:06,360 --> 00:05:11,100
sets for that though we need a dunder

00:05:08,340 --> 00:05:12,870
hash method so if we want a well-behaved

00:05:11,100 --> 00:05:14,730
point class something that works as you

00:05:12,870 --> 00:05:17,580
would expect it to if we were making a

00:05:14,730 --> 00:05:19,560
dream class ourselves this might be what

00:05:17,580 --> 00:05:21,540
it would look like now the code for this

00:05:19,560 --> 00:05:23,610
isn't actually that long at least for

00:05:21,540 --> 00:05:27,030
each method it's only a couple lines of

00:05:23,610 --> 00:05:29,430
code this is still entirely boilerplate

00:05:27,030 --> 00:05:30,750
code though so some of this might be new

00:05:29,430 --> 00:05:32,520
to you especially if you're new to

00:05:30,750 --> 00:05:34,890
Python for example that yields there

00:05:32,520 --> 00:05:36,690
that's a generator you can look up

00:05:34,890 --> 00:05:39,030
generators and iterators google that on

00:05:36,690 --> 00:05:40,770
your own later dunder set adder is kind

00:05:39,030 --> 00:05:42,900
of weird hash is kind of weird a lot of

00:05:40,770 --> 00:05:44,970
these concepts are a little bit odd this

00:05:42,900 --> 00:05:47,100
is basically copy paste code time here

00:05:44,970 --> 00:05:48,570
we can take this from the internet copy

00:05:47,100 --> 00:05:50,910
paste it and we've made a class

00:05:48,570 --> 00:05:52,920
ourselves that does what we want which

00:05:50,910 --> 00:05:54,960
means this is all boilerplate code this

00:05:52,920 --> 00:06:00,390
is code that someone else could have

00:05:54,960 --> 00:06:02,730
created for us so there is fortunately a

00:06:00,390 --> 00:06:05,040
way to do this again using a tool in the

00:06:02,730 --> 00:06:07,650
standard library it can that can

00:06:05,040 --> 00:06:11,010
implement a lot of this for us it is

00:06:07,650 --> 00:06:15,000
called named tuple and it's built into

00:06:11,010 --> 00:06:17,730
Python 3 so named tuple lives in the

00:06:15,000 --> 00:06:20,700
Taiping module to create a named tuple

00:06:17,730 --> 00:06:23,790
class you inherit from named tuple and

00:06:20,700 --> 00:06:25,590
then you use type hints to define the

00:06:23,790 --> 00:06:28,050
attributes that you want on your class

00:06:25,590 --> 00:06:30,030
what this does for us is it actually

00:06:28,050 --> 00:06:32,790
makes a class that has an initializer

00:06:30,030 --> 00:06:34,230
automatically and it has a friendly

00:06:32,790 --> 00:06:38,100
string representation which is what

00:06:34,230 --> 00:06:41,150
we're looking for and this class as a

00:06:38,100 --> 00:06:43,620
bonus which is what we're looking for is

00:06:41,150 --> 00:06:47,160
comparable and in fact it's even

00:06:43,620 --> 00:06:49,080
immutable meaning if we try to assign to

00:06:47,160 --> 00:06:51,120
an attribute on our class we'll get an

00:06:49,080 --> 00:06:52,590
error by the way if you're a little bit

00:06:51,120 --> 00:06:54,389
confused right now you're going what is

00:06:52,590 --> 00:06:56,009
this capital n capital T named tuple

00:06:54,389 --> 00:06:58,050
I've seen the lowercase version that

00:06:56,009 --> 00:06:59,580
existed in Python 2 that's in the

00:06:58,050 --> 00:07:00,930
collections module it still exists in

00:06:59,580 --> 00:07:03,030
Python 3 it's a little bit more awkward

00:07:00,930 --> 00:07:05,550
though if you're in Python 3 land this

00:07:03,030 --> 00:07:07,289
is what you should use so out of the box

00:07:05,550 --> 00:07:09,870
name tuple pretty much gives us what

00:07:07,289 --> 00:07:12,810
we're looking for in our point class at

00:07:09,870 --> 00:07:15,659
least but I don't think you should use

00:07:12,810 --> 00:07:17,789
named tuple to implement this point this

00:07:15,659 --> 00:07:19,889
looks cool but it's not actually what we

00:07:17,789 --> 00:07:21,449
want the reason for that are there are

00:07:19,889 --> 00:07:25,650
some quirks there's some downsides to

00:07:21,449 --> 00:07:29,009
named tuple so named tuples inherit from

00:07:25,650 --> 00:07:31,050
tuples meaning they inherit all of the

00:07:29,009 --> 00:07:33,690
functionality that tuples have within

00:07:31,050 --> 00:07:35,219
them so they can be ordered which is a

00:07:33,690 --> 00:07:36,630
little bit weird for our point we don't

00:07:35,219 --> 00:07:38,909
actually want our points to be audible

00:07:36,630 --> 00:07:40,469
you happen to be comparable less than on

00:07:38,909 --> 00:07:43,080
two points doesn't make so much sense

00:07:40,469 --> 00:07:44,280
though maybe they can also be added to

00:07:43,080 --> 00:07:45,599
each other which is actually kind of

00:07:44,280 --> 00:07:48,000
nifty it seems like that would be a

00:07:45,599 --> 00:07:49,560
helpful feature of our points but when

00:07:48,000 --> 00:07:51,500
we add two points together we don't

00:07:49,560 --> 00:07:54,930
really get the thing we were looking for

00:07:51,500 --> 00:07:56,370
we get a tuple that well we get two

00:07:54,930 --> 00:07:58,169
tuples added together because named

00:07:56,370 --> 00:07:59,610
tuples are in fact two poles when you

00:07:58,169 --> 00:08:01,440
add two tuples together this is what

00:07:59,610 --> 00:08:03,240
happens the same thing happens with

00:08:01,440 --> 00:08:04,050
multiplication you can multiply tuples

00:08:03,240 --> 00:08:08,009
by numbers

00:08:04,050 --> 00:08:10,740
you just get a tuple back so named

00:08:08,009 --> 00:08:12,419
tuples are great but they're not always

00:08:10,740 --> 00:08:14,400
the thing you're looking for they also

00:08:12,419 --> 00:08:15,840
have a length maybe that makes sense for

00:08:14,400 --> 00:08:19,380
a point it's sort of weird that it has a

00:08:15,840 --> 00:08:20,880
length of three though name tuples are

00:08:19,380 --> 00:08:22,139
wonderful but they're not always the

00:08:20,880 --> 00:08:23,669
thing that you should use when you're

00:08:22,139 --> 00:08:24,900
using them you want to be careful you

00:08:23,669 --> 00:08:26,279
want to be careful to make sure the

00:08:24,900 --> 00:08:29,159
thing you're looking for is actually a

00:08:26,279 --> 00:08:30,810
tuple now we could actually get all of

00:08:29,159 --> 00:08:32,669
these features that we wanted without

00:08:30,810 --> 00:08:34,979
these features here we could remove

00:08:32,669 --> 00:08:36,570
these features by implementing a lot of

00:08:34,979 --> 00:08:39,479
methods that just raise exceptions this

00:08:36,570 --> 00:08:41,930
is really awkward though finding and

00:08:39,479 --> 00:08:44,490
removing features that you don't want is

00:08:41,930 --> 00:08:46,410
often harder than adding the features

00:08:44,490 --> 00:08:48,600
that you do want and that's the case

00:08:46,410 --> 00:08:50,190
with named tuples so don't use named

00:08:48,600 --> 00:08:52,079
tuple unless the thing you're actually

00:08:50,190 --> 00:08:53,579
trying to make should act like a tuple

00:08:52,079 --> 00:08:54,690
if you're not trying to make a tuple

00:08:53,579 --> 00:08:58,110
don't

00:08:54,690 --> 00:09:00,480
use name tuple so instead of name tuple

00:08:58,110 --> 00:09:03,600
we could use adders this is an

00:09:00,480 --> 00:09:05,459
alternative this unfortunately is a

00:09:03,600 --> 00:09:07,170
third-party library it's not built in

00:09:05,459 --> 00:09:09,029
the Python which means to get it we have

00:09:07,170 --> 00:09:11,579
to pip install it which isn't a big

00:09:09,029 --> 00:09:14,220
problem we can pip install adders after

00:09:11,579 --> 00:09:15,899
this we import adder we don't import

00:09:14,220 --> 00:09:20,540
adders we import adder so we pip install

00:09:15,899 --> 00:09:24,000
adders we import adder to use it we use

00:09:20,540 --> 00:09:27,569
attrs which is a little bit cute but

00:09:24,000 --> 00:09:30,269
also a little bit weird to decorate this

00:09:27,569 --> 00:09:31,949
class we set Auto at ribs equal to true

00:09:30,269 --> 00:09:34,189
so that we can use type hints which is

00:09:31,949 --> 00:09:36,449
just like our name tuple used there and

00:09:34,189 --> 00:09:37,769
after this we got pretty much the same

00:09:36,449 --> 00:09:40,050
thing that we get from named tuple we've

00:09:37,769 --> 00:09:43,470
got a class that has a a constructor an

00:09:40,050 --> 00:09:45,620
initializer automatically it has a nice

00:09:43,470 --> 00:09:48,779
string representation and it's

00:09:45,620 --> 00:09:50,430
comparable I mean you can ask to adder

00:09:48,779 --> 00:09:53,730
objects here whether they're equal to

00:09:50,430 --> 00:09:55,139
each other unfortunately we can also use

00:09:53,730 --> 00:09:56,550
less than and greater than which was a

00:09:55,139 --> 00:09:58,019
little bit weird for point we want to

00:09:56,550 --> 00:09:59,550
figure out how to disable this feature

00:09:58,019 --> 00:10:03,240
here we don't want them to be orderable

00:09:59,550 --> 00:10:06,660
so if we want our point object to work

00:10:03,240 --> 00:10:08,670
the same way we had it before when we

00:10:06,660 --> 00:10:10,319
made it manually we could do this with

00:10:08,670 --> 00:10:13,529
this code here so we're still using

00:10:10,319 --> 00:10:16,259
adders here but we've set frozen to true

00:10:13,529 --> 00:10:18,449
so our class can't be modified it's

00:10:16,259 --> 00:10:18,750
immutable now and we've made a dunder

00:10:18,449 --> 00:10:20,310
itter

00:10:18,750 --> 00:10:22,439
that we've made manually to make our

00:10:20,310 --> 00:10:24,029
class actually iterable kind of like our

00:10:22,439 --> 00:10:25,920
name tuple was and we've disabled

00:10:24,029 --> 00:10:28,019
comparisons unfortunately because we

00:10:25,920 --> 00:10:29,880
disabled comparisons we did to make our

00:10:28,019 --> 00:10:32,550
own custom dunder EQ and we need to make

00:10:29,880 --> 00:10:34,019
our own custom dunder hash which at this

00:10:32,550 --> 00:10:35,279
point is starting to look like maybe we

00:10:34,019 --> 00:10:37,680
should just implement this class on our

00:10:35,279 --> 00:10:39,540
own so the adders library it's more

00:10:37,680 --> 00:10:41,610
powerful than name tuples and it's more

00:10:39,540 --> 00:10:44,970
flexible to name tuples but it can take

00:10:41,610 --> 00:10:46,470
a little bit of playing with to get it

00:10:44,970 --> 00:10:50,189
to do exactly what you're looking for

00:10:46,470 --> 00:10:52,620
for the simple cases so adders in

00:10:50,189 --> 00:10:54,300
addition unfortunately it is a third

00:10:52,620 --> 00:10:56,160
party library we have two pip install it

00:10:54,300 --> 00:10:57,959
to use it there is actually though

00:10:56,160 --> 00:11:01,439
something that's included with Python

00:10:57,959 --> 00:11:04,079
that works like adders it is data

00:11:01,439 --> 00:11:05,550
classes so data classes are essentially

00:11:04,079 --> 00:11:07,139
a simplified version of the adders

00:11:05,550 --> 00:11:08,040
library that's built into the Python

00:11:07,139 --> 00:11:10,560
standard library

00:11:08,040 --> 00:11:12,540
to use data classes you'll import data

00:11:10,560 --> 00:11:14,370
class from data classes and you'll

00:11:12,540 --> 00:11:19,589
decorate your class the same way that

00:11:14,370 --> 00:11:21,899
you can with adders the syntax that this

00:11:19,589 --> 00:11:24,000
relies on here is again still type

00:11:21,899 --> 00:11:26,880
hinting so like adders like named tuple

00:11:24,000 --> 00:11:29,310
we've got type hints there which makes

00:11:26,880 --> 00:11:31,880
our class also have an initializer has a

00:11:29,310 --> 00:11:37,110
nice string representation and it can be

00:11:31,880 --> 00:11:38,459
compared using equals it gives us an

00:11:37,110 --> 00:11:41,310
error though which is what we're looking

00:11:38,459 --> 00:11:43,380
for when we use less than so it can't be

00:11:41,310 --> 00:11:44,819
ordered we'd have to turn that on and

00:11:43,380 --> 00:11:47,639
we'd have to do that ourselves if we

00:11:44,819 --> 00:11:49,800
want our point object to be ordered so

00:11:47,639 --> 00:11:51,480
this point object it looks close to what

00:11:49,800 --> 00:11:52,889
we're looking for but it isn't quite

00:11:51,480 --> 00:11:56,310
what we want yet

00:11:52,889 --> 00:11:58,860
if we're trying to use our point with

00:11:56,310 --> 00:12:00,810
multiple assignment for example we'll

00:11:58,860 --> 00:12:04,290
get an error because our point class

00:12:00,810 --> 00:12:07,380
here is not iterable so we can't unpack

00:12:04,290 --> 00:12:10,680
it into x y&z variables if we want to

00:12:07,380 --> 00:12:13,709
try to assign to the X attribute on our

00:12:10,680 --> 00:12:15,240
class it works which is actually a

00:12:13,709 --> 00:12:16,800
problem in our case because we wanted an

00:12:15,240 --> 00:12:18,779
error here we wanted our class to be

00:12:16,800 --> 00:12:21,360
immutable so we're expecting get an

00:12:18,779 --> 00:12:23,639
error here and we don't we need to make

00:12:21,360 --> 00:12:27,060
our point class iterable and immutable

00:12:23,639 --> 00:12:28,920
to do that with data classes we can

00:12:27,060 --> 00:12:30,510
implement a dunder ater method so this

00:12:28,920 --> 00:12:31,740
is not a data class specific thing we're

00:12:30,510 --> 00:12:33,300
just doing the same thing we were doing

00:12:31,740 --> 00:12:36,329
before and making a dunder inter method

00:12:33,300 --> 00:12:38,459
to make our class iterable meaning we

00:12:36,329 --> 00:12:40,019
can use multiple assignment so this code

00:12:38,459 --> 00:12:42,839
is the same code we wrote before that's

00:12:40,019 --> 00:12:44,430
self dot X self dot Y self dot Z we

00:12:42,839 --> 00:12:46,800
could have copy/paste to this we could

00:12:44,430 --> 00:12:50,220
instead copy-paste this

00:12:46,800 --> 00:12:53,430
so data classes have an AZ tuple helper

00:12:50,220 --> 00:12:55,230
that allows us to get a tuple that

00:12:53,430 --> 00:12:57,290
contains the objects or rather the

00:12:55,230 --> 00:12:59,519
attributes that are on our data class

00:12:57,290 --> 00:13:01,500
object instead of specifying those

00:12:59,519 --> 00:13:02,910
manually which isn't a huge helper but

00:13:01,500 --> 00:13:04,649
it is kind of nifty that means if you

00:13:02,910 --> 00:13:07,230
copy paste this code it's going to work

00:13:04,649 --> 00:13:11,040
in all data classes so our point class

00:13:07,230 --> 00:13:12,810
now is iterable meaning that we can use

00:13:11,040 --> 00:13:14,579
multiple assignment which is great this

00:13:12,810 --> 00:13:18,149
is just what we're looking for it isn't

00:13:14,579 --> 00:13:19,470
yet immutable meaning we can assign two

00:13:18,149 --> 00:13:21,600
attributes and we don't get an error

00:13:19,470 --> 00:13:23,550
still so to make it immutable

00:13:21,600 --> 00:13:26,730
we can set frozen to true so this is

00:13:23,550 --> 00:13:29,190
very similar to adders so when we

00:13:26,730 --> 00:13:34,590
decorate our class with frozen as true

00:13:29,190 --> 00:13:36,360
there we now can't assign to attributes

00:13:34,590 --> 00:13:39,450
in our class this is exactly what we're

00:13:36,360 --> 00:13:41,460
looking for so our class is now iterable

00:13:39,450 --> 00:13:43,730
it's immutable it's comparable it has a

00:13:41,460 --> 00:13:46,140
nice string representation it's not

00:13:43,730 --> 00:13:47,550
audible which is what we're looking for

00:13:46,140 --> 00:13:48,960
it doesn't have a length and it doesn't

00:13:47,550 --> 00:13:51,800
have all those other weird features that

00:13:48,960 --> 00:13:54,740
name tuples had that we didn't want so

00:13:51,800 --> 00:13:58,710
using data classes we have made a

00:13:54,740 --> 00:14:01,470
friendly class in less than 10 lines of

00:13:58,710 --> 00:14:03,600
Python code I think this is pretty cool

00:14:01,470 --> 00:14:04,530
data classes is doing a lot of work for

00:14:03,600 --> 00:14:06,660
us here that we could have done

00:14:04,530 --> 00:14:09,150
ourselves but it's just doing a little

00:14:06,660 --> 00:14:11,700
bit of that work that we wouldn't have

00:14:09,150 --> 00:14:14,190
to do on our own now I said that data

00:14:11,700 --> 00:14:15,960
classes is built-in to the Python

00:14:14,190 --> 00:14:20,850
standard library what I meant by that is

00:14:15,960 --> 00:14:23,130
that it's built into Python 3.7 who is

00:14:20,850 --> 00:14:25,080
using Python 3.7 in production your

00:14:23,130 --> 00:14:26,880
production server okay that's like

00:14:25,080 --> 00:14:31,260
that's a good number of you that's about

00:14:26,880 --> 00:14:33,270
20% I think maybe rounding up notice I'm

00:14:31,260 --> 00:14:35,930
I'm not raising my hand I'm not using

00:14:33,270 --> 00:14:38,820
Python 3.7 in production at the moment

00:14:35,930 --> 00:14:40,110
this fortunately is also available as a

00:14:38,820 --> 00:14:41,790
third-party library so you can actually

00:14:40,110 --> 00:14:43,440
pip install data classes to prepare

00:14:41,790 --> 00:14:47,490
yourself for that day that you upgrade

00:14:43,440 --> 00:14:49,440
to Python 3.7 in Python 3 you can in

00:14:47,490 --> 00:14:51,360
Python - you cannot pip install data

00:14:49,440 --> 00:14:53,670
classes if you need to support Python 2

00:14:51,360 --> 00:14:55,620
I would recommend using adders it

00:14:53,670 --> 00:14:56,670
supports python 2 and python 3 even

00:14:55,620 --> 00:14:59,220
though it's a little bit more awkward

00:14:56,670 --> 00:15:00,960
for some cases and if you do need more

00:14:59,220 --> 00:15:02,550
features than data classes provide

00:15:00,960 --> 00:15:04,860
adders is a little bit more feature-rich

00:15:02,550 --> 00:15:06,480
in some ways a little bit more complex

00:15:04,860 --> 00:15:09,390
to use for the simple cases more

00:15:06,480 --> 00:15:10,860
feature-rich in general though and data

00:15:09,390 --> 00:15:12,450
classes by the way was partially

00:15:10,860 --> 00:15:18,480
inspired by adders that's kind of the

00:15:12,450 --> 00:15:20,160
timeline that happened here so the thing

00:15:18,480 --> 00:15:21,720
that I want to talk about next I don't

00:15:20,160 --> 00:15:25,470
mean to be an infomercial for data

00:15:21,720 --> 00:15:28,050
classes but it's probably an infomercial

00:15:25,470 --> 00:15:30,150
for data classes so without any other

00:15:28,050 --> 00:15:32,790
customization data classes give us a

00:15:30,150 --> 00:15:34,320
good string representation they allow

00:15:32,790 --> 00:15:36,540
our objects to be compared to each other

00:15:34,320 --> 00:15:38,580
we get an initial

00:15:36,540 --> 00:15:40,170
and that's pretty much what we get out

00:15:38,580 --> 00:15:43,050
of the box if we want to turn on other

00:15:40,170 --> 00:15:44,640
features we can do so so for example we

00:15:43,050 --> 00:15:46,880
just saw that we can use frozen equals

00:15:44,640 --> 00:15:48,930
true to make our data classes immutable

00:15:46,880 --> 00:15:50,670
that also by the way makes our data

00:15:48,930 --> 00:15:52,529
classes hashable so if you wanted to use

00:15:50,670 --> 00:15:55,950
them as keys and dictionaries or in sets

00:15:52,529 --> 00:16:00,180
that's a nice side effect and it makes

00:15:55,950 --> 00:16:01,560
our data classes interval I mean we can

00:16:00,180 --> 00:16:04,430
if we wanted to use something besides

00:16:01,560 --> 00:16:06,360
sorry not interval intervals this one

00:16:04,430 --> 00:16:07,770
this would make our data classes

00:16:06,360 --> 00:16:09,510
interval here so that we could use it in

00:16:07,770 --> 00:16:12,210
multiple assignment but we can also as

00:16:09,510 --> 00:16:13,830
you see there with a tuple actually make

00:16:12,210 --> 00:16:17,250
these iterable in any other way we could

00:16:13,830 --> 00:16:19,050
use a list constructor for example so

00:16:17,250 --> 00:16:20,279
something I haven't shown you here we

00:16:19,050 --> 00:16:23,279
were talking about that month class

00:16:20,279 --> 00:16:24,779
earlier I kind of dropped that example I

00:16:23,279 --> 00:16:27,810
want to go back to that for a moment

00:16:24,779 --> 00:16:30,720
because that required order ability so

00:16:27,810 --> 00:16:33,620
we can actually set order to true when

00:16:30,720 --> 00:16:35,910
we're decorating our data class to get

00:16:33,620 --> 00:16:38,070
lexicographical ordering which sounds

00:16:35,910 --> 00:16:40,200
like a really fancy word but all it

00:16:38,070 --> 00:16:41,580
really means is the way that tuples

00:16:40,200 --> 00:16:43,440
lists and all the other orderable

00:16:41,580 --> 00:16:45,570
structures in Python by default are

00:16:43,440 --> 00:16:47,850
ordered so they go the first thing first

00:16:45,570 --> 00:16:49,530
and then everything after that so if we

00:16:47,850 --> 00:16:50,850
want order ability on our class that's

00:16:49,530 --> 00:16:53,040
something we can turn on with data

00:16:50,850 --> 00:16:55,380
classes as well

00:16:53,040 --> 00:16:57,720
one more thing I'd like to discuss that

00:16:55,380 --> 00:16:59,100
is not at all data class specific kind

00:16:57,720 --> 00:17:02,270
of like the fact that dunder itter

00:16:59,100 --> 00:17:04,470
is not actually data class specific is

00:17:02,270 --> 00:17:06,600
dunder methods dunder methods in general

00:17:04,470 --> 00:17:08,010
almost everything we've been doing in

00:17:06,600 --> 00:17:09,870
this talk is actually just dunder

00:17:08,010 --> 00:17:12,329
methods regardless of whether I've been

00:17:09,870 --> 00:17:14,339
writing dunder methods so one of the

00:17:12,329 --> 00:17:16,439
secrets really the main secret I think

00:17:14,339 --> 00:17:20,010
to making a friendly class in Python is

00:17:16,439 --> 00:17:22,560
embracing dunder methods this is a class

00:17:20,010 --> 00:17:26,189
here that implements dunder it ER dunder

00:17:22,560 --> 00:17:28,830
add and dunder sub dunder add and under

00:17:26,189 --> 00:17:31,200
sub what they give us are addition and

00:17:28,830 --> 00:17:32,850
subtraction the thing that that dunder

00:17:31,200 --> 00:17:34,440
inter method gives us is well really

00:17:32,850 --> 00:17:36,720
nothing in our case outside of the class

00:17:34,440 --> 00:17:38,280
maybe depending on how we use it but it

00:17:36,720 --> 00:17:40,080
makes that dunder out of the dunder sub

00:17:38,280 --> 00:17:44,280
the implementation a little bit easier

00:17:40,080 --> 00:17:47,370
so sometimes you will hear people called

00:17:44,280 --> 00:17:49,110
dunder methods magic methods the reason

00:17:47,370 --> 00:17:51,540
I don't usually use this term is

00:17:49,110 --> 00:17:53,250
because magic methods are not magical

00:17:51,540 --> 00:17:55,200
they're not magical and they're not

00:17:53,250 --> 00:17:57,480
scary so I want you to to feel

00:17:55,200 --> 00:17:59,850
comfortable embracing dundar methods in

00:17:57,480 --> 00:18:04,590
python dunder methods can make

00:17:59,850 --> 00:18:06,420
friendlier classes alright so before we

00:18:04,590 --> 00:18:08,910
wrap up I think we're actually doing ok

00:18:06,420 --> 00:18:12,210
on time which is surprising to me I

00:18:08,910 --> 00:18:16,170
would like you to consider whether you

00:18:12,210 --> 00:18:19,590
even need classes so this is a class

00:18:16,170 --> 00:18:23,549
that represents a matrix this class

00:18:19,590 --> 00:18:25,440
accepts a string that represents a

00:18:23,549 --> 00:18:28,260
matrix so it's got newline characters

00:18:25,440 --> 00:18:30,950
and spaces and that represents a a

00:18:28,260 --> 00:18:34,080
matrix here rows and columns in a matrix

00:18:30,950 --> 00:18:36,330
when we construct this thing the object

00:18:34,080 --> 00:18:39,750
we give at that matrix object has a Rose

00:18:36,330 --> 00:18:41,549
attribute that gives us the rows in our

00:18:39,750 --> 00:18:43,230
matrix in a columns attribute that gives

00:18:41,549 --> 00:18:48,690
us the columns in our matrix the

00:18:43,230 --> 00:18:52,799
transpose of this matrix this class does

00:18:48,690 --> 00:18:54,360
not need to exist I say that because you

00:18:52,799 --> 00:18:56,460
could take this class and replace it

00:18:54,360 --> 00:18:58,590
with two functions you could make a

00:18:56,460 --> 00:19:01,919
matrix from string function and you can

00:18:58,590 --> 00:19:03,540
make a transpose function so that matrix

00:19:01,919 --> 00:19:05,429
from string function when we call it we

00:19:03,540 --> 00:19:07,350
call it just the same way we constructed

00:19:05,429 --> 00:19:09,660
our matrix object before the thing it

00:19:07,350 --> 00:19:11,669
gives us back though is the same thing

00:19:09,660 --> 00:19:14,150
as a rows attribute gave us back on that

00:19:11,669 --> 00:19:16,350
matrix object the transpose function

00:19:14,150 --> 00:19:19,799
transposes our matrix which gives us the

00:19:16,350 --> 00:19:22,410
columns back so we've just taken what

00:19:19,799 --> 00:19:26,130
was a class and turned it into two

00:19:22,410 --> 00:19:28,230
functions you do not always need classes

00:19:26,130 --> 00:19:30,299
friendly classes are great but sometimes

00:19:28,230 --> 00:19:33,090
the friendliest classes just don't exist

00:19:30,299 --> 00:19:36,419
at all friendly functions are also a

00:19:33,090 --> 00:19:38,309
nice thing in Python so when making

00:19:36,419 --> 00:19:39,900
classes I'd like you to first consider

00:19:38,309 --> 00:19:42,150
whether we even need a class at all

00:19:39,900 --> 00:19:43,950
because often you don't there's a whole

00:19:42,150 --> 00:19:46,559
talk on this subject called stop writing

00:19:43,950 --> 00:19:49,980
classes it's a bit of an old talk it is

00:19:46,559 --> 00:19:53,669
a Python 2 but it's entirely applicable

00:19:49,980 --> 00:19:56,549
rather to Python 3 if you do decide

00:19:53,669 --> 00:19:59,520
after watching that talk that you need a

00:19:56,549 --> 00:20:02,490
class I'd like you to make a friendly

00:19:59,520 --> 00:20:05,399
class so

00:20:02,490 --> 00:20:09,059
friendly classes should feel as natural

00:20:05,399 --> 00:20:11,159
to use as the built-in objects within

00:20:09,059 --> 00:20:12,629
Python lists tuples all the things that

00:20:11,159 --> 00:20:15,200
are built into Python your class should

00:20:12,629 --> 00:20:17,639
feel as friendly and as natural as those

00:20:15,200 --> 00:20:19,139
creating friendly classes can involve a

00:20:17,639 --> 00:20:20,399
lot of boilerplate code because really

00:20:19,139 --> 00:20:22,860
it involves writing a lot of dunder

00:20:20,399 --> 00:20:24,570
methods oftentimes data classes

00:20:22,860 --> 00:20:26,399
essentially help us write those dunder

00:20:24,570 --> 00:20:27,990
methods ourselves they give us those

00:20:26,399 --> 00:20:29,690
things for free without us having to go

00:20:27,990 --> 00:20:32,249
out of the way to write them

00:20:29,690 --> 00:20:34,619
unfortunately data classes are only in

00:20:32,249 --> 00:20:38,249
Python 3.7 you can pip install them if

00:20:34,619 --> 00:20:41,309
you're stuck on Python 2 right now you

00:20:38,249 --> 00:20:43,830
can use adders instead or if you need

00:20:41,309 --> 00:20:49,200
more features then data classes actually

00:20:43,830 --> 00:20:50,879
provide you can use adders I'm actually

00:20:49,200 --> 00:20:53,159
doing really great on time so we might

00:20:50,879 --> 00:20:54,869
even have time for questions here I

00:20:53,159 --> 00:20:56,429
would love to help you improve your

00:20:54,869 --> 00:20:58,649
Python skills that's the thing that I do

00:20:56,429 --> 00:21:02,220
for a living feel free to find me in the

00:20:58,649 --> 00:21:03,749
hallway afterward if you'd like to chat

00:21:02,220 --> 00:21:06,119
about improving your Python skills or

00:21:03,749 --> 00:21:08,730
your team's Python skills or always feel

00:21:06,119 --> 00:21:10,230
free to send me an email if folks have

00:21:08,730 --> 00:21:11,820
questions I'd actually prefer to them

00:21:10,230 --> 00:21:13,820
the hallway afterwards just so we can

00:21:11,820 --> 00:21:16,289
kind of huddle around and chat about

00:21:13,820 --> 00:21:18,539
everything we've just seen here by the

00:21:16,289 --> 00:21:19,679
way these slides that I have there's a

00:21:18,539 --> 00:21:20,940
whole bunch of extra things in the

00:21:19,679 --> 00:21:23,870
slides you can look into those on your

00:21:20,940 --> 00:21:29,779
own I'll tweet them afterward thank you

00:21:23,870 --> 00:21:31,840
[Applause]

00:21:29,779 --> 00:21:31,840
you

00:21:32,460 --> 00:21:34,520

YouTube URL: https://www.youtube.com/watch?v=epKegvx_Jws


