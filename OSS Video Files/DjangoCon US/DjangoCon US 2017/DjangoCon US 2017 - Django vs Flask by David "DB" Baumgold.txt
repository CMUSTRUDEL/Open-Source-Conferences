Title: DjangoCon US 2017 - Django vs Flask by David "DB" Baumgold
Publication date: 2017-09-07
Playlist: DjangoCon US 2017
Description: 
	DjangoCon US 2017 - Django vs Flask by David "DB" Baumgold

When it comes to web development in Python, Django isn’t the only game in town. Flask is a scrappy young framework that takes a very different approach – whereas Django ships with tons of features ready and eager to be used, Flask provides a bare minimum feature-set with rock-solid extensibility and incredible flexibility. This talk, given by a web developer who has experience with both frameworks, takes a good look at the pros and cons for both Flask and Django. If you’ve ever felt that Django is too hard to learn, or too inflexible, this is the talk for you!

Outline

What is Flask?
Historical background

Django vs Flask
Ideological differences
Example “hello, world” websites

Database support
Django ORM vs SQLAlchemy, Peewee, etc…
Non-relational databases

User model
django.contrib.auth vs Flask-Login, Flask-Principle
Django Admin vs Flask-Admin

Django apps vs Flask Blueprints

Django REST Framework & comparisons to Flask

Which is better? Depends on your use-case

This talk was presented at: https://2017.djangocon.us/talks/django-vs-flask/

LINKS:
Follow David "DB" Baumgold 👇
On Twitter: https://twitter.com/singingwolfboy
Official homepage: https://www.davidbaumgold.com

Follow DjangCon US 👇
https://twitter.com/djangocon

Follow DEFNA 👇
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:15,820
[Music]

00:00:13,470 --> 00:00:17,560
so if you're having trouble viewing the

00:00:15,820 --> 00:00:19,630
slides particularly on this side of the

00:00:17,560 --> 00:00:22,240
room I actually have a link to them it's

00:00:19,630 --> 00:00:23,380
bitly Gengo con flask so you can check

00:00:22,240 --> 00:00:25,810
it out on your computer and follow along

00:00:23,380 --> 00:00:27,849
and jump ahead if you want to cheat so

00:00:25,810 --> 00:00:29,200
yeah as Brian said hi I'm Dee B I'm a

00:00:27,849 --> 00:00:31,300
freelance web developer I'm a corporate

00:00:29,200 --> 00:00:33,730
trainer I do lots of stuff on the side

00:00:31,300 --> 00:00:35,260
so if you or if you or your company like

00:00:33,730 --> 00:00:37,120
what I have to say or interested in

00:00:35,260 --> 00:00:39,940
having me implement some Django or flask

00:00:37,120 --> 00:00:42,880
for you let me know so I'm here to talk

00:00:39,940 --> 00:00:44,170
about Python and web dev and if you're

00:00:42,880 --> 00:00:46,300
here at django con then you're already

00:00:44,170 --> 00:00:48,070
familiar with django of course but

00:00:46,300 --> 00:00:50,410
there's lots of other Python web dev

00:00:48,070 --> 00:00:52,090
frameworks out there so django is

00:00:50,410 --> 00:00:54,540
actually influenced by several earlier

00:00:52,090 --> 00:00:56,860
frameworks like soap and plone and

00:00:54,540 --> 00:00:58,900
internet has inspired lots of other

00:00:56,860 --> 00:01:01,690
frameworks that came after it like

00:00:58,900 --> 00:01:04,449
pyramid turbo gears cherry pie bottle

00:01:01,690 --> 00:01:06,970
and web to pie but the one that I'm here

00:01:04,449 --> 00:01:09,610
to talk about is called flask now flask

00:01:06,970 --> 00:01:11,320
is a micro framework that has some

00:01:09,610 --> 00:01:13,420
surprising beginnings it actually

00:01:11,320 --> 00:01:15,970
started as an April Fool's joke if you

00:01:13,420 --> 00:01:17,799
can believe it the author of this

00:01:15,970 --> 00:01:19,810
framework had written two other

00:01:17,799 --> 00:01:21,609
frameworks called Burke's ugh

00:01:19,810 --> 00:01:24,069
which is like a server framework and

00:01:21,609 --> 00:01:25,630
Jinja 2 which is a templating library

00:01:24,069 --> 00:01:27,429
and he figured it would be kind of fun

00:01:25,630 --> 00:01:30,100
to take these two libraries put them

00:01:27,429 --> 00:01:32,200
together into a zip file and then write

00:01:30,100 --> 00:01:33,759
this denied framework that when you ran

00:01:32,200 --> 00:01:35,350
it it would just automatically unzip

00:01:33,759 --> 00:01:37,299
these libraries onto your computer and

00:01:35,350 --> 00:01:39,939
run them and thought everyone would just

00:01:37,299 --> 00:01:40,869
laugh and instead everyone said this is

00:01:39,939 --> 00:01:42,789
fantastic

00:01:40,869 --> 00:01:47,560
we need to actually use this in

00:01:42,789 --> 00:01:49,689
production so he turned it into an

00:01:47,560 --> 00:01:51,700
actual production ready framework that

00:01:49,689 --> 00:01:54,729
has actually gotten surprisingly popular

00:01:51,700 --> 00:01:56,709
if you look on github today you will see

00:01:54,729 --> 00:01:59,560
that if you list all of the Python

00:01:56,709 --> 00:02:01,600
repositories Gengo and flask are both up

00:01:59,560 --> 00:02:04,569
there and flask actually has more stars

00:02:01,600 --> 00:02:06,399
than django does so if that's your

00:02:04,569 --> 00:02:08,440
measure of popularity than flask is more

00:02:06,399 --> 00:02:11,110
popular so you might be asking yourself

00:02:08,440 --> 00:02:13,990
why is flask so popular is it actually

00:02:11,110 --> 00:02:16,990
better than Django and the answer as you

00:02:13,990 --> 00:02:19,569
might imagine is it depends Django is

00:02:16,990 --> 00:02:20,950
large flask is small both of them are

00:02:19,569 --> 00:02:24,670
good you know we're a friendly community

00:02:20,950 --> 00:02:26,680
and we love each other so let me give

00:02:24,670 --> 00:02:28,390
you some examples to introduce

00:02:26,680 --> 00:02:29,890
what flask is and how to use it I'm

00:02:28,390 --> 00:02:32,620
assuming that you have some familiar

00:02:29,890 --> 00:02:34,060
some familiarity with Django but that

00:02:32,620 --> 00:02:36,430
you know little to nothing about about

00:02:34,060 --> 00:02:37,959
flask so where do we start with

00:02:36,430 --> 00:02:40,510
programming we always start with hello

00:02:37,959 --> 00:02:43,299
world here is the hello world

00:02:40,510 --> 00:02:46,450
application in flask as you can see it

00:02:43,299 --> 00:02:49,689
is literally five lines of code and you

00:02:46,450 --> 00:02:51,430
run it by calling flask run and setting

00:02:49,689 --> 00:02:53,829
an environment variable to let the flask

00:02:51,430 --> 00:02:55,659
command line script know where to find

00:02:53,829 --> 00:02:57,340
your application so in this case I've

00:02:55,659 --> 00:02:59,319
taken these five lines of code and put

00:02:57,340 --> 00:03:01,090
it in a file called hello dot PI so I

00:02:59,319 --> 00:03:01,870
just say flask app equals hello dot PI

00:03:01,090 --> 00:03:04,150
flask

00:03:01,870 --> 00:03:06,639
run and that will start a local

00:03:04,150 --> 00:03:08,139
development server on port 5000 and if

00:03:06,639 --> 00:03:09,519
you visit the root of that website

00:03:08,139 --> 00:03:13,239
you'll see the string hello world in

00:03:09,519 --> 00:03:14,739
your browser it is really that easy by

00:03:13,239 --> 00:03:17,349
contrast if you want to do hello world

00:03:14,739 --> 00:03:18,700
in django you start by installing django

00:03:17,349 --> 00:03:20,980
and then you do Django admin start

00:03:18,700 --> 00:03:22,780
project project you go into your project

00:03:20,980 --> 00:03:23,889
you make your Hello app which then of

00:03:22,780 --> 00:03:26,260
course you have to put that into the

00:03:23,889 --> 00:03:28,840
settings PI then you write your hello

00:03:26,260 --> 00:03:31,180
view which requires importing this HTTP

00:03:28,840 --> 00:03:33,010
response thing and returning it and then

00:03:31,180 --> 00:03:34,720
you have to deal with URLs pi which

00:03:33,010 --> 00:03:36,819
means writing regular expressions which

00:03:34,720 --> 00:03:38,709
is always a pain especially for someone

00:03:36,819 --> 00:03:40,629
who is new to programming and doesn't

00:03:38,709 --> 00:03:43,659
necessarily know how to do regular

00:03:40,629 --> 00:03:46,239
expressions so I've actually found when

00:03:43,659 --> 00:03:48,220
talking with people who are new to web

00:03:46,239 --> 00:03:50,229
development in Python that Django is

00:03:48,220 --> 00:03:52,629
more intimidating to beginners than

00:03:50,229 --> 00:03:54,010
flask is Django has a steeper learning

00:03:52,629 --> 00:03:55,900
curve because you have to go over

00:03:54,010 --> 00:03:57,400
settings and regular expressions you

00:03:55,900 --> 00:04:00,370
have to understand the concepts of

00:03:57,400 --> 00:04:01,870
projects versus applications flask is

00:04:00,370 --> 00:04:03,549
much simpler to get started you can

00:04:01,870 --> 00:04:06,299
actually have your entire project in a

00:04:03,549 --> 00:04:10,060
single file and that works really well

00:04:06,299 --> 00:04:11,560
so by that account flask wins out with

00:04:10,060 --> 00:04:14,500
the simplicity factor for getting

00:04:11,560 --> 00:04:16,659
started but projects are generally more

00:04:14,500 --> 00:04:17,919
complicated than hello world typically

00:04:16,659 --> 00:04:20,590
you want to store some data in a

00:04:17,919 --> 00:04:24,070
database modify it and render that data

00:04:20,590 --> 00:04:25,599
on the on the front end so how do you do

00:04:24,070 --> 00:04:27,849
data modeling well let's start with

00:04:25,599 --> 00:04:30,430
Django this time well in Django we're

00:04:27,849 --> 00:04:32,320
going to use the Django ORM so you do

00:04:30,430 --> 00:04:33,849
from Django DB import models and here

00:04:32,320 --> 00:04:35,500
I'm defining a very basic blog post

00:04:33,849 --> 00:04:38,740
model this is code that you've probably

00:04:35,500 --> 00:04:40,560
seen before to manipulate the data you

00:04:38,740 --> 00:04:44,370
just create an instance of it

00:04:40,560 --> 00:04:46,680
information on properties and do object

00:04:44,370 --> 00:04:49,710
dot save and then you can query the

00:04:46,680 --> 00:04:51,480
database by doing blog post objects and

00:04:49,710 --> 00:04:53,520
you can do filters and you can do

00:04:51,480 --> 00:04:55,950
selects and all sorts of standard things

00:04:53,520 --> 00:04:57,389
that you can do with database query so

00:04:55,950 --> 00:04:59,700
how do you do the same sort of thing in

00:04:57,389 --> 00:05:02,820
flask well the answer is you don't

00:04:59,700 --> 00:05:05,280
so flask actually doesn't have data

00:05:02,820 --> 00:05:07,230
models now you're looking at this and

00:05:05,280 --> 00:05:11,100
you're wondering how can that be how can

00:05:07,230 --> 00:05:12,930
a web framework not have a data model

00:05:11,100 --> 00:05:14,669
how can a webform with it's apparently

00:05:12,930 --> 00:05:17,490
more popular than Django not have a data

00:05:14,669 --> 00:05:19,440
model well the answer is that J is that

00:05:17,490 --> 00:05:23,550
flask has a very different perspective

00:05:19,440 --> 00:05:25,590
and ideology from django django bundles

00:05:23,550 --> 00:05:28,740
everything altogether and flask is much

00:05:25,590 --> 00:05:31,889
more modular so here's an example of how

00:05:28,740 --> 00:05:34,650
you might handle data modeling in django

00:05:31,889 --> 00:05:37,590
versus flask you can see that the Django

00:05:34,650 --> 00:05:39,960
ORM is built into Django itself so you

00:05:37,590 --> 00:05:42,750
install Django and you've got it flask

00:05:39,960 --> 00:05:45,780
doesn't have that but flask has

00:05:42,750 --> 00:05:48,840
connections to other Python modules in

00:05:45,780 --> 00:05:51,180
the Python package index that will do

00:05:48,840 --> 00:05:53,340
data modeling for you for example the

00:05:51,180 --> 00:05:55,110
sequel alchemy ORM is a very popular one

00:05:53,340 --> 00:05:57,390
if you want to do non-relational

00:05:55,110 --> 00:05:59,370
databases with MongoDB you can use

00:05:57,390 --> 00:06:00,930
engine there's a smaller framework

00:05:59,370 --> 00:06:03,090
called pee-wee that's been getting some

00:06:00,930 --> 00:06:03,780
attention lately so the idea is that

00:06:03,090 --> 00:06:07,530
flask

00:06:03,780 --> 00:06:09,870
is very very minimalist it has almost

00:06:07,530 --> 00:06:11,940
nothing in there it has only the bare

00:06:09,870 --> 00:06:13,440
necessities for what you need in order

00:06:11,940 --> 00:06:16,020
to do a simple static website

00:06:13,440 --> 00:06:18,479
essentially it includes templating URL

00:06:16,020 --> 00:06:21,750
routing error handling and a debugger

00:06:18,479 --> 00:06:23,760
that is all however it is designed to be

00:06:21,750 --> 00:06:25,710
incredibly extensible so that you can

00:06:23,760 --> 00:06:27,240
plug and play and choose which

00:06:25,710 --> 00:06:29,460
components that you want to plug in to

00:06:27,240 --> 00:06:31,860
your website and make it work exactly

00:06:29,460 --> 00:06:33,630
the way that you want so let me give you

00:06:31,860 --> 00:06:36,150
an example that shows you how you might

00:06:33,630 --> 00:06:39,150
do data modeling using sequel alchemy

00:06:36,150 --> 00:06:40,919
and flask so there's an extension called

00:06:39,150 --> 00:06:42,720
flask sequel alchemy which is designed

00:06:40,919 --> 00:06:44,669
to cleanly integrate these two different

00:06:42,720 --> 00:06:45,960
modules so you would just install that

00:06:44,669 --> 00:06:48,990
and that installs to go alchemy itself

00:06:45,960 --> 00:06:51,120
as a dependency and then you do some

00:06:48,990 --> 00:06:54,060
basic setup to configure it so I'm going

00:06:51,120 --> 00:06:54,650
to import that extension and I'm going

00:06:54,060 --> 00:06:57,380
to

00:06:54,650 --> 00:06:59,300
figure it onto my flask application and

00:06:57,380 --> 00:07:01,880
as you can see the flask application

00:06:59,300 --> 00:07:04,100
also has this dot config object where

00:07:01,880 --> 00:07:06,410
you can set information that your

00:07:04,100 --> 00:07:08,660
application or extensions can read and

00:07:06,410 --> 00:07:11,419
use so in this case I might say that I

00:07:08,660 --> 00:07:14,389
want my my database to the sequel Lite

00:07:11,419 --> 00:07:16,970
database that uses the test DB file

00:07:14,389 --> 00:07:18,710
under the temp directory whatever the

00:07:16,970 --> 00:07:20,570
thing that's really important here is

00:07:18,710 --> 00:07:22,729
that you notice that you're importing

00:07:20,570 --> 00:07:25,940
the sequel alchemy class and you're

00:07:22,729 --> 00:07:28,100
creating a variable called DB that you

00:07:25,940 --> 00:07:30,620
you get by wrapping your application

00:07:28,100 --> 00:07:33,350
with sequel kameen so now that you have

00:07:30,620 --> 00:07:35,539
this DB object you can do some very

00:07:33,350 --> 00:07:38,030
familiar things with it so here I'm

00:07:35,539 --> 00:07:40,370
defining a data model a blog post data

00:07:38,030 --> 00:07:43,160
model and you can see that it looks very

00:07:40,370 --> 00:07:45,169
familiar to the same sort of thing that

00:07:43,160 --> 00:07:46,970
you would do with the Django ORM in fact

00:07:45,169 --> 00:07:48,560
I'll take the previous example and I'll

00:07:46,970 --> 00:07:50,270
put it on the same slide so you can

00:07:48,560 --> 00:07:53,090
compare and contrast they're not

00:07:50,270 --> 00:07:55,520
identical but they're very similar to

00:07:53,090 --> 00:07:58,220
each other and if you've used the Django

00:07:55,520 --> 00:08:01,130
RM you can use sequel alchemy in almost

00:07:58,220 --> 00:08:03,949
the same way you can also manipulate

00:08:01,130 --> 00:08:06,710
data in very similar fashions so you can

00:08:03,949 --> 00:08:08,960
create an instance of a blog post an

00:08:06,710 --> 00:08:11,060
instance of the blog post class assign

00:08:08,960 --> 00:08:12,919
information to it and then instead of

00:08:11,060 --> 00:08:15,560
calling dot save on it you have to add

00:08:12,919 --> 00:08:17,840
it to the database session and commit

00:08:15,560 --> 00:08:20,270
the session it's the same basic concept

00:08:17,840 --> 00:08:22,280
sequel alchemy is just making you sort

00:08:20,270 --> 00:08:24,440
of be a little bit more explicit with

00:08:22,280 --> 00:08:27,080
how this database interaction works and

00:08:24,440 --> 00:08:29,449
you can query data in the same way so

00:08:27,080 --> 00:08:31,699
you do dot query instead of dot objects

00:08:29,449 --> 00:08:34,279
and you can do dot filter or dot filter

00:08:31,699 --> 00:08:36,860
by and there's a lot of the same basic

00:08:34,279 --> 00:08:38,360
things that you can do in Django and you

00:08:36,860 --> 00:08:40,310
can do the same sort of thing in sequel

00:08:38,360 --> 00:08:42,469
alchemy in fact I'm of the opinion that

00:08:40,310 --> 00:08:45,110
sequel alchemy is a more powerful object

00:08:42,469 --> 00:08:49,900
relational mapper than Django or M but

00:08:45,110 --> 00:08:49,900
that's another topic for another time so

00:08:50,650 --> 00:08:54,230
so by comparison

00:08:52,430 --> 00:08:56,300
so to talk about data models here on the

00:08:54,230 --> 00:08:57,740
higher level Django's data models are

00:08:56,300 --> 00:09:00,650
easier to get started because they're

00:08:57,740 --> 00:09:02,320
built in so you don't need to import and

00:09:00,650 --> 00:09:04,550
install anything else to get started

00:09:02,320 --> 00:09:06,980
however flask allows you more

00:09:04,550 --> 00:09:07,680
flexibility to choose whatever you want

00:09:06,980 --> 00:09:09,510
to use

00:09:07,680 --> 00:09:11,610
Django assumes that you're gonna use a

00:09:09,510 --> 00:09:13,770
relational database flask you can use

00:09:11,610 --> 00:09:16,020
whatever you want you can use you

00:09:13,770 --> 00:09:18,779
can use Google App engines datastore you

00:09:16,020 --> 00:09:20,430
can use whatever it doesn't matter but

00:09:18,779 --> 00:09:22,110
of course the more options you have the

00:09:20,430 --> 00:09:23,910
more flexibility you have the more

00:09:22,110 --> 00:09:26,370
chance you have to screw something up so

00:09:23,910 --> 00:09:26,940
you know it's a trade-off there let's

00:09:26,370 --> 00:09:29,459
keep going

00:09:26,940 --> 00:09:31,290
most web applications have users and

00:09:29,459 --> 00:09:33,420
they also have an admin to be able to

00:09:31,290 --> 00:09:36,420
view information in your database and

00:09:33,420 --> 00:09:37,620
modify it so how do these compare can

00:09:36,420 --> 00:09:40,080
you do this sort of thing with flask

00:09:37,620 --> 00:09:42,120
well with Django we have your familiar

00:09:40,080 --> 00:09:44,220
Django dead contrib dot off it's built

00:09:42,120 --> 00:09:45,839
in it's easy I'm sure you're all rather

00:09:44,220 --> 00:09:47,880
familiar with it if you need extra

00:09:45,839 --> 00:09:49,649
models if you need extra information for

00:09:47,880 --> 00:09:51,480
users you can swap out the user model

00:09:49,649 --> 00:09:53,430
it's a little complicated you can also

00:09:51,480 --> 00:09:54,990
make a user profile to attach to it

00:09:53,430 --> 00:09:57,959
that's also a little complicated but it

00:09:54,990 --> 00:10:00,180
works pretty well with the admin you

00:09:57,959 --> 00:10:02,790
have Django Tekonsha admin also built in

00:10:00,180 --> 00:10:04,200
an easy very customizable and there's a

00:10:02,790 --> 00:10:05,730
lot of documentation out there with a

00:10:04,200 --> 00:10:07,500
fine-grained permission system so that

00:10:05,730 --> 00:10:10,860
different admin users can get access to

00:10:07,500 --> 00:10:12,450
different objects to administer so how

00:10:10,860 --> 00:10:14,310
do we do it in flask well as you might

00:10:12,450 --> 00:10:15,720
imagine you don't have users built-in

00:10:14,310 --> 00:10:18,330
because you don't even have a data model

00:10:15,720 --> 00:10:20,910
built in but there is a very popular

00:10:18,330 --> 00:10:22,950
flask extension called flask login which

00:10:20,910 --> 00:10:24,690
is generic and works with just about any

00:10:22,950 --> 00:10:26,580
data model including sequel alchemy if

00:10:24,690 --> 00:10:28,050
you'd like so here's an example of how

00:10:26,580 --> 00:10:30,630
we might do that I'm going to define a

00:10:28,050 --> 00:10:32,910
user class and you can see I'm importing

00:10:30,630 --> 00:10:34,680
this user mix in from from flask login

00:10:32,910 --> 00:10:36,630
that gives it a couple of extra little

00:10:34,680 --> 00:10:38,820
superpowers so that we have some

00:10:36,630 --> 00:10:40,529
standard usage that you can use across

00:10:38,820 --> 00:10:42,600
your framework regardless of whether

00:10:40,529 --> 00:10:46,050
you're using sequel alchemy or or

00:10:42,600 --> 00:10:48,120
whatever so for example in my route I

00:10:46,050 --> 00:10:49,770
might say if current user dot is

00:10:48,120 --> 00:10:51,779
anonymous now current user is something

00:10:49,770 --> 00:10:53,730
that's provided by flask login it's a

00:10:51,779 --> 00:10:55,800
pointer basically to whatever user is

00:10:53,730 --> 00:10:57,329
currently logged in and the is anonymous

00:10:55,800 --> 00:10:58,260
thing is provided by that user mixin

00:10:57,329 --> 00:11:00,089
that I showed you earlier

00:10:58,260 --> 00:11:01,589
so here's a simple view where I'm saying

00:11:00,089 --> 00:11:03,150
if you're anonymous just render the

00:11:01,589 --> 00:11:06,270
splash page otherwise show the user

00:11:03,150 --> 00:11:08,640
homepage flask login will also give you

00:11:06,270 --> 00:11:11,100
a login required decorator which you've

00:11:08,640 --> 00:11:12,540
probably seen from Jango as well so it's

00:11:11,100 --> 00:11:14,730
just a decorator that you apply to your

00:11:12,540 --> 00:11:16,110
view if the user tries to access the

00:11:14,730 --> 00:11:18,600
view and they're not logged in they'll

00:11:16,110 --> 00:11:20,220
get a 403 forbidden exception again very

00:11:18,600 --> 00:11:21,680
similar to Jango but the idea is that

00:11:20,220 --> 00:11:24,330
you build this piece by piece

00:11:21,680 --> 00:11:27,780
with user permissions you can also use

00:11:24,330 --> 00:11:29,250
the principle extension that has a very

00:11:27,780 --> 00:11:31,170
similar fine-grained permissioning

00:11:29,250 --> 00:11:35,220
system the same way that django django

00:11:31,170 --> 00:11:36,960
use it django contrib off models do so

00:11:35,220 --> 00:11:38,700
the idea is if you don't want a

00:11:36,960 --> 00:11:39,210
permissioning system you don't need to

00:11:38,700 --> 00:11:41,100
have it

00:11:39,210 --> 00:11:42,690
Django users have that built in by

00:11:41,100 --> 00:11:44,550
default and you have to sort of deal

00:11:42,690 --> 00:11:45,990
with it whether you want it or not with

00:11:44,550 --> 00:11:48,690
flask you can decide if you want to add

00:11:45,990 --> 00:11:50,460
that it or not and with the admin as you

00:11:48,690 --> 00:11:52,320
might expect there's a flask admin

00:11:50,460 --> 00:11:54,330
extension as well so you want to use

00:11:52,320 --> 00:11:56,280
that you install it you set it up and

00:11:54,330 --> 00:11:58,440
you decide which theme you want to use

00:11:56,280 --> 00:12:00,000
it has a couple of themes built in based

00:11:58,440 --> 00:12:01,530
on bootstrap or you can write your own

00:12:00,000 --> 00:12:03,330
and works with several different

00:12:01,530 --> 00:12:05,340
database backends including sequel

00:12:03,330 --> 00:12:07,110
alchemy and and peewee and it's

00:12:05,340 --> 00:12:10,560
designed to work with or without any

00:12:07,110 --> 00:12:12,120
sort of other deni user extension that

00:12:10,560 --> 00:12:13,980
you want so it's very common to have it

00:12:12,120 --> 00:12:16,320
work with flask login and flask

00:12:13,980 --> 00:12:17,610
principle but it's not required here's

00:12:16,320 --> 00:12:19,650
some screenshots of how it looks

00:12:17,610 --> 00:12:21,870
here's the list view so you can see all

00:12:19,650 --> 00:12:23,010
of your users here's how you edit a user

00:12:21,870 --> 00:12:25,320
as you can see it's all standard

00:12:23,010 --> 00:12:28,080
bootstrap so it's pretty familiar and

00:12:25,320 --> 00:12:29,670
it's pretty powerful now there's a lot

00:12:28,080 --> 00:12:31,680
of different extensions that I've just

00:12:29,670 --> 00:12:33,900
gone over and having a user and admin

00:12:31,680 --> 00:12:35,850
system is pretty standard so there's

00:12:33,900 --> 00:12:38,340
actually an extension called flask

00:12:35,850 --> 00:12:39,870
security which all it does is it takes

00:12:38,340 --> 00:12:41,910
about five or six different flask

00:12:39,870 --> 00:12:43,770
extensions and bundle them all together

00:12:41,910 --> 00:12:46,470
into one package so they're already

00:12:43,770 --> 00:12:47,820
designed to hook up together properly so

00:12:46,470 --> 00:12:50,310
you can just install this one extension

00:12:47,820 --> 00:12:52,500
and bam you've got your users your

00:12:50,310 --> 00:12:54,660
permissions your admin it's all there

00:12:52,500 --> 00:12:56,160
it's great and of course it works with

00:12:54,660 --> 00:12:57,540
sequel alchemy and engine or

00:12:56,160 --> 00:12:58,820
pee-wee's so you've got a lot of

00:12:57,540 --> 00:13:02,460
flexibility here

00:12:58,820 --> 00:13:04,530
so again django has a user a user

00:13:02,460 --> 00:13:07,800
framework and admin built in and they

00:13:04,530 --> 00:13:09,480
work very well they're not maybe they're

00:13:07,800 --> 00:13:10,830
not as flexible as personally I would

00:13:09,480 --> 00:13:13,080
like but for a lot of people they work

00:13:10,830 --> 00:13:14,940
great flask requires a lot of different

00:13:13,080 --> 00:13:16,680
extensions working together in concert

00:13:14,940 --> 00:13:18,870
which makes for a steeper learning curve

00:13:16,680 --> 00:13:20,730
but it means that you can define your

00:13:18,870 --> 00:13:23,250
user model and your permissioning system

00:13:20,730 --> 00:13:24,930
to work exactly the way that you want so

00:13:23,250 --> 00:13:27,030
it's basically a question of do you want

00:13:24,930 --> 00:13:29,640
off the shelf or do you want extensive

00:13:27,030 --> 00:13:31,890
customization there's also the idea of

00:13:29,640 --> 00:13:33,649
reusable apps so Jango has got this

00:13:31,890 --> 00:13:35,869
nailed with the whole Django

00:13:33,649 --> 00:13:38,899
apps system that you have to have an app

00:13:35,869 --> 00:13:40,699
every time you create your project all

00:13:38,899 --> 00:13:42,259
code related to one concept lives in one

00:13:40,699 --> 00:13:43,790
place like for example you might have

00:13:42,259 --> 00:13:47,029
all the registration logic in one place

00:13:43,790 --> 00:13:48,949
how does that compare so with Django you

00:13:47,029 --> 00:13:51,290
would install your thing and you get it

00:13:48,949 --> 00:13:53,569
set up in the installed apps list in the

00:13:51,290 --> 00:13:55,369
settings you have the Django packages

00:13:53,569 --> 00:13:56,929
website available which is fantastic and

00:13:55,369 --> 00:13:58,970
shows you a lot of good information

00:13:56,929 --> 00:14:00,410
about the packages available but it's a

00:13:58,970 --> 00:14:02,209
little hard to figure out which packages

00:14:00,410 --> 00:14:03,319
you actually want which ones are

00:14:02,209 --> 00:14:06,499
maintained which ones are higher quality

00:14:03,319 --> 00:14:07,639
and so on and of course if you're

00:14:06,499 --> 00:14:09,379
writing your own application it's very

00:14:07,639 --> 00:14:11,540
tempting to just stick everything into

00:14:09,379 --> 00:14:13,189
one app rather than organizing it into

00:14:11,540 --> 00:14:14,839
several it's sort of complicated to

00:14:13,189 --> 00:14:15,889
figure out how you want to move all

00:14:14,839 --> 00:14:18,410
those pieces around

00:14:15,889 --> 00:14:20,240
by contrast blue flask has something

00:14:18,410 --> 00:14:21,290
called blueprints which are not quite

00:14:20,240 --> 00:14:23,809
the same thing but they're pretty

00:14:21,290 --> 00:14:25,970
similar it's a way of organizing the

00:14:23,809 --> 00:14:27,769
views in your application so that you

00:14:25,970 --> 00:14:30,230
can again group logic together into

00:14:27,769 --> 00:14:32,089
similar places but it doesn't require

00:14:30,230 --> 00:14:33,679
that you move models into different

00:14:32,089 --> 00:14:35,749
places it doesn't require anything about

00:14:33,679 --> 00:14:37,610
migrations in different places it's

00:14:35,749 --> 00:14:39,230
basically just views so it's it's much

00:14:37,610 --> 00:14:40,249
smaller and much more lightweight which

00:14:39,230 --> 00:14:42,529
might be a good thing or a bad thing

00:14:40,249 --> 00:14:45,439
depending on how on how you look at it

00:14:42,529 --> 00:14:47,240
it's also a very familiar syntax so let

00:14:45,439 --> 00:14:49,519
me go back to our basic hello world that

00:14:47,240 --> 00:14:51,470
we had before and I will take this

00:14:49,519 --> 00:14:54,350
application and I'll transform it into a

00:14:51,470 --> 00:14:56,329
blueprint just like this you can see the

00:14:54,350 --> 00:14:58,910
only things I had to change was turn the

00:14:56,329 --> 00:15:01,189
app variable into a blueprint variable

00:14:58,910 --> 00:15:04,399
and I can still do the same basic route

00:15:01,189 --> 00:15:07,639
decorator on top and now once I have

00:15:04,399 --> 00:15:09,550
this hello underscore BP blueprint I can

00:15:07,639 --> 00:15:12,050
attach it to an existing application

00:15:09,550 --> 00:15:14,089
just by importing it from the file where

00:15:12,050 --> 00:15:16,309
I have it defined and I can call app dot

00:15:14,089 --> 00:15:18,379
register blueprint of the blueprint that

00:15:16,309 --> 00:15:20,149
I've defined so it makes it much easier

00:15:18,379 --> 00:15:22,339
to take an application that was

00:15:20,149 --> 00:15:24,799
originally defined as one monolithic

00:15:22,339 --> 00:15:27,019
application and separated out into

00:15:24,799 --> 00:15:28,339
several different blueprints although

00:15:27,019 --> 00:15:31,100
you might do the same sort of thing with

00:15:28,339 --> 00:15:32,720
django apps so to compare django apps

00:15:31,100 --> 00:15:34,220
are more comprehensive there's a lot

00:15:32,720 --> 00:15:36,439
more of them out there especially if you

00:15:34,220 --> 00:15:38,660
check the django packages website but

00:15:36,439 --> 00:15:40,160
they're also more complex and sometimes

00:15:38,660 --> 00:15:43,189
it's hard to refactor your own

00:15:40,160 --> 00:15:44,809
application into django apps by contrast

00:15:43,189 --> 00:15:47,480
flask blueprints are simpler and they're

00:15:44,809 --> 00:15:48,740
easy to integrate with a project but

00:15:47,480 --> 00:15:50,570
they don't provide the power that you're

00:15:48,740 --> 00:15:53,360
looking for again it's it's sort of a

00:15:50,570 --> 00:15:55,790
subjective thing another thing that a

00:15:53,360 --> 00:15:57,170
lot of websites need is AP is they're

00:15:55,790 --> 00:15:59,120
increasingly common for babba

00:15:57,170 --> 00:16:01,519
for web applications and they have

00:15:59,120 --> 00:16:04,370
different user patterns compared to HTML

00:16:01,519 --> 00:16:06,740
web pages so how do these two compare

00:16:04,370 --> 00:16:08,600
well when you're dealing with Jenga you

00:16:06,740 --> 00:16:10,790
want to use Django rest framework it's

00:16:08,600 --> 00:16:12,139
great I'm sure you've all heard tons and

00:16:10,790 --> 00:16:14,149
tons of praise from this framework over

00:16:12,139 --> 00:16:16,120
the past few days it's multi-layered

00:16:14,149 --> 00:16:18,050
abstraction it's multi-layered

00:16:16,120 --> 00:16:20,029
abstractions so you can choose which

00:16:18,050 --> 00:16:23,449
layer you want to go with it has tons of

00:16:20,029 --> 00:16:24,889
documentation and it works great so what

00:16:23,449 --> 00:16:26,750
about with flask well as you might

00:16:24,889 --> 00:16:28,730
imagine you want to use multiple

00:16:26,750 --> 00:16:29,870
different extensions working together to

00:16:28,730 --> 00:16:31,910
provide the experience that you're

00:16:29,870 --> 00:16:33,829
looking for with Django rest framework

00:16:31,910 --> 00:16:36,110
typically the thing that sort of forms

00:16:33,829 --> 00:16:39,589
the core of how your API is structured

00:16:36,110 --> 00:16:41,510
is the serializer and in flask you would

00:16:39,589 --> 00:16:43,820
probably want to use the marshmallow

00:16:41,510 --> 00:16:46,370
module which is as you might imagine a

00:16:43,820 --> 00:16:48,230
serializer framework and the ecosystem

00:16:46,370 --> 00:16:50,209
has integrations with flask with sequel

00:16:48,230 --> 00:16:52,339
alchemy with engine with a whole

00:16:50,209 --> 00:16:53,899
bunch of other things so no matter what

00:16:52,339 --> 00:16:56,510
sort of structure you've decided for

00:16:53,899 --> 00:16:59,120
your web app flat marshmallow will work

00:16:56,510 --> 00:17:01,430
properly with it so let me give you an

00:16:59,120 --> 00:17:04,669
example this is a fair amount of code

00:17:01,430 --> 00:17:07,750
but this is an application written in

00:17:04,669 --> 00:17:10,429
flask that returns a JSON based API

00:17:07,750 --> 00:17:12,140
endpoints to return information about

00:17:10,429 --> 00:17:13,850
the currently logged in user now

00:17:12,140 --> 00:17:15,530
annotate this a little bit you can see

00:17:13,850 --> 00:17:17,000
at the start I am importing a whole

00:17:15,530 --> 00:17:19,549
bunch of stuff and then I'm going to

00:17:17,000 --> 00:17:21,410
initialize the flask marshmallow

00:17:19,549 --> 00:17:24,169
extension and save it into a variable

00:17:21,410 --> 00:17:27,339
called ma then I'm going to define my

00:17:24,169 --> 00:17:29,360
schema which is basically the serializer

00:17:27,339 --> 00:17:31,309
Django rest framework uses the word

00:17:29,360 --> 00:17:33,470
serializer marshmallow uses the word

00:17:31,309 --> 00:17:35,270
schema it's the same basic thing and you

00:17:33,470 --> 00:17:37,340
can see I'm telling it to just find the

00:17:35,270 --> 00:17:39,290
fields defined on the user model and

00:17:37,340 --> 00:17:40,580
exclude the password field because we

00:17:39,290 --> 00:17:44,690
don't want that being displayed on our

00:17:40,580 --> 00:17:47,510
API and then in the actual API view I

00:17:44,690 --> 00:17:51,470
can just say initialize this user schema

00:17:47,510 --> 00:17:53,960
and take the current user and output it

00:17:51,470 --> 00:17:55,520
as JSON and I also have the log-in

00:17:53,960 --> 00:17:57,380
required decorator that I talked about

00:17:55,520 --> 00:18:00,080
earlier which will make sure that you

00:17:57,380 --> 00:18:00,980
can only access this API endpoint if you

00:18:00,080 --> 00:18:04,160
are currently logged

00:18:00,980 --> 00:18:07,220
so this is one page you know this is

00:18:04,160 --> 00:18:09,680
maybe 15 lines of code and we have a

00:18:07,220 --> 00:18:11,750
basic API set up in such a way that you

00:18:09,680 --> 00:18:16,220
can understand every single piece of the

00:18:11,750 --> 00:18:17,750
puzzle of how its put together so Jango

00:18:16,220 --> 00:18:20,180
versus flask when it comes to api's

00:18:17,750 --> 00:18:22,190
Django rest framework is amazing I

00:18:20,180 --> 00:18:24,320
really wish that flask had something

00:18:22,190 --> 00:18:27,200
that was as well put together and as

00:18:24,320 --> 00:18:29,390
clean and as abstracted as Django rest

00:18:27,200 --> 00:18:30,830
framework we don't have that yet maybe

00:18:29,390 --> 00:18:32,030
someone will put that together the same

00:18:30,830 --> 00:18:34,640
way that people did that for flask

00:18:32,030 --> 00:18:36,740
security but as it is you can still use

00:18:34,640 --> 00:18:38,540
all the extensions that you want to put

00:18:36,740 --> 00:18:41,630
together something just as powerful as

00:18:38,540 --> 00:18:43,520
DRF if not more so and you have more

00:18:41,630 --> 00:18:45,470
flexibility as well because you're not

00:18:43,520 --> 00:18:47,210
constrained to the constraints that

00:18:45,470 --> 00:18:49,220
jenga puts upon you you can use a non

00:18:47,210 --> 00:18:51,860
relational database if you want to you

00:18:49,220 --> 00:18:53,210
can use any sort of different components

00:18:51,860 --> 00:18:54,950
that you want to mix into your

00:18:53,210 --> 00:18:57,740
application to make it taste exactly the

00:18:54,950 --> 00:18:59,600
way that you want so the question you

00:18:57,740 --> 00:19:02,780
might be asking yourself is which one do

00:18:59,600 --> 00:19:04,220
I choose and of course it's up to you it

00:19:02,780 --> 00:19:05,870
depends on the project but let me give

00:19:04,220 --> 00:19:08,020
you a couple of brief bullet points so

00:19:05,870 --> 00:19:10,640
that you have an idea of which to go for

00:19:08,020 --> 00:19:12,320
you generally want to choose Django when

00:19:10,640 --> 00:19:14,090
you're happy with all the choices that

00:19:12,320 --> 00:19:15,770
Django makes for you so I've been

00:19:14,090 --> 00:19:17,900
talking about how Django restricts you

00:19:15,770 --> 00:19:19,460
to using a relational database maybe you

00:19:17,900 --> 00:19:22,160
like using a relational database if

00:19:19,460 --> 00:19:23,600
that's the case go for it Django makes

00:19:22,160 --> 00:19:25,070
you use Django templates although that's

00:19:23,600 --> 00:19:26,870
changed recently you can swap out

00:19:25,070 --> 00:19:28,370
different templating systems but

00:19:26,870 --> 00:19:29,660
generally you want to go with the things

00:19:28,370 --> 00:19:31,100
that Jenga provides for you the more

00:19:29,660 --> 00:19:33,860
that you do that the happier you'll be

00:19:31,100 --> 00:19:35,480
if you're not doing anything too unusual

00:19:33,860 --> 00:19:36,950
Django will work great for you because

00:19:35,480 --> 00:19:38,960
the more that you try to fight the

00:19:36,950 --> 00:19:41,840
framework the more pain you'll

00:19:38,960 --> 00:19:43,250
experience and also Django sort of sets

00:19:41,840 --> 00:19:45,080
up a whole bunch of different things for

00:19:43,250 --> 00:19:47,090
you you can peek under the covers and

00:19:45,080 --> 00:19:48,530
you can learn how the ORM works and how

00:19:47,090 --> 00:19:50,660
the templating system works and how all

00:19:48,530 --> 00:19:53,210
these different pieces fit together but

00:19:50,660 --> 00:19:54,740
you don't necessarily have to by

00:19:53,210 --> 00:19:56,840
contrast you might want to choose flask

00:19:54,740 --> 00:19:58,070
when you disagree with one of Django's

00:19:56,840 --> 00:19:59,660
choices and you want to do things

00:19:58,070 --> 00:20:01,220
differently if you want to use sequel

00:19:59,660 --> 00:20:02,900
alchemy instead of the Ginga ORM for

00:20:01,220 --> 00:20:05,120
example or if you have unusual

00:20:02,900 --> 00:20:07,280
requirements like using a non relational

00:20:05,120 --> 00:20:09,320
database or doing something else that

00:20:07,280 --> 00:20:11,150
seems a little bit odd or unusual for a

00:20:09,320 --> 00:20:13,100
web framework Django will fight you a

00:20:11,150 --> 00:20:14,800
little bit on this flask will say yeah

00:20:13,100 --> 00:20:16,870
do what you want great

00:20:14,800 --> 00:20:19,240
or it's great to use flasks when you're

00:20:16,870 --> 00:20:20,590
doing a hobbyist side project and maybe

00:20:19,240 --> 00:20:22,450
you're less concerned with having a

00:20:20,590 --> 00:20:24,340
working project and more concerned with

00:20:22,450 --> 00:20:26,290
understanding all the different layers

00:20:24,340 --> 00:20:28,240
and how they work together it's great

00:20:26,290 --> 00:20:30,010
for really making you learn how all the

00:20:28,240 --> 00:20:31,390
pieces fit together and it'll make you a

00:20:30,010 --> 00:20:34,150
better programmer by having that

00:20:31,390 --> 00:20:36,670
understanding so I'm about out of time

00:20:34,150 --> 00:20:38,140
but that's all I have to say does anyone

00:20:36,670 --> 00:20:39,820
have any questions I only have a little

00:20:38,140 --> 00:20:41,770
bit of time to take questions and I will

00:20:39,820 --> 00:20:44,170
also say I'm sure there are people here

00:20:41,770 --> 00:20:46,810
with a lot of opinions so I'm going to

00:20:44,170 --> 00:20:49,990
be out in the lobby to host an argument

00:20:46,810 --> 00:20:52,980
session after this talk so I built a

00:20:49,990 --> 00:20:56,770
flask application last weekend and

00:20:52,980 --> 00:20:59,320
coming from an object-oriented world I

00:20:56,770 --> 00:21:01,420
was like alright you know I could build

00:20:59,320 --> 00:21:03,310
this in in one file but I really want to

00:21:01,420 --> 00:21:05,860
split my router out and I want to split

00:21:03,310 --> 00:21:09,070
my models out and I want to have my app

00:21:05,860 --> 00:21:11,350
UI and I really couldn't find anywhere

00:21:09,070 --> 00:21:13,300
on the web that actually tells you how

00:21:11,350 --> 00:21:14,620
to do that there's lots of things that

00:21:13,300 --> 00:21:17,140
say here's how you do the single page

00:21:14,620 --> 00:21:18,910
and there's lots of things that sort of

00:21:17,140 --> 00:21:19,930
say the really complex sort of like

00:21:18,910 --> 00:21:21,340
here's how you put all the things

00:21:19,930 --> 00:21:22,960
together there's nothing that really

00:21:21,340 --> 00:21:24,910
sounds like here's how you put your

00:21:22,960 --> 00:21:27,790
router in just a different file I

00:21:24,910 --> 00:21:31,780
managed to get to work but I was doing

00:21:27,790 --> 00:21:36,760
something wrong like how do you actually

00:21:31,780 --> 00:21:38,740
separate the concerns so flasks greatest

00:21:36,760 --> 00:21:41,980
strength is its flexibility and that is

00:21:38,740 --> 00:21:43,780
also its greatest weakness so you can

00:21:41,980 --> 00:21:46,390
separate your file in many different

00:21:43,780 --> 00:21:48,010
ways into you know whatever names you

00:21:46,390 --> 00:21:49,960
want in terms of the actual

00:21:48,010 --> 00:21:51,670
functionality actual step by step way of

00:21:49,960 --> 00:21:53,980
doing that you would just take your code

00:21:51,670 --> 00:21:56,560
copy paste it into a different file and

00:21:53,980 --> 00:21:58,630
then in your main file you imports what

00:21:56,560 --> 00:22:00,670
you copy pasted from someplace else so

00:21:58,630 --> 00:22:03,250
it's just using pythons import system

00:22:00,670 --> 00:22:05,530
it's nothing specific to flask in terms

00:22:03,250 --> 00:22:07,870
of which files you pull those out into

00:22:05,530 --> 00:22:10,900
how you name them where you move your

00:22:07,870 --> 00:22:12,490
code around that is a subjective thing

00:22:10,900 --> 00:22:13,720
and that's going to depend on what

00:22:12,490 --> 00:22:15,490
you're interested in there are a couple

00:22:13,720 --> 00:22:16,840
of tutorials out there and you can

00:22:15,490 --> 00:22:20,230
follow them if you want but ultimately

00:22:16,840 --> 00:22:21,700
it's up to you thanks for the talk could

00:22:20,230 --> 00:22:23,950
you go back to your choose Jango when

00:22:21,700 --> 00:22:25,720
slide she had a question about that I'm

00:22:23,950 --> 00:22:28,140
trying to keep my question the form of a

00:22:25,720 --> 00:22:30,330
question could you please say more

00:22:28,140 --> 00:22:31,740
about you're not doing anything unusual

00:22:30,330 --> 00:22:34,799
because I feel like that's a little bit

00:22:31,740 --> 00:22:37,110
leading you might not start out doing

00:22:34,799 --> 00:22:39,030
something unusual but as you grow and

00:22:37,110 --> 00:22:40,650
scale and try new things you might end

00:22:39,030 --> 00:22:41,730
up doing something unusual so can you

00:22:40,650 --> 00:22:44,760
just say a little bit more about what

00:22:41,730 --> 00:22:47,420
you had in mind there that is very true

00:22:44,760 --> 00:22:50,250
I I have to admit I don't have a

00:22:47,420 --> 00:22:53,280
specific use case in mind for what I'm

00:22:50,250 --> 00:22:55,679
thinking of but there are people who for

00:22:53,280 --> 00:22:57,330
example might want to use a web

00:22:55,679 --> 00:22:59,670
framework in a way that a web framework

00:22:57,330 --> 00:23:03,330
was never really designed to be used for

00:22:59,670 --> 00:23:04,860
like maybe using it to do a task queue

00:23:03,330 --> 00:23:08,700
application which I've seen people try

00:23:04,860 --> 00:23:11,070
to do I've seen people use try to use a

00:23:08,700 --> 00:23:12,900
web framework in order to just have a

00:23:11,070 --> 00:23:15,150
task runner on the command line

00:23:12,900 --> 00:23:16,500
so sort of like you might have rake or

00:23:15,150 --> 00:23:19,020
manage not pie and people will try to

00:23:16,500 --> 00:23:19,470
fit some logic into a view or something

00:23:19,020 --> 00:23:23,419
like that

00:23:19,470 --> 00:23:25,890
all these are probably bad ideas and

00:23:23,419 --> 00:23:29,160
Jenga will try to steer you away from

00:23:25,890 --> 00:23:31,410
that flask will say yeah this is a very

00:23:29,160 --> 00:23:34,049
small very flexible framework you can

00:23:31,410 --> 00:23:35,970
use me the way that you want so again

00:23:34,049 --> 00:23:37,830
it's a question of do you want your

00:23:35,970 --> 00:23:40,320
framework pushing you in certain

00:23:37,830 --> 00:23:42,990
directions or do you want your framework

00:23:40,320 --> 00:23:44,520
to say yeah you know I didn't think that

00:23:42,990 --> 00:23:45,780
you wanted to do it that way but if

00:23:44,520 --> 00:23:48,330
that's really the way that you want to

00:23:45,780 --> 00:23:50,280
do it go for it so I guess it really

00:23:48,330 --> 00:23:52,020
depends on a specific use case I'm sorry

00:23:50,280 --> 00:23:54,059
I don't have anything more specific to

00:23:52,020 --> 00:23:56,130
say about that unfortunately we've run

00:23:54,059 --> 00:23:58,900
out of time for questions the beat down

00:23:56,130 --> 00:24:01,510
can continue in the hallway track

00:23:58,900 --> 00:24:04,830
until then let's have a big round for

00:24:01,510 --> 00:24:04,830
David DB bottle

00:24:08,180 --> 00:24:11,469

YouTube URL: https://www.youtube.com/watch?v=UY2JMZjQspY


