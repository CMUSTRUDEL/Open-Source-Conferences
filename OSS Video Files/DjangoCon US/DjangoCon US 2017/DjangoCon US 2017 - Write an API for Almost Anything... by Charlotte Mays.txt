Title: DjangoCon US 2017 - Write an API for Almost Anything... by Charlotte Mays
Publication date: 2017-09-07
Playlist: DjangoCon US 2017
Description: 
	DjangoCon US 2017 - Write an API for Almost Anything (or The Amazing Power and Flexibility of Django Rest Framework) by Charlotte Mays

This talk will feature a few off-the-beaten-path applications of APIs. Since the combination of Django and DRF makes it so easy to get a simple API running, it becomes a very powerful, flexible, and expandable tool for a variety of uses. The only thing these applications may have in common is their need to share data across the web. Whether you have not yet tested the waters of Django Rest Framework or you are a DRF veteran, this talk will inspire you to think both big and small when considering its potential uses.

This talk was presented at: https://2017.djangocon.us/talks/write-an-api-for-almost-anything-or-the-amazing-power-and-flexibility-of-django-rest-framework/

LINKS:
Follow Charlotte Mays ðŸ‘‡
On Twitter: https://twitter.com/charlottecodes

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:16,660
[Music]

00:00:13,690 --> 00:00:17,840
all right can everybody hear me okay

00:00:16,660 --> 00:00:20,030
great

00:00:17,840 --> 00:00:23,570
okay so I'm going to talk about writing

00:00:20,030 --> 00:00:25,880
api's for almost anything I am as you

00:00:23,570 --> 00:00:28,070
said a web developer at cactus group I

00:00:25,880 --> 00:00:30,529
am one of the organizers of the PI

00:00:28,070 --> 00:00:32,930
ladies group in our area and most

00:00:30,529 --> 00:00:35,450
importantly for this talk I am a builder

00:00:32,930 --> 00:00:37,070
end user of api's if you'd like to

00:00:35,450 --> 00:00:38,780
follow along with my slides the link is

00:00:37,070 --> 00:00:40,550
here and I will also have that link

00:00:38,780 --> 00:00:41,900
again at the end of the presentation so

00:00:40,550 --> 00:00:46,030
if you just want it for reference later

00:00:41,900 --> 00:00:46,030
don't worry you can get it at the end so

00:00:46,870 --> 00:00:52,129
we should probably start by defining our

00:00:49,190 --> 00:00:53,239
terms what exactly is an API well it

00:00:52,129 --> 00:00:55,190
stands for application programming

00:00:53,239 --> 00:00:56,269
interface but to be perfectly honest

00:00:55,190 --> 00:00:59,030
that probably doesn't give you any more

00:00:56,269 --> 00:01:01,309
information than you had before more

00:00:59,030 --> 00:01:03,170
importantly it is code that lets two

00:01:01,309 --> 00:01:05,030
software programs communicate with each

00:01:03,170 --> 00:01:07,160
other that's the really key piece about

00:01:05,030 --> 00:01:12,860
what an API is and that's what makes it

00:01:07,160 --> 00:01:14,780
both powerful and useful so we like

00:01:12,860 --> 00:01:17,210
api's because they give us flexibility

00:01:14,780 --> 00:01:19,450
once you've got an API in place you got

00:01:17,210 --> 00:01:22,450
access to all those basic functions

00:01:19,450 --> 00:01:25,939
reading your data updating your data etc

00:01:22,450 --> 00:01:28,759
without the entire structure of what you

00:01:25,939 --> 00:01:30,649
expect the workflow to be and so that

00:01:28,759 --> 00:01:32,540
gives you flexibility to be able to do

00:01:30,649 --> 00:01:34,369
different kinds of things it also gives

00:01:32,540 --> 00:01:37,430
you more access obviously we think of

00:01:34,369 --> 00:01:39,950
api's largely in terms of users being

00:01:37,430 --> 00:01:41,899
able to access directly but you also can

00:01:39,950 --> 00:01:44,060
use an API internally and make it not

00:01:41,899 --> 00:01:46,790
even expose it to the outside world but

00:01:44,060 --> 00:01:48,979
use it with two different pieces of code

00:01:46,790 --> 00:01:51,560
on one server or on two different

00:01:48,979 --> 00:01:53,710
servers that just talk to each other so

00:01:51,560 --> 00:01:56,390
that you have better access to your own

00:01:53,710 --> 00:01:58,130
systems and you can also use this for

00:01:56,390 --> 00:02:00,229
future proofing if you once you've got

00:01:58,130 --> 00:02:02,539
an API in place that gives you the

00:02:00,229 --> 00:02:04,789
ability when suddenly a customer has a

00:02:02,539 --> 00:02:06,649
need right now that we've got to do

00:02:04,789 --> 00:02:08,060
something a little different you've got

00:02:06,649 --> 00:02:11,030
an API in place that gives you that

00:02:08,060 --> 00:02:13,520
flexibility again makes it easier to

00:02:11,030 --> 00:02:16,730
implement new things without as much

00:02:13,520 --> 00:02:19,250
complexity so to give you an example of

00:02:16,730 --> 00:02:20,959
when an API might come in handy I have a

00:02:19,250 --> 00:02:22,910
friend this is a real story massage

00:02:20,959 --> 00:02:25,370
therapist who needed his schedule

00:02:22,910 --> 00:02:26,420
information to be shareable without the

00:02:25,370 --> 00:02:27,980
client information

00:02:26,420 --> 00:02:29,890
so basically what times he had

00:02:27,980 --> 00:02:32,270
appointments without the client names

00:02:29,890 --> 00:02:34,250
his scheduling software while I did a

00:02:32,270 --> 00:02:37,010
lot of things it didn't do this but it

00:02:34,250 --> 00:02:38,750
did have an API so we were able to put

00:02:37,010 --> 00:02:41,050
together a small script that can pull

00:02:38,750 --> 00:02:43,430
that schedule information via that API

00:02:41,050 --> 00:02:45,170
strip out the client information and

00:02:43,430 --> 00:02:49,520
then post that appointment information

00:02:45,170 --> 00:02:51,320
up to a shareable calendar the API in

00:02:49,520 --> 00:02:53,750
other words made it possible for him to

00:02:51,320 --> 00:02:56,420
create an otherwise non-existent feature

00:02:53,750 --> 00:03:01,430
from the perspective of a user not a

00:02:56,420 --> 00:03:03,170
developer you also can use api's for non

00:03:01,430 --> 00:03:05,410
web applications I'll just mention this

00:03:03,170 --> 00:03:07,760
briefly we often think of Django as

00:03:05,410 --> 00:03:09,620
being a web framework and that is its

00:03:07,760 --> 00:03:11,980
primary purpose but that doesn't mean

00:03:09,620 --> 00:03:16,640
that its power and flexibility is

00:03:11,980 --> 00:03:18,890
limited to the web as an example I gave

00:03:16,640 --> 00:03:20,209
a talk at a game conference about how

00:03:18,890 --> 00:03:22,550
this could be used to create a game

00:03:20,209 --> 00:03:24,650
back-end so that the front end the user

00:03:22,550 --> 00:03:26,720
experience the gameplay could all be

00:03:24,650 --> 00:03:30,070
done without having to worry about the

00:03:26,720 --> 00:03:32,630
shared state of the game for multiplayer

00:03:30,070 --> 00:03:36,140
types of applications and you can see

00:03:32,630 --> 00:03:38,900
that code up on my github here you also

00:03:36,140 --> 00:03:41,959
can use api's for internal separation of

00:03:38,900 --> 00:03:43,880
code within your own applications modern

00:03:41,959 --> 00:03:46,430
applications are heavily reliant on

00:03:43,880 --> 00:03:49,370
JavaScript to be highly interactive and

00:03:46,430 --> 00:03:52,459
responsive and so that requires

00:03:49,370 --> 00:03:54,320
JavaScript you can use an API to

00:03:52,459 --> 00:03:56,780
separate your django code from your

00:03:54,320 --> 00:03:58,760
javascript code which results in having

00:03:56,780 --> 00:04:01,430
cleaner code because you don't have that

00:03:58,760 --> 00:04:03,500
all tangled together in spaghetti code

00:04:01,430 --> 00:04:04,880
and it also makes it easier to use a lot

00:04:03,500 --> 00:04:07,459
of javascript frameworks that are gonna

00:04:04,880 --> 00:04:09,470
often be built around building a single

00:04:07,459 --> 00:04:12,049
page app which isn't quite the way

00:04:09,470 --> 00:04:15,560
Django templates work so if you have

00:04:12,049 --> 00:04:17,239
your code built with an API then you can

00:04:15,560 --> 00:04:19,250
have that JavaScript framework built as

00:04:17,239 --> 00:04:21,079
a single page app and it can retrieve

00:04:19,250 --> 00:04:22,940
the data and context that it needs with

00:04:21,079 --> 00:04:24,500
simple API requests and again this can

00:04:22,940 --> 00:04:25,940
be on the same server so you're not

00:04:24,500 --> 00:04:30,680
really dealing with any sort of latency

00:04:25,940 --> 00:04:32,570
here all right so how do we do this

00:04:30,680 --> 00:04:34,490
there are a lot of ways to build an API

00:04:32,570 --> 00:04:36,950
there are a lot of packages available to

00:04:34,490 --> 00:04:38,660
do it this talk is going to focus on

00:04:36,950 --> 00:04:40,610
Django rest framework

00:04:38,660 --> 00:04:43,220
Jenga rest framework sits nicely on top

00:04:40,610 --> 00:04:45,140
of existing Jenga code and has a very

00:04:43,220 --> 00:04:46,940
thorough feature set

00:04:45,140 --> 00:04:48,920
cactus group uses Django rest framework

00:04:46,940 --> 00:04:50,480
all the time we like it enough we

00:04:48,920 --> 00:04:54,980
actually even sponsor it let me show you

00:04:50,480 --> 00:04:57,410
why so here's the anatomy of a Jenga

00:04:54,980 --> 00:04:59,210
rest framework API at the bottom here

00:04:57,410 --> 00:05:01,130
you've got your existing Django models

00:04:59,210 --> 00:05:03,410
which you know Django takes care of your

00:05:01,130 --> 00:05:05,660
database all that sort of thing on top

00:05:03,410 --> 00:05:07,940
of that the next layer you've got is

00:05:05,660 --> 00:05:09,680
your serializer this is a piece of

00:05:07,940 --> 00:05:12,770
Django rest framework that is just going

00:05:09,680 --> 00:05:15,740
to take your model information and parse

00:05:12,770 --> 00:05:19,070
it into a format in going in both

00:05:15,740 --> 00:05:21,290
directions that the view set can work

00:05:19,070 --> 00:05:23,630
with the view set is the next layer here

00:05:21,290 --> 00:05:26,360
and that is what handles okay am i

00:05:23,630 --> 00:05:27,830
creating a new instance am i updating an

00:05:26,360 --> 00:05:30,410
instance do you just want a list of the

00:05:27,830 --> 00:05:33,680
instances the view set handles figuring

00:05:30,410 --> 00:05:36,170
out what information needs to either

00:05:33,680 --> 00:05:39,140
come out of the database or go into the

00:05:36,170 --> 00:05:41,450
database and control that and then the

00:05:39,140 --> 00:05:43,160
last thing on top of that is the router

00:05:41,450 --> 00:05:46,790
and that's what handles the actual

00:05:43,160 --> 00:05:50,600
access via the URLs so where do we put

00:05:46,790 --> 00:05:52,880
these things this is my convention I

00:05:50,600 --> 00:05:54,710
like to have a file called as the salt

00:05:52,880 --> 00:05:57,620
within my application within my app

00:05:54,710 --> 00:05:59,840
within my Django app I like to have a

00:05:57,620 --> 00:06:02,270
file called serializers PI that has my

00:05:59,840 --> 00:06:04,940
serializers in it I like to put my view

00:06:02,270 --> 00:06:06,560
sets directly into views dot PI if you

00:06:04,940 --> 00:06:08,420
want separation if you're still using

00:06:06,560 --> 00:06:10,820
Django templates and you want separation

00:06:08,420 --> 00:06:13,220
you can also put this into a file called

00:06:10,820 --> 00:06:16,760
API dot PI it would work just fine that

00:06:13,220 --> 00:06:18,950
way too and then the router is going to

00:06:16,760 --> 00:06:20,810
go right into your URLs PI this can be

00:06:18,950 --> 00:06:24,980
inside the app or it can be your global

00:06:20,810 --> 00:06:27,050
URLs dot PI either way all right so

00:06:24,980 --> 00:06:30,320
let's start at the bottom and talk about

00:06:27,050 --> 00:06:33,560
the serializer so this is the serializer

00:06:30,320 --> 00:06:36,170
this is it so we're gonna import

00:06:33,560 --> 00:06:37,730
serializers from rest framework we're

00:06:36,170 --> 00:06:40,220
gonna import our model from our models

00:06:37,730 --> 00:06:42,230
file we're gonna create a serializer

00:06:40,220 --> 00:06:43,670
that's just sub classing the Django rest

00:06:42,230 --> 00:06:46,610
framework model serializer

00:06:43,670 --> 00:06:48,140
give it a meta class tell it what the

00:06:46,610 --> 00:06:50,300
model is and tell it what fields we want

00:06:48,140 --> 00:06:51,460
included any field that's not listed

00:06:50,300 --> 00:06:53,110
here

00:06:51,460 --> 00:06:55,300
the API is just going to ignore so if

00:06:53,110 --> 00:06:56,860
you have private internal fields you can

00:06:55,300 --> 00:07:01,840
leave them out of the serializer and

00:06:56,860 --> 00:07:05,740
they won't be exposed now let's move up

00:07:01,840 --> 00:07:07,259
a step in our ladder to the view set so

00:07:05,740 --> 00:07:09,340
we're going to import that view set

00:07:07,259 --> 00:07:11,020
we're going to import our model again

00:07:09,340 --> 00:07:13,530
and we're going to import that

00:07:11,020 --> 00:07:17,530
serializer that we just created

00:07:13,530 --> 00:07:19,449
then we're gonna again subclass the

00:07:17,530 --> 00:07:21,880
model view set from Django rest

00:07:19,449 --> 00:07:23,380
framework tell it what our query set is

00:07:21,880 --> 00:07:26,470
in this case I'm just using all of the

00:07:23,380 --> 00:07:28,600
objects that I have for my model you

00:07:26,470 --> 00:07:30,880
could do different view sets for

00:07:28,600 --> 00:07:33,100
different types of you know different

00:07:30,880 --> 00:07:35,620
subsets of your data if you wanted to

00:07:33,100 --> 00:07:36,699
have different functionality but in this

00:07:35,620 --> 00:07:39,039
example we're just going to use all of

00:07:36,699 --> 00:07:40,060
it and then you tell it what serializer

00:07:39,039 --> 00:07:43,840
class that's just going to be your

00:07:40,060 --> 00:07:46,720
serializer that you created and finally

00:07:43,840 --> 00:07:48,340
let's put the router on top and this is

00:07:46,720 --> 00:07:52,180
going to nest just right within your

00:07:48,340 --> 00:07:54,190
existing Django URLs code I have a

00:07:52,180 --> 00:07:57,550
convention that I like to import the

00:07:54,190 --> 00:08:00,039
views as a namespaced

00:07:57,550 --> 00:08:01,240
things because if you start putting all

00:08:00,039 --> 00:08:03,789
this especially if you put this in a

00:08:01,240 --> 00:08:06,190
global URLs file but either way it makes

00:08:03,789 --> 00:08:09,240
it much easier to read when you look

00:08:06,190 --> 00:08:11,770
down here we're gonna define our router

00:08:09,240 --> 00:08:13,750
router equals routers default router

00:08:11,770 --> 00:08:15,000
that's just gonna initialize it using

00:08:13,750 --> 00:08:17,470
the Django rest framework router

00:08:15,000 --> 00:08:19,270
structure and then we're gonna do we're

00:08:17,470 --> 00:08:21,970
gonna register our model with this a

00:08:19,270 --> 00:08:23,590
routers that router dot register we're

00:08:21,970 --> 00:08:24,820
gonna give it a namespace I'm just

00:08:23,590 --> 00:08:27,220
giving it the name of the model in this

00:08:24,820 --> 00:08:28,449
case but it can be anything and then

00:08:27,220 --> 00:08:31,360
you're gonna tell it where the view set

00:08:28,449 --> 00:08:33,510
is Django rest framework will take care

00:08:31,360 --> 00:08:36,640
of parsing the different URLs and the

00:08:33,510 --> 00:08:39,159
different methods that need to happen

00:08:36,640 --> 00:08:41,680
here and then we just have to include

00:08:39,159 --> 00:08:44,680
our router not URLs if you had other

00:08:41,680 --> 00:08:45,940
models other view sets that you were

00:08:44,680 --> 00:08:47,980
importing you would just need an extra

00:08:45,940 --> 00:08:50,860
register line for each of those the rest

00:08:47,980 --> 00:08:52,330
of this would stay the same way and at

00:08:50,860 --> 00:08:55,779
the very bottom here I've got one other

00:08:52,330 --> 00:08:58,810
thing that's handy to have on there is

00:08:55,779 --> 00:09:00,880
the API off which gives you access to

00:08:58,810 --> 00:09:02,650
the Django rest framework built in

00:09:00,880 --> 00:09:04,380
browsable api so you can click around

00:09:02,650 --> 00:09:09,540
and see what the functionality

00:09:04,380 --> 00:09:13,500
is for learning the structure alright so

00:09:09,540 --> 00:09:15,690
when we're accessing our API API

00:09:13,500 --> 00:09:18,180
structure is typically done using the

00:09:15,690 --> 00:09:21,180
crud acronym create read update and

00:09:18,180 --> 00:09:23,130
delete and we're gonna use specific HTTP

00:09:21,180 --> 00:09:26,940
methods so that Django rest framework

00:09:23,130 --> 00:09:29,190
knows what we're trying to accomplish so

00:09:26,940 --> 00:09:32,160
we're trying to create an instance we're

00:09:29,190 --> 00:09:34,530
gonna do a post when we're trying to

00:09:32,160 --> 00:09:37,680
read either get a list or get a detail

00:09:34,530 --> 00:09:39,330
view we're gonna use a git for update

00:09:37,680 --> 00:09:41,490
we're gonna use either a put or a patch

00:09:39,330 --> 00:09:43,260
the big difference between these is put

00:09:41,490 --> 00:09:44,430
is gonna expect all of the fields just

00:09:43,260 --> 00:09:46,890
as if you were doing a post

00:09:44,430 --> 00:09:48,270
whereas patch will just take whatever

00:09:46,890 --> 00:09:49,770
fields you gave me I'm gonna assume

00:09:48,270 --> 00:09:51,180
those are the ones that change and

00:09:49,770 --> 00:09:51,810
everything else I'm just gonna leave the

00:09:51,180 --> 00:09:55,590
way it was

00:09:51,810 --> 00:09:59,040
and then finally delete uses the HTTP

00:09:55,590 --> 00:10:00,510
delete method there are more HTTP

00:09:59,040 --> 00:10:02,970
methods than this but these are all you

00:10:00,510 --> 00:10:06,720
need to know about for this particular

00:10:02,970 --> 00:10:07,500
functionality so just to give you a few

00:10:06,720 --> 00:10:10,260
examples

00:10:07,500 --> 00:10:12,360
I'm just reprinting our register line

00:10:10,260 --> 00:10:14,220
from the URLs DUP hi here so you can

00:10:12,360 --> 00:10:15,690
reference it the only thing that we

00:10:14,220 --> 00:10:19,290
really need reference here is the my

00:10:15,690 --> 00:10:21,830
model namespace that we gave it so this

00:10:19,290 --> 00:10:26,310
is going to translate into if I do a get

00:10:21,830 --> 00:10:28,350
HTTP request to my app comm slash my

00:10:26,310 --> 00:10:30,240
model it's gonna give me a list of the

00:10:28,350 --> 00:10:33,660
instances that's gonna be based on that

00:10:30,240 --> 00:10:37,350
serializer if i do a post to that same

00:10:33,660 --> 00:10:39,000
URL just app comm slash my model then

00:10:37,350 --> 00:10:40,860
it's gonna create a new instance it's

00:10:39,000 --> 00:10:44,850
gonna expect me to be passing the data

00:10:40,860 --> 00:10:49,440
to create a new instance if I do a get

00:10:44,850 --> 00:10:50,910
to my model slash an ID number then it's

00:10:49,440 --> 00:10:53,310
going to get me the details for the

00:10:50,910 --> 00:10:56,940
instance that has that ID if I do a

00:10:53,310 --> 00:10:58,590
delete to that same detail URL then it's

00:10:56,940 --> 00:11:00,390
going to delete that instance these are

00:10:58,590 --> 00:11:02,100
not this is not an exhaustive list of

00:11:00,390 --> 00:11:03,360
the ways you can do it it's just a

00:11:02,100 --> 00:11:06,540
sample to give you an idea of how this

00:11:03,360 --> 00:11:08,700
works more detail can be found Django

00:11:06,540 --> 00:11:13,170
rest framework documentation which I put

00:11:08,700 --> 00:11:14,550
a link to here so what if you don't want

00:11:13,170 --> 00:11:15,990
your users doing all this maybe you

00:11:14,550 --> 00:11:17,610
don't want your users directly having

00:11:15,990 --> 00:11:19,440
access to delete instances

00:11:17,610 --> 00:11:21,600
well there's different options you can

00:11:19,440 --> 00:11:24,960
either put a layer of authentication on

00:11:21,600 --> 00:11:26,940
top that layer of authentication will

00:11:24,960 --> 00:11:29,910
use the same authentication as your

00:11:26,940 --> 00:11:31,590
Jango user model so if you want to

00:11:29,910 --> 00:11:32,940
restrict access you can restrict access

00:11:31,590 --> 00:11:35,310
in exactly the same way you've already

00:11:32,940 --> 00:11:38,070
got it restricted on your templates and

00:11:35,310 --> 00:11:39,540
so on so whatever a user doesn't have

00:11:38,070 --> 00:11:41,300
access to normally they won't have

00:11:39,540 --> 00:11:44,520
access to through Django rest framework

00:11:41,300 --> 00:11:46,620
you also can do just read-only view sets

00:11:44,520 --> 00:11:49,350
Django has built-in read-only view sets

00:11:46,620 --> 00:11:51,720
so if you want to let people access

00:11:49,350 --> 00:11:54,960
information but not update anything or

00:11:51,720 --> 00:11:57,660
delete anything that's a one-line change

00:11:54,960 --> 00:11:59,490
from what I've just showed you and you

00:11:57,660 --> 00:12:01,110
can also restrict specific actions so

00:11:59,490 --> 00:12:03,930
maybe the only thing you don't want

00:12:01,110 --> 00:12:06,450
users doing is deleting you can just

00:12:03,930 --> 00:12:08,760
restrict that specific action at the

00:12:06,450 --> 00:12:10,710
view set level and all of this

00:12:08,760 --> 00:12:13,050
information again Django rest framework

00:12:10,710 --> 00:12:15,180
has fantastic documentation about how to

00:12:13,050 --> 00:12:16,350
customize all these different things but

00:12:15,180 --> 00:12:20,520
I'm just trying to give you an idea of

00:12:16,350 --> 00:12:22,350
what the power of this is speaking of

00:12:20,520 --> 00:12:24,300
documentation your API will need

00:12:22,350 --> 00:12:26,610
documentation because nobody's gonna be

00:12:24,300 --> 00:12:29,010
able to make use of it if they don't

00:12:26,610 --> 00:12:31,170
have any documentation of it this is key

00:12:29,010 --> 00:12:33,150
to usability even if you're only using

00:12:31,170 --> 00:12:36,630
it internally your developers will thank

00:12:33,150 --> 00:12:38,370
you if you have documentation but

00:12:36,630 --> 00:12:39,840
there's a very specific structure that

00:12:38,370 --> 00:12:42,300
we need here this isn't going to be

00:12:39,840 --> 00:12:43,950
highly variable because this API is

00:12:42,300 --> 00:12:45,750
gonna be constructed the same way over

00:12:43,950 --> 00:12:48,810
and over again you'll need to give the

00:12:45,750 --> 00:12:50,760
URL and HTTP method what operation is

00:12:48,810 --> 00:12:53,580
performed when you hit that URL with

00:12:50,760 --> 00:12:55,920
that method what parameters it expects

00:12:53,580 --> 00:13:00,030
to receive and what data format will be

00:12:55,920 --> 00:13:03,420
returned Django rest framework will do

00:13:00,030 --> 00:13:07,620
this for you too so you can just create

00:13:03,420 --> 00:13:10,080
a Doc's URL in your URL spy and do

00:13:07,620 --> 00:13:12,300
include Doc's URLs imported straight

00:13:10,080 --> 00:13:14,820
from Django rest framework and it will

00:13:12,300 --> 00:13:21,030
create your API documentation at that

00:13:14,820 --> 00:13:22,680
URL and you are off and running I hope

00:13:21,030 --> 00:13:24,630
that you also are sitting here thinking

00:13:22,680 --> 00:13:27,330
about how will I test this because we

00:13:24,630 --> 00:13:29,870
all should be testing our code

00:13:27,330 --> 00:13:31,920
and that also is easy with this so

00:13:29,870 --> 00:13:33,180
automated tests give you the ability to

00:13:31,920 --> 00:13:35,490
just set it and forget it

00:13:33,180 --> 00:13:38,580
they get run when you run your regular

00:13:35,490 --> 00:13:42,330
test suite and if something breaks for

00:13:38,580 --> 00:13:43,860
some reason then that'll catch it test

00:13:42,330 --> 00:13:45,600
filters can also highlight changes that

00:13:43,860 --> 00:13:48,290
should be reflected in documentation if

00:13:45,600 --> 00:13:51,870
you have done any custom documentation

00:13:48,290 --> 00:13:53,940
so here's some sample tests in this case

00:13:51,870 --> 00:13:56,010
I'm using the API test case that comes

00:13:53,940 --> 00:13:58,200
with Django rest framework it is built

00:13:56,010 --> 00:14:01,170
on the Django test case and is very very

00:13:58,200 --> 00:14:02,760
similar you can also use the Django test

00:14:01,170 --> 00:14:05,280
case directly if you don't want to try

00:14:02,760 --> 00:14:07,920
to learn something new there's very

00:14:05,280 --> 00:14:09,870
little that's different from between

00:14:07,920 --> 00:14:13,860
this and if you use the Django test case

00:14:09,870 --> 00:14:16,830
directly so I have a setup function here

00:14:13,860 --> 00:14:19,710
where I define my URL I'm doing a

00:14:16,830 --> 00:14:22,770
reverse on my model - list and that's

00:14:19,710 --> 00:14:24,420
gonna give me that base URL this is the

00:14:22,770 --> 00:14:28,230
namespace that Django rest framework

00:14:24,420 --> 00:14:32,430
gives to it just as if you had put a

00:14:28,230 --> 00:14:33,870
name equals in a regular URL and then

00:14:32,430 --> 00:14:35,880
I'm just going to create some instances

00:14:33,870 --> 00:14:37,890
for the purposes of my testing so I'm

00:14:35,880 --> 00:14:41,250
just gonna run through and create a

00:14:37,890 --> 00:14:44,210
couple of instances and then I've got a

00:14:41,250 --> 00:14:46,620
test list view here so now I'm gonna go

00:14:44,210 --> 00:14:49,790
do itself that client dog yet just like

00:14:46,620 --> 00:14:53,040
I would in regular Django test case

00:14:49,790 --> 00:14:56,820
point at the URL tell the format is JSON

00:14:53,040 --> 00:14:58,590
because this is all jason and then I'm

00:14:56,820 --> 00:15:00,900
gonna do I'm gonna start equal that the

00:14:58,590 --> 00:15:03,930
response status code is a 200 because

00:15:00,900 --> 00:15:06,330
this is a yet so I'm expecting I'm not

00:15:03,930 --> 00:15:07,920
creating anything it should just give me

00:15:06,330 --> 00:15:10,740
a 200 back and then I'm gonna assert

00:15:07,920 --> 00:15:12,420
that the length of response data is 3

00:15:10,740 --> 00:15:13,980
and response data is one of those little

00:15:12,420 --> 00:15:16,020
things that you get with the rest

00:15:13,980 --> 00:15:18,440
framework test case that you don't get

00:15:16,020 --> 00:15:20,730
directly with the Django test case

00:15:18,440 --> 00:15:23,720
that's just gonna pull out the data

00:15:20,730 --> 00:15:25,680
section specifically from the response

00:15:23,720 --> 00:15:28,110
so I can just make sure that there are

00:15:25,680 --> 00:15:29,430
three objects in that response data you

00:15:28,110 --> 00:15:31,470
can also check and make sure that the

00:15:29,430 --> 00:15:34,890
data is looking like you would expect it

00:15:31,470 --> 00:15:37,440
to look but I wanted to keep things

00:15:34,890 --> 00:15:40,050
simple for purposes of this a couple

00:15:37,440 --> 00:15:42,839
more samples testing creation is

00:15:40,050 --> 00:15:44,790
very similar in this case I'm checking

00:15:42,839 --> 00:15:47,399
to make sure I get a 201 because it will

00:15:44,790 --> 00:15:49,050
have created an object again you can

00:15:47,399 --> 00:15:50,790
also check to make sure that the

00:15:49,050 --> 00:15:53,450
attributes are what you expect at this

00:15:50,790 --> 00:15:55,890
point and then testing the detail view

00:15:53,450 --> 00:15:59,130
I'm showing this primarily because I

00:15:55,890 --> 00:16:02,459
want to show you how I would affect that

00:15:59,130 --> 00:16:04,500
URL so I'm just grabbing any one of the

00:16:02,459 --> 00:16:05,640
objects I created just grabbing the

00:16:04,500 --> 00:16:09,600
first one that comes out of the database

00:16:05,640 --> 00:16:12,990
at random and then creating my detail

00:16:09,600 --> 00:16:15,029
detail URL by slapping that ID onto the

00:16:12,990 --> 00:16:16,890
end of it and then I can do the exact

00:16:15,029 --> 00:16:20,310
same thing just do a self dot client get

00:16:16,890 --> 00:16:23,940
at what's now my detail URL and again

00:16:20,310 --> 00:16:24,360
make sure that I get a 200 response all

00:16:23,940 --> 00:16:28,529
right

00:16:24,360 --> 00:16:32,790
so that is it we have just built an

00:16:28,529 --> 00:16:35,070
entire API on top of presumably some

00:16:32,790 --> 00:16:37,019
Django application you already had so

00:16:35,070 --> 00:16:38,700
your homework is to think about what

00:16:37,019 --> 00:16:39,839
Django projects do you have live what

00:16:38,700 --> 00:16:41,850
Django projects do you have in

00:16:39,839 --> 00:16:44,520
development that you could add an API

00:16:41,850 --> 00:16:46,829
layer to do they have public information

00:16:44,520 --> 00:16:48,570
that is a fantastic place for an API

00:16:46,829 --> 00:16:51,329
because you'd be amazed what people can

00:16:48,570 --> 00:16:53,130
pull out of public information they have

00:16:51,329 --> 00:16:54,720
collections of user data those users

00:16:53,130 --> 00:16:56,220
might want access to that data in

00:16:54,720 --> 00:16:59,550
different ways think back to that

00:16:56,220 --> 00:17:01,560
massage therapist example he wanted

00:16:59,550 --> 00:17:04,770
access to the data in a way that the

00:17:01,560 --> 00:17:06,540
original developers didn't anticipate if

00:17:04,770 --> 00:17:09,240
you can't think of a use for your data

00:17:06,540 --> 00:17:10,919
in an API format don't worry your users

00:17:09,240 --> 00:17:12,540
will and this is going to give you a

00:17:10,919 --> 00:17:14,010
competitive advantage because again

00:17:12,540 --> 00:17:16,650
think back to that massage therapist

00:17:14,010 --> 00:17:18,449
example if he was using a scheduling

00:17:16,650 --> 00:17:20,280
software that didn't have an API but he

00:17:18,449 --> 00:17:21,990
needed this functionality here's a

00:17:20,280 --> 00:17:24,540
motivation for him to switch to one that

00:17:21,990 --> 00:17:26,880
does have an API so you can have this

00:17:24,540 --> 00:17:29,130
functionality that not many people need

00:17:26,880 --> 00:17:33,419
but he needs it enough that he's willing

00:17:29,130 --> 00:17:36,419
to pay for a custom software solution so

00:17:33,419 --> 00:17:38,100
those little tiny edge cases that you

00:17:36,419 --> 00:17:41,010
don't want to build out because only two

00:17:38,100 --> 00:17:45,270
people are ever gonna use it somebody

00:17:41,010 --> 00:17:47,220
might use it via an API they'll go to

00:17:45,270 --> 00:17:49,740
the effort of building it and then you

00:17:47,220 --> 00:17:52,169
have that kind of lock-in going on

00:17:49,740 --> 00:17:53,390
because you've got that API that makes

00:17:52,169 --> 00:17:56,130
that possible

00:17:53,390 --> 00:17:58,950
so at this point I will take questions

00:17:56,130 --> 00:18:01,350
I've got some resources here again as

00:17:58,950 --> 00:18:02,670
promised the slide link is in the middle

00:18:01,350 --> 00:18:05,990
if you want to look that up for

00:18:02,670 --> 00:18:08,160
reference later Django rest framework

00:18:05,990 --> 00:18:11,370
documentation that example project I

00:18:08,160 --> 00:18:18,270
mentioned these slides cactus group and

00:18:11,370 --> 00:18:21,090
my own Twitter as I walk to a question

00:18:18,270 --> 00:18:22,560
I'll ask one of my own I noticed you

00:18:21,090 --> 00:18:26,160
were talking about the the Browse

00:18:22,560 --> 00:18:28,290
ability is an API - off does that mean

00:18:26,160 --> 00:18:32,630
that there's authentication implied on

00:18:28,290 --> 00:18:34,860
top of it or you can authenticate I

00:18:32,630 --> 00:18:36,420
think that if there's not an

00:18:34,860 --> 00:18:41,340
authentication layer that you can go

00:18:36,420 --> 00:18:42,810
directly to the API URLs I have all of

00:18:41,340 --> 00:18:44,340
the cases when I've used the browsable

00:18:42,810 --> 00:18:45,660
API it's been on one that I did have an

00:18:44,340 --> 00:18:46,850
authentication layer on it so I wasn't

00:18:45,660 --> 00:18:51,770
actually a hundred percent sure on that

00:18:46,850 --> 00:18:56,220
yes thank you nice talk I my question is

00:18:51,770 --> 00:18:59,010
do you version your URL spaces for these

00:18:56,220 --> 00:19:01,770
exported api's typically or do you have

00:18:59,010 --> 00:19:04,380
a use case for that or any experience

00:19:01,770 --> 00:19:06,510
with versioning so you could version if

00:19:04,380 --> 00:19:09,180
you wanted to I would probably not

00:19:06,510 --> 00:19:11,700
recommend it because you're gonna want

00:19:09,180 --> 00:19:14,640
it to stay current with your app and so

00:19:11,700 --> 00:19:16,950
by building it this way it's just gonna

00:19:14,640 --> 00:19:18,900
continuously track with your app the

00:19:16,950 --> 00:19:21,780
only time I would try to version it is

00:19:18,900 --> 00:19:24,060
if there was a model that I was going to

00:19:21,780 --> 00:19:28,170
deprecated or something and then by

00:19:24,060 --> 00:19:30,540
versioning I could indicate okay you

00:19:28,170 --> 00:19:33,810
know this particular URL set is going to

00:19:30,540 --> 00:19:35,700
go away and then therefore transition

00:19:33,810 --> 00:19:37,650
that's the only use case I can think of

00:19:35,700 --> 00:19:40,380
offhand when you might want to version

00:19:37,650 --> 00:19:42,480
it and then in that case that ability to

00:19:40,380 --> 00:19:45,270
register things would give you that

00:19:42,480 --> 00:19:47,690
ability to transition to a new set of

00:19:45,270 --> 00:19:50,220
URLs all right you talked about

00:19:47,690 --> 00:19:52,470
authentication what about authorization

00:19:50,220 --> 00:19:56,550
so if I have access to the get you know

00:19:52,470 --> 00:19:58,860
doing that and I know my user ID is one

00:19:56,550 --> 00:20:02,310
I start poking around and look at two

00:19:58,860 --> 00:20:03,960
and three and four yeah so again you

00:20:02,310 --> 00:20:06,400
know you can look at the logged in user

00:20:03,960 --> 00:20:07,840
you know you have access to request user

00:20:06,400 --> 00:20:12,130
like you would in any other Django

00:20:07,840 --> 00:20:15,210
request and you can have a method in

00:20:12,130 --> 00:20:18,580
that view set that says you know if

00:20:15,210 --> 00:20:20,470
requests don't user does not equal the

00:20:18,580 --> 00:20:24,850
request you know the user that's being

00:20:20,470 --> 00:20:27,310
asked for then permission denied

00:20:24,850 --> 00:20:29,830
that is very easy to implement using

00:20:27,310 --> 00:20:32,560
that authorization hi

00:20:29,830 --> 00:20:35,550
does Django rest framework play well

00:20:32,560 --> 00:20:38,350
with data sources that aren't the ORM

00:20:35,550 --> 00:20:42,610
that's a good question

00:20:38,350 --> 00:20:45,330
I think it would assuming you create

00:20:42,610 --> 00:20:48,130
something stand-in for the serializer

00:20:45,330 --> 00:20:50,050
there is plenty of customization that

00:20:48,130 --> 00:20:51,460
you can do on the serializer so I would

00:20:50,050 --> 00:20:54,610
think that that would be how I would do

00:20:51,460 --> 00:20:57,910
it would be to customize the serializer

00:20:54,610 --> 00:20:59,410
to work with that data source and then

00:20:57,910 --> 00:21:01,120
that would pass it into the view set

00:20:59,410 --> 00:21:02,830
just as if it were any other serialized

00:21:01,120 --> 00:21:05,590
data so I think that's how I would do it

00:21:02,830 --> 00:21:07,720
have you ever regretted exposing an API

00:21:05,590 --> 00:21:09,640
to users because they found something

00:21:07,720 --> 00:21:13,150
you really didn't want them to find or

00:21:09,640 --> 00:21:15,760
because they bombarded you with annoying

00:21:13,150 --> 00:21:19,180
questions I have not ever had that

00:21:15,760 --> 00:21:23,740
experience I will say that in every case

00:21:19,180 --> 00:21:25,780
where authentication mattered for any of

00:21:23,740 --> 00:21:29,920
the data I applied the authentication on

00:21:25,780 --> 00:21:35,530
the API as well and I think that's just

00:21:29,920 --> 00:21:37,150
solid you know data safety in general if

00:21:35,530 --> 00:21:38,800
it's not public data I would have that

00:21:37,150 --> 00:21:41,230
authentication layer and again it

00:21:38,800 --> 00:21:44,620
borrows off of the existing Django

00:21:41,230 --> 00:21:47,790
authentication if model is gonna throw a

00:21:44,620 --> 00:21:50,950
403 when a user requests a particular

00:21:47,790 --> 00:21:52,030
instance then Django rest framework will

00:21:50,950 --> 00:21:54,750
do the same thing as long as you've got

00:21:52,030 --> 00:21:57,940
the authentication turned on hey they're

00:21:54,750 --> 00:22:01,930
two parts first the comment and a

00:21:57,940 --> 00:22:04,330
question okay fine I'm just gonna ignore

00:22:01,930 --> 00:22:05,710
that your talk was awesome out of all

00:22:04,330 --> 00:22:07,870
them I've really looked forward to yours

00:22:05,710 --> 00:22:09,850
then you absolutely killed it my

00:22:07,870 --> 00:22:12,070
interest started on my new project I'm

00:22:09,850 --> 00:22:15,130
working with an API incorporating with a

00:22:12,070 --> 00:22:17,860
jQuery data table anyway asks for the

00:22:15,130 --> 00:22:19,399
question do you know any Django API

00:22:17,860 --> 00:22:21,619
projects that are using

00:22:19,399 --> 00:22:22,519
anoles because I feel they both would

00:22:21,619 --> 00:22:25,999
work well together

00:22:22,519 --> 00:22:28,999
thanks again I have not actually worked

00:22:25,999 --> 00:22:30,679
with channels myself it's something

00:22:28,999 --> 00:22:33,499
that's interesting but I haven't had a

00:22:30,679 --> 00:22:37,729
chance to play with it so I can't really

00:22:33,499 --> 00:22:41,119
speak to that I don't think it would

00:22:37,729 --> 00:22:43,099
work well though because channels are

00:22:41,119 --> 00:22:46,070
designed to maintain that open

00:22:43,099 --> 00:22:48,649
connection and the API is inherently

00:22:46,070 --> 00:22:49,789
asynchronous so I don't think that they

00:22:48,649 --> 00:22:53,539
would play well together

00:22:49,789 --> 00:22:57,109
thanks again are there any is there any

00:22:53,539 --> 00:22:59,989
support for the graphics L or some of

00:22:57,109 --> 00:23:05,059
the query type languages that are built

00:22:59,989 --> 00:23:10,399
on top of you know API the the sort of

00:23:05,059 --> 00:23:12,080
vanilla API with crud as DRF have they

00:23:10,399 --> 00:23:16,029
have thought about it or does it already

00:23:12,080 --> 00:23:21,259
support something like graphics L or the

00:23:16,029 --> 00:23:25,159
more advanced query type API so you can

00:23:21,259 --> 00:23:27,619
get your application to generate you can

00:23:25,159 --> 00:23:29,960
then expose through the API it'll be

00:23:27,619 --> 00:23:32,409
using a custom serializer generally

00:23:29,960 --> 00:23:36,229
again if it's not directly from a model

00:23:32,409 --> 00:23:41,179
but I've done this I've actually built

00:23:36,229 --> 00:23:43,729
an API endpoint that gave you generated

00:23:41,179 --> 00:23:47,809
data as opposed to the direct original

00:23:43,729 --> 00:23:51,080
data so by using that custom serializer

00:23:47,809 --> 00:23:54,049
functionality you can get just about

00:23:51,080 --> 00:23:56,899
anything to go through your API portal

00:23:54,049 --> 00:23:58,820
thanks for the great talk do you

00:23:56,899 --> 00:24:01,759
recommend something like mixer or

00:23:58,820 --> 00:24:04,669
Factory boy in order to generate better

00:24:01,759 --> 00:24:06,950
models for your testing yes absolutely I

00:24:04,669 --> 00:24:08,659
usually use factory boy I did just

00:24:06,950 --> 00:24:13,700
direct creation of models in this case

00:24:08,659 --> 00:24:15,249
just because it was simpler but yeah I

00:24:13,700 --> 00:24:18,120
usually use factory boy to create

00:24:15,249 --> 00:24:26,079
instances all right thank you very much

00:24:18,120 --> 00:24:26,079

YouTube URL: https://www.youtube.com/watch?v=-6tR5TffP0w


