Title: DjangoCon US 2017 -  Type UWSGI; Press Enter; What Happens? by Philip James
Publication date: 2017-09-07
Playlist: DjangoCon US 2017
Description: 
	This talk is aiming right at professional or experienced amateur Django developers who want to learn about one of the core technologies used in modern web apps. Weâ€™ll do our best to make it accessible for all, but itâ€™s going to be best to come in with working knowledge of web applications and a rough understanding of web servers.

Weâ€™ll be covering how uWSGI serves Python web applications, how it manages workers and processes, and how it works with the operating system to handle networking. Our goal is to show how this works both in code and through abstractions, recognizing that different audience members are going to grasp things in different ways.

The hope is that attendees will walk away with a working of knowledge of how their apps interact with the network and the operating system through uWSGI, and that a commonly-used but less-understood piece of software will become demystified.

This talk was presented at: https://2017.djangocon.us/talks/type-uwsgi-press-enter-what-happens/

LINKS:
Follow Philip James ðŸ‘‡
On Twitter: https://twitter.com/phildini
Official homepage: http://phildini.net

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:15,790
[Music]

00:00:13,560 --> 00:00:17,740
you very much welcome to type you

00:00:15,790 --> 00:00:18,640
whiskey press enter what happens if this

00:00:17,740 --> 00:00:20,920
is the talk you're here for

00:00:18,640 --> 00:00:22,480
congratulations if not you're totally

00:00:20,920 --> 00:00:23,529
free believe and in fact to give you

00:00:22,480 --> 00:00:25,270
that opportunity I'm gonna ask you all

00:00:23,529 --> 00:00:26,740
to do three things for me real quick

00:00:25,270 --> 00:00:28,300
first thing I ask everybody to do it's

00:00:26,740 --> 00:00:32,590
late in the day everybody stand up real

00:00:28,300 --> 00:00:34,480
quick we're just gonna get we're gonna

00:00:32,590 --> 00:00:37,899
get ready for the talk put please place

00:00:34,480 --> 00:00:42,340
your hand over your heart take a step to

00:00:37,899 --> 00:00:44,410
the left fantastic now you can say that

00:00:42,340 --> 00:00:49,420
if no matter else what happens the talk

00:00:44,410 --> 00:00:51,310
was uplifting heartwarming and moving so

00:00:49,420 --> 00:00:53,080
let's say you've built a django app

00:00:51,310 --> 00:00:54,310
you're ready to share it with the world

00:00:53,080 --> 00:00:56,290
you tell your friends about it and they

00:00:54,310 --> 00:00:58,030
think hey this thing is really great but

00:00:56,290 --> 00:00:59,260
when you deploy it when you put it up

00:00:58,030 --> 00:01:00,970
for the world you shouldn't be using

00:00:59,260 --> 00:01:03,820
jingle runs server you should be using

00:01:00,970 --> 00:01:05,740
you whiskey you whiskey you say what's

00:01:03,820 --> 00:01:07,570
you whiskey and you're clever developer

00:01:05,740 --> 00:01:09,850
so you go and look at the you whiskey

00:01:07,570 --> 00:01:12,210
project documentation and it says things

00:01:09,850 --> 00:01:14,650
about being a proxy it says things about

00:01:12,210 --> 00:01:16,299
taking care of protocols and managing

00:01:14,650 --> 00:01:18,819
processes that you could apparently

00:01:16,299 --> 00:01:21,100
write plug-ins and C C++ and Objective C

00:01:18,819 --> 00:01:23,439
and this seems very informative but it

00:01:21,100 --> 00:01:26,469
doesn't answer the fundamental questions

00:01:23,439 --> 00:01:28,149
you have about what is you whisky what's

00:01:26,469 --> 00:01:29,979
it doing and why should you use it and

00:01:28,149 --> 00:01:32,920
those are the questions we're going to

00:01:29,979 --> 00:01:34,960
try to answer today how does your whisky

00:01:32,920 --> 00:01:37,090
handle processes from the operating

00:01:34,960 --> 00:01:38,439
system level how does he whiskey handle

00:01:37,090 --> 00:01:40,689
networking from the operating system

00:01:38,439 --> 00:01:42,700
level and then why should you use you

00:01:40,689 --> 00:01:45,630
whisky and to tell you that I'm gonna

00:01:42,700 --> 00:01:48,100
tell you about like why I use you whisky

00:01:45,630 --> 00:01:49,749
my name is Phillip James if you were at

00:01:48,100 --> 00:01:52,149
Django Caan last year you might remember

00:01:49,749 --> 00:01:55,090
my talk frog and toad learn about Django

00:01:52,149 --> 00:01:57,249
security if you've been to other pythons

00:01:55,090 --> 00:02:00,039
you may have seen another talk of mine

00:01:57,249 --> 00:02:04,119
type Python press enter what happens and

00:02:00,039 --> 00:02:06,009
in that talk I went through the what it

00:02:04,119 --> 00:02:07,420
was on the box what happens from the

00:02:06,009 --> 00:02:09,179
operating system level when you type

00:02:07,420 --> 00:02:11,650
Python and press Enter

00:02:09,179 --> 00:02:13,660
you may be aware that if you type Python

00:02:11,650 --> 00:02:16,240
at Python and press ENTER you get the

00:02:13,660 --> 00:02:17,530
prompt at the terminal but what is the

00:02:16,240 --> 00:02:18,190
operating system doing under the hood to

00:02:17,530 --> 00:02:21,070
make that happen

00:02:18,190 --> 00:02:22,570
and so in that talk we talked about how

00:02:21,070 --> 00:02:24,250
there are these things called proxies

00:02:22,570 --> 00:02:26,910
and a process that you might use to

00:02:24,250 --> 00:02:29,800
start python as a process called bash

00:02:26,910 --> 00:02:31,750
Bosch starts the Python process by

00:02:29,800 --> 00:02:33,850
making a copy of itself and then

00:02:31,750 --> 00:02:36,790
changing that copy to the Python process

00:02:33,850 --> 00:02:40,630
through a technique known as forking and

00:02:36,790 --> 00:02:42,280
execu and that process gets access to

00:02:40,630 --> 00:02:44,470
these things called file descriptors

00:02:42,280 --> 00:02:46,990
which are the mechanisms that are used

00:02:44,470 --> 00:02:48,700
by the Python process for input and

00:02:46,990 --> 00:02:50,290
output for you to communicate with

00:02:48,700 --> 00:02:53,020
Python and for Python to communicate

00:02:50,290 --> 00:02:55,330
with you and that's the basis for our

00:02:53,020 --> 00:02:57,760
starting point here of how does he

00:02:55,330 --> 00:02:59,080
whiskey handle processes and to talk

00:02:57,760 --> 00:03:02,200
about that we're going to talk about an

00:02:59,080 --> 00:03:03,880
app that I created a while back I

00:03:02,200 --> 00:03:05,709
couldn't find it anywhere else in the

00:03:03,880 --> 00:03:09,400
internet I was really surprised but cats

00:03:05,709 --> 00:03:12,010
served cats as a service if you are in

00:03:09,400 --> 00:03:13,480
need of a cats as a service in your life

00:03:12,010 --> 00:03:15,520
there's a github link that you can go

00:03:13,480 --> 00:03:22,110
check out but the app is pretty simple

00:03:15,520 --> 00:03:25,060
you go to cat serve and you get a cat

00:03:22,110 --> 00:03:26,470
now I did some digging because some

00:03:25,060 --> 00:03:28,690
people told me to use you whiskey when

00:03:26,470 --> 00:03:32,530
deploying this and so I found a u.s. key

00:03:28,690 --> 00:03:37,090
incantation that would let me run this

00:03:32,530 --> 00:03:39,760
app from my server type u whiskey press

00:03:37,090 --> 00:03:42,580
enter what happens and what happens if

00:03:39,760 --> 00:03:43,810
you do this incantation for you whiskey

00:03:42,580 --> 00:03:45,760
and actually quick show of hands how

00:03:43,810 --> 00:03:49,180
many people have used you whiskey before

00:03:45,760 --> 00:03:50,230
ever in any context okay of those people

00:03:49,180 --> 00:03:51,820
who have their hands raised

00:03:50,230 --> 00:03:54,610
how many will knew that knew that you

00:03:51,820 --> 00:03:54,970
could run you whiskey from the command

00:03:54,610 --> 00:03:57,489
line

00:03:54,970 --> 00:03:59,320
just like blank commandlineoptions okay

00:03:57,489 --> 00:04:01,420
not as many and that was a realization

00:03:59,320 --> 00:04:03,730
for many of us as well is that you

00:04:01,420 --> 00:04:06,400
whiskey like many things on UNIX systems

00:04:03,730 --> 00:04:08,350
is a command you can run it the way that

00:04:06,400 --> 00:04:10,690
you would run it outside of a daemon and

00:04:08,350 --> 00:04:12,250
so if you type you whiskey and press

00:04:10,690 --> 00:04:15,340
Enter with these in Kente with this

00:04:12,250 --> 00:04:17,739
particular options you get this a bunch

00:04:15,340 --> 00:04:19,390
of output we've condensed some of it and

00:04:17,739 --> 00:04:20,950
the line that I really want to point out

00:04:19,390 --> 00:04:22,840
here is that line at the bottom spawned

00:04:20,950 --> 00:04:24,610
you whiskey worker 1 and it has this

00:04:22,840 --> 00:04:25,810
thing called a PID now you might

00:04:24,610 --> 00:04:28,720
remember from our previous slide that

00:04:25,810 --> 00:04:32,890
Bash and Python had pids those are the

00:04:28,720 --> 00:04:35,620
process IDs and this line is U whiskey

00:04:32,890 --> 00:04:37,690
telling you hey I have spawned one

00:04:35,620 --> 00:04:40,600
worker one thing that is going to run

00:04:37,690 --> 00:04:43,030
your app and there's the process ID

00:04:40,600 --> 00:04:44,530
where you can find it and so what that

00:04:43,030 --> 00:04:46,600
looks like if we were to diagram it a

00:04:44,530 --> 00:04:49,690
bit is there is this u whiskey process

00:04:46,600 --> 00:04:52,990
that you have started u whiskey forks

00:04:49,690 --> 00:04:54,610
itself and execs your Python app to make

00:04:52,990 --> 00:05:00,190
this running Python process running your

00:04:54,610 --> 00:05:03,730
app and when a request comes in now that

00:05:00,190 --> 00:05:06,880
worker is busy and it's serving your

00:05:03,730 --> 00:05:08,680
requests and that's great but we wanted

00:05:06,880 --> 00:05:10,420
to add an extra special feature to this

00:05:08,680 --> 00:05:13,810
web app you know we've been hearing a

00:05:10,420 --> 00:05:16,390
lot about machine learning we really

00:05:13,810 --> 00:05:18,990
want to be able to serve you the best

00:05:16,390 --> 00:05:21,760
cat not just any cat but the best cat

00:05:18,990 --> 00:05:24,490
specifically tailored for you so I put a

00:05:21,760 --> 00:05:26,410
bunch of tracking pixels all across the

00:05:24,490 --> 00:05:28,720
internet to collect data on what was

00:05:26,410 --> 00:05:30,370
going to be the best cat for you and we

00:05:28,720 --> 00:05:33,040
put this behind this beta feature and we

00:05:30,370 --> 00:05:36,070
we tried really hard but we couldn't get

00:05:33,040 --> 00:05:38,680
the time to load the beta best cat for

00:05:36,070 --> 00:05:39,700
you under 10 seconds we think we could

00:05:38,680 --> 00:05:42,370
maybe do better in the future but right

00:05:39,700 --> 00:05:45,880
now the page takes 10 seconds and that's

00:05:42,370 --> 00:05:49,300
a bit of a problem because as we see

00:05:45,880 --> 00:05:50,890
here if I'm loading the beta which you

00:05:49,300 --> 00:05:53,050
can see and then I try to load the

00:05:50,890 --> 00:05:55,270
normal home page well the home page used

00:05:53,050 --> 00:05:58,480
to load really fast and now it's not and

00:05:55,270 --> 00:06:00,310
in fact if we wait the full 10 seconds

00:05:58,480 --> 00:06:03,340
we'll see that it's only after the beta

00:06:00,310 --> 00:06:06,940
page loads with this highly tailored cat

00:06:03,340 --> 00:06:09,220
for you that the normal home page cat

00:06:06,940 --> 00:06:11,110
loads and that's really not what we want

00:06:09,220 --> 00:06:13,540
you know it we don't want the beta

00:06:11,110 --> 00:06:17,140
feature to be basically making the rest

00:06:13,540 --> 00:06:20,650
of our app worse and so what we need to

00:06:17,140 --> 00:06:23,860
do is have you whiskey start more than

00:06:20,650 --> 00:06:26,170
one process for Django apps especially

00:06:23,860 --> 00:06:27,790
you every time if you want to be able to

00:06:26,170 --> 00:06:31,090
serve multiple requests at the same time

00:06:27,790 --> 00:06:33,430
you need to be having Django run with

00:06:31,090 --> 00:06:36,880
multiple processes and so here we've

00:06:33,430 --> 00:06:38,290
added this - P - to the end of the

00:06:36,880 --> 00:06:40,300
command that we're using to run your

00:06:38,290 --> 00:06:43,240
whiskey and you whiskey tells us that

00:06:40,300 --> 00:06:45,400
spawned not just one but two you whiskey

00:06:43,240 --> 00:06:50,200
workers with two different process IDs

00:06:45,400 --> 00:06:51,700
and so if we go back to our beta we'll

00:06:50,200 --> 00:06:53,560
see that we can have the beta loading in

00:06:51,700 --> 00:06:54,160
one window and the homepage now loads

00:06:53,560 --> 00:06:57,450
independent

00:06:54,160 --> 00:07:00,700
li hooray we've that fixed our app again

00:06:57,450 --> 00:07:02,140
going back to the diagram the way this

00:07:00,700 --> 00:07:05,730
works is when you is give forks and

00:07:02,140 --> 00:07:09,760
execs it forks in execs to processes and

00:07:05,730 --> 00:07:12,100
so while one is busy serving the beta

00:07:09,760 --> 00:07:14,410
page the other one can be serving our

00:07:12,100 --> 00:07:18,780
homepage and our users still get a

00:07:14,410 --> 00:07:21,400
pretty good experience so that is

00:07:18,780 --> 00:07:24,790
basically the core of how you whiskey

00:07:21,400 --> 00:07:27,790
and realistically any other Python web

00:07:24,790 --> 00:07:31,390
app server like gee unicorn or some of

00:07:27,790 --> 00:07:32,860
the mod libraries for nginx or Apache

00:07:31,390 --> 00:07:36,220
are going to handle this they're gonna

00:07:32,860 --> 00:07:38,770
fork multiple processes and route

00:07:36,220 --> 00:07:41,050
requests to each of those different

00:07:38,770 --> 00:07:43,030
processes but let's talk about what I

00:07:41,050 --> 00:07:47,050
mean when I say routing requests to

00:07:43,030 --> 00:07:50,110
those different processes so if we go

00:07:47,050 --> 00:07:51,580
back to that command I'm passing in HTTP

00:07:50,110 --> 00:07:54,310
8,000 and that's telling you whiskey I

00:07:51,580 --> 00:07:56,980
want you to run this application on that

00:07:54,310 --> 00:07:58,690
port and so if we look a bit closer

00:07:56,980 --> 00:08:01,150
we're gonna see look at the middle

00:07:58,690 --> 00:08:02,620
section of output now where we see some

00:08:01,150 --> 00:08:04,600
kind of relevant information that us key

00:08:02,620 --> 00:08:10,180
is telling us it's telling us that it's

00:08:04,600 --> 00:08:12,910
bound 8,000 ft for its spawned HTTP 1 on

00:08:10,180 --> 00:08:14,950
a master process 12:20 there's some

00:08:12,910 --> 00:08:16,270
other FDS there and if you remember from

00:08:14,950 --> 00:08:19,030
talking about process at the beginning

00:08:16,270 --> 00:08:22,030
we talked about file descriptors being

00:08:19,030 --> 00:08:24,130
how input and output is connected to

00:08:22,030 --> 00:08:26,230
UNIX processes and you whiskey is giving

00:08:24,130 --> 00:08:28,690
us this hint here that these FDS are the

00:08:26,230 --> 00:08:32,650
file descriptors to these processes that

00:08:28,690 --> 00:08:35,650
are being passed around and bound to let

00:08:32,650 --> 00:08:37,000
us G talk to the internet so let's talk

00:08:35,650 --> 00:08:38,560
a little bit more about that let's say

00:08:37,000 --> 00:08:39,789
you want to connect to a remote server

00:08:38,560 --> 00:08:41,530
and the remote server here is going to

00:08:39,789 --> 00:08:43,510
be a box and the way you connect to

00:08:41,530 --> 00:08:45,790
remote servers through ports the ports

00:08:43,510 --> 00:08:47,020
here are represented as telephone jacks

00:08:45,790 --> 00:08:49,900
because a way that you can think about

00:08:47,020 --> 00:08:51,700
ports on your operating system is that

00:08:49,900 --> 00:08:52,930
they are like telephone lines that are

00:08:51,700 --> 00:08:54,940
waiting for things to connect to them

00:08:52,930 --> 00:08:57,280
and so you want to SSH into this box

00:08:54,940 --> 00:08:59,260
you're probably going to use port 22 if

00:08:57,280 --> 00:09:01,630
you've SSH it into a box ever before

00:08:59,260 --> 00:09:04,150
you've probably used port 22 if you used

00:09:01,630 --> 00:09:06,450
git you've probably used port 22 because

00:09:04,150 --> 00:09:07,600
you've probably use it an ssh mode and

00:09:06,450 --> 00:09:10,899
so

00:09:07,600 --> 00:09:12,759
first thing that SSH is going to do is

00:09:10,899 --> 00:09:15,310
it's going to connect this phone line

00:09:12,759 --> 00:09:18,399
which is our metaphor for a socket it's

00:09:15,310 --> 00:09:21,130
going to connect a socket to port 22 and

00:09:18,399 --> 00:09:22,420
then it's going to use that socket to

00:09:21,130 --> 00:09:23,440
communicate through the port to the

00:09:22,420 --> 00:09:25,959
outside world

00:09:23,440 --> 00:09:29,319
now you whiskey is doing a similar thing

00:09:25,959 --> 00:09:33,160
on port 8000 where it's connecting this

00:09:29,319 --> 00:09:34,779
phone line this socket to port 8000 and

00:09:33,160 --> 00:09:36,490
then using that to communicate and

00:09:34,779 --> 00:09:40,360
accept connections coming in from

00:09:36,490 --> 00:09:43,750
outside there's a little bit more

00:09:40,360 --> 00:09:45,069
complexity but the socket and port

00:09:43,750 --> 00:09:47,800
functions are happening in a space

00:09:45,069 --> 00:09:49,630
called the kernel the kernel is the the

00:09:47,800 --> 00:09:51,009
core of the operating system it's where

00:09:49,630 --> 00:09:52,329
all of the interfacing with hardware

00:09:51,009 --> 00:09:54,069
happens and it turns out if you want to

00:09:52,329 --> 00:09:56,410
do networking you have to interface with

00:09:54,069 --> 00:09:58,930
hardware at some point and the processes

00:09:56,410 --> 00:10:00,009
like SSH D which is running SSH and you

00:09:58,930 --> 00:10:02,560
whiskey which are running your server

00:10:00,009 --> 00:10:04,720
are happening in user bland and there's

00:10:02,560 --> 00:10:05,860
a mechanism for user land processes to

00:10:04,720 --> 00:10:07,720
talk to the kernel and that's through

00:10:05,860 --> 00:10:09,790
sis calls this calls are these special

00:10:07,720 --> 00:10:12,279
functions written in C and normally

00:10:09,790 --> 00:10:16,870
accessed and see that can't I write into

00:10:12,279 --> 00:10:19,540
the kernel let's go a bit deeper let's

00:10:16,870 --> 00:10:21,189
say you're on your computer you're in

00:10:19,540 --> 00:10:24,279
Chrome and you want to connect to your

00:10:21,189 --> 00:10:26,110
your whiskey server on port 8000 well

00:10:24,279 --> 00:10:29,649
you know that port 8000 is going to be

00:10:26,110 --> 00:10:31,269
accessed by the kernel and the first and

00:10:29,649 --> 00:10:33,790
if you whiskey wants to bind itself

00:10:31,269 --> 00:10:35,740
wants to connect to port 8000 so it can

00:10:33,790 --> 00:10:37,300
receive connections first of all the

00:10:35,740 --> 00:10:39,880
first thing you would notice is if you

00:10:37,300 --> 00:10:41,620
were to make this connection from Chrome

00:10:39,880 --> 00:10:43,180
to port 8000 before any of the

00:10:41,620 --> 00:10:44,829
connections have been done you would get

00:10:43,180 --> 00:10:47,319
a connection refused there right because

00:10:44,829 --> 00:10:48,370
there's no port exposed the kernel

00:10:47,319 --> 00:10:50,290
doesn't know what to do with this so it

00:10:48,370 --> 00:10:51,819
just tosses it back at you and so you

00:10:50,290 --> 00:10:53,170
whiskey needs to issue some sis calls to

00:10:51,819 --> 00:10:55,959
kind of get things set up so that it can

00:10:53,170 --> 00:10:57,610
accept requests from your browser the

00:10:55,959 --> 00:10:59,560
first thing it's going to do is issue

00:10:57,610 --> 00:11:03,480
the socket sis call to create that

00:10:59,560 --> 00:11:06,639
telephone line to create that socket and

00:11:03,480 --> 00:11:09,069
it's going to be can pass to that socket

00:11:06,639 --> 00:11:10,600
as a file descriptor because if you're

00:11:09,069 --> 00:11:12,430
familiar with the UNIX philosophy where

00:11:10,600 --> 00:11:15,819
everything needs to be some sort of file

00:11:12,430 --> 00:11:18,610
or at least file like object you whiskey

00:11:15,819 --> 00:11:21,070
needs this file descriptor handle to the

00:11:18,610 --> 00:11:24,340
socket that it's just created

00:11:21,070 --> 00:11:25,510
you is he then calls bind and what bind

00:11:24,340 --> 00:11:27,070
is going to do is going to tell the

00:11:25,510 --> 00:11:28,870
colonel hey I've created the socket

00:11:27,070 --> 00:11:31,300
please connect this socket to the port

00:11:28,870 --> 00:11:34,810
that I specify so it's connected to port

00:11:31,300 --> 00:11:36,820
8000 and then you whiskey is going to

00:11:34,810 --> 00:11:38,200
call listen what listen is going to do

00:11:36,820 --> 00:11:39,850
is it's going to tell the colonel okay

00:11:38,200 --> 00:11:43,090
everything's set up ready to go

00:11:39,850 --> 00:11:44,530
please expose this port 8000 to the

00:11:43,090 --> 00:11:47,800
outside world so that I can start

00:11:44,530 --> 00:11:50,680
accepting connections now it's at this

00:11:47,800 --> 00:11:53,500
point that you whiskey is going to do

00:11:50,680 --> 00:11:55,570
its fork and exec ting to create the

00:11:53,500 --> 00:11:57,820
worker processes and what's interesting

00:11:55,570 --> 00:12:00,580
about forking an exec is when you fork

00:11:57,820 --> 00:12:02,380
an exec a process you get the same file

00:12:00,580 --> 00:12:04,300
descriptor references that the parent

00:12:02,380 --> 00:12:06,070
process had so both the you whiskey

00:12:04,300 --> 00:12:08,500
master process and both worker processes

00:12:06,070 --> 00:12:10,270
have the file descriptor access to the

00:12:08,500 --> 00:12:14,050
socket that was created for port 8000

00:12:10,270 --> 00:12:15,490
and these two worker processes are going

00:12:14,050 --> 00:12:17,530
to call another special assist call

00:12:15,490 --> 00:12:18,790
called a pole weight which is

00:12:17,530 --> 00:12:20,740
effectively these worker processes

00:12:18,790 --> 00:12:22,300
telling the kernel hey we're both

00:12:20,740 --> 00:12:24,070
waiting for a telephone call we're

00:12:22,300 --> 00:12:26,170
waiting by the phone as soon as somebody

00:12:24,070 --> 00:12:30,520
calls the phone we're ready to pick it

00:12:26,170 --> 00:12:37,470
up so now you can make your request from

00:12:30,520 --> 00:12:37,470
chrome against port 8000 the phone rings

00:12:38,460 --> 00:12:44,890
and both processes try to pick it up at

00:12:42,460 --> 00:12:46,210
the same time they both have access to

00:12:44,890 --> 00:12:48,160
the file descriptor and they're both

00:12:46,210 --> 00:12:51,100
going to reach for the phone but they

00:12:48,160 --> 00:12:53,350
can't both answer the phone that one of

00:12:51,100 --> 00:12:55,150
them is going to win first they're both

00:12:53,350 --> 00:12:56,980
going to try to call except to both try

00:12:55,150 --> 00:12:59,230
to pick up that phone at the same time

00:12:56,980 --> 00:13:01,210
but only one is going to win and the one

00:12:59,230 --> 00:13:02,920
that wins is going to get a new socket

00:13:01,210 --> 00:13:04,450
which represents the connection from

00:13:02,920 --> 00:13:06,880
port 8 that from chrome through port

00:13:04,450 --> 00:13:10,510
8000 to the Python worker process and

00:13:06,880 --> 00:13:13,720
it's now going to be handling the

00:13:10,510 --> 00:13:16,180
request while the other Python process

00:13:13,720 --> 00:13:18,550
issues the e-poll Waits this call again

00:13:16,180 --> 00:13:20,170
letting the kernel know hey so the other

00:13:18,550 --> 00:13:22,330
guy won the first time but if a new

00:13:20,170 --> 00:13:25,810
request comes in I'm totally ready for

00:13:22,330 --> 00:13:28,210
it and that was a very long complicated

00:13:25,810 --> 00:13:30,400
diagram but that's basically the core of

00:13:28,210 --> 00:13:33,610
it through a combination of sis calls

00:13:30,400 --> 00:13:34,259
and sockets you whiskey sets up a

00:13:33,610 --> 00:13:36,779
connection

00:13:34,259 --> 00:13:39,239
and then passes that reference to that

00:13:36,779 --> 00:13:40,949
connection to its worker processes its

00:13:39,239 --> 00:13:42,600
child worker processes and those child

00:13:40,949 --> 00:13:46,949
worker processes accept the connection

00:13:42,600 --> 00:13:48,779
to handle the request so now we get into

00:13:46,949 --> 00:13:50,459
now that we've talked about how you

00:13:48,779 --> 00:13:51,689
whiskey handles processes and we've

00:13:50,459 --> 00:13:53,249
covered a bit about how you whiskey

00:13:51,689 --> 00:13:56,459
handles networking for handling requests

00:13:53,249 --> 00:13:57,929
why would you use you whiskey and the

00:13:56,459 --> 00:14:01,079
first couple things that I'm gonna talk

00:13:57,929 --> 00:14:03,059
about are not really specific to you

00:14:01,079 --> 00:14:06,959
whiskey they're kind of applicable to

00:14:03,059 --> 00:14:08,189
any Python application server but a

00:14:06,959 --> 00:14:10,709
couple are going to be specific to you

00:14:08,189 --> 00:14:12,809
whiskey and I'll call those out so the

00:14:10,709 --> 00:14:15,239
first thing is code reloading this is

00:14:12,809 --> 00:14:19,559
something that the Django run server

00:14:15,239 --> 00:14:21,779
really can't do if you are trying to

00:14:19,559 --> 00:14:23,069
deploy a new version of your code you've

00:14:21,779 --> 00:14:25,079
got code running on a server so you want

00:14:23,069 --> 00:14:27,119
to apply a new version you want to be

00:14:25,079 --> 00:14:28,799
able to deploy that version without

00:14:27,119 --> 00:14:29,970
shutting down your entire server and

00:14:28,799 --> 00:14:31,049
bringing or shutting down the

00:14:29,970 --> 00:14:33,119
application so everyone bringing it all

00:14:31,049 --> 00:14:34,589
the way back up so when you whiskey

00:14:33,119 --> 00:14:37,319
detects that there's a new code to be

00:14:34,589 --> 00:14:39,569
run when you tell it hey I would like to

00:14:37,319 --> 00:14:42,029
change out the code on the workers it

00:14:39,569 --> 00:14:45,600
sends a signal to its worker processes

00:14:42,029 --> 00:14:47,100
the hang-up signal sig hub telling the

00:14:45,600 --> 00:14:50,759
workers hey as soon as you're done

00:14:47,100 --> 00:14:52,259
please exit and reload yourself and so

00:14:50,759 --> 00:14:54,449
in this example we've got one worker

00:14:52,259 --> 00:14:56,220
that's busy both workers get the sick

00:14:54,449 --> 00:14:57,600
HUP so you know one isn't busy and so

00:14:56,220 --> 00:15:00,600
the one that isn't busy shuts down

00:14:57,600 --> 00:15:03,299
immediately the one that is busy kind of

00:15:00,600 --> 00:15:05,039
gets a little notification indicated by

00:15:03,299 --> 00:15:07,079
the power symbol hey when you're done

00:15:05,039 --> 00:15:08,759
processing your current request you

00:15:07,079 --> 00:15:11,759
should shut down because you need to be

00:15:08,759 --> 00:15:13,589
reloaded it completes its request it

00:15:11,759 --> 00:15:16,079
notices that oh I should refresh myself

00:15:13,589 --> 00:15:19,169
it also shuts down now notice throughout

00:15:16,079 --> 00:15:21,119
this entire process you whiskey held on

00:15:19,169 --> 00:15:22,019
to that socket that was connected to the

00:15:21,119 --> 00:15:24,209
outside world

00:15:22,019 --> 00:15:25,980
so you whiskey didn't never dropped a

00:15:24,209 --> 00:15:27,539
connection more connections might have

00:15:25,980 --> 00:15:30,119
been added to the queue during that time

00:15:27,539 --> 00:15:31,289
but you whiskey was always maintaining

00:15:30,119 --> 00:15:32,909
its presence to the outside world so

00:15:31,289 --> 00:15:35,039
from the users point of view it may have

00:15:32,909 --> 00:15:38,819
been a little slower but they never got

00:15:35,039 --> 00:15:40,499
the connection refused so that's reason

00:15:38,819 --> 00:15:42,419
number one you might use you whiskey but

00:15:40,499 --> 00:15:46,109
that's pretty common reason number two

00:15:42,419 --> 00:15:48,030
to nobility earlier we noticed that when

00:15:46,109 --> 00:15:51,840
we were running our beta feature

00:15:48,030 --> 00:15:53,760
we needed more than one process in order

00:15:51,840 --> 00:15:55,110
to serve our application well and not

00:15:53,760 --> 00:15:58,890
have any users be blocked on our beta

00:15:55,110 --> 00:16:01,830
feature but why two processes why not 20

00:15:58,890 --> 00:16:03,600
why not 200 and the answer is you whisky

00:16:01,830 --> 00:16:06,270
will let you spawn as many worker

00:16:03,600 --> 00:16:07,710
processes as you reasonably want but

00:16:06,270 --> 00:16:10,170
there's going to be a right number of

00:16:07,710 --> 00:16:13,320
worker processes for your system in my

00:16:10,170 --> 00:16:17,010
testing a Python application worker

00:16:13,320 --> 00:16:18,600
takes about 200 megabytes of RAM if your

00:16:17,010 --> 00:16:19,560
machine has about 2 gigabytes of RAM

00:16:18,600 --> 00:16:21,210
because you're running a small server

00:16:19,560 --> 00:16:22,440
may be the right number for you is 10 or

00:16:21,210 --> 00:16:24,660
8 if you want to give some wiggle room

00:16:22,440 --> 00:16:27,180
but the important note here is that you

00:16:24,660 --> 00:16:29,280
whiskey lets you tune basically every

00:16:27,180 --> 00:16:34,440
parameter you can think of to match what

00:16:29,280 --> 00:16:37,500
your system needs again this one we

00:16:34,440 --> 00:16:38,760
think you whiskey makes it easier but

00:16:37,500 --> 00:16:40,820
it's also something you can do with

00:16:38,760 --> 00:16:45,360
unicorn in a bunch of the others

00:16:40,820 --> 00:16:47,910
security there's a very so overall the

00:16:45,360 --> 00:16:50,550
Django team does an incredible job with

00:16:47,910 --> 00:16:52,589
security in any part of the framework

00:16:50,550 --> 00:16:55,110
that you would use on a regular basis

00:16:52,589 --> 00:16:56,700
that actually kind of run composes the

00:16:55,110 --> 00:16:58,920
application they are very quick to

00:16:56,700 --> 00:17:02,310
respond to security holes they release

00:16:58,920 --> 00:17:03,930
patches quickly but there is one area of

00:17:02,310 --> 00:17:06,900
the Django codebase where they have said

00:17:03,930 --> 00:17:09,180
quite explicitly they will not do any

00:17:06,900 --> 00:17:11,900
sort of security audit or do any sort of

00:17:09,180 --> 00:17:13,829
security patches and that is run server

00:17:11,900 --> 00:17:15,329
directly from the docs run server has

00:17:13,829 --> 00:17:19,260
not guru them through security audits

00:17:15,329 --> 00:17:22,980
and that's how it's gonna stay and that

00:17:19,260 --> 00:17:26,790
might not seem like a huge deal but just

00:17:22,980 --> 00:17:28,800
as a small example this is a the headers

00:17:26,790 --> 00:17:30,030
from an HTTP request right if you're

00:17:28,800 --> 00:17:30,960
familiar with this this problem makes a

00:17:30,030 --> 00:17:33,510
lot of sense if you're not familiar with

00:17:30,960 --> 00:17:36,900
this brief overview you are getting the

00:17:33,510 --> 00:17:38,790
root page over HTTP 1.1 on host cat

00:17:36,900 --> 00:17:41,610
survey Oh which unfortunately we don't

00:17:38,790 --> 00:17:43,020
own but you're welcome to create it and

00:17:41,610 --> 00:17:46,200
then put our code up on it and that

00:17:43,020 --> 00:17:48,270
would be great and this seems pretty

00:17:46,200 --> 00:17:51,870
straightforward but what if you get a

00:17:48,270 --> 00:17:53,700
request like this what if there is a

00:17:51,870 --> 00:17:55,560
layer of your system that interprets the

00:17:53,700 --> 00:17:56,700
first header but not the second header

00:17:55,560 --> 00:17:59,310
or vice-versa

00:17:56,700 --> 00:18:00,530
now it could be that everything here is

00:17:59,310 --> 00:18:03,980
fine

00:18:00,530 --> 00:18:06,230
but the point to make is that the Django

00:18:03,980 --> 00:18:08,360
team has not thought about this case for

00:18:06,230 --> 00:18:10,880
run server and the you whiskey team has

00:18:08,360 --> 00:18:12,260
and so security is one of those things

00:18:10,880 --> 00:18:13,730
that whenever any somebody says it

00:18:12,260 --> 00:18:14,870
everyone in the room including those

00:18:13,730 --> 00:18:19,130
people who work in security feels

00:18:14,870 --> 00:18:22,190
slightly inadequate it's more that you

00:18:19,130 --> 00:18:23,600
should be focusing your effort on using

00:18:22,190 --> 00:18:25,160
tools that have been vetted by people

00:18:23,600 --> 00:18:27,740
who care about the security of their

00:18:25,160 --> 00:18:29,750
lair and the Django team has enough to

00:18:27,740 --> 00:18:30,800
worry about and so run servers knock on

00:18:29,750 --> 00:18:32,240
through security audits and that's how

00:18:30,800 --> 00:18:35,480
it's going to stay use a different

00:18:32,240 --> 00:18:38,770
application server again pretty common

00:18:35,480 --> 00:18:42,890
not necessarily specific to you whiskey

00:18:38,770 --> 00:18:44,300
another thing that had us key or editor

00:18:42,890 --> 00:18:48,170
application servers have in its favor is

00:18:44,300 --> 00:18:50,030
config files yashoda title of the talk

00:18:48,170 --> 00:18:51,860
is type u whiskey press enter what

00:18:50,030 --> 00:18:53,990
happens but many of you who use you

00:18:51,860 --> 00:18:56,090
whiskey on a daily basis are probably

00:18:53,990 --> 00:18:58,670
more used to seeing a format like this

00:18:56,090 --> 00:19:00,350
that you have in AU whiskey con file

00:18:58,670 --> 00:19:01,910
that you can check in to get you can

00:19:00,350 --> 00:19:03,350
pass around as text files you don't have

00:19:01,910 --> 00:19:05,810
to remember the magical incantation on

00:19:03,350 --> 00:19:07,370
your server you can just point you can

00:19:05,810 --> 00:19:09,980
just run you whiskey pointing it at this

00:19:07,370 --> 00:19:11,240
con file and it will do exactly what you

00:19:09,980 --> 00:19:12,530
wanted to do capture it and that's great

00:19:11,240 --> 00:19:14,240
because you get all the advantages of

00:19:12,530 --> 00:19:16,130
just having a txt configuration file

00:19:14,240 --> 00:19:18,410
that you can again check in to get you

00:19:16,130 --> 00:19:20,060
can do code review on you can iterate on

00:19:18,410 --> 00:19:21,710
overtime and you never have to worry

00:19:20,060 --> 00:19:23,480
about remembering the correct options

00:19:21,710 --> 00:19:25,010
that is a super powerful thing that I

00:19:23,480 --> 00:19:28,160
think anybody here has done since

00:19:25,010 --> 00:19:30,260
admitting appreciates again not

00:19:28,160 --> 00:19:31,100
necessarily specific to you whiskey so

00:19:30,260 --> 00:19:35,630
now let's talk about some things that

00:19:31,100 --> 00:19:38,240
are super specific to you whiskey you

00:19:35,630 --> 00:19:42,110
whiskey comes with so many features in

00:19:38,240 --> 00:19:45,350
so many modes of operation that you can

00:19:42,110 --> 00:19:47,120
probably replace large parts of your

00:19:45,350 --> 00:19:49,240
existing infrastructure with you whiskey

00:19:47,120 --> 00:19:51,200
and you may not even know it for example

00:19:49,240 --> 00:19:54,680
you as he comes with a static file

00:19:51,200 --> 00:19:56,180
server if you want your workers to die

00:19:54,680 --> 00:19:57,410
after a certain number of requests

00:19:56,180 --> 00:19:59,030
because you think you have a memory leak

00:19:57,410 --> 00:20:00,890
and you can't be bothered to fix the

00:19:59,030 --> 00:20:02,810
memory leak right now you can set a max

00:20:00,890 --> 00:20:04,130
requests per worker on the worker and

00:20:02,810 --> 00:20:07,070
it'll just restart after a certain

00:20:04,130 --> 00:20:09,260
number of requests you as he comes with

00:20:07,070 --> 00:20:12,050
a queuing system you as he comes with

00:20:09,260 --> 00:20:13,620
HTTP support htps support and HTTP to

00:20:12,050 --> 00:20:15,510
support right out of the box

00:20:13,620 --> 00:20:17,370
it comes to the hari-kiri mode so if a

00:20:15,510 --> 00:20:19,170
single worker grows to having too much

00:20:17,370 --> 00:20:20,280
memory it'll just kill itself and start

00:20:19,170 --> 00:20:20,880
a new worker again if you've got a

00:20:20,280 --> 00:20:22,650
memory leak

00:20:20,880 --> 00:20:23,910
why debug it today when you can debug it

00:20:22,650 --> 00:20:26,790
six months from now and just have you

00:20:23,910 --> 00:20:28,200
whiskey take care of it for you if you

00:20:26,790 --> 00:20:29,700
want to prove how well you whiskey is

00:20:28,200 --> 00:20:31,110
doing you can use your whiskey table if

00:20:29,700 --> 00:20:32,490
you want to see exactly where that

00:20:31,110 --> 00:20:34,559
memory leak is coming from eventually

00:20:32,490 --> 00:20:35,220
you can use memory report ug supports

00:20:34,559 --> 00:20:39,540
async

00:20:35,220 --> 00:20:42,180
and so when I look at this list a thing

00:20:39,540 --> 00:20:44,370
I think to myself is with all these

00:20:42,180 --> 00:20:49,140
things that you whiskey can do do I

00:20:44,370 --> 00:20:50,790
still need a separate cueing or static

00:20:49,140 --> 00:20:55,950
file serving system do I still need

00:20:50,790 --> 00:20:59,250
celery do I still need Redis what else

00:20:55,950 --> 00:21:01,290
can you do so why us key code reloading

00:20:59,250 --> 00:21:04,679
and tunability are pretty common

00:21:01,290 --> 00:21:07,110
security config files and just so many

00:21:04,679 --> 00:21:08,880
features if you haven't dived in Dovan

00:21:07,110 --> 00:21:10,260
to the u.s. key docs yet highly

00:21:08,880 --> 00:21:12,230
recommended you will discover things

00:21:10,260 --> 00:21:16,290
that you did not know you wiggy could do

00:21:12,230 --> 00:21:17,610
and so that's about it special thanks to

00:21:16,290 --> 00:21:20,250
unbid the guy who created you whiskey

00:21:17,610 --> 00:21:21,590
who reviewed this talk for me and my

00:21:20,250 --> 00:21:24,150
co-creator the person helped me write it

00:21:21,590 --> 00:21:26,520
he was incredibly helpful at answering

00:21:24,150 --> 00:21:27,780
questions if you have any questions I

00:21:26,520 --> 00:21:30,030
will answer them now we've got about

00:21:27,780 --> 00:21:34,860
five minutes my name is Philip James I

00:21:30,030 --> 00:21:36,120
am definitely so I do a whole bunch of

00:21:34,860 --> 00:21:37,380
things I've worked in Django and Python

00:21:36,120 --> 00:21:39,120
for about ten years

00:21:37,380 --> 00:21:41,429
I am definitely available for consulting

00:21:39,120 --> 00:21:42,840
especially on security or performance so

00:21:41,429 --> 00:21:44,160
if your company is having problems that

00:21:42,840 --> 00:21:45,720
you think could be solved by someone

00:21:44,160 --> 00:21:47,010
who's given talks on security or

00:21:45,720 --> 00:21:48,690
performance at Jango cons definitely

00:21:47,010 --> 00:21:51,900
come talk to me that's my email address

00:21:48,690 --> 00:21:53,700
that is my twitter handle feel free to

00:21:51,900 --> 00:21:55,290
tweet at me it is my birthday you're

00:21:53,700 --> 00:21:56,429
also welcome to buy me a drink at the

00:21:55,290 --> 00:21:58,559
bar later tonight

00:21:56,429 --> 00:21:59,400
and with that I will turn it over to I

00:21:58,559 --> 00:22:02,340
think we have a couple minutes for

00:21:59,400 --> 00:22:04,800
questions thanks for the talk every

00:22:02,340 --> 00:22:06,300
single tutorial I've seen on like how to

00:22:04,800 --> 00:22:09,990
get Django up and running on the

00:22:06,300 --> 00:22:13,080
internet says you make use you whiskey

00:22:09,990 --> 00:22:15,450
and put it behind nginx why is that

00:22:13,080 --> 00:22:16,980
especially if you is he can do static

00:22:15,450 --> 00:22:19,640
file serving that was I thought the

00:22:16,980 --> 00:22:22,980
whole point of using nginx

00:22:19,640 --> 00:22:26,490
that's a great question the reality is

00:22:22,980 --> 00:22:27,539
that well you would have to ask the

00:22:26,490 --> 00:22:30,119
specific tutorial author

00:22:27,539 --> 00:22:33,869
why they made that decision MA are my

00:22:30,119 --> 00:22:37,350
guess on that decision is nginx is a

00:22:33,869 --> 00:22:40,019
technology that more people use as their

00:22:37,350 --> 00:22:43,350
kind of frontline a server and so more

00:22:40,019 --> 00:22:45,659
people trust it in terms of being that

00:22:43,350 --> 00:22:48,059
like termination point and being the

00:22:45,659 --> 00:22:50,850
kind of the heavy hitter in terms of

00:22:48,059 --> 00:22:52,919
taking the most load that being said I

00:22:50,850 --> 00:22:55,679
actually do think for most small to

00:22:52,919 --> 00:22:58,259
medium applications you could totally

00:22:55,679 --> 00:22:59,669
100% get away with just running you

00:22:58,259 --> 00:23:02,039
whiskey but there are some things

00:22:59,669 --> 00:23:04,529
especially around like certain special

00:23:02,039 --> 00:23:06,599
proxy configurations that nginx is going

00:23:04,529 --> 00:23:08,639
to handle better and that was kind of

00:23:06,599 --> 00:23:11,249
our my point with like list of features

00:23:08,639 --> 00:23:12,960
is if you hit up if you think all of

00:23:11,249 --> 00:23:15,330
your use cases can be covered by you

00:23:12,960 --> 00:23:19,950
whiskey use you whiskey I think that you

00:23:15,330 --> 00:23:24,149
can't do quite as well is if you need to

00:23:19,950 --> 00:23:25,200
be actually that's not true it's got

00:23:24,149 --> 00:23:26,429
plugins I was gonna say there's some

00:23:25,200 --> 00:23:27,599
languages that you was good as a handle

00:23:26,429 --> 00:23:30,299
quite as well but as plugins for most

00:23:27,599 --> 00:23:33,090
languages people have trusts nginx more

00:23:30,299 --> 00:23:34,409
I think is a big part of that but for

00:23:33,090 --> 00:23:36,359
small to medium applications I

00:23:34,409 --> 00:23:38,429
personally wouldn't have any fear about

00:23:36,359 --> 00:23:40,710
using you whiskey just out in the wild

00:23:38,429 --> 00:23:41,639
and I think a lot I think people do they

00:23:40,710 --> 00:23:45,090
just don't talk about it as much

00:23:41,639 --> 00:23:50,580
hi Katie hi is micro whiskey the same as

00:23:45,090 --> 00:23:53,039
you whiskey but ASCII micro has two

00:23:50,580 --> 00:23:56,179
syllables you has one syllable in a talk

00:23:53,039 --> 00:23:59,700
you're really stressed for time and so I

00:23:56,179 --> 00:24:01,950
chose to cut about a hundred syllables

00:23:59,700 --> 00:24:03,599
ish out of my talk by calling it you

00:24:01,950 --> 00:24:06,210
whiskey instead of micro whiskey but

00:24:03,599 --> 00:24:08,380
thanks for the question

00:24:06,210 --> 00:24:09,910
so you've talked about a lot of awesome

00:24:08,380 --> 00:24:12,880
things about you whiskey what is the

00:24:09,910 --> 00:24:16,720
worst thing about it the worst thing

00:24:12,880 --> 00:24:20,020
about you whiskey is there's so much

00:24:16,720 --> 00:24:21,700
there that trying to actually parse what

00:24:20,020 --> 00:24:23,950
the docs are telling you you whiskey can

00:24:21,700 --> 00:24:25,000
do is really tricky the docs are

00:24:23,950 --> 00:24:28,090
definitely written from the perspective

00:24:25,000 --> 00:24:30,070
of someone who is a web engineering

00:24:28,090 --> 00:24:31,570
professional and could be far more

00:24:30,070 --> 00:24:33,310
beginner-friendly especially for

00:24:31,570 --> 00:24:37,600
exposing some of these cooler advanced

00:24:33,310 --> 00:24:41,320
features happy birthday Phil oh my Chris

00:24:37,600 --> 00:24:42,640
yeah my question is so in terms of the

00:24:41,320 --> 00:24:44,440
process that happens with the

00:24:42,640 --> 00:24:46,300
communication with the kernel where the

00:24:44,440 --> 00:24:48,340
socket is open and the port is exposed

00:24:46,300 --> 00:24:50,260
how is it different from the run sir but

00:24:48,340 --> 00:24:51,550
what does it run sir but do under the

00:24:50,260 --> 00:24:56,110
hood except for the fact that it doesn't

00:24:51,550 --> 00:24:58,180
have multiple workers so when I was

00:24:56,110 --> 00:24:59,440
creating this talk we I was definitely

00:24:58,180 --> 00:25:00,970
under the impression that run server

00:24:59,440 --> 00:25:02,830
didn't have multiple workers and then it

00:25:00,970 --> 00:25:05,080
turned out that run server is some time

00:25:02,830 --> 00:25:08,830
in when no one's looking added multiple

00:25:05,080 --> 00:25:10,930
workers so run server actually does do a

00:25:08,830 --> 00:25:13,450
lot of the same dance that you whiskey

00:25:10,930 --> 00:25:14,620
does but there are things like in that

00:25:13,450 --> 00:25:18,420
list of features that I described that

00:25:14,620 --> 00:25:23,470
run server can't or won't do and

00:25:18,420 --> 00:25:26,680
realistically like run server is a

00:25:23,470 --> 00:25:28,510
hundred percent fine for development but

00:25:26,680 --> 00:25:30,010
I trust the team when they actively say

00:25:28,510 --> 00:25:32,680
please please please do not use this in

00:25:30,010 --> 00:25:34,090
production because they there that's

00:25:32,680 --> 00:25:35,860
never going to be a priority for them

00:25:34,090 --> 00:25:37,840
and I think I've seen them like actively

00:25:35,860 --> 00:25:39,430
read that maybe not like meanly but like

00:25:37,840 --> 00:25:41,050
actively reject packages for making it

00:25:39,430 --> 00:25:43,960
more production-ready because that's not

00:25:41,050 --> 00:25:45,970
the goal of run server but it's me doing

00:25:43,960 --> 00:25:47,830
most of the same dance of like spawn

00:25:45,970 --> 00:25:49,660
some processes and then have them wait

00:25:47,830 --> 00:25:52,650
on a socket because it does do multiple

00:25:49,660 --> 00:25:53,840
processes now yeah all right thank you

00:25:52,650 --> 00:26:02,630
very much

00:25:53,840 --> 00:26:02,630

YouTube URL: https://www.youtube.com/watch?v=YoUZIzPGKT8


