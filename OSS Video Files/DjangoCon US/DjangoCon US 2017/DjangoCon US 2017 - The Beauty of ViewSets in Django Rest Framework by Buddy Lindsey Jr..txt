Title: DjangoCon US 2017 - The Beauty of ViewSets in Django Rest Framework by Buddy Lindsey Jr.
Publication date: 2017-09-08
Playlist: DjangoCon US 2017
Description: 
	DjangoCon US 2017 - The Beauty of ViewSets in Django Rest Framework by Buddy Lindsey Jr.

ViewSets will make your code shorter, more robust, and save you time during your development, if you let them. I have spent a lot of time dealing with writing view code, and dealing with all the urls, only to finally learn ViewSets. It immediately saved development time as well as making my code more simple.

Generally to make a new, basic, endpoint in DRF for a model it would take about 15 minutes. That includes creating a serializer, urls, views, and testing it the browser. Now that same endpoint is more easily understood and done, all the steps, in less than 5 minutes. Leaving you more time to worry about what your new app is supposed to actually do.

This talk was presented at: https://2017.djangocon.us/talks/the-beauty-of-viewsets-in-django-rest-framework/

LINKS:
Follow Buddy Lindsey Jr. ðŸ‘‡
On Twitter: https://twitter.com/buddylindsey
Official homepage: https://godjango.com

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:15,840
[Music]

00:00:13,460 --> 00:00:18,330
thank you thank you for coming can

00:00:15,840 --> 00:00:20,369
everyone hear me okay check them awesome

00:00:18,330 --> 00:00:21,720
okay so based on how fast I talked

00:00:20,369 --> 00:00:23,189
during my lightning talk we could be

00:00:21,720 --> 00:00:25,800
only here for about five minutes

00:00:23,189 --> 00:00:28,770
so we'll see because I was really going

00:00:25,800 --> 00:00:31,290
for some reason anyway so first up Who

00:00:28,770 --> 00:00:34,020
am I I'm buddy Lyndsey jr. I grew up in

00:00:31,290 --> 00:00:36,809
Oklahoma and I run a site called go

00:00:34,020 --> 00:00:38,969
Jango calm I currently have about 150

00:00:36,809 --> 00:00:41,670
Jango screencasts for people to learn

00:00:38,969 --> 00:00:44,700
and continue their education on Jango

00:00:41,670 --> 00:00:47,489
and I'm continuously adding new video so

00:00:44,700 --> 00:00:49,920
I ask that people check it out and

00:00:47,489 --> 00:00:51,690
subscribe if they want to I would be

00:00:49,920 --> 00:00:54,510
appreciative of that also a senior

00:00:51,690 --> 00:00:57,690
software engineer at a company in Tulsa

00:00:54,510 --> 00:00:59,249
called summit ESP and I do mostly Jenga

00:00:57,690 --> 00:01:02,730
work and a little bit of full-stack as

00:00:59,249 --> 00:01:04,140
well and I'm also a lifelong learner the

00:01:02,730 --> 00:01:05,940
two latest things have been learning

00:01:04,140 --> 00:01:08,070
about is sustainable farming in public

00:01:05,940 --> 00:01:11,400
culture and also cryptocurrency trading

00:01:08,070 --> 00:01:13,140
my wife has constantly said she's always

00:01:11,400 --> 00:01:14,700
curious every six months about what new

00:01:13,140 --> 00:01:16,650
thing I'm gonna try to learn cuz I was

00:01:14,700 --> 00:01:19,800
by some new book that she never knows

00:01:16,650 --> 00:01:21,510
what it's gonna be so with that this is

00:01:19,800 --> 00:01:23,220
my wife and my daughter's my daughter's

00:01:21,510 --> 00:01:26,310
ten months old my wife's Melissa and our

00:01:23,220 --> 00:01:28,020
daughter is Grace and I took this

00:01:26,310 --> 00:01:30,380
picture on the way up and my daughter is

00:01:28,020 --> 00:01:33,660
like why are you taking pictures of me

00:01:30,380 --> 00:01:36,000
that's her expression I think so with

00:01:33,660 --> 00:01:39,360
that let's get into it so this is about

00:01:36,000 --> 00:01:41,250
view sets and in wrist framework I

00:01:39,360 --> 00:01:43,860
feel like the one of the best places to

00:01:41,250 --> 00:01:45,650
start to really understand view sets

00:01:43,860 --> 00:01:48,510
because this talk is about

00:01:45,650 --> 00:01:50,010
maintainability of code aesthetics of

00:01:48,510 --> 00:01:51,510
code and being able to read the code

00:01:50,010 --> 00:01:53,490
really fast and quickly croc and

00:01:51,510 --> 00:01:55,440
understand what's going on I will start

00:01:53,490 --> 00:01:57,120
at the beginning where you have the

00:01:55,440 --> 00:02:00,330
anatomy of an endpoint for a single

00:01:57,120 --> 00:02:03,000
model generally you have to deal with a

00:02:00,330 --> 00:02:05,220
single model you have to get HTTP verbs

00:02:03,000 --> 00:02:07,470
that you deal with for doing a list of

00:02:05,220 --> 00:02:09,509
all everything in the details of a

00:02:07,470 --> 00:02:11,519
specific object out of the database you

00:02:09,509 --> 00:02:14,519
have a post for create and you have a

00:02:11,519 --> 00:02:17,879
put for update and delete for deleting

00:02:14,519 --> 00:02:20,450
and so kind of those are the the five

00:02:17,879 --> 00:02:24,209
verbs that we deal with and doing

00:02:20,450 --> 00:02:27,060
dealing with models and the different

00:02:24,209 --> 00:02:29,340
crud operations and those are Jun Jin

00:02:27,060 --> 00:02:32,070
those are generally made up with two

00:02:29,340 --> 00:02:33,480
views and two URLs you're creating lists

00:02:32,070 --> 00:02:35,790
are generally something like API slash

00:02:33,480 --> 00:02:38,640
coins it's kind of the base of something

00:02:35,790 --> 00:02:41,610
and then your detail view your update

00:02:38,640 --> 00:02:44,640
and your delete or say API coins and the

00:02:41,610 --> 00:02:46,410
ID of whatever that object is so those

00:02:44,640 --> 00:02:48,870
are kind of some of the basics everyone

00:02:46,410 --> 00:02:50,550
is aware of that I just I like to start

00:02:48,870 --> 00:02:53,850
from the beginning to know where we're

00:02:50,550 --> 00:02:55,500
going so our views are generally doing a

00:02:53,850 --> 00:02:57,480
few things they're returning what verb

00:02:55,500 --> 00:02:59,880
is being used and how to route that

00:02:57,480 --> 00:03:02,070
properly it's checking permissions if

00:02:59,880 --> 00:03:03,360
there's any permissions to be set it's

00:03:02,070 --> 00:03:06,150
getting the relevant data that you're

00:03:03,360 --> 00:03:08,790
after to be able to display it to the

00:03:06,150 --> 00:03:13,410
user it's generally serializing the data

00:03:08,790 --> 00:03:15,390
using some sort of serializer and using

00:03:13,410 --> 00:03:17,489
the regular model serializers or a third

00:03:15,390 --> 00:03:18,810
party type serializer it's running any

00:03:17,489 --> 00:03:20,459
filters that you're wanting to do

00:03:18,810 --> 00:03:22,709
they're trying to filter your data with

00:03:20,459 --> 00:03:25,470
django filters your views are generally

00:03:22,709 --> 00:03:27,180
handling that as well and then they also

00:03:25,470 --> 00:03:29,250
do the action that we want them to do

00:03:27,180 --> 00:03:31,530
getting the data to display it's leading

00:03:29,250 --> 00:03:35,459
it it's updating or creating a new a new

00:03:31,530 --> 00:03:38,910
object in our database so it's doing a

00:03:35,459 --> 00:03:40,830
lot of work when we're doing things it's

00:03:38,910 --> 00:03:44,040
just and we have to handle all that

00:03:40,830 --> 00:03:45,000
somehow our urls are basically doing one

00:03:44,040 --> 00:03:47,459
one thing

00:03:45,000 --> 00:03:49,830
there were routing the information that

00:03:47,459 --> 00:03:52,380
we're sending it to somewhere else and I

00:03:49,830 --> 00:03:54,989
have round quote because we'll see that

00:03:52,380 --> 00:03:57,660
a little bit so kind of the one

00:03:54,989 --> 00:04:00,150
difference that there is with view sets

00:03:57,660 --> 00:04:02,870
is you're declaring a single URL instead

00:04:00,150 --> 00:04:07,260
of two you have basically one view

00:04:02,870 --> 00:04:10,049
instead of two or more and you're only

00:04:07,260 --> 00:04:11,519
working with code declarations I'll kind

00:04:10,049 --> 00:04:13,560
of explain what that is a little more

00:04:11,519 --> 00:04:17,430
I'm actually good to the kind of demo I

00:04:13,560 --> 00:04:18,690
can kind of show you what's going on and

00:04:17,430 --> 00:04:21,299
then again in the demo we're going to

00:04:18,690 --> 00:04:23,640
take 59 lines of code including our

00:04:21,299 --> 00:04:27,120
imports of using function based views

00:04:23,640 --> 00:04:29,490
with Django rest framework down to 22

00:04:27,120 --> 00:04:31,200
lines again including import so it's

00:04:29,490 --> 00:04:33,810
kind of it's taking a lot of code

00:04:31,200 --> 00:04:37,020
simplifying it and making a lot easier

00:04:33,810 --> 00:04:39,510
to normal but easier to understand the

00:04:37,020 --> 00:04:40,289
good thing about this is you can be able

00:04:39,510 --> 00:04:42,960
to more quickly

00:04:40,289 --> 00:04:45,360
grok all of your end points I work at

00:04:42,960 --> 00:04:48,029
somebody SP we have a single-page

00:04:45,360 --> 00:04:50,819
application and we're converting it from

00:04:48,029 --> 00:04:53,309
an old code base to a new code base

00:04:50,819 --> 00:04:54,689
based on Django rest framework and we

00:04:53,309 --> 00:04:58,649
have a lot of endpoints and we're gonna

00:04:54,689 --> 00:04:59,849
call constantly adding more and we're

00:04:58,649 --> 00:05:01,800
not only backing our single page

00:04:59,849 --> 00:05:03,629
application we're also backing an

00:05:01,800 --> 00:05:06,449
offline client that we have a wild that

00:05:03,629 --> 00:05:08,339
we wrote so people out in the field

00:05:06,449 --> 00:05:10,229
doing work can sink down information

00:05:08,339 --> 00:05:11,999
onto their local computer do stuff

00:05:10,229 --> 00:05:14,550
without having an internet connection

00:05:11,999 --> 00:05:16,289
and then it can push that information

00:05:14,550 --> 00:05:18,899
back up at a later date and those are

00:05:16,289 --> 00:05:22,680
hitting the exact same end points that

00:05:18,899 --> 00:05:24,629
we have for our single page application

00:05:22,680 --> 00:05:26,819
so they're being heavily used and in

00:05:24,629 --> 00:05:29,249
multiple ways to accomplish kind of the

00:05:26,819 --> 00:05:30,689
exact same thing and so when you're

00:05:29,249 --> 00:05:32,399
dealing with a lot of endpoints and it

00:05:30,689 --> 00:05:36,569
needs to have the robustness to handle

00:05:32,399 --> 00:05:37,949
at least those two scenarios you need to

00:05:36,569 --> 00:05:39,869
be able to understand them really

00:05:37,949 --> 00:05:42,569
quickly and then you also need a common

00:05:39,869 --> 00:05:46,830
pattern to create all your new your new

00:05:42,569 --> 00:05:49,680
endpoints because when we add a new page

00:05:46,830 --> 00:05:54,209
to our site and to the offline client we

00:05:49,680 --> 00:05:57,539
can generally create anywhere from one

00:05:54,209 --> 00:06:00,659
to five or six different endpoints and

00:05:57,539 --> 00:06:02,669
we have a lot more stuff in our roadmap

00:06:00,659 --> 00:06:04,169
to add to the site so it's something

00:06:02,669 --> 00:06:06,509
that we really need to make sure that we

00:06:04,169 --> 00:06:08,580
get well we understand it well we have a

00:06:06,509 --> 00:06:10,469
pattern for not only us to follow in the

00:06:08,580 --> 00:06:12,479
future but for our future developers and

00:06:10,469 --> 00:06:14,610
future team members to be able to come

00:06:12,479 --> 00:06:16,349
on board see what's going on and kind of

00:06:14,610 --> 00:06:19,800
replicate exactly what we've done and

00:06:16,349 --> 00:06:21,119
understand a common common thing so with

00:06:19,800 --> 00:06:23,279
that let's actually take a look at a

00:06:21,119 --> 00:06:24,979
little bit of a demo and we're gonna go

00:06:23,279 --> 00:06:27,229
on a journey we're gonna go from

00:06:24,979 --> 00:06:30,809
function based views we're gonna look at

00:06:27,229 --> 00:06:32,909
kind of how everything is gone and how

00:06:30,809 --> 00:06:34,889
everything is done with a function based

00:06:32,909 --> 00:06:37,019
view what it looks like when people

00:06:34,889 --> 00:06:41,939
convert it to a class-based view and

00:06:37,019 --> 00:06:46,800
then finally what it looks like as a few

00:06:41,939 --> 00:06:49,649
set right and they you'll see and then

00:06:46,800 --> 00:06:52,469
the last thing I'm going to show is how

00:06:49,649 --> 00:06:54,060
we have developed the process of testing

00:06:52,469 --> 00:06:57,180
new sets

00:06:54,060 --> 00:07:02,840
that we feel is a good way to test not

00:06:57,180 --> 00:07:02,840
over testing that's not that's like

00:07:21,370 --> 00:07:27,940
everyone see that okay cool so I'm using

00:07:25,300 --> 00:07:29,410
presentation mode and pycharm never used

00:07:27,940 --> 00:07:32,080
it before until today so we'll see how

00:07:29,410 --> 00:07:33,850
well this goes so kind of starting from

00:07:32,080 --> 00:07:37,630
the beginning we have our model it's

00:07:33,850 --> 00:07:40,570
very basic django model name symbol

00:07:37,630 --> 00:07:42,070
price and US dollars price based against

00:07:40,570 --> 00:07:45,100
the bitcoin for doing a cryptocurrency

00:07:42,070 --> 00:07:46,780
coin character-filled decimal fields and

00:07:45,100 --> 00:07:48,850
then we have our string representation

00:07:46,780 --> 00:07:50,169
so when we looked at it in the shell oh

00:07:48,850 --> 00:07:54,030
yeah and then we know what it looks like

00:07:50,169 --> 00:07:54,030
very very basic

00:08:25,130 --> 00:08:30,090
let's do it this way see where

00:08:27,900 --> 00:08:31,470
serializer it's a standard django model

00:08:30,090 --> 00:08:34,849
sir Django rest framework model

00:08:31,470 --> 00:08:37,020
serializer corn syrup coin serializer

00:08:34,849 --> 00:08:39,060
it's a model so I realize that we set

00:08:37,020 --> 00:08:40,830
our model and the fields that we want to

00:08:39,060 --> 00:08:43,919
bring in to be able to display to our

00:08:40,830 --> 00:08:47,610
users and then in this case we have our

00:08:43,919 --> 00:08:49,620
URLs we're pulling in to function based

00:08:47,610 --> 00:08:52,200
views they're setting it to our first

00:08:49,620 --> 00:08:54,390
URL to be able to get our list and to be

00:08:52,200 --> 00:08:58,230
able to create our core not coin object

00:08:54,390 --> 00:09:00,149
and we have our 1 for our ID to get the

00:08:58,230 --> 00:09:08,820
detail and be able to do a delete and

00:09:00,149 --> 00:09:10,260
update then we have our views here all

00:09:08,820 --> 00:09:12,180
right so here's our imports we'll just

00:09:10,260 --> 00:09:15,060
ignore those so the first thing we want

00:09:12,180 --> 00:09:17,130
to do is so we'll say we're needed a

00:09:15,060 --> 00:09:19,470
code base and we kind of want to

00:09:17,130 --> 00:09:21,839
understand you know what is this doing

00:09:19,470 --> 00:09:23,399
because we have the we have this type of

00:09:21,839 --> 00:09:24,000
code everywhere for all of our API

00:09:23,399 --> 00:09:27,420
points

00:09:24,000 --> 00:09:29,940
well we good or URLs or say okay API

00:09:27,420 --> 00:09:32,070
coins I'll go to the coin list now we're

00:09:29,940 --> 00:09:34,770
at our coin list view

00:09:32,070 --> 00:09:37,589
well there's login that's required okay

00:09:34,770 --> 00:09:39,120
that's good information CSRF exempt okay

00:09:37,589 --> 00:09:40,770
that's good information now we know that

00:09:39,120 --> 00:09:45,510
we don't have to have a CFR CSRF token

00:09:40,770 --> 00:09:46,380
I'm doing a post then they would first

00:09:45,510 --> 00:09:49,500
thing they look at work they were doing

00:09:46,380 --> 00:09:50,940
a get for getting our data or applying

00:09:49,500 --> 00:09:54,600
all the filters that we might want to

00:09:50,940 --> 00:09:57,899
apply and then we're serializing the

00:09:54,600 --> 00:10:00,149
data based on the last filter that we

00:09:57,899 --> 00:10:03,060
applied with the query set we're setting

00:10:00,149 --> 00:10:04,410
the many equal to true okay I mean if

00:10:03,060 --> 00:10:05,640
we're used to this you know we're

00:10:04,410 --> 00:10:07,920
getting a lot of information fairly

00:10:05,640 --> 00:10:09,390
quickly but if we're not that used to or

00:10:07,920 --> 00:10:11,070
probably having to look up a lot of

00:10:09,390 --> 00:10:13,020
different things try to really

00:10:11,070 --> 00:10:14,910
understand what's going on so when they

00:10:13,020 --> 00:10:18,029
were returning a JSON response with that

00:10:14,910 --> 00:10:20,700
data okay now we were doing a post we're

00:10:18,029 --> 00:10:22,709
checking for the post we're doing a

00:10:20,700 --> 00:10:25,410
parcel of the data serializing it

00:10:22,709 --> 00:10:26,730
checking and solid and then saving okay

00:10:25,410 --> 00:10:28,709
now we have that let's go on to the next

00:10:26,730 --> 00:10:30,899
one oh we're doing all I can required

00:10:28,709 --> 00:10:33,089
again we're going to CSRF exempt again

00:10:30,899 --> 00:10:35,610
getting our details we're passing in the

00:10:33,089 --> 00:10:37,500
request on the primary key now we're

00:10:35,610 --> 00:10:38,610
getting the data out of the database it

00:10:37,500 --> 00:10:41,730
doesn't exist we're for

00:10:38,610 --> 00:10:44,040
boring okay we're gonna get serialized

00:10:41,730 --> 00:10:47,990
returned response now we're checking for

00:10:44,040 --> 00:10:50,670
put parsing serialized is valid save

00:10:47,990 --> 00:10:54,690
returning our response either with data

00:10:50,670 --> 00:10:56,370
or 400 status there's an error then

00:10:54,690 --> 00:10:57,480
finally there's a delete we're deleting

00:10:56,370 --> 00:11:01,620
the data out of the database and

00:10:57,480 --> 00:11:03,600
returning that it was deleted very

00:11:01,620 --> 00:11:05,220
common function based views there's a

00:11:03,600 --> 00:11:06,750
there's a lot of code to it and if you

00:11:05,220 --> 00:11:08,579
have to want to do anything custom in

00:11:06,750 --> 00:11:11,760
there it's going to make this longer and

00:11:08,579 --> 00:11:14,070
more complicated and when you have a lot

00:11:11,760 --> 00:11:16,070
of code like this at some point you're

00:11:14,070 --> 00:11:19,560
gonna wonder like well where do I put

00:11:16,070 --> 00:11:22,470
custom information when dealing with my

00:11:19,560 --> 00:11:25,019
actual model data and and how I

00:11:22,470 --> 00:11:27,269
specifically save models so one of those

00:11:25,019 --> 00:11:29,670
one scenario might be as you're doing a

00:11:27,269 --> 00:11:33,360
many-to-many object and you're passing

00:11:29,670 --> 00:11:35,850
in in your JSON request sub data that

00:11:33,360 --> 00:11:37,320
needs to create new objects well when

00:11:35,850 --> 00:11:39,480
you have a lot of information and here

00:11:37,320 --> 00:11:40,740
you might tempted to try to create all

00:11:39,480 --> 00:11:44,670
of those objects and do all of that

00:11:40,740 --> 00:11:46,260
stuff inside of your view when in

00:11:44,670 --> 00:11:48,899
reality the best place to actually do

00:11:46,260 --> 00:11:50,550
that is in your serializer because you

00:11:48,899 --> 00:11:52,980
might use that same serializer in

00:11:50,550 --> 00:11:55,260
multiple different views and you want to

00:11:52,980 --> 00:11:55,949
handle that chunk of JSON inside of your

00:11:55,260 --> 00:11:58,649
serializer

00:11:55,949 --> 00:12:04,110
somewhere else so this leaves you an

00:11:58,649 --> 00:12:06,480
opportunity to do some poor design

00:12:04,110 --> 00:12:08,970
choices this is still valid it still

00:12:06,480 --> 00:12:10,560
works and at the end of the day is going

00:12:08,970 --> 00:12:13,740
to be is gonna be fine as long as you

00:12:10,560 --> 00:12:16,800
understand the caveats to it I was

00:12:13,740 --> 00:12:18,449
quickly looking at our that our Django

00:12:16,800 --> 00:12:21,410
filters were just doing a simple like

00:12:18,449 --> 00:12:25,740
filter for the coin so it's doing a

00:12:21,410 --> 00:12:31,170
basically case insensitive exact match

00:12:25,740 --> 00:12:32,490
for the name anyway just fairly basic

00:12:31,170 --> 00:12:34,500
stuff and then in this one we're doing a

00:12:32,490 --> 00:12:36,149
bit filter in case for some reason we

00:12:34,500 --> 00:12:38,880
wanted to filter out every single result

00:12:36,149 --> 00:12:40,410
unless the name of it had bit in it this

00:12:38,880 --> 00:12:44,250
was just something arbitrary I came up

00:12:40,410 --> 00:12:49,760
with just a show an example so let's

00:12:44,250 --> 00:12:49,760
move on to look at our class-based views

00:13:01,190 --> 00:13:06,120
so our urls have slightly changed a bit

00:13:03,630 --> 00:13:08,790
we're doing our corner point view and

00:13:06,120 --> 00:13:11,340
coin detailed view we're doing our as

00:13:08,790 --> 00:13:13,050
view here because they're class-based

00:13:11,340 --> 00:13:15,570
views we're not calling the functions

00:13:13,050 --> 00:13:18,690
directly so in our views we've actually

00:13:15,570 --> 00:13:20,700
slimmed it up a lot when our coin list

00:13:18,690 --> 00:13:22,470
coin list view it's inheriting from list

00:13:20,700 --> 00:13:24,780
create API view from Django rest

00:13:22,470 --> 00:13:26,940
framework now we see we have permission

00:13:24,780 --> 00:13:29,820
classes and we're checking for

00:13:26,940 --> 00:13:31,560
authentication awesome we're sitting our

00:13:29,820 --> 00:13:33,060
serializer so now we know that this is

00:13:31,560 --> 00:13:35,280
going to serialize anything that comes

00:13:33,060 --> 00:13:36,530
in based on the coin serializer as the

00:13:35,280 --> 00:13:39,060
top-level serializer

00:13:36,530 --> 00:13:41,580
again as I was describing a minute ago

00:13:39,060 --> 00:13:43,860
if you're dealing with many too many

00:13:41,580 --> 00:13:44,850
data or related data and you handle that

00:13:43,860 --> 00:13:46,890
in your serializer

00:13:44,850 --> 00:13:48,870
you don't have to override anything in

00:13:46,890 --> 00:13:50,430
your views here because your serialize

00:13:48,870 --> 00:13:52,830
err will just kind of quote-unquote

00:13:50,430 --> 00:13:55,650
magically handle it the way you want it

00:13:52,830 --> 00:13:57,840
to handle it by default Django rest

00:13:55,650 --> 00:14:00,290
framework does not handle that and you

00:13:57,840 --> 00:14:02,460
have to handle that somewhere yourself

00:14:00,290 --> 00:14:04,080
that could be a completely different

00:14:02,460 --> 00:14:05,700
discussion for another presentation

00:14:04,080 --> 00:14:09,600
because there are some headaches

00:14:05,700 --> 00:14:11,940
involved in that so there's also the

00:14:09,600 --> 00:14:13,560
filters that I was just showing you you

00:14:11,940 --> 00:14:16,140
generally start with a Django filter

00:14:13,560 --> 00:14:19,020
back end and here we just added our bit

00:14:16,140 --> 00:14:23,220
filter as an example we have our query

00:14:19,020 --> 00:14:25,250
set in here so we know hey this view is

00:14:23,220 --> 00:14:27,540
going to start with this query set and

00:14:25,250 --> 00:14:29,640
everything that it does beyond that is

00:14:27,540 --> 00:14:32,910
going to be a derivative of this query

00:14:29,640 --> 00:14:34,830
set and then finally we have the filter

00:14:32,910 --> 00:14:36,330
class which is the coin filter and

00:14:34,830 --> 00:14:38,580
that's kind of the main filter who want

00:14:36,330 --> 00:14:40,350
to filter individual fields and you know

00:14:38,580 --> 00:14:42,690
we can do some other custom things that

00:14:40,350 --> 00:14:47,220
are kind of like the primary filter of

00:14:42,690 --> 00:14:48,600
this view so coin detail view is very

00:14:47,220 --> 00:14:50,970
similar we're doing retrieve update

00:14:48,600 --> 00:14:53,820
destroy API view so we've now determined

00:14:50,970 --> 00:14:55,560
that in one line that this you will get

00:14:53,820 --> 00:14:58,140
the data up into data and destroy the

00:14:55,560 --> 00:15:00,200
data for a specific object in the

00:14:58,140 --> 00:15:02,280
database or bottle in the database

00:15:00,200 --> 00:15:02,980
that's going to be authenticated it's

00:15:02,280 --> 00:15:04,720
going to use the coin

00:15:02,980 --> 00:15:07,149
serializer is the third point or is it

00:15:04,720 --> 00:15:08,740
true serializer that's gonna again start

00:15:07,149 --> 00:15:14,350
the filtering based on at the coin

00:15:08,740 --> 00:15:15,820
object so now that now if we compare our

00:15:14,350 --> 00:15:17,920
cost misuse with our function based

00:15:15,820 --> 00:15:21,070
views we've gotten the exact same

00:15:17,920 --> 00:15:24,040
information from reading this that we

00:15:21,070 --> 00:15:25,959
did in function based views as we did

00:15:24,040 --> 00:15:28,720
with the class-based views we just did

00:15:25,959 --> 00:15:31,829
it a lot faster and it makes more sense

00:15:28,720 --> 00:15:36,010
once we understand how class pays work

00:15:31,829 --> 00:15:38,350
and we don't have necessarily have the

00:15:36,010 --> 00:15:40,600
opportunity to inject code that doesn't

00:15:38,350 --> 00:15:43,000
need to be in the views in the first

00:15:40,600 --> 00:15:44,860
place because we're kind of declaring

00:15:43,000 --> 00:15:46,180
these things are going to happen in our

00:15:44,860 --> 00:15:48,670
class based views and these are the

00:15:46,180 --> 00:15:49,720
attributes that need to be here and we

00:15:48,670 --> 00:15:55,690
don't necessarily want to do anything

00:15:49,720 --> 00:15:57,430
else this is what we want so and this is

00:15:55,690 --> 00:16:00,790
why I'm a proponent of cost based views

00:15:57,430 --> 00:16:02,800
in general because it can lead to dry

00:16:00,790 --> 00:16:06,820
our code and better organization of the

00:16:02,800 --> 00:16:17,620
code so finally let's jump to our view

00:16:06,820 --> 00:16:19,480
sets all right so here we go we have our

00:16:17,620 --> 00:16:22,630
imports at the top and now we have our

00:16:19,480 --> 00:16:24,760
coin view set and we only have one view

00:16:22,630 --> 00:16:26,980
and so that's why it's a view set it's

00:16:24,760 --> 00:16:28,630
combining multiple views into one so we

00:16:26,980 --> 00:16:30,370
can quickly tell we're doing a create

00:16:28,630 --> 00:16:31,779
we're doing a list we're doing an update

00:16:30,370 --> 00:16:34,180
we're doing a retrieve we're doing and

00:16:31,779 --> 00:16:36,459
destroy and everything is being based on

00:16:34,180 --> 00:16:38,889
a generic view set we're now quickly

00:16:36,459 --> 00:16:41,139
determine exactly what this view is

00:16:38,889 --> 00:16:45,160
going to do again we have the permission

00:16:41,139 --> 00:16:47,319
classes we have a point serializer that

00:16:45,160 --> 00:16:50,079
three view is going to work on we have

00:16:47,319 --> 00:16:55,149
our two filters query set and our main

00:16:50,079 --> 00:16:56,920
filter class so now we've even now more

00:16:55,149 --> 00:16:57,790
quickly determined what at what all is

00:16:56,920 --> 00:16:59,920
going on we've kind of seen a

00:16:57,790 --> 00:17:02,260
progression the long form function base

00:16:59,920 --> 00:17:04,360
used to use that that's only a few lines

00:17:02,260 --> 00:17:06,189
of code and quickly understand and

00:17:04,360 --> 00:17:09,910
quickly see what's going on and in

00:17:06,189 --> 00:17:12,189
reality let's say I needed to do like a

00:17:09,910 --> 00:17:14,470
market data view set I would copy and

00:17:12,189 --> 00:17:17,020
paste this chunk of code and then change

00:17:14,470 --> 00:17:19,360
all the information and now I have my

00:17:17,020 --> 00:17:21,520
please view system interviews file done

00:17:19,360 --> 00:17:24,780
for the market data the only thing I

00:17:21,520 --> 00:17:26,770
have to do now is go in and add URLs so

00:17:24,780 --> 00:17:31,390
that's where things get a little bit

00:17:26,770 --> 00:17:32,920
tricky compared to regular views and

00:17:31,390 --> 00:17:35,890
Django is you have to deal with a router

00:17:32,920 --> 00:17:37,420
inside of Django rest framework and

00:17:35,890 --> 00:17:40,090
being able to route information in

00:17:37,420 --> 00:17:42,400
different places properly generally you

00:17:40,090 --> 00:17:45,370
can survive with using just the default

00:17:42,400 --> 00:17:47,770
router I have only ever written a custom

00:17:45,370 --> 00:17:49,240
router for the exercise of writing a

00:17:47,770 --> 00:17:51,580
custom router to understand what it does

00:17:49,240 --> 00:17:53,230
I have not needed to do one in practice

00:17:51,580 --> 00:17:54,760
if anyone has please let me know because

00:17:53,230 --> 00:17:56,470
I'd love to have a conversation and

00:17:54,760 --> 00:17:59,560
understand that piece better

00:17:56,470 --> 00:18:00,970
we'll have why someone would do that but

00:17:59,560 --> 00:18:06,250
basically you instantiate a new router

00:18:00,970 --> 00:18:07,660
you registered a URL point of say coins

00:18:06,250 --> 00:18:10,480
in this place because we're doing API

00:18:07,660 --> 00:18:13,900
slash coins and you set the view set

00:18:10,480 --> 00:18:16,030
that you want to use and so now whatever

00:18:13,900 --> 00:18:18,010
you have you're gonna do coins slush and

00:18:16,030 --> 00:18:19,480
it's gonna do everything else that

00:18:18,010 --> 00:18:22,990
router is gonna figure out hey is there

00:18:19,480 --> 00:18:26,950
a an extension on that URL for a primary

00:18:22,990 --> 00:18:28,720
key yes okay now I need to go to say

00:18:26,950 --> 00:18:30,520
that second class based view in a sense

00:18:28,720 --> 00:18:32,320
to either do an update or either do a

00:18:30,520 --> 00:18:34,600
get the details do an update or do a

00:18:32,320 --> 00:18:37,480
delete and then they determine is there

00:18:34,600 --> 00:18:40,480
based on at the HTTP verb so it's a very

00:18:37,480 --> 00:18:42,400
smart little system and then down here

00:18:40,480 --> 00:18:44,230
in the patterns we have just pretended

00:18:42,400 --> 00:18:46,660
it with an API and we're doing an

00:18:44,230 --> 00:18:50,700
include with Robert URLs so uses a

00:18:46,660 --> 00:18:54,280
standard Django URL pattern recognition

00:18:50,700 --> 00:18:59,110
regular expression system as it tries to

00:18:54,280 --> 00:19:03,970
figure out what it needs to do so with

00:18:59,110 --> 00:19:06,520
that in mind we've written basically

00:19:03,970 --> 00:19:09,250
very little code at this point on to get

00:19:06,520 --> 00:19:11,380
something to work let's actually make it

00:19:09,250 --> 00:19:12,820
make some make it do something so if we

00:19:11,380 --> 00:19:21,910
refresh the page authentication

00:19:12,820 --> 00:19:24,360
credentials are required so we login now

00:19:21,910 --> 00:19:26,800
we're logged in so if i refresh the page

00:19:24,360 --> 00:19:29,830
we're getting all of our we're getting

00:19:26,800 --> 00:19:30,670
our bitcoins this has the bit filter on

00:19:29,830 --> 00:19:42,070
it

00:19:30,670 --> 00:19:43,780
so if I comment that out refresh now I

00:19:42,070 --> 00:19:47,410
have the five bitcoins that were in my

00:19:43,780 --> 00:19:51,310
database go in here and I can also does

00:19:47,410 --> 00:19:55,090
the filtering and it also gets my

00:19:51,310 --> 00:19:58,150
details and if it doesn't have anything

00:19:55,090 --> 00:20:01,150
the returns a not found so kind of our

00:19:58,150 --> 00:20:04,030
404 system that we had in place it it so

00:20:01,150 --> 00:20:06,520
it returns back and we've gotten a lot

00:20:04,030 --> 00:20:09,070
of that without a lot of extra effort

00:20:06,520 --> 00:20:14,320
and a lot slimmer code a lot more

00:20:09,070 --> 00:20:16,300
readable code so anyway with that I

00:20:14,320 --> 00:20:18,840
think I ended about the time that I

00:20:16,300 --> 00:20:24,060
wanted you to allow opportunity for Q&A

00:20:18,840 --> 00:20:24,060
so one second

00:20:33,340 --> 00:20:39,040
if you want to learn more go to go Janko

00:20:35,230 --> 00:20:41,410
calm and or you can hit me up on Twitter

00:20:39,040 --> 00:20:44,320
out buddy Lindsey is my twitter handle

00:20:41,410 --> 00:20:47,320
and then you can go to my github and

00:20:44,320 --> 00:20:47,890
I'll put this code up on github later

00:20:47,320 --> 00:20:49,930
today

00:20:47,890 --> 00:20:54,910
popular let's talk so you can experiment

00:20:49,930 --> 00:20:57,040
with it I have tags for the different

00:20:54,910 --> 00:20:58,870
ones so you can kind of check them out I

00:20:57,040 --> 00:21:01,620
also just realize I didn't show you one

00:20:58,870 --> 00:21:01,620
thing I wanted to show you

00:21:27,809 --> 00:21:36,840
okay so this is a test of our system

00:21:30,929 --> 00:21:38,879
review set one thing that co-worker

00:21:36,840 --> 00:21:41,940
pointed out to my coworker kind of

00:21:38,879 --> 00:21:44,460
designed this pattern and he's super

00:21:41,940 --> 00:21:46,469
smart developer in my opinion and I

00:21:44,460 --> 00:21:47,879
enjoy learning from him and this is kind

00:21:46,469 --> 00:21:49,320
of his pattern and we kind of discussed

00:21:47,879 --> 00:21:53,219
it and came up with kind of music

00:21:49,320 --> 00:21:56,009
inclusions and I love this and I think

00:21:53,219 --> 00:21:58,469
it makes a lot of sense so in order to

00:21:56,009 --> 00:22:01,139
for this view set to be fully tested we

00:21:58,469 --> 00:22:03,330
have this test system in place we're

00:22:01,139 --> 00:22:05,009
setting up a visa test those are we're

00:22:03,330 --> 00:22:06,960
instantiating the new view set and then

00:22:05,009 --> 00:22:09,599
we're checking to make sure all of the

00:22:06,960 --> 00:22:11,999
instances that we're expecting are set

00:22:09,599 --> 00:22:14,369
on that instantiated object we're also

00:22:11,999 --> 00:22:17,399
checking if the permission classes are

00:22:14,369 --> 00:22:19,589
set that we expect as well and we're

00:22:17,399 --> 00:22:20,909
setting the serializer class again i

00:22:19,589 --> 00:22:22,710
mean basically we're checking all the

00:22:20,909 --> 00:22:25,589
attributes that are in this view set and

00:22:22,710 --> 00:22:28,080
if you're if you might have noticed i

00:22:25,589 --> 00:22:29,570
don't have the query set set that's

00:22:28,080 --> 00:22:32,489
because i've figured out a way to

00:22:29,570 --> 00:22:35,039
properly test that and get some sort of

00:22:32,489 --> 00:22:36,479
assertion to work like kind of just

00:22:35,039 --> 00:22:38,399
works and i'm like this is good enough

00:22:36,479 --> 00:22:40,739
hopefully it never changes it shouldn't

00:22:38,399 --> 00:22:43,259
and that's the thing is this is so

00:22:40,739 --> 00:22:46,830
bare-bones enough that your view sets

00:22:43,259 --> 00:22:48,599
should very rarely ever change and the

00:22:46,830 --> 00:22:51,330
reason we do tests like this is because

00:22:48,599 --> 00:22:53,759
in this case we're considering these

00:22:51,330 --> 00:22:55,950
attribution these these properties these

00:22:53,759 --> 00:22:58,919
attributes whatever you call them as

00:22:55,950 --> 00:23:01,559
code themselves instead of just

00:22:58,919 --> 00:23:03,239
properties on a class and we don't want

00:23:01,559 --> 00:23:04,950
these to change it if these do ever

00:23:03,239 --> 00:23:07,739
change we want to be notified that

00:23:04,950 --> 00:23:09,779
they've changed we're trusting that the

00:23:07,739 --> 00:23:13,229
view set will always work the way that

00:23:09,779 --> 00:23:14,940
you should work so we don't see the need

00:23:13,229 --> 00:23:17,789
to go ahead and do full integration test

00:23:14,940 --> 00:23:21,299
to test every single scenario that views

00:23:17,789 --> 00:23:25,879
would generally do stuff so with that is

00:23:21,299 --> 00:23:29,960
let's open up to QA question

00:23:25,879 --> 00:23:29,960
we're five minutes left or so

00:23:30,350 --> 00:23:46,070
you go about sending an array of numbers

00:23:36,860 --> 00:23:48,289
in a get pattern using this pattern no

00:23:46,070 --> 00:23:50,360
actually how would you do they get I'm

00:23:48,289 --> 00:23:53,030
having an issue with that I don't want

00:23:50,360 --> 00:23:56,299
to break the URL in AB you said how

00:23:53,030 --> 00:24:05,409
would I send it an array of numbers in

00:23:56,299 --> 00:24:09,260
the gets will do a process yes

00:24:05,409 --> 00:24:12,470
no I want to send a bunch of an array of

00:24:09,260 --> 00:24:17,990
numbers so under get you'll do let's say

00:24:12,470 --> 00:24:19,640
a select in how would I do that in abuse

00:24:17,990 --> 00:24:22,400
it so you would have so you basically

00:24:19,640 --> 00:24:25,070
have a query parameter in the URL that

00:24:22,400 --> 00:24:26,650
has some set of numbers and then you

00:24:25,070 --> 00:24:32,000
would need to process that accordingly

00:24:26,650 --> 00:24:34,700
that would generally kind of break

00:24:32,000 --> 00:24:39,080
outside of you sense and so you would

00:24:34,700 --> 00:24:41,750
have to do something more custom this is

00:24:39,080 --> 00:24:45,679
kind of tightly defined to I am sending

00:24:41,750 --> 00:24:47,570
JSON data of an object that I want to

00:24:45,679 --> 00:24:49,610
save to the database or getting out a

00:24:47,570 --> 00:24:52,100
JSON representation of the object in the

00:24:49,610 --> 00:24:52,909
database we need to do custom processing

00:24:52,100 --> 00:24:55,640
like that

00:24:52,909 --> 00:24:57,919
you can jump down into and override

00:24:55,640 --> 00:24:59,690
stuff inside of the view set but I

00:24:57,919 --> 00:25:01,159
generally probably over create a

00:24:59,690 --> 00:25:03,140
class-based view for that specific thing

00:25:01,159 --> 00:25:06,559
and then I would actually remove the

00:25:03,140 --> 00:25:08,090
specific mix in if everything else is

00:25:06,559 --> 00:25:09,740
going to be the same I would create new

00:25:08,090 --> 00:25:13,280
due to URL remove to make send for that

00:25:09,740 --> 00:25:16,789
particular thing and so that way it

00:25:13,280 --> 00:25:17,150
doesn't activate that for for that thank

00:25:16,789 --> 00:25:19,190
you

00:25:17,150 --> 00:25:21,890
when you're not implementing every

00:25:19,190 --> 00:25:25,789
method on a particular view set do you

00:25:21,890 --> 00:25:29,390
assert that method isn't present in any

00:25:25,789 --> 00:25:33,559
way so let me rephrase that make sure I

00:25:29,390 --> 00:25:35,900
understand what you're saying if so if I

00:25:33,559 --> 00:25:38,990
don't want to use a get and I don't have

00:25:35,900 --> 00:25:41,929
say the if I don't want to use a get to

00:25:38,990 --> 00:25:43,190
get a list I wouldn't have this list

00:25:41,929 --> 00:25:46,340
model in here

00:25:43,190 --> 00:25:48,080
that would mean that the get four with

00:25:46,340 --> 00:25:50,960
no primary key

00:25:48,080 --> 00:25:54,190
it would not activate that HTTP verb and

00:25:50,960 --> 00:25:55,970
it would return a 404 yeah so yeah

00:25:54,190 --> 00:25:58,130
that's kind of that we're kind of

00:25:55,970 --> 00:26:00,920
automatic switching on it so that's kind

00:25:58,130 --> 00:26:02,900
of some of the base cost based view

00:26:00,920 --> 00:26:06,230
stuff in Django as long as you if you

00:26:02,900 --> 00:26:07,520
don't have that method on that view then

00:26:06,230 --> 00:26:14,030
that's not going to be available yeah

00:26:07,520 --> 00:26:18,860
it's got a throw an error I since to me

00:26:14,030 --> 00:26:20,450
since that's a feature of the framework

00:26:18,860 --> 00:26:22,850
itself it doesn't need to be tested

00:26:20,450 --> 00:26:27,560
because they have tests they should have

00:26:22,850 --> 00:26:28,760
tests for that and I think they do so

00:26:27,560 --> 00:26:31,670
that's something that I don't need to

00:26:28,760 --> 00:26:34,580
worry about testing because it's kind of

00:26:31,670 --> 00:26:38,710
we look at it as we don't want to test

00:26:34,580 --> 00:26:38,710
the framework we want to test our code

00:26:39,370 --> 00:26:46,640
sounds like that is the end of our Q&A

00:26:42,610 --> 00:26:47,270
let's think buddy like this wonderful

00:26:46,640 --> 00:26:52,920
information

00:26:47,270 --> 00:26:52,920

YouTube URL: https://www.youtube.com/watch?v=8yRvl4i6CNE


