Title: DjangoCon US 2017 - Files in Django by Josh Schneier
Publication date: 2017-09-07
Playlist: DjangoCon US 2017
Description: 
	DjangoCon US 2017 - Files in Django by Josh Schneier

1. The API overview

Short introduction
Go over the difference between static & media files
Run through the File abstraction and the various settings
Django Storage API, collectstatic etc

2. Production & Development configuration

Whitenoise/dj-static/Nginx for static files
Cloud storage providers for media & static files (S3 etc, mention some popular libraries such as django-storages)
CDNs

3. Implement a storage engine together & the future

Implementation - practicing what we just learned to solidify understanding
Closing remarks and mention possible future Django developments

This talk was presented at: https://2017.djangocon.us/talks/files-in-django/

LINKS:
Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:15,639
[Music]

00:00:13,740 --> 00:00:17,980
awesome great

00:00:15,639 --> 00:00:19,360
hi I'm Josh and I are for files in

00:00:17,980 --> 00:00:21,340
Django and I actually just made a

00:00:19,360 --> 00:00:23,140
Twitter account for all of you guys but

00:00:21,340 --> 00:00:24,520
I left my phone at the Airbnb so they've

00:00:23,140 --> 00:00:26,439
locked it because I didn't give them my

00:00:24,520 --> 00:00:27,430
phone but it will be quack duck hello

00:00:26,439 --> 00:00:28,480
which was the first thing that came into

00:00:27,430 --> 00:00:32,410
my mind

00:00:28,480 --> 00:00:34,660
this is files in Django so just quickly

00:00:32,410 --> 00:00:38,739
about me and the talk I've been using

00:00:34,660 --> 00:00:40,000
Django for a little while 1 3 getting in

00:00:38,739 --> 00:00:43,630
the custom user model was awesome as I

00:00:40,000 --> 00:00:44,290
recall as was native migrations and just

00:00:43,630 --> 00:00:47,620
keeps getting better

00:00:44,290 --> 00:00:49,000
so I maintain Django storages for the

00:00:47,620 --> 00:00:51,220
last couple years I gave a lighting talk

00:00:49,000 --> 00:00:52,930
about it I'll mention Django storages

00:00:51,220 --> 00:00:54,750
but this talk is not about that but I

00:00:52,930 --> 00:00:57,420
have a lot to say if you're interested

00:00:54,750 --> 00:01:00,239
so this talk will proceed in three parts

00:00:57,420 --> 00:01:03,010
it's an overview of the file API

00:01:00,239 --> 00:01:07,060
provided by Django static media storage

00:01:03,010 --> 00:01:08,740
that sort of thing some options slash

00:01:07,060 --> 00:01:10,720
recommendations for deployment to

00:01:08,740 --> 00:01:13,929
production and you know some caveats and

00:01:10,720 --> 00:01:15,939
things to be aware of and well writing a

00:01:13,929 --> 00:01:19,240
storage back-end will actually be demo

00:01:15,939 --> 00:01:20,710
storage back-end it's ipfs which is

00:01:19,240 --> 00:01:23,969
quite exciting and I just got it working

00:01:20,710 --> 00:01:26,619
so hopefully it works here so let's go

00:01:23,969 --> 00:01:28,329
so static and media files oh sorry

00:01:26,619 --> 00:01:30,009
part of the reason I'm giving this talk

00:01:28,329 --> 00:01:33,189
and it's on the beginner track is

00:01:30,009 --> 00:01:35,469
because I had a serious problem knowing

00:01:33,189 --> 00:01:36,579
or understanding or grokking the

00:01:35,469 --> 00:01:38,350
difference between static and media

00:01:36,579 --> 00:01:39,219
files there's all these settings they're

00:01:38,350 --> 00:01:41,380
both files

00:01:39,219 --> 00:01:43,270
you know static route and static URL

00:01:41,380 --> 00:01:46,119
media route and meteor URL why are there

00:01:43,270 --> 00:01:47,889
two and Django was one of the first

00:01:46,119 --> 00:01:52,450
pieces of programming I really really

00:01:47,889 --> 00:01:55,630
got into four or five years ago so the

00:01:52,450 --> 00:01:56,170
basic difference between them is quite

00:01:55,630 --> 00:01:59,529
straightforward

00:01:56,170 --> 00:02:00,520
static files are files that are

00:01:59,529 --> 00:02:01,659
everything else that power your

00:02:00,520 --> 00:02:04,509
application you know not everything

00:02:01,659 --> 00:02:10,390
unfortunately can be Python if only

00:02:04,509 --> 00:02:12,970
but CSS JavaScript image files and media

00:02:10,390 --> 00:02:16,269
files are our files that are uploaded by

00:02:12,970 --> 00:02:18,790
the user they come from its untrusted

00:02:16,269 --> 00:02:20,739
content static files you're verifying

00:02:18,790 --> 00:02:21,520
you know they're it's defined at collect

00:02:20,739 --> 00:02:24,220
static time

00:02:21,520 --> 00:02:27,850
Media files profile pictures what have

00:02:24,220 --> 00:02:29,740
you so I think part of the reason that

00:02:27,850 --> 00:02:31,270
it was a little confusing for me and I

00:02:29,740 --> 00:02:33,070
think for other people because I have a

00:02:31,270 --> 00:02:34,620
you Stern agency and I've ordered a lot

00:02:33,070 --> 00:02:38,020
of junior developers and I've noticed

00:02:34,620 --> 00:02:40,600
pretty consistent confusion is they are

00:02:38,020 --> 00:02:43,480
both use the same storage API to store

00:02:40,600 --> 00:02:45,820
them especially for local for

00:02:43,480 --> 00:02:48,790
development and oftentimes for

00:02:45,820 --> 00:02:50,050
production but there is this very

00:02:48,790 --> 00:02:53,290
important distinction that has important

00:02:50,050 --> 00:02:56,800
security concerns any time we're doing

00:02:53,290 --> 00:02:59,170
this untrusted input it's bad

00:02:56,800 --> 00:03:00,910
so about static files so static files

00:02:59,170 --> 00:03:05,200
really means the contribs attic files

00:03:00,910 --> 00:03:08,050
app which ships is that it's enabled by

00:03:05,200 --> 00:03:10,510
default when you do start project it's

00:03:08,050 --> 00:03:14,020
got a bunch of settings these settings

00:03:10,510 --> 00:03:18,910
are they all culminate and how collect

00:03:14,020 --> 00:03:21,070
static works so essentially what you're

00:03:18,910 --> 00:03:24,760
working with is you have your files in

00:03:21,070 --> 00:03:26,710
your static under static in your local

00:03:24,760 --> 00:03:29,980
development all your dependencies

00:03:26,710 --> 00:03:32,320
applications debug toolbar and and

00:03:29,980 --> 00:03:33,940
whatever other admin and third-party

00:03:32,320 --> 00:03:37,690
applications have static files up there

00:03:33,940 --> 00:03:39,670
including and you need to include those

00:03:37,690 --> 00:03:46,270
or else you'll get links breakage

00:03:39,670 --> 00:03:48,150
nothing will work so so yeah so it all

00:03:46,270 --> 00:03:50,140
comes together with collect aesthetic

00:03:48,150 --> 00:03:52,480
essentially the static file storage

00:03:50,140 --> 00:03:53,800
execute solve your finders looking

00:03:52,480 --> 00:03:56,110
through all your directories and placing

00:03:53,800 --> 00:03:58,870
them into static route stack URL is just

00:03:56,110 --> 00:04:01,810
the endpoint that hits the tell Jango

00:03:58,870 --> 00:04:03,940
that hey this is a static file if anyone

00:04:01,810 --> 00:04:05,260
was at the u.s. key talk a point that

00:04:03,940 --> 00:04:08,200
yesterday the point that was made

00:04:05,260 --> 00:04:09,790
continuously was you know the way that

00:04:08,200 --> 00:04:11,230
static files are served in development

00:04:09,790 --> 00:04:13,540
automatically is through run server

00:04:11,230 --> 00:04:16,120
which is also a static files management

00:04:13,540 --> 00:04:19,650
command and it's it's very unsecure

00:04:16,120 --> 00:04:21,580
it's never used it for production and

00:04:19,650 --> 00:04:26,530
it's nice because it just works

00:04:21,580 --> 00:04:29,230
automatically so that static files media

00:04:26,530 --> 00:04:32,080
files media files has a whole lot more

00:04:29,230 --> 00:04:33,310
settings and this is largely because

00:04:32,080 --> 00:04:34,830
you're dealing with things that are

00:04:33,310 --> 00:04:36,750
coming in from the internet and

00:04:34,830 --> 00:04:39,900
there's things you want to control

00:04:36,750 --> 00:04:42,120
things that are important to think about

00:04:39,900 --> 00:04:42,800
you know denial of service attacks that

00:04:42,120 --> 00:04:47,310
sort of thing

00:04:42,800 --> 00:04:49,379
excuse me so like I was saying media

00:04:47,310 --> 00:04:51,599
route and media RL is confusing for me

00:04:49,379 --> 00:04:53,520
at first they're analogous to static

00:04:51,599 --> 00:04:55,530
route and static URL and so much as

00:04:53,520 --> 00:04:57,180
static route is where collect static

00:04:55,530 --> 00:04:59,340
places all of your static files at the

00:04:57,180 --> 00:05:03,030
end and media route is where your media

00:04:59,340 --> 00:05:05,009
files end up these are different because

00:05:03,030 --> 00:05:07,949
you really don't want someone to upload

00:05:05,009 --> 00:05:09,539
a static media file that has a path of

00:05:07,949 --> 00:05:10,560
your static file that will then get

00:05:09,539 --> 00:05:12,569
served to all of your users

00:05:10,560 --> 00:05:15,449
maybe they someone uploads jQuery j/s

00:05:12,569 --> 00:05:17,550
and suddenly their javascript is

00:05:15,449 --> 00:05:19,169
executing in your context if there was a

00:05:17,550 --> 00:05:20,340
fallback so there it's enforced by the

00:05:19,169 --> 00:05:25,319
framework these have to be different

00:05:20,340 --> 00:05:26,729
paths they have to be different URLs for

00:05:25,319 --> 00:05:28,500
whatever reason that it's not actually

00:05:26,729 --> 00:05:32,099
clear to me this is something I add too

00:05:28,500 --> 00:05:33,389
to every project it's taken from the

00:05:32,099 --> 00:05:35,460
documentation which is of course

00:05:33,389 --> 00:05:38,300
fantastic the best documentation I've

00:05:35,460 --> 00:05:42,060
ever seen in a sulfur project really and

00:05:38,300 --> 00:05:44,430
it adds serving of media files to your

00:05:42,060 --> 00:05:48,690
using the same same tool same tooling

00:05:44,430 --> 00:05:50,370
same view as static files to your

00:05:48,690 --> 00:05:52,680
development and you can see it's wrapped

00:05:50,370 --> 00:05:54,840
in settings at debug because never use

00:05:52,680 --> 00:05:59,699
run server especially never use run

00:05:54,840 --> 00:06:02,520
server for serving your media files in

00:05:59,699 --> 00:06:04,740
production so the third major piece of

00:06:02,520 --> 00:06:08,759
this that unifies them is the storage

00:06:04,740 --> 00:06:10,440
API and it's a pretty straightforward

00:06:08,759 --> 00:06:13,830
interface hasn't really changed that

00:06:10,440 --> 00:06:16,409
much since 1.0 modulo you know the

00:06:13,830 --> 00:06:19,460
timezone awareness and a couple other

00:06:16,409 --> 00:06:21,779
things for max length names and such and

00:06:19,460 --> 00:06:23,099
the core ships with file system storage

00:06:21,779 --> 00:06:26,340
where you know when you're defining your

00:06:23,099 --> 00:06:28,020
media route your static routes you see

00:06:26,340 --> 00:06:29,250
all of a sudden you upload a file all of

00:06:28,020 --> 00:06:31,860
a sudden off of that your media route

00:06:29,250 --> 00:06:33,090
you probably forgot to get ignore it and

00:06:31,860 --> 00:06:34,289
then you went back and edit it to get

00:06:33,090 --> 00:06:36,270
ignore because you really don't want to

00:06:34,289 --> 00:06:38,580
upload your you know random cat photos

00:06:36,270 --> 00:06:41,789
that you're using for development which

00:06:38,580 --> 00:06:44,339
I've done before so there's a fairly

00:06:41,789 --> 00:06:47,419
straightforward interface not all of it

00:06:44,339 --> 00:06:47,419
is required

00:06:47,610 --> 00:06:55,930
and yeah so I'm gonna demonstrate a bit

00:06:52,660 --> 00:06:57,760
or or show a bit a novel one django

00:06:55,930 --> 00:07:01,480
storages which is probably the most

00:06:57,760 --> 00:07:03,790
popular a package that implements

00:07:01,480 --> 00:07:05,470
interface for various backends basically

00:07:03,790 --> 00:07:11,400
is a wrapper around third-party

00:07:05,470 --> 00:07:13,630
libraries that and this interface so

00:07:11,400 --> 00:07:14,860
generally speaking files in core i was

00:07:13,630 --> 00:07:16,840
actually not a hundreds not sure where

00:07:14,860 --> 00:07:21,130
to place this slide if I should go first

00:07:16,840 --> 00:07:23,350
or last but I think that it's kind of

00:07:21,130 --> 00:07:25,690
unlikely it's not super common to work

00:07:23,350 --> 00:07:28,990
with the file directly but what it

00:07:25,690 --> 00:07:31,720
actually shipping you is a django core

00:07:28,990 --> 00:07:33,340
files file which is just a very thin

00:07:31,720 --> 00:07:35,320
wrapper that does things like content

00:07:33,340 --> 00:07:36,730
chunking so usually this is the sort of

00:07:35,320 --> 00:07:37,840
thing that gets uploaded and you're

00:07:36,730 --> 00:07:39,850
working with you and working with an

00:07:37,840 --> 00:07:42,100
image field or you know a field dot file

00:07:39,850 --> 00:07:49,680
you're actually working with a file file

00:07:42,100 --> 00:07:51,910
file true story that's in my template so

00:07:49,680 --> 00:07:54,070
and I just want to mention that you can

00:07:51,910 --> 00:07:55,450
specify which storage to use instead of

00:07:54,070 --> 00:07:56,830
default file storage default file

00:07:55,450 --> 00:07:59,530
storage is what controls where are

00:07:56,830 --> 00:08:02,220
things the storage that is uploaded to

00:07:59,530 --> 00:08:05,470
images and and file fields by default

00:08:02,220 --> 00:08:08,980
there is one caveat I'll note or one

00:08:05,470 --> 00:08:10,480
annoying bug which is that I find that

00:08:08,980 --> 00:08:12,900
you don't want to use the same file

00:08:10,480 --> 00:08:15,430
storage and development and production

00:08:12,900 --> 00:08:17,470
and if you specify separate storages

00:08:15,430 --> 00:08:20,170
maybe you need different ACLs or you

00:08:17,470 --> 00:08:21,910
need different headers or whatever it is

00:08:20,170 --> 00:08:23,830
those get serialize into migrations look

00:08:21,910 --> 00:08:25,780
locally and that's usually not what you

00:08:23,830 --> 00:08:28,840
want production there's an open issue to

00:08:25,780 --> 00:08:30,160
turn call storage into a callable so you

00:08:28,840 --> 00:08:32,380
can you could pass your own callback

00:08:30,160 --> 00:08:35,200
function here which would which would

00:08:32,380 --> 00:08:40,870
solve that issue people have open many

00:08:35,200 --> 00:08:43,480
many issues on storages about this okay

00:08:40,870 --> 00:08:47,430
so that was the API overview and now I

00:08:43,480 --> 00:08:49,300
would like to talk static file serving

00:08:47,430 --> 00:08:52,030
so we definitely shouldn't use run

00:08:49,300 --> 00:08:55,570
server it's been driven in a lot it's a

00:08:52,030 --> 00:08:59,440
warning in the docs a lot so so what is

00:08:55,570 --> 00:09:01,030
to be done what's next and of course we

00:08:59,440 --> 00:09:02,950
want all the nice things that enable

00:09:01,030 --> 00:09:05,220
websites to be fast and performant

00:09:02,950 --> 00:09:08,620
things like caching headers things like

00:09:05,220 --> 00:09:11,220
hash hash files so there they're unique

00:09:08,620 --> 00:09:13,960
things like gzip compression

00:09:11,220 --> 00:09:16,270
minification which plugs in to collect

00:09:13,960 --> 00:09:17,590
static actually like you usually use

00:09:16,270 --> 00:09:20,050
something like compressor or whatever if

00:09:17,590 --> 00:09:24,490
you have sass you want to transcode it

00:09:20,050 --> 00:09:27,670
to CSS and minify it so one option which

00:09:24,490 --> 00:09:29,560
i think is totally valid is to use a

00:09:27,670 --> 00:09:32,170
reverse proxy whatever you're using for

00:09:29,560 --> 00:09:33,520
your reverse proxy anyway unicorn says

00:09:32,170 --> 00:09:36,010
you need a reverse proxy because it's

00:09:33,520 --> 00:09:39,720
vulnerable to slow loris so you use a

00:09:36,010 --> 00:09:42,550
proxy like nginx to handle this for you

00:09:39,720 --> 00:09:43,930
and there's there's a lot of goods about

00:09:42,550 --> 00:09:45,970
a lot of good things to say about this

00:09:43,930 --> 00:09:47,890
the main reason not the main reason one

00:09:45,970 --> 00:09:51,850
important reason you'd want you want to

00:09:47,890 --> 00:09:55,360
do this mr. reduce load on django python

00:09:51,850 --> 00:09:56,770
is slow even though it's using send file

00:09:55,360 --> 00:09:58,360
it's still running through django

00:09:56,770 --> 00:10:00,850
requests that could be better served you

00:09:58,360 --> 00:10:02,770
know answering doing all RM queries and

00:10:00,850 --> 00:10:05,230
looking at api's and all sorts of

00:10:02,770 --> 00:10:08,770
context switching that nginx is highly

00:10:05,230 --> 00:10:10,510
optimized for this cons you need to have

00:10:08,770 --> 00:10:12,100
access to the said reverse proxy I've

00:10:10,510 --> 00:10:15,910
deployed a lot of applications to Heroku

00:10:12,100 --> 00:10:18,100
it's popular and it's not not really a

00:10:15,910 --> 00:10:20,530
thing that you have access to I've also

00:10:18,100 --> 00:10:24,580
done a lot of work with AWS and I've

00:10:20,530 --> 00:10:28,540
done Apache enter and excuse me nginx

00:10:24,580 --> 00:10:31,360
for this it's it's quite fiddly and sort

00:10:28,540 --> 00:10:33,370
of best practices change it's hard to

00:10:31,360 --> 00:10:35,380
get right and easy to get wrong which

00:10:33,370 --> 00:10:37,000
are definitely not the same thing it's

00:10:35,380 --> 00:10:40,570
not gonna compromise your website

00:10:37,000 --> 00:10:41,800
probably but it'll get slower and you

00:10:40,570 --> 00:10:46,120
won't really realize it because you

00:10:41,800 --> 00:10:48,790
think I configured it well I'm done so

00:10:46,120 --> 00:10:51,700
there are other options another

00:10:48,790 --> 00:10:54,370
possibility is white noise which is a

00:10:51,700 --> 00:10:56,020
fantastic package it bursts onto the

00:10:54,370 --> 00:10:58,270
scene from my perspective 2 or 3 years

00:10:56,020 --> 00:11:00,310
ago before that a lot of people use DJ

00:10:58,270 --> 00:11:02,050
static and it was sort of I think people

00:11:00,310 --> 00:11:05,050
probably used run server at some point

00:11:02,050 --> 00:11:06,250
I'm not sure but white noise is is you

00:11:05,050 --> 00:11:08,590
know I was gonna list about a bunch of

00:11:06,250 --> 00:11:09,970
possibilities here but I think sometimes

00:11:08,590 --> 00:11:12,430
choice is dangerous and white noise just

00:11:09,970 --> 00:11:14,160
works it's very easy to install it ships

00:11:12,430 --> 00:11:16,650
with all the best practices including

00:11:14,160 --> 00:11:19,470
Jesus brought li hash files caching

00:11:16,650 --> 00:11:21,120
headers it's pure Python Brawley is a

00:11:19,470 --> 00:11:22,440
new compression algorithm from Google

00:11:21,120 --> 00:11:25,620
that's based on like a dictionary of

00:11:22,440 --> 00:11:30,000
common things for beating Huffman

00:11:25,620 --> 00:11:33,780
encoding for gzip and there's actually a

00:11:30,000 --> 00:11:37,800
open ticket for Django to somehow

00:11:33,780 --> 00:11:40,380
integrate white noise in to court which

00:11:37,800 --> 00:11:42,000
would be really great because right now

00:11:40,380 --> 00:11:44,160
it's you need to go a third party and

00:11:42,000 --> 00:11:48,870
white noise this pure Python and just

00:11:44,160 --> 00:11:50,400
works it's it's quite nice so one of the

00:11:48,870 --> 00:11:52,410
drawbacks of this of course is you do

00:11:50,400 --> 00:11:54,720
end up hitting Python you know you do it

00:11:52,410 --> 00:11:57,840
boys it's ships its django middleware

00:11:54,720 --> 00:12:00,240
that sees the you know the it starts

00:11:57,840 --> 00:12:05,460
with static static URL and returns the

00:12:00,240 --> 00:12:07,410
file so a common thing to do is if your

00:12:05,460 --> 00:12:09,240
site is small no traffic then this is

00:12:07,410 --> 00:12:09,960
fine it really it's not that important I

00:12:09,240 --> 00:12:12,630
think there's a lot of premature

00:12:09,960 --> 00:12:14,760
optimization about that and we know

00:12:12,630 --> 00:12:16,830
white noise sets the right headers so

00:12:14,760 --> 00:12:20,490
but it's quite nice to put it behind a

00:12:16,830 --> 00:12:22,020
CDN content distribution network so AWS

00:12:20,490 --> 00:12:23,520
has cloud front there's Akamai there's a

00:12:22,020 --> 00:12:25,260
lot of them basically they have servers

00:12:23,520 --> 00:12:28,200
everywhere that are closer to your users

00:12:25,260 --> 00:12:29,400
they'll request a request will come in

00:12:28,200 --> 00:12:30,930
for the file if they don't have it

00:12:29,400 --> 00:12:33,000
they'll grab it from your origin server

00:12:30,930 --> 00:12:35,370
in this case from Django via white noise

00:12:33,000 --> 00:12:38,370
and they'll cash it there at the at the

00:12:35,370 --> 00:12:39,930
edge so it's very fast very nice

00:12:38,370 --> 00:12:42,080
especially you know your servers are in

00:12:39,930 --> 00:12:46,680
Virginia and you have users in Hong Kong

00:12:42,080 --> 00:12:48,000
and one thing that's common which I

00:12:46,680 --> 00:12:50,880
actually do not recommend at all is

00:12:48,000 --> 00:12:53,070
serving static files out of s3 it's

00:12:50,880 --> 00:12:56,400
really common people said you know they

00:12:53,070 --> 00:12:57,810
use s3 storage from from a dream

00:12:56,400 --> 00:13:00,840
storages and they set the different

00:12:57,810 --> 00:13:03,360
location locations and and that's just

00:13:00,840 --> 00:13:05,010
what they do it's it's very brittle it's

00:13:03,360 --> 00:13:06,870
like you have to put your Amazon API

00:13:05,010 --> 00:13:10,620
keys somewhere so you can actually you

00:13:06,870 --> 00:13:11,940
know go ahead and deploy it doesn't you

00:13:10,620 --> 00:13:13,710
need to keep some sort of manifest or

00:13:11,940 --> 00:13:15,360
else it'll it'll upload the same files

00:13:13,710 --> 00:13:20,580
every time or it's making a lot of

00:13:15,360 --> 00:13:22,020
exists API calls so I actually honestly

00:13:20,580 --> 00:13:25,260
think that if you're using a CDN with

00:13:22,020 --> 00:13:27,150
white noise it'll just work better

00:13:25,260 --> 00:13:28,980
that being said for media files you

00:13:27,150 --> 00:13:32,210
should definitely not use your own

00:13:28,980 --> 00:13:34,280
domain there's a big security risk

00:13:32,210 --> 00:13:37,820
people can craft all sorts of fun

00:13:34,280 --> 00:13:40,800
malicious content that you know has the

00:13:37,820 --> 00:13:42,350
file extension of jpg but isn't jpg it's

00:13:40,800 --> 00:13:45,360
it's some sort of flash or who knows

00:13:42,350 --> 00:13:46,590
there's a million of these attacks we

00:13:45,360 --> 00:13:48,360
will put out a nice paper saying you

00:13:46,590 --> 00:13:50,550
know this is why we host content from a

00:13:48,360 --> 00:13:52,080
different domain and you'll see a lot of

00:13:50,550 --> 00:13:56,040
sites do this you know though you have

00:13:52,080 --> 00:13:57,840
example.com and you have static -

00:13:56,040 --> 00:13:59,490
example.com but not static died because

00:13:57,840 --> 00:14:03,540
subdomains still can execute in the same

00:13:59,490 --> 00:14:08,550
security context we're really relying on

00:14:03,540 --> 00:14:09,420
here is the same origin policy so this

00:14:08,550 --> 00:14:11,490
is the sort of thing where I think

00:14:09,420 --> 00:14:14,640
general storage is or similar s3 is

00:14:11,490 --> 00:14:18,170
perfect you still use a CDN because I

00:14:14,640 --> 00:14:21,210
have noticed that or I think s3 is fine

00:14:18,170 --> 00:14:23,730
for I've worked on a bunch of sites that

00:14:21,210 --> 00:14:25,740
use our heavy ecommerce and when you

00:14:23,730 --> 00:14:28,140
load a full page s3 is really not meant

00:14:25,740 --> 00:14:29,790
to be content serving platform it's like

00:14:28,140 --> 00:14:32,220
in a fantastic object store but for

00:14:29,790 --> 00:14:33,300
serving content it just I don't know if

00:14:32,220 --> 00:14:35,910
they're doing IP throttling there's a

00:14:33,300 --> 00:14:37,530
lot of bottlenecks hard so then I put a

00:14:35,910 --> 00:14:41,310
CDN in front of my ass three bucket and

00:14:37,530 --> 00:14:43,530
it just it works really nicely I will

00:14:41,310 --> 00:14:46,290
say I had a really really really fun but

00:14:43,530 --> 00:14:47,580
with s3 and course headers and image

00:14:46,290 --> 00:14:49,350
tags and loading the same energy of

00:14:47,580 --> 00:14:50,970
JavaScript so you can ask me about that

00:14:49,350 --> 00:14:56,790
sometime I had to call it my friend who

00:14:50,970 --> 00:15:00,270
works on Chrome cool so now it's the fun

00:14:56,790 --> 00:15:02,250
fun part yeah fun so like I said I

00:15:00,270 --> 00:15:06,450
maintain Django storages it's a bunch of

00:15:02,250 --> 00:15:08,040
backends as your SFTP whatever so I

00:15:06,450 --> 00:15:10,170
thought let's write a storage back-end

00:15:08,040 --> 00:15:11,670
that was way too ambitious because I

00:15:10,170 --> 00:15:14,820
just bang that out in the last two hours

00:15:11,670 --> 00:15:16,500
and I barely got it done but so IP FS is

00:15:14,820 --> 00:15:18,030
the interplanetary file system I love

00:15:16,500 --> 00:15:20,370
the name the lame the name alone mean

00:15:18,030 --> 00:15:21,660
I'd do this but you know it's a

00:15:20,370 --> 00:15:23,540
distributed peer-to-peer content

00:15:21,660 --> 00:15:27,720
addressable version immutable storage

00:15:23,540 --> 00:15:29,430
every buzzword imaginable if you saw the

00:15:27,720 --> 00:15:33,320
file coin initial coin offering this is

00:15:29,430 --> 00:15:35,760
these guys so I just wanted to show off

00:15:33,320 --> 00:15:38,560
very quickly and then I'll take

00:15:35,760 --> 00:15:42,520
questions what it looks like

00:15:38,560 --> 00:15:46,510
so let's see so here I am running an IP

00:15:42,520 --> 00:15:55,170
FS demon and I quickly threw together a

00:15:46,510 --> 00:15:55,170
demo which has very standard yeah

00:15:55,350 --> 00:16:01,000
which has very standard model I think

00:15:58,750 --> 00:16:02,440
that every everyone should have this

00:16:01,000 --> 00:16:08,950
model at least maybe hidden and not

00:16:02,440 --> 00:16:12,790
admins accessible and I wrote and please

00:16:08,950 --> 00:16:14,560
do not use this anywhere I wrote I wrote

00:16:12,790 --> 00:16:20,080
must be one of the most insecure storage

00:16:14,560 --> 00:16:22,270
backends ever ipfs sub process based so

00:16:20,080 --> 00:16:27,610
ipfs source content immutably by its

00:16:22,270 --> 00:16:29,950
hash so i I read through the docs and

00:16:27,610 --> 00:16:35,620
quickly put together an IP FS based

00:16:29,950 --> 00:16:36,040
storage back-end so this is what this

00:16:35,620 --> 00:16:38,650
looks like

00:16:36,040 --> 00:16:41,290
I would like to go just to cap parties

00:16:38,650 --> 00:16:43,150
and I have a couple of images and I

00:16:41,290 --> 00:16:44,830
don't need to you know terminate with

00:16:43,150 --> 00:16:54,130
cat because I already got that so if we

00:16:44,830 --> 00:16:57,820
just art with party how'd you save then

00:16:54,130 --> 00:17:04,480
indeed you can see that this is now

00:16:57,820 --> 00:17:07,870
saved in my ipfs back-end so I have an

00:17:04,480 --> 00:17:09,220
IP FS node running locally you want to

00:17:07,870 --> 00:17:10,689
talk about crypto and blockchain please

00:17:09,220 --> 00:17:12,400
do not ask any questions about it but we

00:17:10,689 --> 00:17:21,900
can talk about it outside or over

00:17:12,400 --> 00:17:21,900
whatever we're doing later so questions

00:17:26,280 --> 00:17:32,680
you mentioned earlier putting a content

00:17:30,370 --> 00:17:37,060
delivery network between your s3 object

00:17:32,680 --> 00:17:38,680
and the people you're serving it to

00:17:37,060 --> 00:17:43,870
could you elaborate on that some more

00:17:38,680 --> 00:17:46,180
sure so the general principle which

00:17:43,870 --> 00:17:49,900
whatever quickly would be that you then

00:17:46,180 --> 00:17:52,750
your your links you instead of settings

00:17:49,900 --> 00:17:56,920
where your links or your static URL

00:17:52,750 --> 00:17:58,180
rather is is the in the case of cloud

00:17:56,920 --> 00:18:02,200
front it would be like you know cloud

00:17:58,180 --> 00:18:03,280
Frank dive net slash whatever and so all

00:18:02,200 --> 00:18:04,870
of your links that were going to serve

00:18:03,280 --> 00:18:06,760
to the user would be those would be

00:18:04,870 --> 00:18:08,980
links linking to cloud front so when you

00:18:06,760 --> 00:18:09,670
actually when the user clicks or views

00:18:08,980 --> 00:18:11,260
or downloads

00:18:09,670 --> 00:18:13,060
you know loads that image tiger or

00:18:11,260 --> 00:18:14,710
what-have-you it would go to cloud front

00:18:13,060 --> 00:18:16,720
cloud from a check its local cache if it

00:18:14,710 --> 00:18:18,250
doesn't exist it would go to your server

00:18:16,720 --> 00:18:20,170
and hit your server which would return

00:18:18,250 --> 00:18:21,880
that setting all sorts of nice caching

00:18:20,170 --> 00:18:23,590
headers saying hey cloud front since

00:18:21,880 --> 00:18:27,880
we've hashed this you know cache it for

00:18:23,590 --> 00:18:31,090
30 years and then it every time that

00:18:27,880 --> 00:18:32,290
that request came back to the cloud

00:18:31,090 --> 00:18:34,680
front it would already be there so

00:18:32,290 --> 00:18:40,510
wouldn't even have to go to your server

00:18:34,680 --> 00:18:43,360
so thanks for separating media content

00:18:40,510 --> 00:18:46,780
user uploaded media from the actual

00:18:43,360 --> 00:18:50,320
static files does it also include like

00:18:46,780 --> 00:18:52,480
PDF files or Doc's that user upload you

00:18:50,320 --> 00:18:55,780
shouldn't save them or serve save them

00:18:52,480 --> 00:18:59,500
on your own domain yeah I mean any any

00:18:55,780 --> 00:19:00,880
user content I would say is I mean PDF

00:18:59,500 --> 00:19:02,440
file doesn't it's really hard to

00:19:00,880 --> 00:19:03,610
validate a PDF files of PDF file you

00:19:02,440 --> 00:19:05,170
know you could read you could use lib

00:19:03,610 --> 00:19:07,240
magic to read the header but just

00:19:05,170 --> 00:19:10,090
because it ends in PDF doesn't mean it

00:19:07,240 --> 00:19:15,040
doesn't mean anything basically and PDF

00:19:10,090 --> 00:19:20,850
is binary rights I should thank you for

00:19:15,040 --> 00:19:23,320
that for media uploads how do you stop

00:19:20,850 --> 00:19:28,150
different users from uploading or

00:19:23,320 --> 00:19:33,730
overriding other users files yeah so it

00:19:28,150 --> 00:19:36,510
it depends if there's a for example

00:19:33,730 --> 00:19:36,510
there one of the

00:19:37,130 --> 00:19:42,620
API methods in that interface for

00:19:39,830 --> 00:19:44,660
storages is get available name so in

00:19:42,620 --> 00:19:46,970
that your Sorge back and could check

00:19:44,660 --> 00:19:49,360
does this name exist maybe you want a

00:19:46,970 --> 00:19:51,830
user to be able to upload their own file

00:19:49,360 --> 00:19:53,540
in that case I'd say you probably need

00:19:51,830 --> 00:19:55,040
some domain logic in front of it because

00:19:53,540 --> 00:19:57,020
in that case the business object gets

00:19:55,040 --> 00:19:58,910
complicated there's a there's a there's

00:19:57,020 --> 00:20:00,470
a setting to do this at least in like

00:19:58,910 --> 00:20:03,230
the botto backend but it's just it's

00:20:00,470 --> 00:20:05,210
just changing get available name for a

00:20:03,230 --> 00:20:06,680
lot of files for a lot of stuff it's

00:20:05,210 --> 00:20:08,030
it's really nice formated

00:20:06,680 --> 00:20:13,100
I'm able to like you know go down

00:20:08,030 --> 00:20:15,680
directories so I use the upload to link

00:20:13,100 --> 00:20:17,450
which can take a call back to say like

00:20:15,680 --> 00:20:19,040
hey put it under this namespace which I

00:20:17,450 --> 00:20:20,630
you know I don't let the user control I

00:20:19,040 --> 00:20:21,710
say oh it's based on the user as ID in

00:20:20,630 --> 00:20:24,260
which case it's almost like they have

00:20:21,710 --> 00:20:26,600
their own separate file thing there is

00:20:24,260 --> 00:20:28,490
some trickery which is why it's always

00:20:26,600 --> 00:20:30,500
good to use a library where you can

00:20:28,490 --> 00:20:31,940
imagine someone could upload a file that

00:20:30,500 --> 00:20:33,200
starts with dot dot dot dot and then

00:20:31,940 --> 00:20:37,610
suddenly they're doing a directory

00:20:33,200 --> 00:20:39,470
traversal and it's dangerous so yeah

00:20:37,610 --> 00:20:41,720
that's why this sort of any user stuff

00:20:39,470 --> 00:20:43,940
sorry security related stuff is usually

00:20:41,720 --> 00:20:45,830
not the best idea to write your own I I

00:20:43,940 --> 00:20:47,990
think there's too much like nobody

00:20:45,830 --> 00:20:49,610
should write it in the community but I

00:20:47,990 --> 00:20:53,150
think it's it really needs a lot of

00:20:49,610 --> 00:20:55,670
thought put into it do you have any

00:20:53,150 --> 00:21:05,710
recommended patterns or best practices

00:20:55,670 --> 00:21:09,760
around access control yeah so I just was

00:21:05,710 --> 00:21:14,600
looking at this for for a couple clients

00:21:09,760 --> 00:21:17,950
so for the cloud stuff it's pretty

00:21:14,600 --> 00:21:21,410
normal to make you know your your bucket

00:21:17,950 --> 00:21:23,570
for yesterday's case is private by

00:21:21,410 --> 00:21:26,630
default the ACL and then you have to

00:21:23,570 --> 00:21:28,100
have signed URLs but anyone with the

00:21:26,630 --> 00:21:31,580
signed URL which you can include a

00:21:28,100 --> 00:21:33,410
timeout can get it past that you really

00:21:31,580 --> 00:21:36,860
end up having to do something where you

00:21:33,410 --> 00:21:38,690
put because without that you know that's

00:21:36,860 --> 00:21:40,340
something that that amazon is mediating

00:21:38,690 --> 00:21:43,160
with you and I'm sure it exists for

00:21:40,340 --> 00:21:46,280
others but Amazon is just the provider

00:21:43,160 --> 00:21:47,630
I'm most familiar with past that you end

00:21:46,280 --> 00:21:49,730
up having to just put your own view in

00:21:47,630 --> 00:21:51,020
front of it which you know it gets much

00:21:49,730 --> 00:21:52,520
slower because then

00:21:51,020 --> 00:21:54,020
you need to do the logic yourself they

00:21:52,520 --> 00:21:55,880
need to fetch the file and then you need

00:21:54,020 --> 00:21:56,990
to serve it where as if it's coming

00:21:55,880 --> 00:21:58,520
directly from Amazon

00:21:56,990 --> 00:22:00,770
you know you generate the link you give

00:21:58,520 --> 00:22:02,800
the link to the user and you know you

00:22:00,770 --> 00:22:05,000
could you could go to that directory

00:22:02,800 --> 00:22:08,900
until cows come out if you don't have

00:22:05,000 --> 00:22:12,530
the the hash sign your L parameters it

00:22:08,900 --> 00:22:15,770
doesn't matter but there is I mean there

00:22:12,530 --> 00:22:16,820
is you know I have my users the links

00:22:15,770 --> 00:22:18,740
expire after an hour

00:22:16,820 --> 00:22:21,230
I've already had multiple people say hey

00:22:18,740 --> 00:22:23,390
it's broken well I could make it never

00:22:21,230 --> 00:22:25,100
expire but then you know if the link

00:22:23,390 --> 00:22:27,170
gets out it's never it's not private

00:22:25,100 --> 00:22:32,000
anymore or depends on your trade-offs

00:22:27,170 --> 00:22:34,480
that you're willing to look at it any

00:22:32,000 --> 00:22:36,710
other questions

00:22:34,480 --> 00:22:44,779
all right thanks Josh

00:22:36,710 --> 00:22:44,779

YouTube URL: https://www.youtube.com/watch?v=RfTNBLiWjMI


