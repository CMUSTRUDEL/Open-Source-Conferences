Title: DjangoCon US 2017 - Taking Django Distributed by Andrew Godwin
Publication date: 2017-09-07
Playlist: DjangoCon US 2017
Description: 
	DjangoCon US 2017 - Taking Django Distributed by Andrew Godwin

While some code happily lives on a single server forever, most big projects will have to cross the boundary into running both their application and storing their data across multiple systems. The basic strategies are well-known, but weâ€™ll take a look at what to do as you cross the painful threshold where you canâ€™t run your app as a monolith or store everything on a single database server.

Among other things, weâ€™ll look at how to split up business logic and application code to run on different servers, how to scale to handle different kinds of web traffic (read-heavy, write-heavy, and long-connections/WebSockets), when and how to make parts of your code not run inline with HTTP processing, strategies for storing data across multiple machines, and how to structure your engineering team to best cope with all these changes.

Weâ€™ll also look at a few apparently innocuous decisions and the spiral of bad performance they lead to, and how to recognise some of these common problems so you can avoid them yourself in future.

This talk was presented at: https://2017.djangocon.us/talks/taking-django-distributed/

LINKS:
Follow Andrew Godwin ðŸ‘‡
On Twitter: https://twitter.com/andrewgodwin
Official homepage: https://www.aeracode.org

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:17,150
[Music]

00:00:15,080 --> 00:00:19,280
as Adam just told you I'm here to talk

00:00:17,150 --> 00:00:21,040
about taking Django distributed but

00:00:19,280 --> 00:00:23,810
first of all a little bit about myself

00:00:21,040 --> 00:00:24,710
and that means making the slides advance

00:00:23,810 --> 00:00:27,439
there we go

00:00:24,710 --> 00:00:29,570
so I as previously mentioned I'm a

00:00:27,439 --> 00:00:31,310
django core developer I am perhaps most

00:00:29,570 --> 00:00:33,980
famous for working on south and

00:00:31,310 --> 00:00:35,960
migrations in the past I very gratefully

00:00:33,980 --> 00:00:37,579
handed off migrations to Marcus a while

00:00:35,960 --> 00:00:39,500
back and these days I work on channels

00:00:37,579 --> 00:00:41,960
which we'll talk about in a second my

00:00:39,500 --> 00:00:44,840
day job is a senior software engineer at

00:00:41,960 --> 00:00:46,730
Eventbrite the ticketing company and I

00:00:44,840 --> 00:00:48,920
generally have a very bad tendency to

00:00:46,730 --> 00:00:51,800
run towards code on fire rather than

00:00:48,920 --> 00:00:54,109
away from it it's a problem I know I'm

00:00:51,800 --> 00:00:55,879
talking through it's fine so I have some

00:00:54,109 --> 00:00:58,039
bad news if you just hate you they

00:00:55,879 --> 00:00:59,359
really don't like you and the second

00:00:58,039 --> 00:01:01,510
piece of bad news is this makes the

00:00:59,359 --> 00:01:04,489
distributor computing very difficult and

00:01:01,510 --> 00:01:07,220
for a long time I'm sure you will agree

00:01:04,489 --> 00:01:08,030
with me like in my past my reaction to

00:01:07,220 --> 00:01:10,100
this was very simple

00:01:08,030 --> 00:01:12,680
I'm gonna build a monolith it's me

00:01:10,100 --> 00:01:14,870
beautiful have nice clean edges all the

00:01:12,680 --> 00:01:16,790
code in one place we can have one

00:01:14,870 --> 00:01:19,400
application deploy to one server and

00:01:16,790 --> 00:01:21,590
we're gonna be very happy and this does

00:01:19,400 --> 00:01:22,970
work for a long time long lists runs

00:01:21,590 --> 00:01:25,520
some of the most successful sites in the

00:01:22,970 --> 00:01:27,850
world and before I even start this talk

00:01:25,520 --> 00:01:29,899
properly one piece of advice is don't

00:01:27,850 --> 00:01:32,270
necessarily move away from the monolith

00:01:29,899 --> 00:01:33,740
this talk is for you if you want to or

00:01:32,270 --> 00:01:35,090
if you think you have to and they're

00:01:33,740 --> 00:01:36,920
definitely reasons you should not go

00:01:35,090 --> 00:01:40,369
into those but it's not necessarily a

00:01:36,920 --> 00:01:41,930
bad thing up front so if you are

00:01:40,369 --> 00:01:43,909
thinking about a long list you're

00:01:41,930 --> 00:01:45,710
thinking well it's time to split things

00:01:43,909 --> 00:01:47,780
up a bit like what do I do I have all

00:01:45,710 --> 00:01:50,299
this code and usually what would happen

00:01:47,780 --> 00:01:52,009
is you'll come in having an existing

00:01:50,299 --> 00:01:54,020
code base this talk is for those who are

00:01:52,009 --> 00:01:55,759
coming in generally with a big assisting

00:01:54,020 --> 00:01:58,280
code base you have all the code in place

00:01:55,759 --> 00:01:59,990
you've probably got a few years or if

00:01:58,280 --> 00:02:02,570
you're Eventbrite almost a decade of

00:01:59,990 --> 00:02:04,640
code lying around that you want to sort

00:02:02,570 --> 00:02:06,680
of taken and wrestle and split it up and

00:02:04,640 --> 00:02:08,149
this isn't particularly easy if you're

00:02:06,680 --> 00:02:10,940
starting from scratch it's a little bit

00:02:08,149 --> 00:02:12,470
easier but I also was Temper starting

00:02:10,940 --> 00:02:14,780
from scratch in this way too because

00:02:12,470 --> 00:02:17,330
there's a very big tendency to what I

00:02:14,780 --> 00:02:19,070
call over architects to sort of take the

00:02:17,330 --> 00:02:21,110
best ideas and run with them with an

00:02:19,070 --> 00:02:23,239
amazing shard systems distributed with

00:02:21,110 --> 00:02:26,450
kubernetes and it serves five people you

00:02:23,239 --> 00:02:26,750
don't want that so there's three aspects

00:02:26,450 --> 00:02:29,840
to

00:02:26,750 --> 00:02:32,390
taking a site or a project distributed

00:02:29,840 --> 00:02:34,850
the one we talk about most probably is

00:02:32,390 --> 00:02:36,830
code or even databases if you're in that

00:02:34,850 --> 00:02:38,870
realm but I'm also gonna talk about

00:02:36,830 --> 00:02:41,180
teams one of the things I've learned to

00:02:38,870 --> 00:02:42,800
the last four years is that the way your

00:02:41,180 --> 00:02:45,170
team works and the way you engineer

00:02:42,800 --> 00:02:46,400
software at scale is very important you

00:02:45,170 --> 00:02:48,140
can't get anywhere with a team of a

00:02:46,400 --> 00:02:49,130
hundred people if they don't talk to

00:02:48,140 --> 00:02:50,600
each other if they don't understand what

00:02:49,130 --> 00:02:53,960
they're working on so I'll cover some of

00:02:50,600 --> 00:02:57,110
that as well so there is no one solution

00:02:53,960 --> 00:02:59,030
I can't give you a magical solution that

00:02:57,110 --> 00:03:00,680
you can walk out of this room and go

00:02:59,030 --> 00:03:02,690
back to your project and implement it in

00:03:00,680 --> 00:03:04,370
scale forever if I could I probably

00:03:02,690 --> 00:03:05,840
wouldn't be here I've been on a luxury

00:03:04,370 --> 00:03:08,420
yacht in the Caribbean sunning myself

00:03:05,840 --> 00:03:10,160
with hundred-dollar notes there is no

00:03:08,420 --> 00:03:12,980
magic solution you can't do this I'm

00:03:10,160 --> 00:03:15,080
here to try and give you both strategies

00:03:12,980 --> 00:03:17,330
that you could try and apply and also

00:03:15,080 --> 00:03:18,530
advice things were like you want to look

00:03:17,330 --> 00:03:20,480
at the patterns and recognize things

00:03:18,530 --> 00:03:21,950
happening before you see them one of the

00:03:20,480 --> 00:03:25,010
things I try and do in talks these days

00:03:21,950 --> 00:03:26,930
is give you the pointers to where to go

00:03:25,010 --> 00:03:27,350
and learn I can't cover a lot in 45

00:03:26,930 --> 00:03:29,840
minutes

00:03:27,350 --> 00:03:31,190
but I can try and give you the hint of

00:03:29,840 --> 00:03:32,840
what's out there the things that go and

00:03:31,190 --> 00:03:34,700
look for and research if they catch your

00:03:32,840 --> 00:03:37,880
eye off you start yourself finding

00:03:34,700 --> 00:03:39,410
yourself going down that path and the

00:03:37,880 --> 00:03:41,330
reason there's no one solution is sites

00:03:39,410 --> 00:03:44,510
are very different there's all different

00:03:41,330 --> 00:03:46,430
kinds of loads types and different kinds

00:03:44,510 --> 00:03:48,410
of implementation types these are just

00:03:46,430 --> 00:03:50,750
some of the ideas of what you can have

00:03:48,410 --> 00:03:52,910
for example if you're scaling Wikipedia

00:03:50,750 --> 00:03:54,890
Wikipedia is an incredibly read heavy

00:03:52,910 --> 00:03:56,540
site most of the traffic that sites

00:03:54,890 --> 00:03:58,760
people just go in there looking an

00:03:56,540 --> 00:04:00,049
article and leaving again a strategy it

00:03:58,760 --> 00:04:02,120
worked well for Wikipedia because it's

00:04:00,049 --> 00:04:03,709
very read heavy does not work well for

00:04:02,120 --> 00:04:05,480
something like Eventbrite where we're

00:04:03,709 --> 00:04:07,519
very write heavy people come to us to

00:04:05,480 --> 00:04:09,200
buy tickets to send us money a lot of

00:04:07,519 --> 00:04:11,090
all people do is very transaction heavy

00:04:09,200 --> 00:04:13,459
and involves a lot of sort of rights and

00:04:11,090 --> 00:04:15,769
updates and so we really can't scale in

00:04:13,459 --> 00:04:18,169
the same way it's true for the kind of

00:04:15,769 --> 00:04:19,940
load - you can have very predictable

00:04:18,169 --> 00:04:21,979
load which I'm sure when you have

00:04:19,940 --> 00:04:24,200
Wikipedia or Google it's sort of a

00:04:21,979 --> 00:04:25,970
gentle curve as you'll see later we can

00:04:24,200 --> 00:04:27,590
have spiky load as well you can have

00:04:25,970 --> 00:04:29,090
people's like oh well we're going to

00:04:27,590 --> 00:04:31,040
arrive in the next ten minutes for this

00:04:29,090 --> 00:04:32,690
blog post you put on reddit say is a

00:04:31,040 --> 00:04:35,060
very common thing that happens or even

00:04:32,690 --> 00:04:36,890
you know your thing that hosts events

00:04:35,060 --> 00:04:38,960
every year and so everyone's going to

00:04:36,890 --> 00:04:39,930
arrive in the ten minutes before tickets

00:04:38,960 --> 00:04:41,940
go on sale

00:04:39,930 --> 00:04:44,009
try and buy them and there's also things

00:04:41,940 --> 00:04:45,479
like the chatty this is often more

00:04:44,009 --> 00:04:46,729
problem in game development but it's

00:04:45,479 --> 00:04:49,320
coming more of a problem in the web

00:04:46,729 --> 00:04:51,030
previously the idea of having a website

00:04:49,320 --> 00:04:52,470
that would sort of repeatedly send small

00:04:51,030 --> 00:04:54,690
messages backwards and forwards was

00:04:52,470 --> 00:04:56,400
unusual and then Ajax came along and

00:04:54,690 --> 00:04:58,650
Ajax helped a bit but it's still quite

00:04:56,400 --> 00:05:00,750
bulky and now with sockets and smaller

00:04:58,650 --> 00:05:02,580
Ajax and frameworks we're starting to

00:05:00,750 --> 00:05:04,740
see those problems of sites are very

00:05:02,580 --> 00:05:06,449
chatty they talk backwards a lot and if

00:05:04,740 --> 00:05:08,460
you're in an area with high latency like

00:05:06,449 --> 00:05:11,610
say Australia where was last year last

00:05:08,460 --> 00:05:13,259
week that becomes a real problem but

00:05:11,610 --> 00:05:16,080
let's start with code what can we do

00:05:13,259 --> 00:05:16,979
with our code and how can we help deal

00:05:16,080 --> 00:05:20,310
with some of the problems with

00:05:16,979 --> 00:05:22,280
distribution so first of all you use

00:05:20,310 --> 00:05:26,190
Django you have apps they're an amazing

00:05:22,280 --> 00:05:28,979
abstraction to use for many years I put

00:05:26,190 --> 00:05:31,349
all my code and one app called core no

00:05:28,979 --> 00:05:32,550
it was all the models all the code all

00:05:31,349 --> 00:05:34,620
the templates are in one app I

00:05:32,550 --> 00:05:37,500
especially ignore the entire app system

00:05:34,620 --> 00:05:39,960
of Django this was fine for me as a

00:05:37,500 --> 00:05:42,449
single developer my blog is still this

00:05:39,960 --> 00:05:45,330
way there's once app food blog with all

00:05:42,449 --> 00:05:47,190
the geo tracking inside it and the place

00:05:45,330 --> 00:05:49,680
visiting and the talktrac it's all in

00:05:47,190 --> 00:05:51,539
one app but as you become part of a

00:05:49,680 --> 00:05:53,789
bigger team apps are a really useful

00:05:51,539 --> 00:05:56,639
line to draw boundaries across not just

00:05:53,789 --> 00:05:58,169
for way to put models and code but also

00:05:56,639 --> 00:05:59,729
to understand what your dependencies are

00:05:58,169 --> 00:06:03,300
who's working on what what the ownership

00:05:59,729 --> 00:06:06,000
is like and you want to really formalize

00:06:03,300 --> 00:06:07,440
those interfaces and one of the problems

00:06:06,000 --> 00:06:09,360
with apps and it's good in the short

00:06:07,440 --> 00:06:11,340
term is that it's very easy just call

00:06:09,360 --> 00:06:13,830
functions on models directly from

00:06:11,340 --> 00:06:15,930
another app if I'm writing you know a

00:06:13,830 --> 00:06:17,460
polling out for my blog I can just make

00:06:15,930 --> 00:06:20,460
the polling app call and find random

00:06:17,460 --> 00:06:23,039
posts in my my blogs post model this is

00:06:20,460 --> 00:06:24,449
fine at small scale as you scale up one

00:06:23,039 --> 00:06:27,449
of the biggest things with code is

00:06:24,449 --> 00:06:28,800
having very clean interfaces drawn

00:06:27,449 --> 00:06:31,349
between the different parts of your code

00:06:28,800 --> 00:06:33,120
this is useful for splitting up as we'll

00:06:31,349 --> 00:06:35,340
see in a second but it's also useful

00:06:33,120 --> 00:06:37,320
just generally in terms of thinking and

00:06:35,340 --> 00:06:39,419
reasoning about the code when a code

00:06:37,320 --> 00:06:41,310
base gets to a certain size no one

00:06:39,419 --> 00:06:44,370
person can understand all that code base

00:06:41,310 --> 00:06:46,860
and so you have to let yourself forget

00:06:44,370 --> 00:06:48,690
about pieces of the code and just think

00:06:46,860 --> 00:06:51,090
about them in the abstract and that's

00:06:48,690 --> 00:06:52,310
only possible if you have abstract

00:06:51,090 --> 00:06:54,530
pieces that have good

00:06:52,310 --> 00:06:56,390
without them and so these interfaces are

00:06:54,530 --> 00:06:57,950
very important for saying I can reason

00:06:56,390 --> 00:06:59,720
about this piece of code without

00:06:57,950 --> 00:07:03,830
remembering what's inside it because

00:06:59,720 --> 00:07:06,260
otherwise my head will explode if you do

00:07:03,830 --> 00:07:08,600
have interfaces and you do get to the

00:07:06,260 --> 00:07:10,640
right scale you can then choose to split

00:07:08,600 --> 00:07:13,460
along them and this is kind of where I

00:07:10,640 --> 00:07:15,650
say you have to go this far in many ways

00:07:13,460 --> 00:07:17,450
staying back here with formalized

00:07:15,650 --> 00:07:19,370
interfaces is good enough for most big

00:07:17,450 --> 00:07:21,860
companies but if you want to in want to

00:07:19,370 --> 00:07:23,630
go with separate machines having them

00:07:21,860 --> 00:07:26,660
there gives you the perfect place to

00:07:23,630 --> 00:07:28,910
stick the cleaver and split apart your

00:07:26,660 --> 00:07:31,760
codebase at that point as a sort of

00:07:28,910 --> 00:07:33,200
small example you can imagine a site

00:07:31,760 --> 00:07:34,430
that had things like inventory and

00:07:33,200 --> 00:07:36,410
payments like a ticketing site does

00:07:34,430 --> 00:07:38,930
inventory is a name for having tickets

00:07:36,410 --> 00:07:40,370
by the way and there's a very clear

00:07:38,930 --> 00:07:42,320
split there if you've built it correctly

00:07:40,370 --> 00:07:44,090
of saying oh we can take the whole

00:07:42,320 --> 00:07:46,010
payment system which deals with banks

00:07:44,090 --> 00:07:47,330
and settling and all the sort of

00:07:46,010 --> 00:07:49,640
horrible stuff that goes on there and

00:07:47,330 --> 00:07:51,200
move that to one part we can take the

00:07:49,640 --> 00:07:52,970
inventory system with things like oh you

00:07:51,200 --> 00:07:55,520
must sell exactly 30 tickets there's

00:07:52,970 --> 00:07:57,050
seat maps move that over here and we can

00:07:55,520 --> 00:07:59,150
take the presentation layer the rest of

00:07:57,050 --> 00:08:00,760
the logic and keep it separate and even

00:07:59,150 --> 00:08:02,600
this sort of concept is very helpful

00:08:00,760 --> 00:08:04,310
again you can read them about them

00:08:02,600 --> 00:08:06,080
separately you can say like I don't want

00:08:04,310 --> 00:08:07,580
to know about payments because it's

00:08:06,080 --> 00:08:10,280
really complicated it takes a whole team

00:08:07,580 --> 00:08:14,090
but I know that I can ask for a payment

00:08:10,280 --> 00:08:15,170
and get a confirmation back and one of

00:08:14,090 --> 00:08:17,180
the big problems when you split is

00:08:15,170 --> 00:08:19,610
communication and this is kind of the

00:08:17,180 --> 00:08:22,340
reason channels exists channels often

00:08:19,610 --> 00:08:24,080
comes across as oh this is made for

00:08:22,340 --> 00:08:26,330
WebSockets it's Andrews I need to get

00:08:24,080 --> 00:08:28,480
WebSockets across and that is true the

00:08:26,330 --> 00:08:31,130
gap I first saw in Django was Oh

00:08:28,480 --> 00:08:32,930
WebSockets need to happen but their

00:08:31,130 --> 00:08:34,700
secret is that WebSockets are not that

00:08:32,930 --> 00:08:36,620
hard there's plenty of good Python

00:08:34,700 --> 00:08:38,780
libraries to serve them the problem is

00:08:36,620 --> 00:08:41,420
not sockets the problem is making a

00:08:38,780 --> 00:08:43,490
system that lets you have sockets it's

00:08:41,420 --> 00:08:45,500
the idea of well we can have people talk

00:08:43,490 --> 00:08:46,610
to a server as soon as we have two

00:08:45,500 --> 00:08:48,590
servers and they try and chat to each

00:08:46,610 --> 00:08:50,930
other how do they talk server to server

00:08:48,590 --> 00:08:53,120
that idea just doesn't exist and the

00:08:50,930 --> 00:08:55,940
idea is the problem in bigger scale for

00:08:53,120 --> 00:08:59,300
services imagine you have three services

00:08:55,940 --> 00:09:01,910
and you're like oh okay all do is we'll

00:08:59,300 --> 00:09:04,190
have the three services just be like

00:09:01,910 --> 00:09:06,759
django apps on each one there have a

00:09:04,190 --> 00:09:09,199
whiskey runner and you just cool like

00:09:06,759 --> 00:09:11,750
HTTP endpoints and they give you JSON

00:09:09,199 --> 00:09:13,310
back very decent model no problem with

00:09:11,750 --> 00:09:15,379
it at small-scale definitely good thing

00:09:13,310 --> 00:09:19,160
to go for you have three to start with

00:09:15,379 --> 00:09:20,990
you then get 5mm first of all it's a bit

00:09:19,160 --> 00:09:23,329
of a pentagram which is worrying but

00:09:20,990 --> 00:09:27,290
secondly you can see like it's gone from

00:09:23,329 --> 00:09:30,339
three to ten interconnections and now

00:09:27,290 --> 00:09:33,019
what if you have ten services at old mmm

00:09:30,339 --> 00:09:35,689
and this problem gets bigger I have

00:09:33,019 --> 00:09:37,790
heard for example that you have two and

00:09:35,689 --> 00:09:39,019
a half thousand services you can imagine

00:09:37,790 --> 00:09:41,689
this model doesn't really work in that

00:09:39,019 --> 00:09:43,399
case and so the thing channels goes for

00:09:41,689 --> 00:09:45,800
which is not necessarily always a good

00:09:43,399 --> 00:09:48,050
fit but I think for most cases is is a

00:09:45,800 --> 00:09:50,149
message pass or a service bus this is

00:09:48,050 --> 00:09:52,160
where rather having interconnection all

00:09:50,149 --> 00:09:54,649
your services and all your individual

00:09:52,160 --> 00:09:55,759
pieces talk to a common bus and that is

00:09:54,649 --> 00:09:58,550
how they collaborate and share

00:09:55,759 --> 00:10:00,529
information among each other channels is

00:09:58,550 --> 00:10:02,269
a very good medium for this Eventbrite

00:10:00,529 --> 00:10:04,250
service infrastructure is now starting

00:10:02,269 --> 00:10:06,230
to be moved on to running not on

00:10:04,250 --> 00:10:07,579
channels in terms of sockets but on the

00:10:06,230 --> 00:10:09,589
channel layers the underlying

00:10:07,579 --> 00:10:11,360
implantation of communication stuff in

00:10:09,589 --> 00:10:12,920
there this is a really good way of

00:10:11,360 --> 00:10:15,230
starting to have that code separated out

00:10:12,920 --> 00:10:17,360
now I'll do some more tips at the end

00:10:15,230 --> 00:10:19,490
for how this works but for now we're

00:10:17,360 --> 00:10:22,459
going to go into databases and this is

00:10:19,490 --> 00:10:24,490
kind of the hardest part and this is not

00:10:22,459 --> 00:10:27,470
just because migrations exist but people

00:10:24,490 --> 00:10:29,209
often come to me and go Andrew why'd you

00:10:27,470 --> 00:10:31,670
need migrations we can just use git for

00:10:29,209 --> 00:10:34,339
code can't we do the same for data and

00:10:31,670 --> 00:10:34,730
the analogy is somewhat flawed it sounds

00:10:34,339 --> 00:10:36,410
lovely

00:10:34,730 --> 00:10:39,350
but oh well of course there must be a

00:10:36,410 --> 00:10:41,199
similar solution as there is for code as

00:10:39,350 --> 00:10:44,120
git came along I didn't and did for

00:10:41,199 --> 00:10:45,680
database let's get rid of a code and

00:10:44,120 --> 00:10:47,120
it's not quite true the problem with

00:10:45,680 --> 00:10:49,160
data is the data turns actually quite

00:10:47,120 --> 00:10:51,050
valuable and you can't just delete it

00:10:49,160 --> 00:10:53,720
and recreate it really nearly and also

00:10:51,050 --> 00:10:55,850
it's very very big we could have a

00:10:53,720 --> 00:10:57,709
system like it with pure versioning of

00:10:55,850 --> 00:11:00,170
all the database but it would make it a

00:10:57,709 --> 00:11:03,800
hundred times or ten times bigger when

00:11:00,170 --> 00:11:05,600
you have 60 or 70 gigabytes of data that

00:11:03,800 --> 00:11:07,459
is not a feasible prospect and that's

00:11:05,600 --> 00:11:09,439
kind of what we don't go there and the

00:11:07,459 --> 00:11:11,240
same applies of scaling you could think

00:11:09,439 --> 00:11:13,130
about the same kind of things you do

00:11:11,240 --> 00:11:14,839
with code almost to show those in a

00:11:13,130 --> 00:11:17,279
second but there are very different

00:11:14,839 --> 00:11:19,269
strategies for different kinds of right

00:11:17,279 --> 00:11:21,640
and so the thing you might think about

00:11:19,269 --> 00:11:23,740
when you have code is stand what we call

00:11:21,640 --> 00:11:25,839
vertically partitioned which is a fancy

00:11:23,740 --> 00:11:28,269
name for you give each table its own

00:11:25,839 --> 00:11:30,100
database the idea here is that say you

00:11:28,269 --> 00:11:32,950
have a couple of big tables I have like

00:11:30,100 --> 00:11:34,600
a big users table and maybe a big images

00:11:32,950 --> 00:11:36,010
table and a big comments table like that

00:11:34,600 --> 00:11:38,740
you know like a cheap Instagram for

00:11:36,010 --> 00:11:42,160
example and if they're all kind of the

00:11:38,740 --> 00:11:44,230
same size you can very cheaply use one

00:11:42,160 --> 00:11:46,450
third of the space on each machine by

00:11:44,230 --> 00:11:48,730
just putting one on each machine the

00:11:46,450 --> 00:11:51,220
problem with this is that you can't

00:11:48,730 --> 00:11:53,980
split further than per table if you have

00:11:51,220 --> 00:11:55,870
one giant table especially this just

00:11:53,980 --> 00:11:58,390
starts falling down almost as soon as

00:11:55,870 --> 00:11:59,680
you look at it and so the next strategy

00:11:58,390 --> 00:12:00,880
is a little bit different and I'm sure

00:11:59,680 --> 00:12:03,070
you've most of you have heard of it

00:12:00,880 --> 00:12:04,750
which is having replication in

00:12:03,070 --> 00:12:06,519
particular having a single main database

00:12:04,750 --> 00:12:09,279
that you write to having lots of

00:12:06,519 --> 00:12:11,560
replicas that you read from this is a

00:12:09,279 --> 00:12:13,000
very common pattern in Django there's

00:12:11,560 --> 00:12:15,790
lots of third party apps that let you do

00:12:13,000 --> 00:12:17,950
this it does come with some caveats I'll

00:12:15,790 --> 00:12:20,320
cover those quickly the main caveat is

00:12:17,950 --> 00:12:22,420
that there's a replication lag which

00:12:20,320 --> 00:12:24,459
means that when you write information to

00:12:22,420 --> 00:12:26,620
the main database it takes a little bit

00:12:24,459 --> 00:12:28,690
of time usually under a second hopefully

00:12:26,620 --> 00:12:30,190
under 100 milliseconds for that

00:12:28,690 --> 00:12:33,010
information to go into the main database

00:12:30,190 --> 00:12:35,019
to replicate to one of the replicas and

00:12:33,010 --> 00:12:37,209
then be available for you to read when

00:12:35,019 --> 00:12:39,339
you query the replicas now 100

00:12:37,209 --> 00:12:40,829
milliseconds is not a long time but it

00:12:39,339 --> 00:12:43,060
is if you're rendering a page and

00:12:40,829 --> 00:12:44,949
particularly one of the main problems

00:12:43,060 --> 00:12:47,050
people have is they will write to the

00:12:44,949 --> 00:12:49,420
main database and then just read from a

00:12:47,050 --> 00:12:52,089
replica straightaway and not think about

00:12:49,420 --> 00:12:53,980
the lag and you'll read back stuff that

00:12:52,089 --> 00:12:55,540
is old like you may have just saved a

00:12:53,980 --> 00:12:57,130
new comment and you'll read back the

00:12:55,540 --> 00:12:59,230
page again the point won't be in the

00:12:57,130 --> 00:13:00,970
replicas and you'll show the user a page

00:12:59,230 --> 00:13:03,100
without the thing they just submitted to

00:13:00,970 --> 00:13:04,690
you this is a very common problem and

00:13:03,100 --> 00:13:07,329
the solution to it is called database

00:13:04,690 --> 00:13:09,730
pinning what you do is you say okay well

00:13:07,329 --> 00:13:11,769
if somebody writes to a table inside one

00:13:09,730 --> 00:13:14,199
of our views for the rest of that view

00:13:11,769 --> 00:13:15,820
we will pin that view to read from the

00:13:14,199 --> 00:13:17,290
same main database as you wrote to

00:13:15,820 --> 00:13:21,160
because they don't get consistent

00:13:17,290 --> 00:13:24,399
information that's great until you

00:13:21,160 --> 00:13:26,829
realize if your site's write heavy you

00:13:24,399 --> 00:13:28,120
can't actually do that all the pages

00:13:26,829 --> 00:13:29,040
because then you're never going to use

00:13:28,120 --> 00:13:30,420
all the replicas you

00:13:29,040 --> 00:13:33,360
and always inviting and reading from

00:13:30,420 --> 00:13:34,529
that main database and so this is kind

00:13:33,360 --> 00:13:36,570
of one of those trips and this is where

00:13:34,529 --> 00:13:39,509
my favorite triangle which is the c.a.p

00:13:36,570 --> 00:13:41,730
triangle comes into play I'm sure many

00:13:39,509 --> 00:13:44,459
of you have heard of the idiom cheap

00:13:41,730 --> 00:13:46,440
fast and good pick any two this is the

00:13:44,459 --> 00:13:48,449
same four databases you get partition

00:13:46,440 --> 00:13:51,449
tolerance availability in consistency

00:13:48,449 --> 00:13:52,769
you get basically at most two and if

00:13:51,449 --> 00:13:55,860
you're very lucky you get at least one

00:13:52,769 --> 00:13:57,709
many many databases give you maybe half

00:13:55,860 --> 00:14:00,569
of one of these if you look at it right

00:13:57,709 --> 00:14:06,329
my sequel is somewhere on the one scale

00:14:00,569 --> 00:14:07,829
I have no bias I have a bias but then

00:14:06,329 --> 00:14:10,860
it's problem like inconsistency is

00:14:07,829 --> 00:14:12,269
everywhere you can imagine the idea that

00:14:10,860 --> 00:14:14,819
like you might think say post grades

00:14:12,269 --> 00:14:16,980
post grades is in theory a partition

00:14:14,819 --> 00:14:19,319
tolerant and consistent database in that

00:14:16,980 --> 00:14:21,120
it's not always available to read if one

00:14:19,319 --> 00:14:22,709
of the replicas fails but usually if you

00:14:21,120 --> 00:14:25,380
can read you'll get a consistent answer

00:14:22,709 --> 00:14:27,420
from what you just you just gave but

00:14:25,380 --> 00:14:28,620
that's not quite true of replication

00:14:27,420 --> 00:14:30,329
because there is still a little bit of

00:14:28,620 --> 00:14:32,310
inconsistency there it's only true in a

00:14:30,329 --> 00:14:34,920
single not a single sort of machine case

00:14:32,310 --> 00:14:37,290
and nagas certainty really creeps into

00:14:34,920 --> 00:14:39,000
all aspects of distributed computing in

00:14:37,290 --> 00:14:41,819
general and there's a very good reason

00:14:39,000 --> 00:14:46,410
for this and this reason is physics this

00:14:41,819 --> 00:14:48,360
is a nanosecond of wire the wonderful

00:14:46,410 --> 00:14:50,790
program at Grace Hopper was famous for

00:14:48,360 --> 00:14:53,550
giving in her lectures holding up

00:14:50,790 --> 00:14:56,040
nanoseconds of wire and the idea is this

00:14:53,550 --> 00:14:59,730
is the maximum distance electricity can

00:14:56,040 --> 00:15:01,430
travel in one nanosecond because the

00:14:59,730 --> 00:15:05,100
speed of light is a certain speed

00:15:01,430 --> 00:15:08,000
300,000 so 300 million meters per second

00:15:05,100 --> 00:15:10,350
I believe don't quote me on that and in

00:15:08,000 --> 00:15:12,209
copper it travels two thirds of that

00:15:10,350 --> 00:15:14,160
speed but even on fiber optics is only

00:15:12,209 --> 00:15:15,930
slightly longer than this and if you

00:15:14,160 --> 00:15:17,069
think about a computer a computer does

00:15:15,930 --> 00:15:19,350
what's called clocking if you don't

00:15:17,069 --> 00:15:20,819
familiar processes basically they sort

00:15:19,350 --> 00:15:22,860
of like almost like a kind of a machine

00:15:20,819 --> 00:15:24,389
way like you they do an operation and

00:15:22,860 --> 00:15:27,389
then clock to the next one I just do

00:15:24,389 --> 00:15:28,470
more operations and the clock is kind of

00:15:27,389 --> 00:15:30,449
what governs how everything's

00:15:28,470 --> 00:15:32,160
synchronizing a computer it's almost

00:15:30,449 --> 00:15:34,740
like a mini version of a big computer

00:15:32,160 --> 00:15:37,709
system and it turns out if you want to

00:15:34,740 --> 00:15:39,810
go more than one gigahertz which is it

00:15:37,709 --> 00:15:41,910
turns out one like using one nanosecond

00:15:39,810 --> 00:15:42,960
you can't have components further apart

00:15:41,910 --> 00:15:44,640
than one in a second

00:15:42,960 --> 00:15:46,560
or they cannot physically flock fast

00:15:44,640 --> 00:15:48,090
among gigahertz this is why we don't

00:15:46,560 --> 00:15:50,280
have big computers that run very fast

00:15:48,090 --> 00:15:53,250
it's physically impossible and this is

00:15:50,280 --> 00:15:55,320
kind of the microcosm of why distributed

00:15:53,250 --> 00:15:57,720
is hard think of this at a global scale

00:15:55,320 --> 00:16:00,420
if I have a server in Australia and a

00:15:57,720 --> 00:16:03,330
server in West Virginia they are at

00:16:00,420 --> 00:16:04,110
minimum a hundred milliseconds apart at

00:16:03,330 --> 00:16:06,960
the speed of light

00:16:04,110 --> 00:16:09,420
I cannot beat that it's it's physically

00:16:06,960 --> 00:16:11,010
as far as we know you know for caveats

00:16:09,420 --> 00:16:13,830
physically impossible to do though and

00:16:11,010 --> 00:16:15,990
so if my goal is to have more than 10

00:16:13,830 --> 00:16:18,300
rights a second consistently I can't do

00:16:15,990 --> 00:16:20,670
it because I cannot synchronize more

00:16:18,300 --> 00:16:23,190
than once every 100 milliseconds between

00:16:20,670 --> 00:16:24,600
those two zones and this is one of the

00:16:23,190 --> 00:16:26,750
problems of des trippity computing come

00:16:24,600 --> 00:16:28,980
in if you go back to the triangle

00:16:26,750 --> 00:16:31,410
consistency is one of those things that

00:16:28,980 --> 00:16:33,210
it's affected heavily by being

00:16:31,410 --> 00:16:35,820
physically distributed and it really

00:16:33,210 --> 00:16:38,220
comes into play with databases and if

00:16:35,820 --> 00:16:40,140
you think about this model this works

00:16:38,220 --> 00:16:42,510
very well and it only dissuade you from

00:16:40,140 --> 00:16:44,460
it but there are more advanced things

00:16:42,510 --> 00:16:45,900
we'll come to in the fourth parts

00:16:44,460 --> 00:16:49,370
presentation about sharding and so on

00:16:45,900 --> 00:16:52,020
that we've kind of moved towards a

00:16:49,370 --> 00:16:54,060
microcosm of databases and code combined

00:16:52,020 --> 00:16:55,710
is load balancing a lot of people don't

00:16:54,060 --> 00:16:57,120
think about this at first I certainly

00:16:55,710 --> 00:16:58,830
didn't when I started out as a ops

00:16:57,120 --> 00:17:00,810
engineer it was my some of my first jobs

00:16:58,830 --> 00:17:02,220
and it quickly hit me like a ton of

00:17:00,810 --> 00:17:05,250
bricks or rather like a huge number of

00:17:02,220 --> 00:17:07,620
users clicking refresh at once and the

00:17:05,250 --> 00:17:09,600
problem is you think websites are simple

00:17:07,620 --> 00:17:12,570
I'm a new job you know better

00:17:09,600 --> 00:17:15,090
people think websites are simple people

00:17:12,570 --> 00:17:16,980
think oh I can just have a couple of

00:17:15,090 --> 00:17:19,380
servers get it around they're all

00:17:16,980 --> 00:17:21,420
equally balanced and then everyone have

00:17:19,380 --> 00:17:22,680
consistent load times and all my users

00:17:21,420 --> 00:17:24,540
are roughly the same they're all that

00:17:22,680 --> 00:17:26,430
sort of very cookie cutter generic

00:17:24,540 --> 00:17:29,490
people if you have this congratulations

00:17:26,430 --> 00:17:34,040
you have a gem of a website please keep

00:17:29,490 --> 00:17:36,450
it no one else has this what we have is

00:17:34,040 --> 00:17:38,550
loads of logic that runs at different

00:17:36,450 --> 00:17:40,410
speeds on different machines that

00:17:38,550 --> 00:17:42,570
different pages have different amounts

00:17:40,410 --> 00:17:44,880
of processor loads for example like oh

00:17:42,570 --> 00:17:46,410
well you know this page is very easy to

00:17:44,880 --> 00:17:48,960
render cuz I can just show a template

00:17:46,410 --> 00:17:50,340
this page at a thumbnail these 25 slides

00:17:48,960 --> 00:17:52,410
and show them in a little in a grid view

00:17:50,340 --> 00:17:54,330
and not know that you have wildly

00:17:52,410 --> 00:17:56,379
varying users one of my favorite

00:17:54,330 --> 00:17:58,549
interview questions to give is

00:17:56,379 --> 00:18:00,559
laughs it's good as build Instagram I

00:17:58,549 --> 00:18:02,419
sit down with a candidate and go okay

00:18:00,559 --> 00:18:04,340
I'm not gonna ask you any sort of

00:18:02,419 --> 00:18:06,529
whiteboarding or technical questions or

00:18:04,340 --> 00:18:07,879
like how do I reverse a list I want you

00:18:06,529 --> 00:18:09,349
to discuss whatever level you feel

00:18:07,879 --> 00:18:11,599
comfortable how you would built

00:18:09,349 --> 00:18:13,309
Instagram from the ground up and usually

00:18:11,599 --> 00:18:15,529
most engineers who are junior or senior

00:18:13,309 --> 00:18:17,330
will go a decent way along have some

00:18:15,529 --> 00:18:19,789
tables and some good scaling ideas and

00:18:17,330 --> 00:18:22,849
then you drop the bomb figuratively

00:18:19,789 --> 00:18:24,679
which is that you say okay now one of

00:18:22,849 --> 00:18:26,719
your users has 10 million followers and

00:18:24,679 --> 00:18:28,070
nobody else does and you have what's

00:18:26,719 --> 00:18:31,039
almost called the Justin Bieber problem

00:18:28,070 --> 00:18:33,739
right that this one individual user is

00:18:31,039 --> 00:18:35,450
so incredibly expensive you can't split

00:18:33,739 --> 00:18:37,369
them up they're a single atomic entity

00:18:35,450 --> 00:18:39,859
and that really marks with the way your

00:18:37,369 --> 00:18:42,679
load works and not just that as I said

00:18:39,859 --> 00:18:45,499
before low bouncing in theory is like

00:18:42,679 --> 00:18:47,389
this if you're in one country especially

00:18:45,499 --> 00:18:49,339
if you have a lovely curve during the

00:18:47,389 --> 00:18:50,659
daytime I was awake and a lovely

00:18:49,339 --> 00:18:53,389
relaxing curve when they were asleep in

00:18:50,659 --> 00:18:56,269
the evening perfect easy to scale for

00:18:53,389 --> 00:18:57,739
you can draw a nice line about 20% above

00:18:56,269 --> 00:18:59,239
this line so this is our maximum

00:18:57,739 --> 00:19:01,070
capacity a little bit of spare capacity

00:18:59,239 --> 00:19:03,469
at all times if you're feeling

00:19:01,070 --> 00:19:04,789
particularly like thrifty you can launch

00:19:03,469 --> 00:19:07,789
servers in the morning and take them

00:19:04,789 --> 00:19:09,109
down the evening if you are a ticketing

00:19:07,789 --> 00:19:11,809
website which I have some familiarity

00:19:09,109 --> 00:19:13,219
with it looks more like this where

00:19:11,809 --> 00:19:15,379
you're like always lovely and relaxing

00:19:13,219 --> 00:19:17,629
and then an event you didn't realize

00:19:15,379 --> 00:19:19,789
exists it goes on sale and they're very

00:19:17,629 --> 00:19:21,499
popular and everyone in the world

00:19:19,789 --> 00:19:23,839
arrives at once to try and get their

00:19:21,499 --> 00:19:27,499
free beer that literally happened by the

00:19:23,839 --> 00:19:29,599
way and so suddenly everyone just

00:19:27,499 --> 00:19:32,269
slammed and your servers onto one single

00:19:29,599 --> 00:19:34,789
page and often into an order flow it's

00:19:32,269 --> 00:19:36,769
very complicated and scaling for this

00:19:34,789 --> 00:19:38,570
and low balancing this is very difficult

00:19:36,769 --> 00:19:40,190
you can't necessarily low balance

00:19:38,570 --> 00:19:41,599
equally across different servers cause

00:19:40,190 --> 00:19:43,339
it might hit a certain set of servers

00:19:41,599 --> 00:19:44,899
differently like this might hit your

00:19:43,339 --> 00:19:46,820
payment endpoints much more than your

00:19:44,899 --> 00:19:49,489
event view endpoints so it's a little

00:19:46,820 --> 00:19:52,609
bit of extra work and this gets more

00:19:49,489 --> 00:19:55,009
complicated because of me because I did

00:19:52,609 --> 00:19:57,139
WebSockets but look it's a lovely things

00:19:55,009 --> 00:19:58,639
they're beautiful they're great they're

00:19:57,139 --> 00:20:00,739
very good for game programming in the

00:19:58,639 --> 00:20:04,070
browser in particular but they have some

00:20:00,739 --> 00:20:06,320
problems for load balancing and those

00:20:04,070 --> 00:20:07,609
problems are then not like HTTP requests

00:20:06,320 --> 00:20:09,799
this is one of the reasons that they

00:20:07,609 --> 00:20:11,269
don't fit into whiskey like whiskey is

00:20:09,799 --> 00:20:12,590
you have a request you serve it you send

00:20:11,269 --> 00:20:14,509
the response you're done and the

00:20:12,590 --> 00:20:17,480
responsibility sockets aren't like they

00:20:14,509 --> 00:20:19,249
lick clingy you open a socket it can

00:20:17,480 --> 00:20:21,919
open for hours or days it can just sit

00:20:19,249 --> 00:20:24,259
around you can't necessarily reroute it

00:20:21,919 --> 00:20:26,480
because TCP doesn't work like that not

00:20:24,259 --> 00:20:28,519
only that the set of tools that handle

00:20:26,480 --> 00:20:30,950
balancing sockets is very limited like

00:20:28,519 --> 00:20:32,989
you have handled them almost as raw TCP

00:20:30,950 --> 00:20:35,299
connections but also there's sort of

00:20:32,989 --> 00:20:37,399
HTTP but some tools won't deal with them

00:20:35,299 --> 00:20:39,889
properly and it becomes a bit of a mess

00:20:37,399 --> 00:20:43,190
and even worse they have four different

00:20:39,889 --> 00:20:44,570
kinds of failure which you realize until

00:20:43,190 --> 00:20:45,739
you write a server that serves them then

00:20:44,570 --> 00:20:48,350
you realize they have four different

00:20:45,739 --> 00:20:49,519
kinds of failure they can not open in

00:20:48,350 --> 00:20:52,039
the first place they can close around

00:20:49,519 --> 00:20:54,019
ibly all this kind of stuff and the

00:20:52,039 --> 00:20:56,269
thing with WebSockets is they're great

00:20:54,019 --> 00:20:58,039
but they're an extra feature when you

00:20:56,269 --> 00:21:00,139
design a site you consider them a bonus

00:20:58,039 --> 00:21:01,759
like if you have them if your clients

00:21:00,139 --> 00:21:03,230
browser supports them if you can open

00:21:01,759 --> 00:21:05,450
them through a proxy they have great

00:21:03,230 --> 00:21:08,149
fantastic but you should treat them as

00:21:05,450 --> 00:21:10,669
optional and you should close them

00:21:08,149 --> 00:21:13,249
liberally and freely if you want to

00:21:10,669 --> 00:21:15,139
reload balance some sockets just close

00:21:13,249 --> 00:21:17,600
them and let them open somewhere else

00:21:15,139 --> 00:21:19,340
don't design them to open forever design

00:21:17,600 --> 00:21:21,139
them so at any minute they might die if

00:21:19,340 --> 00:21:23,299
you're on the London Underground for

00:21:21,139 --> 00:21:25,039
example there is only Wi-Fi in stations

00:21:23,299 --> 00:21:26,989
and not in the tunnels between stations

00:21:25,039 --> 00:21:28,609
and so people regularly will appear for

00:21:26,989 --> 00:21:30,049
a minute go away for two minutes

00:21:28,609 --> 00:21:32,269
reappear for a minute you wouldn't

00:21:30,049 --> 00:21:35,269
design for that case as well most sites

00:21:32,269 --> 00:21:37,609
I used to use in London didn't like the

00:21:35,269 --> 00:21:39,320
whole I have internet now wait no it's

00:21:37,609 --> 00:21:41,299
not here again wait no it's here again

00:21:39,320 --> 00:21:43,639
now with a three second latency and just

00:21:41,299 --> 00:21:45,830
started collapsing like some of the

00:21:43,639 --> 00:21:47,539
takeaway sites I was like I'm trying to

00:21:45,830 --> 00:21:51,139
order food did you not plan for this

00:21:47,539 --> 00:21:52,669
case no he didn't that's one of the big

00:21:51,139 --> 00:21:55,399
problems and thinking about those

00:21:52,669 --> 00:21:58,220
problems is when we come to teams so as

00:21:55,399 --> 00:22:00,830
I said teams a really important part of

00:21:58,220 --> 00:22:03,559
designing distributed software and big

00:22:00,830 --> 00:22:05,119
scale software in general engineering is

00:22:03,559 --> 00:22:07,009
a different discipline to programming

00:22:05,119 --> 00:22:09,200
it's certainly encompasses programming

00:22:07,009 --> 00:22:10,970
but engineering is a more holistic thing

00:22:09,200 --> 00:22:12,529
Engineering's about taking a set of

00:22:10,970 --> 00:22:14,779
programmers and designers and product

00:22:12,529 --> 00:22:17,090
people and making the best product that

00:22:14,779 --> 00:22:18,710
you can serve the needs best and a big

00:22:17,090 --> 00:22:20,690
part of this is how you use the people

00:22:18,710 --> 00:22:22,279
you have your disposal as I become more

00:22:20,690 --> 00:22:23,130
and more senior and go through the

00:22:22,279 --> 00:22:26,040
industry more and more

00:22:23,130 --> 00:22:28,380
I just see this like I used to be in the

00:22:26,040 --> 00:22:31,920
boat you know eight nine years ago like

00:22:28,380 --> 00:22:32,820
oh I am the genius kid programmer I can

00:22:31,920 --> 00:22:35,250
do anything

00:22:32,820 --> 00:22:37,350
I understand everything and as you get

00:22:35,250 --> 00:22:39,000
out of the zone of you're so incompetent

00:22:37,350 --> 00:22:40,560
you think you know everything you get to

00:22:39,000 --> 00:22:43,380
the zone work out you realize you know

00:22:40,560 --> 00:22:44,070
nothing and that's kind of where I ended

00:22:43,380 --> 00:22:46,410
up at this point

00:22:44,070 --> 00:22:48,780
teams are very important I don't know

00:22:46,410 --> 00:22:50,460
enough about managing people that's not

00:22:48,780 --> 00:22:52,050
my expertise but these are some of the

00:22:50,460 --> 00:22:54,150
things I've seen as a senior engineer

00:22:52,050 --> 00:22:56,700
who leads teams and leads projects that

00:22:54,150 --> 00:22:58,350
I think are useful so the first thing is

00:22:56,700 --> 00:23:00,450
you developers are people too

00:22:58,350 --> 00:23:01,800
programming is an incredibly draining

00:23:00,450 --> 00:23:04,440
profession I'm sure many of you know

00:23:01,800 --> 00:23:05,300
this mentally and also emotionally

00:23:04,440 --> 00:23:07,560
sometimes as well

00:23:05,300 --> 00:23:08,850
understanding requirements and also

00:23:07,560 --> 00:23:10,980
trying to adapt them and deal with

00:23:08,850 --> 00:23:12,960
people having different ideas from you

00:23:10,980 --> 00:23:14,910
can be very difficult you need to make

00:23:12,960 --> 00:23:16,890
sure there's time and space to plan to

00:23:14,910 --> 00:23:19,950
this stuff in particular I see lots of

00:23:16,890 --> 00:23:21,900
plans of like oh we're gonna have these

00:23:19,950 --> 00:23:23,820
three features developed in parallel

00:23:21,900 --> 00:23:24,590
they're merged instantaneously then

00:23:23,820 --> 00:23:26,940
we'll keep going

00:23:24,590 --> 00:23:29,310
this is often borne out of being a

00:23:26,940 --> 00:23:31,080
smaller company that's less distributed

00:23:29,310 --> 00:23:32,730
where you have oh we had one or two

00:23:31,080 --> 00:23:35,130
services everyone knew the whole

00:23:32,730 --> 00:23:37,170
codebase when everyone's in one room and

00:23:35,130 --> 00:23:38,430
knows the whole code base you can

00:23:37,170 --> 00:23:40,410
happily do that you can work on two

00:23:38,430 --> 00:23:43,350
different pages and then modems again

00:23:40,410 --> 00:23:45,660
because you all know what's going on but

00:23:43,350 --> 00:23:47,370
when you have a hundred 200 people you

00:23:45,660 --> 00:23:50,010
don't know everything that's going on

00:23:47,370 --> 00:23:51,930
elsewhere you have to allow time both to

00:23:50,010 --> 00:23:53,430
spin up and understand what the context

00:23:51,930 --> 00:23:56,070
is see if someone else has sold this

00:23:53,430 --> 00:23:57,390
already and then to spin down merge and

00:23:56,070 --> 00:23:59,880
so it's a very important thing to think

00:23:57,390 --> 00:24:02,100
about and part of this is technicals

00:23:59,880 --> 00:24:04,320
that really can be poisonous again I'm

00:24:02,100 --> 00:24:07,200
preaching to the choir here I'm sure but

00:24:04,320 --> 00:24:08,340
it's very important that you build up

00:24:07,200 --> 00:24:11,010
some technical debt when you're

00:24:08,340 --> 00:24:13,110
especially a start-up if you're doing

00:24:11,010 --> 00:24:14,460
like the Space Shuttle never do this but

00:24:13,110 --> 00:24:16,530
I presume you're watching websites cuz

00:24:14,460 --> 00:24:18,570
you're at django con and as a website

00:24:16,530 --> 00:24:20,870
you you can have some technical debt

00:24:18,570 --> 00:24:23,790
it's fine it's almost healthy

00:24:20,870 --> 00:24:27,210
requirements change people change user

00:24:23,790 --> 00:24:29,820
bases change what you should do is very

00:24:27,210 --> 00:24:31,590
very cognizant be very aware of where

00:24:29,820 --> 00:24:33,870
your debt is and when you need to pay it

00:24:31,590 --> 00:24:35,929
off because like normal debt it accrues

00:24:33,870 --> 00:24:37,690
interest as your code base grows

00:24:35,929 --> 00:24:41,539
drags down on you more and more and more

00:24:37,690 --> 00:24:43,970
and so you need a little bit to compete

00:24:41,539 --> 00:24:45,379
but you keep keep ahead of it and keep

00:24:43,970 --> 00:24:47,059
managing it and it's very easy to lose

00:24:45,379 --> 00:24:51,919
track about telling older as you go

00:24:47,059 --> 00:24:53,690
along and then we get the slightly more

00:24:51,919 --> 00:24:54,679
controversial question which most

00:24:53,690 --> 00:24:56,749
companies have not even solved

00:24:54,679 --> 00:24:59,059
internally which is how many git

00:24:56,749 --> 00:25:01,309
repositories do you have this is one of

00:24:59,059 --> 00:25:03,139
the things we're making a big distribute

00:25:01,309 --> 00:25:04,879
system that doesn't really you think

00:25:03,139 --> 00:25:06,440
about until you get there until you're

00:25:04,879 --> 00:25:08,539
sitting down computer and going oh okay

00:25:06,440 --> 00:25:10,129
we've managed to split out our payments

00:25:08,539 --> 00:25:12,769
codebase and the rest of it fantastic

00:25:10,129 --> 00:25:14,779
where do we put it if your answer as a

00:25:12,769 --> 00:25:16,429
single repository then congratulations

00:25:14,779 --> 00:25:18,289
that's great you can have a single giant

00:25:16,429 --> 00:25:19,999
repository everyone's gonna have merged

00:25:18,289 --> 00:25:22,850
conflicts all the time it's gonna be

00:25:19,999 --> 00:25:24,679
terrible if you chose multiple bullet

00:25:22,850 --> 00:25:26,360
Ares congratulations you're now gonna

00:25:24,679 --> 00:25:28,460
have 300 posit Ares and no one knows

00:25:26,360 --> 00:25:30,259
where they all are and you're gonna have

00:25:28,460 --> 00:25:31,669
300 versions and your release manager is

00:25:30,259 --> 00:25:33,740
gonna have a hell of a time it's gonna

00:25:31,669 --> 00:25:36,679
be terrible there again is no good

00:25:33,740 --> 00:25:40,009
answer multiple repos often seems more

00:25:36,679 --> 00:25:41,269
attractive at first it is but it means

00:25:40,009 --> 00:25:43,369
that what you're doing is pushing

00:25:41,269 --> 00:25:45,169
complexity from programming and doing

00:25:43,369 --> 00:25:48,259
the merge conflicts that problem isn't

00:25:45,169 --> 00:25:50,659
going away it's just happening to be

00:25:48,259 --> 00:25:51,830
pushed down to the release phase and so

00:25:50,659 --> 00:25:53,840
you're giving your operations and

00:25:51,830 --> 00:25:55,639
release engineers all of your problems

00:25:53,840 --> 00:25:57,379
just kind of selfish if you ask me so

00:25:55,639 --> 00:26:00,230
just be very aware of that if they if

00:25:57,379 --> 00:26:02,950
they agree that's fine but don't think

00:26:00,230 --> 00:26:05,720
you're imagining making work go away

00:26:02,950 --> 00:26:08,149
this then turns into well you have these

00:26:05,720 --> 00:26:10,190
repos or single repo how people code on

00:26:08,149 --> 00:26:12,169
that stuff do you have your team's

00:26:10,190 --> 00:26:14,899
structure around individual services or

00:26:12,169 --> 00:26:16,940
pieces of the code do you instead try

00:26:14,899 --> 00:26:18,830
and strike people across different

00:26:16,940 --> 00:26:20,210
services like all this team works on

00:26:18,830 --> 00:26:22,999
different things and try and encourage

00:26:20,210 --> 00:26:24,169
people to have diversity of you know

00:26:22,999 --> 00:26:26,720
knowledge and opinion inside the

00:26:24,169 --> 00:26:28,669
codebase this again is really difficult

00:26:26,720 --> 00:26:32,419
because often you don't have enough

00:26:28,669 --> 00:26:34,009
engineers because no one does not only

00:26:32,419 --> 00:26:36,110
that but like you this also included

00:26:34,009 --> 00:26:38,330
like designers and UX researchers and

00:26:36,110 --> 00:26:40,789
operations engineers too like you never

00:26:38,330 --> 00:26:43,850
have enough people and working out how

00:26:40,789 --> 00:26:44,990
to arrange everyone so that again no one

00:26:43,850 --> 00:26:46,850
knows everything this is a very

00:26:44,990 --> 00:26:49,010
important thing I can't stress enough

00:26:46,850 --> 00:26:52,220
but the right people talk to each other

00:26:49,010 --> 00:26:54,050
can get really really difficult and this

00:26:52,220 --> 00:26:56,690
gets really problematic with ownership

00:26:54,050 --> 00:26:59,210
gaps this is a problem I never saw

00:26:56,690 --> 00:27:01,820
coming until I moved to a big company is

00:26:59,210 --> 00:27:04,330
that it's possible you just have giant

00:27:01,820 --> 00:27:07,040
pieces of code that no one knows about

00:27:04,330 --> 00:27:08,420
because they got written for use ago

00:27:07,040 --> 00:27:10,910
they still work fine they were written

00:27:08,420 --> 00:27:12,110
all right but nobody like even if the

00:27:10,910 --> 00:27:14,360
person who wrote it is still at the

00:27:12,110 --> 00:27:15,920
company they've probably forgotten like

00:27:14,360 --> 00:27:19,490
I've forgotten mostly kind of a written

00:27:15,920 --> 00:27:21,290
it's not uncommon to do so and it's very

00:27:19,490 --> 00:27:22,460
easy to know what you're working on it's

00:27:21,290 --> 00:27:26,360
very hard to know what you're not

00:27:22,460 --> 00:27:28,130
working on like as some companies even

00:27:26,360 --> 00:27:30,590
working out what the feature set of the

00:27:28,130 --> 00:27:33,230
site is could take a team of senior

00:27:30,590 --> 00:27:34,580
engineers weeks to work out like there

00:27:33,230 --> 00:27:37,610
are some site that's so complicated that

00:27:34,580 --> 00:27:39,590
it just no one maybe the support team

00:27:37,610 --> 00:27:41,180
knows basically like one good tip is go

00:27:39,590 --> 00:27:42,680
and talk to your support people because

00:27:41,180 --> 00:27:43,610
they get all the experience of all

00:27:42,680 --> 00:27:45,560
they're not all the weird little

00:27:43,610 --> 00:27:48,290
features but basically nobody knows

00:27:45,560 --> 00:27:50,390
what's going on and until you run into

00:27:48,290 --> 00:27:52,490
one of these gaps it's hard to know

00:27:50,390 --> 00:27:54,980
they're there and so really think about

00:27:52,490 --> 00:27:57,050
like if you're small or medium just keep

00:27:54,980 --> 00:27:59,090
a rough spreadsheet even of like oh

00:27:57,050 --> 00:28:01,250
these are the rough features that we

00:27:59,090 --> 00:28:03,560
have and here's who knows about them

00:28:01,250 --> 00:28:05,720
best and then if somebody leaves and

00:28:03,560 --> 00:28:06,430
they're in columns by themselves you go

00:28:05,720 --> 00:28:08,630
ah

00:28:06,430 --> 00:28:10,760
that person has left and nobody knows

00:28:08,630 --> 00:28:12,530
about this now and so we should go and

00:28:10,760 --> 00:28:14,840
fix this happens in Django too like

00:28:12,530 --> 00:28:16,250
Django is a very big complex project we

00:28:14,840 --> 00:28:18,710
have specialists in a lot of django

00:28:16,250 --> 00:28:20,990
areas their areas of django there are no

00:28:18,710 --> 00:28:23,600
specialists in and for a long time we

00:28:20,990 --> 00:28:25,670
thought nobody knew about all the weird

00:28:23,600 --> 00:28:26,960
multiform formers and stuff and then one

00:28:25,670 --> 00:28:27,440
of the core developers admitted knowing

00:28:26,960 --> 00:28:29,460
about it

00:28:27,440 --> 00:28:34,779
when haha

00:28:29,460 --> 00:28:35,950
what a fool yes exactly so that's the

00:28:34,779 --> 00:28:37,690
kind of thing that ends it's not just

00:28:35,950 --> 00:28:40,509
companies it's big open source projects

00:28:37,690 --> 00:28:42,519
too and it's very easy to happen so with

00:28:40,509 --> 00:28:44,409
all these sort of rough points I want to

00:28:42,519 --> 00:28:45,909
go into some strategies like how can you

00:28:44,409 --> 00:28:49,029
take these ideas I've been throwing at

00:28:45,909 --> 00:28:50,529
you and try and what's my best advice

00:28:49,029 --> 00:28:52,590
basically like I can't give you single

00:28:50,529 --> 00:28:56,919
solutions but what what would I suggest

00:28:52,590 --> 00:28:58,630
so first of all people love micro

00:28:56,919 --> 00:29:01,360
services and do this correctly after I

00:28:58,630 --> 00:29:03,940
have to go micro services like this jazz

00:29:01,360 --> 00:29:05,679
hands are very important local services

00:29:03,940 --> 00:29:08,320
are a big buzzword they're very common

00:29:05,679 --> 00:29:11,379
and they're very easy and that's the

00:29:08,320 --> 00:29:13,480
problem it's so easy to just ignore the

00:29:11,379 --> 00:29:15,669
other code and start a new service it's

00:29:13,480 --> 00:29:18,580
a service version of oh we'll just

00:29:15,669 --> 00:29:21,039
delete it all rewrite from scratch it's

00:29:18,580 --> 00:29:22,990
easy to start and you know that it's

00:29:21,039 --> 00:29:25,629
gonna be this wonderful thing when you

00:29:22,990 --> 00:29:28,210
go in most programmers a few exceptions

00:29:25,629 --> 00:29:30,309
I know aside do not like maintenance

00:29:28,210 --> 00:29:33,279
programming if you do congratulations

00:29:30,309 --> 00:29:35,320
you should charge more but if you don't

00:29:33,279 --> 00:29:36,580
if the temptation is to go oh we can do

00:29:35,320 --> 00:29:38,350
new services and then we'll just join

00:29:36,580 --> 00:29:41,049
them all together and again you're not

00:29:38,350 --> 00:29:43,149
actually saving any work what you're

00:29:41,049 --> 00:29:45,519
doing is pushing all of the work later

00:29:43,149 --> 00:29:48,309
on in the process when you now have a

00:29:45,519 --> 00:29:50,289
thousand servers services and no one

00:29:48,309 --> 00:29:51,940
knows what they all do can you imagine

00:29:50,289 --> 00:29:53,889
like if you have a thousand services I

00:29:51,940 --> 00:29:55,690
doubt any one person would understand

00:29:53,889 --> 00:29:57,009
what they all do or what their ideas are

00:29:55,690 --> 00:29:59,620
and so you've just taken the same

00:29:57,009 --> 00:30:02,379
problem you had with a monolith and made

00:29:59,620 --> 00:30:03,519
it not only be in services but now it's

00:30:02,379 --> 00:30:05,350
on different machines and there's a

00:30:03,519 --> 00:30:07,330
consistency problem at least with the

00:30:05,350 --> 00:30:09,220
monolith it's all in one place and you

00:30:07,330 --> 00:30:12,580
can sort of trace through the code in

00:30:09,220 --> 00:30:14,259
the debugger easily do you try tracing

00:30:12,580 --> 00:30:15,100
bugs through four different services and

00:30:14,259 --> 00:30:18,519
four different machines

00:30:15,100 --> 00:30:19,990
it is not easy it's like you can't just

00:30:18,519 --> 00:30:22,539
put a pdb trace in there you have to

00:30:19,990 --> 00:30:24,220
sort of find logs and put logging in and

00:30:22,539 --> 00:30:25,929
relaunch them all and then follow the

00:30:24,220 --> 00:30:27,070
logs through it's just a pain so that's

00:30:25,929 --> 00:30:30,820
one of the big things to think about

00:30:27,070 --> 00:30:33,759
well I generally encourage is a moderate

00:30:30,820 --> 00:30:35,620
size of services usually five to ten is

00:30:33,759 --> 00:30:37,809
a good start for most companies try and

00:30:35,620 --> 00:30:39,879
think of your big business reasons and

00:30:37,809 --> 00:30:42,500
focus around those that often helps the

00:30:39,879 --> 00:30:44,000
team composition - if you have expert

00:30:42,500 --> 00:30:45,860
in certain areas in your team already

00:30:44,000 --> 00:30:47,600
it's very tentacle to cluster round them

00:30:45,860 --> 00:30:50,300
and give them some junior engineers to

00:30:47,600 --> 00:30:51,830
mentor one as well just don't have a

00:30:50,300 --> 00:30:53,510
thing where every engineer has their own

00:30:51,830 --> 00:30:54,590
service because at that point they were

00:30:53,510 --> 00:30:56,360
writing their own different code bases

00:30:54,590 --> 00:31:00,530
and you have a joint collaboration

00:30:56,360 --> 00:31:02,830
problem again I'm a big fan of service

00:31:00,530 --> 00:31:06,170
buses I sort of wrote one in channels

00:31:02,830 --> 00:31:07,600
they're a really nice way of doing inter

00:31:06,170 --> 00:31:09,950
service and in to machine communication

00:31:07,600 --> 00:31:11,780
one of the big things especially in this

00:31:09,950 --> 00:31:14,060
world of docker and of containers is

00:31:11,780 --> 00:31:16,160
that with a service bus when you have a

00:31:14,060 --> 00:31:18,320
piece of code you can just say hey the

00:31:16,160 --> 00:31:20,030
bus is over here there's no need to say

00:31:18,320 --> 00:31:21,740
oh well service one is here so it's two

00:31:20,030 --> 00:31:23,270
is here so it's three is here are we

00:31:21,740 --> 00:31:25,040
reached out of service to its IP address

00:31:23,270 --> 00:31:26,300
has changed so you restart you with the

00:31:25,040 --> 00:31:28,430
new IP and you just get to be a massive

00:31:26,300 --> 00:31:29,840
complex knight complex nightmare so

00:31:28,430 --> 00:31:31,610
that's a really big pile of service

00:31:29,840 --> 00:31:33,380
buses they make deployment and scaling a

00:31:31,610 --> 00:31:35,570
lot easier they're not listening any

00:31:33,380 --> 00:31:37,370
ports because I was talking out so you

00:31:35,570 --> 00:31:40,640
can just launch 10 20 processes very

00:31:37,370 --> 00:31:41,930
easily it's not for every design there

00:31:40,640 --> 00:31:43,940
are totally cases where you shouldn't

00:31:41,930 --> 00:31:46,610
have a bus or you should try and keep

00:31:43,940 --> 00:31:49,250
some of traffic off of the bus in

00:31:46,610 --> 00:31:51,620
particular one good model I seen is

00:31:49,250 --> 00:31:53,840
having a service bus for some stuff in

00:31:51,620 --> 00:31:56,030
the terms that it is at most one switch

00:31:53,840 --> 00:31:58,580
is a message on the bus might get there

00:31:56,030 --> 00:32:01,760
it might not and a separate thing good

00:31:58,580 --> 00:32:03,380
like a fire hose which is all the events

00:32:01,760 --> 00:32:05,210
happening in the site and they may

00:32:03,380 --> 00:32:08,000
happen once or twice or more which is at

00:32:05,210 --> 00:32:09,740
least once and different code problems

00:32:08,000 --> 00:32:11,420
can happen or different things cache

00:32:09,740 --> 00:32:14,000
invalidation is best done from a

00:32:11,420 --> 00:32:15,770
firehose because if you invented it in

00:32:14,000 --> 00:32:17,810
the cache twice it's not a problem and

00:32:15,770 --> 00:32:19,130
so you're caching relation things should

00:32:17,810 --> 00:32:20,900
listen to a firehose and every time it

00:32:19,130 --> 00:32:23,000
sees an idea oh yeah this you just

00:32:20,900 --> 00:32:26,200
changed invalidate their cache great way

00:32:23,000 --> 00:32:29,600
of doing that shouldn't be on a bus and

00:32:26,200 --> 00:32:31,460
then on to the consistency stuff you are

00:32:29,600 --> 00:32:33,920
going to have inconsistent data it's

00:32:31,460 --> 00:32:35,750
almost impossible to avoid this even if

00:32:33,920 --> 00:32:37,640
you think you're a perfect monolith as

00:32:35,750 --> 00:32:39,080
soon as you have computers in more than

00:32:37,640 --> 00:32:40,550
one datacenter - they're physically

00:32:39,080 --> 00:32:43,160
separate you will have to deal with

00:32:40,550 --> 00:32:45,560
something like this even it's like 10 20

00:32:43,160 --> 00:32:47,780
milliseconds and a really powerful way

00:32:45,560 --> 00:32:49,730
of doing this is to look at the product

00:32:47,780 --> 00:32:51,950
what are you making where can you allow

00:32:49,730 --> 00:32:53,360
all data sit down with your UX

00:32:51,950 --> 00:32:54,750
researchers and your product people and

00:32:53,360 --> 00:32:57,930
everyone or designers and go

00:32:54,750 --> 00:33:00,090
okay we have to give somewhere but where

00:32:57,930 --> 00:33:02,520
can we give in a way that doesn't hurt

00:33:00,090 --> 00:33:05,040
the experience a very common way for

00:33:02,520 --> 00:33:09,300
example is to give on content you didn't

00:33:05,040 --> 00:33:11,220
author if I had say a site where I'd

00:33:09,300 --> 00:33:12,690
look to images and comments all the

00:33:11,220 --> 00:33:15,030
things that I didn't own or comment on

00:33:12,690 --> 00:33:17,130
we can happily serve you all data that's

00:33:15,030 --> 00:33:19,020
a very good example of pinning but this

00:33:17,130 --> 00:33:20,700
applies everywhere there's many cases in

00:33:19,020 --> 00:33:22,920
different pieces of software but you can

00:33:20,700 --> 00:33:25,170
go along go yeah we could just change

00:33:22,920 --> 00:33:26,340
like if we remove the pagination this is

00:33:25,170 --> 00:33:28,380
very common by the way if you couldn't

00:33:26,340 --> 00:33:29,820
get hub recently github doesn't not show

00:33:28,380 --> 00:33:30,930
you how many pages there are because

00:33:29,820 --> 00:33:33,420
that's almost certainly what the slow

00:33:30,930 --> 00:33:36,720
bit is and so by just showing you next

00:33:33,420 --> 00:33:38,460
page most the functionality is there but

00:33:36,720 --> 00:33:40,020
that expensive pagination query has gone

00:33:38,460 --> 00:33:43,130
away and so that's one of the

00:33:40,020 --> 00:33:47,250
compromised examples you might go and do

00:33:43,130 --> 00:33:49,140
now sharding sharding is a very complex

00:33:47,250 --> 00:33:51,570
issue and one that would take an entire

00:33:49,140 --> 00:33:53,220
talk by itself to cover but for those

00:33:51,570 --> 00:33:55,170
who aren't aware sharding is the next

00:33:53,220 --> 00:33:56,520
step from basically the vertical

00:33:55,170 --> 00:33:59,130
partitioning that's good horizontal

00:33:56,520 --> 00:34:02,730
partitioning and the idea is that you

00:33:59,130 --> 00:34:04,560
have one table on multiple servers say

00:34:02,730 --> 00:34:06,510
like my users table is on a hundred

00:34:04,560 --> 00:34:07,860
different servers and generally you'd

00:34:06,510 --> 00:34:11,610
say well as one hundred different shards

00:34:07,860 --> 00:34:15,120
and each user is in a certain shard it's

00:34:11,610 --> 00:34:17,610
very very powerful it's works incredibly

00:34:15,120 --> 00:34:19,919
well for most patterns that people

00:34:17,610 --> 00:34:21,870
understand but it is an incredible

00:34:19,919 --> 00:34:24,030
technology and personal cost

00:34:21,870 --> 00:34:25,620
having shouting in our code base makes

00:34:24,030 --> 00:34:29,280
everything slower to write everything

00:34:25,620 --> 00:34:32,129
slow to run some people come along and

00:34:29,280 --> 00:34:34,200
design for it upfront they go okay we're

00:34:32,129 --> 00:34:36,000
gonna be amazing we're gonna start up

00:34:34,200 --> 00:34:37,260
with our brand new startup it's gonna be

00:34:36,000 --> 00:34:39,360
sharded from the beginning it's been

00:34:37,260 --> 00:34:42,330
fantastic this is like the technical

00:34:39,360 --> 00:34:44,190
debt thing sure you could do that but in

00:34:42,330 --> 00:34:45,450
the same way that you could not take on

00:34:44,190 --> 00:34:48,090
technical debt and have a perfect code

00:34:45,450 --> 00:34:49,230
base that passes every single test and

00:34:48,090 --> 00:34:51,690
had a hundred percent coverage all the

00:34:49,230 --> 00:34:54,060
time you're going to be much slower like

00:34:51,690 --> 00:34:55,590
and almost certainly when you're making

00:34:54,060 --> 00:34:57,570
a new project to be an open-source or

00:34:55,590 --> 00:34:59,670
commercial you don't understand the full

00:34:57,570 --> 00:35:01,650
scope of your problem you should expect

00:34:59,670 --> 00:35:03,840
things to change so in the same way you

00:35:01,650 --> 00:35:06,540
should have some technical debt like I

00:35:03,840 --> 00:35:07,390
often won't write tests for someone hot

00:35:06,540 --> 00:35:08,519
like the haves

00:35:07,390 --> 00:35:11,170
like oh that I think you're gonna change

00:35:08,519 --> 00:35:12,700
you probably shouldn't put sharding in

00:35:11,170 --> 00:35:15,549
there straightaway you should probably

00:35:12,700 --> 00:35:17,589
go well we're gonna leave the touch

00:35:15,549 --> 00:35:20,650
points in here in a particular what I

00:35:17,589 --> 00:35:22,240
suggest is routing all of your queries

00:35:20,650 --> 00:35:24,789
through a single model in Django or a

00:35:22,240 --> 00:35:26,500
single function outside of it so that

00:35:24,789 --> 00:35:28,839
when you have sharding you can come

00:35:26,500 --> 00:35:30,819
along to that one single place and put

00:35:28,839 --> 00:35:32,470
it in like shorting often involves like

00:35:30,819 --> 00:35:34,029
we need to look an ID we'll get a hash

00:35:32,470 --> 00:35:36,640
of the ID find a server and do that

00:35:34,029 --> 00:35:38,230
stuff I've seen many sites that don't do

00:35:36,640 --> 00:35:40,599
this they're like directly query tables

00:35:38,230 --> 00:35:42,849
or do custom rule queries that ruins

00:35:40,599 --> 00:35:44,559
this so let's just try and keep keep the

00:35:42,849 --> 00:35:47,400
split point there but don't split on it

00:35:44,559 --> 00:35:49,869
and that generally works out pretty well

00:35:47,400 --> 00:35:51,789
again with WebSockets and also long

00:35:49,869 --> 00:35:54,160
poles and anything that's like any kind

00:35:51,789 --> 00:35:56,289
of connection is open and you send more

00:35:54,160 --> 00:35:58,900
than one thing down it expected to die

00:35:56,289 --> 00:36:00,819
design for failure if you design for

00:35:58,900 --> 00:36:02,079
failure when things don't fail it's a

00:36:00,819 --> 00:36:03,789
happy surprise about heartless it's

00:36:02,079 --> 00:36:05,680
great it's more efficient if you don't

00:36:03,789 --> 00:36:07,119
design a failure your pager will be gone

00:36:05,680 --> 00:36:08,890
and has a pager your mobile phone will

00:36:07,119 --> 00:36:11,289
be going off all the time you're like ah

00:36:08,890 --> 00:36:12,609
it's not working we it turns out the

00:36:11,289 --> 00:36:14,849
Internet's not perfect and doesn't stay

00:36:12,609 --> 00:36:18,970
open all the time who could have guessed

00:36:14,849 --> 00:36:21,130
I've seen so like I used to write game

00:36:18,970 --> 00:36:23,200
servers and twisted like a few years ago

00:36:21,130 --> 00:36:25,119
and how fur for Minecraft and that's

00:36:23,200 --> 00:36:26,410
another case where like you expect that

00:36:25,119 --> 00:36:27,609
it would stay open forever and you can

00:36:26,410 --> 00:36:29,680
just send things down the socket and

00:36:27,609 --> 00:36:31,599
it's not that's not true you can't do

00:36:29,680 --> 00:36:33,009
that so design me failure not just in

00:36:31,599 --> 00:36:34,509
this but many other things I have other

00:36:33,009 --> 00:36:38,740
talks and designing for failing if you

00:36:34,509 --> 00:36:41,410
were to go and watch them teams this is

00:36:38,740 --> 00:36:43,480
very difficult I am still thinking about

00:36:41,410 --> 00:36:47,230
this problem the best thing I've seen so

00:36:43,480 --> 00:36:50,049
far is independent full stack teams what

00:36:47,230 --> 00:36:52,240
I mean by this is essentially when your

00:36:50,049 --> 00:36:54,339
company gets big enough treat it as lots

00:36:52,240 --> 00:36:56,319
of smaller startups each team has

00:36:54,339 --> 00:36:58,089
operations on it has design on it has

00:36:56,319 --> 00:37:00,490
product on it has research on it and

00:36:58,089 --> 00:37:02,740
they all talk together they have that

00:37:00,490 --> 00:37:05,349
sort of small group feeling and they

00:37:02,740 --> 00:37:06,789
communicate between each other one of

00:37:05,349 --> 00:37:08,200
the common examples of this that's quite

00:37:06,789 --> 00:37:08,950
popular these days is the matrix

00:37:08,200 --> 00:37:10,599
organization

00:37:08,950 --> 00:37:12,069
I haven't got a slide for this it's the

00:37:10,599 --> 00:37:13,779
idea of like oh you have teams that a

00:37:12,069 --> 00:37:16,180
full stack but the people who are

00:37:13,779 --> 00:37:17,559
specialists in each area sort of meet up

00:37:16,180 --> 00:37:19,059
across teams like all the ops people

00:37:17,559 --> 00:37:20,680
have like lunch together

00:37:19,059 --> 00:37:23,500
twice a week and discussed

00:37:20,680 --> 00:37:25,119
I like this because it encourages you to

00:37:23,500 --> 00:37:26,619
think and move as a small company I'm a

00:37:25,119 --> 00:37:29,079
big small company person this is why I

00:37:26,619 --> 00:37:31,510
favor this probably it does have some

00:37:29,079 --> 00:37:33,700
overhead where your teams are gonna have

00:37:31,510 --> 00:37:35,410
to interact more formally they capture a

00:37:33,700 --> 00:37:37,300
quest stuff of each other like big

00:37:35,410 --> 00:37:39,130
companies would and there's almost like

00:37:37,300 --> 00:37:41,859
contracts and interfaces defined between

00:37:39,130 --> 00:37:43,750
them but that gets you those system and

00:37:41,859 --> 00:37:46,000
data model designs for free like if your

00:37:43,750 --> 00:37:46,480
teams are defining how they talk to each

00:37:46,000 --> 00:37:48,010
other

00:37:46,480 --> 00:37:49,780
congratulations you've got a free data

00:37:48,010 --> 00:37:53,950
model out of it so this is generally

00:37:49,780 --> 00:37:56,470
what I prefer another become a thing and

00:37:53,950 --> 00:37:58,780
this is the the last strategy is that I

00:37:56,470 --> 00:38:01,210
see a lot of people not having software

00:37:58,780 --> 00:38:02,950
architects a lot people having just

00:38:01,210 --> 00:38:05,940
software architects now software

00:38:02,950 --> 00:38:09,579
architecture is a very ill-defined term

00:38:05,940 --> 00:38:10,960
I'm probably one maybe I don't know but

00:38:09,579 --> 00:38:13,809
it's the idea it's a person whose

00:38:10,960 --> 00:38:15,790
specialty is coordination and putting

00:38:13,809 --> 00:38:17,859
different pieces together the person who

00:38:15,790 --> 00:38:18,940
would go and look at all those models in

00:38:17,859 --> 00:38:22,599
the abstract and look at how they

00:38:18,940 --> 00:38:24,280
interact it's very common to not have

00:38:22,599 --> 00:38:26,220
this and especially if you're coming

00:38:24,280 --> 00:38:28,240
from a small start-up where again

00:38:26,220 --> 00:38:29,890
everyone understands the whole code base

00:38:28,240 --> 00:38:31,240
because if everyone understands the

00:38:29,890 --> 00:38:33,549
whole code base you don't need this

00:38:31,240 --> 00:38:35,040
person it's not important no one has to

00:38:33,549 --> 00:38:37,540
do that hard work of doing the

00:38:35,040 --> 00:38:39,250
information gathering but once you get

00:38:37,540 --> 00:38:41,020
big enough you need that person and then

00:38:39,250 --> 00:38:42,880
all too often a big enterprise will have

00:38:41,020 --> 00:38:44,890
a team of specialists software

00:38:42,880 --> 00:38:46,510
architects who sit in a big ivory tower

00:38:44,890 --> 00:38:47,859
one into the campus and think about

00:38:46,510 --> 00:38:50,410
things all day and go mmm this is very

00:38:47,859 --> 00:38:52,660
important to us often it's importantly

00:38:50,410 --> 00:38:54,400
practical like I value having practical

00:38:52,660 --> 00:38:57,460
knowledge of stuff I think having people

00:38:54,400 --> 00:38:59,710
who specialize in architecture but still

00:38:57,460 --> 00:39:01,690
are involved in writing software is very

00:38:59,710 --> 00:39:04,049
important like not losing that

00:39:01,690 --> 00:39:06,400
particular focus or view on the world

00:39:04,049 --> 00:39:09,369
and this kind of comes back to the one

00:39:06,400 --> 00:39:10,950
thing which is that monoliths aren't

00:39:09,369 --> 00:39:14,290
that bad really

00:39:10,950 --> 00:39:16,089
I've seen many big sites I've run a few

00:39:14,290 --> 00:39:19,500
big sites that were just a giant

00:39:16,089 --> 00:39:22,180
monolith and they have problems

00:39:19,500 --> 00:39:23,650
certainly but a lot of the problems you

00:39:22,180 --> 00:39:25,480
think you have in the monolith are just

00:39:23,650 --> 00:39:27,609
problems of your team and the way you

00:39:25,480 --> 00:39:29,530
code and go and distributed but

00:39:27,609 --> 00:39:29,819
necessarily make them better and you

00:39:29,530 --> 00:39:31,999
could

00:39:29,819 --> 00:39:33,989
in some cases you should if you have

00:39:31,999 --> 00:39:35,339
pages that are more expensive than

00:39:33,989 --> 00:39:37,349
others you have a big thumbnailing thing

00:39:35,339 --> 00:39:39,569
you have like video rendering these are

00:39:37,349 --> 00:39:41,789
good reasons to split up but Django's

00:39:39,569 --> 00:39:44,190
app system is very good like it's not a

00:39:41,789 --> 00:39:46,559
bad idea to have a hundred django apps

00:39:44,190 --> 00:39:48,539
because when you have a hundred django

00:39:46,559 --> 00:39:50,160
apps a month it my machine it's much

00:39:48,539 --> 00:39:52,769
easier to version them all as one like

00:39:50,160 --> 00:39:54,059
doing releases you have one repo you can

00:39:52,769 --> 00:39:56,130
just release the top version of that

00:39:54,059 --> 00:39:57,479
repo there's no we need version point

00:39:56,130 --> 00:39:58,829
three six of this and point version

00:39:57,479 --> 00:40:00,239
point four of this and version two of

00:39:58,829 --> 00:40:01,619
this but version 3 of this will delete

00:40:00,239 --> 00:40:02,940
version 2 of this queen's mission 4

00:40:01,619 --> 00:40:06,449
that's the problem you get with with

00:40:02,940 --> 00:40:08,430
services so maybe just maybe keep them

00:40:06,449 --> 00:40:10,050
on lift but do think about it and with

00:40:08,430 --> 00:40:19,869
that thank you very much

00:40:10,050 --> 00:40:19,869

YouTube URL: https://www.youtube.com/watch?v=gCNj8mMoq38


