Title: DjangoCon US 2017 -  Live Long and Refactor by Sana Javed
Publication date: 2017-09-07
Playlist: DjangoCon US 2017
Description: 
	DjangoCon US 2017 -  Live Long and Refactor by Sana Javed

Refactoring major components of a live application with many users can be daunting. The stakes are even higher when the users are paying for your product. This talk covers how to approach building and incrementally deploying a complex refactor. Using a case study, I will walk through what makes major refactors so challenging, what you should avoid, and what can make them easier in the future.

This talk was presented at: https://2017.djangocon.us/talks/live-long-and-refactor/

LINKS:
Follow Sana Javed ðŸ‘‡
On Twitter: https://twitter.com/sanacodes
Official homepage: https://www.github.com/sanajaved7

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:19,230
[Music]

00:00:14,690 --> 00:00:20,579
hi everybody I am really excited and a

00:00:19,230 --> 00:00:22,439
little bit nervous to talk about

00:00:20,579 --> 00:00:30,960
refactoring today but hopefully it will

00:00:22,439 --> 00:00:33,750
be fun so yeah so I wanted to start a

00:00:30,960 --> 00:00:36,780
little bit by talking about these two

00:00:33,750 --> 00:00:38,879
particular episodes that show up in Star

00:00:36,780 --> 00:00:41,519
Trek Voyager in the middle I think or

00:00:38,879 --> 00:00:43,620
right at the beginning of season 4 and

00:00:41,519 --> 00:00:45,749
if you're not familiar with Voyager and

00:00:43,620 --> 00:00:49,079
it's with Captain Janeway her crew and

00:00:45,749 --> 00:00:50,819
they kind of accidentally end up 65

00:00:49,079 --> 00:00:55,350
thousand light-years away from Earth

00:00:50,819 --> 00:00:58,339
like really off course and part of their

00:00:55,350 --> 00:01:02,940
you know the entire series kind of

00:00:58,339 --> 00:01:05,040
details their way back home and one in

00:01:02,940 --> 00:01:06,600
these two particular episodes they find

00:01:05,040 --> 00:01:08,760
that if they take this particular path

00:01:06,600 --> 00:01:11,940
they can shave off a couple years of

00:01:08,760 --> 00:01:13,380
their journey back to earth and they do

00:01:11,940 --> 00:01:15,060
a little bit of research it looks like

00:01:13,380 --> 00:01:17,520
the you know the folks that kind of

00:01:15,060 --> 00:01:18,720
inhabit this part of space are generally

00:01:17,520 --> 00:01:20,430
non-confrontational they think it's

00:01:18,720 --> 00:01:23,430
gonna be okay

00:01:20,430 --> 00:01:24,960
but you know it wouldn't be called year

00:01:23,430 --> 00:01:26,580
of health there wasn't kind of like a

00:01:24,960 --> 00:01:28,920
plot twist there and it turns out that

00:01:26,580 --> 00:01:30,630
they actually run into this species

00:01:28,920 --> 00:01:34,320
called the Krenim that are actually

00:01:30,630 --> 00:01:36,480
highly confrontational and you know they

00:01:34,320 --> 00:01:39,570
don't want to allow Voyager to be able

00:01:36,480 --> 00:01:41,370
to go through this part of space and I

00:01:39,570 --> 00:01:44,340
think the the interesting thing about

00:01:41,370 --> 00:01:49,050
this and especially about the Krenim is

00:01:44,340 --> 00:01:51,090
that they're sort of method of war of

00:01:49,050 --> 00:01:54,450
choice is that they've actually figured

00:01:51,090 --> 00:01:56,670
out a way to rewrite history and change

00:01:54,450 --> 00:01:58,860
the entire timeline to prevent their

00:01:56,670 --> 00:02:01,770
enemies from ever actually existing and

00:01:58,860 --> 00:02:04,290
I think what what's interesting about

00:02:01,770 --> 00:02:05,700
that even more than just that that's a

00:02:04,290 --> 00:02:09,690
really cool thing that they can do is

00:02:05,700 --> 00:02:12,989
that they always get it wrong so

00:02:09,690 --> 00:02:14,730
whenever they they are trying to get the

00:02:12,989 --> 00:02:16,980
this Krenim Imperium as they call it

00:02:14,730 --> 00:02:20,190
back to this particular state of of

00:02:16,980 --> 00:02:21,760
power but whenever they do these

00:02:20,190 --> 00:02:24,189
calculations they think that they have a

00:02:21,760 --> 00:02:26,379
for everything every distortion that

00:02:24,189 --> 00:02:27,909
they know of they feel really confident

00:02:26,379 --> 00:02:30,310
they change the timeline and then

00:02:27,909 --> 00:02:32,560
something always goes wrong they never

00:02:30,310 --> 00:02:34,150
actually get it right and I think at one

00:02:32,560 --> 00:02:37,180
point in between the two episodes

00:02:34,150 --> 00:02:38,349
actually Captain Janeway and her crew

00:02:37,180 --> 00:02:39,730
figure out that they can create this

00:02:38,349 --> 00:02:41,680
like temporal shield to protect

00:02:39,730 --> 00:02:43,329
themselves from the Krenim that also

00:02:41,680 --> 00:02:45,459
throws their calculations off that

00:02:43,329 --> 00:02:47,409
actually puts their empire like way

00:02:45,459 --> 00:02:50,590
further behind than they anticipate and

00:02:47,409 --> 00:02:53,290
I think the the lesson in there for us

00:02:50,590 --> 00:02:56,170
as software developers is that sometimes

00:02:53,290 --> 00:02:57,459
when we try to do entire rewrites there

00:02:56,170 --> 00:02:59,680
might be things that we don't account

00:02:57,459 --> 00:03:02,889
for that could lead to some unintended

00:02:59,680 --> 00:03:04,150
consequences so I think that's if you

00:03:02,889 --> 00:03:06,519
get a chance to watch them I think

00:03:04,150 --> 00:03:10,680
they're on Hulu or Netflix and they're

00:03:06,519 --> 00:03:13,329
super interesting episodes so yeah so

00:03:10,680 --> 00:03:16,359
just to kind of get on the same page

00:03:13,329 --> 00:03:19,329
about what is an actual refactor versus

00:03:16,359 --> 00:03:21,430
a full-scale rewrite Michael Fowler one

00:03:19,329 --> 00:03:23,260
of the most kind of prominent engineers

00:03:21,430 --> 00:03:25,120
who thinks about refactoring and in

00:03:23,260 --> 00:03:26,980
clean code a lot has his sort of

00:03:25,120 --> 00:03:30,010
definition but it really boils down to

00:03:26,980 --> 00:03:32,109
sort of like small architectural changes

00:03:30,010 --> 00:03:34,239
to the code that aren't changing

00:03:32,109 --> 00:03:37,120
anything that your end user can really

00:03:34,239 --> 00:03:38,620
tell but it's putting the code base in

00:03:37,120 --> 00:03:40,090
or whatever feature that you're

00:03:38,620 --> 00:03:43,090
refactoring in a better shape for

00:03:40,090 --> 00:03:45,510
maintainability making it easier to test

00:03:43,090 --> 00:03:48,730
making it easier to adapt in the future

00:03:45,510 --> 00:03:50,650
but you know this and when I talk about

00:03:48,730 --> 00:03:53,139
a large-scale refactor today what I'm

00:03:50,650 --> 00:03:55,090
referring to is a series of these

00:03:53,139 --> 00:03:57,430
smaller B factors to smaller features in

00:03:55,090 --> 00:04:00,430
the codebase to you know under kind of

00:03:57,430 --> 00:04:02,199
some broader goal like umbrella and this

00:04:00,430 --> 00:04:04,900
contrast obviously with a full-scale

00:04:02,199 --> 00:04:06,760
rewrite which is really building every

00:04:04,900 --> 00:04:08,769
single feature from scratch you know

00:04:06,760 --> 00:04:10,750
starting all over and not focusing on

00:04:08,769 --> 00:04:16,479
just one set of features or one feature

00:04:10,750 --> 00:04:20,709
which would be a refactor so when and

00:04:16,479 --> 00:04:22,090
why then I guess is a refactor maybe a

00:04:20,709 --> 00:04:24,070
better option for you rather than a

00:04:22,090 --> 00:04:26,979
full-scale rewrite I mean if you're the

00:04:24,070 --> 00:04:29,070
Krenim probably don't do it but there's

00:04:26,979 --> 00:04:31,030
there's a couple of reasons and I think

00:04:29,070 --> 00:04:32,200
some of the most important things to

00:04:31,030 --> 00:04:35,169
think about when you're comparing a

00:04:32,200 --> 00:04:37,030
refactor to an entire rewrite is that

00:04:35,169 --> 00:04:38,830
when you have the existing version of

00:04:37,030 --> 00:04:40,629
your application and your codebase this

00:04:38,830 --> 00:04:41,830
is after you know you've got a lot of

00:04:40,629 --> 00:04:43,629
users you've got a lot of features

00:04:41,830 --> 00:04:45,669
there's been a lot of time dedicated to

00:04:43,629 --> 00:04:48,789
this version of the application when you

00:04:45,669 --> 00:04:50,860
are starting that rewrite you've got a

00:04:48,789 --> 00:04:56,680
pretty tremendous gap between version

00:04:50,860 --> 00:04:58,090
1.0 and version 2.0 right and that you

00:04:56,680 --> 00:05:00,129
know for most businesses or

00:04:58,090 --> 00:05:01,870
organizations that codebase is still

00:05:00,129 --> 00:05:04,419
going to continue to evolve you've got

00:05:01,870 --> 00:05:06,159
users you've got maybe new features

00:05:04,419 --> 00:05:09,310
maybe bug fixes that you need to make

00:05:06,159 --> 00:05:10,960
the entire time while you know a set of

00:05:09,310 --> 00:05:14,110
developers or maybe tasked with building

00:05:10,960 --> 00:05:17,020
out version 2.0 and Bob Martin in his

00:05:14,110 --> 00:05:19,449
clean code series says that this is sort

00:05:17,020 --> 00:05:21,520
of a classic example of the Achilles and

00:05:19,449 --> 00:05:24,520
tortoise paradox that Zeno talked about

00:05:21,520 --> 00:05:26,080
many many years ago and what's happening

00:05:24,520 --> 00:05:28,150
is that because there's that gap and

00:05:26,080 --> 00:05:31,689
because version 1.0 we sort of evolving

00:05:28,150 --> 00:05:33,400
continuously it's very difficult for the

00:05:31,689 --> 00:05:35,229
folks that are working on the 2.0

00:05:33,400 --> 00:05:37,599
version of that application to ever

00:05:35,229 --> 00:05:41,289
actually catch up so what you're left

00:05:37,599 --> 00:05:43,779
with effectively is the question when if

00:05:41,289 --> 00:05:46,449
ever is version 2.0 of the application

00:05:43,779 --> 00:05:48,550
going to be done and I think another

00:05:46,449 --> 00:05:50,649
great point that he makes up referring

00:05:48,550 --> 00:05:52,120
to bob martin is that if you're working

00:05:50,649 --> 00:05:54,610
with the code base that's difficult to

00:05:52,120 --> 00:05:56,379
maintain it has a lot of unintended

00:05:54,610 --> 00:05:57,819
consequences when you change something

00:05:56,379 --> 00:06:00,039
over here in the application and it

00:05:57,819 --> 00:06:01,719
breaks something somewhere else you're

00:06:00,039 --> 00:06:03,399
you probably don't have really great

00:06:01,719 --> 00:06:06,550
test coverage or you might have outdated

00:06:03,399 --> 00:06:09,490
tests and one thing that makes closing

00:06:06,550 --> 00:06:10,960
that gap even harder on top of that is

00:06:09,490 --> 00:06:13,240
that you probably don't have a

00:06:10,960 --> 00:06:14,529
requirements document so for the

00:06:13,240 --> 00:06:17,259
developers who are going to be working

00:06:14,529 --> 00:06:19,509
on that rewrite they have to spend quite

00:06:17,259 --> 00:06:20,710
a bit of time in just understanding what

00:06:19,509 --> 00:06:23,319
are the requirements for this

00:06:20,710 --> 00:06:25,029
application and that if they're buried

00:06:23,319 --> 00:06:27,009
in the existing code base it takes time

00:06:25,029 --> 00:06:29,560
to kind of extract those out of there so

00:06:27,009 --> 00:06:32,319
that also kind of furthers that gap and

00:06:29,560 --> 00:06:33,819
makes it even harder to you know kind of

00:06:32,319 --> 00:06:37,620
get to a point where version 2.0 is

00:06:33,819 --> 00:06:39,879
actually going to be complete other

00:06:37,620 --> 00:06:41,860
other things that are important to think

00:06:39,879 --> 00:06:43,539
about too is that even if you have a

00:06:41,860 --> 00:06:44,889
requirements document even if you know

00:06:43,539 --> 00:06:46,810
exactly what are the components that you

00:06:44,889 --> 00:06:48,370
need to rewrite you know we have to

00:06:46,810 --> 00:06:48,810
think about the emergent properties that

00:06:48,370 --> 00:06:51,419
are in

00:06:48,810 --> 00:06:53,940
codebase so if there's ways that your

00:06:51,419 --> 00:06:56,460
users are using the application that you

00:06:53,940 --> 00:06:58,320
as a developer or as a you know product

00:06:56,460 --> 00:06:59,790
owner might not even be aware of that's

00:06:58,320 --> 00:07:01,560
something to seriously take into

00:06:59,790 --> 00:07:04,590
consideration because if those are

00:07:01,560 --> 00:07:07,070
features that your your paying users

00:07:04,590 --> 00:07:09,840
really rely on for their jobs or their

00:07:07,070 --> 00:07:11,370
you know whatever that they use for your

00:07:09,840 --> 00:07:12,750
application for if they depend on those

00:07:11,370 --> 00:07:14,730
and they're paying you for that product

00:07:12,750 --> 00:07:16,380
a full-scale rewrite might like

00:07:14,730 --> 00:07:17,910
accidentally get rid of those and that

00:07:16,380 --> 00:07:21,240
could be a pretty bad user experience

00:07:17,910 --> 00:07:23,310
for those folks and I think the other

00:07:21,240 --> 00:07:25,169
thing to note too is that depending on

00:07:23,310 --> 00:07:28,169
the size of your team sometimes it's

00:07:25,169 --> 00:07:30,060
just too expensive to say our entire dev

00:07:28,169 --> 00:07:31,350
team or a big portion of it is going to

00:07:30,060 --> 00:07:32,790
work on this full-scale rewrite

00:07:31,350 --> 00:07:34,500
especially if we don't know when that's

00:07:32,790 --> 00:07:35,639
going to be complete when you know

00:07:34,500 --> 00:07:39,889
you've still got users that you have to

00:07:35,639 --> 00:07:39,889
respond to kind of on a day to day basis

00:07:40,310 --> 00:07:47,580
great so when should we do a large-scale

00:07:44,790 --> 00:07:49,350
refactor I've talked about this kind of

00:07:47,580 --> 00:07:51,389
hinted at it a little bit but you know

00:07:49,350 --> 00:07:54,000
sometimes as developers we have to

00:07:51,389 --> 00:07:56,460
rapidly build out an application or our

00:07:54,000 --> 00:08:00,360
product get it out to market and that's

00:07:56,460 --> 00:08:03,060
not easy but easier to do then also

00:08:00,360 --> 00:08:05,370
thinking simultaneously about concepts

00:08:03,060 --> 00:08:07,350
like technical debt maintainability test

00:08:05,370 --> 00:08:10,169
coverage you know is this code in the

00:08:07,350 --> 00:08:12,960
best possible shape for for being able

00:08:10,169 --> 00:08:14,460
to adapt and change over time and you

00:08:12,960 --> 00:08:15,720
know sometimes what we end up with is an

00:08:14,460 --> 00:08:18,720
application that's you know both

00:08:15,720 --> 00:08:20,820
functional functional and profitable but

00:08:18,720 --> 00:08:22,350
a codebase that's very brittle it's very

00:08:20,820 --> 00:08:24,810
difficult for the developers to work in

00:08:22,350 --> 00:08:26,760
so when you have a scenario like that it

00:08:24,810 --> 00:08:29,130
might make sense to think about a

00:08:26,760 --> 00:08:31,800
refactor that would help put the

00:08:29,130 --> 00:08:36,839
codebase in a more maintainable form and

00:08:31,800 --> 00:08:37,950
so yeah so you know going back to the

00:08:36,839 --> 00:08:40,169
point earlier when you've got an

00:08:37,950 --> 00:08:42,240
application that has a lot of users you

00:08:40,169 --> 00:08:44,070
don't want to risk you know messing

00:08:42,240 --> 00:08:45,540
anything up and losing them and you know

00:08:44,070 --> 00:08:47,550
they keep the lights on at the end of

00:08:45,540 --> 00:08:48,510
the day that's another thing that risk

00:08:47,550 --> 00:08:51,630
is something you have to take really

00:08:48,510 --> 00:08:53,370
seriously and yeah when the developers

00:08:51,630 --> 00:08:54,779
are not not just scared but a little bit

00:08:53,370 --> 00:08:56,760
apprehensive about making changes

00:08:54,779 --> 00:08:58,320
because they always have unintended

00:08:56,760 --> 00:08:59,580
fallout that's probably another

00:08:58,320 --> 00:09:03,320
indicator that maybe you need to

00:08:59,580 --> 00:09:03,320
consider a refactor

00:09:04,339 --> 00:09:09,809
so if you're at that point where you

00:09:07,679 --> 00:09:11,220
know you're maybe going to consider a

00:09:09,809 --> 00:09:12,420
refactor what are some of the steps

00:09:11,220 --> 00:09:13,949
especially if it's gonna be something

00:09:12,420 --> 00:09:16,470
fundamental to the application that you

00:09:13,949 --> 00:09:19,350
work on how do you actually begin that

00:09:16,470 --> 00:09:22,410
process at National Journal for the past

00:09:19,350 --> 00:09:24,059
year we have been refactoring our entire

00:09:22,410 --> 00:09:26,669
user authentication and authorization

00:09:24,059 --> 00:09:28,259
process so I'm just going to sort of

00:09:26,669 --> 00:09:30,149
highlight the process that we follow the

00:09:28,259 --> 00:09:31,980
things that have worked for us over the

00:09:30,149 --> 00:09:33,029
past year and hopefully if that's

00:09:31,980 --> 00:09:37,709
something that you're considering too

00:09:33,029 --> 00:09:40,589
it's it's helpful so one of the first

00:09:37,709 --> 00:09:43,919
things that we did was to really focus

00:09:40,589 --> 00:09:47,069
on stabilizing the application and what

00:09:43,919 --> 00:09:48,779
I mean by that is can you confidently

00:09:47,069 --> 00:09:51,029
answer that if your application were to

00:09:48,779 --> 00:09:52,259
go down if you you know all your servers

00:09:51,029 --> 00:09:53,730
were to completely be wiped you had

00:09:52,259 --> 00:09:55,919
nothing would you be able to bring your

00:09:53,730 --> 00:09:57,389
application back up it seems like

00:09:55,919 --> 00:09:59,850
depending on where your particular

00:09:57,389 --> 00:10:02,579
applications are maybe you're in a great

00:09:59,850 --> 00:10:05,129
position on that anyway but for us we

00:10:02,579 --> 00:10:06,689
really had to make sure of to a be able

00:10:05,129 --> 00:10:08,069
to answer that question things like can

00:10:06,689 --> 00:10:09,959
you deploy your application across

00:10:08,069 --> 00:10:12,059
different environments or does it only

00:10:09,959 --> 00:10:14,819
work on the production servers that you

00:10:12,059 --> 00:10:17,040
currently have things like is everything

00:10:14,819 --> 00:10:20,100
in version control sometimes if you have

00:10:17,040 --> 00:10:21,419
a really chaotic codebase and that needs

00:10:20,100 --> 00:10:23,819
to get fixed right away

00:10:21,419 --> 00:10:25,829
there can be a habit of just SS aging

00:10:23,819 --> 00:10:27,569
into that server making that hotfix

00:10:25,829 --> 00:10:29,459
restarting the application because it's

00:10:27,569 --> 00:10:32,220
so urgent you have you can't you know

00:10:29,459 --> 00:10:34,230
follow like a pull request process or

00:10:32,220 --> 00:10:36,089
something so things like that can have a

00:10:34,230 --> 00:10:37,379
really big impact because if the version

00:10:36,089 --> 00:10:39,959
of your code base that's on production

00:10:37,379 --> 00:10:42,749
looks very different from what's on

00:10:39,959 --> 00:10:44,009
staging or what's local that can you

00:10:42,749 --> 00:10:45,480
know before you change a single line of

00:10:44,009 --> 00:10:47,399
code you really want to make sure that

00:10:45,480 --> 00:10:49,829
you know everything is in version

00:10:47,399 --> 00:10:51,569
control some of this stuff might seem

00:10:49,829 --> 00:10:55,230
obvious but our your your secret keys

00:10:51,569 --> 00:10:57,809
your you know api api keys passwords are

00:10:55,230 --> 00:10:58,799
all of those in environment variables if

00:10:57,809 --> 00:11:00,989
you're working on a django application

00:10:58,799 --> 00:11:04,049
are your database migrations in version

00:11:00,989 --> 00:11:06,329
control do you have database backups

00:11:04,049 --> 00:11:08,399
that are generated regularly so that

00:11:06,329 --> 00:11:10,799
you're not connecting to product to the

00:11:08,399 --> 00:11:12,629
production database by accident and you

00:11:10,799 --> 00:11:15,550
know getting dummy data live in front of

00:11:12,629 --> 00:11:17,019
paying users that's really precursory

00:11:15,550 --> 00:11:18,490
work but it's important to kind of make

00:11:17,019 --> 00:11:23,700
sure all your Ducks are in a row before

00:11:18,490 --> 00:11:23,700
you change even a single line of code

00:11:25,589 --> 00:11:30,130
the next thing that's also another sort

00:11:27,910 --> 00:11:32,589
of preliminary step is to depending

00:11:30,130 --> 00:11:33,970
again on your application but if you

00:11:32,589 --> 00:11:36,370
have really outdated tests or you don't

00:11:33,970 --> 00:11:38,890
have any tests it makes sense to kind of

00:11:36,370 --> 00:11:41,890
have some really basic test scaffolding

00:11:38,890 --> 00:11:43,930
in DC where National Journal is based

00:11:41,890 --> 00:11:46,120
we had the Capitol building under

00:11:43,930 --> 00:11:47,709
repairs for quite some time and one of

00:11:46,120 --> 00:11:49,000
the first things that we did or that

00:11:47,709 --> 00:11:50,470
they did during that process was to

00:11:49,000 --> 00:11:52,779
really build out this construction

00:11:50,470 --> 00:11:55,209
scaffolding to give a little bit of more

00:11:52,779 --> 00:11:57,160
support and and coverage for the repairs

00:11:55,209 --> 00:11:59,200
that were to come and I think you can

00:11:57,160 --> 00:12:01,680
think about your your code base and a

00:11:59,200 --> 00:12:04,240
little bit of a similar sense right the

00:12:01,680 --> 00:12:06,640
basic tests and what I mean by that is

00:12:04,240 --> 00:12:09,160
do I get a 200 response does that page

00:12:06,640 --> 00:12:10,209
load really really simple tests you can

00:12:09,160 --> 00:12:12,100
kind of prevent you from having

00:12:10,209 --> 00:12:14,260
unintended downtime especially if you

00:12:12,100 --> 00:12:16,930
have a code base that's a little bit

00:12:14,260 --> 00:12:19,360
chaotic and a little bit volatile and

00:12:16,930 --> 00:12:21,610
the thing is if again depending on the

00:12:19,360 --> 00:12:23,470
team that you're working on if there's

00:12:21,610 --> 00:12:26,529
not really a culture of testing if

00:12:23,470 --> 00:12:28,000
there's not really if the code base is

00:12:26,529 --> 00:12:30,220
not in any kind of shape to even be

00:12:28,000 --> 00:12:33,760
brought under test coverage that can

00:12:30,220 --> 00:12:35,980
require a lot of work upfront but that's

00:12:33,760 --> 00:12:37,380
something that as you continue to you

00:12:35,980 --> 00:12:39,370
know write the tests for the refactored

00:12:37,380 --> 00:12:41,339
you'll sort of see the return on that

00:12:39,370 --> 00:12:43,630
investment pretty quickly and pretty

00:12:41,339 --> 00:12:46,529
extensively as well so I would

00:12:43,630 --> 00:12:46,529
definitely recommend that

00:12:49,920 --> 00:12:54,509
great so once you are you know you've

00:12:52,709 --> 00:12:55,920
got some kind of a little bit more of

00:12:54,509 --> 00:12:58,199
your application in a stable place

00:12:55,920 --> 00:13:00,059
you've got some basic test scaffolding

00:12:58,199 --> 00:13:02,429
the the next thing that I recommend

00:13:00,059 --> 00:13:04,259
doing is really trying to understand

00:13:02,429 --> 00:13:06,809
what element of the application actually

00:13:04,259 --> 00:13:08,639
has to get refactored it's easy

00:13:06,809 --> 00:13:10,319
sometimes to focus on the ways that the

00:13:08,639 --> 00:13:12,480
problems manifest especially for the end

00:13:10,319 --> 00:13:14,759
users in terms of bugs or things that

00:13:12,480 --> 00:13:16,949
you work on but I really recommend

00:13:14,759 --> 00:13:18,749
tracing the problems back down to the

00:13:16,949 --> 00:13:21,359
root as the root cause as much as

00:13:18,749 --> 00:13:23,069
possible it's usually going to go back

00:13:21,359 --> 00:13:25,049
to something pretty fundamental in the

00:13:23,069 --> 00:13:26,819
application it's probably going to be

00:13:25,049 --> 00:13:29,850
scary and that means that you're

00:13:26,819 --> 00:13:32,129
probably on the right track you know for

00:13:29,850 --> 00:13:33,929
us we had a variety of different little

00:13:32,129 --> 00:13:35,579
edge cases of you know something wrong

00:13:33,929 --> 00:13:37,559
with the users permission not being able

00:13:35,579 --> 00:13:40,049
to access the content that they were

00:13:37,559 --> 00:13:41,189
supposed to a weird bug with like a

00:13:40,049 --> 00:13:42,779
little blip where they were supposed to

00:13:41,189 --> 00:13:44,519
be able to log in but you know something

00:13:42,779 --> 00:13:46,259
else happened and for us we sort of

00:13:44,519 --> 00:13:47,790
traced that back down to well where are

00:13:46,259 --> 00:13:49,980
these problems really originating from

00:13:47,790 --> 00:13:51,239
what's the root cause here and it turned

00:13:49,980 --> 00:13:53,669
out to be it was just the way that our

00:13:51,239 --> 00:13:57,869
entire authentication and authorization

00:13:53,669 --> 00:13:59,669
process were structured a really great

00:13:57,869 --> 00:14:02,009
resource to help guide you on that is

00:13:59,669 --> 00:14:04,110
the mikado method a really great book I

00:14:02,009 --> 00:14:05,309
think the authors are are up there I

00:14:04,110 --> 00:14:13,049
would recommend that it was super

00:14:05,309 --> 00:14:15,509
helpful for me this this past year great

00:14:13,049 --> 00:14:23,939
so now when I dive a little bit more

00:14:15,509 --> 00:14:25,379
into this entire refactor process so

00:14:23,939 --> 00:14:28,889
there's a couple points here that I

00:14:25,379 --> 00:14:31,019
wanted to make the first is that when

00:14:28,889 --> 00:14:33,509
you the cycle is broken up into three

00:14:31,019 --> 00:14:35,429
kind of core components the first is the

00:14:33,509 --> 00:14:36,929
refactor which includes you know writing

00:14:35,429 --> 00:14:40,439
the tests and writing the code for the

00:14:36,929 --> 00:14:42,389
actual component the next is deploying

00:14:40,439 --> 00:14:43,879
that pretty quickly and then the third

00:14:42,389 --> 00:14:45,629
is sort of validating that human

00:14:43,879 --> 00:14:47,009
validation that everything is sort of

00:14:45,629 --> 00:14:50,480
working correctly especially as your

00:14:47,009 --> 00:14:52,709
test your test suite is still evolving

00:14:50,480 --> 00:14:54,569
and I think the point that I really

00:14:52,709 --> 00:14:57,029
wanted to emphasize here is that you

00:14:54,569 --> 00:15:00,539
want to refactor to user value and not

00:14:57,029 --> 00:15:01,949
to systems and so I love this analogy of

00:15:00,539 --> 00:15:03,840
the cake because it really shows that

00:15:01,949 --> 00:15:05,460
when we eat cake we don't really start

00:15:03,840 --> 00:15:07,050
with like the base layer and then the

00:15:05,460 --> 00:15:08,730
second layer and then eat like the

00:15:07,050 --> 00:15:10,650
frosting and then the top layer we

00:15:08,730 --> 00:15:12,930
really take a slice and when you think

00:15:10,650 --> 00:15:15,060
about that in terms of user value it's

00:15:12,930 --> 00:15:17,190
it was super helpful for us to sort of

00:15:15,060 --> 00:15:18,930
structure work you know in this example

00:15:17,190 --> 00:15:20,640
it's a user should be able to pay with a

00:15:18,930 --> 00:15:23,190
credit card or a user should be able to

00:15:20,640 --> 00:15:25,590
pay with paypal or be able to pay

00:15:23,190 --> 00:15:27,930
manually and what that means is when

00:15:25,590 --> 00:15:29,550
you're working on or when you're going

00:15:27,930 --> 00:15:31,920
through one version of that or the first

00:15:29,550 --> 00:15:34,320
phase of that cycle you're doing all the

00:15:31,920 --> 00:15:36,750
work that it would require for the user

00:15:34,320 --> 00:15:38,190
to be able to log in right and then you

00:15:36,750 --> 00:15:39,900
would deployed that component you would

00:15:38,190 --> 00:15:42,150
make sure that that's working and then

00:15:39,900 --> 00:15:44,250
you would move to okay now the users

00:15:42,150 --> 00:15:45,540
should be able to log out and then you

00:15:44,250 --> 00:15:47,850
do all the work that's related to that

00:15:45,540 --> 00:15:49,860
and you know those are those are fairly

00:15:47,850 --> 00:15:51,360
simple but you know once you get into

00:15:49,860 --> 00:15:53,310
other components like okay on a

00:15:51,360 --> 00:15:54,420
permission based system a user with a

00:15:53,310 --> 00:15:57,270
certain permission should be able to

00:15:54,420 --> 00:15:59,100
access you know this particular type of

00:15:57,270 --> 00:16:01,800
content without it they shouldn't be

00:15:59,100 --> 00:16:04,020
able to access it it really helps you

00:16:01,800 --> 00:16:06,120
know when that part when that cycle is

00:16:04,020 --> 00:16:07,800
done like okay I can confirm that I've

00:16:06,120 --> 00:16:09,630
got tests verifying this a human has

00:16:07,800 --> 00:16:11,340
also verified this this piece is

00:16:09,630 --> 00:16:13,860
deployed let's move on to the next

00:16:11,340 --> 00:16:15,630
component and overall following the

00:16:13,860 --> 00:16:19,260
cycle really helps mitigate the risk

00:16:15,630 --> 00:16:20,670
that comes even with a refactor you

00:16:19,260 --> 00:16:22,200
don't want to really be in the place

00:16:20,670 --> 00:16:24,120
where you've worked on something for six

00:16:22,200 --> 00:16:25,770
seven eight months and then you're

00:16:24,120 --> 00:16:27,420
finally deploying it and then to find

00:16:25,770 --> 00:16:29,550
out it doesn't work or there's something

00:16:27,420 --> 00:16:31,380
really basic deploying really frequently

00:16:29,550 --> 00:16:35,610
and to use our value helps really

00:16:31,380 --> 00:16:38,250
mitigate that risk and you know who

00:16:35,610 --> 00:16:42,120
doesn't like cake so that's a good way

00:16:38,250 --> 00:16:44,190
to think about it and this is like just

00:16:42,120 --> 00:16:45,720
a quick you know screenshot of like how

00:16:44,190 --> 00:16:48,360
we were sort of structuring our tickets

00:16:45,720 --> 00:16:50,310
and github is what we use for us and so

00:16:48,360 --> 00:16:51,930
just saying okay with this permission a

00:16:50,310 --> 00:16:53,280
user should be able to access this this

00:16:51,930 --> 00:16:56,310
is gonna be all the work that's kind of

00:16:53,280 --> 00:16:57,810
tied to that rpm sometimes test you know

00:16:56,310 --> 00:16:59,580
features and stuff for us so it makes it

00:16:57,810 --> 00:17:01,590
really clear for everybody to be on the

00:16:59,580 --> 00:17:03,570
same page of when this component is done

00:17:01,590 --> 00:17:07,520
and it's live what should be you know

00:17:03,570 --> 00:17:07,520
how can we know that it's it's complete

00:17:08,160 --> 00:17:13,650
and then talking a little bit more about

00:17:10,020 --> 00:17:16,020
that refactor phase I think it's really

00:17:13,650 --> 00:17:17,730
important to and the vertical stories

00:17:16,020 --> 00:17:21,660
sort of force you to do that but it's

00:17:17,730 --> 00:17:23,100
really important to understand you know

00:17:21,660 --> 00:17:25,170
what is the acceptance criteria for that

00:17:23,100 --> 00:17:26,850
feature something like logging logging

00:17:25,170 --> 00:17:28,740
out obviously that's really obvious a

00:17:26,850 --> 00:17:30,750
user it's getting emails got a password

00:17:28,740 --> 00:17:32,550
they should be able to log in but if

00:17:30,750 --> 00:17:33,540
you've got a feature that maybe somebody

00:17:32,550 --> 00:17:35,190
worked on awhile ago

00:17:33,540 --> 00:17:36,690
and there's a little bit less

00:17:35,190 --> 00:17:38,640
institutional knowledge around it it

00:17:36,690 --> 00:17:40,680
really makes sure it's really helpful to

00:17:38,640 --> 00:17:42,300
make sure everybody is on the same page

00:17:40,680 --> 00:17:43,830
and they say well when they go to this

00:17:42,300 --> 00:17:45,540
page and they click this button they

00:17:43,830 --> 00:17:47,730
should be able to download this CSV the

00:17:45,540 --> 00:17:50,340
CSV should have these components getting

00:17:47,730 --> 00:17:51,870
that that criteria kind of upfront and

00:17:50,340 --> 00:17:54,810
and really clear among all the

00:17:51,870 --> 00:17:57,420
stakeholders is super helpful and that's

00:17:54,810 --> 00:17:59,340
it's helpful because once you have that

00:17:57,420 --> 00:18:01,740
it's really clear how you need to sort

00:17:59,340 --> 00:18:02,880
of write your test something kind of

00:18:01,740 --> 00:18:04,770
throughout this process that's really

00:18:02,880 --> 00:18:07,200
important is that you've got current

00:18:04,770 --> 00:18:08,430
users using your application and you're

00:18:07,200 --> 00:18:09,750
trying to make the experience for them

00:18:08,430 --> 00:18:11,160
better and you're trying to make the

00:18:09,750 --> 00:18:13,230
experience for the developers who work

00:18:11,160 --> 00:18:17,370
on the codebase you know a little bit

00:18:13,230 --> 00:18:19,170
better too and so the one of the first

00:18:17,370 --> 00:18:21,180
things for me in this process was making

00:18:19,170 --> 00:18:23,940
sure that I had test for that existing

00:18:21,180 --> 00:18:25,710
feature making sure that as I'm changing

00:18:23,940 --> 00:18:26,760
the code around as I'm you know building

00:18:25,710 --> 00:18:29,030
out something new I'm not

00:18:26,760 --> 00:18:31,260
unintentionally I'm not in tension or

00:18:29,030 --> 00:18:33,720
unintentionally causing problems to the

00:18:31,260 --> 00:18:36,690
existing users so test for the current

00:18:33,720 --> 00:18:38,490
feature is super important the next

00:18:36,690 --> 00:18:40,260
piece on that is writing test for the

00:18:38,490 --> 00:18:42,210
new system hopefully those tests will

00:18:40,260 --> 00:18:44,460
look very similar so once you have that

00:18:42,210 --> 00:18:45,750
first test you're kind of they're gonna

00:18:44,460 --> 00:18:47,790
be a little bit more higher level you

00:18:45,750 --> 00:18:49,740
don't want them to be for super specific

00:18:47,790 --> 00:18:53,550
private methods but really kind of tying

00:18:49,740 --> 00:18:56,130
into the user functionality and and then

00:18:53,550 --> 00:18:59,030
I would write the code for you know the

00:18:56,130 --> 00:19:01,680
refactored code and then you know deploy

00:18:59,030 --> 00:19:04,680
one thing that really helped my thinking

00:19:01,680 --> 00:19:07,020
on this process was martin fowler's blog

00:19:04,680 --> 00:19:09,150
post on the Strangler application

00:19:07,020 --> 00:19:10,500
pattern it's a little bit different

00:19:09,150 --> 00:19:12,780
because he's talking about that in

00:19:10,500 --> 00:19:15,150
reference to a completely separate

00:19:12,780 --> 00:19:16,770
application overtaking an existing one

00:19:15,150 --> 00:19:19,140
but I think the concept is still

00:19:16,770 --> 00:19:21,030
applicable to you know one feature

00:19:19,140 --> 00:19:21,789
that's going to strangle an existing one

00:19:21,030 --> 00:19:24,879
kind of out

00:19:21,789 --> 00:19:27,820
existence and I really would recommend

00:19:24,879 --> 00:19:31,600
reading it it was really helpful for me

00:19:27,820 --> 00:19:33,580
and you know Captain Kirk and Gorn

00:19:31,600 --> 00:19:34,769
fighting when you know your code doesn't

00:19:33,580 --> 00:19:40,600
want to get strangled is always

00:19:34,769 --> 00:19:44,979
something funny to think about great and

00:19:40,600 --> 00:19:47,649
so on this part about writing clean

00:19:44,979 --> 00:19:49,509
maintainable code I wanted to talk a

00:19:47,649 --> 00:19:50,830
little bit about this too because you

00:19:49,509 --> 00:19:52,779
know when you're following something

00:19:50,830 --> 00:19:54,279
like the Strangler application pattern

00:19:52,779 --> 00:19:57,279
what you're gonna have are sort of two

00:19:54,279 --> 00:20:00,849
versions of code for the same feature

00:19:57,279 --> 00:20:01,989
and as developers one of our kind of

00:20:00,849 --> 00:20:03,549
biggest instincts is to make sure that

00:20:01,989 --> 00:20:05,679
our code is dry that we're not repeating

00:20:03,549 --> 00:20:07,629
ourselves but you have to sort of put

00:20:05,679 --> 00:20:10,960
that instinct on hold a little bit at

00:20:07,629 --> 00:20:13,720
this process because one drying up your

00:20:10,960 --> 00:20:16,840
code too quickly and this process can

00:20:13,720 --> 00:20:18,460
lead to really tight coupling and what

00:20:16,840 --> 00:20:20,049
you don't want and what you want at the

00:20:18,460 --> 00:20:21,940
end of the process is a really clear

00:20:20,049 --> 00:20:23,470
division between this was the code for

00:20:21,940 --> 00:20:25,029
the current system this is the code for

00:20:23,470 --> 00:20:26,769
the new one I know exactly what needs to

00:20:25,029 --> 00:20:30,309
get ripped out when the refactor is over

00:20:26,769 --> 00:20:31,840
if you've got you know a method that's

00:20:30,309 --> 00:20:33,460
sort of responding to both systems it

00:20:31,840 --> 00:20:35,349
can be really hard to kind of untangle

00:20:33,460 --> 00:20:37,899
which piece was using was being used by

00:20:35,349 --> 00:20:41,019
which one it'll just kind of save you a

00:20:37,899 --> 00:20:43,179
lot of headache at the end so not saying

00:20:41,019 --> 00:20:44,679
that focusing on not repeating yourself

00:20:43,179 --> 00:20:46,539
is not important but at this stage in

00:20:44,679 --> 00:20:48,399
the process it might be good to just say

00:20:46,539 --> 00:20:49,779
we want a little bit of duplication here

00:20:48,399 --> 00:20:53,919
so we know what we're what we're

00:20:49,779 --> 00:20:55,570
actually need to get rid of and yeah and

00:20:53,919 --> 00:20:57,519
I think it's I think it's really

00:20:55,570 --> 00:21:00,789
important to just slow down and really

00:20:57,519 --> 00:21:03,429
solve the task at hand a lot of times

00:21:00,789 --> 00:21:05,049
the reason why we're doing a refactor is

00:21:03,429 --> 00:21:06,700
because we need to make our code more

00:21:05,049 --> 00:21:08,769
maintainable or we had to get an

00:21:06,700 --> 00:21:11,080
application or a product out to market

00:21:08,769 --> 00:21:13,809
really quickly and if that's the case

00:21:11,080 --> 00:21:15,999
this is really your time to put a little

00:21:13,809 --> 00:21:18,999
bit of you know polish on the code make

00:21:15,999 --> 00:21:20,830
sure that everything from really basic

00:21:18,999 --> 00:21:23,889
stuff to good environment variables

00:21:20,830 --> 00:21:27,279
docstrings another very well sorry

00:21:23,889 --> 00:21:29,019
variable names docstrings are in place

00:21:27,279 --> 00:21:30,730
but also a little bit more advanced

00:21:29,019 --> 00:21:32,679
stuff like are there hidden classes here

00:21:30,730 --> 00:21:34,070
that can be split up can we introduce an

00:21:32,679 --> 00:21:36,860
interface that will make this

00:21:34,070 --> 00:21:41,360
a little bit easier to use I think those

00:21:36,860 --> 00:21:42,980
are those are super important and yeah I

00:21:41,360 --> 00:21:44,600
think where where you didn't have the

00:21:42,980 --> 00:21:47,000
opportunity in the beginning to really

00:21:44,600 --> 00:21:51,410
focus on maintainability this is really

00:21:47,000 --> 00:21:54,080
your opportunity to do that and I think

00:21:51,410 --> 00:21:56,960
another another really difficult thing

00:21:54,080 --> 00:21:58,580
to do is to hold the line on scope and

00:21:56,960 --> 00:21:59,960
what I mean by that is you know when

00:21:58,580 --> 00:22:01,790
you're in the codebase and you see

00:21:59,960 --> 00:22:03,320
something that has kind of been a bug

00:22:01,790 --> 00:22:05,450
for a long time and you're like I can

00:22:03,320 --> 00:22:07,640
just take a quick detour and and fix

00:22:05,450 --> 00:22:08,960
this and then come back to you know to

00:22:07,640 --> 00:22:10,430
what I was doing or it's just gonna take

00:22:08,960 --> 00:22:14,270
me five minutes let me just hammer it

00:22:10,430 --> 00:22:15,920
out those detours as as distracting as

00:22:14,270 --> 00:22:17,540
they can be and attempting to kind of

00:22:15,920 --> 00:22:20,540
hold off on them they actually will end

00:22:17,540 --> 00:22:22,460
up anchoring and and adding up over time

00:22:20,540 --> 00:22:23,810
to how long the refactor is going to

00:22:22,460 --> 00:22:26,930
take and when you're doing something

00:22:23,810 --> 00:22:29,050
like an entire oval overhaul of an

00:22:26,930 --> 00:22:31,250
authentication or authorization system

00:22:29,050 --> 00:22:32,600
you really want to make sure that you're

00:22:31,250 --> 00:22:35,060
keeping your eyes on the prize and

00:22:32,600 --> 00:22:37,520
really getting the the refactor done as

00:22:35,060 --> 00:22:38,630
quickly as possible too so holding the

00:22:37,520 --> 00:22:40,130
line on scope and not getting distracted

00:22:38,630 --> 00:22:41,690
by all the kind of millions of things

00:22:40,130 --> 00:22:43,910
that you just wish you had like a second

00:22:41,690 --> 00:22:46,400
to fix and then you know but you kind of

00:22:43,910 --> 00:22:47,870
still take a detour and you know really

00:22:46,400 --> 00:22:49,580
the end goal is that the codebase is

00:22:47,870 --> 00:22:51,230
gonna be in a much better position for

00:22:49,580 --> 00:22:53,570
you to be able to make those changes at

00:22:51,230 --> 00:22:58,570
the end of the day so you know keeping

00:22:53,570 --> 00:22:58,570
that in mind just sort of focusing on

00:23:03,600 --> 00:23:10,090
great and this is not to it's not to say

00:23:08,260 --> 00:23:13,240
that writing cleaning maintainable code

00:23:10,090 --> 00:23:15,880
is easy it's actually very hard it's a

00:23:13,240 --> 00:23:17,950
process it's one that takes a lot of

00:23:15,880 --> 00:23:20,290
time it takes a lot of thought and when

00:23:17,950 --> 00:23:22,360
you're used to you know things kind of

00:23:20,290 --> 00:23:24,250
on fire and a little bit of chaos and

00:23:22,360 --> 00:23:25,840
when working really quickly to like you

00:23:24,250 --> 00:23:28,780
know hammer out features it can be weird

00:23:25,840 --> 00:23:30,850
to sort of take your time and you know

00:23:28,780 --> 00:23:32,080
and and work on it well but I would say

00:23:30,850 --> 00:23:34,750
use the tools that are at your disposal

00:23:32,080 --> 00:23:36,550
there's engineers and developers who've

00:23:34,750 --> 00:23:38,679
been working on and thinking about this

00:23:36,550 --> 00:23:42,309
types of stuff for four decades some of

00:23:38,679 --> 00:23:44,679
my favorites are Uncle Bob Bob Martin if

00:23:42,309 --> 00:23:46,570
you've ever watched his videos he is a

00:23:44,679 --> 00:23:48,190
really hilarious person and he wears a

00:23:46,570 --> 00:23:50,320
lot of different costumes dresses up as

00:23:48,190 --> 00:23:52,660
Spock as Captain Kirk he's really great

00:23:50,320 --> 00:23:54,340
resource um Michael feathers has a

00:23:52,660 --> 00:23:57,990
fantastic book working with legacy code

00:23:54,340 --> 00:24:00,309
and he covers everything from you know I

00:23:57,990 --> 00:24:01,450
like it's sort of like a resource book

00:24:00,309 --> 00:24:03,160
where I want to change something where I

00:24:01,450 --> 00:24:05,020
don't know how to bring this under test

00:24:03,160 --> 00:24:07,960
coverage how do I start that's another

00:24:05,020 --> 00:24:09,309
great resource and martin fowler's

00:24:07,960 --> 00:24:10,750
refactoring book is also really

00:24:09,309 --> 00:24:13,150
fantastic i also mentioned the mikado

00:24:10,750 --> 00:24:19,570
method book earlier those are really

00:24:13,150 --> 00:24:22,600
great yeah so just to recap if your

00:24:19,570 --> 00:24:24,100
application is profitable if it's got a

00:24:22,600 --> 00:24:26,260
lot of users but it's really difficult

00:24:24,100 --> 00:24:28,600
as a developer to work on or to maintain

00:24:26,260 --> 00:24:30,550
or changing something in one place

00:24:28,600 --> 00:24:32,590
causes a problem in other places and

00:24:30,550 --> 00:24:34,690
you're playing whack-a-mole you might

00:24:32,590 --> 00:24:36,490
really want to consider a refactor to

00:24:34,690 --> 00:24:38,620
make your codebase a little bit more

00:24:36,490 --> 00:24:40,929
maintainable and when you start the

00:24:38,620 --> 00:24:42,910
refactor you want to ensure that your

00:24:40,929 --> 00:24:44,770
application is stable by making sure

00:24:42,910 --> 00:24:46,900
it's reproducible that it's got at the

00:24:44,770 --> 00:24:49,960
bare minimum basic you know smoke test

00:24:46,900 --> 00:24:51,700
and when you're thinking about what

00:24:49,960 --> 00:24:53,830
needs to get refactor you really want to

00:24:51,700 --> 00:24:55,150
not just focus on the way that the

00:24:53,830 --> 00:24:56,740
different issues are manifesting for the

00:24:55,150 --> 00:24:58,720
end users or the bugs that you're seeing

00:24:56,740 --> 00:25:01,330
maybe in your logging system but really

00:24:58,720 --> 00:25:03,130
looking at what is the root cause of all

00:25:01,330 --> 00:25:05,250
these different problems and really kind

00:25:03,130 --> 00:25:10,120
of seeing the forest through the trees

00:25:05,250 --> 00:25:12,820
and yeah try to follow the refactor

00:25:10,120 --> 00:25:15,280
deploy cycle as closely as possible to

00:25:12,820 --> 00:25:16,300
both mitigate risk but then to also you

00:25:15,280 --> 00:25:17,950
know know when that

00:25:16,300 --> 00:25:20,470
that component of that feature is done

00:25:17,950 --> 00:25:22,870
and try to do it to user to user feature

00:25:20,470 --> 00:25:26,290
rather than the system and remember that

00:25:22,870 --> 00:25:27,400
sort of like cake analogy and yeah

00:25:26,290 --> 00:25:29,350
you're going to be maintaining two

00:25:27,400 --> 00:25:31,660
versions of the code base until you're

00:25:29,350 --> 00:25:38,380
actually done and not focusing on dry

00:25:31,660 --> 00:25:49,000
too early yeah and so with that go forth

00:25:38,380 --> 00:25:51,370
and and refactor so at what point would

00:25:49,000 --> 00:25:53,200
you consider that the your code base is

00:25:51,370 --> 00:25:57,430
so terrible that'd be worth doing a full

00:25:53,200 --> 00:25:59,980
rewrite rather than the refactor I don't

00:25:57,430 --> 00:26:01,770
think it's a matter of how terrible the

00:25:59,980 --> 00:26:04,000
code base is I think it's a matter of

00:26:01,770 --> 00:26:06,220
whether or not you've got paying users

00:26:04,000 --> 00:26:08,440
that depend on your application you know

00:26:06,220 --> 00:26:10,650
for us we serve a lot of different

00:26:08,440 --> 00:26:13,780
government agencies organizations

00:26:10,650 --> 00:26:15,040
associations and doing a full rewrite

00:26:13,780 --> 00:26:17,230
and the different risks that come with

00:26:15,040 --> 00:26:19,180
it or just we're just not feasible and

00:26:17,230 --> 00:26:20,770
so even though we were having a number

00:26:19,180 --> 00:26:22,270
of different problems kind of crop up it

00:26:20,770 --> 00:26:24,190
made sense for us to say we're gonna

00:26:22,270 --> 00:26:25,750
refactor we know that the problems are

00:26:24,190 --> 00:26:27,700
sort of stemming from this one place

00:26:25,750 --> 00:26:30,310
we're gonna allocate all of our time to

00:26:27,700 --> 00:26:32,380
refactoring that and I think Bob Martin

00:26:30,310 --> 00:26:34,540
makes a good point in in one of his

00:26:32,380 --> 00:26:36,160
videos and he says you just have to sort

00:26:34,540 --> 00:26:39,160
of face where the problem is stemming

00:26:36,160 --> 00:26:40,420
from because if you do the rewrite you

00:26:39,160 --> 00:26:42,070
might actually end up making some of

00:26:40,420 --> 00:26:43,690
those same mistakes that were existing

00:26:42,070 --> 00:26:45,310
in the first code base - and I thought

00:26:43,690 --> 00:26:47,080
that was that was a really great point

00:26:45,310 --> 00:26:48,640
especially if you're under that kind of

00:26:47,080 --> 00:26:52,230
time constraint in that pressure to get

00:26:48,640 --> 00:26:57,280
that second version out just as quickly

00:26:52,230 --> 00:27:00,550
the draw to take those detours even if

00:26:57,280 --> 00:27:03,280
it's just 15 minutes or half hour so

00:27:00,550 --> 00:27:06,910
it's easy to say don't do it you can you

00:27:03,280 --> 00:27:10,570
offer any advice as to how best to to

00:27:06,910 --> 00:27:12,250
maintain focus yeah I think one of the

00:27:10,570 --> 00:27:14,650
things that that's been my go-to is that

00:27:12,250 --> 00:27:16,570
if I notice something to at least flag

00:27:14,650 --> 00:27:19,720
it for rpms or create an incoming tissue

00:27:16,570 --> 00:27:21,250
so if tissue kind of incoming issue so

00:27:19,720 --> 00:27:22,540
that I know that at some point I'll be

00:27:21,250 --> 00:27:24,520
able to kind of go back and be like yes

00:27:22,540 --> 00:27:27,160
I wanted to circle back and focus on

00:27:24,520 --> 00:27:29,050
this so not giving too much brain power

00:27:27,160 --> 00:27:29,370
to the the things that I'm like oh

00:27:29,050 --> 00:27:32,450
that's

00:27:29,370 --> 00:27:34,800
bug I want to fix it and then I think

00:27:32,450 --> 00:27:36,660
what I like about the vertical stories

00:27:34,800 --> 00:27:38,610
approach right that cake slice is that I

00:27:36,660 --> 00:27:41,700
know exactly the piece that I have to

00:27:38,610 --> 00:27:43,140
work on so if it is okay user should be

00:27:41,700 --> 00:27:44,880
able to sign up for this newsletter I

00:27:43,140 --> 00:27:47,400
know that's that's the piece that I'm

00:27:44,880 --> 00:27:48,930
working on and once that's done maybe if

00:27:47,400 --> 00:27:50,430
I have time or whatever later on I can

00:27:48,930 --> 00:27:52,410
come back to that piece that I sort of

00:27:50,430 --> 00:27:53,730
saw was problematic but kind of just

00:27:52,410 --> 00:27:55,440
flagging and kind of putting a pin in it

00:27:53,730 --> 00:27:58,040
for myself to come back to laters it's

00:27:55,440 --> 00:27:58,040
been my go-to

00:27:59,640 --> 00:28:06,469

YouTube URL: https://www.youtube.com/watch?v=PPe4Gps8Wzk


