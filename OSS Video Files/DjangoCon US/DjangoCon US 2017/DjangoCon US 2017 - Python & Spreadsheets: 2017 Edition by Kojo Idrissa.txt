Title: DjangoCon US 2017 - Python & Spreadsheets: 2017 Edition by Kojo Idrissa
Publication date: 2017-09-07
Playlist: DjangoCon US 2017
Description: 
	DjangoCon US 2017 - Python & Spreadsheets: 2017 Edition by Kojo Idrissa

Spreadsheets are OFTEN terrible. Theyâ€™re also everywhere! As one of the default forms of data exchange, learning to work with spreadsheets directly via Python can save time and effort. Weâ€™ll look at Openpyxl, a library that lets you do just that. Weâ€™ll look at at least two different (beginner-friendly) example cases: transforming one spreadsheet into another spreadsheet and converting a spreadsheet into JSON. Iâ€™ll also use my experience as a former accountant to highlight some of the issues around reading from and writing to a spreadsheet file and how you might deal with them. You MAY even learn to make new friends and grow the Python community! True Story!

This talk was presented at: https://2017.djangocon.us/talks/python-spreadsheets-2017-edition/

LINKS:
Follow Kojo Idrissa ðŸ‘‡
On Twitter: https://twitter.com/transitionswpz
Official homepage: http://kojoidrissa.com

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:20,010
[Music]

00:00:13,430 --> 00:00:22,650
so I am here I am your presenter

00:00:20,010 --> 00:00:24,689
Kojiro Teresa here are my slides as you

00:00:22,650 --> 00:00:28,230
can see I'm very fancy and I've made

00:00:24,689 --> 00:00:33,420
very fancy elaborate slides with white

00:00:28,230 --> 00:00:34,800
and black text because the man who talks

00:00:33,420 --> 00:00:39,300
about spreadsheets of course I'm very

00:00:34,800 --> 00:00:40,500
concerned about fancy things so the

00:00:39,300 --> 00:00:43,770
talking here Python in spreadsheets

00:00:40,500 --> 00:00:45,359
state-of-the-union August 2017 it's

00:00:43,770 --> 00:00:46,710
called that for a reason and just for

00:00:45,359 --> 00:00:48,660
informational purposes my name is there

00:00:46,710 --> 00:00:50,940
my twitter handle is also on every slide

00:00:48,660 --> 00:00:52,019
so if you have question you want to

00:00:50,940 --> 00:00:54,269
tweet at me later

00:00:52,019 --> 00:00:56,519
then that's a thing you can do I'm

00:00:54,269 --> 00:00:58,170
usually pretty available so this is

00:00:56,519 --> 00:01:00,620
called state-of-the-union August 27

00:00:58,170 --> 00:01:03,780
because I gave this talk initially in

00:01:00,620 --> 00:01:05,339
2013 or version of it in 2013 when I

00:01:03,780 --> 00:01:07,409
first started using the library I'll be

00:01:05,339 --> 00:01:08,850
talking about so right now I'm a QA

00:01:07,409 --> 00:01:12,150
specialist for start-up in Houston

00:01:08,850 --> 00:01:14,970
called decision health I used to be an

00:01:12,150 --> 00:01:18,300
accountant and then I got an MBA then I

00:01:14,970 --> 00:01:20,190
ran away to China and was a college

00:01:18,300 --> 00:01:22,620
instructor there for a few years and I

00:01:20,190 --> 00:01:24,390
felt taught here in the US but all the

00:01:22,620 --> 00:01:25,920
slides in the ipython notebook I'm using

00:01:24,390 --> 00:01:29,490
for this talk will be available at the

00:01:25,920 --> 00:01:31,500
link there and my github django con 2017

00:01:29,490 --> 00:01:32,840
it's not available at the moment but it

00:01:31,500 --> 00:01:35,730
will be soon

00:01:32,840 --> 00:01:37,560
note - so when I turn to look at look at

00:01:35,730 --> 00:01:41,840
the screen turn my body and not my head

00:01:37,560 --> 00:01:43,920
because the way this turn my head this

00:01:41,840 --> 00:01:45,120
is what happens when you you know

00:01:43,920 --> 00:01:48,240
practice this talk with your time you

00:01:45,120 --> 00:01:51,560
realize these finer details so basic

00:01:48,240 --> 00:01:53,910
outline of what the tops going to be

00:01:51,560 --> 00:01:56,700
talk about how I got here sort of my

00:01:53,910 --> 00:01:58,890
secret origin story I demonstrate some

00:01:56,700 --> 00:02:00,900
of the fundamentals some of the

00:01:58,890 --> 00:02:03,450
fundamental data types that open pi

00:02:00,900 --> 00:02:04,860
excel gives you and that's because there

00:02:03,450 --> 00:02:06,270
are a few things there that are a little

00:02:04,860 --> 00:02:08,220
non-obvious but then what's to explain

00:02:06,270 --> 00:02:10,619
they seem you recognize how helpful they

00:02:08,220 --> 00:02:12,569
are then we'll take a do a basic demo of

00:02:10,619 --> 00:02:14,670
some basic things you can do with Python

00:02:12,569 --> 00:02:16,050
and spreadsheets and then we'll look at

00:02:14,670 --> 00:02:18,209
some of the problems that you'll run

00:02:16,050 --> 00:02:20,489
into trying to use spreadsheets with

00:02:18,209 --> 00:02:22,590
code there are certain things that are

00:02:20,489 --> 00:02:24,930
there are some situations where using a

00:02:22,590 --> 00:02:26,640
spreadsheet with code is straightforward

00:02:24,930 --> 00:02:27,900
and simple but then there are a lot of

00:02:26,640 --> 00:02:29,490
situations where it's not and so I just

00:02:27,900 --> 00:02:32,190
want to highlight some of those again

00:02:29,490 --> 00:02:34,410
the pain of my life as a recovering

00:02:32,190 --> 00:02:39,240
accountant can hopefully benefit you at

00:02:34,410 --> 00:02:40,650
some point so uh secret origin of Kojo I

00:02:39,240 --> 00:02:42,240
should be professional spreadsheet

00:02:40,650 --> 00:02:43,410
fighter which is also what's known as an

00:02:42,240 --> 00:02:45,660
accountant

00:02:43,410 --> 00:02:46,920
lots of spreadsheets all the time you'd

00:02:45,660 --> 00:02:48,150
be terrified by how many large

00:02:46,920 --> 00:02:49,680
organizations are running spreadsheets

00:02:48,150 --> 00:02:51,780
but I'd always had an interesting code

00:02:49,680 --> 00:02:54,030
and learning to program but I never

00:02:51,780 --> 00:02:56,850
really needed to as someone who was a

00:02:54,030 --> 00:02:58,709
professional programmer so I decided in

00:02:56,850 --> 00:03:00,120
late 2012 so you get more serious about

00:02:58,709 --> 00:03:03,450
teaching myself to code and becoming a

00:03:00,120 --> 00:03:05,280
professional developer and I went pro ie

00:03:03,450 --> 00:03:08,489
got my first development job in December

00:03:05,280 --> 00:03:10,620
of 2015 so that's sort of how I got to

00:03:08,489 --> 00:03:14,310
this point and so my role in the Python

00:03:10,620 --> 00:03:16,019
community is such that I've always had

00:03:14,310 --> 00:03:17,790
an interest in trying to make some sort

00:03:16,019 --> 00:03:19,110
of a contribution to the community but

00:03:17,790 --> 00:03:21,750
as someone who didn't come from a

00:03:19,110 --> 00:03:23,670
traditional CS background or a coding

00:03:21,750 --> 00:03:25,739
background I knew I wasn't gonna start

00:03:23,670 --> 00:03:28,080
just making contributions by writing

00:03:25,739 --> 00:03:30,570
awesome code on day one or even early on

00:03:28,080 --> 00:03:32,310
so I thought well I can you know I got

00:03:30,570 --> 00:03:34,110
decent personal skills and interpersonal

00:03:32,310 --> 00:03:38,459
skills so I can maybe help grow the

00:03:34,110 --> 00:03:39,900
community and so I thought one of the

00:03:38,459 --> 00:03:42,750
best ways to grow the Python community

00:03:39,900 --> 00:03:44,370
was not by converting people who used

00:03:42,750 --> 00:03:46,590
other languages into Python developers

00:03:44,370 --> 00:03:48,810
but by taking people who weren't

00:03:46,590 --> 00:03:50,070
developers and bringing them into the

00:03:48,810 --> 00:03:53,459
Python community by showing them how

00:03:50,070 --> 00:03:55,170
Python can benefit them and for one

00:03:53,459 --> 00:03:57,450
reason if you're already developing say

00:03:55,170 --> 00:04:00,060
in Java or C++ or what have you you

00:03:57,450 --> 00:04:01,860
already have your built-in biases but at

00:04:00,060 --> 00:04:03,390
the same time there are more people who

00:04:01,860 --> 00:04:04,950
aren't programmers than there are people

00:04:03,390 --> 00:04:06,840
who are programmers you can pour it so

00:04:04,950 --> 00:04:08,220
it's just a bigger growth factor I'm

00:04:06,840 --> 00:04:11,970
also wanting to look at some solutions

00:04:08,220 --> 00:04:13,049
that are not obviously people who aren't

00:04:11,970 --> 00:04:14,910
developers so there are certain things

00:04:13,049 --> 00:04:18,289
if you're a developer you think about

00:04:14,910 --> 00:04:21,539
things in a certain way when I first

00:04:18,289 --> 00:04:23,160
gave this talk one of the one of these

00:04:21,539 --> 00:04:24,780
solutions to this problem that someone

00:04:23,160 --> 00:04:27,240
suggested we're just put it in a

00:04:24,780 --> 00:04:28,890
database well if you already know SQL

00:04:27,240 --> 00:04:30,840
and you'd have access to databases you

00:04:28,890 --> 00:04:34,810
you wouldn't have the problems that I'm

00:04:30,840 --> 00:04:36,340
discussing on this talk so trying to

00:04:34,810 --> 00:04:37,300
come up with some solutions that are

00:04:36,340 --> 00:04:40,930
useful to people who aren't already

00:04:37,300 --> 00:04:42,520
developers so who's the talk for we've

00:04:40,930 --> 00:04:44,710
got to sort of two sets of people the

00:04:42,520 --> 00:04:46,419
talk is geared at and again I'm trying

00:04:44,710 --> 00:04:47,740
why not again but if you've read the

00:04:46,419 --> 00:04:48,790
description you might have seen that I'm

00:04:47,740 --> 00:04:51,220
trying to make this talk as beginner

00:04:48,790 --> 00:04:52,930
friendly as possible and so we've got

00:04:51,220 --> 00:04:55,570
two general categories of people one

00:04:52,930 --> 00:04:57,100
people who are using spreadsheets on a

00:04:55,570 --> 00:04:58,600
regular basis but want to sort of step

00:04:57,100 --> 00:05:00,970
their game up want to be able to do some

00:04:58,600 --> 00:05:02,560
different things with spreadsheets in

00:05:00,970 --> 00:05:03,820
most cases Excel so they want to be able

00:05:02,560 --> 00:05:06,040
to use some things outside of the norm

00:05:03,820 --> 00:05:07,479
with the spreadsheet and then the next

00:05:06,040 --> 00:05:09,610
set of people are people who are already

00:05:07,479 --> 00:05:10,900
Python developers but they keep being

00:05:09,610 --> 00:05:12,220
given spreadsheets they keep being

00:05:10,900 --> 00:05:13,510
confronted with spreadsheets like well

00:05:12,220 --> 00:05:15,370
what do I do with these like there's got

00:05:13,510 --> 00:05:16,840
to be some better way to handle these so

00:05:15,370 --> 00:05:21,070
hopefully this will benefit both sets of

00:05:16,840 --> 00:05:23,560
people so the code here is not going to

00:05:21,070 --> 00:05:25,060
be very advanced again partially because

00:05:23,560 --> 00:05:27,389
one of this talked to me as beginner

00:05:25,060 --> 00:05:30,280
friendly as possible but also because

00:05:27,389 --> 00:05:32,050
the really interesting things code wise

00:05:30,280 --> 00:05:35,290
are going to be based on your specific

00:05:32,050 --> 00:05:36,760
application so pulling data out of the

00:05:35,290 --> 00:05:38,080
spreadsheet writing data back to the

00:05:36,760 --> 00:05:39,580
spreadsheet those things are fairly

00:05:38,080 --> 00:05:41,080
straightforward there are some other

00:05:39,580 --> 00:05:42,789
things that the library will help you do

00:05:41,080 --> 00:05:44,979
but they're really interesting things

00:05:42,789 --> 00:05:48,070
are going to be based around your

00:05:44,979 --> 00:05:49,240
specific use case so I can't I don't

00:05:48,070 --> 00:05:51,729
know what that is and I can't

00:05:49,240 --> 00:05:54,820
demonstrate that code so I'm showing

00:05:51,729 --> 00:05:56,470
fairly basic code for a couple of basic

00:05:54,820 --> 00:05:59,289
applications to give you some ideas of

00:05:56,470 --> 00:06:01,690
what can be done so now it's time for

00:05:59,289 --> 00:06:03,490
demo this demo sponsored by Jupiter

00:06:01,690 --> 00:06:06,700
notebooks Jupiter notebooks purveyor of

00:06:03,490 --> 00:06:08,970
fine internet notebooks since like five

00:06:06,700 --> 00:06:08,970
years ago

00:06:09,820 --> 00:06:18,140
not that long ago but still very helpful

00:06:12,710 --> 00:06:22,040
so step one that has this read a bunch

00:06:18,140 --> 00:06:35,120
of people in the back yes okay I got a

00:06:22,040 --> 00:06:36,080
kind of I got a too big yes yeah so the

00:06:35,120 --> 00:06:39,140
first thing you have to do is you have

00:06:36,080 --> 00:06:40,460
to know your data and for that we'll

00:06:39,140 --> 00:06:43,820
take a look at the actual spreadsheet

00:06:40,460 --> 00:06:45,470
file it's almost impossible to try to to

00:06:43,820 --> 00:06:47,150
work with code programmatically we work

00:06:45,470 --> 00:06:48,170
with a spreadsheet programmatically if

00:06:47,150 --> 00:06:50,630
you don't know what's in the spreadsheet

00:06:48,170 --> 00:06:55,280
and so here what we've got for my simple

00:06:50,630 --> 00:06:58,310
example and we could I know I don't want

00:06:55,280 --> 00:07:00,830
help what you do what I say and what you

00:06:58,310 --> 00:07:04,130
to do what I mean at what I say you

00:07:00,830 --> 00:07:07,610
spreadsheet or trouble already there we

00:07:04,130 --> 00:07:09,440
go I'm gonna blame my own mistakes on

00:07:07,610 --> 00:07:11,870
the spreadsheet that's how that goes so

00:07:09,440 --> 00:07:15,350
what we have here is we have some data

00:07:11,870 --> 00:07:17,030
we have what is some simulated timesheet

00:07:15,350 --> 00:07:19,940
data so what we have here we have an

00:07:17,030 --> 00:07:22,880
employee number and the employee number

00:07:19,940 --> 00:07:23,930
identifies each employee so that's the

00:07:22,880 --> 00:07:26,060
same employer this is a different

00:07:23,930 --> 00:07:27,740
employee an employee number the cost

00:07:26,060 --> 00:07:29,510
center that that employee worked for so

00:07:27,740 --> 00:07:31,610
there's sort of this specific work group

00:07:29,510 --> 00:07:33,110
we also have their division within the

00:07:31,610 --> 00:07:35,870
company so your company is broken into

00:07:33,110 --> 00:07:37,910
multiple different divisions and so each

00:07:35,870 --> 00:07:40,310
division will have multiple cost centers

00:07:37,910 --> 00:07:43,100
in it then who is that employees manager

00:07:40,310 --> 00:07:45,919
and of course these are you know fake

00:07:43,100 --> 00:07:47,419
simulated names and then the date that

00:07:45,919 --> 00:07:49,430
they worked so again this is timesheet

00:07:47,419 --> 00:07:51,410
data so we're seeing here on this date

00:07:49,430 --> 00:07:53,900
this employee with this name and this

00:07:51,410 --> 00:07:56,390
employee number you won't see the the

00:07:53,900 --> 00:07:59,630
sub moving clear fairly well all right

00:07:56,390 --> 00:08:03,169
so this employee worked one hour on a

00:07:59,630 --> 00:08:07,820
project and so this is simplified data

00:08:03,169 --> 00:08:09,169
just for the purposes if you work in a

00:08:07,820 --> 00:08:10,880
professional services firm so I've

00:08:09,169 --> 00:08:12,110
worked in accounting firm that in for

00:08:10,880 --> 00:08:14,300
engineering companies and things of that

00:08:12,110 --> 00:08:16,460
nature one of the things that they look

00:08:14,300 --> 00:08:18,789
at is what's called utilization so how

00:08:16,460 --> 00:08:21,410
much time you spend working on an actual

00:08:18,789 --> 00:08:22,160
billable project versus what's called

00:08:21,410 --> 00:08:23,690
overhead

00:08:22,160 --> 00:08:25,040
where you're at work and you're doing

00:08:23,690 --> 00:08:26,570
things but you're not working on a

00:08:25,040 --> 00:08:28,730
specific client project that they can

00:08:26,570 --> 00:08:29,990
build for for this example everybody's

00:08:28,730 --> 00:08:31,900
working on the billable project yeah so

00:08:29,990 --> 00:08:33,800
we're not doing that level of analysis

00:08:31,900 --> 00:08:34,970
well that's what we've got here so we've

00:08:33,800 --> 00:08:37,220
got basic timesheet data so this

00:08:34,970 --> 00:08:38,960
employee worked one hour on a project

00:08:37,220 --> 00:08:41,150
and then they worked three hours on

00:08:38,960 --> 00:08:42,979
another project the next day so on and

00:08:41,150 --> 00:08:45,190
so forth so I've got about ten thousand

00:08:42,979 --> 00:08:47,300
thousand a thousand rows of data here

00:08:45,190 --> 00:08:49,900
examples that I've worked on before had

00:08:47,300 --> 00:08:52,490
ten fifteen twenty thousand rows of data

00:08:49,900 --> 00:08:53,720
so this is the basic data and again if

00:08:52,490 --> 00:08:55,220
you're going to be it's just like

00:08:53,720 --> 00:08:57,620
anything else in programming if you're

00:08:55,220 --> 00:08:58,790
going to be writing code and manipulate

00:08:57,620 --> 00:09:02,020
data you need to be familiar with that

00:08:58,790 --> 00:09:05,840
data so here's the basic data we've got

00:09:02,020 --> 00:09:07,460
and then we start with some basics

00:09:05,840 --> 00:09:09,410
reading a file and some getting some

00:09:07,460 --> 00:09:11,810
basic datatypes so the library that I'm

00:09:09,410 --> 00:09:14,510
using here is called open Pi Excel open

00:09:11,810 --> 00:09:17,030
PI Excel is a library a Python library

00:09:14,510 --> 00:09:19,990
that lets you read from and write to

00:09:17,030 --> 00:09:23,830
xlsx files and for those not familiar

00:09:19,990 --> 00:09:27,350
the the older XLS file format is what

00:09:23,830 --> 00:09:32,330
what Microsoft Word used up until I

00:09:27,350 --> 00:09:34,370
believe oh seven and after that they

00:09:32,330 --> 00:09:37,160
switch to the xlsx format and that that

00:09:34,370 --> 00:09:39,890
extra X means that it's it's a based

00:09:37,160 --> 00:09:43,160
around XML and it is compatible with the

00:09:39,890 --> 00:09:47,450
open document organizations formats and

00:09:43,160 --> 00:09:49,910
so at the time in 2013 when I started

00:09:47,450 --> 00:09:50,900
looking at this open Pi Excel was one of

00:09:49,910 --> 00:09:52,130
the few libraries that would actually

00:09:50,900 --> 00:09:55,280
work with that file format and that's

00:09:52,130 --> 00:09:57,200
what I had to deal with so again very

00:09:55,280 --> 00:09:59,630
straightforward stuff you're importing

00:09:57,200 --> 00:10:01,340
open PI X now by show of hands how many

00:09:59,630 --> 00:10:04,400
of you were consider yourselves the

00:10:01,340 --> 00:10:07,790
beginner or novice programmers sort of

00:10:04,400 --> 00:10:11,180
early in early stages okay and so how

00:10:07,790 --> 00:10:12,770
many of you might know some people who

00:10:11,180 --> 00:10:14,780
would be beginner or novel in that not

00:10:12,770 --> 00:10:16,460
you yourselves of course but it might

00:10:14,780 --> 00:10:17,870
know some other people who might be

00:10:16,460 --> 00:10:19,580
beginner anotherÃ­s programmers that

00:10:17,870 --> 00:10:21,830
might maybe benefit from hearing things

00:10:19,580 --> 00:10:24,260
described in that way okay so yeah so be

00:10:21,830 --> 00:10:26,630
sure to tell a friend and share this

00:10:24,260 --> 00:10:27,830
with them so I'm trying to stuff through

00:10:26,630 --> 00:10:30,800
this in a fairly straightforward way

00:10:27,830 --> 00:10:32,150
again so that you could explain it to

00:10:30,800 --> 00:10:33,320
someone who's not an experienced

00:10:32,150 --> 00:10:34,620
developer and they could actually get

00:10:33,320 --> 00:10:37,300
some benefit from that

00:10:34,620 --> 00:10:39,490
so Europe importing open PI excel and

00:10:37,300 --> 00:10:43,120
Metro will compile Excel importing

00:10:39,490 --> 00:10:44,260
workbook and this gets you a workbook

00:10:43,120 --> 00:10:45,940
object and we'll talk about that

00:10:44,260 --> 00:10:47,140
distinction between workbooks and

00:10:45,940 --> 00:10:50,589
worksheets and that sort of thing later

00:10:47,140 --> 00:10:52,510
and then this line of code workbook

00:10:50,589 --> 00:10:54,820
equals up high Excel that load workbook

00:10:52,510 --> 00:10:56,380
the slope workbook function this is the

00:10:54,820 --> 00:10:58,149
name of the file that we're using so the

00:10:56,380 --> 00:11:01,180
spreadsheet we that we just saw this

00:10:58,149 --> 00:11:04,839
spreadsheet this is PI excel underscore

00:11:01,180 --> 00:11:08,290
demo underscore Jango Condit xlsx that

00:11:04,839 --> 00:11:09,610
should be that's wrong that should be

00:11:08,290 --> 00:11:11,920
true I was playing I was playing with

00:11:09,610 --> 00:11:14,649
this earlier the distinction here is

00:11:11,920 --> 00:11:16,149
this data only equals true is for

00:11:14,649 --> 00:11:17,649
situations where you have a formula in a

00:11:16,149 --> 00:11:19,450
spreadsheet which lots of pressures have

00:11:17,649 --> 00:11:21,490
formulas in them if that data only is

00:11:19,450 --> 00:11:23,230
equal to true what that's going to do is

00:11:21,490 --> 00:11:26,290
that's going to give you the result of

00:11:23,230 --> 00:11:29,350
the formula in all cases that supposed

00:11:26,290 --> 00:11:32,170
to bring you back the formula itself so

00:11:29,350 --> 00:11:37,029
that's that and let me I'm just gonna

00:11:32,170 --> 00:11:41,589
run this to make sure I've got

00:11:37,029 --> 00:11:44,320
everything behaving as it should all

00:11:41,589 --> 00:11:45,790
right and so this is all sort of fairly

00:11:44,320 --> 00:11:47,140
straightforward Python stuff except for

00:11:45,790 --> 00:11:49,480
this data only equals true this is

00:11:47,140 --> 00:11:50,230
something specific to open pi excel so

00:11:49,480 --> 00:11:51,730
now we're gonna talk about this

00:11:50,230 --> 00:11:54,490
distinction between workbooks for his

00:11:51,730 --> 00:11:56,529
worksheets or spreadsheets and tabs most

00:11:54,490 --> 00:11:58,449
people tend to use the terms sort of

00:11:56,529 --> 00:12:00,339
interchangeably they'll say you send me

00:11:58,449 --> 00:12:05,050
a spreadsheet oh no I want that

00:12:00,339 --> 00:12:08,949
spreadsheet in the spreadsheet so in in

00:12:05,050 --> 00:12:11,140
accounting nerd talk a spreadsheet

00:12:08,949 --> 00:12:13,029
there's no is a workbook so Excel

00:12:11,140 --> 00:12:15,010
describes them as workbook so a workbook

00:12:13,029 --> 00:12:18,310
is the actual file itself so what we see

00:12:15,010 --> 00:12:19,930
here is part of a workbook the

00:12:18,310 --> 00:12:20,980
individual tabs here I have clean data

00:12:19,930 --> 00:12:22,660
which is what we're using

00:12:20,980 --> 00:12:27,250
then kpop graphed roster which is a

00:12:22,660 --> 00:12:30,220
whole different thing the kpop was one

00:12:27,250 --> 00:12:32,620
of my things so each of these tabs is

00:12:30,220 --> 00:12:36,000
known as they worksheet and the multiple

00:12:32,620 --> 00:12:38,500
worksheets make up a workbook and so

00:12:36,000 --> 00:12:41,709
that is important because when you're

00:12:38,500 --> 00:12:42,959
using so most people will say like a

00:12:41,709 --> 00:12:46,569
spreadsheet or a tab in a spreadsheet

00:12:42,959 --> 00:12:48,100
but open Excel define them in a workbook

00:12:46,569 --> 00:12:49,449
which is a collection of individual

00:12:48,100 --> 00:12:51,550
worksheets and that's important because

00:12:49,449 --> 00:12:53,980
when you're accessing the data you need

00:12:51,550 --> 00:12:55,449
to tell this you got a workbook file so

00:12:53,980 --> 00:12:57,310
you want to open that file that's what

00:12:55,449 --> 00:12:58,720
we're opening up here in this cell but

00:12:57,310 --> 00:13:00,220
then you need to know which worksheet

00:12:58,720 --> 00:13:01,509
you need to get out of that workbook and

00:13:00,220 --> 00:13:04,630
there are different objects that have

00:13:01,509 --> 00:13:07,660
different properties to them and so here

00:13:04,630 --> 00:13:09,430
we have this WB is the workbook that

00:13:07,660 --> 00:13:13,000
we've opened which is the entire thing

00:13:09,430 --> 00:13:14,410
and for those of you who are again new

00:13:13,000 --> 00:13:17,740
at a Python or who have friends ruin or

00:13:14,410 --> 00:13:19,449
the the dir function the directory

00:13:17,740 --> 00:13:21,130
function in Python is helpful because it

00:13:19,449 --> 00:13:22,660
will give you a list of the attributes

00:13:21,130 --> 00:13:25,240
that are available for a particular

00:13:22,660 --> 00:13:26,769
object now for a lot of basic Python

00:13:25,240 --> 00:13:28,839
constructs if you're already familiar

00:13:26,769 --> 00:13:30,970
with these maybe you don't care but if

00:13:28,839 --> 00:13:32,829
you are using a new library like this

00:13:30,970 --> 00:13:34,690
like open PI excel it has some different

00:13:32,829 --> 00:13:35,649
data types that you're not going to be

00:13:34,690 --> 00:13:37,690
familiar with because you haven't seen

00:13:35,649 --> 00:13:40,480
them before so what using the dir

00:13:37,690 --> 00:13:41,319
function on them is helpful and so we

00:13:40,480 --> 00:13:45,310
see a lot of the different attributes

00:13:41,319 --> 00:13:49,269
and we'll notice here a couple sheets

00:13:45,310 --> 00:13:51,100
and so this will show you the sheets

00:13:49,269 --> 00:13:52,660
that are available let's see

00:13:51,100 --> 00:13:54,610
copy worksheets that you can copy a

00:13:52,660 --> 00:13:58,180
specific worksheet create sheet which

00:13:54,610 --> 00:14:01,240
we'll see a little bit later get sheet

00:13:58,180 --> 00:14:04,120
by name so you can go to it you can grab

00:14:01,240 --> 00:14:05,079
a specific worksheet or workbook or if

00:14:04,120 --> 00:14:07,750
you don't know what sheets are available

00:14:05,079 --> 00:14:09,040
to get sheet names and so that will tell

00:14:07,750 --> 00:14:18,870
you okay what sheets are actually here

00:14:09,040 --> 00:14:21,399
on this workbook so look at those around

00:14:18,870 --> 00:14:23,920
so that's that and then so I'm here I've

00:14:21,399 --> 00:14:25,269
got the workbook and I print workbook

00:14:23,920 --> 00:14:26,889
that sheet names because I want to know

00:14:25,269 --> 00:14:30,790
what sheet names are there now you will

00:14:26,889 --> 00:14:32,050
notice when we try it's high enough on

00:14:30,790 --> 00:14:35,079
the screen so people can see it you'll

00:14:32,050 --> 00:14:36,220
notice the workbook got sheet names when

00:14:35,079 --> 00:14:39,189
we looked at the at the actual

00:14:36,220 --> 00:14:42,459
spreadsheet itself we saw two worksheets

00:14:39,189 --> 00:14:44,769
clean data and kpop draft roster but

00:14:42,459 --> 00:14:46,990
when I print the workbook sheet names I

00:14:44,769 --> 00:14:49,389
get three Japan spending clean data and

00:14:46,990 --> 00:14:52,630
kpop graph roster so the Japan spending

00:14:49,389 --> 00:14:54,550
worksheet is actually hidden when as I

00:14:52,630 --> 00:14:56,620
was working on this talk initially I was

00:14:54,550 --> 00:14:58,930
in Japan and I was trying to figure out

00:14:56,620 --> 00:15:00,000
where all my money had gone and so I

00:14:58,930 --> 00:15:01,500
started

00:15:00,000 --> 00:15:04,260
I was like well I shouldn't have spent

00:15:01,500 --> 00:15:06,000
that much money so sho sheet Japan

00:15:04,260 --> 00:15:07,740
spending so that's a hidden worksheet I

00:15:06,000 --> 00:15:09,150
point that up because if you're in a

00:15:07,740 --> 00:15:10,350
situation where you're trying to hide

00:15:09,150 --> 00:15:12,870
something from someone and you want to

00:15:10,350 --> 00:15:14,790
hide a sheet well if they just look at

00:15:12,870 --> 00:15:16,110
it they won't see it but if they get a

00:15:14,790 --> 00:15:17,940
list of the sheet names it's still

00:15:16,110 --> 00:15:19,860
visible there so those are the

00:15:17,940 --> 00:15:21,810
worksheets we have available to us the

00:15:19,860 --> 00:15:23,490
one we want is the clean data worksheet

00:15:21,810 --> 00:15:26,160
and so here I'm going to create this

00:15:23,490 --> 00:15:27,420
variable called demo worksheet and I

00:15:26,160 --> 00:15:30,710
want to get sheet by name and they

00:15:27,420 --> 00:15:34,230
passed it the worksheet name and so now

00:15:30,710 --> 00:15:37,830
this WB is a a workbook object and

00:15:34,230 --> 00:15:40,830
actually let me do that here a live

00:15:37,830 --> 00:15:43,320
coding portion notice WB it's a workbook

00:15:40,830 --> 00:15:45,180
object again which is not something that

00:15:43,320 --> 00:15:46,440
natively exists in Python so up in PI

00:15:45,180 --> 00:15:48,270
Excel that worked would I work with that

00:15:46,440 --> 00:15:49,920
work work so it's a workbook object and

00:15:48,270 --> 00:15:51,570
it has those different attributes that

00:15:49,920 --> 00:15:53,250
we saw before that's why I have the dir

00:15:51,570 --> 00:15:56,040
so I were in the directory function on

00:15:53,250 --> 00:15:59,190
it and again here I've created this demo

00:15:56,040 --> 00:16:04,200
worksheet which holds a specific

00:15:59,190 --> 00:16:06,930
worksheet and we see that it is a

00:16:04,200 --> 00:16:09,270
worksheet object it has a specific set

00:16:06,930 --> 00:16:13,170
of attributes that we can see with the

00:16:09,270 --> 00:16:14,400
directory function and so those are the

00:16:13,170 --> 00:16:18,440
different things you can do with it and

00:16:14,400 --> 00:16:24,960
the two we're gonna focus on most here

00:16:18,440 --> 00:16:26,400
all right well so we've got cell so you

00:16:24,960 --> 00:16:29,520
can get a particular cell from worksheet

00:16:26,400 --> 00:16:36,620
but we're gonna look at I just passed it

00:16:29,520 --> 00:16:38,460
columns and rows so each worksheet again

00:16:36,620 --> 00:16:39,780
depending on how from the yard with it

00:16:38,460 --> 00:16:42,450
what the worksheet columns go up and

00:16:39,780 --> 00:16:44,490
down rows go side to side in this case

00:16:42,450 --> 00:16:47,089
each row represents a particular record

00:16:44,490 --> 00:16:49,080
like similar to in a relational database

00:16:47,089 --> 00:16:52,940
so those are the different attributes

00:16:49,080 --> 00:16:55,500
we've got for the worksheet object and

00:16:52,940 --> 00:16:56,580
these workbook and worksheet objects and

00:16:55,500 --> 00:16:57,810
the cell obvious we'll see you later

00:16:56,580 --> 00:16:59,460
there are a lot of different attributes

00:16:57,810 --> 00:17:00,450
a lot of different options there's

00:16:59,460 --> 00:17:01,800
clearly not time to go through all of

00:17:00,450 --> 00:17:05,579
them but I'm just going to try to go

00:17:01,800 --> 00:17:07,350
over some of the highlights so we've got

00:17:05,579 --> 00:17:09,120
this worksheet now this demo worksheet

00:17:07,350 --> 00:17:10,199
and so we went is we want the data out

00:17:09,120 --> 00:17:13,650
of this and we're going to grab it by

00:17:10,199 --> 00:17:16,230
rows and so demo worksheet

00:17:13,650 --> 00:17:17,760
that rose so so what are the rows here

00:17:16,230 --> 00:17:20,790
and you'll notice it returns this

00:17:17,760 --> 00:17:23,970
generator object so generator object

00:17:20,790 --> 00:17:26,970
worksheet dot sells by row and so what

00:17:23,970 --> 00:17:29,400
this does is it gives us a generator

00:17:26,970 --> 00:17:31,110
object instead of reading every row out

00:17:29,400 --> 00:17:32,370
of this spreadsheet it creates a

00:17:31,110 --> 00:17:34,880
generator object and if you are not

00:17:32,370 --> 00:17:37,350
familiar with generators a simple a

00:17:34,880 --> 00:17:39,690
simpler way to think about them is that

00:17:37,350 --> 00:17:43,680
a generator object is something that has

00:17:39,690 --> 00:17:45,450
a a collection of items but instead of

00:17:43,680 --> 00:17:47,760
giving you all those items at once it

00:17:45,450 --> 00:17:49,650
will give them to you one at a time and

00:17:47,760 --> 00:17:52,020
this helps to save memory so instead of

00:17:49,650 --> 00:17:54,480
having all 10,000 rows of this

00:17:52,020 --> 00:17:55,920
spreadsheet if you have this generator

00:17:54,480 --> 00:17:57,540
Rodrik that what gives you one row at a

00:17:55,920 --> 00:17:59,370
time is needed and that helps to save

00:17:57,540 --> 00:18:01,920
memory I mean but I've point that out

00:17:59,370 --> 00:18:03,870
because if you say okay will show me the

00:18:01,920 --> 00:18:05,490
rows you're not going to just get plain

00:18:03,870 --> 00:18:06,330
rows of plain text or things of that

00:18:05,490 --> 00:18:07,800
nature you're going to get this

00:18:06,330 --> 00:18:14,210
generator object it's going to give you

00:18:07,800 --> 00:18:14,210
a row at a time and so

00:18:20,460 --> 00:18:28,539
okay so what you get is when you print

00:18:27,219 --> 00:18:31,419
out this generator advocate again so

00:18:28,539 --> 00:18:33,609
this demoed at work she does so for row

00:18:31,419 --> 00:18:35,200
in demo dot worksheet row so I want to

00:18:33,609 --> 00:18:37,419
see what these roads are like and you'll

00:18:35,200 --> 00:18:40,570
notice that each row I've also got it

00:18:37,419 --> 00:18:42,070
printing the type and so you've got a

00:18:40,570 --> 00:18:45,239
generator object but what it returns

00:18:42,070 --> 00:18:49,059
each object it returns is a tuple of

00:18:45,239 --> 00:18:53,320
cells and so you got this cell clean

00:18:49,059 --> 00:18:56,799
data a-1 clean di do so cell a1 cell b1

00:18:53,320 --> 00:18:59,679
cell c1 of this clean data worksheet and

00:18:56,799 --> 00:19:03,909
so a1 b1 c1 that's going to correspond

00:18:59,679 --> 00:19:05,080
to the first row and then the next one

00:19:03,909 --> 00:19:08,349
goes to the second row and so on and so

00:19:05,080 --> 00:19:09,940
forth and so you have a tuple so this

00:19:08,349 --> 00:19:13,960
generated rod which is giving you tuples

00:19:09,940 --> 00:19:15,639
and each element of that tuple is a cell

00:19:13,960 --> 00:19:18,249
which is again so a tuple standard

00:19:15,639 --> 00:19:20,409
Python data construct a cell is not a

00:19:18,249 --> 00:19:22,479
cells another open PI Excel data

00:19:20,409 --> 00:19:24,549
contract and we'll see why that's

00:19:22,479 --> 00:19:28,239
important in useful in just a moment so

00:19:24,549 --> 00:19:29,679
we move on we take a look at cells and

00:19:28,239 --> 00:19:33,759
just want to show you some of the

00:19:29,679 --> 00:19:36,940
differences about cells so so for a cell

00:19:33,759 --> 00:19:40,149
in next demo demo worksheet data row so

00:19:36,940 --> 00:19:41,859
again demo worksheet that rows into a

00:19:40,149 --> 00:19:43,570
generator object if you have a generator

00:19:41,859 --> 00:19:46,719
I'd rate like I said it gives you one

00:19:43,570 --> 00:19:48,969
new item at a time to get one item at a

00:19:46,719 --> 00:19:50,919
time you can use this next function and

00:19:48,969 --> 00:19:52,899
so that's just pulling one item out of

00:19:50,919 --> 00:19:54,759
that generator at a time and so I'm

00:19:52,899 --> 00:19:58,059
having it print out just cell and then

00:19:54,759 --> 00:19:59,289
the cell name so he excelled that column

00:19:58,059 --> 00:20:00,909
because it tells me what column the

00:19:59,289 --> 00:20:02,739
cells in cell dot row tells me what row

00:20:00,909 --> 00:20:04,659
the cell is in using some string

00:20:02,739 --> 00:20:07,029
formatting here to make that look sort

00:20:04,659 --> 00:20:08,409
of nice and then I'm printing the cell

00:20:07,029 --> 00:20:10,389
itself which gives me information about

00:20:08,409 --> 00:20:11,979
the cell then the type of cell gets to

00:20:10,389 --> 00:20:14,259
demonstrate that it's this different

00:20:11,979 --> 00:20:16,149
data it's this different data type it's

00:20:14,259 --> 00:20:18,940
not native to Python it's provided by

00:20:16,149 --> 00:20:22,570
the library so cell a1 so then what we

00:20:18,940 --> 00:20:25,239
clean data it's of the type cell and the

00:20:22,570 --> 00:20:26,799
value in it that last line is going to

00:20:25,239 --> 00:20:27,759
show you what's actually in that cells

00:20:26,799 --> 00:20:29,679
like when you look at a spreadsheet

00:20:27,759 --> 00:20:32,750
that's what you're after after you after

00:20:29,679 --> 00:20:35,870
the cell dot data and so we see a

00:20:32,750 --> 00:20:41,420
the value is employee num v1 it's cost

00:20:35,870 --> 00:20:43,760
Center c1 its division so so this Rho 1

00:20:41,420 --> 00:20:46,580
these are the headers and so on and so

00:20:43,760 --> 00:20:48,710
forth until we move on so I just popped

00:20:46,580 --> 00:20:51,920
off that top row just to demonstrate

00:20:48,710 --> 00:20:54,559
that and so we've got these cell values

00:20:51,920 --> 00:20:59,090
and types in now open PI Excel is also

00:20:54,559 --> 00:21:00,320
smart enough to try to take the data

00:20:59,090 --> 00:21:02,510
that's in a Cell

00:21:00,320 --> 00:21:04,790
the values that are in a cell and

00:21:02,510 --> 00:21:06,830
convert them to the appropriate Python

00:21:04,790 --> 00:21:10,429
data type so here we're looking at demo

00:21:06,830 --> 00:21:12,350
worksheet II 1 dot value and so I also

00:21:10,429 --> 00:21:14,059
do this to demonstrate that instead of

00:21:12,350 --> 00:21:15,710
grabbing things just by rows you can go

00:21:14,059 --> 00:21:17,179
to a specific cell if you want to so in

00:21:15,710 --> 00:21:19,929
this case we're going to this demo

00:21:17,179 --> 00:21:24,200
worksheet which is the clean data

00:21:19,929 --> 00:21:26,120
worksheet and we're grabbing cell a1 and

00:21:24,200 --> 00:21:27,920
we're getting its value and we're doing

00:21:26,120 --> 00:21:32,030
the same thing to sell e 2 so if we take

00:21:27,920 --> 00:21:37,760
a look at the spreadsheet cell e14

00:21:32,030 --> 00:21:40,640
e 2 is that first date and so we print

00:21:37,760 --> 00:21:41,720
these and these two cells 80 and 180 181

00:21:40,640 --> 00:21:43,640
are basically the same thing just

00:21:41,720 --> 00:21:47,480
showing differently so that's the value

00:21:43,640 --> 00:21:49,309
and M s the type so the value here is

00:21:47,480 --> 00:21:51,800
this date working with the string the

00:21:49,309 --> 00:21:54,830
value here is that first date so it's

00:21:51,800 --> 00:21:56,030
showing it it's displaying it here but

00:21:54,830 --> 00:21:58,280
it's also showing you that it's a date

00:21:56,030 --> 00:22:01,040
time that date time object and so python

00:21:58,280 --> 00:22:05,570
knows that hey this is a date and so

00:22:01,040 --> 00:22:07,130
that's useful so cell attributes again

00:22:05,570 --> 00:22:08,300
so why is there cell a trick just like

00:22:07,130 --> 00:22:09,890
we had the workbook in the worksheet

00:22:08,300 --> 00:22:11,630
object we have the cell object that have

00:22:09,890 --> 00:22:16,970
all these different attributes and the

00:22:11,630 --> 00:22:19,070
primary reason for that is because when

00:22:16,970 --> 00:22:20,660
you're looking at a spreadsheet and it's

00:22:19,070 --> 00:22:22,550
the cell object when you're looking at a

00:22:20,660 --> 00:22:24,650
spreadsheet there's a lot more going on

00:22:22,550 --> 00:22:26,600
than just what's in the cell the cell

00:22:24,650 --> 00:22:29,600
itself it than just the value there are

00:22:26,600 --> 00:22:31,070
other attributes so is it is it bold

00:22:29,600 --> 00:22:32,750
real sort of styling is going on

00:22:31,070 --> 00:22:34,780
whatever you know things are happening

00:22:32,750 --> 00:22:38,980
with the cell and so these cell objects

00:22:34,780 --> 00:22:38,980
contain all those other attributes

00:22:40,190 --> 00:22:49,770
and the one that we're going to use the

00:22:42,900 --> 00:22:51,510
most here is the value attribute so

00:22:49,770 --> 00:22:53,040
we'll be doing cell value to give the

00:22:51,510 --> 00:22:54,060
actual value of that's the actual data

00:22:53,040 --> 00:22:56,520
we're wanting to work with

00:22:54,060 --> 00:22:58,020
however there's other data in the cell

00:22:56,520 --> 00:23:00,510
so if you need to know if a cell is

00:22:58,020 --> 00:23:02,190
colored a certain way or uses a certain

00:23:00,510 --> 00:23:03,660
type of font or something like that you

00:23:02,190 --> 00:23:05,400
can grab that information and do things

00:23:03,660 --> 00:23:07,590
with it as well but for our purposes

00:23:05,400 --> 00:23:11,490
we'll be focusing mostly on that you

00:23:07,590 --> 00:23:13,620
look at cell Styles music substyles

00:23:11,490 --> 00:23:15,750
there's not enough time to really for me

00:23:13,620 --> 00:23:16,740
to do a demo on the cell style but there

00:23:15,750 --> 00:23:18,750
are all sorts of things you can do

00:23:16,740 --> 00:23:20,640
working with styles open pie excel

00:23:18,750 --> 00:23:23,730
documentation is of course on read the

00:23:20,640 --> 00:23:25,860
docs thank you area culture for making

00:23:23,730 --> 00:23:27,780
things like this available for us so

00:23:25,860 --> 00:23:30,480
there's a lot of style information and

00:23:27,780 --> 00:23:32,330
while that might not seem like the most

00:23:30,480 --> 00:23:34,980
important things when dealing with data

00:23:32,330 --> 00:23:36,450
one you might be in a situation where

00:23:34,980 --> 00:23:38,970
the spreadsheets that you are given are

00:23:36,450 --> 00:23:40,860
being styled in a certain way so maybe a

00:23:38,970 --> 00:23:43,110
number that's a loss is read and a

00:23:40,860 --> 00:23:44,640
number that's you know a profit is green

00:23:43,110 --> 00:23:46,800
or something like that you can actually

00:23:44,640 --> 00:23:48,540
make use of that information so you can

00:23:46,800 --> 00:23:49,710
actually pull that out and if you're

00:23:48,540 --> 00:23:50,970
needing to write your results to a

00:23:49,710 --> 00:23:53,070
spreadsheet you can write them in that

00:23:50,970 --> 00:23:54,240
fashion as well so making beautiful

00:23:53,070 --> 00:23:56,700
spreadsheets has been left as an

00:23:54,240 --> 00:23:59,100
exercise for the viewer so I'll let you

00:23:56,700 --> 00:24:01,830
do that on your own so example one

00:23:59,100 --> 00:24:04,020
aggregating timesheet info but we're

00:24:01,830 --> 00:24:07,170
basically want to do here is take this

00:24:04,020 --> 00:24:10,290
timesheet and instead of having these

00:24:07,170 --> 00:24:12,390
individual lines for each day what we

00:24:10,290 --> 00:24:14,190
want is we want to see okay how much

00:24:12,390 --> 00:24:17,340
time did each employee work in this

00:24:14,190 --> 00:24:18,360
month so this is June or 2017 so we want

00:24:17,340 --> 00:24:19,920
to see okay how much time to reach

00:24:18,360 --> 00:24:23,130
employee work in this month so we want

00:24:19,920 --> 00:24:26,540
to aggregate that information a lot of

00:24:23,130 --> 00:24:29,250
the Python here is just it's not

00:24:26,540 --> 00:24:31,560
particularly impressive but I wanted to

00:24:29,250 --> 00:24:33,180
point out the spots where we use regular

00:24:31,560 --> 00:24:38,630
Python make for things that are specific

00:24:33,180 --> 00:24:41,280
to open PI Excel so here you can use a

00:24:38,630 --> 00:24:43,020
for-loop versus a set comprehension I

00:24:41,280 --> 00:24:45,330
use the set comprehension because I

00:24:43,020 --> 00:24:47,250
wanted to be able to I wanted a set of

00:24:45,330 --> 00:24:48,600
the employee ideas I didn't want every

00:24:47,250 --> 00:24:49,620
occurrence of an employee ID because you

00:24:48,600 --> 00:24:51,920
have multiple so I use the set

00:24:49,620 --> 00:24:54,530
comprehension here

00:24:51,920 --> 00:24:57,620
trade hunter who is here at the

00:24:54,530 --> 00:24:59,780
conference does an exceptional talk on

00:24:57,620 --> 00:25:02,000
but he hosts comprehensive with

00:24:59,780 --> 00:25:03,710
comprehensions and so you can take a

00:25:02,000 --> 00:25:04,910
look you can I guess you see Trey ask

00:25:03,710 --> 00:25:07,630
him and tell him I told you that your

00:25:04,910 --> 00:25:10,010
tray here no you probably in that room

00:25:07,630 --> 00:25:11,360
so if you see Trey asked him about

00:25:10,010 --> 00:25:13,130
copper connectors and tell him that Kojo

00:25:11,360 --> 00:25:14,420
told you to ask him and so he'll do a

00:25:13,130 --> 00:25:17,510
better job of explaining comprehensions

00:25:14,420 --> 00:25:18,800
then I will but what you would do with a

00:25:17,510 --> 00:25:20,480
nested for loop in a lot of cases you

00:25:18,800 --> 00:25:22,880
can do with the comprehension so here

00:25:20,480 --> 00:25:24,740
I'm creating this set comprehension of

00:25:22,880 --> 00:25:27,710
employee IDs just so I have a list of

00:25:24,740 --> 00:25:31,520
the unique employee IDs and that's what

00:25:27,710 --> 00:25:34,640
this looks like here and then I'm using

00:25:31,520 --> 00:25:37,310
that set that I call the employee IDs

00:25:34,640 --> 00:25:41,360
one and I'm using that to create a

00:25:37,310 --> 00:25:43,460
dictionary that takes the hours I'm

00:25:41,360 --> 00:25:45,350
using list comprehensions here list and

00:25:43,460 --> 00:25:46,730
set comprehensions here I want to I want

00:25:45,350 --> 00:25:49,970
all the hours for that employee

00:25:46,730 --> 00:25:51,380
I want a set comprehension of the cost

00:25:49,970 --> 00:25:52,970
Center each employee should only work in

00:25:51,380 --> 00:25:55,430
one cost center so here I've got a set

00:25:52,970 --> 00:25:56,600
comprehension of one cost center a set

00:25:55,430 --> 00:25:57,680
comprehension their divisions again each

00:25:56,600 --> 00:25:59,390
pollution on they work for one division

00:25:57,680 --> 00:26:01,010
ething employee should only have one

00:25:59,390 --> 00:26:02,780
manager so this is again the part about

00:26:01,010 --> 00:26:04,750
knowing your data so I got set copy

00:26:02,780 --> 00:26:09,860
hunches that are building those things

00:26:04,750 --> 00:26:13,970
you'll notice here I got row six dot

00:26:09,860 --> 00:26:19,540
value for rowing demo worksheet rows so

00:26:13,970 --> 00:26:23,480
in this case demo worksheet dot rose is

00:26:19,540 --> 00:26:25,370
again that that generator object that's

00:26:23,480 --> 00:26:29,720
giving us a row to time so here I'm

00:26:25,370 --> 00:26:30,740
saying I want row index six four hours

00:26:29,720 --> 00:26:34,010
if we take a look back at our

00:26:30,740 --> 00:26:36,380
spreadsheet we can see one two three

00:26:34,010 --> 00:26:39,410
four five six seven

00:26:36,380 --> 00:26:40,610
because spreadsheet so and so and this

00:26:39,410 --> 00:26:41,230
this is way gets a little tricky we'll

00:26:40,610 --> 00:26:44,900
see this later

00:26:41,230 --> 00:26:46,730
Python indexes from zero so if you have

00:26:44,900 --> 00:26:48,230
a list of four items Python will count

00:26:46,730 --> 00:26:50,510
them is zero one two or three

00:26:48,230 --> 00:26:52,400
spreadsheets indexed from one and so

00:26:50,510 --> 00:26:53,600
we'll see in the code a little bit later

00:26:52,400 --> 00:26:57,270
when you have to make that adjustment so

00:26:53,600 --> 00:26:59,910
here index zero one two three four

00:26:57,270 --> 00:27:02,840
okay Mikey zero one two three four or

00:26:59,910 --> 00:27:06,270
five six so I'm getting the hours there

00:27:02,840 --> 00:27:08,670
but I'm using that wrote value row six

00:27:06,270 --> 00:27:11,310
the row index X which is gonna be a sell

00:27:08,670 --> 00:27:12,450
object in the row then dot value so I'm

00:27:11,310 --> 00:27:14,160
pulling the value out of that mess

00:27:12,450 --> 00:27:15,720
what's getting me my hours doing the

00:27:14,160 --> 00:27:22,140
same thing to get the cost Center the

00:27:15,720 --> 00:27:23,670
division and the manager I I do QA where

00:27:22,140 --> 00:27:26,610
I work now and I actually used to be an

00:27:23,670 --> 00:27:27,840
auditor or so I tend to try to you want

00:27:26,610 --> 00:27:29,280
to test things and things that nature so

00:27:27,840 --> 00:27:30,480
I've got a little assertion here because

00:27:29,280 --> 00:27:32,520
I know there should only be one cost

00:27:30,480 --> 00:27:36,050
center one division and what a manager

00:27:32,520 --> 00:27:38,520
for employee so I just do that there and

00:27:36,050 --> 00:27:43,380
then I build this employee aggregate

00:27:38,520 --> 00:27:45,390
object and again so a lot of this is

00:27:43,380 --> 00:27:49,290
regular Python here I've got some of the

00:27:45,390 --> 00:27:52,920
specifics to up in PI Excel and then I

00:27:49,290 --> 00:27:54,750
print this employee aggregate object

00:27:52,920 --> 00:27:56,430
just a pretty print it it's a dictionary

00:27:54,750 --> 00:27:59,910
just so it's clear so what you end up

00:27:56,430 --> 00:28:02,010
with is an employee ID as the key and

00:27:59,910 --> 00:28:03,060
then the cost center of the division and

00:28:02,010 --> 00:28:07,140
then the number of hours for that

00:28:03,060 --> 00:28:09,270
employee and so this lets me take this

00:28:07,140 --> 00:28:11,820
spreadsheet turn it into a dictionary

00:28:09,270 --> 00:28:16,470
which could also be used as a as a JSON

00:28:11,820 --> 00:28:17,580
object and I know from some filtering of

00:28:16,470 --> 00:28:19,470
the spreadsheets and manual filter

00:28:17,580 --> 00:28:21,270
stretchy that but I should have 49

00:28:19,470 --> 00:28:23,010
employees and so that's what's happening

00:28:21,270 --> 00:28:26,190
here

00:28:23,010 --> 00:28:28,260
now here we've looked at reading data

00:28:26,190 --> 00:28:29,520
from a spreadsheet and then processing

00:28:28,260 --> 00:28:32,280
it and turning it into something in

00:28:29,520 --> 00:28:33,660
Python the next thing becomes what if

00:28:32,280 --> 00:28:35,760
you've already got a Python program

00:28:33,660 --> 00:28:37,290
that's running and you want those

00:28:35,760 --> 00:28:38,430
results to be written to a spreadsheet

00:28:37,290 --> 00:28:40,980
well you can do the same thing with a

00:28:38,430 --> 00:28:42,810
papaya Excel so first you need to create

00:28:40,980 --> 00:28:45,720
a workbook and I've give it a very

00:28:42,810 --> 00:28:48,750
creative name of output book and so I've

00:28:45,720 --> 00:28:51,300
created this new workbook object called

00:28:48,750 --> 00:28:53,850
output book and then you need to create

00:28:51,300 --> 00:28:55,530
well let's say you can create a specific

00:28:53,850 --> 00:28:58,470
sheet here I'm creating a sheet called

00:28:55,530 --> 00:29:00,300
output sheet so output book dot create

00:28:58,470 --> 00:29:02,370
sheet which is a this create sheet is a

00:29:00,300 --> 00:29:04,620
method that belongs to the workbook

00:29:02,370 --> 00:29:06,750
object and I'm giving it a name here

00:29:04,620 --> 00:29:09,240
aggregate time and I'm also giving it

00:29:06,750 --> 00:29:11,049
this argument as zero the zero argument

00:29:09,240 --> 00:29:13,630
means it's going to be the zero

00:29:11,049 --> 00:29:15,340
in the workbook otherwise by default

00:29:13,630 --> 00:29:16,809
when you create a workbook it will have

00:29:15,340 --> 00:29:19,030
a big sheet one of the first object so

00:29:16,809 --> 00:29:22,000
here I'm saying make this the first item

00:29:19,030 --> 00:29:23,470
in the sheet that we see and then we

00:29:22,000 --> 00:29:27,250
look at output book we see that it's

00:29:23,470 --> 00:29:30,010
this a workbook type object then I

00:29:27,250 --> 00:29:31,419
decide to build a header because I don't

00:29:30,010 --> 00:29:33,039
want to just write the raw data to the

00:29:31,419 --> 00:29:35,350
spreadsheet I also want some sort of a

00:29:33,039 --> 00:29:36,760
header so the spreadsheet looks sort of

00:29:35,350 --> 00:29:38,260
organized when I give it someone else so

00:29:36,760 --> 00:29:40,559
they can understand it and so I'm just

00:29:38,260 --> 00:29:43,120
building a header here basically by

00:29:40,559 --> 00:29:44,530
copying the values out of the demo

00:29:43,120 --> 00:29:48,250
worksheet and so again I'm just

00:29:44,530 --> 00:29:49,240
accessing those cells directly and then

00:29:48,250 --> 00:29:51,190
I'm printing the header to make sure

00:29:49,240 --> 00:29:54,280
it's it's what I want and so I've got

00:29:51,190 --> 00:29:56,650
that same header and then for output

00:29:54,280 --> 00:30:00,460
data I build this table it's it's a list

00:29:56,650 --> 00:30:02,950
of Lists and I move through this

00:30:00,460 --> 00:30:04,840
employee aggregate and I'm creating new

00:30:02,950 --> 00:30:07,030
row I'm building these new rows so I

00:30:04,840 --> 00:30:08,320
want the row with the employee that cost

00:30:07,030 --> 00:30:10,120
Center the division their manager and

00:30:08,320 --> 00:30:11,530
their number of hours but here it's

00:30:10,120 --> 00:30:15,580
going to be the number of hours that

00:30:11,530 --> 00:30:18,549
were aggregated from the earlier

00:30:15,580 --> 00:30:23,020
dictionary that we saw and then he now

00:30:18,549 --> 00:30:26,799
I'm assigning those values that are in

00:30:23,020 --> 00:30:31,059
this output data construct I'm writing

00:30:26,799 --> 00:30:33,960
them to the output sheet and I'm I've

00:30:31,059 --> 00:30:36,220
got a nested I got nested for-loops here

00:30:33,960 --> 00:30:40,270
because I'm writing them by row and by

00:30:36,220 --> 00:30:43,679
cell and here we see excuse me we see

00:30:40,270 --> 00:30:47,919
this row index that I've got here and

00:30:43,679 --> 00:30:50,530
the column number but I've got to use +1

00:30:47,919 --> 00:30:52,299
because the index is they come from

00:30:50,530 --> 00:30:54,940
Python start with 0 on especially there

00:30:52,299 --> 00:30:56,830
start with 1 so that writes that stuff

00:30:54,940 --> 00:30:59,140
and so here is the output data

00:30:56,830 --> 00:31:01,450
constructs that I built and so you see

00:30:59,140 --> 00:31:04,059
the first list is the header and the

00:31:01,450 --> 00:31:05,230
next list is the aggregate numbers for

00:31:04,059 --> 00:31:06,789
each employee so this employer worked

00:31:05,230 --> 00:31:15,220
hundred 60 hours in the month so on and

00:31:06,789 --> 00:31:17,980
so forth so and now I can save that so

00:31:15,220 --> 00:31:20,920
output book that save and then I give it

00:31:17,980 --> 00:31:43,030
a file name and so this is the file name

00:31:20,920 --> 00:31:49,090
of the file that is being written to and

00:31:43,030 --> 00:31:52,170
so this is the result and now this

00:31:49,090 --> 00:31:55,000
doesn't take a huge amount of time but

00:31:52,170 --> 00:31:57,040
it's a small amount of data so there's

00:31:55,000 --> 00:31:59,170
this so I've got this aggregate time

00:31:57,040 --> 00:32:02,260
sheet with those times and I can check

00:31:59,170 --> 00:32:03,700
the totals so the total there is well

00:32:02,260 --> 00:32:05,080
you can't see it at the bottom it's five

00:32:03,700 --> 00:32:07,750
hundred and five thousand three hundred

00:32:05,080 --> 00:32:13,360
eighty six hours and if I go back to the

00:32:07,750 --> 00:32:14,710
original spreadsheet I've got the same

00:32:13,360 --> 00:32:16,900
total five thousand three hundred eighty

00:32:14,710 --> 00:32:18,490
six hours which is cute the bottom

00:32:16,900 --> 00:32:26,740
perhaps through the book people the

00:32:18,490 --> 00:32:28,780
front row and again this isn't the the

00:32:26,740 --> 00:32:31,600
most complicated of things but it gives

00:32:28,780 --> 00:32:33,880
you an idea of if you have a lot more

00:32:31,600 --> 00:32:37,180
spreadsheets to work with ten or 100 or

00:32:33,880 --> 00:32:39,610
you have a lot more data the last thing

00:32:37,180 --> 00:32:41,530
we do is I can take that object at

00:32:39,610 --> 00:32:44,650
aggregate time my object that I created

00:32:41,530 --> 00:32:51,490
and I can write it out as a JSON file

00:32:44,650 --> 00:32:55,290
and so then what I end up with is this

00:32:51,490 --> 00:32:55,290
where's my different file there we go

00:33:02,140 --> 00:33:06,370
and so I get that as a JSON file that I

00:33:04,299 --> 00:33:12,240
can then use to configure something else

00:33:06,370 --> 00:33:16,210
or to do other processing if I'd like so

00:33:12,240 --> 00:33:18,250
the problems that you'll run into so the

00:33:16,210 --> 00:33:20,170
reading of reading the data writing the

00:33:18,250 --> 00:33:21,580
data that sort of thing not terribly

00:33:20,170 --> 00:33:23,410
complicated the problems that you run

00:33:21,580 --> 00:33:25,559
into is it often a spreadsheet is going

00:33:23,410 --> 00:33:27,549
to be used as a visual medium and so

00:33:25,559 --> 00:33:30,429
someone wants a spreadsheet to look nice

00:33:27,549 --> 00:33:32,950
and so that spreadsheet might not make

00:33:30,429 --> 00:33:34,900
sense to code if if the only spreadsheet

00:33:32,950 --> 00:33:35,740
you edit you ever get is one that looks

00:33:34,900 --> 00:33:38,169
like this

00:33:35,740 --> 00:33:39,940
then you'll be fine because you've got

00:33:38,169 --> 00:33:42,370
fairly well structured data but the

00:33:39,940 --> 00:33:43,660
reality is some of the boss wants the

00:33:42,370 --> 00:33:45,490
spreadsheet to look a certain way and so

00:33:43,660 --> 00:33:46,660
it's been laid out they've tried to do

00:33:45,490 --> 00:33:47,950
desktop publishing with it or whatever

00:33:46,660 --> 00:33:51,580
and then you've got to sort of go

00:33:47,950 --> 00:33:53,770
through it in those situations you might

00:33:51,580 --> 00:33:56,470
be able to access individual cells or

00:33:53,770 --> 00:33:58,630
you may be able to convince them to

00:33:56,470 --> 00:34:00,010
maybe change some of the formatting with

00:33:58,630 --> 00:34:02,679
the idea that hey we can speed this up

00:34:00,010 --> 00:34:04,240
by literally a hundred times so if you

00:34:02,679 --> 00:34:05,799
might have visual input or you might

00:34:04,240 --> 00:34:08,470
have a visual output requirement that

00:34:05,799 --> 00:34:10,540
for standing can help you if you make

00:34:08,470 --> 00:34:12,310
new friends by helping teach your

00:34:10,540 --> 00:34:14,350
coworker how to automate some of their

00:34:12,310 --> 00:34:16,030
simple tasks with Python again the

00:34:14,350 --> 00:34:17,470
Python here that I demonstrated wasn't

00:34:16,030 --> 00:34:18,700
terribly complicated that the

00:34:17,470 --> 00:34:20,649
comprehensions were probably the most

00:34:18,700 --> 00:34:21,909
complicated thing and so you can choose

00:34:20,649 --> 00:34:25,409
none to read data and do some things

00:34:21,909 --> 00:34:25,409
with it and we write the data back out

00:34:25,740 --> 00:34:31,260
that's what I've got so I am transition

00:34:28,629 --> 00:34:33,820
on Twitter if you have questions or the

00:34:31,260 --> 00:34:41,619
slides and the code will be available in

00:34:33,820 --> 00:34:44,260
this github repository very shortly with

00:34:41,619 --> 00:34:46,600
the the Python CSV module you're able to

00:34:44,260 --> 00:34:49,869
use dict reader and actually get named

00:34:46,600 --> 00:34:52,419
columns in and out does open pi excel

00:34:49,869 --> 00:34:54,760
support that i'm not sure if it supports

00:34:52,419 --> 00:34:57,129
the name column it will let you so here

00:34:54,760 --> 00:34:58,420
I read in I read things in by row but

00:34:57,129 --> 00:35:02,710
you can also do the same thing by

00:34:58,420 --> 00:35:03,850
columns okay you mentioned that visual

00:35:02,710 --> 00:35:05,410
spreadsheets would not be a good

00:35:03,850 --> 00:35:07,359
candidate for this sort of approach are

00:35:05,410 --> 00:35:09,520
there any types of actual data

00:35:07,359 --> 00:35:11,680
structures in spreadsheets that you that

00:35:09,520 --> 00:35:14,380
would not be good for programmatic

00:35:11,680 --> 00:35:16,630
analysis this way data structures in

00:35:14,380 --> 00:35:20,750
spreadsheet

00:35:16,630 --> 00:35:23,080
hmm let's see so if you have a lot of

00:35:20,750 --> 00:35:26,120
computations being happening in macros

00:35:23,080 --> 00:35:28,070
and that's something I had not worked

00:35:26,120 --> 00:35:30,290
with very much but if you've got a lot

00:35:28,070 --> 00:35:32,950
of macro calculations going on that

00:35:30,290 --> 00:35:35,510
might be a little tricky but if you can

00:35:32,950 --> 00:35:37,430
you should be able to grab either the

00:35:35,510 --> 00:35:39,260
data that's going into that macro or the

00:35:37,430 --> 00:35:41,510
results of those macro calculations so

00:35:39,260 --> 00:35:43,670
that's probably what you'd want there's

00:35:41,510 --> 00:35:45,890
a whole different approach that involves

00:35:43,670 --> 00:35:47,300
being able to run Python inside of a

00:35:45,890 --> 00:35:49,340
spreadsheet I might add that to this

00:35:47,300 --> 00:35:53,570
talk and update it later but this far

00:35:49,340 --> 00:35:55,490
I've worked on just the is there any way

00:35:53,570 --> 00:35:57,260
to make pivot tables in it I know you

00:35:55,490 --> 00:35:59,180
can do pandas you could do a pivot table

00:35:57,260 --> 00:36:02,890
and pandas and write it statically to

00:35:59,180 --> 00:36:05,300
the excel sheet but is there any way to

00:36:02,890 --> 00:36:08,090
if you're looking to because it's in my

00:36:05,300 --> 00:36:14,360
mind all this stuff kind of gets rid of

00:36:08,090 --> 00:36:16,430
BBA documentation I believe there is a

00:36:14,360 --> 00:36:17,780
pivot table function that's there I'll

00:36:16,430 --> 00:36:20,030
stuff my head I can't recall I

00:36:17,780 --> 00:36:22,520
personally am sort of a sort of a

00:36:20,030 --> 00:36:25,370
love-hate village with pivot tables okay

00:36:22,520 --> 00:36:28,040
yeah just before I ask and ask my

00:36:25,370 --> 00:36:32,090
question I worked a lot with POI and if

00:36:28,040 --> 00:36:34,700
you make a pivot table and then make it

00:36:32,090 --> 00:36:36,110
use a range you can actually use

00:36:34,700 --> 00:36:37,820
something like this to populate your

00:36:36,110 --> 00:36:40,820
pivot table so you can sort of have a

00:36:37,820 --> 00:36:45,560
pivot table as a question for you is

00:36:40,820 --> 00:36:46,760
streaming like and and stability so have

00:36:45,560 --> 00:36:48,440
you noticed any bugs or instability

00:36:46,760 --> 00:36:50,000
problems and then when you're dealing

00:36:48,440 --> 00:36:51,080
with large amounts of data is there any

00:36:50,000 --> 00:36:52,760
streaming interface that you're familiar

00:36:51,080 --> 00:36:55,400
with any anything

00:36:52,760 --> 00:36:58,640
comments on that not with the streaming

00:36:55,400 --> 00:37:03,950
interface so I haven't used this

00:36:58,640 --> 00:37:05,540
recently with huge amounts of data so I

00:37:03,950 --> 00:37:07,430
think the fact that it's not pulling in

00:37:05,540 --> 00:37:09,980
in time I've seen large spreadsheets

00:37:07,430 --> 00:37:12,260
that have caused Excel itself to sort of

00:37:09,980 --> 00:37:14,810
slow down and run slowly and so I

00:37:12,260 --> 00:37:16,100
haven't run this with those same because

00:37:14,810 --> 00:37:18,140
those unfortunately were

00:37:16,100 --> 00:37:20,240
bitterly formatted but I think the fact

00:37:18,140 --> 00:37:22,010
that this is creating this generator

00:37:20,240 --> 00:37:23,480
object and returning the data in small

00:37:22,010 --> 00:37:24,530
pieces at a time would help alleviate

00:37:23,480 --> 00:37:26,180
some other issues but I haven't actually

00:37:24,530 --> 00:37:27,920
had a chance to test it I need to I need

00:37:26,180 --> 00:37:28,710
to create a fake thing with a bunch of

00:37:27,920 --> 00:37:32,490
data and try that

00:37:28,710 --> 00:37:35,510
I so your your Excel was pretty nicely

00:37:32,490 --> 00:37:39,210
obviously formatted would it deal with

00:37:35,510 --> 00:37:41,280
cells or rows that are merged in front

00:37:39,210 --> 00:37:44,430
in the middle of the sheets for example

00:37:41,280 --> 00:37:46,920
a merge cell of Monday days of the V

00:37:44,430 --> 00:37:48,809
console it has some capacity to deal

00:37:46,920 --> 00:37:51,900
with that but again that's sort of a

00:37:48,809 --> 00:37:53,520
knowing your data type of thing and I

00:37:51,900 --> 00:37:55,800
haven't specifically tried things with

00:37:53,520 --> 00:37:57,150
yourself but you can you can access

00:37:55,800 --> 00:37:58,710
individual cells so that might be a

00:37:57,150 --> 00:38:00,690
situation where you might need to access

00:37:58,710 --> 00:38:04,680
an individual stuff because I'm not sure

00:38:00,690 --> 00:38:06,480
how open PI Excel sort of use that look

00:38:04,680 --> 00:38:08,760
visually just like with the hidden a

00:38:06,480 --> 00:38:10,170
worksheet you can't see they didn't

00:38:08,760 --> 00:38:12,030
worksheet but open PI X oh I can see it

00:38:10,170 --> 00:38:14,280
another sheet names so I'm not sure how

00:38:12,030 --> 00:38:15,869
open PI X L sees those because the

00:38:14,280 --> 00:38:17,910
merging is just a visual thing it's not

00:38:15,869 --> 00:38:22,140
an actual data thing have you ever used

00:38:17,910 --> 00:38:24,359
Excel Rd or exile WT and how does it

00:38:22,140 --> 00:38:25,619
compare to so this is one of the more

00:38:24,359 --> 00:38:28,410
common questions I get with this talk

00:38:25,619 --> 00:38:30,270
I've used those a little bit but when I

00:38:28,410 --> 00:38:33,599
started when I started using this

00:38:30,270 --> 00:38:36,450
library at the time this is 2013 so

00:38:33,599 --> 00:38:38,970
those two libraries to excel excel Rd

00:38:36,450 --> 00:38:41,970
and Excel WT they wouldn't work with

00:38:38,970 --> 00:38:44,280
xlsx files and so I think I believe now

00:38:41,970 --> 00:38:45,690
they do but at the time they wouldn't

00:38:44,280 --> 00:38:48,059
and so I played with them a little bit

00:38:45,690 --> 00:38:50,130
but like oh well I can't I use that to

00:38:48,059 --> 00:38:52,079
take out every spreadsheet convert it to

00:38:50,130 --> 00:38:55,220
an XLS file and use this or I can just

00:38:52,079 --> 00:38:58,230
use a library that supports it natively

00:38:55,220 --> 00:39:00,270
thank you I'm gonna reveal reveal my

00:38:58,230 --> 00:39:03,329
ignorance real quick but what tool were

00:39:00,270 --> 00:39:06,780
you using to run your Python and a

00:39:03,329 --> 00:39:08,880
browser and trust the output that was do

00:39:06,780 --> 00:39:12,589
you put notebooks this just talks about

00:39:08,880 --> 00:39:15,990
to buy up your notebook purveyor of fine

00:39:12,589 --> 00:39:17,150
so Jupiter notebook all right seeing

00:39:15,990 --> 00:39:24,639
none thank you coach Oh

00:39:17,150 --> 00:39:24,639

YouTube URL: https://www.youtube.com/watch?v=ewYminvBly8


