Title: DjangoCon US 2017 - Don't Use My Grid System (or any others) by Miriam Suzanne
Publication date: 2017-09-07
Playlist: DjangoCon US 2017
Description: 
	DjangoCon US 2017 - Don't Use My Grid System (or any others) by Miriam Suzanne

I built Susy, a Sass grid system that can generate any grid technique you like â€” but I havenâ€™t used it in years. Iâ€™ll show you how various grid systems work, and how to avoid using them. For those few cases where a grid really is required, weâ€™ll talk about the best ways to roll your own, so youâ€™re not relying on a bloated library to make decisions for you. Weâ€™ll also look at the new layout toys, from flexbox to CSS Grid, and how to get started with only a few lines of code.

When to use floats, CSS Grid, flexbox, custom properties, and other techniques.

How to make grid-math simple, and lose the grid-system.

How to make existing grid-systems work for you, when youâ€™re stuck with them.

This talk was presented at: https://2017.djangocon.us/talks/don-t-use-my-grid-system-or-any-others/

LINKS:
Follow Miriam Suzanne ðŸ‘‡
On Twitter: https://twitter.com/mirisuzanne
Official homepage: http://oddbird.net

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:17,830
[Music]

00:00:14,040 --> 00:00:26,410
so don't use my grid system any

00:00:17,830 --> 00:00:29,489
questions I what that's the end of the

00:00:26,410 --> 00:00:31,450
talk how did we get there

00:00:29,489 --> 00:00:34,620
yeah we went too far

00:00:31,450 --> 00:00:37,210
all right let's start at the beginning

00:00:34,620 --> 00:00:40,570
the beginning is roughly there

00:00:37,210 --> 00:00:43,090
I don't do Django I have no idea what

00:00:40,570 --> 00:00:45,280
you all are talking about it's it's a

00:00:43,090 --> 00:00:46,960
lot of fun being here anyway there's

00:00:45,280 --> 00:00:50,770
some fun talks even if I don't know what

00:00:46,960 --> 00:00:52,810
you're saying and then a few that you

00:00:50,770 --> 00:00:55,180
know accessibility I do that I'm like

00:00:52,810 --> 00:00:57,100
yeah I belong here

00:00:55,180 --> 00:01:00,970
so I'll establish some cred so you know

00:00:57,100 --> 00:01:03,130
why I am here I've found it odd bird

00:01:00,970 --> 00:01:06,400
with my brothers this is I think our

00:01:03,130 --> 00:01:08,860
first planning meeting ignore the Magic

00:01:06,400 --> 00:01:11,530
the Gathering cards you might recognize

00:01:08,860 --> 00:01:13,150
the middle and he's usually here I

00:01:11,530 --> 00:01:15,310
thought I would be fun to come do a talk

00:01:13,150 --> 00:01:19,090
with my brother and then he ditched out

00:01:15,310 --> 00:01:21,960
so sorry

00:01:19,090 --> 00:01:25,060
so that's Carl Meyer if you don't know

00:01:21,960 --> 00:01:28,210
so this is our team now we've grown up a

00:01:25,060 --> 00:01:30,689
little bit since whatever that was 94 or

00:01:28,210 --> 00:01:33,789
something we've got a team of seven

00:01:30,689 --> 00:01:36,850
we're a small agency doing consulting

00:01:33,789 --> 00:01:38,590
work and I do a lot of the user

00:01:36,850 --> 00:01:42,270
experience design and project management

00:01:38,590 --> 00:01:44,789
and front-end design implementation and

00:01:42,270 --> 00:01:49,389
writing all sorts of tools for

00:01:44,789 --> 00:01:51,700
developers us and open-source community

00:01:49,389 --> 00:01:54,880
including AdWords accoutrement which

00:01:51,700 --> 00:01:58,529
helps you manage abstract patterns and

00:01:54,880 --> 00:02:01,200
code like colors fonts they're not

00:01:58,529 --> 00:02:04,959
physical patterns like your buttons

00:02:01,200 --> 00:02:08,110
that's sort of more abstract patterns

00:02:04,959 --> 00:02:09,670
that exist in a design system so looks

00:02:08,110 --> 00:02:11,920
something like this you don't care I

00:02:09,670 --> 00:02:15,370
don't care either Hermann helps you

00:02:11,920 --> 00:02:17,530
automate pattern libraries great fun and

00:02:15,370 --> 00:02:22,390
then Susie which ended up being the big

00:02:17,530 --> 00:02:24,650
one and it's I don't know why it's just

00:02:22,390 --> 00:02:27,319
another great system

00:02:24,650 --> 00:02:28,790
and I stopped using it right around the

00:02:27,319 --> 00:02:30,560
time it became really popular but I

00:02:28,790 --> 00:02:40,489
still maintain it and that's a lot of

00:02:30,560 --> 00:02:42,140
fun so to go back aways blue the history

00:02:40,489 --> 00:02:43,579
of web layout and why we have grid

00:02:42,140 --> 00:02:45,319
systems and why you don't need them

00:02:43,579 --> 00:02:48,260
anymore

00:02:45,319 --> 00:02:50,510
so that starts with ugh tables remember

00:02:48,260 --> 00:02:54,409
these I used a pixelated image because

00:02:50,510 --> 00:02:57,440
it felt right like oh that's so ugly and

00:02:54,409 --> 00:02:59,959
the markups all out of oh yeah why do we

00:02:57,440 --> 00:03:02,500
do this to ourselves stole that from a

00:02:59,959 --> 00:03:06,620
talk this morning

00:03:02,500 --> 00:03:08,900
silly dev tables are for data we know

00:03:06,620 --> 00:03:10,900
that and you know but at the time it was

00:03:08,900 --> 00:03:14,659
the only way we had to lay out a page

00:03:10,900 --> 00:03:18,530
that was before we even had the basics

00:03:14,659 --> 00:03:20,959
of CSS so tables were what we had and we

00:03:18,530 --> 00:03:22,609
may do but you've got really limited

00:03:20,959 --> 00:03:25,250
styling there's a lot you can't do with

00:03:22,609 --> 00:03:28,750
a table so you're really constricted

00:03:25,250 --> 00:03:31,430
there the mark-up is really strict and

00:03:28,750 --> 00:03:33,889
no it's ordered right for data it's not

00:03:31,430 --> 00:03:35,209
ordered right for content so you're

00:03:33,889 --> 00:03:37,849
always going left to right left to right

00:03:35,209 --> 00:03:38,769
left right and that doesn't always make

00:03:37,849 --> 00:03:41,419
sense

00:03:38,769 --> 00:03:45,109
so it's an accessibility nightmare and

00:03:41,419 --> 00:03:49,720
we know that that's bad because we went

00:03:45,109 --> 00:03:53,150
to the accessibility talk code is

00:03:49,720 --> 00:03:55,669
communication for this lots of places I

00:03:53,150 --> 00:03:57,290
think it's really true what we're trying

00:03:55,669 --> 00:04:00,139
to do is write something that is

00:03:57,290 --> 00:04:02,629
readable to both other people and to a

00:04:00,139 --> 00:04:07,459
machine and if we succeed at both we've

00:04:02,629 --> 00:04:09,709
written good code so table layouts break

00:04:07,459 --> 00:04:11,120
all of that they destroy meaning for

00:04:09,709 --> 00:04:13,129
everybody they're not meaningful to the

00:04:11,120 --> 00:04:16,639
computer they're not meaningful to me

00:04:13,129 --> 00:04:21,199
when I read the markup they're just not

00:04:16,639 --> 00:04:24,530
meaningful great chapter 2 CSS is

00:04:21,199 --> 00:04:30,260
awesome so that's the end of the talk

00:04:24,530 --> 00:04:32,500
any questions there you've all seen this

00:04:30,260 --> 00:04:32,500
I'm sure

00:04:32,620 --> 00:04:37,400
and I just want to remind you that this

00:04:35,270 --> 00:04:41,180
is not a bug this is a feature and I

00:04:37,400 --> 00:04:42,920
mean that this is what happens when you

00:04:41,180 --> 00:04:47,780
are too explicit about too many things

00:04:42,920 --> 00:04:51,280
on the web this is also what happens

00:04:47,780 --> 00:04:54,530
when you don't specify your overflow so

00:04:51,280 --> 00:04:57,650
CSS here is allowing you to make lots of

00:04:54,530 --> 00:04:59,630
decisions even bad decisions and this is

00:04:57,650 --> 00:05:01,370
you making some bad decisions and you're

00:04:59,630 --> 00:05:04,730
welcome to do that

00:05:01,370 --> 00:05:08,060
and it can be fun but that's okay that's

00:05:04,730 --> 00:05:11,450
not a problem with the language a thing

00:05:08,060 --> 00:05:13,570
to remember with CSS is that it's easy

00:05:11,450 --> 00:05:16,130
to be fooled by the declarative syntax

00:05:13,570 --> 00:05:18,350
into thinking that it's a static

00:05:16,130 --> 00:05:21,320
language that you put something in and

00:05:18,350 --> 00:05:24,560
you get a result and that's it and

00:05:21,320 --> 00:05:27,980
that's not how the web works with CSS

00:05:24,560 --> 00:05:29,720
you're really putting in rules for how

00:05:27,980 --> 00:05:31,940
something is going to change across

00:05:29,720 --> 00:05:34,670
different browsers across different

00:05:31,940 --> 00:05:38,480
platforms across different device sizes

00:05:34,670 --> 00:05:41,840
window sizes all sorts of different

00:05:38,480 --> 00:05:44,660
changes that can come at you and CSS is

00:05:41,840 --> 00:05:47,660
a set of rules and suggestions for how

00:05:44,660 --> 00:05:49,700
you might lay that out so you're really

00:05:47,660 --> 00:05:52,730
wanting to define dynamic relationships

00:05:49,700 --> 00:05:55,760
between objects in a way that doesn't

00:05:52,730 --> 00:05:59,750
couple them too tightly this is you know

00:05:55,760 --> 00:06:01,870
like programming and you're designing

00:05:59,750 --> 00:06:04,610
for what happens if the content changes

00:06:01,870 --> 00:06:06,800
gets gets really long gets really short

00:06:04,610 --> 00:06:09,770
what happens if the viewport changes

00:06:06,800 --> 00:06:11,090
what happens if the context changes we

00:06:09,770 --> 00:06:16,550
take this widget and we put it somewhere

00:06:11,090 --> 00:06:19,670
else and it has more or less space and

00:06:16,550 --> 00:06:22,430
the client has control over what the

00:06:19,670 --> 00:06:24,740
final look is and I don't mean the

00:06:22,430 --> 00:06:29,150
client who hired you I mean the client

00:06:24,740 --> 00:06:30,950
browser has final control and sometimes

00:06:29,150 --> 00:06:33,560
the user of that browser changing their

00:06:30,950 --> 00:06:35,030
settings using a different browser they

00:06:33,560 --> 00:06:36,620
get control and that's a complete

00:06:35,030 --> 00:06:38,720
paradigm shift from when we were doing

00:06:36,620 --> 00:06:44,120
print design or many of us probably

00:06:38,720 --> 00:06:45,360
weren't doing print design I was but now

00:06:44,120 --> 00:06:48,419
we're dealing with this

00:06:45,360 --> 00:06:50,099
so I write one piece of code and then

00:06:48,419 --> 00:06:52,800
all these devices see it and this is

00:06:50,099 --> 00:06:55,830
like some fraction of who might be

00:06:52,800 --> 00:06:59,310
looking at my layout so it's not just

00:06:55,830 --> 00:07:00,330
the one orange guy with yellow hair that

00:06:59,310 --> 00:07:02,280
you're dealing with you're dealing with

00:07:00,330 --> 00:07:05,699
all these guys and then all of these

00:07:02,280 --> 00:07:07,199
people too and then these people and you

00:07:05,699 --> 00:07:11,819
don't even know which ones have autism

00:07:07,199 --> 00:07:15,360
or some other color blindness etc so

00:07:11,819 --> 00:07:17,569
you've got a deal with a wide range of

00:07:15,360 --> 00:07:23,310
users and we're not talking just about

00:07:17,569 --> 00:07:27,870
WCAG accessibility that and also being

00:07:23,310 --> 00:07:30,479
aware of people so empathy is important

00:07:27,870 --> 00:07:35,699
and I think we all know that that's the

00:07:30,479 --> 00:07:36,419
job rant complete we heard it in the

00:07:35,699 --> 00:07:40,710
keynote this morning

00:07:36,419 --> 00:07:42,659
great so chapter 3 layout options the

00:07:40,710 --> 00:07:44,969
different ways we could do or no wait

00:07:42,659 --> 00:07:47,279
concepts concepts okay a few things

00:07:44,969 --> 00:07:50,520
that'll help get you started with CSS

00:07:47,279 --> 00:07:53,669
layout so one fix the box model this is

00:07:50,520 --> 00:07:55,259
the first step in any CSS layout the box

00:07:53,669 --> 00:07:58,349
model is broken and you've got to fix it

00:07:55,259 --> 00:08:02,250
and it takes a line of code this is the

00:07:58,349 --> 00:08:07,199
default box model when you've got a box

00:08:02,250 --> 00:08:11,250
in CSS it has a content box a padding

00:08:07,199 --> 00:08:13,560
box a border box and then a margin and

00:08:11,250 --> 00:08:15,629
by default when you set width and height

00:08:13,560 --> 00:08:17,460
on an element you're setting the width

00:08:15,629 --> 00:08:19,860
and height of the content and then

00:08:17,460 --> 00:08:21,900
padding and borders and margin are all

00:08:19,860 --> 00:08:23,250
added on top of that and that doesn't

00:08:21,900 --> 00:08:25,560
make much sense when you're laying out a

00:08:23,250 --> 00:08:28,520
page generally you want it to be this

00:08:25,560 --> 00:08:32,849
way you want to set a width and a height

00:08:28,520 --> 00:08:36,000
that define the outside of the box where

00:08:32,849 --> 00:08:38,339
the border where the padding so it takes

00:08:36,000 --> 00:08:42,870
one line of code to do that and that's

00:08:38,339 --> 00:08:46,490
it it's a universal selector that

00:08:42,870 --> 00:08:50,820
changes the box model on everything to

00:08:46,490 --> 00:08:52,769
the border box and there's a reason we

00:08:50,820 --> 00:08:55,589
do it this way and not this other way

00:08:52,769 --> 00:08:58,579
that's going around there's a reason in

00:08:55,589 --> 00:09:01,429
CSS inheritances port important you

00:08:58,579 --> 00:09:05,439
I heard of the cascading stylesheets

00:09:01,429 --> 00:09:08,379
that's inheritance is what that's about

00:09:05,439 --> 00:09:13,519
and that means things trick can triple

00:09:08,379 --> 00:09:16,639
trickle down the chain the DOM and this

00:09:13,519 --> 00:09:18,949
is taking that and putting it to use

00:09:16,639 --> 00:09:21,049
by setting the box sizing once on the

00:09:18,949 --> 00:09:22,939
HTML element and then inheriting it

00:09:21,049 --> 00:09:25,160
everywhere else but that's similar to

00:09:22,939 --> 00:09:27,049
inheriting your borders similar to

00:09:25,160 --> 00:09:30,499
inheriting backgrounds it doesn't make

00:09:27,049 --> 00:09:35,869
any sense you don't want to inherit box

00:09:30,499 --> 00:09:39,290
properties so don't do it we want to

00:09:35,869 --> 00:09:40,670
avoid tightly coupled elements so that

00:09:39,290 --> 00:09:44,509
means we want to build everything so

00:09:40,670 --> 00:09:47,480
that it can flex on its own in relation

00:09:44,509 --> 00:09:50,989
to other things around it and that means

00:09:47,480 --> 00:09:55,339
we're really focused on building

00:09:50,989 --> 00:09:58,670
relationships between things in a way so

00:09:55,339 --> 00:10:01,489
I say this will fill all the remaining

00:09:58,670 --> 00:10:02,809
space this object will take up this

00:10:01,489 --> 00:10:06,499
space and this object will take the

00:10:02,809 --> 00:10:08,899
remaining space and being too explicit

00:10:06,499 --> 00:10:11,869
about those sizes is a problem because

00:10:08,899 --> 00:10:15,019
then suddenly they're coupled if we have

00:10:11,869 --> 00:10:17,660
if I have to explicitly state how each

00:10:15,019 --> 00:10:19,730
object takes up space and we'll get to

00:10:17,660 --> 00:10:21,470
exactly how that works so part of doing

00:10:19,730 --> 00:10:25,040
that is going with a flow and the flow

00:10:21,470 --> 00:10:27,769
in CSS is something like this it goes

00:10:25,040 --> 00:10:30,019
left to right and top to bottom and when

00:10:27,769 --> 00:10:33,709
I resize this one element the other

00:10:30,019 --> 00:10:37,610
objects flow around it and that's good

00:10:33,709 --> 00:10:39,829
that's useful we want that so one of my

00:10:37,610 --> 00:10:43,999
rules for CSS layout is whenever you can

00:10:39,829 --> 00:10:45,049
stay in the flow this is what happens if

00:10:43,999 --> 00:10:49,939
you don't stay in the flow

00:10:45,049 --> 00:10:53,139
now we resize this one and nothing else

00:10:49,939 --> 00:10:57,470
changes and suddenly our layouts broken

00:10:53,139 --> 00:10:59,059
and that's worse so we want to stay in

00:10:57,470 --> 00:11:02,329
the flow when we can oh right I think I

00:10:59,059 --> 00:11:08,869
have a real use case let's call it that

00:11:02,329 --> 00:11:11,480
it's Legos oh that's now yeah there we

00:11:08,869 --> 00:11:13,329
go so I made it so that I can resize

00:11:11,480 --> 00:11:15,950
this

00:11:13,329 --> 00:11:19,160
and you can see by staying in the flow

00:11:15,950 --> 00:11:21,860
its resizing both great so if we add a

00:11:19,160 --> 00:11:24,529
Lego to the orange we take a Lego away

00:11:21,860 --> 00:11:29,300
from the purple right a real use case

00:11:24,529 --> 00:11:31,790
good oh right

00:11:29,300 --> 00:11:37,940
when I click in there I gotta get back

00:11:31,790 --> 00:11:40,850
out so a few layout techniques different

00:11:37,940 --> 00:11:43,190
ways that we could approach laying out a

00:11:40,850 --> 00:11:44,779
website so when I first came to CSS

00:11:43,190 --> 00:11:46,940
I thought relative positioning would

00:11:44,779 --> 00:11:49,100
probably be the way to go that sounds

00:11:46,940 --> 00:11:51,860
the most reasonable right layout is

00:11:49,100 --> 00:11:55,310
positioning let's try this it doesn't

00:11:51,860 --> 00:11:56,420
work it just pushes the box around and

00:11:55,310 --> 00:11:58,519
doesn't affect anything else

00:11:56,420 --> 00:12:01,130
so that's broken we're not going to use

00:11:58,519 --> 00:12:03,709
it absolute positioning or fixed

00:12:01,130 --> 00:12:07,610
positioning no positioning just doesn't

00:12:03,709 --> 00:12:09,709
work it sounds reasonable it's not

00:12:07,610 --> 00:12:11,480
reasonable for layouts absolute

00:12:09,709 --> 00:12:14,029
positioning goes off of the parent

00:12:11,480 --> 00:12:17,529
element or the the most recently

00:12:14,029 --> 00:12:22,220
positioned element in the ancestor of

00:12:17,529 --> 00:12:24,290
that which is the only way relative

00:12:22,220 --> 00:12:26,120
positioning is useful you use relative

00:12:24,290 --> 00:12:28,699
positioning to create an ancestor to

00:12:26,120 --> 00:12:30,829
absolute position off of this is crazy I

00:12:28,699 --> 00:12:33,290
don't know why we why we have it that

00:12:30,829 --> 00:12:34,790
way but that's all they do

00:12:33,290 --> 00:12:36,880
absolute positioning and fixed

00:12:34,790 --> 00:12:39,350
positioning are great for one thing only

00:12:36,880 --> 00:12:42,110
overlays if you need to create something

00:12:39,350 --> 00:12:43,760
that is not part of the layout something

00:12:42,110 --> 00:12:44,899
that's not part of the flow it's

00:12:43,760 --> 00:12:48,529
separate from everything else

00:12:44,899 --> 00:12:50,600
the tooltip drop-down menu something

00:12:48,529 --> 00:12:53,720
that's just going to come and go that's

00:12:50,600 --> 00:12:56,209
when you can use those so then we

00:12:53,720 --> 00:12:58,790
finally get CSS floats and they're like

00:12:56,209 --> 00:13:01,399
the least bad hack we have for a long

00:12:58,790 --> 00:13:05,750
time not terrible they're built to do

00:13:01,399 --> 00:13:07,370
this which they do perfectly like oh man

00:13:05,750 --> 00:13:11,630
you want to wrap some text around an

00:13:07,370 --> 00:13:13,880
image you float that it's great it

00:13:11,630 --> 00:13:17,570
kind of stays in the flow look at that

00:13:13,880 --> 00:13:22,940
look at that flowing and we can we can

00:13:17,570 --> 00:13:25,420
resize this can we ah yeah and things

00:13:22,940 --> 00:13:28,300
almost kind of flow around it

00:13:25,420 --> 00:13:30,430
but not quite and again that makes sense

00:13:28,300 --> 00:13:31,630
for floating text around images you can

00:13:30,430 --> 00:13:35,860
see that that's basically what it's

00:13:31,630 --> 00:13:38,050
doing it's making text flow but not the

00:13:35,860 --> 00:13:42,580
actual objects themselves unless they're

00:13:38,050 --> 00:13:44,740
also floated so that's weird

00:13:42,580 --> 00:13:46,510
but it makes sense for text wrap and

00:13:44,740 --> 00:13:48,520
while you need to fix that as a clear

00:13:46,510 --> 00:13:50,590
fix and we've gone through like a

00:13:48,520 --> 00:13:53,350
million of these in the front-end world

00:13:50,590 --> 00:13:56,320
before landing on this one that now

00:13:53,350 --> 00:14:00,250
people use fairly regularly micro clear

00:13:56,320 --> 00:14:01,900
fix and all it does is create this

00:14:00,250 --> 00:14:05,740
little hidden element that I've just

00:14:01,900 --> 00:14:09,730
shown at the bottom of the screen that

00:14:05,740 --> 00:14:11,920
clears everything it's a hack it's not

00:14:09,730 --> 00:14:13,650
beautiful but you can you know you can

00:14:11,920 --> 00:14:15,940
create a mixin or you can create a

00:14:13,650 --> 00:14:18,760
utility class however you like to do it

00:14:15,940 --> 00:14:20,290
and you can clear your floats and this

00:14:18,760 --> 00:14:23,530
is how we did layouts for quite a while

00:14:20,290 --> 00:14:27,100
now there's this new thing with terrible

00:14:23,530 --> 00:14:30,880
support that does that this is a clear

00:14:27,100 --> 00:14:33,670
fix actually in the spec and you can't

00:14:30,880 --> 00:14:35,760
use it so just just thought I'd let you

00:14:33,670 --> 00:14:35,760
know

00:14:36,130 --> 00:14:40,690
the other way you can clear fix this is

00:14:38,350 --> 00:14:43,120
a much simpler hack but with some

00:14:40,690 --> 00:14:45,190
side-effects you can just put

00:14:43,120 --> 00:14:47,830
overflow:hidden on an element and it

00:14:45,190 --> 00:14:49,960
will clear its children

00:14:47,830 --> 00:14:52,300
it's floated children so that's very

00:14:49,960 --> 00:14:53,680
clever but then it's dangerous if you

00:14:52,300 --> 00:14:55,060
ever want to break outside of the

00:14:53,680 --> 00:14:58,150
container because you've just hidden

00:14:55,060 --> 00:15:00,670
everything that goes outside so this is

00:14:58,150 --> 00:15:03,820
what you get if you use the overflow

00:15:00,670 --> 00:15:08,860
hack also on something next to it you'll

00:15:03,820 --> 00:15:11,980
create a box that can respond and fill

00:15:08,860 --> 00:15:15,310
the remaining space so the overflow hack

00:15:11,980 --> 00:15:19,270
is also useful there so we can have this

00:15:15,310 --> 00:15:21,250
be a fixed fixed width and this one will

00:15:19,270 --> 00:15:22,840
flow to fill the remaining space we also

00:15:21,250 --> 00:15:27,730
use the overflow hack on the container

00:15:22,840 --> 00:15:31,090
and now it wraps so that's clearing

00:15:27,730 --> 00:15:33,130
floats floats are great for flexible

00:15:31,090 --> 00:15:35,380
markup you can do as much nesting as you

00:15:33,130 --> 00:15:37,600
want you can have this ugly divs that

00:15:35,380 --> 00:15:40,390
Java stopped giving me divs in

00:15:37,600 --> 00:15:43,510
JavaScript I don't want them but you can

00:15:40,390 --> 00:15:45,190
like you can nest all this and you

00:15:43,510 --> 00:15:47,200
can still lay these things out

00:15:45,190 --> 00:15:50,530
it doesn't matter those divs because of

00:15:47,200 --> 00:15:53,950
the way boxes collapse around floats

00:15:50,530 --> 00:15:55,960
those boxes will just disappear and you

00:15:53,950 --> 00:15:59,560
can layout elements that are not

00:15:55,960 --> 00:16:01,630
siblings and that's rare in CSS often

00:15:59,560 --> 00:16:05,310
things have to be siblings so this is

00:16:01,630 --> 00:16:08,020
kind of nice when we get free of that

00:16:05,310 --> 00:16:10,630
with floats you always want to define

00:16:08,020 --> 00:16:13,420
the width they sort of automatically go

00:16:10,630 --> 00:16:16,420
to the widest that the content wants to

00:16:13,420 --> 00:16:18,850
go and it's not reliable

00:16:16,420 --> 00:16:20,850
so you all anytime you set afloat you

00:16:18,850 --> 00:16:24,160
basically always want to set a width

00:16:20,850 --> 00:16:26,260
which is not great you end up sort of as

00:16:24,160 --> 00:16:29,020
I said earlier with tightly coupled

00:16:26,260 --> 00:16:30,400
elements because every size affects what

00:16:29,020 --> 00:16:33,250
space is available for every other

00:16:30,400 --> 00:16:35,830
element though there used to be this

00:16:33,250 --> 00:16:37,060
pixel this sub pixel rounding issue that

00:16:35,830 --> 00:16:38,320
everybody got freaked out about and

00:16:37,060 --> 00:16:40,660
there were some grid systems Bizet's

00:16:38,320 --> 00:16:43,150
built specifically to handle it

00:16:40,660 --> 00:16:47,260
it's not really an issue anymore this is

00:16:43,150 --> 00:16:48,900
what it did every browser solved this

00:16:47,260 --> 00:16:51,360
math equation differently

00:16:48,900 --> 00:16:52,770
so if you've got 25% of 50 pixels what

00:16:51,360 --> 00:16:54,450
is that

00:16:52,770 --> 00:16:56,630
and every browser had a different

00:16:54,450 --> 00:16:59,160
algorithm for figuring that out and

00:16:56,630 --> 00:17:03,990
several of them would rap to the next

00:16:59,160 --> 00:17:06,870
line when obviously 25% times four

00:17:03,990 --> 00:17:10,020
should really get you there so that's

00:17:06,870 --> 00:17:12,660
how it was now you can see so float

00:17:10,020 --> 00:17:14,130
isolation is the trick that people came

00:17:12,660 --> 00:17:15,870
up with and that's on the bottom here

00:17:14,130 --> 00:17:19,170
now you can see those red lines

00:17:15,870 --> 00:17:22,170
appearing are when we get an error in

00:17:19,170 --> 00:17:25,860
the subpixel rounding and right now the

00:17:22,170 --> 00:17:28,260
top part is just floated you can see the

00:17:25,860 --> 00:17:30,480
browsers to fix this problem so if you

00:17:28,260 --> 00:17:32,040
hear somebody telling you you can't do

00:17:30,480 --> 00:17:34,440
something because sub-pixel rounding

00:17:32,040 --> 00:17:37,470
something something floats doesn't

00:17:34,440 --> 00:17:39,870
matter anymore it works if you really

00:17:37,470 --> 00:17:41,790
need isolation it's kind of a weird hack

00:17:39,870 --> 00:17:44,640
and you can do some interesting things

00:17:41,790 --> 00:17:47,760
with it but only on rare occasions and

00:17:44,640 --> 00:17:50,130
it's not for this any more background

00:17:47,760 --> 00:17:51,570
images for some reason still have

00:17:50,130 --> 00:17:54,300
subject surrounding issues and there's

00:17:51,570 --> 00:17:56,600
no way to fix it and I don't know why so

00:17:54,300 --> 00:17:58,860
you can see the white lines are actually

00:17:56,600 --> 00:18:02,190
elements showing the correct widths and

00:17:58,860 --> 00:18:07,230
then the red lines are they lining up

00:18:02,190 --> 00:18:11,460
right now you can see that the red lines

00:18:07,230 --> 00:18:15,350
of the background and the white lines of

00:18:11,460 --> 00:18:19,020
the elements jump every once in a while

00:18:15,350 --> 00:18:21,120
because the background image still has

00:18:19,020 --> 00:18:22,710
suffolk surrounding issues and that's

00:18:21,120 --> 00:18:25,980
why a lot of grid systems that give you

00:18:22,710 --> 00:18:28,530
a gradient background the gradient

00:18:25,980 --> 00:18:33,390
backgrounds a little sketchy we do that

00:18:28,530 --> 00:18:34,830
don't use my grid system some people for

00:18:33,390 --> 00:18:36,900
a while then started doing inline block

00:18:34,830 --> 00:18:39,990
layouts mainly because you can do some

00:18:36,900 --> 00:18:41,940
vertical centering but it's really

00:18:39,990 --> 00:18:43,950
invasive and the hacks are really

00:18:41,940 --> 00:18:45,990
complex to make it work you've got to

00:18:43,950 --> 00:18:48,120
basically set your font size to zero and

00:18:45,990 --> 00:18:49,679
then bring your font size back up for

00:18:48,120 --> 00:18:51,360
every element it's weird

00:18:49,679 --> 00:18:52,830
I don't I don't recommend it there's

00:18:51,360 --> 00:18:56,340
lots of better ways to do vertical

00:18:52,830 --> 00:18:58,670
centering now leave that one out

00:18:56,340 --> 00:19:02,530
display table this one's interesting

00:18:58,670 --> 00:19:04,960
this is you can now use CSS to

00:19:02,530 --> 00:19:06,850
mimic a table even though you haven't

00:19:04,960 --> 00:19:09,190
put a table in your markup so that means

00:19:06,850 --> 00:19:11,740
you can do it you can do a table layout

00:19:09,190 --> 00:19:17,050
that's semantically friendly and that's

00:19:11,740 --> 00:19:21,760
great it's weird but it's great so table

00:19:17,050 --> 00:19:24,100
layouts can do a few things like this is

00:19:21,760 --> 00:19:28,420
the same markup top and bottom and then

00:19:24,100 --> 00:19:31,330
I just added display table and suddenly

00:19:28,420 --> 00:19:35,770
it puts them next to each other and they

00:19:31,330 --> 00:19:37,720
all resize to fill the space so that's

00:19:35,770 --> 00:19:40,780
interesting again this has some of the

00:19:37,720 --> 00:19:43,750
same problems the tables did in terms of

00:19:40,780 --> 00:19:46,570
limited styling it can be difficult to

00:19:43,750 --> 00:19:48,580
work with but it does some it does some

00:19:46,570 --> 00:19:51,880
clever use of space solve some issues

00:19:48,580 --> 00:19:54,760
there so worth knowing worth keeping in

00:19:51,880 --> 00:19:57,220
your toolbox you set display table or

00:19:54,760 --> 00:20:00,090
display:table-cell or just display table

00:19:57,220 --> 00:20:03,970
row and you can mimic those elements

00:20:00,090 --> 00:20:06,610
then we got flex box and flex box is

00:20:03,970 --> 00:20:10,030
magic it's the first thing we have

00:20:06,610 --> 00:20:12,070
that's not a hack like we this is

00:20:10,030 --> 00:20:13,830
actually built for the browser or to lay

00:20:12,070 --> 00:20:17,530
things out that's what it's for

00:20:13,830 --> 00:20:19,360
and it's got really good support if

00:20:17,530 --> 00:20:22,210
you're scared of using flexbox don't be

00:20:19,360 --> 00:20:25,000
scared oh I was looking last night I

00:20:22,210 --> 00:20:27,280
wanted to get may I use calm which would

00:20:25,000 --> 00:20:32,170
be like can I use but you'd like give

00:20:27,280 --> 00:20:35,290
you permission absolutely you're welcome

00:20:32,170 --> 00:20:36,970
to use this so if I can I think

00:20:35,290 --> 00:20:40,620
somebody's squatting on it maybe I'll go

00:20:36,970 --> 00:20:42,820
look for may I use dot IO or something

00:20:40,620 --> 00:20:44,260
so you can do all sorts of things with

00:20:42,820 --> 00:20:46,600
Flex box I'm not going to get into all

00:20:44,260 --> 00:20:49,870
of it right now but you can do equal

00:20:46,600 --> 00:20:51,940
height columns you can do you can set

00:20:49,870 --> 00:20:54,340
you can align things at the bottom or at

00:20:51,940 --> 00:20:56,350
the top or the left or there you can all

00:20:54,340 --> 00:20:59,640
sorts of you can rearrange your layout

00:20:56,350 --> 00:21:02,710
so it's right to left in the single

00:20:59,640 --> 00:21:05,700
declaration there's all sorts of things

00:21:02,710 --> 00:21:08,470
you can do here and you are finally

00:21:05,700 --> 00:21:10,360
setting up relationships so this is some

00:21:08,470 --> 00:21:12,700
stuff on the container you set display

00:21:10,360 --> 00:21:15,789
to flex a line items and justify

00:21:12,700 --> 00:21:18,460
contents will define how spaces

00:21:15,789 --> 00:21:22,629
distributed around elements vertically

00:21:18,460 --> 00:21:24,070
or horizontally and then with the order

00:21:22,629 --> 00:21:26,049
property actually it doesn't make sense

00:21:24,070 --> 00:21:28,179
for that to go on a container that would

00:21:26,049 --> 00:21:30,340
go on the item itself you can rearrange

00:21:28,179 --> 00:21:31,779
the order of your elements so you can

00:21:30,340 --> 00:21:35,080
have them in a reasonable order in the

00:21:31,779 --> 00:21:38,229
DOM and then move them around visually

00:21:35,080 --> 00:21:41,169
as you need to and it's it's really it's

00:21:38,229 --> 00:21:43,840
great you get this flex grow and flex

00:21:41,169 --> 00:21:46,029
shrink and flex basis and now you can

00:21:43,840 --> 00:21:49,649
really see where we're developing

00:21:46,029 --> 00:21:52,840
systems of relationships rather than

00:21:49,649 --> 00:21:55,330
static output we're saying here's an

00:21:52,840 --> 00:21:57,460
ideal width that's the basis and then

00:21:55,330 --> 00:22:00,580
here's how much we're allowing it to

00:21:57,460 --> 00:22:02,349
shrink relative to other elements when

00:22:00,580 --> 00:22:04,269
there's less space here's how much we're

00:22:02,349 --> 00:22:08,169
allowing it to grow so those are simple

00:22:04,269 --> 00:22:09,759
ratios you can say flex grow one and if

00:22:08,169 --> 00:22:12,489
everything in the row is flex grow one

00:22:09,759 --> 00:22:14,799
they'll grow equally to take the

00:22:12,489 --> 00:22:18,820
remaining space and if you set one to

00:22:14,799 --> 00:22:21,489
flex one and one to flex to the one set

00:22:18,820 --> 00:22:23,859
two flex 2 will take up twice as much of

00:22:21,489 --> 00:22:26,470
the remaining space so it's not going to

00:22:23,859 --> 00:22:34,629
be twice as big it's going to flex twice

00:22:26,470 --> 00:22:37,389
as much be aware flex basis defaults to

00:22:34,629 --> 00:22:39,809
a width setting if you've set with your

00:22:37,389 --> 00:22:43,539
flex basis we'll use the width setting

00:22:39,809 --> 00:22:48,639
and your width setting defaults to auto

00:22:43,539 --> 00:22:52,989
so if you don't set either one your Flex

00:22:48,639 --> 00:22:55,779
basis is Auto which is again similar to

00:22:52,989 --> 00:22:58,599
floats it's sort of the whatever size it

00:22:55,779 --> 00:23:01,269
thinks this content would most like to

00:22:58,599 --> 00:23:04,330
take up which if you're using images

00:23:01,269 --> 00:23:06,609
that you're trying to shrink down it can

00:23:04,330 --> 00:23:10,090
start pushing everything aside so it's

00:23:06,609 --> 00:23:13,269
useful to set that explicitly and say

00:23:10,090 --> 00:23:16,149
what widths you're aiming for and so you

00:23:13,269 --> 00:23:17,919
can very quickly with Flex box create

00:23:16,149 --> 00:23:20,710
like a full height layout with equal

00:23:17,919 --> 00:23:25,179
columns remember when this used to be a

00:23:20,710 --> 00:23:27,650
holy grail of some kind it's fairly

00:23:25,179 --> 00:23:30,650
simple with a little

00:23:27,650 --> 00:23:32,470
flexbox just telling things that they're

00:23:30,650 --> 00:23:36,020
allowed to use the remaining space and

00:23:32,470 --> 00:23:38,630
which which parts should be static and

00:23:36,020 --> 00:23:41,930
which parts should flex so I've set the

00:23:38,630 --> 00:23:42,620
two sidebars static and the inside is

00:23:41,930 --> 00:23:47,360
flexible

00:23:42,620 --> 00:23:51,400
maybe a little too flexible but you have

00:23:47,360 --> 00:23:54,670
a lot of control there it's still

00:23:51,400 --> 00:23:59,150
one-dimensional it's still like floats

00:23:54,670 --> 00:24:01,760
it goes left to right and then wraps so

00:23:59,150 --> 00:24:05,090
you're still not dealing with anything

00:24:01,760 --> 00:24:07,100
vertically on the page well you can turn

00:24:05,090 --> 00:24:11,120
it sideways kind of you can set it to

00:24:07,100 --> 00:24:12,590
work in a column and wrap in columns but

00:24:11,120 --> 00:24:15,830
either way you're setting it to go in

00:24:12,590 --> 00:24:17,960
one dimension and then wrap there's no

00:24:15,830 --> 00:24:20,090
way to manipulate two dimensions

00:24:17,960 --> 00:24:24,710
simultaneously so that's a limiting

00:24:20,090 --> 00:24:27,650
factor nesting also matters here

00:24:24,710 --> 00:24:29,660
we need display contents is coming and

00:24:27,650 --> 00:24:34,670
display contents what that will do is

00:24:29,660 --> 00:24:38,000
basically remove an element from being

00:24:34,670 --> 00:24:40,160
painted so if you've got a div that's

00:24:38,000 --> 00:24:42,440
just sort of an extra div you can just

00:24:40,160 --> 00:24:45,350
say display contents and it's children

00:24:42,440 --> 00:24:47,480
will come up a level in the Dom that

00:24:45,350 --> 00:24:49,970
that element will just disappear that's

00:24:47,480 --> 00:24:52,730
coming it's not supported yet that will

00:24:49,970 --> 00:24:55,420
help a lot because right now everything

00:24:52,730 --> 00:24:58,280
that you're flexing has to be siblings

00:24:55,420 --> 00:25:02,330
it's really great for this kind of thing

00:24:58,280 --> 00:25:04,700
when we're where we used to use floats

00:25:02,330 --> 00:25:09,050
some places but when we're just dealing

00:25:04,700 --> 00:25:10,940
with little internal layouts widgets

00:25:09,050 --> 00:25:13,520
that we're building flexbox works great

00:25:10,940 --> 00:25:15,800
it has some performance issues when

00:25:13,520 --> 00:25:17,960
you're dealing with the whole page it

00:25:15,800 --> 00:25:21,110
loads slowly trying to figure out all of

00:25:17,960 --> 00:25:24,290
the different sizes it's not great and

00:25:21,110 --> 00:25:27,380
being one-dimensional most page layouts

00:25:24,290 --> 00:25:29,720
are not so it's mediocre for the big

00:25:27,380 --> 00:25:33,110
layout but it's a great replacement for

00:25:29,720 --> 00:25:36,920
either tables or floats at the small

00:25:33,110 --> 00:25:38,960
level all right and here's where we get

00:25:36,920 --> 00:25:40,490
into grid systems although going back a

00:25:38,960 --> 00:25:41,510
little bit because we didn't have flex

00:25:40,490 --> 00:25:43,910
bucks and most of these

00:25:41,510 --> 00:25:46,220
systems came out and this is sort of a

00:25:43,910 --> 00:25:48,559
historic detour into why we have grid

00:25:46,220 --> 00:25:52,280
systems and how they work this is your

00:25:48,559 --> 00:25:54,110
average grid system it's like 12 columns

00:25:52,280 --> 00:25:56,809
they're all the same size and there's

00:25:54,110 --> 00:26:01,669
some gutters between them and that's

00:25:56,809 --> 00:26:03,620
roughly the idea and the idea is this

00:26:01,669 --> 00:26:06,980
provides some consistency for our design

00:26:03,620 --> 00:26:10,520
right we've limited ourselves to twelve

00:26:06,980 --> 00:26:14,990
different positions and then from each

00:26:10,520 --> 00:26:18,470
position of eleven or so spans that we

00:26:14,990 --> 00:26:21,320
can do from there the downside it

00:26:18,470 --> 00:26:23,510
enforces consistency so when you've got

00:26:21,320 --> 00:26:25,419
a grid system that's being used by all

00:26:23,510 --> 00:26:29,690
of the projects across the internet

00:26:25,419 --> 00:26:35,780
bootstrap all the all they all start to

00:26:29,690 --> 00:26:38,059
look the same and that's boring on the

00:26:35,780 --> 00:26:41,630
other hand the real reason I think they

00:26:38,059 --> 00:26:44,030
started to spread back in 2007-2008 they

00:26:41,630 --> 00:26:45,740
were sort of the first big thing besides

00:26:44,030 --> 00:26:48,410
Eric Meyers reset they were the first

00:26:45,740 --> 00:26:49,910
big thing that was open-source in the

00:26:48,410 --> 00:26:52,100
CSS world I don't remember

00:26:49,910 --> 00:26:55,730
open source to the CSS world before grid

00:26:52,100 --> 00:26:59,419
systems it was like blueprint came out

00:26:55,730 --> 00:27:01,580
and suddenly everybody was using it and

00:26:59,419 --> 00:27:05,030
part of the reason is because in order

00:27:01,580 --> 00:27:07,880
to do a simple flowed at that point you

00:27:05,030 --> 00:27:09,890
had to use about six different hacks and

00:27:07,880 --> 00:27:12,140
so these grid systems were mainly built

00:27:09,890 --> 00:27:14,929
to solve all of the hacks around

00:27:12,140 --> 00:27:18,410
floating most of those hacks have

00:27:14,929 --> 00:27:20,360
disappeared so that reason is gone so

00:27:18,410 --> 00:27:22,520
this is blueprint it's the first one

00:27:20,360 --> 00:27:24,169
that I remember and when I looked at the

00:27:22,520 --> 00:27:30,260
others it seems to be the first one that

00:27:24,169 --> 00:27:30,710
came out made by Olaf and this is how it

00:27:30,260 --> 00:27:33,260
works

00:27:30,710 --> 00:27:36,650
CSS at that point the only API you can

00:27:33,260 --> 00:27:39,590
build into CSS is classes so it uses a

00:27:36,650 --> 00:27:41,600
class API and then it allows you to add

00:27:39,590 --> 00:27:46,070
a class that will give you columns and

00:27:41,600 --> 00:27:49,760
gutters in this case using width and

00:27:46,070 --> 00:27:52,669
right margins to create the gutter and

00:27:49,760 --> 00:27:54,350
then you can span six and you still get

00:27:52,669 --> 00:27:56,420
the gutter on the end

00:27:54,350 --> 00:28:00,080
which I didn't show there because I

00:27:56,420 --> 00:28:01,520
guess I don't want to show you that but

00:28:00,080 --> 00:28:03,230
then what happens is when you get to the

00:28:01,520 --> 00:28:04,940
end of the row you have to take that

00:28:03,230 --> 00:28:06,710
gutter off so if you've put gutters on

00:28:04,940 --> 00:28:08,360
all of your grid items suddenly you're

00:28:06,710 --> 00:28:13,430
removing on the last one and that's

00:28:08,360 --> 00:28:16,790
where you get that dot last that became

00:28:13,430 --> 00:28:19,850
sort of standard every other grid system

00:28:16,790 --> 00:28:22,520
came out of this method so you can see

00:28:19,850 --> 00:28:24,470
we get several classes from this one we

00:28:22,520 --> 00:28:26,420
got a class of column then a class of

00:28:24,470 --> 00:28:29,390
what size of column and then the class

00:28:26,420 --> 00:28:31,640
last to remove that last margin and

00:28:29,390 --> 00:28:35,810
that's pretty much how grid systems have

00:28:31,640 --> 00:28:37,610
worked classes are the API and it's nice

00:28:35,810 --> 00:28:42,890
that we finally have a clear API for

00:28:37,610 --> 00:28:45,290
layouts and it's sometimes nice that

00:28:42,890 --> 00:28:46,850
developers can ignore CSS but it also

00:28:45,290 --> 00:28:49,910
really sucks that developers are

00:28:46,850 --> 00:28:50,900
starting to ignore CSS which is why I'm

00:28:49,910 --> 00:28:53,270
here

00:28:50,900 --> 00:28:55,970
and it really works best for a massive

00:28:53,270 --> 00:28:58,760
codebase where you really have a lot of

00:28:55,970 --> 00:29:00,350
separation between the people building

00:28:58,760 --> 00:29:02,600
new widgets and the people designing the

00:29:00,350 --> 00:29:05,990
patterns and you can sort of have this

00:29:02,600 --> 00:29:07,250
simple system of classes that you don't

00:29:05,990 --> 00:29:09,980
have people stepping on each other's

00:29:07,250 --> 00:29:11,840
toes as much it works there it doesn't

00:29:09,980 --> 00:29:15,050
work as well when you're a small agency

00:29:11,840 --> 00:29:20,060
trying to design interesting new

00:29:15,050 --> 00:29:22,040
websites for new clients consistently if

00:29:20,060 --> 00:29:24,950
you're all your client projects start to

00:29:22,040 --> 00:29:28,250
look the same that's not great so it

00:29:24,950 --> 00:29:30,740
depends and I'm gonna keep moving you're

00:29:28,250 --> 00:29:32,620
not male for instace unless you are so

00:29:30,740 --> 00:29:35,390
you maybe don't need it

00:29:32,620 --> 00:29:37,400
this is object oriented CSS this came

00:29:35,390 --> 00:29:41,480
from Nicole Sullivan it's a little bit

00:29:37,400 --> 00:29:42,800
simplified it's not actually technically

00:29:41,480 --> 00:29:44,120
a grid system it doesn't give you the

00:29:42,800 --> 00:29:46,100
twelve columns it just gives you

00:29:44,120 --> 00:29:49,940
fractions and that simplifies it a lot

00:29:46,100 --> 00:29:53,840
this is actually the full code of oo CSS

00:29:49,940 --> 00:29:55,880
grids in her first commit so it's much

00:29:53,840 --> 00:29:57,470
more compact and it just gives you

00:29:55,880 --> 00:30:00,110
fractions and that simpler there's no

00:29:57,470 --> 00:30:03,830
gutters and we'll come back to that so

00:30:00,110 --> 00:30:08,000
hers is similar though unit size one of

00:30:03,830 --> 00:30:09,260
two gives you half then 960 grid

00:30:08,000 --> 00:30:11,650
and you can see it looks pretty similar

00:30:09,260 --> 00:30:14,360
except that what they did was they put

00:30:11,650 --> 00:30:16,310
margins on both sides of everything and

00:30:14,360 --> 00:30:18,350
that means we don't have to worry about

00:30:16,310 --> 00:30:19,700
it at the end we just have a little bit

00:30:18,350 --> 00:30:21,530
of space at the edges so we've got

00:30:19,700 --> 00:30:25,310
gutters in between and a little bit

00:30:21,530 --> 00:30:27,470
extra and that's a little simpler you

00:30:25,310 --> 00:30:29,840
don't have last you don't have anything

00:30:27,470 --> 00:30:32,720
removing the margins so okay that's

00:30:29,840 --> 00:30:35,090
clever meanwhile in 2008 Natalie down

00:30:32,720 --> 00:30:38,840
who's sitting right here gave this great

00:30:35,090 --> 00:30:41,150
talk at BarCamp London that launched my

00:30:38,840 --> 00:30:45,380
career so I have to mention her every

00:30:41,150 --> 00:30:47,990
time it's a good talk if you get a

00:30:45,380 --> 00:30:50,950
chance it's still relevant

00:30:47,990 --> 00:30:53,960
almost everything in here is still true

00:30:50,950 --> 00:30:56,390
but the idea was to create consistent

00:30:53,960 --> 00:30:59,840
ways of building websites instead of

00:30:56,390 --> 00:31:02,270
creating tools that would make us do it

00:30:59,840 --> 00:31:04,640
exactly the same every time so that's

00:31:02,270 --> 00:31:08,120
sort of the overall idea is let's have

00:31:04,640 --> 00:31:10,550
systems instead of strict frameworks and

00:31:08,120 --> 00:31:13,490
then we can make changes frameworks lock

00:31:10,550 --> 00:31:19,220
you in there fine until you want to do

00:31:13,490 --> 00:31:22,250
something unique so then her method

00:31:19,220 --> 00:31:24,080
starts with answering lots of questions

00:31:22,250 --> 00:31:28,880
figuring out exactly what kind of site

00:31:24,080 --> 00:31:30,650
you want in in this method you're always

00:31:28,880 --> 00:31:34,010
building the inside with percentages and

00:31:30,650 --> 00:31:35,750
the outside usually with MS and a max

00:31:34,010 --> 00:31:37,670
width of a hundred percent and that

00:31:35,750 --> 00:31:42,020
means you're responding to the browser

00:31:37,670 --> 00:31:43,880
window and also the font size and also

00:31:42,020 --> 00:31:44,480
any little changes you want to make to

00:31:43,880 --> 00:31:47,360
the container

00:31:44,480 --> 00:31:48,940
the insides will flow so it was sort of

00:31:47,360 --> 00:31:53,390
a responsive design before we had

00:31:48,940 --> 00:31:54,800
responsive web design trademark very

00:31:53,390 --> 00:31:57,050
clever container response to the

00:31:54,800 --> 00:31:58,520
viewport and font sizes very few

00:31:57,050 --> 00:32:00,950
restrictions you can build anything you

00:31:58,520 --> 00:32:02,870
want there's no ugly classes you're

00:32:00,950 --> 00:32:05,980
doing it yourself figuring it out for

00:32:02,870 --> 00:32:08,270
each project but the math is ugly

00:32:05,980 --> 00:32:10,520
because as soon as you start nesting you

00:32:08,270 --> 00:32:12,590
have to figure out new contexts and

00:32:10,520 --> 00:32:15,429
what's going to line up and the

00:32:12,590 --> 00:32:18,590
percentages change and it is a shitshow

00:32:15,429 --> 00:32:20,780
and you end up if you don't have

00:32:18,590 --> 00:32:23,300
something like SAS which we didn't

00:32:20,780 --> 00:32:25,580
you end up with just those percentages

00:32:23,300 --> 00:32:27,890
in your code and nobody knows what they

00:32:25,580 --> 00:32:29,780
mean or where they came from or how did

00:32:27,890 --> 00:32:34,040
how to get them again help

00:32:29,780 --> 00:32:37,750
I stole another slide so that's when I

00:32:34,040 --> 00:32:40,820
built Susie I felt Susie just to help me

00:32:37,750 --> 00:32:42,230
do Natalie's idea without doing this

00:32:40,820 --> 00:32:45,350
math over and over again in my

00:32:42,230 --> 00:32:50,510
calculator I was so tired of it so I

00:32:45,350 --> 00:32:52,850
picked up sass and it's a simple simple

00:32:50,510 --> 00:32:55,420
algorithm that we'll look at

00:32:52,850 --> 00:32:58,310
then web design a responsive web design

00:32:55,420 --> 00:33:00,650
came out and this idea of mobile first

00:32:58,310 --> 00:33:03,320
and the idea behind these is that we'll

00:33:00,650 --> 00:33:06,110
build first for small screens in a

00:33:03,320 --> 00:33:10,220
single column and then we'll use media

00:33:06,110 --> 00:33:12,080
queries to increasingly add layout as we

00:33:10,220 --> 00:33:13,910
get bigger and that's a great idea so it

00:33:12,080 --> 00:33:14,960
looks something like this you're always

00:33:13,910 --> 00:33:18,370
using min-width

00:33:14,960 --> 00:33:20,720
media queries to add the next size up

00:33:18,370 --> 00:33:26,480
and only overriding what you need to

00:33:20,720 --> 00:33:28,580
override to add the next layout so Susie

00:33:26,480 --> 00:33:30,470
gave you sort of any grid system on

00:33:28,580 --> 00:33:32,510
demand because you could just change a

00:33:30,470 --> 00:33:33,860
few settings and say I want the gutters

00:33:32,510 --> 00:33:36,710
on the right I want them on the left I

00:33:33,860 --> 00:33:40,280
want them split I'm like you make it up

00:33:36,710 --> 00:33:41,840
you set some configurations but the

00:33:40,280 --> 00:33:45,800
downside is the grid systems are still

00:33:41,840 --> 00:33:48,890
over killing you don't eat them yeah you

00:33:45,800 --> 00:33:53,150
use bootstrap I know I'm sorry

00:33:48,890 --> 00:33:55,940
okay so DIY grids this is how you avoid

00:33:53,150 --> 00:33:58,970
using grid systems now fluid grids

00:33:55,940 --> 00:34:02,980
require math but if you make that math

00:33:58,970 --> 00:34:05,480
simple you can do this without a system

00:34:02,980 --> 00:34:09,200
building your own the way you want it

00:34:05,480 --> 00:34:11,090
for your project this is the math target

00:34:09,200 --> 00:34:16,190
divided by context equals multiplier

00:34:11,090 --> 00:34:17,450
this is how you get a percentage so this

00:34:16,190 --> 00:34:20,600
is what it looks like in something like

00:34:17,450 --> 00:34:22,850
Suzy where it's got gutters and it

00:34:20,600 --> 00:34:23,870
becomes really ugly math but this is

00:34:22,850 --> 00:34:26,600
what it looks like if you take the

00:34:23,870 --> 00:34:28,669
gutters out so just take the gutters out

00:34:26,600 --> 00:34:32,030
you can put them back in somewhere else

00:34:28,669 --> 00:34:33,380
use padding for gutters use use internal

00:34:32,030 --> 00:34:34,760
elements for gutters it doesn't matter

00:34:33,380 --> 00:34:37,190
if you can get gutter

00:34:34,760 --> 00:34:39,649
out of your grid system suddenly you

00:34:37,190 --> 00:34:40,970
just need to get a percentage and in SAS

00:34:39,649 --> 00:34:43,100
you can do that with a percentage

00:34:40,970 --> 00:34:45,560
function and then three of twelve it's

00:34:43,100 --> 00:34:46,970
still meaningful it still reads it's

00:34:45,560 --> 00:34:49,040
still three columns out of twelve

00:34:46,970 --> 00:34:51,710
columns you still have a twelve column

00:34:49,040 --> 00:34:54,350
grid and you've used one SAS function

00:34:51,710 --> 00:34:57,020
instead of any grid system and that's it

00:34:54,350 --> 00:34:58,820
there is your grid system if you don't

00:34:57,020 --> 00:35:00,890
even want to use SAS you can use calc

00:34:58,820 --> 00:35:03,140
the support on calc is pretty good it

00:35:00,890 --> 00:35:06,650
will actually get to it but it's sort of

00:35:03,140 --> 00:35:09,500
like CSS systems mixed with oo CSS

00:35:06,650 --> 00:35:12,050
you're using fractions you're doing it

00:35:09,500 --> 00:35:14,510
on the fly you can kind of do what you

00:35:12,050 --> 00:35:16,730
want and it doesn't require any ugly

00:35:14,510 --> 00:35:18,080
classes it works with any technique you

00:35:16,730 --> 00:35:21,790
can use it with floats you can use it

00:35:18,080 --> 00:35:26,200
with tables you can use it with Flex box

00:35:21,790 --> 00:35:29,360
the you're still dealing with explicit

00:35:26,200 --> 00:35:31,250
grids rather than implicit relationships

00:35:29,360 --> 00:35:33,980
which i think is a downside

00:35:31,250 --> 00:35:36,350
I think grids aren't that great there is

00:35:33,980 --> 00:35:40,370
no magic in grids they're not a design

00:35:36,350 --> 00:35:42,440
Savior you can probably just you know

00:35:40,370 --> 00:35:44,180
say that your sidebars over here and

00:35:42,440 --> 00:35:46,100
then your main content takes up the rest

00:35:44,180 --> 00:35:49,370
of the space who cares you don't need 12

00:35:46,100 --> 00:35:52,400
columns for that so anyway we get a

00:35:49,370 --> 00:35:54,020
paradigm shift now in CSS where we've

00:35:52,400 --> 00:35:56,360
got custom properties and things like

00:35:54,020 --> 00:35:58,580
this that are suddenly CSS is becoming

00:35:56,360 --> 00:36:01,940
extensible we can build our own things

00:35:58,580 --> 00:36:04,370
in CSS so I can create my own property

00:36:01,940 --> 00:36:07,720
name and I can give it any value and

00:36:04,370 --> 00:36:12,740
this is what it looks like it's an empty

00:36:07,720 --> 00:36:15,520
an empty prefix I need some water this

00:36:12,740 --> 00:36:15,520
is how you use it

00:36:17,920 --> 00:36:24,670
in a CSS value you call your variable

00:36:22,260 --> 00:36:26,230
function and you can give it the

00:36:24,670 --> 00:36:29,109
property name that you want to use and

00:36:26,230 --> 00:36:33,519
then the fallback value if that property

00:36:29,109 --> 00:36:37,059
doesn't exist so that's handy and that's

00:36:33,519 --> 00:36:40,779
fairly well supported not everywhere but

00:36:37,059 --> 00:36:43,299
coming and it's there's a lot you can do

00:36:40,779 --> 00:36:45,880
with it you can also mix that with calc

00:36:43,299 --> 00:36:49,420
and here's a grid system it's the same

00:36:45,880 --> 00:36:53,799
math your span divided by your columns

00:36:49,420 --> 00:36:56,950
times a hundred percent calc has way way

00:36:53,799 --> 00:36:58,329
larger support and your grid system

00:36:56,950 --> 00:37:00,430
looks something like this I think that's

00:36:58,329 --> 00:37:02,470
the whole thing that works on its own so

00:37:00,430 --> 00:37:05,440
right there you've got a grid system and

00:37:02,470 --> 00:37:07,450
it can react to the Dom because these

00:37:05,440 --> 00:37:11,559
variables unlike SAS variables these

00:37:07,450 --> 00:37:13,740
variables inherit and so you can have a

00:37:11,559 --> 00:37:16,329
system where your gutters change size

00:37:13,740 --> 00:37:18,640
and they'll just automatically change

00:37:16,329 --> 00:37:24,359
size you can actually see that here well

00:37:18,640 --> 00:37:26,799
if I resized so there you've got them

00:37:24,359 --> 00:37:33,789
one of three and then they suddenly

00:37:26,799 --> 00:37:35,200
become one of six as this closes so then

00:37:33,789 --> 00:37:37,450
they're only taking up a third of space

00:37:35,200 --> 00:37:39,700
and that was just we just changed how

00:37:37,450 --> 00:37:41,859
many columns were available at that

00:37:39,700 --> 00:37:44,579
media query and it all shifts and

00:37:41,859 --> 00:37:46,779
nothing else had to change in the CSS

00:37:44,579 --> 00:37:51,160
viewport units also give us some more

00:37:46,779 --> 00:37:53,799
control very well-supported we if we

00:37:51,160 --> 00:37:57,670
want a full height layout we can say we

00:37:53,799 --> 00:37:59,470
want height 100 VH if you do that make

00:37:57,670 --> 00:38:01,359
sure that you said overflow well because

00:37:59,470 --> 00:38:04,059
that's going to knock it off at a

00:38:01,359 --> 00:38:06,819
hundred percent of the height viewport

00:38:04,059 --> 00:38:11,289
units are basically percentages of the

00:38:06,819 --> 00:38:13,150
full viewport so if you're setting the

00:38:11,289 --> 00:38:14,980
height make sure you know how text is

00:38:13,150 --> 00:38:18,539
going to overflow that looks like this

00:38:14,980 --> 00:38:20,799
and you can see I set an overflow there

00:38:18,539 --> 00:38:26,859
if you want a sticky footer you can do

00:38:20,799 --> 00:38:28,829
min height and that's like this and I

00:38:26,859 --> 00:38:31,319
don't have anything overflowing

00:38:28,829 --> 00:38:33,269
but that footer would get pushed down so

00:38:31,319 --> 00:38:35,489
if you use min height it's sticky and if

00:38:33,269 --> 00:38:40,609
you use height it's always going to say

00:38:35,489 --> 00:38:44,880
there you can break the container

00:38:40,609 --> 00:38:47,339
something like this by using this simple

00:38:44,880 --> 00:38:51,390
calculation where you take 50% of the

00:38:47,339 --> 00:38:53,609
space and subtract 50% of the viewport

00:38:51,390 --> 00:38:57,269
and you can break out one side or the

00:38:53,609 --> 00:39:05,309
other of your content always lining up

00:38:57,269 --> 00:39:06,779
with the edge of the viewport there's

00:39:05,309 --> 00:39:09,209
more you can do with viewport units you

00:39:06,779 --> 00:39:10,709
can check that link out later and then

00:39:09,209 --> 00:39:15,119
we got CSS grid and this is where it

00:39:10,709 --> 00:39:18,749
gets really exciting because CSS grid is

00:39:15,119 --> 00:39:21,119
actually built for actual layouts in two

00:39:18,749 --> 00:39:23,489
dimensions and it does what any grid

00:39:21,119 --> 00:39:26,150
system does but much faster and in the

00:39:23,489 --> 00:39:29,369
browser and wouldn't with more power

00:39:26,150 --> 00:39:31,739
it's actual real layout in the browser

00:39:29,369 --> 00:39:35,009
we're no longer talking about faking it

00:39:31,739 --> 00:39:38,190
or hacking anything and it suddenly had

00:39:35,009 --> 00:39:42,749
support in March three or four browsers

00:39:38,190 --> 00:39:46,380
all landed at the same time and we're

00:39:42,749 --> 00:39:49,920
using it in production now there is

00:39:46,380 --> 00:39:52,499
nothing like it at all any grid system

00:39:49,920 --> 00:39:55,410
that claims to polyfill there is nothing

00:39:52,499 --> 00:39:59,339
that does this so if you can start using

00:39:55,410 --> 00:40:01,259
grids start using grid people have been

00:39:59,339 --> 00:40:03,959
trying to read the spec or give talks

00:40:01,259 --> 00:40:08,309
that are the spec and it's huge and

00:40:03,959 --> 00:40:15,900
confusing don't bother it can be fairly

00:40:08,309 --> 00:40:17,609
simple you set display grid you can

00:40:15,900 --> 00:40:21,650
define the sizes of your columns and

00:40:17,609 --> 00:40:27,359
your rows excuse me

00:40:21,650 --> 00:40:31,019
you can define a great gap if you need a

00:40:27,359 --> 00:40:36,209
reference percentages are relative to

00:40:31,019 --> 00:40:40,380
the parent size VW is relative to the

00:40:36,209 --> 00:40:41,880
window size and fraction is relative to

00:40:40,380 --> 00:40:46,320
remaining space

00:40:41,880 --> 00:40:50,400
so the new fraction unit in grid is used

00:40:46,320 --> 00:40:54,410
to divvy up what space remains it works

00:40:50,400 --> 00:40:57,150
very much the same way as flexbox

00:40:54,410 --> 00:40:59,130
something that is two fractions will

00:40:57,150 --> 00:41:03,750
just flex twice as much as something

00:40:59,130 --> 00:41:07,290
that's one fraction when you use one

00:41:03,750 --> 00:41:10,410
fraction it actually implies a min/max

00:41:07,290 --> 00:41:15,090
of a minimum of auto and a maximum of

00:41:10,410 --> 00:41:16,470
one fraction and if Auto is big this can

00:41:15,090 --> 00:41:18,180
end up taking up a lot of space and

00:41:16,470 --> 00:41:20,370
breaking your layout so it can be useful

00:41:18,180 --> 00:41:23,160
to set a smaller minimum where you're

00:41:20,370 --> 00:41:24,710
using fractions like min Max zero one

00:41:23,160 --> 00:41:28,070
fraction if you want to allow it to

00:41:24,710 --> 00:41:31,260
totally flex you get something like this

00:41:28,070 --> 00:41:33,690
grid lines one indexed they're also

00:41:31,260 --> 00:41:38,010
negative one indexed you can access them

00:41:33,690 --> 00:41:40,500
that way you get grid gaps between and

00:41:38,010 --> 00:41:42,900
you can place things like this very

00:41:40,500 --> 00:41:45,660
similar to using a grid system you just

00:41:42,900 --> 00:41:47,130
say what line do you want it to start at

00:41:45,660 --> 00:41:49,590
what line do you want it to end that you

00:41:47,130 --> 00:41:52,740
can also use the span syntax or the

00:41:49,590 --> 00:41:54,300
negative indexing and you're just

00:41:52,740 --> 00:41:58,680
placing your elements wherever you want

00:41:54,300 --> 00:42:02,070
them they can overlap they can go out of

00:41:58,680 --> 00:42:04,430
order they can go anywhere this is new

00:42:02,070 --> 00:42:06,690
this is not something we could do before

00:42:04,430 --> 00:42:08,880
but really you probably just want

00:42:06,690 --> 00:42:11,490
something like this maybe if you're

00:42:08,880 --> 00:42:15,300
boring which I am and you can actually

00:42:11,490 --> 00:42:17,580
create it with this ASCII art there you

00:42:15,300 --> 00:42:21,420
go header header nav main footer footer

00:42:17,580 --> 00:42:25,140
I drew a little ASCII drawing of my

00:42:21,420 --> 00:42:27,660
website and then I can just I define the

00:42:25,140 --> 00:42:32,100
sizes of each of those columns and rows

00:42:27,660 --> 00:42:34,020
and I can assign my header nav main and

00:42:32,100 --> 00:42:36,570
footer to the right regions and they

00:42:34,020 --> 00:42:37,980
fall into place it doesn't matter how

00:42:36,570 --> 00:42:41,370
they're ordered in the markup they're

00:42:37,980 --> 00:42:44,310
just gonna go there it's done and that's

00:42:41,370 --> 00:42:46,590
the entire layout use grids I mean like

00:42:44,310 --> 00:42:49,440
just use this you just click it together

00:42:46,590 --> 00:42:51,270
it can do all kinds of cool there's

00:42:49,440 --> 00:42:54,890
a website grid by example that even

00:42:51,270 --> 00:42:56,720
gives you like fallback code for base

00:42:54,890 --> 00:42:59,260
patterns it'll show you all the things

00:42:56,720 --> 00:43:02,420
grid can do and then simple fall backs

00:42:59,260 --> 00:43:05,180
it goes in two dimensions it's flexible

00:43:02,420 --> 00:43:08,660
in markup order nesting still matters

00:43:05,180 --> 00:43:10,430
that's okay we'll get there you can do

00:43:08,660 --> 00:43:12,260
these data-driven layouts we have this

00:43:10,430 --> 00:43:14,180
in production where we're passing in

00:43:12,260 --> 00:43:17,710
variables that tell something how to

00:43:14,180 --> 00:43:20,600
layout I wrote an article about this

00:43:17,710 --> 00:43:23,810
this graph is completely generated just

00:43:20,600 --> 00:43:26,470
using CSS and CSS variables to pass in

00:43:23,810 --> 00:43:32,920
live data and all of the colors and

00:43:26,470 --> 00:43:35,000
sizes are styled in CSS from the data so

00:43:32,920 --> 00:43:38,090
just make sure you wear your helmet

00:43:35,000 --> 00:43:41,300
because there's dragons but that's what

00:43:38,090 --> 00:43:43,630
fall back without supports is for you

00:43:41,300 --> 00:43:45,920
can put fallback code inside of that

00:43:43,630 --> 00:43:50,000
there like media queries but for

00:43:45,920 --> 00:43:51,800
features feature queries and so done

00:43:50,000 --> 00:43:53,780
Suzy three becomes a fallback plan you

00:43:51,800 --> 00:43:56,060
don't need a grid system as the main

00:43:53,780 --> 00:43:58,310
plan if you really have difficult math

00:43:56,060 --> 00:44:00,590
and your fallback great pull in

00:43:58,310 --> 00:44:02,690
something small but you probably don't

00:44:00,590 --> 00:44:04,760
need it just do it

00:44:02,690 --> 00:44:08,000
start with the grid fix the box model

00:44:04,760 --> 00:44:09,620
stay in the flow think dynamically

00:44:08,000 --> 00:44:11,750
relationships between things how are

00:44:09,620 --> 00:44:14,120
they going to flow remove the external

00:44:11,750 --> 00:44:16,300
gutter mask and then get creative

00:44:14,120 --> 00:44:18,110
because we're done with twelve columns

00:44:16,300 --> 00:44:25,969
thank you

00:44:18,110 --> 00:44:25,969

YouTube URL: https://www.youtube.com/watch?v=mDRfFEcj3-Q


