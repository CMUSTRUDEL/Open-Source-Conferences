Title: DjangoCon US 2017 - Tasks: you gotta know how to run 'em... by Filipe Ximenes
Publication date: 2017-09-08
Playlist: DjangoCon US 2017
Description: 
	DjangoCon US 2017 - Tasks: you gotta know how to run 'em, you gotta know how to safe' em by Filipe Ximenes

Web developers often find themselves in situations where server processing takes longer than a user would accept. One very common situation is when sending emails. Although simple and relatively quick task, it requires the communication with an external service. In this situation, itâ€™s not possible to foresee how long that service will take to answer. Not to mention the many unexpected situations that can arise, such as errors and bugs. The solution to this problem is to delegate long lasting tasks while responding quickly to the user. This is the point where we need async tasks. There are some tools available that can assist in this job. In this talk, you will learn about the concepts, caveats and best practices for when developing async tasks. For this, I will use Pythonâ€™s most popular tool for the task: Celery.

Rundown:

Setting the context

The architecture:
Brokers
Workers

Use cases:
External calls
Long computations
Data caching

Tools available

Celery:
Callbacks
Canvas
Logging
Retrying
Monitoring
Tests and debugging

This talk was presented at: https://2017.djangocon.us/talks/tasks-you-gotta-know-how-to-run-em-you-gotta-know-how-to-safe-em/

LINKS:
Follow Filipe Ximenes ðŸ‘‡
On Twitter: https://twitter.com/xima
Official homepage: https://www.vinta.com.br/blog/author/filipeximenes/

Follow DjangCon US ðŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ðŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:16,090
[Music]

00:00:13,710 --> 00:00:19,510
thank you all for coming

00:00:16,090 --> 00:00:24,340
I'll be talking to you about synchronous

00:00:19,510 --> 00:00:26,640
tasks most specifically about salary so

00:00:24,340 --> 00:00:28,900
yeah I'm Philippa chemainus

00:00:26,640 --> 00:00:33,160
Hema is my nickname and you can find me

00:00:28,900 --> 00:00:38,460
on twitter as Hema I'm from Recife

00:00:33,160 --> 00:00:42,100
that's a city in Brazil northeast and

00:00:38,460 --> 00:00:44,920
yeah and now work at drinka so I'm one

00:00:42,100 --> 00:00:47,800
of the partners there and we are service

00:00:44,920 --> 00:00:50,620
company from a zero most of our clients

00:00:47,800 --> 00:00:53,470
are from the US New York and San

00:00:50,620 --> 00:00:56,110
Francisco majorly and we have a team of

00:00:53,470 --> 00:01:00,850
eleven experience developers and work

00:00:56,110 --> 00:01:03,610
with django and react this is the link

00:01:00,850 --> 00:01:05,140
to our playbook you we can't we compiled

00:01:03,610 --> 00:01:07,270
there a lot of formation about how we

00:01:05,140 --> 00:01:12,460
work and the things we do so feel free

00:01:07,270 --> 00:01:15,579
to go there we also do a lot of open

00:01:12,460 --> 00:01:18,009
source so here are some projects you

00:01:15,579 --> 00:01:20,499
might be interested in there's our

00:01:18,009 --> 00:01:22,899
boiler plate it's a jungle react boiler

00:01:20,499 --> 00:01:25,270
plate we have generals permission

00:01:22,899 --> 00:01:29,139
tapioca and there is a few others on

00:01:25,270 --> 00:01:33,490
github so feel free to grab them alright

00:01:29,139 --> 00:01:35,889
so let's start with some context in

00:01:33,490 --> 00:01:38,079
broad terms the reason we use asynctasks

00:01:35,889 --> 00:01:42,700
is because we want to answer quickly to

00:01:38,079 --> 00:01:44,649
our users here are some reasons some

00:01:42,700 --> 00:01:47,799
situations where we might want to use

00:01:44,649 --> 00:01:49,659
the syntax tasks the simplest case would

00:01:47,799 --> 00:01:52,299
be when we want to delegate long last

00:01:49,659 --> 00:01:54,429
epi jobs but the most popular reason

00:01:52,299 --> 00:01:58,200
people use the sync tasks is probably

00:01:54,429 --> 00:02:00,490
just acute external care API calls

00:01:58,200 --> 00:02:03,609
whenever you depend on external service

00:02:00,490 --> 00:02:05,549
you no longer have control over how long

00:02:03,609 --> 00:02:08,020
things will take to be ready

00:02:05,549 --> 00:02:11,110
it might also be the case that we will

00:02:08,020 --> 00:02:15,090
never it will never be ready the system

00:02:11,110 --> 00:02:19,060
you rely on might be down or broken an

00:02:15,090 --> 00:02:22,500
algorithm to use the system test is to

00:02:19,060 --> 00:02:25,240
prepare for to prepare in cash values

00:02:22,500 --> 00:02:27,140
and you can also use them to spread both

00:02:25,240 --> 00:02:29,510
database assertions over

00:02:27,140 --> 00:02:33,320
this can help you not to DDoS your own

00:02:29,510 --> 00:02:36,430
database cron jobs are also another good

00:02:33,320 --> 00:02:38,930
example of things you can do with them

00:02:36,430 --> 00:02:41,990
let's talk a little little about how

00:02:38,930 --> 00:02:43,850
they work the problem of running a sync

00:02:41,990 --> 00:02:46,910
task can be easily mapped to the

00:02:43,850 --> 00:02:50,000
producer consumer problem producers

00:02:46,910 --> 00:02:51,830
place jobs in a quill consumers then

00:02:50,000 --> 00:02:54,230
check for the head of the head of the

00:02:51,830 --> 00:02:58,370
coil for awaiting jobs pick the first

00:02:54,230 --> 00:03:00,470
one in a secured there are many tools

00:02:58,370 --> 00:03:02,720
available to manage async testing Python

00:03:00,470 --> 00:03:05,000
at will seem to be getting a lot of

00:03:02,720 --> 00:03:09,350
tension lately but Terry is the all-time

00:03:05,000 --> 00:03:13,880
champion so far so let's talk about

00:03:09,350 --> 00:03:16,940
salary first of all let's introduce the

00:03:13,880 --> 00:03:19,970
correct name into our component from now

00:03:16,940 --> 00:03:22,330
on producers have been web nodes our

00:03:19,970 --> 00:03:25,760
quill will be called broker and

00:03:22,330 --> 00:03:27,410
consumers will be workers these workers

00:03:25,760 --> 00:03:32,420
can also place new tests in the pool

00:03:27,410 --> 00:03:36,049
they can also behave as producers now

00:03:32,420 --> 00:03:38,930
now that we have the basic components we

00:03:36,049 --> 00:03:41,870
can dig a little deeper the concept of a

00:03:38,930 --> 00:03:45,170
broker is very simple but how do you

00:03:41,870 --> 00:03:47,510
implement it in a computer system there

00:03:45,170 --> 00:03:49,190
are many ways to do this one of the

00:03:47,510 --> 00:03:52,100
simplest would be choose a text file

00:03:49,190 --> 00:03:53,810
that's can hold the second sub job

00:03:52,100 --> 00:03:56,390
descriptions should be executed

00:03:53,810 --> 00:03:59,360
therefore we do could use them as a

00:03:56,390 --> 00:04:01,220
broker of our system the problem with

00:03:59,360 --> 00:04:02,900
tax files is that they are not made for

00:04:01,220 --> 00:04:07,130
to handle real application problems such

00:04:02,900 --> 00:04:09,610
as network and concurrent access because

00:04:07,130 --> 00:04:12,019
of that we need something more robust

00:04:09,610 --> 00:04:14,209
secure database on the other hand are

00:04:12,019 --> 00:04:16,280
capable of running in a network and

00:04:14,209 --> 00:04:20,450
dealing with concurrent access the

00:04:16,280 --> 00:04:22,850
problem of them is they're too slow no

00:04:20,450 --> 00:04:25,190
sequel database on the other hand are

00:04:22,850 --> 00:04:26,470
quite fast but many times they lack

00:04:25,190 --> 00:04:29,300
readability

00:04:26,470 --> 00:04:30,590
so when building crews we should use

00:04:29,300 --> 00:04:33,890
fast reliable

00:04:30,590 --> 00:04:34,370
concurrent enable on - such as rabbit am

00:04:33,890 --> 00:04:37,780
equal

00:04:34,370 --> 00:04:37,780
Redis and ask us

00:04:38,750 --> 00:04:42,830
sorry has full support for have m equal

00:04:40,340 --> 00:04:44,390
and Redis although asked worse in

00:04:42,830 --> 00:04:48,890
zookeeper are also available they are

00:04:44,390 --> 00:04:51,890
offered with limited capabilities let's

00:04:48,890 --> 00:04:53,660
not talk about web and working nodes on

00:04:51,890 --> 00:04:56,180
the Left we have the code that should

00:04:53,660 --> 00:04:58,940
run at a synchronously that consonant on

00:04:56,180 --> 00:05:01,100
the work a node on the right

00:04:58,940 --> 00:05:04,160
we had code the code that place the

00:05:01,100 --> 00:05:07,820
request for a job to run this normally

00:05:04,160 --> 00:05:09,950
goes on web node in this example the web

00:05:07,820 --> 00:05:13,100
node placing that job in waits for the

00:05:09,950 --> 00:05:17,510
result to be available when the response

00:05:13,100 --> 00:05:20,720
is ready the result sprint now I have a

00:05:17,510 --> 00:05:23,150
jungle example in it the web node

00:05:20,720 --> 00:05:25,720
requests the web node is requesting the

00:05:23,150 --> 00:05:29,120
number of attendees of the event to be

00:05:25,720 --> 00:05:30,860
updated as synchronously nodes that we

00:05:29,120 --> 00:05:35,680
are passing the event objects to the

00:05:30,860 --> 00:05:37,970
test to the to the task don't do this

00:05:35,680 --> 00:05:41,120
objects get sterilized in store in the

00:05:37,970 --> 00:05:42,940
broker they are dendi sterilized before

00:05:41,120 --> 00:05:45,860
passed to the task

00:05:42,940 --> 00:05:47,720
passing complex objects such as modern

00:05:45,860 --> 00:05:50,750
instance as the parameter comes with a

00:05:47,720 --> 00:05:53,660
few problems first of all in node

00:05:50,750 --> 00:05:56,690
versions of salary because use it as the

00:05:53,660 --> 00:06:00,590
fossilization method as some of you know

00:05:56,690 --> 00:06:02,780
because i security vulnerabilities by

00:06:00,590 --> 00:06:04,040
alone by allowing complex objects you

00:06:02,780 --> 00:06:08,570
are increasing the chance of getting

00:06:04,040 --> 00:06:11,540
exposed latest versions of this of sorry

00:06:08,570 --> 00:06:16,280
address this by using json as default

00:06:11,540 --> 00:06:19,310
relation whetted another issue is that

00:06:16,280 --> 00:06:20,720
database object you pass might be my

00:06:19,310 --> 00:06:23,990
have change between the time you place

00:06:20,720 --> 00:06:26,600
the task in the time it gets accurate in

00:06:23,990 --> 00:06:30,590
that case you'll be working with with an

00:06:26,600 --> 00:06:32,210
outdated version of the object what you

00:06:30,590 --> 00:06:34,640
want to do is to pass the ID of the

00:06:32,210 --> 00:06:40,100
object and fetch a fresh copy from the

00:06:34,640 --> 00:06:43,700
database we've been calling a delay and

00:06:40,100 --> 00:06:44,950
get together all the time but they are

00:06:43,700 --> 00:06:47,630
two separate things

00:06:44,950 --> 00:06:50,780
delay place the tasks been secured by a

00:06:47,630 --> 00:06:52,260
worker and returns a promise that can be

00:06:50,780 --> 00:06:54,720
used to monitor at the

00:06:52,260 --> 00:06:58,920
the status and get the result when it's

00:06:54,720 --> 00:07:00,780
ready calling add-in that promise will

00:06:58,920 --> 00:07:05,100
block this occasion until the result of

00:07:00,780 --> 00:07:08,100
able the add task has has just ordered

00:07:05,100 --> 00:07:11,280
result some somewhere and then I and

00:07:08,100 --> 00:07:14,100
then whenever it finishes it will be

00:07:11,280 --> 00:07:16,980
accessible to the process that trigger

00:07:14,100 --> 00:07:18,570
the text the task this means that we

00:07:16,980 --> 00:07:20,540
missed some piece of the of the

00:07:18,570 --> 00:07:23,550
architecture

00:07:20,540 --> 00:07:26,760
besides the web broker and work a note

00:07:23,550 --> 00:07:29,850
now component there is also results back

00:07:26,760 --> 00:07:33,270
end the results back and will be used to

00:07:29,850 --> 00:07:34,920
store the test results in practice you

00:07:33,270 --> 00:07:37,790
can use the same instance you are using

00:07:34,920 --> 00:07:40,290
for the broker to also store results

00:07:37,790 --> 00:07:42,330
there are other technology besides the

00:07:40,290 --> 00:07:46,010
supportive broker options that you can

00:07:42,330 --> 00:07:48,120
use you in the results back in

00:07:46,010 --> 00:07:51,270
but there are some difference depending

00:07:48,120 --> 00:07:54,150
on what use in post Chris for example

00:07:51,270 --> 00:07:57,620
the gap metal will do polling to check

00:07:54,150 --> 00:08:00,750
the result when the result is ready

00:07:57,620 --> 00:08:06,690
another situation such as as for readies

00:08:00,750 --> 00:08:08,910
this is done by a pub/sub we will see

00:08:06,690 --> 00:08:13,920
how to as a cue tasks and how sorry

00:08:08,910 --> 00:08:18,600
works but a real hard problem about sync

00:08:13,920 --> 00:08:22,560
types tasks is handling errors how do we

00:08:18,600 --> 00:08:24,810
prepare for bugs and failures we are now

00:08:22,560 --> 00:08:27,960
going to go over two concepts there are

00:08:24,810 --> 00:08:29,190
essential for that matter if you are to

00:08:27,960 --> 00:08:34,700
learn something from this presentation

00:08:29,190 --> 00:08:37,550
learn them the first one is Ida policy

00:08:34,700 --> 00:08:39,660
our policy is the property of certain

00:08:37,550 --> 00:08:41,880
operations in mathematics and computer

00:08:39,660 --> 00:08:42,300
science that can be applied to multiple

00:08:41,880 --> 00:08:44,310
times

00:08:42,300 --> 00:08:46,380
keep applied multiple times without

00:08:44,310 --> 00:08:51,180
changing the result beyond the initial

00:08:46,380 --> 00:08:53,550
application with point y 0 and with fine

00:08:51,180 --> 00:08:57,240
by one our two examples of id+

00:08:53,550 --> 00:08:59,430
operations once you will find a number

00:08:57,240 --> 00:09:00,030
by zero no matter how many times you do

00:08:59,430 --> 00:09:04,170
it again

00:09:00,030 --> 00:09:05,670
there is always with 0 is the same for

00:09:04,170 --> 00:09:07,080
multiplying by one no man

00:09:05,670 --> 00:09:11,760
how many times multiply the number by

00:09:07,080 --> 00:09:15,030
one the result will never change let's

00:09:11,760 --> 00:09:18,560
do the same for HTTP which of these

00:09:15,030 --> 00:09:18,560
methods are important

00:09:20,510 --> 00:09:28,010
garrier resource should not produce

00:09:23,790 --> 00:09:32,550
changes in it so get is that important

00:09:28,010 --> 00:09:34,440
post is used great resource well at

00:09:32,550 --> 00:09:39,720
least that you what used to do before

00:09:34,440 --> 00:09:41,430
graph growth so so every post requires

00:09:39,720 --> 00:09:43,890
producer changed instead of the

00:09:41,430 --> 00:09:46,860
application before it's not important

00:09:43,890 --> 00:09:48,570
you cannot expect subsequent post

00:09:46,860 --> 00:09:52,320
request to keep the application state

00:09:48,570 --> 00:09:55,170
the same puts a great example of adipati

00:09:52,320 --> 00:09:58,470
operation the first put request to make

00:09:55,170 --> 00:10:00,210
produces change to the state but if you

00:09:58,470 --> 00:10:03,780
keep repeating the same request no

00:10:00,210 --> 00:10:06,450
changes are expected there is a bit

00:10:03,780 --> 00:10:08,790
deletes a bit of a gray area from the

00:10:06,450 --> 00:10:13,290
application state perspective it is an

00:10:08,790 --> 00:10:15,600
opponent from the response respected the

00:10:13,290 --> 00:10:19,020
first call my return 12 for well the

00:10:15,600 --> 00:10:23,310
next one might return 404 so it depends

00:10:19,020 --> 00:10:26,760
on how you view it the second concept is

00:10:23,310 --> 00:10:28,650
atomicity an atomic operation is an

00:10:26,760 --> 00:10:31,590
indivisible and reducible series of

00:10:28,650 --> 00:10:35,040
operations such that either all occur on

00:10:31,590 --> 00:10:38,010
non occur despite its being commonly

00:10:35,040 --> 00:10:39,210
received to database operations the

00:10:38,010 --> 00:10:41,010
concept of

00:10:39,210 --> 00:10:45,900
atomistic can also be applied in other

00:10:41,010 --> 00:10:48,360
context in the first box we have a test

00:10:45,900 --> 00:10:51,390
that such the user starts to updated

00:10:48,360 --> 00:10:54,750
saves it makes a request Facebook and

00:10:51,390 --> 00:10:58,260
only then updates the user name this is

00:10:54,750 --> 00:10:59,880
not atomic if the request fails we are

00:10:58,260 --> 00:11:04,170
going to have inconsistent state in the

00:10:59,880 --> 00:11:06,240
database the right way to do it did you

00:11:04,170 --> 00:11:08,490
first make the request then update the

00:11:06,240 --> 00:11:13,680
user status and user name at the same

00:11:08,490 --> 00:11:16,500
time another way to improve item st is

00:11:13,680 --> 00:11:18,899
to write short tasks in the first

00:11:16,500 --> 00:11:22,139
example we are iterating in sending

00:11:18,899 --> 00:11:25,319
or users in a single task if one of them

00:11:22,139 --> 00:11:28,350
fails is that does cool stop and part of

00:11:25,319 --> 00:11:31,139
a your users will see the email and the

00:11:28,350 --> 00:11:33,720
other part will not in the second

00:11:31,139 --> 00:11:36,749
example we trade of a user's again but

00:11:33,720 --> 00:11:39,119
delegate descend into another task if

00:11:36,749 --> 00:11:43,199
one of the emails fail you are fake it

00:11:39,119 --> 00:11:45,119
only you will affect only one user the

00:11:43,199 --> 00:11:48,990
other advantage is that it's easy to

00:11:45,119 --> 00:11:51,209
rerun a task when it's failed the orders

00:11:48,990 --> 00:11:54,269
an overhead on creating in choice text

00:11:51,209 --> 00:11:56,639
tasks may get them to fine grain may

00:11:54,269 --> 00:12:01,379
harm performance so keep keeping in mind

00:11:56,639 --> 00:12:03,480
when you're designing so I just told you

00:12:01,379 --> 00:12:06,720
about how you can hit try to ask that

00:12:03,480 --> 00:12:08,429
fail a fairly common situation is for

00:12:06,720 --> 00:12:11,420
test to fail while interacting with

00:12:08,429 --> 00:12:14,490
external systems they are not available

00:12:11,420 --> 00:12:15,689
so I provides a retry method that can be

00:12:14,490 --> 00:12:18,689
called inside a desk

00:12:15,689 --> 00:12:22,050
this will make it try again to execute a

00:12:18,689 --> 00:12:24,749
task in the example we are fetching the

00:12:22,050 --> 00:12:30,660
user likes from Facebook if it fails we

00:12:24,749 --> 00:12:32,519
wait 10 seconds in retry if your tests

00:12:30,660 --> 00:12:33,929
are in the important anatomic you should

00:12:32,519 --> 00:12:36,649
have no problems currently try as many

00:12:33,929 --> 00:12:39,740
times as you need until the test to sit

00:12:36,649 --> 00:12:42,120
if they are not we try we produce

00:12:39,740 --> 00:12:47,220
inconsistent states or can end up

00:12:42,120 --> 00:12:51,480
spamming your users there are some other

00:12:47,220 --> 00:12:53,639
caveats retrying in the previous example

00:12:51,480 --> 00:12:57,509
the request to Facebook might be failing

00:12:53,639 --> 00:12:59,759
because the Facebook is under attack so

00:12:57,509 --> 00:13:01,759
it might be a good idea to back off and

00:12:59,759 --> 00:13:04,999
give it some space recover

00:13:01,759 --> 00:13:07,439
you shouldn't kick a man on the ground

00:13:04,999 --> 00:13:08,999
another good idea is to make the

00:13:07,439 --> 00:13:12,059
interval between retries grow

00:13:08,999 --> 00:13:14,189
exponentially this will increase the

00:13:12,059 --> 00:13:18,179
chances of things getting back to normal

00:13:14,189 --> 00:13:20,009
before you next try also throwing

00:13:18,179 --> 00:13:22,410
another random factor

00:13:20,009 --> 00:13:25,259
imagine having 100 tasks failing in

00:13:22,410 --> 00:13:27,029
retry and at the same time the overflow

00:13:25,259 --> 00:13:28,889
might actually be the reason why the

00:13:27,029 --> 00:13:31,519
system we were interacting with is now

00:13:28,889 --> 00:13:31,519
in the first place

00:13:32,120 --> 00:13:36,829
alright this is something I actually

00:13:34,730 --> 00:13:39,350
learned about the first day of the

00:13:36,829 --> 00:13:43,999
conference I was chatting with Dave bomb

00:13:39,350 --> 00:13:45,920
goat so if you use a sari for you can

00:13:43,999 --> 00:13:48,079
actually cut down a few lines of code by

00:13:45,920 --> 00:13:49,249
passing a out retry for parameter you

00:13:48,079 --> 00:13:51,499
can do the same thing that I showed

00:13:49,249 --> 00:13:55,519
before just using the I'll retry for in

00:13:51,499 --> 00:13:58,309
passenger the classes the error classes

00:13:55,519 --> 00:14:00,559
I also learned that they've just got a

00:13:58,309 --> 00:14:03,319
pull request approved for every try back

00:14:00,559 --> 00:14:05,059
off parameter in the next solid release

00:14:03,319 --> 00:14:07,639
we will be able to use retry back off

00:14:05,059 --> 00:14:09,620
along with out retry for parameter and

00:14:07,639 --> 00:14:16,309
get exponential back-off out of the box

00:14:09,620 --> 00:14:18,230
so thank you I'm are common issue our

00:14:16,309 --> 00:14:20,149
tasks that take too long to the cube

00:14:18,230 --> 00:14:22,939
because they are that there's a book

00:14:20,149 --> 00:14:25,910
there or we have a problem with network

00:14:22,939 --> 00:14:27,470
latency to present to prevent this from

00:14:25,910 --> 00:14:30,170
from having the performance of your

00:14:27,470 --> 00:14:36,069
application you should you can set a

00:14:30,170 --> 00:14:38,809
test time limit sorry we'll put the task

00:14:36,069 --> 00:14:41,420
sorry we interrupt the task if it takes

00:14:38,809 --> 00:14:43,519
longer than the time is set in case you

00:14:41,420 --> 00:14:46,399
need to do some recovering before the

00:14:43,519 --> 00:14:49,429
test interrupted also set tests off time

00:14:46,399 --> 00:14:52,040
limit when they're runs off sorry worry

00:14:49,429 --> 00:14:55,809
is soft time limit exception and you can

00:14:52,040 --> 00:14:58,429
do some preparation before it has killed

00:14:55,809 --> 00:15:01,040
the axe late surfing is also something

00:14:58,429 --> 00:15:04,790
you should know about why the fall sorry

00:15:01,040 --> 00:15:08,509
first makes the call makes the marks the

00:15:04,790 --> 00:15:10,459
task has ran and then executed this

00:15:08,509 --> 00:15:15,620
prevents the task from running twice in

00:15:10,459 --> 00:15:17,749
case of an unexpected shutdown having

00:15:15,620 --> 00:15:19,639
that important anatomic task will give

00:15:17,749 --> 00:15:22,939
you the ability to turn on axe late

00:15:19,639 --> 00:15:27,459
surfing by doing so sorry what Immokalee

00:15:22,939 --> 00:15:30,620
rerun the interval task once recovers

00:15:27,459 --> 00:15:33,559
we've talked a lot a lot about how to

00:15:30,620 --> 00:15:38,329
actively handle errors but we we all

00:15:33,559 --> 00:15:40,160
know that bugs are net navigable bugs in

00:15:38,329 --> 00:15:43,429
our publication are generally easy to

00:15:40,160 --> 00:15:45,580
spot if something breaks your user will

00:15:43,429 --> 00:15:46,840
get a 500-page and they

00:15:45,580 --> 00:15:50,470
find a way to let you know that

00:15:46,840 --> 00:15:52,890
something went wrong for them for a sink

00:15:50,470 --> 00:15:55,840
test is not always the case

00:15:52,890 --> 00:15:58,690
in administration's we'll be dealing

00:15:55,840 --> 00:16:01,540
with things that do not directly affect

00:15:58,690 --> 00:16:04,060
the user experience this means that you

00:16:01,540 --> 00:16:06,940
should be extra careful with monitoring

00:16:04,060 --> 00:16:09,430
tasks more injury will help you to

00:16:06,940 --> 00:16:13,660
capture errors early and not when they

00:16:09,430 --> 00:16:17,710
are already too late starting from the

00:16:13,660 --> 00:16:20,380
basics logging make sure you log as much

00:16:17,710 --> 00:16:21,340
as possible this will help you tracing

00:16:20,380 --> 00:16:27,280
what went wrong

00:16:21,340 --> 00:16:29,080
when bugs arise as usual be careful not

00:16:27,280 --> 00:16:33,520
to expose sensitive information logs

00:16:29,080 --> 00:16:34,870
this is a security threat logging is a

00:16:33,520 --> 00:16:37,300
general advice for any kind of

00:16:34,870 --> 00:16:39,880
application with special important for

00:16:37,300 --> 00:16:44,710
tasks as they have no user interface and

00:16:39,880 --> 00:16:47,070
and the book in the end is harder make

00:16:44,710 --> 00:16:50,410
sure people get not fireman things fail

00:16:47,070 --> 00:16:52,360
- such as sentry and update can be

00:16:50,410 --> 00:16:55,510
easily integrated to ongoing sorry and

00:16:52,360 --> 00:16:57,880
we'll help you monitoring errors you can

00:16:55,510 --> 00:16:59,890
also integrate them which is like so you

00:16:57,880 --> 00:17:03,550
get not fire every time something goes

00:16:59,890 --> 00:17:05,470
wrong make sure you fine-tune their wall

00:17:03,550 --> 00:17:07,660
produced notifications too many false

00:17:05,470 --> 00:17:10,000
positives and your team would stop

00:17:07,660 --> 00:17:13,330
paying attention and let actual world

00:17:10,000 --> 00:17:16,420
pass a note said have a well-defined

00:17:13,330 --> 00:17:18,610
process to do if those errors make sure

00:17:16,420 --> 00:17:23,620
they included in backlog and paralyzing

00:17:18,610 --> 00:17:26,470
a colony floor is a twofer live monitor

00:17:23,620 --> 00:17:29,350
inside tasks it allows you to inspect

00:17:26,470 --> 00:17:32,260
which tags are running and keep trace to

00:17:29,350 --> 00:17:33,850
keep track of the secure ones it's a

00:17:32,260 --> 00:17:39,070
standalone application and definitely

00:17:33,850 --> 00:17:41,110
worth using in bigger projects general

00:17:39,070 --> 00:17:44,050
solid bits that is something that just

00:17:41,110 --> 00:17:47,020
came out we didn't talk much talk much

00:17:44,050 --> 00:17:50,650
about scheduled tasks but they are not

00:17:47,020 --> 00:17:53,860
trivial to monitor and test the crontab

00:17:50,650 --> 00:17:57,370
api is sometimes confusing and my lead

00:17:53,860 --> 00:17:59,080
to mistakes and this is also a project

00:17:57,370 --> 00:18:01,149
from vinter

00:17:59,080 --> 00:18:04,600
general sorry--but status will add a

00:18:01,149 --> 00:18:06,610
page to the jungle team interface in it

00:18:04,600 --> 00:18:09,639
you'll be able to see all scheduled

00:18:06,610 --> 00:18:12,279
tasks along with the next eight eta this

00:18:09,639 --> 00:18:14,649
will give you a limit this will give you

00:18:12,279 --> 00:18:17,159
a little more confidence that you got

00:18:14,649 --> 00:18:17,159
things right

00:18:17,460 --> 00:18:22,840
testing the bugging tasks can be harder

00:18:20,950 --> 00:18:24,970
than what we are used to in normal web

00:18:22,840 --> 00:18:28,019
applications but there are a few things

00:18:24,970 --> 00:18:30,669
you can do to mitigate this

00:18:28,019 --> 00:18:33,149
that's our Sivir is a something that

00:18:30,669 --> 00:18:36,879
comes very handy for testing in a buggy

00:18:33,149 --> 00:18:39,999
this goes from the cell resource if you

00:18:36,879 --> 00:18:42,489
had the task I was eager eager staffing

00:18:39,999 --> 00:18:44,559
set to true whenever you call delay or

00:18:42,489 --> 00:18:47,190
apply a sync you will run the test

00:18:44,559 --> 00:18:49,809
synchronously instead of delegating it

00:18:47,190 --> 00:18:51,429
this will simplify the bugging in local

00:18:49,809 --> 00:18:57,850
environments and facilitate automated

00:18:51,429 --> 00:19:00,609
testing this last thing is actually more

00:18:57,850 --> 00:19:03,999
of a fun fact so turns out there is a

00:19:00,609 --> 00:19:05,830
PDB for salary our DB will allow you to

00:19:03,999 --> 00:19:09,220
town at your breaking point in life

00:19:05,830 --> 00:19:11,259
debug it to be honest and never use it

00:19:09,220 --> 00:19:13,629
and I'm not really sure what situation

00:19:11,259 --> 00:19:18,100
you would use it but I'm sure someone

00:19:13,629 --> 00:19:21,730
will find it handy alright so time to

00:19:18,100 --> 00:19:24,190
recap first of all don't use complex

00:19:21,730 --> 00:19:25,950
objects in tile in task parameters this

00:19:24,190 --> 00:19:29,350
will help you avoid insecurity and

00:19:25,950 --> 00:19:32,830
consistent issues in consistency issues

00:19:29,350 --> 00:19:36,399
right I deposit atomic tasks you want to

00:19:32,830 --> 00:19:40,149
be able to freely rerun your tasks back

00:19:36,399 --> 00:19:43,480
off when we try our systems may may need

00:19:40,149 --> 00:19:47,470
some space to recover make extensive use

00:19:43,480 --> 00:19:49,210
of military tombs touched our hearts the

00:19:47,470 --> 00:19:53,470
bug collect as much information as you

00:19:49,210 --> 00:19:56,230
can get not 5 when something fails but

00:19:53,470 --> 00:19:59,980
be careful to only modify when something

00:19:56,230 --> 00:20:02,309
important happens and last use tasks

00:19:59,980 --> 00:20:05,109
always eager for testing and debugging

00:20:02,309 --> 00:20:06,789
and the last thing I want to show you is

00:20:05,109 --> 00:20:10,149
something that I've building process of

00:20:06,789 --> 00:20:12,519
making this this talk so tasks

00:20:10,149 --> 00:20:13,140
Sarita's checklist has a compilation of

00:20:12,519 --> 00:20:16,200
the things with

00:20:13,140 --> 00:20:18,960
what about you can actually click for

00:20:16,200 --> 00:20:21,840
the the items as you verify for are

00:20:18,960 --> 00:20:23,160
missing your tasks and it's also open

00:20:21,840 --> 00:20:27,510
sourced so you are very welcome to

00:20:23,160 --> 00:20:40,940
contribute and improve it that's it

00:20:27,510 --> 00:20:44,970
thank you I've got some the links to the

00:20:40,940 --> 00:20:49,410
to these slides are there so it's /

00:20:44,970 --> 00:20:52,110
winter 2017 there is law also the link

00:20:49,410 --> 00:20:55,980
to sorry test check Liske my contact

00:20:52,110 --> 00:20:58,440
information and we have a newsletter if

00:20:55,980 --> 00:21:01,320
you want to sign up to this it's the

00:20:58,440 --> 00:21:03,510
links there thank you thank you so much

00:21:01,320 --> 00:21:05,700
Felipe if you have questions for him

00:21:03,510 --> 00:21:07,140
definitely chat with him afterwards or

00:21:05,700 --> 00:21:09,350
during the sprints they'll be happy to

00:21:07,140 --> 00:21:12,120
work together all right thank you and

00:21:09,350 --> 00:21:14,680
we're about to have closing so hang out

00:21:12,120 --> 00:21:21,929
closing happens here

00:21:14,680 --> 00:21:21,929

YouTube URL: https://www.youtube.com/watch?v=XjzyOyLbvN8


