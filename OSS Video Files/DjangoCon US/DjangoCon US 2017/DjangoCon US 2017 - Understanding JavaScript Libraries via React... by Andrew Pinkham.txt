Title: DjangoCon US 2017 - Understanding JavaScript Libraries via React... by Andrew Pinkham
Publication date: 2017-09-08
Playlist: DjangoCon US 2017
Description: 
	DjangoCon US 2017 - Understanding JavaScript Libraries via React and the React Ecosystem by Andrew Pinkham

After an initial foray into JavaScript in 2011, I actively avoided learning or using JavaScript. Then, in early 2017, JamBon Software took on a project to build a bleeding-edge JavaScript web app in Facebookâ€™s React. Suddenly, I did not have a choice and had to learn JavaScriptâ€”versions 5 and 6â€”as well as Facebookâ€™s React library with the entire JavaScript and React ecosystems behind it.

This talk will give developers a framework to analyze the overwhelming number of tools in the JavaScript world by categorizing the types of problems currently being solved. By the end, youâ€™ll walk away with a mental framework of the solutions being built today.

We will start by looking at a history of JavaScript. This will allow us to discuss problems that developers need to solve in browsers when interacting with APIs. With a full understanding of the problems, weâ€™ll turn our attention to discussing the types of solutions available and quickly discuss how different libraries like Angular, Vue, Inferno, and Cycle implement these solutions.

The talk will then explain how to use React in tandem with Redux to build a tiny website. We will demonstrate how to use tools like Webpack, fetch, Promises, and thunks to enhance React to solve the problems previously discussed.

Finally, weâ€™ll end with a review of the material, and consider some of the topics being looked at by Facebook, Google and Microsoft.

Outline:

Libraries as Systems to Concretize Abstract Thought
Understanding the Problem
Node, NPM, and Yarn
DOM-Focused JavaScript Libraries
Understanding React
Enhancing React
  Converting ES6 with Babel or BublÃ©
  Aside: Handling types with Immutable.js, Typescript, and Tern
  Handling Modules with Webpack or Rollup
  Polyfills for Behavior
  Replacing XMLHttpRequest with fetch
  Using Promises and thunks for asynchronous actions
  React-Router for Single-Page Apps
  Redux-Forms for User Input
  Linting with ESLint
  Testing in 2 minutes
React with Django
Conclusion
  Review of Problems
  Review of Solution Types
  Break Down: Modules vs Syntax Transformations
  Performance with InfernoJS
  Future JS
  Photo of 

This talk was presented at: https://2017.djangocon.us/talks/understanding-javascript-libraries-via-react-and-the-react-ecosystem/

LINKS:
Follow Carlos Martinez ğŸ‘‡
On Twitter: https://twitter.com/carlosmart626
Official homepage: https://carlosmart.co

Follow DjangCon US ğŸ‘‡
https://twitter.com/djangocon

Follow DEFNA ğŸ‘‡
https://twitter.com/defnado
https://www.defna.org/
Captions: 
	00:00:00,000 --> 00:00:16,800
[Music]

00:00:13,490 --> 00:00:19,680
so hi welcome to the last talk of Django

00:00:16,800 --> 00:00:22,500
con u.s. 2017 you made it you survived

00:00:19,680 --> 00:00:24,420
almost um thank you for coming to listen

00:00:22,500 --> 00:00:27,029
to me talk and the topic for today is

00:00:24,420 --> 00:00:30,450
understanding JavaScript via react and

00:00:27,029 --> 00:00:32,430
the react ecosystem so my name is Andrew

00:00:30,450 --> 00:00:35,160
Pinkham I am probably best known as the

00:00:32,430 --> 00:00:36,750
author of Django Unleashed I'm currently

00:00:35,160 --> 00:00:39,690
working on a video series based on the

00:00:36,750 --> 00:00:41,880
same material with Pearson and hopefully

00:00:39,690 --> 00:00:44,850
a second edition for Django 111 because

00:00:41,880 --> 00:00:46,649
the book is in Django 1.8 um by day I'm

00:00:44,850 --> 00:00:48,960
a software consultant with jambon

00:00:46,649 --> 00:00:51,059
software we're currently working with a

00:00:48,960 --> 00:00:52,739
client on machine learning over high

00:00:51,059 --> 00:00:55,019
resolution satellite imagery which is

00:00:52,739 --> 00:00:56,579
super interesting a little bit outside

00:00:55,019 --> 00:00:57,899
of what I'm used to doing but it's nice

00:00:56,579 --> 00:00:59,909
to get away from Django every once in a

00:00:57,899 --> 00:01:01,769
while one of the nice things about being

00:00:59,909 --> 00:01:03,030
self directed as a consultant is you get

00:01:01,769 --> 00:01:04,800
to work on some really really cool

00:01:03,030 --> 00:01:06,150
projects so at the beginning of the year

00:01:04,800 --> 00:01:08,760
I started working with Russell keith

00:01:06,150 --> 00:01:10,140
mcgee on cert cycle cert cycle is

00:01:08,760 --> 00:01:13,050
basically a way for automatically

00:01:10,140 --> 00:01:15,000
installing and monitoring certificates

00:01:13,050 --> 00:01:16,740
in the cloud specifically Amazon and

00:01:15,000 --> 00:01:19,200
Asher we're gonna be looking for beta

00:01:16,740 --> 00:01:20,940
testers before the end of the year so if

00:01:19,200 --> 00:01:23,550
that sounds even remotely interesting

00:01:20,940 --> 00:01:25,640
please come talk to me but today you're

00:01:23,550 --> 00:01:28,920
here to talk you're here to hear me talk

00:01:25,640 --> 00:01:30,780
about JavaScript I have someone mention

00:01:28,920 --> 00:01:32,910
oh you're you're doing to react talk

00:01:30,780 --> 00:01:34,350
right oh no it's not the react talk it's

00:01:32,910 --> 00:01:35,550
the the JavaScript talk well that's a

00:01:34,350 --> 00:01:38,060
little bit of a bait-and-switch there

00:01:35,550 --> 00:01:40,800
I'm really sorry if you showed up here

00:01:38,060 --> 00:01:42,810
expecting to hear mostly about react

00:01:40,800 --> 00:01:44,430
this is mostly going to be about what I

00:01:42,810 --> 00:01:47,280
learned about JavaScript while

00:01:44,430 --> 00:01:50,310
programming a react website um

00:01:47,280 --> 00:01:52,890
this is targeted at devs who are not

00:01:50,310 --> 00:01:55,260
particularly familiar with JavaScript so

00:01:52,890 --> 00:01:56,640
if you use NPM and yarn I'm really not

00:01:55,260 --> 00:01:59,280
going to hold it against you if you get

00:01:56,640 --> 00:02:01,050
up and you leave no worries the talk

00:01:59,280 --> 00:02:03,420
hotline is going to start with how did I

00:02:01,050 --> 00:02:05,760
get here right like I mostly Python and

00:02:03,420 --> 00:02:07,860
Django and suddenly I'm doing JavaScript

00:02:05,760 --> 00:02:09,269
like what forces me into using this

00:02:07,860 --> 00:02:11,400
language that I have desperately

00:02:09,269 --> 00:02:13,680
desperately tried to avoid we're gonna

00:02:11,400 --> 00:02:15,930
jump into sort of a breeze a brief

00:02:13,680 --> 00:02:17,910
history of the web men were talking

00:02:15,930 --> 00:02:20,220
about javascript the web frameworks what

00:02:17,910 --> 00:02:23,129
the problem is and then finally react

00:02:20,220 --> 00:02:25,500
and sort of reacts ecosystem and all the

00:02:23,129 --> 00:02:29,600
things that we had to deal with there

00:02:25,500 --> 00:02:31,770
this talk is fundamentally incomplete

00:02:29,600 --> 00:02:33,870
and I really want to take a moment to

00:02:31,770 --> 00:02:36,330
focus on this because I'm taking a year

00:02:33,870 --> 00:02:39,090
of experience and I'm condensing it into

00:02:36,330 --> 00:02:41,160
20 minutes I simply don't have time to

00:02:39,090 --> 00:02:43,380
go into all of the details what I'm

00:02:41,160 --> 00:02:45,360
hoping for here is to give you all the

00:02:43,380 --> 00:02:48,120
people who are sort of beginning on

00:02:45,360 --> 00:02:49,770
their journey and don't have a map so

00:02:48,120 --> 00:02:51,750
I'm not gonna give you a very good map

00:02:49,770 --> 00:02:53,280
right it's sort of a medieval map and

00:02:51,750 --> 00:02:55,560
you know here be dragons and there's an

00:02:53,280 --> 00:02:57,270
island kind of off over this way but

00:02:55,560 --> 00:03:03,150
hopefully it's better than starting with

00:02:57,270 --> 00:03:05,100
nothing at all so let's talk about how I

00:03:03,150 --> 00:03:07,980
got here what what started the journey

00:03:05,100 --> 00:03:09,420
well in early 2016 a client asked me if

00:03:07,980 --> 00:03:12,270
I knew Django and I kind of said you

00:03:09,420 --> 00:03:15,330
know I have an inkling of how that thing

00:03:12,270 --> 00:03:17,280
works um and they said well that's great

00:03:15,330 --> 00:03:19,170
we'd like you to program JavaScript on

00:03:17,280 --> 00:03:21,630
top of the Django app and I said no no

00:03:19,170 --> 00:03:24,060
no no that's not how that works and they

00:03:21,630 --> 00:03:25,290
said no no no no please do it and I

00:03:24,060 --> 00:03:27,480
believe it to your imagination

00:03:25,290 --> 00:03:29,640
to guess how the rest of that project

00:03:27,480 --> 00:03:31,350
went but so as I'm starting this project

00:03:29,640 --> 00:03:34,380
this is the to-do list that I set out

00:03:31,350 --> 00:03:35,940
for myself you know oh learn JavaScript

00:03:34,380 --> 00:03:39,150
figure out how it works and then go

00:03:35,940 --> 00:03:41,820
build it yeah I forgot the most

00:03:39,150 --> 00:03:44,730
important part and the most important

00:03:41,820 --> 00:03:45,780
part is I didn't understand the problem

00:03:44,730 --> 00:03:48,150
right they didn't understand

00:03:45,780 --> 00:03:50,489
fundamentally what the problem that I

00:03:48,150 --> 00:03:52,680
was trying to solve with a framework and

00:03:50,489 --> 00:03:54,870
with JavaScript and this is not a

00:03:52,680 --> 00:03:56,790
commentary about JavaScript itself right

00:03:54,870 --> 00:03:58,890
this happens with Django people go oh

00:03:56,790 --> 00:04:01,950
yes I need to build a website which I

00:03:58,890 --> 00:04:05,100
didn't use oh you should use Django what

00:04:01,950 --> 00:04:07,400
just happened right what's actually

00:04:05,100 --> 00:04:09,780
happened is is a fairly implicit

00:04:07,400 --> 00:04:12,390
conversation right someone has actually

00:04:09,780 --> 00:04:14,310
asked the question hey I need to build a

00:04:12,390 --> 00:04:17,160
software application that communicates

00:04:14,310 --> 00:04:19,739
with other computers over HTTP and then

00:04:17,160 --> 00:04:21,269
it's going to serve up HTML and CSS you

00:04:19,739 --> 00:04:22,830
know do you know of any tools that do

00:04:21,269 --> 00:04:25,080
that oh yeah Django handles all of that

00:04:22,830 --> 00:04:26,460
you should go use Django and so I was

00:04:25,080 --> 00:04:27,960
asking this question like hey how do I

00:04:26,460 --> 00:04:30,870
build a dynamic front-end that is going

00:04:27,960 --> 00:04:32,970
to communicate with an API oh oh you

00:04:30,870 --> 00:04:35,880
should use all of these tools well wait

00:04:32,970 --> 00:04:38,760
hold on what am I actually asking when I

00:04:35,880 --> 00:04:39,120
ask that question what is fundamentally

00:04:38,760 --> 00:04:42,690
the

00:04:39,120 --> 00:04:45,419
problem that I am trying to solve like

00:04:42,690 --> 00:04:46,919
many things the problem he comes really

00:04:45,419 --> 00:04:49,860
really clear if you start with history

00:04:46,919 --> 00:04:52,169
so let's talk about HTML HTML first

00:04:49,860 --> 00:04:54,030
appears in 1991 and it is immediately

00:04:52,169 --> 00:04:56,490
rolled out into the first browser called

00:04:54,030 --> 00:04:58,169
mosaic and then quickly implemented in

00:04:56,490 --> 00:05:00,780
things like Netscape Navigator and

00:04:58,169 --> 00:05:03,060
Internet Explorer but lovely it's all

00:05:00,780 --> 00:05:04,970
slightly different implementations just

00:05:03,060 --> 00:05:07,800
to like really mess with you

00:05:04,970 --> 00:05:11,010
hTML is originally intended as a way of

00:05:07,800 --> 00:05:12,449
sharing scientific documents right you

00:05:11,010 --> 00:05:14,729
want to go ahead and share your

00:05:12,449 --> 00:05:16,620
scientific research at CERN so you've

00:05:14,729 --> 00:05:18,510
got the content but you also have all

00:05:16,620 --> 00:05:20,669
the structure of the document this is a

00:05:18,510 --> 00:05:24,539
title these are the authors this is the

00:05:20,669 --> 00:05:26,280
abstract etc etc etc but that introduces

00:05:24,539 --> 00:05:28,199
a sort of duality here right there is

00:05:26,280 --> 00:05:30,780
content and structure when you're

00:05:28,199 --> 00:05:32,880
dealing with HTML and I'm gonna stretch

00:05:30,780 --> 00:05:34,949
this analogy if it's a little bit like

00:05:32,880 --> 00:05:37,020
model-view-controller then the content

00:05:34,949 --> 00:05:38,669
is a little bit like the model and the

00:05:37,020 --> 00:05:39,750
structure of the document is a little

00:05:38,669 --> 00:05:43,110
bit like the view I realize I'm

00:05:39,750 --> 00:05:45,349
stretching this umm I'm not stretching

00:05:43,110 --> 00:05:48,599
it too much though right because CSS

00:05:45,349 --> 00:05:50,550
doesn't actually get talked about until

00:05:48,599 --> 00:05:52,830
1994 the first spec doesn't exist until

00:05:50,550 --> 00:05:53,820
you know the very end of 1996 and so the

00:05:52,830 --> 00:05:57,720
first time that you're really going to

00:05:53,820 --> 00:06:01,620
see my CSS used is in 1997 which is six

00:05:57,720 --> 00:06:03,500
years after HTML really comes to be so

00:06:01,620 --> 00:06:08,280
that's HTML let's talk about javascript

00:06:03,500 --> 00:06:12,449
javascript is built in ten days

00:06:08,280 --> 00:06:14,099
it's a glue language in 1995 and it's

00:06:12,449 --> 00:06:16,020
effectively this sort of collaboration

00:06:14,099 --> 00:06:18,840
between Sun and Netscape because they're

00:06:16,020 --> 00:06:21,479
freaking out about Internet Explorer and

00:06:18,840 --> 00:06:23,880
so they hired this guy Brendan Eich and

00:06:21,479 --> 00:06:25,410
he wants to put scheme in the browser

00:06:23,880 --> 00:06:29,220
the problem is is that because of

00:06:25,410 --> 00:06:31,560
politics they want to use Java they want

00:06:29,220 --> 00:06:32,880
to reference Suns Java so they're gonna

00:06:31,560 --> 00:06:34,169
call it JavaScript and they need

00:06:32,880 --> 00:06:36,360
something that looks like

00:06:34,169 --> 00:06:40,260
object-oriented programming so he goes

00:06:36,360 --> 00:06:41,940
and he uses prototypal inheritance taken

00:06:40,260 --> 00:06:47,010
from a programming language called self

00:06:41,940 --> 00:06:50,820
which looks nothing like Java uhm

00:06:47,010 --> 00:06:53,280
it's important the the reason they're

00:06:50,820 --> 00:06:55,620
building this is because they want to

00:06:53,280 --> 00:06:57,780
manipulate the Dom right the the real

00:06:55,620 --> 00:06:59,820
reason that they're putting together is

00:06:57,780 --> 00:07:02,930
they want to be able to change the

00:06:59,820 --> 00:07:05,700
content in the structure in the HTML

00:07:02,930 --> 00:07:07,560
it's also worth noting that this has

00:07:05,700 --> 00:07:09,000
changed over time right the JavaScript

00:07:07,560 --> 00:07:10,650
that we are currently working with is

00:07:09,000 --> 00:07:12,990
not the JavaScript that was put together

00:07:10,650 --> 00:07:15,360
at that point and so now that we have

00:07:12,990 --> 00:07:17,640
the history of HTML and of JavaScript we

00:07:15,360 --> 00:07:21,120
really understand the core problems here

00:07:17,640 --> 00:07:22,320
right javascript has vocabulary that we

00:07:21,120 --> 00:07:23,720
think means one thing and it actually

00:07:22,320 --> 00:07:26,640
means something completely different

00:07:23,720 --> 00:07:27,090
classes don't mean what you think it

00:07:26,640 --> 00:07:30,540
means

00:07:27,090 --> 00:07:32,340
um javascript and HTML are implemented

00:07:30,540 --> 00:07:34,230
slightly differently in all of the

00:07:32,340 --> 00:07:36,270
browsers and javascript has slightly

00:07:34,230 --> 00:07:39,840
different features in each one of these

00:07:36,270 --> 00:07:42,960
browsers according to its version the

00:07:39,840 --> 00:07:44,550
HTML Dom is weird right like it's it's

00:07:42,960 --> 00:07:46,170
got its own hidden state even though

00:07:44,550 --> 00:07:48,270
it's supposed to be the state and it's

00:07:46,170 --> 00:07:50,220
got event handling but it's different

00:07:48,270 --> 00:07:52,350
across all of the different browsers and

00:07:50,220 --> 00:07:55,740
then there's the duality of it right

00:07:52,350 --> 00:07:57,270
content and structure so let's go

00:07:55,740 --> 00:07:58,950
through each one of these problems in

00:07:57,270 --> 00:08:00,990
this order right let's start with

00:07:58,950 --> 00:08:02,940
JavaScript you're not going to be able

00:08:00,990 --> 00:08:05,430
to do much about the fact that they use

00:08:02,940 --> 00:08:06,870
words and you think it means one thing

00:08:05,430 --> 00:08:09,180
and then it means something else

00:08:06,870 --> 00:08:12,240
the sad truth is that you simply have to

00:08:09,180 --> 00:08:14,850
sit down and learn the vocabulary um I

00:08:12,240 --> 00:08:16,620
found Douglas Crockford book JavaScript

00:08:14,850 --> 00:08:18,080
of the good parts to be incredibly

00:08:16,620 --> 00:08:20,250
helpful

00:08:18,080 --> 00:08:22,410
Eric Elliott's programming JavaScript

00:08:20,250 --> 00:08:23,580
applications was less about JavaScript

00:08:22,410 --> 00:08:25,260
and more about the stuff that we're

00:08:23,580 --> 00:08:27,480
about to talk about but I wanted to put

00:08:25,260 --> 00:08:29,910
it all in in one side and then Kyle

00:08:27,480 --> 00:08:31,410
Simpsons you don't know JavaScript is

00:08:29,910 --> 00:08:32,849
really interesting not necessarily

00:08:31,410 --> 00:08:35,370
immediately helpful for the hands-on

00:08:32,849 --> 00:08:36,780
stuff if you're not into books like I am

00:08:35,370 --> 00:08:38,970
you might want to look at front-end

00:08:36,780 --> 00:08:42,000
masters in egghead do they have videos

00:08:38,970 --> 00:08:44,610
that sort of cover the same stuff so

00:08:42,000 --> 00:08:45,600
that's JavaScript the language now we

00:08:44,610 --> 00:08:47,820
can talk about the different versions

00:08:45,600 --> 00:08:48,780
I'm gonna skip the fact that it's

00:08:47,820 --> 00:08:50,070
slightly different in different browsers

00:08:48,780 --> 00:08:51,360
because it's no longer something that

00:08:50,070 --> 00:08:53,730
most developers have to worry about

00:08:51,360 --> 00:08:55,710
right jquery and mootools

00:08:53,730 --> 00:08:58,220
originally solve this in the early 2000s

00:08:55,710 --> 00:09:00,209
and if you're using a modern framework

00:08:58,220 --> 00:09:03,779
you don't have to worry about it

00:09:00,209 --> 00:09:05,309
let's let's just skip it you do have to

00:09:03,779 --> 00:09:06,839
worry about the different language

00:09:05,309 --> 00:09:07,619
versions and this is where things begin

00:09:06,839 --> 00:09:09,689
to get weird

00:09:07,619 --> 00:09:11,069
right because if you're using Python you

00:09:09,689 --> 00:09:14,009
can just decide that you're gonna run C

00:09:11,069 --> 00:09:16,529
Python 2.7 or C Python 3.6 right you

00:09:14,009 --> 00:09:18,059
just run it but you have different

00:09:16,529 --> 00:09:20,999
browsers and they're all implementing it

00:09:18,059 --> 00:09:23,730
so you need to spec so the spec is Ekman

00:09:20,999 --> 00:09:25,740
script and you can propose things via

00:09:23,730 --> 00:09:28,639
this thing called tc39 I'm actually

00:09:25,740 --> 00:09:31,079
unclear on what the name is um

00:09:28,639 --> 00:09:33,600
if you're running in the browser you

00:09:31,079 --> 00:09:36,389
expect sort of when we started yes three

00:09:33,600 --> 00:09:38,399
so a JavaScript that it conforms to

00:09:36,389 --> 00:09:41,100
Eknath script 3 or a JavaScript that

00:09:38,399 --> 00:09:42,480
conforms to Ahmed script 5 I'm just

00:09:41,100 --> 00:09:46,709
gonna start calling the macro script or

00:09:42,480 --> 00:09:49,949
yes 3 yes 5 um in modern browsers but

00:09:46,709 --> 00:09:53,399
Xmas script 6 and most of seven

00:09:49,949 --> 00:09:54,600
currently exists but unlike with Python

00:09:53,399 --> 00:09:56,220
where you can just be like oh we

00:09:54,600 --> 00:09:57,809
upgraded our code base and now you just

00:09:56,220 --> 00:09:59,610
have to run it in Python 3 and you're

00:09:57,809 --> 00:10:01,949
done with it you don't get to control

00:09:59,610 --> 00:10:05,069
who's running your JavaScript you don't

00:10:01,949 --> 00:10:07,350
get to say who is what browser is being

00:10:05,069 --> 00:10:09,569
used so the question then becomes well

00:10:07,350 --> 00:10:12,209
hey can we write in modern JavaScript

00:10:09,569 --> 00:10:14,670
and then ship older JavaScript right can

00:10:12,209 --> 00:10:16,619
we write in es6 and ship es5 the answer

00:10:14,670 --> 00:10:18,899
is yes you can compile JavaScript to

00:10:16,619 --> 00:10:20,459
JavaScript um the community has decided

00:10:18,899 --> 00:10:23,449
that this is called transpilation

00:10:20,459 --> 00:10:27,720
no I don't know why no I'm not asking um

00:10:23,449 --> 00:10:30,720
there is one additional complication on

00:10:27,720 --> 00:10:32,970
top of translation and it's that es6

00:10:30,720 --> 00:10:35,369
introduces namespaces and modules as

00:10:32,970 --> 00:10:37,470
Python people you look at this and you

00:10:35,369 --> 00:10:39,540
go wait hold on import syntax right

00:10:37,470 --> 00:10:41,809
youyou import all the time import X from

00:10:39,540 --> 00:10:45,929
Y or simply import Y right this is easy

00:10:41,809 --> 00:10:47,879
but javascript has no knowledge of this

00:10:45,929 --> 00:10:49,829
in Atma script 5 you don't get to use

00:10:47,879 --> 00:10:52,649
that at all but you do get to use it

00:10:49,829 --> 00:10:55,220
Magnus 4:6 so how do you take all of

00:10:52,649 --> 00:10:57,420
your different files and namespaces and

00:10:55,220 --> 00:10:59,009
produce a single file

00:10:57,420 --> 00:11:00,689
well it's called bundling right you

00:10:59,009 --> 00:11:02,759
bundle all these modules all these

00:11:00,689 --> 00:11:05,189
namespaces into a single file which you

00:11:02,759 --> 00:11:07,679
can then serve up to the browser and run

00:11:05,189 --> 00:11:09,990
as if it's the old thing so let's now

00:11:07,679 --> 00:11:11,600
talk about transpilers and bundler x'

00:11:09,990 --> 00:11:14,180
and sort of get

00:11:11,600 --> 00:11:17,089
- it transpilers are actually fairly

00:11:14,180 --> 00:11:19,459
simple right it's a compiler and you're

00:11:17,089 --> 00:11:20,720
just wanting if you're starting just use

00:11:19,459 --> 00:11:23,240
babble there's a really interesting

00:11:20,720 --> 00:11:25,610
project if you're curious about all of

00:11:23,240 --> 00:11:27,230
this um called Buble it's sort of like a

00:11:25,610 --> 00:11:29,120
performant babble it doesn't do all the

00:11:27,230 --> 00:11:30,410
things that babble does but it has like

00:11:29,120 --> 00:11:31,880
an edge check it out

00:11:30,410 --> 00:11:34,130
um it's worth noting that you don't have

00:11:31,880 --> 00:11:35,480
to go from JavaScript to JavaScript you

00:11:34,130 --> 00:11:37,639
can also go from typescript to

00:11:35,480 --> 00:11:38,329
JavaScript or a CoffeeScript to

00:11:37,639 --> 00:11:39,949
JavaScript

00:11:38,329 --> 00:11:41,420
um type scripts actually really

00:11:39,949 --> 00:11:43,730
interesting because it's Microsoft's

00:11:41,420 --> 00:11:46,100
product and they introduce static typing

00:11:43,730 --> 00:11:47,180
into JavaScript and we're currently

00:11:46,100 --> 00:11:49,040
using it at work

00:11:47,180 --> 00:11:50,870
I've only used it for two weeks so I

00:11:49,040 --> 00:11:56,930
don't want to say too much about it but

00:11:50,870 --> 00:11:58,399
so far I'm enjoying bundlers are what I

00:11:56,930 --> 00:12:00,110
found the most confusing people were

00:11:58,399 --> 00:12:02,360
just like oh use webpack well what is

00:12:00,110 --> 00:12:05,149
web do what is what is this and the

00:12:02,360 --> 00:12:06,949
problem is is that originally you had

00:12:05,149 --> 00:12:08,420
two tools you would you would take all

00:12:06,949 --> 00:12:10,190
of your files you would run it through

00:12:08,420 --> 00:12:12,560
this pipeline you do whatever you need

00:12:10,190 --> 00:12:14,420
to it and then you pass it into

00:12:12,560 --> 00:12:17,120
browserify and it produces that one

00:12:14,420 --> 00:12:18,139
single file that you mean great except

00:12:17,120 --> 00:12:19,579
now you're using like three or four

00:12:18,139 --> 00:12:22,939
tools to do all the things that you want

00:12:19,579 --> 00:12:25,670
until webpack but that means that web

00:12:22,939 --> 00:12:27,649
pack is not only a bundler it's also

00:12:25,670 --> 00:12:30,110
your pipeline tool and then to make

00:12:27,649 --> 00:12:33,199
matters more confusing it expects not

00:12:30,110 --> 00:12:35,959
only to pipeline your javascript 8 once

00:12:33,199 --> 00:12:37,790
your images and your CSS and your HTML

00:12:35,959 --> 00:12:39,740
and any asset that you're going to serve

00:12:37,790 --> 00:12:42,740
and so the configs are like really

00:12:39,740 --> 00:12:44,870
really confusing um I want to know very

00:12:42,740 --> 00:12:46,459
quickly that web packets for apps if

00:12:44,870 --> 00:12:47,689
you're going to be providing libraries

00:12:46,459 --> 00:12:50,509
you want to check out a thing called

00:12:47,689 --> 00:12:54,589
roll up because you know do one thing

00:12:50,509 --> 00:12:56,540
and do one thing well I guess now

00:12:54,589 --> 00:12:59,050
speaking of libraries we haven't really

00:12:56,540 --> 00:13:01,220
dealt with any of the environment tools

00:12:59,050 --> 00:13:03,949
someone over in the back is looking a

00:13:01,220 --> 00:13:05,660
little overwhelmed I'm sorry the the

00:13:03,949 --> 00:13:09,310
environment tools right you're used to

00:13:05,660 --> 00:13:12,380
pip you just use pip no you get a choice

00:13:09,310 --> 00:13:14,000
so NPM was king of the hill but when you

00:13:12,380 --> 00:13:16,699
install things with NPM it's actually

00:13:14,000 --> 00:13:18,139
non-deterministic so I had people on my

00:13:16,699 --> 00:13:19,490
team who were seeing one bug someone

00:13:18,139 --> 00:13:21,500
else was seeing a different bug I wasn't

00:13:19,490 --> 00:13:23,779
seeing any bugs so we switched to yarn

00:13:21,500 --> 00:13:24,889
which installs things deterministically

00:13:23,779 --> 00:13:27,470
now I'm

00:13:24,889 --> 00:13:29,269
old that npm has actually fixed this I

00:13:27,470 --> 00:13:31,220
don't actually know I haven't tried it

00:13:29,269 --> 00:13:33,019
we've stayed with yarn I've also heard

00:13:31,220 --> 00:13:35,359
of this thing PNP M it's supposed to be

00:13:33,019 --> 00:13:37,519
more space efficient honestly I don't

00:13:35,359 --> 00:13:41,359
really know what to tell you on this

00:13:37,519 --> 00:13:42,619
front I use yarn it's great I you know I

00:13:41,359 --> 00:13:43,999
feel like people could bike shut about

00:13:42,619 --> 00:13:46,999
this I'm just gonna keep going

00:13:43,999 --> 00:13:51,739
there are linters that should say jslint

00:13:46,999 --> 00:13:54,290
and J's hint they're the originals and

00:13:51,739 --> 00:13:59,169
they're basically being succeeded by

00:13:54,290 --> 00:14:01,339
this thing called es lint you should in

00:13:59,169 --> 00:14:03,499
conclusion for the starting pack will

00:14:01,339 --> 00:14:05,809
for just JavaScript we even even touch

00:14:03,499 --> 00:14:08,869
the web frameworks yep right you want

00:14:05,809 --> 00:14:11,389
babble for transpiration web pack for

00:14:08,869 --> 00:14:15,049
your pipelining and bundling you want to

00:14:11,389 --> 00:14:16,609
use es lint for linting um and then for

00:14:15,049 --> 00:14:18,049
goodness sakes I don't know what to tell

00:14:16,609 --> 00:14:20,540
you on package management anymore

00:14:18,049 --> 00:14:22,970
yarn is great um yarn is backed by

00:14:20,540 --> 00:14:26,230
Facebook if that makes it your choice

00:14:22,970 --> 00:14:28,459
easier in terms of institutional support

00:14:26,230 --> 00:14:30,529
before we talk about the various

00:14:28,459 --> 00:14:33,049
frameworks and libraries I want to make

00:14:30,529 --> 00:14:34,970
sure everyone's really clear about what

00:14:33,049 --> 00:14:37,429
I mean I'm making it a really important

00:14:34,970 --> 00:14:40,040
distinction a library is something you

00:14:37,429 --> 00:14:42,559
call yourself right you use requests as

00:14:40,040 --> 00:14:44,239
a library you have some main loop and

00:14:42,559 --> 00:14:45,589
you call it a framework is something

00:14:44,239 --> 00:14:48,319
that is going to call your own code

00:14:45,589 --> 00:14:50,480
referred to as inversion of control or

00:14:48,319 --> 00:14:52,549
else sometimes the Hollywood principle

00:14:50,480 --> 00:14:55,189
don't call us we'll call you

00:14:52,549 --> 00:15:00,739
um Django is a really good example of a

00:14:55,189 --> 00:15:03,889
framework both provide a mental model

00:15:00,739 --> 00:15:06,169
for working with the tools to provide a

00:15:03,889 --> 00:15:07,910
solution right so we understand the

00:15:06,169 --> 00:15:11,389
problem right the problem is effectively

00:15:07,910 --> 00:15:11,959
the Dom I think Marco Rogers said it

00:15:11,389 --> 00:15:14,269
best

00:15:11,959 --> 00:15:17,059
right this is a reminder that the DOM is

00:15:14,269 --> 00:15:19,610
actually a giant mutable global variable

00:15:17,059 --> 00:15:22,039
in the middle of your program not to

00:15:19,610 --> 00:15:25,189
mention the fact that there's this

00:15:22,039 --> 00:15:26,869
duality to it as well right so the way I

00:15:25,189 --> 00:15:28,519
kind of think about it is like this

00:15:26,869 --> 00:15:30,079
right you've got your HTML to one side

00:15:28,519 --> 00:15:31,369
it's got the model in the view and you

00:15:30,079 --> 00:15:32,869
really wish it didn't and then you've

00:15:31,369 --> 00:15:34,459
kind of got JavaScript over there and

00:15:32,869 --> 00:15:37,669
you're going to try and use it in some

00:15:34,459 --> 00:15:38,720
way to control it so we all are familiar

00:15:37,669 --> 00:15:41,060
with model

00:15:38,720 --> 00:15:42,439
controller and angular 1 is a really

00:15:41,060 --> 00:15:45,050
good example of this I haven't played

00:15:42,439 --> 00:15:45,860
with angular 2 or angular 4 I just found

00:15:45,050 --> 00:15:47,750
out today

00:15:45,860 --> 00:15:53,420
thank you that there is no angular 3

00:15:47,750 --> 00:15:54,470
madness um um it's referred to as MVC

00:15:53,420 --> 00:15:57,079
I'm not sure that's a hundred percent

00:15:54,470 --> 00:15:58,550
accurate and they keep the JavaScript

00:15:57,079 --> 00:16:01,040
totally separate and then they ask you

00:15:58,550 --> 00:16:03,589
to annotate the HTML with what they call

00:16:01,040 --> 00:16:06,439
directives so that they kind of connect

00:16:03,589 --> 00:16:09,319
the two with this two-way binding so the

00:16:06,439 --> 00:16:11,660
content is dynamic but the structure of

00:16:09,319 --> 00:16:13,850
the app is still dictated by the HTML I

00:16:11,660 --> 00:16:16,339
think of it like this right

00:16:13,850 --> 00:16:19,069
you've managed to split up this model

00:16:16,339 --> 00:16:20,930
into smaller parts and if you change it

00:16:19,069 --> 00:16:23,540
in the HTML it's reflected in the

00:16:20,930 --> 00:16:25,610
JavaScript and vice-versa but it doesn't

00:16:23,540 --> 00:16:28,759
actually sort of separate that weird

00:16:25,610 --> 00:16:31,399
duality between the HTML or in the HTML

00:16:28,759 --> 00:16:32,930
all the way to the other side of the

00:16:31,399 --> 00:16:34,399
other end of the spectrum we have these

00:16:32,930 --> 00:16:36,649
reactive programming things they're

00:16:34,399 --> 00:16:38,389
fairly new they're a little strange and

00:16:36,649 --> 00:16:40,279
they look at the problem they say you

00:16:38,389 --> 00:16:42,589
know what we want to think about this in

00:16:40,279 --> 00:16:44,899
terms of time right we're gonna have

00:16:42,589 --> 00:16:45,860
these initial parameters and we expect

00:16:44,899 --> 00:16:47,240
that people are gonna show up they're

00:16:45,860 --> 00:16:50,600
gonna click button so we're gonna get

00:16:47,240 --> 00:16:52,519
inputs but changes happen according to

00:16:50,600 --> 00:16:53,360
time and we want those changes to be

00:16:52,519 --> 00:16:55,699
deterministic

00:16:53,360 --> 00:16:57,649
so you set up a function at the

00:16:55,699 --> 00:16:59,720
beginning when your page loads and you

00:16:57,649 --> 00:17:01,790
say well if things change in the

00:16:59,720 --> 00:17:03,019
following ways if I see the following

00:17:01,790 --> 00:17:05,270
things then I want you to

00:17:03,019 --> 00:17:08,990
deterministically change the HTML in the

00:17:05,270 --> 00:17:11,539
following ways it's a little strange and

00:17:08,990 --> 00:17:13,909
the real problem is is that it almost

00:17:11,539 --> 00:17:16,339
kind of gets away from this idea of

00:17:13,909 --> 00:17:18,679
model or state right you have these

00:17:16,339 --> 00:17:21,230
actions over time and you're pumping

00:17:18,679 --> 00:17:24,140
them through a function so it's very

00:17:21,230 --> 00:17:26,870
functional and then you have the view

00:17:24,140 --> 00:17:29,030
now this is very nice though you'll

00:17:26,870 --> 00:17:31,520
notice there's a single direction for

00:17:29,030 --> 00:17:34,909
control and that's a real improvement

00:17:31,520 --> 00:17:38,270
over a two-way binding Facebook's react

00:17:34,909 --> 00:17:39,080
is sort of this lovely in-between right

00:17:38,270 --> 00:17:41,559
um

00:17:39,080 --> 00:17:45,320
it stays with the single direction of

00:17:41,559 --> 00:17:48,530
information but it's a library and so it

00:17:45,320 --> 00:17:51,220
only provides part of the solution they

00:17:48,530 --> 00:17:53,590
call it the view in an MVC app and again

00:17:51,220 --> 00:17:56,020
MVC's not quite right but we're gonna

00:17:53,590 --> 00:17:57,610
stick with it and they expect that your

00:17:56,020 --> 00:17:59,680
MPC app is going to follow this thing

00:17:57,610 --> 00:18:01,360
called the flux architecture so on top

00:17:59,680 --> 00:18:03,100
of that they're like oh it's a view and

00:18:01,360 --> 00:18:04,600
you have to do you have to follow all

00:18:03,100 --> 00:18:07,690
the following rules

00:18:04,600 --> 00:18:09,640
good luck learning all of them the one

00:18:07,690 --> 00:18:12,520
key difference though is that they move

00:18:09,640 --> 00:18:13,840
completely away from modifying the HTML

00:18:12,520 --> 00:18:16,090
they introduced this concept of a

00:18:13,840 --> 00:18:18,850
virtual Dom and they're going to modify

00:18:16,090 --> 00:18:21,160
the HTML after they create this virtual

00:18:18,850 --> 00:18:25,570
DOM and that really changes things quite

00:18:21,160 --> 00:18:29,440
drastically it looks almost kind of like

00:18:25,570 --> 00:18:32,440
this the problem of course is that react

00:18:29,440 --> 00:18:34,390
only gives you that it gives you part of

00:18:32,440 --> 00:18:36,670
the controller and none of the state

00:18:34,390 --> 00:18:38,560
oh so the way they put this together is

00:18:36,670 --> 00:18:41,050
they say oh well this is how it works

00:18:38,560 --> 00:18:42,640
the actions are either Network actions

00:18:41,050 --> 00:18:44,920
or user actions it's clicking a button

00:18:42,640 --> 00:18:47,320
it's receiving network information like

00:18:44,920 --> 00:18:49,450
JSON from an API and they're gonna

00:18:47,320 --> 00:18:51,430
handle you know the rendering of the

00:18:49,450 --> 00:18:53,230
view but they don't give you this

00:18:51,430 --> 00:18:55,120
dispatcher which is effectively the

00:18:53,230 --> 00:18:58,630
controller that's what controls the

00:18:55,120 --> 00:19:00,820
actions and how to behave and the

00:18:58,630 --> 00:19:04,210
dispatchers goal is always to change

00:19:00,820 --> 00:19:06,940
this state or this store it's just raw

00:19:04,210 --> 00:19:11,380
data that is used to render out the HTML

00:19:06,940 --> 00:19:13,270
so what do you do um there's also a side

00:19:11,380 --> 00:19:15,790
trick here there are only actually

00:19:13,270 --> 00:19:17,560
giving you kind of sort of part of the

00:19:15,790 --> 00:19:19,660
view so the first thing they say is oh

00:19:17,560 --> 00:19:20,530
yes well you have to be able to handle

00:19:19,660 --> 00:19:22,120
JSX

00:19:20,530 --> 00:19:24,430
that's how we're going to sort of

00:19:22,120 --> 00:19:26,770
provide syntactic sugar that makes sense

00:19:24,430 --> 00:19:28,540
for interacting with the virtual Dom so

00:19:26,770 --> 00:19:31,480
that's the first thing you need and then

00:19:28,540 --> 00:19:34,300
there are lots of tools that provide the

00:19:31,480 --> 00:19:36,070
flux architecture the one we were using

00:19:34,300 --> 00:19:39,520
was Redux it sort of become the the

00:19:36,070 --> 00:19:41,560
defect to go go to and so it works on a

00:19:39,520 --> 00:19:43,780
functional accumulator sometimes also

00:19:41,560 --> 00:19:45,700
called a reducer you hear about the

00:19:43,780 --> 00:19:47,350
reducer pattern unfortunately I don't

00:19:45,700 --> 00:19:48,940
have time to go into it but once you

00:19:47,350 --> 00:19:51,730
sort of look in that functional

00:19:48,940 --> 00:19:53,590
functional paradigm it's actually fairly

00:19:51,730 --> 00:19:56,350
intuitive and so it breaks down like

00:19:53,590 --> 00:19:58,510
this right you've got the the Redux and

00:19:56,350 --> 00:20:00,580
the connector react Redux which allows

00:19:58,510 --> 00:20:03,610
you to manage your state and part of the

00:20:00,580 --> 00:20:04,780
controller and then react and JSX for

00:20:03,610 --> 00:20:06,070
handling the the second

00:20:04,780 --> 00:20:08,950
this sort of the end of the controller

00:20:06,070 --> 00:20:11,020
and writing out to the view now of

00:20:08,950 --> 00:20:13,410
course that turns out not to be enough

00:20:11,020 --> 00:20:15,400
either everything I've just shown you is

00:20:13,410 --> 00:20:17,560
synchronous and that's a real problem

00:20:15,400 --> 00:20:19,990
because you're interacting with an API

00:20:17,560 --> 00:20:21,310
in your receiving network requests so

00:20:19,990 --> 00:20:24,460
you need to be able to handle a

00:20:21,310 --> 00:20:26,440
synchronicity in your application there

00:20:24,460 --> 00:20:29,260
are lots of solutions for this redux

00:20:26,440 --> 00:20:31,090
thunk is the simplest Netflix is using

00:20:29,260 --> 00:20:34,780
the thing called Redux observables it is

00:20:31,090 --> 00:20:36,940
overkill Redux sagas seems to be growing

00:20:34,780 --> 00:20:39,790
in terms of preference I haven't played

00:20:36,940 --> 00:20:41,560
with it it's a lot um the other thing is

00:20:39,790 --> 00:20:43,630
that you are going to be making network

00:20:41,560 --> 00:20:46,960
requests for a long time that you wanted

00:20:43,630 --> 00:20:49,000
to use XML HTTP requests don't we're

00:20:46,960 --> 00:20:52,150
moving to a new spec get a polyfill for

00:20:49,000 --> 00:20:54,520
fetch it introduces a ton of sanity um

00:20:52,150 --> 00:20:56,890
we also use Redux forms and Redux logger

00:20:54,520 --> 00:20:58,690
it is exactly what you think it is I

00:20:56,890 --> 00:21:00,160
want to take a quick moment to talk

00:20:58,690 --> 00:21:03,190
about testing because testing is the

00:21:00,160 --> 00:21:05,590
best you have yet another choice to make

00:21:03,190 --> 00:21:07,530
where do you test write JavaScript for a

00:21:05,590 --> 00:21:09,700
long time only ran in the browser

00:21:07,530 --> 00:21:11,470
suddenly we have this node thing you can

00:21:09,700 --> 00:21:14,260
now run it directly in a process that's

00:21:11,470 --> 00:21:16,030
where web pack is running you can also

00:21:14,260 --> 00:21:18,310
run your testing and in fact you

00:21:16,030 --> 00:21:20,680
probably should originally you would

00:21:18,310 --> 00:21:22,960
have used karma with jasmine or mocha to

00:21:20,680 --> 00:21:24,520
run directly in the browser or you would

00:21:22,960 --> 00:21:27,550
have done an Ted testing with selenium

00:21:24,520 --> 00:21:29,140
webdriver but because you're not really

00:21:27,550 --> 00:21:31,600
programming to the differences in the

00:21:29,140 --> 00:21:33,580
browser and you're using a framework you

00:21:31,600 --> 00:21:36,010
can avoid all of that complexity and you

00:21:33,580 --> 00:21:38,320
can use node to run your tests with

00:21:36,010 --> 00:21:40,030
Facebook's jest and it's built to work

00:21:38,320 --> 00:21:43,030
with react it's glorious

00:21:40,030 --> 00:21:46,210
we went from having tests that ran you

00:21:43,030 --> 00:21:48,340
know six or seven minutes in karma they

00:21:46,210 --> 00:21:52,170
ran in under a minute with jest

00:21:48,340 --> 00:21:55,860
it was huge I highly recommend it

00:21:52,170 --> 00:21:58,720
so that's react the mental framework

00:21:55,860 --> 00:22:01,960
there's a really important implication

00:21:58,720 --> 00:22:03,820
here react owns the entirety of the Dom

00:22:01,960 --> 00:22:06,040
right it's got this virtual Dom and it's

00:22:03,820 --> 00:22:07,780
in full control of the Dom so how does

00:22:06,040 --> 00:22:10,780
that interact with Django and Django

00:22:07,780 --> 00:22:12,870
templates and unfortunately there is no

00:22:10,780 --> 00:22:14,980
good answer here if you're just

00:22:12,870 --> 00:22:16,990
interacting with the Django API or any

00:22:14,980 --> 00:22:18,250
API this is fairly straightforward right

00:22:16,990 --> 00:22:21,039
use fat you you

00:22:18,250 --> 00:22:24,760
make requests and you get JavaScript

00:22:21,039 --> 00:22:29,980
back thank you um if you are interacting

00:22:24,760 --> 00:22:31,330
with Django templates oh boy right

00:22:29,980 --> 00:22:34,270
because Django templates want to provide

00:22:31,330 --> 00:22:37,000
HTML and the Dom but react want to be in

00:22:34,270 --> 00:22:39,880
full control of it um do you pre compute

00:22:37,000 --> 00:22:41,830
with like node on on your server do you

00:22:39,880 --> 00:22:43,570
try and provide information in your

00:22:41,830 --> 00:22:45,520
templates so that you can load that

00:22:43,570 --> 00:22:46,990
information directly into react what

00:22:45,520 --> 00:22:49,840
about progressive enhancement

00:22:46,990 --> 00:22:52,630
what about accessibility honestly there

00:22:49,840 --> 00:22:55,390
isn't a clear-cut answer here it depends

00:22:52,630 --> 00:22:58,030
a lot on you app a lot on the market who

00:22:55,390 --> 00:22:59,530
your users are um there's also like I

00:22:58,030 --> 00:23:02,140
could give a full talk about this

00:22:59,530 --> 00:23:05,140
luckily I don't have to because Julian

00:23:02,140 --> 00:23:07,330
Fallot core contributor of Django gave a

00:23:05,140 --> 00:23:10,090
talk about this to Django cons ago it is

00:23:07,330 --> 00:23:15,130
still quite relevant so I highly

00:23:10,090 --> 00:23:21,210
recommend it to conclude JavaScript's

00:23:15,130 --> 00:23:23,950
problem is the Dom right the Dom is

00:23:21,210 --> 00:23:27,580
horrible right it has this dual nature

00:23:23,950 --> 00:23:30,250
to it and it is a giant global variable

00:23:27,580 --> 00:23:33,340
and the goal of every framework is to

00:23:30,250 --> 00:23:36,490
try and provide some means of dealing

00:23:33,340 --> 00:23:41,740
with this this global variable in a sane

00:23:36,490 --> 00:23:43,539
fashion whereas with um HTTP HTTP on the

00:23:41,740 --> 00:23:45,370
back ends a lot of the frameworks look

00:23:43,539 --> 00:23:46,900
similar right you can start with Django

00:23:45,370 --> 00:23:49,299
and then you can look at bottle pine you

00:23:46,900 --> 00:23:51,340
can look at class and you understand

00:23:49,299 --> 00:23:54,610
what's going on because the solutions

00:23:51,340 --> 00:23:56,710
are fairly similar right you understand

00:23:54,610 --> 00:23:59,350
the core components it's a little harder

00:23:56,710 --> 00:24:02,260
with JavaScript because the way they

00:23:59,350 --> 00:24:04,750
rationalize the solution is a little bit

00:24:02,260 --> 00:24:07,480
different so it's worth taking time to

00:24:04,750 --> 00:24:09,010
look at their mentality you know the

00:24:07,480 --> 00:24:13,510
mental framework that they're using

00:24:09,010 --> 00:24:15,309
because the solution for your product is

00:24:13,510 --> 00:24:17,140
going to differ there are some places

00:24:15,309 --> 00:24:19,840
where angular is going to be a better

00:24:17,140 --> 00:24:21,190
choice than react and unfortunately it's

00:24:19,840 --> 00:24:22,890
going to really depend on the product

00:24:21,190 --> 00:24:25,500
that you're building

00:24:22,890 --> 00:24:28,910
if I were starting this all over again I

00:24:25,500 --> 00:24:32,030
would not spend the two weeks I did

00:24:28,910 --> 00:24:35,179
configuring webpack it's awful

00:24:32,030 --> 00:24:37,410
thankfully no really

00:24:35,179 --> 00:24:39,990
thankfully Facebook has put together

00:24:37,410 --> 00:24:42,990
this thing called Cree react app it is

00:24:39,990 --> 00:24:45,480
great um it works like black magic which

00:24:42,990 --> 00:24:47,970
is unfortunate but it gives you this

00:24:45,480 --> 00:24:49,980
project that is yarn compatible it comes

00:24:47,970 --> 00:24:52,530
with web pack it comes with Babel it

00:24:49,980 --> 00:24:55,530
gives you config it works with yes link

00:24:52,530 --> 00:24:56,010
and it comes with just tests goodness

00:24:55,530 --> 00:24:59,910
gracious

00:24:56,010 --> 00:25:03,480
Thank You um of course you know J Saxon

00:24:59,910 --> 00:25:06,270
react somewhat obvious you will have to

00:25:03,480 --> 00:25:08,850
install Redux and Redux logger and redux

00:25:06,270 --> 00:25:11,429
react and Rio my you know you get the

00:25:08,850 --> 00:25:14,010
picture yourself um but you know you

00:25:11,429 --> 00:25:17,340
were going to have to do that anyways um

00:25:14,010 --> 00:25:22,620
I think I'm like 15 seconds what's

00:25:17,340 --> 00:25:23,640
coming next as with JavaScript ice with

00:25:22,620 --> 00:25:25,410
JavaScript

00:25:23,640 --> 00:25:29,640
everything moves at a million miles an

00:25:25,410 --> 00:25:31,410
hour react is about to ship a brand new

00:25:29,640 --> 00:25:33,390
version it's the fastest it's better

00:25:31,410 --> 00:25:36,390
it's called react fibre should I use it

00:25:33,390 --> 00:25:39,240
I really don't know the Apache

00:25:36,390 --> 00:25:41,309
foundation came forward and said you

00:25:39,240 --> 00:25:43,740
can't use react in open source apps

00:25:41,309 --> 00:25:46,770
because of the patents that Facebook has

00:25:43,740 --> 00:25:48,780
placed on the react code there's a

00:25:46,770 --> 00:25:51,620
really interesting problem where should

00:25:48,780 --> 00:25:54,360
you use it at all what about using

00:25:51,620 --> 00:25:56,669
libraries like Inferno Jas which is

00:25:54,360 --> 00:25:58,679
effectively the same API and exactly the

00:25:56,669 --> 00:26:01,169
same mental framework but that is much

00:25:58,679 --> 00:26:03,929
much quicker do those patents apply I

00:26:01,169 --> 00:26:05,280
honestly don't know um there's some

00:26:03,929 --> 00:26:07,320
other really interesting there's some

00:26:05,280 --> 00:26:09,540
interesting movement Google i/o lately

00:26:07,320 --> 00:26:12,360
has really focused on performance

00:26:09,540 --> 00:26:14,549
because of these right running

00:26:12,360 --> 00:26:16,610
JavaScript on these mobile devices is

00:26:14,549 --> 00:26:19,260
actually really taxing bandwidth

00:26:16,610 --> 00:26:21,000
computation etc and so there's a real

00:26:19,260 --> 00:26:22,890
sort of movement in the JavaScript

00:26:21,000 --> 00:26:25,230
community to move towards simpler

00:26:22,890 --> 00:26:27,450
smaller apps felt is really interesting

00:26:25,230 --> 00:26:30,210
it's not ready for production yet but I

00:26:27,450 --> 00:26:32,300
would keep an eye out for it um I've

00:26:30,210 --> 00:26:35,370
heard really good things about UJS

00:26:32,300 --> 00:26:38,040
should use it instead of react again I'm

00:26:35,370 --> 00:26:42,050
unfortunately really ensure and I wish I

00:26:38,040 --> 00:26:46,650
could be I give you a firm rocks firmer

00:26:42,050 --> 00:26:48,870
answer about that but yeah thank you

00:26:46,650 --> 00:26:58,720
very much

00:26:48,870 --> 00:26:58,720

YouTube URL: https://www.youtube.com/watch?v=g8d6UbVCuuw


