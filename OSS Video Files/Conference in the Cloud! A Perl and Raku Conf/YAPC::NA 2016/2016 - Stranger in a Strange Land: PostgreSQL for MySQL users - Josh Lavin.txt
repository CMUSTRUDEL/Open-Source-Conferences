Title: 2016 - Stranger in a Strange Land: PostgreSQL for MySQL users - Josh Lavin
Publication date: 2016-06-27
Playlist: YAPC::NA 2016
Description: 
	
Captions: 
	00:00:00,680 --> 00:00:04,830
okay well we're gonna get started

00:00:03,090 --> 00:00:09,080
this is called stranger in a strange

00:00:04,830 --> 00:00:11,610
land PostgreSQL for my sequel users

00:00:09,080 --> 00:00:15,389
there's some slides available here if

00:00:11,610 --> 00:00:17,550
you want to review anything I don't have

00:00:15,389 --> 00:00:20,279
that link again at the end but my name

00:00:17,550 --> 00:00:23,359
is Josh Levine I work at a web

00:00:20,279 --> 00:00:25,890
consultant to see called end point and

00:00:23,359 --> 00:00:26,490
so I have a lot of co-workers using

00:00:25,890 --> 00:00:29,460
Postgres

00:00:26,490 --> 00:00:30,990
and I've never really I've always

00:00:29,460 --> 00:00:34,260
wondered you know what why is Postgres

00:00:30,990 --> 00:00:36,809
better and so I thought well let me

00:00:34,260 --> 00:00:39,300
submit a talk about this and it got

00:00:36,809 --> 00:00:42,680
accepted so now I've learned a little

00:00:39,300 --> 00:00:44,399
bit so here I am I'm still a newbie but

00:00:42,680 --> 00:00:46,710
hopefully you know this would be

00:00:44,399 --> 00:00:48,210
interesting for you this is gonna show

00:00:46,710 --> 00:00:55,050
it hands like how many of you guys are

00:00:48,210 --> 00:00:56,989
using Postgres and my sequel okay cool

00:00:55,050 --> 00:01:01,199
so there's a little bit of history about

00:00:56,989 --> 00:01:03,270
Postgres in my sequel originally my

00:01:01,199 --> 00:01:05,760
sequel was created for speed

00:01:03,270 --> 00:01:07,200
it wasn't acid compliant and if you're

00:01:05,760 --> 00:01:10,409
not familiar with acid it just stands

00:01:07,200 --> 00:01:12,810
for atomicity consistency isolation and

00:01:10,409 --> 00:01:14,340
durability just some basic standards

00:01:12,810 --> 00:01:17,460
that a database should meet according to

00:01:14,340 --> 00:01:20,430
the creators of it the a and atomicity

00:01:17,460 --> 00:01:23,280
means that it should do transactions

00:01:20,430 --> 00:01:25,979
well my sequel back in the day with my

00:01:23,280 --> 00:01:28,170
isome didn't do transactions but it was

00:01:25,979 --> 00:01:32,579
fast but it also could have lots of

00:01:28,170 --> 00:01:35,310
problems and so they created nodb back

00:01:32,579 --> 00:01:37,979
in 2010 and my Isum and you know the

00:01:35,310 --> 00:01:40,560
beer storage engines for my sequel so

00:01:37,979 --> 00:01:41,880
there you can write up if you wanted to

00:01:40,560 --> 00:01:44,250
I guess you could write a pluggable

00:01:41,880 --> 00:01:47,549
storage engine put it into my sequel so

00:01:44,250 --> 00:01:50,220
that's what those are but you could do

00:01:47,549 --> 00:01:53,189
transactions in 2010 with 5.5

00:01:50,220 --> 00:01:56,219
but if you're like some of our clients

00:01:53,189 --> 00:01:59,850
we have legacy tables that even today

00:01:56,219 --> 00:02:01,259
are still running on my Isum now

00:01:59,850 --> 00:02:03,630
Postgres on the other hand was created

00:02:01,259 --> 00:02:05,880
to be acid compliant from the get-go it

00:02:03,630 --> 00:02:08,069
was solid but as a result originally it

00:02:05,880 --> 00:02:10,280
was a little bit slower today though

00:02:08,069 --> 00:02:11,810
they're pretty similar

00:02:10,280 --> 00:02:15,019
the Postgres has some really nice things

00:02:11,810 --> 00:02:16,459
which I think make it attractive so

00:02:15,019 --> 00:02:19,099
we're gonna look at it you know why

00:02:16,459 --> 00:02:22,000
Postgres versus my sequel converting

00:02:19,099 --> 00:02:25,700
your database and some tools and tips

00:02:22,000 --> 00:02:28,730
first off how do you say it an official

00:02:25,700 --> 00:02:30,680
is PostgreSQL it's also official to just

00:02:28,730 --> 00:02:34,430
call it Postgres and so I think that's

00:02:30,680 --> 00:02:37,069
what a lot of people do so why well

00:02:34,430 --> 00:02:39,920
first of all it's not controlled by any

00:02:37,069 --> 00:02:42,829
company and of course my sequel was

00:02:39,920 --> 00:02:44,689
bought by Oracle few years back and they

00:02:42,829 --> 00:02:47,659
don't have the greatest reputation among

00:02:44,689 --> 00:02:50,510
developers so you might not want to use

00:02:47,659 --> 00:02:53,239
my sequel then there's the whole thing

00:02:50,510 --> 00:02:56,290
and we have we have my sequel spin-offs

00:02:53,239 --> 00:02:57,469
because of that we have Maria DB and

00:02:56,290 --> 00:03:00,439
percona

00:02:57,469 --> 00:03:03,500
and you know those entities they have

00:03:00,439 --> 00:03:04,430
a.com and a dot work so it's not a bad

00:03:03,500 --> 00:03:07,939
thing necessarily

00:03:04,430 --> 00:03:10,639
Maria DB wants to sell support so they

00:03:07,939 --> 00:03:12,500
do that on their comm and then they have

00:03:10,639 --> 00:03:14,659
the dot work to provide the the free

00:03:12,500 --> 00:03:18,919
edition but it's just something to be

00:03:14,659 --> 00:03:21,109
aware of and so those kind of products

00:03:18,919 --> 00:03:22,430
they're considered products they're

00:03:21,109 --> 00:03:24,949
open-source but on the other hand

00:03:22,430 --> 00:03:27,889
Postgres is an open source project

00:03:24,949 --> 00:03:30,500
it's run by a community they still have

00:03:27,889 --> 00:03:33,650
corporate sponsors but those corporate

00:03:30,500 --> 00:03:35,239
sponsors don't own the thing however you

00:03:33,650 --> 00:03:37,970
still can get support for Postgres lots

00:03:35,239 --> 00:03:40,159
of good companies the place I work at

00:03:37,970 --> 00:03:44,329
does Postgres support I'm not on that

00:03:40,159 --> 00:03:46,819
team so another reason is it has a

00:03:44,329 --> 00:03:49,040
really great documentation so you can

00:03:46,819 --> 00:03:49,819
see here is a little screenshot and it

00:03:49,040 --> 00:03:52,669
is versioned

00:03:49,819 --> 00:03:55,040
so I'm on the current 9.5 version but

00:03:52,669 --> 00:03:57,229
you can go back and see that this was

00:03:55,040 --> 00:03:59,060
introduced back in 9.2 as far as the

00:03:57,229 --> 00:04:04,909
JSON types which we'll talk about a

00:03:59,060 --> 00:04:08,239
little bit later I tried to look at my

00:04:04,909 --> 00:04:11,739
sequel documentation I had a co-worker

00:04:08,239 --> 00:04:15,079
who had bookmarked 5.1 Doc's and

00:04:11,739 --> 00:04:17,720
suddenly they're redirecting 25.7 and he

00:04:15,079 --> 00:04:20,430
says if I'm not one

00:04:17,720 --> 00:04:24,060
so to you know point them to archive.org

00:04:20,430 --> 00:04:26,130
but it's still frustrating and then you

00:04:24,060 --> 00:04:28,530
know if you fact if you're on a maria DP

00:04:26,130 --> 00:04:31,350
where do you go for documentation you

00:04:28,530 --> 00:04:32,280
should probably go to maria DB not my

00:04:31,350 --> 00:04:35,340
sequel because there are some

00:04:32,280 --> 00:04:37,440
differences but then the marina DB word

00:04:35,340 --> 00:04:38,040
there's no docks there it's on radio be

00:04:37,440 --> 00:04:41,850
calm

00:04:38,040 --> 00:04:43,740
so just to be aware of but on the other

00:04:41,850 --> 00:04:47,220
hand you know Postgres has a really good

00:04:43,740 --> 00:04:50,490
documentation another cool thing about

00:04:47,220 --> 00:04:52,350
post grants is the transactional DDL or

00:04:50,490 --> 00:04:57,630
data definition layer and this is your

00:04:52,350 --> 00:04:59,430
create alter statements those are such

00:04:57,630 --> 00:05:01,620
that you can do those as transactions so

00:04:59,430 --> 00:05:03,570
if you needed to do you know create a

00:05:01,620 --> 00:05:06,150
table start some indexes and everything

00:05:03,570 --> 00:05:08,520
and then fail everything if any one of

00:05:06,150 --> 00:05:11,220
them failed you can do that whereas my

00:05:08,520 --> 00:05:14,490
sequel because it's pluggable with the

00:05:11,220 --> 00:05:16,950
table are the storage engines like nodb

00:05:14,490 --> 00:05:19,530
that you know DB supports transactions

00:05:16,950 --> 00:05:22,620
but core my sequel doesn't so you can't

00:05:19,530 --> 00:05:26,160
do transactions for create and alter and

00:05:22,620 --> 00:05:29,760
delete or drop so just to be aware of

00:05:26,160 --> 00:05:31,800
but that's kind of neat and then i think

00:05:29,760 --> 00:05:36,060
one of the big things is just the data

00:05:31,800 --> 00:05:38,040
integrity which you know is type

00:05:36,060 --> 00:05:41,430
checking or in perl 6 you can have

00:05:38,040 --> 00:05:43,740
strict types well with post res is kind

00:05:41,430 --> 00:05:45,870
of the same deal so you can for instance

00:05:43,740 --> 00:05:48,870
have a date/time and you can never

00:05:45,870 --> 00:05:50,610
insert february 30 into that field if on

00:05:48,870 --> 00:05:52,950
the other hand you're using my sequel it

00:05:50,610 --> 00:05:54,750
will merely accept February 30 but

00:05:52,950 --> 00:05:59,160
change it to all zeros without warning

00:05:54,750 --> 00:06:00,870
so just something to be aware of so kind

00:05:59,160 --> 00:06:02,669
of the mindset is that you know my

00:06:00,870 --> 00:06:04,680
sequel maybe the app should do those

00:06:02,669 --> 00:06:05,220
checks and the database should remain

00:06:04,680 --> 00:06:07,530
flexible

00:06:05,220 --> 00:06:09,270
whereas Postgres is kind of like the

00:06:07,530 --> 00:06:11,430
database should do those checks it

00:06:09,270 --> 00:06:13,669
should be strict and the app could be

00:06:11,430 --> 00:06:15,960
strict as well that's your choice but

00:06:13,669 --> 00:06:19,350
Postgres wants a database strict to I

00:06:15,960 --> 00:06:21,750
don't know you know how many times we've

00:06:19,350 --> 00:06:24,000
inserted stuff in a database outside of

00:06:21,750 --> 00:06:25,800
the app so you know if those checks

00:06:24,000 --> 00:06:28,530
weren't there you you'd be

00:06:25,800 --> 00:06:31,259
on your own of course my sequel does

00:06:28,530 --> 00:06:34,020
have strict mode and it's something

00:06:31,259 --> 00:06:35,610
however that can be turned off we have

00:06:34,020 --> 00:06:37,860
been working on a client where we

00:06:35,610 --> 00:06:40,710
upgraded their whole stack and so they

00:06:37,860 --> 00:06:43,080
got on my sequel 5.7 and suddenly their

00:06:40,710 --> 00:06:45,750
strict mode and our our app Brooke

00:06:43,080 --> 00:06:47,729
because the framework had a bug that

00:06:45,750 --> 00:06:53,340
didn't allow it to work in strict mode

00:06:47,729 --> 00:06:55,139
so we turned it off that's what we did I

00:06:53,340 --> 00:06:57,690
saw this in Postgres

00:06:55,139 --> 00:07:01,440
- where you can actually tap complete

00:06:57,690 --> 00:07:04,349
you type this query where space hit tab

00:07:01,440 --> 00:07:07,199
we get our column names which in this

00:07:04,349 --> 00:07:09,659
table was first name ID last name and on

00:07:07,199 --> 00:07:13,139
my sequel I got display all 755

00:07:09,659 --> 00:07:16,110
possibilities I don't know if this

00:07:13,139 --> 00:07:18,330
actually works it all in my sequel I

00:07:16,110 --> 00:07:20,310
couldn't figure it out in the in the

00:07:18,330 --> 00:07:24,150
command line client I could be wrong but

00:07:20,310 --> 00:07:25,830
I couldn't figure it out myself and as

00:07:24,150 --> 00:07:28,789
far as some of the types that we have

00:07:25,830 --> 00:07:31,909
available in Postgres one is a boolean

00:07:28,789 --> 00:07:35,819
whereas my sequel just has tiny ant one

00:07:31,909 --> 00:07:39,240
which uses 0 equals false and not zero

00:07:35,819 --> 00:07:41,610
is true but that could be 1 to 9 that

00:07:39,240 --> 00:07:45,900
could be maybe a negative I don't know

00:07:41,610 --> 00:07:47,610
but so that's kind of neat we're and

00:07:45,900 --> 00:07:49,770
then the other thing is the JSON types

00:07:47,610 --> 00:07:52,169
so we've seen you know the rise of the

00:07:49,770 --> 00:07:53,610
no sequel databases well now with

00:07:52,169 --> 00:07:57,360
Postgres you can kind of do everything

00:07:53,610 --> 00:08:00,060
in one if you use JSON B which is JSON

00:07:57,360 --> 00:08:03,960
binary then you can actually query in

00:08:00,060 --> 00:08:07,529
this bottom example you can query on the

00:08:03,960 --> 00:08:09,060
keys in your JSON object and they don't

00:08:07,529 --> 00:08:11,729
necessarily have to be indexed to be to

00:08:09,060 --> 00:08:14,550
do that so here on I've got the

00:08:11,729 --> 00:08:16,800
representative data and then I'm

00:08:14,550 --> 00:08:19,080
actually querying the data column is

00:08:16,800 --> 00:08:21,449
called J doc so I'm querying on that

00:08:19,080 --> 00:08:25,710
handle key and getting back results

00:08:21,449 --> 00:08:29,520
which is just amazing and you can do

00:08:25,710 --> 00:08:31,680
JSON in 5.7 mi sequel but it's not a

00:08:29,520 --> 00:08:35,380
Maria DB non the latest that I could

00:08:31,680 --> 00:08:38,770
find and then as just inside its

00:08:35,380 --> 00:08:41,169
hard to figure out since I think 5.5 the

00:08:38,770 --> 00:08:43,930
versioning between Maria DB and my

00:08:41,169 --> 00:08:45,010
sequel is different so it's they have

00:08:43,930 --> 00:08:47,410
all they're all different

00:08:45,010 --> 00:08:52,540
so I couldn't figure out them or a DB

00:08:47,410 --> 00:08:55,270
can do JSON also you can do it raised so

00:08:52,540 --> 00:08:57,820
this is kind of cool the the years

00:08:55,270 --> 00:09:01,060
column here is an array and it's an

00:08:57,820 --> 00:09:03,280
integer and in this case it's just a

00:09:01,060 --> 00:09:05,230
simple array it's not nested in any way

00:09:03,280 --> 00:09:09,010
but you can also do that and then we're

00:09:05,230 --> 00:09:11,830
inserting some data Orlando here had two

00:09:09,010 --> 00:09:15,370
years at Yap see that were recent as far

00:09:11,830 --> 00:09:17,920
as I looked and then we can we can

00:09:15,370 --> 00:09:20,710
search and find where 2014 is in any of

00:09:17,920 --> 00:09:23,560
the years hey we got our Lando and then

00:09:20,710 --> 00:09:26,560
we can also the cardinality operator or

00:09:23,560 --> 00:09:30,340
function will tell us like how many

00:09:26,560 --> 00:09:34,950
times it occurs in that array so we have

00:09:30,340 --> 00:09:41,110
two two two two keys there in the array

00:09:34,950 --> 00:09:44,200
and in DB DPG the the DB I module on

00:09:41,110 --> 00:09:47,290
Sipan you can actually pull back data in

00:09:44,200 --> 00:09:49,330
an array ref just like this so if we

00:09:47,290 --> 00:09:54,670
were pulling this with DB DPG we'd get

00:09:49,330 --> 00:09:56,140
an array ref with those values some of

00:09:54,670 --> 00:10:00,040
the other cool things you can do full

00:09:56,140 --> 00:10:02,110
text queries without having to use my

00:10:00,040 --> 00:10:03,220
sequel within my Ison table which I

00:10:02,110 --> 00:10:05,440
don't know why you would purposely want

00:10:03,220 --> 00:10:07,150
to do that anymore or upgrading of my

00:10:05,440 --> 00:10:10,510
sequel 5.6 or having to use a third

00:10:07,150 --> 00:10:11,830
party thing and so that's just kind of

00:10:10,510 --> 00:10:14,650
neat you know maybe you want the

00:10:11,830 --> 00:10:18,400
features of a third party thing but and

00:10:14,650 --> 00:10:20,260
then partial index is where say you have

00:10:18,400 --> 00:10:21,670
a table with tons of rows and you don't

00:10:20,260 --> 00:10:24,970
really care about some of them like in

00:10:21,670 --> 00:10:27,190
this case we don't care about looking at

00:10:24,970 --> 00:10:29,650
data where it deleted is one so we'll

00:10:27,190 --> 00:10:31,630
create a index where deleted is not one

00:10:29,650 --> 00:10:36,220
and that just kind of helps speed things

00:10:31,630 --> 00:10:39,070
up also a DB DPG you can do asynchronous

00:10:36,220 --> 00:10:41,140
queries or you can ask a database to

00:10:39,070 --> 00:10:42,640
give you some some results go do

00:10:41,140 --> 00:10:45,940
something else and it'll give them back

00:10:42,640 --> 00:10:47,010
to you later and that's only in DB DPG

00:10:45,940 --> 00:10:51,580
not in

00:10:47,010 --> 00:10:53,890
the my sequel variant of that PL pearl

00:10:51,580 --> 00:10:56,320
it allows you to write Postgres

00:10:53,890 --> 00:10:58,000
functions in Perl and I don't know

00:10:56,320 --> 00:11:01,390
anything really about Postgres functions

00:10:58,000 --> 00:11:04,480
but they allow you to kind of change

00:11:01,390 --> 00:11:06,250
data or massage it a little bit I guess

00:11:04,480 --> 00:11:08,500
so that's something you might want to

00:11:06,250 --> 00:11:11,260
look at if you if you got in that deep

00:11:08,500 --> 00:11:13,210
and then finally there's some my sequel

00:11:11,260 --> 00:11:15,070
gotchas that are kind of interesting and

00:11:13,210 --> 00:11:19,680
there's a link to those you can you can

00:11:15,070 --> 00:11:22,690
look through and then our final Y is

00:11:19,680 --> 00:11:25,510
apparently 84% of rails developers

00:11:22,690 --> 00:11:27,310
prefer Postgres there's quite a few that

00:11:25,510 --> 00:11:29,140
were surveyed and that numbers been

00:11:27,310 --> 00:11:31,570
increasing over the years of the survey

00:11:29,140 --> 00:11:35,170
you know for what it's worth that's I

00:11:31,570 --> 00:11:39,730
just found that very interesting so as

00:11:35,170 --> 00:11:42,580
far as converting conversion is

00:11:39,730 --> 00:11:45,100
basically a three-step process it can

00:11:42,580 --> 00:11:47,230
get pretty complicated but first off you

00:11:45,100 --> 00:11:49,120
just want to convert your schema and my

00:11:47,230 --> 00:11:52,690
sequel dump actually has a flag that you

00:11:49,120 --> 00:11:55,000
can use compatible Postgres it kind of

00:11:52,690 --> 00:11:57,640
gets you most of the way there but it's

00:11:55,000 --> 00:11:59,260
not all the way the datatypes are a

00:11:57,640 --> 00:12:02,080
little bit different they're just called

00:11:59,260 --> 00:12:04,090
different things the auto increment is

00:12:02,080 --> 00:12:05,920
done differently in Postgres so you're

00:12:04,090 --> 00:12:08,080
probably gonna have to kind of change

00:12:05,920 --> 00:12:10,840
and alter that dump that they give you

00:12:08,080 --> 00:12:13,240
to start with and then you're gonna want

00:12:10,840 --> 00:12:14,980
to convert your data and you know it's

00:12:13,240 --> 00:12:18,340
suggested that you have scripts to do

00:12:14,980 --> 00:12:19,930
this so you would you would have the

00:12:18,340 --> 00:12:21,670
script to run over your data and then

00:12:19,930 --> 00:12:24,400
you can run it multiple times as you get

00:12:21,670 --> 00:12:25,870
better and better and then finally you

00:12:24,400 --> 00:12:28,420
might want to look at your application

00:12:25,870 --> 00:12:30,550
and see what kind of sequel queries it's

00:12:28,420 --> 00:12:33,820
using and how you might need to change

00:12:30,550 --> 00:12:37,450
those to fit more than Postgres you know

00:12:33,820 --> 00:12:39,700
datatypes or whatever but there are a

00:12:37,450 --> 00:12:42,250
couple resources one is one of my

00:12:39,700 --> 00:12:45,070
co-workers wrote a little blog post

00:12:42,250 --> 00:12:47,260
about experience with the client which I

00:12:45,070 --> 00:12:50,290
thought was really interesting and then

00:12:47,260 --> 00:12:52,510
there's some tools you might be able to

00:12:50,290 --> 00:12:55,540
use I couldn't find anyone on our teams

00:12:52,510 --> 00:12:56,980
that have tried these but they might do

00:12:55,540 --> 00:12:59,529
a better job than the

00:12:56,980 --> 00:13:05,079
on the last screen and also the Postgres

00:12:59,529 --> 00:13:09,639
wiki has a lot of resources as well so

00:13:05,079 --> 00:13:11,500
tools and tips to install it's really

00:13:09,639 --> 00:13:14,800
easy you can just do a Google search on

00:13:11,500 --> 00:13:16,480
the words install Postgres and then Mac

00:13:14,800 --> 00:13:18,279
also has a one-click

00:13:16,480 --> 00:13:21,820
app that you can get Postgres installed

00:13:18,279 --> 00:13:24,639
really quickly if you use a Mac and then

00:13:21,820 --> 00:13:28,360
as far as the psql client that's the

00:13:24,639 --> 00:13:29,980
interactive terminal akin to MySQL so

00:13:28,360 --> 00:13:32,380
when you enter that you can do these

00:13:29,980 --> 00:13:35,350
backslash commands which are the meta

00:13:32,380 --> 00:13:37,269
commands you can also type your sequel

00:13:35,350 --> 00:13:39,910
queries but these yeah you could define

00:13:37,269 --> 00:13:42,970
you could you could describe tables with

00:13:39,910 --> 00:13:44,800
backslash DT or that would show the

00:13:42,970 --> 00:13:46,899
tables and then to define it or describe

00:13:44,800 --> 00:13:50,110
it you would do backslash D and then the

00:13:46,899 --> 00:13:56,529
table lamp the most important might be

00:13:50,110 --> 00:14:00,730
how to quit bank /q and that's about it

00:13:56,529 --> 00:14:04,240
there so as far as entering queries go

00:14:00,730 --> 00:14:06,730
it's just like my sequel with semicolon

00:14:04,240 --> 00:14:08,620
or backslash G now the one thing that I

00:14:06,730 --> 00:14:10,750
like to view a lot and my sequel is use

00:14:08,620 --> 00:14:13,510
a backslash capital G which gives you

00:14:10,750 --> 00:14:16,480
vertical columns instead of horizontal

00:14:13,510 --> 00:14:20,440
so to do that you can use the backslash

00:14:16,480 --> 00:14:22,540
X flag which if you're if you're just

00:14:20,440 --> 00:14:24,160
wanting to do it for one query you can

00:14:22,540 --> 00:14:27,490
do an example here like you type your

00:14:24,160 --> 00:14:30,279
sequel backslash X backslash G backslash

00:14:27,490 --> 00:14:31,839
X and that will turn it on run your

00:14:30,279 --> 00:14:33,699
sequel that you type just before and

00:14:31,839 --> 00:14:35,350
then turn it back off again otherwise

00:14:33,699 --> 00:14:38,290
you could just turn it on with backslash

00:14:35,350 --> 00:14:42,360
X and then type away but that would give

00:14:38,290 --> 00:14:42,360
you an output like in the example here

00:14:43,740 --> 00:14:49,870
also when you're in that terminal if you

00:14:47,199 --> 00:14:53,050
type ctrl R and start typing

00:14:49,870 --> 00:14:54,100
it'll get back to it'll look back

00:14:53,050 --> 00:14:56,019
through your history of what you type

00:14:54,100 --> 00:14:58,420
previously and then you can hit tab and

00:14:56,019 --> 00:15:00,670
just run that same query again so that

00:14:58,420 --> 00:15:03,310
could be really useful and then like my

00:15:00,670 --> 00:15:06,100
sequel it has a dot my dot Postgres

00:15:03,310 --> 00:15:08,990
history file so you can figure out what

00:15:06,100 --> 00:15:11,270
co-workers might have done

00:15:08,990 --> 00:15:13,400
that is only hand so is there any

00:15:11,270 --> 00:15:19,450
questions or comments on

00:15:13,400 --> 00:15:19,450
Postgres yes

00:15:42,980 --> 00:15:45,670
okay

00:15:52,960 --> 00:15:58,000
so I'm just going to repeat for the

00:15:54,730 --> 00:16:00,850
camera but the PG pearl and then the pl

00:15:58,000 --> 00:16:03,430
is that the pl pearl as well the pl

00:16:00,850 --> 00:16:04,899
pearl is the two right stored functions

00:16:03,430 --> 00:16:07,540
so for example you could do that on a

00:16:04,899 --> 00:16:08,920
trigger and as a trigger and have it run

00:16:07,540 --> 00:16:10,959
a lot of code that would insert data

00:16:08,920 --> 00:16:14,220
into other tables I've seen that Ricki

00:16:10,959 --> 00:16:14,220
use that like an audit tool

00:16:24,230 --> 00:16:26,950
right

00:16:30,160 --> 00:16:34,450
so it's not it's it's internal today

00:16:32,950 --> 00:16:36,010
baits not external so you wouldn't be

00:16:34,450 --> 00:16:41,470
able to run tests on that it's like one

00:16:36,010 --> 00:16:45,300
of the disadvantages I guess yeah okay

00:16:41,470 --> 00:16:45,300
thanks yeah

00:16:50,960 --> 00:16:56,770
I'm sorry was that huh

00:16:56,990 --> 00:17:04,500
yeah as far as transactions go the so

00:17:02,040 --> 00:17:07,860
the psql client it does support

00:17:04,500 --> 00:17:11,520
transactions and it it however I think

00:17:07,860 --> 00:17:14,970
is it commits by default so you want to

00:17:11,520 --> 00:17:18,860
start off with begin semicolon and then

00:17:14,970 --> 00:17:29,250
type your stuff and then you can do yeah

00:17:18,860 --> 00:17:32,090
yes the same syntax anybody else okay

00:17:29,250 --> 00:17:32,090

YouTube URL: https://www.youtube.com/watch?v=sH41r_MOSH0


