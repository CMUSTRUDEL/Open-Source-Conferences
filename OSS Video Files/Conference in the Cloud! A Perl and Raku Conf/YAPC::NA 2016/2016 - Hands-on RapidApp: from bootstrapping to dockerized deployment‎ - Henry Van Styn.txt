Title: 2016 - Hands-on RapidApp: from bootstrapping to dockerized deploymentâ€Ž - Henry Van Styn
Publication date: 2016-06-27
Playlist: YAPC::NA 2016
Description: 
	
Captions: 
	00:00:00,740 --> 00:00:07,560
thank you all for coming this is my

00:00:03,540 --> 00:00:10,860
third year of talks about wrap it up at

00:00:07,560 --> 00:00:14,670
yep see and once again like previous

00:00:10,860 --> 00:00:16,350
years i have a action-packed tons of

00:00:14,670 --> 00:00:19,460
content lined up that i hope you guys

00:00:16,350 --> 00:00:22,170
enjoy this is running a bit long so

00:00:19,460 --> 00:00:24,449
there probably won't be time for

00:00:22,170 --> 00:00:27,269
questions but come and see me after if

00:00:24,449 --> 00:00:30,269
you have questions and also always come

00:00:27,269 --> 00:00:32,579
into the pound rapid app channel on IRC

00:00:30,269 --> 00:00:37,530
and you can always ask questions in

00:00:32,579 --> 00:00:40,230
there okay so um some background info

00:00:37,530 --> 00:00:43,860
rapid app is it's a development

00:00:40,230 --> 00:00:48,030
framework and ecosystem it's toolkit

00:00:43,860 --> 00:00:51,030
utilities components and apps it's part

00:00:48,030 --> 00:00:53,969
of the larger DVI x-class plaque and

00:00:51,030 --> 00:00:55,800
catalyst ecosystems so some familiarity

00:00:53,969 --> 00:00:58,489
with those tools is assumed for this

00:00:55,800 --> 00:01:00,870
talk but not strictly necessary and

00:00:58,489 --> 00:01:03,989
without be laboring the point rapid app

00:01:00,870 --> 00:01:06,930
is really good at database stuff so

00:01:03,989 --> 00:01:09,180
previous talks I've focused on giving

00:01:06,930 --> 00:01:12,090
examples of all the many interfaces

00:01:09,180 --> 00:01:13,860
which rapid app is able to generate lots

00:01:12,090 --> 00:01:16,500
of features showing all those things

00:01:13,860 --> 00:01:20,820
giving examples of using existing

00:01:16,500 --> 00:01:24,360
databases and apps snap-in pre-built psg

00:01:20,820 --> 00:01:27,200
I components and if you haven't seen

00:01:24,360 --> 00:01:31,079
those talks I the videos are online

00:01:27,200 --> 00:01:33,360
definitely check those out but for

00:01:31,079 --> 00:01:36,000
today's talk we're going to be talking

00:01:33,360 --> 00:01:39,210
about new applications development from

00:01:36,000 --> 00:01:41,340
scratch and the development work flows

00:01:39,210 --> 00:01:44,670
that are enabled by rapid app in order

00:01:41,340 --> 00:01:47,220
to do that so our agenda we're going to

00:01:44,670 --> 00:01:49,409
develop a new application right here

00:01:47,220 --> 00:01:51,600
today during this talk it's going to be

00:01:49,409 --> 00:01:54,390
a server log analyzer which I'll explain

00:01:51,600 --> 00:01:56,610
more in a moment we'll bootstrap this

00:01:54,390 --> 00:01:59,790
with rapid app PL which is the rapid up

00:01:56,610 --> 00:02:02,369
bootstrap script will create a model IE

00:01:59,790 --> 00:02:04,950
database schema or write some business

00:02:02,369 --> 00:02:07,619
logic will customize some interfaces and

00:02:04,950 --> 00:02:10,580
we'll go over the iterative development

00:02:07,619 --> 00:02:12,510
workflows that wrap it up enables and

00:02:10,580 --> 00:02:13,319
then finally we'll deploy our

00:02:12,510 --> 00:02:15,180
application

00:02:13,319 --> 00:02:17,939
docker will talk about through the

00:02:15,180 --> 00:02:19,859
features of the new rap epsg I image

00:02:17,939 --> 00:02:22,019
which is available on docker hub which

00:02:19,859 --> 00:02:24,749
can be used for production deployment

00:02:22,019 --> 00:02:27,060
and also for development as this is now

00:02:24,749 --> 00:02:32,150
the fastest way to install the wrap it

00:02:27,060 --> 00:02:35,069
up stack alright so disclaimer Tim toady

00:02:32,150 --> 00:02:38,370
this is just one way to use wrap it up

00:02:35,069 --> 00:02:40,139
for one scenario and also some of this

00:02:38,370 --> 00:02:43,260
that i will show will reflect some of my

00:02:40,139 --> 00:02:44,730
personal styles and preferences which

00:02:43,260 --> 00:02:47,370
are by no means the only way to do

00:02:44,730 --> 00:02:51,629
things extrapolating and adapting for

00:02:47,370 --> 00:02:53,310
your own workflows is encouraged wrap it

00:02:51,629 --> 00:02:55,739
up was designed from the ground up for

00:02:53,310 --> 00:02:57,209
flexibility and that's actually one of

00:02:55,739 --> 00:02:59,280
the reasons that i haven't given a talk

00:02:57,209 --> 00:03:01,439
like this before is I didn't want to

00:02:59,280 --> 00:03:02,969
imply they want a pigeonhole and give

00:03:01,439 --> 00:03:04,829
the impression that this is the only way

00:03:02,969 --> 00:03:06,780
to use rapid out the only way to

00:03:04,829 --> 00:03:10,169
approach application development and

00:03:06,780 --> 00:03:13,079
isn't so let's talk about model driven

00:03:10,169 --> 00:03:16,560
development which is a general

00:03:13,079 --> 00:03:18,659
methodology that if you follow wrap it

00:03:16,560 --> 00:03:20,669
out will provide the most useful

00:03:18,659 --> 00:03:22,680
benefits and this simply means that you

00:03:20,669 --> 00:03:25,859
start your app developing your

00:03:22,680 --> 00:03:28,439
application by creating your data model

00:03:25,859 --> 00:03:30,509
that is the objects the attributes and

00:03:28,439 --> 00:03:34,439
their relationships that represent the

00:03:30,509 --> 00:03:36,090
core of your application and when we're

00:03:34,439 --> 00:03:38,519
talking relational databases which we

00:03:36,090 --> 00:03:41,790
are these are tables columns and foreign

00:03:38,519 --> 00:03:44,840
keys among other things then you write

00:03:41,790 --> 00:03:48,419
your business logic and your interfaces

00:03:44,840 --> 00:03:50,819
after you've created that model and when

00:03:48,419 --> 00:03:52,979
you follow this approach this is the

00:03:50,819 --> 00:03:59,040
stage where rapid app is most helpful is

00:03:52,979 --> 00:04:00,719
in creating these interfaces so also we

00:03:59,040 --> 00:04:03,000
want to want to talk about in show is

00:04:00,719 --> 00:04:04,919
iterative development process in the

00:04:03,000 --> 00:04:06,810
real world of developing an app and

00:04:04,919 --> 00:04:09,719
modifying it is as you go through this

00:04:06,810 --> 00:04:12,239
process you will realize that your model

00:04:09,719 --> 00:04:15,090
is inadequate and then you come back

00:04:12,239 --> 00:04:18,269
around and you start back and update the

00:04:15,090 --> 00:04:20,489
model and continue to do that so this

00:04:18,269 --> 00:04:22,680
being a software conference and this

00:04:20,489 --> 00:04:23,450
being a talk partially about style I

00:04:22,680 --> 00:04:24,860
should probably

00:04:23,450 --> 00:04:27,890
mention that no i do not advocate

00:04:24,860 --> 00:04:31,310
actually using go to in your code so

00:04:27,890 --> 00:04:33,380
let's fix that that's better alright

00:04:31,310 --> 00:04:35,150
well while we reading pseudocode well at

00:04:33,380 --> 00:04:36,500
some point at some point we'll get to

00:04:35,150 --> 00:04:40,730
the finish line so we should probably

00:04:36,500 --> 00:04:43,760
fix it that way but for my experience in

00:04:40,730 --> 00:04:47,200
the real world the actual condition that

00:04:43,760 --> 00:04:49,310
ends development is this as they say

00:04:47,200 --> 00:04:51,770
great works are never finished their

00:04:49,310 --> 00:04:54,890
only abandoned so rapid app helps you

00:04:51,770 --> 00:05:00,230
get more cycles in before you have to

00:04:54,890 --> 00:05:03,940
stop okay so let's talk about schema

00:05:00,230 --> 00:05:07,850
creation in the realm of again this is

00:05:03,940 --> 00:05:10,130
part of the DB IX class ecosystem and in

00:05:07,850 --> 00:05:12,140
that ecosystem there's two general

00:05:10,130 --> 00:05:15,950
approaches for writing us for developing

00:05:12,140 --> 00:05:19,130
a schema you can write your DB IX class

00:05:15,950 --> 00:05:22,070
schema first by hand you write result

00:05:19,130 --> 00:05:24,920
classes by hand one per source or table

00:05:22,070 --> 00:05:26,060
there's tools like DB IX class candy

00:05:24,920 --> 00:05:31,580
which makes it's a little less tedious

00:05:26,060 --> 00:05:33,350
and then you deploy your your schema to

00:05:31,580 --> 00:05:35,870
the actual database with the deployment

00:05:33,350 --> 00:05:38,300
it the other approach is to create the

00:05:35,870 --> 00:05:40,730
schema on the database first so you use

00:05:38,300 --> 00:05:43,670
a database client tool or native ddl

00:05:40,730 --> 00:05:46,580
which ddl data definition language these

00:05:43,670 --> 00:05:49,130
are this is the SQL that is your create

00:05:46,580 --> 00:05:52,670
table statements and the like and then

00:05:49,130 --> 00:05:56,960
you generate your DB IC schema with

00:05:52,670 --> 00:06:00,320
schema loader so there's pros and cons

00:05:56,960 --> 00:06:01,970
of each approach the DVI x-class schema

00:06:00,320 --> 00:06:04,970
first you're staying in one language

00:06:01,970 --> 00:06:07,490
pearl its database agnostic now it's the

00:06:04,970 --> 00:06:10,970
same code for my sequels SQLite postgres

00:06:07,490 --> 00:06:14,270
and it is the more anyway if you're into

00:06:10,970 --> 00:06:15,950
that sort of thing ddl first though it's

00:06:14,270 --> 00:06:17,750
generally faster it's less code it's

00:06:15,950 --> 00:06:19,910
just faster to write and you can also

00:06:17,750 --> 00:06:21,710
have more fine-grained control you can

00:06:19,910 --> 00:06:24,980
utilize fancy features of your database

00:06:21,710 --> 00:06:28,640
triggers special rules for how you set

00:06:24,980 --> 00:06:30,500
up your indexes and what have you also

00:06:28,640 --> 00:06:33,770
for my experience it's ddl is

00:06:30,500 --> 00:06:35,420
unavoidable um in the end anyway later

00:06:33,770 --> 00:06:36,860
on when you're doing migrations after

00:06:35,420 --> 00:06:39,379
you have deployed your app and you

00:06:36,860 --> 00:06:40,520
have data out there and now you need to

00:06:39,379 --> 00:06:41,840
release a new version of your

00:06:40,520 --> 00:06:44,750
application and you need to change your

00:06:41,840 --> 00:06:46,969
schema you know yes you can do things

00:06:44,750 --> 00:06:48,650
like use fixtures and DVI see migrations

00:06:46,969 --> 00:06:51,349
and copy code around and modify things

00:06:48,650 --> 00:06:54,669
and stay all but generally you end up

00:06:51,349 --> 00:06:58,189
just doing ultra table statements so ddl

00:06:54,669 --> 00:07:01,069
and another point if you go with DD l

00:06:58,189 --> 00:07:02,930
first you can still deploy your

00:07:01,069 --> 00:07:05,030
generated schema to another back end

00:07:02,930 --> 00:07:07,699
later and this is the this is the style

00:07:05,030 --> 00:07:11,289
that works for me personally I develop

00:07:07,699 --> 00:07:15,650
applications by writing writing ddl in

00:07:11,289 --> 00:07:17,419
SQLite and then I deploy it to my sequel

00:07:15,650 --> 00:07:22,129
or postgres later on for production and

00:07:17,419 --> 00:07:24,229
that works just fine so for today's for

00:07:22,129 --> 00:07:27,650
today's application and of course my

00:07:24,229 --> 00:07:33,259
time this is the 24 hour mark my time

00:07:27,650 --> 00:07:35,629
out fer oops thanks for today's

00:07:33,259 --> 00:07:39,740
application I'm going to follow the ddl

00:07:35,629 --> 00:07:41,539
first approach SQLite flavor and we're

00:07:39,740 --> 00:07:42,979
going to use the rapid app bootstrapping

00:07:41,539 --> 00:07:45,139
helpers and utilities that are designed

00:07:42,979 --> 00:07:46,699
specifically for this workflow which is

00:07:45,139 --> 00:07:49,729
we're going to develop an application by

00:07:46,699 --> 00:07:51,620
writing ddl and generate a schema from

00:07:49,729 --> 00:07:54,050
that and then this also will provide

00:07:51,620 --> 00:07:55,849
automation for regenerating the database

00:07:54,050 --> 00:07:59,120
from the ddl over and over again for

00:07:55,849 --> 00:08:01,069
this iterative approach so let's do

00:07:59,120 --> 00:08:03,620
bootstrap let's bootstrap so the

00:08:01,069 --> 00:08:06,620
bootstrap script rapid fpl ships with

00:08:03,620 --> 00:08:09,610
rapid app it's based on the catalyst

00:08:06,620 --> 00:08:13,099
bootstrapper catalyst up PL but it's

00:08:09,610 --> 00:08:14,599
significantly more advanced it has the

00:08:13,099 --> 00:08:16,219
first argument that you pass to it as

00:08:14,599 --> 00:08:17,779
you give it a list of helpers which are

00:08:16,219 --> 00:08:19,250
different modes that are available for

00:08:17,779 --> 00:08:22,180
bootstrapping an application that will

00:08:19,250 --> 00:08:24,379
jump you straight to different scenarios

00:08:22,180 --> 00:08:26,750
today we're going to be using the rapid

00:08:24,379 --> 00:08:29,419
DB IC helper which is the most standard

00:08:26,750 --> 00:08:31,189
common way that rapid app is used it

00:08:29,419 --> 00:08:33,979
bootstraps an application with the rapid

00:08:31,189 --> 00:08:36,589
DB IC plugin which just gets you

00:08:33,979 --> 00:08:38,750
straight to a main application interface

00:08:36,589 --> 00:08:41,269
with a navigation tree and tab content

00:08:38,750 --> 00:08:43,729
panel with menu points for each source

00:08:41,269 --> 00:08:47,630
from your schema then you supply the

00:08:43,729 --> 00:08:49,690
class name same as catalyst PL we were

00:08:47,630 --> 00:08:51,700
going to call our application rapid demo

00:08:49,690 --> 00:08:54,580
log view i'll explain what this does in

00:08:51,700 --> 00:08:56,620
a moment and then you can supply

00:08:54,580 --> 00:09:00,700
additional arguments to the helpers

00:08:56,620 --> 00:09:02,470
after the double dash so for today we're

00:09:00,700 --> 00:09:06,310
going to be used this special option to

00:09:02,470 --> 00:09:08,530
wrap a DB IC which is blank ddl which is

00:09:06,310 --> 00:09:10,390
specifically it's going to bootstrap an

00:09:08,530 --> 00:09:12,880
application and set us up for this

00:09:10,390 --> 00:09:14,310
workflow for following this approach so

00:09:12,880 --> 00:09:17,170
we're going to run this here in a moment

00:09:14,310 --> 00:09:18,460
but what this is going to do is it's

00:09:17,170 --> 00:09:20,350
going to create our application

00:09:18,460 --> 00:09:23,530
directory same as catalyst it'll

00:09:20,350 --> 00:09:24,900
bootstrap our main application class but

00:09:23,530 --> 00:09:28,990
then it'll also it will initialize

00:09:24,900 --> 00:09:30,970
SQLite database it will generate our DB

00:09:28,990 --> 00:09:32,730
IC schema classes which are going to be

00:09:30,970 --> 00:09:36,400
empty to begin with us we're expecting

00:09:32,730 --> 00:09:41,530
it'll generate our catalyst DB IC model

00:09:36,400 --> 00:09:45,370
as well as configs which we'll see and

00:09:41,530 --> 00:09:48,370
then also give us this file to where we

00:09:45,370 --> 00:09:50,710
put our DD l and then it'll also

00:09:48,370 --> 00:09:53,110
bootstrap with this updater script which

00:09:50,710 --> 00:09:55,180
we can then call later on and is what

00:09:53,110 --> 00:09:57,970
this will do is this will allow us to

00:09:55,180 --> 00:10:01,020
interactively bring our code forward

00:09:57,970 --> 00:10:03,460
after we make changes so we can now edit

00:10:01,020 --> 00:10:06,700
edit our dbl in this one location this

00:10:03,460 --> 00:10:08,410
one file and then re update and bring

00:10:06,700 --> 00:10:11,230
our code forward and this solves the

00:10:08,410 --> 00:10:13,270
chicken or the egg problem where you

00:10:11,230 --> 00:10:15,310
bootstrap you bootstrap an application

00:10:13,270 --> 00:10:18,190
but then you want to change things well

00:10:15,310 --> 00:10:24,460
you're going to do a reboot strap this

00:10:18,190 --> 00:10:27,600
solves that workflow for you ok all

00:10:24,460 --> 00:10:27,600
right so let's let's run it

00:10:32,319 --> 00:10:36,589
so first I should point out if you run

00:10:34,639 --> 00:10:38,089
the rapid app the PL script with no

00:10:36,589 --> 00:10:39,410
arguments it'll give you some usage and

00:10:38,089 --> 00:10:43,189
as you can see there's different modes

00:10:39,410 --> 00:10:45,559
different different choices so it is

00:10:43,189 --> 00:10:48,709
very comprehensive but we're going to be

00:10:45,559 --> 00:10:55,670
using this special blank ddl mode so

00:10:48,709 --> 00:10:59,149
we'll run that and there it's done let's

00:10:55,670 --> 00:11:00,800
take a look at what it just did so it's

00:10:59,149 --> 00:11:02,899
boots draft our application directory

00:11:00,800 --> 00:11:07,009
this is a standard pearl distribution we

00:11:02,899 --> 00:11:08,929
have our Lib directory our main

00:11:07,009 --> 00:11:12,259
application class which is bootstrapped

00:11:08,929 --> 00:11:14,269
and again it's catalyst bloating the the

00:11:12,259 --> 00:11:16,459
rapid DB IC plugin which that's the only

00:11:14,269 --> 00:11:18,470
thing that makes a rapid application a

00:11:16,459 --> 00:11:20,179
rapid app application is loading one or

00:11:18,470 --> 00:11:21,649
more rapid app plugins to a catalyst

00:11:20,179 --> 00:11:25,240
application that's what how rapid app

00:11:21,649 --> 00:11:29,119
works and we've also bootstrapped our

00:11:25,240 --> 00:11:33,259
our DB IC schema there's no schema

00:11:29,119 --> 00:11:37,189
result classes yet because it's blank we

00:11:33,259 --> 00:11:38,569
have our model need that which we'll

00:11:37,189 --> 00:11:43,220
look at here in a minute and it's

00:11:38,569 --> 00:11:45,290
bootstrapped our ddl file which here we

00:11:43,220 --> 00:11:47,179
can now start writing our schema our

00:11:45,290 --> 00:11:49,369
create table statement swell what do we

00:11:47,179 --> 00:11:51,049
want to write well before we know what

00:11:49,369 --> 00:11:53,059
scheming we're going to create we need

00:11:51,049 --> 00:11:55,069
to talk a bit about what our application

00:11:53,059 --> 00:11:57,379
is actually all about so what is this

00:11:55,069 --> 00:11:59,689
what is rapi demo log but what is the

00:11:57,379 --> 00:12:02,029
scope of our application so it's going

00:11:59,689 --> 00:12:04,850
to be a repository for web server logs

00:12:02,029 --> 00:12:06,889
we want to browse query and reporting on

00:12:04,850 --> 00:12:09,410
HTTP requests and we're going to use the

00:12:06,889 --> 00:12:12,589
standard Apache combined log format

00:12:09,410 --> 00:12:14,660
which I just chose this for an easy

00:12:12,589 --> 00:12:17,629
straightforward model to understand to

00:12:14,660 --> 00:12:19,549
illustrate the concepts which is more

00:12:17,629 --> 00:12:23,509
the reason rather than this being that

00:12:19,549 --> 00:12:24,649
useful of a nap people have if you deal

00:12:23,509 --> 00:12:27,079
with web stuff you've probably dealt

00:12:24,649 --> 00:12:28,670
with web server logs and they're

00:12:27,079 --> 00:12:31,579
obviously regularly available sample

00:12:28,670 --> 00:12:34,069
data that we can use ok so the Apache

00:12:31,579 --> 00:12:36,559
combined log format it's commonly used

00:12:34,069 --> 00:12:39,889
format flat files records one every

00:12:36,559 --> 00:12:41,089
request one line and it gives you Long's

00:12:39,889 --> 00:12:42,240
lens like this you've probably

00:12:41,089 --> 00:12:45,120
encountered these if you do

00:12:42,240 --> 00:12:49,290
stuff this is a space delimited list of

00:12:45,120 --> 00:12:52,380
attributes that translate to these these

00:12:49,290 --> 00:12:54,510
data points so let's start let's start

00:12:52,380 --> 00:12:57,660
from there and let's start let's create

00:12:54,510 --> 00:13:00,290
a table to represent these data points

00:12:57,660 --> 00:13:08,399
as our starting point so we'll come back

00:13:00,290 --> 00:13:11,120
and so now we can create table call it

00:13:08,399 --> 00:13:11,120
request log

00:13:16,310 --> 00:13:20,790
it's generally a good idea when it's not

00:13:19,320 --> 00:13:22,440
although not strictly necessary to

00:13:20,790 --> 00:13:26,130
always when you create a table too fine

00:13:22,440 --> 00:13:27,540
a auto increment primary key which this

00:13:26,130 --> 00:13:29,250
is how you do that nest you like you get

00:13:27,540 --> 00:13:31,050
an ID column so it gets a sequential

00:13:29,250 --> 00:13:32,940
number every time a new row is inserted

00:13:31,050 --> 00:13:36,860
and then after that we're just going to

00:13:32,940 --> 00:13:40,290
create the the attributes lower cased as

00:13:36,860 --> 00:13:42,870
text text columns for straightforward

00:13:40,290 --> 00:13:45,569
now you may notice I'm a really really

00:13:42,870 --> 00:13:46,889
fast coder like I type I pounded that

00:13:45,569 --> 00:13:49,920
out so fast you might have missed it

00:13:46,889 --> 00:13:51,690
like oh right if you blink you might

00:13:49,920 --> 00:13:54,630
miss how fast like type code out so full

00:13:51,690 --> 00:13:56,279
disclosure I do have edits pre-recorded

00:13:54,630 --> 00:13:59,250
just so that you don't have to wait for

00:13:56,279 --> 00:14:00,779
me to miss a semicolon and and waste

00:13:59,250 --> 00:14:02,069
time with that but other than that

00:14:00,779 --> 00:14:04,230
everything that I'm doing here is

00:14:02,069 --> 00:14:05,639
absolutely real live real-time we're

00:14:04,230 --> 00:14:07,709
really bootstrapping application we're

00:14:05,639 --> 00:14:10,649
really doing these things and you'll

00:14:07,709 --> 00:14:12,540
have you'll have access the end there's

00:14:10,649 --> 00:14:15,180
links to all the stuff that I'm doing

00:14:12,540 --> 00:14:18,319
today all the sequence of edits so that

00:14:15,180 --> 00:14:20,720
you can look at this later on okay so

00:14:18,319 --> 00:14:23,550
here's our first state for our table

00:14:20,720 --> 00:14:25,319
let's and it gives us it gives us some

00:14:23,550 --> 00:14:28,290
explanation about what's happening here

00:14:25,319 --> 00:14:30,389
just for help and it gives us the

00:14:28,290 --> 00:14:31,860
command that we run the updater command

00:14:30,389 --> 00:14:33,420
that we can now run to do this

00:14:31,860 --> 00:14:40,579
regeneration so let's go ahead and run

00:14:33,420 --> 00:14:43,740
that CD into our application directory

00:14:40,579 --> 00:14:45,600
and we'll run this now it's going to

00:14:43,740 --> 00:14:47,550
warn that this is going to blow away the

00:14:45,600 --> 00:14:49,889
database which we expect because we're

00:14:47,550 --> 00:14:52,319
in a development mode now we don't have

00:14:49,889 --> 00:14:53,550
real data this is for development once

00:14:52,319 --> 00:14:55,529
we release an application and we

00:14:53,550 --> 00:14:56,639
actually have customer data now we have

00:14:55,529 --> 00:14:59,040
to do migrations it's a much more

00:14:56,639 --> 00:15:01,350
complicated topic but for right now

00:14:59,040 --> 00:15:02,760
we're just regenerate we want to rapidly

00:15:01,350 --> 00:15:03,930
regenerate these things but it is going

00:15:02,760 --> 00:15:06,089
to warn you that this is what's going to

00:15:03,930 --> 00:15:12,089
happen so it makes you type go so we'll

00:15:06,089 --> 00:15:14,399
take go and it'll run okay done I'm now

00:15:12,089 --> 00:15:16,949
let's look at what that did if we come

00:15:14,399 --> 00:15:20,009
back in here we see that now we have

00:15:16,949 --> 00:15:22,230
it's generated a result set result class

00:15:20,009 --> 00:15:26,519
for that table and there's our our

00:15:22,230 --> 00:15:27,699
columns that we created until so it's

00:15:26,519 --> 00:15:33,369
updated

00:15:27,699 --> 00:15:37,079
our model config where this is the rapid

00:15:33,369 --> 00:15:40,839
DB IC plugin there's extra metadata that

00:15:37,079 --> 00:15:44,379
you can define that controls the

00:15:40,839 --> 00:15:46,869
behavior of interfaces for these various

00:15:44,379 --> 00:15:49,239
models in the interface in in the

00:15:46,869 --> 00:15:53,249
interfaces and there's this is this

00:15:49,239 --> 00:15:56,529
config section called table specs and

00:15:53,249 --> 00:15:58,480
this is this table specs these are

00:15:56,529 --> 00:15:59,919
actually all these values that are set

00:15:58,480 --> 00:16:03,339
up here which again this follows the

00:15:59,919 --> 00:16:06,040
this follows the schema this defaults

00:16:03,339 --> 00:16:08,379
these are actually all default values

00:16:06,040 --> 00:16:10,809
but the reason that it puts this here is

00:16:08,379 --> 00:16:12,609
based on user feedback one of the most

00:16:10,809 --> 00:16:14,109
confusing things that people found

00:16:12,609 --> 00:16:16,660
difficult than using and developing with

00:16:14,109 --> 00:16:19,119
rapid app is not understanding where all

00:16:16,660 --> 00:16:20,919
the different table spec options go not

00:16:19,119 --> 00:16:22,929
knowing the difference between column

00:16:20,919 --> 00:16:28,540
level options and source level options

00:16:22,929 --> 00:16:30,279
so the updater model script puts in

00:16:28,540 --> 00:16:31,540
these default values sort of as

00:16:30,279 --> 00:16:34,239
placeholders to give you as a developer

00:16:31,540 --> 00:16:36,069
a hint of where you can edit your

00:16:34,239 --> 00:16:38,350
configs and something very important

00:16:36,069 --> 00:16:40,959
that this does is this is a

00:16:38,350 --> 00:16:43,720
non-destructive update to where if we

00:16:40,959 --> 00:16:46,389
come in here and we modify these any of

00:16:43,720 --> 00:16:48,489
these values and then we run our update

00:16:46,389 --> 00:16:52,059
script later on it will not clobber our

00:16:48,489 --> 00:16:54,970
existing values but it'll update it'll

00:16:52,059 --> 00:16:59,379
update defaults I'll in line and

00:16:54,970 --> 00:17:02,709
intermix that with with your at your

00:16:59,379 --> 00:17:07,799
settings and it was a pain in the butt

00:17:02,709 --> 00:17:14,309
to do that with PP I so enjoy ok so

00:17:07,799 --> 00:17:14,309
we've we have our we have our schema

00:17:19,089 --> 00:17:25,429
right well they're not there they're

00:17:21,459 --> 00:17:27,380
their parameters that affect the GUI but

00:17:25,429 --> 00:17:29,600
they're not entirely and we'll see we

00:17:27,380 --> 00:17:31,130
will see this in a little more detail

00:17:29,600 --> 00:17:32,720
like if you if you're familiar with if

00:17:31,130 --> 00:17:34,429
you've seen wrap it up already you know

00:17:32,720 --> 00:17:36,169
what I'm talking about if you don't if

00:17:34,429 --> 00:17:37,520
you haven't you might not you might be

00:17:36,169 --> 00:17:40,070
confused about what these settings do

00:17:37,520 --> 00:17:43,309
but we'll see in a minute what what

00:17:40,070 --> 00:17:46,549
these do but before we get to that we

00:17:43,309 --> 00:17:49,610
need to we need to populate our database

00:17:46,549 --> 00:17:51,710
with with data so for that we're going

00:17:49,610 --> 00:17:56,000
to do I'm going to do this with a a

00:17:51,710 --> 00:17:59,210
script will create a script and let's

00:17:56,000 --> 00:18:04,549
see we'll say a new file let's call this

00:17:59,210 --> 00:18:08,780
parse PL and we're going to write this

00:18:04,549 --> 00:18:11,240
script where did you go and again I'm a

00:18:08,780 --> 00:18:14,990
super super fast code or I am Wham so

00:18:11,240 --> 00:18:18,080
we're going to just set this up to read

00:18:14,990 --> 00:18:21,080
in log files as an argument we're going

00:18:18,080 --> 00:18:23,750
to read it into a filehandle we're going

00:18:21,080 --> 00:18:25,250
to iterate the file handle and we're

00:18:23,750 --> 00:18:26,990
going to use this one of the wonderful

00:18:25,250 --> 00:18:30,049
things about pearl is that of course

00:18:26,990 --> 00:18:31,490
there are modules already on Sipan to

00:18:30,049 --> 00:18:36,080
parse the Apache combined format I

00:18:31,490 --> 00:18:39,919
grabbed one hears us simply using that

00:18:36,080 --> 00:18:44,030
to parse each of these lines into a hash

00:18:39,919 --> 00:18:45,980
ref and throw it into an array and we

00:18:44,030 --> 00:18:48,919
had so far we're not doing this is just

00:18:45,980 --> 00:18:50,990
straight straight pearl we're not doing

00:18:48,919 --> 00:18:53,059
anything lets you know the process let's

00:18:50,990 --> 00:18:54,410
dump that out and see what that gives us

00:18:53,059 --> 00:18:55,880
before we actually try to start throwing

00:18:54,410 --> 00:18:59,150
it into our database let's give that it

00:18:55,880 --> 00:19:01,700
will use handy-dandy data printer so

00:18:59,150 --> 00:19:03,710
let's come back over here see what this

00:19:01,700 --> 00:19:10,580
is going to look like we first we need

00:19:03,710 --> 00:19:13,640
some one thing I did not plan on is this

00:19:10,580 --> 00:19:15,380
angle all right i'll have some sample

00:19:13,640 --> 00:19:18,429
logs that i'm going to just copy into

00:19:15,380 --> 00:19:18,429
the repo

00:19:19,380 --> 00:19:31,830
and we if we look at this file we gonna

00:19:26,070 --> 00:19:37,350
see we see that here in a standard

00:19:31,830 --> 00:19:41,790
Apache combined log so let's run that

00:19:37,350 --> 00:19:43,920
through our purse script and that'll run

00:19:41,790 --> 00:19:45,600
through and then BOOM it'sit's parsing

00:19:43,920 --> 00:19:49,260
it in okay good so let's let's put it

00:19:45,600 --> 00:19:56,520
let's put it into the database come back

00:19:49,260 --> 00:19:58,170
over okay so first of all we need to we

00:19:56,520 --> 00:20:00,060
need to lower case the key names because

00:19:58,170 --> 00:20:02,070
the keys are capitalized for them but I

00:20:00,060 --> 00:20:04,110
use lower case which is again just a

00:20:02,070 --> 00:20:05,760
best sort of best practice convention to

00:20:04,110 --> 00:20:07,770
use lowercase column names you don't

00:20:05,760 --> 00:20:12,390
have to but I am so we need to deliver

00:20:07,770 --> 00:20:14,040
case that to match and then we will load

00:20:12,390 --> 00:20:18,540
our application and this is straight

00:20:14,040 --> 00:20:20,280
cattle dsl use we'll get our results set

00:20:18,540 --> 00:20:23,310
object which again this is the catalyst

00:20:20,280 --> 00:20:25,710
and DB IC dsl and then we're just call

00:20:23,310 --> 00:20:29,790
populate that should populate this in so

00:20:25,710 --> 00:20:32,100
let's see if it works so now we'll run

00:20:29,790 --> 00:20:35,610
our script again except this time it's

00:20:32,100 --> 00:20:36,900
going to load our application and okay

00:20:35,610 --> 00:20:40,610
it seems like it worked well let's see

00:20:36,900 --> 00:20:40,610
so we'll plaque up and take a look

00:20:45,500 --> 00:20:53,429
localhost 5000 by default okay so here

00:20:49,080 --> 00:20:56,610
we have our application you see a little

00:20:53,429 --> 00:21:02,429
bigger we have just one 1 entry request

00:20:56,610 --> 00:21:06,240
rose and we see that we have our data in

00:21:02,429 --> 00:21:08,820
there so it worked all right but we can

00:21:06,240 --> 00:21:11,669
do a lot better than this so far these

00:21:08,820 --> 00:21:12,779
are just text columns we can we're still

00:21:11,669 --> 00:21:15,600
getting this a lot further than just

00:21:12,779 --> 00:21:18,870
working with the log file we can sort we

00:21:15,600 --> 00:21:20,610
can build query conditions and again I'm

00:21:18,870 --> 00:21:22,529
not going to take time to dive into all

00:21:20,610 --> 00:21:24,330
the many features that are generated by

00:21:22,529 --> 00:21:26,490
wrap it up again check out specifically

00:21:24,330 --> 00:21:28,590
last year's talk for all the examples of

00:21:26,490 --> 00:21:31,730
the rich interactive capabilities this

00:21:28,590 --> 00:21:34,139
interface gives you out of the box

00:21:31,730 --> 00:21:37,380
anyway so we have we have some

00:21:34,139 --> 00:21:39,980
capabilities but we can do better one

00:21:37,380 --> 00:21:44,429
like this date format is not that useful

00:21:39,980 --> 00:21:45,960
because one that the day is comes first

00:21:44,429 --> 00:21:49,200
so sorting on that doesn't sort by

00:21:45,960 --> 00:21:50,730
anything useful and you know there's

00:21:49,200 --> 00:21:52,019
other things we're not so far we're not

00:21:50,730 --> 00:21:54,529
using the relational part of the

00:21:52,019 --> 00:21:56,700
relational database so like for instance

00:21:54,529 --> 00:21:59,100
one of the attributes that comes in is

00:21:56,700 --> 00:22:02,970
status HTTP status code so we know in

00:21:59,100 --> 00:22:05,820
advance we know in advance what these

00:22:02,970 --> 00:22:08,909
possible values can be so we can make

00:22:05,820 --> 00:22:12,320
that into a foreign key and and do some

00:22:08,909 --> 00:22:18,330
other things so let's let's hop back in

00:22:12,320 --> 00:22:22,529
to our DD l and let's start let's give

00:22:18,330 --> 00:22:24,210
some column types so we'll set some

00:22:22,529 --> 00:22:26,909
lengths for instance set some null

00:22:24,210 --> 00:22:30,899
ability make our status and bites

00:22:26,909 --> 00:22:33,029
integer columns and change change the

00:22:30,899 --> 00:22:35,220
date column to be a date time field but

00:22:33,029 --> 00:22:37,409
then this is going to require this is

00:22:35,220 --> 00:22:39,990
obviously formatted differently so we're

00:22:37,409 --> 00:22:41,010
going to have to now have back over to

00:22:39,990 --> 00:22:45,059
our script and we're going to have to

00:22:41,010 --> 00:22:48,149
parse that so this is just um parsing

00:22:45,059 --> 00:22:53,519
that format and converting it into the

00:22:48,149 --> 00:22:55,320
proper SQLite database date format and

00:22:53,519 --> 00:22:58,029
while we're at it let's consider those

00:22:55,320 --> 00:23:04,779
dashes that we saw those are undef

00:22:58,029 --> 00:23:07,960
so let's delete those keys and let's we

00:23:04,779 --> 00:23:09,580
have our HR status column that's let's

00:23:07,960 --> 00:23:11,889
make that a foreign key so let's create

00:23:09,580 --> 00:23:15,190
let's create another table will create

00:23:11,889 --> 00:23:16,899
an HTTP status table with the code and

00:23:15,190 --> 00:23:19,389
then give a description of what those

00:23:16,899 --> 00:23:20,710
codes mean and we can go ahead and pop

00:23:19,389 --> 00:23:22,419
we can go ahead and pre populate that

00:23:20,710 --> 00:23:24,969
because it's static we already know what

00:23:22,419 --> 00:23:26,830
HTTP status codes are so we can go ahead

00:23:24,969 --> 00:23:28,629
and insert those values and populate

00:23:26,830 --> 00:23:30,489
them right here again it's just one way

00:23:28,629 --> 00:23:33,099
to do it we could have also done a

00:23:30,489 --> 00:23:36,039
population within logic within our DB I

00:23:33,099 --> 00:23:39,279
see classes again more than one way to

00:23:36,039 --> 00:23:43,509
do these things so we have our HTTP

00:23:39,279 --> 00:23:46,089
status now let's um let's convert status

00:23:43,509 --> 00:23:50,379
into a foreign key so now it's a foreign

00:23:46,089 --> 00:23:58,559
key that references that okay so let's

00:23:50,379 --> 00:24:03,070
let's regenerate and give this a try so

00:23:58,559 --> 00:24:04,929
and this time we'll give it will give a

00:24:03,070 --> 00:24:14,729
tech tech goes what doesn't ask us to

00:24:04,929 --> 00:24:14,729
confirm regenerate and let's parse again

00:24:15,570 --> 00:24:21,669
because we just blew away our database

00:24:17,619 --> 00:24:23,879
so it's empty now all right let's plaque

00:24:21,669 --> 00:24:23,879
up

00:24:34,890 --> 00:24:40,440
alright so we're getting somewhere now

00:24:37,970 --> 00:24:42,450
we see that we have date columns how

00:24:40,440 --> 00:24:45,690
well can you see that back there is it

00:24:42,450 --> 00:24:47,550
too small a little bit bigger and we

00:24:45,690 --> 00:24:49,890
have date columns we can sort by actual

00:24:47,550 --> 00:24:57,870
date column that we build if we build a

00:24:49,890 --> 00:24:59,220
filter we can do it based on and this is

00:24:57,870 --> 00:25:01,290
you know part of the benefit of rapid

00:24:59,220 --> 00:25:03,750
app is it understands these data types

00:25:01,290 --> 00:25:05,960
so because it knows that this is a date

00:25:03,750 --> 00:25:09,150
column it's going to give us date

00:25:05,960 --> 00:25:11,610
specific capabilities so like we can say

00:25:09,150 --> 00:25:13,440
after and we can have a calendar date

00:25:11,610 --> 00:25:18,270
selector and it also supports stuff like

00:25:13,440 --> 00:25:20,040
relative dates where you can type in a

00:25:18,270 --> 00:25:24,840
relative date and a syntax it's like

00:25:20,040 --> 00:25:26,520
minus two weeks all right and then

00:25:24,840 --> 00:25:28,800
that's that's filtered it down for us

00:25:26,520 --> 00:25:31,140
and then we also see our status column

00:25:28,800 --> 00:25:33,120
now it's still there but now there's a

00:25:31,140 --> 00:25:35,460
little magnifying glass next to the

00:25:33,120 --> 00:25:38,970
values and that's because it's a foreign

00:25:35,460 --> 00:25:40,830
key and it's pointing to the related row

00:25:38,970 --> 00:25:44,310
and we can actually click that to follow

00:25:40,830 --> 00:25:47,520
over there so here is a row for the for

00:25:44,310 --> 00:25:52,020
the 200 row and we see the other

00:25:47,520 --> 00:25:53,340
direction we have request rose this we

00:25:52,020 --> 00:25:54,750
have three columns here we only remember

00:25:53,340 --> 00:25:56,520
we only created we only created two

00:25:54,750 --> 00:25:59,310
columns but there's three here this

00:25:56,520 --> 00:26:00,660
request logs is the multi relationship

00:25:59,310 --> 00:26:04,080
which is the inverse of the foreign key

00:26:00,660 --> 00:26:06,090
that points back so we can see what are

00:26:04,080 --> 00:26:10,320
all of the requests rose that point to

00:26:06,090 --> 00:26:13,820
us and like we see here 872 and we can

00:26:10,320 --> 00:26:17,760
follow that and go to just a grid of

00:26:13,820 --> 00:26:20,610
specifically that set we can look of

00:26:17,760 --> 00:26:23,130
course are we have two tables here now m

00:26:20,610 --> 00:26:25,380
and we can you know here's a view of all

00:26:23,130 --> 00:26:27,900
of our status codes and this this

00:26:25,380 --> 00:26:30,690
virtual column is sortable so we can

00:26:27,900 --> 00:26:33,000
sort and it's it's the value that it

00:26:30,690 --> 00:26:37,040
represents is account and it's a link to

00:26:33,000 --> 00:26:40,860
that set so we can see you know 872 okay

00:26:37,040 --> 00:26:43,770
558 307 and we can look at let's look at

00:26:40,860 --> 00:26:44,470
just those eight records that were 404

00:26:43,770 --> 00:26:46,990
and that

00:26:44,470 --> 00:26:50,470
pulls that up for us okay so we're

00:26:46,990 --> 00:26:52,299
getting somewhere let some back to the

00:26:50,470 --> 00:26:53,980
table star so you asked about come to

00:26:52,299 --> 00:27:00,130
infusion what is these tape table spec

00:26:53,980 --> 00:27:03,159
options so the table specs allow us to

00:27:00,130 --> 00:27:04,929
define extra metadata that's relative to

00:27:03,159 --> 00:27:06,970
the interface that's above and beyond

00:27:04,929 --> 00:27:10,030
what the schema cares about like our

00:27:06,970 --> 00:27:11,830
database doesn't care about render about

00:27:10,030 --> 00:27:16,720
the render function our database doesn't

00:27:11,830 --> 00:27:18,789
care about those front end features but

00:27:16,720 --> 00:27:20,530
we do so we can set and there's some

00:27:18,789 --> 00:27:22,919
examples that are set here like you can

00:27:20,530 --> 00:27:25,000
define a renderer which is a JavaScript

00:27:22,919 --> 00:27:26,830
function name of you define in your

00:27:25,000 --> 00:27:29,140
environment and then it will when it's

00:27:26,830 --> 00:27:30,940
rendering that value it will pass it

00:27:29,140 --> 00:27:34,600
through that function and then there's

00:27:30,940 --> 00:27:38,260
also pre-built what we call column

00:27:34,600 --> 00:27:40,750
profiles that give us the ability of

00:27:38,260 --> 00:27:43,179
assets set up multiple options according

00:27:40,750 --> 00:27:45,880
to some scenario so like for instance we

00:27:43,179 --> 00:27:48,789
have our bytes column there's a column

00:27:45,880 --> 00:27:52,240
profile file size which says this is a

00:27:48,789 --> 00:27:54,760
this is a column that contains a file

00:27:52,240 --> 00:27:57,250
size so it's going to automatically set

00:27:54,760 --> 00:27:59,919
up for us an appropriate render or an

00:27:57,250 --> 00:28:04,000
appropriate validator for that type of

00:27:59,919 --> 00:28:07,299
input and we'll see that work and then

00:28:04,000 --> 00:28:10,659
there's also free to find defaults for

00:28:07,299 --> 00:28:11,590
like column widths default headers which

00:28:10,659 --> 00:28:15,130
you can actually change some of these

00:28:11,590 --> 00:28:17,530
things in the interface let's set some

00:28:15,130 --> 00:28:19,390
other options we're not for our data

00:28:17,530 --> 00:28:21,429
there's not any ident or auth user

00:28:19,390 --> 00:28:23,409
values so let's start those off as

00:28:21,429 --> 00:28:25,750
hidden for instance and we can say

00:28:23,409 --> 00:28:29,530
hidden one this is there's extensive

00:28:25,750 --> 00:28:34,090
list of table spec properties to tweak

00:28:29,530 --> 00:28:36,280
these things that you can see in the

00:28:34,090 --> 00:28:40,150
manual online the table spec manual for

00:28:36,280 --> 00:28:45,610
wrap it up on medicine fam ok so let's

00:28:40,150 --> 00:28:49,780
um we can do more also we we created a

00:28:45,610 --> 00:28:52,780
foreign key out of our status let's

00:28:49,780 --> 00:28:55,809
create a foreign key out of let's create

00:28:52,780 --> 00:28:57,460
a foreign key out of the host so let's

00:28:55,809 --> 00:29:02,220
create another table

00:28:57,460 --> 00:29:05,559
toast and make it a foreign key also now

00:29:02,220 --> 00:29:09,159
this time we have to we're going to have

00:29:05,559 --> 00:29:10,539
to make some changes to our parse script

00:29:09,159 --> 00:29:13,990
because we're going to need to

00:29:10,539 --> 00:29:16,000
pre-populate we don't know the values in

00:29:13,990 --> 00:29:17,620
advance so we need to handle that some

00:29:16,000 --> 00:29:19,090
way we could and again there's multiple

00:29:17,620 --> 00:29:22,350
ways to do this I'm doing it here in the

00:29:19,090 --> 00:29:26,010
script to make it simpler and quicker is

00:29:22,350 --> 00:29:29,230
we will iterate before we before we

00:29:26,010 --> 00:29:31,480
populate we will pre-populate using

00:29:29,230 --> 00:29:34,690
finder create again this is DB IC dsl

00:29:31,480 --> 00:29:37,899
straight stuff find and create find or

00:29:34,690 --> 00:29:40,690
create a row the first time we see an IP

00:29:37,899 --> 00:29:42,159
address and since we're doing two steps

00:29:40,690 --> 00:29:44,649
here let's go ahead and add to print

00:29:42,159 --> 00:29:50,399
lines to show what that's going to look

00:29:44,649 --> 00:29:55,059
like okay so let's go ahead and

00:29:50,399 --> 00:29:58,539
regenerate again I'm just going to run

00:29:55,059 --> 00:30:03,039
those things let's parse back in and see

00:29:58,539 --> 00:30:05,429
what we've got now house rose request

00:30:03,039 --> 00:30:05,429
logos

00:30:12,720 --> 00:30:21,720
we reload too now we see aha our host

00:30:19,440 --> 00:30:23,669
column is also a foreign key with a

00:30:21,720 --> 00:30:25,980
magnifying glass to be able to follow

00:30:23,669 --> 00:30:30,270
over and we can look again and just like

00:30:25,980 --> 00:30:32,520
just like our status table we have the

00:30:30,270 --> 00:30:34,169
reverse relationship of this which all

00:30:32,520 --> 00:30:36,240
automatically set up just by us to find

00:30:34,169 --> 00:30:38,159
that foreign key it knows the by

00:30:36,240 --> 00:30:39,600
directions and you know and that's

00:30:38,159 --> 00:30:42,299
sortable as well and we can see let's

00:30:39,600 --> 00:30:43,530
see just the rows that this for this

00:30:42,299 --> 00:30:46,980
host requested so we're getting

00:30:43,530 --> 00:30:48,870
somewhere and then we could also you

00:30:46,980 --> 00:30:52,620
know again as we continue to follow this

00:30:48,870 --> 00:30:54,870
this iteration you know you can we have

00:30:52,620 --> 00:30:56,700
some asynchronous well doing reverse

00:30:54,870 --> 00:31:00,240
lookups to populate the host name column

00:30:56,700 --> 00:31:07,080
and we can continue to develop out our

00:31:00,240 --> 00:31:09,240
application so back to the config of our

00:31:07,080 --> 00:31:12,630
interfaces like talking about interfaces

00:31:09,240 --> 00:31:14,490
now there's different options that you

00:31:12,630 --> 00:31:16,320
have for these interfaces that are

00:31:14,490 --> 00:31:17,820
developed so wrap it up a lot of people

00:31:16,320 --> 00:31:19,440
ask what wasn't wrap it up just a crud

00:31:17,820 --> 00:31:20,789
tool because it's just giving me these

00:31:19,440 --> 00:31:23,280
crud interfaces I thought you're talking

00:31:20,789 --> 00:31:26,909
about custom applications well this is a

00:31:23,280 --> 00:31:29,730
base that it provides for you that you

00:31:26,909 --> 00:31:33,870
can you can customize and extend and

00:31:29,730 --> 00:31:36,419
control so ever each each source and

00:31:33,870 --> 00:31:41,549
this is part of the rapid DB IC config

00:31:36,419 --> 00:31:44,610
plugin in the DB model gets created with

00:31:41,549 --> 00:31:45,750
a module class and this is the class

00:31:44,610 --> 00:31:47,429
that it uses and this is also

00:31:45,750 --> 00:31:48,780
bootstrapped with the application and

00:31:47,429 --> 00:31:50,730
we'll look at that in a second to

00:31:48,780 --> 00:31:53,580
customize that and then also we have

00:31:50,730 --> 00:31:56,669
grit params where we can supply options

00:31:53,580 --> 00:31:58,070
to the constructor of these objects when

00:31:56,669 --> 00:32:00,870
they're created and we have this special

00:31:58,070 --> 00:32:04,520
star defaults means that it's going to

00:32:00,870 --> 00:32:07,350
supply these options to every single

00:32:04,520 --> 00:32:10,740
every module that's created one for each

00:32:07,350 --> 00:32:12,120
source so let's first start it this

00:32:10,740 --> 00:32:13,590
application it probably doesn't what

00:32:12,120 --> 00:32:16,289
makes sense for this application in the

00:32:13,590 --> 00:32:17,820
real world to be editable because it's

00:32:16,289 --> 00:32:20,580
reporting but let's make it editable

00:32:17,820 --> 00:32:23,730
anyway and it also you have some hints

00:32:20,580 --> 00:32:24,780
here that in order to make in order to

00:32:23,730 --> 00:32:27,840
make it editable you

00:32:24,780 --> 00:32:30,570
uncomment out these lines we have these

00:32:27,840 --> 00:32:32,430
call spec these call spec configs and

00:32:30,570 --> 00:32:35,700
there's there's four of them for each of

00:32:32,430 --> 00:32:37,470
the crud modes define the rows the

00:32:35,700 --> 00:32:41,100
columns that you want to select

00:32:37,470 --> 00:32:46,530
including including joins so Starla

00:32:41,100 --> 00:32:48,300
means all local columns and we can so

00:32:46,530 --> 00:32:50,340
the defaults default applies to

00:32:48,300 --> 00:32:53,640
everything we can then say well I want

00:32:50,340 --> 00:32:55,860
to override constructor options for just

00:32:53,640 --> 00:32:58,650
the request log source by defining that

00:32:55,860 --> 00:33:00,330
so that means it'll use this value for

00:32:58,650 --> 00:33:02,910
include call spec and this is how we

00:33:00,330 --> 00:33:05,730
specify a join and is what this will do

00:33:02,910 --> 00:33:09,330
is it will include all local columns and

00:33:05,730 --> 00:33:11,190
then include the description column join

00:33:09,330 --> 00:33:15,020
through the status relationship which

00:33:11,190 --> 00:33:17,610
which now exists as a relationship and

00:33:15,020 --> 00:33:19,380
we can you know you can specify joins

00:33:17,610 --> 00:33:21,690
multiple levels deep you can supports

00:33:19,380 --> 00:33:26,400
wildcards you can do all sorts of exotic

00:33:21,690 --> 00:33:28,530
configs just at that level so what we're

00:33:26,400 --> 00:33:31,170
turning on editing let's talk about some

00:33:28,530 --> 00:33:35,280
of these another example of what are

00:33:31,170 --> 00:33:36,870
these high-level interface options that

00:33:35,280 --> 00:33:39,420
are controlled by some of these table

00:33:36,870 --> 00:33:42,120
spec configs and again rapid app tries

00:33:39,420 --> 00:33:45,180
to conceptualize the high level of the

00:33:42,120 --> 00:33:47,700
intent of the model so if we're editing

00:33:45,180 --> 00:33:50,850
if we're in the paradigm of modification

00:33:47,700 --> 00:33:52,590
if we're going to modify a foreign key

00:33:50,850 --> 00:33:54,960
what is it that we're actually doing

00:33:52,590 --> 00:33:57,510
ramada fying a foreign key what we're

00:33:54,960 --> 00:34:00,180
really doing is we're selecting from a

00:33:57,510 --> 00:34:01,770
related from a row in the related table

00:34:00,180 --> 00:34:04,170
right that's the thing that makes sense

00:34:01,770 --> 00:34:05,730
so the kind of interface is the rapid

00:34:04,170 --> 00:34:07,800
app is going to present for you when you

00:34:05,730 --> 00:34:10,770
want to edit that is going to be a

00:34:07,800 --> 00:34:14,040
selection dialog to be able to select

00:34:10,770 --> 00:34:18,060
from this related row related table and

00:34:14,040 --> 00:34:20,010
now there's multiple ways that we can

00:34:18,060 --> 00:34:24,149
envision that you know this could be a

00:34:20,010 --> 00:34:25,800
drop-down list is a simple case but for

00:34:24,149 --> 00:34:29,159
more complex relationships you might

00:34:25,800 --> 00:34:31,050
want a more full blown interface to be

00:34:29,159 --> 00:34:33,899
able to actually select from a grid to

00:34:31,050 --> 00:34:37,190
see when you're editing that so by

00:34:33,899 --> 00:34:38,750
default rapid app gives you if you don't

00:34:37,190 --> 00:34:40,819
or anything it gives you a grid so that

00:34:38,750 --> 00:34:43,849
when you select you can see all the

00:34:40,819 --> 00:34:45,379
columns of the remote row and you can

00:34:43,849 --> 00:34:47,210
select the one that you want to

00:34:45,379 --> 00:34:49,369
represent that foreign key but there's

00:34:47,210 --> 00:34:53,540
other high-level modes that it provides

00:34:49,369 --> 00:34:56,419
for you and these can be set by Auto

00:34:53,540 --> 00:34:58,040
editor type which we're going to come in

00:34:56,419 --> 00:35:00,859
here and we're going to set we're going

00:34:58,040 --> 00:35:02,510
to set on the status column and the

00:35:00,859 --> 00:35:04,280
default there's several auto editor

00:35:02,510 --> 00:35:06,890
types that are available the default is

00:35:04,280 --> 00:35:08,690
grid there's also dropped down which is

00:35:06,890 --> 00:35:11,990
just a static drop-down list and then

00:35:08,690 --> 00:35:15,349
combo will give you a drop-down list but

00:35:11,990 --> 00:35:17,150
with type of head search so we can say

00:35:15,349 --> 00:35:20,119
that we want to use that and that's not

00:35:17,150 --> 00:35:22,520
the default because again what a single

00:35:20,119 --> 00:35:25,010
column might not be enough to identify

00:35:22,520 --> 00:35:29,030
the row that you want to select and the

00:35:25,010 --> 00:35:32,630
row that it shows in that drop-down is

00:35:29,030 --> 00:35:34,940
going to be the display column which we

00:35:32,630 --> 00:35:37,730
have set to code so that means that the

00:35:34,940 --> 00:35:39,380
value of this drop-down is going to be

00:35:37,730 --> 00:35:43,160
these rows and we're going to just see

00:35:39,380 --> 00:35:45,800
the code the code column so let's talk

00:35:43,160 --> 00:35:47,990
about another feature the tie into this

00:35:45,800 --> 00:35:50,359
one of the other things that the rapid

00:35:47,990 --> 00:35:53,839
app supports is this ability to define

00:35:50,359 --> 00:35:56,869
virtual columns which are SQL snippet

00:35:53,839 --> 00:35:58,730
based columns that you can add on it's

00:35:56,869 --> 00:36:00,890
basically the same that the request log

00:35:58,730 --> 00:36:02,690
multi relationship is an automatically

00:36:00,890 --> 00:36:04,160
generated virtual column but you can

00:36:02,690 --> 00:36:07,940
generate your own virtual columns as

00:36:04,160 --> 00:36:10,790
well so here's a you define this in the

00:36:07,940 --> 00:36:13,819
virtual column section then source and

00:36:10,790 --> 00:36:15,380
then names of the columns so here we're

00:36:13,819 --> 00:36:19,400
going to define a new virtual column

00:36:15,380 --> 00:36:23,780
code underscore desk description and we

00:36:19,400 --> 00:36:25,760
specify sequel and self represents the

00:36:23,780 --> 00:36:27,500
current row and so this gets substituted

00:36:25,760 --> 00:36:30,859
for the alias for the current row and it

00:36:27,500 --> 00:36:32,780
executed the query and this is this is

00:36:30,859 --> 00:36:34,150
specific to the engine so that's one

00:36:32,780 --> 00:36:36,290
thing this doesn't you have two

00:36:34,150 --> 00:36:38,150
different backends do this differently

00:36:36,290 --> 00:36:41,720
so this is an example of a concatenation

00:36:38,150 --> 00:36:44,810
double pipe is concatenation in sequel

00:36:41,720 --> 00:36:46,700
light so this means that we're going to

00:36:44,810 --> 00:36:48,369
take code we're going to concatenate it

00:36:46,700 --> 00:36:50,499
with a space and a dash and then working

00:36:48,369 --> 00:36:55,319
catenate it with description and then we

00:36:50,499 --> 00:36:57,789
can even use that as the display column

00:36:55,319 --> 00:37:00,910
we can use that virtual column as the

00:36:57,789 --> 00:37:05,019
display column so now when we are going

00:37:00,910 --> 00:37:07,420
to select from that we can see that

00:37:05,019 --> 00:37:10,539
value and so let's look at that before I

00:37:07,420 --> 00:37:13,059
fire the app back up to show you one

00:37:10,539 --> 00:37:16,990
other thing to point out so remember I

00:37:13,059 --> 00:37:19,059
mentioned this this updater does not

00:37:16,990 --> 00:37:21,309
cover your settings in the take your

00:37:19,059 --> 00:37:24,430
table spectrum figs and it actually this

00:37:21,309 --> 00:37:26,650
it has several options that we've just

00:37:24,430 --> 00:37:30,400
been calling Evan explained the the from

00:37:26,650 --> 00:37:33,279
ddl option means regenerate the database

00:37:30,400 --> 00:37:35,980
and the DB IC schema from the ddl and

00:37:33,279 --> 00:37:37,990
then config means update the table spec

00:37:35,980 --> 00:37:40,930
config so we can just update the table

00:37:37,990 --> 00:37:42,279
spec configs and it'll just do that and

00:37:40,930 --> 00:37:48,130
if we come back and we look what that's

00:37:42,279 --> 00:37:50,559
done for us we can see that it's now

00:37:48,130 --> 00:37:52,180
created code description because we

00:37:50,559 --> 00:37:54,430
basically we define code description and

00:37:52,180 --> 00:37:59,410
its saw that in there and so it gave us

00:37:54,430 --> 00:38:01,269
a spot for that so that we can and we

00:37:59,410 --> 00:38:03,789
can you can apply the same properties

00:38:01,269 --> 00:38:05,140
headers and renderers and profiles you

00:38:03,789 --> 00:38:09,460
can apply to this virtual column like

00:38:05,140 --> 00:38:14,279
you would to any other column okay so

00:38:09,460 --> 00:38:14,279
let's take a look

00:38:18,520 --> 00:38:26,160
it's pretty fresh okay so now we're come

00:38:22,990 --> 00:38:28,810
back in let's go back to the quest log

00:38:26,160 --> 00:38:30,370
we see that we have editing capabilities

00:38:28,810 --> 00:38:34,150
like there's different thing you can do

00:38:30,370 --> 00:38:36,160
it inline editing and when we change

00:38:34,150 --> 00:38:37,360
this is a foreign key so if we want to

00:38:36,160 --> 00:38:41,230
let's see if we want to we want to

00:38:37,360 --> 00:38:44,380
change the host we select edit that we

00:38:41,230 --> 00:38:46,030
can pick a different a different remote

00:38:44,380 --> 00:38:48,820
row and that will update that foreign

00:38:46,030 --> 00:38:51,850
key to be that and then status remember

00:38:48,820 --> 00:38:53,740
we now see it's instead of just saying

00:38:51,850 --> 00:38:55,330
200 that's saying 200 okay that's

00:38:53,740 --> 00:38:57,250
because of that display column that we

00:38:55,330 --> 00:38:59,410
set that's that virtual column which is

00:38:57,250 --> 00:39:02,290
a concatenation of multiple columns and

00:38:59,410 --> 00:39:04,000
now if we edit this this is a combo box

00:39:02,290 --> 00:39:05,680
drop down which is what that all this

00:39:04,000 --> 00:39:08,770
was enabled just by setting that auto

00:39:05,680 --> 00:39:11,470
editor type and we can select and we can

00:39:08,770 --> 00:39:14,950
also we can type and search and we can

00:39:11,470 --> 00:39:17,350
even type-ahead search in that virtual

00:39:14,950 --> 00:39:19,510
display column so we can you know type

00:39:17,350 --> 00:39:23,380
in for internal server error and we can

00:39:19,510 --> 00:39:27,160
select to change that okay so we're

00:39:23,380 --> 00:39:28,900
getting somewhere now we're building an

00:39:27,160 --> 00:39:31,900
application and you can have multiple

00:39:28,900 --> 00:39:32,890
iterations of this we wanted with a

00:39:31,900 --> 00:39:34,510
common thing you want to do with an

00:39:32,890 --> 00:39:35,680
application we want authentication we

00:39:34,510 --> 00:39:38,200
want to use your database we want to

00:39:35,680 --> 00:39:41,770
protect our application so rapid that

00:39:38,200 --> 00:39:44,140
provides high level plugins that let you

00:39:41,770 --> 00:39:46,750
jump straight to certain scenarios and

00:39:44,140 --> 00:39:48,610
they just auto configure things like you

00:39:46,750 --> 00:39:51,340
could roll your own you could roll your

00:39:48,610 --> 00:39:53,080
own authentication or you can use some

00:39:51,340 --> 00:39:55,560
of the ones that are built in by rapid

00:39:53,080 --> 00:39:58,210
app and we have a couple plugins that

00:39:55,560 --> 00:40:00,910
will actually want to be looking at so

00:39:58,210 --> 00:40:03,010
right now we're just loading the rapid

00:40:00,910 --> 00:40:05,410
DB IC plugin float a couple other

00:40:03,010 --> 00:40:07,380
plugins that are provided off core

00:40:05,410 --> 00:40:11,020
automatically gives you a user database

00:40:07,380 --> 00:40:13,660
navcore gives your users customized per

00:40:11,020 --> 00:40:16,390
user saved searches and course email

00:40:13,660 --> 00:40:20,080
admin gives us an interface to edit the

00:40:16,390 --> 00:40:22,740
user the user database and as all this

00:40:20,080 --> 00:40:25,990
does is this sets up the standard

00:40:22,740 --> 00:40:27,550
authentication plugins that come with

00:40:25,990 --> 00:40:29,260
cattle so if any of you have experience

00:40:27,550 --> 00:40:30,720
with catalyst there's catalyst plugin

00:40:29,260 --> 00:40:32,190
authentication catalyst plugin

00:40:30,720 --> 00:40:35,520
authorization roles

00:40:32,190 --> 00:40:36,930
it sets up that that stuff for you and

00:40:35,520 --> 00:40:39,810
gives you that environment and then also

00:40:36,930 --> 00:40:43,770
automatically generates with these these

00:40:39,810 --> 00:40:46,530
core schema plugins automatically gives

00:40:43,770 --> 00:40:48,599
you a persistence database to handle all

00:40:46,530 --> 00:40:50,369
that stuff for you you don't always want

00:40:48,599 --> 00:40:52,650
to use it but it's sometimes very handy

00:40:50,369 --> 00:40:54,119
when you do so we have just enabled all

00:40:52,650 --> 00:40:55,680
we've done is we've just added these

00:40:54,119 --> 00:40:57,960
we've just added these three lines

00:40:55,680 --> 00:41:07,920
that's all we've done let's restart our

00:40:57,960 --> 00:41:09,810
app reload and now just by doing that

00:41:07,920 --> 00:41:12,690
now we're presented with a login box and

00:41:09,810 --> 00:41:14,700
by default when a brand new database is

00:41:12,690 --> 00:41:21,450
initialized it creates one username

00:41:14,700 --> 00:41:23,069
admin password pass and we can login and

00:41:21,450 --> 00:41:26,220
so we see now there's some more things

00:41:23,069 --> 00:41:29,640
that we have we have this section we

00:41:26,220 --> 00:41:32,760
also have our course EEMA where we can

00:41:29,640 --> 00:41:36,839
configure things so like there's a us

00:41:32,760 --> 00:41:38,430
roles so we can define a role by default

00:41:36,839 --> 00:41:41,069
it gives you administrator and there's

00:41:38,430 --> 00:41:43,500
certain built-in things that that will

00:41:41,069 --> 00:41:46,170
do so for instance automatically with

00:41:43,500 --> 00:41:48,150
the administrator role only

00:41:46,170 --> 00:41:49,680
administrators will get access to course

00:41:48,150 --> 00:41:52,140
into the core schema and that's how the

00:41:49,680 --> 00:41:54,470
course gaming admin plugin works but you

00:41:52,140 --> 00:41:56,579
want to we want to write our own custom

00:41:54,470 --> 00:41:59,790
authentication we want to our own our

00:41:56,579 --> 00:42:01,470
own custom authorization rules we can do

00:41:59,790 --> 00:42:03,720
that based on we can leverage this

00:42:01,470 --> 00:42:06,660
system and we can write code in the same

00:42:03,720 --> 00:42:09,660
manner that we would in catalyst if we

00:42:06,660 --> 00:42:11,670
set up this whole roles database this in

00:42:09,660 --> 00:42:15,720
the standard way so let's add let's add

00:42:11,670 --> 00:42:18,390
a role let's call it let's call it code

00:42:15,720 --> 00:42:22,700
200 and let's give it a description

00:42:18,390 --> 00:42:22,700
let's say that this is the role

00:42:24,100 --> 00:42:30,080
we're going to say we're going to use

00:42:25,880 --> 00:42:32,960
this for 200 requests all right so we'll

00:42:30,080 --> 00:42:35,180
save that come to our users let's create

00:42:32,960 --> 00:42:40,640
a user so we can create a user let's

00:42:35,180 --> 00:42:41,720
call him Joe give them a password and by

00:42:40,640 --> 00:42:43,700
the way I should point out these

00:42:41,720 --> 00:42:46,160
different dialogues and interfaces wrap

00:42:43,700 --> 00:42:49,430
it out uses its own stuff this set

00:42:46,160 --> 00:42:51,500
password dialog is actually just an

00:42:49,430 --> 00:42:53,660
example of an editor so in the table

00:42:51,500 --> 00:42:55,880
spec configs you can say here's a

00:42:53,660 --> 00:42:59,210
renderer here's a validator here as an

00:42:55,880 --> 00:43:02,990
editor and these are drop in so the past

00:42:59,210 --> 00:43:05,480
password editor is a prebuilt editor

00:43:02,990 --> 00:43:09,650
that you can use that gives you that

00:43:05,480 --> 00:43:12,050
gives you a password that you confirm so

00:43:09,650 --> 00:43:13,790
let's give him we can the roles is up

00:43:12,050 --> 00:43:16,250
many to many so we can select multiple

00:43:13,790 --> 00:43:17,930
roles but let's not give him

00:43:16,250 --> 00:43:22,520
administrator but let's give him give

00:43:17,930 --> 00:43:23,810
him code 200 okay alright so let's save

00:43:22,520 --> 00:43:25,130
that okay but now it's not doing

00:43:23,810 --> 00:43:26,540
anything so he has that role but it's

00:43:25,130 --> 00:43:29,990
not doing anything so let's say we want

00:43:26,540 --> 00:43:32,290
to hook in we want to hook in code to

00:43:29,990 --> 00:43:34,520
actually do something about this

00:43:32,290 --> 00:43:38,480
remember how have we come back to our

00:43:34,520 --> 00:43:41,120
model remember how I said that we have

00:43:38,480 --> 00:43:45,080
this grid class this is this is the

00:43:41,120 --> 00:43:47,530
class that is used to create each of

00:43:45,080 --> 00:43:50,600
these modules which provides its own dsl

00:43:47,530 --> 00:43:53,570
and you can create you can extend and

00:43:50,600 --> 00:43:57,170
you can create and there's a whole class

00:43:53,570 --> 00:43:59,840
hierarchy of modules that are based on

00:43:57,170 --> 00:44:01,610
there's data data store based modules

00:43:59,840 --> 00:44:03,830
and then from data store modules there's

00:44:01,610 --> 00:44:05,300
grid modules which is what we're using

00:44:03,830 --> 00:44:08,900
is a grid but then there's also data

00:44:05,300 --> 00:44:10,940
view modules which can be arbitrary HTML

00:44:08,900 --> 00:44:12,800
instead of a grid but still backed by

00:44:10,940 --> 00:44:16,430
the same column model still back by the

00:44:12,800 --> 00:44:20,140
same stuff so we can go in or when we

00:44:16,430 --> 00:44:22,610
bootstrap it bootstraps this module and

00:44:20,140 --> 00:44:26,700
out of the box it does nothing all it

00:44:22,610 --> 00:44:30,540
does is extend extend the version from

00:44:26,700 --> 00:44:32,430
from the rapid up distribution but we

00:44:30,540 --> 00:44:37,410
can we can customize this and extend

00:44:32,430 --> 00:44:40,369
this and it's a moose moose class one of

00:44:37,410 --> 00:44:43,560
the things that we can do is let's add

00:44:40,369 --> 00:44:46,200
let's add some code on the back end part

00:44:43,560 --> 00:44:50,369
of the dsl that's provided here is if

00:44:46,200 --> 00:44:52,740
you define result set then it will ever

00:44:50,369 --> 00:44:54,720
eat every request will go through a

00:44:52,740 --> 00:44:56,490
result set so we can add logic in here

00:44:54,720 --> 00:44:59,579
that says that we're going to filter out

00:44:56,490 --> 00:45:02,369
200 unless the user has administrator or

00:44:59,579 --> 00:45:11,700
code 200 right and add that on there and

00:45:02,369 --> 00:45:16,829
now if we restart and let's login is

00:45:11,700 --> 00:45:21,150
another user here's another browser the

00:45:16,829 --> 00:45:23,070
login is Joe Wright notice he doesn't

00:45:21,150 --> 00:45:24,839
have the course game admin but if we

00:45:23,070 --> 00:45:26,040
look at request rosewell he sees 200

00:45:24,839 --> 00:45:33,810
well that's because we gave him the role

00:45:26,040 --> 00:45:38,250
so he has the role 200 so let's let's

00:45:33,810 --> 00:45:39,380
take it away from him now if we come

00:45:38,250 --> 00:45:43,660
back

00:45:39,380 --> 00:45:48,230
now if we refresh those that disappeared

00:45:43,660 --> 00:45:50,599
so there's um running short on time lots

00:45:48,230 --> 00:45:53,210
of this is just the beginning foundation

00:45:50,599 --> 00:45:58,339
you can extend these and there's a very

00:45:53,210 --> 00:46:00,470
rich robust dsl but let's move on in the

00:45:58,339 --> 00:46:09,500
few minutes that I have left let's talk

00:46:00,470 --> 00:46:10,670
about docker live demo so wrap it up

00:46:09,500 --> 00:46:13,430
with dr. so with the traditional

00:46:10,670 --> 00:46:14,990
installation CPM it's going to pull the

00:46:13,430 --> 00:46:16,759
whole missing dependency tree to your

00:46:14,990 --> 00:46:18,980
system it's going to take a long time

00:46:16,759 --> 00:46:20,569
wrap it up as a huge stack with catalyst

00:46:18,980 --> 00:46:22,730
and DB I see this can take over an hour

00:46:20,569 --> 00:46:24,619
and it might fail because sometimes

00:46:22,730 --> 00:46:28,160
upstream CP and distributions are broken

00:46:24,619 --> 00:46:30,980
so very annoying so with docker we

00:46:28,160 --> 00:46:33,890
distribute this new image on docker hub

00:46:30,980 --> 00:46:36,380
which is wrap epsg I you just run docker

00:46:33,890 --> 00:46:40,579
poll and this gives a full pre-installed

00:46:36,380 --> 00:46:42,289
image of a rat the rapid outstep

00:46:40,579 --> 00:46:45,259
pre-installed and we release a new I

00:46:42,289 --> 00:46:47,420
release a new version of rap epsg I with

00:46:45,259 --> 00:46:49,369
every rapid app release on medicine p.m.

00:46:47,420 --> 00:46:51,410
so you can always run this and have the

00:46:49,369 --> 00:46:54,049
latest the latest version of the full

00:46:51,410 --> 00:46:56,390
stack already installed and this just

00:46:54,049 --> 00:46:58,970
takes seconds to install any box that

00:46:56,390 --> 00:47:01,130
has that has doctor on it it's a known

00:46:58,970 --> 00:47:02,599
tested working state and it's isolated

00:47:01,130 --> 00:47:05,569
from the rest of your systems and good

00:47:02,599 --> 00:47:08,750
benefits about that so um the wrap ups

00:47:05,569 --> 00:47:10,759
GI image public image it actually runs

00:47:08,750 --> 00:47:13,009
any PSG I application not just wrap it

00:47:10,759 --> 00:47:15,319
out it has lots of functionality and use

00:47:13,009 --> 00:47:17,539
your own docker file or use it directly

00:47:15,319 --> 00:47:20,299
as a container what works is it

00:47:17,539 --> 00:47:21,529
automatically runs an amped-up PSG I in

00:47:20,299 --> 00:47:23,779
other words that plaque up an

00:47:21,529 --> 00:47:25,519
application if you mount it to the

00:47:23,779 --> 00:47:27,559
special directory which we'll look at in

00:47:25,519 --> 00:47:30,710
a second it uses a high-performance pre

00:47:27,559 --> 00:47:32,029
forking HTTP server gazelle ball

00:47:30,710 --> 00:47:34,640
automatically install dependencies for

00:47:32,029 --> 00:47:37,789
you you define a CPM file lots of

00:47:34,640 --> 00:47:40,819
options it's well documented and if you

00:47:37,789 --> 00:47:42,950
look on docker hub you can read all

00:47:40,819 --> 00:47:47,420
kinds of options that this gives to you

00:47:42,950 --> 00:47:52,670
lots of cool stuff so an example

00:47:47,420 --> 00:47:56,000
container set up a docker create command

00:47:52,670 --> 00:47:57,799
this is again standard docker options

00:47:56,000 --> 00:48:00,650
the image that we want to use and the

00:47:57,799 --> 00:48:03,260
magic here is that we're using a

00:48:00,650 --> 00:48:05,930
mounting a volume and basically all you

00:48:03,260 --> 00:48:09,109
need to do to use this as you mount the

00:48:05,930 --> 00:48:12,140
root of your application directory on /

00:48:09,109 --> 00:48:16,099
off / app and then when you start that

00:48:12,140 --> 00:48:19,369
up it will look for an apt up psg I and

00:48:16,099 --> 00:48:21,410
it'll stop fire up your application here

00:48:19,369 --> 00:48:24,500
we're mapping for 5000 was just the

00:48:21,410 --> 00:48:28,040
standard thing and I like to run that

00:48:24,500 --> 00:48:29,420
with log view I would I could run this

00:48:28,040 --> 00:48:30,680
and show you that it works but I don't

00:48:29,420 --> 00:48:33,910
have a few minutes so I'm going to skip

00:48:30,680 --> 00:48:36,589
that trust me it works you can try it

00:48:33,910 --> 00:48:37,790
then what you can do is you can run when

00:48:36,589 --> 00:48:40,190
you have our work this running container

00:48:37,790 --> 00:48:42,049
in the background you can get a shell in

00:48:40,190 --> 00:48:45,170
it by running this exact command and

00:48:42,049 --> 00:48:46,730
again this is all straight docker you

00:48:45,170 --> 00:48:50,210
can also you can bootstrap a new

00:48:46,730 --> 00:48:52,880
application using docker as well instead

00:48:50,210 --> 00:48:54,710
of mounting an existing app you can

00:48:52,880 --> 00:48:57,859
create a brand new empty directory and

00:48:54,710 --> 00:49:01,099
then run docker create and mount that

00:48:57,859 --> 00:49:06,319
new blank directory on up app and if it

00:49:01,099 --> 00:49:08,569
doesn't find any app that PSG I it will

00:49:06,319 --> 00:49:12,230
just sit in a stopped state and so then

00:49:08,569 --> 00:49:15,859
you can you can jump in to your

00:49:12,230 --> 00:49:18,280
application with this exec command and

00:49:15,859 --> 00:49:21,619
from within that shell you can bootstrap

00:49:18,280 --> 00:49:23,420
right there and it will automatically

00:49:21,619 --> 00:49:25,400
it's smart enough to know that it's in

00:49:23,420 --> 00:49:26,750
this docker environment and it will you

00:49:25,400 --> 00:49:29,780
get will boot strap your application to

00:49:26,750 --> 00:49:31,910
up app which if you have mounted there

00:49:29,780 --> 00:49:33,829
then that works there it has some

00:49:31,910 --> 00:49:36,710
there's other commands that you have in

00:49:33,829 --> 00:49:38,809
there you can there's some basic process

00:49:36,710 --> 00:49:40,040
control to start or restart your app

00:49:38,809 --> 00:49:43,190
without having to restart the whole

00:49:40,040 --> 00:49:46,700
docker container and you can run those

00:49:43,190 --> 00:49:48,950
commands in there so then deployment the

00:49:46,700 --> 00:49:51,859
standard way that you deploy with docker

00:49:48,950 --> 00:49:53,660
is an example for apache and apache

00:49:51,859 --> 00:49:57,230
virtual host this could be engine X you

00:49:53,660 --> 00:49:59,180
know but its syntax is you do a proxy

00:49:57,230 --> 00:50:01,040
pass where you start your docker

00:49:59,180 --> 00:50:03,349
container on your system then you have

00:50:01,040 --> 00:50:04,580
your forward-facing website and you use

00:50:03,349 --> 00:50:08,090
whatever semantics

00:50:04,580 --> 00:50:10,460
your web server has to map some paths in

00:50:08,090 --> 00:50:15,770
your public website to the application

00:50:10,460 --> 00:50:17,690
running on whatever port you've chosen

00:50:15,770 --> 00:50:21,470
in this case for this example is 5000

00:50:17,690 --> 00:50:24,050
and the same thing works for so links

00:50:21,470 --> 00:50:28,370
everything that I've done here you can

00:50:24,050 --> 00:50:32,210
also look at rapid I o /y in 2016 this

00:50:28,370 --> 00:50:37,010
slideshow is on github the demo app is

00:50:32,210 --> 00:50:39,830
on github here's the link to the docker

00:50:37,010 --> 00:50:42,920
hub image for rep epsg I the rapid up

00:50:39,830 --> 00:50:45,110
website IRC channel again if you have

00:50:42,920 --> 00:50:47,450
questions the best way to ask questions

00:50:45,110 --> 00:50:50,060
and get help is to come in to pound

00:50:47,450 --> 00:50:52,520
rapid app on IRC pearl dot org and then

00:50:50,060 --> 00:50:54,980
in case you're curious what I was doing

00:50:52,520 --> 00:50:58,520
to cheat these edits along the way I

00:50:54,980 --> 00:51:00,560
wrote this simple script that allows me

00:50:58,520 --> 00:51:04,220
to key up and key down to cycle through

00:51:00,560 --> 00:51:09,260
checked out refs and that is of the

00:51:04,220 --> 00:51:11,240
rapid mo log view repo so you can if you

00:51:09,260 --> 00:51:12,770
look at that repo every one of the edits

00:51:11,240 --> 00:51:14,690
that we just went through today is

00:51:12,770 --> 00:51:17,690
represented not only in a commit but a

00:51:14,690 --> 00:51:19,580
tag a number tag in that repo so you can

00:51:17,690 --> 00:51:22,400
follow along and reproduce everything

00:51:19,580 --> 00:51:24,980
that I did here and I just am right at

00:51:22,400 --> 00:51:27,190
the end of my time so thank you very

00:51:24,980 --> 00:51:27,190
much

00:51:32,990 --> 00:51:35,050

YouTube URL: https://www.youtube.com/watch?v=TxcFABfAJj8


