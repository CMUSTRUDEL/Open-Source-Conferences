Title: 2016 - ‎Intro to JSON Schema with Go, and Generating Validators And Skeletons‎ - Daisuke Maki
Publication date: 2016-06-27
Playlist: YAPC::NA 2016
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:09,840
guess I'll start hello thanks for coming

00:00:03,720 --> 00:00:11,910
um I will be a guest I'll be one of the

00:00:09,840 --> 00:00:14,280
few people who in this conference that

00:00:11,910 --> 00:00:17,990
will talk about no pro and only

00:00:14,280 --> 00:00:20,369
something else so this is a talk about

00:00:17,990 --> 00:00:26,699
doing stuff with Jason schema let's go

00:00:20,369 --> 00:00:30,119
um this is me I go by the handle the

00:00:26,699 --> 00:00:32,790
strat um if you go to Twitter right now

00:00:30,119 --> 00:00:34,800
and look for hashtag yep cna and look

00:00:32,790 --> 00:00:36,270
for my name um my slides are already up

00:00:34,800 --> 00:00:43,350
so if you want to follow you can already

00:00:36,270 --> 00:00:45,030
go there arm so I've um I've been I am

00:00:43,350 --> 00:00:46,739
and I have been a pro hacker but lately

00:00:45,030 --> 00:00:50,370
I've been writing a lot of goals and go

00:00:46,739 --> 00:00:54,390
stuff I'm also known as the the guy who

00:00:50,370 --> 00:00:58,829
who had done all the apps he ages until

00:00:54,390 --> 00:01:00,930
last year um I actually officially

00:00:58,829 --> 00:01:07,950
retired from your lash it was last year

00:01:00,930 --> 00:01:12,090
because I got fed up but the thing is I

00:01:07,950 --> 00:01:15,750
don't know when you do when you organize

00:01:12,090 --> 00:01:18,259
conferences for so many years you kind

00:01:15,750 --> 00:01:24,420
of kind of start becoming this uh um

00:01:18,259 --> 00:01:28,049
serial event organizer so I'm actually

00:01:24,420 --> 00:01:32,329
uh right now in the midst of preparing

00:01:28,049 --> 00:01:37,380
for my next series of the conferences

00:01:32,329 --> 00:01:40,049
yeah it's it's gonna sort of build on

00:01:37,380 --> 00:01:42,030
the stuff that I was doing but um in the

00:01:40,049 --> 00:01:43,590
yap seizure but it's gonna be I'm gonna

00:01:42,030 --> 00:01:49,380
try to make make things a little broader

00:01:43,590 --> 00:01:52,829
anyway so this is where this whole story

00:01:49,380 --> 00:01:55,680
it got started I was trying to make this

00:01:52,829 --> 00:01:58,500
a new conference framework thing and um

00:01:55,680 --> 00:02:01,399
and this was going to be a community

00:01:58,500 --> 00:02:05,399
event and it I needed to to basically

00:02:01,399 --> 00:02:08,280
prepare all the infrastructure to to do

00:02:05,399 --> 00:02:10,800
this and one of the things I desperately

00:02:08,280 --> 00:02:12,250
needed to write was a a p.i server

00:02:10,800 --> 00:02:15,910
because

00:02:12,250 --> 00:02:18,250
in this day and age ii you know you

00:02:15,910 --> 00:02:20,470
cannot only have a website for your

00:02:18,250 --> 00:02:25,480
conference you have to have like Android

00:02:20,470 --> 00:02:29,470
and iOS supporting and also if if you

00:02:25,480 --> 00:02:30,790
can allow your users to do this you

00:02:29,470 --> 00:02:32,920
won't have you want to allow your users

00:02:30,790 --> 00:02:35,530
to create third-party apps so that you

00:02:32,920 --> 00:02:37,660
know maybe they have a better viewer for

00:02:35,530 --> 00:02:41,280
your conference or whatever this has

00:02:37,660 --> 00:02:44,500
been done before um in yahtzee ages and

00:02:41,280 --> 00:02:47,070
when people wanted to create their own

00:02:44,500 --> 00:02:50,560
android apps or whatever we had to

00:02:47,070 --> 00:02:53,489
provide at just ad hoc API servers but

00:02:50,560 --> 00:02:56,410
this time since we're starting fresh I

00:02:53,489 --> 00:02:59,920
started I wanted to actually create a

00:02:56,410 --> 00:03:05,170
real a real API server so people could

00:02:59,920 --> 00:03:08,620
use it um my name so uh I mean an API

00:03:05,170 --> 00:03:10,150
server now so what what are the

00:03:08,620 --> 00:03:15,400
consideration that has to think about

00:03:10,150 --> 00:03:19,360
for an API server so the code for the

00:03:15,400 --> 00:03:21,220
API server I'm gonna have to create when

00:03:19,360 --> 00:03:24,489
you create a pair server it's not enough

00:03:21,220 --> 00:03:27,070
to go it's not enough to just have the

00:03:24,489 --> 00:03:29,340
service sub server long right yeah you

00:03:27,070 --> 00:03:32,650
always have to have the matching client

00:03:29,340 --> 00:03:36,040
otherwise nobody would use it I mean you

00:03:32,650 --> 00:03:39,010
know the people don't want don't want to

00:03:36,040 --> 00:03:41,350
write a your client library just just

00:03:39,010 --> 00:03:43,299
because I mean if you can do it you

00:03:41,350 --> 00:03:47,890
should create both the the server and

00:03:43,299 --> 00:03:49,450
client code and when you generate all

00:03:47,890 --> 00:03:51,670
the stuff you have to be able to

00:03:49,450 --> 00:03:54,670
validate all the inputs otherwise you

00:03:51,670 --> 00:03:56,890
know you're gonna have people sending

00:03:54,670 --> 00:03:58,930
crazy data and you know you can have

00:03:56,890 --> 00:04:00,850
weird logs everywhere and you don't know

00:03:58,930 --> 00:04:03,010
what the hell's going on so you want to

00:04:00,850 --> 00:04:05,019
have a proper validation and this these

00:04:03,010 --> 00:04:08,079
specs keep keep on changing because you

00:04:05,019 --> 00:04:09,940
keep adding subtracting stuff and every

00:04:08,079 --> 00:04:14,140
time you do that you have to update all

00:04:09,940 --> 00:04:15,310
the servers and clients now this is all

00:04:14,140 --> 00:04:19,299
straight forward if you've ever written

00:04:15,310 --> 00:04:22,940
API server duh you know um it's not

00:04:19,299 --> 00:04:25,760
nothing auto door near here

00:04:22,940 --> 00:04:28,190
but the thing was that I had to take in

00:04:25,760 --> 00:04:30,470
consideration here is that um this is

00:04:28,190 --> 00:04:33,020
going to be community event I'm gonna be

00:04:30,470 --> 00:04:34,970
working with a team of volunteers for

00:04:33,020 --> 00:04:37,100
not necessarily from the pro community

00:04:34,970 --> 00:04:40,430
or whatever community particular

00:04:37,100 --> 00:04:44,330
committee this is something totally you

00:04:40,430 --> 00:04:46,490
it's all inclusive so I right now I have

00:04:44,330 --> 00:04:48,500
a team that consists of PHP coders and

00:04:46,490 --> 00:04:51,380
Python developers and blah blah blah

00:04:48,500 --> 00:04:54,680
blah on people from completely different

00:04:51,380 --> 00:05:00,110
background so and these are all

00:04:54,680 --> 00:05:03,980
volunteers so you have to find a way to

00:05:00,110 --> 00:05:06,470
to make all these people participate and

00:05:03,980 --> 00:05:08,600
you know without shoving you know hey

00:05:06,470 --> 00:05:10,370
you gotta have to use proll if you want

00:05:08,600 --> 00:05:14,030
to use me use my API server or whatever

00:05:10,370 --> 00:05:19,640
um so you have to extract them bounce

00:05:14,030 --> 00:05:23,630
somehow and basically you're gonna have

00:05:19,640 --> 00:05:27,290
to automate all this stuff so that you

00:05:23,630 --> 00:05:32,570
get you can provide a better search for

00:05:27,290 --> 00:05:34,910
you for your team members and so as an

00:05:32,570 --> 00:05:38,300
engineer the easiest thing i could do is

00:05:34,910 --> 00:05:43,400
basically a look for the route to do

00:05:38,300 --> 00:05:45,590
cogeneration um basically make API

00:05:43,400 --> 00:05:47,270
server will always have a specification

00:05:45,590 --> 00:05:49,250
you know what what sort of requests you

00:05:47,270 --> 00:05:51,800
send them what sort of response to the

00:05:49,250 --> 00:05:53,570
the servers gonna reply with and so you

00:05:51,800 --> 00:05:55,930
have a specification put it through code

00:05:53,570 --> 00:06:00,919
generator and then you get the code and

00:05:55,930 --> 00:06:02,720
if you're if you get get the right

00:06:00,919 --> 00:06:04,910
specification then you can do this you

00:06:02,720 --> 00:06:07,640
can generate code for Pearl you can

00:06:04,910 --> 00:06:11,960
generate the code go or whatever else um

00:06:07,640 --> 00:06:13,760
and then you're kind of the once you can

00:06:11,960 --> 00:06:20,840
get to get things rolling it's gonna be

00:06:13,760 --> 00:06:23,960
all automated right oh and uh Jerry code

00:06:20,840 --> 00:06:28,250
is really good because basically once

00:06:23,960 --> 00:06:31,550
you should do it you only have to write

00:06:28,250 --> 00:06:33,860
the very minimum code and um it's gonna

00:06:31,550 --> 00:06:35,420
the code that you generate it'll be

00:06:33,860 --> 00:06:39,740
consistent across like

00:06:35,420 --> 00:06:41,990
clients in different languages so when

00:06:39,740 --> 00:06:44,180
you have a team of heterogeneous

00:06:41,990 --> 00:06:48,250
engineers it's it's it's definitely

00:06:44,180 --> 00:06:53,690
better to to automate all this stuff

00:06:48,250 --> 00:06:55,820
okay and so this is basically on the

00:06:53,690 --> 00:06:57,790
server side this is basically uncertain

00:06:55,820 --> 00:07:03,470
client side uh what i want to i

00:06:57,790 --> 00:07:06,260
envisioned to have um so basically once

00:07:03,470 --> 00:07:08,620
you write the but want a single

00:07:06,260 --> 00:07:11,540
specification all this stuff is

00:07:08,620 --> 00:07:15,650
generated automatically except for that

00:07:11,540 --> 00:07:19,280
one bit where there's the custom logic

00:07:15,650 --> 00:07:29,570
that has to be dealt for each particular

00:07:19,280 --> 00:07:32,630
endpoint right okay so um so far um all

00:07:29,570 --> 00:07:37,070
this you could definitely do is prolong

00:07:32,630 --> 00:07:40,570
not um but uh again in this particular

00:07:37,070 --> 00:07:46,760
situation I decided why not go because

00:07:40,570 --> 00:07:48,490
um the one of the biggest strength was

00:07:46,760 --> 00:07:54,680
goes the fact that he can actually

00:07:48,490 --> 00:07:56,780
generate a single binary um in my case I

00:07:54,680 --> 00:07:59,210
don't have to explain how to do Sipan to

00:07:56,780 --> 00:08:02,090
my team members this is the same story

00:07:59,210 --> 00:08:05,810
with Python and in PHP actually um Oh

00:08:02,090 --> 00:08:09,080
Ruby I don't want it to explain how to

00:08:05,810 --> 00:08:13,460
use gem or I don't want to explain how

00:08:09,080 --> 00:08:16,370
to use the what's it for like my pip and

00:08:13,460 --> 00:08:20,900
and I don't know anything about PHP

00:08:16,370 --> 00:08:26,410
composer I if yet but anyway um I've

00:08:20,900 --> 00:08:31,700
been a pro programmer / need 15 16 years

00:08:26,410 --> 00:08:33,800
I'll of Sipan but it's a paint explain

00:08:31,700 --> 00:08:36,800
to non-performers and it's a pain to

00:08:33,800 --> 00:08:39,550
have them type c pen or sleep on em

00:08:36,800 --> 00:08:42,080
whatever and have them wave waiting and

00:08:39,550 --> 00:08:45,040
for the next 15 minutes they complain

00:08:42,080 --> 00:08:49,449
that it's taking forever so

00:08:45,040 --> 00:08:54,100
in this case if I chose golden is it's

00:08:49,449 --> 00:08:57,940
just hey you got a binary copy that and

00:08:54,100 --> 00:09:00,250
even if I had to have others maintain

00:08:57,940 --> 00:09:03,519
the service deployment order or the

00:09:00,250 --> 00:09:09,910
server side that's all they have to

00:09:03,519 --> 00:09:14,350
really care so and also if you whose

00:09:09,910 --> 00:09:18,009
family was writing go code here okay so

00:09:14,350 --> 00:09:23,019
hey for those of you who hadn't really

00:09:18,009 --> 00:09:26,579
done go go um one of the the greatest

00:09:23,019 --> 00:09:30,310
assets for go is the the the fact that

00:09:26,579 --> 00:09:33,279
it comes with all the parsers the AST

00:09:30,310 --> 00:09:35,589
then and code for matters so it's really

00:09:33,279 --> 00:09:38,500
really good for cogeneration you can

00:09:35,589 --> 00:09:40,990
just generally sloppy code and forget

00:09:38,500 --> 00:09:42,910
about it um in fact all you really have

00:09:40,990 --> 00:09:47,019
to do is come up with code and just

00:09:42,910 --> 00:09:50,380
write this and voila you get

00:09:47,019 --> 00:09:52,600
standardized go code right so when

00:09:50,380 --> 00:09:54,639
you're generating promo code for example

00:09:52,600 --> 00:09:57,329
I mean you could run through procreative

00:09:54,639 --> 00:10:00,760
go pro site or whatever but um Oh

00:09:57,329 --> 00:10:02,560
appropriately and pro tidy both of those

00:10:00,760 --> 00:10:05,709
they they they have they have the you

00:10:02,560 --> 00:10:10,350
know in the truth to to the pro way you

00:10:05,709 --> 00:10:14,079
can tweak almost every single parameter

00:10:10,350 --> 00:10:16,600
right whereas in go there is no such

00:10:14,079 --> 00:10:19,959
thing it's just there's only one way to

00:10:16,600 --> 00:10:22,000
to format go and that's it um this is

00:10:19,959 --> 00:10:24,310
actually good when you when you when you

00:10:22,000 --> 00:10:26,680
want to just you know fire forget these

00:10:24,310 --> 00:10:29,769
things and I should think this is one of

00:10:26,680 --> 00:10:31,990
the killer features of go because um you

00:10:29,769 --> 00:10:34,089
once you start writing go cody's there's

00:10:31,990 --> 00:10:36,939
just no way you're gonna have this holy

00:10:34,089 --> 00:10:39,010
wars of how many spaces you're gonna use

00:10:36,939 --> 00:10:40,959
for indent or or if you're gonna have

00:10:39,010 --> 00:10:43,420
spaces after braces or you know that

00:10:40,959 --> 00:10:47,019
that kind of thing so I really thinking

00:10:43,420 --> 00:10:50,050
the head beam having a universal core

00:10:47,019 --> 00:10:53,980
formatting is really really good good

00:10:50,050 --> 00:10:56,170
thing to have oh and this is uh not

00:10:53,980 --> 00:10:57,170
really that important but also for all

00:10:56,170 --> 00:11:02,329
your pro mongers

00:10:57,170 --> 00:11:04,940
go allows that um that trailing comma

00:11:02,329 --> 00:11:07,459
wash they eat forces you um when you

00:11:04,940 --> 00:11:09,050
have a line that separate out like that

00:11:07,459 --> 00:11:12,160
you have to have the trailing kamar

00:11:09,050 --> 00:11:15,790
otherwise it's a syntax error so um I

00:11:12,160 --> 00:11:19,040
really love it it feels right at home

00:11:15,790 --> 00:11:22,850
okay so that's why that's how I sort of

00:11:19,040 --> 00:11:28,930
said it okay well um it's simple so I'm

00:11:22,850 --> 00:11:32,660
just gonna use go now next as far as

00:11:28,930 --> 00:11:35,750
specifications go on how do to specify

00:11:32,660 --> 00:11:41,449
the endpoints the the API um there are a

00:11:35,750 --> 00:11:46,600
lot of technologies out there and I had

00:11:41,449 --> 00:11:49,240
to decide on which one to use so let's

00:11:46,600 --> 00:11:51,380
I'm just gonna go over sort of the

00:11:49,240 --> 00:11:55,519
thought process that I went through with

00:11:51,380 --> 00:11:57,620
each of these so this first protobuf

00:11:55,519 --> 00:12:00,500
flatbuffers they're pretty much the same

00:11:57,620 --> 00:12:02,779
thing um a flap effort buffers new proto

00:12:00,500 --> 00:12:08,870
buff buff has been around for a long

00:12:02,779 --> 00:12:12,920
time it it it's it's a great tool if you

00:12:08,870 --> 00:12:16,790
using by yourself when you start having

00:12:12,920 --> 00:12:21,560
to force others who are not necessarily

00:12:16,790 --> 00:12:23,120
up to speed with this tool it gets

00:12:21,560 --> 00:12:25,279
really hard because it's binary protocol

00:12:23,120 --> 00:12:30,920
you can't just inspect in it inspect

00:12:25,279 --> 00:12:32,630
like a regular HTTP call um and soon a

00:12:30,920 --> 00:12:34,970
few your junior developers to go and

00:12:32,630 --> 00:12:38,899
start complaining that you know they

00:12:34,970 --> 00:12:41,899
have no idea why an error happen or how

00:12:38,899 --> 00:12:44,480
did the bug it so I wasn't sure about

00:12:41,899 --> 00:12:47,209
that plus the other thing is um I wanted

00:12:44,480 --> 00:12:51,110
to customize how the proto protocol

00:12:47,209 --> 00:12:53,870
buffers um behave or how did what have

00:12:51,110 --> 00:12:56,569
the code generated code ended up and so

00:12:53,870 --> 00:12:59,600
I asked the googler um is here example

00:12:56,569 --> 00:13:01,610
you know how to write extra new plugins

00:12:59,600 --> 00:13:04,360
for protobuf and the answer i got from

00:13:01,610 --> 00:13:04,360
this Googler was

00:13:04,930 --> 00:13:12,320
okay so if there are 10 people who knows

00:13:09,500 --> 00:13:16,700
how to write a protocol plugin I guess I

00:13:12,320 --> 00:13:22,610
won't be the 11th one oh yeah so that

00:13:16,700 --> 00:13:28,370
was kind of out yeah this is true story

00:13:22,610 --> 00:13:33,040
and next one is gr pc on again google

00:13:28,370 --> 00:13:36,610
stuff it's HTTP to its new and him I

00:13:33,040 --> 00:13:39,920
wanted to use it but again it's HTTP to

00:13:36,610 --> 00:13:44,570
I don't know how much you've worked was

00:13:39,920 --> 00:13:47,840
HTTP to I haven't got to a point to of

00:13:44,570 --> 00:13:51,500
deploying in a tp2 to the while myself

00:13:47,840 --> 00:13:56,630
but still as far as I try when something

00:13:51,500 --> 00:13:59,930
goes wrong I couldn't really well I i

00:13:56,630 --> 00:14:03,560
was able to debug stuff but it's more

00:13:59,930 --> 00:14:06,790
effort than I wanted to so and wasn't

00:14:03,560 --> 00:14:12,220
sure if I wanted to force that to my

00:14:06,790 --> 00:14:16,760
teammate so hmm next thing I considered

00:14:12,220 --> 00:14:21,500
swagger swagger is adjacent based its

00:14:16,760 --> 00:14:24,470
its its database so anybody can read it

00:14:21,500 --> 00:14:27,830
and you know if any language nowadays

00:14:24,470 --> 00:14:29,360
has a Jason Porter so um theoretically

00:14:27,830 --> 00:14:33,260
you can write the tool to work with us

00:14:29,360 --> 00:14:34,970
in any language well I don't know if

00:14:33,260 --> 00:14:40,130
you've ever seen the webpage for swagger

00:14:34,970 --> 00:14:41,840
but it looks very very hipster it's and

00:14:40,130 --> 00:14:43,970
I've also heard that it has problem with

00:14:41,840 --> 00:14:45,530
internet internalization it specifically

00:14:43,970 --> 00:14:47,420
apparently it doesn't work with some

00:14:45,530 --> 00:14:51,650
japanese characters which makes kind of

00:14:47,420 --> 00:14:53,720
moot point for me um yeah and if again

00:14:51,650 --> 00:14:57,770
if you go to the webpage it's really

00:14:53,720 --> 00:15:01,070
really really big so hmm wasn't sure

00:14:57,770 --> 00:15:02,900
kind of put in back bar and those Jason

00:15:01,070 --> 00:15:06,530
API which I know you talked about it

00:15:02,900 --> 00:15:09,800
yeah yeah yeah there you go ok so those

00:15:06,530 --> 00:15:12,589
Jason API again it's Jason it's so

00:15:09,800 --> 00:15:13,130
anybody can read it but it looked the

00:15:12,589 --> 00:15:15,350
spec

00:15:13,130 --> 00:15:19,970
looked a little too big it's it's much

00:15:15,350 --> 00:15:22,640
more formal than i wanted to have if

00:15:19,970 --> 00:15:26,270
you're being paid to do this I I get I I

00:15:22,640 --> 00:15:28,730
was saying this is good um but again

00:15:26,270 --> 00:15:30,950
team of volunteers were not necessarily

00:15:28,730 --> 00:15:32,510
committed hundred percent to this and I

00:15:30,950 --> 00:15:37,510
wasn't sure if I wanted to make them

00:15:32,510 --> 00:15:40,760
feet through the whole spec so okay uh

00:15:37,510 --> 00:15:48,050
so finally Jason schema I came down to

00:15:40,760 --> 00:15:50,060
Jason schema so the common point phone

00:15:48,050 --> 00:15:51,740
for the last three is three options that

00:15:50,060 --> 00:15:54,860
I had based basically they were all

00:15:51,740 --> 00:15:59,150
Jason it was a text-based and anybody

00:15:54,860 --> 00:16:01,760
could read it um the thing was Jason

00:15:59,150 --> 00:16:05,570
schema compare to other options were the

00:16:01,760 --> 00:16:10,940
it's it's simple its moral it's more

00:16:05,570 --> 00:16:16,430
like a toy but for my purposes it was

00:16:10,940 --> 00:16:19,520
good enough I would rather not have an

00:16:16,430 --> 00:16:23,030
intimidating spec to give out to my room

00:16:19,520 --> 00:16:24,920
for my teammates and say well okay will

00:16:23,030 --> 00:16:27,290
you know read it when at when we have a

00:16:24,920 --> 00:16:30,350
time that's that was an option it had to

00:16:27,290 --> 00:16:33,940
be small enough some simple enough so

00:16:30,350 --> 00:16:39,470
that you know people could at least feel

00:16:33,940 --> 00:16:43,760
feel like they understand right cons is

00:16:39,470 --> 00:16:48,050
here is well these are basically

00:16:43,760 --> 00:16:52,280
limitations of Jason um Jason isn't that

00:16:48,050 --> 00:16:54,500
express expresso expressive syntax check

00:16:52,280 --> 00:16:57,710
did how you guys do syntax check for

00:16:54,500 --> 00:17:01,220
Jason do you have any good good

00:16:57,710 --> 00:17:03,260
solutions yeah well tidy is it I mean

00:17:01,220 --> 00:17:09,079
you have to end up tiny it but what do

00:17:03,260 --> 00:17:11,540
you use with tools well close yeah so

00:17:09,079 --> 00:17:14,120
are you I used to do that and then there

00:17:11,540 --> 00:17:17,150
was Jake you you know Jada school Jake

00:17:14,120 --> 00:17:18,770
you yeah so if you know through JQ it

00:17:17,150 --> 00:17:21,470
actually gives you the line number which

00:17:18,770 --> 00:17:22,870
a lot of tools don't give you so I end

00:17:21,470 --> 00:17:29,470
up doing

00:17:22,870 --> 00:17:32,350
had Jason pipe 2jq and still it's it's

00:17:29,470 --> 00:17:36,490
not a great thing to do a great way to

00:17:32,350 --> 00:17:37,780
do it but oh well it's doable and also I

00:17:36,490 --> 00:17:45,130
really hate the fact that you can't

00:17:37,780 --> 00:17:46,990
comment on Jason but yes yes now I

00:17:45,130 --> 00:17:48,580
actually forgot to put in the slides but

00:17:46,990 --> 00:17:51,280
the only reason I didn't you didn't use

00:17:48,580 --> 00:17:53,920
yama was it was the fact that the the

00:17:51,280 --> 00:17:57,910
yellow parser for God really really

00:17:53,920 --> 00:18:02,170
really really sucks so if I have to use

00:17:57,910 --> 00:18:05,140
the mo I will definitely use pearl all

00:18:02,170 --> 00:18:07,450
right so um just in case you don't know

00:18:05,140 --> 00:18:09,640
what Jason schema is it basically

00:18:07,450 --> 00:18:14,620
describes a particular JSON format in

00:18:09,640 --> 00:18:16,929
Jason examples if you want to describe a

00:18:14,620 --> 00:18:20,470
heck string where there's a little type

00:18:16,929 --> 00:18:22,870
of you need a plus they're so type

00:18:20,470 --> 00:18:24,550
string and you can have a regular

00:18:22,870 --> 00:18:27,670
expression pattern that the needs to

00:18:24,550 --> 00:18:32,440
match that has has to have a plus sign

00:18:27,670 --> 00:18:36,550
before the dollar if you want a positive

00:18:32,440 --> 00:18:40,330
integer a type integer minimum zero

00:18:36,550 --> 00:18:43,660
minimum one yeah sorry anyway you get

00:18:40,330 --> 00:18:48,730
the point fun with that you can also

00:18:43,660 --> 00:18:53,559
combine rules you can have one of either

00:18:48,730 --> 00:18:57,090
of these and you can combine that to

00:18:53,559 --> 00:19:02,770
describe a object so like a hash right

00:18:57,090 --> 00:19:06,610
an object which has a name and age age

00:19:02,770 --> 00:19:10,900
is an integer name is a string um name

00:19:06,610 --> 00:19:13,320
it couldn't has a max length of 128 and

00:19:10,900 --> 00:19:20,320
name is required with ages optional

00:19:13,320 --> 00:19:25,590
right you could also have references so

00:19:20,320 --> 00:19:28,059
basically in the Asian name section I

00:19:25,590 --> 00:19:30,600
cut up the actual definitions for

00:19:28,059 --> 00:19:32,360
brevity but you can have the the actual

00:19:30,600 --> 00:19:38,230
definitions in

00:19:32,360 --> 00:19:43,549
in a arbitrary location in the the JSON

00:19:38,230 --> 00:19:45,890
schema and refer back by saying dollar

00:19:43,549 --> 00:19:49,940
ref whatever path this is called

00:19:45,890 --> 00:19:55,940
adjacent reference um which is actually

00:19:49,940 --> 00:19:57,830
I really half-baked to spec when you go

00:19:55,940 --> 00:20:02,450
to go look up Jason reference you can

00:19:57,830 --> 00:20:04,820
find a draft specification from about

00:20:02,450 --> 00:20:09,169
four years ago and it they haven't

00:20:04,820 --> 00:20:11,179
really made it as a formal spec but it's

00:20:09,169 --> 00:20:15,260
simple enough so a lot of people just

00:20:11,179 --> 00:20:19,220
kind of use that as the basis and right

00:20:15,260 --> 00:20:21,890
up right libraries for this okay so this

00:20:19,220 --> 00:20:26,679
is the gist of JSON schema babe you know

00:20:21,890 --> 00:20:29,450
um it's it's fairly simple and it uh it

00:20:26,679 --> 00:20:33,110
you're definitely I think that this is

00:20:29,450 --> 00:20:35,890
simple enough that you did my team of

00:20:33,110 --> 00:20:40,010
volunteers are not intimidated by it so

00:20:35,890 --> 00:20:42,559
I guess did this works there's also this

00:20:40,010 --> 00:20:49,309
thing called Jason hyper schemer it's

00:20:42,559 --> 00:20:51,770
basically um ght p endpoints with Jace

00:20:49,309 --> 00:20:55,010
Jason schemas to describe the input and

00:20:51,770 --> 00:20:58,429
output huh it sort of looks like this

00:20:55,010 --> 00:21:03,049
basically you have a links section with

00:20:58,429 --> 00:21:07,100
href which is they be path and um schema

00:21:03,049 --> 00:21:09,440
is the request payload the specification

00:21:07,100 --> 00:21:15,020
for the request payload and target is

00:21:09,440 --> 00:21:18,470
the response right so um when you use

00:21:15,020 --> 00:21:22,480
hyper schema with JC schema uh you get

00:21:18,470 --> 00:21:27,400
to describe each of your endpoints and

00:21:22,480 --> 00:21:27,400
which puts sent in and what you get back

00:21:28,029 --> 00:21:38,139
all right now okay so Jason schema look

00:21:35,559 --> 00:21:43,359
good for me ah but and I was gonna write

00:21:38,139 --> 00:21:49,719
stuff and go so I here starts the the

00:21:43,359 --> 00:21:52,899
searching that turns out unlike the

00:21:49,719 --> 00:21:56,009
mature pearl community go doesn't have a

00:21:52,899 --> 00:21:58,690
lot of mature libraries for these things

00:21:56,009 --> 00:22:01,359
there are lots of missing components

00:21:58,690 --> 00:22:03,879
there were there was actually a few

00:22:01,359 --> 00:22:06,749
Jason schema libraries but all they

00:22:03,879 --> 00:22:12,700
could do was read the schemas and

00:22:06,749 --> 00:22:17,049
validate the equivalent of raw hashes

00:22:12,700 --> 00:22:18,399
and go you can pass them pass trucks or

00:22:17,049 --> 00:22:23,710
anything like that which is kind of a

00:22:18,399 --> 00:22:26,169
pain and none of them actually created

00:22:23,710 --> 00:22:28,389
validators and there was no library for

00:22:26,169 --> 00:22:30,429
hyper schema and there wasn't anything

00:22:28,389 --> 00:22:33,820
that could generate web app scalp the

00:22:30,429 --> 00:22:37,929
skeletons so well okay I'll write

00:22:33,820 --> 00:22:41,700
everything uh-huh so I wrote Jason

00:22:37,929 --> 00:22:46,539
pointer their equivalent in Sipan to uh

00:22:41,700 --> 00:22:53,769
I wrote Jason reference I wrote Jason

00:22:46,539 --> 00:23:00,460
schema so at this point I was able to

00:22:53,769 --> 00:23:04,259
write Jason schemas um next up I need to

00:23:00,460 --> 00:23:08,889
write the the actual API endpoints so I

00:23:04,259 --> 00:23:15,129
wrote the hyper schema and then i wrote

00:23:08,889 --> 00:23:18,909
a validator generator yeah you're

00:23:15,129 --> 00:23:23,080
welcome by way this validator stuff is

00:23:18,909 --> 00:23:25,299
by far my favorite tool that I wrote so

00:23:23,080 --> 00:23:28,719
far it's I mean favorite library that I

00:23:25,299 --> 00:23:31,960
wrote so far for this project so

00:23:28,719 --> 00:23:35,830
basically you give it a JSON schema the

00:23:31,960 --> 00:23:37,080
left side and you get back on a complete

00:23:35,830 --> 00:23:41,460
go code

00:23:37,080 --> 00:23:44,280
ah the chicken just cut and paste and

00:23:41,460 --> 00:23:48,860
let's see the yeah i'm just going to

00:23:44,280 --> 00:23:48,860
shoot with demek you because I like it

00:23:54,730 --> 00:24:09,540
I'm sure you guys get that big enough

00:24:10,250 --> 00:24:26,030
okay je s well boom yeah to Bigfoot aah

00:24:19,670 --> 00:24:29,220
so basically if you just use yes well

00:24:26,030 --> 00:24:32,100
regularly it takes a schema file but it

00:24:29,220 --> 00:24:35,610
it doesn't look cool so yesterday i

00:24:32,100 --> 00:24:39,800
wrote a JS file server it's going to

00:24:35,610 --> 00:24:39,800
open up its gonna start an ACP sir

00:24:44,450 --> 00:25:01,560
localhost 8080 yep so I'm sorry has

00:24:55,440 --> 00:25:06,470
absolutely no CSS there but I wrote this

00:25:01,560 --> 00:25:10,710
yesterday so anyway um so given this

00:25:06,470 --> 00:25:15,180
schema basically a string that can be

00:25:10,710 --> 00:25:17,790
one of these foo bar baz this code gets

00:25:15,180 --> 00:25:19,890
generated and then you can just cut and

00:25:17,790 --> 00:25:23,300
paste this and it's going to magically

00:25:19,890 --> 00:25:26,610
work you basically take this VZ ER or

00:25:23,300 --> 00:25:30,030
and the call validate on with it and

00:25:26,610 --> 00:25:35,400
it's work you can have more rules to it

00:25:30,030 --> 00:25:42,500
um let's see so what this doesn't really

00:25:35,400 --> 00:25:42,500
make sense but min length

00:25:44,190 --> 00:25:52,210
yea nay hmm yeah google com yeah there

00:25:49,690 --> 00:25:56,830
you go so he just added one more rule

00:25:52,210 --> 00:26:01,350
here it gives you a fugitive well

00:25:56,830 --> 00:26:03,330
there's you can also have the

00:26:01,350 --> 00:26:10,090
definitions that I talking about

00:26:03,330 --> 00:26:14,309
definitions Redfoo and I'm going to put

00:26:10,090 --> 00:26:32,309
this whole thing in the definition here

00:26:14,309 --> 00:26:32,309
and refer it as say prop properties bar

00:26:32,549 --> 00:26:45,899
mission sooo all right missing comma

00:26:39,720 --> 00:26:50,580
stop act properties bubu bubu oh damn oh

00:26:45,899 --> 00:26:50,580
ok that's gonna be a ref

00:26:55,149 --> 00:27:03,519
yeah so um this case what's doing is

00:27:00,129 --> 00:27:08,889
basically you have definition here which

00:27:03,519 --> 00:27:11,919
is referred to but by here right so this

00:27:08,889 --> 00:27:14,739
is the single definition which could be

00:27:11,919 --> 00:27:22,169
referred to by other multiple rules so

00:27:14,739 --> 00:27:25,539
um gets referred some popping over there

00:27:22,169 --> 00:27:28,599
anyway so um you can just come to place

00:27:25,539 --> 00:27:32,830
this code up put it in your go code and

00:27:28,599 --> 00:27:35,219
then it's committed the reason why it

00:27:32,830 --> 00:27:38,859
generates code like this is unlike

00:27:35,219 --> 00:27:42,219
dynamic languages don't really want to

00:27:38,859 --> 00:27:45,479
load definition on in on at runtime and

00:27:42,219 --> 00:27:53,499
have it generate the rules in within the

00:27:45,479 --> 00:27:56,080
in-memory because for one thing you want

00:27:53,499 --> 00:27:58,269
to exploit the fact that you know go can

00:27:56,080 --> 00:28:00,519
compile all this stuff beforehand right

00:27:58,269 --> 00:28:07,419
and make your boo-boo time much much

00:28:00,519 --> 00:28:11,409
faster so the idea is while I could have

00:28:07,419 --> 00:28:14,529
just always required a fight to be from

00:28:11,409 --> 00:28:17,919
a file right arm the definition from

00:28:14,529 --> 00:28:19,960
file um for purposes of using go it's

00:28:17,919 --> 00:28:21,789
much better to just have all the

00:28:19,960 --> 00:28:26,589
kool-aid out and and just come and paste

00:28:21,789 --> 00:28:31,749
that to to the to the files in the

00:28:26,589 --> 00:28:34,599
project so anyway get it back all right

00:28:31,749 --> 00:28:37,450
so um at this point I can parse parse

00:28:34,599 --> 00:28:40,899
the schema I can have the hyper schema

00:28:37,450 --> 00:28:42,369
to to set up all the endpoints um I know

00:28:40,899 --> 00:28:44,679
I have all the fat layers they required

00:28:42,369 --> 00:28:46,330
so next step would be to actually

00:28:44,679 --> 00:28:50,710
generate the server and client code

00:28:46,330 --> 00:28:55,509
right now when you google for JSON

00:28:50,710 --> 00:28:57,399
schema goal and cogeneration a lot of

00:28:55,509 --> 00:28:59,889
blog entries to talk about how it's

00:28:57,399 --> 00:29:01,989
really cool to do it to do to do this

00:28:59,889 --> 00:29:06,020
but none of them actually give you the

00:29:01,989 --> 00:29:10,200
code to generate servers and clients

00:29:06,020 --> 00:29:16,920
alright so um again I wrote something

00:29:10,200 --> 00:29:20,640
called HS up you're welcome so it takes

00:29:16,920 --> 00:29:26,610
Jason hyper schema file it builds sir

00:29:20,640 --> 00:29:30,900
Skelton and yes it generates code like

00:29:26,610 --> 00:29:34,530
this ah details not important but it

00:29:30,900 --> 00:29:37,950
does all the the you know being the the

00:29:34,530 --> 00:29:39,810
clients request parsing is marshaling to

00:29:37,950 --> 00:29:44,550
Jason blah blah blah it also generates

00:29:39,810 --> 00:29:46,530
the client code um it's very long

00:29:44,550 --> 00:29:50,970
because i also have all the debug

00:29:46,530 --> 00:29:56,250
statements that the i needed to do to

00:29:50,970 --> 00:29:59,850
need to debug all this stuff anyway so

00:29:56,250 --> 00:30:05,360
yeah almost done now the problem was

00:29:59,850 --> 00:30:09,770
having this kind of a tool is that it's

00:30:05,360 --> 00:30:13,110
it's a little too generic um

00:30:09,770 --> 00:30:15,780
specifically the way you access your

00:30:13,110 --> 00:30:19,080
database for example is it's really hard

00:30:15,780 --> 00:30:26,280
to generalize it unless you using rails

00:30:19,080 --> 00:30:29,430
ah so it I have particular set of tools

00:30:26,280 --> 00:30:37,560
that I use to access this database and I

00:30:29,430 --> 00:30:43,620
have particular ways to to to encode the

00:30:37,560 --> 00:30:45,750
data during the requests so um and I

00:30:43,620 --> 00:30:49,310
wasn't gonna force this into to all the

00:30:45,750 --> 00:30:57,240
users roof for for this skelton utility

00:30:49,310 --> 00:30:59,960
so if you're familiar with go um go

00:30:57,240 --> 00:31:04,260
allows you to have this internal package

00:30:59,960 --> 00:31:09,750
internal packages can live within a go

00:31:04,260 --> 00:31:11,940
package but it doesn't get uh it's not

00:31:09,750 --> 00:31:16,130
exposed to the outside world so you can

00:31:11,940 --> 00:31:20,880
pretty much have you know I have

00:31:16,130 --> 00:31:24,300
specific tools there and don't worry

00:31:20,880 --> 00:31:27,060
about having your your consumers being

00:31:24,300 --> 00:31:31,740
able to use it so the anything under

00:31:27,060 --> 00:31:36,570
internal can only be can only be

00:31:31,740 --> 00:31:39,840
accessed within the the project so here

00:31:36,570 --> 00:31:42,560
i have a gen v Beechum model gen

00:31:39,840 --> 00:31:47,550
transport all these tools they they

00:31:42,560 --> 00:31:50,310
basically create the transport layer the

00:31:47,550 --> 00:31:54,030
marshaling the serialization the

00:31:50,310 --> 00:31:56,580
deserialization data data retrieval

00:31:54,030 --> 00:32:01,520
insertion so basically database access

00:31:56,580 --> 00:32:01,520
layer and all the caching blah blah blah

00:32:01,700 --> 00:32:09,950
now this is done by basically parsing go

00:32:05,970 --> 00:32:14,370
code because I can um all I have is a

00:32:09,950 --> 00:32:18,200
small annotation there um plus transport

00:32:14,370 --> 00:32:22,110
plus model to to these struct

00:32:18,200 --> 00:32:24,630
definitions and whenever it's annotated

00:32:22,110 --> 00:32:27,660
like this it just generates the right

00:32:24,630 --> 00:32:29,910
code um if you're not familiar with go

00:32:27,660 --> 00:32:32,880
there's also this thing called the feel

00:32:29,910 --> 00:32:36,060
struct field tags to the right through

00:32:32,880 --> 00:32:39,150
right mo side that tells you that gives

00:32:36,060 --> 00:32:43,890
you hints for each of the field in this

00:32:39,150 --> 00:32:46,290
case the Jason como means how to encode

00:32:43,890 --> 00:32:49,260
into Jason or which field to look at to

00:32:46,290 --> 00:32:53,600
retrieve the the field a field value for

00:32:49,260 --> 00:32:57,120
the this uh from from the Jason struck

00:32:53,600 --> 00:32:59,100
okay and parsing go code is actually

00:32:57,120 --> 00:33:01,860
really really easy because it's in the

00:32:59,100 --> 00:33:08,700
standard library all you really need is

00:33:01,860 --> 00:33:10,830
this arm and you have a complete key of

00:33:08,700 --> 00:33:13,800
your of your source code and you'll have

00:33:10,830 --> 00:33:17,370
to descend into the tree retrieve the

00:33:13,800 --> 00:33:19,710
right data blah blah blah which I'm sure

00:33:17,370 --> 00:33:22,670
you've done in the past so we're not

00:33:19,710 --> 00:33:22,670
gonna get details

00:33:27,149 --> 00:33:37,299
yeah okay so I whip you to myself there

00:33:30,509 --> 00:33:40,360
okay and the end result so I have about

00:33:37,299 --> 00:33:43,360
twenty one thousand lines told out of

00:33:40,360 --> 00:33:45,490
which 56.4 percent is completely

00:33:43,360 --> 00:33:49,269
generated I didn't write a single go

00:33:45,490 --> 00:33:51,730
there I have about two thousand lines of

00:33:49,269 --> 00:33:55,210
a cojer internal domain specific code

00:33:51,730 --> 00:33:58,389
generator and about seven or six six

00:33:55,210 --> 00:34:02,769
thousand plus lines were generated by

00:33:58,389 --> 00:34:07,600
myself so um and this does include the

00:34:02,769 --> 00:34:19,329
client which I have fur fur I did write

00:34:07,600 --> 00:34:23,589
for Pearl so I have a p5 directory with

00:34:19,329 --> 00:34:29,589
an internal being blah generate from

00:34:23,589 --> 00:34:31,889
spec file this actually generates these

00:34:29,589 --> 00:34:31,889
files

00:34:33,330 --> 00:34:43,320
blah blah blah and the only thing it

00:34:38,280 --> 00:34:46,320
really does is it reads the case in

00:34:43,320 --> 00:34:48,330
schema file see whisper oh it's much

00:34:46,320 --> 00:34:51,810
easier to hit hammers Jason files Tico

00:34:48,330 --> 00:34:54,570
Jason it's much nicer but it doesn't do

00:34:51,810 --> 00:34:57,750
all the type checks so that's hope it

00:34:54,570 --> 00:35:00,260
does a lot of hand waving there anyway

00:34:57,750 --> 00:35:02,550
so I could do the same for python and

00:35:00,260 --> 00:35:04,260
ruby in whatever i'm actually waiting

00:35:02,550 --> 00:35:08,850
for the other team members to do that

00:35:04,260 --> 00:35:12,470
for me um but everything is there so I

00:35:08,850 --> 00:35:12,470
think it's gonna be done soon enough

00:35:12,620 --> 00:35:24,090
yeah and all the code is up it this is a

00:35:19,230 --> 00:35:31,290
the bills con project is is one hundred

00:35:24,090 --> 00:35:33,510
percent uh public um I today only only

00:35:31,290 --> 00:35:36,450
talked about the the API server part of

00:35:33,510 --> 00:35:39,510
it but it's actually a framework so it

00:35:36,450 --> 00:35:42,660
has all these these these know how or

00:35:39,510 --> 00:35:46,590
might our know-how how to organize

00:35:42,660 --> 00:35:48,900
conferences and we need two to four

00:35:46,590 --> 00:35:50,580
others two to use it in the future so

00:35:48,900 --> 00:35:53,280
that they don't have to go through all

00:35:50,580 --> 00:35:55,830
the well if you if you've been to dance

00:35:53,280 --> 00:35:59,940
talk this morning he was talking about

00:35:55,830 --> 00:36:02,370
all the you know the holes like extra

00:35:59,940 --> 00:36:04,410
cost and then everything else that we

00:36:02,370 --> 00:36:06,060
mean to dominate everything we know

00:36:04,410 --> 00:36:09,420
about these things and and have others

00:36:06,060 --> 00:36:11,160
use it okay so uh the code is there if

00:36:09,420 --> 00:36:16,080
you're interested you can if you can go

00:36:11,160 --> 00:36:18,600
check it out and I'm hoping the one day

00:36:16,080 --> 00:36:20,490
some maybe not this particular tool but

00:36:18,600 --> 00:36:24,360
something like this with the take over

00:36:20,490 --> 00:36:26,540
the server for ab c and everything all

00:36:24,360 --> 00:36:32,130
the conferences that I know that I go to

00:36:26,540 --> 00:36:34,430
so hey that's off of me is there any

00:36:32,130 --> 00:36:34,430
questions

00:36:34,540 --> 00:36:40,230
I can show the code whatever yeah

00:36:47,610 --> 00:37:00,300
anything well uh if you're not familiar

00:36:56,950 --> 00:37:06,700
with go it's it's kind of hard to do to

00:37:00,300 --> 00:37:09,540
just show the code so nothing okay all

00:37:06,700 --> 00:37:09,540

YouTube URL: https://www.youtube.com/watch?v=iu9Bc4yYisw


