Title: 2016 - Writing Command Line Tools for Other Peopleâ€Ž  - Brad Lhotsky
Publication date: 2016-06-27
Playlist: YAPC::NA 2016
Description: 
	
Captions: 
	00:00:06,770 --> 00:00:14,940
yeah they had the alt text for this this

00:00:10,950 --> 00:00:17,310
xkd ace XKCD is great my name's Brad lot

00:00:14,940 --> 00:00:19,650
ski I have a privilege of working at

00:00:17,310 --> 00:00:21,779
craigslist these days you probably have

00:00:19,650 --> 00:00:23,100
heard of us once or twice before we

00:00:21,779 --> 00:00:26,220
Brightpearl we do a lot of really cool

00:00:23,100 --> 00:00:27,869
stuff I'm part of a team about 50 people

00:00:26,220 --> 00:00:29,789
total in the company that's everyone

00:00:27,869 --> 00:00:31,080
it's great to be a part of a small team

00:00:29,789 --> 00:00:33,390
if you'd like to join our team and make

00:00:31,080 --> 00:00:37,710
it slightly larger but not too big come

00:00:33,390 --> 00:00:39,480
talk to me um we'd love to have you so

00:00:37,710 --> 00:00:40,739
this presentation is something that I've

00:00:39,480 --> 00:00:43,050
been mulling around in my head for a

00:00:40,739 --> 00:00:44,940
really long time the how many of you

00:00:43,050 --> 00:00:47,340
guys write command line tools and pearl

00:00:44,940 --> 00:00:49,559
right and how many of you want other

00:00:47,340 --> 00:00:51,239
people to use those things how many

00:00:49,559 --> 00:00:54,750
people actually have a lot of people

00:00:51,239 --> 00:00:57,629
using those things yeah it make crossing

00:00:54,750 --> 00:01:00,149
that gap is really difficult um and I

00:00:57,629 --> 00:01:02,460
was able to do that recently to get

00:01:00,149 --> 00:01:03,570
people to use my my command line tools

00:01:02,460 --> 00:01:05,519
so i wanted to share some of the

00:01:03,570 --> 00:01:07,740
shortcuts that i learned some best

00:01:05,519 --> 00:01:09,960
practices these may not work for you but

00:01:07,740 --> 00:01:13,470
they they work for me so i'm going to be

00:01:09,960 --> 00:01:15,299
pedantic and stick to them so what is

00:01:13,470 --> 00:01:16,860
the command line interface we're talking

00:01:15,299 --> 00:01:21,090
about stuff that you run from terminal

00:01:16,860 --> 00:01:22,860
from shell personally i prefer not using

00:01:21,090 --> 00:01:24,960
a mouse i like to be able to keyboard in

00:01:22,860 --> 00:01:26,970
and once i can keyboard something the

00:01:24,960 --> 00:01:29,310
really key piece here is that computers

00:01:26,970 --> 00:01:31,079
can run it for me if it's a command line

00:01:29,310 --> 00:01:32,790
tool and accepts arguments that i can

00:01:31,079 --> 00:01:34,170
type in with my keyboard then i can

00:01:32,790 --> 00:01:35,850
script it away and put it into crime

00:01:34,170 --> 00:01:36,930
then I don't have to do it so if

00:01:35,850 --> 00:01:38,670
something happens in the middle of the

00:01:36,930 --> 00:01:40,049
night and sets off an alert and I have a

00:01:38,670 --> 00:01:41,820
tool for that I can have the computer

00:01:40,049 --> 00:01:45,840
run the tool instead of me which means I

00:01:41,820 --> 00:01:47,430
get to say sleeping which is awesome so

00:01:45,840 --> 00:01:48,450
there's a number of different things

00:01:47,430 --> 00:01:51,180
that we talk about when we talk about

00:01:48,450 --> 00:01:52,470
command-line interfaces you how many

00:01:51,180 --> 00:01:55,409
people have done stuff with curses or

00:01:52,470 --> 00:01:57,180
any curses yeah that stuff is awesome

00:01:55,409 --> 00:01:58,950
for what it does but that's not really

00:01:57,180 --> 00:02:00,210
what I'm talking about here because so

00:01:58,950 --> 00:02:02,939
most of that stuff really can't be

00:02:00,210 --> 00:02:04,409
automated away very easily on there's

00:02:02,939 --> 00:02:05,670
gin you read line which is great for

00:02:04,409 --> 00:02:07,380
when you're writing command line

00:02:05,670 --> 00:02:10,080
utilities because the that provides you

00:02:07,380 --> 00:02:11,390
with a buffer that you can then scroll

00:02:10,080 --> 00:02:12,560
through your navigational history

00:02:11,390 --> 00:02:14,240
if you've ever been using command line

00:02:12,560 --> 00:02:15,319
utility and you can hit the up arrow and

00:02:14,240 --> 00:02:17,600
you can see something else that you've

00:02:15,319 --> 00:02:20,540
you've typed before that's GNU red line

00:02:17,600 --> 00:02:22,130
it's pretty neat um it functions on

00:02:20,540 --> 00:02:24,530
standard in standard out standard error

00:02:22,130 --> 00:02:27,890
Oh centered out twice but set that's a

00:02:24,530 --> 00:02:29,750
standard error right there and sometimes

00:02:27,890 --> 00:02:32,900
they require a clarification or

00:02:29,750 --> 00:02:34,940
interaction user on the that's typically

00:02:32,900 --> 00:02:38,950
what a command-line interface will look

00:02:34,940 --> 00:02:41,300
like the UNIX philosophy of course is is

00:02:38,950 --> 00:02:44,540
one of the key tenants is do one thing

00:02:41,300 --> 00:02:47,360
well so try not to make these gigantic

00:02:44,540 --> 00:02:50,030
programs that are hard to debug and even

00:02:47,360 --> 00:02:52,340
harder to document do one thing do it

00:02:50,030 --> 00:02:56,540
well and then other people will flock to

00:02:52,340 --> 00:02:57,830
it enable composability this is

00:02:56,540 --> 00:02:59,120
something that's come out of like I

00:02:57,830 --> 00:03:01,550
don't know if you guys have heard of the

00:02:59,120 --> 00:03:05,000
hashtag monitoring Sox hashtag

00:03:01,550 --> 00:03:07,070
monitoring love movements but

00:03:05,000 --> 00:03:09,800
composability is a really big issue I

00:03:07,070 --> 00:03:11,780
need to be able to take my data and get

00:03:09,800 --> 00:03:13,459
it to your program maybe that's through

00:03:11,780 --> 00:03:15,260
typing something but sometimes I have

00:03:13,459 --> 00:03:16,850
gigabytes of data I want to pipe through

00:03:15,260 --> 00:03:18,200
your program I need to be able to get it

00:03:16,850 --> 00:03:20,090
in and I need to be able to get it out

00:03:18,200 --> 00:03:22,579
and send it somewhere else because your

00:03:20,090 --> 00:03:25,880
utility may do one thing well but i am

00:03:22,579 --> 00:03:27,950
i'm basically composing a workflow with

00:03:25,880 --> 00:03:30,519
command-line interfaces most of the time

00:03:27,950 --> 00:03:33,170
and that workflow can't be broken up

00:03:30,519 --> 00:03:35,150
generally speaking the data out should

00:03:33,170 --> 00:03:36,980
be in a column format that way i can

00:03:35,150 --> 00:03:39,950
pipe it through ocker said or do

00:03:36,980 --> 00:03:41,299
whatever I want to um and if you can't

00:03:39,950 --> 00:03:43,400
do that at least give me a

00:03:41,299 --> 00:03:45,350
well-documented plug-in API for command

00:03:43,400 --> 00:03:47,000
line utility because it may do exactly

00:03:45,350 --> 00:03:48,890
what you want it to do and it's that

00:03:47,000 --> 00:03:50,900
close to doing exactly what I needed to

00:03:48,890 --> 00:03:52,519
do but without the ability for me to

00:03:50,900 --> 00:03:55,190
come in and change that behavior just a

00:03:52,519 --> 00:03:57,290
little bit I'm I can't use your utility

00:03:55,190 --> 00:03:58,880
and I'm going to create mine and then

00:03:57,290 --> 00:04:03,220
we'll have two competing things right

00:03:58,880 --> 00:04:06,320
another standard on this is this is key

00:04:03,220 --> 00:04:07,760
how many people have ever used I have

00:04:06,320 --> 00:04:10,160
ever gone into a community channel and

00:04:07,760 --> 00:04:12,079
ask for help on IRC or slack or a

00:04:10,160 --> 00:04:14,840
mailing list and what's the first thing

00:04:12,079 --> 00:04:16,760
that someone says read the documentation

00:04:14,840 --> 00:04:18,560
well guess what if you want other people

00:04:16,760 --> 00:04:20,510
to start using your utility and you

00:04:18,560 --> 00:04:22,729
don't want to keep typing in the same

00:04:20,510 --> 00:04:24,740
thing over and over again in IRC you

00:04:22,729 --> 00:04:26,630
need good documentation you should write

00:04:24,740 --> 00:04:28,849
this while you're writing your program

00:04:26,630 --> 00:04:31,370
some people say write it before but I

00:04:28,849 --> 00:04:33,320
might my processes I write it as I'm

00:04:31,370 --> 00:04:34,820
making changes that way I understand

00:04:33,320 --> 00:04:36,710
exactly what it is I'm attempting to

00:04:34,820 --> 00:04:38,780
accomplish and can sanity check myself

00:04:36,710 --> 00:04:40,160
get up walk get a coffee come back and

00:04:38,780 --> 00:04:43,099
realize oh yeah I need to write this

00:04:40,160 --> 00:04:44,870
code I'm support dash dash help if

00:04:43,099 --> 00:04:47,180
you're not going to support dash dash

00:04:44,870 --> 00:04:48,740
manual as well help should just give me

00:04:47,180 --> 00:04:50,900
a quick overview of what I need to do to

00:04:48,740 --> 00:04:52,820
run your program and manual should give

00:04:50,900 --> 00:04:55,820
me that I really want to dig in here and

00:04:52,820 --> 00:04:57,289
figure this out um tell your users were

00:04:55,820 --> 00:05:00,950
to go for more information how many

00:04:57,289 --> 00:05:02,150
people are use github there's a wiki and

00:05:00,950 --> 00:05:03,470
github you don't have to do any web

00:05:02,150 --> 00:05:05,450
design you can start writing your

00:05:03,470 --> 00:05:07,700
documentation online and point people to

00:05:05,450 --> 00:05:10,880
it directly from the command line and

00:05:07,700 --> 00:05:13,280
this is also really relevant is write a

00:05:10,880 --> 00:05:14,750
blog post or something about what it is

00:05:13,280 --> 00:05:16,789
you're doing especially if it's saving

00:05:14,750 --> 00:05:18,080
you time if you're doing something in

00:05:16,789 --> 00:05:20,930
your infrastructure that's saving you

00:05:18,080 --> 00:05:23,659
time everyone has the same problems you

00:05:20,930 --> 00:05:25,310
have write about it share it with other

00:05:23,659 --> 00:05:27,470
people you may find out that your

00:05:25,310 --> 00:05:29,659
utility sucks and there's someone that's

00:05:27,470 --> 00:05:32,270
doing it way better but isn't that a net

00:05:29,659 --> 00:05:35,210
win for everyone now you can contribute

00:05:32,270 --> 00:05:37,159
to that project so this this may be a

00:05:35,210 --> 00:05:39,200
bit of an ego hit for some people i know

00:05:37,159 --> 00:05:40,880
it was for me to find out Oh someone who

00:05:39,200 --> 00:05:42,289
did that better than I did but then I

00:05:40,880 --> 00:05:45,770
could contribute to that project and

00:05:42,289 --> 00:05:48,880
that made me feel good please put

00:05:45,770 --> 00:05:52,789
example use cases in the documentation

00:05:48,880 --> 00:05:54,440
tell me what you expect when you're

00:05:52,789 --> 00:05:57,979
running the tool what do you expect to

00:05:54,440 --> 00:06:00,979
see I don't know how many documented

00:05:57,979 --> 00:06:04,760
where you end up with this start when to

00:06:00,979 --> 00:06:06,140
start stop when to stop what do you want

00:06:04,760 --> 00:06:09,320
their you want an interval you in

00:06:06,140 --> 00:06:11,750
adoration do you need to be iso 8601 can

00:06:09,320 --> 00:06:14,750
I say three minutes ago can what do you

00:06:11,750 --> 00:06:16,970
want show me show me how you run the

00:06:14,750 --> 00:06:19,010
tool show me with some results that you

00:06:16,970 --> 00:06:20,930
get when you run the tool you know you

00:06:19,010 --> 00:06:23,570
may need to anonymize the data that's

00:06:20,930 --> 00:06:24,740
fine but just show me what it is that

00:06:23,570 --> 00:06:26,510
you're trying to accomplish with this

00:06:24,740 --> 00:06:28,520
tool so i can read through the

00:06:26,510 --> 00:06:31,479
documentation real quick and go yes this

00:06:28,520 --> 00:06:31,479
fits my use case

00:06:32,199 --> 00:06:38,749
so we have a lot of CLI tools and pearl

00:06:35,719 --> 00:06:40,400
so how do we get them out there we

00:06:38,749 --> 00:06:41,330
they're all over the place like we are

00:06:40,400 --> 00:06:42,770
the glue that holds the internet

00:06:41,330 --> 00:06:46,009
together right that's that's kind of

00:06:42,770 --> 00:06:48,710
what the Pearl community does um your

00:06:46,009 --> 00:06:52,639
use case may be incredibly specific and

00:06:48,710 --> 00:06:53,810
you may think your snowflake but from my

00:06:52,639 --> 00:06:55,099
discussions with other people at

00:06:53,810 --> 00:06:57,650
conferences we're all facing the same

00:06:55,099 --> 00:07:00,289
problems and no matter how specialized

00:06:57,650 --> 00:07:02,120
you think that tool is if you're able to

00:07:00,289 --> 00:07:03,620
write there's no business logic in your

00:07:02,120 --> 00:07:06,050
code and you're not going to expose any

00:07:03,620 --> 00:07:07,610
intellectual property put it up on Sipan

00:07:06,050 --> 00:07:09,379
that's what C pants therefore there's

00:07:07,610 --> 00:07:11,449
even a namespace for it you can just

00:07:09,379 --> 00:07:13,159
drop stuff in there and you can upload

00:07:11,449 --> 00:07:15,259
scripts you don't have to upload full

00:07:13,159 --> 00:07:16,610
modules you can upload scripts with

00:07:15,259 --> 00:07:18,919
tests you cannot blowed scripts that

00:07:16,610 --> 00:07:26,360
contain modules that help you build that

00:07:18,919 --> 00:07:28,129
script get it out there um so here's

00:07:26,360 --> 00:07:30,469
here's one example of something that you

00:07:28,129 --> 00:07:32,719
can do in your code that will enable a

00:07:30,469 --> 00:07:36,110
UNIX type workflow this is a magic

00:07:32,719 --> 00:07:38,810
diamond um I'm sure how many people have

00:07:36,110 --> 00:07:40,430
used this before it's nice because it

00:07:38,810 --> 00:07:42,529
doesn't break conventions with the rest

00:07:40,430 --> 00:07:44,990
of the UNIX utilities it just flows

00:07:42,529 --> 00:07:48,020
within the UNIX utilities and I can do

00:07:44,990 --> 00:07:51,050
what I want to do and and I know that I

00:07:48,020 --> 00:07:53,060
can use this in a chain with some Python

00:07:51,050 --> 00:07:54,620
tools maybe I need a ruby tool maybe I

00:07:53,060 --> 00:07:56,599
just have a shell script i need and i

00:07:54,620 --> 00:07:58,849
can continue along that path without

00:07:56,599 --> 00:08:00,680
having any any problems but those who

00:07:58,849 --> 00:08:02,479
don't know this does exactly what it

00:08:00,680 --> 00:08:06,080
says here on the slides and it allows

00:08:02,479 --> 00:08:08,210
you to read input from files or have

00:08:06,080 --> 00:08:10,039
that input come across and standard into

00:08:08,210 --> 00:08:13,009
the program so it's kind of a shortcut

00:08:10,039 --> 00:08:14,569
saves you writing some code um maybe

00:08:13,009 --> 00:08:16,460
it's a little bit lazy maybe it's not

00:08:14,569 --> 00:08:18,919
greatest practice but this will save you

00:08:16,460 --> 00:08:22,999
a lot of time creating a very useful

00:08:18,919 --> 00:08:25,219
utility use get up long descriptive if

00:08:22,999 --> 00:08:27,199
you can um if you haven't played with

00:08:25,219 --> 00:08:29,749
get up long descriptive it's kind of

00:08:27,199 --> 00:08:31,759
nice it lets you document your options

00:08:29,749 --> 00:08:33,229
as you're writing your code it also

00:08:31,759 --> 00:08:36,050
supports the ability to validate those

00:08:33,229 --> 00:08:38,630
parameters and then it gives you the

00:08:36,050 --> 00:08:40,099
usage text that you can then output so

00:08:38,630 --> 00:08:41,230
running that will generate something

00:08:40,099 --> 00:08:44,080
like this

00:08:41,230 --> 00:08:45,640
from here you can see one of the nice

00:08:44,080 --> 00:08:48,160
things about this is that it can read

00:08:45,640 --> 00:08:50,950
the optional delegation so here I have

00:08:48,160 --> 00:08:52,360
server or s and then when I see the

00:08:50,950 --> 00:08:55,000
output it actually shows me the short

00:08:52,360 --> 00:08:56,410
option is dash ass and this this is

00:08:55,000 --> 00:08:57,790
actually directly from the man page of

00:08:56,410 --> 00:08:59,110
get out long descriptive because they

00:08:57,790 --> 00:09:00,820
have good documentation I could just

00:08:59,110 --> 00:09:05,020
copy and paste it so this is not my work

00:09:00,820 --> 00:09:08,140
this is get up long descriptive pod

00:09:05,020 --> 00:09:10,870
usage is also really cool i use pod on

00:09:08,140 --> 00:09:13,060
i'll use get up long descriptive to do

00:09:10,870 --> 00:09:15,610
the dash dash help on my program and

00:09:13,060 --> 00:09:17,620
then I'll tend to use pod usage for the

00:09:15,610 --> 00:09:20,710
dash dash manual which is the real

00:09:17,620 --> 00:09:23,260
in-depth you know dig in run running

00:09:20,710 --> 00:09:25,720
with full less pod to usage has some

00:09:23,260 --> 00:09:28,210
options you can have it specify an

00:09:25,720 --> 00:09:30,190
arbitrary message you can set the exit

00:09:28,210 --> 00:09:31,540
flag so if somebody is use the program

00:09:30,190 --> 00:09:34,180
incorrectly you can send them a message

00:09:31,540 --> 00:09:36,670
and set the exit code to one or

00:09:34,180 --> 00:09:38,800
something other than zero if your

00:09:36,670 --> 00:09:41,620
program is going to exit with an error

00:09:38,800 --> 00:09:44,350
set the return code something other than

00:09:41,620 --> 00:09:47,740
zero and be clear about what you

00:09:44,350 --> 00:09:52,930
consider an error and a something that

00:09:47,740 --> 00:09:54,700
is not an error in your program term red

00:09:52,930 --> 00:09:56,290
line is pretty easy to use I'm not going

00:09:54,700 --> 00:09:58,840
to go through the example use cases you

00:09:56,290 --> 00:10:01,120
can pull up the Pearl documentation on

00:09:58,840 --> 00:10:02,980
it I was able to convert stuff to use

00:10:01,120 --> 00:10:04,270
term red line pretty quickly and like I

00:10:02,980 --> 00:10:06,280
said all that gives you is the ability

00:10:04,270 --> 00:10:08,320
to name a buffer and then have me be

00:10:06,280 --> 00:10:09,940
able to scroll using the up and down

00:10:08,320 --> 00:10:11,590
arrows through previous values I've

00:10:09,940 --> 00:10:14,470
entered in there which could save me

00:10:11,590 --> 00:10:16,300
thousands of lines of code typing a year

00:10:14,470 --> 00:10:18,490
and as someone once told me we have a

00:10:16,300 --> 00:10:22,330
finite number of keystrokes before we

00:10:18,490 --> 00:10:25,750
die so if if you can use this please do

00:10:22,330 --> 00:10:28,000
a a term NC color so this is a

00:10:25,750 --> 00:10:29,830
hotly-debated item in the UNIX world

00:10:28,000 --> 00:10:32,500
about whether or not color is cool and I

00:10:29,830 --> 00:10:34,180
don't really care what your opinion is

00:10:32,500 --> 00:10:36,280
what I do care about is if I'm looking

00:10:34,180 --> 00:10:39,130
at massive amounts of data color can be

00:10:36,280 --> 00:10:41,740
an amazing indication that something has

00:10:39,130 --> 00:10:43,810
changed as time is going on when I look

00:10:41,740 --> 00:10:45,370
at colored log files I have better

00:10:43,810 --> 00:10:49,630
understanding of what has happened on

00:10:45,370 --> 00:10:51,430
that because we're pattern recognize

00:10:49,630 --> 00:10:53,290
patterns and color is one of the best

00:10:51,430 --> 00:10:53,889
indicators for our brains to be able to

00:10:53,290 --> 00:10:57,279
detect chain

00:10:53,889 --> 00:10:58,929
so I highly recommend if you are using a

00:10:57,279 --> 00:11:00,609
if you're writing a command-line utility

00:10:58,929 --> 00:11:02,559
that outputs anything you give your

00:11:00,609 --> 00:11:05,619
users the ability to output on color

00:11:02,559 --> 00:11:07,209
based on well it's your utility but if

00:11:05,619 --> 00:11:08,529
something is going to change if

00:11:07,209 --> 00:11:10,509
something is of greater or lesser

00:11:08,529 --> 00:11:12,639
importance not all the words we write

00:11:10,509 --> 00:11:14,739
are as important as the other ones use

00:11:12,639 --> 00:11:18,459
color in that designation give the users

00:11:14,739 --> 00:11:21,899
the ability to turn it off but make it

00:11:18,459 --> 00:11:21,899
available because they're questioning

00:11:22,859 --> 00:11:28,269
correct do not make color the sole

00:11:25,419 --> 00:11:30,129
determinate er it is a good point um you

00:11:28,269 --> 00:11:33,160
there's some really interesting stuff

00:11:30,129 --> 00:11:35,109
with simulating colorblindness that you

00:11:33,160 --> 00:11:37,089
might want to snuggle up to if you're

00:11:35,109 --> 00:11:38,319
going get really you know if this is a

00:11:37,089 --> 00:11:39,609
critical utility in your infrastructure

00:11:38,319 --> 00:11:41,470
that you need to understand because

00:11:39,609 --> 00:11:43,179
green and red are often the colors we

00:11:41,470 --> 00:11:45,519
use to indicate success or failure and

00:11:43,179 --> 00:11:47,669
for people who are colorblind those can

00:11:45,519 --> 00:11:49,600
be look identical on the screen so

00:11:47,669 --> 00:11:51,850
understand what it is you're trying to

00:11:49,600 --> 00:11:55,059
convey with color but please make it

00:11:51,850 --> 00:11:56,980
available so that we can make use of it

00:11:55,059 --> 00:11:58,239
you could even support theming if you

00:11:56,980 --> 00:11:59,679
really want to get into it so that

00:11:58,239 --> 00:12:02,889
people can select different colors even

00:11:59,679 --> 00:12:04,799
gray-scale would help out oh the other

00:12:02,889 --> 00:12:07,269
thing you can do is is possibly check

00:12:04,799 --> 00:12:08,860
you know to put the nail in the coffin

00:12:07,269 --> 00:12:10,869
debate i hate color i don't want to ever

00:12:08,860 --> 00:12:13,239
see it check the user's dot get config

00:12:10,869 --> 00:12:14,919
how many people use get here how many

00:12:13,239 --> 00:12:17,919
people have a dot config that says to

00:12:14,919 --> 00:12:20,079
turn color on automatically right so if

00:12:17,919 --> 00:12:21,279
i have a utility that i'm writing i can

00:12:20,079 --> 00:12:24,009
check your get config because it's

00:12:21,279 --> 00:12:25,959
probably there and if it is i can just

00:12:24,009 --> 00:12:27,759
take your color preference and apply it

00:12:25,959 --> 00:12:29,589
if you specify dash dash colored

00:12:27,759 --> 00:12:31,239
eyeshadow color I'll honor that but if

00:12:29,589 --> 00:12:33,339
you don't specify anything I'm going to

00:12:31,239 --> 00:12:35,499
check first to make sure that my

00:12:33,339 --> 00:12:36,970
experience matches your expectations

00:12:35,499 --> 00:12:39,449
because if your program doesn't have

00:12:36,970 --> 00:12:41,949
color and I use color my git config I'm

00:12:39,449 --> 00:12:44,379
instantly losing a layer of user

00:12:41,949 --> 00:12:45,850
interface there's some other really

00:12:44,379 --> 00:12:47,860
great modules if you're writing command

00:12:45,850 --> 00:12:50,559
line utilities I didn't know about these

00:12:47,860 --> 00:12:52,449
when I started writing command line

00:12:50,559 --> 00:12:55,299
utility so I made a lot of mistakes that

00:12:52,449 --> 00:12:58,209
aren't made a lot smarter people than me

00:12:55,299 --> 00:13:00,970
wrote these things and they're insanely

00:12:58,209 --> 00:13:03,119
useful the filename space and core is

00:13:00,970 --> 00:13:06,270
great it gives you cross platform

00:13:03,119 --> 00:13:08,220
functionality right out of the box so

00:13:06,270 --> 00:13:11,520
how do you join a file and a directory

00:13:08,220 --> 00:13:13,620
named together well it depends on what

00:13:11,520 --> 00:13:15,360
operating system you're on and files

00:13:13,620 --> 00:13:17,220
back we'll take care of that for you so

00:13:15,360 --> 00:13:19,200
you can just specify the path as an

00:13:17,220 --> 00:13:22,560
array and let it handle it based on the

00:13:19,200 --> 00:13:24,720
system that that pearl is running on you

00:13:22,560 --> 00:13:27,180
get then you get cross platform for free

00:13:24,720 --> 00:13:28,740
for at least that part of it app command

00:13:27,180 --> 00:13:30,450
is a great way to glue together a bunch

00:13:28,740 --> 00:13:33,000
of like disparate utilities into a

00:13:30,450 --> 00:13:35,480
single user interface and then each

00:13:33,000 --> 00:13:37,770
basically each command is its own module

00:13:35,480 --> 00:13:41,130
and those modules then become available

00:13:37,770 --> 00:13:44,370
via the app command main script which is

00:13:41,130 --> 00:13:47,280
really a lot of fun dis allah is great

00:13:44,370 --> 00:13:48,720
for pushing things to see pan and i used

00:13:47,280 --> 00:13:50,520
to think that pushing something to Sipan

00:13:48,720 --> 00:13:53,280
was a you know and recommending other

00:13:50,520 --> 00:13:55,170
people there's a very high barrier to

00:13:53,280 --> 00:13:57,540
entry on that disel is taken that away

00:13:55,170 --> 00:13:59,010
completely there's no excuse to not be

00:13:57,540 --> 00:14:02,010
contributing to see pan with the Zilla

00:13:59,010 --> 00:14:03,900
in the game so check it out pod weaver

00:14:02,010 --> 00:14:04,710
helps with the documentation bits i

00:14:03,900 --> 00:14:06,720
never have to write the same

00:14:04,710 --> 00:14:08,490
documentation twice especially with this

00:14:06,720 --> 00:14:11,700
cool plugin called section collect from

00:14:08,490 --> 00:14:13,650
other which allows me to use pod from

00:14:11,700 --> 00:14:15,630
another module in the documentation of

00:14:13,650 --> 00:14:17,670
mike van line script so if i have a

00:14:15,630 --> 00:14:20,040
command that i'm putting together that

00:14:17,670 --> 00:14:22,230
its arguments are parsed by multiple

00:14:20,040 --> 00:14:24,720
modules i can pull those arguments from

00:14:22,230 --> 00:14:27,180
multiple documents are multiple modules

00:14:24,720 --> 00:14:29,580
into a single pod at the time that this

00:14:27,180 --> 00:14:31,170
thing is created and ship that in a

00:14:29,580 --> 00:14:35,130
complete these are all the arguments

00:14:31,170 --> 00:14:37,050
that are supported very nice um and then

00:14:35,130 --> 00:14:38,490
I created this thing called CLI helpers

00:14:37,050 --> 00:14:39,900
and I'm probably going to run out of

00:14:38,490 --> 00:14:41,700
time before I get to the end of this so

00:14:39,900 --> 00:14:42,900
I have six minutes to do this but this

00:14:41,700 --> 00:14:45,990
is something that I reached for

00:14:42,900 --> 00:14:48,450
constantly and never really found so I

00:14:45,990 --> 00:14:50,880
have some input things I wanted to use

00:14:48,450 --> 00:14:52,470
daemon Conway's i/o prompt but then

00:14:50,880 --> 00:14:55,350
there's IO prompter and some of them are

00:14:52,470 --> 00:14:58,020
supported on pearl 58 some of them are

00:14:55,350 --> 00:15:00,240
don't work on Perl 5 so there's a pro 5

00:14:58,020 --> 00:15:02,460
10 and beyond and it got really

00:15:00,240 --> 00:15:06,900
confusing to me and I have users using

00:15:02,460 --> 00:15:09,450
this on redhat stock 5 centos-5 ate my

00:15:06,900 --> 00:15:11,160
utilities and I need to support them so

00:15:09,450 --> 00:15:12,750
i just threw together the simplest

00:15:11,160 --> 00:15:15,210
pieces that i needed out of that into a

00:15:12,750 --> 00:15:17,100
module and provide that be an export for

00:15:15,210 --> 00:15:18,360
input so here i can confirm do you want

00:15:17,100 --> 00:15:19,769
to do this

00:15:18,360 --> 00:15:21,510
important thing too if you're about to

00:15:19,769 --> 00:15:23,100
take a destructive action regardless of

00:15:21,510 --> 00:15:24,870
how sure you are the user wants to take

00:15:23,100 --> 00:15:26,670
that action they should have to specify

00:15:24,870 --> 00:15:29,519
dash dash yes on the command line or

00:15:26,670 --> 00:15:30,660
confirm that destructive action make

00:15:29,519 --> 00:15:32,550
sure you follow that type of modality

00:15:30,660 --> 00:15:33,990
this just makes it simple confirm are

00:15:32,550 --> 00:15:37,320
you sure that you want to do this up

00:15:33,990 --> 00:15:39,779
otherwise we die um do you want a menu

00:15:37,320 --> 00:15:42,720
this generates a menu of colors for you

00:15:39,779 --> 00:15:45,000
to pick from um look something like this

00:15:42,720 --> 00:15:46,560
if an invalid selection is given by the

00:15:45,000 --> 00:15:48,600
user just repeats the menu and tells

00:15:46,560 --> 00:15:52,470
them sorry invalid selection please

00:15:48,600 --> 00:15:54,209
please try again use it as a hash and

00:15:52,470 --> 00:15:56,760
then instead of getting the vet the name

00:15:54,209 --> 00:15:58,950
back you get the short value that you

00:15:56,760 --> 00:16:02,100
specified that looks like this you move

00:15:58,950 --> 00:16:03,839
north if i push one it provides a

00:16:02,100 --> 00:16:06,750
validate hook back so you can say

00:16:03,839 --> 00:16:08,610
rhamnus subroutine against it if it if

00:16:06,750 --> 00:16:11,459
it returns true then accepted otherwise

00:16:08,610 --> 00:16:13,589
redraw the prompt again it's not a valid

00:16:11,459 --> 00:16:17,100
integer so you see here not an integer

00:16:13,589 --> 00:16:18,720
and finally we get three and then four

00:16:17,100 --> 00:16:20,760
output this is really kind of core for

00:16:18,720 --> 00:16:23,790
me because I work primarily on the

00:16:20,760 --> 00:16:25,470
outside of the house with my leg in both

00:16:23,790 --> 00:16:27,660
both sides of house at Devon ops but

00:16:25,470 --> 00:16:29,070
mostly in ops I want to be able to

00:16:27,660 --> 00:16:31,829
control that what I saw when I was

00:16:29,070 --> 00:16:34,440
running programs so cyle helpers

00:16:31,829 --> 00:16:36,990
automatically injects these into the

00:16:34,440 --> 00:16:38,640
good options flu so these are the

00:16:36,990 --> 00:16:40,680
options that you can specify they're

00:16:38,640 --> 00:16:43,680
pretty standard across what you would

00:16:40,680 --> 00:16:46,199
expect dash verbose as alias dis dash V

00:16:43,680 --> 00:16:48,720
so you can do dash V vvv and you get

00:16:46,199 --> 00:16:51,570
increasing verbosity here's a simple

00:16:48,720 --> 00:16:54,660
example using output in a verbose call

00:16:51,570 --> 00:16:56,160
with an indentation you know this this

00:16:54,660 --> 00:16:57,810
was in fear in the middle of a loop and

00:16:56,160 --> 00:17:00,180
you need to keep incrementing that that

00:16:57,810 --> 00:17:01,890
counter and pushing output further over

00:17:00,180 --> 00:17:03,449
you can just keep track of where you are

00:17:01,890 --> 00:17:05,250
and do plus plus and then you can get

00:17:03,449 --> 00:17:07,169
that here's an example of running it

00:17:05,250 --> 00:17:11,760
without verbose and then running it with

00:17:07,169 --> 00:17:12,959
verbose you can say color um set the

00:17:11,760 --> 00:17:15,689
color to anything the term ian c color

00:17:12,959 --> 00:17:17,400
reads if you have nothing in your get

00:17:15,689 --> 00:17:20,400
config for color you don't get anything

00:17:17,400 --> 00:17:23,490
if you have your UI color set to auto

00:17:20,400 --> 00:17:24,959
you'll see it in blue you can set

00:17:23,490 --> 00:17:26,640
something as sticky so this is useful

00:17:24,959 --> 00:17:28,470
for like warnings or errors you can say

00:17:26,640 --> 00:17:30,120
that they're sticky so after they've

00:17:28,470 --> 00:17:31,120
been output in the main text of the

00:17:30,120 --> 00:17:33,730
program if

00:17:31,120 --> 00:17:34,900
lines go by I missed that display them

00:17:33,730 --> 00:17:37,420
again at the end if they're really

00:17:34,900 --> 00:17:40,180
important so this will send that message

00:17:37,420 --> 00:17:42,580
twice the screen once when you you run

00:17:40,180 --> 00:17:44,530
it once when it hits that loop and then

00:17:42,580 --> 00:17:49,000
again at the end block for this program

00:17:44,530 --> 00:17:50,380
um you can do debug statements they

00:17:49,000 --> 00:17:52,000
accept all the options that everything

00:17:50,380 --> 00:17:55,000
else does and you get you know

00:17:52,000 --> 00:17:58,090
increasing amounts of verbosity doing

00:17:55,000 --> 00:18:00,040
this on you can set the debug class so

00:17:58,090 --> 00:18:02,320
you can use the CLI helpers in your

00:18:00,040 --> 00:18:03,850
modules and then set debug class equal

00:18:02,320 --> 00:18:07,330
to the class you want to actually turn

00:18:03,850 --> 00:18:09,610
on debugging on that way if it by

00:18:07,330 --> 00:18:12,250
default it will only debug if it's

00:18:09,610 --> 00:18:14,020
called from the main context if you use

00:18:12,250 --> 00:18:16,330
this then you can see into your modules

00:18:14,020 --> 00:18:18,550
if you're building more complex stuff um

00:18:16,330 --> 00:18:20,530
so here's one that I love because i

00:18:18,550 --> 00:18:22,929
right again I'm systems person I tend to

00:18:20,530 --> 00:18:25,710
write cron jobs if you specified a chef

00:18:22,929 --> 00:18:27,929
syslog on you'll receive output to

00:18:25,710 --> 00:18:30,520
standard out and you'll also receive

00:18:27,929 --> 00:18:33,010
that message via syslog it does some

00:18:30,520 --> 00:18:36,250
magic to you know build the the syslog

00:18:33,010 --> 00:18:38,620
tag you can specify that manually if you

00:18:36,250 --> 00:18:40,150
want to it's in the options um and then

00:18:38,620 --> 00:18:42,220
you can do stuff like this you can say a

00:18:40,150 --> 00:18:47,260
quiet and syslog and it'll do the right

00:18:42,220 --> 00:18:49,150
thing one of the one of the things I

00:18:47,260 --> 00:18:50,860
wanted to do was to be able to take

00:18:49,150 --> 00:18:52,870
input from one program and move it to

00:18:50,860 --> 00:18:54,940
the next program but sometimes these are

00:18:52,870 --> 00:18:56,860
long running things and I I needed I

00:18:54,940 --> 00:19:00,490
needed to be able to write them out to a

00:18:56,860 --> 00:19:02,950
file and come back to that later so I

00:19:00,490 --> 00:19:05,230
have an option in here called data so if

00:19:02,950 --> 00:19:07,059
you have a line that you consider a data

00:19:05,230 --> 00:19:09,760
row you just tag it as saying its data

00:19:07,059 --> 00:19:11,770
and then when you run this and specify

00:19:09,760 --> 00:19:13,420
dash dash data file all those lines that

00:19:11,770 --> 00:19:16,150
you have tagged as data will be written

00:19:13,420 --> 00:19:18,280
to that data file nothing else will be

00:19:16,150 --> 00:19:21,580
but that way you can then use that data

00:19:18,280 --> 00:19:23,340
file for something else later here's a

00:19:21,580 --> 00:19:25,929
few of the options that the output um

00:19:23,340 --> 00:19:29,350
specifies in that hash reference that

00:19:25,929 --> 00:19:30,840
comes 1st if you decide to use it seen a

00:19:29,350 --> 00:19:33,190
few of these in some of these

00:19:30,840 --> 00:19:35,260
presentations that I guess the the one

00:19:33,190 --> 00:19:37,390
is important which regards to whether or

00:19:35,260 --> 00:19:39,429
not the user is using dash dash quiet if

00:19:37,390 --> 00:19:42,330
you tag a message as importantly will

00:19:39,429 --> 00:19:45,510
always be displayed to the screen

00:19:42,330 --> 00:19:46,890
and I wrote documentation for it so you

00:19:45,510 --> 00:19:50,549
can check it out and tell me how

00:19:46,890 --> 00:20:00,360
terrible it is and that's pretty much it

00:19:50,549 --> 00:20:08,090
thank you guys are there any questions

00:20:00,360 --> 00:20:20,070
we have like 30 seconds yeah thank you

00:20:08,090 --> 00:20:21,539
huh probably yeah I I tend to I tend to

00:20:20,070 --> 00:20:24,450
support older versions all the way back

00:20:21,539 --> 00:20:26,309
to 58 on with a lot of the utilities

00:20:24,450 --> 00:20:28,110
that right so so you may see some non

00:20:26,309 --> 00:20:29,700
modern pearl every once awhile just

00:20:28,110 --> 00:20:32,880
because newer versions of pearl don't

00:20:29,700 --> 00:20:34,169
don't support it yet you'd be surprised

00:20:32,880 --> 00:20:35,909
those people were the first to write bug

00:20:34,169 --> 00:20:37,740
reports on github if they're using your

00:20:35,909 --> 00:20:40,260
utilities on older versions of pearl and

00:20:37,740 --> 00:20:41,669
they're just locked in so you I try to

00:20:40,260 --> 00:20:43,409
do my best to make it still accessible

00:20:41,669 --> 00:20:46,710
to the two people locked into older

00:20:43,409 --> 00:20:48,179
versions of pearl I wish I did I wish I

00:20:46,710 --> 00:20:49,769
didn't have to but I feel like that's

00:20:48,179 --> 00:20:53,570
getting it getting some of the utilities

00:20:49,769 --> 00:20:53,570
more traction any other questions

00:21:05,250 --> 00:21:10,630
testing testing is tricky the question

00:21:07,750 --> 00:21:12,310
is how do you do testing if you're if

00:21:10,630 --> 00:21:14,740
you're constantly relying on

00:21:12,310 --> 00:21:17,530
interactivity from the command prompt

00:21:14,740 --> 00:21:21,130
it's difficult um I have to say I've

00:21:17,530 --> 00:21:25,660
passed on some of that stuff myself and

00:21:21,130 --> 00:21:27,190
relied on just bug reports where there

00:21:25,660 --> 00:21:29,620
is a high level of interactivity that's

00:21:27,190 --> 00:21:32,500
required but you could you know use

00:21:29,620 --> 00:21:35,800
expect to be able to generate that

00:21:32,500 --> 00:21:38,830
output or that input to the program and

00:21:35,800 --> 00:21:41,200
then make sure that it handles things or

00:21:38,830 --> 00:21:42,820
just furthers interactive pieces make

00:21:41,200 --> 00:21:45,280
sure that those are testable components

00:21:42,820 --> 00:21:47,170
themselves and don't rely on the don't

00:21:45,280 --> 00:21:50,620
test the interactivity test the

00:21:47,170 --> 00:21:52,090
functionality and that that is um that's

00:21:50,620 --> 00:21:54,130
where I've been leaning towards these

00:21:52,090 --> 00:21:55,390
days is just basically focusing one what

00:21:54,130 --> 00:21:57,130
is this thing supposed to do which is

00:21:55,390 --> 00:21:58,870
this functions supposed to do when it

00:21:57,130 --> 00:22:00,640
gets called by the user I can't control

00:21:58,870 --> 00:22:06,160
when the user calls it but let me make

00:22:00,640 --> 00:22:11,250
sure that it does the right thing any

00:22:06,160 --> 00:22:11,250

YouTube URL: https://www.youtube.com/watch?v=DzRYGudfu0s


