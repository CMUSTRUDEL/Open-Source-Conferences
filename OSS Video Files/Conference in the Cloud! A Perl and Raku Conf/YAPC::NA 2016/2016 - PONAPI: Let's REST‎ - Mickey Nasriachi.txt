Title: 2016 - PONAPI: Let's RESTâ€Ž - Mickey Nasriachi
Publication date: 2016-06-27
Playlist: YAPC::NA 2016
Description: 
	
Captions: 
	00:00:00,050 --> 00:00:08,160
alright so hi everyone my name is Mickey

00:00:04,020 --> 00:00:10,769
and I'm working for a company you may

00:00:08,160 --> 00:00:13,200
have heard of we do hotel room

00:00:10,769 --> 00:00:16,470
reservations and just in case you're

00:00:13,200 --> 00:00:18,930
wondering we're still growing and if you

00:00:16,470 --> 00:00:20,850
are interested then you can catch me

00:00:18,930 --> 00:00:24,930
later I'm here to talk about something

00:00:20,850 --> 00:00:26,490
really cool we did at work so about a

00:00:24,930 --> 00:00:28,080
year ago I joined sting a little steam

00:00:26,490 --> 00:00:31,050
and we were asked to do something very

00:00:28,080 --> 00:00:32,850
simple we we were asked to cut the

00:00:31,050 --> 00:00:36,329
channel of communication to 10 for this

00:00:32,850 --> 00:00:39,140
one specific database and put the web

00:00:36,329 --> 00:00:41,579
service in front of it so we have better

00:00:39,140 --> 00:00:44,910
control on the application level for

00:00:41,579 --> 00:00:47,280
authorization and logging and that

00:00:44,910 --> 00:00:50,399
sounded pretty simple it sounded like a

00:00:47,280 --> 00:00:57,480
rest api we will do rest api's we are

00:00:50,399 --> 00:00:59,609
familiar with them we do them a lot now

00:00:57,480 --> 00:01:01,530
just in case you you're not familiar

00:00:59,609 --> 00:01:06,119
with them let me just give you a quick

00:01:01,530 --> 00:01:10,290
review a REST API is such a way to

00:01:06,119 --> 00:01:12,270
represent data elements no matter what

00:01:10,290 --> 00:01:14,189
they are on the server side they can be

00:01:12,270 --> 00:01:17,189
an elastic search they can be in a

00:01:14,189 --> 00:01:19,890
database can be a guy typing behind the

00:01:17,189 --> 00:01:22,680
server that's that's they're all valid

00:01:19,890 --> 00:01:24,330
as long as we can represent them in a

00:01:22,680 --> 00:01:27,090
single way that the client can

00:01:24,330 --> 00:01:29,549
understand normally this will be

00:01:27,090 --> 00:01:35,130
adjacent it can be something else as

00:01:29,549 --> 00:01:38,270
well now quick example when we want to

00:01:35,130 --> 00:01:42,150
pull a data element from from the server

00:01:38,270 --> 00:01:45,500
we send a request we tell the server we

00:01:42,150 --> 00:01:48,119
want to fetch and we point to some

00:01:45,500 --> 00:01:50,880
resource in and I will use the term

00:01:48,119 --> 00:01:55,920
resource to to mean a uniquely

00:01:50,880 --> 00:01:58,439
identified data element and we tell it

00:01:55,920 --> 00:02:01,500
this is the type this is the ID together

00:01:58,439 --> 00:02:04,409
this is a unique identifier I want this

00:02:01,500 --> 00:02:08,489
resource and the server will respond

00:02:04,409 --> 00:02:11,370
with a JSON that contains the data it

00:02:08,489 --> 00:02:13,560
can also respond with another Jason that

00:02:11,370 --> 00:02:16,709
contained the data or

00:02:13,560 --> 00:02:18,959
some other form of the dictum now here

00:02:16,709 --> 00:02:22,170
we realized that there is some problem

00:02:18,959 --> 00:02:24,270
that we that we have and this is where

00:02:22,170 --> 00:02:27,360
this whole project spend off into some

00:02:24,270 --> 00:02:30,030
something a bit different which is what

00:02:27,360 --> 00:02:32,730
I'm going to talk about today the

00:02:30,030 --> 00:02:36,510
problem is how do we know what is the

00:02:32,730 --> 00:02:40,140
format of this JSON how do how do

00:02:36,510 --> 00:02:45,180
clients and servers know how to read

00:02:40,140 --> 00:02:47,250
each other's input and sure you can use

00:02:45,180 --> 00:02:50,130
some tools like JSON schema and some

00:02:47,250 --> 00:02:52,380
others and inform at them but it still

00:02:50,130 --> 00:02:56,819
means that you will have to pair every

00:02:52,380 --> 00:03:00,209
client and server and generate code

00:02:56,819 --> 00:03:02,099
specific for this connection if you have

00:03:00,209 --> 00:03:04,200
multiple servers that one client needs

00:03:02,099 --> 00:03:08,730
to speak to it will have to implement

00:03:04,200 --> 00:03:12,120
all all possibilities and same for the

00:03:08,730 --> 00:03:15,299
other side and this is something that

00:03:12,120 --> 00:03:17,480
you are not really happy about and every

00:03:15,299 --> 00:03:20,549
time we have a project as a client-side

00:03:17,480 --> 00:03:22,079
developer or server-side developer you

00:03:20,549 --> 00:03:26,489
always have to go through this process

00:03:22,079 --> 00:03:29,640
of working with the other side to decide

00:03:26,489 --> 00:03:32,970
on the schema itself now we found that

00:03:29,640 --> 00:03:34,920
we spend a lot of time doing that and we

00:03:32,970 --> 00:03:38,190
also found that we spend a lot of time

00:03:34,920 --> 00:03:41,280
doing the same thing over and over even

00:03:38,190 --> 00:03:42,989
if we build a library to solve this

00:03:41,280 --> 00:03:45,690
problem for us it will never work with a

00:03:42,989 --> 00:03:48,989
third party or we will find cases where

00:03:45,690 --> 00:03:53,489
we also have to do it again what we want

00:03:48,989 --> 00:03:54,959
is is to focus on what we do the logic

00:03:53,489 --> 00:03:57,269
that we need to do with the data we

00:03:54,959 --> 00:03:59,190
don't want to care about how we transfer

00:03:57,269 --> 00:04:01,829
the data between the two sides I mean we

00:03:59,190 --> 00:04:05,459
don't we never care about hype IP works

00:04:01,829 --> 00:04:07,019
or how HTTP works right we trust them we

00:04:05,459 --> 00:04:09,810
know those layers are solid they will

00:04:07,019 --> 00:04:11,940
know how to transfer the data we want

00:04:09,810 --> 00:04:15,090
something like that in this case which

00:04:11,940 --> 00:04:17,760
means we need a product so we looked it

00:04:15,090 --> 00:04:20,070
up we found one interesting protocol

00:04:17,760 --> 00:04:22,570
it's called JSON API

00:04:20,070 --> 00:04:25,479
after reading this back we found that

00:04:22,570 --> 00:04:27,300
this is more of a complete solution to

00:04:25,479 --> 00:04:30,190
our problem because it not only

00:04:27,300 --> 00:04:33,479
specifies how the Jason should look like

00:04:30,190 --> 00:04:35,949
it also specifies the entire

00:04:33,479 --> 00:04:37,900
communication channel on a REST API so

00:04:35,949 --> 00:04:41,199
it defines how you should request the

00:04:37,900 --> 00:04:42,820
resource and what the statuses and

00:04:41,199 --> 00:04:45,310
headers that should be passed around

00:04:42,820 --> 00:04:49,060
along with the data so a complete

00:04:45,310 --> 00:04:52,090
solution at the time when we looked at

00:04:49,060 --> 00:04:54,820
it there was there were many different

00:04:52,090 --> 00:05:00,010
implementations in all sorts of length

00:04:54,820 --> 00:05:04,030
languages and PHP and we had but there

00:05:00,010 --> 00:05:07,479
was no pearl implementation and this is

00:05:04,030 --> 00:05:10,360
what we set out to do let me give you a

00:05:07,479 --> 00:05:13,690
quick example of how Jason API works so

00:05:10,360 --> 00:05:16,120
just like the previous example here we

00:05:13,690 --> 00:05:18,370
asked for a specific one uniquely

00:05:16,120 --> 00:05:21,430
identified item all we had to do is tell

00:05:18,370 --> 00:05:24,669
the server we want a JSON API require a

00:05:21,430 --> 00:05:27,729
response through the accept header if we

00:05:24,669 --> 00:05:31,539
use the body if we actually pass the

00:05:27,729 --> 00:05:34,090
JSON either way we will have to also set

00:05:31,539 --> 00:05:35,560
the content type to the same value but

00:05:34,090 --> 00:05:39,910
that just do mean that there is a

00:05:35,560 --> 00:05:42,669
content server will respond with some

00:05:39,910 --> 00:05:45,010
Jason you don't have to read it let me

00:05:42,669 --> 00:05:47,979
walk you through what we have there the

00:05:45,010 --> 00:05:51,010
parts that are interesting so there are

00:05:47,979 --> 00:05:53,110
some links links are optional but they

00:05:51,010 --> 00:05:54,760
will point to the document the document

00:05:53,110 --> 00:05:57,400
by the way is always an object so we

00:05:54,760 --> 00:06:00,849
always know that we read it as a hash on

00:05:57,400 --> 00:06:02,740
a pearl level so we have links that

00:06:00,849 --> 00:06:05,110
identify this document how we got there

00:06:02,740 --> 00:06:08,800
we can be self can be related relative

00:06:05,110 --> 00:06:11,860
links all sorts of different links we

00:06:08,800 --> 00:06:15,639
have the also an optional parameter is

00:06:11,860 --> 00:06:18,400
the the spec version which is very

00:06:15,639 --> 00:06:21,789
important now they're releasing more

00:06:18,400 --> 00:06:24,699
versions of the spec and it's we need to

00:06:21,789 --> 00:06:28,120
know on one side on the client side in

00:06:24,699 --> 00:06:31,810
this case how to interpret the response

00:06:28,120 --> 00:06:33,760
from the server and the data now the

00:06:31,810 --> 00:06:36,160
data in our case is one

00:06:33,760 --> 00:06:38,860
because we asked for one we uniquely

00:06:36,160 --> 00:06:41,620
identified one data if we wonder the

00:06:38,860 --> 00:06:45,340
element if we ask for multiple ones we

00:06:41,620 --> 00:06:48,040
would get an array of objects each one

00:06:45,340 --> 00:06:51,100
would have its own links again they can

00:06:48,040 --> 00:06:53,140
be different if we have multiple ones it

00:06:51,100 --> 00:06:55,000
will have the unique identifier the

00:06:53,140 --> 00:06:58,470
unique that and identifier of this

00:06:55,000 --> 00:07:02,050
element so in our case let's say this

00:06:58,470 --> 00:07:04,900
element comes from a table the type

00:07:02,050 --> 00:07:08,020
would be the table name and the idea

00:07:04,900 --> 00:07:10,980
would be the primary key so here we

00:07:08,020 --> 00:07:14,260
identified the element and server-side

00:07:10,980 --> 00:07:16,540
the attributes you can see them as the

00:07:14,260 --> 00:07:19,930
actual data basically the rest of the

00:07:16,540 --> 00:07:21,190
columns in that table everything that we

00:07:19,930 --> 00:07:24,370
need to know about this element this is

00:07:21,190 --> 00:07:25,870
where the actual data is there is

00:07:24,370 --> 00:07:28,770
another section very interesting one

00:07:25,870 --> 00:07:33,040
it's called the relationships this is

00:07:28,770 --> 00:07:35,710
how the server tells us about all the

00:07:33,040 --> 00:07:38,710
other data elements in other tables that

00:07:35,710 --> 00:07:40,990
relate to this data elements so you can

00:07:38,710 --> 00:07:43,930
think of it as a foreign key or a side

00:07:40,990 --> 00:07:45,910
table that map's elements between two

00:07:43,930 --> 00:07:47,890
different types and it tells us about

00:07:45,910 --> 00:07:50,740
the connection so it will give us the

00:07:47,890 --> 00:07:52,450
name name is is what we keep as just

00:07:50,740 --> 00:07:55,060
like with attributes we have at the name

00:07:52,450 --> 00:07:57,820
of the relationship itself but inside we

00:07:55,060 --> 00:08:01,270
have the identifier of how we can get

00:07:57,820 --> 00:08:05,290
the data from the other table and it can

00:08:01,270 --> 00:08:11,620
have its own links as well a quick

00:08:05,290 --> 00:08:13,270
example again this time we have some

00:08:11,620 --> 00:08:15,190
parameters that I wanted to show there

00:08:13,270 --> 00:08:16,750
are several ones defined in the spec I

00:08:15,190 --> 00:08:18,430
wanted to focus on two interesting ones

00:08:16,750 --> 00:08:21,580
one is the fields and the other one is

00:08:18,430 --> 00:08:24,730
the includes they include sorry and note

00:08:21,580 --> 00:08:28,990
the square bracket notation for the

00:08:24,730 --> 00:08:32,110
fields we use it in JSON API now we got

00:08:28,990 --> 00:08:36,130
the different Jason in this case we

00:08:32,110 --> 00:08:38,050
asked for fields filtering so just like

00:08:36,130 --> 00:08:40,599
with the normal query would be something

00:08:38,050 --> 00:08:42,729
along the lines of select star this is

00:08:40,599 --> 00:08:43,550
like select and specifying the columns

00:08:42,729 --> 00:08:46,100
that we want to get

00:08:43,550 --> 00:08:47,570
so we said title and body these are two

00:08:46,100 --> 00:08:50,660
attributes so the attributes section

00:08:47,570 --> 00:08:53,120
shrunk to just those two and we also

00:08:50,660 --> 00:08:54,500
specified authors the author's is the

00:08:53,120 --> 00:08:55,970
name of the relationship and

00:08:54,500 --> 00:08:58,519
relationships are considered the top

00:08:55,970 --> 00:09:00,230
level just like the attributes so if we

00:08:58,519 --> 00:09:02,000
want to see them once we use the

00:09:00,230 --> 00:09:04,459
filtering of the field we also have to

00:09:02,000 --> 00:09:07,220
specify the ones that we actually want

00:09:04,459 --> 00:09:14,990
to see otherwise we just won't have the

00:09:07,220 --> 00:09:17,720
relationship section so this is why

00:09:14,990 --> 00:09:20,300
author is also there the include is

00:09:17,720 --> 00:09:23,269
another one include is just like when

00:09:20,300 --> 00:09:26,899
doing joins its pseudo join but in this

00:09:23,269 --> 00:09:29,329
case we also get not only the

00:09:26,899 --> 00:09:31,190
relationship to the other element we get

00:09:29,329 --> 00:09:33,140
the entire element itself in an included

00:09:31,190 --> 00:09:35,630
section so outside of our data we will

00:09:33,140 --> 00:09:37,700
get in this request we got to data

00:09:35,630 --> 00:09:40,430
elements not one and we could have

00:09:37,700 --> 00:09:42,829
received multiple ones because we can

00:09:40,430 --> 00:09:45,079
have multiple authors or if we ask for

00:09:42,829 --> 00:09:47,209
including of let's say comments or any

00:09:45,079 --> 00:09:49,399
other data type we would get the list of

00:09:47,209 --> 00:09:52,070
a lot of different we can pull a lot of

00:09:49,399 --> 00:09:54,440
different elements in one request which

00:09:52,070 --> 00:09:57,140
is really neat and we can go on and on

00:09:54,440 --> 00:09:58,820
about Jason API it's it's a big spec and

00:09:57,140 --> 00:10:01,670
I recommend highly recommend looking

00:09:58,820 --> 00:10:03,770
into it but this talk is about an

00:10:01,670 --> 00:10:06,500
implementation that we did for it in Pro

00:10:03,770 --> 00:10:09,950
it's called ponape I'll explain the name

00:10:06,500 --> 00:10:12,649
if we have some time after the the end

00:10:09,950 --> 00:10:16,510
of it this is an open source project

00:10:12,649 --> 00:10:20,540
that we did at work at booking and

00:10:16,510 --> 00:10:22,880
unlike open sourcing a complete solution

00:10:20,540 --> 00:10:25,970
this one was open source from day one it

00:10:22,880 --> 00:10:28,399
started on my personal github and we we

00:10:25,970 --> 00:10:30,680
just code it there so this was really

00:10:28,399 --> 00:10:32,120
cool because throughout the project you

00:10:30,680 --> 00:10:34,100
could have seen if you followed it you

00:10:32,120 --> 00:10:36,649
could just seen exactly how I spend my

00:10:34,100 --> 00:10:39,980
days at work I hope you didn't but it

00:10:36,649 --> 00:10:41,420
was pretty cool to do to do it this way

00:10:39,980 --> 00:10:45,380
and the fact that booking allowed us to

00:10:41,420 --> 00:10:48,459
do it this way so it's dong it helped

00:10:45,380 --> 00:10:52,720
issues pull request everything you want

00:10:48,459 --> 00:10:55,370
go there it's also in Sipan we released

00:10:52,720 --> 00:10:57,890
three different distributions

00:10:55,370 --> 00:10:59,900
we have a distribution for a client a

00:10:57,890 --> 00:11:01,460
distribution for a server and another

00:10:59,900 --> 00:11:03,650
distribution that was just released last

00:11:01,460 --> 00:11:05,750
week which is a tool set for building

00:11:03,650 --> 00:11:07,339
documents which we separated out of the

00:11:05,750 --> 00:11:10,400
server because we figure that some

00:11:07,339 --> 00:11:12,770
people may want to use it to build JSON

00:11:10,400 --> 00:11:14,570
API compliant services in their own

00:11:12,770 --> 00:11:17,480
servers but without changing the server

00:11:14,570 --> 00:11:20,810
because our server is is its own thing

00:11:17,480 --> 00:11:24,920
then they can use just the tool set to

00:11:20,810 --> 00:11:29,330
do that and now it's also officially on

00:11:24,920 --> 00:11:30,860
the list on the JSON API website as the

00:11:29,330 --> 00:11:33,230
Pearl implementation currently it's the

00:11:30,860 --> 00:11:35,420
only one maybe there will be more but

00:11:33,230 --> 00:11:41,210
ponape will always be the first and the

00:11:35,420 --> 00:11:43,850
best now few words about the server it's

00:11:41,210 --> 00:11:47,390
the main project in this case thank you

00:11:43,850 --> 00:11:49,670
it's the it's the main one it's a bigger

00:11:47,390 --> 00:11:53,750
the bigger project that took us most of

00:11:49,670 --> 00:11:57,050
the time it is a plaque component you

00:11:53,750 --> 00:12:01,760
can basically install it and then just

00:11:57,050 --> 00:12:04,160
mount it run it it will work if you do

00:12:01,760 --> 00:12:07,670
one more step in between and that that

00:12:04,160 --> 00:12:10,750
is configuring the way that ponape

00:12:07,670 --> 00:12:13,160
server will communicate with your data

00:12:10,750 --> 00:12:15,320
repository because otherwise it will not

00:12:13,160 --> 00:12:17,839
know how to serve your data so you have

00:12:15,320 --> 00:12:21,230
to do that and to do that we added

00:12:17,839 --> 00:12:24,020
another tool which is to help you do

00:12:21,230 --> 00:12:26,839
create a panoply server project

00:12:24,020 --> 00:12:28,670
environment in a simple way it's a

00:12:26,839 --> 00:12:31,430
command-line utility built with that

00:12:28,670 --> 00:12:33,740
command it's ponape with lowercase once

00:12:31,430 --> 00:12:37,250
you install the server you will you will

00:12:33,740 --> 00:12:41,959
have it in your execution path it has

00:12:37,250 --> 00:12:44,060
three major scripts in it the manual

00:12:41,959 --> 00:12:46,070
will just fire up a brawl dock on the

00:12:44,060 --> 00:12:49,250
manual which is a very long extensive

00:12:46,070 --> 00:12:52,190
very good description of how to use

00:12:49,250 --> 00:12:54,820
ponape it was compiled by a Brian Frazer

00:12:52,190 --> 00:12:58,640
and did the tremendous work on it and

00:12:54,820 --> 00:13:00,200
the other one is a demo which you can

00:12:58,640 --> 00:13:02,120
fire up immediately after installing

00:13:00,200 --> 00:13:05,480
server this is something fun you can try

00:13:02,120 --> 00:13:07,610
it it will generate a sequel light

00:13:05,480 --> 00:13:09,279
database feed it with some data and

00:13:07,610 --> 00:13:11,350
we'll fire up the server

00:13:09,279 --> 00:13:14,879
are connected into it so it will be able

00:13:11,350 --> 00:13:18,459
to serve requests for it immediately

00:13:14,879 --> 00:13:22,209
there is another flag that will randomly

00:13:18,459 --> 00:13:24,519
generate a query for you and fire it

00:13:22,209 --> 00:13:27,399
over HTTP to the server get the response

00:13:24,519 --> 00:13:30,850
back and tell you what the request was

00:13:27,399 --> 00:13:32,769
what the result was and also the JSON

00:13:30,850 --> 00:13:34,600
itself there is another flag there that

00:13:32,769 --> 00:13:36,100
you can use if you only want to Jason

00:13:34,600 --> 00:13:39,610
because you're feeding it through some

00:13:36,100 --> 00:13:43,149
JSON reading too so you can suppress the

00:13:39,610 --> 00:13:45,249
the first few lines and this is really

00:13:43,149 --> 00:13:46,899
fun try it out every time you fire it it

00:13:45,249 --> 00:13:48,550
will generate another query for you but

00:13:46,899 --> 00:13:50,439
you can also do queries yourself with

00:13:48,550 --> 00:13:53,050
coral just remember to add the header

00:13:50,439 --> 00:13:57,490
for the accept so the server will be

00:13:53,050 --> 00:14:00,790
able to serve you the main one the main

00:13:57,490 --> 00:14:06,399
script there is the gin it's scaffolding

00:14:00,790 --> 00:14:10,480
of a project directory so the directory

00:14:06,399 --> 00:14:12,370
flag is mandatory of course and it will

00:14:10,480 --> 00:14:16,569
create for you a directory which

00:14:12,370 --> 00:14:19,509
contains two important things one is the

00:14:16,569 --> 00:14:21,850
PSG I script so you can run use it to

00:14:19,509 --> 00:14:23,860
run the server it comes out of the box

00:14:21,850 --> 00:14:26,350
with an additional middle word that it

00:14:23,860 --> 00:14:29,800
wraps it with which is the HTTP method

00:14:26,350 --> 00:14:33,879
override because Jason ap ice pack is

00:14:29,800 --> 00:14:37,269
using patch for updates and not every

00:14:33,879 --> 00:14:40,540
client knows how to deal with that so we

00:14:37,269 --> 00:14:42,639
have the method / I to support that the

00:14:40,540 --> 00:14:45,279
other one is the config which is a llamo

00:14:42,639 --> 00:14:47,290
file it's very short some tweaks that

00:14:45,279 --> 00:14:48,939
you can do to the server not all of them

00:14:47,290 --> 00:14:51,339
required like out of the box it will

00:14:48,939 --> 00:14:53,860
work the only one that needs to be

00:14:51,339 --> 00:14:56,709
updated their properly is the repository

00:14:53,860 --> 00:14:59,410
handler and for that you can either

00:14:56,709 --> 00:15:01,480
point to an existing module that you

00:14:59,410 --> 00:15:04,120
have and it will just check for you

00:15:01,480 --> 00:15:06,519
whether it can actually upload it and

00:15:04,120 --> 00:15:09,910
load it sorry and it will complain if

00:15:06,519 --> 00:15:11,920
not another option is for you to say new

00:15:09,910 --> 00:15:14,529
repo and then it will create it

00:15:11,920 --> 00:15:16,809
basically will create the the whole

00:15:14,529 --> 00:15:19,269
directory structure under lib inside

00:15:16,809 --> 00:15:20,750
that project and this is also a skeleton

00:15:19,269 --> 00:15:23,470
of the module you can use it

00:15:20,750 --> 00:15:26,930
to build your own repository what this

00:15:23,470 --> 00:15:30,710
handler needs to do is to implement

00:15:26,930 --> 00:15:33,280
several methods that we will once we you

00:15:30,710 --> 00:15:38,240
once we create an object of your

00:15:33,280 --> 00:15:40,130
repository facing module we will need to

00:15:38,240 --> 00:15:42,500
be able to call those metal methods in

00:15:40,130 --> 00:15:44,840
order to pull your data not all of them

00:15:42,500 --> 00:15:47,030
are mandatory some of them can be if you

00:15:44,840 --> 00:15:49,430
don't want to support relationships for

00:15:47,030 --> 00:15:50,960
example you can just set all of them to

00:15:49,430 --> 00:15:53,150
an empty sub and it will work the same

00:15:50,960 --> 00:15:55,640
just because we cannot list so we don't

00:15:53,150 --> 00:15:57,800
want to get to the other ones the other

00:15:55,640 --> 00:16:00,050
ones the rest of them are just basic

00:15:57,800 --> 00:16:02,270
crud operations so you normally would

00:16:00,050 --> 00:16:03,650
already have them you have a database or

00:16:02,270 --> 00:16:06,260
something that you want to expose with

00:16:03,650 --> 00:16:08,330
JSON API you will have some sort of an

00:16:06,260 --> 00:16:11,780
ORM so it's just mapping of a few

00:16:08,330 --> 00:16:14,570
methods and you can do it very easily I

00:16:11,780 --> 00:16:18,730
think Brian did it for class dbi in like

00:16:14,570 --> 00:16:18,730
ten minutes or so it was that simple

00:16:21,490 --> 00:16:26,270
that's pretty much it for the server we

00:16:24,350 --> 00:16:28,130
you can look into it and ask me

00:16:26,270 --> 00:16:31,520
questions if you need the about it later

00:16:28,130 --> 00:16:34,220
client is the is a smaller project but

00:16:31,520 --> 00:16:37,130
it also it's nice to have it's basically

00:16:34,220 --> 00:16:40,400
a perl module that you can use to create

00:16:37,130 --> 00:16:43,160
an object which you can query the server

00:16:40,400 --> 00:16:44,690
through just calling the methods with

00:16:43,160 --> 00:16:47,600
the parameters that you want it will

00:16:44,690 --> 00:16:49,790
send the HTTP request it will set the

00:16:47,600 --> 00:16:51,740
headers and do the serialization and

00:16:49,790 --> 00:16:54,530
deserialization of the jason for you and

00:16:51,740 --> 00:16:56,510
you will get basically get a response

00:16:54,530 --> 00:16:59,680
back which is all already at this

00:16:56,510 --> 00:17:02,390
serialized jason in a pearl structure

00:16:59,680 --> 00:17:04,819
more features we're working on where we

00:17:02,390 --> 00:17:07,760
want to add some other things that we

00:17:04,819 --> 00:17:10,130
that we think that are good and we also

00:17:07,760 --> 00:17:12,500
need them for work the major one is

00:17:10,130 --> 00:17:14,390
something that the current speck of json

00:17:12,500 --> 00:17:17,750
api is currently being worked on and

00:17:14,390 --> 00:17:19,220
that's extensions we are mostly

00:17:17,750 --> 00:17:22,430
interested in the bulk extension because

00:17:19,220 --> 00:17:26,270
we want to be able to do bulk changes so

00:17:22,430 --> 00:17:28,580
once that will be up on the spec we will

00:17:26,270 --> 00:17:30,980
be able to push our changes to support

00:17:28,580 --> 00:17:32,600
it it's not a big change for us but we

00:17:30,980 --> 00:17:33,110
still need to be compliant with the spec

00:17:32,600 --> 00:17:36,049
we

00:17:33,110 --> 00:17:39,230
we make we make sure that burn up is is

00:17:36,049 --> 00:17:41,990
hundred percent JSON API compliance so

00:17:39,230 --> 00:17:45,380
we don't want to push it before that is

00:17:41,990 --> 00:17:47,030
up there on the spec for more

00:17:45,380 --> 00:17:50,000
information about it you can read the

00:17:47,030 --> 00:17:54,610
spec itself it's just an IP i dot org go

00:17:50,000 --> 00:17:59,420
to our github repo or look it up on

00:17:54,610 --> 00:18:03,620
medicine with that I'm done if we have

00:17:59,420 --> 00:18:13,179
like four minutes for any questions that

00:18:03,620 --> 00:18:13,179
you may have yes the repo yes

00:18:17,250 --> 00:18:25,290
sure basically all you need is just to

00:18:21,540 --> 00:18:28,170
wrap the methods in a way that your RM

00:18:25,290 --> 00:18:30,090
will understand so I need to be able to

00:18:28,170 --> 00:18:33,750
pass information and say I want to read

00:18:30,090 --> 00:18:35,790
this unique identifier you can transform

00:18:33,750 --> 00:18:38,370
this to whatever you want those those

00:18:35,790 --> 00:18:39,750
methods can be very very small they

00:18:38,370 --> 00:18:42,150
don't need to be more than a call to

00:18:39,750 --> 00:18:44,220
your r or m in the right order of

00:18:42,150 --> 00:18:46,050
parameters or whatever way you're

00:18:44,220 --> 00:18:49,980
passing them but but you can basically

00:18:46,050 --> 00:18:51,930
build a wrapper for any type of or can

00:18:49,980 --> 00:18:53,880
be elastic search it can be it can be

00:18:51,930 --> 00:18:55,740
static data and static files if you want

00:18:53,880 --> 00:18:57,600
to if your modules just reading from

00:18:55,740 --> 00:18:58,980
Excel and serving it that's fine I mean

00:18:57,600 --> 00:19:02,580
that that's up to you how you implement

00:18:58,980 --> 00:19:04,110
it on the server side it's just a

00:19:02,580 --> 00:19:06,810
wrapper but it's a rapper that we know

00:19:04,110 --> 00:19:09,630
how to communicate with this is why we

00:19:06,810 --> 00:19:12,450
require those methods one of the the

00:19:09,630 --> 00:19:16,560
when we ask for for the configuration of

00:19:12,450 --> 00:19:20,030
your repository handler we we asked for

00:19:16,560 --> 00:19:20,030
two things the name of the module

00:19:25,059 --> 00:19:31,289
no not make sure you don't get those

00:19:27,370 --> 00:19:31,289
that okay does that answer your question

00:19:33,419 --> 00:19:52,929
so basically we need we just need to

00:19:36,850 --> 00:19:55,870
have even louder so just to complete my

00:19:52,929 --> 00:19:58,570
answer to you is that we need to be able

00:19:55,870 --> 00:20:00,340
to create an object of your module so we

00:19:58,570 --> 00:20:03,369
need the name of the module and we also

00:20:00,340 --> 00:20:05,409
require you to provide if you want it's

00:20:03,369 --> 00:20:07,450
an empty by default a list of arguments

00:20:05,409 --> 00:20:09,850
that we will pass to that when we call

00:20:07,450 --> 00:20:11,649
new on it so the object that we get is

00:20:09,850 --> 00:20:14,379
something that we know that we can trust

00:20:11,649 --> 00:20:16,929
to work with that with that schema of

00:20:14,379 --> 00:20:18,580
methods but other than that you don't

00:20:16,929 --> 00:20:20,799
really need to know about the JSON API

00:20:18,580 --> 00:20:23,440
spec on how it works you just need to

00:20:20,799 --> 00:20:25,840
provide us with that map to your data

00:20:23,440 --> 00:20:29,049
and we will be able to pull it for you

00:20:25,840 --> 00:20:34,529
and then you have a fully working JSON

00:20:29,049 --> 00:20:39,179
API compliant server any other questions

00:20:34,529 --> 00:20:39,179

YouTube URL: https://www.youtube.com/watch?v=pQTt0yWgKUY


