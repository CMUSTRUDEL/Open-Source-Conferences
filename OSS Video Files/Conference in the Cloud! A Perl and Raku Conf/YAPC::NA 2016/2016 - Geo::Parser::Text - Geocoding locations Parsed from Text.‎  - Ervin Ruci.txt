Title: 2016 - Geo::Parser::Text - Geocoding locations Parsed from Text.â€Ž  - Ervin Ruci
Publication date: 2016-06-27
Playlist: YAPC::NA 2016
Description: 
	
Captions: 
	00:00:01,689 --> 00:00:03,719
I

00:00:06,620 --> 00:00:09,279
but it

00:01:16,040 --> 00:01:18,850
alright

00:01:39,700 --> 00:01:45,159
excuse me I have lost a little bit of my

00:01:41,749 --> 00:01:48,439
voice but I hope you can hear me fine

00:01:45,159 --> 00:01:51,590
I'm going to talk about a topic an old

00:01:48,439 --> 00:01:55,819
problem that has been researched quite a

00:01:51,590 --> 00:01:58,579
bit but a new iteration of that geo

00:01:55,819 --> 00:02:02,420
parson who is who is familiar with geo

00:01:58,579 --> 00:02:11,360
parsing yeah ok ok so let's come back

00:02:02,420 --> 00:02:14,959
here so now you know oh this is stuck so

00:02:11,360 --> 00:02:17,090
yeah about this talk I gave the first

00:02:14,959 --> 00:02:22,599
version of this talk at the first dam in

00:02:17,090 --> 00:02:24,829
January at the Jos partial dev room and

00:02:22,599 --> 00:02:29,030
some members of the audience were really

00:02:24,829 --> 00:02:34,120
surprised that i was using perl one of

00:02:29,030 --> 00:02:36,799
them actually said it's 2016 yes i know

00:02:34,120 --> 00:02:38,630
probably still great for solving

00:02:36,799 --> 00:02:42,709
problems such as this one especially

00:02:38,630 --> 00:02:44,709
with text processing so I've expanded a

00:02:42,709 --> 00:02:49,269
little bit of talk and I've also written

00:02:44,709 --> 00:02:53,900
Sipan module to interface with the API

00:02:49,269 --> 00:03:00,650
which is a pearl service running a joke

00:02:53,900 --> 00:03:04,190
called XYZ so here is the problem let's

00:03:00,650 --> 00:03:05,750
say we have a text like this and how

00:03:04,190 --> 00:03:08,000
many in the audience who haven't already

00:03:05,750 --> 00:03:11,859
seen my slides which were posted know

00:03:08,000 --> 00:03:11,859
how many locations are in this text

00:03:16,720 --> 00:03:19,720
00:03:20,100 --> 00:03:28,380
now this six does this actually actually

00:03:26,640 --> 00:03:31,140
exist i was just i found them while

00:03:28,380 --> 00:03:32,910
testing this because i'm not very

00:03:31,140 --> 00:03:37,320
imaginative and just write this street

00:03:32,910 --> 00:03:39,240
that's it and actually they came up the

00:03:37,320 --> 00:03:43,560
data i use is all from open street map

00:03:39,240 --> 00:03:46,500
and open addresses and here is a more

00:03:43,560 --> 00:03:51,060
detailed response that the program gives

00:03:46,500 --> 00:03:52,650
you because that sentence is it short in

00:03:51,060 --> 00:03:54,960
itself but it has a lot of information

00:03:52,650 --> 00:03:56,910
as a software runs scans through it it

00:03:54,960 --> 00:03:59,460
can find a lot of information and they

00:03:56,910 --> 00:04:02,460
are all valid answers there's also

00:03:59,460 --> 00:04:05,820
sometimes it is ambiguities but i'll get

00:04:02,460 --> 00:04:08,610
to the data so the requirements for this

00:04:05,820 --> 00:04:11,640
system are to identify addresses

00:04:08,610 --> 00:04:16,970
intersections city names and robin state

00:04:11,640 --> 00:04:19,709
on any kind of text the solution is

00:04:16,970 --> 00:04:23,610
pretty much described by this law chart

00:04:19,709 --> 00:04:26,160
you have some input string it goes to a

00:04:23,610 --> 00:04:30,030
named entity recognition engine which

00:04:26,160 --> 00:04:34,020
extracts from it the tokens that have to

00:04:30,030 --> 00:04:39,090
do with locations and afterwards is

00:04:34,020 --> 00:04:44,310
geocoded it could be done all either in

00:04:39,090 --> 00:04:48,930
batch or one at a time and the result is

00:04:44,310 --> 00:04:51,560
stored geocoding is a process that is

00:04:48,930 --> 00:04:54,180
actually spans many fields especially

00:04:51,560 --> 00:04:56,900
since you're dealing with texts in

00:04:54,180 --> 00:05:00,270
written in different languages so

00:04:56,900 --> 00:05:02,160
linguistics is one topic the other one

00:05:00,270 --> 00:05:06,740
is data processing we're dealing with a

00:05:02,160 --> 00:05:11,340
lot of data right now openstreetmap has

00:05:06,740 --> 00:05:13,200
3.2 billion nodes and extracting all

00:05:11,340 --> 00:05:16,230
that information putting it you into a

00:05:13,200 --> 00:05:20,570
data structure for fast access and so

00:05:16,230 --> 00:05:23,370
forth of involves a lot of that process

00:05:20,570 --> 00:05:26,040
standardization as well it's another

00:05:23,370 --> 00:05:29,729
topic and natural language processing

00:05:26,040 --> 00:05:32,729
obviously is the key here parsing is one

00:05:29,729 --> 00:05:33,740
of the key words you need to be able to

00:05:32,729 --> 00:05:35,509
extract only the

00:05:33,740 --> 00:05:38,449
mention that you need from text and then

00:05:35,509 --> 00:05:42,470
match it to your database there is some

00:05:38,449 --> 00:05:44,090
computational geometry usually when

00:05:42,470 --> 00:05:46,310
you're trying to deal with ambiguities

00:05:44,090 --> 00:05:49,280
you can do some clustering you can

00:05:46,310 --> 00:05:52,130
figure out if this polygon of this city

00:05:49,280 --> 00:05:54,440
has this point inside or outside things

00:05:52,130 --> 00:05:57,860
like that and then you have pattern

00:05:54,440 --> 00:06:01,150
recognition for fuzzy addresses mistyped

00:05:57,860 --> 00:06:03,530
addresses this geography as well

00:06:01,150 --> 00:06:06,710
especially when you report data from

00:06:03,530 --> 00:06:08,630
various projections artificial

00:06:06,710 --> 00:06:10,159
intelligence which have implemented in

00:06:08,630 --> 00:06:12,199
the latest version that I was I'm

00:06:10,159 --> 00:06:15,169
building now I will tell you a little

00:06:12,199 --> 00:06:19,520
bit more about that a lot of testing of

00:06:15,169 --> 00:06:22,069
course so why go into all this trouble

00:06:19,520 --> 00:06:23,300
you might ask well why would I work on

00:06:22,069 --> 00:06:28,400
this problem when Google has already

00:06:23,300 --> 00:06:32,780
done it and many people think is is the

00:06:28,400 --> 00:06:35,060
best i have tested them actually nobody

00:06:32,780 --> 00:06:37,099
is at one-hundred percent this is the

00:06:35,060 --> 00:06:38,900
problem with geocoding and there is even

00:06:37,099 --> 00:06:41,750
startups right now or a track right

00:06:38,900 --> 00:06:43,789
trying to invent a whole new system of

00:06:41,750 --> 00:06:47,750
other thing like have you ever heard of

00:06:43,789 --> 00:06:49,849
were three words you have so basically

00:06:47,750 --> 00:06:51,680
were three words this is a system that

00:06:49,849 --> 00:06:54,800
they assigned three and random words to

00:06:51,680 --> 00:06:56,659
which the latitudinal cute pair and then

00:06:54,800 --> 00:06:58,460
you find location like that because it's

00:06:56,659 --> 00:07:01,340
really tough to geocode location written

00:06:58,460 --> 00:07:04,849
in human language especially in areas

00:07:01,340 --> 00:07:06,169
where addressing systems are not very

00:07:04,849 --> 00:07:08,900
well-developed like in the third world

00:07:06,169 --> 00:07:11,509
rossum so this is a problem even for

00:07:08,900 --> 00:07:14,330
google and their competitors various

00:07:11,509 --> 00:07:17,210
competitors nominating is the

00:07:14,330 --> 00:07:21,349
OpenStreetMap geocoded actually is the

00:07:17,210 --> 00:07:24,889
worst from my testing of the whole bunch

00:07:21,349 --> 00:07:27,080
and map Zen is a new company that is

00:07:24,889 --> 00:07:29,419
also released an open-source geo coder

00:07:27,080 --> 00:07:34,780
and you can test it yourself the results

00:07:29,419 --> 00:07:37,340
are are given a dead link there am so

00:07:34,780 --> 00:07:39,169
google jerkwater even doesn't provide

00:07:37,340 --> 00:07:41,419
the hundred percent coverage in someone

00:07:39,169 --> 00:07:43,880
open problem and so is one hundred

00:07:41,419 --> 00:07:45,469
percent accuracy but these are other

00:07:43,880 --> 00:07:47,150
things as well they don't bother for

00:07:45,469 --> 00:07:49,830
example with parcel data

00:07:47,150 --> 00:07:52,289
you know what parts of data is just

00:07:49,830 --> 00:07:54,599
let's say in Alberta they have a system

00:07:52,289 --> 00:07:57,779
of called lung descriptors and

00:07:54,599 --> 00:08:00,240
they they have every parcel of land in

00:07:57,779 --> 00:08:03,240
Alberta describe this way but these are

00:08:00,240 --> 00:08:05,520
government produced data not many people

00:08:03,240 --> 00:08:09,050
in the general public would use it but

00:08:05,520 --> 00:08:12,419
researchers would find that useful and

00:08:09,050 --> 00:08:14,669
Google doesn't do Geo parsing so if you

00:08:12,419 --> 00:08:16,649
copy and paste the page from Wikipedia

00:08:14,669 --> 00:08:19,379
into Google you will not get what you're

00:08:16,649 --> 00:08:21,240
looking for so my problem is I want to

00:08:19,379 --> 00:08:24,419
throw in text and I want to extract all

00:08:21,240 --> 00:08:26,370
locations from this text and doesn't do

00:08:24,419 --> 00:08:27,990
a lot of standardization there is a

00:08:26,370 --> 00:08:29,669
problem for example in Canada it only

00:08:27,990 --> 00:08:33,510
gives three letters of the postal code

00:08:29,669 --> 00:08:36,300
not the full postal code and provides

00:08:33,510 --> 00:08:39,300
what limited doesn't provide limit at

00:08:36,300 --> 00:08:43,260
the API access like Google has I think

00:08:39,300 --> 00:08:46,500
2,500 requests per day that it allows

00:08:43,260 --> 00:08:48,690
you to make so there's many reasons why

00:08:46,500 --> 00:08:52,560
create a new jerkwad and those are only

00:08:48,690 --> 00:08:55,050
some of them so how to go about it you

00:08:52,560 --> 00:08:58,160
need two things data and a good parser I

00:08:55,050 --> 00:09:01,740
think data is the biggest challenge but

00:08:58,160 --> 00:09:03,839
recent years have shown that open data

00:09:01,740 --> 00:09:06,360
movement is gaining steam and there is a

00:09:03,839 --> 00:09:08,250
lot of data now when I first started

00:09:06,360 --> 00:09:10,050
working on this problem it was when I

00:09:08,250 --> 00:09:14,220
was a grad student about 12 years ago

00:09:10,050 --> 00:09:16,170
and back then it was really a pain to

00:09:14,220 --> 00:09:19,199
obtain any any good data right now you

00:09:16,170 --> 00:09:21,000
have a lot more options and then it's

00:09:19,199 --> 00:09:26,760
the algorithm the parser the parser is

00:09:21,000 --> 00:09:29,040
the key so and passing itself there's

00:09:26,760 --> 00:09:31,019
more than that there is also fuzzing an

00:09:29,040 --> 00:09:33,000
exact parsing and then you have to

00:09:31,019 --> 00:09:36,660
figure out the confidence score on your

00:09:33,000 --> 00:09:38,880
response you have to know if it is you

00:09:36,660 --> 00:09:40,949
can tell the user that this is a result

00:09:38,880 --> 00:09:42,510
with high confidence low confidence you

00:09:40,949 --> 00:09:45,149
can show them that this is a partial

00:09:42,510 --> 00:09:46,860
complete parsing result it because the

00:09:45,149 --> 00:09:49,019
parser has to be able to fill in missing

00:09:46,860 --> 00:09:52,949
location entities sometimes people just

00:09:49,019 --> 00:09:55,110
write the NYC or hfx for Halifax for

00:09:52,949 --> 00:09:57,540
example things like that all have to be

00:09:55,110 --> 00:09:59,160
taken into consideration how am i doing

00:09:57,540 --> 00:10:03,759
for time

00:09:59,160 --> 00:10:08,139
12 minutes or I'm doing great so this is

00:10:03,759 --> 00:10:12,819
like oh it opens here this is just a

00:10:08,139 --> 00:10:18,220
quick quick example my keep okay so

00:10:12,819 --> 00:10:19,839
let's say if I tap Orlando in this in

00:10:18,220 --> 00:10:22,500
this case it should find all all

00:10:19,839 --> 00:10:26,850
Orlando's that exists around obviously

00:10:22,500 --> 00:10:31,540
it's not very descriptive if i type

00:10:26,850 --> 00:10:33,459
orange street I don't know Orlando I

00:10:31,540 --> 00:10:36,750
don't know a lot of very well I just

00:10:33,459 --> 00:10:41,470
passed by this I like this name orange

00:10:36,750 --> 00:10:44,970
so now a little bit better as you as you

00:10:41,470 --> 00:10:44,970
can see there there is three results

00:10:55,270 --> 00:11:01,040
the parser assumes that it has to give

00:10:58,670 --> 00:11:03,080
you back a number and there's it could

00:11:01,040 --> 00:11:07,610
also be an intersection they could be

00:11:03,080 --> 00:11:09,740
orange or Steve or island or orlando

00:11:07,610 --> 00:11:11,180
florida so although you gave it

00:11:09,740 --> 00:11:13,340
incomplete information you get back

00:11:11,180 --> 00:11:17,780
complete information and standardized as

00:11:13,340 --> 00:11:20,390
well so let's go back to I mean I can go

00:11:17,780 --> 00:11:21,890
on and all this the thing is the more

00:11:20,390 --> 00:11:23,300
information you give the parts of the

00:11:21,890 --> 00:11:25,250
more responses you're going to get back

00:11:23,300 --> 00:11:26,840
sometimes more sometimes less if you are

00:11:25,250 --> 00:11:28,790
more specific you better get more

00:11:26,840 --> 00:11:33,710
specific answers you're less then you

00:11:28,790 --> 00:11:36,020
get so that's up to you but this is an

00:11:33,710 --> 00:11:38,690
impress eyes process and there's various

00:11:36,020 --> 00:11:42,010
errors okay halfway great how many

00:11:38,690 --> 00:11:44,780
slides 12 hours these are short slides

00:11:42,010 --> 00:11:46,640
so there's a lot of ambiguities and

00:11:44,780 --> 00:11:50,090
complete data incorrect data software

00:11:46,640 --> 00:11:53,750
bugs have you heard of open addresses

00:11:50,090 --> 00:11:57,020
dot io this is a project I'm really fond

00:11:53,750 --> 00:12:00,410
of a started only one year ago and when

00:11:57,020 --> 00:12:02,660
I started they had almost 100,000

00:12:00,410 --> 00:12:04,640
addresses now actually there's more than

00:12:02,660 --> 00:12:06,830
that number there there's almost 260

00:12:04,640 --> 00:12:09,200
million addresses across the world and

00:12:06,830 --> 00:12:10,760
they are free and open to use to any for

00:12:09,200 --> 00:12:12,860
anyone and obviously there is

00:12:10,760 --> 00:12:14,540
openstreetmap but openstreetmap has in

00:12:12,860 --> 00:12:17,780
complete coverage in various areas so

00:12:14,540 --> 00:12:21,290
open addresses fills that void these are

00:12:17,780 --> 00:12:25,600
the data i'm using right now because as

00:12:21,290 --> 00:12:29,120
I said even google map fails and you

00:12:25,600 --> 00:12:32,420
have probably heard like this is close

00:12:29,120 --> 00:12:35,870
to where i live in ottawa there was a

00:12:32,420 --> 00:12:38,210
new story about google maps sending fire

00:12:35,870 --> 00:12:41,810
crews to the wrong address and some dogs

00:12:38,210 --> 00:12:43,550
dying in the fire so that's why we call

00:12:41,810 --> 00:12:46,700
it a google tragedy well even here in

00:12:43,550 --> 00:12:49,160
America is a case of wrong error wrong

00:12:46,700 --> 00:12:52,130
house being demolished due to Google

00:12:49,160 --> 00:12:53,810
Maps sending the crews to that house so

00:12:52,130 --> 00:12:56,450
like I'm saying nobody can really get

00:12:53,810 --> 00:12:59,500
this one hundred percent it's a fact of

00:12:56,450 --> 00:13:02,500
life you have to keep working on it and

00:12:59,500 --> 00:13:05,480
even if Google wrong location you get

00:13:02,500 --> 00:13:07,110
wrong location on google maps that also

00:13:05,480 --> 00:13:12,149
has is a testament of their pocket

00:13:07,110 --> 00:13:13,980
i D but just to say that geocoding and

00:13:12,149 --> 00:13:15,510
your personal structure test is an

00:13:13,980 --> 00:13:17,880
interesting problem and it's an awful

00:13:15,510 --> 00:13:21,660
problem that many people can take a stab

00:13:17,880 --> 00:13:23,430
at it right now I am rebuilding the

00:13:21,660 --> 00:13:25,709
whole project process like I've studied

00:13:23,430 --> 00:13:27,329
these 12 years ago but eight months ago

00:13:25,709 --> 00:13:31,019
I decided I want to rewrite it in

00:13:27,329 --> 00:13:34,079
profile again I am NOT ready for post

00:13:31,019 --> 00:13:35,880
six year but so I'm rewriting I'm

00:13:34,079 --> 00:13:37,649
learning from my mistakes and this is

00:13:35,880 --> 00:13:42,329
new website that i'm doing here is

00:13:37,649 --> 00:13:43,680
called geocode XYZ it as you can see

00:13:42,329 --> 00:13:48,329
it's a nice interface and the other one

00:13:43,680 --> 00:13:49,680
and I use some bootstrap I'm a terrible

00:13:48,329 --> 00:13:51,149
designer but basically it's the same

00:13:49,680 --> 00:13:54,089
thing like I got copied and pasted is

00:13:51,149 --> 00:13:56,010
some text from wikipedia there about

00:13:54,089 --> 00:14:01,200
Vienna Austria and then you'll get your

00:13:56,010 --> 00:14:03,269
responses here so this is joe parr third

00:14:01,200 --> 00:14:06,000
batch your quadrant geocoded and it's a

00:14:03,269 --> 00:14:09,690
free API so it's unlimited can test it

00:14:06,000 --> 00:14:13,980
can do whatever you want with it this is

00:14:09,690 --> 00:14:16,500
a sipping module I wrote eventually it

00:14:13,980 --> 00:14:18,060
will only use geocode XYZ because that

00:14:16,500 --> 00:14:19,680
will be the one that will merge all my

00:14:18,060 --> 00:14:22,350
project and it will have worldwide

00:14:19,680 --> 00:14:26,070
coverage right now for north america is

00:14:22,350 --> 00:14:28,260
geocoded CA that is offering that

00:14:26,070 --> 00:14:30,930
coverage and for Europe is Joe code XYZ

00:14:28,260 --> 00:14:33,149
and for Australia's will be another one

00:14:30,930 --> 00:14:34,890
so basically you call it like that is

00:14:33,149 --> 00:14:40,529
pretty simple and you get a response

00:14:34,890 --> 00:14:43,529
like that and here's a couple of other

00:14:40,529 --> 00:14:47,390
applications I've been working on one of

00:14:43,529 --> 00:14:51,269
my favorite is this one is open wiki map

00:14:47,390 --> 00:14:53,850
okay so for me we came up aims to put

00:14:51,269 --> 00:14:57,420
Wikipedia on openstreetmap so basic

00:14:53,850 --> 00:15:00,089
scans all of Wikipedia and these are

00:14:57,420 --> 00:15:03,860
some Wikipedia pages i guess here say

00:15:00,089 --> 00:15:03,860
well that is

00:15:04,490 --> 00:15:11,600
I can hardly see here so let's just find

00:15:09,410 --> 00:15:13,010
like a big cluster somewhere is their

00:15:11,600 --> 00:15:15,620
billing there because I like Berlin

00:15:13,010 --> 00:15:21,020
Berlin has a lot of nice examples that

00:15:15,620 --> 00:15:23,660
Berlin here live see well I pipe thing

00:15:21,020 --> 00:15:29,300
is good too I need a big city with a lot

00:15:23,660 --> 00:15:34,779
of data oh come on there you go so

00:15:29,300 --> 00:15:34,779
basically you have all the matches here

00:15:35,980 --> 00:15:43,550
I'm just clicking at random until I find

00:15:39,380 --> 00:15:53,899
ok laces so let's say it's found

00:15:43,550 --> 00:15:56,540
something there so what I'm doing is I'm

00:15:53,899 --> 00:15:59,300
I've written a crawler that cross

00:15:56,540 --> 00:16:02,300
Wikipedia wikitravel and all the wiki

00:15:59,300 --> 00:16:04,430
pages but you can add your own you can

00:16:02,300 --> 00:16:06,709
add your own pages to crawl here you

00:16:04,430 --> 00:16:08,690
just give another URL and the crawler

00:16:06,709 --> 00:16:11,240
will take that as well so this will grow

00:16:08,690 --> 00:16:14,680
as time goes by and the goal is to put

00:16:11,240 --> 00:16:14,680
all the world's information on the map

00:16:14,950 --> 00:16:20,300
scanning it and putting it there but not

00:16:17,839 --> 00:16:22,640
only that you know you could also do I

00:16:20,300 --> 00:16:24,110
was also one worrying about the internet

00:16:22,640 --> 00:16:27,470
quality but this is great this is the

00:16:24,110 --> 00:16:29,930
United States I've had some problems in

00:16:27,470 --> 00:16:33,230
other places so basically scan Twitter

00:16:29,930 --> 00:16:36,410
on real time and not all tweets have a

00:16:33,230 --> 00:16:37,760
lot longer with them are geotagged so

00:16:36,410 --> 00:16:39,320
you have to do it yourself and if you

00:16:37,760 --> 00:16:41,959
scan it and you get something like that

00:16:39,320 --> 00:16:46,279
these are all like very slice it

00:16:41,959 --> 00:16:48,770
demonstrate what I already showed you so

00:16:46,279 --> 00:16:51,649
the challenge is that to make it

00:16:48,770 --> 00:16:55,880
accurate and to make it as complete as

00:16:51,649 --> 00:17:00,290
possible these are various processes

00:16:55,880 --> 00:17:02,750
that I employ along the way and here

00:17:00,290 --> 00:17:09,949
comes proud that makes easy problems

00:17:02,750 --> 00:17:12,679
very easy and hard ones easy so like I

00:17:09,949 --> 00:17:14,929
said to the other doing my other talk no

00:17:12,679 --> 00:17:17,990
other language is better slicing and

00:17:14,929 --> 00:17:20,780
dicing text and there's a lot of things

00:17:17,990 --> 00:17:24,400
on Sipan that i have used for my project

00:17:20,780 --> 00:17:24,400
and that's it thank you very much

00:17:44,410 --> 00:17:49,540

YouTube URL: https://www.youtube.com/watch?v=hshprKTodEA


