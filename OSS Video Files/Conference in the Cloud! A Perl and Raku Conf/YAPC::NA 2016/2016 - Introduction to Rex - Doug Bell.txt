Title: 2016 - Introduction to Rex - Doug Bell
Publication date: 2016-06-27
Playlist: YAPC::NA 2016
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:09,570
um so I guess before i begin has anybody

00:00:02,879 --> 00:00:12,170
seen Rex used Rex perhaps okay has

00:00:09,570 --> 00:00:14,790
anybody used ansible puppet chef

00:00:12,170 --> 00:00:16,020
anything else all right all right so we

00:00:14,790 --> 00:00:22,170
got a couple of people who know what

00:00:16,020 --> 00:00:26,849
what this kind of stuff is done um so

00:00:22,170 --> 00:00:28,859
contrary or I guess a little bit

00:00:26,849 --> 00:00:31,560
differently from from all those other

00:00:28,859 --> 00:00:37,969
things that I just mentioned chef or

00:00:31,560 --> 00:00:40,410
sorry Wow Rex Rex is about running tasks

00:00:37,969 --> 00:00:45,809
indeed it's name stands for remote

00:00:40,410 --> 00:00:50,789
executor so you define your tasks in a

00:00:45,809 --> 00:00:53,899
Rex file and you can define your tasks

00:00:50,789 --> 00:00:56,870
simply like this we've got a description

00:00:53,899 --> 00:00:59,719
we've got a documentation for our task

00:00:56,870 --> 00:01:02,879
we've got a task we give it a name and

00:00:59,719 --> 00:01:04,799
it's a pearl subroutine and what we're

00:01:02,879 --> 00:01:10,740
going to do in our task is we're going

00:01:04,799 --> 00:01:14,909
to run dfgh on our / user directories

00:01:10,740 --> 00:01:16,950
when I wrote this talk I worked at a at

00:01:14,909 --> 00:01:19,320
a place where they would mount a bunch

00:01:16,950 --> 00:01:21,659
of hard drives as user 1 user to user

00:01:19,320 --> 00:01:24,060
three and those were the only hard

00:01:21,659 --> 00:01:26,880
drives that we had total access to they

00:01:24,060 --> 00:01:29,430
obviously kept us from root for

00:01:26,880 --> 00:01:31,079
everything else so these were we put our

00:01:29,430 --> 00:01:33,329
data and therefore this is where I

00:01:31,079 --> 00:01:35,790
needed to know how much data how much

00:01:33,329 --> 00:01:37,229
hard drive space we had left we were a

00:01:35,790 --> 00:01:41,610
data warehouse and they wouldn't give us

00:01:37,229 --> 00:01:44,189
new data like I have no idea anyway so

00:01:41,610 --> 00:01:48,360
Rex comes with the command to run our

00:01:44,189 --> 00:01:52,259
tasks if I want to run DF all I have to

00:01:48,360 --> 00:01:55,740
do is tigrex DF is that visible to

00:01:52,259 --> 00:01:58,050
everybody good because this presentation

00:01:55,740 --> 00:02:02,900
does not allow me to check it

00:01:58,050 --> 00:02:02,900
like that that zooming in does not work

00:02:03,230 --> 00:02:09,869
so if i run Rex DF I get its blogging

00:02:07,560 --> 00:02:13,740
saying that I'm running DF on our local

00:02:09,869 --> 00:02:18,420
host but then it gives us the output of

00:02:13,740 --> 00:02:21,450
the DF command so this is a basic Rex

00:02:18,420 --> 00:02:23,690
task i use the run and I can run

00:02:21,450 --> 00:02:26,160
anything I want but that's not really

00:02:23,690 --> 00:02:29,700
useful what I really want is to be able

00:02:26,160 --> 00:02:33,090
to run this task on another host so I

00:02:29,700 --> 00:02:35,070
can do that very simply by using the

00:02:33,090 --> 00:02:38,370
dash H flag to specify which hosts I

00:02:35,070 --> 00:02:40,770
want this to run on so if I want to run

00:02:38,370 --> 00:02:42,480
this on one of my dev servers which I

00:02:40,770 --> 00:02:48,420
won't try to explain why it's named that

00:02:42,480 --> 00:02:52,880
I can just give it the host right at the

00:02:48,420 --> 00:02:55,110
red line so this will connect using SSH

00:02:52,880 --> 00:02:57,770
so we actually don't need anything on

00:02:55,110 --> 00:03:01,890
the host machine except an ssh d and

00:02:57,770 --> 00:03:04,200
then it will so users are SSH config

00:03:01,890 --> 00:03:07,080
uses our key is if we need a password

00:03:04,200 --> 00:03:13,830
it'll prompt for a password and then it

00:03:07,080 --> 00:03:15,480
will run DF and give us our output so if

00:03:13,830 --> 00:03:19,010
we want we can actually specify multiple

00:03:15,480 --> 00:03:23,640
hosts so this will actually run on p apo

00:03:19,010 --> 00:03:25,410
1204 so 01 02 03 04 these were all my

00:03:23,640 --> 00:03:29,730
dev servers I'm sorry all my production

00:03:25,410 --> 00:03:36,209
servers the P and this will give us the

00:03:29,730 --> 00:03:38,130
output four times and so we can use also

00:03:36,209 --> 00:03:40,890
use Rex to deploy files these are

00:03:38,130 --> 00:03:42,510
basically the two kind of common systems

00:03:40,890 --> 00:03:44,160
administrator task first we need to run

00:03:42,510 --> 00:03:47,850
some things and then we need to move

00:03:44,160 --> 00:03:51,420
some files somewhere we can do that

00:03:47,850 --> 00:03:54,780
quite simply we define a task and Rex

00:03:51,420 --> 00:03:56,940
provides us with a file function we tell

00:03:54,780 --> 00:04:00,090
it's the target file we want to ensure

00:03:56,940 --> 00:04:03,269
that it's there and here locally is

00:04:00,090 --> 00:04:06,150
where you get the source so this is my

00:04:03,269 --> 00:04:08,310
HTTP Conte and I'm going to deploy for

00:04:06,150 --> 00:04:09,960
my local obviously it's going to be a

00:04:08,310 --> 00:04:10,830
git repository

00:04:09,960 --> 00:04:16,860
to make sure that we're all tracking

00:04:10,830 --> 00:04:18,900
this and then while we're deploying we

00:04:16,860 --> 00:04:21,060
can get a call back so in the case of

00:04:18,900 --> 00:04:25,170
Apache especially we need to be able to

00:04:21,060 --> 00:04:27,270
restart apache so when we change this

00:04:25,170 --> 00:04:37,830
file we're going to need to run apache

00:04:27,270 --> 00:04:43,680
control restart so in addition to just

00:04:37,830 --> 00:04:44,790
our files hmm just the files we can

00:04:43,680 --> 00:04:48,690
actually generate these files from

00:04:44,790 --> 00:04:50,700
templates as well so if we want we can

00:04:48,690 --> 00:04:53,430
say that here is the server that we're

00:04:50,700 --> 00:04:54,780
connected to for example if we want to

00:04:53,430 --> 00:04:57,300
put in a server name in our at patchy

00:04:54,780 --> 00:05:00,900
config and then we can generate this

00:04:57,300 --> 00:05:05,580
config from a template and then give

00:05:00,900 --> 00:05:07,410
that the content of our five all very

00:05:05,580 --> 00:05:10,880
standard if we didn't have these

00:05:07,410 --> 00:05:17,340
features this would not be a

00:05:10,880 --> 00:05:20,010
administrators tool so the Rex file can

00:05:17,340 --> 00:05:22,710
also configure a predefined sets of

00:05:20,010 --> 00:05:24,110
hosts so previously we had to specify

00:05:22,710 --> 00:05:27,600
the host we wanted on the command line

00:05:24,110 --> 00:05:29,700
but that gets annoying very quickly so

00:05:27,600 --> 00:05:33,960
Rex file allows us to predict to

00:05:29,700 --> 00:05:36,210
configure groups so here I can say that

00:05:33,960 --> 00:05:38,160
I've got ops was the team that I was on

00:05:36,210 --> 00:05:40,380
and we've got our production we've got

00:05:38,160 --> 00:05:44,940
our user acceptance testing and we've

00:05:40,380 --> 00:05:47,850
got our dev and these are the servers

00:05:44,940 --> 00:05:51,690
for those and now i can recall those

00:05:47,850 --> 00:05:53,250
later to run a task so rather than

00:05:51,690 --> 00:05:56,010
saying this is the host that i want to

00:05:53,250 --> 00:06:00,480
run on i can say this is the group that

00:05:56,010 --> 00:06:02,520
i want to run on so as before i can say

00:06:00,480 --> 00:06:06,540
the dash g and the group and it will

00:06:02,520 --> 00:06:10,070
give us the results of DF on both of our

00:06:06,540 --> 00:06:10,070
ha on both of our hosts

00:06:10,910 --> 00:06:15,180
and so in addition to groups we also

00:06:14,310 --> 00:06:18,570
have another kind of configuration

00:06:15,180 --> 00:06:22,530
called environments and an environment

00:06:18,570 --> 00:06:24,419
allows us to set up different kinds of

00:06:22,530 --> 00:06:26,940
things for if we're in Deb if we're in

00:06:24,419 --> 00:06:29,850
prod but importantly it allows us to

00:06:26,940 --> 00:06:31,620
kind of share our group names so

00:06:29,850 --> 00:06:34,460
consider this kind of be a namespace for

00:06:31,620 --> 00:06:37,889
our information so i can say that in dev

00:06:34,460 --> 00:06:39,450
here is a group of all my servers here

00:06:37,889 --> 00:06:42,150
is my Reuters server which is allowed to

00:06:39,450 --> 00:06:44,040
connect to the market here's my database

00:06:42,150 --> 00:06:47,370
server which is where I store all my

00:06:44,040 --> 00:06:49,410
time series but in production we've got

00:06:47,370 --> 00:06:53,010
some different toasts for those exact

00:06:49,410 --> 00:06:56,460
same tasks and this is important because

00:06:53,010 --> 00:07:01,050
then it allows me to say when I run my

00:06:56,460 --> 00:07:03,030
task in my environment I can so I can

00:07:01,050 --> 00:07:06,889
set my environment from the command line

00:07:03,030 --> 00:07:09,660
and then i can say that when i'm in dev

00:07:06,889 --> 00:07:12,600
in my database I want to see how much

00:07:09,660 --> 00:07:14,940
disk I have free so now I don't really

00:07:12,600 --> 00:07:17,850
need to know the the layout and the

00:07:14,940 --> 00:07:21,210
archaic hostname that I have I can just

00:07:17,850 --> 00:07:23,930
say that ok well the dev DB tell me how

00:07:21,210 --> 00:07:23,930
much just got got

00:07:26,960 --> 00:07:31,410
so we've also got other configuration

00:07:29,220 --> 00:07:36,510
host names are obviously the most

00:07:31,410 --> 00:07:38,880
important we can also set variables so

00:07:36,510 --> 00:07:41,370
we've got that lib is what we called our

00:07:38,880 --> 00:07:43,139
deployment directory and in a certain

00:07:41,370 --> 00:07:45,600
environment we had a different

00:07:43,139 --> 00:07:49,410
deployment directory our user acceptance

00:07:45,600 --> 00:07:53,220
testing was a repurposed dr server and

00:07:49,410 --> 00:07:55,860
so rather than convince the system ends

00:07:53,220 --> 00:07:58,169
to change the name of our deploy

00:07:55,860 --> 00:08:02,639
directory we just kind of let them use

00:07:58,169 --> 00:08:04,680
it anybody who's worked in a large

00:08:02,639 --> 00:08:08,430
corporation knows that the SIS admin's

00:08:04,680 --> 00:08:12,360
can be difficult to convert to to

00:08:08,430 --> 00:08:15,570
convince of a necessity of things and I

00:08:12,360 --> 00:08:18,229
won't get into the dbas so we can define

00:08:15,570 --> 00:08:21,810
a task then that uses these variables

00:08:18,229 --> 00:08:25,050
set sets a variable get gets the

00:08:21,810 --> 00:08:28,800
variable and then we can have we can

00:08:25,050 --> 00:08:31,380
restart our application so we need to

00:08:28,800 --> 00:08:34,039
know where the application is before we

00:08:31,380 --> 00:08:34,039
can restart

00:08:36,659 --> 00:08:41,909
and then like before i'm defining this

00:08:39,360 --> 00:08:43,699
is my environment this is the group and

00:08:41,909 --> 00:08:49,649
this is the task that I'm trying to run

00:08:43,699 --> 00:08:51,509
pc is our process controller but if you

00:08:49,649 --> 00:08:55,199
notice there's a lot of a lot of typing

00:08:51,509 --> 00:08:59,269
here but personally first I'm going to

00:08:55,199 --> 00:09:02,310
talk about tasks so in addition to the

00:08:59,269 --> 00:09:05,250
you know being able to run tasks we can

00:09:02,310 --> 00:09:07,259
also have to ask that other tasks this

00:09:05,250 --> 00:09:09,389
was especially important for my release

00:09:07,259 --> 00:09:11,339
process which consists of a series of

00:09:09,389 --> 00:09:16,319
steps that I wanted to be able to start

00:09:11,339 --> 00:09:21,870
from the middle so i can say to update

00:09:16,319 --> 00:09:24,839
our release i can define an update task

00:09:21,870 --> 00:09:27,660
i can even define what the group is by

00:09:24,839 --> 00:09:29,639
default so if i don't specify which

00:09:27,660 --> 00:09:33,810
server this task needs to run it's going

00:09:29,639 --> 00:09:37,319
to default to this server and then once

00:09:33,810 --> 00:09:41,130
i update our process controller i can

00:09:37,319 --> 00:09:43,920
then run the restart so now every time i

00:09:41,130 --> 00:09:46,319
try to update our application the

00:09:43,920 --> 00:09:48,540
restart automatically happens but i also

00:09:46,319 --> 00:09:51,839
have that restart as its own task that I

00:09:48,540 --> 00:09:53,339
can run at any time so as mentioned

00:09:51,839 --> 00:09:56,069
previously this was really helpful for

00:09:53,339 --> 00:09:58,259
my release that consisted of you know

00:09:56,069 --> 00:09:59,730
staging the release building the release

00:09:58,259 --> 00:10:01,889
deploying the release testing the

00:09:59,730 --> 00:10:04,199
release and that any post release checks

00:10:01,889 --> 00:10:06,779
if any one of those steps failed I had

00:10:04,199 --> 00:10:08,339
to be able to start halfway through so i

00:10:06,779 --> 00:10:11,939
didn't have to stage the release again

00:10:08,339 --> 00:10:14,310
which took about 20 minutes and 20

00:10:11,939 --> 00:10:16,259
minutes on a friday at 6pm was the only

00:10:14,310 --> 00:10:19,189
window they allowed us and i really

00:10:16,259 --> 00:10:19,189
don't want to be in the office anymore

00:10:19,220 --> 00:10:26,519
so now if I run the update pc task by my

00:10:23,910 --> 00:10:28,730
app gets updated and my my my app gets

00:10:26,519 --> 00:10:32,089
restarted

00:10:28,730 --> 00:10:35,000
and so in addition to defining all my

00:10:32,089 --> 00:10:37,610
config in my file I can actually pass in

00:10:35,000 --> 00:10:39,889
command line parameters this was really

00:10:37,610 --> 00:10:44,540
helpful I create a task to install seat

00:10:39,889 --> 00:10:48,380
pad modules and in my task I could then

00:10:44,540 --> 00:10:50,480
say here are my command line options and

00:10:48,380 --> 00:10:53,660
what I'm going to do is I'm going to

00:10:50,480 --> 00:10:56,360
allow a module option that is either a

00:10:53,660 --> 00:10:58,880
comma or space separated value and then

00:10:56,360 --> 00:11:05,779
I'm going to run Sipan to install those

00:10:58,880 --> 00:11:08,510
modules so then I can for every box i

00:11:05,779 --> 00:11:10,459
have in dev install the mojolicious and

00:11:08,510 --> 00:11:19,930
dancer because i really want them to

00:11:10,459 --> 00:11:26,899
duke it out um and Rex can do a lot more

00:11:19,930 --> 00:11:28,880
this is a very basic introduction Rex

00:11:26,899 --> 00:11:30,769
can sync directories entire directories

00:11:28,880 --> 00:11:35,120
using our sink our sink being the best

00:11:30,769 --> 00:11:37,040
tool for that if you use the Rex

00:11:35,120 --> 00:11:38,899
commands our sink which is included and

00:11:37,040 --> 00:11:40,699
then it all you have to do is say sink

00:11:38,899 --> 00:11:44,149
this local directory to this remote

00:11:40,699 --> 00:11:47,920
directory this is how i deploy a lot of

00:11:44,149 --> 00:11:47,920
code and how to deploy a lot of websites

00:11:48,190 --> 00:11:53,120
Rex has more configuration it has the

00:11:51,440 --> 00:11:57,740
CMDB which is the configuration

00:11:53,120 --> 00:12:02,600
management database excuse me if you've

00:11:57,740 --> 00:12:05,540
used ansible you may recognize this kind

00:12:02,600 --> 00:12:08,899
of thing it allows you to configure your

00:12:05,540 --> 00:12:11,449
stuff / host basis but allows you to

00:12:08,899 --> 00:12:15,500
configure also by environment my

00:12:11,449 --> 00:12:17,089
operating system and a bunch of other

00:12:15,500 --> 00:12:20,510
variables and then all of these

00:12:17,089 --> 00:12:22,250
configurations are coalesced into this

00:12:20,510 --> 00:12:23,990
configuration that is specific to this

00:12:22,250 --> 00:12:25,699
machine that happens to be at this time

00:12:23,990 --> 00:12:27,769
running this operating system and

00:12:25,699 --> 00:12:30,860
happens to be declared as part of this

00:12:27,769 --> 00:12:34,100
environment so you can say that for

00:12:30,860 --> 00:12:36,110
example on debian you need your

00:12:34,100 --> 00:12:38,310
httpd.conf to be in a certain place

00:12:36,110 --> 00:12:41,420
where as in Red Hat

00:12:38,310 --> 00:12:41,420
to be in a completely different place

00:12:43,250 --> 00:12:50,100
Rex has plugins if you go to modules XV

00:12:46,710 --> 00:12:53,270
org you can get plugins for Rex some of

00:12:50,100 --> 00:12:56,820
them are on Sipan some of them are not

00:12:53,270 --> 00:13:04,580
this is the canonical repository for

00:12:56,820 --> 00:13:04,580
them and are there any questions yes

00:13:06,860 --> 00:13:15,720
correct yes they are exactly Perl

00:13:12,930 --> 00:13:18,060
scripts I mean they're run obviously as

00:13:15,720 --> 00:13:19,830
part of the director process we ask any

00:13:18,060 --> 00:13:21,920
pearl you want to use their just pearl

00:13:19,830 --> 00:13:25,440
you can load whatever modules you want

00:13:21,920 --> 00:13:28,020
if you want to you know really ammo file

00:13:25,440 --> 00:13:30,089
really get repository indeed that's

00:13:28,020 --> 00:13:32,520
that's how our release was automated is

00:13:30,089 --> 00:13:35,400
we used the books git repository module

00:13:32,520 --> 00:13:37,410
and we have this big like group of sub

00:13:35,400 --> 00:13:40,170
modules I don't recommend this at all

00:13:37,410 --> 00:13:42,089
but this is how we did it and it would

00:13:40,170 --> 00:13:43,470
you know tag or release and every single

00:13:42,089 --> 00:13:46,470
sub-module there's 50 of these and

00:13:43,470 --> 00:13:48,510
that's why it took 20 minutes and then

00:13:46,470 --> 00:13:49,980
push all those sub modules up and then

00:13:48,510 --> 00:13:52,470
do the same thing on the other end to

00:13:49,980 --> 00:13:54,930
pull it back down so yes any pearl is

00:13:52,470 --> 00:13:59,570
allowed and indeed the pearl syntax

00:13:54,930 --> 00:13:59,570
highlighting works perfectly yes

00:14:02,360 --> 00:14:08,160
wasn't covered by hands or any of the

00:14:05,310 --> 00:14:10,920
other same ventricles I've been using

00:14:08,160 --> 00:14:15,210
salt personally okay it's got runners as

00:14:10,920 --> 00:14:17,790
well say hey go do this for me with all

00:14:15,210 --> 00:14:20,190
these parameters as well what hold of

00:14:17,790 --> 00:14:24,810
the skull for you that wasn't covered by

00:14:20,190 --> 00:14:27,210
ins right so actually so at the place i

00:14:24,810 --> 00:14:30,090
wrote this and started using rocks at we

00:14:27,210 --> 00:14:32,580
wrote an ansible alike which we call the

00:14:30,090 --> 00:14:34,440
Draco it was written in perl but it

00:14:32,580 --> 00:14:36,750
worked very much like I understand

00:14:34,440 --> 00:14:39,180
ansible to work now there was a bunch of

00:14:36,750 --> 00:14:41,670
static gamal files with you know

00:14:39,180 --> 00:14:45,930
declaration sang file directory you know

00:14:41,670 --> 00:14:47,370
function script plugin etc and the

00:14:45,930 --> 00:14:51,000
problem that I had with that system that

00:14:47,370 --> 00:14:53,280
we wrote was that as part of my release

00:14:51,000 --> 00:14:55,980
that takes you know in total an hour 20

00:14:53,280 --> 00:14:58,980
minutes to stage 40 minutes to test if

00:14:55,980 --> 00:15:01,290
the tests failed I had to start from the

00:14:58,980 --> 00:15:04,080
beginning because we're talking about

00:15:01,290 --> 00:15:07,410
state here and there if this directory

00:15:04,080 --> 00:15:09,930
exists I can't just ignore it because it

00:15:07,410 --> 00:15:11,250
might be in an inconsistent state so

00:15:09,930 --> 00:15:13,440
what I really want to do is I want to be

00:15:11,250 --> 00:15:16,710
able to say okay I've staged it I've

00:15:13,440 --> 00:15:19,950
built it start from the tests and then

00:15:16,710 --> 00:15:21,960
continue on from there I don't know if

00:15:19,950 --> 00:15:25,080
ansible allows us to do anything like

00:15:21,960 --> 00:15:29,070
that but I know the the tool that we had

00:15:25,080 --> 00:15:31,010
at the time did not and it's basically

00:15:29,070 --> 00:15:35,550
it's basically if you're halfway through

00:15:31,010 --> 00:15:37,770
you know moving to the desired state how

00:15:35,550 --> 00:15:39,480
do you how do you indicate that you want

00:15:37,770 --> 00:15:43,290
to start in the middle where you need to

00:15:39,480 --> 00:15:45,540
start I also used to use CF engine see

00:15:43,290 --> 00:15:47,970
if engine for and it's very much the

00:15:45,540 --> 00:15:50,370
same thing like I declare that this is

00:15:47,970 --> 00:15:53,300
what my box needs to look like when I'm

00:15:50,370 --> 00:15:58,800
done and you know maybe I'll help you

00:15:53,300 --> 00:16:02,130
decide how to do that but it can be

00:15:58,800 --> 00:16:05,010
difficult to do you know ad hoc things

00:16:02,130 --> 00:16:07,530
like I just need to run DF on a bunch of

00:16:05,010 --> 00:16:10,200
servers I just need to install this one

00:16:07,530 --> 00:16:11,290
Sipan module and a bunch of servers that

00:16:10,200 --> 00:16:14,389
kind of thing

00:16:11,290 --> 00:16:17,660
so ad hoc little tasks that I can just

00:16:14,389 --> 00:16:24,290
throw at 20 or 30 servers was really

00:16:17,660 --> 00:16:27,019
helpful for me so I did my first like

00:16:24,290 --> 00:16:32,449
that Sipan task in that DF task I did

00:16:27,019 --> 00:16:36,470
that in like an hour or two how long ago

00:16:32,449 --> 00:16:39,139
I started about three maybe two or two

00:16:36,470 --> 00:16:40,670
or three years ago and I've started

00:16:39,139 --> 00:16:45,860
using it more and more for personal

00:16:40,670 --> 00:16:48,470
projects so like for example my websites

00:16:45,860 --> 00:16:50,689
all have Rex files that deploy

00:16:48,470 --> 00:16:54,170
themselves using the static site

00:16:50,689 --> 00:16:56,689
generator i built and see pen testers

00:16:54,170 --> 00:16:59,120
i've been writing a pen testers deploy

00:16:56,689 --> 00:17:01,850
script that allows me to you know deploy

00:16:59,120 --> 00:17:04,189
the database to play the cron tabs run a

00:17:01,850 --> 00:17:05,750
diff on the cron tabs before i deploy it

00:17:04,189 --> 00:17:10,760
because i have no idea who else has been

00:17:05,750 --> 00:17:12,650
up in there that kind of thing so yeah

00:17:10,760 --> 00:17:18,010
I've been I've been working for a couple

00:17:12,650 --> 00:17:18,010
years now yeah

00:17:21,530 --> 00:17:26,600
just mention which also give good

00:17:23,780 --> 00:17:29,800
feedback this is not a bad dates on this

00:17:26,600 --> 00:17:33,880
day so what is your feedback look like

00:17:29,800 --> 00:17:33,880
snails or something

00:17:34,130 --> 00:17:38,340
so by default it's very poor alike in

00:17:36,900 --> 00:17:41,850
that if you're not looking for an error

00:17:38,340 --> 00:17:47,400
you're not going to find one so for

00:17:41,850 --> 00:17:50,340
example in my tasks when I soper here

00:17:47,400 --> 00:17:51,810
the sink you can do a verbose mode and

00:17:50,340 --> 00:17:54,600
it will you know be like our sink

00:17:51,810 --> 00:17:57,360
verbose but in the original tasks I was

00:17:54,600 --> 00:18:01,650
writing which probably only at the

00:17:57,360 --> 00:18:06,090
beginning here we go you'll notice that

00:18:01,650 --> 00:18:08,850
I'm actually saying the output and this

00:18:06,090 --> 00:18:10,170
this allows me to get the output so this

00:18:08,850 --> 00:18:13,440
this allows me to get the output as a

00:18:10,170 --> 00:18:16,460
scalar and and I can say it or I can you

00:18:13,440 --> 00:18:20,880
know for example I can test for file

00:18:16,460 --> 00:18:25,170
using run and then you know throw an

00:18:20,880 --> 00:18:28,280
error if I want to so that's all most of

00:18:25,170 --> 00:18:31,740
that stuff is kind of manual the file

00:18:28,280 --> 00:18:34,350
the file stuff and there are like ways

00:18:31,740 --> 00:18:36,180
to say like ensure this line exists and

00:18:34,350 --> 00:18:37,710
that will give you a proper feedback if

00:18:36,180 --> 00:18:45,260
that line does not exist or if it's not

00:18:37,710 --> 00:18:48,910
able to to insert that line yes

00:18:45,260 --> 00:18:48,910
serves in front

00:18:50,090 --> 00:18:55,020
there is a way yes to run tasks in

00:18:53,160 --> 00:18:57,360
parallel by default it won't it'll be

00:18:55,020 --> 00:18:59,850
cereal but you can pass the dash J flag

00:18:57,360 --> 00:19:03,420
to run it there are a couple actual back

00:18:59,850 --> 00:19:05,790
ends i believe the the primary one is

00:19:03,420 --> 00:19:08,490
just a simple fork but it can actually

00:19:05,790 --> 00:19:12,330
use gear man as well so if you have you

00:19:08,490 --> 00:19:17,840
know an actual job runner system you can

00:19:12,330 --> 00:19:17,840
run you know on massively parallel jobs

00:19:26,759 --> 00:19:31,979
that is an excellent question i don't

00:19:28,619 --> 00:19:34,039
know if you're doing like if you're

00:19:31,979 --> 00:19:36,719
doing with the runt ask inside the task

00:19:34,039 --> 00:19:39,899
it will probably it's it's more of a

00:19:36,719 --> 00:19:43,739
mapper and so like the task includes the

00:19:39,899 --> 00:19:45,749
other task basically I don't know I've

00:19:43,739 --> 00:19:47,690
never tried running like you know

00:19:45,749 --> 00:19:51,209
multiple task names on the command line

00:19:47,690 --> 00:19:57,389
so I couldn't tell you that if that's a

00:19:51,209 --> 00:20:00,149
thing there are on freenode pound wrecks

00:19:57,389 --> 00:20:02,069
on freenode is is there and the and the

00:20:00,149 --> 00:20:03,029
devs are rather responsive so if you

00:20:02,069 --> 00:20:07,049
have any questions that I haven't

00:20:03,029 --> 00:20:10,109
answered definitely go in there and give

00:20:07,049 --> 00:20:16,190
them a chat all right any other

00:20:10,109 --> 00:20:16,190

YouTube URL: https://www.youtube.com/watch?v=nEVgui7-f78


