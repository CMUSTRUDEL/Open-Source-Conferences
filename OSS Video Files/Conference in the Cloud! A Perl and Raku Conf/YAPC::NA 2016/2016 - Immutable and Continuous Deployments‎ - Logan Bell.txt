Title: 2016 - Immutable and Continuous Deploymentsâ€Ž - Logan Bell
Publication date: 2016-06-27
Playlist: YAPC::NA 2016
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:06,720
alright good morning everyone my name is

00:00:02,870 --> 00:00:12,450
Logan Bell and I am a software developer

00:00:06,720 --> 00:00:14,040
for medium ass and as my slide happens

00:00:12,450 --> 00:00:19,320
to say I'm no need to be giving a talk

00:00:14,040 --> 00:00:20,910
on immutable deploys essentially for the

00:00:19,320 --> 00:00:24,029
last six months I've been doing a lot of

00:00:20,910 --> 00:00:27,180
head to desk when it comes to playing

00:00:24,029 --> 00:00:31,619
around with packer and terraform and

00:00:27,180 --> 00:00:32,759
this talk is basically presenting all

00:00:31,619 --> 00:00:34,710
the knowledge that I've gained in the

00:00:32,759 --> 00:00:36,120
last six months to hopefully help

00:00:34,710 --> 00:00:37,920
someone out who wants to set up a

00:00:36,120 --> 00:00:42,050
continuous deployment pipeline using

00:00:37,920 --> 00:00:44,910
these tools like i said this talk is

00:00:42,050 --> 00:00:48,329
primarily primarily about packer and

00:00:44,910 --> 00:00:51,870
terraform these two products are built

00:00:48,329 --> 00:00:54,510
by a company called hachey core they're

00:00:51,870 --> 00:00:58,050
relatively famous for another tool

00:00:54,510 --> 00:01:02,489
called vagrant and they have a few other

00:00:58,050 --> 00:01:04,320
products as well Packer is primarily a

00:01:02,489 --> 00:01:07,770
tool that's very similar to vagrant in

00:01:04,320 --> 00:01:11,180
nature arm but uses a different sort of

00:01:07,770 --> 00:01:15,659
configuration file but it is used to

00:01:11,180 --> 00:01:17,729
essentially create production images and

00:01:15,659 --> 00:01:19,860
I'll go through some demonstrations how

00:01:17,729 --> 00:01:21,860
it works on the big advantage to using

00:01:19,860 --> 00:01:25,170
Packers that you can do parallel builds

00:01:21,860 --> 00:01:29,549
so you can actually build docker images

00:01:25,170 --> 00:01:33,630
and Amazon am is and it's also an open

00:01:29,549 --> 00:01:36,799
source tool terraform is kind of the

00:01:33,630 --> 00:01:39,240
flipside of packer you would use it to

00:01:36,799 --> 00:01:40,530
essentially launch an entire

00:01:39,240 --> 00:01:44,490
infrastructure and manage your

00:01:40,530 --> 00:01:46,560
production environment we use it for

00:01:44,490 --> 00:01:48,960
integrating with amazon and most of my

00:01:46,560 --> 00:01:53,880
my examples will be demonstrating its

00:01:48,960 --> 00:01:58,290
use usage with ec2 so let's talk first

00:01:53,880 --> 00:01:59,640
about packard so Packer is a basically

00:01:58,290 --> 00:02:04,079
it's just the command line tool called

00:01:59,640 --> 00:02:06,750
packer and it is built to parse and read

00:02:04,079 --> 00:02:10,509
a template file this template file is

00:02:06,750 --> 00:02:13,870
primarily written in JSON and they

00:02:10,509 --> 00:02:16,840
are four main components that are a part

00:02:13,870 --> 00:02:19,209
of this file it is composed of things

00:02:16,840 --> 00:02:22,480
called builders post processors

00:02:19,209 --> 00:02:25,290
provisioners and variables builders are

00:02:22,480 --> 00:02:28,569
the things that you can run in parallel

00:02:25,290 --> 00:02:30,790
the for example you can build as I

00:02:28,569 --> 00:02:33,040
mentioned you build amazon EBS images

00:02:30,790 --> 00:02:37,900
docker images integrates with OpenStack

00:02:33,040 --> 00:02:40,989
um the things that post processors are

00:02:37,900 --> 00:02:44,530
the things that after you provision or

00:02:40,989 --> 00:02:46,420
build an image you can you know as its

00:02:44,530 --> 00:02:49,599
kind of self-descriptive it you can run

00:02:46,420 --> 00:02:51,040
a post processor across it um common

00:02:49,599 --> 00:02:54,159
sorts of things you want to do is

00:02:51,040 --> 00:02:56,620
archive your your image which is very

00:02:54,159 --> 00:03:00,099
important for a continuous deployment

00:02:56,620 --> 00:03:02,590
pipeline provisioners these are the

00:03:00,099 --> 00:03:05,280
actual like nuts and bolts of everything

00:03:02,590 --> 00:03:08,500
you want to get installed on the box

00:03:05,280 --> 00:03:09,819
your your web application etc and then

00:03:08,500 --> 00:03:11,349
finally variables these are just sort of

00:03:09,819 --> 00:03:13,569
the things that you can you can pass in

00:03:11,349 --> 00:03:15,579
through command line you know either

00:03:13,569 --> 00:03:18,730
through environment variables or

00:03:15,579 --> 00:03:21,910
actually a command line variables so

00:03:18,730 --> 00:03:26,049
here's an example of a basic template um

00:03:21,910 --> 00:03:29,739
and I just I can everyone see that okay

00:03:26,049 --> 00:03:32,349
it just realize okay the first section

00:03:29,739 --> 00:03:34,449
here is as I've described setting up

00:03:32,349 --> 00:03:39,280
some variables so this one is going to

00:03:34,449 --> 00:03:42,010
build in amazon image for us and we

00:03:39,280 --> 00:03:44,049
needed to specify an AWS access key and

00:03:42,010 --> 00:03:47,260
secret so it's going to read that

00:03:44,049 --> 00:03:49,359
information from the environment the

00:03:47,260 --> 00:03:51,819
next section is takes an array of

00:03:49,359 --> 00:03:53,139
builders we're only using one builder

00:03:51,819 --> 00:03:56,260
here which is the building Amazon

00:03:53,139 --> 00:03:59,519
instance and you can see down below the

00:03:56,260 --> 00:04:02,620
access key we are basically using using

00:03:59,519 --> 00:04:07,090
the variables that were defined in the

00:04:02,620 --> 00:04:09,190
prior block and then an important aspect

00:04:07,090 --> 00:04:12,489
is the source am I this is the am i that

00:04:09,190 --> 00:04:14,949
is going to use to build and this

00:04:12,489 --> 00:04:18,370
particular one is in the boom to source

00:04:14,949 --> 00:04:20,349
am I and then the last thing down at the

00:04:18,370 --> 00:04:21,700
bottom there an ami name so when it's

00:04:20,349 --> 00:04:22,780
done provisioning is actually going to

00:04:21,700 --> 00:04:25,930
save this off into

00:04:22,780 --> 00:04:28,510
si tu as this name down here Packer dash

00:04:25,930 --> 00:04:30,430
example and it's using a special

00:04:28,510 --> 00:04:37,840
built-in variable called timestamp to

00:04:30,430 --> 00:04:40,210
place a timestamp there so to build this

00:04:37,840 --> 00:04:42,400
Packer just has a couple commands on I'm

00:04:40,210 --> 00:04:44,110
only listening to hear but Packer

00:04:42,400 --> 00:04:46,750
validate will basically just parse the

00:04:44,110 --> 00:04:47,830
file and verify that it is valid and

00:04:46,750 --> 00:04:51,370
then build will actually go out and

00:04:47,830 --> 00:04:52,990
start building it so going to attempt to

00:04:51,370 --> 00:05:01,600
do a live demo here and we'll see how

00:04:52,990 --> 00:05:04,800
this goes there we go so we can run oops

00:05:01,600 --> 00:05:04,800
in the wrong directory

00:05:09,249 --> 00:05:12,119
this isn't

00:05:13,009 --> 00:05:16,610
this is relatively this may take a few

00:05:15,199 --> 00:05:18,289
minutes but i'll let that run in the

00:05:16,610 --> 00:05:20,779
background but basically what it's doing

00:05:18,289 --> 00:05:22,699
is i was mentioning it's it's spending

00:05:20,779 --> 00:05:26,599
up an instance on amazon to build out

00:05:22,699 --> 00:05:29,149
this this am I we will come back to that

00:05:26,599 --> 00:05:33,319
shortly well let's doing that okay and

00:05:29,149 --> 00:05:34,819
then the third part of what that

00:05:33,319 --> 00:05:36,710
probably the most important part is the

00:05:34,819 --> 00:05:38,119
provisioners oh and this particular

00:05:36,710 --> 00:05:40,520
provisioner we're not really doing

00:05:38,119 --> 00:05:42,800
anything special but um it's using a

00:05:40,520 --> 00:05:45,080
shell type and you can run in line

00:05:42,800 --> 00:05:47,210
commands you just supply whatever

00:05:45,080 --> 00:05:49,699
commands you want to run this one is

00:05:47,210 --> 00:05:54,620
just installing a few things pearl and

00:05:49,699 --> 00:05:57,439
apache to you can also do such things

00:05:54,620 --> 00:05:59,449
like first examples using the in line as

00:05:57,439 --> 00:06:01,759
well but the second one there is you can

00:05:59,449 --> 00:06:07,099
use scripts so you can just write a bash

00:06:01,759 --> 00:06:09,110
script and it will run that um you can

00:06:07,099 --> 00:06:11,509
it comes with other types of

00:06:09,110 --> 00:06:12,919
provisioners one in this example is an

00:06:11,509 --> 00:06:16,969
ansible provisioner has chef

00:06:12,919 --> 00:06:20,089
provisioners as a whole number of them

00:06:16,969 --> 00:06:21,379
oh and this one here is basically we're

00:06:20,089 --> 00:06:23,809
just pointing in the direction of a

00:06:21,379 --> 00:06:27,229
playbook which is an ansible basically

00:06:23,809 --> 00:06:29,240
it's like a list of things to do and it

00:06:27,229 --> 00:06:33,259
will run ansible the one caveat is it is

00:06:29,240 --> 00:06:34,699
that it expects ansible to actually be

00:06:33,259 --> 00:06:35,809
installed in the am i so that's just one

00:06:34,699 --> 00:06:37,939
gotcha that you have to kind of think

00:06:35,809 --> 00:06:40,879
about even though they they have these

00:06:37,939 --> 00:06:45,669
built-ins you have to also install the

00:06:40,879 --> 00:06:45,669
particular thing you're trying to to use

00:06:45,759 --> 00:06:50,959
here is something a little bit more

00:06:48,019 --> 00:06:53,749
useful this one here is actually

00:06:50,959 --> 00:06:56,870
deploying or actually provisioning a

00:06:53,749 --> 00:06:58,490
real application we have two types at

00:06:56,870 --> 00:06:59,419
the top there the two file type so

00:06:58,490 --> 00:07:03,019
essentially what we're doing is we're

00:06:59,419 --> 00:07:04,909
copying the file from locally out to the

00:07:03,019 --> 00:07:07,569
box and we're putting it on in the temp

00:07:04,909 --> 00:07:09,889
directory so we have a my app that PL

00:07:07,569 --> 00:07:11,289
which is just essentially a dancer app

00:07:09,889 --> 00:07:14,139
which I'll show here in a minute and

00:07:11,289 --> 00:07:16,099
then we have a supervisor d

00:07:14,139 --> 00:07:18,199
configuration file which is just going

00:07:16,099 --> 00:07:20,439
to turn on the answer app for us and

00:07:18,199 --> 00:07:22,579
then finally run our provision script

00:07:20,439 --> 00:07:24,889
and we take a look at the provision

00:07:22,579 --> 00:07:26,870
scripts essentially it's just the best

00:07:24,889 --> 00:07:32,840
file and it's hard to read I realize

00:07:26,870 --> 00:07:34,990
and however are basically the script

00:07:32,840 --> 00:07:37,490
that the dance rap is just a fat packed

00:07:34,990 --> 00:07:39,680
dancer application so it's just a single

00:07:37,490 --> 00:07:43,160
file we install some things here like

00:07:39,680 --> 00:07:44,090
see pan- so that we can install you know

00:07:43,160 --> 00:07:48,620
some of the things i have see

00:07:44,090 --> 00:07:50,690
dependencies and then down below as you

00:07:48,620 --> 00:07:52,610
can see in the previous screen we copied

00:07:50,690 --> 00:07:54,020
those PL and the supervisor comp files

00:07:52,610 --> 00:07:55,760
into the temp directory so this is

00:07:54,020 --> 00:07:57,230
actually placing them where we want them

00:07:55,760 --> 00:08:01,790
so we can run it and then we spin up

00:07:57,230 --> 00:08:03,920
supervisor this is the dancer

00:08:01,790 --> 00:08:05,300
application nothing sophisticated here

00:08:03,920 --> 00:08:11,030
other than just the example from their

00:08:05,300 --> 00:08:18,370
their page and if we go back to our demo

00:08:11,030 --> 00:08:18,370
here okay

00:08:18,500 --> 00:08:23,480
so in our previous image we see that it

00:08:21,230 --> 00:08:25,370
actually created artifact you see that

00:08:23,480 --> 00:08:27,410
it created an ami image for us and we

00:08:25,370 --> 00:08:33,710
logged into ec2 we could actually go and

00:08:27,410 --> 00:08:35,180
see that image oh but what I want to do

00:08:33,710 --> 00:08:36,830
now is I want to run the one that we

00:08:35,180 --> 00:08:41,229
just went over which is basically going

00:08:36,830 --> 00:08:41,229
to create an image that's more useful

00:08:43,090 --> 00:08:50,780
and we'll use that later here so this is

00:08:48,590 --> 00:08:53,300
going to as I mentioned it's going to

00:08:50,780 --> 00:08:56,420
actually install dancer on an ami and

00:08:53,300 --> 00:08:58,990
save it off for us so we'll let that run

00:08:56,420 --> 00:09:01,370
and come back to it in a minute here

00:08:58,990 --> 00:09:04,370
okay so as I mentioned you can do

00:09:01,370 --> 00:09:07,490
parallel builders arm dockers new things

00:09:04,370 --> 00:09:09,770
so this is an example of doing you know

00:09:07,490 --> 00:09:12,320
we're building on AMI and then also the

00:09:09,770 --> 00:09:13,970
same time creating exact same provision

00:09:12,320 --> 00:09:18,950
but saving it off to a docker image

00:09:13,970 --> 00:09:20,930
which is entirely possible to do let's

00:09:18,950 --> 00:09:22,570
talk a little bit post processors so as

00:09:20,930 --> 00:09:24,350
I mentioned this is important for

00:09:22,570 --> 00:09:25,730
there's all sorts of things you can do

00:09:24,350 --> 00:09:27,290
with post processors but the primary

00:09:25,730 --> 00:09:29,480
thing that I use them for is to save the

00:09:27,290 --> 00:09:31,250
image off somewhere um there's another

00:09:29,480 --> 00:09:34,339
service actually that hash Accord

00:09:31,250 --> 00:09:36,589
provides which is called Atlas they have

00:09:34,339 --> 00:09:38,480
a free and they also have a paid service

00:09:36,589 --> 00:09:41,420
but basically they allow you to set up a

00:09:38,480 --> 00:09:44,089
continuous pipeline so after we build an

00:09:41,420 --> 00:09:46,810
ami we will then run a post processor to

00:09:44,089 --> 00:09:49,490
say that am i off into the registry um

00:09:46,810 --> 00:09:53,180
then later with terraform will go and

00:09:49,490 --> 00:09:56,050
find that ami and use it to provision

00:09:53,180 --> 00:09:59,120
our environment or our infrastructure

00:09:56,050 --> 00:10:00,530
here's another one this one's really

00:09:59,120 --> 00:10:04,850
hard to read them realizing but

00:10:00,530 --> 00:10:06,770
basically this is a this is a post

00:10:04,850 --> 00:10:08,180
processor that takes a docker image

00:10:06,770 --> 00:10:10,670
after you've saved it and let's say you

00:10:08,180 --> 00:10:13,280
want to push it out to a doctor

00:10:10,670 --> 00:10:16,100
repository this one's using the Amazon

00:10:13,280 --> 00:10:19,120
ecs service so you can put it up there

00:10:16,100 --> 00:10:23,300
and Amazon ecs and then uh and then

00:10:19,120 --> 00:10:24,499
these you let ecs take it and deploy it

00:10:23,300 --> 00:10:27,169
for you

00:10:24,499 --> 00:10:31,459
okay so let's talk a little bit about

00:10:27,169 --> 00:10:35,629
terraform so as I mentioned terraform is

00:10:31,459 --> 00:10:37,459
a is another tool on 8 is a command line

00:10:35,629 --> 00:10:40,819
tool it's called terraform and it breeds

00:10:37,459 --> 00:10:42,889
a configuration file um there this

00:10:40,819 --> 00:10:44,929
configuration files is not primarily

00:10:42,889 --> 00:10:47,239
Jason although you can write it in JSON

00:10:44,929 --> 00:10:49,699
all of their documentation is using this

00:10:47,239 --> 00:10:52,549
sort of custom dsl that they've written

00:10:49,699 --> 00:10:55,069
it's not difficult to to read once you

00:10:52,549 --> 00:10:58,009
kind of get the gist of it primarily

00:10:55,069 --> 00:11:01,569
it's made of two basic components you

00:10:58,009 --> 00:11:04,099
have providers and you have resources a

00:11:01,569 --> 00:11:07,909
provider is just thing you're trying to

00:11:04,099 --> 00:11:11,779
integrate with many examples are like

00:11:07,909 --> 00:11:15,289
the Google cloud stuff or AWS and

00:11:11,779 --> 00:11:16,579
daugher a resource are individual

00:11:15,289 --> 00:11:20,539
components within there that are

00:11:16,579 --> 00:11:22,849
specific to that provider so a good

00:11:20,539 --> 00:11:24,409
example is like on Amazon you want to

00:11:22,849 --> 00:11:28,809
set up an instance or you want to set up

00:11:24,409 --> 00:11:31,609
an elastic load balancer many sorts of

00:11:28,809 --> 00:11:33,199
all the various security groups whatever

00:11:31,609 --> 00:11:37,899
you need to do this specific to Amazon

00:11:33,199 --> 00:11:41,449
are you can define it within a resource

00:11:37,899 --> 00:11:44,779
so here is a very basic terraform

00:11:41,449 --> 00:11:46,909
example um like I said there's a

00:11:44,779 --> 00:11:50,989
provider at the top where we're defining

00:11:46,909 --> 00:11:53,029
a few things and the region isn't

00:11:50,989 --> 00:11:55,879
important this is where you know where

00:11:53,029 --> 00:11:59,839
is this going to live what we're tying

00:11:55,879 --> 00:12:02,299
where instance is going to live and then

00:11:59,839 --> 00:12:04,249
we have a resource here which is

00:12:02,299 --> 00:12:06,319
basically what we're saying is going to

00:12:04,249 --> 00:12:09,319
use the resource AWS instance that's a

00:12:06,319 --> 00:12:12,259
very specific resource and then it's

00:12:09,319 --> 00:12:14,359
followed by the name of this thing and

00:12:12,259 --> 00:12:17,209
we can use that name later in variables

00:12:14,359 --> 00:12:19,339
that we reference and other resources so

00:12:17,209 --> 00:12:21,529
it exam I'll go over an example here

00:12:19,339 --> 00:12:26,419
where you can set up a security or you

00:12:21,529 --> 00:12:28,189
can set up lay a you can reference a

00:12:26,419 --> 00:12:31,999
security group into an instance or you

00:12:28,189 --> 00:12:33,979
can reference ELB you can set up a

00:12:31,999 --> 00:12:34,950
needle be the references a particular

00:12:33,979 --> 00:12:37,050
set of instances

00:12:34,950 --> 00:12:39,210
sorts of things so this one here we're

00:12:37,050 --> 00:12:41,910
using an ami that we've saved off

00:12:39,210 --> 00:12:45,170
somewhere and the instance type is an m3

00:12:41,910 --> 00:12:47,310
medium that's just an Amazon terminology

00:12:45,170 --> 00:12:49,260
they have various different types of

00:12:47,310 --> 00:12:54,180
instances that you can you can pay for

00:12:49,260 --> 00:12:56,910
some are free some are not it comes with

00:12:54,180 --> 00:12:58,200
a number of commands the primary one is

00:12:56,910 --> 00:12:59,670
terraform apply that's the one that

00:12:58,200 --> 00:13:02,820
actually will just go out and build

00:12:59,670 --> 00:13:05,190
things and then it also after you run

00:13:02,820 --> 00:13:06,270
apply it generates a state file the

00:13:05,190 --> 00:13:07,860
state file is important to keep around

00:13:06,270 --> 00:13:11,520
you want to check that into your your

00:13:07,860 --> 00:13:13,380
github repo or if you're using Atlas you

00:13:11,520 --> 00:13:15,180
want to push it out the atlas this is

00:13:13,380 --> 00:13:17,300
the state of your infrastructure what

00:13:15,180 --> 00:13:20,780
you're what is currently in production

00:13:17,300 --> 00:13:22,740
terraform destroy will destroy it

00:13:20,780 --> 00:13:24,390
validate is very similar to packer

00:13:22,740 --> 00:13:28,530
validate and then it's going to validate

00:13:24,390 --> 00:13:30,960
your new configuration file CARICOM plan

00:13:28,530 --> 00:13:34,650
is actually very useful um it will

00:13:30,960 --> 00:13:36,990
essentially you make a change to any of

00:13:34,650 --> 00:13:40,080
your configurations it will it will

00:13:36,990 --> 00:13:41,310
basically it'll show you what what the

00:13:40,080 --> 00:13:43,020
change is going to happen before it

00:13:41,310 --> 00:13:45,240
actually does it so you can also

00:13:43,020 --> 00:13:48,600
generate plan files which is kind of

00:13:45,240 --> 00:13:50,130
useful terraform push is another command

00:13:48,600 --> 00:13:53,370
where you can take the state file and

00:13:50,130 --> 00:13:55,800
push it to UM you just push up the Atlas

00:13:53,370 --> 00:13:57,960
essentially and they will use that state

00:13:55,800 --> 00:14:00,390
file so if you're setting up a

00:13:57,960 --> 00:14:02,280
continuous deployment um it would use

00:14:00,390 --> 00:14:06,290
that so it would detect when you get a

00:14:02,280 --> 00:14:09,900
new a new am I that's built by packer

00:14:06,290 --> 00:14:11,550
and then it would take that it verify

00:14:09,900 --> 00:14:14,670
that the state has changed and then it

00:14:11,550 --> 00:14:18,480
would provision that that neway my to

00:14:14,670 --> 00:14:20,910
production okay so here's an example as

00:14:18,480 --> 00:14:22,740
I mentioned of another resource of a

00:14:20,910 --> 00:14:26,550
security group it's a lot of details in

00:14:22,740 --> 00:14:28,110
there um but the primary thing is you

00:14:26,550 --> 00:14:31,950
know this is very specific to annas on

00:14:28,110 --> 00:14:34,080
all of these sorts of properties um you

00:14:31,950 --> 00:14:36,480
can set its you know that you can go and

00:14:34,080 --> 00:14:37,950
look at their documentation but

00:14:36,480 --> 00:14:40,440
basically most of the stuff they

00:14:37,950 --> 00:14:41,970
integrate with they support so like an

00:14:40,440 --> 00:14:44,670
Amazon secure groups important set up

00:14:41,970 --> 00:14:46,800
your ingress and egress rules in this

00:14:44,670 --> 00:14:48,250
particular one we're accepting traffic

00:14:46,800 --> 00:14:51,430
on port 80

00:14:48,250 --> 00:14:56,560
and we're allowing traffic out on 11 to

00:14:51,430 --> 00:14:58,240
11 here's an example of setting up an

00:14:56,560 --> 00:15:01,990
elastic load balancer which is just a

00:14:58,240 --> 00:15:04,630
load balancer we accept traffic on port

00:15:01,990 --> 00:15:10,870
443 and we are instances are running on

00:15:04,630 --> 00:15:12,250
8080 ok so one of the interesting things

00:15:10,870 --> 00:15:14,200
about Amazon's they also have these

00:15:12,250 --> 00:15:15,910
things which this actually works really

00:15:14,200 --> 00:15:19,750
nicely with terraform especially when

00:15:15,910 --> 00:15:21,820
you're trying to do hitless deploys they

00:15:19,750 --> 00:15:27,190
and a hitless deploys essentially when

00:15:21,820 --> 00:15:30,640
you're trying to not drop connections so

00:15:27,190 --> 00:15:32,320
when you are for example you have a new

00:15:30,640 --> 00:15:35,350
am i and you want to put it out in

00:15:32,320 --> 00:15:38,680
production you want to basically roll

00:15:35,350 --> 00:15:40,240
things out in such a way so that um you

00:15:38,680 --> 00:15:41,860
know the new ones come on first and then

00:15:40,240 --> 00:15:44,410
it kills off the old ones without

00:15:41,860 --> 00:15:46,870
dropping connections and so a nice side

00:15:44,410 --> 00:15:49,080
effect of using AWS launch

00:15:46,870 --> 00:15:51,790
configurations and we'll see shortly

00:15:49,080 --> 00:15:56,850
which goes with them is auto scaling

00:15:51,790 --> 00:15:59,680
groups you can you can do that um so

00:15:56,850 --> 00:16:01,900
here we were setting up in launch

00:15:59,680 --> 00:16:03,940
configuration and basically the whole

00:16:01,900 --> 00:16:07,570
point of it is you can set up a pool of

00:16:03,940 --> 00:16:11,200
instances um and you can you know it can

00:16:07,570 --> 00:16:13,500
auto scale accordingly so depending on

00:16:11,200 --> 00:16:19,089
various triggers you can set up on

00:16:13,500 --> 00:16:21,040
traffic needs or also deployments so in

00:16:19,089 --> 00:16:25,080
an auto scaling group you can set up

00:16:21,040 --> 00:16:27,790
like a minimum size a maximum size and

00:16:25,080 --> 00:16:29,170
this one's sort of basic in that it's

00:16:27,790 --> 00:16:32,020
not really doing any sort of like

00:16:29,170 --> 00:16:35,430
scaling other than we're using it for

00:16:32,020 --> 00:16:35,430
doing sort of a hitless deploy

00:16:36,620 --> 00:16:52,980
okay so why don't we go back to our live

00:16:42,900 --> 00:16:55,050
demo here okay and what I'm going to do

00:16:52,980 --> 00:17:03,450
is I'm going to actually run something

00:16:55,050 --> 00:17:04,830
I'm going to terraform plan and that's

00:17:03,450 --> 00:17:06,480
not going to come up very well because

00:17:04,830 --> 00:17:09,390
everything zoomed out but essentially

00:17:06,480 --> 00:17:12,290
what is what it's a me see if I caiman

00:17:09,390 --> 00:17:14,610
else are there what we're doing here is

00:17:12,290 --> 00:17:18,450
we're setting up an ex security groove

00:17:14,610 --> 00:17:21,930
we're setting up public key and we're

00:17:18,450 --> 00:17:25,580
setting an instance so if we do

00:17:21,930 --> 00:17:30,090
terraform apply we're going to actually

00:17:25,580 --> 00:17:34,080
create this and this will only take a

00:17:30,090 --> 00:17:36,600
couple seconds so it's going out

00:17:34,080 --> 00:17:44,910
grabbing the am I and creating this

00:17:36,600 --> 00:17:47,390
instance here and should only take 15

00:17:44,910 --> 00:17:47,390
seconds maybe

00:17:50,930 --> 00:17:54,380
I'll let that

00:17:55,410 --> 00:18:01,620
and was it doesn't go past 20 seconds

00:17:57,510 --> 00:18:04,700
there we go okay um so now we can run um

00:18:01,620 --> 00:18:07,800
as it says you can run terraform show

00:18:04,700 --> 00:18:18,000
and this is the state of our environment

00:18:07,800 --> 00:18:20,700
oh and go up here looking for a see how

00:18:18,000 --> 00:18:34,070
well I can do this is copy this public

00:18:20,700 --> 00:18:34,070
IP okay so let's just replace this guy

00:18:35,800 --> 00:18:42,500
so if I had to give it a second here

00:18:39,590 --> 00:18:45,260
hopefully it's up up it's not up it

00:18:42,500 --> 00:18:47,630
takes a second um but basically it is

00:18:45,260 --> 00:18:51,920
provision that dancer application that

00:18:47,630 --> 00:18:53,300
we have now the supervisor may still be

00:18:51,920 --> 00:18:55,190
or that the operating system may

00:18:53,300 --> 00:19:00,200
actually still other goes there we go

00:18:55,190 --> 00:19:09,320
okay so um now we have an actual live

00:19:00,200 --> 00:19:11,420
box okay so now go back to my mouse so

00:19:09,320 --> 00:19:12,830
the one thing i do not really have time

00:19:11,420 --> 00:19:16,760
to go over in this top it is Atlas

00:19:12,830 --> 00:19:19,100
itself um but essentially you can now

00:19:16,760 --> 00:19:20,450
you have the two tools that allow you to

00:19:19,100 --> 00:19:22,820
build a continuous deployment pipeline

00:19:20,450 --> 00:19:25,550
you can you know create an image with

00:19:22,820 --> 00:19:26,720
packer save it somewhere um and then you

00:19:25,550 --> 00:19:29,360
can you know with a little bit of

00:19:26,720 --> 00:19:31,880
scripting you can then use that am I get

00:19:29,360 --> 00:19:33,860
that am I well not am I whatever sort of

00:19:31,880 --> 00:19:36,260
environment you or image you've created

00:19:33,860 --> 00:19:39,560
you can use that to then use terraform

00:19:36,260 --> 00:19:41,570
to create your infrastructure Atlas is

00:19:39,560 --> 00:19:44,930
just a service that makes it easier oh

00:19:41,570 --> 00:19:48,640
so that's just something that you can go

00:19:44,930 --> 00:19:52,760
check out I will have links to this talk

00:19:48,640 --> 00:19:54,740
provided at that particular URL um and

00:19:52,760 --> 00:19:57,470
like I said I work for a company called

00:19:54,740 --> 00:19:58,580
mediamath we're always looking for just

00:19:57,470 --> 00:20:01,310
giving a little plug here we're always

00:19:58,580 --> 00:20:03,050
looking for good developers people who

00:20:01,310 --> 00:20:05,510
are interested and not just program but

00:20:03,050 --> 00:20:07,550
also the sorts of things like DevOps and

00:20:05,510 --> 00:20:09,080
then all these tools that I've been

00:20:07,550 --> 00:20:10,550
talking about are provided by a company

00:20:09,080 --> 00:20:14,570
called hoshi core and they're all open

00:20:10,550 --> 00:20:15,740
source and that is all I have to

00:20:14,570 --> 00:20:18,310
demonstrate so you won't have any

00:20:15,740 --> 00:20:18,310
questions

00:20:21,780 --> 00:20:29,770
Jim you just explained it it out the

00:20:25,110 --> 00:20:32,260
beautiful yes I yes so this is this talk

00:20:29,770 --> 00:20:37,480
is sort of assuming essentially an

00:20:32,260 --> 00:20:40,530
immutable deploy is um instead of you

00:20:37,480 --> 00:20:43,300
know deploying the application to I mean

00:20:40,530 --> 00:20:44,980
it's a loaded term but the general idea

00:20:43,300 --> 00:20:47,800
is instead of deploying the particular

00:20:44,980 --> 00:20:50,200
application and configurations to and

00:20:47,800 --> 00:20:55,570
already running on computer somewhere on

00:20:50,200 --> 00:21:00,820
and changing it you are essentially

00:20:55,570 --> 00:21:02,110
creating a an image um so the idea is in

00:21:00,820 --> 00:21:05,980
my examples here we're actually creating

00:21:02,110 --> 00:21:07,750
an image or a box a machine that is

00:21:05,980 --> 00:21:11,530
going to replace the machines that are

00:21:07,750 --> 00:21:12,520
in production so that is that is my

00:21:11,530 --> 00:21:14,380
definition or that sort of the

00:21:12,520 --> 00:21:19,530
definition I was running with with

00:21:14,380 --> 00:21:19,530
immutable to place yes

00:21:21,810 --> 00:21:30,030
well so yeah so this is the thing I'm I

00:21:24,930 --> 00:21:32,010
ideas vagrant as well um vagrants I've

00:21:30,030 --> 00:21:36,360
actually never really used vagrant for

00:21:32,010 --> 00:21:38,640
productions so my I kinda see vagrant is

00:21:36,360 --> 00:21:41,460
the tool that allows you to build out

00:21:38,640 --> 00:21:43,680
things for development but that's just

00:21:41,460 --> 00:21:45,810
me um I think you can probably use it

00:21:43,680 --> 00:21:48,120
for production I think Packer is they

00:21:45,810 --> 00:21:49,530
design Packer essentially to for the

00:21:48,120 --> 00:21:53,520
continuous deployment side of things um

00:21:49,530 --> 00:22:05,220
and creating images for production but

00:21:53,520 --> 00:22:07,050
the tools overlap yeah that's a great

00:22:05,220 --> 00:22:09,240
question i have not even explored that

00:22:07,050 --> 00:22:12,300
because everything we've done is all

00:22:09,240 --> 00:22:14,190
virtual but um I don't call me on it I

00:22:12,300 --> 00:22:20,200
believe you can do some of it but you'd

00:22:14,190 --> 00:22:25,640
have to go and look terrible

00:22:20,200 --> 00:22:29,890
okay well there you go all right I'm all

00:22:25,640 --> 00:22:29,890

YouTube URL: https://www.youtube.com/watch?v=sk-6OSb1QDA


