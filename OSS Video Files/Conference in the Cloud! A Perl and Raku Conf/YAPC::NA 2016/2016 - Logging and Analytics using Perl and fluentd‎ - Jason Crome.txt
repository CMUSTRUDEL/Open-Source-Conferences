Title: 2016 - Logging and Analytics using Perl and fluentdâ€Ž - Jason Crome
Publication date: 2016-06-27
Playlist: YAPC::NA 2016
Description: 
	
Captions: 
	00:00:01,850 --> 00:00:11,969
you hear me ok ok good morning everyone

00:00:09,170 --> 00:00:17,699
happy app seat to you everybody having a

00:00:11,969 --> 00:00:19,890
good conference I'm Jason chrome i'm

00:00:17,699 --> 00:00:25,590
here to talk to you about logging in

00:00:19,890 --> 00:00:29,070
analytics with pearl and fluent e so

00:00:25,590 --> 00:00:30,960
who's this talk for like to think that I

00:00:29,070 --> 00:00:33,690
have a little something for everybody

00:00:30,960 --> 00:00:35,910
today so if you want to know a little

00:00:33,690 --> 00:00:38,280
more about Enterprise logging then I got

00:00:35,910 --> 00:00:39,750
some stuff here for you today if you

00:00:38,280 --> 00:00:42,059
want to know more about structured

00:00:39,750 --> 00:00:45,390
logging and what it is I'll play a bit

00:00:42,059 --> 00:00:46,920
about that and give you some examples if

00:00:45,390 --> 00:00:49,620
you want to know more about fluent d I

00:00:46,920 --> 00:00:52,079
you'll see a little bit of what it is

00:00:49,620 --> 00:00:54,059
and what we're doing with it so I have

00:00:52,079 --> 00:00:55,829
some code some setup and a lot of

00:00:54,059 --> 00:01:00,300
discussion about what it is that we're

00:00:55,829 --> 00:01:02,550
doing see Who am I I'm project manager

00:01:00,300 --> 00:01:05,640
at all around the world I work for

00:01:02,550 --> 00:01:10,369
Curtis Pope and I'm the project manager

00:01:05,640 --> 00:01:12,930
for beer is anybody here heard of beer

00:01:10,369 --> 00:01:15,869
other than the two other people in the

00:01:12,930 --> 00:01:18,540
room that have worked on it here is a

00:01:15,869 --> 00:01:21,570
massively multiplayer online game that's

00:01:18,540 --> 00:01:22,979
written in perl and if you want to know

00:01:21,570 --> 00:01:24,750
more about the game i'll be happy to

00:01:22,979 --> 00:01:26,159
tell you all about it after the talk

00:01:24,750 --> 00:01:28,150
because i don't want to eat too much

00:01:26,159 --> 00:01:31,390
into this time

00:01:28,150 --> 00:01:33,850
but I did some other things with pearl

00:01:31,390 --> 00:01:37,330
prior to working with Curtis a dancer

00:01:33,850 --> 00:01:39,220
core team member and something I want

00:01:37,330 --> 00:01:42,550
you to know I'm I'm new to this too

00:01:39,220 --> 00:01:46,180
actually I'm not an expert in enterprise

00:01:42,550 --> 00:01:51,010
logging but I've been kind of figuring

00:01:46,180 --> 00:01:54,220
this out as I go along and as our as our

00:01:51,010 --> 00:01:58,180
needs have adapted I've had to learn a

00:01:54,220 --> 00:02:01,510
little more so to give you an overview

00:01:58,180 --> 00:02:05,350
of what the game is built with we use

00:02:01,510 --> 00:02:09,399
catalyst template toolkit deevak moose

00:02:05,350 --> 00:02:13,630
and postgres and made all levels of this

00:02:09,399 --> 00:02:15,070
we need to get information out and this

00:02:13,630 --> 00:02:17,020
one of the reasons we took fluent is

00:02:15,070 --> 00:02:20,110
because it is going to allow us to do

00:02:17,020 --> 00:02:22,000
that so a little reminder of what

00:02:20,110 --> 00:02:25,330
logging is the process of recording

00:02:22,000 --> 00:02:28,390
application act actions in state to a

00:02:25,330 --> 00:02:32,380
secondary interface for us is really

00:02:28,390 --> 00:02:35,170
really important to log the actions that

00:02:32,380 --> 00:02:38,709
our players are taking and it's equally

00:02:35,170 --> 00:02:40,630
as important for us to log the response

00:02:38,709 --> 00:02:43,840
that the game produces when the

00:02:40,630 --> 00:02:45,820
characters interact with it and this is

00:02:43,840 --> 00:02:50,290
all getting reported through fluent and

00:02:45,820 --> 00:02:52,570
eventually to a Postgres database the

00:02:50,290 --> 00:02:54,550
reasons why we log are really really

00:02:52,570 --> 00:02:57,820
important the most important of these is

00:02:54,550 --> 00:03:00,239
to prevent cheating anybody who's played

00:02:57,820 --> 00:03:02,530
a massively multiplayer online game

00:03:00,239 --> 00:03:03,850
realizing that cheating is pretty

00:03:02,530 --> 00:03:05,830
prevalent whether the game is very

00:03:03,850 --> 00:03:10,420
popular whether it's not popular at all

00:03:05,830 --> 00:03:12,220
or even mildly popular players like to

00:03:10,420 --> 00:03:15,970
get ahead and they like to get ahead by

00:03:12,220 --> 00:03:17,530
whatever means they can find the more

00:03:15,970 --> 00:03:19,810
information we have about what players

00:03:17,530 --> 00:03:22,989
are doing we can figure out the ways in

00:03:19,810 --> 00:03:27,060
which they are cheating we can fix those

00:03:22,989 --> 00:03:30,550
ways and react appropriately

00:03:27,060 --> 00:03:33,430
also important to us is we need help

00:03:30,550 --> 00:03:36,130
determining the effectiveness of our

00:03:33,430 --> 00:03:38,590
game content as developers on the

00:03:36,130 --> 00:03:39,670
technical end we've got a lot of

00:03:38,590 --> 00:03:41,080
different ways to measure the

00:03:39,670 --> 00:03:43,959
effectiveness of what it is that we're

00:03:41,080 --> 00:03:46,330
doing but our creative team is not quite

00:03:43,959 --> 00:03:48,430
so lucky and they spend a lot of time

00:03:46,330 --> 00:03:52,150
making these really elaborate missions

00:03:48,430 --> 00:03:53,530
and activities for players to do but

00:03:52,150 --> 00:03:55,209
they don't have a whole lot of tools at

00:03:53,530 --> 00:03:57,040
their disposal for getting feedback on

00:03:55,209 --> 00:03:59,800
them so they might have this really

00:03:57,040 --> 00:04:02,620
elaborate mission and nobody is taking

00:03:59,800 --> 00:04:04,600
this one really cool path through the

00:04:02,620 --> 00:04:06,370
mission graph and they don't understand

00:04:04,600 --> 00:04:08,530
why the more information that we can

00:04:06,370 --> 00:04:11,080
give them from the game the better off

00:04:08,530 --> 00:04:13,660
they are to make changes to that mission

00:04:11,080 --> 00:04:18,600
and create a more engaging experience

00:04:13,660 --> 00:04:20,980
for our players beer is free to play but

00:04:18,600 --> 00:04:24,340
we plan to make a lot of money with it

00:04:20,980 --> 00:04:25,960
and in order to do that we have to know

00:04:24,340 --> 00:04:28,210
what it is that players are spending

00:04:25,960 --> 00:04:29,590
money on and the circumstances under

00:04:28,210 --> 00:04:31,750
which they're spending money on these

00:04:29,590 --> 00:04:34,000
things and it's just as important to

00:04:31,750 --> 00:04:35,650
know what we have for sale that they're

00:04:34,000 --> 00:04:37,960
not spending money on so we can figure

00:04:35,650 --> 00:04:39,430
out why that's the case do we need to

00:04:37,960 --> 00:04:42,100
make adjustments to the things that we

00:04:39,430 --> 00:04:43,780
have for sale do we have to make some

00:04:42,100 --> 00:04:45,610
change to the game to make this item

00:04:43,780 --> 00:04:46,960
more worthwhile the more information we

00:04:45,610 --> 00:04:50,200
get out of the game the more that we can

00:04:46,960 --> 00:04:53,530
do this and one thing I'll talk a bit

00:04:50,200 --> 00:04:55,419
about later is by logging information

00:04:53,530 --> 00:04:58,419
for things that happen in the game it's

00:04:55,419 --> 00:05:02,520
going to allow us to dynamically change

00:04:58,419 --> 00:05:02,520
the difficulty of the game later on

00:05:03,810 --> 00:05:11,440
so I fluent deep to give you a little

00:05:07,150 --> 00:05:13,810
overview flew in D is a log collector or

00:05:11,440 --> 00:05:16,150
aggregator they they call themselves a

00:05:13,810 --> 00:05:17,830
unified logging layer and the important

00:05:16,150 --> 00:05:21,010
thing for us is that it supports

00:05:17,830 --> 00:05:24,220
structured logging but many of you are

00:05:21,010 --> 00:05:26,350
familiar with with logging is you call a

00:05:24,220 --> 00:05:28,630
method and you write an entry out to a

00:05:26,350 --> 00:05:31,240
log file or maybe it's just a row in a

00:05:28,630 --> 00:05:36,310
table in a database structure blogging

00:05:31,240 --> 00:05:39,010
is different because you have to in our

00:05:36,310 --> 00:05:40,750
case we have to record the state of

00:05:39,010 --> 00:05:43,390
what's happening at the time at event

00:05:40,750 --> 00:05:46,600
happens and what the state of something

00:05:43,390 --> 00:05:49,000
is at that point may differ based upon

00:05:46,600 --> 00:05:52,150
what that thing is am I locking in

00:05:49,000 --> 00:05:56,290
action that a character did I logging

00:05:52,150 --> 00:05:58,360
the outcome of a fight so having

00:05:56,290 --> 00:06:02,230
something that supports a rich data

00:05:58,360 --> 00:06:04,330
structure is really important to us and

00:06:02,230 --> 00:06:07,300
we can't easily model that with a flat

00:06:04,330 --> 00:06:08,860
line of text and while we can boil

00:06:07,300 --> 00:06:11,110
everything down to a flat line of text

00:06:08,860 --> 00:06:13,120
it's not really going to be easily

00:06:11,110 --> 00:06:16,780
parsable and it's going to be a lot more

00:06:13,120 --> 00:06:19,750
work than it's worth fluent e allows us

00:06:16,780 --> 00:06:21,460
to log from any layer and our stack we

00:06:19,750 --> 00:06:24,430
can log from the front end we can log

00:06:21,460 --> 00:06:26,050
from de Becque catalyst it doesn't

00:06:24,430 --> 00:06:30,100
matter it's all pretty much the same for

00:06:26,050 --> 00:06:32,020
us it's asynchronous which is nice we

00:06:30,100 --> 00:06:35,260
can fire off a log message and we can

00:06:32,020 --> 00:06:38,140
forget about it it's cluster abell it's

00:06:35,260 --> 00:06:40,000
expandable and very important for us

00:06:38,140 --> 00:06:42,250
right now because we're not making any

00:06:40,000 --> 00:06:44,110
money on the game it's self hosted we

00:06:42,250 --> 00:06:45,580
don't have to pay anybody to run fluent

00:06:44,110 --> 00:06:49,180
day we can just throw it on one of our

00:06:45,580 --> 00:06:52,300
development servers its memory friendly

00:06:49,180 --> 00:06:55,980
it's got built in reliability and it's

00:06:52,300 --> 00:06:55,980
super super easy to set up

00:06:56,039 --> 00:07:00,909
it's very expandable because it's

00:06:58,870 --> 00:07:06,849
written in Ruby and if you don't like

00:07:00,909 --> 00:07:10,629
Ruby might not like fluent d however the

00:07:06,849 --> 00:07:13,030
guts of fluency are written in C so it

00:07:10,629 --> 00:07:16,300
is actually very very fast and very very

00:07:13,030 --> 00:07:19,509
lightweight if you need to expand it you

00:07:16,300 --> 00:07:22,990
can do so with Ruby it also has a very

00:07:19,509 --> 00:07:24,729
rich set of inputs and outputs out of

00:07:22,990 --> 00:07:25,870
the box so chances are whatever you're

00:07:24,729 --> 00:07:28,180
trying to put into it whatever you're

00:07:25,870 --> 00:07:30,669
trying to get out of fluent probably

00:07:28,180 --> 00:07:33,039
already has it another reason not to use

00:07:30,669 --> 00:07:36,370
fluent II for most projects honestly it

00:07:33,039 --> 00:07:38,529
is probably overkill definitely for any

00:07:36,370 --> 00:07:41,500
pet or small projects that you're doing

00:07:38,529 --> 00:07:43,419
but if you if you have some really

00:07:41,500 --> 00:07:45,520
serious and really complex logging needs

00:07:43,419 --> 00:07:48,789
I would highly recommend taking a look

00:07:45,520 --> 00:07:50,740
at it I'd be a little remiss in not

00:07:48,789 --> 00:07:52,900
mentioning some of the alternatives most

00:07:50,740 --> 00:07:55,569
of you are probably familiar with these

00:07:52,900 --> 00:07:58,689
in one way shape or form logstash blanc

00:07:55,569 --> 00:08:01,900
log lee paper trail log lean paper trail

00:07:58,689 --> 00:08:03,669
both being hosted services not really

00:08:01,900 --> 00:08:05,529
going to talk a lot about them but just

00:08:03,669 --> 00:08:11,259
so you know some of the other products

00:08:05,529 --> 00:08:13,810
this is in the same category as the way

00:08:11,259 --> 00:08:18,729
that we funnel information into fluency

00:08:13,810 --> 00:08:21,009
is through log for Pearl and the reason

00:08:18,729 --> 00:08:23,229
why we use it no frankly it does what we

00:08:21,009 --> 00:08:24,939
need it has everything in the kitchen

00:08:23,229 --> 00:08:27,699
sink so anything that we'd want to do

00:08:24,939 --> 00:08:30,159
with it down the road it already does it

00:08:27,699 --> 00:08:33,719
easily integrates with catalyst and

00:08:30,159 --> 00:08:36,339
there's already an offender for fluently

00:08:33,719 --> 00:08:37,719
we were all prepared to write one and

00:08:36,339 --> 00:08:40,060
then we actually just kind of stumbled

00:08:37,719 --> 00:08:42,190
accidentally I think across the fluent

00:08:40,060 --> 00:08:43,750
the offender for log for parole so we'd

00:08:42,190 --> 00:08:45,190
already had a bunch of we'd already had

00:08:43,750 --> 00:08:47,880
a bunch of logging code that had been

00:08:45,190 --> 00:08:50,769
built up around log for Pearl anyway and

00:08:47,880 --> 00:08:54,870
not having to go back and change that

00:08:50,769 --> 00:08:54,870
was was actually a huge plus for us

00:08:55,310 --> 00:09:00,899
the things that we directly log from now

00:08:57,920 --> 00:09:04,259
deevak a lot of other mousse based

00:09:00,899 --> 00:09:06,720
classes we have a role that we can

00:09:04,259 --> 00:09:10,740
insert in any moose class that allows us

00:09:06,720 --> 00:09:14,910
to log from it catalyst already has

00:09:10,740 --> 00:09:18,000
logged for thorough plugged into it we

00:09:14,910 --> 00:09:21,089
can but I don't believe that we do right

00:09:18,000 --> 00:09:23,699
now can even invoke the log from a

00:09:21,089 --> 00:09:26,730
template to ellicott template and then

00:09:23,699 --> 00:09:29,279
eventually from other levels of our

00:09:26,730 --> 00:09:32,790
stack as our infrastructure grows will

00:09:29,279 --> 00:09:34,470
be able to sell messages from syslog and

00:09:32,790 --> 00:09:37,889
other system services directly through

00:09:34,470 --> 00:09:38,910
fluent d to one of its offenders things

00:09:37,889 --> 00:09:40,319
that we're going to do on the backend

00:09:38,910 --> 00:09:42,600
that I'll talk about some of these a

00:09:40,319 --> 00:09:44,850
little bit later is being able to wire

00:09:42,600 --> 00:09:47,970
certain types events from our servers to

00:09:44,850 --> 00:09:49,620
set off alerts and I goes and as our

00:09:47,970 --> 00:09:51,500
logs grow and as we have to find

00:09:49,620 --> 00:09:53,910
information we're going to want to type

00:09:51,500 --> 00:09:59,610
products like elastic search to help us

00:09:53,910 --> 00:10:03,000
farm information out of this again so

00:09:59,610 --> 00:10:05,660
what do we log in the game we log all

00:10:03,000 --> 00:10:05,660
the things

00:10:09,440 --> 00:10:17,020
more specifically we log everything

00:10:13,120 --> 00:10:21,170
seriously and that that is the goal of

00:10:17,020 --> 00:10:24,380
this with an massively multiplayer

00:10:21,170 --> 00:10:26,510
online game of any sort you've got to

00:10:24,380 --> 00:10:28,340
log all sorts of things that you might

00:10:26,510 --> 00:10:29,810
not otherwise care about because you

00:10:28,340 --> 00:10:33,560
never know when they are going to be

00:10:29,810 --> 00:10:36,410
important the other reason why this is

00:10:33,560 --> 00:10:39,220
important is nobody on this team our

00:10:36,410 --> 00:10:42,020
veteran game designers it all in fact

00:10:39,220 --> 00:10:44,270
some of the people on this team not

00:10:42,020 --> 00:10:46,850
naming any names or not really any game

00:10:44,270 --> 00:10:49,790
players either so we're all kind of

00:10:46,850 --> 00:10:51,260
figuring this out as we go along and the

00:10:49,790 --> 00:10:53,600
more information that we have at our

00:10:51,260 --> 00:10:57,010
disposal the better decisions that we

00:10:53,600 --> 00:10:59,690
can make the more balanced and the more

00:10:57,010 --> 00:11:05,840
more engaging game that we can make for

00:10:59,690 --> 00:11:08,720
our players this is a really small list

00:11:05,840 --> 00:11:11,840
of all the things that we care about in

00:11:08,720 --> 00:11:15,110
the game and it's all over the place it

00:11:11,840 --> 00:11:16,310
goes from from a character login errors

00:11:15,110 --> 00:11:19,100
and warnings which should be pretty

00:11:16,310 --> 00:11:22,280
obvious different events that happen

00:11:19,100 --> 00:11:25,250
with characters actions randomness which

00:11:22,280 --> 00:11:28,610
i'll come back to any courses they take

00:11:25,250 --> 00:11:31,430
erl swooping attempts chat hacking which

00:11:28,610 --> 00:11:34,340
is been which has been known to happen

00:11:31,430 --> 00:11:38,630
in games transfers of items auction

00:11:34,340 --> 00:11:43,100
house transactions and then eventually

00:11:38,630 --> 00:11:45,500
what we want to tie to this is as the

00:11:43,100 --> 00:11:47,090
game grows we have a lot of a be testing

00:11:45,500 --> 00:11:48,740
that we need to do and we even want to

00:11:47,090 --> 00:11:51,460
filter the results of the a/b testing

00:11:48,740 --> 00:11:51,460
through fluent e

00:11:52,329 --> 00:11:56,290
so I mentioned logging randomness which

00:11:54,610 --> 00:12:00,819
may seem a little odd to all of you but

00:11:56,290 --> 00:12:02,649
please hear me out on this one anything

00:12:00,819 --> 00:12:04,509
that is left up to chance in a game like

00:12:02,649 --> 00:12:07,420
this and there's a lot of things that

00:12:04,509 --> 00:12:08,709
are left up the chance we need to log

00:12:07,420 --> 00:12:11,350
these things to figure out the

00:12:08,709 --> 00:12:14,980
effectiveness either through the methods

00:12:11,350 --> 00:12:18,009
which we are coming up with these random

00:12:14,980 --> 00:12:20,230
determinations through the module even

00:12:18,009 --> 00:12:22,929
that we're using to produce the random

00:12:20,230 --> 00:12:25,209
numbers so having all of this

00:12:22,929 --> 00:12:27,819
encapsulated and easily la ghable gives

00:12:25,209 --> 00:12:30,369
us a really good tool with which to

00:12:27,819 --> 00:12:33,459
measure the effectiveness of random

00:12:30,369 --> 00:12:36,040
events in the game so we created a role

00:12:33,459 --> 00:12:37,839
for this via roll random and anytime

00:12:36,040 --> 00:12:39,879
that a random number needs to be

00:12:37,839 --> 00:12:42,639
produced either in combat or through a

00:12:39,879 --> 00:12:45,249
skill check or a stat check this role

00:12:42,639 --> 00:12:46,809
can be included and any of the methods

00:12:45,249 --> 00:12:48,790
that are provided by the role can be

00:12:46,809 --> 00:12:52,660
used in each one of those methods are

00:12:48,790 --> 00:12:54,549
logged as of right now we're still just

00:12:52,660 --> 00:12:57,459
collecting information we're still

00:12:54,549 --> 00:13:00,489
heavily in development and hoping hoping

00:12:57,459 --> 00:13:01,869
to test by October so the only

00:13:00,489 --> 00:13:03,549
information that we have is what we've

00:13:01,869 --> 00:13:05,079
produced in development and this is

00:13:03,549 --> 00:13:07,449
going to get really interesting as soon

00:13:05,079 --> 00:13:09,040
as we actually have real players in the

00:13:07,449 --> 00:13:15,389
game so we can see what it is players

00:13:09,040 --> 00:13:17,739
are actually doing by having this

00:13:15,389 --> 00:13:20,559
encapsulated and easily laga ball and

00:13:17,739 --> 00:13:22,419
measurable it allows us to easily modify

00:13:20,559 --> 00:13:24,519
the difficulty of all the roles later

00:13:22,419 --> 00:13:26,980
methods that we're going to do that I'll

00:13:24,519 --> 00:13:28,660
explain in a little bit but it lets us

00:13:26,980 --> 00:13:30,429
change the manner in which we generate

00:13:28,660 --> 00:13:34,119
roles the way that we've always done

00:13:30,429 --> 00:13:36,549
this so far is is if we need a skill

00:13:34,119 --> 00:13:39,040
check there's just like one check you

00:13:36,549 --> 00:13:41,439
give it a probability a range of things

00:13:39,040 --> 00:13:43,709
to roll through and it gives you a

00:13:41,439 --> 00:13:46,480
number back and do you succeed or fail

00:13:43,709 --> 00:13:48,970
our creative team lately has been saying

00:13:46,480 --> 00:13:50,860
well and all or nothing approach is

00:13:48,970 --> 00:13:53,110
probably not going to be sufficient for

00:13:50,860 --> 00:13:56,410
the types of things that we have going

00:13:53,110 --> 00:13:58,509
forward you know maybe it may be you

00:13:56,410 --> 00:14:01,209
know we want to let the player have you

00:13:58,509 --> 00:14:03,340
know five rolls as it were and we need

00:14:01,209 --> 00:14:05,320
three of those to succeed

00:14:03,340 --> 00:14:08,350
we couldn't do this if we didn't

00:14:05,320 --> 00:14:10,690
encapsulate that logic and if we go

00:14:08,350 --> 00:14:12,700
ahead and make this change we need to

00:14:10,690 --> 00:14:15,040
see was this the right change to make

00:14:12,700 --> 00:14:23,620
again we have encapsulated we can easily

00:14:15,040 --> 00:14:25,360
log it and it allows us to do that we

00:14:23,620 --> 00:14:27,640
have our own set of classes which I'll

00:14:25,360 --> 00:14:29,590
explain for producing the log entries

00:14:27,640 --> 00:14:32,110
and once this is done everything gets

00:14:29,590 --> 00:14:34,300
shoved into log for parole at that point

00:14:32,110 --> 00:14:36,580
log for Pearl then sends it through

00:14:34,300 --> 00:14:38,110
fluent D and then it gets written out to

00:14:36,580 --> 00:14:41,530
one of the fluent d offenders that we

00:14:38,110 --> 00:14:43,840
use all the log methods that are

00:14:41,530 --> 00:14:45,550
provided by catalyst automatically gets

00:14:43,840 --> 00:14:47,500
sent through fluent d as well so that

00:14:45,550 --> 00:14:50,620
will get written to any of the outputs

00:14:47,500 --> 00:14:54,340
that we have configured and the logs are

00:14:50,620 --> 00:14:57,280
structured data our logging classes

00:14:54,340 --> 00:14:59,350
produce a pearl data structure that gets

00:14:57,280 --> 00:15:02,020
converted to Jason if it gets sent on to

00:14:59,350 --> 00:15:03,850
fluently if it's a local developer

00:15:02,020 --> 00:15:05,650
working and they don't happen to have a

00:15:03,850 --> 00:15:07,060
local install affluent d it's going to

00:15:05,650 --> 00:15:13,540
get string ified i'll show you how that

00:15:07,060 --> 00:15:17,140
happens do all of this happens because

00:15:13,540 --> 00:15:18,790
of log message structured it was a

00:15:17,140 --> 00:15:21,310
really good starting point for us for

00:15:18,790 --> 00:15:25,360
producing structured log messages but it

00:15:21,310 --> 00:15:27,280
wasn't perfect it had some problems when

00:15:25,360 --> 00:15:30,100
you pass long message structured a data

00:15:27,280 --> 00:15:33,940
structure it automatically logs all the

00:15:30,100 --> 00:15:35,590
attributes that's a problem because some

00:15:33,940 --> 00:15:38,380
of the things that we need to log are

00:15:35,590 --> 00:15:40,150
pretty massive in size but we really

00:15:38,380 --> 00:15:42,070
only needed a couple of things for the

00:15:40,150 --> 00:15:43,660
type of we only needed a couple of

00:15:42,070 --> 00:15:46,270
attributes for the types of things that

00:15:43,660 --> 00:15:47,740
we were logging and the other part of

00:15:46,270 --> 00:15:51,600
the problem was log message structure

00:15:47,740 --> 00:15:56,020
does not let attributes contain objects

00:15:51,600 --> 00:15:58,500
any of you who know Curtis and the way

00:15:56,020 --> 00:16:02,440
that he likes to design software

00:15:58,500 --> 00:16:05,260
everything is is very nicely organized

00:16:02,440 --> 00:16:07,720
into objects so the easiest way for us

00:16:05,260 --> 00:16:10,390
to log is to send an object to the

00:16:07,720 --> 00:16:12,280
logger and if we were automatically

00:16:10,390 --> 00:16:15,550
logging all those attributes it would be

00:16:12,280 --> 00:16:16,600
a problem a great example is a lot of

00:16:15,550 --> 00:16:18,730
things that we're logging

00:16:16,600 --> 00:16:20,199
need certain information about the

00:16:18,730 --> 00:16:22,750
character it needs to know the

00:16:20,199 --> 00:16:24,519
characters current stats at the time

00:16:22,750 --> 00:16:26,889
that it happened if it's combat it needs

00:16:24,519 --> 00:16:28,899
to know you know what the players health

00:16:26,889 --> 00:16:31,149
is at the time that this event happened

00:16:28,899 --> 00:16:32,860
but we only need a couple of things we

00:16:31,149 --> 00:16:34,779
had a lot of character data you know

00:16:32,860 --> 00:16:36,310
including the weapons that their that

00:16:34,779 --> 00:16:38,019
they're using right now the ships that

00:16:36,310 --> 00:16:39,730
they own there's a lot of things there

00:16:38,019 --> 00:16:41,529
we don't want all of that we just want

00:16:39,730 --> 00:16:45,819
very very few pieces in any one

00:16:41,529 --> 00:16:49,380
particular point in time so our solution

00:16:45,819 --> 00:16:53,139
was coming up with veer roll log event

00:16:49,380 --> 00:16:56,440
and this in combination with a special

00:16:53,139 --> 00:16:58,660
trait that we use allows us to pass in

00:16:56,440 --> 00:17:01,269
an object and some other information at

00:16:58,660 --> 00:17:02,860
ignore everything that we don't want and

00:17:01,269 --> 00:17:06,549
what's really nice about the solution to

00:17:02,860 --> 00:17:08,919
is at the attribute level we've made it

00:17:06,549 --> 00:17:13,959
so that things will only log at a given

00:17:08,919 --> 00:17:16,329
level of verbosity so we care about how

00:17:13,959 --> 00:17:18,130
detailed our logs are in certain cases

00:17:16,329 --> 00:17:20,650
and so we have different verbosity

00:17:18,130 --> 00:17:26,230
levels everything from off to a little

00:17:20,650 --> 00:17:28,539
to a lot and the other nice thing that

00:17:26,230 --> 00:17:31,390
your log roll event has provided us is

00:17:28,539 --> 00:17:33,580
that we can change what we care about

00:17:31,390 --> 00:17:35,590
with logging without actually changing

00:17:33,580 --> 00:17:39,850
any of the logging calls and the

00:17:35,590 --> 00:17:45,789
information in the game so if we're

00:17:39,850 --> 00:17:49,690
logging randomness better example we're

00:17:45,789 --> 00:17:51,610
logging an attack in combat and for a

00:17:49,690 --> 00:17:53,590
while we only care about you know what

00:17:51,610 --> 00:17:55,210
the players current stats are and how

00:17:53,590 --> 00:17:58,929
much damage they do at that one point in

00:17:55,210 --> 00:18:01,240
time if later we decide that we also

00:17:58,929 --> 00:18:03,070
need to get more information about the

00:18:01,240 --> 00:18:06,400
weapons that the player is using at the

00:18:03,070 --> 00:18:07,900
time that this log entries is done we

00:18:06,400 --> 00:18:09,970
don't have to change any of the

00:18:07,900 --> 00:18:12,640
individual calls to log event in our

00:18:09,970 --> 00:18:15,130
code base we can actually go back to the

00:18:12,640 --> 00:18:16,659
definition of the log event and tell it

00:18:15,130 --> 00:18:19,299
that we want more information going

00:18:16,659 --> 00:18:21,280
forward so we can actually add or move

00:18:19,299 --> 00:18:22,759
information without changing any of the

00:18:21,280 --> 00:18:29,959
implementation anywhere

00:18:22,759 --> 00:18:32,329
which is a huge win for us apologies if

00:18:29,959 --> 00:18:35,589
this is a little hard to read but I

00:18:32,329 --> 00:18:38,089
chopped out some of the relevant bits of

00:18:35,589 --> 00:18:41,149
one of our particular log event rolls

00:18:38,089 --> 00:18:43,849
and this show is that we're passing it

00:18:41,149 --> 00:18:48,349
that this log event expects a character

00:18:43,849 --> 00:18:50,599
object but we are only caring about one

00:18:48,349 --> 00:18:53,119
particular trait of that character

00:18:50,599 --> 00:18:55,759
object in this case an identifier known

00:18:53,119 --> 00:18:57,289
as a slug and we know this is the one

00:18:55,759 --> 00:18:58,759
that we care about because we've given

00:18:57,289 --> 00:19:06,259
it the special trait that we've created

00:18:58,759 --> 00:19:08,419
called locked so I talked about

00:19:06,259 --> 00:19:09,889
randomness a couple of times now so I

00:19:08,419 --> 00:19:13,009
want to show you one of the

00:19:09,889 --> 00:19:15,829
implementations of this in veer role

00:19:13,009 --> 00:19:17,749
random we have this attempt to method

00:19:15,829 --> 00:19:22,579
and it looks pretty straightforward we

00:19:17,749 --> 00:19:24,469
generate a random number and we compare

00:19:22,579 --> 00:19:26,239
that random number to the chance we have

00:19:24,469 --> 00:19:29,989
its success and we determined does it

00:19:26,239 --> 00:19:33,799
succeed does it fail and if so it

00:19:29,989 --> 00:19:35,509
invokes our log event method with the

00:19:33,799 --> 00:19:38,569
type of event it is and some other

00:19:35,509 --> 00:19:41,690
information and then our returns to

00:19:38,569 --> 00:19:44,179
whoever called it and the implementation

00:19:41,690 --> 00:19:46,099
for this again I apologize it's hard to

00:19:44,179 --> 00:19:50,749
read but it's pretty straightforward

00:19:46,099 --> 00:19:53,449
it's just a moose class we include that

00:19:50,749 --> 00:19:56,149
include the log event roll and the log

00:19:53,449 --> 00:19:58,339
trait that we used and just like

00:19:56,149 --> 00:20:00,589
defining any other moves class we define

00:19:58,339 --> 00:20:02,359
the things that we care about and that's

00:20:00,589 --> 00:20:05,539
it that's what adding a new logging

00:20:02,359 --> 00:20:06,949
event is in our system it's really

00:20:05,539 --> 00:20:09,379
really straightforward if you can write

00:20:06,949 --> 00:20:13,059
a basic moose class you can add a type

00:20:09,379 --> 00:20:13,059
of logging event to our logging system

00:20:16,680 --> 00:20:25,540
give you a more complicated example in

00:20:21,780 --> 00:20:27,940
virar we have any everything runs

00:20:25,540 --> 00:20:30,130
through an exchange and that's when in

00:20:27,940 --> 00:20:32,500
an exchange is just exchanging one type

00:20:30,130 --> 00:20:34,660
of resource for another that resource

00:20:32,500 --> 00:20:38,650
might be in-game money for an item or a

00:20:34,660 --> 00:20:41,800
weapon it could be an amount of in-game

00:20:38,650 --> 00:20:44,230
money for a university course to get a

00:20:41,800 --> 00:20:47,650
player a new skill it might be

00:20:44,230 --> 00:20:49,120
exchanging one item between players but

00:20:47,650 --> 00:20:54,130
all of this gets funneled through

00:20:49,120 --> 00:20:56,380
oneexchange method and this is just one

00:20:54,130 --> 00:20:58,960
example that we have in the game where a

00:20:56,380 --> 00:21:07,030
character purchases a visa to travel to

00:20:58,960 --> 00:21:08,620
another nation station and again it's

00:21:07,030 --> 00:21:12,850
getting a little more a little harder to

00:21:08,620 --> 00:21:15,570
see but it's just another moose class

00:21:12,850 --> 00:21:17,710
this one a little more complicated and

00:21:15,570 --> 00:21:21,070
we include a couple of different things

00:21:17,710 --> 00:21:22,540
we include our log of n roll but we have

00:21:21,070 --> 00:21:24,640
some other roles there that you see

00:21:22,540 --> 00:21:27,910
character character location and

00:21:24,640 --> 00:21:29,830
character vitals we have a lot of canned

00:21:27,910 --> 00:21:31,960
rolls that we've created that

00:21:29,830 --> 00:21:34,420
automatically know to even pick apart

00:21:31,960 --> 00:21:36,280
character object to say that we care

00:21:34,420 --> 00:21:38,620
about only these specific things about

00:21:36,280 --> 00:21:40,480
the character so instead of making our

00:21:38,620 --> 00:21:42,010
class definition more complex we can

00:21:40,480 --> 00:21:45,600
just include one of these rolls and it

00:21:42,010 --> 00:21:45,600
even does some of that hard work for us

00:21:47,930 --> 00:21:53,040
and the rest of it is really not all

00:21:50,910 --> 00:21:55,290
that complicated it's again just a

00:21:53,040 --> 00:21:57,480
really straightforward moose class that

00:21:55,290 --> 00:22:06,720
defines what we care about in this log

00:21:57,480 --> 00:22:09,570
entry and how we want it to behave one

00:22:06,720 --> 00:22:11,670
final thing I've already thrown a couple

00:22:09,570 --> 00:22:13,380
of examples at you this one's a little

00:22:11,670 --> 00:22:15,060
bit different because if you remember a

00:22:13,380 --> 00:22:18,060
few minutes ago I mentioned logging

00:22:15,060 --> 00:22:19,860
verbosity this is something that we have

00:22:18,060 --> 00:22:25,020
at the end of our route controller and

00:22:19,860 --> 00:22:27,270
catalyst for access logging and this is

00:22:25,020 --> 00:22:30,360
important to us because we want to get

00:22:27,270 --> 00:22:33,330
an estimate or a pretty good idea of the

00:22:30,360 --> 00:22:36,870
time that is taking the game to finish a

00:22:33,330 --> 00:22:39,390
request start to finish and so at the

00:22:36,870 --> 00:22:41,190
very end of our route controller we have

00:22:39,390 --> 00:22:46,110
this log event method and it captures

00:22:41,190 --> 00:22:48,170
some information if you look at the

00:22:46,110 --> 00:22:51,570
definition of this log event though

00:22:48,170 --> 00:22:57,180
you'll see this one is a little more

00:22:51,570 --> 00:22:59,460
special the UA than other classes that

00:22:57,180 --> 00:23:02,820
we've defined it's got a log level of

00:22:59,460 --> 00:23:05,760
two there which means that in our game

00:23:02,820 --> 00:23:07,560
configuration this particular piece of

00:23:05,760 --> 00:23:09,120
information is only going to show up in

00:23:07,560 --> 00:23:10,860
the logs if we have the verbosity

00:23:09,120 --> 00:23:15,480
cranked up to two in this particular

00:23:10,860 --> 00:23:17,580
case and in catalyst in our catalyst

00:23:15,480 --> 00:23:20,370
configuration file we've got a listing

00:23:17,580 --> 00:23:23,250
of all the possible locking events that

00:23:20,370 --> 00:23:27,210
are available to us and what we want the

00:23:23,250 --> 00:23:29,700
level of verbosity to be in our verdict

00:23:27,210 --> 00:23:32,010
on file which everybody gets every

00:23:29,700 --> 00:23:34,710
server every developer we have what all

00:23:32,010 --> 00:23:36,030
the defaults are and each developer then

00:23:34,710 --> 00:23:39,050
for whatever it is that they're

00:23:36,030 --> 00:23:42,000
developing testing or even on our

00:23:39,050 --> 00:23:45,150
development production servers we have

00:23:42,000 --> 00:23:47,220
the ability then to override that in our

00:23:45,150 --> 00:23:48,840
local configuration file so if we

00:23:47,220 --> 00:23:50,760
temporarily need to get more information

00:23:48,840 --> 00:23:54,290
about one thing all we have to do is

00:23:50,760 --> 00:23:54,290
increase the verbosity level

00:23:56,710 --> 00:24:00,800
with regards to verbosity there's two

00:23:59,270 --> 00:24:02,570
things that we care about one of which

00:24:00,800 --> 00:24:04,250
we've implemented one of which we

00:24:02,570 --> 00:24:06,910
haven't had to yet that's overall

00:24:04,250 --> 00:24:09,440
verbosity versus individual verbosity

00:24:06,910 --> 00:24:12,470
overall is what we care about now it's

00:24:09,440 --> 00:24:15,440
what what is the game in whole doing how

00:24:12,470 --> 00:24:16,850
much information is it logging how much

00:24:15,440 --> 00:24:18,620
information are we getting out of combat

00:24:16,850 --> 00:24:24,770
how much are we getting out of the

00:24:18,620 --> 00:24:27,590
auction house individual logging is a

00:24:24,770 --> 00:24:29,510
future feature that we have planned and

00:24:27,590 --> 00:24:31,820
it's one of those things that we're

00:24:29,510 --> 00:24:34,370
going to need to turn on in certain

00:24:31,820 --> 00:24:36,080
select instances mostly when we're

00:24:34,370 --> 00:24:41,140
concerned that somebody is cheating or

00:24:36,080 --> 00:24:43,700
when somebody is when somebody is

00:24:41,140 --> 00:24:45,260
accused of harassing another player if

00:24:43,700 --> 00:24:48,230
there's something that we might have to

00:24:45,260 --> 00:24:50,060
step in and take information on then you

00:24:48,230 --> 00:24:52,010
know we actually have to have a smoking

00:24:50,060 --> 00:24:56,810
gun so that we don't act upon hearsay

00:24:52,010 --> 00:24:58,550
information and like I mentioned

00:24:56,810 --> 00:25:01,820
controlling the level of verbosity is

00:24:58,550 --> 00:25:05,300
pretty easy this is an excerpt from our

00:25:01,820 --> 00:25:08,210
beer comp file and catalyst and it's

00:25:05,300 --> 00:25:09,890
this really simple to see access log is

00:25:08,210 --> 00:25:12,130
what we care the most about so we've got

00:25:09,890 --> 00:25:15,140
the highest level of verbosity on that

00:25:12,130 --> 00:25:17,590
we have the lowest level of verbosity on

00:25:15,140 --> 00:25:20,480
exchange if you look down a little bit

00:25:17,590 --> 00:25:24,430
we log scavenging attempts and the ruins

00:25:20,480 --> 00:25:27,320
we don't really care how that turns out

00:25:24,430 --> 00:25:29,030
so it's really pretty flexible and

00:25:27,320 --> 00:25:30,590
really easy for us to control the level

00:25:29,030 --> 00:25:33,220
of information that we're getting out of

00:25:30,590 --> 00:25:36,220
the game on a subsystem by subsystem

00:25:33,220 --> 00:25:36,220
basis

00:25:37,049 --> 00:25:43,840
so I've run it into the ground about how

00:25:42,159 --> 00:25:46,179
we login what we're logging so where

00:25:43,840 --> 00:25:48,039
does all this information go well if

00:25:46,179 --> 00:25:49,509
you're a developer you probably don't

00:25:48,039 --> 00:25:51,730
want to have to worry about setting up

00:25:49,509 --> 00:25:53,139
fluent on your system and so we actually

00:25:51,730 --> 00:25:55,450
just write it to the local file system

00:25:53,139 --> 00:25:58,809
like most other logging the year

00:25:55,450 --> 00:26:02,289
accustomed to doing for our development

00:25:58,809 --> 00:26:03,730
and eventually production servers it's

00:26:02,289 --> 00:26:07,480
going to get routed through fluent d to

00:26:03,730 --> 00:26:11,350
postgres if a developer wants to set up

00:26:07,480 --> 00:26:13,090
fluent d they're welcome to do so and

00:26:11,350 --> 00:26:15,370
all they have to do is change their log

00:26:13,090 --> 00:26:19,299
for parole offenders to say go to fluent

00:26:15,370 --> 00:26:21,429
not the local file system and if you

00:26:19,299 --> 00:26:24,460
want to do both fluence nice it lets you

00:26:21,429 --> 00:26:26,860
set up multiple outputs the developers

00:26:24,460 --> 00:26:29,440
if they even wanted to could log their

00:26:26,860 --> 00:26:31,450
information to our development

00:26:29,440 --> 00:26:40,720
environments flew into instance we don't

00:26:31,450 --> 00:26:42,879
but we could ultimately it's jason that

00:26:40,720 --> 00:26:46,830
gets sent to fluently that gets

00:26:42,879 --> 00:26:51,429
represented beforehand by a pearl ash

00:26:46,830 --> 00:26:54,190
any of you who've tried to to stringify

00:26:51,429 --> 00:26:56,830
a pearl hash notice or know that you get

00:26:54,190 --> 00:26:58,570
keys back in hashed order which is a

00:26:56,830 --> 00:27:00,429
real pain in the ass if you're a

00:26:58,570 --> 00:27:04,899
developer trying to track them what's

00:27:00,429 --> 00:27:06,879
happening in it in a text file so we did

00:27:04,899 --> 00:27:09,789
a little magic with log message

00:27:06,879 --> 00:27:14,259
structured and we used high x hash to

00:27:09,789 --> 00:27:17,049
help us order the hashes and then we can

00:27:14,259 --> 00:27:19,480
stringify them and write them to disk at

00:27:17,049 --> 00:27:22,509
that point or we can use log message

00:27:19,480 --> 00:27:24,279
structure string of five as Jason which

00:27:22,509 --> 00:27:26,850
is what happens when a message gets sent

00:27:24,279 --> 00:27:26,850
to fluent

00:27:27,480 --> 00:27:34,590
and it's not a crazy amount of code

00:27:30,200 --> 00:27:38,750
again it's just more moose and all the

00:27:34,590 --> 00:27:38,750
magic happens in this is hash function

00:27:39,500 --> 00:27:49,620
and not a whole lot of craziness to see

00:27:43,110 --> 00:27:51,870
there a point of discussion in all of

00:27:49,620 --> 00:27:54,150
this was so we send this information

00:27:51,870 --> 00:27:56,460
through fluent what do we do with it on

00:27:54,150 --> 00:27:57,960
the back end well we always knew that we

00:27:56,460 --> 00:28:00,180
were going to deal with postgres because

00:27:57,960 --> 00:28:03,540
postgres is the one database everybody

00:28:00,180 --> 00:28:06,050
should be using but the question was how

00:28:03,540 --> 00:28:10,350
we were going to store it in Postgres I

00:28:06,050 --> 00:28:13,470
like flat specific tables that you know

00:28:10,350 --> 00:28:16,560
that we would log to very specific

00:28:13,470 --> 00:28:17,970
individual things for analysis a couple

00:28:16,560 --> 00:28:19,830
of the developers here in the room for

00:28:17,970 --> 00:28:21,420
me made a great case for the JSON data

00:28:19,830 --> 00:28:23,310
type and postgres and all the cool

00:28:21,420 --> 00:28:25,140
things that we could do with it and that

00:28:23,310 --> 00:28:28,230
we could index the data inside of there

00:28:25,140 --> 00:28:29,910
and we could do just as meaningful if

00:28:28,230 --> 00:28:31,620
not better queries out of the JSON data

00:28:29,910 --> 00:28:33,840
type and eventually they won me over and

00:28:31,620 --> 00:28:37,140
that is how we're storing everything in

00:28:33,840 --> 00:28:40,860
Postgres is Jason and its really nice

00:28:37,140 --> 00:28:43,050
too because other services that we're

00:28:40,860 --> 00:28:50,010
looking at using are going to use this

00:28:43,050 --> 00:28:52,620
exact same data format as well this

00:28:50,010 --> 00:28:57,660
first slide just shows how easy it is to

00:28:52,620 --> 00:29:02,400
set up that that table in Postgres for

00:28:57,660 --> 00:29:04,680
fluency purposes you you specify your

00:29:02,400 --> 00:29:07,830
config information what table you want

00:29:04,680 --> 00:29:09,900
to log to and you mention it what the

00:29:07,830 --> 00:29:12,210
timestamp column is what the tag column

00:29:09,900 --> 00:29:15,180
is and then what column the information

00:29:12,210 --> 00:29:19,910
gets dumped too and in this case it just

00:29:15,180 --> 00:29:19,910
makes a really simple table in Postgres

00:29:21,570 --> 00:29:27,340
if you're a developer that's chosen not

00:29:25,419 --> 00:29:29,769
to use fluent e and you're just logging

00:29:27,340 --> 00:29:31,929
to your local file system this is just a

00:29:29,769 --> 00:29:37,659
sample of what some of the text output

00:29:31,929 --> 00:29:40,179
looks like it looks like most other text

00:29:37,659 --> 00:29:45,029
log entries after it's been string ified

00:29:40,179 --> 00:29:47,350
and as you can see by the bottom example

00:29:45,029 --> 00:29:49,389
the same process can actually produce

00:29:47,350 --> 00:29:57,820
Jason and just send it sends it straight

00:29:49,389 --> 00:30:00,039
to fluent e testing all this again any

00:29:57,820 --> 00:30:02,320
of you who know Curtis knows that

00:30:00,039 --> 00:30:05,409
everything that you do must be tested it

00:30:02,320 --> 00:30:09,669
must be tested well this is a problem

00:30:05,409 --> 00:30:13,120
with log for pearls sometimes any of you

00:30:09,669 --> 00:30:17,610
who've worked with a test log for Pearl

00:30:13,120 --> 00:30:17,610
may be aware of some of its shortcomings

00:30:17,879 --> 00:30:22,899
logs must be easily testable but they

00:30:20,379 --> 00:30:25,029
have to be turned on to be tested so

00:30:22,899 --> 00:30:26,789
we're having to do test roll log testing

00:30:25,029 --> 00:30:31,330
to help us out with what we needed to do

00:30:26,789 --> 00:30:33,190
and what this allows us to do is look

00:30:31,330 --> 00:30:38,519
for specific hash values in a log

00:30:33,190 --> 00:30:40,870
message so we can specify in a test that

00:30:38,519 --> 00:30:42,580
we want something to happen and we're

00:30:40,870 --> 00:30:45,220
expecting to get this log message out in

00:30:42,580 --> 00:30:47,830
the tail end and what this role allows

00:30:45,220 --> 00:30:49,389
us to do is then we take that action and

00:30:47,830 --> 00:30:55,629
then we check to check the logs to see

00:30:49,389 --> 00:30:58,860
if that's what actually happened and the

00:30:55,629 --> 00:31:01,299
way the test log for Pearl works is that

00:30:58,860 --> 00:31:02,919
you can only check for two things you

00:31:01,299 --> 00:31:06,340
can either check for a reg ex or a

00:31:02,919 --> 00:31:11,350
string and that's a huge pain in the

00:31:06,340 --> 00:31:12,909
butt we thought about testing individual

00:31:11,350 --> 00:31:14,799
log events rather than sending them

00:31:12,909 --> 00:31:16,169
through log for Pearl we could have done

00:31:14,799 --> 00:31:19,389
that it probably would have been easier

00:31:16,169 --> 00:31:21,070
but we don't think it would have been

00:31:19,389 --> 00:31:23,080
the most complete way that we could test

00:31:21,070 --> 00:31:25,240
it because we would have skipped the

00:31:23,080 --> 00:31:26,040
whole running it through the logging

00:31:25,240 --> 00:31:28,140
engine part

00:31:26,040 --> 00:31:30,390
is really important to us we can't

00:31:28,140 --> 00:31:31,830
actually see how it goes through log for

00:31:30,390 --> 00:31:38,070
parole unless we actually send it

00:31:31,830 --> 00:31:39,450
through there so yeah it wasn't really

00:31:38,070 --> 00:31:43,440
easy to figure out what the bloody hell

00:31:39,450 --> 00:31:45,090
test log for Pearl was doing and and

00:31:43,440 --> 00:31:47,730
what our test role does is it actually

00:31:45,090 --> 00:31:51,990
builds up this really ridiculously

00:31:47,730 --> 00:31:53,910
insane reg ex and and sense test log for

00:31:51,990 --> 00:31:59,780
Pearl only lets you check one reg ex or

00:31:53,910 --> 00:32:04,530
one string it got pretty crazy it works

00:31:59,780 --> 00:32:08,460
but it's not pretty it was a really

00:32:04,530 --> 00:32:10,230
dirty ugly nasty hack and we can talk

00:32:08,460 --> 00:32:11,760
about it over some hard liquor later if

00:32:10,230 --> 00:32:19,500
you guys really want to know the details

00:32:11,760 --> 00:32:23,130
but as far as the tests go it's really

00:32:19,500 --> 00:32:25,500
not too bad in the case of testing our

00:32:23,130 --> 00:32:27,000
access log there's an environment

00:32:25,500 --> 00:32:31,380
variable that we have to set when the

00:32:27,000 --> 00:32:36,090
test suite runs and then we use the log

00:32:31,380 --> 00:32:38,190
expect method and we tell it the type of

00:32:36,090 --> 00:32:41,420
access log we want to check and the

00:32:38,190 --> 00:32:45,000
information that we're looking for and

00:32:41,420 --> 00:32:47,790
that's what happens we have a

00:32:45,000 --> 00:32:49,560
specialized version of test dub-dub-dub

00:32:47,790 --> 00:32:53,640
mechanized to help us with certain

00:32:49,560 --> 00:32:58,080
things so we specify what it is we want

00:32:53,640 --> 00:32:59,280
to log we actually then invoke the

00:32:58,080 --> 00:33:02,670
method that will actually let the

00:32:59,280 --> 00:33:04,440
character move and then we look to see

00:33:02,670 --> 00:33:06,860
the resulting access log that is

00:33:04,440 --> 00:33:06,860
produced

00:33:09,789 --> 00:33:13,760
so once all this has been passed through

00:33:12,020 --> 00:33:15,440
fluent E and eventually written up to

00:33:13,760 --> 00:33:17,900
postgres in this case how do we get

00:33:15,440 --> 00:33:19,760
information out because we're just

00:33:17,900 --> 00:33:24,350
writing it to adjacent table or adjacent

00:33:19,760 --> 00:33:27,260
field in Postgres it's just as simple as

00:33:24,350 --> 00:33:29,690
doing any sort of Jason based query in

00:33:27,260 --> 00:33:33,610
Postgres and here's just a couple of

00:33:29,690 --> 00:33:33,610
examples of what those look like

00:33:38,370 --> 00:33:44,710
game balancing and log analysis with

00:33:41,440 --> 00:33:45,999
regards to game balancing this is really

00:33:44,710 --> 00:33:49,360
important and this is what we're

00:33:45,999 --> 00:33:51,639
tackling right now we need more than

00:33:49,360 --> 00:33:53,110
just simple sequel queries we're going

00:33:51,639 --> 00:33:54,700
to actually have to do some some

00:33:53,110 --> 00:33:59,639
measurements and take some statistics on

00:33:54,700 --> 00:34:02,169
these so using randomness is one example

00:33:59,639 --> 00:34:04,419
free shaper role we track the chance to

00:34:02,169 --> 00:34:08,280
succeed the role and what whether or not

00:34:04,419 --> 00:34:10,569
it was successful and then periodically

00:34:08,280 --> 00:34:12,280
you know eventually we're going to be

00:34:10,569 --> 00:34:14,260
doing this daily you know we're going to

00:34:12,280 --> 00:34:16,929
determine what the average role was the

00:34:14,260 --> 00:34:22,179
percent of successes standard deviation

00:34:16,929 --> 00:34:25,450
and some other things and we as game

00:34:22,179 --> 00:34:27,760
developers and the creative team is for

00:34:25,450 --> 00:34:30,099
game balance purposes need to determine

00:34:27,760 --> 00:34:31,569
overall for this period of time we're

00:34:30,099 --> 00:34:33,609
rolls coming up where they turning out

00:34:31,569 --> 00:34:37,810
too high to low were they what we

00:34:33,609 --> 00:34:40,030
thought they should be and what we're

00:34:37,810 --> 00:34:42,460
implementing is pretty much an easy

00:34:40,030 --> 00:34:44,649
medium hard switch for different pieces

00:34:42,460 --> 00:34:47,290
of the game and these are just going to

00:34:44,649 --> 00:34:50,230
map to multiples of the standard

00:34:47,290 --> 00:34:52,690
deviation in the game where we're a

00:34:50,230 --> 00:34:55,089
normal role would be like zero standard

00:34:52,690 --> 00:34:57,460
deviations away from average if we need

00:34:55,089 --> 00:35:00,010
to make things easier we might shift

00:34:57,460 --> 00:35:02,200
that one standard deviation back one way

00:35:00,010 --> 00:35:03,910
if we determined that everything is easy

00:35:02,200 --> 00:35:05,829
and we need to make it a little bit

00:35:03,910 --> 00:35:07,660
harder than we were going to want to

00:35:05,829 --> 00:35:10,390
shift the difficulties of the roll by

00:35:07,660 --> 00:35:14,349
one standard deviation or more the other

00:35:10,390 --> 00:35:15,790
way we wouldn't have this information if

00:35:14,349 --> 00:35:20,530
we weren't logging all of this

00:35:15,790 --> 00:35:22,030
information we are still accumulating

00:35:20,530 --> 00:35:25,089
data to come up with meaningful

00:35:22,030 --> 00:35:27,190
statistics once you all start playing in

00:35:25,089 --> 00:35:30,240
october when the game comes out we'll

00:35:27,190 --> 00:35:30,240
have more of this information

00:35:31,369 --> 00:35:37,039
the other thing about free-to-play games

00:35:33,289 --> 00:35:38,660
is their intended to be slow but not too

00:35:37,039 --> 00:35:40,609
slow they don't want to be you don't

00:35:38,660 --> 00:35:42,920
want to make them so slow so that people

00:35:40,609 --> 00:35:44,690
get bored and leave but you don't want

00:35:42,920 --> 00:35:46,700
them to grind through it in a couple of

00:35:44,690 --> 00:35:48,380
weeks if it's free to play you need to

00:35:46,700 --> 00:35:50,960
keep people playing in order to spend

00:35:48,380 --> 00:35:52,670
money so we need information that we're

00:35:50,960 --> 00:35:55,130
collecting this way in order to

00:35:52,670 --> 00:35:56,749
determine that we track experience

00:35:55,130 --> 00:35:59,029
gained look at the daily progression

00:35:56,749 --> 00:36:01,339
over time and much like we did for the

00:35:59,029 --> 00:36:03,019
randomness you know determine what the

00:36:01,339 --> 00:36:07,309
average gain per day is and what the

00:36:03,019 --> 00:36:09,890
standard deviation is and we can use

00:36:07,309 --> 00:36:14,059
this to determine if we need people to

00:36:09,890 --> 00:36:15,470
level faster level slower and the

00:36:14,059 --> 00:36:21,499
analysis that we're going to do on this

00:36:15,470 --> 00:36:26,079
data is going to allow us to do it our

00:36:21,499 --> 00:36:28,549
current fun is balancing the economy and

00:36:26,079 --> 00:36:30,400
this is a really complex issue because

00:36:28,549 --> 00:36:34,339
it involves more than in game currency

00:36:30,400 --> 00:36:36,170
because we need to measure player time

00:36:34,339 --> 00:36:38,450
because this is a resource in the

00:36:36,170 --> 00:36:40,789
economy we need to measure real money

00:36:38,450 --> 00:36:42,920
that they're turning into item skills

00:36:40,789 --> 00:36:45,619
and benefits in game that's also a

00:36:42,920 --> 00:36:47,769
resource and we need to see where the

00:36:45,619 --> 00:36:51,980
resources are flowing in the game and

00:36:47,769 --> 00:36:55,640
how they're being used in economic terms

00:36:51,980 --> 00:36:58,009
and I'm oversimplifying this your

00:36:55,640 --> 00:37:00,440
economy is just a transfer one resource

00:36:58,009 --> 00:37:03,170
in our case time money or an item for

00:37:00,440 --> 00:37:08,299
some other resource a course an item

00:37:03,170 --> 00:37:10,069
some sort of player skill so we need to

00:37:08,299 --> 00:37:12,980
log every type of transfer in the game

00:37:10,069 --> 00:37:15,470
and we need to know the absolute number

00:37:12,980 --> 00:37:17,749
of all resources that we have in the

00:37:15,470 --> 00:37:20,140
game you think back to the exchange

00:37:17,749 --> 00:37:23,690
class that I showed a little bit earlier

00:37:20,140 --> 00:37:27,500
that exchange method that we have allows

00:37:23,690 --> 00:37:29,660
us to capture all of this

00:37:27,500 --> 00:37:31,220
I trade one item for another with

00:37:29,660 --> 00:37:33,080
another player that gets routed through

00:37:31,220 --> 00:37:35,570
our exchange class and it gets logged if

00:37:33,080 --> 00:37:36,950
I just flat out by an item from another

00:37:35,570 --> 00:37:39,160
player it gets routed through the

00:37:36,950 --> 00:37:44,750
exchange class and both ends of that are

00:37:39,160 --> 00:37:48,800
a more complicated example I spend money

00:37:44,750 --> 00:37:51,350
on a course at the University and a week

00:37:48,800 --> 00:37:54,770
later i come back and i've completed

00:37:51,350 --> 00:37:56,750
that course the actual amount of time it

00:37:54,770 --> 00:37:58,460
took to complete that is also a resource

00:37:56,750 --> 00:38:03,740
and that gets fed through the exchange

00:37:58,460 --> 00:38:05,420
and that gets locked and then event what

00:38:03,740 --> 00:38:07,010
this is allowing is it allows us to

00:38:05,420 --> 00:38:09,230
capture both the state and the flow of

00:38:07,010 --> 00:38:10,880
all the resources in the game and once

00:38:09,230 --> 00:38:12,740
we have all this we can start doing some

00:38:10,880 --> 00:38:14,210
interesting things like that the one

00:38:12,740 --> 00:38:15,950
tool that we've identified that is

00:38:14,210 --> 00:38:17,900
really going to help us it's what's

00:38:15,950 --> 00:38:21,020
called a Sankey diagram there's other

00:38:17,900 --> 00:38:23,450
things that we can use to but this is

00:38:21,020 --> 00:38:26,060
the the most interesting one to show and

00:38:23,450 --> 00:38:28,280
we're in the process of developing this

00:38:26,060 --> 00:38:30,410
off of the data that we collect so that

00:38:28,280 --> 00:38:31,940
we can see what resources are going into

00:38:30,410 --> 00:38:37,310
the game and then where they're

00:38:31,940 --> 00:38:39,020
ultimately going and being able to

00:38:37,310 --> 00:38:42,440
produce this once we have all that data

00:38:39,020 --> 00:38:44,150
is is a lot easier than you know just

00:38:42,440 --> 00:38:45,770
being able to write a couple of reports

00:38:44,150 --> 00:38:48,050
or dumping some data for the narrative

00:38:45,770 --> 00:38:50,510
team and say hey here's your economy

00:38:48,050 --> 00:38:52,940
make some sense of it and you know we'll

00:38:50,510 --> 00:38:55,850
make after you've had a chance to suck

00:38:52,940 --> 00:38:59,590
on this for a week you know will you

00:38:55,850 --> 00:38:59,590
know we'll make some adjustments for you

00:39:02,570 --> 00:39:08,060
so as the amount of data that we collect

00:39:05,380 --> 00:39:10,990
grows we're going to need help

00:39:08,060 --> 00:39:13,880
processing and turning all this data

00:39:10,990 --> 00:39:17,360
we've had some experience with redshift

00:39:13,880 --> 00:39:20,120
not me personally but it's based on

00:39:17,360 --> 00:39:24,110
postgres and there are some ancillary

00:39:20,120 --> 00:39:26,900
products that work with postgres that we

00:39:24,110 --> 00:39:29,060
can also use to manipulate and analyze

00:39:26,900 --> 00:39:31,780
data and unique and interesting ways to

00:39:29,060 --> 00:39:34,400
get better information out of the game

00:39:31,780 --> 00:39:38,330
kineo is another service that provides

00:39:34,400 --> 00:39:39,890
something similar and as the amount of

00:39:38,330 --> 00:39:41,150
data that we collect grows we're going

00:39:39,890 --> 00:39:42,800
to need a way to search for specific

00:39:41,150 --> 00:39:44,900
things and so we'll probably end up

00:39:42,800 --> 00:39:50,150
wiring something like elasticsearch to

00:39:44,900 --> 00:39:51,380
this as well as far as log retention as

00:39:50,150 --> 00:39:53,150
you can imagine with a massively

00:39:51,380 --> 00:39:56,600
multiplayer game we're going to produce

00:39:53,150 --> 00:39:59,240
a lot of data and it's really important

00:39:56,600 --> 00:40:02,300
for game balancing purposes but where do

00:39:59,240 --> 00:40:04,310
you keep it all the current plan at

00:40:02,300 --> 00:40:09,370
least through our alpha and beta periods

00:40:04,310 --> 00:40:09,370
is to archive data after one month

00:40:10,060 --> 00:40:15,320
because this game is so agile and it's

00:40:13,340 --> 00:40:17,060
constantly being updated and the game

00:40:15,320 --> 00:40:19,460
changes so much of the course of a month

00:40:17,060 --> 00:40:23,270
anything older than that is really not

00:40:19,460 --> 00:40:25,130
all that meaningful to us anymore and

00:40:23,270 --> 00:40:26,930
eventually we can expect we're going to

00:40:25,130 --> 00:40:30,230
have to archive this more frequently you

00:40:26,930 --> 00:40:32,420
know weekly or every couple of days but

00:40:30,230 --> 00:40:34,990
anything too old becomes less relevant

00:40:32,420 --> 00:40:34,990
for us

00:40:37,080 --> 00:40:41,369
some other things we have planned for

00:40:39,130 --> 00:40:44,680
the future I mentioned earlier overall

00:40:41,369 --> 00:40:46,300
verbosity versus individual verbosity we

00:40:44,680 --> 00:40:50,170
currently have overall verbosity

00:40:46,300 --> 00:40:52,240
implemented as we get players as players

00:40:50,170 --> 00:40:55,060
start cheating and breaking things in

00:40:52,240 --> 00:40:57,790
being a pain in our ass we'll eventually

00:40:55,060 --> 00:41:00,070
have to create some individual logging

00:40:57,790 --> 00:41:02,320
constructs to monitor everything that a

00:41:00,070 --> 00:41:04,060
character is doing so that you know we

00:41:02,320 --> 00:41:05,440
can take appropriate action if they're

00:41:04,060 --> 00:41:08,860
cheating if they're harassing other

00:41:05,440 --> 00:41:10,330
players a be testing results is

00:41:08,860 --> 00:41:13,360
something that's really important to us

00:41:10,330 --> 00:41:16,869
as i mentioned we're not game developers

00:41:13,360 --> 00:41:19,030
and while we think we have some pretty

00:41:16,869 --> 00:41:21,610
amazing ideas and some of the some of

00:41:19,030 --> 00:41:23,950
the best ideas out there we know we're

00:41:21,610 --> 00:41:26,110
going to miss the mark and we are really

00:41:23,950 --> 00:41:28,540
dependent upon our players to say what

00:41:26,110 --> 00:41:31,290
worked better and we need to capture

00:41:28,540 --> 00:41:33,670
those results and do something with them

00:41:31,290 --> 00:41:35,680
and we don't have a whole lot of

00:41:33,670 --> 00:41:38,440
infrastructure in place yet but as our

00:41:35,680 --> 00:41:41,310
infrastructure grows we do intend to use

00:41:38,440 --> 00:41:44,880
fluent d to send that information to

00:41:41,310 --> 00:41:47,880
postgres my ghost and other services for

00:41:44,880 --> 00:41:47,880
analysis

00:41:49,620 --> 00:41:55,540
so some final thoughts for you logging

00:41:53,170 --> 00:41:58,810
as a process don't expect to get it

00:41:55,540 --> 00:42:00,370
right I had originally said don't expect

00:41:58,810 --> 00:42:03,280
to get it right in the first shot but

00:42:00,370 --> 00:42:05,380
but honestly after after a little more

00:42:03,280 --> 00:42:07,270
brainstorming don't ever expect you're

00:42:05,380 --> 00:42:11,710
going to get it right just hope that you

00:42:07,270 --> 00:42:14,050
get it good enough the most important

00:42:11,710 --> 00:42:16,090
thing that we found and I think probably

00:42:14,050 --> 00:42:19,360
what we spent the most time on doing

00:42:16,090 --> 00:42:24,070
this is make something that's flexible

00:42:19,360 --> 00:42:25,540
enough to expand later you don't ever

00:42:24,070 --> 00:42:27,190
want to code yourself into a corner with

00:42:25,540 --> 00:42:29,140
anything but when you need to measure

00:42:27,190 --> 00:42:33,670
what it is that your application your

00:42:29,140 --> 00:42:38,380
game whatever is doing changing out the

00:42:33,670 --> 00:42:40,510
logging is a real pain and you want to

00:42:38,380 --> 00:42:41,920
make it easy for yourself later to fix

00:42:40,510 --> 00:42:44,770
things make adjustments make

00:42:41,920 --> 00:42:47,170
enhancements as it goes along we liked

00:42:44,770 --> 00:42:50,320
our moose approach because this really

00:42:47,170 --> 00:42:52,840
allowed us to do that as we need to add

00:42:50,320 --> 00:42:56,440
more things all we have to do is add a

00:42:52,840 --> 00:42:58,780
new water mint and the other thing to be

00:42:56,440 --> 00:43:00,700
prepared for is once he shows once you

00:42:58,780 --> 00:43:02,380
show people what you can do with the

00:43:00,700 --> 00:43:04,480
information they are going to constantly

00:43:02,380 --> 00:43:05,740
ask you for more a little bit of

00:43:04,480 --> 00:43:08,280
information that we've been able to

00:43:05,740 --> 00:43:10,690
provide has been invaluable already and

00:43:08,280 --> 00:43:13,450
the more you give the more that they

00:43:10,690 --> 00:43:19,120
want so be prepared for that it's it's

00:43:13,450 --> 00:43:21,010
like a fire hose and I'd like to thank

00:43:19,120 --> 00:43:24,450
case and knoll who are both sitting here

00:43:21,010 --> 00:43:27,310
today because you know most of this was

00:43:24,450 --> 00:43:29,850
on their shoulders to implement and they

00:43:27,310 --> 00:43:32,250
did a fabulous job and

00:43:29,850 --> 00:43:40,340
that's where I got the the Sankey

00:43:32,250 --> 00:43:40,340
diagram so anybody have questions yes

00:43:40,430 --> 00:43:43,640
seems like

00:43:46,609 --> 00:43:53,000
system even for knowing what request has

00:43:50,970 --> 00:43:53,000
been

00:44:02,670 --> 00:44:10,960
that that's actually a really good point

00:44:07,620 --> 00:44:14,680
we need to track or right now the

00:44:10,960 --> 00:44:17,050
missions are stored in pretty much a

00:44:14,680 --> 00:44:21,660
tree data structure and it gets stored

00:44:17,050 --> 00:44:25,060
is adjacent field in a table in Postgres

00:44:21,660 --> 00:44:26,620
we need to track where players at

00:44:25,060 --> 00:44:28,810
because they might go through part of

00:44:26,620 --> 00:44:30,610
the mission and then come back later and

00:44:28,810 --> 00:44:33,550
decide to play it this is actually one

00:44:30,610 --> 00:44:35,050
mechanism that we can use to do that we

00:44:33,550 --> 00:44:37,810
do have a leaderboard system right now

00:44:35,050 --> 00:44:41,770
and it's pretty happy the way that it

00:44:37,810 --> 00:44:44,440
does it but this is something that we

00:44:41,770 --> 00:44:46,270
used all that we want to use to augment

00:44:44,440 --> 00:44:50,050
that process for generating the

00:44:46,270 --> 00:44:52,210
leaderboard because right now the leader

00:44:50,050 --> 00:44:53,500
boards are a process that run once a day

00:44:52,210 --> 00:44:56,230
and they are really slow and they're

00:44:53,500 --> 00:44:59,140
really inefficient so having something

00:44:56,230 --> 00:45:01,360
that's more easily parsable and able to

00:44:59,140 --> 00:45:03,880
be analyzed is going to be a great tool

00:45:01,360 --> 00:45:07,120
for that so thank you for reminding me

00:45:03,880 --> 00:45:09,460
of that but it's it's really important

00:45:07,120 --> 00:45:12,340
to for knowing where players are in the

00:45:09,460 --> 00:45:13,720
mission and especially because some

00:45:12,340 --> 00:45:16,180
missions are repeatable and some are not

00:45:13,720 --> 00:45:17,830
and so we need to know the next time

00:45:16,180 --> 00:45:20,710
they go back to that quest giver it's

00:45:17,830 --> 00:45:22,300
like you know oh well you screwed me

00:45:20,710 --> 00:45:23,590
over and sold me out to the authorities

00:45:22,300 --> 00:45:29,480
it's like I'm not going to help you

00:45:23,590 --> 00:45:31,310
anymore yes

00:45:29,480 --> 00:45:33,920
this is blogging circuit that is that

00:45:31,310 --> 00:45:37,130
that is arbitrarily strung together as

00:45:33,920 --> 00:45:48,470
soon as whatever had no here to find any

00:45:37,130 --> 00:45:53,150
roles yes yeah and flew into fluent e is

00:45:48,470 --> 00:45:58,130
nice because I can flip back a million

00:45:53,150 --> 00:46:00,140
slides but the configuration is pretty

00:45:58,130 --> 00:46:02,510
flexible and you can just set up a

00:46:00,140 --> 00:46:05,300
simple set of text-based rules to tell

00:46:02,510 --> 00:46:07,250
it where you want to go the reason why

00:46:05,300 --> 00:46:09,380
we ended up sticking with the Jason data

00:46:07,250 --> 00:46:11,030
type in the table was because rather

00:46:09,380 --> 00:46:14,000
than creating all these individual

00:46:11,030 --> 00:46:16,160
tables that even those might not

00:46:14,000 --> 00:46:20,570
translate the best for the type of data

00:46:16,160 --> 00:46:22,460
that were that we're doing we can only

00:46:20,570 --> 00:46:23,990
have to worry about defining one table

00:46:22,460 --> 00:46:26,720
type and then we can throw pretty much

00:46:23,990 --> 00:46:34,960
any arbitrary data into it at that point

00:46:26,720 --> 00:46:34,960
for later analysis any other questions

00:46:35,250 --> 00:46:52,950
thank you very much for having but you

00:46:50,850 --> 00:46:56,100
know you're always going to bring the

00:46:52,950 --> 00:46:58,710
recipe producer that's one of the great

00:46:56,100 --> 00:47:00,450
things about fluent d is setting up

00:46:58,710 --> 00:47:04,110
multiple offenders they have they have

00:47:00,450 --> 00:47:08,160
the PG sequel data type 2 and you can

00:47:04,110 --> 00:47:10,860
specify multiple offenders and then this

00:47:08,160 --> 00:47:13,410
match rule up here we'll look at each

00:47:10,860 --> 00:47:15,360
incoming message you can tell it which

00:47:13,410 --> 00:47:19,020
part of the Jason that you're throwing

00:47:15,360 --> 00:47:21,000
at it to look at and you can say I want

00:47:19,020 --> 00:47:22,830
these messages to go to this Jason table

00:47:21,000 --> 00:47:24,840
but then these other types of events

00:47:22,830 --> 00:47:32,210
that are coming in just log those to a

00:47:24,840 --> 00:47:35,089
regular table like I'm used to there was

00:47:32,210 --> 00:47:35,960
service be named karina to make sure the

00:47:35,089 --> 00:47:40,130
generator

00:47:35,960 --> 00:47:42,540
to to make sure that the generator is

00:47:40,130 --> 00:47:45,260
effective and it's not producing either

00:47:42,540 --> 00:47:48,530
too many successes or too many failures

00:47:45,260 --> 00:47:50,610
but it gives us some flexibility in

00:47:48,530 --> 00:47:53,340
building out the system because right

00:47:50,610 --> 00:47:56,370
now it's when when you do something in

00:47:53,340 --> 00:47:59,070
the game it's one shot pass or fail and

00:47:56,370 --> 00:48:01,560
our narrative team really wants to

00:47:59,070 --> 00:48:04,200
change this logic and have it it's like

00:48:01,560 --> 00:48:07,260
okay you know this player is is doing

00:48:04,200 --> 00:48:08,850
this action in game but you know we

00:48:07,260 --> 00:48:10,290
don't want it to be just pass or fail we

00:48:08,850 --> 00:48:12,630
don't think that's really representative

00:48:10,290 --> 00:48:15,300
of how this skill is going to be used we

00:48:12,630 --> 00:48:17,640
want them to be able to succeed unlike

00:48:15,300 --> 00:48:20,220
if they succeed on three or five three

00:48:17,640 --> 00:48:24,840
of five rolls they will pass this

00:48:20,220 --> 00:48:28,950
particular skill check for us having

00:48:24,840 --> 00:48:30,660
implemented that once we implement it we

00:48:28,950 --> 00:48:33,030
need to log the results of that to see

00:48:30,660 --> 00:48:36,030
was this the right decision to make in

00:48:33,030 --> 00:48:37,950
terms of game balancing so it's more

00:48:36,030 --> 00:48:39,210
than just the effect the how the

00:48:37,950 --> 00:48:42,150
effectiveness of the random number

00:48:39,210 --> 00:48:44,280
generator is but the process by which

00:48:42,150 --> 00:48:47,510
we're producing the random numbers is

00:48:44,280 --> 00:48:47,510
that also effective

00:48:50,119 --> 00:48:56,609
any other questions thank you very much

00:48:55,170 --> 00:48:58,670
for attending I appreciate your time

00:48:56,609 --> 00:48:58,670

YouTube URL: https://www.youtube.com/watch?v=G6773RJZJNA


