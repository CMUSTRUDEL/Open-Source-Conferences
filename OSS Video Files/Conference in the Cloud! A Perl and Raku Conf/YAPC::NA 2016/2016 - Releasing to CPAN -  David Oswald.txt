Title: 2016 - Releasing to CPAN -  David Oswald
Publication date: 2016-06-27
Playlist: YAPC::NA 2016
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:04,440
so I'd like to welcome everybody out

00:00:01,530 --> 00:00:06,259
here at this afternoon we're going to

00:00:04,440 --> 00:00:09,840
talk about how to release to see pan

00:00:06,259 --> 00:00:13,889
before we get started introduce myself

00:00:09,840 --> 00:00:15,990
I'm Dave Oswald and and I work for

00:00:13,889 --> 00:00:19,470
endurance international group on

00:00:15,990 --> 00:00:22,080
bluehost out of Orem Utah I'd like to

00:00:19,470 --> 00:00:24,269
thank endurance and am Bluehost for

00:00:22,080 --> 00:00:26,340
letting me be here and letting the other

00:00:24,269 --> 00:00:29,310
guys that are helping run audio and

00:00:26,340 --> 00:00:32,160
video at this conference Jason back for

00:00:29,310 --> 00:00:34,350
tako taking a week out of our schedules

00:00:32,160 --> 00:00:35,520
at work and disrupting the sprint and

00:00:34,350 --> 00:00:37,620
all that sort of thing so that we can

00:00:35,520 --> 00:00:39,540
come here and participate in Yap see

00:00:37,620 --> 00:00:40,739
it's a lot of fun and I enjoy it so I

00:00:39,540 --> 00:00:44,640
want to thank endurance for making that

00:00:40,739 --> 00:00:46,640
possible and I mentioned this in my

00:00:44,640 --> 00:00:49,969
previous talk I want to thank the Pearl

00:00:46,640 --> 00:00:52,140
community pearl in general the pearl

00:00:49,969 --> 00:00:54,329
people the parole language the people

00:00:52,140 --> 00:00:56,610
that have worked on it Pearl has made

00:00:54,329 --> 00:00:59,460
this conference possible and for many of

00:00:56,610 --> 00:01:02,160
us has made our careers possible and so

00:00:59,460 --> 00:01:03,840
thanks and if you're kind of new to

00:01:02,160 --> 00:01:05,700
pearl which you may or may not be if you

00:01:03,840 --> 00:01:08,189
are kind of new to pearl than welcome

00:01:05,700 --> 00:01:10,380
because we love new people also although

00:01:08,189 --> 00:01:14,970
I don't kind of think most of us have

00:01:10,380 --> 00:01:16,409
been around and am I like to thank my

00:01:14,970 --> 00:01:17,909
family also because they're doing

00:01:16,409 --> 00:01:19,080
without me for a week as well but

00:01:17,909 --> 00:01:21,030
they're getting a vacation out of this

00:01:19,080 --> 00:01:22,439
too they're going to flight out to Fort

00:01:21,030 --> 00:01:26,700
Lauderdale in a couple days and I'll

00:01:22,439 --> 00:01:27,750
meet them there um ok so releasing to

00:01:26,700 --> 00:01:29,310
see pan is what we're here to talk about

00:01:27,750 --> 00:01:31,979
has anybody in this room already

00:01:29,310 --> 00:01:35,549
released a module to see pan okay get

00:01:31,979 --> 00:01:37,229
out not just kidding now hopefully

00:01:35,549 --> 00:01:39,600
there's still some content in here

00:01:37,229 --> 00:01:42,420
that's of use to you I kind of wanted to

00:01:39,600 --> 00:01:45,799
oh he's holding up there that I'm a sign

00:01:42,420 --> 00:01:45,799
that I'm done I'm done now

00:01:48,020 --> 00:01:52,799
it's okay to have some fun in this talk

00:01:50,399 --> 00:01:54,090
by the way so it's a it makes it a

00:01:52,799 --> 00:01:55,439
little easier to participate in

00:01:54,090 --> 00:01:59,789
something that's a little tricky

00:01:55,439 --> 00:02:02,069
sometimes okay so let's talk first about

00:01:59,789 --> 00:02:04,380
kind of a pre-release checklist before

00:02:02,069 --> 00:02:07,110
we even really get started on a module

00:02:04,380 --> 00:02:11,000
and the first thing we should kind of be

00:02:07,110 --> 00:02:11,000
asking is is it generally useful

00:02:11,150 --> 00:02:17,250
sometimes many many things on Sipan are

00:02:14,670 --> 00:02:18,630
very generally useful and it's also good

00:02:17,250 --> 00:02:21,180
to have things that are specific to

00:02:18,630 --> 00:02:23,700
certain use cases but if the use case

00:02:21,180 --> 00:02:26,099
amounts to a single individual then it's

00:02:23,700 --> 00:02:29,130
probably not a great great candidate for

00:02:26,099 --> 00:02:32,579
Sipan right we don't want to discourage

00:02:29,130 --> 00:02:34,620
anybody from contributing to see pan but

00:02:32,579 --> 00:02:36,299
try to keep your solutions general

00:02:34,620 --> 00:02:37,500
enough that they can be useful to

00:02:36,299 --> 00:02:42,480
somebody other than just one person

00:02:37,500 --> 00:02:45,569
right we should be asking ourselves is

00:02:42,480 --> 00:02:48,180
what we have here better or unique in

00:02:45,569 --> 00:02:50,220
some way does it offer something that is

00:02:48,180 --> 00:02:53,030
not currently being offered even if it

00:02:50,220 --> 00:02:56,010
doesn't offer it in a better way right

00:02:53,030 --> 00:02:57,569
and I didn't put this in but and I

00:02:56,010 --> 00:02:59,040
probably should have I should be able to

00:02:57,569 --> 00:03:02,910
type on my slides as we're going but I

00:02:59,040 --> 00:03:05,459
can't have we already tried to reach out

00:03:02,910 --> 00:03:08,700
to perhaps existing solutions to talk

00:03:05,459 --> 00:03:10,799
about a bug fix or an improvement that

00:03:08,700 --> 00:03:13,440
we have an idea for that might make it

00:03:10,799 --> 00:03:15,060
unnecessary for us to release a

00:03:13,440 --> 00:03:16,620
completely separate module that nobody

00:03:15,060 --> 00:03:18,239
knows about where when we could be

00:03:16,620 --> 00:03:23,160
helping to improve something that's

00:03:18,239 --> 00:03:25,290
already out there this is a big one are

00:03:23,160 --> 00:03:28,500
you willing to devote the time to

00:03:25,290 --> 00:03:31,440
producing a quality distribution because

00:03:28,500 --> 00:03:33,630
producing a Sipan quality distribution

00:03:31,440 --> 00:03:35,669
although there's a lot of cruft right

00:03:33,630 --> 00:03:38,430
but producing a distribution that we

00:03:35,669 --> 00:03:41,220
would like to see on Sipan takes some

00:03:38,430 --> 00:03:44,010
time and not only time to produce it but

00:03:41,220 --> 00:03:46,380
also are you committed to maintaining it

00:03:44,010 --> 00:03:49,380
because it turns out that things that

00:03:46,380 --> 00:03:51,389
are written on CTN 10 15 years ago are

00:03:49,380 --> 00:03:54,200
still there today and that's that's

00:03:51,389 --> 00:03:56,490
great that's wonderful but

00:03:54,200 --> 00:03:59,850
sometimes they can fall into a state of

00:03:56,490 --> 00:04:03,150
disrepair over time and so it takes some

00:03:59,850 --> 00:04:04,680
maintenance and you know there's this

00:04:03,150 --> 00:04:06,420
kind of the old adage of now you have

00:04:04,680 --> 00:04:08,100
two problems you release a module to see

00:04:06,420 --> 00:04:09,810
pan and it becomes popular now you have

00:04:08,100 --> 00:04:12,090
the prop the problem of you've got a

00:04:09,810 --> 00:04:14,760
popular module on Sipan that suddenly

00:04:12,090 --> 00:04:18,120
takes a lot of work to maintain into

00:04:14,760 --> 00:04:22,740
support but I don't want to discourage

00:04:18,120 --> 00:04:24,360
anybody from making modules so as is

00:04:22,740 --> 00:04:29,010
often the case with pearl there are many

00:04:24,360 --> 00:04:32,850
ways to do it and we'll count a few ways

00:04:29,010 --> 00:04:37,200
x details make maker is kind of the de

00:04:32,850 --> 00:04:40,260
facto standard for on which we base many

00:04:37,200 --> 00:04:42,000
of our Sipan distributions module build

00:04:40,260 --> 00:04:43,770
was was kind of the new kid on the block

00:04:42,000 --> 00:04:46,110
for a while and had its heyday and seems

00:04:43,770 --> 00:04:49,080
to be kind of fading a little bit module

00:04:46,110 --> 00:04:51,870
install is a kind of a really nice

00:04:49,080 --> 00:04:54,240
wrapper around x details make maker dis

00:04:51,870 --> 00:04:56,130
zilla i think it was sawyer somebody

00:04:54,240 --> 00:04:58,710
talked about it during the keynote surly

00:04:56,130 --> 00:05:01,320
ER today just Zilla is wonderful if you

00:04:58,710 --> 00:05:03,570
want to manage a seat pan distribution

00:05:01,320 --> 00:05:07,530
easily but it also requires half of

00:05:03,570 --> 00:05:10,200
Sipan so you know no big deal it's great

00:05:07,530 --> 00:05:13,710
and dilla you requires the other half in

00:05:10,200 --> 00:05:15,300
addition I'm sorry Zilla district wires

00:05:13,710 --> 00:05:18,330
the other half in addition to what dis

00:05:15,300 --> 00:05:20,970
Zilla requires and I say that with great

00:05:18,330 --> 00:05:24,060
fondness for all of these tools but but

00:05:20,970 --> 00:05:26,910
sometimes we're trying to keep the

00:05:24,060 --> 00:05:28,710
barrier for entry simple for the

00:05:26,910 --> 00:05:32,220
purposes of this introduction and so

00:05:28,710 --> 00:05:34,020
will kind of ignore the hard ways let's

00:05:32,220 --> 00:05:36,540
look at one good way to start because as

00:05:34,020 --> 00:05:38,280
larry has said before although the Pearl

00:05:36,540 --> 00:05:41,490
slogan is there is more than one way to

00:05:38,280 --> 00:05:44,190
do it I hesitate to make ten ways to do

00:05:41,490 --> 00:05:46,410
something and so let's hesitate to talk

00:05:44,190 --> 00:05:48,240
about ten ways we'll talk about one way

00:05:46,410 --> 00:05:52,020
we'll talk about the X details make make

00:05:48,240 --> 00:05:54,360
her way but first you need a pause

00:05:52,020 --> 00:05:55,950
account who has a pause account I've

00:05:54,360 --> 00:05:59,010
trusted all the people yeah okay so a

00:05:55,950 --> 00:06:01,110
lot of us in here do you need a pause

00:05:59,010 --> 00:06:03,270
account it takes about two minutes to

00:06:01,110 --> 00:06:05,820
fill out the form in about two months no

00:06:03,270 --> 00:06:06,900
I'm sorry one two three days one two

00:06:05,820 --> 00:06:08,699
three days for the account

00:06:06,900 --> 00:06:11,790
to be open because it does require some

00:06:08,699 --> 00:06:13,680
manual interaction some manual

00:06:11,790 --> 00:06:17,340
intervention at the other end of the

00:06:13,680 --> 00:06:19,320
line and make sure to search Sipan

00:06:17,340 --> 00:06:20,699
ensuring your not requesting a pause ID

00:06:19,320 --> 00:06:24,889
that's already in use because I will

00:06:20,699 --> 00:06:27,270
slow the process down further and so

00:06:24,889 --> 00:06:28,800
here's the obligatory screen capture

00:06:27,270 --> 00:06:30,539
because really how do you present get up

00:06:28,800 --> 00:06:32,310
get a pause account so that's how you

00:06:30,539 --> 00:06:36,690
get a pause account you go to pause

00:06:32,310 --> 00:06:39,360
parole org and you sign up for a pause

00:06:36,690 --> 00:06:41,130
account what does the plaza count

00:06:39,360 --> 00:06:43,410
represent well represents your Sipan

00:06:41,130 --> 00:06:47,729
identity and the identity under which

00:06:43,410 --> 00:06:49,919
your Sipan modules live on on Sipan or

00:06:47,729 --> 00:06:52,979
the author identity identity under which

00:06:49,919 --> 00:06:56,520
they live so now we're going to do

00:06:52,979 --> 00:06:58,289
things really this to the slow way let's

00:06:56,520 --> 00:07:01,500
create a directory framework for our

00:06:58,289 --> 00:07:03,990
module we're going to make make sure our

00:07:01,500 --> 00:07:07,620
module is going to be food today because

00:07:03,990 --> 00:07:08,849
I'm not very creative module we're going

00:07:07,620 --> 00:07:12,990
to make their foo we're going to make

00:07:08,849 --> 00:07:14,660
their foo live T examples and then we're

00:07:12,990 --> 00:07:20,669
going to change directory into food so

00:07:14,660 --> 00:07:22,320
what goes in lib anybody know your

00:07:20,669 --> 00:07:25,470
module yeah it goes in there right your

00:07:22,320 --> 00:07:26,699
module code and in T test thank you for

00:07:25,470 --> 00:07:28,919
knowing yes everybody knows that

00:07:26,699 --> 00:07:31,260
shouldn't know that your tests go in t

00:07:28,919 --> 00:07:33,090
I'm giving a talk on Wednesday about

00:07:31,260 --> 00:07:34,260
testing and there might be other talks

00:07:33,090 --> 00:07:36,539
at the conference I encourage you to

00:07:34,260 --> 00:07:39,990
take it take in as many of the testing

00:07:36,539 --> 00:07:41,639
talk cesare a possible something that

00:07:39,990 --> 00:07:44,159
I've been seeing more in recent years

00:07:41,639 --> 00:07:47,430
and I think it's a wonderful idea is an

00:07:44,159 --> 00:07:49,260
examples folder in which you put small

00:07:47,430 --> 00:07:52,409
little tests or small little scripts

00:07:49,260 --> 00:07:55,650
that actually demonstrate use cases for

00:07:52,409 --> 00:07:57,389
your module or demonstrate simple usages

00:07:55,650 --> 00:07:59,430
of your module I think that's a

00:07:57,389 --> 00:08:02,310
wonderful idea I've been trying to put

00:07:59,430 --> 00:08:05,099
it in some of the modules that I do it

00:08:02,310 --> 00:08:06,930
really just documentation is great but

00:08:05,099 --> 00:08:08,940
it's also great to have some real actual

00:08:06,930 --> 00:08:12,169
this works and you can run it and see

00:08:08,940 --> 00:08:12,169
what it's doing so

00:08:14,780 --> 00:08:19,470
okay now we're going to add some files

00:08:17,550 --> 00:08:22,880
so we talked about it already we're

00:08:19,470 --> 00:08:26,310
going to add a our module food p.m.

00:08:22,880 --> 00:08:30,570
we're going to add a test script called

00:08:26,310 --> 00:08:33,240
0 0 0 dash load we're going to create an

00:08:30,570 --> 00:08:36,540
example file an example script and then

00:08:33,240 --> 00:08:39,810
make fail makefile PL manifest changes

00:08:36,540 --> 00:08:45,330
and read me so what goes in those files

00:08:39,810 --> 00:08:47,340
I don't know well first we need to list

00:08:45,330 --> 00:08:49,500
what is included in the distribution so

00:08:47,340 --> 00:08:56,250
which how do we use that for or do we do

00:08:49,500 --> 00:08:58,560
that with manifest okay so in the

00:08:56,250 --> 00:09:00,690
manifest file you list all of the files

00:08:58,560 --> 00:09:02,340
that you want to be bundled up in your

00:09:00,690 --> 00:09:04,740
distribution when you package it up and

00:09:02,340 --> 00:09:09,450
uploaded to see pen including the

00:09:04,740 --> 00:09:11,190
manifest file itself very meta and in

00:09:09,450 --> 00:09:16,350
this example I'm including meta JSON and

00:09:11,190 --> 00:09:18,690
meta llamo the manifest file allows for

00:09:16,350 --> 00:09:26,190
comments and comments are delivered

00:09:18,690 --> 00:09:27,630
delimited by space so for many reasons

00:09:26,190 --> 00:09:29,790
it's not always a great idea to put

00:09:27,630 --> 00:09:32,070
spaces in your file names and this is

00:09:29,790 --> 00:09:35,580
maybe one yet one other reason not to

00:09:32,070 --> 00:09:37,470
put spaces in your file names because on

00:09:35,580 --> 00:09:40,230
the left there manifest that's the file

00:09:37,470 --> 00:09:41,640
that you want listed in your in your in

00:09:40,230 --> 00:09:45,030
your manifest and on the right that's

00:09:41,640 --> 00:09:52,230
actually a comment just because of the

00:09:45,030 --> 00:09:53,720
space okay manifest skip before before

00:09:52,230 --> 00:09:56,910
everybody was using version control

00:09:53,720 --> 00:10:02,450
manifest skip wasn't all that useful it

00:09:56,910 --> 00:10:06,660
allows you to specifically tell the the

00:10:02,450 --> 00:10:08,910
makefile process to ignore certain files

00:10:06,660 --> 00:10:11,130
it's now become quite a bit more useful

00:10:08,910 --> 00:10:12,870
because we would use it to put in that

00:10:11,130 --> 00:10:15,210
we want it to ignore our gift

00:10:12,870 --> 00:10:18,320
directories for example if it's a good

00:10:15,210 --> 00:10:18,320
supported repository

00:10:19,379 --> 00:10:22,919
and you're going to put generated files

00:10:21,299 --> 00:10:25,829
in there too if you've got things that

00:10:22,919 --> 00:10:27,569
are better generated now uh now usually

00:10:25,829 --> 00:10:31,399
the defaults are enough unless it's a

00:10:27,569 --> 00:10:33,569
unless it's a version control supported

00:10:31,399 --> 00:10:35,579
supportive module in which case you

00:10:33,569 --> 00:10:37,229
would want to enumerate all of the

00:10:35,579 --> 00:10:39,239
things that you want to skip including

00:10:37,229 --> 00:10:41,269
the ones that you normally get by

00:10:39,239 --> 00:10:43,470
default and you can look that up in the

00:10:41,269 --> 00:10:45,119
documentation for X details make maker

00:10:43,470 --> 00:10:49,829
for what the defaults are in the

00:10:45,119 --> 00:10:51,629
manifest skip next we need to include a

00:10:49,829 --> 00:10:53,429
brief explanation about what our modules

00:10:51,629 --> 00:10:57,949
all about and so we include a readme

00:10:53,429 --> 00:11:01,529
file a brief intro to our module and

00:10:57,949 --> 00:11:05,189
rather than post a big line of code or

00:11:01,529 --> 00:11:06,809
big a big example here just copy one

00:11:05,189 --> 00:11:09,029
from another seep and distribution that

00:11:06,809 --> 00:11:11,220
you like and change it to white to what

00:11:09,029 --> 00:11:12,689
your distribution represents it there's

00:11:11,220 --> 00:11:15,259
plenty of examples the nice thing about

00:11:12,689 --> 00:11:17,699
Sipan is that we have 12,000 examples

00:11:15,259 --> 00:11:19,739
already there's a lot of prior art now

00:11:17,699 --> 00:11:21,029
some of it is is good art and some of

00:11:19,739 --> 00:11:22,649
its bad art but there's a lot of good

00:11:21,029 --> 00:11:24,809
example a lot of examples out there and

00:11:22,649 --> 00:11:26,759
many of them are good so any questions

00:11:24,809 --> 00:11:30,929
so far if if at any point you have any

00:11:26,759 --> 00:11:32,819
questions just let me know so include a

00:11:30,929 --> 00:11:35,729
summary description where to find

00:11:32,819 --> 00:11:39,269
documentation include a link to your

00:11:35,729 --> 00:11:41,489
repo if you have a github repo don't

00:11:39,269 --> 00:11:43,859
ever put version numbers this is my own

00:11:41,489 --> 00:11:45,859
opinion okay but don't ever put version

00:11:43,859 --> 00:11:48,959
numbers and things like you read me file

00:11:45,859 --> 00:11:52,019
I took over maintenance a few years back

00:11:48,959 --> 00:11:53,879
on the module in line C++ and it had

00:11:52,019 --> 00:11:56,399
version numbers scattered all throughout

00:11:53,879 --> 00:11:57,959
the distribution and that was great

00:11:56,399 --> 00:11:59,999
until you needed to bump the version

00:11:57,959 --> 00:12:01,289
number and then you'd always forget one

00:11:59,999 --> 00:12:03,269
and they could end up releasing two

00:12:01,289 --> 00:12:04,470
versions because you released the one

00:12:03,269 --> 00:12:05,909
that was messed up and then you got a

00:12:04,470 --> 00:12:07,559
bump again and release the one that's

00:12:05,909 --> 00:12:09,629
got them all and you hope that you got

00:12:07,559 --> 00:12:11,609
them all so don't put version numbers

00:12:09,629 --> 00:12:12,989
excited try try to limit where you put

00:12:11,609 --> 00:12:17,189
version numbers I like to just put them

00:12:12,989 --> 00:12:19,889
in one or two places if possible so we

00:12:17,189 --> 00:12:21,689
need to tie our changes to version

00:12:19,889 --> 00:12:25,189
numbers somehow and so how do we do that

00:12:21,689 --> 00:12:28,019
when we create a file called changes and

00:12:25,189 --> 00:12:30,720
changes has a can have a very simple

00:12:28,019 --> 00:12:32,130
format you'll see a lot of formats out

00:12:30,720 --> 00:12:34,590
there on Sipan

00:12:32,130 --> 00:12:39,030
but the simplest form format is to have

00:12:34,590 --> 00:12:42,420
a version number a date that is just a

00:12:39,030 --> 00:12:45,420
day in a year in a month and then a

00:12:42,420 --> 00:12:48,810
hyphenated list of items that are

00:12:45,420 --> 00:12:51,450
included in this particular version you

00:12:48,810 --> 00:12:53,430
can get more specific on the date you

00:12:51,450 --> 00:12:57,240
can go right down to the second if you

00:12:53,430 --> 00:13:00,270
want in your time stamp but I tend to

00:12:57,240 --> 00:13:02,340
like to keep it simple and in some cases

00:13:00,270 --> 00:13:03,870
I kind of can tell myself I'm just going

00:13:02,340 --> 00:13:06,120
to I'm not going to release more than

00:13:03,870 --> 00:13:10,310
once a day anyway so just put a date

00:13:06,120 --> 00:13:10,310
down and keep it simple there is a

00:13:10,340 --> 00:13:15,620
there's a testing module that I

00:13:13,230 --> 00:13:19,200
discovered a couple years ago called

00:13:15,620 --> 00:13:20,940
test changes and it will actually parse

00:13:19,200 --> 00:13:22,770
your changes file and make sure that it

00:13:20,940 --> 00:13:28,290
contains everything it needs to contain

00:13:22,770 --> 00:13:29,940
so that's a nice test script to use and

00:13:28,290 --> 00:13:31,770
then we need to construct a make file

00:13:29,940 --> 00:13:38,400
what does the make file do for us

00:13:31,770 --> 00:13:40,830
anybody know it the silence is golden

00:13:38,400 --> 00:13:46,830
because it's a video there you go go

00:13:40,830 --> 00:13:49,260
ahead yeah it's basically kind of like a

00:13:46,830 --> 00:13:52,590
build test and it's and install script

00:13:49,260 --> 00:13:54,510
it it creates several targets and I'll

00:13:52,590 --> 00:13:56,160
show you some of them in a minute it

00:13:54,510 --> 00:13:58,710
creates several targets one of them is

00:13:56,160 --> 00:14:02,220
make which builds the distribution one

00:13:58,710 --> 00:14:03,900
of them is test which which can be used

00:14:02,220 --> 00:14:06,900
to run the test suite and then there's

00:14:03,900 --> 00:14:08,400
usually a couple others so but to create

00:14:06,900 --> 00:14:11,400
the make file you don't have to write it

00:14:08,400 --> 00:14:13,080
by hand you can write it using make file

00:14:11,400 --> 00:14:14,670
dot PL and this is one of the beautiful

00:14:13,080 --> 00:14:16,350
things about pearl and about programming

00:14:14,670 --> 00:14:19,170
in general it's nice when you can have

00:14:16,350 --> 00:14:22,020
code writing code for you and so you

00:14:19,170 --> 00:14:23,400
write make file dot PL and make file dot

00:14:22,020 --> 00:14:25,050
PL can pull in all kinds of

00:14:23,400 --> 00:14:28,650
configuration from the world around you

00:14:25,050 --> 00:14:30,930
and can create a make file that can be

00:14:28,650 --> 00:14:34,830
used to build your distribution for you

00:14:30,930 --> 00:14:36,960
so your make file dot PL will contain

00:14:34,830 --> 00:14:39,270
your typical header the use strict use

00:14:36,960 --> 00:14:41,400
warnings using that I like to put the

00:14:39,270 --> 00:14:42,960
minimum version number of pearl that my

00:14:41,400 --> 00:14:45,540
distribution supports

00:14:42,960 --> 00:14:48,120
in my make file so that my make file

00:14:45,540 --> 00:14:51,240
will die if I'm on a version of Perl

00:14:48,120 --> 00:14:54,450
that is too old for what I'm supporting

00:14:51,240 --> 00:14:55,710
and then use XD utils make maker and

00:14:54,450 --> 00:14:57,210
then we have this method called right

00:14:55,710 --> 00:15:00,150
make file that we're going to call and

00:14:57,210 --> 00:15:01,440
that method we pass it some arguments

00:15:00,150 --> 00:15:05,490
that we'll look at in a minute and it

00:15:01,440 --> 00:15:08,520
writes out the make file why do I put

00:15:05,490 --> 00:15:12,030
the version number there I want make

00:15:08,520 --> 00:15:13,890
file to die when it's run if we're on a

00:15:12,030 --> 00:15:16,530
version of Perl that's too old for me

00:15:13,890 --> 00:15:19,050
and the reason i want that is because

00:15:16,530 --> 00:15:22,710
the smoke testers will tell me i believe

00:15:19,050 --> 00:15:24,420
na as opposed to fail if if they

00:15:22,710 --> 00:15:26,790
encounter if they died during make file

00:15:24,420 --> 00:15:28,350
and i want to be able to see in my smoke

00:15:26,790 --> 00:15:31,050
tests i want to be able to distinguish

00:15:28,350 --> 00:15:35,940
between an actual failure and something

00:15:31,050 --> 00:15:38,760
that i was that I can accept okay here's

00:15:35,940 --> 00:15:40,890
an example right makefile call so we're

00:15:38,760 --> 00:15:43,250
calling within make file dot PL you saw

00:15:40,890 --> 00:15:45,750
here before we have right make file

00:15:43,250 --> 00:15:48,140
we're going to pass into right make file

00:15:45,750 --> 00:15:51,090
the name of the distribution the author

00:15:48,140 --> 00:15:53,340
including your email address where to

00:15:51,090 --> 00:15:54,570
get the version number from see there's

00:15:53,340 --> 00:15:56,810
a nice trick I don't have to put the

00:15:54,570 --> 00:16:01,260
version number and make file dot PL

00:15:56,810 --> 00:16:02,430
where to get an abstract from so we're

00:16:01,260 --> 00:16:04,830
telling it to get the version and

00:16:02,430 --> 00:16:06,480
abstract out of the module itself so i

00:16:04,830 --> 00:16:10,800
only have to put the version and the

00:16:06,480 --> 00:16:13,620
abstract in one place the minimum perl

00:16:10,800 --> 00:16:16,080
version required so i'm going to put it

00:16:13,620 --> 00:16:17,670
in there again that's because the CP an

00:16:16,080 --> 00:16:24,450
indexer is kind of neat to know that as

00:16:17,670 --> 00:16:25,920
well build requires taupe i I'm not

00:16:24,450 --> 00:16:27,660
allowed to walk because then the camera

00:16:25,920 --> 00:16:31,010
won't have me on there oh I can use the

00:16:27,660 --> 00:16:36,810
mouse to point here we go build requires

00:16:31,010 --> 00:16:39,510
tells the makefile what components are

00:16:36,810 --> 00:16:43,460
required at build time that may not be

00:16:39,510 --> 00:16:46,470
standard perl modules at build time so

00:16:43,460 --> 00:16:48,660
we're going to run a test suite so let's

00:16:46,470 --> 00:16:51,330
say that built the builds stages require

00:16:48,660 --> 00:16:52,690
test more although test more comes with

00:16:51,330 --> 00:16:57,840
pro nowadays but

00:16:52,690 --> 00:17:02,200
and then the next line there prereq p.m.

00:16:57,840 --> 00:17:05,620
tells the make file system and also the

00:17:02,200 --> 00:17:09,430
cpn indexing what the prerequisites are

00:17:05,620 --> 00:17:12,010
at runtime for the module so build

00:17:09,430 --> 00:17:14,170
requires is build prerequisites and pre

00:17:12,010 --> 00:17:18,250
req dot P or underscore p.m. is the

00:17:14,170 --> 00:17:19,810
runtime prerequisites then is the field

00:17:18,250 --> 00:17:21,400
that we sometimes pass in called meta

00:17:19,810 --> 00:17:22,750
merge that's becoming more common

00:17:21,400 --> 00:17:24,640
nowadays than it used to be and I'll go

00:17:22,750 --> 00:17:28,170
over that in a minute and then we give a

00:17:24,640 --> 00:17:31,270
couple other targets dist and clean and

00:17:28,170 --> 00:17:33,640
the disk target tells the make tells

00:17:31,270 --> 00:17:36,130
make file which will then tell make how

00:17:33,640 --> 00:17:38,350
to bundle up the distribution and clean

00:17:36,130 --> 00:17:41,230
tells how to clean all the junk out of

00:17:38,350 --> 00:17:44,260
the distribution with leftover from say

00:17:41,230 --> 00:17:54,580
running tests or from from the bundling

00:17:44,260 --> 00:17:57,160
process any questions so far so you can

00:17:54,580 --> 00:17:58,870
put into met emerge additional

00:17:57,160 --> 00:18:02,770
information you can list the public

00:17:58,870 --> 00:18:04,480
version control repository there's a lot

00:18:02,770 --> 00:18:06,340
of fields that you can put into the meta

00:18:04,480 --> 00:18:09,580
merge and they're all documented on

00:18:06,340 --> 00:18:13,420
Sipan in the module called see pam mehta

00:18:09,580 --> 00:18:14,950
spec and so I find myself referring to

00:18:13,420 --> 00:18:16,810
that frequently when I'm first kind of

00:18:14,950 --> 00:18:20,020
planning out how to build it how to

00:18:16,810 --> 00:18:23,860
build a specific distribution Sipan meta

00:18:20,020 --> 00:18:26,740
spec the fields are helpful but not

00:18:23,860 --> 00:18:28,960
necessarily mandatory but then

00:18:26,740 --> 00:18:33,070
increasingly the Sipan installers like

00:18:28,960 --> 00:18:35,080
cen- will look at the fields that you

00:18:33,070 --> 00:18:36,970
put into met emerge and kind of give

00:18:35,080 --> 00:18:39,970
them some their due respect as the bill

00:18:36,970 --> 00:18:42,660
as the install and build process goes so

00:18:39,970 --> 00:18:45,100
here's a sample met emerge I'm telling

00:18:42,660 --> 00:18:47,740
I'm telling the sea pen installers in

00:18:45,100 --> 00:18:50,080
the CP an indexer that the meta spec

00:18:47,740 --> 00:18:52,270
were following his version 2 that we

00:18:50,080 --> 00:18:56,440
have a bug tracker which has a web URL

00:18:52,270 --> 00:18:59,170
of HTTPS whatever github we have a

00:18:56,440 --> 00:19:01,789
repository that is of type git and the

00:18:59,170 --> 00:19:06,559
URL whatever it is

00:19:01,789 --> 00:19:09,440
then we tell what what this distribution

00:19:06,559 --> 00:19:11,479
provides this distribution is presumably

00:19:09,440 --> 00:19:14,539
the list binary search distribution and

00:19:11,479 --> 00:19:15,799
it's going to provide food at p.m. which

00:19:14,539 --> 00:19:20,479
doesn't make a lot of sense there's a

00:19:15,799 --> 00:19:22,759
bug and then prereqs runtime recommends

00:19:20,479 --> 00:19:26,859
list binary search excess and that's a

00:19:22,759 --> 00:19:28,609
recommendation that that will be indexed

00:19:26,859 --> 00:19:29,929
currently I'll think anything really

00:19:28,609 --> 00:19:31,460
happens other than yes that's

00:19:29,929 --> 00:19:33,679
recommended and you can look that up in

00:19:31,460 --> 00:19:35,929
the metadata for for the module at some

00:19:33,679 --> 00:19:40,789
point someday we might have tools that

00:19:35,929 --> 00:19:42,229
actually make use of that field there

00:19:40,789 --> 00:19:45,289
are other fields they're also documented

00:19:42,229 --> 00:19:47,119
in the CPM meta spec so now we need to

00:19:45,289 --> 00:19:52,450
demonstrate that it works on target

00:19:47,119 --> 00:19:55,999
systems so we write a bunch of tests

00:19:52,450 --> 00:19:58,129
here's an example of a test we use

00:19:55,999 --> 00:20:01,429
strict use warnings use test more and

00:19:58,129 --> 00:20:04,399
then use okay foo we're just seeing if

00:20:01,429 --> 00:20:07,700
the module can load without compilation

00:20:04,399 --> 00:20:10,429
error for example can okay fubar can the

00:20:07,700 --> 00:20:13,609
foo module run the bar method or the bar

00:20:10,429 --> 00:20:16,279
subroutine the function exists can okay

00:20:13,609 --> 00:20:19,190
main bar is asking does this

00:20:16,279 --> 00:20:22,309
distribution export into the colouring

00:20:19,190 --> 00:20:24,259
package the method bar and then we're

00:20:22,309 --> 00:20:27,200
done testing so this is a very very

00:20:24,259 --> 00:20:34,009
simple test script but just kind of

00:20:27,200 --> 00:20:36,289
tests the basic loading of the module by

00:20:34,009 --> 00:20:39,649
default the test suite that we produce

00:20:36,289 --> 00:20:43,220
is run at install time on every system

00:20:39,649 --> 00:20:47,629
that installs our module it's also run

00:20:43,220 --> 00:20:48,830
by all of the Sipan smokers anybody know

00:20:47,629 --> 00:20:52,549
what this we all know what the sea pen

00:20:48,830 --> 00:20:56,269
smokers are every see Pam distribution

00:20:52,549 --> 00:20:58,970
is run by the sea pen smokers which are

00:20:56,269 --> 00:21:01,399
a bunch of volunteers that have system

00:20:58,970 --> 00:21:03,019
setup of various flavors and various

00:21:01,399 --> 00:21:05,269
operating systems and various pearl

00:21:03,019 --> 00:21:07,669
versions and even various compilations

00:21:05,269 --> 00:21:09,799
of pearl they run our distribution on

00:21:07,669 --> 00:21:12,720
all of those different systems and then

00:21:09,799 --> 00:21:18,330
at sea pen testers org

00:21:12,720 --> 00:21:21,630
look at it get a browser over here at

00:21:18,330 --> 00:21:24,960
sea pen testers org you can review all

00:21:21,630 --> 00:21:26,820
of the distributions or whatever

00:21:24,960 --> 00:21:35,010
distribution you want to review and look

00:21:26,820 --> 00:21:38,010
at the test results I can't type

00:21:35,010 --> 00:21:46,520
sideways and backwards in Sipan te STRs

00:21:38,010 --> 00:21:57,600
there we go okay so let's find something

00:21:46,520 --> 00:22:00,169
under the El category oh I don't want to

00:21:57,600 --> 00:22:00,169
look at authors

00:22:12,050 --> 00:22:26,860
okay and let's look at one that I put up

00:22:16,250 --> 00:22:26,860
a few years ago this binary search

00:22:32,090 --> 00:22:40,190
takes a minute to load because there's a

00:22:33,770 --> 00:22:43,570
lot of information now we can look here

00:22:40,190 --> 00:22:47,529
and we can see that list binary search

00:22:43,570 --> 00:22:47,529
let me bump this up in size

00:22:51,290 --> 00:23:03,320
maybe oh it's just slow there we go is

00:23:01,340 --> 00:23:08,600
that almost legible okay list binary

00:23:03,320 --> 00:23:11,330
search has passed on Perl 5 24 / 05 23

00:23:08,600 --> 00:23:13,160
and if I drag the slider down it'll go

00:23:11,330 --> 00:23:15,830
all the way down to pearl 5 something

00:23:13,160 --> 00:23:18,860
and it tells me what operating systems

00:23:15,830 --> 00:23:22,430
it has passed on and what version of my

00:23:18,860 --> 00:23:28,040
module so version 0.25 has passed on new

00:23:22,430 --> 00:23:31,160
linux version pro version 5 24 523 522

00:23:28,040 --> 00:23:36,920
and so on I can see that it has not

00:23:31,160 --> 00:23:39,800
passed on what is that free be a que

00:23:36,920 --> 00:23:41,180
freebie DSD which I assume means that

00:23:39,800 --> 00:23:44,290
they're probably has not been anybody to

00:23:41,180 --> 00:23:47,480
test it dragonfly it hasn't tested on

00:23:44,290 --> 00:23:52,700
there it hasn't passed on at least in

00:23:47,480 --> 00:23:55,040
the last few years net bsd did I don't

00:23:52,700 --> 00:23:57,650
see any tests there and then openbsd now

00:23:55,040 --> 00:24:01,130
I can also drop down further and I can

00:23:57,650 --> 00:24:03,770
look at individual test runs each line

00:24:01,130 --> 00:24:08,990
here represents a test run and you can

00:24:03,770 --> 00:24:13,310
see that we have 1218 test smokers that

00:24:08,990 --> 00:24:15,890
have tested this module and 1217 of them

00:24:13,310 --> 00:24:18,680
have passed my test suite and one gives

00:24:15,890 --> 00:24:20,210
me an na not available which may be a

00:24:18,680 --> 00:24:24,700
Miss configuration or maybe something

00:24:20,210 --> 00:24:29,080
that I could fix let's look at this one

00:24:24,700 --> 00:24:34,130
we'll just click on it and this is a

00:24:29,080 --> 00:24:36,440
debian this one hit this one passed it

00:24:34,130 --> 00:24:39,560
ran all my tests you can see the test

00:24:36,440 --> 00:24:42,500
suite run the test run it shows me what

00:24:39,560 --> 00:24:46,300
modules this particular smoker had

00:24:42,500 --> 00:24:49,070
installed on it in the tool chain and

00:24:46,300 --> 00:24:51,440
any comments it shows me how pearl was

00:24:49,070 --> 00:24:53,240
compiled so as a sea pen author this is

00:24:51,440 --> 00:24:56,030
very useful information because as soon

00:24:53,240 --> 00:24:57,980
as I see a fail I can click on that fail

00:24:56,030 --> 00:25:01,790
it will show up in red instead of in

00:24:57,980 --> 00:25:03,590
green and I can look and see what what

00:25:01,790 --> 00:25:04,850
became of my chest run and

00:25:03,590 --> 00:25:06,890
there's not enough information to my

00:25:04,850 --> 00:25:08,659
test run then I need to add something to

00:25:06,890 --> 00:25:10,789
my tests and upload another version to

00:25:08,659 --> 00:25:13,309
see pan and look at that fail again and

00:25:10,789 --> 00:25:17,679
get hopefully more information that I

00:25:13,309 --> 00:25:20,720
can use to to resolve the issue so okay

00:25:17,679 --> 00:25:22,730
tests are run by the smokers tests chest

00:25:20,720 --> 00:25:24,950
can also be run any time I can run the

00:25:22,730 --> 00:25:27,429
tests as i'm developing users who have

00:25:24,950 --> 00:25:30,500
installed by module can run the tests

00:25:27,429 --> 00:25:34,100
the tests demonstrate the code in action

00:25:30,500 --> 00:25:36,230
so just like we put an examples file in

00:25:34,100 --> 00:25:38,360
our in our distributions people can also

00:25:36,230 --> 00:25:40,640
look at the test sweet and kind of see

00:25:38,360 --> 00:25:42,440
how we're manipulating our code and how

00:25:40,640 --> 00:25:48,590
we're testing and running it to get

00:25:42,440 --> 00:25:50,330
examples of how to use it I listen to a

00:25:48,590 --> 00:25:52,130
talk one time about giving talks and

00:25:50,330 --> 00:25:55,390
they said occasionally stop and take a

00:25:52,130 --> 00:25:58,730
drink it gives people a chance to okay

00:25:55,390 --> 00:26:04,669
all right although I really kind of

00:25:58,730 --> 00:26:07,279
needed a drink too so now and testing is

00:26:04,669 --> 00:26:09,559
really part of the Sipan pearl culture

00:26:07,279 --> 00:26:11,299
and that's congratulations to pearl

00:26:09,559 --> 00:26:15,110
because i really think that we're among

00:26:11,299 --> 00:26:17,690
the the early adopters of that kind of

00:26:15,110 --> 00:26:19,789
testing culture putting out there that

00:26:17,690 --> 00:26:23,570
that everything on Sipan runs through

00:26:19,789 --> 00:26:25,909
tests on a thousand smokers it's just an

00:26:23,570 --> 00:26:28,039
amazing feature that we have in pearl

00:26:25,909 --> 00:26:29,899
and other communities have adopted it

00:26:28,039 --> 00:26:31,940
but congratulations to pearl for being

00:26:29,899 --> 00:26:34,640
one of the early adopters okay so now we

00:26:31,940 --> 00:26:37,970
need a module and we'll just create one

00:26:34,640 --> 00:26:40,789
here Lib foo and foo is going to export

00:26:37,970 --> 00:26:43,549
a method or a function called bar and

00:26:40,789 --> 00:26:47,510
bar does the complex task of printing

00:26:43,549 --> 00:26:49,880
hello world and so there's our module

00:26:47,510 --> 00:26:51,830
and we're going to continue on the next

00:26:49,880 --> 00:26:56,539
page starting with the pod down there

00:26:51,830 --> 00:27:00,140
what is pod yes plain old documentation

00:26:56,539 --> 00:27:04,250
yes plain old documentation so here's an

00:27:00,140 --> 00:27:06,980
example of some pod had one name and

00:27:04,250 --> 00:27:09,950
then we give it a name and a quick

00:27:06,980 --> 00:27:12,799
little word about what the module is we

00:27:09,950 --> 00:27:14,520
give us an opsys the synopsis shows how

00:27:12,799 --> 00:27:17,340
to use the module so there's yet another

00:27:14,520 --> 00:27:21,990
example yet another place to place an

00:27:17,340 --> 00:27:23,580
example description and then exports and

00:27:21,990 --> 00:27:25,140
under exports you would list maybe the

00:27:23,580 --> 00:27:28,890
functions that get exported and how to

00:27:25,140 --> 00:27:30,690
use them so follow your favourite

00:27:28,890 --> 00:27:32,370
modules example find a module that you

00:27:30,690 --> 00:27:35,460
like how they do their documentation

00:27:32,370 --> 00:27:38,070
there's no right way there's a lot of

00:27:35,460 --> 00:27:39,570
wrong ways there's a lot of good ways so

00:27:38,070 --> 00:27:42,000
find a module that you like and kind of

00:27:39,570 --> 00:27:45,030
pattern your documentation after after

00:27:42,000 --> 00:27:49,800
that sort of module and also read pearl

00:27:45,030 --> 00:27:52,770
doc pearl pod pearl doc pearl pod that

00:27:49,800 --> 00:27:58,020
one is an explanation of how pearls

00:27:52,770 --> 00:28:00,150
plain old documentation works tests are

00:27:58,020 --> 00:28:03,230
part of the iterative process so how do

00:28:00,150 --> 00:28:05,730
we run our tests you run your tests by

00:28:03,230 --> 00:28:07,410
as you're as you're developing your code

00:28:05,730 --> 00:28:12,150
you can run your tests by typing prove

00:28:07,410 --> 00:28:14,450
hyphen lv hyphen l means to use the

00:28:12,150 --> 00:28:17,660
local lib whatever the lib is under your

00:28:14,450 --> 00:28:20,700
under your current working directory and

00:28:17,660 --> 00:28:26,640
v means i want for both output from my

00:28:20,700 --> 00:28:28,500
tests and then or you can run your make

00:28:26,640 --> 00:28:30,570
file and then type make and make tests

00:28:28,500 --> 00:28:33,390
and when you make test it will run the

00:28:30,570 --> 00:28:38,510
tests also but it will run them in a

00:28:33,390 --> 00:28:43,380
less verbose mode also prove hyphen bv

00:28:38,510 --> 00:28:46,500
so when you first type make your module

00:28:43,380 --> 00:28:48,750
is built and installed into a temporary

00:28:46,500 --> 00:28:52,410
directory called be lib under your

00:28:48,750 --> 00:28:55,530
current working directory and so prove

00:28:52,410 --> 00:28:58,280
hyphen be tells pearl to look in b lib

00:28:55,530 --> 00:29:01,350
for your module instead of in lib and

00:28:58,280 --> 00:29:03,420
why would you do that well maybe the

00:29:01,350 --> 00:29:05,640
make process actually writes some code

00:29:03,420 --> 00:29:07,740
that goes into your module or provide

00:29:05,640 --> 00:29:10,170
some configuration that goes into your

00:29:07,740 --> 00:29:13,260
life into your lib folder so proof

00:29:10,170 --> 00:29:17,160
hyphen bv would run your code based on

00:29:13,260 --> 00:29:19,800
that computed code essentially okay so

00:29:17,160 --> 00:29:21,210
we'll run our tests and you can see

00:29:19,800 --> 00:29:23,789
we've got a bunch of tests here and it

00:29:21,210 --> 00:29:25,830
skips some out it skips some

00:29:23,789 --> 00:29:27,330
test that we call author tests and going

00:29:25,830 --> 00:29:29,909
to run some tests that we want to run on

00:29:27,330 --> 00:29:32,159
every box and all tests are successful

00:29:29,909 --> 00:29:33,269
and at the end we get a pass and users

00:29:32,159 --> 00:29:35,639
are going to see that too when they

00:29:33,269 --> 00:29:37,409
install the module if they install in a

00:29:35,639 --> 00:29:39,749
verbose mode they're going to see the

00:29:37,409 --> 00:29:42,119
pass or the fail and all of the tests

00:29:39,749 --> 00:29:45,119
along the way or all of the test files

00:29:42,119 --> 00:29:47,759
along the way maybe we should provide a

00:29:45,119 --> 00:29:49,649
simple example script by demonstrates

00:29:47,759 --> 00:29:53,639
how to use the module and so here's

00:29:49,649 --> 00:29:56,580
examples example dot PL you strict use

00:29:53,639 --> 00:29:59,159
warnings use foo quote word bar so go

00:29:56,580 --> 00:30:03,509
ahead and import and then run bar in a

00:29:59,159 --> 00:30:05,309
prints hello world don't don't put don't

00:30:03,509 --> 00:30:07,950
set the executable bit on things that

00:30:05,309 --> 00:30:11,309
you upload to see pan it's just kind of

00:30:07,950 --> 00:30:14,009
bad form dat haven't I think better to

00:30:11,309 --> 00:30:16,200
better to force people to type perl in

00:30:14,009 --> 00:30:21,509
the file name that they want to run it's

00:30:16,200 --> 00:30:23,039
safer and now we need to bundle up our

00:30:21,509 --> 00:30:25,499
distribution this is the really hard

00:30:23,039 --> 00:30:27,629
part not really um so prepare the

00:30:25,499 --> 00:30:30,149
distribution pearl make filed up PL that

00:30:27,629 --> 00:30:32,489
runs our make file now make that builds

00:30:30,149 --> 00:30:34,649
our distribution make test that tests

00:30:32,489 --> 00:30:38,070
the distribution that we just built make

00:30:34,649 --> 00:30:40,109
dis check that checks the manifest

00:30:38,070 --> 00:30:42,169
against the files that we have in our

00:30:40,109 --> 00:30:45,210
distributions file hierarchy and

00:30:42,169 --> 00:30:49,279
verifies that everything is there that's

00:30:45,210 --> 00:30:51,989
in the manifest I like to make dis test

00:30:49,279 --> 00:30:54,149
because that copies everything into a

00:30:51,989 --> 00:30:55,739
completely separate sub folder and runs

00:30:54,149 --> 00:30:58,409
everything is vote we're installing the

00:30:55,739 --> 00:31:00,629
module in that separate subfolder so it

00:30:58,409 --> 00:31:03,899
just is one more verification step and

00:31:00,629 --> 00:31:06,239
then I like to even though the generated

00:31:03,899 --> 00:31:10,320
code I like to copy the meta JSON a meta

00:31:06,239 --> 00:31:13,859
llamo files back into my main back into

00:31:10,320 --> 00:31:18,119
my main module now then I think then you

00:31:13,859 --> 00:31:21,659
can remove that that foo that orange

00:31:18,119 --> 00:31:24,629
href 001 when you make disk test it puts

00:31:21,659 --> 00:31:26,909
everything into the module hyphen the

00:31:24,629 --> 00:31:28,859
version number folder and runs the

00:31:26,909 --> 00:31:30,450
distribution from that folder now we're

00:31:28,859 --> 00:31:31,190
going to remove that folder to clean up

00:31:30,450 --> 00:31:34,730
the cruft

00:31:31,190 --> 00:31:37,460
to ourselves and then make dist and that

00:31:34,730 --> 00:31:41,270
final step just zips it all up into a

00:31:37,460 --> 00:31:46,160
tarball and now we have a tarball tada

00:31:41,270 --> 00:31:48,440
foo 01 tar.gz and we've done we're done

00:31:46,160 --> 00:31:50,840
we've made a distribution and it's ready

00:31:48,440 --> 00:31:52,940
ready to go so what was that pause

00:31:50,840 --> 00:31:54,410
account for again well we need our

00:31:52,940 --> 00:31:56,360
distribution needs a home where people

00:31:54,410 --> 00:31:58,280
can find it and everybody can put code

00:31:56,360 --> 00:32:00,830
on github but it's a little hard to find

00:31:58,280 --> 00:32:03,110
things on github right well pearl pearl

00:32:00,830 --> 00:32:04,670
people know that they're supposed to

00:32:03,110 --> 00:32:06,560
look to see pan when they want to find

00:32:04,670 --> 00:32:09,350
modules to download and there's a lot of

00:32:06,560 --> 00:32:11,030
reason for that github is wonderful but

00:32:09,350 --> 00:32:13,720
you have it's very hard to get a sense

00:32:11,030 --> 00:32:16,160
looking at a github distribution as to

00:32:13,720 --> 00:32:17,630
what kind of testing it's gone through

00:32:16,160 --> 00:32:20,420
and that sort of thing whereas with

00:32:17,630 --> 00:32:22,520
Sipan distributions you can see what

00:32:20,420 --> 00:32:25,490
sorts of testing has happened let's look

00:32:22,520 --> 00:32:29,960
at a cpn distribution let's go here too

00:32:25,490 --> 00:32:40,010
with binary search so search dot Sipan

00:32:29,960 --> 00:32:44,350
org this binary search we're going to

00:32:40,010 --> 00:32:44,350
find that module

00:32:48,710 --> 00:32:57,900
we immediately presented with the plain

00:32:52,410 --> 00:33:00,110
old documentation that I wrote but if I

00:32:57,900 --> 00:33:04,110
click on the distribution name up here

00:33:00,110 --> 00:33:08,100
this binary search version 0.25 I can

00:33:04,110 --> 00:33:11,640
look at the pass and fail ratio of the

00:33:08,100 --> 00:33:13,320
tests that were run by the smokers so as

00:33:11,640 --> 00:33:15,600
you're looking at modules on seat pan

00:33:13,320 --> 00:33:18,240
and you can find this on meta seat pan

00:33:15,600 --> 00:33:20,070
as well you'll see the pass/fail ratio

00:33:18,240 --> 00:33:22,620
for a module and if you see something

00:33:20,070 --> 00:33:24,060
has got a ton of fails then maybe it's

00:33:22,620 --> 00:33:26,160
not that well maintained or maybe it's

00:33:24,060 --> 00:33:27,450
kind of tricky maybe it's something you

00:33:26,160 --> 00:33:28,800
still want or maybe you want to steer

00:33:27,450 --> 00:33:31,910
clear of it but at least you're informed

00:33:28,800 --> 00:33:34,890
and we can look at the actual reports

00:33:31,910 --> 00:33:37,760
there's two reports here first I'll show

00:33:34,890 --> 00:33:37,760
you one that we haven't seen

00:33:43,330 --> 00:33:51,160
this one's kind of cool it shows all of

00:33:45,880 --> 00:33:52,600
the distributions of the operating

00:33:51,160 --> 00:33:55,120
systems that it's been tested against

00:33:52,600 --> 00:34:00,940
and what versions of pearl it's past

00:33:55,120 --> 00:34:05,050
against and if for example under linux

00:34:00,940 --> 00:34:07,120
on pearl 524 if fifty percent of the

00:34:05,050 --> 00:34:09,280
some of the fifty percent of the people

00:34:07,120 --> 00:34:11,410
that tested it got a pass and fifty

00:34:09,280 --> 00:34:12,970
percent got to fail then that green bar

00:34:11,410 --> 00:34:15,580
up there would be half red and half

00:34:12,970 --> 00:34:17,530
green so you can look at that and say uh

00:34:15,580 --> 00:34:19,660
there's a lot of people having trouble

00:34:17,530 --> 00:34:20,770
on windows with this one eighty percent

00:34:19,660 --> 00:34:22,720
of the people are having trouble on

00:34:20,770 --> 00:34:24,910
windows or twenty percent or maybe only

00:34:22,720 --> 00:34:27,040
one percent and and you can just get a

00:34:24,910 --> 00:34:30,580
quick visual by looking at this at this

00:34:27,040 --> 00:34:33,550
matrix here and then also the other one

00:34:30,580 --> 00:34:37,720
that you can look at is we've already

00:34:33,550 --> 00:34:41,070
seen this view reports so I'm sorry it's

00:34:37,720 --> 00:34:45,100
so small I keep forgetting to bump it up

00:34:41,070 --> 00:34:47,940
you go okay so we clicked on view

00:34:45,100 --> 00:34:47,940
reports just now

00:34:55,639 --> 00:35:01,829
perhaps I should have scripted the web

00:34:57,900 --> 00:35:03,900
surfing because all right we already

00:35:01,829 --> 00:35:08,549
looked at it once it was the pass/fail

00:35:03,900 --> 00:35:13,079
the set of passes and fails oh here we

00:35:08,549 --> 00:35:16,380
are there you go so we've seen this

00:35:13,079 --> 00:35:20,490
already right and each one of those

00:35:16,380 --> 00:35:25,529
lines represents once one smoker having

00:35:20,490 --> 00:35:27,599
run all my tests to me that's just an

00:35:25,529 --> 00:35:29,670
amazing thing there's 12,000 Sipan

00:35:27,599 --> 00:35:31,500
distributions every one of the twelve

00:35:29,670 --> 00:35:35,430
thousand CPM distributions has been run

00:35:31,500 --> 00:35:38,130
on anywhere from a few hundred to a few

00:35:35,430 --> 00:35:40,289
thousand smokers just think of the

00:35:38,130 --> 00:35:42,210
amount of processing time that's gone

00:35:40,289 --> 00:35:44,670
into testing every one of these modules

00:35:42,210 --> 00:35:46,829
it's just it's wonderful to me to think

00:35:44,670 --> 00:35:49,079
of that so anyway let's get back to

00:35:46,829 --> 00:35:51,000
business so our distribution needs a

00:35:49,079 --> 00:35:53,569
home where people can find it with that

00:35:51,000 --> 00:35:56,730
home is going to be sipan's so log in at

00:35:53,569 --> 00:35:57,930
pauper lorg with the credentials that

00:35:56,730 --> 00:36:00,359
you got when you set up your paws

00:35:57,930 --> 00:36:01,799
account you notice that i talked really

00:36:00,359 --> 00:36:03,599
early on in the discussion about

00:36:01,799 --> 00:36:05,609
creating a pause account that's because

00:36:03,599 --> 00:36:07,589
it takes a couple days so you've gotten

00:36:05,609 --> 00:36:10,380
some time to district to make your

00:36:07,589 --> 00:36:13,710
module and by now maybe you've got your

00:36:10,380 --> 00:36:15,029
paws account upload it you know you

00:36:13,710 --> 00:36:17,880
don't need to copy down that link just

00:36:15,029 --> 00:36:21,539
go to pause dr. lorg and click through

00:36:17,880 --> 00:36:23,730
to upload it wait a few hours because

00:36:21,539 --> 00:36:28,020
the Sipan mirrors take a while to

00:36:23,730 --> 00:36:29,819
distribute your code all around and then

00:36:28,020 --> 00:36:31,859
you'll start to see it on search Sipan

00:36:29,819 --> 00:36:33,960
org and also on meta Sipan you'll start

00:36:31,859 --> 00:36:35,910
to see your code your module showing up

00:36:33,960 --> 00:36:38,400
there and you'll start over the next few

00:36:35,910 --> 00:36:40,710
days to start seeing these pass fail

00:36:38,400 --> 00:36:43,200
tests come through on the test results

00:36:40,710 --> 00:36:44,880
on sea pen smokers it takes a couple

00:36:43,200 --> 00:36:47,190
days to start getting a really good feel

00:36:44,880 --> 00:36:49,920
that that your module is passing

00:36:47,190 --> 00:36:51,510
everywhere but yeah visit Sipan

00:36:49,920 --> 00:36:55,020
chester's org to check out your smoke

00:36:51,510 --> 00:36:57,510
test so are we done yet no the next

00:36:55,020 --> 00:36:59,520
thing is to request a namespace and

00:36:57,510 --> 00:37:01,529
oddly enough we request the namespace

00:36:59,520 --> 00:37:02,850
after we've uploaded the module that's

00:37:01,529 --> 00:37:04,830
just kind of conventional

00:37:02,850 --> 00:37:06,750
really know why but that's the way it is

00:37:04,830 --> 00:37:08,660
you upload your module then you request

00:37:06,750 --> 00:37:11,580
the name space for your module and

00:37:08,660 --> 00:37:12,810
almost always the answer you'll come

00:37:11,580 --> 00:37:15,000
back that that name space has been

00:37:12,810 --> 00:37:17,580
granted to you if you don't request a

00:37:15,000 --> 00:37:19,800
namespace it's also no harm no foul

00:37:17,580 --> 00:37:22,230
because the namespace will automatically

00:37:19,800 --> 00:37:24,240
be given to you anyway so it's just a

00:37:22,230 --> 00:37:25,830
formality we go to the formality it

00:37:24,240 --> 00:37:29,040
makes people happy and then why not make

00:37:25,830 --> 00:37:31,680
people happy we're all friends top-level

00:37:29,040 --> 00:37:33,330
namespaces are discouraged so a project

00:37:31,680 --> 00:37:35,220
like mojolicious it makes a lot of sense

00:37:33,330 --> 00:37:37,890
for it to be named moe delicious and to

00:37:35,220 --> 00:37:39,660
have a name that it's catchy but it

00:37:37,890 --> 00:37:42,000
doesn't make a lot of sense for list

00:37:39,660 --> 00:37:43,470
binary search to be by delicious you

00:37:42,000 --> 00:37:45,450
know you nobody's gonna be able to find

00:37:43,470 --> 00:37:47,280
it put put your modules somewhere where

00:37:45,450 --> 00:37:49,080
people will find them gives them give

00:37:47,280 --> 00:37:50,960
them a name that that is kind of

00:37:49,080 --> 00:37:54,270
meaningful and easy easily searchable

00:37:50,960 --> 00:37:56,520
and then like I said go through and

00:37:54,270 --> 00:38:00,300
watch the smoke test so what else do we

00:37:56,520 --> 00:38:03,540
keep in mind consider our dependencies

00:38:00,300 --> 00:38:05,430
very carefully because every dependency

00:38:03,540 --> 00:38:07,530
that you introduce means one more module

00:38:05,430 --> 00:38:10,260
that needs to be installed on the remote

00:38:07,530 --> 00:38:13,680
system it also makes the assumption that

00:38:10,260 --> 00:38:15,960
that module can be installed on the

00:38:13,680 --> 00:38:17,970
user's system you can easily get

00:38:15,960 --> 00:38:20,700
yourself into a situation where you have

00:38:17,970 --> 00:38:22,320
up to the Annie on what it takes to

00:38:20,700 --> 00:38:24,600
install your module and by so doing

00:38:22,320 --> 00:38:27,230
reduce the number of people that can use

00:38:24,600 --> 00:38:29,280
that module so consider you're

00:38:27,230 --> 00:38:31,110
considering dependencies carefully do

00:38:29,280 --> 00:38:33,300
your dependencies constrain you to newer

00:38:31,110 --> 00:38:34,830
versions of pearl let's say I wrote my

00:38:33,300 --> 00:38:38,340
module in such a way that it would run

00:38:34,830 --> 00:38:40,800
just fine on pearl 56 but then I base it

00:38:38,340 --> 00:38:42,570
on a dependency that requires pearl 520

00:38:40,800 --> 00:38:43,980
well now I've just required that

00:38:42,570 --> 00:38:46,110
everybody that wants to use my module

00:38:43,980 --> 00:38:48,240
has to have pearl 520 installed and

00:38:46,110 --> 00:38:50,700
though we would like to live in a world

00:38:48,240 --> 00:38:51,960
where everybody can install 524 I work

00:38:50,700 --> 00:38:54,120
at a place where we can hardly get

00:38:51,960 --> 00:38:57,030
beyond 5 10 so and I love where I work

00:38:54,120 --> 00:39:01,050
you know but that's Jason you heard that

00:38:57,030 --> 00:39:03,120
right now just kidding anyway now it's

00:39:01,050 --> 00:39:05,550
just the it's just a fact of life that

00:39:03,120 --> 00:39:07,050
it is we cannot always make the

00:39:05,550 --> 00:39:09,150
assumption that we can force people to

00:39:07,050 --> 00:39:10,710
upgrade their pearl do they install

00:39:09,150 --> 00:39:12,500
cleanly everywhere so do the

00:39:10,710 --> 00:39:14,840
dependencies that you

00:39:12,500 --> 00:39:16,070
are using install cleanly everywhere

00:39:14,840 --> 00:39:18,020
that you want your module to be able to

00:39:16,070 --> 00:39:19,550
run it would be a shame to write a

00:39:18,020 --> 00:39:21,410
module that can run just fine on windows

00:39:19,550 --> 00:39:23,720
except that you've used some other

00:39:21,410 --> 00:39:26,690
dependency that won't run on windows for

00:39:23,720 --> 00:39:29,500
example and do they do they bring do

00:39:26,690 --> 00:39:32,240
they bring in with them half of CPM so

00:39:29,500 --> 00:39:34,670
moose is a wonderful thing and it's

00:39:32,240 --> 00:39:36,350
wonderful that Pearl has dis dilla and

00:39:34,670 --> 00:39:39,590
that it has moose and that it has these

00:39:36,350 --> 00:39:42,110
these really rich ecosystems but if

00:39:39,590 --> 00:39:44,240
you've got a module that has one method

00:39:42,110 --> 00:39:46,550
it doesn't make a lot of sense to make

00:39:44,240 --> 00:39:48,770
that a moose e thing maybe maybe it does

00:39:46,550 --> 00:39:50,690
you're the author right do it the way

00:39:48,770 --> 00:39:52,730
you want and you're the author but but

00:39:50,690 --> 00:39:55,820
weigh your options and realize that when

00:39:52,730 --> 00:39:57,410
you have a moose dependency you are

00:39:55,820 --> 00:39:58,820
upping the ante for some people and

00:39:57,410 --> 00:40:02,540
making it more difficult for that module

00:39:58,820 --> 00:40:04,910
to be installed on the other hand don't

00:40:02,540 --> 00:40:06,830
rewrite half of Sipan either if you

00:40:04,910 --> 00:40:08,750
really gain benefit by bringing some

00:40:06,830 --> 00:40:10,760
dependencies in then use those

00:40:08,750 --> 00:40:13,490
dependencies it's a lot better than

00:40:10,760 --> 00:40:15,740
writing your own one-off solution which

00:40:13,490 --> 00:40:18,020
if you're me it probably has bugs in it

00:40:15,740 --> 00:40:19,610
you know we we tend the more code

00:40:18,020 --> 00:40:21,770
rewrite the more bugs we write and so if

00:40:19,610 --> 00:40:23,120
we can if we can include somebody else's

00:40:21,770 --> 00:40:27,020
distribution that's been well tested

00:40:23,120 --> 00:40:30,910
then we're number ahead support as many

00:40:27,020 --> 00:40:33,710
pearl versions as this practical support

00:40:30,910 --> 00:40:35,720
you can look at pearl Delta to see when

00:40:33,710 --> 00:40:38,690
changes occurred in Perl you can also

00:40:35,720 --> 00:40:40,460
run core list to see what to see when

00:40:38,690 --> 00:40:44,000
certain dependencies may have been

00:40:40,460 --> 00:40:46,490
introduced into the pearl core and

00:40:44,000 --> 00:40:49,870
support as many platforms as practical

00:40:46,490 --> 00:40:49,870
how much time do I have

00:40:51,339 --> 00:40:58,880
hey man it's okay good so ask yourself

00:40:56,420 --> 00:41:00,770
can its support windows so can the

00:40:58,880 --> 00:41:02,650
module that I'm writing support windows

00:41:00,770 --> 00:41:06,079
does it make sense for it to do so

00:41:02,650 --> 00:41:08,030
Kenneth support OS X can it support bsd

00:41:06,079 --> 00:41:11,510
dragonfly BSU kind of support raspbian

00:41:08,030 --> 00:41:14,809
if it can then don't write it in such a

00:41:11,510 --> 00:41:16,970
way that it can't so that doesn't make

00:41:14,809 --> 00:41:19,130
sense right if i can write my module in

00:41:16,970 --> 00:41:21,470
such a way that can support many

00:41:19,130 --> 00:41:23,210
operating systems then don't write my

00:41:21,470 --> 00:41:25,160
module that I should not write my module

00:41:23,210 --> 00:41:28,069
in such a way that constrains it only to

00:41:25,160 --> 00:41:29,960
be used on Linux I should be I should be

00:41:28,069 --> 00:41:31,670
targeting portability for your own

00:41:29,960 --> 00:41:33,500
personal code for your own business code

00:41:31,670 --> 00:41:35,240
yeah you know where your system is going

00:41:33,500 --> 00:41:37,099
to be installed and so it's not

00:41:35,240 --> 00:41:39,710
necessary maybe but for something going

00:41:37,099 --> 00:41:41,569
on CPM try to be as open as possible as

00:41:39,710 --> 00:41:44,690
to where your distribution can be

00:41:41,569 --> 00:41:48,650
installed something I want to mention

00:41:44,690 --> 00:41:51,290
about version numbers regular releases

00:41:48,650 --> 00:41:53,750
get just a simple version number and you

00:41:51,290 --> 00:41:55,970
always bump the version number every

00:41:53,750 --> 00:41:58,250
time you upload to see pan if you change

00:41:55,970 --> 00:42:00,349
one character in the pod bump the

00:41:58,250 --> 00:42:02,329
version number change two characters in

00:42:00,349 --> 00:42:03,920
other words you always bump the version

00:42:02,329 --> 00:42:06,109
number otherwise you confuse the

00:42:03,920 --> 00:42:09,650
indexing and confuse the sea pen

00:42:06,109 --> 00:42:11,059
installers minimize error prone work by

00:42:09,650 --> 00:42:16,849
keeping as few version numbers as

00:42:11,059 --> 00:42:20,059
possible let's get this there are twelve

00:42:16,849 --> 00:42:21,770
thousand examples on Sipan so look at

00:42:20,059 --> 00:42:25,390
some of those twelve thousand examples

00:42:21,770 --> 00:42:25,390
and learn from what's already out there

00:42:27,339 --> 00:42:32,599
module tests are important to you as a

00:42:30,770 --> 00:42:34,040
developer because you can see how your

00:42:32,599 --> 00:42:36,049
module is performing but they're also

00:42:34,040 --> 00:42:37,849
important to the users because they can

00:42:36,049 --> 00:42:39,980
gain some confidence if I look at a

00:42:37,849 --> 00:42:43,460
module and I can see it's got like one

00:42:39,980 --> 00:42:45,410
test and the test is is use module foo

00:42:43,460 --> 00:42:47,420
that's the only test that i'm going to

00:42:45,410 --> 00:42:49,640
say i think i'll pass on that one right

00:42:47,420 --> 00:42:51,349
but if it's got a full test suite that's

00:42:49,640 --> 00:42:53,390
really exercising it makes me feel good

00:42:51,349 --> 00:42:56,180
about it mojolicious is a good example

00:42:53,390 --> 00:42:58,400
that's a distribution where it's not a

00:42:56,180 --> 00:43:00,220
feature until there's a it's not a

00:42:58,400 --> 00:43:02,490
feature until there's a test

00:43:00,220 --> 00:43:04,960
supporting the feature and it's not a

00:43:02,490 --> 00:43:06,430
patches are not accepted without tests

00:43:04,960 --> 00:43:08,200
and that's that's a wonderful way to be

00:43:06,430 --> 00:43:15,040
it makes me confident in being able to

00:43:08,200 --> 00:43:17,530
use that author tests you can use the XT

00:43:15,040 --> 00:43:21,640
folder to place your author tests and

00:43:17,530 --> 00:43:23,800
make your author tests only run if if an

00:43:21,640 --> 00:43:26,170
environment variable is set it doesn't

00:43:23,800 --> 00:43:30,280
make any sense to run tests pod on the

00:43:26,170 --> 00:43:31,750
user's systems right if the pod is ok on

00:43:30,280 --> 00:43:34,210
your system it's ok you don't need to

00:43:31,750 --> 00:43:36,190
run those tests if you have tests that

00:43:34,210 --> 00:43:38,590
require a lot of dependencies but are

00:43:36,190 --> 00:43:40,300
unlikely to fail anywhere other than in

00:43:38,590 --> 00:43:42,520
development then don't make your users

00:43:40,300 --> 00:43:46,210
run them put them in XT and mark them as

00:43:42,520 --> 00:43:48,790
release testing only I have a few author

00:43:46,210 --> 00:43:51,849
tests to consider I like test pod test

00:43:48,790 --> 00:43:53,080
pod coverage test Sipan changes test

00:43:51,849 --> 00:43:57,220
manifest I'll make these slides

00:43:53,080 --> 00:43:59,050
available on SlideShare test quality do

00:43:57,220 --> 00:44:01,000
people still use that one a lot test

00:43:59,050 --> 00:44:02,530
quality anybody know I've used to do

00:44:01,000 --> 00:44:05,920
most of my distributions I'm not sure if

00:44:02,530 --> 00:44:07,270
it's still in vogue or not test version

00:44:05,920 --> 00:44:09,220
is a good one for making sure that all

00:44:07,270 --> 00:44:12,010
of your version numbers are consistent

00:44:09,220 --> 00:44:13,599
throughout the distribution and there

00:44:12,010 --> 00:44:17,530
are many other favorites and again ask

00:44:13,599 --> 00:44:19,450
around look on Sipan ask an IRC be

00:44:17,530 --> 00:44:23,470
conservative in your mandatory test

00:44:19,450 --> 00:44:28,210
dependencies and finally we have to

00:44:23,470 --> 00:44:29,820
include a license file and I like to be

00:44:28,210 --> 00:44:33,010
as liberal as possible in the license

00:44:29,820 --> 00:44:34,570
use a license like artistic use the

00:44:33,010 --> 00:44:36,910
license that makes sense for your

00:44:34,570 --> 00:44:38,440
distribution but use a license that's

00:44:36,910 --> 00:44:41,020
permissive enough that people are going

00:44:38,440 --> 00:44:42,940
to want to use your module the next time

00:44:41,020 --> 00:44:46,359
around it gets easier you can use module

00:44:42,940 --> 00:44:48,070
starter to to build most of the

00:44:46,359 --> 00:44:49,839
framework for you and then drop your

00:44:48,070 --> 00:44:53,560
code Ian and eventually you might want

00:44:49,839 --> 00:44:55,420
to migrate to dis stila people that use

00:44:53,560 --> 00:44:56,680
this Zilla love it and swear by it and

00:44:55,420 --> 00:45:00,849
I'm sure that they are probably right

00:44:56,680 --> 00:45:04,260
it's a it's a great tool so you might

00:45:00,849 --> 00:45:06,580
want to know how else can I help well

00:45:04,260 --> 00:45:10,119
contributing to existing distributions

00:45:06,580 --> 00:45:11,830
is one way you can find a distribution

00:45:10,119 --> 00:45:12,160
that you use that maybe as a bug and fix

00:45:11,830 --> 00:45:14,460
it

00:45:12,160 --> 00:45:17,770
submit patches submit bug reports

00:45:14,460 --> 00:45:20,680
there's a module name there's a onsie

00:45:17,770 --> 00:45:22,420
pan named adopt me any module owned by

00:45:20,680 --> 00:45:25,510
adopt me is looking for somebody to take

00:45:22,420 --> 00:45:26,530
care of it you can take over modules

00:45:25,510 --> 00:45:28,660
that have fallen into a state of

00:45:26,530 --> 00:45:30,880
disrepair where the module author is no

00:45:28,660 --> 00:45:32,380
longer around contact the author's see

00:45:30,880 --> 00:45:36,160
if he'll let you take over Co

00:45:32,380 --> 00:45:37,539
maintenance and then join the pull

00:45:36,160 --> 00:45:38,680
request challenge and we have somebody

00:45:37,539 --> 00:45:40,150
here that's going to tell us a bit about

00:45:38,680 --> 00:45:42,609
the pull request challenge if you don't

00:45:40,150 --> 00:45:51,430
mind and i'll i'll go ahead and kind of

00:45:42,609 --> 00:45:53,799
finish up with that thank you David so

00:45:51,430 --> 00:45:55,990
one excellent way to start getting

00:45:53,799 --> 00:45:57,609
involved is by participating in the pull

00:45:55,990 --> 00:45:59,109
request challenge and although we're

00:45:57,609 --> 00:46:01,839
having an event wednesday night at

00:45:59,109 --> 00:46:04,539
six-thirty this is a monthly thing that

00:46:01,839 --> 00:46:07,359
Neal Bowers organizes he started it in

00:46:04,539 --> 00:46:10,329
2005 and the reason why I'm so excited

00:46:07,359 --> 00:46:12,880
about it is because it after over 15

00:46:10,329 --> 00:46:15,160
years it finally gave me and into

00:46:12,880 --> 00:46:17,799
contributing to the Pearl community so

00:46:15,160 --> 00:46:19,809
if you're interested in just getting

00:46:17,799 --> 00:46:22,180
your hands dirty and your feet wet and

00:46:19,809 --> 00:46:24,069
start contributing then i would i would

00:46:22,180 --> 00:46:26,470
highly recommend you come visit us at

00:46:24,069 --> 00:46:28,480
six thirty or six o'clock on wednesday

00:46:26,470 --> 00:46:31,150
evening but i also wanted to point out

00:46:28,480 --> 00:46:34,809
to 30 wednesday jason back there is

00:46:31,150 --> 00:46:36,369
giving a talk specifically about getting

00:46:34,809 --> 00:46:38,890
involved in the pearl community through

00:46:36,369 --> 00:46:41,410
the PRC so I if you're considering going

00:46:38,890 --> 00:46:43,420
to the heck to the PRC Wednesday night I

00:46:41,410 --> 00:46:48,430
highly recommend you go to Jason stock

00:46:43,420 --> 00:46:50,619
thank you thanks so thanks and I totally

00:46:48,430 --> 00:46:52,410
agree I I the pull request challenge is

00:46:50,619 --> 00:46:55,029
wonderful it's a great opportunity to

00:46:52,410 --> 00:46:56,289
contribute back some of your skills and

00:46:55,029 --> 00:46:58,990
some of your coding abilities and also

00:46:56,289 --> 00:47:01,539
to learn your way around other people's

00:46:58,990 --> 00:47:03,130
distributions and how to how to build a

00:47:01,539 --> 00:47:05,380
distribution how to put it together and

00:47:03,130 --> 00:47:10,690
how to submit patches it's just a good

00:47:05,380 --> 00:47:12,160
it's a good experience so also I know

00:47:10,690 --> 00:47:14,170
later in the week Jace is going to speak

00:47:12,160 --> 00:47:15,960
about the pull request challenge so try

00:47:14,170 --> 00:47:18,520
to attend his talk what day is that Oh

00:47:15,960 --> 00:47:21,609
wednesday at two thirty yeah there we go

00:47:18,520 --> 00:47:22,930
thank you and finally I'll just leave

00:47:21,609 --> 00:47:23,980
this slide up with some reference

00:47:22,930 --> 00:47:28,680
materials

00:47:23,980 --> 00:47:28,680
that's all that I have any questions yes

00:47:32,040 --> 00:47:35,859
yeah be in the main directory for the

00:47:34,240 --> 00:47:37,840
distribution you put it in the manifest

00:47:35,859 --> 00:47:40,260
and then in your license file you would

00:47:37,840 --> 00:47:42,910
copy in the license that you're using

00:47:40,260 --> 00:47:45,940
and also you would put it under a

00:47:42,910 --> 00:47:47,830
license header in the pod for the module

00:47:45,940 --> 00:47:49,420
as well did not you don't have to

00:47:47,830 --> 00:47:52,150
necessarily spell out the whole license

00:47:49,420 --> 00:47:54,220
but you can put this this module follows

00:47:52,150 --> 00:47:58,290
artistic two and put a link to artistic

00:47:54,220 --> 00:47:58,290
to for example so yes

00:48:04,510 --> 00:48:09,079
you know that's a wonderful question I

00:48:07,069 --> 00:48:12,640
hope does somebody in this room know the

00:48:09,079 --> 00:48:16,819
end so the question is how does / 05

00:48:12,640 --> 00:48:19,040
Sipan relate to super lab and how does

00:48:16,819 --> 00:48:22,300
that work so come on down you're the

00:48:19,040 --> 00:48:22,300
next contestant on The Price is Right

00:48:22,780 --> 00:48:26,569
since since I'm not giving a talk this

00:48:25,040 --> 00:48:30,200
time I'll all interrupt and I'll take

00:48:26,569 --> 00:48:32,390
the pen d guys on Perl 6 it's a little

00:48:30,200 --> 00:48:34,130
different right now and you can you

00:48:32,390 --> 00:48:36,859
actually upload to see pan but there's

00:48:34,130 --> 00:48:40,130
not really any indexing or anything yet

00:48:36,859 --> 00:48:42,109
I'm there so the sort of the beginning

00:48:40,130 --> 00:48:45,109
infrastructure is being started to work

00:48:42,109 --> 00:48:47,780
on but there's it's not really in place

00:48:45,109 --> 00:48:50,569
yet what there is is there's a project

00:48:47,780 --> 00:48:56,569
on github called Perl 6 it's github com

00:48:50,569 --> 00:48:59,839
slash perl 6 slash ecosystem and there's

00:48:56,569 --> 00:49:01,190
in that is a medalist and you go scroll

00:48:59,839 --> 00:49:04,490
all the way down to the bottom of it and

00:49:01,190 --> 00:49:06,260
you add the link to your meta info for

00:49:04,490 --> 00:49:09,950
your particular class which is similar

00:49:06,260 --> 00:49:13,819
to the metafile and / 05 it's a totally

00:49:09,950 --> 00:49:17,290
different format but similar anyway so

00:49:13,819 --> 00:49:20,720
you do that but there's not really a

00:49:17,290 --> 00:49:23,359
Sipan for perl 6 yet there's modules /

00:49:20,720 --> 00:49:25,190
06 org is the closest there is and it

00:49:23,359 --> 00:49:28,700
just basically every time somebody

00:49:25,190 --> 00:49:30,410
updates there's a somebody's got a

00:49:28,700 --> 00:49:32,599
github hook that whenever that gets up

00:49:30,410 --> 00:49:35,750
that ecosystem gets updated it reruns

00:49:32,599 --> 00:49:38,569
the code for building list of what's in

00:49:35,750 --> 00:49:40,720
there and anyway it's it's all really

00:49:38,569 --> 00:49:43,040
kind of hacked together at this point

00:49:40,720 --> 00:49:45,380
but the plan is that there will be

00:49:43,040 --> 00:49:49,569
basically like a Madison pan for perl 6

00:49:45,380 --> 00:49:49,569
it's not it's just not there yet

00:49:50,599 --> 00:49:57,739
I I don't know that that's even known I

00:49:55,640 --> 00:49:59,839
don't know i'm not i'm not that and i'm

00:49:57,739 --> 00:50:01,910
not that into the / 06 community i know

00:49:59,839 --> 00:50:03,589
i have some stuff in the / 06 ecosystem

00:50:01,910 --> 00:50:05,809
but that's that's as close as I get I

00:50:03,589 --> 00:50:07,880
can't say one thing and that is the seat

00:50:05,809 --> 00:50:10,489
pan itself was somebody's wonderful idea

00:50:07,880 --> 00:50:12,200
wonderful hack 15 years ago or 18 years

00:50:10,489 --> 00:50:13,700
ago and there's nothing preventing

00:50:12,200 --> 00:50:15,950
somebody from having a wonderful idea

00:50:13,700 --> 00:50:18,650
and wonderful hack for perl 6 as well

00:50:15,950 --> 00:50:20,479
and it can they can co-exist but it just

00:50:18,650 --> 00:50:23,089
it's all a matter of someone writing it

00:50:20,479 --> 00:50:25,819
up right somebody doing it it's yeah I

00:50:23,089 --> 00:50:28,460
think I think the idea is to jump on the

00:50:25,819 --> 00:50:30,319
existing Sipan but yeah it's just

00:50:28,460 --> 00:50:31,519
nobody's somebody's got an itch getting

00:50:30,319 --> 00:50:34,369
marry somebody has to implement yeah

00:50:31,519 --> 00:50:37,660
yeah yeah so you're welcome okay all

00:50:34,369 --> 00:50:37,660

YouTube URL: https://www.youtube.com/watch?v=mz_pjG4i19I


