Title: Ingy dot Net - Acmeism: Hacking in Every Language at Once
Publication date: 2013-08-20
Playlist: YAPC::NA 2013
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:05,759
okay so buckle up people put your safety

00:00:02,610 --> 00:00:07,410
belts on the roller coaster ride is

00:00:05,759 --> 00:00:08,460
about to begin and I say roller coaster

00:00:07,410 --> 00:00:14,490
ride because there's going to be a lot

00:00:08,460 --> 00:00:15,870
of hand waving all right questions no

00:00:14,490 --> 00:00:19,170
it's not I didn't ask you if there's

00:00:15,870 --> 00:00:23,070
questions I have questions for you it's

00:00:19,170 --> 00:00:24,000
fun it's a I'm sorry I don't know where

00:00:23,070 --> 00:00:32,369
they are though there's somewhere in

00:00:24,000 --> 00:00:34,250
this bag all right well I think I know

00:00:32,369 --> 00:00:44,070
what well I'm looking for them I alia

00:00:34,250 --> 00:00:49,860
know it's just disturbing let it snow

00:00:44,070 --> 00:01:02,989
let it snow let it snow someone call

00:00:49,860 --> 00:01:02,989
5034 8157 4850 3481 5748

00:01:03,059 --> 00:01:10,270
okay everybody raised their hands please

00:01:07,050 --> 00:01:14,490
you to come on come on come on okay so

00:01:10,270 --> 00:01:16,750
keep it up if you've programmed in Pearl

00:01:14,490 --> 00:01:20,350
keep it up if you've written a perl

00:01:16,750 --> 00:01:24,510
module onion of any sort keep it up if

00:01:20,350 --> 00:01:27,490
you publish that module the sea pan okay

00:01:24,510 --> 00:01:29,310
how about who's written perl 6 you can

00:01:27,490 --> 00:01:32,650
put it back up if you want some perl 6

00:01:29,310 --> 00:01:36,040
okay who's written some published

00:01:32,650 --> 00:01:40,360
anything to to see pans pearl 60 pan

00:01:36,040 --> 00:01:44,020
modules not so many how about on who's

00:01:40,360 --> 00:01:48,780
written JavaScript lots of people who's

00:01:44,020 --> 00:01:53,110
written no Jas JavaScript and who has

00:01:48,780 --> 00:01:54,280
published any node modules to NPM I'm

00:01:53,110 --> 00:01:57,340
keeping my hand up cuz I've done all

00:01:54,280 --> 00:01:59,920
these things um how about with Python

00:01:57,340 --> 00:02:03,070
who's written any Python and he's

00:01:59,920 --> 00:02:05,830
published 2 pi PI whoo okay maybe this

00:02:03,070 --> 00:02:09,310
is a while and talk for you guys okay um

00:02:05,830 --> 00:02:13,180
let's see it's the Ruby who's written

00:02:09,310 --> 00:02:17,170
Ruby cool it's nice isn't it who's our

00:02:13,180 --> 00:02:20,500
is released a ruby gem to rubygems.org

00:02:17,170 --> 00:02:29,590
okay I've done that what's what am I

00:02:20,500 --> 00:02:35,230
missing baby whatsit oh yeah not know

00:02:29,590 --> 00:02:37,840
PHP anyway so who is written the same

00:02:35,230 --> 00:02:41,040
month just going to be me so I lose mine

00:02:37,840 --> 00:02:43,239
who is written the same module and

00:02:41,040 --> 00:02:49,750
released it to all five of those places

00:02:43,239 --> 00:02:53,410
that's me and who has a written one

00:02:49,750 --> 00:02:55,180
source repository and pressed one enter

00:02:53,410 --> 00:02:58,660
key and released all five at the same

00:02:55,180 --> 00:03:03,190
time that's not me yet but this is where

00:02:58,660 --> 00:03:05,260
it's going so I love modules and by

00:03:03,190 --> 00:03:09,310
modules I mean packaged up modules that

00:03:05,260 --> 00:03:11,760
go to see pan or Ruby gems or NP a more

00:03:09,310 --> 00:03:11,760
pie pie

00:03:12,280 --> 00:03:19,270
I think of them as ideas in a box and

00:03:15,940 --> 00:03:20,560
gifts for my friends and Acme asst which

00:03:19,270 --> 00:03:22,660
you'll learn what that is if you don't

00:03:20,560 --> 00:03:29,440
already know give more gifts they give

00:03:22,660 --> 00:03:31,780
too many languages and I was really

00:03:29,440 --> 00:03:33,700
happy I said woot because I happy to

00:03:31,780 --> 00:03:38,560
find out that Perl 6 stuff is going on

00:03:33,700 --> 00:03:41,650
sea pen that's really great so what's

00:03:38,560 --> 00:03:43,060
what's in these packages are boxes well

00:03:41,650 --> 00:03:45,730
there's it's really simple actually

00:03:43,060 --> 00:03:48,790
there's code test documentation some

00:03:45,730 --> 00:03:51,400
meta information and some automation

00:03:48,790 --> 00:03:54,450
stuff for installing it and for letting

00:03:51,400 --> 00:03:56,680
the tests and all of the languages and

00:03:54,450 --> 00:03:58,209
more that more than those five that I'm

00:03:56,680 --> 00:03:59,319
talking about today these are the ones

00:03:58,209 --> 00:04:01,810
that just happened to be concentrating

00:03:59,319 --> 00:04:04,030
on have these kind of these things in

00:04:01,810 --> 00:04:07,780
the box in different forms but it's

00:04:04,030 --> 00:04:09,310
that's the abstraction so I'm going to

00:04:07,780 --> 00:04:10,959
do a quick vocabulary lesson and I

00:04:09,310 --> 00:04:12,190
actually I don't know if anybody saw

00:04:10,959 --> 00:04:13,269
that i wrote to patrick a stirred

00:04:12,190 --> 00:04:15,010
question about rude we're kudos star

00:04:13,269 --> 00:04:18,850
what should we call discs because this

00:04:15,010 --> 00:04:20,380
isn't a really good word so as i looked

00:04:18,850 --> 00:04:23,140
over the if as i was actually going

00:04:20,380 --> 00:04:25,630
through the act of uploading to all

00:04:23,140 --> 00:04:27,789
these places I had to get kind of get my

00:04:25,630 --> 00:04:29,440
terminology right and module actually

00:04:27,789 --> 00:04:34,680
became a bad word because Ruby uses

00:04:29,440 --> 00:04:38,110
module as a as a role or mix in and

00:04:34,680 --> 00:04:40,630
nobody uses dist only Ruby uses gems and

00:04:38,110 --> 00:04:42,340
I very good but both node and Python use

00:04:40,630 --> 00:04:44,890
package and I think it's a really good

00:04:42,340 --> 00:04:46,810
thing a really good word and i'm trying

00:04:44,890 --> 00:04:48,729
to get grill sticks to adopt them I'm

00:04:46,810 --> 00:04:52,300
packages or what you put on Sipan maybe

00:04:48,729 --> 00:04:54,630
what to change the acronym the actual

00:04:52,300 --> 00:04:57,070
files the code files the dot p.m. files

00:04:54,630 --> 00:04:59,590
that you load I call libraries and I'm

00:04:57,070 --> 00:05:03,490
going to use that terminology throughout

00:04:59,590 --> 00:05:06,550
this talk so packages and libraries a

00:05:03,490 --> 00:05:08,229
library contains classes and I haven't

00:05:06,550 --> 00:05:09,780
really settled on module I just happened

00:05:08,229 --> 00:05:13,720
to list that there because that's how

00:05:09,780 --> 00:05:14,979
some people in Ruby a module is what

00:05:13,720 --> 00:05:17,979
some people call it rolls some other

00:05:14,979 --> 00:05:21,039
languages colin mixson but package and

00:05:17,979 --> 00:05:23,409
library i'm pretty set on and classes a

00:05:21,039 --> 00:05:24,940
no brainer only pearl calls it a a

00:05:23,409 --> 00:05:27,730
package low profile

00:05:24,940 --> 00:05:31,870
and we call it classes too we've grown

00:05:27,730 --> 00:05:35,980
up so so let's look at like the layout

00:05:31,870 --> 00:05:37,240
of a pearl five package you have your

00:05:35,980 --> 00:05:39,280
lib tree that's where you keep your code

00:05:37,240 --> 00:05:41,740
you also sometimes have a bin which you

00:05:39,280 --> 00:05:44,470
put your binary scripts that get into

00:05:41,740 --> 00:05:45,820
your path under you put your tests under

00:05:44,470 --> 00:05:47,890
to you actually put your documentation

00:05:45,820 --> 00:05:50,320
which is and I'm here under live as well

00:05:47,890 --> 00:05:56,170
we kind of mix in our documentation into

00:05:50,320 --> 00:05:57,790
our code and my the data comes from

00:05:56,170 --> 00:06:01,450
various places but ends up and I met

00:05:57,790 --> 00:06:03,430
again or JSON file you have make that

00:06:01,450 --> 00:06:08,500
file that PL or just that any as our

00:06:03,430 --> 00:06:10,060
automation gateway and then we also have

00:06:08,500 --> 00:06:11,530
changes file and we also have these

00:06:10,060 --> 00:06:14,740
files but they can be largely be

00:06:11,530 --> 00:06:19,210
generated they're not really things that

00:06:14,740 --> 00:06:21,610
we have to maintain too often it'd be

00:06:19,210 --> 00:06:25,810
cool if changes I bet distiller probably

00:06:21,610 --> 00:06:26,980
main generates changes both so I'm just

00:06:25,810 --> 00:06:29,280
starting to use this still and I'll talk

00:06:26,980 --> 00:06:31,810
a little bit more about it a little bit

00:06:29,280 --> 00:06:35,980
so here's Perl 6 package which I learned

00:06:31,810 --> 00:06:40,780
about yesterday and what's up panic I

00:06:35,980 --> 00:06:43,350
see what's the Panda the guy who did the

00:06:40,780 --> 00:06:45,520
Panda talk just can't remember his name

00:06:43,350 --> 00:06:47,169
anyway he gave a kind of talking here's

00:06:45,520 --> 00:06:50,830
what they look like I'm pretty much the

00:06:47,169 --> 00:06:52,510
same except for a bootstrap that PL a

00:06:50,830 --> 00:06:54,970
meta that info which i think is going to

00:06:52,510 --> 00:06:57,550
change to a meta 6 that JSON he was

00:06:54,970 --> 00:07:00,040
saying and this EXT I really like this

00:06:57,550 --> 00:07:01,690
idea this is where sub-modules go and

00:07:00,040 --> 00:07:06,180
this is going to be a very important

00:07:01,690 --> 00:07:08,350
part of acne is packaging for nodejs

00:07:06,180 --> 00:07:10,390
kind of the same they put the docs in

00:07:08,350 --> 00:07:12,640
the doc library and that not everybody

00:07:10,390 --> 00:07:14,380
does this I mean actually Pearl has the

00:07:12,640 --> 00:07:17,830
best standards of all these languages

00:07:14,380 --> 00:07:19,720
the others just kind of copy off of each

00:07:17,830 --> 00:07:22,240
other in standards kind of emerged what

00:07:19,720 --> 00:07:24,790
they're not really standards in node

00:07:22,240 --> 00:07:29,590
these days most people don't write node

00:07:24,790 --> 00:07:32,110
node n PM is a huge success it's growing

00:07:29,590 --> 00:07:33,880
to the size of Sipan i don't know where

00:07:32,110 --> 00:07:35,470
the numbers are exactly but I'm I heard

00:07:33,880 --> 00:07:36,490
that some people said they'd surpass

00:07:35,470 --> 00:07:39,849
Sipan I kind of find

00:07:36,490 --> 00:07:43,720
to believe but there's a lot of stuff is

00:07:39,849 --> 00:07:45,759
going in and a lot of it is written in

00:07:43,720 --> 00:07:47,169
CoffeeScript or some variant of coffee

00:07:45,759 --> 00:07:49,569
script night and actually in JavaScript

00:07:47,169 --> 00:07:51,009
which is really cool so when you do when

00:07:49,569 --> 00:07:53,410
you write something in CoffeeScript you

00:07:51,009 --> 00:07:55,479
put the coffee files under source they

00:07:53,410 --> 00:07:57,330
generate into the libs so the lib the

00:07:55,479 --> 00:08:02,259
JavaScript gets generated from coffee

00:07:57,330 --> 00:08:05,289
the same and then test gunner tests they

00:08:02,259 --> 00:08:06,639
have a package.json which I liked and

00:08:05,289 --> 00:08:09,130
they have a cake file which I didn't

00:08:06,639 --> 00:08:11,409
really like so cake is this coffee it's

00:08:09,130 --> 00:08:18,400
like a rake file or all these people

00:08:11,409 --> 00:08:20,110
reinvent make including Ruby so Ruby's

00:08:18,400 --> 00:08:22,449
only difference here is that it puts its

00:08:20,110 --> 00:08:24,159
stuff in a bat gem spec file that's

00:08:22,449 --> 00:08:26,319
where the meta information goes pretty

00:08:24,159 --> 00:08:29,590
much the same Rick file does all the

00:08:26,319 --> 00:08:30,789
automation python is the weirdest autumn

00:08:29,590 --> 00:08:32,260
of all of them they don't have a lib

00:08:30,789 --> 00:08:34,330
they just put their top level namespace

00:08:32,260 --> 00:08:38,409
right in the directory it's really

00:08:34,330 --> 00:08:39,610
Python is kind of a I'm gonna you know

00:08:38,409 --> 00:08:44,770
how you love hate things I'm going to

00:08:39,610 --> 00:08:47,890
hate phase with Python right now I mean

00:08:44,770 --> 00:08:50,200
they got the indentation based scoping

00:08:47,890 --> 00:08:52,120
for programming that kind of thing

00:08:50,200 --> 00:08:54,370
that's great and then they got a million

00:08:52,120 --> 00:08:55,720
things wrong I mean just everything is

00:08:54,370 --> 00:08:57,940
just grinds you can see try putting in

00:08:55,720 --> 00:08:59,410
unicode character into a module and see

00:08:57,940 --> 00:09:01,930
how many tools it breaks trying to get

00:08:59,410 --> 00:09:05,709
to pi pi which is its home where it

00:09:01,930 --> 00:09:08,110
lives I have to spell my name do tea

00:09:05,709 --> 00:09:10,690
instead of gon wat tea I just want I

00:09:08,110 --> 00:09:12,550
don't even try anymore and set up that

00:09:10,690 --> 00:09:13,540
pies are out there handwritten and

00:09:12,550 --> 00:09:16,149
that's kind of where the meta

00:09:13,540 --> 00:09:19,240
information lives as well anyway I don't

00:09:16,149 --> 00:09:20,890
care because I want to generate all of

00:09:19,240 --> 00:09:22,209
those things that you just saw from one

00:09:20,890 --> 00:09:24,220
set of really nice sources where

00:09:22,209 --> 00:09:25,959
information is late about nicely and

00:09:24,220 --> 00:09:29,470
this is what acne is packaged layout

00:09:25,959 --> 00:09:30,700
would look like you have a lid thing no

00:09:29,470 --> 00:09:34,810
source directory and that's where your

00:09:30,700 --> 00:09:38,880
cafe script or you know script or C dent

00:09:34,810 --> 00:09:42,220
which you'll learn about and second live

00:09:38,880 --> 00:09:46,630
bin is normal test this pretty normal

00:09:42,220 --> 00:09:48,790
except for since acne as test to use

00:09:46,630 --> 00:09:50,120
something called test mo and those tests

00:09:48,790 --> 00:09:52,520
are largely generated from

00:09:50,120 --> 00:09:54,550
because they write test once and they

00:09:52,520 --> 00:09:57,680
run in and all of the implementations

00:09:54,550 --> 00:09:59,420
and they also all of the all of the

00:09:57,680 --> 00:10:03,740
generated implementations pass the exact

00:09:59,420 --> 00:10:06,080
same tests and this make file gets

00:10:03,740 --> 00:10:09,080
generated for you but it basically I use

00:10:06,080 --> 00:10:10,490
plain old make file because at the

00:10:09,080 --> 00:10:12,500
developers site I can generate rake

00:10:10,490 --> 00:10:17,390
files and cake files and whatever people

00:10:12,500 --> 00:10:22,580
have settled on but and even let's make

00:10:17,390 --> 00:10:24,830
file gets generated so the EXT thing

00:10:22,580 --> 00:10:28,250
which I borrowed from perl 6 is where

00:10:24,830 --> 00:10:32,480
the sub modules go because we need to

00:10:28,250 --> 00:10:34,490
find a test ml repo you should put it in

00:10:32,480 --> 00:10:37,100
a separate repo because I mean right now

00:10:34,490 --> 00:10:38,810
I'm actually porting the same packages

00:10:37,100 --> 00:10:41,480
from language to language and using test

00:10:38,810 --> 00:10:42,980
demo to test them both so but I so I

00:10:41,480 --> 00:10:45,620
keep the test ml for a given project

00:10:42,980 --> 00:10:47,660
called foo and food that food ash tml

00:10:45,620 --> 00:10:49,339
repo if I have a food project and then i

00:10:47,660 --> 00:10:52,220
have my food Ruby project my food python

00:10:49,339 --> 00:10:55,940
project like foo pro projects food / 06

00:10:52,220 --> 00:10:57,350
project and what I can use a sub-module

00:10:55,940 --> 00:11:02,540
and now I have a standard place to put

00:10:57,350 --> 00:11:05,810
them under EXT everything's lower case

00:11:02,540 --> 00:11:07,670
I've decided I mean there's no real

00:11:05,810 --> 00:11:09,140
reason to use upper case anymore for

00:11:07,670 --> 00:11:13,250
things except for the make file because

00:11:09,140 --> 00:11:18,470
getting made doesn't work without that

00:11:13,250 --> 00:11:20,390
but um you know yeah modern shells all

00:11:18,470 --> 00:11:24,110
put stuff in you can't even get stuff to

00:11:20,390 --> 00:11:25,339
float to the top anymore it's just for

00:11:24,110 --> 00:11:27,650
better or for worse that's how it is so

00:11:25,339 --> 00:11:30,560
why not lower case everything don't shut

00:11:27,650 --> 00:11:32,930
it thanks for I'm just rolling with all

00:11:30,560 --> 00:11:38,089
this stuff i mean i'm sure you probably

00:11:32,930 --> 00:11:41,150
disagree with lots of it okay okay so in

00:11:38,089 --> 00:11:42,950
the acme asst box these this is we

00:11:41,150 --> 00:11:45,320
already know that we have code tests doc

00:11:42,950 --> 00:11:47,600
information and automation these are the

00:11:45,320 --> 00:11:50,720
actual projects that back those up that

00:11:47,600 --> 00:11:53,750
I've been working on so C dent is the

00:11:50,720 --> 00:11:55,490
programming language and we'll learn

00:11:53,750 --> 00:11:57,790
more about it and then sin taxes for sea

00:11:55,490 --> 00:12:00,020
tonto you know script and cafe stripped

00:11:57,790 --> 00:12:03,470
the tests or test them out which I just

00:12:00,020 --> 00:12:09,440
was talking about doc is stardock

00:12:03,470 --> 00:12:10,820
and quim is a certain format package is

00:12:09,440 --> 00:12:13,640
a tool that does all the of the

00:12:10,820 --> 00:12:14,990
packaging so most of everything like you

00:12:13,640 --> 00:12:16,490
should only have to write the minimum of

00:12:14,990 --> 00:12:24,260
what you need for all of this stuff and

00:12:16,490 --> 00:12:27,440
then like the makefile you would you

00:12:24,260 --> 00:12:29,440
would have a package camo file and the

00:12:27,440 --> 00:12:31,430
makefile will just get generated for you

00:12:29,440 --> 00:12:34,640
even though that make file can do some

00:12:31,430 --> 00:12:35,780
pretty cool stuff and the one other

00:12:34,640 --> 00:12:37,520
project that's actually the biggest

00:12:35,780 --> 00:12:40,460
project that i work on almost daily

00:12:37,520 --> 00:12:41,840
these days is peg X which is a parser

00:12:40,460 --> 00:12:43,940
generator that works in every language

00:12:41,840 --> 00:12:46,550
so you create a grammar once and now you

00:12:43,940 --> 00:12:48,170
have a new dsl like test ml which is

00:12:46,550 --> 00:12:50,990
written in peg X and PEG X which is

00:12:48,170 --> 00:12:55,810
itself written in peg X they work in all

00:12:50,990 --> 00:12:55,810
the languages where peg ex works so

00:12:56,470 --> 00:13:01,220
there's a few there's a couple projects

00:12:58,760 --> 00:13:02,660
on the net but I've been using in the

00:13:01,220 --> 00:13:04,310
last couple years that have really I've

00:13:02,660 --> 00:13:06,350
had these these activists ideas for

00:13:04,310 --> 00:13:08,060
about six years now and I'm it's a

00:13:06,350 --> 00:13:10,040
really slow road to building this up and

00:13:08,060 --> 00:13:13,400
how many people have been to a hacking

00:13:10,040 --> 00:13:16,670
us talk before okay so a lot of new

00:13:13,400 --> 00:13:20,030
faces that's good thank you for coming

00:13:16,670 --> 00:13:21,950
again it's it doesn't proceed nearly as

00:13:20,030 --> 00:13:27,080
as quickly as I would like it to but

00:13:21,950 --> 00:13:28,400
maybe you can join in and help me so so

00:13:27,080 --> 00:13:30,110
what I learned from dis Zilla or what

00:13:28,400 --> 00:13:32,180
dis Zilla you know proved is that you

00:13:30,110 --> 00:13:34,460
have a coding environment and then you

00:13:32,180 --> 00:13:36,740
have to form to this standard and

00:13:34,460 --> 00:13:39,650
working in that standard environment is

00:13:36,740 --> 00:13:41,960
kind of klutzy you have to have a lot of

00:13:39,650 --> 00:13:44,360
duplication and stuff like that you have

00:13:41,960 --> 00:13:45,950
to put your coat or your documentation

00:13:44,360 --> 00:13:48,230
in certain ways and why not just do it

00:13:45,950 --> 00:13:50,270
the way you want it but when you hit a

00:13:48,230 --> 00:13:54,080
button have it make that make it the way

00:13:50,270 --> 00:13:57,110
Sipan wants it right that's what de

00:13:54,080 --> 00:13:59,600
Silla does and that's what this acne is

00:13:57,110 --> 00:14:01,130
my acne is toolset is doing as well but

00:13:59,600 --> 00:14:03,730
for all languages so it's like this

00:14:01,130 --> 00:14:03,730
Silla for everyone

00:14:05,279 --> 00:14:11,160
and art abs is mother brilliant

00:14:08,459 --> 00:14:14,509
yeah every good idea that I've ever had

00:14:11,160 --> 00:14:19,980
he's actually already implemented some

00:14:14,509 --> 00:14:22,050
and I will now say that my goal in the

00:14:19,980 --> 00:14:23,430
future is that all my pearl coat all my

00:14:22,050 --> 00:14:25,110
Python code is going to be generated

00:14:23,430 --> 00:14:29,550
from my favorite code whatever that is

00:14:25,110 --> 00:14:30,959
and so I'm no longer going to support

00:14:29,550 --> 00:14:32,759
these silly things that I've been

00:14:30,959 --> 00:14:34,199
pimping for the last 10 years in pearl

00:14:32,759 --> 00:14:36,749
which are module installed module

00:14:34,199 --> 00:14:38,569
package they had good things at the time

00:14:36,749 --> 00:14:44,129
but it's time for them to die so long

00:14:38,569 --> 00:14:46,230
with distill along with mechanism okay

00:14:44,129 --> 00:14:48,410
the other thing is coffeescript and

00:14:46,230 --> 00:14:50,730
that's just proving I mean that's

00:14:48,410 --> 00:14:54,120
everybody who's used coffee script

00:14:50,730 --> 00:14:58,439
actually i'll show a little bit of it

00:14:54,120 --> 00:15:01,829
but it's just basically um a way better

00:14:58,439 --> 00:15:06,410
syntax for for javascript and it adds

00:15:01,829 --> 00:15:11,430
features from pearl from Python from

00:15:06,410 --> 00:15:15,750
scheme I think from a lot of Ruby yep

00:15:11,430 --> 00:15:17,129
and it's way better than any language

00:15:15,750 --> 00:15:19,980
that I've worked in except for live

00:15:17,129 --> 00:15:22,279
script which is a fork of of that that

00:15:19,980 --> 00:15:24,360
makes it even better so people are

00:15:22,279 --> 00:15:26,509
CoffeeScript went really far and people

00:15:24,360 --> 00:15:28,980
are you know passing it even more

00:15:26,509 --> 00:15:32,480
including old pearl hackers like Audrey

00:15:28,980 --> 00:15:34,589
tang it's working on life's groups so

00:15:32,480 --> 00:15:36,389
let's back up a second I really haven't

00:15:34,589 --> 00:15:37,589
introduced acne is amor what it is how

00:15:36,389 --> 00:15:42,509
many people have heard the word equities

00:15:37,589 --> 00:15:45,660
and before okay so acne ism is my word

00:15:42,509 --> 00:15:47,399
that I came up with when I realized some

00:15:45,660 --> 00:15:50,670
time ago that almost every project that

00:15:47,399 --> 00:15:52,500
I was serious about involved all of the

00:15:50,670 --> 00:15:55,589
dining all of the o'reilly languages as

00:15:52,500 --> 00:15:57,209
i like to call them there was nothing

00:15:55,589 --> 00:16:01,129
that was really specific to pearl even

00:15:57,209 --> 00:16:03,779
though i did most of my work in pro so

00:16:01,129 --> 00:16:06,240
acne a syrup sharing good ideas across

00:16:03,779 --> 00:16:09,629
language borders now i'm going to go

00:16:06,240 --> 00:16:12,269
over to this web page right here okay i

00:16:09,629 --> 00:16:13,860
read this and it's actually I think it's

00:16:12,269 --> 00:16:15,420
nice acne isn't is the idea that

00:16:13,860 --> 00:16:17,250
creators of good ideas take them past

00:16:15,420 --> 00:16:18,140
formidable boundaries of their mother

00:16:17,250 --> 00:16:19,700
tongue

00:16:18,140 --> 00:16:22,040
programming this means that a great idea

00:16:19,700 --> 00:16:23,780
published as a ruby gem will perhaps

00:16:22,040 --> 00:16:25,400
with a dash achoo have added abstraction

00:16:23,780 --> 00:16:28,010
serve the note and Python communities

00:16:25,400 --> 00:16:29,480
equally well Angie who helped create

00:16:28,010 --> 00:16:31,460
yeah mellow the serialization language

00:16:29,480 --> 00:16:33,380
for format for all languages has

00:16:31,460 --> 00:16:35,090
published packages in most of the

00:16:33,380 --> 00:16:36,260
o'reilly languages and it's working on a

00:16:35,090 --> 00:16:38,720
tool chain that i'm talking about right

00:16:36,260 --> 00:16:42,320
now so that he can hack once push

00:16:38,720 --> 00:16:43,460
everywhere hope this talk is about those

00:16:42,320 --> 00:16:49,040
tools and some of the first food

00:16:43,460 --> 00:16:51,050
packages okay i thought that was well

00:16:49,040 --> 00:16:53,360
written you know you like go to write a

00:16:51,050 --> 00:16:55,340
talk and then you're like then you like

00:16:53,360 --> 00:16:57,500
look up a paging like wow I can't say it

00:16:55,340 --> 00:17:02,150
any better than that I didn't even

00:16:57,500 --> 00:17:03,620
remember saying it okay so it's the idea

00:17:02,150 --> 00:17:06,290
that language separates culture if you

00:17:03,620 --> 00:17:08,570
think about it the difference between us

00:17:06,290 --> 00:17:10,550
and cultures who speak different mother

00:17:08,570 --> 00:17:12,170
tongues are not really that much

00:17:10,550 --> 00:17:14,170
different in our day-to-day lives and

00:17:12,170 --> 00:17:16,070
the idea that our great ideas can

00:17:14,170 --> 00:17:18,350
sometimes get stopped at cultural

00:17:16,070 --> 00:17:20,390
borders when they don't really need to

00:17:18,350 --> 00:17:26,420
its that nobody takes the effort to get

00:17:20,390 --> 00:17:28,310
them over the language barrier pearl 5

00:17:26,420 --> 00:17:29,570
and Perl 6 nope we have two languages in

00:17:28,310 --> 00:17:31,940
our community and we're working at

00:17:29,570 --> 00:17:34,340
different ways of bringing them together

00:17:31,940 --> 00:17:35,720
but and I guess we're not really two

00:17:34,340 --> 00:17:39,170
different cultures where one culture

00:17:35,720 --> 00:17:41,180
which is great for a while well when we

00:17:39,170 --> 00:17:42,860
kind of separated like a cell trying to

00:17:41,180 --> 00:17:46,220
split but then it came back together and

00:17:42,860 --> 00:17:53,120
um but I think Perl 5 & Grill 6 could

00:17:46,220 --> 00:17:54,410
use a little activism so I'm going to

00:17:53,120 --> 00:18:00,080
give a lightning talk about the Rosetta

00:17:54,410 --> 00:18:02,900
code data project but it's um who's

00:18:00,080 --> 00:18:05,330
heard of Rosetta code or use it it's

00:18:02,900 --> 00:18:07,880
basically five hundred languages in 700

00:18:05,330 --> 00:18:09,680
tasks and a wiki implementing each of

00:18:07,880 --> 00:18:11,060
them different stuff but they also have

00:18:09,680 --> 00:18:12,920
these talk pages because it's a media

00:18:11,060 --> 00:18:14,060
wiki and reading those packages is

00:18:12,920 --> 00:18:15,860
really cool because you're reading about

00:18:14,060 --> 00:18:20,090
these like programmers from you know

00:18:15,860 --> 00:18:25,190
from the 60s on talking about cool

00:18:20,090 --> 00:18:28,340
concepts and the tangling some people

00:18:25,190 --> 00:18:30,230
think acne ism is this polyglot you know

00:18:28,340 --> 00:18:31,059
people who program in multiple languages

00:18:30,230 --> 00:18:32,409
and

00:18:31,059 --> 00:18:34,480
but that's not what it is at all a

00:18:32,409 --> 00:18:36,820
polygraph simply speaks multiple

00:18:34,480 --> 00:18:39,429
languages and most of you are polyglots

00:18:36,820 --> 00:18:44,460
I mean if most people do pearl and

00:18:39,429 --> 00:18:47,200
JavaScript probably in this room so an

00:18:44,460 --> 00:18:49,840
acne asst is an inventor and author or

00:18:47,200 --> 00:18:52,149
craftsman the people who I think create

00:18:49,840 --> 00:18:56,259
packages and that kind of thing in

00:18:52,149 --> 00:18:58,749
programming anyway and they're they're

00:18:56,259 --> 00:19:00,039
not satisfied and just giving to their

00:18:58,749 --> 00:19:01,720
own community they're going to do what

00:19:00,039 --> 00:19:06,909
it takes which is a lot of hard work to

00:19:01,720 --> 00:19:08,559
get them to other communities and I

00:19:06,909 --> 00:19:10,330
think that aqueous are a very rare breed

00:19:08,559 --> 00:19:14,610
I don't suspect that i'm going to make

00:19:10,330 --> 00:19:18,419
many acne a set of i've only made like

00:19:14,610 --> 00:19:22,029
3.25 agnes over the last five years so

00:19:18,419 --> 00:19:24,549
it's really hard and but the the hard

00:19:22,029 --> 00:19:25,840
part is it builds upon itself so once

00:19:24,549 --> 00:19:28,149
you get the bootstrapping of this kind

00:19:25,840 --> 00:19:30,820
of stuff it'll get easier and people can

00:19:28,149 --> 00:19:32,409
join in and you're like oh yeah i could

00:19:30,820 --> 00:19:36,429
write this for pearl or i could write it

00:19:32,409 --> 00:19:41,679
for twenty languages and war well i'll

00:19:36,429 --> 00:19:43,059
show you let's talk about that later and

00:19:41,679 --> 00:19:44,649
something made it into when i was in

00:19:43,059 --> 00:19:46,840
taiwan made me think of acne is amiss

00:19:44,649 --> 00:19:49,389
you know because it's kind of an ism so

00:19:46,840 --> 00:19:51,279
it's kind of sounds like a religion this

00:19:49,389 --> 00:19:52,929
is probably your timeline you know part

00:19:51,279 --> 00:19:54,789
of this is your timeline if depending on

00:19:52,929 --> 00:19:56,350
where you are as a hacker but you know

00:19:54,789 --> 00:19:59,379
you learn a language you write some code

00:19:56,350 --> 00:20:01,629
you get a programming job maybe you

00:19:59,379 --> 00:20:04,029
write an open source framework give a

00:20:01,629 --> 00:20:12,279
yap see talk start your own religion

00:20:04,029 --> 00:20:13,960
that's the standard timeline right so so

00:20:12,279 --> 00:20:18,159
i came across this project called da

00:20:13,960 --> 00:20:21,399
capo i was writing a command and some

00:20:18,159 --> 00:20:25,899
language a command-line tool and it

00:20:21,399 --> 00:20:29,110
needed getopt options and who's heard of

00:20:25,899 --> 00:20:30,789
a cop to anybody that's because it's not

00:20:29,110 --> 00:20:33,580
available in Perl but let me let me show

00:20:30,789 --> 00:20:35,409
you this this is i read about it and

00:20:33,580 --> 00:20:37,419
it's a great program basically i mean we

00:20:35,409 --> 00:20:39,070
have a million of these in perl but

00:20:37,419 --> 00:20:41,529
basically you just write the

00:20:39,070 --> 00:20:43,910
documentation for what your usage is

00:20:41,529 --> 00:20:45,770
going to be for the options and it

00:20:43,910 --> 00:20:48,560
and it parses everything perfectly for

00:20:45,770 --> 00:20:50,690
you so you know people type in their

00:20:48,560 --> 00:20:53,000
options and then if it fails they print

00:20:50,690 --> 00:20:54,680
that message but so it basically

00:20:53,000 --> 00:20:56,870
generates your get ups for you from

00:20:54,680 --> 00:20:58,010
stuff and I'm sure Damien has done lots

00:20:56,870 --> 00:20:59,660
of stuff like that and other people have

00:20:58,010 --> 00:21:01,160
as well but the cool thing about this

00:20:59,660 --> 00:21:04,610
project is it was originally written in

00:21:01,160 --> 00:21:06,230
Python and then people have acne asst

00:21:04,610 --> 00:21:10,490
twice ported it to all these languages

00:21:06,230 --> 00:21:12,950
except for pearl so I would like to with

00:21:10,490 --> 00:21:14,810
this tool chain i can write a peg ex

00:21:12,950 --> 00:21:17,900
Graham work for Doc opt and test ml test

00:21:14,810 --> 00:21:23,600
for it and publish to 25 languages as

00:21:17,900 --> 00:21:28,550
soon as they support 2,500 is so so so

00:21:23,600 --> 00:21:29,720
acne ism happens a little bit i'm going

00:21:28,550 --> 00:21:31,670
to introduce a new language to you

00:21:29,720 --> 00:21:35,090
called JSON why is anybody heard of JSON

00:21:31,670 --> 00:21:39,650
y or JSON II as we call it is that you

00:21:35,090 --> 00:21:42,140
Tommy I can't see so good it it's JSON

00:21:39,650 --> 00:21:44,390
without any syntax or we have a couple

00:21:42,140 --> 00:21:46,550
curlies and that's it it really is the

00:21:44,390 --> 00:21:49,460
same as this and actually it's a

00:21:46,550 --> 00:21:52,010
superset of JSON so any JSON is actually

00:21:49,460 --> 00:21:54,950
JSON why but you can leave out almost

00:21:52,010 --> 00:21:59,870
all the syntax and it's still means the

00:21:54,950 --> 00:22:02,300
exact same thing so in its on Sipan now

00:21:59,870 --> 00:22:04,520
and on rubygems now that's how i got

00:22:02,300 --> 00:22:07,340
into Ruby actually in December babcia

00:22:04,520 --> 00:22:10,640
fish you know Tom from London he wanted

00:22:07,340 --> 00:22:14,060
it in it was I my steez idea actually

00:22:10,640 --> 00:22:15,440
and uh but he wanted it in Ruby so then

00:22:14,060 --> 00:22:16,340
I had to learn Ruby and I thought it

00:22:15,440 --> 00:22:18,890
would take a week and I took three

00:22:16,340 --> 00:22:21,880
months but I love Ruby now I've given a

00:22:18,890 --> 00:22:28,880
talking Ruby at the Seattle Ruby Brigade

00:22:21,880 --> 00:22:31,850
about all this stuff so and here's a

00:22:28,880 --> 00:22:37,640
little rants in all of these things like

00:22:31,850 --> 00:22:39,410
CoffeeScript live script punctuation is

00:22:37,640 --> 00:22:40,850
kind of going you know this is kind of

00:22:39,410 --> 00:22:41,930
how can we leave off punctuation and

00:22:40,850 --> 00:22:43,010
still get the same thing I mean yeah

00:22:41,930 --> 00:22:46,310
Mille is done that for years right you

00:22:43,010 --> 00:22:48,830
don't have to quote hardly anything so I

00:22:46,310 --> 00:22:51,260
don't some people just seem to be tied

00:22:48,830 --> 00:22:53,000
to semicolons I think that all of these

00:22:51,260 --> 00:22:54,290
things we all know what curly braces

00:22:53,000 --> 00:22:56,419
mean and what friends me and what

00:22:54,290 --> 00:22:59,029
comments mean and what semicolons mean

00:22:56,419 --> 00:23:00,710
they should always be supported in new

00:22:59,029 --> 00:23:03,470
languages but they should always almost

00:23:00,710 --> 00:23:08,299
always be optional and omitted that's my

00:23:03,470 --> 00:23:10,009
rant so where did chase ani come from

00:23:08,299 --> 00:23:13,730
well I don't even like the language and

00:23:10,009 --> 00:23:15,590
I made it because MST he's like I had

00:23:13,730 --> 00:23:17,720
this idea for this thing I want to make

00:23:15,590 --> 00:23:21,470
it's like a JSON but you don't have to

00:23:17,720 --> 00:23:23,239
type in any symbols and I'm like all

00:23:21,470 --> 00:23:24,169
right let's define it what do you want

00:23:23,239 --> 00:23:25,639
it to do what do you want it to look

00:23:24,169 --> 00:23:28,460
like and he gave me some ideas we wrote

00:23:25,639 --> 00:23:29,989
up some tests and i wrote a grammar for

00:23:28,460 --> 00:23:33,080
it in peg X which I'll show you in a

00:23:29,989 --> 00:23:35,629
second and we made it and implement it

00:23:33,080 --> 00:23:40,970
in one day and I was on sleep am so the

00:23:35,629 --> 00:23:42,769
tool set is unfruitful already and we

00:23:40,970 --> 00:23:45,200
also released it in 25 languages same

00:23:42,769 --> 00:23:48,559
code same test same API and then I woke

00:23:45,200 --> 00:23:53,470
up but that's where I want to go that's

00:23:48,559 --> 00:23:53,470
the world I want to live in all right so

00:23:54,489 --> 00:23:59,929
let me show you the old peg XO who's

00:23:57,739 --> 00:24:02,239
heard of a peg the word that the term

00:23:59,929 --> 00:24:04,999
peg it means parser expression grammars

00:24:02,239 --> 00:24:08,600
and if you read the documentation of so5

00:24:04,999 --> 00:24:11,509
for perl 6 which is Perl 6 rules it

00:24:08,600 --> 00:24:15,249
describes pro 6 rules as a peg a peg is

00:24:11,509 --> 00:24:18,080
basically rec descent parsing grammars

00:24:15,249 --> 00:24:19,669
but they're being used all over the

00:24:18,080 --> 00:24:22,489
place now it's it's a very popular

00:24:19,669 --> 00:24:26,509
parsing technique there's no pre lexing

00:24:22,489 --> 00:24:28,600
and i won't go too much into it bass but

00:24:26,509 --> 00:24:31,369
basically when I looked at pearl six and

00:24:28,600 --> 00:24:33,919
I saw a pearl six rules I'm like oh this

00:24:31,369 --> 00:24:36,109
is great I mean besides you know pearl

00:24:33,919 --> 00:24:38,419
stitch is really slow and I it still has

00:24:36,109 --> 00:24:40,070
all those semicolons in it but this

00:24:38,419 --> 00:24:42,379
pearl six rules needs to be everywhere

00:24:40,070 --> 00:24:44,480
so I'm like what can I do I'm like well

00:24:42,379 --> 00:24:46,429
every language has reg ex is except for

00:24:44,480 --> 00:24:48,799
perl 6 of course you know so I'm like

00:24:46,429 --> 00:24:51,470
I'll make something very much like grill

00:24:48,799 --> 00:24:55,989
six rules that works everywhere reg ex

00:24:51,470 --> 00:24:55,989
is doing so I'm like who peg rig expects

00:24:57,159 --> 00:25:00,940
so let's take a look at

00:25:01,210 --> 00:25:07,910
some a peg X grammar so this is the peg

00:25:04,430 --> 00:25:11,660
X grammar for peg at six elf and maybe

00:25:07,910 --> 00:25:13,400
we should actually look at on the peg

00:25:11,660 --> 00:25:17,300
extremer for JSON e since I just showed

00:25:13,400 --> 00:25:21,470
you that so it's very simple JSON e is a

00:25:17,300 --> 00:25:22,940
sequence a map or in JSON is just a

00:25:21,470 --> 00:25:25,100
sequence or a map but there's a couple

00:25:22,940 --> 00:25:28,850
of other types of sequencer maps for

00:25:25,100 --> 00:25:32,150
JSON II a node is a matte sequins or

00:25:28,850 --> 00:25:34,550
scalar just like in JSON and so look at

00:25:32,150 --> 00:25:36,500
these um I actually stole this from real

00:25:34,550 --> 00:25:38,000
six that you can put the leading pipe in

00:25:36,500 --> 00:25:41,120
just so you can line up your pipes in

00:25:38,000 --> 00:25:42,890
front and switch things around that's

00:25:41,120 --> 00:25:46,130
the alternation so this means sequence

00:25:42,890 --> 00:25:48,140
or map or top sequence or things so

00:25:46,130 --> 00:25:52,670
every rule in here has to have a rule

00:25:48,140 --> 00:25:54,320
definition we keep going down unlike

00:25:52,670 --> 00:25:57,050
pearl six rules you have to account for

00:25:54,320 --> 00:26:00,020
white space but I got this from pegleg

00:25:57,050 --> 00:26:03,170
recently they use a minus which is a

00:26:00,020 --> 00:26:04,820
really nice the capital things are

00:26:03,170 --> 00:26:07,150
actually from another grammar that's

00:26:04,820 --> 00:26:10,760
built into Pegasus called atoms and

00:26:07,150 --> 00:26:12,560
instead of actually typing in the I mean

00:26:10,760 --> 00:26:14,810
it looks a little weird that I have to

00:26:12,560 --> 00:26:17,330
put al curly instead of just a curly

00:26:14,810 --> 00:26:19,280
brace there but it actually makes my

00:26:17,330 --> 00:26:22,310
intent very clear and I'm writing this

00:26:19,280 --> 00:26:25,790
once for 25 languages so my gosh I

00:26:22,310 --> 00:26:28,070
should be clear a pair is a string

00:26:25,790 --> 00:26:30,980
followed by maybe a colon with some

00:26:28,070 --> 00:26:32,780
white space around it followed by a node

00:26:30,980 --> 00:26:37,670
so we have a string and a node that's a

00:26:32,780 --> 00:26:38,960
pair and a mapping is a beginning curly

00:26:37,670 --> 00:26:42,230
any number of pairs and the closing

00:26:38,960 --> 00:26:45,380
curly but then there's also any way you

00:26:42,230 --> 00:26:46,580
go through that now here's here's

00:26:45,380 --> 00:26:48,650
something that's actually quite

00:26:46,580 --> 00:26:51,560
complicated this is anything between

00:26:48,650 --> 00:26:53,990
slashes actually becomes a real pearl

00:26:51,560 --> 00:26:57,860
reg ex or a real Ruby reg ex or real

00:26:53,990 --> 00:27:00,740
Python reg ex and you'll see that in a

00:26:57,860 --> 00:27:03,220
second this is syntax sugar for

00:27:00,740 --> 00:27:03,220
generating

00:27:05,460 --> 00:27:10,529
I compile what you're seeing right here

00:27:07,409 --> 00:27:12,120
to this which is just a simple data

00:27:10,529 --> 00:27:13,710
structure that you could dump and chase

00:27:12,120 --> 00:27:19,649
on our yeah my wife dumped it in ya mo

00:27:13,710 --> 00:27:21,809
here and that's the whole definition for

00:27:19,649 --> 00:27:27,919
the language this is the parser uses

00:27:21,809 --> 00:27:27,919
this to Parsons parsonage a sunny okay

00:27:28,370 --> 00:27:32,039
you can check out pic x i won't go too

00:27:30,570 --> 00:27:33,539
much more into the syntax unless there

00:27:32,039 --> 00:27:45,169
is any specific questions or

00:27:33,539 --> 00:27:48,770
observations actually see if the Posada

00:27:45,169 --> 00:27:51,990
I'll show you one Operator it's the % %

00:27:48,770 --> 00:27:54,210
% and actually pearl six rules took this

00:27:51,990 --> 00:27:57,000
back from peg X because I work with

00:27:54,210 --> 00:28:00,270
those guys a lot and pearl six rules

00:27:57,000 --> 00:28:02,070
defined it percent which means the thing

00:28:00,270 --> 00:28:03,840
on the left separated any number of

00:28:02,070 --> 00:28:05,190
those which is the star here separated

00:28:03,840 --> 00:28:08,070
by the thing on the right so this is

00:28:05,190 --> 00:28:09,720
node separated by commas and the commas

00:28:08,070 --> 00:28:11,130
may or may not be there because in JSON

00:28:09,720 --> 00:28:13,980
you really don't care about kind of so

00:28:11,130 --> 00:28:17,789
much but the % % means the trailing

00:28:13,980 --> 00:28:20,460
comma is also allowed so it was kind of

00:28:17,789 --> 00:28:29,159
proud to have committed to Perl 6 a

00:28:20,460 --> 00:28:35,870
nightly okay now I copy this line hope

00:28:29,159 --> 00:28:38,070
that actually works this is freakin cool

00:28:35,870 --> 00:28:40,559
I'm going to go back into that directory

00:28:38,070 --> 00:28:46,080
where this is the the peg X grammar for

00:28:40,559 --> 00:28:47,789
peg X itself and it's not too too large

00:28:46,080 --> 00:28:49,440
actually that the bottom section was an

00:28:47,789 --> 00:28:51,149
error handling section that was

00:28:49,440 --> 00:28:52,830
committed to me by somebody else but

00:28:51,149 --> 00:28:56,580
it's pretty small let me run this

00:28:52,830 --> 00:28:58,770
command and see if it works ok so that's

00:28:56,580 --> 00:29:01,440
let's look at this command what it's

00:28:58,770 --> 00:29:03,570
doing is reading in the peg X grammar

00:29:01,440 --> 00:29:06,120
and creating a compiler out of it that

00:29:03,570 --> 00:29:09,690
it's going to use to parse the peg X

00:29:06,120 --> 00:29:10,919
grammar so it's a very self metal

00:29:09,690 --> 00:29:15,690
recursive it should make your head

00:29:10,919 --> 00:29:17,830
explode now the cool thing is that and i

00:29:15,690 --> 00:29:20,740
think i have this cashed up here yeah

00:29:17,830 --> 00:29:22,450
so I can also parse it with you'll

00:29:20,740 --> 00:29:24,730
notice there was no code rules in the

00:29:22,450 --> 00:29:26,500
grammar right it was just defining what

00:29:24,730 --> 00:29:28,809
things were you put your code rules in

00:29:26,500 --> 00:29:31,570
an action class our receiver class and

00:29:28,809 --> 00:29:33,159
the cool thing is you can use different

00:29:31,570 --> 00:29:35,740
action or receiver classes since I don't

00:29:33,159 --> 00:29:38,260
allow code in the grammar itself you're

00:29:35,740 --> 00:29:42,039
free to repurpose the grammar for

00:29:38,260 --> 00:29:45,820
different things so in the first things

00:29:42,039 --> 00:29:48,610
first one here we see that it's a an

00:29:45,820 --> 00:29:49,870
array of hashes we put the the names of

00:29:48,610 --> 00:29:51,610
the things which is good for debugging

00:29:49,870 --> 00:29:53,440
but when you actually go to generate the

00:29:51,610 --> 00:29:56,919
ast 0 you really care about is that the

00:29:53,440 --> 00:29:59,799
data values one interesting thing about

00:29:56,919 --> 00:30:01,149
peg x is the reg ex is any captures or

00:29:59,799 --> 00:30:04,269
what actually pull data out of the

00:30:01,149 --> 00:30:07,330
stream that you're parsing and I won't

00:30:04,269 --> 00:30:12,760
go this great tutorial both tutorials on

00:30:07,330 --> 00:30:15,880
peg x4 how to use it any further so but

00:30:12,760 --> 00:30:17,830
let me show you one more so this is

00:30:15,880 --> 00:30:19,779
using so i use to receiver classes I

00:30:17,830 --> 00:30:21,100
have peg X tree and pick extra wrap

00:30:19,779 --> 00:30:35,320
which puts the rule name in front of

00:30:21,100 --> 00:30:40,529
each match there's also one called type

00:30:35,320 --> 00:30:40,529
it in I have demos yes

00:30:44,150 --> 00:30:51,170
so I'm going to load this this one's

00:30:48,830 --> 00:30:52,670
cool because that receiver class

00:30:51,170 --> 00:30:56,090
actually did something interesting with

00:30:52,670 --> 00:31:00,320
the data it made the final version so

00:30:56,090 --> 00:31:02,150
this is if you were to cat out the peg X

00:31:00,320 --> 00:31:03,380
llamo file it would be the exact same

00:31:02,150 --> 00:31:07,250
thing that's what's actually happening

00:31:03,380 --> 00:31:09,560
under the hood that's the actual thing

00:31:07,250 --> 00:31:12,620
for the peg X compiler for parsing it

00:31:09,560 --> 00:31:13,970
the parser passes all of its matches to

00:31:12,620 --> 00:31:14,990
that receiver which creates that data

00:31:13,970 --> 00:31:20,720
structure that we were looking at

00:31:14,990 --> 00:31:23,600
earlier so if your head hasn't exploded

00:31:20,720 --> 00:31:25,040
I don't know what I'm going to do so ok

00:31:23,600 --> 00:31:27,650
so the peg X challenge for me here's

00:31:25,040 --> 00:31:31,400
what I want to do I want to make HTML

00:31:27,650 --> 00:31:33,410
made making web pages and pretty things

00:31:31,400 --> 00:31:35,690
put it into the hands of everyone right

00:31:33,410 --> 00:31:38,750
i want to put parsers and grammars into

00:31:35,690 --> 00:31:39,980
the hands of everyone and actually what

00:31:38,750 --> 00:31:43,430
i'm doing is looking at all kinds of

00:31:39,980 --> 00:31:44,960
other grammar and parser projects and

00:31:43,430 --> 00:31:48,130
just taking the best ideas from them I

00:31:44,960 --> 00:31:50,420
want to make things simple as possible

00:31:48,130 --> 00:31:52,910
running out any language that you happen

00:31:50,420 --> 00:31:56,180
to be comfortable with make it faster

00:31:52,910 --> 00:31:58,340
than any other technology which you know

00:31:56,180 --> 00:32:02,960
talking to agents eh yesterday after his

00:31:58,340 --> 00:32:04,700
s reg ex talk have ideas for that way

00:32:02,960 --> 00:32:07,190
better error reporting CoffeeScript is

00:32:04,700 --> 00:32:10,460
miserable for error reporting I mean

00:32:07,190 --> 00:32:11,600
that's its big failure probably and then

00:32:10,460 --> 00:32:13,730
I want to make all these things easily

00:32:11,600 --> 00:32:15,200
subclass of also JSON II should just be

00:32:13,730 --> 00:32:17,030
a subclass of JSON you know there's a

00:32:15,200 --> 00:32:18,950
JSON grammar you're like let me tweak it

00:32:17,030 --> 00:32:21,050
a little addicts you know maybe I want

00:32:18,950 --> 00:32:22,460
to allow commas at the end of things

00:32:21,050 --> 00:32:23,990
even though they're strictly that added

00:32:22,460 --> 00:32:31,580
that's it would be easy for somebody to

00:32:23,990 --> 00:32:33,800
do okay so let me show you the JSON II

00:32:31,580 --> 00:32:37,150
test and I'll test mo is my test

00:32:33,800 --> 00:32:40,850
language and it actually won't meet you

00:32:37,150 --> 00:32:43,520
okay here's a test ml program for

00:32:40,850 --> 00:32:44,990
testing JSON II and you can you can

00:32:43,520 --> 00:32:47,420
really easily see what's happening here

00:32:44,990 --> 00:32:49,160
I have some description and I have some

00:32:47,420 --> 00:32:52,370
JSON II and some JSON and I'm probably

00:32:49,160 --> 00:32:55,490
going to see if they match now this is

00:32:52,370 --> 00:32:57,830
the actual test ml code it's saying it's

00:32:55,490 --> 00:32:59,149
a it's a sequence of method calls

00:32:57,830 --> 00:33:01,429
the things with stars in it's a look

00:32:59,149 --> 00:33:03,620
down in the data section below find

00:33:01,429 --> 00:33:05,600
everything that has a JSON e thing and

00:33:03,620 --> 00:33:08,299
also every block that has a JSON e a

00:33:05,600 --> 00:33:10,039
JSON section so you could have other

00:33:08,299 --> 00:33:11,240
kinds of data down then in there that

00:33:10,039 --> 00:33:12,799
didn't get processed by the statement

00:33:11,240 --> 00:33:15,700
put an implicit loop around that and

00:33:12,799 --> 00:33:18,740
then take the JSON E string pass it to

00:33:15,700 --> 00:33:20,720
JSON ed code which lives in what we call

00:33:18,740 --> 00:33:22,159
a bridge class which the the module

00:33:20,720 --> 00:33:24,649
author has to write because that's the

00:33:22,159 --> 00:33:26,750
bridge to its actual application dump it

00:33:24,649 --> 00:33:28,220
to yamo and then do the same thing pass

00:33:26,750 --> 00:33:31,250
it through json decode and make sure the

00:33:28,220 --> 00:33:35,179
two equal and so if I were to actually

00:33:31,250 --> 00:33:36,559
go over to JSON I p.m. well looks like

00:33:35,179 --> 00:33:37,789
I've already run the test but I can run

00:33:36,559 --> 00:33:40,190
that same test and that's what it looks

00:33:37,789 --> 00:33:42,799
like same as ever so the nice thing

00:33:40,190 --> 00:33:44,809
about test ml and pearl is you can mix

00:33:42,799 --> 00:33:46,429
it in with with regular pearl tests or

00:33:44,809 --> 00:33:48,500
at regular language tests it doesn't

00:33:46,429 --> 00:33:52,250
take over your testing environment but

00:33:48,500 --> 00:33:53,690
it does provide a way to to code test

00:33:52,250 --> 00:33:57,260
that will run on everything now actually

00:33:53,690 --> 00:33:58,549
those two lines of test demo make it

00:33:57,260 --> 00:33:59,720
look like it's just a trivial little

00:33:58,549 --> 00:34:03,860
language but you can actually define

00:33:59,720 --> 00:34:06,289
functions closures it has namespace

00:34:03,860 --> 00:34:09,859
scoping it's a full language I actually

00:34:06,289 --> 00:34:13,099
put it on rosetta code as a language it

00:34:09,859 --> 00:34:14,389
was the 500th language and those are the

00:34:13,099 --> 00:34:15,470
code that ordered i think there's 501

00:34:14,389 --> 00:34:27,260
now and that's true with the next one

00:34:15,470 --> 00:34:30,859
was soon okay who's heard of Tamil Tamil

00:34:27,260 --> 00:34:35,000
was so was Preston Werner with tom

00:34:30,859 --> 00:34:37,429
preston Werner is this pretty he's come

00:34:35,000 --> 00:34:41,560
up with a lot of things he's pretty

00:34:37,429 --> 00:34:43,399
popular blogger and Ruby guy and

00:34:41,560 --> 00:34:45,919
inventor I'm trying to think of what's

00:34:43,399 --> 00:34:51,080
the biggest thing he came up with can't

00:34:45,919 --> 00:34:52,339
remember anyway he's like I hate XD if

00:34:51,080 --> 00:34:56,270
you read the web page is pretty funny

00:34:52,339 --> 00:34:59,450
it's like yeah mo makes me want to tear

00:34:56,270 --> 00:35:02,030
my hair or just looking at this book it

00:34:59,450 --> 00:35:04,280
makes me I'm on can't really I should

00:35:02,030 --> 00:35:06,530
read it but anyway so Tom he came up

00:35:04,280 --> 00:35:08,859
with this spec overnight of what he

00:35:06,530 --> 00:35:10,450
thought would be the best config file

00:35:08,859 --> 00:35:12,040
format so with the

00:35:10,450 --> 00:35:14,380
he wouldn't have to use a center yeah

00:35:12,040 --> 00:35:17,500
Mon it's basically like in any with with

00:35:14,380 --> 00:35:20,260
less quotes you know less syntax and but

00:35:17,500 --> 00:35:21,609
was cool is all these people it says

00:35:20,260 --> 00:35:23,079
something about if you don't understand

00:35:21,609 --> 00:35:27,270
it you need more whiskey that was the

00:35:23,079 --> 00:35:29,829
funny part he got all these people to

00:35:27,270 --> 00:35:32,560
make implementations of Tamil overnight

00:35:29,829 --> 00:35:35,470
because he's a popular guy and so it was

00:35:32,560 --> 00:35:37,150
somewhat acne asst but I think that all

00:35:35,470 --> 00:35:38,589
these languages suck because you write a

00:35:37,150 --> 00:35:39,820
specification and then you make the

00:35:38,589 --> 00:35:41,140
implementations and they're all

00:35:39,820 --> 00:35:43,480
different they all have their own set of

00:35:41,140 --> 00:35:45,490
bugs different docs different api's and

00:35:43,480 --> 00:35:48,730
you really haven't created a standard

00:35:45,490 --> 00:35:50,890
anything so the whole spec and go

00:35:48,730 --> 00:35:56,980
implement everywhere model is pretty

00:35:50,890 --> 00:35:58,630
pretty field acne isms solves that by

00:35:56,980 --> 00:36:02,589
creating one code base with one set of

00:35:58,630 --> 00:36:04,329
tests one API you know but maybe maybe

00:36:02,589 --> 00:36:06,820
it's not the best API but you have that

00:36:04,329 --> 00:36:08,710
same functionality across languages and

00:36:06,820 --> 00:36:10,839
even you know even with any language

00:36:08,710 --> 00:36:17,079
you're not going to have perfect api's

00:36:10,839 --> 00:36:19,270
from every module contribution so these

00:36:17,079 --> 00:36:22,619
are the parts that make up a package you

00:36:19,270 --> 00:36:25,329
have like a JSON e you have a repo for

00:36:22,619 --> 00:36:30,520
the test ml sweet you have a repo for

00:36:25,329 --> 00:36:35,859
the grammar and then you have a repo for

00:36:30,520 --> 00:36:37,630
Ruby Perl Python node etc what I'm going

00:36:35,859 --> 00:36:41,920
to do is what I'm working on now is

00:36:37,630 --> 00:36:43,990
tying them all into an acme repo which

00:36:41,920 --> 00:36:53,109
actually uses the others as sub modules

00:36:43,990 --> 00:36:55,109
and pulls things in as needed and so and

00:36:53,109 --> 00:37:00,280
I know we're wrapping down here but um

00:36:55,109 --> 00:37:01,990
this is kind of the cool thing so i made

00:37:00,280 --> 00:37:03,640
this acne thing with a little bit of

00:37:01,990 --> 00:37:05,589
hand waving it's pretty much what i

00:37:03,640 --> 00:37:07,930
talked about earlier we have a changelog

00:37:05,589 --> 00:37:09,670
all lower case we have the packet siamo

00:37:07,930 --> 00:37:12,550
file all these files have real content

00:37:09,670 --> 00:37:14,170
in it because it was this was really a

00:37:12,550 --> 00:37:16,089
live script node project that I was

00:37:14,170 --> 00:37:17,829
working on and I just turned it I just

00:37:16,089 --> 00:37:18,560
renamed live script cafe script so I

00:37:17,829 --> 00:37:20,450
could

00:37:18,560 --> 00:37:21,680
and fix stuff out but it has to make

00:37:20,450 --> 00:37:26,210
file that I want to do and look what I

00:37:21,680 --> 00:37:32,020
can do I can say make NPM which is the

00:37:26,210 --> 00:37:35,780
node thing ok so what I just did was

00:37:32,020 --> 00:37:38,720
well if I say finds NP now I have an NPM

00:37:35,780 --> 00:37:41,540
directory which I could upload to to NPM

00:37:38,720 --> 00:37:47,260
and it has all these things it has these

00:37:41,540 --> 00:37:47,260
tests but I could also

00:37:56,680 --> 00:38:03,700
sure like a something that's going

00:37:59,829 --> 00:38:05,380
around I can say make test from here and

00:38:03,700 --> 00:38:08,559
I could say make pearl I could say make

00:38:05,380 --> 00:38:10,569
perl 6 it knows about the languages that

00:38:08,559 --> 00:38:11,770
I want to go to and has all the support

00:38:10,569 --> 00:38:14,349
to do this now this is going to fail the

00:38:11,770 --> 00:38:16,569
test because I might actually done

00:38:14,349 --> 00:38:18,040
writing the code but i think if we go to

00:38:16,569 --> 00:38:22,630
the top of this it actually passed one

00:38:18,040 --> 00:38:24,609
of the tests so that actually see deed

00:38:22,630 --> 00:38:27,099
into the npm and ran make tests in there

00:38:24,609 --> 00:38:28,690
ran whatever the testing facility was

00:38:27,099 --> 00:38:32,410
for python or node or whatever in this

00:38:28,690 --> 00:38:35,109
case it ran cafe script and it looks

00:38:32,410 --> 00:38:36,490
like a failed 14 test and passed one so

00:38:35,109 --> 00:38:38,619
i'm in the middle of development but

00:38:36,490 --> 00:38:42,880
that's a real thing when i'm gone i say

00:38:38,619 --> 00:38:49,420
make release and all the languages get

00:38:42,880 --> 00:38:53,950
built and released in one command so I'm

00:38:49,420 --> 00:38:55,540
going to quit there so I put way more

00:38:53,950 --> 00:38:56,500
into the talk than I I knew I could talk

00:38:55,540 --> 00:38:58,020
about what I'd like to take some

00:38:56,500 --> 00:39:01,859
questions why we've got a little time so

00:38:58,020 --> 00:39:04,859
we got a minute or two for questions

00:39:01,859 --> 00:39:04,859
anything

00:39:07,160 --> 00:39:16,969
well there's no questions and I'll okay

00:39:11,999 --> 00:39:16,969
so here's what hap yeah yeah yeah oh

00:39:21,769 --> 00:39:27,719
aaron so i'm alright so i'll give you

00:39:24,569 --> 00:39:29,579
one example matt wanted anything that

00:39:27,719 --> 00:39:32,309
was unquoted each word became in a way

00:39:29,579 --> 00:39:34,410
so like if i say i love lucy those three

00:39:32,309 --> 00:39:36,839
you know just that string it would be an

00:39:34,410 --> 00:39:38,400
array of i love and Lucy where is it

00:39:36,839 --> 00:39:40,140
yeah mo that would be one string so

00:39:38,400 --> 00:39:43,079
that's one difference it's it's not

00:39:40,140 --> 00:39:47,809
anywhere near the same but I took a few

00:39:43,079 --> 00:39:52,140
ideas from from ya mo and made it Jason

00:39:47,809 --> 00:39:53,849
superset this is what happens when you

00:39:52,140 --> 00:39:56,039
take all of the punctuation out of

00:39:53,849 --> 00:39:57,539
JavaScript and this is actual live

00:39:56,039 --> 00:39:59,430
script this actually works you don't

00:39:57,539 --> 00:40:00,479
need commas if you already have in a way

00:39:59,430 --> 00:40:01,859
here and you have literals in there

00:40:00,479 --> 00:40:03,239
right why would you need those you don't

00:40:01,859 --> 00:40:05,400
need semicolons have any of this stuff

00:40:03,239 --> 00:40:07,289
you don't need curly braces and you even

00:40:05,400 --> 00:40:09,599
have curly braces on a hash definition

00:40:07,289 --> 00:40:10,829
but it can figure that out you have a

00:40:09,599 --> 00:40:14,430
coal in there that's good enough right

00:40:10,829 --> 00:40:15,749
so that's where people are going I you

00:40:14,430 --> 00:40:18,209
know this would probably make Larry

00:40:15,749 --> 00:40:20,609
cringe you know because maybe

00:40:18,209 --> 00:40:24,150
linguistically it just works in the

00:40:20,609 --> 00:40:25,949
wrong way but a lot of people like this

00:40:24,150 --> 00:40:27,509
and you should be able to put in all

00:40:25,949 --> 00:40:29,609
those things if you want or leave them

00:40:27,509 --> 00:40:30,959
out so that's the way a lot of things

00:40:29,609 --> 00:40:33,539
happen to just kind of be going right

00:40:30,959 --> 00:40:35,099
now I'm not sure if it's you know maybe

00:40:33,539 --> 00:40:38,489
linguistically it will break down for

00:40:35,099 --> 00:40:44,670
even me but yeah the live service or

00:40:38,489 --> 00:40:47,470
Jersey just up is the library Jersey not

00:40:44,670 --> 00:40:50,440
returns JavaScript so

00:40:47,470 --> 00:40:52,420
return see but I don't know that oh yeah

00:40:50,440 --> 00:40:54,369
yeah that is implied sorry um yeah

00:40:52,420 --> 00:40:56,920
anything the last statement executed

00:40:54,369 --> 00:40:59,460
which would be this one or this one is

00:40:56,920 --> 00:41:06,190
returned in CoffeeScript or live script

00:40:59,460 --> 00:41:07,960
that's right so yeah I just put it in

00:41:06,190 --> 00:41:11,080
there i think i needed the c equals to

00:41:07,960 --> 00:41:12,220
get the curly this hash definition that

00:41:11,080 --> 00:41:23,560
i want to show off their so it's a

00:41:12,220 --> 00:41:25,270
little contrived yes yeah yeah yeah and

00:41:23,560 --> 00:41:28,840
actually if you go to lot if you go to

00:41:25,270 --> 00:41:30,099
live script net or CoffeeScript org both

00:41:28,840 --> 00:41:31,990
of those have facilities for actually

00:41:30,099 --> 00:41:34,030
typing code since they go to Java

00:41:31,990 --> 00:41:35,770
scripts the codes running the compilers

00:41:34,030 --> 00:41:37,869
running inside the browser and you can

00:41:35,770 --> 00:41:40,330
actually type in both or cut and paste

00:41:37,869 --> 00:41:56,609
stuff in and it'll show you in real time

00:41:40,330 --> 00:41:56,609
the result yeah nothing wrong with list

00:41:56,940 --> 00:42:03,630
except those / ends there you go

00:42:07,190 --> 00:42:12,380
okay so Audrey said to me once that

00:42:09,650 --> 00:42:14,030
Haskell makes writing parsers and

00:42:12,380 --> 00:42:17,619
compilers easy as pearl makes writing

00:42:14,030 --> 00:42:20,240
CGI programs which must die andy says

00:42:17,619 --> 00:42:22,010
acne isn't makes writing multi-language

00:42:20,240 --> 00:42:29,740
dsl's as easy as Haskell expression

00:42:22,010 --> 00:42:32,119
compilers I have these IRC channels

00:42:29,740 --> 00:42:33,890
which are you know pound whatever you

00:42:32,119 --> 00:42:37,609
heard about today on freenode that net

00:42:33,890 --> 00:42:40,700
stop by and and and help out if you want

00:42:37,609 --> 00:42:44,810
I mean test ml is real and purl peg X is

00:42:40,700 --> 00:42:48,770
real in peril and the other stuff is

00:42:44,810 --> 00:43:00,589
being bootstrapped up any other

00:42:48,770 --> 00:43:04,480
questions yet yes oh the decoupling of

00:43:00,589 --> 00:43:12,589
the code from the grammar um ranie ranie

00:43:04,480 --> 00:43:14,560
sorry does he doesn't like it but the

00:43:12,589 --> 00:43:17,390
part of the written I could get messy

00:43:14,560 --> 00:43:19,130
well Perl 6 allows code in the grammar I

00:43:17,390 --> 00:43:21,200
currently don't allow it and I'm a

00:43:19,130 --> 00:43:22,819
little bit on the fence about what to do

00:43:21,200 --> 00:43:24,829
but once you open it up people start

00:43:22,819 --> 00:43:27,290
piling it in and not getting their

00:43:24,829 --> 00:43:30,319
benefits to leaving it out in that I can

00:43:27,290 --> 00:43:33,740
actually put multiple receivers like if

00:43:30,319 --> 00:43:35,810
I have and so if people right grammars

00:43:33,740 --> 00:43:36,920
and I want to do something different

00:43:35,810 --> 00:43:38,780
with them I can just put a different

00:43:36,920 --> 00:43:40,940
action class on that no problem because

00:43:38,780 --> 00:43:44,089
I know for sure that you know they

00:43:40,940 --> 00:43:47,780
haven't bumped it up with with their own

00:43:44,089 --> 00:43:51,140
code but um peg X is actually evolving

00:43:47,780 --> 00:43:52,760
pretty quickly so there might be some I

00:43:51,140 --> 00:43:54,829
mean also the code that you would put in

00:43:52,760 --> 00:43:56,000
there would have to be acne as code so

00:43:54,829 --> 00:43:57,380
you'd have to come up with some language

00:43:56,000 --> 00:44:00,710
you know you couldn't just put pearl in

00:43:57,380 --> 00:44:02,780
the grammar that wouldn't really be

00:44:00,710 --> 00:44:04,310
serving pecks at all so I probably have

00:44:02,780 --> 00:44:11,119
to come up with some wispy send text to

00:44:04,310 --> 00:44:12,680
a that did the written yeah so yeah I

00:44:11,119 --> 00:44:15,829
mean most people you don't see that very

00:44:12,680 --> 00:44:17,810
much in the evenin peg I was looking at

00:44:15,829 --> 00:44:19,829
peg leg which is fantastic little thing

00:44:17,810 --> 00:44:27,940
that actually rainy uses a one

00:44:19,829 --> 00:44:35,500
Greg whatz is a fork of pagan leg and uh

00:44:27,940 --> 00:44:38,710
yeah yeah if you go to github / in G dot

00:44:35,500 --> 00:44:40,569
net which is int why do TN ET I have

00:44:38,710 --> 00:44:43,660
about 400 repos three or four hundred

00:44:40,569 --> 00:44:45,730
but if you search for PTX I actually

00:44:43,660 --> 00:44:47,829
suffix all of my as an acne estai have

00:44:45,730 --> 00:44:49,599
to suffix all my repos because if I for

00:44:47,829 --> 00:44:51,940
even for like JSON e i might have you

00:44:49,599 --> 00:44:54,040
know seven repos or for like the test

00:44:51,940 --> 00:44:55,329
Amell project I might have I have all

00:44:54,040 --> 00:44:58,839
these different repose for perl and

00:44:55,329 --> 00:45:02,079
python and intestinal and peg X so I

00:44:58,839 --> 00:45:04,810
suffix then with PGX and so you can get

00:45:02,079 --> 00:45:10,420
every peg X thing I've done by searching

00:45:04,810 --> 00:45:11,560
PGX that's just the grammars yes yeah I

00:45:10,420 --> 00:45:12,970
like to keep the grammars in their own

00:45:11,560 --> 00:45:30,250
repo so they can be reused for other

00:45:12,970 --> 00:45:32,079
things yes I only a long time ago I

00:45:30,250 --> 00:45:34,930
started only thinking in an abstractions

00:45:32,079 --> 00:45:38,500
and I can't really I mean don't hire me

00:45:34,930 --> 00:45:39,910
i don't really bang out code I can't

00:45:38,500 --> 00:45:41,770
even do like a little task that I've

00:45:39,910 --> 00:45:45,430
been asked to do without turning it into

00:45:41,770 --> 00:45:50,829
some huge abstraction but that's the way

00:45:45,430 --> 00:45:52,690
I think any other anything else all

00:45:50,829 --> 00:45:57,510
right well if you um if you want to bug

00:45:52,690 --> 00:45:57,510
me at lunchtime feel free thank you

00:45:59,980 --> 00:46:02,040

YouTube URL: https://www.youtube.com/watch?v=iP7Sgf1XbDk


