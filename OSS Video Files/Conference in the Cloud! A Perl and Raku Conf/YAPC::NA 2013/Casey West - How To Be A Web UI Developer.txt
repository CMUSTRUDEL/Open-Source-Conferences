Title: Casey West - How To Be A Web UI Developer
Publication date: 2013-08-20
Playlist: YAPC::NA 2013
Description: 
	In this talk I'll show how to use tools to build web application interfaces that will make you look like a rockstar. Your UI can be beautiful, functional, and well tested, too.

Much like our first time on CPAN, it can be difficult to know what tools are going to make your life easy, and make you a rockstar, and which won't.

If you're building web applications with Perl you'll want to have these time saving, happy-user creating tips, tricks, and tools at the ready. We will build a simple app using these tools so you can see them in action.

slides: https://speakerdeck.com/caseywest/how-to-be-a-web-ui-developer
Captions: 
	00:00:02,090 --> 00:00:12,780
how's that yeah okay excellent yeah so

00:00:10,700 --> 00:00:14,040
we're going to do a crash course i'm

00:00:12,780 --> 00:00:17,000
going to i'm going to talk through a lot

00:00:14,040 --> 00:00:20,240
of different technology stuff that i use

00:00:17,000 --> 00:00:23,310
either at work or on personal projects

00:00:20,240 --> 00:00:25,320
most of it is not pearl but you can use

00:00:23,310 --> 00:00:27,330
it with your pearl projects they are

00:00:25,320 --> 00:00:29,939
compatible so we'll be doing a little

00:00:27,330 --> 00:00:33,000
bit with some node projects nodejs who

00:00:29,939 --> 00:00:35,899
who's use some node j s yeah a few folks

00:00:33,000 --> 00:00:37,860
and we'll be doing a little bit with the

00:00:35,899 --> 00:00:40,440
CoffeeScript in some other metal

00:00:37,860 --> 00:00:44,040
languages so we're just going to kind of

00:00:40,440 --> 00:00:45,570
walk through getting a sort of a to-do

00:00:44,040 --> 00:00:48,390
app kik started but with a lot of these

00:00:45,570 --> 00:00:51,059
technologies that are kind of popular

00:00:48,390 --> 00:00:53,699
right now that might not be obvious if

00:00:51,059 --> 00:00:55,920
you're not in it if you use these tools

00:00:53,699 --> 00:00:57,780
then you will have a website that looks

00:00:55,920 --> 00:01:00,989
like all the other really cool Twitter

00:00:57,780 --> 00:01:05,100
bootstrap websites which is a bare

00:01:00,989 --> 00:01:07,890
minimum to look and really neat and that

00:01:05,100 --> 00:01:09,780
can be really helpful so as I said it's

00:01:07,890 --> 00:01:10,830
definitely a crash course we're going to

00:01:09,780 --> 00:01:15,060
leave some things out we're going to

00:01:10,830 --> 00:01:16,799
gloss over a few things i will put these

00:01:15,060 --> 00:01:19,710
slides up and you'll see that my twitter

00:01:16,799 --> 00:01:22,680
handle is up on the top right there i'll

00:01:19,710 --> 00:01:24,930
be posting to their about my slides so

00:01:22,680 --> 00:01:28,979
go ahead and follow me it'll be there

00:01:24,930 --> 00:01:30,990
all all session because the you know the

00:01:28,979 --> 00:01:33,990
cool kids who's used Twitter's I don't

00:01:30,990 --> 00:01:36,060
know already so the first thing that I

00:01:33,990 --> 00:01:39,299
want to talk about is html5 boilerplate

00:01:36,060 --> 00:01:42,360
who's used who's used this as a starter

00:01:39,299 --> 00:01:44,520
starting point okay so one of the things

00:01:42,360 --> 00:01:45,899
that really sucks about doing web

00:01:44,520 --> 00:01:47,250
development whenever you want to kick

00:01:45,899 --> 00:01:48,930
start a new project especially is

00:01:47,250 --> 00:01:51,030
figuring out like what your layouts

00:01:48,930 --> 00:01:52,920
going to be there are some really smart

00:01:51,030 --> 00:01:54,600
folks who have figured it out for us and

00:01:52,920 --> 00:01:57,450
did they put together this project

00:01:54,600 --> 00:01:59,219
called html5 boilerplate and it gives

00:01:57,450 --> 00:02:00,230
you some general guidelines and also a

00:01:59,219 --> 00:02:04,280
downloadable

00:02:00,230 --> 00:02:08,060
object that you can actually use excuse

00:02:04,280 --> 00:02:12,020
me to get rolling and there's actually a

00:02:08,060 --> 00:02:14,480
really cool tool called a boilerplate

00:02:12,020 --> 00:02:16,610
initializer they have several different

00:02:14,480 --> 00:02:19,670
flavors some of them are responsive

00:02:16,610 --> 00:02:20,930
there's one for Twitter bootstrap and

00:02:19,670 --> 00:02:24,710
then of course there's just a classic

00:02:20,930 --> 00:02:31,030
variety if you use this and you download

00:02:24,710 --> 00:02:33,500
the Twitter bootstrap kind like I have

00:02:31,030 --> 00:02:36,490
very very subtly highlighted there

00:02:33,500 --> 00:02:39,410
you'll get a starter project that has

00:02:36,490 --> 00:02:41,300
responsive web design so you are HTML

00:02:39,410 --> 00:02:44,090
and your Styles they'll work you know on

00:02:41,300 --> 00:02:47,990
the web browser on pads like iPads and

00:02:44,090 --> 00:02:50,720
tablets and phones and that's a really

00:02:47,990 --> 00:02:53,990
good way to get get rolling it also uses

00:02:50,720 --> 00:02:56,210
a moderniser and we'll talk about that

00:02:53,990 --> 00:02:58,160
in a minute but this is a really good

00:02:56,210 --> 00:02:59,450
way to get started it even has support

00:02:58,160 --> 00:03:03,470
as you can see down at the bottom there

00:02:59,450 --> 00:03:04,730
for old ie8 so how I guess I should

00:03:03,470 --> 00:03:06,440
actually start with how many of you are

00:03:04,730 --> 00:03:08,420
actually doing web development right now

00:03:06,440 --> 00:03:10,220
you're building things you have to do

00:03:08,420 --> 00:03:13,100
style sheets and javascript in that sort

00:03:10,220 --> 00:03:15,860
of nonsense yeah okay and how many of

00:03:13,100 --> 00:03:21,680
you have to support IE eight and like

00:03:15,860 --> 00:03:26,060
really old versions of ie 8 yeah from

00:03:21,680 --> 00:03:30,170
six to ie8 yeah so supporting ie6 is a

00:03:26,060 --> 00:03:32,209
wonderful thing to never do so in any

00:03:30,170 --> 00:03:35,320
case though moderniser is a nice tool

00:03:32,209 --> 00:03:37,220
and there are things called shims and

00:03:35,320 --> 00:03:39,260
poly fields which we'll talk about a

00:03:37,220 --> 00:03:40,880
minute as well so if you download this

00:03:39,260 --> 00:03:42,260
and you'll get an application structure

00:03:40,880 --> 00:03:45,050
that looks a little bit like what you

00:03:42,260 --> 00:03:46,850
see here it's actually already set up

00:03:45,050 --> 00:03:48,140
with some basic iconography if you're

00:03:46,850 --> 00:03:51,380
trying to do something that's going to

00:03:48,140 --> 00:03:53,060
work on on an iphone for example they'll

00:03:51,380 --> 00:03:55,820
give you the icons so that you can save

00:03:53,060 --> 00:03:57,819
to your desktop you get your basic style

00:03:55,820 --> 00:04:01,629
sheets you can see bootstrap there and

00:03:57,819 --> 00:04:03,280
main style sheet file and the images

00:04:01,629 --> 00:04:08,019
that you see there the glyph icons those

00:04:03,280 --> 00:04:10,840
are actually sprites for icons but we'll

00:04:08,019 --> 00:04:12,900
talk about how to not use those in a

00:04:10,840 --> 00:04:17,799
little while who knows what sprites are

00:04:12,900 --> 00:04:19,209
yeah okay so so a little bit so when

00:04:17,799 --> 00:04:20,289
you're doing web development and your

00:04:19,209 --> 00:04:22,810
designer comes to you and they want to

00:04:20,289 --> 00:04:26,620
add like a million icons and images all

00:04:22,810 --> 00:04:30,280
over your nice app and you have to code

00:04:26,620 --> 00:04:31,870
the image files sprites help you cut

00:04:30,280 --> 00:04:34,810
down on the on the size and the number

00:04:31,870 --> 00:04:36,729
of HTTP requests that your front end

00:04:34,810 --> 00:04:38,740
makes to your web servers and the way

00:04:36,729 --> 00:04:40,060
that that happens is one is sort of a

00:04:38,740 --> 00:04:42,099
build process where you take all of

00:04:40,060 --> 00:04:45,190
these images and you compile them

00:04:42,099 --> 00:04:47,830
together into one big image and then you

00:04:45,190 --> 00:04:49,599
use style sheets to reference sections

00:04:47,830 --> 00:04:51,960
of that image whenever you want to get a

00:04:49,599 --> 00:04:55,419
particular image and you do that with

00:04:51,960 --> 00:04:58,810
with positioning actual explicit

00:04:55,419 --> 00:05:01,120
positions and pixels within your sprite

00:04:58,810 --> 00:05:02,680
file so that makes one image hopefully

00:05:01,120 --> 00:05:06,400
if you're if you can get everything into

00:05:02,680 --> 00:05:09,370
a sprite and a set of style sheets and

00:05:06,400 --> 00:05:12,520
then that's one download instead of 500

00:05:09,370 --> 00:05:13,870
will say so that's really handy and then

00:05:12,520 --> 00:05:16,330
you can see there's a there's some

00:05:13,870 --> 00:05:18,099
JavaScript with some vendor and that Ven

00:05:16,330 --> 00:05:21,310
during in this case when you download

00:05:18,099 --> 00:05:24,270
from html5 boilerplate that will have

00:05:21,310 --> 00:05:26,530
jQuery and it will have some bootstrap

00:05:24,270 --> 00:05:28,810
javascript stuff who's used bootstrap

00:05:26,530 --> 00:05:32,080
here from twitter it's it's a really

00:05:28,810 --> 00:05:33,940
nice project you know it does make all

00:05:32,080 --> 00:05:35,620
websites look the same but you know it's

00:05:33,940 --> 00:05:38,830
a good look so I don't think it's that

00:05:35,620 --> 00:05:40,449
terrible so let's look at what we

00:05:38,830 --> 00:05:42,550
actually get in the HTML we can step

00:05:40,449 --> 00:05:45,340
through this a little bit right at the

00:05:42,550 --> 00:05:47,530
top here you can see a bunch of if

00:05:45,340 --> 00:05:50,070
statements in HTML comments this is

00:05:47,530 --> 00:05:53,469
specialized Internet Explorer

00:05:50,070 --> 00:05:56,889
conditional commenting that lets you

00:05:53,469 --> 00:05:58,240
specify what portions of HTML will

00:05:56,889 --> 00:06:00,340
actually be rendered and which ones will

00:05:58,240 --> 00:06:01,590
just be the comments so they'll be

00:06:00,340 --> 00:06:05,730
ignored by the rendering

00:06:01,590 --> 00:06:07,560
engine other web browsers they do ignore

00:06:05,730 --> 00:06:10,430
this completely it's only IE eight or

00:06:07,560 --> 00:06:12,420
sorry not ie8 just IE in general

00:06:10,430 --> 00:06:15,570
microsoft invented it so that's why it's

00:06:12,420 --> 00:06:16,350
that ugly and you can see that what

00:06:15,570 --> 00:06:18,990
we're doing here is we're actually

00:06:16,350 --> 00:06:20,850
adding classes to the HTML to say you

00:06:18,990 --> 00:06:23,960
know this is less than ie9 less than i

00:06:20,850 --> 00:06:27,840
ate less than I seven you can use that

00:06:23,960 --> 00:06:29,310
both in your JavaScript to know whether

00:06:27,840 --> 00:06:30,930
or not you have certain functionality

00:06:29,310 --> 00:06:32,850
available to you in the web browser and

00:06:30,930 --> 00:06:35,340
you can also use it in your style sheets

00:06:32,850 --> 00:06:37,830
I've found its most useful in your style

00:06:35,340 --> 00:06:40,590
sheets because for Java scripts and

00:06:37,830 --> 00:06:41,940
foremost styles we have again what are

00:06:40,590 --> 00:06:45,450
called polyfills which I'll talk about a

00:06:41,940 --> 00:06:50,630
minute but your website is going to look

00:06:45,450 --> 00:06:50,630
really good in WebKit browsers like

00:06:53,900 --> 00:07:03,000
sorry about that Spotify I wanted to

00:06:57,780 --> 00:07:05,040
play a song yeah yeah so like the

00:07:03,000 --> 00:07:06,840
subtext of this talk was you know how to

00:07:05,040 --> 00:07:10,380
be a web UI developer or you know how to

00:07:06,840 --> 00:07:11,850
be a rock star and that's not why I'm

00:07:10,380 --> 00:07:15,030
drinking the mimosas that's to help from

00:07:11,850 --> 00:07:20,520
last night but you know I guess I wanted

00:07:15,030 --> 00:07:24,630
to play music so no so we have these

00:07:20,520 --> 00:07:26,730
conditional HTML blocks because your

00:07:24,630 --> 00:07:28,860
website will look good in WebKit so

00:07:26,730 --> 00:07:32,340
that's Chrome and Safari and even

00:07:28,860 --> 00:07:34,860
Firefox most of the time by using one

00:07:32,340 --> 00:07:36,540
kind of style but with Internet Explorer

00:07:34,860 --> 00:07:40,430
you tend to have to finesse it a little

00:07:36,540 --> 00:07:43,290
bit at least ie less than nine or ten

00:07:40,430 --> 00:07:45,660
then we move on we can see some basic

00:07:43,290 --> 00:07:49,260
style sheets here we load bootstrap we

00:07:45,660 --> 00:07:52,230
do a little little tweak to handle

00:07:49,260 --> 00:07:54,060
bootstraps top navigation bar and we'll

00:07:52,230 --> 00:07:55,410
see that in a minute you guys have seen

00:07:54,060 --> 00:07:56,730
websites that look like this so you'll

00:07:55,410 --> 00:07:58,740
see you'll see exactly what I'm talking

00:07:56,730 --> 00:08:00,540
about and then of course we load the

00:07:58,740 --> 00:08:02,160
responsive style sheets and then our

00:08:00,540 --> 00:08:04,290
main style sheet and then we load this

00:08:02,160 --> 00:08:08,670
thing called a moderniser and respond

00:08:04,290 --> 00:08:11,370
respond goes with moderniser to help

00:08:08,670 --> 00:08:12,720
with with legacy support basically

00:08:11,370 --> 00:08:14,850
that's the concept

00:08:12,720 --> 00:08:18,000
that web web developers use to describe

00:08:14,850 --> 00:08:23,250
Internet Explorer is legacy software did

00:08:18,000 --> 00:08:29,130
you have a question no that is legit

00:08:23,250 --> 00:08:32,460
straight up HTML code yes yeah it is so

00:08:29,130 --> 00:08:36,390
I'll explain that is Internet Explorer

00:08:32,460 --> 00:08:39,330
specific okay they're called conditional

00:08:36,390 --> 00:08:40,770
comments and and it's it's a thing but I

00:08:39,330 --> 00:08:42,750
think Internet Explorer is the only one

00:08:40,770 --> 00:08:44,640
that uses it like it's part of the

00:08:42,750 --> 00:08:47,120
standard but internet explorer uses this

00:08:44,640 --> 00:08:49,860
to understand whether or not it should

00:08:47,120 --> 00:08:53,580
use certain HTML in your page if you

00:08:49,860 --> 00:08:57,750
have conditional commenting on yeah

00:08:53,580 --> 00:09:03,990
what's in ie10 drop support for them

00:08:57,750 --> 00:09:08,630
okay well there you go so I like

00:09:03,990 --> 00:09:11,130
standards-compliant it so let's get it

00:09:08,630 --> 00:09:12,990
let's get into moderniser real quick and

00:09:11,130 --> 00:09:16,050
this is a tool that's really going to

00:09:12,990 --> 00:09:19,080
help you out this is a it's what it's

00:09:16,050 --> 00:09:21,570
let me let me look here it detects html5

00:09:19,080 --> 00:09:23,160
and css3 features in the browser so it

00:09:21,570 --> 00:09:26,610
runs a bunch of tests on your browser to

00:09:23,160 --> 00:09:28,589
determine what it's capable of what kind

00:09:26,610 --> 00:09:30,089
of functionality it has so if you are

00:09:28,589 --> 00:09:32,060
going to build a web app that uses a

00:09:30,089 --> 00:09:34,110
geolocation services or local storage

00:09:32,060 --> 00:09:36,000
moderniser is actually going to detect

00:09:34,110 --> 00:09:37,650
those to determine whether or not your

00:09:36,000 --> 00:09:39,960
your web browser has that functionality

00:09:37,650 --> 00:09:46,290
and then if it doesn't and you need it

00:09:39,960 --> 00:09:47,460
you can then use a polyfill and a

00:09:46,290 --> 00:09:50,610
polyfill is something that actually

00:09:47,460 --> 00:09:55,500
tries to fill in the gap of browser

00:09:50,610 --> 00:09:58,790
support so for example websockets HTTP

00:09:55,500 --> 00:10:00,780
push or to a socket i/o communication

00:09:58,790 --> 00:10:02,100
versions of Internet Explorer older

00:10:00,780 --> 00:10:04,320
versions of Firefox that sort of thing

00:10:02,100 --> 00:10:05,670
they don't support it so moderniser

00:10:04,320 --> 00:10:09,120
would detect it and then you can

00:10:05,670 --> 00:10:10,830
actually use other polyfills to fill in

00:10:09,120 --> 00:10:13,440
the gap and give you a functionality

00:10:10,830 --> 00:10:18,800
that has the same interface that uses

00:10:13,440 --> 00:10:21,240
say straight-up ajax respond j/s is a

00:10:18,800 --> 00:10:22,780
polyfill specifically for the men and

00:10:21,240 --> 00:10:25,180
maximum width

00:10:22,780 --> 00:10:27,460
media queries and stylesheets will see

00:10:25,180 --> 00:10:30,870
that in a little bit that's what lets

00:10:27,460 --> 00:10:33,910
you do responsive design where you can

00:10:30,870 --> 00:10:37,380
specify certain styles to be applied if

00:10:33,910 --> 00:10:41,140
your viewport if you if the rendering

00:10:37,380 --> 00:10:48,760
size is within a certain minimum or

00:10:41,140 --> 00:10:51,310
maximum pixel width the modernizer

00:10:48,760 --> 00:10:52,600
actually has a list and i have a link

00:10:51,310 --> 00:10:53,830
here in my speaker notes and i didn't

00:10:52,600 --> 00:10:56,680
put it on my slide because it's really

00:10:53,830 --> 00:11:01,210
long but you'll see it when you download

00:10:56,680 --> 00:11:02,830
the the talk it has a long list sort of

00:11:01,210 --> 00:11:05,490
a comprehensive list on its github page

00:11:02,830 --> 00:11:24,490
and one of its wiki pages for polyfills

00:11:05,490 --> 00:11:27,750
how's it goin time I did yes okay don't

00:11:24,490 --> 00:11:30,550
let me forget that are we good now yeah

00:11:27,750 --> 00:11:33,760
was there crackling yeah I didn't hear

00:11:30,550 --> 00:11:36,420
any of it nice okay well I'm glad that

00:11:33,760 --> 00:11:36,420
didn't affect me

00:11:36,999 --> 00:11:42,529
okay so you'll get a list of those

00:11:40,429 --> 00:11:44,869
polyfills this is actually what happens

00:11:42,529 --> 00:11:47,329
to your HTML we start out with something

00:11:44,869 --> 00:11:49,339
simple like a class called nodejs and

00:11:47,329 --> 00:11:50,660
then we move in that's the default by

00:11:49,339 --> 00:11:54,679
the way to assume that there's no

00:11:50,660 --> 00:11:56,269
JavaScript available at all and then it

00:11:54,679 --> 00:11:57,920
actually fills in everything that our

00:11:56,269 --> 00:12:01,759
browser is capable of so I did this on

00:11:57,920 --> 00:12:06,529
on Chrome on my mac and you know I have

00:12:01,759 --> 00:12:10,519
canvas support and geolocation indexdb

00:12:06,529 --> 00:12:12,139
we have a hash change in history in all

00:12:10,519 --> 00:12:15,439
the sort of stuff and you can see it all

00:12:12,139 --> 00:12:17,089
in here it's really neat to use

00:12:15,439 --> 00:12:19,339
moderniser just to look at the

00:12:17,089 --> 00:12:21,949
differences in support for your

00:12:19,339 --> 00:12:32,149
different browsers but it is really

00:12:21,949 --> 00:12:35,569
helpful for for IE in particular okay so

00:12:32,149 --> 00:12:37,129
moving on with html5 boilerplate because

00:12:35,569 --> 00:12:39,739
we chose the bootstrap variety it then

00:12:37,129 --> 00:12:43,899
moves on to fill out a navigation bar in

00:12:39,739 --> 00:12:46,879
this case this is a navigation bar that

00:12:43,899 --> 00:12:49,249
is responsive and it's bootstrap

00:12:46,879 --> 00:12:52,160
compatible so you can see bootstrap

00:12:49,249 --> 00:12:54,740
works by being unobtrusive and by

00:12:52,160 --> 00:12:57,410
inferring what type of styles it should

00:12:54,740 --> 00:12:59,689
apply to your web page based on the

00:12:57,410 --> 00:13:01,699
classes that you use and that's really

00:12:59,689 --> 00:13:03,319
nice it allows you to be expressive in

00:13:01,699 --> 00:13:06,499
the way that you write your HTML in your

00:13:03,319 --> 00:13:09,439
markup without having to do anything

00:13:06,499 --> 00:13:11,209
particularly fancy or special just for

00:13:09,439 --> 00:13:14,119
bootstrap it kind of pays attention to

00:13:11,209 --> 00:13:17,049
what your HTML says and then it applies

00:13:14,119 --> 00:13:19,579
styles or functionality if you're using

00:13:17,049 --> 00:13:23,240
bootstraps JavaScript capability it will

00:13:19,579 --> 00:13:27,220
apply you know actual functionality like

00:13:23,240 --> 00:13:29,540
popovers and tool tips & modal's and

00:13:27,220 --> 00:13:32,809
accordions and all kinds of cool stuff

00:13:29,540 --> 00:13:34,489
in this case we have a couple of

00:13:32,809 --> 00:13:36,410
sections here there's a general navbar

00:13:34,489 --> 00:13:39,319
container and then there's also a little

00:13:36,410 --> 00:13:40,610
collapsible icon you've probably seen

00:13:39,319 --> 00:13:42,799
that on your phone where there's a

00:13:40,610 --> 00:13:44,299
little icon on the top right and then

00:13:42,799 --> 00:13:46,009
you can navigate on a page that's what

00:13:44,299 --> 00:13:47,689
that's what this is it's actually one of

00:13:46,009 --> 00:13:48,410
the most clunky parts of bootstrap in my

00:13:47,689 --> 00:13:50,660
opinion

00:13:48,410 --> 00:13:52,310
because in order to get that little icon

00:13:50,660 --> 00:13:53,899
with the three dashes you actually use

00:13:52,310 --> 00:13:57,699
three strands in a row that are just

00:13:53,899 --> 00:14:00,769
empty HTML linters really hate this and

00:13:57,699 --> 00:14:04,009
eliminate them so do be careful if

00:14:00,769 --> 00:14:06,470
you're going to linear HTML then we have

00:14:04,009 --> 00:14:09,379
a standard brand name that class brand

00:14:06,470 --> 00:14:10,579
is significant to to bootstrap but

00:14:09,379 --> 00:14:13,490
that's all I have to do to get something

00:14:10,579 --> 00:14:15,079
that looks nice and then of course the

00:14:13,490 --> 00:14:19,730
portion of the navbar that's collapsible

00:14:15,079 --> 00:14:21,649
in this case you know just any go boost

00:14:19,730 --> 00:14:25,519
to me really with my Twitter account

00:14:21,649 --> 00:14:27,680
there the content is also pretty simple

00:14:25,519 --> 00:14:33,379
it's a standard grid system have we all

00:14:27,680 --> 00:14:35,149
used grid systems at 9 60 GS 11 40

00:14:33,379 --> 00:14:39,379
pixels bootstrap is a grid system

00:14:35,149 --> 00:14:42,500
anybody know yes a couple okay so HTML

00:14:39,379 --> 00:14:45,139
grid systems allow you to to be able to

00:14:42,500 --> 00:14:48,319
lay out your page using a grid it's kind

00:14:45,139 --> 00:14:49,540
of like tables but it's not we call it

00:14:48,319 --> 00:14:55,009
div so it's actually a lot better

00:14:49,540 --> 00:14:57,740
because we use the different word and so

00:14:55,009 --> 00:14:59,509
it's all good but in this case you can

00:14:57,740 --> 00:15:02,149
see that we set up a container and then

00:14:59,509 --> 00:15:04,670
we set up rose and then within that we

00:15:02,149 --> 00:15:07,970
actually have spanned chunks in this

00:15:04,670 --> 00:15:11,990
case you know span chunk of four by

00:15:07,970 --> 00:15:13,490
default bootstrap uses 12 columns that

00:15:11,990 --> 00:15:15,380
you can apply in each row and then you

00:15:13,490 --> 00:15:17,660
can set spans specific to each of them

00:15:15,380 --> 00:15:18,860
you don't have to be a layout expert

00:15:17,660 --> 00:15:20,060
anymore and that's something that is

00:15:18,860 --> 00:15:22,310
really nice and you also don't have to

00:15:20,060 --> 00:15:24,290
fall back on tables you can just use

00:15:22,310 --> 00:15:26,389
these spans in this particular case a

00:15:24,290 --> 00:15:28,490
span of four with an offset of four

00:15:26,389 --> 00:15:29,870
which actually means I'm putting a small

00:15:28,490 --> 00:15:31,399
column right in the middle of the page

00:15:29,870 --> 00:15:33,230
that's all I have to do I don't have to

00:15:31,399 --> 00:15:36,259
worry about anything else it's just in

00:15:33,230 --> 00:15:39,589
the middle of the page I do that twice

00:15:36,259 --> 00:15:42,709
so this is a tiny little to-do app idea

00:15:39,589 --> 00:15:45,139
and so I have a list of things to do and

00:15:42,709 --> 00:15:48,290
then I have a little form with with an

00:15:45,139 --> 00:15:50,779
input box that form is also just styled

00:15:48,290 --> 00:15:54,259
automatically for me from bootstrap it

00:15:50,779 --> 00:15:56,569
looks pretty good right by default and

00:15:54,259 --> 00:15:58,399
then at the end of the page we have our

00:15:56,569 --> 00:16:01,279
JavaScript because you put your

00:15:58,399 --> 00:16:03,439
JavaScript typically at the end of

00:16:01,279 --> 00:16:04,730
your body page I know we we've all

00:16:03,439 --> 00:16:06,680
probably especially we're kind of

00:16:04,730 --> 00:16:08,420
old-school we've been taught to try and

00:16:06,680 --> 00:16:10,910
put all of our scripts in the head of a

00:16:08,420 --> 00:16:12,860
document it slows down the document

00:16:10,910 --> 00:16:15,889
rendering you have to pull all that

00:16:12,860 --> 00:16:18,019
stuff in and this way by the time your

00:16:15,889 --> 00:16:19,759
javascript is loaded your dumb is nearly

00:16:18,019 --> 00:16:21,920
complete or already completely rendered

00:16:19,759 --> 00:16:24,829
and you can get started right away using

00:16:21,920 --> 00:16:27,829
your javascript so we have in this case

00:16:24,829 --> 00:16:30,709
by default some Google API stuff to pull

00:16:27,829 --> 00:16:32,420
out jquery from the google api's that's

00:16:30,709 --> 00:16:34,399
using a content delivery system a

00:16:32,420 --> 00:16:35,839
content delivery network that belongs to

00:16:34,399 --> 00:16:39,319
google that we don't have to set up and

00:16:35,839 --> 00:16:42,790
maintain and that means that because

00:16:39,319 --> 00:16:46,749
we're doing that most of us on our

00:16:42,790 --> 00:16:50,689
laptops today right here have a copy of

00:16:46,749 --> 00:16:53,120
google's jquery version 1.9 point one

00:16:50,689 --> 00:16:54,439
and because we have a copy from google

00:16:53,120 --> 00:16:56,240
we don't have to download it again

00:16:54,439 --> 00:16:58,670
whenever we load up someone else's that

00:16:56,240 --> 00:17:01,069
that's kind of a nice thing you do have

00:16:58,670 --> 00:17:02,930
to you know expect them to keep it

00:17:01,069 --> 00:17:04,250
around and that's kind of a problem so

00:17:02,930 --> 00:17:07,299
we have a little bit of fall back here

00:17:04,250 --> 00:17:10,780
the next script line says well if our

00:17:07,299 --> 00:17:13,939
window object our global has a jquery

00:17:10,780 --> 00:17:16,990
property then we're good but if we don't

00:17:13,939 --> 00:17:19,339
then we'll load jquery from our local

00:17:16,990 --> 00:17:23,750
copy just in case so it's a nice

00:17:19,339 --> 00:17:25,159
fallback next and so you have to decide

00:17:23,750 --> 00:17:27,230
if you want to do that or not you know

00:17:25,159 --> 00:17:29,990
at my job at white hat we we can't rely

00:17:27,230 --> 00:17:31,610
on Google to serve anything for us so we

00:17:29,990 --> 00:17:33,770
can't do that but it's nice if you're

00:17:31,610 --> 00:17:36,950
doing something public and it's a nice

00:17:33,770 --> 00:17:40,130
service that they provide next we pull

00:17:36,950 --> 00:17:41,720
up the the boots boot strap j/s that

00:17:40,130 --> 00:17:43,190
gives us a lot of functionality like i

00:17:41,720 --> 00:17:45,710
said before tool tips on accordions and

00:17:43,190 --> 00:17:47,720
whatnot and then our main javascript

00:17:45,710 --> 00:17:50,570
file so that's the basics of HTML

00:17:47,720 --> 00:17:52,070
boilerplate html5 boilerplate gets it

00:17:50,570 --> 00:17:54,530
gives you a lot to get started if you

00:17:52,070 --> 00:17:55,610
just need an HTML page with some decent

00:17:54,530 --> 00:17:58,460
style and you're not trying to do

00:17:55,610 --> 00:17:59,840
anything fancy with javascript it's

00:17:58,460 --> 00:18:01,880
actually a really good place to get

00:17:59,840 --> 00:18:03,049
started you can get rolling within

00:18:01,880 --> 00:18:04,520
minutes and you don't have to do a lot

00:18:03,049 --> 00:18:08,149
of the work you don't have to sit there

00:18:04,520 --> 00:18:09,919
and type out the HTML I recommend it now

00:18:08,149 --> 00:18:12,169
the next project that I want to talk

00:18:09,919 --> 00:18:13,230
about is mimosa has anyone used well

00:18:12,169 --> 00:18:18,630
look at that has anyone

00:18:13,230 --> 00:18:21,059
just mimosa you tried to oh you drank it

00:18:18,630 --> 00:18:27,770
fantastic so you did use mimosa right I

00:18:21,059 --> 00:18:33,090
see what you did there so mimosa is

00:18:27,770 --> 00:18:35,750
actually a build and compilation tool a

00:18:33,090 --> 00:18:38,280
tool that watches your your front-end

00:18:35,750 --> 00:18:41,720
assets HTML style sheets in JavaScript

00:18:38,280 --> 00:18:44,040
and it will monitor when they change

00:18:41,720 --> 00:18:48,390
when these things change and they will

00:18:44,040 --> 00:18:49,830
actually build copies because one of the

00:18:48,390 --> 00:18:50,880
things that happens to developers is we

00:18:49,830 --> 00:18:52,980
write thousands of lines of JavaScript

00:18:50,880 --> 00:18:55,950
and style sheets because that's what we

00:18:52,980 --> 00:18:57,480
do and then we try and load it up in the

00:18:55,950 --> 00:18:59,100
browser and of course we write it in a

00:18:57,480 --> 00:19:01,290
modular way so we have you know 50

00:18:59,100 --> 00:19:02,730
stylesheet files and fifty JavaScript

00:19:01,290 --> 00:19:04,860
files you try and load it up in a

00:19:02,730 --> 00:19:06,720
browser and in IE for example you find

00:19:04,860 --> 00:19:08,640
out that actually timeouts and times out

00:19:06,720 --> 00:19:09,840
and doesn't load all the grass 'it's or

00:19:08,640 --> 00:19:11,880
you find out that it just takes too long

00:19:09,840 --> 00:19:15,030
mimosa actually helps with this process

00:19:11,880 --> 00:19:17,429
it will compile your javascript and your

00:19:15,030 --> 00:19:19,260
style sheets for you into nice pretty

00:19:17,429 --> 00:19:21,450
packages that are really easy for your

00:19:19,260 --> 00:19:22,530
users to download it will also make

00:19:21,450 --> 00:19:24,510
front-end development really easy

00:19:22,530 --> 00:19:27,120
because it will fire up a web server and

00:19:24,510 --> 00:19:29,580
do live reload so when you change your

00:19:27,120 --> 00:19:31,020
style sheets your jolly or your page

00:19:29,580 --> 00:19:32,450
automatically updates or when you change

00:19:31,020 --> 00:19:36,330
your javascript it automatically updates

00:19:32,450 --> 00:19:37,679
HTML same thing so in this case this is

00:19:36,330 --> 00:19:41,940
where we're going to get into node a

00:19:37,679 --> 00:19:44,669
little bit this top line is on a mac if

00:19:41,940 --> 00:19:47,160
you want to install NPM in order to do

00:19:44,669 --> 00:19:50,280
node package management you can do it

00:19:47,160 --> 00:19:53,669
using homebrew but you need to install

00:19:50,280 --> 00:19:55,770
nodejs and npm and then you can install

00:19:53,669 --> 00:19:56,880
mimosa in this case globally because it

00:19:55,770 --> 00:19:59,910
gives us a little command that we can

00:19:56,880 --> 00:20:01,890
run so our app that we're messing around

00:19:59,910 --> 00:20:05,040
with today is called crit do for

00:20:01,890 --> 00:20:06,510
critical to do I guess and then when you

00:20:05,040 --> 00:20:08,610
go in there you can just type mimosa

00:20:06,510 --> 00:20:13,169
config and it'll spit out a default

00:20:08,610 --> 00:20:17,070
config file for you and I've pared it

00:20:13,169 --> 00:20:19,410
down for this particular project but

00:20:17,070 --> 00:20:21,059
this is a config where we're going to

00:20:19,410 --> 00:20:22,679
watch a source directory we're going to

00:20:21,059 --> 00:20:24,720
pilot compile everything into a public

00:20:22,679 --> 00:20:25,370
directory JavaScript directory is called

00:20:24,720 --> 00:20:28,040
Jas

00:20:25,370 --> 00:20:29,920
we're going to exclude tests because we

00:20:28,040 --> 00:20:32,450
don't want to compile those into our

00:20:29,920 --> 00:20:35,660
public version and some other things

00:20:32,450 --> 00:20:37,850
like hidden files we do want to start up

00:20:35,660 --> 00:20:40,640
a server will say that this is a one

00:20:37,850 --> 00:20:43,070
page app and that the default views path

00:20:40,640 --> 00:20:44,900
is just this directory because we have

00:20:43,070 --> 00:20:48,080
an index dot HTML in this directory so

00:20:44,900 --> 00:20:49,400
that's a nice handy thing we have to

00:20:48,080 --> 00:20:50,809
change our directory structure a little

00:20:49,400 --> 00:20:53,090
bit so this is what we had before from

00:20:50,809 --> 00:20:54,950
html5 bootstrap and all we did really is

00:20:53,090 --> 00:20:58,640
throw it into a source directory and

00:20:54,950 --> 00:21:01,610
make a public directory so with that

00:20:58,640 --> 00:21:04,280
little bit of configuration we can run

00:21:01,610 --> 00:21:06,380
mimosa we can run a server and we can

00:21:04,280 --> 00:21:09,380
run both optimized and minify optimized

00:21:06,380 --> 00:21:11,300
will use requirejs and we'll get to this

00:21:09,380 --> 00:21:13,880
in a second as well we'll use require

00:21:11,300 --> 00:21:17,330
JSE's optimization tool to optimize

00:21:13,880 --> 00:21:19,700
JavaScript and stylesheets is called rjs

00:21:17,330 --> 00:21:21,950
and it's part of that package it's

00:21:19,700 --> 00:21:25,280
fantastic if you don't use mimosa for

00:21:21,950 --> 00:21:26,870
whatever reason please look into rjs for

00:21:25,280 --> 00:21:28,490
optimization if you're looking for easy

00:21:26,870 --> 00:21:32,630
ways to compile your JavaScript and

00:21:28,490 --> 00:21:34,820
style sheets and then of course it'll

00:21:32,630 --> 00:21:38,300
fire up a server so then we can open it

00:21:34,820 --> 00:21:39,710
up and based on the the HTML that we

00:21:38,300 --> 00:21:42,260
already had we have something that looks

00:21:39,710 --> 00:21:43,520
like this this is sort of the the mobile

00:21:42,260 --> 00:21:46,160
version just because I my web browser

00:21:43,520 --> 00:21:49,910
was small but it was pretty simple to

00:21:46,160 --> 00:21:53,929
make and we did almost no actual code of

00:21:49,910 --> 00:21:56,420
our own which was really handy now from

00:21:53,929 --> 00:21:57,800
here we can move on to do a couple of

00:21:56,420 --> 00:21:59,600
other things one thing that we can do is

00:21:57,800 --> 00:22:02,450
refactor our style sheets I don't like

00:21:59,600 --> 00:22:04,420
inline style like this with the body tag

00:22:02,450 --> 00:22:08,960
I also don't like to have too many

00:22:04,420 --> 00:22:10,550
stylesheet tags linked from here so what

00:22:08,960 --> 00:22:14,900
we can do is we can refactor our main

00:22:10,550 --> 00:22:18,440
dot CSS to look more like this where we

00:22:14,900 --> 00:22:21,080
we load up the minimum bootstrap using

00:22:18,440 --> 00:22:24,890
an import these are CSS media queries

00:22:21,080 --> 00:22:26,929
and CSS imports and this media query

00:22:24,890 --> 00:22:31,070
here it says that if the minimum width

00:22:26,929 --> 00:22:32,480
of your viewing displays 979 pixels then

00:22:31,070 --> 00:22:33,980
we'll add this padding and that's

00:22:32,480 --> 00:22:35,600
actually something specific to bootstrap

00:22:33,980 --> 00:22:37,130
because when you get into the mobile

00:22:35,600 --> 00:22:40,310
spaces they don't need the padding

00:22:37,130 --> 00:22:41,720
for that top bar anymore so you only

00:22:40,310 --> 00:22:46,490
want to apply it whenever you're

00:22:41,720 --> 00:22:47,690
basically working on a desktop so we'll

00:22:46,490 --> 00:22:50,930
do a little bit more I think what the

00:22:47,690 --> 00:22:54,490
stylesheets in a minute because we will

00:22:50,930 --> 00:22:56,630
look at stylist stylist is a meta a

00:22:54,490 --> 00:22:58,730
metalanguage for style sheets have you

00:22:56,630 --> 00:23:02,210
has anyone used metal languages let's

00:22:58,730 --> 00:23:04,880
see other SAS or SCSS there's less for

00:23:02,210 --> 00:23:06,470
the less CSS framework yeah and stylist

00:23:04,880 --> 00:23:10,130
is another one that's a lot of

00:23:06,470 --> 00:23:11,930
popularity so few people have I don't

00:23:10,130 --> 00:23:14,540
know if you've noticed that style sheets

00:23:11,930 --> 00:23:16,310
are not dry don't repeat yourself you

00:23:14,540 --> 00:23:18,920
have to repeat yourself constantly and

00:23:16,310 --> 00:23:21,110
the I think the single biggest problem

00:23:18,920 --> 00:23:24,980
that these meta languages try and

00:23:21,110 --> 00:23:26,690
address is that problem first of all

00:23:24,980 --> 00:23:28,580
there's some tech their syntax is nice

00:23:26,690 --> 00:23:31,310
in that they often strip out a lot of

00:23:28,580 --> 00:23:33,200
needless syntax like curly braces and

00:23:31,310 --> 00:23:35,360
stuff maybe that's frightful for pearl

00:23:33,200 --> 00:23:40,970
programmers it's really really happy for

00:23:35,360 --> 00:23:42,710
like Python programmers you know we all

00:23:40,970 --> 00:23:45,470
have to we all have to get used to it

00:23:42,710 --> 00:23:47,210
someday and but don't repeat yourself is

00:23:45,470 --> 00:23:49,340
fantastic because these languages allow

00:23:47,210 --> 00:23:52,280
you to create functions that you can

00:23:49,340 --> 00:23:55,280
compose or mix-ins that you can compose

00:23:52,280 --> 00:23:57,920
into advanced styles you can drill down

00:23:55,280 --> 00:24:03,500
into a hierarchy of your page to style

00:23:57,920 --> 00:24:05,390
things using just indenting and or in

00:24:03,500 --> 00:24:08,000
the case of less you still use the curly

00:24:05,390 --> 00:24:10,580
braces but you can you can inherit

00:24:08,000 --> 00:24:12,670
styles from your parents by keeping them

00:24:10,580 --> 00:24:14,900
in containers kind of like HTML or

00:24:12,670 --> 00:24:16,400
anything that's encapsulated you know in

00:24:14,900 --> 00:24:20,150
terms of programmers so we understand

00:24:16,400 --> 00:24:22,250
that and you can make you can make these

00:24:20,150 --> 00:24:25,280
nixon's take arguments they can do math

00:24:22,250 --> 00:24:26,600
so that you can do math on gradients you

00:24:25,280 --> 00:24:28,340
can say you know this is a starting

00:24:26,600 --> 00:24:29,930
color and this is an ending color and I

00:24:28,340 --> 00:24:32,840
want you to step through and do

00:24:29,930 --> 00:24:35,030
gradients using style sheets there are

00:24:32,840 --> 00:24:38,660
other tools that are fantastic that I'm

00:24:35,030 --> 00:24:41,330
not covering like compass which gives

00:24:38,660 --> 00:24:43,840
you actually a huge array of default

00:24:41,330 --> 00:24:46,670
styles that you can mix into SAS or less

00:24:43,840 --> 00:24:48,300
I'm not sure if compass supports stylist

00:24:46,670 --> 00:24:50,100
yet but

00:24:48,300 --> 00:24:51,780
they can do things like stylesheet

00:24:50,100 --> 00:24:54,480
gradients and rounded corners in a

00:24:51,780 --> 00:24:56,580
completely cross-browser manner and all

00:24:54,480 --> 00:24:58,410
you have to do is write one line and

00:24:56,580 --> 00:25:00,510
that's it so I highly recommend these

00:24:58,410 --> 00:25:05,160
CSS metal languages again any of them

00:25:00,510 --> 00:25:06,720
are great SAS less that's SAS s SAS less

00:25:05,160 --> 00:25:09,840
and stylist so if we convert this the

00:25:06,720 --> 00:25:12,450
stylist it cuts down a little bit I like

00:25:09,840 --> 00:25:14,520
it I think it's nice unfortunately this

00:25:12,450 --> 00:25:16,410
is a really tiny stylesheet you saw that

00:25:14,520 --> 00:25:18,810
our app look pretty but this is all I've

00:25:16,410 --> 00:25:21,870
written so far and actually I just you

00:25:18,810 --> 00:25:23,400
know converted it so I really like that

00:25:21,870 --> 00:25:25,290
that's that's a little bit about doing

00:25:23,400 --> 00:25:27,240
style sheets in a modern way I

00:25:25,290 --> 00:25:31,920
appreciate these metal anguishes

00:25:27,240 --> 00:25:33,300
immensely next I would talk about jQuery

00:25:31,920 --> 00:25:35,220
but I have to be honest i think i'm

00:25:33,300 --> 00:25:38,190
going to count it as a given we used

00:25:35,220 --> 00:25:43,650
jquery or acepto is a more lightweight

00:25:38,190 --> 00:25:44,940
brand okay most of us jquery recently

00:25:43,650 --> 00:25:47,970
had a two point oh and i think this is

00:25:44,940 --> 00:25:49,800
important for us to know in jquery is

00:25:47,970 --> 00:25:52,170
two point O release which is just a

00:25:49,800 --> 00:25:55,260
couple of weeks ago they drop support

00:25:52,170 --> 00:25:56,370
for ie8 and lower and in doing so i'm

00:25:55,260 --> 00:25:58,440
pretty sure that the numbers are that

00:25:56,370 --> 00:26:01,620
they sped up their framework jquery by

00:25:58,440 --> 00:26:03,330
about sixty percent by dropping all of

00:26:01,620 --> 00:26:06,270
the polyfills that they had to do for

00:26:03,330 --> 00:26:10,010
ancient versions of ie so if you do not

00:26:06,270 --> 00:26:12,690
need to support IE eight you know 76

00:26:10,010 --> 00:26:14,310
look into if you're already using jquery

00:26:12,690 --> 00:26:19,080
and if you're not looking to upgrading

00:26:14,310 --> 00:26:20,910
to two point oh that's important 1.9

00:26:19,080 --> 00:26:23,240
point one is sort of the backward

00:26:20,910 --> 00:26:25,440
compatible version as of right now and

00:26:23,240 --> 00:26:27,270
they'll be maintaining that branch for a

00:26:25,440 --> 00:26:32,180
little while that will still support IE

00:26:27,270 --> 00:26:35,280
eight but in general jquery gives you

00:26:32,180 --> 00:26:37,620
ajax right out of the gate it gives you

00:26:35,280 --> 00:26:40,790
Dom manipulation user you I effects

00:26:37,620 --> 00:26:43,760
using jQuery UI and even some without it

00:26:40,790 --> 00:26:47,610
event handling that's really fantastic

00:26:43,760 --> 00:26:49,440
style manipulation you know jquery UI

00:26:47,610 --> 00:26:51,470
gives you things like drag and drop and

00:26:49,440 --> 00:26:53,130
sorta bowls and a lot of nice little

00:26:51,470 --> 00:26:55,020
functionality probably the one that I

00:26:53,130 --> 00:26:56,400
use the most is a date picker I don't

00:26:55,020 --> 00:26:59,130
know if you've how many people have

00:26:56,400 --> 00:27:02,910
actually had to do their own

00:26:59,130 --> 00:27:06,690
HTML datepicker with code like for real

00:27:02,910 --> 00:27:11,220
one two yeah it's nuts don't ever do it

00:27:06,690 --> 00:27:12,390
again save yourself plugins jcrew.com is

00:27:11,220 --> 00:27:13,440
fantastic they have a lot of plugins

00:27:12,390 --> 00:27:15,660
that's probably one of the biggest

00:27:13,440 --> 00:27:17,070
reasons to use jQuery is that there's

00:27:15,660 --> 00:27:21,840
just a huge community that's written a

00:27:17,070 --> 00:27:23,430
lot so I recommend checking it out then

00:27:21,840 --> 00:27:25,560
that gets us to our next little project

00:27:23,430 --> 00:27:28,980
it's called Bauer how many of us have

00:27:25,560 --> 00:27:31,980
used Bauer ya know how many of us have

00:27:28,980 --> 00:27:34,950
you see pan Bauer's kind of like that

00:27:31,980 --> 00:27:37,290
for Java scripts its package management

00:27:34,950 --> 00:27:38,580
which is fantastic because again if

00:27:37,290 --> 00:27:40,560
you've written web you eyes how many of

00:27:38,580 --> 00:27:42,990
us have had to go you know dig around

00:27:40,560 --> 00:27:44,580
for the URL to download the page and you

00:27:42,990 --> 00:27:45,870
have to copy and paste the HTML out of

00:27:44,580 --> 00:27:47,400
your web or the JavaScript out of your

00:27:45,870 --> 00:27:48,870
web browser and put it in some file over

00:27:47,400 --> 00:27:51,540
here you don't have to do that anymore

00:27:48,870 --> 00:27:53,280
go to baauer the second link here are

00:27:51,540 --> 00:27:56,270
Bower components there's thousands of

00:27:53,280 --> 00:27:58,740
them of JavaScript that has been written

00:27:56,270 --> 00:28:03,000
to support Bauer I really like it a lot

00:27:58,740 --> 00:28:05,730
back in ancient days 2005 I gave a talk

00:28:03,000 --> 00:28:08,670
at UFC about Jason the JavaScript

00:28:05,730 --> 00:28:10,500
archive network it was my go at trying

00:28:08,670 --> 00:28:14,220
to do something like Sipan for

00:28:10,500 --> 00:28:16,320
javascript it was a mediocre go honestly

00:28:14,220 --> 00:28:18,120
but we're finally at a place Bauer's

00:28:16,320 --> 00:28:23,070
doing the right doing the right kind of

00:28:18,120 --> 00:28:26,340
job here so let's get get into that so

00:28:23,070 --> 00:28:28,620
we'll use NPM again it is a node

00:28:26,340 --> 00:28:31,670
javascript-based package you can install

00:28:28,620 --> 00:28:35,310
it globally it does need a little bit of

00:28:31,670 --> 00:28:37,560
configuration so in this case there's a

00:28:35,310 --> 00:28:40,860
bower RC that you can drop into the root

00:28:37,560 --> 00:28:42,570
of your project and this is some Linux C

00:28:40,860 --> 00:28:43,530
syntax to make that happen easily where

00:28:42,570 --> 00:28:46,890
we're going to stay that we're going to

00:28:43,530 --> 00:28:48,420
put Bauer under vendor and anything that

00:28:46,890 --> 00:28:50,880
we download from there we'll go there so

00:28:48,420 --> 00:28:56,100
then you can initialize it and then

00:28:50,880 --> 00:28:57,810
install required jf and it's really as

00:28:56,100 --> 00:29:01,410
simple as that it throws a requirejs

00:28:57,810 --> 00:29:03,900
directory with with all the JavaScript

00:29:01,410 --> 00:29:07,400
and tests and everything right into your

00:29:03,900 --> 00:29:10,020
project and so you have it there yes and

00:29:07,400 --> 00:29:11,610
you can execute in this case we would be

00:29:10,020 --> 00:29:16,620
executing this from the director

00:29:11,610 --> 00:29:19,590
directory yeah that's right that's a

00:29:16,620 --> 00:29:23,120
great clarification thank you how many

00:29:19,590 --> 00:29:26,370
of us have used requirejs to do module

00:29:23,120 --> 00:29:29,420
JavaScript module is JavaScript just a

00:29:26,370 --> 00:29:31,799
couple okay we'll get into that too

00:29:29,420 --> 00:29:33,780
that's exactly what it does so you know

00:29:31,799 --> 00:29:35,370
as perl developers we write modules all

00:29:33,780 --> 00:29:37,380
the time on the back end well in

00:29:35,370 --> 00:29:38,910
JavaScript land it can be really easy to

00:29:37,380 --> 00:29:44,760
just be very sloppy and throw everything

00:29:38,910 --> 00:29:49,020
in a file you know obligatory comment

00:29:44,760 --> 00:29:52,830
about PHP developers but we don't have

00:29:49,020 --> 00:29:54,390
to do that so we can drop it we can

00:29:52,830 --> 00:29:55,440
refactor our start refactoring our

00:29:54,390 --> 00:29:57,500
JavaScript and that's we're going to get

00:29:55,440 --> 00:30:03,299
into here so this is what we had before

00:29:57,500 --> 00:30:04,650
from our html5 boilerplate mimosa is is

00:30:03,299 --> 00:30:06,059
running in the background and it's

00:30:04,650 --> 00:30:08,760
running a server and it's paying

00:30:06,059 --> 00:30:12,000
attention to all of our JavaScript it's

00:30:08,760 --> 00:30:13,950
compiling it down into compact forms but

00:30:12,000 --> 00:30:16,919
if we use require we can actually get it

00:30:13,950 --> 00:30:18,929
to compile our main javascript file and

00:30:16,919 --> 00:30:21,990
all of its dependencies which can be

00:30:18,929 --> 00:30:24,000
clearly defined using require into one

00:30:21,990 --> 00:30:26,580
file in the right order and then be

00:30:24,000 --> 00:30:27,870
executed it's pretty fantastic and then

00:30:26,580 --> 00:30:31,049
you have one file that you're that your

00:30:27,870 --> 00:30:34,080
users are downloading and that's it and

00:30:31,049 --> 00:30:37,919
it's it will compile it into in this

00:30:34,080 --> 00:30:39,090
case by default main built Jas and it'll

00:30:37,919 --> 00:30:41,040
compile that over into the public

00:30:39,090 --> 00:30:43,290
directory you'll notice I threw two

00:30:41,040 --> 00:30:45,720
other script tags in here these are for

00:30:43,290 --> 00:30:47,130
mimosa and there would be something that

00:30:45,720 --> 00:30:48,840
you would only use likely and

00:30:47,130 --> 00:30:50,730
development but this actually gives us

00:30:48,840 --> 00:30:53,549
that live reload capability one is to

00:30:50,730 --> 00:30:54,750
use socket i/o which the mimosa server

00:30:53,549 --> 00:30:56,460
gives us for free we don't have to do

00:30:54,750 --> 00:30:59,940
anything and another one is to use

00:30:56,460 --> 00:31:01,380
reload client so when you do a changes

00:30:59,940 --> 00:31:02,910
to your HTML in your JavaScript it will

00:31:01,380 --> 00:31:04,740
reload the client when you do changes to

00:31:02,910 --> 00:31:06,540
your style sheets you'll actually just

00:31:04,740 --> 00:31:08,610
push those style sheets live without

00:31:06,540 --> 00:31:13,350
doing a repaint which is pretty

00:31:08,610 --> 00:31:16,140
fantastic so let's look at main j/s

00:31:13,350 --> 00:31:20,820
pulling in jQuery and bootstrap by

00:31:16,140 --> 00:31:23,130
default but using require so require is

00:31:20,820 --> 00:31:24,419
best it I think when you use a little

00:31:23,130 --> 00:31:26,999
bit of configuration

00:31:24,419 --> 00:31:28,950
and its configuration syntaxes is pretty

00:31:26,999 --> 00:31:31,169
expansive but in this case you can

00:31:28,950 --> 00:31:33,749
specify a base URL of where to find your

00:31:31,169 --> 00:31:36,889
JavaScript you can specify some paths

00:31:33,749 --> 00:31:39,480
because we often have vendors paths or

00:31:36,889 --> 00:31:42,330
versioned paths or both when it comes to

00:31:39,480 --> 00:31:43,739
a lot of these dependencies so it's nice

00:31:42,330 --> 00:31:45,600
just to be able to refer to jQuery as

00:31:43,739 --> 00:31:47,279
jquery instead of instead of that mess

00:31:45,600 --> 00:31:50,999
that follows it and the same thing goes

00:31:47,279 --> 00:31:52,739
for bootstrap the shim section is

00:31:50,999 --> 00:31:54,840
interesting a bootstrapper relies on

00:31:52,739 --> 00:31:56,190
jquery in order to run so that's

00:31:54,840 --> 00:31:58,289
actually what we're saying here and this

00:31:56,190 --> 00:31:59,820
is a shorthand syntax but we're saying

00:31:58,289 --> 00:32:02,369
that if we're going to load bootstrap

00:31:59,820 --> 00:32:04,169
you have to load jquery and so it will

00:32:02,369 --> 00:32:06,210
do that automatically now if you want to

00:32:04,169 --> 00:32:07,649
to use jquery in your module you have to

00:32:06,210 --> 00:32:10,679
say it explicitly which is what we do

00:32:07,649 --> 00:32:13,200
below but it will it will load it up

00:32:10,679 --> 00:32:16,909
directly force define says that when we

00:32:13,200 --> 00:32:20,159
load these these libraries from the

00:32:16,909 --> 00:32:22,619
configuration system it must call define

00:32:20,159 --> 00:32:24,809
or require or something like that in

00:32:22,619 --> 00:32:25,980
your javascript file if it doesn't do

00:32:24,809 --> 00:32:28,019
that it will assume that your javascript

00:32:25,980 --> 00:32:30,359
didn't load it's sort of like not adding

00:32:28,019 --> 00:32:32,220
one at the end of your perl module or

00:32:30,359 --> 00:32:35,639
something at some true value and it

00:32:32,220 --> 00:32:37,379
won't it won't actually compile it'll

00:32:35,639 --> 00:32:38,909
say that there was an error and then

00:32:37,379 --> 00:32:40,769
finally there's this required j/s block

00:32:38,909 --> 00:32:43,049
where we load jquery and bootstrap

00:32:40,769 --> 00:32:46,739
that's our first curse the argument is

00:32:43,049 --> 00:32:48,989
this list and then our function takes a

00:32:46,739 --> 00:32:51,029
dollar for jquery bootstrapper bootstrap

00:32:48,989 --> 00:32:52,139
and in this case you know we just have

00:32:51,029 --> 00:32:53,460
an empty onload because we're not

00:32:52,139 --> 00:32:56,149
actually doing anything but this is a

00:32:53,460 --> 00:32:59,789
the basics that you need in order to

00:32:56,149 --> 00:33:01,369
load things up using require and we'll

00:32:59,789 --> 00:33:03,450
do a little bit more require in a minute

00:33:01,369 --> 00:33:05,039
but I do want to talk about CoffeeScript

00:33:03,450 --> 00:33:07,049
how many of us have used coffeescript

00:33:05,039 --> 00:33:09,179
it's another metal language okay we just

00:33:07,049 --> 00:33:12,840
have a couple have you ever looked at

00:33:09,179 --> 00:33:14,129
CoffeeScript it gets a lot of okay I'm

00:33:12,840 --> 00:33:16,080
actually surprised it gets a lot of

00:33:14,129 --> 00:33:20,039
attention it's another metal language

00:33:16,080 --> 00:33:22,109
that compiles down to JavaScript do you

00:33:20,039 --> 00:33:23,700
like writing JavaScript I don't like

00:33:22,109 --> 00:33:26,519
writing JavaScript that much but i love

00:33:23,700 --> 00:33:29,549
writing coffeescript so if we were to

00:33:26,519 --> 00:33:33,179
convert mame jsin to maine coffee it

00:33:29,549 --> 00:33:36,210
would look something like this so we

00:33:33,179 --> 00:33:38,440
have our require JS config and we have a

00:33:36,210 --> 00:33:41,559
hash of values it's sort of a yam

00:33:38,440 --> 00:33:44,919
like if we've used lamb ilysm yam ilysm

00:33:41,559 --> 00:33:46,179
at metal language yeah cool thanks for

00:33:44,919 --> 00:33:48,700
the hands by the way it helps me to know

00:33:46,179 --> 00:33:51,610
what I need to explain so yeah melissa

00:33:48,700 --> 00:33:54,850
is metal language for structured content

00:33:51,610 --> 00:33:57,370
or JSON which I'm sure many of us have

00:33:54,850 --> 00:33:58,720
it at least looked at and then you can

00:33:57,370 --> 00:34:00,580
see the required jas call is very

00:33:58,720 --> 00:34:02,230
similar there there's something that's

00:34:00,580 --> 00:34:05,080
slightly different which is the syntax

00:34:02,230 --> 00:34:07,659
around function which is the parentheses

00:34:05,080 --> 00:34:08,829
that encapsulate the dollar and the

00:34:07,659 --> 00:34:11,919
bootstrap are the arguments for the

00:34:08,829 --> 00:34:14,740
function and the arrow signifies the

00:34:11,919 --> 00:34:16,240
start of a function block and then the

00:34:14,740 --> 00:34:18,819
same thing happens with the dollar if

00:34:16,240 --> 00:34:20,760
you use jquery on load you can you can

00:34:18,819 --> 00:34:22,869
just pass a function to the dollar

00:34:20,760 --> 00:34:24,460
function and it'll be called whenever

00:34:22,869 --> 00:34:30,639
the dom is ready well that's all we're

00:34:24,460 --> 00:34:33,970
doing here there's already tucked at

00:34:30,639 --> 00:34:35,530
this conference on backbone given by my

00:34:33,970 --> 00:34:38,530
colleague bill Humphries how many

00:34:35,530 --> 00:34:42,970
attended that just just a couple of

00:34:38,530 --> 00:34:46,720
folks okay so backbone is an example of

00:34:42,970 --> 00:34:49,149
an MVC style framework for the web and

00:34:46,720 --> 00:34:50,200
I'm going to demonstrate backbone but

00:34:49,149 --> 00:34:52,599
there are a number of others there's

00:34:50,200 --> 00:34:55,109
angularjs ember there's one called

00:34:52,599 --> 00:34:58,900
Batman there's one called knockout

00:34:55,109 --> 00:35:01,690
basically you can pick whichever one you

00:34:58,900 --> 00:35:02,980
like and recommend taking a look how

00:35:01,690 --> 00:35:05,730
many people are using some kind of

00:35:02,980 --> 00:35:09,640
framework for your front end right now

00:35:05,730 --> 00:35:11,349
anything I didn't mention know okay so

00:35:09,640 --> 00:35:13,420
just a couple of folks I like it because

00:35:11,349 --> 00:35:15,730
again along with require it allows you

00:35:13,420 --> 00:35:17,589
to modular as your code I don't have a

00:35:15,730 --> 00:35:20,980
lot of religion about which one you pick

00:35:17,589 --> 00:35:24,310
I think that backbone is a fine choice

00:35:20,980 --> 00:35:26,349
it's it tries to stay out of your way

00:35:24,310 --> 00:35:28,660
but one of the one of the downsides to

00:35:26,349 --> 00:35:31,450
that is that it doesn't give you up all

00:35:28,660 --> 00:35:34,750
the functionalities sometimes desire out

00:35:31,450 --> 00:35:36,310
of a web framework but let's go ahead

00:35:34,750 --> 00:35:39,640
and install it and write this thing real

00:35:36,310 --> 00:35:42,190
quick so we have Bauer again to install

00:35:39,640 --> 00:35:44,290
our dependencies bootstrap or sorry

00:35:42,190 --> 00:35:46,119
backbone requires underscore so we're

00:35:44,290 --> 00:35:47,770
going to install underscore backbone and

00:35:46,119 --> 00:35:49,569
backbone local storage in this case

00:35:47,770 --> 00:35:51,130
because I don't want to create a server

00:35:49,569 --> 00:35:51,940
system so i can actually do local

00:35:51,130 --> 00:35:55,150
storage on my

00:35:51,940 --> 00:35:56,350
uh within my web browser the local store

00:35:55,150 --> 00:35:57,070
and a web browser is really interesting

00:35:56,350 --> 00:35:58,240
there are a couple of different

00:35:57,070 --> 00:36:00,730
varieties there's one that's a key value

00:35:58,240 --> 00:36:02,320
store kind of like a cache and there's

00:36:00,730 --> 00:36:03,490
actually an SQLite database that some

00:36:02,320 --> 00:36:07,000
browsers make available that you can

00:36:03,490 --> 00:36:08,350
interact with this is going to going to

00:36:07,000 --> 00:36:09,640
encapsulate it though so I don't even

00:36:08,350 --> 00:36:13,390
have to bother with it i'm going to

00:36:09,640 --> 00:36:16,990
write very little code to list set of to

00:36:13,390 --> 00:36:18,940
do's and you'll see that so we do want

00:36:16,990 --> 00:36:22,210
to get backbone and require playing

00:36:18,940 --> 00:36:24,010
nicely together so we want to set up the

00:36:22,210 --> 00:36:26,400
paths for underscore backbone and local

00:36:24,010 --> 00:36:30,010
store and we want to set up the shim

00:36:26,400 --> 00:36:32,110
because backbone relies on both jquery

00:36:30,010 --> 00:36:36,970
and underscore so again we're setting

00:36:32,110 --> 00:36:38,320
our dependencies here if you didn't do

00:36:36,970 --> 00:36:40,240
this and you were just doing straight up

00:36:38,320 --> 00:36:43,120
script tags in your HTML then you would

00:36:40,240 --> 00:36:44,830
have to you-know-what list out all of

00:36:43,120 --> 00:36:46,420
these script tags for yourself and keep

00:36:44,830 --> 00:36:49,990
them in the right order and it's a mess

00:36:46,420 --> 00:36:52,720
so I don't recommend it then we can

00:36:49,990 --> 00:36:54,850
update our require jas in this case will

00:36:52,720 --> 00:36:57,520
load jquery will load bootstrap will

00:36:54,850 --> 00:36:59,740
load backbone and will load a router a

00:36:57,520 --> 00:37:01,990
to-do router backbone gives you the

00:36:59,740 --> 00:37:04,990
system this concept of routing similar

00:37:01,990 --> 00:37:06,640
to any other web framework in this case

00:37:04,990 --> 00:37:09,370
to do router is going to handle itself

00:37:06,640 --> 00:37:12,280
but we want to start the backbone

00:37:09,370 --> 00:37:14,260
history because it's a one page app you

00:37:12,280 --> 00:37:16,000
can navigate around the app and it'll

00:37:14,260 --> 00:37:18,790
change the URL but you don't actually

00:37:16,000 --> 00:37:19,960
have to hit a web server we don't we

00:37:18,790 --> 00:37:22,540
don't actually have any navigation in

00:37:19,960 --> 00:37:25,390
this app I'm sorry but it is a pretty

00:37:22,540 --> 00:37:26,620
cool feature so if we dive into the

00:37:25,390 --> 00:37:28,690
router here and again it's in

00:37:26,620 --> 00:37:30,040
CoffeeScript remember the most paying

00:37:28,690 --> 00:37:31,420
attention to this so every time you save

00:37:30,040 --> 00:37:32,980
this file it's compiling it to

00:37:31,420 --> 00:37:34,540
JavaScript and then it's actually

00:37:32,980 --> 00:37:37,390
compiling all of the Java scripts that

00:37:34,540 --> 00:37:39,190
are referenced in Maine jas into a built

00:37:37,390 --> 00:37:41,110
file and then it's serving it to you and

00:37:39,190 --> 00:37:42,970
it's doing it really quickly on the Mac

00:37:41,110 --> 00:37:45,880
it's using growl so it's actually

00:37:42,970 --> 00:37:46,960
letting you know when it works and you

00:37:45,880 --> 00:37:50,800
know you can see a little notification

00:37:46,960 --> 00:37:52,180
it's pretty rad so in this case we're

00:37:50,800 --> 00:37:55,240
going to make a new router by extending

00:37:52,180 --> 00:37:57,100
backbones basic router and we'll set up

00:37:55,240 --> 00:37:59,200
a routing table so we have a basic index

00:37:57,100 --> 00:38:00,910
and then we have in this case I'm just

00:37:59,200 --> 00:38:03,280
choosing to set up a wild card so that

00:38:00,910 --> 00:38:04,840
whatever you might whatever your URL you

00:38:03,280 --> 00:38:05,320
might go to is going to just load the

00:38:04,840 --> 00:38:07,670
index

00:38:05,320 --> 00:38:09,950
and then we're going to create a new

00:38:07,670 --> 00:38:12,800
router object and we're going to listen

00:38:09,950 --> 00:38:16,250
to an event backbone has a pretty good

00:38:12,800 --> 00:38:18,470
event system and one of its methods for

00:38:16,250 --> 00:38:21,650
events that's mixed into almost all of

00:38:18,470 --> 00:38:23,840
backbones basic class types is on so

00:38:21,650 --> 00:38:27,290
when own event fires that's called route

00:38:23,840 --> 00:38:29,300
index then we'll make a new to-do list

00:38:27,290 --> 00:38:31,040
view and we'll pass it the to do

00:38:29,300 --> 00:38:32,870
collection which would be just the list

00:38:31,040 --> 00:38:35,150
of to do's and that collection will be

00:38:32,870 --> 00:38:37,400
yanked out of local storage and then

00:38:35,150 --> 00:38:39,410
we'll just render that view and then

00:38:37,400 --> 00:38:41,030
we'll return the router we're not doing

00:38:39,410 --> 00:38:45,620
anything with it in this case but we can

00:38:41,030 --> 00:38:46,760
return it then from here there are a

00:38:45,620 --> 00:38:48,700
couple of pieces of code we need to look

00:38:46,760 --> 00:38:51,260
at one of them is this to do list view

00:38:48,700 --> 00:38:52,850
which is the views portion so the

00:38:51,260 --> 00:38:57,650
routers by the way are sort of like the

00:38:52,850 --> 00:39:01,760
controllers if you do MVC it's like MBR

00:38:57,650 --> 00:39:04,520
are for router so the view portion is

00:39:01,760 --> 00:39:05,870
also pretty simple in this case we're

00:39:04,520 --> 00:39:08,480
going to load up backbone because we do

00:39:05,870 --> 00:39:12,440
need it then we're going to extend

00:39:08,480 --> 00:39:13,790
backbones view we're going to tell the

00:39:12,440 --> 00:39:15,890
view that it's going to operate on a

00:39:13,790 --> 00:39:17,420
particular element and what it will do

00:39:15,890 --> 00:39:18,980
in this case is it'll actually sort of

00:39:17,420 --> 00:39:23,720
bind itself to the element in this case

00:39:18,980 --> 00:39:27,250
the to-do list and then it will listen

00:39:23,720 --> 00:39:29,210
for events and whenever it renders a

00:39:27,250 --> 00:39:30,920
Content it will render it all within

00:39:29,210 --> 00:39:32,660
that element which keeps it encapsulated

00:39:30,920 --> 00:39:33,860
and that's pretty nice so you can have

00:39:32,660 --> 00:39:35,600
different views for different portions

00:39:33,860 --> 00:39:37,940
of your page and they can all be

00:39:35,600 --> 00:39:40,460
encapsulated they don't have to conflict

00:39:37,940 --> 00:39:42,590
with one another so in this case we have

00:39:40,460 --> 00:39:46,010
a to do list and in the render we'll

00:39:42,590 --> 00:39:48,920
just loop over the collection and so for

00:39:46,010 --> 00:39:53,750
each to do then will append a list item

00:39:48,920 --> 00:39:54,890
to our list seduced our to-do list

00:39:53,750 --> 00:39:57,550
element happens to be an ordered list

00:39:54,890 --> 00:39:57,550
yes

00:40:03,390 --> 00:40:14,230
oh great question so the question is why

00:40:08,140 --> 00:40:16,060
is dollar al dollar al mm-hmm so this is

00:40:14,230 --> 00:40:17,700
something that I think pro programmers

00:40:16,060 --> 00:40:19,720
get right because I like sigils

00:40:17,700 --> 00:40:22,270
JavaScript as a language doesn't require

00:40:19,720 --> 00:40:24,700
them at all but and so a dollar sign is

00:40:22,270 --> 00:40:27,760
not particularly special in terms of the

00:40:24,700 --> 00:40:30,730
syntax of JavaScript but something that

00:40:27,760 --> 00:40:33,340
a jQuery folks did for a while is that

00:40:30,730 --> 00:40:35,440
if you were going to use the jQuery

00:40:33,340 --> 00:40:37,060
dollar selector to get a set of elements

00:40:35,440 --> 00:40:39,310
and it's always a set right it's either

00:40:37,060 --> 00:40:42,760
one or many or none but it's always a

00:40:39,310 --> 00:40:44,740
set and assign that to a variable an

00:40:42,760 --> 00:40:47,470
idiom or a pattern that they use for a

00:40:44,740 --> 00:40:48,670
very long time was to prefix that

00:40:47,470 --> 00:40:50,170
variable with a dollar and that's

00:40:48,670 --> 00:40:53,200
signified that this is a jQuery selector

00:40:50,170 --> 00:40:55,300
so you can do jQuery things on it and it

00:40:53,200 --> 00:40:57,820
was really just a pattern that helped

00:40:55,300 --> 00:41:00,640
your brain and so in this case backbone

00:40:57,820 --> 00:41:03,160
also builds on that dollar al is

00:41:00,640 --> 00:41:05,260
something that backbone makes so you can

00:41:03,160 --> 00:41:08,970
see that I set an attribute of el4 the

00:41:05,260 --> 00:41:13,330
element that I want dollar al is a

00:41:08,970 --> 00:41:15,820
property on self or on this for a view

00:41:13,330 --> 00:41:17,050
and it's just the name that backbone

00:41:15,820 --> 00:41:20,050
gave it but that's why that's the

00:41:17,050 --> 00:41:22,360
history behind so that is a jQuery

00:41:20,050 --> 00:41:24,670
selector and then because I know that I

00:41:22,360 --> 00:41:27,490
can run jquery methods on it append is

00:41:24,670 --> 00:41:29,980
one of them and if you go to api jquery

00:41:27,490 --> 00:41:31,570
com which is a fantastic website for

00:41:29,980 --> 00:41:33,970
documentation on jquery you can search

00:41:31,570 --> 00:41:37,300
and take a look at all of them including

00:41:33,970 --> 00:41:40,060
append this string that actually has

00:41:37,300 --> 00:41:42,640
interpolation is a function of coffee

00:41:40,060 --> 00:41:44,980
script so it's another badass reason to

00:41:42,640 --> 00:41:46,300
use copy script because if you do any

00:41:44,980 --> 00:41:48,040
JavaScript with strings you know that

00:41:46,300 --> 00:41:51,070
you have to just concatenate the

00:41:48,040 --> 00:41:52,810
out of everything it's terrible and

00:41:51,070 --> 00:41:55,240
again getting compiled for you in the

00:41:52,810 --> 00:41:56,890
background by mimosa I definitely want

00:41:55,240 --> 00:41:59,560
you to look at looking at mimosa so to

00:41:56,890 --> 00:42:01,660
do collection is also great it sets a

00:41:59,560 --> 00:42:03,700
backbone and local store and then we

00:42:01,660 --> 00:42:07,180
just extend the basic collection by

00:42:03,700 --> 00:42:09,960
saying that our local storage is going

00:42:07,180 --> 00:42:12,040
to be a namespace to the name to deuce

00:42:09,960 --> 00:42:13,900
that's actually all you have to do to

00:42:12,040 --> 00:42:14,799
have a client-side web application that

00:42:13,900 --> 00:42:17,589
stores the data in

00:42:14,799 --> 00:42:20,920
the web browser when you use backbone

00:42:17,589 --> 00:42:24,699
that's it is pretty awesome you can do

00:42:20,920 --> 00:42:27,640
that as a caching mechanism so if your

00:42:24,699 --> 00:42:30,309
if your web app has to be offline

00:42:27,640 --> 00:42:32,679
tolerant take a look at this it can be a

00:42:30,309 --> 00:42:33,969
nice fallback it can actually you can

00:42:32,679 --> 00:42:36,699
use of course because javascript is

00:42:33,969 --> 00:42:39,880
runtime interpreted you can you can make

00:42:36,699 --> 00:42:41,229
that decision on the fly if you need to

00:42:39,880 --> 00:42:44,170
to switch between server-side and

00:42:41,229 --> 00:42:47,130
client-side and you can also sync the

00:42:44,170 --> 00:42:49,359
sets using backbone it's pretty great

00:42:47,130 --> 00:42:50,920
backbone is built on underscore and I

00:42:49,359 --> 00:42:53,079
only have a little bit of time here to

00:42:50,920 --> 00:42:54,640
get into underscore but I do want to

00:42:53,079 --> 00:42:57,299
emphasize it how many people have used

00:42:54,640 --> 00:43:01,420
underscore just as a project on its own

00:42:57,299 --> 00:43:03,519
not many folks okay so underscore so

00:43:01,420 --> 00:43:08,670
jQuery is a whole set of utilities

00:43:03,519 --> 00:43:11,199
around Dom manipulation and Ajax and and

00:43:08,670 --> 00:43:14,170
effects and of course backbone is this

00:43:11,199 --> 00:43:16,539
like nice MVC framework or MVR as I just

00:43:14,170 --> 00:43:18,429
said that lets you structure your code

00:43:16,539 --> 00:43:19,749
require lets you structure your code and

00:43:18,429 --> 00:43:21,880
in the middle is underscore underscore

00:43:19,749 --> 00:43:24,459
is like a functional programming utility

00:43:21,880 --> 00:43:27,189
belt for JavaScript I highly recommend

00:43:24,459 --> 00:43:29,679
it here are a couple of quick examples

00:43:27,189 --> 00:43:31,989
this is something that I've used a lot

00:43:29,679 --> 00:43:35,049
this is a reduced function that you get

00:43:31,989 --> 00:43:37,299
with underscore and it's really cool in

00:43:35,049 --> 00:43:39,579
this case I'm trying to calculate the

00:43:37,299 --> 00:43:41,140
maximum width of a series of elements

00:43:39,579 --> 00:43:42,910
that are beside each other that might

00:43:41,140 --> 00:43:45,910
have variable widths but I want to know

00:43:42,910 --> 00:43:47,890
how much space they take up in total in

00:43:45,910 --> 00:43:50,499
standard JavaScript you'd have to write

00:43:47,890 --> 00:43:52,239
some kind of loop which is really

00:43:50,499 --> 00:43:53,229
grotesque and you know you're worried

00:43:52,239 --> 00:43:56,140
about whether it's going to break and it

00:43:53,229 --> 00:43:57,699
looks like C code you can use reduce

00:43:56,140 --> 00:43:59,289
instead you can say get me all the tabs

00:43:57,699 --> 00:44:02,380
and in this case get me the raw elements

00:43:59,289 --> 00:44:03,849
that's what that get says there then

00:44:02,380 --> 00:44:05,920
we're going to start with a starting

00:44:03,849 --> 00:44:08,170
value of 0 and then we're going to loop

00:44:05,920 --> 00:44:11,949
over all of those tabs and we're just

00:44:08,170 --> 00:44:13,890
going to reduce them by adding the total

00:44:11,949 --> 00:44:17,349
width which we're getting using jQuery

00:44:13,890 --> 00:44:19,900
to our total which is a more or less

00:44:17,349 --> 00:44:22,029
changing 0 you know by bumping it up and

00:44:19,900 --> 00:44:23,769
numbers pixel by pixel and then just

00:44:22,029 --> 00:44:26,830
return the total width and that's all I

00:44:23,769 --> 00:44:30,220
had to do in CoffeeScript it's it's

00:44:26,830 --> 00:44:32,380
tinier but and I wanted to show that

00:44:30,220 --> 00:44:34,540
just for the hell of it but if you

00:44:32,380 --> 00:44:35,950
didn't have to deal with like the 20

00:44:34,540 --> 00:44:37,300
characters that I can fit on a slide in

00:44:35,950 --> 00:44:41,740
order for it to be readable then that's

00:44:37,300 --> 00:44:44,590
a one-liner here's another example you

00:44:41,740 --> 00:44:46,330
can double your money it has map which

00:44:44,590 --> 00:44:49,120
is really fantastic so given a list or a

00:44:46,330 --> 00:44:52,360
set of any kind you know you can loop

00:44:49,120 --> 00:44:54,970
over it and you know double your money

00:44:52,360 --> 00:44:57,220
there you go another thing that you get

00:44:54,970 --> 00:45:00,700
because underscore is something that

00:44:57,220 --> 00:45:01,960
backbone is built on backbone has a lot

00:45:00,700 --> 00:45:03,340
of these iterators and things like that

00:45:01,960 --> 00:45:05,700
one of them is each which is really

00:45:03,340 --> 00:45:08,740
fantastic never write a for loop in Java

00:45:05,700 --> 00:45:11,980
Script again you can do each on any kind

00:45:08,740 --> 00:45:16,300
of collection in in backbone but you can

00:45:11,980 --> 00:45:18,940
also use it on standard arrays and in

00:45:16,300 --> 00:45:20,110
JavaScript so in this case you know

00:45:18,940 --> 00:45:22,180
that's exactly what we did here with

00:45:20,110 --> 00:45:24,310
collection dot H which is sort of Ruby

00:45:22,180 --> 00:45:26,830
like but you know it's something that

00:45:24,310 --> 00:45:30,340
you should definitely invest in time and

00:45:26,830 --> 00:45:31,630
I think that's actually the end of what

00:45:30,340 --> 00:45:32,560
I was able to get to within the 45

00:45:31,630 --> 00:45:34,210
minutes and that worked out almost

00:45:32,560 --> 00:45:35,530
perfectly but I want to throw a few more

00:45:34,210 --> 00:45:37,030
projects out there so that you guys can

00:45:35,530 --> 00:45:40,120
pay attention to them one of them is

00:45:37,030 --> 00:45:41,560
moment je s date handling sucks Dave's

00:45:40,120 --> 00:45:45,850
given to talk about how much it sucks in

00:45:41,560 --> 00:45:47,440
Perl right now and they're crying and so

00:45:45,850 --> 00:45:50,500
you don't want to you don't want to do

00:45:47,440 --> 00:45:53,080
that this thing will parts you dates

00:45:50,500 --> 00:45:55,450
validate them manipulate them it will

00:45:53,080 --> 00:45:57,670
format them it's localized you can get

00:45:55,450 --> 00:45:59,260
time ago so you can say you know given a

00:45:57,670 --> 00:46:03,490
date that was three seconds ago three

00:45:59,260 --> 00:46:04,990
days ago don't ever screw around with

00:46:03,490 --> 00:46:07,900
dates again on your own with JavaScript

00:46:04,990 --> 00:46:10,180
please look at the moment je s we looked

00:46:07,900 --> 00:46:13,780
into bootstrap briefly documentation is

00:46:10,180 --> 00:46:14,710
fabulous definitely look into it we

00:46:13,780 --> 00:46:19,120
didn't get the chance to talk about

00:46:14,710 --> 00:46:21,760
front awesome bootstrap has a default

00:46:19,120 --> 00:46:23,860
set of icons there a standard size font

00:46:21,760 --> 00:46:26,050
awesome replaces those with vector based

00:46:23,860 --> 00:46:28,330
icons that can be styled using standard

00:46:26,050 --> 00:46:31,900
CSS they can be big they can be small

00:46:28,330 --> 00:46:33,580
they can be red green blue definitely

00:46:31,900 --> 00:46:37,480
look into font awesome there's 300

00:46:33,580 --> 00:46:38,710
something icons there there's a small

00:46:37,480 --> 00:46:44,530
downside if you

00:46:38,710 --> 00:46:45,700
a designer has some difficulty with HTML

00:46:44,530 --> 00:46:47,740
and they're using something like you

00:46:45,700 --> 00:46:49,900
know InDesign or something like that I

00:46:47,740 --> 00:46:52,960
wish that font awesome could actually be

00:46:49,900 --> 00:46:56,920
downloaded as a font that they could use

00:46:52,960 --> 00:46:58,210
in their in their toolset you know just

00:46:56,920 --> 00:46:59,470
by installing it on there on the

00:46:58,210 --> 00:47:00,730
computer and that's not something that's

00:46:59,470 --> 00:47:03,460
quite possible but it's really perfect

00:47:00,730 --> 00:47:05,109
for us you know I'm sure that patches

00:47:03,460 --> 00:47:08,010
would be welcome for them to to make a

00:47:05,109 --> 00:47:11,230
process where that could could work out

00:47:08,010 --> 00:47:12,609
look into mocha for testing it's my

00:47:11,230 --> 00:47:15,670
preferred testing framework there's

00:47:12,609 --> 00:47:17,980
another one called Jasmine which is

00:47:15,670 --> 00:47:19,780
fantastic but I like mocha a little bit

00:47:17,980 --> 00:47:21,369
better one of the reasons that I like it

00:47:19,780 --> 00:47:23,710
is that it has a flexible testing

00:47:21,369 --> 00:47:25,720
structure one is qunit like which is a

00:47:23,710 --> 00:47:28,180
little bit like pearls test simple and

00:47:25,720 --> 00:47:29,980
test more but my favorite is BDD

00:47:28,180 --> 00:47:33,580
behavior driven development style where

00:47:29,980 --> 00:47:35,050
you have described and it so and you

00:47:33,580 --> 00:47:36,790
know should and expectations and that

00:47:35,050 --> 00:47:40,990
kind of thing so look into mocha for

00:47:36,790 --> 00:47:44,050
sure mocha also runs on node so you can

00:47:40,990 --> 00:47:46,720
get your you're at least many of your

00:47:44,050 --> 00:47:47,710
browser tests running from the command

00:47:46,720 --> 00:47:49,180
line which means that you could actually

00:47:47,710 --> 00:47:50,980
integrate them into your standard

00:47:49,180 --> 00:47:52,420
testing framework if you wanted to you

00:47:50,980 --> 00:47:54,339
can probably get it to do tap output I

00:47:52,420 --> 00:47:56,500
think it actually does tap output but by

00:47:54,339 --> 00:48:01,030
default that's a test anything protocol

00:47:56,500 --> 00:48:02,290
that pearl uses and invented and you can

00:48:01,030 --> 00:48:03,400
also hook it up to Jenkins and things

00:48:02,290 --> 00:48:07,359
like that for a continuous integration

00:48:03,400 --> 00:48:10,180
and you can cover the gap on Dom

00:48:07,359 --> 00:48:14,200
manipulation tests by using phantom j/s

00:48:10,180 --> 00:48:15,849
which is a headless browser you can do

00:48:14,200 --> 00:48:17,859
it you can use it for testing you can

00:48:15,849 --> 00:48:19,960
use it for taking screenshots you can do

00:48:17,859 --> 00:48:22,030
it for use it for page automation or

00:48:19,960 --> 00:48:23,290
even network monitoring some folks are

00:48:22,030 --> 00:48:24,339
using it for SEO and that's something

00:48:23,290 --> 00:48:25,930
the bill talked about a little bit

00:48:24,339 --> 00:48:27,250
before where you have a one page app but

00:48:25,930 --> 00:48:29,680
you need google to be able to understand

00:48:27,250 --> 00:48:32,290
what it is they intercept those requests

00:48:29,680 --> 00:48:35,710
fire off a phantom j/s request and send

00:48:32,290 --> 00:48:36,970
the content back it's pretty neat so

00:48:35,710 --> 00:48:38,170
that's a lot of stuff in a short amount

00:48:36,970 --> 00:48:40,450
of time I really appreciate you guys

00:48:38,170 --> 00:48:42,190
sitting through it it sounds like you

00:48:40,450 --> 00:48:43,630
know you didn't have a lot of exposure i

00:48:42,190 --> 00:48:44,800
hope that this give you an idea of what

00:48:43,630 --> 00:48:47,550
the landscape is like for you I

00:48:44,800 --> 00:48:47,550
developers right now

00:48:52,590 --> 00:48:55,710

YouTube URL: https://www.youtube.com/watch?v=68O0Wso_XuU


