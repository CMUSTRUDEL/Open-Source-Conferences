Title: Brock Wilcox (awwaiid) - Introduction to AngularJS
Publication date: 2013-08-20
Playlist: YAPC::NA 2013
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:09,990
hello everybody hi wait wait hey

00:00:04,740 --> 00:00:13,769
everybody okay pretty darn good Who am I

00:00:09,990 --> 00:00:19,320
this is my favorite unit too man hi I'm

00:00:13,769 --> 00:00:21,660
Brock or a weight on the internets I'm

00:00:19,320 --> 00:00:23,100
my slide software will show what command

00:00:21,660 --> 00:00:26,039
I'm going to run at the bottom here so

00:00:23,100 --> 00:00:29,160
as a demonstration Who am I hey wait see

00:00:26,039 --> 00:00:34,500
it's profound it's deep I'm sure you've

00:00:29,160 --> 00:00:36,390
all seen that before okay rather than

00:00:34,500 --> 00:00:37,590
start at the beginning i'm going to

00:00:36,390 --> 00:00:38,730
start in the middle of work my way to

00:00:37,590 --> 00:00:42,600
the beginning and then we'll go to the

00:00:38,730 --> 00:00:45,050
end first a demo this is the same one

00:00:42,600 --> 00:00:48,570
you'll get on the angularjs website I

00:00:45,050 --> 00:00:54,329
was a little hello thing and that you

00:00:48,570 --> 00:00:57,539
can say hello world and it just whatever

00:00:54,329 --> 00:00:59,129
I put in here shows up there seems kind

00:00:57,539 --> 00:01:02,719
of fancy imagine if you wanted to write

00:00:59,129 --> 00:01:02,719
all the JavaScript necessary for that

00:01:02,870 --> 00:01:10,229
let's look at it so this is the entire

00:01:07,049 --> 00:01:12,090
application you just saw pull in

00:01:10,229 --> 00:01:14,220
angularjs that's boring first

00:01:12,090 --> 00:01:19,040
interesting thing here at the top is

00:01:14,220 --> 00:01:22,380
this ng dash app that tells angular that

00:01:19,040 --> 00:01:25,020
we are having an angular app it's crazy

00:01:22,380 --> 00:01:26,250
down here is the actual functional part

00:01:25,020 --> 00:01:29,960
we have two things we have an input

00:01:26,250 --> 00:01:32,159
which has a special attribute ng-model

00:01:29,960 --> 00:01:35,490
tied to something called username and

00:01:32,159 --> 00:01:37,770
then we have a couple curlies a little

00:01:35,490 --> 00:01:39,869
template ething look in here that is

00:01:37,770 --> 00:01:42,960
also labeled as user name perhaps that's

00:01:39,869 --> 00:01:47,070
how these are tied together actually it

00:01:42,960 --> 00:01:51,680
is how these are tied together let me

00:01:47,070 --> 00:01:51,680
talk about these a little bit more oops

00:01:52,460 --> 00:02:00,149
so angular has something called

00:01:56,820 --> 00:02:02,640
directives which customize HTML in this

00:02:00,149 --> 00:02:04,409
case they're adding an attribute that

00:02:02,640 --> 00:02:07,049
you can put anywhere you want you can

00:02:04,409 --> 00:02:10,440
put it on div tags whatever that tell

00:02:07,049 --> 00:02:12,569
angular start looking from here and in

00:02:10,440 --> 00:02:13,170
nested scopes for things that you care

00:02:12,569 --> 00:02:16,980
about

00:02:13,170 --> 00:02:22,349
so kind of lexical the other part of

00:02:16,980 --> 00:02:25,770
this is very simple we have an input and

00:02:22,349 --> 00:02:27,420
tell us about the user name they talk a

00:02:25,770 --> 00:02:30,510
lot about something called two-way

00:02:27,420 --> 00:02:32,970
binding and this is an example of that

00:02:30,510 --> 00:02:36,350
we've decided that input is going to be

00:02:32,970 --> 00:02:41,910
bound to user name in their model and

00:02:36,350 --> 00:02:44,010
this reads from user name so neither of

00:02:41,910 --> 00:02:47,100
these things are the model they're just

00:02:44,010 --> 00:02:48,900
bound to the model if something else

00:02:47,100 --> 00:02:50,550
were to change the model both of these

00:02:48,900 --> 00:02:54,299
get updated and we'll see several

00:02:50,550 --> 00:02:56,700
examples of that in just a minute so you

00:02:54,299 --> 00:03:02,819
seem template and a little bit of

00:02:56,700 --> 00:03:05,670
directives now let's take a step back no

00:03:02,819 --> 00:03:07,830
no sorry step forward no that's not

00:03:05,670 --> 00:03:13,650
right step back look forward any right

00:03:07,830 --> 00:03:15,600
now we're cha chaan thank you I want to

00:03:13,650 --> 00:03:17,790
talk about scope I didn't even actually

00:03:15,600 --> 00:03:22,560
look at that sled yeah the the

00:03:17,790 --> 00:03:24,030
philosophy behind angular is in some

00:03:22,560 --> 00:03:25,890
ways they're building a framework like

00:03:24,030 --> 00:03:29,070
all the others but the core philosophy

00:03:25,890 --> 00:03:33,390
is they want to pretend that HTML and

00:03:29,070 --> 00:03:35,459
the browser are our extended in a way or

00:03:33,390 --> 00:03:37,910
maybe some of their changes they would

00:03:35,459 --> 00:03:40,950
actually like to be included in browsers

00:03:37,910 --> 00:03:42,900
angularjs is sponsored by Google so they

00:03:40,950 --> 00:03:44,549
happen to have a browser I wouldn't be

00:03:42,900 --> 00:03:46,530
surprised if some of this actually does

00:03:44,549 --> 00:03:48,060
end up in a browser especially some of

00:03:46,530 --> 00:03:51,269
the event loop things we'll see in a

00:03:48,060 --> 00:03:54,120
little bit but that's the kind of

00:03:51,269 --> 00:03:56,400
guiding philosophy behind it it wants to

00:03:54,120 --> 00:03:59,340
be declarative like HTML for some things

00:03:56,400 --> 00:04:03,359
and imperative javascript using

00:03:59,340 --> 00:04:06,299
javascript for some others one of the

00:04:03,359 --> 00:04:08,370
most important concepts in angularjs is

00:04:06,299 --> 00:04:11,069
this thing called scope now you see has

00:04:08,370 --> 00:04:13,950
a dollar there that's only to indicate

00:04:11,069 --> 00:04:16,229
that this is special for angular sort of

00:04:13,950 --> 00:04:19,079
a namespace completely unlike our

00:04:16,229 --> 00:04:22,169
dollars of course a little bit more like

00:04:19,079 --> 00:04:23,370
the jQuery dollar usage but anyway they

00:04:22,169 --> 00:04:25,229
throw that on top of something and you

00:04:23,370 --> 00:04:27,000
know it's provided by angular it's a

00:04:25,229 --> 00:04:32,400
system thing

00:04:27,000 --> 00:04:36,820
scope is going to tire our kind of bind

00:04:32,400 --> 00:04:40,330
into a piece of the DOM and instances of

00:04:36,820 --> 00:04:42,220
controllers this is kind of like

00:04:40,330 --> 00:04:45,760
function scope in a lot of ways which is

00:04:42,220 --> 00:04:50,500
pretty neat let's let's look again at

00:04:45,760 --> 00:04:51,910
this so this particular app actually is

00:04:50,500 --> 00:04:56,740
just using something called root scope

00:04:51,910 --> 00:04:58,780
so there's no particular narrowed down

00:04:56,740 --> 00:05:03,580
scope it's just one wide scope for

00:04:58,780 --> 00:05:07,000
everything however I talked about that

00:05:03,580 --> 00:05:09,580
already okay however if you want you can

00:05:07,000 --> 00:05:12,370
actually set up a controller and a

00:05:09,580 --> 00:05:14,560
controller has a scope it kind of binds

00:05:12,370 --> 00:05:16,740
one to one so an instance of a

00:05:14,560 --> 00:05:19,740
controller is an instance of the scope

00:05:16,740 --> 00:05:22,690
controllers are just functions very

00:05:19,740 --> 00:05:27,720
straightforward things so this is a very

00:05:22,690 --> 00:05:31,120
simple controller doesn't do anything

00:05:27,720 --> 00:05:33,250
but we can make it do a little bit more

00:05:31,120 --> 00:05:36,280
so in this example what we're doing is

00:05:33,250 --> 00:05:38,980
we're saying the simple controller gets

00:05:36,280 --> 00:05:41,650
its own scope I'll talk about these

00:05:38,980 --> 00:05:43,330
parameter passing more in a bit gets its

00:05:41,650 --> 00:05:48,300
own scope and it says add to that scope

00:05:43,330 --> 00:05:50,860
username equals Joe this is then

00:05:48,300 --> 00:05:54,070
declared inside of this div tag to say

00:05:50,860 --> 00:05:55,720
within the scope of this sorry to uses

00:05:54,070 --> 00:05:59,200
the word scope within the range of this

00:05:55,720 --> 00:06:03,280
div we're going to use this controller

00:05:59,200 --> 00:06:05,919
and implicitly that will actually

00:06:03,280 --> 00:06:07,600
execute the subroutine and set up the

00:06:05,919 --> 00:06:10,150
scope we'll see other things you can do

00:06:07,600 --> 00:06:13,810
in here in just a minute so let's uh

00:06:10,150 --> 00:06:18,130
let's try that surprise surprise it

00:06:13,810 --> 00:06:19,540
actually initializes it to Joe now we

00:06:18,130 --> 00:06:23,140
can edit it and it behaves exactly like

00:06:19,540 --> 00:06:26,130
before but we've but we've initialized

00:06:23,140 --> 00:06:26,130
it here

00:06:28,569 --> 00:06:40,779
so we could take this further let's say

00:06:35,309 --> 00:06:42,219
do this let's say we have a no sir let's

00:06:40,779 --> 00:06:44,499
say we have a single controller simple

00:06:42,219 --> 00:06:46,629
control array and we're going to nest it

00:06:44,499 --> 00:06:48,969
inside of itself you follow so we have

00:06:46,629 --> 00:06:51,309
the outside div simple controller a then

00:06:48,969 --> 00:06:54,389
we have an embedded div some cultural or

00:06:51,309 --> 00:07:00,159
a and they both refer to user name and

00:06:54,389 --> 00:07:03,639
they're labeled the same so we can run

00:07:00,159 --> 00:07:06,580
this and when we type in here it fills

00:07:03,639 --> 00:07:08,080
out everywhere why why does it fill out

00:07:06,580 --> 00:07:10,619
everywhere you say because you're all on

00:07:08,080 --> 00:07:13,330
the edges of your seats I can see

00:07:10,619 --> 00:07:16,180
they're nested and if you don't

00:07:13,330 --> 00:07:18,669
explicitly define a variable whenever

00:07:16,180 --> 00:07:20,949
you initialize it then it just inherit

00:07:18,669 --> 00:07:23,050
it from the outer scope so it's kind of

00:07:20,949 --> 00:07:26,559
like the first usage is whenever you are

00:07:23,050 --> 00:07:28,389
lexically signing it to your scope which

00:07:26,559 --> 00:07:30,399
is why I have this commented out code

00:07:28,389 --> 00:07:33,069
where I say okay what happens if we oh

00:07:30,399 --> 00:07:35,979
no actually I've got a better idea watch

00:07:33,069 --> 00:07:39,550
this it's going to be awesome so we type

00:07:35,979 --> 00:07:44,110
in here right let's say we type into

00:07:39,550 --> 00:07:46,389
here now we've explicitly defined this

00:07:44,110 --> 00:07:50,169
version of user name inside of this

00:07:46,389 --> 00:07:51,759
scope and effectively stopped inheriting

00:07:50,169 --> 00:07:53,680
it or I don't know that's a good word

00:07:51,759 --> 00:07:55,659
but you know stopped using the one from

00:07:53,680 --> 00:07:59,110
our parent container now they're

00:07:55,659 --> 00:08:01,649
completely independent and you can see

00:07:59,110 --> 00:08:05,949
that whenever we comments out this

00:08:01,649 --> 00:08:08,349
default version because they just start

00:08:05,949 --> 00:08:09,729
off independent immediately even if I

00:08:08,349 --> 00:08:10,959
modify this one they're already

00:08:09,729 --> 00:08:13,599
independent because it's already been

00:08:10,959 --> 00:08:19,089
defined for each one of them so you

00:08:13,599 --> 00:08:24,189
don't say ok that's pretty fun what else

00:08:19,089 --> 00:08:26,919
we got ok now I'm going to do something

00:08:24,189 --> 00:08:29,199
even trickier but just to really get

00:08:26,919 --> 00:08:32,819
this in because this is a core concept

00:08:29,199 --> 00:08:34,750
that is powerful and I like it a lot

00:08:32,819 --> 00:08:37,120
here we're going to have simple

00:08:34,750 --> 00:08:39,520
controller a and we're going to have

00:08:37,120 --> 00:08:41,740
set it up with a default username left

00:08:39,520 --> 00:08:44,440
some controller B which we don't do

00:08:41,740 --> 00:08:46,990
anything in we're going to nest be

00:08:44,440 --> 00:08:56,500
inside of a and just for a variety sake

00:08:46,990 --> 00:08:58,450
we're going to nest a inside of be so so

00:08:56,500 --> 00:09:01,120
we nested a is the one where it defines

00:08:58,450 --> 00:09:03,220
it and as expected whenever we modify it

00:09:01,120 --> 00:09:04,930
here be even though it's completely

00:09:03,220 --> 00:09:09,279
different controller is still getting

00:09:04,930 --> 00:09:10,750
the same scope same deal as before where

00:09:09,279 --> 00:09:16,480
we override this and now they are

00:09:10,750 --> 00:09:18,730
independent here in we embedded them

00:09:16,480 --> 00:09:20,500
opposite so this is simple controller a

00:09:18,730 --> 00:09:23,890
and this is simple controller be a

00:09:20,500 --> 00:09:25,260
initialized Joe and as expected they're

00:09:23,890 --> 00:09:27,490
actually independent from the beginning

00:09:25,260 --> 00:09:37,860
because the inner one actually is

00:09:27,490 --> 00:09:42,370
already defined all right let us then

00:09:37,860 --> 00:09:44,350
step back second again there's a bunch

00:09:42,370 --> 00:09:46,330
of concepts in angularjs I'm not going

00:09:44,350 --> 00:09:49,000
to be able to touch upon all of them the

00:09:46,330 --> 00:09:50,529
the idea that i have here i'm

00:09:49,000 --> 00:09:52,420
introducing my talk in the middle in

00:09:50,529 --> 00:09:53,500
case you've missed it the idea i have

00:09:52,420 --> 00:09:55,270
here is to just show you some

00:09:53,500 --> 00:09:58,570
interesting things that are not obvious

00:09:55,270 --> 00:10:00,459
from the tutorials then when you go back

00:09:58,570 --> 00:10:01,420
home and you're like that was weird i

00:10:00,459 --> 00:10:03,370
want to see what this is really about

00:10:01,420 --> 00:10:05,500
and you do the tutorials you'll actually

00:10:03,370 --> 00:10:09,070
already have a toe hold of some of the

00:10:05,500 --> 00:10:11,170
deeper gems of what's going on we've

00:10:09,070 --> 00:10:14,560
seen templates that's just HTML turned

00:10:11,170 --> 00:10:16,709
into dom we've seen model it's a little

00:10:14,560 --> 00:10:21,220
bit weird to say the scope is the model

00:10:16,709 --> 00:10:24,550
but but it is the way they explain it in

00:10:21,220 --> 00:10:28,390
their documents is that scope refers to

00:10:24,550 --> 00:10:30,130
the model but the conceptually that

00:10:28,390 --> 00:10:33,880
isn't quite accurate what's really

00:10:30,130 --> 00:10:35,230
happening is that scope is the model you

00:10:33,880 --> 00:10:36,670
can point it at other stuff outside of

00:10:35,230 --> 00:10:40,630
scope and then it's all linked

00:10:36,670 --> 00:10:43,120
nonetheless and oddly you have one scope

00:10:40,630 --> 00:10:45,480
/ instance of a controller as we saw and

00:10:43,120 --> 00:10:47,230
they can nest and overwrite each other

00:10:45,480 --> 00:10:49,060
controllers you've seen those are just

00:10:47,230 --> 00:10:50,660
functions they have a concept called

00:10:49,060 --> 00:10:52,190
modules where you can

00:10:50,660 --> 00:10:56,000
put together a bunch of these things

00:10:52,190 --> 00:10:58,129
into a namespace they have a concept

00:10:56,000 --> 00:11:01,810
called services which are good for tying

00:10:58,129 --> 00:11:04,699
to external things I used it for

00:11:01,810 --> 00:11:07,490
implementing ajax a service to my web

00:11:04,699 --> 00:11:08,720
server for an API then you have

00:11:07,490 --> 00:11:10,699
directives which we'll talk about in a

00:11:08,720 --> 00:11:12,740
minute possibly the most powerful thing

00:11:10,699 --> 00:11:17,300
in angularjs which we don't have time to

00:11:12,740 --> 00:11:20,930
go into and we have Watchers which are

00:11:17,300 --> 00:11:25,250
things that actively watch the state of

00:11:20,930 --> 00:11:28,279
models and can execute events based on

00:11:25,250 --> 00:11:29,870
it the templates actively watch it they

00:11:28,279 --> 00:11:31,540
effectively are watcher but sometimes

00:11:29,870 --> 00:11:34,759
you want to actually do things whenever

00:11:31,540 --> 00:11:36,350
things in your model change filters are

00:11:34,759 --> 00:11:37,850
mainly for a formatting and then we'll

00:11:36,350 --> 00:11:41,300
talk about dependency injection in a

00:11:37,850 --> 00:11:44,990
second so controller so far haven't done

00:11:41,300 --> 00:11:47,029
anything let's make ours do something so

00:11:44,990 --> 00:11:50,259
here we have simple controller a big

00:11:47,029 --> 00:11:53,120
enough yes it's given that its scope

00:11:50,259 --> 00:11:55,310
sets up username and now it's adding a

00:11:53,120 --> 00:11:58,040
little bit of functionality it's going

00:11:55,310 --> 00:11:59,990
to give a method called capitalize where

00:11:58,040 --> 00:12:03,470
it takes whatever the current username

00:11:59,990 --> 00:12:04,850
and upper cases it and then the rest

00:12:03,470 --> 00:12:08,360
here is the same except we're going to

00:12:04,850 --> 00:12:09,350
add a button that invokes this you

00:12:08,360 --> 00:12:11,329
notice it doesn't say anything about

00:12:09,350 --> 00:12:16,480
scope here it just knows what scope it's

00:12:11,329 --> 00:12:19,250
currently in so kind of as expected

00:12:16,480 --> 00:12:21,079
whenever you click this it upper cases

00:12:19,250 --> 00:12:24,860
it but notice its upper casing

00:12:21,079 --> 00:12:27,529
everything the input is watching the

00:12:24,860 --> 00:12:29,180
scope for it the thing in the h2 the

00:12:27,529 --> 00:12:32,930
curly braces is watching the scope

00:12:29,180 --> 00:12:37,009
everything is watching it which sounds

00:12:32,930 --> 00:12:38,990
kind of scary so oops wait let's talk

00:12:37,009 --> 00:12:42,019
about watches oh let's make it even

00:12:38,990 --> 00:12:47,000
crazier I guess I wonder what this is oh

00:12:42,019 --> 00:12:48,410
great okay so just to introduce the idea

00:12:47,000 --> 00:12:50,660
of watches we're going to take what we

00:12:48,410 --> 00:12:53,269
just had and we're going to add in a

00:12:50,660 --> 00:12:55,759
watch so on the scope you're attaching a

00:12:53,269 --> 00:12:58,790
watch you're going to watch user name

00:12:55,759 --> 00:13:01,329
and any time user name is invoked it's

00:12:58,790 --> 00:13:03,519
going to hit this function called new

00:13:01,329 --> 00:13:04,809
anytime user name is changed it's going

00:13:03,519 --> 00:13:06,429
to evoke this function which gives it

00:13:04,809 --> 00:13:09,879
the new user name it also gives it the

00:13:06,429 --> 00:13:12,220
old username but we don't care and then

00:13:09,879 --> 00:13:14,410
it's going to update this other scope

00:13:12,220 --> 00:13:15,999
variable called greetings and maybe it's

00:13:14,410 --> 00:13:19,480
going to count how many uppercase

00:13:15,999 --> 00:13:24,759
letters it has and here I've just added

00:13:19,480 --> 00:13:30,249
some template things so let's see if it

00:13:24,759 --> 00:13:32,920
actually works shall we I don't know who

00:13:30,249 --> 00:13:39,429
Joe is but they're awesome so it has

00:13:32,920 --> 00:13:41,079
three hey Joe so we have this one which

00:13:39,429 --> 00:13:42,970
is forcing everything to lowercase this

00:13:41,079 --> 00:13:44,470
is just exactly what I typed and this is

00:13:42,970 --> 00:13:47,649
accounts of the Capitals now the counts

00:13:44,470 --> 00:13:49,569
of the capitals as you may recall is

00:13:47,649 --> 00:13:52,059
back rounded so you can't see it i'll

00:13:49,569 --> 00:13:56,230
show you a second is actually built to

00:13:52,059 --> 00:13:58,689
on a watch actually both of these are so

00:13:56,230 --> 00:14:00,819
if we say this is big that was our call

00:13:58,689 --> 00:14:04,119
back and it doesn't do anything except

00:14:00,819 --> 00:14:08,499
for update that same binding inside of

00:14:04,119 --> 00:14:13,980
scope but instantaneously the wash picks

00:14:08,499 --> 00:14:13,980
up on that and recalculates everything

00:14:14,759 --> 00:14:20,290
so you can see that right there just

00:14:18,549 --> 00:14:23,279
counting how many uppercase letters it

00:14:20,290 --> 00:14:26,319
has and telling you the the length and

00:14:23,279 --> 00:14:27,519
surprisingly it's fast and the theory

00:14:26,319 --> 00:14:29,110
goes that you can get a whole bunch of

00:14:27,519 --> 00:14:34,239
these and it will still be very

00:14:29,110 --> 00:14:36,910
efficient how you might say how does any

00:14:34,239 --> 00:14:38,230
of this work you may say all right i'm

00:14:36,910 --> 00:14:39,579
going to show you the diagrams from

00:14:38,230 --> 00:14:42,129
their thing let's sail please be there

00:14:39,579 --> 00:14:45,699
not too bad when you first start up your

00:14:42,129 --> 00:14:49,239
application your you know your browser

00:14:45,699 --> 00:14:51,459
loads some HTML turns into dom dom

00:14:49,239 --> 00:14:53,439
content loaded event happens and that's

00:14:51,459 --> 00:14:58,480
when angularjs starts picking things up

00:14:53,439 --> 00:14:59,829
it looks for the ng-app it sets up the

00:14:58,480 --> 00:15:04,679
dependency injection stuff which i'll

00:14:59,829 --> 00:15:08,169
talk about the compile is basically

00:15:04,679 --> 00:15:12,639
translating those curlies and other

00:15:08,169 --> 00:15:14,490
things into just pure DOM and setting up

00:15:12,639 --> 00:15:17,310
the root scope and

00:15:14,490 --> 00:15:21,810
then it actually updates what you see in

00:15:17,310 --> 00:15:25,200
your browser that part's saying whatever

00:15:21,810 --> 00:15:27,300
but the fun part is this so when you

00:15:25,200 --> 00:15:33,870
have an event happen in the actual

00:15:27,300 --> 00:15:36,270
browser angularjs watches for events

00:15:33,870 --> 00:15:37,950
like key presses things like that

00:15:36,270 --> 00:15:42,330
anything that it knows that you're

00:15:37,950 --> 00:15:48,240
looking for and it actually has its own

00:15:42,330 --> 00:15:50,880
entire event queue so it will let's say

00:15:48,240 --> 00:15:53,660
that watch where I'm doing the upper

00:15:50,880 --> 00:15:57,390
case the upper case actually modifies

00:15:53,660 --> 00:16:00,690
the scope so in here it'll modify the

00:15:57,390 --> 00:16:03,420
scope in here it will look through all

00:16:00,690 --> 00:16:05,250
of the things to see what touched what

00:16:03,420 --> 00:16:06,600
and this is 0 user name is modified and

00:16:05,250 --> 00:16:08,940
then we'll go back here and say does

00:16:06,600 --> 00:16:10,890
anyone care about user name being

00:16:08,940 --> 00:16:14,130
modified and it'll keep doing that until

00:16:10,890 --> 00:16:17,610
everything settles once everything

00:16:14,130 --> 00:16:18,870
settles it will then go back and go

00:16:17,610 --> 00:16:20,850
ahead and do all of the rendering and

00:16:18,870 --> 00:16:24,540
updating of the templates so it makes it

00:16:20,850 --> 00:16:27,870
really efficient you can if you wanted

00:16:24,540 --> 00:16:29,459
to pretty easily abuse this it'll go

00:16:27,870 --> 00:16:31,200
through I think 30 times before it

00:16:29,459 --> 00:16:33,089
starts getting mad at you so if you have

00:16:31,200 --> 00:16:37,350
something that isn't actually

00:16:33,089 --> 00:16:38,790
predictable then it will break but for

00:16:37,350 --> 00:16:41,370
the most part you do things like this

00:16:38,790 --> 00:16:44,959
and it settles with in maybe an

00:16:41,370 --> 00:16:48,930
iteration or two and then it renders

00:16:44,959 --> 00:16:50,399
pretty fancy okay I don't have that much

00:16:48,930 --> 00:16:52,320
time so do I want to tell you about a

00:16:50,399 --> 00:16:54,810
couple cool things in here one of which

00:16:52,320 --> 00:16:56,579
is dependency injection in my

00:16:54,810 --> 00:16:58,380
controllers you saw that I used this

00:16:56,579 --> 00:17:01,170
thing called scope in fact actually one

00:16:58,380 --> 00:17:05,010
of my earlier constructor or controllers

00:17:01,170 --> 00:17:08,640
I didn't use anything this is a

00:17:05,010 --> 00:17:10,559
dependency the reason it wants to pass

00:17:08,640 --> 00:17:12,600
in scope rather than you're just getting

00:17:10,559 --> 00:17:14,730
it magically is so that you can mock

00:17:12,600 --> 00:17:17,459
things you can actually set up a scope

00:17:14,730 --> 00:17:19,679
and pass it into your controller and see

00:17:17,459 --> 00:17:22,350
what you get out there's other things

00:17:19,679 --> 00:17:23,610
there's other services the angular

00:17:22,350 --> 00:17:27,000
provides or ones that you can write

00:17:23,610 --> 00:17:27,959
yourself such as this HTTP when you read

00:17:27,000 --> 00:17:29,460
the docs it

00:17:27,959 --> 00:17:31,950
say anything about where you're supposed

00:17:29,460 --> 00:17:34,919
to put these and you could put HTTP

00:17:31,950 --> 00:17:36,690
there's some I don't have some cookie

00:17:34,919 --> 00:17:39,090
services other things you just put them

00:17:36,690 --> 00:17:41,789
in there and that can't work you can't

00:17:39,090 --> 00:17:42,899
just put random things in there you and

00:17:41,789 --> 00:17:45,169
you can change the order the order

00:17:42,899 --> 00:17:49,140
doesn't matter and that can't work

00:17:45,169 --> 00:17:51,090
however what's really happening is it's

00:17:49,140 --> 00:17:54,000
taking your function and translating it

00:17:51,090 --> 00:17:56,429
into something like this where it has

00:17:54,000 --> 00:17:59,730
your module which my example doesn't

00:17:56,429 --> 00:18:03,149
show very well your controller and it

00:17:59,730 --> 00:18:05,130
extracts out what your dependencies are

00:18:03,149 --> 00:18:06,630
what your parameters are and then it

00:18:05,130 --> 00:18:09,419
calls your function and it knows after

00:18:06,630 --> 00:18:12,929
that positionally what they are how you

00:18:09,419 --> 00:18:17,970
may say have you ever done to string on

00:18:12,929 --> 00:18:21,330
a function JavaScript anyone let's do it

00:18:17,970 --> 00:18:24,330
I got two minutes what do i'm going to

00:18:21,330 --> 00:18:27,510
go no look almost all right let's do

00:18:24,330 --> 00:18:35,880
that all right so let's say we write a

00:18:27,510 --> 00:18:40,980
function function foo hi this is a

00:18:35,880 --> 00:18:46,080
something like that what that's a very

00:18:40,980 --> 00:18:49,049
bad idea okay you can do foo dot to

00:18:46,080 --> 00:18:51,510
string and guess what it gives the

00:18:49,049 --> 00:18:53,130
source code for your function this is

00:18:51,510 --> 00:18:58,200
why I like JavaScript it's a little bit

00:18:53,130 --> 00:19:00,809
evil angularjs then parses your function

00:18:58,200 --> 00:19:05,700
pulls out the parameters and uses that

00:19:00,809 --> 00:19:09,779
to construct their their full way of

00:19:05,700 --> 00:19:12,270
doing this nice yes it's my kind of it

00:19:09,779 --> 00:19:14,159
you will like say now of course this

00:19:12,270 --> 00:19:15,390
doesn't always work so well if you try

00:19:14,159 --> 00:19:17,429
to minify your scripts or things like

00:19:15,390 --> 00:19:19,740
that you know there are special

00:19:17,429 --> 00:19:21,120
minification tools because you know when

00:19:19,740 --> 00:19:24,000
you minify it'll change these to like a

00:19:21,120 --> 00:19:27,320
and B things but they're special tools

00:19:24,000 --> 00:19:30,000
that will minify things correctly i

00:19:27,320 --> 00:19:33,330
mentioned services before HP you can

00:19:30,000 --> 00:19:37,200
make your own to do resources a good one

00:19:33,330 --> 00:19:39,320
it expects JSON I can try to show you my

00:19:37,200 --> 00:19:41,370
example real quick though amount of time

00:19:39,320 --> 00:19:44,250
the powerful thing that

00:19:41,370 --> 00:19:45,600
that I need to get further into but not

00:19:44,250 --> 00:19:48,600
good for introductory anyways custom

00:19:45,600 --> 00:19:51,630
directives in order to manipulate the

00:19:48,600 --> 00:19:53,820
Dom you don't do it in your controller

00:19:51,630 --> 00:19:55,290
it's very frowned upon the ideas

00:19:53,820 --> 00:19:58,320
controller should be completely unit

00:19:55,290 --> 00:20:00,030
testable without an actual Dom instead

00:19:58,320 --> 00:20:02,220
you make these custom directives and you

00:20:00,030 --> 00:20:05,970
concentrate all that evil unto them what

00:20:02,220 --> 00:20:07,140
you know the map quote thing and that's

00:20:05,970 --> 00:20:08,640
where you would wrap around like your

00:20:07,140 --> 00:20:10,290
jquery date widget or something like

00:20:08,640 --> 00:20:13,440
that and then in your HTML you just have

00:20:10,290 --> 00:20:16,080
a new tag called eight widget and that

00:20:13,440 --> 00:20:18,240
knows how to work with your scope as far

00:20:16,080 --> 00:20:20,429
as injecting what variables you want you

00:20:18,240 --> 00:20:24,000
can work with services all kinds of

00:20:20,429 --> 00:20:26,790
things one really cool thing is debugger

00:20:24,000 --> 00:20:32,059
in chrome called Batarang Batarang like

00:20:26,790 --> 00:20:34,800
the bat ring and it will actually render

00:20:32,059 --> 00:20:37,559
the scopes and visualize everything for

00:20:34,800 --> 00:20:39,960
you and where everything is and here are

00:20:37,559 --> 00:20:41,580
some resources and I'm unfortunately out

00:20:39,960 --> 00:20:42,809
of time but I have other stuff to show

00:20:41,580 --> 00:20:45,240
you if you want to come and get me

00:20:42,809 --> 00:20:48,360
afterwards this is very fun there are a

00:20:45,240 --> 00:20:50,400
lot of really cool MVC's out there and

00:20:48,360 --> 00:20:57,050
this is one of the weird ones I think

00:20:50,400 --> 00:21:02,720
which I enjoy one question anyone one

00:20:57,050 --> 00:21:02,720
you yes

00:21:07,230 --> 00:21:15,540
so the batarang module goes into the

00:21:11,419 --> 00:21:17,669
Chrome's own debugger tools so you can

00:21:15,540 --> 00:21:18,809
do stepping and stuff like that but more

00:21:17,669 --> 00:21:21,030
importantly it'll give you a

00:21:18,809 --> 00:21:24,230
visualization on the nested scopes and

00:21:21,030 --> 00:21:26,669
what you currently have so that's one I

00:21:24,230 --> 00:21:28,740
often just do console dot log that's

00:21:26,669 --> 00:21:31,140
pretty easy but probably the biggest one

00:21:28,740 --> 00:21:34,169
is that this is all designs to be unit

00:21:31,140 --> 00:21:36,750
testable so actually writing a test

00:21:34,169 --> 00:21:40,080
suite that can execute a controller pass

00:21:36,750 --> 00:21:42,600
it in a fake HTTP service and see what

00:21:40,080 --> 00:21:45,600
it tries to invoke and you can actually

00:21:42,600 --> 00:21:56,600
see how it's hitting your server so

00:21:45,600 --> 00:21:56,600
doesn't movies all right one more I I

00:22:01,220 --> 00:22:05,280
have no idea you want to try I don't

00:22:04,080 --> 00:22:09,390
know if we have time because someone's

00:22:05,280 --> 00:22:12,570
supposed to talk after me really all

00:22:09,390 --> 00:22:14,370
right we got time other people you can

00:22:12,570 --> 00:22:16,470
actually I will just say this is the end

00:22:14,370 --> 00:22:20,090
and then you can leave and we'll do this

00:22:16,470 --> 00:22:20,090
experience thank you

00:22:28,490 --> 00:22:32,510
doo doo doo doo doo

00:22:55,990 --> 00:23:15,420
I don't think this will work comma

00:23:16,590 --> 00:23:27,520
here's some quotes maybe space did i

00:23:25,900 --> 00:23:46,270
misspell anything it all looks generally

00:23:27,520 --> 00:23:48,730
okay oh sure no I shouldn't it should

00:23:46,270 --> 00:23:53,020
just display hmm you should just play

00:23:48,730 --> 00:23:56,830
Yeah right so no I think that's the

00:23:53,020 --> 00:23:58,330
answer yeah so you could you could you

00:23:56,830 --> 00:24:00,340
would maybe nest you'd have a div in a

00:23:58,330 --> 00:24:01,630
div instead and if one of them only knew

00:24:00,340 --> 00:24:02,770
about its own scope variables and the

00:24:01,630 --> 00:24:07,090
other only knew about its own scope

00:24:02,770 --> 00:24:10,230
Pharaoh's uh everything's okay cool all

00:24:07,090 --> 00:24:10,230

YouTube URL: https://www.youtube.com/watch?v=VdB4SUCsmsU


