Title: Stevan Little - Moe Status Update
Publication date: 2013-08-20
Playlist: YAPC::NA 2013
Description: 
	
Captions: 
	00:00:23,289 --> 00:00:32,989
alright looks to be about two-thirty so

00:00:25,789 --> 00:00:37,430
I think she'll start so okay everybody

00:00:32,989 --> 00:00:39,980
hear me good okay so this talk is about

00:00:37,430 --> 00:00:43,430
mo project i started about six months

00:00:39,980 --> 00:00:46,430
ago i'm steven little you're at Yap cna

00:00:43,430 --> 00:00:47,720
2013 case you weren't sure also it's in

00:00:46,430 --> 00:00:49,850
austin texas again in case you're mature

00:00:47,720 --> 00:00:54,860
and i believe that's a date I can't

00:00:49,850 --> 00:00:59,180
current firm that although okay so how

00:00:54,860 --> 00:01:02,780
many of you know what mo is it's not

00:00:59,180 --> 00:01:06,680
Larry no no no the sequel will be curly

00:01:02,780 --> 00:01:08,270
though so it's all do a quick overview

00:01:06,680 --> 00:01:11,170
so I announced this project at the

00:01:08,270 --> 00:01:15,440
orlando orlando pro workshop this year

00:01:11,170 --> 00:01:18,130
and the goal here is to experiment and

00:01:15,440 --> 00:01:20,750
try and create a new runtime for pro 5

00:01:18,130 --> 00:01:23,210
but not necessarily for the profile view

00:01:20,750 --> 00:01:24,860
all programming today i actually had a

00:01:23,210 --> 00:01:26,930
couple feature additions and feature

00:01:24,860 --> 00:01:31,220
removals that I wanted to do so i'm

00:01:26,930 --> 00:01:34,040
calling this an ultra-modern pro 5 so

00:01:31,220 --> 00:01:36,229
what that means exactly is i wanted to

00:01:34,040 --> 00:01:38,450
get a more consistent syntax and a same

00:01:36,229 --> 00:01:40,579
grammar the the profile grammar is known

00:01:38,450 --> 00:01:44,270
to be understandable probably by larry

00:01:40,579 --> 00:01:48,200
and no okay now by layering he denies it

00:01:44,270 --> 00:01:51,110
but i want to also add a real AST in

00:01:48,200 --> 00:01:53,540
there I wanted to which which would help

00:01:51,110 --> 00:01:55,040
create better tooling support this is

00:01:53,540 --> 00:01:57,470
something that I noticed when I started

00:01:55,040 --> 00:01:58,610
playing around with JavaScript and some

00:01:57,470 --> 00:02:00,680
of the JavaScript variants that are out

00:01:58,610 --> 00:02:04,790
there like typescript that they have a

00:02:00,680 --> 00:02:07,520
very well-defined AST and therefore

00:02:04,790 --> 00:02:09,049
these things plug into IDEs and editors

00:02:07,520 --> 00:02:12,410
and stuff like that extremely nicely

00:02:09,049 --> 00:02:14,900
something might be nice for us I wanted

00:02:12,410 --> 00:02:18,230
a less insane runtime as Liz mentioned

00:02:14,900 --> 00:02:21,620
in her talk earlier you know the the

00:02:18,230 --> 00:02:23,510
pro/5 internals are commonly referred to

00:02:21,620 --> 00:02:25,010
as Jenga internals because if you take

00:02:23,510 --> 00:02:27,860
one piece out the whole thing might come

00:02:25,010 --> 00:02:31,050
crashing down I wanted to have a proper

00:02:27,860 --> 00:02:35,440
mop a method object or

00:02:31,050 --> 00:02:37,420
meta object protocol this was a project

00:02:35,440 --> 00:02:38,860
did the reason for this came out of a

00:02:37,420 --> 00:02:41,349
project that actually was what inspired

00:02:38,860 --> 00:02:44,620
this which was my attempt to bring a mop

00:02:41,349 --> 00:02:48,099
into the current profile core I ran into

00:02:44,620 --> 00:02:50,319
some issues in general I wanted to try

00:02:48,099 --> 00:02:52,870
and bring that vision that Jesse Vincent

00:02:50,319 --> 00:02:55,840
laid out in his pro 5 16 and Beyond talk

00:02:52,870 --> 00:02:57,940
which was a slimmer core meaning just a

00:02:55,840 --> 00:02:59,590
language not a language plus a UNIX tool

00:02:57,940 --> 00:03:02,950
kit plus a networking tool kit all

00:02:59,590 --> 00:03:06,130
thrown into one I wanted to kind of kill

00:03:02,950 --> 00:03:07,180
access I never really learned excess but

00:03:06,130 --> 00:03:09,790
every time I looked at it I just

00:03:07,180 --> 00:03:11,260
couldn't get my head around it I know

00:03:09,790 --> 00:03:14,920
it's sort of one of those things that a

00:03:11,260 --> 00:03:18,430
lot of people don't like I wanted a

00:03:14,920 --> 00:03:20,019
modern vm platform I really don't care

00:03:18,430 --> 00:03:22,840
what that is currently right now the

00:03:20,019 --> 00:03:25,390
experiment is going on in the JVM but it

00:03:22,840 --> 00:03:28,299
could be any of these I wanted to have

00:03:25,390 --> 00:03:30,640
the ability to do that as a lot of other

00:03:28,299 --> 00:03:32,830
on Python can do that Ruby can do that

00:03:30,640 --> 00:03:35,350
to some degree javascript obviously is

00:03:32,830 --> 00:03:37,150
all over the place and of course that

00:03:35,350 --> 00:03:39,519
would give us the possibility of doing

00:03:37,150 --> 00:03:42,459
cross-language sharing so while DVI is

00:03:39,519 --> 00:03:44,680
great jdbc can do things that DB I can

00:03:42,459 --> 00:03:48,010
you know and what if we could use jdbc

00:03:44,680 --> 00:03:50,200
from Pearl wouldn't that be cool so

00:03:48,010 --> 00:03:52,480
anyway after this announcement a lot of

00:03:50,200 --> 00:03:54,160
people some very very smart people came

00:03:52,480 --> 00:03:56,350
up to me offer me a lot of advice I

00:03:54,160 --> 00:03:57,970
listened to every single bit of it and i

00:03:56,350 --> 00:03:59,980
spent probably the first two weeks

00:03:57,970 --> 00:04:02,440
actually just mulling over these things

00:03:59,980 --> 00:04:04,840
thinking them through talking discussing

00:04:02,440 --> 00:04:07,920
all this kind of stuff like that and in

00:04:04,840 --> 00:04:10,840
the end i came to a decision which was I

00:04:07,920 --> 00:04:12,910
wanted to write code I would sink the

00:04:10,840 --> 00:04:15,220
talking I wanted to it was it was making

00:04:12,910 --> 00:04:18,729
my head hurt and while I had a decent

00:04:15,220 --> 00:04:19,870
idea of what I wanted I wasn't sure all

00:04:18,729 --> 00:04:21,850
the way through and I want to just feel

00:04:19,870 --> 00:04:24,700
my way through it so I dived into

00:04:21,850 --> 00:04:26,200
writing code I didn't know a couple of

00:04:24,700 --> 00:04:28,419
things for sure though I wanted to start

00:04:26,200 --> 00:04:29,470
as a basis with pro/5 I want to remove

00:04:28,419 --> 00:04:31,810
some features I want to add some

00:04:29,470 --> 00:04:33,729
features and I want to execute on a

00:04:31,810 --> 00:04:35,560
vision that had sort of started in my

00:04:33,729 --> 00:04:39,099
head with some of the p5 mop work that I

00:04:35,560 --> 00:04:41,120
did previously I wanted the quarter feel

00:04:39,099 --> 00:04:42,470
as much like pro 5

00:04:41,120 --> 00:04:44,690
I wanted to steal as much as I could

00:04:42,470 --> 00:04:46,220
from perl 6 Larry's been doing an

00:04:44,690 --> 00:04:48,919
awesome job creating all these features

00:04:46,220 --> 00:04:52,100
I mean what is an ultra-modern pro/5 of

00:04:48,919 --> 00:04:55,570
Perl 6 right so I didn't want to quite

00:04:52,100 --> 00:04:59,870
go that far so I'm kind of calling this

00:04:55,570 --> 00:05:01,160
pro 5 and a half maybe okay so that and

00:04:59,870 --> 00:05:02,090
that's not necessarily the number we're

00:05:01,160 --> 00:05:04,400
not gonna get into version number

00:05:02,090 --> 00:05:13,190
arguments okay that's just a description

00:05:04,400 --> 00:05:16,400
of the language potentially okay selter

00:05:13,190 --> 00:05:18,650
any so it's ready right highest bidder

00:05:16,400 --> 00:05:20,750
did it it so I've only got 20 minutes

00:05:18,650 --> 00:05:23,120
and I promised thought I wouldn't go

00:05:20,750 --> 00:05:24,229
over and I probably will but I didn't

00:05:23,120 --> 00:05:25,789
want to point out one thing before I

00:05:24,229 --> 00:05:27,440
dive into telling you about what we've

00:05:25,789 --> 00:05:30,919
done with Mo where we are in the status

00:05:27,440 --> 00:05:34,789
which is that mo is a thought experiment

00:05:30,919 --> 00:05:38,330
okay this is not an attempt to to

00:05:34,789 --> 00:05:41,419
actually create the canonical new

00:05:38,330 --> 00:05:42,680
runtime okay this is it's it's based on

00:05:41,419 --> 00:05:45,680
the pugs project and it's based on the

00:05:42,680 --> 00:05:49,099
pugs project not only just with the oh

00:05:45,680 --> 00:05:51,830
fun aspect but also one of the key goals

00:05:49,099 --> 00:05:53,630
of pugs was to give the Perl 6 language

00:05:51,830 --> 00:05:54,349
designers something to play around with

00:05:53,630 --> 00:05:56,510
something that they could actually

00:05:54,349 --> 00:05:58,340
tactile II feel the language with and

00:05:56,510 --> 00:06:00,680
see if what was what they were thinking

00:05:58,340 --> 00:06:02,240
was what they actually got so that's

00:06:00,680 --> 00:06:03,830
sort of my goal both for myself and

00:06:02,240 --> 00:06:05,419
anybody else who who's interested in

00:06:03,830 --> 00:06:06,889
sort of what the next step of profile

00:06:05,419 --> 00:06:09,560
might look like that's what I'm trying

00:06:06,889 --> 00:06:12,110
to do with mom so I can't stress enough

00:06:09,560 --> 00:06:13,760
that i'm trying to show a way forward

00:06:12,110 --> 00:06:15,289
and I'm not necessarily trying to be

00:06:13,760 --> 00:06:17,300
away forward so one of the big things

00:06:15,289 --> 00:06:18,530
that people complained about was you

00:06:17,300 --> 00:06:20,539
know you're trying to put pearl in the

00:06:18,530 --> 00:06:22,639
jvm that startup is too slow i'll never

00:06:20,539 --> 00:06:25,340
be able to do one liners well I'm not

00:06:22,639 --> 00:06:27,680
trying to do that so don't worry I'm

00:06:25,340 --> 00:06:30,410
also not trying to assert profile perl 6

00:06:27,680 --> 00:06:32,270
rather okay the pro-sex pro 6 effort in

00:06:30,410 --> 00:06:35,300
this effort I believe can continue along

00:06:32,270 --> 00:06:36,360
together hopefully we can give back and

00:06:35,300 --> 00:06:37,409
forth to one another

00:06:36,360 --> 00:06:39,750
I mean I'm right now I'm just stealing

00:06:37,409 --> 00:06:40,979
completely also from them but eventually

00:06:39,750 --> 00:06:43,740
hopefully I can go for them something

00:06:40,979 --> 00:06:45,449
back but the ultimate goal was to find a

00:06:43,740 --> 00:06:48,240
language somewhere in the middle that's

00:06:45,449 --> 00:06:51,300
not the pro/5 that John or want through

00:06:48,240 --> 00:06:53,069
the cup about in two thousand but is not

00:06:51,300 --> 00:06:54,210
quite pro six it's somewhere in the

00:06:53,069 --> 00:06:56,039
middle that feels comfortable in the

00:06:54,210 --> 00:06:59,909
hands of a profile programmer but is a

00:06:56,039 --> 00:07:02,699
gateway drug to pro six so now so now

00:06:59,909 --> 00:07:04,319
we're gonna go into what we have so the

00:07:02,699 --> 00:07:06,330
projects moving along we've got about

00:07:04,319 --> 00:07:08,849
six months going there's really two

00:07:06,330 --> 00:07:13,110
developers myself and I'm going to miss

00:07:08,849 --> 00:07:15,900
Brown's his name Prakesh ah hold on I

00:07:13,110 --> 00:07:19,319
got notes in here summer but I'm for

00:07:15,900 --> 00:07:21,569
cash I'll say that he's I'm very bad at

00:07:19,319 --> 00:07:24,180
name pronunciation so he's been working

00:07:21,569 --> 00:07:26,129
really hard with me on this and he's

00:07:24,180 --> 00:07:28,409
probably about half he's probably done

00:07:26,129 --> 00:07:29,939
about half the commits at this point but

00:07:28,409 --> 00:07:31,169
we're sort of moving forward and we're

00:07:29,939 --> 00:07:34,080
just like I said we're feeling our way

00:07:31,169 --> 00:07:35,759
through it so right now we have your

00:07:34,080 --> 00:07:37,680
basic literals double quoted single

00:07:35,759 --> 00:07:40,550
quoted we have integers we have numbers

00:07:37,680 --> 00:07:44,879
we have boolean proper true and a faults

00:07:40,550 --> 00:07:47,520
we haven't undef we have a pair ok this

00:07:44,879 --> 00:07:49,469
is borrowed from perl 6 we have hashes

00:07:47,520 --> 00:07:53,960
which essentially are a list of pairs

00:07:49,469 --> 00:07:56,580
whose keys are unique we have array refs

00:07:53,960 --> 00:08:00,629
and we have code and we're borrowing the

00:07:56,580 --> 00:08:03,810
Perl 6 20 code syntax here I want you to

00:08:00,629 --> 00:08:07,979
notice that the with the hash in the

00:08:03,810 --> 00:08:12,150
array they're both using the what we say

00:08:07,979 --> 00:08:14,189
in pro 5 is the reference in tax that's

00:08:12,150 --> 00:08:17,279
because we don't we don't differentiate

00:08:14,189 --> 00:08:19,979
from references and values anymore or

00:08:17,279 --> 00:08:22,800
rather mode isn't everything is an

00:08:19,979 --> 00:08:24,599
object okay so its object all the way

00:08:22,800 --> 00:08:25,979
down similar to Ruby similar to java

00:08:24,599 --> 00:08:27,330
script and stuff like that so there's no

00:08:25,979 --> 00:08:28,860
such thing as a list anymore there's

00:08:27,330 --> 00:08:31,979
just a raise and then there are in there

00:08:28,860 --> 00:08:33,659
an array object all of these have

00:08:31,979 --> 00:08:37,560
classes backing them from which you can

00:08:33,659 --> 00:08:40,589
call methods on I also removed the

00:08:37,560 --> 00:08:44,219
implicit conversions there now explicit

00:08:40,589 --> 00:08:46,089
which you'll see very shortly and well

00:08:44,219 --> 00:08:48,610
actually with the only one exception of

00:08:46,089 --> 00:08:50,170
to num will sort of do the right thing

00:08:48,610 --> 00:08:52,689
when you when you fiddle with them back

00:08:50,170 --> 00:08:54,670
and forth so then for operators we've

00:08:52,689 --> 00:08:57,449
got the logical we have two double A in

00:08:54,670 --> 00:09:00,309
the double or and the turning operator

00:08:57,449 --> 00:09:02,709
comparison operators on numbers and are

00:09:00,309 --> 00:09:05,559
integers and numbs we've got the string

00:09:02,709 --> 00:09:07,300
operators we've got a handful of

00:09:05,559 --> 00:09:08,559
mathematical operators probably not all

00:09:07,300 --> 00:09:09,759
of them I think I don't think we're not

00:09:08,559 --> 00:09:14,680
have a bit shift and all that kind of

00:09:09,759 --> 00:09:18,279
stuff string again Perl 6 so it's the

00:09:14,680 --> 00:09:20,829
the squiggly line and that's because

00:09:18,279 --> 00:09:23,769
methods now use the dot for the call

00:09:20,829 --> 00:09:26,459
this was a controversial change I'm

00:09:23,769 --> 00:09:29,410
still not a hundred percent sold on it

00:09:26,459 --> 00:09:31,779
but a lot of people really asked about

00:09:29,410 --> 00:09:33,490
it and considering that most of the rest

00:09:31,779 --> 00:09:35,050
of the world uses the dot operator for

00:09:33,490 --> 00:09:37,749
method send it seemed like a sensible

00:09:35,050 --> 00:09:39,819
way to go these are the corasian

00:09:37,749 --> 00:09:42,670
operators again select wholesale from

00:09:39,819 --> 00:09:45,610
pro 6 that's the boolean the string and

00:09:42,670 --> 00:09:49,990
the numeric and essentially forces the

00:09:45,610 --> 00:09:53,769
variable into that context we just

00:09:49,990 --> 00:09:56,589
recently got regular expression operator

00:09:53,769 --> 00:09:59,110
we don't have the bang tilde but we have

00:09:56,589 --> 00:10:01,179
we have that a very small regex support

00:09:59,110 --> 00:10:03,819
will go into later actually here we go i

00:10:01,179 --> 00:10:05,559
have his name here prakash colossa i'm

00:10:03,819 --> 00:10:06,790
not sure i'm probably saying a totally

00:10:05,559 --> 00:10:08,290
wrong but anyway he's been one of the

00:10:06,790 --> 00:10:11,019
biggest contributors so i have to thank

00:10:08,290 --> 00:10:12,519
him he's actually been doing sort of

00:10:11,019 --> 00:10:15,249
very interesting things he's been taking

00:10:12,519 --> 00:10:17,319
there was a course developed at some

00:10:15,249 --> 00:10:19,720
point where was 99 problems to solve

00:10:17,319 --> 00:10:22,089
with prologue and then somebody ported

00:10:19,720 --> 00:10:24,279
that to 99 problems to solve a scala and

00:10:22,089 --> 00:10:26,800
he's now in the process supporting that

00:10:24,279 --> 00:10:28,120
to 99 problems to solve with moe so in

00:10:26,800 --> 00:10:29,559
this section come becoming part of the

00:10:28,120 --> 00:10:31,540
test suite so it's kind of interesting

00:10:29,559 --> 00:10:33,279
because they're there they're very sort

00:10:31,540 --> 00:10:36,249
of computer science he problems but Moe

00:10:33,279 --> 00:10:37,509
is basically he's using that to drive

00:10:36,249 --> 00:10:39,040
development forward so it's sort of

00:10:37,509 --> 00:10:41,589
example driven development there in a

00:10:39,040 --> 00:10:45,279
way and then lastly we've got the range

00:10:41,589 --> 00:10:47,259
operator in all of these again from perl

00:10:45,279 --> 00:10:50,079
6 these are methods they're all methods

00:10:47,259 --> 00:10:52,389
on the objects that they're they're

00:10:50,079 --> 00:10:53,170
being referred to but we use this in fix

00:10:52,389 --> 00:10:55,510
prefix

00:10:53,170 --> 00:10:58,750
fix syntax and we all said the

00:10:55,510 --> 00:11:00,700
circumflex and sir compose flex flex

00:10:58,750 --> 00:11:03,870
posting stuff all that all that stuff

00:11:00,700 --> 00:11:06,279
from Pearl six again we're swiping I

00:11:03,870 --> 00:11:08,050
don't have support yet or i don't i'm

00:11:06,279 --> 00:11:13,620
not planning support yet for I hate

00:11:08,050 --> 00:11:16,060
keynote I don't yet have support for

00:11:13,620 --> 00:11:19,089
being able to add your own operators and

00:11:16,060 --> 00:11:21,220
do operator overloading I'm not sure I'm

00:11:19,089 --> 00:11:23,230
not a very good parser writer so unless

00:11:21,220 --> 00:11:25,149
I can convince Larry to contribute to

00:11:23,230 --> 00:11:26,290
the projects I'm not sure that I'm going

00:11:25,149 --> 00:11:30,130
to be able to get a partial that

00:11:26,290 --> 00:11:32,170
sophisticated in there but we'll see so

00:11:30,130 --> 00:11:37,570
for statements we have your basic if

00:11:32,170 --> 00:11:39,490
else if else unless else if else for and

00:11:37,570 --> 00:11:41,440
for each we're keeping the pro/5

00:11:39,490 --> 00:11:44,199
definitions of these not the Perl 6

00:11:41,440 --> 00:11:47,980
definition pro 6 basically got rid of

00:11:44,199 --> 00:11:51,100
for each just left for and turn the old

00:11:47,980 --> 00:11:54,850
style see for loops into is Luke keyword

00:11:51,100 --> 00:11:58,029
Larry yeah Luke keyword so I I like for

00:11:54,850 --> 00:12:01,510
each so I want to keep it we got a while

00:11:58,029 --> 00:12:03,040
and in a while and until and just about

00:12:01,510 --> 00:12:05,140
all of these actually also work as

00:12:03,040 --> 00:12:09,940
statement modifiers now again that was a

00:12:05,140 --> 00:12:12,480
Prakesh contribution we parsh try catch

00:12:09,940 --> 00:12:14,680
and finally but it's a no op right now

00:12:12,480 --> 00:12:16,600
this is because I wanted to focus on

00:12:14,680 --> 00:12:17,709
getting the actual so so if you think of

00:12:16,600 --> 00:12:19,269
exception handling there's really two

00:12:17,709 --> 00:12:22,120
sides to it there's the trying to catch

00:12:19,269 --> 00:12:23,949
blocks in the finally box and then

00:12:22,120 --> 00:12:25,899
there's the exceptions themselves if you

00:12:23,949 --> 00:12:28,360
don't have a well-thought-out exception

00:12:25,899 --> 00:12:29,860
object and and in sort of an exception

00:12:28,360 --> 00:12:31,570
system then it doesn't matter whether

00:12:29,860 --> 00:12:32,890
you have triquetra finally you'll get

00:12:31,570 --> 00:12:35,350
stuck in the same Meyer that we have

00:12:32,890 --> 00:12:37,180
right now with the you know the crazy

00:12:35,350 --> 00:12:39,819
string is the string is it this is that

00:12:37,180 --> 00:12:42,459
so we're going to get to that soon I

00:12:39,819 --> 00:12:44,829
also think too that I'm going to need

00:12:42,459 --> 00:12:47,649
either a match case style statements so

00:12:44,829 --> 00:12:51,010
if any of you pup programmed in a scala

00:12:47,649 --> 00:12:53,620
or o camel or Haskell I think Haskell

00:12:51,010 --> 00:12:56,649
calls it something different you know

00:12:53,620 --> 00:12:58,240
that or potentially given when the

00:12:56,649 --> 00:13:00,649
tricky there is match case really

00:12:58,240 --> 00:13:02,240
requires some sort of type checking wire

00:13:00,649 --> 00:13:03,559
given given when requires the smart

00:13:02,240 --> 00:13:05,329
operators so I have to decide which

00:13:03,559 --> 00:13:08,930
which sort of rat hole I want to go down

00:13:05,329 --> 00:13:13,579
on that but those are sort of getting

00:13:08,930 --> 00:13:16,249
there we also have some built-ins we

00:13:13,579 --> 00:13:18,800
have say we have print we have worn we

00:13:16,249 --> 00:13:24,439
have caller with an optional index you

00:13:18,800 --> 00:13:27,470
pass it in sleep system eval not sure

00:13:24,439 --> 00:13:31,189
Ord those are weird that I put them in

00:13:27,470 --> 00:13:33,980
Rand and die one thing to note here

00:13:31,189 --> 00:13:36,019
these are proper signatures okay and

00:13:33,980 --> 00:13:37,939
they actually get checked we're we're

00:13:36,019 --> 00:13:40,220
following the profile or perl 6

00:13:37,939 --> 00:13:43,220
signature spec on this one which i think

00:13:40,220 --> 00:13:46,730
a lot of the Perl 5 signature add-on

00:13:43,220 --> 00:13:49,579
models modules seem to do but we also

00:13:46,730 --> 00:13:54,470
got X exit I've also got a couple of the

00:13:49,579 --> 00:13:59,439
built-in variable so RV the environment

00:13:54,470 --> 00:14:02,600
the ink the ink away and the in cash

00:13:59,439 --> 00:14:05,269
getting rid of the dollar sign at it's

00:14:02,600 --> 00:14:07,069
just a giant mess we're going with the

00:14:05,269 --> 00:14:08,779
Perl 6 idea of everything is an

00:14:07,069 --> 00:14:10,579
exception so even if you throw a string

00:14:08,779 --> 00:14:12,050
with die I'm going to turn it into an

00:14:10,579 --> 00:14:16,959
exception and it's going to get caught

00:14:12,050 --> 00:14:20,870
with the dollar sign bang okay we also

00:14:16,959 --> 00:14:22,399
i'm giving you access you know any

00:14:20,870 --> 00:14:24,079
familiar with moose know that i like to

00:14:22,399 --> 00:14:26,689
give you full access to the entire guts

00:14:24,079 --> 00:14:28,009
of everything so that's all planned for

00:14:26,689 --> 00:14:31,160
this so you've got access to the actual

00:14:28,009 --> 00:14:33,769
runtime object the current package the

00:14:31,160 --> 00:14:36,860
current class the current invoking and

00:14:33,769 --> 00:14:39,139
the current routine being executed these

00:14:36,860 --> 00:14:40,970
are the Perl 6 twiggles I think I got

00:14:39,139 --> 00:14:43,189
this right Larry with the question mark

00:14:40,970 --> 00:14:44,839
in there you have a whole speck of the

00:14:43,189 --> 00:14:47,329
different ones in there so I may be a

00:14:44,839 --> 00:14:48,679
little off but but I think someone to

00:14:47,329 --> 00:14:51,199
give access to these variables and I

00:14:48,679 --> 00:14:53,389
opted out of the double underscore thing

00:14:51,199 --> 00:14:55,069
that pro/5 does because the fact that

00:14:53,389 --> 00:14:57,350
matter is is the double underscore is

00:14:55,069 --> 00:15:00,140
just sort of a weird bear word that

00:14:57,350 --> 00:15:02,780
happens to handle the compile time and

00:15:00,140 --> 00:15:04,370
and does this little magic these are

00:15:02,780 --> 00:15:05,780
runtime accessible variables so I

00:15:04,370 --> 00:15:07,550
thought they should look like variables

00:15:05,780 --> 00:15:11,330
instead of looking like basically well

00:15:07,550 --> 00:15:15,830
like Python methods actually let's be

00:15:11,330 --> 00:15:20,840
honest there you go thank you larry

00:15:15,830 --> 00:15:22,400
endorses it so one thing you'll notice

00:15:20,840 --> 00:15:26,780
it's conspicuously missing and they just

00:15:22,400 --> 00:15:29,780
got water on my laptop no push no pop of

00:15:26,780 --> 00:15:32,600
shifts all those array operators array

00:15:29,780 --> 00:15:36,080
built-ins no hash built-ins file hand of

00:15:32,600 --> 00:15:38,740
built-ins no string no number and no

00:15:36,080 --> 00:15:41,120
just whatever defined is to find out

00:15:38,740 --> 00:15:43,460
this is because these are now all

00:15:41,120 --> 00:15:45,680
methods okay they're never going to show

00:15:43,460 --> 00:15:47,540
up well actually they might show up in

00:15:45,680 --> 00:15:49,070
MO but right now they're all the finest

00:15:47,540 --> 00:15:52,820
methods so you call these as methods on

00:15:49,070 --> 00:15:54,620
the objects eventually yeah maybe we'll

00:15:52,820 --> 00:15:56,960
add support for these as a functional

00:15:54,620 --> 00:15:58,580
interface as well but for the time being

00:15:56,960 --> 00:16:00,260
and if they're in a functional interface

00:15:58,580 --> 00:16:03,500
then it's really just going to do what

00:16:00,260 --> 00:16:07,460
this does okay so this just calls the

00:16:03,500 --> 00:16:09,590
function version of say calls the object

00:16:07,460 --> 00:16:15,410
version of say so it just delegates off

00:16:09,590 --> 00:16:17,420
to that so in say is actually defined in

00:16:15,410 --> 00:16:19,430
the any class so again we're borrowing

00:16:17,420 --> 00:16:22,730
from perl 6 i'm actually not sure if

00:16:19,430 --> 00:16:27,200
that's where you guys define it but to

00:16:22,730 --> 00:16:30,290
do there are no UNIX built-ins there are

00:16:27,200 --> 00:16:32,750
no formats there are no networking

00:16:30,290 --> 00:16:34,730
built-ins all that stuff that should be

00:16:32,750 --> 00:16:37,580
in a module just as Jesse Vincent laid

00:16:34,730 --> 00:16:39,350
out and it's 516 talk we should move all

00:16:37,580 --> 00:16:40,790
that stuff into a module it'll be much

00:16:39,350 --> 00:16:42,680
easier to maintain it'll be much easier

00:16:40,790 --> 00:16:45,770
going forward it's one less thing for

00:16:42,680 --> 00:16:47,300
the core to have so I've got no support

00:16:45,770 --> 00:16:49,400
for it right now anybody wants to come

00:16:47,300 --> 00:16:52,580
and add support for it you can have a

00:16:49,400 --> 00:16:54,590
module so all right so that's kind of

00:16:52,580 --> 00:16:56,600
the boring stuff let's jump into some of

00:16:54,590 --> 00:16:58,430
the more interesting stuff so with

00:16:56,600 --> 00:17:02,240
several teens gets up subroutine

00:16:58,430 --> 00:17:04,310
signatures you can see here that array

00:17:02,240 --> 00:17:05,480
and array is the first variable there so

00:17:04,310 --> 00:17:07,610
we're not doing any flattening there's

00:17:05,480 --> 00:17:11,089
no concept of list everything's in a ray

00:17:07,610 --> 00:17:12,449
object or it's not an array object the

00:17:11,089 --> 00:17:13,769
ternary ternary opera

00:17:12,449 --> 00:17:15,600
we've got some method calls going on

00:17:13,769 --> 00:17:19,980
here we got some recursion all this kind

00:17:15,600 --> 00:17:22,350
of stuff like that we support the most

00:17:19,980 --> 00:17:23,970
of the full pearls expectant signatures

00:17:22,350 --> 00:17:27,449
is some stuff that we're not we're not

00:17:23,970 --> 00:17:30,539
doing it we've got positional positional

00:17:27,449 --> 00:17:32,370
with defaults optional which really is

00:17:30,539 --> 00:17:35,760
just a positional with a default that's

00:17:32,370 --> 00:17:37,529
undef we've got slurpee so everything

00:17:35,760 --> 00:17:40,559
after this gets sort of slurped all up

00:17:37,529 --> 00:17:42,330
and put into an array ref or Ray ref I

00:17:40,559 --> 00:17:45,029
kind of stop saying that put into an

00:17:42,330 --> 00:17:46,230
array object that means if you put an

00:17:45,029 --> 00:17:49,049
array object the end there you're going

00:17:46,230 --> 00:17:51,149
to get an array of an array we have

00:17:49,049 --> 00:17:53,610
named parameters which basically means

00:17:51,149 --> 00:17:56,700
I'm expecting a pair object to be put

00:17:53,610 --> 00:18:00,529
there where the key of that pair is the

00:17:56,700 --> 00:18:03,570
name of that variable minus the signal

00:18:00,529 --> 00:18:05,220
and then name slurpee which basically is

00:18:03,570 --> 00:18:06,950
just slopping it all into a hash I'm

00:18:05,220 --> 00:18:11,010
expecting a whole bunch of pair objects

00:18:06,950 --> 00:18:13,169
these are all tested and what we call it

00:18:11,010 --> 00:18:15,029
there they're checked at runtime we

00:18:13,169 --> 00:18:17,010
don't have support yet for compile time

00:18:15,029 --> 00:18:20,809
checking I would like it but we're not

00:18:17,010 --> 00:18:23,220
quite there yet we also support a

00:18:20,809 --> 00:18:26,460
anonymous subroutines and you'll notice

00:18:23,220 --> 00:18:28,679
we've got the the ampersand signal here

00:18:26,460 --> 00:18:31,169
so I know some of you might be having

00:18:28,679 --> 00:18:33,450
pro for flashbacks here but it's

00:18:31,169 --> 00:18:35,130
actually very useful because you don't

00:18:33,450 --> 00:18:37,799
want to you know putting this into a

00:18:35,130 --> 00:18:41,370
scalar would sort of it wouldn't give

00:18:37,799 --> 00:18:44,450
the beauty of signals is that it gives

00:18:41,370 --> 00:18:47,639
you type information it's sort of like a

00:18:44,450 --> 00:18:51,269
Hungarian notation without the using

00:18:47,639 --> 00:18:54,990
words or numbers or letters rather so I

00:18:51,269 --> 00:18:56,429
brought that back also we have the

00:18:54,990 --> 00:18:58,470
routine here so you can see how the

00:18:56,429 --> 00:19:00,870
routine can be used this can potentially

00:18:58,470 --> 00:19:02,760
you know help avoid some garbage

00:19:00,870 --> 00:19:04,529
collection issues and stuff like that if

00:19:02,760 --> 00:19:05,669
you use it in this way of course still

00:19:04,529 --> 00:19:07,019
giving you enough rope to shoot yourself

00:19:05,669 --> 00:19:08,340
in the foot if you wanted to really

00:19:07,019 --> 00:19:13,080
create some garbage collection issues on

00:19:08,340 --> 00:19:15,779
your own one thing that a mature pro 6

00:19:13,080 --> 00:19:17,309
does this or not but this kind of fell

00:19:15,779 --> 00:19:20,490
out of the air when I was fiddling

00:19:17,309 --> 00:19:23,220
around with some stuff if you have a

00:19:20,490 --> 00:19:27,419
bear or have a subroutine

00:19:23,220 --> 00:19:29,460
double and you attempt to address a

00:19:27,419 --> 00:19:31,500
variable which is ampersand double in

00:19:29,460 --> 00:19:33,480
there if it can't find a variable

00:19:31,500 --> 00:19:35,010
ampersand double it just looks to see if

00:19:33,480 --> 00:19:37,110
there's potentially a subroutine within

00:19:35,010 --> 00:19:38,669
the same scope that has an ampersand

00:19:37,110 --> 00:19:40,169
double and if it is then it says oh you

00:19:38,669 --> 00:19:41,309
probably meant to take a reference that

00:19:40,169 --> 00:19:45,150
so you could pass it to something like

00:19:41,309 --> 00:19:47,669
Matt yeah okay yeah i thought it was I

00:19:45,150 --> 00:19:49,710
couldn't find not that way okay okay

00:19:47,669 --> 00:19:51,929
well I I could you have to point out to

00:19:49,710 --> 00:20:01,020
where that is because I couldn't find it

00:19:51,929 --> 00:20:02,309
in this bag okay same thing okay so I'll

00:20:01,020 --> 00:20:03,659
just wave my hands and say it does work

00:20:02,309 --> 00:20:12,360
sort of the same kind and not really

00:20:03,659 --> 00:20:14,610
yeah okay okay okay good good okay we

00:20:12,360 --> 00:20:17,669
also very very rudimentary support for

00:20:14,610 --> 00:20:19,289
traits I pretty much added this only so

00:20:17,669 --> 00:20:20,809
that I could make my own tests more

00:20:19,289 --> 00:20:23,280
which I'll show you a little bit later

00:20:20,809 --> 00:20:25,530
so here we have is export which

00:20:23,280 --> 00:20:27,090
basically obviously means this should

00:20:25,530 --> 00:20:30,870
get exported from the package if it's

00:20:27,090 --> 00:20:34,590
used in another context speaking of

00:20:30,870 --> 00:20:36,210
packages we have packages so I'm always

00:20:34,590 --> 00:20:38,159
supporting the block version of packages

00:20:36,210 --> 00:20:39,990
eventually yes I'd like to support the

00:20:38,159 --> 00:20:42,210
the colon the whole file package thing

00:20:39,990 --> 00:20:47,490
but block is kind of easy at the moment

00:20:42,210 --> 00:20:49,650
we have version numbers and authority

00:20:47,490 --> 00:20:52,559
that are in line with in the name again

00:20:49,650 --> 00:20:54,539
perl 6 we're still in here part of the

00:20:52,559 --> 00:20:55,950
reason for that is because i don't i'm

00:20:54,539 --> 00:20:58,350
not sure i really want to support our

00:20:55,950 --> 00:21:00,270
variables because that always felt

00:20:58,350 --> 00:21:02,250
really dirty to me and I know there's a

00:21:00,270 --> 00:21:03,900
lot of work to try and get out of some

00:21:02,250 --> 00:21:07,740
of the bad habits that we all built upon

00:21:03,900 --> 00:21:09,809
that I'm not like totally against them

00:21:07,740 --> 00:21:14,000
but I I don't want to do that stuff

00:21:09,809 --> 00:21:14,000
myself so if you want to patches welcome

00:21:15,020 --> 00:21:21,000
woody new Alex easy scoped you can

00:21:19,919 --> 00:21:23,880
access the amount side of the package to

00:21:21,000 --> 00:21:28,580
the other our subs yeah but they're not

00:21:23,880 --> 00:21:28,580
our variables so that's good

00:21:28,679 --> 00:21:34,179
so do you concede that in there and

00:21:30,910 --> 00:21:35,679
actually the packages can packages can

00:21:34,179 --> 00:21:36,820
have obviously subroutines in them they

00:21:35,679 --> 00:21:41,140
do have their own electrical environment

00:21:36,820 --> 00:21:44,020
so my my variables work within it they

00:21:41,140 --> 00:21:46,750
do not have like they don't have the our

00:21:44,020 --> 00:21:49,240
stuff they can contain subroutines they

00:21:46,750 --> 00:21:51,840
can also clean sub packages which

00:21:49,240 --> 00:21:56,080
actually this gets turned into this

00:21:51,840 --> 00:21:59,350
internally so that we have that and you

00:21:56,080 --> 00:22:01,780
notice that the the authority in the

00:21:59,350 --> 00:22:03,990
version is just on the end one we don't

00:22:01,780 --> 00:22:08,760
sort of back that up out of their

00:22:03,990 --> 00:22:11,590
packages can also contain classes and

00:22:08,760 --> 00:22:13,210
the packages are no longer classes

00:22:11,590 --> 00:22:16,800
there's no linkage between the two there

00:22:13,210 --> 00:22:16,800
are two separate things again Perl 6

00:22:18,179 --> 00:22:25,030
which brings me to the full object

00:22:21,700 --> 00:22:26,290
system which is this so this right here

00:22:25,030 --> 00:22:27,730
is the whole reason when I started this

00:22:26,290 --> 00:22:29,710
project because I try to do this in Perl

00:22:27,730 --> 00:22:32,440
5 and it didn't work and I ran into a

00:22:29,710 --> 00:22:33,640
lot of a lot of issues so the first

00:22:32,440 --> 00:22:37,240
thing to point about the object system

00:22:33,640 --> 00:22:40,179
fully boot straps class is an instance

00:22:37,240 --> 00:22:43,500
of class class is a subclass of object

00:22:40,179 --> 00:22:45,700
an object itself is an instance of class

00:22:43,500 --> 00:22:47,950
that's what that diagrams are trying to

00:22:45,700 --> 00:22:49,330
represent just know that means it's

00:22:47,950 --> 00:22:50,500
fully bootstrapped which means you'll

00:22:49,330 --> 00:22:52,030
have a full MOPP you'll have everything

00:22:50,500 --> 00:22:56,190
that you have in moose this is the same

00:22:52,030 --> 00:22:59,530
a class model that moose uses as well

00:22:56,190 --> 00:23:02,260
with some finer differences on it also

00:22:59,530 --> 00:23:04,990
means that classes are first class

00:23:02,260 --> 00:23:07,690
objects so again they're not just sort

00:23:04,990 --> 00:23:09,340
of a random string that you could use as

00:23:07,690 --> 00:23:13,120
a class you could use a string do

00:23:09,340 --> 00:23:14,410
whatever you want you can call methods

00:23:13,120 --> 00:23:15,850
on it so we've got a few things like

00:23:14,410 --> 00:23:18,340
name and version that are supported on

00:23:15,850 --> 00:23:21,100
there right now you can also put it into

00:23:18,340 --> 00:23:22,450
a variable and you can call new on that

00:23:21,100 --> 00:23:24,850
you can also return it from a subroutine

00:23:22,450 --> 00:23:27,460
and then you can call new on the return

00:23:24,850 --> 00:23:28,900
value that's over teen okay so classes

00:23:27,460 --> 00:23:31,720
are really first class objects that are

00:23:28,900 --> 00:23:33,820
in there we've also got an object

00:23:31,720 --> 00:23:35,860
hierarchy again a lot of this is from

00:23:33,820 --> 00:23:36,980
perl 6 I did strip out some of the stuff

00:23:35,860 --> 00:23:39,049
that

00:23:36,980 --> 00:23:40,700
is needed and pro 6 to support some of

00:23:39,049 --> 00:23:43,610
the crazier stuff in politics that I

00:23:40,700 --> 00:23:45,200
don't plan to support language wives i'd

00:23:43,610 --> 00:23:46,910
be interested Patrick and Larry if you

00:23:45,200 --> 00:23:49,100
go over this and see if I'm completely

00:23:46,910 --> 00:23:51,980
missing something that I'm going to run

00:23:49,100 --> 00:23:54,260
into later on but about the basics you

00:23:51,980 --> 00:23:56,360
know class is a subclass of object any

00:23:54,260 --> 00:23:57,679
is a root object like I said that's

00:23:56,360 --> 00:24:00,830
where say is defined that's where

00:23:57,679 --> 00:24:03,440
defined is defined we've got an undef

00:24:00,830 --> 00:24:05,120
object which is kind of weird the more

00:24:03,440 --> 00:24:06,980
program in functional languages the more

00:24:05,120 --> 00:24:10,309
I hate the idea of undefined context but

00:24:06,980 --> 00:24:13,040
a scalar which has the boolean the

00:24:10,309 --> 00:24:16,250
string the inth num the exception

00:24:13,040 --> 00:24:20,360
objects as well and regex objects arrays

00:24:16,250 --> 00:24:23,330
hatches pairs iOS and code we don't do

00:24:20,360 --> 00:24:24,919
any type checking right now the way this

00:24:23,330 --> 00:24:27,200
is the way the sort of system works is

00:24:24,919 --> 00:24:30,350
that a type is associated with a

00:24:27,200 --> 00:24:33,770
variable which but that type is defined

00:24:30,350 --> 00:24:36,200
by the signal or the sigil so you can't

00:24:33,770 --> 00:24:38,600
put anything that is not under scholar

00:24:36,200 --> 00:24:40,490
or under the scalar inside somethin with

00:24:38,600 --> 00:24:42,230
a dollar sign sigil and you can't put

00:24:40,490 --> 00:24:43,700
anything other than array into an array

00:24:42,230 --> 00:24:46,370
single and you can't put anything under

00:24:43,700 --> 00:24:48,650
our hash into a hash signal pair I oh

00:24:46,370 --> 00:24:51,799
and code our client will code has a code

00:24:48,650 --> 00:24:53,870
signal paranoia or kind of outliers I

00:24:51,799 --> 00:24:55,010
don't want to keep adding signals so

00:24:53,870 --> 00:24:57,470
they'll probably just fall under scalar

00:24:55,010 --> 00:24:59,660
in some context but that is type checked

00:24:57,470 --> 00:25:04,010
but that object has a pointer to the

00:24:59,660 --> 00:25:05,900
class that that the that it is an

00:25:04,010 --> 00:25:10,520
instance of so eventually we should be

00:25:05,900 --> 00:25:12,350
able to support a my type variable type

00:25:10,520 --> 00:25:15,770
situation later on down the road but

00:25:12,350 --> 00:25:19,610
right now no plans for so classes

00:25:15,770 --> 00:25:21,200
themselves you can see were we've got

00:25:19,610 --> 00:25:23,809
attributes we've got methods methods

00:25:21,200 --> 00:25:26,690
have signatures we're borrowing the

00:25:23,809 --> 00:25:28,460
tribble again from perl 6 currently we

00:25:26,690 --> 00:25:30,860
only support the private ones so the

00:25:28,460 --> 00:25:31,970
dollar sign bang we're actually does

00:25:30,860 --> 00:25:34,250
have to be dollar sign it could be in an

00:25:31,970 --> 00:25:36,350
array or it could be any signal but

00:25:34,250 --> 00:25:38,330
sigil bang eventually we will support

00:25:36,350 --> 00:25:40,100
the automated accessor generation and

00:25:38,330 --> 00:25:41,210
all that kind of stuff and potentially I

00:25:40,100 --> 00:25:43,970
guess we're going to have to add the

00:25:41,210 --> 00:25:45,730
traits to for the is reto and is read

00:25:43,970 --> 00:25:48,970
right in there is

00:25:45,730 --> 00:25:51,940
well I think am I going over yeah I'm

00:25:48,970 --> 00:25:56,260
going over okay I'm going to go quick so

00:25:51,940 --> 00:25:59,200
all right there's inheritance classes

00:25:56,260 --> 00:26:01,660
can also be inside packages they get you

00:25:59,200 --> 00:26:04,450
just give the fully qualified name so

00:26:01,660 --> 00:26:05,830
again like like subroutines we've got

00:26:04,450 --> 00:26:08,380
other stuff we've got very rudimentary

00:26:05,830 --> 00:26:11,650
Reggie regular expression support right

00:26:08,380 --> 00:26:14,010
now it's kind of delegating to the Java

00:26:11,650 --> 00:26:17,110
regex engine which I know is like a sin

00:26:14,010 --> 00:26:19,900
but it was the easiest thing to get in

00:26:17,110 --> 00:26:21,490
there right now until we can get some

00:26:19,900 --> 00:26:23,620
sort of Java perl-compatible regular

00:26:21,490 --> 00:26:25,150
expression engine going on but we you

00:26:23,620 --> 00:26:27,220
can call methods on them we have

00:26:25,150 --> 00:26:30,400
substitution substitutions as a method

00:26:27,220 --> 00:26:34,050
if you're familiar with with JavaScript

00:26:30,400 --> 00:26:38,200
regex stuff this should look similar

00:26:34,050 --> 00:26:40,780
we've also got the auto boxing you can

00:26:38,200 --> 00:26:42,520
call if you have a anonymous subroutine

00:26:40,780 --> 00:26:43,930
or a subroutine reference you can call

00:26:42,520 --> 00:26:46,060
it by doing the dot you can also call it

00:26:43,930 --> 00:26:49,000
by doing call you can also call apply

00:26:46,060 --> 00:26:50,500
and pass in your own argument rang again

00:26:49,000 --> 00:26:53,590
JavaScript if you're familiar with that

00:26:50,500 --> 00:26:55,060
you'll this will look familiar what else

00:26:53,590 --> 00:26:57,160
we got we have multi variable

00:26:55,060 --> 00:26:59,110
assignments we get the range operator

00:26:57,160 --> 00:27:02,080
you no longer have to do this unless you

00:26:59,110 --> 00:27:05,110
really want an array of arrays where you

00:27:02,080 --> 00:27:06,730
only have one or a inside there if you

00:27:05,110 --> 00:27:10,540
do that it blows up because the signals

00:27:06,730 --> 00:27:13,330
are not matching again that's not a it's

00:27:10,540 --> 00:27:15,970
not what we call it it's not compile

00:27:13,330 --> 00:27:17,920
time but we're looking to get there and

00:27:15,970 --> 00:27:19,930
now we'll well I had a live demo here

00:27:17,920 --> 00:27:24,190
plan I'm gonna do it anyway because it's

00:27:19,930 --> 00:27:33,190
only travel waiting for don't forgive me

00:27:24,190 --> 00:27:35,170
oh oh there we go okay so any fast but

00:27:33,190 --> 00:27:38,290
we're getting there okay so one of the

00:27:35,170 --> 00:27:40,030
things that hugs sort of contributed to

00:27:38,290 --> 00:27:42,010
the Perl 6 community was its test suite

00:27:40,030 --> 00:27:44,620
okay the project itself sort of died off

00:27:42,010 --> 00:27:46,540
I think there's one guys still trying to

00:27:44,620 --> 00:27:49,660
keep it alive but it's it's sort of it's

00:27:46,540 --> 00:27:51,610
a part-time thing but the test suite was

00:27:49,660 --> 00:27:54,610
there and the test suite I believe is

00:27:51,610 --> 00:27:56,140
what as you built the the what is it the

00:27:54,610 --> 00:27:59,470
pulse X burn or whatever

00:27:56,140 --> 00:28:01,690
gross gross so you know that's there so

00:27:59,470 --> 00:28:04,090
my hope is that even if this project

00:28:01,690 --> 00:28:06,400
dies and it never sees the light of day

00:28:04,090 --> 00:28:08,380
this test suite will hopefully be useful

00:28:06,400 --> 00:28:09,910
for somebody somewhere potentially from

00:28:08,380 --> 00:28:12,880
moving profile for another way Rennie

00:28:09,910 --> 00:28:19,540
it's all yours if I die I'm tweaking it

00:28:12,880 --> 00:28:21,130
to you but so you know and this is sort

00:28:19,540 --> 00:28:22,630
of the fun part right now for me because

00:28:21,130 --> 00:28:25,030
I actually get to program in the local

00:28:22,630 --> 00:28:28,810
crap hold on I get the program in the

00:28:25,030 --> 00:28:31,530
language that I want to program in which

00:28:28,810 --> 00:28:35,740
speaking of which a few quick examples

00:28:31,530 --> 00:28:38,730
test more so you can see we've got well

00:28:35,740 --> 00:28:41,680
actually so here all the way down here

00:28:38,730 --> 00:28:43,780
there's our package more we're exporting

00:28:41,680 --> 00:28:46,270
all the normal tests more things out of

00:28:43,780 --> 00:28:48,910
there you can see it delegates to a test

00:28:46,270 --> 00:28:51,490
builder object that test builder object

00:28:48,910 --> 00:28:54,550
starts right here it's a nice class it's

00:28:51,490 --> 00:28:57,220
got a test tap output there which is all

00:28:54,550 --> 00:28:58,420
defined up there this is all up on

00:28:57,220 --> 00:28:59,890
github too so if you want to take a

00:28:58,420 --> 00:29:02,470
closer look at it because I'm skimming

00:28:59,890 --> 00:29:03,940
pretty fast here but all this this is

00:29:02,470 --> 00:29:06,250
this is what's running that test suite

00:29:03,940 --> 00:29:09,340
in that other window right now we have

00:29:06,250 --> 00:29:11,350
sub methods which are pearl 6 thing

00:29:09,340 --> 00:29:12,940
again they're essentially private

00:29:11,350 --> 00:29:14,530
methods they're not in the dispatch in

00:29:12,940 --> 00:29:18,160
the general dispatch chain only in the

00:29:14,530 --> 00:29:23,020
local dispatch etc etc etc we go at all

00:29:18,160 --> 00:29:24,370
that then where's my cursor strings

00:29:23,020 --> 00:29:26,170
here's what some of the tests look like

00:29:24,370 --> 00:29:28,300
ok so we've got a string literal and

00:29:26,170 --> 00:29:31,990
we're calling is on it ask if it's a

00:29:28,300 --> 00:29:36,910
string you can create a string new if

00:29:31,990 --> 00:29:39,640
you want you see first so again we're

00:29:36,910 --> 00:29:42,790
seeing all this stuff is all methods on

00:29:39,640 --> 00:29:46,570
objects going on going on going on going

00:29:42,790 --> 00:29:51,880
on right eccentric cetera where's

00:29:46,570 --> 00:29:55,350
where's my cursor again a raise same

00:29:51,880 --> 00:29:58,690
thing we do have the array access syntax

00:29:55,350 --> 00:30:00,130
we don't change the signal here again

00:29:58,690 --> 00:30:01,840
like pro 6 because I don't know about

00:30:00,130 --> 00:30:03,880
you guys I've always thought that was

00:30:01,840 --> 00:30:05,410
very confusing if you don't think it's

00:30:03,880 --> 00:30:06,550
confusing you can go commiserate with

00:30:05,410 --> 00:30:10,930
John Anderson over there

00:30:06,550 --> 00:30:16,300
he and I disagree on this one this one

00:30:10,930 --> 00:30:19,690
gets long and then the well you already

00:30:16,300 --> 00:30:21,190
saw that so let's get this so these are

00:30:19,690 --> 00:30:24,820
two of the to the moose examples that I

00:30:21,190 --> 00:30:28,210
really liked so that I had in there one

00:30:24,820 --> 00:30:31,630
nice thing here is that attributes are

00:30:28,210 --> 00:30:33,340
accessible in your subclasses not

00:30:31,630 --> 00:30:34,510
entirely sure whether this is kosher but

00:30:33,340 --> 00:30:36,120
I kind of liked it was a little bit

00:30:34,510 --> 00:30:43,660
easier than having the right accessories

00:30:36,120 --> 00:30:47,470
and that's about it so but hold on so

00:30:43,660 --> 00:30:48,610
live demo of doom so what's next and

00:30:47,470 --> 00:30:51,010
then I'll wrap it up and let's try to

00:30:48,610 --> 00:30:53,010
have this the next step I want to do is

00:30:51,010 --> 00:30:56,110
really expose the mop in the runtime

00:30:53,010 --> 00:30:59,260
more tests test test test contributions

00:30:56,110 --> 00:31:01,540
welcome implement roles we have a single

00:30:59,260 --> 00:31:05,140
inheritance object model so rolls really

00:31:01,540 --> 00:31:06,700
need to be there get that try catch in

00:31:05,140 --> 00:31:08,890
the match case or given one or whatever

00:31:06,700 --> 00:31:10,570
one on there and then later on I

00:31:08,890 --> 00:31:12,400
actually want to start wrapping the

00:31:10,570 --> 00:31:13,750
Scala actors I don't know if any of you

00:31:12,400 --> 00:31:16,210
are familiar with that if you're not I

00:31:13,750 --> 00:31:19,420
recommend you go read up on them they're

00:31:16,210 --> 00:31:20,860
really really cool and I want to wrap

00:31:19,420 --> 00:31:22,690
javathread just because I probably

00:31:20,860 --> 00:31:25,150
should but I'd rather just stick with

00:31:22,690 --> 00:31:26,350
actors but anyway that's it questions

00:31:25,150 --> 00:31:27,760
and i'll probably have to take them out

00:31:26,350 --> 00:31:32,970
in the home because i think it's trout

00:31:27,760 --> 00:31:32,970
stern like two minutes so he gets here

00:31:37,230 --> 00:31:39,290

YouTube URL: https://www.youtube.com/watch?v=279c5sHJpCQ


