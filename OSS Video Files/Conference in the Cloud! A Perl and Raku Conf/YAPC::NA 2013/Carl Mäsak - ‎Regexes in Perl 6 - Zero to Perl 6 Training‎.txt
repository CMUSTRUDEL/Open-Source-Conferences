Title: Carl Mäsak - ‎Regexes in Perl 6 - Zero to Perl 6 Training‎
Publication date: 2013-08-20
Playlist: YAPC::NA 2013
Description: 
	Everybody stand back. I know regular expressions.

*swoop* *PERL!*

\o/ \o/

So, here's the thing.

I've given entire talks whose point was "hey, don't do it the quick-and-dirty way with regexes -- do it the nice-and-readable way". So the irony-meter really went all jittery when, a month back, I found myself writing a syntax highlighter the Quick-And-Dirty way. Again.

I've done it both ways, folks. I've looked into the abyss, and it's looked back at me. And I've been shone upon by the beacon of structure, and seen what good it does. At the end of the work day, which method would I rather write? I don't know.

But I sure as heck know which one I'd rather maintain.
Captions: 
	00:00:00,000 --> 00:00:06,569
hello everyone I'm masuk this is talk

00:00:04,110 --> 00:00:12,120
about Greg axes and grammars and which

00:00:06,569 --> 00:00:15,059
one is which and why and how everything

00:00:12,120 --> 00:00:17,730
is a string and can be manipulated with

00:00:15,059 --> 00:00:21,769
the reg ex this is sort of the starting

00:00:17,730 --> 00:00:24,090
point of a pearl I feel there's a

00:00:21,769 --> 00:00:26,150
resource out there talking about the

00:00:24,090 --> 00:00:28,949
different levels of pearl mastery and

00:00:26,150 --> 00:00:30,630
sort of level 4 out of 7 is this

00:00:28,949 --> 00:00:34,170
everything is a string and can be

00:00:30,630 --> 00:00:36,300
manipulated with the reg ex everything

00:00:34,170 --> 00:00:39,360
is a string can be manipulated with the

00:00:36,300 --> 00:00:43,789
regs it's it's a nice starting point and

00:00:39,360 --> 00:00:48,750
I learned to live by that idea and

00:00:43,789 --> 00:00:50,550
unused pearl mainly / 5 in that way it's

00:00:48,750 --> 00:00:53,460
nice to have an overriding idea like

00:00:50,550 --> 00:00:56,129
this that like that for example this

00:00:53,460 --> 00:00:57,750
pass everything is a list and you sort

00:00:56,129 --> 00:01:00,000
of run with that idea and do various

00:00:57,750 --> 00:01:01,649
things with it we have small talk where

00:01:00,000 --> 00:01:03,949
everything is an object even things

00:01:01,649 --> 00:01:06,630
there are not objects or objects and

00:01:03,949 --> 00:01:11,820
then we have PHP where everything is a

00:01:06,630 --> 00:01:13,409
security exploit it's nice to have such

00:01:11,820 --> 00:01:15,659
an overriding abstraction in your

00:01:13,409 --> 00:01:17,759
language and actually I think tickle

00:01:15,659 --> 00:01:19,530
probably wins on everything is a string

00:01:17,759 --> 00:01:23,420
they do that even more extremely than

00:01:19,530 --> 00:01:25,320
Pearl does pearl is a little bit too

00:01:23,420 --> 00:01:28,860
multicultural to go all the way with

00:01:25,320 --> 00:01:30,780
everything as a string but you can you

00:01:28,860 --> 00:01:33,000
can still treat it like that and many

00:01:30,780 --> 00:01:36,450
programs come down to okay we have some

00:01:33,000 --> 00:01:39,420
input that comes in its its textual data

00:01:36,450 --> 00:01:41,250
we do funny manipulations with it and we

00:01:39,420 --> 00:01:44,340
have some output that goes out and it's

00:01:41,250 --> 00:01:47,130
also textual data even the name pearl if

00:01:44,340 --> 00:01:49,590
you think about it practical extracting

00:01:47,130 --> 00:01:51,240
and reporting language those extracting

00:01:49,590 --> 00:01:53,130
and reporting also are the ends of

00:01:51,240 --> 00:01:56,909
endpoints of your process what you're

00:01:53,130 --> 00:02:00,869
doing at the endpoints of your program

00:01:56,909 --> 00:02:05,130
and pro/5 is more everything is a string

00:02:00,869 --> 00:02:06,920
to be processed sort of the extractive

00:02:05,130 --> 00:02:09,239
thing and the new process things and

00:02:06,920 --> 00:02:11,760
with politics I have a slightly

00:02:09,239 --> 00:02:14,970
different feel for what you do and

00:02:11,760 --> 00:02:16,650
go very much into detail in there where

00:02:14,970 --> 00:02:18,599
everything is a string to be handled by

00:02:16,650 --> 00:02:23,340
rags but sometimes it's easier than that

00:02:18,599 --> 00:02:27,659
sometimes it's just substring or unpack

00:02:23,340 --> 00:02:30,060
or whatever so my face is today this

00:02:27,659 --> 00:02:32,670
view of pearl this view of programming

00:02:30,060 --> 00:02:36,000
in general is very good and it's very

00:02:32,670 --> 00:02:37,980
bad and it's always difficult to have a

00:02:36,000 --> 00:02:41,280
double message to the audience but this

00:02:37,980 --> 00:02:43,620
is the easiest I can get it and you'll

00:02:41,280 --> 00:02:45,780
see it's very good from people who who

00:02:43,620 --> 00:02:49,379
don't have this view who actually go and

00:02:45,780 --> 00:02:52,730
implement that 200 line C++ or Java

00:02:49,379 --> 00:02:55,530
program to extract names from a phone

00:02:52,730 --> 00:02:57,959
phone book or something like that where

00:02:55,530 --> 00:02:59,970
you simply all you're missing is the

00:02:57,959 --> 00:03:03,120
idea of reg access so you can do it in

00:02:59,970 --> 00:03:05,489
five lines instead of 200 and it's bad

00:03:03,120 --> 00:03:07,650
because of some things that people do

00:03:05,489 --> 00:03:10,470
when they love reggae X's and they just

00:03:07,650 --> 00:03:12,690
go too far with them including me and

00:03:10,470 --> 00:03:19,709
we'll see examples of sins that I've

00:03:12,690 --> 00:03:21,780
committed in this area so a quick or as

00:03:19,709 --> 00:03:26,790
quick as you wanted politics rec center

00:03:21,780 --> 00:03:28,889
by the way I should say I see different

00:03:26,790 --> 00:03:30,780
kinds of people in this room I see this

00:03:28,889 --> 00:03:37,889
contingency here which is basically

00:03:30,780 --> 00:03:39,810
people who are only here to troll me and

00:03:37,889 --> 00:03:42,079
then I see lots of other people who I

00:03:39,810 --> 00:03:46,169
suppose are interested in reg X's and

00:03:42,079 --> 00:03:49,379
grammars and maybe even projects and let

00:03:46,169 --> 00:03:52,709
me just run through a quick syntactical

00:03:49,379 --> 00:03:55,560
introduction to what's changed over from

00:03:52,709 --> 00:03:57,569
pro 5 to pull 6 and there's a lot more

00:03:55,560 --> 00:03:59,459
going on beyond being beneath the

00:03:57,569 --> 00:04:01,109
surface with semantics and so on but

00:03:59,459 --> 00:04:06,209
it's good to start with the syntax and

00:04:01,109 --> 00:04:08,519
to talk about that there you go this is

00:04:06,209 --> 00:04:12,329
a nice place to relax and think about

00:04:08,519 --> 00:04:16,229
something else so a lot of things are

00:04:12,329 --> 00:04:18,209
the same between / 5 and pulse six we're

00:04:16,229 --> 00:04:21,060
not just changing things around because

00:04:18,209 --> 00:04:22,680
of the fun of it we're changing things

00:04:21,060 --> 00:04:23,490
around which need to be changed so up

00:04:22,680 --> 00:04:25,949
here in this code

00:04:23,490 --> 00:04:29,039
or are things which remain the same you

00:04:25,949 --> 00:04:31,380
see they're the same on both places and

00:04:29,039 --> 00:04:35,400
sides of the arrows now there will be

00:04:31,380 --> 00:04:39,000
some subtle semantic differences

00:04:35,400 --> 00:04:41,220
somewhere and the hecklers are free to

00:04:39,000 --> 00:04:43,830
point that out for for example here I

00:04:41,220 --> 00:04:46,770
wrote Unicode because we're now matching

00:04:43,830 --> 00:04:52,110
on Unicode letters and digits and white

00:04:46,770 --> 00:04:54,870
space by default that's true by default

00:04:52,110 --> 00:04:58,409
profile too okay I thought it depended

00:04:54,870 --> 00:04:59,909
on locale and things like that okay so

00:04:58,409 --> 00:05:05,220
you managed to convince them I know you

00:04:59,909 --> 00:05:08,789
had discussions about that okay

00:05:05,220 --> 00:05:12,090
excellent right so the Unicode actually

00:05:08,789 --> 00:05:15,630
goes on both sides it right there you go

00:05:12,090 --> 00:05:18,120
I everyone in this room has heard about

00:05:15,630 --> 00:05:20,580
the the two rules a rule number one is

00:05:18,120 --> 00:05:22,919
Larry is always right and rule number

00:05:20,580 --> 00:05:30,509
two is when when Larry changes his mind

00:05:22,919 --> 00:05:33,060
is still always right right right there

00:05:30,509 --> 00:05:36,150
you go we're rest cunning as much as we

00:05:33,060 --> 00:05:38,009
can and you see alternations they're the

00:05:36,150 --> 00:05:42,419
same syntax like two different semantics

00:05:38,009 --> 00:05:45,570
and wave and if we want to escape things

00:05:42,419 --> 00:05:49,349
we can still use the backslash character

00:05:45,570 --> 00:05:51,570
here there are things which changed for

00:05:49,349 --> 00:05:53,580
example when you talk about captures

00:05:51,570 --> 00:05:55,800
that you did so you captured something

00:05:53,580 --> 00:05:58,139
in parentheses and now you want to use

00:05:55,800 --> 00:06:00,300
it and they're in these special

00:05:58,139 --> 00:06:01,860
registers or variables they used to be

00:06:00,300 --> 00:06:04,620
in dollar one dollar to dollar three

00:06:01,860 --> 00:06:07,080
that turned out not to work that well in

00:06:04,620 --> 00:06:08,310
Perl 6 because we're actually treating

00:06:07,080 --> 00:06:11,490
this as the list of things we're

00:06:08,310 --> 00:06:15,060
indexing and lists tend to be indexed

00:06:11,490 --> 00:06:17,370
from zero so we had to rename the first

00:06:15,060 --> 00:06:21,810
one here to dollar zero and just shift

00:06:17,370 --> 00:06:25,009
everything down 11 step so what used to

00:06:21,810 --> 00:06:28,380
be in dollar zero in / 5 anyone know

00:06:25,009 --> 00:06:31,979
yeah program name it's now in a variable

00:06:28,380 --> 00:06:34,650
called program name which makes a bit

00:06:31,979 --> 00:06:35,470
more sense i think there's also the

00:06:34,650 --> 00:06:38,260
backslash back

00:06:35,470 --> 00:06:40,270
ables here they're used inside of the

00:06:38,260 --> 00:06:43,030
reg ex in South itself before you sort

00:06:40,270 --> 00:06:45,580
of left the reg ex this was so difficult

00:06:43,030 --> 00:06:47,800
to keep track of when would you use the

00:06:45,580 --> 00:06:49,870
dollar sign and when would you use the

00:06:47,800 --> 00:06:51,460
Baxter and it didn't really matter so we

00:06:49,870 --> 00:06:54,940
just got rid of the backslash for that

00:06:51,460 --> 00:06:58,060
use and now instead you use the same

00:06:54,940 --> 00:07:02,170
variables that instead and there's a lot

00:06:58,060 --> 00:07:03,940
of it hysterical raisins behind syntax

00:07:02,170 --> 00:07:07,330
like this and we're leaving much of that

00:07:03,940 --> 00:07:10,120
old syntax behind because we can for

00:07:07,330 --> 00:07:12,340
grouping things so you want to pull

00:07:10,120 --> 00:07:15,490
several different things together and

00:07:12,340 --> 00:07:16,900
treat them as an atom as it were if you

00:07:15,490 --> 00:07:18,280
just have a single character you don't

00:07:16,900 --> 00:07:20,230
need to group it but if you have several

00:07:18,280 --> 00:07:23,860
characters like foo here you have to

00:07:20,230 --> 00:07:26,110
group it in some way in order for the

00:07:23,860 --> 00:07:27,850
Rays to treat it as one unit you can

00:07:26,110 --> 00:07:30,070
either quote it at least in this case

00:07:27,850 --> 00:07:32,169
when it's just a string or you can put

00:07:30,070 --> 00:07:33,850
these square brackets around it now

00:07:32,169 --> 00:07:35,800
square brackets used to be character

00:07:33,850 --> 00:07:37,930
groups and we now have slightly longer

00:07:35,800 --> 00:07:42,940
syntax not shown on this slide for some

00:07:37,930 --> 00:07:46,060
reason for character groups that's all

00:07:42,940 --> 00:07:49,120
so you use quoting either when you want

00:07:46,060 --> 00:07:50,470
to escape things or or when you quote

00:07:49,120 --> 00:07:52,090
things like this so there are several

00:07:50,470 --> 00:07:54,580
different ways to go about it you can

00:07:52,090 --> 00:07:56,560
still use the old escaping mechanism

00:07:54,580 --> 00:08:00,669
like this or you can use literal strings

00:07:56,560 --> 00:08:04,510
in your records it's quite nice and all

00:08:00,669 --> 00:08:07,000
these quantifiers basically things that

00:08:04,510 --> 00:08:10,300
we associate very heavily with regexes

00:08:07,000 --> 00:08:13,390
they stay the same with 0 1 there are

00:08:10,300 --> 00:08:20,550
more one or more just the same and these

00:08:13,390 --> 00:08:23,350
slightly less known forms with frugal

00:08:20,550 --> 00:08:24,970
frugal quantifiers which take as little

00:08:23,350 --> 00:08:27,729
as possible there they're not greedy

00:08:24,970 --> 00:08:30,460
like their cousins they also stay the

00:08:27,729 --> 00:08:32,680
same but there's one quantifier that

00:08:30,460 --> 00:08:35,229
changes and this is sort of the the

00:08:32,680 --> 00:08:38,890
fourth quantifier you want to match end

00:08:35,229 --> 00:08:42,610
times like seven times or two three four

00:08:38,890 --> 00:08:44,470
times or five times or up now we had a

00:08:42,610 --> 00:08:47,390
better use as you will see for the

00:08:44,470 --> 00:08:50,030
braces here so we just turned

00:08:47,390 --> 00:08:52,340
into star star it's a bit like

00:08:50,030 --> 00:08:56,260
exponentiation outside in the real

00:08:52,340 --> 00:08:59,810
politics in the big projects language

00:08:56,260 --> 00:09:04,460
that's kind of nice and in any place

00:08:59,810 --> 00:09:06,350
where profile would use ranges and write

00:09:04,460 --> 00:09:08,060
them with the comma like we do here and

00:09:06,350 --> 00:09:11,000
here's even sort of half of Raintree

00:09:08,060 --> 00:09:14,030
don't even have anything on this side we

00:09:11,000 --> 00:09:18,620
write it with a real range and that same

00:09:14,030 --> 00:09:21,280
goes for character Rangers as well so no

00:09:18,620 --> 00:09:23,690
no dashes no commas we just write it

00:09:21,280 --> 00:09:25,960
consistently across the whole language

00:09:23,690 --> 00:09:30,170
there's also one thing that doesn't have

00:09:25,960 --> 00:09:33,140
an equivalent in impel five at all

00:09:30,170 --> 00:09:34,610
there's this quantifier modifier here so

00:09:33,140 --> 00:09:37,550
we're saying yes we want to match

00:09:34,610 --> 00:09:40,430
several a's one or more a's but we want

00:09:37,550 --> 00:09:42,890
them to be comma separated so we're

00:09:40,430 --> 00:09:46,430
saying basically yeah several of these

00:09:42,890 --> 00:09:49,100
but with these in between so the percent

00:09:46,430 --> 00:09:51,710
here is to be read as how do we actually

00:09:49,100 --> 00:09:59,240
do the quantification well we allow

00:09:51,710 --> 00:10:01,520
things to to be in between right true

00:09:59,240 --> 00:10:03,470
yeah so several a's modular the the

00:10:01,520 --> 00:10:05,600
stuff in between the commas in between I

00:10:03,470 --> 00:10:10,000
think I will actually demo this because

00:10:05,600 --> 00:10:13,870
I heard some loops in the audience so

00:10:10,000 --> 00:10:23,780
this is going to be quite a live demo

00:10:13,870 --> 00:10:26,270
everything and we have oh okay I heard a

00:10:23,780 --> 00:10:28,730
whoop on on percent as well so we have

00:10:26,270 --> 00:10:30,920
this string here and i can type up or

00:10:28,730 --> 00:10:32,660
down which will be interesting and I

00:10:30,920 --> 00:10:38,480
don't have still don't have I'll rap

00:10:32,660 --> 00:10:40,760
career and we make one of these matches

00:10:38,480 --> 00:10:42,890
if we just match on several word

00:10:40,760 --> 00:10:47,300
characters what will we get well we will

00:10:42,890 --> 00:10:52,430
get a match which is like this and we

00:10:47,300 --> 00:10:55,370
can group that one like that and say

00:10:52,430 --> 00:10:57,020
yeah we expect one or more of those but

00:10:55,370 --> 00:11:00,360
with commas in between and here's where

00:10:57,020 --> 00:11:04,100
I put the comma in in quotes

00:11:00,360 --> 00:11:07,260
and it will match that whole thing and

00:11:04,100 --> 00:11:09,029
even if I want to capture that so the

00:11:07,260 --> 00:11:11,850
brackets are non capturing and

00:11:09,029 --> 00:11:15,589
parentheses are capturing I can get this

00:11:11,850 --> 00:11:19,440
out as a capture group as well just say

00:11:15,589 --> 00:11:22,850
yeah the words that were interested in

00:11:19,440 --> 00:11:27,149
here just capture those like that and

00:11:22,850 --> 00:11:29,430
each one will end up in in dollar zero

00:11:27,149 --> 00:11:35,370
here it will actually be a list of all

00:11:29,430 --> 00:11:37,110
the captures that it found now that's

00:11:35,370 --> 00:11:39,240
one of the things I'm not mentioning on

00:11:37,110 --> 00:11:42,110
this slide just showing the syntactic

00:11:39,240 --> 00:11:46,200
transitions when you've made a match in

00:11:42,110 --> 00:11:48,209
income 5 what you get back in all these

00:11:46,200 --> 00:11:50,630
dollar one dollar to dollar three

00:11:48,209 --> 00:11:52,920
they're just strings but just the

00:11:50,630 --> 00:11:55,290
substrings of what you were matching

00:11:52,920 --> 00:11:57,209
impulse six you get back real objects

00:11:55,290 --> 00:12:00,570
are called match objects and they can be

00:11:57,209 --> 00:12:02,490
strings if you want to but they really

00:12:00,570 --> 00:12:04,320
contain the whole structure of the match

00:12:02,490 --> 00:12:06,120
that you match and that will turn out to

00:12:04,320 --> 00:12:09,300
be really important when we go on to

00:12:06,120 --> 00:12:11,970
grammas what else do we have we still

00:12:09,300 --> 00:12:13,589
have case insensitive we have a global

00:12:11,970 --> 00:12:15,899
matching there are exactly the same but

00:12:13,589 --> 00:12:19,680
you will notice that the modifiers now

00:12:15,899 --> 00:12:22,949
go up front this is a general decision

00:12:19,680 --> 00:12:25,680
because impulses way we tend to put

00:12:22,949 --> 00:12:29,070
things such information early one of the

00:12:25,680 --> 00:12:31,800
problems with policy po5 regexes is that

00:12:29,070 --> 00:12:33,209
you don't know exactly how the parts

00:12:31,800 --> 00:12:34,890
that doesn't know exactly how to parse

00:12:33,209 --> 00:12:38,820
the reg ex before it reaches the end and

00:12:34,890 --> 00:12:40,380
sees all the modifiers and in politics

00:12:38,820 --> 00:12:43,589
we prefer to know which language we're

00:12:40,380 --> 00:12:45,720
in which language parsing those of you

00:12:43,589 --> 00:12:50,430
have dug into reg ex is know that if you

00:12:45,720 --> 00:12:53,790
want to include literal string in array

00:12:50,430 --> 00:12:57,000
X you have to do this playing around

00:12:53,790 --> 00:13:00,000
with backslash capital Q and backslash

00:12:57,000 --> 00:13:02,790
capital e to say this is a literal thing

00:13:00,000 --> 00:13:05,670
this is not a reg ex otherwise you will

00:13:02,790 --> 00:13:08,790
be susceptible susceptible to injection

00:13:05,670 --> 00:13:11,040
attacks and so on people will abuse your

00:13:08,790 --> 00:13:13,259
reg X's and that doesn't happen in

00:13:11,040 --> 00:13:15,500
projects we just use the variable

00:13:13,259 --> 00:13:18,630
directly and it will always be safe

00:13:15,500 --> 00:13:20,670
which is nice now the question is then

00:13:18,630 --> 00:13:22,980
how do you get this unsafe behavior if

00:13:20,670 --> 00:13:26,100
you actually want to include a reg ex in

00:13:22,980 --> 00:13:28,649
another reg ex that's all so easy impel

00:13:26,100 --> 00:13:30,720
5 it's too easy but here we surrounded

00:13:28,649 --> 00:13:38,990
in angle brackets and then we say yeah

00:13:30,720 --> 00:13:38,990
use this as a sub recs actually right

00:13:39,019 --> 00:13:45,420
right so let's say in this case this is

00:13:42,449 --> 00:13:49,649
a small reg ex here I could call it word

00:13:45,420 --> 00:13:53,339
or something my word and and just

00:13:49,649 --> 00:13:55,800
include it that and I've saved it away

00:13:53,339 --> 00:13:59,069
sort of if we look at this object we see

00:13:55,800 --> 00:14:01,139
that it is a preggy subject so that

00:13:59,069 --> 00:14:02,880
little hat bear is saying this is not a

00:14:01,139 --> 00:14:05,399
real method on the object it's a method

00:14:02,880 --> 00:14:07,680
on the metaclass that cares about the

00:14:05,399 --> 00:14:12,420
object and now if I want to redo this

00:14:07,680 --> 00:14:14,160
and just include word here instead I put

00:14:12,420 --> 00:14:22,589
it in angle brackets and I do the rest

00:14:14,160 --> 00:14:24,569
the same like that and it still works so

00:14:22,589 --> 00:14:27,959
that's very powerful we can still build

00:14:24,569 --> 00:14:29,910
up bigger red Xs from smaller ones if we

00:14:27,959 --> 00:14:33,540
want an assertion in the middle of the

00:14:29,910 --> 00:14:37,980
rigor so basically drop back into power

00:14:33,540 --> 00:14:41,130
5 code we do this in Perl 5 and it's

00:14:37,980 --> 00:14:44,130
become much much easier in Perl 6 here

00:14:41,130 --> 00:14:45,930
you see what we did with these curly

00:14:44,130 --> 00:14:49,649
braces that we freed up from this part

00:14:45,930 --> 00:14:51,089
so now we can just hear some programming

00:14:49,649 --> 00:14:52,949
language that we want to run in the

00:14:51,089 --> 00:14:55,079
middle of the records sometimes we're

00:14:52,949 --> 00:14:57,329
interested in the result as well you

00:14:55,079 --> 00:14:59,579
want to say only continue matching with

00:14:57,329 --> 00:15:02,069
the reg ex if the code that we ran here

00:14:59,579 --> 00:15:04,620
is true then we use this angle brackets

00:15:02,069 --> 00:15:06,660
but a question mark or sometimes we want

00:15:04,620 --> 00:15:09,829
to say only continue if it's false then

00:15:06,660 --> 00:15:17,209
we use the angle brackets with the ! in

00:15:09,829 --> 00:15:19,980
so that's kind of nice and the e

00:15:17,209 --> 00:15:23,790
modifier is completely gone we no longer

00:15:19,980 --> 00:15:27,450
treat this site specially and evaluated

00:15:23,790 --> 00:15:29,370
and we no longer do this horrible golfy

00:15:27,450 --> 00:15:31,530
hockey thing with double e's and triple

00:15:29,370 --> 00:15:33,480
e's and so on instead if you want code

00:15:31,530 --> 00:15:36,840
in there you just do this trick up here

00:15:33,480 --> 00:15:39,630
so you just include code there and it

00:15:36,840 --> 00:15:44,070
will be returned as part of the reg ex

00:15:39,630 --> 00:15:47,900
and what else we no longer have this s

00:15:44,070 --> 00:15:52,380
modifier which modified the behavior of

00:15:47,900 --> 00:15:54,870
the dot saying the dot no longer matches

00:15:52,380 --> 00:15:57,780
everything except for the new line code

00:15:54,870 --> 00:16:00,270
point it now what matches everything so

00:15:57,780 --> 00:16:02,760
the S is simply implicit in everything

00:16:00,270 --> 00:16:05,430
same with the M modifier here the M was

00:16:02,760 --> 00:16:10,290
used to modify these start and end

00:16:05,430 --> 00:16:12,660
anchors to to be about lines and that's

00:16:10,290 --> 00:16:14,310
also implicit now you just use special

00:16:12,660 --> 00:16:15,780
start and end anchors for lines instead

00:16:14,310 --> 00:16:25,890
they're doubled because there's likely

00:16:15,780 --> 00:16:30,030
less common so yeah right right exactly

00:16:25,890 --> 00:16:31,590
and then you have these two and they're

00:16:30,030 --> 00:16:33,930
completely new as well there's no

00:16:31,590 --> 00:16:36,570
corresponding thing in five you can

00:16:33,930 --> 00:16:39,600
definitely do the corresponding things

00:16:36,570 --> 00:16:43,170
but not with syntax is easy so I found

00:16:39,600 --> 00:16:45,150
the typo but only the second the second

00:16:43,170 --> 00:16:46,410
one is actually a type as I I only want

00:16:45,150 --> 00:16:49,080
to fix the second one so i have a

00:16:46,410 --> 00:16:51,770
modifier here saying second now how does

00:16:49,080 --> 00:16:54,840
that work well it turns out there's an

00:16:51,770 --> 00:16:58,650
ND adverb and it takes a number and i

00:16:54,840 --> 00:17:03,600
can pass into so second if we clear the

00:16:58,650 --> 00:17:06,960
screen here second like this is actually

00:17:03,600 --> 00:17:11,700
syntactic sugar for ND to like this and

00:17:06,960 --> 00:17:14,310
there's also first and there's third and

00:17:11,700 --> 00:17:15,550
that's it that's the whole set so these

00:17:14,310 --> 00:17:20,800
and

00:17:15,550 --> 00:17:22,600
yes you can talk like that yeah yes you

00:17:20,800 --> 00:17:28,120
can but don't do that its freedom under

00:17:22,600 --> 00:17:30,670
responsibility of course and we can also

00:17:28,120 --> 00:17:32,800
substitute a number of times if we want

00:17:30,670 --> 00:17:34,660
to this one runs through things four

00:17:32,800 --> 00:17:37,660
times and then it stopped so it's like a

00:17:34,660 --> 00:17:39,730
subset of the functionality of global

00:17:37,660 --> 00:17:45,310
matching this one knows exactly how many

00:17:39,730 --> 00:17:47,950
times to match okay great any questions

00:17:45,310 --> 00:17:55,870
so far I plan to show much more of

00:17:47,950 --> 00:17:58,240
politics reg uses as we go along so my

00:17:55,870 --> 00:18:00,430
feet is again Riggs is work they're

00:17:58,240 --> 00:18:02,680
wonderful they're even wonderful in

00:18:00,430 --> 00:18:06,490
profile despite the slightly quirky

00:18:02,680 --> 00:18:08,830
syntax they're awesome they let you do

00:18:06,490 --> 00:18:10,530
your work and sort of getting solve the

00:18:08,830 --> 00:18:13,630
problem when you get out again and

00:18:10,530 --> 00:18:17,230
that's all we want but they're not nice

00:18:13,630 --> 00:18:21,370
that the syntax is is heavily burdened

00:18:17,230 --> 00:18:24,880
by history and it's like you can overuse

00:18:21,370 --> 00:18:27,280
them and people tend to overuse them I

00:18:24,880 --> 00:18:31,210
often over use them and that's why I'm

00:18:27,280 --> 00:18:33,190
standing here today so do reg ex is by

00:18:31,210 --> 00:18:38,460
all means but switch over to something

00:18:33,190 --> 00:18:41,400
better manners when it's time so here I

00:18:38,460 --> 00:18:45,840
go out on a limb and show you some

00:18:41,400 --> 00:18:49,300
production code that I wrote for work

00:18:45,840 --> 00:18:51,940
and I will show you the contents of

00:18:49,300 --> 00:18:53,680
these this for loop I didn't put it all

00:18:51,940 --> 00:18:59,800
on a single slide because it doesn't go

00:18:53,680 --> 00:19:02,230
on a single slide and no no no no this

00:18:59,800 --> 00:19:05,200
is a small example this is just just

00:19:02,230 --> 00:19:09,280
enough to disgust you and that's the

00:19:05,200 --> 00:19:11,560
idea so maybe you've seen this trick

00:19:09,280 --> 00:19:13,780
here we take a text and we just make it

00:19:11,560 --> 00:19:16,420
the dollar underscore so this is like a

00:19:13,780 --> 00:19:18,520
poor man's given really it works even in

00:19:16,420 --> 00:19:21,730
older versions of pearl it loops over a

00:19:18,520 --> 00:19:24,100
single thing and inside of this loop the

00:19:21,730 --> 00:19:27,940
single thing that we're interested in

00:19:24,100 --> 00:19:32,740
is called dollar underscore so here's my

00:19:27,940 --> 00:19:35,440
code this by the way is a c-sharp syntax

00:19:32,740 --> 00:19:37,900
color highlighted highlighter so it

00:19:35,440 --> 00:19:39,340
finds keywords you know like new and

00:19:37,900 --> 00:19:41,650
claws and public and private and

00:19:39,340 --> 00:19:44,980
protected an interface and it gives them

00:19:41,650 --> 00:19:49,179
some color incidentally in later so this

00:19:44,980 --> 00:19:51,520
is these are later macro like things now

00:19:49,179 --> 00:19:55,260
you may look at this and say what what

00:19:51,520 --> 00:19:59,039
this is kind of hard to read this is the

00:19:55,260 --> 00:20:01,419
modem noise your mother warned you about

00:19:59,039 --> 00:20:05,340
don't go near pearl because it looks

00:20:01,419 --> 00:20:09,429
like this but it works I mean this was a

00:20:05,340 --> 00:20:12,460
one evening hack and maybe spent an hour

00:20:09,429 --> 00:20:14,260
on it or or two and it got to syntax

00:20:12,460 --> 00:20:19,049
highlighting all I wanted and it goes on

00:20:14,260 --> 00:20:22,030
for another another page like this and

00:20:19,049 --> 00:20:24,640
again it's it's not nice and here here

00:20:22,030 --> 00:20:27,520
it starts to actually fall apart which

00:20:24,640 --> 00:20:30,730
is one of the interesting things we can

00:20:27,520 --> 00:20:33,610
do nice things like actually have checks

00:20:30,730 --> 00:20:36,400
in here the e canna here is sort of a

00:20:33,610 --> 00:20:39,250
back borrow from pearl pearl six just

00:20:36,400 --> 00:20:42,880
check if if what we matched here matches

00:20:39,250 --> 00:20:44,830
any of the keyword types but we also

00:20:42,880 --> 00:20:46,840
have to scrub the reg ex and why do we

00:20:44,830 --> 00:20:49,210
have to do that well because we had kind

00:20:46,840 --> 00:20:51,039
of several nested matches so we can have

00:20:49,210 --> 00:20:52,750
coloring that goes on in a small part

00:20:51,039 --> 00:20:55,870
and then we have coloring that goes on

00:20:52,750 --> 00:20:57,789
in a bigger wider part and then we need

00:20:55,870 --> 00:20:59,409
to scrub the inner color so we need to

00:20:57,789 --> 00:21:01,809
actually go back and cover our tracks

00:20:59,409 --> 00:21:04,630
and undo the things that we already did

00:21:01,809 --> 00:21:08,340
so this scrub here is the first symptoms

00:21:04,630 --> 00:21:12,669
of us going crazy with this code it's

00:21:08,340 --> 00:21:14,980
this is pearl 5 all the way right okay

00:21:12,669 --> 00:21:17,760
what language I mean yes that's the

00:21:14,980 --> 00:21:20,200
problem that's what Larry touched upon

00:21:17,760 --> 00:21:22,179
basically between each of these lines

00:21:20,200 --> 00:21:24,400
you have to read between the lines we

00:21:22,179 --> 00:21:26,409
were in a slightly new language where

00:21:24,400 --> 00:21:30,580
we're sort of partially syntax college

00:21:26,409 --> 00:21:32,860
and that hurts you're creating 20 30

00:21:30,580 --> 00:21:35,020
languages here just on the fly you

00:21:32,860 --> 00:21:36,570
shouldn't do that it's not good for your

00:21:35,020 --> 00:21:38,740
health

00:21:36,570 --> 00:21:41,860
and you see here we're actually

00:21:38,740 --> 00:21:43,120
desperate enough to use the eval flag as

00:21:41,860 --> 00:21:48,600
well not that there's anything wrong

00:21:43,120 --> 00:21:51,070
with that still I this works and I

00:21:48,600 --> 00:21:53,620
wanted to show you the oil six

00:21:51,070 --> 00:21:57,279
equivalent of this sort of a c-sharp

00:21:53,620 --> 00:21:59,440
syntax highlighter for perl 6 with

00:21:57,279 --> 00:22:01,480
grammars with real things but i started

00:21:59,440 --> 00:22:03,520
in on it and I realized it's it's not

00:22:01,480 --> 00:22:05,320
interesting enough for talk so I thought

00:22:03,520 --> 00:22:13,929
I would do a live demo for you instead

00:22:05,320 --> 00:22:16,179
where we just live code a chessboard so

00:22:13,929 --> 00:22:20,679
what I mean by chessboard on two three

00:22:16,179 --> 00:22:29,080
four five six seven eight copy like this

00:22:20,679 --> 00:22:34,210
and we have poems like that and we have

00:22:29,080 --> 00:22:35,799
a queen of the kings and we write some

00:22:34,210 --> 00:22:38,710
of the hecklers let me know if I got

00:22:35,799 --> 00:22:50,080
them in the right wrong order that I bet

00:22:38,710 --> 00:22:55,210
someone knows thank you sorry oops yeah

00:22:50,080 --> 00:23:00,179
it fell from so king queen what else any

00:22:55,210 --> 00:23:11,520
takers rook it's got to be an hour right

00:23:00,179 --> 00:23:14,669
and night good night / 60 you're right

00:23:11,520 --> 00:23:19,120
yeah we should be standardized here and

00:23:14,669 --> 00:23:26,440
I'm missing what Bishop that has to be a

00:23:19,120 --> 00:23:30,789
bee not an age or anything sorry

00:23:26,440 --> 00:23:42,029
exactly you're bi oh okay I have no idea

00:23:30,789 --> 00:23:42,029
I've never us are okay oh that's be easy

00:23:42,149 --> 00:23:48,009
yeah here we go and like I can do it for

00:23:46,149 --> 00:23:52,480
a single word but it will just be

00:23:48,009 --> 00:23:56,470
quicker to do it like this till they did

00:23:52,480 --> 00:23:59,529
I do it for the right side no that's

00:23:56,470 --> 00:24:04,029
that's ok that's ok but it says

00:23:59,529 --> 00:24:06,570
perfectionist on my name tag now because

00:24:04,029 --> 00:24:14,169
this is pro 6 I would start like this

00:24:06,570 --> 00:24:19,500
enum taped and things can be in

00:24:14,169 --> 00:24:19,500
different states here they can be empty

00:24:20,250 --> 00:24:33,960
or texas yet or pawn or rook or light or

00:24:28,200 --> 00:24:36,039
bishop o king or queen and I'm making no

00:24:33,960 --> 00:24:39,490
distinction here between black and white

00:24:36,039 --> 00:24:45,669
I could I could probably do this in

00:24:39,490 --> 00:24:47,799
color but let's get that this is good

00:24:45,669 --> 00:24:52,120
enough for our example here now we want

00:24:47,799 --> 00:25:00,580
to simplex two to parse this so we need

00:24:52,120 --> 00:25:03,250
a grammar chess sport let's do that and

00:25:00,580 --> 00:25:06,120
at this point whenever i'm writing a

00:25:03,250 --> 00:25:09,429
grammar I have to stop myself here and

00:25:06,120 --> 00:25:11,259
prevent myself from guessing how this

00:25:09,429 --> 00:25:13,360
grammar will look and sort of trying

00:25:11,259 --> 00:25:18,100
different things out the first thing I

00:25:13,360 --> 00:25:26,309
should do is to write a test so use test

00:25:18,100 --> 00:25:26,309
and say is chess board

00:25:26,750 --> 00:25:33,450
pars and we're just checking thank you

00:25:31,310 --> 00:25:35,760
and we're just checking that we can

00:25:33,450 --> 00:25:43,950
parse this at all and that's a good

00:25:35,760 --> 00:25:45,510
start so I'm taking this train actually

00:25:43,950 --> 00:25:53,220
it's probably better to move them on up

00:25:45,510 --> 00:25:55,890
here Hey okay see what there we go and

00:25:53,220 --> 00:25:58,500
since I'm only interested in did it

00:25:55,890 --> 00:26:03,300
succeed or not I actually can do an okay

00:25:58,500 --> 00:26:06,690
here and just take the boolean value not

00:26:03,300 --> 00:26:11,300
really necessary say it parses let's run

00:26:06,690 --> 00:26:14,520
this all six chessboard does it parse Oh

00:26:11,300 --> 00:26:16,470
receding context accepts oh I shouldn't

00:26:14,520 --> 00:26:21,510
have added that equals there that was

00:26:16,470 --> 00:26:23,520
just huh there we go no such method top

00:26:21,510 --> 00:26:26,880
framework into a chessboard oh we can

00:26:23,520 --> 00:26:30,120
fix that a grammar should have a reg ex

00:26:26,880 --> 00:26:32,970
top or rule top or a token top just so

00:26:30,120 --> 00:26:34,920
it knows what to do and we put something

00:26:32,970 --> 00:26:42,720
in there because empty array exes are

00:26:34,920 --> 00:26:47,130
illegal okay parses yes it should

00:26:42,720 --> 00:26:48,720
because it has a beginning and I want to

00:26:47,130 --> 00:26:51,900
be able to parse any chessboard it

00:26:48,720 --> 00:26:54,510
doesn't have to look like this oh that's

00:26:51,900 --> 00:26:57,840
true so let's let's see it fail once

00:26:54,510 --> 00:27:00,990
there we go oh I see what you mean now

00:26:57,840 --> 00:27:03,060
the core inspect says that you shouldn't

00:27:00,990 --> 00:27:05,280
have to put in these beginning and on

00:27:03,060 --> 00:27:06,660
but I see great confusion there even in

00:27:05,280 --> 00:27:10,020
the spectrum and the discussions about

00:27:06,660 --> 00:27:12,240
spec yeah so now let's let's try to make

00:27:10,020 --> 00:27:15,300
this path and we use what we learned

00:27:12,240 --> 00:27:18,030
from this conversion table here and we

00:27:15,300 --> 00:27:19,800
can call rag exes from each other inside

00:27:18,030 --> 00:27:21,750
of grammar it's very easy it's just

00:27:19,800 --> 00:27:23,790
using this syntax errors are in calling

00:27:21,750 --> 00:27:26,220
a a rule that I haven't written yet it's

00:27:23,790 --> 00:27:27,840
supposed to be down here reg ex line and

00:27:26,220 --> 00:27:30,120
it's supposed to contain something that

00:27:27,840 --> 00:27:32,280
we put in in a while but I don't want

00:27:30,120 --> 00:27:34,580
just one line right I want eight of them

00:27:32,280 --> 00:27:40,519
so i use this quantifier thing

00:27:34,580 --> 00:27:44,299
give me eight lines okay and what should

00:27:40,519 --> 00:27:47,570
the line give us oh and I might as well

00:27:44,299 --> 00:27:51,279
use this nice thing here saying the

00:27:47,570 --> 00:27:51,279
lines should be separated by new lines

00:27:52,029 --> 00:27:57,559
separated if I also want the possibility

00:27:55,039 --> 00:27:59,809
of terminated I can use the double /

00:27:57,559 --> 00:28:03,049
Center which in out in the real language

00:27:59,809 --> 00:28:05,390
says this should be divisible by but

00:28:03,049 --> 00:28:07,639
here we borrow it for that can be things

00:28:05,390 --> 00:28:08,899
stuff in between and there can be one at

00:28:07,639 --> 00:28:11,029
the end as well so we can have comma

00:28:08,899 --> 00:28:12,700
separated list with forgiveness for a

00:28:11,029 --> 00:28:14,809
comma at the end which is really nice

00:28:12,700 --> 00:28:16,820
maybe we should use the Terminator here

00:28:14,809 --> 00:28:21,919
because then it's more forgiving and

00:28:16,820 --> 00:28:24,649
here we have just four places and they

00:28:21,919 --> 00:28:26,419
should also be eight of them and we

00:28:24,649 --> 00:28:28,070
don't separate in with anything because

00:28:26,419 --> 00:28:30,350
they're right next to each other and

00:28:28,070 --> 00:28:34,279
just to parse this here we need

00:28:30,350 --> 00:28:37,389
something that parses a dot rags oh and

00:28:34,279 --> 00:28:44,139
this should be in singular I think place

00:28:37,389 --> 00:28:44,139
how do i parse a daughter yes thank you

00:28:46,929 --> 00:28:52,309
how do I pars a dot here what do I need

00:28:49,880 --> 00:28:54,230
to put in it's not enough to just put

00:28:52,309 --> 00:28:55,580
the dot doubt that will would work in

00:28:54,230 --> 00:28:57,500
this case because the dog match it

00:28:55,580 --> 00:29:00,830
matches everything but that's not what I

00:28:57,500 --> 00:29:02,630
mean I mean something like this I could

00:29:00,830 --> 00:29:06,980
either quote it like a deer hair or

00:29:02,630 --> 00:29:09,110
escape it so Thank You hecklers for

00:29:06,980 --> 00:29:11,000
catching this initial white space here

00:29:09,110 --> 00:29:12,799
because I started here with the new line

00:29:11,000 --> 00:29:19,389
it's it just makes things line up better

00:29:12,799 --> 00:29:19,389
so do we expect this to parse not okay

00:29:21,010 --> 00:29:24,490
so not okay

00:29:25,230 --> 00:29:34,530
nine lines thank you 123456789 yeah that

00:29:32,070 --> 00:29:39,169
wouldn't part with it so just delete one

00:29:34,530 --> 00:29:41,790
here and thank flattens on IRC yay I

00:29:39,169 --> 00:29:46,530
should program like this every time with

00:29:41,790 --> 00:29:48,660
an audience of a few dozen right so now

00:29:46,530 --> 00:29:50,490
we have our essential framework up here

00:29:48,660 --> 00:29:53,730
and you see it already quoted bug and

00:29:50,490 --> 00:29:56,549
that was totally not intentional and

00:29:53,730 --> 00:29:58,620
what we just need to do here is we

00:29:56,549 --> 00:30:03,870
generalize this one it's we could call

00:29:58,620 --> 00:30:06,559
that one empty instead and empty and use

00:30:03,870 --> 00:30:09,630
our place here to actually put in types

00:30:06,559 --> 00:30:12,740
place it could be empty but it could

00:30:09,630 --> 00:30:15,120
also be a number of other things and now

00:30:12,740 --> 00:30:18,270
just to take the whole step maybe I

00:30:15,120 --> 00:30:21,990
would do it in fewer steps if I had more

00:30:18,270 --> 00:30:24,830
time just let's just copy this here and

00:30:21,990 --> 00:30:28,280
put in our original chess board and

00:30:24,830 --> 00:30:33,559
let's parse all the things in one go

00:30:28,280 --> 00:30:33,559
there we go this is what I want to parse

00:30:40,169 --> 00:30:55,289
yes that looks right and if we run this

00:30:44,279 --> 00:30:58,470
test it doesn't pulse fair enough actual

00:30:55,289 --> 00:31:03,059
chessboard so we need to fill in all the

00:30:58,470 --> 00:31:05,759
pieces here so let's say can either be

00:31:03,059 --> 00:31:10,499
empty oh and this is another nice thing

00:31:05,759 --> 00:31:13,230
I in Perl 5 i put the alternative pipe

00:31:10,499 --> 00:31:14,730
between alternatives in Perl 6 i'm also

00:31:13,230 --> 00:31:18,359
allowed to put it before the first

00:31:14,730 --> 00:31:20,159
alternative why is that well it reads

00:31:18,359 --> 00:31:24,869
nicer when I have several lines like

00:31:20,159 --> 00:31:27,059
this and which is now not reg expression

00:31:24,869 --> 00:31:30,749
so that cannot be anything before this

00:31:27,059 --> 00:31:32,549
it cannot be misunderstood and now we

00:31:30,749 --> 00:31:36,239
just need to fill them in like in the

00:31:32,549 --> 00:31:39,769
state here I can even copy this one make

00:31:36,239 --> 00:31:46,440
sure I get all of them there we go and

00:31:39,769 --> 00:31:53,749
for each of these I want to substitute

00:31:46,440 --> 00:31:53,749
and put in like that nice

00:31:57,660 --> 00:32:03,850
so this is a grammar being built up from

00:32:00,880 --> 00:32:11,590
scratch I think I got that right and we

00:32:03,850 --> 00:32:19,390
clone a few of these put a pawn rook put

00:32:11,590 --> 00:32:27,910
a night Bishop King and Queen and I got

00:32:19,390 --> 00:32:32,670
one too many and here we need there we

00:32:27,910 --> 00:32:32,670
go to line things up okay for enough I

00:32:33,240 --> 00:32:41,020
know Damien Conway has this back room

00:32:37,210 --> 00:32:43,630
for that I should have to so pawn is P

00:32:41,020 --> 00:32:45,790
right and here i use the character group

00:32:43,630 --> 00:32:48,670
note that we stole the bracket syntax

00:32:45,790 --> 00:32:58,990
for just ordinary grouping so here we

00:32:48,670 --> 00:33:00,790
need to use the character group look

00:32:58,990 --> 00:33:02,500
and I could make this all our case

00:33:00,790 --> 00:33:04,750
insensitive match but I bet that would

00:33:02,500 --> 00:33:09,160
come back and bite me when I actually

00:33:04,750 --> 00:33:14,860
wanted to distinguish between black and

00:33:09,160 --> 00:33:22,480
white and night was em right Bishop King

00:33:14,860 --> 00:33:24,640
Queen there we go sorry yeah indeed but

00:33:22,480 --> 00:33:29,980
I eventually i do want to distinguish

00:33:24,640 --> 00:33:31,990
between those but yes I could use colon

00:33:29,980 --> 00:33:33,940
I and colon I works for the whole rye

00:33:31,990 --> 00:33:35,470
cakes or it works for just a part of it

00:33:33,940 --> 00:33:41,410
for an individual group or for an

00:33:35,470 --> 00:33:44,020
individual rule or whatever I think I'm

00:33:41,410 --> 00:33:47,140
going to stop there with the live demo I

00:33:44,020 --> 00:33:49,030
just want to add that now I'm in a

00:33:47,140 --> 00:33:54,280
perfect position to actually use this

00:33:49,030 --> 00:33:56,470
information to hook in actions so I can

00:33:54,280 --> 00:34:00,010
take the things that I matched here and

00:33:56,470 --> 00:34:02,830
for example match them up with the

00:34:00,010 --> 00:34:05,230
things in the enum state here and say

00:34:02,830 --> 00:34:07,750
okay we match the pawn so let's actually

00:34:05,230 --> 00:34:11,649
tie it 2-2 an action point so what I can

00:34:07,750 --> 00:34:13,810
get out of this full grammar match is a

00:34:11,649 --> 00:34:16,359
data structure just an array of arrays

00:34:13,810 --> 00:34:19,750
with the exact right values already in

00:34:16,359 --> 00:34:21,790
them so using the actions I can go the

00:34:19,750 --> 00:34:24,220
final step here and do post processing

00:34:21,790 --> 00:34:27,730
of the whole of the whole thing that I

00:34:24,220 --> 00:34:31,090
matched sort of on the way up in the

00:34:27,730 --> 00:34:33,790
grammar match let's actually have a look

00:34:31,090 --> 00:34:37,000
at how this structure looks if I instead

00:34:33,790 --> 00:34:43,169
of running a tech tips here and if I

00:34:37,000 --> 00:34:43,169
just on the pars and printed in the end

00:34:43,619 --> 00:34:49,300
how does it look Sapers and it will

00:34:47,740 --> 00:34:50,889
print it through the gist function here

00:34:49,300 --> 00:34:53,409
so i guess i will get out something

00:34:50,889 --> 00:34:56,109
reasonable yeah there we go here you see

00:34:53,409 --> 00:34:58,750
all the 64 locations on the board and we

00:34:56,109 --> 00:35:01,960
sort of dig down we matched on entire

00:34:58,750 --> 00:35:04,390
rows and then we go into detail wats in

00:35:01,960 --> 00:35:05,740
each place on that row and then in the

00:35:04,390 --> 00:35:08,590
middle there's a lot of empty

00:35:05,740 --> 00:35:11,010
like this four of them and then on the

00:35:08,590 --> 00:35:13,570
other side here's the phone line and

00:35:11,010 --> 00:35:16,060
hear all the other ones so you see how

00:35:13,570 --> 00:35:18,670
this turns into an actual match tree and

00:35:16,060 --> 00:35:20,410
we can do nice stuff for that that's

00:35:18,670 --> 00:35:26,490
much more than we ever got from the Ray

00:35:20,410 --> 00:35:29,400
exes that was the live demo so remember

00:35:26,490 --> 00:35:32,050
computers are awesome programming is

00:35:29,400 --> 00:35:35,470
meant to be tapping directly into that

00:35:32,050 --> 00:35:37,990
kind of awesome and if things feel less

00:35:35,470 --> 00:35:40,000
than awesome it's probably because we

00:35:37,990 --> 00:35:42,580
don't have the right abstraction yet and

00:35:40,000 --> 00:35:44,530
you might be doing something that is so

00:35:42,580 --> 00:35:46,660
out there that no one has ever thought

00:35:44,530 --> 00:35:55,780
about the right abstraction but chances

00:35:46,660 --> 00:35:58,360
are that people have yes oh okay that's

00:35:55,780 --> 00:36:01,030
the other failure mode yes so

00:35:58,360 --> 00:36:04,630
programmers are there for you when you

00:36:01,030 --> 00:36:09,840
need them die really yes now I see the

00:36:04,630 --> 00:36:09,840
failure mode let's do this I have time

00:36:13,890 --> 00:36:24,280
by ASUS grammars slides find diarrhea

00:36:20,410 --> 00:36:28,619
for me by rick lee and i did it again

00:36:24,280 --> 00:36:31,060
didn't I directly there we go make

00:36:28,619 --> 00:36:32,800
presentation this is a perl script

00:36:31,060 --> 00:36:36,930
script file six script ok it took

00:36:32,800 --> 00:36:36,930
fraction of the second reload

00:36:45,400 --> 00:36:54,160
or it may not okay I think it's going

00:36:52,030 --> 00:36:58,210
out to the google cache looking for font

00:36:54,160 --> 00:37:02,800
files or whatever there we go tapping

00:36:58,210 --> 00:37:04,420
directly so yay so grammars are there

00:37:02,800 --> 00:37:09,460
for you when you need them and they're

00:37:04,420 --> 00:37:10,960
really really nice and the question in

00:37:09,460 --> 00:37:13,510
the abstract was which one would i use

00:37:10,960 --> 00:37:17,170
well obviously I'm still in some sense

00:37:13,510 --> 00:37:21,370
stuck in the profile mode sometimes when

00:37:17,170 --> 00:37:23,370
I just whip up a program of 20 break X's

00:37:21,370 --> 00:37:25,990
and they solved my problem for me and

00:37:23,370 --> 00:37:28,180
that's fine sometimes but I know which

00:37:25,990 --> 00:37:30,160
one I would rather maintain and that's

00:37:28,180 --> 00:37:32,640
two grammars when I have something like

00:37:30,160 --> 00:37:36,810
this structure that we ended up with

00:37:32,640 --> 00:37:39,370
with this grammar that's eminently

00:37:36,810 --> 00:37:41,860
editable they're not in retrospect and I

00:37:39,370 --> 00:37:44,620
can hook in new things here I can hook

00:37:41,860 --> 00:37:47,170
in new actions I can do various things

00:37:44,620 --> 00:37:52,270
with it and it's very very readable it's

00:37:47,170 --> 00:37:55,500
it's not my twenty lines of rags so

00:37:52,270 --> 00:37:55,500
there we go thank

00:37:59,859 --> 00:38:08,739
I believe I have some time for questions

00:38:03,849 --> 00:38:14,759
does anyone have a question why are you

00:38:08,739 --> 00:38:14,759
so awesome thank you whoever you are

00:38:19,049 --> 00:38:24,880
should I demo some more Reggie's

00:38:21,190 --> 00:38:29,759
features or do you want to go home more

00:38:24,880 --> 00:38:29,759
features what happened we talked about

00:38:32,759 --> 00:38:37,589
right yes you have a question sir Oh

00:38:41,339 --> 00:38:52,210
excellent right yes let's demo that so

00:38:50,109 --> 00:38:55,480
you can do I want to match everything

00:38:52,210 --> 00:38:59,289
between a and Z right and this will

00:38:55,480 --> 00:39:01,900
match the F the first F because I only

00:38:59,289 --> 00:39:04,599
asked it to match once and then I want

00:39:01,900 --> 00:39:07,569
to be able to say yeah do that but no I

00:39:04,599 --> 00:39:09,910
don't like f's very much so this syntax

00:39:07,569 --> 00:39:12,640
like Larry said it's like it's built for

00:39:09,910 --> 00:39:16,660
this kind of addition and subtraction in

00:39:12,640 --> 00:39:19,539
fact it's as if oh yeah and I that this

00:39:16,660 --> 00:39:21,849
this original plus here it's implicit so

00:39:19,539 --> 00:39:25,599
I can just do ya do the alphabet but

00:39:21,849 --> 00:39:32,529
don't UF's and like close the one and it

00:39:25,599 --> 00:39:35,640
matches the first Oh instead Oh indeed

00:39:32,529 --> 00:39:40,529
that would be more like the Unicode way

00:39:35,640 --> 00:39:44,140
plus alpha minus still don't like FS

00:39:40,529 --> 00:39:46,599
there we go so it does it for both

00:39:44,140 --> 00:39:49,029
manually specified character group like

00:39:46,599 --> 00:39:59,910
this or names of character groups that

00:39:49,029 --> 00:39:59,910
were already predefined right

00:40:01,050 --> 00:40:07,140
they have a question about grammar yes

00:40:04,770 --> 00:40:08,400
is there any ability around in an

00:40:07,140 --> 00:40:15,420
operating a parse tree is earning

00:40:08,400 --> 00:40:18,240
ability for way to construct that's what

00:40:15,420 --> 00:40:21,420
I meant to demo with this chest thing so

00:40:18,240 --> 00:40:23,880
we had this enum that we were just about

00:40:21,420 --> 00:40:25,800
to plug in and and what you do is in

00:40:23,880 --> 00:40:28,470
your action methods you just type make

00:40:25,800 --> 00:40:30,990
and it says attach this object to this

00:40:28,470 --> 00:40:33,090
part of the parse tree so we generally

00:40:30,990 --> 00:40:34,830
we make a dish distinction between the

00:40:33,090 --> 00:40:37,920
parse tree which is the direct product

00:40:34,830 --> 00:40:39,960
of what we get out from the reg ex match

00:40:37,920 --> 00:40:41,880
and syntax tree which is what we

00:40:39,960 --> 00:40:44,400
actually want to get out some sort of

00:40:41,880 --> 00:40:46,590
process things and we go from parse tree

00:40:44,400 --> 00:40:48,510
to syntax tree with this make function

00:40:46,590 --> 00:40:50,010
so just call make and attach whatever

00:40:48,510 --> 00:40:52,080
you want to it and if you're wondering

00:40:50,010 --> 00:40:55,010
well does that actually work in practice

00:40:52,080 --> 00:41:03,810
yes it does rikudou is built like that

00:40:55,010 --> 00:41:06,480
yeah which one let's take the standard

00:41:03,810 --> 00:41:09,720
one STD and it's in pm-6 these days

00:41:06,480 --> 00:41:12,390
right so here's here's a really big

00:41:09,720 --> 00:41:15,270
impressive Perl 6 grammar and it

00:41:12,390 --> 00:41:16,680
specifies the POSIX language we're kind

00:41:15,270 --> 00:41:18,270
of very close nowadays in our

00:41:16,680 --> 00:41:21,330
implementations to following this one

00:41:18,270 --> 00:41:23,310
and you can see if you compare this to

00:41:21,330 --> 00:41:27,390
the corresponding thing in profile which

00:41:23,310 --> 00:41:37,470
would be Tok see this one doesn't make

00:41:27,390 --> 00:41:39,660
you want to run away screaming yes so

00:41:37,470 --> 00:41:41,760
here you think I have things like what's

00:41:39,660 --> 00:41:48,650
an identifier well it's something

00:41:41,760 --> 00:41:50,970
alphabetic and followed by 10 right

00:41:48,650 --> 00:41:53,250
identifier is below that one yes I down

00:41:50,970 --> 00:41:55,350
to some small thing identifier is all

00:41:53,250 --> 00:41:57,180
our politics variables and so on so you

00:41:55,350 --> 00:41:58,710
see it can be both the original meaning

00:41:57,180 --> 00:42:00,390
of widened and then we can have

00:41:58,710 --> 00:42:04,730
apostrophes which is a funny rule

00:42:00,390 --> 00:42:04,730
defined as either an apostrophe or dash

00:42:07,030 --> 00:42:14,330
right here you could have shown this

00:42:10,640 --> 00:42:16,100
nice % thing I still I believe I still

00:42:14,330 --> 00:42:22,880
have time to show action method let's go

00:42:16,100 --> 00:42:28,880
into recruit instead we could show that

00:42:22,880 --> 00:42:31,310
one yes jason is the simple choice let's

00:42:28,880 --> 00:42:33,230
look at that Jason tiny and we have the

00:42:31,310 --> 00:42:35,740
grammar just take a brief look at that

00:42:33,230 --> 00:42:38,660
one it's been shown in some other talk

00:42:35,740 --> 00:42:40,430
here we match objects parodies pairs

00:42:38,660 --> 00:42:41,960
arrays arraylists and so on and then

00:42:40,430 --> 00:42:44,150
various symbols which are true false

00:42:41,960 --> 00:42:47,270
null object array and string and if you

00:42:44,150 --> 00:42:50,300
go to the current funding action class

00:42:47,270 --> 00:42:51,710
and see what it does with those for each

00:42:50,300 --> 00:42:53,990
of those rules there is a corresponding

00:42:51,710 --> 00:42:56,300
method that takes in the match objects

00:42:53,990 --> 00:42:58,310
as the parameter here and just does make

00:42:56,300 --> 00:43:00,350
so here you have to make process attach

00:42:58,310 --> 00:43:04,640
this object to so what do we do for

00:43:00,350 --> 00:43:07,070
example with an array here we have the

00:43:04,640 --> 00:43:09,650
array well we go dig into arraylist and

00:43:07,070 --> 00:43:11,630
we just attach that as the object here

00:43:09,650 --> 00:43:13,190
what's the array list well that's where

00:43:11,630 --> 00:43:19,190
we actually make the array we make the

00:43:13,190 --> 00:43:21,230
array as have brackets here so create

00:43:19,190 --> 00:43:25,640
the array and fill it with the actual

00:43:21,230 --> 00:43:27,380
individual values in that array list so

00:43:25,640 --> 00:43:29,810
there we go and I think I'm now

00:43:27,380 --> 00:43:31,870
officially out of time so again thank

00:43:29,810 --> 00:43:31,870

YouTube URL: https://www.youtube.com/watch?v=oo-gA9Z9SaA


