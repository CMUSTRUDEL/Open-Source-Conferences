Title: John Lightsey - Auditing Open Source Perl Code for Security
Publication date: 2013-08-20
Playlist: YAPC::NA 2013
Description: 
	
Captions: 
	00:00:00,439 --> 00:00:05,069
okay my name is John White see this is

00:00:02,879 --> 00:00:08,730
going to be auditing open source bro

00:00:05,069 --> 00:00:10,650
code for security issues this is not

00:00:08,730 --> 00:00:13,320
going to be a comprehensive talk on

00:00:10,650 --> 00:00:16,980
different specific ways that you can

00:00:13,320 --> 00:00:20,430
attack pearl code or a systematic way of

00:00:16,980 --> 00:00:22,949
writing more secure promo code this is

00:00:20,430 --> 00:00:24,800
really a distillation of what I like to

00:00:22,949 --> 00:00:27,359
do on the weekends which is you know

00:00:24,800 --> 00:00:28,800
grab other people's bro code and look

00:00:27,359 --> 00:00:34,950
for all the vulnerabilities I can find

00:00:28,800 --> 00:00:37,550
inside of it so yeah so why do I do this

00:00:34,950 --> 00:00:40,620
well it is very fun you know it is a

00:00:37,550 --> 00:00:43,559
real rush when you take somebody else's

00:00:40,620 --> 00:00:45,149
web application and find a way to you

00:00:43,559 --> 00:00:47,489
know start from the outside and

00:00:45,149 --> 00:00:50,610
completely you know control what's going

00:00:47,489 --> 00:00:53,070
on on the inside it's also an excellent

00:00:50,610 --> 00:00:55,110
learning experience you see a lot of

00:00:53,070 --> 00:00:58,379
very bad bro code and a lot of very good

00:00:55,110 --> 00:00:59,760
bro code and some things that you sort

00:00:58,379 --> 00:01:01,739
of intuitively think they're going to be

00:00:59,760 --> 00:01:03,690
very insecure when you actually go

00:01:01,739 --> 00:01:05,100
through the code step-by-step trying to

00:01:03,690 --> 00:01:07,380
figure out how you would exploit it you

00:01:05,100 --> 00:01:08,670
find that that actually the the patterns

00:01:07,380 --> 00:01:10,650
that they're using the way they're

00:01:08,670 --> 00:01:13,590
they're organizing the code is very

00:01:10,650 --> 00:01:16,049
difficult to actually exploit and on top

00:01:13,590 --> 00:01:17,670
of that you know by going through and

00:01:16,049 --> 00:01:19,439
and looking at other people's code

00:01:17,670 --> 00:01:20,820
helping them strengthen it helping them

00:01:19,439 --> 00:01:22,770
improve the way they're writing their

00:01:20,820 --> 00:01:24,720
code you know you're really helping the

00:01:22,770 --> 00:01:27,299
overall community of pro programmers and

00:01:24,720 --> 00:01:30,780
spreading knowledge about security

00:01:27,299 --> 00:01:33,180
issues which a lot of pearl developers

00:01:30,780 --> 00:01:37,530
don't really seem to understand although

00:01:33,180 --> 00:01:38,729
well so right off the bat what I'm going

00:01:37,530 --> 00:01:41,759
to be talking about here is an audit

00:01:38,729 --> 00:01:44,700
instead of a review in my mind if I'm

00:01:41,759 --> 00:01:47,960
reviewing code for security issues that

00:01:44,700 --> 00:01:51,479
means that its internal and and so

00:01:47,960 --> 00:01:54,180
nobody in public is going to be impacted

00:01:51,479 --> 00:01:56,430
when I find something we fix it when we

00:01:54,180 --> 00:01:57,600
audit it on the other hand that implies

00:01:56,430 --> 00:02:00,810
that there are people out there using

00:01:57,600 --> 00:02:02,579
this code and so the process after we

00:02:00,810 --> 00:02:06,990
find a vulnerability is quite quite a

00:02:02,579 --> 00:02:08,770
bit more complex now almost almost

00:02:06,990 --> 00:02:10,660
everything that I'm

00:02:08,770 --> 00:02:12,310
talk about today it's kind of based on

00:02:10,660 --> 00:02:14,890
what what I personally have been doing

00:02:12,310 --> 00:02:18,880
I've tried to match it up with what Oh

00:02:14,890 --> 00:02:23,080
wasp it's the open web application

00:02:18,880 --> 00:02:24,880
security project yeah that's them they

00:02:23,080 --> 00:02:28,450
actually have a lot of documentation on

00:02:24,880 --> 00:02:31,090
common web vulnerabilities on you know

00:02:28,450 --> 00:02:34,840
including security in the software

00:02:31,090 --> 00:02:37,120
development lifecycle and also about

00:02:34,840 --> 00:02:38,980
they have some specific documentation on

00:02:37,120 --> 00:02:42,640
auditing code for security

00:02:38,980 --> 00:02:45,010
vulnerabilities and really that their

00:02:42,640 --> 00:02:48,070
guidelines focus on the more formal

00:02:45,010 --> 00:02:50,800
approach which has a few different steps

00:02:48,070 --> 00:02:52,990
first you do a lot of prep work of sort

00:02:50,800 --> 00:02:55,270
of understanding the application then

00:02:52,990 --> 00:02:57,430
you do a model then you do your audit

00:02:55,270 --> 00:03:00,100
and then you generate some metrics off

00:02:57,430 --> 00:03:02,110
of that so in the formal approach when

00:03:00,100 --> 00:03:04,000
we're prepping we got to understand the

00:03:02,110 --> 00:03:06,520
business logic that this application

00:03:04,000 --> 00:03:08,320
sort of embodies right and we also have

00:03:06,520 --> 00:03:10,360
to understand the execution context

00:03:08,320 --> 00:03:12,040
which is you know how the servers

00:03:10,360 --> 00:03:14,110
organize what sort of people are going

00:03:12,040 --> 00:03:17,140
to be interacting with it you know is

00:03:14,110 --> 00:03:19,570
you know this system interacting with

00:03:17,140 --> 00:03:21,940
another system on the back end you know

00:03:19,570 --> 00:03:25,150
that all sort of forms the execution

00:03:21,940 --> 00:03:28,000
context so once you have that you start

00:03:25,150 --> 00:03:30,790
writing up a threat model and the OWASP

00:03:28,000 --> 00:03:32,920
site has you know nice guides on how to

00:03:30,790 --> 00:03:36,160
how to write this out specifically they

00:03:32,920 --> 00:03:39,370
look kind of like user stories that you

00:03:36,160 --> 00:03:41,410
would see but basically the threat model

00:03:39,370 --> 00:03:42,970
is going to define the threat agents

00:03:41,410 --> 00:03:45,220
these are the people who are going to

00:03:42,970 --> 00:03:46,360
want to exploit your application and

00:03:45,220 --> 00:03:48,220
then it's going to define the attack

00:03:46,360 --> 00:03:50,709
services the ways that they interact

00:03:48,220 --> 00:03:53,830
with your application to actually

00:03:50,709 --> 00:03:57,010
exploit it the possible attacks are

00:03:53,830 --> 00:03:59,560
going to do and then the security

00:03:57,010 --> 00:04:01,570
controls that you in developing the

00:03:59,560 --> 00:04:05,260
application have to implement keep them

00:04:01,570 --> 00:04:08,500
from exploiting it and then the impacts

00:04:05,260 --> 00:04:11,200
if those security controls film and this

00:04:08,500 --> 00:04:13,300
is kind of the idea of generating a

00:04:11,200 --> 00:04:14,770
threat model is really to encourage you

00:04:13,300 --> 00:04:17,530
to develop layers inside of your

00:04:14,770 --> 00:04:19,530
application you know so that if somebody

00:04:17,530 --> 00:04:21,650
can break through one layer there

00:04:19,530 --> 00:04:25,260
restricted and what they can actually do

00:04:21,650 --> 00:04:27,270
so when it comes to doing the actual

00:04:25,260 --> 00:04:29,010
audit in the formal model you're really

00:04:27,270 --> 00:04:31,580
focusing on the security controls that

00:04:29,010 --> 00:04:33,750
you defined in that model stage and

00:04:31,580 --> 00:04:36,240
looking at how they're implemented in

00:04:33,750 --> 00:04:38,400
code and what sort of problems are in

00:04:36,240 --> 00:04:41,400
those security controls after you've

00:04:38,400 --> 00:04:43,440
done that you go through and assign an a

00:04:41,400 --> 00:04:47,570
rank to each and every vulnerability you

00:04:43,440 --> 00:04:51,060
found do some nice graphs for the the

00:04:47,570 --> 00:04:52,950
managers to look at and then finally you

00:04:51,060 --> 00:04:55,169
you go back and look at what was

00:04:52,950 --> 00:04:57,360
effective what was ineffective you know

00:04:55,169 --> 00:05:00,570
both in the model that you generated and

00:04:57,360 --> 00:05:03,270
in the way that you were auditing it the

00:05:00,570 --> 00:05:04,710
formal approach has some big downsides

00:05:03,270 --> 00:05:07,320
especially if you're just doing this on

00:05:04,710 --> 00:05:09,360
the weekend for fun because there is a

00:05:07,320 --> 00:05:11,160
lot of upfront work and understanding

00:05:09,360 --> 00:05:12,600
you know everything there is to know

00:05:11,160 --> 00:05:17,100
about the web app before you actually

00:05:12,600 --> 00:05:20,790
look at any of the code it also with an

00:05:17,100 --> 00:05:22,110
open source web app generally you're not

00:05:20,790 --> 00:05:22,889
going to have somebody available that

00:05:22,110 --> 00:05:26,220
can give you that deep down

00:05:22,889 --> 00:05:28,560
understanding as to what every line of

00:05:26,220 --> 00:05:30,210
code was actually intended to do so a

00:05:28,560 --> 00:05:31,710
lot of times you're looking at at the

00:05:30,210 --> 00:05:37,080
behavior of the code and not necessarily

00:05:31,710 --> 00:05:40,500
the the intended behavior of the code so

00:05:37,080 --> 00:05:43,110
wats also lists another another approach

00:05:40,500 --> 00:05:46,410
this and they call it code crawling and

00:05:43,110 --> 00:05:47,910
the way that wasp defines that code

00:05:46,410 --> 00:05:50,820
crawling would kind of go along with the

00:05:47,910 --> 00:05:53,430
formal model but you can take code

00:05:50,820 --> 00:05:55,950
crawling as its own way of looking for

00:05:53,430 --> 00:05:57,360
vulnerabilities in code and with code

00:05:55,950 --> 00:06:00,479
crawling basically you're going to start

00:05:57,360 --> 00:06:03,180
by looking for the inputs from the user

00:06:00,479 --> 00:06:04,770
and then the the outputs where it goes

00:06:03,180 --> 00:06:06,900
to some sort of vulnerable function it

00:06:04,770 --> 00:06:10,500
could be SQL statement it could be you

00:06:06,900 --> 00:06:13,200
know sub-process execution could be you

00:06:10,500 --> 00:06:14,970
know displayed back to the user and then

00:06:13,200 --> 00:06:17,070
you're going to look for you know

00:06:14,970 --> 00:06:18,539
connecting up the input the output and

00:06:17,070 --> 00:06:22,590
in between the two there's nothing

00:06:18,539 --> 00:06:24,780
actually preventing an injection so the

00:06:22,590 --> 00:06:28,229
real advantages to code crawling is that

00:06:24,780 --> 00:06:30,030
it's very simple to start this way the

00:06:28,229 --> 00:06:32,760
vulnerabilities that you see in

00:06:30,030 --> 00:06:35,400
a code crawling level are really

00:06:32,760 --> 00:06:36,930
straightforward to demonstrate there is

00:06:35,400 --> 00:06:39,150
lots of documentation if you go to a

00:06:36,930 --> 00:06:41,490
wasp site which I totally recommend you

00:06:39,150 --> 00:06:43,680
do they have their top 10 list of

00:06:41,490 --> 00:06:47,490
different different web application

00:06:43,680 --> 00:06:48,720
attacks in fact they have have hundreds

00:06:47,490 --> 00:06:51,450
if not thousands of these things

00:06:48,720 --> 00:06:54,510
documented with examples as to how

00:06:51,450 --> 00:06:58,440
somebody would would exploit your web

00:06:54,510 --> 00:07:02,100
application this way the disadvantages

00:06:58,440 --> 00:07:03,900
though are that in a code crawl it's not

00:07:02,100 --> 00:07:06,270
real clear exactly which code was

00:07:03,900 --> 00:07:07,860
responsible for preventing an attack so

00:07:06,270 --> 00:07:10,380
if something goes through multiple

00:07:07,860 --> 00:07:13,770
modules you know which one was supposed

00:07:10,380 --> 00:07:15,570
to filter it out you know when they're

00:07:13,770 --> 00:07:17,730
all integrated together into a single

00:07:15,570 --> 00:07:19,020
web application then it doesn't really

00:07:17,730 --> 00:07:21,020
matter which one because the web

00:07:19,020 --> 00:07:23,340
application is vulnerable regardless

00:07:21,020 --> 00:07:25,890
when it's a collection of different

00:07:23,340 --> 00:07:27,690
modules but from different authors then

00:07:25,890 --> 00:07:30,060
you can get into the finger-pointing of

00:07:27,690 --> 00:07:31,350
well my module wasn't supposed to do

00:07:30,060 --> 00:07:35,130
this they were supposed to have

00:07:31,350 --> 00:07:36,800
prevented it you know code currently

00:07:35,130 --> 00:07:40,320
also isn't going to pick up just

00:07:36,800 --> 00:07:43,200
corelogic flow so if let's say your

00:07:40,320 --> 00:07:45,870
application supports you know demo

00:07:43,200 --> 00:07:49,320
accounts logging into it it's not going

00:07:45,870 --> 00:07:51,990
to be really obvious from a input and an

00:07:49,320 --> 00:07:54,420
output basis that the demo account can

00:07:51,990 --> 00:07:57,240
you know do things that the only the

00:07:54,420 --> 00:07:59,220
admin account should be able to do and

00:07:57,240 --> 00:08:01,020
also cook calling clearly it doesn't

00:07:59,220 --> 00:08:02,610
although it find specific

00:08:01,020 --> 00:08:05,040
vulnerabilities it doesn't really give

00:08:02,610 --> 00:08:09,210
you a good guideline for how to improve

00:08:05,040 --> 00:08:12,390
the overall software you know to make it

00:08:09,210 --> 00:08:14,040
much stronger so let's say I've

00:08:12,390 --> 00:08:15,210
convinced you all and you you all want

00:08:14,040 --> 00:08:16,890
to go out there and grab some code and

00:08:15,210 --> 00:08:20,520
look at it so where where exactly should

00:08:16,890 --> 00:08:24,510
you start obviously anything in the

00:08:20,520 --> 00:08:26,550
Corporal tree is is very important if

00:08:24,510 --> 00:08:29,670
you want to look just generally a Tulsi

00:08:26,550 --> 00:08:32,580
fan code the grub seep enemy is a great

00:08:29,670 --> 00:08:36,090
site to do that at if you can formulate

00:08:32,580 --> 00:08:38,070
a specific vulnerability as a regular

00:08:36,090 --> 00:08:39,360
expression you can basically pull them

00:08:38,070 --> 00:08:42,420
all up here and then start going through

00:08:39,360 --> 00:08:43,520
and validating them there's also this

00:08:42,420 --> 00:08:45,710
list of

00:08:43,520 --> 00:08:47,750
pearl open-source products there are a

00:08:45,710 --> 00:08:50,900
couple of different ones that's one that

00:08:47,750 --> 00:08:52,520
that's been around for a while Deb tags

00:08:50,900 --> 00:08:54,950
and code search code search it's very

00:08:52,520 --> 00:08:57,950
similar to the google code search but it

00:08:54,950 --> 00:08:59,900
basically has all of the software that's

00:08:57,950 --> 00:09:02,300
inside of Debian that Ben has a number

00:08:59,900 --> 00:09:05,120
of pro web apps and they have about a

00:09:02,300 --> 00:09:07,510
third of CN so it's a good place to look

00:09:05,120 --> 00:09:12,860
also and of course source org and github

00:09:07,510 --> 00:09:14,450
so to do a code call we can either start

00:09:12,860 --> 00:09:18,200
with the sources or we can start with

00:09:14,450 --> 00:09:20,210
the sinks you know I in some languages

00:09:18,200 --> 00:09:22,790
it's really effective to look for

00:09:20,210 --> 00:09:24,710
combinations of the two PHP code in

00:09:22,790 --> 00:09:26,870
particular you can find tons of

00:09:24,710 --> 00:09:29,300
vulnerabilities by looking for you no

00:09:26,870 --> 00:09:31,070
posts with an SQL statement you know

00:09:29,300 --> 00:09:33,530
really really straight forward to find

00:09:31,070 --> 00:09:35,270
them that way and you just intuitively

00:09:33,530 --> 00:09:39,310
looking at the results you it's obvious

00:09:35,270 --> 00:09:41,870
that it's its vulnerability with pearl

00:09:39,310 --> 00:09:44,780
really looking at the sources is kind of

00:09:41,870 --> 00:09:48,650
more difficult a lot of the the

00:09:44,780 --> 00:09:52,340
application dispatch logic varies widely

00:09:48,650 --> 00:09:53,600
from one web applications of next so

00:09:52,340 --> 00:09:58,640
personally I like to start with the

00:09:53,600 --> 00:10:02,480
sinks on on Pearl so with my personal

00:09:58,640 --> 00:10:05,260
workflow I like to go ahead and identify

00:10:02,480 --> 00:10:07,190
the suspect sinks then follow the

00:10:05,260 --> 00:10:09,170
execution of the code all the way back

00:10:07,190 --> 00:10:11,150
to where the user input whatever ended

00:10:09,170 --> 00:10:13,160
up at that sink and then make sure

00:10:11,150 --> 00:10:16,010
there's no nothing in between the two

00:10:13,160 --> 00:10:17,600
that stops them then you know bonus

00:10:16,010 --> 00:10:19,790
points for creating a proof of concept

00:10:17,600 --> 00:10:22,220
that demonstrates this you know very

00:10:19,790 --> 00:10:25,220
clearly even more bonus points if I

00:10:22,220 --> 00:10:27,470
write a pad for it and of course read up

00:10:25,220 --> 00:10:29,720
lots of documentation and then go and

00:10:27,470 --> 00:10:32,690
disclose it to the person who wrote the

00:10:29,720 --> 00:10:35,680
software and all their users so now this

00:10:32,690 --> 00:10:35,680
is where it gets really tricky

00:10:36,220 --> 00:10:41,720
disclosure is a crazy crazy process you

00:10:40,040 --> 00:10:44,840
know it basically every company every

00:10:41,720 --> 00:10:46,310
person they want to they want to handle

00:10:44,840 --> 00:10:47,190
security vulnerabilities and the code

00:10:46,310 --> 00:10:50,730
that they wrote in

00:10:47,190 --> 00:10:52,440
in very different ways as far as like

00:10:50,730 --> 00:10:55,770
guidelines they're very few of them out

00:10:52,440 --> 00:10:58,380
there mitre actually has has documented

00:10:55,770 --> 00:11:01,950
for researchers on on how to disclose

00:10:58,380 --> 00:11:05,490
but it's also very limited in scope so

00:11:01,950 --> 00:11:07,560
really the best bet is you know if you

00:11:05,490 --> 00:11:09,030
feel like you can't properly go through

00:11:07,560 --> 00:11:11,070
all the all the steps to disclose

00:11:09,030 --> 00:11:12,360
something don't even start looking you

00:11:11,070 --> 00:11:14,400
know you're not going to help anybody if

00:11:12,360 --> 00:11:16,830
you find vulnerabilities and don't carry

00:11:14,400 --> 00:11:18,510
it all the way through so with

00:11:16,830 --> 00:11:21,810
disclosure there obviously a lot of

00:11:18,510 --> 00:11:23,280
approaches this there's the passive

00:11:21,810 --> 00:11:24,780
aggressive approach where I find a

00:11:23,280 --> 00:11:26,670
vulnerability in your software and I

00:11:24,780 --> 00:11:28,680
don't actually tell you instead I just

00:11:26,670 --> 00:11:30,300
go on the forums and say what allows a

00:11:28,680 --> 00:11:34,760
programmer you are and how insecure

00:11:30,300 --> 00:11:37,230
yourself is quite common actually yes

00:11:34,760 --> 00:11:39,690
then there's the the black cat approach

00:11:37,230 --> 00:11:42,470
you know you keep it secret break into

00:11:39,690 --> 00:11:45,200
other people's systems you even have

00:11:42,470 --> 00:11:47,880
variations on this where instead of

00:11:45,200 --> 00:11:51,090
keeping it secret and using it yourself

00:11:47,880 --> 00:11:55,250
you can sell it to other people it's

00:11:51,090 --> 00:12:00,870
every who all knows who view pin is

00:11:55,250 --> 00:12:03,690
anyone view pin' no okay well yeah there

00:12:00,870 --> 00:12:05,820
there a security research company they

00:12:03,690 --> 00:12:07,440
actually specifically focus on things

00:12:05,820 --> 00:12:09,420
that have already been disclosed so they

00:12:07,440 --> 00:12:12,570
have CV numbers a sign but what they do

00:12:09,420 --> 00:12:14,640
is they actually weaponize the cds and

00:12:12,570 --> 00:12:15,990
then they sell them to governments you

00:12:14,640 --> 00:12:21,420
know supposedly they only saw them to

00:12:15,990 --> 00:12:22,650
nato governments but yeah but i mean

00:12:21,420 --> 00:12:23,820
there there are a lot of people out

00:12:22,650 --> 00:12:26,580
there they they do pay for

00:12:23,820 --> 00:12:27,900
vulnerabilities even even as an

00:12:26,580 --> 00:12:29,190
individual you could go to packet storm

00:12:27,900 --> 00:12:31,350
packet storm will pay you for a

00:12:29,190 --> 00:12:33,060
vulnerability and as far as I'm aware

00:12:31,350 --> 00:12:35,490
packet storm doesn't doesn't try to

00:12:33,060 --> 00:12:40,110
weaponize them and use them against

00:12:35,490 --> 00:12:42,839
people so there's also the the sort of

00:12:40,110 --> 00:12:45,330
ambush approach where you know when you

00:12:42,839 --> 00:12:47,880
you have found a flaw you go ahead and

00:12:45,330 --> 00:12:49,440
you document it you know you you put

00:12:47,880 --> 00:12:51,270
together a proof of concept then you go

00:12:49,440 --> 00:12:54,180
straight to the full disclosure list and

00:12:51,270 --> 00:12:55,380
dump it all there you know without ever

00:12:54,180 --> 00:12:57,660
giving the the person who wrote that

00:12:55,380 --> 00:12:58,860
software any opportunity to to put

00:12:57,660 --> 00:13:02,850
together how they're going to react to

00:12:58,860 --> 00:13:05,790
it to coordinate a reaction this is very

00:13:02,850 --> 00:13:07,050
simple and straightforward a lot of

00:13:05,790 --> 00:13:08,700
people do it just because they get

00:13:07,050 --> 00:13:11,970
frustrated with the the alternative

00:13:08,700 --> 00:13:14,820
processes but definitely people will

00:13:11,970 --> 00:13:16,980
people who write software will generally

00:13:14,820 --> 00:13:21,300
begin to dislike working with you when

00:13:16,980 --> 00:13:24,270
you do this to the local time so really

00:13:21,300 --> 00:13:26,550
the best approach but also the most time

00:13:24,270 --> 00:13:31,980
consuming as they be responsible full

00:13:26,550 --> 00:13:33,800
disclosure approach for me I my way of

00:13:31,980 --> 00:13:36,899
doing this is sort of evolved over time

00:13:33,800 --> 00:13:39,120
what I'm trying to do now is do my

00:13:36,899 --> 00:13:41,370
initial contacts with whoever wrote the

00:13:39,120 --> 00:13:43,560
software so right off the bat I know I

00:13:41,370 --> 00:13:45,690
can't I can't open a bug in RT if I open

00:13:43,560 --> 00:13:47,430
a bug in RT everybody can see it right

00:13:45,690 --> 00:13:49,529
as soon as soon as everybody can see it

00:13:47,430 --> 00:13:51,839
I figure it's disclosed you know whether

00:13:49,529 --> 00:13:55,200
there's any mitigation strategy out

00:13:51,839 --> 00:13:58,650
there at all so the very first thing you

00:13:55,200 --> 00:14:00,779
find their security list you start in

00:13:58,650 --> 00:14:01,950
emailing the author individually you

00:14:00,779 --> 00:14:03,930
make sure that they write you back

00:14:01,950 --> 00:14:05,339
saying this is a private channel it's

00:14:03,930 --> 00:14:09,360
not going to a mailing list have that

00:14:05,339 --> 00:14:11,550
one happened before you know even I've

00:14:09,360 --> 00:14:14,160
actually had to happen before we're in

00:14:11,550 --> 00:14:16,020
going through other security teams they

00:14:14,160 --> 00:14:19,610
would contact the original author who

00:14:16,020 --> 00:14:21,690
immediately sent it to a mailing list

00:14:19,610 --> 00:14:23,370
definitely there with initial contact

00:14:21,690 --> 00:14:25,500
and in fact all the stages you want to

00:14:23,370 --> 00:14:27,930
specify exactly what time frames are

00:14:25,500 --> 00:14:29,339
expecting some sort of response you know

00:14:27,930 --> 00:14:31,680
it doesn't have to be a fix it just has

00:14:29,339 --> 00:14:34,440
to be an acknowledgement that something

00:14:31,680 --> 00:14:35,730
that the communication was received that

00:14:34,440 --> 00:14:38,250
they understand it that they have some

00:14:35,730 --> 00:14:40,890
plan if you don't do this you don't

00:14:38,250 --> 00:14:44,520
specify time frames then you you end up

00:14:40,890 --> 00:14:46,709
sitting there waiting forever and you

00:14:44,520 --> 00:14:48,270
know about it and now we're back into

00:14:46,709 --> 00:14:50,010
the passive aggressive approach where

00:14:48,270 --> 00:14:52,170
it's like yeah you don't want to use

00:14:50,010 --> 00:14:56,880
that you know they're not fixing their

00:14:52,170 --> 00:15:00,690
stuff but so definitely you know keep

00:14:56,880 --> 00:15:03,300
keep specifying time frames so after you

00:15:00,690 --> 00:15:03,889
you establish initial communications you

00:15:03,300 --> 00:15:10,549
do

00:15:03,889 --> 00:15:12,739
continued communications yeah a lot of

00:15:10,549 --> 00:15:14,449
times the upstream authors is not going

00:15:12,739 --> 00:15:16,220
to run up the bat understand exactly

00:15:14,449 --> 00:15:18,920
what you're talking about they need some

00:15:16,220 --> 00:15:20,449
clarification from you it's actually

00:15:18,920 --> 00:15:22,279
preferable at this point where they

00:15:20,449 --> 00:15:24,410
realize they have a vulnerability they

00:15:22,279 --> 00:15:26,499
haven't worked up patch to go if the

00:15:24,410 --> 00:15:29,029
upstream author goes a heads and and

00:15:26,499 --> 00:15:31,989
contacts might or they can get a cve

00:15:29,029 --> 00:15:34,459
number privately assigned at this point

00:15:31,989 --> 00:15:37,339
so after this you go into patch

00:15:34,459 --> 00:15:39,439
development you go ahead and help them

00:15:37,339 --> 00:15:40,549
with whatever proposed fix very

00:15:39,439 --> 00:15:41,869
frequently when you report a

00:15:40,549 --> 00:15:43,970
vulnerability to somebody they're going

00:15:41,869 --> 00:15:47,149
to view you as an expert in their code

00:15:43,970 --> 00:15:49,579
and a lot of times that's not the case

00:15:47,149 --> 00:15:52,040
and you you need to make it clear to

00:15:49,579 --> 00:15:54,619
them that just because it looks to you

00:15:52,040 --> 00:15:56,089
like it fixes it you don't have enough

00:15:54,619 --> 00:16:00,290
understanding of their code base to

00:15:56,089 --> 00:16:03,259
really make that judgment so after after

00:16:00,290 --> 00:16:04,970
a patch has worked up the upstream

00:16:03,259 --> 00:16:08,869
author is going to eventually tell

00:16:04,970 --> 00:16:10,489
people how they do this is all over the

00:16:08,869 --> 00:16:13,220
place some some places are going to

00:16:10,489 --> 00:16:14,720
coordinate with all the distros that

00:16:13,220 --> 00:16:16,879
ship out that code some of them are just

00:16:14,720 --> 00:16:18,169
going to post in their forums some of

00:16:16,879 --> 00:16:20,239
them are going to blog about it some of

00:16:18,169 --> 00:16:21,889
them are going to fix it and not really

00:16:20,239 --> 00:16:25,489
even noted in the change log that it was

00:16:21,889 --> 00:16:26,989
a security issue kind of regardless of

00:16:25,489 --> 00:16:29,029
what they do here if you really feel

00:16:26,989 --> 00:16:33,850
that it was a security vulnerability you

00:16:29,029 --> 00:16:36,350
can go to the OSS cyclist it's run by

00:16:33,850 --> 00:16:38,809
the head of the security team from Red

00:16:36,350 --> 00:16:41,299
Hat basically posts the details there

00:16:38,809 --> 00:16:42,860
the little sign of cvd number to it and

00:16:41,299 --> 00:16:44,779
that gets everybody else looking at it

00:16:42,860 --> 00:16:48,799
as a security issue regardless of how

00:16:44,779 --> 00:16:51,589
the upstream author disclosed it and

00:16:48,799 --> 00:16:53,209
then finally if you want to you can

00:16:51,589 --> 00:16:56,209
actually release the proof of concept

00:16:53,209 --> 00:16:57,949
that you that you created it's obviously

00:16:56,209 --> 00:17:00,559
a good idea to wait a little bit after

00:16:57,949 --> 00:17:03,019
the fixed version was released so that

00:17:00,559 --> 00:17:08,929
so that people don't started packing

00:17:03,019 --> 00:17:10,909
those those web applications so again a

00:17:08,929 --> 00:17:13,040
lot of the the problems with the

00:17:10,909 --> 00:17:16,040
responsible disclosure approach

00:17:13,040 --> 00:17:18,320
our that people will basically go silent

00:17:16,040 --> 00:17:20,300
on you all along the way either they

00:17:18,320 --> 00:17:21,800
won't respond when you send the initial

00:17:20,300 --> 00:17:23,360
emails and you're not sure whether or

00:17:21,800 --> 00:17:25,760
not you have a valid email for this

00:17:23,360 --> 00:17:27,260
person or you send them the details and

00:17:25,760 --> 00:17:30,470
then suddenly there's complete silence

00:17:27,260 --> 00:17:33,170
from them you know definitely people

00:17:30,470 --> 00:17:36,620
will want delays and ask for totally

00:17:33,170 --> 00:17:39,620
unreasonable ones i think the longest

00:17:36,620 --> 00:17:45,890
that I've ever waited for a fix was four

00:17:39,620 --> 00:17:47,930
years so I definitely my personal

00:17:45,890 --> 00:17:50,810
process in dealing with this has evolved

00:17:47,930 --> 00:17:52,810
over time to kind of deal with a lot of

00:17:50,810 --> 00:17:57,110
the problems that I've account ered

00:17:52,810 --> 00:17:58,970
working with other upstream authors and

00:17:57,110 --> 00:18:00,470
it's it's also very common that when

00:17:58,970 --> 00:18:02,810
when somebody has a security

00:18:00,470 --> 00:18:05,120
vulnerability in their code they'll sort

00:18:02,810 --> 00:18:08,540
of take it personally and try to

00:18:05,120 --> 00:18:10,400
minimize the the consequences of that

00:18:08,540 --> 00:18:11,780
security vulnerability they won't they

00:18:10,400 --> 00:18:12,920
won't document it as a security

00:18:11,780 --> 00:18:15,380
vulnerability they won't want to get a

00:18:12,920 --> 00:18:18,440
cvd number assigned to it you know a lot

00:18:15,380 --> 00:18:20,930
of the things that help everybody else

00:18:18,440 --> 00:18:23,690
understand that this was a threat to

00:18:20,930 --> 00:18:25,130
their machines and their code bases they

00:18:23,690 --> 00:18:28,910
won't want to take those steps because

00:18:25,130 --> 00:18:30,860
they feel it makes them look bad and

00:18:28,910 --> 00:18:34,520
honestly yeah no credit being given

00:18:30,860 --> 00:18:35,690
that's definitely I like to get credit

00:18:34,520 --> 00:18:37,400
when I want to actually find a

00:18:35,690 --> 00:18:39,590
vulnerability in somebody's product and

00:18:37,400 --> 00:18:42,470
go through all the effort of helping

00:18:39,590 --> 00:18:44,900
them fix it in a responsible way so it

00:18:42,470 --> 00:18:47,570
is it is kind of disappointing when

00:18:44,900 --> 00:18:51,220
after all that effort they don't mention

00:18:47,570 --> 00:18:53,870
you or maybe they even miss attribute it

00:18:51,220 --> 00:18:55,940
so again don't definitely don't start

00:18:53,870 --> 00:18:57,410
the process of looking for

00:18:55,940 --> 00:18:58,400
vulnerabilities and other people's code

00:18:57,410 --> 00:19:01,660
unless you're going to carry it through

00:18:58,400 --> 00:19:01,660
all the way to the finish

00:19:12,389 --> 00:19:17,409
legal retaliation is that is there a

00:19:15,999 --> 00:19:19,869
possibility of legal retaliate

00:19:17,409 --> 00:19:22,210
retaliation definitely it's it's it's

00:19:19,869 --> 00:19:26,139
threatened you know in some cases it is

00:19:22,210 --> 00:19:28,119
threatened I think even with open source

00:19:26,139 --> 00:19:31,299
software that you're not entirely you

00:19:28,119 --> 00:19:32,710
know risk-free in terms of being

00:19:31,299 --> 00:19:35,529
threatened because a lot of a lot of the

00:19:32,710 --> 00:19:37,059
open source software whether it's pearl

00:19:35,529 --> 00:19:38,830
or any other language is actually backed

00:19:37,059 --> 00:19:41,679
by a company and that company has a

00:19:38,830 --> 00:19:44,409
stake in you know the way that it's done

00:19:41,679 --> 00:19:46,779
but I think you know so long as you you

00:19:44,409 --> 00:19:48,820
give them every opportunity to fix their

00:19:46,779 --> 00:19:51,309
stuff in a responsible way you know you

00:19:48,820 --> 00:19:53,259
work with them and don't actively

00:19:51,309 --> 00:19:55,359
hostile the risks of getting sued are

00:19:53,259 --> 00:19:57,249
pretty minimal what's there are a lot of

00:19:55,359 --> 00:19:59,169
groups that are that are interested in

00:19:57,249 --> 00:20:16,330
you know helping defend people if you

00:19:59,169 --> 00:20:20,460
were sued wrongly well that's the

00:20:16,330 --> 00:20:22,600
there's 11 good point i have made so far

00:20:20,460 --> 00:20:25,539
that is that if you find a vulnerability

00:20:22,600 --> 00:20:27,850
so let's say I find a vulnerability you

00:20:25,539 --> 00:20:30,070
know in in cpanel software you know ad

00:20:27,850 --> 00:20:33,609
and I let's imagine I didn't work for

00:20:30,070 --> 00:20:34,899
sea foam but if I found it and I go and

00:20:33,609 --> 00:20:37,359
I go to their demo machines and I

00:20:34,899 --> 00:20:40,749
started packing it right that is a crime

00:20:37,359 --> 00:20:42,460
you know if I'm doing the testing on my

00:20:40,749 --> 00:20:44,379
own machines and that's fine and dandy

00:20:42,460 --> 00:20:46,119
but the second i go to anybody else's

00:20:44,379 --> 00:20:49,059
machine to actually vet that

00:20:46,119 --> 00:20:51,609
vulnerability or you know actively

00:20:49,059 --> 00:20:53,289
exploited it's an attack there was there

00:20:51,609 --> 00:20:54,940
was somebody recently that got in

00:20:53,289 --> 00:20:56,529
trouble for that they had broken into

00:20:54,940 --> 00:20:57,850
somebody some Shane and then after the

00:20:56,529 --> 00:20:58,809
fact they're like oh no I wasn't I

00:20:57,850 --> 00:21:01,450
wasn't trying to break into your machine

00:20:58,809 --> 00:21:03,159
I was trying to test the vulnerabilities

00:21:01,450 --> 00:21:06,489
that I thought were there you know and

00:21:03,159 --> 00:21:09,460
that definitely crosses the line you

00:21:06,489 --> 00:21:11,679
know and especially if we're talking

00:21:09,460 --> 00:21:13,419
about open source code you have access

00:21:11,679 --> 00:21:14,769
to the code you can set up their own

00:21:13,419 --> 00:21:15,760
test environments you know and

00:21:14,769 --> 00:21:19,480
definitely do that don't

00:21:15,760 --> 00:21:21,010
don't go and attack their environments

00:21:19,480 --> 00:21:22,870
because you want to you know

00:21:21,010 --> 00:21:26,790
short-circuit the process of actually

00:21:22,870 --> 00:21:29,860
setting up your own test cases for it so

00:21:26,790 --> 00:21:31,540
okay so my personal work flow whenever I

00:21:29,860 --> 00:21:33,480
want to do a code crawl on some code I

00:21:31,540 --> 00:21:35,550
go and I get the latest release

00:21:33,480 --> 00:21:39,550
generally i don't i don't bother

00:21:35,550 --> 00:21:41,920
actually looking at their get repos or

00:21:39,550 --> 00:21:43,090
mercurial or whatever just because

00:21:41,920 --> 00:21:44,770
they're going to be a little harder to

00:21:43,090 --> 00:21:47,620
find and it doesn't actually matter

00:21:44,770 --> 00:21:51,700
because that's not what you know regular

00:21:47,620 --> 00:21:53,290
end users are actually dealing with so i

00:21:51,700 --> 00:21:57,010
go ahead and check it in to get inside

00:21:53,290 --> 00:21:59,080
my get macros i have a bunch of regular

00:21:57,010 --> 00:22:02,250
expressions to look for different states

00:21:59,080 --> 00:22:04,570
that that happen to interest me and

00:22:02,250 --> 00:22:07,810
generally like the list of sinks that

00:22:04,570 --> 00:22:10,920
i'm looking for are things that to me it

00:22:07,810 --> 00:22:14,230
seems people frequently get wrong and so

00:22:10,920 --> 00:22:15,610
there are there little subtleties in the

00:22:14,230 --> 00:22:18,280
way that they work that that are

00:22:15,610 --> 00:22:20,380
frequently misunderstood so I focus on

00:22:18,280 --> 00:22:22,630
those at first I traced the execution

00:22:20,380 --> 00:22:25,630
backwards and try to find wherever they

00:22:22,630 --> 00:22:33,460
were they were securing that sink oh

00:22:25,630 --> 00:22:38,470
sorry good and what I'm doing none at

00:22:33,460 --> 00:22:42,160
all no no the the question was is like

00:22:38,470 --> 00:22:45,400
in what I do what what will do static

00:22:42,160 --> 00:22:47,140
analyzer display and and my approach to

00:22:45,400 --> 00:22:49,750
it i'm not actually using any static

00:22:47,140 --> 00:22:52,630
analyzers i I think definitely it's a

00:22:49,750 --> 00:22:54,400
good it's a good approach to take while

00:22:52,630 --> 00:22:57,450
you're developing code I mean even

00:22:54,400 --> 00:23:01,450
simple ones like pro critic or very good

00:22:57,450 --> 00:23:03,040
but I instead i'm looking for the things

00:23:01,450 --> 00:23:04,720
that i think are kind of obscuring the

00:23:03,040 --> 00:23:06,040
language and prone to being

00:23:04,720 --> 00:23:10,510
misunderstood by the people who actually

00:23:06,040 --> 00:23:12,880
implemented the application yeah so

00:23:10,510 --> 00:23:14,950
anyway i trace the execution backwards

00:23:12,880 --> 00:23:17,200
if i actually find something that's

00:23:14,950 --> 00:23:18,850
vulnerable due up a proof of concept i

00:23:17,200 --> 00:23:20,680
figured this is essential because i

00:23:18,850 --> 00:23:22,270
don't want to report something to

00:23:20,680 --> 00:23:23,770
somebody and it turns out it's not

00:23:22,270 --> 00:23:24,190
actually vulnerable there's something I

00:23:23,770 --> 00:23:26,919
over

00:23:24,190 --> 00:23:29,799
so the proof of concept really validates

00:23:26,919 --> 00:23:31,990
that there was a vulnerability there if

00:23:29,799 --> 00:23:35,139
I understand the web application enough

00:23:31,990 --> 00:23:36,970
and the scope of the problem is limited

00:23:35,139 --> 00:23:38,950
then I'll go ahead and write up a patch

00:23:36,970 --> 00:23:44,440
send along then go through the

00:23:38,950 --> 00:23:46,149
disclosure process excuse me okay so

00:23:44,440 --> 00:23:48,159
this is kind of a look at some of the

00:23:46,149 --> 00:23:51,580
sinks that that I find kind of

00:23:48,159 --> 00:23:54,490
interesting basically I'm here with the

00:23:51,580 --> 00:23:58,179
the duck one looking for any any sort of

00:23:54,490 --> 00:24:00,370
use of can any use of variables as

00:23:58,179 --> 00:24:03,159
method names you know very frequently

00:24:00,370 --> 00:24:04,929
this is this is on the back end of pearl

00:24:03,159 --> 00:24:06,669
there are a lot of quirks with the way

00:24:04,929 --> 00:24:08,169
this stuff works that people don't

00:24:06,669 --> 00:24:11,139
anticipate when they write this into

00:24:08,169 --> 00:24:14,590
their code and down here you can see my

00:24:11,139 --> 00:24:17,409
might get macros to go through the code

00:24:14,590 --> 00:24:19,480
base looking for these and for instance

00:24:17,409 --> 00:24:23,049
these are some attacks obviously i can

00:24:19,480 --> 00:24:25,720
with a method parameter that specified

00:24:23,049 --> 00:24:27,580
as as as a string variable i can refer

00:24:25,720 --> 00:24:31,529
to totally unrelated packages that are

00:24:27,580 --> 00:24:34,330
loaded I can refer to private methods

00:24:31,529 --> 00:24:36,340
also if they try to sanitize this by

00:24:34,330 --> 00:24:38,289
appending on to the end some versions of

00:24:36,340 --> 00:24:40,840
pearl will allow you to insert an old

00:24:38,289 --> 00:24:45,039
bite into it and strip off whatever they

00:24:40,840 --> 00:24:47,409
did to sanitize it so this is this an

00:24:45,039 --> 00:24:51,779
example one of the duck things that I

00:24:47,409 --> 00:24:55,690
came up with this was in safe safe revo

00:24:51,779 --> 00:24:56,679
basically there is a duck type call in

00:24:55,690 --> 00:24:59,350
there and that's why I started looking

00:24:56,679 --> 00:25:01,269
at it although it the duck typing wasn't

00:24:59,350 --> 00:25:04,899
what was actually vulnerable although

00:25:01,269 --> 00:25:08,950
basically this code is is avoiding all

00:25:04,899 --> 00:25:11,500
of safes opcode mass to you know

00:25:08,950 --> 00:25:14,740
generate a second duct I'd call that

00:25:11,500 --> 00:25:18,309
goes right back into our eval with the

00:25:14,740 --> 00:25:21,000
opcode mass tripped out and so inside of

00:25:18,309 --> 00:25:23,889
safe it can entirely get back to

00:25:21,000 --> 00:25:28,779
unconstrained execution I this one was

00:25:23,889 --> 00:25:31,750
fixed in safe 235 I didn't actually

00:25:28,779 --> 00:25:33,070
follow for a CVT on this one is really

00:25:31,750 --> 00:25:35,529
reading the

00:25:33,070 --> 00:25:37,659
the documentation for safe it does say

00:25:35,529 --> 00:25:39,789
that it's not really safe you know I

00:25:37,659 --> 00:25:42,580
don't know exactly what else you use it

00:25:39,789 --> 00:25:44,950
for if if you're running code that you

00:25:42,580 --> 00:25:47,830
trust to begin with but I mean I

00:25:44,950 --> 00:25:50,049
personally if if the upstream author is

00:25:47,830 --> 00:25:53,620
really insistent that it shouldn't have

00:25:50,049 --> 00:25:55,600
been capable of doing this even then

00:25:53,620 --> 00:25:58,929
I'll kind of go with it you know i will

00:25:55,600 --> 00:26:01,600
fight people too much it's a second

00:25:58,929 --> 00:26:05,620
example this is low-cal make text before

00:26:01,600 --> 00:26:08,710
one two three and basically and make

00:26:05,620 --> 00:26:10,059
text you can you can do these make types

00:26:08,710 --> 00:26:11,320
functions that could have been in any

00:26:10,059 --> 00:26:13,899
package they don't have to have anything

00:26:11,320 --> 00:26:15,970
at all to do with make text so any other

00:26:13,899 --> 00:26:18,309
module that's loaded up you could feed

00:26:15,970 --> 00:26:23,220
you know data into it so long as you can

00:26:18,309 --> 00:26:25,960
control the make text format string and

00:26:23,220 --> 00:26:27,519
yeah this this was removed from make

00:26:25,960 --> 00:26:29,019
text because it just made no sense even

00:26:27,519 --> 00:26:34,769
the comment state it doesn't make any

00:26:29,019 --> 00:26:38,019
sense so as the second type of sync eval

00:26:34,769 --> 00:26:41,740
because safe is has been said to not

00:26:38,019 --> 00:26:44,549
actually be safe for containing code

00:26:41,740 --> 00:26:46,870
then I consider any use of r eval in

00:26:44,549 --> 00:26:50,679
user-supplied stuff to also be a

00:26:46,870 --> 00:26:52,929
vulnerability and let's see some

00:26:50,679 --> 00:26:56,169
examples okay yeah there's another one

00:26:52,929 --> 00:26:58,750
and make text again with version 1 2 3

00:26:56,169 --> 00:26:59,740
it was assigned to the same CV you

00:26:58,750 --> 00:27:01,600
actually look at the compile function

00:26:59,740 --> 00:27:03,820
and make text does a lot of a lot of

00:27:01,600 --> 00:27:05,980
different string processing one things

00:27:03,820 --> 00:27:07,990
that didn't do was handle backslashes

00:27:05,980 --> 00:27:10,269
before the comma correctly and that

00:27:07,990 --> 00:27:12,750
ended up in the middle of this vowel

00:27:10,269 --> 00:27:15,970
that would just join it all together

00:27:12,750 --> 00:27:18,399
this ended up you know causing problems

00:27:15,970 --> 00:27:20,350
not only in cpanel but in phos wiki and

00:27:18,399 --> 00:27:22,690
twiggy which they have heavily

00:27:20,350 --> 00:27:24,970
constrained use of make text but this

00:27:22,690 --> 00:27:27,759
still jumped through it and for some

00:27:24,970 --> 00:27:31,240
reason I'm not exactly sure why but faas

00:27:27,759 --> 00:27:32,919
wiki and twix II got tagged with CVS for

00:27:31,240 --> 00:27:34,059
this which didn't make any sense to me

00:27:32,919 --> 00:27:39,610
because the problems clearly is in

00:27:34,059 --> 00:27:42,460
locale make text him so another one any

00:27:39,610 --> 00:27:44,260
any type of exact you know so exact

00:27:42,460 --> 00:27:46,300
system QX I

00:27:44,260 --> 00:28:05,230
I really need to add open checks for

00:27:46,300 --> 00:28:07,090
this because open is generally yes oh oh

00:28:05,230 --> 00:28:10,090
well no that was my injection actually

00:28:07,090 --> 00:28:13,060
so the backtick bits Lee yeah this is

00:28:10,090 --> 00:28:16,390
breaking out of the misleads that

00:28:13,060 --> 00:28:19,240
avowals putting together a string code

00:28:16,390 --> 00:28:21,580
right and then basically buyback

00:28:19,240 --> 00:28:23,980
slashing before the comma it breaks out

00:28:21,580 --> 00:28:26,200
of there there ring a bell and then I

00:28:23,980 --> 00:28:34,090
can just do any Broco to want right

00:28:26,200 --> 00:28:36,730
there yeah okay yeah so another think I

00:28:34,090 --> 00:28:38,920
look for is exact any type of any type

00:28:36,730 --> 00:28:41,590
of exact this tends to not actually be

00:28:38,920 --> 00:28:42,730
very common in most web apps generally

00:28:41,590 --> 00:28:45,940
they're not running all that many sub

00:28:42,730 --> 00:28:47,590
processes since since i work for cpanel

00:28:45,940 --> 00:28:49,780
we run a lot of sub processes you know

00:28:47,590 --> 00:28:54,280
and it's much more important in our

00:28:49,780 --> 00:29:01,150
context you know and I got my slides my

00:28:54,280 --> 00:29:04,060
scope that's beautiful okay yeah all

00:29:01,150 --> 00:29:09,880
right well totally messed up my slides

00:29:04,060 --> 00:29:15,760
okay well slide not appearing here is

00:29:09,880 --> 00:29:18,730
another type of sync for IDs and as far

00:29:15,760 --> 00:29:21,460
as UID and GID changes they are very

00:29:18,730 --> 00:29:23,740
confusing inside a Perl code basically

00:29:21,460 --> 00:29:27,040
there are three IDs that are that are in

00:29:23,740 --> 00:29:29,290
operation on you know on a normal Linux

00:29:27,040 --> 00:29:31,810
system you have your effect of your real

00:29:29,290 --> 00:29:34,840
interstate right well only has variables

00:29:31,810 --> 00:29:38,620
for two of those and on top of that when

00:29:34,840 --> 00:29:40,380
you come to G IDs your real or know your

00:29:38,620 --> 00:29:43,090
effective GID also includes your

00:29:40,380 --> 00:29:45,130
supplemental groups and the way that you

00:29:43,090 --> 00:29:47,440
write all this stuff up is quite

00:29:45,130 --> 00:29:51,299
convoluted very frequently people are

00:29:47,440 --> 00:29:56,159
getting it wrong so one example of

00:29:51,299 --> 00:29:57,269
ids is this code from fcgi spawn and

00:29:56,159 --> 00:30:00,169
does everybody know what the

00:29:57,269 --> 00:30:00,169
vulnerability is here

00:30:09,980 --> 00:30:18,120
we're very much it's a virtually well

00:30:15,650 --> 00:30:20,280
well it's it yeah i mean that's that's

00:30:18,120 --> 00:30:28,230
the group namely gets applied to it but

00:30:20,280 --> 00:30:30,000
okay you know what is brian this well

00:30:28,230 --> 00:30:40,470
because it was trying to drop your

00:30:30,000 --> 00:30:42,450
privileges i know right right that's

00:30:40,470 --> 00:30:44,460
that's not fly yeah any anytime you're

00:30:42,450 --> 00:30:46,710
you're doing the effective gid you have

00:30:44,460 --> 00:30:48,390
to also set the supplemental groups that

00:30:46,710 --> 00:30:51,480
same point less you're going to use

00:30:48,390 --> 00:30:53,669
POSIX to set them independently it's

00:30:51,480 --> 00:30:55,400
it's very confusing to people until

00:30:53,669 --> 00:30:59,160
they've actually run into it a few times

00:30:55,400 --> 00:31:03,210
you know but the simple way is instead

00:30:59,160 --> 00:31:05,700
of having you know just be GID here then

00:31:03,210 --> 00:31:07,110
it's a string with gid GID in it and

00:31:05,700 --> 00:31:11,880
that wipes out the supplemental groups

00:31:07,110 --> 00:31:16,290
at the same time the next one that was

00:31:11,880 --> 00:31:18,540
not fixed okay yeah unfortunately I a

00:31:16,290 --> 00:31:22,200
lot of the ones i wanted to show didn't

00:31:18,540 --> 00:31:24,179
actually get fixed so temp temp is

00:31:22,200 --> 00:31:27,030
another thing that is is insanely

00:31:24,179 --> 00:31:29,130
confusing to programmers to deal with

00:31:27,030 --> 00:31:31,110
not just for programmers programmers in

00:31:29,130 --> 00:31:34,380
every language have real difficulties

00:31:31,110 --> 00:31:37,049
dealing with temp a lot of developers

00:31:34,380 --> 00:31:39,030
are used to the idea that the system is

00:31:37,049 --> 00:31:40,919
entirely locked down the only access the

00:31:39,030 --> 00:31:42,960
system is through the web front-end

00:31:40,919 --> 00:31:45,630
itself so they write their code with

00:31:42,960 --> 00:31:47,250
this expectation the reality though is

00:31:45,630 --> 00:31:49,080
especially if you're doing a sea fan

00:31:47,250 --> 00:31:51,270
module you have no idea whether it's on

00:31:49,080 --> 00:31:53,400
the shared server or a completely

00:31:51,270 --> 00:31:55,169
secured server so whenever you're

00:31:53,400 --> 00:31:56,730
dealing with the temp directory you have

00:31:55,169 --> 00:31:58,320
to be very careful about what's going on

00:31:56,730 --> 00:32:04,110
there because every user on the server

00:31:58,320 --> 00:32:06,690
can write to it yeah yeah so basically

00:32:04,110 --> 00:32:08,580
like for my purposes anytime anybody is

00:32:06,690 --> 00:32:11,010
writing to temp I figure that suspect

00:32:08,580 --> 00:32:11,879
and i need to actually look at it you

00:32:11,010 --> 00:32:14,449
know

00:32:11,879 --> 00:32:19,319
there's one example attempt this was a

00:32:14,449 --> 00:32:21,809
par make par packer yeah and this one I

00:32:19,319 --> 00:32:24,839
found I found this one in RT because I

00:32:21,809 --> 00:32:27,269
hadn't really gotten you know totally on

00:32:24,839 --> 00:32:30,259
board with private disclosure first but

00:32:27,269 --> 00:32:34,289
in RT he had written you wrote back that

00:32:30,259 --> 00:32:38,459
basically yeah it was on the sysadmin to

00:32:34,289 --> 00:32:41,009
secure his module hey and I filed the

00:32:38,459 --> 00:32:44,399
cvd on it you know and then in a gothic

00:32:41,009 --> 00:32:48,629
so that's good another example will

00:32:44,399 --> 00:32:50,099
parallel fork manager this one in an

00:32:48,629 --> 00:32:52,349
update to parallel fork manager it

00:32:50,099 --> 00:32:55,139
started serializing data from the child

00:32:52,349 --> 00:32:57,479
processes parent ones and it was writing

00:32:55,139 --> 00:32:59,549
a listen to temp it was I think the

00:32:57,479 --> 00:33:01,199
script name with the process ID

00:32:59,549 --> 00:33:02,909
obviously the script name and the

00:33:01,199 --> 00:33:05,789
process ID are known to everybody on the

00:33:02,909 --> 00:33:07,499
system so they could take over that they

00:33:05,789 --> 00:33:10,679
could write whatever files they want

00:33:07,499 --> 00:33:12,649
they can inject whatever return values

00:33:10,679 --> 00:33:17,459
they want back to the original process

00:33:12,649 --> 00:33:19,169
that but also was fixed very recently so

00:33:17,459 --> 00:33:22,349
another sink I find it really

00:33:19,169 --> 00:33:26,249
interesting is any sort of you know any

00:33:22,349 --> 00:33:28,619
sort of DC realization of data so any

00:33:26,249 --> 00:33:31,769
storable loads Andy Gamal loads in the

00:33:28,619 --> 00:33:34,229
XML there are a lot of attacks against

00:33:31,769 --> 00:33:37,259
these things XML in particular a wasp

00:33:34,229 --> 00:33:38,819
site has you know great examples of all

00:33:37,259 --> 00:33:41,699
the different nastiness you can do with

00:33:38,819 --> 00:33:43,949
XML and new ones are being discovered

00:33:41,699 --> 00:33:46,889
all the time there was a UH no SS sec

00:33:43,949 --> 00:33:48,690
recently there was another algorithmic

00:33:46,889 --> 00:33:51,059
complexity attack against sexin though

00:33:48,690 --> 00:33:53,309
and all the XML parser had to be updated

00:33:51,059 --> 00:33:56,129
again so just generally speaking if

00:33:53,309 --> 00:33:58,289
you're taking XML inputs from the

00:33:56,129 --> 00:34:00,479
outside you're probably going to be

00:33:58,289 --> 00:34:02,099
doing it wrong and definitely if you're

00:34:00,479 --> 00:34:04,829
taking storable inputs from the outside

00:34:02,099 --> 00:34:06,959
you are doing it wrong because storable

00:34:04,829 --> 00:34:12,659
is you know documented as being

00:34:06,959 --> 00:34:16,409
completely unsafe for for use on user

00:34:12,659 --> 00:34:19,619
side supplied data so these are these

00:34:16,409 --> 00:34:22,470
are some recent ones basically after

00:34:19,619 --> 00:34:25,110
after the Pearl security team added the

00:34:22,470 --> 00:34:26,400
notice about storable being unsafe

00:34:25,110 --> 00:34:29,910
you all know what I'm talking about

00:34:26,400 --> 00:34:31,680
probably not but anyway yeah recently

00:34:29,910 --> 00:34:33,630
the Pearl security team added a notice

00:34:31,680 --> 00:34:37,110
that said never take storable from an

00:34:33,630 --> 00:34:38,550
untrusted source the real obvious things

00:34:37,110 --> 00:34:41,700
you can do with it you can do a local

00:34:38,550 --> 00:34:44,970
file inclusion on on any path using

00:34:41,700 --> 00:34:47,130
storable you can also you know create

00:34:44,970 --> 00:34:48,330
objects and manipulate their internals

00:34:47,130 --> 00:34:52,110
so that when they destroy themselves

00:34:48,330 --> 00:34:53,700
they're going to do nasty things so the

00:34:52,110 --> 00:34:55,260
longer the short is you're not allowed

00:34:53,700 --> 00:34:57,990
to use storable on anything that the

00:34:55,260 --> 00:34:59,820
user-supplied too and there are a bunch

00:34:57,990 --> 00:35:02,790
of Sipan modules that do exactly that

00:34:59,820 --> 00:35:06,420
these three take cookie data pump it

00:35:02,790 --> 00:35:08,010
into storable fall and so any any web

00:35:06,420 --> 00:35:11,400
app that was built on top of these is

00:35:08,010 --> 00:35:13,080
vulnerable as a result lets you have

00:35:11,400 --> 00:35:17,460
some more examples of those that are

00:35:13,080 --> 00:35:23,730
unfortunately not fixed okay another one

00:35:17,460 --> 00:35:24,930
I 18 in 4s printf and printf these are

00:35:23,730 --> 00:35:26,700
traditional format string

00:35:24,930 --> 00:35:28,800
vulnerabilities if there's right

00:35:26,700 --> 00:35:31,410
documentation on this most of it focuses

00:35:28,800 --> 00:35:33,540
on the sea implementations of printf and

00:35:31,410 --> 00:35:36,150
esper enough but basically if you take

00:35:33,540 --> 00:35:38,100
any data from the user and use it as the

00:35:36,150 --> 00:35:40,830
format string in print f-4s print off

00:35:38,100 --> 00:35:42,720
then and see they it's arbitrary code

00:35:40,830 --> 00:35:45,840
execution they can they can run code

00:35:42,720 --> 00:35:47,490
straight through printf in Perl you

00:35:45,840 --> 00:35:49,590
can't run code through it but you can

00:35:47,490 --> 00:35:51,390
assign to the variables that are used as

00:35:49,590 --> 00:35:53,310
arguments so you can either set them to

00:35:51,390 --> 00:35:56,910
true or false after they go through

00:35:53,310 --> 00:35:58,410
through print FRS print so basically

00:35:56,910 --> 00:36:01,190
like what I'm what I'm looking for there

00:35:58,410 --> 00:36:04,560
is any any sort of use of user-supplied

00:36:01,190 --> 00:36:06,570
format strings with make tags you know

00:36:04,560 --> 00:36:08,910
it's already pointed out make text has a

00:36:06,570 --> 00:36:10,680
lot of problems so anybody building on

00:36:08,910 --> 00:36:12,810
top of miktex I go and look at their

00:36:10,680 --> 00:36:14,430
code very carefully and basically any

00:36:12,810 --> 00:36:15,540
other type of localization they're doing

00:36:14,430 --> 00:36:19,260
also it needs to be looked at carefully

00:36:15,540 --> 00:36:21,270
it with with localization most

00:36:19,260 --> 00:36:23,900
developers trying to be very generous

00:36:21,270 --> 00:36:26,640
and in supporting everything they try to

00:36:23,900 --> 00:36:29,670
accept translations from sources that

00:36:26,640 --> 00:36:32,100
are not entirely trusted and so

00:36:29,670 --> 00:36:35,310
frequently it does bad things in the

00:36:32,100 --> 00:36:36,180
localization systems this is a recent

00:36:35,310 --> 00:36:40,880
one I found

00:36:36,180 --> 00:36:44,309
in ye BB which is a pull web forums

00:36:40,880 --> 00:36:47,990
basically when you're not logged in you

00:36:44,309 --> 00:36:50,760
can set a guest language cookie and then

00:36:47,990 --> 00:36:52,950
it doesn't sanitize what whatever the

00:36:50,760 --> 00:36:56,520
language you set was and in other

00:36:52,950 --> 00:36:59,880
subsystems you can get get files that

00:36:56,520 --> 00:37:02,069
are based on that language as a path so

00:36:59,880 --> 00:37:03,690
here's here's an example attacking you

00:37:02,069 --> 00:37:06,300
you basically Traverse out of that

00:37:03,690 --> 00:37:07,859
directory go to another one stick an old

00:37:06,300 --> 00:37:12,510
bite on the end strip off everything

00:37:07,859 --> 00:37:14,010
after the language and and ye BB also

00:37:12,510 --> 00:37:16,230
allows you to upload files to

00:37:14,010 --> 00:37:20,609
predictable locations so it's complete

00:37:16,230 --> 00:37:24,420
and and attack on their stuff that's

00:37:20,609 --> 00:37:26,880
another another translation system one

00:37:24,420 --> 00:37:29,700
this was in phos wiki and quickie after

00:37:26,880 --> 00:37:31,079
after a Bay got tagged for the original

00:37:29,700 --> 00:37:32,520
make text vulnerabilities i went back

00:37:31,079 --> 00:37:35,550
and look at their code a little further

00:37:32,520 --> 00:37:37,579
and they bought swing at wiki actually

00:37:35,550 --> 00:37:40,079
limit which make text tags you can use

00:37:37,579 --> 00:37:41,670
and so they escaped your make text

00:37:40,079 --> 00:37:44,490
string wherever it's something that's

00:37:41,670 --> 00:37:46,799
not within their allowed subset but

00:37:44,490 --> 00:37:49,829
they're escaping was was a pretty messed

00:37:46,799 --> 00:37:51,359
up you would double the make text escape

00:37:49,829 --> 00:37:55,020
sequence and it would go right past

00:37:51,359 --> 00:37:56,339
their stuff after so there's some some

00:37:55,020 --> 00:37:59,190
other things like I I'm not really

00:37:56,339 --> 00:38:00,510
looking much SQL I I do actually go

00:37:59,190 --> 00:38:03,180
through and look at most open calls

00:38:00,510 --> 00:38:04,740
especially to argument open calls by and

00:38:03,180 --> 00:38:06,750
large if it's somebody's writing to

00:38:04,740 --> 00:38:08,700
argument open calls they have you know

00:38:06,750 --> 00:38:11,040
shell command injections in their code

00:38:08,700 --> 00:38:14,280
unless they just were either really

00:38:11,040 --> 00:38:18,390
lucky or really good I haven't looked

00:38:14,280 --> 00:38:20,430
very much excess injections but i bet

00:38:18,390 --> 00:38:23,700
you there's plenty of them out there you

00:38:20,430 --> 00:38:26,880
know and so that's really the point of

00:38:23,700 --> 00:38:29,750
all this is you know go and have fun and

00:38:26,880 --> 00:38:32,549
break into other people's code you know

00:38:29,750 --> 00:38:34,079
and definitely you should you should

00:38:32,549 --> 00:38:36,359
learn something in the process you know

00:38:34,079 --> 00:38:37,829
go if you take away nothing at all from

00:38:36,359 --> 00:38:39,359
this other than how difficult it is to

00:38:37,829 --> 00:38:41,990
disclose and that you should go to a

00:38:39,359 --> 00:38:44,000
wasp and read through all of their their

00:38:41,990 --> 00:38:47,420
attack

00:38:44,000 --> 00:38:50,480
no pages then definitely those are those

00:38:47,420 --> 00:38:53,630
are good things to take away and then

00:38:50,480 --> 00:38:55,760
finally there's some links for the OWASP

00:38:53,630 --> 00:38:57,650
code review guidelines they have a

00:38:55,760 --> 00:39:00,650
testing guidelines they have actually

00:38:57,650 --> 00:39:01,910
tons of stuff on it looks like you know

00:39:00,650 --> 00:39:05,360
when one other thing I should say about

00:39:01,910 --> 00:39:08,180
a wasp if you actually go to the OWASP

00:39:05,360 --> 00:39:09,830
meetings in your particular city you'll

00:39:08,180 --> 00:39:11,600
find that most of the people at a wasp

00:39:09,830 --> 00:39:13,670
are not actually software developers

00:39:11,600 --> 00:39:15,230
they tend to be pen testers instead and

00:39:13,670 --> 00:39:17,570
so they're coming at it from a very

00:39:15,230 --> 00:39:19,460
different perspective you know and

00:39:17,570 --> 00:39:22,400
instead of trying to build secure

00:39:19,460 --> 00:39:26,150
software they're trying to you know tear

00:39:22,400 --> 00:39:28,190
holes in it but it's it's very useful

00:39:26,150 --> 00:39:29,540
thing to meet these people and look at

00:39:28,190 --> 00:39:32,420
the types of things they're actually

00:39:29,540 --> 00:39:34,940
trying to to accomplish and the tools

00:39:32,420 --> 00:39:39,410
that they're using also for traditional

00:39:34,940 --> 00:39:41,540
XSS and excess RF stuff the pen testers

00:39:39,410 --> 00:39:43,160
have great tools for those things much

00:39:41,540 --> 00:39:45,140
better than then actually looking at the

00:39:43,160 --> 00:39:46,670
source code they can automate you know

00:39:45,140 --> 00:39:49,610
iterating through these things looking

00:39:46,670 --> 00:39:51,260
for problems you know and definitely

00:39:49,610 --> 00:39:54,800
there there are lots of companies of the

00:39:51,260 --> 00:40:04,970
out there that can help you also so it's

00:39:54,800 --> 00:40:09,140
all I got any questions comments yes

00:40:04,970 --> 00:40:11,180
definitely the as far as patterns and

00:40:09,140 --> 00:40:13,700
code that make it very difficult to

00:40:11,180 --> 00:40:15,110
attack the most obvious is that whenever

00:40:13,700 --> 00:40:18,860
you're taking any input from the user

00:40:15,110 --> 00:40:20,690
you you limit the scope of rather than

00:40:18,860 --> 00:40:22,910
looking for bad things that they might

00:40:20,690 --> 00:40:26,450
feed in you only look for what would be

00:40:22,910 --> 00:40:29,660
the good thing so rather than sanitizing

00:40:26,450 --> 00:40:31,730
out the double dots and the slashes from

00:40:29,660 --> 00:40:33,990
from what they're feeding into you you

00:40:31,730 --> 00:40:36,060
know you know that this should just be a

00:40:33,990 --> 00:40:38,070
a to z that's all it should be it has to

00:40:36,060 --> 00:40:42,720
be a number you know that's all that

00:40:38,070 --> 00:40:47,040
you're going to allow through right yeah

00:40:42,720 --> 00:40:48,720
that bad is in fact code bases that to

00:40:47,040 --> 00:40:51,240
me seemed like they should have been

00:40:48,720 --> 00:40:53,640
explodable like that I looked at act

00:40:51,240 --> 00:40:54,900
quite a bit and I to be honest I their

00:40:53,640 --> 00:40:56,280
way the way that it's written and

00:40:54,900 --> 00:40:58,650
organized I really figured i would find

00:40:56,280 --> 00:41:00,690
an exploit in it but I didn't because at

00:40:58,650 --> 00:41:02,700
every step where I figured I would find

00:41:00,690 --> 00:41:06,030
one they were doing that exact type of

00:41:02,700 --> 00:41:08,040
filter not not say that there are no

00:41:06,030 --> 00:41:10,880
exploits in Act I sister side I couldn't

00:41:08,040 --> 00:41:17,430
find one the way it was written yeah

00:41:10,880 --> 00:41:20,869
anyway other questions or comments oh

00:41:17,430 --> 00:41:20,869
okay sorry yeah

00:41:28,349 --> 00:41:36,599
I you know I have I ok the question was

00:41:33,329 --> 00:41:38,130
whether like whether i have an automated

00:41:36,599 --> 00:41:41,519
tool to look for these type of

00:41:38,130 --> 00:41:45,930
vulnerabilities and I do have a back pen

00:41:41,519 --> 00:41:48,269
mirror or a ya back pen and Sipan mirror

00:41:45,930 --> 00:41:49,799
set up and I have wanted to actually

00:41:48,269 --> 00:41:52,079
have it go through and automatically

00:41:49,799 --> 00:41:54,479
flag whenever a new one comes up the

00:41:52,079 --> 00:41:56,099
problem though is that for sea pen in

00:41:54,479 --> 00:41:58,319
particular there's so much code there

00:41:56,099 --> 00:42:00,359
and it gets updated so frequently it'd

00:41:58,319 --> 00:42:03,059
be very difficult actually that all the

00:42:00,359 --> 00:42:07,440
results that come out of it with with

00:42:03,059 --> 00:42:11,819
the particular you know sink full reps

00:42:07,440 --> 00:42:13,319
that I'm doing anyone pull module or web

00:42:11,819 --> 00:42:15,029
app is going to come up with lots and

00:42:13,319 --> 00:42:16,710
lots of results that that I have to go

00:42:15,029 --> 00:42:20,819
through one by one and actually vet them

00:42:16,710 --> 00:42:23,519
I i think really like in terms of

00:42:20,819 --> 00:42:25,109
overall improvements really extending

00:42:23,519 --> 00:42:26,900
pole critic to cover a lot more the

00:42:25,109 --> 00:42:29,190
stuff would would be a very good thing

00:42:26,900 --> 00:42:31,380
and in fact like a lot of the warnings

00:42:29,190 --> 00:42:33,180
to come out of pearl critic they they

00:42:31,380 --> 00:42:35,489
seem like they're stylistic but in fact

00:42:33,180 --> 00:42:36,869
they may they may indicate that there's

00:42:35,489 --> 00:42:38,819
something more substantial in the way

00:42:36,869 --> 00:42:42,859
you're actually writing your code you

00:42:38,819 --> 00:42:42,859
know yes

00:42:43,060 --> 00:42:47,830
beginning you are we talking about waste

00:42:45,700 --> 00:42:50,980
by security code whether there's good

00:42:47,830 --> 00:42:53,650
nice working on where to we're going to

00:42:50,980 --> 00:43:00,490
learn be the kinds of patterns to

00:42:53,650 --> 00:43:03,490
YouTube yes in fact so the question was

00:43:00,490 --> 00:43:05,470
are there any good resources for you

00:43:03,490 --> 00:43:07,570
know focusing instead on instead of

00:43:05,470 --> 00:43:10,150
finding vulnerabilities focus instead on

00:43:07,570 --> 00:43:12,520
building secure web applications and

00:43:10,150 --> 00:43:15,010
applications in journal and definitely

00:43:12,520 --> 00:43:18,370
there are good resources loss actually

00:43:15,010 --> 00:43:20,020
has a nice book both on integrating

00:43:18,370 --> 00:43:22,090
security into the software development

00:43:20,020 --> 00:43:24,940
lifecycle and in in structuring your

00:43:22,090 --> 00:43:28,870
code to be more secure to begin with a

00:43:24,940 --> 00:43:31,450
lot of it there it's it's it's not going

00:43:28,870 --> 00:43:33,160
to be specific things to do or not to do

00:43:31,450 --> 00:43:35,620
but instead just the the way that you

00:43:33,160 --> 00:43:38,370
approach the problems and that's that's

00:43:35,620 --> 00:43:40,690
where it's difficult frequently to get

00:43:38,370 --> 00:43:42,250
to get people to change the way that

00:43:40,690 --> 00:43:44,200
they're working so that they can they

00:43:42,250 --> 00:43:46,480
can build more secure software to begin

00:43:44,200 --> 00:43:48,160
with is because they have to sort of

00:43:46,480 --> 00:43:51,370
rethink their starting points a little

00:43:48,160 --> 00:43:54,400
bit i won one interesting thing to note

00:43:51,370 --> 00:43:56,410
though like Microsoft and Adobe used to

00:43:54,400 --> 00:43:58,240
get completely torn up on all the

00:43:56,410 --> 00:44:01,140
vulnerabilities in their software I mean

00:43:58,240 --> 00:44:04,360
they still do from time to time but

00:44:01,140 --> 00:44:06,310
their approach is has shifted so instead

00:44:04,360 --> 00:44:07,390
of looking for vulnerabilities and

00:44:06,310 --> 00:44:09,670
mitigating specific vulnerabilities

00:44:07,390 --> 00:44:12,250
instead we're trying to build software

00:44:09,670 --> 00:44:15,880
that that has you know numerous layers

00:44:12,250 --> 00:44:18,550
in it so that like like the web browsers

00:44:15,880 --> 00:44:21,130
whenever they do the end-to-end exploit

00:44:18,550 --> 00:44:22,810
of chrome if the piece together 20

00:44:21,130 --> 00:44:26,740
different vulnerabilities to actually

00:44:22,810 --> 00:44:28,870
complete it all the way which is it's

00:44:26,740 --> 00:44:30,370
it's amazing that people can actually do

00:44:28,870 --> 00:44:32,020
that but it's also very unlikely

00:44:30,370 --> 00:44:42,310
somebody's going to stumble across that

00:44:32,020 --> 00:44:43,850
you know yes so even a few of these

00:44:42,310 --> 00:44:46,760
vulnerabilities automate

00:44:43,850 --> 00:44:49,040
you're off ability to audit them and

00:44:46,760 --> 00:44:51,140
could integrate the secant even if you

00:44:49,040 --> 00:44:55,490
couldn't keep up with the onslaught

00:44:51,140 --> 00:44:57,980
that's being a flirt Sipan being able to

00:44:55,490 --> 00:44:59,570
look at tags on a particular version I

00:44:57,980 --> 00:45:02,120
might choose to go back three versions

00:44:59,570 --> 00:45:05,390
offer the bleeding edge just because i

00:45:02,120 --> 00:45:08,510
didn't knew that it has that automation

00:45:05,390 --> 00:45:10,160
audience I don't know what all will be

00:45:08,510 --> 00:45:18,100
involved in integrating all that

00:45:10,160 --> 00:45:21,050
together but surely you have ya know I

00:45:18,100 --> 00:45:23,570
so they come in as is just that you know

00:45:21,050 --> 00:45:25,040
automating the lookups even if even if

00:45:23,570 --> 00:45:27,980
they can't be vetted would still be

00:45:25,040 --> 00:45:30,590
useful information and I I definitely

00:45:27,980 --> 00:45:32,990
agree to flip side of that though is

00:45:30,590 --> 00:45:34,820
that a lot of the vulnerabilities I've

00:45:32,990 --> 00:45:37,040
reported against steep encode they don't

00:45:34,820 --> 00:45:39,770
get fixed until long after they're

00:45:37,040 --> 00:45:41,960
actually reported it's it's unfortunate

00:45:39,770 --> 00:45:46,040
but Sipan has no secure channel to

00:45:41,960 --> 00:45:48,440
report things as know you know central

00:45:46,040 --> 00:45:50,390
authority to sort of decide that they're

00:45:48,440 --> 00:45:51,800
going to fix your software despite you

00:45:50,390 --> 00:45:57,680
know the fact that you don't you don't

00:45:51,800 --> 00:45:59,660
feel like fixing it and so there's also

00:45:57,680 --> 00:46:01,910
no weight of tagging it so like I can't

00:45:59,660 --> 00:46:04,190
even when I open on RT I can't say that

00:46:01,910 --> 00:46:05,780
this is a security issue I can tag it as

00:46:04,190 --> 00:46:07,430
critical but that's about that's what

00:46:05,780 --> 00:46:09,920
all I can do with it and I'm

00:46:07,430 --> 00:46:11,840
realistically when you go to download a

00:46:09,920 --> 00:46:13,460
Sipan module do you open up RT and see

00:46:11,840 --> 00:46:16,760
how many critical reports it has against

00:46:13,460 --> 00:46:20,060
it no probably probably not some people

00:46:16,760 --> 00:46:21,980
may very well do this but by and large

00:46:20,060 --> 00:46:24,920
it doesn't seem to be the norm you know

00:46:21,980 --> 00:46:27,020
I I think there's a lot more that could

00:46:24,920 --> 00:46:30,140
be done with Sipan to sort of improve it

00:46:27,020 --> 00:46:32,390
from from this perspective there is also

00:46:30,140 --> 00:46:34,190
a lot of really ancient code on Sipan

00:46:32,390 --> 00:46:36,890
that's written with really ancient

00:46:34,190 --> 00:46:39,770
conventions and it's not clear when you

00:46:36,890 --> 00:46:41,990
go to the search interfaces that this

00:46:39,770 --> 00:46:45,650
code is vastly out of date and shouldn't

00:46:41,990 --> 00:46:48,200
be used they in fact several of the

00:46:45,650 --> 00:46:49,760
the CVS that I've gotten against sefa

00:46:48,200 --> 00:46:51,980
encoder again stuff that is entirely

00:46:49,760 --> 00:46:54,049
unmaintained so no one will ever fix

00:46:51,980 --> 00:46:58,579
those they're just they're just sitting

00:46:54,049 --> 00:47:00,589
in there documented you know I think

00:46:58,579 --> 00:47:03,160
that we're out of time right yeah well

00:47:00,589 --> 00:47:03,160

YouTube URL: https://www.youtube.com/watch?v=zzGaFyUmbsw


