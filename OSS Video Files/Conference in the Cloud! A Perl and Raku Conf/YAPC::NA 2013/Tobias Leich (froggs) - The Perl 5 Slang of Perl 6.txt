Title: Tobias Leich (froggs) - The Perl 5 Slang of Perl 6
Publication date: 2013-08-20
Playlist: YAPC::NA 2013
Description: 
	
Captions: 
	00:00:00,050 --> 00:00:07,259
okay i think i'm going to start it's 9am

00:00:04,790 --> 00:00:10,050
as you may have read in the schedule

00:00:07,259 --> 00:00:14,700
this talk is about the pro/5 slang of

00:00:10,050 --> 00:00:20,699
course six before I start explain what

00:00:14,700 --> 00:00:26,189
the pro/5 slang is I just want to segue

00:00:20,699 --> 00:00:30,660
I'm my nickname is flocks my first name

00:00:26,189 --> 00:00:34,890
is Tobias and like 20 minutes ago I got

00:00:30,660 --> 00:00:43,590
this one these are my two sons and my

00:00:34,890 --> 00:00:49,890
wife and yeah okay the power of hype

00:00:43,590 --> 00:00:54,829
slang it is actual actually a module for

00:00:49,890 --> 00:00:59,160
entropy and thrown 6 which allows you

00:00:54,829 --> 00:01:01,910
things to do like this you can have you

00:00:59,160 --> 00:01:04,909
can start with the pro/5 language

00:01:01,910 --> 00:01:08,850
declare variables for example and

00:01:04,909 --> 00:01:12,740
declare blocks where can say that you

00:01:08,850 --> 00:01:12,740
want to switch to the pro/5 language

00:01:13,070 --> 00:01:20,420
this example is pretty easy it just

00:01:16,140 --> 00:01:23,040
takes this variable and the pro/5

00:01:20,420 --> 00:01:29,640
special variable which would be invented

00:01:23,040 --> 00:01:33,380
in pro 6 and Prince just headed to

00:01:29,640 --> 00:01:33,380
buyers from Phoenix for example

00:01:35,520 --> 00:01:42,119
this would be a more common case I think

00:01:38,229 --> 00:01:45,399
that you have some sort of the five code

00:01:42,119 --> 00:01:48,700
that you just don't want to touch for

00:01:45,399 --> 00:01:51,729
example this records you don't mind want

00:01:48,700 --> 00:01:56,560
to rewrite it again so we can just do it

00:01:51,729 --> 00:02:01,319
in in the block or as the as the first

00:01:56,560 --> 00:02:11,860
road and then later have a pro 6

00:02:01,319 --> 00:02:14,560
sub-block and use it subroutine okay I

00:02:11,860 --> 00:02:21,430
see the it's a bit of output as with the

00:02:14,560 --> 00:02:24,160
other page before okay so it is the v5

00:02:21,430 --> 00:02:28,030
module is a slag to a allowed per 5 code

00:02:24,160 --> 00:02:32,260
as a nest block showed on the page

00:02:28,030 --> 00:02:35,049
before or as a pro 5 module so that you

00:02:32,260 --> 00:02:39,370
can say you want to use the module from

00:02:35,049 --> 00:02:42,519
a given language like pro 5 and this

00:02:39,370 --> 00:02:47,440
would not just assume that the module is

00:02:42,519 --> 00:02:49,329
within has a perfect grammar it even

00:02:47,440 --> 00:02:53,650
look up the module in the right places

00:02:49,329 --> 00:02:59,370
it's not found under 46 slip or custom

00:02:53,650 --> 00:02:59,370
lip of pro 6 libraries it's on the

00:03:00,540 --> 00:03:08,769
besides of the poor six modules in its

00:03:03,609 --> 00:03:10,959
own territory it will not use the

00:03:08,769 --> 00:03:13,209
installed pro 5 modules of you're prone

00:03:10,959 --> 00:03:19,829
to Peter we have to install these

00:03:13,209 --> 00:03:23,859
modules of carnivores on Sunday it is

00:03:19,829 --> 00:03:29,260
using the standard p5 grammar with Val

00:03:23,859 --> 00:03:34,230
everyone and it builds an AST like a

00:03:29,260 --> 00:03:36,400
cool dude as 406 that means it just uses

00:03:34,230 --> 00:03:38,650
things that are there it's not an

00:03:36,400 --> 00:03:41,549
invention of something you just put

00:03:38,650 --> 00:03:41,549
these two things together

00:03:43,590 --> 00:03:51,820
the language switching when you say you

00:03:46,150 --> 00:03:54,820
want to use v5 for example happens like

00:03:51,820 --> 00:04:00,640
this this is the use statement within

00:03:54,820 --> 00:04:06,490
the grammar and there is a dynamic

00:04:00,640 --> 00:04:08,530
variable main and it checks if module

00:04:06,490 --> 00:04:12,220
that get loaded the v5 module for

00:04:08,530 --> 00:04:17,620
example that's this domain to something

00:04:12,220 --> 00:04:21,000
else and if it does it switches to the

00:04:17,620 --> 00:04:29,560
statement list of this other language

00:04:21,000 --> 00:04:31,300
these both use statements the same intro

00:04:29,560 --> 00:04:34,390
six and eight point five because you

00:04:31,300 --> 00:04:37,600
have to switch in every way so even if

00:04:34,390 --> 00:04:40,450
you write a new slang like PHP or cobalt

00:04:37,600 --> 00:04:44,260
or whatever you should have something

00:04:40,450 --> 00:04:54,910
like this to allow switching back to pro

00:04:44,260 --> 00:04:57,850
6 this is like the pro/5 module books in

00:04:54,910 --> 00:05:00,160
short you see at the top there is the

00:04:57,850 --> 00:05:02,530
grammar the pro/5 grown it has a

00:05:00,160 --> 00:05:05,500
statement list with statements of the

00:05:02,530 --> 00:05:10,600
pro-life language and you have the pro/5

00:05:05,500 --> 00:05:14,410
actions which create the st and you have

00:05:10,600 --> 00:05:19,570
an export subroutine which that the set

00:05:14,410 --> 00:05:23,500
the main variable to pro 5 and it gets a

00:05:19,570 --> 00:05:26,710
string pro/5 and looked up in this in

00:05:23,500 --> 00:05:30,120
this hash and get to the right grandma

00:05:26,710 --> 00:05:30,120
on the right extra class

00:05:32,540 --> 00:05:45,900
okay if you want to have a five-block

00:05:40,520 --> 00:05:47,730
the question is what do you expect say

00:05:45,900 --> 00:05:50,310
you have a pro 6 you are the perl 6

00:05:47,730 --> 00:05:57,510
language and declare a variable of type

00:05:50,310 --> 00:05:59,700
int and you say it you get the get the

00:05:57,510 --> 00:06:04,830
gist of it in this case when you switch

00:05:59,700 --> 00:06:08,850
to 45 it should something else and you

00:06:04,830 --> 00:06:12,180
want to switch to pure 6 you should get

00:06:08,850 --> 00:06:16,550
the get the gist again so it should do

00:06:12,180 --> 00:06:19,919
that that's the representation in 46 of

00:06:16,550 --> 00:06:23,490
undefined integer it's a tech object and

00:06:19,919 --> 00:06:26,490
then pro/5 it will just print an empty

00:06:23,490 --> 00:06:33,750
string and issue a warning for example

00:06:26,490 --> 00:06:39,479
in some cases how does it work say in

00:06:33,750 --> 00:06:45,750
this case in 45 is not supporting it is

00:06:39,479 --> 00:06:47,940
a toolkit in the grammar so it's a bit

00:06:45,750 --> 00:06:51,990
simplified so that you can see it it's

00:06:47,940 --> 00:06:54,660
in real it's a bit longer there's a term

00:06:51,990 --> 00:06:59,130
called say this is preferred over supper

00:06:54,660 --> 00:07:08,430
jeans so in a v5 block it pickups this

00:06:59,130 --> 00:07:14,360
term creates an AFP which uses this it

00:07:08,430 --> 00:07:14,360
fix too stringy fry its components and

00:07:16,250 --> 00:07:23,370
at the end it calls the method say on it

00:07:19,950 --> 00:07:25,889
if you don't have an argument list which

00:07:23,370 --> 00:07:30,030
is optional see the curse mark it takes

00:07:25,889 --> 00:07:38,330
the topic variable it's a different

00:07:30,030 --> 00:07:38,330
behavioral vento 62 yeah

00:07:39,230 --> 00:07:47,430
so this is what it does in the pillow

00:07:43,230 --> 00:07:54,450
sixth language it calls just as the

00:07:47,430 --> 00:07:59,130
method on it and then say yeah and then

00:07:54,450 --> 00:08:07,230
pro/5 does the Concord operator of pro 5

00:07:59,130 --> 00:08:11,000
and then streetwise it says it okay what

00:08:07,230 --> 00:08:14,190
is supported right now and what isn't

00:08:11,000 --> 00:08:19,920
the control structures like loops and

00:08:14,190 --> 00:08:22,050
conditions are working all functions for

00:08:19,920 --> 00:08:26,180
example I shift pop drop or sleep

00:08:22,050 --> 00:08:26,180
require and many more are working

00:08:26,540 --> 00:08:34,050
letting mathematical operations of

00:08:28,770 --> 00:08:40,050
course separate routine sea creatures to

00:08:34,050 --> 00:08:44,240
a very small subset are are supported

00:08:40,050 --> 00:08:47,670
which affect passing if you leave out

00:08:44,240 --> 00:08:49,470
the bracelet prices for example and you

00:08:47,670 --> 00:08:52,230
have a subroutine that only takes one

00:08:49,470 --> 00:08:54,150
argument the second argument belongs to

00:08:52,230 --> 00:08:58,050
the to the function call before for

00:08:54,150 --> 00:09:03,360
example or is just a list of of that

00:08:58,050 --> 00:09:05,460
result of that supporting whole track

00:09:03,360 --> 00:09:09,900
mass are working like use VARs use

00:09:05,460 --> 00:09:16,200
warnings you strict not complete but to

00:09:09,900 --> 00:09:20,840
the to a useful state I've started the

00:09:16,200 --> 00:09:24,660
core modules like config and English

00:09:20,840 --> 00:09:30,120
conflict right now is just a dump of my

00:09:24,660 --> 00:09:33,090
pro 5 binary so that modules that expect

00:09:30,120 --> 00:09:36,180
a config get something it's not right

00:09:33,090 --> 00:09:39,360
yet you have to make the f to fill it

00:09:36,180 --> 00:09:43,910
with the the variables of power for

00:09:39,360 --> 00:09:43,910
example of JVM for example or movie on

00:09:44,840 --> 00:09:50,270
what is not supported yet labels and go

00:09:48,210 --> 00:09:50,270
to

00:09:52,210 --> 00:10:00,110
indirect object in tax is not supported

00:09:54,980 --> 00:10:02,930
yet but will be backwards and so the

00:10:00,110 --> 00:10:05,950
fire handles are not supported yet which

00:10:02,930 --> 00:10:10,340
relates to the indirect object in tax

00:10:05,950 --> 00:10:14,990
and many many core modules when you

00:10:10,340 --> 00:10:21,650
think of core modules like mro it's not

00:10:14,990 --> 00:10:26,120
supported yet what can't be supported in

00:10:21,650 --> 00:10:30,680
my opinion it's only excess I don't know

00:10:26,120 --> 00:10:33,710
some core module might go into to the

00:10:30,680 --> 00:10:39,400
too deep into the children's of 12 5

00:10:33,710 --> 00:10:39,400
sets so that can copy supported so it is

00:10:40,480 --> 00:10:53,870
yeah yeah yeah okay okay the test suit I

00:10:48,650 --> 00:10:56,570
took the test suit of 25 which is a bit

00:10:53,870 --> 00:10:58,100
problematic problematic because it's not

00:10:56,570 --> 00:10:59,960
like and pure 6 that they have a

00:10:58,100 --> 00:11:04,550
specification and you have a test suit

00:10:59,960 --> 00:11:06,980
that only covers tests that are part of

00:11:04,550 --> 00:11:08,660
the specification there are many

00:11:06,980 --> 00:11:13,220
implementation details within the test

00:11:08,660 --> 00:11:16,850
tube and these are about at least 500

00:11:13,220 --> 00:11:19,900
test fires you have to fill it by hand

00:11:16,850 --> 00:11:23,270
to get them working so that they are

00:11:19,900 --> 00:11:29,030
only test things that depend on the

00:11:23,270 --> 00:11:36,530
language it has more than 40,000 signal

00:11:29,030 --> 00:11:39,170
tests in 500 files many of them use

00:11:36,530 --> 00:11:43,760
internal test modules as I said these

00:11:39,170 --> 00:11:49,520
test modules some some of them have I

00:11:43,760 --> 00:11:50,960
have more than thousand lines so I still

00:11:49,520 --> 00:11:53,930
don't have these internal test files

00:11:50,960 --> 00:11:55,910
running so many of the tests fail just

00:11:53,930 --> 00:11:58,640
because the internal test modules are

00:11:55,910 --> 00:12:01,250
not in place

00:11:58,640 --> 00:12:04,940
it's the test suit depends on the

00:12:01,250 --> 00:12:07,700
directory structure of Perl 5 so it will

00:12:04,940 --> 00:12:12,740
choose installed modules it just uses

00:12:07,700 --> 00:12:19,280
modules that are in in the upper lip and

00:12:12,740 --> 00:12:21,230
the / 5 slang module can only be tested

00:12:19,280 --> 00:12:24,520
after cutting installed because of

00:12:21,230 --> 00:12:31,130
recombination will take hours otherwise

00:12:24,520 --> 00:12:37,220
so these tests I had 22 touch to right

00:12:31,130 --> 00:12:44,620
now it we five passes 648 tests from 51

00:12:37,220 --> 00:12:51,890
tryouts I'm using such yeah as the

00:12:44,620 --> 00:12:57,110
grating I think about ninety percent of

00:12:51,890 --> 00:12:59,510
the test files to compile so just not

00:12:57,110 --> 00:13:04,030
working because it says can't find

00:12:59,510 --> 00:13:04,030
module tests in network trouble

00:13:04,510 --> 00:13:14,570
installing and using v5 is pretty simple

00:13:07,340 --> 00:13:17,120
you need a pro 6 on parrot you have to

00:13:14,570 --> 00:13:23,240
apply a patch which is in the repository

00:13:17,120 --> 00:13:25,100
it is just about the passing arguments

00:13:23,240 --> 00:13:30,560
to a youth statement for example which

00:13:25,100 --> 00:13:33,320
is not yet apply dispatch and switching

00:13:30,560 --> 00:13:35,600
to this language there are two mineral

00:13:33,320 --> 00:13:41,090
hex I need to get rid of and then it can

00:13:35,600 --> 00:13:43,310
be merged John just you have to type

00:13:41,090 --> 00:13:47,140
make in style right now you can't use

00:13:43,310 --> 00:13:49,940
panda because it will only be instable

00:13:47,140 --> 00:13:52,850
BR mike make fire because it's the

00:13:49,940 --> 00:13:55,990
entropy model module the grammar and the

00:13:52,850 --> 00:13:59,000
actions are an interview model and the

00:13:55,990 --> 00:14:02,540
config module and English module are pro

00:13:59,000 --> 00:14:07,730
six modules but this doesn't love panda

00:14:02,540 --> 00:14:09,970
yet in this case but this can be done in

00:14:07,730 --> 00:14:09,970
your future

00:14:11,560 --> 00:14:22,760
okay that was it if you have questions

00:14:17,480 --> 00:14:26,060
please tell them slowly and loud english

00:14:22,760 --> 00:14:30,290
is not my native language so I never

00:14:26,060 --> 00:14:34,010
answered yeah what's the currently

00:14:30,290 --> 00:14:35,960
expected behavior you defining in six

00:14:34,010 --> 00:14:37,940
block and then you try to sign string

00:14:35,960 --> 00:14:43,360
through it and be viable that's the fame

00:14:37,940 --> 00:14:48,380
my opinion was that it's your tail yeah

00:14:43,360 --> 00:14:54,320
yeah it if you declare a variable in 12

00:14:48,380 --> 00:14:57,440
5 and any be five block and use it in 46

00:14:54,320 --> 00:15:01,370
later everything you do in the v5 block

00:14:57,440 --> 00:15:04,850
is a 12-6 object so you can pass it

00:15:01,370 --> 00:15:08,510
easily around and this the traits you

00:15:04,850 --> 00:15:11,810
set in in plus six still live in pure

00:15:08,510 --> 00:15:17,720
five blocks so you can't assign string

00:15:11,810 --> 00:15:21,190
to to end for it but if it's if it is

00:15:17,720 --> 00:15:25,190
about getting old pure five code to work

00:15:21,190 --> 00:15:28,520
you usually don't have this problem you

00:15:25,190 --> 00:15:31,459
use a module of / 5 or use first block

00:15:28,520 --> 00:15:35,810
of pro 5 of a given function or module

00:15:31,459 --> 00:15:43,220
and use it from 12-6 10 to do don't have

00:15:35,810 --> 00:15:46,670
to rewrite it yeah so that you're 17

00:15:43,220 --> 00:15:48,589
decorations please and he used by the

00:15:46,670 --> 00:15:50,260
private in that affect your following

00:15:48,589 --> 00:15:53,360
subroutine declarations or is that

00:15:50,260 --> 00:15:54,740
parcel to format on so for example let's

00:15:53,360 --> 00:15:58,160
say I'm not sure if it's true or not but

00:15:54,740 --> 00:16:01,130
imagine if the Perl 6 keep attributes

00:15:58,160 --> 00:16:02,570
for summer heats then what maybe they

00:16:01,130 --> 00:16:05,850
dropped it with so we try to do

00:16:02,570 --> 00:16:10,870
something profilers on your cell

00:16:05,850 --> 00:16:12,940
or if you declares opportunity 05 it

00:16:10,870 --> 00:16:16,000
will behave like a pure five submachine

00:16:12,940 --> 00:16:18,550
so if you have a prototype of the

00:16:16,000 --> 00:16:22,690
submachine it will take in the v5 block

00:16:18,550 --> 00:16:25,360
only these parameters it can't do that

00:16:22,690 --> 00:16:27,340
in 206 of course because it's with

00:16:25,360 --> 00:16:30,580
switches back to the pro 6 grammar and

00:16:27,340 --> 00:16:40,450
the pro sixth grammar doesn't know about

00:16:30,580 --> 00:16:42,370
these prototypes yeah yeah you can't

00:16:40,450 --> 00:16:45,700
just pass by ozone you can declare

00:16:42,370 --> 00:16:49,870
errors in the refi block after yes of

00:16:45,700 --> 00:16:54,130
course some routines that are declared

00:16:49,870 --> 00:16:59,590
april I yeah put your package or AG

00:16:54,130 --> 00:17:02,980
wessels go into a package robot

00:16:59,590 --> 00:17:05,200
inspector yeah I will you try to to

00:17:02,980 --> 00:17:10,620
mimic pro/5 but then they will not be

00:17:05,200 --> 00:17:13,330
invisible to a a nested pro 6 block

00:17:10,620 --> 00:17:16,470
lexically your browser six-block would

00:17:13,330 --> 00:17:16,470
have to look in the package

00:17:20,760 --> 00:17:26,170
of the question

00:17:22,990 --> 00:17:44,710
how much does the current implementation

00:17:26,170 --> 00:17:46,929
depend on um none at all there was once

00:17:44,710 --> 00:17:50,140
a little piece about getting the varmint

00:17:46,929 --> 00:18:01,750
hash but it's gone since drunk maiden of

00:17:50,140 --> 00:18:04,179
coldfoot yeah some way important just

00:18:01,750 --> 00:18:06,250
the excess particle profile on hold to

00:18:04,179 --> 00:18:11,080
this new system and not have to rewrite

00:18:06,250 --> 00:18:12,580
profi part that kind of taken would

00:18:11,080 --> 00:18:15,520
there be some way to port just the

00:18:12,580 --> 00:18:18,280
excess parts of a perl module and keep

00:18:15,520 --> 00:18:20,650
the Perl 5 code part of it and just

00:18:18,280 --> 00:18:25,050
rewrite the excess stuff in some new

00:18:20,650 --> 00:18:25,050
perl 6 type access whatever its using

00:18:25,890 --> 00:18:32,110
don't know what i mean about excess

00:18:28,000 --> 00:18:35,440
stuff if you have a pill 5 module which

00:18:32,110 --> 00:18:39,340
don't use the 6s not just me um it

00:18:35,440 --> 00:18:41,710
should be usable by the way it does use

00:18:39,340 --> 00:18:44,380
excess did you rewrite just the excess

00:18:41,710 --> 00:18:47,440
portion of it and keep the profile for

00:18:44,380 --> 00:19:00,400
you can we rewrite the excess stuff in

00:18:47,440 --> 00:19:03,250
pukekohe 5 here yeah you can you can of

00:19:00,400 --> 00:19:06,370
course it can mix it and say I want to

00:19:03,250 --> 00:19:10,510
use the pure pipe / 05 code of it and

00:19:06,370 --> 00:19:14,370
the excess stuff moves to pro six that

00:19:10,510 --> 00:19:14,370
work yeah of course yeah yeah right

00:19:15,779 --> 00:19:22,590
consider something like the negative

00:19:17,309 --> 00:19:26,820
pole to microfiber Chester I've thought

00:19:22,590 --> 00:19:30,359
about it like having some see interface

00:19:26,820 --> 00:19:40,739
that calls into pro 6 somehow i don't

00:19:30,359 --> 00:19:43,499
know it's it's too tricky I'm yeah I i

00:19:40,739 --> 00:19:49,399
wrote excess stuff too and I know what

00:19:43,499 --> 00:19:52,139
you can do and it's not reliable I think

00:19:49,399 --> 00:19:54,419
you really want to use access to use

00:19:52,139 --> 00:20:01,969
something more like that opera is trying

00:19:54,419 --> 00:20:01,969
to do 30 40 50 60 interference important

00:20:06,940 --> 00:20:12,030

YouTube URL: https://www.youtube.com/watch?v=oajH8ptK3v0


