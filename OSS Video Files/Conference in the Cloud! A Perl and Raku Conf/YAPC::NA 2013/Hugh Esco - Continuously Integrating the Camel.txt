Title: Hugh Esco - Continuously Integrating the Camel
Publication date: 2013-09-01
Playlist: YAPC::NA 2013
Description: 
	Slides: http://campaignfoundations.com/system/files/Continuously_Integrating_the_Camel.pdf

Blog post: http://campaignfoundations.com/blog/hesco/Continuously_Integrating_the_Camel_YAPC_NA_2013
Captions: 
	00:00:00,079 --> 00:00:07,319
my name is Hugh esco I work by day at

00:00:04,170 --> 00:00:09,719
very oh it's a web hosting company I

00:00:07,319 --> 00:00:12,120
work in the book of rattan office in

00:00:09,719 --> 00:00:14,490
South Florida where they don't have

00:00:12,120 --> 00:00:16,830
seasons is kind of strange but I'm

00:00:14,490 --> 00:00:22,519
adjusting I suppose I'm from Georgia

00:00:16,830 --> 00:00:25,619
after hours I work I have an after-hours

00:00:22,519 --> 00:00:28,800
consultancy do businesses campaign

00:00:25,619 --> 00:00:30,779
foundations primarily offering web

00:00:28,800 --> 00:00:33,510
hosting services and application

00:00:30,779 --> 00:00:36,440
development services to Green Party

00:00:33,510 --> 00:00:38,820
candidates but also we have a couple of

00:00:36,440 --> 00:00:44,520
commercial clients that we do some work

00:00:38,820 --> 00:00:47,730
for I got excited about this when I felt

00:00:44,520 --> 00:00:51,899
gene Kim talked to the puppet conference

00:00:47,730 --> 00:00:56,039
I think two years ago and he was talking

00:00:51,899 --> 00:00:58,800
about I don't remember which company was

00:00:56,039 --> 00:01:01,500
exactly Oh into it whoo in the middle

00:00:58,800 --> 00:01:08,760
attack season was rolling out dozens of

00:01:01,500 --> 00:01:12,689
of new versions every day to clients to

00:01:08,760 --> 00:01:15,840
paying customers and that seemed

00:01:12,689 --> 00:01:17,330
absolutely insane given how we had

00:01:15,840 --> 00:01:24,479
always done it and so I started

00:01:17,330 --> 00:01:27,000
investigating and and so my work on this

00:01:24,479 --> 00:01:30,030
has really been in response to fire

00:01:27,000 --> 00:01:34,890
fighting which is something that gene

00:01:30,030 --> 00:01:37,320
Kim talks about in his book how we tend

00:01:34,890 --> 00:01:39,750
to spend a lot more time putting out

00:01:37,320 --> 00:01:43,320
fires than developing new functionality

00:01:39,750 --> 00:01:46,560
and and and creating tools that are

00:01:43,320 --> 00:01:48,750
useful we are fighting the fires that

00:01:46,560 --> 00:01:53,579
have been left from the last time we

00:01:48,750 --> 00:01:56,189
rolled out and since i began working on

00:01:53,579 --> 00:01:58,740
this project I've had two stints of

00:01:56,189 --> 00:02:02,790
firefighting that have been absolutely

00:01:58,740 --> 00:02:06,719
maddening but out of every time that

00:02:02,790 --> 00:02:08,340
that's happened my systems have gotten

00:02:06,719 --> 00:02:11,479
stronger and I'm not going to have to

00:02:08,340 --> 00:02:11,479
fight that fire again

00:02:13,760 --> 00:02:21,180
so i'm going to i got an hour's worth of

00:02:19,140 --> 00:02:22,950
slides to punch through in 20 minutes

00:02:21,180 --> 00:02:25,470
and i'm going to gloss over most of

00:02:22,950 --> 00:02:33,000
those what I really have to contribute

00:02:25,470 --> 00:02:37,200
here is how to use Jenkins and Pinto in

00:02:33,000 --> 00:02:41,400
order to help do continuous integration

00:02:37,200 --> 00:02:43,580
continuous I'm not quite at the point of

00:02:41,400 --> 00:02:49,140
continuous deployment but at least

00:02:43,580 --> 00:02:56,340
continuous integration and of pearl

00:02:49,140 --> 00:02:59,850
based applications this is this book

00:02:56,340 --> 00:03:04,020
really kind of laid out the framework of

00:02:59,850 --> 00:03:07,860
what I have been doing and when I first

00:03:04,020 --> 00:03:09,570
presented this I I as an introduction

00:03:07,860 --> 00:03:12,360
mentioned that this was really something

00:03:09,570 --> 00:03:13,890
of a book report not only on this book

00:03:12,360 --> 00:03:16,680
but on a couple other books that I'm

00:03:13,890 --> 00:03:20,510
going to display during the same that

00:03:16,680 --> 00:03:24,600
Jess humbled and and Dave Farley's

00:03:20,510 --> 00:03:28,410
continuous delivery has a lot to teach

00:03:24,600 --> 00:03:30,620
us about what's possible and they don't

00:03:28,410 --> 00:03:34,800
spend any time talking about the tools

00:03:30,620 --> 00:03:38,640
so much as talking about the concepts

00:03:34,800 --> 00:03:40,140
and and the the framework a lot of the

00:03:38,640 --> 00:03:43,220
graphics that you'll see in this slide

00:03:40,140 --> 00:03:48,959
show are stolen from this book thank you

00:03:43,220 --> 00:03:52,620
J'son and david this is one thing that I

00:03:48,959 --> 00:03:54,390
really took away from this is that if it

00:03:52,620 --> 00:03:58,410
hurts you know we were talking just a

00:03:54,390 --> 00:04:00,270
moment ago about it we're at vario we

00:03:58,410 --> 00:04:02,850
have a rule that nothing ever gets

00:04:00,270 --> 00:04:04,890
rolled out on a friday and this

00:04:02,850 --> 00:04:06,630
gentleman was saying that nothing ever

00:04:04,890 --> 00:04:10,550
gets rolled out where he works later

00:04:06,630 --> 00:04:13,550
than wednesday so if it's on site would

00:04:10,550 --> 00:04:13,550
oh

00:04:18,579 --> 00:04:24,860
inviting problems right well what does

00:04:23,090 --> 00:04:27,139
humble and Dave Farley said in their

00:04:24,860 --> 00:04:32,090
book was that if it hurts do it more

00:04:27,139 --> 00:04:36,080
frequently and automated and you know I

00:04:32,090 --> 00:04:39,800
was talking to a gentleman last night

00:04:36,080 --> 00:04:43,520
who has been involved in developing a

00:04:39,800 --> 00:04:46,040
lot of the math modules and pearl and I

00:04:43,520 --> 00:04:51,200
mentioned to him that every time I've

00:04:46,040 --> 00:04:53,150
had to touch a GMP it's been two days of

00:04:51,200 --> 00:04:56,570
remembering how it was i installed at

00:04:53,150 --> 00:04:58,880
the last time and and there's this

00:04:56,570 --> 00:05:02,120
website out in France somewhere you

00:04:58,880 --> 00:05:07,270
gotta get the source and but the source

00:05:02,120 --> 00:05:10,760
is kind of broken and it doesn't the

00:05:07,270 --> 00:05:12,830
it's referring to paths that aren't

00:05:10,760 --> 00:05:15,830
there and if you don't remember how you

00:05:12,830 --> 00:05:17,690
fix that the last time it's a pain in

00:05:15,830 --> 00:05:20,090
the ass and it's been two days every

00:05:17,690 --> 00:05:23,539
time I've had to install it finally in

00:05:20,090 --> 00:05:25,729
this last round of firefighting the

00:05:23,539 --> 00:05:28,070
result of that two days was not an

00:05:25,729 --> 00:05:31,280
installed GMP but a puppet manifest that

00:05:28,070 --> 00:05:34,039
does it for me so I can now do it more

00:05:31,280 --> 00:05:35,780
frequently and it's automated and I

00:05:34,039 --> 00:05:37,640
don't have to think about it and if I do

00:05:35,780 --> 00:05:44,270
need to think about it it's documented

00:05:37,640 --> 00:05:49,100
in my puppet manifest jenkins is the CI

00:05:44,270 --> 00:05:54,139
server the CI tool that I chose a fairly

00:05:49,100 --> 00:05:57,229
full-featured not quite it's it's pearl

00:05:54,139 --> 00:05:59,770
support was kind of lacking i actually

00:05:57,229 --> 00:06:02,960
created the wiki page about how to use

00:05:59,770 --> 00:06:05,000
Jenkins with pearl I'm hoping that all

00:06:02,960 --> 00:06:12,010
of you will contribute to it and and

00:06:05,000 --> 00:06:14,690
teach me more than I'll ever know but

00:06:12,010 --> 00:06:17,900
apparently there are a lot of different

00:06:14,690 --> 00:06:20,630
CI servers when i first started

00:06:17,900 --> 00:06:25,370
researching in this role it was for my

00:06:20,630 --> 00:06:27,470
afterhours consultancy since then a very

00:06:25,370 --> 00:06:33,620
aware i worked by day

00:06:27,470 --> 00:06:40,400
started implementing some CI workflows

00:06:33,620 --> 00:06:43,850
and they're using the the names of the

00:06:40,400 --> 00:06:45,560
tools escaped me but I also heard last

00:06:43,850 --> 00:06:47,150
night about a couple of different CI

00:06:45,560 --> 00:06:49,790
servers that are actually written in

00:06:47,150 --> 00:06:54,490
perl for folks who want to get down the

00:06:49,790 --> 00:06:54,490
guts and help develop it and debug it

00:06:55,510 --> 00:07:05,570
the the process of installing jenkins is

00:06:59,650 --> 00:07:07,640
these four lines six lines of code four

00:07:05,570 --> 00:07:09,800
lines of code to install two lines of

00:07:07,640 --> 00:07:12,320
code to upgrade this is for debian if

00:07:09,800 --> 00:07:15,890
you're working in Red Hat their recipes

00:07:12,320 --> 00:07:20,960
also on the Jenkins website it's um it's

00:07:15,890 --> 00:07:24,500
a war file and fires up in a little JVM

00:07:20,960 --> 00:07:28,880
and it does its business and so that

00:07:24,500 --> 00:07:30,410
wasn't a it provides a what was one

00:07:28,880 --> 00:07:31,790
thing that was important to me and one

00:07:30,410 --> 00:07:33,740
of the reasons I chose to go with

00:07:31,790 --> 00:07:36,250
Jenkins was it provided a means of

00:07:33,740 --> 00:07:38,570
locking it down and so I could share

00:07:36,250 --> 00:07:42,020
internally what I needed to but also

00:07:38,570 --> 00:07:49,490
make available our stuff to the world if

00:07:42,020 --> 00:07:56,720
I wanted to this was the meat of what it

00:07:49,490 --> 00:08:00,560
took to be able to be able to build

00:07:56,720 --> 00:08:03,080
pearl toad in inside of Jenkins and it

00:08:00,560 --> 00:08:04,910
took me a couple of days to sort all

00:08:03,080 --> 00:08:08,750
this out and it's a little more

00:08:04,910 --> 00:08:11,300
complicated than what I normally did and

00:08:08,750 --> 00:08:15,290
I mean it's kind of crazy but I make and

00:08:11,300 --> 00:08:18,229
I make clean before I make again but

00:08:15,290 --> 00:08:21,530
that's what it took to get this finally

00:08:18,229 --> 00:08:26,750
to work and you know normally I would do

00:08:21,530 --> 00:08:31,060
a approve on a type Bob and get every

00:08:26,750 --> 00:08:34,310
test script in my test suite but here I

00:08:31,060 --> 00:08:38,460
you know working in bash I end up doing

00:08:34,310 --> 00:08:42,300
a for dude unlit loop and or

00:08:38,460 --> 00:08:44,370
to get the test to act right and to

00:08:42,300 --> 00:08:48,270
produce the right output so that the

00:08:44,370 --> 00:08:50,100
built-in tap tools that are built into

00:08:48,270 --> 00:08:53,430
Jenkins would know how to interpret them

00:08:50,100 --> 00:08:59,400
and and display them test script by test

00:08:53,430 --> 00:09:01,980
script Jenkins allows you I mean I could

00:08:59,400 --> 00:09:05,100
have written this in in Python or Ruby

00:09:01,980 --> 00:09:06,750
or pearl or you know you can put on the

00:09:05,100 --> 00:09:11,360
shebang line whatever you need but it

00:09:06,750 --> 00:09:16,850
allows you to build create build jobs

00:09:11,360 --> 00:09:16,850
through I used here a shell interpreter

00:09:17,540 --> 00:09:22,440
this is the wiki page that I put up that

00:09:20,730 --> 00:09:27,210
I'm hoping everyone will contribute to

00:09:22,440 --> 00:09:34,490
and give us some sense of you know what

00:09:27,210 --> 00:09:37,260
you're learning in this realm I had a

00:09:34,490 --> 00:09:40,740
took me a while to sort out how to set

00:09:37,260 --> 00:09:42,630
up the environment and this is when I

00:09:40,740 --> 00:09:44,790
first presented this this was just a

00:09:42,630 --> 00:09:49,320
theory and it hadn't been tested at this

00:09:44,790 --> 00:09:53,280
point it's almost been tested I'm now

00:09:49,320 --> 00:09:55,830
able to successfully use this cpn-m to

00:09:53,280 --> 00:10:00,290
build up a server this this comes out of

00:09:55,830 --> 00:10:02,850
my puppet manifest so this is working

00:10:00,290 --> 00:10:05,430
Pinto I want to highlight Pinto and

00:10:02,850 --> 00:10:12,140
thank Jeff thought fault timer I think

00:10:05,430 --> 00:10:16,250
is his name we've met by IRC an email he

00:10:12,140 --> 00:10:20,370
developed this tool called Pinto for

00:10:16,250 --> 00:10:25,260
curating a seat pan repository locally

00:10:20,370 --> 00:10:27,000
and by curating I think he if I could

00:10:25,260 --> 00:10:31,620
speak for him I think what he's saying

00:10:27,000 --> 00:10:35,040
is that your code works with this set of

00:10:31,620 --> 00:10:38,370
versions of this set of of dependent

00:10:35,040 --> 00:10:40,560
modules and you don't want to when

00:10:38,370 --> 00:10:43,890
you're rolling out your code have to

00:10:40,560 --> 00:10:47,240
depend on your user to experiment of

00:10:43,890 --> 00:10:51,960
pulling the latest off of Sipan you want

00:10:47,240 --> 00:10:54,900
for you want to be able to

00:10:51,960 --> 00:10:58,410
or that your user is deploying with the

00:10:54,900 --> 00:11:03,630
same dependency stack for your code as

00:10:58,410 --> 00:11:06,510
you used in development and so Pinto is

00:11:03,630 --> 00:11:10,820
a tool that allows you to create a and

00:11:06,510 --> 00:11:16,400
host a repository for perl modules and

00:11:10,820 --> 00:11:20,720
to control what version is available and

00:11:16,400 --> 00:11:25,860
by using this mirror mirror only and

00:11:20,720 --> 00:11:27,960
mirror switch to CNM you can make sure

00:11:25,860 --> 00:11:30,540
that you're only pulling from your

00:11:27,960 --> 00:11:33,210
repository and that you get the whole

00:11:30,540 --> 00:11:35,190
stack that's that your codes been tested

00:11:33,210 --> 00:11:40,040
against and you don't have to defect

00:11:35,190 --> 00:11:43,380
that again Pinto allows you to

00:11:40,040 --> 00:11:46,590
authenticate you could create a user ID

00:11:43,380 --> 00:11:55,640
and password and and put that inside of

00:11:46,590 --> 00:12:01,170
the URL HTTP / / user colon password at

00:11:55,640 --> 00:12:03,270
domain name or hostname domain and you

00:12:01,170 --> 00:12:10,320
could provide for authenticated access

00:12:03,270 --> 00:12:15,960
to the Pinto repository one of the

00:12:10,320 --> 00:12:18,060
gotchas I ran into was resolved thanks

00:12:15,960 --> 00:12:22,550
with to a little bit of help from that

00:12:18,060 --> 00:12:26,570
that trout by IRC who pointed out that

00:12:22,550 --> 00:12:34,530
the tank mode strips out the pro/5 lib

00:12:26,570 --> 00:12:38,340
from ink and and so I had to tell you

00:12:34,530 --> 00:12:40,320
know my approve my my test suite where

00:12:38,340 --> 00:12:46,320
to go find its libraries that I just

00:12:40,320 --> 00:12:47,730
blown away so jess humble and dave

00:12:46,320 --> 00:12:53,640
Farley's book talked about the

00:12:47,730 --> 00:12:55,650
deployment pipeline and this is

00:12:53,640 --> 00:13:00,810
basically what that looks like and the

00:12:55,650 --> 00:13:05,670
idea is that we develop we push our code

00:13:00,810 --> 00:13:07,500
to the repository our continuous and

00:13:05,670 --> 00:13:09,480
Gration server is watching our

00:13:07,500 --> 00:13:11,460
repository for updates you know it

00:13:09,480 --> 00:13:14,160
pulling it at five or 20-minute

00:13:11,460 --> 00:13:18,600
intervals or whatever you you set it up

00:13:14,160 --> 00:13:21,900
on a cron to do and whenever it finds a

00:13:18,600 --> 00:13:26,640
new code a new version in the repository

00:13:21,900 --> 00:13:30,300
it does a full check out and builds in a

00:13:26,640 --> 00:13:33,330
clean environment from scratch and it

00:13:30,300 --> 00:13:39,840
runs your test suite and if it passes

00:13:33,330 --> 00:13:44,070
your unit tests that build gets archived

00:13:39,840 --> 00:13:47,250
in an artifact repository and the build

00:13:44,070 --> 00:13:49,950
gets promoted to the next stage of the

00:13:47,250 --> 00:13:53,850
deployment pipeline where you could run

00:13:49,950 --> 00:13:56,850
automated acceptance tests or capacity

00:13:53,850 --> 00:13:59,250
test or push it out to a server where

00:13:56,850 --> 00:14:04,680
it's available to human beings to do

00:13:59,250 --> 00:14:06,600
exploratory testing this is kind of what

00:14:04,680 --> 00:14:09,090
it looks like in practice sometimes

00:14:06,600 --> 00:14:12,690
builds fail you have to go back and try

00:14:09,090 --> 00:14:14,610
again you move down the pipeline oh wait

00:14:12,690 --> 00:14:17,730
a minute that didn't quite work let's

00:14:14,610 --> 00:14:20,250
try it again eventually things will make

00:14:17,730 --> 00:14:27,360
it back out into production six or

00:14:20,250 --> 00:14:30,810
twenty versions later there is a module

00:14:27,360 --> 00:14:33,450
that will work with Jenkins that is

00:14:30,810 --> 00:14:35,580
designed to allow you to set up a bill

00:14:33,450 --> 00:14:38,610
pipeline and visualize it inside the

00:14:35,580 --> 00:14:43,170
Jenkins interface this is what it looks

00:14:38,610 --> 00:14:48,180
like on my server right now where I'm

00:14:43,170 --> 00:14:51,330
doing first my my commitment unit test

00:14:48,180 --> 00:14:54,870
and then my coverage testing but

00:14:51,330 --> 00:14:57,420
eventually I will be automating

00:14:54,870 --> 00:15:06,810
acceptance tests and maybe capacity

00:14:57,420 --> 00:15:08,700
testing and and on out to deployment one

00:15:06,810 --> 00:15:11,130
of the points that's made in the

00:15:08,700 --> 00:15:15,090
continuous delivery book is the

00:15:11,130 --> 00:15:17,430
importance of an artifact repository so

00:15:15,090 --> 00:15:19,529
that once you build the code you don't

00:15:17,430 --> 00:15:21,990
have to rebuild it every time and

00:15:19,529 --> 00:15:25,110
you take that artifact that worked the

00:15:21,990 --> 00:15:28,860
last you know on your unit test and you

00:15:25,110 --> 00:15:35,189
use that and reuse that repeatedly until

00:15:28,860 --> 00:15:36,800
it winds up in production Pinto when I

00:15:35,189 --> 00:15:42,360
first presented this this slide

00:15:36,800 --> 00:15:45,720
highlight did Jay factory frog dot net

00:15:42,360 --> 00:15:49,170
or something which is an artifact

00:15:45,720 --> 00:15:54,839
repository that was developed I think

00:15:49,170 --> 00:15:56,699
primarily for java code and at six

00:15:54,839 --> 00:16:00,269
months ago that's what looked like the

00:15:56,699 --> 00:16:02,279
way to go for me as well but in this

00:16:00,269 --> 00:16:05,819
last round of firefighting i discovered

00:16:02,279 --> 00:16:12,540
pinto and so now i'm using Jeff Jeff

00:16:05,819 --> 00:16:15,870
Hall High MERS code and and using Pinto

00:16:12,540 --> 00:16:22,379
to store the work that I'm doing but

00:16:15,870 --> 00:16:26,220
also the dependency stack in acceptance

00:16:22,379 --> 00:16:29,279
testing which is distinct from our unit

00:16:26,220 --> 00:16:34,199
testing and our integration testing we

00:16:29,279 --> 00:16:38,490
try to express requirements in language

00:16:34,199 --> 00:16:41,339
that makes sense to make sense to users

00:16:38,490 --> 00:16:44,850
and to end users into clients into

00:16:41,339 --> 00:16:49,110
marketing people into folks who don't

00:16:44,850 --> 00:16:51,059
speak code there are tools that were

00:16:49,110 --> 00:16:54,870
designed for this here's a couple of

00:16:51,059 --> 00:16:56,459
books that that were part of my initial

00:16:54,870 --> 00:17:02,790
book report that get to the heart of

00:16:56,459 --> 00:17:05,280
that and there are several modules that

00:17:02,790 --> 00:17:10,159
have been written in perl that have been

00:17:05,280 --> 00:17:13,819
designed to encourage the use of

00:17:10,159 --> 00:17:17,839
acceptance testing cucumber style

00:17:13,819 --> 00:17:26,039
acceptance test in a pearl environment

00:17:17,839 --> 00:17:28,319
cucumber is a ruby tool but i have i've

00:17:26,039 --> 00:17:30,690
only played with with one or two of

00:17:28,319 --> 00:17:33,779
these I don't have any recommendations

00:17:30,690 --> 00:17:36,570
yet I don't have any code to share

00:17:33,779 --> 00:17:38,369
but I'm afraid that the you know

00:17:36,570 --> 00:17:42,619
hopefully before the next round of

00:17:38,369 --> 00:17:42,619
firefighting maybe I can get to this

00:17:42,739 --> 00:17:53,820
Jenkins allows for the possibility of

00:17:46,019 --> 00:17:55,919
actually deploying co2 into a working

00:17:53,820 --> 00:17:59,609
environment maybe even a production

00:17:55,919 --> 00:18:04,080
environment there's a tool called J

00:17:59,609 --> 00:18:10,379
cloud that is designed to interact with

00:18:04,080 --> 00:18:14,070
a number of different cloud hosting

00:18:10,379 --> 00:18:15,749
providers i use Rackspace cloud you put

00:18:14,070 --> 00:18:18,299
in your credentials your keys or

00:18:15,749 --> 00:18:21,299
whatever and it allows you to spin up

00:18:18,299 --> 00:18:23,759
servers in that cloud environment and

00:18:21,299 --> 00:18:28,320
push your code there either for a build

00:18:23,759 --> 00:18:30,659
or for deployment this is a one of the

00:18:28,320 --> 00:18:33,629
charts I stole from the humble Farley

00:18:30,659 --> 00:18:37,080
book that talked about the maturity

00:18:33,629 --> 00:18:40,499
model when i first started on this

00:18:37,080 --> 00:18:42,210
project i was down here at level one at

00:18:40,499 --> 00:18:45,029
the bottom of the chart on almost

00:18:42,210 --> 00:18:48,269
everything maybe love I'm sorry levels

00:18:45,029 --> 00:18:52,529
negative 1 and level 0 on a couple I was

00:18:48,269 --> 00:18:54,299
already using a git repository there

00:18:52,529 --> 00:18:58,349
were a couple of things I was had

00:18:54,299 --> 00:19:02,339
already started doing right I set it up

00:18:58,349 --> 00:19:06,539
and promised to do quarterly evaluations

00:19:02,339 --> 00:19:10,849
of where I you know where i started in

00:19:06,539 --> 00:19:18,690
how i'm doing against this maturity

00:19:10,849 --> 00:19:25,200
model that was outlined here if you go

00:19:18,690 --> 00:19:28,440
to my website there is a a version of

00:19:25,200 --> 00:19:30,269
this chart that it will blow up large

00:19:28,440 --> 00:19:36,269
enough to read it i can't quite read

00:19:30,269 --> 00:19:41,219
this without you know without playing

00:19:36,269 --> 00:19:44,909
with all of that but this this is really

00:19:41,219 --> 00:19:46,610
a good checklist to look at your own

00:19:44,909 --> 00:19:49,510
work practices again

00:19:46,610 --> 00:19:53,390
austin and see you know what makes sense

00:19:49,510 --> 00:19:58,610
and that pretty much wraps up the 20

00:19:53,390 --> 00:20:01,190
minutes i got but i want to thank the

00:19:58,610 --> 00:20:05,179
folks who helped get me started in the

00:20:01,190 --> 00:20:08,870
folks who helped mentor me ongoingly and

00:20:05,179 --> 00:20:11,450
the folks want higher see who helped me

00:20:08,870 --> 00:20:14,480
develop this answer questions to help

00:20:11,450 --> 00:20:18,910
move me along and thank you of course

00:20:14,480 --> 00:20:18,910

YouTube URL: https://www.youtube.com/watch?v=aqVS4C8hpNg


