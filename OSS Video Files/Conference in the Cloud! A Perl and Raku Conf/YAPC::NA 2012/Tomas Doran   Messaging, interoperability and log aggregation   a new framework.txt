Title: Tomas Doran   Messaging, interoperability and log aggregation   a new framework
Publication date: 2013-08-20
Playlist: YAPC::NA 2012
Description: 
	
Captions: 
	00:00:02,449 --> 00:00:09,929
morning everybody I can hear me get

00:00:06,960 --> 00:00:12,059
everybody else hear me good I recommend

00:00:09,929 --> 00:00:14,160
moving forward then could anybody not

00:00:12,059 --> 00:00:18,480
see this same answer I recommend moving

00:00:14,160 --> 00:00:20,520
forwards because sorry I'm not expecting

00:00:18,480 --> 00:00:25,529
to read the blue adjust the white bits

00:00:20,520 --> 00:00:27,660
that's why it's blue but yeah they're

00:00:25,529 --> 00:00:28,980
going to be some demos and you're

00:00:27,660 --> 00:00:43,160
probably gonna miss out if you can't at

00:00:28,980 --> 00:00:46,440
least vaguely see what I'm doing hmm

00:00:43,160 --> 00:00:48,450
yeah yeah I decided it was time for a

00:00:46,440 --> 00:00:51,930
change I had the silly read for like

00:00:48,450 --> 00:00:54,360
eight years or something so not quite

00:00:51,930 --> 00:00:56,960
sure this is going yet it's definitely

00:00:54,360 --> 00:00:56,960
silly though

00:01:43,950 --> 00:01:49,500
okay imma get started Thanks making it

00:01:47,490 --> 00:01:51,360
everybody to start with I appreciate

00:01:49,500 --> 00:01:53,610
your surly in the morning silly in the

00:01:51,360 --> 00:01:54,479
morning for me too I really didn't

00:01:53,610 --> 00:01:58,079
particularly want to be here this

00:01:54,479 --> 00:02:00,329
morning but anyway i'm i'm going to talk

00:01:58,079 --> 00:02:03,210
about well something I've been working

00:02:00,329 --> 00:02:04,560
on I me not this particular thing but

00:02:03,210 --> 00:02:10,700
I've been walking around in this area

00:02:04,560 --> 00:02:12,930
for the last two or three years I'm so I

00:02:10,700 --> 00:02:14,790
yeah i'm going to talk about well the

00:02:12,930 --> 00:02:16,290
problems i've been solving and what have

00:02:14,790 --> 00:02:18,269
ended up doing is like a generic

00:02:16,290 --> 00:02:22,079
solution to a load of the problems I've

00:02:18,269 --> 00:02:23,790
had but I'll kind of start with well Who

00:02:22,079 --> 00:02:29,480
am I I mean I guess quite awhile you

00:02:23,790 --> 00:02:32,640
recognize me I'm I right pearl and stuff

00:02:29,480 --> 00:02:34,590
this talk is sponsored by well several

00:02:32,640 --> 00:02:37,680
people and all these people have in some

00:02:34,590 --> 00:02:38,940
way paid me to write write your stuff or

00:02:37,680 --> 00:02:41,880
pay me to work on this stuff and release

00:02:38,940 --> 00:02:48,090
it or pay my plane flight or etc they're

00:02:41,880 --> 00:02:50,130
all awesome and state 51 is well

00:02:48,090 --> 00:02:52,260
london-based but we're hiring Tim group

00:02:50,130 --> 00:02:54,090
is in Boston and we're hiring so if

00:02:52,260 --> 00:02:57,120
anyone wants the job in Boston and come

00:02:54,090 --> 00:03:00,180
talk to me right so let's actually get

00:02:57,120 --> 00:03:04,170
started this talk is about money library

00:03:00,180 --> 00:03:05,760
which is called message passing but I

00:03:04,170 --> 00:03:07,799
guess before I'm going to tell you about

00:03:05,760 --> 00:03:10,680
the library I should kind of tell you

00:03:07,799 --> 00:03:13,139
why because I mean I write wrote some

00:03:10,680 --> 00:03:16,019
code and I never liked doing that no I

00:03:13,139 --> 00:03:17,940
mean I'm a maintenance programmer and if

00:03:16,019 --> 00:03:19,590
your maintenance programmer then you can

00:03:17,940 --> 00:03:21,269
always make other people software better

00:03:19,590 --> 00:03:23,250
but if you write your own software you

00:03:21,269 --> 00:03:24,840
end up five years later going or why

00:03:23,250 --> 00:03:28,590
don't do this because you have to live

00:03:24,840 --> 00:03:30,000
with all your own mistakes so okay well

00:03:28,590 --> 00:03:31,980
I'm not gonna try and tell you the big

00:03:30,000 --> 00:03:35,329
why let's let's start with a specific

00:03:31,980 --> 00:03:38,670
problem that I actually wants to solve

00:03:35,329 --> 00:03:40,260
so the generic thing that I'm going to

00:03:38,670 --> 00:03:43,349
talk about the later part or kind of

00:03:40,260 --> 00:03:44,880
grout of this but this kind of problem

00:03:43,349 --> 00:03:48,989
illustrates all the things I was

00:03:44,880 --> 00:03:52,830
thinking about fairly well so and yeah

00:03:48,989 --> 00:03:55,680
they really likes a story right okay so

00:03:52,830 --> 00:03:57,330
once upon a time I was looking after

00:03:55,680 --> 00:04:00,420
those hundreds of machines that I was

00:03:57,330 --> 00:04:02,820
talking about and I had two monitors

00:04:00,420 --> 00:04:05,070
full of X terms all tailing log files

00:04:02,820 --> 00:04:08,040
all at once and you know this was

00:04:05,070 --> 00:04:09,420
ridiculous really really addictive and I

00:04:08,040 --> 00:04:12,930
don't know if anyone's seen the product

00:04:09,420 --> 00:04:14,730
called splunk we had got that spawn copy

00:04:12,930 --> 00:04:18,030
we thought played with it it was amazing

00:04:14,730 --> 00:04:20,940
um it was also amazingly costly so it

00:04:18,030 --> 00:04:23,220
wasn't actually going to work for us so

00:04:20,940 --> 00:04:25,230
I was kind of being a looking for a

00:04:23,220 --> 00:04:26,700
solution for this and I found this thing

00:04:25,230 --> 00:04:28,500
I don't know if anybody recognizes this

00:04:26,700 --> 00:04:32,520
project come out quick show of hands a

00:04:28,500 --> 00:04:35,100
couple of you okay um so log stash it's

00:04:32,520 --> 00:04:40,560
it's a project the what it does is

00:04:35,100 --> 00:04:43,470
centralized logging so well I don't know

00:04:40,560 --> 00:04:44,520
I think why you might want some

00:04:43,470 --> 00:04:46,620
centralized logging if you've got a

00:04:44,520 --> 00:04:50,730
large production environment is kind of

00:04:46,620 --> 00:04:53,850
fairly obvious but I mean I specifically

00:04:50,730 --> 00:04:58,260
say syslog is awful syslog is absolutely

00:04:53,850 --> 00:05:00,600
awful it's you p or its tcp well it's

00:04:58,260 --> 00:05:02,250
it's just rubbish and you've got a

00:05:00,600 --> 00:05:05,610
priority field and severity field in the

00:05:02,250 --> 00:05:06,990
text field and so there's no structure

00:05:05,610 --> 00:05:08,490
the actual message so if you want to

00:05:06,990 --> 00:05:10,470
actually cram some interesting

00:05:08,490 --> 00:05:12,270
information into your message your log

00:05:10,470 --> 00:05:14,370
message you have to basically smash it

00:05:12,270 --> 00:05:18,290
down into a text line which is not so

00:05:14,370 --> 00:05:21,930
cool and also i love this phrase RFC

00:05:18,290 --> 00:05:24,930
3631 64 which is the canonical reference

00:05:21,930 --> 00:05:27,930
to syslog starts this is the observed

00:05:24,930 --> 00:05:29,310
behavior of sisal protocol that's you

00:05:27,930 --> 00:05:33,090
know that's another good place that's

00:05:29,310 --> 00:05:34,230
not a good place tall so as I was kind

00:05:33,090 --> 00:05:35,280
of saying we want to do some structured

00:05:34,230 --> 00:05:37,320
up logging you know I've got I've got a

00:05:35,280 --> 00:05:39,090
pearl application and and so I want to

00:05:37,320 --> 00:05:40,350
be able to log a load of structure kind

00:05:39,090 --> 00:05:44,610
of metrics and performance data out of

00:05:40,350 --> 00:05:47,220
it cool so for example an HTTP request

00:05:44,610 --> 00:05:49,950
you know if I've got a catalyst or a

00:05:47,220 --> 00:05:51,960
dancer up or ever I don't want to load a

00:05:49,950 --> 00:05:53,850
load of information about those requests

00:05:51,960 --> 00:05:57,900
so you know maybe something like this

00:05:53,850 --> 00:06:00,380
mate just just as an example so okay

00:05:57,900 --> 00:06:02,850
cool so what structured app logging

00:06:00,380 --> 00:06:04,050
there are load of things are just going

00:06:02,850 --> 00:06:05,390
to write to log files that you can't

00:06:04,050 --> 00:06:07,790
control can't do anything about

00:06:05,390 --> 00:06:09,650
so okay well that's fine we can kind of

00:06:07,790 --> 00:06:12,680
tail those files they get written out

00:06:09,650 --> 00:06:14,450
and you know use grep or regular

00:06:12,680 --> 00:06:16,130
expressions or whatever and pass those

00:06:14,450 --> 00:06:18,680
two you know until we've got some

00:06:16,130 --> 00:06:19,850
structure back so that they're much more

00:06:18,680 --> 00:06:21,860
useful you know if you take your Apache

00:06:19,850 --> 00:06:23,510
access logs then just using that as a

00:06:21,860 --> 00:06:25,070
line of text it's not so useful but if

00:06:23,510 --> 00:06:27,050
you split it back into its constituent

00:06:25,070 --> 00:06:34,520
fields then you have got something

00:06:27,050 --> 00:06:37,310
useful okay yes so just like to say that

00:06:34,520 --> 00:06:39,440
the thing I hate most about log for cuts

00:06:37,310 --> 00:06:41,900
is that every single person seems to

00:06:39,440 --> 00:06:45,080
invent their own date format I mean can

00:06:41,900 --> 00:06:47,030
we please I've use epoch seconds or ISO

00:06:45,080 --> 00:06:51,440
8601 strings and don't do anything

00:06:47,030 --> 00:06:52,820
different uh-huh hailer um okay so so

00:06:51,440 --> 00:06:54,530
what we're going to do is we're going to

00:06:52,820 --> 00:06:57,590
take you structured logs and publish

00:06:54,530 --> 00:06:59,480
them as Jason and that might sound crazy

00:06:57,590 --> 00:07:01,760
to you but doesn't sound crazy to me I

00:06:59,480 --> 00:07:04,280
mean Jason's really fast really really

00:07:01,760 --> 00:07:07,820
really fast and obviously it's great for

00:07:04,280 --> 00:07:09,440
arbitary structured data cool okay so

00:07:07,820 --> 00:07:12,080
going to publish it to a message queue

00:07:09,440 --> 00:07:14,170
wow that's a piece of complexity right

00:07:12,080 --> 00:07:16,790
there how can I possibly justify that

00:07:14,170 --> 00:07:20,840
well the reason I could justify that is

00:07:16,790 --> 00:07:23,660
that it flattens load spikes um so you

00:07:20,840 --> 00:07:25,370
know if you logs a bursty you're going

00:07:23,660 --> 00:07:27,830
to love it you peak rate a thousand

00:07:25,370 --> 00:07:30,350
times faster then you log a kind of

00:07:27,830 --> 00:07:32,900
question times and that means that if

00:07:30,350 --> 00:07:34,790
you have to actually process the logs as

00:07:32,900 --> 00:07:36,560
they come in you need hardware that can

00:07:34,790 --> 00:07:38,770
be a thousand times faster than your

00:07:36,560 --> 00:07:41,540
average and well why would you do that

00:07:38,770 --> 00:07:45,050
so you know a message queue can help you

00:07:41,540 --> 00:07:48,350
smooth out those periods it's also

00:07:45,050 --> 00:07:51,200
really good to scale and it allows you

00:07:48,350 --> 00:07:53,600
to quite a few smart things so for

00:07:51,200 --> 00:07:55,370
example you can take severe error as and

00:07:53,600 --> 00:07:57,410
also send into text message for example

00:07:55,370 --> 00:08:00,380
you can consume path of a message stream

00:07:57,410 --> 00:08:01,700
or that's the idea anyway and they're

00:08:00,380 --> 00:08:04,700
also pretty good as a common integration

00:08:01,700 --> 00:08:06,590
point I mean most languages have some

00:08:04,700 --> 00:08:08,000
libraries for some message queues so you

00:08:06,590 --> 00:08:11,570
know if you want to go between Ruby and

00:08:08,000 --> 00:08:14,420
pearl or ruby in Java or pearl and Java

00:08:11,570 --> 00:08:15,890
or whatever having a messaging system is

00:08:14,420 --> 00:08:18,120
actually quite a good way to get that

00:08:15,890 --> 00:08:22,000
obstruction

00:08:18,120 --> 00:08:23,830
okay so we have a logs we're having

00:08:22,000 --> 00:08:26,700
structured we've got going to message

00:08:23,830 --> 00:08:29,560
queue what an early now okay so

00:08:26,700 --> 00:08:32,110
elasticsearch who's heard of elastic

00:08:29,560 --> 00:08:34,810
search somewhat more of you in the

00:08:32,110 --> 00:08:37,630
Fertile log stash so so elastic search

00:08:34,810 --> 00:08:40,960
well it's a search engine and it's also

00:08:37,630 --> 00:08:44,650
kind of a document store and it's aight

00:08:40,960 --> 00:08:47,440
i mean it's well its foot it does free

00:08:44,650 --> 00:08:50,800
text search really well but it's also

00:08:47,440 --> 00:08:55,030
pretty good at other things so you can

00:08:50,800 --> 00:08:57,190
just spin this up and it has shining

00:08:55,030 --> 00:08:59,650
replication so as your your data volume

00:08:57,190 --> 00:09:02,320
grows and a unit of scale you can just

00:08:59,650 --> 00:09:06,010
basically add more boxes which is pretty

00:09:02,320 --> 00:09:09,250
good and yeah it does histograms so I'm

00:09:06,010 --> 00:09:12,520
just gonna explain that a little so you

00:09:09,250 --> 00:09:14,200
can not just use it for text search but

00:09:12,520 --> 00:09:16,780
you can put you know arbitrary numeric

00:09:14,200 --> 00:09:18,220
data into this thing and ask you to

00:09:16,780 --> 00:09:20,950
arbitrary questions back and it will

00:09:18,220 --> 00:09:22,780
give you back agric metrics or counts or

00:09:20,950 --> 00:09:24,190
sons or standard deviations you know

00:09:22,780 --> 00:09:27,430
it'll do all that sort of thing from

00:09:24,190 --> 00:09:29,110
from an arbitrary data set for you and I

00:09:27,430 --> 00:09:30,490
mean this is really powerful it means

00:09:29,110 --> 00:09:32,320
that you can just log stuff in your

00:09:30,490 --> 00:09:34,180
application and you can come back later

00:09:32,320 --> 00:09:37,150
and ask questions you hadn't even

00:09:34,180 --> 00:09:38,410
thought of asking in advance and I mean

00:09:37,150 --> 00:09:40,240
if you want to keep tracking this as a

00:09:38,410 --> 00:09:42,790
metric then sure you probably want to be

00:09:40,240 --> 00:09:45,730
making an hour deal of it eventually but

00:09:42,790 --> 00:09:47,440
it is great for you know thinking oh

00:09:45,730 --> 00:09:49,930
I've thought something that might be

00:09:47,440 --> 00:09:52,060
interesting should we record it well no

00:09:49,930 --> 00:09:53,530
just go and ask elasticsearch and it'll

00:09:52,060 --> 00:09:55,090
tell you if the answers any use and if

00:09:53,530 --> 00:09:59,680
you should bother recording the future

00:09:55,090 --> 00:10:02,200
so anyway going back to the plot there's

00:09:59,680 --> 00:10:05,020
this cute woody guy a nice Club blog

00:10:02,200 --> 00:10:06,550
stash and it's a project in JRuby by a

00:10:05,020 --> 00:10:09,760
really smart guy called Jordan sizzle

00:10:06,550 --> 00:10:12,520
and it basically implements this kind of

00:10:09,760 --> 00:10:16,930
strategy that I've just outlined and

00:10:12,520 --> 00:10:19,540
it's pretty cool and I you know got it

00:10:16,930 --> 00:10:21,580
and how to play with it and I mean

00:10:19,540 --> 00:10:23,290
there's there's a whole community here

00:10:21,580 --> 00:10:25,300
this is like a third-party web viewer

00:10:23,290 --> 00:10:27,280
for the log stash stuff it's not the one

00:10:25,300 --> 00:10:28,660
that shipped in the project so so

00:10:27,280 --> 00:10:30,370
there's this whole community of people

00:10:28,660 --> 00:10:32,560
around this patching it

00:10:30,370 --> 00:10:35,020
yeah I mean this is kind of some actual

00:10:32,560 --> 00:10:36,640
logs my environment and you can see

00:10:35,020 --> 00:10:38,410
there's a little histogram of the count

00:10:36,640 --> 00:10:40,810
of log messages and all that stuff and

00:10:38,410 --> 00:10:42,790
you can see like here all of my things

00:10:40,810 --> 00:10:45,760
like memcache hits etc all broken out

00:10:42,790 --> 00:10:47,890
and you know you can kind of type search

00:10:45,760 --> 00:10:50,020
questions into here like find me all the

00:10:47,890 --> 00:10:51,730
requests that took more than 30 seconds

00:10:50,020 --> 00:10:53,890
did less than to database queries

00:10:51,730 --> 00:10:55,510
between this date mistakes and it'll

00:10:53,890 --> 00:10:57,130
give you those back and do a histogram

00:10:55,510 --> 00:11:01,540
and you know all that stuff is pretty

00:10:57,130 --> 00:11:03,310
cool so okay here's here's a diagram of

00:11:01,540 --> 00:11:07,060
what this is kind of going to look like

00:11:03,310 --> 00:11:08,529
this is so just kind of simply showing a

00:11:07,060 --> 00:11:10,060
couple of servers and our patchy logs

00:11:08,529 --> 00:11:13,390
and they're going to the message broker

00:11:10,060 --> 00:11:14,740
and log stashes is well breeding as

00:11:13,390 --> 00:11:16,029
apache logs and singing the message

00:11:14,740 --> 00:11:18,070
broker and then you have a second copy

00:11:16,029 --> 00:11:19,810
of log stash the reason from the message

00:11:18,070 --> 00:11:22,990
broker and stuffs them into the elastic

00:11:19,810 --> 00:11:24,940
so to cluster okay cool and so the way

00:11:22,990 --> 00:11:26,740
that looks like organizes this is you

00:11:24,940 --> 00:11:29,080
have an input stage and a filter stat

00:11:26,740 --> 00:11:33,760
one or more filter stages an output

00:11:29,080 --> 00:11:35,230
stage so the filter stage is the thing

00:11:33,760 --> 00:11:37,510
that does your kind of Apache log

00:11:35,230 --> 00:11:39,910
pausing you reading your your role lines

00:11:37,510 --> 00:11:42,370
and then the filter stage is doing the

00:11:39,910 --> 00:11:44,589
passing and this is kind of quite

00:11:42,370 --> 00:11:46,660
interesting because it means that well

00:11:44,589 --> 00:11:50,230
we can do the filtering here at this

00:11:46,660 --> 00:11:52,839
stage I this is log stash is going to be

00:11:50,230 --> 00:11:55,000
running like in a central location or we

00:11:52,839 --> 00:11:56,650
could do it here we so you know do the

00:11:55,000 --> 00:11:58,060
filtering on the end nodes and it lets

00:11:56,650 --> 00:12:01,540
you be flexible architecture which is

00:11:58,060 --> 00:12:03,330
pretty cool so yeah I don luis i had a

00:12:01,540 --> 00:12:07,360
play of it in and I was pretty impressed

00:12:03,330 --> 00:12:08,980
and then I kind of started stepping up

00:12:07,360 --> 00:12:11,620
to actually pushes out in my production

00:12:08,980 --> 00:12:13,630
environment and I kind of realized that

00:12:11,620 --> 00:12:17,589
we might have a little bit of a problem

00:12:13,630 --> 00:12:20,560
here because you know I don't have that

00:12:17,589 --> 00:12:22,510
much memory which spare memory anyway

00:12:20,560 --> 00:12:27,910
not not for shipping logs on my web

00:12:22,510 --> 00:12:31,510
servers ya know like seriously dude this

00:12:27,910 --> 00:12:33,730
is not cool uh-huh I'd like to say at

00:12:31,510 --> 00:12:35,529
this point that I mean it does work

00:12:33,730 --> 00:12:39,610
really well as advertised it's pretty

00:12:35,529 --> 00:12:41,740
awesome and the JVM gives and it takes

00:12:39,610 --> 00:12:42,910
away you know so when I need some basic

00:12:41,740 --> 00:12:44,230
timings

00:12:42,910 --> 00:12:47,860
it turns out that one of the most

00:12:44,230 --> 00:12:50,290
expensive things is pausing amqp and if

00:12:47,860 --> 00:12:52,270
you see Ruby like MRI it's about third

00:12:50,290 --> 00:12:55,060
slowly and pearl doing impure pillars a

00:12:52,270 --> 00:12:57,580
third faster same code in JRuby third

00:12:55,060 --> 00:12:59,890
faster game so so you know Java whips

00:12:57,580 --> 00:13:03,790
are us you know Ruby's way slower than

00:12:59,890 --> 00:13:07,900
pole unless it's jruby interesting um so

00:13:03,790 --> 00:13:09,970
anyway cool logstash on each host that's

00:13:07,900 --> 00:13:11,500
that's a non-starter I can't spend two

00:13:09,970 --> 00:13:13,630
gig of memory I can't swim I can't even

00:13:11,500 --> 00:13:16,840
spend 400 Meg's that's just unreasonable

00:13:13,630 --> 00:13:18,130
sorry but yeah like I say I mean I've

00:13:16,840 --> 00:13:20,440
already got these dedicated big

00:13:18,130 --> 00:13:21,700
elasticsearch servers so running like

00:13:20,440 --> 00:13:25,300
the central interestings will be fine

00:13:21,700 --> 00:13:27,760
okay cool and yeah it's already got all

00:13:25,300 --> 00:13:30,820
this Apache log pausing stuff and I'm

00:13:27,760 --> 00:13:32,140
million over pauses that I don't want to

00:13:30,820 --> 00:13:34,150
have to write the reg ex is for you know

00:13:32,140 --> 00:13:36,220
if if I can avoid writing red x's there

00:13:34,150 --> 00:13:42,130
and use someone else's or you have tests

00:13:36,220 --> 00:13:44,020
that would be really good okay so any

00:13:42,130 --> 00:13:52,060
one to ask some questions now before i

00:13:44,020 --> 00:13:58,030
get into actual specifics yeah yeah yeah

00:13:52,060 --> 00:14:00,880
yeah so this talks about money a library

00:13:58,030 --> 00:14:05,560
the clear about what it does is fairly

00:14:00,880 --> 00:14:08,080
in a name I hope and hopefully it's

00:14:05,560 --> 00:14:11,830
really simple it is for production use

00:14:08,080 --> 00:14:13,690
even though it's really simple so I'm

00:14:11,830 --> 00:14:15,910
going to kind of tell you about what i

00:14:13,690 --> 00:14:18,070
wrote and how it solve this problem but

00:14:15,910 --> 00:14:20,260
hang on wait a second I am re-logging

00:14:18,070 --> 00:14:23,350
stuff from my application why am i doing

00:14:20,260 --> 00:14:24,940
anything kind of this complex I mean I

00:14:23,350 --> 00:14:27,340
could just push log straight from

00:14:24,940 --> 00:14:32,290
application that'd be cool right and so

00:14:27,340 --> 00:14:34,690
I did that and and yeah I didn't have a

00:14:32,290 --> 00:14:37,000
good week I didn't have a good couple of

00:14:34,690 --> 00:14:38,860
weeks because you know my rabbits have

00:14:37,000 --> 00:14:41,260
got sick and then all my web servers

00:14:38,860 --> 00:14:45,460
burnt and it was just generally a bad

00:14:41,260 --> 00:14:47,290
time so I decided that but yeah logging

00:14:45,460 --> 00:14:49,900
to amqp directly directly from my per

00:14:47,290 --> 00:14:53,970
lap was completely a bad idea one of my

00:14:49,900 --> 00:14:56,089
worst bad ideas recently in fact um so

00:14:53,970 --> 00:14:59,300
zeromq hurrah

00:14:56,089 --> 00:15:03,740
I don't know who seems RM q but I really

00:14:59,300 --> 00:15:05,420
really really like it so it has all

00:15:03,740 --> 00:15:07,399
these nice properties or East you can

00:15:05,420 --> 00:15:09,019
configure the properties for it but if

00:15:07,399 --> 00:15:11,569
you use these pub/sub sockets you can

00:15:09,019 --> 00:15:13,249
set them up so they're never blocking so

00:15:11,569 --> 00:15:15,259
if everything's going wrong I'd rather

00:15:13,249 --> 00:15:17,990
my web servers stay up and through all

00:15:15,259 --> 00:15:20,449
their logs away always you know there's

00:15:17,990 --> 00:15:21,949
there any point where we're taking stuff

00:15:20,449 --> 00:15:25,699
down because you can't log is

00:15:21,949 --> 00:15:28,189
appropriate never so yeah Sarah MP was

00:15:25,699 --> 00:15:30,259
pretty good I mean it nicely saw it with

00:15:28,189 --> 00:15:32,269
their own cue and Jason you nicely solve

00:15:30,259 --> 00:15:33,920
all the problems of syslog and you've

00:15:32,269 --> 00:15:36,230
got the same saw one well same sort of

00:15:33,920 --> 00:15:38,629
much more reliable transport because

00:15:36,230 --> 00:15:40,850
again if you've got a queue there so if

00:15:38,629 --> 00:15:43,519
your log collector goes down first say

00:15:40,850 --> 00:15:44,749
two seconds and comes back up and that's

00:15:43,519 --> 00:15:46,639
fine because you'll just have buff with

00:15:44,749 --> 00:15:48,769
a few messages at the client app and

00:15:46,639 --> 00:15:51,829
it's all good and the really really

00:15:48,769 --> 00:15:53,930
really big thing for Pearl and for most

00:15:51,829 --> 00:15:56,029
dynamic languages actually is that 0 m

00:15:53,930 --> 00:15:57,499
qs a completely from POSIX thread so

00:15:56,029 --> 00:15:59,449
your perl interpreter knows nothing

00:15:57,499 --> 00:16:01,459
about it which means that all the

00:15:59,449 --> 00:16:03,620
networking just literally happens in the

00:16:01,459 --> 00:16:05,089
background so you don't have to do it

00:16:03,620 --> 00:16:06,170
you can just send the message and it's

00:16:05,089 --> 00:16:07,459
firing forgetting you don't have to do

00:16:06,170 --> 00:16:09,290
anything special you don't have to call

00:16:07,459 --> 00:16:11,329
an event loop you not to make any other

00:16:09,290 --> 00:16:12,949
changes in your normal pole code to be

00:16:11,329 --> 00:16:14,360
able to asynchronously ship messages and

00:16:12,949 --> 00:16:15,350
that's I mean that's really good

00:16:14,360 --> 00:16:19,970
especially if you've got you know

00:16:15,350 --> 00:16:22,040
pre-existing pole code so cool we've got

00:16:19,970 --> 00:16:24,470
a plan of some sort we're going to have

00:16:22,040 --> 00:16:26,120
a non host log collector and it's going

00:16:24,470 --> 00:16:28,249
to have a 0 and Q sub socket and our app

00:16:26,120 --> 00:16:29,420
is going to publish to that and it's

00:16:28,249 --> 00:16:31,759
going to have a syslog listener as well

00:16:29,420 --> 00:16:33,559
and so it can use the rsyslog did it

00:16:31,759 --> 00:16:36,649
where we got on the host to fool all the

00:16:33,559 --> 00:16:39,379
logs to this and in a few cases we're

00:16:36,649 --> 00:16:41,240
going to run tail F and tail some logs

00:16:39,379 --> 00:16:44,660
and then then we're going to push the

00:16:41,240 --> 00:16:47,300
mullins way mqp so here's a diagram of

00:16:44,660 --> 00:16:52,429
what's now going to go on this is kind

00:16:47,300 --> 00:16:55,429
of a new plan so this this fit here is

00:16:52,429 --> 00:16:58,129
the bit I'm talking about writing and I

00:16:55,429 --> 00:16:59,899
mean it's this could be my code or could

00:16:58,129 --> 00:17:01,459
be Ruby log stash I've got an

00:16:59,899 --> 00:17:03,769
implementation of it in pole just just

00:17:01,459 --> 00:17:06,380
because I wants to have a go but I'm

00:17:03,769 --> 00:17:09,199
yeah I'm using relaxation Brooks so

00:17:06,380 --> 00:17:09,950
anyway this is where it all goes wrong

00:17:09,199 --> 00:17:12,520
or

00:17:09,950 --> 00:17:18,790
all goes right if you want your penis um

00:17:12,520 --> 00:17:21,470
yeah damn damn damn damn damn damn well

00:17:18,790 --> 00:17:23,150
but not actually I mean I did start by

00:17:21,470 --> 00:17:24,980
writing a script an hour a second script

00:17:23,150 --> 00:17:26,720
and when I got to a fifth script that

00:17:24,980 --> 00:17:28,340
was like doing stuff with different

00:17:26,720 --> 00:17:30,770
message queues I went this this is this

00:17:28,340 --> 00:17:33,500
is silly stop doing this I I should be

00:17:30,770 --> 00:17:36,010
writing something so let's keep things

00:17:33,500 --> 00:17:38,510
simple let's say that we've got an event

00:17:36,010 --> 00:17:41,090
and and the thing will call an event is

00:17:38,510 --> 00:17:44,570
just a hash ok I'm going to send it

00:17:41,090 --> 00:17:46,160
between things so and I'm going to steal

00:17:44,570 --> 00:17:47,690
all the vogue staff slashes terms here

00:17:46,160 --> 00:17:49,250
all this wins appropriate to steal them

00:17:47,690 --> 00:17:52,520
because because then the terminology is

00:17:49,250 --> 00:17:54,350
nicely the saying so and we'll have a

00:17:52,520 --> 00:17:55,910
thing called an output and an output is

00:17:54,350 --> 00:17:58,940
something that has a method called

00:17:55,910 --> 00:18:00,530
consume that takes one parameter and

00:17:58,940 --> 00:18:01,520
then we can have an input and an input

00:18:00,530 --> 00:18:05,990
is something that has an attribute

00:18:01,520 --> 00:18:08,570
called output to ok cool and a filter

00:18:05,990 --> 00:18:10,850
does both of those things so that

00:18:08,570 --> 00:18:13,010
basically means the only thing the only

00:18:10,850 --> 00:18:16,700
API you need to know about an entire

00:18:13,010 --> 00:18:21,050
framework is that that's all we're going

00:18:16,700 --> 00:18:25,640
to organ do so there we go got an input

00:18:21,050 --> 00:18:30,230
and some filters and output entire

00:18:25,640 --> 00:18:33,110
framework no really really that's it um

00:18:30,230 --> 00:18:34,310
well I might be lying because you know

00:18:33,110 --> 00:18:36,110
depending on what your inputs and

00:18:34,310 --> 00:18:38,840
outputs are but they're all different

00:18:36,110 --> 00:18:40,730
they all have their own complex t but

00:18:38,840 --> 00:18:42,380
I'm trying to do a load of work to kind

00:18:40,730 --> 00:18:44,330
of unify them so that the oh what's that

00:18:42,380 --> 00:18:45,740
you know it is a hostname it's called

00:18:44,330 --> 00:18:47,510
host names or password it's called

00:18:45,740 --> 00:18:49,400
password rather than the million

00:18:47,510 --> 00:18:51,080
different API sin which hosts and some

00:18:49,400 --> 00:18:54,200
of which call it hostname and then I

00:18:51,080 --> 00:18:56,660
tried to make it kind of all the same in

00:18:54,200 --> 00:19:00,230
in the API present so you can configure

00:18:56,660 --> 00:19:02,090
these things same so yeah I i wrote this

00:19:00,230 --> 00:19:04,670
little library that has lights like

00:19:02,090 --> 00:19:08,450
three moose roles implement outputs and

00:19:04,670 --> 00:19:12,670
import and filter and then i wrote some

00:19:08,450 --> 00:19:17,680
adapters so all of these already exist

00:19:12,670 --> 00:19:20,210
zeromq mqp storm readies pub/sub syslog

00:19:17,680 --> 00:19:21,530
someone's writing a MongoDB output

00:19:20,210 --> 00:19:28,280
already for me

00:19:21,530 --> 00:19:29,660
and yet couple of us and so well re also

00:19:28,280 --> 00:19:30,830
wrote the SL because you know I was

00:19:29,660 --> 00:19:32,600
writing these scripts that were tossing

00:19:30,830 --> 00:19:37,010
messages around and I want to make this

00:19:32,600 --> 00:19:39,110
really really easy and so it also ships

00:19:37,010 --> 00:19:40,580
with a command-line application I mean

00:19:39,110 --> 00:19:42,320
it's this just sets up something really

00:19:40,580 --> 00:19:44,180
simple for you you have one input one

00:19:42,320 --> 00:19:46,940
output and you can optionally add a

00:19:44,180 --> 00:19:49,190
filter and that's pretty useful just

00:19:46,940 --> 00:19:52,280
testing so the command line application

00:19:49,190 --> 00:19:55,280
looks like this and actually I've added

00:19:52,280 --> 00:19:58,780
two terms i did encoder and decoder and

00:19:55,280 --> 00:20:01,970
encodes and decodes they just filters so

00:19:58,780 --> 00:20:04,490
you input something by default will

00:20:01,970 --> 00:20:06,950
Jason decode it I mean you can totally

00:20:04,490 --> 00:20:09,200
pluggable use a camel or whatever else

00:20:06,950 --> 00:20:11,840
you want instead well then filter it and

00:20:09,200 --> 00:20:14,180
by default this filter does nothing it's

00:20:11,840 --> 00:20:21,280
a no op and then we'll we encode it NM

00:20:14,180 --> 00:20:21,280
will output it ok cool questions yo

00:20:27,570 --> 00:20:35,490
or um our sis logs t I mean our sea

00:20:31,930 --> 00:20:39,010
slugs UDP Transport has all the problems

00:20:35,490 --> 00:20:40,720
yes and it's reconnections of if

00:20:39,010 --> 00:20:41,710
your if your server goes down it

00:20:40,720 --> 00:20:42,880
probably won't reconnect for five

00:20:41,710 --> 00:20:49,750
minutes and you'll tossed five minutes

00:20:42,880 --> 00:20:52,420
logs way ok ok i mean now i'm using

00:20:49,750 --> 00:20:54,520
rsyslog on my localhost to forward

00:20:52,420 --> 00:20:57,760
syslog but my experience of trying to

00:20:54,520 --> 00:20:59,830
run it across a larger network are just

00:20:57,760 --> 00:21:01,060
kind of pain and misery so I mean make

00:20:59,830 --> 00:21:05,170
me maybe I'm doing it wrong or maybe

00:21:01,060 --> 00:21:07,900
also it's been quite a while since okay

00:21:05,170 --> 00:21:09,190
cool cool but I mean that's I mean

00:21:07,900 --> 00:21:11,110
that's cool that's nice to know but

00:21:09,190 --> 00:21:12,970
what's this logs still got all the

00:21:11,110 --> 00:21:14,560
problems of not being structured you

00:21:12,970 --> 00:21:16,600
know you're still basically passing

00:21:14,560 --> 00:21:18,970
lines of text about you know with a

00:21:16,600 --> 00:21:22,650
severity in a priority field and I mean

00:21:18,970 --> 00:21:32,800
that's just not useful to me ok so ok

00:21:22,650 --> 00:21:34,360
I've got some ya go ya know you get you

00:21:32,800 --> 00:21:36,700
you totally could if you wanted to I

00:21:34,360 --> 00:21:40,060
mean you you could build a decoder an

00:21:36,700 --> 00:21:42,130
encoder that gzip stuff after Jason

00:21:40,060 --> 00:21:43,810
encoding and decoding it I mean I

00:21:42,130 --> 00:21:46,090
haven't done that but I think it will be

00:21:43,810 --> 00:21:48,780
about three lines of code if you bother

00:21:46,090 --> 00:21:52,440
me after this or writing ship it later

00:21:48,780 --> 00:22:02,430
no I mean it's it's it's that easy right

00:21:52,440 --> 00:22:06,100
so uh huh yeah 24 Meg well I used moose

00:22:02,430 --> 00:22:09,730
and MST keeps telling me that his move

00:22:06,100 --> 00:22:11,500
thing is going to be able to like cross

00:22:09,730 --> 00:22:13,870
classes with moose and I keep trying it

00:22:11,500 --> 00:22:15,670
and keep breaking it but soon I stop

00:22:13,870 --> 00:22:17,440
booking it i'm going to use MST

00:22:15,670 --> 00:22:20,650
smoothing instead and I expect that 24

00:22:17,440 --> 00:22:22,390
bank to drop significantly but but still

00:22:20,650 --> 00:22:25,240
I mean it's mostly me I don't care

00:22:22,390 --> 00:22:26,590
portion the thing I care about more is

00:22:25,240 --> 00:22:28,450
that obviously moves gives me an excess

00:22:26,590 --> 00:22:30,550
step which means that I can't make a

00:22:28,450 --> 00:22:32,200
single file script which kind of sucks

00:22:30,550 --> 00:22:35,050
so I'd like to get away from that but I

00:22:32,200 --> 00:22:37,440
haven't gone that ok so anyway I think

00:22:35,050 --> 00:22:39,730
it's kind of demo time

00:22:37,440 --> 00:22:43,330
who wants to see a really dumb dumber

00:22:39,730 --> 00:22:45,970
right so this is the simplest possible

00:22:43,330 --> 00:22:51,159
demo that we could go for so I'm run

00:22:45,970 --> 00:22:55,059
this and then I can give it a pie yeah

00:22:51,159 --> 00:22:56,769
see I it's going to echo that and so

00:22:55,059 --> 00:22:59,350
what that's done is it's taken out from

00:22:56,769 --> 00:23:01,539
studying it's decoded it into a hash is

00:22:59,350 --> 00:23:02,980
them exactly nothing to it it's rien

00:23:01,539 --> 00:23:07,090
coded it's jason and its output it's

00:23:02,980 --> 00:23:09,220
sisal no I've stood out even know not

00:23:07,090 --> 00:23:10,929
very interesting but thought it so Kate

00:23:09,220 --> 00:23:13,749
this some more demos which might be more

00:23:10,929 --> 00:23:16,149
interesting and they might not okay cool

00:23:13,749 --> 00:23:17,830
so then you let me give you an example

00:23:16,149 --> 00:23:20,740
that's more than one scripts so it's all

00:23:17,830 --> 00:23:22,330
do this well we'll do something kind of

00:23:20,740 --> 00:23:26,889
almost equally done but will pass the

00:23:22,330 --> 00:23:49,960
message over there am keen ah right

00:23:26,889 --> 00:23:52,629
that's done that's dead took a second to

00:23:49,960 --> 00:23:56,470
connect but there we have 0 mq and

00:23:52,629 --> 00:23:58,749
notably if i go back to the diagram the

00:23:56,470 --> 00:24:00,700
messaging direction and the kind of tcp

00:23:58,749 --> 00:24:03,399
connection direction can be completely

00:24:00,700 --> 00:24:05,169
different you know you can have the

00:24:03,399 --> 00:24:07,570
client connecting to the server but the

00:24:05,169 --> 00:24:11,470
message is going that way and so that

00:24:07,570 --> 00:24:13,710
that demo that i just showed was the

00:24:11,470 --> 00:24:15,820
subscriber connecting to the publisher

00:24:13,710 --> 00:24:22,919
but i mean we can do this your way

00:24:15,820 --> 00:24:25,930
around the publisher now example be here

00:24:22,919 --> 00:24:39,800
thank you

00:24:25,930 --> 00:24:42,440
cool ha sorry if you love them now okay

00:24:39,800 --> 00:24:45,350
so yeah that's really interesting I

00:24:42,440 --> 00:24:47,660
agree you know shipping empty hashes

00:24:45,350 --> 00:24:54,020
across the network I should probably

00:24:47,660 --> 00:24:55,790
show you the source code to the so so

00:24:54,020 --> 00:25:01,520
these these looks something like that I

00:24:55,790 --> 00:25:02,960
mean publisher as well okay so that's I

00:25:01,520 --> 00:25:04,820
mean that shipping stuff across the

00:25:02,960 --> 00:25:06,680
network and that's kind of literally all

00:25:04,820 --> 00:25:11,090
you need to build a la garita right

00:25:06,680 --> 00:25:16,640
there in those like two one liners okay

00:25:11,090 --> 00:25:20,030
so cool but I mean yeah sure I've got

00:25:16,640 --> 00:25:21,860
some examples in a terminal yeah it does

00:25:20,030 --> 00:25:24,650
actually work I mean this is actually

00:25:21,860 --> 00:25:26,420
really serious so many adapters aren't

00:25:24,650 --> 00:25:28,550
quite so good at the moment I mean like

00:25:26,420 --> 00:25:29,720
the radius 1 I just wrote because I

00:25:28,550 --> 00:25:32,420
could have never actually tried using

00:25:29,720 --> 00:25:34,970
radius in anger so if it'll explode on

00:25:32,420 --> 00:25:36,920
you in anger the ones the ones that I'm

00:25:34,970 --> 00:25:40,040
actually you know kind of using work

00:25:36,920 --> 00:25:42,020
well a load of you of us coming on I

00:25:40,040 --> 00:25:44,000
have to say I mean like I said this is

00:25:42,020 --> 00:25:45,710
really simple it's significantly dumber

00:25:44,000 --> 00:25:47,300
than log stash so you only get one

00:25:45,710 --> 00:25:50,120
thread so if you have a really high

00:25:47,300 --> 00:25:52,910
message volume then it's not going to

00:25:50,120 --> 00:25:55,010
paralyze at all whereas like the Ruby

00:25:52,910 --> 00:25:58,070
logstash totally well it'll use multiple

00:25:55,010 --> 00:26:00,880
calls and stuff but I mean for me this

00:25:58,070 --> 00:26:04,910
isn't a problem i 0 and Q is insanely

00:26:00,880 --> 00:26:06,200
ridiculously fast like i can ship tens

00:26:04,910 --> 00:26:09,950
and tens and tens of thousands of

00:26:06,200 --> 00:26:11,890
messages between to every second between

00:26:09,950 --> 00:26:14,030
two processes on like this low laptop

00:26:11,890 --> 00:26:17,240
including the Jason encoding and

00:26:14,030 --> 00:26:19,190
decoding huh which is pretty good and

00:26:17,240 --> 00:26:21,500
yeah it does actually work and other

00:26:19,190 --> 00:26:23,030
people using least production and so I

00:26:21,500 --> 00:26:28,160
mean I just stolen as my OC logs from

00:26:23,030 --> 00:26:29,780
yesterday here so yeah and there's a

00:26:28,160 --> 00:26:33,620
couple of people by already writing

00:26:29,780 --> 00:26:35,810
about us um so anyway what about log

00:26:33,620 --> 00:26:38,260
stash and yeah like what you kind of

00:26:35,810 --> 00:26:42,400
just asked I'm going to you

00:26:38,260 --> 00:26:45,280
but i do i am using both and so i have

00:26:42,400 --> 00:26:46,930
some stuff to take messages i'm i'm

00:26:45,280 --> 00:26:48,610
using like music storage in modernity

00:26:46,930 --> 00:26:50,920
structures but I have a really fairly

00:26:48,610 --> 00:26:52,210
simple filter that smashes the hash up a

00:26:50,920 --> 00:26:54,160
bit to make it look like a mess you

00:26:52,210 --> 00:26:55,900
produced by log stash and then you can

00:26:54,160 --> 00:26:59,560
feed it into elasticsearch and it kind

00:26:55,900 --> 00:27:02,200
of just works okay so cool this these

00:26:59,560 --> 00:27:04,000
kind of fail useful logging but also i

00:27:02,200 --> 00:27:05,950
mean there's a crapload of other things

00:27:04,000 --> 00:27:10,420
that you could use this for an absolute

00:27:05,950 --> 00:27:13,900
crap left so I mean I actually kind of

00:27:10,420 --> 00:27:17,020
have code that does all these things so

00:27:13,900 --> 00:27:19,570
and I like the bottom one actually hates

00:27:17,020 --> 00:27:21,220
to be pushed type notifications so this

00:27:19,570 --> 00:27:24,790
is really good for api's you know to

00:27:21,220 --> 00:27:27,790
stop people bullying I mean paypal ipn

00:27:24,790 --> 00:27:29,200
is a good example the Shopify one is the

00:27:27,790 --> 00:27:30,730
best one to look at if you want to steal

00:27:29,200 --> 00:27:32,890
something like this because I've got

00:27:30,730 --> 00:27:35,020
some really nice documentation but

00:27:32,890 --> 00:27:37,770
basically the message I send just like

00:27:35,020 --> 00:27:40,060
that it's just a URL and some data and

00:27:37,770 --> 00:27:41,500
then I have a component receives that

00:27:40,060 --> 00:27:44,580
and makes it easy to be post that

00:27:41,500 --> 00:27:52,300
contains that data to that URL and

00:27:44,580 --> 00:27:54,910
that's it basically okay so I've got all

00:27:52,300 --> 00:27:56,920
these adapters and this means that we

00:27:54,910 --> 00:27:59,500
can actually do like loads of different

00:27:56,920 --> 00:28:01,510
messaging patterns so there's all the

00:27:59,500 --> 00:28:04,600
things that any of these adapters

00:28:01,510 --> 00:28:07,510
support is pretty much available to you

00:28:04,600 --> 00:28:10,390
because all of the setup for this is

00:28:07,510 --> 00:28:13,870
just in the config and the wiring so you

00:28:10,390 --> 00:28:15,910
can have pub/sub where so I publish and

00:28:13,870 --> 00:28:17,890
one message goes to each subscriber or

00:28:15,910 --> 00:28:20,470
can have round-robin so I publish a

00:28:17,890 --> 00:28:22,890
message and it goes to one and then the

00:28:20,470 --> 00:28:25,090
next message goes to the next and etc

00:28:22,890 --> 00:28:27,510
you can do something like I was saying

00:28:25,090 --> 00:28:31,150
with partial subscribe subscriptions

00:28:27,510 --> 00:28:32,650
only so cool I think it's demo time

00:28:31,150 --> 00:28:34,780
again

00:28:32,650 --> 00:28:39,840
these demos do get gradually more

00:28:34,780 --> 00:28:55,870
interesting okay that one we've done Oh

00:28:39,840 --> 00:29:05,890
done I've got the wrong demo right so

00:28:55,870 --> 00:29:08,710
this is pub/sub which means that so if I

00:29:05,890 --> 00:29:10,770
stick something into my inputs then this

00:29:08,710 --> 00:29:13,810
should come out on both of the outputs

00:29:10,770 --> 00:29:19,380
and there we go let's come out on both

00:29:13,810 --> 00:29:26,080
the outputs wasn't that fun sorry oh

00:29:19,380 --> 00:29:28,420
thank you example in yes I I happen to

00:29:26,080 --> 00:29:30,340
be using stomp for this one just you

00:29:28,420 --> 00:29:35,100
know cuz I can I want to show you some

00:29:30,340 --> 00:29:35,100
of all the adapters that's the import

00:29:35,820 --> 00:29:42,490
quite a bit helps and that's the output

00:29:39,520 --> 00:29:44,650
that simile simple okay cool so that's

00:29:42,490 --> 00:29:45,940
that's pub sub and I just just happen to

00:29:44,650 --> 00:29:52,510
view stomp could have used any of the

00:29:45,940 --> 00:29:54,340
other things well and that's i'm using

00:29:52,510 --> 00:29:57,040
rabbit as the stomps over here but

00:29:54,340 --> 00:30:00,100
that's only because i mean it works

00:29:57,040 --> 00:30:02,260
apache activemq as well but i can do

00:30:00,100 --> 00:30:04,570
both my amqp and my stomp with rabbit

00:30:02,260 --> 00:30:05,770
and that's like I means I only have two

00:30:04,570 --> 00:30:07,480
message queuing servers the running i

00:30:05,770 --> 00:30:11,050
get three protocols and so it's easier

00:30:07,480 --> 00:30:12,910
for a demo yeah I couldn't be bothered

00:30:11,050 --> 00:30:17,440
to spinning up like activemq as well

00:30:12,910 --> 00:30:20,140
that was just being silly okay cool so

00:30:17,440 --> 00:30:22,410
let's do the same thing but with round

00:30:20,140 --> 00:30:22,410
robin

00:30:23,630 --> 00:30:40,010
example in i'm going to use their own

00:30:27,150 --> 00:30:43,800
cue for this warm out or run bats or out

00:30:40,010 --> 00:30:47,850
another copy of example out and if i

00:30:43,800 --> 00:30:54,540
send a message then it goes to exactly

00:30:47,850 --> 00:31:02,850
one of those if i send a different

00:30:54,540 --> 00:31:07,260
message and ha ha doubt hey it hates me

00:31:02,850 --> 00:31:08,700
clearly hey that got one there we go you

00:31:07,260 --> 00:31:10,380
know it's it's basically round-robin

00:31:08,700 --> 00:31:11,640
it's not necessarily going to be

00:31:10,380 --> 00:31:17,070
completely fair but it's totally good

00:31:11,640 --> 00:31:19,140
enough ok so that was all pretty dull

00:31:17,070 --> 00:31:25,680
actually as far as demos go sorry but us

00:31:19,140 --> 00:31:27,210
ah right so i was thinking about this

00:31:25,680 --> 00:31:31,200
now I was thinking ok all these demos

00:31:27,210 --> 00:31:34,560
are pretty weak pretty dull so let's see

00:31:31,200 --> 00:31:40,860
what we can do who knows this game yeah

00:31:34,560 --> 00:31:42,720
cool right so let's do that ok yeah i'm

00:31:40,860 --> 00:31:44,190
i mean III couldn't should have added

00:31:42,720 --> 00:31:46,650
more but this is already ridiculous

00:31:44,190 --> 00:31:47,910
enough so excuse me alive like run three

00:31:46,650 --> 00:31:49,650
or four scripts but am I going to send a

00:31:47,910 --> 00:31:57,270
message for like three message to use it

00:31:49,650 --> 00:31:58,980
wants just just as a cap oh ok let's see

00:31:57,270 --> 00:32:05,820
the source code first

00:31:58,980 --> 00:32:09,480
star so we have incident out stomp in

00:32:05,820 --> 00:32:21,890
store in stomp out ray this in red s out

00:32:09,480 --> 00:32:21,890
amqp in amqp out student cool one two

00:32:21,950 --> 00:32:28,130
three four

00:32:34,630 --> 00:32:43,640
there we go it's free message queues

00:32:38,150 --> 00:32:49,880
just like that okay cool so yeah I mean

00:32:43,640 --> 00:32:53,780
I quite like this but right now almost

00:32:49,880 --> 00:32:57,320
got a laugh almost but still still not

00:32:53,780 --> 00:33:02,809
there really I mean come on for demos so

00:32:57,320 --> 00:33:04,220
I guess how can i top this well okay

00:33:02,809 --> 00:33:09,770
let's do something really really really

00:33:04,220 --> 00:33:12,980
daft who's heard of mongrel too okay so

00:33:09,770 --> 00:33:14,830
so let's reinvent that really badly just

00:33:12,980 --> 00:33:18,799
because that's going to be funny right

00:33:14,830 --> 00:33:21,730
so who's heard of PSD I ok cool who

00:33:18,799 --> 00:33:25,520
knows what a PSD I environment is right

00:33:21,730 --> 00:33:27,919
yeah okay vaguely so so your PSD I

00:33:25,520 --> 00:33:29,929
environment it's just a hash you know

00:33:27,919 --> 00:33:33,169
and we can push hashes over a network

00:33:29,929 --> 00:33:34,789
right so yeah if you do a bit of

00:33:33,169 --> 00:33:39,650
fiddling about you can totally serialize

00:33:34,789 --> 00:33:41,360
a PSD all I request as Jason and the PSD

00:33:39,650 --> 00:33:44,419
our response just an array so you know

00:33:41,360 --> 00:33:46,970
obviously we can serialize that let's

00:33:44,419 --> 00:33:48,169
just ignore streaming responses as too

00:33:46,970 --> 00:33:51,890
complicated because we're doing this

00:33:48,169 --> 00:33:54,169
badly we already said okay so here's my

00:33:51,890 --> 00:33:57,169
example I'm going to have a mongrel to

00:33:54,169 --> 00:34:00,679
server and then I'm going to connect a

00:33:57,169 --> 00:34:02,030
handler to that and we'll use that round

00:34:00,679 --> 00:34:03,590
robin distribution so i can have

00:34:02,030 --> 00:34:06,140
multiple handlers and the multiple

00:34:03,590 --> 00:34:08,690
handlers connect to the front end server

00:34:06,140 --> 00:34:10,609
and they get round robin requests

00:34:08,690 --> 00:34:12,589
between them in each request contains

00:34:10,609 --> 00:34:16,369
inside it but serialize PhD I

00:34:12,589 --> 00:34:18,320
environment and like a reply to field so

00:34:16,369 --> 00:34:20,750
the handler then actually dispatch that

00:34:18,320 --> 00:34:25,220
against the PSD I application gets the

00:34:20,750 --> 00:34:28,040
response connects to the thing was asked

00:34:25,220 --> 00:34:29,720
to connect to come to respond backwards

00:34:28,040 --> 00:34:36,730
sends a response back and that goes back

00:34:29,720 --> 00:34:36,730
to the browser so cool let's try that it

00:34:38,080 --> 00:34:50,760
hey yo Jenga

00:34:42,409 --> 00:34:56,550
and so I show you my server okay that's

00:34:50,760 --> 00:34:58,350
my server and I've I wrote the most

00:34:56,550 --> 00:35:06,170
complicated psti a packet thing called

00:34:58,350 --> 00:35:09,780
just a demo this and here's my handler

00:35:06,170 --> 00:35:14,910
okay so I mean I'm yeah basically just

00:35:09,780 --> 00:35:16,650
using plaque over oh yeah I have a

00:35:14,910 --> 00:35:18,180
plaque up at one side and this is my

00:35:16,650 --> 00:35:21,150
server and this does a serialization

00:35:18,180 --> 00:35:23,600
stuff I am down here i have a specific

00:35:21,150 --> 00:35:40,160
like handler that i run against PSG on

00:35:23,600 --> 00:35:40,160
hey so and i need a browser

00:35:47,460 --> 00:36:03,839
Wow hey cool that works and you know I

00:36:02,609 --> 00:36:06,330
said we're going to ignore streaming

00:36:03,839 --> 00:36:11,250
responses well actually I make those

00:36:06,330 --> 00:36:15,000
work too so just to show that I've got a

00:36:11,250 --> 00:36:20,810
catalyst app and catalyst only speaks

00:36:15,000 --> 00:36:26,010
during response and I can run handler

00:36:20,810 --> 00:36:33,300
there we go over to cutter start and I

00:36:26,010 --> 00:36:39,359
can find my mouth okay cool gotta catch

00:36:33,300 --> 00:36:44,880
this up yeah and there we go works just

00:36:39,359 --> 00:36:46,440
like normal okay well that's that's it I

00:36:44,880 --> 00:36:48,210
really couldn't think of any sillier

00:36:46,440 --> 00:36:59,150
demos than that I'm sorry if that was

00:36:48,210 --> 00:36:59,150
disappointing okay cool questions yo

00:37:05,850 --> 00:37:14,520
um um that there's no such thing as

00:37:12,000 --> 00:37:15,960
reliable message delivery I mean

00:37:14,520 --> 00:37:17,580
whenever you have a messaging solution

00:37:15,960 --> 00:37:19,440
you're going to lose messages somewhere

00:37:17,580 --> 00:37:20,730
somehow even if it's completely durable

00:37:19,440 --> 00:37:23,610
and you have transactions and you're

00:37:20,730 --> 00:37:27,510
committing at some point you're going to

00:37:23,610 --> 00:37:29,160
have a server set on fire and the

00:37:27,510 --> 00:37:31,200
messages it had on disk even if it's

00:37:29,160 --> 00:37:33,480
committing them to disk go away so

00:37:31,200 --> 00:37:35,370
you're always move some messages but I

00:37:33,480 --> 00:37:37,890
mean the answer is you can I'm

00:37:35,370 --> 00:37:40,320
deliberately setting zeromq in up to

00:37:37,890 --> 00:37:43,410
throw messages away in my stuff you can

00:37:40,320 --> 00:37:44,880
explicitly unconvicted those options so

00:37:43,410 --> 00:37:52,020
rather than throwing message away it'll

00:37:44,880 --> 00:37:54,030
block and but I mean yeah a name QP you

00:37:52,020 --> 00:37:55,860
can ask the message to be durable and

00:37:54,030 --> 00:37:57,750
you cut your maximum message right by a

00:37:55,860 --> 00:38:00,600
factor of 10 but you message you're on

00:37:57,750 --> 00:38:03,660
disks if you sir the crashes and rub it

00:38:00,600 --> 00:38:06,240
mq will cluster stuff I it'll cluster so

00:38:03,660 --> 00:38:09,420
you can have a fairly reliable system if

00:38:06,240 --> 00:38:32,030
I go back to I approximately go back to

00:38:09,420 --> 00:38:36,990
my diagram one of my diagrams sorry um I

00:38:32,030 --> 00:38:39,150
I guess I mean there are some cases but

00:38:36,990 --> 00:38:40,980
I can't think of them right now I mean

00:38:39,150 --> 00:38:43,020
I'm I'm always happy with and I always

00:38:40,980 --> 00:38:44,190
try and architect and design for the

00:38:43,020 --> 00:38:48,210
fact we're going to throw message away

00:38:44,190 --> 00:38:49,830
at some point and I mean that means that

00:38:48,210 --> 00:38:52,680
you need to kind of keep state in a

00:38:49,830 --> 00:38:54,420
database or something so that you can

00:38:52,680 --> 00:38:56,850
regenerate message that went got thrown

00:38:54,420 --> 00:38:58,710
away or all you have to kind of just

00:38:56,850 --> 00:39:00,270
deal with the fact that they're gone but

00:38:58,710 --> 00:39:03,300
I mean one of the one of the really

00:39:00,270 --> 00:39:05,400
smart things that one of my directors

00:39:03,300 --> 00:39:06,510
said to me like a couple of years ago

00:39:05,400 --> 00:39:09,000
when I was just thinking about this

00:39:06,510 --> 00:39:13,290
stuff he's like Tom of billing system is

00:39:09,000 --> 00:39:15,810
share if we could bill for everything we

00:39:13,290 --> 00:39:17,310
could think off to Bill but we only have

00:39:15,810 --> 00:39:18,690
ninety percent of everybody's activity

00:39:17,310 --> 00:39:21,569
that would be much better

00:39:18,690 --> 00:39:23,430
you know if we throw away ten percent of

00:39:21,569 --> 00:39:25,140
our review but we can bill for

00:39:23,430 --> 00:39:28,079
everything's about systems more flexible

00:39:25,140 --> 00:39:29,579
then we win and I'm kind of that's the

00:39:28,079 --> 00:39:31,760
philosophy I've been thinking very stuff

00:39:29,579 --> 00:39:31,760
with

00:39:44,190 --> 00:39:47,490
yeah okay fair enough no I their planes

00:39:46,200 --> 00:39:49,890
there are plenty of environments where

00:39:47,490 --> 00:39:57,599
where this these compromises are not

00:39:49,890 --> 00:39:59,760
appropriate yeah exactly no I mean the

00:39:57,599 --> 00:40:02,400
if you if you're taking people's credit

00:39:59,760 --> 00:40:03,930
card numbers and I'm taking people's

00:40:02,400 --> 00:40:06,599
credit card numbers and your messaging

00:40:03,930 --> 00:40:07,950
is like part of the workflow for taking

00:40:06,599 --> 00:40:10,560
people's credit card numbers then you

00:40:07,950 --> 00:40:12,990
probably want your web servers to burn

00:40:10,560 --> 00:40:16,050
rather than not log you know AAA would

00:40:12,990 --> 00:40:17,490
be better to stop serving pages that are

00:40:16,050 --> 00:40:20,130
then take people's credit card numbers

00:40:17,490 --> 00:40:23,099
and throw them away so yeah sure there

00:40:20,130 --> 00:40:24,960
are plenty of examples but well I don't

00:40:23,099 --> 00:40:29,160
pass credit card numbers across Mystic

00:40:24,960 --> 00:40:32,220
Ewing cuz that's yeah yeah yeah and III

00:40:29,160 --> 00:40:46,380
get entirely useless like her great

00:40:32,220 --> 00:40:48,480
Gardens any more questions yep no that's

00:40:46,380 --> 00:40:50,730
that's that's a good question and the

00:40:48,480 --> 00:40:53,400
answer is not so well at the moment

00:40:50,730 --> 00:40:55,680
however yesterday I added yesterday the

00:40:53,400 --> 00:40:58,140
day before I did the generic concept of

00:40:55,680 --> 00:41:00,270
having an error output so I mean you

00:40:58,140 --> 00:41:01,680
have everything as before but every

00:41:00,270 --> 00:41:04,050
single component gets an error output

00:41:01,680 --> 00:41:05,640
and so if anything goes wrong it can

00:41:04,050 --> 00:41:08,339
duck component grab an exception and

00:41:05,640 --> 00:41:10,530
send the exceptions somewhere off to the

00:41:08,339 --> 00:41:13,740
side which I mean could quite possibly

00:41:10,530 --> 00:41:15,329
just loop back into itself and get

00:41:13,740 --> 00:41:18,270
locked I mean you can do whatever you

00:41:15,329 --> 00:41:21,329
like with that but but ya know there's

00:41:18,270 --> 00:41:23,940
there's initial support for being able

00:41:21,329 --> 00:41:26,220
to nicely handle everything going wrong

00:41:23,940 --> 00:41:27,690
and get logs from that I mean that's

00:41:26,220 --> 00:41:30,260
that's one of the big things I need to

00:41:27,690 --> 00:41:30,260
work on some more

00:41:34,590 --> 00:41:50,520
nope nope absolutely all sorry sorry

00:41:47,440 --> 00:42:03,910
there's a question about benchmarking oh

00:41:50,520 --> 00:42:05,170
okay yeah probably would you know

00:42:03,910 --> 00:42:08,160
what I mean one of the other things that

00:42:05,170 --> 00:42:10,480
I would like that I haven't done yet is

00:42:08,160 --> 00:42:14,200
had a set of filters that just kind of

00:42:10,480 --> 00:42:16,810
count aggregate stats so then took

00:42:14,200 --> 00:42:18,550
talking about the air well error or info

00:42:16,810 --> 00:42:19,990
channel i was looking about before you'd

00:42:18,550 --> 00:42:22,180
have something in the middle which were

00:42:19,990 --> 00:42:24,100
then every you know ten seconds emit a

00:42:22,180 --> 00:42:26,020
message saying that we're processing

00:42:24,100 --> 00:42:28,630
10,000 message the second or something

00:42:26,020 --> 00:42:37,630
and I mean out we dead easy to do I just

00:42:28,630 --> 00:42:39,580
haven't got there yet no no no way they

00:42:37,630 --> 00:42:42,280
explicitly North a'tall you can totally

00:42:39,580 --> 00:42:43,840
do that sort of thing I mean the only

00:42:42,280 --> 00:42:45,580
example I've actually gotten a

00:42:43,840 --> 00:42:49,260
distribution of that at the moment is as

00:42:45,580 --> 00:42:51,550
a filter which delays mate for n seconds

00:42:49,260 --> 00:42:54,700
you know so you send a message in and it

00:42:51,550 --> 00:42:56,800
only comes out 10 seconds later I and

00:42:54,700 --> 00:42:58,120
that's I mean that's like 10 lines of

00:42:56,800 --> 00:43:01,480
code or something but yet they're doing

00:42:58,120 --> 00:43:05,730
something to get counts and you know

00:43:01,480 --> 00:43:05,730
stats would be you can do exactly that

00:43:12,210 --> 00:43:21,390
um the next step is to find a new

00:43:16,740 --> 00:43:24,180
maintainer for it clearly no I mean

00:43:21,390 --> 00:43:27,930
being serious I want to add a load more

00:43:24,180 --> 00:43:29,280
q's I want people to like try reading

00:43:27,930 --> 00:43:30,810
the documentation because I have

00:43:29,280 --> 00:43:35,250
actually written documentation for this

00:43:30,810 --> 00:43:37,619
but I need to be told why it sucks and

00:43:35,250 --> 00:43:39,690
so I guess the next step is getting into

00:43:37,619 --> 00:43:41,550
a point where you know people can just

00:43:39,690 --> 00:43:43,859
find a distribution on cpap and pick it

00:43:41,550 --> 00:43:45,900
up and go and I mean I'm hoping it's not

00:43:43,859 --> 00:43:48,270
that far off certainly like I mean I

00:43:45,900 --> 00:43:51,390
showed a slide with you know one of the

00:43:48,270 --> 00:43:52,680
guys I know I used to work with he seems

00:43:51,390 --> 00:43:55,920
to have picked up and be running with it

00:43:52,680 --> 00:43:58,800
so I can't be that far away but now that

00:43:55,920 --> 00:44:01,920
the more adapters more adapters are more

00:43:58,800 --> 00:44:04,500
handling exceptional conditions and yeah

00:44:01,920 --> 00:44:08,310
things things like slippers should just

00:44:04,500 --> 00:44:17,880
be in core like message counts and you

00:44:08,310 --> 00:44:20,070
know better filters and etc i'm i'm

00:44:17,880 --> 00:44:22,260
using out well I've got code that does

00:44:20,070 --> 00:44:27,420
the index in myself but I'm also using

00:44:22,260 --> 00:44:29,760
log stash so kind of amusingly I my

00:44:27,420 --> 00:44:32,010
index are here I have a look / running

00:44:29,760 --> 00:44:33,480
at the store pausing but actually have

00:44:32,010 --> 00:44:37,260
my own code doing the indexing of

00:44:33,480 --> 00:44:40,109
elastic search which is mostly for well

00:44:37,260 --> 00:44:42,810
a historical reasons and be kind of

00:44:40,109 --> 00:44:44,910
failover because well actually do here

00:44:42,810 --> 00:44:47,640
is I split the log stream and everyone

00:44:44,910 --> 00:44:48,930
my log messages has a uuid and so I just

00:44:47,640 --> 00:44:51,660
insert everything in plastic searched

00:44:48,930 --> 00:44:56,910
twice which means that if one of the

00:44:51,660 --> 00:44:58,109
boxes falls over nothing Nexus a band

00:44:56,910 --> 00:45:01,619
you know astok search because everyone's

00:44:58,109 --> 00:45:03,510
got a uuid the hoops stuff so it means I

00:45:01,619 --> 00:45:04,950
have got this I've what I've got

00:45:03,510 --> 00:45:06,780
RabbitMQ day I've also got a rabbit

00:45:04,950 --> 00:45:08,310
cluster so it actually means that while

00:45:06,780 --> 00:45:09,990
i'm saying i can throw messages away

00:45:08,310 --> 00:45:11,820
this is a pretty bloody reliable

00:45:09,990 --> 00:45:14,980
solution actually you know i can lose

00:45:11,820 --> 00:45:17,300
one of my message brokers I can lose

00:45:14,980 --> 00:45:20,840
want a classic search servers can lose

00:45:17,300 --> 00:45:32,590
on the indexers whatever can go away and

00:45:20,840 --> 00:45:35,300
I still have meant I my sister and I

00:45:32,590 --> 00:45:39,620
about well up to about 25 million

00:45:35,300 --> 00:45:44,330
message today and that is using about

00:45:39,620 --> 00:45:48,590
twenty percent of one core on 2.7 gig

00:45:44,330 --> 00:45:50,990
machine that's four years old yeah so so

00:45:48,590 --> 00:45:52,610
I don't actually know where how I

00:45:50,990 --> 00:45:55,280
haven't done any timings for how many

00:45:52,610 --> 00:45:58,310
messages you could push through it

00:45:55,280 --> 00:46:01,280
because it's buddy fast enough for me

00:45:58,310 --> 00:46:03,620
totally fast enough for me so are you

00:46:01,280 --> 00:46:08,990
know by orders of magnitude have it's

00:46:03,620 --> 00:46:13,240
fast enough I know everything that's

00:46:08,990 --> 00:46:13,240
logged in any way from hundreds of hosts

00:46:20,810 --> 00:46:28,480
you know else ok I think that's it

00:46:25,610 --> 00:46:28,480

YouTube URL: https://www.youtube.com/watch?v=N1RrTS5pfEk


