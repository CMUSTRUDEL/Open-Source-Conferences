Title: Mark Fowler   Exceptional Exceptions
Publication date: 2013-08-20
Playlist: YAPC::NA 2012
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:05,549
and when I have a venue which has

00:00:02,310 --> 00:00:07,970
bandwidth all right we might as well get

00:00:05,549 --> 00:00:12,540
going hope everyone had a good lunch

00:00:07,970 --> 00:00:16,560
this is exceptional exceptions and Who

00:00:12,540 --> 00:00:18,779
am I well I'm mark fowler um I'm not

00:00:16,560 --> 00:00:23,250
that fictional guy I'm not the serial

00:00:18,779 --> 00:00:25,519
killer not a kickboxer no university

00:00:23,250 --> 00:00:27,930
lecturer I'm just another pearl hacker

00:00:25,519 --> 00:00:30,179
I'm next lead of London p.m. as you can

00:00:27,930 --> 00:00:32,329
tell I've got the funny accent I created

00:00:30,179 --> 00:00:35,100
for advent calendar and I spoken at

00:00:32,329 --> 00:00:37,350
thank you I spoke in a poll conferences

00:00:35,100 --> 00:00:40,200
for over 10 years and at the moment I'm

00:00:37,350 --> 00:00:43,860
employed by omni TI who you may have

00:00:40,200 --> 00:00:47,309
remembered from brains in your bags the

00:00:43,860 --> 00:00:50,420
surge conference omni oz orsak onus the

00:00:47,309 --> 00:00:54,840
monitoring solution and we're hiring

00:00:50,420 --> 00:00:59,760
right I but over back in Vienna in 2007

00:00:54,840 --> 00:01:02,570
I gave this talk about how pearl sucks

00:00:59,760 --> 00:01:05,460
and of course what to do about it and

00:01:02,570 --> 00:01:08,580
some people listen to me that one of the

00:01:05,460 --> 00:01:10,860
things i said was i really want to kill

00:01:08,580 --> 00:01:13,020
pearls exception handling back in 2007

00:01:10,860 --> 00:01:17,100
called her terrible exception handling

00:01:13,020 --> 00:01:18,479
but now it's 2012 and things are a lot

00:01:17,100 --> 00:01:19,979
better so i'm here to tell you everyone

00:01:18,479 --> 00:01:22,890
it's great and you should all use the

00:01:19,979 --> 00:01:25,049
new stuff but before we get to that

00:01:22,890 --> 00:01:28,979
let's go back in time let's go back to

00:01:25,049 --> 00:01:31,259
the good old days of dinosaurs and the

00:01:28,979 --> 00:01:32,790
beginnings of pearl when people thought

00:01:31,259 --> 00:01:35,640
they had an idea of how to handle

00:01:32,790 --> 00:01:39,990
problems in their code they would return

00:01:35,640 --> 00:01:45,090
undef or return 0 or return an empty

00:01:39,990 --> 00:01:47,189
list or return false this got enshrined

00:01:45,090 --> 00:01:49,979
in a lot of things like opening files

00:01:47,189 --> 00:01:51,540
returns false when it fails making it

00:01:49,979 --> 00:01:54,960
actually returns false when it fails

00:01:51,540 --> 00:01:57,420
changed dir returns false when it fails

00:01:54,960 --> 00:02:00,149
in fact printing returns false when it

00:01:57,420 --> 00:02:02,460
fails and it got taken into third-party

00:02:00,149 --> 00:02:05,000
module so the dbi for example returns

00:02:02,460 --> 00:02:07,680
false if it can't process the SQL and

00:02:05,000 --> 00:02:10,410
template toolkit returns false if

00:02:07,680 --> 00:02:17,460
there's a problem with your template

00:02:10,410 --> 00:02:22,590
this sucks let me list the ways it is

00:02:17,460 --> 00:02:24,600
tedious okay there's a problem with my

00:02:22,590 --> 00:02:29,310
father handed I need to I need to check

00:02:24,600 --> 00:02:30,930
that the open works not too bad let's

00:02:29,310 --> 00:02:35,820
make a direction put a file in it oh

00:02:30,930 --> 00:02:37,860
there's a few ones there yes that gets

00:02:35,820 --> 00:02:40,710
old real quick um they're not

00:02:37,860 --> 00:02:46,250
particularly informative there's a

00:02:40,710 --> 00:02:51,690
problem yeah the problem a problem

00:02:46,250 --> 00:02:53,550
problem what problem what problem okay

00:02:51,690 --> 00:02:55,950
so you need to go look in dollar pling

00:02:53,550 --> 00:03:00,210
in this example dollar bank depending if

00:02:55,950 --> 00:03:02,610
you're a mathematician or a linguist and

00:03:00,210 --> 00:03:04,920
then you can find the problem with fire

00:03:02,610 --> 00:03:08,400
handles and if you're using the dbi you

00:03:04,920 --> 00:03:10,680
need to go look in astre easy to

00:03:08,400 --> 00:03:12,300
pronounce that one or in template

00:03:10,680 --> 00:03:14,160
toolkit you need to look in error so

00:03:12,300 --> 00:03:16,350
there's all these out-of-band details

00:03:14,160 --> 00:03:18,780
and you have to know where they are and

00:03:16,350 --> 00:03:20,130
you if you want to pass that around you

00:03:18,780 --> 00:03:21,990
have to gather them all up and pass them

00:03:20,130 --> 00:03:23,280
around and believe i'm not writing

00:03:21,990 --> 00:03:29,760
modules which do this is also

00:03:23,280 --> 00:03:31,500
complicated so third there i can think

00:03:29,760 --> 00:03:34,470
of a good word for this rageful you

00:03:31,500 --> 00:03:37,110
think this is tedious okay let's write a

00:03:34,470 --> 00:03:39,420
parser we're going to process a file and

00:03:37,110 --> 00:03:40,890
that's going to call pars header that's

00:03:39,420 --> 00:03:42,120
going to call pars line and that's going

00:03:40,890 --> 00:03:44,610
to cause prior statement and that's

00:03:42,120 --> 00:03:47,310
going to cause pars function and that's

00:03:44,610 --> 00:03:48,720
going to have a problem now if these

00:03:47,310 --> 00:03:50,400
things are returning undeath or

00:03:48,720 --> 00:03:52,170
something we have to put her none dev

00:03:50,400 --> 00:03:55,320
then check with us their return undef

00:03:52,170 --> 00:03:56,520
check what happened turn now what you

00:03:55,320 --> 00:03:57,810
really want to do is that you want to

00:03:56,520 --> 00:04:01,440
jump right back up the process and

00:03:57,810 --> 00:04:02,820
pharmacy this file is no good you can't

00:04:01,440 --> 00:04:04,500
do that with just passive returning

00:04:02,820 --> 00:04:09,239
undef so in summary tedious

00:04:04,500 --> 00:04:11,459
uninformative rageful annoying so let's

00:04:09,239 --> 00:04:14,250
talk about exceptions which luckily is

00:04:11,459 --> 00:04:16,320
what I'm here to talk about who could we

00:04:14,250 --> 00:04:19,229
ask how to solve this haven't been a

00:04:16,320 --> 00:04:20,850
nice who said if there's a problem yo

00:04:19,229 --> 00:04:23,539
I'll solve it so he sounds like he knows

00:04:20,850 --> 00:04:26,659
what he's talking about it

00:04:23,539 --> 00:04:28,770
he also said stop collaborate and listen

00:04:26,659 --> 00:04:30,780
which is actually what exception

00:04:28,770 --> 00:04:32,280
handling is about you stop doing what

00:04:30,780 --> 00:04:33,150
you're doing and you collaborate with

00:04:32,280 --> 00:04:35,400
some code that you've previously

00:04:33,150 --> 00:04:38,340
registered that's listening for errors

00:04:35,400 --> 00:04:40,500
it's the throw and catch methodology you

00:04:38,340 --> 00:04:41,759
you throw the error and you can't you

00:04:40,500 --> 00:04:43,469
have a catcher's mitt of code which

00:04:41,759 --> 00:04:47,219
catches it now let's talk about a

00:04:43,469 --> 00:04:49,409
wonderful programming language a Java

00:04:47,219 --> 00:04:52,469
which actually does have a really nice

00:04:49,409 --> 00:04:56,330
exceptional handling syntax so we have

00:04:52,469 --> 00:04:59,819
these trying catch blocks here and

00:04:56,330 --> 00:05:02,279
everything within the trial and then in

00:04:59,819 --> 00:05:04,529
the tri bug is a kind of area where

00:05:02,279 --> 00:05:06,840
exceptions can be thrown and then the

00:05:04,529 --> 00:05:08,939
catch block below it handles it so let's

00:05:06,840 --> 00:05:10,560
look let's throw an exception that this

00:05:08,939 --> 00:05:13,080
is how you doing job I say throw a new

00:05:10,560 --> 00:05:14,870
exception a problem and then we jump

00:05:13,080 --> 00:05:17,340
immediately to this error handling here

00:05:14,870 --> 00:05:20,159
which it just prints out there was an

00:05:17,340 --> 00:05:25,650
error but it's jumps this code here is

00:05:20,159 --> 00:05:27,930
never executed and of course you don't

00:05:25,650 --> 00:05:30,900
just have to say throw in this it's any

00:05:27,930 --> 00:05:32,849
code that is called from within this try

00:05:30,900 --> 00:05:34,949
block can throw an exception which will

00:05:32,849 --> 00:05:38,460
be caught by this try block so this is

00:05:34,949 --> 00:05:40,379
possible this the pars functions throws

00:05:38,460 --> 00:05:43,080
the exception and process file catches

00:05:40,379 --> 00:05:45,330
it it's also worth noting force a

00:05:43,080 --> 00:05:50,639
language of really nice throw semantics

00:05:45,330 --> 00:05:52,110
they don't know how to spell print but

00:05:50,639 --> 00:05:54,569
let's let's look at something excessive

00:05:52,110 --> 00:05:56,099
coppell so what do you think happens in

00:05:54,569 --> 00:05:59,129
Perl oh yeah there's more than one way

00:05:56,099 --> 00:06:00,270
to do it there's a fact there's a lots

00:05:59,129 --> 00:06:02,310
of ways to do it let's talk about the

00:06:00,270 --> 00:06:11,800
top three ways to do it there's a vowel

00:06:02,310 --> 00:06:15,430
try tiny and catch so it so FL

00:06:11,800 --> 00:06:18,460
a bell doesn't actually have a try it

00:06:15,430 --> 00:06:20,110
has things which map to other things

00:06:18,460 --> 00:06:24,699
that let's just show you an example is

00:06:20,110 --> 00:06:27,490
easier so eval and then if so this eval

00:06:24,699 --> 00:06:29,919
is our try block this is where

00:06:27,490 --> 00:06:32,680
exceptions can happen and they will be

00:06:29,919 --> 00:06:35,379
caught but we don't have a catch block

00:06:32,680 --> 00:06:37,539
what we have is a dollar at so an

00:06:35,379 --> 00:06:39,009
exception is caught it's shoved in

00:06:37,539 --> 00:06:42,220
dollar at and if there was no exception

00:06:39,009 --> 00:06:45,280
the about clears the exception sticking

00:06:42,220 --> 00:06:47,229
undef in dollar at and you can inspect

00:06:45,280 --> 00:06:48,729
the heavy one if is good enough for here

00:06:47,229 --> 00:06:52,150
but we'll get on to more advanced ways

00:06:48,729 --> 00:06:54,969
and then we have died which is how you

00:06:52,150 --> 00:06:58,509
throw an exception so this is all ugly

00:06:54,969 --> 00:07:00,659
reused syntax which sucks if val is

00:06:58,509 --> 00:07:03,669
really often confused with eval string

00:07:00,659 --> 00:07:06,550
which is how you compile compile code

00:07:03,669 --> 00:07:11,229
within po code not how you have a knot

00:07:06,550 --> 00:07:13,560
it doesn't act as a try block and oh you

00:07:11,229 --> 00:07:15,430
have this die statement which means

00:07:13,560 --> 00:07:17,169
terminate the program with this error

00:07:15,430 --> 00:07:18,880
message to everybody not throw an

00:07:17,169 --> 00:07:22,569
exception that will be caught and then

00:07:18,880 --> 00:07:26,229
you have this semi colon which you will

00:07:22,569 --> 00:07:29,409
forget because if our statement is not a

00:07:26,229 --> 00:07:31,539
block it's a statement which is a fancy

00:07:29,409 --> 00:07:33,909
way of saying you need a semicolon after

00:07:31,539 --> 00:07:37,719
it so let's look at some of the

00:07:33,909 --> 00:07:41,650
alternatives try tiny early modern

00:07:37,719 --> 00:07:44,529
module with much much better syntax the

00:07:41,650 --> 00:07:48,279
try block is called try the catch block

00:07:44,529 --> 00:07:51,940
is called catch they still have the

00:07:48,279 --> 00:07:53,860
semicolon the error instead of being

00:07:51,940 --> 00:07:58,360
shoved in dollar at is simply surely

00:07:53,860 --> 00:08:01,779
shoved in dollar underscore so it's a

00:07:58,360 --> 00:08:03,819
simple extension to the syntax using

00:08:01,779 --> 00:08:05,610
dollars to underscore at the key thing

00:08:03,819 --> 00:08:08,770
to know about try tiny is it's a very

00:08:05,610 --> 00:08:10,800
tiny module um it has no non-core

00:08:08,770 --> 00:08:13,900
dependences and it's pure pearl and

00:08:10,800 --> 00:08:15,279
doesn't use any tricks to do what it

00:08:13,900 --> 00:08:19,389
does well it does use a few tricks let's

00:08:15,279 --> 00:08:23,080
look under the hood hood brutally that

00:08:19,389 --> 00:08:25,180
is really that so what you're actually

00:08:23,080 --> 00:08:26,440
doing is using clever proto

00:08:25,180 --> 00:08:28,750
types on your functions to pass in

00:08:26,440 --> 00:08:30,729
subroutine references why that's

00:08:28,750 --> 00:08:33,370
important will become clear later but

00:08:30,729 --> 00:08:35,890
anyway let's talk about something a bit

00:08:33,370 --> 00:08:42,039
more clever than try tiny let's talk

00:08:35,890 --> 00:08:44,940
about try-catch try catch looks pretty

00:08:42,039 --> 00:08:47,620
much the same to be honest at this level

00:08:44,940 --> 00:08:53,320
try and catch are called try and catch

00:08:47,620 --> 00:08:56,350
and there's no semicolon hooray and we

00:08:53,320 --> 00:09:01,120
have named exception variables but

00:08:56,350 --> 00:09:04,990
essentially is the same thing is try

00:09:01,120 --> 00:09:07,360
catch is actually introducing new syntax

00:09:04,990 --> 00:09:10,270
into the into the language try tiny is

00:09:07,360 --> 00:09:14,500
just wrapping up subroutines and getting

00:09:10,270 --> 00:09:16,420
away with it try catches is bring your

00:09:14,500 --> 00:09:18,459
whole sections of new functionality in

00:09:16,420 --> 00:09:20,649
there but to do that it drags in

00:09:18,459 --> 00:09:24,430
incredibly number of dependencies not to

00:09:20,649 --> 00:09:25,899
mention moose and devel declare which

00:09:24,430 --> 00:09:28,540
will manipulate your source code in fact

00:09:25,899 --> 00:09:30,970
if we look under the hood it uses dil de

00:09:28,540 --> 00:09:32,589
Velde ketek in implement custom

00:09:30,970 --> 00:09:35,170
extensions to the pole compiler to add

00:09:32,589 --> 00:09:38,020
new syntax which is a scary way of

00:09:35,170 --> 00:09:41,260
saying it does scary things but it's

00:09:38,020 --> 00:09:42,640
fast is much much faster than then try

00:09:41,260 --> 00:09:44,709
tiny because it doesn't have those

00:09:42,640 --> 00:09:47,020
subroutine overheads it produces

00:09:44,709 --> 00:09:50,500
bytecode which looks pretty much like in

00:09:47,020 --> 00:09:55,300
a vowel generates by code um let's look

00:09:50,500 --> 00:09:58,900
at some benchmarks so a vow was pretty

00:09:55,300 --> 00:10:02,350
fast try Chinese about 25 times slower

00:09:58,900 --> 00:10:07,720
than eval and try catch is about bout a

00:10:02,350 --> 00:10:09,400
quarter slower so try catch isn't that

00:10:07,720 --> 00:10:11,200
much slower than eval considering the

00:10:09,400 --> 00:10:15,370
extra functionality it gives you which

00:10:11,200 --> 00:10:20,440
I'll get to well now let's talk about

00:10:15,370 --> 00:10:21,820
read throwing errors so we've had enough

00:10:20,440 --> 00:10:23,560
Star Trek references right now that's

00:10:21,820 --> 00:10:24,940
too let's do a star wars one and we're

00:10:23,560 --> 00:10:26,890
going to get them my name falcom up to

00:10:24,940 --> 00:10:29,050
Lightspeed so we call jump to Lightspeed

00:10:26,890 --> 00:10:32,220
and if there's a problem that's going to

00:10:29,050 --> 00:10:35,650
throw an exception saying I don't know I

00:10:32,220 --> 00:10:37,450
the fast and light drive isn't working

00:10:35,650 --> 00:10:38,720
and if it doesn't work we're going to

00:10:37,450 --> 00:10:40,980
get Chewie to fix it

00:10:38,720 --> 00:10:43,320
so we're expecting something like can't

00:10:40,980 --> 00:10:45,720
jump to light speed up line whatever but

00:10:43,320 --> 00:10:47,279
we're not just catching that we're also

00:10:45,720 --> 00:10:48,930
capturing all other exceptions like

00:10:47,279 --> 00:10:51,029
can't call method jump to Lightspeed on

00:10:48,930 --> 00:10:53,850
an undefined value at la taupe we forgot

00:10:51,029 --> 00:10:55,380
to define the melon falken and we don't

00:10:53,850 --> 00:10:56,910
want to do do we don't want to get you

00:10:55,380 --> 00:11:01,950
to fix it because he'll just a rule

00:10:56,910 --> 00:11:04,260
because he doesn't know where it is so

00:11:01,950 --> 00:11:06,300
we only want to handle exceptions we

00:11:04,260 --> 00:11:09,570
want to handle and all other exceptions

00:11:06,300 --> 00:11:12,779
need to be propagated somehow you can do

00:11:09,570 --> 00:11:15,930
this with Val where you just have

00:11:12,779 --> 00:11:19,380
difficult to read structures um I'm

00:11:15,930 --> 00:11:21,839
doing a simple check of this and then if

00:11:19,380 --> 00:11:23,519
it's not working I'm calling die with no

00:11:21,839 --> 00:11:26,279
arguments which basically means just

00:11:23,519 --> 00:11:30,209
wreath row what the exception is you can

00:11:26,279 --> 00:11:32,579
do the same with try tiny same kind of

00:11:30,209 --> 00:11:33,720
thing except i have this return here

00:11:32,579 --> 00:11:36,450
because i'm returning out of that

00:11:33,720 --> 00:11:38,700
subroutine so i'm saying i'm done and

00:11:36,450 --> 00:11:48,860
then and if i get to the end well i just

00:11:38,700 --> 00:11:48,860
died try catch how would you fall out

00:11:49,880 --> 00:12:07,350
and then eat the error they would then

00:11:55,050 --> 00:12:15,000
eat the exception yes and if I and if I

00:12:07,350 --> 00:12:16,680
don't die at the end of this otherwise

00:12:15,000 --> 00:12:19,680
I'm going to die because I'm gonna get

00:12:16,680 --> 00:12:21,930
to the end of the year and I'll die so

00:12:19,680 --> 00:12:24,600
the point is that the question was do I

00:12:21,930 --> 00:12:25,829
really can i not rearrange the structure

00:12:24,600 --> 00:12:28,320
somehow then the answer is not really

00:12:25,829 --> 00:12:32,610
because i need to die at the end of this

00:12:28,320 --> 00:12:36,930
if I haven't handled it try catch is

00:12:32,610 --> 00:12:38,850
much better try catch I can have as many

00:12:36,930 --> 00:12:40,320
of these catch blocks as I want and each

00:12:38,850 --> 00:12:42,660
catch block can decide whether it's

00:12:40,320 --> 00:12:44,699
going to file or not and if it doesn't

00:12:42,660 --> 00:12:47,399
fire it will wreath row the error

00:12:44,699 --> 00:12:50,029
automatically so in this case I am

00:12:47,399 --> 00:12:52,760
examining I'm saying this is a where

00:12:50,029 --> 00:12:58,050
dollar underscore which is the exception

00:12:52,760 --> 00:13:00,180
matches can't jump so that's a lightning

00:12:58,050 --> 00:13:03,690
tour of the three modules of two modules

00:13:00,180 --> 00:13:05,010
and the internal syntax let's look at

00:13:03,690 --> 00:13:08,100
some of the reasons why you might want

00:13:05,010 --> 00:13:15,030
to use them beyond I prefer the new

00:13:08,100 --> 00:13:17,100
syntax um destroyed bug mater we all

00:13:15,030 --> 00:13:18,540
know what that is oh I'm going to take a

00:13:17,100 --> 00:13:21,330
quick side to explain what the story is

00:13:18,540 --> 00:13:26,010
um so when an object is garbage

00:13:21,330 --> 00:13:30,140
collected i destroy method exists on it

00:13:26,010 --> 00:13:32,280
it is called again II um easier to

00:13:30,140 --> 00:13:35,310
explore they tend to be used for things

00:13:32,280 --> 00:13:38,660
like closing database handles deleting

00:13:35,310 --> 00:13:41,520
lock files writing contents out to file

00:13:38,660 --> 00:13:43,680
anyway doesn't really matter why that's

00:13:41,520 --> 00:13:45,360
just look at what happened so it it

00:13:43,680 --> 00:13:47,940
there's nothing super magical it's just

00:13:45,360 --> 00:13:50,250
called sub destroy and in so some other

00:13:47,940 --> 00:13:51,870
club of some class or other when it is

00:13:50,250 --> 00:13:53,850
garbage collected sub story will be

00:13:51,870 --> 00:13:57,690
called so if we look at that running an

00:13:53,850 --> 00:14:00,810
example we create it we can print

00:13:57,690 --> 00:14:04,860
something else show where we are then we

00:14:00,810 --> 00:14:07,320
then when we fall out of this this type

00:14:04,860 --> 00:14:09,420
block here the food's falls out of scope

00:14:07,320 --> 00:14:12,030
is garbage collected and our destroy

00:14:09,420 --> 00:14:13,650
routine is triggered causing object

00:14:12,030 --> 00:14:16,080
destroy to be print out and then we can

00:14:13,650 --> 00:14:18,320
print out program done so it's a kind of

00:14:16,080 --> 00:14:21,180
hidden statement you don't get to see

00:14:18,320 --> 00:14:26,520
there's no code there but it happens um

00:14:21,180 --> 00:14:28,470
and of course moose being moose it's not

00:14:26,520 --> 00:14:30,270
called destroy it's called demolish but

00:14:28,470 --> 00:14:35,640
let's not worry about that it's just the

00:14:30,270 --> 00:14:39,350
same thing what happens if we eval in

00:14:35,640 --> 00:14:43,050
the middle of that demolish block well

00:14:39,350 --> 00:14:48,710
okay let's try it um will create some

00:14:43,050 --> 00:14:52,440
class own of another will will will die

00:14:48,710 --> 00:14:54,840
which raises the exception and then of

00:14:52,440 --> 00:14:58,050
course we jump out of the avowal block

00:14:54,840 --> 00:15:00,660
because we're jumping to because we're

00:14:58,050 --> 00:15:04,230
terminating but at that point we jump

00:15:00,660 --> 00:15:05,880
into the demolished block run a

00:15:04,230 --> 00:15:08,730
different eval

00:15:05,880 --> 00:15:12,150
which completes successfully and then we

00:15:08,730 --> 00:15:16,920
go back to wear this if is now what does

00:15:12,150 --> 00:15:20,310
dollar at container does it contain the

00:15:16,920 --> 00:15:23,130
error from the above eval or the one in

00:15:20,310 --> 00:15:28,200
demolish which didn't have an error well

00:15:23,130 --> 00:15:31,230
the answer that is it depends on 5 12 13

00:15:28,200 --> 00:15:33,870
it contains the it contains the one in

00:15:31,230 --> 00:15:35,250
the demolished block in 514 it does the

00:15:33,870 --> 00:15:38,280
more logical thing and says there's an

00:15:35,250 --> 00:15:42,930
error it restores the dollar at when it

00:15:38,280 --> 00:15:45,270
gets at back out at the end the top you

00:15:42,930 --> 00:15:48,450
can work around this kind of thing with

00:15:45,270 --> 00:15:53,190
eval there are numerous techniques the

00:15:48,450 --> 00:15:55,560
simplest is this I make do and making

00:15:53,190 --> 00:15:58,230
use of the fact that eval will turn the

00:15:55,560 --> 00:16:02,280
last thing in it which in this case will

00:15:58,230 --> 00:16:03,840
be 1 so if owl and always return 1 if I

00:16:02,280 --> 00:16:05,430
got to the end but if I didn't get to

00:16:03,840 --> 00:16:09,390
the end an exception happened a vow

00:16:05,430 --> 00:16:12,780
would return undef so I would then

00:16:09,390 --> 00:16:14,370
trigger the the dude blog and I can

00:16:12,780 --> 00:16:15,600
guarantee the do block will be called of

00:16:14,370 --> 00:16:17,160
course I don't know really what went

00:16:15,600 --> 00:16:21,150
wrong because dollar at has disappeared

00:16:17,160 --> 00:16:22,920
on me that's a really nasty way to do it

00:16:21,150 --> 00:16:27,810
um it's easier just used to write tiny

00:16:22,920 --> 00:16:29,400
or try catch and they work they use

00:16:27,810 --> 00:16:31,410
techniques to get around this which you

00:16:29,400 --> 00:16:32,730
would never ever write out by hand every

00:16:31,410 --> 00:16:40,430
time you are going to write Annabel

00:16:32,730 --> 00:16:44,730
block what else out the return problem

00:16:40,430 --> 00:16:48,420
okay imagine that I have a cache and in

00:16:44,730 --> 00:16:50,670
it I'm storing food as and I call get

00:16:48,420 --> 00:16:52,080
food I'm perfectly fine but say I

00:16:50,670 --> 00:16:54,360
suddenly decided want to populate the

00:16:52,080 --> 00:16:55,680
cash if it's not in there and my cash

00:16:54,360 --> 00:17:01,770
will throw an exception to indicate I

00:16:55,680 --> 00:17:05,250
don't have food so i write this where

00:17:01,770 --> 00:17:12,329
does that return return from it returns

00:17:05,250 --> 00:17:16,860
from the avowal statement so this code

00:17:12,329 --> 00:17:19,799
here which it always gets run

00:17:16,860 --> 00:17:26,720
so this just doesn't work the return

00:17:19,799 --> 00:17:26,720
here can't get out of the subroutine so

00:17:27,439 --> 00:17:33,030
see we can rewrap it like this where my

00:17:30,809 --> 00:17:36,360
foo equals the return value from the

00:17:33,030 --> 00:17:40,260
eval and return food if there is a foo

00:17:36,360 --> 00:17:43,020
and lo behold of get was who was 0

00:17:40,260 --> 00:17:46,710
that's not going to work but you get the

00:17:43,020 --> 00:17:50,010
gist of what was going on try tiny also

00:17:46,710 --> 00:17:51,480
doesn't work these are these blocks here

00:17:50,010 --> 00:17:53,520
to try and these blocks to catch our

00:17:51,480 --> 00:17:59,549
subroutine calls I'm returning from the

00:17:53,520 --> 00:18:03,510
subroutine I pass to try tiny uh yeah he

00:17:59,549 --> 00:18:07,440
fix it the same way um try catch this

00:18:03,510 --> 00:18:09,000
works hooray because that's not really a

00:18:07,440 --> 00:18:09,960
block it some really complicated thing

00:18:09,000 --> 00:18:13,230
that you don't want to deposit but

00:18:09,960 --> 00:18:15,870
anyway it works and you can return out

00:18:13,230 --> 00:18:17,940
and this makes your code much easier to

00:18:15,870 --> 00:18:19,200
write especially if you're like me and

00:18:17,940 --> 00:18:23,940
you will tend to write lots and lots of

00:18:19,200 --> 00:18:26,160
small tiny subroutines doesn't it almost

00:18:23,940 --> 00:18:30,090
works everywhere you would expect here

00:18:26,160 --> 00:18:32,160
this last to exit from there it doesn't

00:18:30,090 --> 00:18:34,169
it exits halfway through the try block

00:18:32,160 --> 00:18:40,770
and gives you a nice terror but it

00:18:34,169 --> 00:18:42,990
almost works um let's talk something

00:18:40,770 --> 00:18:45,120
about something else enough about these

00:18:42,990 --> 00:18:55,320
three modules two modules and core

00:18:45,120 --> 00:18:59,220
functionality carp carp is the way the

00:18:55,320 --> 00:19:03,000
core way of throwing exceptions from a

00:18:59,220 --> 00:19:10,470
different place um from further up the

00:19:03,000 --> 00:19:12,630
stack so package foo mmm when I call foo

00:19:10,470 --> 00:19:14,370
foo I'm going to go into foo and die and

00:19:12,630 --> 00:19:18,809
is going to report an error happened in

00:19:14,370 --> 00:19:20,429
foo if I change that to croak it will

00:19:18,809 --> 00:19:23,880
tell me the error the line number of the

00:19:20,429 --> 00:19:25,800
error is at the point i called foo this

00:19:23,880 --> 00:19:30,059
is typically the case you'd use this for

00:19:25,800 --> 00:19:30,630
say someone pass you a invalid input to

00:19:30,059 --> 00:19:32,970
your function

00:19:30,630 --> 00:19:34,560
you might not want to probably don't

00:19:32,970 --> 00:19:36,270
want to report it in the middle of your

00:19:34,560 --> 00:19:37,650
function because no one cares but you

00:19:36,270 --> 00:19:39,180
want to probably report it from the

00:19:37,650 --> 00:19:44,520
point someone passed you the invalid

00:19:39,180 --> 00:19:46,440
input so in general though the

00:19:44,520 --> 00:19:47,880
documentation is worth reading on this

00:19:46,440 --> 00:19:49,680
the exception comes from the first

00:19:47,880 --> 00:19:52,730
routine subroutine outside throwing

00:19:49,680 --> 00:19:55,980
package you can also set up carp not so

00:19:52,730 --> 00:20:00,630
here I've got three packages main

00:19:55,980 --> 00:20:02,460
calling barbar calling foo and obviously

00:20:00,630 --> 00:20:03,570
foo foo is still just like Anna previous

00:20:02,460 --> 00:20:07,590
example is going to report the error

00:20:03,570 --> 00:20:09,540
from bar now maybe that's a Bailey bars

00:20:07,590 --> 00:20:11,220
utility class that we wrote and the

00:20:09,540 --> 00:20:12,690
error is still that they're not passing

00:20:11,220 --> 00:20:16,380
in the great thing from when they call

00:20:12,690 --> 00:20:18,960
bar so we can use our carp not which is

00:20:16,380 --> 00:20:22,110
a package label variable within bar to

00:20:18,960 --> 00:20:25,470
say I'm good with all errors from food

00:20:22,110 --> 00:20:28,110
just passed them up the stack with this

00:20:25,470 --> 00:20:37,140
you can manipulate where your errors

00:20:28,110 --> 00:20:41,700
appear to come from so I've just talked

00:20:37,140 --> 00:20:47,180
about throwing essentially strings which

00:20:41,700 --> 00:20:51,720
is all very well but it's not exactly

00:20:47,180 --> 00:20:53,600
rocket science there's a couple of

00:20:51,720 --> 00:20:55,740
problems with throwing strings firstly

00:20:53,600 --> 00:20:58,830
imagine if I want to hand out structured

00:20:55,740 --> 00:21:02,040
data in this I'd have to extract out of

00:20:58,830 --> 00:21:05,040
the string by using a regex which is not

00:21:02,040 --> 00:21:07,050
a sensible thing to do really the other

00:21:05,040 --> 00:21:08,610
problem is that I would be relying on

00:21:07,050 --> 00:21:12,120
that string value being completely

00:21:08,610 --> 00:21:13,980
constant and not changing let's look at

00:21:12,120 --> 00:21:16,020
the first case first let's look at the

00:21:13,980 --> 00:21:19,020
case where I want to pass back some

00:21:16,020 --> 00:21:25,770
structured data let's create a package

00:21:19,020 --> 00:21:30,300
give it a title and some data know this

00:21:25,770 --> 00:21:33,120
stuff and then we then let's die with

00:21:30,300 --> 00:21:38,790
that instead so I die and I with a new

00:21:33,120 --> 00:21:40,770
object and then I can say I can extract

00:21:38,790 --> 00:21:43,490
that information out from just the same

00:21:40,770 --> 00:21:43,490
way as usual

00:21:43,720 --> 00:21:51,470
not the best solution just yet see when

00:21:48,350 --> 00:21:54,740
I die with a normal string i get i die

00:21:51,470 --> 00:21:56,660
problem i get and that falls all the way

00:21:54,740 --> 00:21:58,010
out through all my exception routines

00:21:56,660 --> 00:21:59,960
and gets printed out to standard error

00:21:58,010 --> 00:22:02,420
because no one caught it I die with

00:21:59,960 --> 00:22:06,530
problem ATS lying blah blah blah and I

00:22:02,420 --> 00:22:08,690
can read it when I die with this that

00:22:06,530 --> 00:22:11,660
gets printed to standard error which is

00:22:08,690 --> 00:22:14,470
not the most informative thing so a

00:22:11,660 --> 00:22:16,669
quick digression into object overloading

00:22:14,470 --> 00:22:18,350
object overloading allows us to find

00:22:16,669 --> 00:22:20,600
what happens to objects when they're

00:22:18,350 --> 00:22:22,669
turned into strings or into numbers or

00:22:20,600 --> 00:22:26,080
evaluated and boom context or used with

00:22:22,669 --> 00:22:32,540
any of the operators like + underscores

00:22:26,080 --> 00:22:35,360
dots etc etc etc very quickly um there's

00:22:32,540 --> 00:22:39,770
this use overload module which is a

00:22:35,360 --> 00:22:41,450
pragma really and I am saying and I've

00:22:39,770 --> 00:22:42,919
got some string of fication routine here

00:22:41,450 --> 00:22:45,049
I want to return my I want this to

00:22:42,919 --> 00:22:48,410
stringify to my foo but assume i can

00:22:45,049 --> 00:22:50,960
calculate that there i'm saying i am

00:22:48,410 --> 00:22:55,340
saying that the quote quote that when i

00:22:50,960 --> 00:22:57,919
use my this as a string don't print out

00:22:55,340 --> 00:23:01,040
the have thing with the memory address

00:22:57,919 --> 00:23:03,440
print out call as string and return that

00:23:01,040 --> 00:23:05,540
and i'm going to say fall back one so if

00:23:03,440 --> 00:23:08,990
you try and use this as a number or in a

00:23:05,540 --> 00:23:11,030
boolean concept it will convert to the

00:23:08,990 --> 00:23:12,559
string by calling our string and then do

00:23:11,030 --> 00:23:14,780
what you would expect them to convert it

00:23:12,559 --> 00:23:16,400
to a number which is a long-winded way

00:23:14,780 --> 00:23:20,510
of saying that if i say safe room knew

00:23:16,400 --> 00:23:22,040
it prints out my view and of course we

00:23:20,510 --> 00:23:26,720
take that we take that back into our

00:23:22,040 --> 00:23:28,669
error casts an ad string talk to self

00:23:26,720 --> 00:23:33,730
blah blah blah blah and when I throw it

00:23:28,669 --> 00:23:33,730
now I get something useful at the end

00:23:34,299 --> 00:23:42,950
okay so that handles how we can produce

00:23:40,400 --> 00:23:48,110
objects which are useful and can contain

00:23:42,950 --> 00:23:50,240
data that we can interrogate let's talk

00:23:48,110 --> 00:23:53,300
about the second problem which was we

00:23:50,240 --> 00:23:55,630
don't want to be delving into our our

00:23:53,300 --> 00:23:57,840
strings or parts of our object to look

00:23:55,630 --> 00:24:00,150
for something to match we

00:23:57,840 --> 00:24:03,150
on to categorize these to classify these

00:24:00,150 --> 00:24:04,529
and so that we have an unchanging thing

00:24:03,150 --> 00:24:06,929
so if someone changes the error message

00:24:04,529 --> 00:24:10,860
we don't suddenly not be able to match

00:24:06,929 --> 00:24:13,080
it time for Star Trek guys these are

00:24:10,860 --> 00:24:15,210
captains swoon stole this or I stole it

00:24:13,080 --> 00:24:17,429
for a swim i'm not sure but we're might

00:24:15,210 --> 00:24:19,679
be independent inventor invention but

00:24:17,429 --> 00:24:23,010
anyway the job of a staff Star Trek

00:24:19,679 --> 00:24:26,480
captain is hard you've got Klingons

00:24:23,010 --> 00:24:30,240
coming in off the starboard bow Romulans

00:24:26,480 --> 00:24:32,370
Ferengi your ship keeps breaking the

00:24:30,240 --> 00:24:38,210
transporter doesn't work the warp drive

00:24:32,370 --> 00:24:40,799
explodes the holodeck become sentient

00:24:38,210 --> 00:24:44,610
you've got this guy here let's not even

00:24:40,799 --> 00:24:46,409
talk about this guy here oh and it's not

00:24:44,610 --> 00:24:47,850
just as simple as it goes wrong as

00:24:46,409 --> 00:24:49,950
different ways it can go wrong so you've

00:24:47,850 --> 00:24:52,529
got the transporter it can combine your

00:24:49,950 --> 00:24:55,649
crew members into one it can make you

00:24:52,529 --> 00:24:58,679
into blob it can transport you into a

00:24:55,649 --> 00:25:03,450
mirror universe it can spit you into a

00:24:58,679 --> 00:25:06,600
good and evil part it can speak clone

00:25:03,450 --> 00:25:09,899
you so it's a lot for kind of Starfleet

00:25:06,600 --> 00:25:11,399
captain to deal with so how do they make

00:25:09,899 --> 00:25:14,010
sense of it will they break it down of

00:25:11,399 --> 00:25:16,169
course into categories so there's a

00:25:14,010 --> 00:25:17,490
starship errors there's alien problems

00:25:16,169 --> 00:25:22,770
and as the crew that keeps getting

00:25:17,490 --> 00:25:24,360
killed and they give these problems to

00:25:22,770 --> 00:25:27,029
someone else to deal with quite frankly

00:25:24,360 --> 00:25:29,669
that's what Starfleet captain does you

00:25:27,029 --> 00:25:34,830
could make it into a very big tree like

00:25:29,669 --> 00:25:37,309
structure and this is kind of like what

00:25:34,830 --> 00:25:41,340
we want to deal with with our exceptions

00:25:37,309 --> 00:25:43,110
and we want to we get an exception has

00:25:41,340 --> 00:25:44,909
happened somewhere in our code and we

00:25:43,110 --> 00:25:46,890
want to maybe we're just going to deal

00:25:44,909 --> 00:25:48,299
with the starship stuff or just deal

00:25:46,890 --> 00:25:50,820
with the crew problems or maybe we're

00:25:48,299 --> 00:25:52,289
going to see the exceptions and dispatch

00:25:50,820 --> 00:25:54,299
off to something that can handle a

00:25:52,289 --> 00:25:56,940
section of these so maybe we want to

00:25:54,299 --> 00:25:59,850
handle all of the transporter stuff or

00:25:56,940 --> 00:26:02,669
maybe we want to handle the transporter

00:25:59,850 --> 00:26:03,960
stuff and or and the holodecks that and

00:26:02,669 --> 00:26:07,110
the water in fact all of the starship

00:26:03,960 --> 00:26:11,370
problems um so you can start producing a

00:26:07,110 --> 00:26:15,960
class hierarchy of these things

00:26:11,370 --> 00:26:19,340
so there's a generic starship exception

00:26:15,960 --> 00:26:21,750
that is there's a more particular

00:26:19,340 --> 00:26:23,760
transporter exception there's a more

00:26:21,750 --> 00:26:24,750
even more particular one for which you

00:26:23,760 --> 00:26:27,320
might be able to deal with situations

00:26:24,750 --> 00:26:31,670
where we've cloned a crew crew member

00:26:27,320 --> 00:26:35,340
and you can start using them like this

00:26:31,670 --> 00:26:37,590
you you you catch the exception and you

00:26:35,340 --> 00:26:39,390
start looking first of all if it was a

00:26:37,590 --> 00:26:40,860
transporter problem give it to O'Brien

00:26:39,390 --> 00:26:42,720
if it's a starship problem given to

00:26:40,860 --> 00:26:45,080
Scotty if it's a if the crew got killed

00:26:42,720 --> 00:26:49,280
you got bones to say that they're dead

00:26:45,080 --> 00:26:52,650
and you set Worf on all of the aliens

00:26:49,280 --> 00:26:54,620
all right this you could this is what it

00:26:52,650 --> 00:26:58,740
looks like with try tiny would try catch

00:26:54,620 --> 00:27:00,330
it's a bit cleaner I just catch the

00:26:58,740 --> 00:27:02,280
except if the exception is of this class

00:27:00,330 --> 00:27:06,570
all this because now things to notice

00:27:02,280 --> 00:27:11,130
here is I'm catching things like the

00:27:06,570 --> 00:27:13,320
drive map breaking because so I'm

00:27:11,130 --> 00:27:15,960
catching things like the clay the

00:27:13,320 --> 00:27:20,210
Klingons and attacking because Worf is

00:27:15,960 --> 00:27:22,679
catching all subclasses of aliens so

00:27:20,210 --> 00:27:27,690
yeah I don't have to specify every

00:27:22,679 --> 00:27:31,080
single class this kind of eggs thing is

00:27:27,690 --> 00:27:34,410
very common and you'll know that is very

00:27:31,080 --> 00:27:37,590
very verbose let's talk about exception

00:27:34,410 --> 00:27:40,559
class now we wrote our own exception

00:27:37,590 --> 00:27:42,480
base class that's probably not the best

00:27:40,559 --> 00:27:44,370
of solution it's important to understand

00:27:42,480 --> 00:27:45,990
how it's done but that you probably

00:27:44,370 --> 00:27:46,770
shouldn't dolphin right one what you

00:27:45,990 --> 00:27:51,720
should do is use something like

00:27:46,770 --> 00:27:53,940
exception class and that gives you

00:27:51,720 --> 00:27:57,360
access to a lot of useful methods

00:27:53,940 --> 00:27:59,280
methods in it so our packages files line

00:27:57,360 --> 00:28:02,490
numbers you can get a stack trace out of

00:27:59,280 --> 00:28:06,929
it and it gives you a better exception

00:28:02,490 --> 00:28:10,110
declaration syntax which I want to have

00:28:06,929 --> 00:28:13,830
a starship exception I want to create a

00:28:10,110 --> 00:28:18,470
transporter exception and make it a a

00:28:13,830 --> 00:28:23,520
subclass of error class exceptions so

00:28:18,470 --> 00:28:24,360
that's essentially the 101 of it the

00:28:23,520 --> 00:28:27,929
whole problems

00:28:24,360 --> 00:28:29,580
I did decide to add some bonus slides

00:28:27,929 --> 00:28:31,320
and some more interesting stuff at the

00:28:29,580 --> 00:28:36,929
end but I thought I'd stop at this point

00:28:31,320 --> 00:28:46,799
and ask for questions so have I confused

00:28:36,929 --> 00:28:52,320
everyone is it is yes with with this one

00:28:46,799 --> 00:28:53,940
oh yes that is a mistake well spotted

00:28:52,320 --> 00:28:58,679
look that's the deliberate mistake just

00:28:53,940 --> 00:29:02,370
make sure you're paying attention yes

00:28:58,679 --> 00:29:05,010
yes that should in fact be obviously be

00:29:02,370 --> 00:29:06,840
if there's a problem there isn't the

00:29:05,010 --> 00:29:25,730
transporter 1 Scotty should be able to

00:29:06,840 --> 00:29:29,070
deal with it anything else yes kinder so

00:29:25,730 --> 00:29:30,929
exception class is a good choice there

00:29:29,070 --> 00:29:34,260
are many different solutions on the seat

00:29:30,929 --> 00:29:37,919
band because it's the cpap exception

00:29:34,260 --> 00:29:40,230
class is lightweight it can and feature

00:29:37,919 --> 00:29:42,780
for it can become more lightweight if

00:29:40,230 --> 00:29:44,760
you ask it to be or less light weight if

00:29:42,780 --> 00:29:46,440
you ask it to be to give you the full

00:29:44,760 --> 00:29:49,860
stack trace in every time I throw an

00:29:46,440 --> 00:29:52,049
exception it doesn't have that many

00:29:49,860 --> 00:29:54,450
dependencies it just uses class data

00:29:52,049 --> 00:29:57,870
inheritable which is fairly lightweight

00:29:54,450 --> 00:29:59,640
in itself it does there are other

00:29:57,870 --> 00:30:00,750
solutions out there if you say if you're

00:29:59,640 --> 00:30:04,669
running moose you might want to

00:30:00,750 --> 00:30:04,669
investigate a throwable role for example

00:30:04,880 --> 00:30:11,070
throwable which is a role you can apply

00:30:08,820 --> 00:30:13,140
to your class I didn't include it in the

00:30:11,070 --> 00:30:20,510
101 because I wasn't sure how quickly I

00:30:13,140 --> 00:30:24,960
could talk I don't necessarily like the

00:30:20,510 --> 00:30:29,309
this syntax so I wrote something to make

00:30:24,960 --> 00:30:34,050
it better oh yes or all the goodness or

00:30:29,309 --> 00:30:36,380
or or or or the good next section names

00:30:34,050 --> 00:30:39,050
are gone

00:30:36,380 --> 00:30:40,850
so is syntactic sugar for creating

00:30:39,050 --> 00:30:42,410
exceptional subclassing throwing

00:30:40,850 --> 00:30:45,320
exceptions and checking for exception

00:30:42,410 --> 00:30:46,820
classes in other words it's syntactic

00:30:45,320 --> 00:30:50,450
sugar for all the things try tiny and

00:30:46,820 --> 00:30:53,870
try catch don't do it uses exception

00:30:50,450 --> 00:30:56,290
class base I as a base class so it

00:30:53,870 --> 00:31:02,120
builds on top of exception exception

00:30:56,290 --> 00:31:04,490
class so we wrote this I'm not

00:31:02,120 --> 00:31:07,460
particularly a fan of repeating myself I

00:31:04,490 --> 00:31:09,560
think that clone crew members should

00:31:07,460 --> 00:31:12,230
know what its superclass is there

00:31:09,560 --> 00:31:15,530
because I'm just repeating mr. so this

00:31:12,230 --> 00:31:20,170
is Mike wicked declaration syntax which

00:31:15,530 --> 00:31:23,240
is a little easier starship here is a

00:31:20,170 --> 00:31:26,900
exception which is itself is a just a

00:31:23,240 --> 00:31:32,510
simple subclass of um Oh exception base

00:31:26,900 --> 00:31:35,560
class oh that's the second one to make

00:31:32,510 --> 00:31:35,560
sure you're paying a direct attention

00:31:36,700 --> 00:31:46,160
yep okay and this here this starship

00:31:42,320 --> 00:31:49,310
trans transporter is a subclass of the

00:31:46,160 --> 00:31:51,290
starship problem it's automatically just

00:31:49,310 --> 00:31:53,720
essentially lopping off parts of the

00:31:51,290 --> 00:31:56,390
class name it also has this dot notation

00:31:53,720 --> 00:31:59,110
here to say that I'm going to not bother

00:31:56,390 --> 00:32:01,430
saying exception at the beginning of it

00:31:59,110 --> 00:32:02,840
so that the idea being that your arrow

00:32:01,430 --> 00:32:04,100
classes are off in their own little

00:32:02,840 --> 00:32:09,260
world and in not interfering with your

00:32:04,100 --> 00:32:10,970
other classes and you can do all the

00:32:09,260 --> 00:32:13,940
other things that you do with class

00:32:10,970 --> 00:32:17,780
exception this way you can you can add

00:32:13,940 --> 00:32:19,700
descriptions class class exception class

00:32:17,780 --> 00:32:22,940
has a concept of a class level

00:32:19,700 --> 00:32:25,010
description of the problem so something

00:32:22,940 --> 00:32:27,710
that has true for beers basically a

00:32:25,010 --> 00:32:29,240
human description of the problem without

00:32:27,710 --> 00:32:32,390
giving the details of what happened in

00:32:29,240 --> 00:32:35,780
the particular instance and you can add

00:32:32,390 --> 00:32:39,170
extra fields to your objects in for exam

00:32:35,780 --> 00:32:41,330
and this we give fields and default so

00:32:39,170 --> 00:32:42,680
if your clone your crew men but we want

00:32:41,330 --> 00:32:45,370
to know what crew member is and we

00:32:42,680 --> 00:32:45,370
default to Riker

00:32:47,490 --> 00:32:54,540
and throw syntax is simile simple throw

00:32:51,620 --> 00:32:58,880
this is a functional interface so that's

00:32:54,540 --> 00:33:02,309
a function not a not a method call and

00:32:58,880 --> 00:33:04,890
it's so you simply say the I call these

00:33:02,309 --> 00:33:06,990
error codes starship walk drive and then

00:33:04,890 --> 00:33:11,580
you just say the message you want to go

00:33:06,990 --> 00:33:14,330
with it and to catch it I I say is this

00:33:11,580 --> 00:33:19,080
an hour is a starship walk drive and

00:33:14,330 --> 00:33:20,490
this is a little less verbose and the

00:33:19,080 --> 00:33:27,900
same you can do the same thing with

00:33:20,490 --> 00:33:36,210
try-catch where I have where I'm using

00:33:27,900 --> 00:33:37,200
weblog so can you guys tell me since

00:33:36,210 --> 00:33:46,320
you're good at spotting errors in my

00:33:37,200 --> 00:33:50,030
slides what's wrong here what what

00:33:46,320 --> 00:33:50,030
happens if we've ejecta the warp core

00:33:51,650 --> 00:33:57,780
right I'll give you a clue it's not that

00:33:55,490 --> 00:34:00,000
it doesn't tell you that you've jected

00:33:57,780 --> 00:34:01,860
the warp core it says can't locate

00:34:00,000 --> 00:34:03,840
object method new via package our

00:34:01,860 --> 00:34:06,440
exceptional our spaceship warp drive

00:34:03,840 --> 00:34:08,460
perhaps we forgot to load spaceship Oh

00:34:06,440 --> 00:34:13,500
although it's called starship not

00:34:08,460 --> 00:34:15,649
spaceship now the trouble is exceptions

00:34:13,500 --> 00:34:18,690
classes tend to be a bit hard to test

00:34:15,649 --> 00:34:22,230
because they happen in well exceptional

00:34:18,690 --> 00:34:25,020
circumstances and you only find out that

00:34:22,230 --> 00:34:28,950
they're broken well at 3m in the morning

00:34:25,020 --> 00:34:35,190
on a saturday so the error handling

00:34:28,950 --> 00:34:38,310
doesn't work this on the other hand does

00:34:35,190 --> 00:34:41,669
work or rather doesn't work in the right

00:34:38,310 --> 00:34:45,750
way when I attempt to compile this code

00:34:41,669 --> 00:34:47,940
it immediately says an undeclared

00:34:45,750 --> 00:34:49,950
exception code spaceship a spaceship

00:34:47,940 --> 00:34:54,270
warp drive used in through a you must

00:34:49,950 --> 00:34:56,879
declare it first so at compile time it

00:34:54,270 --> 00:35:00,600
works out the that you've used the wrong

00:34:56,879 --> 00:35:04,770
syntax for the more advanced people in

00:35:00,600 --> 00:35:07,830
what does that mean oh well so when you

00:35:04,770 --> 00:35:09,660
compile Perl code you there's a check

00:35:07,830 --> 00:35:11,400
phase where you check to see if the

00:35:09,660 --> 00:35:14,490
prototypes of the functions that you're

00:35:11,400 --> 00:35:18,450
using are correct you can overload this

00:35:14,490 --> 00:35:20,460
would be cool checker so I do sir and i

00:35:18,450 --> 00:35:23,040
grovel around in the op tree to find the

00:35:20,460 --> 00:35:27,750
constant first value you're passing in

00:35:23,040 --> 00:35:29,670
to the thrower and to check that it

00:35:27,750 --> 00:35:31,260
exists at the time you're compiling your

00:35:29,670 --> 00:35:33,030
code so you don't have to wait until

00:35:31,260 --> 00:35:35,730
it's 3am in the morning to discover that

00:35:33,030 --> 00:35:37,290
there's a problem which is a very

00:35:35,730 --> 00:35:45,420
long-winded way of saying it just works

00:35:37,290 --> 00:35:48,090
with magic so last but not least auto

00:35:45,420 --> 00:35:52,170
die which is me clearing up the bit that

00:35:48,090 --> 00:35:54,360
I still hate that and introducing your

00:35:52,170 --> 00:35:56,910
new exception classes um isn't going to

00:35:54,360 --> 00:35:58,890
help with that we need a way to die

00:35:56,910 --> 00:36:01,410
automatically which we want to just

00:35:58,890 --> 00:36:05,190
write that and that's exactly what auto

00:36:01,410 --> 00:36:09,210
die does it automatically does instead

00:36:05,190 --> 00:36:10,380
of causing and causing undef but it will

00:36:09,210 --> 00:36:12,300
only work with the functional interface

00:36:10,380 --> 00:36:15,960
don't try and mix it with our handle

00:36:12,300 --> 00:36:17,790
because stuff and trust me on this if

00:36:15,960 --> 00:36:19,260
you're using an older pearl you probably

00:36:17,790 --> 00:36:22,050
want to install the new version of of

00:36:19,260 --> 00:36:28,620
Sipan otherwise things like multiple

00:36:22,050 --> 00:36:30,990
arguments to a system call open running

00:36:28,620 --> 00:36:34,640
IPC as a system method will mysteriously

00:36:30,990 --> 00:36:40,260
fell in ways that you didn't anticipate

00:36:34,640 --> 00:36:42,150
you can do the same thing with ebi I can

00:36:40,260 --> 00:36:46,140
tell dbi for example I want to raise any

00:36:42,150 --> 00:36:47,340
error you can't do the same thing with

00:36:46,140 --> 00:36:54,450
template toolkit but we should patch

00:36:47,340 --> 00:36:56,190
that so and that is the end which I've

00:36:54,450 --> 00:36:58,650
done in 36 minutes which means i have

00:36:56,190 --> 00:37:00,750
about five minutes for quest any

00:36:58,650 --> 00:37:04,740
questions and then to let you go and

00:37:00,750 --> 00:37:06,390
time to get to the next thing so have I

00:37:04,740 --> 00:37:08,220
confused anyone have I gone it too fast

00:37:06,390 --> 00:37:11,210
speed have a gun too slowly does anybody

00:37:08,220 --> 00:37:13,690
need something else to be explained I

00:37:11,210 --> 00:37:15,400
scared everyone to silence have

00:37:13,690 --> 00:37:16,660
have I pointed out to the people on the

00:37:15,400 --> 00:37:24,610
internet that this is root beer not

00:37:16,660 --> 00:37:26,350
alcohol sorry Romulan ale it's not blue

00:37:24,610 --> 00:37:28,780
when will the slides be available so

00:37:26,350 --> 00:37:30,790
these slides aren't particularly useful

00:37:28,780 --> 00:37:32,230
what you what I'm going to do is put a

00:37:30,790 --> 00:37:33,460
slight car stuff so i'm going to say

00:37:32,230 --> 00:37:36,370
everything i just said to you again

00:37:33,460 --> 00:37:38,380
again I'm record it on top of a video of

00:37:36,370 --> 00:37:40,600
the slides and I will endeavor to get

00:37:38,380 --> 00:37:42,700
that out by Monday morning which is when

00:37:40,600 --> 00:37:51,310
I will have enough time to upload it

00:37:42,700 --> 00:38:03,280
correctly is on Sipan as of about two

00:37:51,310 --> 00:38:07,770
hours ago yes a good question so the way

00:38:03,280 --> 00:38:11,290
try-catch works is that it hijacks the

00:38:07,770 --> 00:38:14,980
compiler using a divot devel declare now

00:38:11,290 --> 00:38:18,850
develop the weight of l declare works is

00:38:14,980 --> 00:38:22,600
that what it attaches to a subroutine

00:38:18,850 --> 00:38:25,000
like dry or catch us behavior which

00:38:22,600 --> 00:38:27,070
tells pearl to stop using its own

00:38:25,000 --> 00:38:30,610
internal compiler at that point and

00:38:27,070 --> 00:38:33,910
switch to a new compiler chunk in your

00:38:30,610 --> 00:38:35,560
in your code and then develop declare

00:38:33,910 --> 00:38:39,310
will call back to the main pole compiler

00:38:35,560 --> 00:38:42,670
to execute to do things like parsing the

00:38:39,310 --> 00:38:47,980
blocks that you pass into to try or

00:38:42,670 --> 00:38:53,050
catch so if you're happy with it doing

00:38:47,980 --> 00:38:56,680
that then it's fine and I am but it's

00:38:53,050 --> 00:39:00,790
still vastly more much more immature as

00:38:56,680 --> 00:39:03,970
a technique then say try tiny or being

00:39:00,790 --> 00:39:06,040
in built in Val and the things like that

00:39:03,970 --> 00:39:11,950
last thing is something I discovered

00:39:06,040 --> 00:39:18,070
when it bit me so I would recommend it

00:39:11,950 --> 00:39:21,430
but pay attention it will save you pages

00:39:18,070 --> 00:39:23,050
and pages of code and maybe you're the

00:39:21,430 --> 00:39:25,060
other thing is maybe you will save

00:39:23,050 --> 00:39:27,130
yourself that bug you get because you

00:39:25,060 --> 00:39:28,930
forgot to read throw which

00:39:27,130 --> 00:39:32,050
you got but as you put a return in the

00:39:28,930 --> 00:39:33,820
middle so it swings and roundabouts but

00:39:32,050 --> 00:39:36,720
both of the solutions are infinitely

00:39:33,820 --> 00:39:39,610
better than just using the Avelle which

00:39:36,720 --> 00:39:52,810
just won't work on older versions of

00:39:39,610 --> 00:39:54,400
pearl any other questions yes yes so the

00:39:52,810 --> 00:40:23,680
point was that these are band-aids that

00:39:54,400 --> 00:40:26,440
we're applying on top right so so right

00:40:23,680 --> 00:40:29,830
to answer that you yeah I refer you back

00:40:26,440 --> 00:40:34,390
to the the gentleman sitting in front of

00:40:29,830 --> 00:40:36,370
us talk from earlier to implement the

00:40:34,390 --> 00:40:40,660
best way to implement a better try catch

00:40:36,370 --> 00:40:42,760
block would be to change pearl which is

00:40:40,660 --> 00:40:45,160
something that is happening so that you

00:40:42,760 --> 00:40:49,230
can easily write more extensions into it

00:40:45,160 --> 00:40:53,020
try it that the try catchment system is

00:40:49,230 --> 00:40:56,320
probably something that will need

00:40:53,020 --> 00:40:57,670
significant in evolving steps not

00:40:56,320 --> 00:40:59,800
something that you're going to get right

00:40:57,670 --> 00:41:01,770
instantaneously and it's something that

00:40:59,800 --> 00:41:04,120
you really do want as a Sipan module

00:41:01,770 --> 00:41:05,820
try-catch at the moment is implemented

00:41:04,120 --> 00:41:08,560
in de Velde declare which is immature

00:41:05,820 --> 00:41:12,640
its de Velde Claire will go work on

00:41:08,560 --> 00:41:14,440
right back to 58 which is practically

00:41:12,640 --> 00:41:16,870
history is practically back to those

00:41:14,440 --> 00:41:18,790
dinosaur ages right now it's the one

00:41:16,870 --> 00:41:25,030
before the one before the one before the

00:41:18,790 --> 00:41:27,220
unsupported version of pearl so in 516

00:41:25,030 --> 00:41:29,950
that I are a bunch of changes to allow

00:41:27,220 --> 00:41:32,230
you to get at more of the parsing

00:41:29,950 --> 00:41:35,740
section and more stuff is happening

00:41:32,230 --> 00:41:38,490
along those routes that strikes me is

00:41:35,740 --> 00:41:38,490
the better route

00:41:39,069 --> 00:41:45,249
any change that we would put into the

00:41:41,199 --> 00:41:46,719
exception handling we put into core

00:41:45,249 --> 00:41:48,549
pearl would obviously have to wait to a

00:41:46,719 --> 00:41:49,959
new poll version we might as well wait

00:41:48,549 --> 00:41:52,299
for a new poll version where we can

00:41:49,959 --> 00:41:55,359
implement that change as a Sipan module

00:41:52,299 --> 00:41:57,430
because I mean okay good example of try

00:41:55,359 --> 00:42:00,400
catches try catch users moose it uses

00:41:57,430 --> 00:42:03,640
moose types it relies on love that thing

00:42:00,400 --> 00:42:06,789
those things that's it doing something

00:42:03,640 --> 00:42:11,410
and the moment moose types are our type

00:42:06,789 --> 00:42:13,269
system but are they are truly are only

00:42:11,410 --> 00:42:17,049
type system is that all we're going to

00:42:13,269 --> 00:42:18,729
use having that kind of stuff if we were

00:42:17,049 --> 00:42:20,109
to put something like try catching core

00:42:18,729 --> 00:42:22,420
it would either not be able to handle

00:42:20,109 --> 00:42:24,160
moose types or it would rely on moose so

00:42:22,420 --> 00:42:28,599
you've been game should we put mousse in

00:42:24,160 --> 00:42:30,549
core and so it's not as simple as this I

00:42:28,599 --> 00:42:31,420
know we'll just make some quick change

00:42:30,549 --> 00:42:35,829
to the phone call and it will be

00:42:31,420 --> 00:42:41,920
wonderful it won't okay any more

00:42:35,829 --> 00:42:44,009
questions no great thank you for

00:42:41,920 --> 00:42:44,009

YouTube URL: https://www.youtube.com/watch?v=QxINO5LpAZE


