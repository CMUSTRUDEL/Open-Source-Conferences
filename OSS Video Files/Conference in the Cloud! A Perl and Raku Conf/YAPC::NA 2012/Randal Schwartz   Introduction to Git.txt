Title: Randal Schwartz   Introduction to Git
Publication date: 2013-08-20
Playlist: YAPC::NA 2012
Description: 
	
Captions: 
	00:00:05,299 --> 00:00:11,130
well good morning class good morning

00:00:08,250 --> 00:00:13,019
each air i'm randall shorts he'll be

00:00:11,130 --> 00:00:17,250
your tour guide for the next hour and 45

00:00:13,019 --> 00:00:20,400
or 50 minutes on my whirlwind what would

00:00:17,250 --> 00:00:23,279
a well quick introduction to get this is

00:00:20,400 --> 00:00:25,590
what that way there's this conference

00:00:23,279 --> 00:00:27,630
there's a phenomenon known as conference

00:00:25,590 --> 00:00:30,029
crud where you go to a conference and

00:00:27,630 --> 00:00:31,679
you pick up some head cold or other

00:00:30,029 --> 00:00:32,759
disease or just generally feeling bad

00:00:31,679 --> 00:00:34,920
because you around a bunch of people

00:00:32,759 --> 00:00:36,270
you're not normally around and that you

00:00:34,920 --> 00:00:37,770
always get it from some guy who must

00:00:36,270 --> 00:00:40,110
have brought it with them i am the guy

00:00:37,770 --> 00:00:41,670
this week sorry i came in with a head

00:00:40,110 --> 00:00:43,920
cold and so if i have to sneeze or cough

00:00:41,670 --> 00:00:46,260
sometime during this morning I apologize

00:00:43,920 --> 00:00:48,059
in advance i'm actually got almost no

00:00:46,260 --> 00:00:50,160
sleep lest i kept waking up coughing and

00:00:48,059 --> 00:00:51,989
sneezing so i'll stay way away from

00:00:50,160 --> 00:00:54,180
y'all don't worry i'll try not to

00:00:51,989 --> 00:00:55,620
breathe on you but I may have take care

00:00:54,180 --> 00:00:57,629
of biological things of your occasional

00:00:55,620 --> 00:00:59,910
so we'll just go with that everybody

00:00:57,629 --> 00:01:01,379
hear me okay but if it's really nice

00:00:59,910 --> 00:01:03,660
system actually wish I had this more

00:01:01,379 --> 00:01:05,909
places we were cool so little about me

00:01:03,660 --> 00:01:07,409
I'm talking about that's the only fancy

00:01:05,909 --> 00:01:09,840
transitioning that's pretty cool alright

00:01:07,409 --> 00:01:11,700
so I've been tracking it since it was

00:01:09,840 --> 00:01:13,799
created that turns out that Linus

00:01:11,700 --> 00:01:16,710
Torvalds who created yet moved to

00:01:13,799 --> 00:01:19,140
Portland my hometown in 2007 and to

00:01:16,710 --> 00:01:21,750
introduce him to the town I I bottom a

00:01:19,140 --> 00:01:23,009
microbrew beer at the local beer place I

00:01:21,750 --> 00:01:24,420
said what are you working on these days

00:01:23,009 --> 00:01:25,860
he says well you know the Linux kernel

00:01:24,420 --> 00:01:28,530
and I said you'll I figured that he goes

00:01:25,860 --> 00:01:29,820
but I'm also been creating this change

00:01:28,530 --> 00:01:33,570
control system that because we had to

00:01:29,820 --> 00:01:35,520
replace bitkeeper and and so I said well

00:01:33,570 --> 00:01:37,290
check that out and I download it and had

00:01:35,520 --> 00:01:38,670
a great time with it and I've been with

00:01:37,290 --> 00:01:41,189
the project essentially ever since I've

00:01:38,670 --> 00:01:43,170
been sort of the canary in the coal mine

00:01:41,189 --> 00:01:44,790
for compiling it on non Linux operating

00:01:43,170 --> 00:01:47,280
systems were at least the first couple

00:01:44,790 --> 00:01:50,040
years I've used get on small projects

00:01:47,280 --> 00:01:52,470
I've used other systems on small large

00:01:50,040 --> 00:01:54,840
projects I have a long history with both

00:01:52,470 --> 00:01:56,130
good and bad change control systems and

00:01:54,840 --> 00:01:57,990
I've read a lot about people talking

00:01:56,130 --> 00:01:59,610
about getting the mailing list and I've

00:01:57,990 --> 00:02:00,630
actually provided some patches to get in

00:01:59,610 --> 00:02:02,340
suggestions for the user interface

00:02:00,630 --> 00:02:03,990
changes so I've actually been involved

00:02:02,340 --> 00:02:05,310
in that level 2 and I've working on

00:02:03,990 --> 00:02:07,590
small medium teams that get but not

00:02:05,310 --> 00:02:09,090
large ones yet so I do have some limited

00:02:07,590 --> 00:02:10,000
experience with this I'm watching what

00:02:09,090 --> 00:02:12,250
other people do but I'm

00:02:10,000 --> 00:02:15,070
really that guy so let's talk about

00:02:12,250 --> 00:02:18,040
getting so what good does is it manages

00:02:15,070 --> 00:02:20,500
changes to a tree of files over time and

00:02:18,040 --> 00:02:22,390
I say it that way because I want to

00:02:20,500 --> 00:02:24,940
distinguish get from some of the other

00:02:22,390 --> 00:02:27,400
change control systems that are looking

00:02:24,940 --> 00:02:29,140
at individual file history yet does not

00:02:27,400 --> 00:02:31,180
track individual files it tracks the

00:02:29,140 --> 00:02:32,920
tree of files this actually affects the

00:02:31,180 --> 00:02:34,600
way you think about get and think about

00:02:32,920 --> 00:02:38,140
patches and changes that get creates

00:02:34,600 --> 00:02:39,340
it's optimized for distributed

00:02:38,140 --> 00:02:41,200
development that's really sort of the

00:02:39,340 --> 00:02:42,910
main thing that created these

00:02:41,200 --> 00:02:45,010
distributed version control systems like

00:02:42,910 --> 00:02:48,310
yet and bizarre and mercurial and things

00:02:45,010 --> 00:02:50,110
like that it's also optimized for huge

00:02:48,310 --> 00:02:51,580
file counts originally created for the

00:02:50,110 --> 00:02:54,790
Linux kernel which has something like

00:02:51,580 --> 00:02:56,410
30,000 files in the file tree you got to

00:02:54,790 --> 00:02:58,720
be able to do things quickly over a

00:02:56,410 --> 00:03:00,310
30,000 file tree a lot of you are

00:02:58,720 --> 00:03:02,230
probably using get or will be using get

00:03:00,310 --> 00:03:04,390
on projects that have you know hundred

00:03:02,230 --> 00:03:05,410
files but trying to get over 30,000

00:03:04,390 --> 00:03:07,450
files means it has to be certain

00:03:05,410 --> 00:03:09,670
optimizations in there it's also

00:03:07,450 --> 00:03:11,230
optimized for complex merges when you

00:03:09,670 --> 00:03:12,610
have something as complex as the Linux

00:03:11,230 --> 00:03:14,830
kernel and you have distributed

00:03:12,610 --> 00:03:17,170
development on that people do different

00:03:14,830 --> 00:03:18,549
things in different repos so you have to

00:03:17,170 --> 00:03:20,950
be able to pull that back together and

00:03:18,549 --> 00:03:23,890
do it quickly so get is optimized for

00:03:20,950 --> 00:03:26,260
that sort of thing it's also optimized

00:03:23,890 --> 00:03:27,970
for just trying things out this is

00:03:26,260 --> 00:03:30,310
probably my favorite feature one of my

00:03:27,970 --> 00:03:32,380
favorite features of get is that I can

00:03:30,310 --> 00:03:34,120
go ahead in my local repo and say well

00:03:32,380 --> 00:03:37,060
what if i take the code this direction

00:03:34,120 --> 00:03:39,250
and then I could try four or five commit

00:03:37,060 --> 00:03:40,900
some way over there and then I can go oh

00:03:39,250 --> 00:03:43,690
this really didn't work and completely

00:03:40,900 --> 00:03:45,549
erase it and nobody will know it's not

00:03:43,690 --> 00:03:47,590
like a central control system where

00:03:45,549 --> 00:03:48,610
you're either afraid to check it in

00:03:47,590 --> 00:03:51,250
because you don't want everybody see

00:03:48,610 --> 00:03:54,040
your bad work or you have all the local

00:03:51,250 --> 00:03:56,769
files that are like you know food see

00:03:54,040 --> 00:03:58,150
good food out seat up previous I mean at

00:03:56,769 --> 00:03:59,440
that point you've lost the whole point

00:03:58,150 --> 00:04:00,760
of a change control system because you

00:03:59,440 --> 00:04:02,590
can't check it in someone you can't

00:04:00,760 --> 00:04:04,930
commit on your path towards either

00:04:02,590 --> 00:04:06,280
greatness or total failure you want to

00:04:04,930 --> 00:04:08,470
be able to tell commits all the way down

00:04:06,280 --> 00:04:10,450
one way or the other it's also optimized

00:04:08,470 --> 00:04:13,019
for being very very fast the code that's

00:04:10,450 --> 00:04:16,090
in there is incredibly slick and fast

00:04:13,019 --> 00:04:18,370
it's also a place for being robust gets

00:04:16,090 --> 00:04:20,950
very very very careful to not lose

00:04:18,370 --> 00:04:22,970
anything you've done there are sequences

00:04:20,950 --> 00:04:24,620
of steps that it makes sure that this

00:04:22,970 --> 00:04:26,000
first in the object tree before it

00:04:24,620 --> 00:04:27,920
brings it up back out to the work tree

00:04:26,000 --> 00:04:31,070
and so on so a lot of things behind that

00:04:27,920 --> 00:04:33,860
it's not optimized for tracking file

00:04:31,070 --> 00:04:36,890
permissions to ownership in Linus's

00:04:33,860 --> 00:04:38,420
words get is a source code manager so

00:04:36,890 --> 00:04:40,610
it's not doesn't have any information

00:04:38,420 --> 00:04:43,070
about meta stuff like who owns the file

00:04:40,610 --> 00:04:45,140
what permissions it has it doesn't care

00:04:43,070 --> 00:04:47,270
about that stuff because source code

00:04:45,140 --> 00:04:48,590
doesn't matter there and you really what

00:04:47,270 --> 00:04:50,420
would it mean to merge a tree together

00:04:48,590 --> 00:04:51,830
where I own some of the files new on the

00:04:50,420 --> 00:04:54,740
other files I mean it would not make any

00:04:51,830 --> 00:04:56,810
sense so get just says here's a chunk of

00:04:54,740 --> 00:04:59,330
text or a chunk of binary and that's all

00:04:56,810 --> 00:05:01,610
you've got it's also not optimized for

00:04:59,330 --> 00:05:05,420
tracking individual files with separate

00:05:01,610 --> 00:05:06,710
history so one of the things that people

00:05:05,420 --> 00:05:07,970
tend to want to use get for I don't

00:05:06,710 --> 00:05:09,890
quite know why but it's like to manage

00:05:07,970 --> 00:05:11,360
their home directory you know the

00:05:09,890 --> 00:05:14,060
problem with that is really you have no

00:05:11,360 --> 00:05:17,390
correlated change between your vm RC

00:05:14,060 --> 00:05:19,070
file and your ssh config file is no real

00:05:17,390 --> 00:05:21,050
correlation between those changes in yet

00:05:19,070 --> 00:05:22,940
you're telling get correlate these and

00:05:21,050 --> 00:05:23,930
it won't make any sense to get also

00:05:22,940 --> 00:05:26,120
you're probably not branching and

00:05:23,930 --> 00:05:27,410
merging your home directory so that's

00:05:26,120 --> 00:05:29,450
another reason not to use get for that

00:05:27,410 --> 00:05:32,060
and it's also not optimized for making

00:05:29,450 --> 00:05:34,430
things painful okay so other systems so

00:05:32,060 --> 00:05:36,290
you be doing that okay so why get well

00:05:34,430 --> 00:05:37,700
it's essential to the Linux kernel

00:05:36,290 --> 00:05:39,560
development that's where a goal got

00:05:37,700 --> 00:05:41,120
started it was created as a replacement

00:05:39,560 --> 00:05:44,240
when bitkeeper suddenly became

00:05:41,120 --> 00:05:46,280
unavailable so for a long time the Linux

00:05:44,240 --> 00:05:49,040
kernel development was just simply Linus

00:05:46,280 --> 00:05:50,990
taking patches from people and applying

00:05:49,040 --> 00:05:52,250
it to his home personal tree and then

00:05:50,990 --> 00:05:54,260
publishing that tree from time to time

00:05:52,250 --> 00:05:56,330
and whatever repo he did that but

00:05:54,260 --> 00:05:58,340
obviously as Linux grew ill in terms of

00:05:56,330 --> 00:06:00,380
development the more people working on

00:05:58,340 --> 00:06:01,729
it they got more and more complex so

00:06:00,380 --> 00:06:03,320
they made a deal with the people that

00:06:01,729 --> 00:06:04,760
made bitkeeper to actually provide a

00:06:03,320 --> 00:06:07,550
distributed version control system for

00:06:04,760 --> 00:06:09,500
them as a free license bitkeeper is not

00:06:07,550 --> 00:06:11,060
open source software but they got a

00:06:09,500 --> 00:06:13,100
license that was essentially free for

00:06:11,060 --> 00:06:14,600
all the developers well somebody screwed

00:06:13,100 --> 00:06:18,080
up with that and they couldn't use it

00:06:14,600 --> 00:06:20,030
anymore because the long story anyway so

00:06:18,080 --> 00:06:21,500
so all of a sudden they're left with no

00:06:20,030 --> 00:06:23,570
change control system that works again

00:06:21,500 --> 00:06:25,520
except one it's accepting patches back

00:06:23,570 --> 00:06:27,800
to his original tree so he's trying to

00:06:25,520 --> 00:06:29,419
figure out how to make that work so he

00:06:27,800 --> 00:06:30,860
created it sort of within about a month

00:06:29,419 --> 00:06:33,530
they actually created a working version

00:06:30,860 --> 00:06:35,419
that was able to manage itself and of

00:06:33,530 --> 00:06:36,350
course now that was 2007's we've had

00:06:35,419 --> 00:06:38,780
quite a lot of development

00:06:36,350 --> 00:06:40,940
since it's now used by thousands of

00:06:38,780 --> 00:06:42,260
projects tens of thousands of projects

00:06:40,940 --> 00:06:44,060
let me take a look at everything that's

00:06:42,260 --> 00:06:46,550
on github for example lots and lots of

00:06:44,060 --> 00:06:48,530
people are using this stuff and one of

00:06:46,550 --> 00:06:51,440
the things is that in open source

00:06:48,530 --> 00:06:53,540
projects you if you're using a central

00:06:51,440 --> 00:06:55,520
control system you have to sort of

00:06:53,540 --> 00:06:57,110
display your worth before you can get a

00:06:55,520 --> 00:06:59,750
commitment in other words be able to

00:06:57,110 --> 00:07:01,040
generate patches and commit those in a

00:06:59,750 --> 00:07:03,410
way that other people can see your work

00:07:01,040 --> 00:07:05,540
with get everybody has to commit a bit

00:07:03,410 --> 00:07:08,690
because I can take your repo for kit to

00:07:05,540 --> 00:07:10,790
be my repo and then I can make changes

00:07:08,690 --> 00:07:12,680
to it and you may or may not want to

00:07:10,790 --> 00:07:14,000
take my changes back but at least I can

00:07:12,680 --> 00:07:15,800
go ahead and show a history of the

00:07:14,000 --> 00:07:18,230
things I want to add to this project

00:07:15,800 --> 00:07:20,330
that's now for it so because of that

00:07:18,230 --> 00:07:22,970
everybody can clone the tree make a test

00:07:20,330 --> 00:07:24,800
to local changes submit the changes

00:07:22,970 --> 00:07:26,810
either like it's patches via email

00:07:24,800 --> 00:07:28,460
that's possible or you can submit them

00:07:26,810 --> 00:07:30,620
as a published repository in other words

00:07:28,460 --> 00:07:32,930
I can clone your repo and put it up on

00:07:30,620 --> 00:07:34,730
github or something and then say okay

00:07:32,930 --> 00:07:36,290
here's my changes and the great thing

00:07:34,730 --> 00:07:38,900
about get is that even if you've made

00:07:36,290 --> 00:07:40,400
changes since then get will know what

00:07:38,900 --> 00:07:41,870
the common ancestor is to be able to do

00:07:40,400 --> 00:07:44,630
the merges or the rebasing all

00:07:41,870 --> 00:07:46,820
automatically for you and so again I can

00:07:44,630 --> 00:07:48,410
also in my repo track the upstream so I

00:07:46,820 --> 00:07:50,720
can look at your repo as you making

00:07:48,410 --> 00:07:52,190
changes and pull them in into my repo in

00:07:50,720 --> 00:07:54,200
a way that makes sense in other words i

00:07:52,190 --> 00:07:56,270
can actually keep applying my changes on

00:07:54,200 --> 00:07:58,490
top of your changes as you keep updating

00:07:56,270 --> 00:08:01,190
things moving them forward so how does

00:07:58,490 --> 00:08:02,660
it do it it does it by using universal

00:08:01,190 --> 00:08:04,040
public identifiers we'll talk more about

00:08:02,660 --> 00:08:06,440
that in a minute basically the Shah ones

00:08:04,040 --> 00:08:09,110
of the various things none of this my

00:08:06,440 --> 00:08:10,550
245 is your 992 and stuff that just

00:08:09,110 --> 00:08:11,870
always confused me when there's two

00:08:10,550 --> 00:08:13,820
different possible numbers for the same

00:08:11,870 --> 00:08:16,130
actual commit depending on which repo

00:08:13,820 --> 00:08:18,200
and what path you took to get there it's

00:08:16,130 --> 00:08:19,970
also good because it transfers over

00:08:18,200 --> 00:08:22,340
multiple protocols talk more about that

00:08:19,970 --> 00:08:24,920
in a few minutes you can pull down a git

00:08:22,340 --> 00:08:27,890
repo via HTTP or ssh there's a your own

00:08:24,920 --> 00:08:30,710
get protocol as well it stores objects

00:08:27,890 --> 00:08:32,960
efficiently so because everyone has the

00:08:30,710 --> 00:08:35,510
entire repo now let's talk about that in

00:08:32,960 --> 00:08:37,460
practical terms the entire history of

00:08:35,510 --> 00:08:38,990
the Linux 2.6 Colonel since get was

00:08:37,460 --> 00:08:41,360
installed all the way up to the

00:08:38,990 --> 00:08:43,190
three-point Oh Colonel now the entire

00:08:41,360 --> 00:08:45,950
history for that every single commit

00:08:43,190 --> 00:08:48,470
every single change in a git repo is

00:08:45,950 --> 00:08:49,920
about half the size of the current check

00:08:48,470 --> 00:08:51,570
out so

00:08:49,920 --> 00:08:52,889
words it's it's like a really really

00:08:51,570 --> 00:08:54,089
super compressed our ball but it's

00:08:52,889 --> 00:08:55,709
better than a tarball because it's the

00:08:54,089 --> 00:09:00,329
entire history with all the commits and

00:08:55,709 --> 00:09:02,820
everything in it when the X X 11 guys

00:09:00,329 --> 00:09:05,220
also went over to use get they found

00:09:02,820 --> 00:09:08,040
that every commit in history that they

00:09:05,220 --> 00:09:09,600
had about xfree86 would actually fit in

00:09:08,040 --> 00:09:11,579
a repub it's only three times the size

00:09:09,600 --> 00:09:12,750
of the current check out every commit

00:09:11,579 --> 00:09:16,019
from all the way back the beginning of X

00:09:12,750 --> 00:09:18,000
11 that's really awesome so the repo

00:09:16,019 --> 00:09:19,800
size is tiny and it does this by doing

00:09:18,000 --> 00:09:21,959
lots lots of optimizations we'll talk

00:09:19,800 --> 00:09:25,740
more about that as we get further on ok

00:09:21,959 --> 00:09:27,329
easy branching and merging and so when

00:09:25,740 --> 00:09:28,649
you have a project where multiple people

00:09:27,329 --> 00:09:32,730
are working on it you're always going to

00:09:28,649 --> 00:09:34,019
be having different diverging work

00:09:32,730 --> 00:09:35,970
people doing different Minister for

00:09:34,019 --> 00:09:37,199
directions and one of the things that's

00:09:35,970 --> 00:09:38,940
essential then when you're dealing

00:09:37,199 --> 00:09:41,160
distributed development is you have to

00:09:38,940 --> 00:09:42,750
be able to come back to a common place

00:09:41,160 --> 00:09:45,449
come back and bird you're working with

00:09:42,750 --> 00:09:48,329
my working and the trickiest part of

00:09:45,449 --> 00:09:49,639
this is if a file gets changed in two

00:09:48,329 --> 00:09:52,410
different directions and two different

00:09:49,639 --> 00:09:54,959
peoples commit streams you have to know

00:09:52,410 --> 00:09:57,390
what the common ancestor is to figure

00:09:54,959 --> 00:09:59,279
out what idea do versus what you did

00:09:57,390 --> 00:10:00,630
that's the only way to do it because if

00:09:59,279 --> 00:10:02,130
you just have two files and they're

00:10:00,630 --> 00:10:03,600
different you don't know how to merge it

00:10:02,130 --> 00:10:05,190
because just well this is different this

00:10:03,600 --> 00:10:06,870
is different but by having a common

00:10:05,190 --> 00:10:08,820
ancestor you can see that I added lines

00:10:06,870 --> 00:10:12,060
one through tan up here and you add it

00:10:08,820 --> 00:10:13,949
in lines 2350 over there so then we know

00:10:12,060 --> 00:10:16,470
at the common ancestors we can compute

00:10:13,949 --> 00:10:18,300
the merge calculation and this is a lot

00:10:16,470 --> 00:10:20,220
of what get is all about always being

00:10:18,300 --> 00:10:21,959
able to know where the common ancestor

00:10:20,220 --> 00:10:23,880
is to be able to do these merges to

00:10:21,959 --> 00:10:26,279
bring the work back together so it's

00:10:23,880 --> 00:10:29,250
very very calculated that way another

00:10:26,279 --> 00:10:31,470
thing is that get tools were designed

00:10:29,250 --> 00:10:34,860
from the from the beginning to be able

00:10:31,470 --> 00:10:36,149
to do patches through email so other

00:10:34,860 --> 00:10:37,790
there are a lot of people working Linux

00:10:36,149 --> 00:10:40,410
kernel but there's only about a dozen

00:10:37,790 --> 00:10:43,110
lieutenants that actually have sort of a

00:10:40,410 --> 00:10:45,180
actual git repo that line is poles from

00:10:43,110 --> 00:10:48,060
so everybody else sort of downstream of

00:10:45,180 --> 00:10:50,730
that sends hatches by using get tools

00:10:48,060 --> 00:10:52,920
that specifically put them email in a

00:10:50,730 --> 00:10:54,480
way that that the person who's

00:10:52,920 --> 00:10:57,209
incorporating that will know exactly

00:10:54,480 --> 00:10:59,279
what particular commit this is being

00:10:57,209 --> 00:11:00,750
applied to so it makes it real easy to

00:10:59,279 --> 00:11:02,040
be able to pull that in and then merge

00:11:00,750 --> 00:11:03,630
that in and so on it's really nice that

00:11:02,040 --> 00:11:05,580
way it also

00:11:03,630 --> 00:11:07,710
does support binary files to a limited

00:11:05,580 --> 00:11:09,330
degree since gets a source code

00:11:07,710 --> 00:11:11,610
management system it doesn't know things

00:11:09,330 --> 00:11:13,260
like how to merge binary files so you're

00:11:11,610 --> 00:11:16,110
not going to be very happy if your say

00:11:13,260 --> 00:11:17,610
for example you're managing Open Office

00:11:16,110 --> 00:11:19,080
files will get that's not going to be

00:11:17,610 --> 00:11:21,180
very cool for you you gets not going to

00:11:19,080 --> 00:11:22,860
like merge lines of text for you it's

00:11:21,180 --> 00:11:25,080
just going to say here's a blob and it's

00:11:22,860 --> 00:11:28,260
different from this blob too bad that's

00:11:25,080 --> 00:11:30,450
all it's going to say for now one of the

00:11:28,260 --> 00:11:32,250
secrets behind all this is the use of a

00:11:30,450 --> 00:11:33,540
hash called sha-1 you're going to see a

00:11:32,250 --> 00:11:35,430
lot of references to Shaw all the way

00:11:33,540 --> 00:11:38,520
through the integrity of presentation

00:11:35,430 --> 00:11:41,400
here every object every file every tree

00:11:38,520 --> 00:11:43,170
of files every commit has a sha-1 that

00:11:41,400 --> 00:11:45,420
uniquely identifies it it's a 40

00:11:43,170 --> 00:11:46,560
character heck string so you'll see this

00:11:45,420 --> 00:11:49,050
is a lot of times in this demonstration

00:11:46,560 --> 00:11:50,490
here so objects is everything in there

00:11:49,050 --> 00:11:53,550
blobs which should be the content of a

00:11:50,490 --> 00:11:55,890
file has unique sha-1 the trees which

00:11:53,550 --> 00:11:59,010
represent directories of blobs and other

00:11:55,890 --> 00:12:00,870
trees recursively so a given child one

00:11:59,010 --> 00:12:04,260
will identify completely and accurately

00:12:00,870 --> 00:12:06,990
every set of files are below also

00:12:04,260 --> 00:12:09,930
commits so the commit consists of three

00:12:06,990 --> 00:12:12,900
parts consists of a tree plus zero more

00:12:09,930 --> 00:12:15,000
parent commits plus a message about why

00:12:12,900 --> 00:12:16,620
so basically the commit message I'm

00:12:15,000 --> 00:12:18,360
doing this I'm changing this file

00:12:16,620 --> 00:12:21,300
because it needs this feature and so on

00:12:18,360 --> 00:12:23,970
are fixing this bug whatever so another

00:12:21,300 --> 00:12:25,830
thing I ones also use for his tags I'll

00:12:23,970 --> 00:12:29,370
just step outside for that for a bit a

00:12:25,830 --> 00:12:31,290
tag is an object typically a commit with

00:12:29,370 --> 00:12:33,870
an optional subject saying why we're

00:12:31,290 --> 00:12:35,610
tagging this thing plus an optional

00:12:33,870 --> 00:12:41,160
payload to sign it off so it could be

00:12:35,610 --> 00:12:42,780
for example a maybe a gpg signed message

00:12:41,160 --> 00:12:45,060
or whatever yeah sorry that's the next

00:12:42,780 --> 00:12:46,440
piece there and the tag is basically is

00:12:45,060 --> 00:12:49,020
what you want to say this particular

00:12:46,440 --> 00:12:50,790
commit is version 1 dot 4 of my software

00:12:49,020 --> 00:12:52,290
so it's basically we locked down a

00:12:50,790 --> 00:12:54,930
particular command and publish it

00:12:52,290 --> 00:12:56,970
publicly to say this is a special commit

00:12:54,930 --> 00:12:58,680
more special than most and that it

00:12:56,970 --> 00:13:00,450
actually represents a release or a

00:12:58,680 --> 00:13:01,740
preliminary release or something like

00:13:00,450 --> 00:13:05,940
that so it's basically designed to be a

00:13:01,740 --> 00:13:08,100
mobile not changing around and so how we

00:13:05,940 --> 00:13:10,890
start with these things is we're going

00:13:08,100 --> 00:13:13,650
to put objects basically your your files

00:13:10,890 --> 00:13:16,499
and stuff in a repo so get efficiently

00:13:13,650 --> 00:13:19,289
creates new objects justice in the repo

00:13:16,499 --> 00:13:21,029
and it does it in a way that it doesn't

00:13:19,289 --> 00:13:22,379
have to lock the repo and multiple

00:13:21,029 --> 00:13:24,179
people are all pushing things in it

00:13:22,379 --> 00:13:25,619
generally adds object rather than

00:13:24,179 --> 00:13:27,659
destroying objects only in a few rare

00:13:25,619 --> 00:13:28,919
circumstances this get go through and

00:13:27,659 --> 00:13:32,219
clean up the object for you when you

00:13:28,919 --> 00:13:34,019
tell it to to be able to garbage collect

00:13:32,219 --> 00:13:35,639
and so on so it's great about that is

00:13:34,019 --> 00:13:37,589
that if you have a git repo on a central

00:13:35,639 --> 00:13:39,749
server and everybody's pushing more data

00:13:37,589 --> 00:13:41,549
into it it's just adding objects so

00:13:39,749 --> 00:13:43,949
there's no locking required for that

00:13:41,549 --> 00:13:45,539
it's very efficient that way eventually

00:13:43,949 --> 00:13:47,219
unreferenced objects do garbage collect

00:13:45,539 --> 00:13:49,259
but objects actually when they're first

00:13:47,219 --> 00:13:50,579
put to the repo or a file of their own

00:13:49,259 --> 00:13:52,499
so every new thing that's being loaded

00:13:50,579 --> 00:13:54,569
in is loaded in separately as a file of

00:13:52,499 --> 00:13:55,859
its own but eventually would you garbage

00:13:54,569 --> 00:13:58,139
collection to pax's and have much more

00:13:55,859 --> 00:14:00,389
efficient things you can actually tell

00:13:58,139 --> 00:14:02,309
get please make this entire repo one

00:14:00,389 --> 00:14:04,109
giant file so it's the efficient for

00:14:02,309 --> 00:14:06,809
putting on a tarball or sitting

00:14:04,109 --> 00:14:08,489
somewhere else so the packs are actually

00:14:06,809 --> 00:14:11,069
smart because when it puts something in

00:14:08,489 --> 00:14:13,889
a pack it looks at parts of files and

00:14:11,069 --> 00:14:15,869
sees if there's a way to make this the

00:14:13,889 --> 00:14:18,599
second file being the same as the first

00:14:15,869 --> 00:14:20,639
file except for these bites and in those

00:14:18,599 --> 00:14:21,689
packs looking for those deltas it can

00:14:20,639 --> 00:14:23,009
actually be really efficient and

00:14:21,689 --> 00:14:25,139
compressing that that's why the entire

00:14:23,009 --> 00:14:26,249
history of the Linux kernel fits in half

00:14:25,139 --> 00:14:28,349
the space of the current check out

00:14:26,249 --> 00:14:30,749
because there's a lot of how those files

00:14:28,349 --> 00:14:32,519
look very similar so those are actually

00:14:30,749 --> 00:14:34,349
compressed down using this packing

00:14:32,519 --> 00:14:36,869
system to be able to have the same thing

00:14:34,349 --> 00:14:38,519
in multiple places Pats are also used

00:14:36,869 --> 00:14:40,499
for repo transfer so when you're pulling

00:14:38,519 --> 00:14:42,749
down something from a central repo

00:14:40,499 --> 00:14:44,939
pulling in just your new objects that

00:14:42,749 --> 00:14:46,529
you don't have yet it actually on the

00:14:44,939 --> 00:14:48,299
server side it actually computes a new

00:14:46,529 --> 00:14:50,069
path that's just the things that you

00:14:48,299 --> 00:14:51,329
need to have their different and so it

00:14:50,069 --> 00:14:53,069
does that very efficiently so the

00:14:51,329 --> 00:14:55,649
transfer protocol is also very efficient

00:14:53,069 --> 00:14:57,779
as well and commits is what drives

00:14:55,649 --> 00:15:01,849
everything commits could traps what we

00:14:57,779 --> 00:15:04,559
do it tracks what we do so basically the

00:15:01,849 --> 00:15:07,139
heads of the various branches of

00:15:04,559 --> 00:15:08,309
development are a commit so one or more

00:15:07,139 --> 00:15:10,229
commits that's the head of all the

00:15:08,309 --> 00:15:12,539
object chains that lead back there's

00:15:10,229 --> 00:15:14,729
typically one head called master so when

00:15:12,539 --> 00:15:16,349
you first create a git repo you'll get a

00:15:14,729 --> 00:15:18,659
new branch called master there's nothing

00:15:16,349 --> 00:15:20,429
special about the six letters mas te R

00:15:18,659 --> 00:15:22,319
this happens to be the name of the

00:15:20,429 --> 00:15:24,599
initial brands that you pull down so

00:15:22,319 --> 00:15:28,079
what a head is there is that it's a

00:15:24,599 --> 00:15:29,010
commit reflecting the tree of files at

00:15:28,079 --> 00:15:30,750
your and

00:15:29,010 --> 00:15:33,030
check in but I'll get to that in a

00:15:30,750 --> 00:15:34,980
minute but you can make other branches

00:15:33,030 --> 00:15:36,330
at will okay so you could just create

00:15:34,980 --> 00:15:38,460
whatever branch names you want they're

00:15:36,330 --> 00:15:40,110
all local to your repo and not reflected

00:15:38,460 --> 00:15:43,410
any central repo until you actually push

00:15:40,110 --> 00:15:45,480
them okay there's typically one commits

00:15:43,410 --> 00:15:47,370
in the repo that has no parent commit we

00:15:45,480 --> 00:15:49,800
call it the root commit that's basically

00:15:47,370 --> 00:15:54,210
says here's my initial tree setup and we

00:15:49,800 --> 00:15:57,060
commit that so so from a commit what a

00:15:54,210 --> 00:16:00,030
commit actually contains is it has as

00:15:57,060 --> 00:16:02,130
one element of it the Shah one of the

00:16:00,030 --> 00:16:04,890
tree of files that the commits

00:16:02,130 --> 00:16:07,440
represents now get can then use that

00:16:04,890 --> 00:16:09,720
sha-1 to go into the object repo that it

00:16:07,440 --> 00:16:11,880
has and pull out first the top level

00:16:09,720 --> 00:16:13,140
directory then recursively down all the

00:16:11,880 --> 00:16:16,230
sub directories for that particular

00:16:13,140 --> 00:16:18,810
commit but to commit then containing

00:16:16,230 --> 00:16:21,600
this sháá one for the trio files means

00:16:18,810 --> 00:16:23,520
that get can exactly precisely duplicate

00:16:21,600 --> 00:16:27,900
the actual set of files at that moment

00:16:23,520 --> 00:16:30,480
in time now the commits also has if it's

00:16:27,900 --> 00:16:32,610
a commit from a series of commits also

00:16:30,480 --> 00:16:34,530
has a sha-1 that points upstream and

00:16:32,610 --> 00:16:35,910
says here's the parent commit here's the

00:16:34,530 --> 00:16:37,830
commit that happened before the

00:16:35,910 --> 00:16:40,140
committee I was so we can chase down

00:16:37,830 --> 00:16:42,090
that part of a commit and figure out

00:16:40,140 --> 00:16:43,950
what the tree of files was as a parent

00:16:42,090 --> 00:16:45,540
and so on just keep chasing that down

00:16:43,950 --> 00:16:48,360
recursively we interview with everything

00:16:45,540 --> 00:16:50,010
all the way back to history okay so the

00:16:48,360 --> 00:16:54,840
interesting thing about this is that

00:16:50,010 --> 00:16:59,850
since every commit is as a hash of the

00:16:54,840 --> 00:17:01,410
tree sha1 plus the parent sha ones we

00:16:59,850 --> 00:17:04,470
know that if we have this particular

00:17:01,410 --> 00:17:06,180
shell one we know exactly it entirely

00:17:04,470 --> 00:17:08,579
the entire history back to the dawn of

00:17:06,180 --> 00:17:11,130
time for these particular commits so a

00:17:08,579 --> 00:17:12,990
given unique signature can tell us the

00:17:11,130 --> 00:17:15,000
entire history provided we have all the

00:17:12,990 --> 00:17:15,930
component objects in our repo and this

00:17:15,000 --> 00:17:17,820
is one of the interesting things about

00:17:15,930 --> 00:17:20,370
kid if you know that char one of a

00:17:17,820 --> 00:17:22,110
particular commit you also automatically

00:17:20,370 --> 00:17:24,180
know the entire history of everything

00:17:22,110 --> 00:17:25,440
that got there you can prove that this

00:17:24,180 --> 00:17:27,209
is the history for this particular set

00:17:25,440 --> 00:17:28,440
of files so that's one of the

00:17:27,209 --> 00:17:30,150
interesting things about this is it sort

00:17:28,440 --> 00:17:32,190
of a cryptographically strong way of

00:17:30,150 --> 00:17:34,140
proving that i have the entire history

00:17:32,190 --> 00:17:36,180
in exactly the way it went of course i

00:17:34,140 --> 00:17:37,350
think they've done some studies star one

00:17:36,180 --> 00:17:39,660
is still not quite

00:17:37,350 --> 00:17:41,460
yet but there's plans eventually to make

00:17:39,660 --> 00:17:43,830
it schaaf whatever the next one is but

00:17:41,460 --> 00:17:47,039
sha-1 is good for now seems to work 40

00:17:43,830 --> 00:17:50,460
character seems to be planning so as a

00:17:47,039 --> 00:17:52,950
person using yet I will have a working

00:17:50,460 --> 00:17:55,110
directory a working tree now the way

00:17:52,950 --> 00:17:56,970
this lays out in mint and on the disk is

00:17:55,110 --> 00:17:58,860
that I have a tree of all the files that

00:17:56,970 --> 00:18:01,110
I'm playing with but at the very top

00:17:58,860 --> 00:18:03,210
level there's a dot get directory and

00:18:01,110 --> 00:18:05,160
that belongs to get that's the thing

00:18:03,210 --> 00:18:06,750
well to get commands will go look for to

00:18:05,160 --> 00:18:11,370
put their stuff in and move things

00:18:06,750 --> 00:18:13,380
around in and unlike CVS or svn see this

00:18:11,370 --> 00:18:15,179
is a version there's no pollution of

00:18:13,380 --> 00:18:17,190
deeper directories so you don't have to

00:18:15,179 --> 00:18:19,080
write special tools to ignore the dot

00:18:17,190 --> 00:18:20,010
svn directory and every one of the sub

00:18:19,080 --> 00:18:21,870
directories you have to write all that

00:18:20,010 --> 00:18:24,059
because only this dot get right at the

00:18:21,870 --> 00:18:27,059
top no problem really nice for recursive

00:18:24,059 --> 00:18:28,650
grabs and so on so what that contains is

00:18:27,059 --> 00:18:30,929
there's a config file in there it's an

00:18:28,650 --> 00:18:32,640
ini style file with the brackets and

00:18:30,929 --> 00:18:35,640
subsections and stuff their commands to

00:18:32,640 --> 00:18:38,039
manage that it also contains the objects

00:18:35,640 --> 00:18:42,210
and again objects here are in the sense

00:18:38,039 --> 00:18:43,440
of blobs or commits or trees objects and

00:18:42,210 --> 00:18:46,500
things like that that's all going to be

00:18:43,440 --> 00:18:48,600
in there under refs heads you'll see all

00:18:46,500 --> 00:18:51,179
the things the branches will call them

00:18:48,600 --> 00:18:52,799
things like master or upstream wherever

00:18:51,179 --> 00:18:54,990
you want to call it for that and that's

00:18:52,799 --> 00:18:57,870
just going to be a reference to a sha-1

00:18:54,990 --> 00:18:59,640
that says here is my current master it's

00:18:57,870 --> 00:19:01,679
this sháá one and it'll translate that

00:18:59,640 --> 00:19:03,450
then into the appropriate objects when

00:19:01,679 --> 00:19:05,580
it looks at it in the object tree you

00:19:03,450 --> 00:19:07,289
also have the tags there we have logs

00:19:05,580 --> 00:19:10,679
various logs that happen through there

00:19:07,289 --> 00:19:12,450
as you start making commits get is

00:19:10,679 --> 00:19:14,610
actually tracking for the previous 30

00:19:12,450 --> 00:19:16,350
days where master has bends you can

00:19:14,610 --> 00:19:18,330
always recover back to that later on

00:19:16,350 --> 00:19:19,440
very handy when you accidentally destroy

00:19:18,330 --> 00:19:23,400
a master you gotta figure out how to get

00:19:19,440 --> 00:19:25,409
it back and also remotes so typically

00:19:23,400 --> 00:19:27,600
you're working with others so the way

00:19:25,409 --> 00:19:30,840
that works is that underneath refs

00:19:27,600 --> 00:19:33,059
remotes you'll have the name of a remote

00:19:30,840 --> 00:19:34,830
name like origin or some other names

00:19:33,059 --> 00:19:37,620
like that and then below that you'll

00:19:34,830 --> 00:19:40,049
have sha ones of what the remotes mean

00:19:37,620 --> 00:19:42,059
for those particular branches so that's

00:19:40,049 --> 00:19:43,890
where the shy ones go for that and then

00:19:42,059 --> 00:19:47,040
there's a magic index we'll talk more

00:19:43,890 --> 00:19:49,260
about that later this is basically the

00:19:47,040 --> 00:19:50,010
status of the next commit you're about

00:19:49,260 --> 00:19:51,450
to make

00:19:50,010 --> 00:19:53,070
so in other words you add things to the

00:19:51,450 --> 00:19:54,090
index to say I'm about to commit these

00:19:53,070 --> 00:19:56,100
things and then you finally do the

00:19:54,090 --> 00:19:57,660
commit based on the index and then

00:19:56,100 --> 00:19:59,640
there's this magic one called capital

00:19:57,660 --> 00:20:01,350
head and it's basically pointing to one

00:19:59,640 --> 00:20:03,900
of the branches so for example it will

00:20:01,350 --> 00:20:05,850
point to refs heads master when you're

00:20:03,900 --> 00:20:07,650
currently on the master branch it might

00:20:05,850 --> 00:20:09,180
point to one of the remotes it might

00:20:07,650 --> 00:20:11,550
actually be headless where you actually

00:20:09,180 --> 00:20:12,660
point at just a commit name and we'll

00:20:11,550 --> 00:20:16,200
talk a little bit about that later as

00:20:12,660 --> 00:20:20,370
well so the key thing oh here goes my

00:20:16,200 --> 00:20:22,290
throat please al please the objects are

00:20:20,370 --> 00:20:27,780
in one directory all shall wands are

00:20:22,290 --> 00:20:30,510
everywhere else ya know that's the code

00:20:27,780 --> 00:20:32,670
lynx-o's in other words the code given a

00:20:30,510 --> 00:20:34,380
sha-1 can go into the object tree and

00:20:32,670 --> 00:20:35,970
based on the names of things the objects

00:20:34,380 --> 00:20:38,460
we the indexes that are inside there it

00:20:35,970 --> 00:20:40,980
was able to extract objects so there's

00:20:38,460 --> 00:20:43,440
the object tree is actually it's there's

00:20:40,980 --> 00:20:44,730
dot idx files that are indexes and it

00:20:43,440 --> 00:20:46,920
goes inside those and those have

00:20:44,730 --> 00:20:48,990
mappings from Shah ones to other longer

00:20:46,920 --> 00:20:50,760
object names and stuff so yeah that

00:20:48,990 --> 00:20:53,040
that's a black box to me it just works

00:20:50,760 --> 00:20:54,540
alright that's that's all I care as long

00:20:53,040 --> 00:20:58,160
as Linus knows how it works that's all I

00:20:54,540 --> 00:21:01,290
care alright alright so the index is in

00:20:58,160 --> 00:21:04,140
logical sense is a directory of blob

00:21:01,290 --> 00:21:06,590
objects and it really just is there to

00:21:04,140 --> 00:21:09,180
represent the next commit unlike most

00:21:06,590 --> 00:21:11,250
change control systems where you

00:21:09,180 --> 00:21:13,560
basically spell out explicitly I'm

00:21:11,250 --> 00:21:14,910
committing the entire tree I'm

00:21:13,560 --> 00:21:18,150
committing everything in this directory

00:21:14,910 --> 00:21:21,060
or whatever I get allows you to stage

00:21:18,150 --> 00:21:23,250
files which means that you can say I've

00:21:21,060 --> 00:21:24,780
made all these changes but I really just

00:21:23,250 --> 00:21:27,230
want to commit that represents these

00:21:24,780 --> 00:21:29,520
five files because logically that's a

00:21:27,230 --> 00:21:31,170
change I want to record as a separate

00:21:29,520 --> 00:21:32,550
change and so we'll see how those

00:21:31,170 --> 00:21:35,250
commands work in a few minutes but

00:21:32,550 --> 00:21:37,050
basically you can say ok I have a start

00:21:35,250 --> 00:21:38,730
from original to commit and I've make

00:21:37,050 --> 00:21:40,500
changes 20 files but only want these

00:21:38,730 --> 00:21:43,650
five files to be part of the commit and

00:21:40,500 --> 00:21:44,940
that is what you add to the index before

00:21:43,650 --> 00:21:47,910
you do the commit and the commence are

00:21:44,940 --> 00:21:49,440
always made against the current index so

00:21:47,910 --> 00:21:50,520
you're going to add files to put content

00:21:49,440 --> 00:21:53,460
and then I'll show you the syntax in a

00:21:50,520 --> 00:21:55,380
little bit so commit when you say

00:21:53,460 --> 00:21:57,300
finally get commit it's going to take

00:21:55,380 --> 00:21:59,370
the current index whatever is actually

00:21:57,300 --> 00:22:01,500
in there and make that the next command

00:21:59,370 --> 00:22:03,299
and then everything moves forward so the

00:22:01,500 --> 00:22:05,759
difference between head which is the pre

00:22:03,299 --> 00:22:08,159
is commit and the index are changed

00:22:05,759 --> 00:22:10,110
things that are not yet committed so

00:22:08,159 --> 00:22:11,879
head was the previous commit now we're

00:22:10,110 --> 00:22:13,529
adding them as the index the difference

00:22:11,879 --> 00:22:15,289
between those two is what's going to get

00:22:13,529 --> 00:22:18,179
committed next when I say commit

00:22:15,289 --> 00:22:20,369
difference between the index and the

00:22:18,179 --> 00:22:22,259
working directory are things that I've

00:22:20,369 --> 00:22:24,570
changed but not yet added to the index

00:22:22,259 --> 00:22:25,799
now I have to say ninety-nine percent of

00:22:24,570 --> 00:22:27,419
the time you're just going to take

00:22:25,799 --> 00:22:29,519
everything you've change added all the

00:22:27,419 --> 00:22:30,899
index and immediately then commit it but

00:22:29,519 --> 00:22:32,220
there are times when you want to say

00:22:30,899 --> 00:22:34,619
we'll wait a second the change that made

00:22:32,220 --> 00:22:36,389
these five files of these 10 files sort

00:22:34,619 --> 00:22:37,769
of make sense together as a separate him

00:22:36,389 --> 00:22:39,960
it may be somebody just wants that

00:22:37,769 --> 00:22:43,080
feature rather than all that stuff so

00:22:39,960 --> 00:22:45,059
the default processing forget is to do

00:22:43,080 --> 00:22:46,679
everything loaded all in but the fact

00:22:45,059 --> 00:22:48,419
that you can do this sort of staged edit

00:22:46,679 --> 00:22:49,830
makes it a little more interesting and a

00:22:48,419 --> 00:22:52,259
little more complex to describe and

00:22:49,830 --> 00:22:53,970
again this features they're mostly

00:22:52,259 --> 00:22:56,549
because this is the way that Linus was

00:22:53,970 --> 00:22:58,350
working he would have a commit that he

00:22:56,549 --> 00:22:59,639
would make and then he'd be working sort

00:22:58,350 --> 00:23:01,710
of pulling in a bunch of stuff moving

00:22:59,639 --> 00:23:02,789
things around and but he'd only want to

00:23:01,710 --> 00:23:05,159
commit like part of it because that's

00:23:02,789 --> 00:23:06,299
only part that's working so far so that

00:23:05,159 --> 00:23:08,009
would be the way this would be working

00:23:06,299 --> 00:23:09,330
so this is this features there because

00:23:08,009 --> 00:23:11,100
line is needed it in fact almost

00:23:09,330 --> 00:23:12,179
everything that's in get is because line

00:23:11,100 --> 00:23:14,639
is needed it for the Linux kernel

00:23:12,179 --> 00:23:15,929
luckily it happens to be a good workflow

00:23:14,639 --> 00:23:19,649
for almost everything else it's large

00:23:15,929 --> 00:23:21,989
and also untracked things so I can also

00:23:19,649 --> 00:23:24,480
tell get ignore these files over here

00:23:21,989 --> 00:23:26,039
for example dot 0 files don't want to be

00:23:24,480 --> 00:23:28,289
checking in dot 0 files from a see

00:23:26,039 --> 00:23:30,659
compilation so you can tell get ignore

00:23:28,289 --> 00:23:32,340
all the data files ignore the files in

00:23:30,659 --> 00:23:33,809
the subdirectory because all output work

00:23:32,340 --> 00:23:35,940
and so on or ignore them because their

00:23:33,809 --> 00:23:37,559
configuration files or whatever so there

00:23:35,940 --> 00:23:38,759
between the index and the working direct

00:23:37,559 --> 00:23:43,859
you might also be the things that are

00:23:38,759 --> 00:23:45,539
untracked all right so one of the things

00:23:43,859 --> 00:23:47,580
that's interesting about get is it does

00:23:45,539 --> 00:23:50,039
not actually record any explicit

00:23:47,580 --> 00:23:53,100
renaming and it doesn't expect you to

00:23:50,039 --> 00:23:54,960
declare it either because of exact

00:23:53,100 --> 00:23:57,809
renaming can be determined by the sha-1

00:23:54,960 --> 00:23:59,580
if I take a file in this directory and

00:23:57,809 --> 00:24:01,769
move it over to that directory it's

00:23:59,580 --> 00:24:04,259
going to have the same sha-1 for its

00:24:01,769 --> 00:24:05,609
content and get can detect that by

00:24:04,259 --> 00:24:07,139
saying all the number is the same so I

00:24:05,609 --> 00:24:08,549
know this is the same content as this

00:24:07,139 --> 00:24:11,609
over here so that must have been a

00:24:08,549 --> 00:24:14,369
rename moving one to the other if you

00:24:11,609 --> 00:24:16,730
ask it nicely it will also detect copy

00:24:14,369 --> 00:24:18,590
and paste edits by similarity

00:24:16,730 --> 00:24:20,000
in other words you can say this file is

00:24:18,590 --> 00:24:22,429
the same as this file except these three

00:24:20,000 --> 00:24:24,080
lines changed and you can use that

00:24:22,429 --> 00:24:25,490
knowledge when you're doing merges to

00:24:24,080 --> 00:24:27,650
actually apply the merge to the right

00:24:25,490 --> 00:24:29,059
place because the file being applied

00:24:27,650 --> 00:24:30,950
over here really should be applied over

00:24:29,059 --> 00:24:33,429
here yet can you check that as well if

00:24:30,950 --> 00:24:35,390
you again if you tell it nicely okay and

00:24:33,429 --> 00:24:36,559
computers better than you at that you

00:24:35,390 --> 00:24:38,419
know it's going to keep track of all

00:24:36,559 --> 00:24:39,620
these sha-1 precise renaming zand all

00:24:38,419 --> 00:24:41,960
the similarity things again if you ask

00:24:39,620 --> 00:24:43,100
it nicely much better than me sort of

00:24:41,960 --> 00:24:45,140
remembering that while I'm doing my

00:24:43,100 --> 00:24:47,750
development work so kind of nice that it

00:24:45,140 --> 00:24:49,160
takes care of it all for me because

00:24:47,750 --> 00:24:52,160
explicit tracking is going to be wrong

00:24:49,160 --> 00:24:53,419
sometimes Weiss was finding this with

00:24:52,160 --> 00:24:55,370
other systems where they made you

00:24:53,419 --> 00:24:56,450
explicitly record renames is that

00:24:55,370 --> 00:24:59,950
occasionally that would actually make

00:24:56,450 --> 00:25:02,270
merge is harder to do because people

00:24:59,950 --> 00:25:03,919
aren't as good as this as computers

00:25:02,270 --> 00:25:05,630
apparently so it was a little bit of a

00:25:03,919 --> 00:25:06,799
problem so being wrong breaks merges

00:25:05,630 --> 00:25:08,540
there's no reason to actually record

00:25:06,799 --> 00:25:09,919
that so that's something also to kind of

00:25:08,540 --> 00:25:13,340
get over there is a command that says

00:25:09,919 --> 00:25:15,770
get move food a bar but all it really

00:25:13,340 --> 00:25:18,350
does is delay does the explicit commands

00:25:15,770 --> 00:25:20,419
of actually really renaming food a bar

00:25:18,350 --> 00:25:22,070
and then telling the Gideon to X ignore

00:25:20,419 --> 00:25:23,929
foo and telling they get indexed to add

00:25:22,070 --> 00:25:25,160
bar but you can just type those in

00:25:23,929 --> 00:25:27,260
directly and it's exactly the same

00:25:25,160 --> 00:25:30,200
operation in fact you could take the

00:25:27,260 --> 00:25:32,299
contents of file foo and delete the file

00:25:30,200 --> 00:25:34,790
and create a brand new file called bar

00:25:32,299 --> 00:25:36,620
and add it and that would be exactly the

00:25:34,790 --> 00:25:38,390
same operation it's the content that

00:25:36,620 --> 00:25:40,280
matters not the actual identity of the

00:25:38,390 --> 00:25:42,230
file so that's the other thing that's

00:25:40,280 --> 00:25:44,000
interesting about it is it's a Content

00:25:42,230 --> 00:25:45,770
Manager it's not really a file manager

00:25:44,000 --> 00:25:47,660
one of the things that's interesting

00:25:45,770 --> 00:25:49,940
coming out of this is that get does not

00:25:47,660 --> 00:25:52,280
track directories it only tracks files

00:25:49,940 --> 00:25:54,470
so people often ask well how do i add

00:25:52,280 --> 00:25:56,210
this empty directory to get you don't

00:25:54,470 --> 00:25:58,429
there's no content in there right so

00:25:56,210 --> 00:26:00,470
gets tracking content there's no content

00:25:58,429 --> 00:26:04,190
in empty directory so you don't get to

00:26:00,470 --> 00:26:05,510
do that okay so get also speaks many

00:26:04,190 --> 00:26:08,840
protocols I mentioned this a little bit

00:26:05,510 --> 00:26:10,490
earlier you could just our sink a get

00:26:08,840 --> 00:26:12,590
repo for one place to another and it's

00:26:10,490 --> 00:26:14,840
perfectly valid once it arrives there so

00:26:12,590 --> 00:26:16,940
basically the tree of files inter get

00:26:14,840 --> 00:26:19,220
you can copy them around and it works

00:26:16,940 --> 00:26:20,990
just fine there's also protocols it will

00:26:19,220 --> 00:26:24,169
speak to http if you have it on a

00:26:20,990 --> 00:26:26,240
website slight very slight problems

00:26:24,169 --> 00:26:28,370
definitely i'll just skip over that the

00:26:26,240 --> 00:26:29,570
get protocol if you talk to a git server

00:26:28,370 --> 00:26:31,310
is there but

00:26:29,570 --> 00:26:33,050
primarily the way people actually

00:26:31,310 --> 00:26:35,750
transfer files back and forth and get is

00:26:33,050 --> 00:26:37,370
with ssh so for example when you set up

00:26:35,750 --> 00:26:40,370
a github account you're actually setting

00:26:37,370 --> 00:26:42,320
up a ssh public key connecting to them

00:26:40,370 --> 00:26:44,000
and then they know what repos you

00:26:42,320 --> 00:26:45,650
actually have and they actually make an

00:26:44,000 --> 00:26:47,390
ssh connection for every get command

00:26:45,650 --> 00:26:49,670
that you specify and it talks to a

00:26:47,390 --> 00:26:51,050
remote command that sits on the other

00:26:49,670 --> 00:26:53,480
end and does all the protocol on the

00:26:51,050 --> 00:26:55,220
other side so I'd say ninety nine

00:26:53,480 --> 00:26:58,040
percent of the use of get is you over

00:26:55,220 --> 00:26:59,690
ssh at some point okay you also use get

00:26:58,040 --> 00:27:01,460
with local file so I could actually have

00:26:59,690 --> 00:27:04,490
just a local git repo and manage my

00:27:01,460 --> 00:27:06,380
trees that way as well so it also has

00:27:04,490 --> 00:27:09,830
the ability to import an export with

00:27:06,380 --> 00:27:11,420
both CVS and svn so for example I might

00:27:09,830 --> 00:27:12,830
use the CBS thing to have an entire

00:27:11,420 --> 00:27:15,110
history of a project at when I'm flying

00:27:12,830 --> 00:27:16,610
along 30,000 feet so it's great so I can

00:27:15,110 --> 00:27:18,740
bring in somebody who's using legacy

00:27:16,610 --> 00:27:20,180
change control systems I can still have

00:27:18,740 --> 00:27:23,300
the entire git repo to be able to manage

00:27:20,180 --> 00:27:26,470
that I have to say though that using get

00:27:23,300 --> 00:27:29,090
with you the CVS or svn is a bit like

00:27:26,470 --> 00:27:30,680
could people wanted that and people

00:27:29,090 --> 00:27:32,570
think that's the right way to go when

00:27:30,680 --> 00:27:35,600
they're using svn but for me it's like

00:27:32,570 --> 00:27:38,270
the old example of flying cars it's a

00:27:35,600 --> 00:27:41,000
flying car it would be neither a very

00:27:38,270 --> 00:27:42,530
good plane or a very good car okay and

00:27:41,000 --> 00:27:44,450
people everybody wants it or it's a

00:27:42,530 --> 00:27:45,800
flying car but then they forget it's not

00:27:44,450 --> 00:27:47,660
going to be very good playing because

00:27:45,800 --> 00:27:50,420
it's also a car that could be very good

00:27:47,660 --> 00:27:52,190
car because also a plane and get with

00:27:50,420 --> 00:27:54,080
svn or get with CBS is the same problem

00:27:52,190 --> 00:27:55,610
everybody wants it they want to be able

00:27:54,080 --> 00:27:57,890
to go back and forth but it's not going

00:27:55,610 --> 00:27:59,300
to be really good at all so try to state

00:27:57,890 --> 00:28:00,290
you know users may be a temporary

00:27:59,300 --> 00:28:02,570
solution if that's what your

00:28:00,290 --> 00:28:03,680
organization is using like svn it does

00:28:02,570 --> 00:28:06,290
actually lie to do some pretty nice

00:28:03,680 --> 00:28:09,140
things would get on top of svn on top of

00:28:06,290 --> 00:28:15,410
CBS but yeah yeah stay away from it

00:28:09,140 --> 00:28:19,400
again okay uh horse yes I don't know and

00:28:15,410 --> 00:28:22,400
I don't think so yeah it's probably some

00:28:19,400 --> 00:28:24,170
of that yes that's good good point okay

00:28:22,400 --> 00:28:26,000
so there are some third-party solutions

00:28:24,170 --> 00:28:27,320
for things like perforce and all the

00:28:26,000 --> 00:28:29,600
other big guys being able to import

00:28:27,320 --> 00:28:31,340
those pull them all in migration between

00:28:29,600 --> 00:28:32,840
the mercurial and get things like that

00:28:31,340 --> 00:28:35,390
so there's a lot of things out there the

00:28:32,840 --> 00:28:37,250
get core actually has a CBS server in it

00:28:35,390 --> 00:28:40,220
so you can actually have on top of your

00:28:37,250 --> 00:28:42,050
git repo you can provide a CBS interface

00:28:40,220 --> 00:28:43,520
so you got to go the other direction to

00:28:42,050 --> 00:28:45,200
you have all the cool people you

00:28:43,520 --> 00:28:47,360
get with his repo but you got some

00:28:45,200 --> 00:28:48,830
legacy client that only speak CBS you

00:28:47,360 --> 00:28:50,840
can actually pull that in and out I have

00:28:48,830 --> 00:28:52,400
not used that personally and I hope

00:28:50,840 --> 00:28:55,490
never to have to use that personally

00:28:52,400 --> 00:28:57,050
okay because once you know once you play

00:28:55,490 --> 00:28:58,780
with you it's kinda hard to that so you

00:28:57,050 --> 00:29:03,650
can get the latest get by going to

00:28:58,780 --> 00:29:06,560
google google code there's also packages

00:29:03,650 --> 00:29:08,570
for all the existing basically existing

00:29:06,560 --> 00:29:10,310
life things and you also track the get

00:29:08,570 --> 00:29:11,420
developer archive you can clone that

00:29:10,310 --> 00:29:13,490
particular URL and you're actually

00:29:11,420 --> 00:29:15,830
tracking day by day sometimes hour by

00:29:13,490 --> 00:29:17,810
hour changes to get I actually tracked

00:29:15,830 --> 00:29:19,220
this daily and I download get the newest

00:29:17,810 --> 00:29:21,830
latest get compilot make sure it works

00:29:19,220 --> 00:29:24,410
on my laptop as I said earlier i'm the i

00:29:21,830 --> 00:29:27,020
started when i started the gate project

00:29:24,410 --> 00:29:29,450
i was pulling it on to my openbsd system

00:29:27,020 --> 00:29:32,570
and on my laptop my OS 10 laptop here

00:29:29,450 --> 00:29:34,070
and i started noticing problems because

00:29:32,570 --> 00:29:35,720
there was a lot of linux isms in the

00:29:34,070 --> 00:29:38,270
gate code so i went on the mailing list

00:29:35,720 --> 00:29:39,980
i said do you mind if I point out these

00:29:38,270 --> 00:29:42,290
things they said no we actually expect

00:29:39,980 --> 00:29:44,150
this to be on non linux systems

00:29:42,290 --> 00:29:45,470
eventually so I have been the canary in

00:29:44,150 --> 00:29:47,600
the coal mine for a long time about

00:29:45,470 --> 00:29:49,820
compiling on non Linux system since I

00:29:47,600 --> 00:29:53,120
don't run linux anywhere so I needed to

00:29:49,820 --> 00:29:54,830
have this to also work in minus knows I

00:29:53,120 --> 00:29:56,780
don't run linux anyway yeah okay so our

00:29:54,830 --> 00:29:58,580
maintenance releases are very stable so

00:29:56,780 --> 00:30:00,710
there is a there is a branch on this

00:29:58,580 --> 00:30:02,630
tree that is sort of working its way

00:30:00,710 --> 00:30:04,670
towards the next release and I found it

00:30:02,630 --> 00:30:05,930
to be completely usable every day so

00:30:04,670 --> 00:30:08,030
I've never seen a problem with that

00:30:05,930 --> 00:30:09,560
they're very good at having side

00:30:08,030 --> 00:30:11,990
branches that are sort of experimental

00:30:09,560 --> 00:30:14,210
process experimental features going into

00:30:11,990 --> 00:30:15,320
it very good at that so the maintence

00:30:14,210 --> 00:30:17,660
release of these things are very stable

00:30:15,320 --> 00:30:18,890
and I just put my name up get something

00:30:17,660 --> 00:30:21,710
it out of the way of everything else and

00:30:18,890 --> 00:30:24,440
I add up getting be into my path late

00:30:21,710 --> 00:30:27,140
versions recent versions of get I've

00:30:24,440 --> 00:30:29,120
seen that in the last four years there's

00:30:27,140 --> 00:30:30,650
actually only one binary that has to be

00:30:29,120 --> 00:30:33,020
in your path and that's the actual get

00:30:30,650 --> 00:30:34,610
binary itself it will go find where it's

00:30:33,020 --> 00:30:36,950
installed and get to all the other

00:30:34,610 --> 00:30:39,200
pieces of everything you've got so it's

00:30:36,950 --> 00:30:41,480
actually quite nice about that so let's

00:30:39,200 --> 00:30:43,280
look at some actual syntax finally yay

00:30:41,480 --> 00:30:45,320
so enough concepts let's look at some

00:30:43,280 --> 00:30:48,760
real command lines okay all the git

00:30:45,320 --> 00:30:53,270
commands start with yet okay now in

00:30:48,760 --> 00:30:55,490
legacy get get some command bar has also

00:30:53,270 --> 00:30:56,029
been written as a one command get dashed

00:30:55,490 --> 00:30:58,399
at

00:30:56,029 --> 00:31:00,979
anbar and in fact you can still type

00:30:58,399 --> 00:31:04,009
that in if you have that get being in

00:31:00,979 --> 00:31:06,049
your director in your path but get

00:31:04,009 --> 00:31:08,869
network so basically ignore that second

00:31:06,049 --> 00:31:10,759
bullet really everything's like that but

00:31:08,869 --> 00:31:12,169
the man page is the reason I'm talking

00:31:10,759 --> 00:31:15,049
about this other syntax or you say get

00:31:12,169 --> 00:31:16,580
dash the command is that the man pages

00:31:15,049 --> 00:31:19,340
are still there if you want to type man

00:31:16,580 --> 00:31:21,289
get something it's man get dash and then

00:31:19,340 --> 00:31:23,509
the sub command okay so you have to know

00:31:21,289 --> 00:31:24,979
this this convention about that and a

00:31:23,509 --> 00:31:27,019
lot of the documentation still talks

00:31:24,979 --> 00:31:30,229
about it that way where it says get dash

00:31:27,019 --> 00:31:33,769
commits as one command but nowadays you

00:31:30,229 --> 00:31:36,289
just type yet space commit so that's the

00:31:33,769 --> 00:31:38,239
typical how you can invoke that but you

00:31:36,289 --> 00:31:39,559
can avoid knowing this just completely

00:31:38,239 --> 00:31:41,869
forget everything I said in the last 30

00:31:39,559 --> 00:31:43,580
seconds by saying get help and then

00:31:41,869 --> 00:31:44,839
commit get help commit or whatever so

00:31:43,580 --> 00:31:46,969
you need to know that there's actually a

00:31:44,839 --> 00:31:48,469
command called get dash commit but it's

00:31:46,969 --> 00:31:50,690
still in there okay where you can type

00:31:48,469 --> 00:31:52,609
git commit dash dash help lots of

00:31:50,690 --> 00:31:53,989
different variations for that so so you

00:31:52,609 --> 00:31:55,279
basically occasionally as I'm referring

00:31:53,989 --> 00:31:57,409
to things I might put the whole command

00:31:55,279 --> 00:31:58,460
with get dash whatever but that's legacy

00:31:57,409 --> 00:32:01,489
stuff i'm trying to get those out of

00:31:58,460 --> 00:32:03,249
these lives okay so the other thing

00:32:01,489 --> 00:32:05,719
that's sort of consistent about the get

00:32:03,249 --> 00:32:08,349
subcommands is that they're divided into

00:32:05,719 --> 00:32:11,269
categories porcelain and plumbing

00:32:08,349 --> 00:32:12,320
plumbing is the low-level get operation

00:32:11,269 --> 00:32:14,419
so these are things that are really

00:32:12,320 --> 00:32:16,879
close to the metal actually working on

00:32:14,419 --> 00:32:18,499
the actual repo accessing various things

00:32:16,879 --> 00:32:20,509
about that and the higher level

00:32:18,499 --> 00:32:22,369
operations are called porcelain okay so

00:32:20,509 --> 00:32:24,589
that is sort of more the user interface

00:32:22,369 --> 00:32:26,509
commands so you'll see even on the main

00:32:24,589 --> 00:32:28,999
get man page they'll break the commands

00:32:26,509 --> 00:32:30,799
into two categories in general you are

00:32:28,999 --> 00:32:32,719
going to be typing the porcelain

00:32:30,799 --> 00:32:36,349
commands things like commit is a high

00:32:32,719 --> 00:32:38,210
level command things like status is a

00:32:36,349 --> 00:32:39,859
high level command but there are

00:32:38,210 --> 00:32:41,659
low-level commands the reason is that

00:32:39,859 --> 00:32:43,129
they're both of our included is that

00:32:41,659 --> 00:32:44,509
you're going to be using porcelain the

00:32:43,129 --> 00:32:47,029
stuff that's got the nice pretty output

00:32:44,509 --> 00:32:47,960
from the command line so that's the kind

00:32:47,029 --> 00:32:49,190
of stuff is going to make sense to

00:32:47,960 --> 00:32:50,839
humans right it's going to have lots and

00:32:49,190 --> 00:32:52,909
lots of annotations and things like that

00:32:50,839 --> 00:32:55,429
but they would be hard to parse if

00:32:52,909 --> 00:32:56,749
you're writing a script with it so this

00:32:55,429 --> 00:32:58,639
is the reason for the two different

00:32:56,749 --> 00:33:01,159
categories is that if you're going to

00:32:58,639 --> 00:33:03,289
write any kinds of scripts that actually

00:33:01,159 --> 00:33:05,239
drive get to do different things you

00:33:03,289 --> 00:33:06,619
should be using only plumbing so make

00:33:05,239 --> 00:33:08,389
sure you're only using commands in the

00:33:06,619 --> 00:33:08,820
plumbing category that means you got to

00:33:08,389 --> 00:33:10,380
be a little bit

00:33:08,820 --> 00:33:12,600
more of the work but there's actually

00:33:10,380 --> 00:33:13,710
not much semantic it risky the porcelain

00:33:12,600 --> 00:33:15,090
plumbing in terms of what it can help

00:33:13,710 --> 00:33:16,500
but you have to a little bit more work

00:33:15,090 --> 00:33:19,080
to parse the output of the plumbing

00:33:16,500 --> 00:33:22,080
what's really nice for that is that is

00:33:19,080 --> 00:33:24,360
that the outputs of the plumbing is

00:33:22,080 --> 00:33:25,679
going to is committed to be upward

00:33:24,360 --> 00:33:27,240
compatible so you're going to write a

00:33:25,679 --> 00:33:29,970
script today against the current get

00:33:27,240 --> 00:33:31,440
android based on the plumbing then you

00:33:29,970 --> 00:33:33,120
know two years from now descriptions to

00:33:31,440 --> 00:33:34,529
work six years from now who knows but

00:33:33,120 --> 00:33:35,820
cheers from now the Scriptures still

00:33:34,529 --> 00:33:38,039
work and that's the whole point of that

00:33:35,820 --> 00:33:41,220
the plumbing is also good because it has

00:33:38,039 --> 00:33:42,779
various options like dash Z on a lot of

00:33:41,220 --> 00:33:44,940
them to be able to output file names

00:33:42,779 --> 00:33:46,919
that are null terminate addressed a

00:33:44,940 --> 00:33:47,970
Sturman ated and that's really really

00:33:46,919 --> 00:33:50,009
important when you're writing scripts

00:33:47,970 --> 00:33:51,960
because you don't want somebody's space

00:33:50,009 --> 00:33:54,419
containing filename to screw up your

00:33:51,960 --> 00:33:56,129
script whereas the porcelain of course

00:33:54,419 --> 00:33:57,720
doesn't have that kind of options you

00:33:56,129 --> 00:33:59,429
wouldn't want to put an O out to a to a

00:33:57,720 --> 00:34:01,830
human readers I can't see the knoll and

00:33:59,429 --> 00:34:04,019
it's all really messed up so those the

00:34:01,830 --> 00:34:06,269
port the porcelain commands tend not to

00:34:04,019 --> 00:34:10,139
have that kind of options for those okay

00:34:06,269 --> 00:34:12,329
so how do we get from a collection of

00:34:10,139 --> 00:34:13,710
files to an actual git repo it's

00:34:12,329 --> 00:34:15,690
actually really simple we CD into the

00:34:13,710 --> 00:34:18,359
top level directory which I've getting

00:34:15,690 --> 00:34:19,409
it at this point get looks at the

00:34:18,359 --> 00:34:21,060
current directory make sure it's not

00:34:19,409 --> 00:34:23,490
already a git repo or that it's inside a

00:34:21,060 --> 00:34:25,440
repo already and so it's okay cool and

00:34:23,490 --> 00:34:28,139
it creates a dot get in the current

00:34:25,440 --> 00:34:30,089
directory so that means that we now have

00:34:28,139 --> 00:34:31,770
the object tree the master branch all

00:34:30,089 --> 00:34:34,500
that stuff is all created at that point

00:34:31,770 --> 00:34:35,609
okay so we just you know CDO top of our

00:34:34,500 --> 00:34:36,899
directory and say get an ant and it's

00:34:35,609 --> 00:34:39,300
done you can also see due to an empty

00:34:36,899 --> 00:34:40,440
directory so that's works too now

00:34:39,300 --> 00:34:42,629
another thing you might want to do

00:34:40,440 --> 00:34:44,849
before you start using this is to edit

00:34:42,629 --> 00:34:47,339
the dot get ignore file the dot get

00:34:44,849 --> 00:34:49,980
ignored takes typical file glob patterns

00:34:47,339 --> 00:34:52,619
like star dot C started out and we'll

00:34:49,980 --> 00:34:54,720
make sure that get doesn't pay attention

00:34:52,619 --> 00:34:56,429
to those files in the directories from

00:34:54,720 --> 00:34:58,230
there below you can have a good ignore

00:34:56,429 --> 00:34:59,849
in every director that you want it only

00:34:58,230 --> 00:35:01,980
applies to the files below it in the

00:34:59,849 --> 00:35:03,270
tree I typically end up with just one of

00:35:01,980 --> 00:35:05,010
them at the top level directory and I

00:35:03,270 --> 00:35:06,630
spell out the things in there let's say

00:35:05,010 --> 00:35:09,060
there are things that I want to have for

00:35:06,630 --> 00:35:11,460
example I use Emacs so I have typical

00:35:09,060 --> 00:35:13,349
half star tilde in might get ignore

00:35:11,460 --> 00:35:14,880
because I'll Emacs is creating all these

00:35:13,349 --> 00:35:16,680
till the files as the back of Klaus

00:35:14,880 --> 00:35:18,300
whatever text editor you use you

00:35:16,680 --> 00:35:19,619
probably want to create something in the

00:35:18,300 --> 00:35:21,869
dotted get ignore that ignores your

00:35:19,619 --> 00:35:22,530
particular text editor files but once

00:35:21,869 --> 00:35:24,240
I've done that

00:35:22,530 --> 00:35:25,830
I can tell get that I want to pay

00:35:24,240 --> 00:35:29,040
attention to all the rest of the files

00:35:25,830 --> 00:35:30,840
from here down by doing get add dot in

00:35:29,040 --> 00:35:32,760
this case whatever I'm telling add

00:35:30,840 --> 00:35:34,230
ensuing it recursively dot of course

00:35:32,760 --> 00:35:36,360
would mean recursively from the current

00:35:34,230 --> 00:35:39,570
directory on down now this hasn't

00:35:36,360 --> 00:35:41,820
committed it yet this is simply adding

00:35:39,570 --> 00:35:44,130
it to that index I said earlier the

00:35:41,820 --> 00:35:45,990
commit takes the current index and makes

00:35:44,130 --> 00:35:47,370
a commit of it so by saying get AB

00:35:45,990 --> 00:35:49,800
dhanam saying take all the current files

00:35:47,370 --> 00:35:51,750
as they currently are and this is what's

00:35:49,800 --> 00:35:53,760
going to be my next commit and then get

00:35:51,750 --> 00:35:56,280
commit for that it will commit that will

00:35:53,760 --> 00:35:59,250
fire up a text editor with the list of

00:35:56,280 --> 00:36:01,320
files being added and a place for you to

00:35:59,250 --> 00:36:03,420
edit a commit message so you want to put

00:36:01,320 --> 00:36:05,700
something nice there a good commit

00:36:03,420 --> 00:36:08,220
message has two parts to it it has a

00:36:05,700 --> 00:36:10,590
brief description of what the committee

00:36:08,220 --> 00:36:13,470
is typically under 60 or 70 characters

00:36:10,590 --> 00:36:16,230
as alignment by its own and then has a

00:36:13,470 --> 00:36:17,520
long description after that often don't

00:36:16,230 --> 00:36:19,350
do the second part because I'm lazy but

00:36:17,520 --> 00:36:20,910
the first part is essential because when

00:36:19,350 --> 00:36:22,890
we're looking at logs it generally just

00:36:20,910 --> 00:36:24,780
prints that first line so you want that

00:36:22,890 --> 00:36:26,190
to be a really nice sort of summary of

00:36:24,780 --> 00:36:28,440
what the commits about because that's

00:36:26,190 --> 00:36:31,590
what could end up with all the logs so

00:36:28,440 --> 00:36:33,240
once I exit the text editor gets us okay

00:36:31,590 --> 00:36:35,700
and makes the commit it takes the

00:36:33,240 --> 00:36:37,950
current tree creates the sha-1 from the

00:36:35,700 --> 00:36:39,540
tree recursively on down and then

00:36:37,950 --> 00:36:41,250
creates the commit message adds that to

00:36:39,540 --> 00:36:43,230
it as a date and time stamp pads my name

00:36:41,250 --> 00:36:45,960
to it and then creates the commit

00:36:43,230 --> 00:36:50,420
message from that so now we have a new

00:36:45,960 --> 00:36:50,420
head it'll be that particular head yeah

00:36:52,250 --> 00:36:56,760
yes the docket ignore is also going to

00:36:55,170 --> 00:36:59,220
be added unless you tell it to ignore

00:36:56,760 --> 00:37:00,240
the good ignore what you can okay but

00:36:59,220 --> 00:37:02,490
otherwise yeah it's going to add that

00:37:00,240 --> 00:37:04,560
too there's actually another option if

00:37:02,490 --> 00:37:06,750
the get ignore should really only be for

00:37:04,560 --> 00:37:08,700
things that everybody should ignore but

00:37:06,750 --> 00:37:11,520
if you have I sort of lied a bit earlier

00:37:08,700 --> 00:37:15,240
because well I put star Tildy in another

00:37:11,520 --> 00:37:19,260
file it's called get / config oh no got

00:37:15,240 --> 00:37:21,690
that get / info / exclude sorry that

00:37:19,260 --> 00:37:23,970
there / info / exclude file is just like

00:37:21,690 --> 00:37:26,640
a good ignore but it's not trapped it's

00:37:23,970 --> 00:37:28,110
not part of the repo so it's good for me

00:37:26,640 --> 00:37:30,060
but not other people so that's that's

00:37:28,110 --> 00:37:31,230
pretty handy as well but getting our

00:37:30,060 --> 00:37:34,080
should be for things that everybody

00:37:31,230 --> 00:37:36,180
should ignore okay like maybe the result

00:37:34,080 --> 00:37:37,680
of build products like dot 0 files

00:37:36,180 --> 00:37:39,660
if you're going to make file in this one

00:37:37,680 --> 00:37:40,829
credos probably one I had get ignored of

00:37:39,660 --> 00:37:42,630
that so it doesn't mess people up when

00:37:40,829 --> 00:37:45,869
they go to their system as well okay

00:37:42,630 --> 00:37:47,099
yeah good question um so we do get

00:37:45,869 --> 00:37:48,300
commit we've got the initial commit

00:37:47,099 --> 00:37:50,970
there it's going to create an initial

00:37:48,300 --> 00:37:52,559
branch called master again nothing

00:37:50,970 --> 00:37:53,910
special about the name master is just

00:37:52,559 --> 00:37:57,540
the default when you're coming out of

00:37:53,910 --> 00:38:00,059
the of the shoot here so so that it's

00:37:57,540 --> 00:38:02,490
going to create a commit and the commit

00:38:00,059 --> 00:38:05,099
is going to be accessible by two

00:38:02,490 --> 00:38:07,050
different names capital head which

00:38:05,099 --> 00:38:10,230
represents the current commit reflecting

00:38:07,050 --> 00:38:11,930
your working directory and master also

00:38:10,230 --> 00:38:15,599
reflecting the head of the master branch

00:38:11,930 --> 00:38:17,460
now as we make more commits master is

00:38:15,599 --> 00:38:19,800
going to keep moving forward forward and

00:38:17,460 --> 00:38:21,750
forward in step with head moving forward

00:38:19,800 --> 00:38:23,280
and forward and forward but as we create

00:38:21,750 --> 00:38:24,930
other branches then master will still

00:38:23,280 --> 00:38:27,210
reflect this old branch and we can go

00:38:24,930 --> 00:38:29,130
back to it anytime we want to later see

00:38:27,210 --> 00:38:30,630
more examples of that later now it could

00:38:29,130 --> 00:38:33,569
also do this on a tarball we can extract

00:38:30,630 --> 00:38:35,609
the tarball out CD into it getting it

00:38:33,569 --> 00:38:37,319
and get ad dot so we actually could take

00:38:35,609 --> 00:38:39,059
initial car ball coming from somebody

00:38:37,319 --> 00:38:40,200
else and create that as our initial

00:38:39,059 --> 00:38:42,690
commit that we're going to be building

00:38:40,200 --> 00:38:45,109
work on okay it's going to have them

00:38:42,690 --> 00:38:50,010
cough too much it's pretty good so far

00:38:45,109 --> 00:38:52,500
alright so moving on so once I have a

00:38:50,010 --> 00:38:53,819
repo I what if I want to work on it in

00:38:52,500 --> 00:38:55,589
two different places or if I want to let

00:38:53,819 --> 00:38:57,900
you work on it as well as me working on

00:38:55,589 --> 00:39:00,829
it we have to clone so there's two ways

00:38:57,900 --> 00:39:03,690
to create a repo get an it and get club

00:39:00,829 --> 00:39:05,579
okay so with git clone is going to

00:39:03,690 --> 00:39:08,190
create a subdirectory and your work

00:39:05,579 --> 00:39:09,930
files you got getter in there same thing

00:39:08,190 --> 00:39:12,599
as before it's basically get clone

00:39:09,930 --> 00:39:13,770
remote spec and it will create the local

00:39:12,599 --> 00:39:14,880
directory I'll collect more about that

00:39:13,770 --> 00:39:17,309
in a second show you the actual syntax

00:39:14,880 --> 00:39:19,349
but your work files do not get her in

00:39:17,309 --> 00:39:22,049
there and an interesting thing about

00:39:19,349 --> 00:39:24,720
cloning is that so I have a master

00:39:22,049 --> 00:39:26,460
branch in my repo if I clone it over to

00:39:24,720 --> 00:39:28,530
your repo and you create a brand new

00:39:26,460 --> 00:39:31,859
repo from there you're going to have a

00:39:28,530 --> 00:39:34,380
remote that points with master back to

00:39:31,859 --> 00:39:36,540
my current master so they both have the

00:39:34,380 --> 00:39:37,559
same sha-1 we know that my Master's the

00:39:36,540 --> 00:39:38,880
same is your master because they have

00:39:37,559 --> 00:39:40,770
the same number and you have all the

00:39:38,880 --> 00:39:43,410
same object files that I have so you can

00:39:40,770 --> 00:39:45,030
reconstruct that from the sha-1 all the

00:39:43,410 --> 00:39:46,829
way down to the same tree but of course

00:39:45,030 --> 00:39:47,330
i'm going to have additional work going

00:39:46,829 --> 00:39:48,950
on

00:39:47,330 --> 00:39:50,690
and that means your master is going to

00:39:48,950 --> 00:39:52,490
be out of sync with my master and that's

00:39:50,690 --> 00:39:55,070
what all the resyncing stuff is all

00:39:52,490 --> 00:39:57,410
talking about a few minutes so also if I

00:39:55,070 --> 00:39:58,820
have a head branch checked out you're

00:39:57,410 --> 00:40:01,100
going to have that as your initial

00:39:58,820 --> 00:40:03,140
master branch as well so I want to

00:40:01,100 --> 00:40:04,730
distinguish in this clone repo there's

00:40:03,140 --> 00:40:06,800
two kinds of branches over here now

00:40:04,730 --> 00:40:08,960
there's the branches that are worked on

00:40:06,800 --> 00:40:12,320
locally like master and there's the

00:40:08,960 --> 00:40:14,450
branches that are tracking my root mass

00:40:12,320 --> 00:40:16,520
my branches over here so we call those

00:40:14,450 --> 00:40:18,110
tracking branches versus local branches

00:40:16,520 --> 00:40:19,550
and there's different ways of specifying

00:40:18,110 --> 00:40:22,370
that I'll show you the commands in a few

00:40:19,550 --> 00:40:24,680
minutes because all other things does is

00:40:22,370 --> 00:40:27,350
that again by default when I clone from

00:40:24,680 --> 00:40:29,660
my repo to your repo or would you clone

00:40:27,350 --> 00:40:33,020
from everybody your group oh it also

00:40:29,660 --> 00:40:34,550
sets up a remote called origin origin

00:40:33,020 --> 00:40:36,260
just says this is the thing I was

00:40:34,550 --> 00:40:37,850
initially clone from and there are

00:40:36,260 --> 00:40:40,550
commands that need to know the remote

00:40:37,850 --> 00:40:41,750
for example push and pull and fetch the

00:40:40,550 --> 00:40:44,510
things that actually talked between

00:40:41,750 --> 00:40:47,000
repose need another name of a remote the

00:40:44,510 --> 00:40:48,800
initial remote is called origin again

00:40:47,000 --> 00:40:51,260
nothing special about that name again I

00:40:48,800 --> 00:40:53,030
can delete that that pointer I can send

00:40:51,260 --> 00:40:54,980
it somewhere else it doesn't care it's

00:40:53,030 --> 00:40:56,930
just that by default the initial branch

00:40:54,980 --> 00:40:59,270
is called master the initial cloned

00:40:56,930 --> 00:41:00,950
remote it's called origin but otherwise

00:40:59,270 --> 00:41:03,020
there is nothing in the code that

00:41:00,950 --> 00:41:06,890
presumes that it's just that happens to

00:41:03,020 --> 00:41:09,410
be the default names okay so the typical

00:41:06,890 --> 00:41:11,180
workflow is that you're changing files

00:41:09,410 --> 00:41:12,500
and committing them changing files

00:41:11,180 --> 00:41:14,660
committing them repeating that over and

00:41:12,500 --> 00:41:17,000
over again whenever you do a commit

00:41:14,660 --> 00:41:19,280
you're always on some branch like master

00:41:17,000 --> 00:41:21,680
so branch though is just really just a

00:41:19,280 --> 00:41:24,530
named commit so in other words when I am

00:41:21,680 --> 00:41:26,480
on the master branch my hair points at

00:41:24,530 --> 00:41:29,180
master and master points at a sha-1 and

00:41:26,480 --> 00:41:31,160
that sha-1 reflects the previous state

00:41:29,180 --> 00:41:33,130
of the files that are currently in the

00:41:31,160 --> 00:41:36,340
directory now what are we making changes

00:41:33,130 --> 00:41:39,680
when you commit the action of a commit

00:41:36,340 --> 00:41:42,470
takes the current head and says that's

00:41:39,680 --> 00:41:45,140
now the parent commit takes the new

00:41:42,470 --> 00:41:47,090
index and adds that together with the

00:41:45,140 --> 00:41:48,980
parent commit and the message and since

00:41:47,090 --> 00:41:51,290
this is the new commit and moves the

00:41:48,980 --> 00:41:52,820
master one step forward so each time

00:41:51,290 --> 00:41:55,400
you're making a commit you're basically

00:41:52,820 --> 00:41:58,160
making a chain every parent commit

00:41:55,400 --> 00:42:00,080
points to the previous commit and each

00:41:58,160 --> 00:42:00,710
new commit has its own sháá one that

00:42:00,080 --> 00:42:02,390
reflects the

00:42:00,710 --> 00:42:03,770
current state of things so that's

00:42:02,390 --> 00:42:05,630
basically all committing is doing you're

00:42:03,770 --> 00:42:08,680
basically making this directed graph of

00:42:05,630 --> 00:42:11,570
every new commit being a sha-1

00:42:08,680 --> 00:42:14,750
consisting of the message plus the pair

00:42:11,570 --> 00:42:16,180
commits plus the tree and that's what

00:42:14,750 --> 00:42:18,109
it's recording every time you say commit

00:42:16,180 --> 00:42:19,910
so the branch is moving forward

00:42:18,109 --> 00:42:21,320
constantly to become the new commits

00:42:19,910 --> 00:42:23,330
you're basically just creating a little

00:42:21,320 --> 00:42:25,160
link so you're creating a directed

00:42:23,330 --> 00:42:27,619
acyclic graph ooh fancy words all right

00:42:25,160 --> 00:42:29,930
and their root in the branch heads okay

00:42:27,619 --> 00:42:31,970
in other words you might have multiple

00:42:29,930 --> 00:42:33,589
areas of development so you might have

00:42:31,970 --> 00:42:36,140
master you might have feature one

00:42:33,589 --> 00:42:39,560
feature two and again these are all just

00:42:36,140 --> 00:42:41,690
names for a particular commit that has

00:42:39,560 --> 00:42:43,310
parent commits leading to older history

00:42:41,690 --> 00:42:44,630
eventually hopefully leading to a

00:42:43,310 --> 00:42:47,599
history that's in common when it

00:42:44,630 --> 00:42:49,820
actually brings solved so when we talk

00:42:47,599 --> 00:42:51,890
about merges in a few minutes merge is

00:42:49,820 --> 00:42:54,349
just a commit that has multiple parents

00:42:51,890 --> 00:42:56,060
so it's when i come back from bullock

00:42:54,349 --> 00:42:57,830
apparel trees i'm going to have two

00:42:56,060 --> 00:42:59,330
parents now and that's only difference

00:42:57,830 --> 00:43:01,220
between a merge commit and the rest of

00:42:59,330 --> 00:43:02,869
the commands see available things so

00:43:01,220 --> 00:43:05,210
again typical workflow just to make this

00:43:02,869 --> 00:43:07,880
a more concrete edit in an edit right

00:43:05,210 --> 00:43:09,650
get add the files you've changed or get

00:43:07,880 --> 00:43:11,540
ad dot you know whatever it takes to do

00:43:09,650 --> 00:43:15,950
that this is going to add the files to

00:43:11,540 --> 00:43:18,440
the index and then you say get status

00:43:15,950 --> 00:43:20,450
get status is cool i say it a lot hits

00:43:18,440 --> 00:43:22,580
is just says here's what's going on

00:43:20,450 --> 00:43:23,660
right now you know you have these files

00:43:22,580 --> 00:43:25,670
have been changed in the working

00:43:23,660 --> 00:43:27,710
directory these files have been added to

00:43:25,670 --> 00:43:30,830
the index and what's also nice about git

00:43:27,710 --> 00:43:32,450
status is it also tells you how to undo

00:43:30,830 --> 00:43:34,220
that if you don't want to do that so it

00:43:32,450 --> 00:43:35,990
says these files have change any better

00:43:34,220 --> 00:43:37,880
to the index but if you don't want to do

00:43:35,990 --> 00:43:40,640
that then type this command so it's

00:43:37,880 --> 00:43:46,760
actually pretty a pretty a help all the

00:43:40,640 --> 00:43:48,530
way through yeah it's what you're adding

00:43:46,760 --> 00:43:51,470
is the fact that you're adding its

00:43:48,530 --> 00:43:53,720
current state so the file is already in

00:43:51,470 --> 00:43:55,190
the index as the previous state and if

00:43:53,720 --> 00:43:56,839
you didn't say add it would try to

00:43:55,190 --> 00:44:00,859
commit it in its old value not its new

00:43:56,839 --> 00:44:02,990
value add always says I want this file

00:44:00,859 --> 00:44:06,440
in its current state to be the next

00:44:02,990 --> 00:44:08,000
commit so if you fail to do that you're

00:44:06,440 --> 00:44:09,050
nothing changes in the committee even

00:44:08,000 --> 00:44:12,859
though it might be changing the working

00:44:09,050 --> 00:44:15,140
directory make sense all right all right

00:44:12,859 --> 00:44:16,609
so we're constantly saying it now there

00:44:15,140 --> 00:44:19,690
is a there's a shortcut when you say git

00:44:16,609 --> 00:44:22,609
commit you can say git commit dash a

00:44:19,690 --> 00:44:24,799
which says all the files you already

00:44:22,609 --> 00:44:27,440
know about just pretend I said add to

00:44:24,799 --> 00:44:29,509
all those what that mrs. though is if

00:44:27,440 --> 00:44:32,869
you add any new files it won't pick

00:44:29,509 --> 00:44:34,369
those up so I just think just I can get

00:44:32,869 --> 00:44:38,150
a dot sometimes it's pretty hand for

00:44:34,369 --> 00:44:40,099
that all right okay so get status tells

00:44:38,150 --> 00:44:41,450
difference between the old commit the

00:44:40,099 --> 00:44:43,039
current index and the working directory

00:44:41,450 --> 00:44:46,009
gives you a pretty voluminous way of

00:44:43,039 --> 00:44:47,720
going through all those so we say good

00:44:46,009 --> 00:44:49,789
command again we're popped into a text

00:44:47,720 --> 00:44:51,289
editor if you just want to type a

00:44:49,789 --> 00:44:53,509
one-line message like I do a lot of the

00:44:51,289 --> 00:44:55,519
time you can say git commit dash m and a

00:44:53,509 --> 00:44:57,559
text string as a single argument and

00:44:55,519 --> 00:44:59,450
then it just takes that message so that

00:44:57,559 --> 00:45:00,890
avoids the whole text editor step and

00:44:59,450 --> 00:45:02,630
sometimes when I'm working remotely I

00:45:00,890 --> 00:45:04,759
don't want to have a fire up a tmaxx or

00:45:02,630 --> 00:45:07,160
VI remotely so I just say the message in

00:45:04,759 --> 00:45:08,869
there ok the first text line as i said

00:45:07,160 --> 00:45:10,249
is used for all the short logs anytime

00:45:08,869 --> 00:45:12,349
we're talking about a series of commits

00:45:10,249 --> 00:45:13,519
then it just has this first line and it

00:45:12,349 --> 00:45:15,440
was your nice but you could always get

00:45:13,519 --> 00:45:17,809
to the full message by typing longer

00:45:15,440 --> 00:45:19,730
commands so again what's happened here

00:45:17,809 --> 00:45:22,339
is i described a moment ago is whatever

00:45:19,730 --> 00:45:25,759
brands were currently on like master

00:45:22,339 --> 00:45:28,579
then the current commit that master

00:45:25,759 --> 00:45:30,589
represents becomes the parent commit for

00:45:28,579 --> 00:45:32,059
the commit we're about to create and we

00:45:30,589 --> 00:45:33,950
take the message and we take the current

00:45:32,059 --> 00:45:35,539
sha-1 of the tree that's in the index

00:45:33,950 --> 00:45:37,609
and we put those all together announced

00:45:35,539 --> 00:45:40,940
a new commit and then you're back to

00:45:37,609 --> 00:45:42,650
more editing ok but what brands right so

00:45:40,940 --> 00:45:45,430
get really encourages branching and

00:45:42,650 --> 00:45:49,160
encourages going off on a diverse a

00:45:45,430 --> 00:45:52,130
workflow because in reality a branch is

00:45:49,160 --> 00:45:54,200
just 41 text bytes so a branch is just a

00:45:52,130 --> 00:45:55,519
name of a file or directory and a 40

00:45:54,200 --> 00:45:57,739
character heck string that's all it is

00:45:55,519 --> 00:46:00,019
so 4 plus a new line so that's all it is

00:45:57,739 --> 00:46:01,430
so typically what you do is you create

00:46:00,019 --> 00:46:03,259
branches anytime you want to make a

00:46:01,430 --> 00:46:05,089
change I know that's probably something

00:46:03,259 --> 00:46:06,769
interesting to get used to but it's

00:46:05,089 --> 00:46:08,329
trivial for me now it's like I did set

00:46:06,769 --> 00:46:10,819
you know you used to be like branches

00:46:08,329 --> 00:46:13,609
and CBS oh you know branch it you know

00:46:10,819 --> 00:46:15,470
but it s pn but yet I do it all the time

00:46:13,609 --> 00:46:18,140
so typical we're close I think of

00:46:15,470 --> 00:46:22,069
something I want to change and I say git

00:46:18,140 --> 00:46:24,349
checkout dash be the branch name topic

00:46:22,069 --> 00:46:26,750
game their master and what it does is it

00:46:24,349 --> 00:46:29,960
starts with the current head that's in

00:46:26,750 --> 00:46:33,290
faster and it creates a copy of that in

00:46:29,960 --> 00:46:35,090
topic name so now we have two branches

00:46:33,290 --> 00:46:37,460
that refer to exactly the same commit

00:46:35,090 --> 00:46:39,230
this is how every branch starts it also

00:46:37,460 --> 00:46:41,450
checks it out in the sense that check

00:46:39,230 --> 00:46:44,450
out means this is all so I'm making the

00:46:41,450 --> 00:46:47,540
current working directory attached to

00:46:44,450 --> 00:46:49,400
topic name in this case so we also have

00:46:47,540 --> 00:46:50,870
that as being my current head and then

00:46:49,400 --> 00:46:52,910
we work with work and commit to topic

00:46:50,870 --> 00:46:54,770
name in other words now master isn't

00:46:52,910 --> 00:46:57,050
moving but I'm going ahead on a side

00:46:54,770 --> 00:46:59,270
branch creating new commits on the topic

00:46:57,050 --> 00:47:00,740
thing in other words i'm adding new

00:46:59,270 --> 00:47:02,300
feature so i'll keep working until it

00:47:00,740 --> 00:47:04,340
works right you know now i've got this

00:47:02,300 --> 00:47:06,620
new feature and now it's time to bring

00:47:04,340 --> 00:47:09,740
things back so it's great because then i

00:47:06,620 --> 00:47:11,050
could check out master now the pre the

00:47:09,740 --> 00:47:13,460
working directory once i do that

00:47:11,050 --> 00:47:15,680
reflects the original point of master

00:47:13,460 --> 00:47:17,450
now we haven't lost the files yet

00:47:15,680 --> 00:47:18,890
because they're still in the commits for

00:47:17,450 --> 00:47:21,200
topic name okay so they're still over

00:47:18,890 --> 00:47:23,960
there but that will rewound back to

00:47:21,200 --> 00:47:27,500
master at this point and then we say get

00:47:23,960 --> 00:47:30,020
merge topic name now what that says is

00:47:27,500 --> 00:47:32,240
that get will now look at all the

00:47:30,020 --> 00:47:35,690
differences between master and topic

00:47:32,240 --> 00:47:37,820
name and merge them together do the same

00:47:35,690 --> 00:47:39,530
thing for both okay so we're going to

00:47:37,820 --> 00:47:42,410
change master because that's the current

00:47:39,530 --> 00:47:44,660
check out by including the differences

00:47:42,410 --> 00:47:47,570
that make up topic name now in this case

00:47:44,660 --> 00:47:50,150
topic name is a direct derivative of

00:47:47,570 --> 00:47:53,120
master so the common ancestor between

00:47:50,150 --> 00:47:54,410
master and topic name is master so it

00:47:53,120 --> 00:47:55,760
knows that it says okay well obviously

00:47:54,410 --> 00:47:58,100
anything that's different in type of

00:47:55,760 --> 00:47:59,570
name ticket it's not there's not a way

00:47:58,100 --> 00:48:00,800
to have two different differences so it

00:47:59,570 --> 00:48:03,050
just takes out all just slides it right

00:48:00,800 --> 00:48:06,560
forward so at this point now that I've

00:48:03,050 --> 00:48:08,420
done this merge master is now again the

00:48:06,560 --> 00:48:10,640
same as topic name we've actually moved

00:48:08,420 --> 00:48:12,590
master up whatever commits were happen

00:48:10,640 --> 00:48:15,230
to make that topic out and then of

00:48:12,590 --> 00:48:17,870
course we say get delete the topic now

00:48:15,230 --> 00:48:19,940
this is a trivial case of just creating

00:48:17,870 --> 00:48:22,070
new items until it's ready to go and

00:48:19,940 --> 00:48:23,510
then sliding master forward to reflect

00:48:22,070 --> 00:48:25,520
and that and that's a often a

00:48:23,510 --> 00:48:26,510
process what's great about that is that

00:48:25,520 --> 00:48:28,160
it could have been two different

00:48:26,510 --> 00:48:29,630
development branch is happening off of

00:48:28,160 --> 00:48:30,830
there and the right thing will still

00:48:29,630 --> 00:48:33,410
happen we'll talk about that in a second

00:48:30,830 --> 00:48:35,030
here so in other words let's say that

00:48:33,410 --> 00:48:37,040
I'm really creative today and I want to

00:48:35,030 --> 00:48:38,650
try two different things okay so I'm

00:48:37,040 --> 00:48:42,370
going to check out top

00:48:38,650 --> 00:48:43,900
one okay so maybe this is like making

00:48:42,370 --> 00:48:45,520
color instead of black and white or

00:48:43,900 --> 00:48:46,900
something right so I bet that and work

00:48:45,520 --> 00:48:49,960
with work can we commit were quick to

00:48:46,900 --> 00:48:52,150
make a mitt ok so now topic 1 is moving

00:48:49,960 --> 00:48:54,850
off away from master by a number of

00:48:52,150 --> 00:48:56,620
commits every with me so far so topic

00:48:54,850 --> 00:48:58,450
one that has some commits on it right ok

00:48:56,620 --> 00:49:01,390
then i go i got this a brilliant idea

00:48:58,450 --> 00:49:03,880
good so they brought in yet so we create

00:49:01,390 --> 00:49:05,170
topic too but i don't know yet if I'm

00:49:03,880 --> 00:49:07,150
really going to finish with topic one

00:49:05,170 --> 00:49:08,320
yet or might not be working it but i'm

00:49:07,150 --> 00:49:10,600
going to work on this other thing now

00:49:08,320 --> 00:49:12,070
because i'm a TD right ok so I'm gonna

00:49:10,600 --> 00:49:14,200
go to the other side and start working

00:49:12,070 --> 00:49:15,970
on that now right we're good work commit

00:49:14,200 --> 00:49:18,850
commit work with work coming of it now

00:49:15,970 --> 00:49:20,860
we have just a split so we've got the

00:49:18,850 --> 00:49:22,930
original master I've got commits that

00:49:20,860 --> 00:49:24,640
went off in topic ones direction I've

00:49:22,930 --> 00:49:26,140
got commits that went off on topics to

00:49:24,640 --> 00:49:28,030
direction from master but do you see

00:49:26,140 --> 00:49:29,290
what's happening there I'm horrible at

00:49:28,030 --> 00:49:31,690
drawing things so I have to dissolve

00:49:29,290 --> 00:49:32,980
this in here ok but anyways pretending

00:49:31,690 --> 00:49:34,870
to those drawings like this actually

00:49:32,980 --> 00:49:37,030
there's this great book called Pro get

00:49:34,870 --> 00:49:40,450
by a scotch icon who's the same guy who

00:49:37,030 --> 00:49:43,090
did built github and it's available for

00:49:40,450 --> 00:49:44,260
free and has great diagrams so I wasn't

00:49:43,090 --> 00:49:45,610
going to steal I'm gonna put in my slide

00:49:44,260 --> 00:49:47,530
presentation but go look at the book

00:49:45,610 --> 00:49:51,300
it's got some really good drawings ok I

00:49:47,530 --> 00:49:55,300
just it's called Pro get pro get a

00:49:51,300 --> 00:49:56,800
scotch a con chac ln yeah but it's all

00:49:55,300 --> 00:49:59,740
in line just google for pro get you'll

00:49:56,800 --> 00:50:01,480
find it yeah you actually order it too

00:49:59,740 --> 00:50:03,970
but I don't have a hard copy I just look

00:50:01,480 --> 00:50:07,360
at it alone ok so now at this point we

00:50:03,970 --> 00:50:09,460
have master is here and we've got propag

00:50:07,360 --> 00:50:11,860
11 up this way topic 2 went off that way

00:50:09,460 --> 00:50:14,950
now at this point I'm happy with both of

00:50:11,860 --> 00:50:17,710
those right so I want to bring them work

00:50:14,950 --> 00:50:19,660
back together now it's possible that

00:50:17,710 --> 00:50:21,640
I've changed the same files in two

00:50:19,660 --> 00:50:24,010
different directions as I made these two

00:50:21,640 --> 00:50:26,230
different topics right so now we have to

00:50:24,010 --> 00:50:30,100
do some math well we don't do the math

00:50:26,230 --> 00:50:31,570
get does the math okay so maybe even

00:50:30,100 --> 00:50:32,860
what vaca did some more work on topic

00:50:31,570 --> 00:50:34,630
once now I've got some more work done

00:50:32,860 --> 00:50:36,910
that's what this is oh so you decide how

00:50:34,630 --> 00:50:38,320
to bring them together cuz actually get

00:50:36,910 --> 00:50:41,320
gives us the choice of two different

00:50:38,320 --> 00:50:44,620
ways of bringing this divergent history

00:50:41,320 --> 00:50:46,480
back together we could merge them and

00:50:44,620 --> 00:50:47,800
what it would look like if you graphed

00:50:46,480 --> 00:50:49,450
it is would be like these two things

00:50:47,800 --> 00:50:51,040
diverging and then being brought back

00:50:49,450 --> 00:50:52,839
like this so basically two different

00:50:51,040 --> 00:50:54,430
parallel paths of execution

00:50:52,839 --> 00:50:57,009
parallel development and then brought

00:50:54,430 --> 00:50:58,509
back into one but it also gives us the

00:50:57,009 --> 00:51:01,869
option which i think is really cool of

00:50:58,509 --> 00:51:03,759
rebasing that essentially playing one

00:51:01,869 --> 00:51:06,009
set of commits on top of another set of

00:51:03,759 --> 00:51:08,440
commits to make a linear history again

00:51:06,009 --> 00:51:11,259
so each one has its own pros and cons

00:51:08,440 --> 00:51:13,059
the merge is probably the easiest one to

00:51:11,259 --> 00:51:14,710
understand you basically look at files

00:51:13,059 --> 00:51:17,019
that are different and you bring them

00:51:14,710 --> 00:51:18,849
back together in this case let me do the

00:51:17,019 --> 00:51:21,430
merge first it's get check out masters

00:51:18,849 --> 00:51:24,880
now we rewind back to the spot where we

00:51:21,430 --> 00:51:27,729
first diverged we say merged topic 1 now

00:51:24,880 --> 00:51:29,410
this is a trivial merge we actually is

00:51:27,729 --> 00:51:32,349
named for this called fast-forward merge

00:51:29,410 --> 00:51:36,099
in other words since master is a direct

00:51:32,349 --> 00:51:37,839
ancestor of topic 1 the only changes are

00:51:36,099 --> 00:51:39,999
the changes that are brought in by topic

00:51:37,839 --> 00:51:41,619
1 so oh it does just move master

00:51:39,999 --> 00:51:43,450
immediately there it goes okay I'm done

00:51:41,619 --> 00:51:45,009
there's no there's no way that can

00:51:43,450 --> 00:51:47,289
conflict there's no way that can break

00:51:45,009 --> 00:51:49,869
anything I'm just basically moving

00:51:47,289 --> 00:51:52,140
master up to topic one at this point so

00:51:49,869 --> 00:51:54,640
now at this at the end of this command

00:51:52,140 --> 00:51:57,210
topic 1 and master are both pointing at

00:51:54,640 --> 00:52:01,210
the commits the topic one finished act

00:51:57,210 --> 00:52:02,769
with me so far okay right and again it

00:52:01,210 --> 00:52:05,499
will say fast-forward merge now at this

00:52:02,769 --> 00:52:08,019
point get will let me delete the branch

00:52:05,499 --> 00:52:10,599
called topic 1 but keep in mind that

00:52:08,019 --> 00:52:12,880
that branch name contained the shower

00:52:10,599 --> 00:52:15,369
one that represents topic 1 but that

00:52:12,880 --> 00:52:17,650
same shall run is now also contained in

00:52:15,369 --> 00:52:19,089
the branch called master so it says at

00:52:17,650 --> 00:52:20,319
school you can delete that brands

00:52:19,089 --> 00:52:22,180
because I've got all that work somewhere

00:52:20,319 --> 00:52:25,690
else it's all in the current master okay

00:52:22,180 --> 00:52:27,099
if you hadn't merged that in get would

00:52:25,690 --> 00:52:28,809
have complained that command you can

00:52:27,099 --> 00:52:30,369
force it to do it but usually it means

00:52:28,809 --> 00:52:31,839
you're doing something wrong so don't do

00:52:30,369 --> 00:52:33,039
that you're going to lose work if you

00:52:31,839 --> 00:52:35,739
delete a branch you haven't incorporated

00:52:33,039 --> 00:52:37,749
and get will track that for you okay so

00:52:35,739 --> 00:52:40,180
delete topic one else now all i have is

00:52:37,749 --> 00:52:42,969
master which is now where topic one used

00:52:40,180 --> 00:52:44,799
to be and i still have topic 2 and it's

00:52:42,969 --> 00:52:45,819
now divergent history now so we have

00:52:44,799 --> 00:52:48,460
different histories and different

00:52:45,819 --> 00:52:50,109
directions okay so now what happens is

00:52:48,460 --> 00:52:53,950
we say we're currently check that I

00:52:50,109 --> 00:52:55,749
master we say merge topic 2 now here's

00:52:53,950 --> 00:52:59,259
what the brilliance of get comes in it's

00:52:55,749 --> 00:53:01,719
going to look at master and topic 2 and

00:52:59,259 --> 00:53:04,269
say okay in order for me to compute

00:53:01,719 --> 00:53:05,590
properly the merge between the two I

00:53:04,269 --> 00:53:07,810
have to go back and

00:53:05,590 --> 00:53:09,340
find the common ancestor because again i

00:53:07,810 --> 00:53:11,800
gotta know compiles change different

00:53:09,340 --> 00:53:13,480
ways which of it was the original which

00:53:11,800 --> 00:53:16,300
of it was changes from this and which

00:53:13,480 --> 00:53:19,240
was changes from topic to so it figures

00:53:16,300 --> 00:53:21,970
out the original merge base is what's

00:53:19,240 --> 00:53:23,710
called and the common ancestor and it

00:53:21,970 --> 00:53:24,730
turns out was the old master but we

00:53:23,710 --> 00:53:27,850
don't know that we don't care at this

00:53:24,730 --> 00:53:29,920
point by doing this merge then conflicts

00:53:27,850 --> 00:53:31,960
that actually may arise for example i

00:53:29,920 --> 00:53:34,270
may have changed lines one through ten

00:53:31,960 --> 00:53:36,100
of a particular file one way in one file

00:53:34,270 --> 00:53:39,100
and a different way on the other file

00:53:36,100 --> 00:53:41,620
now get can't figure out which one's

00:53:39,100 --> 00:53:43,420
correct for the merge it requires human

00:53:41,620 --> 00:53:45,160
intervention at this point because it's

00:53:43,420 --> 00:53:47,260
got to figure out it you can't know it

00:53:45,160 --> 00:53:48,700
doesn't know i may have also renamed a

00:53:47,260 --> 00:53:50,650
file in two different ways it could be

00:53:48,700 --> 00:53:51,910
that i've named i move the file to one

00:53:50,650 --> 00:53:53,650
directory here at a different directory

00:53:51,910 --> 00:53:54,790
down here or it might have replaced a

00:53:53,650 --> 00:53:55,990
file with the directory in three

00:53:54,790 --> 00:53:58,210
different reasons there's all sorts of

00:53:55,990 --> 00:54:00,190
ways conflicts can happen but you need

00:53:58,210 --> 00:54:01,900
to resolve these in other words it's

00:54:00,190 --> 00:54:03,820
going to stop and say merge conflict

00:54:01,900 --> 00:54:07,360
here here's the files i can't figure out

00:54:03,820 --> 00:54:10,390
what to do with and for some of the

00:54:07,360 --> 00:54:12,190
files if it's something like a text edit

00:54:10,390 --> 00:54:14,140
conflict where different parts the files

00:54:12,190 --> 00:54:16,270
changer for ways what it'll do is it'll

00:54:14,140 --> 00:54:18,490
edit that file and put your traditional

00:54:16,270 --> 00:54:21,850
merge markers in there some less than

00:54:18,490 --> 00:54:23,980
the old name of one branch the content

00:54:21,850 --> 00:54:25,840
for that branch some greater than equal

00:54:23,980 --> 00:54:27,400
signs the name of second brands content

00:54:25,840 --> 00:54:28,300
for that in some greater that's so you

00:54:27,400 --> 00:54:30,670
might have seen this if you've used

00:54:28,300 --> 00:54:32,050
traditional things like svn CBS same

00:54:30,670 --> 00:54:34,270
sort of thing in fact it's actually

00:54:32,050 --> 00:54:36,130
using the same old code for all that now

00:54:34,270 --> 00:54:37,990
you need to fix those because if you

00:54:36,130 --> 00:54:40,540
commit that with that in there people

00:54:37,990 --> 00:54:42,700
will hate you okay so do not do that do

00:54:40,540 --> 00:54:44,350
not do that that's a I know this from

00:54:42,700 --> 00:54:47,170
personal experience so anyway do not do

00:54:44,350 --> 00:54:48,760
that okay you need to fix that okay one

00:54:47,170 --> 00:54:51,460
thing is probably not valid CC index at

00:54:48,760 --> 00:54:54,160
that point ok so you fix that and once

00:54:51,460 --> 00:54:55,630
you fix that though you simply resolve

00:54:54,160 --> 00:54:56,800
it all to the point where you now have

00:54:55,630 --> 00:54:57,940
you don't you run your test suite make

00:54:56,800 --> 00:54:59,440
sure thing still works with everything

00:54:57,940 --> 00:55:01,570
resolved with the two different ways and

00:54:59,440 --> 00:55:03,460
then you say even say get yes commit a

00:55:01,570 --> 00:55:05,170
geeky badesh a this is what i was saying

00:55:03,460 --> 00:55:07,120
before when you just get commit dash a

00:55:05,170 --> 00:55:08,560
it's like an ad it adds everything

00:55:07,120 --> 00:55:10,030
that's currently known but yet that's

00:55:08,560 --> 00:55:11,410
pretty much what you want and again

00:55:10,030 --> 00:55:12,940
you're given a chance this point to say

00:55:11,410 --> 00:55:16,030
well we were merging this branch in that

00:55:12,940 --> 00:55:18,010
branch and i had to I had to like figure

00:55:16,030 --> 00:55:19,230
out a way to do both features in this

00:55:18,010 --> 00:55:22,120
particular file right

00:55:19,230 --> 00:55:32,010
okay so that's probably ninety percent

00:55:22,120 --> 00:55:35,080
here of emergency up good yes so is

00:55:32,010 --> 00:55:38,290
topic can you still see that if you do

00:55:35,080 --> 00:55:41,020
that you still see oh I had Hobbit only

00:55:38,290 --> 00:55:42,880
looking at logs you don't it doesn't

00:55:41,020 --> 00:55:44,170
exist in your current view if you say

00:55:42,880 --> 00:55:47,470
get branch which shows you all your

00:55:44,170 --> 00:55:53,200
current branches it's gone now you see

00:55:47,470 --> 00:55:54,880
is the logs yeah it's still topic one so

00:55:53,200 --> 00:55:57,850
it'll still stick around when you do

00:55:54,880 --> 00:55:59,020
this merge master will be updated but

00:55:57,850 --> 00:56:01,120
topic one's still going to be hanging

00:55:59,020 --> 00:56:02,440
out there on the side yeah they'll show

00:56:01,120 --> 00:56:04,660
up in logs they'll show up in any kind

00:56:02,440 --> 00:56:05,980
of evaluation what's going on so you can

00:56:04,660 --> 00:56:07,450
leave it there for historical reasons

00:56:05,980 --> 00:56:09,220
there's nothing wrong with you know

00:56:07,450 --> 00:56:10,900
nothing requires your delete those I

00:56:09,220 --> 00:56:11,980
just think after a while my workflow be

00:56:10,900 --> 00:56:14,830
look kind of noisy if I got all these

00:56:11,980 --> 00:56:25,090
branches in other words me more question

00:56:14,830 --> 00:56:26,650
over again this message it says I've got

00:56:25,090 --> 00:56:28,300
a directory here in a file here I have

00:56:26,650 --> 00:56:29,860
no idea what to do with that or I've got

00:56:28,300 --> 00:56:31,540
a file rename here in a file reading I

00:56:29,860 --> 00:56:34,060
don't know what you with that if you've

00:56:31,540 --> 00:56:36,970
got two miles then change the same name

00:56:34,060 --> 00:56:43,090
for example visit does it alter the

00:56:36,970 --> 00:56:44,770
names ah I think it leaves both files in

00:56:43,090 --> 00:56:46,450
their original place early because

00:56:44,770 --> 00:56:47,440
you're merging in from master topic one

00:56:46,450 --> 00:56:49,690
so it's a different light up when I

00:56:47,440 --> 00:56:50,860
think it puts the file on topic 12 so

00:56:49,690 --> 00:56:52,240
you really just have to resolve that

00:56:50,860 --> 00:56:53,440
whatever whatever gets status as this

00:56:52,240 --> 00:57:04,210
point you got to fix it all before you

00:56:53,440 --> 00:57:06,760
commit yeah yeah if I didn't delete

00:57:04,210 --> 00:57:08,530
topic one here for example and I

00:57:06,760 --> 00:57:11,020
actually oh wait i also need to do this

00:57:08,530 --> 00:57:13,360
as well right so after I've merged and

00:57:11,020 --> 00:57:15,040
so now master is the sort of the sum of

00:57:13,360 --> 00:57:16,750
topic one in topic 2 plus the original

00:57:15,040 --> 00:57:19,000
bit faster if I made more things on top

00:57:16,750 --> 00:57:23,650
when I can merge that back in and the

00:57:19,000 --> 00:57:26,170
new the new the new merge base is in

00:57:23,650 --> 00:57:27,190
fact the old topic 1 so it's only the

00:57:26,170 --> 00:57:28,690
additional three or four cadets are

00:57:27,190 --> 00:57:31,180
making on there indie goes well that's

00:57:28,690 --> 00:57:32,280
my current ancestor now so very unlikely

00:57:31,180 --> 00:57:33,750
you'll get any

00:57:32,280 --> 00:57:35,880
conflicts from topic to now because now

00:57:33,750 --> 00:57:38,580
you're still already you're already at

00:57:35,880 --> 00:57:40,470
the merge of the old topic 1 the old

00:57:38,580 --> 00:57:42,570
topic 2 plus a few commits you be on

00:57:40,470 --> 00:57:44,490
topic one again yeah it's very flexible

00:57:42,570 --> 00:57:46,770
oh that's why it's always computing the

00:57:44,490 --> 00:57:47,970
most recent ancestor because you got

00:57:46,770 --> 00:57:58,530
your baseline that you're working from

00:57:47,970 --> 00:58:05,120
as you start doing your splits yeah no

00:57:58,530 --> 00:58:05,120
that's done the committee's done yeah

00:58:05,900 --> 00:58:12,210
you can't lie to it you have to when you

00:58:10,170 --> 00:58:15,300
do that command you're saying I'm done

00:58:12,210 --> 00:58:17,010
and so whatever way that is now too bad

00:58:15,300 --> 00:58:18,630
that's your commit for the end of that

00:58:17,010 --> 00:58:20,430
and if you didn't push that and it

00:58:18,630 --> 00:58:29,490
breaks things for the people you're

00:58:20,430 --> 00:58:32,100
going to be hated yes exactly that

00:58:29,490 --> 00:58:33,900
commit says I am done and the commit

00:58:32,100 --> 00:58:37,320
acts the merged command actually leaves

00:58:33,900 --> 00:58:38,760
behind a temp file under get it says we

00:58:37,320 --> 00:58:44,820
have a merge conflict so that needs to

00:58:38,760 --> 00:58:47,060
be resolved for before anything else no

00:58:44,820 --> 00:58:49,650
no when you do any commit clears that

00:58:47,060 --> 00:58:56,100
yeah so so do you say commit it says i'm

00:58:49,650 --> 00:58:59,390
done with the merge so yeah well if you

00:58:56,100 --> 00:59:01,350
say get if you say get status its lucky

00:58:59,390 --> 00:59:03,570
before you don't commit if you say get

00:59:01,350 --> 00:59:06,840
status it will tell you what it knows is

00:59:03,570 --> 00:59:08,400
broken and you can keep you can add you

00:59:06,840 --> 00:59:12,240
add things to the index and it slowly

00:59:08,400 --> 00:59:14,850
reduces that message but but the moment

00:59:12,240 --> 00:59:17,160
you commit it says I get presumes that

00:59:14,850 --> 00:59:18,270
you're good now so just get rid of

00:59:17,160 --> 00:59:20,540
everything else so you don't get stages

00:59:18,270 --> 00:59:22,980
won't tell your thing now at that point

00:59:20,540 --> 00:59:24,330
yeah yeah constantly it tells you

00:59:22,980 --> 00:59:26,190
everything you haven't fixed yet so you

00:59:24,330 --> 00:59:27,870
keep looking at it early until you get

00:59:26,190 --> 00:59:29,220
that all worked out and then you commit

00:59:27,870 --> 00:59:37,770
but commit wipes all the information up

00:59:29,220 --> 00:59:39,450
yes so you're saying yeah unless you

00:59:37,770 --> 00:59:41,820
like to be very confused the next

00:59:39,450 --> 00:59:43,710
morning yes but you know there's

00:59:41,820 --> 00:59:44,610
actually a school thought they should if

00:59:43,710 --> 00:59:45,690
you're doing like test-driven

00:59:44,610 --> 00:59:47,160
development

00:59:45,690 --> 00:59:50,310
at the last thing you should do on a day

00:59:47,160 --> 00:59:51,750
is add a test that's broken because then

00:59:50,310 --> 00:59:52,740
you'll know the next morning with first

00:59:51,750 --> 00:59:55,050
thing is you should be working the pics

00:59:52,740 --> 00:59:57,330
so I'll I've got strategy actually

00:59:55,050 --> 01:00:19,860
drives your drives work so but it's up

00:59:57,330 --> 01:00:21,810
to you you're currently in a sort of a

01:00:19,860 --> 01:00:23,310
dirty working directory situation

01:00:21,810 --> 01:00:24,870
there's ways to stash that with git

01:00:23,310 --> 01:00:27,240
stash and I don't remember if that saves

01:00:24,870 --> 01:00:28,830
the merge conflict information but

01:00:27,240 --> 01:00:30,300
really you shouldn't do this till you're

01:00:28,830 --> 01:00:31,980
ready to bring stuff together and if you

01:00:30,300 --> 01:00:35,250
realize it's broken something one things

01:00:31,980 --> 01:00:37,710
you can do is you can just never commit

01:00:35,250 --> 01:00:39,330
this and if you check out something else

01:00:37,710 --> 01:00:42,300
everything about this is forgotten

01:00:39,330 --> 01:00:44,640
because the merge didn't work so you

01:00:42,300 --> 01:00:48,210
don't have any update of master at this

01:00:44,640 --> 01:00:50,730
point master is still its old place okay

01:00:48,210 --> 01:00:54,570
so master hasn't changed yet until you

01:00:50,730 --> 01:00:55,950
do that commit so it resets everything

01:00:54,570 --> 01:00:57,390
yeah you're back so you can just do

01:00:55,950 --> 01:00:58,590
whatever you want of that right that

01:00:57,390 --> 01:01:01,110
that's the nice thing about get it's

01:00:58,590 --> 01:01:03,480
like there are time before you commit

01:01:01,110 --> 01:01:04,980
everything's just in flux unless you've

01:01:03,480 --> 01:01:07,380
actually committed something master

01:01:04,980 --> 01:01:09,900
hasn't look forward now merge will do

01:01:07,380 --> 01:01:12,900
the commit to move master forward if

01:01:09,900 --> 01:01:14,430
everything works but if it breaks it

01:01:12,900 --> 01:01:16,050
just says I'm leaving master where it is

01:01:14,430 --> 01:01:17,670
you can look at that if you need to you

01:01:16,050 --> 01:01:18,930
can check out this other brand but once

01:01:17,670 --> 01:01:22,550
you check something else out it will

01:01:18,930 --> 01:01:22,550
reset the entire working directory

01:01:22,910 --> 01:01:27,390
exactly so be one more commit on the

01:01:25,140 --> 01:01:29,580
master branch right all right all right

01:01:27,390 --> 01:01:31,080
so that's merging which is going to

01:01:29,580 --> 01:01:32,340
happen a lot so you're doing work

01:01:31,080 --> 01:01:34,230
somebody else doing work you're pulling

01:01:32,340 --> 01:01:36,570
those together that happens a lot now

01:01:34,230 --> 01:01:38,940
again it creates a commit tree that

01:01:36,570 --> 01:01:40,530
looks like commit commit commit to

01:01:38,940 --> 01:01:42,960
splitting off things and then eventually

01:01:40,530 --> 01:01:46,190
merge commit back over here okay now the

01:01:42,960 --> 01:01:50,040
other thing I like is it get rebasing

01:01:46,190 --> 01:01:51,840
weary base rewrites the commits in other

01:01:50,040 --> 01:01:53,940
words it's going to take the commits of

01:01:51,840 --> 01:01:57,390
topic to as we go through the rebates

01:01:53,940 --> 01:01:58,960
here and actually apply them as Delta's

01:01:57,390 --> 01:02:01,450
on top of

01:01:58,960 --> 01:02:03,190
like one so it's going to lift them and

01:02:01,450 --> 01:02:06,160
move them around so they actually being

01:02:03,190 --> 01:02:08,650
applied in sequence the problem with

01:02:06,160 --> 01:02:10,420
this is that it breaks the Shah once so

01:02:08,650 --> 01:02:13,830
there's a shot one that represents the

01:02:10,420 --> 01:02:16,180
first change between master and topic 2

01:02:13,830 --> 01:02:18,250
that's a sha-1 that says here's my

01:02:16,180 --> 01:02:20,830
deltas here's my parentage everything

01:02:18,250 --> 01:02:23,260
out now if you take that Delta of the

01:02:20,830 --> 01:02:25,840
changes to those files and you apply

01:02:23,260 --> 01:02:27,430
that up to the end of topic one that

01:02:25,840 --> 01:02:30,190
doesn't have the same parentage anymore

01:02:27,430 --> 01:02:32,020
it's the parish is the current topic one

01:02:30,190 --> 01:02:34,960
commits right so second I've same shall

01:02:32,020 --> 01:02:37,210
one so this is ok if you're doing it

01:02:34,960 --> 01:02:38,920
within your own repo but if you at some

01:02:37,210 --> 01:02:41,920
point have pushed as we'll talk about

01:02:38,920 --> 01:02:43,990
later that commits for topic 2 out to

01:02:41,920 --> 01:02:45,940
other people to share with them you'll

01:02:43,990 --> 01:02:47,350
effectively broken their history they

01:02:45,940 --> 01:02:49,030
won't be able to reconstruct this

01:02:47,350 --> 01:02:51,280
properly and may even end up when it

01:02:49,030 --> 01:02:53,530
emerges with double applications of some

01:02:51,280 --> 01:02:55,240
of the patches so this is not to be done

01:02:53,530 --> 01:02:56,740
if you've ever published anything so

01:02:55,240 --> 01:03:05,500
there's only in the privacy of your own

01:02:56,740 --> 01:03:06,730
cubicle right before you push it though

01:03:05,500 --> 01:03:08,890
you got to it before you push it if you

01:03:06,730 --> 01:03:10,660
if you ever push anything never too

01:03:08,890 --> 01:03:12,310
deary base with those ever again but you

01:03:10,660 --> 01:03:16,330
have to do merges to pull them in well

01:03:12,310 --> 01:03:18,880
because yeah yeahs merges will properly

01:03:16,330 --> 01:03:20,200
record all the sháá ones involved on the

01:03:18,880 --> 01:03:21,910
way down because again it's got

01:03:20,200 --> 01:03:23,800
parentage all the way down so now if i

01:03:21,910 --> 01:03:26,050
push this i already have all of all the

01:03:23,800 --> 01:03:28,270
commits that made that up so this is the

01:03:26,050 --> 01:03:30,550
difference so instead of that second

01:03:28,270 --> 01:03:34,270
step instead of saying check out topic

01:03:30,550 --> 01:03:37,570
to get merge master oh wait bring it

01:03:34,270 --> 01:03:39,550
backwards interesting oh that's because

01:03:37,570 --> 01:03:42,700
yeah rebasing i'm actually affecting

01:03:39,550 --> 01:03:45,040
topic 2 okay so i'm checking out topic

01:03:42,700 --> 01:03:47,350
to this time so this is after I've done

01:03:45,040 --> 01:03:50,110
the merge with topic 1 which was a fast

01:03:47,350 --> 01:03:52,570
forward merge so now i have topic 1 and

01:03:50,110 --> 01:03:54,520
deleted that masters now we're topic one

01:03:52,570 --> 01:03:55,870
was and I've got topic to going this

01:03:54,520 --> 01:03:58,930
other direction so that's where we were

01:03:55,870 --> 01:04:01,810
just before this command okay I check

01:03:58,930 --> 01:04:03,610
out topic 2 and the reason I'm checking

01:04:01,810 --> 01:04:06,520
out topic 2 is because I want to take

01:04:03,610 --> 01:04:08,470
that chunk of commits that represents

01:04:06,520 --> 01:04:09,960
the difference between topic to in the

01:04:08,470 --> 01:04:12,510
old master and I

01:04:09,960 --> 01:04:14,430
want to replay them on top of the end of

01:04:12,510 --> 01:04:16,800
topic one which is now the current

01:04:14,430 --> 01:04:20,280
master and I've you about checking out

01:04:16,800 --> 01:04:22,920
topic to get rebased master so now what

01:04:20,280 --> 01:04:24,780
get does when it sees this command is it

01:04:22,920 --> 01:04:27,630
says okay here's these commits on topic

01:04:24,780 --> 01:04:29,400
2 here's this master over here what's

01:04:27,630 --> 01:04:31,050
the common ancestor again so it computes

01:04:29,400 --> 01:04:33,660
that automatically for me because of the

01:04:31,050 --> 01:04:37,530
commences and it takes all those commits

01:04:33,660 --> 01:04:40,619
as essentially patches so it takes those

01:04:37,530 --> 01:04:43,170
patches and plays them on top of the end

01:04:40,619 --> 01:04:45,030
of topic 1 copying all the commit

01:04:43,170 --> 01:04:46,800
messages and the dates and times and

01:04:45,030 --> 01:04:49,740
everything directly on the end of topic

01:04:46,800 --> 01:04:51,810
1 what you end up with is a linear

01:04:49,740 --> 01:04:53,910
history now you have from the original

01:04:51,810 --> 01:04:58,109
master to the current master formerly

01:04:53,910 --> 01:05:01,830
topic 12 now the current topic 2 which

01:04:58,109 --> 01:05:04,170
is replayed patches from the old topic

01:05:01,830 --> 01:05:10,230
to hang out over here in the corner yeah

01:05:04,170 --> 01:05:12,300
are they done well we'll be at the end

01:05:10,230 --> 01:05:14,970
of the history all the end to all the

01:05:12,300 --> 01:05:16,740
beauty timestamps don't matter this

01:05:14,970 --> 01:05:19,109
point we're replaying all the topic to

01:05:16,740 --> 01:05:22,710
commits on the end of topic 1 in

01:05:19,109 --> 01:05:24,030
sequence as they are now with any time

01:05:22,710 --> 01:05:25,980
where you apply to different sets of

01:05:24,030 --> 01:05:28,290
patches to the same set of files we

01:05:25,980 --> 01:05:30,780
could have merged conflicts in other

01:05:28,290 --> 01:05:34,290
words i may have the first patch of

01:05:30,780 --> 01:05:36,960
topic to may affect the same files the

01:05:34,290 --> 01:05:38,910
topic one has already changed so when we

01:05:36,960 --> 01:05:41,220
play that on top of it it may conflict

01:05:38,910 --> 01:05:45,089
okay now what's interesting is that it

01:05:41,220 --> 01:05:48,119
does these applications one by one so

01:05:45,089 --> 01:05:50,520
the first thing might break now it tells

01:05:48,119 --> 01:05:54,030
you i'm in the middle of a rebase fix me

01:05:50,520 --> 01:05:56,760
okay and then once you fix that you just

01:05:54,030 --> 01:05:59,760
say me before you say git rebase dash

01:05:56,760 --> 01:06:00,990
dash continue that says okay not try the

01:05:59,760 --> 01:06:02,760
second one try the throne for the

01:06:00,990 --> 01:06:04,710
forward it knows all the patches but you

01:06:02,760 --> 01:06:07,290
have to tell it to go ahead and each one

01:06:04,710 --> 01:06:08,640
may conflict that be annoying but you

01:06:07,290 --> 01:06:10,589
may have to fix it everytime but

01:06:08,640 --> 01:06:12,030
generally i found rebase as long as not

01:06:10,589 --> 01:06:15,230
working on exactly the same area they

01:06:12,030 --> 01:06:15,230
just play on it's fine yeah

01:06:22,699 --> 01:06:27,329
yeah and to a different base because

01:06:25,469 --> 01:06:28,979
again these commits down in topic 2

01:06:27,329 --> 01:06:30,869
we're happening to this old master back

01:06:28,979 --> 01:06:32,400
here so you're basically playing these

01:06:30,869 --> 01:06:34,829
patches on top of the end right it

01:06:32,400 --> 01:06:37,410
basically is rewriting history yeah ok

01:06:34,829 --> 01:06:39,989
so again we can also say in the middle

01:06:37,410 --> 01:06:41,640
of this whoops I just start over I this

01:06:39,989 --> 01:06:43,410
was definitely not a good idea or I got

01:06:41,640 --> 01:06:45,299
to go home now whatever right right so

01:06:43,410 --> 01:06:46,739
get rebased after i support where you

01:06:45,299 --> 01:06:48,930
can also say well that patch actually

01:06:46,739 --> 01:06:49,890
wasn't that important to skip it so it

01:06:48,930 --> 01:06:52,859
actually will leave it out of the

01:06:49,890 --> 01:06:54,029
sequence so there's a lot of flexibility

01:06:52,859 --> 01:06:58,559
with this so it's really kind of cool

01:06:54,029 --> 01:07:00,420
yeah to make leaning your history rather

01:06:58,559 --> 01:07:02,430
than pearl history when you're using

01:07:00,420 --> 01:07:03,869
logs you're looking at logged in commits

01:07:02,430 --> 01:07:06,119
and stuff it's kind of nice to have it

01:07:03,869 --> 01:07:08,640
all in sequence rather than having this

01:07:06,119 --> 01:07:11,009
bushy history to kind of deal with for

01:07:08,640 --> 01:07:13,949
yourself at least I mean once you once

01:07:11,009 --> 01:07:15,660
you have public commits all applying the

01:07:13,949 --> 01:07:17,039
same thing you probably want those as

01:07:15,660 --> 01:07:19,109
separate histories to be able to get to

01:07:17,039 --> 01:07:20,519
the same spot but in terms of working on

01:07:19,109 --> 01:07:21,930
itself this is really nice it just makes

01:07:20,519 --> 01:07:23,849
everything linear again make sure makes

01:07:21,930 --> 01:07:25,049
it so I did this then I did this than i

01:07:23,849 --> 01:07:26,819
did this that's all easier than thinking

01:07:25,049 --> 01:07:28,079
of then I did this so let's see how much

01:07:26,819 --> 01:07:29,099
doing that I do this and also seemed I

01:07:28,079 --> 01:07:31,619
was doing that and they're files

01:07:29,099 --> 01:07:34,769
in different ways git log can select

01:07:31,619 --> 01:07:37,439
things like linear or can select based

01:07:34,769 --> 01:07:39,269
on time stamp so you can kind of get to

01:07:37,439 --> 01:07:40,380
it but it's a little harder to do it

01:07:39,269 --> 01:07:46,849
that way so that's why every basically

01:07:40,380 --> 01:07:46,849
it ya know you Charlie um put down here

01:07:53,119 --> 01:08:01,709
and the rest of us in the dark because

01:07:58,890 --> 01:08:03,269
he stays king in intermixed and we

01:08:01,709 --> 01:08:06,779
couldn't see the whole effect of this

01:08:03,269 --> 01:08:09,509
one branch yeah it was going back and

01:08:06,779 --> 01:08:12,269
looking at gate lock you see parts of

01:08:09,509 --> 01:08:17,699
each branch at various times and can't

01:08:12,269 --> 01:08:20,639
see the totally obscured what what

01:08:17,699 --> 01:08:22,170
happened in general if you're creating

01:08:20,639 --> 01:08:24,210
your own topic branches and working

01:08:22,170 --> 01:08:26,489
multiple things before you merge them in

01:08:24,210 --> 01:08:28,199
a master rebase them on to master that

01:08:26,489 --> 01:08:30,329
way it will actually be a it will be a

01:08:28,199 --> 01:08:33,060
fast-forward worse at this point now if

01:08:30,329 --> 01:08:36,690
I said get check out master

01:08:33,060 --> 01:08:38,280
get merge so actually this part you say

01:08:36,690 --> 01:08:39,870
git checkout master you get delete topic

01:08:38,280 --> 01:08:41,370
to that would be all over have to do

01:08:39,870 --> 01:08:43,530
their get branch dash D talking to you

01:08:41,370 --> 01:08:48,180
sorry so rebased and essentially implies

01:08:43,530 --> 01:08:52,050
emerged uh no mergers emerged a rebase

01:08:48,180 --> 01:08:54,780
is a rebase but the effect of topic 2 is

01:08:52,050 --> 01:09:00,600
now applied on the end of topic 1 okay

01:08:54,780 --> 01:09:03,420
yeah summarize by saying that merge your

01:09:00,600 --> 01:09:06,569
own changes the rebasing by the way

01:09:03,420 --> 01:09:09,300
around yuri base your own changes while

01:09:06,569 --> 01:09:11,250
it's still local and then you merge

01:09:09,300 --> 01:09:12,569
other people's public stuff in you can't

01:09:11,250 --> 01:09:15,330
really rebase on that it doesn't work

01:09:12,569 --> 01:09:16,500
very well but oh oh there is a case that

01:09:15,330 --> 01:09:17,910
where you want to reap if you almost

01:09:16,500 --> 01:09:21,030
have they be there is a case where you

01:09:17,910 --> 01:09:22,890
want to rebase from public changes for

01:09:21,030 --> 01:09:25,380
example i'm tracking somebody else's

01:09:22,890 --> 01:09:27,870
master so I'm doing my own development

01:09:25,380 --> 01:09:31,010
locally and I've got somebody else's

01:09:27,870 --> 01:09:33,120
mastered that I started from now I

01:09:31,010 --> 01:09:34,290
update using stuff we're going to get to

01:09:33,120 --> 01:09:37,109
in a few minutes hopefully before

01:09:34,290 --> 01:09:40,350
another time it's I'm pulling in their

01:09:37,109 --> 01:09:42,660
changes right my changes actually

01:09:40,350 --> 01:09:46,980
haven't been published yet I would

01:09:42,660 --> 01:09:49,470
rebase on top of master my topic branch

01:09:46,980 --> 01:09:52,260
so now now my my chains are played on

01:09:49,470 --> 01:09:53,640
top of the upstream master so if I ever

01:09:52,260 --> 01:09:55,380
push that it looks like a linear history

01:09:53,640 --> 01:09:56,880
for that rather than having this bushy

01:09:55,380 --> 01:09:59,070
tree where I go sideways and back up as

01:09:56,880 --> 01:10:01,290
long as I haven't published I can rebase

01:09:59,070 --> 01:10:11,580
moment I publix don't do that will upset

01:10:01,290 --> 01:10:14,310
everybody okay yeah one you had done

01:10:11,580 --> 01:10:19,520
murders if you do check out copy two

01:10:14,310 --> 01:10:23,790
then is that equivalent to then get a

01:10:19,520 --> 01:10:26,430
fast forward on top it one no won't be

01:10:23,790 --> 01:10:29,460
anymore oh wait let me think we think so

01:10:26,430 --> 01:10:32,250
I've got master got topic 1 I haven't

01:10:29,460 --> 01:10:34,290
moved master forward yet well if I do a

01:10:32,250 --> 01:10:36,860
yeah if I do a check out topic 2 and get

01:10:34,290 --> 01:10:42,600
rebates master security there because it

01:10:36,860 --> 01:10:44,070
would be a rebate high is high one you

01:10:42,600 --> 01:10:45,260
know it would be same things what this

01:10:44,070 --> 01:10:46,670
is doing now but

01:10:45,260 --> 01:10:48,020
so you're basically playing on topic

01:10:46,670 --> 01:10:49,730
topic one except master still going to

01:10:48,020 --> 01:10:52,580
be way back down yeah and then if you

01:10:49,730 --> 01:10:53,960
say get merged topic too while you're at

01:10:52,580 --> 01:11:08,560
masters could be fast forward because

01:10:53,960 --> 01:11:11,060
all one line yeah yeah yeah yes yeah

01:11:08,560 --> 01:11:12,650
well what merging back to master there

01:11:11,060 --> 01:11:14,180
will be as a fast forward because master

01:11:12,650 --> 01:11:16,850
was the common ancestor already yeah

01:11:14,180 --> 01:11:24,500
yeah that were too there's lots of ways

01:11:16,850 --> 01:11:26,870
to give the same commits but I yeah yeah

01:11:24,500 --> 01:11:28,670
but but the thing the thing i also want

01:11:26,870 --> 01:11:30,980
to get across here is that branches are

01:11:28,670 --> 01:11:32,120
ephemeral there's not i mean people

01:11:30,980 --> 01:11:33,800
always want to say what's the history of

01:11:32,120 --> 01:11:35,870
this branch like what does that mean you

01:11:33,800 --> 01:11:38,330
mean what are the commits that led up to

01:11:35,870 --> 01:11:40,250
this particular commit because i can

01:11:38,330 --> 01:11:42,890
tell you that would log but there's not

01:11:40,250 --> 01:11:45,050
an entity associated with each of those

01:11:42,890 --> 01:11:46,850
commits that has the branch name in it

01:11:45,050 --> 01:11:48,140
somewhere the commits are just commits

01:11:46,850 --> 01:11:49,640
and they just happen to have a

01:11:48,140 --> 01:11:50,900
convenient name called the branch to be

01:11:49,640 --> 01:11:52,310
able to pull them together and once you

01:11:50,900 --> 01:11:54,110
start thinking this way about get

01:11:52,310 --> 01:11:57,110
everything becomes simpler because you

01:11:54,110 --> 01:11:59,210
know in traditional change middle

01:11:57,110 --> 01:12:02,420
systems branches have real solid

01:11:59,210 --> 01:12:03,740
identity but in yet it's all ephemeral

01:12:02,420 --> 01:12:04,850
it's all just whatever happens to be

01:12:03,740 --> 01:12:06,320
there at the time the real move these

01:12:04,850 --> 01:12:07,520
things around so once you get that in

01:12:06,320 --> 01:12:09,050
your head about what these commits are

01:12:07,520 --> 01:12:12,290
doing everything else becomes simpler

01:12:09,050 --> 01:12:16,300
yeah do you have you ever been in a

01:12:12,290 --> 01:12:19,130
situation where you didn't share your

01:12:16,300 --> 01:12:22,070
branch with somebody else that you

01:12:19,130 --> 01:12:23,240
didn't want to do that because they know

01:12:22,070 --> 01:12:26,750
i just know that i can't rebase then

01:12:23,240 --> 01:12:28,220
yeah it's not bad to have mergers it

01:12:26,750 --> 01:12:29,900
just again it complicates the history a

01:12:28,220 --> 01:12:32,360
little bit so once i say that once i

01:12:29,900 --> 01:12:33,860
share it with somebody else rename it or

01:12:32,360 --> 01:12:36,020
something's I know I can't probably all

01:12:33,860 --> 01:12:37,550
merged my own master person and publish

01:12:36,020 --> 01:12:39,230
that then I know that I can't possibly

01:12:37,550 --> 01:12:43,270
mess with that at all or a rebase it

01:12:39,230 --> 01:12:45,710
first on my master share that no no yeah

01:12:43,270 --> 01:12:49,340
one other feature rebase is it allows

01:12:45,710 --> 01:12:50,750
you to rebase interactive and this is a

01:12:49,340 --> 01:12:53,390
really cool option like let's see on

01:12:50,750 --> 01:12:56,420
topic 2 I got all the way down there but

01:12:53,390 --> 01:12:57,710
I really like one of the commits was

01:12:56,420 --> 01:12:58,710
sort of just a fix-up command or

01:12:57,710 --> 01:13:00,750
whatever I really didn't

01:12:58,710 --> 01:13:02,520
think i really want to keep it i can say

01:13:00,750 --> 01:13:04,620
git rebase dash I with the same

01:13:02,520 --> 01:13:07,560
parameters that you get rebates and it

01:13:04,620 --> 01:13:11,010
will pop me into a text editor that will

01:13:07,560 --> 01:13:14,460
have the log subject line of each of the

01:13:11,010 --> 01:13:17,190
commits with the word pick and the

01:13:14,460 --> 01:13:18,450
commit ID and following it now the word

01:13:17,190 --> 01:13:21,690
pick their it means something very

01:13:18,450 --> 01:13:24,000
particular pick beans go ahead and when

01:13:21,690 --> 01:13:26,340
I finally commit to this replay all of

01:13:24,000 --> 01:13:28,469
these commits but that's a text editor

01:13:26,340 --> 01:13:30,900
so i can actually change the order of

01:13:28,469 --> 01:13:33,300
the lines and it will apply them in that

01:13:30,900 --> 01:13:35,280
order I can totally delete one of the

01:13:33,300 --> 01:13:37,260
lines and it will not apply that

01:13:35,280 --> 01:13:38,520
particular patch like maybe I only want

01:13:37,260 --> 01:13:42,300
some of the features over in this other

01:13:38,520 --> 01:13:44,280
branch I can also say merge and it will

01:13:42,300 --> 01:13:47,160
take that commits and merge it with the

01:13:44,280 --> 01:13:48,630
previous commit as it's replaying it so

01:13:47,160 --> 01:13:51,090
for example let's see I've got seven

01:13:48,630 --> 01:13:52,230
commits I really it's too messy it's

01:13:51,090 --> 01:13:53,190
like I was working around trying to get

01:13:52,230 --> 01:13:57,150
something finally I got the right

01:13:53,190 --> 01:13:59,820
solution I could say pick then merge

01:13:57,150 --> 01:14:02,730
merge merge merge and it will collapse

01:13:59,820 --> 01:14:05,700
all of those particular commits into one

01:14:02,730 --> 01:14:07,350
commit in the final branch so very very

01:14:05,700 --> 01:14:09,570
nice get rebates desh I it's very very

01:14:07,350 --> 01:14:14,060
cool okay not enough on that because

01:14:09,570 --> 01:14:14,060
they don't keep living here okay so yeah

01:14:16,969 --> 01:14:21,320
like in the last four years maybe yeah

01:14:30,380 --> 01:14:34,290
interesting I haven't had that problem

01:14:32,520 --> 01:14:40,670
happened yet but maybe I'm not doing the

01:14:34,290 --> 01:14:44,550
same thing you're doing oh I don't know

01:14:40,670 --> 01:14:55,370
yeah okay when i upgraded to a later

01:14:44,550 --> 01:14:58,170
version it yet yeah okay okay okay okay

01:14:55,370 --> 01:15:00,600
okay well I believe you but I never had

01:14:58,170 --> 01:15:02,700
to happen to me yes okay um anyway so

01:15:00,600 --> 01:15:04,350
when you rebased again as I said the

01:15:02,700 --> 01:15:05,910
miracles fast forward and then we would

01:15:04,350 --> 01:15:07,350
check out master and get merged topic to

01:15:05,910 --> 01:15:08,340
you and I try to delete topic 2 i'm sort

01:15:07,350 --> 01:15:10,410
of what I said at the top will slide

01:15:08,340 --> 01:15:12,630
there

01:15:10,410 --> 01:15:15,300
mmm there goes my throat and heels be

01:15:12,630 --> 01:15:21,810
eventually here okay so git log is going

01:15:15,300 --> 01:15:23,340
to show me the changes mmm okay git log

01:15:21,810 --> 01:15:24,960
is just going to be the summary lines

01:15:23,340 --> 01:15:28,890
this is going to be the one topic line

01:15:24,960 --> 01:15:31,200
the date and time and a parentage as we

01:15:28,890 --> 01:15:32,940
go down get logged XP is kind of cool

01:15:31,200 --> 01:15:34,410
because actually prints the patches in

01:15:32,940 --> 01:15:36,000
other words the Delta between the old

01:15:34,410 --> 01:15:38,430
and new versions because I can't

01:15:36,000 --> 01:15:40,740
voluminous if it's a large change in

01:15:38,430 --> 01:15:42,630
whatever so like that there's a lot of

01:15:40,740 --> 01:15:44,070
options to get log get log has like 70

01:15:42,630 --> 01:15:45,720
different options but I'm not going to

01:15:44,070 --> 01:15:47,460
go through all of them but one of my

01:15:45,720 --> 01:15:49,980
other favorite ones is dash dash stat

01:15:47,460 --> 01:15:52,020
and that summarizes the changes with a

01:15:49,980 --> 01:15:55,470
diff stat in other words it's going to

01:15:52,020 --> 01:15:57,840
show this file had 20 lines added three

01:15:55,470 --> 01:15:59,610
lines removed this file was brand-new

01:15:57,840 --> 01:16:01,140
this file is completely deleted so it

01:15:59,610 --> 01:16:02,040
sort of shows the summary between the

01:16:01,140 --> 01:16:03,930
two of them that's what kind of

01:16:02,040 --> 01:16:07,650
community for reading stuff you can also

01:16:03,930 --> 01:16:11,100
narrow the log down to just the patches

01:16:07,650 --> 01:16:12,840
that affect particular files so for

01:16:11,100 --> 01:16:15,210
example if you're looking at the pearl

01:16:12,840 --> 01:16:17,220
yet archive but you only want to know

01:16:15,210 --> 01:16:20,640
where doc changes are made you would say

01:16:17,220 --> 01:16:22,590
git log dash dash pod because it's all

01:16:20,640 --> 01:16:23,730
inside the pod directory so it would

01:16:22,590 --> 01:16:25,020
only show you the change to make

01:16:23,730 --> 01:16:26,490
documentation changes now I do that from

01:16:25,020 --> 01:16:27,960
time time I pull down the current pearl

01:16:26,490 --> 01:16:29,280
archive which is can get by the way

01:16:27,960 --> 01:16:32,580
which is why it makes it relevant here

01:16:29,280 --> 01:16:34,110
and then I say get log dash pod just see

01:16:32,580 --> 01:16:35,220
what they changed in the documentation

01:16:34,110 --> 01:16:38,310
which really only part i care about

01:16:35,220 --> 01:16:40,110
about the the current pearl repo okay so

01:16:38,310 --> 01:16:43,140
chose it seems only for the listed files

01:16:40,110 --> 01:16:45,030
or sub directories okay so get DF is

01:16:43,140 --> 01:16:47,400
pretty handy get dipped by itself with

01:16:45,030 --> 01:16:50,310
no switches shows the difference between

01:16:47,400 --> 01:16:52,590
the index remember the index is what's

01:16:50,310 --> 01:16:54,690
next to be committed and the working

01:16:52,590 --> 01:16:56,490
tree so this is the stuff that you've

01:16:54,690 --> 01:16:58,230
changed but you haven't told get about

01:16:56,490 --> 01:16:59,670
yet you say haven't told them these

01:16:58,230 --> 01:17:01,470
things are different there so these the

01:16:59,670 --> 01:17:03,150
things you should advocate add git

01:17:01,470 --> 01:17:07,260
commit dash a would also make this list

01:17:03,150 --> 01:17:09,090
empty okay get diff and head or any

01:17:07,260 --> 01:17:11,070
commit there by the way will show the

01:17:09,090 --> 01:17:13,380
difference between head the previous

01:17:11,070 --> 01:17:15,450
commit and the current working tree I

01:17:13,380 --> 01:17:17,130
type this one it locks it's sort of like

01:17:15,450 --> 01:17:19,040
this is the work proc this is the next

01:17:17,130 --> 01:17:21,660
thing I'm really going to be committing

01:17:19,040 --> 01:17:24,090
barring any issues with index so this is

01:17:21,660 --> 01:17:26,849
kind of a nice one again get commit dash

01:17:24,090 --> 01:17:29,130
make this empty the third one which they

01:17:26,849 --> 01:17:31,199
rarely use but it's theirs get diff dash

01:17:29,130 --> 01:17:33,239
dash cached and that's the difference

01:17:31,199 --> 01:17:36,090
between head and index especially

01:17:33,239 --> 01:17:38,639
everything I added with get ad and again

01:17:36,090 --> 01:17:39,690
get commits going to make that mg you're

01:17:38,639 --> 01:17:41,639
going to get this with other things

01:17:39,690 --> 01:17:43,380
though you can say get diff other branch

01:17:41,639 --> 01:17:45,420
so that's going to show the difference

01:17:43,380 --> 01:17:48,119
between the other branch like topic 1

01:17:45,420 --> 01:17:48,929
and the working tree or you can say

01:17:48,119 --> 01:17:51,030
what's difference between the two

01:17:48,929 --> 01:17:52,500
branches so is your the diff between the

01:17:51,030 --> 01:17:54,599
two of those by the way these dips are

01:17:52,500 --> 01:17:56,280
typically the unit fco so has pluses

01:17:54,599 --> 01:17:59,909
minuses to show you the lines are added

01:17:56,280 --> 01:18:01,460
deleted between to the files okay you

01:17:59,909 --> 01:18:04,139
can also say this is sort of interesting

01:18:01,460 --> 01:18:06,750
the three dots there sorry if it comes

01:18:04,139 --> 01:18:11,219
on the screen three dots on that's the

01:18:06,750 --> 01:18:13,860
differences between branch too and it's

01:18:11,219 --> 01:18:15,659
common ancestor with branch one so let's

01:18:13,860 --> 01:18:17,940
go back the topic one topic to example

01:18:15,659 --> 01:18:20,550
if I want that if I call this and I say

01:18:17,940 --> 01:18:23,489
topic one topic 2 it's going to be the

01:18:20,550 --> 01:18:24,840
differences only from topic to back to

01:18:23,489 --> 01:18:26,310
that common ancestor only this stuff

01:18:24,840 --> 01:18:28,320
down here it's not going to clean

01:18:26,310 --> 01:18:29,909
anything about topic one it's just using

01:18:28,320 --> 01:18:32,250
topic one to figure out where the common

01:18:29,909 --> 01:18:34,530
ancestor was so that's kind of nice

01:18:32,250 --> 01:18:37,110
basically what just topic to could

01:18:34,530 --> 01:18:40,889
contribute to the changes since the last

01:18:37,110 --> 01:18:42,750
time i forked that way three dots three

01:18:40,889 --> 01:18:44,460
dots deliberately out to Datsun actually

01:18:42,750 --> 01:18:45,690
be the same as the previous one so had

01:18:44,460 --> 01:18:48,030
to have a special notation for this

01:18:45,690 --> 01:18:50,070
which is the common ancestor between

01:18:48,030 --> 01:18:52,619
branch one and branch to and then

01:18:50,070 --> 01:18:54,690
relative to branch jewel yeah there's

01:18:52,619 --> 01:18:56,400
also gift gift our staff so it shows the

01:18:54,690 --> 01:18:58,590
pluses and minuses like I did before I

01:18:56,400 --> 01:18:59,969
summary the changes it also get der

01:18:58,590 --> 01:19:01,770
stadt which summarizes the directory

01:18:59,969 --> 01:19:03,510
changes which is kind of cool so I use

01:19:01,770 --> 01:19:06,060
this sometimes what I want to see okay

01:19:03,510 --> 01:19:07,530
here's a commit on the pearl tree what

01:19:06,060 --> 01:19:08,790
really got changed in this commit or

01:19:07,530 --> 01:19:10,500
what cut change these series of commands

01:19:08,790 --> 01:19:12,570
that sort of says well pod had a few

01:19:10,500 --> 01:19:14,219
things changed and lie but a few things

01:19:12,570 --> 01:19:15,570
changed and so on so you can see kind of

01:19:14,219 --> 01:19:18,810
the relative directories you how much

01:19:15,570 --> 01:19:20,190
that change there so the word tree

01:19:18,810 --> 01:19:22,889
appears a lot of the documentation and

01:19:20,190 --> 01:19:25,139
what it means is referring to some sort

01:19:22,889 --> 01:19:28,230
of file set determined by these

01:19:25,139 --> 01:19:30,719
arguments so the easiest way to talk

01:19:28,230 --> 01:19:32,790
about a tree item is it's a sha-1 so if

01:19:30,719 --> 01:19:34,980
you have an absolute sha-1 and you want

01:19:32,790 --> 01:19:35,360
to say I want to check this out or I

01:19:34,980 --> 01:19:36,980
want

01:19:35,360 --> 01:19:38,510
to take the diff between this and the

01:19:36,980 --> 01:19:40,580
current directory you just give it to it

01:19:38,510 --> 01:19:43,250
what's nice is you can abbreviate those

01:19:40,580 --> 01:19:44,869
most of the commands actually show only

01:19:43,250 --> 01:19:46,639
the first six or seven characters of the

01:19:44,869 --> 01:19:48,590
sha-1 and that's because that's

01:19:46,639 --> 01:19:50,960
generally enough characters to be unique

01:19:48,590 --> 01:19:52,610
within your git repo in fact if you only

01:19:50,960 --> 01:19:54,590
have like one thing one she'll wonder

01:19:52,610 --> 01:19:57,020
your entire repo that starts with a you

01:19:54,590 --> 01:19:58,550
just say the letter A it'll just work ok

01:19:57,020 --> 01:19:59,750
that's not likely after the first few

01:19:58,550 --> 01:20:01,369
commands probably have more than one a

01:19:59,750 --> 01:20:04,100
you know something in the hex kirkin

01:20:01,369 --> 01:20:07,580
starts today you only need about six or

01:20:04,100 --> 01:20:10,820
seven though and in the entire in the

01:20:07,580 --> 01:20:13,400
entire a Linux repo the current repo the

01:20:10,820 --> 01:20:15,889
2.63 but I'll ternal in it I think you

01:20:13,400 --> 01:20:17,840
only need the it only needs five

01:20:15,889 --> 01:20:19,190
characters to be completely unique so

01:20:17,840 --> 01:20:20,600
you know a lot of commits you know

01:20:19,190 --> 01:20:21,949
that's a the first five hex characters

01:20:20,600 --> 01:20:23,600
right it will actually tell you though

01:20:21,949 --> 01:20:25,100
if you said if you spell out four of

01:20:23,600 --> 01:20:27,619
them and they're not unique it'll say

01:20:25,100 --> 01:20:28,880
that's not unique command aborted so you

01:20:27,619 --> 01:20:30,350
have to like to spell more out than that

01:20:28,880 --> 01:20:32,540
but typically five or six is probably

01:20:30,350 --> 01:20:35,119
interest is planning you can also use

01:20:32,540 --> 01:20:37,130
some reserved names like the head that

01:20:35,119 --> 01:20:39,790
always means the current check out some

01:20:37,130 --> 01:20:42,739
branch name a tag name some origin name

01:20:39,790 --> 01:20:44,869
let me talk about that for a second so

01:20:42,739 --> 01:20:48,830
again when I clone a repo for somewhere

01:20:44,869 --> 01:20:53,480
else I get a remote called origin so i

01:20:48,830 --> 01:20:55,489
can say get give origin / master master

01:20:53,480 --> 01:20:57,980
and that's going to show me all the

01:20:55,489 --> 01:20:59,330
differences from the remote master to my

01:20:57,980 --> 01:21:01,250
current master so I can see what work

01:20:59,330 --> 01:21:03,920
I've done locally or you go the other

01:21:01,250 --> 01:21:05,719
way to as also you can follow any of

01:21:03,920 --> 01:21:06,920
those with @ sign and some historical

01:21:05,719 --> 01:21:08,449
thing where historical could be

01:21:06,920 --> 01:21:12,619
something like literally the word

01:21:08,449 --> 01:21:14,570
yesterday or a date or a version number

01:21:12,619 --> 01:21:17,030
like 1 2 3 4 so that shows you the

01:21:14,570 --> 01:21:19,159
previous versions of that rep so for

01:21:17,030 --> 01:21:21,560
example I could say show me the diff of

01:21:19,159 --> 01:21:24,710
where the head used to be head at curly

01:21:21,560 --> 01:21:25,820
one dot head and then I'll show me where

01:21:24,710 --> 01:21:27,350
the head used to be versus where the

01:21:25,820 --> 01:21:29,570
heads now and give me the difference

01:21:27,350 --> 01:21:31,520
between the two so special in those

01:21:29,570 --> 01:21:34,730
called upstream so if I'm cloning from a

01:21:31,520 --> 01:21:38,030
repo and now I brought down origin /

01:21:34,730 --> 01:21:41,600
master as my master then I could say git

01:21:38,030 --> 01:21:43,159
diff or a master at upstream which will

01:21:41,600 --> 01:21:46,460
turn into origin / master because it

01:21:43,159 --> 01:21:47,659
knows those to retire gather okay now

01:21:46,460 --> 01:21:49,190
any of the things i just have the

01:21:47,659 --> 01:21:51,199
previous slide you can also

01:21:49,190 --> 01:21:53,000
update with parents you can also say

01:21:51,199 --> 01:21:55,460
give me the parents of those so for

01:21:53,000 --> 01:21:57,880
example i can say upper 01 and that's

01:21:55,460 --> 01:21:59,810
the first parent of an item and that

01:21:57,880 --> 01:22:02,270
defaults to 1 by the way it's just up

01:21:59,810 --> 01:22:05,360
rose the same as up arrow 1 i'd use this

01:22:02,270 --> 01:22:08,060
for example to say head up arrow which

01:22:05,360 --> 01:22:09,710
will be the heads parent so it was the

01:22:08,060 --> 01:22:14,390
previous commit before the current

01:22:09,710 --> 01:22:16,370
commit and typically though a commit

01:22:14,390 --> 01:22:18,170
only has one parent the only thing we'd

01:22:16,370 --> 01:22:19,640
have more than one parent is if it was a

01:22:18,170 --> 01:22:22,520
merge commit so you'd use opprotunity

01:22:19,640 --> 01:22:24,500
get to the second one of those more

01:22:22,520 --> 01:22:28,219
often what I use instead is tilde so

01:22:24,500 --> 01:22:30,800
tilde one is the first parent till the

01:22:28,219 --> 01:22:32,930
two is the first current of the first

01:22:30,800 --> 01:22:34,489
parent till the three is the first

01:22:32,930 --> 01:22:36,530
parent of the first parent of the first

01:22:34,489 --> 01:22:39,350
parent their words three commits ago on

01:22:36,530 --> 01:22:41,150
a typical linear chain this it gives why

01:22:39,350 --> 01:22:43,489
it's handy to have instead of merge

01:22:41,150 --> 01:22:45,110
matching so they actually rebasing

01:22:43,489 --> 01:22:46,910
because any all you have is ever its

01:22:45,110 --> 01:22:48,110
first parents so you can use things like

01:22:46,910 --> 01:22:49,040
tilde three children forward till the

01:22:48,110 --> 01:22:53,030
five to get back to the previous

01:22:49,040 --> 01:22:55,040
comments so we'll see some more examples

01:22:53,030 --> 01:23:01,640
this is getting forward a few slides or

01:22:55,040 --> 01:23:04,699
okay uh / 03 would be the third parent

01:23:01,640 --> 01:23:06,110
of the current commit but most commits

01:23:04,699 --> 01:23:09,020
only have one parent so that's not going

01:23:06,110 --> 01:23:10,489
to happen children 3 is the first parent

01:23:09,020 --> 01:23:13,730
of the first parent of the first parent

01:23:10,489 --> 01:23:15,650
essentially the linear history I've

01:23:13,730 --> 01:23:17,660
never used children in practical terms

01:23:15,650 --> 01:23:19,160
let me just say that well we don't you

01:23:17,660 --> 01:23:20,989
ever used up her own right fielder but

01:23:19,160 --> 01:23:23,630
we used tilde all the time though you

01:23:20,989 --> 01:23:25,250
know I take the last five commits on the

01:23:23,630 --> 01:23:28,340
current master branch and I want to see

01:23:25,250 --> 01:23:30,860
what they did yet diff head till the

01:23:28,340 --> 01:23:34,460
five dot dot head okay that sort of

01:23:30,860 --> 01:23:36,320
thing right and on some operations you

01:23:34,460 --> 01:23:37,969
can actually pick files out of these

01:23:36,320 --> 01:23:39,680
commits nothing of what we've seen so

01:23:37,969 --> 01:23:41,660
far but you can have to say colon and a

01:23:39,680 --> 01:23:43,280
path and actually picks out the blob for

01:23:41,660 --> 01:23:45,890
something this event called show get

01:23:43,280 --> 01:23:47,239
show we can say get show head colon in

01:23:45,890 --> 01:23:49,010
the path to a file name and it outputs

01:23:47,239 --> 01:23:50,660
on standard out the actual contents of

01:23:49,010 --> 01:23:52,940
that file occasionally handy for doing

01:23:50,660 --> 01:23:56,840
things so here oh here's some examples

01:23:52,940 --> 01:23:58,010
get diff head first parent ahead that's

01:23:56,840 --> 01:23:59,480
going to be the most recent change the

01:23:58,010 --> 01:24:00,800
current branch I could have instead

01:23:59,480 --> 01:24:03,120
written that I'm more typically write

01:24:00,800 --> 01:24:05,400
that as head children okay

01:24:03,120 --> 01:24:07,860
get dip-head three that's the last three

01:24:05,400 --> 01:24:11,010
changes right what damage do they do and

01:24:07,860 --> 01:24:12,960
so on all right now there's a there's a

01:24:11,010 --> 01:24:15,180
few cool commands that come with the

01:24:12,960 --> 01:24:18,420
current get distribution one of us uh is

01:24:15,180 --> 01:24:20,220
a TK based display so you can see kind

01:24:18,420 --> 01:24:21,840
of a graphic display of pallets going up

01:24:20,220 --> 01:24:23,490
and stuff I'm not gonna bring that up

01:24:21,840 --> 01:24:25,740
right now because it'd be hard to put on

01:24:23,490 --> 01:24:27,600
the screen like this it's going to be

01:24:25,740 --> 01:24:29,400
sort of a history of everything from my

01:24:27,600 --> 01:24:33,030
topic and origin back to their common

01:24:29,400 --> 01:24:35,220
ancestor okay are you going to say get k

01:24:33,030 --> 01:24:36,720
get DK it on how pronounce and skip you

01:24:35,220 --> 01:24:40,770
don't have to say it we just type it get

01:24:36,720 --> 01:24:42,210
k all and that shows all of the branches

01:24:40,770 --> 01:24:44,160
that you currently have active all the

01:24:42,210 --> 01:24:46,230
way back to the common ancestor so it

01:24:44,160 --> 01:24:50,310
shows everything you all say just show

01:24:46,230 --> 01:24:52,740
me this range of commits so on oh

01:24:50,310 --> 01:24:55,170
there's also show branch which you can x

01:24:52,740 --> 01:24:57,540
type in a command line which doesn't

01:24:55,170 --> 01:25:00,090
invoke a TK widget just simply does a

01:24:57,540 --> 01:25:03,930
sort of a command line view of all those

01:25:00,090 --> 01:25:05,850
commits as well ok so again we talked to

01:25:03,930 --> 01:25:08,010
chuck a couple times about git clone so

01:25:05,850 --> 01:25:10,500
what get clone is doing is this going to

01:25:08,010 --> 01:25:12,360
copy somebody else's repo using a remote

01:25:10,500 --> 01:25:13,980
spec which I just realize don't have a

01:25:12,360 --> 01:25:16,380
slide for but remote spec would be

01:25:13,980 --> 01:25:17,400
things like either a directory named

01:25:16,380 --> 01:25:18,750
like you're copying in two different

01:25:17,400 --> 01:25:21,750
places the current on the current file

01:25:18,750 --> 01:25:24,660
tree or maybe it's a HTTP spec or a get

01:25:21,750 --> 01:25:25,890
colon spec or get ssh Cowen's back all

01:25:24,660 --> 01:25:28,980
these things you've probably seen before

01:25:25,890 --> 01:25:31,500
perhaps you could get before so when I

01:25:28,980 --> 01:25:34,920
clone though I'm bringing down all of

01:25:31,500 --> 01:25:37,530
their local branches to be my remote

01:25:34,920 --> 01:25:40,620
branches and again when you clone it's

01:25:37,530 --> 01:25:42,510
called origin so origin / master would

01:25:40,620 --> 01:25:46,350
be their master branch brought down as

01:25:42,510 --> 01:25:48,120
my local origin / master branch or if

01:25:46,350 --> 01:25:50,280
they have a topic one branch when I

01:25:48,120 --> 01:25:53,520
clone then is going to be an origin /

01:25:50,280 --> 01:25:55,380
topic one branch on my area as well you

01:25:53,520 --> 01:25:56,880
don't want to do development on top of

01:25:55,380 --> 01:25:59,010
that what you want to do is check out a

01:25:56,880 --> 01:26:02,160
local branch that's builds on top of

01:25:59,010 --> 01:26:04,560
remote branch so for example I might say

01:26:02,160 --> 01:26:06,780
git fetch origin which now says once

01:26:04,560 --> 01:26:09,570
I've already cloned get fetch origin

01:26:06,780 --> 01:26:11,970
says go out to the current thing that

01:26:09,570 --> 01:26:14,130
I've known i know is origin and pull

01:26:11,970 --> 01:26:16,590
down all the current branches that are

01:26:14,130 --> 01:26:17,190
there so that's going to load me up with

01:26:16,590 --> 01:26:19,170
that

01:26:17,190 --> 01:26:21,540
that hasn't changed by working directory

01:26:19,170 --> 01:26:22,980
that hasn't changed my local branches at

01:26:21,540 --> 01:26:25,080
all so if I have something called master

01:26:22,980 --> 01:26:26,730
and there's an origin / master they're

01:26:25,080 --> 01:26:29,040
probably different now they're probably

01:26:26,730 --> 01:26:30,390
different space so and that's probably

01:26:29,040 --> 01:26:32,400
the next step to do so I've done some

01:26:30,390 --> 01:26:33,480
local work the other guys probably have

01:26:32,400 --> 01:26:35,219
some bloke will work now it's time to

01:26:33,480 --> 01:26:37,160
kind of resync again that's what we're

01:26:35,219 --> 01:26:39,120
about to try so what you do is you take

01:26:37,160 --> 01:26:41,070
typically you'll want to rebase your

01:26:39,120 --> 01:26:43,500
changes on top of the upstream so I have

01:26:41,070 --> 01:26:45,060
current master checked out I say get

01:26:43,500 --> 01:26:47,210
fetch origin that's going to pull a step

01:26:45,060 --> 01:26:50,310
from remote and then I say git rebase

01:26:47,210 --> 01:26:52,350
origin / master so let's see how this is

01:26:50,310 --> 01:26:55,260
looking at graphically here so I've got

01:26:52,350 --> 01:26:57,870
a master that was originally the same as

01:26:55,260 --> 01:26:59,760
origin master because I clone the robot

01:26:57,870 --> 01:27:01,250
Reba now I'm going to do some more work

01:26:59,760 --> 01:27:03,300
okay so I'm off in this direction

01:27:01,250 --> 01:27:05,070
they're probably gonna do some work so

01:27:03,300 --> 01:27:07,560
that's off a different direction so now

01:27:05,070 --> 01:27:09,900
we have master here we have origin /

01:27:07,560 --> 01:27:12,719
master down here the fetes pulled that

01:27:09,900 --> 01:27:14,699
in and move that this path to hear okay

01:27:12,719 --> 01:27:16,830
so what this rebase is drawings saying

01:27:14,699 --> 01:27:19,860
okay find the common ancestor which was

01:27:16,830 --> 01:27:21,930
the old master back here and take the

01:27:19,860 --> 01:27:24,870
changes that are currently checked out

01:27:21,930 --> 01:27:27,870
with this case master and replay them on

01:27:24,870 --> 01:27:30,060
top of origin master so now we've got

01:27:27,870 --> 01:27:31,980
linear history again but I'm now

01:27:30,060 --> 01:27:37,290
currently on top of the work that's

01:27:31,980 --> 01:27:39,150
happening upstream yeah now you just

01:27:37,290 --> 01:27:44,730
it's just it's the one get work to her

01:27:39,150 --> 01:27:47,940
yeah that does that make sense okay all

01:27:44,730 --> 01:27:49,680
right all right so I now have the new

01:27:47,940 --> 01:27:51,870
master is now I moved up and I'm

01:27:49,680 --> 01:27:54,420
upstream I'm lined up on strip of course

01:27:51,870 --> 01:27:56,640
somebody may have you know change things

01:27:54,420 --> 01:27:58,380
and ways to conflict with me so like any

01:27:56,640 --> 01:28:00,300
rebase it's going to stop where it

01:27:58,380 --> 01:28:01,890
breaks I have to fix it and move it

01:28:00,300 --> 01:28:05,580
forward get rebates continue until them

01:28:01,890 --> 01:28:08,940
all the way done now if I pushed master

01:28:05,580 --> 01:28:10,500
upstream though somehow I don't want to

01:28:08,940 --> 01:28:12,210
do this I want its merge in master

01:28:10,500 --> 01:28:14,340
instead so I'll say get merge origin

01:28:12,210 --> 01:28:16,100
master so I'm a kind of a bushy tree but

01:28:14,340 --> 01:28:18,270
at least now I can play well with others

01:28:16,100 --> 01:28:21,690
you'll notice to fix three base in one

01:28:18,270 --> 01:28:24,900
step you can say get pull pull in get is

01:28:21,690 --> 01:28:26,730
either a merge or a rebase depending on

01:28:24,900 --> 01:28:30,210
the absence or presence of the rebase

01:28:26,730 --> 01:28:30,790
which so unlike other change control

01:28:30,210 --> 01:28:33,790
systems where you

01:28:30,790 --> 01:28:38,230
hold up date and general you only pull

01:28:33,790 --> 01:28:39,880
in yet excuse me if you want to do this

01:28:38,230 --> 01:28:42,340
merge two otherwise you typically want

01:28:39,880 --> 01:28:44,110
to use a rebate for that okay now if you

01:28:42,340 --> 01:28:46,390
have permission you can also push up

01:28:44,110 --> 01:28:49,240
stream with push by default that

01:28:46,390 --> 01:28:52,120
defaults to the origin reap out and it

01:28:49,240 --> 01:28:55,470
will try to move my master whatever my

01:28:52,120 --> 01:28:59,230
current master commit is up to the repo

01:28:55,470 --> 01:29:01,200
pushing its master forward now it's a

01:28:59,230 --> 01:29:06,010
couple things with that kind of a push

01:29:01,200 --> 01:29:09,220
if I've done this rebase or merge then

01:29:06,010 --> 01:29:12,310
my master includes their master already

01:29:09,220 --> 01:29:14,860
somehow my master has a history element

01:29:12,310 --> 01:29:19,510
their master which means if i push right

01:29:14,860 --> 01:29:22,240
now it's going to be adding more commits

01:29:19,510 --> 01:29:23,710
without losing anything okay so because

01:29:22,240 --> 01:29:25,810
I've already included their master in my

01:29:23,710 --> 01:29:29,080
code so therefore it's not going to hurt

01:29:25,810 --> 01:29:31,360
if i push it but it might be that in the

01:29:29,080 --> 01:29:34,270
meanwhile between doing that get pulled

01:29:31,360 --> 01:29:35,830
a chef's rebased or maybe they get fecha

01:29:34,270 --> 01:29:37,030
large and get rebates origin master or

01:29:35,830 --> 01:29:39,220
maybe emerge whatever you want to do

01:29:37,030 --> 01:29:42,190
there to make it locally synced someone

01:29:39,220 --> 01:29:43,960
else may have pushed to master okay now

01:29:42,190 --> 01:29:46,350
what's going to happen there is if I try

01:29:43,960 --> 01:29:48,510
to push that I would effectively be

01:29:46,350 --> 01:29:51,700
losing that he commits that are up there

01:29:48,510 --> 01:29:54,550
so most repos are configured in such a

01:29:51,700 --> 01:29:56,830
way that it allows fast-forward only

01:29:54,550 --> 01:29:59,320
which if we call the term from a little

01:29:56,830 --> 01:30:01,570
bit but while ago that means that it'll

01:29:59,320 --> 01:30:04,390
only work if it's just adding commits

01:30:01,570 --> 01:30:06,100
and it will abort otherwise so if i'm

01:30:04,390 --> 01:30:07,810
working with a typical github repo or

01:30:06,100 --> 01:30:09,790
something I trade you a push and says

01:30:07,810 --> 01:30:11,560
sorry not a fast-forward merge that's

01:30:09,790 --> 01:30:13,600
what it's talking about it saying I in

01:30:11,560 --> 01:30:15,370
the meanwhile between me trying to sync

01:30:13,600 --> 01:30:17,140
up my local repo and remote repel

01:30:15,370 --> 01:30:18,640
somebody else also beat me to it

01:30:17,140 --> 01:30:20,320
somebody else already put some more

01:30:18,640 --> 01:30:22,240
stuff and all users just repeat the

01:30:20,320 --> 01:30:23,860
cycle is basically pull it down again

01:30:22,240 --> 01:30:26,410
sync it up again and then you can

01:30:23,860 --> 01:30:28,840
finally push if to quicker this next

01:30:26,410 --> 01:30:30,430
time that's all yeah it's a race at that

01:30:28,840 --> 01:30:32,920
point so this is this is the one area

01:30:30,430 --> 01:30:34,930
where having distributed control systems

01:30:32,920 --> 01:30:36,910
is a little more complicated because

01:30:34,930 --> 01:30:38,170
everybody can be updating the master on

01:30:36,910 --> 01:30:40,890
top everybody else but you just have to

01:30:38,170 --> 01:30:40,890
get there fast yeah

01:30:41,240 --> 01:30:51,830
stream is not bigger badly it's their

01:30:43,730 --> 01:30:52,940
way of saying you're in believe so I've

01:30:51,830 --> 01:30:54,980
already been working three posts that

01:30:52,940 --> 01:30:59,210
are sailing configured so I have you

01:30:54,980 --> 01:31:01,760
ever seen that um I don't know what I'm

01:30:59,210 --> 01:31:05,960
saying I'd ever go look it up I man get

01:31:01,760 --> 01:31:08,390
push yeah okay so sometimes you want to

01:31:05,960 --> 01:31:11,290
throw work away because things are crazy

01:31:08,390 --> 01:31:14,450
or whatever so get reset dash dash soft

01:31:11,290 --> 01:31:16,790
makes all the files so I've got a career

01:31:14,450 --> 01:31:19,220
commit I've made some changes i didn't

01:31:16,790 --> 01:31:21,140
get ad with those and i say i didn't

01:31:19,220 --> 01:31:22,310
want to add all those files i want to

01:31:21,140 --> 01:31:24,200
add like three or four files and make

01:31:22,310 --> 01:31:27,710
them commit with that get reset soft as

01:31:24,200 --> 01:31:29,390
that get reset dash dash hard it's

01:31:27,710 --> 01:31:31,700
pretty bad it makes the working

01:31:29,390 --> 01:31:33,650
directory looking like the last commit

01:31:31,700 --> 01:31:35,150
all right I've made some changes and now

01:31:33,650 --> 01:31:37,370
I'm just saying Oh what was I thinking

01:31:35,150 --> 01:31:38,750
okay so get reset dash dash hard

01:31:37,370 --> 01:31:41,420
actually resets the working directory

01:31:38,750 --> 01:31:45,560
don't do this it makes you lose stuff

01:31:41,420 --> 01:31:47,390
that way right yeah it's Emma's check

01:31:45,560 --> 01:31:49,520
out get check out dot but this is worse

01:31:47,390 --> 01:31:51,950
as well all right get reset dash hard

01:31:49,520 --> 01:31:53,720
three commits ago well that's really bad

01:31:51,950 --> 01:31:54,800
right so that's throwing away the last

01:31:53,720 --> 01:31:56,480
three bits of commits that you might

01:31:54,800 --> 01:31:58,730
have made I did this occasional you know

01:31:56,480 --> 01:31:59,840
what I want to throw away the word now

01:31:58,730 --> 01:32:02,320
there's an interesting thing though if

01:31:59,840 --> 01:32:04,850
you want if you've already pushed that

01:32:02,320 --> 01:32:06,380
you've already shared those commissions

01:32:04,850 --> 01:32:08,810
of the people this is going to be bad

01:32:06,380 --> 01:32:10,880
for them because now if you build more

01:32:08,810 --> 01:32:12,170
things on on top of your previous commit

01:32:10,880 --> 01:32:13,220
they've got these other commits hanging

01:32:12,170 --> 01:32:15,470
out there and it's not going to be a

01:32:13,220 --> 01:32:18,260
fast forward march for them so there is

01:32:15,470 --> 01:32:23,480
a way called get revert or you can make

01:32:18,260 --> 01:32:25,550
a single commit that undoes the working

01:32:23,480 --> 01:32:27,170
directory to whatever the committee's

01:32:25,550 --> 01:32:29,780
that you name so for example you get

01:32:27,170 --> 01:32:32,420
revert head till two three we'll add add

01:32:29,780 --> 01:32:34,610
one more commit that effectively undoes

01:32:32,420 --> 01:32:35,570
the previous three commits so that's

01:32:34,610 --> 01:32:37,310
what you want to do if you've already

01:32:35,570 --> 01:32:38,840
pushed this stuff though but typically

01:32:37,310 --> 01:32:39,980
if you're throwing stuff away you

01:32:38,840 --> 01:32:42,260
probably didn't want it in public in the

01:32:39,980 --> 01:32:44,270
first place okay too bad if you did all

01:32:42,260 --> 01:32:46,400
right you can also check out a

01:32:44,270 --> 01:32:48,470
particular file so you say get check out

01:32:46,400 --> 01:32:50,960
head and a file this is great if you

01:32:48,470 --> 01:32:52,340
screwed up deleted a file and you really

01:32:50,960 --> 01:32:53,960
want to back again so say give it

01:32:52,340 --> 01:32:55,130
something and this is also nice if you

01:32:53,960 --> 01:32:57,469
want to check out

01:32:55,130 --> 01:32:58,909
a version from a older command or a

01:32:57,469 --> 01:33:00,080
different branch and you'll want to

01:32:58,909 --> 01:33:02,389
bring that into the current tree this

01:33:00,080 --> 01:33:05,150
would be the way to do that okay as I

01:33:02,389 --> 01:33:08,300
said earlier get ignore can define

01:33:05,150 --> 01:33:10,639
things you want to ignore typically its

01:33:08,300 --> 01:33:12,230
patterns like star gutsy start at 0 you

01:33:10,639 --> 01:33:14,420
can also put a knot in front of there so

01:33:12,230 --> 01:33:16,909
you could say for example start out see

01:33:14,420 --> 01:33:19,100
to ignore all the C files but not food

01:33:16,909 --> 01:33:20,719
see because food I see a special so you

01:33:19,100 --> 01:33:23,090
want to track food out see but you'll

01:33:20,719 --> 01:33:24,530
interact the rest any line that doesn't

01:33:23,090 --> 01:33:26,540
have a slash in it it's checked against

01:33:24,530 --> 01:33:28,969
the base name of the file otherwise it's

01:33:26,540 --> 01:33:30,620
a shell glob you can also anchor that

01:33:28,969 --> 01:33:32,360
with a slash the beginning to be in the

01:33:30,620 --> 01:33:34,610
current directory otherwise it's applies

01:33:32,360 --> 01:33:36,050
to all directories now the get ignore

01:33:34,610 --> 01:33:39,190
our can be checked into the repository

01:33:36,050 --> 01:33:41,600
and track just like all the other files

01:33:39,190 --> 01:33:43,310
and typically will you put a get ignore

01:33:41,600 --> 01:33:45,949
that makes sense for everybody that has

01:33:43,310 --> 01:33:47,900
to use this particular repo okay but you

01:33:45,949 --> 01:33:50,360
can also have in your current check out

01:33:47,900 --> 01:33:52,639
in your current repo you can update and

01:33:50,360 --> 01:33:55,130
edit the file get info exclude and

01:33:52,639 --> 01:33:56,510
that's going to be only the that's all

01:33:55,130 --> 01:33:57,739
you to apply to you that's never going

01:33:56,510 --> 01:33:59,600
to be checked in with repo it's not

01:33:57,739 --> 01:34:01,340
going to be cloned it's just for you so

01:33:59,600 --> 01:34:04,370
that's typically where you'd put things

01:34:01,340 --> 01:34:05,870
that are related to the way you're

01:34:04,370 --> 01:34:07,670
particularly processing files and maybe

01:34:05,870 --> 01:34:09,650
my Emacs Starchild a thing or whatever

01:34:07,670 --> 01:34:11,389
right and both of those can work

01:34:09,650 --> 01:34:14,179
together the thing is important as a get

01:34:11,389 --> 01:34:16,239
info exclude will not be cloned okay

01:34:14,179 --> 01:34:19,400
I've got what 15 minutes is that right

01:34:16,239 --> 01:34:23,570
okay I've got eight more slides so here

01:34:19,400 --> 01:34:25,699
we go alright so commands are affected

01:34:23,570 --> 01:34:27,260
by configuration a lot so there's

01:34:25,699 --> 01:34:28,670
command-line options for a lot of things

01:34:27,260 --> 01:34:31,130
but there's also some things that get

01:34:28,670 --> 01:34:34,429
stores in config file so git config

01:34:31,130 --> 01:34:36,230
gives a with a name gives it a value so

01:34:34,429 --> 01:34:38,810
its name to value the name can contain

01:34:36,230 --> 01:34:42,020
period for some sub items and get config

01:34:38,810 --> 01:34:44,840
name fetches the current value you'll

01:34:42,020 --> 01:34:47,210
see get config dash dash global fetch or

01:34:44,840 --> 01:34:49,909
sat and that actually edits your local

01:34:47,210 --> 01:34:51,560
home directory git config and that

01:34:49,909 --> 01:34:53,659
applies to all to get repos that you're

01:34:51,560 --> 01:34:56,270
using so for example typically well put

01:34:53,659 --> 01:34:58,940
in there is my username and my email

01:34:56,270 --> 01:35:01,010
address so get wants to know what

01:34:58,940 --> 01:35:03,710
username and email address it's going to

01:35:01,010 --> 01:35:05,270
assign to every commit its I get it from

01:35:03,710 --> 01:35:08,360
my dot get your big file my whole

01:35:05,270 --> 01:35:08,989
directory now there are times you want

01:35:08,360 --> 01:35:10,639
to say

01:35:08,989 --> 01:35:12,710
work on this branch because the boss

01:35:10,639 --> 01:35:13,999
says I got to work on it but I'm sort of

01:35:12,710 --> 01:35:14,960
working with something already I've

01:35:13,999 --> 01:35:16,639
already got something in my current

01:35:14,960 --> 01:35:18,380
working directory and I'm about to make

01:35:16,639 --> 01:35:21,289
you commit and stuff but I'm interrupted

01:35:18,380 --> 01:35:23,420
so when a stash does it creates the

01:35:21,289 --> 01:35:25,760
current index and the current working

01:35:23,420 --> 01:35:27,920
directory and puts those into a special

01:35:25,760 --> 01:35:30,139
place to be able to pull back later so

01:35:27,920 --> 01:35:31,760
you say git stash and everything's just

01:35:30,139 --> 01:35:33,650
snap shotted and then you can go out

01:35:31,760 --> 01:35:35,420
check out other files of the directories

01:35:33,650 --> 01:35:36,889
see what you want to do make commits

01:35:35,420 --> 01:35:39,380
there doesn't matter but then you just

01:35:36,889 --> 01:35:41,570
say git stash pop and it pulls back

01:35:39,380 --> 01:35:43,010
whatever was previously there so they're

01:35:41,570 --> 01:35:44,030
other uses for it as well but again I

01:35:43,010 --> 01:35:45,889
don't quite have time want to get over

01:35:44,030 --> 01:35:47,510
to the rest of the slides you can have

01:35:45,889 --> 01:35:49,519
multiple stats just so you can be really

01:35:47,510 --> 01:35:51,079
confused to have multiple snapshots of

01:35:49,519 --> 01:35:53,179
things you're working on if you get to

01:35:51,079 --> 01:35:54,320
that point though i dono keep a notebook

01:35:53,179 --> 01:35:56,539
or something i sees gonna be really

01:35:54,320 --> 01:35:58,070
complex you could name them as well so

01:35:56,539 --> 01:35:59,570
there it is but I also want to talk

01:35:58,070 --> 01:36:00,889
about some other things that are in get

01:35:59,570 --> 01:36:03,320
just going to give a summary of

01:36:00,889 --> 01:36:06,440
everything else that's around there you

01:36:03,320 --> 01:36:08,719
don't have to check out a commit just to

01:36:06,440 --> 01:36:11,179
create a tarball for it you just say get

01:36:08,719 --> 01:36:13,639
archived and the name of the commit and

01:36:11,179 --> 01:36:14,929
our own standard outcomes a tarball so

01:36:13,639 --> 01:36:16,249
this is great so it doesn't end up be

01:36:14,929 --> 01:36:18,829
the current check out or anything in

01:36:16,249 --> 01:36:23,300
fact you can even have no coming into

01:36:18,829 --> 01:36:25,880
that all right um it's not with only 15

01:36:23,300 --> 01:36:28,610
minutes left all right get bisect this

01:36:25,880 --> 01:36:31,159
is really handy like so you've made a

01:36:28,610 --> 01:36:34,849
bunch of commits and somewhere down here

01:36:31,159 --> 01:36:36,800
the the build is broken because you know

01:36:34,849 --> 01:36:38,900
something changed between here and here

01:36:36,800 --> 01:36:40,730
i know the build work here and there's

01:36:38,900 --> 01:36:43,190
like 17 commits another bill is broken

01:36:40,730 --> 01:36:45,019
now go what broke it okay what's

01:36:43,190 --> 01:36:46,610
particularly commit broke it right so

01:36:45,019 --> 01:36:49,309
what you do is you take it bisect you

01:36:46,610 --> 01:36:51,710
say the bad one and the good one and it

01:36:49,309 --> 01:36:56,210
looks at all the changes those commits

01:36:51,710 --> 01:36:58,730
made and it computes a midpoint based on

01:36:56,210 --> 01:37:00,619
the number of lines changed each commit

01:36:58,730 --> 01:37:03,050
so it's not just halfway it kind of

01:37:00,619 --> 01:37:06,110
looks at the like that which one's made

01:37:03,050 --> 01:37:07,400
the most changes and by sex that and it

01:37:06,110 --> 01:37:09,650
checks that out and says okay now you're

01:37:07,400 --> 01:37:11,900
at this commit so you try it you say

01:37:09,650 --> 01:37:13,820
does that work or not oh that one's

01:37:11,900 --> 01:37:15,949
broken too so you say get by sick bad

01:37:13,820 --> 01:37:17,809
and it says okay so now it's somewhere

01:37:15,949 --> 01:37:20,059
in here that the good one and that one

01:37:17,809 --> 01:37:21,650
changed right so does that same thing it

01:37:20,059 --> 01:37:22,079
says how many lines are changes on it

01:37:21,650 --> 01:37:23,489
tells

01:37:22,079 --> 01:37:25,379
another commit and since you got about 3

01:37:23,489 --> 01:37:26,609
by 6 left so it tells you all the time

01:37:25,379 --> 01:37:28,439
how many how many more you can have to

01:37:26,609 --> 01:37:31,199
do and this is great like so I'm

01:37:28,439 --> 01:37:32,820
building GUI max every morning on my OS

01:37:31,199 --> 01:37:34,499
10 laptop so I pulled down the get

01:37:32,820 --> 01:37:36,659
archive of that and they break sometimes

01:37:34,499 --> 01:37:38,669
and so I get two leaves bisect for a

01:37:36,659 --> 01:37:41,339
little while building a max which takes

01:37:38,669 --> 01:37:42,329
about 20 minutes but I get to try and

01:37:41,339 --> 01:37:43,889
see which one actually broke and I can

01:37:42,329 --> 01:37:45,269
say this commit right here this is have

01:37:43,889 --> 01:37:47,820
commit it's really handy for that

01:37:45,269 --> 01:37:49,260
doesn't always work sometimes it you

01:37:47,820 --> 01:37:51,179
know sometimes it's not just one thing

01:37:49,260 --> 01:37:53,280
that broke the build or whatever but

01:37:51,179 --> 01:37:55,619
it's pretty hand he's going to plug okay

01:37:53,280 --> 01:37:57,179
get cherry pick as we had those two

01:37:55,619 --> 01:37:59,219
branches before sometimes you want this

01:37:57,179 --> 01:38:00,510
one commits here to be applied down to

01:37:59,219 --> 01:38:02,489
the end of that so cherry pick just

01:38:00,510 --> 01:38:04,199
takes that one if you need more than one

01:38:02,489 --> 01:38:07,109
you just get rebase with dash I and it's

01:38:04,199 --> 01:38:08,969
much more flexible get envy rename the

01:38:07,109 --> 01:38:11,820
files I talked about earlier it renames

01:38:08,969 --> 01:38:13,709
a file but it also does remove this old

01:38:11,820 --> 01:38:15,719
file from the index add this new file of

01:38:13,709 --> 01:38:17,189
the index same going to get RM again

01:38:15,719 --> 01:38:18,929
it's you don't need to use these

01:38:17,189 --> 01:38:21,479
commands just use normal text editing

01:38:18,929 --> 01:38:23,010
commands normal unix commands and it

01:38:21,479 --> 01:38:24,329
will just work but you need to also then

01:38:23,010 --> 01:38:26,820
do the right add commands on top of that

01:38:24,329 --> 01:38:29,519
we talked about get push cooking bucket

01:38:26,820 --> 01:38:32,280
revert one other handy one is get blame

01:38:29,519 --> 01:38:35,099
okay so i'm looking at a source file and

01:38:32,280 --> 01:38:36,689
i want to know which particular commit

01:38:35,099 --> 01:38:38,999
out of these three lines which obviously

01:38:36,689 --> 01:38:40,979
broke everything okay so i usually get

01:38:38,999 --> 01:38:44,729
blame on there it goes back through all

01:38:40,979 --> 01:38:47,189
the history of that file and irritates

01:38:44,729 --> 01:38:49,469
the lines in front with the first commit

01:38:47,189 --> 01:38:51,659
that that line of the most recent commit

01:38:49,469 --> 01:38:52,949
that affected that line so it's kind of

01:38:51,659 --> 01:38:56,249
extra seeing who actually Brooke stuff

01:38:52,949 --> 01:38:58,679
okay so just in terms of some general

01:38:56,249 --> 01:39:02,039
stuff about get you should always commit

01:38:58,679 --> 01:39:04,289
small logical steps I try to commit

01:39:02,039 --> 01:39:06,989
things that I think people might want to

01:39:04,289 --> 01:39:08,909
leave out or select in so it's a sort of

01:39:06,989 --> 01:39:12,089
logical step that rivers didn't forget

01:39:08,909 --> 01:39:13,489
so ideally you want to commit every time

01:39:12,089 --> 01:39:15,359
it would pass the test suite again

01:39:13,489 --> 01:39:17,219
because again if we talk about git

01:39:15,359 --> 01:39:18,899
bisect a few minutes ago you want to

01:39:17,219 --> 01:39:20,729
make sure every commit still doesn't

01:39:18,899 --> 01:39:22,260
break the build because otherwise get by

01:39:20,729 --> 01:39:24,809
such as useless if the Brill is broken

01:39:22,260 --> 01:39:26,249
somewhere in the middle then bicycle

01:39:24,809 --> 01:39:28,800
saying lots bad you'll end up on the

01:39:26,249 --> 01:39:31,079
wrong side of the bicep there's actually

01:39:28,800 --> 01:39:32,950
a they're actually some discussion on

01:39:31,079 --> 01:39:34,990
the get mailing list right now that I

01:39:32,950 --> 01:39:37,030
kick into play where you'll be able to

01:39:34,990 --> 01:39:39,580
say in a commit I know this breaks the

01:39:37,030 --> 01:39:40,750
bisect so if by sec you ever sees this

01:39:39,580 --> 01:39:43,180
it knows that's one to skip

01:39:40,750 --> 01:39:44,500
automatically but they haven't they

01:39:43,180 --> 01:39:45,970
haven't worked on that yet hasn't been

01:39:44,500 --> 01:39:48,040
incorporated I think they're waiting for

01:39:45,970 --> 01:39:50,920
a commit from me all right all right

01:39:48,040 --> 01:39:53,020
yeah big patches welcome all right it's

01:39:50,920 --> 01:39:55,990
oh by the way the get project is sort of

01:39:53,020 --> 01:39:57,400
weird the the maintainer get who neo

01:39:55,990 --> 01:40:02,290
which we've interviewed to enforce

01:39:57,400 --> 01:40:04,900
weekly khalidiya does not want to pull a

01:40:02,290 --> 01:40:06,310
get request from somewhere else he just

01:40:04,900 --> 01:40:07,930
wants patches in the mailing list that's

01:40:06,310 --> 01:40:09,820
entirely how it's all done so here's get

01:40:07,930 --> 01:40:11,860
which is this great distributed pull and

01:40:09,820 --> 01:40:14,650
the way you change things in the get

01:40:11,860 --> 01:40:17,080
project is you post a patch to the

01:40:14,650 --> 01:40:20,850
mailing list seems ironic doesn't it all

01:40:17,080 --> 01:40:20,850
right anyway that's just crazy all right

01:40:26,970 --> 01:40:31,540
it's true yeah it is in fact it is

01:40:30,250 --> 01:40:33,520
designed to be able to do that so that's

01:40:31,540 --> 01:40:35,500
part of it also he he managed it by

01:40:33,520 --> 01:40:36,940
having a mail folder of all the possible

01:40:35,500 --> 01:40:38,590
commits and then he applies that locally

01:40:36,940 --> 01:40:40,120
so it's sort of it's also good because

01:40:38,590 --> 01:40:42,490
it shows it gets discussion right away

01:40:40,120 --> 01:40:43,720
so somebody post patches somebody else

01:40:42,490 --> 01:40:45,640
could immediately say I applied these

01:40:43,720 --> 01:40:47,260
and you know that really should fix it

01:40:45,640 --> 01:40:48,700
this way so it sort of immediately

01:40:47,260 --> 01:40:50,110
involves other people about being able

01:40:48,700 --> 01:40:51,490
to update it so it's there's an

01:40:50,110 --> 01:40:52,450
advantage to it actually it's just a

01:40:51,490 --> 01:40:54,460
little weird it's like here's this

01:40:52,450 --> 01:40:56,200
project where you know you can Pokemon

01:40:54,460 --> 01:40:58,390
the repos and we'll just pale patches

01:40:56,200 --> 01:40:59,830
around alright it's easier to squash

01:40:58,390 --> 01:41:01,360
commits later that is to break them up

01:40:59,830 --> 01:41:03,190
and actually said before we can do you

01:41:01,360 --> 01:41:07,330
squash a minute reorder with git rebase

01:41:03,190 --> 01:41:08,470
10 shot okay um so we've seen two

01:41:07,330 --> 01:41:09,610
different tools to be able to pick

01:41:08,470 --> 01:41:11,470
things from other things there's merge

01:41:09,610 --> 01:41:14,340
merge of course bring in all the commits

01:41:11,470 --> 01:41:17,170
cherry-pick is bringing in just one

01:41:14,340 --> 01:41:18,790
let's see here so merge is great when

01:41:17,170 --> 01:41:21,160
you want to take all of topic one and

01:41:18,790 --> 01:41:22,990
put it on top of topic two or merging

01:41:21,160 --> 01:41:24,310
with topic you sure think is great when

01:41:22,990 --> 01:41:26,260
you want to just pick out one or two of

01:41:24,310 --> 01:41:29,560
the changes from topic one and pull them

01:41:26,260 --> 01:41:30,870
over topic 2 so in terms of workflow

01:41:29,560 --> 01:41:34,060
again stepping back a little bit further

01:41:30,870 --> 01:41:35,740
get gets workflow is really sort of fun

01:41:34,060 --> 01:41:38,470
it's sort of a good model for how you

01:41:35,740 --> 01:41:40,660
can use get in your organization there's

01:41:38,470 --> 01:41:42,190
four branches there's maint which is

01:41:40,660 --> 01:41:44,170
just the maintenance release branch

01:41:42,190 --> 01:41:45,430
that's sort of like where if there's

01:41:44,170 --> 01:41:47,860
something really broken in the past

01:41:45,430 --> 01:41:49,600
release that's where they'll go there's

01:41:47,860 --> 01:41:52,300
master and that's what i said you can

01:41:49,600 --> 01:41:53,740
build every day and it works so there do

01:41:52,300 --> 01:41:56,530
a pretty good job of making sure that

01:41:53,740 --> 01:41:59,380
that's not going to break anything next

01:41:56,530 --> 01:42:01,240
is sort of you know thrown some features

01:41:59,380 --> 01:42:02,830
in there might not work everywhere yet

01:42:01,240 --> 01:42:05,380
please let us know so it breaks

01:42:02,830 --> 01:42:07,600
something for you so it's a little dicey

01:42:05,380 --> 01:42:09,160
I don't compile max because I don't want

01:42:07,600 --> 01:42:10,960
to spend more time than on this than I

01:42:09,160 --> 01:42:12,340
need to so I'm just completely master

01:42:10,960 --> 01:42:13,990
every day but master does change every

01:42:12,340 --> 01:42:17,020
day it's just going to cool that way and

01:42:13,990 --> 01:42:18,970
there's PU I don't know what that stands

01:42:17,020 --> 01:42:21,070
for loose lips maybe it's pu literally I

01:42:18,970 --> 01:42:23,350
don't experimental feature so there'll

01:42:21,070 --> 01:42:25,660
be things under Pierce obey PE / topic

01:42:23,350 --> 01:42:26,710
name p / topic to abuse on topic 3 and

01:42:25,660 --> 01:42:28,240
so there'll be all sorts of things

01:42:26,710 --> 01:42:30,370
people are working on and this is sort

01:42:28,240 --> 01:42:32,080
of where the patches that are picked up

01:42:30,370 --> 01:42:34,480
from the mailing list immediately become

01:42:32,080 --> 01:42:36,130
a pu branch and so that if you pull down

01:42:34,480 --> 01:42:37,390
the next day's release you can see that

01:42:36,130 --> 01:42:39,550
you can actually start applying it see

01:42:37,390 --> 01:42:41,410
if it works for you and give feedback to

01:42:39,550 --> 01:42:47,890
the mailing list and so on that's where

01:42:41,410 --> 01:42:49,450
those go oh cool cool all right um each

01:42:47,890 --> 01:42:51,700
one of those is sent to the one above so

01:42:49,450 --> 01:42:53,140
every one of these branches contains all

01:42:51,700 --> 01:42:56,260
the branches list of prior to that and

01:42:53,140 --> 01:42:58,300
so what happens is that for example what

01:42:56,260 --> 01:43:00,340
you nee old ills will commit something

01:42:58,300 --> 01:43:02,380
to master and then it will immediately

01:43:00,340 --> 01:43:04,090
merge that down it through next in all

01:43:02,380 --> 01:43:05,920
the pu branches so that that way every

01:43:04,090 --> 01:43:08,710
branch all contains everything that's

01:43:05,920 --> 01:43:12,280
above it yeah just like I said here

01:43:08,710 --> 01:43:13,660
alright and so again most features are

01:43:12,280 --> 01:43:16,270
going to require several iterations I've

01:43:13,660 --> 01:43:17,770
been this clear before so you commit to

01:43:16,270 --> 01:43:19,600
these to a topic branch while you're

01:43:17,770 --> 01:43:21,400
doing the design so X I have a logical

01:43:19,600 --> 01:43:23,140
idea I want to implement it I'm going to

01:43:21,400 --> 01:43:24,280
create a branch for it right away now

01:43:23,140 --> 01:43:26,590
I'm going to commit along that branch

01:43:24,280 --> 01:43:28,150
that way if I don't finish it but I need

01:43:26,590 --> 01:43:29,590
to start working on something else I can

01:43:28,150 --> 01:43:32,410
branch off master again and go different

01:43:29,590 --> 01:43:34,120
direction okay it's easier to rehab this

01:43:32,410 --> 01:43:35,650
or abandon it like I might be trying a

01:43:34,120 --> 01:43:37,780
new feature and I just go oh this isn't

01:43:35,650 --> 01:43:39,460
working out get branch dash D with a

01:43:37,780 --> 01:43:41,170
capital D it says I know I haven't

01:43:39,460 --> 01:43:43,720
merged it to master yet go ahead and

01:43:41,170 --> 01:43:46,270
delete it make my work go away okay and

01:43:43,720 --> 01:43:48,310
then you fork the topic from the oldest

01:43:46,270 --> 01:43:50,790
main branch you can refresh we need to

01:43:48,310 --> 01:43:53,770
undo that routinely because it makes the

01:43:50,790 --> 01:43:57,160
tree really bushy and then uribe sat

01:43:53,770 --> 01:43:58,360
opposite sport from the wrong man what's

01:43:57,160 --> 01:43:59,280
great is it you don't have to read all

01:43:58,360 --> 01:44:00,900
this it's all written down

01:43:59,280 --> 01:44:04,800
one of the main pages that comes look at

01:44:00,900 --> 01:44:07,350
okay so the way the workflow works for

01:44:04,800 --> 01:44:09,840
the get project is they merce merge the

01:44:07,350 --> 01:44:12,060
base branch up to the top of branch so

01:44:09,840 --> 01:44:13,800
we want to find out if the topic branch

01:44:12,060 --> 01:44:16,350
actually works on top of the base branch

01:44:13,800 --> 01:44:20,130
so we want to topic can be brought in to

01:44:16,350 --> 01:44:22,350
master the best way to do this is you

01:44:20,130 --> 01:44:24,840
merge the other direction but you merge

01:44:22,350 --> 01:44:27,900
it onto a new throwaway branch so it's

01:44:24,840 --> 01:44:30,690
all say git checkout dash throw away

01:44:27,900 --> 01:44:33,150
topic 1 so now I'm on a throwaway branch

01:44:30,690 --> 01:44:35,130
but it's the same as topic 1 then I say

01:44:33,150 --> 01:44:36,960
git merge master so that's going to

01:44:35,130 --> 01:44:39,270
bring in all the code from master and

01:44:36,960 --> 01:44:41,670
merge it in with this throwaway branch

01:44:39,270 --> 01:44:44,280
so this holy branch this point is

01:44:41,670 --> 01:44:47,010
effectively all of master as its

01:44:44,280 --> 01:44:48,630
progressed plus all of topic 1 then I go

01:44:47,010 --> 01:44:50,130
ahead and test that make sure it all

01:44:48,630 --> 01:44:51,990
works so I'd run it through my

01:44:50,130 --> 01:44:53,490
continuous integration whatever I want

01:44:51,990 --> 01:44:55,740
to do with that and that branch has

01:44:53,490 --> 01:44:57,180
never emerged in it just for testing you

01:44:55,740 --> 01:44:59,820
can also publish it but typically you

01:44:57,180 --> 01:45:02,880
don't want to and if the integration

01:44:59,820 --> 01:45:04,620
fails then we go back to topic 1 we add

01:45:02,880 --> 01:45:06,750
the patches to make the work again and

01:45:04,620 --> 01:45:09,660
then we cherry pick those back on to the

01:45:06,750 --> 01:45:11,280
test branch but ultimately we're trying

01:45:09,660 --> 01:45:13,890
to do is get to the point where topic

01:45:11,280 --> 01:45:15,870
one when merged into master still works

01:45:13,890 --> 01:45:17,160
and that's why we have this throwaway

01:45:15,870 --> 01:45:19,200
branch for works well I see everything

01:45:17,160 --> 01:45:20,400
all plays together once we get topic

01:45:19,200 --> 01:45:21,690
wonder where it works we go back to the

01:45:20,400 --> 01:45:23,340
stuff i showed you a lot earlier which

01:45:21,690 --> 01:45:25,410
is that we rebase topic one on top of

01:45:23,340 --> 01:45:26,700
master or we'd do a merge depending on

01:45:25,410 --> 01:45:28,620
what they wanted a bushy history or a

01:45:26,700 --> 01:45:31,260
linear history that's basically how that

01:45:28,620 --> 01:45:32,880
works just about on time look at that

01:45:31,260 --> 01:45:36,870
there's further info there's get in

01:45:32,880 --> 01:45:39,600
Wikipedia there's a get home page to get

01:45:36,870 --> 01:45:40,800
wiki the pro get book here's the URL

01:45:39,600 --> 01:45:42,630
you're not there actually even Google

01:45:40,800 --> 01:45:43,650
for it with that put right there you

01:45:42,630 --> 01:45:45,870
know the mailing list there's really

01:45:43,650 --> 01:45:47,040
helpful people they're very active

01:45:45,870 --> 01:45:48,870
mailing list though so unless you want

01:45:47,040 --> 01:45:50,940
another 70 pieces of email a day I

01:45:48,870 --> 01:45:52,710
wouldn't join it okay or keep it in a

01:45:50,940 --> 01:45:54,360
way that separates it up and in there

01:45:52,710 --> 01:45:56,900
you can also submit bugs patches ideas

01:45:54,360 --> 01:45:59,160
the get IRC channel is really awesome

01:45:56,900 --> 01:46:00,990
lots of people there are 24 by 7

01:45:59,160 --> 01:46:02,040
answering questions for all sorts of

01:46:00,990 --> 01:46:04,440
levels things I'm there occasionally

01:46:02,040 --> 01:46:06,810
helping the answer out and that's all

01:46:04,440 --> 01:46:08,130
there is any questions now I got a

01:46:06,810 --> 01:46:10,310
couple more minutes to go so any

01:46:08,130 --> 01:46:10,310
questions

01:46:11,580 --> 01:46:16,650
slides already I published them on

01:46:14,450 --> 01:46:18,600
SlideShare back at January's ever change

01:46:16,650 --> 01:46:19,590
them since then I did this very same

01:46:18,600 --> 01:46:21,870
thing if you missed anything of what i

01:46:19,590 --> 01:46:24,930
said this morning you could watch it on

01:46:21,870 --> 01:46:26,910
the gap see channel but i did this very

01:46:24,930 --> 01:46:29,130
same presentation about three months ago

01:46:26,910 --> 01:46:30,930
and it's on vimeo so if you google for

01:46:29,130 --> 01:46:32,700
Randall Schwartz get it's going to be

01:46:30,930 --> 01:46:34,410
like the second and third hit this is

01:46:32,700 --> 01:46:37,080
actually a longer version of something I

01:46:34,410 --> 01:46:39,180
did six years ago I think as a google

01:46:37,080 --> 01:46:43,170
Tech Talk so that was sort of the thing

01:46:39,180 --> 01:46:45,840
I Linus went in to google and he did a

01:46:43,170 --> 01:46:48,270
tech talk for about an hour of how svn

01:46:45,840 --> 01:46:50,220
sucks and have CBS sucks but he didn't

01:46:48,270 --> 01:46:51,360
really talk about get and so I had an

01:46:50,220 --> 01:46:52,740
opportunity cuz I'd friends at Google I

01:46:51,360 --> 01:46:54,390
said can I come in and do the actual

01:46:52,740 --> 01:46:56,580
talk that he should have done and they

01:46:54,390 --> 01:46:57,960
said yeah so I got his talk of my talk

01:46:56,580 --> 01:47:00,750
of the two talks that Google has about

01:46:57,960 --> 01:47:01,710
this but I beef it up by double size and

01:47:00,750 --> 01:47:14,340
that's what you can see in the vimeo

01:47:01,710 --> 01:47:16,260
thing in january um yes there's a couple

01:47:14,340 --> 01:47:18,000
ways to do that one is if you've not

01:47:16,260 --> 01:47:19,530
actually editing the old version then

01:47:18,000 --> 01:47:21,600
Jews get archive to pull it out to a

01:47:19,530 --> 01:47:23,400
separate file tree that's that's quick

01:47:21,600 --> 01:47:25,890
and doesn't recording changes there is a

01:47:23,400 --> 01:47:27,480
way others get worker or something that

01:47:25,890 --> 01:47:29,760
where you can say check this out put to

01:47:27,480 --> 01:47:30,840
a separate worker so but if you're not

01:47:29,760 --> 01:47:31,920
actually doing development on the old

01:47:30,840 --> 01:47:33,210
branch I would just choose to get

01:47:31,920 --> 01:47:38,420
archived and just pull it out and aunt

01:47:33,210 --> 01:47:38,420
are that yeah okay only questions yeah

01:48:01,210 --> 01:48:06,980
git fetch has optional switches that say

01:48:04,489 --> 01:48:09,349
make my tracking branch is exactly equal

01:48:06,980 --> 01:48:12,230
to all the existing topic branches from

01:48:09,349 --> 01:48:13,579
the remote repo so words I would have my

01:48:12,230 --> 01:48:16,699
local repo and then probably something

01:48:13,579 --> 01:48:19,309
on github where i pushing too i would if

01:48:16,699 --> 01:48:20,150
i don't explicitly delete the branch up

01:48:19,309 --> 01:48:22,369
there it's going to stay there forever

01:48:20,150 --> 01:48:23,719
anyway but if i explicitly delete it

01:48:22,369 --> 01:48:25,460
with a appropriate kind of push to

01:48:23,719 --> 01:48:27,260
delete the remote branch it's gone from

01:48:25,460 --> 01:48:28,550
there but when you keep fetching you're

01:48:27,260 --> 01:48:30,349
not going to notice that unless you also

01:48:28,550 --> 01:48:32,630
have the switches to fetch to say and

01:48:30,349 --> 01:48:33,769
also synchronize these as in delete

01:48:32,630 --> 01:48:35,749
branches that aren't there but yeah

01:48:33,769 --> 01:48:37,010
there is an option fail yeah I don't

01:48:35,749 --> 01:48:38,119
know the syntax left of my head but

01:48:37,010 --> 01:48:42,320
every time we need it I just go to mend

01:48:38,119 --> 01:48:44,480
age right any other questions was this

01:48:42,320 --> 01:48:46,960
useful people liked what he heard all

01:48:44,480 --> 01:48:46,960

YouTube URL: https://www.youtube.com/watch?v=bwQqz3cb1Jc


