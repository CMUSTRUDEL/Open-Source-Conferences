Title: Stephen Scaffidi   The Essential Perl Hackers Toolkit
Publication date: 2013-08-20
Playlist: YAPC::NA 2012
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:06,120
it's going to be here it looks like it's

00:00:01,829 --> 00:00:10,559
settled down so this is something I've

00:00:06,120 --> 00:00:13,110
hooked up or I came up with based on my

00:00:10,559 --> 00:00:15,660
experience working with a lot of legacy

00:00:13,110 --> 00:00:20,070
pearl and a lot of very clever

00:00:15,660 --> 00:00:21,900
programmers who you know they they're

00:00:20,070 --> 00:00:23,939
just using Perl to get stuff done and

00:00:21,900 --> 00:00:27,960
then they get a bug and they can't find

00:00:23,939 --> 00:00:29,730
out why why it happens and it's because

00:00:27,960 --> 00:00:32,040
we're all smart people and we all know

00:00:29,730 --> 00:00:33,239
how to do a lot of things but it turns

00:00:32,040 --> 00:00:36,570
out a lot of things are a lot more

00:00:33,239 --> 00:00:39,960
complicated than they seem and this is

00:00:36,570 --> 00:00:42,270
where there are a lot of Sipan modules

00:00:39,960 --> 00:00:46,219
that are essential to keeping you from

00:00:42,270 --> 00:00:52,289
you know shooting yourself in the foot

00:00:46,219 --> 00:00:55,980
so thanks for coming I'm is a pretty big

00:00:52,289 --> 00:00:58,230
crowd and we've got a lot of a lot of

00:00:55,980 --> 00:01:00,449
space to cover I have handouts at the

00:00:58,230 --> 00:01:02,640
very front for people want to take them

00:01:00,449 --> 00:01:04,890
the list of modules that I'm that I'm

00:01:02,640 --> 00:01:07,290
going to cover along with a whole slew

00:01:04,890 --> 00:01:09,689
that I ended up leaving out because I

00:01:07,290 --> 00:01:13,229
decided they either weren't really truly

00:01:09,689 --> 00:01:18,479
essentials or I just don't have time for

00:01:13,229 --> 00:01:21,960
them so this is a talk about the

00:01:18,479 --> 00:01:26,520
essentials the things the pieces of code

00:01:21,960 --> 00:01:29,100
the modules on Sipan and the tools that

00:01:26,520 --> 00:01:32,960
are essential to getting my job done and

00:01:29,100 --> 00:01:35,729
hopefully you getting your job done

00:01:32,960 --> 00:01:40,530
these are the things that I use to get

00:01:35,729 --> 00:01:45,920
my job done better faster so i can go

00:01:40,530 --> 00:01:49,640
out and drink beer or spend well mitten

00:01:45,920 --> 00:01:49,640
right anyway

00:01:51,630 --> 00:01:59,700
okay so the point is I can actually have

00:01:56,640 --> 00:02:02,070
time to do the other things that I want

00:01:59,700 --> 00:02:05,729
to do instead of going back and fixing

00:02:02,070 --> 00:02:09,989
all the little corner cases first I want

00:02:05,729 --> 00:02:12,110
to lead off with this so I've got this

00:02:09,989 --> 00:02:15,269
list of things that I call essentials

00:02:12,110 --> 00:02:19,980
but there's already an awesome awesome

00:02:15,269 --> 00:02:22,230
list of absolutely essential stuff in a

00:02:19,980 --> 00:02:25,230
bundle on Sipan and package on Sipan

00:02:22,230 --> 00:02:26,880
called task kensho and there have been

00:02:25,230 --> 00:02:30,599
other talks on it in the past but I

00:02:26,880 --> 00:02:32,160
highly highly recommend that you go

00:02:30,599 --> 00:02:34,470
through task n sh 0 and install

00:02:32,160 --> 00:02:36,209
everything that pertains to you because

00:02:34,470 --> 00:02:38,459
these are people have gone through and

00:02:36,209 --> 00:02:40,830
picked the best of the best not always

00:02:38,459 --> 00:02:43,230
the newest not always you know the most

00:02:40,830 --> 00:02:46,290
clever but the stuff that's solid in

00:02:43,230 --> 00:02:51,060
everyday work you know things for XML

00:02:46,290 --> 00:02:53,760
things for for web services you know and

00:02:51,060 --> 00:02:55,560
just about anything you can think of and

00:02:53,760 --> 00:02:57,000
if there's something that you really

00:02:55,560 --> 00:02:59,100
think is essential and you think should

00:02:57,000 --> 00:03:02,280
be on task nth row contact the

00:02:59,100 --> 00:03:04,850
maintainer i think is I think it's crisp

00:03:02,280 --> 00:03:08,310
rather still but it might be a PR on

00:03:04,850 --> 00:03:10,650
whose real name I don't know but this

00:03:08,310 --> 00:03:13,590
talk isn't about task can show because

00:03:10,650 --> 00:03:16,319
you can look that up but it is about the

00:03:13,590 --> 00:03:23,720
stuff i think is essential i'm wearing a

00:03:16,319 --> 00:03:27,180
shirt says be reasonable do it my way so

00:03:23,720 --> 00:03:29,250
so this may not be the best stuff for

00:03:27,180 --> 00:03:31,380
you but they'd spend the stuff that over

00:03:29,250 --> 00:03:34,799
the years I've discovered really is the

00:03:31,380 --> 00:03:38,060
best thing for me to do in my work so I

00:03:34,799 --> 00:03:38,060
can go and watch Dancing with the Stars

00:03:39,470 --> 00:03:45,930
all right these are the modules and

00:03:42,840 --> 00:03:48,720
tools I depend on day to day all the

00:03:45,930 --> 00:03:51,299
time you'll see these repeatedly in my

00:03:48,720 --> 00:03:52,980
work and my modules in my scripts maybe

00:03:51,299 --> 00:03:55,859
not as much of my seat pan modules

00:03:52,980 --> 00:03:58,319
because I tend to try and make them as

00:03:55,859 --> 00:03:59,759
minimal as possible but then again if

00:03:58,319 --> 00:04:01,259
I'm going to do something tricky and

00:03:59,759 --> 00:04:03,510
there's a nice lightweight module that

00:04:01,259 --> 00:04:06,360
will do it for me why not

00:04:03,510 --> 00:04:09,930
so they make my job easier they make my

00:04:06,360 --> 00:04:12,689
code better and using this stuff makes

00:04:09,930 --> 00:04:15,299
my code easier to write and easier for

00:04:12,689 --> 00:04:18,000
others to read especially me six months

00:04:15,299 --> 00:04:21,930
later it also makes the code easier to

00:04:18,000 --> 00:04:23,789
maintain because you know those bugs if

00:04:21,930 --> 00:04:25,139
they do crop up in one of those modules

00:04:23,789 --> 00:04:27,030
that I've used the maintainer is

00:04:25,139 --> 00:04:28,530
probably going to fix them or you can

00:04:27,030 --> 00:04:31,770
poke them to fix the more you can get

00:04:28,530 --> 00:04:34,139
maintain ership it's really not as hard

00:04:31,770 --> 00:04:36,000
as people make it out to be I have

00:04:34,139 --> 00:04:38,280
gotten way too many commitments by

00:04:36,000 --> 00:04:40,860
saying hey I found this bug and here's a

00:04:38,280 --> 00:04:47,160
patch and they're like here you go it's

00:04:40,860 --> 00:04:48,810
yours so but the bottom line is that for

00:04:47,160 --> 00:04:51,270
a lot of these things that these modules

00:04:48,810 --> 00:04:54,930
cover a lot of the lot of the tasks and

00:04:51,270 --> 00:04:57,389
and and functions that these cover

00:04:54,930 --> 00:04:58,919
you're going to have far fewer bugs in

00:04:57,389 --> 00:05:01,680
those than in the code that you write

00:04:58,919 --> 00:05:05,039
yourself because I mean I know there's a

00:05:01,680 --> 00:05:08,430
lot of rock stars in this room but if

00:05:05,039 --> 00:05:10,349
it's code you don't write you know it's

00:05:08,430 --> 00:05:13,830
going to be better I at least for me

00:05:10,349 --> 00:05:18,440
because I'm not that good you know and

00:05:13,830 --> 00:05:18,440
neither are you that's right

00:05:21,050 --> 00:05:26,219
so there are people through a few people

00:05:24,270 --> 00:05:28,680
who are that good and you know some of

00:05:26,219 --> 00:05:30,930
those people took a real long time to

00:05:28,680 --> 00:05:32,520
get that good and some of those some of

00:05:30,930 --> 00:05:35,819
these modules have gone through years of

00:05:32,520 --> 00:05:38,610
iterations just to get better and and

00:05:35,819 --> 00:05:40,770
and work out all those corner cases do

00:05:38,610 --> 00:05:44,099
you really want to do that let that

00:05:40,770 --> 00:05:49,649
other fool do that other very wonderful

00:05:44,099 --> 00:05:51,119
person do it for you so because of the

00:05:49,649 --> 00:05:55,199
constraints of time in previous

00:05:51,119 --> 00:05:57,120
iterations of this talk of course my

00:05:55,199 --> 00:05:59,249
phone won't stay up I got a little

00:05:57,120 --> 00:06:01,499
touchy feely and waxed poetic about

00:05:59,249 --> 00:06:04,620
community and how we're all here to help

00:06:01,499 --> 00:06:06,960
each other out and and we give back but

00:06:04,620 --> 00:06:09,479
through the Sipan it's this this great

00:06:06,960 --> 00:06:12,120
nexus of our culture and our community

00:06:09,479 --> 00:06:14,819
and it's what makes us effective

00:06:12,120 --> 00:06:17,939
programmers and so you know the whole

00:06:14,819 --> 00:06:20,159
point is to use it but I already said

00:06:17,939 --> 00:06:22,800
that there's simply no time there's too

00:06:20,159 --> 00:06:26,939
many modules to cover too many modules

00:06:22,800 --> 00:06:28,879
on the dance floor but all these modules

00:06:26,939 --> 00:06:31,379
i prefer pearl because of this variety

00:06:28,879 --> 00:06:33,419
there's a lot of tools to choose to

00:06:31,379 --> 00:06:35,159
choose from and it's all about getting

00:06:33,419 --> 00:06:38,819
the right tool for the job the right

00:06:35,159 --> 00:06:41,069
tool for you and for your brain and for

00:06:38,819 --> 00:06:42,990
your team and for your environment

00:06:41,069 --> 00:06:44,699
they're they're all things where

00:06:42,990 --> 00:06:47,279
engineers where software engineers were

00:06:44,699 --> 00:06:50,159
programmers resisted mins so we all have

00:06:47,279 --> 00:06:52,469
a lot of different needs and

00:06:50,159 --> 00:06:54,719
environments and we're lucky enough to

00:06:52,469 --> 00:07:00,449
be able to choose the right tool for the

00:06:54,719 --> 00:07:05,339
job no language is perfect but pearl has

00:07:00,449 --> 00:07:07,559
the Sipan and I mean there there are so

00:07:05,339 --> 00:07:10,499
many things in there that are just there

00:07:07,559 --> 00:07:13,889
to improve pearl and to improve the ways

00:07:10,499 --> 00:07:15,209
we use pearl MST once said something and

00:07:13,889 --> 00:07:17,569
this is stuck with me for a few years

00:07:15,209 --> 00:07:23,449
now and I've really taken it to heart

00:07:17,569 --> 00:07:26,309
pearl is my vm Sipan is my language and

00:07:23,449 --> 00:07:28,550
when you think about that you know pearl

00:07:26,309 --> 00:07:31,379
is this wonderful building material and

00:07:28,550 --> 00:07:33,370
and we built all these components and

00:07:31,379 --> 00:07:36,370
things that we can plug together

00:07:33,370 --> 00:07:38,710
and and continue to aggregate up a much

00:07:36,370 --> 00:07:40,900
richer greater language like like

00:07:38,710 --> 00:07:42,880
English over the years sucking in all

00:07:40,900 --> 00:07:45,669
sorts of wonderful words and phrases

00:07:42,880 --> 00:07:51,130
from other languages to become something

00:07:45,669 --> 00:07:52,930
richer and more expressive so let's

00:07:51,130 --> 00:07:55,330
learn about some of these parts of the

00:07:52,930 --> 00:07:58,570
language on the sea pan and there are a

00:07:55,330 --> 00:07:59,889
lot of modules in core here I I'll try

00:07:58,570 --> 00:08:01,660
to point them out if i can remember

00:07:59,889 --> 00:08:06,539
which ones are which but there's a

00:08:01,660 --> 00:08:09,220
module for that by the way so again

00:08:06,539 --> 00:08:12,880
allow me some hubris to tell you the way

00:08:09,220 --> 00:08:19,090
i do it and hopefully over the next 40

00:08:12,880 --> 00:08:20,770
minutes or so right so first off the

00:08:19,090 --> 00:08:22,630
little things the little things that i

00:08:20,770 --> 00:08:25,360
tend to find myself adding to almost

00:08:22,630 --> 00:08:27,669
every script and there they're just

00:08:25,360 --> 00:08:31,870
little things that are just so useful so

00:08:27,669 --> 00:08:36,729
common that you know you just gotta have

00:08:31,870 --> 00:08:38,919
them strict and warnings nobody here is

00:08:36,729 --> 00:08:40,539
blinking which is interesting because i

00:08:38,919 --> 00:08:43,300
figured people would would be a little

00:08:40,539 --> 00:08:45,400
offended that i'd suggest that but there

00:08:43,300 --> 00:08:48,730
are so many people so so much code I've

00:08:45,400 --> 00:08:49,720
seen that doesn't use it and you know if

00:08:48,730 --> 00:08:51,940
you're writing anything of any

00:08:49,720 --> 00:08:54,850
significant size more than you know 50

00:08:51,940 --> 00:08:59,290
line more than 20 lines just use it it

00:08:54,850 --> 00:09:02,830
lets pearl catch a whole class several

00:08:59,290 --> 00:09:06,209
classes of errors that that you can you

00:09:02,830 --> 00:09:10,029
know shoot yourself in the foot with so

00:09:06,209 --> 00:09:11,950
yes english is another module that i

00:09:10,029 --> 00:09:13,660
particularly like and i've gotten some

00:09:11,950 --> 00:09:16,089
feedback some people think it's maybe

00:09:13,660 --> 00:09:17,560
not entirely essential but since i work

00:09:16,089 --> 00:09:18,880
with a lot of systems stuff and

00:09:17,560 --> 00:09:21,070
sometimes i'm reading in files i'm

00:09:18,880 --> 00:09:23,290
changing the file separator it's nice to

00:09:21,070 --> 00:09:25,570
get english versions of pearls

00:09:23,290 --> 00:09:28,380
punctuation vars you know like the

00:09:25,570 --> 00:09:30,970
dollar sign / and dollar sign comma and

00:09:28,380 --> 00:09:32,529
you know even dollar sign at has one

00:09:30,970 --> 00:09:36,459
though most people seem to understand

00:09:32,529 --> 00:09:38,770
what dollar sign at is when you use

00:09:36,459 --> 00:09:41,200
English something too important very

00:09:38,770 --> 00:09:43,959
important to do is to specify no match

00:09:41,200 --> 00:09:46,329
bars because it does import these pre

00:09:43,959 --> 00:09:46,750
match and post-match variables that are

00:09:46,329 --> 00:09:48,700
pop

00:09:46,750 --> 00:09:52,030
after a regular expression matches and

00:09:48,700 --> 00:09:53,800
when you do that what happens is you

00:09:52,030 --> 00:09:55,600
slow down all of your regular

00:09:53,800 --> 00:09:57,220
expressions globally so it's a little

00:09:55,600 --> 00:09:59,470
bit of a gotcha but use English is in

00:09:57,220 --> 00:10:02,440
court it's been there forever and here

00:09:59,470 --> 00:10:05,140
are some of the examples of of the

00:10:02,440 --> 00:10:07,060
translations so you know if you can't

00:10:05,140 --> 00:10:09,520
remember if it's dollar sign back / or

00:10:07,060 --> 00:10:11,890
dollar sign /wel when you use English

00:10:09,520 --> 00:10:15,040
you've got a dollar sign ORS or dollar

00:10:11,890 --> 00:10:16,720
sign output record separator I always

00:10:15,040 --> 00:10:18,670
use dollar sign pit instead of dollar

00:10:16,720 --> 00:10:21,130
sign dollar sign because it just makes

00:10:18,670 --> 00:10:23,050
sense to the other guy who's reviewing

00:10:21,130 --> 00:10:25,450
my code and doesn't know all this stuff

00:10:23,050 --> 00:10:28,450
like I do and I don't always know all

00:10:25,450 --> 00:10:30,850
this stuff myself OS name you know nice

00:10:28,450 --> 00:10:36,520
and decorative it makes the code much

00:10:30,850 --> 00:10:38,860
more pleasant to read so and of course

00:10:36,520 --> 00:10:40,510
you can get the translation from the

00:10:38,860 --> 00:10:43,780
names from pearl doc probe are well you

00:10:40,510 --> 00:10:46,870
also get the actual you know punctuation

00:10:43,780 --> 00:10:49,660
vars another one that I use everywhere

00:10:46,870 --> 00:10:51,910
is auto diet auto die is just pure

00:10:49,660 --> 00:10:55,470
awesome sauce it does what it says on

00:10:51,910 --> 00:10:59,820
the tin okay so you use auto died and

00:10:55,470 --> 00:11:02,230
now when you call open and it fails

00:10:59,820 --> 00:11:03,910
instead of just failing silently because

00:11:02,230 --> 00:11:06,250
you might have forgotten to heaven or

00:11:03,910 --> 00:11:09,070
die or something like that at the end it

00:11:06,250 --> 00:11:11,680
handles the or die for you it will do

00:11:09,070 --> 00:11:15,220
that it you can specify different

00:11:11,680 --> 00:11:17,680
classes of built-ins to override or you

00:11:15,220 --> 00:11:19,720
can tell it to override everything by

00:11:17,680 --> 00:11:23,050
default it overrides almost everything

00:11:19,720 --> 00:11:24,640
except for like system and exact but you

00:11:23,050 --> 00:11:28,200
know things that you might not think are

00:11:24,640 --> 00:11:33,060
going to fail like to do pipe read line

00:11:28,200 --> 00:11:33,060
who here checks every print statement

00:11:33,120 --> 00:11:39,970
yeah I thought so I don't so that's

00:11:38,410 --> 00:11:41,530
going to check it for you so if print

00:11:39,970 --> 00:11:44,050
fails that that might be something

00:11:41,530 --> 00:11:47,320
exceptional something that you want to

00:11:44,050 --> 00:11:48,550
catch and when you use it and this

00:11:47,320 --> 00:11:51,430
happens when you use these things in

00:11:48,550 --> 00:11:54,310
void context when you actually do have

00:11:51,430 --> 00:11:55,930
an or die then it lets your or die take

00:11:54,310 --> 00:11:58,300
care of things for you so it does the

00:11:55,930 --> 00:12:00,220
right thing wonderful wonderful piece of

00:11:58,300 --> 00:12:00,640
software it helps reduce the lines of

00:12:00,220 --> 00:12:03,220
code

00:12:00,640 --> 00:12:05,530
you've got to write it helps reduce the

00:12:03,220 --> 00:12:07,140
the things that you might end up missing

00:12:05,530 --> 00:12:09,940
and it just makes your code clearer

00:12:07,140 --> 00:12:11,530
instead of cluttering it up with with

00:12:09,940 --> 00:12:12,730
error handling stuff that the language

00:12:11,530 --> 00:12:17,950
to now take care of for you

00:12:12,730 --> 00:12:20,860
automatically it's a great win so the

00:12:17,950 --> 00:12:22,900
next thing that I use everywhere and you

00:12:20,860 --> 00:12:25,810
know surprisingly a lot of people don't

00:12:22,900 --> 00:12:27,850
don't you know use it I'll bet most of

00:12:25,810 --> 00:12:31,330
you guys do but data dumper and there's

00:12:27,850 --> 00:12:33,010
a lot of other you know modules that do

00:12:31,330 --> 00:12:37,900
the same thing as data dumper like data

00:12:33,010 --> 00:12:40,960
printer and data dump and it's certainly

00:12:37,900 --> 00:12:42,910
better than then trying to go through an

00:12:40,960 --> 00:12:45,430
entire data structure and print out all

00:12:42,910 --> 00:12:47,140
the individual elements this you pass it

00:12:45,430 --> 00:12:49,120
a reference to a data structure or a

00:12:47,140 --> 00:12:51,220
scalar or whatever and it dumps the

00:12:49,120 --> 00:12:54,760
whole thing recursively pretty printing

00:12:51,220 --> 00:12:59,310
it onto your standard up data dump

00:12:54,760 --> 00:13:01,690
streamer is is one happen to like what

00:12:59,310 --> 00:13:04,710
sorry yes you're right it does return

00:13:01,690 --> 00:13:06,910
the string you have to call print and

00:13:04,710 --> 00:13:11,010
it's great if you have auto die there

00:13:06,910 --> 00:13:13,360
too so anyway a data dump streamer is is

00:13:11,010 --> 00:13:16,810
another one that can handle even more

00:13:13,360 --> 00:13:19,630
like for instance it can give you sort

00:13:16,810 --> 00:13:22,960
of a disassembly of closures so instead

00:13:19,630 --> 00:13:26,110
of data dump er when it's dumping out a

00:13:22,960 --> 00:13:28,120
closure or a subroutine it will just say

00:13:26,110 --> 00:13:30,340
sub dummy data dump streamer can

00:13:28,120 --> 00:13:33,340
actually dub dump the body of the sub

00:13:30,340 --> 00:13:36,220
for the most part so excellent stuff you

00:13:33,340 --> 00:13:39,610
can use these for serialization and you

00:13:36,220 --> 00:13:41,590
can use these for debugging and I have

00:13:39,610 --> 00:13:43,840
it in every script you know I might

00:13:41,590 --> 00:13:47,260
delete it at the end but I use it every

00:13:43,840 --> 00:13:50,310
day so now we've got the the util

00:13:47,260 --> 00:13:52,600
modules and these are used quite often

00:13:50,310 --> 00:13:55,690
but I'm not going to go into too much

00:13:52,600 --> 00:13:57,610
depth again because of time and because

00:13:55,690 --> 00:14:00,940
Steve lombok has a talk tomorrow morning

00:13:57,610 --> 00:14:03,550
on utils are your friends and he's going

00:14:00,940 --> 00:14:06,130
to cover all three of these in great

00:14:03,550 --> 00:14:11,500
detail list util is especially good

00:14:06,130 --> 00:14:14,410
because it uses the map and grep type or

00:14:11,500 --> 00:14:18,639
list you tailor more utils use the

00:14:14,410 --> 00:14:21,519
app and grep type style of functions

00:14:18,639 --> 00:14:27,040
that they export but you get things like

00:14:21,519 --> 00:14:29,079
reduce first any all for checking you

00:14:27,040 --> 00:14:31,810
know membership and a list in an array

00:14:29,079 --> 00:14:34,180
and for doing various processing on

00:14:31,810 --> 00:14:38,170
things you can do processing unless and

00:14:34,180 --> 00:14:40,689
race zipping them together pairwise get

00:14:38,170 --> 00:14:43,750
an iterator for n arrays at a time

00:14:40,689 --> 00:14:45,790
they're very useful so go to Steve

00:14:43,750 --> 00:14:49,779
lombok stalk for more information on the

00:14:45,790 --> 00:14:52,449
util modules parent so what I'm writing

00:14:49,779 --> 00:14:54,339
a module and I need some inheritance I

00:14:52,449 --> 00:14:57,430
use parents instead of is that these

00:14:54,339 --> 00:14:59,920
days why because it means I don't have

00:14:57,430 --> 00:15:02,139
to require the module and then stuff it

00:14:59,920 --> 00:15:06,160
into is ax and I just feel like it's

00:15:02,139 --> 00:15:08,290
it's a bit more decorative so instead of

00:15:06,160 --> 00:15:11,949
is a you use parents some base other

00:15:08,290 --> 00:15:14,470
base you can have multiple ones on there

00:15:11,949 --> 00:15:18,220
to describe what are the parent classes

00:15:14,470 --> 00:15:19,810
of your current package you know I think

00:15:18,220 --> 00:15:22,240
it makes things clear and it makes your

00:15:19,810 --> 00:15:25,199
intentions its declaring your intention

00:15:22,240 --> 00:15:32,139
that these are parents of the class oh

00:15:25,199 --> 00:15:34,240
oh you have a question you know I was

00:15:32,139 --> 00:15:36,670
thinking about that I'm actually not

00:15:34,240 --> 00:15:39,660
sure exactly the the difference I've

00:15:36,670 --> 00:15:39,660
grown to use parent

00:15:45,520 --> 00:15:53,220
weird bugs and certain cases that parent

00:15:47,800 --> 00:15:53,220
gets here safe and effective thing I

00:15:55,560 --> 00:16:02,170
wouldn't be surprised if parent is

00:15:57,700 --> 00:16:04,170
actually listed in tashkent show so

00:16:02,170 --> 00:16:06,250
anyway if you need exception handling

00:16:04,170 --> 00:16:09,190
this probably should have gone in a

00:16:06,250 --> 00:16:12,430
different section of this talk but I do

00:16:09,190 --> 00:16:14,860
use it when I have certain types of

00:16:12,430 --> 00:16:17,500
scripts and I want you know try and

00:16:14,860 --> 00:16:20,260
catch functionality there's also the

00:16:17,500 --> 00:16:22,300
venerable try catch module which has

00:16:20,260 --> 00:16:24,100
some very nice extra functionality but

00:16:22,300 --> 00:16:26,140
it's very very heavy weight you're

00:16:24,100 --> 00:16:29,680
loading a lot of code in and it's got a

00:16:26,140 --> 00:16:32,110
ton of dependencies try tiny is you know

00:16:29,680 --> 00:16:37,270
very minimal and does the job and keeps

00:16:32,110 --> 00:16:40,600
you from having to you know use eval for

00:16:37,270 --> 00:16:42,850
exception handling you have the more

00:16:40,600 --> 00:16:48,130
familiar try catch and finally

00:16:42,850 --> 00:16:49,870
constructs you know like here it's you

00:16:48,130 --> 00:16:51,700
know these are constructs that I think

00:16:49,870 --> 00:16:54,190
again they're declaring your intent

00:16:51,700 --> 00:16:57,220
there's a number of reasons why you can

00:16:54,190 --> 00:16:59,980
do things in an eval and you know if

00:16:57,220 --> 00:17:02,440
it's to catch exceptions I like to

00:16:59,980 --> 00:17:08,589
actually you know have the codes say

00:17:02,440 --> 00:17:13,480
that so and a very fun module called I

00:17:08,589 --> 00:17:16,810
owe all its by Amy and it aggregates a

00:17:13,480 --> 00:17:20,320
whole bunch of different io modules and

00:17:16,810 --> 00:17:23,350
file handling modules into all the set

00:17:20,320 --> 00:17:25,900
of functions and interfaces and objects

00:17:23,350 --> 00:17:29,680
that is just really great for one-off

00:17:25,900 --> 00:17:31,660
scripts and and even larger stuff so it

00:17:29,680 --> 00:17:33,930
may not be essential but it's so much

00:17:31,660 --> 00:17:37,780
fun to use I recommend it to everybody

00:17:33,930 --> 00:17:40,000
so it's just it's really handy um you

00:17:37,780 --> 00:17:43,240
know you can do call I oh and pass it a

00:17:40,000 --> 00:17:45,550
URL and it will actually fetch that URL

00:17:43,240 --> 00:17:47,590
and and then when you read the the

00:17:45,550 --> 00:17:52,150
returned variable it's the contents of

00:17:47,590 --> 00:17:54,100
the of the of the web server returned so

00:17:52,150 --> 00:17:55,720
just all in one little call but you

00:17:54,100 --> 00:17:57,510
could also pass it you know the name of

00:17:55,720 --> 00:18:00,800
a file or

00:17:57,510 --> 00:18:03,960
filehandle or all sorts of neat things

00:18:00,800 --> 00:18:07,110
so here the slightly bigger things the

00:18:03,960 --> 00:18:10,860
the the tools and the larger modules

00:18:07,110 --> 00:18:16,050
that I use pretty much constantly so not

00:18:10,860 --> 00:18:20,370
just modules but tools like apps cen- if

00:18:16,050 --> 00:18:22,470
you either don't want to wait for you

00:18:20,370 --> 00:18:24,810
know for Sipan to start up or don't want

00:18:22,470 --> 00:18:27,930
to configure it apsley pen- is very nice

00:18:24,810 --> 00:18:30,330
because it understands local live and

00:18:27,930 --> 00:18:32,100
can automatically even if you don't have

00:18:30,330 --> 00:18:36,510
local lib installed can automatically

00:18:32,100 --> 00:18:38,070
install files install Sipan modules into

00:18:36,510 --> 00:18:41,880
a directory under your home directory

00:18:38,070 --> 00:18:43,200
and you could use that to install local

00:18:41,880 --> 00:18:46,110
live into your home directory and then

00:18:43,200 --> 00:18:49,890
load local lib from there as well and

00:18:46,110 --> 00:18:53,840
then CPM will will use it so that's

00:18:49,890 --> 00:18:57,240
actually a pretty big deal a pack and

00:18:53,840 --> 00:19:00,660
ack gives you a command line tool called

00:18:57,240 --> 00:19:03,240
a clover case a and act is better than

00:19:00,660 --> 00:19:05,400
grep ack is better than grep because it

00:19:03,240 --> 00:19:08,430
is custom-made for gripping through

00:19:05,400 --> 00:19:10,110
source files it understands or what type

00:19:08,430 --> 00:19:12,600
of source code are in the source files

00:19:10,110 --> 00:19:15,630
it's got all sorts of great options for

00:19:12,600 --> 00:19:17,340
finding things in source code and it's

00:19:15,630 --> 00:19:19,320
just absolutely indispensable when

00:19:17,340 --> 00:19:21,330
you've got you know more than you know

00:19:19,320 --> 00:19:23,700
five files that you're dealing with in a

00:19:21,330 --> 00:19:25,320
source tree you really should just have

00:19:23,700 --> 00:19:28,230
it on your system because you're going

00:19:25,320 --> 00:19:33,060
to need it eventually and finally devel

00:19:28,230 --> 00:19:35,550
nyt prof hands down the best profiler

00:19:33,060 --> 00:19:38,670
for pearl and probably one of the best

00:19:35,550 --> 00:19:44,250
that i've used anywhere it gives you

00:19:38,670 --> 00:19:48,030
when you use dash D nyt proof on the on

00:19:44,250 --> 00:19:49,860
the command line it profiles the code

00:19:48,030 --> 00:19:52,650
right down to the line it can even

00:19:49,860 --> 00:19:55,890
profile inside Eve alves it can profile

00:19:52,650 --> 00:19:58,050
processes that you fork and it gets this

00:19:55,890 --> 00:20:01,890
down to you know millisecond accuracy

00:19:58,050 --> 00:20:04,110
telling exactly what methods are called

00:20:01,890 --> 00:20:08,220
how long they took how many times they

00:20:04,110 --> 00:20:10,020
were called and you run nyt prof to HTML

00:20:08,220 --> 00:20:11,370
and it creates a website that you load

00:20:10,020 --> 00:20:13,260
up in your browser and

00:20:11,370 --> 00:20:16,380
and you can drill down all over your

00:20:13,260 --> 00:20:19,500
codebase to find out exactly where the

00:20:16,380 --> 00:20:21,990
bottlenecks are and you know don't guess

00:20:19,500 --> 00:20:24,330
where the bottlenecks are no and nyt

00:20:21,990 --> 00:20:29,130
prof makes it so ridiculously easy it's

00:20:24,330 --> 00:20:30,930
it's a sin not to use it so another

00:20:29,130 --> 00:20:33,000
thing that's very handy is developed

00:20:30,930 --> 00:20:39,150
cover and you know when you're writing

00:20:33,000 --> 00:20:42,630
your test yeah yes yes and it's on the

00:20:39,150 --> 00:20:45,600
handout here as well but oh the New York

00:20:42,630 --> 00:20:47,520
Times basically the person who built it

00:20:45,600 --> 00:20:50,160
built it while at the New York Times and

00:20:47,520 --> 00:20:57,270
they allowed him to release it and it's

00:20:50,160 --> 00:21:00,240
it's great stuff so yes yes so so stop

00:20:57,270 --> 00:21:05,400
using de Velde prof because you don't

00:21:00,240 --> 00:21:11,730
need it anymore devel cover your writing

00:21:05,400 --> 00:21:15,270
test right right okay all right well if

00:21:11,730 --> 00:21:17,070
you're writing tests devel cover will

00:21:15,270 --> 00:21:19,920
tell you how well your tests cover your

00:21:17,070 --> 00:21:22,380
code it will analyze every branch every

00:21:19,920 --> 00:21:25,110
if block you know it will tell you if

00:21:22,380 --> 00:21:27,630
there are pieces of code that you know

00:21:25,110 --> 00:21:29,250
you're not testing so that you can pass

00:21:27,630 --> 00:21:32,460
a different set of arguments in another

00:21:29,250 --> 00:21:35,190
test to to reach that if block or cause

00:21:32,460 --> 00:21:37,410
an exception to happen so that you can

00:21:35,190 --> 00:21:41,820
then you know test your exception

00:21:37,410 --> 00:21:44,179
handler and and know what parts of your

00:21:41,820 --> 00:21:47,970
code are covered under your tests it's

00:21:44,179 --> 00:21:49,050
it's just it's absolutely great and it's

00:21:47,970 --> 00:21:51,030
something that you can give to your

00:21:49,050 --> 00:21:53,670
manager and say our code base has

00:21:51,030 --> 00:21:55,500
ninety-eight percent test coverage so

00:21:53,670 --> 00:21:56,700
you don't want to tell them a hundred

00:21:55,500 --> 00:22:02,150
percent because then you might not need

00:21:56,700 --> 00:22:05,340
you anymore and speaking of tests oh oh

00:22:02,150 --> 00:22:07,110
speaking of tests their utility that's

00:22:05,340 --> 00:22:08,940
shipped with pearls so this is core this

00:22:07,110 --> 00:22:11,130
is bundled in with pearl it's part of

00:22:08,940 --> 00:22:14,160
all the you know all the tests simple

00:22:11,130 --> 00:22:16,980
stuff and tests more and it's called

00:22:14,160 --> 00:22:20,310
proof yeah I think you can install it

00:22:16,980 --> 00:22:21,780
separately with like app proof but it's

00:22:20,310 --> 00:22:23,820
a command that if you don't know about

00:22:21,780 --> 00:22:25,170
it you write your tests you put them in

00:22:23,820 --> 00:22:28,350
a /t director

00:22:25,170 --> 00:22:30,420
and instead of just executing those you

00:22:28,350 --> 00:22:32,820
run proof and prove will descent through

00:22:30,420 --> 00:22:36,930
the /t directory running those and

00:22:32,820 --> 00:22:38,850
taking the test output and giving you a

00:22:36,930 --> 00:22:41,430
nice little report telling you what

00:22:38,850 --> 00:22:43,800
failed where it failed and and you can

00:22:41,430 --> 00:22:45,720
do things to get very handy output you

00:22:43,800 --> 00:22:48,540
can also use proof because it's using

00:22:45,720 --> 00:22:53,250
tap harness you can use it to plug in

00:22:48,540 --> 00:22:55,110
different type of output so so prove can

00:22:53,250 --> 00:22:58,530
instead of just doing standard tap

00:22:55,110 --> 00:23:02,970
output you can make it do output for

00:22:58,530 --> 00:23:06,050
things like J unit and and so integrate

00:23:02,970 --> 00:23:10,710
it with Jenkins that way for example

00:23:06,050 --> 00:23:12,780
it's great stuff and there are lots and

00:23:10,710 --> 00:23:14,580
lots of things under test and I could I

00:23:12,780 --> 00:23:16,470
could just do a talk of test that would

00:23:14,580 --> 00:23:19,260
take 50 minutes of all the different

00:23:16,470 --> 00:23:22,080
test modules that are so useful to use

00:23:19,260 --> 00:23:24,990
so i would recommend that you spend some

00:23:22,080 --> 00:23:30,120
quality time on Sipan and explore those

00:23:24,990 --> 00:23:31,710
test modules that are there so but you

00:23:30,120 --> 00:23:35,070
do want to start off with test more

00:23:31,710 --> 00:23:38,220
and/or test most tests more comes with

00:23:35,070 --> 00:23:41,070
pearl and test most just builds upon

00:23:38,220 --> 00:23:43,830
test more with all sorts of additional

00:23:41,070 --> 00:23:48,510
functionality including subtests which

00:23:43,830 --> 00:23:50,880
is something that I really like so check

00:23:48,510 --> 00:23:52,770
both of those out and you know you've

00:23:50,880 --> 00:23:56,130
probably seen them used in various

00:23:52,770 --> 00:24:00,240
testing courses all right here's one

00:23:56,130 --> 00:24:02,030
more barrel critic I just happen to like

00:24:00,240 --> 00:24:05,010
this and it's essential to my workflow

00:24:02,030 --> 00:24:07,410
you use pearl critic and it scans

00:24:05,010 --> 00:24:09,120
through your code and you can write a

00:24:07,410 --> 00:24:10,980
configuration file that reflects what

00:24:09,120 --> 00:24:15,360
your coding standards are or just use

00:24:10,980 --> 00:24:18,240
the default ones ok for some reason its

00:24:15,360 --> 00:24:19,410
advancing automatically and you know it

00:24:18,240 --> 00:24:21,900
helps you make sure that your code

00:24:19,410 --> 00:24:24,570
conforms to your quality standards and

00:24:21,900 --> 00:24:26,280
your team should have standards and pro

00:24:24,570 --> 00:24:29,630
critics are a great place to start it

00:24:26,280 --> 00:24:32,640
implements you know a lot of PB PS

00:24:29,630 --> 00:24:34,950
recommendations but you can configure it

00:24:32,640 --> 00:24:39,130
any which way or write your own critic

00:24:34,950 --> 00:24:42,790
modules to to make sure that everything

00:24:39,130 --> 00:24:44,410
does conform to standards you know it's

00:24:42,790 --> 00:24:46,570
it's certainly a lot easier than having

00:24:44,410 --> 00:24:49,420
a person scan everything and trying to

00:24:46,570 --> 00:24:51,010
catch you know those places and of

00:24:49,420 --> 00:24:56,710
course you can tell it to ignore various

00:24:51,010 --> 00:24:58,000
pieces of code pretty easily so I think

00:24:56,710 --> 00:25:03,400
this is the last thing in this category

00:24:58,000 --> 00:25:07,300
but moose mouse move any moose I highly

00:25:03,400 --> 00:25:09,280
recommend them I really do yes moose has

00:25:07,300 --> 00:25:11,680
a lot of dependencies but it's really

00:25:09,280 --> 00:25:13,120
not that bad yes it imposes a startup

00:25:11,680 --> 00:25:17,560
time but when it's the right tool for

00:25:13,120 --> 00:25:20,140
the job it's a damn good tool and you

00:25:17,560 --> 00:25:23,020
know you should read up on moose and go

00:25:20,140 --> 00:25:26,170
to a class on moose you know or

00:25:23,020 --> 00:25:30,040
something mouse and mu are moose

00:25:26,170 --> 00:25:32,830
compatible alternatives mouse is mostly

00:25:30,040 --> 00:25:35,440
compiled but there's a perl module

00:25:32,830 --> 00:25:39,700
either way it's much lighter weight than

00:25:35,440 --> 00:25:42,940
standard moose and mu is also a lighter

00:25:39,700 --> 00:25:48,430
weight moose mu is approximately but not

00:25:42,940 --> 00:25:50,080
quite two thirds of of moose so it's

00:25:48,430 --> 00:25:51,820
striving for as much compatibility as

00:25:50,080 --> 00:25:54,640
possible with a smaller footprint as

00:25:51,820 --> 00:25:55,870
possible and it's pure pearl so if

00:25:54,640 --> 00:25:59,040
that's a requirement if you can't

00:25:55,870 --> 00:26:02,920
compile all the dependencies of moose

00:25:59,040 --> 00:26:05,230
then use mu and finally you can use any

00:26:02,920 --> 00:26:07,690
mousse which if you have one of moose

00:26:05,230 --> 00:26:10,780
mouse or mu loaded will load whichever

00:26:07,690 --> 00:26:12,310
one you happen to have honestly things

00:26:10,780 --> 00:26:15,760
get a little tricky with any moose but

00:26:12,310 --> 00:26:19,090
when you need it it's it's great so stop

00:26:15,760 --> 00:26:21,550
writing your own ooo layers stop doing

00:26:19,090 --> 00:26:23,260
the inconsistency because you remember

00:26:21,550 --> 00:26:24,910
to do one trick in one class and

00:26:23,260 --> 00:26:27,700
remember to do another trick in another

00:26:24,910 --> 00:26:29,920
class stop messing up inheritance

00:26:27,700 --> 00:26:33,490
destructors accessors because i miss

00:26:29,920 --> 00:26:36,360
those things up all the time because i'm

00:26:33,490 --> 00:26:39,190
just focused on what i want to do and

00:26:36,360 --> 00:26:41,020
and then I I mess up the boilerplate

00:26:39,190 --> 00:26:44,770
that I have to run right over and over

00:26:41,020 --> 00:26:48,910
again for classes so let you know let a

00:26:44,770 --> 00:26:51,280
class toolkit like moose or Moo handle

00:26:48,910 --> 00:26:53,560
all that stuff for you

00:26:51,280 --> 00:26:55,570
so files and file systems and I'm going

00:26:53,560 --> 00:27:00,280
to try and speed up here because we're

00:26:55,570 --> 00:27:02,410
down to about 20 minutes file spec you

00:27:00,280 --> 00:27:05,440
could join paths like this with a with a

00:27:02,410 --> 00:27:09,550
slash but you know depending on the

00:27:05,440 --> 00:27:13,330
platform that could be disastrous use

00:27:09,550 --> 00:27:15,820
file spec and use the captor method on

00:27:13,330 --> 00:27:18,160
file spec or you can use file spec

00:27:15,820 --> 00:27:21,250
functions and you and import the cat

00:27:18,160 --> 00:27:23,080
door function and it will automatically

00:27:21,250 --> 00:27:26,230
concatenate those with the proper

00:27:23,080 --> 00:27:29,080
separator for the platform you're on it

00:27:26,230 --> 00:27:31,420
also is declaring what you're intending

00:27:29,080 --> 00:27:33,010
on doing I'm catting you know the

00:27:31,420 --> 00:27:36,310
directory components I'm catting the

00:27:33,010 --> 00:27:39,970
components to a file to a files path and

00:27:36,310 --> 00:27:42,070
it will be correct rather than breaking

00:27:39,970 --> 00:27:44,650
when somebody tries to run your code on

00:27:42,070 --> 00:27:46,480
another platform it has lots of other

00:27:44,650 --> 00:27:48,610
functions and they all describe what

00:27:46,480 --> 00:27:51,520
they do for splitting a path splitting

00:27:48,610 --> 00:27:54,070
directories concatenated path do you

00:27:51,520 --> 00:27:56,350
really want to you know have to do

00:27:54,070 --> 00:28:00,760
absolute past a relative paths on your

00:27:56,350 --> 00:28:04,330
own I know I don't because that can get

00:28:00,760 --> 00:28:06,610
really hairy it even has handy things

00:28:04,330 --> 00:28:11,530
for pointing you at the systems tempter

00:28:06,610 --> 00:28:16,150
and equivalent of delano a dev know so

00:28:11,530 --> 00:28:19,810
if if you don't really like a file spec

00:28:16,150 --> 00:28:21,910
path class does basically just about

00:28:19,810 --> 00:28:24,390
everything that file spec does but it

00:28:21,910 --> 00:28:28,300
does it with some with some magic

00:28:24,390 --> 00:28:30,340
overloading so you call the the der

00:28:28,300 --> 00:28:32,880
function or the file function you get

00:28:30,340 --> 00:28:35,440
back essentially a path class object

00:28:32,880 --> 00:28:37,630
that represents either a directory or a

00:28:35,440 --> 00:28:38,980
file you can stringify them and they do

00:28:37,630 --> 00:28:40,960
what you expect with the correct

00:28:38,980 --> 00:28:42,790
separator and everything or you can call

00:28:40,960 --> 00:28:46,030
methods on them to get sub directories

00:28:42,790 --> 00:28:47,770
or ask for the parent directory or if

00:28:46,030 --> 00:28:50,560
the file as for the directory it's in

00:28:47,770 --> 00:28:52,360
and you know you can change absolute to

00:28:50,560 --> 00:28:55,330
relative and do all sorts of other

00:28:52,360 --> 00:28:57,280
things if you prefer an oo style part of

00:28:55,330 --> 00:29:00,280
the point to this talk is you know not

00:28:57,280 --> 00:29:03,310
everything here is you don't have to do

00:29:00,280 --> 00:29:04,980
it my way find something that fits your

00:29:03,310 --> 00:29:07,710
team your workflow

00:29:04,980 --> 00:29:10,440
and and your way of thinking just like

00:29:07,710 --> 00:29:12,809
file find you know you don't want to

00:29:10,440 --> 00:29:15,120
traverse directories by yourself okay

00:29:12,809 --> 00:29:16,830
again you're not that good there are too

00:29:15,120 --> 00:29:19,770
many corner cases and before i

00:29:16,830 --> 00:29:24,440
discovered file find i tried doing this

00:29:19,770 --> 00:29:31,679
myself and symlinks can do funny things

00:29:24,440 --> 00:29:35,850
yeah especially on solaris too so if you

00:29:31,679 --> 00:29:37,470
don't like a file finds a interface you

00:29:35,850 --> 00:29:39,780
can use file find rules with wraps

00:29:37,470 --> 00:29:42,299
everything up in some you know very nice

00:29:39,780 --> 00:29:45,210
Oh Oh sugar eNOS and all sorts of

00:29:42,299 --> 00:29:46,980
methods for doing extra things like like

00:29:45,210 --> 00:29:48,840
finding files with specific extensions

00:29:46,980 --> 00:29:51,299
instead of having to recognize that

00:29:48,840 --> 00:29:53,520
within a within a subroutine that you

00:29:51,299 --> 00:29:57,900
passed a file find file find rules is

00:29:53,520 --> 00:30:00,059
really great stuff file touch how many

00:29:57,900 --> 00:30:02,220
of you how would who wants to answer a

00:30:00,059 --> 00:30:05,160
question on how would you go about

00:30:02,220 --> 00:30:07,980
touching a file without file touch and

00:30:05,160 --> 00:30:11,460
in Perl your time how would you do it on

00:30:07,980 --> 00:30:15,510
windows how would you do it on Mac yeah

00:30:11,460 --> 00:30:19,200
well file touch file touch will do that

00:30:15,510 --> 00:30:22,679
across your platforms okay and again you

00:30:19,200 --> 00:30:25,290
know you get a touch you know function

00:30:22,679 --> 00:30:26,429
exported that you can then use to touch

00:30:25,290 --> 00:30:29,390
the file and there are a number of

00:30:26,429 --> 00:30:33,320
options you can pass it for you no

00:30:29,390 --> 00:30:35,640
touching you know various things

00:30:33,320 --> 00:30:37,590
file-based name actually that

00:30:35,640 --> 00:30:41,490
functionality I think is part of path

00:30:37,590 --> 00:30:43,770
class but this is core and so it allows

00:30:41,490 --> 00:30:47,160
you to get the the actual file portion

00:30:43,770 --> 00:30:48,750
of a path and actually the directory

00:30:47,160 --> 00:30:50,790
portion of the path so depending on

00:30:48,750 --> 00:30:53,250
whether using base name and dirname it's

00:30:50,790 --> 00:30:54,929
just like the system commands so again

00:30:53,250 --> 00:30:58,830
don't parse that path with regular

00:30:54,929 --> 00:31:02,070
expressions file slurp is absolutely

00:30:58,830 --> 00:31:04,770
indispensable even though we all know we

00:31:02,070 --> 00:31:07,530
all know how easy it is to write a

00:31:04,770 --> 00:31:10,049
one-line slurp ok so what file slurp

00:31:07,530 --> 00:31:13,770
does is really freaking simple at least

00:31:10,049 --> 00:31:16,200
it's basic you know thing all right it's

00:31:13,770 --> 00:31:18,720
really simple does everybody in this

00:31:16,200 --> 00:31:21,179
room understand that statement exactly

00:31:18,720 --> 00:31:26,340
what it does not what its result but

00:31:21,179 --> 00:31:29,370
exactly how it works really you guys are

00:31:26,340 --> 00:31:35,490
good I underestimated you this is a 101

00:31:29,370 --> 00:31:38,730
talk whoops so um but you know seriously

00:31:35,490 --> 00:31:40,919
what's clear is that or just refile file

00:31:38,730 --> 00:31:43,919
text and there are a number of other

00:31:40,919 --> 00:31:45,960
subroutines like you know edit file

00:31:43,919 --> 00:31:48,900
lines where you can pass it a subroutine

00:31:45,960 --> 00:31:52,320
to edit individual lines of the file and

00:31:48,900 --> 00:31:55,830
so filter a file in place essentially it

00:31:52,320 --> 00:31:58,799
can handle auto chomping right re yep

00:31:55,830 --> 00:32:02,700
does auto champing it now does UTF so

00:31:58,799 --> 00:32:05,010
that is a new feature and it's just you

00:32:02,700 --> 00:32:07,020
know it's indispensable I I almost never

00:32:05,010 --> 00:32:10,380
write a script without it if I'm loading

00:32:07,020 --> 00:32:11,460
the file so file read backwards is one

00:32:10,380 --> 00:32:13,919
of those things that when you need it

00:32:11,460 --> 00:32:16,860
you need it and you don't want to write

00:32:13,919 --> 00:32:19,710
it yourself because I had a co-worker

00:32:16,860 --> 00:32:22,200
with an IQ of about 30 40 points higher

00:32:19,710 --> 00:32:26,039
than mine who started to write this and

00:32:22,200 --> 00:32:28,590
could not get it to work and and finally

00:32:26,039 --> 00:32:32,280
he says can you take a look at my code

00:32:28,590 --> 00:32:35,010
and I'm looking at it and are you trying

00:32:32,280 --> 00:32:38,190
to read that log file backwards he goes

00:32:35,010 --> 00:32:41,220
yeah yeah so I mean I just can't figure

00:32:38,190 --> 00:32:43,020
out why it's not working properly I was

00:32:41,220 --> 00:32:45,659
like well just use file read backwards

00:32:43,020 --> 00:32:49,260
that's what I'm trying to do yeah file

00:32:45,659 --> 00:32:50,880
read backwards go look it up it was it

00:32:49,260 --> 00:32:54,840
was like you know I an Abbott and

00:32:50,880 --> 00:32:56,159
Costello moments there so he didn't

00:32:54,840 --> 00:32:59,150
understand that I was telling him about

00:32:56,159 --> 00:33:01,500
a module not what he was supposed to do

00:32:59,150 --> 00:33:06,000
must be all those all that time with

00:33:01,500 --> 00:33:07,289
Lisp we spent so so you know use it when

00:33:06,000 --> 00:33:09,630
you need it because you don't want to do

00:33:07,289 --> 00:33:11,789
it yourself and the author you know

00:33:09,630 --> 00:33:13,409
spend a lot of time making sure that it

00:33:11,789 --> 00:33:18,929
got right and he knows his stuff he's

00:33:13,409 --> 00:33:20,280
sitting right over there file temp let

00:33:18,929 --> 00:33:22,740
this module handle temp files and

00:33:20,280 --> 00:33:25,169
directories for you and and stop just

00:33:22,740 --> 00:33:28,350
dropping them wherever you think a temp

00:33:25,169 --> 00:33:30,690
directory should be you know that may or

00:33:28,350 --> 00:33:32,310
may not be able to write to there could

00:33:30,690 --> 00:33:34,350
be several places to put temp

00:33:32,310 --> 00:33:38,460
sales and there there are several

00:33:34,350 --> 00:33:40,410
factors that us that most programs you

00:33:38,460 --> 00:33:43,410
know work in to determine where to drop

00:33:40,410 --> 00:33:46,470
temporary files like the default system

00:33:43,410 --> 00:33:48,360
location and if there may be multiple

00:33:46,470 --> 00:33:50,220
locations like on the mac and then of

00:33:48,360 --> 00:33:51,780
course environment variables and what is

00:33:50,220 --> 00:33:54,390
that variable on the platform that you

00:33:51,780 --> 00:33:57,540
happen to be on I don't know it could be

00:33:54,390 --> 00:34:00,060
tempter it could be temp underscore dirt

00:33:57,540 --> 00:34:03,330
it could be just TMP depending on the

00:34:00,060 --> 00:34:05,420
platform in the OS so do you ever need

00:34:03,330 --> 00:34:07,800
to find the home directory of a user

00:34:05,420 --> 00:34:09,660
that can actually be torturous because

00:34:07,800 --> 00:34:12,300
it's not always under / home especially

00:34:09,660 --> 00:34:16,140
not on Windows and not even on a lot of

00:34:12,300 --> 00:34:19,350
UNIX systems okay it's it's a tricky

00:34:16,140 --> 00:34:23,400
problem and Adam Kennedy has solved it

00:34:19,350 --> 00:34:28,380
for you file which okay stop shelling

00:34:23,400 --> 00:34:30,800
out to which stop it if I ever see

00:34:28,380 --> 00:34:32,940
another group that files out to which

00:34:30,800 --> 00:34:34,860
sometimes it's not even where you

00:34:32,940 --> 00:34:37,320
sometimes which isn't even installed

00:34:34,860 --> 00:34:39,810
where you expect it to be okay file

00:34:37,320 --> 00:34:41,910
which will export a which function for

00:34:39,810 --> 00:34:44,010
you that just does the job and it does

00:34:41,910 --> 00:34:45,720
it right you do it in scale or context

00:34:44,010 --> 00:34:50,190
and you get the first thing like which

00:34:45,720 --> 00:34:52,770
would and you do it in list context and

00:34:50,190 --> 00:34:55,320
you get all the things it finds like

00:34:52,770 --> 00:34:59,420
which dash a if your platform supports

00:34:55,320 --> 00:35:02,850
which a which they don't all file copy

00:34:59,420 --> 00:35:05,760
okay don't yell out the system to write

00:35:02,850 --> 00:35:08,130
your own copy routine just use file copy

00:35:05,760 --> 00:35:10,650
it gives you copy and move subroutines

00:35:08,130 --> 00:35:14,000
that just do the right thing and it can

00:35:10,650 --> 00:35:19,380
move a file between file systems which

00:35:14,000 --> 00:35:24,060
which like if you use a rename on a file

00:35:19,380 --> 00:35:28,110
in built in from Pearl can't do so if

00:35:24,060 --> 00:35:31,140
i'll copy is rather nice if you need to

00:35:28,110 --> 00:35:33,180
find out what a file is file live magic

00:35:31,140 --> 00:35:35,100
and file mime info I've gone through a

00:35:33,180 --> 00:35:37,200
bunch of those I needed to do some you

00:35:35,100 --> 00:35:40,230
know some detection of files and those

00:35:37,200 --> 00:35:42,900
are the best that I could find lib magic

00:35:40,230 --> 00:35:45,150
requires your system has lib magic

00:35:42,900 --> 00:35:46,240
installed in external library but file

00:35:45,150 --> 00:35:48,760
my info

00:35:46,240 --> 00:35:51,460
is pure pearl and they both work pretty

00:35:48,760 --> 00:35:53,500
well so just stop trying to do it

00:35:51,460 --> 00:35:55,090
yourself based on the file extension or

00:35:53,500 --> 00:35:57,730
based on the first couple characters in

00:35:55,090 --> 00:36:02,050
the file or regular expression because

00:35:57,730 --> 00:36:04,350
it's fragile so if one of them doesn't

00:36:02,050 --> 00:36:06,670
work for you try the other file path

00:36:04,350 --> 00:36:10,720
recursively create and remove

00:36:06,670 --> 00:36:12,940
directories so oh I thought I had a

00:36:10,720 --> 00:36:15,070
slide in there that had the added some

00:36:12,940 --> 00:36:18,280
code well I don't I don't have time okay

00:36:15,070 --> 00:36:21,300
and file stat how many people here hate

00:36:18,280 --> 00:36:24,910
the way Stat works the stat built-in

00:36:21,300 --> 00:36:27,520
yeah it returns what 12 13 different

00:36:24,910 --> 00:36:30,270
elements do you know which element is

00:36:27,520 --> 00:36:35,200
which without looking at the man page

00:36:30,270 --> 00:36:36,730
you know that's that's pretty grody oh I

00:36:35,200 --> 00:36:40,900
guess you could get them one at a time

00:36:36,730 --> 00:36:42,790
like that that's a way to do it you know

00:36:40,900 --> 00:36:44,590
the original version of this talk was

00:36:42,790 --> 00:36:46,060
full of slides like this and my

00:36:44,590 --> 00:36:50,859
rehearsals were taking me like two and a

00:36:46,060 --> 00:36:55,150
half hours try this instead it makes

00:36:50,859 --> 00:36:58,600
stat return an overloaded object so in

00:36:55,150 --> 00:37:00,400
scalar context and and so you can call

00:36:58,600 --> 00:37:03,250
these methods to get what you want and

00:37:00,400 --> 00:37:06,880
it again it just makes it you know clear

00:37:03,250 --> 00:37:09,070
and decorative I'm a big big proponent

00:37:06,880 --> 00:37:11,790
in having your code actually say in

00:37:09,070 --> 00:37:16,450
English what it is you intend on doing

00:37:11,790 --> 00:37:19,900
so wrangling data structures and types

00:37:16,450 --> 00:37:21,960
we're down to ten minutes here I go ty

00:37:19,900 --> 00:37:24,280
IX hashed I store to ordered hash

00:37:21,960 --> 00:37:27,280
building your own implementation of

00:37:24,280 --> 00:37:29,350
these sucks so just use this I

00:37:27,280 --> 00:37:32,170
personally perforce stored order hash

00:37:29,350 --> 00:37:35,320
but I IX hash is the is the granddaddy

00:37:32,170 --> 00:37:38,020
there and so if you need a hash whose

00:37:35,320 --> 00:37:40,930
elements come out in in in some

00:37:38,020 --> 00:37:43,480
particular order you can create it this

00:37:40,930 --> 00:37:44,770
exports the ordered function and pass it

00:37:43,480 --> 00:37:47,109
an array and now you've actually got a

00:37:44,770 --> 00:37:50,320
hash and it behaves like a hash it's

00:37:47,109 --> 00:37:51,940
it's tied and so you can iterate over it

00:37:50,320 --> 00:37:55,450
in order there are times when you need

00:37:51,940 --> 00:37:57,940
that and you know it's is very handy to

00:37:55,450 --> 00:38:00,069
reach for you got to merge hashes

00:37:57,940 --> 00:38:02,709
recursively do you really want to walk

00:38:00,069 --> 00:38:04,059
down through all the data structures do

00:38:02,709 --> 00:38:06,130
you need to do depth-first or

00:38:04,059 --> 00:38:07,930
breadth-first in your search are you

00:38:06,130 --> 00:38:10,959
going to write those routines every time

00:38:07,930 --> 00:38:13,239
no ok just use it to recursively merge

00:38:10,959 --> 00:38:14,829
hash structures it does a great job it

00:38:13,239 --> 00:38:17,259
gives all sorts of options for how

00:38:14,829 --> 00:38:19,059
you're going to do it and it's it's

00:38:17,259 --> 00:38:23,199
pretty darn clean it's probably as fast

00:38:19,059 --> 00:38:24,849
as anything you or I would write so I

00:38:23,199 --> 00:38:27,999
stole this right from the other band

00:38:24,849 --> 00:38:30,519
page so you've got this hash with nested

00:38:27,999 --> 00:38:32,499
hashes and you got this one you merge

00:38:30,519 --> 00:38:34,719
them and there you go it does the right

00:38:32,499 --> 00:38:40,239
thing giving does it give be the

00:38:34,719 --> 00:38:45,759
precedents no okay it gives our a equals

00:38:40,239 --> 00:38:48,339
1 i'm getting better to do a equals 100

00:38:45,759 --> 00:38:50,229
ok B gets the precedence yeah so the

00:38:48,339 --> 00:38:53,019
last one you can merge more than two and

00:38:50,229 --> 00:38:56,769
I believe basically they get higher

00:38:53,019 --> 00:39:00,190
proud students as you go out so let's

00:38:56,769 --> 00:39:02,109
see but again you know it makes you

00:39:00,190 --> 00:39:03,910
declare that you're dealing with

00:39:02,109 --> 00:39:05,469
something that's ordered and it's going

00:39:03,910 --> 00:39:08,469
to do it correctly and it does it nice

00:39:05,469 --> 00:39:11,349
and simply params you till it's ugly

00:39:08,469 --> 00:39:12,849
ugly ugly but if you need to check if

00:39:11,349 --> 00:39:15,369
something is a particular instance of a

00:39:12,849 --> 00:39:17,829
class if you need to check if if an

00:39:15,369 --> 00:39:20,769
argument passed in is a scalar or if

00:39:17,829 --> 00:39:23,079
it's you don't care if it's actually a

00:39:20,769 --> 00:39:25,209
hash ref you just care that it behaves

00:39:23,079 --> 00:39:28,420
like a hash because it could be tied or

00:39:25,209 --> 00:39:31,829
overloaded ok this encapsulate Saul the

00:39:28,420 --> 00:39:35,019
magic to do that sort of thing so

00:39:31,829 --> 00:39:37,539
they're ugly but it does it right and

00:39:35,019 --> 00:39:39,759
again it's you know it's pretty much

00:39:37,539 --> 00:39:44,619
declaring I want to make sure that this

00:39:39,759 --> 00:39:47,019
is hash like so and the author is very

00:39:44,619 --> 00:39:49,359
focused on doing it correctly params

00:39:47,019 --> 00:39:51,339
validate it is like the de facto

00:39:49,359 --> 00:39:54,209
standard and parameter validation I'm

00:39:51,339 --> 00:39:57,569
going to start going a little faster and

00:39:54,209 --> 00:40:01,449
you know whoops algorithm combinatorics

00:39:57,569 --> 00:40:06,579
for getting permutations and iterations

00:40:01,449 --> 00:40:08,499
and derangements of data you know just

00:40:06,579 --> 00:40:11,140
don't do it on your own you're going to

00:40:08,499 --> 00:40:13,450
get it wrong it will be slow and it's

00:40:11,140 --> 00:40:16,240
just going to suck for everybody just

00:40:13,450 --> 00:40:19,480
this module it i believe it's written in

00:40:16,240 --> 00:40:23,500
excess and it's fast and it does this

00:40:19,480 --> 00:40:26,050
stuff correctly so this is another

00:40:23,500 --> 00:40:29,200
little little pitch for something I

00:40:26,050 --> 00:40:31,150
wrote so set cross product is has been

00:40:29,200 --> 00:40:34,030
around for getting the cross product

00:40:31,150 --> 00:40:35,560
between sets and I wrote something

00:40:34,030 --> 00:40:37,390
called set cartesian product lazy

00:40:35,560 --> 00:40:38,800
because somebody insisted to me that

00:40:37,390 --> 00:40:40,690
it's not a cross product it's a

00:40:38,800 --> 00:40:42,790
cartesian product they both do the same

00:40:40,690 --> 00:40:44,079
thing you could try them out but when

00:40:42,790 --> 00:40:45,820
you need to get a cross product rather

00:40:44,079 --> 00:40:48,820
than writing nested for loops on your

00:40:45,820 --> 00:40:51,190
own or trying to do the calculations of

00:40:48,820 --> 00:40:55,770
what tuples you're going to get next on

00:40:51,190 --> 00:40:58,950
your own just use a module okay so

00:40:55,770 --> 00:41:01,900
comparing data structures you can use

00:40:58,950 --> 00:41:03,609
long that to data compared to

00:41:01,900 --> 00:41:06,250
recursively incorrectly compare data

00:41:03,609 --> 00:41:08,230
structures you can use test deep no test

00:41:06,250 --> 00:41:11,050
which has more functionality than data

00:41:08,230 --> 00:41:12,730
compare all right and do you guys mind

00:41:11,050 --> 00:41:17,230
if I skip over dealing with dates and

00:41:12,730 --> 00:41:20,230
times good so basically use datetime

00:41:17,230 --> 00:41:23,410
used a time and its friends use these to

00:41:20,230 --> 00:41:28,359
get information and to parse it and turn

00:41:23,410 --> 00:41:30,069
it into a unix timestamp okay you you

00:41:28,359 --> 00:41:32,710
can use timepiece it's not essential

00:41:30,069 --> 00:41:34,900
okay datetime tiny if date time is too

00:41:32,710 --> 00:41:37,810
heavy for you it's like you know ninety

00:41:34,900 --> 00:41:40,569
percent of date time and you can inflate

00:41:37,810 --> 00:41:44,140
datetime tiny objects into date time

00:41:40,569 --> 00:41:49,390
when you finally need it so let's see

00:41:44,140 --> 00:41:55,540
data extract and extract surprise I so

00:41:49,390 --> 00:41:58,510
any so again shameless self-promotion I

00:41:55,540 --> 00:42:00,460
happen to write that but it's come in

00:41:58,510 --> 00:42:05,800
handy and I've had people tell me it has

00:42:00,460 --> 00:42:08,470
so reading and writing file formats yeah

00:42:05,800 --> 00:42:11,500
mo ne for when you don't know which ya

00:42:08,470 --> 00:42:14,380
moul implementation to use just use yo

00:42:11,500 --> 00:42:15,400
milani it's simple and it just picks you

00:42:14,380 --> 00:42:18,040
know whatever the best y ml

00:42:15,400 --> 00:42:20,230
implementation is on your system and

00:42:18,040 --> 00:42:21,940
it's got a pretty simple interface I

00:42:20,230 --> 00:42:24,280
believe it also has a nolo interface but

00:42:21,940 --> 00:42:25,960
this is what I usually use is I import

00:42:24,280 --> 00:42:28,300
dump and load and it

00:42:25,960 --> 00:42:34,599
uh you know it does what it says on the

00:42:28,300 --> 00:42:36,250
tin so Jason who here has tried to

00:42:34,599 --> 00:42:40,200
extract information from json with

00:42:36,250 --> 00:42:42,849
regular expressions come on I knew it

00:42:40,200 --> 00:42:44,680
okay it's only one of you when you were

00:42:42,849 --> 00:42:50,410
very brave so I'm not going to pick on

00:42:44,680 --> 00:42:53,260
you much this is so much easier to JSON

00:42:50,410 --> 00:42:55,240
from json again it's declaring what it

00:42:53,260 --> 00:42:57,310
is that you're doing instead of writing

00:42:55,240 --> 00:43:01,810
you know gobbledygook that does it

00:42:57,310 --> 00:43:04,030
instead text CSV okay there will be more

00:43:01,810 --> 00:43:06,730
hands who here has tried to parse a CSV

00:43:04,030 --> 00:43:14,920
file with split and regular expressions

00:43:06,730 --> 00:43:17,109
I hate you all I I have in the past but

00:43:14,920 --> 00:43:19,359
I quickly discovered text CSV because I

00:43:17,109 --> 00:43:21,609
got a lot of really really freaking

00:43:19,359 --> 00:43:24,280
crazy complicated CSV files and it

00:43:21,609 --> 00:43:26,260
handles it with aplomb and it it goes to

00:43:24,280 --> 00:43:31,990
the back end the best back end that you

00:43:26,260 --> 00:43:34,030
might have so CSV excess or CSV PP pure

00:43:31,990 --> 00:43:35,710
pure pearl or excess version so to pick

00:43:34,030 --> 00:43:38,260
the fastest one you have on your system

00:43:35,710 --> 00:43:40,150
and it just does it right its interface

00:43:38,260 --> 00:43:43,300
is a little complicated but it's oo ye

00:43:40,150 --> 00:43:45,369
and you know it just does the job right

00:43:43,300 --> 00:43:47,710
and it's a whole lot simpler and better

00:43:45,369 --> 00:43:49,300
than doing it on your own there's a lot

00:43:47,710 --> 00:43:52,990
more functionality it doesn't have to be

00:43:49,300 --> 00:43:55,660
comma separated for example come Barry

00:43:52,990 --> 00:43:57,609
you want to use early all the time he's

00:43:55,660 --> 00:44:01,119
sitting right in front here and he wants

00:43:57,609 --> 00:44:04,359
you to use him huh but if you're dealing

00:44:01,119 --> 00:44:06,460
with you our eyes URLs just use these

00:44:04,359 --> 00:44:08,560
again don't try and split them up with

00:44:06,460 --> 00:44:10,300
regular expressions it's just getting

00:44:08,560 --> 00:44:14,770
worse now that we have unicode you are

00:44:10,300 --> 00:44:16,810
eyes hanging around ok 414 so we're

00:44:14,770 --> 00:44:18,970
running up against spreadsheet read got

00:44:16,810 --> 00:44:21,220
to read spreadsheets this reads all

00:44:18,970 --> 00:44:23,920
sorts of spreadsheets it reads tabular

00:44:21,220 --> 00:44:27,760
csv it reads excel spreadsheets it reads

00:44:23,920 --> 00:44:29,650
some spreadsheets from open office and

00:44:27,760 --> 00:44:31,890
I'm sure there's a few others out there

00:44:29,650 --> 00:44:34,330
and prevent prevents a nice little oo

00:44:31,890 --> 00:44:38,200
model and interface to work with

00:44:34,330 --> 00:44:39,610
spreadsheets XML simple I'm pretty

00:44:38,200 --> 00:44:42,070
certain it's in task can show

00:44:39,610 --> 00:44:44,620
oh okay and for simply reading in and

00:44:42,070 --> 00:44:46,090
parsing some XML just use it and that

00:44:44,620 --> 00:44:48,130
way you'll get you know the actual

00:44:46,090 --> 00:44:50,050
proper data structure from it it's got a

00:44:48,130 --> 00:44:52,720
lot of butts buttons and knobs but it

00:44:50,050 --> 00:44:54,790
really is very simple for the non simple

00:44:52,720 --> 00:44:56,440
stuff look at task can show there's a

00:44:54,790 --> 00:45:00,130
bunch of XML modules in there and you

00:44:56,440 --> 00:45:04,960
want to pick the one that fits your fits

00:45:00,130 --> 00:45:06,460
your stuff okay so i think i'll try and

00:45:04,960 --> 00:45:09,100
skip over the potpourri unless something

00:45:06,460 --> 00:45:12,840
catches my eye cuz we're running down I

00:45:09,100 --> 00:45:17,800
think we got anybody have a time check

00:45:12,840 --> 00:45:20,470
for 15 is when it ends okay five minutes

00:45:17,800 --> 00:45:23,500
beautiful need to reload module at

00:45:20,470 --> 00:45:25,810
runtime and so you've got require or

00:45:23,500 --> 00:45:28,890
you've got like an eval you know a

00:45:25,810 --> 00:45:31,240
string eval that you're trying to do and

00:45:28,890 --> 00:45:33,970
and and there are all sorts of pitfalls

00:45:31,240 --> 00:45:36,010
just don't bother with it I've pretty

00:45:33,970 --> 00:45:38,590
much forgotten how to do it the old way

00:45:36,010 --> 00:45:41,140
because I now use module runtime safely

00:45:38,590 --> 00:45:42,850
improperly load modules at runtime and

00:45:41,140 --> 00:45:47,920
be able to check if something went wrong

00:45:42,850 --> 00:45:51,490
as well so I Oh interactive when you

00:45:47,920 --> 00:45:53,830
absolutely got to know if that if that

00:45:51,490 --> 00:45:58,620
file handle is is an interactive

00:45:53,830 --> 00:46:01,780
terminal this is the one to use okay

00:45:58,620 --> 00:46:05,170
because I doubt you know I doubt very

00:46:01,780 --> 00:46:06,960
few people I I'll bet a very few people

00:46:05,170 --> 00:46:10,560
here know how to actually do it right

00:46:06,960 --> 00:46:13,360
you know I know I don't and I've tried

00:46:10,560 --> 00:46:16,180
IPC run makes it really easy to spawn

00:46:13,360 --> 00:46:19,270
off additional processes and run them

00:46:16,180 --> 00:46:23,380
and pipe them together it's really very

00:46:19,270 --> 00:46:26,830
nice and so if you need to run commands

00:46:23,380 --> 00:46:29,380
and pipe I you know the contents of a

00:46:26,830 --> 00:46:31,360
scalar into it or pipe the output into a

00:46:29,380 --> 00:46:33,190
scalar or pipe the output into another

00:46:31,360 --> 00:46:35,470
process into another process and then

00:46:33,190 --> 00:46:38,650
into a subroutine and then into a scalar

00:46:35,470 --> 00:46:41,920
IPC run is just kind of great and it's

00:46:38,650 --> 00:46:44,830
it's very well vetted you know it is the

00:46:41,920 --> 00:46:46,150
granddaddy yes so capture tiny for when

00:46:44,830 --> 00:46:48,460
you got to capture the standard out in

00:46:46,150 --> 00:46:49,900
standard error of any code capture tiny

00:46:48,460 --> 00:46:52,420
that's the one you want there's a bunch

00:46:49,900 --> 00:46:53,349
of a bunch of them out there but Dave

00:46:52,420 --> 00:46:54,759
golden

00:46:53,349 --> 00:46:56,739
wrote this and he's worked really hard

00:46:54,759 --> 00:47:03,970
on making it work in just about every

00:46:56,739 --> 00:47:05,529
case you know and it just works so I'm

00:47:03,970 --> 00:47:08,499
going to skip over net server and net

00:47:05,529 --> 00:47:11,799
demon because writing demons properly is

00:47:08,499 --> 00:47:13,479
hard and it looks like you know people

00:47:11,799 --> 00:47:16,930
are a little bit more advanced here and

00:47:13,479 --> 00:47:18,039
I thought use this for quoting strings

00:47:16,930 --> 00:47:20,400
that you're going to pass the shell if

00:47:18,039 --> 00:47:23,249
you must pass to the shell use this

00:47:20,400 --> 00:47:25,960
there are so many times where I've fixed

00:47:23,249 --> 00:47:28,749
nasty little you know she'll injection

00:47:25,960 --> 00:47:31,450
bugs just by using this so I really

00:47:28,749 --> 00:47:34,420
appreciate it you know I put it right

00:47:31,450 --> 00:47:36,489
there so you think you can do it with

00:47:34,420 --> 00:47:39,339
the regex and and escaping all the

00:47:36,489 --> 00:47:43,059
necessary things but you're going to do

00:47:39,339 --> 00:47:45,009
it wrong just use shell quote and if

00:47:43,059 --> 00:47:47,499
she'll quote doesn't think it can

00:47:45,009 --> 00:47:50,470
properly escape everything it throws an

00:47:47,499 --> 00:47:52,269
exception much safer there is a shell

00:47:50,470 --> 00:47:54,400
quote there is another thing you can

00:47:52,269 --> 00:47:58,719
export that won't throw an exception but

00:47:54,400 --> 00:48:02,079
I don't use it so I pc system simple use

00:47:58,719 --> 00:48:04,920
it in tandem with Auto died and it makes

00:48:02,079 --> 00:48:08,170
using system and output capturing safer

00:48:04,920 --> 00:48:11,529
because you can choose to not go to the

00:48:08,170 --> 00:48:13,599
shell by using system X and the program

00:48:11,529 --> 00:48:16,809
the commands succeed or die you don't

00:48:13,599 --> 00:48:19,299
have to check that they returned 0 which

00:48:16,809 --> 00:48:21,269
is you know a little unintuitive with

00:48:19,299 --> 00:48:24,489
the rest of the programming language

00:48:21,269 --> 00:48:27,700
there's also capturing so when you want

00:48:24,489 --> 00:48:31,539
to use back tix you can use capture or

00:48:27,700 --> 00:48:33,190
capture X to avoid shelling to avoid

00:48:31,539 --> 00:48:36,549
going to the shell which I don't think

00:48:33,190 --> 00:48:39,479
you can do that with back ticks and so

00:48:36,549 --> 00:48:41,920
the conclusion can wrap this up okay

00:48:39,479 --> 00:48:44,979
don't take my word for this stuff I've

00:48:41,920 --> 00:48:46,269
just spit out a whole lot of module sell

00:48:44,979 --> 00:48:48,640
out at you and a whole lot of

00:48:46,269 --> 00:48:50,979
information you got to explore the sea

00:48:48,640 --> 00:48:53,170
pen for yourself okay if you're just a

00:48:50,979 --> 00:48:55,119
beginner or even if you're kind of a

00:48:53,170 --> 00:48:58,359
kind of experience but looking where to

00:48:55,119 --> 00:49:00,670
go next the sea pan is where you know

00:48:58,359 --> 00:49:03,369
the richer horizons are create your own

00:49:00,670 --> 00:49:05,079
toolkit try to establish a toolkit for

00:49:03,369 --> 00:49:07,060
the team you're working with or just for

00:49:05,079 --> 00:49:09,430
yourself and take it around and learn

00:49:07,060 --> 00:49:10,840
and become fluent with it because it's

00:49:09,430 --> 00:49:12,580
going to make you a better programmer

00:49:10,840 --> 00:49:14,530
your code will be clearer more

00:49:12,580 --> 00:49:17,050
consistent it's going to have fewer bugs

00:49:14,530 --> 00:49:21,250
and you know these things all install

00:49:17,050 --> 00:49:22,960
beautifully with a few you know with

00:49:21,250 --> 00:49:24,910
that note of like the file lib magic

00:49:22,960 --> 00:49:27,340
doesn't always install very well I

00:49:24,910 --> 00:49:29,110
excluded you no try catch because it

00:49:27,340 --> 00:49:32,650
just doesn't install cleanly everywhere

00:49:29,110 --> 00:49:35,880
for example you know when building your

00:49:32,650 --> 00:49:38,730
toolkit be consistent be thoughtful and

00:49:35,880 --> 00:49:41,680
what I really want everybody to do is

00:49:38,730 --> 00:49:45,090
share what you learn share what you

00:49:41,680 --> 00:49:47,680
think are the best and most essential

00:49:45,090 --> 00:49:50,290
extensions and modules for Pearl for the

00:49:47,680 --> 00:49:52,510
type of work that you do and you know

00:49:50,290 --> 00:49:54,880
make a bundle put it put that bundle up

00:49:52,510 --> 00:49:57,640
on the Sipan make a task distribution

00:49:54,880 --> 00:50:00,280
and put that up there okay contribute

00:49:57,640 --> 00:50:01,930
help the language continue to grow I

00:50:00,280 --> 00:50:04,900
know there's a lot of things that I

00:50:01,930 --> 00:50:07,270
skipped over and I wasn't able to get

00:50:04,900 --> 00:50:09,460
into as much depth as I wanted to but

00:50:07,270 --> 00:50:11,020
I'll be happy to talk to anybody in the

00:50:09,460 --> 00:50:15,550
hallway for the rest of this conference

00:50:11,020 --> 00:50:19,930
I'm on IRC my name is hercynian on IRC

00:50:15,550 --> 00:50:25,240
and I will just type that here so you

00:50:19,930 --> 00:50:32,980
can write it down can everybody read

00:50:25,240 --> 00:50:36,970
that hmm so I could go like this there

00:50:32,980 --> 00:50:39,840
we go so that's me on IRC um are there

00:50:36,970 --> 00:50:42,130
any questions caveats I you know

00:50:39,840 --> 00:50:46,840
anything I recommended that is actually

00:50:42,130 --> 00:50:48,790
utter shite and you know except for list

00:50:46,840 --> 00:50:50,740
more utils list more utils has bugs but

00:50:48,790 --> 00:50:52,990
I hope Steve Limbach will will share

00:50:50,740 --> 00:50:55,390
those with you however it's the things

00:50:52,990 --> 00:50:57,610
that utilities it to exports they're

00:50:55,390 --> 00:50:59,350
just too useful not to mention you know

00:50:57,610 --> 00:51:00,550
I mean if you got a long-running demon

00:50:59,350 --> 00:51:05,140
you might have an issue with a few

00:51:00,550 --> 00:51:09,510
memory leaks so all right well thank you

00:51:05,140 --> 00:51:09,510

YouTube URL: https://www.youtube.com/watch?v=gKsh0rNm5zs


