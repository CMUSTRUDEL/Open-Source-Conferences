Title: Michael Peters   Web Security 101
Publication date: 2013-08-20
Playlist: YAPC::NA 2012
Description: 
	
Captions: 
	00:00:04,819 --> 00:00:10,469
alright welcome everyone this is it's

00:00:08,130 --> 00:00:12,690
it's about time full fighting get

00:00:10,469 --> 00:00:15,480
started web security 101 my name is

00:00:12,690 --> 00:00:16,859
Michael Peters worked for a company

00:00:15,480 --> 00:00:19,500
called + 3 where we do a lot of online

00:00:16,859 --> 00:00:21,449
fundraising for nonprofits and political

00:00:19,500 --> 00:00:22,859
groups security is very important to us

00:00:21,449 --> 00:00:27,900
because we deal with a lot of money and

00:00:22,859 --> 00:00:29,189
almost all of its not ours and I IRC if

00:00:27,900 --> 00:00:33,110
you find me in Peters I have a really

00:00:29,189 --> 00:00:35,210
creative IRC you name so this talk is

00:00:33,110 --> 00:00:37,410
specifically geared towards developers

00:00:35,210 --> 00:00:40,610
there are a class of web security

00:00:37,410 --> 00:00:43,230
project or web security problems that

00:00:40,610 --> 00:00:44,640
affect sysadmin and how you set up your

00:00:43,230 --> 00:00:45,719
system and how do you do that securely

00:00:44,640 --> 00:00:47,700
I'm not really going to focus on those

00:00:45,719 --> 00:00:50,039
some of them all kind of mention because

00:00:47,700 --> 00:00:50,910
there's some overlap but most of what

00:00:50,039 --> 00:00:52,469
I'm going to be talking about is

00:00:50,910 --> 00:00:57,750
developers so code and how you do your

00:00:52,469 --> 00:00:59,579
code the primary thing to understand for

00:00:57,750 --> 00:01:02,160
web security is you do not control the

00:00:59,579 --> 00:01:04,049
client at all whatsoever any input is

00:01:02,160 --> 00:01:05,129
automatically assumed to be evil you

00:01:04,049 --> 00:01:07,290
really need to think of it as being

00:01:05,129 --> 00:01:10,260
everything you could possibly get from

00:01:07,290 --> 00:01:13,619
the HTTP request could be evil so we're

00:01:10,260 --> 00:01:16,320
talking the URL get post parameters

00:01:13,619 --> 00:01:21,390
cookies HTTP headers don't trust any of

00:01:16,320 --> 00:01:23,400
it and don't ever make your friend in

00:01:21,390 --> 00:01:24,720
security like your form validation it's

00:01:23,400 --> 00:01:27,210
fine to have that in javascript is nice

00:01:24,720 --> 00:01:29,159
and responsive to do it early on in

00:01:27,210 --> 00:01:31,890
JavaScript but do not rely on that for

00:01:29,159 --> 00:01:34,710
your security because it can it can be

00:01:31,890 --> 00:01:38,820
bad bypassed now there are some security

00:01:34,710 --> 00:01:40,350
problems that browsers do take care of

00:01:38,820 --> 00:01:43,079
it and that you do actually have to

00:01:40,350 --> 00:01:44,159
mitigate through JavaScript but those

00:01:43,079 --> 00:01:47,520
are those are slightly different and

00:01:44,159 --> 00:01:49,049
we'll get to those as we get along be

00:01:47,520 --> 00:01:52,200
very strict on your validation as strict

00:01:49,049 --> 00:01:54,960
as you possibly can it's it's a constant

00:01:52,200 --> 00:01:56,700
battle to fight with users and product

00:01:54,960 --> 00:01:58,590
owners as to how strict you want to be

00:01:56,700 --> 00:02:00,210
and how lacks you want to be because the

00:01:58,590 --> 00:02:02,460
stricter you are usually the less

00:02:00,210 --> 00:02:04,079
user-friendly you are but also the more

00:02:02,460 --> 00:02:05,219
secure yard so it's always a balance and

00:02:04,079 --> 00:02:07,710
you have to find the right balance for

00:02:05,219 --> 00:02:09,690
your product but as a general rule

00:02:07,710 --> 00:02:12,660
whitelist don't blacklist so come up

00:02:09,690 --> 00:02:13,890
with list of things we accept these and

00:02:12,660 --> 00:02:16,080
everything else is bad because if you go

00:02:13,890 --> 00:02:19,350
the other way there's always something

00:02:16,080 --> 00:02:21,450
else to add to a black list and there

00:02:19,350 --> 00:02:22,860
are no easy solutions a lot you have to

00:02:21,450 --> 00:02:24,900
think about security you have to have

00:02:22,860 --> 00:02:26,130
that in your mindset there's not just a

00:02:24,900 --> 00:02:28,920
security layer you can stick in front

00:02:26,130 --> 00:02:30,120
and go okay well we're done it is a end

00:02:28,920 --> 00:02:33,150
to end of thing so you need to think

00:02:30,120 --> 00:02:36,120
about it the whole way you should know

00:02:33,150 --> 00:02:37,290
the tools you're using some languages

00:02:36,120 --> 00:02:38,640
are more secure than others some

00:02:37,290 --> 00:02:40,920
languages have a better track record for

00:02:38,640 --> 00:02:43,130
security there are some languages in PHP

00:02:40,920 --> 00:02:47,040
that will release known security flaws

00:02:43,130 --> 00:02:49,290
after people point them out and will

00:02:47,040 --> 00:02:51,450
release them anyway so I don't quite

00:02:49,290 --> 00:02:54,120
understand that but pearl has an

00:02:51,450 --> 00:02:56,640
excellent track record for security so

00:02:54,120 --> 00:02:59,160
we're in good hands therefore with p5p

00:02:56,640 --> 00:03:00,900
they really take security seriously and

00:02:59,160 --> 00:03:04,530
think about other things you use your

00:03:00,900 --> 00:03:06,510
database vendors your your your entire

00:03:04,530 --> 00:03:07,620
stack think about how their their track

00:03:06,510 --> 00:03:08,910
record isn't security if you're if

00:03:07,620 --> 00:03:11,670
you're involved in the decision making

00:03:08,910 --> 00:03:15,270
of buying something new find out about

00:03:11,670 --> 00:03:16,650
their track record of security so

00:03:15,270 --> 00:03:18,750
talking about some of the common kinds

00:03:16,650 --> 00:03:20,670
of attacks and how we can mitigate

00:03:18,750 --> 00:03:21,480
answers and protect these are the some

00:03:20,670 --> 00:03:23,790
ones the ones we're going to go through

00:03:21,480 --> 00:03:26,010
code injection which has a whole class

00:03:23,790 --> 00:03:28,220
of things involved so system commands

00:03:26,010 --> 00:03:30,930
SQL injection HTML injection JavaScript

00:03:28,220 --> 00:03:33,870
then we'll talk about cross-site

00:03:30,930 --> 00:03:36,930
scripting cross-site request forgery or

00:03:33,870 --> 00:03:38,790
C surf denial of service attacks buffer

00:03:36,930 --> 00:03:41,070
overflows those are so over the older

00:03:38,790 --> 00:03:44,250
want more common ones or older less

00:03:41,070 --> 00:03:45,959
common nowadays but some of these are

00:03:44,250 --> 00:03:47,610
kind of tricky and can take a little

00:03:45,959 --> 00:03:49,470
time conceptually to understand how they

00:03:47,610 --> 00:03:51,209
work so if you have any questions please

00:03:49,470 --> 00:03:52,920
raise your hand to understand the flow

00:03:51,209 --> 00:03:54,209
of an attack because you can't prevent

00:03:52,920 --> 00:03:59,220
the attack if you don't understand how

00:03:54,209 --> 00:04:01,530
it happens so a very basic example of

00:03:59,220 --> 00:04:04,080
system commands say you want to create a

00:04:01,530 --> 00:04:06,060
file based on some user input so in this

00:04:04,080 --> 00:04:09,150
case we're having a user upload an image

00:04:06,060 --> 00:04:11,070
and we're going to we allow one photo

00:04:09,150 --> 00:04:14,640
per person so we can just use the users

00:04:11,070 --> 00:04:17,010
ID the users logged in we know that so

00:04:14,640 --> 00:04:21,630
they give us their user ID and we save

00:04:17,010 --> 00:04:24,720
the images as that and this falls apart

00:04:21,630 --> 00:04:26,580
if they pass something like this is they

00:04:24,720 --> 00:04:31,530
user ID now for all my example

00:04:26,580 --> 00:04:33,840
going to show that that's in URL encoded

00:04:31,530 --> 00:04:36,120
and most people don't automatically URL

00:04:33,840 --> 00:04:38,550
decode things in their head so all my

00:04:36,120 --> 00:04:40,889
examples are going to show unencoded but

00:04:38,550 --> 00:04:42,300
think about they will be encoded so it's

00:04:40,889 --> 00:04:43,740
not immediately recognizable when you

00:04:42,300 --> 00:04:47,580
see what happens so what happens here

00:04:43,740 --> 00:04:50,909
when they pass this as a user ID they

00:04:47,580 --> 00:04:52,620
overwrite your password file right and

00:04:50,909 --> 00:04:54,180
if they're smart enough they in whatever

00:04:52,620 --> 00:04:56,159
file they uploaded they uploaded a new

00:04:54,180 --> 00:04:57,569
password file so now they have

00:04:56,159 --> 00:05:03,469
overwritten your password file with

00:04:57,569 --> 00:05:06,030
something else that they wanted so a

00:05:03,469 --> 00:05:08,069
going further along this not just

00:05:06,030 --> 00:05:10,080
opening a file using it a file name but

00:05:08,069 --> 00:05:13,979
pro does system commands through lots of

00:05:10,080 --> 00:05:15,719
things system exact back tix QX open as

00:05:13,979 --> 00:05:18,240
we saw earlier with fountains but open

00:05:15,719 --> 00:05:21,180
also can be used to execute commands if

00:05:18,240 --> 00:05:24,779
you're not familiar with that so in this

00:05:21,180 --> 00:05:27,900
case same thing passing a user or the

00:05:24,779 --> 00:05:30,300
the path to this picture that we created

00:05:27,900 --> 00:05:31,949
using partial user data for that and

00:05:30,300 --> 00:05:33,990
running it through LS obviously there's

00:05:31,949 --> 00:05:36,110
better ways to get information about the

00:05:33,990 --> 00:05:38,550
file than LS but just as an example and

00:05:36,110 --> 00:05:41,839
if they pass something like this you

00:05:38,550 --> 00:05:44,339
have just emailed me your password file

00:05:41,839 --> 00:05:46,110
because now I can just you know stick a

00:05:44,339 --> 00:05:50,339
semicolon in there and then inject

00:05:46,110 --> 00:05:52,770
another system command so the way to

00:05:50,339 --> 00:05:55,080
solve this is a couple ways first

00:05:52,770 --> 00:05:56,819
because we can't trust a user input if

00:05:55,080 --> 00:06:00,870
we're going to be using anything inside

00:05:56,819 --> 00:06:03,779
of a file path strip out all the upward

00:06:00,870 --> 00:06:05,580
stuff the dots things that you saw and

00:06:03,779 --> 00:06:08,250
for unix anyway that goes make it go

00:06:05,580 --> 00:06:10,469
outside of a directory so in in Perl

00:06:08,250 --> 00:06:12,060
file spec know upwards will strip that

00:06:10,469 --> 00:06:14,190
out so that they can't reference

00:06:12,060 --> 00:06:16,110
something outside of what your

00:06:14,190 --> 00:06:18,300
localizing here and then put it onto a

00:06:16,110 --> 00:06:22,710
safe path that you can control in this

00:06:18,300 --> 00:06:23,849
case further than that be very strict

00:06:22,710 --> 00:06:26,430
with your valid ating if we had made

00:06:23,849 --> 00:06:28,409
sure that user ID was a number for using

00:06:26,430 --> 00:06:31,020
number IDs or if we're using you know a

00:06:28,409 --> 00:06:32,909
sha-1 hash or something we can be strict

00:06:31,020 --> 00:06:36,089
and limiting what that input is going to

00:06:32,909 --> 00:06:37,259
look like and we need two things get a

00:06:36,089 --> 00:06:39,659
little bit more complicated when you're

00:06:37,259 --> 00:06:40,350
just accepting you know straight data

00:06:39,659 --> 00:06:42,090
like

00:06:40,350 --> 00:06:43,620
a blog post which can contain anything

00:06:42,090 --> 00:06:49,040
but we'll get to something like that in

00:06:43,620 --> 00:06:51,300
a second so validate early and often in

00:06:49,040 --> 00:06:52,440
Perl we have an extra little tool for

00:06:51,300 --> 00:06:54,750
this called taint mode where you can

00:06:52,440 --> 00:06:56,460
turn on tape mode and it will make sure

00:06:54,750 --> 00:06:59,400
that anything coming from outside of

00:06:56,460 --> 00:07:03,570
your program is never used for a system

00:06:59,400 --> 00:07:05,820
call now tape mode is kind of old it's

00:07:03,570 --> 00:07:08,100
not always well tested every time they

00:07:05,820 --> 00:07:10,530
make a new change to pro core so there

00:07:08,100 --> 00:07:12,150
are some releases of pearl that have a

00:07:10,530 --> 00:07:14,210
buggy taint mode where maybe taint mode

00:07:12,150 --> 00:07:17,430
affects the regex engine in weird ways

00:07:14,210 --> 00:07:19,530
so make sure it doesn't cause problems

00:07:17,430 --> 00:07:21,000
for you but if you're if you turn taint

00:07:19,530 --> 00:07:22,470
one on and turn it on in your testing

00:07:21,000 --> 00:07:24,150
environment you should be able to figure

00:07:22,470 --> 00:07:26,310
out most of that stuff if it's causing

00:07:24,150 --> 00:07:27,750
problems but if you can turn to a mode

00:07:26,310 --> 00:07:29,340
on I highly recommend it because it's a

00:07:27,750 --> 00:07:31,350
nice safety net then just keep you from

00:07:29,340 --> 00:07:36,930
spotting on the floor and bursting you

00:07:31,350 --> 00:07:52,080
out of your guts everywhere this is my

00:07:36,930 --> 00:07:54,270
turn to take a drink oh yes go ahead um

00:07:52,080 --> 00:08:02,790
there there's not really good way to do

00:07:54,270 --> 00:08:06,030
that um I mean yeah in a way I'm just

00:08:02,790 --> 00:08:08,130
trying to think how much you can really

00:08:06,030 --> 00:08:09,210
trust everything I'll give you if you're

00:08:08,130 --> 00:08:11,190
if you're not going to trust your web

00:08:09,210 --> 00:08:12,210
and put there probably other things on

00:08:11,190 --> 00:08:18,300
your system that you shouldn't totally

00:08:12,210 --> 00:08:19,740
trust either hey yeah but there's not a

00:08:18,300 --> 00:08:23,720
current way in Perl to say just just

00:08:19,740 --> 00:08:23,720
taint this I out path coming from here

00:08:26,780 --> 00:08:32,340
so moving on for other code injection

00:08:30,050 --> 00:08:35,010
we're talking about Sol injection and

00:08:32,340 --> 00:08:36,900
this is a very popular series of

00:08:35,010 --> 00:08:40,280
exploits that happen all the time

00:08:36,900 --> 00:08:42,570
currently all in just about any web

00:08:40,280 --> 00:08:44,250
based system you'll see this all the

00:08:42,570 --> 00:08:45,990
time in a lot of open source CMS Azure

00:08:44,250 --> 00:08:48,150
blogging engines or something some new

00:08:45,990 --> 00:08:50,850
SQL injection vulnerability comes out

00:08:48,150 --> 00:08:53,050
but basically it's taking user input in

00:08:50,850 --> 00:08:54,970
this case the search parameter

00:08:53,050 --> 00:08:59,970
coming from my query string and sticking

00:08:54,970 --> 00:09:02,410
it inside of query that I'm building and

00:08:59,970 --> 00:09:04,570
SQL injection can be used to delete data

00:09:02,410 --> 00:09:08,680
like this if I pass this as my search

00:09:04,570 --> 00:09:10,720
parameter your database is hosed it can

00:09:08,680 --> 00:09:15,850
be used to corrupt data I can you know

00:09:10,720 --> 00:09:17,769
make it do an update instead again so

00:09:15,850 --> 00:09:20,370
these examples are kind of simplified

00:09:17,769 --> 00:09:23,140
because in reality doing multi statement

00:09:20,370 --> 00:09:25,269
executes through dbi doesn't quite work

00:09:23,140 --> 00:09:26,050
this way but you can get around a lot of

00:09:25,269 --> 00:09:27,130
the stuff I'm just trying to make the

00:09:26,050 --> 00:09:30,970
examples really simple so you can see

00:09:27,130 --> 00:09:32,470
what's what's going on it can be used to

00:09:30,970 --> 00:09:36,370
steal data so if you have a search

00:09:32,470 --> 00:09:38,740
criteria for instance searching for this

00:09:36,370 --> 00:09:40,209
name and or you know even if you even if

00:09:38,740 --> 00:09:43,209
your SQL statement says limit this to

00:09:40,209 --> 00:09:46,180
public data like we have here right

00:09:43,209 --> 00:09:48,399
which says public one well then I can

00:09:46,180 --> 00:09:50,170
just do an or public equal 0 in this

00:09:48,399 --> 00:09:52,660
parameter events so if I know your data

00:09:50,170 --> 00:09:53,680
structures in the database and maybe how

00:09:52,660 --> 00:09:55,480
you're doing the security there I can

00:09:53,680 --> 00:09:58,300
expose data that you didn't intend for

00:09:55,480 --> 00:09:59,890
me to see another interesting thing

00:09:58,300 --> 00:10:03,459
about SQL injection attacks is that it

00:09:59,890 --> 00:10:05,410
can be used to get data that you didn't

00:10:03,459 --> 00:10:10,120
wear aren't even exposing in the first

00:10:05,410 --> 00:10:12,370
place so say I have a list of users in

00:10:10,120 --> 00:10:15,070
the system or in this case this is a

00:10:12,370 --> 00:10:16,329
login so you yeah I'm trying to check if

00:10:15,070 --> 00:10:18,640
this path where the user gave me is

00:10:16,329 --> 00:10:20,200
valid and they can login so i get the

00:10:18,640 --> 00:10:21,579
password and i'm going to do comparison

00:10:20,200 --> 00:10:23,560
i'll talk about passwords later too but

00:10:21,579 --> 00:10:24,850
you know i'm going to get the password

00:10:23,560 --> 00:10:27,040
but if they can do an SQL injection

00:10:24,850 --> 00:10:29,230
attack here then they can do timing

00:10:27,040 --> 00:10:31,779
attacks where they can steal that

00:10:29,230 --> 00:10:33,790
password for users who aren't themselves

00:10:31,779 --> 00:10:34,899
and if you're storing a hash you server

00:10:33,790 --> 00:10:36,490
password then they can steal the hash

00:10:34,899 --> 00:10:39,060
and crack get offline based on the

00:10:36,490 --> 00:10:42,329
timing of the requests back and forth

00:10:39,060 --> 00:10:42,329
does that make sense

00:10:45,100 --> 00:10:47,830
just because your not exposing the data

00:10:46,360 --> 00:10:55,120
it doesn't mean it's not exposed to an

00:10:47,830 --> 00:10:57,760
SQL injection attack so first for SQL

00:10:55,120 --> 00:10:59,470
injection attacks in PHP just by the way

00:10:57,760 --> 00:11:02,590
that it has evolved as a language is

00:10:59,470 --> 00:11:04,570
actually you used to encourage very bad

00:11:02,590 --> 00:11:07,000
practices for this kind of thing because

00:11:04,570 --> 00:11:08,950
they added they tried to escape so they

00:11:07,000 --> 00:11:10,600
when use when these were passed into

00:11:08,950 --> 00:11:11,680
data they would just try to escape it to

00:11:10,600 --> 00:11:13,780
make sure didn't have any funny things

00:11:11,680 --> 00:11:16,030
that would affect the SQL query so they

00:11:13,780 --> 00:11:17,920
had magic quotes which didn't work quite

00:11:16,030 --> 00:11:19,840
right for SQL stuff so they added ad

00:11:17,920 --> 00:11:21,940
slashes which didn't work for different

00:11:19,840 --> 00:11:23,320
database engines so they added mysql

00:11:21,940 --> 00:11:26,500
escape string which wasn't quite right

00:11:23,320 --> 00:11:30,040
so minus QL real escape string you see

00:11:26,500 --> 00:11:31,360
the pattern it's hard to do and it

00:11:30,040 --> 00:11:34,120
really depends on where the data is

00:11:31,360 --> 00:11:36,430
being used in in various parts in Perl

00:11:34,120 --> 00:11:39,700
for a long time almost in the beginning

00:11:36,430 --> 00:11:41,800
of DB I we've had bind variables so you

00:11:39,700 --> 00:11:43,890
put a question mark and then you when

00:11:41,800 --> 00:11:46,930
you execute you pass that variable and

00:11:43,890 --> 00:11:48,640
the the database drivers know how to put

00:11:46,930 --> 00:11:52,180
it right into the ? make sure it doesn't

00:11:48,640 --> 00:12:00,640
contain bad things it's quoted correctly

00:11:52,180 --> 00:12:02,170
and all that kind of stuff yes yes and

00:12:00,640 --> 00:12:04,120
no it could be at the database level or

00:12:02,170 --> 00:12:05,620
can be awesome the driver level I think

00:12:04,120 --> 00:12:13,870
for my rescue L it happens at the driver

00:12:05,620 --> 00:12:17,170
level yes well right I'm getting to that

00:12:13,870 --> 00:12:19,300
in just a second there are times where

00:12:17,170 --> 00:12:21,040
it doesn't work for instance limit part

00:12:19,300 --> 00:12:22,600
like if you're doing a limit like if

00:12:21,040 --> 00:12:24,790
you're doing a page search query coming

00:12:22,600 --> 00:12:28,330
back limit is one of those places that

00:12:24,790 --> 00:12:30,610
you can't use a bind variable so but you

00:12:28,330 --> 00:12:32,470
know limit has to be a number so

00:12:30,610 --> 00:12:34,750
strictly validate that to be a number

00:12:32,470 --> 00:12:41,890
and then you can safely include it in

00:12:34,750 --> 00:12:44,020
your your query yes that's a good

00:12:41,890 --> 00:12:46,090
question i'm not totally sure on that i

00:12:44,020 --> 00:12:47,890
don't think i don't know if there's any

00:12:46,090 --> 00:12:51,150
driver developers here the conference to

00:12:47,890 --> 00:12:51,150
answer that question but

00:12:54,589 --> 00:13:01,649
so PHP has a now too I mean I think

00:12:57,269 --> 00:13:05,490
their database PD dbo or something they

00:13:01,649 --> 00:13:07,920
have a new database right okay so they

00:13:05,490 --> 00:13:09,209
have different interfaces for the

00:13:07,920 --> 00:13:15,930
databases that would do the bind

00:13:09,209 --> 00:13:18,329
variables as well um no it's not so and

00:13:15,930 --> 00:13:19,860
if you're not crafting your your SQL by

00:13:18,329 --> 00:13:21,720
hand you might think well I'm good i

00:13:19,860 --> 00:13:23,880
have an ORM or i have a tool that's

00:13:21,720 --> 00:13:25,370
going to build my queries for me and I'm

00:13:23,880 --> 00:13:28,230
safe I don't have to think about this

00:13:25,370 --> 00:13:30,149
mostly yes but not totally you still

00:13:28,230 --> 00:13:31,769
have to think about where the state is

00:13:30,149 --> 00:13:33,709
coming from how its kind of flowing does

00:13:31,769 --> 00:13:37,800
anybody see the security problem here

00:13:33,709 --> 00:13:45,540
just if you're familiar with SQL factory

00:13:37,800 --> 00:13:48,240
even if you're not yes exactly yeah so

00:13:45,540 --> 00:13:51,089
that the problem here is if / am returns

00:13:48,240 --> 00:13:54,320
a list for instance if this is my query

00:13:51,089 --> 00:13:57,630
string coming in I now have three search

00:13:54,320 --> 00:13:59,760
parameters sort of just one and Prem is

00:13:57,630 --> 00:14:01,410
set to return a list in this context

00:13:59,760 --> 00:14:03,600
that there's more than one coming

00:14:01,410 --> 00:14:07,560
through which changes my structure to

00:14:03,600 --> 00:14:09,690
this and then what happens in purl the

00:14:07,560 --> 00:14:13,560
last one wins right so it overwrites the

00:14:09,690 --> 00:14:15,270
public and then opens up that data all

00:14:13,560 --> 00:14:18,300
right so you have to be thinking about

00:14:15,270 --> 00:14:20,100
the user data this one's pretty easy

00:14:18,300 --> 00:14:22,230
it's it's not again knowing the library

00:14:20,100 --> 00:14:24,660
knowing the interface you put scalar in

00:14:22,230 --> 00:14:28,320
front of that and then you're just going

00:14:24,660 --> 00:14:29,610
to get one value and then SQL abstract

00:14:28,320 --> 00:14:31,589
will take care of making sure

00:14:29,610 --> 00:14:34,850
everything's bound correctly and or

00:14:31,589 --> 00:14:34,850
escaped as it should be

00:14:47,090 --> 00:14:55,020
alright cross-site scripting or XSS so

00:14:53,820 --> 00:14:58,470
to understand how cross-site scripting

00:14:55,020 --> 00:14:59,640
works basically when you're using a web

00:14:58,470 --> 00:15:02,190
browser and there's javascript

00:14:59,640 --> 00:15:05,010
javascript execute on behalf of the user

00:15:02,190 --> 00:15:07,470
so we can make requests to the the

00:15:05,010 --> 00:15:09,120
website using the cookies of that user

00:15:07,470 --> 00:15:13,190
just as if the browser itself was making

00:15:09,120 --> 00:15:16,880
a request and so the way XSS works is it

00:15:13,190 --> 00:15:19,650
somebody inserts some JavaScript somehow

00:15:16,880 --> 00:15:21,540
into executing for the user's behalf in

00:15:19,650 --> 00:15:24,450
this case for instance if I included a

00:15:21,540 --> 00:15:26,420
script tag that includes a URL to some

00:15:24,450 --> 00:15:30,030
other site to pull in some information

00:15:26,420 --> 00:15:31,680
and that could expose various things

00:15:30,030 --> 00:15:33,000
that JavaScript itself if it executes

00:15:31,680 --> 00:15:35,100
Sal execute on behalf of the user and

00:15:33,000 --> 00:15:39,270
there's some browser security based you

00:15:35,100 --> 00:15:41,130
know various cross-domain security walls

00:15:39,270 --> 00:15:43,950
that browsers put up with this but if

00:15:41,130 --> 00:15:46,940
somebody can get JavaScript into your

00:15:43,950 --> 00:15:49,740
application then it can get around that

00:15:46,940 --> 00:15:52,980
and it explodes exploits the users trust

00:15:49,740 --> 00:15:55,140
in the site they go to amazon.com not

00:15:52,980 --> 00:15:57,780
expecting Amazon to steal information

00:15:55,140 --> 00:15:59,100
from them or or to you know because it's

00:15:57,780 --> 00:16:04,410
not Amazon and somebody else doing it on

00:15:59,100 --> 00:16:05,970
Amazon's we have but through amazon so

00:16:04,410 --> 00:16:09,750
any site that takes input from the user

00:16:05,970 --> 00:16:11,790
and it displays it in some way even if

00:16:09,750 --> 00:16:16,170
it's not public facing display is it is

00:16:11,790 --> 00:16:18,720
susceptible to XS s so a comment on a

00:16:16,170 --> 00:16:19,860
page if I can enjoy the script in there

00:16:18,720 --> 00:16:22,140
the person who comes to read that

00:16:19,860 --> 00:16:24,510
comment could get attacked a petition

00:16:22,140 --> 00:16:26,130
form that sends those signatures contact

00:16:24,510 --> 00:16:27,840
form where it's not even then shown on

00:16:26,130 --> 00:16:29,880
the public side but the admin then comes

00:16:27,840 --> 00:16:32,220
in and logs in and sees this if I can

00:16:29,880 --> 00:16:34,710
inject JavaScript into like my name part

00:16:32,220 --> 00:16:36,750
of the field I can get the admins login

00:16:34,710 --> 00:16:38,610
credentials and things like that another

00:16:36,750 --> 00:16:41,850
tricky thing about XSS is that it

00:16:38,610 --> 00:16:44,820
doesn't have to actually be stored on

00:16:41,850 --> 00:16:46,590
the page itself if the page uses some

00:16:44,820 --> 00:16:48,000
parameter from the URL to then customize

00:16:46,590 --> 00:16:49,980
the page whether it happens on the back

00:16:48,000 --> 00:16:52,770
end or the front end that is then accept

00:16:49,980 --> 00:16:56,100
but it can also pass it give me an

00:16:52,770 --> 00:16:58,830
avenue for XSS attacks so there's a

00:16:56,100 --> 00:16:59,370
couple classes of XSS non-persistent

00:16:58,830 --> 00:17:01,770
that's one

00:16:59,370 --> 00:17:05,610
about the URL for instance say Google

00:17:01,770 --> 00:17:07,160
was use some parameter in the URL that

00:17:05,610 --> 00:17:10,470
you asked maybe the query string or the

00:17:07,160 --> 00:17:12,480
what you're querying and then somehow

00:17:10,470 --> 00:17:14,670
display that on the four on the page

00:17:12,480 --> 00:17:16,650
you're using and didn't strip out the

00:17:14,670 --> 00:17:19,490
JavaScript that might be there that

00:17:16,650 --> 00:17:22,140
would let you craft a URL that puts

00:17:19,490 --> 00:17:25,020
JavaScript that executes on Google and

00:17:22,140 --> 00:17:27,300
attacks whoever clicks on that URL and

00:17:25,020 --> 00:17:29,370
this would cause this it's also made

00:17:27,300 --> 00:17:30,840
much easier with things like the URL

00:17:29,370 --> 00:17:32,760
forwarding services that people use like

00:17:30,840 --> 00:17:33,870
bit ly and other things that people just

00:17:32,760 --> 00:17:34,740
randomly click on these links without

00:17:33,870 --> 00:17:36,540
knowing exactly where they're taking

00:17:34,740 --> 00:17:39,300
them to so you can hide really long

00:17:36,540 --> 00:17:40,830
complex malicious urls inside these

00:17:39,300 --> 00:17:44,760
little quick short URL shortener

00:17:40,830 --> 00:17:46,679
services and you know people click on

00:17:44,760 --> 00:17:48,750
links all the time a help link forum or

00:17:46,679 --> 00:17:51,870
something like that I'm going to help

00:17:48,750 --> 00:17:54,090
form the other form of XSS attacks are

00:17:51,870 --> 00:17:56,160
persistent so that is where the script

00:17:54,090 --> 00:17:59,750
is embedded in the site to a comment or

00:17:56,160 --> 00:18:02,760
something like that that's then shown so

00:17:59,750 --> 00:18:05,970
if you're familiar a few years ago there

00:18:02,760 --> 00:18:08,790
was a myspace worm which was the result

00:18:05,970 --> 00:18:11,160
of this somebody figured out in there

00:18:08,790 --> 00:18:12,210
how to customize their myspace profile

00:18:11,160 --> 00:18:14,520
so their description their user

00:18:12,210 --> 00:18:16,350
description so to contain JavaScript and

00:18:14,520 --> 00:18:18,750
what I did when you view this person's

00:18:16,350 --> 00:18:20,760
profile is it would then make you their

00:18:18,750 --> 00:18:22,040
friend and everyone you had as a friend

00:18:20,760 --> 00:18:24,330
would then become their friend as well

00:18:22,040 --> 00:18:29,730
and so it just cycled through this thing

00:18:24,330 --> 00:18:31,200
and he thought it would just be funny as

00:18:29,730 --> 00:18:33,150
a joke and then it just basically

00:18:31,200 --> 00:18:37,890
brought down my space because everybody

00:18:33,150 --> 00:18:39,600
became his friend and the but myspace

00:18:37,890 --> 00:18:41,040
really did try to stop this kind of

00:18:39,600 --> 00:18:44,179
thing they were thinking about this and

00:18:41,040 --> 00:18:46,559
so they had things that would try to

00:18:44,179 --> 00:18:49,590
parse the script because myspace was

00:18:46,559 --> 00:18:53,210
accepting HTML and even some basic other

00:18:49,590 --> 00:18:55,110
stuff too and so he found a way to trick

00:18:53,210 --> 00:18:56,490
myspace parser into giving some

00:18:55,110 --> 00:18:58,470
JavaScript that wouldn't really be quite

00:18:56,490 --> 00:19:01,950
JavaScript but that I II was lacks

00:18:58,470 --> 00:19:04,920
enough to interpret as JavaScript and so

00:19:01,950 --> 00:19:06,120
it executed for IE users even though

00:19:04,920 --> 00:19:07,620
myspace was trying to filter out the

00:19:06,120 --> 00:19:10,170
JavaScript so that kind of thing is

00:19:07,620 --> 00:19:12,809
really hard to get right if you can

00:19:10,170 --> 00:19:15,480
don't ever take HTML from

00:19:12,809 --> 00:19:17,669
users do you know maybe a something like

00:19:15,480 --> 00:19:20,249
a markdown or some other format that you

00:19:17,669 --> 00:19:21,980
can then easily convert into HTML it's

00:19:20,249 --> 00:19:26,940
not always possible to avoid that but

00:19:21,980 --> 00:19:31,759
that's the easiest way we'll get to that

00:19:26,940 --> 00:19:35,909
in a second too yeah so Dom based XSS is

00:19:31,759 --> 00:19:37,559
even more complicated because it's not

00:19:35,909 --> 00:19:40,049
injecting JavaScript itself it's

00:19:37,559 --> 00:19:42,389
injecting data that then JavaScript on

00:19:40,049 --> 00:19:43,590
the page will execute thinking that it

00:19:42,389 --> 00:19:45,330
might be plain text but then do

00:19:43,590 --> 00:19:47,460
something with it now these are harder

00:19:45,330 --> 00:19:49,950
to explain and harder to find in the

00:19:47,460 --> 00:19:51,899
wild because you really do have to know

00:19:49,950 --> 00:19:53,460
how the backend is giving the data

00:19:51,899 --> 00:19:54,570
storing the data we're not necessarily

00:19:53,460 --> 00:19:56,009
storing it but have it how it's

00:19:54,570 --> 00:19:57,299
presenting the data back to say a

00:19:56,009 --> 00:19:59,220
javascript ajax service or something

00:19:57,299 --> 00:20:01,139
like that but a way to think about it is

00:19:59,220 --> 00:20:04,259
store some data that then gets presented

00:20:01,139 --> 00:20:06,389
as a json string or JSON structure to to

00:20:04,259 --> 00:20:08,669
some web service that doesn't that just

00:20:06,389 --> 00:20:10,470
blindly trust the data and you could if

00:20:08,669 --> 00:20:12,509
you know how that javascript is going to

00:20:10,470 --> 00:20:18,360
execute it then you can do some weird

00:20:12,509 --> 00:20:20,999
things dom based XSS attacks exposed a

00:20:18,360 --> 00:20:22,740
common miss belief that a lot of people

00:20:20,999 --> 00:20:25,679
had about XSS that you could revert an

00:20:22,740 --> 00:20:29,629
XSS solely by trying to escape it before

00:20:25,679 --> 00:20:32,940
you stored it so you can just get rid of

00:20:29,629 --> 00:20:35,820
you know the HTML escape everything and

00:20:32,940 --> 00:20:38,159
you're good to go but that it doesn't

00:20:35,820 --> 00:20:40,340
work because of these donbass things

00:20:38,159 --> 00:20:43,619
which aren't HTML exactly it's

00:20:40,340 --> 00:20:45,509
JavaScript worked around anyway but the

00:20:43,619 --> 00:20:47,279
problem is that it also makes your data

00:20:45,509 --> 00:20:50,129
bad if you needed to ever use it in non

00:20:47,279 --> 00:20:56,269
HTML contact so PDF spreadsheets that

00:20:50,129 --> 00:20:58,860
kind of thing so to fight XSS attacks if

00:20:56,269 --> 00:21:01,950
you're doing dealing with non HTML

00:20:58,860 --> 00:21:03,299
validate it as you receive it store it

00:21:01,950 --> 00:21:04,950
the way they gave it to you as best you

00:21:03,299 --> 00:21:06,480
can maybe clean up the date and you know

00:21:04,950 --> 00:21:08,220
the other things like that but store the

00:21:06,480 --> 00:21:10,499
data that they gave you and then always

00:21:08,220 --> 00:21:12,330
escape it on the output so always make

00:21:10,499 --> 00:21:14,850
sure any HTML characters are escaped

00:21:12,330 --> 00:21:18,990
when you show it to them not necessarily

00:21:14,850 --> 00:21:20,909
when you're storing it and you need to

00:21:18,990 --> 00:21:23,759
escape in different contexts just HTML

00:21:20,909 --> 00:21:25,970
escaping these URL escaping JavaScript

00:21:23,759 --> 00:21:29,480
escaping CSS escaping which is

00:21:25,970 --> 00:21:31,700
Harry but just a quick example if you're

00:21:29,480 --> 00:21:34,100
in Pearl and you're using HTML template

00:21:31,700 --> 00:21:36,770
really simple to do you just do escape

00:21:34,100 --> 00:21:38,450
equals HTML foam in HTML contacts escape

00:21:36,770 --> 00:21:40,880
equals JavaScript to foam and JavaScript

00:21:38,450 --> 00:21:42,800
context URL it doesn't have a usess

00:21:40,880 --> 00:21:45,710
escaping because there isn't a CSS

00:21:42,800 --> 00:21:47,860
escaping really different parts of CSS

00:21:45,710 --> 00:21:52,910
need things escaped in different ways so

00:21:47,860 --> 00:21:54,560
don't play user data in CSS and this is

00:21:52,910 --> 00:21:57,200
another example any HTML template is

00:21:54,560 --> 00:21:59,120
just as I mean I h2o2 sorry template

00:21:57,200 --> 00:22:01,850
toolkit most of it's just as easy you

00:21:59,120 --> 00:22:02,990
just pass it through the escape filter

00:22:01,850 --> 00:22:05,200
URL filter it doesn't really have a

00:22:02,990 --> 00:22:07,640
JavaScript filter that I'm aware of to

00:22:05,200 --> 00:22:13,490
put things for JavaScript literals and

00:22:07,640 --> 00:22:15,380
again CSS tricky don't do it and if you

00:22:13,490 --> 00:22:17,930
have to deal with HTML coming in like we

00:22:15,380 --> 00:22:20,540
mentioned earlier come up again

00:22:17,930 --> 00:22:23,060
whitelist don't blacklist say I will

00:22:20,540 --> 00:22:24,680
accept these HTML elements not just

00:22:23,060 --> 00:22:28,130
these elements but these attributes on

00:22:24,680 --> 00:22:30,260
these elements and then go from there as

00:22:28,130 --> 00:22:32,630
you need more things expand the list and

00:22:30,260 --> 00:22:34,460
go like that but be very very strict at

00:22:32,630 --> 00:22:36,320
the beginning and then you can loosen

00:22:34,460 --> 00:22:40,640
things up as you go along but don't

00:22:36,320 --> 00:22:42,160
again don't blacklist whitelist and even

00:22:40,640 --> 00:22:46,100
if you do that it's too hard because

00:22:42,160 --> 00:22:50,240
HTML is a very loose thing very loose

00:22:46,100 --> 00:22:52,250
concept browsers accept a lot of crap so

00:22:50,240 --> 00:22:53,600
just because it's not valid HTML and

00:22:52,250 --> 00:22:55,730
you've made sure that you you know

00:22:53,600 --> 00:22:57,170
reduce it to a subset there's no

00:22:55,730 --> 00:23:03,470
possibility of browser will interpret it

00:22:57,170 --> 00:23:06,500
in a different way and it just for like

00:23:03,470 --> 00:23:10,580
your attributes never accept JavaScript

00:23:06,500 --> 00:23:14,020
links in your HTML on something of ends

00:23:10,580 --> 00:23:14,020
like on click or whatever

00:23:19,490 --> 00:23:25,670
are these readable from back there at

00:23:22,440 --> 00:23:31,590
all okay well I'll just go ahead then

00:23:25,670 --> 00:23:34,260
alright the next avenue of attack is C

00:23:31,590 --> 00:23:36,030
surf cross-site request forgery this one

00:23:34,260 --> 00:23:40,470
took a while for people to understand

00:23:36,030 --> 00:23:43,820
because it's kind of weird because

00:23:40,470 --> 00:23:45,750
you're not attacking the service the

00:23:43,820 --> 00:23:49,679
provider so it's not like an SQL

00:23:45,750 --> 00:23:51,630
injection attack and you're not directly

00:23:49,679 --> 00:23:54,450
attacking the user from your service

00:23:51,630 --> 00:23:56,100
it's kind of the user is attacking

00:23:54,450 --> 00:24:00,000
themselves through your service in a

00:23:56,100 --> 00:24:04,320
weird way so basically what it is is

00:24:00,000 --> 00:24:06,000
that the user browser trusts the content

00:24:04,320 --> 00:24:07,530
back and forth between a site so one

00:24:06,000 --> 00:24:10,320
site cannot interfere with another site

00:24:07,530 --> 00:24:11,880
but one site can trick the user into

00:24:10,320 --> 00:24:16,110
doing something on another site without

00:24:11,880 --> 00:24:18,809
the user knowing so it exploits the

00:24:16,110 --> 00:24:22,410
users trust and say the example the main

00:24:18,809 --> 00:24:23,490
one that I use is this amazoncom so

00:24:22,410 --> 00:24:25,320
chris shiflett was a security author

00:24:23,490 --> 00:24:27,480
where's the security author who who

00:24:25,320 --> 00:24:29,340
found this sea surf hole in amazon com

00:24:27,480 --> 00:24:31,440
if you visited his site in a certain

00:24:29,340 --> 00:24:33,750
page on his site his book would be added

00:24:31,440 --> 00:24:35,760
to your amazon.com cart or one of his

00:24:33,750 --> 00:24:37,320
books he could have taken that further

00:24:35,760 --> 00:24:39,059
and make you buy his book just by

00:24:37,320 --> 00:24:42,059
visiting his site on Amazon because of

00:24:39,059 --> 00:24:43,980
Amazon's nice little one click buy thing

00:24:42,059 --> 00:24:45,480
so if you had credentials torn Amazon

00:24:43,980 --> 00:24:46,470
your credit card sorting amazon he

00:24:45,480 --> 00:24:47,580
couldn't steal your credit card

00:24:46,470 --> 00:24:51,300
information he could just make you buy

00:24:47,580 --> 00:24:53,130
his book so that's that's why I see surf

00:24:51,300 --> 00:24:54,240
works like he didn't grab your

00:24:53,130 --> 00:24:56,850
information he didn't steal anything to

00:24:54,240 --> 00:25:02,730
you he didn't attack amazon he made you

00:24:56,850 --> 00:25:04,080
do something on amazon and it it can be

00:25:02,730 --> 00:25:07,230
done in a way that's hidden from the

00:25:04,080 --> 00:25:08,670
user so again you didn't notice this

00:25:07,230 --> 00:25:13,320
when you went to his site it just

00:25:08,670 --> 00:25:15,720
happened to the background so one of the

00:25:13,320 --> 00:25:17,730
ways to it doesn't mean no I mean I kind

00:25:15,720 --> 00:25:19,890
of explain how it works but for instance

00:25:17,730 --> 00:25:22,080
say you went to his site and there was a

00:25:19,890 --> 00:25:24,390
hidden for a forum invisible forum

00:25:22,080 --> 00:25:26,910
hidden form on his site that when you

00:25:24,390 --> 00:25:28,230
visited it would you know there's a

00:25:26,910 --> 00:25:30,179
javascript thing that would submit the

00:25:28,230 --> 00:25:31,830
form in the background to amazon

00:25:30,179 --> 00:25:33,360
your browser would send your login

00:25:31,830 --> 00:25:35,309
cookies to Amazon so if you're logged

00:25:33,360 --> 00:25:38,220
into Amazon which people stay logged

00:25:35,309 --> 00:25:40,429
into Amazon Amazon will just accept this

00:25:38,220 --> 00:25:43,289
request to add the book to your cart

00:25:40,429 --> 00:25:44,429
send back the request to the browser no

00:25:43,289 --> 00:25:46,679
big deal the browser's not going to show

00:25:44,429 --> 00:25:48,119
it because there's it's having the

00:25:46,679 --> 00:25:49,860
background it could be something like an

00:25:48,119 --> 00:25:52,730
image URL that is actually a form

00:25:49,860 --> 00:25:55,379
submission or various things like that

00:25:52,730 --> 00:25:57,330
so one of the ways to prevent see surf

00:25:55,379 --> 00:26:02,429
is to block on this referer header this

00:25:57,330 --> 00:26:03,840
misspelled at HTTP header refer and make

00:26:02,429 --> 00:26:07,980
sure that anything that does any kind of

00:26:03,840 --> 00:26:10,889
action has to come from your site or so

00:26:07,980 --> 00:26:13,350
people can't add something to their cart

00:26:10,889 --> 00:26:14,789
from some other site this isn't always

00:26:13,350 --> 00:26:16,200
possible sometimes you want people are

00:26:14,789 --> 00:26:17,730
going to come from another sighting and

00:26:16,200 --> 00:26:19,740
do some sort of an action on your site

00:26:17,730 --> 00:26:24,960
but if you can prevent it block on this

00:26:19,740 --> 00:26:28,710
refer now there's something flash can be

00:26:24,960 --> 00:26:31,080
spoofed into setting the refer and ie

00:26:28,710 --> 00:26:33,749
doesn't always ie6 didn't always send

00:26:31,080 --> 00:26:35,129
the refer in the right places but didn't

00:26:33,749 --> 00:26:36,749
I say earlier that never trust a user

00:26:35,129 --> 00:26:38,789
input so how can you trust this referer

00:26:36,749 --> 00:26:40,350
header well it's just a nature of the

00:26:38,789 --> 00:26:42,119
way cease or forks because remember the

00:26:40,350 --> 00:26:44,700
user is being tricked to doing something

00:26:42,119 --> 00:26:47,340
himself so the user is never going to

00:26:44,700 --> 00:26:48,899
spoof their own HTTP headers their

00:26:47,340 --> 00:26:51,299
browser could be again buggy or

00:26:48,899 --> 00:26:52,710
corrupted in such a way that maybe they

00:26:51,299 --> 00:26:55,980
do they have a virus on there that will

00:26:52,710 --> 00:26:57,779
spoof HTTP headers but then again you're

00:26:55,980 --> 00:27:00,179
not required to maintain the security on

00:26:57,779 --> 00:27:01,440
their machine so there it's their

00:27:00,179 --> 00:27:03,029
machine doing something stupid on their

00:27:01,440 --> 00:27:10,019
behalf and there's there's only so much

00:27:03,029 --> 00:27:12,149
you can do to prevent that another way

00:27:10,019 --> 00:27:14,340
to stall salt sea surf if you can't use

00:27:12,149 --> 00:27:15,659
as a refer because you need people to be

00:27:14,340 --> 00:27:19,639
able to come and do things like this is

00:27:15,659 --> 00:27:22,110
to use these one-time unique tokens or

00:27:19,639 --> 00:27:24,480
not one time but limited time you need

00:27:22,110 --> 00:27:26,309
to token one time if you can do it but

00:27:24,480 --> 00:27:27,840
basically every form submission needs

00:27:26,309 --> 00:27:31,049
one of these tokens at your server then

00:27:27,840 --> 00:27:33,450
provides and fills in on the form and

00:27:31,049 --> 00:27:34,590
then that request from that form is

00:27:33,450 --> 00:27:37,259
valid for a certain amount of time for

00:27:34,590 --> 00:27:39,539
that user and the way this block see

00:27:37,259 --> 00:27:42,779
surf is that when I have this page on my

00:27:39,539 --> 00:27:43,990
home so on my site that puts my book in

00:27:42,779 --> 00:27:45,850
your cart I don't know what

00:27:43,990 --> 00:27:47,440
that token can be there's no way for me

00:27:45,850 --> 00:27:48,850
to get that from amazon to include it on

00:27:47,440 --> 00:27:51,160
my form to then send back to amazon

00:27:48,850 --> 00:27:52,900
amazon creates these and puts it in

00:27:51,160 --> 00:27:55,630
their forms so that's how you can block

00:27:52,900 --> 00:27:57,460
see surf that way the user requires a

00:27:55,630 --> 00:27:59,320
bigger application change because your

00:27:57,460 --> 00:28:01,090
forms need to then generate these tokens

00:27:59,320 --> 00:28:04,090
and put them in and there's always a

00:28:01,090 --> 00:28:06,850
usability problem again with security of

00:28:04,090 --> 00:28:08,530
if I expire it too quickly and it's not

00:28:06,850 --> 00:28:14,110
usable maybe it took them 20 minutes to

00:28:08,530 --> 00:28:16,030
fill out this form or if I let it live

00:28:14,110 --> 00:28:17,500
too long than it is something that

00:28:16,030 --> 00:28:20,860
somebody can steal and use later so

00:28:17,500 --> 00:28:22,120
there's always that trade-off there's

00:28:20,860 --> 00:28:23,559
modules on Sipan that'll help with this

00:28:22,120 --> 00:28:25,750
a lot of web frameworks have this kind

00:28:23,559 --> 00:28:27,610
of thing built in and where you can

00:28:25,750 --> 00:28:32,920
generate these see surf tokens and then

00:28:27,610 --> 00:28:37,840
use them for validation so another form

00:28:32,920 --> 00:28:41,050
of attack is denial of service and this

00:28:37,840 --> 00:28:42,610
is basically just having some flooding

00:28:41,050 --> 00:28:46,150
your service in some way that it brings

00:28:42,610 --> 00:28:48,580
it offline so no data stolen data is not

00:28:46,150 --> 00:28:49,510
corrupted you know things like it's not

00:28:48,580 --> 00:28:51,730
like that but they just bring your

00:28:49,510 --> 00:28:54,850
service down so you lose money or you

00:28:51,730 --> 00:28:58,300
lose you users confidence or something

00:28:54,850 --> 00:28:59,650
to that effect there's a lot of it

00:28:58,300 --> 00:29:01,840
happens more and more these days

00:28:59,650 --> 00:29:02,970
especially distributed donald analysis

00:29:01,840 --> 00:29:04,990
service which I'll get to in a second

00:29:02,970 --> 00:29:07,510
but it can be done in a couple of

00:29:04,990 --> 00:29:10,990
different ways one just lots of really

00:29:07,510 --> 00:29:13,240
small requests which is harder to do for

00:29:10,990 --> 00:29:14,970
a normal person a single person with a

00:29:13,240 --> 00:29:17,320
single machine or maybe a dozen machines

00:29:14,970 --> 00:29:18,700
so we can do things where is just

00:29:17,320 --> 00:29:21,940
massive amounts of data and single

00:29:18,700 --> 00:29:24,340
requests so massive post uploads things

00:29:21,940 --> 00:29:28,150
like that or requests for soda Muse

00:29:24,340 --> 00:29:29,290
resource-intensive URLs so this report

00:29:28,150 --> 00:29:31,030
that you generate once a month it can

00:29:29,290 --> 00:29:32,920
take a long time to run 30 seconds to

00:29:31,030 --> 00:29:33,970
run or so which isn't a big deal once a

00:29:32,920 --> 00:29:35,800
month when somebody goes to the site to

00:29:33,970 --> 00:29:38,110
request it but then if the URL somehow

00:29:35,800 --> 00:29:39,429
becomes a target about attack if you

00:29:38,110 --> 00:29:41,230
bring your server down because now a

00:29:39,429 --> 00:29:43,559
hundred of these requests is actually a

00:29:41,230 --> 00:29:43,559
big deal

00:29:45,630 --> 00:29:55,390
no tea time I don't know for sure so

00:29:52,480 --> 00:29:58,300
denial services specifically from like a

00:29:55,390 --> 00:30:00,670
small number of attacks can be just

00:29:58,300 --> 00:30:03,700
identified at the firewall level of the

00:30:00,670 --> 00:30:05,350
networking level blacklisted and then

00:30:03,700 --> 00:30:07,090
you can go along your way so at you know

00:30:05,350 --> 00:30:09,070
you there's lots of different things

00:30:07,090 --> 00:30:10,240
that you can use there's built-in tools

00:30:09,070 --> 00:30:12,220
for linux that will do this I'm sure

00:30:10,240 --> 00:30:14,830
windows has something that you can buy

00:30:12,220 --> 00:30:16,660
from someone to do it and or the router

00:30:14,830 --> 00:30:18,160
the firewall can can handle this kind of

00:30:16,660 --> 00:30:21,130
stuff too if you want to put it in

00:30:18,160 --> 00:30:24,430
Apache modsecurity can mod das evasive

00:30:21,130 --> 00:30:26,380
can do some limited stuff there too but

00:30:24,430 --> 00:30:27,970
if you're really being attacked I had

00:30:26,380 --> 00:30:29,650
done all the service level you probably

00:30:27,970 --> 00:30:30,820
want to do at the network level because

00:30:29,650 --> 00:30:32,740
then they if you just do it at the

00:30:30,820 --> 00:30:33,940
Apache level than other services or the

00:30:32,740 --> 00:30:37,240
aren't behind to patch it could be

00:30:33,940 --> 00:30:38,770
affected too so again this just touches

00:30:37,240 --> 00:30:40,270
a little bit on the developer mostly

00:30:38,770 --> 00:30:42,940
that's a sysadmin kind of kind of thing

00:30:40,270 --> 00:30:45,490
going into distributed denial of service

00:30:42,940 --> 00:30:47,890
is even worse because it's not a single

00:30:45,490 --> 00:30:49,330
source of the data and the attack it's

00:30:47,890 --> 00:30:50,740
come from all over the place and if

00:30:49,330 --> 00:30:53,080
they're smart they're making it look

00:30:50,740 --> 00:30:54,970
exactly like your regular data so for

00:30:53,080 --> 00:30:56,470
instance I'd analysis a distributed

00:30:54,970 --> 00:30:57,730
denial-of-service attack against Google

00:30:56,470 --> 00:30:59,920
would look like a whole bunch of Google

00:30:57,730 --> 00:31:01,780
searches and Google wouldn't be able to

00:30:59,920 --> 00:31:04,090
tell the difference between good and bad

00:31:01,780 --> 00:31:05,890
mostly because the distributed

00:31:04,090 --> 00:31:07,330
denial-of-service happens because lots

00:31:05,890 --> 00:31:11,980
of people's computers are infected with

00:31:07,330 --> 00:31:13,510
Mal malware so it's coming from people

00:31:11,980 --> 00:31:16,570
who might look generally be using your

00:31:13,510 --> 00:31:18,790
service anyway so you can't blocking

00:31:16,570 --> 00:31:22,960
that person would also block their

00:31:18,790 --> 00:31:25,270
legitimate use of your service and yet I

00:31:22,960 --> 00:31:26,650
get then if you there's not really you

00:31:25,270 --> 00:31:30,220
can't really tell the difference between

00:31:26,650 --> 00:31:33,670
a DDoS attack and your service just

00:31:30,220 --> 00:31:34,930
becoming tremendously popular so there's

00:31:33,670 --> 00:31:36,670
some hardware you can get that that

00:31:34,930 --> 00:31:38,800
tries to do heuristics in a good job of

00:31:36,670 --> 00:31:40,450
kind of detecting these but they have a

00:31:38,800 --> 00:31:41,710
lot of false positives their services

00:31:40,450 --> 00:31:44,410
you can hire that do the same kind of

00:31:41,710 --> 00:31:46,240
thing they're a little bit or a

00:31:44,410 --> 00:31:47,470
combination of both and the services are

00:31:46,240 --> 00:31:50,650
kind of nice because they can track

00:31:47,470 --> 00:31:53,770
bondax botnets so you can see they know

00:31:50,650 --> 00:31:55,030
known botnets and they can see when it

00:31:53,770 --> 00:31:57,950
attacks might be coming and that kind of

00:31:55,030 --> 00:32:00,090
thing and

00:31:57,950 --> 00:32:02,519
these kind of things are becoming more

00:32:00,090 --> 00:32:08,309
and more popular not just it used to be

00:32:02,519 --> 00:32:11,159
that that um like a mafia would control

00:32:08,309 --> 00:32:14,159
a botnet that could attack a service and

00:32:11,159 --> 00:32:15,899
demand some extortion money gambling or

00:32:14,159 --> 00:32:17,580
porn services it's pretty popular to do

00:32:15,899 --> 00:32:20,879
against them because they didn't really

00:32:17,580 --> 00:32:22,919
have a lot of other avenues to pursue so

00:32:20,879 --> 00:32:24,779
they just pay the money and and then not

00:32:22,919 --> 00:32:28,710
be attacked but it's also being used by

00:32:24,779 --> 00:32:30,659
a lot of activists hacktivists to attack

00:32:28,710 --> 00:32:34,019
companies or organizations they disagree

00:32:30,659 --> 00:32:35,609
with so the scope of who is being

00:32:34,019 --> 00:32:38,369
attacked by a distributed dental service

00:32:35,609 --> 00:32:42,419
is is growing having a good relationship

00:32:38,369 --> 00:32:44,070
with your ISP can also help because then

00:32:42,419 --> 00:32:45,599
they can they usually can deal with a

00:32:44,070 --> 00:32:46,559
lot more people having these kind of

00:32:45,599 --> 00:32:49,070
things in the notice these patterns

00:32:46,559 --> 00:32:51,629
better and can fight against and better

00:32:49,070 --> 00:32:53,279
tarp hitting is a new thing that's kind

00:32:51,629 --> 00:32:55,889
of coming out as a way to protect

00:32:53,279 --> 00:32:57,570
against these there's some tools and

00:32:55,889 --> 00:33:00,179
Linux to try to do this but basically

00:32:57,570 --> 00:33:03,029
what carpeting does is it notices a lot

00:33:00,179 --> 00:33:05,309
of traffic coming from a person instead

00:33:03,029 --> 00:33:06,599
of it will just a single machine was

00:33:05,309 --> 00:33:09,179
coming from thousands so it'll do this

00:33:06,599 --> 00:33:14,639
for each of those machines but it'll

00:33:09,179 --> 00:33:17,039
slow it down it'll say hey chill here's

00:33:14,639 --> 00:33:18,839
the data coming in just a bit and that

00:33:17,039 --> 00:33:21,359
their network will just wait on the data

00:33:18,839 --> 00:33:24,719
so it basically pretends for that user

00:33:21,359 --> 00:33:26,940
you have a really slow Network and even

00:33:24,719 --> 00:33:28,710
so it maybe it's not a bad person maybe

00:33:26,940 --> 00:33:30,269
they are really just doing a whole lot

00:33:28,710 --> 00:33:32,369
of things on your site in the middle of

00:33:30,269 --> 00:33:35,070
a distributed denial-of-service attack

00:33:32,369 --> 00:33:36,989
they'll get slowed down for that but a

00:33:35,070 --> 00:33:39,450
lot of your individual users and good

00:33:36,989 --> 00:33:43,289
users to make it through but again it's

00:33:39,450 --> 00:33:44,549
kind of a new thing and I haven't I

00:33:43,289 --> 00:33:49,289
don't have any experience directly with

00:33:44,549 --> 00:33:50,639
that so if you do need it research into

00:33:49,289 --> 00:33:54,059
it and see how you can best do that with

00:33:50,639 --> 00:33:56,279
the tools you have buffer overflows

00:33:54,059 --> 00:33:58,049
aren't a real thing that we think about

00:33:56,279 --> 00:34:00,599
lot and pearl because we're running on a

00:33:58,049 --> 00:34:02,339
virtual machine interpreted code so

00:34:00,599 --> 00:34:04,979
we're not writing a lot of see most of

00:34:02,339 --> 00:34:06,299
the time but a lot of the modules you

00:34:04,979 --> 00:34:08,940
use will be written and see the Pearl

00:34:06,299 --> 00:34:10,879
itself is written in C so the Pearl p5p

00:34:08,940 --> 00:34:14,539
deals with leftover flows

00:34:10,879 --> 00:34:18,339
protecting against those so you know if

00:34:14,539 --> 00:34:22,099
you have to use some sea pick something

00:34:18,339 --> 00:34:25,970
that's tried and true it's been tested

00:34:22,099 --> 00:34:27,200
like pearl some graphics libraries and

00:34:25,970 --> 00:34:29,389
external libraries that are popular and

00:34:27,200 --> 00:34:31,190
open source and people have run through

00:34:29,389 --> 00:34:33,259
lent tools and things like that to try

00:34:31,190 --> 00:34:36,049
to find these buffer overflow problems i

00:34:33,259 --> 00:34:37,700
know an andy Lester did a lot of work

00:34:36,049 --> 00:34:40,009
with pro and parrot to get some

00:34:37,700 --> 00:34:42,440
commercial open source tools to do some

00:34:40,009 --> 00:34:44,409
security scans to find potential buffer

00:34:42,440 --> 00:34:46,579
overflow problems and things like that

00:34:44,409 --> 00:34:50,059
so it's not something you really want to

00:34:46,579 --> 00:34:51,559
do yourself it unless you're really into

00:34:50,059 --> 00:34:53,299
see hacking and you've been doing it for

00:34:51,559 --> 00:34:58,160
a long time and understand how that

00:34:53,299 --> 00:34:59,930
works alright so not talking about those

00:34:58,160 --> 00:35:00,980
basic attacks but other different

00:34:59,930 --> 00:35:07,549
miscellaneous things that we can talk

00:35:00,980 --> 00:35:09,430
about don't ever ever try to create your

00:35:07,549 --> 00:35:12,650
own encryption algorithm of any kind

00:35:09,430 --> 00:35:16,009
it's going to be so easy to break so

00:35:12,650 --> 00:35:17,269
wrong these days encryption algorithms

00:35:16,009 --> 00:35:19,730
hashing algorithms and things like that

00:35:17,269 --> 00:35:21,829
aren't created by a single person

00:35:19,730 --> 00:35:23,720
they're created by teams of really smart

00:35:21,829 --> 00:35:25,670
people competing against other teams of

00:35:23,720 --> 00:35:28,400
really smart people and lots of rounds

00:35:25,670 --> 00:35:30,380
of back and forth and nobody in this

00:35:28,400 --> 00:35:32,210
room is smart enough to do it no one in

00:35:30,380 --> 00:35:34,519
this conference I suspect too smart

00:35:32,210 --> 00:35:38,410
enough to do it on their own it it's

00:35:34,519 --> 00:35:38,410
really hard so don't ever try to do it

00:35:38,740 --> 00:35:48,049
let me know what project you're working

00:35:40,910 --> 00:35:51,470
on that with never ever ever store

00:35:48,049 --> 00:35:53,509
passwords as plain text if you ever use

00:35:51,470 --> 00:35:56,750
a service where you can say I forgot my

00:35:53,509 --> 00:35:58,880
password send it to me run they ever

00:35:56,750 --> 00:36:01,099
send you your password something is

00:35:58,880 --> 00:36:04,069
really really wrong they should never be

00:36:01,099 --> 00:36:06,019
able to know your password all they can

00:36:04,069 --> 00:36:08,119
be do I mean most of the time the best

00:36:06,019 --> 00:36:11,809
recourse there's to reset the password

00:36:08,119 --> 00:36:12,980
let the user reset the password but if

00:36:11,809 --> 00:36:17,119
they can give you back your password

00:36:12,980 --> 00:36:19,279
then it's it's busted so modern systems

00:36:17,119 --> 00:36:22,730
should do what are called hashing or

00:36:19,279 --> 00:36:24,710
encoding one-way hashing algorithms so

00:36:22,730 --> 00:36:26,359
you're not encrypting the password

00:36:24,710 --> 00:36:28,070
if you encrypt it then you can decrypt

00:36:26,359 --> 00:36:31,099
it and figure out what it is again it's

00:36:28,070 --> 00:36:32,980
hashing it so that the the system

00:36:31,099 --> 00:36:35,720
doesn't even know what the password is

00:36:32,980 --> 00:36:37,700
it just has this hash and then when the

00:36:35,720 --> 00:36:39,619
user gives the password again to login I

00:36:37,700 --> 00:36:41,960
rehash it and I compare it against each

00:36:39,619 --> 00:36:42,920
other now I don't know if your if you

00:36:41,960 --> 00:36:44,599
guys are familiar with the recent

00:36:42,920 --> 00:36:48,230
problem that happened with LinkedIn

00:36:44,599 --> 00:36:50,030
where they were hashing their data than

00:36:48,230 --> 00:36:52,369
their passwords and they got stolen and

00:36:50,030 --> 00:36:53,960
people are working through the hash

00:36:52,369 --> 00:36:56,960
where the passwords in cracking them

00:36:53,960 --> 00:37:00,250
again because linkedin wasn't doing

00:36:56,960 --> 00:37:02,240
something called salting their passwords

00:37:00,250 --> 00:37:03,980
assaulting is basically creating a

00:37:02,240 --> 00:37:07,460
random string that you then add on to

00:37:03,980 --> 00:37:09,260
the password to make it so that you

00:37:07,460 --> 00:37:11,150
can't just use the same hashing

00:37:09,260 --> 00:37:15,500
algorithm to figure out every password

00:37:11,150 --> 00:37:16,849
because once well if you're familiar in

00:37:15,500 --> 00:37:18,170
in this whole mess about LinkedIn I'm

00:37:16,849 --> 00:37:20,089
sure you might if you know about that

00:37:18,170 --> 00:37:22,220
you've heard that talk about hashing and

00:37:20,089 --> 00:37:25,160
salting and maybe rainbow table tables

00:37:22,220 --> 00:37:27,859
rainbow tables are precomputed hashes of

00:37:25,160 --> 00:37:31,089
lots of different strings which take a

00:37:27,859 --> 00:37:34,130
long time to generate I think a6

00:37:31,089 --> 00:37:36,530
password rainbow table or six character

00:37:34,130 --> 00:37:38,270
password rainbow table on modern GPUs

00:37:36,530 --> 00:37:41,570
can take about five or six days to

00:37:38,270 --> 00:37:43,130
create and so you spend you know six set

00:37:41,570 --> 00:37:45,050
if you do six and then seven and eight

00:37:43,130 --> 00:37:46,280
and and it goes up and that that's just

00:37:45,050 --> 00:37:47,480
alphanumeric so if you add all the

00:37:46,280 --> 00:37:49,849
characters it can take weeks months

00:37:47,480 --> 00:37:52,970
years to create these rainbow tables but

00:37:49,849 --> 00:37:56,330
once you have them you can then decrypt

00:37:52,970 --> 00:37:59,359
a whole bunch of or reverse engineer the

00:37:56,330 --> 00:38:00,589
hashes of a lots of data so people would

00:37:59,359 --> 00:38:02,230
have these rainbow tables that they've

00:38:00,589 --> 00:38:04,580
generated over a long period of time

00:38:02,230 --> 00:38:07,310
then they can then use to reverse

00:38:04,580 --> 00:38:09,349
engineer hashed passwords and that's

00:38:07,310 --> 00:38:12,589
where the salt comes in because the salt

00:38:09,349 --> 00:38:15,050
is / password and that means the rainbow

00:38:12,589 --> 00:38:19,369
table needs to be / password if it takes

00:38:15,050 --> 00:38:21,109
me you know just a very simple level

00:38:19,369 --> 00:38:23,510
five days to create a rainbow table for

00:38:21,109 --> 00:38:25,369
a single password how effective is that

00:38:23,510 --> 00:38:27,170
against a million password database leak

00:38:25,369 --> 00:38:29,330
you know it's not I don't have five

00:38:27,170 --> 00:38:32,990
million days to create rainbow tables

00:38:29,330 --> 00:38:34,730
for six character passwords so hashing

00:38:32,990 --> 00:38:36,680
is a / password thing which means the

00:38:34,730 --> 00:38:37,980
rainbow tables have to be / password but

00:38:36,680 --> 00:38:40,410
even better

00:38:37,980 --> 00:38:42,510
is to do something that will do multiple

00:38:40,410 --> 00:38:44,700
iterations because the you want to slow

00:38:42,510 --> 00:38:48,450
down the creation of a rainbow tables

00:38:44,700 --> 00:38:50,700
and if it takes if you have to hash this

00:38:48,450 --> 00:38:52,020
password a thousand times then each

00:38:50,700 --> 00:38:55,200
individual passwords going take a lot

00:38:52,020 --> 00:38:57,570
longer to two or each hash it's going to

00:38:55,200 --> 00:38:59,100
take longer to compute on an individual

00:38:57,570 --> 00:39:00,960
basis your users not going to notice a

00:38:59,100 --> 00:39:03,570
difference somebody running a GPU

00:39:00,960 --> 00:39:06,270
cluster to create a rainbow table will

00:39:03,570 --> 00:39:07,619
notice the difference so the best thing

00:39:06,270 --> 00:39:11,940
I can suggest is you something like

00:39:07,619 --> 00:39:13,650
crypt pbk DF 2 which is a specific

00:39:11,940 --> 00:39:16,260
algorithm that's been designed to do

00:39:13,650 --> 00:39:18,119
this with in it normally you don't even

00:39:16,260 --> 00:39:20,700
want to use something like an old hash

00:39:18,119 --> 00:39:23,550
algorithm like md5 you want to use shot

00:39:20,700 --> 00:39:25,830
to not even shot one at this week but if

00:39:23,550 --> 00:39:27,740
you run it through an algorithm like pbk

00:39:25,830 --> 00:39:31,440
df2 sorry that takes me a while to say

00:39:27,740 --> 00:39:33,570
then you don't even really you can just

00:39:31,440 --> 00:39:35,520
use md5 at that point because it's

00:39:33,570 --> 00:39:39,030
salting it it's iterating it a thousand

00:39:35,520 --> 00:39:40,440
times it's it's going to predict so use

00:39:39,030 --> 00:39:42,359
something like that that will just

00:39:40,440 --> 00:39:45,359
handle all the details for you the

00:39:42,359 --> 00:39:48,000
algorithms been tried and true it's a

00:39:45,359 --> 00:39:51,750
horrible name for an algorithm but it

00:39:48,000 --> 00:39:54,150
works so now I know a lot of you will

00:39:51,750 --> 00:39:55,530
have existing applications and you may

00:39:54,150 --> 00:39:56,820
be storing the password in plain text

00:39:55,530 --> 00:39:58,800
you may be hashing the password without

00:39:56,820 --> 00:40:00,960
assault or you may be salting it but not

00:39:58,800 --> 00:40:02,220
doing multiple iterations so it's a it's

00:40:00,960 --> 00:40:03,810
an interesting problem is how you

00:40:02,220 --> 00:40:05,460
upgrade that data because if you're

00:40:03,810 --> 00:40:08,190
doing it right if you're storing the

00:40:05,460 --> 00:40:10,350
password in plain text or maybe even

00:40:08,190 --> 00:40:11,910
just encrypted then it's actually pretty

00:40:10,350 --> 00:40:13,640
easy you just start hashing it and then

00:40:11,910 --> 00:40:15,990
drop all the plain text versions of it

00:40:13,640 --> 00:40:17,369
but if you have a hash of it you don't

00:40:15,990 --> 00:40:19,260
you can't get the original password from

00:40:17,369 --> 00:40:21,859
that hash unless you build your own

00:40:19,260 --> 00:40:23,880
rainbow tables and that's just a mess so

00:40:21,859 --> 00:40:26,460
what you can do is just create an extra

00:40:23,880 --> 00:40:27,840
field in your table you know rename you

00:40:26,460 --> 00:40:30,630
want to be old password and then have a

00:40:27,840 --> 00:40:31,950
new password field and as a user comes

00:40:30,630 --> 00:40:34,050
in and logs in and gives you their

00:40:31,950 --> 00:40:35,940
password and then you verify that it

00:40:34,050 --> 00:40:38,670
works by checking the hash then you can

00:40:35,940 --> 00:40:41,160
then we can convert that password to the

00:40:38,670 --> 00:40:43,980
new hash using your new algorithm of PB

00:40:41,160 --> 00:40:46,260
kdf to and store it and then drop the

00:40:43,980 --> 00:40:47,970
old one so your users as a user service

00:40:46,260 --> 00:40:50,820
will upgrade their own individual

00:40:47,970 --> 00:40:52,400
passwords so it's a way to get around

00:40:50,820 --> 00:40:54,930
that without having

00:40:52,400 --> 00:41:00,210
or a way to be able to upgrade your

00:40:54,930 --> 00:41:02,880
system another tip avoid leaking

00:41:00,210 --> 00:41:04,830
information I know you everyone has seen

00:41:02,880 --> 00:41:06,180
this you go to some website that it

00:41:04,830 --> 00:41:08,640
can't handle the load or whatever and

00:41:06,180 --> 00:41:10,230
it's PHP and you get the standard peach

00:41:08,640 --> 00:41:11,730
we cannot connect to the database air

00:41:10,230 --> 00:41:15,570
and it'll give you lots of information

00:41:11,730 --> 00:41:17,910
about what version of PHP what database

00:41:15,570 --> 00:41:19,530
and or potentially a lot of information

00:41:17,910 --> 00:41:21,599
about these kinds of things and these

00:41:19,530 --> 00:41:23,099
kind of information leaks give people

00:41:21,599 --> 00:41:24,930
information about oh he's running this

00:41:23,099 --> 00:41:27,240
old version of PHP that's available that

00:41:24,930 --> 00:41:30,060
has this exploit well that's easy I now

00:41:27,240 --> 00:41:33,150
got their system so avoid leaking this

00:41:30,060 --> 00:41:36,030
kind of information I know a lot of

00:41:33,150 --> 00:41:37,830
people are scared of tailing a log and

00:41:36,030 --> 00:41:40,200
I'd rather get an error message on the

00:41:37,830 --> 00:41:42,599
screen that explains stuff and a lot of

00:41:40,200 --> 00:41:44,760
people use like CGI CGI carp fatals to

00:41:42,599 --> 00:41:46,230
browser and development make sure you

00:41:44,760 --> 00:41:48,180
don't go to production with that and

00:41:46,230 --> 00:41:50,160
it's just easier if you learn to Taylor

00:41:48,180 --> 00:41:51,240
log it's it's pretty simple to avoid

00:41:50,160 --> 00:41:52,830
that kind of thing to begin with because

00:41:51,240 --> 00:41:58,500
you don't actually accidentally leave it

00:41:52,830 --> 00:41:59,670
in production code if you're ever if

00:41:58,500 --> 00:42:01,680
you're interested in more things about

00:41:59,670 --> 00:42:04,050
this I have some references you should

00:42:01,680 --> 00:42:07,770
look at the product pearl sec is the

00:42:04,050 --> 00:42:09,270
pearl security man page documentation so

00:42:07,770 --> 00:42:11,400
you can learn some more specific things

00:42:09,270 --> 00:42:13,790
about pearl if you're writing for

00:42:11,400 --> 00:42:16,080
instance a script that can be run by

00:42:13,790 --> 00:42:17,160
users without certain privileges and you

00:42:16,080 --> 00:42:19,349
want to protect against certain things

00:42:17,160 --> 00:42:20,910
and you need you know we gotta switch

00:42:19,349 --> 00:42:22,320
users at some point and switch back and

00:42:20,910 --> 00:42:24,000
there's there's a whole bunch of

00:42:22,320 --> 00:42:27,390
security concerns with users running

00:42:24,000 --> 00:42:29,099
things with restrict restricted

00:42:27,390 --> 00:42:30,270
privileges and things like that but a

00:42:29,099 --> 00:42:32,400
lots of other things too that it will

00:42:30,270 --> 00:42:34,320
talk about and for web application stuff

00:42:32,400 --> 00:42:39,599
open web application security project

00:42:34,320 --> 00:42:43,740
owasp dot org has lots of tutorials lots

00:42:39,599 --> 00:42:45,480
of interesting little filters there's

00:42:43,740 --> 00:42:47,160
even some security tools you can find in

00:42:45,480 --> 00:42:48,839
very places that will try SQL injection

00:42:47,160 --> 00:42:51,599
attack 6 your site and see if they can

00:42:48,839 --> 00:42:52,650
succeed those kinds of things are fun to

00:42:51,599 --> 00:42:54,030
play around with it if you need to do

00:42:52,650 --> 00:42:58,280
security scans you can automate that

00:42:54,030 --> 00:43:00,660
kind of thing too so any questions for

00:42:58,280 --> 00:43:05,609
anything we've talked about

00:43:00,660 --> 00:43:08,069
anyone have any nice war stories we can

00:43:05,609 --> 00:43:14,059
anonymize you for the sake of the story

00:43:08,069 --> 00:43:14,059
if you want to share yes

00:43:49,299 --> 00:44:01,400
yeah that um that's kind of Thea that's

00:43:57,049 --> 00:44:03,109
um for those watching at home he talked

00:44:01,400 --> 00:44:05,660
about they they were attacked by a

00:44:03,109 --> 00:44:07,549
distributed denial of service attack and

00:44:05,660 --> 00:44:09,289
they noticed patterns in the URLs coming

00:44:07,549 --> 00:44:13,099
through that they're able to then use

00:44:09,289 --> 00:44:15,710
mod rewrite to redirect to 127 001 so

00:44:13,099 --> 00:44:17,599
basically all these infected machines we

00:44:15,710 --> 00:44:18,950
were attacking themselves and then once

00:44:17,599 --> 00:44:20,750
they found out what where the attack was

00:44:18,950 --> 00:44:22,609
coming from they pointed it at the

00:44:20,750 --> 00:44:24,589
marketing site for that company and

00:44:22,609 --> 00:44:27,529
brought it down so their own distributed

00:44:24,589 --> 00:44:30,260
denial-of-service attack reflected back

00:44:27,529 --> 00:44:32,900
and killed them and that's actually kind

00:44:30,260 --> 00:44:34,099
of I'm ention tarp hitting earlier and

00:44:32,900 --> 00:44:38,869
that's a neat aspect of tar pitting

00:44:34,099 --> 00:44:40,430
because tarp hitting can bring the the

00:44:38,869 --> 00:44:42,319
individual bot machines to their knees

00:44:40,430 --> 00:44:43,640
because they're they're trying all these

00:44:42,319 --> 00:44:46,609
different HTTP requests and then they're

00:44:43,640 --> 00:44:47,900
just waiting and waiting and waiting for

00:44:46,609 --> 00:44:49,700
this network information to come back

00:44:47,900 --> 00:44:52,009
from you and you're just like one second

00:44:49,700 --> 00:44:53,480
i'll give that to you later over and

00:44:52,009 --> 00:44:55,549
over again and so those bots machines

00:44:53,480 --> 00:44:57,500
can actually but pretty much died from

00:44:55,549 --> 00:44:59,599
this reflective attack which is i think

00:44:57,500 --> 00:45:00,980
the best way to fight against these

00:44:59,599 --> 00:45:03,500
distributed and all the services to

00:45:00,980 --> 00:45:07,849
instead of try to deal with it yourself

00:45:03,500 --> 00:45:12,009
is to reflect it back onto them so any

00:45:07,849 --> 00:45:12,009

YouTube URL: https://www.youtube.com/watch?v=oDpAsarwtH0


