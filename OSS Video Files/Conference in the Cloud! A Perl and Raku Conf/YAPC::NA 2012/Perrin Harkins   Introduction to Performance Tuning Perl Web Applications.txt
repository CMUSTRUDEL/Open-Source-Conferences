Title: Perrin Harkins   Introduction to Performance Tuning Perl Web Applications
Publication date: 2013-08-20
Playlist: YAPC::NA 2012
Description: 
	
Captions: 
	00:00:01,760 --> 00:00:08,970
okay so by my clock it's time to start

00:00:04,859 --> 00:00:10,650
so welcome to introduction to

00:00:08,970 --> 00:00:16,949
performance tuning pearl web

00:00:10,650 --> 00:00:17,970
applications I'm parent Harkins and what

00:00:16,949 --> 00:00:20,640
we're going to do here I'm going to give

00:00:17,970 --> 00:00:22,340
you a little overview of some of the

00:00:20,640 --> 00:00:26,490
tools i like to use when working on

00:00:22,340 --> 00:00:27,990
speeding up pearl web apps we've got

00:00:26,490 --> 00:00:34,590
black background because this is very

00:00:27,990 --> 00:00:36,600
serious stuff and it is going to be a an

00:00:34,590 --> 00:00:39,450
overview it's a beginner level talk but

00:00:36,600 --> 00:00:42,899
I think we'll get into some interesting

00:00:39,450 --> 00:00:50,610
stuff so the first step is to find

00:00:42,899 --> 00:00:53,120
somebody you can blame and you know I

00:00:50,610 --> 00:00:56,100
say that jokingly but really it's about

00:00:53,120 --> 00:00:58,820
you need to figure out kind of where the

00:00:56,100 --> 00:01:03,180
problem is coming from so a little

00:00:58,820 --> 00:01:07,530
definition here of of terms performance

00:01:03,180 --> 00:01:10,140
versus scalability they're not really

00:01:07,530 --> 00:01:12,470
the same thing people often talk about

00:01:10,140 --> 00:01:16,380
them in kind of the same sentence

00:01:12,470 --> 00:01:18,360
performance is more about the actual

00:01:16,380 --> 00:01:21,540
speed that somebody can bring up your

00:01:18,360 --> 00:01:23,670
web pages and scalability is about how

00:01:21,540 --> 00:01:28,140
many simultaneous users you can actually

00:01:23,670 --> 00:01:31,439
support on the site so often these can

00:01:28,140 --> 00:01:32,820
look like the same thing because you

00:01:31,439 --> 00:01:35,070
know if you're having a scalability

00:01:32,820 --> 00:01:37,350
problem it often results in your site

00:01:35,070 --> 00:01:41,729
being slow or like a famous sort of

00:01:37,350 --> 00:01:44,399
death spiral sequence but really they're

00:01:41,729 --> 00:01:45,930
there on what separate and I'm mostly

00:01:44,399 --> 00:01:49,649
going to talk about performance in this

00:01:45,930 --> 00:01:51,119
talk but a lot of the tools that you use

00:01:49,649 --> 00:01:54,470
for working on performance are

00:01:51,119 --> 00:01:58,250
applicable for scalability by the way

00:01:54,470 --> 00:02:01,560
this slides are going to be on the wiki

00:01:58,250 --> 00:02:04,740
afterwards so don't worry about trying

00:02:01,560 --> 00:02:07,069
to write down you know any URLs or

00:02:04,740 --> 00:02:09,360
things like that and I'll be happy to

00:02:07,069 --> 00:02:11,840
take some questions at the end if there

00:02:09,360 --> 00:02:11,840
are some oh

00:02:12,550 --> 00:02:17,650
so with performance we're basically

00:02:15,610 --> 00:02:21,100
talking about slowness and how to fix it

00:02:17,650 --> 00:02:23,350
and the first thing I would look at

00:02:21,100 --> 00:02:26,500
these days is maybe it's the designer

00:02:23,350 --> 00:02:30,660
the the guy down the hall who wrote the

00:02:26,500 --> 00:02:34,300
CSS you know his javascript is terrible

00:02:30,660 --> 00:02:35,950
so you know what you need to do is find

00:02:34,300 --> 00:02:39,580
out like do you actually have a

00:02:35,950 --> 00:02:41,500
server-side problem or not it's very

00:02:39,580 --> 00:02:44,410
easy these days to actually have a

00:02:41,500 --> 00:02:46,210
problem with you know something about

00:02:44,410 --> 00:02:49,750
the front-end code that's making the

00:02:46,210 --> 00:02:51,490
site appear slow and the way that I

00:02:49,750 --> 00:02:53,050
usually try to figure that out these

00:02:51,490 --> 00:02:56,890
days is through the chrome developer

00:02:53,050 --> 00:02:58,570
tools you know their stuff in in Firebug

00:02:56,890 --> 00:03:00,900
and other tool kits for this but the

00:02:58,570 --> 00:03:03,400
chrome stuff is nice this is a little

00:03:00,900 --> 00:03:06,550
example of some of the stuff you can do

00:03:03,400 --> 00:03:09,070
you can see if you get into the network

00:03:06,550 --> 00:03:12,280
pain here you can get out get this nice

00:03:09,070 --> 00:03:13,630
little timeline that tells you like you

00:03:12,280 --> 00:03:16,570
know this is how long it took to

00:03:13,630 --> 00:03:18,790
actually get the the HTML from this page

00:03:16,570 --> 00:03:20,709
and then it'll tell you all the other

00:03:18,790 --> 00:03:24,040
resources and how long it took to render

00:03:20,709 --> 00:03:27,790
and things like that so this is a nice

00:03:24,040 --> 00:03:30,730
way to to check whether or not the

00:03:27,790 --> 00:03:33,040
server is slow and if it turns out that

00:03:30,730 --> 00:03:34,360
you do have a front-end rendering

00:03:33,040 --> 00:03:38,530
problem then you can get into something

00:03:34,360 --> 00:03:40,500
like the PageSpeed extension this is

00:03:38,530 --> 00:03:43,989
this is a little report for pearl calm

00:03:40,500 --> 00:03:46,900
it tells you some things that you might

00:03:43,989 --> 00:03:49,330
need to look at to speed things up it's

00:03:46,900 --> 00:03:50,980
it's actually it's really just a

00:03:49,330 --> 00:03:52,739
checklist it's not it's not really

00:03:50,980 --> 00:03:55,150
looking at what makes things slow

00:03:52,739 --> 00:03:57,550
specifically for this page but it's a

00:03:55,150 --> 00:03:58,930
useful starting point you can see it

00:03:57,550 --> 00:04:01,870
looks like pearl calm did a pretty good

00:03:58,930 --> 00:04:03,580
job here but some of these things are

00:04:01,870 --> 00:04:06,160
very obvious like you know you should

00:04:03,580 --> 00:04:08,440
put with on your image and things like

00:04:06,160 --> 00:04:10,330
that but it also does some stuff that's

00:04:08,440 --> 00:04:12,790
a little bit harder figure out like

00:04:10,330 --> 00:04:15,790
it'll tell you is you have CSS that's

00:04:12,790 --> 00:04:20,859
not being used and you know that kind of

00:04:15,790 --> 00:04:22,919
thing okay so once you've decided that

00:04:20,859 --> 00:04:25,610
you actually do have a server-side

00:04:22,919 --> 00:04:27,530
problem and you need to

00:04:25,610 --> 00:04:31,550
figure out how to deal with that then

00:04:27,530 --> 00:04:33,349
you need to narrow it down further first

00:04:31,550 --> 00:04:36,560
step in that I figure is usually

00:04:33,349 --> 00:04:38,750
creating a repeatable test the reason

00:04:36,560 --> 00:04:41,090
for this is you need to know what your

00:04:38,750 --> 00:04:42,620
performance is at the beginning so you

00:04:41,090 --> 00:04:47,750
can tell whether or not what you're

00:04:42,620 --> 00:04:51,259
doing is improving things and you need

00:04:47,750 --> 00:04:53,569
to choose some metrics to to compare so

00:04:51,259 --> 00:04:56,870
usually that would be something like the

00:04:53,569 --> 00:05:00,560
number of requests per second that so I

00:04:56,870 --> 00:05:03,020
can handle you could also get into the

00:05:00,560 --> 00:05:07,430
time it takes to handle like 100

00:05:03,020 --> 00:05:09,830
requests or in addition to that you

00:05:07,430 --> 00:05:12,050
would need to determine what concurrency

00:05:09,830 --> 00:05:13,669
you're going to measure at because makes

00:05:12,050 --> 00:05:16,370
a big difference if you if you do them

00:05:13,669 --> 00:05:22,460
sequentially versus with 10 concurrent

00:05:16,370 --> 00:05:24,620
clients or 100 concurrent clients so one

00:05:22,460 --> 00:05:27,860
simple way to get some numbers on that

00:05:24,620 --> 00:05:29,960
is the a/b tool which comes with Apache

00:05:27,860 --> 00:05:33,080
and it's it's pretty commonly installed

00:05:29,960 --> 00:05:36,289
on many systems this is a really simple

00:05:33,080 --> 00:05:40,009
command-line tool it basically just

00:05:36,289 --> 00:05:43,150
pounds 1 URL and what I'm telling it

00:05:40,009 --> 00:05:46,430
with these parameters is concurrency one

00:05:43,150 --> 00:05:48,050
and do 100 requests it can actually

00:05:46,430 --> 00:05:50,719
handle pretty high concurrency because

00:05:48,050 --> 00:05:53,419
it does a whole non-blocking i/o thing

00:05:50,719 --> 00:05:55,189
and you can hit a URL pretty hard with

00:05:53,419 --> 00:05:57,789
that and then you get a report back that

00:05:55,189 --> 00:06:02,300
gives you this kind of information

00:05:57,789 --> 00:06:03,589
there's a lot of numbers here but you

00:06:02,300 --> 00:06:05,479
know basically what's interesting and

00:06:03,589 --> 00:06:08,930
this is usually either the total time

00:06:05,479 --> 00:06:12,199
taken for the tests or possibly the

00:06:08,930 --> 00:06:13,550
requests per second and you can gives

00:06:12,199 --> 00:06:17,569
you a little you know little table

00:06:13,550 --> 00:06:22,939
breakdown of you know how the how the

00:06:17,569 --> 00:06:26,919
speeds fared over time the next level up

00:06:22,939 --> 00:06:29,240
from a B is this tool called htd perf

00:06:26,919 --> 00:06:30,500
you know and by the way there's tons of

00:06:29,240 --> 00:06:34,279
tools out there these are just the ones

00:06:30,500 --> 00:06:37,880
that I happen to know and like HD perf

00:06:34,279 --> 00:06:39,380
is another command line tool pretty easy

00:06:37,880 --> 00:06:41,450
to get there was a package

00:06:39,380 --> 00:06:44,150
for Ubuntu I imagine there is for a lot

00:06:41,450 --> 00:06:48,080
of systems and this can do quite a bit

00:06:44,150 --> 00:06:52,400
more it has concepts built into it like

00:06:48,080 --> 00:06:55,550
think time between between requests it

00:06:52,400 --> 00:06:57,590
can do a burst to sort of simulate the

00:06:55,550 --> 00:07:00,440
way a browser actually interacts with

00:06:57,590 --> 00:07:04,880
the site where it grabs you know the

00:07:00,440 --> 00:07:08,660
HTML and 20 images all at once and it

00:07:04,880 --> 00:07:12,020
has a concept of sessions so what I'm

00:07:08,660 --> 00:07:15,770
telling you it here is I want to do 10

00:07:12,020 --> 00:07:18,110
sessions I want five bursts in each

00:07:15,770 --> 00:07:20,690
session think time of two between them

00:07:18,110 --> 00:07:23,240
start them up at a rate of one per

00:07:20,690 --> 00:07:25,940
second I'm still just having to hit one

00:07:23,240 --> 00:07:29,960
URL here though you actually can feed

00:07:25,940 --> 00:07:32,510
this thing a whole list of URLs to hit

00:07:29,960 --> 00:07:36,230
in a special format which tells it where

00:07:32,510 --> 00:07:37,820
the clusters are and you know that's a

00:07:36,230 --> 00:07:40,940
pretty nice way to do it you can do

00:07:37,820 --> 00:07:43,250
things like take an Apache log file and

00:07:40,940 --> 00:07:47,600
turn it into something to feed into HTT

00:07:43,250 --> 00:07:52,700
perf and you get this kind of stuff as a

00:07:47,600 --> 00:07:54,200
result lots of juicy numbers in here you

00:07:52,700 --> 00:07:57,170
get the same kind of stuff back about

00:07:54,200 --> 00:08:02,660
like a reply rate you also get some

00:07:57,170 --> 00:08:04,850
session information pretty soon it gets

00:08:02,660 --> 00:08:07,730
boring trying to write these little

00:08:04,850 --> 00:08:11,360
scripts that will you know test your

00:08:07,730 --> 00:08:13,490
your performance and rather than write

00:08:11,360 --> 00:08:16,880
them by hand there's this nice module on

00:08:13,490 --> 00:08:19,160
cpanel called HTTP recorder which I like

00:08:16,880 --> 00:08:22,490
to use it's a really nice little design

00:08:19,160 --> 00:08:26,090
it basically it starts a little Damon

00:08:22,490 --> 00:08:28,520
that acts as an HTTP proxy and so what

00:08:26,090 --> 00:08:31,010
you do is you go in and configure your

00:08:28,520 --> 00:08:34,340
browser to point to the port that you

00:08:31,010 --> 00:08:35,840
started this up on and then you you know

00:08:34,340 --> 00:08:37,969
go through the sequence of stuff you

00:08:35,840 --> 00:08:39,680
want to test on your site and it

00:08:37,969 --> 00:08:45,500
generates a little mechanized script

00:08:39,680 --> 00:08:48,560
just nice so that gets you a mex script

00:08:45,500 --> 00:08:50,990
if you want to generate something for

00:08:48,560 --> 00:08:52,760
HTTP because you want to really hit it

00:08:50,990 --> 00:08:55,250
hard with a thousand

00:08:52,760 --> 00:08:59,200
clients or something there's also

00:08:55,250 --> 00:09:02,990
southern module HTTP recorder HTTP perf

00:08:59,200 --> 00:09:07,250
which will generate a session file to

00:09:02,990 --> 00:09:09,020
pass to http so here's what a mechanized

00:09:07,250 --> 00:09:12,620
script generated by that might look like

00:09:09,020 --> 00:09:16,370
this is like you know go to a page fill

00:09:12,620 --> 00:09:19,220
out a form and you know follow it

00:09:16,370 --> 00:09:23,540
through so this was all written

00:09:19,220 --> 00:09:27,380
automatically by by recorder and then

00:09:23,540 --> 00:09:31,520
this is what day HD perf output looks

00:09:27,380 --> 00:09:34,630
like and you can see it's got all the

00:09:31,520 --> 00:09:37,880
calls nested together for a burst and

00:09:34,630 --> 00:09:39,980
it's got things in there like I think

00:09:37,880 --> 00:09:42,020
time of 4 seconds which it got by

00:09:39,980 --> 00:09:45,350
actually measuring the amount of time it

00:09:42,020 --> 00:09:47,930
took me between you know between pages

00:09:45,350 --> 00:09:50,930
before I click the next link so you can

00:09:47,930 --> 00:09:58,700
get a pretty nice simulation if what you

00:09:50,930 --> 00:10:00,980
want to do is is simulate live users if

00:09:58,700 --> 00:10:03,530
you need to actually figure out you know

00:10:00,980 --> 00:10:06,230
where where you where things start to

00:10:03,530 --> 00:10:08,060
fall apart you can use something called

00:10:06,230 --> 00:10:11,000
Auto bench which is a set of Perl

00:10:08,060 --> 00:10:14,240
scripts that that run h2d perf for you

00:10:11,000 --> 00:10:16,000
and basically what they do is notch it

00:10:14,240 --> 00:10:19,310
up like I couldn't you know with a

00:10:16,000 --> 00:10:21,650
concurrency of ten more whatever you set

00:10:19,310 --> 00:10:24,740
each time and then create this nice

00:10:21,650 --> 00:10:26,570
graph at the end so I mean that's more

00:10:24,740 --> 00:10:32,510
about scalability than about performance

00:10:26,570 --> 00:10:34,070
but it's a it's a neat little tool okay

00:10:32,510 --> 00:10:36,260
so once you've got the repeatable test

00:10:34,070 --> 00:10:39,620
then you need to find out you know what

00:10:36,260 --> 00:10:42,230
is it that's actually slow and the way

00:10:39,620 --> 00:10:44,990
you do that is to run a profiler now

00:10:42,230 --> 00:10:49,130
these days profiling and pearl means

00:10:44,990 --> 00:10:51,370
you'd use devel nyt prof which has been

00:10:49,130 --> 00:10:55,970
pretty much the only game in town for a

00:10:51,370 --> 00:11:02,120
few years now and it does a really nice

00:10:55,970 --> 00:11:05,030
job you you can use this to measure CPU

00:11:02,120 --> 00:11:08,360
time or wall clock time or we

00:11:05,030 --> 00:11:10,510
time and it used to be that all the

00:11:08,360 --> 00:11:12,740
profilers would default to CPU time and

00:11:10,510 --> 00:11:15,050
we get all these people on the mob /

00:11:12,740 --> 00:11:18,280
list very confused and we'd have to tell

00:11:15,050 --> 00:11:21,770
them to measure wall time instead and

00:11:18,280 --> 00:11:25,160
the reason this matters is that if

00:11:21,770 --> 00:11:27,140
you're just counting CPU time then you

00:11:25,160 --> 00:11:30,050
do get maybe a more accurate picture of

00:11:27,140 --> 00:11:32,780
how much time your own app actually

00:11:30,050 --> 00:11:35,870
spent on the cpu versus other

00:11:32,780 --> 00:11:37,610
simultaneous processes but it doesn't

00:11:35,870 --> 00:11:39,800
count all the i/o time all the time that

00:11:37,610 --> 00:11:41,360
you spent you know waiting for something

00:11:39,800 --> 00:11:43,520
to come back over the network or waiting

00:11:41,360 --> 00:11:45,680
for a disk read that that all gets lost

00:11:43,520 --> 00:11:49,070
so you get a very inaccurate picture

00:11:45,680 --> 00:11:50,720
unless you use wall time at least for

00:11:49,070 --> 00:11:52,820
for purposes of this where we're trying

00:11:50,720 --> 00:11:57,290
to optimize how fast you really get the

00:11:52,820 --> 00:11:59,120
page when you're doing a profile you

00:11:57,290 --> 00:12:01,550
won't use your real environment or as

00:11:59,120 --> 00:12:04,640
close to it as possible if you were to

00:12:01,550 --> 00:12:07,250
use like you know test database that

00:12:04,640 --> 00:12:11,780
doesn't have much in it you'll probably

00:12:07,250 --> 00:12:14,150
get not for useful results so you want

00:12:11,780 --> 00:12:16,490
it to be as close as you can and ideally

00:12:14,150 --> 00:12:19,460
you want a profile in you know the

00:12:16,490 --> 00:12:23,930
actual web server runtime environment

00:12:19,460 --> 00:12:28,640
that you're really using it's also

00:12:23,930 --> 00:12:30,950
important to do multiple runs in in one

00:12:28,640 --> 00:12:32,960
profile like you know if you're trying

00:12:30,950 --> 00:12:35,300
to get a timing on a particular page I

00:12:32,960 --> 00:12:38,540
would hit that page like ten times and

00:12:35,300 --> 00:12:41,810
sort of average it out it that's good

00:12:38,540 --> 00:12:44,240
because it sort of clears up you know

00:12:41,810 --> 00:12:45,710
random little glitches that that might

00:12:44,240 --> 00:12:47,150
make it look like something some

00:12:45,710 --> 00:12:50,330
particular piece is taking more time

00:12:47,150 --> 00:12:52,190
than it really is and the other thing

00:12:50,330 --> 00:12:55,430
that's good to do is some kind of warm

00:12:52,190 --> 00:12:57,350
up this is because most of the time

00:12:55,430 --> 00:12:59,720
these days are going to be using some

00:12:57,350 --> 00:13:01,820
kind of persistent pearl diamond which

00:12:59,720 --> 00:13:03,590
does a bunch of compile stuff up front

00:13:01,820 --> 00:13:05,330
but it doesn't do that on each request

00:13:03,590 --> 00:13:09,320
so you don't really want to count all of

00:13:05,330 --> 00:13:12,770
that upfront preparation when when

00:13:09,320 --> 00:13:15,410
you're profiling and I wish that I could

00:13:12,770 --> 00:13:17,030
tell you like a simple recipe for you

00:13:15,410 --> 00:13:18,259
know for how to do that unfortunately

00:13:17,030 --> 00:13:21,109
it's really dependent on you

00:13:18,259 --> 00:13:22,910
on your system you know like it's

00:13:21,109 --> 00:13:26,419
there's lots of dogs out there that say

00:13:22,910 --> 00:13:29,149
like you know just use a devil and

00:13:26,419 --> 00:13:32,119
whitey prophet patchy or you know use

00:13:29,149 --> 00:13:34,129
the plaque middleware and you know

00:13:32,119 --> 00:13:38,539
everything will be fine but if you

00:13:34,129 --> 00:13:40,100
really want to get useful results I find

00:13:38,539 --> 00:13:43,489
you generally have to do a little bit of

00:13:40,100 --> 00:13:45,589
tweaking with MIT prof in order to make

00:13:43,489 --> 00:13:49,220
sure that you're skipping the stuff

00:13:45,589 --> 00:13:51,199
you're not interested in there's some

00:13:49,220 --> 00:13:53,089
stuff you can use in there about telling

00:13:51,199 --> 00:13:55,789
it when to start there's like an enable

00:13:53,089 --> 00:13:57,350
profile and disable profile and you kind

00:13:55,789 --> 00:14:02,779
of have to mess with out a little to get

00:13:57,350 --> 00:14:09,429
good results so I've got one here to to

00:14:02,779 --> 00:14:14,299
show you which i did on some of my own

00:14:09,429 --> 00:14:17,600
code this is from a little project I did

00:14:14,299 --> 00:14:20,049
for move on org which is like a an

00:14:17,600 --> 00:14:22,759
online ballot guide that shows you

00:14:20,049 --> 00:14:24,709
ballot races in your in your area and

00:14:22,759 --> 00:14:27,619
lets you say who you're going to vote

00:14:24,709 --> 00:14:32,779
for so you know it's your typical

00:14:27,619 --> 00:14:37,459
database-driven web app and how many

00:14:32,779 --> 00:14:41,149
people here have used my t prof. okay

00:14:37,459 --> 00:14:43,160
great it's check out all this amazing

00:14:41,149 --> 00:14:45,919
stuff you get I mean this is like we are

00:14:43,160 --> 00:14:49,220
living in an age of wonders with this

00:14:45,919 --> 00:14:52,720
thing I mean it's got these are all the

00:14:49,220 --> 00:14:56,689
files that were used and here it's got a

00:14:52,720 --> 00:14:58,999
you know breakdown this is this is doing

00:14:56,689 --> 00:15:01,339
by subroutine the amount of time used

00:14:58,999 --> 00:15:03,589
you can see basically what you want to

00:15:01,339 --> 00:15:04,489
look at is exclusive time which is you

00:15:03,589 --> 00:15:07,399
know how much time was spent

00:15:04,489 --> 00:15:09,949
specifically in this sub and not in subs

00:15:07,399 --> 00:15:15,409
that that it called which is inclusive

00:15:09,949 --> 00:15:17,359
time and then you can go down and you

00:15:15,409 --> 00:15:23,179
know look through each source file and

00:15:17,359 --> 00:15:25,189
get detailed stuff and you know if it

00:15:23,179 --> 00:15:29,299
gives you here is great you can like and

00:15:25,189 --> 00:15:30,470
I've in here and and it'll tell you you

00:15:29,299 --> 00:15:32,150
know how many times this was called

00:15:30,470 --> 00:15:36,370
who's calling it

00:15:32,150 --> 00:15:39,770
get a little you know per line timings

00:15:36,370 --> 00:15:44,540
so you know that's that's really useful

00:15:39,770 --> 00:15:47,630
stuff of course usually at the top is DB

00:15:44,540 --> 00:15:49,880
i execute and you know all you're going

00:15:47,630 --> 00:15:54,440
to get here is is this because it's it's

00:15:49,880 --> 00:15:57,550
actually see code but it'll at least

00:15:54,440 --> 00:16:00,910
tell you you know relative to the rest

00:15:57,550 --> 00:16:04,940
how much time is being spent there and

00:16:00,910 --> 00:16:06,320
you can tell actually in this profile

00:16:04,940 --> 00:16:11,270
result is a little bit unusual because

00:16:06,320 --> 00:16:13,400
on the DB i execute stuff is only using

00:16:11,270 --> 00:16:15,830
a little bit more time than the thing

00:16:13,400 --> 00:16:20,420
behind it often what you'll find is is

00:16:15,830 --> 00:16:23,780
like all the time is in DB i execute but

00:16:20,420 --> 00:16:26,450
in this one this is an app where it's

00:16:23,780 --> 00:16:30,080
not actually a slow app you know the

00:16:26,450 --> 00:16:32,170
queries are pretty well optimized in

00:16:30,080 --> 00:16:36,770
this so the other stuff can actually

00:16:32,170 --> 00:16:37,910
come in pretty close behind it oh I have

00:16:36,770 --> 00:16:40,760
to show you this one more thing because

00:16:37,910 --> 00:16:46,880
I think it's so neat you can generate

00:16:40,760 --> 00:16:48,380
this tree map this is all the stuff

00:16:46,880 --> 00:16:51,650
going on here so you can actually like

00:16:48,380 --> 00:16:54,460
visually see you know how much time was

00:16:51,650 --> 00:17:02,380
spent in each thing and drill down in it

00:16:54,460 --> 00:17:02,380
it's pretty awesome stuff so

00:17:06,449 --> 00:17:20,970
Wow okay so you've got this great

00:17:12,149 --> 00:17:22,350
profiler it's probably your database the

00:17:20,970 --> 00:17:23,699
profiler is awesome though it'll tell

00:17:22,350 --> 00:17:26,549
you if there's something weird going on

00:17:23,699 --> 00:17:28,409
so you know every now and then you'll

00:17:26,549 --> 00:17:30,809
find something you'll find you know

00:17:28,409 --> 00:17:32,580
maybe there's a bad regex it's sucking

00:17:30,809 --> 00:17:34,230
up a lot of time like you've you've got

00:17:32,580 --> 00:17:37,200
a variable you're putting in there it's

00:17:34,230 --> 00:17:38,940
making it recompile every time maybe you

00:17:37,200 --> 00:17:41,730
have a string you're parsing over and

00:17:38,940 --> 00:17:43,500
over that you didn't realize sometimes

00:17:41,730 --> 00:17:46,409
this will happen with like you know your

00:17:43,500 --> 00:17:48,889
config files being like rebelled or

00:17:46,409 --> 00:17:53,429
something like that or like a massive

00:17:48,889 --> 00:17:55,230
object instantiation maybe you create 50

00:17:53,429 --> 00:17:59,850
objects for every row you live from the

00:17:55,230 --> 00:18:03,000
database or sometimes you'll be waiting

00:17:59,850 --> 00:18:06,120
on on network operations you know if

00:18:03,000 --> 00:18:11,039
you've got some HTTP fetches things like

00:18:06,120 --> 00:18:14,010
that memcache d or good old-fashioned

00:18:11,039 --> 00:18:19,200
disk reads but yeah mostly it's going to

00:18:14,010 --> 00:18:22,799
be the database so I mean it makes sense

00:18:19,200 --> 00:18:24,389
right because what's the slow part in

00:18:22,799 --> 00:18:27,360
modern computing it's it's not the

00:18:24,389 --> 00:18:31,470
awesomely fast cpu or the eight gigs of

00:18:27,360 --> 00:18:33,149
ram it's it's the i/o of stuff and what

00:18:31,470 --> 00:18:36,659
does most of the i/o and a web app it's

00:18:33,149 --> 00:18:38,250
it's pretty much the database so so

00:18:36,659 --> 00:18:43,470
either you've got to fix your queries or

00:18:38,250 --> 00:18:45,360
you have to cash them so the next step

00:18:43,470 --> 00:18:49,740
then is to find out well which queries

00:18:45,360 --> 00:18:51,690
do you need to fix and dbi ugly has some

00:18:49,740 --> 00:18:55,320
great profiling stuff built in which has

00:18:51,690 --> 00:18:57,960
been there for quite a while it's very

00:18:55,320 --> 00:19:00,690
easy to use you just have to set an

00:18:57,960 --> 00:19:03,809
environment variable before you start up

00:19:00,690 --> 00:19:06,870
your application and then you know this

00:19:03,809 --> 00:19:08,460
is using a something that collects the

00:19:06,870 --> 00:19:10,289
data for apache and dumps it when you

00:19:08,460 --> 00:19:12,210
shut the server down but there's lots of

00:19:10,289 --> 00:19:16,350
different options for how you can do

00:19:12,210 --> 00:19:18,799
this so I've got one of these to show

00:19:16,350 --> 00:19:18,799
you too

00:19:24,970 --> 00:19:36,259
so here is a DB I profile result and you

00:19:33,889 --> 00:19:37,850
can see it shows you stuff like the

00:19:36,259 --> 00:19:40,429
number of times this query was called

00:19:37,850 --> 00:19:50,779
the total time spent working on this

00:19:40,429 --> 00:19:56,480
query how's that okay then we can go

00:19:50,779 --> 00:20:02,330
even bigger there we go okay so you get

00:19:56,480 --> 00:20:04,190
a lot of data from this and yeah I've

00:20:02,330 --> 00:20:06,200
got it ordered by the default here which

00:20:04,190 --> 00:20:08,389
is by the total time it's usually what

00:20:06,200 --> 00:20:10,389
you what you care about is you know

00:20:08,389 --> 00:20:14,240
where the most times being spent and

00:20:10,389 --> 00:20:15,649
what's good about this is it will tell

00:20:14,240 --> 00:20:18,139
you when something non-intuitive is

00:20:15,649 --> 00:20:20,179
going on like if I were to just guess

00:20:18,139 --> 00:20:22,999
what needs to work I would probably

00:20:20,179 --> 00:20:26,749
think like oh it's this big query here

00:20:22,999 --> 00:20:31,879
probably that's slow or you know or

00:20:26,749 --> 00:20:33,289
maybe even this big query but if you

00:20:31,879 --> 00:20:37,070
actually look at the results from this

00:20:33,289 --> 00:20:38,929
you can see in fact this big query is

00:20:37,070 --> 00:20:41,809
taking less time than my like session

00:20:38,929 --> 00:20:43,460
loading so it's probably a dumb idea to

00:20:41,809 --> 00:20:47,600
work on speeding that up it's already

00:20:43,460 --> 00:20:50,659
fast enough so it helps you focus your

00:20:47,600 --> 00:20:52,869
resources on what is actually taking the

00:20:50,659 --> 00:20:52,869
time

00:21:05,010 --> 00:21:09,120
so um in terms of speeding up queries I

00:21:07,290 --> 00:21:12,270
mean this this is mostly this is a

00:21:09,120 --> 00:21:13,920
little beyond you know a gap to talk

00:21:12,270 --> 00:21:15,450
because it's really about knowing your

00:21:13,920 --> 00:21:17,700
particular database and it's very

00:21:15,450 --> 00:21:19,490
database specific but probably you're

00:21:17,700 --> 00:21:21,930
going to get into some explained plans

00:21:19,490 --> 00:21:24,870
you're going to look at how it's using

00:21:21,930 --> 00:21:28,470
your indexes and you know try to improve

00:21:24,870 --> 00:21:30,180
that if you happen to be using my sequel

00:21:28,470 --> 00:21:32,340
there's a there's a tool that can be a

00:21:30,180 --> 00:21:35,850
good starting point in the pro kona

00:21:32,340 --> 00:21:38,400
toolkit which is called PT query advisor

00:21:35,850 --> 00:21:41,750
it'll just tell you if you're doing

00:21:38,400 --> 00:21:44,520
something that is known to be a problem

00:21:41,750 --> 00:21:47,850
you know joining a certain way or you

00:21:44,520 --> 00:21:50,580
know something like that another thing

00:21:47,850 --> 00:21:53,880
you've got to remember is that sequel

00:21:50,580 --> 00:21:57,600
generation from dbi wrappers and no rms

00:21:53,880 --> 00:22:00,030
is is great for simple stuff saves you a

00:21:57,600 --> 00:22:01,980
lot of time and a lot of boilerplate but

00:22:00,030 --> 00:22:03,980
it's not for everything there's going to

00:22:01,980 --> 00:22:06,450
be some times when you actually have to

00:22:03,980 --> 00:22:09,960
you know write a query manually because

00:22:06,450 --> 00:22:14,180
you need to give it like hints on which

00:22:09,960 --> 00:22:17,880
index to use and things like that so

00:22:14,180 --> 00:22:20,940
that's why it's always important with

00:22:17,880 --> 00:22:24,570
your RM to know like how to get out of

00:22:20,940 --> 00:22:25,950
it and do it manual query you also may

00:22:24,570 --> 00:22:28,530
have to do a little bit of database

00:22:25,950 --> 00:22:32,450
server tuning if you're in an

00:22:28,530 --> 00:22:36,510
environment where nobody is the DBA and

00:22:32,450 --> 00:22:40,200
it you're a little unsure of you know

00:22:36,510 --> 00:22:42,270
how to begin tune in your database it

00:22:40,200 --> 00:22:44,220
actually doesn't take very much to to

00:22:42,270 --> 00:22:47,400
make an improvement if no one has done

00:22:44,220 --> 00:22:49,020
anything yet there's actually there's a

00:22:47,400 --> 00:22:51,960
there's a nice little tool for my sequel

00:22:49,020 --> 00:22:53,670
again from pre kono tool kit called PT

00:22:51,960 --> 00:22:57,300
variable advisor that will just tell you

00:22:53,670 --> 00:23:00,300
like you know the most obvious stuff

00:22:57,300 --> 00:23:03,000
that you should fix but basically you

00:23:00,300 --> 00:23:05,880
know if you were to spend an hour tuning

00:23:03,000 --> 00:23:11,190
and untuned database server you probably

00:23:05,880 --> 00:23:15,120
improve things now i'm going to give you

00:23:11,190 --> 00:23:18,600
like kind of the greatest hits of of how

00:23:15,120 --> 00:23:20,580
to speed up dbi stuff there's a

00:23:18,600 --> 00:23:24,710
lot of information about speeding up dbi

00:23:20,580 --> 00:23:27,740
which is available in Kim Bunsen slides

00:23:24,710 --> 00:23:32,160
his advanced DB I talk on Sipan I'll

00:23:27,740 --> 00:23:33,570
mention that at the end basically that

00:23:32,160 --> 00:23:37,410
will give you all the stuff about like

00:23:33,570 --> 00:23:40,890
use this method not that method and but

00:23:37,410 --> 00:23:43,200
the the that stuff isn't going to save a

00:23:40,890 --> 00:23:46,860
slow application the thing that's going

00:23:43,200 --> 00:23:50,580
to make a big difference is things like

00:23:46,860 --> 00:23:54,750
this so caching your connections and and

00:23:50,580 --> 00:23:56,400
statements in some databases preparing a

00:23:54,750 --> 00:24:00,690
statement handle it's actually slow like

00:23:56,400 --> 00:24:03,419
Oracle so caching that stuff can help a

00:24:00,690 --> 00:24:06,630
lot probably most of you are using some

00:24:03,419 --> 00:24:10,260
kind of dbi framework that that does

00:24:06,630 --> 00:24:14,880
this for you you need to manage your

00:24:10,260 --> 00:24:17,700
commits it can be useful to do

00:24:14,880 --> 00:24:19,440
autocommit for some things but if you

00:24:17,700 --> 00:24:22,350
have a lot of updates or a lot of

00:24:19,440 --> 00:24:24,030
inserts that you're going to do turning

00:24:22,350 --> 00:24:25,740
off autocommit for that section can make

00:24:24,030 --> 00:24:30,570
a really big difference in most

00:24:25,740 --> 00:24:34,350
databases and if you have really a lot

00:24:30,570 --> 00:24:37,080
of data you probably want to jump out of

00:24:34,350 --> 00:24:39,419
there and use the native bulk loading

00:24:37,080 --> 00:24:43,710
tools for your database I've actually

00:24:39,419 --> 00:24:49,049
found that with my sequel it's faster to

00:24:43,710 --> 00:24:51,409
use text CSV excess write out a hundred

00:24:49,049 --> 00:24:54,990
thousand rows to a CSV file and then

00:24:51,409 --> 00:24:59,159
load them up with load data infile than

00:24:54,990 --> 00:25:01,620
it is to use like the best sort of multi

00:24:59,159 --> 00:25:06,539
row insert syntax in my sequel it's like

00:25:01,620 --> 00:25:09,539
much faster so as soon as you get into

00:25:06,539 --> 00:25:16,700
bulk loading you probably want to look

00:25:09,539 --> 00:25:19,679
at stepping outside dbi stuff okay so

00:25:16,700 --> 00:25:24,830
once you're done trying to tune your

00:25:19,679 --> 00:25:24,830
queries the place you end up is caching

00:25:27,020 --> 00:25:36,549
cash management is not that easy

00:25:31,360 --> 00:25:38,710
I often encounter people who have just

00:25:36,549 --> 00:25:40,540
started using caching they're really

00:25:38,710 --> 00:25:41,710
excited about it and they talk about how

00:25:40,540 --> 00:25:45,070
like we're going to do all this in

00:25:41,710 --> 00:25:46,960
validation stuff and it's going to we're

00:25:45,070 --> 00:25:51,160
going to have like a totally up to date

00:25:46,960 --> 00:25:53,910
cached copy of of everything and it'll

00:25:51,160 --> 00:25:56,830
be just like the database only faster

00:25:53,910 --> 00:25:59,710
the thing is like if that was actually

00:25:56,830 --> 00:26:03,760
possible then the database would just do

00:25:59,710 --> 00:26:05,320
that you know so so the reality is

00:26:03,760 --> 00:26:08,919
you're making some trade-offs it's

00:26:05,320 --> 00:26:10,600
somewhere when you're caching one

00:26:08,919 --> 00:26:14,100
trade-off you're going to make is your

00:26:10,600 --> 00:26:16,540
code is going to get a lot more complex

00:26:14,100 --> 00:26:18,730
reason for that besides just you know

00:26:16,540 --> 00:26:20,440
the sort of basic gettin set calls is

00:26:18,730 --> 00:26:23,710
you'll end up with all this stuff where

00:26:20,440 --> 00:26:25,720
you've got to invalidate stuff from your

00:26:23,710 --> 00:26:27,370
cash because people have made it you

00:26:25,720 --> 00:26:29,620
know there's like a change in the CMS so

00:26:27,370 --> 00:26:31,690
you've gotta you know go in and and

00:26:29,620 --> 00:26:35,350
invalidate all these caches where that

00:26:31,690 --> 00:26:37,320
was being saved and then after that you

00:26:35,350 --> 00:26:40,090
quickly get into dependency tracking

00:26:37,320 --> 00:26:44,440
where you're like well you know this

00:26:40,090 --> 00:26:47,169
piece of data is also being used by this

00:26:44,440 --> 00:26:49,120
other thing so if we invalidate these

00:26:47,169 --> 00:26:52,690
we've got to cascade over and invalidate

00:26:49,120 --> 00:26:56,410
those and you know pretty soon it gets

00:26:52,690 --> 00:27:00,030
very complicated and your content

00:26:56,410 --> 00:27:01,900
creators get really mad at you I

00:27:00,030 --> 00:27:03,790
remember having conversations with

00:27:01,900 --> 00:27:06,700
people where they you know they come in

00:27:03,790 --> 00:27:09,340
and they'd be like well you know I i

00:27:06,700 --> 00:27:11,049
updated the price on this book ten

00:27:09,340 --> 00:27:12,700
minutes ago and it still hasn't changed

00:27:11,049 --> 00:27:14,590
on the website and you know they're

00:27:12,700 --> 00:27:16,929
going nuts and you know like well let's

00:27:14,590 --> 00:27:18,700
see there's like the you know the the

00:27:16,929 --> 00:27:20,440
database row cash has a five-minute

00:27:18,700 --> 00:27:21,730
timeout and then the object cache is a

00:27:20,440 --> 00:27:26,770
10 minute timeout and then the page

00:27:21,730 --> 00:27:29,110
cache as it you and it just you know it

00:27:26,770 --> 00:27:32,410
really gets irritating for them and it

00:27:29,110 --> 00:27:36,280
becomes very complicated so you know you

00:27:32,410 --> 00:27:40,470
have to try to keep it to something that

00:27:36,280 --> 00:27:43,650
is reasonably simple to manage and

00:27:40,470 --> 00:27:45,470
usually that means you're not going to

00:27:43,650 --> 00:27:47,539
it's not going to be a perfect

00:27:45,470 --> 00:27:50,539
you're going to have probably some stale

00:27:47,539 --> 00:27:52,220
contents or sometimes and maybe you'll

00:27:50,539 --> 00:27:55,010
invalidate a lot more than you need to

00:27:52,220 --> 00:27:57,770
in order to be be safe like you know

00:27:55,010 --> 00:28:00,940
kill large parts of the cash rather than

00:27:57,770 --> 00:28:04,880
do a super fancy system to figure out

00:28:00,940 --> 00:28:06,559
you know what should be removed anyway

00:28:04,880 --> 00:28:10,419
when you when you do cash i recommend

00:28:06,559 --> 00:28:14,419
that you use on CH I or Chi which is a

00:28:10,419 --> 00:28:16,220
seat BAM module for basically

00:28:14,419 --> 00:28:20,870
abstracting what you're actually using

00:28:16,220 --> 00:28:23,900
to store the data in the cache and it's

00:28:20,870 --> 00:28:25,610
useful to have that because basically

00:28:23,900 --> 00:28:29,030
because memcache d is not the silver

00:28:25,610 --> 00:28:31,610
bullet for every application there can

00:28:29,030 --> 00:28:36,440
be times when something is actually

00:28:31,610 --> 00:28:38,270
better stored you know in memory because

00:28:36,440 --> 00:28:44,090
you need really fast or it's worthless

00:28:38,270 --> 00:28:45,380
or you know maybe maybe it doesn't

00:28:44,090 --> 00:28:46,640
matter if it takes a little bit longer

00:28:45,380 --> 00:28:49,070
to get as long as it doesn't hit the

00:28:46,640 --> 00:28:52,940
database you can yeah there's a lot of

00:28:49,070 --> 00:28:54,770
choices you can make with ch I and you

00:28:52,940 --> 00:28:57,890
get to change your mind later on that

00:28:54,770 --> 00:28:59,750
way you're not you know stuck with the

00:28:57,890 --> 00:29:01,970
one particular cache that was hot at the

00:28:59,750 --> 00:29:08,840
time that you you know roach or your

00:29:01,970 --> 00:29:11,419
system so let me say just a little bit

00:29:08,840 --> 00:29:14,900
about the runtime environment that

00:29:11,419 --> 00:29:18,440
you're running your app in web server

00:29:14,900 --> 00:29:21,320
performances is generally not a very

00:29:18,440 --> 00:29:24,530
significant part of your apps

00:29:21,320 --> 00:29:27,890
performance you know you can run like

00:29:24,530 --> 00:29:30,679
Apache one on you know some pretty old

00:29:27,890 --> 00:29:34,400
hardware and serve a ton of static

00:29:30,679 --> 00:29:36,230
content very fast and you know these

00:29:34,400 --> 00:29:38,809
days there's lots of ways you can

00:29:36,230 --> 00:29:42,740
offload that to s3 or you know something

00:29:38,809 --> 00:29:44,929
else so that tends not to be a very big

00:29:42,740 --> 00:29:47,120
issue so which is great because what

00:29:44,929 --> 00:29:49,940
that means is you can make your choice

00:29:47,120 --> 00:29:52,070
about web servers based on other

00:29:49,940 --> 00:29:53,960
criteria like you know which one do you

00:29:52,070 --> 00:29:54,890
actually like what did what do the

00:29:53,960 --> 00:29:57,289
people you're working with have

00:29:54,890 --> 00:29:59,090
experience with you don't really need to

00:29:57,289 --> 00:29:59,360
be freaked out about you know I've got

00:29:59,090 --> 00:30:02,480
to

00:29:59,360 --> 00:30:04,309
use you know engine X because it's ten

00:30:02,480 --> 00:30:07,490
times faster you know you don't really

00:30:04,309 --> 00:30:10,010
you can use whichever one you find most

00:30:07,490 --> 00:30:13,070
useful but there's a couple things that

00:30:10,010 --> 00:30:16,460
you do need to get right about your

00:30:13,070 --> 00:30:18,350
pearl environment the most obvious one

00:30:16,460 --> 00:30:20,480
is running inside some kind of

00:30:18,350 --> 00:30:23,240
persistent Damon system that might be

00:30:20,480 --> 00:30:26,809
mod perl it might be plaque might be

00:30:23,240 --> 00:30:28,850
plaque and mod perl might be fast cgi

00:30:26,809 --> 00:30:30,799
you have a lot of choices these days and

00:30:28,850 --> 00:30:32,929
it's you know again it doesn't matter

00:30:30,799 --> 00:30:35,510
that much performance wise which one you

00:30:32,929 --> 00:30:37,940
choose so really this is a decision you

00:30:35,510 --> 00:30:41,559
should make based on you know which one

00:30:37,940 --> 00:30:44,600
you happen to like for other reasons and

00:30:41,559 --> 00:30:47,179
whichever one you're using you need to

00:30:44,600 --> 00:30:51,470
make sure that it buffers the output in

00:30:47,179 --> 00:30:54,350
some way fast cgi is already has this

00:30:51,470 --> 00:30:56,840
you know built-in it's got you know this

00:30:54,350 --> 00:31:01,370
separate damon's and then the front end

00:30:56,840 --> 00:31:02,990
web server so the stuff gets generated

00:31:01,370 --> 00:31:06,230
on the back end and sent to the web

00:31:02,990 --> 00:31:08,030
server and then spooled out to the

00:31:06,230 --> 00:31:10,280
clients from there the reason why this

00:31:08,030 --> 00:31:12,740
is important is because if you get a

00:31:10,280 --> 00:31:15,020
bunch of slow clients coming in you

00:31:12,740 --> 00:31:17,929
don't want them to tie up your pearl

00:31:15,020 --> 00:31:20,450
processes that could be generating more

00:31:17,929 --> 00:31:22,160
content handling more clients instead

00:31:20,450 --> 00:31:26,230
you want that to go to something

00:31:22,160 --> 00:31:28,940
lightweight upfront so if you're using

00:31:26,230 --> 00:31:31,040
if using plaque I think most people

00:31:28,940 --> 00:31:32,990
would run some kind of proxy in front of

00:31:31,040 --> 00:31:35,990
that with mod perl you definitely want

00:31:32,990 --> 00:31:38,510
to run a proxy server in front either

00:31:35,990 --> 00:31:41,870
either like another lightweight apache

00:31:38,510 --> 00:31:44,570
with my proxy or you know some other

00:31:41,870 --> 00:31:49,760
kind of you know engine axe or were

00:31:44,570 --> 00:31:53,090
similar and you're going to want to do

00:31:49,760 --> 00:31:55,220
some kind of you know sighs limiting on

00:31:53,090 --> 00:31:56,840
your processes which just means you know

00:31:55,220 --> 00:32:00,010
set something so when they hit a certain

00:31:56,840 --> 00:32:03,230
size they should be killed and restarted

00:32:00,010 --> 00:32:06,410
or some kind of you know restart every

00:32:03,230 --> 00:32:08,750
100 requests i used to feel kind of bad

00:32:06,410 --> 00:32:10,910
about this stuff like oh no it's so you

00:32:08,750 --> 00:32:12,140
know such a crappy environment that we

00:32:10,910 --> 00:32:13,100
have to do this but actually what I've

00:32:12,140 --> 00:32:14,690
discovered is

00:32:13,100 --> 00:32:16,910
is basically everybody does this in

00:32:14,690 --> 00:32:19,910
every language it's not like a pearl

00:32:16,910 --> 00:32:23,090
issue exactly it's just a general thing

00:32:19,910 --> 00:32:27,350
that happens with you know with web code

00:32:23,090 --> 00:32:31,039
and persistent damon's so you have to

00:32:27,350 --> 00:32:33,110
set something up for that and you know I

00:32:31,039 --> 00:32:34,880
would also point out that a lot of

00:32:33,110 --> 00:32:36,410
people think that's memory leaks it's

00:32:34,880 --> 00:32:40,070
typically not actually a memory leak

00:32:36,410 --> 00:32:43,280
it's just you know as your program uses

00:32:40,070 --> 00:32:44,990
more data over time it tends to need

00:32:43,280 --> 00:32:47,990
more memory and pearl doesn't give the

00:32:44,990 --> 00:32:49,460
memory back when it's done so you know

00:32:47,990 --> 00:32:51,799
eventually the thing reaches a certain

00:32:49,460 --> 00:32:53,150
size and in order to reclaim that memory

00:32:51,799 --> 00:33:00,470
you've got to kill it and start a new

00:32:53,150 --> 00:33:01,669
one so this is all great but when you

00:33:00,470 --> 00:33:05,679
have a performance problem in the real

00:33:01,669 --> 00:33:07,820
world the the situation can be different

00:33:05,679 --> 00:33:13,690
usually what's happening that is is

00:33:07,820 --> 00:33:15,830
flailing so my definition of flailing is

00:33:13,690 --> 00:33:18,380
when you're changing things in your code

00:33:15,830 --> 00:33:22,789
based on guesses rather than on actual

00:33:18,380 --> 00:33:27,110
data and you know this happens all the

00:33:22,789 --> 00:33:29,120
time there's something something slow

00:33:27,110 --> 00:33:31,010
and everybody's running around like you

00:33:29,120 --> 00:33:33,799
know try moving the sessions over to the

00:33:31,010 --> 00:33:35,450
you know the other database and people

00:33:33,799 --> 00:33:38,659
are like making changes there's no QA

00:33:35,450 --> 00:33:40,940
going on at all you know programmers or

00:33:38,659 --> 00:33:44,570
maybe like looking at it for five

00:33:40,940 --> 00:33:46,700
minutes before pushing it live and so

00:33:44,570 --> 00:33:51,020
what you get in this situation is a lot

00:33:46,700 --> 00:33:54,470
of collateral damage you end up breaking

00:33:51,020 --> 00:33:59,360
things that a lot of you have

00:33:54,470 --> 00:34:01,789
experienced this I definitely have and

00:33:59,360 --> 00:34:04,510
so it's a frustrating situation and you

00:34:01,789 --> 00:34:10,190
know the best I can tell you is like 22

00:34:04,510 --> 00:34:11,780
you know don't panic and try to have a

00:34:10,190 --> 00:34:13,310
couple tools in your back pocket that

00:34:11,780 --> 00:34:15,619
are good for figuring out what's going

00:34:13,310 --> 00:34:18,379
on I think actually there's a talk later

00:34:15,619 --> 00:34:21,859
today about debugging and production

00:34:18,379 --> 00:34:24,649
which might be useful but one thing that

00:34:21,859 --> 00:34:27,020
that I find useful is what I want to

00:34:24,649 --> 00:34:31,700
think of as emergency profiling this is

00:34:27,020 --> 00:34:34,429
are you you know stick in some like time

00:34:31,700 --> 00:34:36,200
high res print statements to figure out

00:34:34,429 --> 00:34:37,520
like you know how much time you're

00:34:36,200 --> 00:34:39,110
spending in different sections and

00:34:37,520 --> 00:34:41,630
there's actually some nice modules to

00:34:39,110 --> 00:34:45,770
make that really easy like benchmark

00:34:41,630 --> 00:34:49,820
stopwatch is a nice one so the way that

00:34:45,770 --> 00:34:51,890
this thing works is you you tell it I

00:34:49,820 --> 00:34:53,360
just finished you know with this lap

00:34:51,890 --> 00:34:54,800
command you tell her like I just

00:34:53,360 --> 00:34:57,170
finished loading my objects i just

00:34:54,800 --> 00:34:59,330
finished rendering my template and then

00:34:57,170 --> 00:35:01,340
you print a summary so you could like

00:34:59,330 --> 00:35:04,370
dump this to your your weblog or

00:35:01,340 --> 00:35:06,110
something and in the summary it'll tell

00:35:04,370 --> 00:35:07,580
you like well this is the percentage of

00:35:06,110 --> 00:35:10,370
your time that you spent on each of

00:35:07,580 --> 00:35:12,410
those things so you could use this and

00:35:10,370 --> 00:35:16,810
just kind of like narrow down you know

00:35:12,410 --> 00:35:16,810
what's actually going wrong in my system

00:35:17,560 --> 00:35:23,050
another thing that comes up in you know

00:35:21,200 --> 00:35:25,640
in this situation in the real world is

00:35:23,050 --> 00:35:28,010
doubts about your infrastructure choices

00:35:25,640 --> 00:35:30,350
so you know you'll ask somebody for help

00:35:28,010 --> 00:35:32,510
and they'll be like oh my god you're you

00:35:30,350 --> 00:35:35,300
know you're using you know dancer

00:35:32,510 --> 00:35:38,390
template old kid you know dbi it's

00:35:35,300 --> 00:35:40,280
whatever you know I can't believe you're

00:35:38,390 --> 00:35:46,730
using that it's so slow of course it's

00:35:40,280 --> 00:35:50,510
slow and you know keep your head when

00:35:46,730 --> 00:35:52,790
this happens a lot of people will tell

00:35:50,510 --> 00:35:55,520
you this without really a lot of basis

00:35:52,790 --> 00:35:57,590
for what they're saying just because

00:35:55,520 --> 00:36:03,200
they happen to you know like 12 over

00:35:57,590 --> 00:36:06,140
another the thing is if you're using if

00:36:03,200 --> 00:36:09,500
you're using like a popular Sipan module

00:36:06,140 --> 00:36:13,310
the the odds that it is you know

00:36:09,500 --> 00:36:17,240
actually very slow are slim to none you

00:36:13,310 --> 00:36:21,320
know it's any like mature and popular

00:36:17,240 --> 00:36:24,140
Sipan thing has been through you know

00:36:21,320 --> 00:36:25,760
enough that they're probably the the

00:36:24,140 --> 00:36:29,900
real slow stuff has been worked out of

00:36:25,760 --> 00:36:34,990
it so you know don't don't immediately

00:36:29,900 --> 00:36:38,750
assume that you know just because you

00:36:34,990 --> 00:36:40,910
we're told that you know like x late is

00:36:38,750 --> 00:36:44,630
10 times faster than template toolkit

00:36:40,910 --> 00:36:46,340
and you know you've got a switch and you

00:36:44,630 --> 00:36:51,290
know like spend the night port in your

00:36:46,340 --> 00:36:54,560
code over if you do find that in your

00:36:51,290 --> 00:36:58,040
profile you actually see something

00:36:54,560 --> 00:36:59,900
showing up there then the first thing I

00:36:58,040 --> 00:37:02,210
would do rather than you know attempting

00:36:59,900 --> 00:37:04,550
to like switch immediately is to try to

00:37:02,210 --> 00:37:06,910
get help and find out if you're just

00:37:04,550 --> 00:37:10,280
doing something silly that's that's

00:37:06,910 --> 00:37:14,180
causing the performance problem there

00:37:10,280 --> 00:37:17,270
might be a faq about that I would you

00:37:14,180 --> 00:37:20,720
know Google template toolkit performance

00:37:17,270 --> 00:37:23,120
or something like that and go and check

00:37:20,720 --> 00:37:25,300
on the mailing list you know see if

00:37:23,120 --> 00:37:27,950
there's an IRC channel basically uh

00:37:25,300 --> 00:37:30,440
there's a pretty good chance if

00:37:27,950 --> 00:37:32,750
something seems to be performing less

00:37:30,440 --> 00:37:34,100
than you'd expect that it you know that

00:37:32,750 --> 00:37:37,220
there's a reason for it and it's not

00:37:34,100 --> 00:37:39,830
that hard to fix there used to be a

00:37:37,220 --> 00:37:41,030
bunch of people who would come into the

00:37:39,830 --> 00:37:43,430
template to hit mailing lists

00:37:41,030 --> 00:37:44,840
periodically and say like it's so slow

00:37:43,430 --> 00:37:47,060
what can I do and it would turn out that

00:37:44,840 --> 00:37:51,620
they were using it in a way that

00:37:47,060 --> 00:37:53,690
defeated the cash and you know it's like

00:37:51,620 --> 00:37:56,720
10 times slower when you do that so like

00:37:53,690 --> 00:38:01,640
a simple fix and suddenly you know

00:37:56,720 --> 00:38:03,560
everything is much faster another thing

00:38:01,640 --> 00:38:09,890
that will come up is buying hardware

00:38:03,560 --> 00:38:12,590
which is a great idea often the fastest

00:38:09,890 --> 00:38:18,440
and cheapest way to fix a performance

00:38:12,590 --> 00:38:22,880
problem a boatload of hand but lot of

00:38:18,440 --> 00:38:26,870
RAM hides a multitude of sins and and

00:38:22,880 --> 00:38:30,860
also a an SSD raid fixes a lot of

00:38:26,870 --> 00:38:32,360
database problems the place I'm working

00:38:30,860 --> 00:38:35,060
now we just keep getting like more and

00:38:32,360 --> 00:38:36,260
more awesome database hardware and you

00:38:35,060 --> 00:38:38,690
know every time I think we're going to

00:38:36,260 --> 00:38:42,920
have to do something crazy and like try

00:38:38,690 --> 00:38:44,990
out a you know one of the new column

00:38:42,920 --> 00:38:47,990
oriented databases Amit turns out that

00:38:44,990 --> 00:38:49,790
nope you can just buy another rack of

00:38:47,990 --> 00:38:52,210
SSDs and the problem goes away for

00:38:49,790 --> 00:38:52,210
another year

00:38:52,970 --> 00:38:57,380
so the one thing to do though is make

00:38:55,609 --> 00:39:00,770
sure that you actually know you know

00:38:57,380 --> 00:39:01,820
what the bond lack is because it's you

00:39:00,770 --> 00:39:04,550
know of course it's easy to buy the

00:39:01,820 --> 00:39:06,619
wrong thing you need to know it is my

00:39:04,550 --> 00:39:10,130
problem that the disks are slow or that

00:39:06,619 --> 00:39:14,840
I'm running out of RAM I have worked in

00:39:10,130 --> 00:39:17,180
places where like somebody would come in

00:39:14,840 --> 00:39:18,410
like really proud of the new web servers

00:39:17,180 --> 00:39:20,180
that they ordered like oh check out

00:39:18,410 --> 00:39:22,700
these specs and you know they've got

00:39:20,180 --> 00:39:24,950
these awesome CPUs and I'd be like well

00:39:22,700 --> 00:39:26,510
you know that's great but actually we

00:39:24,950 --> 00:39:28,670
never touch the CPUs on the web it's

00:39:26,510 --> 00:39:31,880
basically all ram that that is the

00:39:28,670 --> 00:39:38,240
bottleneck so you need to know what it

00:39:31,880 --> 00:39:40,640
is that that you're trying to fix okay

00:39:38,240 --> 00:39:44,260
so so just a couple quick things that

00:39:40,640 --> 00:39:48,109
you might check out I mentioned before

00:39:44,260 --> 00:39:50,410
Tim bunches advanced TBI slides those

00:39:48,109 --> 00:39:52,550
are really good and it'll tell you like

00:39:50,410 --> 00:39:56,330
way more than you ever wanted to know

00:39:52,550 --> 00:39:59,810
about you know the most efficient calls

00:39:56,330 --> 00:40:03,440
for dbi but again you know for the most

00:39:59,810 --> 00:40:05,869
part we're talking like you know it'll

00:40:03,440 --> 00:40:07,099
make like a five percent different

00:40:05,869 --> 00:40:09,170
something like that it's not going to be

00:40:07,099 --> 00:40:10,750
the difference between fast and slow but

00:40:09,170 --> 00:40:15,410
it's still totally worth knowing

00:40:10,750 --> 00:40:17,150
especially for writing new code and I

00:40:15,410 --> 00:40:20,060
also think the pro Kona toolkit is

00:40:17,150 --> 00:40:21,770
pretty cool it does have a lot of my

00:40:20,060 --> 00:40:25,550
sequel stuff but it also has in general

00:40:21,770 --> 00:40:29,330
system tools there's like a fancy iostat

00:40:25,550 --> 00:40:32,150
replacement and for checking you know

00:40:29,330 --> 00:40:33,670
your disk activity and you know there's

00:40:32,150 --> 00:40:35,690
a few other things in there they're just

00:40:33,670 --> 00:40:42,230
generally useful for analyzing

00:40:35,690 --> 00:40:47,710
performance problems so that's what I

00:40:42,230 --> 00:40:47,710
have four slides any questions

00:41:04,670 --> 00:41:12,180
yeah so the question is in my example i

00:41:08,250 --> 00:41:16,290
was i was running like HTTP perf against

00:41:12,180 --> 00:41:17,610
localhost and you know would it make a

00:41:16,290 --> 00:41:20,430
difference to run that on a separate

00:41:17,610 --> 00:41:24,300
machine it definitely would i mean i was

00:41:20,430 --> 00:41:26,700
doing that for you know because i was

00:41:24,300 --> 00:41:28,140
able to set that up right here and get

00:41:26,700 --> 00:41:30,330
something to show while i was at the

00:41:28,140 --> 00:41:32,550
conference but in reality you definitely

00:41:30,330 --> 00:41:37,460
would not want to run the load tester

00:41:32,550 --> 00:41:41,790
from the same machine there's actually

00:41:37,460 --> 00:41:43,500
because these things use a lot of CPU I

00:41:41,790 --> 00:41:46,920
think there's like a an option called

00:41:43,500 --> 00:41:48,360
dash dash hog for HT deeper where it

00:41:46,920 --> 00:41:51,330
will it will like use up all of your

00:41:48,360 --> 00:41:53,310
ports and and you know really slam your

00:41:51,330 --> 00:41:56,280
machine but then you can do an awesome

00:41:53,310 --> 00:41:59,010
amount of load these things really like

00:41:56,280 --> 00:42:01,590
you can crush most websites by by

00:41:59,010 --> 00:42:05,750
running a B or it should be perfect ill

00:42:01,590 --> 00:42:17,780
they figure it out and block you know

00:42:05,750 --> 00:42:17,780
okay other questions yeah

00:42:25,440 --> 00:42:32,200
yeah okay so that so the question is

00:42:29,730 --> 00:42:36,970
where where is good information about

00:42:32,200 --> 00:42:43,690
setting up my tea prof so I mean the sea

00:42:36,970 --> 00:42:45,640
pen dots are reasonably good on the myt

00:42:43,690 --> 00:42:48,850
profit patchy stuff has some information

00:42:45,640 --> 00:42:50,170
about how to set it up but if you're if

00:42:48,850 --> 00:42:52,090
you're working on it with my pearl i

00:42:50,170 --> 00:42:54,520
would suggest coming over to the morrow

00:42:52,090 --> 00:43:10,780
mailing list and and getting some direct

00:42:54,520 --> 00:43:13,600
help it yeah it's you right you get like

00:43:10,780 --> 00:43:18,490
crummy results until you until you tweak

00:43:13,600 --> 00:43:20,860
it a little bit so I don't know of

00:43:18,490 --> 00:43:22,800
anything that is already out there that

00:43:20,860 --> 00:43:24,970
really explains how to do it nicely and

00:43:22,800 --> 00:43:27,430
what I think I want to do is try to

00:43:24,970 --> 00:43:29,860
improve the that you know the Sipan

00:43:27,430 --> 00:43:33,730
docks because that's the place that

00:43:29,860 --> 00:43:35,980
people should be looking so I had a

00:43:33,730 --> 00:43:37,960
little trouble getting good results with

00:43:35,980 --> 00:43:40,200
it for you know for this demo so i think

00:43:37,960 --> 00:43:43,420
what i'm going to do is is just try to

00:43:40,200 --> 00:43:46,990
send in some patches for that and try to

00:43:43,420 --> 00:43:49,060
improve you know the basic dogs but but

00:43:46,990 --> 00:43:52,140
yeah definitely come to the mall pearl

00:43:49,060 --> 00:43:55,870
list and you know show us what you're

00:43:52,140 --> 00:43:57,670
what you're getting and you know

00:43:55,870 --> 00:44:03,570
probably somebody can help you figure it

00:43:57,670 --> 00:44:03,570
out other questions

00:44:22,490 --> 00:44:27,450
so the question is is it easier to do it

00:44:25,500 --> 00:44:30,060
in in plaque and would that be a better

00:44:27,450 --> 00:44:33,690
option than trying to make it work in

00:44:30,060 --> 00:44:36,960
mobile I honestly I haven't actually

00:44:33,690 --> 00:44:38,580
tried profiling and plaque because i

00:44:36,960 --> 00:44:43,560
don't have a production plaque

00:44:38,580 --> 00:44:47,820
application but my guess would be yes

00:44:43,560 --> 00:44:48,950
it's probably pretty nice but the you

00:44:47,820 --> 00:44:52,350
know the thing about it is that

00:44:48,950 --> 00:44:54,120
generally you're trying to fix an

00:44:52,350 --> 00:44:56,700
application that you have and a lot of

00:44:54,120 --> 00:44:59,370
people have you know stuff that's

00:44:56,700 --> 00:45:08,670
already running in mob pearl so it needs

00:44:59,370 --> 00:45:10,770
to work in my pearl anything else okay

00:45:08,670 --> 00:45:12,330
if you if you think of something and you

00:45:10,770 --> 00:45:14,040
know want to come up in and chat

00:45:12,330 --> 00:45:16,970
afterward that's that's totally fine

00:45:14,040 --> 00:45:16,970

YouTube URL: https://www.youtube.com/watch?v=iEZ-gcycxcA


