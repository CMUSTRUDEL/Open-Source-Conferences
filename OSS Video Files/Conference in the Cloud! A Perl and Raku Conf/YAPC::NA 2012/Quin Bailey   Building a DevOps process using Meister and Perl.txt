Title: Quin Bailey   Building a DevOps process using Meister and Perl
Publication date: 2013-08-20
Playlist: YAPC::NA 2012
Description: 
	
Captions: 
	00:00:06,470 --> 00:00:12,240
alright well good morning everyone my

00:00:09,750 --> 00:00:13,860
name is Quinn Bailey I work with up make

00:00:12,240 --> 00:00:18,439
software yeah my name is not Tracy

00:00:13,860 --> 00:00:20,970
Reagan I'm standing in for Tracy Reagan

00:00:18,439 --> 00:00:24,830
so today I'd like to talk a little bit

00:00:20,970 --> 00:00:32,869
about how we make software use pearl in

00:00:24,830 --> 00:00:32,869
our DevOps dynamic DevOps solution I

00:00:33,590 --> 00:00:39,980
subtitled this how to hack your way to a

00:00:35,760 --> 00:00:39,980
comprehensive build and deploy solution

00:00:41,390 --> 00:00:55,440
so before we get well DevOps is is you

00:00:52,920 --> 00:01:02,879
know a buzzword a hot word right now and

00:00:55,440 --> 00:01:05,309
maybe it's overplayed overhyped and and

00:01:02,879 --> 00:01:08,630
really from wow that is getting

00:01:05,309 --> 00:01:12,119
distorted really from our perspective

00:01:08,630 --> 00:01:14,549
now this is a new old thing right this

00:01:12,119 --> 00:01:17,000
is a common problem that's been going on

00:01:14,549 --> 00:01:22,759
for a long time the disconnect between

00:01:17,000 --> 00:01:29,520
development and operations and while

00:01:22,759 --> 00:01:34,200
with web technologies web applications

00:01:29,520 --> 00:01:37,500
there are new challenges with that these

00:01:34,200 --> 00:01:40,490
these are a lot of the old challenges

00:01:37,500 --> 00:01:45,479
and old problems that have been around

00:01:40,490 --> 00:01:49,310
you know through various systems various

00:01:45,479 --> 00:01:54,750
types of applications for eons and eons

00:01:49,310 --> 00:02:01,110
so I like to say you know DevOps is is

00:01:54,750 --> 00:02:03,799
in some sense kind of a no-brainer sort

00:02:01,110 --> 00:02:08,290
of idea and basically the idea of

00:02:03,799 --> 00:02:10,820
left-hand meet meet the right hand right

00:02:08,290 --> 00:02:15,170
these two parts the organization need to

00:02:10,820 --> 00:02:19,160
be coordinated in order to to work

00:02:15,170 --> 00:02:22,820
effectively although the regular state

00:02:19,160 --> 00:02:26,840
of things is is pretty dysfunctional in

00:02:22,820 --> 00:02:31,880
a lot of organizations so just to give

00:02:26,840 --> 00:02:34,160
you some background as to what open who

00:02:31,880 --> 00:02:37,730
we are who you know what open makes

00:02:34,160 --> 00:02:42,770
software is we've been at this a quite a

00:02:37,730 --> 00:02:45,980
while really our primary focus or our

00:02:42,770 --> 00:02:50,990
roots where we come from is in build

00:02:45,980 --> 00:02:53,600
management so you know it's a little bit

00:02:50,990 --> 00:02:56,450
different when we take on web

00:02:53,600 --> 00:03:05,840
applications languages that aren't

00:02:56,450 --> 00:03:13,880
compiled which seem to be fast such such

00:03:05,840 --> 00:03:15,770
as pearl but at any rate build

00:03:13,880 --> 00:03:20,780
management is really where our roots are

00:03:15,770 --> 00:03:24,710
at and managing the creation of and

00:03:20,780 --> 00:03:29,390
deployment of applications from source

00:03:24,710 --> 00:03:30,950
control we've been at this probably the

00:03:29,390 --> 00:03:35,810
company's been around for about 17 years

00:03:30,950 --> 00:03:40,090
so it's as I said we've sort of been at

00:03:35,810 --> 00:03:45,320
this a while so and and i think you know

00:03:40,090 --> 00:03:49,220
while DevOps is is kind of a hot buzz

00:03:45,320 --> 00:03:52,880
word that maybe even you know makes some

00:03:49,220 --> 00:03:57,830
people a little ill to hear it over and

00:03:52,880 --> 00:04:00,290
over especially you know when companies

00:03:57,830 --> 00:04:03,440
are using it trying to sell you

00:04:00,290 --> 00:04:06,170
something but the basic idea is is

00:04:03,440 --> 00:04:08,870
really nothing new you know in other

00:04:06,170 --> 00:04:11,950
disciplines other than software

00:04:08,870 --> 00:04:16,430
development you know the idea of a

00:04:11,950 --> 00:04:19,100
systems engineering a unified discipline

00:04:16,430 --> 00:04:21,989
someone who oversees well maybe not

00:04:19,100 --> 00:04:26,220
someone but part of the organization

00:04:21,989 --> 00:04:31,130
part of the process that oversees you

00:04:26,220 --> 00:04:35,310
know taking newly developed products and

00:04:31,130 --> 00:04:40,979
guiding their their move into into

00:04:35,310 --> 00:04:44,669
production is not really a new not

00:04:40,979 --> 00:04:46,440
really a new idea and just to give you a

00:04:44,669 --> 00:04:51,810
little bit about our philosophy behind

00:04:46,440 --> 00:04:56,000
this you know my sense of it is of it is

00:04:51,810 --> 00:04:56,000
is you know you want people with i

00:04:57,380 --> 00:05:01,490
forgot the term that i was going to use

00:05:01,729 --> 00:05:08,840
you what you want generalists in this

00:05:05,310 --> 00:05:12,300
role people with a broad knowledge of

00:05:08,840 --> 00:05:14,789
you know what goes on during development

00:05:12,300 --> 00:05:18,539
and the sort of challenges that are

00:05:14,789 --> 00:05:20,819
faced when newly developed products go

00:05:18,539 --> 00:05:24,139
into into production and you know it's

00:05:20,819 --> 00:05:30,680
this person isn't really you know a

00:05:24,139 --> 00:05:30,680
superhero isn't really necessarily even

00:05:31,159 --> 00:05:38,219
you know the brightest developer the

00:05:35,479 --> 00:05:40,370
brightest technical mind at an

00:05:38,219 --> 00:05:45,000
organization but really just a pragmatic

00:05:40,370 --> 00:05:47,159
problem solver and i think just as

00:05:45,000 --> 00:05:51,090
important as being a pragmatic problem

00:05:47,159 --> 00:05:55,169
solver people in this role need access

00:05:51,090 --> 00:06:01,289
to to resources to actually fix things

00:05:55,169 --> 00:06:05,789
when things go wrong so DevOps is you

00:06:01,289 --> 00:06:09,960
know buzz word du jour and it's not it's

00:06:05,789 --> 00:06:18,030
not a silver bullet but you know neither

00:06:09,960 --> 00:06:21,690
are any of the other good practice well

00:06:18,030 --> 00:06:26,130
that's good good practices in software

00:06:21,690 --> 00:06:29,479
engineering aren't necessarily none of

00:06:26,130 --> 00:06:29,479
them are silver bullet

00:06:30,280 --> 00:06:39,120
just like agile and scrum but people who

00:06:35,950 --> 00:06:42,790
understand and buy into the basic

00:06:39,120 --> 00:06:47,320
philosophy and incorporate it well into

00:06:42,790 --> 00:06:55,560
their organization you know it will give

00:06:47,320 --> 00:06:55,560
you results if you if you work at it so

00:07:10,120 --> 00:07:21,020
so and I think one important thing about

00:07:16,900 --> 00:07:24,370
about this is you know to some people

00:07:21,020 --> 00:07:32,419
devops there might actually be a

00:07:24,370 --> 00:07:34,940
methodology or even a toolset prescribed

00:07:32,419 --> 00:07:38,440
for that I mean we like to think that

00:07:34,940 --> 00:07:41,349
that we have a great tool set for it but

00:07:38,440 --> 00:07:44,000
really I don't I don't think of it as

00:07:41,349 --> 00:07:47,539
DevOps is really a methodology or

00:07:44,000 --> 00:07:52,759
prescription for any particular one way

00:07:47,539 --> 00:07:57,009
of doing things and it's as I said maybe

00:07:52,759 --> 00:08:00,169
a bit overhyped but it's a you know it's

00:07:57,009 --> 00:08:04,250
it's one of those things it's it's what

00:08:00,169 --> 00:08:06,650
the what folks are talking about what

00:08:04,250 --> 00:08:11,590
you know we see people talking about in

00:08:06,650 --> 00:08:15,050
our market and you know we we feel that

00:08:11,590 --> 00:08:21,380
we've got something to to say something

00:08:15,050 --> 00:08:29,150
to add to that conversation so you know

00:08:21,380 --> 00:08:32,300
the basic idea of having well so as far

00:08:29,150 --> 00:08:39,320
as what what a toolset might enable an

00:08:32,300 --> 00:08:47,020
organization to do I I think of you know

00:08:39,320 --> 00:08:49,880
these three as as Big the major points

00:08:47,020 --> 00:08:53,959
that that you want to hit with with a

00:08:49,880 --> 00:08:55,790
DevOps toolset so there should be it

00:08:53,959 --> 00:09:04,060
should allow for enhance collaboration

00:08:55,790 --> 00:09:07,850
between developers and in operations the

00:09:04,060 --> 00:09:13,100
actual business of building packaging

00:09:07,850 --> 00:09:15,650
deploying configuring an application you

00:09:13,100 --> 00:09:18,900
know you should never do

00:09:15,650 --> 00:09:25,500
more work than you need to so maximize

00:09:18,900 --> 00:09:29,910
reuse of those you know if it's going to

00:09:25,500 --> 00:09:33,260
be if you do have scripts well you

00:09:29,910 --> 00:09:33,260
pretty much have to have scripts but

00:09:33,530 --> 00:09:39,720
organize them in a way that you can

00:09:35,370 --> 00:09:43,410
maximize reuse of them and then as the

00:09:39,720 --> 00:09:46,830
processes is moving along provide as

00:09:43,410 --> 00:09:52,200
much insight as to you know what's going

00:09:46,830 --> 00:09:53,850
in to a release you know what's

00:09:52,200 --> 00:09:55,860
everything you know is there a single

00:09:53,850 --> 00:10:00,950
place we can go to find everything we

00:09:55,860 --> 00:10:05,610
need to know about this release or this

00:10:00,950 --> 00:10:08,370
individual component so what for example

00:10:05,610 --> 00:10:12,540
you know results from any automated

00:10:08,370 --> 00:10:16,170
tests just general logging of the build

00:10:12,540 --> 00:10:18,770
or package or configuration process and

00:10:16,170 --> 00:10:22,980
you know any sort of additional

00:10:18,770 --> 00:10:31,670
reporting such as maybe dependency

00:10:22,980 --> 00:10:36,120
analysis or since we work a lot with the

00:10:31,670 --> 00:10:40,020
financial and insurance companies having

00:10:36,120 --> 00:10:42,330
reporting for for audit capabilities for

00:10:40,020 --> 00:10:52,430
audit requirements is is also very

00:10:42,330 --> 00:10:52,430
important from our perspective so

00:10:57,170 --> 00:11:04,600
I'll try to minimize the the marketing

00:11:05,529 --> 00:11:14,510
mumbo jumbo but as I know technical

00:11:12,529 --> 00:11:19,610
folks don't don't care too much for that

00:11:14,510 --> 00:11:22,490
but the basic idea of having a dynamic

00:11:19,610 --> 00:11:26,980
DevOps sweet firm from our perspective

00:11:22,490 --> 00:11:31,430
is to enable continuous integration

00:11:26,980 --> 00:11:38,300
continuous deployment and you know make

00:11:31,430 --> 00:11:42,199
this a regular habit build deploy

00:11:38,300 --> 00:11:45,160
configure early you know to real

00:11:42,199 --> 00:11:50,180
environments maybe not necessarily well

00:11:45,160 --> 00:11:53,240
production for sure but you know

00:11:50,180 --> 00:11:57,860
obviously starting with with a test or

00:11:53,240 --> 00:12:00,889
QA environment and do that early often

00:11:57,860 --> 00:12:05,750
failures are going to happen that's why

00:12:00,889 --> 00:12:11,420
you know we practice this and you know

00:12:05,750 --> 00:12:13,790
make deployment to production but by

00:12:11,420 --> 00:12:16,910
doing this often you know make that a

00:12:13,790 --> 00:12:21,230
lower risk event so that when failures

00:12:16,910 --> 00:12:31,970
happen you're prepared to to fix it to

00:12:21,230 --> 00:12:34,959
redeploy and have that not be you know a

00:12:31,970 --> 00:12:34,959
big disaster

00:12:39,709 --> 00:12:52,499
so as part of this what are what our

00:12:44,339 --> 00:12:54,720
suite allows for is dynamic build

00:12:52,499 --> 00:12:57,449
automation and acceleration and then

00:12:54,720 --> 00:13:02,689
also dynamic package and deploy

00:12:57,449 --> 00:13:07,350
automation and then also provisioning of

00:13:02,689 --> 00:13:13,339
machines in either a private or a public

00:13:07,350 --> 00:13:13,339
cloud that's the that's the general idea

00:13:25,560 --> 00:13:36,160
so basically we want you know we want

00:13:33,579 --> 00:13:40,779
speed we want consistency control the

00:13:36,160 --> 00:13:44,079
process insight into what's going on at

00:13:40,779 --> 00:13:47,199
any given point in the process so that

00:13:44,079 --> 00:13:49,360
there can be straightforward handoff

00:13:47,199 --> 00:13:55,959
between the software development teams

00:13:49,360 --> 00:13:58,000
and IT operations and that you know the

00:13:55,959 --> 00:14:01,449
definition of these processes are

00:13:58,000 --> 00:14:06,370
standardized and centralized in some

00:14:01,449 --> 00:14:10,360
fashion so that's at any given point a

00:14:06,370 --> 00:14:18,190
person can look at the definition of a

00:14:10,360 --> 00:14:26,050
given deployment given build and see

00:14:18,190 --> 00:14:31,060
into what goes into that process and I

00:14:26,050 --> 00:14:35,439
think now also the capability that we

00:14:31,060 --> 00:14:38,019
have not just our company but all of us

00:14:35,439 --> 00:14:39,670
have to to use these these cloud

00:14:38,019 --> 00:14:44,430
environments these virtualized

00:14:39,670 --> 00:14:51,670
environments gives us an opportunity to

00:14:44,430 --> 00:14:53,110
to control and line up the development

00:14:51,670 --> 00:14:56,560
and production environments in such a

00:14:53,110 --> 00:14:58,870
way that you avoid this this drift

00:14:56,560 --> 00:15:03,880
between the between the environments

00:14:58,870 --> 00:15:07,870
that that can often happen when well

00:15:03,880 --> 00:15:12,060
when using in the old way of doing

00:15:07,870 --> 00:15:12,060
things when using physical servers so

00:15:12,449 --> 00:15:20,920
okay so as far as what we specifically

00:15:16,269 --> 00:15:27,279
do that's different or we like to think

00:15:20,920 --> 00:15:29,649
of as different the architecture of our

00:15:27,279 --> 00:15:32,980
system is basically for any any of these

00:15:29,649 --> 00:15:35,610
build deployment package configure

00:15:32,980 --> 00:15:35,610
processes

00:15:36,960 --> 00:15:44,320
there's basically a template a model

00:15:41,730 --> 00:15:47,880
objects in a sense that you can

00:15:44,320 --> 00:15:51,910
instantiate to do those different tasks

00:15:47,880 --> 00:15:54,520
what we refer to them as build and

00:15:51,910 --> 00:15:57,850
deployment services and the

00:15:54,520 --> 00:16:03,040
instantiation 'he's we refer to as as

00:15:57,850 --> 00:16:05,140
target definitions i think that just on

00:16:03,040 --> 00:16:08,760
the words themselves should be fairly

00:16:05,140 --> 00:16:12,430
intuitive but basically the templates

00:16:08,760 --> 00:16:16,240
are how you maximize reuse and and make

00:16:12,430 --> 00:16:20,530
the system dynamic make it able to

00:16:16,240 --> 00:16:22,480
respond to change quickly across all

00:16:20,530 --> 00:16:25,300
your applications you know make a change

00:16:22,480 --> 00:16:29,740
the template that can that change will

00:16:25,300 --> 00:16:32,100
then propagate through throughout all

00:16:29,740 --> 00:16:36,760
the applications that use that template

00:16:32,100 --> 00:16:41,800
and and really in our experience you

00:16:36,760 --> 00:16:43,900
know even large enterprises with scores

00:16:41,800 --> 00:16:47,980
of applications using different

00:16:43,900 --> 00:16:50,170
technologies and platforms in some cases

00:16:47,980 --> 00:16:53,020
only need a handful of these templates

00:16:50,170 --> 00:16:58,780
to define their their their build and

00:16:53,020 --> 00:17:02,320
deploy process so once you have these

00:16:58,780 --> 00:17:07,420
templates the other two important

00:17:02,320 --> 00:17:10,900
ingredients are central server the store

00:17:07,420 --> 00:17:15,339
of the templates and and the Canaries

00:17:10,900 --> 00:17:19,740
configuration environmental and target

00:17:15,339 --> 00:17:22,660
configuration data and then an agent on

00:17:19,740 --> 00:17:25,360
the actual machine where where the build

00:17:22,660 --> 00:17:28,300
or the deploy is going to happen and

00:17:25,360 --> 00:17:30,640
then a rules engine to to process the

00:17:28,300 --> 00:17:35,730
templates to say okay given this input

00:17:30,640 --> 00:17:35,730
what do I go and what do I go and do

00:17:40,330 --> 00:17:47,090
the the rules engine is is also pretty

00:17:44,029 --> 00:17:50,509
important because it it's doing

00:17:47,090 --> 00:17:55,659
dependency analysis and scanning and and

00:17:50,509 --> 00:17:55,659
then reporting after the process is done

00:17:56,289 --> 00:18:05,870
so I'm sure some of you were wondering

00:18:00,649 --> 00:18:07,909
where the Pearl comes in well for us it

00:18:05,870 --> 00:18:11,210
pearl is the glue pearl is what we make

00:18:07,909 --> 00:18:14,240
our templates out of and since our rules

00:18:11,210 --> 00:18:16,190
engine is written in C and this this

00:18:14,240 --> 00:18:21,889
tight relationship that pearl shares

00:18:16,190 --> 00:18:28,340
with see that's that's why we chose

00:18:21,889 --> 00:18:31,159
pearl to make our templates so it's

00:18:28,340 --> 00:18:36,470
pearl is the glue or the duct tape if

00:18:31,159 --> 00:18:40,639
you prefer basically the way this works

00:18:36,470 --> 00:18:42,440
our rules engine populates template

00:18:40,639 --> 00:18:44,299
scripts that we have the template

00:18:42,440 --> 00:18:46,039
scripts being written in perl with

00:18:44,299 --> 00:18:49,700
configuration data that it reads from

00:18:46,039 --> 00:18:52,399
the central server and then combines

00:18:49,700 --> 00:18:57,409
that with scanning that it does on the

00:18:52,399 --> 00:18:59,539
file system based on that the target the

00:18:57,409 --> 00:19:02,119
target configuration data that that you

00:18:59,539 --> 00:19:07,220
pass to it and then what actually

00:19:02,119 --> 00:19:10,549
populates in our pearl templates are our

00:19:07,220 --> 00:19:14,690
own custom pearl objects for managing

00:19:10,549 --> 00:19:19,580
files and paths and options you know

00:19:14,690 --> 00:19:24,950
usually enlists or associative arrays

00:19:19,580 --> 00:19:32,299
and then the templates process all that

00:19:24,950 --> 00:19:34,850
data so that well that those those pearl

00:19:32,299 --> 00:19:38,929
objects allow the templates to process

00:19:34,850 --> 00:19:43,039
the data in a way that it's you know we

00:19:38,929 --> 00:19:46,610
can present it then to whatever actually

00:19:43,039 --> 00:19:49,490
is going to to do the build you know the

00:19:46,610 --> 00:19:53,850
compiler in sort of

00:19:49,490 --> 00:19:56,400
as I said our roots of thinking come

00:19:53,850 --> 00:20:00,150
from from build management but of course

00:19:56,400 --> 00:20:04,020
you know if you need to to package or

00:20:00,150 --> 00:20:10,410
deploy or you know configure properties

00:20:04,020 --> 00:20:23,659
files this was all done in these pearl

00:20:10,410 --> 00:20:23,659
templates so the argument for see I

00:20:25,789 --> 00:20:35,630
think probably I mean I I I didn't write

00:20:30,780 --> 00:20:43,080
the system so it's hard to say the I

00:20:35,630 --> 00:20:44,669
would say legacy in the sense that when

00:20:43,080 --> 00:20:50,520
that when the tool's first written pearl

00:20:44,669 --> 00:20:52,710
was still kind of young I mean right the

00:20:50,520 --> 00:20:56,130
company was started I guess maybe I

00:20:52,710 --> 00:20:58,710
don't know my history well enough from

00:20:56,130 --> 00:21:02,850
you know from our perspective you know

00:20:58,710 --> 00:21:05,490
the folks that that developed it you

00:21:02,850 --> 00:21:08,780
know back in nineteen ninety-five I

00:21:05,490 --> 00:21:13,500
think pearl was still kind of young and

00:21:08,780 --> 00:21:16,770
and you know the the architect of the

00:21:13,500 --> 00:21:19,909
above the system was familiar and

00:21:16,770 --> 00:21:23,510
comfortable with with see I think speed

00:21:19,909 --> 00:21:26,400
isn't is an important part of it

00:21:23,510 --> 00:21:30,020
although you know pearl does pretty good

00:21:26,400 --> 00:21:33,210
on that a lot of times but yeah I think

00:21:30,020 --> 00:21:35,159
legacy would be the other reason just

00:21:33,210 --> 00:21:37,740
that's that's how it was designed to

00:21:35,159 --> 00:21:41,100
begin with but certainly the the

00:21:37,740 --> 00:21:45,299
flexibility that that pearl gives you I

00:21:41,100 --> 00:21:47,789
think makes it very appropriate choice

00:21:45,299 --> 00:21:49,500
for for the templates because right you

00:21:47,789 --> 00:21:52,230
know these these tools that we have to

00:21:49,500 --> 00:21:55,440
interact with to to build and package

00:21:52,230 --> 00:21:59,380
and deploy and configure it's it's

00:21:55,440 --> 00:22:03,220
always it's it's in constant flux

00:21:59,380 --> 00:22:06,040
so besides besides pearl being the glue

00:22:03,220 --> 00:22:08,170
though you can you can also think of it

00:22:06,040 --> 00:22:11,050
but sort of besides what the rules

00:22:08,170 --> 00:22:14,170
engine does you can think of pearl as

00:22:11,050 --> 00:22:16,930
the workhorse of the application because

00:22:14,170 --> 00:22:20,680
it's doing most of the process execution

00:22:16,930 --> 00:22:22,900
and file i/o and then you know

00:22:20,680 --> 00:22:26,020
collection and formatting of the output

00:22:22,900 --> 00:22:31,060
of these processes to to pass it then to

00:22:26,020 --> 00:22:43,810
our logging and reporting demon which is

00:22:31,060 --> 00:22:46,590
also written in C let's see yeah so you

00:22:43,810 --> 00:22:50,020
know we have to we have to execute

00:22:46,590 --> 00:22:54,760
various processes and you know read and

00:22:50,020 --> 00:22:59,590
write from files and format this this

00:22:54,760 --> 00:23:14,290
data this output and pearls a natural

00:22:59,590 --> 00:23:18,190
fit for that so from this point there's

00:23:14,290 --> 00:23:21,160
not too much specifically about pearl at

00:23:18,190 --> 00:23:25,770
this point right we have to the design

00:23:21,160 --> 00:23:25,770
of our tool is to support all manner of

00:23:25,920 --> 00:23:39,910
applications and platforms and you know

00:23:33,280 --> 00:23:44,980
a lot of that is is sort of typical well

00:23:39,910 --> 00:23:51,600
typical maybe I guess the word might be

00:23:44,980 --> 00:23:56,260
legacy C and C++ builds and Java and

00:23:51,600 --> 00:24:03,160
compiled compiled applications compared

00:23:56,260 --> 00:24:04,720
to newer web apps that are that don't

00:24:03,160 --> 00:24:08,860
use a compiled language that are using

00:24:04,720 --> 00:24:11,660
interpreted language but the basic idea

00:24:08,860 --> 00:24:14,820
is we have this this

00:24:11,660 --> 00:24:18,450
command center that that handles sort of

00:24:14,820 --> 00:24:24,360
basic execution interaction with the

00:24:18,450 --> 00:24:26,520
remote agents and this is the the

00:24:24,360 --> 00:24:30,080
central location and the place that we

00:24:26,520 --> 00:24:35,520
define all of our integrations and

00:24:30,080 --> 00:24:42,140
templates that are that are used by this

00:24:35,520 --> 00:24:48,030
by the build system well DevOps system

00:24:42,140 --> 00:24:51,390
you can see I still think of us as a

00:24:48,030 --> 00:24:56,160
build tool even though we're fast moving

00:24:51,390 --> 00:24:59,640
into you know DevOps as as being sort of

00:24:56,160 --> 00:25:05,220
an integrated discipline that includes a

00:24:59,640 --> 00:25:09,890
lot more than just build the

00:25:05,220 --> 00:25:15,380
implementation architecture so the well

00:25:09,890 --> 00:25:25,760
yeah okay the so the server that manages

00:25:15,380 --> 00:25:32,130
all that is as a it's written in Java

00:25:25,760 --> 00:25:37,620
it's a it's a java web app and then the

00:25:32,130 --> 00:25:41,310
the GUI there's a web GUI that we use

00:25:37,620 --> 00:25:43,940
GWT force also Java and then there's an

00:25:41,310 --> 00:25:46,740
eclipse there's also no eclipse GUI

00:25:43,940 --> 00:25:49,910
because we do integrations with with

00:25:46,740 --> 00:25:57,630
eclipse and also just have a standalone

00:25:49,910 --> 00:26:00,630
rich client that's eclipse-based yeah i

00:25:57,630 --> 00:26:02,490
mean the well there's there's only so

00:26:00,630 --> 00:26:05,300
many components right so that the server

00:26:02,490 --> 00:26:08,280
and the remote agent are written in java

00:26:05,300 --> 00:26:11,280
as i said before the rules engine and

00:26:08,280 --> 00:26:14,280
the logging and reporting demon are

00:26:11,280 --> 00:26:19,330
written in c and the glue that holds

00:26:14,280 --> 00:26:24,460
holds it together is pearl so

00:26:19,330 --> 00:26:28,460
mojo is just sort of in some sense a

00:26:24,460 --> 00:26:32,179
well we we term it's a workflow engine

00:26:28,460 --> 00:26:34,520
it's a it's analogous to something like

00:26:32,179 --> 00:26:38,590
Hudson or cruise control just you know

00:26:34,520 --> 00:26:43,299
execute scripts execute processes so

00:26:38,590 --> 00:26:47,530
Meister what Meister is providing is the

00:26:43,299 --> 00:26:51,169
dynamic aspect of the build process

00:26:47,530 --> 00:26:54,530
these templates scripts that you know

00:26:51,169 --> 00:26:56,890
the template defines how you know

00:26:54,530 --> 00:27:00,110
foreign for an organization how we build

00:26:56,890 --> 00:27:04,100
you know a websphere web service or

00:27:00,110 --> 00:27:06,409
something like that and so that allows

00:27:04,100 --> 00:27:08,630
you that gives you control over over the

00:27:06,409 --> 00:27:11,090
process over over the logic that drives

00:27:08,630 --> 00:27:15,400
the build in such a way that you can

00:27:11,090 --> 00:27:18,440
quickly respond to to any changes and

00:27:15,400 --> 00:27:21,880
you know given that you're you're you're

00:27:18,440 --> 00:27:27,169
taking in some cases hundreds and or

00:27:21,880 --> 00:27:30,530
well I guess it depends but many many

00:27:27,169 --> 00:27:32,450
scripts and centralizing them into to

00:27:30,530 --> 00:27:35,299
one location and and reducing the number

00:27:32,450 --> 00:27:39,039
of scripts significantly that's going to

00:27:35,299 --> 00:27:41,059
simplify the handoff between teams

00:27:39,039 --> 00:27:43,400
because instead of you know these

00:27:41,059 --> 00:27:47,000
one-off script driven processes you have

00:27:43,400 --> 00:27:53,840
these model model driven processes that

00:27:47,000 --> 00:27:56,659
are doing your build and you know one

00:27:53,840 --> 00:27:59,510
one thing that I haven't mentioned yet i

00:27:56,659 --> 00:28:02,480
think is pretty important because of the

00:27:59,510 --> 00:28:04,760
dependency analysis that we also do

00:28:02,480 --> 00:28:07,880
during this process that allows us to do

00:28:04,760 --> 00:28:09,409
an incremental build to do and to

00:28:07,880 --> 00:28:13,820
accelerate builds because you only need

00:28:09,409 --> 00:28:18,140
to build what what changed and a similar

00:28:13,820 --> 00:28:19,640
thing happens on the deployment side

00:28:18,140 --> 00:28:23,900
right we can we can do an incremental

00:28:19,640 --> 00:28:28,669
deploy because we know what changed and

00:28:23,900 --> 00:28:31,250
what the impact of that change was we

00:28:28,669 --> 00:28:32,550
have integrations with the ID with

00:28:31,250 --> 00:28:39,180
various ID well

00:28:32,550 --> 00:28:42,360
eclipse in visual studio two to allow

00:28:39,180 --> 00:28:44,880
this this process to to happen inside

00:28:42,360 --> 00:28:47,250
the IDE and then easily move to an

00:28:44,880 --> 00:28:54,030
environment where that happens outside

00:28:47,250 --> 00:28:57,690
the IDE and you don't necessarily need

00:28:54,030 --> 00:29:00,480
to use our workflow the mojo command

00:28:57,690 --> 00:29:03,720
center for for driving this process you

00:29:00,480 --> 00:29:13,500
can you know plug plug us into a tool

00:29:03,720 --> 00:29:15,540
like Hudson so yeah as I was just saying

00:29:13,500 --> 00:29:16,920
because we have incremental binary

00:29:15,540 --> 00:29:19,190
management and we're managing those

00:29:16,920 --> 00:29:25,200
dependency relationships that allows us

00:29:19,190 --> 00:29:29,010
for our deploy plus product to do

00:29:25,200 --> 00:29:34,110
incremental deploy and you know provide

00:29:29,010 --> 00:29:36,530
insight in insight to to the deploy

00:29:34,110 --> 00:29:36,530
process

00:29:43,650 --> 00:29:54,030
so deployment is basically it deployed

00:29:52,050 --> 00:29:57,030
plus product is a similar story to our

00:29:54,030 --> 00:30:02,250
build product there are templates and a

00:29:57,030 --> 00:30:04,500
rules engine and you you know the the

00:30:02,250 --> 00:30:07,770
way to do your deploys is basically to

00:30:04,500 --> 00:30:13,650
instantiate one of the templates for

00:30:07,770 --> 00:30:17,610
deployment and because it's using

00:30:13,650 --> 00:30:19,730
because the these templates and and the

00:30:17,610 --> 00:30:23,250
tool interacts with the central

00:30:19,730 --> 00:30:29,250
knowledge base we call it the knowledge

00:30:23,250 --> 00:30:32,760
base server of this information all the

00:30:29,250 --> 00:30:39,180
information about deployments are stored

00:30:32,760 --> 00:30:41,460
in a central server location and you

00:30:39,180 --> 00:30:45,360
know you have logs and reports for for

00:30:41,460 --> 00:30:50,240
the deployment process the last piece of

00:30:45,360 --> 00:30:54,960
the puzzle and this is once still

00:30:50,240 --> 00:30:59,420
developing for us is what we call the

00:30:54,960 --> 00:31:05,700
cloud builder part of the product and

00:30:59,420 --> 00:31:07,050
you know it's become apparent to us you

00:31:05,700 --> 00:31:11,970
know since we've been taking this

00:31:07,050 --> 00:31:16,350
approach for some time that you know

00:31:11,970 --> 00:31:20,180
using cloud or virtual images of

00:31:16,350 --> 00:31:24,030
machines to manage your environment

00:31:20,180 --> 00:31:28,170
that's a similar sort of approach right

00:31:24,030 --> 00:31:30,690
to to the templates for the for the

00:31:28,170 --> 00:31:37,950
build and deployment process we we can

00:31:30,690 --> 00:31:41,430
have a spin up in images in in whichever

00:31:37,950 --> 00:31:44,550
environment we need to quickly and be be

00:31:41,430 --> 00:31:48,380
sure that that that image that we're

00:31:44,550 --> 00:31:52,710
using is is is what we want to be using

00:31:48,380 --> 00:31:54,190
and then you know basically you know

00:31:52,710 --> 00:31:57,940
spin up a

00:31:54,190 --> 00:32:02,429
a cloud image do a bill do automated

00:31:57,940 --> 00:32:07,360
tests to do deployments to that

00:32:02,429 --> 00:32:09,039
environment and and then you know spin

00:32:07,360 --> 00:32:12,820
it spin it down when it's when it's not

00:32:09,039 --> 00:32:19,600
needed so so whereas organizations might

00:32:12,820 --> 00:32:22,960
have previously needed you know handful

00:32:19,600 --> 00:32:26,759
of physical servers to handle handle all

00:32:22,960 --> 00:32:32,169
of this you know it can be done on one

00:32:26,759 --> 00:32:36,909
server or well yeah you know one

00:32:32,169 --> 00:32:46,000
physical server and then virtual

00:32:36,909 --> 00:32:49,809
environments on that on that hardware so

00:32:46,000 --> 00:32:56,049
I think I don't there's not too much

00:32:49,809 --> 00:32:58,720
more that I think is is relevant for you

00:32:56,049 --> 00:33:06,269
guys but I don't know any questions at

00:32:58,720 --> 00:33:06,269
this point I guess right

00:33:08,400 --> 00:33:18,070
so what actually we provide is is a

00:33:15,130 --> 00:33:26,200
front end and an integration to a

00:33:18,070 --> 00:33:28,420
product by CA that is that they've

00:33:26,200 --> 00:33:30,580
released recently I guess it's now been

00:33:28,420 --> 00:33:33,670
about three years and they keep changing

00:33:30,580 --> 00:33:39,910
the name of it I think they originally

00:33:33,670 --> 00:33:42,130
called it what did they call it virtual

00:33:39,910 --> 00:33:44,140
automation and then they they sort

00:33:42,130 --> 00:33:46,030
integrated it with their other tools for

00:33:44,140 --> 00:33:48,840
managing physical servers now they call

00:33:46,030 --> 00:33:51,070
it server automation I think so

00:33:48,840 --> 00:33:54,550
basically what what we provide with

00:33:51,070 --> 00:33:57,250
cloud builders is a front-end and also

00:33:54,550 --> 00:33:59,560
you know integration with that such that

00:33:57,250 --> 00:34:03,880
you know our data that that we collect

00:33:59,560 --> 00:34:11,290
and manage can be passed on to those

00:34:03,880 --> 00:34:14,100
cloud environments let's see I think

00:34:11,290 --> 00:34:14,100
that's the last slide

00:34:28,279 --> 00:34:39,559
yeah in any other questions at this

00:34:31,319 --> 00:34:39,559
point right

00:34:45,260 --> 00:34:50,500
process for that

00:34:47,929 --> 00:34:50,500
why

00:34:55,720 --> 00:35:06,230
right so what's basically that that part

00:35:01,640 --> 00:35:10,880
of of the product is still still

00:35:06,230 --> 00:35:15,619
developing and basically win when we

00:35:10,880 --> 00:35:24,140
have a new customer we work with them to

00:35:15,619 --> 00:35:26,510
help define either to to define new

00:35:24,140 --> 00:35:29,960
processes for that or or reuse existing

00:35:26,510 --> 00:35:33,260
templates right you know basically every

00:35:29,960 --> 00:35:36,589
customer that that we work with we you

00:35:33,260 --> 00:35:38,180
know we gain more knowledge of different

00:35:36,589 --> 00:35:40,640
types of applications different types of

00:35:38,180 --> 00:35:42,680
platforms and and how you build

00:35:40,640 --> 00:35:48,920
applications and deploy applications for

00:35:42,680 --> 00:35:53,290
that that language that that platform so

00:35:48,920 --> 00:35:57,140
we provide as part of our knowledge base

00:35:53,290 --> 00:36:01,780
right existing templates for for for

00:35:57,140 --> 00:36:04,130
doing build and deployments for for all

00:36:01,780 --> 00:36:06,319
basically all the tools that we know how

00:36:04,130 --> 00:36:10,490
to how to work with and if we don't know

00:36:06,319 --> 00:36:13,400
how to work with a tool or platform

00:36:10,490 --> 00:36:15,829
already we work with the customer to to

00:36:13,400 --> 00:36:18,230
define that so that you know there they

00:36:15,829 --> 00:36:22,040
have a standardized process in that

00:36:18,230 --> 00:36:24,369
they're not writing one-off scripts for

00:36:22,040 --> 00:36:24,369
that process

00:36:28,820 --> 00:36:41,580
you know to be honest no we I think just

00:36:39,060 --> 00:36:44,100
because of the fact that you know we we

00:36:41,580 --> 00:36:48,390
haven't had a customer that that uses

00:36:44,100 --> 00:36:50,100
pearl in that way so again this maybe it

00:36:48,390 --> 00:36:53,700
wasn't too clear from from from the

00:36:50,100 --> 00:36:56,580
get-go but this talk is more about how

00:36:53,700 --> 00:36:59,550
you know we use pearl in our commercial

00:36:56,580 --> 00:37:02,370
product rather than you know how I mean

00:36:59,550 --> 00:37:05,940
it's I would like to be able to give you

00:37:02,370 --> 00:37:09,360
guys all the answers 444 how to use our

00:37:05,940 --> 00:37:12,410
art tool to to work with with pearl

00:37:09,360 --> 00:37:15,540
applications to you know to build and

00:37:12,410 --> 00:37:19,170
deploy them but really what we have is a

00:37:15,540 --> 00:37:22,560
framework that could be could be used

00:37:19,170 --> 00:37:27,020
could be applied to two purl

00:37:22,560 --> 00:37:33,660
applications but we don't yet have

00:37:27,020 --> 00:37:38,030
templates for for applications though we

00:37:33,660 --> 00:37:38,030
do rely on on Pearl ourselves

00:37:52,310 --> 00:38:01,340
so if there's there's nothing else I

00:37:55,350 --> 00:38:04,190
think that's it for me hope I at least

00:38:01,340 --> 00:38:11,310
gave you gave you guys some ideas on I

00:38:04,190 --> 00:38:15,240
mean I think even if if you weren't to

00:38:11,310 --> 00:38:18,540
use our tool some of the ideas that that

00:38:15,240 --> 00:38:20,610
we use in the tool you know having

00:38:18,540 --> 00:38:22,370
templates for the process and you know I

00:38:20,610 --> 00:38:29,670
realize there are other tools that do

00:38:22,370 --> 00:38:33,090
similar things to this but you know in

00:38:29,670 --> 00:38:34,950
in in the history of of our company

00:38:33,090 --> 00:38:37,650
we've we've encountered a lot of people

00:38:34,950 --> 00:38:41,250
who who do you actually do use pearl for

00:38:37,650 --> 00:38:47,390
their for their own homegrown custom

00:38:41,250 --> 00:38:52,200
solutions and it seems a natural fit

00:38:47,390 --> 00:38:55,830
because of the flexibility and you know

00:38:52,200 --> 00:39:00,500
speed and sort of low low level

00:38:55,830 --> 00:39:00,500
management interaction with with the OS

00:39:03,050 --> 00:39:11,610
so yeah besides besides the templates

00:39:09,210 --> 00:39:14,880
the the you know that we have written in

00:39:11,610 --> 00:39:18,360
perl i think the other major components

00:39:14,880 --> 00:39:22,170
are the central server the remote agents

00:39:18,360 --> 00:39:28,500
and some sort of some sort of rules

00:39:22,170 --> 00:39:36,060
engine I mean you probably could use or

00:39:28,500 --> 00:39:41,490
abuse make or aunt or some other build

00:39:36,060 --> 00:39:43,170
tool to as a rules engine about to

00:39:41,490 --> 00:39:45,560
interact with with templates in this way

00:39:43,170 --> 00:39:45,560
so

00:39:48,340 --> 00:39:58,850
yeah I guess I didn't speak to that

00:39:52,630 --> 00:40:01,580
directly but part of part of the whole

00:39:58,850 --> 00:40:04,450
process is naturally going to be some

00:40:01,580 --> 00:40:13,340
interaction with version control and

00:40:04,450 --> 00:40:17,270
really the that the value that we add in

00:40:13,340 --> 00:40:20,780
that space you know besides just going

00:40:17,270 --> 00:40:24,470
and calling a version control tool to

00:40:20,780 --> 00:40:27,530
get updates or that you might need is

00:40:24,470 --> 00:40:34,150
because we're actually managing the

00:40:27,530 --> 00:40:38,930
process that compiles or builds or

00:40:34,150 --> 00:40:42,920
packages the application we can interact

00:40:38,930 --> 00:40:45,320
with the version control tool to to

00:40:42,920 --> 00:40:51,010
determine exactly you know what version

00:40:45,320 --> 00:40:58,070
of a file from version control went into

00:40:51,010 --> 00:41:05,560
you know given binary a given release of

00:40:58,070 --> 00:41:16,670
an application so yeah thanks thanks for

00:41:05,560 --> 00:41:19,820
rights yeah the mm-hmm yeah so the the

00:41:16,670 --> 00:41:23,770
type of report that I'm referring to is

00:41:19,820 --> 00:41:23,770
what we call build audit report and

00:41:24,640 --> 00:41:37,880
that's that's another we're able to

00:41:33,470 --> 00:41:42,920
provide build audit differ ports you

00:41:37,880 --> 00:41:44,990
know by comparing different runs of the

00:41:42,920 --> 00:41:46,730
same build to to see what the

00:41:44,990 --> 00:41:49,070
differences were so so you have

00:41:46,730 --> 00:41:52,310
something something broken in version 3

00:41:49,070 --> 00:41:55,370
that wasn't broken version 2 you'd be

00:41:52,310 --> 00:41:57,340
able to see pretty quickly what what it

00:41:55,370 --> 00:42:00,010
was

00:41:57,340 --> 00:42:05,960
provided it's actually in source control

00:42:00,010 --> 00:42:10,160
that's that's always that's that that

00:42:05,960 --> 00:42:12,920
can be an issue but again that's the

00:42:10,160 --> 00:42:24,040
idea right it exposed the tool would

00:42:12,920 --> 00:42:27,430
expose that for you thanks yeah thanks

00:42:24,040 --> 00:42:27,430

YouTube URL: https://www.youtube.com/watch?v=NgXRsjNV-yo


