Title: Mike Schilli   Large scale deployments with Pogo at Yahoo!
Publication date: 2013-08-20
Playlist: YAPC::NA 2012
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:05,160
or did can I everybody hear me in the

00:00:02,220 --> 00:00:07,410
back doesn't my work cool I think I need

00:00:05,160 --> 00:00:11,610
to be like at this distance that I'm

00:00:07,410 --> 00:00:14,070
like to be on the video as well my name

00:00:11,610 --> 00:00:15,980
is Mike silly i work at yahoo and i'm

00:00:14,070 --> 00:00:20,480
working in a group that supporting

00:00:15,980 --> 00:00:24,630
operations by creating tools in order to

00:00:20,480 --> 00:00:28,949
roll out new releases of software really

00:00:24,630 --> 00:00:30,210
fast and in a way that it's highly

00:00:28,949 --> 00:00:33,329
scalable because you can imagine that

00:00:30,210 --> 00:00:36,510
yahoo runs a lot of servers and it's not

00:00:33,329 --> 00:00:38,520
unusual that we deploy two thousand or

00:00:36,510 --> 00:00:42,629
sometimes even tens of thousands of

00:00:38,520 --> 00:00:45,180
hosts at a time for a new release if you

00:00:42,629 --> 00:00:49,890
have a property that draws lots of

00:00:45,180 --> 00:00:51,899
traffic if you roll stuff out then you

00:00:49,890 --> 00:00:56,180
want to make sure that you roll as fast

00:00:51,899 --> 00:00:57,989
as possible and because you know

00:00:56,180 --> 00:01:00,960
operations doesn't want to sit around

00:00:57,989 --> 00:01:04,470
and wait for it and you want your stuff

00:01:00,960 --> 00:01:07,520
to show up quickly on the life site on

00:01:04,470 --> 00:01:10,830
the other hand you need to be careful

00:01:07,520 --> 00:01:13,170
wedging the site if you do that so you

00:01:10,830 --> 00:01:15,600
want to have some control over how fast

00:01:13,170 --> 00:01:19,580
you roll out and stop if something goes

00:01:15,600 --> 00:01:22,799
horribly wrong the system that we use is

00:01:19,580 --> 00:01:27,299
written in perl and it's been in use for

00:01:22,799 --> 00:01:31,430
several years and we've been working on

00:01:27,299 --> 00:01:34,740
open sourcing that till it's called Pogo

00:01:31,430 --> 00:01:38,009
so I gotta put in a huge disclaimer

00:01:34,740 --> 00:01:41,040
because Pogo is not production ready yet

00:01:38,009 --> 00:01:44,250
at least a version that we have in the

00:01:41,040 --> 00:01:46,320
open source world which on github but

00:01:44,250 --> 00:01:47,790
we're working feverishly on getting it

00:01:46,320 --> 00:01:51,060
done and my ass tonight will be that a

00:01:47,790 --> 00:01:54,899
month from now we're going to roll out

00:01:51,060 --> 00:01:58,049
of alpha version that you can work with

00:01:54,899 --> 00:02:01,619
and what we have right now is more like

00:01:58,049 --> 00:02:04,200
a demo version which is very limited but

00:02:01,619 --> 00:02:05,520
as I said it's been being finished up

00:02:04,200 --> 00:02:09,390
there are several people working on it

00:02:05,520 --> 00:02:13,560
and we hope that we have something for

00:02:09,390 --> 00:02:14,790
you guys soon now as

00:02:13,560 --> 00:02:18,660
good time by the way if you have

00:02:14,790 --> 00:02:21,270
anything that you want from the system

00:02:18,660 --> 00:02:24,330
and if you look at the code and and you

00:02:21,270 --> 00:02:28,400
want to put in something let us now

00:02:24,330 --> 00:02:31,349
we'll happily accepting patches for it

00:02:28,400 --> 00:02:34,470
so let me show you how pogo integrates

00:02:31,349 --> 00:02:38,220
in CI environment you can use it

00:02:34,470 --> 00:02:41,760
manually to I mean if you have a couple

00:02:38,220 --> 00:02:43,440
of servers and run pogo pogo will deploy

00:02:41,760 --> 00:02:45,350
stuff on these servers but typically

00:02:43,440 --> 00:02:50,370
it's using the CI process you have a

00:02:45,350 --> 00:02:52,650
code repo like a good repo or svn you

00:02:50,370 --> 00:02:56,090
check out coal in our regular basis

00:02:52,650 --> 00:02:58,709
using a tool see i tole like Hudson or

00:02:56,090 --> 00:03:04,769
something I run the tests we'd maybe

00:02:58,709 --> 00:03:06,870
create packages like like Debian

00:03:04,769 --> 00:03:10,680
packages or something like that and then

00:03:06,870 --> 00:03:14,610
you hand it over to a tool like pogo

00:03:10,680 --> 00:03:17,340
which is very limited in its use in that

00:03:14,610 --> 00:03:20,340
all it does is it connects to target

00:03:17,340 --> 00:03:22,200
hosts and then runs commands on these

00:03:20,340 --> 00:03:25,680
targets awesome whatever that command is

00:03:22,200 --> 00:03:28,950
is determined by you so you you choose

00:03:25,680 --> 00:03:33,239
whether you want to run a apt-get

00:03:28,950 --> 00:03:35,010
upgrade or updater like that or use

00:03:33,239 --> 00:03:37,980
puppet in order to configure your host

00:03:35,010 --> 00:03:42,290
in a certain way so all that pogo does

00:03:37,980 --> 00:03:48,720
is execute stuff on a huge number of

00:03:42,290 --> 00:03:51,569
targets so in in pocos case this is just

00:03:48,720 --> 00:03:54,750
usually a single command you specify

00:03:51,569 --> 00:03:57,209
what host you want to run it on what the

00:03:54,750 --> 00:03:58,709
command is and of course you could

00:03:57,209 --> 00:04:00,389
command could be anything could be a

00:03:58,709 --> 00:04:04,319
shell script that does something

00:04:00,389 --> 00:04:07,859
specific for every host or I mean the

00:04:04,319 --> 00:04:11,639
possibilities are endless at Yahoo what

00:04:07,859 --> 00:04:14,670
we do is we have a central database that

00:04:11,639 --> 00:04:16,739
determines how every host is supposed to

00:04:14,670 --> 00:04:21,060
look like so the host might be a web

00:04:16,739 --> 00:04:25,050
front end or database server or a cache

00:04:21,060 --> 00:04:26,820
and whenever you run a specific command

00:04:25,050 --> 00:04:29,190
on the part

00:04:26,820 --> 00:04:31,620
host the host goes back to the central

00:04:29,190 --> 00:04:33,090
database figures out what am I supposed

00:04:31,620 --> 00:04:35,280
to look like so the senator database

00:04:33,090 --> 00:04:42,060
would look say something like you need

00:04:35,280 --> 00:04:45,060
Apache 2.4 and mysql 5.3 and then the

00:04:42,060 --> 00:04:50,490
this command that runs on the host will

00:04:45,060 --> 00:04:54,720
then fetch it from either a central repo

00:04:50,490 --> 00:04:56,820
or a repo on one of many edge servers in

00:04:54,720 --> 00:05:00,360
order to bring that host into a desired

00:04:56,820 --> 00:05:03,900
state with the desired state being

00:05:00,360 --> 00:05:07,080
defined in the central repo this might

00:05:03,900 --> 00:05:11,210
be different in your case you might rely

00:05:07,080 --> 00:05:14,550
on a you ponder or like a repository

00:05:11,210 --> 00:05:19,530
with the Debian packages and it's

00:05:14,550 --> 00:05:22,650
totally up to you so if you run a

00:05:19,530 --> 00:05:28,200
command on many hosts ideally what you

00:05:22,650 --> 00:05:30,030
want to happen is this right so use you

00:05:28,200 --> 00:05:32,670
start to deployment process all in

00:05:30,030 --> 00:05:35,010
parallel and magically a couple seconds

00:05:32,670 --> 00:05:37,770
later everything is done but

00:05:35,010 --> 00:05:44,480
unfortunately that's not how it usually

00:05:37,770 --> 00:05:48,480
works if you have different applications

00:05:44,480 --> 00:05:50,610
you might have certain requirements for

00:05:48,480 --> 00:05:52,950
example you might have the requirement

00:05:50,610 --> 00:05:54,750
that you cannot take out more than

00:05:52,950 --> 00:05:58,140
twenty-five percent of your boxes

00:05:54,750 --> 00:06:01,050
because then it would melt down with the

00:05:58,140 --> 00:06:04,820
live traffic coming in so you wrestle a

00:06:01,050 --> 00:06:09,470
says you always have to have 75%

00:06:04,820 --> 00:06:13,770
availability on let's say the web front

00:06:09,470 --> 00:06:17,970
web servers also you might have a

00:06:13,770 --> 00:06:24,360
requirement that says the caching hose

00:06:17,970 --> 00:06:26,730
run software that requires the web

00:06:24,360 --> 00:06:30,570
front-ends to be updated first so you

00:06:26,730 --> 00:06:32,670
might have a dependency there so that

00:06:30,570 --> 00:06:35,550
you need to run your updates in a

00:06:32,670 --> 00:06:38,190
specific order so you for example you

00:06:35,550 --> 00:06:39,910
might have to start the caching house

00:06:38,190 --> 00:06:42,580
and also you have an

00:06:39,910 --> 00:06:46,000
lay here that says you can only take out

00:06:42,580 --> 00:06:48,100
one caching I was at a time and you need

00:06:46,000 --> 00:06:50,380
to wait until all of your caching holes

00:06:48,100 --> 00:06:54,370
are ready in order to proceed with the

00:06:50,380 --> 00:06:56,650
front ends and Pogo lets you do that

00:06:54,370 --> 00:06:58,990
because it lets you define sequences

00:06:56,650 --> 00:07:00,910
which is something like to the caching

00:06:58,990 --> 00:07:04,780
servers first and the web prominence

00:07:00,910 --> 00:07:09,760
afterwards it lets you parallel eyes so

00:07:04,780 --> 00:07:16,750
you can say I wand 100 hosts in in

00:07:09,760 --> 00:07:18,850
parallel and if let's say if let's have

00:07:16,750 --> 00:07:21,340
a smaller number let's say like three

00:07:18,850 --> 00:07:28,120
hosts in parallel right and then if you

00:07:21,340 --> 00:07:29,410
have a number of errors and let's say

00:07:28,120 --> 00:07:31,660
you started with three and then all of

00:07:29,410 --> 00:07:33,280
these three ho's fail where you going to

00:07:31,660 --> 00:07:35,050
do poker will stop at this point and say

00:07:33,280 --> 00:07:37,330
wait a minute you just violated this

00:07:35,050 --> 00:07:39,310
constraint you said you cannot take out

00:07:37,330 --> 00:07:41,260
more than three hosts but I just took

00:07:39,310 --> 00:07:43,570
out three hosts because the update

00:07:41,260 --> 00:07:45,580
command that you gave me failed on these

00:07:43,570 --> 00:07:49,030
boxes that's very important if you roll

00:07:45,580 --> 00:07:50,470
out stuff that you can ask Pogo to stop

00:07:49,030 --> 00:07:53,470
if something goes horribly wrong and

00:07:50,470 --> 00:07:55,930
then without you even manually checking

00:07:53,470 --> 00:07:58,690
every house poker will make sure that we

00:07:55,930 --> 00:08:02,100
will never violate these constraints

00:07:58,690 --> 00:08:04,960
that you've defined up front poker will

00:08:02,100 --> 00:08:08,890
figure out whether something went wrong

00:08:04,960 --> 00:08:11,530
or not by running pre and post hooks on

00:08:08,890 --> 00:08:14,560
your command so you you're welcome and

00:08:11,530 --> 00:08:17,890
in order to update something on a host

00:08:14,560 --> 00:08:19,870
and before it does that it runs a pre

00:08:17,890 --> 00:08:22,540
hook which is some kind of shell script

00:08:19,870 --> 00:08:26,110
usually or a perl script on that house

00:08:22,540 --> 00:08:28,900
that does something useful and if either

00:08:26,110 --> 00:08:30,460
the pre hook which runs before your

00:08:28,900 --> 00:08:34,419
command or the post hook which runs

00:08:30,460 --> 00:08:37,930
after you come on fails Pogo will mark

00:08:34,419 --> 00:08:41,969
that host as failed and will not it will

00:08:37,930 --> 00:08:44,200
count that into that threshold that

00:08:41,969 --> 00:08:48,550
determines whether it can still proceed

00:08:44,200 --> 00:08:50,740
or not and as I said progress command

00:08:48,550 --> 00:08:53,250
agnostic you can put in pretty much

00:08:50,740 --> 00:08:55,560
anything also regarding these hooks

00:08:53,250 --> 00:08:57,180
you can plug in any shell script any

00:08:55,560 --> 00:09:01,080
perl script anything that runs on that

00:08:57,180 --> 00:09:02,670
host so to come back to the previous

00:09:01,080 --> 00:09:05,340
example with the caching house that he

00:09:02,670 --> 00:09:07,380
can only take out one at a time the web

00:09:05,340 --> 00:09:09,840
front end servers that he can take out

00:09:07,380 --> 00:09:13,560
five at a time in order to do the update

00:09:09,840 --> 00:09:16,650
what happens if you configure pogo to do

00:09:13,560 --> 00:09:19,440
that is this so we'll start off with one

00:09:16,650 --> 00:09:21,720
caching host will make sure that one

00:09:19,440 --> 00:09:24,330
succeeds it will continue in a second

00:09:21,720 --> 00:09:26,940
and a third one and when it figures out

00:09:24,330 --> 00:09:30,810
that all the caches hosts are done we'll

00:09:26,940 --> 00:09:34,320
move on to the next link in the

00:09:30,810 --> 00:09:37,140
dependency chain and start with 5 web

00:09:34,320 --> 00:09:40,200
front-end service because we said we can

00:09:37,140 --> 00:09:42,960
take out twenty-five percent of all the

00:09:40,200 --> 00:09:45,300
web front-ends at at a time and it will

00:09:42,960 --> 00:09:49,500
continue to do that until everything is

00:09:45,300 --> 00:09:51,990
done everybody's happy so this

00:09:49,500 --> 00:09:54,030
particular configuration would look

00:09:51,990 --> 00:09:57,210
something like this we have a

00:09:54,030 --> 00:10:01,800
configuration file we tagged certain

00:09:57,210 --> 00:10:03,839
hosts with certain values so I in a very

00:10:01,800 --> 00:10:07,740
limited example i've used host one and

00:10:03,839 --> 00:10:11,339
house too as front end and hose three

00:10:07,740 --> 00:10:15,780
and host for as a back end and my

00:10:11,339 --> 00:10:19,650
sequence command that is listed right on

00:10:15,780 --> 00:10:21,180
hunger it determines that first we need

00:10:19,650 --> 00:10:24,420
to run all the back end hosts and

00:10:21,180 --> 00:10:27,990
followed by the front end hosts also the

00:10:24,420 --> 00:10:30,120
constraint clause that's listed at the

00:10:27,990 --> 00:10:34,740
end of this configuration file says that

00:10:30,120 --> 00:10:36,870
I can only take out five front end boxes

00:10:34,740 --> 00:10:39,720
at a time in order to run the upgrade

00:10:36,870 --> 00:10:42,630
and for the back end which was this cash

00:10:39,720 --> 00:10:47,670
in the previous example I'm defining

00:10:42,630 --> 00:10:51,300
that I'm running one update at a time if

00:10:47,670 --> 00:10:54,120
I then run my power command so these

00:10:51,300 --> 00:10:59,520
configurations are more or less global

00:10:54,120 --> 00:11:02,459
for your let's say for your company or

00:10:59,520 --> 00:11:06,150
for you can split it up in different

00:11:02,459 --> 00:11:10,340
namespaces and the apoco command

00:11:06,150 --> 00:11:15,630
and specifies a number of hosts within

00:11:10,340 --> 00:11:18,900
those configurations so for example if I

00:11:15,630 --> 00:11:21,780
wanted to run my update command which

00:11:18,900 --> 00:11:25,590
are just replaced by a simple date here

00:11:21,780 --> 00:11:27,510
in order to run some tests they're on my

00:11:25,590 --> 00:11:31,170
all of my front end in my back-end

00:11:27,510 --> 00:11:34,260
servers then I define my range here and

00:11:31,170 --> 00:11:36,630
huggable go back to the configuration

00:11:34,260 --> 00:11:38,280
figured out uh-huh front end is house 1

00:11:36,630 --> 00:11:41,160
and host two and back on this house 3 in

00:11:38,280 --> 00:11:45,150
house for and then we'll determine a

00:11:41,160 --> 00:11:47,660
schedule in order to execute these

00:11:45,150 --> 00:11:51,660
commands to enable you to follow along

00:11:47,660 --> 00:11:56,190
with what's going on when Pogo runs it's

00:11:51,660 --> 00:11:59,750
better the URL to you I a web UI and you

00:11:56,190 --> 00:12:03,000
can follow along what's happening there

00:11:59,750 --> 00:12:04,410
this is quite helpful in figuring out if

00:12:03,000 --> 00:12:06,690
something goes horribly wrong and it's

00:12:04,410 --> 00:12:10,170
also good if you want to go back and

00:12:06,690 --> 00:12:12,630
check out a job that you ran a couple of

00:12:10,170 --> 00:12:15,980
weeks ago figure out if everything went

00:12:12,630 --> 00:12:20,790
ok there or if there was something wrong

00:12:15,980 --> 00:12:24,510
the to look into that also you can you

00:12:20,790 --> 00:12:29,190
can figure out by the green bars they're

00:12:24,510 --> 00:12:31,250
not really visible as green bars there

00:12:29,190 --> 00:12:34,260
listen in sequence here which means that

00:12:31,250 --> 00:12:37,410
pogo because of some constraints that

00:12:34,260 --> 00:12:42,140
you've defined updated one host at a

00:12:37,410 --> 00:12:44,370
time if these timeline bars were all

00:12:42,140 --> 00:12:49,950
stacked on top of each other you'd see

00:12:44,370 --> 00:12:52,680
what Pogo ran in parallel so since

00:12:49,950 --> 00:12:56,430
problem can be used if you install Pogo

00:12:52,680 --> 00:13:00,630
system by several users you can check

00:12:56,430 --> 00:13:04,860
out what other people are doing so you

00:13:00,630 --> 00:13:06,630
might want to configure that to to your

00:13:04,860 --> 00:13:07,640
use case of course because sometimes you

00:13:06,630 --> 00:13:13,020
don't want to share with other people

00:13:07,640 --> 00:13:16,080
but at Yahoo we identify users on the

00:13:13,020 --> 00:13:18,300
web front end and then you can figure

00:13:16,080 --> 00:13:19,940
out pretty much was what everybody else

00:13:18,300 --> 00:13:22,890
is doing

00:13:19,940 --> 00:13:24,570
so this also means that if there's

00:13:22,890 --> 00:13:27,540
something wrong with the Pogo system you

00:13:24,570 --> 00:13:30,240
can figure out maybe there's multiple

00:13:27,540 --> 00:13:32,340
jobs that are currently failing and it's

00:13:30,240 --> 00:13:33,510
probably time to alert the Pogo team

00:13:32,340 --> 00:13:35,100
there's something wrong with with a

00:13:33,510 --> 00:13:36,240
software and if it's just your job thats

00:13:35,100 --> 00:13:43,430
hanging is probably something that you

00:13:36,240 --> 00:13:46,380
did every single host you can look at

00:13:43,430 --> 00:13:48,360
Interpol you I to figure out what

00:13:46,380 --> 00:13:52,230
happened on a particular house so it

00:13:48,360 --> 00:13:54,330
will list the command and it will list

00:13:52,230 --> 00:13:55,710
the commit the the client command that

00:13:54,330 --> 00:14:04,950
you've used in order to trigger their

00:13:55,710 --> 00:14:07,350
job on the Pogo system by the way so I

00:14:04,950 --> 00:14:10,080
said that the PO was not yet ready in

00:14:07,350 --> 00:14:12,720
the open source version but you can look

00:14:10,080 --> 00:14:15,360
at this UI which has been designed by

00:14:12,720 --> 00:14:16,800
the Yahoo you up you I folks I

00:14:15,360 --> 00:14:20,370
personally couldn't do something like

00:14:16,800 --> 00:14:24,900
that so it's really nifty javascript

00:14:20,370 --> 00:14:28,170
stuff and if you check out the github

00:14:24,900 --> 00:14:31,020
source and run the commands up there

00:14:28,170 --> 00:14:33,780
you'll get both an API server which is

00:14:31,020 --> 00:14:37,920
used by Pogo in order to query your data

00:14:33,780 --> 00:14:41,570
and to submit jobs to the system and if

00:14:37,920 --> 00:14:45,180
you also fire up Pogo dash UI which

00:14:41,570 --> 00:14:48,150
starts a simple web server that spits

00:14:45,180 --> 00:14:50,220
out a index.html file that contains all

00:14:48,150 --> 00:14:53,610
this JavaScript managing in order to

00:14:50,220 --> 00:14:55,650
drive that dynamic you I then if you

00:14:53,610 --> 00:15:00,089
point your browser to local host port

00:14:55,650 --> 00:15:01,890
5000 you'll see the data that's in there

00:15:00,089 --> 00:15:04,140
which is currently only canned data so

00:15:01,890 --> 00:15:07,890
it is all smoke and mirrors right now

00:15:04,140 --> 00:15:13,740
but hopefully we're going to get the

00:15:07,890 --> 00:15:15,630
real pogo data in there um in the

00:15:13,740 --> 00:15:18,600
previous client command i showed you how

00:15:15,630 --> 00:15:21,600
to run your front-end and back-end

00:15:18,600 --> 00:15:23,850
servers but you can also specify simple

00:15:21,600 --> 00:15:26,280
house in your range so in this case I

00:15:23,850 --> 00:15:29,430
don't want to deploy everything that

00:15:26,280 --> 00:15:32,070
it's covered in my configuration um but

00:15:29,430 --> 00:15:33,400
only host one and two and then poker

00:15:32,070 --> 00:15:36,070
we'll figure out in

00:15:33,400 --> 00:15:40,990
reduction in the configuration that okay

00:15:36,070 --> 00:15:43,270
host one and two for example are only in

00:15:40,990 --> 00:15:45,310
the front end group and front end has

00:15:43,270 --> 00:15:48,640
this constraint of Max parallel five so

00:15:45,310 --> 00:15:52,570
it will just update host one and host

00:15:48,640 --> 00:15:55,870
two in parallel and is done quickly with

00:15:52,570 --> 00:15:59,140
that again Pogo is currently available

00:15:55,870 --> 00:16:02,440
on github and the director is why tool

00:15:59,140 --> 00:16:06,820
shed so Yahoo stuff starts with a why

00:16:02,440 --> 00:16:09,160
for some reason and tulle satin / Pogo

00:16:06,820 --> 00:16:11,170
and on the master branch you can follow

00:16:09,160 --> 00:16:13,260
along what what what's happening as I

00:16:11,170 --> 00:16:18,670
said there's currently three people

00:16:13,260 --> 00:16:21,640
working on it and we're really pressing

00:16:18,670 --> 00:16:24,310
on getting it down i would estimate that

00:16:21,640 --> 00:16:31,510
probably in a month or so you'll have

00:16:24,310 --> 00:16:33,640
something to play with also we at yahoo

00:16:31,510 --> 00:16:38,020
internally will be using this

00:16:33,640 --> 00:16:41,740
open-source version and it adds some

00:16:38,020 --> 00:16:44,410
plugins to it so did this might be

00:16:41,740 --> 00:16:45,730
applicable for you as well if you for

00:16:44,410 --> 00:16:48,330
example if you have a different source

00:16:45,730 --> 00:16:51,130
of truth for what your service look like

00:16:48,330 --> 00:16:52,570
you might not want to specify everything

00:16:51,130 --> 00:16:54,760
in the sea animal configuration file

00:16:52,570 --> 00:16:59,800
that we use we might have a database

00:16:54,760 --> 00:17:02,620
that says this host belongs to this

00:16:59,800 --> 00:17:05,560
group of hosts for example and we

00:17:02,620 --> 00:17:07,750
definitely need that within yah so we

00:17:05,560 --> 00:17:09,910
were using the open source version plus

00:17:07,750 --> 00:17:14,350
plugins in order to adapt to our

00:17:09,910 --> 00:17:17,260
internal infrastructure so that that was

00:17:14,350 --> 00:17:21,370
the project as it is on github right now

00:17:17,260 --> 00:17:25,570
it is also hooked up to a CI test

00:17:21,370 --> 00:17:29,020
service called Travis CI a-- Corp dot

00:17:25,570 --> 00:17:30,910
org which is a really nice still if you

00:17:29,020 --> 00:17:34,660
have a project on github a pearl project

00:17:30,910 --> 00:17:37,930
and it takes you literally three minutes

00:17:34,660 --> 00:17:39,810
I'd say in order to get CI working which

00:17:37,930 --> 00:17:44,910
means basically it checks out your

00:17:39,810 --> 00:17:47,040
github repository and runs a test suite

00:17:44,910 --> 00:17:50,180
as soon as you check something it has

00:17:47,040 --> 00:17:54,870
anybody used here Travis CI dork

00:17:50,180 --> 00:17:59,340
virtually unknown as fascinating so the

00:17:54,870 --> 00:18:03,150
way it works is that Travis CI will ask

00:17:59,340 --> 00:18:06,060
you to log in to github and look at your

00:18:03,150 --> 00:18:08,340
repository and it will give you a list

00:18:06,060 --> 00:18:11,870
of buttons for every single repository

00:18:08,340 --> 00:18:15,390
that you own and you click the on button

00:18:11,870 --> 00:18:20,790
which is all it virtually all it takes

00:18:15,390 --> 00:18:23,510
to get your github project see I tested

00:18:20,790 --> 00:18:26,580
on an ongoing basis so Travis thought

00:18:23,510 --> 00:18:29,250
Travis CI dot orc will then install a

00:18:26,580 --> 00:18:31,590
hook on github which will be triggered

00:18:29,250 --> 00:18:33,420
every time you check something in and as

00:18:31,590 --> 00:18:35,430
soon as you do that it's fascinating the

00:18:33,420 --> 00:18:37,980
war so you have a travesty i dot org

00:18:35,430 --> 00:18:39,480
window and you have a command line and

00:18:37,980 --> 00:18:41,070
you check something in to get up and it

00:18:39,480 --> 00:18:42,750
will immediately trigger the tests we

00:18:41,070 --> 00:18:43,770
didn't run it and send an email of

00:18:42,750 --> 00:18:45,810
something that's wrong something but

00:18:43,770 --> 00:18:49,680
very close off if we have time at the

00:18:45,810 --> 00:18:55,470
end then I can go into that a little bit

00:18:49,680 --> 00:18:57,090
more so that was a lot of stuff I wonder

00:18:55,470 --> 00:18:59,190
if you have any questions so far before

00:18:57,090 --> 00:19:02,220
we go into the gory details I mean it's

00:18:59,190 --> 00:19:03,960
a lot more complicated than internally

00:19:02,220 --> 00:19:05,580
then it looks from the outside so I

00:19:03,960 --> 00:19:13,200
wanted to give you some insight but

00:19:05,580 --> 00:19:20,600
before we go to that question yes going

00:19:13,200 --> 00:19:20,600
back to this example yes

00:19:31,889 --> 00:19:39,820
yes that a question is if you only

00:19:35,799 --> 00:19:43,539
specify host one and two you only have a

00:19:39,820 --> 00:19:45,460
hosts in the front end group but your

00:19:43,539 --> 00:19:47,200
sequences you have to start with the

00:19:45,460 --> 00:19:49,570
back end group and then proceed with the

00:19:47,200 --> 00:19:52,240
front end group so the rule is if there

00:19:49,570 --> 00:19:55,269
is no hosts in the background group in

00:19:52,240 --> 00:19:58,210
your specific job then you can just

00:19:55,269 --> 00:20:00,700
ignore that if if I had host three

00:19:58,210 --> 00:20:03,880
listed in the list of hosts that I want

00:20:00,700 --> 00:20:05,590
to deploy to then Pogo would have to do

00:20:03,880 --> 00:20:07,029
host three first because back end comes

00:20:05,590 --> 00:20:13,269
through her front end and then proceed

00:20:07,029 --> 00:20:17,860
with the front end hosts okay so gory

00:20:13,269 --> 00:20:20,769
details because if you look at it Pogo

00:20:17,860 --> 00:20:23,049
from the outside all you see is that you

00:20:20,769 --> 00:20:27,370
have a command line client you have a

00:20:23,049 --> 00:20:29,649
web UI service that you submit jobs to

00:20:27,370 --> 00:20:33,880
the through the client and get results

00:20:29,649 --> 00:20:38,080
back through the UI and in the end some

00:20:33,880 --> 00:20:41,740
magic happens and Pogo runs SSH commands

00:20:38,080 --> 00:20:47,260
on targets so for this to be scalable

00:20:41,740 --> 00:20:50,559
you need some replication in there so we

00:20:47,260 --> 00:20:53,019
have components called dispatchers which

00:20:50,559 --> 00:20:56,260
figure out in which order to deploy

00:20:53,019 --> 00:21:00,940
stuff so those dispatchers will read

00:20:56,260 --> 00:21:02,889
your configuration they will go into the

00:21:00,940 --> 00:21:05,950
hosts list that you've provided for a

00:21:02,889 --> 00:21:08,049
command and figure out things like yeah

00:21:05,950 --> 00:21:10,690
this front-end host needs to be around

00:21:08,049 --> 00:21:13,360
before that back on host and once this

00:21:10,690 --> 00:21:17,220
schedule is figured out the dispatcher

00:21:13,360 --> 00:21:20,409
will forward a request for a single task

00:21:17,220 --> 00:21:22,179
to a worker and the worker past

00:21:20,409 --> 00:21:25,090
basically says connect to this target

00:21:22,179 --> 00:21:26,950
machine run this command and give me the

00:21:25,090 --> 00:21:30,429
output and then the dispatcher will

00:21:26,950 --> 00:21:34,149
collate that information figure out if

00:21:30,429 --> 00:21:37,570
that violates any constraints and if not

00:21:34,149 --> 00:21:38,310
it will proceed with the next host in

00:21:37,570 --> 00:21:42,480
the sea

00:21:38,310 --> 00:21:45,380
so if you have multiple servers that

00:21:42,480 --> 00:21:48,240
need to synchronize you need some way of

00:21:45,380 --> 00:21:53,760
them communicating so that they are not

00:21:48,240 --> 00:21:56,040
um processing tasks twice or if one

00:21:53,760 --> 00:22:00,060
dispatcher goes down you want to make

00:21:56,040 --> 00:22:02,490
sure that um another dispatcher takes

00:22:00,060 --> 00:22:06,060
over for it because what you want is a

00:22:02,490 --> 00:22:08,940
really reliable system and it's well it

00:22:06,060 --> 00:22:10,620
is important that you roll out reliably

00:22:08,940 --> 00:22:13,470
but what's even more important is that

00:22:10,620 --> 00:22:15,960
you wrote back really really fast and

00:22:13,470 --> 00:22:18,060
reliable nothing is worse than you know

00:22:15,960 --> 00:22:20,880
you wrote something out and you figure

00:22:18,060 --> 00:22:22,830
out you made a really bad mistake and

00:22:20,880 --> 00:22:26,310
you need to roll back really quickly and

00:22:22,830 --> 00:22:29,760
your deployment tool is unavailable so

00:22:26,310 --> 00:22:32,160
that's usually cost for trouble and I'm

00:22:29,760 --> 00:22:35,300
not saying that that happened but it's a

00:22:32,160 --> 00:22:39,030
possibility so in order to communicate

00:22:35,300 --> 00:22:44,180
between those dispatchers we use a tool

00:22:39,030 --> 00:22:49,170
called zookeeper which is a java based

00:22:44,180 --> 00:22:52,710
system that allows you to keep a limited

00:22:49,170 --> 00:22:56,310
amount of data in sync between different

00:22:52,710 --> 00:23:00,120
hosts and you get stuff for free like

00:22:56,310 --> 00:23:03,450
you know can you can lock stuff in there

00:23:00,120 --> 00:23:05,580
and it basically figures out if one of

00:23:03,450 --> 00:23:10,100
the components like one of the

00:23:05,580 --> 00:23:12,570
dispatchers goes down it it will

00:23:10,100 --> 00:23:16,320
maintain the data consistency of the

00:23:12,570 --> 00:23:20,160
shared data for you so it's fairly

00:23:16,320 --> 00:23:21,690
magical and what what it uses in order

00:23:20,160 --> 00:23:24,390
to figure out who's right and who's

00:23:21,690 --> 00:23:26,850
wrong is something like leader election

00:23:24,390 --> 00:23:29,460
so you need typically like three

00:23:26,850 --> 00:23:33,870
different components so that you always

00:23:29,460 --> 00:23:38,310
have a majority if if one of the the

00:23:33,870 --> 00:23:41,010
systems misbehaves so let's say one of

00:23:38,310 --> 00:23:44,000
the dispatchers is wrong about the data

00:23:41,010 --> 00:23:48,300
it can be overruled by the two others

00:23:44,000 --> 00:23:51,070
anyway so the zookeeper stuff is just a

00:23:48,300 --> 00:23:55,720
tool basically um

00:23:51,070 --> 00:23:58,049
to like synchronize the data between the

00:23:55,720 --> 00:24:00,880
dispatchers because you have certain

00:23:58,049 --> 00:24:03,009
tasks and jobs that you need to execute

00:24:00,880 --> 00:24:06,159
and all the dispatchers need to have the

00:24:03,009 --> 00:24:09,039
same view of the data and pick a job if

00:24:06,159 --> 00:24:11,649
it comes in and distribute it to the

00:24:09,039 --> 00:24:16,509
workers and other dispatchers to take

00:24:11,649 --> 00:24:20,440
over if a previous dispatcher just falls

00:24:16,509 --> 00:24:26,500
off the grid the other box on the right

00:24:20,440 --> 00:24:29,200
hand side libel DB that is our internal

00:24:26,500 --> 00:24:31,600
database that determines which group a

00:24:29,200 --> 00:24:34,629
host falls into yourself if you don't

00:24:31,600 --> 00:24:36,009
want to specify a tag for every host in

00:24:34,629 --> 00:24:37,659
your configuration file because you

00:24:36,009 --> 00:24:39,909
already have a database that does that

00:24:37,659 --> 00:24:43,720
and of course you want only a single

00:24:39,909 --> 00:24:46,899
source of truth for everything we use

00:24:43,720 --> 00:24:52,149
this database in order to do that and

00:24:46,899 --> 00:24:53,740
it's basically a plug-in that adds to

00:24:52,149 --> 00:25:02,049
the data that's in the configuration

00:24:53,740 --> 00:25:05,169
file already if you want to use pogo

00:25:02,049 --> 00:25:08,620
like when the client submits a job at

00:25:05,169 --> 00:25:10,389
least in our case you need to run

00:25:08,620 --> 00:25:13,059
through a web authentication system

00:25:10,389 --> 00:25:15,879
because you want to keep track on who's

00:25:13,059 --> 00:25:18,580
running commands on your hosts it's

00:25:15,879 --> 00:25:19,779
always a good thing to know so that if

00:25:18,580 --> 00:25:24,309
there's any misunderstanding you can

00:25:19,779 --> 00:25:26,730
follow up later and you also need to

00:25:24,309 --> 00:25:30,279
authenticate with a target so that

00:25:26,730 --> 00:25:31,960
introduces the problem that you you

00:25:30,279 --> 00:25:34,029
probably know the password or the

00:25:31,960 --> 00:25:36,100
private key to the hostess you want to

00:25:34,029 --> 00:25:39,279
access in the end but Pogo needs to

00:25:36,100 --> 00:25:44,590
somehow push that through that change

00:25:39,279 --> 00:25:46,509
the client talks to the to the API and

00:25:44,590 --> 00:25:48,879
the ABI talked to the dispatcher and the

00:25:46,509 --> 00:25:51,549
dispatcher talks to the worker and then

00:25:48,879 --> 00:25:52,990
somehow you need to end up in a

00:25:51,549 --> 00:25:55,240
situation where the worker knows the

00:25:52,990 --> 00:25:58,600
password for example to respond to a

00:25:55,240 --> 00:26:01,480
prompt on the target the dsh prompt for

00:25:58,600 --> 00:26:04,570
your password to run the command and the

00:26:01,480 --> 00:26:05,070
way this is implemented in Pogo at least

00:26:04,570 --> 00:26:08,519
the

00:26:05,070 --> 00:26:11,730
version that we have in how to and soon

00:26:08,519 --> 00:26:13,919
to be it soon to be going to be part of

00:26:11,730 --> 00:26:18,149
the open-source part is that we encrypt

00:26:13,919 --> 00:26:20,490
that password that you provide when you

00:26:18,149 --> 00:26:23,220
run the command with the Pogo client

00:26:20,490 --> 00:26:27,659
with the worker keys with the work of

00:26:23,220 --> 00:26:30,179
public key so the only entity that knows

00:26:27,659 --> 00:26:32,190
the password is the worker and the

00:26:30,179 --> 00:26:33,750
password is never stored and anywhere

00:26:32,190 --> 00:26:38,190
persistently obviously because it's a

00:26:33,750 --> 00:26:40,379
very sensitive information also you can

00:26:38,190 --> 00:26:42,539
set it up so that the worker is trusted

00:26:40,379 --> 00:26:46,620
by the target there's also a possibility

00:26:42,539 --> 00:26:49,590
but in our case we run the system

00:26:46,620 --> 00:26:53,490
company-wide so we need a real

00:26:49,590 --> 00:27:00,350
authentication between the worker and a

00:26:53,490 --> 00:27:02,940
target node I talked about hooks

00:27:00,350 --> 00:27:05,519
previously so that that's a mechanism

00:27:02,940 --> 00:27:07,379
that Pope figures out whether a command

00:27:05,519 --> 00:27:13,110
that you've submitted succeeded or not

00:27:07,379 --> 00:27:16,080
and and I also told you that those are

00:27:13,110 --> 00:27:18,389
just a regular scripts that are written

00:27:16,080 --> 00:27:23,460
in either in pearl or just can be any

00:27:18,389 --> 00:27:25,830
executable so these are used to check

00:27:23,460 --> 00:27:29,190
the health of the host after you've

00:27:25,830 --> 00:27:33,080
installed something or even before that

00:27:29,190 --> 00:27:36,029
so who knows that it can proceed and

00:27:33,080 --> 00:27:40,710
these these hooks are just installed on

00:27:36,029 --> 00:27:45,059
the target typically some some directory

00:27:40,710 --> 00:27:46,679
in our CD style so that the hook just

00:27:45,059 --> 00:27:48,259
runs everything that's within that

00:27:46,679 --> 00:27:52,049
directors they can easily add and remove

00:27:48,259 --> 00:27:55,879
scripts or to get that done so the pre

00:27:52,049 --> 00:27:59,309
user Dupree hooker runs before the

00:27:55,879 --> 00:28:04,679
command and the poster grunts afterwards

00:27:59,309 --> 00:28:06,690
and examples of that are of her a

00:28:04,679 --> 00:28:09,570
previous very example you might want to

00:28:06,690 --> 00:28:13,139
take a host autorotation when you're

00:28:09,570 --> 00:28:14,970
doing the update because you don't want

00:28:13,139 --> 00:28:17,100
any users ending up on that house well

00:28:14,970 --> 00:28:18,450
it runs because that might lead to

00:28:17,100 --> 00:28:20,460
unexpected behavior

00:28:18,450 --> 00:28:23,490
my drain database connection you might

00:28:20,460 --> 00:28:26,280
flush caches and and and exit user

00:28:23,490 --> 00:28:27,720
sessions stuff like that so you just

00:28:26,280 --> 00:28:30,540
make sure that the hose is ready to be

00:28:27,720 --> 00:28:34,050
updated post hook examples on the other

00:28:30,540 --> 00:28:35,760
hand they could be used in order to if

00:28:34,050 --> 00:28:38,040
you for example to update the web server

00:28:35,760 --> 00:28:40,020
you want to run a quick test whether it

00:28:38,040 --> 00:28:42,660
actually serves up the web page that

00:28:40,020 --> 00:28:44,910
you're expecting this is just a way to

00:28:42,660 --> 00:28:47,670
ensure that what you've run on the hall

00:28:44,910 --> 00:28:51,180
was actually succeeded or you can ping

00:28:47,670 --> 00:28:52,920
required services and also if you're

00:28:51,180 --> 00:28:56,000
sure you're done you can put the hosts

00:28:52,920 --> 00:28:58,770
back into rotations of it serves life

00:28:56,000 --> 00:29:01,470
content again and the important thing

00:28:58,770 --> 00:29:05,670
that keep in mind is that if failures

00:29:01,470 --> 00:29:08,730
occur this counts against the contain so

00:29:05,670 --> 00:29:12,630
if you said I want to run five host in

00:29:08,730 --> 00:29:14,400
parallel and all of a sudden you have a

00:29:12,630 --> 00:29:16,470
hose that fails and I guarantee you if

00:29:14,400 --> 00:29:21,150
you deploy 10,000 house is always one

00:29:16,470 --> 00:29:23,010
that fails that means that poker will

00:29:21,150 --> 00:29:26,190
proceed with only four at a time

00:29:23,010 --> 00:29:29,490
afterwards so you will never have more

00:29:26,190 --> 00:29:31,230
than the allowed number of hosts that

00:29:29,490 --> 00:29:34,110
are currently unaccessible because

00:29:31,230 --> 00:29:39,680
something didn't go right with the

00:29:34,110 --> 00:29:45,210
deployment so that was pretty much

00:29:39,680 --> 00:29:48,300
everything I had to say about the use

00:29:45,210 --> 00:29:52,350
case or how you use pogo and and again

00:29:48,300 --> 00:29:56,810
it is currently pre-alpha so be patient

00:29:52,350 --> 00:30:01,050
but if you want to start hacking on it

00:29:56,810 --> 00:30:03,330
please let us know and I can't talk

00:30:01,050 --> 00:30:06,360
about the implementation of how it's

00:30:03,330 --> 00:30:08,580
done it's all asynchronous but I just

00:30:06,360 --> 00:30:10,590
wanted to take the opportunity to figure

00:30:08,580 --> 00:30:15,680
out if there's any more questions on

00:30:10,590 --> 00:30:15,680
what pogo does and how it's doing it and

00:30:17,720 --> 00:30:35,210
all right yep question are we how do you

00:30:32,840 --> 00:30:37,970
determine whether command failed what's

00:30:35,210 --> 00:30:40,190
a question I think and then what we do

00:30:37,970 --> 00:30:43,250
is check the return value so you ran an

00:30:40,190 --> 00:30:47,210
SSH command with command for the box and

00:30:43,250 --> 00:30:50,150
that returns either 0 or it returns some

00:30:47,210 --> 00:30:53,480
arikil and if it's anything other than 0

00:30:50,150 --> 00:30:55,580
then it's marked as failed and same

00:30:53,480 --> 00:30:59,650
applies to the hooks so if a hook

00:30:55,580 --> 00:31:04,670
returns a nonzero value it is marked as

00:30:59,650 --> 00:31:08,440
a failure how many of you do know how to

00:31:04,670 --> 00:31:12,530
rise up in any event so this seems to be

00:31:08,440 --> 00:31:16,310
here you go one person to not not too

00:31:12,530 --> 00:31:19,340
many though it's a really cool tool in

00:31:16,310 --> 00:31:22,010
order to implement you know components

00:31:19,340 --> 00:31:25,850
that talk to each other over over TCP

00:31:22,010 --> 00:31:27,680
and it's this whole concept of having an

00:31:25,850 --> 00:31:31,970
event loop and reacting to events

00:31:27,680 --> 00:31:33,350
instead of having this linear style of

00:31:31,970 --> 00:31:35,270
programming where you execute one

00:31:33,350 --> 00:31:38,240
comment after or not it looks kind of

00:31:35,270 --> 00:31:40,730
weird at first because if you for

00:31:38,240 --> 00:31:45,500
example look on how does HTTP POST works

00:31:40,730 --> 00:31:48,920
is that you need to to provide a

00:31:45,500 --> 00:31:51,200
subroutine that pearl jumps into after

00:31:48,920 --> 00:31:54,800
the command is done so if you run the

00:31:51,200 --> 00:31:57,440
command like it is or the script as it

00:31:54,800 --> 00:31:59,900
is listed right here then it will

00:31:57,440 --> 00:32:03,260
immediately go to that last statement

00:31:59,900 --> 00:32:06,470
and jump over the HTTP POST because it

00:32:03,260 --> 00:32:10,280
won't wait until that heb post is over

00:32:06,470 --> 00:32:12,710
but you need to like block it a little

00:32:10,280 --> 00:32:14,270
bit so that whenever that post comes

00:32:12,710 --> 00:32:16,190
back from the network which takes an

00:32:14,270 --> 00:32:20,540
order of magnitude longer obviously than

00:32:16,190 --> 00:32:24,110
processing a pearl statement the in

00:32:20,540 --> 00:32:27,620
order to get the result back and what

00:32:24,110 --> 00:32:30,920
any event there's a couple different

00:32:27,620 --> 00:32:33,440
a framework for example p 0 e is one

00:32:30,920 --> 00:32:35,809
that I've used for years but any event

00:32:33,440 --> 00:32:38,930
seems to be the latest development in

00:32:35,809 --> 00:32:41,360
that area what any event does is that it

00:32:38,930 --> 00:32:46,130
doesn't have an implicit then not an

00:32:41,360 --> 00:32:48,470
explicit event loop so in POA you would

00:32:46,130 --> 00:32:50,900
say okay here are my components start

00:32:48,470 --> 00:32:52,490
all these components up and then you run

00:32:50,900 --> 00:32:55,640
the what's called imperii the colonel

00:32:52,490 --> 00:32:58,940
and that Colonel just waits for stuff to

00:32:55,640 --> 00:33:00,140
happen it just sits around and then what

00:32:58,940 --> 00:33:01,880
one of the components might send

00:33:00,140 --> 00:33:04,760
something that occurred Colonel and then

00:33:01,880 --> 00:33:06,850
the component listens to that event and

00:33:04,760 --> 00:33:09,110
sent something back and this is how they

00:33:06,850 --> 00:33:11,990
communicate so what's important is that

00:33:09,110 --> 00:33:14,030
if you run any asynchronous Cody can

00:33:11,990 --> 00:33:17,210
never dilly-dally around and do stuff

00:33:14,030 --> 00:33:18,770
like read bites from the network or from

00:33:17,210 --> 00:33:22,730
the from a file because that's way too

00:33:18,770 --> 00:33:23,990
slow you can never slow down below the

00:33:22,730 --> 00:33:25,490
speed of what can be processed

00:33:23,990 --> 00:33:28,340
immediately whenever you have something

00:33:25,490 --> 00:33:31,100
like that you need to branch out and say

00:33:28,340 --> 00:33:33,110
okay I'm going to call you back once

00:33:31,100 --> 00:33:35,470
that is available this is how it works

00:33:33,110 --> 00:33:39,610
and this leads to this weird style of

00:33:35,470 --> 00:33:42,620
jumping into callbacks instead of

00:33:39,610 --> 00:33:47,559
getting something returned from a

00:33:42,620 --> 00:33:52,760
function and any event has this implicit

00:33:47,559 --> 00:33:57,250
yeah implicit event loop in that you

00:33:52,760 --> 00:34:00,320
just wait for stuff to arrive in a

00:33:57,250 --> 00:34:02,690
conditional variable so the second line

00:34:00,320 --> 00:34:04,640
in the listing defines a conditional

00:34:02,690 --> 00:34:08,149
variable and conditional variables are

00:34:04,640 --> 00:34:13,899
used to listen first off and send stuff

00:34:08,149 --> 00:34:17,179
so the directv the last line of the

00:34:13,899 --> 00:34:20,450
script will wait for a signal to arrive

00:34:17,179 --> 00:34:23,060
at this variable and the signal won't

00:34:20,450 --> 00:34:25,159
arrive until that callback gets called

00:34:23,060 --> 00:34:27,590
from the post command so let's go take

00:34:25,159 --> 00:34:30,500
maybe a second to go to this URL and it

00:34:27,590 --> 00:34:34,399
will run the dumper and then it will

00:34:30,500 --> 00:34:38,480
send a signal to the variable and this

00:34:34,399 --> 00:34:40,490
means that the rec V at the end will

00:34:38,480 --> 00:34:42,409
stop blocking and

00:34:40,490 --> 00:34:46,100
the program returns so this is actually

00:34:42,409 --> 00:34:50,450
a fully functional HTTP POST that is

00:34:46,100 --> 00:34:57,830
waiting until the data triggers in from

00:34:50,450 --> 00:34:59,780
the web server that clear okay and as I

00:34:57,830 --> 00:35:02,060
said it's an implicit event low because

00:34:59,780 --> 00:35:04,369
you never start a command that says

00:35:02,060 --> 00:35:10,400
listen to events it's just magically

00:35:04,369 --> 00:35:13,820
because you wait for something and this

00:35:10,400 --> 00:35:18,110
is I said Lisa this weird style that you

00:35:13,820 --> 00:35:20,240
keep nesting stuff right and if it

00:35:18,110 --> 00:35:22,280
because you don't have the linear flow

00:35:20,240 --> 00:35:23,660
anymore you jump from call back to call

00:35:22,280 --> 00:35:25,910
back the call because you need some way

00:35:23,660 --> 00:35:30,050
to control this because it gets it gets

00:35:25,910 --> 00:35:33,140
unwieldly if you keep doing it and not

00:35:30,050 --> 00:35:36,500
only will it exceed your terminal width

00:35:33,140 --> 00:35:41,480
but but it's also very hard to read so

00:35:36,500 --> 00:35:44,570
there is a module on Sipan that I found

00:35:41,480 --> 00:35:49,060
very useful in order to institute

00:35:44,570 --> 00:35:52,400
program any event components that are

00:35:49,060 --> 00:35:54,740
increasingly complex and until I build a

00:35:52,400 --> 00:35:57,619
system that contains many of them and

00:35:54,740 --> 00:36:01,520
that is called object event and that is

00:35:57,619 --> 00:36:04,220
just a class that you let your classes

00:36:01,520 --> 00:36:09,790
inherit from and all of a sudden you get

00:36:04,220 --> 00:36:15,140
two methods one is called event and that

00:36:09,790 --> 00:36:17,359
is a way to send to have your class send

00:36:15,140 --> 00:36:21,230
out an event to anybody who's listening

00:36:17,359 --> 00:36:26,180
to it and somebody who's using that

00:36:21,230 --> 00:36:29,750
class registers to this event and gets

00:36:26,180 --> 00:36:33,200
notified once this is happening so this

00:36:29,750 --> 00:36:35,330
helps tackle complexity so if you had

00:36:33,200 --> 00:36:38,119
this another iteration of this silly

00:36:35,330 --> 00:36:43,090
example that you have a get followed by

00:36:38,119 --> 00:36:43,090
a get and instead of nesting pneus I'm

00:36:43,810 --> 00:36:49,369
nesting it only wants in this case

00:36:46,130 --> 00:36:53,270
because i have a get gather package that

00:36:49,369 --> 00:36:56,380
uses this Gator and then the

00:36:53,270 --> 00:37:01,100
newly created getter registers the event

00:36:56,380 --> 00:37:02,960
HTTP GET done from together and forwards

00:37:01,100 --> 00:37:06,050
that to the component that's listening

00:37:02,960 --> 00:37:09,560
to this class in turn so you can build

00:37:06,050 --> 00:37:11,900
these event chains that we call the

00:37:09,560 --> 00:37:14,630
stack class after class of the class and

00:37:11,900 --> 00:37:18,050
then all the events that are sent by

00:37:14,630 --> 00:37:20,870
even a remote component trickle up all

00:37:18,050 --> 00:37:23,720
the way to your main program and in case

00:37:20,870 --> 00:37:27,110
of a test suite you have the ability to

00:37:23,720 --> 00:37:33,310
track what's going on even deeply inside

00:37:27,110 --> 00:37:38,330
the system so this is how the main

00:37:33,310 --> 00:37:43,880
program uses this and i said it's very

00:37:38,330 --> 00:37:46,460
convenient to test stuff let me just

00:37:43,880 --> 00:37:49,010
show you how test suites work in this

00:37:46,460 --> 00:37:50,720
case so for example apoco schedule a

00:37:49,010 --> 00:37:53,810
test as the guy who takes the

00:37:50,720 --> 00:37:57,580
configuration and figures out which

00:37:53,810 --> 00:38:00,860
house to run in which order and how many

00:37:57,580 --> 00:38:05,030
of them at the same time so if i wanted

00:38:00,860 --> 00:38:08,090
to test let's say a new configuration in

00:38:05,030 --> 00:38:10,760
my test suite and the poetess we don't

00:38:08,090 --> 00:38:16,430
get up blah i think something like 64

00:38:10,760 --> 00:38:19,430
different test files so you can you can

00:38:16,430 --> 00:38:21,760
easily subscribe to a event let's say

00:38:19,430 --> 00:38:25,130
that's coming from the worker and

00:38:21,760 --> 00:38:28,460
although the component I'm running here

00:38:25,130 --> 00:38:31,100
is a scheduler the the way this event

00:38:28,460 --> 00:38:33,590
chain is set up is that the worker sense

00:38:31,100 --> 00:38:35,930
if it's all running on the same horse by

00:38:33,590 --> 00:38:37,850
the way that's what would the test we

00:38:35,930 --> 00:38:40,580
doesn't it's not this this tributed

00:38:37,850 --> 00:38:43,400
model you can actually catch these

00:38:40,580 --> 00:38:46,460
events in the test suite and run your

00:38:43,400 --> 00:38:49,280
path command so if you look inside the

00:38:46,460 --> 00:38:53,360
the anonymous subroutine this actually

00:38:49,280 --> 00:38:57,140
runs a test that would is command and

00:38:53,360 --> 00:39:00,860
verifies that yeah the task that was

00:38:57,140 --> 00:39:04,930
just processed is indeed task one that

00:39:00,860 --> 00:39:04,930
hath that i submitted previously

00:39:05,530 --> 00:39:14,980
so if you look at how how Pogo is

00:39:09,730 --> 00:39:18,180
implemented it is a number of different

00:39:14,980 --> 00:39:21,010
components that are designed to run on

00:39:18,180 --> 00:39:22,990
different servers but for testing you

00:39:21,010 --> 00:39:25,450
can can run everything in the same

00:39:22,990 --> 00:39:28,000
process which is really useful because I

00:39:25,450 --> 00:39:29,560
hate running tests which and you have to

00:39:28,000 --> 00:39:31,570
you know start up three different

00:39:29,560 --> 00:39:33,850
processes three different servers it's

00:39:31,570 --> 00:39:36,970
hard to each other it's much easier to

00:39:33,850 --> 00:39:39,940
run everything you want process so the

00:39:36,970 --> 00:39:41,920
components don't care you can run three

00:39:39,940 --> 00:39:43,960
different web servers and a TCP server

00:39:41,920 --> 00:39:45,880
and the client all in the same process

00:39:43,960 --> 00:39:49,360
with with any event and that's exactly

00:39:45,880 --> 00:39:51,400
what the tests we does and yeah they

00:39:49,360 --> 00:39:56,020
open up the pores and do the

00:39:51,400 --> 00:39:59,470
communication it's it's no problem so in

00:39:56,020 --> 00:40:02,820
order to have something to play with it

00:39:59,470 --> 00:40:06,400
at least for right now on github I

00:40:02,820 --> 00:40:09,220
bundle all these components into a power

00:40:06,400 --> 00:40:13,960
strip poker one which is like everything

00:40:09,220 --> 00:40:18,640
in one and a little bit of luck you you

00:40:13,960 --> 00:40:22,020
can actually use it like that so you can

00:40:18,640 --> 00:40:25,480
figure out how Pogo would behave with a

00:40:22,020 --> 00:40:29,650
configuration that you've specified so

00:40:25,480 --> 00:40:32,020
this is very shaky right now and because

00:40:29,650 --> 00:40:35,380
it's a work in progress but it's a great

00:40:32,020 --> 00:40:38,650
way to test that it's actually working

00:40:35,380 --> 00:40:41,650
and splitting it up later on and putting

00:40:38,650 --> 00:40:42,640
it on different hosts it's just it's

00:40:41,650 --> 00:40:47,440
just a no-brainer because these

00:40:42,640 --> 00:40:52,350
components already exist all right there

00:40:47,440 --> 00:40:54,880
was a lot of code and maybe some

00:40:52,350 --> 00:40:58,330
programming styles that not everybody

00:40:54,880 --> 00:41:01,230
has used before so I'll take a another

00:40:58,330 --> 00:41:07,170
round of questions if you have some

00:41:01,230 --> 00:41:10,170
rental have looked at salt and uh

00:41:07,170 --> 00:41:10,170
familiar

00:41:10,670 --> 00:41:15,630
so it's basically four parallel

00:41:12,960 --> 00:41:18,990
execution of commands with management in

00:41:15,630 --> 00:41:21,359
terms of doesn't have a sequential but

00:41:18,990 --> 00:41:23,520
it quickly paralyzes execution across

00:41:21,359 --> 00:41:30,540
multiple hosts Jesus zeromq is the other

00:41:23,520 --> 00:41:34,170
line okay okay i'm aware of a product

00:41:30,540 --> 00:41:37,280
called run deck which is kind of similar

00:41:34,170 --> 00:41:41,510
so they seem to be several approaches

00:41:37,280 --> 00:41:43,770
the advantage of having something in

00:41:41,510 --> 00:41:46,440
purlins that we can integrate it with

00:41:43,770 --> 00:41:50,550
the the tool that we already have so and

00:41:46,440 --> 00:41:53,910
especially it's often not that easy to

00:41:50,550 --> 00:41:56,760
extend an external product to your

00:41:53,910 --> 00:41:59,160
internal databases so if everything is

00:41:56,760 --> 00:42:02,640
in one hand and that's always an

00:41:59,160 --> 00:42:04,890
advantage and also yeah I'm not sure

00:42:02,640 --> 00:42:07,109
about the scalability of other products

00:42:04,890 --> 00:42:16,160
we definitely not a worse for tens of

00:42:07,109 --> 00:42:19,010
thousands because we've tried it um it's

00:42:16,160 --> 00:42:24,540
212 I think we've got eight more minutes

00:42:19,010 --> 00:42:28,050
can take more questions or I can go into

00:42:24,540 --> 00:42:32,010
some bonus slides if you're interested

00:42:28,050 --> 00:42:35,670
the kind of lessons that we learn along

00:42:32,010 --> 00:42:39,869
the way so this travesty I service that

00:42:35,670 --> 00:42:44,010
I mentioned it's a free service and what

00:42:39,869 --> 00:42:46,710
they do is they run tests on github and

00:42:44,010 --> 00:42:50,369
then display the results and send you an

00:42:46,710 --> 00:42:54,960
email if something's broken so you have

00:42:50,369 --> 00:42:56,849
your typical pearl make file PL and make

00:42:54,960 --> 00:42:58,800
test command and this should result in

00:42:56,849 --> 00:43:01,160
something like this if the test suite

00:42:58,800 --> 00:43:01,160
succeed

00:43:02,640 --> 00:43:18,809
what's here does that work the better

00:43:18,989 --> 00:43:31,739
all right that's all there is it's all

00:43:22,660 --> 00:43:36,479
okay we're all good that is better yes

00:43:31,739 --> 00:43:42,059
yeah this is the Hutt's displayed on

00:43:36,479 --> 00:43:45,279
Travis CI so it will display the commits

00:43:42,059 --> 00:43:47,049
there did ran the checks on and what the

00:43:45,279 --> 00:43:50,680
result was if you familiar with Hudson

00:43:47,049 --> 00:43:54,959
or Jenkins let's similarly get a green

00:43:50,680 --> 00:43:58,630
balloon or whatever it is if something

00:43:54,959 --> 00:44:02,439
is okay and all you need to do in your

00:43:58,630 --> 00:44:05,979
github project is defined a Travis yml

00:44:02,439 --> 00:44:08,410
file and they kind of infer how to run

00:44:05,979 --> 00:44:09,999
the test suite by the language that are

00:44:08,410 --> 00:44:11,949
using so you say language pearl and all

00:44:09,999 --> 00:44:13,839
of a sudden knows who Pearl has make

00:44:11,949 --> 00:44:16,150
father PL that defines the dependencies

00:44:13,839 --> 00:44:18,279
and it has a make test target that's

00:44:16,150 --> 00:44:22,630
available after I run pearl make photo

00:44:18,279 --> 00:44:25,299
op PL and you can also specify the Pearl

00:44:22,630 --> 00:44:27,789
versions that they run it with currently

00:44:25,299 --> 00:44:31,630
they're supporting 5 10 5 12 and 5 14

00:44:27,789 --> 00:44:35,650
and once you've checked that one in you

00:44:31,630 --> 00:44:38,650
go to Travis CI dork they ask you to log

00:44:35,650 --> 00:44:43,049
into your github account and will

00:44:38,650 --> 00:44:45,189
retrieve all the it's like Oh

00:44:43,049 --> 00:44:47,439
authentication so they don't really know

00:44:45,189 --> 00:44:52,859
your password but they have access to

00:44:47,439 --> 00:44:55,660
your data and they will give you little

00:44:52,859 --> 00:44:57,549
buttons here they just need to switch on

00:44:55,660 --> 00:44:59,920
and off and if you switch it on and

00:44:57,549 --> 00:45:01,900
testing is on for your github project so

00:44:59,920 --> 00:45:03,759
i would have thought it would never work

00:45:01,900 --> 00:45:07,689
but it started working right away that I

00:45:03,759 --> 00:45:11,890
was pretty amazed by that said that the

00:45:07,689 --> 00:45:14,030
pitfall but this is of course he go back

00:45:11,890 --> 00:45:16,420
to get up get up asks you

00:45:14,030 --> 00:45:19,610
you really want to authorize Travis and

00:45:16,420 --> 00:45:21,350
it's kind of scary because they

00:45:19,610 --> 00:45:24,170
basically get their rights to do

00:45:21,350 --> 00:45:26,660
anything to your repo right so yeah you

00:45:24,170 --> 00:45:29,060
don't want to really do that but all

00:45:26,660 --> 00:45:30,650
they do is install that hook that's

00:45:29,060 --> 00:45:32,510
triggered every time you check something

00:45:30,650 --> 00:45:35,810
in to get up so once that hook is

00:45:32,510 --> 00:45:39,620
installed I went back and withdrew my

00:45:35,810 --> 00:45:42,680
authorization how the hook still works

00:45:39,620 --> 00:45:45,410
of course because it's in place but I'm

00:45:42,680 --> 00:45:49,640
not saying they do anything with it I'm

00:45:45,410 --> 00:45:53,360
just careful so once the hook is in

00:45:49,640 --> 00:45:55,580
place for repo the butcher's stay there

00:45:53,360 --> 00:45:57,980
and the tests keep running and this is

00:45:55,580 --> 00:46:00,880
that is very fascinating you have the

00:45:57,980 --> 00:46:04,130
travelers in one window and you submit a

00:46:00,880 --> 00:46:06,710
commit to github and all of a sudden the

00:46:04,130 --> 00:46:11,300
it dynamically updates so very

00:46:06,710 --> 00:46:13,370
fascinating we also have a API so if for

00:46:11,300 --> 00:46:18,650
example for the Pogo case you can just

00:46:13,370 --> 00:46:22,910
curl this Jason rest interface and then

00:46:18,650 --> 00:46:26,630
you get back when your build succeeded

00:46:22,910 --> 00:46:29,560
or failed and a little bit of history

00:46:26,630 --> 00:46:29,560
also

00:46:35,300 --> 00:46:40,080
that I haven't figured out that I

00:46:37,920 --> 00:46:43,170
Randall's asking if it has a callback

00:46:40,080 --> 00:46:45,960
mechanism usually those rest interfaces

00:46:43,170 --> 00:46:47,670
are supposed to have one so that it can

00:46:45,960 --> 00:46:50,910
be run in a browser but i'm not sure if

00:46:47,670 --> 00:46:52,109
they actually do the by the way the

00:46:50,910 --> 00:46:55,260
reason pretty much the same interface as

00:46:52,109 --> 00:46:59,990
github does so it's also may be based on

00:46:55,260 --> 00:46:59,990
the same Ruby or rails implementation

00:47:00,589 --> 00:47:07,380
we're almost at the end of you a lot of

00:47:04,349 --> 00:47:13,230
time three minutes ago is there any more

00:47:07,380 --> 00:47:15,930
questions what's Travis is morrow that's

00:47:13,230 --> 00:47:18,660
a good question I have I haven't asked I

00:47:15,930 --> 00:47:21,660
suppose so they're currently claiming

00:47:18,660 --> 00:47:25,230
that it's alpha so you can't really rely

00:47:21,660 --> 00:47:28,710
on it and they're getting some load

00:47:25,230 --> 00:47:31,260
numbers that way I suppose so it's also

00:47:28,710 --> 00:47:33,390
based on workers because they need to

00:47:31,260 --> 00:47:35,310
queue up stuff if it gets too much and

00:47:33,390 --> 00:47:37,080
maybe they just want to figure out how

00:47:35,310 --> 00:47:42,089
well it works and then later charged for

00:47:37,080 --> 00:47:44,130
it I suppose but it integration is what

00:47:42,089 --> 00:47:47,160
struck me so every integration should be

00:47:44,130 --> 00:47:49,230
as easy as that you could even think

00:47:47,160 --> 00:47:51,390
that github would implement something

00:47:49,230 --> 00:47:59,030
like this it may be just hadn't thought

00:47:51,390 --> 00:47:59,030
of it fraction

00:48:04,290 --> 00:48:11,110
so the question is how do we deploy

00:48:07,930 --> 00:48:13,990
stuff do we create binary packages and

00:48:11,110 --> 00:48:16,990
we do something similar than like like

00:48:13,990 --> 00:48:20,320
creating Debian packages so we have a

00:48:16,990 --> 00:48:22,630
package repo that we push the compiled

00:48:20,320 --> 00:48:24,010
sources in there and depending on the

00:48:22,630 --> 00:48:26,530
language if it's pearl and it's all

00:48:24,010 --> 00:48:27,790
source but if it's C code then it's all

00:48:26,530 --> 00:48:32,890
compiled so it's very similar to

00:48:27,790 --> 00:48:41,890
mechanism like our p.m. or or d-pad or

00:48:32,890 --> 00:48:45,060
like a platform for Debian alright

00:48:41,890 --> 00:48:45,060

YouTube URL: https://www.youtube.com/watch?v=CE4hLYhfmBE


