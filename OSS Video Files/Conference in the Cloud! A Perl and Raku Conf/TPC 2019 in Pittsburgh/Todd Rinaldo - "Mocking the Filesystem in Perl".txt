Title: Todd Rinaldo - "Mocking the Filesystem in Perl"
Publication date: 2019-06-19
Playlist: TPC 2019 in Pittsburgh
Description: 
	Often when testing, you need to mock files that might not be easily manipulated directly during the test. There are ways to mock the file name or even change your code to not directly invoke open, opendir, -e, etc. so you can mock some alternative wrapper.

The problem is that you can end up with a problem testing the mocks. Sometimes your code also becomes more complex for the sole purpose of enabling testing. Additionally, you an mock your own code but it's harder to mock CPAN code you use but don't necessarily control.

I set out to make it easier to mock file access without making your production code have to do contortions for testing. Along the way, I learned about many of the warts and bruises in various versions of Perl and various distros. I'll talk about my journey to make this tool.
Captions: 
	00:00:00,000 --> 00:00:04,490
hi my name is table Reynaldo and I'm

00:00:02,100 --> 00:00:07,529
gonna be talking to you guys about a

00:00:04,490 --> 00:00:15,240
project that got started earlier this

00:00:07,529 --> 00:00:18,029
year when we came across this when I was

00:00:15,240 --> 00:00:22,650
doing this code review at the time we

00:00:18,029 --> 00:00:26,570
had been talking about how Google test

00:00:22,650 --> 00:00:31,679
code and in small tests and this was a

00:00:26,570 --> 00:00:33,290
and the idea was that we well this one's

00:00:31,679 --> 00:00:36,660
hard to read so I'll give you this one

00:00:33,290 --> 00:00:38,430
the idea was that you don't want to

00:00:36,660 --> 00:00:40,860
actually interact with the file system

00:00:38,430 --> 00:00:43,260
in your unit tests if possible you get a

00:00:40,860 --> 00:00:46,469
more reliable result if you're not

00:00:43,260 --> 00:00:49,800
depending on the existence or lack of

00:00:46,469 --> 00:00:54,239
existence of files and so the person

00:00:49,800 --> 00:00:56,430
making the change put a put a change

00:00:54,239 --> 00:00:59,280
closed er which is Perl function into a

00:00:56,430 --> 00:01:01,430
subroutine and then if you look down at

00:00:59,280 --> 00:01:03,960
the bottom of the file all he did was

00:01:01,430 --> 00:01:06,390
grab the file handle and pass it through

00:01:03,960 --> 00:01:08,670
to closed her and of course in

00:01:06,390 --> 00:01:11,010
production that's pretty boring it

00:01:08,670 --> 00:01:12,780
doesn't actually do anything but then in

00:01:11,010 --> 00:01:16,799
the unit test that allowed him to be

00:01:12,780 --> 00:01:18,960
able to create mock the module and then

00:01:16,799 --> 00:01:21,299
mark those subroutines to do what he

00:01:18,960 --> 00:01:23,180
wanted to do and get predictable results

00:01:21,299 --> 00:01:25,920
without interacting with the file

00:01:23,180 --> 00:01:29,220
without the interacting with the file

00:01:25,920 --> 00:01:32,369
system but when I saw this my first

00:01:29,220 --> 00:01:35,040
thought is sure this is fine but what

00:01:32,369 --> 00:01:38,310
about the other 5,000 modules we have an

00:01:35,040 --> 00:01:40,320
hour and hour source or a code base are

00:01:38,310 --> 00:01:43,770
we going to be doing the same thing

00:01:40,320 --> 00:01:45,119
because it's not just open door open

00:01:43,770 --> 00:01:50,040
door and closed door we'd have to mock

00:01:45,119 --> 00:01:52,380
it would be a whole bunch of things so I

00:01:50,040 --> 00:01:54,540
first thought was we're building a Rube

00:01:52,380 --> 00:01:56,219
Goldberg machine and we're going to

00:01:54,540 --> 00:02:00,750
regret this if we keep going this

00:01:56,219 --> 00:02:03,840
direction so I thought about the problem

00:02:00,750 --> 00:02:08,039
space and determined well I'd have to

00:02:03,840 --> 00:02:10,080
intercept open and close and if I do

00:02:08,039 --> 00:02:12,250
that I could take advantage of tie so I

00:02:10,080 --> 00:02:14,740
wouldn't have to deal with reads or

00:02:12,250 --> 00:02:17,410
angle brackets to to read in the the

00:02:14,740 --> 00:02:20,170
file contents but there's other things

00:02:17,410 --> 00:02:22,960
like open dur and stat that I'd have to

00:02:20,170 --> 00:02:25,750
intercept and then the big one that I

00:02:22,960 --> 00:02:27,520
was worried about was well how am I

00:02:25,750 --> 00:02:32,980
going to deal with file test operators

00:02:27,520 --> 00:02:36,510
like - F or dash E or - X because

00:02:32,980 --> 00:02:40,450
there's no actual way to override those

00:02:36,510 --> 00:02:43,630
and then you know of course the the

00:02:40,450 --> 00:02:46,209
other problem is in my test suite test

00:02:43,630 --> 00:02:47,740
more or even gaffe might have to open

00:02:46,209 --> 00:02:50,140
and close files and I don't want to get

00:02:47,740 --> 00:02:52,209
in its way so these are all the problems

00:02:50,140 --> 00:02:54,730
that I was thinking about when I was

00:02:52,209 --> 00:02:56,530
trying to solve this issue and you know

00:02:54,730 --> 00:03:00,730
it should be easy it's parole you can do

00:02:56,530 --> 00:03:03,430
anything right so some of this stuff I'm

00:03:00,730 --> 00:03:07,350
so test mark module it's out there it's

00:03:03,430 --> 00:03:11,230
actually still under development but

00:03:07,350 --> 00:03:13,000
it's the that to me is not the

00:03:11,230 --> 00:03:15,820
interesting thing the interesting thing

00:03:13,000 --> 00:03:17,590
is some of the things that I had to do

00:03:15,820 --> 00:03:19,390
in pure pearl in order to be able to

00:03:17,590 --> 00:03:22,720
make this happen and that's what I'm

00:03:19,390 --> 00:03:26,410
going to show you here today so I was

00:03:22,720 --> 00:03:29,410
aware that it was possible years ago to

00:03:26,410 --> 00:03:31,510
actually do set core global open

00:03:29,410 --> 00:03:34,959
assigned to a subroutine you could

00:03:31,510 --> 00:03:37,269
override open but of course I don't do

00:03:34,959 --> 00:03:41,350
that every day so I had to go figure out

00:03:37,269 --> 00:03:45,820
how that actually works what one of the

00:03:41,350 --> 00:03:51,850
cool things with core oh I actually

00:03:45,820 --> 00:03:55,030
wrote this wrong okay anyways one of the

00:03:51,850 --> 00:03:56,860
cool things though is which is how I was

00:03:55,030 --> 00:04:01,000
going to overcome the test more problem

00:03:56,860 --> 00:04:03,519
was any it when Perl parses the code any

00:04:01,000 --> 00:04:06,070
opens that sees before it gets to this

00:04:03,519 --> 00:04:09,060
begin block is going to actually be

00:04:06,070 --> 00:04:14,200
directly using the original function

00:04:09,060 --> 00:04:16,180
once open is overwritten than any opens

00:04:14,200 --> 00:04:18,190
that happen afterwards those are

00:04:16,180 --> 00:04:23,380
actually going to be using your mock

00:04:18,190 --> 00:04:26,860
subroutine now you know open when the

00:04:23,380 --> 00:04:28,930
parentheses that's relatively easy but

00:04:26,860 --> 00:04:31,150
with Perl functions people are used to

00:04:28,930 --> 00:04:32,919
doing those functions without

00:04:31,150 --> 00:04:35,169
parentheses which means you have to deal

00:04:32,919 --> 00:04:37,270
with prototypes which the advices you

00:04:35,169 --> 00:04:41,370
should never use prototypes but that of

00:04:37,270 --> 00:04:44,199
course is what I needed to use so

00:04:41,370 --> 00:04:46,569
luckily Brian Foy already tackled this

00:04:44,199 --> 00:04:46,960
problem and I just literally stole from

00:04:46,569 --> 00:04:49,870
him

00:04:46,960 --> 00:04:53,380
slides will be online later if you can't

00:04:49,870 --> 00:04:55,990
write that link down right now turns out

00:04:53,380 --> 00:04:58,419
there is a function that's been in the

00:04:55,990 --> 00:05:01,530
language for quite some time where you

00:04:58,419 --> 00:05:04,599
can say prototype on a function name and

00:05:01,530 --> 00:05:07,659
get back what its actual prototype is

00:05:04,599 --> 00:05:10,360
and the examples actually showed that

00:05:07,659 --> 00:05:13,300
when you've declared when you reassigned

00:05:10,360 --> 00:05:16,360
open you could actually just embed

00:05:13,300 --> 00:05:18,430
prototype right in there but it turns

00:05:16,360 --> 00:05:20,560
out that older pearls that doesn't

00:05:18,430 --> 00:05:23,229
actually work in worse

00:05:20,560 --> 00:05:25,479
the prototype function didn't return the

00:05:23,229 --> 00:05:28,000
prototypes for all the built-ins when it

00:05:25,479 --> 00:05:30,580
was first implemented so the cheap is

00:05:28,000 --> 00:05:32,710
simply that you just look up what the

00:05:30,580 --> 00:05:35,080
prototypes are and the prototype for

00:05:32,710 --> 00:05:36,909
open hasn't changed in all the Perl 5 as

00:05:35,080 --> 00:05:42,550
far as I can tell so it doesn't really

00:05:36,909 --> 00:05:44,830
matter so then in my override what I

00:05:42,550 --> 00:05:47,380
would do for my first implementation I

00:05:44,830 --> 00:05:49,870
was like well everybody uses the three

00:05:47,380 --> 00:05:51,400
are open right so you know all I got to

00:05:49,870 --> 00:05:53,259
do is implement that and just fall

00:05:51,400 --> 00:05:57,310
through for anybody who's doing

00:05:53,259 --> 00:06:00,639
something crazy so what what I could do

00:05:57,310 --> 00:06:05,469
is then if it is mocked and it's a three

00:06:00,639 --> 00:06:07,240
hour open then all I have to do is what

00:06:05,469 --> 00:06:08,979
what you can do is you can actually

00:06:07,240 --> 00:06:12,280
alter the variables that were passed

00:06:08,979 --> 00:06:15,819
into your subroutine by altering the at

00:06:12,280 --> 00:06:18,580
underscore array directly I will warn

00:06:15,819 --> 00:06:21,490
you don't do this unless you have to

00:06:18,580 --> 00:06:23,830
there are open tickets and pearls RT

00:06:21,490 --> 00:06:27,280
about how this screws up reference

00:06:23,830 --> 00:06:33,159
counting under certain circumstances and

00:06:27,280 --> 00:06:35,260
they're not resolved so then the fall

00:06:33,159 --> 00:06:36,620
through of course is you can just go to

00:06:35,260 --> 00:06:39,080
the original

00:06:36,620 --> 00:06:44,090
function if for anything that doesn't do

00:06:39,080 --> 00:06:49,280
your mom so - X was my next problem

00:06:44,090 --> 00:06:54,199
space and dealing with file tests

00:06:49,280 --> 00:06:57,010
operators but also stat and L stat all

00:06:54,199 --> 00:06:58,600
of that kind of wraps up into one

00:06:57,010 --> 00:07:02,419
problem

00:06:58,600 --> 00:07:08,440
luckily Nikko right here in the front

00:07:02,419 --> 00:07:10,820
row volunteered to take on providing a

00:07:08,440 --> 00:07:12,560
override to that so that you can provide

00:07:10,820 --> 00:07:13,880
your own mock subroutine he'll be

00:07:12,560 --> 00:07:17,750
talking about that tomorrow

00:07:13,880 --> 00:07:21,320
oh I when he got done all I had to do

00:07:17,750 --> 00:07:24,850
was use overload file check I provide my

00:07:21,320 --> 00:07:27,889
oh the mouse does work I provide my

00:07:24,850 --> 00:07:29,780
subroutine here and then that's going to

00:07:27,889 --> 00:07:34,010
get called anytime somebody does a file

00:07:29,780 --> 00:07:37,250
test operator and then when it's passed

00:07:34,010 --> 00:07:39,560
in they I get a type so I know whether

00:07:37,250 --> 00:07:43,840
it was stat or L stat so that that's

00:07:39,560 --> 00:07:47,720
going to subtly change how I how I would

00:07:43,840 --> 00:07:51,500
reply to that and this subroutine just

00:07:47,720 --> 00:07:53,919
returns a stat call always and so then

00:07:51,500 --> 00:07:55,820
the test operator can do the right thing

00:07:53,919 --> 00:08:01,669
depending on whether somebody called

00:07:55,820 --> 00:08:04,070
stat or or - II and then he also

00:08:01,669 --> 00:08:05,750
provides a fallback interface so you can

00:08:04,070 --> 00:08:08,930
just say fall back to the real Opik and

00:08:05,750 --> 00:08:10,610
then it just it forgets about this and

00:08:08,930 --> 00:08:12,320
just goes on to the real op and it

00:08:10,610 --> 00:08:20,830
interacts with the file system if that's

00:08:12,320 --> 00:08:24,229
needed so probably one of the biggest

00:08:20,830 --> 00:08:29,990
Bane's of my existence has been dealing

00:08:24,229 --> 00:08:35,120
with file handles regular scalar file

00:08:29,990 --> 00:08:38,479
handles super easy to deal with but and

00:08:35,120 --> 00:08:41,630
and you know three are Govan no problem

00:08:38,479 --> 00:08:44,839
you can you can alter the the first

00:08:41,630 --> 00:08:45,860
argument and set it to a value and

00:08:44,839 --> 00:08:47,330
there's no issue

00:08:45,860 --> 00:08:51,769
[Music]

00:08:47,330 --> 00:08:56,570
so so that's easy but then you have bare

00:08:51,769 --> 00:08:58,670
word file handles which are which means

00:08:56,570 --> 00:09:01,600
you have to manipulate that value and

00:08:58,670 --> 00:09:04,850
your you're actually manipulating a

00:09:01,600 --> 00:09:11,079
somewhat hidden value in the stash where

00:09:04,850 --> 00:09:14,420
you have to alter you have to alter its

00:09:11,079 --> 00:09:17,240
the the glob value and the stash when

00:09:14,420 --> 00:09:19,220
you create that file handle and of

00:09:17,240 --> 00:09:21,579
course this is pretty much the same

00:09:19,220 --> 00:09:25,220
thing with just putting quotes around it

00:09:21,579 --> 00:09:27,320
but then you have the to re-open and you

00:09:25,220 --> 00:09:28,519
have to deal with well that's that

00:09:27,320 --> 00:09:30,350
should be straightforward you know I

00:09:28,519 --> 00:09:32,630
just strip off some characters off the

00:09:30,350 --> 00:09:35,180
file name I separate them out and I'm

00:09:32,630 --> 00:09:36,800
back to my three are Tobin and hopefully

00:09:35,180 --> 00:09:38,510
I don't create a security issue because

00:09:36,800 --> 00:09:41,990
there's some unexpected pattern that I

00:09:38,510 --> 00:09:46,550
wasn't looking for and then of course

00:09:41,990 --> 00:09:49,970
there's not specifying the less than in

00:09:46,550 --> 00:09:53,959
which case it just defaults to a

00:09:49,970 --> 00:09:57,440
standard read format for the file and

00:09:53,959 --> 00:10:02,180
then there's this anybody know what this

00:09:57,440 --> 00:10:05,360
does show of hands that's actually the

00:10:02,180 --> 00:10:08,510
same response I got when I asked profile

00:10:05,360 --> 00:10:11,690
porters the other day in fact nobody

00:10:08,510 --> 00:10:14,950
knew what the one our go ban was so it

00:10:11,690 --> 00:10:18,620
turns out you can say our dollar F is

00:10:14,950 --> 00:10:22,310
the file name you can open the bear word

00:10:18,620 --> 00:10:24,800
of the same type and read it and

00:10:22,310 --> 00:10:28,430
actually get the fit get the contents

00:10:24,800 --> 00:10:31,490
from the file what's even weirder is if

00:10:28,430 --> 00:10:33,560
you set dollar food to F you can then

00:10:31,490 --> 00:10:35,829
read from foo as if it was coming from

00:10:33,560 --> 00:10:38,180
the bear word which is is more

00:10:35,829 --> 00:10:42,949
commentary on the bear word than is the

00:10:38,180 --> 00:10:44,520
one arc open but yeah please don't do

00:10:42,949 --> 00:10:47,430
this

00:10:44,520 --> 00:10:50,160
I'm sure that leave it if you're doing

00:10:47,430 --> 00:10:54,390
pearl golf go for it I'm sure engi has

00:10:50,160 --> 00:10:57,990
already beat you to it so the other

00:10:54,390 --> 00:11:02,190
problem I had to deal with was go to go

00:10:57,990 --> 00:11:05,370
to sauce 'm go to allows you to jump

00:11:02,190 --> 00:11:08,940
into another sub routine with or

00:11:05,370 --> 00:11:11,399
function without having to create an

00:11:08,940 --> 00:11:12,930
extra entry in your stacked is so that

00:11:11,399 --> 00:11:15,450
when somebody does color they don't get

00:11:12,930 --> 00:11:18,779
unexpected results

00:11:15,450 --> 00:11:22,110
the problem is in different versions of

00:11:18,779 --> 00:11:24,209
Perl that would actually leak reference

00:11:22,110 --> 00:11:26,220
counting information it would add a

00:11:24,209 --> 00:11:28,410
reference count and so what we

00:11:26,220 --> 00:11:32,459
unexpectedly discovered was that in Perl

00:11:28,410 --> 00:11:35,459
526 we weren't closing file handles when

00:11:32,459 --> 00:11:38,100
they went out of scope so as a result of

00:11:35,459 --> 00:11:39,990
that I had to do if go-to is available

00:11:38,100 --> 00:11:44,370
then I can do my go-to and awesomeness

00:11:39,990 --> 00:11:47,279
but then if otherwise I had to return

00:11:44,370 --> 00:11:49,230
courses open which meant I had an extra

00:11:47,279 --> 00:11:52,260
entry in my stack when I was in sis open

00:11:49,230 --> 00:11:55,470
which isn't so bad except for prototypes

00:11:52,260 --> 00:11:57,779
because in order to do open you can't

00:11:55,470 --> 00:11:59,339
actually just call open at underscore

00:11:57,779 --> 00:12:01,170
you have to actually call it with the

00:11:59,339 --> 00:12:03,870
correct prototype which means you have

00:12:01,170 --> 00:12:07,339
to figure out the number of arguments

00:12:03,870 --> 00:12:09,810
passed in to open and then call that one

00:12:07,339 --> 00:12:12,839
correctly and it's it's kind of

00:12:09,810 --> 00:12:14,880
frustrating it's it's if you want to

00:12:12,839 --> 00:12:17,310
support older versions of Perl you get

00:12:14,880 --> 00:12:18,870
you you you you can't just do the new

00:12:17,310 --> 00:12:21,240
coolness you have to do all the old

00:12:18,870 --> 00:12:24,690
stuff I'll talk to you about afters I'm

00:12:21,240 --> 00:12:25,950
out of time so the last thing I'll talk

00:12:24,690 --> 00:12:28,320
about is something but we've been

00:12:25,950 --> 00:12:31,350
experimenting with it at work when we

00:12:28,320 --> 00:12:33,180
develop our tests so with this this this

00:12:31,350 --> 00:12:36,480
is a preview of what tests mark file

00:12:33,180 --> 00:12:38,610
looks like so you can create your file

00:12:36,480 --> 00:12:41,220
object you can create assembly to your

00:12:38,610 --> 00:12:43,290
fake file you can do a dash L and it

00:12:41,220 --> 00:12:45,000
will work great but if you're in strict

00:12:43,290 --> 00:12:48,270
mode one of the cool things you can do

00:12:45,000 --> 00:12:50,459
is if you try to open your unmarked file

00:12:48,270 --> 00:12:52,230
it blows up it tells you what follow you

00:12:50,459 --> 00:12:53,430
were trying to get to and tells you the

00:12:52,230 --> 00:12:55,199
stack of where it came from

00:12:53,430 --> 00:12:57,420
so you know when you're writing your

00:12:55,199 --> 00:12:58,530
test that maybe you missed mocking

00:12:57,420 --> 00:13:00,270
something that you weren't thinking

00:12:58,530 --> 00:13:02,910
about or that you didn't even know about

00:13:00,270 --> 00:13:04,950
because often it's five levels deep in

00:13:02,910 --> 00:13:09,450
some Sipan module that you didn't even

00:13:04,950 --> 00:13:11,610
know you had installed so open and close

00:13:09,450 --> 00:13:14,280
is awesome unfortunately there is no

00:13:11,610 --> 00:13:16,680
tied fot tile I keep saying file handle

00:13:14,280 --> 00:13:21,000
tied handle for open door and closed er

00:13:16,680 --> 00:13:22,980
so unfortunately I had to mock tell the

00:13:21,000 --> 00:13:26,670
reader anything that interacts with that

00:13:22,980 --> 00:13:29,730
handle not to mention unlink Andreev

00:13:26,670 --> 00:13:32,670
link if this is of use to you please

00:13:29,730 --> 00:13:35,640
feel free to reach out to me on github

00:13:32,670 --> 00:13:37,650
and let me know what functionality you

00:13:35,640 --> 00:13:39,540
need it's my hope that by the end of

00:13:37,650 --> 00:13:44,010
summer we'll have this fully implemented

00:13:39,540 --> 00:13:48,990
but my co-workers are very good at

00:13:44,010 --> 00:13:51,240
finding bugs in this so we'll see one of

00:13:48,990 --> 00:13:53,790
the other things I need to do is test is

00:13:51,240 --> 00:13:57,600
possibly implement a file system one of

00:13:53,790 --> 00:14:00,630
the patterns we do because it's not it

00:13:57,600 --> 00:14:03,030
we want the file to always have stateful

00:14:00,630 --> 00:14:08,040
information as will open a temp file we

00:14:03,030 --> 00:14:10,050
have to do it in a random file name

00:14:08,040 --> 00:14:12,950
because we we don't want it to be

00:14:10,050 --> 00:14:14,940
predictable for a hacker and

00:14:12,950 --> 00:14:16,680
unfortunately test mod file can't

00:14:14,940 --> 00:14:18,690
predict that I was going to get that

00:14:16,680 --> 00:14:23,430
open that random file so there's no way

00:14:18,690 --> 00:14:25,500
to in advance say mock this random

00:14:23,430 --> 00:14:28,620
filename that hasn't even been generated

00:14:25,500 --> 00:14:29,790
yet so we're thinking right now that I'm

00:14:28,620 --> 00:14:32,310
going to actually have to be able to

00:14:29,790 --> 00:14:37,350
mock an entire file tree in order to get

00:14:32,310 --> 00:14:39,420
this to work right yet mock the

00:14:37,350 --> 00:14:44,610
randomizer was the suggestion and that's

00:14:39,420 --> 00:14:47,550
horrible so this is a preview of some of

00:14:44,610 --> 00:14:49,230
the things that I'm still working on the

00:14:47,550 --> 00:14:51,840
biggest one that I'm kind of embarrassed

00:14:49,230 --> 00:14:54,180
to admit is I'm still not doing file

00:14:51,840 --> 00:14:56,670
permissions why this stuff we've run as

00:14:54,180 --> 00:14:58,470
root so it's it's not the file

00:14:56,670 --> 00:15:02,420
permissions aren't super relevant to us

00:14:58,470 --> 00:15:05,130
but that is coming down the line and

00:15:02,420 --> 00:15:07,980
that's all the time I have unfortunately

00:15:05,130 --> 00:15:09,000
I was in a 20-minute slot so does

00:15:07,980 --> 00:15:11,670
anybody have any question

00:15:09,000 --> 00:15:14,470
[Music]

00:15:11,670 --> 00:15:18,120
okay if you want to have any questions

00:15:14,470 --> 00:15:21,240
later please feel free to reach out

00:15:18,120 --> 00:15:21,240
thank you

00:15:24,410 --> 00:15:27,500

YouTube URL: https://www.youtube.com/watch?v=fCQqreS9YKE


