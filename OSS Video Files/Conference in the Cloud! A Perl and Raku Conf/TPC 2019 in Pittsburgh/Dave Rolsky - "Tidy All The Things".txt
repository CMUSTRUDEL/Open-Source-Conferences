Title: Dave Rolsky - "Tidy All The Things"
Publication date: 2019-06-20
Playlist: TPC 2019 in Pittsburgh
Description: 
	With one config file you can tidy and lint Perl, JavaScript, Go, and many more languages and file formats. If a plugin for your needs doesn't already exist, writing a new one is trivial. Tame your compulsive need to fiddle with the formatting on every line with tidyall.

In this talk I'll show you some configuration examples, explain the plugin system, and demonstrate how to integrate Code::TidyAll with source control, your test suite, and your editor.

Slides are at https://www.houseabsolute.com/presentations/github/tidy-all-the-things/#/
Captions: 
	00:00:00,030 --> 00:00:04,319
all right good morning everyone thanks

00:00:02,129 --> 00:00:06,359
for coming I know even you know 1020 on

00:00:04,319 --> 00:00:09,000
the third day of Yap see is is a bit

00:00:06,359 --> 00:00:10,769
early so my name is Dave Rolle ski and

00:00:09,000 --> 00:00:12,120
I'm gonna be talking about tidying all

00:00:10,769 --> 00:00:13,980
the things and also linting all the

00:00:12,120 --> 00:00:17,220
things but you know that this was what

00:00:13,980 --> 00:00:18,420
fit on the meme generator image so we're

00:00:17,220 --> 00:00:20,279
really we're gonna be talking about code

00:00:18,420 --> 00:00:22,289
title what is it

00:00:20,279 --> 00:00:26,070
basically it's a tool that lets you lint

00:00:22,289 --> 00:00:30,000
and prettify or some tidy files in any

00:00:26,070 --> 00:00:33,000
language JavaScript Perl JSON I've used

00:00:30,000 --> 00:00:36,210
it for go and you could you know use it

00:00:33,000 --> 00:00:37,950
for other languages as well so when the

00:00:36,210 --> 00:00:39,420
question might ask is why I don't know

00:00:37,950 --> 00:00:44,129
how many of you are like me and has

00:00:39,420 --> 00:00:47,100
severe severe coding OCD I really cannot

00:00:44,129 --> 00:00:49,050
stand reading code that is slightly

00:00:47,100 --> 00:00:52,530
differently formatted in different spots

00:00:49,050 --> 00:00:55,050
and I really get annoyed when I see

00:00:52,530 --> 00:00:59,609
things that I know are kind of bad

00:00:55,050 --> 00:01:01,170
practice and in particular I want to be

00:00:59,609 --> 00:01:03,539
able to spend my time to you know when

00:01:01,170 --> 00:01:06,299
doing pull requests reviews at work and

00:01:03,539 --> 00:01:08,460
so on I want to focus on the kind of

00:01:06,299 --> 00:01:10,170
content of the code not the structure of

00:01:08,460 --> 00:01:13,049
it I don't want to be saying hey you

00:01:10,170 --> 00:01:15,060
shouldn't use each on a hash because of

00:01:13,049 --> 00:01:16,619
these problems and I don't want this to

00:01:15,060 --> 00:01:18,810
just be like yeah it's great to write

00:01:16,619 --> 00:01:20,909
this down down in a style guideline but

00:01:18,810 --> 00:01:23,070
it's even better to enforce it

00:01:20,909 --> 00:01:25,619
programmatically via get hooks and tests

00:01:23,070 --> 00:01:27,150
and not have to discuss these things and

00:01:25,619 --> 00:01:28,829
just to have people know this and again

00:01:27,150 --> 00:01:31,049
it's applies to other languages as well

00:01:28,829 --> 00:01:33,420
if you're using go you can use go

00:01:31,049 --> 00:01:35,430
linters and you know have it tell people

00:01:33,420 --> 00:01:37,170
don't do these things and then you end

00:01:35,430 --> 00:01:39,829
up with a higher quality code base and

00:01:37,170 --> 00:01:41,880
you can spend your pull request energy

00:01:39,829 --> 00:01:45,600
focusing on things that really matter

00:01:41,880 --> 00:01:49,350
like does this work of course it doesn't

00:01:45,600 --> 00:01:51,060
work but it looks really pretty so how

00:01:49,350 --> 00:01:53,040
do you all is kind of plug-in and config

00:01:51,060 --> 00:01:55,350
based you don't have to really write any

00:01:53,040 --> 00:01:57,899
code for the most part you would if you

00:01:55,350 --> 00:02:00,000
want to write an add a new format or a

00:01:57,899 --> 00:02:02,759
new linter but other than that it's just

00:02:00,000 --> 00:02:04,799
driven by the config the config says

00:02:02,759 --> 00:02:07,290
what plugins to use and what files they

00:02:04,799 --> 00:02:08,819
apply to and here's an example so you

00:02:07,290 --> 00:02:10,410
can have global ignore so we're going to

00:02:08,819 --> 00:02:11,910
ignore all the things in this particular

00:02:10,410 --> 00:02:14,520
directory and this is a real exam

00:02:11,910 --> 00:02:16,440
from from my daytime distribution we're

00:02:14,520 --> 00:02:17,730
gonna run poor ol critic on anything

00:02:16,440 --> 00:02:19,440
that's a pearl file we're going to run

00:02:17,730 --> 00:02:21,600
pearl tidy on anything that's a profile

00:02:19,440 --> 00:02:23,310
and we you know can specify what

00:02:21,600 --> 00:02:25,230
arguments to pass to those things to

00:02:23,310 --> 00:02:28,860
pearl tidy and pearl critic so we can

00:02:25,230 --> 00:02:30,330
you know pass configs for those we're

00:02:28,860 --> 00:02:32,490
gonna sort lines in our stop words

00:02:30,330 --> 00:02:34,110
that's for the spell checker and then

00:02:32,490 --> 00:02:36,570
we're gonna run test bars and all the

00:02:34,110 --> 00:02:39,450
modules so does that make sense

00:02:36,570 --> 00:02:40,650
pretty straightforward all right better

00:02:39,450 --> 00:02:42,300
you know something comes up where you

00:02:40,650 --> 00:02:45,120
have a question just let me know so this

00:02:42,300 --> 00:02:47,160
is kind of like the abstract version is

00:02:45,120 --> 00:02:49,560
you have global options and then you

00:02:47,160 --> 00:02:52,940
have a plug-in in brackets and then you

00:02:49,560 --> 00:02:55,380
have per plug-in options and you can

00:02:52,940 --> 00:03:00,480
specify the same plug-in multiple times

00:02:55,380 --> 00:03:02,070
if you want so it has a whole bunch of

00:03:00,480 --> 00:03:03,690
different command-line options I'll go

00:03:02,070 --> 00:03:05,160
into but here's kind of the the quick

00:03:03,690 --> 00:03:08,670
way to run it we're gonna run tidy all

00:03:05,160 --> 00:03:10,560
the opacity and - J you can probably

00:03:08,670 --> 00:03:13,140
guess - days jobs it can run in parallel

00:03:10,560 --> 00:03:15,660
and - a just means tidy everything and

00:03:13,140 --> 00:03:18,120
where everything is whatever matches in

00:03:15,660 --> 00:03:20,730
our config file so we'll apply our per

00:03:18,120 --> 00:03:22,650
plug-in filters which can have includes

00:03:20,730 --> 00:03:25,410
and excludes we also apply our global

00:03:22,650 --> 00:03:27,030
excludes and then whatever resulting

00:03:25,410 --> 00:03:30,959
files match will have those plugins

00:03:27,030 --> 00:03:33,840
applied to them so tidy all caches

00:03:30,959 --> 00:03:36,540
things by default in a directory kind of

00:03:33,840 --> 00:03:40,739
in your project by default no PID aldi

00:03:36,540 --> 00:03:44,130
and if the file it is checking has not

00:03:40,739 --> 00:03:46,860
changed then it will not rerun any

00:03:44,130 --> 00:03:48,959
checks if the file is change of course

00:03:46,860 --> 00:03:51,930
it will rerun all the appropriate Tigers

00:03:48,959 --> 00:03:53,610
and linters you can force a run if you

00:03:51,930 --> 00:03:57,000
want and occasionally you have to

00:03:53,610 --> 00:04:01,170
because sometimes the caching can be

00:03:57,000 --> 00:04:03,300
incorrect notably one case where the

00:04:01,170 --> 00:04:05,010
caching is incorrect is let's say that a

00:04:03,300 --> 00:04:07,350
new version of Perl tidy comes out and

00:04:05,010 --> 00:04:10,530
it changes how it wants to format things

00:04:07,350 --> 00:04:13,230
the cache is only looking at your the

00:04:10,530 --> 00:04:15,750
modification time or the content of the

00:04:13,230 --> 00:04:18,540
file you're trying to tidy it doesn't

00:04:15,750 --> 00:04:19,859
take into account the version of the

00:04:18,540 --> 00:04:22,020
plugins that we use and there's kind of

00:04:19,859 --> 00:04:23,970
an open to do to add that of course that

00:04:22,020 --> 00:04:25,290
would be better but it doesn't do that

00:04:23,970 --> 00:04:27,540
yet

00:04:25,290 --> 00:04:28,950
you can also test your tiny nests and

00:04:27,540 --> 00:04:32,070
this is something I'm s mentioned

00:04:28,950 --> 00:04:33,690
earlier so I think it's great to have

00:04:32,070 --> 00:04:36,030
this as commit hooks but of course if

00:04:33,690 --> 00:04:38,730
use and get as you know you can't really

00:04:36,030 --> 00:04:40,650
force people to use commit hooks you can

00:04:38,730 --> 00:04:43,350
yell at them to install them if they're

00:04:40,650 --> 00:04:44,790
not using them but you really want to

00:04:43,350 --> 00:04:46,620
have this as part of your test suite and

00:04:44,790 --> 00:04:49,650
this is kind of the very very simplest

00:04:46,620 --> 00:04:52,050
version so tidy all ships with test code

00:04:49,650 --> 00:04:54,150
tidy all you import that it exports a

00:04:52,050 --> 00:04:56,220
tidy all okay and basically that will

00:04:54,150 --> 00:04:59,100
look for the config file in the root of

00:04:56,220 --> 00:05:01,440
your repository and apply all the tied

00:04:59,100 --> 00:05:03,990
ears and linters and when i say apply it

00:05:01,440 --> 00:05:06,300
actually runs in check mode which means

00:05:03,990 --> 00:05:09,030
rather than actually tidying anything

00:05:06,300 --> 00:05:11,310
it runs the tidier and checks if that

00:05:09,030 --> 00:05:13,590
would have changed the file and that's

00:05:11,310 --> 00:05:14,880
considered a test failure and for the

00:05:13,590 --> 00:05:17,460
linters of course it just runs them

00:05:14,880 --> 00:05:19,500
normally and if the lender has any

00:05:17,460 --> 00:05:20,850
issues that is also a failure and

00:05:19,500 --> 00:05:22,710
there's a bunch of options you can pass

00:05:20,850 --> 00:05:25,290
that correspond to some of the things in

00:05:22,710 --> 00:05:29,540
the config as well as some test specific

00:05:25,290 --> 00:05:32,190
options if you like any questions so far

00:05:29,540 --> 00:05:35,270
all right so I mentioned it has caching

00:05:32,190 --> 00:05:39,300
it actually has a kind of pluggable

00:05:35,270 --> 00:05:41,670
caching strategy implementation and this

00:05:39,300 --> 00:05:44,550
was written at my last job so one thing

00:05:41,670 --> 00:05:47,520
we wanted to do is we had you know we

00:05:44,550 --> 00:05:49,410
had a pretty large code base and running

00:05:47,520 --> 00:05:52,440
tidy all against it took a long time and

00:05:49,410 --> 00:05:54,720
one thing to note is that for the

00:05:52,440 --> 00:05:56,340
testing you might want to tell it to

00:05:54,720 --> 00:05:59,610
always ignore the cache kind of by

00:05:56,340 --> 00:06:01,530
default because for the tests you really

00:05:59,610 --> 00:06:03,060
want a double check again if pearl tidy

00:06:01,530 --> 00:06:05,550
has been upgraded you really want that

00:06:03,060 --> 00:06:09,210
to fail but if you have a very large

00:06:05,550 --> 00:06:11,280
code base that can take a while so it

00:06:09,210 --> 00:06:14,310
would be nice if you could do some

00:06:11,280 --> 00:06:18,470
amount of caching but maybe not the

00:06:14,310 --> 00:06:21,240
default so you can have a plug-in to do

00:06:18,470 --> 00:06:23,300
different types of caching and we had

00:06:21,240 --> 00:06:27,900
something that would save the results of

00:06:23,300 --> 00:06:30,150
Tidy output between CI runs and then our

00:06:27,900 --> 00:06:33,060
sorry save that kind of cache between CI

00:06:30,150 --> 00:06:35,760
runs and then would apply that to the

00:06:33,060 --> 00:06:37,440
next run so we didn't have to run tidy

00:06:35,760 --> 00:06:39,299
all on things that had not changed

00:06:37,440 --> 00:06:41,669
between commits

00:06:39,299 --> 00:06:44,909
and you can do that with implementing a

00:06:41,669 --> 00:06:46,769
caching strategy of your own so it's got

00:06:44,909 --> 00:06:49,739
a whole bunch of CLI options I'll cover

00:06:46,769 --> 00:06:51,419
some of those things for caching for how

00:06:49,739 --> 00:06:54,689
you select files for basa T all that

00:06:51,419 --> 00:06:56,969
stuff so here's some basic ones so we

00:06:54,689 --> 00:07:01,159
saw - a I mean it's just tidy everything

00:06:56,969 --> 00:07:04,679
that would apply - G is anything that is

00:07:01,159 --> 00:07:09,179
modified or added according to get it

00:07:04,679 --> 00:07:11,309
won't check files that are new but

00:07:09,179 --> 00:07:12,929
haven't been added according to get so

00:07:11,309 --> 00:07:17,789
if you have untracked files those are

00:07:12,929 --> 00:07:20,610
ignored the first talking of the morning

00:07:17,789 --> 00:07:23,069
is always challenging you can give it a

00:07:20,610 --> 00:07:24,389
path and if that path is the directory

00:07:23,069 --> 00:07:26,579
you want to get going to want to give it

00:07:24,389 --> 00:07:28,049
- R that means recursively and you can

00:07:26,579 --> 00:07:32,009
also just give it a path to a single

00:07:28,049 --> 00:07:34,409
file and have it tidy that I mentioned

00:07:32,009 --> 00:07:36,479
it has parallelism so if you give it - J

00:07:34,409 --> 00:07:38,669
it will run things in parallel you're

00:07:36,479 --> 00:07:40,879
going to want to do that if you have a

00:07:38,669 --> 00:07:45,449
lot of files because it's kind of slow

00:07:40,879 --> 00:07:47,369
in the when I say it's slow really it's

00:07:45,449 --> 00:07:49,499
the tidier Xand linters that are slow

00:07:47,369 --> 00:07:52,829
perl critic and perl tidy are not the

00:07:49,499 --> 00:07:54,749
fastest things no no no offense intended

00:07:52,829 --> 00:07:56,849
it's just like they're complex in

00:07:54,749 --> 00:07:59,789
particular Perl critic is using ppi

00:07:56,849 --> 00:08:02,429
which is a pure perl or mostly pure Perl

00:07:59,789 --> 00:08:05,669
based parser of Perl and it's not that

00:08:02,429 --> 00:08:06,689
fast so you can run in parallel you need

00:08:05,669 --> 00:08:10,229
to I believe

00:08:06,689 --> 00:08:12,389
install parallel fork manager of Sipan

00:08:10,229 --> 00:08:14,459
as an optional dependency to get this to

00:08:12,389 --> 00:08:16,499
work and then it will just fork off as

00:08:14,459 --> 00:08:18,619
many jobs as you want and this actually

00:08:16,499 --> 00:08:21,269
speeds it up by quite a bit so

00:08:18,619 --> 00:08:23,129
especially again for CI you're going to

00:08:21,269 --> 00:08:25,199
want to be able to do this again when

00:08:23,129 --> 00:08:27,209
you call test code tidy all recall its

00:08:25,199 --> 00:08:30,089
tidy all okay you can tell it how many

00:08:27,209 --> 00:08:32,579
jobs you want because the faster your CI

00:08:30,089 --> 00:08:34,379
is the better you can disable caching

00:08:32,579 --> 00:08:37,050
again if you know you have an issue

00:08:34,379 --> 00:08:39,539
where for example Perl tidy has been

00:08:37,050 --> 00:08:41,279
updated and so the cache is kind of

00:08:39,539 --> 00:08:43,919
invalid but tidy all doesn't know that

00:08:41,279 --> 00:08:46,319
yet you could just pass no cache and it

00:08:43,919 --> 00:08:48,899
will ignore the cache you can also just

00:08:46,319 --> 00:08:50,550
wipe the direct early directory entirely

00:08:48,899 --> 00:08:51,580
that's totally fine it's a cache

00:08:50,550 --> 00:08:54,670
directory

00:08:51,580 --> 00:08:57,700
and of course I meant to get hooks so it

00:08:54,670 --> 00:09:00,730
has some help for writing get hooks so

00:08:57,700 --> 00:09:03,970
it has health it has helper modules for

00:09:00,730 --> 00:09:06,040
pre-commit and another one that I never

00:09:03,970 --> 00:09:10,269
used it might be pre push I always just

00:09:06,040 --> 00:09:12,250
use pre commit so this is again the very

00:09:10,269 --> 00:09:13,990
simplest version of a get hook that runs

00:09:12,250 --> 00:09:16,660
tidy all you just use code to I do you

00:09:13,990 --> 00:09:19,420
all get pre commit and you call check as

00:09:16,660 --> 00:09:21,459
a class method on that package and it

00:09:19,420 --> 00:09:23,170
will look for the things that are about

00:09:21,459 --> 00:09:26,680
to be committed now the one thing it

00:09:23,170 --> 00:09:30,430
doesn't know actually I take it back it

00:09:26,680 --> 00:09:32,170
will it by default will stash changes

00:09:30,430 --> 00:09:34,990
that are not about to be committed and

00:09:32,170 --> 00:09:38,920
then just check what's left and then

00:09:34,990 --> 00:09:40,329
unstack it this is a little buggy to be

00:09:38,920 --> 00:09:42,370
honest one thing I've noticed is

00:09:40,329 --> 00:09:44,350
sometimes it can blow up mid check and

00:09:42,370 --> 00:09:46,570
then you you end up pushing more and

00:09:44,350 --> 00:09:49,480
more things onto the sash every time you

00:09:46,570 --> 00:09:50,620
run and run your commit hook and then if

00:09:49,480 --> 00:09:52,180
you're like me and you have like a

00:09:50,620 --> 00:09:54,010
command line indicator of how many

00:09:52,180 --> 00:09:55,660
things are in your stash and like why is

00:09:54,010 --> 00:09:56,980
this getting bigger and bigger and then

00:09:55,660 --> 00:09:59,500
you look at it and it's just like the

00:09:56,980 --> 00:10:01,810
last changes you try to commit anyway

00:09:59,500 --> 00:10:03,820
don't worry about it too much it does it

00:10:01,810 --> 00:10:07,510
works well enough I think again patches

00:10:03,820 --> 00:10:08,740
welcome right so it's really handy but

00:10:07,510 --> 00:10:10,029
you can't force people to use it so

00:10:08,740 --> 00:10:14,560
you're also going to want to run the

00:10:10,029 --> 00:10:16,690
tests via CI so there's a whole bunch of

00:10:14,560 --> 00:10:19,149
plugins but one I just want to highlight

00:10:16,690 --> 00:10:22,779
first is there's this generic

00:10:19,149 --> 00:10:24,550
transformer and validator plugins so the

00:10:22,779 --> 00:10:26,890
original way things work with heidi all

00:10:24,550 --> 00:10:28,870
was to add a new linter or add a new

00:10:26,890 --> 00:10:31,990
tidier you had to write a new Perl class

00:10:28,870 --> 00:10:33,910
that knew how to do the thing in

00:10:31,990 --> 00:10:37,180
questions if you wanted to add one for

00:10:33,910 --> 00:10:39,490
let's say go format you had to write a

00:10:37,180 --> 00:10:40,630
plug-in called go format I mean you call

00:10:39,490 --> 00:10:42,339
it whatever you want and then it would

00:10:40,630 --> 00:10:45,459
know how to call out to the go format

00:10:42,339 --> 00:10:47,529
executable and know okay if it exits

00:10:45,459 --> 00:10:50,740
with zero it's okay if it exits with one

00:10:47,529 --> 00:10:53,529
it's not and so on and what I realized

00:10:50,740 --> 00:10:56,050
as we wrote more plugins was this is all

00:10:53,529 --> 00:10:57,760
very similar by the way I forgot to

00:10:56,050 --> 00:10:59,740
mention this earlier and since it's on

00:10:57,760 --> 00:11:01,750
my mind I'm just going say this I didn't

00:10:59,740 --> 00:11:03,970
I didn't create tidy all it's created by

00:11:01,750 --> 00:11:04,700
a guy named John Swartz he's also the

00:11:03,970 --> 00:11:08,090
guy who created

00:11:04,700 --> 00:11:10,580
and many years ago I've been maintaining

00:11:08,090 --> 00:11:11,990
it for quite some time but I just I do

00:11:10,580 --> 00:11:13,880
want to give credit where it's due

00:11:11,990 --> 00:11:16,430
before I forget no and that to my slides

00:11:13,880 --> 00:11:18,350
alright so back to the generic transfers

00:11:16,430 --> 00:11:19,490
validator so yeah it used to be you just

00:11:18,350 --> 00:11:22,010
had to ever like write these custom

00:11:19,490 --> 00:11:23,480
plugins but especially for things that

00:11:22,010 --> 00:11:25,040
are in Perl we were just shelling out

00:11:23,480 --> 00:11:27,800
and calling some executable they're

00:11:25,040 --> 00:11:30,800
basically all the same plug-in ok they

00:11:27,800 --> 00:11:32,920
they have kind of general features they

00:11:30,800 --> 00:11:35,930
have the executable you're going to run

00:11:32,920 --> 00:11:37,790
kind of arguments you need to pass how

00:11:35,930 --> 00:11:39,710
you specify the files on the command

00:11:37,790 --> 00:11:42,320
line that you want it to execute against

00:11:39,710 --> 00:11:42,710
and then what exit codes are okay or not

00:11:42,320 --> 00:11:45,580
okay

00:11:42,710 --> 00:11:47,900
and that's it so I wrote these generic

00:11:45,580 --> 00:11:51,170
plugins that let you actually specify

00:11:47,900 --> 00:11:53,090
all that via config so now we don't need

00:11:51,170 --> 00:11:54,770
to write more and more plugins that are

00:11:53,090 --> 00:11:56,360
nearly identical and upload than to

00:11:54,770 --> 00:11:58,850
Sipan and have people have to download

00:11:56,360 --> 00:12:00,890
them just to run yet another executable

00:11:58,850 --> 00:12:03,230
from another language instead you can

00:12:00,890 --> 00:12:05,270
just use this so this kind of greatly

00:12:03,230 --> 00:12:07,670
simplifies interactions with tidy all I

00:12:05,270 --> 00:12:12,140
think that said we have a bunch of

00:12:07,670 --> 00:12:14,780
plugins that already exist in particular

00:12:12,140 --> 00:12:17,510
writing a plug-in can be faster if it's

00:12:14,780 --> 00:12:20,150
something in Perl and you don't need to

00:12:17,510 --> 00:12:22,910
spawn a new process so for example the

00:12:20,150 --> 00:12:24,860
Perl tidy plug-in can do it all in the

00:12:22,910 --> 00:12:27,980
same process as tidy all because Perl

00:12:24,860 --> 00:12:30,050
tidy has an API that you can use against

00:12:27,980 --> 00:12:32,390
the things you're tidying as opposed to

00:12:30,050 --> 00:12:35,480
calling the Perl tidy executable so that

00:12:32,390 --> 00:12:37,310
is a little faster so that is an option

00:12:35,480 --> 00:12:37,850
again for Perl stuff but for anything

00:12:37,310 --> 00:12:40,040
else

00:12:37,850 --> 00:12:42,790
it really isn't unless you have like a

00:12:40,040 --> 00:12:45,190
go tidier that you wrote in Perl and why

00:12:42,790 --> 00:12:48,200
that that would that's bizarre

00:12:45,190 --> 00:12:49,760
generally the the language itself has a

00:12:48,200 --> 00:12:52,520
better ecosystem than what you'll find

00:12:49,760 --> 00:12:54,020
in Perl so lots of plugins I mentioned

00:12:52,520 --> 00:12:57,650
Perl tidy and perl critic of course I

00:12:54,020 --> 00:12:59,180
used those on basically everything we

00:12:57,650 --> 00:13:02,990
have JSON tied ears

00:12:59,180 --> 00:13:05,450
Jas Hinton jslint line sorting which you

00:13:02,990 --> 00:13:07,370
saw earlier as well test VARs I saw

00:13:05,450 --> 00:13:09,980
earlier as well go format and go fit

00:13:07,370 --> 00:13:11,750
like I said it's easy to write more you

00:13:09,980 --> 00:13:15,100
can also use that generic transformer

00:13:11,750 --> 00:13:18,529
and validator to do it even more easily

00:13:15,100 --> 00:13:19,220
ok so I know this talk is about tidy all

00:13:18,529 --> 00:13:20,810
but now I'm going to talk about

00:13:19,220 --> 00:13:22,550
something totally different so I'm

00:13:20,810 --> 00:13:31,430
writing this new replacement for tidy

00:13:22,550 --> 00:13:33,740
all yeah this is the story is oldest

00:13:31,430 --> 00:13:36,920
programming programmer has a tool

00:13:33,740 --> 00:13:39,170
programmer uses tool pro guru says I can

00:13:36,920 --> 00:13:41,509
write a better tool programmer starts

00:13:39,170 --> 00:13:43,279
writing new tool programmer has new tool

00:13:41,509 --> 00:13:46,699
programmer says I can do better okay yes

00:13:43,279 --> 00:13:49,389
it's an endless recursive loop so I'm

00:13:46,699 --> 00:13:52,040
writing a new tool it's called precious

00:13:49,389 --> 00:13:55,809
because it's one code quality tool to

00:13:52,040 --> 00:13:58,399
rule them all and so why am I doing this

00:13:55,809 --> 00:14:01,610
first of all I wanted to learn rust so

00:13:58,399 --> 00:14:02,959
I'm writing in a rust which is much

00:14:01,610 --> 00:14:04,430
harder than writing this in Perl I

00:14:02,959 --> 00:14:07,459
couldn't I could have written this in

00:14:04,430 --> 00:14:09,680
Perl and been done with it weeks months

00:14:07,459 --> 00:14:11,120
ago but learning rust is fun I don't

00:14:09,680 --> 00:14:13,279
know if any of you went to Andrews talk

00:14:11,120 --> 00:14:16,370
about rust before it's just a really

00:14:13,279 --> 00:14:19,639
cool language and the other thing is

00:14:16,370 --> 00:14:21,319
tidy all has a core design issue that

00:14:19,639 --> 00:14:24,559
makes it not play well with go which is

00:14:21,319 --> 00:14:28,189
the tidy all like through and through is

00:14:24,559 --> 00:14:30,379
all about files and it's really hard to

00:14:28,189 --> 00:14:32,449
get it to not operate on a per file

00:14:30,379 --> 00:14:35,480
basis it require like just this massive

00:14:32,449 --> 00:14:38,990
restructuring of the codebase but how

00:14:35,480 --> 00:14:41,089
many of you have done any go a few ok so

00:14:38,990 --> 00:14:43,879
if you have you know the go and go a

00:14:41,089 --> 00:14:48,439
package is a directory of files go does

00:14:43,879 --> 00:14:49,759
not care about files per se cares about

00:14:48,439 --> 00:14:52,189
the package and particularly when you're

00:14:49,759 --> 00:14:54,980
talking about linting which involves

00:14:52,189 --> 00:14:57,829
your reading a package in generating an

00:14:54,980 --> 00:14:59,809
ast and doing stuff on that it operates

00:14:57,829 --> 00:15:01,309
on a directory not on a file so it

00:14:59,809 --> 00:15:04,220
doesn't make sense to actually talk

00:15:01,309 --> 00:15:05,959
about linting go files you can only link

00:15:04,220 --> 00:15:08,329
go packages now for formatting for

00:15:05,959 --> 00:15:10,550
tiding yes that operates on files but

00:15:08,329 --> 00:15:12,889
that fundamental mismatch actually makes

00:15:10,550 --> 00:15:15,709
it really hard to do certain things with

00:15:12,889 --> 00:15:17,809
go with tidy all so I wanted to write

00:15:15,709 --> 00:15:19,939
something new that was able to operate

00:15:17,809 --> 00:15:22,819
either on files or directories on a kind

00:15:19,939 --> 00:15:25,309
of per plug-in basis and so I ended up

00:15:22,819 --> 00:15:27,110
working on this if you're curious and

00:15:25,309 --> 00:15:31,540
want to follow the progress it's at that

00:15:27,110 --> 00:15:33,850
URL it somewhat works now but there's

00:15:31,540 --> 00:15:35,650
you know there's just a bunch to do to

00:15:33,850 --> 00:15:37,810
make it even close to as capable as tidy

00:15:35,650 --> 00:15:39,610
all one thing that is different is

00:15:37,810 --> 00:15:41,710
there's no notion of plugging classes or

00:15:39,610 --> 00:15:43,750
anything like that it's all done through

00:15:41,710 --> 00:15:46,240
that generic validator and transformer

00:15:43,750 --> 00:15:47,770
that idea I talked about before and then

00:15:46,240 --> 00:15:51,250
the other thing they hope to eventually

00:15:47,770 --> 00:15:53,110
add is support for language LSP the LS

00:15:51,250 --> 00:15:55,540
pre-programmed call language server

00:15:53,110 --> 00:15:59,050
protocol which is basically a protocol

00:15:55,540 --> 00:16:01,540
for kind of code hinting code linting

00:15:59,050 --> 00:16:04,570
code tidying that was originally built

00:16:01,540 --> 00:16:07,300
for editors but if you have a language

00:16:04,570 --> 00:16:08,830
server protocol server like foreign

00:16:07,300 --> 00:16:10,270
language there's no reason a tool like

00:16:08,830 --> 00:16:11,710
this couldn't talk to it and that would

00:16:10,270 --> 00:16:14,410
be a lot more efficient than spawning

00:16:11,710 --> 00:16:15,850
new processes but I have found you know

00:16:14,410 --> 00:16:17,530
even running this and spawning pearl

00:16:15,850 --> 00:16:19,390
tidy and pearl critic over and over if I

00:16:17,530 --> 00:16:21,010
do it in parallel it's just fine because

00:16:19,390 --> 00:16:24,040
you know the operating system is really

00:16:21,010 --> 00:16:25,600
good about knowing okay I just ran pearl

00:16:24,040 --> 00:16:27,760
critic and it still has all that stuff

00:16:25,600 --> 00:16:32,080
in memory so it actually works out okay

00:16:27,760 --> 00:16:34,840
so I will certainly accept patches to

00:16:32,080 --> 00:16:36,370
tidy all I'm not going to revise all of

00:16:34,840 --> 00:16:39,010
the internals to make it play well with

00:16:36,370 --> 00:16:41,380
go especially when I could bang my head

00:16:39,010 --> 00:16:42,700
against rust endlessly it's it's a fun

00:16:41,380 --> 00:16:45,520
language but it's a very challenging

00:16:42,700 --> 00:16:51,750
language all right we have four minutes

00:16:45,520 --> 00:16:55,810
left any questions stunned silence

00:16:51,750 --> 00:16:59,610
disappointed silence mocking silence I

00:16:55,810 --> 00:17:02,610
don't know what it is questions anything

00:16:59,610 --> 00:17:02,610
yes

00:17:14,000 --> 00:17:17,610
okay so the question was say you wanted

00:17:16,319 --> 00:17:19,230
to use this for say something like

00:17:17,610 --> 00:17:22,050
puppet config files and you have your

00:17:19,230 --> 00:17:25,050
own in-house rules how would you do that

00:17:22,050 --> 00:17:26,520
so yes you absolutely can do that and

00:17:25,050 --> 00:17:28,800
there's a couple different ways one you

00:17:26,520 --> 00:17:31,170
could write a new plug-in class you

00:17:28,800 --> 00:17:32,640
could call it my house puppet lint or

00:17:31,170 --> 00:17:34,470
whatever it doesn't really matter you

00:17:32,640 --> 00:17:35,970
just put it under code tidy all plug-in

00:17:34,470 --> 00:17:37,740
anywhere in that namespace and then you

00:17:35,970 --> 00:17:41,900
can reference it by the short name and

00:17:37,740 --> 00:17:46,350
the config so for example we saw earlier

00:17:41,900 --> 00:17:48,780
much earlier like when some plug-in is a

00:17:46,350 --> 00:17:52,860
perl module called code tidy all plug-in

00:17:48,780 --> 00:17:54,750
some plug-in so you could do that way

00:17:52,860 --> 00:17:56,520
you could use the generic transformer

00:17:54,750 --> 00:17:59,550
and as far as how you specify kind of

00:17:56,520 --> 00:18:02,580
custom things so you see here for Perl

00:17:59,550 --> 00:18:05,760
critic and Perl tidy I'm I have this

00:18:02,580 --> 00:18:07,170
army thing and it's actually referring

00:18:05,760 --> 00:18:09,120
to this dollar route that's the route of

00:18:07,170 --> 00:18:10,770
your repository it's just really the

00:18:09,120 --> 00:18:12,900
root of where essentially it's where the

00:18:10,770 --> 00:18:15,000
tidy all config file lives so if you

00:18:12,900 --> 00:18:16,620
have your tidy all dot ini' in the same

00:18:15,000 --> 00:18:18,720
directory as your perl critic RC and

00:18:16,620 --> 00:18:20,460
promote IDRC it's really easy to refer

00:18:18,720 --> 00:18:23,610
to them I mean if it's a subdirectory

00:18:20,460 --> 00:18:27,570
it'll work as well so you can pass

00:18:23,610 --> 00:18:29,850
additional arguments to whatever the

00:18:27,570 --> 00:18:31,980
plug-in is however the plug-in accepts

00:18:29,850 --> 00:18:35,040
it again with the generic validator

00:18:31,980 --> 00:18:37,620
plug-in it has it takes Arg V and you

00:18:35,040 --> 00:18:40,920
would pass the path to whatever custom

00:18:37,620 --> 00:18:43,620
configu have so basically all the tidier

00:18:40,920 --> 00:18:46,620
x' work that way that accepts some sort

00:18:43,620 --> 00:18:48,660
of extra config they take additional

00:18:46,620 --> 00:18:51,270
options one way or another so like

00:18:48,660 --> 00:18:53,310
somehow that is possible so anything you

00:18:51,270 --> 00:18:54,990
create it will also be possible the same

00:18:53,310 --> 00:18:57,110
way so yeah did that answer your

00:18:54,990 --> 00:18:57,110
question

00:19:02,570 --> 00:19:08,180
oh okay so the question was like how

00:19:06,470 --> 00:19:10,310
would you actually write the tidier of

00:19:08,180 --> 00:19:13,820
the linter oh that's a very different

00:19:10,310 --> 00:19:17,150
question that's a hard question to

00:19:13,820 --> 00:19:19,040
answer it because okay so essentially

00:19:17,150 --> 00:19:21,980
you need something that can parse the

00:19:19,040 --> 00:19:25,220
language or config file in question and

00:19:21,980 --> 00:19:27,520
then turn it into something to which you

00:19:25,220 --> 00:19:30,260
can apply rules if it's a linter

00:19:27,520 --> 00:19:32,900
typically for programming languages you

00:19:30,260 --> 00:19:36,560
want to build an AST although actually

00:19:32,900 --> 00:19:38,210
ppi doesn't build an AST exactly if you

00:19:36,560 --> 00:19:40,550
saw Sora's talk yesterday talked about

00:19:38,210 --> 00:19:42,350
AST is versus documents so yeah you need

00:19:40,550 --> 00:19:45,680
like an AST builder or some sort of

00:19:42,350 --> 00:19:48,020
document parser that gives you the

00:19:45,680 --> 00:19:51,200
capability of analyzing it that's hard I

00:19:48,020 --> 00:19:52,640
mean if you look at ppi it's really like

00:19:51,200 --> 00:19:54,740
there's an enormous amount of code that

00:19:52,640 --> 00:19:57,800
goes into this it's a very hard endeavor

00:19:54,740 --> 00:19:59,660
I don't I haven't looked at poppin in

00:19:57,800 --> 00:20:03,200
many years and I don't remember how

00:19:59,660 --> 00:20:04,730
complicated it is I know for something

00:20:03,200 --> 00:20:06,200
like ansible which is all ya know it

00:20:04,730 --> 00:20:08,030
would actually be fairly easy right you

00:20:06,200 --> 00:20:11,330
could you could start with a yeah more

00:20:08,030 --> 00:20:12,920
parser and then ansible has kind of more

00:20:11,330 --> 00:20:19,790
structure than Yambol in that they're

00:20:12,920 --> 00:20:21,500
kind of known keys and so on so if

00:20:19,790 --> 00:20:24,050
you're doing ansible yeah you'd start

00:20:21,500 --> 00:20:26,270
with a yamo parser and then have some

00:20:24,050 --> 00:20:29,480
sort of system of rules again you could

00:20:26,270 --> 00:20:31,550
look at perl critic for inspiration it's

00:20:29,480 --> 00:20:34,280
use of ppi and how it kind of does that

00:20:31,550 --> 00:20:36,260
stuff i think is a good way to

00:20:34,280 --> 00:20:40,370
understand but does it the real answer

00:20:36,260 --> 00:20:42,830
is it's complicated no I

00:20:40,370 --> 00:20:44,750
it's absolutely doable it's just a fair

00:20:42,830 --> 00:20:47,000
bit of work okay so he gave me the done

00:20:44,750 --> 00:20:51,890
sign but is there one more question

00:20:47,000 --> 00:20:55,820
that's quick all right so well if not

00:20:51,890 --> 00:20:57,350
then I will just say oh I don't have a

00:20:55,820 --> 00:20:59,800
slide that says thank you but thank you

00:20:57,350 --> 00:20:59,800

YouTube URL: https://www.youtube.com/watch?v=MNEnnEi-XMA


