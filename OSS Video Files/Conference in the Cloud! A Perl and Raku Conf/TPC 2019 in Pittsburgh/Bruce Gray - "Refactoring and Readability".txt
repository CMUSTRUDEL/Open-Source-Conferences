Title: Bruce Gray - "Refactoring and Readability"
Publication date: 2019-06-18
Playlist: TPC 2019 in Pittsburgh
Description: 
	Refactoring is:
- worth practicing as a discrete skill
- bound to an implied value judgement of "better" code
- best served with a separate commit workflow
- unsafe without automated testing
Readability is:
- crucial to code quality
- best achieved by "switching hats" during refactoring
- to be prioritized over premature optimization.
- beneficial to more than just technical debt
Captions: 
	00:00:37,810 --> 00:00:46,270
fast housekeeping and preface I tried to

00:00:42,640 --> 00:00:47,980
make the slides worth downloading and I

00:00:46,270 --> 00:00:50,980
welcome emails with constructive

00:00:47,980 --> 00:00:52,870
critique or stopped me in the hallway

00:00:50,980 --> 00:00:58,510
I love the hallway discussions and I'm

00:00:52,870 --> 00:01:01,720
always interrupted I want you to easily

00:00:58,510 --> 00:01:08,050
hear me even from the back if I lose

00:01:01,720 --> 00:01:11,560
volume everybody signal me QA is the

00:01:08,050 --> 00:01:13,899
last 10 minutes I'm keen for your

00:01:11,560 --> 00:01:17,590
questions but I can only take quick

00:01:13,899 --> 00:01:18,759
questions throughout a single sentence

00:01:17,590 --> 00:01:23,080
question where you need something

00:01:18,759 --> 00:01:26,460
clarified yes please ask will have no

00:01:23,080 --> 00:01:30,280
time for statements of disagreement or

00:01:26,460 --> 00:01:36,369
but what about and I'll know that you

00:01:30,280 --> 00:01:38,979
want to my questions to you or for you

00:01:36,369 --> 00:01:43,450
to formulate answers in your head in

00:01:38,979 --> 00:01:47,950
about 10 seconds please do think of your

00:01:43,450 --> 00:01:53,530
answer it helps the learning process hi

00:01:47,950 --> 00:01:56,619
I'm Bruce gray youtl online I've been

00:01:53,530 --> 00:01:57,040
giving talks on Perl 6 for several years

00:01:56,619 --> 00:02:02,200
now

00:01:57,040 --> 00:02:05,640
Arden okay several years Perl 6 and now

00:02:02,200 --> 00:02:05,640
I wanted to tackle something harder

00:02:06,000 --> 00:02:11,040
something that happens to transcend the

00:02:08,350 --> 00:02:19,420
particulars of most languages syntax

00:02:11,040 --> 00:02:23,290
this is not a Perl specific talk I get

00:02:19,420 --> 00:02:27,160
cheer from the back and where I do use

00:02:23,290 --> 00:02:32,019
Perl 5 code I don't want to take up

00:02:27,160 --> 00:02:35,049
space on every code slide so I'll use

00:02:32,019 --> 00:02:41,820
the signatures added to Perl 5 5 years

00:02:35,049 --> 00:02:41,820
ago so I can just write this

00:02:46,040 --> 00:02:51,769
last bit of preface I gave this talk

00:02:48,140 --> 00:02:55,970
last week and I shelved it and started

00:02:51,769 --> 00:02:58,129
over I'd written it like an 8 hour class

00:02:55,970 --> 00:03:01,849
crammed into an hour and nothing could

00:02:58,129 --> 00:03:03,739
be understood and a year into a

00:03:01,849 --> 00:03:07,400
five-year mission to improve this field

00:03:03,739 --> 00:03:11,690
and the talk was terrible so this talk

00:03:07,400 --> 00:03:14,870
is a calculated scatter shot across the

00:03:11,690 --> 00:03:17,360
topic I presented it at South East linux

00:03:14,870 --> 00:03:19,040
fest three days ago much better you

00:03:17,360 --> 00:03:21,379
might want to watch their video to see

00:03:19,040 --> 00:03:25,000
the parts I'm skipping today which made

00:03:21,379 --> 00:03:25,000
room for still better material

00:03:26,620 --> 00:03:35,239
refactoring is changing code without

00:03:31,519 --> 00:03:39,290
changing its effect on the smallest

00:03:35,239 --> 00:03:42,410
scale is just rewording so why learn

00:03:39,290 --> 00:03:48,049
about it formally when we all already do

00:03:42,410 --> 00:03:50,630
it every day at age 1 we pick items up

00:03:48,049 --> 00:03:55,069
and put items down you don't need a

00:03:50,630 --> 00:03:58,790
class on picking up boxes unless you

00:03:55,069 --> 00:04:01,250
work for UPS and then more knowledge on

00:03:58,790 --> 00:04:03,319
body mechanics and how to find the

00:04:01,250 --> 00:04:07,870
center of gravity on oddball packages

00:04:03,319 --> 00:04:07,870
would mean a less painful work day I

00:04:09,700 --> 00:04:22,310
must preface the refactoring with safety

00:04:19,040 --> 00:04:26,230
refactoring cannot no excuse me

00:04:22,310 --> 00:04:32,600
refactoring is not safe refactoring is

00:04:26,230 --> 00:04:36,140
unsafe it cannot be done safely even

00:04:32,600 --> 00:04:43,430
pearl tidy can break code in very rare

00:04:36,140 --> 00:04:45,770
instances I had a commit reverted by a

00:04:43,430 --> 00:04:47,450
front-end specialist I had trimmed

00:04:45,770 --> 00:04:49,010
trailing whitespace that made a one

00:04:47,450 --> 00:04:52,520
pixel difference only an Internet

00:04:49,010 --> 00:04:55,280
Explorer and it doesn't matter that

00:04:52,520 --> 00:04:58,340
that's trivial I had caused an

00:04:55,280 --> 00:05:02,110
observable change that I did not intend

00:04:58,340 --> 00:05:02,110
to make I was wrong

00:05:02,620 --> 00:05:10,640
testing is what makes refactoring safe

00:05:06,500 --> 00:05:14,330
enough to do at will and testing means

00:05:10,640 --> 00:05:17,740
an automated test suite not the ad hoc

00:05:14,330 --> 00:05:22,760
testing required in most schools Oh

00:05:17,740 --> 00:05:24,650
source control of course without testing

00:05:22,760 --> 00:05:27,650
how will you know if you broke something

00:05:24,650 --> 00:05:28,340
in your refactoring without source

00:05:27,650 --> 00:05:34,220
control

00:05:28,340 --> 00:05:36,560
how will you undo that breakage if

00:05:34,220 --> 00:05:41,390
you're thinking backup you don't want to

00:05:36,560 --> 00:05:43,550
talk to your backup guy in a pinch if

00:05:41,390 --> 00:05:46,760
somebody wants you to just look at the

00:05:43,550 --> 00:05:49,520
script for a minute we'll just start

00:05:46,760 --> 00:05:56,090
minimal source control it can be that

00:05:49,520 --> 00:05:56,540
simple in a pinch with hard to test Web

00:05:56,090 --> 00:05:58,640
Apps

00:05:56,540 --> 00:06:01,640
I have been known to set up a mock

00:05:58,640 --> 00:06:02,750
database get a bunch of URLs run them

00:06:01,640 --> 00:06:05,480
through a script to remove the time

00:06:02,750 --> 00:06:07,970
stamps take the md5 s and compare MD

00:06:05,480 --> 00:06:10,280
Phi's in between runs as assurance that

00:06:07,970 --> 00:06:13,280
I'm not changing behavior but that is a

00:06:10,280 --> 00:06:18,830
kludge to achieve the absolute bare

00:06:13,280 --> 00:06:21,110
minimum of testing the better coverage

00:06:18,830 --> 00:06:26,060
you have in your test suite the less

00:06:21,110 --> 00:06:29,420
unsafe all your code changes are so that

00:06:26,060 --> 00:06:32,360
was safety moving on

00:06:29,420 --> 00:06:37,010
code changes I said there are three

00:06:32,360 --> 00:06:39,410
kinds I called them modes fix fixing

00:06:37,010 --> 00:06:42,470
something that was thought to work but

00:06:39,410 --> 00:06:45,830
does not function correctly add is

00:06:42,470 --> 00:06:50,960
adding new function and refactoring is

00:06:45,830 --> 00:06:57,190
neutral between the two you should be in

00:06:50,960 --> 00:06:59,900
a mode and know that you're in the mode

00:06:57,190 --> 00:07:04,130
be conscious of it you don't have to

00:06:59,900 --> 00:07:06,140
finish fixing a bug before you refactor

00:07:04,130 --> 00:07:10,400
something that you need to refactor in

00:07:06,140 --> 00:07:14,320
there but say I'm clarifying this so

00:07:10,400 --> 00:07:16,670
that I can understand it to fix it not

00:07:14,320 --> 00:07:21,500
I'll just clean this up while I'm in

00:07:16,670 --> 00:07:24,500
here and keep the modes clear in your

00:07:21,500 --> 00:07:27,400
commits too even if you're not doing

00:07:24,500 --> 00:07:31,790
test-driven development the add function

00:07:27,400 --> 00:07:33,860
commit refactor commit make it clear in

00:07:31,790 --> 00:07:36,890
your commit logs which one you're doing

00:07:33,860 --> 00:07:40,420
you could commit messages you can squash

00:07:36,890 --> 00:07:40,420
before pushing your branch

00:07:45,610 --> 00:07:52,389
whether you are creating or altering

00:07:48,849 --> 00:07:55,719
code you still need to decide how to

00:07:52,389 --> 00:08:00,849
express it what influences those

00:07:55,719 --> 00:08:04,629
decisions these are the factors that I

00:08:00,849 --> 00:08:11,069
could think of the engineering forces

00:08:04,629 --> 00:08:15,009
that push your choice in how to say code

00:08:11,069 --> 00:08:19,449
maybe the optimized solution does not

00:08:15,009 --> 00:08:22,150
fit in well with the surrounding code or

00:08:19,449 --> 00:08:25,599
you know that the learning Pearl Book

00:08:22,150 --> 00:08:28,060
said always write it this way but you'd

00:08:25,599 --> 00:08:30,270
have to look that way up and that would

00:08:28,060 --> 00:08:33,490
break your flow

00:08:30,270 --> 00:08:37,360
my favorite is trying to code with the

00:08:33,490 --> 00:08:43,029
future in mind but that flexible code is

00:08:37,360 --> 00:08:45,610
harder for a new reader to grasp so for

00:08:43,029 --> 00:08:47,860
new code I do think these are the forces

00:08:45,610 --> 00:08:52,029
if you can think of others that are

00:08:47,860 --> 00:08:56,519
significant email me that's new code for

00:08:52,029 --> 00:08:56,519
existing code there is one more force

00:08:57,149 --> 00:09:03,790
the code itself is a force affecting

00:09:01,630 --> 00:09:07,120
your decisions even if you wrote it one

00:09:03,790 --> 00:09:12,519
minute ago there's inertia because you

00:09:07,120 --> 00:09:15,310
have to type any changes that resistance

00:09:12,519 --> 00:09:19,000
is magnified if you didn't write it

00:09:15,310 --> 00:09:21,640
somebody else wrote it I'd say that

00:09:19,000 --> 00:09:25,500
resistance is squared when you are not

00:09:21,640 --> 00:09:29,199
experienced and practiced at refactoring

00:09:25,500 --> 00:09:30,070
and the resistance is cubed if you've

00:09:29,199 --> 00:09:33,339
got the sweats

00:09:30,070 --> 00:09:39,899
that's no source control no automated

00:09:33,339 --> 00:09:39,899
testing we'll come back to this

00:09:41,190 --> 00:09:48,370
the simplest refactorings are just

00:09:43,900 --> 00:09:50,560
changes of syntax so you come to pearl

00:09:48,370 --> 00:09:54,190
you've heard these dynamic languages all

00:09:50,560 --> 00:09:56,350
Auto extend their arrays and referring

00:09:54,190 --> 00:09:58,630
to the array numerically gives the size

00:09:56,350 --> 00:10:01,570
of the array which is 1 past the end of

00:09:58,630 --> 00:10:14,710
the array so to add to the end of the

00:10:01,570 --> 00:10:16,170
array you would write but there is a

00:10:14,710 --> 00:10:22,360
word for that

00:10:16,170 --> 00:10:26,140
push and to get the socks back you just

00:10:22,360 --> 00:10:30,070
use a negative 1 index to do and then

00:10:26,140 --> 00:10:33,460
then you declare to the array oh you are

00:10:30,070 --> 00:10:35,910
size your size is 1 smaller than you

00:10:33,460 --> 00:10:35,910
thought it was

00:10:38,250 --> 00:10:46,090
I've seen that all in real code those

00:10:43,840 --> 00:10:52,930
last two lines together there's a word

00:10:46,090 --> 00:10:58,650
for that pop now in the initial forms

00:10:52,930 --> 00:11:04,870
crossed out now pact is repeated

00:10:58,650 --> 00:11:11,560
repetition is a code smell the push and

00:11:04,870 --> 00:11:15,610
pop forms don't repeat they are dry but

00:11:11,560 --> 00:11:18,580
that's actually a minor point push and

00:11:15,610 --> 00:11:21,070
pop are more readable well that's a

00:11:18,580 --> 00:11:25,270
arguable point they're much more

00:11:21,070 --> 00:11:28,510
readable to all of us I'm sure but if

00:11:25,270 --> 00:11:31,990
you didn't know push and pop you

00:11:28,510 --> 00:11:37,330
wouldn't understand it at all so not

00:11:31,990 --> 00:11:42,210
more readable my point is there is

00:11:37,330 --> 00:11:42,210
weight to there's a word for that

00:11:43,080 --> 00:11:50,680
vocabulary is the most fundamental

00:11:45,450 --> 00:11:53,830
standard form the language designer or

00:11:50,680 --> 00:11:59,860
library designer foresaw a common use

00:11:53,830 --> 00:12:01,930
case and named a method for your use so

00:11:59,860 --> 00:12:06,520
using those words is the most reliable

00:12:01,930 --> 00:12:12,430
way to communicate usually shorter and

00:12:06,520 --> 00:12:16,630
faster code to that you can only use the

00:12:12,430 --> 00:12:21,940
words if you know the words so you must

00:12:16,630 --> 00:12:24,750
learn your language and its major

00:12:21,940 --> 00:12:24,750
libraries

00:12:26,190 --> 00:12:34,069
since I learned the function first in

00:12:29,250 --> 00:12:39,420
Perl 6 I've used it every week in Perl 5

00:12:34,069 --> 00:12:41,699
and I've been converting this to this

00:12:39,420 --> 00:12:45,540
since I learned about it last year at

00:12:41,699 --> 00:12:48,980
this conference that has been in pearl

00:12:45,540 --> 00:12:48,980
since 5.12

00:12:57,190 --> 00:13:03,830
there are mechanics that have been well

00:13:00,230 --> 00:13:07,880
researched to help manage large changes

00:13:03,830 --> 00:13:09,860
to minimize your untestable time that's

00:13:07,880 --> 00:13:13,010
that's your danger time the time where

00:13:09,860 --> 00:13:15,470
your tests are just broken why run them

00:13:13,010 --> 00:13:19,339
to say is everything working you know

00:13:15,470 --> 00:13:24,830
it's not working whole books are written

00:13:19,339 --> 00:13:28,760
on the fine details in this example we

00:13:24,830 --> 00:13:34,209
want to add a verb to the name final

00:13:28,760 --> 00:13:34,209
form we want trigger final form

00:13:38,740 --> 00:13:47,200
so you rename the sub and your code is

00:13:42,070 --> 00:13:51,670
broken until you change every caller to

00:13:47,200 --> 00:13:53,410
have the same name right now if it's

00:13:51,670 --> 00:13:57,040
just one or two callers in the same file

00:13:53,410 --> 00:14:00,250
we'll just rename the calls no need to

00:13:57,040 --> 00:14:03,580
get complex about it but if there are 20

00:14:00,250 --> 00:14:06,940
callers across 12 different files that's

00:14:03,580 --> 00:14:12,250
too long to leave things untestable so

00:14:06,940 --> 00:14:17,080
you create a new sub with the original

00:14:12,250 --> 00:14:20,440
name that does nothing but call the new

00:14:17,080 --> 00:14:22,890
name with the same arguments and return

00:14:20,440 --> 00:14:22,890
its result

00:14:25,720 --> 00:14:31,510
at this point your code is unbroken you

00:14:29,800 --> 00:14:34,290
can run tests again you haven't achieved

00:14:31,510 --> 00:14:38,440
anything but you can run tests again and

00:14:34,290 --> 00:14:41,050
now you can change a few callers and run

00:14:38,440 --> 00:14:43,690
tests again and change a whole files

00:14:41,050 --> 00:14:46,120
worth from final form to trigger final

00:14:43,690 --> 00:14:48,340
form and run your tests again and then

00:14:46,120 --> 00:14:50,320
finish up and run your tests again and

00:14:48,340 --> 00:14:53,290
then comment out the first three lines

00:14:50,320 --> 00:14:55,090
and run your tests again and then delete

00:14:53,290 --> 00:14:58,090
the first three lines and run your tests

00:14:55,090 --> 00:15:02,620
again and that leaves exactly what you

00:14:58,090 --> 00:15:07,150
wanted with pretty much no untestable

00:15:02,620 --> 00:15:10,660
time that's expressed a little

00:15:07,150 --> 00:15:13,090
differently in the book there is a

00:15:10,660 --> 00:15:15,370
similar technique to temporarily wrap a

00:15:13,090 --> 00:15:21,490
subroutine to help debug it I'm skipping

00:15:15,370 --> 00:15:28,090
it but the slides have the details back

00:15:21,490 --> 00:15:30,990
to our forces I assert that all these

00:15:28,090 --> 00:15:30,990
are the same thing

00:15:35,880 --> 00:15:42,450
the top five are all readability well

00:15:39,510 --> 00:15:47,880
they're all addressed by a focus on

00:15:42,450 --> 00:15:50,400
readability now bottom right boundaries

00:15:47,880 --> 00:15:52,410
scope area of responsibility that is a

00:15:50,400 --> 00:15:58,920
separate force that you must try to

00:15:52,410 --> 00:16:02,100
balance far-left performance is also

00:15:58,920 --> 00:16:09,330
separate that's not readability but you

00:16:02,100 --> 00:16:11,760
should be ignoring performance quoting W

00:16:09,330 --> 00:16:14,130
a wolf more computing sins are committed

00:16:11,760 --> 00:16:17,250
in the name of efficiency without

00:16:14,130 --> 00:16:20,760
necessarily achieving it then for any

00:16:17,250 --> 00:16:27,690
other single reason including blind

00:16:20,760 --> 00:16:30,540
stupidity this is like telling people

00:16:27,690 --> 00:16:34,200
that dull knives cause most kitchen

00:16:30,540 --> 00:16:39,200
knife accidents safer is sharper

00:16:34,200 --> 00:16:42,180
it is so completely counterintuitive

00:16:39,200 --> 00:16:50,130
that even when an expert says it to you

00:16:42,180 --> 00:16:53,400
you go no I would need at least another

00:16:50,130 --> 00:16:57,840
hour to convince the entirety of the

00:16:53,400 --> 00:17:00,150
room that this is true so please take it

00:16:57,840 --> 00:17:03,090
as a cue to discuss it with your peers

00:17:00,150 --> 00:17:08,579
and read up on the topic because it is

00:17:03,090 --> 00:17:11,089
true so all these forces the top five

00:17:08,579 --> 00:17:15,870
are addressed with the correct focus

00:17:11,089 --> 00:17:18,230
like ease of change we think that that

00:17:15,870 --> 00:17:21,930
comes from predicting future needs and

00:17:18,230 --> 00:17:26,550
coding for the form we think it's going

00:17:21,930 --> 00:17:28,199
to need but really what makes code hard

00:17:26,550 --> 00:17:30,750
to change is not that it was initially

00:17:28,199 --> 00:17:34,160
written without the future in mind know

00:17:30,750 --> 00:17:37,700
that slows us down hardly at all

00:17:34,160 --> 00:17:40,410
what makes code hard to change is that

00:17:37,700 --> 00:17:42,600
it's not understandable it takes you a

00:17:40,410 --> 00:17:47,490
long time to understand it to make the

00:17:42,600 --> 00:17:49,950
change so if you will target readability

00:17:47,490 --> 00:17:52,290
you will actually find your code will be

00:17:49,950 --> 00:17:54,810
easier to change in the future than if

00:17:52,290 --> 00:17:59,040
you had targeted flexibility than if you

00:17:54,810 --> 00:18:01,460
had focused on making it easy to change

00:17:59,040 --> 00:18:01,460
in the future

00:18:06,850 --> 00:18:22,369
readability no readability naming is the

00:18:17,690 --> 00:18:25,759
best refactoring for readability and I

00:18:22,369 --> 00:18:29,299
just realized 20 minutes ago that I was

00:18:25,759 --> 00:18:32,679
not mentioning this in any slide so be

00:18:29,299 --> 00:18:36,950
aware that every time you inline code

00:18:32,679 --> 00:18:40,759
like at the top the sort is in lined you

00:18:36,950 --> 00:18:45,980
are losing an opportunity to name the

00:18:40,759 --> 00:18:48,759
data or the action now that needs 20

00:18:45,980 --> 00:18:52,909
slides to be fair to how important it is

00:18:48,759 --> 00:18:54,200
this is much more important than some of

00:18:52,909 --> 00:18:58,070
the other stuff I am going to cover in

00:18:54,200 --> 00:19:04,909
detail I apologize I spend too much time

00:18:58,070 --> 00:19:07,279
on hillbilly joke picking your paradigm

00:19:04,909 --> 00:19:10,669
can improve readability across your

00:19:07,279 --> 00:19:15,009
whole codebase an open-source conference

00:19:10,669 --> 00:19:15,009
a programmer asked me for a code review

00:19:15,730 --> 00:19:20,450
it's not his actual code this is very

00:19:18,230 --> 00:19:21,799
much like it very well-written

00:19:20,450 --> 00:19:25,580
procedural code

00:19:21,799 --> 00:19:27,019
I noticed cluster of subroutines that

00:19:25,580 --> 00:19:31,549
I'll have machine as the first parameter

00:19:27,019 --> 00:19:34,129
and a cluster around register that

00:19:31,549 --> 00:19:34,730
suggests an object solution might be

00:19:34,129 --> 00:19:39,789
better

00:19:34,730 --> 00:19:43,429
I noticed same verb print and print

00:19:39,789 --> 00:19:45,679
reset and reset but with a noun as part

00:19:43,429 --> 00:19:47,809
of the sub name to distinguish between

00:19:45,679 --> 00:19:53,080
printing on machine and printing

00:19:47,809 --> 00:19:57,440
register that cinches it that's textbook

00:19:53,080 --> 00:20:00,080
object-oriented design it fits objects

00:19:57,440 --> 00:20:04,340
he didn't know object-oriented

00:20:00,080 --> 00:20:07,210
programming at all so I mocked up how it

00:20:04,340 --> 00:20:07,210
would look in oo

00:20:14,050 --> 00:20:22,780
let's focus on just the first line and

00:20:17,550 --> 00:20:27,610
it's object version so I got to remove

00:20:22,780 --> 00:20:33,340
machine from the method name and move

00:20:27,610 --> 00:20:35,290
from three parameters to two and yes I

00:20:33,340 --> 00:20:38,740
know that behind the scenes it's really

00:20:35,290 --> 00:20:42,960
three but to any human reading it it's

00:20:38,740 --> 00:20:46,210
to every single subroutine in his system

00:20:42,960 --> 00:20:48,970
was shorter and were readable in method

00:20:46,210 --> 00:20:52,840
form so we refactored just from

00:20:48,970 --> 00:20:54,640
experienced suspicion but then we

00:20:52,840 --> 00:20:56,890
compared the readability of the two and

00:20:54,640 --> 00:21:01,740
he made his decision on whether oh oh

00:20:56,890 --> 00:21:01,740
was worth learning for his project I

00:21:01,890 --> 00:21:07,270
want to convey a sense of how it all

00:21:04,060 --> 00:21:10,420
works together so this example about ten

00:21:07,270 --> 00:21:12,910
minutes my longest one getting the flow

00:21:10,420 --> 00:21:16,270
of it is much more important than the

00:21:12,910 --> 00:21:20,320
individual refactoring so try to feel

00:21:16,270 --> 00:21:26,410
the flow now we are going to be coding

00:21:20,320 --> 00:21:33,940
for the military of B alia nobody small

00:21:26,410 --> 00:21:36,670
country the continent of DC Comics the

00:21:33,940 --> 00:21:40,510
code we're working on almost fits on one

00:21:36,670 --> 00:21:43,540
slide we're calculating which soldier to

00:21:40,510 --> 00:21:46,440
promote and Counting how many medals to

00:21:43,540 --> 00:21:51,460
order and making a list of transfers

00:21:46,440 --> 00:21:54,280
we're iterating over not the soldiers

00:21:51,460 --> 00:22:00,370
themselves but over there Keys their

00:21:54,280 --> 00:22:04,180
indexes so I will be zero one two till

00:22:00,370 --> 00:22:08,620
the end of the array s will be the

00:22:04,180 --> 00:22:13,690
current soldier if that soldier showed

00:22:08,620 --> 00:22:19,690
valor valid valor he gets two medals -

00:22:13,690 --> 00:22:21,870
yes I asked the general she said - if no

00:22:19,690 --> 00:22:24,280
one has been selected for promotion yet

00:22:21,870 --> 00:22:26,730
then this soldier will be the one

00:22:24,280 --> 00:22:26,730
promoted

00:22:27,379 --> 00:22:34,169
that sounds wrong only one person gets

00:22:31,139 --> 00:22:35,539
promoted and of all the soldiers who

00:22:34,169 --> 00:22:38,159
showed valor

00:22:35,539 --> 00:22:41,909
we picked just the first one that

00:22:38,159 --> 00:22:44,360
happened to be in the array that just

00:22:41,909 --> 00:22:44,360
can't be right

00:22:44,899 --> 00:22:49,860
so what do we do this really happened to

00:22:47,639 --> 00:22:53,850
me three weeks ago I mean not military

00:22:49,860 --> 00:22:56,009
but I hit code and went oh this can't

00:22:53,850 --> 00:22:56,990
have been doing this I have to tell

00:22:56,009 --> 00:23:03,450
someone

00:22:56,990 --> 00:23:08,149
hmm I have to be careful who I tell what

00:23:03,450 --> 00:23:08,149
would you do think for 10 seconds

00:23:17,450 --> 00:23:23,930
well we make a note of it somewhere to

00:23:21,290 --> 00:23:28,070
check later investigate later don't

00:23:23,930 --> 00:23:31,310
disrupt our flow we make a bug ticket or

00:23:28,070 --> 00:23:33,980
quit and discussed but what you don't do

00:23:31,310 --> 00:23:37,130
is try to fix something while you're

00:23:33,980 --> 00:23:39,470
refactoring even if you spot an obvious

00:23:37,130 --> 00:23:42,320
mistake you do not try to fix while

00:23:39,470 --> 00:23:47,300
refactoring all of our changes should be

00:23:42,320 --> 00:23:48,800
neutral changes okay

00:23:47,300 --> 00:23:52,190
moving to the final block had to spill

00:23:48,800 --> 00:23:56,000
to the next slide if the soldier wants a

00:23:52,190 --> 00:23:58,400
change of station then add the index of

00:23:56,000 --> 00:24:01,640
the soldier to the list of transfers I

00:23:58,400 --> 00:24:05,000
don't know why they want the index

00:24:01,640 --> 00:24:09,170
instead the soldier itself I've not read

00:24:05,000 --> 00:24:15,560
that far ahead in the code so until we

00:24:09,170 --> 00:24:17,660
know we must keep identical behavior so

00:24:15,560 --> 00:24:22,040
the very first thing I will change this

00:24:17,660 --> 00:24:27,860
if from a block to postfix form and on

00:24:22,040 --> 00:24:31,340
the first slide that inner if block also

00:24:27,860 --> 00:24:36,310
gets post fixed and that is clearly

00:24:31,340 --> 00:24:36,310
better because it now fits on one slide

00:24:38,350 --> 00:24:44,680
the push transfers at the bottom has

00:24:41,330 --> 00:24:48,050
nothing to do with the rest

00:24:44,680 --> 00:24:51,560
they're just together for efficiency so

00:24:48,050 --> 00:24:52,760
we don't have to loop twice efficiency

00:24:51,560 --> 00:24:56,150
that sounds like performance we're gonna

00:24:52,760 --> 00:25:00,080
ignore that let's split the loop and see

00:24:56,150 --> 00:25:03,370
if that leads us anywhere and yes split

00:25:00,080 --> 00:25:07,670
loop is in the refactoring book

00:25:03,370 --> 00:25:11,930
so I've duplicated the for block and the

00:25:07,670 --> 00:25:13,780
line defining dollar s we handle metals

00:25:11,930 --> 00:25:17,920
and promote in the first loop and

00:25:13,780 --> 00:25:20,630
transfers in the second transfers

00:25:17,920 --> 00:25:22,160
doesn't have to be defined all the way

00:25:20,630 --> 00:25:24,770
up there it's not needed till the 2nd

00:25:22,160 --> 00:25:34,400
loops of best-practices tells us to move

00:25:24,770 --> 00:25:37,130
it let's focus on that second loop s is

00:25:34,400 --> 00:25:42,850
only used once let's see how it looks

00:25:37,130 --> 00:25:48,020
without it well that's not more readable

00:25:42,850 --> 00:25:50,750
but when I close up the space I can see

00:25:48,020 --> 00:25:54,320
a loop with nothing in it but a

00:25:50,750 --> 00:25:56,360
conditional push a loop with nothing but

00:25:54,320 --> 00:26:01,630
a conditional push there's a word for

00:25:56,360 --> 00:26:04,610
that grep so let's get it closer to grep

00:26:01,630 --> 00:26:10,250
by using the default topic instead of

00:26:04,610 --> 00:26:13,970
dollar I now again by itself that's a

00:26:10,250 --> 00:26:16,550
change towards less readability but now

00:26:13,970 --> 00:26:19,510
we've got the reins in our teeth and we

00:26:16,550 --> 00:26:19,510
are headed for grip

00:26:19,540 --> 00:26:28,940
we'll need room though

00:26:23,200 --> 00:26:30,650
now grep looks like this and I'm not

00:26:28,940 --> 00:26:33,950
ready for the target to effect anything

00:26:30,650 --> 00:26:36,890
yet so the target will be temporary

00:26:33,950 --> 00:26:39,320
variable the source is from the for line

00:26:36,890 --> 00:26:40,820
I ran out of my a highlighting marker

00:26:39,320 --> 00:26:44,390
for a little while

00:26:40,820 --> 00:26:46,490
keys of soldiers I see I'll need room

00:26:44,390 --> 00:26:48,940
for that big condition that's about to

00:26:46,490 --> 00:26:51,710
come so I'll wrap to the next line

00:26:48,940 --> 00:26:59,290
the condition is from up in that post

00:26:51,710 --> 00:27:02,900
fix for that excuse me postfix if done

00:26:59,290 --> 00:27:04,180
except that we populated temp and never

00:27:02,900 --> 00:27:09,430
use it for anything

00:27:04,180 --> 00:27:13,190
well good as that at this point well

00:27:09,430 --> 00:27:16,780
temp and transfers should always have

00:27:13,190 --> 00:27:23,180
identical contents at this point right

00:27:16,780 --> 00:27:25,430
somebody nod their head thank you so if

00:27:23,180 --> 00:27:29,240
my test suite needs a little help

00:27:25,430 --> 00:27:35,360
I can assert here that they're equal and

00:27:29,240 --> 00:27:38,990
run the tests or I can run this code

00:27:35,360 --> 00:27:41,660
somewhere close to production and log

00:27:38,990 --> 00:27:45,770
the details of any disagreement until

00:27:41,660 --> 00:27:49,400
we're confident in our translation the

00:27:45,770 --> 00:27:58,250
large microservice Web Apps use this

00:27:49,400 --> 00:28:02,770
strategy all the time then out with the

00:27:58,250 --> 00:28:02,770
old and in with the new

00:28:09,100 --> 00:28:15,940
meanwhile back in that first loop I

00:28:13,530 --> 00:28:18,940
notice that we don't use dollar I here

00:28:15,940 --> 00:28:23,440
anymore we can directly iterate over the

00:28:18,940 --> 00:28:26,380
soldiers now we can split the loop again

00:28:23,440 --> 00:28:27,910
we'll go faster this time for the next

00:28:26,380 --> 00:28:30,550
trick we'll need some high speed helpers

00:28:27,910 --> 00:28:33,940
that come installed with Pearl some and

00:28:30,550 --> 00:28:35,470
first from list you till like the grep

00:28:33,940 --> 00:28:38,980
earlier we're going to change the

00:28:35,470 --> 00:28:41,650
default topic change to the default

00:28:38,980 --> 00:28:44,410
topic and there are several ways that I

00:28:41,650 --> 00:28:47,350
could recode the medals calculation as a

00:28:44,410 --> 00:28:52,540
pipeline the first that comes to mind is

00:28:47,350 --> 00:28:54,550
a map of two if you have Balor and zero

00:28:52,540 --> 00:29:02,350
if you don't and just take the sum of

00:28:54,550 --> 00:29:07,260
that stream of numbers promote is a

00:29:02,350 --> 00:29:07,260
simple first on Balor

00:29:07,560 --> 00:29:16,020
remove all the extra space and a line

00:29:13,020 --> 00:29:16,020
voila

00:29:18,429 --> 00:29:24,010
now comes the most important step the

00:29:22,059 --> 00:29:29,100
one that's too often forgotten after

00:29:24,010 --> 00:29:35,200
doing all that work we must compare it

00:29:29,100 --> 00:29:38,470
to the original and decide is it really

00:29:35,200 --> 00:29:42,730
better is it better enough to warrant

00:29:38,470 --> 00:29:46,240
change it is to me but I use map and

00:29:42,730 --> 00:29:51,250
grab in first all the time this form is

00:29:46,240 --> 00:29:53,919
much more readable to me if you hate the

00:29:51,250 --> 00:29:55,980
pipeline's fine just embrace this

00:29:53,919 --> 00:29:55,980
process

00:30:03,720 --> 00:30:09,740
let's catch our breath that was dense

00:30:07,340 --> 00:30:12,660
we'll end with something simpler

00:30:09,740 --> 00:30:24,020
light-hearted even maybe even not the

00:30:12,660 --> 00:30:27,270
end so code fights there was a problem

00:30:24,020 --> 00:30:30,600
factorial which is where you multiply

00:30:27,270 --> 00:30:33,120
all the numbers from 1 to something all

00:30:30,600 --> 00:30:35,730
together and say what they all multiply

00:30:33,120 --> 00:30:39,690
together to be and the problem defined

00:30:35,730 --> 00:30:43,340
as was that the problem was defined as

00:30:39,690 --> 00:30:45,960
we won't ask you to count more than 15

00:30:43,340 --> 00:30:49,590
so that's the highest in that could get

00:30:45,960 --> 00:30:53,220
past the N 2 factorial and it was a golf

00:30:49,590 --> 00:30:55,170
challenge so you got graded on how few

00:30:53,220 --> 00:30:59,670
characters you could express your answer

00:30:55,170 --> 00:31:01,520
in now I no longer like code golf I used

00:30:59,670 --> 00:31:05,720
to be good at it I don't like it

00:31:01,520 --> 00:31:10,770
it fights with my readability reflexes I

00:31:05,720 --> 00:31:12,750
like to look at the largest solution to

00:31:10,770 --> 00:31:15,930
see the approaches of new programmers or

00:31:12,750 --> 00:31:20,340
to see the work of other people that

00:31:15,930 --> 00:31:23,570
hate code golf the largest on this one

00:31:20,340 --> 00:31:23,570
happened to be in Python

00:31:34,630 --> 00:31:44,480
my wife doesn't code and she laughed at

00:31:37,700 --> 00:31:47,660
this too but how would you do it if you

00:31:44,480 --> 00:31:56,360
didn't know about recursion or arrays or

00:31:47,660 --> 00:31:59,799
lists or loops or go to this isn't from

00:31:56,360 --> 00:32:03,470
a bad coder it's someone new to coding

00:31:59,799 --> 00:32:05,179
and by the way that's not the actual

00:32:03,470 --> 00:32:08,260
code and it wasn't actually factorial

00:32:05,179 --> 00:32:10,429
because I would not do that to somebody

00:32:08,260 --> 00:32:18,760
so how could we improve the readability

00:32:10,429 --> 00:32:20,960
of that the crowd says do it in Perl I

00:32:18,760 --> 00:32:26,090
could write this in Perl it would look

00:32:20,960 --> 00:32:30,830
just as bad so I would tell them to line

00:32:26,090 --> 00:32:35,299
it up if your coding standards do not

00:32:30,830 --> 00:32:38,660
allow you to take a form that is more

00:32:35,299 --> 00:32:43,370
readable you should think about that

00:32:38,660 --> 00:32:48,890
coding standard make the engineering

00:32:43,370 --> 00:32:50,480
trade-off give it some thought I point

00:32:48,890 --> 00:32:53,740
out that his variables are only used

00:32:50,480 --> 00:32:53,740
once and could be inlined

00:32:53,860 --> 00:33:01,970
and I give him a simple lesson in Python

00:32:58,370 --> 00:33:06,650
lists which is the same thing as Perl

00:33:01,970 --> 00:33:14,059
arrays notice that in the last two steps

00:33:06,650 --> 00:33:15,530
I was targeting readability but I got

00:33:14,059 --> 00:33:21,980
better performance as part of the change

00:33:15,530 --> 00:33:24,140
I was never thinking of performance now

00:33:21,980 --> 00:33:25,490
to go to this form which is the way most

00:33:24,140 --> 00:33:29,299
programmers would express it if they're

00:33:25,490 --> 00:33:31,760
not in class requiring recursion for

00:33:29,299 --> 00:33:37,160
this you need to add in concepts of

00:33:31,760 --> 00:33:41,020
loops loop variables ranges identity

00:33:37,160 --> 00:33:41,020
value and accumulation

00:33:41,070 --> 00:33:48,550
these are notions that programmer did

00:33:43,390 --> 00:33:50,980
not have my brain is under the influence

00:33:48,550 --> 00:33:55,380
of pearl sixes auto caching lazy

00:33:50,980 --> 00:34:00,550
infinite lists so my Python version

00:33:55,380 --> 00:34:03,850
looks like that which is incredibly

00:34:00,550 --> 00:34:07,050
performant but less readable

00:34:03,850 --> 00:34:11,800
so I would actually change it back to

00:34:07,050 --> 00:34:17,920
that no I wouldn't

00:34:11,800 --> 00:34:19,720
there's a word for that since Python 2.6

00:34:17,920 --> 00:34:25,150
it's in the standard math library just

00:34:19,720 --> 00:34:29,460
import it so I just said you need the

00:34:25,150 --> 00:34:37,320
basics to get here from where he started

00:34:29,460 --> 00:34:37,320
it's really 5o till QA ok scared me

00:34:38,400 --> 00:34:43,570
you need the basics to get from where he

00:34:40,840 --> 00:34:45,340
was to here loops loop VARs ranges

00:34:43,570 --> 00:34:48,040
identity value accumulation I bet you're

00:34:45,340 --> 00:34:49,450
all very skilled in thinking in those

00:34:48,040 --> 00:34:51,790
terms you don't even think about

00:34:49,450 --> 00:34:55,000
thinking in those terms it's basic

00:34:51,790 --> 00:34:58,540
programming but if you are not skilled

00:34:55,000 --> 00:35:01,930
with functional thinking and object

00:34:58,540 --> 00:35:05,590
thinking then you have a cognitive blind

00:35:01,930 --> 00:35:08,530
spot while you are coding that makes as

00:35:05,590 --> 00:35:12,180
big a difference in your code as from

00:35:08,530 --> 00:35:12,180
here to here

00:35:14,410 --> 00:35:20,610
these final points I could not fit in

00:35:17,590 --> 00:35:24,940
anywhere but I really need to say them

00:35:20,610 --> 00:35:28,020
four first great books aren't born from

00:35:24,940 --> 00:35:33,220
great writing they come from great

00:35:28,020 --> 00:35:36,940
rewriting and lots of it - there are

00:35:33,220 --> 00:35:38,860
coding hats and editing hats and like

00:35:36,940 --> 00:35:40,990
the modes we talked about earlier you

00:35:38,860 --> 00:35:43,510
would do well to be deliberate about

00:35:40,990 --> 00:35:50,470
which hat you're wearing in a particular

00:35:43,510 --> 00:35:53,760
moment of coding 3 in my era in my

00:35:50,470 --> 00:35:58,560
training error I should say my schooling

00:35:53,760 --> 00:35:59,800
there was no concept of a readable code

00:35:58,560 --> 00:36:03,010
first

00:35:59,800 --> 00:36:06,250
you made your code work then you made it

00:36:03,010 --> 00:36:08,590
faster and smaller and then because it

00:36:06,250 --> 00:36:11,590
would always be unreadable after you

00:36:08,590 --> 00:36:15,120
made it faster and smaller you had to

00:36:11,590 --> 00:36:19,060
thoroughly document it in English

00:36:15,120 --> 00:36:23,230
all modern documentation practices were

00:36:19,060 --> 00:36:25,990
born from that era that impulse of it's

00:36:23,230 --> 00:36:32,320
gonna be awful you have to write it in

00:36:25,990 --> 00:36:34,930
English again most are still stuck in

00:36:32,320 --> 00:36:37,390
that wrong direction when you study

00:36:34,930 --> 00:36:39,580
readability more deeply than we've had

00:36:37,390 --> 00:36:42,150
time to hear you'll find that you're

00:36:39,580 --> 00:36:45,220
writing less documentation in English

00:36:42,150 --> 00:36:47,770
but the sum total of your code and that

00:36:45,220 --> 00:36:54,910
documentation is much more

00:36:47,770 --> 00:36:58,000
understandable for your next steps in

00:36:54,910 --> 00:37:01,090
refactoring should not be to go read all

00:36:58,000 --> 00:37:06,700
the books on refactoring or even to

00:37:01,090 --> 00:37:09,400
study this talk instead practice daily

00:37:06,700 --> 00:37:13,690
at seeing what the code looks like like

00:37:09,400 --> 00:37:16,410
this versus like that get fluid at the

00:37:13,690 --> 00:37:21,430
process get it get it in your fingers

00:37:16,410 --> 00:37:25,950
and then start learning specific

00:37:21,430 --> 00:37:25,950
refactorings and add them to the mix

00:37:28,180 --> 00:37:31,930
what questions do you have

00:37:44,240 --> 00:37:47,890
question if you are

00:38:08,430 --> 00:38:29,320
and so the question is yeah the question

00:38:26,290 --> 00:38:32,350
is knowing that we don't just do it in

00:38:29,320 --> 00:38:37,290
the refactor what do you do if you're in

00:38:32,350 --> 00:38:40,750
a big refactor and you find a tiny bug

00:38:37,290 --> 00:38:42,490
that you could just fix do you write the

00:38:40,750 --> 00:38:45,310
fix and stash it do you make a note

00:38:42,490 --> 00:38:46,660
somewhere do you and my answer is it

00:38:45,310 --> 00:38:50,410
really depends on your personal

00:38:46,660 --> 00:38:53,770
development process if you are really

00:38:50,410 --> 00:38:55,630
good with git and it's going to end up

00:38:53,770 --> 00:38:57,970
being the same in your commit logs then

00:38:55,630 --> 00:39:00,190
I guess it's okay to write it stash it

00:38:57,970 --> 00:39:02,380
you know that that kind of thing myself

00:39:00,190 --> 00:39:07,810
I'm not quite that confident and I make

00:39:02,380 --> 00:39:10,240
notes but as you say you never fix it

00:39:07,810 --> 00:39:13,450
you want that distinction in your commit

00:39:10,240 --> 00:39:19,810
logs and in your brain absolutely yes

00:39:13,450 --> 00:39:22,570
sir yes he says he adds to that gap git

00:39:19,810 --> 00:39:25,780
commit dash P is your friend that's what

00:39:22,570 --> 00:39:28,210
lets you see the pieces of what you're

00:39:25,780 --> 00:39:33,370
submitting of what you're committing and

00:39:28,210 --> 00:39:35,140
and select them selectively but with the

00:39:33,370 --> 00:39:37,390
the size that was implied by his

00:39:35,140 --> 00:39:39,280
question I'm I wouldn't be confident

00:39:37,390 --> 00:39:40,450
when I started it that he was going to

00:39:39,280 --> 00:39:43,570
be discrete well I guess you could

00:39:40,450 --> 00:39:46,020
always split them I again I need to do

00:39:43,570 --> 00:39:46,020
more get

00:39:47,299 --> 00:39:55,640
and he reminds me of get ad - P what

00:39:53,489 --> 00:39:55,640
else

00:39:58,630 --> 00:40:01,380
yes sir

00:40:12,040 --> 00:40:23,650
what is the most I've ever shrunk a code

00:40:15,550 --> 00:40:26,890
base by refactoring well I can't answer

00:40:23,650 --> 00:40:29,890
that in in this instant I will say that

00:40:26,890 --> 00:40:32,170
most the the most severe refactor

00:40:29,890 --> 00:40:35,140
refraction reductions I've ever seen is

00:40:32,170 --> 00:40:37,030
where I see stuff that has been there's

00:40:35,140 --> 00:40:40,000
a word for that like a complete

00:40:37,030 --> 00:40:42,760
recursive search down the disk and you

00:40:40,000 --> 00:40:46,480
just put in file find or you're doing a

00:40:42,760 --> 00:40:51,970
ton of regular expression stuff to parse

00:40:46,480 --> 00:40:57,700
HTML and you put in HTML tree what is it

00:40:51,970 --> 00:41:01,750
tree builder I do have a story for not

00:40:57,700 --> 00:41:05,230
on-camera about Atlanta programmer who

00:41:01,750 --> 00:41:09,160
took a report from four hours to under a

00:41:05,230 --> 00:41:13,410
minute last month during using nothing

00:41:09,160 --> 00:41:15,840
but refactoring and it was all in bash

00:41:13,410 --> 00:41:19,770
it's amazing

00:41:15,840 --> 00:41:21,670
anyway I hope that partially answers it

00:41:19,770 --> 00:41:25,770
maybe I'll have a better answer for you

00:41:21,670 --> 00:41:25,770
later in the conference yes sir

00:41:29,730 --> 00:41:36,090
about changes in the object hierarchy

00:41:32,300 --> 00:41:38,820
system somewhere design W changes did

00:41:36,090 --> 00:41:40,530
you say a little bit on refactoring as

00:41:38,820 --> 00:41:43,150
you've been describing here with respect

00:41:40,530 --> 00:41:47,170
to design changes as opposed to

00:41:43,150 --> 00:41:49,029
okay the the question is I skipped all

00:41:47,170 --> 00:41:52,109
the stuff that's at a slightly higher

00:41:49,029 --> 00:41:57,990
level and standards I was talking about

00:41:52,109 --> 00:42:00,849
like vocabulary and then idiom and then

00:41:57,990 --> 00:42:04,240
patterns so that's more in the pattern

00:42:00,849 --> 00:42:07,420
realm you could certainly do refactoring

00:42:04,240 --> 00:42:09,819
to bigger concepts and bigger conceptual

00:42:07,420 --> 00:42:14,019
constructions whew that's terrible

00:42:09,819 --> 00:42:16,480
and I don't cover it the reason I don't

00:42:14,019 --> 00:42:19,180
cover it is the book's cover it and the

00:42:16,480 --> 00:42:23,289
books put too much emphasis from my

00:42:19,180 --> 00:42:24,940
taste on it there is a ton of focus

00:42:23,289 --> 00:42:26,170
there's even a book there's like you

00:42:24,940 --> 00:42:28,140
know the refactorings book and there's a

00:42:26,170 --> 00:42:30,999
refactorings to patterns book and

00:42:28,140 --> 00:42:35,619
because I don't work primarily you know

00:42:30,999 --> 00:42:37,539
oh I'm a very multi-paradigm I start and

00:42:35,619 --> 00:42:38,950
procedural and I start Haute hoisting to

00:42:37,539 --> 00:42:40,839
objects where I see it's appropriate and

00:42:38,950 --> 00:42:43,180
I start shifting things to functions

00:42:40,839 --> 00:42:45,519
where I find it's appropriate to have

00:42:43,180 --> 00:42:49,569
such an intense focus on the object

00:42:45,519 --> 00:42:51,730
forms was off-putting to me and made me

00:42:49,569 --> 00:42:54,249
think that I mean it's part of what led

00:42:51,730 --> 00:42:56,319
to this talk because the people that are

00:42:54,249 --> 00:43:00,759
working in and primarily a procedural

00:42:56,319 --> 00:43:02,140
world need more information so I'm sorry

00:43:00,759 --> 00:43:03,759
that you know but I

00:43:02,140 --> 00:43:06,819
that's a pointer to the right place

00:43:03,759 --> 00:43:10,150
because the the the original book that

00:43:06,819 --> 00:43:12,099
was in Java has November it came out

00:43:10,150 --> 00:43:15,690
again the second edition is all in

00:43:12,099 --> 00:43:19,630
JavaScript and that it's not nearly as

00:43:15,690 --> 00:43:23,410
you know far to row and maybe one day

00:43:19,630 --> 00:43:24,869
we'll have one in Perl sorry I saw a

00:43:23,410 --> 00:43:28,089
question over here

00:43:24,869 --> 00:43:30,779
was it you it was you

00:43:28,089 --> 00:43:30,779
go ahead

00:43:35,930 --> 00:43:38,829
mm-hmm

00:43:41,710 --> 00:43:48,760
aha so how do you address the fact that

00:43:46,570 --> 00:43:50,200
you have a diverse audience and not

00:43:48,760 --> 00:43:52,390
everybody has the same reading level

00:43:50,200 --> 00:43:54,970
some of the same vocabulary the same

00:43:52,390 --> 00:43:57,130
comfort level with every code construct

00:43:54,970 --> 00:44:04,240
I had to leave out a huge chunk that I

00:43:57,130 --> 00:44:06,070
wanted to do on this dilemma that and I

00:44:04,240 --> 00:44:08,140
just it's certainly true it's easily

00:44:06,070 --> 00:44:13,359
expressed across teams I express it a

00:44:08,140 --> 00:44:16,000
future when you're writing like English

00:44:13,359 --> 00:44:19,950
the key thing is who's your audience you

00:44:16,000 --> 00:44:22,390
know everybody will say oh that's common

00:44:19,950 --> 00:44:28,930
well who's your audience when you're

00:44:22,390 --> 00:44:30,910
coding your maintenance programmer and

00:44:28,930 --> 00:44:32,400
ignoring for a moment the 80% of the

00:44:30,910 --> 00:44:35,830
time you are the maintenance programmer

00:44:32,400 --> 00:44:37,869
but remembering that there's an old

00:44:35,830 --> 00:44:39,520
adage of always code as if your

00:44:37,869 --> 00:44:40,960
maintenance programmer is a violent

00:44:39,520 --> 00:44:43,780
psychopath who knows your home address

00:44:40,960 --> 00:44:45,670
so with that in mind the original

00:44:43,780 --> 00:44:50,170
subtitle of this talk was coding for ax

00:44:45,670 --> 00:44:54,190
murderers so with all that said I

00:44:50,170 --> 00:44:56,170
arrived at this and I actually cut it

00:44:54,190 --> 00:44:58,390
because I'm not sure yet but this this

00:44:56,170 --> 00:45:04,450
is my insight that I'm hoping people can

00:44:58,390 --> 00:45:09,190
help me bear out your coding standards

00:45:04,450 --> 00:45:14,920
are your opportunity to describe your

00:45:09,190 --> 00:45:18,970
maintenance programmer if you decide as

00:45:14,920 --> 00:45:24,099
a group as a team as a company that we

00:45:18,970 --> 00:45:26,410
don't do map and grep here because we

00:45:24,099 --> 00:45:28,900
can't rely on hiring people in we're a

00:45:26,410 --> 00:45:30,010
college or whatever that that can

00:45:28,900 --> 00:45:33,339
understand that level of sophistication

00:45:30,010 --> 00:45:35,290
you put that in the standard and you

00:45:33,339 --> 00:45:37,900
don't have it in your code and if on the

00:45:35,290 --> 00:45:40,089
other hand that's something that you

00:45:37,900 --> 00:45:41,920
want your people to be using or you want

00:45:40,089 --> 00:45:43,540
to be using if you're a one-man shop but

00:45:41,920 --> 00:45:46,960
you need to pay attention to the

00:45:43,540 --> 00:45:48,700
maintenance programmer aspect then you

00:45:46,960 --> 00:45:52,060
put that in your coding standard this is

00:45:48,700 --> 00:45:54,190
okay it's not just about how many spaces

00:45:52,060 --> 00:45:54,750
are we gonna put in them better we use

00:45:54,190 --> 00:45:58,770
tab

00:45:54,750 --> 00:46:00,630
it's opportunity for information that

00:45:58,770 --> 00:46:03,030
can be used during the hiring process to

00:46:00,630 --> 00:46:05,310
say this person does or doesn't have a

00:46:03,030 --> 00:46:07,920
comfort level with the code base they're

00:46:05,310 --> 00:46:12,150
about to tackle so I hope that

00:46:07,920 --> 00:46:14,970
completely injected new idea into your

00:46:12,150 --> 00:46:26,090
head and maybe it's applicable to your

00:46:14,970 --> 00:46:28,290
case what else Randall our our author of

00:46:26,090 --> 00:46:31,080
many pearl books

00:46:28,290 --> 00:46:33,240
Randall Schwartz is reminding me that if

00:46:31,080 --> 00:46:37,680
you don't know map and grep he can

00:46:33,240 --> 00:46:39,560
recommend some good books or just buy

00:46:37,680 --> 00:46:45,110
him some drinks he'll tell you you'll

00:46:39,560 --> 00:46:45,110
instruct you person-to-person yes sir

00:46:58,850 --> 00:47:05,100
okay the question is if you work for the

00:47:02,850 --> 00:47:09,530
one or two companies in the whole world

00:47:05,100 --> 00:47:09,530
that don't have complete test coverage

00:47:09,950 --> 00:47:17,040
what's my recommendation and that's a

00:47:15,180 --> 00:47:18,540
really really good question the first

00:47:17,040 --> 00:47:20,460
time I gave this even though it was

00:47:18,540 --> 00:47:22,680
completely unco hearing the coherent

00:47:20,460 --> 00:47:24,510
question that came out is testing so

00:47:22,680 --> 00:47:27,570
important I'm not doing it how do I do

00:47:24,510 --> 00:47:29,190
it and I really wanted to put in slides

00:47:27,570 --> 00:47:32,370
to skip over but you could refer back to

00:47:29,190 --> 00:47:34,380
you of like this is how to you this is

00:47:32,370 --> 00:47:36,480
like the quickest way to get in but I

00:47:34,380 --> 00:47:37,770
haven't had time to do that and every

00:47:36,480 --> 00:47:41,180
time I say I'll add them to the slides

00:47:37,770 --> 00:47:45,870
later I haven't so let me say on camera

00:47:41,180 --> 00:47:49,680
there is a book Perl testing chromatic

00:47:45,870 --> 00:47:52,920
and Ian Stewart maybe that is still

00:47:49,680 --> 00:47:55,800
available and it's it's you know small

00:47:52,920 --> 00:47:57,660
but it covers the basics and so that's

00:47:55,800 --> 00:48:00,920
it technically it'll give you what you

00:47:57,660 --> 00:48:04,500
need technically as far as getting it

00:48:00,920 --> 00:48:06,610
into your company we have had some

00:48:04,500 --> 00:48:10,740
stories about

00:48:06,610 --> 00:48:13,030
being sneaky the the general strategy is

00:48:10,740 --> 00:48:15,850
don't tell anybody you're doing it just

00:48:13,030 --> 00:48:19,420
right write a test for yourself and

00:48:15,850 --> 00:48:21,370
it'll help so that's the start one just

00:48:19,420 --> 00:48:23,500
one on something you're working on then

00:48:21,370 --> 00:48:25,120
you add some and you still don't tell

00:48:23,500 --> 00:48:27,490
people and then after you're adding

00:48:25,120 --> 00:48:32,070
enough that it has started to catch your

00:48:27,490 --> 00:48:34,600
bugs you still don't tell anybody but

00:48:32,070 --> 00:48:37,360
you commit it and make it part of the

00:48:34,600 --> 00:48:41,320
codebase and you start running it on

00:48:37,360 --> 00:48:44,920
other developers commits and then when

00:48:41,320 --> 00:48:46,810
you tell them when you report the bug to

00:48:44,920 --> 00:48:50,020
them in the commits that they just made

00:48:46,810 --> 00:48:51,520
maybe even do continual testing you know

00:48:50,020 --> 00:48:52,840
have something email you

00:48:51,520 --> 00:48:54,640
somebody did a committed didn't pass

00:48:52,840 --> 00:48:57,220
your test you bring it to them and say

00:48:54,640 --> 00:48:59,500
oh by the way the test suite that I'm

00:48:57,220 --> 00:49:03,270
using myself did this and either they

00:48:59,500 --> 00:49:07,390
will say well let me use that or

00:49:03,270 --> 00:49:11,470
sometime later they will want to run it

00:49:07,390 --> 00:49:14,290
themselves and that's as far as I've

00:49:11,470 --> 00:49:16,780
gotten with the stories and and the

00:49:14,290 --> 00:49:21,300
mentality of it but at the end it's a

00:49:16,780 --> 00:49:23,410
big win everybody will accept it when

00:49:21,300 --> 00:49:26,200
especially when it's optional for them

00:49:23,410 --> 00:49:28,440
and then when it's it's fixing a lot of

00:49:26,200 --> 00:49:33,910
bugs and catching a lot of errors then

00:49:28,440 --> 00:49:36,220
you can make it mandatory anything else

00:49:33,910 --> 00:49:42,750
I just got the signal we'll have to wait

00:49:36,220 --> 00:49:42,750

YouTube URL: https://www.youtube.com/watch?v=gxZg73nMoTc


