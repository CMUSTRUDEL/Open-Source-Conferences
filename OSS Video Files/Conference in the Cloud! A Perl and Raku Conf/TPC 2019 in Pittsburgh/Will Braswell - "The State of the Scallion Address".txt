Title: Will Braswell - "The State of the Scallion Address"
Publication date: 2019-06-20
Playlist: TPC 2019 in Pittsburgh
Description: 
	The RPerl Pumpking gives an overview of the past year, including:
- New RPerl Compiler Features
- New CloudForFree.org Platform
- New RPerl Applications
- New Community Events & Activities
- New Education Materials
- New Crowdfunding Campaigns
- Live Demo of RPerl v5.0; July 4th, 2019 Release Date
Come on and party like it's 1997!
Captions: 
	00:00:00,030 --> 00:00:08,880
good morning everyone thank you for

00:00:05,520 --> 00:00:12,450
being awake and alive on the final day

00:00:08,880 --> 00:00:18,289
of the Perl conference in Pittsburgh

00:00:12,450 --> 00:00:18,289
2019 let me just get a sip of water here

00:00:20,150 --> 00:00:27,630
good wholesome healthy water well as I

00:00:25,230 --> 00:00:30,359
said good morning my name is will the

00:00:27,630 --> 00:00:33,180
chill some of you may know me by my

00:00:30,359 --> 00:00:37,620
legal name will Braswell and we are here

00:00:33,180 --> 00:00:41,190
to give and receive the state of the

00:00:37,620 --> 00:00:44,129
scallion address which will be a review

00:00:41,190 --> 00:00:47,100
of the Perl compiler over the last year

00:00:44,129 --> 00:00:52,920
and also a preview of things that are

00:00:47,100 --> 00:00:57,120
coming so yeah we got just the taste of

00:00:52,920 --> 00:00:57,780
the scallion and a quick ride on the

00:00:57,120 --> 00:00:59,969
roadrunner

00:00:57,780 --> 00:01:05,309
I guess according to this graphic at

00:00:59,969 --> 00:01:08,189
least so I guess with with Julia and

00:01:05,309 --> 00:01:11,400
slim here as our guides or at least

00:01:08,189 --> 00:01:13,770
introductory guys we'll get started what

00:01:11,400 --> 00:01:15,360
in the heck is our Perl probably most of

00:01:13,770 --> 00:01:18,390
you already know but we have to just

00:01:15,360 --> 00:01:20,400
give an overview because this is the

00:01:18,390 --> 00:01:22,409
state of the scallion address and if

00:01:20,400 --> 00:01:24,840
this is the first time that any of y'all

00:01:22,409 --> 00:01:28,490
have been to the Perl conference or or

00:01:24,840 --> 00:01:31,350
met me or seen a talk about our Perl

00:01:28,490 --> 00:01:33,869
then you may not know what there is to

00:01:31,350 --> 00:01:37,619
know at least the highlights about the

00:01:33,869 --> 00:01:43,070
compiler the Perl compiler so I wrote

00:01:37,619 --> 00:01:46,950
the compiler started back about

00:01:43,070 --> 00:01:48,659
2012-2013 time the the planning started

00:01:46,950 --> 00:01:52,439
in the summer of 2012 and then on

00:01:48,659 --> 00:01:57,030
January 1st of 2013 is when I started

00:01:52,439 --> 00:02:00,630
writing code and that was a because our

00:01:57,030 --> 00:02:03,119
Perl like many things in Perl was at one

00:02:00,630 --> 00:02:05,280
point in New Year's resolution and then

00:02:03,119 --> 00:02:06,810
maybe at some point will be a Christmas

00:02:05,280 --> 00:02:09,660
present we have actually released

00:02:06,810 --> 00:02:12,209
several versions on Christmas and we'll

00:02:09,660 --> 00:02:13,459
talk more about the our Pro release

00:02:12,209 --> 00:02:17,310
cycle

00:02:13,459 --> 00:02:20,610
further into the presentation our pearl

00:02:17,310 --> 00:02:24,450
is the pro/5 compiler it's an optimizing

00:02:20,610 --> 00:02:29,549
compiler y'all may also be familiar with

00:02:24,450 --> 00:02:32,250
the BC software system which is could be

00:02:29,549 --> 00:02:35,519
called a compiler it's it's it dumps the

00:02:32,250 --> 00:02:38,610
Perl op tree but there's it's not an

00:02:35,519 --> 00:02:45,000
optimizing system and it's not actually

00:02:38,610 --> 00:02:46,950
compiling from Perl operations into C

00:02:45,000 --> 00:02:50,180
operations it's still using the Perl

00:02:46,950 --> 00:02:53,819
operations and the Perl data types so

00:02:50,180 --> 00:02:55,859
the BC compiler runs at the same speed

00:02:53,819 --> 00:03:00,299
as normal pearl it just gives you a bit

00:02:55,859 --> 00:03:02,910
of IP protection and startup speed but

00:03:00,299 --> 00:03:07,079
are but regular Perl already starts up

00:03:02,910 --> 00:03:10,849
pretty fast anyway and for me runtime

00:03:07,079 --> 00:03:15,000
performance is what is most important so

00:03:10,849 --> 00:03:16,739
our Perl is a static compiler for a

00:03:15,000 --> 00:03:23,269
dynamic language which is very tricky

00:03:16,739 --> 00:03:27,329
and sort of new thing and essentially we

00:03:23,269 --> 00:03:30,959
we parse Perl with our own our perl

00:03:27,329 --> 00:03:33,510
parser we generate an abstract syntax

00:03:30,959 --> 00:03:37,709
tree and from that if possible we

00:03:33,510 --> 00:03:40,859
generate C++ 14 code and that's one of

00:03:37,709 --> 00:03:45,180
the recent ISO standards for C++ that

00:03:40,859 --> 00:03:47,700
gives you things like smart pointers for

00:03:45,180 --> 00:03:50,870
garbage collection and also C++ 11

00:03:47,700 --> 00:03:54,870
before that giving you things like

00:03:50,870 --> 00:03:58,889
unordered map for hashes and perl and so

00:03:54,870 --> 00:04:01,859
forth so the newer versions of C++ are

00:03:58,889 --> 00:04:04,169
in many ways what allow us to do these

00:04:01,859 --> 00:04:06,840
things if we were using an older version

00:04:04,169 --> 00:04:13,139
it would be a lot more work and perhaps

00:04:06,840 --> 00:04:15,989
prohibitively difficult the our Perl

00:04:13,139 --> 00:04:17,970
development team which is myself and a

00:04:15,989 --> 00:04:19,889
number of others and the Austin Pro

00:04:17,970 --> 00:04:22,860
mongers and some people online and some

00:04:19,889 --> 00:04:25,349
of y'all here we're headquartered out of

00:04:22,860 --> 00:04:27,030
Austin and as I had mentioned the Austin

00:04:25,349 --> 00:04:30,479
pro mongers is the

00:04:27,030 --> 00:04:33,740
sponsoring organization for the our Perl

00:04:30,479 --> 00:04:36,090
compiler and we've got one or two of the

00:04:33,740 --> 00:04:42,240
Austin Pro mongers here this year as

00:04:36,090 --> 00:04:45,330
well besides myself so why would you

00:04:42,240 --> 00:04:46,860
want to use the Perl compiler as I had

00:04:45,330 --> 00:04:49,620
mentioned performance the runtime

00:04:46,860 --> 00:04:53,430
performance of code once it has been

00:04:49,620 --> 00:04:55,349
compiled is phenomenal of course it

00:04:53,430 --> 00:04:58,340
depends on the algorithm because every

00:04:55,349 --> 00:05:01,590
algorithm runs using different

00:04:58,340 --> 00:05:03,479
performance rules and different big-oh

00:05:01,590 --> 00:05:05,400
and let alone notation and all that sort

00:05:03,479 --> 00:05:08,240
of thing for you computer scientists out

00:05:05,400 --> 00:05:12,419
there but essentially you're looking at

00:05:08,240 --> 00:05:15,870
at least ten to a hundred X speed-up and

00:05:12,419 --> 00:05:19,080
in many cases you can get 200 300 400 X

00:05:15,870 --> 00:05:22,879
and as I always remind people this is

00:05:19,080 --> 00:05:25,740
not percentage this is a multiplier so

00:05:22,879 --> 00:05:26,969
you just take that and add two zeros on

00:05:25,740 --> 00:05:31,400
in that if you want to know the

00:05:26,969 --> 00:05:36,810
percentage it's very high 40,000 percent

00:05:31,400 --> 00:05:38,699
speed or higher in some cases I have run

00:05:36,810 --> 00:05:40,349
many many tests myself and you can do

00:05:38,699 --> 00:05:43,169
the same if you don't believe it

00:05:40,349 --> 00:05:46,580
also we have added automatic

00:05:43,169 --> 00:05:50,370
parallelization to the Perl compiler and

00:05:46,580 --> 00:05:54,389
so if you write for loops and just give

00:05:50,370 --> 00:05:57,289
it a label a loop label that has the

00:05:54,389 --> 00:05:59,370
word parallel in it it will

00:05:57,289 --> 00:06:01,889
automatically parallel lies everything

00:05:59,370 --> 00:06:04,830
in that loop which is pretty awesome and

00:06:01,889 --> 00:06:10,889
amazing sort of magical stuff in you

00:06:04,830 --> 00:06:12,449
know in perl 5 and memory usage Pro can

00:06:10,889 --> 00:06:18,120
definitely be a memory hog I mean it's

00:06:12,449 --> 00:06:20,699
using AC struct for every single integer

00:06:18,120 --> 00:06:22,259
or boolean or anything one single

00:06:20,699 --> 00:06:24,719
character that you store it's got an

00:06:22,259 --> 00:06:28,409
entire C struct created for that or more

00:06:24,719 --> 00:06:30,300
it could have several structs there's no

00:06:28,409 --> 00:06:32,849
way to know at least not easily you'd

00:06:30,300 --> 00:06:35,820
have to debug your stuff and look

00:06:32,849 --> 00:06:37,080
internally to see how it's stored so our

00:06:35,820 --> 00:06:40,139
pro can definitely help you on your

00:06:37,080 --> 00:06:44,069
memory quite a bit we are using actual

00:06:40,139 --> 00:06:48,300
native C and C++ datatypes so we're

00:06:44,069 --> 00:06:53,039
using an actual int for an integer we're

00:06:48,300 --> 00:06:55,919
using an actual float or double for a

00:06:53,039 --> 00:06:58,289
number we're using you can actually

00:06:55,919 --> 00:07:03,419
store a single character as a you know

00:06:58,289 --> 00:07:04,469
char or car datatype and and so forth

00:07:03,419 --> 00:07:08,150
and we're using as I had mentioned

00:07:04,469 --> 00:07:11,900
unordered map for hashes and we're using

00:07:08,150 --> 00:07:15,779
vectors for arrays very very fast and

00:07:11,900 --> 00:07:18,979
our parole classes get compiled directly

00:07:15,779 --> 00:07:22,710
into C++ classes which are again

00:07:18,979 --> 00:07:27,659
extremely fast and extremely low

00:07:22,710 --> 00:07:30,479
overhead in the memory and finally if

00:07:27,659 --> 00:07:33,240
you have some need to protect your IP

00:07:30,479 --> 00:07:35,870
which I know many of us do not it's an

00:07:33,240 --> 00:07:39,479
open source conference in many ways but

00:07:35,870 --> 00:07:41,879
we also all of us generally tend to need

00:07:39,479 --> 00:07:46,139
to pay bills and rent somehow through a

00:07:41,879 --> 00:07:51,120
job somehow that often has software that

00:07:46,139 --> 00:07:52,319
is not open-source somehow and so for

00:07:51,120 --> 00:07:56,990
those of you who do have a job in a boss

00:07:52,319 --> 00:08:01,889
and proprietary software or some kind or

00:07:56,990 --> 00:08:04,289
have a potential future need for that if

00:08:01,889 --> 00:08:06,180
your company is going to write some new

00:08:04,289 --> 00:08:07,979
perl software at some point in the

00:08:06,180 --> 00:08:11,159
future and you want to protect that IP

00:08:07,979 --> 00:08:13,379
you could use the BC compiler and it

00:08:11,159 --> 00:08:16,469
will give you a moderate protection of

00:08:13,379 --> 00:08:18,029
your IP you can also use our Perl which

00:08:16,469 --> 00:08:19,860
I would argue gives you even stronger

00:08:18,029 --> 00:08:22,589
protection I mean really with our Perl

00:08:19,860 --> 00:08:25,979
at that point you're you're not going to

00:08:22,589 --> 00:08:27,740
really be able to go back to the

00:08:25,979 --> 00:08:33,269
original Perl not only are you compiled

00:08:27,740 --> 00:08:34,589
through big - oh 9 and in the end GCC

00:08:33,269 --> 00:08:38,039
and all that but you have all of the the

00:08:34,589 --> 00:08:39,990
our Perl front end as well and and we

00:08:38,039 --> 00:08:42,019
could add a few stations and encryption

00:08:39,990 --> 00:08:46,589
on top of that if we really wanted to so

00:08:42,019 --> 00:08:49,920
really this is this is a real compiler

00:08:46,589 --> 00:08:52,110
it does go through GCC or the C compiler

00:08:49,920 --> 00:08:55,110
of your choice and

00:08:52,110 --> 00:08:57,540
and it is giving you essentially what we

00:08:55,110 --> 00:09:02,370
call you know strong IP protection

00:08:57,540 --> 00:09:04,320
you're not going to get any stronger why

00:09:02,370 --> 00:09:05,670
would you not want to use our pearl for

00:09:04,320 --> 00:09:08,400
your project well you're not going to

00:09:05,670 --> 00:09:10,410
probably convert your entire project to

00:09:08,400 --> 00:09:12,750
our Perl right now so let's just get

00:09:10,410 --> 00:09:16,980
that out of the way because you're going

00:09:12,750 --> 00:09:19,020
to be using the fast subsets of Perl 5

00:09:16,980 --> 00:09:22,140
so you're probably going to want to use

00:09:19,020 --> 00:09:25,290
a bunch of other slow Perl 5 code and

00:09:22,140 --> 00:09:28,380
that's fine I will not begrudge you we

00:09:25,290 --> 00:09:32,250
are at the Perl conference you we all I

00:09:28,380 --> 00:09:34,110
have tons of regular Perl code by which

00:09:32,250 --> 00:09:36,060
I mean slow regular Perl is slow just

00:09:34,110 --> 00:09:38,340
face it I'm sorry if you don't like it

00:09:36,060 --> 00:09:41,550
but it's really slow if you compare it

00:09:38,340 --> 00:09:43,410
to other languages like C or even gosh

00:09:41,550 --> 00:09:45,870
forbid like Java

00:09:43,410 --> 00:09:48,330
I mean Java is like 20 to 50 times

00:09:45,870 --> 00:09:52,230
faster than Perl and Java sucks

00:09:48,330 --> 00:09:56,160
so you know we can certainly do better

00:09:52,230 --> 00:09:59,610
than that but as I had said we're we're

00:09:56,160 --> 00:10:00,690
compiling a subset of Perl 5 so what

00:09:59,610 --> 00:10:02,370
you're going to do is you're going to

00:10:00,690 --> 00:10:04,950
choose the parts of your code that you

00:10:02,370 --> 00:10:08,550
need to run fast and use our Perl to

00:10:04,950 --> 00:10:10,290
compile those parts and if you were

00:10:08,550 --> 00:10:12,900
somehow having your hopes up for

00:10:10,290 --> 00:10:15,750
converting your entire 9 million line

00:10:12,900 --> 00:10:17,880
legacy Pro 5 code base to our Perl well

00:10:15,750 --> 00:10:19,830
that's where the letdown occurs because

00:10:17,880 --> 00:10:22,410
it's going to be prohibitively difficult

00:10:19,830 --> 00:10:24,000
to to do that with all the weird wacky

00:10:22,410 --> 00:10:25,860
magic that you've added over the years

00:10:24,000 --> 00:10:28,560
so again what you're going to want to do

00:10:25,860 --> 00:10:31,350
is use NYT Pro or some other Perl

00:10:28,560 --> 00:10:32,970
profiling tool look right at the

00:10:31,350 --> 00:10:36,120
graphical output it shows you click on

00:10:32,970 --> 00:10:37,950
the big red spot which is the hot part

00:10:36,120 --> 00:10:39,330
of your code or the part that keeps

00:10:37,950 --> 00:10:41,310
running over and over and over and over

00:10:39,330 --> 00:10:43,080
and over again and use our Perl to

00:10:41,310 --> 00:10:45,330
compile that part of the code I just

00:10:43,080 --> 00:10:47,520
leave the rest of it as it is there's no

00:10:45,330 --> 00:10:49,350
need to compile all the rest of your

00:10:47,520 --> 00:10:49,860
code you're giving yourself a job for no

00:10:49,350 --> 00:10:54,030
reason

00:10:49,860 --> 00:10:56,100
essentially I did mention briefly how

00:10:54,030 --> 00:10:58,610
this works essentially you're converting

00:10:56,100 --> 00:11:01,350
your pro/5 input code to C++

00:10:58,610 --> 00:11:04,050
compiling that and magically linking it

00:11:01,350 --> 00:11:05,640
back into Perl again because Perl itself

00:11:04,050 --> 00:11:09,120
is written in C 89

00:11:05,640 --> 00:11:12,870
and that is a language which is compiled

00:11:09,120 --> 00:11:14,480
and can be made compatible with C++ 14

00:11:12,870 --> 00:11:18,360
don't you love that

00:11:14,480 --> 00:11:22,200
okay so C 89 from however many years ago

00:11:18,360 --> 00:11:24,870
that was C++ 14 in C++ 20 and all the

00:11:22,200 --> 00:11:26,520
new super latest and greatest stuff that

00:11:24,870 --> 00:11:28,860
we're using now for cutting-edge Perl

00:11:26,520 --> 00:11:31,920
compiling and they can both be linked

00:11:28,860 --> 00:11:34,620
together on the GCC level because

00:11:31,920 --> 00:11:37,680
they're binary compatible and that is

00:11:34,620 --> 00:11:40,680
the secret that's how you can actually

00:11:37,680 --> 00:11:42,030
make a Perl compiler that's how that's

00:11:40,680 --> 00:11:45,960
how this works that's how the whole

00:11:42,030 --> 00:11:49,920
thing can work because we're using C++

00:11:45,960 --> 00:11:50,820
and Perl is written in C and obviously

00:11:49,920 --> 00:11:52,890
you can check out more at the website

00:11:50,820 --> 00:11:54,870
and I'll just give you one last tagline

00:11:52,890 --> 00:11:56,880
and I've spent a lot on this but I

00:11:54,870 --> 00:12:01,140
wanted to give a good introduction it's

00:11:56,880 --> 00:12:03,060
Perl in my opinion and I believe many of

00:12:01,140 --> 00:12:06,720
us would agree Perl is the greatest

00:12:03,060 --> 00:12:08,130
computer language depending on which Pro

00:12:06,720 --> 00:12:10,680
you're talking about or who you're

00:12:08,130 --> 00:12:15,420
talking to I suppose and I would argue

00:12:10,680 --> 00:12:16,620
that our Perl is the fastest compiler in

00:12:15,420 --> 00:12:18,200
the world this is because of a few

00:12:16,620 --> 00:12:21,210
important things as I had mentioned

00:12:18,200 --> 00:12:24,870
you're getting the several hundred X

00:12:21,210 --> 00:12:28,200
speed-up in serial so we are equal to or

00:12:24,870 --> 00:12:31,410
perhaps even in some cases due to manual

00:12:28,200 --> 00:12:34,530
OPS's optimization greater than but will

00:12:31,410 --> 00:12:37,170
at least say equal to the speed of C and

00:12:34,530 --> 00:12:38,910
C++ for serial code and then as I

00:12:37,170 --> 00:12:40,620
mentioned you you have the automatic

00:12:38,910 --> 00:12:44,970
parallelization that you can add on top

00:12:40,620 --> 00:12:47,070
of that to go faster than C or C++ would

00:12:44,970 --> 00:12:49,410
go itself and that's why we can say that

00:12:47,070 --> 00:12:51,870
our Perl is the fastest compiler of

00:12:49,410 --> 00:12:53,370
course I should probably make a meme

00:12:51,870 --> 00:12:55,230
where it's me sitting at a desk in a

00:12:53,370 --> 00:12:56,970
park and it says our Perl is the fastest

00:12:55,230 --> 00:12:58,410
compiler in the world changed my mind

00:12:56,970 --> 00:13:00,750
and then everyone could come up to me

00:12:58,410 --> 00:13:04,320
and argue with me about why they may or

00:13:00,750 --> 00:13:06,270
may not believe that to be true but but

00:13:04,320 --> 00:13:07,950
that's that's my story and I'm sticking

00:13:06,270 --> 00:13:10,140
to it and if you think your code is

00:13:07,950 --> 00:13:13,380
somehow faster then I will challenge you

00:13:10,140 --> 00:13:16,200
right as soon as this talk is done and I

00:13:13,380 --> 00:13:18,750
will win moving on what's new and our

00:13:16,200 --> 00:13:20,850
parole we're gonna try and go through

00:13:18,750 --> 00:13:23,529
this

00:13:20,850 --> 00:13:25,000
relatively quickly because I spent a lot

00:13:23,529 --> 00:13:27,870
of time on the intro but our purlins

00:13:25,000 --> 00:13:33,160
docker this is one of our big new

00:13:27,870 --> 00:13:35,320
important awesome amazing things new

00:13:33,160 --> 00:13:40,570
features new awesome features in our

00:13:35,320 --> 00:13:42,450
Perl so after hearing everybody requests

00:13:40,570 --> 00:13:45,279
our pearl in docker for quite some time

00:13:42,450 --> 00:13:48,370
myself and one of the team our Perl

00:13:45,279 --> 00:13:52,480
programmers Bruce gray who's here we put

00:13:48,370 --> 00:13:53,860
together this image which you can get

00:13:52,480 --> 00:13:59,110
right there the command is right across

00:13:53,860 --> 00:14:01,990
the top and this will skip all of the

00:13:59,110 --> 00:14:04,140
headache of somehow downloading and

00:14:01,990 --> 00:14:06,300
installing and configuring our Perl and

00:14:04,140 --> 00:14:10,810
it will give you a full running

00:14:06,300 --> 00:14:14,079
operating system that has the latest

00:14:10,810 --> 00:14:15,279
stable version pre-installed for you you

00:14:14,079 --> 00:14:18,430
can do whatever you want in there and

00:14:15,279 --> 00:14:20,740
mess it all up and log back out again

00:14:18,430 --> 00:14:24,910
and it and your normal operating system

00:14:20,740 --> 00:14:26,560
will be just fine so those you who don't

00:14:24,910 --> 00:14:28,810
know what docker is I'm sure most of us

00:14:26,560 --> 00:14:31,620
do it's kind of sort of like a virtual

00:14:28,810 --> 00:14:33,610
machine but it's fast or super fast and

00:14:31,620 --> 00:14:35,770
it doesn't have to really virtualize

00:14:33,610 --> 00:14:37,660
everything like a video card and a sound

00:14:35,770 --> 00:14:39,790
card and all that sort of stuff but it

00:14:37,660 --> 00:14:42,670
does some really cool stuff it allows

00:14:39,790 --> 00:14:44,800
you to have an entirely new and

00:14:42,670 --> 00:14:46,029
different operating system with whatever

00:14:44,800 --> 00:14:49,560
you want configured inside of your own

00:14:46,029 --> 00:14:53,790
current operating system so in this case

00:14:49,560 --> 00:14:57,610
you see at the bottom I've set up the

00:14:53,790 --> 00:15:00,910
what I would call an ideal stack for the

00:14:57,610 --> 00:15:04,649
Perl compiler you start with debian or I

00:15:00,910 --> 00:15:07,810
use Ubuntu on on my laptop here but

00:15:04,649 --> 00:15:10,209
docker is often and usually based off of

00:15:07,810 --> 00:15:15,760
Debian so we state we start with a

00:15:10,209 --> 00:15:18,250
standard Debian docker image base make

00:15:15,760 --> 00:15:21,670
sure it's got the special GCC that's

00:15:18,250 --> 00:15:24,550
going to have the C++ 14 that we

00:15:21,670 --> 00:15:29,140
mentioned we make sure it's got the

00:15:24,550 --> 00:15:30,640
latest Perl so in theory we we do have

00:15:29,140 --> 00:15:32,750
our Perl support all the way going back

00:15:30,640 --> 00:15:36,850
to pro 510

00:15:32,750 --> 00:15:40,610
but I generally try to have 518 or newer

00:15:36,850 --> 00:15:42,140
just because it's it's what's installed

00:15:40,610 --> 00:15:46,160
in the latest Debian and it's more

00:15:42,140 --> 00:15:49,490
widespread installing about a gazillion

00:15:46,160 --> 00:15:52,310
Sipan modules that are required by our

00:15:49,490 --> 00:15:54,740
referral and then of course the compiler

00:15:52,310 --> 00:15:56,420
itself so all of that stuff is is what

00:15:54,740 --> 00:15:58,430
we call the ideal stack and that's what

00:15:56,420 --> 00:15:59,720
you're getting in this docker image so I

00:15:58,430 --> 00:16:02,000
just wanted you to have a brief overview

00:15:59,720 --> 00:16:04,370
the stack you're getting in this docker

00:16:02,000 --> 00:16:07,460
image and I'll just give a few other

00:16:04,370 --> 00:16:08,960
quick high points about what you need to

00:16:07,460 --> 00:16:11,420
understand about docker or at least how

00:16:08,960 --> 00:16:12,530
our perl works in docker this is really

00:16:11,420 --> 00:16:15,290
as I had said sort of the easy

00:16:12,530 --> 00:16:17,210
installation option you could be doing

00:16:15,290 --> 00:16:20,330
it right now and you know maybe that guy

00:16:17,210 --> 00:16:22,430
is who knows but yeah I mean you could

00:16:20,330 --> 00:16:24,980
you could already have it working right

00:16:22,430 --> 00:16:26,540
now since I showed you this slide and

00:16:24,980 --> 00:16:28,400
I'm still talking about this slide and

00:16:26,540 --> 00:16:30,340
it's not a long slide so that's how

00:16:28,400 --> 00:16:34,670
quick you could have it wrap and running

00:16:30,340 --> 00:16:38,240
I I do give the sort of a qualification

00:16:34,670 --> 00:16:40,340
or caveat that I recommend this mostly

00:16:38,240 --> 00:16:42,110
for testing and experimentation the

00:16:40,340 --> 00:16:44,060
reason is not because it's unstable in

00:16:42,110 --> 00:16:45,920
any way but just because of the way that

00:16:44,060 --> 00:16:48,920
docker works which if you look to the

00:16:45,920 --> 00:16:49,970
next line it's because docker as I had

00:16:48,920 --> 00:16:51,140
mentioned is sort of like a virtual

00:16:49,970 --> 00:16:52,280
machine so what you're getting is a

00:16:51,140 --> 00:16:54,890
command-line interface

00:16:52,280 --> 00:16:56,120
okay you're gonna need to know how Linux

00:16:54,890 --> 00:16:59,120
works you're going to need to know how

00:16:56,120 --> 00:17:01,250
to type commands you're gonna need to

00:16:59,120 --> 00:17:04,160
know if you don't need if you don't know

00:17:01,250 --> 00:17:05,720
what CLI means already and you don't

00:17:04,160 --> 00:17:07,459
already have Linux installed on your

00:17:05,720 --> 00:17:10,130
laptop and you use it every day it may

00:17:07,459 --> 00:17:12,220
be a foreign interface to you you may

00:17:10,130 --> 00:17:15,380
not understand what you're doing and

00:17:12,220 --> 00:17:18,380
that's okay because we're gonna get to

00:17:15,380 --> 00:17:22,000
another easier option for you the person

00:17:18,380 --> 00:17:22,000
that I'm addressing the imaginary

00:17:22,089 --> 00:17:25,520
non-programming non super technical

00:17:24,020 --> 00:17:27,709
person we'll get to that in a minute

00:17:25,520 --> 00:17:28,850
but for those of you that really like to

00:17:27,709 --> 00:17:30,710
write code and love command-line

00:17:28,850 --> 00:17:33,800
interfaces and just want to quick our

00:17:30,710 --> 00:17:37,610
parole you can do this in like a minute

00:17:33,800 --> 00:17:39,110
or two this also gives you what I would

00:17:37,610 --> 00:17:42,380
just term an independent session or a

00:17:39,110 --> 00:17:44,910
sandbox and so please be aware and this

00:17:42,380 --> 00:17:47,790
is critically important

00:17:44,910 --> 00:17:50,190
if you write code or compiled code

00:17:47,790 --> 00:17:57,720
inside of this docker instance and then

00:17:50,190 --> 00:18:00,540
log out you will lose everything it

00:17:57,720 --> 00:18:03,360
again is like a virtual machine and when

00:18:00,540 --> 00:18:06,740
it's when you turn it off it is don't

00:18:03,360 --> 00:18:10,290
it's gone forever it does not have a

00:18:06,740 --> 00:18:13,560
temporary magic hard drive to save stuff

00:18:10,290 --> 00:18:14,760
in okay now we can set up a way to do

00:18:13,560 --> 00:18:15,930
that but with docker it's a little

00:18:14,760 --> 00:18:17,250
tricking you have to sort of like mount

00:18:15,930 --> 00:18:18,720
local stuff or something something I

00:18:17,250 --> 00:18:21,720
don't know if you or docker expert come

00:18:18,720 --> 00:18:23,340
see me after and we're working on it we

00:18:21,720 --> 00:18:24,600
are this docker thing is a new thing and

00:18:23,340 --> 00:18:27,330
it's a work in progress but nevertheless

00:18:24,600 --> 00:18:29,010
just sort of the default way that docker

00:18:27,330 --> 00:18:30,450
works is you start it up you have a

00:18:29,010 --> 00:18:32,100
total sandbox you could do anything

00:18:30,450 --> 00:18:33,450
inside of that as root and destroy

00:18:32,100 --> 00:18:35,610
everything and when you log back out it

00:18:33,450 --> 00:18:37,590
disappears forever so if you're going to

00:18:35,610 --> 00:18:40,740
write code or compile code inside of

00:18:37,590 --> 00:18:43,280
that just make sure you use FTP or SCP

00:18:40,740 --> 00:18:47,190
or some other way to transfer it out of

00:18:43,280 --> 00:18:52,830
that container before you exit and shut

00:18:47,190 --> 00:18:54,480
it down please we also do have another

00:18:52,830 --> 00:18:59,460
big important thing that was

00:18:54,480 --> 00:19:01,200
accomplished over the past year our perl

00:18:59,460 --> 00:19:04,740
installation packages for sent to us now

00:19:01,200 --> 00:19:07,890
I am NOT a Red Hat person myself but I

00:19:04,740 --> 00:19:16,530
know that many people are and we had to

00:19:07,890 --> 00:19:24,690
start somewhere and so we've got a new

00:19:16,530 --> 00:19:26,250
our perl repo for sent us packages which

00:19:24,690 --> 00:19:29,610
again the commands are right across the

00:19:26,250 --> 00:19:34,380
top and you end up in the end yum

00:19:29,610 --> 00:19:39,180
install Perl - our Perl and this is

00:19:34,380 --> 00:19:41,160
going to completely bypass Sipan it's

00:19:39,180 --> 00:19:44,040
going to completely bypass the docker

00:19:41,160 --> 00:19:45,140
thing we just mentioned it's going to

00:19:44,040 --> 00:19:48,300
[Music]

00:19:45,140 --> 00:19:51,420
install what I would call the the

00:19:48,300 --> 00:19:53,130
correct or preferred way using the

00:19:51,420 --> 00:19:56,940
operating systems package management

00:19:53,130 --> 00:19:58,710
system or package manager as we call it

00:19:56,940 --> 00:20:02,880
which is yum

00:19:58,710 --> 00:20:05,429
in this case and the reason why I call

00:20:02,880 --> 00:20:09,020
this the right way to do it or the

00:20:05,429 --> 00:20:12,779
preferred way in my opinion is because

00:20:09,020 --> 00:20:16,140
it's pre-built packages that I

00:20:12,779 --> 00:20:19,200
personally built and put the encryption

00:20:16,140 --> 00:20:21,779
signatures on and confirmed myself which

00:20:19,200 --> 00:20:23,490
means that if something breaks on Sipan

00:20:21,779 --> 00:20:26,700
or somebody changes something which they

00:20:23,490 --> 00:20:27,840
do every day it won't mess these up it

00:20:26,700 --> 00:20:31,320
also means that I know these are all

00:20:27,840 --> 00:20:32,460
stable versions of the CP n modules

00:20:31,320 --> 00:20:37,559
there's about a hundred and eighty

00:20:32,460 --> 00:20:41,490
hundred ninety dependencies and sub

00:20:37,559 --> 00:20:43,890
dependencies of our pearl from C pain so

00:20:41,490 --> 00:20:47,039
instead of waiting an hour or two or

00:20:43,890 --> 00:20:51,000
three and hoping that one of those 200

00:20:47,039 --> 00:20:52,710
or so does not fail you could use the

00:20:51,000 --> 00:20:54,960
pre-built packages and they will

00:20:52,710 --> 00:20:56,760
download and install pretty much

00:20:54,960 --> 00:20:58,380
instantaneously if you have a fast

00:20:56,760 --> 00:21:02,370
connection and a fast computer because

00:20:58,380 --> 00:21:04,710
they're all binary packages and they're

00:21:02,370 --> 00:21:07,830
pretty much guaranteed to work if you're

00:21:04,710 --> 00:21:10,169
using this version of sent to us and to

00:21:07,830 --> 00:21:11,399
i7 and we'll have other versions built

00:21:10,169 --> 00:21:12,659
for other versions of the operating

00:21:11,399 --> 00:21:16,529
system we'll get in all that in a minute

00:21:12,659 --> 00:21:20,760
but for those who are already using sent

00:21:16,529 --> 00:21:22,649
OS 7 this is the way to go skip over

00:21:20,760 --> 00:21:26,970
docker skip over Sipan just goes

00:21:22,649 --> 00:21:29,159
straight to the real packages and again

00:21:26,970 --> 00:21:31,559
this is about ease of installation this

00:21:29,159 --> 00:21:33,990
is good for an actual production

00:21:31,559 --> 00:21:38,909
deployment if you are someone who is

00:21:33,990 --> 00:21:42,870
using Perl in production and you want to

00:21:38,909 --> 00:21:44,760
deploy the compiler in production maybe

00:21:42,870 --> 00:21:48,240
even a commercial environment commercial

00:21:44,760 --> 00:21:53,159
production environment this is the

00:21:48,240 --> 00:21:54,539
solution and as I had mentioned this is

00:21:53,159 --> 00:21:56,850
giving you full integration with your

00:21:54,539 --> 00:21:59,370
operating system so it will know the

00:21:56,850 --> 00:22:03,090
other dependencies that the OS needs to

00:21:59,370 --> 00:22:04,799
have which is a critical issue with

00:22:03,090 --> 00:22:06,570
installing via Sipan because there's a

00:22:04,799 --> 00:22:10,260
whole bunch of non Sipan dependencies

00:22:06,570 --> 00:22:12,860
and making Sipan work with non Sipan

00:22:10,260 --> 00:22:16,650
dependencies is

00:22:12,860 --> 00:22:18,600
interesting difficult so that this is

00:22:16,650 --> 00:22:20,460
this is very much suggested for those

00:22:18,600 --> 00:22:24,300
that are using this particular operating

00:22:20,460 --> 00:22:27,530
system and one last note about this

00:22:24,300 --> 00:22:27,530
particular operating system

00:22:28,130 --> 00:22:33,300
unfortunately red head and sent to us

00:22:30,210 --> 00:22:35,310
and Red Hat based operating systems are

00:22:33,300 --> 00:22:39,000
broken when it comes to parole and I

00:22:35,310 --> 00:22:40,800
think perhaps I don't know permanently

00:22:39,000 --> 00:22:44,910
in the sense of it will never ever be

00:22:40,800 --> 00:22:48,420
fixed but we'll say at least semi

00:22:44,910 --> 00:22:50,730
permanently because I don't think it

00:22:48,420 --> 00:22:53,310
will be fixed anytime soon I've already

00:22:50,730 --> 00:22:55,650
opened a bunch of tickets and talked to

00:22:53,310 --> 00:22:57,690
the Red Hat people and and the the Pearl

00:22:55,650 --> 00:22:59,070
Red Hat people and I know some of them

00:22:57,690 --> 00:23:03,270
myself

00:22:59,070 --> 00:23:07,950
and essentially what what has happened

00:23:03,270 --> 00:23:15,270
is the the center a so Red Hat package

00:23:07,950 --> 00:23:19,740
ecosystem for Pearl has has evolved

00:23:15,270 --> 00:23:23,990
organically and the version numbers used

00:23:19,740 --> 00:23:28,710
in those Red Hat packages for Pearl are

00:23:23,990 --> 00:23:34,830
essentially in a random format and and

00:23:28,710 --> 00:23:36,780
and it is unfixable I actually got so

00:23:34,830 --> 00:23:39,690
far as to try and and start writing a

00:23:36,780 --> 00:23:42,990
miniature AI to try and figure out what

00:23:39,690 --> 00:23:45,750
people meant when they created their

00:23:42,990 --> 00:23:50,430
wacky wacky non-standard version numbers

00:23:45,750 --> 00:23:51,870
in in these Red Hat packages but after

00:23:50,430 --> 00:23:53,520
working on that for several months I

00:23:51,870 --> 00:23:56,100
realized it was not going to work so I

00:23:53,520 --> 00:24:01,440
just had to rebuild every package from

00:23:56,100 --> 00:24:03,810
scratch so be aware that any parole

00:24:01,440 --> 00:24:06,450
packages you have in any Red Hat based

00:24:03,810 --> 00:24:10,040
distro are broken they cannot be fixed

00:24:06,450 --> 00:24:13,740
at this time in any other way other than

00:24:10,040 --> 00:24:16,110
using our corrected packages in the repo

00:24:13,740 --> 00:24:18,950
so if you look in that repo and you open

00:24:16,110 --> 00:24:21,570
it up in a web browser you'll see just

00:24:18,950 --> 00:24:24,160
hundreds of Red Hat packages and

00:24:21,570 --> 00:24:26,080
signature packages and and all that

00:24:24,160 --> 00:24:28,960
and you just have to do it that way

00:24:26,080 --> 00:24:33,760
because of of how messed up redhead is

00:24:28,960 --> 00:24:38,290
unfortunately moving on what in the heck

00:24:33,760 --> 00:24:40,060
is Pearl 11 well this is this is a big

00:24:38,290 --> 00:24:44,110
part of our Perl because actually our

00:24:40,060 --> 00:24:47,770
Perl is a part of Perl 11 and our Perl

00:24:44,110 --> 00:24:52,120
came out of Perl 11 Pro 11 as I

00:24:47,770 --> 00:24:55,360
mentioned in 2012 in the summer I had

00:24:52,120 --> 00:24:58,090
brought in G dot net who's here at the

00:24:55,360 --> 00:25:01,060
conference and rainy urban who couldn't

00:24:58,090 --> 00:25:04,390
be here to come and visit with me in

00:25:01,060 --> 00:25:07,540
Austin Texas and the three of us worked

00:25:04,390 --> 00:25:13,450
together to come up with Perl 11 which

00:25:07,540 --> 00:25:16,210
was our idea about reunifying pro 5 in

00:25:13,450 --> 00:25:20,610
Perl 6 which is we give engi full credit

00:25:16,210 --> 00:25:26,970
for for coming up with that Perl 11

00:25:20,610 --> 00:25:26,970
numeric pun numb pun as we call it and

00:25:27,270 --> 00:25:33,970
this Perl goes to 11 of course being a

00:25:30,480 --> 00:25:41,230
heavy metal rock and roll joke for those

00:25:33,970 --> 00:25:43,200
of you who are familiar and what we came

00:25:41,230 --> 00:25:45,580
up with was these three goals

00:25:43,200 --> 00:25:47,160
reunification of Perl 5 & 6 which is

00:25:45,580 --> 00:25:49,990
again where the number comes from

00:25:47,160 --> 00:25:51,880
modularity of Perl at all levels so if

00:25:49,990 --> 00:25:53,830
we wanted to remove the regular

00:25:51,880 --> 00:25:55,330
expression engine in Perl 5 and replace

00:25:53,830 --> 00:25:58,750
it with something else we should be able

00:25:55,330 --> 00:26:01,410
to do that without wanting to shoot

00:25:58,750 --> 00:26:03,250
ourselves and everyone else involved and

00:26:01,410 --> 00:26:05,310
failing in the end to actually

00:26:03,250 --> 00:26:07,540
accomplish that technical tasks and

00:26:05,310 --> 00:26:08,980
thirdly performance which as you know

00:26:07,540 --> 00:26:13,090
we've talked quite a bit about with our

00:26:08,980 --> 00:26:15,010
perl so with these three goals we came

00:26:13,090 --> 00:26:17,260
up with the idea of Pro 11 Pro lemon is

00:26:15,010 --> 00:26:19,000
not yet a version it's not a version of

00:26:17,260 --> 00:26:23,380
Perl we're not trying to release a pro

00:26:19,000 --> 00:26:25,450
version 11 until such a time as Pro 5

00:26:23,380 --> 00:26:27,820
and 6 are completely reemerged again and

00:26:25,450 --> 00:26:32,020
this is going to take many years to

00:26:27,820 --> 00:26:35,140
accomplish it's taken us 30 plus years

00:26:32,020 --> 00:26:37,760
to get here it's not gonna we're not

00:26:35,140 --> 00:26:42,390
going to unscramble these two eggs

00:26:37,760 --> 00:26:47,909
in anything less than a decade or two or

00:26:42,390 --> 00:26:50,070
three our / 11 is at this time it's

00:26:47,909 --> 00:26:52,140
essentially an informal development

00:26:50,070 --> 00:26:54,450
collective our pearl the art Pro project

00:26:52,140 --> 00:26:57,929
is part of that web Pearl sea pearl

00:26:54,450 --> 00:26:59,340
there's the list goes on if you just go

00:26:57,929 --> 00:27:03,000
to pro leaven org you'll see the long

00:26:59,340 --> 00:27:06,179
list but essentially this is the

00:27:03,000 --> 00:27:08,909
umbrella under which our Perl operates

00:27:06,179 --> 00:27:14,880
and it's it's an important thing to know

00:27:08,909 --> 00:27:17,669
this is it's the long term slow burning

00:27:14,880 --> 00:27:22,350
movement to somehow get us out of the

00:27:17,669 --> 00:27:26,669
ruts that we are in and but wait there's

00:27:22,350 --> 00:27:31,820
more there is now a new master plan yes

00:27:26,669 --> 00:27:31,820
as the raccoon rubs his hands together

00:27:32,570 --> 00:27:39,960
we've been working to come up with a new

00:27:35,279 --> 00:27:43,260
master plan not just for pro 5 or pro 6

00:27:39,960 --> 00:27:46,440
or our pearl but for pro 11 for the

00:27:43,260 --> 00:27:48,390
entire pearl community saint lary

00:27:46,440 --> 00:27:51,419
has declared that pearl 6 is a

00:27:48,390 --> 00:27:52,409
hundred-year language so by my

00:27:51,419 --> 00:27:56,460
estimation we're going to need a

00:27:52,409 --> 00:27:59,100
300-year plane because I as I had said

00:27:56,460 --> 00:28:00,720
we we have Pro 5 and Perl 6 to deal with

00:27:59,100 --> 00:28:01,760
here in a Perl 11 in the future coming

00:28:00,720 --> 00:28:04,590
sometime

00:28:01,760 --> 00:28:06,659
so if Perl 6 a subset of that is a

00:28:04,590 --> 00:28:10,980
hundred-year then we've got to go well

00:28:06,659 --> 00:28:13,500
beyond that and the real goal here with

00:28:10,980 --> 00:28:15,029
the pro love and master plan is to make

00:28:13,500 --> 00:28:18,390
pearl the king of languages again to

00:28:15,029 --> 00:28:21,870
make parole the number one most

00:28:18,390 --> 00:28:24,690
important language in the world and to

00:28:21,870 --> 00:28:26,460
make anyone who thinks or says pearl is

00:28:24,690 --> 00:28:27,659
dead to be a laughingstock because it

00:28:26,460 --> 00:28:29,340
would be silly that would be like

00:28:27,659 --> 00:28:30,809
walking out and saying python is dead

00:28:29,340 --> 00:28:33,510
and any programmer would laugh in your

00:28:30,809 --> 00:28:35,669
face if you said that because I'm I

00:28:33,510 --> 00:28:37,260
haven't been to a Python convention but

00:28:35,669 --> 00:28:39,360
I'm sure that they have like probably

00:28:37,260 --> 00:28:41,760
more sponsorship and you know stuff than

00:28:39,360 --> 00:28:43,890
we have at this point which is fine

00:28:41,760 --> 00:28:47,730
because they don't have a hundred-year

00:28:43,890 --> 00:28:50,630
plane and they certainly don't have a

00:28:47,730 --> 00:28:50,630
300 year plan

00:28:50,840 --> 00:28:57,840
they don't even have a presence at at

00:28:53,330 --> 00:28:59,700
non Python conferences I mean go to

00:28:57,840 --> 00:29:00,150
özkan go to Faust and while they were at

00:28:59,700 --> 00:29:02,510
FOSDEM

00:29:00,150 --> 00:29:05,190
so they have a they have a minimal a

00:29:02,510 --> 00:29:08,670
minimal presence but we have more we

00:29:05,190 --> 00:29:10,350
have more so there there's a few

00:29:08,670 --> 00:29:11,730
important items on this master plane

00:29:10,350 --> 00:29:15,240
we're gonna try and go through just a

00:29:11,730 --> 00:29:21,120
few of them briefly here first up

00:29:15,240 --> 00:29:23,400
there's the bottom-up approach to making

00:29:21,120 --> 00:29:25,790
pearl the number one king of languages

00:29:23,400 --> 00:29:27,780
again and this is through education and

00:29:25,790 --> 00:29:31,740
specifically we're gonna have to educate

00:29:27,780 --> 00:29:33,390
young people okay because I'm looking

00:29:31,740 --> 00:29:36,540
around and there's there's no young

00:29:33,390 --> 00:29:38,370
people in the room right now and there's

00:29:36,540 --> 00:29:40,919
maybe one or two at the conference but I

00:29:38,370 --> 00:29:43,919
don't not going to hold my breath for

00:29:40,919 --> 00:29:49,710
them to become the next Larry wall or

00:29:43,919 --> 00:29:53,809
the next compiler pumpking so you know I

00:29:49,710 --> 00:29:56,460
would like to see dozens and dozens of

00:29:53,809 --> 00:29:59,070
young people at every Perl conference

00:29:56,460 --> 00:30:00,660
every year excited and burning and

00:29:59,070 --> 00:30:03,000
having their own buffs and their own

00:30:00,660 --> 00:30:07,380
sessions and having their own leadership

00:30:03,000 --> 00:30:09,179
emerge because you know what we're not

00:30:07,380 --> 00:30:11,340
gonna all live forever I mean I will but

00:30:09,179 --> 00:30:17,130
I don't know about y'all okay they're

00:30:11,340 --> 00:30:19,559
gonna freeze my body when I die but but

00:30:17,130 --> 00:30:22,500
the rest of y'all probably won't last

00:30:19,559 --> 00:30:25,500
forever so we will need a new generation

00:30:22,500 --> 00:30:27,630
and that's completely unaddressed at

00:30:25,500 --> 00:30:27,990
this point we'll talk about that more a

00:30:27,630 --> 00:30:32,070
minute

00:30:27,990 --> 00:30:36,960
there's the top-down approach rich CEOs

00:30:32,070 --> 00:30:39,320
need to give us all their money let me

00:30:36,960 --> 00:30:45,690
repeat that

00:30:39,320 --> 00:30:49,950
rich CEOs need to give us the Perl

00:30:45,690 --> 00:30:53,090
community all their money not just some

00:30:49,950 --> 00:30:56,429
of it all of it

00:30:53,090 --> 00:30:58,590
now that's that's a tall order as well

00:30:56,429 --> 00:31:00,540
this is you know maybe as hard as

00:30:58,590 --> 00:31:01,460
raising a whole new generation of Perl

00:31:00,540 --> 00:31:03,920
programmers

00:31:01,460 --> 00:31:06,350
and so this is what we're calling the

00:31:03,920 --> 00:31:07,640
top-down approach and we'll get into

00:31:06,350 --> 00:31:09,320
that in a minute we're gonna have to

00:31:07,640 --> 00:31:10,610
really follow some major major industry

00:31:09,320 --> 00:31:14,720
trends which we're failing to do right

00:31:10,610 --> 00:31:16,160
now everyday users what's in between the

00:31:14,720 --> 00:31:19,280
top down in the bottom up approach

00:31:16,160 --> 00:31:27,740
you've got the big fat gigantic middle

00:31:19,280 --> 00:31:29,750
class of the world and these are just

00:31:27,740 --> 00:31:32,030
your mom and dad your brother and your

00:31:29,750 --> 00:31:34,730
sister every non-programmer in the world

00:31:32,030 --> 00:31:37,670
most human beings fall into that

00:31:34,730 --> 00:31:39,260
category and what do they do on the

00:31:37,670 --> 00:31:41,980
computer they check their email they go

00:31:39,260 --> 00:31:44,480
on the web they maybe play some games

00:31:41,980 --> 00:31:46,100
I'm out of touch with reality I don't

00:31:44,480 --> 00:31:50,870
even know what normal people do on their

00:31:46,100 --> 00:31:54,140
computer I I write code on mine but I

00:31:50,870 --> 00:31:57,680
also check my email and go on Facebook

00:31:54,140 --> 00:31:59,780
or something so I'm guessing that they

00:31:57,680 --> 00:32:02,930
probably do those things as well so you

00:31:59,780 --> 00:32:06,500
know where's the web browser written in

00:32:02,930 --> 00:32:11,060
Perl where's the email system written in

00:32:06,500 --> 00:32:13,040
Perl where's the best-selling video

00:32:11,060 --> 00:32:15,890
games that people actually pay money for

00:32:13,040 --> 00:32:20,090
off of steam or some other thing like

00:32:15,890 --> 00:32:24,350
that written in Perl they don't exist

00:32:20,090 --> 00:32:25,880
why well number one because Perl is

00:32:24,350 --> 00:32:28,580
super slow so you're gonna have to use

00:32:25,880 --> 00:32:30,560
the compiler to achieve those things for

00:32:28,580 --> 00:32:34,040
the most part maybe you could get an

00:32:30,560 --> 00:32:35,930
email client you not to compile but the

00:32:34,040 --> 00:32:37,130
web server you sure would be the web

00:32:35,930 --> 00:32:39,020
browser you sure would because you're

00:32:37,130 --> 00:32:40,640
going to be having like a JavaScript

00:32:39,020 --> 00:32:42,470
engine and web assembly engine inside of

00:32:40,640 --> 00:32:43,970
it and stuff like that games you

00:32:42,470 --> 00:32:45,680
certainly will have to because it needs

00:32:43,970 --> 00:32:49,850
to you know have 3d graphics and run

00:32:45,680 --> 00:32:52,730
super fast so we're gonna need to have

00:32:49,850 --> 00:32:55,760
like a gazillion apps so yeah if y'all

00:32:52,730 --> 00:32:57,950
could get on that and like you know have

00:32:55,760 --> 00:33:02,690
those TPS reports ready by the end of

00:32:57,950 --> 00:33:05,480
the day it out be great yeah okay and a

00:33:02,690 --> 00:33:06,680
few other things we talked about

00:33:05,480 --> 00:33:08,360
performance we're gonna have to have

00:33:06,680 --> 00:33:09,860
super high performance I've already got

00:33:08,360 --> 00:33:11,830
us working on that obviously with the

00:33:09,860 --> 00:33:14,620
compiler we're gonna have to have cloud

00:33:11,830 --> 00:33:17,770
ability cloud ability

00:33:14,620 --> 00:33:19,210
cool I probably made a new term I don't

00:33:17,770 --> 00:33:22,090
know we're gonna have to have the cloud

00:33:19,210 --> 00:33:25,179
abilities we're gonna have to and that's

00:33:22,090 --> 00:33:26,860
it for for ease of access we're gonna

00:33:25,179 --> 00:33:28,360
have to have the installation things

00:33:26,860 --> 00:33:30,370
that I had mentioned even more of that

00:33:28,360 --> 00:33:33,159
we're gonna have to have easy deployment

00:33:30,370 --> 00:33:35,740
as well we talked about docker with the

00:33:33,159 --> 00:33:39,820
easy deployment so let's just drill down

00:33:35,740 --> 00:33:44,370
into these for a few minutes here Perl

00:33:39,820 --> 00:33:44,370
education we are starting a new program

00:33:44,580 --> 00:33:50,610
just had two hackathons with the Austin

00:33:47,770 --> 00:33:55,440
Perl mongers to begin designing this

00:33:50,610 --> 00:33:57,909
youth education program focused on teens

00:33:55,440 --> 00:34:00,700
we're gonna have a social club called

00:33:57,909 --> 00:34:05,200
Perl teens this is based off of some of

00:34:00,700 --> 00:34:07,929
the perl mongers template generally

00:34:05,200 --> 00:34:09,790
going to try and have this sponsored by

00:34:07,929 --> 00:34:12,129
you know pro mongers group or that sort

00:34:09,790 --> 00:34:14,980
of thing so if there's a pro monger

00:34:12,129 --> 00:34:16,960
group in your big city then there's

00:34:14,980 --> 00:34:19,510
probably pro mongers that have teenage

00:34:16,960 --> 00:34:20,919
children or nieces and nephews or maybe

00:34:19,510 --> 00:34:23,169
there's school teachers and you know

00:34:20,919 --> 00:34:25,570
they need some projects for their

00:34:23,169 --> 00:34:28,649
classes and so forth there's also many

00:34:25,570 --> 00:34:31,839
many libraries in America that are dying

00:34:28,649 --> 00:34:34,929
to have some sort of good free open

00:34:31,839 --> 00:34:36,760
source programs for youth to do

00:34:34,929 --> 00:34:38,320
computers because I've looked and

00:34:36,760 --> 00:34:40,210
generally what you have is one of the

00:34:38,320 --> 00:34:43,149
librarians is chosen based out of the

00:34:40,210 --> 00:34:45,700
fact that they took a Microsoft Excel

00:34:43,149 --> 00:34:46,450
class at the Community College and now

00:34:45,700 --> 00:34:48,760
they're in charge of teaching

00:34:46,450 --> 00:34:53,080
programming to all of the kids in the

00:34:48,760 --> 00:34:54,909
neighborhood now granted you can do some

00:34:53,080 --> 00:34:56,139
pretty crazy programming stuff in Excel

00:34:54,909 --> 00:34:59,710
but I don't think that's what they were

00:34:56,139 --> 00:35:01,270
doing at the community college class so

00:34:59,710 --> 00:35:03,430
you really have non-technical people

00:35:01,270 --> 00:35:07,930
teaching kids technical stuff and that's

00:35:03,430 --> 00:35:09,700
not ideal so we can we can teach those

00:35:07,930 --> 00:35:11,080
librarians everything they need to know

00:35:09,700 --> 00:35:13,450
to walk through the program as part of

00:35:11,080 --> 00:35:17,170
the teachers manual and of course

00:35:13,450 --> 00:35:18,940
schools are also in need of good

00:35:17,170 --> 00:35:20,700
technology programs as well and this was

00:35:18,940 --> 00:35:24,720
something someone had mentioned earlier

00:35:20,700 --> 00:35:27,070
in in a foreign country I believe

00:35:24,720 --> 00:35:32,800
Eastern Europe somewhere

00:35:27,070 --> 00:35:36,100
that the local pro mongers group went to

00:35:32,800 --> 00:35:41,050
the local school system and said hey if

00:35:36,100 --> 00:35:45,730
you start training your youth and pearl

00:35:41,050 --> 00:35:48,610
with this curriculum or these books

00:35:45,730 --> 00:35:52,630
learning Perl whatever that it may be we

00:35:48,610 --> 00:35:55,270
will guarantee each of them will get an

00:35:52,630 --> 00:35:57,160
internship with our company and for

00:35:55,270 --> 00:35:58,810
those that are qualified they'll get a

00:35:57,160 --> 00:36:01,630
job interview and potentially of course

00:35:58,810 --> 00:36:04,930
get hired for a real paying job out of

00:36:01,630 --> 00:36:06,670
school and and so that's you know I do

00:36:04,930 --> 00:36:08,860
applaud that plane and that's really

00:36:06,670 --> 00:36:09,940
kind of what we're going for here okay

00:36:08,860 --> 00:36:13,630
and this is going to be something that

00:36:09,940 --> 00:36:16,240
will have to be sort of a grassroots

00:36:13,630 --> 00:36:18,730
movement we'll be providing the program

00:36:16,240 --> 00:36:20,020
and and the infrastructure but

00:36:18,730 --> 00:36:22,270
everybody's going to have to get this

00:36:20,020 --> 00:36:24,460
implemented in their own communities and

00:36:22,270 --> 00:36:26,110
the way that it will be implemented is a

00:36:24,460 --> 00:36:30,070
type of software that we're creating

00:36:26,110 --> 00:36:33,850
called teen pearl this is a web-based

00:36:30,070 --> 00:36:35,380
adventure game so they're going to be

00:36:33,850 --> 00:36:37,180
playing it online they're going to have

00:36:35,380 --> 00:36:38,800
a character they're gonna choose what

00:36:37,180 --> 00:36:40,210
their character is how it looks maybe

00:36:38,800 --> 00:36:43,450
it's a camel maybe it's a butterfly

00:36:40,210 --> 00:36:48,310
maybe it's a little you know something

00:36:43,450 --> 00:36:49,990
Road Runner who knows and their

00:36:48,310 --> 00:36:51,280
character will go on adventures and go

00:36:49,990 --> 00:36:55,090
around the map and go to all the

00:36:51,280 --> 00:36:56,490
different you know boards and challenges

00:36:55,090 --> 00:36:58,950
and puzzles and everything like that

00:36:56,490 --> 00:37:01,060
with the storyline and everything and

00:36:58,950 --> 00:37:06,220
along the way of course they're learning

00:37:01,060 --> 00:37:11,280
how to program in Perl and at the end of

00:37:06,220 --> 00:37:15,070
that game they will emerge as a

00:37:11,280 --> 00:37:16,900
certified youth Perl developer they will

00:37:15,070 --> 00:37:18,370
have a graduation they'll walk across

00:37:16,900 --> 00:37:19,480
the stage their parents will take a

00:37:18,370 --> 00:37:22,960
picture of them receiving the

00:37:19,480 --> 00:37:24,670
certificate from the instructors and you

00:37:22,960 --> 00:37:27,760
can have your level 1 certification your

00:37:24,670 --> 00:37:29,580
level 2 and so forth and by the time

00:37:27,760 --> 00:37:33,760
they finish their level whatever

00:37:29,580 --> 00:37:35,590
certification after a couple months in

00:37:33,760 --> 00:37:37,090
the program or a couple years depending

00:37:35,590 --> 00:37:39,490
on the speed that we go through this

00:37:37,090 --> 00:37:40,600
then they will be ready to go on to

00:37:39,490 --> 00:37:43,150
their college career

00:37:40,600 --> 00:37:46,510
and hopefully go into the workforce as a

00:37:43,150 --> 00:37:49,150
trained Perl programmer I'm gonna have

00:37:46,510 --> 00:37:53,320
to catch them young before they start

00:37:49,150 --> 00:37:53,650
into Python and that's just the bottom

00:37:53,320 --> 00:37:55,870
line

00:37:53,650 --> 00:37:57,580
I mean if we don't then there's going to

00:37:55,870 --> 00:38:00,340
be less and less and less people at

00:37:57,580 --> 00:38:04,470
every Perl conference every year until

00:38:00,340 --> 00:38:07,690
it's only crazy people who come and then

00:38:04,470 --> 00:38:10,720
well that will be the end of Perl so we

00:38:07,690 --> 00:38:13,930
don't want that to happen we need we

00:38:10,720 --> 00:38:19,330
need Perl teens and we need team Perl so

00:38:13,930 --> 00:38:21,820
this is our bottom-up approach and I

00:38:19,330 --> 00:38:23,620
expect everyone's assistance with every

00:38:21,820 --> 00:38:25,360
one of these slides that I'm going

00:38:23,620 --> 00:38:27,580
through now because goodnight there's no

00:38:25,360 --> 00:38:29,170
way that Austin Pro mongers can do this

00:38:27,580 --> 00:38:31,930
is something that all of us have to do

00:38:29,170 --> 00:38:33,910
in our own communities we'll provide the

00:38:31,930 --> 00:38:35,850
software and the and the program to do

00:38:33,910 --> 00:38:40,500
it

00:38:35,850 --> 00:38:42,850
top-down approach top-down approach

00:38:40,500 --> 00:38:45,220
remember those CEOs that are giving us

00:38:42,850 --> 00:38:48,580
all their money why are they doing that

00:38:45,220 --> 00:38:52,740
it's not because you can make cool CGI's

00:38:48,580 --> 00:38:55,720
and websites with Perl it's not because

00:38:52,740 --> 00:38:58,510
we're teaching the teenagers how to make

00:38:55,720 --> 00:39:02,020
games with parole it's not because we

00:38:58,510 --> 00:39:08,590
have some weird futuristic features and

00:39:02,020 --> 00:39:14,520
rocku Perl 6 clearly none of those

00:39:08,590 --> 00:39:14,520
things is getting us any money at all

00:39:15,090 --> 00:39:20,650
we're losing sponsors in case you guys

00:39:18,310 --> 00:39:25,450
didn't know that we're not gaining

00:39:20,650 --> 00:39:31,120
sponsors we're losing sponsors in the

00:39:25,450 --> 00:39:34,390
Perl community however if we just go

00:39:31,120 --> 00:39:39,880
ahead and jump on the latest industry

00:39:34,390 --> 00:39:44,260
trends we can reverse this course it is

00:39:39,880 --> 00:39:47,170
not too late and here it is what I think

00:39:44,260 --> 00:39:50,650
most of us suspected but now I'm telling

00:39:47,170 --> 00:39:54,420
you as an authority the latest industry

00:39:50,650 --> 00:39:57,039
trend is machine learning

00:39:54,420 --> 00:39:59,440
I've done a bit of this coding myself

00:39:57,039 --> 00:40:04,390
I'm certainly not the world expert in

00:39:59,440 --> 00:40:06,479
machine learning but this is this is the

00:40:04,390 --> 00:40:12,869
sort of stuff such as neural networks

00:40:06,479 --> 00:40:17,380
expert systems heuristics new types of

00:40:12,869 --> 00:40:18,989
AI systems that maybe y'all can come up

00:40:17,380 --> 00:40:23,170
with

00:40:18,989 --> 00:40:24,849
we need special-purpose systems like the

00:40:23,170 --> 00:40:27,719
things that drive those self-driving

00:40:24,849 --> 00:40:33,339
cars to try not to kill us all we need

00:40:27,719 --> 00:40:35,529
general-purpose strong AI like the thing

00:40:33,339 --> 00:40:39,339
that can go inside a robot that can you

00:40:35,529 --> 00:40:41,430
know be your personal assistant and you

00:40:39,339 --> 00:40:45,099
can see here at the bottom there are

00:40:41,430 --> 00:40:48,489
some examples of the current machine

00:40:45,099 --> 00:40:51,369
learning libraries most of which is

00:40:48,489 --> 00:40:54,699
Python related ok let's just keep going

00:40:51,369 --> 00:40:59,440
back to if you guys are not scared to

00:40:54,699 --> 00:41:02,229
death because of Python then you're

00:40:59,440 --> 00:41:05,859
you're not paying attention because all

00:41:02,229 --> 00:41:13,829
the funding is going to them and this is

00:41:05,859 --> 00:41:19,839
why Python will kill the Perl community

00:41:13,829 --> 00:41:24,430
because of funding and this is why we've

00:41:19,839 --> 00:41:26,440
got to get perl in machine learning now

00:41:24,430 --> 00:41:27,940
we're back again to performance ok great

00:41:26,440 --> 00:41:30,759
remember the compiler yeah I wrote it

00:41:27,940 --> 00:41:32,619
next Perl applications well we're going

00:41:30,759 --> 00:41:34,390
to really speed through this stuff we

00:41:32,619 --> 00:41:36,039
need applications for everyday users we

00:41:34,390 --> 00:41:37,839
do need applications for talent

00:41:36,039 --> 00:41:39,759
scientific users and we also need them

00:41:37,839 --> 00:41:41,979
for business users this is again like

00:41:39,759 --> 00:41:44,259
what do the everyday users do that sort

00:41:41,979 --> 00:41:45,699
of thing we already talked about them

00:41:44,259 --> 00:41:47,499
but I mean somebody's gonna have to

00:41:45,699 --> 00:41:48,759
write Perl games I'm working on a 3d

00:41:47,499 --> 00:41:50,650
rendering engine we're gonna use it for

00:41:48,759 --> 00:41:53,650
games someone's gonna have to write

00:41:50,650 --> 00:41:56,979
email and web stuff and you know trite

00:41:53,650 --> 00:41:58,900
everyday user things I'm more involved

00:41:56,979 --> 00:42:00,009
in scientific programming if you all

00:41:58,900 --> 00:42:01,930
haven't heard of the grand challenge

00:42:00,009 --> 00:42:03,489
problems go look it up this is really

00:42:01,930 --> 00:42:05,199
awesome it's like 80 or a hundred

00:42:03,489 --> 00:42:07,150
different problems and it's like you

00:42:05,199 --> 00:42:09,670
know curing cancer feeding the

00:42:07,150 --> 00:42:12,640
starving people of the world figuring

00:42:09,670 --> 00:42:15,010
out NP you know hard problems all these

00:42:12,640 --> 00:42:17,980
sort of impossible seeming things that

00:42:15,010 --> 00:42:21,550
can be solved using high-tech solutions

00:42:17,980 --> 00:42:23,350
and machine learning and Perl and of

00:42:21,550 --> 00:42:25,180
course business and corporate users this

00:42:23,350 --> 00:42:28,090
is going to be sort of like the slow

00:42:25,180 --> 00:42:29,680
money from the CEOs because they're not

00:42:28,090 --> 00:42:31,030
going to dump a lot of money like they

00:42:29,680 --> 00:42:33,730
are with machine learning but everybody

00:42:31,030 --> 00:42:35,260
does have to get office software so if

00:42:33,730 --> 00:42:37,810
we had an office suite written in Perl

00:42:35,260 --> 00:42:39,430
we could get money off of that and so

00:42:37,810 --> 00:42:43,030
forth CMS and other things like that

00:42:39,430 --> 00:42:45,580
Perl on the cloud I created a new cloud

00:42:43,030 --> 00:42:47,650
cloud for free we also have the new web

00:42:45,580 --> 00:42:49,960
pearl created by halka dan fling and

00:42:47,650 --> 00:42:52,000
we've got Pro Lido created by Flavio

00:42:49,960 --> 00:42:54,280
block all of these will probably be

00:42:52,000 --> 00:42:56,710
combined together somehow we're working

00:42:54,280 --> 00:42:59,560
on it well I mean it's not going to be

00:42:56,710 --> 00:43:01,390
an easy overnight thing but we do

00:42:59,560 --> 00:43:04,030
already have really good start for

00:43:01,390 --> 00:43:06,820
having access to Perl 5 and the compiler

00:43:04,030 --> 00:43:08,650
and Perl 6 and a bunch of other weird

00:43:06,820 --> 00:43:12,910
wacky awesome features in the cloud go

00:43:08,650 --> 00:43:14,680
check it out remember we have sent to us

00:43:12,910 --> 00:43:16,270
packages we also need to create Debian

00:43:14,680 --> 00:43:18,210
packages we also need to create Windows

00:43:16,270 --> 00:43:20,290
MSI packages we also need to create

00:43:18,210 --> 00:43:22,690
Macintosh packages we also need to

00:43:20,290 --> 00:43:26,230
create bsd packages we also need to

00:43:22,690 --> 00:43:27,850
create sent to us 6 & 8 packages we also

00:43:26,230 --> 00:43:29,620
need to create every version of Ubuntu

00:43:27,850 --> 00:43:31,810
packages we need to create every

00:43:29,620 --> 00:43:33,970
operating system every version we need

00:43:31,810 --> 00:43:35,800
to create every Sipan distribution every

00:43:33,970 --> 00:43:38,940
version when you create every version of

00:43:35,800 --> 00:43:43,630
Perl this is going to be a gigantic

00:43:38,940 --> 00:43:45,750
matrix of gazillions of packages so that

00:43:43,630 --> 00:43:50,200
whatever platform you're ever ever on

00:43:45,750 --> 00:43:52,510
you can just type whatever install and

00:43:50,200 --> 00:43:56,140
then the name of your Perl thing that

00:43:52,510 --> 00:43:57,580
you want and it will just work and I'm

00:43:56,140 --> 00:43:58,840
building the software to do this I've

00:43:57,580 --> 00:44:00,460
already got it working that's how I

00:43:58,840 --> 00:44:04,630
built a hundred and eighty something Red

00:44:00,460 --> 00:44:06,490
Hat packages with one command and I need

00:44:04,630 --> 00:44:08,770
help with this so whatever your

00:44:06,490 --> 00:44:12,100
operating system is come help me build

00:44:08,770 --> 00:44:15,640
those packages and the software for that

00:44:12,100 --> 00:44:18,730
is called CP and fpm here's a bunch of

00:44:15,640 --> 00:44:20,880
leagues for Perl 11 here's a bunch of

00:44:18,730 --> 00:44:23,370
links for / 11 so

00:44:20,880 --> 00:44:26,330
I I would request if you look at the

00:44:23,370 --> 00:44:28,770
bottom patreon.com slash our parole if

00:44:26,330 --> 00:44:32,730
everyone in this room I would humbly

00:44:28,770 --> 00:44:34,290
request that you commit one dollar one

00:44:32,730 --> 00:44:38,060
dollar one dollar one dollar one dollar

00:44:34,290 --> 00:44:40,560
one dollar one everybody gets one dollar

00:44:38,060 --> 00:44:41,670
to support our parole I would really

00:44:40,560 --> 00:44:42,780
appreciate it and it would make a

00:44:41,670 --> 00:44:45,180
difference because it shows how many

00:44:42,780 --> 00:44:48,270
people are supporting us so even if you

00:44:45,180 --> 00:44:50,130
please just put one dollar it will show

00:44:48,270 --> 00:44:51,990
an increase in the number of supporters

00:44:50,130 --> 00:44:53,700
and that's what we want everyone to see

00:44:51,990 --> 00:44:56,760
that people know about this stuff and

00:44:53,700 --> 00:44:59,700
that are supporting us financially even

00:44:56,760 --> 00:45:01,740
if it's just with one dollar and we will

00:44:59,700 --> 00:45:06,540
be supporting our Pro 5.0 releasing our

00:45:01,740 --> 00:45:07,980
Pro 5.0 to make Pearl great again on the

00:45:06,540 --> 00:45:09,480
4th of July this is our annual release

00:45:07,980 --> 00:45:11,100
cycle every year on the 4th of July we

00:45:09,480 --> 00:45:13,440
release our new version of our Pearl and

00:45:11,100 --> 00:45:15,600
I'll be trying to give a live demo maybe

00:45:13,440 --> 00:45:19,620
later today during lightning talks if we

00:45:15,600 --> 00:45:20,100
can we ran out of time but yeah 4th of

00:45:19,620 --> 00:45:22,320
July

00:45:20,100 --> 00:45:26,270
beers take explosions America our Pearl

00:45:22,320 --> 00:45:31,200
make Pro great again conclusion pearl

00:45:26,270 --> 00:45:33,660
needs you I can help come up with a

00:45:31,200 --> 00:45:35,190
master plan that's part of my job as

00:45:33,660 --> 00:45:35,850
leadership as the pumpkin for the

00:45:35,190 --> 00:45:38,190
compiler

00:45:35,850 --> 00:45:39,840
I cannot implement in this plane our

00:45:38,190 --> 00:45:42,230
Pearl needs you

00:45:39,840 --> 00:45:47,249
thank you very much

00:45:42,230 --> 00:45:47,249

YouTube URL: https://www.youtube.com/watch?v=NyphRo5roV0


