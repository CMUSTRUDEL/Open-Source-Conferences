Title: John Anderson - "C'mon Git Happy"
Publication date: 2019-06-20
Playlist: TPC 2019 in Pittsburgh
Description: 
	Git is an almost ubiquitous feature of modern Open Source software development -- the few OSS projects that use revision control software that _isn't_ Git are the exception that proves thes rule. In addition to this near universal adoption, Git is noteworthy for the extent to which many people completely dread having to use it. Are you consumed by "Git anxiety"? Do you come away from coding sessions feeling "Git stupid"? Come to this talk and learn a few helpful tips and tricks that will allow you to Git happy. I'll present a wide number of tricks and approaches that will allow you to work more effectively with Git, more quickly, and overall, with less Git drama. (Note: some Git experience will be expected, but if you can make a commit, you'll be able to keep up just fine!)
Captions: 
	00:00:00,000 --> 00:00:05,970
Tagg ask Larry I've been watching

00:00:04,830 --> 00:00:08,010
Twitter and they're not very many

00:00:05,970 --> 00:00:10,530
questions for Larry so if you all could

00:00:08,010 --> 00:00:11,730
you know get on that but also pay

00:00:10,530 --> 00:00:17,100
attention to my talk which is going to

00:00:11,730 --> 00:00:18,690
start in two minutes well then you

00:00:17,100 --> 00:00:24,689
should talk to somebody who lives in

00:00:18,690 --> 00:00:27,090
this century right I'm sorry you set it

00:00:24,689 --> 00:00:39,540
up I knock it down that's just how it

00:00:27,090 --> 00:00:41,610
works their seats down front if people

00:00:39,540 --> 00:00:43,170
want to not stand the entire talk if you

00:00:41,610 --> 00:00:44,610
do want to stand the entire talk that's

00:00:43,170 --> 00:00:46,820
good it's not gonna be that long of a

00:00:44,610 --> 00:00:46,820
talk

00:00:52,170 --> 00:00:57,579
I'd also like to apologize to anybody

00:00:55,000 --> 00:01:01,629
that I have inadvertently earworms with

00:00:57,579 --> 00:01:03,159
this intro graphic I promise you this is

00:01:01,629 --> 00:01:07,149
the last Partridge family related

00:01:03,159 --> 00:01:08,920
content in the talk if you were here for

00:01:07,149 --> 00:01:22,390
Partridge Family content yeah that guy's

00:01:08,920 --> 00:01:31,450
leaving he's like screw this I didn't

00:01:22,390 --> 00:01:37,539
understand that sir this is an Arby's

00:01:31,450 --> 00:01:41,340
oh wait that's a Twitter thing sorry

00:01:37,539 --> 00:01:41,340
you're not gonna understand that I

00:01:48,060 --> 00:01:51,670
believe sir that it's actually a

00:01:50,170 --> 00:01:54,369
traditional for you to sit in the third

00:01:51,670 --> 00:01:59,859
row second row is at the second row

00:01:54,369 --> 00:02:01,390
second row there's a seat I'm just

00:01:59,859 --> 00:02:05,680
waiting for the 19 to turn oh there it

00:02:01,390 --> 00:02:08,189
goes so welcome to come on get happy hi

00:02:05,680 --> 00:02:08,189
I'm John

00:02:09,720 --> 00:02:15,570
hi I go by Gene Hackman on the Internet

00:02:13,020 --> 00:02:17,460
including Twitter so if you're gonna

00:02:15,570 --> 00:02:19,200
tweet about this talk go ahead and tag

00:02:17,460 --> 00:02:21,330
me in please it's on every slide for

00:02:19,200 --> 00:02:25,110
your convenience let's start with a

00:02:21,330 --> 00:02:27,030
short audience survey who uses get so

00:02:25,110 --> 00:02:29,030
that's pretty much the room who doesn't

00:02:27,030 --> 00:02:31,800
use get that might be easier

00:02:29,030 --> 00:02:36,080
no hands have gone up for the home

00:02:31,800 --> 00:02:39,210
audience who identified as a get expert

00:02:36,080 --> 00:02:43,380
few hands go up no questions from

00:02:39,210 --> 00:02:46,890
anybody who raised their hands anybody

00:02:43,380 --> 00:02:48,900
in the room suffer from get anxiety many

00:02:46,890 --> 00:02:51,060
people have raised their hands I had to

00:02:48,900 --> 00:02:53,370
find get anxiety as the persistent

00:02:51,060 --> 00:02:55,440
nagging feeling anytime you're using it

00:02:53,370 --> 00:02:57,270
that you're gonna make a simple mistake

00:02:55,440 --> 00:02:58,740
that leads to breaking everything and

00:02:57,270 --> 00:03:00,300
being really embarrassed and maybe even

00:02:58,740 --> 00:03:01,980
having to ask one of those people who

00:03:00,300 --> 00:03:04,140
just raised their hands about being a

00:03:01,980 --> 00:03:05,820
get expert for help and then they're

00:03:04,140 --> 00:03:07,860
gonna come over to you like that guy in

00:03:05,820 --> 00:03:10,680
that video Randall showed yesterday and

00:03:07,860 --> 00:03:16,560
just grab your keyboard and angrily type

00:03:10,680 --> 00:03:18,209
something while saying this it gets

00:03:16,560 --> 00:03:20,130
easier once you get the basic idea that

00:03:18,209 --> 00:03:22,020
branches are homeomorphic into functors

00:03:20,130 --> 00:03:30,600
MacBook sub manifolds a Hamilton space

00:03:22,020 --> 00:03:33,140
of course so help me oh sorry so one

00:03:30,600 --> 00:03:37,470
more time who suffers from get anxiety

00:03:33,140 --> 00:03:39,930
many many people in my experience far

00:03:37,470 --> 00:03:42,209
too many people treat get like this like

00:03:39,930 --> 00:03:44,790
a black box so this is an xkcd it says

00:03:42,209 --> 00:03:46,140
this is get it tracks collaborative work

00:03:44,790 --> 00:03:48,989
on projects through a beautiful

00:03:46,140 --> 00:03:50,550
distributed graph theory tree model and

00:03:48,989 --> 00:03:53,700
the woman programmer says cool how do we

00:03:50,550 --> 00:03:55,470
use it no idea just memorize these shell

00:03:53,700 --> 00:03:56,790
commands and type them to sync up if you

00:03:55,470 --> 00:03:58,620
get errors save your work elsewhere

00:03:56,790 --> 00:04:04,860
delete the project and download a fresh

00:03:58,620 --> 00:04:06,330
copy people have memorized a few basic

00:04:04,860 --> 00:04:08,010
commands and they know how to do the

00:04:06,330 --> 00:04:09,510
common things that they need to do most

00:04:08,010 --> 00:04:10,860
days to get through their job but they

00:04:09,510 --> 00:04:13,890
don't actually understand what those

00:04:10,860 --> 00:04:15,750
commands are doing at this point get is

00:04:13,890 --> 00:04:17,489
far too important for most development

00:04:15,750 --> 00:04:20,130
workflows for folks to treat it like

00:04:17,489 --> 00:04:22,049
this now we can argue about whether or

00:04:20,130 --> 00:04:23,760
not things should be like this they

00:04:22,049 --> 00:04:25,490
shouldn't but fixing that

00:04:23,760 --> 00:04:27,690
at a scope this is a 20-minute talk

00:04:25,490 --> 00:04:28,620
we're dealing with what is and for

00:04:27,690 --> 00:04:30,510
better or worse you're better off

00:04:28,620 --> 00:04:33,060
understanding get more deeply than just

00:04:30,510 --> 00:04:35,940
having like an index card with how to

00:04:33,060 --> 00:04:37,740
make a commit written on it particularly

00:04:35,940 --> 00:04:39,930
if you're working with branches or

00:04:37,740 --> 00:04:41,790
remotes or collaborating with other

00:04:39,930 --> 00:04:43,860
people via get at all which you almost

00:04:41,790 --> 00:04:45,720
certainly are you need to be thinking

00:04:43,860 --> 00:04:49,860
about things in terms of the commit

00:04:45,720 --> 00:04:51,570
graph not graph like this when people

00:04:49,860 --> 00:04:53,390
talk about the get commit graph they're

00:04:51,570 --> 00:04:55,170
using graph and the mathematical sense

00:04:53,390 --> 00:04:59,930
mathematicians because they have to be

00:04:55,170 --> 00:05:02,700
fancy call this a plot graph like this

00:04:59,930 --> 00:05:04,590
specifically get stores things in the

00:05:02,700 --> 00:05:09,120
form of what's called a directed acyclic

00:05:04,590 --> 00:05:11,010
graph or dag anybody president who wants

00:05:09,120 --> 00:05:13,700
to be paid antek about the following

00:05:11,010 --> 00:05:17,400
explanation save it for afterwards

00:05:13,700 --> 00:05:20,160
graphs consist of nodes and edges that

00:05:17,400 --> 00:05:22,380
connect the nodes an edge typically will

00:05:20,160 --> 00:05:24,450
connect to nodes in a directed graph

00:05:22,380 --> 00:05:26,760
these edges have a direction they have a

00:05:24,450 --> 00:05:29,490
little arrow on them so they indicate a

00:05:26,760 --> 00:05:31,950
flow from one node to another the

00:05:29,490 --> 00:05:34,410
acyclic part means that if you follow a

00:05:31,950 --> 00:05:36,180
path starting at one node through the

00:05:34,410 --> 00:05:37,920
graph you won't ever end up in an

00:05:36,180 --> 00:05:39,600
infinite loop you won't ever end up

00:05:37,920 --> 00:05:41,100
repeating yourself you're always going

00:05:39,600 --> 00:05:44,150
to be able to get from one note one edge

00:05:41,100 --> 00:05:47,490
to the to the other edge of the graph

00:05:44,150 --> 00:05:51,180
git commit graphs don't look like this

00:05:47,490 --> 00:05:53,040
they look more like this so this is what

00:05:51,180 --> 00:05:55,740
a typical commit graph for a git flow

00:05:53,040 --> 00:05:57,450
style project might look like you've got

00:05:55,740 --> 00:05:59,160
a master branch that's had some hot

00:05:57,450 --> 00:06:01,050
fixes you've got a development branch

00:05:59,160 --> 00:06:02,910
that's kind of tracking ongoing work and

00:06:01,050 --> 00:06:06,930
you've got a feature branch branched off

00:06:02,910 --> 00:06:08,760
of the development branch so when you're

00:06:06,930 --> 00:06:11,790
making commits instead of thinking about

00:06:08,760 --> 00:06:13,740
oh I type git commit dash m and a

00:06:11,790 --> 00:06:15,600
message think about it in terms of

00:06:13,740 --> 00:06:17,940
adding a new node to the commit graph

00:06:15,600 --> 00:06:21,750
that's connected to the parent commit

00:06:17,940 --> 00:06:23,550
via a new edge and when you merge think

00:06:21,750 --> 00:06:25,770
in terms of that merge commit as being a

00:06:23,550 --> 00:06:28,530
new node that's connected to two parents

00:06:25,770 --> 00:06:30,150
via two new edges and one way to learn

00:06:28,530 --> 00:06:32,100
how to do this and pick up the habit of

00:06:30,150 --> 00:06:33,990
doing this is to look at the git commit

00:06:32,100 --> 00:06:35,550
graph and then do something and then

00:06:33,990 --> 00:06:36,240
look at the graph again and see how it's

00:06:35,550 --> 00:06:38,160
changed

00:06:36,240 --> 00:06:41,130
so how do you do that how do you

00:06:38,160 --> 00:06:43,470
visualize get commit graphs one option

00:06:41,130 --> 00:06:46,500
is this program called get K that dates

00:06:43,470 --> 00:06:48,120
from the dawn of time it's written in

00:06:46,500 --> 00:06:50,880
this thing called TK that you may have

00:06:48,120 --> 00:06:52,620
never heard of it may be a little bit of

00:06:50,880 --> 00:06:54,720
pain in the butt to get going but it

00:06:52,620 --> 00:06:55,860
produces a visual representation of the

00:06:54,720 --> 00:06:58,410
commit graph that looks like this

00:06:55,860 --> 00:06:59,699
anybody use get K still a few people

00:06:58,410 --> 00:07:03,000
throwing hands up

00:06:59,699 --> 00:07:05,669
another option is source tree this is a

00:07:03,000 --> 00:07:08,520
GUI git client that's available for free

00:07:05,669 --> 00:07:10,349
it's distributed by Atlassian they

00:07:08,520 --> 00:07:12,240
require that you register with them in

00:07:10,349 --> 00:07:13,889
order to use it either via your work

00:07:12,240 --> 00:07:16,050
using bitbucket are you having an

00:07:13,889 --> 00:07:18,960
accountant bitbucket cloud but it will

00:07:16,050 --> 00:07:20,910
also produce a nice GUI representation

00:07:18,960 --> 00:07:25,620
of the commit graph anybody use source

00:07:20,910 --> 00:07:27,419
tree few people there's a lot of GUI get

00:07:25,620 --> 00:07:29,729
clients and I try to avoid recommending

00:07:27,419 --> 00:07:30,870
them because I don't use any of them my

00:07:29,729 --> 00:07:33,360
preference is good old git log

00:07:30,870 --> 00:07:34,020
I mostly interact with git from the

00:07:33,360 --> 00:07:36,300
command line

00:07:34,020 --> 00:07:38,789
sometimes on remote servers so I need a

00:07:36,300 --> 00:07:40,380
CLI solution and get log works you can

00:07:38,789 --> 00:07:44,759
make get log produce something like this

00:07:40,380 --> 00:07:47,250
which is actually the same graph as here

00:07:44,759 --> 00:07:49,409
same repository basically the same

00:07:47,250 --> 00:07:51,780
section and you can see it looks roughly

00:07:49,409 --> 00:07:56,400
the same but individual commits are

00:07:51,780 --> 00:07:58,710
connected not to each other the way you

00:07:56,400 --> 00:08:01,139
get that output from git log is you say

00:07:58,710 --> 00:08:02,969
git log - - graph this is what makes it

00:08:01,139 --> 00:08:06,030
draw the the stuff down the left-hand

00:08:02,969 --> 00:08:09,180
margin - - a brief commit makes it use

00:08:06,030 --> 00:08:11,190
short little six or seven character

00:08:09,180 --> 00:08:14,340
Shaw's instead of the full ugly Shaw and

00:08:11,190 --> 00:08:15,930
then the formatting here with the colors

00:08:14,340 --> 00:08:19,440
and everything and where the stuff is

00:08:15,930 --> 00:08:20,940
there's a string in here that's a long

00:08:19,440 --> 00:08:22,620
and it's really ugly and it looks like

00:08:20,940 --> 00:08:26,250
shell escapes barf all over your

00:08:22,620 --> 00:08:29,880
terminal anybody else use get log like

00:08:26,250 --> 00:08:32,430
this many people okay I have this alias

00:08:29,880 --> 00:08:33,870
to get LG in my config it's probably one

00:08:32,430 --> 00:08:35,550
of my first most frequently used

00:08:33,870 --> 00:08:36,959
commands because I'm constantly like

00:08:35,550 --> 00:08:38,909
looking at the commit graph and going

00:08:36,959 --> 00:08:41,610
okay I need to merge this what's that

00:08:38,909 --> 00:08:44,339
going to do you can see the full

00:08:41,610 --> 00:08:47,579
invocation for this command in my git

00:08:44,339 --> 00:08:48,840
config repo at github jean hack get

00:08:47,579 --> 00:08:50,850
config include

00:08:48,840 --> 00:08:53,850
all the wine noise in the format string

00:08:50,850 --> 00:08:55,470
I will post these slides online and

00:08:53,850 --> 00:08:58,140
tweet it out on the conference hashtag

00:08:55,470 --> 00:08:59,940
at some point so don't worry about or

00:08:58,140 --> 00:09:01,910
you can come up to me and I will you

00:08:59,940 --> 00:09:06,720
know tell you where all this stuff is so

00:09:01,910 --> 00:09:09,540
aliased wait what it allows you to

00:09:06,720 --> 00:09:13,740
define aliases that you can then invoke

00:09:09,540 --> 00:09:16,589
via get anybody use get aliases many

00:09:13,740 --> 00:09:19,020
people cool so for those of you who

00:09:16,589 --> 00:09:22,110
don't know aliases live in a file called

00:09:19,020 --> 00:09:25,080
git config the dot git config file lives

00:09:22,110 --> 00:09:29,130
in your home directory it's an ini

00:09:25,080 --> 00:09:34,560
format file because Len is's taste is

00:09:29,130 --> 00:09:37,320
questionable you have a section called

00:09:34,560 --> 00:09:39,180
alias and then you can define things and

00:09:37,320 --> 00:09:40,950
map them to commands so I can't ever

00:09:39,180 --> 00:09:43,350
remember whether cherry-pick has a

00:09:40,950 --> 00:09:45,390
hyphen in it or not so I just have an

00:09:43,350 --> 00:09:48,390
alias that eliminates the ambiguity I

00:09:45,390 --> 00:09:49,980
like my commit command to be verbose and

00:09:48,390 --> 00:09:51,690
I don't like to type out commits so I

00:09:49,980 --> 00:09:54,150
just type get CI and it gives me

00:09:51,690 --> 00:09:57,089
Burroughs commit you can actually define

00:09:54,150 --> 00:09:59,040
aliases that run shell commands for you

00:09:57,089 --> 00:10:01,260
and the way you do that is by putting a

00:09:59,040 --> 00:10:03,450
bang at the beginning of the command if

00:10:01,260 --> 00:10:07,170
you want it to take additional commands

00:10:03,450 --> 00:10:08,520
you have to do it and I'm sorry if you

00:10:07,170 --> 00:10:11,010
don't understand I'm about to say I'll

00:10:08,520 --> 00:10:12,450
explain later this is ugly as hell but

00:10:11,010 --> 00:10:14,670
basically you define a shell function

00:10:12,450 --> 00:10:16,290
that you then immediately invoke so

00:10:14,670 --> 00:10:19,710
we're defining a function here called

00:10:16,290 --> 00:10:22,380
F that is going to run get BR - she's

00:10:19,710 --> 00:10:23,670
going to delete the you're gonna give it

00:10:22,380 --> 00:10:24,839
a branch name it's gonna delete that

00:10:23,670 --> 00:10:26,730
branch and then it's going to delete

00:10:24,839 --> 00:10:28,110
that branch on the remote and we're

00:10:26,730 --> 00:10:35,160
gonna invoke that function I call that

00:10:28,110 --> 00:10:37,200
nuke so get aliases it's a great way to

00:10:35,160 --> 00:10:39,600
save complicated things that you do too

00:10:37,200 --> 00:10:41,310
often but not too often to easily recall

00:10:39,600 --> 00:10:44,370
them and you're tired of just hitting up

00:10:41,310 --> 00:10:46,589
arrow in your shell one fairly annoying

00:10:44,370 --> 00:10:49,260
limitation of this is that you can't re

00:10:46,589 --> 00:10:52,290
alias things to the names of built-in

00:10:49,260 --> 00:10:55,020
commands so you can't just say I always

00:10:52,290 --> 00:10:57,839
want to do - - graft with git log get

00:10:55,020 --> 00:10:59,250
will ignore this this is annoying there

00:10:57,839 --> 00:11:00,390
are workarounds again it's only a

00:10:59,250 --> 00:11:02,640
20-minute talk I'm not going to talk

00:11:00,390 --> 00:11:05,070
about them while I'm talking about the

00:11:02,640 --> 00:11:07,470
get config file who has struggled with

00:11:05,070 --> 00:11:09,690
maintaining the correct email usage in

00:11:07,470 --> 00:11:14,310
your git config in your git repos across

00:11:09,690 --> 00:11:16,230
work and open source there's a thing

00:11:14,310 --> 00:11:18,420
that nobody talks about ever called

00:11:16,230 --> 00:11:20,010
include if that's a directive that you

00:11:18,420 --> 00:11:24,120
can use in your git config files that's

00:11:20,010 --> 00:11:27,270
been and get since 2.13 you use it like

00:11:24,120 --> 00:11:29,340
this so you say include if and then any

00:11:27,270 --> 00:11:31,590
git project underneath the project

00:11:29,340 --> 00:11:34,560
directory will include this additional

00:11:31,590 --> 00:11:36,240
config in it so you can split you can

00:11:34,560 --> 00:11:38,040
have you know if you've got your work

00:11:36,240 --> 00:11:39,870
and open source stuff split into

00:11:38,040 --> 00:11:42,600
different directory trees you can

00:11:39,870 --> 00:11:44,640
include different fragment files and set

00:11:42,600 --> 00:11:46,650
a different email address without having

00:11:44,640 --> 00:11:49,950
to set that individually in every repo

00:11:46,650 --> 00:11:51,240
which is a giant pain in the ass alright

00:11:49,950 --> 00:11:53,400
so once you've started to think about

00:11:51,240 --> 00:11:55,590
operations in your git repositories in

00:11:53,400 --> 00:11:59,010
terms of the commit graph the next thing

00:11:55,590 --> 00:12:00,900
to do is to learn rebase the best way to

00:11:59,010 --> 00:12:03,120
do this is to either sit down and just

00:12:00,900 --> 00:12:04,860
read the man page for git rebase it's

00:12:03,120 --> 00:12:07,170
actually pretty clear and well-written

00:12:04,860 --> 00:12:09,330
or you know the next time I offer the

00:12:07,170 --> 00:12:10,530
class on it take the class you missed

00:12:09,330 --> 00:12:13,830
your chance

00:12:10,530 --> 00:12:16,650
learn playing git rebase first and then

00:12:13,830 --> 00:12:19,730
learn interactive rebase later you are

00:12:16,650 --> 00:12:19,730
gonna make mistakes

00:12:24,519 --> 00:12:31,610
when you make a mistake never ever ever

00:12:27,199 --> 00:12:33,949
delete the messed up repository rename

00:12:31,610 --> 00:12:37,939
the messed up repository I used like to

00:12:33,949 --> 00:12:41,360
use a dot EFT prefix to disambiguate

00:12:37,939 --> 00:12:43,100
this a real boss level move if you know

00:12:41,360 --> 00:12:45,110
what this means is to add that effed up

00:12:43,100 --> 00:12:48,410
repository as a remote to the clean

00:12:45,110 --> 00:12:49,970
thing that you check out once you have

00:12:48,410 --> 00:12:51,649
one messed up repository you're in a

00:12:49,970 --> 00:12:54,259
perfect frame of mind to learn get ref

00:12:51,649 --> 00:12:58,100
log who-knows-what ref Laguz and get

00:12:54,259 --> 00:12:59,689
many people wow rep luck shows all the

00:12:58,100 --> 00:13:01,459
commits in the repository even if

00:12:59,689 --> 00:13:05,239
they've somehow been disconnected from

00:13:01,459 --> 00:13:07,459
the commit graph this is my dog Sammy

00:13:05,239 --> 00:13:12,259
Sammy suffers from an unfortunate

00:13:07,459 --> 00:13:14,899
condition called resting stone face what

00:13:12,259 --> 00:13:16,670
ref log allows you to do is pretty much

00:13:14,899 --> 00:13:18,499
anything you've ever committed even if

00:13:16,670 --> 00:13:21,410
you think you've lost it you can get it

00:13:18,499 --> 00:13:24,679
back at least up until the point so real

00:13:21,410 --> 00:13:26,509
quick example if we have this directory

00:13:24,679 --> 00:13:28,100
structure we've got a feature of ranch

00:13:26,509 --> 00:13:30,470
CBA and your boss comes over and says

00:13:28,100 --> 00:13:32,149
hey that that B commit it needs to go

00:13:30,470 --> 00:13:34,549
it's no good get it another rebase it

00:13:32,149 --> 00:13:37,579
out of the way so you rebase to drop the

00:13:34,549 --> 00:13:40,999
b commit and you end up with this repo

00:13:37,579 --> 00:13:42,559
graph structure b's gone your boss comes

00:13:40,999 --> 00:13:44,839
back and it's like what happened to B

00:13:42,559 --> 00:13:46,959
and you're like boss I deleted it and

00:13:44,839 --> 00:13:52,069
they really know I wanted you to delete

00:13:46,959 --> 00:13:53,600
G so you need to get B back you can find

00:13:52,069 --> 00:13:55,910
be in the ref log and you do this by

00:13:53,600 --> 00:13:57,819
just running git ref log and it'll show

00:13:55,910 --> 00:14:00,019
you like every commit you've ever made

00:13:57,819 --> 00:14:03,799
page through that find the one that says

00:14:00,019 --> 00:14:06,649
B note the Shaw cherry-pick the commit

00:14:03,799 --> 00:14:09,009
back into the graph using that sha boom

00:14:06,649 --> 00:14:10,819
now B's back it's not the right order

00:14:09,009 --> 00:14:12,740
rebasing it back into the original

00:14:10,819 --> 00:14:16,809
commit order is left as an exercise for

00:14:12,740 --> 00:14:22,850
the attendees but that's how you fix

00:14:16,809 --> 00:14:24,499
dropping a commit in summary think about

00:14:22,850 --> 00:14:26,509
your get operations in terms of what

00:14:24,499 --> 00:14:28,970
you're doing to the commit graph like

00:14:26,509 --> 00:14:30,199
strive for that that will is the best

00:14:28,970 --> 00:14:32,779
way to understand what's actually going

00:14:30,199 --> 00:14:37,280
on alias things to make your life easier

00:14:32,779 --> 00:14:39,140
learn rebase learn ref log don't panic

00:14:37,280 --> 00:14:42,530
pretty much any mistake you make that

00:14:39,140 --> 00:14:44,570
you that you've committed is fixable be

00:14:42,530 --> 00:14:47,690
a combination of the ref log and a clean

00:14:44,570 --> 00:14:50,360
check out finally if you're the get

00:14:47,690 --> 00:14:51,380
expert in your office or project and I

00:14:50,360 --> 00:14:53,150
know I've been making fun of you guys

00:14:51,380 --> 00:14:57,230
all along but it's not intentional

00:14:53,150 --> 00:14:58,760
wait it's not malicious if you're the

00:14:57,230 --> 00:15:00,230
get expert if you're the person that

00:14:58,760 --> 00:15:03,350
people come to you for help when people

00:15:00,230 --> 00:15:05,540
come to you for help don't sigh don't be

00:15:03,350 --> 00:15:08,240
grumpy at them don't grab their keyboard

00:15:05,540 --> 00:15:10,340
and type a bunch of stuff sit down with

00:15:08,240 --> 00:15:13,580
them walk them through visualizing the

00:15:10,340 --> 00:15:16,130
commit graph explain how it's a fix the

00:15:13,580 --> 00:15:19,760
problem and let them type out the

00:15:16,130 --> 00:15:21,230
solution Thanks thanks all if you're

00:15:19,760 --> 00:15:23,120
coming thanks to the organizers for

00:15:21,230 --> 00:15:24,800
accepting the talk thanks to my employer

00:15:23,120 --> 00:15:27,740
for paying to send me here to give it to

00:15:24,800 --> 00:15:29,180
you we are looking to hire senior QA and

00:15:27,740 --> 00:15:31,160
a front-end developer we don't have job

00:15:29,180 --> 00:15:33,350
ads up yet but hit me up I'm here for

00:15:31,160 --> 00:15:36,700
another day or so and I'd be happy to

00:15:33,350 --> 00:15:36,700
take questions if I have any time left

00:15:39,420 --> 00:15:48,540

YouTube URL: https://www.youtube.com/watch?v=oEKXV-_o3YQ


