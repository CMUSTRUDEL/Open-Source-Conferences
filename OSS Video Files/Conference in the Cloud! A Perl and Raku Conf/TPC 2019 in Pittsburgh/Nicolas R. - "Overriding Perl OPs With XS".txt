Title: Nicolas R. - "Overriding Perl OPs With XS"
Publication date: 2019-06-20
Playlist: TPC 2019 in Pittsburgh
Description: 
	This talk will show how it's possible to mock PerlOps using XS and provide a convenient Pure Perl hook for each of the file check -X.

Overload::FileCheck provides a way to mock one or more file checks. It is also possible to mock stat/lstat functions using "mock_all_from_stat" and let Overload::FileCheck mock for you for any other -X checks.

Slides:
https://www.slideshare.net/NicolasRochelemagne/overloading-perl-ops-using-xs
Captions: 
	00:00:00,469 --> 00:00:08,760
okay okay so the the slides are online

00:00:06,259 --> 00:00:11,099
so if something is wrong you cannot read

00:00:08,760 --> 00:00:13,290
them you can get them from that URL

00:00:11,099 --> 00:00:14,910
there but you can also probably download

00:00:13,290 --> 00:00:18,240
them from the sched website I just

00:00:14,910 --> 00:00:21,180
uploaded a PDF there so the talk today

00:00:18,240 --> 00:00:25,010
is overloading tell ops using XS but

00:00:21,180 --> 00:00:25,010
first a small introduction about myself

00:00:29,450 --> 00:00:32,500
[Music]

00:00:47,360 --> 00:00:54,030
so quick introduction I'm Niklas I'm

00:00:50,460 --> 00:00:57,750
also known online as atomic on Twitter

00:00:54,030 --> 00:01:00,420
Gator Banda also Japan I'm working for

00:00:57,750 --> 00:01:03,809
cPanel and we're always looking to add

00:01:00,420 --> 00:01:06,000
new talent to our team but the talk

00:01:03,809 --> 00:01:07,799
today is overloading Perl ops using

00:01:06,000 --> 00:01:10,650
excess so let's focus a little on the

00:01:07,799 --> 00:01:11,850
title we can pretty cut that part in

00:01:10,650 --> 00:01:14,159
three piece that's what we're going to

00:01:11,850 --> 00:01:18,420
do during that presentation there so

00:01:14,159 --> 00:01:21,150
first of overloading then pair ups and

00:01:18,420 --> 00:01:22,680
then excess okay so overloading is

00:01:21,150 --> 00:01:25,080
probably one of the most common

00:01:22,680 --> 00:01:28,049
techniques you are using while you are

00:01:25,080 --> 00:01:30,180
testing it's also known mocking most of

00:01:28,049 --> 00:01:32,670
the time the easiest way to mock a

00:01:30,180 --> 00:01:37,890
function is probably to simply overwrite

00:01:32,670 --> 00:01:40,710
the sub like this for example were very

00:01:37,890 --> 00:01:43,909
you are using more and more the test

00:01:40,710 --> 00:01:46,020
mock module which provides a very nice

00:01:43,909 --> 00:01:48,630
function which was added recently I

00:01:46,020 --> 00:01:50,970
think over the last year then we define

00:01:48,630 --> 00:01:53,130
which we simply croak if you try to

00:01:50,970 --> 00:01:55,920
define a function that doesn't exist and

00:01:53,130 --> 00:01:59,159
it also take into account the arm

00:01:55,920 --> 00:02:00,750
returns the is our thing so you can we

00:01:59,159 --> 00:02:03,240
define a function that only defined by

00:02:00,750 --> 00:02:06,270
one of your parents okay dot that's

00:02:03,240 --> 00:02:06,780
overloading para oops it's something

00:02:06,270 --> 00:02:09,000
else

00:02:06,780 --> 00:02:12,650
here I'm showing a simple extract of

00:02:09,000 --> 00:02:16,129
what we can name a pair of three okay

00:02:12,650 --> 00:02:18,170
so that 40 obscure from many of you will

00:02:16,129 --> 00:02:22,489
try to make that thing less obscure this

00:02:18,170 --> 00:02:26,569
is a simple program a equal beep is a

00:02:22,489 --> 00:02:29,709
number we are just using one of the beam

00:02:26,569 --> 00:02:34,010
module here tears to show us the

00:02:29,709 --> 00:02:36,470
execution order of the up tree so I also

00:02:34,010 --> 00:02:39,620
strip some useless information for us

00:02:36,470 --> 00:02:44,150
there but what we can see we have some

00:02:39,620 --> 00:02:46,340
up beam up on we have some value on the

00:02:44,150 --> 00:02:49,579
side mainly working on the stack the

00:02:46,340 --> 00:02:51,109
stash be the integral 42 then we are

00:02:49,579 --> 00:02:53,959
calling the add function and we are

00:02:51,109 --> 00:02:59,000
going to assign it to the stash to the

00:02:53,959 --> 00:03:01,730
ASB slot in the stash a ok so there is

00:02:59,000 --> 00:03:03,650
more than one way to printer up tree you

00:03:01,730 --> 00:03:06,140
can also use concise which will give you

00:03:03,650 --> 00:03:14,989
much more valuable information on here

00:03:06,140 --> 00:03:18,799
the OP are buried in the data mapping of

00:03:14,989 --> 00:03:21,019
every letter which correspond to one up

00:03:18,799 --> 00:03:25,190
so this is exactly the same thing and we

00:03:21,019 --> 00:03:27,260
can can see the same so for the purpose

00:03:25,190 --> 00:03:32,599
of that work I will mainly focus on a

00:03:27,260 --> 00:03:35,750
single hub on the easiest one from the

00:03:32,599 --> 00:03:39,500
Appel source code is the reference up

00:03:35,750 --> 00:03:56,900
and then record so here the simple code

00:03:39,500 --> 00:03:59,060
is just the estrogen so but there is

00:03:56,900 --> 00:04:03,410
more than one up in there in Perl on

00:03:59,060 --> 00:04:05,449
this change over version over time some

00:04:03,410 --> 00:04:06,889
of them are there for very very long

00:04:05,449 --> 00:04:10,730
time and they will pre not move but

00:04:06,889 --> 00:04:14,180
every up mainly as a mapping to an

00:04:10,730 --> 00:04:16,470
integral someone a Newman C on what we

00:04:14,180 --> 00:04:19,260
usually you up your ways

00:04:16,470 --> 00:04:21,600
maximum value at the O so you always

00:04:19,260 --> 00:04:26,490
think that make it once there but you

00:04:21,600 --> 00:04:28,890
have many many up if you continue

00:04:26,490 --> 00:04:31,470
digging into inside the pair source code

00:04:28,890 --> 00:04:33,870
what you could find is all this up the

00:04:31,470 --> 00:04:35,100
other name okay they have one integral

00:04:33,870 --> 00:04:38,100
value but they also have the name of

00:04:35,100 --> 00:04:41,310
that name is stored in one global list

00:04:38,100 --> 00:04:44,490
name PL out name so you can see ordered

00:04:41,310 --> 00:04:46,650
the name of the up there you also

00:04:44,490 --> 00:04:53,880
discover that there is another list name

00:04:46,650 --> 00:04:55,950
PL p p @ editor that also contain in

00:04:53,880 --> 00:04:58,640
fact a pointer to a function but

00:04:55,950 --> 00:05:02,130
something name underscore PP underscore

00:04:58,640 --> 00:05:08,460
the name of the job okay so what is

00:05:02,130 --> 00:05:11,850
spelled PP g VAR g g element this is the

00:05:08,460 --> 00:05:16,200
OP function that's going to be executed

00:05:11,850 --> 00:05:20,820
when you are going to run that up y PP

00:05:16,200 --> 00:05:22,500
mainly because you are pushing some

00:05:20,820 --> 00:05:25,290
value from the stack and then you are

00:05:22,500 --> 00:05:28,490
putting them back from most cases so

00:05:25,290 --> 00:05:33,919
it's a push pop operation on the stack

00:05:28,490 --> 00:05:39,330
if you gripe where are these P P define

00:05:33,919 --> 00:05:41,220
they are no first if you should read

00:05:39,330 --> 00:05:43,740
propel underscore PP you will not find

00:05:41,220 --> 00:05:48,360
them why because you have a macro named

00:05:43,740 --> 00:05:50,880
PP everyone is illegal to define one up

00:05:48,360 --> 00:05:52,710
not require to you can do it manually

00:05:50,880 --> 00:05:56,970
but everyone using by commercial is

00:05:52,710 --> 00:06:01,200
using that motto so that P P P P numbers

00:05:56,970 --> 00:06:03,600
for us is going to define the pop ups so

00:06:01,200 --> 00:06:08,479
that will create a function then pair

00:06:03,600 --> 00:06:08,479
auto-scroll BPM those four apps okay

00:06:09,510 --> 00:06:17,340
of them in the PP dot see where they are

00:06:13,910 --> 00:06:19,530
defined but what you can see is that

00:06:17,340 --> 00:06:21,810
they're not only defining PP dot see

00:06:19,530 --> 00:06:26,370
some orders if I defined some different

00:06:21,810 --> 00:06:29,160
herbs for different behaviors so we also

00:06:26,370 --> 00:06:29,740
have P pieces PP out and we're going to

00:06:29,160 --> 00:06:36,700
also lay

00:06:29,740 --> 00:06:40,090
focus on one of the PBRs if one so if we

00:06:36,700 --> 00:06:45,280
go back if we sum up all of this if we

00:06:40,090 --> 00:06:50,010
use concise on back rajala F we can see

00:06:45,280 --> 00:06:54,490
our F word up which has its own code

00:06:50,010 --> 00:06:58,090
defined as 20 we add one function for

00:06:54,490 --> 00:07:01,030
the estrogen define like this on that

00:06:58,090 --> 00:07:05,560
function is then going to be plugged

00:07:01,030 --> 00:07:13,570
into the 20th of that array so we'll be

00:07:05,560 --> 00:07:17,980
able to call it later at runtime so here

00:07:13,570 --> 00:07:20,710
is the code for the up backslash to get

00:07:17,980 --> 00:07:26,470
a reference on something mainly you get

00:07:20,710 --> 00:07:35,050
a pointer on your stack you try to

00:07:26,470 --> 00:07:38,020
reference story back to the stack and

00:07:35,050 --> 00:07:40,180
then you can return the other is just up

00:07:38,020 --> 00:07:43,330
you can find in Perl I cannot find any

00:07:40,180 --> 00:07:46,240
more simpler than this so this is the

00:07:43,330 --> 00:07:48,670
app you have them every up we'll just do

00:07:46,240 --> 00:07:50,830
taking put on the stack play with it and

00:07:48,670 --> 00:07:57,580
then we turn one or more on some time

00:07:50,830 --> 00:08:02,020
none okay so we are saying what now

00:07:57,580 --> 00:08:05,620
overloading pair herbs that excess in

00:08:02,020 --> 00:08:08,400
fact we just saw excess but probably we

00:08:05,620 --> 00:08:11,590
should see a little more than this but

00:08:08,400 --> 00:08:16,090
why are we overloading pearl herbs using

00:08:11,590 --> 00:08:19,060
excess why should you do that because

00:08:16,090 --> 00:08:20,470
sum up like die dies one upward so

00:08:19,060 --> 00:08:23,320
that's really one of the most common one

00:08:20,470 --> 00:08:26,380
we are using you can simply override it

00:08:23,320 --> 00:08:27,850
using global chord I on set your own

00:08:26,380 --> 00:08:29,980
custom function there and that would

00:08:27,850 --> 00:08:33,940
work you are working the jobs you don't

00:08:29,980 --> 00:08:36,850
need this as for that so is one attempt

00:08:33,940 --> 00:08:40,210
for example I set a function and to

00:08:36,850 --> 00:08:42,650
overwrite die saying a do not die and

00:08:40,210 --> 00:08:45,020
still alive but the prime is if I

00:08:42,650 --> 00:08:49,640
by here you can see if I run that

00:08:45,020 --> 00:08:52,640
program I'm clearly going to die why not

00:08:49,640 --> 00:08:56,180
someone I pray someone know that the

00:08:52,640 --> 00:08:57,950
object reason is the oak tree was

00:08:56,180 --> 00:09:02,120
already built when I would define that

00:08:57,950 --> 00:09:04,100
function if I check the of tree the only

00:09:02,120 --> 00:09:09,020
line that matters there when I depart is

00:09:04,100 --> 00:09:12,170
I can see my own era die which is going

00:09:09,020 --> 00:09:15,710
to take this is beyond at this time is

00:09:12,170 --> 00:09:19,610
going to be I'm going to clearly die

00:09:15,710 --> 00:09:23,330
that's the goal of the up to so how do I

00:09:19,610 --> 00:09:27,220
serve that to serve this mainly you

00:09:23,330 --> 00:09:31,460
overwrite that function at compile time

00:09:27,220 --> 00:09:35,260
so now it works just adding a big

00:09:31,460 --> 00:09:39,140
envelope run that over overload on Motty

00:09:35,260 --> 00:09:41,630
will now make your code continue the die

00:09:39,140 --> 00:09:46,520
is not dying just a still alive we are

00:09:41,630 --> 00:09:49,010
reaching the or not line and if we

00:09:46,520 --> 00:09:52,459
investigate what looks like the off tree

00:09:49,010 --> 00:09:55,610
we can now see that the off tree is

00:09:52,459 --> 00:09:57,890
going also to take this is beyond

00:09:55,610 --> 00:10:00,950
straight there was going to pass it

00:09:57,890 --> 00:10:06,980
through that cylinder on not our up

00:10:00,950 --> 00:10:10,010
anymore so why should you use excess to

00:10:06,980 --> 00:10:13,580
overload up because in some case on this

00:10:10,010 --> 00:10:16,520
is one of them I don't know on I think

00:10:13,580 --> 00:10:20,779
it's not possible to overload that kind

00:10:16,520 --> 00:10:23,029
of tell up using non excess how do you

00:10:20,779 --> 00:10:29,630
over during your unit test I'll do your

00:10:23,029 --> 00:10:50,750
book - E - f of whatever so if you check

00:10:29,630 --> 00:10:54,829
- so pray now let's try to dig into more

00:10:50,750 --> 00:10:56,420
excess code time for our demo it's not

00:10:54,829 --> 00:10:58,640
really mo it's more

00:10:56,420 --> 00:11:02,600
so I don't know if we're under there so

00:10:58,640 --> 00:11:05,930
what just going to go to view so this is

00:11:02,600 --> 00:11:08,660
a branch of the overload file check

00:11:05,930 --> 00:11:12,110
module named emo for the purpose of

00:11:08,660 --> 00:11:16,190
today that was oversimplified to show

00:11:12,110 --> 00:11:18,260
you how we do this using access and I'm

00:11:16,190 --> 00:11:23,030
only going to focus on - yon the minimal

00:11:18,260 --> 00:11:27,890
thing so can you read it ok so this is a

00:11:23,030 --> 00:11:31,220
PN Phi that is a nexus 5 is loaded so

00:11:27,890 --> 00:11:33,260
far easy ok so I've got one excess file

00:11:31,220 --> 00:11:35,510
unloaded on what we want to do we want

00:11:33,260 --> 00:11:38,090
to provide a custom API where we can say

00:11:35,510 --> 00:11:42,190
please mock - II and please stop

00:11:38,090 --> 00:11:47,470
knocking - e so we will have a function

00:11:42,190 --> 00:11:52,190
then mock file check that will take a

00:11:47,470 --> 00:11:55,010
type as first argument and then a custom

00:11:52,190 --> 00:12:01,130
function which means a user could use

00:11:55,010 --> 00:12:03,200
pure pearl - not that - e behavior so

00:12:01,130 --> 00:12:05,720
that's checked is there of the stub is

00:12:03,200 --> 00:12:13,780
there what we are going to do what are

00:12:05,720 --> 00:12:17,510
doing first check if it's known to get

00:12:13,780 --> 00:12:20,360
number in that the case the serve we are

00:12:17,510 --> 00:12:23,900
there we are going to store it in one

00:12:20,360 --> 00:12:26,810
local us that was definable okay so we

00:12:23,900 --> 00:12:30,620
store that sub it could be an array also

00:12:26,810 --> 00:12:33,470
because that Ock type is the number our

00:12:30,620 --> 00:12:35,890
XS function say a and I want to bugged

00:12:33,470 --> 00:12:38,960
actually that's what that function does

00:12:35,890 --> 00:12:40,340
same thing for unmod you unlock it you

00:12:38,960 --> 00:12:42,770
don't need to provide your function

00:12:40,340 --> 00:12:47,240
there but maybe you just check if

00:12:42,770 --> 00:12:48,950
something in your case you just figure

00:12:47,240 --> 00:12:52,580
out the excess code to say I want to

00:12:48,950 --> 00:12:56,000
start working that function okay that's

00:12:52,580 --> 00:12:58,040
all we are there and then later at

00:12:56,000 --> 00:13:01,460
runtime one welcome to run - e on the

00:12:58,040 --> 00:13:03,890
excess code we say oh that is much the

00:13:01,460 --> 00:13:07,110
excess cord will trigger that check

00:13:03,890 --> 00:13:10,380
function come there with some

00:13:07,110 --> 00:13:13,650
we say the uptime on the file involved

00:13:10,380 --> 00:13:17,070
in your arguments on we dug for that

00:13:13,650 --> 00:13:20,430
function we take care of calling the

00:13:17,070 --> 00:13:22,320
knock function and we turn it on the

00:13:20,430 --> 00:13:25,140
cool thing is I think there is a very

00:13:22,320 --> 00:13:27,090
good habit to use constant when you

00:13:25,140 --> 00:13:29,160
start returning it one two three four

00:13:27,090 --> 00:13:30,900
five six or more from your function

00:13:29,160 --> 00:13:34,590
using constant is always a very good

00:13:30,900 --> 00:13:36,060
behavior because at least human readable

00:13:34,590 --> 00:13:38,400
under under cluding any performance

00:13:36,060 --> 00:13:45,390
doing this so this is what's doing there

00:13:38,400 --> 00:13:47,880
so we have a few so that's also a

00:13:45,390 --> 00:13:51,810
parallel file now go back let's let's

00:13:47,880 --> 00:13:53,370
check our excess code okay when you

00:13:51,810 --> 00:13:56,300
start winning one excess code what I

00:13:53,370 --> 00:13:58,770
usually do I go to on uncheck the boot

00:13:56,300 --> 00:14:02,220
the boot is what's happening when you

00:13:58,770 --> 00:14:06,300
load your excess file so mainly what

00:14:02,220 --> 00:14:09,660
goes there we just rate allocated memory

00:14:06,300 --> 00:14:18,000
for that we find somewhere else where we

00:14:09,660 --> 00:14:20,220
are going to store it to the stash check

00:14:18,000 --> 00:14:22,710
which is where every element our store

00:14:20,220 --> 00:14:26,130
in that package namespace may needs a

00:14:22,710 --> 00:14:28,890
hash for that name on we are going then

00:14:26,130 --> 00:14:30,060
to define some constants this is our

00:14:28,890 --> 00:14:33,330
check is true

00:14:30,060 --> 00:14:35,280
check his force okay on the cool thing

00:14:33,330 --> 00:14:44,760
is for example we are also going to

00:14:35,280 --> 00:14:47,190
recycle so what you are finding some

00:14:44,760 --> 00:14:50,910
constant okay on what you are doing

00:14:47,190 --> 00:15:00,330
there is a good time we are going to say

00:14:50,910 --> 00:15:04,080
I want to name of FG is which the week

00:15:00,330 --> 00:15:07,770
the code of FG is so that's the enemy in

00:15:04,080 --> 00:15:10,740
see that number there I'm going for this

00:15:07,770 --> 00:15:12,030
up I'm going to use that April as my

00:15:10,740 --> 00:15:13,740
custom overload

00:15:12,030 --> 00:15:16,890
mainly because that function is mainly

00:15:13,740 --> 00:15:21,230
returning yes or no some order checked

00:15:16,890 --> 00:15:21,230
like - s will not return only yes or no

00:15:21,310 --> 00:15:27,490
okay so you're pretty

00:15:24,020 --> 00:15:30,770
wonder what looks like that function

00:15:27,490 --> 00:15:32,840
it's a macro so mainly everything you do

00:15:30,770 --> 00:15:35,870
in peril is macro macro macro in your

00:15:32,840 --> 00:15:54,890
learning macro and this is cool

00:15:35,870 --> 00:16:00,950
so that macro was going to do good many

00:15:54,890 --> 00:16:02,480
were saying the string oft is as provide

00:16:00,950 --> 00:16:04,460
you with this one because every tell

00:16:02,480 --> 00:16:06,350
Russian could not different values we

00:16:04,460 --> 00:16:08,510
don't want to care about this and so

00:16:06,350 --> 00:16:12,980
it's better than excess automatically

00:16:08,510 --> 00:16:15,380
advertise it to your pupil for one and

00:16:12,980 --> 00:16:17,780
then this is the structure that you just

00:16:15,380 --> 00:16:19,970
my logo what we are going to say they

00:16:17,780 --> 00:16:22,910
are going to say two things rather in

00:16:19,970 --> 00:16:27,410
first to say the real value of the

00:16:22,910 --> 00:16:32,030
original app which is saving PNP theater

00:16:27,410 --> 00:16:35,330
we're going to save it in what's the

00:16:32,030 --> 00:16:40,490
weak pointer to that function we're

00:16:35,330 --> 00:16:45,170
going to say that by default that is not

00:16:40,490 --> 00:16:48,350
its fourth that all we do at boot time

00:16:45,170 --> 00:16:51,680
so now when we're going to use that

00:16:48,350 --> 00:16:54,110
program we're going to say I'm not - do

00:16:51,680 --> 00:16:58,700
not mock - e when we are going to not -

00:16:54,110 --> 00:17:04,970
e we are mainly going to use what we saw

00:16:58,700 --> 00:17:07,940
earlier that will just be flip a bit in

00:17:04,970 --> 00:17:15,860
that structure on the bit flipping each

00:17:07,940 --> 00:17:20,030
other so what's cool is later when we

00:17:15,860 --> 00:17:25,570
are going to call that we are going to

00:17:20,030 --> 00:17:29,110
trigger or yes no custom up in one way

00:17:25,570 --> 00:17:31,360
which is defined just there it's very

00:17:29,110 --> 00:17:34,270
simply very simple to read only a few

00:17:31,360 --> 00:17:35,410
night not we yeah can just one more line

00:17:34,270 --> 00:17:40,720
doll well you can wait on the slide

00:17:35,410 --> 00:17:42,970
there so same thing macro and dirty

00:17:40,720 --> 00:17:46,750
macro because that macro can return on

00:17:42,970 --> 00:17:49,630
your back ok many just say is not up is

00:17:46,750 --> 00:17:55,420
not not just return on abort I let pal

00:17:49,630 --> 00:17:57,730
under that but if that up is much then I

00:17:55,420 --> 00:18:01,660
want to know I want to call the custom

00:17:57,730 --> 00:18:05,010
user function check is return value and

00:18:01,660 --> 00:18:11,830
everyone is return value Twitter or

00:18:05,010 --> 00:18:14,080
something else and in any case so if

00:18:11,830 --> 00:18:17,919
it's we then always fall back to the

00:18:14,080 --> 00:18:20,470
widow so that was just a quick example

00:18:17,919 --> 00:18:23,169
on that branch is running as some basic

00:18:20,470 --> 00:18:26,230
test you can play with it that's how -

00:18:23,169 --> 00:18:29,049
it very badly that she is implemented so

00:18:26,230 --> 00:18:33,220
now I would this looks like we need to

00:18:29,049 --> 00:18:39,130
continue because we don't add only - II

00:18:33,220 --> 00:18:41,799
we have many order - define in by by

00:18:39,130 --> 00:18:43,450
pair they are all there you can just run

00:18:41,799 --> 00:18:45,760
tell doc you will have all of them so

00:18:43,450 --> 00:18:48,429
but some of them are returning Briana

00:18:45,760 --> 00:18:51,309
integral value other are returning are

00:18:48,429 --> 00:18:54,760
using stat on some other are using are

00:18:51,309 --> 00:18:56,950
returning there are not consistent so

00:18:54,760 --> 00:18:58,900
you need different type of knocking for

00:18:56,950 --> 00:19:02,260
all of them on the other thing you have

00:18:58,900 --> 00:19:06,340
that underscore it's very usually a good

00:19:02,260 --> 00:19:08,710
practice which you do - II on - G on the

00:19:06,340 --> 00:19:11,350
same file rather than reusing the same

00:19:08,710 --> 00:19:16,090
name you will use underscore which avoid

00:19:11,350 --> 00:19:18,309
- : extra stat cool so we will also need

00:19:16,090 --> 00:19:20,530
to support that the basic code I show

00:19:18,309 --> 00:19:24,220
you is not reporting that the final cut

00:19:20,530 --> 00:19:26,470
on Sipan is doing that so we have bonus

00:19:24,220 --> 00:19:31,090
light or should accept right the talk is

00:19:26,470 --> 00:19:36,370
now starting and we have time that's

00:19:31,090 --> 00:19:40,559
cool so same thing so now this light out

00:19:36,370 --> 00:19:40,559
there I'm going to make them nice

00:19:41,620 --> 00:19:50,060
so yeah you have a code that code does

00:19:46,550 --> 00:19:53,150
somewhere or - P okay

00:19:50,060 --> 00:19:55,930
it's just going to say mainly if the

00:19:53,150 --> 00:20:03,680
file exists if the slash any path exists

00:19:55,930 --> 00:20:06,530
so with what we so is we can say I want

00:20:03,680 --> 00:20:12,460
to modify check duskie with my cursor

00:20:06,530 --> 00:20:15,740
option my custom function if that's why

00:20:12,460 --> 00:20:19,610
I want to say it exists well Raj don't

00:20:15,740 --> 00:20:22,700
exist on the file system otherwise if it

00:20:19,610 --> 00:20:26,110
not that's why I don't know and I let

00:20:22,700 --> 00:20:37,820
pal up answer that for me

00:20:26,110 --> 00:20:41,450
so what you can check is but so now if I

00:20:37,820 --> 00:20:44,120
run do something I got something which

00:20:41,450 --> 00:20:45,710
means the files any path exists for

00:20:44,120 --> 00:20:48,260
random exists on my system and if I

00:20:45,710 --> 00:20:51,980
could unplug the battery now suit only

00:20:48,260 --> 00:20:55,910
it doesn't exist anymore so I switch pal

00:20:51,980 --> 00:21:00,580
- P so but if I tricked pal - II that

00:20:55,910 --> 00:21:04,820
really means I can do more than - e and

00:21:00,580 --> 00:21:10,250
I can do some nasty thing because for

00:21:04,820 --> 00:21:18,770
example here so this is me from working

00:21:10,250 --> 00:21:22,730
anything not there okay and I'm going to

00:21:18,770 --> 00:21:29,000
call the - image with my function and

00:21:22,730 --> 00:21:31,790
the - e we say okay but now if I use the

00:21:29,000 --> 00:21:34,040
same trick on the - G can say okay it's

00:21:31,790 --> 00:21:36,500
exist on he said directory cool very

00:21:34,040 --> 00:21:38,750
cool but I can also go further I can

00:21:36,500 --> 00:21:41,420
also trick the system same this is the

00:21:38,750 --> 00:21:43,370
right story but is also fine so I can do

00:21:41,420 --> 00:21:47,840
some nasty thing that you don't want to

00:21:43,370 --> 00:21:50,870
do but you are you are mocking them so

00:21:47,840 --> 00:21:52,000
why not okay and that's the function I'm

00:21:50,870 --> 00:21:54,270
using to mock mainly

00:21:52,000 --> 00:21:55,570
laughs it's true all right I don't know

00:21:54,270 --> 00:22:03,960
cool

00:21:55,570 --> 00:22:12,310
so we saw the first program of that okay

00:22:03,960 --> 00:22:15,430
that one okay so that one show also that

00:22:12,310 --> 00:22:17,910
the the function you are looking - check

00:22:15,430 --> 00:22:20,530
take the first arguments in the check

00:22:17,910 --> 00:22:24,670
here you are only concerned about

00:22:20,530 --> 00:22:28,270
mocking the GEF okay so otherwise you

00:22:24,670 --> 00:22:29,980
are going to fall back on if it de f so

00:22:28,270 --> 00:22:32,920
you can say oh but if it's a directory

00:22:29,980 --> 00:22:36,820
by the way it doesn't it's not true so

00:22:32,920 --> 00:22:38,740
you can slightly massage the thing like

00:22:36,820 --> 00:22:42,550
this to make it better but still not

00:22:38,740 --> 00:22:57,760
perfect okay so what you would want in

00:22:42,550 --> 00:23:01,260
fact is okay before that you yeah so the

00:22:57,760 --> 00:23:03,820
this is just a slide showing that

00:23:01,260 --> 00:23:07,750
because the way it works in excess

00:23:03,820 --> 00:23:10,390
mainly is if you see def GV you just

00:23:07,750 --> 00:23:14,410
fall back to pal because during the

00:23:10,390 --> 00:23:16,930
first call you have filled the stat as

00:23:14,410 --> 00:23:23,800
we that contain the value of the

00:23:16,930 --> 00:23:26,050
previous systems that okay so here your

00:23:23,800 --> 00:23:29,380
custom function in that case will only

00:23:26,050 --> 00:23:31,810
be called once only for the - key for

00:23:29,380 --> 00:23:36,520
the - f it will trust on the value of

00:23:31,810 --> 00:23:38,890
return okay but this is not enough so

00:23:36,520 --> 00:23:42,820
what we need to do mainly we need to

00:23:38,890 --> 00:23:45,100
provide stat okay because what the

00:23:42,820 --> 00:23:47,290
system does when you do a - E - f it

00:23:45,100 --> 00:23:49,630
does a system and a call to start to

00:23:47,290 --> 00:23:55,390
check what just the start of that file

00:23:49,630 --> 00:23:58,630
so the ID is provide your own custom

00:23:55,390 --> 00:24:02,800
stat on a file and then use that for any

00:23:58,630 --> 00:24:04,150
order - X check and to do that the

00:24:02,800 --> 00:24:07,750
module arm

00:24:04,150 --> 00:24:11,380
is providing some airports so if I go

00:24:07,750 --> 00:24:14,440
back there mainly so I'm mocking the

00:24:11,380 --> 00:24:16,960
stats so instead of having - yo - stop -

00:24:14,440 --> 00:24:19,900
F there I will make me out start or add

00:24:16,960 --> 00:24:22,450
start depending what call it if

00:24:19,900 --> 00:24:27,820
performed and I can we turn either on

00:24:22,450 --> 00:24:31,780
our F here either as a harsh wrath using

00:24:27,820 --> 00:24:34,180
this kills either

00:24:31,780 --> 00:24:37,350
I can use some L pearls provided by the

00:24:34,180 --> 00:24:39,850
module say oh this is a directory or

00:24:37,350 --> 00:24:42,160
this is a directory but by the way it's

00:24:39,850 --> 00:24:45,310
owned by root on the West rated at that

00:24:42,160 --> 00:24:46,750
time and so on or this is the file this

00:24:45,310 --> 00:24:49,660
is assuming this is okay so you have

00:24:46,750 --> 00:24:51,580
some Airport that will avoid you to burn

00:24:49,660 --> 00:24:56,500
your head on find which bit you need to

00:24:51,580 --> 00:24:59,620
set everywhere okay and the magic

00:24:56,500 --> 00:25:04,750
appears now because you are that

00:24:59,620 --> 00:25:07,480
function here name I want to mark

00:25:04,750 --> 00:25:09,670
everything using my fake stat function

00:25:07,480 --> 00:25:24,580
so we just provide the effects that

00:25:09,670 --> 00:25:26,470
function and then your so using a new

00:25:24,580 --> 00:25:29,020
file which mean our mock function will

00:25:26,470 --> 00:25:37,480
behave like it's a new file and we can

00:25:29,020 --> 00:25:39,490
check that we have a new file that is

00:25:37,480 --> 00:25:45,610
true

00:25:39,490 --> 00:25:50,020
new file is mainly there just say if

00:25:45,610 --> 00:25:53,230
it's a real file we can satisfied that

00:25:50,020 --> 00:25:55,900
not function is if the file is not near

00:25:53,230 --> 00:25:58,120
okay mark it as a file but it's size is

00:25:55,900 --> 00:26:01,180
something okay

00:25:58,120 --> 00:26:04,470
so nine eight seven six five and if I

00:26:01,180 --> 00:26:08,740
say I want to mark it as an on-ear file

00:26:04,470 --> 00:26:10,690
then now if I do a - - s on either of my

00:26:08,740 --> 00:26:13,000
custom path for the underscore which is

00:26:10,690 --> 00:26:13,600
the same I've got that size there and

00:26:13,000 --> 00:26:17,490
said nothing

00:26:13,600 --> 00:26:23,550
it's a non unified so that's cool so we

00:26:17,490 --> 00:26:23,550
remove all these things using start

00:26:25,440 --> 00:26:32,650
using that module third Ronaldo a

00:26:28,960 --> 00:26:35,470
variable there show your third a an

00:26:32,650 --> 00:26:38,020
addition on it which is TASMAC file

00:26:35,470 --> 00:26:40,780
which is goal is mainly providing a Mach

00:26:38,020 --> 00:26:43,000
5 system the one of the interest of that

00:26:40,780 --> 00:26:47,860
is if you have concurrency and many of

00:26:43,000 --> 00:26:52,630
you need test concurrency you could you

00:26:47,860 --> 00:26:57,190
could simply avoid conflict between your

00:26:52,630 --> 00:26:59,920
test ok say oh the for example passwd

00:26:57,190 --> 00:27:04,000
file exists and this is the content do

00:26:59,920 --> 00:27:06,730
not mess with it but the best feature is

00:27:04,000 --> 00:27:08,560
providing is the strict mode and if you

00:27:06,730 --> 00:27:10,750
have missus torch you can get free

00:27:08,560 --> 00:27:12,430
online on will be online pretty soon but

00:27:10,750 --> 00:27:16,030
the treatment is one a very cool feature

00:27:12,430 --> 00:27:19,060
because that's a crush if you are trying

00:27:16,030 --> 00:27:21,490
to access a file that is unlocked what

00:27:19,060 --> 00:27:23,890
however can be opened it can be opened

00:27:21,490 --> 00:27:26,890
here it can be a - e it can be anything

00:27:23,890 --> 00:27:28,630
if you try to access a file from that

00:27:26,890 --> 00:27:30,790
test on you don't because it's very

00:27:28,630 --> 00:27:32,170
common that somewhere very deep in your

00:27:30,790 --> 00:27:34,840
stack something is going to access the

00:27:32,170 --> 00:27:38,200
file and your you're going to crush or

00:27:34,840 --> 00:27:41,680
you're going to have conflict so still

00:27:38,200 --> 00:27:45,010
working provides but 20 we are using it

00:27:41,680 --> 00:27:47,410
pretty quickly well so the lesson from

00:27:45,010 --> 00:27:51,220
this is first better knowledge of the

00:27:47,410 --> 00:27:55,330
pel herbs ok so you can make a file

00:27:51,220 --> 00:28:01,230
system for testing using the test mark

00:27:55,330 --> 00:28:04,230
file module oops where's my mouse oh

00:28:01,230 --> 00:28:04,230
nice

00:28:05,390 --> 00:28:08,390
okay

00:28:08,710 --> 00:28:17,499
okay okay I need to step back okay

00:28:13,059 --> 00:28:19,990
so we can mock the fire system having

00:28:17,499 --> 00:28:22,749
that knowledge also add us to improve

00:28:19,990 --> 00:28:26,619
the pair compiler by coming with some ID

00:28:22,749 --> 00:28:29,559
like lazy herbs lazy relax but also some

00:28:26,619 --> 00:28:32,340
future improvement for Perl itself that

00:28:29,559 --> 00:28:36,249
we are going to come in the next

00:28:32,340 --> 00:28:38,679
whatever sprints one of them is

00:28:36,249 --> 00:28:41,289
improving the way cv on cv for excess

00:28:38,679 --> 00:28:42,940
works to speed them when you already did

00:28:41,289 --> 00:28:46,840
some experimental work on that that

00:28:42,940 --> 00:28:48,850
looks very promising and so on so I hope

00:28:46,840 --> 00:28:52,600
this gives you a better insight of Pelle

00:28:48,850 --> 00:28:56,409
ops on maybe excess you can find all

00:28:52,600 --> 00:28:58,649
these slides online and yeah thank you

00:28:56,409 --> 00:28:58,649
for coming

00:29:03,300 --> 00:29:10,289
[Applause]

00:29:06,869 --> 00:29:10,289
any question

00:29:14,299 --> 00:29:20,460
you can look one or the other or both

00:29:16,700 --> 00:29:22,799
because yeah yeah we've thought you can

00:29:20,460 --> 00:29:23,520
talk about everything start on there

00:29:22,799 --> 00:29:24,960
start by yeah

00:29:23,520 --> 00:29:56,580
when you say mug from sight it will do

00:29:24,960 --> 00:30:06,929
the dice - fine what you are saying when

00:29:56,580 --> 00:30:14,549
using otoscope when using find them okay

00:30:06,929 --> 00:30:18,660
I think it's exactly the same as doing -

00:30:14,549 --> 00:30:20,640
f the file space - underscore because

00:30:18,660 --> 00:30:22,980
you're providing no argument to the

00:30:20,640 --> 00:30:25,460
other which is at underscore mainly and

00:30:22,980 --> 00:30:35,100
so you are doing only one stat code

00:30:25,460 --> 00:30:37,980
should - of its - up but they are it's

00:30:35,100 --> 00:30:40,440
two different up but they are probably

00:30:37,980 --> 00:30:42,090
some of them are sharing some code some

00:30:40,440 --> 00:30:43,890
of them are cool with different tables

00:30:42,090 --> 00:30:46,200
so sometimes what you can have you can

00:30:43,890 --> 00:30:50,750
have a one function and that function

00:30:46,200 --> 00:30:55,470
will check what is my op ID and

00:30:50,750 --> 00:30:57,059
depending on that it will you have some

00:30:55,470 --> 00:30:59,490
shared shared code on you have some

00:30:57,059 --> 00:31:03,710
different if else want in the in the up

00:30:59,490 --> 00:31:03,710
but in the or three you will see - up

00:31:04,210 --> 00:32:07,010
yes you would see to up on any other

00:31:57,559 --> 00:32:08,899
question okay I guess so it's right so

00:32:07,010 --> 00:32:11,539
this is the follow up on last year last

00:32:08,899 --> 00:32:13,460
year while introducing basic XS on this

00:32:11,539 --> 00:32:16,429
urine just going one step further like

00:32:13,460 --> 00:32:19,549
me I keep learning and this is try to

00:32:16,429 --> 00:32:21,649
make it accessible so here is some basic

00:32:19,549 --> 00:32:23,870
knowledge I guess if you don't know

00:32:21,649 --> 00:32:30,140
mocking your start from a right bad step

00:32:23,870 --> 00:32:32,179
from the beginning but on the on the

00:32:30,140 --> 00:32:34,520
example the sort the repo I provided

00:32:32,179 --> 00:32:36,350
online are over simplified the number of

00:32:34,520 --> 00:32:37,640
line there are pretty small so if you

00:32:36,350 --> 00:32:43,250
aren't ready to dig a thing for

00:32:37,640 --> 00:32:44,780
someone's pretty low cost hunter okay

00:32:43,250 --> 00:32:46,850
yes

00:32:44,780 --> 00:32:51,310
one brief access question nots wasn't

00:32:46,850 --> 00:32:51,310
talking what is in thx

00:32:52,690 --> 00:32:57,830
it's an end without interpreter engines

00:32:55,490 --> 00:33:00,740
fighters for threats so you can have

00:32:57,830 --> 00:33:03,320
multiple girl processes within the same

00:33:00,740 --> 00:33:06,140
physical s process flow around it would

00:33:03,320 --> 00:33:07,730
be like an instance or starting from the

00:33:06,140 --> 00:33:09,950
shared library two different shared

00:33:07,730 --> 00:33:12,430
libraries launched two separate girls in

00:33:09,950 --> 00:33:12,430

YouTube URL: https://www.youtube.com/watch?v=2YMWDjkVJ2g


