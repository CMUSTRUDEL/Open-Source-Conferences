Title: John Dickhoff - "Perl Glue for Millenial Hardware Design Tool Flow Automation"
Publication date: 2019-06-20
Playlist: TPC 2019 in Pittsburgh
Description: 
	Perl 5 coding styles for building complex hardware tools flows with dozens of steps. Includes GetOptions command-line strategy, using IO::Pipes to manage network tasks assessing computer resources required for batched steps, building up UNIX command pipelines and avoid quoting headaches, getting info from XLSX.
Captions: 
	00:00:00,030 --> 00:00:05,549
my name is John jackoff and I'm a

00:00:01,949 --> 00:00:08,550
hardware engineer for Intel and this

00:00:05,549 --> 00:00:10,679
presentation is a look inside if you

00:00:08,550 --> 00:00:13,920
will of how I use Perl to glue together

00:00:10,679 --> 00:00:20,010
all the steps in our hardware design

00:00:13,920 --> 00:00:21,689
flow and maybe this is just a review for

00:00:20,010 --> 00:00:25,279
everyone because I'm really doing the

00:00:21,689 --> 00:00:28,410
greatest hits of what Perl is good at

00:00:25,279 --> 00:00:30,990
and you might ask why is a hardware

00:00:28,410 --> 00:00:32,399
engineer given a talk on Perl I thought

00:00:30,990 --> 00:00:33,930
this was a software conference I've

00:00:32,399 --> 00:00:35,640
heard people denigrating a hardware

00:00:33,930 --> 00:00:38,250
design and it was just too difficult so

00:00:35,640 --> 00:00:41,430
I ran away to the computer side but I

00:00:38,250 --> 00:00:45,030
started on the computer side I was a C

00:00:41,430 --> 00:00:48,690
programmer way back when and we used

00:00:45,030 --> 00:00:52,649
Perl an old version in the late 80s to

00:00:48,690 --> 00:00:56,300
wrap around CI and Co the RCS commands

00:00:52,649 --> 00:00:59,129
for primitive pre get long before get

00:00:56,300 --> 00:01:01,530
revision control and I had a co-worker

00:00:59,129 --> 00:01:04,559
who did that and I helped them and then

00:01:01,530 --> 00:01:13,470
we made our Rd staff a little bit

00:01:04,559 --> 00:01:15,180
happier and there again a colleague use

00:01:13,470 --> 00:01:17,310
Perl this is a different version of Perl

00:01:15,180 --> 00:01:21,180
had all this stuff I hadn't really seen

00:01:17,310 --> 00:01:22,830
before and he would usually design the

00:01:21,180 --> 00:01:25,350
code and then I would test it out and

00:01:22,830 --> 00:01:29,130
make it work at the chip level and

00:01:25,350 --> 00:01:29,820
whatnot but then for three years I went

00:01:29,130 --> 00:01:32,400
there

00:01:29,820 --> 00:01:36,030
you know Perl and I've gotten really

00:01:32,400 --> 00:01:38,970
close and I really use it as a job aid

00:01:36,030 --> 00:01:42,960
make my life easier make our groups work

00:01:38,970 --> 00:01:44,579
easier I could sit back and let other

00:01:42,960 --> 00:01:46,680
people develop a Perl but in this group

00:01:44,579 --> 00:01:49,520
filled with hardware designers I'm the

00:01:46,680 --> 00:01:57,899
software person I need to develop it so

00:01:49,520 --> 00:02:01,020
that's what I've done 20-page word

00:01:57,899 --> 00:02:04,560
document or PDF that supposedly describe

00:02:01,020 --> 00:02:05,880
the steps if you had such a document for

00:02:04,560 --> 00:02:07,320
your software design you think you could

00:02:05,880 --> 00:02:09,209
give your new college grads that

00:02:07,320 --> 00:02:12,060
document and have them reasonably

00:02:09,209 --> 00:02:13,720
complete anything this document is only

00:02:12,060 --> 00:02:17,020
useful for people who already know the

00:02:13,720 --> 00:02:20,830
step2 don't need the document so I

00:02:17,020 --> 00:02:24,880
thought pearl I need to have a little

00:02:20,830 --> 00:02:26,680
bit of time to do it that I could make

00:02:24,880 --> 00:02:28,420
the team more efficient let the junior

00:02:26,680 --> 00:02:30,340
engineers get a lot of work done be

00:02:28,420 --> 00:02:32,410
productive we see I might have to help

00:02:30,340 --> 00:02:50,230
them with the complex stuff but there's

00:02:32,410 --> 00:02:53,800
no harm in that and that's what I did in

00:02:50,230 --> 00:03:01,320
contrasts have seen interstellar okay

00:02:53,800 --> 00:03:01,320
two people so a 100% increase okay

00:03:01,770 --> 00:03:08,130
but one of the plot drivers is the way

00:03:05,830 --> 00:03:10,800
that people experience time differently

00:03:08,130 --> 00:03:13,900
and I'll just rephrase it this way

00:03:10,800 --> 00:03:16,660
how many releases of software could you

00:03:13,900 --> 00:03:18,790
produce in a year if you were what do

00:03:16,660 --> 00:03:20,739
they call it now is software is service

00:03:18,790 --> 00:03:22,180
kind of thing where it's like your

00:03:20,739 --> 00:03:23,430
choice you could do it once a week if

00:03:22,180 --> 00:03:26,260
you wanted right

00:03:23,430 --> 00:03:30,010
how many Hardware releases do you think

00:03:26,260 --> 00:03:32,830
a company could do in a year one if

00:03:30,010 --> 00:03:35,160
you're lucky so the scale is different

00:03:32,830 --> 00:03:39,220
the underlying tools are different

00:03:35,160 --> 00:03:41,709
waiting overnight means it runs fast for

00:03:39,220 --> 00:03:44,530
hardware designers we have tasks that

00:03:41,709 --> 00:03:46,780
take all month to finish that's after we

00:03:44,530 --> 00:03:50,019
parallelized it and split it up into

00:03:46,780 --> 00:03:51,750
smaller tasks so I'm not going to try

00:03:50,019 --> 00:03:56,590
and turn you into hardware designers

00:03:51,750 --> 00:03:58,930
just gonna show you some well points

00:03:56,590 --> 00:04:00,070
that I ran into implementing the Perl

00:03:58,930 --> 00:04:01,180
and maybe when you have to string

00:04:00,070 --> 00:04:04,390
together a whole bunch of stuff you

00:04:01,180 --> 00:04:08,110
might run into it so I used your options

00:04:04,390 --> 00:04:10,540
before and I was going to have a option

00:04:08,110 --> 00:04:14,920
through each step and going in I didn't

00:04:10,540 --> 00:04:17,650
realize we were gonna have 23 steps 23

00:04:14,920 --> 00:04:21,669
step is check in to use the get ISM it's

00:04:17,650 --> 00:04:23,110
called committing but I got in thinking

00:04:21,669 --> 00:04:25,060
oh I'll put the number and then some

00:04:23,110 --> 00:04:26,020
little text and they could use that and

00:04:25,060 --> 00:04:27,340
they would remember

00:04:26,020 --> 00:04:29,139
remember it but people have a hard time

00:04:27,340 --> 00:04:31,990
remembering a phone number they're going

00:04:29,139 --> 00:04:34,629
to remember 23 steps so then I went and

00:04:31,990 --> 00:04:36,190
chains them all to be just text and you

00:04:34,629 --> 00:04:38,500
said well you forgot one step you should

00:04:36,190 --> 00:04:40,389
have deleted the other ones but maybe

00:04:38,500 --> 00:04:42,370
it's a true way to do it as a Perl

00:04:40,389 --> 00:04:44,259
programmer there's more than two ways to

00:04:42,370 --> 00:04:56,349
specify the option so I left them both

00:04:44,259 --> 00:04:58,479
in ok to not have to keep finding where

00:04:56,349 --> 00:05:01,120
are these darn scripts I have to run

00:04:58,479 --> 00:05:05,009
have they changed discs so I had the

00:05:01,120 --> 00:05:08,740
Perl create the scripts on the fly

00:05:05,009 --> 00:05:10,210
specific for each step so here we

00:05:08,740 --> 00:05:19,539
created the directories if they don't

00:05:10,210 --> 00:05:21,099
exist a lot of work goes in there just

00:05:19,539 --> 00:05:23,380
to make sure that it could get submitted

00:05:21,099 --> 00:05:25,900
to the farm it has to have a shebang

00:05:23,380 --> 00:05:28,389
there I you see show because I like the

00:05:25,900 --> 00:05:32,319
format of its time command there's some

00:05:28,389 --> 00:05:34,599
stuff I left out and we might have to go

00:05:32,319 --> 00:05:39,539
in and set some limits on stack size or

00:05:34,599 --> 00:05:39,539
something we had to do that recently and

00:05:47,159 --> 00:05:52,479
and the tool is going to produce a log

00:05:50,199 --> 00:05:54,490
at the very end in the logs directory

00:05:52,479 --> 00:05:57,029
and the farm is going to output a log in

00:05:54,490 --> 00:06:01,330
the logs directory just having that

00:05:57,029 --> 00:06:10,960
organization up front just made writing

00:06:01,330 --> 00:06:18,969
the code straightforward and so one of

00:06:10,960 --> 00:06:22,659
the simpler ones regular expression and

00:06:18,969 --> 00:06:24,159
I got tired in my VI of as soon as I

00:06:22,659 --> 00:06:26,349
started putting quotes in it would get

00:06:24,159 --> 00:06:29,259
unbalanced and change stuff so I just

00:06:26,349 --> 00:06:31,630
made single quote the dollar Q and just

00:06:29,259 --> 00:06:34,000
built it up that way so I build the Reg

00:06:31,630 --> 00:06:37,990
X with single quotes build the set

00:06:34,000 --> 00:06:41,780
command then send it off to system

00:06:37,990 --> 00:06:44,750
that's a preparation step to get ready

00:06:41,780 --> 00:06:48,530
to run this DC shell about memory power

00:06:44,750 --> 00:06:52,370
script that I explicitly just put in a

00:06:48,530 --> 00:06:57,650
hash and then pass it to this run local

00:06:52,370 --> 00:06:59,840
or on the network script and at the end

00:06:57,650 --> 00:07:02,810
it dies if it didn't find the output

00:06:59,840 --> 00:07:05,480
file it was supposed to find some steps

00:07:02,810 --> 00:07:07,390
have a really defined output file and if

00:07:05,480 --> 00:07:10,580
you don't get that file the step failed

00:07:07,390 --> 00:07:18,170
other steps it's much more hard to

00:07:10,580 --> 00:07:21,680
determine whether it's correct local or

00:07:18,170 --> 00:07:24,140
network for the conformal step it goes

00:07:21,680 --> 00:07:26,810
in maybe it's hard to see but these are

00:07:24,140 --> 00:07:28,730
back ticks does an e grep for a certain

00:07:26,810 --> 00:07:32,450
string in a certain log file from the

00:07:28,730 --> 00:07:35,090
tool and then it counts them up and if

00:07:32,450 --> 00:07:38,660
the misc appears are zero then we passed

00:07:35,090 --> 00:07:40,570
and so some steps have a post processing

00:07:38,660 --> 00:07:44,030
step say did it really run correctly

00:07:40,570 --> 00:07:45,560
that's the maybe hard part and software

00:07:44,030 --> 00:07:49,010
but definitely hard part and software a

00:07:45,560 --> 00:07:50,210
certain tool will run and it exited

00:07:49,010 --> 00:07:59,030
correctly but did it really run

00:07:50,210 --> 00:08:00,710
correctly and completely we had these 23

00:07:59,030 --> 00:08:02,740
steps and some of them had to be run and

00:08:00,710 --> 00:08:04,940
the window could figure it one way and

00:08:02,740 --> 00:08:06,350
some run in another window

00:08:04,940 --> 00:08:08,600
they were like four different windows

00:08:06,350 --> 00:08:11,510
you or tabs you had to run different

00:08:08,600 --> 00:08:14,870
steps in so inevitably if you had change

00:08:11,510 --> 00:08:16,280
your focus to the wrong tab a step which

00:08:14,870 --> 00:08:19,280
failed because the tool wouldn't be

00:08:16,280 --> 00:08:21,730
loaded in since the CC shell tool

00:08:19,280 --> 00:08:25,160
occurred the most often I put in a check

00:08:21,730 --> 00:08:29,330
if the step you're running this is the

00:08:25,160 --> 00:08:32,060
beginning of run local or network which

00:08:29,330 --> 00:08:33,680
on DC shell and check it see if I get an

00:08:32,060 --> 00:08:36,080
error tradition we get an error

00:08:33,680 --> 00:08:38,479
condition I sort of say politely run

00:08:36,080 --> 00:08:40,700
this on the right window I could have

00:08:38,479 --> 00:08:45,669
said RTFM but I said run this in the

00:08:40,700 --> 00:08:45,669
right window and then

00:08:45,810 --> 00:08:49,740
do something about calling it resources

00:08:47,550 --> 00:08:53,490
required another thing that's hard to do

00:08:49,740 --> 00:08:57,260
on some of these steps is feed it to the

00:08:53,490 --> 00:09:01,010
farm with enough memory requested for it

00:08:57,260 --> 00:09:04,920
so you remember there's a times

00:09:01,010 --> 00:09:08,339
directory so I call this it turns the

00:09:04,920 --> 00:09:10,589
script file into the times file and if

00:09:08,339 --> 00:09:12,839
the file is there then it starts reading

00:09:10,589 --> 00:09:14,880
it and just looks for purses out

00:09:12,839 --> 00:09:17,790
sometimes it gets the memory it's in

00:09:14,880 --> 00:09:21,540
there somewhere and then I'll use that

00:09:17,790 --> 00:09:23,970
when I do the farm request give me a job

00:09:21,540 --> 00:09:26,839
on the farm with this much memory you

00:09:23,970 --> 00:09:41,580
kind of keep our IT police away if you

00:09:26,839 --> 00:09:44,220
do stuff like this okay I hadn't used it

00:09:41,580 --> 00:09:46,020
before and I was doing stupid stuff like

00:09:44,220 --> 00:09:48,240
just doing the system call and putting

00:09:46,020 --> 00:09:57,480
it in the background but that's not what

00:09:48,240 --> 00:10:00,210
I wanted I wanted a pipe just the raw

00:09:57,480 --> 00:10:02,280
strip or it has a batch prefix to it

00:10:00,210 --> 00:10:04,980
that's gonna have the memory request and

00:10:02,280 --> 00:10:08,760
how much memory and all that stuff and

00:10:04,980 --> 00:10:11,460
then it constructs a pipe specifies the

00:10:08,760 --> 00:10:12,240
reader and then processes the pipe like

00:10:11,460 --> 00:10:16,170
it's a file

00:10:12,240 --> 00:10:17,700
I call it dollar line I first look for

00:10:16,170 --> 00:10:20,010
the job ID cuz they're going to use that

00:10:17,700 --> 00:10:21,510
and the subsequent searches to know when

00:10:20,010 --> 00:10:25,230
it's been assigned to a computer when

00:10:21,510 --> 00:10:30,540
it's then actually started and then that

00:10:25,230 --> 00:10:32,520
it completed in what status develop the

00:10:30,540 --> 00:10:34,530
script line by line it tested it out it

00:10:32,520 --> 00:10:36,660
criminally but I wasn't getting anything

00:10:34,530 --> 00:10:38,640
one because I had redirected standard

00:10:36,660 --> 00:10:40,440
error and then two because I hadn't put

00:10:38,640 --> 00:10:43,620
in this else this is where you're gonna

00:10:40,440 --> 00:10:45,830
get your underlying tool output from

00:10:43,620 --> 00:10:50,930
it's just gonna come out in that clause

00:10:45,830 --> 00:10:50,930
and once I did that work nicely

00:10:53,720 --> 00:11:02,670
okay and then some of our steps taken a

00:10:58,920 --> 00:11:04,590
lot of preparation and one of the things

00:11:02,670 --> 00:11:07,350
we have to do some of our underlying

00:11:04,590 --> 00:11:09,090
tools use tickle is what dries them we

00:11:07,350 --> 00:11:10,860
just have this big tickle script and

00:11:09,090 --> 00:11:13,500
there's certain pieces that you have to

00:11:10,860 --> 00:11:15,890
change this particular piece of code is

00:11:13,500 --> 00:11:21,720
trying to find some G stand clocks

00:11:15,890 --> 00:11:23,880
setting and it's caused something to go

00:11:21,720 --> 00:11:28,710
grab a report file and get that

00:11:23,880 --> 00:11:32,070
information and then it essentially

00:11:28,710 --> 00:11:34,800
replaces what's there with the beginning

00:11:32,070 --> 00:11:38,760
of a tickle list and then it does a

00:11:34,800 --> 00:11:41,760
postfix for loop to iterate through the

00:11:38,760 --> 00:11:45,800
clock hash table and print out the names

00:11:41,760 --> 00:11:49,650
and then it closes tickle but that's

00:11:45,800 --> 00:11:52,590
like five or six lines for one variable

00:11:49,650 --> 00:11:54,720
in one tickle script this happens to be

00:11:52,590 --> 00:11:57,630
from our most complicated step set up it

00:11:54,720 --> 00:12:01,790
takes 150 lines of pearl to prepare all

00:11:57,630 --> 00:12:01,790
the files and get it ready

00:12:05,150 --> 00:12:11,530
okay now I talked about getting this

00:12:07,850 --> 00:12:14,770
clock information from a file perhaps

00:12:11,530 --> 00:12:17,180
you have information in a spreadsheet

00:12:14,770 --> 00:12:19,220
engineers and engineering managers like

00:12:17,180 --> 00:12:21,380
to put things in spreadsheet we like to

00:12:19,220 --> 00:12:43,730
track status and yell at you for not

00:12:21,380 --> 00:12:46,730
getting anything done last week so that

00:12:43,730 --> 00:12:51,050
XLS data is buried like three levels

00:12:46,730 --> 00:12:53,510
deep and just name them some meaningful

00:12:51,050 --> 00:12:54,980
variables because you might do some

00:12:53,510 --> 00:12:56,870
filtering you might not want all the

00:12:54,980 --> 00:13:04,550
entries you might just want the ones

00:12:56,870 --> 00:13:16,700
that are four or greater then I go about

00:13:04,550 --> 00:13:18,440
this array here and then I'm not going

00:13:16,700 --> 00:13:21,710
to show you what I do with this table we

00:13:18,440 --> 00:13:23,810
rather than getting in that app nope

00:13:21,710 --> 00:13:25,670
that's 20 pages long it says pick an ADT

00:13:23,810 --> 00:13:28,100
that's appropriate for your design I

00:13:25,670 --> 00:13:30,380
have a Perl script that will read this

00:13:28,100 --> 00:13:36,130
and search and centrally solve a

00:13:30,380 --> 00:13:38,360
mathematical problem but if you're in

00:13:36,130 --> 00:13:40,910
managers or like my managers their

00:13:38,360 --> 00:13:43,790
spreadsheets are complex they aren't as

00:13:40,910 --> 00:13:48,710
simple it's just a bunch of numbers here

00:13:43,790 --> 00:13:55,910
is a version of our hardware design

00:13:48,710 --> 00:13:57,680
tracker so each block is a portion of

00:13:55,910 --> 00:14:00,050
the hardware so physically it's a

00:13:57,680 --> 00:14:02,630
portion of the hardware this top has

00:14:00,050 --> 00:14:04,710
this processor the processor it has a

00:14:02,630 --> 00:14:06,570
replicated subprocessors

00:14:04,710 --> 00:14:09,540
there might be a core or base processor

00:14:06,570 --> 00:14:10,620
that's further down if you have a hard

00:14:09,540 --> 00:14:12,060
time thinking about the hardware just

00:14:10,620 --> 00:14:16,620
think of it like directories and

00:14:12,060 --> 00:14:19,290
subdirectories it's so what I wanted to

00:14:16,620 --> 00:14:21,770
do was one get these names from the

00:14:19,290 --> 00:14:26,570
database and get what level they are at

00:14:21,770 --> 00:14:31,800
that's important and the Pearl is just a

00:14:26,570 --> 00:14:36,260
little bit uglier because you have to

00:14:31,800 --> 00:14:39,000
skip over rows that are non numeric and

00:14:36,260 --> 00:14:40,470
then if they are numeric you don't know

00:14:39,000 --> 00:14:42,120
whether it's going to be in this column

00:14:40,470 --> 00:14:45,390
this column this column or that column

00:14:42,120 --> 00:14:48,630
and so that's where all the nesting is

00:14:45,390 --> 00:14:54,150
but basically I don't know what level it

00:14:48,630 --> 00:14:55,560
is and for later what row it was in the

00:14:54,150 --> 00:15:03,810
database those are two things that are

00:14:55,560 --> 00:15:06,690
important okay so what took even more

00:15:03,810 --> 00:15:08,820
software skills was then saying oh what

00:15:06,690 --> 00:15:13,790
I really want to know is for a given

00:15:08,820 --> 00:15:17,850
block what blocks are children of it and

00:15:13,790 --> 00:15:20,550
this section here essentially manages a

00:15:17,850 --> 00:15:22,710
parent's array as a stack and as you

00:15:20,550 --> 00:15:34,430
walk down deeper in the hierarchy it

00:15:22,710 --> 00:15:37,530
does something but one block so it took

00:15:34,430 --> 00:15:39,870
took me like a whole day to get that 15

00:15:37,530 --> 00:15:43,760
lines of code right it's knocking the

00:15:39,870 --> 00:15:46,110
software rust off of me doing that so

00:15:43,760 --> 00:15:48,900
look at that if you're interested but

00:15:46,110 --> 00:15:51,120
basically if it's not in the hash table

00:15:48,900 --> 00:15:52,410
I stick it in the hash table with the

00:15:51,120 --> 00:15:54,390
information I have

00:15:52,410 --> 00:15:58,080
I don't know it's children yet but then

00:15:54,390 --> 00:16:08,130
whenever I process a block I push it on

00:15:58,080 --> 00:16:10,200
to the children in its parent so so sort

00:16:08,130 --> 00:16:12,060
a complicated structure but not too

00:16:10,200 --> 00:16:13,680
complicated but then what that allowed

00:16:12,060 --> 00:16:15,840
me to do at Pearl I could get the block

00:16:13,680 --> 00:16:18,780
I could get the children I get for you

00:16:15,840 --> 00:16:22,080
can do a free each and do whatever I

00:16:18,780 --> 00:16:26,220
needed to do to prepare the files for

00:16:22,080 --> 00:16:27,990
the next step okay this last thing is

00:16:26,220 --> 00:16:30,720
just information on writing spreadsheet

00:16:27,990 --> 00:16:32,730
it's a little bit harder but I have

00:16:30,720 --> 00:16:34,890
never attempted to write a complicated

00:16:32,730 --> 00:16:36,510
spreadsheet and pearl what I do is take

00:16:34,890 --> 00:16:38,730
the one or two or three columns that are

00:16:36,510 --> 00:16:41,970
gonna change and write a new spreadsheet

00:16:38,730 --> 00:16:45,300
adjust that and then put it on the user

00:16:41,970 --> 00:16:49,550
or me to copy and paste it into the old

00:16:45,300 --> 00:16:53,070
one the most important thing here is

00:16:49,550 --> 00:16:55,320
when we're writing to this worksheet I

00:16:53,070 --> 00:16:57,030
know what the row is because you

00:16:55,320 --> 00:17:01,020
remember I saved that when I read the

00:16:57,030 --> 00:17:03,630
spreadsheet so I do data I update it I

00:17:01,020 --> 00:17:07,220
get a new delivery from our customer or

00:17:03,630 --> 00:17:10,140
update the data I can write out a little

00:17:07,220 --> 00:17:14,640
narrow section and then you have to

00:17:10,140 --> 00:17:17,490
manually paste it in okay so this is

00:17:14,640 --> 00:17:22,970
just a list of kinda the Perl 5 if you

00:17:17,490 --> 00:17:25,430
haven't noticed constructs we used and

00:17:22,970 --> 00:17:30,180
just to give you an idea of the scope

00:17:25,430 --> 00:17:32,550
there's a database maker that reads that

00:17:30,180 --> 00:17:39,060
big spreadsheet with all the levels of

00:17:32,550 --> 00:17:40,770
hierarchy setting up the windows for

00:17:39,060 --> 00:17:43,020
these tools is some are complicated and

00:17:40,770 --> 00:17:46,560
for one of the tools it includes when

00:17:43,020 --> 00:17:49,110
you would do the cloning step that's a

00:17:46,560 --> 00:17:51,180
three-step processing cloning is just a

00:17:49,110 --> 00:17:53,640
sub step of one of those so I have to

00:17:51,180 --> 00:17:56,870
write a 200 line Perl script just to do

00:17:53,640 --> 00:17:59,610
the setup for all the windows in a

00:17:56,870 --> 00:18:02,200
easier way

00:17:59,610 --> 00:18:04,840
I wrote a 400 lines of

00:18:02,200 --> 00:18:07,559
just dealing with the spreadsheets and

00:18:04,840 --> 00:18:10,480
then this flow thing just kept growing

00:18:07,559 --> 00:18:12,789
because the number of steps and I put a

00:18:10,480 --> 00:18:14,590
lot of help in there too so it's like

00:18:12,789 --> 00:18:17,019
five hundred lines before I do anything

00:18:14,590 --> 00:18:25,179
but it's almost three thousand lines in

00:18:17,019 --> 00:18:27,759
itself but what it does it lets me get

00:18:25,179 --> 00:18:30,100
my tasks done quicker but what I try to

00:18:27,759 --> 00:18:32,259
do is develop automation that we can

00:18:30,100 --> 00:18:34,869
then share across the team if

00:18:32,259 --> 00:18:36,909
everybody's using the same script then

00:18:34,869 --> 00:18:39,489
you get more confidence in it and you

00:18:36,909 --> 00:18:43,859
have higher confidence when you make

00:18:39,489 --> 00:18:46,960
your delivery to the next team but

00:18:43,859 --> 00:18:49,470
that's the last slide we now have time

00:18:46,960 --> 00:18:49,470
for some questions

00:18:57,029 --> 00:19:02,860
are there any are there any come on okay

00:19:01,630 --> 00:19:04,570
first question is how often does it

00:19:02,860 --> 00:19:07,720
change second question is are there any

00:19:04,570 --> 00:19:09,370
tests other than if that one of the EDA

00:19:07,720 --> 00:19:15,100
tools throws an error you know something

00:19:09,370 --> 00:19:19,900
went wrong so how long does each the

00:19:15,100 --> 00:19:29,440
total process take how often now that

00:19:19,900 --> 00:19:33,990
you've written this well it it's kind of

00:19:29,440 --> 00:19:33,990
stable now I might add further checks

00:19:34,140 --> 00:19:42,130
but problem in our group is that we tend

00:19:38,500 --> 00:19:45,399
to change tool sets from one chip

00:19:42,130 --> 00:19:47,440
project to the next but in case we don't

00:19:45,399 --> 00:19:49,210
I wanted to have a Perl database that we

00:19:47,440 --> 00:19:50,500
could consider intellectual property

00:19:49,210 --> 00:19:51,700
that we could leverage and say you

00:19:50,500 --> 00:19:53,260
remember the flow we're going to use the

00:19:51,700 --> 00:19:56,140
same flow some of the steps might be

00:19:53,260 --> 00:19:59,919
different but it's gonna operate the

00:19:56,140 --> 00:20:04,570
same but for one person working on a

00:19:59,919 --> 00:20:07,029
block it can take as short as is less

00:20:04,570 --> 00:20:10,090
than one day or it could take someone

00:20:07,029 --> 00:20:15,480
all week on our more complicated stuff

00:20:10,090 --> 00:20:18,520
and then we have 23 steps here they're

00:20:15,480 --> 00:20:21,760
all other sorts of verification we do to

00:20:18,520 --> 00:20:22,990
make sure we're done we weren't

00:20:21,760 --> 00:20:26,980
something that's close to like perl

00:20:22,990 --> 00:20:28,899
critic but it analyzes our output and

00:20:26,980 --> 00:20:30,460
says you should have used this cell this

00:20:28,899 --> 00:20:35,490
is the wrong kind of cell to use on a

00:20:30,460 --> 00:20:35,490
clock and all kinds of stuff like that

00:20:35,610 --> 00:20:38,610
yeah

00:20:39,540 --> 00:20:43,920
okay one quick restaurant sure

00:20:55,260 --> 00:21:14,520
I will say it is in my best interest to

00:21:09,180 --> 00:21:16,350
assess people's ability to code when we

00:21:14,520 --> 00:21:19,520
have them as interns and when they on

00:21:16,350 --> 00:21:23,310
board and I do have one person who's

00:21:19,520 --> 00:21:24,810
reasonable ly competent I don't say he

00:21:23,310 --> 00:21:28,020
could replace me but I can assign him

00:21:24,810 --> 00:21:29,640
pretty big task and he can do it but

00:21:28,020 --> 00:21:30,930
that's that's the kind of thing we

00:21:29,640 --> 00:21:34,910
supposedly have other groups and a

00:21:30,930 --> 00:21:34,910
company as big as Intel to do that but

00:21:43,769 --> 00:21:48,730
ideally we tried to use the other teams

00:21:46,629 --> 00:21:51,009
flow before and it's driving us crazy so

00:21:48,730 --> 00:21:56,460
we're actively seeking another flow but

00:21:51,009 --> 00:21:56,460
you didn't hear that from me all right

00:22:01,830 --> 00:22:07,210
well I am going to present it to another

00:22:04,269 --> 00:22:10,299
team in Munich but we're trying to use

00:22:07,210 --> 00:22:11,440
their maybe Python flow for other stuff

00:22:10,299 --> 00:22:19,619
so that's why I've been sitting in the

00:22:11,440 --> 00:22:19,619
Python classes all right thank you

00:22:22,670 --> 00:22:25,749

YouTube URL: https://www.youtube.com/watch?v=9QCoDda5vj4


