Title: Walt Mankowski - "Adventures in Dunderland: The Python Data Model for Perl Mongers"
Publication date: 2019-06-19
Playlist: TPC 2019 in Pittsburgh
Description: 
	Last year I left academia and got a job at a startup as a Python programmer. I thought I knew the language pretty well, but a few months in I was surprised to discover a language feature I hadn't known about. Python classes have special methods that can be used to have the classes pretend to be built-in types like lists and dictionaries. They're kind of a cross between tied variables and roles, but they're really their own thing. And if you're primarily interacting with packages via log messages they can be hard to discover if you don't know they exist.

This will be mostly a talk about Python, but where possible I'll compare things to similar features in Perl.
Captions: 
	00:00:00,030 --> 00:00:04,580
all right so I'm gonna I'm gonna get

00:00:01,410 --> 00:00:04,580
started please turn your phone's off

00:00:05,089 --> 00:00:09,690
whoever's phone was justice was just

00:00:07,140 --> 00:00:11,429
ringing so this talk is called

00:00:09,690 --> 00:00:13,740
adventures in Thunder land

00:00:11,429 --> 00:00:15,240
um pipeline data model for Perl mongers

00:00:13,740 --> 00:00:18,300
it's kind of a mouthful I'll talk about

00:00:15,240 --> 00:00:20,910
why it's called it you know later later

00:00:18,300 --> 00:00:23,460
on when I get to it so I want to start

00:00:20,910 --> 00:00:25,260
with a little bit about my background if

00:00:23,460 --> 00:00:28,529
you've been coming to my talks here at

00:00:25,260 --> 00:00:30,689
Yap C for the past few years I gave a

00:00:28,529 --> 00:00:32,700
talk about COBOL um a couple years ago

00:00:30,689 --> 00:00:35,640
and actually last year - last year I

00:00:32,700 --> 00:00:39,930
also gave a talk about punch cards which

00:00:35,640 --> 00:00:42,149
a lot of people liked but I've tried not

00:00:39,930 --> 00:00:43,500
to just talk about stuff like that's

00:00:42,149 --> 00:00:44,219
sort of way in the past although that's

00:00:43,500 --> 00:00:46,289
kind of cool

00:00:44,219 --> 00:00:47,940
like I love pearl as well I have this

00:00:46,289 --> 00:00:53,520
weird background I have a PhD in

00:00:47,940 --> 00:00:55,260
computer science and so this is I have

00:00:53,520 --> 00:00:56,820
this list so I like things other than

00:00:55,260 --> 00:00:58,350
pearl - as you can tell from the things

00:00:56,820 --> 00:01:00,629
I was talking about before so this is a

00:00:58,350 --> 00:01:04,939
list of all the languages I've worked on

00:01:00,629 --> 00:01:08,939
since my I had my PhD defense in 2012

00:01:04,939 --> 00:01:11,250
probably missing some things there but I

00:01:08,939 --> 00:01:13,080
also think that like since like probably

00:01:11,250 --> 00:01:14,790
all of us are in this in the same

00:01:13,080 --> 00:01:16,110
situation I mean maybe it's great if we

00:01:14,790 --> 00:01:17,400
can work on parole all the time but lots

00:01:16,110 --> 00:01:18,659
of us are kind of in an environment

00:01:17,400 --> 00:01:20,549
where there's lots of different

00:01:18,659 --> 00:01:21,720
languages right like someone's working

00:01:20,549 --> 00:01:23,820
parole maybe you're doing JavaScript

00:01:21,720 --> 00:01:25,590
maybe you're doing maybe you're not

00:01:23,820 --> 00:01:26,820
doing COBOL but you're like there's some

00:01:25,590 --> 00:01:28,350
chocolate there's all kinds of languages

00:01:26,820 --> 00:01:30,689
in your shop that you might have to work

00:01:28,350 --> 00:01:32,520
with right or you sort of lots of us

00:01:30,689 --> 00:01:33,780
might be interested in learning some

00:01:32,520 --> 00:01:36,240
different languages as well that's why I

00:01:33,780 --> 00:01:41,640
was kind of learning Swift and are in

00:01:36,240 --> 00:01:46,700
things like that so I had been in

00:01:41,640 --> 00:01:50,070
academia for about a decade and then

00:01:46,700 --> 00:01:53,490
then last year I found myself working at

00:01:50,070 --> 00:01:55,320
an Internet start-up I never made it out

00:01:53,490 --> 00:01:57,360
to the California office I think my

00:01:55,320 --> 00:01:59,040
impression was it was kind of like that

00:01:57,360 --> 00:02:00,960
and then the think one of the things

00:01:59,040 --> 00:02:05,009
about this job was that it was a Python

00:02:00,960 --> 00:02:06,180
shop and I felt I was probably at the

00:02:05,009 --> 00:02:07,979
stage where you were and I sort of

00:02:06,180 --> 00:02:08,759
dabbling with it but you know I had gone

00:02:07,979 --> 00:02:11,220
through all of the

00:02:08,759 --> 00:02:14,310
advent of curl of of code problems for

00:02:11,220 --> 00:02:16,500
the previous year I did them all in Perl

00:02:14,310 --> 00:02:19,349
and in Python both in Python 2 and in

00:02:16,500 --> 00:02:20,790
Python 3 so I was feeling which pretty

00:02:19,349 --> 00:02:23,640
much was just whether the print

00:02:20,790 --> 00:02:25,140
statement had parentheses or not and I

00:02:23,640 --> 00:02:28,590
was sickened I thought I'd do it pretty

00:02:25,140 --> 00:02:29,730
well at least well enough I figured I

00:02:28,590 --> 00:02:30,629
would learn some stuff on the job but I

00:02:29,730 --> 00:02:33,870
thought I knew it

00:02:30,629 --> 00:02:35,579
like pretty well right and you know it's

00:02:33,870 --> 00:02:38,099
not really all that different from Perl

00:02:35,579 --> 00:02:41,849
on C++ and Java which I knew a lot

00:02:38,099 --> 00:02:43,470
better and you know we're all kind of

00:02:41,849 --> 00:02:44,819
like that right like the way we can

00:02:43,470 --> 00:02:46,319
learn all these languages is that

00:02:44,819 --> 00:02:48,120
there's a lot of similarities between

00:02:46,319 --> 00:02:49,470
them right like you're like oh how do I

00:02:48,120 --> 00:02:53,190
make an object how do I do a for loop

00:02:49,470 --> 00:02:55,159
yeah right but now as we know from what

00:02:53,190 --> 00:02:58,859
this is of course one of America's

00:02:55,159 --> 00:03:00,629
foremost philosophers Donald Rumsfeld he

00:02:58,859 --> 00:03:06,060
has this famous quote about known knowns

00:03:00,629 --> 00:03:08,190
and unknown knowns in whatever and it's

00:03:06,060 --> 00:03:09,659
really as he says it's like the note the

00:03:08,190 --> 00:03:11,099
unknown knowns the ones we don't know

00:03:09,659 --> 00:03:13,680
about those are the ones that you really

00:03:11,099 --> 00:03:16,019
better really kind of catch you there's

00:03:13,680 --> 00:03:18,690
actually a term for this I learned

00:03:16,019 --> 00:03:20,760
called hypo cognition and that's the

00:03:18,690 --> 00:03:23,340
lack of a linguistic or cognitive

00:03:20,760 --> 00:03:25,079
representation for an object category or

00:03:23,340 --> 00:03:26,069
idea so that's kind of a big mouthful

00:03:25,079 --> 00:03:27,900
what does that mean I think there

00:03:26,069 --> 00:03:33,329
actually is a talk that's kind of all

00:03:27,900 --> 00:03:36,060
about this later on today a good idea a

00:03:33,329 --> 00:03:38,730
good sense of this is in in Russian so

00:03:36,060 --> 00:03:40,620
in in English we have one word for blue

00:03:38,730 --> 00:03:42,239
in Russian they have two words for blue

00:03:40,620 --> 00:03:44,879
they have a word for dark blue and a

00:03:42,239 --> 00:03:46,349
word for light blue so we have two words

00:03:44,879 --> 00:03:48,120
for red we have light bread which is

00:03:46,349 --> 00:03:50,370
pink and we have red which we call red

00:03:48,120 --> 00:03:51,569
so there have been studies that show

00:03:50,370 --> 00:03:53,940
that people who are native Russian

00:03:51,569 --> 00:03:55,769
speakers can differentiate between

00:03:53,940 --> 00:03:57,659
different shades of blue better than

00:03:55,769 --> 00:03:58,829
native English speakers because they

00:03:57,659 --> 00:04:00,659
just have that sense in their head that

00:03:58,829 --> 00:04:01,949
there's it's got a different word for it

00:04:00,659 --> 00:04:05,930
it's something you need to pay attention

00:04:01,949 --> 00:04:05,930
to it more and

00:04:07,480 --> 00:04:10,879
as I said so while we have all these

00:04:09,860 --> 00:04:13,940
languages they have a lot of

00:04:10,879 --> 00:04:17,570
similarities it's really like if the

00:04:13,940 --> 00:04:18,949
language has which so knowing that

00:04:17,570 --> 00:04:22,190
there's a lot of similarities can get

00:04:18,949 --> 00:04:23,540
you a certain way along the road to

00:04:22,190 --> 00:04:24,830
learning the language but it's really

00:04:23,540 --> 00:04:26,210
the things that are unique to the

00:04:24,830 --> 00:04:28,850
different languages that can really trip

00:04:26,210 --> 00:04:30,169
you up and especially if they're not in

00:04:28,850 --> 00:04:31,370
a language that you're already familiar

00:04:30,169 --> 00:04:35,410
with because you won't even be looking

00:04:31,370 --> 00:04:46,820
for that feature to be in the language

00:04:35,410 --> 00:04:49,160
so so so when I got to this job so there

00:04:46,820 --> 00:04:50,510
was Python which I figured I already

00:04:49,160 --> 00:04:52,760
knew pretty well but we have this like

00:04:50,510 --> 00:04:54,050
whole stack of other things so I've

00:04:52,760 --> 00:04:55,520
never got a job in a Python shop

00:04:54,050 --> 00:04:58,039
especially one that's doing we were

00:04:55,520 --> 00:05:01,430
doing micro service development there's

00:04:58,039 --> 00:05:04,280
this whole long stack of things and I

00:05:01,430 --> 00:05:08,360
obviously can't tell you some of these I

00:05:04,280 --> 00:05:10,940
know but where flask ends and swagger

00:05:08,360 --> 00:05:13,810
begins and it's it's kind of a mess I

00:05:10,940 --> 00:05:16,550
mean it's kind of like a good mess where

00:05:13,810 --> 00:05:17,840
it all went all sort of works it's kind

00:05:16,550 --> 00:05:19,760
of magical and you don't really have to

00:05:17,840 --> 00:05:21,380
know where it is but there's a bunch of

00:05:19,760 --> 00:05:23,300
things one problem is that because we're

00:05:21,380 --> 00:05:29,900
doing micro services and because it's

00:05:23,300 --> 00:05:31,340
already let me go back so we had

00:05:29,900 --> 00:05:32,419
everything running in docker already

00:05:31,340 --> 00:05:34,820
when we were doing development so it's

00:05:32,419 --> 00:05:37,840
already in like one shell and then last

00:05:34,820 --> 00:05:39,979
puts another shell kind of around it and

00:05:37,840 --> 00:05:41,840
it's in micro services and the only

00:05:39,979 --> 00:05:44,599
really good way to communicate with it

00:05:41,840 --> 00:05:47,020
is they either send is to send request

00:05:44,599 --> 00:05:49,460
to it and then print things out to the

00:05:47,020 --> 00:05:51,380
HTTP line that there's other ways to do

00:05:49,460 --> 00:05:52,849
it but that was that was a simplest way

00:05:51,380 --> 00:05:56,599
so just kind of keep that in your mind

00:05:52,849 --> 00:05:58,310
as like what was what the problem was

00:05:56,599 --> 00:05:59,479
because the problem is like how do you

00:05:58,310 --> 00:06:03,080
go in debug it because there's all these

00:05:59,479 --> 00:06:04,940
layers around it so I have this slide

00:06:03,080 --> 00:06:06,440
where I have a bunch of caveats on here

00:06:04,940 --> 00:06:08,620
and this is because the first time I

00:06:06,440 --> 00:06:10,970
gave this talk there were a bunch of

00:06:08,620 --> 00:06:12,560
people who actually did have experience

00:06:10,970 --> 00:06:15,860
with all those things that were on that

00:06:12,560 --> 00:06:17,360
slide and they started and they also

00:06:15,860 --> 00:06:18,560
were Python to

00:06:17,360 --> 00:06:19,819
programmers so they started asking me

00:06:18,560 --> 00:06:21,379
all these questions I didn't know the

00:06:19,819 --> 00:06:23,419
answer to so I decided I would put up

00:06:21,379 --> 00:06:25,460
this slide with a bunch of caveats one

00:06:23,419 --> 00:06:28,189
is that all the code I'm going to show

00:06:25,460 --> 00:06:32,300
you is in Python 3 it's not a Python - I

00:06:28,189 --> 00:06:34,610
don't really know Python - as well so I

00:06:32,300 --> 00:06:36,169
ripped this I've had a year ago that I'm

00:06:34,610 --> 00:06:38,439
still learning the Python ripple I still

00:06:36,169 --> 00:06:41,689
kind of them learning the Python Ripple

00:06:38,439 --> 00:06:43,039
because it was hard even to get to the

00:06:41,689 --> 00:06:44,659
ripple from the way we were developing

00:06:43,039 --> 00:06:47,090
things I know there's all kinds of

00:06:44,659 --> 00:06:49,969
tricks about things said that I'm still

00:06:47,090 --> 00:06:51,199
kind of learning um if you're familiar

00:06:49,969 --> 00:06:53,000
with these tools there are probably

00:06:51,199 --> 00:06:54,860
better ways to do what I'm showing you

00:06:53,000 --> 00:06:56,539
but ultimately it's a talk about the

00:06:54,860 --> 00:06:58,789
Python data model and not a talk about

00:06:56,539 --> 00:07:00,770
debugging flask micro-services this is

00:06:58,789 --> 00:07:03,500
what people wanted to turn my talk into

00:07:00,770 --> 00:07:04,639
the first time I made it like this is a

00:07:03,500 --> 00:07:11,750
great way you should go into what's

00:07:04,639 --> 00:07:15,319
going on like ok fine so so what they I

00:07:11,750 --> 00:07:18,349
came across this problem and I want to

00:07:15,319 --> 00:07:20,389
recreate it here so let's say we have a

00:07:18,349 --> 00:07:21,800
table and I know I have to apologize

00:07:20,389 --> 00:07:22,969
well there's no Python people here I

00:07:21,800 --> 00:07:24,830
know it's traditional you have to have

00:07:22,969 --> 00:07:28,159
some money Python references but that's

00:07:24,830 --> 00:07:29,690
not one of a half year so this was

00:07:28,159 --> 00:07:32,539
actually when I was doing this

00:07:29,690 --> 00:07:33,800
biomarkers but let's just say it's

00:07:32,539 --> 00:07:41,419
something simple with animals and how

00:07:33,800 --> 00:07:46,159
many legs they have and I know some

00:07:41,419 --> 00:07:49,129
starfish have more than five legs ok so

00:07:46,159 --> 00:07:50,449
it's pretty straightforward right we've

00:07:49,129 --> 00:07:58,099
all seen these things a thousand times

00:07:50,449 --> 00:08:01,550
so in Python we were using a tool called

00:07:58,099 --> 00:08:03,710
sequel alchemy and sequel alchemy

00:08:01,550 --> 00:08:07,039
looking at it from a perspective is kind

00:08:03,710 --> 00:08:09,199
of a combination of DB i + DB IX class

00:08:07,039 --> 00:08:13,339
meaning that you can either write plain

00:08:09,199 --> 00:08:16,419
SQL and or you can sort of make a whole

00:08:13,339 --> 00:08:18,550
model and we're get at it from the ORM

00:08:16,419 --> 00:08:21,250
so

00:08:18,550 --> 00:08:23,229
this is what this is going to do is that

00:08:21,250 --> 00:08:25,330
the SQL is at the top it's going to get

00:08:23,229 --> 00:08:30,030
it's going to execute the SQL fetch all

00:08:25,330 --> 00:08:30,030
throws and then print them out alright

00:08:30,389 --> 00:08:37,089
and when you do that this is what it

00:08:34,300 --> 00:08:39,130
prints out so I should point out in

00:08:37,089 --> 00:08:43,479
Python they have two different kinds of

00:08:39,130 --> 00:08:51,910
a race they have lists and tuples sorry

00:08:43,479 --> 00:08:53,890
oh ah I'm sorry about that so let me

00:08:51,910 --> 00:08:56,860
repeat that in Python so when you run

00:08:53,890 --> 00:09:01,750
that command it prints out does this

00:08:56,860 --> 00:09:05,079
come out there's two other kinds of

00:09:01,750 --> 00:09:06,579
lists there eraser lists and tuples the

00:09:05,079 --> 00:09:09,520
differences aren't all that important

00:09:06,579 --> 00:09:11,980
here except for here tuples have

00:09:09,520 --> 00:09:14,589
parentheses around them and lists have

00:09:11,980 --> 00:09:16,899
square brackets around them so that is a

00:09:14,589 --> 00:09:19,209
list of tuples and every one of the

00:09:16,899 --> 00:09:20,709
tuples is one of the rows that got

00:09:19,209 --> 00:09:22,740
pulled out so the first one is the AL

00:09:20,709 --> 00:09:29,470
and the spyder in the end and so on

00:09:22,740 --> 00:09:32,260
alright so what I want to do is turn is

00:09:29,470 --> 00:09:33,579
turn this into JSON because we're

00:09:32,260 --> 00:09:35,410
writing microservices that we have to

00:09:33,579 --> 00:09:42,910
output JSON to the thing that's calling

00:09:35,410 --> 00:09:44,800
us now JSON so I should say that Jason -

00:09:42,910 --> 00:09:47,440
actually has some really good tools for

00:09:44,800 --> 00:09:48,820
dealing with JSON affect JSON looks like

00:09:47,440 --> 00:09:51,279
Python dictionaries dictionaries are

00:09:48,820 --> 00:09:52,390
what Python calls hashes except you

00:09:51,279 --> 00:09:53,529
don't have to worry about like a pearl

00:09:52,390 --> 00:09:55,450
with references and things like that

00:09:53,529 --> 00:09:59,740
everything there's no references so if

00:09:55,450 --> 00:10:02,350
you print out if you look at a JSON and

00:09:59,740 --> 00:10:03,820
you look at the Python like dictionary

00:10:02,350 --> 00:10:06,430
representation of it it looks almost

00:10:03,820 --> 00:10:09,459
exactly the same so it's really easy to

00:10:06,430 --> 00:10:11,380
go back and forth with them but JSON of

00:10:09,459 --> 00:10:15,490
course is like all key value pairs all I

00:10:11,380 --> 00:10:16,390
had there were values but so I wanted to

00:10:15,490 --> 00:10:18,670
share I want to have a dictionary

00:10:16,390 --> 00:10:22,779
because dictionaries and JSON are almost

00:10:18,670 --> 00:10:24,820
the same now if I were writing Perl I

00:10:22,779 --> 00:10:26,260
could do in DB I I could do some of exit

00:10:24,820 --> 00:10:29,980
row hash ref and that's going to give me

00:10:26,260 --> 00:10:30,860
the keys and the values but I have here

00:10:29,980 --> 00:10:32,449
are the value

00:10:30,860 --> 00:10:34,459
I don't have the keys that go along with

00:10:32,449 --> 00:10:40,160
it so I was really sad I didn't know how

00:10:34,459 --> 00:10:42,259
to do it deal with that so I ended up

00:10:40,160 --> 00:10:46,309
reading this which is kind of a mess but

00:10:42,259 --> 00:10:50,360
when I did that okay my keys there are

00:10:46,309 --> 00:10:52,369
my values so Larry's taught us about how

00:10:50,360 --> 00:10:55,160
important hubris is in writing in

00:10:52,369 --> 00:10:56,749
writing code right and I was feeling

00:10:55,160 --> 00:10:58,429
pretty smug when I wrote this because

00:10:56,749 --> 00:11:01,549
okay let's walk let's step through this

00:10:58,429 --> 00:11:05,029
so because I wasn't getting the the keys

00:11:01,549 --> 00:11:10,220
back i hardwired the keys that I was

00:11:05,029 --> 00:11:14,809
getting and then zip what zip does is it

00:11:10,220 --> 00:11:16,339
goes through so the first parameter is

00:11:14,809 --> 00:11:19,160
the columns the second column is the row

00:11:16,339 --> 00:11:21,559
so it's kind of pair Y pair up first the

00:11:19,160 --> 00:11:22,999
first column and the first thing in the

00:11:21,559 --> 00:11:24,230
columns and the first thing in the row

00:11:22,999 --> 00:11:25,790
and then the second thing in the column

00:11:24,230 --> 00:11:27,170
the second thing in the row and the

00:11:25,790 --> 00:11:29,209
third thing in the column the third

00:11:27,170 --> 00:11:31,999
thing in the RUS was gonna make tuples

00:11:29,209 --> 00:11:35,839
of the keys and the values squash them

00:11:31,999 --> 00:11:36,920
all together and then so first of all I

00:11:35,839 --> 00:11:38,509
was really happy about this because I

00:11:36,920 --> 00:11:40,189
knew about zip I know about zip for

00:11:38,509 --> 00:11:41,959
about a decade I never had a reason to

00:11:40,189 --> 00:11:44,499
use it finally I had a reason to use it

00:11:41,959 --> 00:11:46,790
I was really psyched about this and then

00:11:44,499 --> 00:11:48,139
pipe the pipe that has these things

00:11:46,790 --> 00:11:50,059
called comprehensions they have list

00:11:48,139 --> 00:11:53,299
comprehensions which are kind of their

00:11:50,059 --> 00:11:55,189
version of nap this is even different

00:11:53,299 --> 00:11:56,779
this is a dictionary comprehension so

00:11:55,189 --> 00:11:58,639
this is kind of like a map but it's

00:11:56,779 --> 00:12:01,279
gonna turn it into a dictionary instead

00:11:58,639 --> 00:12:04,429
of into a list and so that's the weird

00:12:01,279 --> 00:12:05,749
that's the syntax for that and so I was

00:12:04,429 --> 00:12:07,490
pretty psyched about this because I'm

00:12:05,749 --> 00:12:09,860
still kind of learning Python learning

00:12:07,490 --> 00:12:11,360
the incidence of it so I put this

00:12:09,860 --> 00:12:13,369
together I'm like finally I figured out

00:12:11,360 --> 00:12:15,139
how to do this I should say because

00:12:13,369 --> 00:12:16,790
there's an ORM we have examples in the

00:12:15,139 --> 00:12:18,589
code of using the ORM thing because that

00:12:16,790 --> 00:12:20,929
already has the whole object model but

00:12:18,589 --> 00:12:22,129
every example I saw was using that and I

00:12:20,929 --> 00:12:25,699
thought that was the only way you could

00:12:22,129 --> 00:12:27,860
do it so I wrote code like this I did

00:12:25,699 --> 00:12:29,629
the pull request and one of my teammates

00:12:27,860 --> 00:12:32,169
said you know that's really cool Walt

00:12:29,629 --> 00:12:38,269
but why didn't you just call dict

00:12:32,169 --> 00:12:40,100
like huh so dict is the constructor for

00:12:38,269 --> 00:12:42,290
dictionaries so I went through the

00:12:40,100 --> 00:12:43,639
documentation and there's a lot of ways

00:12:42,290 --> 00:12:44,360
to make dictionaries right you can make

00:12:43,639 --> 00:12:45,740
an empty diction

00:12:44,360 --> 00:12:49,550
like this two different ways to make

00:12:45,740 --> 00:12:50,660
empty dictionaries there's a whole

00:12:49,550 --> 00:12:52,850
different way whole bunch of different

00:12:50,660 --> 00:12:56,209
ways to construct them you can actually

00:12:52,850 --> 00:12:57,560
give the key named parameters and it'll

00:12:56,209 --> 00:12:59,329
it'll figure that all out if you ever

00:12:57,560 --> 00:13:01,730
looking through pythons documentation

00:12:59,329 --> 00:13:03,500
you see something that says kW Ark

00:13:01,730 --> 00:13:06,050
that's what it means it means you can do

00:13:03,500 --> 00:13:07,910
something like this I don't know why the

00:13:06,050 --> 00:13:09,649
any water will do that but you can you

00:13:07,910 --> 00:13:13,040
can this is the sort of normal way that

00:13:09,649 --> 00:13:14,450
people construct dictionaries you can

00:13:13,040 --> 00:13:17,060
construct it from tuples which is more

00:13:14,450 --> 00:13:20,360
or less what that that zip command was

00:13:17,060 --> 00:13:22,459
doing you can you can zip it together

00:13:20,360 --> 00:13:24,440
like that you can construct a dick from

00:13:22,459 --> 00:13:28,160
another dick you can just assign them

00:13:24,440 --> 00:13:29,630
but like none of them were doing that as

00:13:28,160 --> 00:13:31,339
we say people who say there's only one

00:13:29,630 --> 00:13:33,170
way to do in a Python there's a lot of

00:13:31,339 --> 00:13:34,880
ways to make dictionaries which kind of

00:13:33,170 --> 00:13:35,839
makes sense because there's you want to

00:13:34,880 --> 00:13:37,070
be able be able to make them in

00:13:35,839 --> 00:13:42,950
different ways for different positions

00:13:37,070 --> 00:13:44,899
different situations none of these have

00:13:42,950 --> 00:13:46,279
keys all of them have just have the

00:13:44,899 --> 00:13:48,200
values and I said well none of these

00:13:46,279 --> 00:13:52,730
were telling me how to get the keys so

00:13:48,200 --> 00:13:55,250
in desperation I said let me just take

00:13:52,730 --> 00:13:59,949
these lists of tuples and called dict on

00:13:55,250 --> 00:13:59,949
it and see what happens and when I did

00:14:00,730 --> 00:14:12,560
dictionaries back and so then I said so

00:14:10,760 --> 00:14:15,199
Python lets you do introspection so

00:14:12,560 --> 00:14:17,839
let's look at what the types of each of

00:14:15,199 --> 00:14:20,810
these rows are and when I did that it

00:14:17,839 --> 00:14:24,730
said each of these are sequel alchemy

00:14:20,810 --> 00:14:24,730
that engine that result that row proxy

00:14:25,870 --> 00:14:31,160
so basically what Python is doing what

00:14:29,510 --> 00:14:32,930
sequel alchemy doing is cheating it

00:14:31,160 --> 00:14:34,519
makes it looks like look like it's an

00:14:32,930 --> 00:14:37,339
array of tuples but really it's an

00:14:34,519 --> 00:14:39,230
object that when you go to when you call

00:14:37,339 --> 00:14:40,820
dict on it it knows enough flu because

00:14:39,230 --> 00:14:42,740
it knows what the key with the keys are

00:14:40,820 --> 00:14:44,089
and it can use them to get kind of

00:14:42,740 --> 00:14:45,890
constructed back in and we'll talk about

00:14:44,089 --> 00:14:47,899
like how you go about doing that and the

00:14:45,890 --> 00:14:52,060
way you go about doing it is using these

00:14:47,899 --> 00:14:54,770
things called special methods so

00:14:52,060 --> 00:14:56,300
generally so special methods always

00:14:54,770 --> 00:14:56,760
start with double they start and end

00:14:56,300 --> 00:14:59,400
with

00:14:56,760 --> 00:15:00,720
double underscores so if you use any

00:14:59,400 --> 00:15:04,050
Python at all the one you've probably

00:15:00,720 --> 00:15:07,560
seen familiar with as an it an it is

00:15:04,050 --> 00:15:09,480
like the new method for a class and

00:15:07,560 --> 00:15:11,280
that's underscore underscore underscore

00:15:09,480 --> 00:15:13,350
underscore and then whatever parameters

00:15:11,280 --> 00:15:14,670
you want to pass in so generally you

00:15:13,350 --> 00:15:16,200
would never call any of them except for

00:15:14,670 --> 00:15:20,040
an it where you might call your super

00:15:16,200 --> 00:15:23,550
classes in it the other one you might

00:15:20,040 --> 00:15:26,940
have seen is STR and that stringify is

00:15:23,550 --> 00:15:29,340
your class the instance of your class so

00:15:26,940 --> 00:15:31,770
and they really there's there's dozens

00:15:29,340 --> 00:15:35,550
of these and they're really like the one

00:15:31,770 --> 00:15:37,650
of the keys to rating not only idiomatic

00:15:35,550 --> 00:15:41,820
Python but Python that code that in

00:15:37,650 --> 00:15:46,080
classes that work like be the internal

00:15:41,820 --> 00:15:47,370
classes and objects and types so what to

00:15:46,080 --> 00:15:51,810
call them they have these you have a lot

00:15:47,370 --> 00:15:55,050
of names the documentation calls them

00:15:51,810 --> 00:15:57,540
special method names I've also seen one

00:15:55,050 --> 00:16:00,720
called magic methods and some people

00:15:57,540 --> 00:16:03,090
call them double underscore methods but

00:16:00,720 --> 00:16:04,410
that's kind of a mouthful so it gets

00:16:03,090 --> 00:16:07,770
abbreviated sometimes the Thunderer

00:16:04,410 --> 00:16:11,340
methods and that's how I came up with

00:16:07,770 --> 00:16:13,110
the name of the talk so what are they so

00:16:11,340 --> 00:16:14,520
there's sort of they're sort of odd

00:16:13,110 --> 00:16:17,130
they're all like their own beasts so

00:16:14,520 --> 00:16:21,680
they're a bit like the way interfaces

00:16:17,130 --> 00:16:24,060
work in Java or roles work in mousse

00:16:21,680 --> 00:16:28,380
they're also kind of like virtual

00:16:24,060 --> 00:16:30,780
methods in C++ ish or like abstract base

00:16:28,380 --> 00:16:34,440
classes or sometimes they're a little

00:16:30,780 --> 00:16:38,010
bit like overloaded operators but

00:16:34,440 --> 00:16:39,630
they're unlike like the way they work in

00:16:38,010 --> 00:16:41,130
a lot of languages are really loosely

00:16:39,630 --> 00:16:42,510
coupled so they get called if they exist

00:16:41,130 --> 00:16:44,880
if they don't exist they don't get

00:16:42,510 --> 00:16:47,970
called and some default action happens

00:16:44,880 --> 00:16:49,410
so somebody pointed out to me that

00:16:47,970 --> 00:16:52,860
they're actually a lot like the way that

00:16:49,410 --> 00:16:54,780
methods or interfaces work in go because

00:16:52,860 --> 00:16:57,720
go doesn't really have objects they have

00:16:54,780 --> 00:17:00,060
thus trucks with methods that you can

00:16:57,720 --> 00:17:01,260
kind of attach onto them later on and so

00:17:00,060 --> 00:17:04,490
it's they're a bit like that too but

00:17:01,260 --> 00:17:07,180
they're really like their own thing so

00:17:04,490 --> 00:17:10,150
let's look at some examples so

00:17:07,180 --> 00:17:12,220
a simple example here we have a name

00:17:10,150 --> 00:17:12,700
class it has a first name and a last

00:17:12,220 --> 00:17:14,740
name

00:17:12,700 --> 00:17:16,480
you always have to have self being the

00:17:14,740 --> 00:17:18,160
first parameter in Python and then it

00:17:16,480 --> 00:17:21,160
itself and then first and then last

00:17:18,160 --> 00:17:24,670
itself that first two first and itself

00:17:21,160 --> 00:17:28,720
that last the last you've constructed

00:17:24,670 --> 00:17:30,730
using something like that and then you

00:17:28,720 --> 00:17:32,350
can print either if you print name that

00:17:30,730 --> 00:17:34,300
first you should get Bruce if you print

00:17:32,350 --> 00:17:37,900
name that second you'll get second

00:17:34,300 --> 00:17:40,030
you'll get Wayne and then let's see but

00:17:37,900 --> 00:17:42,490
if you try to just print name itself you

00:17:40,030 --> 00:17:48,610
get this yeah something with a hex

00:17:42,490 --> 00:17:49,930
string okay so again an it is is like

00:17:48,610 --> 00:17:52,390
new and then hopefully that's pretty

00:17:49,930 --> 00:17:56,050
straightforward so if we wanted to print

00:17:52,390 --> 00:17:59,170
out something other than a big ugly hex

00:17:56,050 --> 00:18:02,530
string what we what you do is you make a

00:17:59,170 --> 00:18:05,140
new another method called dunder STR and

00:18:02,530 --> 00:18:07,630
what that's job is doing is take

00:18:05,140 --> 00:18:09,100
whatever is in your class and turn it

00:18:07,630 --> 00:18:11,950
into a string and whoever way you want

00:18:09,100 --> 00:18:15,250
to do it in this case I'm gonna just so

00:18:11,950 --> 00:18:16,630
that F that F and the double quote at

00:18:15,250 --> 00:18:18,310
the beginning that's one of the new

00:18:16,630 --> 00:18:20,500
things that's in Python 3 that's not a

00:18:18,310 --> 00:18:21,730
Python 2 it lets you do string

00:18:20,500 --> 00:18:24,880
interpolation variable interpolation

00:18:21,730 --> 00:18:27,550
inside of the string so anything that's

00:18:24,880 --> 00:18:31,300
inside curly braces inside a F when you

00:18:27,550 --> 00:18:32,650
have an F opening quote endquote that

00:18:31,300 --> 00:18:36,130
anything inside there in curly braces

00:18:32,650 --> 00:18:38,800
gets interpolated so I'm just going to

00:18:36,130 --> 00:18:41,230
make a string with self that first space

00:18:38,800 --> 00:18:43,270
and then soft that last and now when I

00:18:41,230 --> 00:18:46,720
print it out I get through swing that's

00:18:43,270 --> 00:18:48,220
nice so unlike a lot of languages for

00:18:46,720 --> 00:18:50,890
most languages Python actually has two

00:18:48,220 --> 00:18:55,230
different ways to string of five classes

00:18:50,890 --> 00:18:59,580
they have okay did I put some pre swing

00:18:55,230 --> 00:19:04,500
they have another method called re PR

00:18:59,580 --> 00:19:06,970
the difference there's a few differences

00:19:04,500 --> 00:19:08,950
SDR is what gets called when you try to

00:19:06,970 --> 00:19:12,250
print something or treat it as a string

00:19:08,950 --> 00:19:14,200
re PR is what gets printed out if you're

00:19:12,250 --> 00:19:18,130
in the Python repple how I'll show you

00:19:14,200 --> 00:19:19,450
this in a second but if you're just in

00:19:18,130 --> 00:19:20,060
the ripple and you say you have a

00:19:19,450 --> 00:19:22,070
variable as a

00:19:20,060 --> 00:19:24,230
class and you say the class is like sea

00:19:22,070 --> 00:19:26,470
and you just type see it will print out

00:19:24,230 --> 00:19:32,480
it will by default print out the re PR

00:19:26,470 --> 00:19:34,340
it'll call re PR and not STR so what

00:19:32,480 --> 00:19:37,010
that really does is it gives you what a

00:19:34,340 --> 00:19:39,440
lot of people do is have re PR give a

00:19:37,010 --> 00:19:41,510
more kind of internal representation of

00:19:39,440 --> 00:19:44,930
the class whereas STR will be more of a

00:19:41,510 --> 00:19:46,520
kind of human readable think so so here

00:19:44,930 --> 00:19:51,860
I'm just I'm just trying to make it look

00:19:46,520 --> 00:19:53,810
like you would when you print it out it

00:19:51,860 --> 00:19:55,820
looks like what you would call to

00:19:53,810 --> 00:19:58,610
construct the instance of the class with

00:19:55,820 --> 00:20:01,310
those parameters in it so does that make

00:19:58,610 --> 00:20:05,510
sense that when following along so far

00:20:01,310 --> 00:20:07,910
are any questions yeah if you have both

00:20:05,510 --> 00:20:09,290
it depends how you're using it if you

00:20:07,910 --> 00:20:12,170
try to string a thigh the question is

00:20:09,290 --> 00:20:16,010
what happens you have both if you try to

00:20:12,170 --> 00:20:19,850
stringify it then it will use STR and if

00:20:16,010 --> 00:20:22,850
you you can call our EP are directly

00:20:19,850 --> 00:20:25,190
itself then it will call that if you're

00:20:22,850 --> 00:20:30,050
in the ripple it will use the local re

00:20:25,190 --> 00:20:32,210
PR okay so at this point I'm going to I

00:20:30,050 --> 00:20:33,890
want to dropped out of the slides for a

00:20:32,210 --> 00:20:35,030
bit and then we'll come back to the

00:20:33,890 --> 00:20:36,680
slides at the end but I'm going to just

00:20:35,030 --> 00:20:38,030
go through a whole bunch of examples now

00:20:36,680 --> 00:20:39,230
because I think it's easier to kind of

00:20:38,030 --> 00:20:43,060
see what's going on and kind of play

00:20:39,230 --> 00:20:43,060
around with it so

00:20:51,580 --> 00:20:56,860
okay so this is can everyone read that

00:20:54,220 --> 00:20:59,279
in the back because I could so this is

00:20:56,860 --> 00:21:04,440
basically the code that I just had right

00:20:59,279 --> 00:21:08,909
so let's hop over here and say Python

00:21:04,440 --> 00:21:08,909
can you read this is that good

00:21:29,230 --> 00:21:36,169
so because I'm in the repple and I take

00:21:32,150 --> 00:21:40,100
ten it prints out it calls re PR if I

00:21:36,169 --> 00:21:45,919
say something like print and I'll get

00:21:40,100 --> 00:21:49,580
that I don't think there's anything else

00:21:45,919 --> 00:21:55,000
I mean I could go in and let's say let's

00:21:49,580 --> 00:21:55,000
say that I comment this out how did I

00:21:59,040 --> 00:22:02,930
I forget

00:22:05,210 --> 00:22:08,980
so let's do that again

00:22:14,500 --> 00:22:19,280
so here in the repple because i don't

00:22:17,180 --> 00:22:25,400
have it it just prints out it puts out

00:22:19,280 --> 00:22:27,140
the hex string again but i can say so

00:22:25,400 --> 00:22:29,510
okay so that's one everyone kind of

00:22:27,140 --> 00:22:35,170
following it so let's make things a

00:22:29,510 --> 00:22:35,170
little bit more interesting let's

00:22:40,520 --> 00:22:46,160
alright ok so here I want to make a cool

00:22:43,940 --> 00:22:50,660
I wanted to make a class that acts like

00:22:46,160 --> 00:22:52,640
a Python list so it's cheating a bit

00:22:50,660 --> 00:22:53,150
because I'm going to start where's my

00:22:52,640 --> 00:22:59,330
cursor

00:22:53,150 --> 00:23:00,920
there's my cursor okay so in an it I say

00:22:59,330 --> 00:23:02,600
stuff that a isn't a race I'm gonna

00:23:00,920 --> 00:23:03,800
hardwire an array in here for now I'll

00:23:02,600 --> 00:23:08,620
have some other examples where I'm not

00:23:03,800 --> 00:23:12,290
doing that well make it really easy so

00:23:08,620 --> 00:23:16,220
double double underscore Len returns the

00:23:12,290 --> 00:23:17,210
length of your of whatever it is that

00:23:16,220 --> 00:23:18,679
you're calling for that's one of the

00:23:17,210 --> 00:23:21,380
standard things so everything has a Len

00:23:18,679 --> 00:23:23,240
for a string set lens okay you know

00:23:21,380 --> 00:23:26,210
lists have lens and everything has lens

00:23:23,240 --> 00:23:27,920
in it so that's just going to return the

00:23:26,210 --> 00:23:31,160
length of a so that's going to return

00:23:27,920 --> 00:23:36,290
six these are six things in their get

00:23:31,160 --> 00:23:39,830
item that's called if you want to

00:23:36,290 --> 00:23:43,160
reference a something in there so that's

00:23:39,830 --> 00:23:46,309
gonna say give me the il iment of the

00:23:43,160 --> 00:23:50,510
array and it's going to return that and

00:23:46,309 --> 00:23:52,730
then all su r and r AP are doing are

00:23:50,510 --> 00:23:55,700
just string of fiying in wrapper

00:23:52,730 --> 00:23:57,650
applying it so okay pretty

00:23:55,700 --> 00:24:00,040
straightforward I really I'm adding

00:23:57,650 --> 00:24:04,360
these two new methods Len and get item

00:24:00,040 --> 00:24:04,360
right so

00:24:15,780 --> 00:24:23,970
okay so okay so now I've made I've made

00:24:20,460 --> 00:24:26,510
a an instance of that if I just type

00:24:23,970 --> 00:24:28,590
that out that's what's in there right

00:24:26,510 --> 00:24:30,270
you can read can read read that on the

00:24:28,590 --> 00:24:34,200
bottom in the back should I raise it up

00:24:30,270 --> 00:24:36,330
a little bit okay but I can say I can

00:24:34,200 --> 00:24:38,640
treat it like an array I can say if I

00:24:36,330 --> 00:24:43,230
let's say I could say Len of FA and it

00:24:38,640 --> 00:24:45,870
should say six I can reference it I can

00:24:43,230 --> 00:24:49,320
say I say sub zero and it's going to

00:24:45,870 --> 00:24:51,870
give me three I can say FA sub minus one

00:24:49,320 --> 00:24:59,010
and that gives me the last one I can do

00:24:51,870 --> 00:25:00,240
slices if a sub do that that's because

00:24:59,010 --> 00:25:10,050
they only go to the one after that so

00:25:00,240 --> 00:25:12,060
five I can and I can sort it all of this

00:25:10,050 --> 00:25:13,920
just by adding those two methods so it's

00:25:12,060 --> 00:25:16,500
kind of cool that you can get all of

00:25:13,920 --> 00:25:18,060
that just by just by adding those two

00:25:16,500 --> 00:25:19,200
things because it knows it knows enough

00:25:18,060 --> 00:25:20,490
to do everything else you can you can

00:25:19,200 --> 00:25:22,280
treat it as an iterator so you can say

00:25:20,490 --> 00:25:25,369
for I in

00:25:22,280 --> 00:25:25,369
[Music]

00:25:29,090 --> 00:25:33,350
and you can print it all out one item at

00:25:31,520 --> 00:25:39,370
a time all by just adding those two

00:25:33,350 --> 00:25:43,540
methods so that's pretty cool right so

00:25:39,370 --> 00:25:48,730
any questions any questions on that

00:25:43,540 --> 00:25:48,730
alright so let's look at another example

00:25:49,240 --> 00:25:58,550
oh I'm sorry let me do I want to do one

00:25:55,820 --> 00:25:59,920
more example so in addition to that we

00:25:58,550 --> 00:26:02,870
can

00:25:59,920 --> 00:26:04,220
there's also another method called just

00:26:02,870 --> 00:26:06,490
like there's get item II there's set

00:26:04,220 --> 00:26:06,490
item

00:26:28,740 --> 00:26:37,799
I'll show you that again okay so set

00:26:34,679 --> 00:26:39,750
item it takes two parameters it takes

00:26:37,799 --> 00:26:41,429
the one the position where you want to

00:26:39,750 --> 00:26:44,179
add it and then what you want the value

00:26:41,429 --> 00:26:48,529
to be I'm sorry

00:26:44,179 --> 00:26:48,529
Soph that a you're right and thank you

00:26:49,220 --> 00:26:52,820
know dollar symbols

00:27:17,310 --> 00:27:24,180
but now I can say if a wand

00:27:34,830 --> 00:27:39,659
let's let's get dammit

00:27:46,170 --> 00:27:50,780
it is this is the adventure part of it

00:27:48,300 --> 00:27:50,780
where I

00:28:11,130 --> 00:28:16,799
let's get that off because I don't think

00:28:12,720 --> 00:28:19,159
that was code of conduct appropriate

00:28:16,799 --> 00:28:19,159
area

00:28:23,260 --> 00:28:28,560
clear

00:28:25,690 --> 00:28:28,560
my fun

00:28:45,390 --> 00:28:53,020
there we go yay okay what I wanted to

00:28:51,640 --> 00:28:54,970
show you before let's go back to that

00:28:53,020 --> 00:28:56,620
for a second so let's let's remove this

00:28:54,970 --> 00:28:58,330
again cuz that worked but let's just

00:28:56,620 --> 00:29:00,750
let's just lead and see what happens if

00:28:58,330 --> 00:29:00,750
it's not there

00:29:10,940 --> 00:29:16,010
so if you try to do that you don't have

00:29:13,289 --> 00:29:19,470
that method you get you get a type error

00:29:16,010 --> 00:29:20,850
that says fake array does not support

00:29:19,470 --> 00:29:22,559
item assignment and what you have to do

00:29:20,850 --> 00:29:25,679
is do what I just did was it with to be

00:29:22,559 --> 00:29:26,789
to be this item and said so okay so

00:29:25,679 --> 00:29:37,289
let's look at let's look at another

00:29:26,789 --> 00:29:40,770
example evens up to okay so what's

00:29:37,289 --> 00:29:41,940
what's going on here is I did what I

00:29:40,770 --> 00:29:43,200
wouldn't have an example where I didn't

00:29:41,940 --> 00:29:45,270
have a hardwired away so if you don't

00:29:43,200 --> 00:29:48,659
have a hardwired array then you have to

00:29:45,270 --> 00:29:50,760
do a little bit more work so here what I

00:29:48,659 --> 00:29:53,190
want to have is the I want to have to

00:29:50,760 --> 00:29:56,909
eat all the even numbers up to 10 so in

00:29:53,190 --> 00:29:58,020
Mayan it I say well if something if the

00:29:56,909 --> 00:29:59,580
placing in something that's that's

00:29:58,020 --> 00:30:00,929
negative I just want to raise it value

00:29:59,580 --> 00:30:05,760
error because it's a bad parameter and

00:30:00,929 --> 00:30:07,830
although I just save what this is so Len

00:30:05,760 --> 00:30:09,570
for Len for that I have to do some math

00:30:07,830 --> 00:30:11,520
to figure out what that is so that's

00:30:09,570 --> 00:30:15,929
just I'm gonna divide it by two and then

00:30:11,520 --> 00:30:18,450
get item is a little trickier so if I

00:30:15,929 --> 00:30:20,010
pass the length then I return an index

00:30:18,450 --> 00:30:22,799
error index error means he tried to read

00:30:20,010 --> 00:30:25,140
past the end of an array otherwise I

00:30:22,799 --> 00:30:29,120
want to return I times two and if I

00:30:25,140 --> 00:30:29,120
print this out no

00:30:35,429 --> 00:30:39,940
so the first time I tried to print it

00:30:37,750 --> 00:30:43,270
out it because I don't have an STR

00:30:39,940 --> 00:30:45,640
method here I just got this I just got

00:30:43,270 --> 00:30:50,230
this but it did let me iterate over it

00:30:45,640 --> 00:30:52,090
so I can go and what happens is it it

00:30:50,230 --> 00:30:53,980
prints 0 and then 2 and then 4 and then

00:30:52,090 --> 00:30:55,270
6 and 8 and 10 and then once it gets 10

00:30:53,980 --> 00:30:57,130
then it's beyond there it raises an

00:30:55,270 --> 00:30:59,049
index error and then the index error

00:30:57,130 --> 00:31:00,370
says stop the iteration so that's how

00:30:59,049 --> 00:31:03,520
you stop an iteration if you don't have

00:31:00,370 --> 00:31:05,789
an array that's already building so it's

00:31:03,520 --> 00:31:08,700
it 0 2 4 6 8 10

00:31:05,789 --> 00:31:12,159
ok so that's how you deal with arrays

00:31:08,700 --> 00:31:21,760
for dictionaries it's a little bit more

00:31:12,159 --> 00:31:22,929
work so let's look at test so so we

00:31:21,760 --> 00:31:24,940
still haven't talked about how we do

00:31:22,929 --> 00:31:26,020
that the thing that sequel alchemy was

00:31:24,940 --> 00:31:29,130
doing but we'll get a little bit closer

00:31:26,020 --> 00:31:29,130
with this so

00:31:33,090 --> 00:31:35,970
the way I'm going to fake this

00:31:34,530 --> 00:31:37,770
dictionary is actually I'm going to make

00:31:35,970 --> 00:31:40,350
a dictionary but I'm going to make it

00:31:37,770 --> 00:31:41,640
from keys and values so my keys are

00:31:40,350 --> 00:31:43,080
three animals and these are how many

00:31:41,640 --> 00:31:44,610
legs they have I'm going to make a

00:31:43,080 --> 00:31:46,110
dictionary by zipping the two of them

00:31:44,610 --> 00:31:50,370
together so we already saw these

00:31:46,110 --> 00:31:51,870
examples before so the length I can take

00:31:50,370 --> 00:31:54,960
the length of either one of these so

00:31:51,870 --> 00:32:04,740
that gives me that to get an individual

00:31:54,960 --> 00:32:07,260
item it turns out that it's still yeah

00:32:04,740 --> 00:32:08,970
what I want to do here for the is I'm

00:32:07,260 --> 00:32:11,190
still going to just get the ice item but

00:32:08,970 --> 00:32:16,290
I want to get the ice key and the ice

00:32:11,190 --> 00:32:22,200
value both and so that's what that's

00:32:16,290 --> 00:32:23,640
going to do and because when I print out

00:32:22,200 --> 00:32:26,610
that I'm going to get keys and values

00:32:23,640 --> 00:32:28,650
and a list of keys and values that can

00:32:26,610 --> 00:32:32,220
turn that into a dict and I'll get it

00:32:28,650 --> 00:32:35,100
out that way so and then SCR is just I

00:32:32,220 --> 00:32:36,750
think I think s what STR is doing here

00:32:35,100 --> 00:32:43,530
is it's trying to make it look like it's

00:32:36,750 --> 00:32:46,410
a list of tuples so this if you returned

00:32:43,530 --> 00:32:48,120
more than one thing from a function it

00:32:46,410 --> 00:32:51,180
returns it as a tuple so that's what

00:32:48,120 --> 00:32:53,510
that does and let's just run this and

00:32:51,180 --> 00:32:53,510
see what it does

00:32:58,090 --> 00:33:01,090
sir

00:33:02,330 --> 00:33:05,330
tested

00:33:10,680 --> 00:33:15,210
okay so what it printed out here was the

00:33:12,870 --> 00:33:16,890
first time I printed out what the class

00:33:15,210 --> 00:33:19,340
was and when it does that it's breast

00:33:16,890 --> 00:33:19,340
prints al

00:33:26,390 --> 00:33:29,900
right I think what yeah I think here I

00:33:28,250 --> 00:33:31,220
just wanted to print out the values of

00:33:29,900 --> 00:33:33,380
it because that's what it's doing here

00:33:31,220 --> 00:33:35,840
all I'm doing is getting the getting the

00:33:33,380 --> 00:33:39,070
values so that's why I have four six

00:33:35,840 --> 00:33:41,990
eight but I when I when it turns into a

00:33:39,070 --> 00:33:43,790
dictionary because as it goes through

00:33:41,990 --> 00:33:44,900
and gets each one of the items it has a

00:33:43,790 --> 00:33:46,670
tuple and it can turn that into a

00:33:44,900 --> 00:33:49,220
dictionary and then I think at the end I

00:33:46,670 --> 00:33:51,260
ated over it just to prove that so when

00:33:49,220 --> 00:33:54,860
I integrate over it I get the dog I get

00:33:51,260 --> 00:33:56,030
dog four and six white or eight so maybe

00:33:54,860 --> 00:33:58,640
I should have had this example after

00:33:56,030 --> 00:34:01,520
that one but does that make sense what's

00:33:58,640 --> 00:34:02,720
going on here so what I'm returning for

00:34:01,520 --> 00:34:05,210
each one of the things I returned a

00:34:02,720 --> 00:34:07,220
tuple of the key and the value and then

00:34:05,210 --> 00:34:09,020
I can use that to turn it in think but

00:34:07,220 --> 00:34:10,400
when I print it out yeah I think that

00:34:09,020 --> 00:34:12,320
was the example I wanted to say that

00:34:10,400 --> 00:34:15,650
when I print it out I just get the

00:34:12,320 --> 00:34:16,790
values but you can use trying to have

00:34:15,650 --> 00:34:19,100
example where you do two different

00:34:16,790 --> 00:34:20,930
things and you could sometimes you can

00:34:19,100 --> 00:34:22,340
get the just the values and some buckets

00:34:20,930 --> 00:34:25,700
of keys and values and put them all

00:34:22,340 --> 00:34:27,590
together and get it ticked out of it the

00:34:25,700 --> 00:34:31,640
magic is in the gate item yeah

00:34:27,590 --> 00:34:33,620
but it turns out that that's not the way

00:34:31,640 --> 00:34:37,190
this equal alchemy works sequel alchemy

00:34:33,620 --> 00:34:43,700
uses a feature that I have not seen

00:34:37,190 --> 00:34:50,900
documented anywhere else so sequel

00:34:43,700 --> 00:34:53,920
alchemy calls um uses this feature so

00:34:50,900 --> 00:34:58,790
the thing that I've added here is is

00:34:53,920 --> 00:35:01,400
keys so if you have a method called keys

00:34:58,790 --> 00:35:03,470
not Thunder keys but just keys and you

00:35:01,400 --> 00:35:05,870
call dict on it it will call the keys

00:35:03,470 --> 00:35:07,790
thing and get the keys that way and then

00:35:05,870 --> 00:35:09,170
use each one of those keys and iterate

00:35:07,790 --> 00:35:13,190
over it and get the corresponding value

00:35:09,170 --> 00:35:16,600
for it so I think that's what happens

00:35:13,190 --> 00:35:16,600
when I run the Cystic he's

00:35:18,980 --> 00:35:21,980
yeah

00:35:25,569 --> 00:35:29,450
right so one let's look at what I'm

00:35:28,670 --> 00:35:33,650
doing here

00:35:29,450 --> 00:35:38,349
so I create an instance of the class and

00:35:33,650 --> 00:35:38,349
then I print it out and the first time I

00:35:39,069 --> 00:35:53,980
and let's look and get why is that what

00:35:48,440 --> 00:35:53,980
did it call do they call this

00:35:57,009 --> 00:36:00,549
maybe I didn't save it

00:36:03,590 --> 00:36:07,180
there we go so

00:36:09,420 --> 00:36:13,890
sorry this example isn't going quick

00:36:17,369 --> 00:36:24,019
it's coming up that one okay this is

00:36:19,739 --> 00:36:24,019
what happened so let's just ignore that

00:36:26,809 --> 00:36:36,180
save that and run again okay so what

00:36:31,920 --> 00:36:39,450
happened here was when the first time I

00:36:36,180 --> 00:36:45,569
printed it out it's just the thing

00:36:39,450 --> 00:36:47,309
itself it it's gonna it just calls

00:36:45,569 --> 00:36:49,170
getitem for the first one and the second

00:36:47,309 --> 00:36:51,150
one the third one so when it pet so I'm

00:36:49,170 --> 00:36:55,670
pressing in with the key what gets

00:36:51,150 --> 00:36:59,460
passed in is Kay and so it it passes in

00:36:55,670 --> 00:37:02,190
here it passes in zero one and two and

00:36:59,460 --> 00:37:05,279
so I get a list of tuples out of it like

00:37:02,190 --> 00:37:06,989
that dog cat like that but the second

00:37:05,279 --> 00:37:11,630
time when I call dicta on it

00:37:06,989 --> 00:37:11,630
it calls keys first

00:37:18,700 --> 00:37:21,820
[Music]

00:37:22,630 --> 00:37:30,680
dammit what did you do did you put a tab

00:37:24,980 --> 00:37:41,540
in here it did this is what I get for

00:37:30,680 --> 00:37:43,490
trying to use a new a new editor so it

00:37:41,540 --> 00:37:44,960
calls keys and the keys returns what the

00:37:43,490 --> 00:37:46,730
keys are in there and then it calls get

00:37:44,960 --> 00:37:48,470
item again but now instead of passing in

00:37:46,730 --> 00:37:52,610
one two and three it's passing in dog

00:37:48,470 --> 00:37:55,910
and whatever the animals the other

00:37:52,610 --> 00:37:59,690
animals were ant and spider so so get

00:37:55,910 --> 00:38:01,850
items use both to return its as an array

00:37:59,690 --> 00:38:03,170
where you get one two three or it will

00:38:01,850 --> 00:38:04,640
pass in the key and you return the

00:38:03,170 --> 00:38:06,230
corresponding value for it so it can be

00:38:04,640 --> 00:38:13,400
used either weight a item is used for

00:38:06,230 --> 00:38:17,090
both of those so that's so that's

00:38:13,400 --> 00:38:20,510
actually what what what sequel alchemy

00:38:17,090 --> 00:38:22,100
is doing to for its magic so when you

00:38:20,510 --> 00:38:24,080
print it out it just gets the values but

00:38:22,100 --> 00:38:26,750
when you call dick Don it calls keys

00:38:24,080 --> 00:38:27,980
keys says what the the columns you were

00:38:26,750 --> 00:38:31,970
looking for and then it uses that to

00:38:27,980 --> 00:38:35,099
turn it into a dictionary well have like

00:38:31,970 --> 00:38:46,559
10 minutes left

00:38:35,099 --> 00:38:50,809
I have seven minutes left so let's yeah

00:38:46,559 --> 00:38:50,809
so let's go through I'm gonna skip one

00:38:54,949 --> 00:38:59,279
okay so I'm all go through these quick

00:38:57,930 --> 00:39:05,369
because I have some some other stuff I

00:38:59,279 --> 00:39:08,160
want to finish up so this is a way this

00:39:05,369 --> 00:39:09,690
is a way to treat your class so the

00:39:08,160 --> 00:39:12,180
other examples showed how to treat your

00:39:09,690 --> 00:39:14,190
class as either a list or a dictionary

00:39:12,180 --> 00:39:16,920
this is an example of how to treat your

00:39:14,190 --> 00:39:19,170
your list as like basically a function

00:39:16,920 --> 00:39:22,380
that you can call that you can call that

00:39:19,170 --> 00:39:24,690
you can call as a function so here I'm

00:39:22,380 --> 00:39:27,420
using Thunder call for that

00:39:24,690 --> 00:39:29,789
so this basically says I want to have a

00:39:27,420 --> 00:39:32,339
die with that many sides in it so a ddn

00:39:29,789 --> 00:39:33,839
it's like I would have d6 or a d20 or

00:39:32,339 --> 00:39:36,029
whatever so here I'm going to make it d6

00:39:33,839 --> 00:39:37,650
I'm going to iterate over it ten times

00:39:36,029 --> 00:39:39,719
and then I'll print out what the value

00:39:37,650 --> 00:39:43,380
is and every time it's going to call the

00:39:39,719 --> 00:39:46,049
call method because I'm saying d6 like

00:39:43,380 --> 00:39:47,549
that it's going to call this call method

00:39:46,049 --> 00:39:50,039
and it's going to call Rand int and

00:39:47,549 --> 00:39:51,589
print something out so that's what I go

00:39:50,039 --> 00:39:56,819
through this real quick

00:39:51,589 --> 00:39:58,410
dn P and that's what it does so that's

00:39:56,819 --> 00:40:00,269
cool but it's actually not the way that

00:39:58,410 --> 00:40:05,849
most Python people would do it there

00:40:00,269 --> 00:40:10,769
they would use iterators instead the way

00:40:05,849 --> 00:40:13,640
you do an iterator is you say well

00:40:10,769 --> 00:40:16,410
there's really two steps you say that

00:40:13,640 --> 00:40:17,819
there's a thunder interim method and

00:40:16,410 --> 00:40:20,579
that just basically says I want my class

00:40:17,819 --> 00:40:22,289
to be an iterator and then there's a

00:40:20,579 --> 00:40:23,489
next method I've done there next and

00:40:22,289 --> 00:40:24,809
that gets called every time you want to

00:40:23,489 --> 00:40:26,249
iterate over something every time I once

00:40:24,809 --> 00:40:30,809
again next value it's going to call

00:40:26,249 --> 00:40:32,579
thunder next and then it will return the

00:40:30,809 --> 00:40:35,640
next value when it's out of values it

00:40:32,579 --> 00:40:37,289
raises stop stop iteration and then that

00:40:35,640 --> 00:40:39,660
that's what will cause the iteration to

00:40:37,289 --> 00:40:41,039
stop this is kind of like you have to do

00:40:39,660 --> 00:40:42,749
a little bit more work because you can't

00:40:41,039 --> 00:40:44,549
rely on just being an array because

00:40:42,749 --> 00:40:46,229
we're doing everything internally we

00:40:44,549 --> 00:40:46,740
have some other way of stopping it so I

00:40:46,229 --> 00:40:48,060
think you

00:40:46,740 --> 00:40:50,040
I wanted to have something was cut into

00:40:48,060 --> 00:40:52,320
a d6 and I'm gonna get ten values out of

00:40:50,040 --> 00:40:54,000
it and then it will stop I know I'm kind

00:40:52,320 --> 00:41:01,790
of going fast because I want to finish

00:40:54,000 --> 00:41:01,790
things up here and it's the works so

00:41:02,360 --> 00:41:11,640
over here we'll go one more thing real

00:41:07,230 --> 00:41:14,790
fast pipe that also has yield yield like

00:41:11,640 --> 00:41:17,400
Ruby also has yield yield is kind of the

00:41:14,790 --> 00:41:19,410
same idea as as iterators except they're

00:41:17,400 --> 00:41:21,840
in regular methods and they're not in

00:41:19,410 --> 00:41:23,430
you're not treating the class as an

00:41:21,840 --> 00:41:24,000
array d are treating a method as an

00:41:23,430 --> 00:41:26,670
iterator

00:41:24,000 --> 00:41:28,170
so it's sort when you call yield the

00:41:26,670 --> 00:41:30,119
function itself is still running it

00:41:28,170 --> 00:41:31,650
returns in value but it's still running

00:41:30,119 --> 00:41:33,990
and when you call it again it gets the

00:41:31,650 --> 00:41:36,600
next value so here I'm just going to

00:41:33,990 --> 00:41:38,310
yield I'm gonna go through ranges goes

00:41:36,600 --> 00:41:40,980
from zero one two three four five all

00:41:38,310 --> 00:41:44,280
the way up to one - net and I want to

00:41:40,980 --> 00:41:45,960
return two times that value and you

00:41:44,280 --> 00:41:48,330
could that basically says I can treat Y

00:41:45,960 --> 00:41:49,560
this Y method as an iterator something

00:41:48,330 --> 00:41:52,800
that can iterate over and get all the

00:41:49,560 --> 00:41:57,270
values out of it so I know I'm going

00:41:52,800 --> 00:42:00,930
fast for this but we'll just test and

00:41:57,270 --> 00:42:02,160
that works so so okay I'm gonna finish

00:42:00,930 --> 00:42:03,600
up because I'm starting to run out of

00:42:02,160 --> 00:42:05,580
time here a little bit I know I went a

00:42:03,600 --> 00:42:07,910
little fast at the end I apologize but

00:42:05,580 --> 00:42:07,910
let's

00:42:13,109 --> 00:42:20,140
alright so did you know Python has a

00:42:17,200 --> 00:42:21,670
manifesto if you know anyone that's a

00:42:20,140 --> 00:42:23,260
Python programmer they've probably told

00:42:21,670 --> 00:42:24,789
you that they have this thing you should

00:42:23,260 --> 00:42:26,170
read the Szanto python it will tell you

00:42:24,789 --> 00:42:28,720
we have this whole list of things that

00:42:26,170 --> 00:42:32,770
we'd like to do things right one of the

00:42:28,720 --> 00:42:34,809
things that's there it's not number one

00:42:32,770 --> 00:42:36,819
number one is beautiful is better than

00:42:34,809 --> 00:42:39,789
ugly which the Python people will tell

00:42:36,819 --> 00:42:42,760
you number two is explicit is better

00:42:39,789 --> 00:42:45,280
than implicit and I would argue that the

00:42:42,760 --> 00:42:48,430
way Perl but the way dbi does things is

00:42:45,280 --> 00:42:50,440
a lot more explicit than the way sequel

00:42:48,430 --> 00:42:52,480
alchemy does it where all this stuff is

00:42:50,440 --> 00:42:54,430
hiding like they're trying to do magic

00:42:52,480 --> 00:42:56,890
behind the covers but it's hard to

00:42:54,430 --> 00:43:00,130
discover that it works that way and I

00:42:56,890 --> 00:43:01,869
think I prefer preferred give me give me

00:43:00,130 --> 00:43:03,520
like I would have a method that returns

00:43:01,869 --> 00:43:07,049
me the keys and the values and let me

00:43:03,520 --> 00:43:10,180
deal with it not just have it feel magic

00:43:07,049 --> 00:43:11,589
but I think the point is that you do

00:43:10,180 --> 00:43:13,660
have to be aware that these things exist

00:43:11,589 --> 00:43:14,859
if you're working in Python because like

00:43:13,660 --> 00:43:16,420
prole doesn't have anything at all like

00:43:14,859 --> 00:43:17,799
this and so you give me pretty

00:43:16,420 --> 00:43:20,170
continuous when things like this happen

00:43:17,799 --> 00:43:29,170
so let's review some of the stuff that I

00:43:20,170 --> 00:43:30,940
went over okay so we talked about STR

00:43:29,170 --> 00:43:33,099
and re PR weird a few different ways of

00:43:30,940 --> 00:43:35,710
string a fiying your your instance of

00:43:33,099 --> 00:43:39,730
your class lens shows how many items are

00:43:35,710 --> 00:43:42,520
in the class get item and set item are

00:43:39,730 --> 00:43:45,510
for extracting values or for setting

00:43:42,520 --> 00:43:47,710
values they can be used both as as

00:43:45,510 --> 00:43:52,990
indexes into an array or they can be

00:43:47,710 --> 00:43:56,770
keys into a dictionary call let's your

00:43:52,990 --> 00:44:00,220
class work as in you can call your class

00:43:56,770 --> 00:44:05,170
as if it were a function instead of

00:44:00,220 --> 00:44:07,270
calling methods on it either and next we

00:44:05,170 --> 00:44:08,890
just went over and yield is also sort of

00:44:07,270 --> 00:44:09,940
similar with that so what if you want to

00:44:08,890 --> 00:44:12,250
do more what if you want to find more

00:44:09,940 --> 00:44:15,309
information about that and so that is

00:44:12,250 --> 00:44:17,079
not really super great there is this

00:44:15,309 --> 00:44:19,480
page if you look for just Python data

00:44:17,079 --> 00:44:21,819
model you'll find this it's super long

00:44:19,480 --> 00:44:24,530
and it's not you know it's more of a

00:44:21,819 --> 00:44:26,450
reference and it's not the

00:44:24,530 --> 00:44:29,240
it's not really like the best way to

00:44:26,450 --> 00:44:31,010
learn how this all works there are lists

00:44:29,240 --> 00:44:33,010
it does have all the done their methods

00:44:31,010 --> 00:44:35,450
there's probably a couple dozen of them

00:44:33,010 --> 00:44:36,620
but it's they're sort of all scattered

00:44:35,450 --> 00:44:39,920
throughout it it's not like you can't

00:44:36,620 --> 00:44:41,300
just go to the documentation for dict

00:44:39,920 --> 00:44:45,800
and see all the methods you can call on

00:44:41,300 --> 00:44:48,650
it so so there's there are other there

00:44:45,800 --> 00:44:54,380
other like third-party pages that have

00:44:48,650 --> 00:44:57,440
get that I'm almost done but yeah those

00:44:54,380 --> 00:45:00,110
are there too I should also say that

00:44:57,440 --> 00:45:01,610
they're also okay so let's go the best

00:45:00,110 --> 00:45:03,530
book I found is this book called fluent

00:45:01,610 --> 00:45:06,710
Python that goes into way way more

00:45:03,530 --> 00:45:08,330
detail than I was talking about I say

00:45:06,710 --> 00:45:10,610
those also if you really want to make

00:45:08,330 --> 00:45:14,090
classes in Python that work exactly like

00:45:10,610 --> 00:45:16,340
dictionaries and dictionary dictionaries

00:45:14,090 --> 00:45:19,760
and arrays if you want to be able to

00:45:16,340 --> 00:45:21,290
delete things and add things and then

00:45:19,760 --> 00:45:23,150
they're actually our abstract base

00:45:21,290 --> 00:45:24,410
classes that you can inherit from and

00:45:23,150 --> 00:45:25,700
then you have to instantiate all these

00:45:24,410 --> 00:45:29,030
different methods and have it work that

00:45:25,700 --> 00:45:31,030
way but this book is really is really

00:45:29,030 --> 00:45:35,090
really good I recommend that and then

00:45:31,030 --> 00:45:38,080
that's slide so you have any questions

00:45:35,090 --> 00:45:38,080
yes

00:45:42,410 --> 00:45:45,410
yes

00:45:48,290 --> 00:46:09,060
with what yeah yeah pearl

00:46:06,869 --> 00:46:10,920
so I'd say I thought you were asking

00:46:09,060 --> 00:46:12,180
about overload and how much overlap

00:46:10,920 --> 00:46:14,760
there is I haven't actually used

00:46:12,180 --> 00:46:17,820
overloads so I'm not that familiar with

00:46:14,760 --> 00:46:20,609
it um yeah I don't think a pearl really

00:46:17,820 --> 00:46:22,589
has anything that's quite like the way

00:46:20,609 --> 00:46:32,210
it er aters are such an intrinsic part

00:46:22,589 --> 00:46:36,080
of python yeah right 30 pills to do it

00:46:32,210 --> 00:46:36,080
yeah so in the back

00:46:39,250 --> 00:47:00,010
a function call did you say okay so yeah

00:46:55,230 --> 00:47:01,750
so the comment is that one way to do it

00:47:00,010 --> 00:47:03,910
in in Perl is to have an anonymous

00:47:01,750 --> 00:47:07,210
function that you keep calling until it

00:47:03,910 --> 00:47:08,830
returns undef it doesn't it doesn't have

00:47:07,210 --> 00:47:15,130
yield either and yield is pretty is

00:47:08,830 --> 00:47:17,020
pretty convenient sometimes yeah and it

00:47:15,130 --> 00:47:19,450
has you know it has tied variables to

00:47:17,020 --> 00:47:21,700
which is sort of similar similar to

00:47:19,450 --> 00:47:23,619
these things as well so that's another

00:47:21,700 --> 00:47:24,670
way you could tie you can tie a raise

00:47:23,619 --> 00:47:27,660
two things then you have to instantiate

00:47:24,670 --> 00:47:27,660
a bunch of classes yes

00:47:55,020 --> 00:48:00,910
yeah I'm sure so the question is is this

00:47:58,540 --> 00:48:02,500
in the documentation somewhere and I'm

00:48:00,910 --> 00:48:32,160
sure it's there somewhere I looked for

00:48:02,500 --> 00:48:34,540
it and I didn't I didn't see it yeah

00:48:32,160 --> 00:48:35,740
yeah I mean those things happen I mean

00:48:34,540 --> 00:48:37,960
these things happen in Python 2 I'm

00:48:35,740 --> 00:48:40,540
finding finding the part of the code

00:48:37,960 --> 00:48:44,350
where keys got called to see that that's

00:48:40,540 --> 00:48:51,940
what the method was happening took a bit

00:48:44,350 --> 00:48:54,040
of digging to do that yeah I know what

00:48:51,940 --> 00:48:56,080
are the one of the issues I've had in in

00:48:54,040 --> 00:48:59,140
Python is especially with that big stack

00:48:56,080 --> 00:49:01,900
is that I think pearl because that maybe

00:48:59,140 --> 00:49:04,780
there's not a common way of dealing with

00:49:01,900 --> 00:49:06,790
objects is that I think the modules that

00:49:04,780 --> 00:49:09,010
we import tend to be pretty orthogonal

00:49:06,790 --> 00:49:11,160
to each other whereas a Python they tend

00:49:09,010 --> 00:49:13,420
to all kind of build on each other so

00:49:11,160 --> 00:49:15,480
it's got good and bad the good is it's

00:49:13,420 --> 00:49:18,280
all sort of seamless but the bad is that

00:49:15,480 --> 00:49:20,050
like which of these things that I'm

00:49:18,280 --> 00:49:21,850
importing is actually causing this

00:49:20,050 --> 00:49:23,290
problem what part of it which of these

00:49:21,850 --> 00:49:24,820
like four things do I have to look

00:49:23,290 --> 00:49:26,950
through the documentation for to find

00:49:24,820 --> 00:49:29,440
like where I want to tweak it to get it

00:49:26,950 --> 00:49:30,970
to work the way I want this is a Python

00:49:29,440 --> 00:49:32,020
thing is it something we wrote is it

00:49:30,970 --> 00:49:34,240
something that's in this class or in

00:49:32,020 --> 00:49:39,730
that class and I found that to be

00:49:34,240 --> 00:49:42,220
confusing sometimes so yeah so I think

00:49:39,730 --> 00:49:47,190
I'm out of time so thank you very much

00:49:42,220 --> 00:49:47,190
hit me up afterwards no more questions

00:49:49,570 --> 00:49:52,639

YouTube URL: https://www.youtube.com/watch?v=84DTUmW94K0


