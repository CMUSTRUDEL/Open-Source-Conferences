Title: Dimitrios Kechagias - "Speeding Up Perl Test Suites"
Publication date: 2019-06-19
Playlist: TPC 2019 in Pittsburgh
Description: 
	At SpareRoom, a roommate website/app with over 9 million users, we have a reasonably extensive test suite, which is part of the release cycle and "traditionally" took quite a long time to complete. During the last year or so, our Perl team dramatically improved the performance of the test suite, transforming it into a much more valuable tool that provides quick feedback during all development phases through continuous testing.

I will discuss various strategies for optimizing large Perl test suites (with an emphasis on web apps) and share several tips based on the experiences of our team, as well as some ideas on how a fast test suite can be more effective in the development workflow.

To conclude, I will demo our Test2::Aggregator, which helped get more performance out of our test suite and was just releaced to CPAN.
Captions: 
	00:00:00,000 --> 00:00:07,680
hello my name is Demetrius quejas don't

00:00:05,250 --> 00:00:12,300
try my last name it's all Greek to you

00:00:07,680 --> 00:00:15,719
it's great so I will talk to you about

00:00:12,300 --> 00:00:18,150
speeding up Perl test Suites it's it's

00:00:15,719 --> 00:00:21,150
my first ever Perl talk so I prepared a

00:00:18,150 --> 00:00:23,640
pretty packed 20 minute presentation so

00:00:21,150 --> 00:00:28,170
Marvel as I try to deliver it in the 15

00:00:23,640 --> 00:00:29,699
minutes I found out I only have so but I

00:00:28,170 --> 00:00:32,070
will upload the slides afterwards so you

00:00:29,699 --> 00:00:35,820
can use them as a reference I will cover

00:00:32,070 --> 00:00:38,460
a lot of stuff you already know and so

00:00:35,820 --> 00:00:40,530
the few stuff that you you might have

00:00:38,460 --> 00:00:43,860
missed those are the ones to pay

00:00:40,530 --> 00:00:46,320
attention to the talk is based on my

00:00:43,860 --> 00:00:49,260
experience at spare room I've been there

00:00:46,320 --> 00:00:52,530
in the last two years it's room a room

00:00:49,260 --> 00:00:54,570
rate roommate finding platform it's a

00:00:52,530 --> 00:00:56,670
household name in the UK but it's pretty

00:00:54,570 --> 00:01:01,829
recent here so you you probably haven't

00:00:56,670 --> 00:01:03,539
heard of it and it's headquartered in

00:01:01,829 --> 00:01:07,950
the in Manchester that's where our

00:01:03,539 --> 00:01:10,799
wonderful Perl team is it started 15

00:01:07,950 --> 00:01:12,689
years ago as a CGI style app we still

00:01:10,799 --> 00:01:15,990
have some parts of the website that are

00:01:12,689 --> 00:01:22,740
kind of like that but everything new is

00:01:15,990 --> 00:01:25,380
API driven and modern Perl so when I

00:01:22,740 --> 00:01:29,189
started there two years ago we already

00:01:25,380 --> 00:01:31,590
have a pretty large test suite and it

00:01:29,189 --> 00:01:34,140
was quite optimized it everything was

00:01:31,590 --> 00:01:36,060
almost everything was in parallel but it

00:01:34,140 --> 00:01:39,450
still took over 15 minutes to run on a

00:01:36,060 --> 00:01:42,600
dedicated multi-core server and it would

00:01:39,450 --> 00:01:46,320
run every two hours it would run the

00:01:42,600 --> 00:01:49,170
test suite on the master and send a

00:01:46,320 --> 00:01:53,610
slack report if you try to run it on

00:01:49,170 --> 00:01:58,259
four curve the mbox dive box it would

00:01:53,610 --> 00:02:01,439
take about 30 minutes so nobody did you

00:01:58,259 --> 00:02:03,899
just like sort of estimated which tests

00:02:01,439 --> 00:02:06,119
would fail and run only those and then

00:02:03,899 --> 00:02:08,069
you would merge to master and

00:02:06,119 --> 00:02:11,430
you had a good chance of breaking

00:02:08,069 --> 00:02:14,700
everything so there was a to fix it

00:02:11,430 --> 00:02:19,110
because you were delaying release and in

00:02:14,700 --> 00:02:21,090
any case release had to be timed after a

00:02:19,110 --> 00:02:23,730
test run which was either every two

00:02:21,090 --> 00:02:27,720
hours or you just asked Jenkins and had

00:02:23,730 --> 00:02:31,349
to wait for over 15 times 15 minutes so

00:02:27,720 --> 00:02:33,569
we worked with my team and after several

00:02:31,349 --> 00:02:36,750
months we got into a much better

00:02:33,569 --> 00:02:40,799
position where we are now so we have

00:02:36,750 --> 00:02:43,709
more tests now but the sweet only takes

00:02:40,799 --> 00:02:45,989
2 to 3 minutes giving better carb

00:02:43,709 --> 00:02:49,560
coverage them before so it can be run on

00:02:45,989 --> 00:02:52,650
every commit on every branch on every

00:02:49,560 --> 00:02:55,640
remote branch automatically and stands

00:02:52,650 --> 00:03:00,269
very still sends a report on slack and I

00:02:55,640 --> 00:03:03,780
github update so now while you're

00:03:00,269 --> 00:03:07,379
working you get instant updates updates

00:03:03,780 --> 00:03:10,109
and feedback from the test suite you

00:03:07,379 --> 00:03:12,150
don't have to do anything so we found

00:03:10,109 --> 00:03:16,079
that you catch some things going wrong

00:03:12,150 --> 00:03:18,750
very early in the dev cycle which has

00:03:16,079 --> 00:03:22,079
helped a lot and you never you can

00:03:18,750 --> 00:03:25,019
release at any instant because the test

00:03:22,079 --> 00:03:26,849
suite has already run or at worst you

00:03:25,019 --> 00:03:35,639
just have to wait another two minutes

00:03:26,849 --> 00:03:38,389
for it so I really like want to suggest

00:03:35,639 --> 00:03:42,419
the trying doing a continuous testing

00:03:38,389 --> 00:03:43,919
which does require a fast test suite to

00:03:42,419 --> 00:03:49,319
do properly

00:03:43,919 --> 00:03:52,799
it helped us a lot in our dev cycle you

00:03:49,319 --> 00:03:54,630
can send reports get feedback through

00:03:52,799 --> 00:03:57,239
slack or we have we're using something

00:03:54,630 --> 00:04:01,380
on github you see these nice green tick

00:03:57,239 --> 00:04:06,780
marks on our branches and on pull

00:04:01,380 --> 00:04:11,310
requests some other notes we have a full

00:04:06,780 --> 00:04:14,069
test suite and faster one which removes

00:04:11,310 --> 00:04:16,739
some slow and not prone to breaking

00:04:14,069 --> 00:04:18,620
tests and we run on branches you run the

00:04:16,739 --> 00:04:24,259
fast one

00:04:18,620 --> 00:04:26,479
master around the the slow one and gaff

00:04:24,259 --> 00:04:31,129
has something to help you with that so

00:04:26,479 --> 00:04:32,990
our full suite is 30% slower and we like

00:04:31,129 --> 00:04:36,169
to keep statistics of every run so we

00:04:32,990 --> 00:04:37,819
have for example I bought that census

00:04:36,169 --> 00:04:39,949
our report if it detects that there's a

00:04:37,819 --> 00:04:44,360
flaky test by comparing different

00:04:39,949 --> 00:04:46,610
branches going on to how to actually

00:04:44,360 --> 00:04:49,129
speed up your test suite you most of you

00:04:46,610 --> 00:04:51,770
already know that paralysing is the the

00:04:49,129 --> 00:04:53,870
number one thing you have to do because

00:04:51,770 --> 00:04:59,419
it just allows you to throw hardware to

00:04:53,870 --> 00:05:02,900
the problem and make your suite faster

00:04:59,419 --> 00:05:07,789
that way sometimes we forget to paralyze

00:05:02,900 --> 00:05:10,520
set up tasks so things were like fetches

00:05:07,789 --> 00:05:12,889
remote fetches or in our case we have

00:05:10,520 --> 00:05:16,219
some part of our website that uses

00:05:12,889 --> 00:05:19,009
template Excel 8 templates so

00:05:16,219 --> 00:05:21,169
compilation was very slow we use the

00:05:19,009 --> 00:05:23,120
many core engine to paralyze that it's

00:05:21,169 --> 00:05:27,860
four times faster so it takes no time

00:05:23,120 --> 00:05:31,190
now and then you move on to running the

00:05:27,860 --> 00:05:35,389
actual tests in parallel with the dash J

00:05:31,190 --> 00:05:38,449
prove or EF you play a bit with the

00:05:35,389 --> 00:05:42,880
optional number of threads usually it's

00:05:38,449 --> 00:05:46,270
your CPU cores or maybe a bit less and

00:05:42,880 --> 00:05:49,069
you always run your slow test first

00:05:46,270 --> 00:05:51,800
because you want the fastest to cover

00:05:49,069 --> 00:05:55,099
the end of the tail of a test so that

00:05:51,800 --> 00:06:00,159
the tail is also using many threads not

00:05:55,099 --> 00:06:04,340
just one single long running thread and

00:06:00,159 --> 00:06:06,830
again you have to rescue for this in the

00:06:04,340 --> 00:06:09,169
end you have to rethink some tests and

00:06:06,830 --> 00:06:11,569
rewrite them if they're not

00:06:09,169 --> 00:06:13,909
parallelizable they are or have

00:06:11,569 --> 00:06:20,300
conflicting tests not run in parallel

00:06:13,909 --> 00:06:22,789
with each other now temporary the B's

00:06:20,300 --> 00:06:25,550
are a slow solution for paralyzing tests

00:06:22,789 --> 00:06:29,480
that require competing deep

00:06:25,550 --> 00:06:32,810
changes its last resort you shouldn't

00:06:29,480 --> 00:06:35,270
use it if you have to use it try to find

00:06:32,810 --> 00:06:40,070
the minimum schema and data you need and

00:06:35,270 --> 00:06:41,810
if you need to populate a table don't do

00:06:40,070 --> 00:06:43,490
select insert there's something called

00:06:41,810 --> 00:06:46,550
transportable trains table spaces for

00:06:43,490 --> 00:06:50,090
example from MySQL I don't know for

00:06:46,550 --> 00:06:52,310
other databases you can avoid it

00:06:50,090 --> 00:06:57,670
altogether by using temporary tables

00:06:52,310 --> 00:06:57,670
instead most databases support that and

00:06:57,820 --> 00:07:04,850
otherwise just have the competing test

00:07:01,250 --> 00:07:06,980
to not run parallel to each other again

00:07:04,850 --> 00:07:10,160
Y after the rescue for that if you were

00:07:06,980 --> 00:07:13,760
at the previous talk and or you can use

00:07:10,160 --> 00:07:18,020
an aggregator we'll see about that

00:07:13,760 --> 00:07:20,030
now you profile your app probably it's a

00:07:18,020 --> 00:07:22,670
good idea to also profile your tests

00:07:20,030 --> 00:07:24,560
because you use your app differently or

00:07:22,670 --> 00:07:27,200
you have some extra code in there

00:07:24,560 --> 00:07:31,160
and you can just profile directly your

00:07:27,200 --> 00:07:34,910
slow tests but it makes sense to profile

00:07:31,160 --> 00:07:37,010
fast tests together in bunches to find

00:07:34,910 --> 00:07:40,460
patterns that are worth optimizing for

00:07:37,010 --> 00:07:44,030
you're not supposed to optimize like a

00:07:40,460 --> 00:07:45,920
single slow fast test sometimes you can

00:07:44,030 --> 00:07:47,330
even find things like dependencies you

00:07:45,920 --> 00:07:49,220
didn't know we're there and you don't

00:07:47,330 --> 00:07:52,610
need and they have like some startup

00:07:49,220 --> 00:07:57,790
time and you can find where they are and

00:07:52,610 --> 00:08:02,300
get rid of them so about the DP server

00:07:57,790 --> 00:08:05,930
it's a slow part of the system so make

00:08:02,300 --> 00:08:10,130
sure it's at least on a local network so

00:08:05,930 --> 00:08:11,690
you reduce the i/o lag it can be even on

00:08:10,130 --> 00:08:13,520
the same machine defined depending on

00:08:11,690 --> 00:08:18,800
your configuration what servers you have

00:08:13,520 --> 00:08:21,230
available it tried to optimize the

00:08:18,800 --> 00:08:26,950
configuration of your DB server in our

00:08:21,230 --> 00:08:32,150
case it took 15% of our test suite time

00:08:26,950 --> 00:08:35,750
so I'm listing here just the settings

00:08:32,150 --> 00:08:37,729
that made the biggest impact for us for

00:08:35,750 --> 00:08:39,039
memory constraint systems you'd want to

00:08:37,729 --> 00:08:41,500
optimize for

00:08:39,039 --> 00:08:46,930
memory not speed which then gives you

00:08:41,500 --> 00:08:49,779
the speed and we clean up our test DB

00:08:46,930 --> 00:08:54,610
every release so there's no garbage

00:08:49,779 --> 00:08:56,649
slowing it down there now understand

00:08:54,610 --> 00:08:58,000
thing try to get the connection at the

00:08:56,649 --> 00:09:01,209
concurrent connections when you're

00:08:58,000 --> 00:09:03,880
running tests because you can find out

00:09:01,209 --> 00:09:07,170
interesting things like you forgot to

00:09:03,880 --> 00:09:10,300
pass on the same DB handle and makes

00:09:07,170 --> 00:09:15,279
like a surgeon concur corrections which

00:09:10,300 --> 00:09:17,889
then slows down your tests and here's

00:09:15,279 --> 00:09:21,579
some like a 10-minute script that did to

00:09:17,889 --> 00:09:23,680
count hours the test will be the slides

00:09:21,579 --> 00:09:28,120
will be uploaded later if it's useful to

00:09:23,680 --> 00:09:30,639
anyone mocking is an entire topic upon

00:09:28,120 --> 00:09:32,980
itself so I won't touch much on that on

00:09:30,639 --> 00:09:35,949
this you know that when you want to test

00:09:32,980 --> 00:09:38,920
a specific part of the system or the

00:09:35,949 --> 00:09:40,930
unit testing you don't want everything

00:09:38,920 --> 00:09:44,740
else to run so you have to mock any

00:09:40,930 --> 00:09:46,810
dependencies and even with integration

00:09:44,740 --> 00:09:52,449
testing you don't always need everything

00:09:46,810 --> 00:09:54,850
to run while you're testing and DB

00:09:52,449 --> 00:09:58,329
access is the most common things that

00:09:54,850 --> 00:10:02,860
you want to mark because they slow down

00:09:58,329 --> 00:10:08,050
so some example examples of tools we we

00:10:02,860 --> 00:10:10,660
use for these tasks now some general

00:10:08,050 --> 00:10:13,949
things to avoid if you have a web app

00:10:10,660 --> 00:10:16,660
avoid going through the to a web server

00:10:13,949 --> 00:10:19,019
it's very slow and you cannot do things

00:10:16,660 --> 00:10:23,560
that you need when testing like mocking

00:10:19,019 --> 00:10:25,899
accessing database handles I mean even

00:10:23,560 --> 00:10:28,839
with our oldest of I told you have some

00:10:25,899 --> 00:10:31,839
CGI style code still in some parts we

00:10:28,839 --> 00:10:33,160
don't run it through Apache we just

00:10:31,839 --> 00:10:35,920
simulate the code simulate that

00:10:33,160 --> 00:10:37,839
configuration and running directly if

00:10:35,920 --> 00:10:40,360
you really have to you have to use

00:10:37,839 --> 00:10:42,670
something like mechanized try to use it

00:10:40,360 --> 00:10:45,190
wisely do the minimum number of requests

00:10:42,670 --> 00:10:48,160
if you have a good init point initial

00:10:45,190 --> 00:10:50,339
point do a clone instead of researching

00:10:48,160 --> 00:10:54,529
it later

00:10:50,339 --> 00:10:57,930
and don't forget even though it's a

00:10:54,529 --> 00:10:59,309
testing server avoid running things that

00:10:57,930 --> 00:11:02,870
would not run in production that

00:10:59,309 --> 00:11:04,980
debugging code that slows you down and

00:11:02,870 --> 00:11:06,269
don't test the functionality of a

00:11:04,980 --> 00:11:09,449
sipping module I've seen tests that

00:11:06,269 --> 00:11:11,759
basically are like testing the third

00:11:09,449 --> 00:11:15,360
party module there are already a test

00:11:11,759 --> 00:11:17,249
suite for that and only if you change

00:11:15,360 --> 00:11:20,490
upgrade sip and module you have to

00:11:17,249 --> 00:11:23,370
verify it and in general be smart about

00:11:20,490 --> 00:11:25,769
your test data don't blindly throw test

00:11:23,370 --> 00:11:31,639
cases they have to be actually testing

00:11:25,769 --> 00:11:34,319
something pre-loading if you were here

00:11:31,639 --> 00:11:38,990
during the previous session you already

00:11:34,319 --> 00:11:41,579
saw how pre loading modules can speed up

00:11:38,990 --> 00:11:44,069
heavy modules basically can speed up

00:11:41,579 --> 00:11:46,680
your test suite significantly

00:11:44,069 --> 00:11:52,470
I couldn't get for probe for proved to

00:11:46,680 --> 00:11:53,939
work but yeah - P works great yeah also

00:11:52,470 --> 00:11:57,929
has a persistent runner so you don't

00:11:53,939 --> 00:12:03,230
even have to load yeah some complicated

00:11:57,929 --> 00:12:07,790
syntax there no no just yeah start and

00:12:03,230 --> 00:12:12,209
finally test to aggregate is the first

00:12:07,790 --> 00:12:14,459
module that spare room open sourced it's

00:12:12,209 --> 00:12:16,920
the smallest and the simplest one as a

00:12:14,459 --> 00:12:20,189
pilot hopefully will start up and upon

00:12:16,920 --> 00:12:25,350
searching lots of our stuff soon on

00:12:20,189 --> 00:12:29,069
Sipan it's it CP runs a list of tests as

00:12:25,350 --> 00:12:32,639
subsists sub adds sub sub tests of an

00:12:29,069 --> 00:12:37,499
aggregate test I I used something like

00:12:32,639 --> 00:12:41,429
that to profile many fast tests together

00:12:37,499 --> 00:12:44,160
so random sub tests and profile them

00:12:41,429 --> 00:12:46,110
together and I saw that it was so much

00:12:44,160 --> 00:12:47,429
faster to run that I said okay

00:12:46,110 --> 00:12:51,629
immediately there will be a sip and

00:12:47,429 --> 00:12:53,939
module for this so there was but it was

00:12:51,629 --> 00:12:57,240
doing some it was trying to do too much

00:12:53,939 --> 00:13:00,389
and it was messing with test builder so

00:12:57,240 --> 00:13:02,860
it no longer works so I looked into it

00:13:00,389 --> 00:13:06,160
in case I could get some ideas

00:13:02,860 --> 00:13:08,950
didn't want those ideas so what if we

00:13:06,160 --> 00:13:11,140
have something that's very limited in

00:13:08,950 --> 00:13:14,140
scope just runs things on the same napes

00:13:11,140 --> 00:13:16,990
namespace and because we had a bunch of

00:13:14,140 --> 00:13:20,250
tests that we find with that they were

00:13:16,990 --> 00:13:22,810
just separated because of organization

00:13:20,250 --> 00:13:26,130
it made sense to have them separate but

00:13:22,810 --> 00:13:28,930
they could run all at the same time and

00:13:26,130 --> 00:13:31,360
so the module is very simple you just

00:13:28,930 --> 00:13:35,220
give it a director if you want to and it

00:13:31,360 --> 00:13:37,960
runs the tests so we found out that over

00:13:35,220 --> 00:13:42,850
70% of our tests actually with some

00:13:37,960 --> 00:13:44,380
minimal changes good run under it it

00:13:42,850 --> 00:13:47,920
doesn't matter if you use prove or yeah

00:13:44,380 --> 00:13:52,210
it runs other any we don't actually run

00:13:47,920 --> 00:13:54,970
directories because we just put the

00:13:52,210 --> 00:13:58,150
tests with mark them in a list so the

00:13:54,970 --> 00:13:59,650
aggregator it works with list files so

00:13:58,150 --> 00:14:03,130
you don't have to move your tests around

00:13:59,650 --> 00:14:04,680
if you're testing script knows to avoid

00:14:03,130 --> 00:14:10,590
the running them by themselves

00:14:04,680 --> 00:14:13,450
afterwards so this is how we use it and

00:14:10,590 --> 00:14:16,750
we got a 90% speed increase that's

00:14:13,450 --> 00:14:20,970
almost half the time after everything

00:14:16,750 --> 00:14:25,060
else was optimized by doing this so I

00:14:20,970 --> 00:14:26,440
have an example live demo with the moves

00:14:25,060 --> 00:14:28,960
test suite which I will run in the

00:14:26,440 --> 00:14:30,220
background as you asked me ask me to

00:14:28,960 --> 00:14:33,940
take questions

00:14:30,220 --> 00:14:37,750
so 184 of the Moose suite tests would

00:14:33,940 --> 00:14:40,150
run without modifying them at all and I

00:14:37,750 --> 00:14:41,980
removed the four slowest for the

00:14:40,150 --> 00:14:49,150
dramatic effect to achieve it a bit

00:14:41,980 --> 00:14:53,560
there we can so I will start it this is

00:14:49,150 --> 00:14:58,620
it with proof and I can take questions

00:14:53,560 --> 00:14:58,620
if you have any yes

00:15:00,090 --> 00:15:07,230
oh I just did it after the the yeah dog

00:15:04,860 --> 00:15:11,070
so I assumed most people would be so

00:15:07,230 --> 00:15:13,500
instead of proof for test two sweets you

00:15:11,070 --> 00:15:15,900
use yeah it's the test to harness its

00:15:13,500 --> 00:15:19,140
yet another testing harness and it has

00:15:15,900 --> 00:15:22,680
many advantages of her approve both

00:15:19,140 --> 00:15:24,870
speed and it knows much more about what

00:15:22,680 --> 00:15:30,750
is happening in your tests because it

00:15:24,870 --> 00:15:35,730
doesn't rely on tap output so this is a

00:15:30,750 --> 00:15:40,530
single 39 seconds on a single thread for

00:15:35,730 --> 00:15:42,960
these 180 tests if I do yeah with

00:15:40,530 --> 00:15:45,500
pre-loading mousse it should be about

00:15:42,960 --> 00:15:45,500
half time

00:15:56,069 --> 00:15:59,069
mm-hmm

00:16:03,030 --> 00:16:17,850
yep 22 seconds and if I do here so this

00:16:11,490 --> 00:16:19,680
is what I've run the directory so you

00:16:17,850 --> 00:16:22,280
can run it either under prove or yeah

00:16:19,680 --> 00:16:22,280
doesn't matter

00:16:23,330 --> 00:16:26,750
three seconds

00:16:28,550 --> 00:16:39,640
if it was a persistent Jeff it would

00:16:32,360 --> 00:16:42,860
take two or one any other questions so

00:16:39,640 --> 00:16:47,840
that was a single thread so all Type

00:16:42,860 --> 00:16:56,210
three tests were single thread it's more

00:16:47,840 --> 00:17:04,600
dramatic that way yes yes so you if you

00:16:56,210 --> 00:17:04,600
see here your test number is 181 file so

00:17:05,020 --> 00:17:10,490
it basically reads each one of your

00:17:08,450 --> 00:17:17,300
files and adds them as a sub test and

00:17:10,490 --> 00:17:26,420
runs a do on them yeah and yeah so it

00:17:17,300 --> 00:17:29,510
was 180 files before yeah yes yeah I

00:17:26,420 --> 00:17:32,540
tried I had the script to run try to add

00:17:29,510 --> 00:17:36,620
all the Moose tests and it managed to

00:17:32,540 --> 00:17:38,330
add 180 four of them that did not break

00:17:36,620 --> 00:17:50,380
under the aggregator without touching

00:17:38,330 --> 00:17:50,380
them 470 I think it's less than half yes

00:17:51,960 --> 00:17:57,010
so yes it's there it's the same

00:17:54,400 --> 00:17:59,140
directory that I did a PWD at the start

00:17:57,010 --> 00:18:07,810
to show you the same directory that they

00:17:59,140 --> 00:18:10,060
all run yes I deleted the extra test so

00:18:07,810 --> 00:18:13,630
it's the the T directory has only 180

00:18:10,060 --> 00:18:16,510
tests now so it's all the same and it

00:18:13,630 --> 00:18:19,000
produces on the aggregator it produces a

00:18:16,510 --> 00:18:22,990
lot of redefined warnings because mousse

00:18:19,000 --> 00:18:26,850
uses test more so the aggregator calls

00:18:22,990 --> 00:18:30,850
test a to vv0

00:18:26,850 --> 00:18:33,790
they're benign but you you'd want to get

00:18:30,850 --> 00:18:42,510
rid of test more and use test - mm-hmm

00:18:33,790 --> 00:18:42,510
anything else no I guess that's it then

00:18:49,090 --> 00:18:55,389
you don't load you don't load any more

00:18:51,429 --> 00:18:57,519
interpreters you don't fork you don't

00:18:55,389 --> 00:19:00,779
have to reload anything because any

00:18:57,519 --> 00:19:15,730
every use that comes after the first one

00:19:00,779 --> 00:19:17,499
doesn't have to load anything yes there

00:19:15,730 --> 00:19:20,470
I mean there are some tests we don't run

00:19:17,499 --> 00:19:24,389
them under this because of issues like

00:19:20,470 --> 00:19:27,700
that so it's for a subset of your tests

00:19:24,389 --> 00:19:32,369
it's usually for unit tests and things

00:19:27,700 --> 00:19:32,369
like that yes

00:19:41,940 --> 00:19:53,730
oh yeah with sono I use them see only

00:19:49,050 --> 00:19:57,240
for making the ex late compile phase run

00:19:53,730 --> 00:20:01,200
in parallel so MC gives you many workers

00:19:57,240 --> 00:20:04,170
and each one takes a file and compile a

00:20:01,200 --> 00:20:08,460
template and compiles it while normally

00:20:04,170 --> 00:20:10,010
excavated works in series so it's just

00:20:08,460 --> 00:20:14,370
different thing

00:20:10,010 --> 00:20:20,640
yes so yes yes yes so that was the pre

00:20:14,370 --> 00:20:22,290
before running the test phase I will

00:20:20,640 --> 00:20:24,270
upload the slide that it's meant to be

00:20:22,290 --> 00:20:26,150
like a reference thing that you look and

00:20:24,270 --> 00:20:29,360
and get ideas that you have missed

00:20:26,150 --> 00:20:34,230
because there are many like blog posts

00:20:29,360 --> 00:20:36,540
about things like that so it's good to

00:20:34,230 --> 00:20:41,480
have some reference and we had missed

00:20:36,540 --> 00:20:41,480
many things that other people had found

00:20:42,320 --> 00:20:45,680

YouTube URL: https://www.youtube.com/watch?v=5LY8o2Apa8E


