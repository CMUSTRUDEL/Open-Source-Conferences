Title: Jordan Adler - "Maintaining Code Quality at Scale"
Publication date: 2019-06-18
Playlist: TPC 2019 in Pittsburgh
Description: 
	From code reviews to automated code analysis and regression-tested deploys, we'll cover the major techniques used by software organizations like Google and Pinterest to maintain code quality on very large software.

Tooling and examples will be provided for the Perl ecosystem.
Captions: 
	00:00:00,000 --> 00:00:05,370
all right hello everybody welcome

00:00:01,709 --> 00:00:09,000
welcome this is maintaining code quality

00:00:05,370 --> 00:00:11,420
at scale by me I'm Jordan M Adler it's

00:00:09,000 --> 00:00:13,710
great to meet you all

00:00:11,420 --> 00:00:15,179
let's go ahead and talk about the agenda

00:00:13,710 --> 00:00:17,430
here just to give you kind of a quick

00:00:15,179 --> 00:00:18,210
idea of what we'll be talking about I'm

00:00:17,430 --> 00:00:21,480
gonna give you a kind of a brief

00:00:18,210 --> 00:00:24,449
architectural overview of what a typical

00:00:21,480 --> 00:00:27,330
consumer SAS software organization looks

00:00:24,449 --> 00:00:29,189
like and then kind of talk a bit about

00:00:27,330 --> 00:00:32,000
the Sisk quality model which is kind of

00:00:29,189 --> 00:00:35,040
a method for for a mental model for

00:00:32,000 --> 00:00:36,750
understanding quality of software and

00:00:35,040 --> 00:00:39,600
then I have a mental model I've derived

00:00:36,750 --> 00:00:42,629
called the SAS change pipeline which is

00:00:39,600 --> 00:00:45,210
all about the process for modifying

00:00:42,629 --> 00:00:47,910
software that's being executed as a

00:00:45,210 --> 00:00:49,920
service right talk about some of the

00:00:47,910 --> 00:00:52,770
KPIs we'll go through the challenges in

00:00:49,920 --> 00:00:54,000
managing code quality at scale what

00:00:52,770 --> 00:00:55,710
those challenges are and then we'll kind

00:00:54,000 --> 00:00:58,800
of kind of go through a cookbook of

00:00:55,710 --> 00:01:01,739
techniques that that that help optimize

00:00:58,800 --> 00:01:02,910
some of those KPIs and and hopefully you

00:01:01,739 --> 00:01:04,530
know you'll walk away with some

00:01:02,910 --> 00:01:06,630
actionable items we also walk away with

00:01:04,530 --> 00:01:08,220
a better understanding and a couple

00:01:06,630 --> 00:01:10,830
mental models that you can use to better

00:01:08,220 --> 00:01:13,590
understand how to deal with code quality

00:01:10,830 --> 00:01:16,110
code velocity in your organizations well

00:01:13,590 --> 00:01:18,330
some time for questions at the end as

00:01:16,110 --> 00:01:21,210
well there's gonna be a lot of straw

00:01:18,330 --> 00:01:24,570
polls so I'm gonna go ahead and start

00:01:21,210 --> 00:01:25,890
one now who here has a software

00:01:24,570 --> 00:01:27,810
architecture that looks roughly like

00:01:25,890 --> 00:01:29,880
this so you have a big old back-end

00:01:27,810 --> 00:01:32,280
doesn't really matter you have a kind of

00:01:29,880 --> 00:01:35,400
a clearly well-defined API and then you

00:01:32,280 --> 00:01:36,420
have the decoupled code on the outside

00:01:35,400 --> 00:01:38,100
of the Internet so this is a pretty

00:01:36,420 --> 00:01:39,720
typical so you have an Android iOS web

00:01:38,100 --> 00:01:41,490
app and maybe some third-party callers

00:01:39,720 --> 00:01:42,930
but you have a very clear division

00:01:41,490 --> 00:01:44,549
between your front and back ends are

00:01:42,930 --> 00:01:46,649
there folks like this yeah

00:01:44,549 --> 00:01:50,310
so a typical a case where that's not

00:01:46,649 --> 00:01:52,409
true is for typical MVC apps this would

00:01:50,310 --> 00:01:54,780
not be true because your MVC monolith

00:01:52,409 --> 00:01:58,079
includes presentation information you

00:01:54,780 --> 00:02:01,049
actually output HTML or some other sort

00:01:58,079 --> 00:02:02,729
of presentation media instead of

00:02:01,049 --> 00:02:04,710
outputting kind of having programmatic

00:02:02,729 --> 00:02:07,170
access and decoupling in this way but

00:02:04,710 --> 00:02:10,170
this is pretty typical and there's of

00:02:07,170 --> 00:02:12,209
consumer SAS organizations and there's a

00:02:10,170 --> 00:02:13,680
couple things to note here kind of in

00:02:12,209 --> 00:02:18,239
the bottom right in what I like to

00:02:13,680 --> 00:02:21,180
call Dunkin Donuts color-coding we have

00:02:18,239 --> 00:02:23,430
released cadence so how often we release

00:02:21,180 --> 00:02:25,709
something and you can see kind of on

00:02:23,430 --> 00:02:27,900
Android and iOS it's it's shrink-wrapped

00:02:25,709 --> 00:02:30,480
software you're delivering digital

00:02:27,900 --> 00:02:32,700
software digitally you could

00:02:30,480 --> 00:02:34,560
theoretically put it on a disk and sell

00:02:32,700 --> 00:02:36,329
in a store but in practice there are

00:02:34,560 --> 00:02:38,760
more streamlined approaches and you can

00:02:36,329 --> 00:02:42,269
solve them via app stores and these app

00:02:38,760 --> 00:02:43,650
stores have review processes and so as a

00:02:42,269 --> 00:02:45,359
result of that there's typically a bit

00:02:43,650 --> 00:02:46,680
of a delay and it doesn't necessarily

00:02:45,359 --> 00:02:49,049
make sense to push updates too

00:02:46,680 --> 00:02:52,290
frequently because of the size of the

00:02:49,049 --> 00:02:54,419
update going down to users and so most

00:02:52,290 --> 00:02:55,950
organizations tend to do bi-weekly and

00:02:54,419 --> 00:02:59,010
in this space that I'm familiar with for

00:02:55,950 --> 00:03:01,109
those on the back end if you release as

00:02:59,010 --> 00:03:02,519
much as you want it doesn't matter

00:03:01,109 --> 00:03:05,280
you're always kind of running one

00:03:02,519 --> 00:03:07,680
version at a time but in on the Android

00:03:05,280 --> 00:03:09,540
iOS side you release you know every so

00:03:07,680 --> 00:03:13,139
often but you kind of have these old

00:03:09,540 --> 00:03:15,269
versions running in perpetuity so for

00:03:13,139 --> 00:03:18,299
example you might have an old Android

00:03:15,269 --> 00:03:21,389
apps running on old versions of Android

00:03:18,299 --> 00:03:23,340
in parts of the world where the phones

00:03:21,389 --> 00:03:25,109
may not be capable of running newer

00:03:23,340 --> 00:03:28,049
operating system of Android and so

00:03:25,109 --> 00:03:29,430
that's just not available it's a little

00:03:28,049 --> 00:03:31,439
less of an issue and on the iOS

00:03:29,430 --> 00:03:34,079
ecosystem but it still exists so for

00:03:31,439 --> 00:03:36,930
example one of the most common versions

00:03:34,079 --> 00:03:39,449
of iPad is iPad 2 and iPad 2 has a

00:03:36,930 --> 00:03:40,530
pretty large usage base still even

00:03:39,449 --> 00:03:43,439
though it doesn't support the latest

00:03:40,530 --> 00:03:44,549
version of iOS and so many apps that are

00:03:43,439 --> 00:03:48,900
targeting the latest version of iOS

00:03:44,549 --> 00:03:51,269
cannot be installed on the iPad 2 on the

00:03:48,900 --> 00:03:53,430
web side things have changed so as we've

00:03:51,269 --> 00:03:56,220
kind of transitioned more towards client

00:03:53,430 --> 00:03:57,659
side driven web development with things

00:03:56,220 --> 00:03:58,620
like progressive web apps and single

00:03:57,659 --> 00:04:00,659
page applications

00:03:58,620 --> 00:04:02,370
you know you there's often quite a bit

00:04:00,659 --> 00:04:04,169
of its there's a lot of decoupling going

00:04:02,370 --> 00:04:05,579
on between the backends and that that

00:04:04,169 --> 00:04:08,310
front-end and having a clear delineation

00:04:05,579 --> 00:04:10,799
that's more in line with what mobile

00:04:08,310 --> 00:04:13,229
apps have and so your web app

00:04:10,799 --> 00:04:14,939
essentially unlike Android and iOS when

00:04:13,229 --> 00:04:17,430
you deploy you deploy to your own server

00:04:14,939 --> 00:04:20,340
your own CDN and so you can kind of

00:04:17,430 --> 00:04:21,479
deploy whenever and it updates more or

00:04:20,340 --> 00:04:23,370
less immediately as soon as the user

00:04:21,479 --> 00:04:25,740
gets in touch with the server to re

00:04:23,370 --> 00:04:28,070
rehydrate the data in the app you can

00:04:25,740 --> 00:04:30,659
get a new version so you don't have

00:04:28,070 --> 00:04:33,810
exactly one version running as you might

00:04:30,659 --> 00:04:36,659
on the backend but you kind of have one

00:04:33,810 --> 00:04:38,580
plus whatever the last cache version of

00:04:36,659 --> 00:04:40,950
the user has which is what executes

00:04:38,580 --> 00:04:42,510
first and so there's a relationship here

00:04:40,950 --> 00:04:45,180
between release cadence release

00:04:42,510 --> 00:04:46,710
longevity and kind of quality

00:04:45,180 --> 00:04:48,060
constraints in the pipeline so there's

00:04:46,710 --> 00:04:52,500
there's there's something to note there

00:04:48,060 --> 00:04:53,669
as well okay so the sisk software

00:04:52,500 --> 00:04:55,860
quality model talks about

00:04:53,669 --> 00:04:58,529
characteristics of software quality that

00:04:55,860 --> 00:05:00,360
are concerns so reliability is kind of

00:04:58,529 --> 00:05:03,510
chief amongst those does this do what I

00:05:00,360 --> 00:05:06,659
want it to do is it available is it is

00:05:03,510 --> 00:05:09,000
it defect free efficiency talks a bit

00:05:06,659 --> 00:05:11,940
about these easy the extent to which

00:05:09,000 --> 00:05:14,010
resources are required to execute the

00:05:11,940 --> 00:05:15,599
software so in in sass context when

00:05:14,010 --> 00:05:17,820
you're not running you know an

00:05:15,599 --> 00:05:20,729
application on someone's desktop you're

00:05:17,820 --> 00:05:23,190
paying for CPU cycles that's really

00:05:20,729 --> 00:05:24,839
important and when you have say

00:05:23,190 --> 00:05:27,479
thousands and thousands of your

00:05:24,839 --> 00:05:31,289
application instance running it's you

00:05:27,479 --> 00:05:33,930
know small percentage change in in in

00:05:31,289 --> 00:05:36,449
resource utilization can have profound

00:05:33,930 --> 00:05:37,800
effects so you know there there

00:05:36,449 --> 00:05:39,750
certainly are cases where you can save

00:05:37,800 --> 00:05:41,940
millions of dollars on an annual basis

00:05:39,750 --> 00:05:46,320
by you know improving memory utilization

00:05:41,940 --> 00:05:49,469
by 20 percent this is not unheard of 20

00:05:46,320 --> 00:05:51,539
percent hard to do and and over time you

00:05:49,469 --> 00:05:52,949
know you kind of have less low-hanging

00:05:51,539 --> 00:05:54,779
fruit to get to so there's a sort of

00:05:52,949 --> 00:05:56,530
depending on the the technology stack

00:05:54,779 --> 00:06:00,580
sort of

00:05:56,530 --> 00:06:04,150
local Maxima security is also part of

00:06:00,580 --> 00:06:05,860
that obviously maintainability is is a

00:06:04,150 --> 00:06:07,360
huge part of quality too you want to be

00:06:05,860 --> 00:06:09,040
able to have software there's adaptable

00:06:07,360 --> 00:06:11,410
and legible you know software that's

00:06:09,040 --> 00:06:14,530
stale and never changes is dead software

00:06:11,410 --> 00:06:15,550
effectively and so that's that's kind of

00:06:14,530 --> 00:06:17,680
something that that's a key

00:06:15,550 --> 00:06:20,740
characteristic the Cisco model also

00:06:17,680 --> 00:06:22,240
includes size size is thank you so much

00:06:20,740 --> 00:06:24,330
size I don't really think it was a

00:06:22,240 --> 00:06:27,790
significant concern I think early on

00:06:24,330 --> 00:06:30,130
size in kind of the the understanding of

00:06:27,790 --> 00:06:32,830
software quality size was used as a sort

00:06:30,130 --> 00:06:35,800
of proxy for complexity lines of code

00:06:32,830 --> 00:06:37,900
function points and it can be but in

00:06:35,800 --> 00:06:39,790
reality in my mind size is just a part

00:06:37,900 --> 00:06:41,680
of maintainability it's a part of

00:06:39,790 --> 00:06:45,310
efficiency it's a part of reliability

00:06:41,680 --> 00:06:48,130
too and and these things are important

00:06:45,310 --> 00:06:51,880
right so it's it's a little less in my

00:06:48,130 --> 00:06:54,790
opinion relevant to to actual software

00:06:51,880 --> 00:06:57,430
quality but it's a part of the model and

00:06:54,790 --> 00:06:59,650
when we look at how we actually change

00:06:57,430 --> 00:07:01,330
software that's running in production we

00:06:59,650 --> 00:07:04,060
kind of I kind of try to think about it

00:07:01,330 --> 00:07:06,910
as being kind of an ongoing process a

00:07:04,060 --> 00:07:09,340
pipeline if you will where you have you

00:07:06,910 --> 00:07:11,350
know hundreds of engineers all being

00:07:09,340 --> 00:07:12,729
targeted towards specific problems and

00:07:11,350 --> 00:07:13,930
and depending on their level of

00:07:12,729 --> 00:07:16,720
seniority or their level of experience

00:07:13,930 --> 00:07:20,080
or domain expertise they might be given

00:07:16,720 --> 00:07:23,410
a different kind of problem so it's kind

00:07:20,080 --> 00:07:24,970
of solve and and identify and so how you

00:07:23,410 --> 00:07:26,530
know part of that is defining the

00:07:24,970 --> 00:07:29,110
problem that you're working on maybe

00:07:26,530 --> 00:07:30,910
it's you know we've noticed that users

00:07:29,110 --> 00:07:33,940
try to do X with our software but they

00:07:30,910 --> 00:07:37,090
can't or we would like to improve the

00:07:33,940 --> 00:07:39,130
extent to which you know people can or

00:07:37,090 --> 00:07:40,479
we want to reduce the amount of memory

00:07:39,130 --> 00:07:43,330
utilization for this piece of software

00:07:40,479 --> 00:07:44,979
right that's a problem and you have a

00:07:43,330 --> 00:07:47,560
clear problem statement that you're

00:07:44,979 --> 00:07:49,270
targeting against and then you have the

00:07:47,560 --> 00:07:51,430
design phase where you take this kind of

00:07:49,270 --> 00:07:53,590
isolated problem statement with a clear

00:07:51,430 --> 00:07:55,660
scope what's in what's out and if you

00:07:53,590 --> 00:07:58,390
don't have clear scopes things can get

00:07:55,660 --> 00:08:00,190
out of hand really quickly and so you

00:07:58,390 --> 00:08:01,810
take that problem statement you identify

00:08:00,190 --> 00:08:03,490
potential solutions you design something

00:08:01,810 --> 00:08:05,620
that makes sense typically this

00:08:03,490 --> 00:08:07,630
coincides with implementation prototype

00:08:05,620 --> 00:08:09,310
a little bit you know hack it out see

00:08:07,630 --> 00:08:10,450
what works see what doesn't

00:08:09,310 --> 00:08:11,590
sometimes you have to get your hands

00:08:10,450 --> 00:08:14,260
dirty before you can figure out exactly

00:08:11,590 --> 00:08:15,700
what needs to be done and in

00:08:14,260 --> 00:08:18,010
organisations like this typically we

00:08:15,700 --> 00:08:20,800
produce a design document and a design

00:08:18,010 --> 00:08:22,389
document can be used to collaborate

00:08:20,800 --> 00:08:24,520
together on a design to identify the

00:08:22,389 --> 00:08:27,130
optimal design for a particular problem

00:08:24,520 --> 00:08:28,750
statement and then typically we'll you

00:08:27,130 --> 00:08:31,060
know the solution implementation

00:08:28,750 --> 00:08:32,919
involves a Delta like a code change a

00:08:31,060 --> 00:08:34,479
change review of some kind and then that

00:08:32,919 --> 00:08:36,039
goes to a review process as well so you

00:08:34,479 --> 00:08:40,060
have a design review and implementation

00:08:36,039 --> 00:08:42,490
review talked about and then you deploy

00:08:40,060 --> 00:08:44,890
your change you monitor your deploy you

00:08:42,490 --> 00:08:45,820
make sure that your hypothesis or

00:08:44,890 --> 00:08:47,890
whatever it is you were attempting to

00:08:45,820 --> 00:08:50,920
change actually change in the way you

00:08:47,890 --> 00:08:52,540
expected you make sure to monitor usage

00:08:50,920 --> 00:08:54,370
and make sure that there's no errors or

00:08:52,540 --> 00:08:56,170
defects that you observe and then the

00:08:54,370 --> 00:08:58,330
system is just an ongoing operation

00:08:56,170 --> 00:09:00,910
right it's at SAS software you're not

00:08:58,330 --> 00:09:02,589
delivering something shrink-wrap that

00:09:00,910 --> 00:09:04,870
that you don't have to worry about once

00:09:02,589 --> 00:09:07,600
it's shipped you know you know you you

00:09:04,870 --> 00:09:09,520
you kind of are constantly executing it

00:09:07,600 --> 00:09:12,730
and constantly operating the software

00:09:09,520 --> 00:09:14,410
and in fact in this model a deprecation

00:09:12,730 --> 00:09:16,960
is effectively just reducing the size of

00:09:14,410 --> 00:09:18,670
the software being run in production and

00:09:16,960 --> 00:09:22,450
so it's the same as this this process

00:09:18,670 --> 00:09:23,800
the kind of the the waterfall the SDLC

00:09:22,450 --> 00:09:25,720
model that we're used to seeing is very

00:09:23,800 --> 00:09:28,420
geared towards a waterfall approach

00:09:25,720 --> 00:09:31,360
towards and delivered software approach

00:09:28,420 --> 00:09:33,100
to engineering which is not at all what

00:09:31,360 --> 00:09:36,790
I see in these large organizations

00:09:33,100 --> 00:09:38,200
internet organizations today so what are

00:09:36,790 --> 00:09:40,600
the kinds of things on this pipeline

00:09:38,200 --> 00:09:42,490
that are performance indicators things

00:09:40,600 --> 00:09:44,290
that we want to optimize for the first

00:09:42,490 --> 00:09:46,510
one obviously is the deef defect

00:09:44,290 --> 00:09:48,610
detection rate how many bugs do we

00:09:46,510 --> 00:09:50,950
discover and where do we discover them

00:09:48,610 --> 00:09:54,070
so the earlier we discover defect the

00:09:50,950 --> 00:09:55,420
cheaper it is to fix this is true in in

00:09:54,070 --> 00:09:58,330
any sort of management factory

00:09:55,420 --> 00:10:00,190
management software management the the

00:09:58,330 --> 00:10:01,570
earlier you define you locate a defect

00:10:00,190 --> 00:10:03,580
the cheaper it is to fix because less

00:10:01,570 --> 00:10:06,730
time has been invested in that approach

00:10:03,580 --> 00:10:09,070
so for example a faulty design that's

00:10:06,730 --> 00:10:11,680
already implemented and has maybe I

00:10:09,070 --> 00:10:13,060
don't know five thousand lines of code

00:10:11,680 --> 00:10:15,160
and a commensurate amount of time

00:10:13,060 --> 00:10:17,650
invested in it is going to be more

00:10:15,160 --> 00:10:20,890
expensive to adjust than if you caught

00:10:17,650 --> 00:10:22,720
it at the design kind of review stage so

00:10:20,890 --> 00:10:24,939
the identifying the defects

00:10:22,720 --> 00:10:26,230
earlier our better making sure that

00:10:24,939 --> 00:10:28,089
you'd identify them before they get to

00:10:26,230 --> 00:10:30,699
production always a good thing right you

00:10:28,089 --> 00:10:33,910
don't want users to be your your beta

00:10:30,699 --> 00:10:35,920
testers right you also you think about

00:10:33,910 --> 00:10:38,649
the change size so for example if I have

00:10:35,920 --> 00:10:41,019
a DIF that's large that's a larger risk

00:10:38,649 --> 00:10:43,810
change right a large Delta has more

00:10:41,019 --> 00:10:47,920
entropy more more risk more change

00:10:43,810 --> 00:10:49,509
elements that that when deployed it

00:10:47,920 --> 00:10:51,160
could introduce issues into the system

00:10:49,509 --> 00:10:53,079
we also think about the change

00:10:51,160 --> 00:10:55,269
throughput how many changes are coming

00:10:53,079 --> 00:10:58,540
into the system ideally you know you

00:10:55,269 --> 00:11:00,850
have if you have a hundred engineers and

00:10:58,540 --> 00:11:02,379
you have you have a certain amount of

00:11:00,850 --> 00:11:04,389
kind of work that they're able to

00:11:02,379 --> 00:11:06,759
produce through that system you look at

00:11:04,389 --> 00:11:08,439
latency so how quickly do we identify a

00:11:06,759 --> 00:11:10,540
problem and that are actually able to

00:11:08,439 --> 00:11:11,769
execute that problem you know execute a

00:11:10,540 --> 00:11:14,529
solution against that problem and

00:11:11,769 --> 00:11:16,120
address it look at the number of change

00:11:14,529 --> 00:11:17,560
agents so for example chain changes in

00:11:16,120 --> 00:11:19,480
this case being typically software

00:11:17,560 --> 00:11:22,180
engineers how many software engineers

00:11:19,480 --> 00:11:24,279
are using the system and then how much

00:11:22,180 --> 00:11:26,290
time are they allocating to it right so

00:11:24,279 --> 00:11:27,819
for example a software engineer who

00:11:26,290 --> 00:11:29,829
spends half their time and meetings and

00:11:27,819 --> 00:11:32,709
a fragments that calendar is going to

00:11:29,829 --> 00:11:34,240
have a less effective approach towards

00:11:32,709 --> 00:11:36,129
problem solving to have it's gonna have

00:11:34,240 --> 00:11:39,009
an impact on throughput and latency

00:11:36,129 --> 00:11:40,870
because of the the the extent to which

00:11:39,009 --> 00:11:43,660
they're unable to have kind of focused

00:11:40,870 --> 00:11:45,069
time to work and legibility

00:11:43,660 --> 00:11:46,629
predictability is important to you need

00:11:45,069 --> 00:11:48,009
to people need to understand the

00:11:46,629 --> 00:11:50,230
pipeline they need to understand the

00:11:48,009 --> 00:11:52,029
process you know when you have a

00:11:50,230 --> 00:11:53,170
prediction or some understanding of

00:11:52,029 --> 00:11:55,959
something and then it turns out that

00:11:53,170 --> 00:12:00,790
that's not the case it's it's often

00:11:55,959 --> 00:12:02,709
measured in WTFs per minute right and so

00:12:00,790 --> 00:12:04,300
one thing kind of to kind of emergent

00:12:02,709 --> 00:12:07,540
property of all these characteristics is

00:12:04,300 --> 00:12:09,730
is complexity as well if you have for

00:12:07,540 --> 00:12:12,879
example 100 software engineers working

00:12:09,730 --> 00:12:15,490
on the same system and then you go from

00:12:12,879 --> 00:12:18,730
say a hundred to 200 you might expect to

00:12:15,490 --> 00:12:20,379
see twice as much throughput but that

00:12:18,730 --> 00:12:22,839
may not actually be the case and in fact

00:12:20,379 --> 00:12:25,750
it often isn't there's a there's a a

00:12:22,839 --> 00:12:27,040
kind of nonlinear growth to the number

00:12:25,750 --> 00:12:28,809
of software engineers working on

00:12:27,040 --> 00:12:33,880
something and the amount of throughput

00:12:28,809 --> 00:12:35,620
of change for that thing another one

00:12:33,880 --> 00:12:38,950
part of challenges humans

00:12:35,620 --> 00:12:40,990
we unfortunately are organic machines we

00:12:38,950 --> 00:12:43,300
are made of chemical processes and

00:12:40,990 --> 00:12:45,580
sometimes they're geared towards things

00:12:43,300 --> 00:12:48,460
that are not exactly optimized for

00:12:45,580 --> 00:12:50,200
writing software so one consideration is

00:12:48,460 --> 00:12:51,490
working memory right so how many things

00:12:50,200 --> 00:12:53,740
can you hold in your head at one time

00:12:51,490 --> 00:12:56,860
how many you know your ability to focus

00:12:53,740 --> 00:12:59,560
on something these these are biological

00:12:56,860 --> 00:13:01,600
things that that you know our that

00:12:59,560 --> 00:13:03,630
impact our ability to code and the way

00:13:01,600 --> 00:13:05,650
in which our an organization

00:13:03,630 --> 00:13:06,820
influences those characteristics so

00:13:05,650 --> 00:13:09,640
thinking about things like interrupts

00:13:06,820 --> 00:13:11,950
right can be problematic access to

00:13:09,640 --> 00:13:14,290
knowledge so for example I might have a

00:13:11,950 --> 00:13:16,120
level of expertise in that I've invested

00:13:14,290 --> 00:13:17,500
in the Perl programming language that's

00:13:16,120 --> 00:13:19,540
not necessarily the case for someone

00:13:17,500 --> 00:13:22,540
else and so they're going to be less

00:13:19,540 --> 00:13:24,910
effective right so we have kind of a in

00:13:22,540 --> 00:13:27,640
a slightly inconsistent level of

00:13:24,910 --> 00:13:29,230
distribution of knowledge another

00:13:27,640 --> 00:13:31,650
challenge of course is egos and

00:13:29,230 --> 00:13:34,540
territoriality I mean these are part of

00:13:31,650 --> 00:13:36,700
biological constructs in humans and all

00:13:34,540 --> 00:13:38,590
animals that we have to kind of go

00:13:36,700 --> 00:13:41,170
beyond to cooperate with each other that

00:13:38,590 --> 00:13:43,450
can be very difficult to do you know as

00:13:41,170 --> 00:13:46,030
an individual to grow beyond these

00:13:43,450 --> 00:13:49,000
things is difficult we have a number of

00:13:46,030 --> 00:13:52,240
cognitive biases horn biases Hailo

00:13:49,000 --> 00:13:53,530
biases things that you know confirmation

00:13:52,240 --> 00:13:57,040
bias these things that make it hard for

00:13:53,530 --> 00:13:59,200
us to truly see and understand reality

00:13:57,040 --> 00:14:01,960
because of the details of how our brain

00:13:59,200 --> 00:14:03,880
works and there's also kind of a diverse

00:14:01,960 --> 00:14:05,680
set of things like no two humans are

00:14:03,880 --> 00:14:07,060
exactly the same that can't be managed

00:14:05,680 --> 00:14:08,920
the same way that can't allocate their

00:14:07,060 --> 00:14:11,470
time the same way they each have their

00:14:08,920 --> 00:14:13,930
own optimal version of reality and when

00:14:11,470 --> 00:14:16,270
you're trying to coordinate hundreds of

00:14:13,930 --> 00:14:17,560
people all of them working on so you

00:14:16,270 --> 00:14:19,540
know having slightly different global

00:14:17,560 --> 00:14:22,720
Maximas for their their productivity

00:14:19,540 --> 00:14:24,610
it's hard to do that but that also comes

00:14:22,720 --> 00:14:26,140
at an advantage that diversity gives us

00:14:24,610 --> 00:14:28,600
perspective it allows us to distribute

00:14:26,140 --> 00:14:30,100
knowledge in ways that is most efficient

00:14:28,600 --> 00:14:31,810
effective for human brain so there's

00:14:30,100 --> 00:14:33,730
there's value in that cognitive

00:14:31,810 --> 00:14:37,210
diversity and that work style diversity

00:14:33,730 --> 00:14:40,150
but it's a challenge as well having lots

00:14:37,210 --> 00:14:41,530
of humans is more challenging so when

00:14:40,150 --> 00:14:43,120
you have a really large systems with

00:14:41,530 --> 00:14:45,070
hundreds of people working on it any

00:14:43,120 --> 00:14:48,250
knowledge I have on a system is

00:14:45,070 --> 00:14:49,180
necessarily out-of-date it's what I knew

00:14:48,250 --> 00:14:50,800
the last time I looked at

00:14:49,180 --> 00:14:52,900
a lot of stuff has changed since then I

00:14:50,800 --> 00:14:54,550
don't know what that is

00:14:52,900 --> 00:14:56,230
Communications can be difficult so you

00:14:54,550 --> 00:14:57,820
think about how do people email each

00:14:56,230 --> 00:14:59,860
other how do people talk to each other

00:14:57,820 --> 00:15:02,350
what is the expectation of turnaround

00:14:59,860 --> 00:15:03,790
time the number of stakeholders that you

00:15:02,350 --> 00:15:05,770
have so for example if you need to

00:15:03,790 --> 00:15:07,240
decide what to do about a particular

00:15:05,770 --> 00:15:08,560
piece of software you have a number of

00:15:07,240 --> 00:15:10,720
you know you have a decision to make

00:15:08,560 --> 00:15:12,580
there are X possible changes we can make

00:15:10,720 --> 00:15:14,590
which one should we make the number of

00:15:12,580 --> 00:15:15,790
stakeholders that you have the higher

00:15:14,590 --> 00:15:17,740
number of stakeholders makes it more

00:15:15,790 --> 00:15:18,970
difficult to schedule meetings makes it

00:15:17,740 --> 00:15:21,460
more difficult to reach consensus

00:15:18,970 --> 00:15:23,500
because you have to deal with all these

00:15:21,460 --> 00:15:25,300
different people and then of course

00:15:23,500 --> 00:15:27,250
interrupts is always a pain in

00:15:25,300 --> 00:15:29,920
interrupting flow state can have serious

00:15:27,250 --> 00:15:31,900
impact on productivity and of course

00:15:29,920 --> 00:15:33,550
quality as a results and kind of

00:15:31,900 --> 00:15:35,500
coordinating these people aligning the

00:15:33,550 --> 00:15:36,520
goals having everyone work together even

00:15:35,500 --> 00:15:39,100
though we have slightly different

00:15:36,520 --> 00:15:42,370
perspectives is difficult software

00:15:39,100 --> 00:15:44,260
itself is also hard I like to think like

00:15:42,370 --> 00:15:46,960
software engineering is really hard

00:15:44,260 --> 00:15:48,400
compared to things like carpentry or

00:15:46,960 --> 00:15:51,580
woodworking or plumbing because like

00:15:48,400 --> 00:15:54,160
it's abstract it's invisible you know

00:15:51,580 --> 00:15:56,470
when I talk about timers and gauges and

00:15:54,160 --> 00:15:58,300
dials it's kind of an abstract thing

00:15:56,470 --> 00:16:00,460
that I have to think about but when

00:15:58,300 --> 00:16:02,470
you're when you work it like a water

00:16:00,460 --> 00:16:04,210
factory or water plants like there's a

00:16:02,470 --> 00:16:06,430
pipeline right there and you can see it

00:16:04,210 --> 00:16:08,290
you can walk up to it and being able to

00:16:06,430 --> 00:16:10,330
visualize that I think humans are much

00:16:08,290 --> 00:16:11,680
better geared towards things that we can

00:16:10,330 --> 00:16:13,750
seen interact with our environment we're

00:16:11,680 --> 00:16:15,790
a software it's like okay you get two

00:16:13,750 --> 00:16:17,500
pages of them you know that you get to

00:16:15,790 --> 00:16:18,640
see at one time and you have to kind of

00:16:17,500 --> 00:16:21,790
keep the rest in your head it's

00:16:18,640 --> 00:16:23,080
difficult and when you have lots of

00:16:21,790 --> 00:16:24,760
software working together in a large

00:16:23,080 --> 00:16:26,260
system it becomes impossible to know all

00:16:24,760 --> 00:16:30,370
of it at the same time it's just not

00:16:26,260 --> 00:16:32,140
possible and and also measuring it and

00:16:30,370 --> 00:16:35,980
understanding it is difficult too so for

00:16:32,140 --> 00:16:39,160
example you can't take a a metric of

00:16:35,980 --> 00:16:40,780
measurement across the entire system you

00:16:39,160 --> 00:16:43,330
take a sample of a measurement across

00:16:40,780 --> 00:16:45,730
the entire system and extrapolate but

00:16:43,330 --> 00:16:47,500
that necessarily comes with some level

00:16:45,730 --> 00:16:48,730
of confidence that's lower than 100

00:16:47,500 --> 00:16:51,820
percent so the accuracy of your

00:16:48,730 --> 00:16:53,710
measurements is not exactly 100 percent

00:16:51,820 --> 00:16:55,480
and so you have some stochastic

00:16:53,710 --> 00:16:58,180
processes and stochastic thinking that's

00:16:55,480 --> 00:17:01,030
required to really understand software

00:16:58,180 --> 00:17:03,220
at a distributed scale part of is also

00:17:01,030 --> 00:17:05,709
distributed computing is just hard

00:17:03,220 --> 00:17:11,500
networks themselves are notoriously

00:17:05,709 --> 00:17:15,510
reliable and stateful systems are just

00:17:11,500 --> 00:17:18,010
challenging you know keeping keeping a

00:17:15,510 --> 00:17:21,610
couple gigabytes of data in memory on

00:17:18,010 --> 00:17:24,760
one machine is fairly easy a couple you

00:17:21,610 --> 00:17:26,800
know terabytes is a little harder right

00:17:24,760 --> 00:17:28,150
and so thinking about how you distribute

00:17:26,800 --> 00:17:29,380
these things and the challenges

00:17:28,150 --> 00:17:30,970
associated with distributing stateful

00:17:29,380 --> 00:17:32,950
systems is can be very difficult and

00:17:30,970 --> 00:17:34,630
coordinating these things the system

00:17:32,950 --> 00:17:36,690
identity leads to challenges too so in

00:17:34,630 --> 00:17:39,880
security context that can be difficult

00:17:36,690 --> 00:17:41,770
so there are a number of techniques that

00:17:39,880 --> 00:17:43,840
we use to manage these challenges that

00:17:41,770 --> 00:17:46,930
we use to to kind of optimize these

00:17:43,840 --> 00:17:48,430
processes and optimize the pipeline so

00:17:46,930 --> 00:17:49,650
one of these is design and code review

00:17:48,430 --> 00:17:51,640
we talked a bit about that before

00:17:49,650 --> 00:17:53,590
essentially it allows you to leverage

00:17:51,640 --> 00:17:55,960
distributed knowledge and distribute

00:17:53,590 --> 00:17:58,290
knowledge across the organization so I

00:17:55,960 --> 00:18:01,720
may not know the optimal way to

00:17:58,290 --> 00:18:03,820
implement a a ownership system across

00:18:01,720 --> 00:18:06,130
our entire system but I might know the

00:18:03,820 --> 00:18:07,330
way for a local portion of it someone

00:18:06,130 --> 00:18:09,220
else might know a way for the other

00:18:07,330 --> 00:18:11,020
local portion of it and someone else

00:18:09,220 --> 00:18:13,660
might know another and together kind of

00:18:11,020 --> 00:18:15,220
we can collaborate on a design document

00:18:13,660 --> 00:18:17,140
and share it and make sure that we

00:18:15,220 --> 00:18:19,270
leverage everyone's knowledge because

00:18:17,140 --> 00:18:21,060
it's distributed knowledge in in these

00:18:19,270 --> 00:18:24,250
distributed in these organizations to

00:18:21,060 --> 00:18:26,110
collect that into an optimal approach so

00:18:24,250 --> 00:18:28,390
it's taking the wisdom of the crowds of

00:18:26,110 --> 00:18:30,790
your own organization and leveraging

00:18:28,390 --> 00:18:32,740
that so it's really key and it also just

00:18:30,790 --> 00:18:36,370
by having a design doc it forces you to

00:18:32,740 --> 00:18:38,440
think about this the problem from first

00:18:36,370 --> 00:18:40,750
principles from first steps and creating

00:18:38,440 --> 00:18:44,950
that process around them is crucial to

00:18:40,750 --> 00:18:46,320
ensuring that you have frankly a log of

00:18:44,950 --> 00:18:48,400
the decisions that are made

00:18:46,320 --> 00:18:50,020
documentation about why a system was

00:18:48,400 --> 00:18:53,010
designed a certain way these things are

00:18:50,020 --> 00:18:56,350
like design documents are crucial for

00:18:53,010 --> 00:18:57,910
for business continuity as well code

00:18:56,350 --> 00:18:59,680
review is pretty typical I think

00:18:57,910 --> 00:19:02,290
catching human errors is a key part of

00:18:59,680 --> 00:19:03,640
this I think folks who are earlier in

00:19:02,290 --> 00:19:05,860
the career can benefit from learning

00:19:03,640 --> 00:19:07,030
quite a bit from code review as well so

00:19:05,860 --> 00:19:08,980
it's a really good thing it also acts as

00:19:07,030 --> 00:19:10,690
security control so for example you have

00:19:08,980 --> 00:19:13,000
a constraint hey every piece of code

00:19:10,690 --> 00:19:15,640
must be reviewed the likelihood of a mal

00:19:13,000 --> 00:19:17,170
actor being able to you know a employed

00:19:15,640 --> 00:19:19,360
mal Act

00:19:17,170 --> 00:19:22,360
being able to change a system in a

00:19:19,360 --> 00:19:24,250
negative ways is reduced does anyone use

00:19:22,360 --> 00:19:25,600
design or code review so there's code

00:19:24,250 --> 00:19:26,740
reviews to show of hands code reviews

00:19:25,600 --> 00:19:30,760
your organization okay

00:19:26,740 --> 00:19:33,840
design reviews some okay yeah design

00:19:30,760 --> 00:19:36,790
reviews are important for sure

00:19:33,840 --> 00:19:38,380
multivariate experiments so if you have

00:19:36,790 --> 00:19:43,440
a change that you're looking to make we

00:19:38,380 --> 00:19:46,210
want to see an increase in email signups

00:19:43,440 --> 00:19:48,760
well you once you have kind of something

00:19:46,210 --> 00:19:51,760
that your your a goal you can create a

00:19:48,760 --> 00:19:53,770
hypothesis and model and experimenting

00:19:51,760 --> 00:19:55,690
of code and kind of roll it out say take

00:19:53,770 --> 00:19:57,610
a portion of traffic show them a

00:19:55,690 --> 00:19:59,830
different treatment and measure the

00:19:57,610 --> 00:20:02,830
impact to which it actually has on that

00:19:59,830 --> 00:20:04,660
user so you can kind of understand the

00:20:02,830 --> 00:20:06,070
impact holistically you can understand

00:20:04,660 --> 00:20:08,320
the impact before rolling out of feature

00:20:06,070 --> 00:20:08,890
before you've invested a lot of time in

00:20:08,320 --> 00:20:11,520
it already

00:20:08,890 --> 00:20:16,870
people here use multivariate experiments

00:20:11,520 --> 00:20:19,600
no oh you it's it's a necessity it is it

00:20:16,870 --> 00:20:21,670
is absolutely necessity and having a

00:20:19,600 --> 00:20:23,860
holdout group also allows for regression

00:20:21,670 --> 00:20:25,810
detection which is important too so in

00:20:23,860 --> 00:20:29,530
the future for example if you release a

00:20:25,810 --> 00:20:31,660
feature but you have 0.001 percent of

00:20:29,530 --> 00:20:34,240
all users never see that feature and

00:20:31,660 --> 00:20:36,340
then a bug gets introduced but you have

00:20:34,240 --> 00:20:38,440
this this toggle switch still in there

00:20:36,340 --> 00:20:40,570
and you can see oh wait this weird

00:20:38,440 --> 00:20:43,360
holdout group doesn't see the bug that

00:20:40,570 --> 00:20:45,250
gives you a clue you can use to to kind

00:20:43,360 --> 00:20:46,270
of go through the the debug room

00:20:45,250 --> 00:20:50,830
troubleshooting process it's really

00:20:46,270 --> 00:20:53,890
really useful gradual deploys people use

00:20:50,830 --> 00:20:56,350
gradual rollouts gradual deploys okay so

00:20:53,890 --> 00:20:58,420
gradual deploys it's kind of a

00:20:56,350 --> 00:21:00,580
stochastic process for valuing quality

00:20:58,420 --> 00:21:02,680
so you you maybe have a change or

00:21:00,580 --> 00:21:04,240
release to a species of software you

00:21:02,680 --> 00:21:06,910
convert let's say you have a fleet of a

00:21:04,240 --> 00:21:09,580
thousand servers maybe you convert two

00:21:06,910 --> 00:21:12,310
of them at a time or but let's say ten

00:21:09,580 --> 00:21:14,350
percent and then you you measure between

00:21:12,310 --> 00:21:16,900
this ten percent and this 90 percent the

00:21:14,350 --> 00:21:18,910
rest of it what is the difference in in

00:21:16,900 --> 00:21:21,190
these characteristics so how many 500s

00:21:18,910 --> 00:21:22,570
am I getting in the 90 percent how many

00:21:21,190 --> 00:21:24,610
in the ten percent and are these

00:21:22,570 --> 00:21:26,680
sufficiently different enough to be able

00:21:24,610 --> 00:21:27,190
to to say oh there might be an issue

00:21:26,680 --> 00:21:28,810
here and

00:21:27,190 --> 00:21:34,690
you can automate that process and have

00:21:28,810 --> 00:21:37,930
rollbacks cool abstraction management

00:21:34,690 --> 00:21:42,070
this one is really key and it's kind of

00:21:37,930 --> 00:21:44,110
the most difficult thing to to measure

00:21:42,070 --> 00:21:46,990
the impact of and and and frankly

00:21:44,110 --> 00:21:48,100
justifying fast minion but it is often

00:21:46,990 --> 00:21:50,050
in my experience some of the most

00:21:48,100 --> 00:21:52,330
impactful things that you can do towards

00:21:50,050 --> 00:21:53,620
the maintainability so thinking about

00:21:52,330 --> 00:21:55,900
abstraction management I think about

00:21:53,620 --> 00:21:57,640
what are the what are what are we what

00:21:55,900 --> 00:21:59,290
are the tools that we can give product

00:21:57,640 --> 00:22:01,750
engineers the building blocks that they

00:21:59,290 --> 00:22:04,210
can use to be able to change the system

00:22:01,750 --> 00:22:05,130
as quickly as possible as safely as

00:22:04,210 --> 00:22:08,680
possible

00:22:05,130 --> 00:22:10,600
and and how do you make it composable

00:22:08,680 --> 00:22:13,690
reusable modifiable with a minimal

00:22:10,600 --> 00:22:15,280
effort required right those those are

00:22:13,690 --> 00:22:17,950
important things and how you structure

00:22:15,280 --> 00:22:20,050
your code is what enables that and all

00:22:17,950 --> 00:22:22,120
abstractions produce duplication it's an

00:22:20,050 --> 00:22:23,890
inevitability at some layer there's

00:22:22,120 --> 00:22:25,720
going to be duplication you need to

00:22:23,890 --> 00:22:28,090
decide what layer that is and if that's

00:22:25,720 --> 00:22:29,800
a good thing or not

00:22:28,090 --> 00:22:32,680
another thing is important is announced

00:22:29,800 --> 00:22:34,780
your naming verbs functions systems and

00:22:32,680 --> 00:22:36,910
making sure that a now conveys what it

00:22:34,780 --> 00:22:39,400
does that it's concise and precise and

00:22:36,910 --> 00:22:41,260
enables a true abstraction a true

00:22:39,400 --> 00:22:43,330
abstraction being something where you

00:22:41,260 --> 00:22:44,650
don't have to care about you can treat

00:22:43,330 --> 00:22:46,330
it like a black box you don't have to

00:22:44,650 --> 00:22:48,370
care how it works

00:22:46,330 --> 00:22:52,630
abstractions can often be leaky so for

00:22:48,370 --> 00:22:54,040
example if you open a file handle you

00:22:52,630 --> 00:22:56,260
don't expect to have to think about

00:22:54,040 --> 00:22:59,410
things like inodes but you might

00:22:56,260 --> 00:23:01,030
sometimes right you might have to and so

00:22:59,410 --> 00:23:03,160
thinking about making sure your your

00:23:01,030 --> 00:23:07,900
abstractions are as leak-proof as

00:23:03,160 --> 00:23:10,930
possible is is important unit tests are

00:23:07,900 --> 00:23:13,270
also a key key tool to people here use

00:23:10,930 --> 00:23:15,100
unit tests in your organization okay

00:23:13,270 --> 00:23:18,280
that's much better show of hands I'm

00:23:15,100 --> 00:23:19,600
glad to see that the this secret of unit

00:23:18,280 --> 00:23:21,190
test I'm gonna read this off the slide

00:23:19,600 --> 00:23:22,780
because I love it so much

00:23:21,190 --> 00:23:26,620
the secret of unit test is that you have

00:23:22,780 --> 00:23:28,780
to describe the solution twice forcing

00:23:26,620 --> 00:23:31,270
you to change both implementations when

00:23:28,780 --> 00:23:34,390
you need to and warning you when you

00:23:31,270 --> 00:23:36,760
unintentionally change one that's the

00:23:34,390 --> 00:23:39,560
secret that's really the secret of unit

00:23:36,760 --> 00:23:42,000
test the the

00:23:39,560 --> 00:23:43,680
essentially is a way to denote eight

00:23:42,000 --> 00:23:48,150
something in two ways a kind of

00:23:43,680 --> 00:23:50,280
declarative way and a iterative way or

00:23:48,150 --> 00:23:51,540
not a native way but a procedural way to

00:23:50,280 --> 00:23:53,790
say okay this is the code we actually

00:23:51,540 --> 00:23:55,590
execute this is what it does there's two

00:23:53,790 --> 00:23:57,210
versions of it here and if I change this

00:23:55,590 --> 00:23:58,830
one I also have to change this one it

00:23:57,210 --> 00:24:01,410
makes sure that it's an intentional

00:23:58,830 --> 00:24:03,390
change and it's absolutely crucial for

00:24:01,410 --> 00:24:04,680
refactoring and a necessity for

00:24:03,390 --> 00:24:07,890
refactoring and it's great for

00:24:04,680 --> 00:24:09,810
regression analysis as well all right

00:24:07,890 --> 00:24:13,110
here's the fun stuff automated tooling

00:24:09,810 --> 00:24:14,910
so we can have static analysis tools so

00:24:13,110 --> 00:24:19,860
in in Perl this would be typically

00:24:14,910 --> 00:24:22,050
something like PPI so you you parse the

00:24:19,860 --> 00:24:25,470
code is a document itself and not

00:24:22,050 --> 00:24:27,330
necessarily execute or run for example

00:24:25,470 --> 00:24:29,010
in Perl like begin blocks or or code

00:24:27,330 --> 00:24:33,330
transformations there's substitutions

00:24:29,010 --> 00:24:35,910
things like that and as you can you do

00:24:33,330 --> 00:24:37,260
automatic analysis based on on this

00:24:35,910 --> 00:24:39,390
tooling you can do linting you can do

00:24:37,260 --> 00:24:42,510
type checking compliance for

00:24:39,390 --> 00:24:44,880
architectural concerns presence of a

00:24:42,510 --> 00:24:47,930
common anti-patterns so there's a lot of

00:24:44,880 --> 00:24:51,200
what I like to call foot guns things in

00:24:47,930 --> 00:24:54,450
in Perl and and another language is

00:24:51,200 --> 00:24:57,030
where they are not as easy as they may

00:24:54,450 --> 00:25:01,050
seem and it's very easy to accidentally

00:24:57,030 --> 00:25:02,910
hurt yourself and having tooling that as

00:25:01,050 --> 00:25:06,690
an organization you you own you you

00:25:02,910 --> 00:25:08,370
curate to kind of identify when people

00:25:06,690 --> 00:25:10,950
have these issues and prevent them ISM

00:25:08,370 --> 00:25:12,270
is crucial dynamic analysis tooling so

00:25:10,950 --> 00:25:13,980
this is one where you actually run the

00:25:12,270 --> 00:25:15,300
software so there's a sink shanira

00:25:13,980 --> 00:25:16,350
static analysis you don't run the

00:25:15,300 --> 00:25:18,630
software you look at the notation

00:25:16,350 --> 00:25:21,270
dynamic analysis you run the software so

00:25:18,630 --> 00:25:23,040
you can think ppi like a parser for it

00:25:21,270 --> 00:25:25,110
static analysis for dynamic analysis you

00:25:23,040 --> 00:25:26,730
have to run it in Perl

00:25:25,110 --> 00:25:28,230
so things that you can do here is

00:25:26,730 --> 00:25:29,700
looking at network connections so when I

00:25:28,230 --> 00:25:31,290
run this piece of software what are the

00:25:29,700 --> 00:25:32,880
network that it connects to is that what

00:25:31,290 --> 00:25:35,490
I expect right so that might be an

00:25:32,880 --> 00:25:37,620
analysis I might conduct is the amount

00:25:35,490 --> 00:25:39,210
of network kind of output being sent

00:25:37,620 --> 00:25:41,160
when I run you know stimulate the

00:25:39,210 --> 00:25:43,260
software with this particular input what

00:25:41,160 --> 00:25:46,440
I would expect are their side effects

00:25:43,260 --> 00:25:48,450
that I would would expect to see to low

00:25:46,440 --> 00:25:50,549
testing so you might have a little

00:25:48,450 --> 00:25:52,230
system that you low test and

00:25:50,549 --> 00:25:54,169
isolating and be able to better

00:25:52,230 --> 00:25:56,850
understand from from that perspective

00:25:54,169 --> 00:25:58,559
fuzzing is another one so you can just

00:25:56,850 --> 00:26:00,720
give it random input see what fails and

00:25:58,559 --> 00:26:03,270
see what doesn't oftentimes that's very

00:26:00,720 --> 00:26:05,760
helpful and the secondly automated

00:26:03,270 --> 00:26:07,860
programmatic inspect introspection so

00:26:05,760 --> 00:26:12,690
for example memory sampling or profiling

00:26:07,860 --> 00:26:15,690
I know of cases where we we we run a

00:26:12,690 --> 00:26:18,360
safe you know every 15 minutes we run a

00:26:15,690 --> 00:26:20,640
a memory profiler on a portion of all

00:26:18,360 --> 00:26:22,380
machines in the fleet and so we can

00:26:20,640 --> 00:26:24,659
build from that and understanding of how

00:26:22,380 --> 00:26:26,610
memory usage in production changes over

00:26:24,659 --> 00:26:29,700
time and of course there's a distinction

00:26:26,610 --> 00:26:31,650
between memory usage at startup memory

00:26:29,700 --> 00:26:33,840
usage after five minutes memory usage

00:26:31,650 --> 00:26:35,340
after 10 minutes and kind of watching

00:26:33,840 --> 00:26:38,400
that growth and understanding that is a

00:26:35,340 --> 00:26:40,559
crucial portion of a programmatic

00:26:38,400 --> 00:26:44,630
introspection which gives you tooling to

00:26:40,559 --> 00:26:47,549
enable code quality constraints and

00:26:44,630 --> 00:26:49,320
feedback loops do people use automatic

00:26:47,549 --> 00:26:53,760
tooling here pearl critic pearl Tiny's

00:26:49,320 --> 00:26:56,580
something yeah ok organizational

00:26:53,760 --> 00:26:59,429
constraints so are you familiar with the

00:26:56,580 --> 00:27:01,830
reverse Conway maneuver now you form the

00:26:59,429 --> 00:27:04,860
Conway's law Conway's law basically

00:27:01,830 --> 00:27:07,230
states that the communication structures

00:27:04,860 --> 00:27:08,880
of an organization will be mirrored in

00:27:07,230 --> 00:27:10,860
the architecture that of the software

00:27:08,880 --> 00:27:13,020
that they produce so if you have a

00:27:10,860 --> 00:27:15,809
compiler team and you divide it into

00:27:13,020 --> 00:27:17,490
four teams you get a four pass compiler

00:27:15,809 --> 00:27:19,080
if you get a compiler teaming you're

00:27:17,490 --> 00:27:22,500
dividing into three teams you get a

00:27:19,080 --> 00:27:24,260
three pass compiler right so essentially

00:27:22,500 --> 00:27:26,309
the reverse Conway maneuver is

00:27:24,260 --> 00:27:28,679
identifying the architecture of the

00:27:26,309 --> 00:27:31,289
software that you want to see and then

00:27:28,679 --> 00:27:33,390
creating the organization creating the

00:27:31,289 --> 00:27:36,480
teams in the structure that would best

00:27:33,390 --> 00:27:38,220
map that out thinking about the comms

00:27:36,480 --> 00:27:39,320
channels that people use how do people

00:27:38,220 --> 00:27:42,120
communicate with each other

00:27:39,320 --> 00:27:43,830
typically in large organizations if you

00:27:42,120 --> 00:27:46,380
think about like an org chart as a tree

00:27:43,830 --> 00:27:49,020
going up and down communication is very

00:27:46,380 --> 00:27:50,610
easy side to side is hard right talking

00:27:49,020 --> 00:27:51,750
to your cousin's is harder than talking

00:27:50,610 --> 00:27:54,500
to your parents it requires a little

00:27:51,750 --> 00:27:57,840
more thinking at the same kind of thing

00:27:54,500 --> 00:27:58,919
and so kind of reducing that friction

00:27:57,840 --> 00:28:01,530
creating calm scales or juice of

00:27:58,919 --> 00:28:02,940
friction is important I've seen cases

00:28:01,530 --> 00:28:04,770
like whip limits were

00:28:02,940 --> 00:28:06,330
in progress limits the number of open

00:28:04,770 --> 00:28:08,460
projects a team is allowed to have is

00:28:06,330 --> 00:28:11,850
constraint so as not to kind of overload

00:28:08,460 --> 00:28:14,010
them error budgets if you have an SLA

00:28:11,850 --> 00:28:17,640
and you say I will be available at this

00:28:14,010 --> 00:28:19,470
degree you and you are not like your

00:28:17,640 --> 00:28:21,090
time that you're able to allocate is

00:28:19,470 --> 00:28:23,070
constraints for other projects for new

00:28:21,090 --> 00:28:24,900
features so if you are not meeting your

00:28:23,070 --> 00:28:28,800
SLA you don't get to work on new

00:28:24,900 --> 00:28:30,570
features you get to work on bugs time

00:28:28,800 --> 00:28:33,420
management ones so at Pinterest we have

00:28:30,570 --> 00:28:36,630
no meeting Wednesday's which is great I

00:28:33,420 --> 00:28:38,760
get a solid you know uninterrupted

00:28:36,630 --> 00:28:39,900
blocks on Wednesdays and because

00:28:38,760 --> 00:28:41,730
everyone does it

00:28:39,900 --> 00:28:43,470
there's no I don't have to worry about

00:28:41,730 --> 00:28:45,030
an hour later I don't you know declining

00:28:43,470 --> 00:28:47,640
meetings right because it's a it's an

00:28:45,030 --> 00:28:49,230
organizational constraint it enables all

00:28:47,640 --> 00:28:51,390
of us to do it and all of us when we

00:28:49,230 --> 00:28:53,550
coordinate meetings with each other know

00:28:51,390 --> 00:28:57,600
that this is kind of a it's something

00:28:53,550 --> 00:28:59,160
that we don't do right maximum physical

00:28:57,600 --> 00:29:01,050
sites per team is something I've seen as

00:28:59,160 --> 00:29:03,390
well co-locating people can really

00:29:01,050 --> 00:29:06,570
reduce the threshold effort required to

00:29:03,390 --> 00:29:08,880
communicate and so having cases where I

00:29:06,570 --> 00:29:10,920
know at Google for example there were

00:29:08,880 --> 00:29:12,570
limits to the amount of sites that a

00:29:10,920 --> 00:29:14,940
particular team is allowed to have so

00:29:12,570 --> 00:29:16,710
how many offices can people work on for

00:29:14,940 --> 00:29:20,610
a particular team how decentralized are

00:29:16,710 --> 00:29:22,110
they allowed to be I've seen constraints

00:29:20,610 --> 00:29:23,940
around language of communication you

00:29:22,110 --> 00:29:25,920
know hey we standardize on English we

00:29:23,940 --> 00:29:27,690
standardize on Chinese we standardize on

00:29:25,920 --> 00:29:29,400
German this is more popular outside the

00:29:27,690 --> 00:29:31,080
US in the u.s. it's less of a

00:29:29,400 --> 00:29:32,700
conversation but it's it can be

00:29:31,080 --> 00:29:34,710
important to have a consistent language

00:29:32,700 --> 00:29:36,540
to ensure that people in the office can

00:29:34,710 --> 00:29:38,940
all kind of join in in each other's

00:29:36,540 --> 00:29:43,710
conversations over here each other and

00:29:38,940 --> 00:29:47,460
be a part of a part of a group right you

00:29:43,710 --> 00:29:51,570
think also about nudge seniority curve

00:29:47,460 --> 00:29:55,080
yeah so a team with lots of people who

00:29:51,570 --> 00:29:57,200
are too junior can be less productive

00:29:55,080 --> 00:29:59,940
than a team with lots of people who are

00:29:57,200 --> 00:30:01,830
kind of spread out right and a team that

00:29:59,940 --> 00:30:03,660
where everyone is too senior can also be

00:30:01,830 --> 00:30:04,920
problematic depending on what the

00:30:03,660 --> 00:30:07,110
characteristics of each individual on

00:30:04,920 --> 00:30:09,150
that team are interested in and so I've

00:30:07,110 --> 00:30:11,820
seen cases where you know they'll

00:30:09,150 --> 00:30:14,100
they'll have like a manager must be you

00:30:11,820 --> 00:30:15,530
know at a certain level and then you

00:30:14,100 --> 00:30:17,570
know it has to be higher than all the

00:30:15,530 --> 00:30:19,040
but we report to them and then the tech

00:30:17,570 --> 00:30:21,920
lead has to be roughly the same like

00:30:19,040 --> 00:30:24,050
sometimes there's rules around you know

00:30:21,920 --> 00:30:26,930
what we expect to see a team make up

00:30:24,050 --> 00:30:29,440
from a seniority perspective in order to

00:30:26,930 --> 00:30:33,410
ensure that you have a right mix of

00:30:29,440 --> 00:30:36,500
folks to optimize for for high quality

00:30:33,410 --> 00:30:39,710
software but also that maximize your

00:30:36,500 --> 00:30:43,220
resource utilization right if you have a

00:30:39,710 --> 00:30:45,860
you know sending a compiler designer to

00:30:43,220 --> 00:30:47,870
work on you know low-level bug fixes is

00:30:45,860 --> 00:30:49,280
not necessarily the best use of time nor

00:30:47,870 --> 00:30:50,570
is it the best use for a business

00:30:49,280 --> 00:30:52,790
continuity purposes right you want to

00:30:50,570 --> 00:30:54,800
get folks in give them things that they

00:30:52,790 --> 00:30:56,210
can do and grow them and noticing you

00:30:54,800 --> 00:30:59,390
already curves I was going to say forced

00:30:56,210 --> 00:31:02,810
but that's not entirely true can can

00:30:59,390 --> 00:31:04,490
help there so organizational culture we

00:31:02,810 --> 00:31:07,460
look at things like psychological safety

00:31:04,490 --> 00:31:09,860
our folks are folks able to to to

00:31:07,460 --> 00:31:11,770
dissent say no I don't think that's a

00:31:09,860 --> 00:31:13,910
good approach or here's another approach

00:31:11,770 --> 00:31:15,110
our folks able to come up with things

00:31:13,910 --> 00:31:16,360
that they're not a hundred percent

00:31:15,110 --> 00:31:19,190
confident that it's the right approach

00:31:16,360 --> 00:31:20,690
our folks able able to criticize each

00:31:19,190 --> 00:31:23,210
other's thoughts and ideas comfortably

00:31:20,690 --> 00:31:25,400
you know that's important and oftentimes

00:31:23,210 --> 00:31:27,440
organizations will leverage that

00:31:25,400 --> 00:31:29,420
component of culture psychological

00:31:27,440 --> 00:31:32,650
safety to to produce better software

00:31:29,420 --> 00:31:36,010
there's a direct relationship here

00:31:32,650 --> 00:31:38,480
having norms social like cultural

00:31:36,010 --> 00:31:40,790
vulture eval use around communication

00:31:38,480 --> 00:31:43,580
and empathy and user focus also help

00:31:40,790 --> 00:31:45,440
reorient conversations towards these

00:31:43,580 --> 00:31:48,410
things in cases where they get out of

00:31:45,440 --> 00:31:51,950
hand inclusion diversity efforts can be

00:31:48,410 --> 00:31:53,870
highly helpful so for example a team of

00:31:51,950 --> 00:31:57,500
product designers where everyone is from

00:31:53,870 --> 00:32:00,410
you know the the same part of New York

00:31:57,500 --> 00:32:03,020
City is not going to be as effective in

00:32:00,410 --> 00:32:04,910
designing products for the United States

00:32:03,020 --> 00:32:08,590
as someone for me you know a more

00:32:04,910 --> 00:32:08,590
diverse set of life experiences

00:32:09,010 --> 00:32:12,530
understanding that failure is a

00:32:10,670 --> 00:32:13,760
necessary path to success and having

00:32:12,530 --> 00:32:15,740
that be a part of your organizational

00:32:13,760 --> 00:32:18,260
culture is also key towards quality

00:32:15,740 --> 00:32:22,250
software surprisingly and having you

00:32:18,260 --> 00:32:24,050
know I've seen cases where team building

00:32:22,250 --> 00:32:25,460
kind of helps create a sense of team

00:32:24,050 --> 00:32:27,830
cohesion which enables people to more

00:32:25,460 --> 00:32:28,830
work more smoothly together celebrating

00:32:27,830 --> 00:32:30,360
impact

00:32:28,830 --> 00:32:33,060
you know when people do something

00:32:30,360 --> 00:32:34,800
meaningful and you you put them on a

00:32:33,060 --> 00:32:35,850
stage and you say hey this person is

00:32:34,800 --> 00:32:38,160
something meaningful it gives them a

00:32:35,850 --> 00:32:40,200
sense of recognition but also signals to

00:32:38,160 --> 00:32:41,670
the entire organization these are the

00:32:40,200 --> 00:32:44,210
kinds of things that we are looking for

00:32:41,670 --> 00:32:47,460
right so it's a way to influence

00:32:44,210 --> 00:32:49,620
decision making an influence product

00:32:47,460 --> 00:32:51,960
della project allocation without having

00:32:49,620 --> 00:32:54,360
to be heavy-handed about it

00:32:51,960 --> 00:32:57,180
eating together has kind of a base

00:32:54,360 --> 00:32:59,160
psychological component of of creating a

00:32:57,180 --> 00:33:03,480
sense of cohesion that many of these

00:32:59,160 --> 00:33:05,400
organizations employ teen clothing so we

00:33:03,480 --> 00:33:07,770
all kind of get a t-shirt or sweatshirt

00:33:05,400 --> 00:33:08,940
I have one here like I have every

00:33:07,770 --> 00:33:11,040
company I've ever worked out has given

00:33:08,940 --> 00:33:12,630
me a dozen of these and and there's a

00:33:11,040 --> 00:33:15,060
value in having that there's it's almost

00:33:12,630 --> 00:33:16,530
like not quite a uniform but it gives

00:33:15,060 --> 00:33:18,810
you a sense of hey we're in this

00:33:16,530 --> 00:33:21,870
together it's a very visual marker of

00:33:18,810 --> 00:33:23,610
we're on the same team and deliberately

00:33:21,870 --> 00:33:26,220
developmental organization so these are

00:33:23,610 --> 00:33:27,900
these are cultures where people create a

00:33:26,220 --> 00:33:29,850
sense of hate feedback as a part of our

00:33:27,900 --> 00:33:31,920
life here we want to help you be more

00:33:29,850 --> 00:33:34,200
productive we want to help each other be

00:33:31,920 --> 00:33:36,950
better and having that be a part of your

00:33:34,200 --> 00:33:39,890
culture enables you to to provide

00:33:36,950 --> 00:33:42,060
constructive criticism towards towards

00:33:39,890 --> 00:33:45,050
people software and enable them to be

00:33:42,060 --> 00:33:47,490
better software engineers as a result

00:33:45,050 --> 00:33:49,770
they're also processes that you can use

00:33:47,490 --> 00:33:51,780
right so pre-mortem post-mortem so

00:33:49,770 --> 00:33:53,190
pre-mortem being we're about to launch

00:33:51,780 --> 00:33:56,550
this thing what are all the ways it

00:33:53,190 --> 00:33:59,270
could fail right post-mortems be we just

00:33:56,550 --> 00:34:01,620
launched this thing what did we learn

00:33:59,270 --> 00:34:03,330
having good feedback loops so for

00:34:01,620 --> 00:34:05,160
example if you have a post mortem where

00:34:03,330 --> 00:34:06,840
every time you have an outage we have to

00:34:05,160 --> 00:34:09,419
have a post mortem understand what went

00:34:06,840 --> 00:34:11,190
wrong and bring that back into the the

00:34:09,419 --> 00:34:12,300
project allocation the planning for the

00:34:11,190 --> 00:34:15,060
next quarter of what projects we're

00:34:12,300 --> 00:34:17,250
gonna do that's important knowledge

00:34:15,060 --> 00:34:18,990
sharing so do we have folks who have

00:34:17,250 --> 00:34:21,179
more experience in Python or some

00:34:18,990 --> 00:34:22,890
particular system in in in the

00:34:21,179 --> 00:34:24,630
organization are they able to share that

00:34:22,890 --> 00:34:26,220
knowledge out with each other having a

00:34:24,630 --> 00:34:27,540
widely distributed knowledge enables

00:34:26,220 --> 00:34:30,330
people to be more effective in the

00:34:27,540 --> 00:34:31,830
software they produce fire hose of

00:34:30,330 --> 00:34:34,410
information so this is essentially if

00:34:31,830 --> 00:34:36,929
you have a organization that's a very an

00:34:34,410 --> 00:34:38,790
open communication internally sometimes

00:34:36,929 --> 00:34:41,190
you can get to be too much communication

00:34:38,790 --> 00:34:42,950
right so too many monthly meetings too

00:34:41,190 --> 00:34:44,869
many emails too

00:34:42,950 --> 00:34:46,429
this and that that can be too much so

00:34:44,869 --> 00:34:48,530
you have to think about are we

00:34:46,429 --> 00:34:50,720
communicating to the correct number of

00:34:48,530 --> 00:34:55,429
people in the correct way at the correct

00:34:50,720 --> 00:34:56,599
level of detail distributed

00:34:55,429 --> 00:34:58,070
decision-making is kind of an

00:34:56,599 --> 00:35:00,920
organizational process that also leads

00:34:58,070 --> 00:35:03,410
to better software if I am an architect

00:35:00,920 --> 00:35:06,380
up in my ivory tower and I write up UML

00:35:03,410 --> 00:35:08,420
diagrams and say here you go that's

00:35:06,380 --> 00:35:10,640
gonna result in worse software than if I

00:35:08,420 --> 00:35:12,050
say here's a problem please

00:35:10,640 --> 00:35:15,020
go figure out how to solve it and I'll

00:35:12,050 --> 00:35:18,790
help you write design sprints is a

00:35:15,020 --> 00:35:20,900
process towards identifying what the

00:35:18,790 --> 00:35:23,869
design of something it's a way of

00:35:20,900 --> 00:35:26,450
reaching design by committee without

00:35:23,869 --> 00:35:28,640
having designed by committee right so it

00:35:26,450 --> 00:35:30,950
addresses some of the errors and in a

00:35:28,640 --> 00:35:33,829
typical design by committee process and

00:35:30,950 --> 00:35:36,079
also just hiring firing and promotion

00:35:33,829 --> 00:35:37,820
right so if you have a team of software

00:35:36,079 --> 00:35:39,589
engineers and one of them is not pulling

00:35:37,820 --> 00:35:41,599
their weight that degrades more out

00:35:39,589 --> 00:35:45,500
across the team and that results in

00:35:41,599 --> 00:35:47,030
lower productivity simple as that and

00:35:45,500 --> 00:35:48,740
when you hire you have to be thoughtful

00:35:47,030 --> 00:35:50,030
about who are you hiring what are the

00:35:48,740 --> 00:35:52,280
qualities and characteristics that we're

00:35:50,030 --> 00:35:53,599
hiring for and sometimes that's that you

00:35:52,280 --> 00:35:55,069
unintentionally select four

00:35:53,599 --> 00:35:57,170
characteristics you might accidentally

00:35:55,069 --> 00:35:58,609
be selecting for because they're a

00:35:57,170 --> 00:36:00,560
hiring process people who are very

00:35:58,609 --> 00:36:03,349
extroverted that doesn't necessarily

00:36:00,560 --> 00:36:05,060
result in better software right and so

00:36:03,349 --> 00:36:06,349
it's a very challenging thing to make

00:36:05,060 --> 00:36:07,640
sure that you do this correctly but it's

00:36:06,349 --> 00:36:09,440
an important part of an organizational

00:36:07,640 --> 00:36:12,319
process towards the Crimea and good

00:36:09,440 --> 00:36:13,790
software and firing is crucial to if you

00:36:12,319 --> 00:36:16,099
have someone who's not performing well

00:36:13,790 --> 00:36:19,430
or if they're making ineffective

00:36:16,099 --> 00:36:23,359
decisions those decisions live forever

00:36:19,430 --> 00:36:25,280
or until they reverse right and so the

00:36:23,359 --> 00:36:27,230
longer you have someone in who's

00:36:25,280 --> 00:36:29,660
underperforming or crew you know having

00:36:27,230 --> 00:36:35,089
a negative impact in some way the more

00:36:29,660 --> 00:36:38,750
damage they can do okay service-oriented

00:36:35,089 --> 00:36:42,109
architectures monoliths microservices is

00:36:38,750 --> 00:36:44,060
kind of like the the extremes angles of

00:36:42,109 --> 00:36:45,440
the spectrum so on Mauna LOA's you have

00:36:44,060 --> 00:36:47,000
one piece of software that does

00:36:45,440 --> 00:36:49,520
everything and micro services you've

00:36:47,000 --> 00:36:50,630
highly fine-grained services to do this

00:36:49,520 --> 00:36:53,690
but all of these are part of their

00:36:50,630 --> 00:36:55,130
service-oriented architecture and you

00:36:53,690 --> 00:36:56,620
need city planners right if you have

00:36:55,130 --> 00:36:58,060
devolved

00:36:56,620 --> 00:37:00,010
making distributed decision making

00:36:58,060 --> 00:37:01,060
distributed designing you need someone

00:37:00,010 --> 00:37:03,940
to look at the big picture and

00:37:01,060 --> 00:37:06,280
holistically say hey this service graph

00:37:03,940 --> 00:37:09,280
is cyclical and results in highly

00:37:06,280 --> 00:37:11,590
inefficient communication or we put all

00:37:09,280 --> 00:37:13,420
our business logic over here but all our

00:37:11,590 --> 00:37:15,670
systems over there and the the amount of

00:37:13,420 --> 00:37:17,590
you know communication between these two

00:37:15,670 --> 00:37:19,870
networks is higher than it needs to be

00:37:17,590 --> 00:37:22,120
and so the latency for keeps serving

00:37:19,870 --> 00:37:23,620
online requests is too high so his

00:37:22,120 --> 00:37:25,300
important to have constraints on your

00:37:23,620 --> 00:37:28,090
service and think about the ways in

00:37:25,300 --> 00:37:30,250
which your your your rules that you you

00:37:28,090 --> 00:37:32,050
design your service or your service

00:37:30,250 --> 00:37:34,390
oriented architecture around have an

00:37:32,050 --> 00:37:36,660
impact on software quality so for

00:37:34,390 --> 00:37:40,030
example if you create constraints around

00:37:36,660 --> 00:37:42,790
valid solution spaces for particular

00:37:40,030 --> 00:37:44,920
problems so we actually talked about

00:37:42,790 --> 00:37:46,540
that the next slide if you have

00:37:44,920 --> 00:37:48,610
operational constraints for example

00:37:46,540 --> 00:37:50,190
let's say languages if you say hey we're

00:37:48,610 --> 00:37:52,800
only going to use these five languages

00:37:50,190 --> 00:37:55,300
unless there's a reasonable exception

00:37:52,800 --> 00:38:00,100
having a rule like that reduces the

00:37:55,300 --> 00:38:01,660
complexity of operating systems writes

00:38:00,100 --> 00:38:03,190
are training your operators on what

00:38:01,660 --> 00:38:04,630
kinds of languages in introspection to

00:38:03,190 --> 00:38:07,150
Lincoln's are all a little different but

00:38:04,630 --> 00:38:08,590
it also reduces the solution space so

00:38:07,150 --> 00:38:10,840
that when you decide what language to

00:38:08,590 --> 00:38:12,820
use for our next project it becomes a

00:38:10,840 --> 00:38:14,800
much smaller decision to make right and

00:38:12,820 --> 00:38:16,960
that's much easier to deal with as a

00:38:14,800 --> 00:38:18,700
team right so constraining the solution

00:38:16,960 --> 00:38:20,740
space for an engineering organization

00:38:18,700 --> 00:38:22,600
can result in higher quality software

00:38:20,740 --> 00:38:24,220
and in this case not just quality but

00:38:22,600 --> 00:38:27,430
velocity right so the code that number

00:38:24,220 --> 00:38:30,880
the fewer choices you have to make the

00:38:27,430 --> 00:38:32,560
quicker it is to choose one defining SLA

00:38:30,880 --> 00:38:35,140
is and SLO is with correct level if you

00:38:32,560 --> 00:38:37,390
say hey I want to be available 99.95

00:38:35,140 --> 00:38:39,220
percent of the time and you go over that

00:38:37,390 --> 00:38:41,080
you're really kind of doing yourself a

00:38:39,220 --> 00:38:42,700
disservice right because you're spending

00:38:41,080 --> 00:38:44,590
time on making yourself are more

00:38:42,700 --> 00:38:45,880
available than it needs to be and you

00:38:44,590 --> 00:38:48,070
ought to be spending our time on making

00:38:45,880 --> 00:38:49,540
other parts of the system better so

00:38:48,070 --> 00:38:50,530
making sure that you have SLA to the

00:38:49,540 --> 00:38:52,840
correct level and that you're meeting

00:38:50,530 --> 00:38:55,360
those are important an SLO is is kind of

00:38:52,840 --> 00:38:58,390
an objective so an SLA is what you agree

00:38:55,360 --> 00:38:59,770
- I agree - 99.95 but internally you

00:38:58,390 --> 00:39:02,530
know for myself I'm gonna try and hit

00:38:59,770 --> 00:39:03,910
ninety-nine point nine six and having

00:39:02,530 --> 00:39:05,890
those two things be decoupled can be

00:39:03,910 --> 00:39:09,270
important for for

00:39:05,890 --> 00:39:11,740
fective commitment towards wrestling

00:39:09,270 --> 00:39:13,990
I've seen organizations also have sre

00:39:11,740 --> 00:39:15,790
acceptance review so before you before

00:39:13,990 --> 00:39:17,710
you actually put some deploys of some

00:39:15,790 --> 00:39:18,900
new piece of software you have to have

00:39:17,710 --> 00:39:21,910
the design and the implementation

00:39:18,900 --> 00:39:23,920
reviewed by an SRE someone who's focused

00:39:21,910 --> 00:39:25,510
on the operational concern so that they

00:39:23,920 --> 00:39:28,060
can make sure that it meets their needs

00:39:25,510 --> 00:39:29,350
and and give you pushback if you say hey

00:39:28,060 --> 00:39:31,360
you know what I don't approve of this

00:39:29,350 --> 00:39:32,860
you're using this system in a way that

00:39:31,360 --> 00:39:36,010
doesn't make sense

00:39:32,860 --> 00:39:37,750
and having that process can nudge

00:39:36,010 --> 00:39:40,780
designs and in ways that are more

00:39:37,750 --> 00:39:42,580
thoughtful about what authorities need

00:39:40,780 --> 00:39:44,740
API driven workflows is another

00:39:42,580 --> 00:39:46,300
technique so having API specifications

00:39:44,740 --> 00:39:47,980
and making sure that people work against

00:39:46,300 --> 00:39:50,140
API so for example you have an Android

00:39:47,980 --> 00:39:52,330
team an iOS team a web team and a

00:39:50,140 --> 00:39:54,370
back-end team and they all have to talk

00:39:52,330 --> 00:39:56,710
to each other to like to design the

00:39:54,370 --> 00:39:59,740
system that's not good right it's better

00:39:56,710 --> 00:40:02,170
to have all of them design an API to

00:39:59,740 --> 00:40:04,990
begin with and then all target that API

00:40:02,170 --> 00:40:08,350
and not only does that make the the

00:40:04,990 --> 00:40:09,460
process you know of reduces the amount

00:40:08,350 --> 00:40:10,690
of communication between these

00:40:09,460 --> 00:40:13,630
stakeholders necessary which makes

00:40:10,690 --> 00:40:15,490
things move quicker but also kind of

00:40:13,630 --> 00:40:17,710
front loads a lot of the challenges and

00:40:15,490 --> 00:40:19,480
communicating and also what it does is

00:40:17,710 --> 00:40:20,710
gives you cheaper integration testing

00:40:19,480 --> 00:40:22,990
because you really only have to test

00:40:20,710 --> 00:40:24,520
against adherence to the API you don't

00:40:22,990 --> 00:40:29,170
have to run these two systems against

00:40:24,520 --> 00:40:32,850
each other code formatting sorry about

00:40:29,170 --> 00:40:36,310
this but the the more consistent

00:40:32,850 --> 00:40:37,660
software is to read write notation so

00:40:36,310 --> 00:40:39,940
software is the code is essentially

00:40:37,660 --> 00:40:42,040
notation the more consistent notation is

00:40:39,940 --> 00:40:43,570
the easier it is to read the lower

00:40:42,040 --> 00:40:45,040
cognitive effort is to read so for

00:40:43,570 --> 00:40:47,110
example if you have a standard around

00:40:45,040 --> 00:40:51,250
saying no postfix operators you can't

00:40:47,110 --> 00:40:54,070
say return unless you say if not then

00:40:51,250 --> 00:40:56,530
block return and having that that

00:40:54,070 --> 00:40:58,060
consistency means that people can read

00:40:56,530 --> 00:41:00,070
code better

00:40:58,060 --> 00:41:01,930
pearl pearl tiny appropriate give you

00:41:00,070 --> 00:41:03,810
some of this there are much more

00:41:01,930 --> 00:41:06,190
opinionated code formatting out there

00:41:03,810 --> 00:41:07,300
and this is one case I think you know

00:41:06,190 --> 00:41:09,130
other languages that have slightly

00:41:07,300 --> 00:41:13,060
different design philosophies enable

00:41:09,130 --> 00:41:16,630
them to be more successful security

00:41:13,060 --> 00:41:18,040
audits you know having a domain expert

00:41:16,630 --> 00:41:19,840
inside of an organization

00:41:18,040 --> 00:41:21,370
you cannot reasonably expect

00:41:19,840 --> 00:41:22,780
me to be a security expert in addition

00:41:21,370 --> 00:41:26,290
to all the other things that I do it's

00:41:22,780 --> 00:41:27,640
not possible but it is important to have

00:41:26,290 --> 00:41:29,380
a security expert come in and think

00:41:27,640 --> 00:41:31,600
about security think about the specifics

00:41:29,380 --> 00:41:34,030
of this and have tooling and processes

00:41:31,600 --> 00:41:35,740
that enable them to give you what you

00:41:34,030 --> 00:41:38,380
need to produce better quality software

00:41:35,740 --> 00:41:40,150
I've seen folks trying train software

00:41:38,380 --> 00:41:41,860
engineers to think about quality and

00:41:40,150 --> 00:41:43,960
that helped our sorry security and that

00:41:41,860 --> 00:41:46,600
helps but nothing beats someone who's

00:41:43,960 --> 00:41:49,000
full day it is and specialist a security

00:41:46,600 --> 00:41:51,070
specialist will outperform a generalist

00:41:49,000 --> 00:41:53,440
with security training and it's also

00:41:51,070 --> 00:41:55,750
important to have external audits so a

00:41:53,440 --> 00:41:58,000
group of humans is necessarily going to

00:41:55,750 --> 00:41:59,650
miss things and having a case where you

00:41:58,000 --> 00:42:01,390
know having external parties come in and

00:41:59,650 --> 00:42:04,480
say hey you mrs. thing is really

00:42:01,390 --> 00:42:06,370
important to tink tracking another one

00:42:04,480 --> 00:42:07,900
this is a feature inside a pearl itself

00:42:06,370 --> 00:42:09,640
other languages aren't don't have that

00:42:07,900 --> 00:42:11,710
close but essentially making sure you

00:42:09,640 --> 00:42:13,720
understand what user input is tracking

00:42:11,710 --> 00:42:15,460
yet sanitizing it correctly is a

00:42:13,720 --> 00:42:19,030
technique that enables higher quality

00:42:15,460 --> 00:42:20,620
software reproducible production in lab

00:42:19,030 --> 00:42:22,330
environments so having a hermetic

00:42:20,620 --> 00:42:24,490
reproducible production like environment

00:42:22,330 --> 00:42:26,650
say with docker containers and having

00:42:24,490 --> 00:42:28,990
people be able to up and up and like

00:42:26,650 --> 00:42:30,010
quickly that get a little mini version

00:42:28,990 --> 00:42:32,740
running in their dev environment is

00:42:30,010 --> 00:42:36,220
important I've seen cases where compile

00:42:32,740 --> 00:42:39,670
time is on the order of days that that

00:42:36,220 --> 00:42:44,170
has a negative impact on on on quality

00:42:39,670 --> 00:42:45,160
and velocity and having so it's also

00:42:44,170 --> 00:42:47,020
important have various levels of

00:42:45,160 --> 00:42:49,210
isolation it may not be practical in

00:42:47,020 --> 00:42:51,220
highly distributed systems to be able to

00:42:49,210 --> 00:42:54,790
fully isolate a develop piece of

00:42:51,220 --> 00:42:57,610
development software but having the the

00:42:54,790 --> 00:43:00,790
scope and breadth of production data is

00:42:57,610 --> 00:43:02,290
also important right so oftentimes you

00:43:00,790 --> 00:43:04,150
know you might encounter a bug that only

00:43:02,290 --> 00:43:06,160
applies if you type in to this

00:43:04,150 --> 00:43:08,350
particular text box with a language that

00:43:06,160 --> 00:43:10,330
you don't even know that's going to be

00:43:08,350 --> 00:43:11,830
hard to reproduce but if you have

00:43:10,330 --> 00:43:14,320
production data where you have that

00:43:11,830 --> 00:43:16,180
giant corpus of information that you can

00:43:14,320 --> 00:43:17,770
use that's that's that can be crucial

00:43:16,180 --> 00:43:21,430
towards towards getting higher quality

00:43:17,770 --> 00:43:23,440
software yeah so this is kind of a set

00:43:21,430 --> 00:43:25,240
of techniques that that I've seen folks

00:43:23,440 --> 00:43:28,480
used to to maintain code quality at

00:43:25,240 --> 00:43:29,800
scale so it's a challenging space and

00:43:28,480 --> 00:43:31,690
something I think is evolving but

00:43:29,800 --> 00:43:36,090
there's a lot of research that goes into

00:43:31,690 --> 00:43:36,090
it and I hope this has been helpful and

00:43:39,570 --> 00:43:53,320
we have it we have a few minutes for Q&A

00:43:42,390 --> 00:43:54,490
yes yeah so the question was that I

00:43:53,320 --> 00:43:55,870
mentioned a balance between velocity and

00:43:54,490 --> 00:43:58,500
quality and added that an organizational

00:43:55,870 --> 00:44:00,970
culture could I expand on that a bit

00:43:58,500 --> 00:44:03,100
you know at different levels of product

00:44:00,970 --> 00:44:04,330
maturity at corporate maturity it may

00:44:03,100 --> 00:44:06,010
not be important to care about the

00:44:04,330 --> 00:44:08,350
quality of your software to be honest

00:44:06,010 --> 00:44:11,260
like if you're writing so like having

00:44:08,350 --> 00:44:13,240
the software that is high quality and

00:44:11,260 --> 00:44:15,700
you've invested a lot of time in making

00:44:13,240 --> 00:44:17,590
a defect free that you then delete next

00:44:15,700 --> 00:44:20,470
week because it turns out that was a bad

00:44:17,590 --> 00:44:23,740
business strategy not a good use of time

00:44:20,470 --> 00:44:26,020
right so as you think about it and

00:44:23,740 --> 00:44:27,820
organizations and in different levels of

00:44:26,020 --> 00:44:29,860
maturity have a different needs but

00:44:27,820 --> 00:44:31,840
balance like you can move very quickly

00:44:29,860 --> 00:44:33,550
if you don't care about quality right

00:44:31,840 --> 00:44:35,260
but you can also care about quality too

00:44:33,550 --> 00:44:38,620
much such that you're moving too slowly

00:44:35,260 --> 00:44:40,150
so creating if you don't think about you

00:44:38,620 --> 00:44:42,160
know the latency and the throughput of

00:44:40,150 --> 00:44:44,710
this process and you just focus on

00:44:42,160 --> 00:44:47,230
defect location defect rate you're going

00:44:44,710 --> 00:44:50,200
to end up with the system that is highly

00:44:47,230 --> 00:44:52,180
stable and highly non adaptable as a

00:44:50,200 --> 00:44:53,950
result right so if if I have to go

00:44:52,180 --> 00:44:55,360
through you know hours of committee or

00:44:53,950 --> 00:44:57,580
review process to change anything guess

00:44:55,360 --> 00:44:59,500
what we're gonna catch a lot of bugs but

00:44:57,580 --> 00:45:00,910
we're gonna change less frequently and

00:44:59,500 --> 00:45:02,200
that's be less of an adaptive

00:45:00,910 --> 00:45:03,940
organization so there's kind of a

00:45:02,200 --> 00:45:05,230
balance to be made there and that's

00:45:03,940 --> 00:45:08,820
often a cultural one and it's one that

00:45:05,230 --> 00:45:08,820
has to change as an organization grows

00:45:20,430 --> 00:45:31,559
I dunno I work on projects of about two

00:45:25,859 --> 00:45:32,970
people at most do you have in your

00:45:31,559 --> 00:45:45,569
experience do you have any crossover

00:45:32,970 --> 00:45:48,200
between the production engineers yes is

00:45:45,569 --> 00:45:50,220
your question so what how do you kind of

00:45:48,200 --> 00:45:51,299
what does the communication structure

00:45:50,220 --> 00:45:53,240
look like what is the decision-making

00:45:51,299 --> 00:45:55,230
process the relationship between

00:45:53,240 --> 00:45:56,460
software engineers and product

00:45:55,230 --> 00:45:58,650
development engineers and product

00:45:56,460 --> 00:46:00,809
engineers in organizations I've been in

00:45:58,650 --> 00:46:02,039
we use SWE's and sres

00:46:00,809 --> 00:46:05,579
so software engineers in site

00:46:02,039 --> 00:46:08,250
reliability engineers and the exact you

00:46:05,579 --> 00:46:11,819
know shape of operations I think is

00:46:08,250 --> 00:46:13,680
involving a part of our ecosystem now so

00:46:11,819 --> 00:46:15,420
kind of the DevOps movement and making

00:46:13,680 --> 00:46:17,420
sure that we kind of automate as much of

00:46:15,420 --> 00:46:20,760
that as possible and bringing more

00:46:17,420 --> 00:46:24,000
engineering skills into the system

00:46:20,760 --> 00:46:28,349
administration sector has been a part of

00:46:24,000 --> 00:46:30,059
I think the the the story of operators

00:46:28,349 --> 00:46:34,349
for the past few years past decade

00:46:30,059 --> 00:46:36,390
perhaps you know the the exact

00:46:34,349 --> 00:46:37,170
relationship between these these two

00:46:36,390 --> 00:46:39,359
things varies from organization

00:46:37,170 --> 00:46:42,029
organization in my experience there

00:46:39,359 --> 00:46:46,279
needs to be someone who thinks about

00:46:42,029 --> 00:46:48,450
that who's really responsible for

00:46:46,279 --> 00:46:50,520
operational concerns and what happens

00:46:48,450 --> 00:46:52,529
once the software engineer is done with

00:46:50,520 --> 00:46:54,599
the project right someone continues that

00:46:52,529 --> 00:46:57,529
has to own it and making sure that that

00:46:54,599 --> 00:47:00,420
owner truly owns it and has not just the

00:46:57,529 --> 00:47:02,730
responsibility but the the power to

00:47:00,420 --> 00:47:04,440
truly oment is important the exact way

00:47:02,730 --> 00:47:06,470
that that models varies I've seen cases

00:47:04,440 --> 00:47:09,240
like I said about SRT acceptance testing

00:47:06,470 --> 00:47:11,789
I've also seen cases where it's kind of

00:47:09,240 --> 00:47:14,490
a an optional process where SS eries

00:47:11,789 --> 00:47:16,650
will review it if you want that one has

00:47:14,490 --> 00:47:22,619
less teeth and is less effective and

00:47:16,650 --> 00:47:24,809
often results in less lower concerns for

00:47:22,619 --> 00:47:26,760
quality because the the the goal

00:47:24,809 --> 00:47:28,920
alignment is different so an SRE team

00:47:26,760 --> 00:47:30,210
cares about reliability but a particular

00:47:28,920 --> 00:47:32,549
feature team really only cares about

00:47:30,210 --> 00:47:34,130
that future they don't there they are

00:47:32,549 --> 00:47:36,380
there their mission scope

00:47:34,130 --> 00:47:38,210
well defined then that space and so it's

00:47:36,380 --> 00:47:40,789
important to make sure that there is the

00:47:38,210 --> 00:47:42,109
correct level of balance of power

00:47:40,789 --> 00:47:45,970
between these two and what exactly that

00:47:42,109 --> 00:47:45,970
looks like is variable yes

00:48:18,640 --> 00:48:26,450
yeah yeah I mean I think I think the key

00:48:22,370 --> 00:48:28,430
there is is go alignment and good and

00:48:26,450 --> 00:48:31,040
good feedback loops making sure the the

00:48:28,430 --> 00:48:32,990
individual who's responsible for making

00:48:31,040 --> 00:48:34,730
a change or who is designated as being

00:48:32,990 --> 00:48:36,290
the person to make the change is also

00:48:34,730 --> 00:48:38,570
the one who feels the pain when the

00:48:36,290 --> 00:48:41,030
change is needed and what exactly that

00:48:38,570 --> 00:48:43,430
looks like varies and the exact division

00:48:41,030 --> 00:48:45,560
of labour is gonna change based on the

00:48:43,430 --> 00:48:49,070
size of a team size of an organization

00:48:45,560 --> 00:48:50,930
the needs so you can imagine a company

00:48:49,070 --> 00:48:53,360
like Amazon probably has a different

00:48:50,930 --> 00:48:57,110
number of sres than a company like

00:48:53,360 --> 00:48:59,540
Microsoft right or a company like Yelp

00:48:57,110 --> 00:49:03,230
right or even in an organization that's

00:48:59,540 --> 00:49:05,480
equally sized but has a kind of you know

00:49:03,230 --> 00:49:13,940
has a product doesn't run their own data

00:49:05,480 --> 00:49:15,140
centers so snapchat for example well

00:49:13,940 --> 00:49:18,890
it's time for one more question

00:49:15,140 --> 00:49:20,120
anyone have anything does they ever have

00:49:18,890 --> 00:49:21,680
a rambley question where they actually

00:49:20,120 --> 00:49:24,770
just want to making a make a statement

00:49:21,680 --> 00:49:27,550
because I'll do one of those there we go

00:49:24,770 --> 00:49:27,550
we got a taker

00:50:16,529 --> 00:50:22,299
it can be painful certainly to have very

00:50:20,079 --> 00:50:24,339
high quality standards and and the the

00:50:22,299 --> 00:50:25,900
the red tape can be difficult to deal

00:50:24,339 --> 00:50:28,509
with but sometimes it's necessary so

00:50:25,900 --> 00:50:31,690
think for example spaceships and and

00:50:28,509 --> 00:50:33,039
missile defense systems you know you you

00:50:31,690 --> 00:50:37,089
have a different level of tolerance for

00:50:33,039 --> 00:50:38,829
for flexibility and adaptability it

00:50:37,089 --> 00:50:39,910
certainly can be thank you so much

00:50:38,829 --> 00:50:42,260
thanks for coming if you have any

00:50:39,910 --> 00:50:49,359
further questions I'll be on the hall

00:50:42,260 --> 00:50:49,359

YouTube URL: https://www.youtube.com/watch?v=AbnIv8AY0Gs


