Title: Sawyer X - "Perl 5: The Past, The Present, and One Possible Future"
Publication date: 2019-06-18
Playlist: TPC 2019 in Pittsburgh
Description: 
	I will be talking about Perl 5 in the past, Perl 5.30, and where we
could take Perl if we were so inclined.
Captions: 
	00:00:00,260 --> 00:00:05,220
thanks Dan wow this is loud okay

00:00:03,480 --> 00:00:06,540
so whoever's controlling the mic if you

00:00:05,220 --> 00:00:10,980
can turn you down that'd be good because

00:00:06,540 --> 00:00:13,950
I'm gonna scream Wow okay thank you Oh

00:00:10,980 --> 00:00:16,710
much better okay if this is not loud

00:00:13,950 --> 00:00:20,250
enough let us know but I tend to speak

00:00:16,710 --> 00:00:23,340
loudly so sorry okay

00:00:20,250 --> 00:00:25,949
so if you don't know me

00:00:23,340 --> 00:00:29,400
I should present myself a little bit I'm

00:00:25,949 --> 00:00:31,800
Sawyer you might see me as Sawyer X it

00:00:29,400 --> 00:00:33,780
is not one single word sometimes people

00:00:31,800 --> 00:00:38,370
write me as a single word it is two

00:00:33,780 --> 00:00:40,649
words I'm the pumpkin for profile that

00:00:38,370 --> 00:00:43,110
means that I'm in a sense the project

00:00:40,649 --> 00:00:44,969
manager for the language I decide which

00:00:43,110 --> 00:00:46,739
features make more sense which make

00:00:44,969 --> 00:00:48,329
lessons which fixes we should do now

00:00:46,739 --> 00:00:50,820
which fixes we should do later which

00:00:48,329 --> 00:00:55,649
fixes we should avoid I help settle

00:00:50,820 --> 00:00:57,360
discussions on the core team and you get

00:00:55,649 --> 00:01:00,510
to present our work which is actually a

00:00:57,360 --> 00:01:02,430
lot of fun it might seem like I control

00:01:00,510 --> 00:01:05,460
a lot but mostly I work with really

00:01:02,430 --> 00:01:08,010
really really smart capable people that

00:01:05,460 --> 00:01:10,439
help me understand things well and help

00:01:08,010 --> 00:01:11,790
me make decisions together so I just

00:01:10,439 --> 00:01:15,479
want to share that out if you think that

00:01:11,790 --> 00:01:17,939
I control it I actually don't so what I

00:01:15,479 --> 00:01:20,490
want to do is talk about past present

00:01:17,939 --> 00:01:22,470
future I'm mostly going to focus on past

00:01:20,490 --> 00:01:24,180
and future which is usually not what I

00:01:22,470 --> 00:01:25,950
do I usually talk about present so

00:01:24,180 --> 00:01:28,530
there's gonna be a bit different and I

00:01:25,950 --> 00:01:30,270
hope it's gonna be good and if you have

00:01:28,530 --> 00:01:32,970
feedback after feel free to talk to me

00:01:30,270 --> 00:01:33,900
on this topic if you see me anywhere and

00:01:32,970 --> 00:01:35,729
you want to talk to me

00:01:33,900 --> 00:01:37,860
please do don't feel uncomfortable

00:01:35,729 --> 00:01:40,740
approaching me so please feel free to

00:01:37,860 --> 00:01:42,240
come over if it's complaints yelling

00:01:40,740 --> 00:01:44,670
stuff like that you could you could skip

00:01:42,240 --> 00:01:45,509
that but if you just want to say hi

00:01:44,670 --> 00:01:49,439
introduce you want to talk about

00:01:45,509 --> 00:01:53,280
something please do so we're really at

00:01:49,439 --> 00:01:55,770
the idea of this even thank you yes so

00:01:53,280 --> 00:01:57,930
we're at the point of 20 years of

00:01:55,770 --> 00:02:03,930
conferences and I might be nice to cover

00:01:57,930 --> 00:02:06,270
20 years of pearl pearl is beyond 20 but

00:02:03,930 --> 00:02:10,020
if we're doing 20 in 20 then we could

00:02:06,270 --> 00:02:12,780
cover what we did in 20 years so this is

00:02:10,020 --> 00:02:13,620
a graph of all the releases that pearl

00:02:12,780 --> 00:02:16,830
has been seen

00:02:13,620 --> 00:02:19,620
shir and you can see that around 2010

00:02:16,830 --> 00:02:22,440
which is 105 12 came out we started

00:02:19,620 --> 00:02:25,159
doing way more releases every single

00:02:22,440 --> 00:02:28,440
year which we do we put out between

00:02:25,159 --> 00:02:31,230
eleven ten and twelve releases every

00:02:28,440 --> 00:02:33,420
year almost all of them are development

00:02:31,230 --> 00:02:37,019
releases that come out every single

00:02:33,420 --> 00:02:39,659
month there is one coming out actually

00:02:37,019 --> 00:02:42,269
in a bit few days and then once a year

00:02:39,659 --> 00:02:43,890
we put out the full stable release and

00:02:42,269 --> 00:02:46,739
then from that point on we have

00:02:43,890 --> 00:02:48,660
additional releases with backporting

00:02:46,739 --> 00:02:51,540
fixes that are important or small

00:02:48,660 --> 00:02:53,459
Corrections stuff like that so we we are

00:02:51,540 --> 00:02:57,299
doing really well the graph goes down

00:02:53,459 --> 00:02:59,879
for this year so it should come back up

00:02:57,299 --> 00:03:04,079
okay because we haven't finished the

00:02:59,879 --> 00:03:06,120
year additional graphs these are the

00:03:04,079 --> 00:03:08,430
changes that had been happening in core

00:03:06,120 --> 00:03:11,069
when it comes to size there's the core

00:03:08,430 --> 00:03:12,239
the libraries that we have the all the

00:03:11,069 --> 00:03:14,010
libraries that are bundled with the

00:03:12,239 --> 00:03:16,140
language all the libraries are part an

00:03:14,010 --> 00:03:17,519
intimate part of the language all of our

00:03:16,140 --> 00:03:19,560
tests libraries and all of our

00:03:17,519 --> 00:03:22,049
documentation this is the the amount

00:03:19,560 --> 00:03:23,849
itself in kilobytes and you can see it

00:03:22,049 --> 00:03:25,169
really grow there's some shift that

00:03:23,849 --> 00:03:28,079
we're really interesting their lower

00:03:25,169 --> 00:03:31,440
near 512 where we kind of moved a lot of

00:03:28,079 --> 00:03:32,459
the things from external to embedded and

00:03:31,440 --> 00:03:35,040
stuff like that we're playing with those

00:03:32,459 --> 00:03:37,019
things this is the files themselves so

00:03:35,040 --> 00:03:39,599
it's it keeps growing and I really like

00:03:37,019 --> 00:03:41,310
if you look at the green lines here

00:03:39,599 --> 00:03:45,660
those are the amount of tests that we

00:03:41,310 --> 00:03:51,209
have we have a lot of tests we have a

00:03:45,660 --> 00:03:52,530
lot of tests so hmm let's go over a

00:03:51,209 --> 00:03:55,739
little bit on what's been happening in

00:03:52,530 --> 00:03:58,769
1999 20 years ago we were working I say

00:03:55,739 --> 00:04:02,730
we I was in the picture we were working

00:03:58,769 --> 00:04:04,079
collectively on the release of 5 5 so

00:04:02,730 --> 00:04:09,209
there were a bunch of these releases of

00:04:04,079 --> 00:04:11,940
Pro 5 4 & 5 5 came out and then really

00:04:09,209 --> 00:04:14,730
past that point it was 5 6 which is what

00:04:11,940 --> 00:04:16,169
I want to talk about and this was the

00:04:14,730 --> 00:04:18,150
person in charge of it sarah the-- i

00:04:16,169 --> 00:04:21,239
hope i pronouncing it well Larry

00:04:18,150 --> 00:04:24,349
corrections Surratt II thank you

00:04:21,239 --> 00:04:26,889
good ok it's always important to to

00:04:24,349 --> 00:04:30,159
pronounce names the way they should be

00:04:26,889 --> 00:04:42,310
and does anyone want to share one thing

00:04:30,159 --> 00:04:43,870
they know happened in five six see it's

00:04:42,310 --> 00:04:46,479
good cuz I can't say Larry screwed up

00:04:43,870 --> 00:04:47,020
Unicode that's what happened but you are

00:04:46,479 --> 00:04:53,500
right

00:04:47,020 --> 00:04:56,849
unique unicode new TFA this the best

00:04:53,500 --> 00:04:59,789
sidekick okay so unicode utf-8 came out

00:04:56,849 --> 00:05:03,939
Larry I'm gonna play with you on this

00:04:59,789 --> 00:05:05,830
utf-8 and for it's fun because I get to

00:05:03,939 --> 00:05:07,300
joke about things that not everyone

00:05:05,830 --> 00:05:08,680
knows why I'm joking about this but

00:05:07,300 --> 00:05:13,599
those they do they really like it

00:05:08,680 --> 00:05:15,159
right so okay 5/8 came out there were

00:05:13,599 --> 00:05:16,509
several people in charge of 5/8 it

00:05:15,159 --> 00:05:17,229
wasn't just five eight zero that was

00:05:16,509 --> 00:05:18,729
five eight

00:05:17,229 --> 00:05:20,110
there's several versions of these and I

00:05:18,729 --> 00:05:22,150
think they all deserve credit there's

00:05:20,110 --> 00:05:23,469
your Co and he's finished I'm not gonna

00:05:22,150 --> 00:05:26,110
pronounce his last name on his website

00:05:23,469 --> 00:05:29,379
that he actually has an audio of how you

00:05:26,110 --> 00:05:31,240
pronounce his last name I'm not gonna

00:05:29,379 --> 00:05:31,690
try to do that we had you go and

00:05:31,240 --> 00:05:33,400
Raffaele

00:05:31,690 --> 00:05:35,050
Nicolas and they were all involved in

00:05:33,400 --> 00:05:37,180
working on the five eight and releasing

00:05:35,050 --> 00:05:43,539
versions of it something that came out

00:05:37,180 --> 00:05:45,729
in five eight working in Unicode so we

00:05:43,539 --> 00:05:48,639
had we had a new implementation or

00:05:45,729 --> 00:05:51,300
implementation of threads phone with us

00:05:48,639 --> 00:05:53,830
you know threads okay

00:05:51,300 --> 00:05:58,930
but then came what I would consider a

00:05:53,830 --> 00:06:01,870
more modern age of pro so we had five

00:05:58,930 --> 00:06:06,939
ten five ten was by Rafael Garcia Suarez

00:06:01,870 --> 00:06:09,029
and what came out in five ten so first

00:06:06,939 --> 00:06:12,389
we had use feature which is really nice

00:06:09,029 --> 00:06:15,580
pearl - uppercase e that automatically

00:06:12,389 --> 00:06:18,430
enables all of those features the

00:06:15,580 --> 00:06:23,919
defined or which is really really really

00:06:18,430 --> 00:06:26,979
useful yeah I never had an operator get

00:06:23,919 --> 00:06:30,789
an applause that's great uh such a

00:06:26,979 --> 00:06:32,169
supportive audience okay we had name

00:06:30,789 --> 00:06:33,610
captures this is actually one of my

00:06:32,169 --> 00:06:34,680
favorite features obviously it's really

00:06:33,610 --> 00:06:36,260
useful

00:06:34,680 --> 00:06:39,320
[Applause]

00:06:36,260 --> 00:06:42,040
state variables came in Unicode five

00:06:39,320 --> 00:06:44,690
came in and these two particular

00:06:42,040 --> 00:06:49,430
variables also came in does anyone know

00:06:44,690 --> 00:06:51,140
what they do what was that other than

00:06:49,430 --> 00:07:00,710
Larry everything is that other than

00:06:51,140 --> 00:07:02,030
Larry here yes printing of numbers yes

00:07:00,710 --> 00:07:04,730
controlling frame of numbers and one of

00:07:02,030 --> 00:07:07,400
them has to do with matching so I'll go

00:07:04,730 --> 00:07:08,840
back to those variables because they

00:07:07,400 --> 00:07:13,100
were they were officially deprecated

00:07:08,840 --> 00:07:14,390
okay then five ten one came out by Dave

00:07:13,100 --> 00:07:19,340
Mitchell they've decided never to

00:07:14,390 --> 00:07:21,200
release another stable version and he's

00:07:19,340 --> 00:07:24,500
mostly dealt with resolving a few issues

00:07:21,200 --> 00:07:26,300
that came out of five ten five twelve

00:07:24,500 --> 00:07:29,630
came out that was Jessie Vinson and

00:07:26,300 --> 00:07:31,250
Jenny Jesse really revamped how a lot of

00:07:29,630 --> 00:07:33,140
these releases happened that's why we

00:07:31,250 --> 00:07:35,960
have more regular releases and and

00:07:33,140 --> 00:07:39,740
frequent ones so we have the package

00:07:35,960 --> 00:07:42,800
name with a version now we had B dot dot

00:07:39,740 --> 00:07:47,090
dot what is this called yadda yadda very

00:07:42,800 --> 00:07:49,220
good okay and it really few people know

00:07:47,090 --> 00:07:55,010
it inspired the Seinfeld episode with a

00:07:49,220 --> 00:07:57,110
ok jokes Unicode five point two came out

00:07:55,010 --> 00:07:59,330
we had pluggable keywords pluggable

00:07:57,110 --> 00:08:01,370
keywords are really an amazing feature

00:07:59,330 --> 00:08:03,890
that most people don't know about but we

00:08:01,370 --> 00:08:06,740
have that version number formats were

00:08:03,890 --> 00:08:10,340
revamped and clarified in a sense right

00:08:06,740 --> 00:08:13,010
and for better or worse parent came into

00:08:10,340 --> 00:08:16,280
court it's really good and use feature

00:08:13,010 --> 00:08:18,260
Unicode strings also was introduced

00:08:16,280 --> 00:08:20,780
which is also very good to know if

00:08:18,260 --> 00:08:23,120
you're dealing with Unicode Jesse also

00:08:20,780 --> 00:08:25,910
did the five fourteen release which

00:08:23,120 --> 00:08:27,770
introduced Unicode six introduced the

00:08:25,910 --> 00:08:31,850
Unicode abbreviations which you should

00:08:27,770 --> 00:08:34,010
probably use and introduced the search

00:08:31,850 --> 00:08:36,200
replace that is non-destructive oh yes

00:08:34,010 --> 00:08:39,349
that that deserves if if any operator

00:08:36,200 --> 00:08:42,530
really truly the blog package syntax

00:08:39,349 --> 00:08:43,970
which honestly never use it because I

00:08:42,530 --> 00:08:47,510
separate two different files but it's

00:08:43,970 --> 00:08:48,770
really kind of cool custom ops this is

00:08:47,510 --> 00:08:50,270
one of my favorite features because I

00:08:48,770 --> 00:08:52,220
wrote an entire module that

00:08:50,270 --> 00:08:54,020
uses custom ops to introduce new ops

00:08:52,220 --> 00:08:57,580
into the OP tree during compilation or

00:08:54,020 --> 00:09:00,350
to replace the use of the ref function

00:08:57,580 --> 00:09:01,940
it's called ref util and use this

00:09:00,350 --> 00:09:05,630
specifically this it's an amazing

00:09:01,940 --> 00:09:07,640
feature and then Rick came into the

00:09:05,630 --> 00:09:10,220
picture Rick put out a lot of releases

00:09:07,640 --> 00:09:10,790
he put out a lot of releases 5:16 was

00:09:10,220 --> 00:09:14,030
his first one

00:09:10,790 --> 00:09:15,560
it had the sub I have a few bits of code

00:09:14,030 --> 00:09:18,380
to represent some of this this is one of

00:09:15,560 --> 00:09:21,200
them you can see this is a very simple

00:09:18,380 --> 00:09:22,940
code to just go over a tree and print

00:09:21,200 --> 00:09:25,010
out all of the nodes recursively and

00:09:22,940 --> 00:09:26,710
this is one of my favorite examples of

00:09:25,010 --> 00:09:29,540
sub because really what you want is to

00:09:26,710 --> 00:09:31,850
go back inside and if you have a name

00:09:29,540 --> 00:09:35,600
subroutine you could do this but if you

00:09:31,850 --> 00:09:37,100
want to do it with a callback it's a bit

00:09:35,600 --> 00:09:39,140
harder because then you can't use the

00:09:37,100 --> 00:09:40,700
callback itself because you leak or it's

00:09:39,140 --> 00:09:42,950
kind of tricky but here you can just use

00:09:40,700 --> 00:09:45,260
underscore sub underscores and that's it

00:09:42,950 --> 00:09:47,570
and then it references itself so it's

00:09:45,260 --> 00:09:49,490
very very very simple the amount of

00:09:47,570 --> 00:09:52,760
statements here other than to say is

00:09:49,490 --> 00:09:55,700
just like three four including defining

00:09:52,760 --> 00:09:57,890
it so incredibly simple I think it's an

00:09:55,700 --> 00:10:00,410
example of simple Perl

00:09:57,890 --> 00:10:02,800
clear syntax that does exactly what you

00:10:00,410 --> 00:10:07,280
want it to do

00:10:02,800 --> 00:10:13,460
okay 516 also had 6.1 the documentation

00:10:07,280 --> 00:10:14,780
says mostly Unicode symbol names so you

00:10:13,460 --> 00:10:16,370
could actually you could use Unicode and

00:10:14,780 --> 00:10:18,560
symbol names which is something so

00:10:16,370 --> 00:10:22,040
important if you're writing small

00:10:18,560 --> 00:10:24,410
example examples for Twitter which

00:10:22,040 --> 00:10:25,940
people have and then the fault case

00:10:24,410 --> 00:10:27,800
function came in the fault Kate's

00:10:25,940 --> 00:10:29,330
function includes something really cool

00:10:27,800 --> 00:10:31,160
if you want to compare two variables

00:10:29,330 --> 00:10:32,330
there's strings use EQ and then you want

00:10:31,160 --> 00:10:34,610
to know that they're the same you're

00:10:32,330 --> 00:10:36,580
gonna lowercase both of them and compare

00:10:34,610 --> 00:10:39,500
and that makes a lot of sense except in

00:10:36,580 --> 00:10:43,820
Unicode if you're not dealing only with

00:10:39,500 --> 00:10:45,770
English which a lot of the world is that

00:10:43,820 --> 00:10:49,100
won't work because they don't fold the

00:10:45,770 --> 00:10:51,050
same way we could do uppercase also

00:10:49,100 --> 00:10:51,650
wrong the correct way is actually to use

00:10:51,050 --> 00:10:53,450
a regex

00:10:51,650 --> 00:10:56,480
because the regular expression engine

00:10:53,450 --> 00:10:58,850
has supports for Unicode which is really

00:10:56,480 --> 00:11:00,410
really really really nice but we have to

00:10:58,850 --> 00:11:04,010
make sure that we do well so we're gonna

00:11:00,410 --> 00:11:05,690
have to quote it with Q and E

00:11:04,010 --> 00:11:07,460
and then we're gonna have to have these

00:11:05,690 --> 00:11:09,590
anchors for the beginning and end and

00:11:07,460 --> 00:11:11,210
the if you look at it's kind of weird

00:11:09,590 --> 00:11:13,760
the carrot and the dollar don't they're

00:11:11,210 --> 00:11:15,170
not exactly the same what you want if

00:11:13,760 --> 00:11:17,150
the complementary for the character is

00:11:15,170 --> 00:11:20,630
actually the lowercase backslash Z or

00:11:17,150 --> 00:11:23,270
backslash lowercase e and then we want

00:11:20,630 --> 00:11:25,480
to use the case-insensitive which really

00:11:23,270 --> 00:11:28,100
is where it's at

00:11:25,480 --> 00:11:34,460
there's a better way to do this and it's

00:11:28,100 --> 00:11:37,370
just F C just pretty cool okay Rick also

00:11:34,460 --> 00:11:40,130
worked at 518 518 had experimental

00:11:37,370 --> 00:11:42,830
warnings which is nice 518 had the rash

00:11:40,130 --> 00:11:45,080
hash hash randomization I don't know how

00:11:42,830 --> 00:11:46,910
many people remember this part but a lot

00:11:45,080 --> 00:11:49,100
of testing Suites broke because they

00:11:46,910 --> 00:11:52,160
assumed that hashes would always be the

00:11:49,100 --> 00:11:55,040
same order so if you call keys on a hash

00:11:52,160 --> 00:11:56,930
and then you call keys again in the hash

00:11:55,040 --> 00:11:58,190
after changing it it would just be the

00:11:56,930 --> 00:11:59,810
same if you stop the product if you

00:11:58,190 --> 00:12:03,320
start the process again it would exactly

00:11:59,810 --> 00:12:05,240
be the same but it shouldn't be so if

00:12:03,320 --> 00:12:08,270
you actually think of how we change hash

00:12:05,240 --> 00:12:09,680
functions it you know different versions

00:12:08,270 --> 00:12:12,770
of Perl could have different hash orders

00:12:09,680 --> 00:12:14,000
anyway so so we actually added hash

00:12:12,770 --> 00:12:18,380
randomization which was a really big

00:12:14,000 --> 00:12:19,760
security improvement unicode 6.2 regular

00:12:18,380 --> 00:12:21,200
expression set operations which I

00:12:19,760 --> 00:12:23,960
haven't seen enough people use it it's

00:12:21,200 --> 00:12:25,820
really nice regular expressions set

00:12:23,960 --> 00:12:28,490
operations allow us to do this thing

00:12:25,820 --> 00:12:34,340
which basically says I would like to

00:12:28,490 --> 00:12:36,680
capture something from Ty and or or lo

00:12:34,340 --> 00:12:40,220
Asian and I wanted to be a digit but one

00:12:36,680 --> 00:12:42,110
of those two which is a really really

00:12:40,220 --> 00:12:44,060
interesting way of presenting it in a

00:12:42,110 --> 00:12:46,070
good way I think it's really cool so

00:12:44,060 --> 00:12:47,890
this is another example I want all the

00:12:46,070 --> 00:12:52,670
word characters except the lowercase

00:12:47,890 --> 00:12:55,430
right so that's pretty cool then we had

00:12:52,670 --> 00:12:58,550
lexical subroutines we had computed

00:12:55,430 --> 00:13:01,430
labels QW without prints does anyone

00:12:58,550 --> 00:13:03,740
remember this so if you look at stuff

00:13:01,430 --> 00:13:06,020
like for each you do a for each my foo

00:13:03,740 --> 00:13:08,870
and then you put in parentheses and you

00:13:06,020 --> 00:13:10,910
give a list of things QW used to be able

00:13:08,870 --> 00:13:12,800
to assume that there are parentheses

00:13:10,910 --> 00:13:16,780
around it which doesn't make sense

00:13:12,800 --> 00:13:19,820
because for each the syntax is for each

00:13:16,780 --> 00:13:22,520
arguably maybe a variable and then as

00:13:19,820 --> 00:13:24,680
you know braces to put it in a list of

00:13:22,520 --> 00:13:26,450
stuff but with QW you could avoid that

00:13:24,680 --> 00:13:28,850
which broke the syntax it was really

00:13:26,450 --> 00:13:34,100
weird so we fixed that you can still

00:13:28,850 --> 00:13:37,550
define arrays this way but if I 20 came

00:13:34,100 --> 00:13:38,960
out 520 had experimental signatures so

00:13:37,550 --> 00:13:42,830
we finally had signatures it was about

00:13:38,960 --> 00:13:44,450
time the subsets I love this hash slice

00:13:42,830 --> 00:13:47,510
and I want to present some code that

00:13:44,450 --> 00:13:48,980
explains it so I do a lot of how slices

00:13:47,510 --> 00:13:50,240
a lot of very sizes I really really

00:13:48,980 --> 00:13:51,830
really like that because then I can

00:13:50,240 --> 00:13:54,350
access multiple things at the same time

00:13:51,830 --> 00:13:57,710
which we like to do so if you look at

00:13:54,350 --> 00:13:59,960
this list of days and we want to grab

00:13:57,710 --> 00:14:02,680
the first day and the last day we can do

00:13:59,960 --> 00:14:05,960
a slice that says go to the array and

00:14:02,680 --> 00:14:08,060
we're gonna use the @ symbol here

00:14:05,960 --> 00:14:09,500
because we want to say multiple elements

00:14:08,060 --> 00:14:11,690
we don't want a single element if we

00:14:09,500 --> 00:14:12,890
access single elements a dollar but if

00:14:11,690 --> 00:14:15,950
you want multiple elements it's going to

00:14:12,890 --> 00:14:17,420
be the app and then we give it in the

00:14:15,950 --> 00:14:20,150
brackets that really show us this is an

00:14:17,420 --> 00:14:23,210
array we give it two indices 0 minus 1

00:14:20,150 --> 00:14:26,840
first one last and we apply them to two

00:14:23,210 --> 00:14:29,530
variables we can also get several of

00:14:26,840 --> 00:14:31,610
those so this is the flip flop operator

00:14:29,530 --> 00:14:33,710
this is an example of how you would use

00:14:31,610 --> 00:14:35,870
that in a hash so we can access to keys

00:14:33,710 --> 00:14:37,790
and get two values at the same time I

00:14:35,870 --> 00:14:40,490
love this I do this often

00:14:37,790 --> 00:14:42,830
so access both user and home apply two

00:14:40,490 --> 00:14:46,160
at the same time now here's the tricky

00:14:42,830 --> 00:14:49,130
part I have a hash here with three keys

00:14:46,160 --> 00:14:53,000
and corresponding values and I would

00:14:49,130 --> 00:14:54,680
like to access fill and bar but then I

00:14:53,000 --> 00:14:57,230
would have to use a map if I want to

00:14:54,680 --> 00:14:59,990
store also the keys that I accessed so

00:14:57,230 --> 00:15:03,530
we'd have to do a map in which I send

00:14:59,990 --> 00:15:05,840
foo and bar and then apply foo and then

00:15:03,530 --> 00:15:07,940
the value in foo and then apply bar and

00:15:05,840 --> 00:15:10,910
the value in bar right it's kind of kind

00:15:07,940 --> 00:15:13,400
of geeky so let's play with what we can

00:15:10,910 --> 00:15:15,980
do with hash slices so we'll take the @

00:15:13,400 --> 00:15:17,660
symbol that means multiple keys and

00:15:15,980 --> 00:15:20,450
instead we'll put in a hash symbol and

00:15:17,660 --> 00:15:23,480
hash symbol here says I want keys and

00:15:20,450 --> 00:15:27,470
values not just accessing multiple casts

00:15:23,480 --> 00:15:30,160
from keys from multiple values so foo

00:15:27,470 --> 00:15:33,400
and bar and what will happen is

00:15:30,160 --> 00:15:37,030
it will actually take out a subset not

00:15:33,400 --> 00:15:41,470
just a set of values in this case when

00:15:37,030 --> 00:15:43,150
bar will return foo 1 bar 2 you could

00:15:41,470 --> 00:15:50,950
also do this on a race what would that

00:15:43,150 --> 00:15:53,170
return louder indexes I'll accept that

00:15:50,950 --> 00:15:56,470
answer indices ou accept that answer as

00:15:53,170 --> 00:16:00,160
well so if we take the array we give it

00:15:56,470 --> 00:16:03,310
to 3 Keys indices and then we get a list

00:16:00,160 --> 00:16:04,600
back and that's going to be 3 d 4 e 6 g

00:16:03,310 --> 00:16:06,550
which means that by the way we could

00:16:04,600 --> 00:16:10,960
also applied to a hash instead of just a

00:16:06,550 --> 00:16:11,530
list and that's how the correlate that's

00:16:10,960 --> 00:16:14,350
really nice

00:16:11,530 --> 00:16:16,540
I like this okay more things that came

00:16:14,350 --> 00:16:22,740
out postfix dereferencing it's really

00:16:16,540 --> 00:16:25,030
really really nice so very quite clap ok

00:16:22,740 --> 00:16:27,910
enthusiastic though I'll take it

00:16:25,030 --> 00:16:29,530
we have here an array ref which is just

00:16:27,910 --> 00:16:30,850
a reference a pointer to an array and

00:16:29,530 --> 00:16:32,380
then we want to access something in it

00:16:30,850 --> 00:16:34,600
and we wouldn't copy the entire thing so

00:16:32,380 --> 00:16:36,670
we're just gonna prepend it I I don't

00:16:34,600 --> 00:16:38,200
like writing this I always correct code

00:16:36,670 --> 00:16:40,180
when I see this because I think it's

00:16:38,200 --> 00:16:42,910
confusing and instead I'd like to

00:16:40,180 --> 00:16:45,550
surround this with braces so I think

00:16:42,910 --> 00:16:48,070
it's a bit clearer but it still kind of

00:16:45,550 --> 00:16:49,540
always wraps the whole thing and instead

00:16:48,070 --> 00:16:51,430
what we can do now is use a write ref

00:16:49,540 --> 00:16:53,770
and then an arrow and then just say at

00:16:51,430 --> 00:16:57,010
and start in the way that I read it is

00:16:53,770 --> 00:16:59,170
go to the array ref dereference it D and

00:16:57,010 --> 00:17:01,000
get that list inside it and the star is

00:16:59,170 --> 00:17:05,890
like all of it just give me all of it

00:17:01,000 --> 00:17:08,020
the entire array that this references we

00:17:05,890 --> 00:17:09,550
can do this here as well so in the old

00:17:08,020 --> 00:17:11,230
days we were just arrow and then just

00:17:09,550 --> 00:17:13,480
find one thing and then just surround

00:17:11,230 --> 00:17:15,730
the entire thing again and instead we

00:17:13,480 --> 00:17:17,829
can just go to one and then arrow and

00:17:15,730 --> 00:17:21,189
then at start just give me everything

00:17:17,829 --> 00:17:23,860
that you find there this is a good

00:17:21,189 --> 00:17:25,480
example we would go to the keys find the

00:17:23,860 --> 00:17:28,390
people and then we can just say you know

00:17:25,480 --> 00:17:30,790
just give me all of it just give me the

00:17:28,390 --> 00:17:36,610
hash inside that thing and then I'll

00:17:30,790 --> 00:17:38,740
iterate over it Yuriko 6.3 also came out

00:17:36,610 --> 00:17:43,200
520 literal control characters in

00:17:38,740 --> 00:17:45,210
variable names so you used to be able

00:17:43,200 --> 00:17:49,590
to define variable names they had

00:17:45,210 --> 00:17:54,059
literal control characters now I'm not

00:17:49,590 --> 00:17:58,169
sure why someone would do this but Pro

00:17:54,059 --> 00:18:01,399
loaded yeah Oh tickle yeah now I'm not

00:17:58,169 --> 00:18:03,359
sure why someone would use it but oh

00:18:01,399 --> 00:18:11,970
okay I thought you were mentioning

00:18:03,359 --> 00:18:20,210
tickle I'm too young and I had color TV

00:18:11,970 --> 00:18:20,210
I can it we had refrigerators now okay

00:18:20,629 --> 00:18:27,269
okay interpreter based threads were

00:18:24,809 --> 00:18:28,769
officially discouraged not because they

00:18:27,269 --> 00:18:31,859
don't do something because they probably

00:18:28,769 --> 00:18:33,539
don't do what you think they do but I

00:18:31,859 --> 00:18:35,279
think it's actually interesting that we

00:18:33,539 --> 00:18:38,039
discourage something some people because

00:18:35,279 --> 00:18:40,710
we realize that we know what it does but

00:18:38,039 --> 00:18:42,929
that a user might not see the same way

00:18:40,710 --> 00:18:44,970
it might address it differently use it

00:18:42,929 --> 00:18:46,049
differently see it differently so we

00:18:44,970 --> 00:18:48,749
discourage it I think it's actually

00:18:46,049 --> 00:18:50,609
shows a lot of thinking about the person

00:18:48,749 --> 00:18:52,799
themselves and not just us and our

00:18:50,609 --> 00:18:54,720
implementation so actually I really do

00:18:52,799 --> 00:18:57,359
appreciate this as just a concept the

00:18:54,720 --> 00:18:59,309
way that we work and we also add a copy

00:18:57,359 --> 00:19:02,179
and write which is a very very very very

00:18:59,309 --> 00:19:05,399
good useful optimization so basically

00:19:02,179 --> 00:19:07,049
data will not be copied when it should

00:19:05,399 --> 00:19:08,489
be instead it will only be when it's

00:19:07,049 --> 00:19:11,220
read it will only be copied when you

00:19:08,489 --> 00:19:14,549
actually change it which is really big

00:19:11,220 --> 00:19:15,929
and we also had an automatic regex

00:19:14,549 --> 00:19:18,269
optimizer for everything you're right

00:19:15,929 --> 00:19:23,789
it's pretty cool because I write crappy

00:19:18,269 --> 00:19:26,249
regex ok well hopefully not but 5 22

00:19:23,789 --> 00:19:29,100
again Rick just so many releases the

00:19:26,249 --> 00:19:31,019
diamond operator came in Double Diamond

00:19:29,100 --> 00:19:32,340
so the diamond operator is just would

00:19:31,019 --> 00:19:34,289
use as a read line you know you mean

00:19:32,340 --> 00:19:36,119
like one record at a time or you read

00:19:34,289 --> 00:19:39,299
the entire file if the right parameter

00:19:36,119 --> 00:19:41,879
is set to what a record stop is and the

00:19:39,299 --> 00:19:43,950
diamond double diamond sorry was a way

00:19:41,879 --> 00:19:45,509
to do this in a more secure manner so

00:19:43,950 --> 00:19:47,159
every time you see the diamond operator

00:19:45,509 --> 00:19:50,279
change to doubled up in the operator

00:19:47,159 --> 00:19:51,659
because then you're richer ok

00:19:50,279 --> 00:19:54,929
all I have is like really bad jokes

00:19:51,659 --> 00:19:57,919
Unicode 7 ok mild does anyone know what

00:19:54,929 --> 00:19:57,919
came out in Unicode 7

00:19:58,700 --> 00:20:03,620
honestly I'm not sure I just threw it

00:20:00,540 --> 00:20:06,120
out to see what people will say okay

00:20:03,620 --> 00:20:08,520
aliasing via reference I really like

00:20:06,120 --> 00:20:10,110
this one so aliasing of your reference

00:20:08,520 --> 00:20:12,300
let's say that we have an array of

00:20:10,110 --> 00:20:14,700
hashes now what we would normally do is

00:20:12,300 --> 00:20:16,290
walk over the references right because

00:20:14,700 --> 00:20:17,340
it has to be a reference to hashes so

00:20:16,290 --> 00:20:19,050
it's hash refs

00:20:17,340 --> 00:20:20,370
and then we walk over the references and

00:20:19,050 --> 00:20:22,340
then we dereference each one to access

00:20:20,370 --> 00:20:24,780
stuff but what we can do is we can use

00:20:22,340 --> 00:20:26,880
aliasing which means to bind the

00:20:24,780 --> 00:20:29,600
variable to another one in a different

00:20:26,880 --> 00:20:32,220
way it's not a copy of it and then to

00:20:29,600 --> 00:20:34,200
use a reference to do this and suddenly

00:20:32,220 --> 00:20:36,480
we can walk over the hashes themselves

00:20:34,200 --> 00:20:39,120
and the hash here if we alter it we

00:20:36,480 --> 00:20:41,460
actually alter the value inside the

00:20:39,120 --> 00:20:43,520
array of hashes so it's even stronger

00:20:41,460 --> 00:20:46,970
than what we would do it's pretty cool

00:20:43,520 --> 00:20:50,460
okay CGI was finally removed from core

00:20:46,970 --> 00:20:52,050
you might have seen one of the first

00:20:50,460 --> 00:20:54,720
really big talks that I gave at

00:20:52,050 --> 00:20:57,020
conferences with CGI p.m. must die

00:20:54,720 --> 00:21:00,870
it was littered with insults and and

00:20:57,020 --> 00:21:03,990
screaming I apologized partially for it

00:21:00,870 --> 00:21:07,020
I received an email from Lincoln Dee

00:21:03,990 --> 00:21:10,800
Stein who wrote it and said I have seen

00:21:07,020 --> 00:21:14,540
your talk and I would just like you to

00:21:10,800 --> 00:21:14,540
know I fully agree

00:21:14,710 --> 00:21:24,409
but I did not know much when I wrote it

00:21:17,269 --> 00:21:28,190
so please accept my apologies okay 524

00:21:24,409 --> 00:21:29,029
was another one by Rick introduced

00:21:28,190 --> 00:21:30,590
Unicode eight

00:21:29,029 --> 00:21:32,600
I think Unicode eight is really really

00:21:30,590 --> 00:21:35,980
big because it introduced the diversity

00:21:32,600 --> 00:21:39,350
system so I want to give a few examples

00:21:35,980 --> 00:21:41,389
we load the char names and then we could

00:21:39,350 --> 00:21:43,730
use the uppercase n to use the

00:21:41,389 --> 00:21:46,059
abbreviations and this is what's called

00:21:43,730 --> 00:21:48,889
a zero with Joyner it's a way to combine

00:21:46,059 --> 00:21:52,460
characters together emojis and Unicode

00:21:48,889 --> 00:21:55,159
characters and what we do is add the

00:21:52,460 --> 00:21:56,840
heavy black heart and the variation

00:21:55,159 --> 00:22:01,700
selector 16 does anyone know what the

00:21:56,840 --> 00:22:03,919
very selector 16 is it's a very ancient

00:22:01,700 --> 00:22:08,359
selector technically correct not what I

00:22:03,919 --> 00:22:12,619
was hoping for it's red it's red so this

00:22:08,359 --> 00:22:15,409
creates a red heart and then we take a

00:22:12,619 --> 00:22:16,210
character of a person we take another

00:22:15,409 --> 00:22:19,489
mark

00:22:16,210 --> 00:22:22,249
we of course output utf-8 because my

00:22:19,489 --> 00:22:24,710
terminal needs to know this and then we

00:22:22,249 --> 00:22:26,749
just use the zero with Joyner to combine

00:22:24,710 --> 00:22:30,230
all those together this will create one

00:22:26,749 --> 00:22:33,350
single emoji just one of all of those

00:22:30,230 --> 00:22:35,480
combined she's incredibly powerful and

00:22:33,350 --> 00:22:38,080
the amount of code that I wrote is very

00:22:35,480 --> 00:22:40,519
little and it's a hundred percent

00:22:38,080 --> 00:22:42,639
readable like you know exactly what this

00:22:40,519 --> 00:22:47,840
does and this is what it comes out as

00:22:42,639 --> 00:22:50,149
like it actually works so the diversity

00:22:47,840 --> 00:22:53,149
system added this part as well like the

00:22:50,149 --> 00:22:55,039
whole idea of capturing people's skin

00:22:53,149 --> 00:22:58,580
tones you know representing people the

00:22:55,039 --> 00:23:00,169
way they are and I think it's very very

00:22:58,580 --> 00:23:01,970
powerful and suddenly we support it very

00:23:00,169 --> 00:23:06,350
early on I'm really really happy with

00:23:01,970 --> 00:23:07,999
this so what else the auto drf so you

00:23:06,350 --> 00:23:09,830
might have noticed I did not tell you

00:23:07,999 --> 00:23:12,559
when auto deer was introduced I do not

00:23:09,830 --> 00:23:17,749
want you to remember this I do want you

00:23:12,559 --> 00:23:20,539
to know it was removed the lexical

00:23:17,749 --> 00:23:22,730
dollar underscore was also removed also

00:23:20,539 --> 00:23:26,389
not a good memory the multi dear I

00:23:22,730 --> 00:23:28,280
thought one of my favorites what it

00:23:26,389 --> 00:23:30,230
actually does if we have this

00:23:28,280 --> 00:23:31,820
really long they've made a lot of

00:23:30,230 --> 00:23:34,280
dereferences are happening there right

00:23:31,820 --> 00:23:37,300
which if we look at what pro will do

00:23:34,280 --> 00:23:40,610
internally the the opcodes themselves

00:23:37,300 --> 00:23:46,460
what pearl sees as actions it needs to

00:23:40,610 --> 00:23:48,290
perform it's this simple right that's

00:23:46,460 --> 00:23:49,910
that's pretty it's pretty clear I'm

00:23:48,290 --> 00:23:51,890
gonna cut out all the stuff you don't

00:23:49,910 --> 00:23:53,150
care about you don't need to see just to

00:23:51,890 --> 00:23:56,320
make it a bit more readable for all of

00:23:53,150 --> 00:23:56,320
us there we go

00:23:57,130 --> 00:24:02,000
now what you're seeing here is basically

00:23:59,780 --> 00:24:03,320
saying I have an element of a hash and

00:24:02,000 --> 00:24:04,760
when do you reference that because it's

00:24:03,320 --> 00:24:06,470
a reference inside it and then I want to

00:24:04,760 --> 00:24:07,850
access another element of a hash and

00:24:06,470 --> 00:24:09,110
then you just keep going and then the

00:24:07,850 --> 00:24:10,850
end there you really see the connecting

00:24:09,110 --> 00:24:14,750
parts of the constants that are used as

00:24:10,850 --> 00:24:17,150
what are the keys of that hash now with

00:24:14,750 --> 00:24:19,880
the multi DRF app we're actually taking

00:24:17,150 --> 00:24:22,490
all of this at compilation we're trying

00:24:19,880 --> 00:24:24,620
to mix them into fewer operations that

00:24:22,490 --> 00:24:27,860
basically knows internally to walk that

00:24:24,620 --> 00:24:32,840
path if I were to compile what happens

00:24:27,860 --> 00:24:35,030
once we use the multi Dieruff comp it

00:24:32,840 --> 00:24:39,050
looks like this and of course I'm gonna

00:24:35,030 --> 00:24:42,320
cut off the craft so that's it that's it

00:24:39,050 --> 00:24:44,840
it's a single op for all of it one and

00:24:42,320 --> 00:24:46,760
that's way way way faster you get this

00:24:44,840 --> 00:24:48,590
for free by the way no need to enable

00:24:46,760 --> 00:24:53,860
this this is automatically enabled you

00:24:48,590 --> 00:24:56,270
just have it's part of the language and

00:24:53,860 --> 00:24:59,930
5:26 came out this was the first release

00:24:56,270 --> 00:25:02,660
that I did that was even worse than just

00:24:59,930 --> 00:25:05,150
applause he's just do or don't like

00:25:02,660 --> 00:25:09,860
don't don't hang me in the air like

00:25:05,150 --> 00:25:14,270
halfway through so 526 with the first

00:25:09,860 --> 00:25:15,830
release that that I worked on and it was

00:25:14,270 --> 00:25:20,210
Jimmy was a very challenging experience

00:25:15,830 --> 00:25:23,000
I the so Rick said that I have to do

00:25:20,210 --> 00:25:24,410
double him in the 2-2 to double his

00:25:23,000 --> 00:25:26,210
amount of releases

00:25:24,410 --> 00:25:28,730
that's very challenging I don't if I

00:25:26,210 --> 00:25:29,840
could I can share a little bit of some

00:25:28,730 --> 00:25:34,400
stuff that we did that I'm actually

00:25:29,840 --> 00:25:37,220
really proud of we added Unicode 9 we

00:25:34,400 --> 00:25:39,470
removed dot from Inc and I think as a

00:25:37,220 --> 00:25:40,850
first release that was also really hard

00:25:39,470 --> 00:25:42,170
for me because that was probably one of

00:25:40,850 --> 00:25:44,180
the biggest changes

00:25:42,170 --> 00:25:49,450
that I remember when it comes to

00:25:44,180 --> 00:25:52,070
managing such a high height impacting

00:25:49,450 --> 00:25:54,590
change across like people companies

00:25:52,070 --> 00:25:57,470
libraries users call everything changed

00:25:54,590 --> 00:25:59,480
because of this my idioms changed the

00:25:57,470 --> 00:26:03,350
way I typed changed my memory muscles

00:25:59,480 --> 00:26:04,940
changed and this broke a lot of stuff it

00:26:03,350 --> 00:26:07,460
was a security change that we realized

00:26:04,940 --> 00:26:08,630
we just we have to do it and you would

00:26:07,460 --> 00:26:10,850
think that if you were to put security

00:26:08,630 --> 00:26:14,510
on the table then suddenly you can do

00:26:10,850 --> 00:26:16,160
this everything's fine no we couldn't it

00:26:14,510 --> 00:26:17,720
was still very very difficult to push

00:26:16,160 --> 00:26:21,050
this through and we had to deal with a

00:26:17,720 --> 00:26:22,970
lot of long tail of changes that we had

00:26:21,050 --> 00:26:24,620
to make in code because libraries don't

00:26:22,970 --> 00:26:27,260
always get as updated as quickly as you

00:26:24,620 --> 00:26:28,940
want it did you know the Pearl has one

00:26:27,260 --> 00:26:33,230
thing that you should not do but Otto

00:26:28,940 --> 00:26:34,640
Kahn fly Bri can do it's because people

00:26:33,230 --> 00:26:36,290
want to use our conf because it's a

00:26:34,640 --> 00:26:38,870
really really useful libraries for

00:26:36,290 --> 00:26:41,510
building stuff but it does one thing

00:26:38,870 --> 00:26:43,940
that is actually wrong but we still

00:26:41,510 --> 00:26:45,980
support it because we know it's going to

00:26:43,940 --> 00:26:47,530
take a while for that to update so this

00:26:45,980 --> 00:26:50,330
was also an example of this

00:26:47,530 --> 00:26:51,530
so now Inc which is basically for those

00:26:50,330 --> 00:26:53,990
that are not familiar with it it is the

00:26:51,530 --> 00:26:56,240
list of libraries that pearl should look

00:26:53,990 --> 00:26:57,650
for things to load in so he goes to

00:26:56,240 --> 00:26:59,720
these folders and says do I have a

00:26:57,650 --> 00:27:01,400
module here no I'm gonna go to the next

00:26:59,720 --> 00:27:03,110
directory and see if I have a module

00:27:01,400 --> 00:27:04,190
there and I'm gonna have to have to go

00:27:03,110 --> 00:27:08,720
to next directory and see if I have a

00:27:04,190 --> 00:27:11,420
module there and dot which means current

00:27:08,720 --> 00:27:15,590
directory where I am now was by default

00:27:11,420 --> 00:27:18,440
there and we took it out and everything

00:27:15,590 --> 00:27:21,500
changed but it was important and we had

00:27:18,440 --> 00:27:24,440
to do this indented here Docs

00:27:21,500 --> 00:27:27,260
I love this I'm gonna do some coding for

00:27:24,440 --> 00:27:29,960
not familiar with this in that your Docs

00:27:27,260 --> 00:27:31,760
is you have let's say this is a common

00:27:29,960 --> 00:27:33,860
thing that I do I have a subroutine help

00:27:31,760 --> 00:27:35,900
and exit and that subroutine receives a

00:27:33,860 --> 00:27:37,430
message and if I actually get the

00:27:35,900 --> 00:27:39,830
message then I also want to print out

00:27:37,430 --> 00:27:41,780
the error and then I usually use a here

00:27:39,830 --> 00:27:46,190
dog for all the help text I double quote

00:27:41,780 --> 00:27:49,100
it and I'll put in the name of the the

00:27:46,190 --> 00:27:50,930
name of the script and file know the

00:27:49,100 --> 00:27:53,150
options everything there but the thing

00:27:50,930 --> 00:27:55,130
is I can't put it here because then it's

00:27:53,150 --> 00:27:59,419
indented there's a bunch of spaces there

00:27:55,130 --> 00:28:03,140
so I have to indent it to the left then

00:27:59,419 --> 00:28:05,000
I have to put the where's that here doc

00:28:03,140 --> 00:28:07,190
Terminator right so I put they here doc

00:28:05,000 --> 00:28:12,230
Terminator but that won't work either

00:28:07,190 --> 00:28:15,919
why spaces there are spaces I have to do

00:28:12,230 --> 00:28:18,679
that too so if we take this thing that

00:28:15,919 --> 00:28:25,570
says I have a here dog here and we add

00:28:18,679 --> 00:28:25,570
I'm quoting a car Williamson a twist

00:28:26,350 --> 00:28:34,159
no it wasn't who said that I thought it

00:28:30,500 --> 00:28:38,690
was you it was Carl okay let's just all

00:28:34,159 --> 00:28:40,700
agree you were done and this twist and

00:28:38,690 --> 00:28:45,200
the end basically says you know this is

00:28:40,700 --> 00:28:48,289
actually I want to indent stuff so we

00:28:45,200 --> 00:28:52,460
can now finally indent it all of it and

00:28:48,289 --> 00:28:54,830
it's it's a small thing but to me that

00:28:52,460 --> 00:28:59,840
was a big experience change because my

00:28:54,830 --> 00:29:01,250
code is so much more fluent this by the

00:28:59,840 --> 00:29:03,320
way I just want to note this was written

00:29:01,250 --> 00:29:05,570
by someone who heard over and over that

00:29:03,320 --> 00:29:06,950
it just can't be done and then just

00:29:05,570 --> 00:29:07,669
through a patch on the list and said I

00:29:06,950 --> 00:29:10,370
think I did it

00:29:07,669 --> 00:29:12,950
what's wrong and and people respond with

00:29:10,370 --> 00:29:17,409
nothing and then everyone just paused to

00:29:12,950 --> 00:29:21,049
think about this so weird okay

00:29:17,409 --> 00:29:22,760
we also have the X X so this used to

00:29:21,049 --> 00:29:24,830
really not do much and we removed it and

00:29:22,760 --> 00:29:26,840
we added it with actual meaning I want

00:29:24,830 --> 00:29:28,850
to show this so if you use the X X so

00:29:26,840 --> 00:29:33,169
who does this character class is you put

00:29:28,850 --> 00:29:35,210
in d2 eg 2 I 3 to 7 I don't know why you

00:29:33,169 --> 00:29:36,620
would do this the other one is where you

00:29:35,210 --> 00:29:38,600
actually have a set of characters these

00:29:36,620 --> 00:29:40,190
characters and it's really really useful

00:29:38,600 --> 00:29:41,480
the problem is that you can't have a

00:29:40,190 --> 00:29:46,100
space there because then you're saying I

00:29:41,480 --> 00:29:47,750
also want a space but with the X hey we

00:29:46,100 --> 00:29:50,000
can make it clear we can expand it but

00:29:47,750 --> 00:29:54,080
not inside sure but before and after

00:29:50,000 --> 00:29:56,030
space is incredible but with the XS we

00:29:54,080 --> 00:29:59,360
can do something better we could expand

00:29:56,030 --> 00:30:03,110
those and that really clarifies what I

00:29:59,360 --> 00:30:06,590
mean - right I mean to say D to e G to I

00:30:03,110 --> 00:30:09,820
3 to 7 and I will take these I mean all

00:30:06,590 --> 00:30:09,820
of these characters

00:30:11,690 --> 00:30:16,050
what else these variables for the

00:30:14,190 --> 00:30:20,780
captures if you're not using them don't

00:30:16,050 --> 00:30:23,180
worry we can use this so it used to the

00:30:20,780 --> 00:30:26,610
what you're saying here is actually the

00:30:23,180 --> 00:30:28,890
aliasing happening on assignment which

00:30:26,610 --> 00:30:31,020
we were not sure how where should it

00:30:28,890 --> 00:30:32,850
could it and we got this done which i

00:30:31,020 --> 00:30:35,670
think is really really nice so in this

00:30:32,850 --> 00:30:38,190
case a will represent what b represents

00:30:35,670 --> 00:30:39,510
it isn't a copy of it it is in reference

00:30:38,190 --> 00:30:42,360
to it's an alias which means it

00:30:39,510 --> 00:30:46,980
represents the same place in memory and

00:30:42,360 --> 00:30:49,020
then 5:28 came out 528 had unicode ten

00:30:46,980 --> 00:30:50,670
it had unicode script runs which is a

00:30:49,020 --> 00:30:53,430
really cool idea where we can have like

00:30:50,670 --> 00:30:55,020
a unicode check for anything that is

00:30:53,430 --> 00:30:56,670
from the same script so no one can

00:30:55,020 --> 00:30:58,230
introduce characters that look the same

00:30:56,670 --> 00:31:02,010
but they're from a different script or

00:30:58,230 --> 00:31:03,150
me it's it's really crazy stuff i'm not

00:31:02,010 --> 00:31:05,220
aware of other languages that support

00:31:03,150 --> 00:31:06,930
script runs by the way this was another

00:31:05,220 --> 00:31:08,670
crazy idea from carl and just well i

00:31:06,930 --> 00:31:11,430
think we're gonna do this and he did and

00:31:08,670 --> 00:31:13,200
that was it so we have this the

00:31:11,430 --> 00:31:15,030
subroutine attribute and signature order

00:31:13,200 --> 00:31:18,300
changed and this is a good time to

00:31:15,030 --> 00:31:21,450
introduce you to signatures so

00:31:18,300 --> 00:31:24,300
signatures look like this you can put in

00:31:21,450 --> 00:31:25,800
variables there you can also and

00:31:24,300 --> 00:31:27,630
obviously use them you can also put

00:31:25,800 --> 00:31:29,640
placeholders there the dollar here says

00:31:27,630 --> 00:31:31,050
I'm gonna have something but I'm not

00:31:29,640 --> 00:31:34,410
going to use it so I don't even need to

00:31:31,050 --> 00:31:37,050
give it a name we can also set defaults

00:31:34,410 --> 00:31:40,010
which is really useful we can also use

00:31:37,050 --> 00:31:43,200
variables from outside and change them

00:31:40,010 --> 00:31:46,310
we can also use variables from the

00:31:43,200 --> 00:31:48,930
signature itself as well as a default

00:31:46,310 --> 00:31:50,820
really nice and there's another example

00:31:48,930 --> 00:31:56,720
of placeholder basically just says and

00:31:50,820 --> 00:32:02,430
you know other stuff same with hashes

00:31:56,720 --> 00:32:04,170
really really nice I love this one I've

00:32:02,430 --> 00:32:06,120
been using a lot of my code now when I

00:32:04,170 --> 00:32:08,010
read libraries at work I automatically

00:32:06,120 --> 00:32:09,840
make my stuff import signatures through

00:32:08,010 --> 00:32:14,580
the user it's fantastic everyone loves

00:32:09,840 --> 00:32:16,860
it it's great the use of a bear here doc

00:32:14,580 --> 00:32:19,920
Terminator to mean empty here doc

00:32:16,860 --> 00:32:21,929
Terminator I only put this here because

00:32:19,920 --> 00:32:24,659
this was very difficult to

00:32:21,929 --> 00:32:27,960
get through it's silly how many people

00:32:24,659 --> 00:32:28,950
here use your dock without an actual

00:32:27,960 --> 00:32:32,669
terminator

00:32:28,950 --> 00:32:37,320
without saying when it ends does anyone

00:32:32,669 --> 00:32:42,919
here use it did you know you could Larry

00:32:37,320 --> 00:32:45,119
come on man so you could do this now

00:32:42,919 --> 00:32:46,889
you're thinking oh I didn't even know

00:32:45,119 --> 00:32:48,600
that existed but honestly I don't even

00:32:46,889 --> 00:32:50,639
care that existed because I'm not gonna

00:32:48,600 --> 00:32:55,049
write this do you know what an uphill

00:32:50,639 --> 00:32:56,129
Bell it was to remove it and we had to

00:32:55,049 --> 00:32:58,470
you know what we had to

00:32:56,129 --> 00:33:01,999
you wanted the indented here docks right

00:32:58,470 --> 00:33:05,519
you gotta get from somewhere okay

00:33:01,999 --> 00:33:08,340
syntax collided multicom CAD

00:33:05,519 --> 00:33:10,350
optimization also really nice when you

00:33:08,340 --> 00:33:12,299
concatenate multiple things we do this

00:33:10,350 --> 00:33:15,600
in one up as well similar to the multi d

00:33:12,299 --> 00:33:21,080
RF and removed use VARs whoever's using

00:33:15,600 --> 00:33:23,340
sorry and we got to 5:30 hmm okay so

00:33:21,080 --> 00:33:27,749
really this talk it was supposed to be

00:33:23,340 --> 00:33:30,299
about 5:30 but I think that we don't

00:33:27,749 --> 00:33:32,429
often go back and look at what we

00:33:30,299 --> 00:33:33,690
currently have anything not everyone

00:33:32,429 --> 00:33:35,220
here has been in my previous talk so I

00:33:33,690 --> 00:33:37,409
couldn't go over one or two previous

00:33:35,220 --> 00:33:40,049
versions if you look 20 years we did

00:33:37,409 --> 00:33:41,460
quite a lot of stuff it's a lot of code

00:33:40,049 --> 00:33:42,869
there's a lot of efforts a lot of

00:33:41,460 --> 00:33:44,190
coordination there's a lot of discussion

00:33:42,869 --> 00:33:45,779
there's a lot of knowledge understanding

00:33:44,190 --> 00:33:48,779
people and what they do and what they

00:33:45,779 --> 00:33:51,809
use and how they use it we got to 5:30

00:33:48,779 --> 00:33:53,879
this year I wanna start with who made

00:33:51,809 --> 00:33:55,830
5:30 I think it's very important the

00:33:53,879 --> 00:33:57,659
following people worked on it it's easy

00:33:55,830 --> 00:33:59,549
to get that list if you just run this

00:33:57,659 --> 00:34:01,230
code from the purl trees you could just

00:33:59,549 --> 00:34:05,519
compare and get everyone who worked on

00:34:01,230 --> 00:34:07,830
certain periods and these are people who

00:34:05,519 --> 00:34:10,429
worked on it can anyone find themselves

00:34:07,830 --> 00:34:13,139
here cuz that grating in some we got one

00:34:10,429 --> 00:34:15,000
we got another we have some another

00:34:13,139 --> 00:34:18,980
little slowly kind of okay I guess I was

00:34:15,000 --> 00:34:22,750
there so quite a few people work on this

00:34:18,980 --> 00:34:26,649
and I wouldn't yes thank you

00:34:22,750 --> 00:34:29,359
[Applause]

00:34:26,649 --> 00:34:34,250
fun thing Unicode consortium also gets

00:34:29,359 --> 00:34:36,290
credit there also contributed so what

00:34:34,250 --> 00:34:38,780
really is in 5:30 I mean you're probably

00:34:36,290 --> 00:34:42,079
thinking wow so many changes we must

00:34:38,780 --> 00:34:44,060
have done so much this year actually we

00:34:42,079 --> 00:34:45,710
kind of relaxed a bit this year which is

00:34:44,060 --> 00:34:49,040
good it's not bad I want to show you

00:34:45,710 --> 00:34:51,290
what we did do so first of all my

00:34:49,040 --> 00:34:54,260
favorite fix this one this is what I

00:34:51,290 --> 00:34:58,250
like that we did how many people

00:34:54,260 --> 00:35:01,310
understand what this is no okay so if

00:34:58,250 --> 00:35:04,310
you do sort on a subroutine name within

00:35:01,310 --> 00:35:07,970
an eval of an expression and the

00:35:04,310 --> 00:35:14,780
expression was utf-8 upgraded it could

00:35:07,970 --> 00:35:20,690
panic if the sub name was not asking who

00:35:14,780 --> 00:35:22,819
wrote this so this actually came from

00:35:20,690 --> 00:35:24,950
someone who did some fuzzing gun code

00:35:22,819 --> 00:35:28,160
for those aren't familiar with fuzzing

00:35:24,950 --> 00:35:31,190
it's basically a technique to just run

00:35:28,160 --> 00:35:33,050
really weird variations of the syntax to

00:35:31,190 --> 00:35:34,670
see how it fails and there are a lot of

00:35:33,050 --> 00:35:36,410
techniques and some of them are really

00:35:34,670 --> 00:35:38,450
really smart in progressing and finding

00:35:36,410 --> 00:35:41,030
sore points and then picking in them

00:35:38,450 --> 00:35:44,030
even more this year we had a lot of help

00:35:41,030 --> 00:35:46,520
from Sergei elena cough who helped us a

00:35:44,030 --> 00:35:48,410
la with fuzzing he found this one we

00:35:46,520 --> 00:35:50,329
also had previously with brian carpenter

00:35:48,410 --> 00:35:52,069
other people really helped with fuzzing

00:35:50,329 --> 00:35:54,920
we can find where the syntax does not

00:35:52,069 --> 00:35:56,810
really touches the wrong things and

00:35:54,920 --> 00:35:58,670
pulls the wrong angles and and all those

00:35:56,810 --> 00:35:59,750
things and then we we can fix those so

00:35:58,670 --> 00:36:03,550
we were able to do that and that was a

00:35:59,750 --> 00:36:07,099
lot of fun we did that some features

00:36:03,550 --> 00:36:10,190
first let me see here yeah so this this

00:36:07,099 --> 00:36:13,130
this thing 528 came out with unicode 10

00:36:10,190 --> 00:36:17,300
and we've had situations where we had

00:36:13,130 --> 00:36:19,940
like six six one six two six three but

00:36:17,300 --> 00:36:23,900
here we didn't go by point something we

00:36:19,940 --> 00:36:27,619
went to point one versions up she's

00:36:23,900 --> 00:36:31,849
really weird right why did we do this do

00:36:27,619 --> 00:36:36,699
you know why unicode finally had more

00:36:31,849 --> 00:36:39,349
updates so we just updated all of them

00:36:36,699 --> 00:36:41,299
unicode the 11 came out in July will see

00:36:39,349 --> 00:36:44,059
working on this oh wow I'm not gonna

00:36:41,299 --> 00:36:47,119
make it on time I'm lady you know okay

00:36:44,059 --> 00:36:50,749
Unicode 11 came out in July 20th Unicode

00:36:47,119 --> 00:36:52,309
12 in March point 1 we started in April

00:36:50,749 --> 00:36:54,859
2nd they had really the core of it and

00:36:52,309 --> 00:36:56,509
then we just improved a little bit and

00:36:54,859 --> 00:36:58,089
then we're done so we might as well just

00:36:56,509 --> 00:37:01,489
have it you know why not

00:36:58,089 --> 00:37:02,660
we have variable length limited variable

00:37:01,489 --> 00:37:04,789
length look behind so if you do and look

00:37:02,660 --> 00:37:06,109
behind you can actually have the

00:37:04,789 --> 00:37:09,799
variable length of it and like how much

00:37:06,109 --> 00:37:14,539
it's it's really interesting if you're

00:37:09,799 --> 00:37:33,410
using this thing you know man max you're

00:37:14,539 --> 00:37:37,849
max can now be 65535 knowing I'd be to

00:37:33,410 --> 00:37:39,979
UV changing integers to doubles and so

00:37:37,849 --> 00:37:41,029
on these are things you do you just

00:37:39,979 --> 00:37:45,259
don't notice and we've done a bunch of

00:37:41,029 --> 00:37:48,650
those we did remove a few things this is

00:37:45,259 --> 00:37:51,400
my favorite thing that we removed you

00:37:48,650 --> 00:37:51,400
can't do this anymore

00:37:55,380 --> 00:38:05,320
for a very good reason if it broke your

00:37:58,750 --> 00:38:07,750
stuff I'm not sorry please change it you

00:38:05,320 --> 00:38:10,180
cannot assign any more to this variable

00:38:07,750 --> 00:38:11,830
it is a non zero it will cause fatal

00:38:10,180 --> 00:38:14,350
this was attempted

00:38:11,830 --> 00:38:17,200
it was we want to do this in five twelve

00:38:14,350 --> 00:38:19,360
so we're finally done with it dumped was

00:38:17,200 --> 00:38:22,810
gone he's got finally gone you could use

00:38:19,360 --> 00:38:25,840
core dump that's fine file glob glob is

00:38:22,810 --> 00:38:27,790
gone do not use it you cannot but what

00:38:25,840 --> 00:38:31,510
you could use is a better one which is

00:38:27,790 --> 00:38:36,150
file glob BST plop the limiters must be

00:38:31,510 --> 00:38:38,440
graphemes I so where do you even begin

00:38:36,150 --> 00:38:40,570
explaining that you could use the

00:38:38,440 --> 00:38:44,740
limiters that are code points that are

00:38:40,570 --> 00:38:49,110
not represented as graphemes visible

00:38:44,740 --> 00:38:49,110
character and it could be a delimiter

00:38:52,380 --> 00:38:57,700
not anymore

00:38:54,180 --> 00:39:01,390
this reason sits right on utf-8 handles

00:38:57,700 --> 00:39:03,450
that it's failed we're gone by default

00:39:01,390 --> 00:39:06,490
now JSON PP which is bundled in court

00:39:03,450 --> 00:39:09,040
has allowed on Rev JSON access already

00:39:06,490 --> 00:39:12,550
supported from version four removed B

00:39:09,040 --> 00:39:15,340
debug we removed locale codes they're

00:39:12,550 --> 00:39:16,840
still available in Sipan and finally

00:39:15,340 --> 00:39:22,840
those are fatal does anyone remember

00:39:16,840 --> 00:39:26,950
which version we deprecated it in five

00:39:22,840 --> 00:39:32,700
and five ten that's when we deprecated

00:39:26,950 --> 00:39:35,890
it and now it's finally fatal fun fact

00:39:32,700 --> 00:39:39,130
sorry in uh five ten we tried to remove

00:39:35,890 --> 00:39:41,170
that the when was it made deprecated

00:39:39,130 --> 00:39:42,850
when did we say it's deprecated do not

00:39:41,170 --> 00:39:45,310
use it wasn't five time five ten we

00:39:42,850 --> 00:39:50,740
wanted to drop it but we actually

00:39:45,310 --> 00:39:52,470
version five version five said stop so

00:39:50,740 --> 00:39:57,670
if we're looking twenty years ahead

00:39:52,470 --> 00:39:59,350
finally stopped some stuff we're going

00:39:57,670 --> 00:40:00,580
to remove really there's one thing that

00:39:59,350 --> 00:40:02,290
I can tell you for sure if you're

00:40:00,580 --> 00:40:02,870
calling hostname you cannot send it an

00:40:02,290 --> 00:40:05,390
argument

00:40:02,870 --> 00:40:07,400
we will remove that ability that's the

00:40:05,390 --> 00:40:11,030
next version okay a little bit about the

00:40:07,400 --> 00:40:16,360
future and this is the fun part we do

00:40:11,030 --> 00:40:18,260
have plans we do have ideas but

00:40:16,360 --> 00:40:20,990
unfortunately most of them are really

00:40:18,260 --> 00:40:22,640
too early to really share because we

00:40:20,990 --> 00:40:26,600
want to let them soak a bit we want to

00:40:22,640 --> 00:40:27,680
let them kind of sit so we could think

00:40:26,600 --> 00:40:29,150
about them some more so we could do it

00:40:27,680 --> 00:40:31,660
better and then we could share them with

00:40:29,150 --> 00:40:33,920
you so I don't have that much to share I

00:40:31,660 --> 00:40:35,390
do know that we're gonna add some

00:40:33,920 --> 00:40:38,390
features an optimization signatures

00:40:35,390 --> 00:40:40,970
that's nice but now comes really what I

00:40:38,390 --> 00:40:42,560
wanted to talk about and it took me just

00:40:40,970 --> 00:40:43,930
like gym quite a bit of time to get

00:40:42,560 --> 00:40:46,640
there

00:40:43,930 --> 00:40:47,900
so you could look at this you could say

00:40:46,640 --> 00:40:50,360
wow 5:30

00:40:47,900 --> 00:40:52,580
it wasn't earth-shattering that's

00:40:50,360 --> 00:40:54,530
actually fine we slowed down a bit and

00:40:52,580 --> 00:40:55,820
we were able to take some time to

00:40:54,530 --> 00:40:56,660
breathe and to think which is very

00:40:55,820 --> 00:41:00,200
important to do when you're thinking

00:40:56,660 --> 00:41:02,150
long term so stuff that we were thinking

00:41:00,200 --> 00:41:04,190
about I was trying to look at why is

00:41:02,150 --> 00:41:05,150
pearl not as popular as it used to be

00:41:04,190 --> 00:41:09,020
you know we're looking twenty years

00:41:05,150 --> 00:41:10,100
after and it's different you know and I

00:41:09,020 --> 00:41:14,000
narrowed it down to a few specific

00:41:10,100 --> 00:41:17,270
things so first the syntax the

00:41:14,000 --> 00:41:19,220
capabilities the tooling documentation

00:41:17,270 --> 00:41:22,130
and the libraries these are to me the

00:41:19,220 --> 00:41:24,890
areas that we need to still work on if

00:41:22,130 --> 00:41:27,380
we want to increase the popularity so I

00:41:24,890 --> 00:41:28,970
want to cover them very briefly syntax

00:41:27,380 --> 00:41:30,440
we have a lot of good stuff about syntax

00:41:28,970 --> 00:41:32,840
it's not all bad a lot of use is really

00:41:30,440 --> 00:41:34,040
good so first it's very flexible syntax

00:41:32,840 --> 00:41:35,240
a lot of things that come out in Perl

00:41:34,040 --> 00:41:37,460
they just happen because the syntax

00:41:35,240 --> 00:41:38,720
allows it and she's amazing we don't

00:41:37,460 --> 00:41:40,010
really have typing but we do have

00:41:38,720 --> 00:41:42,380
container types so when you see a

00:41:40,010 --> 00:41:43,790
variable you know that it's an array you

00:41:42,380 --> 00:41:45,950
know that it's multiple items you know

00:41:43,790 --> 00:41:47,420
it's a key value store that a lot of

00:41:45,950 --> 00:41:51,050
languages don't have this it's the name

00:41:47,420 --> 00:41:52,790
you don't know it's very easy to extend

00:41:51,050 --> 00:41:54,230
we can create keywords and we have

00:41:52,790 --> 00:41:57,620
compile-time regular expressions which

00:41:54,230 --> 00:41:59,810
is fantastic to this day but there are

00:41:57,620 --> 00:42:02,780
some bad parts first and the biggest

00:41:59,810 --> 00:42:05,660
issue we have very ambiguous code very

00:42:02,780 --> 00:42:07,910
ambiguous syntax strict and warnings

00:42:05,660 --> 00:42:10,550
still have to be enabled in one way or

00:42:07,910 --> 00:42:12,380
another we have to navigate through

00:42:10,550 --> 00:42:13,880
patterns some patterns are really good

00:42:12,380 --> 00:42:15,950
some of them you should probably avoid

00:42:13,880 --> 00:42:17,859
and you have to navigate them and

00:42:15,950 --> 00:42:19,910
the biggest way that we do this is

00:42:17,859 --> 00:42:23,930
everyone here it's community it's

00:42:19,910 --> 00:42:27,019
talking to people right Tim toady is

00:42:23,930 --> 00:42:28,700
often something else it can it can turn

00:42:27,019 --> 00:42:31,880
into there are far too many ways to do

00:42:28,700 --> 00:42:33,859
it where some of them you might not want

00:42:31,880 --> 00:42:36,079
to do it but you could and people

00:42:33,859 --> 00:42:39,200
usually share that as well so you don't

00:42:36,079 --> 00:42:41,390
really know what to do sometimes and I

00:42:39,200 --> 00:42:43,339
think the a big part of this is really

00:42:41,390 --> 00:42:45,589
it's hard to learn the syntax sometimes

00:42:43,339 --> 00:42:48,890
and it's worse it's hard to teach it and

00:42:45,589 --> 00:42:52,369
until you can teach something you can't

00:42:48,890 --> 00:42:53,900
really use it right and even if you look

00:42:52,369 --> 00:42:55,609
at our errors for the syntax you need to

00:42:53,900 --> 00:42:56,990
know what that means because it's a

00:42:55,609 --> 00:43:00,260
technical error if you know Perl the

00:42:56,990 --> 00:43:02,900
errors are amazing if you don't you're

00:43:00,260 --> 00:43:04,369
not really sure what to do with them we

00:43:02,900 --> 00:43:06,140
have a lot of capabilities procedural

00:43:04,369 --> 00:43:08,299
object-oriented a synchronous we have

00:43:06,140 --> 00:43:11,109
the best Unicode support superb regular

00:43:08,299 --> 00:43:13,039
expression support it's fairly fast

00:43:11,109 --> 00:43:15,440
considering it's a very high-level

00:43:13,039 --> 00:43:17,420
language it's not fully compiled and

00:43:15,440 --> 00:43:19,279
magic is actually pretty cool like the

00:43:17,420 --> 00:43:20,869
whole magic techniques in Perl it's

00:43:19,279 --> 00:43:22,819
being added to other languages now as

00:43:20,869 --> 00:43:24,559
observables they just came up with this

00:43:22,819 --> 00:43:27,589
they're really excited we've had this

00:43:24,559 --> 00:43:29,660
for a very long time but there are some

00:43:27,589 --> 00:43:32,240
bad parts threading is possible but only

00:43:29,660 --> 00:43:34,130
kind of ish you need to know parallelism

00:43:32,240 --> 00:43:35,599
we support a lot of forms of parallelism

00:43:34,130 --> 00:43:37,009
but you kind of need the main knowledge

00:43:35,599 --> 00:43:38,619
in order to do a well it's really hard

00:43:37,009 --> 00:43:42,680
to get it off the bat correctly

00:43:38,619 --> 00:43:44,690
threading forking event loop oo is

00:43:42,680 --> 00:43:45,859
minimal in Perl it's kind of a layer on

00:43:44,690 --> 00:43:48,410
top of things and it works really well

00:43:45,859 --> 00:43:50,450
but it is minimal and we have moose it's

00:43:48,410 --> 00:43:54,619
amazing but we don't have anything like

00:43:50,450 --> 00:43:57,799
moose in court nothing and magic as

00:43:54,619 --> 00:44:01,369
great as it is sometimes it makes some

00:43:57,799 --> 00:44:05,150
things difficult you know in tooling PPI

00:44:01,369 --> 00:44:07,910
is fantastic I love Pro critic I use Pro

00:44:05,150 --> 00:44:11,029
Tidy on everything we have multiple

00:44:07,910 --> 00:44:12,680
rebels now one we have several and we

00:44:11,029 --> 00:44:14,569
have a debugger that is capable in gdb

00:44:12,680 --> 00:44:18,700
it's really strong as a debugger or

00:44:14,569 --> 00:44:20,779
debugger is incredibly strong however

00:44:18,700 --> 00:44:21,890
most of these tools have to work really

00:44:20,779 --> 00:44:26,859
hard to get their job done

00:44:21,890 --> 00:44:26,859
the PPI internals are not simple

00:44:26,900 --> 00:44:30,690
compile-time analysis is not available

00:44:29,400 --> 00:44:32,160
all of our compilations in

00:44:30,690 --> 00:44:35,640
document-based which is very flexible

00:44:32,160 --> 00:44:38,790
but it also incurs a lot of cost that we

00:44:35,640 --> 00:44:41,220
have to pay as developers we have poor

00:44:38,790 --> 00:44:43,710
IDE support I think it's important one

00:44:41,220 --> 00:44:45,780
comment that I spoke to Jim about the

00:44:43,710 --> 00:44:48,960
beginners of today are not the beginners

00:44:45,780 --> 00:44:51,510
of yesterday I don't use IDs it's it

00:44:48,960 --> 00:44:52,440
troubles me I have a very simple

00:44:51,510 --> 00:44:54,570
interface

00:44:52,440 --> 00:44:56,970
I am almost always on the terminal and I

00:44:54,570 --> 00:44:58,860
prefer vim and I edit through SSH that's

00:44:56,970 --> 00:45:01,290
it but you know what not everyone is

00:44:58,860 --> 00:45:04,110
like that and people nowadays expect IDs

00:45:01,290 --> 00:45:09,720
but we cannot give them good support for

00:45:04,110 --> 00:45:11,250
it which is a shame I'm not saying it

00:45:09,720 --> 00:45:15,000
doesn't exist I'm saying the support is

00:45:11,250 --> 00:45:17,520
poor we have a lot of ripples but none

00:45:15,000 --> 00:45:19,380
of them are really awesome they're not

00:45:17,520 --> 00:45:22,100
we need to have a high bar because the

00:45:19,380 --> 00:45:26,810
beginners of today have a high bar and

00:45:22,100 --> 00:45:26,810
the debugger is as comfortable as gdb

00:45:27,950 --> 00:45:31,980
personally I'm still waiting for proper

00:45:30,600 --> 00:45:33,900
tools for handling technical debt

00:45:31,980 --> 00:45:37,920
because we don't have them

00:45:33,900 --> 00:45:39,300
I wrote a rewriter for refuge oh that

00:45:37,920 --> 00:45:40,920
was not easy it was fun but it was not

00:45:39,300 --> 00:45:44,130
easy majorities actually comments to

00:45:40,920 --> 00:45:45,180
understand what I'm doing okay

00:45:44,130 --> 00:45:46,800
documentation we have a lot of

00:45:45,180 --> 00:45:48,720
documentation that's really good we have

00:45:46,800 --> 00:45:53,010
a lot of doctors it's great and it's

00:45:48,720 --> 00:45:55,200
very detailed however we have sometimes

00:45:53,010 --> 00:45:57,240
too much documentation somebody is

00:45:55,200 --> 00:45:59,520
outdated and something is really hard to

00:45:57,240 --> 00:46:02,160
come friend who has written sorry who

00:45:59,520 --> 00:46:07,280
has read here the documentation for the

00:46:02,160 --> 00:46:11,970
open function all gray-haired no sorry

00:46:07,280 --> 00:46:13,440
no it's it's it's a lot it is a lot it's

00:46:11,970 --> 00:46:14,610
kind of like a Google result you go

00:46:13,440 --> 00:46:19,020
through the main the first page and

00:46:14,610 --> 00:46:22,740
that's it you know libraries we have a

00:46:19,020 --> 00:46:24,690
bazillion of them technical term easy to

00:46:22,740 --> 00:46:26,490
create we have automatic documentation

00:46:24,690 --> 00:46:29,160
rendering tight integration with testing

00:46:26,490 --> 00:46:31,290
nothing compares to me to see Pam there

00:46:29,160 --> 00:46:33,240
is not a single language nowadays that

00:46:31,290 --> 00:46:35,940
can reach the level of what the team of

00:46:33,240 --> 00:46:38,270
medicine man did it's incredible they

00:46:35,940 --> 00:46:38,270
deserve it

00:46:39,610 --> 00:46:44,060
and whenever someone says oh you know we

00:46:42,080 --> 00:46:45,860
have a really good like support for your

00:46:44,060 --> 00:46:47,920
for your open source stuff nothing

00:46:45,860 --> 00:46:51,920
compares to this not a single thing

00:46:47,920 --> 00:46:54,320
however if we are honest not all of the

00:46:51,920 --> 00:46:56,420
modules are hard level high quality it's

00:46:54,320 --> 00:46:59,690
it's a bit tricky Sipan is old it's got

00:46:56,420 --> 00:47:03,560
a lot of cruft excess is it's not an

00:46:59,690 --> 00:47:05,180
awesome api i would even venture and if

00:47:03,560 --> 00:47:08,180
you really are more intimately familiar

00:47:05,180 --> 00:47:10,340
with it it isn't an api at all it's a

00:47:08,180 --> 00:47:11,390
bunch of functions there are public it's

00:47:10,340 --> 00:47:17,750
a bunch of macros that you could call

00:47:11,390 --> 00:47:19,040
but it's not a fully thought-out API we

00:47:17,750 --> 00:47:20,090
need more official libraries there are a

00:47:19,040 --> 00:47:22,790
lot of stuff that we don't have that we

00:47:20,090 --> 00:47:24,050
want to use pearl for I'm gonna give an

00:47:22,790 --> 00:47:27,380
example of machine learning because

00:47:24,050 --> 00:47:28,280
that's a lot of what I do nowadays for

00:47:27,380 --> 00:47:31,520
machine learning there are a lot of

00:47:28,280 --> 00:47:34,580
libraries tensorflow scikit-learn pandas

00:47:31,520 --> 00:47:38,330
numpy site pi torch pry towards chaos

00:47:34,580 --> 00:47:41,780
magnet h2o spark cuddley we have PD on

00:47:38,330 --> 00:47:43,340
video stats and they're very capable we

00:47:41,780 --> 00:47:45,320
have support from magnet we have support

00:47:43,340 --> 00:47:48,050
for a few other things but for the

00:47:45,320 --> 00:47:50,180
majority we don't this is why you would

00:47:48,050 --> 00:47:51,830
not do data science in pro and I work

00:47:50,180 --> 00:47:53,420
with data science nowadays I work with

00:47:51,830 --> 00:47:55,280
machine learning engineers and it's

00:47:53,420 --> 00:47:57,410
fascinating there are there are very

00:47:55,280 --> 00:47:59,720
very smart people and they have zero

00:47:57,410 --> 00:48:01,580
interest in specific languages that are

00:47:59,720 --> 00:48:06,820
actually care they're willing to use are

00:48:01,580 --> 00:48:09,770
okay and are has syntax that is not

00:48:06,820 --> 00:48:11,120
necessarily trivial you know we talked

00:48:09,770 --> 00:48:12,830
about Perl and you look at you go oh

00:48:11,120 --> 00:48:15,830
this is weird you know what Jews are

00:48:12,830 --> 00:48:17,330
it's also weird look at Haskell look at

00:48:15,830 --> 00:48:19,550
Erlang those aren't languages that are

00:48:17,330 --> 00:48:22,070
used now data scientists are really

00:48:19,550 --> 00:48:23,840
interesting they don't care if the tool

00:48:22,070 --> 00:48:26,480
does what they want they will use it

00:48:23,840 --> 00:48:28,730
they're disinterested which is fantastic

00:48:26,480 --> 00:48:31,550
but Perl cannot give them what they want

00:48:28,730 --> 00:48:32,720
so they won't use it and fascinating

00:48:31,550 --> 00:48:34,880
because machine learning specifically

00:48:32,720 --> 00:48:37,130
they have the core libraries that really

00:48:34,880 --> 00:48:39,590
need strong capabilities of the language

00:48:37,130 --> 00:48:40,820
like C C++ they need speed but then on

00:48:39,590 --> 00:48:42,560
top of it they have a lot of data

00:48:40,820 --> 00:48:45,670
munging do you know a language that is

00:48:42,560 --> 00:48:45,670
good with data munging

00:48:46,700 --> 00:48:55,140
like our okay so I'm wrapping up because

00:48:52,740 --> 00:48:59,490
I want to talk about the future I think

00:48:55,140 --> 00:49:02,040
we could have okay what if we have to

00:48:59,490 --> 00:49:04,950
reduce ambiguity what if we had best

00:49:02,040 --> 00:49:06,840
practices as default always what if we

00:49:04,950 --> 00:49:08,520
had one clear way to do most things and

00:49:06,840 --> 00:49:10,380
not to take away from your freedom of

00:49:08,520 --> 00:49:13,500
expression but giving you a clear answer

00:49:10,380 --> 00:49:18,110
to start from what if we had the same

00:49:13,500 --> 00:49:21,240
for parallelism 400 what if we had

00:49:18,110 --> 00:49:23,030
simple easy documentation to learn and

00:49:21,240 --> 00:49:25,370
to teach

00:49:23,030 --> 00:49:28,170
what if we have a comfortable debugger

00:49:25,370 --> 00:49:31,530
what if we had the great ripple that you

00:49:28,170 --> 00:49:33,660
want to use all the time what if you had

00:49:31,530 --> 00:49:35,310
better static analysis things like

00:49:33,660 --> 00:49:37,260
semantic rewriting you could deal with a

00:49:35,310 --> 00:49:40,130
very large code base I deal with a code

00:49:37,260 --> 00:49:43,310
base that has millions on top millions

00:49:40,130 --> 00:49:46,140
nine million lines of code thank you

00:49:43,310 --> 00:49:48,600
it's a lot do you know what it means to

00:49:46,140 --> 00:49:53,090
make a change across nine million lines

00:49:48,600 --> 00:49:56,250
of code I need tools we need tools

00:49:53,090 --> 00:49:58,050
better IDE support and proper lower

00:49:56,250 --> 00:50:01,110
level interface so this is the future

00:49:58,050 --> 00:50:03,060
that I think is definitely possible but

00:50:01,110 --> 00:50:03,780
it depends on a few things and this is

00:50:03,060 --> 00:50:06,080
what I'm here for

00:50:03,780 --> 00:50:09,270
first we need to make a decision

00:50:06,080 --> 00:50:11,190
anything it's not easy it's between or

00:50:09,270 --> 00:50:14,250
we maintenance mode or are we changing

00:50:11,190 --> 00:50:17,730
things do we want to only have stability

00:50:14,250 --> 00:50:19,650
or do we want to also have ability we

00:50:17,730 --> 00:50:21,750
need corporate drive something that

00:50:19,650 --> 00:50:23,820
we've avoided so much but you know what

00:50:21,750 --> 00:50:26,300
how many languages can you name that

00:50:23,820 --> 00:50:29,280
don't have any corporate language

00:50:26,300 --> 00:50:33,900
corporate company running running it how

00:50:29,280 --> 00:50:36,210
many Python go rust all of them are

00:50:33,900 --> 00:50:38,760
based on companies that drive it we

00:50:36,210 --> 00:50:40,230
don't do that it's all volunteer work

00:50:38,760 --> 00:50:41,940
but you know there's a problem with this

00:50:40,230 --> 00:50:43,920
corporate gives you give it that it

00:50:41,940 --> 00:50:44,280
could time you don't have dedicated time

00:50:43,920 --> 00:50:45,900
here

00:50:44,280 --> 00:50:47,040
corporate gives you a project vision

00:50:45,900 --> 00:50:49,530
because you have to because I have

00:50:47,040 --> 00:50:51,780
dedicated time corporate gives you

00:50:49,530 --> 00:50:53,160
commercial planning where are you taking

00:50:51,780 --> 00:50:54,270
it how are you marketing it one of the

00:50:53,160 --> 00:50:55,770
things that we're now gonna is marketing

00:50:54,270 --> 00:50:58,809
you know why none of us are companies

00:50:55,770 --> 00:51:00,369
it's not what we do

00:50:58,809 --> 00:51:02,890
and improve tooling because a company

00:51:00,369 --> 00:51:05,409
needs it but we don't do this with pearl

00:51:02,890 --> 00:51:07,359
we fought really hard for no company to

00:51:05,409 --> 00:51:09,400
actually own that thing but we love it

00:51:07,359 --> 00:51:11,709
and it's great but if we want it to

00:51:09,400 --> 00:51:16,209
succeed with companies we need to have

00:51:11,709 --> 00:51:18,369
also a drive of a company as well so

00:51:16,209 --> 00:51:21,759
okay here's what I'm offering I think it

00:51:18,369 --> 00:51:23,259
is possible to do first we will need to

00:51:21,759 --> 00:51:24,669
have a clear definition of the core team

00:51:23,259 --> 00:51:26,259
right now we don't really know who the

00:51:24,669 --> 00:51:27,519
core team of pearl is we know that there

00:51:26,259 --> 00:51:32,259
are a bunch of people I'm one of them

00:51:27,519 --> 00:51:34,089
but the rest it's pretty big we want to

00:51:32,259 --> 00:51:35,499
have a steering committee because if we

00:51:34,089 --> 00:51:38,169
can have a steering committee with TPF

00:51:35,499 --> 00:51:40,059
and with several stakeholders commercial

00:51:38,169 --> 00:51:42,009
stakeholders mm-hmm

00:51:40,059 --> 00:51:44,229
then we could really decide where we're

00:51:42,009 --> 00:51:47,650
taking the language and how we can have

00:51:44,229 --> 00:51:49,989
commercial leadership we can ask TPF to

00:51:47,650 --> 00:51:51,640
petition vendors for libraries so TPF

00:51:49,989 --> 00:51:53,349
could approach companies and say you

00:51:51,640 --> 00:51:56,199
wrote this thing we would like a pearl

00:51:53,349 --> 00:51:57,369
library instead of I don't know how many

00:51:56,199 --> 00:51:59,319
people know this usually what we do is

00:51:57,369 --> 00:52:03,299
open tickets in Google code it does not

00:51:59,319 --> 00:52:06,369
work no matter how many people star it

00:52:03,299 --> 00:52:08,619
we can collect all the libraries that we

00:52:06,369 --> 00:52:10,029
want to have ported that the vendors

00:52:08,619 --> 00:52:11,679
won't port but we know those are

00:52:10,029 --> 00:52:13,749
target's things that we want supported

00:52:11,679 --> 00:52:16,209
in Pearl so people could use pearl for

00:52:13,749 --> 00:52:19,630
those things that includes offering

00:52:16,209 --> 00:52:21,640
grants specifically for porting for

00:52:19,630 --> 00:52:23,979
features for fixes one idea that Jim had

00:52:21,640 --> 00:52:25,989
was we can offer grants

00:52:23,979 --> 00:52:30,999
sure but we can also have an entire

00:52:25,989 --> 00:52:32,289
hackathon dedicated to porting we can

00:52:30,999 --> 00:52:34,749
have rethought documentation

00:52:32,289 --> 00:52:37,479
documentation that starts from a

00:52:34,749 --> 00:52:38,109
beginner not from the implementation no

00:52:37,479 --> 00:52:40,299
one cares

00:52:38,109 --> 00:52:41,709
put it at the end we should have

00:52:40,299 --> 00:52:46,059
documentation that addresses people

00:52:41,709 --> 00:52:50,169
users beginners it needs to be simple

00:52:46,059 --> 00:52:52,989
needs to be consistent so I'm ending you

00:52:50,169 --> 00:52:55,239
with this what kind of problem we want

00:52:52,989 --> 00:52:56,769
to have and I want pearl that I could

00:52:55,239 --> 00:52:58,869
use for machine learning for graphic

00:52:56,769 --> 00:53:00,579
design for games for mobile stuff for

00:52:58,869 --> 00:53:06,130
high-end services for building scalable

00:53:00,579 --> 00:53:08,439
systems do you ish do wa naze machine

00:53:06,130 --> 00:53:10,749
learning do you want to be able to do

00:53:08,439 --> 00:53:13,229
that with pearl how about writing games

00:53:10,749 --> 00:53:13,229
with pearl

00:53:14,820 --> 00:53:19,330
that's that's kind of what I want like I

00:53:17,410 --> 00:53:22,210
want to do this I want to be able to do

00:53:19,330 --> 00:53:23,530
all these things with pearl I think it

00:53:22,210 --> 00:53:25,210
also goes to which kind of community do

00:53:23,530 --> 00:53:27,460
we want do you want a community where

00:53:25,210 --> 00:53:30,580
it's us and that's great I love everyone

00:53:27,460 --> 00:53:32,320
here I do but I also want more people I

00:53:30,580 --> 00:53:35,470
want a variety of people

00:53:32,320 --> 00:53:37,030
I want designers I want data scientists

00:53:35,470 --> 00:53:38,380
I want machine learning engineers I want

00:53:37,030 --> 00:53:40,870
mobile developers to come here because

00:53:38,380 --> 00:53:42,910
they have things to do with pearl I want

00:53:40,870 --> 00:53:47,170
more web more back-end more friends

00:53:42,910 --> 00:53:49,690
stuff so I think this is this is really

00:53:47,170 --> 00:53:51,040
what we want to do and if this is

00:53:49,690 --> 00:53:52,570
something that we want to do I can tell

00:53:51,040 --> 00:53:53,860
you this is what we're gonna work on for

00:53:52,570 --> 00:53:55,270
a while this is what I'm gonna work on

00:53:53,860 --> 00:53:55,990
for a while I hope to update you and how

00:53:55,270 --> 00:53:58,660
that's going

00:53:55,990 --> 00:54:02,530
I think this if this is something that

00:53:58,660 --> 00:54:04,000
we want to do then we could do it we

00:54:02,530 --> 00:54:06,370
have to put effort into this we have to

00:54:04,000 --> 00:54:09,850
know this is what we want to have for

00:54:06,370 --> 00:54:11,920
our language for a community that's it

00:54:09,850 --> 00:54:21,180
thank you very much

00:54:11,920 --> 00:54:21,180

YouTube URL: https://www.youtube.com/watch?v=4wKyNYs7eZw


