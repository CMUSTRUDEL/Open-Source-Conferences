Title: John Karr - "Home Lab With Linux KVM Stack":
Publication date: 2019-06-20
Playlist: TPC 2019 in Pittsburgh
Description: 
	Linux has good and stable built in Virtualization. Why pay for VMWare Workstation or use less stable and slower Virtual Box. An overview of the toolkit (KVM, libvirt, QEMU) that makes this possible and a walkthrough of getting a home lab running.
Captions: 
	00:00:00,530 --> 00:00:17,100
good morning we have John Carr speaking

00:00:04,770 --> 00:00:21,000
on home lab with KVM stack okay good

00:00:17,100 --> 00:00:25,189
morning can everybody hear me could

00:00:21,000 --> 00:00:29,699
everybody hear me if I'm standing it's

00:00:25,189 --> 00:00:33,199
Steve I don't know if you're

00:00:29,699 --> 00:00:33,199
with me or not the rest of the audience

00:00:34,489 --> 00:00:44,160
all right so our topic is the Linux

00:00:42,180 --> 00:00:48,050
kernel virtual machine machine and how

00:00:44,160 --> 00:00:48,050
you can do a home lab with it

00:00:53,539 --> 00:00:59,359
the KVM the Linux kernel-based

00:00:55,760 --> 00:01:01,250
hypervisor provides the hypervisor but

00:00:59,359 --> 00:01:03,890
without other components it doesn't

00:01:01,250 --> 00:01:07,100
really do a heck of a lot so we're going

00:01:03,890 --> 00:01:13,840
to talk about a stack that is built

00:01:07,100 --> 00:01:17,299
around KVL so you'll have the hypervisor

00:01:13,840 --> 00:01:22,399
qmu and libvirt which are your core

00:01:17,299 --> 00:01:24,380
components for getting this to work the

00:01:22,399 --> 00:01:28,130
first time I gave this talk I thought

00:01:24,380 --> 00:01:30,140
people wanted a how to accept the talk

00:01:28,130 --> 00:01:32,780
was actually fairly short and we spent a

00:01:30,140 --> 00:01:34,759
lot more time than the actual talk with

00:01:32,780 --> 00:01:37,600
questions about the basics of

00:01:34,759 --> 00:01:39,979
virtualization and containerization so

00:01:37,600 --> 00:01:41,479
this talk is a lot longer than the

00:01:39,979 --> 00:01:43,240
original talk because we're going to

00:01:41,479 --> 00:01:45,799
spend a lot of time talking about

00:01:43,240 --> 00:01:51,409
virtualization and containerization to

00:01:45,799 --> 00:01:52,909
get started with so the first thing you

00:01:51,409 --> 00:01:57,080
want to know is what is virtualization

00:01:52,909 --> 00:01:59,599
and that's emulation of an entire

00:01:57,080 --> 00:02:02,300
machine completely within another

00:01:59,599 --> 00:02:05,619
machine complete with its own file

00:02:02,300 --> 00:02:05,619
system and process tray

00:02:09,380 --> 00:02:16,380
virtualization can run multiple

00:02:12,090 --> 00:02:19,530
operating systems while containers can

00:02:16,380 --> 00:02:23,550
only run an operating system similar to

00:02:19,530 --> 00:02:30,780
that which they were built for so KVM

00:02:23,550 --> 00:02:39,480
qmu we can run bsd we can run Windows we

00:02:30,780 --> 00:02:43,320
can run some strange architecture but a

00:02:39,480 --> 00:02:45,330
container you build on a Red Hat system

00:02:43,320 --> 00:02:50,190
you never gonna pull that container up

00:02:45,330 --> 00:02:52,530
on a bsd system and qmu even supports

00:02:50,190 --> 00:02:54,960
alien Hardware emulation which won't get

00:02:52,530 --> 00:03:00,560
the advantage of KVM but you could

00:02:54,960 --> 00:03:00,560
actually be running an arm in emulation

00:03:02,510 --> 00:03:09,300
so now the next question is what is

00:03:04,940 --> 00:03:12,680
containerization containerization is

00:03:09,300 --> 00:03:17,610
about isolating your dependencies and

00:03:12,680 --> 00:03:19,830
encapsulating your application you can

00:03:17,610 --> 00:03:22,290
just copy a docker image to another host

00:03:19,830 --> 00:03:24,360
as I did at the beginning because this

00:03:22,290 --> 00:03:27,870
slide deck is actually running on a no

00:03:24,360 --> 00:03:32,459
js' image running on docker on my laptop

00:03:27,870 --> 00:03:35,090
here and all I had to do was copy the

00:03:32,459 --> 00:03:35,090
docker image

00:03:37,290 --> 00:03:43,920
so let's go over some key differences

00:03:39,640 --> 00:03:46,390
between the two technologies so

00:03:43,920 --> 00:03:49,959
virtualization is focused at the entire

00:03:46,390 --> 00:03:52,390
system level containerization is focused

00:03:49,959 --> 00:03:57,040
at a single applicant at a single

00:03:52,390 --> 00:03:58,650
application or on atomic components of

00:03:57,040 --> 00:04:02,799
an application not even the whole

00:03:58,650 --> 00:04:04,659
application really containers can be

00:04:02,799 --> 00:04:09,489
used like a lightweight virtual machine

00:04:04,659 --> 00:04:11,950
and this overlap space is what causes

00:04:09,489 --> 00:04:22,300
people to be really confused about the

00:04:11,950 --> 00:04:27,250
two technologies to demonstrate the

00:04:22,300 --> 00:04:30,490
isolation difference I had to I had no

00:04:27,250 --> 00:04:35,139
new Jace's processes running on a docker

00:04:30,490 --> 00:04:40,300
host I started a container running a

00:04:35,139 --> 00:04:44,200
node.js process and we can see we

00:04:40,300 --> 00:04:48,210
started with no results from grep that's

00:04:44,200 --> 00:04:52,930
me typing in that grep found nothing

00:04:48,210 --> 00:04:57,090
running docker and now the container

00:04:52,930 --> 00:04:57,090
host has a node.js process

00:04:59,350 --> 00:05:05,120
it's actually mapped differently inside

00:05:02,120 --> 00:05:11,570
the container by docker but it's still

00:05:05,120 --> 00:05:15,220
there on the host process tree and then

00:05:11,570 --> 00:05:23,170
when you stop the container we will get

00:05:15,220 --> 00:05:23,170
no node.js running on our container host

00:05:24,940 --> 00:05:33,170
but when we spawn a VM with KVM we're

00:05:29,420 --> 00:05:36,020
going to get a qmu process and a KVM

00:05:33,170 --> 00:05:43,120
process and you may even notice that the

00:05:36,020 --> 00:05:50,510
KVM process gets tied to the pit of the

00:05:43,120 --> 00:05:51,950
QEMU process but the nodejs process you

00:05:50,510 --> 00:05:55,190
don't see that on the host

00:05:51,950 --> 00:06:02,210
it's totally contained within those two

00:05:55,190 --> 00:06:06,280
KVM and QEMU processes so some of the

00:06:02,210 --> 00:06:09,290
containers or the common container

00:06:06,280 --> 00:06:12,860
technology you'll hear about is LXE

00:06:09,290 --> 00:06:15,380
which is really not that popular it's a

00:06:12,860 --> 00:06:19,160
pretty it emulates a lightweight virtual

00:06:15,380 --> 00:06:20,600
machine and unfortunately a few years

00:06:19,160 --> 00:06:22,490
ago at work when we were looking at

00:06:20,600 --> 00:06:25,010
containerization a lightweight virtual

00:06:22,490 --> 00:06:26,990
machine is really what we wanted so I

00:06:25,010 --> 00:06:28,910
didn't start playing with docker back

00:06:26,990 --> 00:06:32,600
then we used LXE because we basically

00:06:28,910 --> 00:06:34,910
wanted one big VM that had a whole lot

00:06:32,600 --> 00:06:36,620
of legacy applications and containers so

00:06:34,910 --> 00:06:38,300
that for compliance purposes if an

00:06:36,620 --> 00:06:41,410
auditor walked in the door we could turn

00:06:38,300 --> 00:06:41,410
them back on and

00:06:45,030 --> 00:06:55,570
doc what well the the only time they

00:06:53,860 --> 00:06:57,280
ever good Iran was if an audit or walked

00:06:55,570 --> 00:06:59,620
in the door and said I want to see that

00:06:57,280 --> 00:07:01,720
application it was a retired legacy

00:06:59,620 --> 00:07:03,670
application so it's a completely

00:07:01,720 --> 00:07:06,670
different deployment scenario than why

00:07:03,670 --> 00:07:10,180
people are using docker dr. would have

00:07:06,670 --> 00:07:13,920
done the job as well as lxa but alexei

00:07:10,180 --> 00:07:18,280
was the containerization that was

00:07:13,920 --> 00:07:21,930
engineered for the particular problem we

00:07:18,280 --> 00:07:25,660
had but is otherwise a useless

00:07:21,930 --> 00:07:27,730
containerization because it doesn't have

00:07:25,660 --> 00:07:31,260
the uh it doesn't do the things that

00:07:27,730 --> 00:07:31,260
actually make doc are interesting

00:07:32,760 --> 00:07:39,190
kubernetes is an Orchestrator and it's

00:07:37,540 --> 00:07:40,870
really geared towards very large

00:07:39,190 --> 00:07:44,790
environments and does wonderful things

00:07:40,870 --> 00:07:44,790
in really large environments

00:07:47,160 --> 00:07:53,590
so the key philosophy of

00:07:50,490 --> 00:07:57,970
containerization which is why docker is

00:07:53,590 --> 00:08:02,610
a lot more useful in LXE is the micro

00:07:57,970 --> 00:08:05,020
services concept and that is about

00:08:02,610 --> 00:08:09,220
isolating every component of the

00:08:05,020 --> 00:08:14,470
application to the smallest level of

00:08:09,220 --> 00:08:16,030
detail it can be isolated to you group

00:08:14,470 --> 00:08:20,050
containers to make a complete

00:08:16,030 --> 00:08:23,230
application to give you a trivial

00:08:20,050 --> 00:08:26,710
example if you're trying to deploy a

00:08:23,230 --> 00:08:30,070
wordpress and container you would make

00:08:26,710 --> 00:08:34,600
three containers you would do a PHP fpm

00:08:30,070 --> 00:08:39,060
container a Maria DB container and a

00:08:34,600 --> 00:08:39,060
webserver container for Apache or nginx

00:08:40,570 --> 00:08:49,170
if you build a single word problem if

00:08:44,529 --> 00:08:49,170
you build a single word press container

00:08:49,290 --> 00:08:56,500
that might be convenient for copying

00:08:52,300 --> 00:09:01,329
that instance of WordPress around but

00:08:56,500 --> 00:09:03,880
you're not benefiting because if you

00:09:01,329 --> 00:09:08,430
need it to scale that and the web server

00:09:03,880 --> 00:09:13,870
could handle a hundred times as many

00:09:08,430 --> 00:09:15,639
requests as the back-end pairing and you

00:09:13,870 --> 00:09:17,980
really want to the piece when you get

00:09:15,639 --> 00:09:20,620
loaded you need to scale up is the PHP

00:09:17,980 --> 00:09:27,610
fpm piece you can't do that in the

00:09:20,620 --> 00:09:29,230
monolithic model so of course your

00:09:27,610 --> 00:09:33,850
containers can only be shipped on

00:09:29,230 --> 00:09:36,819
similar architectures however if you're

00:09:33,850 --> 00:09:40,290
looking at a virtual machine if you have

00:09:36,819 --> 00:09:42,940
a VirtualBox image you can convert it

00:09:40,290 --> 00:09:45,579
well you can convert the hard drive and

00:09:42,940 --> 00:09:49,680
then recreate the setup of the virtual

00:09:45,579 --> 00:09:54,459
machine and run that on KVM or VMware

00:09:49,680 --> 00:09:56,589
and if you're using containerization to

00:09:54,459 --> 00:10:02,069
produce vm light it will consume less

00:09:56,589 --> 00:10:02,069
resources within a full virtual machine

00:10:05,830 --> 00:10:16,490
so VM light is just a middle paradigm so

00:10:12,940 --> 00:10:22,720
you want to deploy WordPress and instead

00:10:16,490 --> 00:10:28,100
of building a whole virtual machine or

00:10:22,720 --> 00:10:31,190
deploying three containers you build

00:10:28,100 --> 00:10:32,810
everything into one container so you're

00:10:31,190 --> 00:10:37,220
using the container like a virtual

00:10:32,810 --> 00:10:40,880
machine and the advantage is you're

00:10:37,220 --> 00:10:44,270
getting less overhead than a virtual

00:10:40,880 --> 00:10:45,800
machine you can stick a whole bunch of

00:10:44,270 --> 00:10:48,590
these images in one virtual machine

00:10:45,800 --> 00:10:54,140
which is I did I did in the case where

00:10:48,590 --> 00:10:58,640
we used LXE but it's a limited use case

00:10:54,140 --> 00:11:00,530
the you lose the advantage that a

00:10:58,640 --> 00:11:07,040
virtualized environment has of the

00:11:00,530 --> 00:11:08,480
complete isolation you gain some

00:11:07,040 --> 00:11:11,660
resources because you don't have the

00:11:08,480 --> 00:11:18,170
overhead of spinning up a complete OS in

00:11:11,660 --> 00:11:20,960
the container it's not the common use of

00:11:18,170 --> 00:11:23,510
container is a shion's people people

00:11:20,960 --> 00:11:25,280
that are going to dock or in a big way

00:11:23,510 --> 00:11:32,420
are doing it because they're adopting a

00:11:25,280 --> 00:11:35,150
microservices architecture and if you're

00:11:32,420 --> 00:11:37,550
doing a serious WordPress deployment the

00:11:35,150 --> 00:11:39,410
Morea DB piece would probably be the

00:11:37,550 --> 00:11:42,230
piece you decide not to containerize

00:11:39,410 --> 00:11:44,150
because containers have issues with

00:11:42,230 --> 00:11:46,700
persistency they're very transient by

00:11:44,150 --> 00:11:49,339
nature and the database is like holding

00:11:46,700 --> 00:11:51,200
a lot of persistent storage and it

00:11:49,339 --> 00:11:53,480
probably makes more sense to go a more

00:11:51,200 --> 00:11:57,640
traditional way to build your database

00:11:53,480 --> 00:12:01,150
server because it's really tied to

00:11:57,640 --> 00:12:01,150
non-transient storage

00:12:04,200 --> 00:12:12,690
so which is better containers solve

00:12:09,709 --> 00:12:17,279
deployment issues they're very good at

00:12:12,690 --> 00:12:20,269
scaling so in my wordpress example when

00:12:17,279 --> 00:12:23,610
the stack gets busy what probably

00:12:20,269 --> 00:12:28,370
stresses the most is the PHP fpm part

00:12:23,610 --> 00:12:31,680
you can spin up to PHP fpm containers

00:12:28,370 --> 00:12:34,079
tripling your capacity you do have to

00:12:31,680 --> 00:12:38,180
change your web server configuration so

00:12:34,079 --> 00:12:38,180
that it knows it's load balancing but

00:12:38,899 --> 00:12:46,410
you don't have to spit up three and

00:12:43,079 --> 00:12:49,500
higher stacks which also you that have

00:12:46,410 --> 00:12:52,560
the problem of they the databases need

00:12:49,500 --> 00:12:58,740
to be in sync when you're doing three

00:12:52,560 --> 00:13:01,370
full stacks on the other hand your

00:12:58,740 --> 00:13:01,370
virtual machines

00:13:07,050 --> 00:13:13,290
I this talk is primarily on setting up

00:13:10,800 --> 00:13:15,870
the home lab with KVM and we will be

00:13:13,290 --> 00:13:20,130
setting up the home lab but there's just

00:13:15,870 --> 00:13:25,460
no way that there was space to do full

00:13:20,130 --> 00:13:28,200
demonstrations of docker so

00:13:25,460 --> 00:13:34,320
virtualization virtualization as I've

00:13:28,200 --> 00:13:38,130
mentioned gets you full but they do cost

00:13:34,320 --> 00:13:39,630
more resources for running virtual

00:13:38,130 --> 00:13:42,030
machines can do a full desktop

00:13:39,630 --> 00:13:47,090
environment which is something you can't

00:13:42,030 --> 00:13:51,360
do in containerization and they support

00:13:47,090 --> 00:13:54,690
mixed s-- architectures and operating

00:13:51,360 --> 00:14:03,810
systems completely independent of the

00:13:54,690 --> 00:14:05,010
host so you have some projects you want

00:14:03,810 --> 00:14:08,670
to try some different Linux

00:14:05,010 --> 00:14:10,860
distributions the one you're using you

00:14:08,670 --> 00:14:15,660
actually need to test that you can do

00:14:10,860 --> 00:14:18,090
something on BSD as well as Linux you

00:14:15,660 --> 00:14:20,040
are trying to build your own kubernetes

00:14:18,090 --> 00:14:23,850
cluster and you realize that you want

00:14:20,040 --> 00:14:25,500
like success to do this and what you

00:14:23,850 --> 00:14:28,680
need is a virtualized lab because you

00:14:25,500 --> 00:14:31,760
don't want six actual boxes to build

00:14:28,680 --> 00:14:31,760
your kubernetes lab

00:14:37,440 --> 00:14:43,250
and actually I think that slide was out

00:14:39,690 --> 00:14:43,250
of order I apologize for that

00:14:48,640 --> 00:14:54,940
so let's talk about the virtualization

00:14:51,040 --> 00:14:57,370
platform the fundamental functions of

00:14:54,940 --> 00:15:00,160
your virtualization are carried out by

00:14:57,370 --> 00:15:03,149
your hypervisor hypervisor creates your

00:15:00,160 --> 00:15:09,399
guest instances and allocates resources

00:15:03,149 --> 00:15:12,810
to the guests so let's compare KVM to

00:15:09,399 --> 00:15:17,980
some other virtualization platforms

00:15:12,810 --> 00:15:20,589
so first is VMware which is kind of the

00:15:17,980 --> 00:15:23,070
big player generally considered the best

00:15:20,589 --> 00:15:26,339
virtualization platform out there and

00:15:23,070 --> 00:15:33,130
kind of expensive

00:15:26,339 --> 00:15:35,829
KVM is free VMware has a lot of tooling

00:15:33,130 --> 00:15:42,060
which is very nice tooling making it

00:15:35,829 --> 00:15:45,700
easy and almost fun to manage a VM has

00:15:42,060 --> 00:15:47,890
weaker tooling and more command-line e

00:15:45,700 --> 00:15:51,600
stuff and VMware has lots of command

00:15:47,890 --> 00:15:51,600
line II stuff if you need to get there

00:15:52,709 --> 00:16:03,820
for the corporate market the advantages

00:15:58,329 --> 00:16:07,870
of the VMware stuff outweigh the cost

00:16:03,820 --> 00:16:11,019
savings which keeps VMware dominant

00:16:07,870 --> 00:16:14,320
where you seek a VM used most heavily

00:16:11,019 --> 00:16:17,620
Zin really large environments where the

00:16:14,320 --> 00:16:20,709
VMware bill would be like like could you

00:16:17,620 --> 00:16:23,170
imagine what AWS is bill for VMware

00:16:20,709 --> 00:16:28,480
would be if they used VMware instead of

00:16:23,170 --> 00:16:36,399
k vm to run AWS yeah you'd want to own

00:16:28,480 --> 00:16:39,790
VMware stock not Amazon stock but for

00:16:36,399 --> 00:16:41,110
your lab a small organization it's going

00:16:39,790 --> 00:16:45,300
to be pretty easy to get the

00:16:41,110 --> 00:16:47,949
functionality you need out of k vm and

00:16:45,300 --> 00:16:51,420
you're not gonna have to deal with the

00:16:47,949 --> 00:16:51,420
annual vmware licensing

00:16:55,520 --> 00:17:03,980
so another really popular virtualization

00:16:59,600 --> 00:17:07,970
platform is VirtualBox in terms of

00:17:03,980 --> 00:17:09,890
performance and stability almost nobody

00:17:07,970 --> 00:17:15,559
runs VirtualBox is a production

00:17:09,890 --> 00:17:21,170
virtualization server but VirtualBox is

00:17:15,559 --> 00:17:25,400
multi platform and a lot of development

00:17:21,170 --> 00:17:27,829
tools like vagrant mini cube will

00:17:25,400 --> 00:17:29,840
default to VirtualBox if you're

00:17:27,829 --> 00:17:31,610
following along a tutorial you will

00:17:29,840 --> 00:17:35,090
frequently find that there's a vagrant

00:17:31,610 --> 00:17:43,300
image to spin up which will be a

00:17:35,090 --> 00:17:46,610
VirtualBox vagrant image so

00:17:43,300 --> 00:17:48,440
unfortunately in this case being on KVM

00:17:46,610 --> 00:17:50,240
is extra work because you're either

00:17:48,440 --> 00:17:53,390
gonna have to do without the pre

00:17:50,240 --> 00:17:56,980
provided vagrant image or go through a

00:17:53,390 --> 00:17:59,360
whole bunch of steps to get that

00:17:56,980 --> 00:18:05,780
extracted and converted to a KVM

00:17:59,360 --> 00:18:09,860
compatible image couple of others BSD

00:18:05,780 --> 00:18:12,230
has beehive which seems to be a

00:18:09,860 --> 00:18:16,870
reasonably good virtualization

00:18:12,230 --> 00:18:20,630
implementation Xen was really popular

00:18:16,870 --> 00:18:23,600
early in the days of virtualization but

00:18:20,630 --> 00:18:27,410
it's really falling out of flavor so Zen

00:18:23,600 --> 00:18:31,370
required compilation of a separate

00:18:27,410 --> 00:18:34,400
kernel because it ran with something

00:18:31,370 --> 00:18:35,840
called para virtualization so the guests

00:18:34,400 --> 00:18:42,730
and the hosts were really sharing the

00:18:35,840 --> 00:18:42,730
same kernel it was bare metal

00:18:44,310 --> 00:18:48,600
and everybody that was using zen has

00:18:46,920 --> 00:18:50,900
pretty much switched to KVM at this

00:18:48,600 --> 00:18:50,900
point

00:18:55,549 --> 00:19:01,039
and the final one I'm going to mention

00:18:58,470 --> 00:19:04,110
is hyper-v which comes from Microsoft

00:19:01,039 --> 00:19:07,140
hyper-v is actually not a bad hypervisor

00:19:04,110 --> 00:19:09,900
it actually performs fairly well it has

00:19:07,140 --> 00:19:11,970
reasonable tooling but it's life is

00:19:09,900 --> 00:19:15,120
horribly complicated by being a service

00:19:11,970 --> 00:19:17,429
on a Windows server when you patch your

00:19:15,120 --> 00:19:21,390
Windows server your hyper-v is going

00:19:17,429 --> 00:19:24,950
down Windows dies for some other reason

00:19:21,390 --> 00:19:24,950
your hyper-v is going down

00:19:30,990 --> 00:19:37,890
so now we're finally going to talk about

00:19:34,549 --> 00:19:46,350
the stack we're here to figure out how

00:19:37,890 --> 00:19:49,620
to build in our home lab so the QEMU

00:19:46,350 --> 00:19:51,690
piece provides full system emulation and

00:19:49,620 --> 00:19:54,529
software and this piece has been around

00:19:51,690 --> 00:19:54,529
for almost two decades

00:19:54,890 --> 00:20:03,059
it emulates on its own various

00:20:00,270 --> 00:20:06,679
architectures in software which is how

00:20:03,059 --> 00:20:09,630
it can run arm and some less well known

00:20:06,679 --> 00:20:11,820
physical architectures completely an

00:20:09,630 --> 00:20:15,179
emulation when you're emulating an

00:20:11,820 --> 00:20:23,429
architecture and software this is a lot

00:20:15,179 --> 00:20:29,549
slower than native but when paired with

00:20:23,429 --> 00:20:37,830
a hypervisor such as Zen or KVM it gets

00:20:29,549 --> 00:20:42,899
near native performance libvirt is a

00:20:37,830 --> 00:20:45,179
toolkit for managing virtualization it's

00:20:42,899 --> 00:20:49,559
got an API that's accessible from almost

00:20:45,179 --> 00:20:52,740
every programming language it's got

00:20:49,559 --> 00:20:55,190
support for a lot of hypervisors on the

00:20:52,740 --> 00:20:55,190
back end

00:20:55,370 --> 00:21:00,330
it runs on just about every platform

00:20:58,890 --> 00:21:07,649
that you might be running a hypervisor

00:21:00,330 --> 00:21:11,940
on and now KVM KVM gives us close to

00:21:07,649 --> 00:21:15,090
bare metal performance benchmarking

00:21:11,940 --> 00:21:19,760
typically estimates about a five percent

00:21:15,090 --> 00:21:19,760
overhead 4k VM

00:21:20,660 --> 00:21:24,320
not all benchmarks agree there are a few

00:21:22,970 --> 00:21:26,440
benchmarks that people have done that

00:21:24,320 --> 00:21:30,320
are showing a bigger performance hit and

00:21:26,440 --> 00:21:33,050
other things like disk utilization they

00:21:30,320 --> 00:21:40,600
can't measure the performance it that's

00:21:33,050 --> 00:21:43,169
too trivial but

00:21:40,600 --> 00:21:43,169
yeah

00:21:59,750 --> 00:22:05,760
the

00:22:02,360 --> 00:22:06,930
the typical experience has been that

00:22:05,760 --> 00:22:10,110
you're not getting very much of a

00:22:06,930 --> 00:22:13,560
performance hit that KVM VMware and

00:22:10,110 --> 00:22:15,840
hyper-v are a really negligible

00:22:13,560 --> 00:22:18,120
performance it okay with hyper-v you've

00:22:15,840 --> 00:22:20,610
got a whole Windows server that's taking

00:22:18,120 --> 00:22:23,400
up three gigs of your hosts RAM just to

00:22:20,610 --> 00:22:29,490
run hyper-v but ignoring that three gigs

00:22:23,400 --> 00:22:33,480
of ram that that Windows Server 8 they

00:22:29,490 --> 00:22:37,140
all in practice you just don't notice

00:22:33,480 --> 00:22:38,910
the difference it's small and I don't

00:22:37,140 --> 00:22:41,130
spend hours and hours going through

00:22:38,910 --> 00:22:43,350
benchmarks I just like look at some

00:22:41,130 --> 00:22:45,570
reason of them and say ok that's good

00:22:43,350 --> 00:22:48,090
enough if people who are spending the

00:22:45,570 --> 00:22:52,140
time to do this or generally concluding

00:22:48,090 --> 00:22:53,810
that the it's a small hit I'm going to

00:22:52,140 --> 00:22:57,420
accept that it's a small hat especially

00:22:53,810 --> 00:22:59,220
since I run KVM and I don't notice my

00:22:57,420 --> 00:23:02,610
virtual machines being significantly

00:22:59,220 --> 00:23:04,920
slower I will say that when I run

00:23:02,610 --> 00:23:08,210
VirtualBox I noticed my virtual machines

00:23:04,920 --> 00:23:08,210
being significantly slower

00:23:12,200 --> 00:23:18,630
KVM has been before ported to the arm

00:23:15,600 --> 00:23:20,370
but the benchmarking I looked on that

00:23:18,630 --> 00:23:22,440
said it's actually a lot slower there

00:23:20,370 --> 00:23:26,850
but I never had reason to try and get a

00:23:22,440 --> 00:23:31,230
KVM system up on a Raspberry Pi so I'll

00:23:26,850 --> 00:23:34,170
just take their word for it I don't

00:23:31,230 --> 00:23:35,990
really have see any major need for it at

00:23:34,170 --> 00:23:39,780
this point

00:23:35,990 --> 00:23:44,100
on the other hand somebody might be yeah

00:23:39,780 --> 00:23:46,170
my workout my computing power is a lot

00:23:44,100 --> 00:23:49,020
cheaper per watt if I build this huge

00:23:46,170 --> 00:23:50,670
rack of raspberry PI's and then maybe

00:23:49,020 --> 00:23:53,340
they're trying to do a kubernetes

00:23:50,670 --> 00:23:56,220
cluster but see they're going to be

00:23:53,340 --> 00:24:04,320
doing that with containerization and not

00:23:56,220 --> 00:24:06,290
virtualization so KVM is widely

00:24:04,320 --> 00:24:09,300
considered to be both stable and

00:24:06,290 --> 00:24:12,930
performant as evidenced by the fact that

00:24:09,300 --> 00:24:17,970
Google and Amazon's clouds both are

00:24:12,930 --> 00:24:24,090
primarily backed by it a lot of the

00:24:17,970 --> 00:24:27,780
smaller independent VPS services moved

00:24:24,090 --> 00:24:30,360
from Xen to KVM over the last decade so

00:24:27,780 --> 00:24:35,070
the node which was originally a big Zen

00:24:30,360 --> 00:24:36,480
shop a couple years ago milah nodes had

00:24:35,070 --> 00:24:40,850
to be moved because they were being

00:24:36,480 --> 00:24:40,850
moved to a new host running KVM

00:24:40,940 --> 00:24:45,270
digitalocean

00:24:42,270 --> 00:24:49,170
always been KVM couple others that are

00:24:45,270 --> 00:24:53,610
using KVM today voltar dreamhost

00:24:49,170 --> 00:24:54,480
Bluehost Hostgator Rackspace bought

00:24:53,610 --> 00:24:57,320
slicehost

00:24:54,480 --> 00:25:00,990
who wore zen based and converted them to

00:24:57,320 --> 00:25:02,370
vmware but Rackspace is an unusual space

00:25:00,990 --> 00:25:04,590
where a lot of their customers are

00:25:02,370 --> 00:25:10,770
probably willing to pay extra to know

00:25:04,590 --> 00:25:14,700
that their VM is running on VMware the

00:25:10,770 --> 00:25:16,440
weak spot of KVM from things I've done

00:25:14,700 --> 00:25:21,750
is video performance when you're trying

00:25:16,440 --> 00:25:23,970
to emulate that workstation so if you're

00:25:21,750 --> 00:25:24,920
trying to run a graphics intensive

00:25:23,970 --> 00:25:29,390
window

00:25:24,920 --> 00:25:31,490
game in virtualization and KVM you are

00:25:29,390 --> 00:25:35,240
going to be painfully unhappy there is a

00:25:31,490 --> 00:25:36,530
workaround you can install an extra

00:25:35,240 --> 00:25:38,570
graphics card and you're able to

00:25:36,530 --> 00:25:42,440
actually assign the graphics card to the

00:25:38,570 --> 00:25:44,090
virtual machine but at that point for me

00:25:42,440 --> 00:25:47,330
anyway it's just easier to keep a

00:25:44,090 --> 00:25:50,200
Windows box on the desk next to my Linux

00:25:47,330 --> 00:25:50,200
desktop

00:25:59,179 --> 00:26:09,080
so now we're finally ready to start

00:26:01,849 --> 00:26:11,450
looking at building our lab you might

00:26:09,080 --> 00:26:17,269
want to take a multi-core desktop or

00:26:11,450 --> 00:26:21,349
dedicate a box and then manage that from

00:26:17,269 --> 00:26:25,989
your workstation I currently have a home

00:26:21,349 --> 00:26:29,659
server built on Debian stretch and a

00:26:25,989 --> 00:26:36,259
workstation built on a Bionic based

00:26:29,659 --> 00:26:38,899
distribution and for screenshotting some

00:26:36,259 --> 00:26:41,570
stuff you'll see later on I built a box

00:26:38,899 --> 00:26:45,139
with cosmic which is a slightly newer

00:26:41,570 --> 00:26:53,570
version of Ubuntu but now no longer the

00:26:45,139 --> 00:26:56,690
current version so the steps are Debian

00:26:53,570 --> 00:26:58,609
centric so they're largely going to be

00:26:56,690 --> 00:27:01,519
identical whether you're on Debu nor a

00:26:58,609 --> 00:27:04,039
bun too but if you're on Red Hat or arch

00:27:01,519 --> 00:27:11,479
you're gonna have to do translation of

00:27:04,039 --> 00:27:13,190
package names etc and most commands

00:27:11,479 --> 00:27:15,830
you're gonna need need to be run as root

00:27:13,190 --> 00:27:17,960
I'm generally going to omit placing the

00:27:15,830 --> 00:27:23,509
sudo before the command when that needs

00:27:17,960 --> 00:27:26,779
to be done so the very first step is

00:27:23,509 --> 00:27:31,849
checking your bios now a bun too has a

00:27:26,779 --> 00:27:34,339
CPU checker you can install and then KVM

00:27:31,849 --> 00:27:37,759
okay will tell you if the extensions you

00:27:34,339 --> 00:27:40,969
need are turned on if you're on another

00:27:37,759 --> 00:27:43,599
platform or even Debian you're gonna

00:27:40,969 --> 00:27:47,059
have to go into your BIOS and if the

00:27:43,599 --> 00:27:48,950
checker fails which unless you've

00:27:47,059 --> 00:27:52,969
previously done virtualization on that

00:27:48,950 --> 00:27:55,999
machine it is almost guaranteed that by

00:27:52,969 --> 00:27:57,739
default virtualization is off you're

00:27:55,999 --> 00:27:59,419
going to be going through a lot of BIOS

00:27:57,739 --> 00:28:04,580
screen gives yourself half an hour to

00:27:59,419 --> 00:28:09,099
find the item you want the names are

00:28:04,580 --> 00:28:12,079
typically something like amd-v until

00:28:09,099 --> 00:28:12,800
virtualization but each motherboard

00:28:12,079 --> 00:28:14,630
manaphy

00:28:12,800 --> 00:28:16,970
sure can call it something slightly

00:28:14,630 --> 00:28:25,700
different and it will be buried it will

00:28:16,970 --> 00:28:29,570
be on the third level of some menu once

00:28:25,700 --> 00:28:31,640
that's done you're going to need to get

00:28:29,570 --> 00:28:38,810
something called bridged networking set

00:28:31,640 --> 00:28:45,020
up and you're gonna need to configure

00:28:38,810 --> 00:28:47,120
this by hand so I haven't talked about

00:28:45,020 --> 00:28:52,100
bridge networking because it's a

00:28:47,120 --> 00:28:55,790
relatively small hop in the total scheme

00:28:52,100 --> 00:28:59,900
of what you need to do so it's a way of

00:28:55,790 --> 00:29:03,770
connecting to Ethernet segments together

00:28:59,900 --> 00:29:05,420
in a protocol independent way packets

00:29:03,770 --> 00:29:07,810
are forwarded based on the Ethernet

00:29:05,420 --> 00:29:07,810
address

00:29:11,940 --> 00:29:18,300
and it's like all the traffic going

00:29:15,540 --> 00:29:22,530
through your localized bridge networking

00:29:18,300 --> 00:29:25,830
is going through a bridge at layer two

00:29:22,530 --> 00:29:29,430
and you'll see that when you set up your

00:29:25,830 --> 00:29:31,980
virtual machines later on that you get a

00:29:29,430 --> 00:29:33,780
unique MAC address for every virtual

00:29:31,980 --> 00:29:40,740
machine because it's going to be binding

00:29:33,780 --> 00:29:43,370
its own tcp/ip stack to that virtual NIC

00:29:40,740 --> 00:29:43,370
that it has

00:29:53,710 --> 00:29:57,240
- hold on

00:30:00,110 --> 00:30:02,860
okay

00:30:03,679 --> 00:30:09,480
so the next thing you're going to worry

00:30:06,389 --> 00:30:11,340
about is name resolution and it looks

00:30:09,480 --> 00:30:14,309
like my slides ended up slightly out of

00:30:11,340 --> 00:30:16,830
order here so I'm gonna go in slide

00:30:14,309 --> 00:30:23,970
order so we'll be back to bridging in

00:30:16,830 --> 00:30:28,350
two slides most newer systems have been

00:30:23,970 --> 00:30:32,519
switching to system D resolved it's

00:30:28,350 --> 00:30:35,159
fairly easy to edit name resolution and

00:30:32,519 --> 00:30:39,960
actually I think I'd better go ahead to

00:30:35,159 --> 00:30:42,659
setting up bridging so the first thing

00:30:39,960 --> 00:30:47,669
you need to do is to make notes on your

00:30:42,659 --> 00:30:52,909
IP configuration and the command IP

00:30:47,669 --> 00:30:55,320
address will show you your settings and

00:30:52,909 --> 00:30:58,350
more importantly it will tell you what

00:30:55,320 --> 00:31:00,929
your system calls your interface because

00:30:58,350 --> 00:31:10,769
of the so called predictable names

00:31:00,929 --> 00:31:14,779
feature which is a decision to name

00:31:10,769 --> 00:31:17,279
interfaces based on how the system

00:31:14,779 --> 00:31:23,610
perceives their position on the physical

00:31:17,279 --> 00:31:27,120
bus so most of us would have preferred a

00:31:23,610 --> 00:31:31,409
predictable names based on maybe MAC

00:31:27,120 --> 00:31:33,059
address because we might actually know

00:31:31,409 --> 00:31:35,010
what the MAC address of our neck is

00:31:33,059 --> 00:31:38,370
whereas we have no clue about where it

00:31:35,010 --> 00:31:40,679
is on the physical bus so to the human

00:31:38,370 --> 00:31:44,299
unless you're somebody who has like a

00:31:40,679 --> 00:31:47,279
thousand of an identical model of server

00:31:44,299 --> 00:31:50,059
the bus based predictable names are

00:31:47,279 --> 00:31:50,059
unpredictable

00:31:53,210 --> 00:31:58,019
then once you have your information

00:31:55,350 --> 00:32:02,249
written down because you're going to be

00:31:58,019 --> 00:32:05,570
going to a static configuration you need

00:32:02,249 --> 00:32:09,690
to install a couple of utilities and

00:32:05,570 --> 00:32:13,049
then you need to disable network manager

00:32:09,690 --> 00:32:17,450
if you're on a desktop and the mask

00:32:13,049 --> 00:32:20,490
command tells system D that E if

00:32:17,450 --> 00:32:23,730
something requests that it start network

00:32:20,490 --> 00:32:27,179
manager that system D will lie and say

00:32:23,730 --> 00:32:29,039
it has started which is very important

00:32:27,179 --> 00:32:32,039
because even if you disable something if

00:32:29,039 --> 00:32:35,009
something requests another service

00:32:32,039 --> 00:32:37,289
that's not set to start automatically

00:32:35,009 --> 00:32:42,330
system D will still start it when it's

00:32:37,289 --> 00:32:45,720
mask system D will lie and you want it

00:32:42,330 --> 00:32:47,690
to lie because you can't uninstall

00:32:45,720 --> 00:32:49,740
network manager in a desktop environment

00:32:47,690 --> 00:32:52,200
unless you want to rebuild that

00:32:49,740 --> 00:32:57,149
environment by hand because they all

00:32:52,200 --> 00:33:00,360
make network manager dependency at the

00:32:57,149 --> 00:33:01,919
same time if Network manager is running

00:33:00,360 --> 00:33:04,679
even if it's not managing your

00:33:01,919 --> 00:33:07,200
interfaces the little thing in your

00:33:04,679 --> 00:33:09,929
interface that shows you your networking

00:33:07,200 --> 00:33:13,649
will show you what it would be a system

00:33:09,929 --> 00:33:16,769
D if network manager was running not

00:33:13,649 --> 00:33:19,259
when you disable it it tells you your

00:33:16,769 --> 00:33:21,830
network is unconfigured which is less

00:33:19,259 --> 00:33:21,830
confusing

00:33:31,230 --> 00:33:34,910
okay that's

00:33:37,669 --> 00:33:44,829
so you'll need to edit an Etsy network

00:33:39,919 --> 00:33:48,320
interfaces and this is what a bridge

00:33:44,829 --> 00:33:50,239
configuration will look like you'll will

00:33:48,320 --> 00:33:53,899
want to take a note on the location of

00:33:50,239 --> 00:33:56,659
my slides so that you can refer back to

00:33:53,899 --> 00:33:59,359
this because well some of you are taking

00:33:56,659 --> 00:34:01,399
pictures of the screen it's probably

00:33:59,359 --> 00:34:10,629
easier to just download the PDF of the

00:34:01,399 --> 00:34:13,369
slides once your bridge is configured

00:34:10,629 --> 00:34:15,799
you need to install virtualization and

00:34:13,369 --> 00:34:18,169
I've got a package to package less one

00:34:15,799 --> 00:34:21,529
is what the server needs the other is

00:34:18,169 --> 00:34:23,510
what the client needs so on the server

00:34:21,529 --> 00:34:25,339
you need your command line utilities but

00:34:23,510 --> 00:34:29,379
your GUI utilities are kind of useless

00:34:25,339 --> 00:34:33,139
and on the client you need all of the

00:34:29,379 --> 00:34:37,539
utilities but not the core obviously if

00:34:33,139 --> 00:34:39,740
you're doing a single node workstation

00:34:37,539 --> 00:34:46,429
virtualization you install both sets of

00:34:39,740 --> 00:34:49,519
packages and then finally you add your

00:34:46,429 --> 00:34:51,349
user to the libvirt group so that you

00:34:49,519 --> 00:34:57,799
don't have to switch to root when you

00:34:51,349 --> 00:35:00,190
want to start a virtual machine one of

00:34:57,799 --> 00:35:03,710
the packages we installed on the server

00:35:00,190 --> 00:35:06,559
enabled added support for EFI booting

00:35:03,710 --> 00:35:13,160
your virtual machines but you still have

00:35:06,559 --> 00:35:15,250
to edit the qmu configuration file then

00:35:13,160 --> 00:35:18,890
you'll want to define a storage pool

00:35:15,250 --> 00:35:26,359
because for example by default your

00:35:18,890 --> 00:35:29,180
images are gonna go in on your system

00:35:26,359 --> 00:35:31,750
drive where slash is mounted but you may

00:35:29,180 --> 00:35:34,220
have well created a separate volume

00:35:31,750 --> 00:35:36,589
where you want your virtual machines to

00:35:34,220 --> 00:35:39,559
go this is how you're going to be able

00:35:36,589 --> 00:35:44,509
to target virtual machines to the volume

00:35:39,559 --> 00:35:51,049
that has lots of space for your virtual

00:35:44,509 --> 00:35:52,970
machine hard drive images and this is an

00:35:51,049 --> 00:35:58,299
example of using the vert Institute

00:35:52,970 --> 00:36:03,009
ility to create a virtual machine

00:35:58,299 --> 00:36:07,750
completely off of the command line and

00:36:03,009 --> 00:36:07,750
then when you've created it and

00:36:08,109 --> 00:36:13,069
installed the system you'll want to use

00:36:11,059 --> 00:36:15,769
the destroy command which is just a

00:36:13,069 --> 00:36:18,470
confusing thing about verse because they

00:36:15,769 --> 00:36:21,470
chose destroy rather than shut down to

00:36:18,470 --> 00:36:23,079
be the shutdown command so you're not

00:36:21,470 --> 00:36:28,339
getting rid of the image you just

00:36:23,079 --> 00:36:32,180
created you're telling verse to shut it

00:36:28,339 --> 00:36:34,339
down because you immediately want to

00:36:32,180 --> 00:36:36,140
edit it because the thing you didn't do

00:36:34,339 --> 00:36:40,700
when you created it on the command line

00:36:36,140 --> 00:36:46,309
is to define some kind of display for it

00:36:40,700 --> 00:36:49,940
and it's and you want to use a remote

00:36:46,309 --> 00:36:54,440
viewer to get to it and that's an

00:36:49,940 --> 00:36:59,319
example of the line to add a spice

00:36:54,440 --> 00:36:59,319
driver to your virtual machine

00:37:00,170 --> 00:37:09,230
and I like to set up my spice drivers to

00:37:06,730 --> 00:37:11,390
specify which port rather than letting

00:37:09,230 --> 00:37:18,590
them want to assign so I've picked port

00:37:11,390 --> 00:37:20,960
6001 so graphic support there are two

00:37:18,590 --> 00:37:24,020
virtual displays available one is VNC

00:37:20,960 --> 00:37:27,200
which is over and slower and the Durer

00:37:24,020 --> 00:37:28,610
one is spice sometimes spice works

00:37:27,200 --> 00:37:34,670
sometimes it doesn't

00:37:28,610 --> 00:37:36,200
if it doesn't work just use VNC spice in

00:37:34,670 --> 00:37:44,030
addition to performance support

00:37:36,200 --> 00:37:48,110
certificates in the connection and I

00:37:44,030 --> 00:37:50,720
actually have an article I wrote on my

00:37:48,110 --> 00:37:57,350
website about some of the issues with

00:37:50,720 --> 00:37:59,240
spice and now when you try and launch a

00:37:57,350 --> 00:38:01,270
virtual machine in the GUI you may still

00:37:59,240 --> 00:38:03,740
hit a permissions problem it's because

00:38:01,270 --> 00:38:07,880
you still need to go Mac back and

00:38:03,740 --> 00:38:10,760
manually change permissions so the

00:38:07,880 --> 00:38:16,400
libvirt group actually has full access

00:38:10,760 --> 00:38:19,510
to a couple of things and then once

00:38:16,400 --> 00:38:26,840
you're in the virtual machine manager

00:38:19,510 --> 00:38:29,360
you've got the two screen shots one is

00:38:26,840 --> 00:38:34,490
of the storage pool one is of the

00:38:29,360 --> 00:38:38,450
overview tab you can on the left one you

00:38:34,490 --> 00:38:40,940
can see that there's overview as

00:38:38,450 --> 00:38:44,120
highlight and there are three grey tabs

00:38:40,940 --> 00:38:46,690
and that's how you switch between these

00:38:44,120 --> 00:38:46,690
two tabs

00:38:49,970 --> 00:38:55,700
you can create a new guest and I've got

00:38:53,540 --> 00:38:58,090
screenshots you'll probably take an iso

00:38:55,700 --> 00:38:58,090
image

00:39:08,850 --> 00:39:22,470
as you click through you'll set up your

00:39:16,380 --> 00:39:24,570
RAM and CPU you'll add storage and

00:39:22,470 --> 00:39:26,580
that's where you'll take advantage the

00:39:24,570 --> 00:39:29,400
storage pool you define because you want

00:39:26,580 --> 00:39:31,380
to create your new storage on the drive

00:39:29,400 --> 00:39:34,400
that actually has space to store virtual

00:39:31,380 --> 00:39:34,400
machine images

00:39:39,250 --> 00:39:51,430
you'll give it a name you'll pick the

00:39:43,270 --> 00:39:53,560
bridged adapter you'll check off the box

00:39:51,430 --> 00:39:57,190
to edit the configuration before it

00:39:53,560 --> 00:40:00,970
creates it the only time you can choose

00:39:57,190 --> 00:40:02,710
to be on UEFI firmware is right now once

00:40:00,970 --> 00:40:06,250
you create the virtual machine you can't

00:40:02,710 --> 00:40:09,089
switch it between ufi and bias so if you

00:40:06,250 --> 00:40:14,950
want your image to boot off of UFE UFE

00:40:09,089 --> 00:40:17,170
you have to do it right now and then you

00:40:14,950 --> 00:40:19,869
will shortly have a virtual machine come

00:40:17,170 --> 00:40:21,520
up and start its installation and with

00:40:19,869 --> 00:40:24,400
any luck you'll have a working virtual

00:40:21,520 --> 00:40:27,339
machine and we are just about out of

00:40:24,400 --> 00:40:33,780
time and here are some links to

00:40:27,339 --> 00:40:37,990
documentation and most importantly

00:40:33,780 --> 00:40:42,760
you'll want to take the URL for my slide

00:40:37,990 --> 00:40:46,480
decks and there's two copies of this

00:40:42,760 --> 00:40:48,670
presentation up there in PDF format one

00:40:46,480 --> 00:40:51,280
with the speaker notes one without the

00:40:48,670 --> 00:40:54,310
speaker notes when exporting the slides

00:40:51,280 --> 00:41:02,020
sometimes cover up the actual text so I

00:40:54,310 --> 00:41:05,430
did it twice all right we do have a

00:41:02,020 --> 00:41:05,430
little time left over for Q&A

00:41:20,950 --> 00:41:32,760
I I obviously don't like my stuff being

00:41:25,660 --> 00:41:35,020
attacked I haven't run so your KVM

00:41:32,760 --> 00:41:39,160
virtual environment should not be

00:41:35,020 --> 00:41:41,920
directly exposed so certainly you want

00:41:39,160 --> 00:41:44,020
to keep things patched especially on the

00:41:41,920 --> 00:41:46,990
virtual machines that are outside facing

00:41:44,020 --> 00:41:50,470
in case somebody has an exploit that

00:41:46,990 --> 00:41:52,990
somehow able to get through the brick

00:41:50,470 --> 00:41:57,480
wall that protected the hypervisor uses

00:41:52,990 --> 00:41:57,480
to protect the host from the guest

00:42:06,980 --> 00:42:15,200
he's asking about why you would prefer

00:42:09,230 --> 00:42:17,589
to use Ewing if I or legacy BIOS and for

00:42:15,200 --> 00:42:21,079
a lot of cases it doesn't matter but

00:42:17,589 --> 00:42:24,319
sometimes it does so I find that for

00:42:21,079 --> 00:42:27,710
example it's easier to get Debian images

00:42:24,319 --> 00:42:29,930
going with a BIOS that more likely to

00:42:27,710 --> 00:42:35,900
have issues getting my virtual machine

00:42:29,930 --> 00:42:38,440
up when I'm using UEFI but arch images

00:42:35,900 --> 00:42:43,309
are the other way they don't like by us

00:42:38,440 --> 00:42:47,930
and there may be reasons why you want to

00:42:43,309 --> 00:42:51,049
you care that are less generic than that

00:42:47,930 --> 00:42:53,650
that certain distributions don't prefer

00:42:51,049 --> 00:42:53,650
one or the other

00:42:59,340 --> 00:43:05,490
and any more questions and I apologize

00:43:02,760 --> 00:43:07,440
the fur being a little rushed towards

00:43:05,490 --> 00:43:11,280
the end but we were running out of time

00:43:07,440 --> 00:43:14,310
and I've got a last question sign so you

00:43:11,280 --> 00:43:19,470
guys got one more question well or catch

00:43:14,310 --> 00:43:20,570
me out in the hallway all right thank

00:43:19,470 --> 00:43:26,169
you

00:43:20,570 --> 00:43:26,169

YouTube URL: https://www.youtube.com/watch?v=Dl4tpStOKyg


