Title: Stephen Lembark - "What I did on my vacation: Re-buiding FindBin at last years TPC"
Publication date: 2019-06-19
Playlist: TPC 2019 in Pittsburgh
Description: 
	Perl6 books are all about the language. Catch is that actually writing and submitting a module requires a bit more than that: Sane ways to lay out the module, command-line tools for testing and bundling the result. This talk tries to jump-start the process for people who want to try out Perl6 by showing how to get the framework, well... working.

How many people walking in the door really know how to use zef, mi6, or anything else Perl6-ish? 
Until we do, Perl6 will be an orphan.
Captions: 
	00:00:00,030 --> 00:00:08,570
anyway this is last year Liz taught a

00:00:03,240 --> 00:00:11,700
class on Perl 6 for pro/5 people and

00:00:08,570 --> 00:00:13,259
much like learning a language if you

00:00:11,700 --> 00:00:15,299
learn a language by trying to translate

00:00:13,259 --> 00:00:17,910
whatever you speak into that language

00:00:15,299 --> 00:00:19,350
you'll never learn the language I mean

00:00:17,910 --> 00:00:23,430
you learn maybe how to order dinner but

00:00:19,350 --> 00:00:25,170
not much more than that so after the

00:00:23,430 --> 00:00:27,480
class Liz and I sat around trying to

00:00:25,170 --> 00:00:30,420
translate something I had written into

00:00:27,480 --> 00:00:33,329
Perl 6 and sitting there just doing Perl

00:00:30,420 --> 00:00:35,100
6 I actually learned something so I was

00:00:33,329 --> 00:00:37,020
gonna try and get just some of the

00:00:35,100 --> 00:00:40,620
things I've picked up trying to make

00:00:37,020 --> 00:00:49,410
these modules work and find me likes

00:00:40,620 --> 00:00:51,300
does anyone use that ok well if what it

00:00:49,410 --> 00:00:54,090
does it's a programmatic version of - I

00:00:51,300 --> 00:00:57,120
the idea is that you don't want to

00:00:54,090 --> 00:00:59,039
always have to set Perl 5 or Perl 6 live

00:00:57,120 --> 00:01:01,770
to be wherever you are you want things

00:00:59,039 --> 00:01:06,479
to just be able to use what's around you

00:01:01,770 --> 00:01:09,450
so it takes find bin which gives me an

00:01:06,479 --> 00:01:14,310
anchor point scans up the tree and finds

00:01:09,450 --> 00:01:17,250
live directories excluding the root so

00:01:14,310 --> 00:01:21,600
that and just uses them the point behind

00:01:17,250 --> 00:01:23,250
that is that I can have if you have a

00:01:21,600 --> 00:01:25,560
large project and you don't want to

00:01:23,250 --> 00:01:27,270
install all of it you can use the

00:01:25,560 --> 00:01:28,950
current version of everything and not

00:01:27,270 --> 00:01:32,939
have to worry about playing with your

00:01:28,950 --> 00:01:34,860
environment so you can run in-house

00:01:32,939 --> 00:01:38,700
modules without having to install on C

00:01:34,860 --> 00:01:41,189
pad and then bring the back there was

00:01:38,700 --> 00:01:43,560
one place I worked I created this

00:01:41,189 --> 00:01:45,390
because we had to push things into C pan

00:01:43,560 --> 00:01:47,100
waits them to be indexed and then do a

00:01:45,390 --> 00:01:48,420
seat pan install in order to run

00:01:47,100 --> 00:01:51,000
anything because everyone who's working

00:01:48,420 --> 00:01:52,350
in their own spaces and this a lot this

00:01:51,000 --> 00:01:56,960
allows you just have something that runs

00:01:52,350 --> 00:02:01,110
it's nice in production because I can

00:01:56,960 --> 00:02:04,320
run it I can do a what I'm suppose I

00:02:01,110 --> 00:02:08,520
can't move around ok I love you

00:02:04,320 --> 00:02:09,899
I'm angered sorry umm I promise I'll

00:02:08,520 --> 00:02:13,560
stand right here

00:02:09,899 --> 00:02:15,870
so the other thing I found it nice for

00:02:13,560 --> 00:02:18,480
is is anyone here ever worked in a place

00:02:15,870 --> 00:02:24,510
where the production database got say

00:02:18,480 --> 00:02:26,120
demolished because someone did prove so

00:02:24,510 --> 00:02:28,950
one of the things you can do is put

00:02:26,120 --> 00:02:31,680
versions of configurations in THC or

00:02:28,950 --> 00:02:35,610
like the configuration module goes in T

00:02:31,680 --> 00:02:37,739
live and then you don't end up blowing

00:02:35,610 --> 00:02:38,790
off production because you just don't

00:02:37,739 --> 00:02:41,610
give it a library that knows where

00:02:38,790 --> 00:02:42,930
production is the other thing that you

00:02:41,610 --> 00:02:44,970
do that's kind of fun is well you can

00:02:42,930 --> 00:02:47,359
resolve a path and you can have a bunch

00:02:44,970 --> 00:02:50,549
of libraries in or over and left field

00:02:47,359 --> 00:02:52,290
they get used the people can't even see

00:02:50,549 --> 00:02:55,709
so it's very hard for them to screw them

00:02:52,290 --> 00:03:00,810
up so I'm not going to be describing

00:02:55,709 --> 00:03:04,290
Perl 5 this is about Perl 6 there's some

00:03:00,810 --> 00:03:06,840
things just what I learned making this

00:03:04,290 --> 00:03:10,049
work and hopefully this will allow

00:03:06,840 --> 00:03:11,549
people to walk out and write a module so

00:03:10,049 --> 00:03:14,579
fine bin is the first thing I had to

00:03:11,549 --> 00:03:18,870
write anyone to use that sort of graham

00:03:14,579 --> 00:03:21,569
bars first things and you know it's it's

00:03:18,870 --> 00:03:23,190
kind of weird to hear that and this this

00:03:21,569 --> 00:03:24,810
is kind of the same bad thing to they

00:03:23,190 --> 00:03:26,099
they do in shopping malls you know you

00:03:24,810 --> 00:03:28,410
always walk up to the sign and it says

00:03:26,099 --> 00:03:32,879
you're here I'm not sure I want them

00:03:28,410 --> 00:03:35,879
tracking me everywhere I go you know

00:03:32,879 --> 00:03:38,220
just to I'll figure out where I am on

00:03:35,879 --> 00:03:40,139
the map by myself just don't watch me

00:03:38,220 --> 00:03:41,549
but you have to do that to your code a

00:03:40,139 --> 00:03:43,949
lot of times because you want to be able

00:03:41,549 --> 00:03:45,629
to tell where is a configuration

00:03:43,949 --> 00:03:46,889
directory with respect to where I'm

00:03:45,629 --> 00:03:49,049
running if three of this we've got

00:03:46,889 --> 00:03:51,090
different sand boxes I don't want to

00:03:49,049 --> 00:03:53,579
have to go to Etsy sandbox or something

00:03:51,090 --> 00:03:55,739
I want to go to go wherever my code is

00:03:53,579 --> 00:03:57,239
is running there's also the issues of an

00:03:55,739 --> 00:03:59,430
absolute path a lot of times you're

00:03:57,239 --> 00:04:01,410
running things with a relative path you

00:03:59,430 --> 00:04:03,299
want to get an absolute path so you know

00:04:01,410 --> 00:04:05,760
you can anchor it properly for searching

00:04:03,299 --> 00:04:10,680
for other things one nice thing about

00:04:05,760 --> 00:04:12,959
the resolving is that you can have a

00:04:10,680 --> 00:04:15,780
collection of executables that live next

00:04:12,959 --> 00:04:17,549
to something you can similarly get to

00:04:15,780 --> 00:04:20,099
wherever it belongs and still find the

00:04:17,549 --> 00:04:21,690
real sibling files yeah the other thing

00:04:20,099 --> 00:04:23,110
Franklin has to deal with it's fun is

00:04:21,690 --> 00:04:26,379
the native file system does you

00:04:23,110 --> 00:04:31,270
might be in user dollar sandbox Joe Blow

00:04:26,379 --> 00:04:33,400
on VMs and that's gonna give you a whole

00:04:31,270 --> 00:04:36,969
different ball of wax than walking up a

00:04:33,400 --> 00:04:39,159
unix tree now there are two things that

00:04:36,969 --> 00:04:40,599
I export from here are ampersand being

00:04:39,159 --> 00:04:41,770
an ampersand scripts the first thing

00:04:40,599 --> 00:04:44,319
everyone's got to get used to is the

00:04:41,770 --> 00:04:47,979
notion the sigils are part of the name

00:04:44,319 --> 00:04:49,900
just say it over and over it's not like

00:04:47,979 --> 00:04:52,539
pro/5 where you got a name and you

00:04:49,900 --> 00:04:54,219
decide what it means the sigils are part

00:04:52,539 --> 00:04:56,349
of something so you get you get a bin in

00:04:54,219 --> 00:04:58,509
the script

00:04:56,349 --> 00:05:00,430
find been used to explore the variable

00:04:58,509 --> 00:05:02,409
dollar bin we all used it for everything

00:05:00,430 --> 00:05:02,770
I can show you why you don't need it

00:05:02,409 --> 00:05:05,529
anymore

00:05:02,770 --> 00:05:07,060
and it becomes a problem because then

00:05:05,529 --> 00:05:08,590
you can get variable collisions if I

00:05:07,060 --> 00:05:11,169
change the interface you don't know what

00:05:08,590 --> 00:05:16,080
I'm pushing into your space so right now

00:05:11,169 --> 00:05:18,000
all export for the bin and the script

00:05:16,080 --> 00:05:21,639
subs

00:05:18,000 --> 00:05:23,469
units per all six uses compilation units

00:05:21,639 --> 00:05:26,289
there's modules there's files as all

00:05:23,469 --> 00:05:28,089
sorts of cute things but this thing is

00:05:26,289 --> 00:05:31,330
module that one of the cute things now

00:05:28,089 --> 00:05:33,759
is you can have multiple versions of a

00:05:31,330 --> 00:05:36,279
module installed you can get multiple

00:05:33,759 --> 00:05:39,909
authors authoring different varieties of

00:05:36,279 --> 00:05:42,389
the same thing so again in the way that

00:05:39,909 --> 00:05:45,430
socials are now sort of part of a name

00:05:42,389 --> 00:05:49,150
the versions the names the rest of these

00:05:45,430 --> 00:05:51,219
are part of what you are releasing so

00:05:49,150 --> 00:05:55,050
it's it's good to have your name on it

00:05:51,219 --> 00:05:57,219
it's good to have the version on it

00:05:55,050 --> 00:06:00,099
constants we actually have nice

00:05:57,219 --> 00:06:01,360
intrinsic built-in constants now one of

00:06:00,099 --> 00:06:04,150
the things that can't change during

00:06:01,360 --> 00:06:06,849
execution is your interactive status if

00:06:04,150 --> 00:06:08,680
you type Perl - e it's you're not gonna

00:06:06,849 --> 00:06:12,580
transform yourself into a shebang script

00:06:08,680 --> 00:06:14,289
if you redirect it from standard in if

00:06:12,580 --> 00:06:16,240
you just type Perl and you're in the

00:06:14,289 --> 00:06:18,099
repple you're not gonna suddenly become

00:06:16,240 --> 00:06:21,310
a script so that can't change during

00:06:18,099 --> 00:06:24,400
execution neither can a constant so I

00:06:21,310 --> 00:06:27,939
have a constant is interactive which is

00:06:24,400 --> 00:06:32,020
a junction in parallel universes in

00:06:27,939 --> 00:06:36,159
constant time we have we now have

00:06:32,020 --> 00:06:36,729
alternate logic so this constant is

00:06:36,159 --> 00:06:38,229
inter

00:06:36,729 --> 00:06:43,870
active notice there's no sigil on it

00:06:38,229 --> 00:06:45,370
it's just a value sigils you can say

00:06:43,870 --> 00:06:47,110
there they're single and twins are like

00:06:45,370 --> 00:06:50,319
the between the sigil in a name it

00:06:47,110 --> 00:06:52,449
sounds well I guess but these stars are

00:06:50,319 --> 00:06:54,939
dynamic the upper case tells you that it

00:06:52,449 --> 00:06:56,259
was auto-generated for you by pearl if

00:06:54,939 --> 00:06:58,180
you don't step on the naming convention

00:06:56,259 --> 00:07:00,039
so what this is telling me is that my

00:06:58,180 --> 00:07:03,610
program name is one of those three

00:07:00,039 --> 00:07:05,680
things notice I don't have to say if or

00:07:03,610 --> 00:07:08,110
have a tourney area I just say a or B or

00:07:05,680 --> 00:07:12,759
C I'm comparing it to all three of those

00:07:08,110 --> 00:07:14,409
at once marshal arguments now there was

00:07:12,759 --> 00:07:17,349
a convention in Pro 5 most people

00:07:14,409 --> 00:07:19,449
adopted was used a qw with : something

00:07:17,349 --> 00:07:21,699
and you put a colon in front of it and

00:07:19,449 --> 00:07:24,339
Perl 6 has made that pretty much a part

00:07:21,699 --> 00:07:27,699
of the language now so when you start

00:07:24,339 --> 00:07:29,740
these modules up you'll the switches

00:07:27,699 --> 00:07:33,370
don't have to be quote worded anymore

00:07:29,740 --> 00:07:36,849
the colon name of thing is now just part

00:07:33,370 --> 00:07:39,659
of the language so if you use this with

00:07:36,849 --> 00:07:41,439
nothing you're going to hand me

00:07:39,659 --> 00:07:45,009
effectively you're saying you're using

00:07:41,439 --> 00:07:47,469
colon default otherwise resolver both

00:07:45,009 --> 00:07:49,709
spin you can combine them stack them in

00:07:47,469 --> 00:07:52,990
different orders wherever you like

00:07:49,709 --> 00:07:57,069
so an example using those these

00:07:52,990 --> 00:07:59,740
constants are what I use if you want

00:07:57,069 --> 00:08:01,689
things to be verbose if you use this

00:07:59,740 --> 00:08:04,569
with verbose you're gonna get a constant

00:08:01,689 --> 00:08:06,370
installed on your space that's true if

00:08:04,569 --> 00:08:09,849
you don't want verbose for your default

00:08:06,370 --> 00:08:13,029
it won't eat it but again these are

00:08:09,849 --> 00:08:14,529
exported resolve is exported if you put

00:08:13,029 --> 00:08:17,409
a cold and resolve on it I'll show you

00:08:14,529 --> 00:08:20,919
how and it default and it's true you

00:08:17,409 --> 00:08:22,120
can't change it it's a constant another

00:08:20,919 --> 00:08:23,949
thing that we're all used to a few

00:08:22,120 --> 00:08:26,559
people have gone over is the notion that

00:08:23,949 --> 00:08:28,270
objects are objects they don't auto flag

00:08:26,559 --> 00:08:29,649
we're used to be able to stack five

00:08:28,270 --> 00:08:33,339
arrays in a row and they just magically

00:08:29,649 --> 00:08:39,909
flatten themselves out a slip is a thing

00:08:33,339 --> 00:08:41,860
that is flattened flattened of all so

00:08:39,909 --> 00:08:43,899
what happens is you want you're going to

00:08:41,860 --> 00:08:49,149
end up creating a lot of slips the

00:08:43,899 --> 00:08:50,230
flatten is a pipe flat I spray a you

00:08:49,149 --> 00:08:53,320
know Manik

00:08:50,230 --> 00:09:00,220
the so I've got option tags Rizal every

00:08:53,320 --> 00:09:03,940
both these are a flat list not a single

00:09:00,220 --> 00:09:05,800
item containing two words is that making

00:09:03,940 --> 00:09:09,970
sense how many people here have a

00:09:05,800 --> 00:09:11,770
heartbeat okay so we got three dead

00:09:09,970 --> 00:09:13,540
bodies in the back Larry's one of them

00:09:11,770 --> 00:09:14,790
sorry about that man I didn't mean to

00:09:13,540 --> 00:09:17,260
kill you

00:09:14,790 --> 00:09:20,320
another neat thing that's part of Perl 6

00:09:17,260 --> 00:09:24,040
are pseudo packages anyone here ever use

00:09:20,320 --> 00:09:28,510
next you take at every colon colon last

00:09:24,040 --> 00:09:29,800
Poland Poland caller does pretty much

00:09:28,510 --> 00:09:31,630
what do you think it does it looks in

00:09:29,800 --> 00:09:34,630
your callers face

00:09:31,630 --> 00:09:39,340
unlike 405 where you had to play with

00:09:34,630 --> 00:09:42,370
pad walker or symbol and and eval funny

00:09:39,340 --> 00:09:44,230
things you can be pretty explicit about

00:09:42,370 --> 00:09:47,140
saying hi I want to look in my caller

00:09:44,230 --> 00:09:52,720
space for a lexical variable that has a

00:09:47,140 --> 00:09:55,230
name or for a constant signatures are

00:09:52,720 --> 00:10:01,090
now part but signatures say it out loud

00:09:55,230 --> 00:10:02,980
everything in Perl 6 is what an object

00:10:01,090 --> 00:10:04,810
signatures are objects as a matter of

00:10:02,980 --> 00:10:06,520
fact there's a sexy sneaky you can you

00:10:04,810 --> 00:10:09,660
can generate these on the fly if you

00:10:06,520 --> 00:10:13,930
want to but the fun thing about this is

00:10:09,660 --> 00:10:17,710
there's a boolean here called resolve

00:10:13,930 --> 00:10:20,860
and it defaults to whatever I find in

00:10:17,710 --> 00:10:24,520
your lexical space called find been

00:10:20,860 --> 00:10:26,940
resolved remember that these constants

00:10:24,520 --> 00:10:29,290
were exported when you wanted them

00:10:26,940 --> 00:10:32,260
that's how I can tell that you wanted

00:10:29,290 --> 00:10:35,370
for both to be your default I can look

00:10:32,260 --> 00:10:39,820
back and say if you want to use fine bin

00:10:35,370 --> 00:10:42,010
defaulting to propose then they know I

00:10:39,820 --> 00:10:48,610
can tell that you asked for it that's

00:10:42,010 --> 00:10:51,430
how so the dollar : resolved stores

00:10:48,610 --> 00:10:54,010
whatever you put into : resolved when

00:10:51,430 --> 00:10:59,020
you called it so I have a variable named

00:10:54,010 --> 00:11:01,510
after the parameter this is a courser

00:10:59,020 --> 00:11:04,280
it's not a constructor I said that wrong

00:11:01,510 --> 00:11:08,490
the first time and a mean slappy

00:11:04,280 --> 00:11:11,310
so what this tells me is when I look in

00:11:08,490 --> 00:11:14,310
your space if you didn't export the

00:11:11,310 --> 00:11:15,840
variable I'm gonna get a nil which is

00:11:14,310 --> 00:11:18,720
the moral equivalent of the old on down

00:11:15,840 --> 00:11:20,160
I'm gonna get nothingness I don't want

00:11:18,720 --> 00:11:21,470
to examine nothingness I want to get

00:11:20,160 --> 00:11:25,580
truth and falsity

00:11:21,470 --> 00:11:28,680
so this boolean coerces whatever I find

00:11:25,580 --> 00:11:33,120
either the resolve that you didn't give

00:11:28,680 --> 00:11:36,630
me that defaults to the lexical constant

00:11:33,120 --> 00:11:38,820
that you didn't use that's gonna be

00:11:36,630 --> 00:11:40,140
falsified so I've got a real true or

00:11:38,820 --> 00:11:41,760
false going through the program I'm not

00:11:40,140 --> 00:11:46,170
gonna get nasty grams about undefined

00:11:41,760 --> 00:11:47,790
variables now here's where we use that

00:11:46,170 --> 00:11:52,530
option tags remember that flattened out

00:11:47,790 --> 00:11:54,480
list if you say use fine bin verbose it

00:11:52,530 --> 00:11:56,640
doesn't do you much good if I don't

00:11:54,480 --> 00:12:00,090
support the methods to be verbose with

00:11:56,640 --> 00:12:00,660
it doesn't do you if you say fine been

00:12:00,090 --> 00:12:02,310
resolved

00:12:00,660 --> 00:12:04,020
you probably want more than just one

00:12:02,310 --> 00:12:06,660
little constant stuffed into your space

00:12:04,020 --> 00:12:08,370
you might want the the subroutine so

00:12:06,660 --> 00:12:11,160
what this says is if you if you

00:12:08,370 --> 00:12:14,070
explicitly act for bin after bin if you

00:12:11,160 --> 00:12:16,290
do nothing at all ask for default or if

00:12:14,070 --> 00:12:18,480
one of those flattened out option tags

00:12:16,290 --> 00:12:21,990
is what you used you probably want to

00:12:18,480 --> 00:12:25,110
see the subroutine so this is a nice way

00:12:21,990 --> 00:12:28,080
with the with that constant of being

00:12:25,110 --> 00:12:30,210
able to label collections of things that

00:12:28,080 --> 00:12:31,680
you want to export a sub with one of the

00:12:30,210 --> 00:12:33,780
things about Perl 6 is you have to

00:12:31,680 --> 00:12:36,390
export all of the namespace when you ask

00:12:33,780 --> 00:12:38,280
for bin or default or whatever these are

00:12:36,390 --> 00:12:41,520
really packages inside of your your

00:12:38,280 --> 00:12:44,000
module you get all of them so if you

00:12:41,520 --> 00:12:47,940
want to have different collections of

00:12:44,000 --> 00:12:49,650
what things people see you can set them

00:12:47,940 --> 00:12:51,780
with these these constants there are

00:12:49,650 --> 00:12:54,750
combinations of things it makes it

00:12:51,780 --> 00:12:57,360
pretty easy to set up groups of names

00:12:54,750 --> 00:13:00,200
that the things will be exported with if

00:12:57,360 --> 00:13:03,420
you want different collections of them

00:13:00,200 --> 00:13:06,300
using a constant notice is interactive

00:13:03,420 --> 00:13:09,270
up here has no sigil in front of it it's

00:13:06,300 --> 00:13:13,770
just a value got a Zen thing it simply

00:13:09,270 --> 00:13:16,820
is the question mark the bang tourney

00:13:13,770 --> 00:13:19,760
Airy people are used to that now I guess

00:13:16,820 --> 00:13:22,700
I still do the C version and actually

00:13:19,760 --> 00:13:24,950
Thank You Larry thee the Perl 6 actually

00:13:22,700 --> 00:13:27,110
says no you're not supposed to use a C

00:13:24,950 --> 00:13:29,540
style to turn in turkey so when it sees

00:13:27,110 --> 00:13:32,450
a question mark :

00:13:29,540 --> 00:13:34,430
it actually says oops for you the error

00:13:32,450 --> 00:13:44,180
messages in Perl 6 are actually pretty

00:13:34,430 --> 00:13:46,190
polite the the CWD as your current

00:13:44,180 --> 00:13:48,200
working directory so there yeah there's

00:13:46,190 --> 00:13:50,030
still a lot of UNIX isms in here again

00:13:48,200 --> 00:13:52,300
there's a dollar Star that tells you

00:13:50,030 --> 00:13:54,350
it's dynamically generated for you a

00:13:52,300 --> 00:13:56,270
thing you're gonna get used to using a

00:13:54,350 --> 00:14:02,570
lot of our iOS if you play with file

00:13:56,270 --> 00:14:04,040
systems iOS 4 paths I use 4 files so CWD

00:14:02,570 --> 00:14:08,030
is in IO and I know this because I

00:14:04,040 --> 00:14:10,640
looked it up program however is a string

00:14:08,030 --> 00:14:12,320
and I want the thing that I'm working

00:14:10,640 --> 00:14:14,450
with to be an iOS so I can just put a

00:14:12,320 --> 00:14:22,520
dot IO on the end of it and I've called

00:14:14,450 --> 00:14:26,180
a constructor a really nice huh yeah so

00:14:22,520 --> 00:14:28,790
you get program that IO says construct

00:14:26,180 --> 00:14:31,430
me a thing from the program especially

00:14:28,790 --> 00:14:34,340
dealing with a lot of with the iOS you

00:14:31,430 --> 00:14:36,200
will do thing do dot operation that

00:14:34,340 --> 00:14:39,560
returns a string diode as something else

00:14:36,200 --> 00:14:46,280
that returns a string so just yeah I II

00:14:39,560 --> 00:14:48,620
III don't know to use the IO one of the

00:14:46,280 --> 00:14:50,660
things you can do is resolve whatever

00:14:48,620 --> 00:14:53,230
you're using in order to find the

00:14:50,660 --> 00:14:58,010
executable directory so that's been from

00:14:53,230 --> 00:15:00,370
again resolved returns and IO which

00:14:58,010 --> 00:15:03,320
which follows a symlink or whatever

00:15:00,370 --> 00:15:09,530
absolute doesn't it returns a string

00:15:03,320 --> 00:15:11,810
path so I have to I owe fi it hmm no it

00:15:09,530 --> 00:15:15,530
makes sense an absolute path is a path

00:15:11,810 --> 00:15:17,420
it's not a but it's so bloody easy to

00:15:15,530 --> 00:15:19,490
just stick IO on the end of it it's it's

00:15:17,420 --> 00:15:21,680
it's not painful it's not like I have to

00:15:19,490 --> 00:15:23,480
have my thing equals and then call IO to

00:15:21,680 --> 00:15:29,390
new and create a new variable as I just

00:15:23,480 --> 00:15:30,680
think I oh it's the you know and it's

00:15:29,390 --> 00:15:31,910
frankly there's places

00:15:30,680 --> 00:15:33,440
I've seen some so if we have something

00:15:31,910 --> 00:15:34,640
dot type that's something that's

00:15:33,440 --> 00:15:35,990
something that another type that's

00:15:34,640 --> 00:15:37,670
something that something I mean you can

00:15:35,990 --> 00:15:40,550
you can end up creating five different

00:15:37,670 --> 00:15:45,710
objects daisy-chain down the line it

00:15:40,550 --> 00:15:47,660
yeah it where you need it it works so

00:15:45,710 --> 00:15:49,430
again I want to return a directory

00:15:47,660 --> 00:15:54,080
another wonderful thing across six of

00:15:49,430 --> 00:15:57,470
these iOS parrot people people get lazy

00:15:54,080 --> 00:16:00,649
on unix is der name gets you a parent

00:15:57,470 --> 00:16:04,730
that doesn't work on win dog it doesn't

00:16:00,649 --> 00:16:06,440
work on VMS is you have a volume so

00:16:04,730 --> 00:16:09,230
every members file spec you had to split

00:16:06,440 --> 00:16:13,250
up a volume and then reattach it and cow

00:16:09,230 --> 00:16:15,649
guys anyway nice thing is if you do dot

00:16:13,250 --> 00:16:16,820
parent you get the parent it's a while

00:16:15,649 --> 00:16:18,110
you get a directory if you get here

00:16:16,820 --> 00:16:19,130
directory it's at the directory above it

00:16:18,110 --> 00:16:20,930
if it's the root do you get the same

00:16:19,130 --> 00:16:24,920
thing back but you get it back with a

00:16:20,930 --> 00:16:26,690
volume on it you can compare them you

00:16:24,920 --> 00:16:30,920
don't have to split them and recombine

00:16:26,690 --> 00:16:35,420
them and it just works so this is a

00:16:30,920 --> 00:16:38,959
working version of bin decide if i'm

00:16:35,420 --> 00:16:42,020
verbose if i'm exporting it bin is

00:16:38,959 --> 00:16:44,900
either interactive or not resolved or

00:16:42,020 --> 00:16:46,790
don't if it's verbose put out some

00:16:44,900 --> 00:16:48,080
pretty messages if you're interactive

00:16:46,790 --> 00:16:49,940
you want the path which will be your

00:16:48,080 --> 00:16:51,709
working directory if you're not

00:16:49,940 --> 00:16:54,700
interactive i have to get your parent

00:16:51,709 --> 00:16:58,430
because it's an executable there it is I

00:16:54,700 --> 00:17:00,589
don't to me it's actually moderate read

00:16:58,430 --> 00:17:01,880
readable although the people that say

00:17:00,589 --> 00:17:08,120
you don't use tourney areas I don't

00:17:01,880 --> 00:17:09,920
really care about them no I do so script

00:17:08,120 --> 00:17:12,110
is the other one it basically gives you

00:17:09,920 --> 00:17:13,880
either minus or minus E or it gives you

00:17:12,110 --> 00:17:17,829
the base name and this one actually had

00:17:13,880 --> 00:17:23,420
room and yes you can stack tourney Aries

00:17:17,829 --> 00:17:29,210
so script note is a say two standard

00:17:23,420 --> 00:17:32,530
error the the say logic gets a little

00:17:29,210 --> 00:17:35,690
flaky if you want to use a file handle

00:17:32,530 --> 00:17:37,670
because you the separator is and all the

00:17:35,690 --> 00:17:39,200
rest of it so note makes it a little bit

00:17:37,670 --> 00:17:40,490
easier you don't have to deal with

00:17:39,200 --> 00:17:42,650
separate you just note means you're

00:17:40,490 --> 00:17:45,190
going to standard error versus say going

00:17:42,650 --> 00:17:45,190
to standard out

00:17:45,760 --> 00:17:53,750
only problem and that's a bug in 60 and

00:17:50,570 --> 00:17:56,779
60 call our lexical doesn't work in the

00:17:53,750 --> 00:17:59,630
signatures it blows up so what I have to

00:17:56,779 --> 00:18:01,700
do is create a copy and do this further

00:17:59,630 --> 00:18:03,730
down which gives me a chance to show up

00:18:01,700 --> 00:18:06,529
another neat thing question marks a

00:18:03,730 --> 00:18:09,409
really common thing you want to do is

00:18:06,529 --> 00:18:11,450
course something into a boolean so

00:18:09,409 --> 00:18:14,830
there's now a native language operator

00:18:11,450 --> 00:18:17,299
question mark that's is it true or false

00:18:14,830 --> 00:18:20,240
and that saves you from actually calling

00:18:17,299 --> 00:18:24,799
a constructor to coerce these it just

00:18:20,240 --> 00:18:26,809
does it so that's a working version if

00:18:24,799 --> 00:18:28,309
you look at the stuff that's on gitlab

00:18:26,809 --> 00:18:31,059
there's a nasty gram in and this is

00:18:28,309 --> 00:18:33,740
whatever this works switch it back but

00:18:31,059 --> 00:18:35,510
so now we've got to test this thing

00:18:33,740 --> 00:18:39,200
there's tests that should be familiar

00:18:35,510 --> 00:18:42,919
everyone okay and use okay most of these

00:18:39,200 --> 00:18:45,799
I doesn't look that bad so if anyone's

00:18:42,919 --> 00:18:48,799
seen my talks before I laziness is a

00:18:45,799 --> 00:18:51,770
matter of doing something once so here's

00:18:48,799 --> 00:18:56,480
a generic sanity check for a module just

00:18:51,770 --> 00:19:00,500
compile is it in memory yeah if I take

00:18:56,480 --> 00:19:02,840
my program I convert it to an IO parent

00:19:00,500 --> 00:19:07,130
to says go up to levels so that gets me

00:19:02,840 --> 00:19:09,320
up to T and one further up because the

00:19:07,130 --> 00:19:10,940
executables parent is a directory the

00:19:09,320 --> 00:19:12,740
directories parent is my working space

00:19:10,940 --> 00:19:14,809
if I stick live on the end of that

00:19:12,740 --> 00:19:17,840
that's probably where I want to find

00:19:14,809 --> 00:19:20,179
whatever module I'm testing that saves

00:19:17,840 --> 00:19:23,570
it from testing the one that's installed

00:19:20,179 --> 00:19:25,429
in opt Perl over and over and over again

00:19:23,570 --> 00:19:30,399
and wondering why do I change is not

00:19:25,429 --> 00:19:33,200
effect it's as if I take the base name I

00:19:30,399 --> 00:19:37,399
strip off a leading directory I can get

00:19:33,200 --> 00:19:39,320
the name it's easy to encode a package

00:19:37,399 --> 00:19:43,279
by putting dashes where the double colon

00:19:39,320 --> 00:19:45,409
should be so substitute is a nice inline

00:19:43,279 --> 00:19:47,240
way and what's great is because you can

00:19:45,409 --> 00:19:49,279
daisy-chain these you can substitute one

00:19:47,240 --> 00:19:50,840
thing and substitute another you do all

00:19:49,279 --> 00:19:54,139
sorts of cube ones you mean just one

00:19:50,840 --> 00:19:56,390
line at that point if I can use it

00:19:54,139 --> 00:19:59,299
that's a good thing

00:19:56,390 --> 00:20:03,730
if I haven't used it is anyone here ever

00:19:59,299 --> 00:20:07,159
misspelled a package name yeah if I

00:20:03,730 --> 00:20:08,720
successfully use a module I should be

00:20:07,159 --> 00:20:12,200
able to find its package name in the

00:20:08,720 --> 00:20:16,100
symbol table oh wise I type of the

00:20:12,200 --> 00:20:19,370
module so at that point I can check it

00:20:16,100 --> 00:20:22,309
the double colon dollar thing is the way

00:20:19,370 --> 00:20:24,529
you reference the symbol table so at

00:20:22,309 --> 00:20:27,980
that point if I can find a name for that

00:20:24,529 --> 00:20:30,110
and it matches what I expect it to be

00:20:27,980 --> 00:20:34,580
then I spell the package right at least

00:20:30,110 --> 00:20:39,620
it compiles it's the right thing that's

00:20:34,580 --> 00:20:43,039
enough you can use the pseudo class my

00:20:39,620 --> 00:20:46,480
way the caller is lexical this allows me

00:20:43,039 --> 00:20:49,850
to see does something exist in my space

00:20:46,480 --> 00:20:52,990
without playing with symbol and hacking

00:20:49,850 --> 00:20:56,360
the monkey hacking the symbol table

00:20:52,990 --> 00:20:58,580
before I've used the module I don't

00:20:56,360 --> 00:21:02,990
expect to see bin and script in these

00:20:58,580 --> 00:21:06,500
constants in my space after I've used it

00:21:02,990 --> 00:21:09,889
I do expect to see the two of those but

00:21:06,500 --> 00:21:12,019
I haven't installed the constants yet so

00:21:09,889 --> 00:21:14,200
you can see how I can check that these

00:21:12,019 --> 00:21:17,510
things did or didn't get installed

00:21:14,200 --> 00:21:19,610
outside of the do block remember use is

00:21:17,510 --> 00:21:23,149
lexical it's it's blocks code

00:21:19,610 --> 00:21:25,610
I should again find that these are not

00:21:23,149 --> 00:21:27,470
there this test goes on for another few

00:21:25,610 --> 00:21:29,779
of these do blocks where I do have fine

00:21:27,470 --> 00:21:32,630
been with verbose I checked it for both

00:21:29,779 --> 00:21:34,039
and script than whatever it's very easy

00:21:32,630 --> 00:21:41,149
to check this stuff now without

00:21:34,039 --> 00:21:42,649
resorting to symbol or craziness testing

00:21:41,149 --> 00:21:46,940
script is pretty easy I just compared

00:21:42,649 --> 00:21:49,669
myself to the base name if you know I I

00:21:46,940 --> 00:21:51,950
look what I found is the script I've got

00:21:49,669 --> 00:21:53,750
the programs base name I should expect

00:21:51,950 --> 00:21:57,590
to find it one thing I do in my test is

00:21:53,750 --> 00:22:00,710
I'll do an okay and check that what I

00:21:57,590 --> 00:22:02,720
expect is there especially if you're

00:22:00,710 --> 00:22:05,139
using a goes as f report or two if

00:22:02,720 --> 00:22:07,220
you're using a reporter type thing

00:22:05,139 --> 00:22:09,590
finding it's like everyone seen the

00:22:07,220 --> 00:22:12,410
message file not found

00:22:09,590 --> 00:22:14,300
don't you just love that one hey what's

00:22:12,410 --> 00:22:16,610
this you know and then you're stuck to

00:22:14,300 --> 00:22:19,130
be like s tracing the install to find

00:22:16,610 --> 00:22:21,710
out what file was looking for it's a lot

00:22:19,130 --> 00:22:25,700
easier if you do and okay and say yes I

00:22:21,710 --> 00:22:28,370
got something and show it and then oh

00:22:25,700 --> 00:22:32,000
gods I was expecting the wrong thing

00:22:28,370 --> 00:22:36,740
so is compares two strings it's not

00:22:32,000 --> 00:22:39,140
complicated testing - II we get Q X so

00:22:36,740 --> 00:22:42,050
you can see if I if I do a - II say the

00:22:39,140 --> 00:22:46,450
script I'm gonna get I hope to get - e

00:22:42,050 --> 00:22:49,970
because that's how I'm running it so

00:22:46,450 --> 00:22:54,860
prove six looks a lot like proof

00:22:49,970 --> 00:23:00,080
mi6 assists are neat packages for

00:22:54,860 --> 00:23:10,490
helping yeah in in ink and not ink and

00:23:00,080 --> 00:23:14,570
then in Mayan yeah so I used mi6 for

00:23:10,490 --> 00:23:16,250
this if you do mi6 it will in help it'll

00:23:14,570 --> 00:23:18,050
show you but you can create a basic

00:23:16,250 --> 00:23:20,510
module that will give you the changes

00:23:18,050 --> 00:23:21,530
and the readme and the rest of it there

00:23:20,510 --> 00:23:25,010
are a few things that you're gonna

00:23:21,530 --> 00:23:27,920
maintain as basic part if even if you

00:23:25,010 --> 00:23:29,780
use build or whatever in five there's

00:23:27,920 --> 00:23:32,240
pretty much one way to do this now with

00:23:29,780 --> 00:23:35,870
the changes file on a meta six that are

00:23:32,240 --> 00:23:39,110
part of part of your package if you do

00:23:35,870 --> 00:23:42,220
is f install one thing to notice it's

00:23:39,110 --> 00:23:45,370
not opt Perl bin or whatever there's

00:23:42,220 --> 00:23:48,530
bins going all the way down this tree

00:23:45,370 --> 00:23:50,540
sim links to your friends just find a

00:23:48,530 --> 00:23:52,670
directory and symlink everything into it

00:23:50,540 --> 00:23:54,800
and you have one thing on your path

00:23:52,670 --> 00:23:58,520
otherwise you can go crazy trying to

00:23:54,800 --> 00:24:01,910
find all this stuff so the changes file

00:23:58,520 --> 00:24:05,030
is now part of what you do now it's very

00:24:01,910 --> 00:24:12,050
complicated guess where it puts the next

00:24:05,030 --> 00:24:13,940
version hey so this basically whatever

00:24:12,050 --> 00:24:17,960
my next version is going to be these are

00:24:13,940 --> 00:24:21,140
my changes for it the meta six if you

00:24:17,960 --> 00:24:23,080
use module builder before it's not you

00:24:21,140 --> 00:24:24,929
know there's what the build depends on

00:24:23,080 --> 00:24:28,870
this one doesn't really depend on much

00:24:24,929 --> 00:24:32,500
the source URL is now built into it that

00:24:28,870 --> 00:24:34,919
is used by mi6 to do pushing and pulling

00:24:32,500 --> 00:24:36,970
and make sure that you you're up to date

00:24:34,919 --> 00:24:39,100
current version is down there at the

00:24:36,970 --> 00:24:39,490
bottom mi6 will maintain the version for

00:24:39,100 --> 00:24:43,570
you

00:24:39,490 --> 00:24:45,039
pod looks a lot like I I there's some

00:24:43,570 --> 00:24:47,289
niceties in the new version where you

00:24:45,039 --> 00:24:50,320
can you can have beginning and ending

00:24:47,289 --> 00:24:53,740
but if you write the stuff you're used

00:24:50,320 --> 00:24:58,720
to it'll probably work so now I want to

00:24:53,740 --> 00:25:05,320
release this type mi6 guess what 12-step

00:24:58,720 --> 00:25:06,669
program so one thing you'll see in red

00:25:05,320 --> 00:25:09,519
there you get to type in your version

00:25:06,669 --> 00:25:11,049
number in this case it'll it'll normally

00:25:09,519 --> 00:25:13,179
just take the last version and ding it

00:25:11,049 --> 00:25:14,409
up one I decided I was changing

00:25:13,179 --> 00:25:17,559
something I was changing the interface

00:25:14,409 --> 00:25:19,870
it would need it up to point four you

00:25:17,559 --> 00:25:25,149
get one last chance to avoid blowing off

00:25:19,870 --> 00:25:27,190
your kneecaps one nice thing about this

00:25:25,149 --> 00:25:29,799
it will check to make sure we see that

00:25:27,190 --> 00:25:32,559
git commit it will check to make sure

00:25:29,799 --> 00:25:35,200
that all of the things in your directory

00:25:32,559 --> 00:25:37,960
have been committed I think it handles

00:25:35,200 --> 00:25:41,980
version and get I don't know that it

00:25:37,960 --> 00:25:43,630
deals with CVS properly but the nice

00:25:41,980 --> 00:25:45,549
thing is anyone here ever let you push

00:25:43,630 --> 00:25:48,340
something out and you you blow something

00:25:45,549 --> 00:25:49,809
I you realize you forgot to push it so

00:25:48,340 --> 00:25:52,840
now you get this release out here that

00:25:49,809 --> 00:25:55,840
you've got no copy of the code so if

00:25:52,840 --> 00:26:00,549
you've got dangling files if you've got

00:25:55,840 --> 00:26:02,500
files that are not committed mi6 won't

00:26:00,549 --> 00:26:04,870
release it'll scream at you that you've

00:26:02,500 --> 00:26:06,399
gotta clean up your space one of the

00:26:04,870 --> 00:26:08,980
things that also does here is it will

00:26:06,399 --> 00:26:11,350
put a tag it would be nice if it had

00:26:08,980 --> 00:26:12,880
like arielle underscore or something in

00:26:11,350 --> 00:26:16,149
front of it but at least you can find

00:26:12,880 --> 00:26:20,529
these tags you do get tags and see which

00:26:16,149 --> 00:26:22,269
things you've actually uploaded one nice

00:26:20,529 --> 00:26:24,100
thing about Zef you can install the

00:26:22,269 --> 00:26:27,639
current directory so you can just go zip

00:26:24,100 --> 00:26:29,019
think gonna have to wait for indexing or

00:26:27,639 --> 00:26:33,419
anything else you just install something

00:26:29,019 --> 00:26:35,679
right away any path will work

00:26:33,419 --> 00:26:36,880
so if bin at the root of all evil my

00:26:35,679 --> 00:26:38,680
next problem is to walk

00:26:36,880 --> 00:26:43,990
up the file tree this is the reverse of

00:26:38,680 --> 00:26:47,650
find so file system parent is the next

00:26:43,990 --> 00:26:49,120
module I rode it scans papa tree so this

00:26:47,650 --> 00:26:51,370
is where I can I can look up and find

00:26:49,120 --> 00:26:55,780
where might I where do I think I might

00:26:51,370 --> 00:26:57,550
find a library and this has now then

00:26:55,780 --> 00:27:02,100
Perl 6 there's even more than even more

00:26:57,550 --> 00:27:04,860
than one way to do this whew I'm halfway

00:27:02,100 --> 00:27:07,690
so multi-method

00:27:04,860 --> 00:27:09,340
this particular version takes a string e

00:27:07,690 --> 00:27:11,950
which is a roll of a thing that can

00:27:09,340 --> 00:27:13,870
certify itself so the rolls are kind of

00:27:11,950 --> 00:27:16,540
nice I can I don't have to check for any

00:27:13,870 --> 00:27:18,310
specific thing or anything derived from

00:27:16,540 --> 00:27:20,490
a string I'm just looking for anything

00:27:18,310 --> 00:27:24,760
that I can stringify

00:27:20,490 --> 00:27:28,270
defaults to all this weird looking thing

00:27:24,760 --> 00:27:30,030
these is a Slurpee hash this takes any

00:27:28,270 --> 00:27:33,580
collection of arguments on the stack

00:27:30,030 --> 00:27:36,190
sucks them up puts them in a hash for me

00:27:33,580 --> 00:27:39,880
at that point you can see what the

00:27:36,190 --> 00:27:41,380
filters do there's at all if you want to

00:27:39,880 --> 00:27:43,120
get everything you find there's

00:27:41,380 --> 00:27:44,830
directories exists I can put more of

00:27:43,120 --> 00:27:47,170
these in here these little things with

00:27:44,830 --> 00:27:50,770
colons after them are are before them

00:27:47,170 --> 00:27:52,120
excuse me our file system tests I always

00:27:50,770 --> 00:27:54,760
know how to compare themselves to these

00:27:52,120 --> 00:27:57,340
things so basically what I say is if you

00:27:54,760 --> 00:28:01,110
want all of the files I'm gonna hand

00:27:57,340 --> 00:28:06,760
back true now on the way back out I

00:28:01,110 --> 00:28:09,430
flattened that hash out the same width

00:28:06,760 --> 00:28:11,410
tells me re dispatch the same thing I

00:28:09,430 --> 00:28:16,540
had here but now I've replaced the

00:28:11,410 --> 00:28:21,070
filter so if your filter was all you've

00:28:16,540 --> 00:28:24,430
now got a value of true the other end of

00:28:21,070 --> 00:28:26,590
this thing takes in any whatever you

00:28:24,430 --> 00:28:30,520
want to give me hey I'll be nice we'll

00:28:26,590 --> 00:28:34,600
take what we can get after that a really

00:28:30,520 --> 00:28:37,930
nice thing about the signatures you can

00:28:34,600 --> 00:28:39,640
recycle values in them so here where I

00:28:37,930 --> 00:28:41,920
have resolved and verbose I can pass

00:28:39,640 --> 00:28:44,880
them straight down to bin to get the

00:28:41,920 --> 00:28:47,140
default I don't have to worry about

00:28:44,880 --> 00:28:50,470
storing them and creating a new variable

00:28:47,140 --> 00:28:52,809
or calling an extra thing with it so

00:28:50,470 --> 00:28:55,929
or the way you order these things in the

00:28:52,809 --> 00:29:01,179
signatures can be really handy when you

00:28:55,929 --> 00:29:03,370
pay attention to it people this came up

00:29:01,179 --> 00:29:06,879
a few times in classes where people say

00:29:03,370 --> 00:29:09,700
how do you tell which one is it's easy

00:29:06,879 --> 00:29:15,909
to run if you give me something with no

00:29:09,700 --> 00:29:19,029
arguments if you just call scan up I've

00:29:15,909 --> 00:29:20,110
got to pick the diversion with the

00:29:19,029 --> 00:29:22,029
default because you didn't give me an

00:29:20,110 --> 00:29:22,659
argument so I'm going to end up with the

00:29:22,029 --> 00:29:24,940
first one

00:29:22,659 --> 00:29:29,049
if you give me something with this

00:29:24,940 --> 00:29:31,269
character string I end up in the first

00:29:29,049 --> 00:29:33,039
one but I can tell the difference

00:29:31,269 --> 00:29:35,529
through the character string it's more

00:29:33,039 --> 00:29:40,419
derived than in any is it has a higher

00:29:35,529 --> 00:29:42,429
score if I don't if you don't give me if

00:29:40,419 --> 00:29:46,750
you give me something that isn't a

00:29:42,429 --> 00:29:50,620
string then I have to go to any land

00:29:46,750 --> 00:29:51,870
because the string doesn't resolve it so

00:29:50,620 --> 00:29:54,389
there's a couple of rules of thumb

00:29:51,870 --> 00:29:57,549
probably if you're using multi methods

00:29:54,389 --> 00:29:59,080
if you're gonna have defaults you have

00:29:57,549 --> 00:30:01,899
to make sure they don't conflict and

00:29:59,080 --> 00:30:03,250
confuse the thing so that you don't you

00:30:01,899 --> 00:30:04,809
have to make sure that the defaults are

00:30:03,250 --> 00:30:06,009
either more derived from one another if

00:30:04,809 --> 00:30:07,779
I had a bunch of these that were all

00:30:06,009 --> 00:30:10,809
stringy equals something it wouldn't be

00:30:07,779 --> 00:30:12,100
able to tell so using the multi methods

00:30:10,809 --> 00:30:13,779
you got to pay a little bit attention to

00:30:12,100 --> 00:30:16,110
how you use to false and the types of

00:30:13,779 --> 00:30:21,519
arguments to make sure that your

00:30:16,110 --> 00:30:24,580
dispatch makes sense the compiler will

00:30:21,519 --> 00:30:26,259
tell you it'll be but it's annoying to

00:30:24,580 --> 00:30:30,549
find that out after you spend half an

00:30:26,259 --> 00:30:32,019
hour typing it all in its now might the

00:30:30,549 --> 00:30:35,769
original version of this because I was

00:30:32,019 --> 00:30:39,039
thinking like this was Perl 5 was that

00:30:35,769 --> 00:30:41,169
you know you passing a block so I had a

00:30:39,039 --> 00:30:43,210
signature I finally figured how to write

00:30:41,169 --> 00:30:45,009
the signature for a thing that's a block

00:30:43,210 --> 00:30:48,090
that takes an i/o and returns a boolean

00:30:45,009 --> 00:30:52,210
and then I realized how stupid that was

00:30:48,090 --> 00:30:55,299
we have smart matches now you don't need

00:30:52,210 --> 00:30:59,860
to wrap everything in a closure one

00:30:55,299 --> 00:31:01,809
level of indirection is a smart match so

00:30:59,860 --> 00:31:03,909
a lot of the things that we did by

00:31:01,809 --> 00:31:05,709
passing around subroutines and

00:31:03,909 --> 00:31:06,879
wanted filters and all the rest of it

00:31:05,709 --> 00:31:09,099
they don't need to be code anymore

00:31:06,879 --> 00:31:11,949
because I can I could just compare

00:31:09,099 --> 00:31:16,659
things the only thing that makes no

00:31:11,949 --> 00:31:18,039
sense as a filter is a string because

00:31:16,659 --> 00:31:19,779
that I could only compare it to the

00:31:18,039 --> 00:31:22,449
literal path that would only match one

00:31:19,779 --> 00:31:24,429
path there's no reason I can just do a

00:31:22,449 --> 00:31:26,409
minus D on the on the path and be done

00:31:24,429 --> 00:31:29,109
with it so this actually works pretty

00:31:26,409 --> 00:31:30,969
well you want to pass a string I know

00:31:29,109 --> 00:31:33,999
that you're labeling a test that I have

00:31:30,969 --> 00:31:40,599
canned if it's not a string whatever

00:31:33,999 --> 00:31:42,969
test you gave me I'll use so no so now

00:31:40,599 --> 00:31:46,629
this pretty quick people have seen

00:31:42,969 --> 00:31:51,489
resolve absolute where I'm starting from

00:31:46,629 --> 00:31:52,809
completely is fun this is this is when

00:31:51,489 --> 00:31:54,819
you do the route is anyone here ever

00:31:52,809 --> 00:31:56,159
tried to resolve a dangling symlink and

00:31:54,819 --> 00:31:59,709
gone to the middle of no place

00:31:56,159 --> 00:32:02,109
yeah well completely will puke if it

00:31:59,709 --> 00:32:04,599
can't completely resolve a link so

00:32:02,109 --> 00:32:08,409
you'll get an error before you look in

00:32:04,599 --> 00:32:10,119
someplace that doesn't exist so where

00:32:08,409 --> 00:32:13,359
I'm gonna start scanning if you wanted

00:32:10,119 --> 00:32:14,699
it resolved I'll do that if not yeah

00:32:13,359 --> 00:32:17,649
you're on your own it's whatever it is

00:32:14,699 --> 00:32:19,679
convert it to an absolute path absolute

00:32:17,649 --> 00:32:23,889
returns a string make an i/o out of it

00:32:19,679 --> 00:32:26,589
at that point at that point if what you

00:32:23,889 --> 00:32:29,769
gave me matches a directory first use of

00:32:26,589 --> 00:32:33,039
a smart match here then I know I can

00:32:29,769 --> 00:32:34,690
start there if it isn't that I have to

00:32:33,039 --> 00:32:36,669
go into its parent to find a directory

00:32:34,690 --> 00:32:39,129
to start scanning out so I can call

00:32:36,669 --> 00:32:43,809
parent are the way I know I'm gonna

00:32:39,129 --> 00:32:45,699
directory at this point gather and loop

00:32:43,809 --> 00:32:50,499
people seen the gathering cake stuff

00:32:45,699 --> 00:32:53,739
people okay a gather is a way of

00:32:50,499 --> 00:32:57,659
accumulating things we've all seen the

00:32:53,739 --> 00:33:01,959
for forever push onto an array and then

00:32:57,659 --> 00:33:03,789
much cleaner gather and take work

00:33:01,959 --> 00:33:06,279
together everything you take gets

00:33:03,789 --> 00:33:07,919
gathered and handed back loop in this

00:33:06,279 --> 00:33:10,929
case runs forever

00:33:07,919 --> 00:33:14,709
which is why you make sure you exit or

00:33:10,929 --> 00:33:17,410
you may not get your answer very soon so

00:33:14,709 --> 00:33:19,900
the gather and take work together loops

00:33:17,410 --> 00:33:23,560
if you're gonna use a loop in this case

00:33:19,900 --> 00:33:28,480
I'm gathering all the paths that match

00:33:23,560 --> 00:33:35,950
your filter and I'm done when I'm at the

00:33:28,480 --> 00:33:39,130
root now one of the options I gave you

00:33:35,950 --> 00:33:40,960
is skip route so if I look if I look at

00:33:39,130 --> 00:33:45,010
I'm at the root and you're skipping the

00:33:40,960 --> 00:33:48,340
route maybe say so but I don't want to

00:33:45,010 --> 00:33:50,350
take it now what I'm actually gonna take

00:33:48,340 --> 00:33:51,910
a check that you're at the root but

00:33:50,350 --> 00:33:53,650
remember you can append something this

00:33:51,910 --> 00:33:57,010
is how you get that live on everything

00:33:53,650 --> 00:33:59,680
so I can do a path to add or not

00:33:57,010 --> 00:34:02,200
whatever that is I compare it to your

00:33:59,680 --> 00:34:04,600
filter if this filter is code it could

00:34:02,200 --> 00:34:07,000
say look in that place Oh see if there's

00:34:04,600 --> 00:34:08,830
an SC directory below it open the config

00:34:07,000 --> 00:34:10,750
file in it and see if it has the you

00:34:08,830 --> 00:34:13,300
know the memory setting I don't care I

00:34:10,750 --> 00:34:15,669
have no way of knowing what you think

00:34:13,300 --> 00:34:20,560
you want all I know is if you match it

00:34:15,669 --> 00:34:22,480
you're getting it nice it's it's a lot

00:34:20,560 --> 00:34:24,330
easier this way we're not passing

00:34:22,480 --> 00:34:28,090
subroutines all over the place

00:34:24,330 --> 00:34:30,130
so this is a working loop that will

00:34:28,090 --> 00:34:34,140
accumulate directories going up the tree

00:34:30,130 --> 00:34:37,870
again to gather and take work together

00:34:34,140 --> 00:34:44,550
the skipping the at the root and ending

00:34:37,870 --> 00:34:44,550
it so you might ask what's it to seek ah

00:34:44,700 --> 00:34:51,460
glad you asked so that would you be

00:34:49,419 --> 00:34:55,240
pretty obvious to everybody it's

00:34:51,460 --> 00:34:58,690
laziness the thing about a seek that is

00:34:55,240 --> 00:35:01,270
different than push onto an array in

00:34:58,690 --> 00:35:02,830
this case what I got was a path to new

00:35:01,270 --> 00:35:06,070
you can see how these paths work by the

00:35:02,830 --> 00:35:08,170
way because there's this one is resolved

00:35:06,070 --> 00:35:09,760
but if it were a relative path I'd have

00:35:08,170 --> 00:35:12,040
the working directory which is how you

00:35:09,760 --> 00:35:14,110
convert it to absolute when you call

00:35:12,040 --> 00:35:16,030
absolute it takes the old working

00:35:14,110 --> 00:35:18,310
directory the object was created in and

00:35:16,030 --> 00:35:20,950
expands it which is neat because you can

00:35:18,310 --> 00:35:22,570
do a change der and still call resolve

00:35:20,950 --> 00:35:27,520
on something and still get the right

00:35:22,570 --> 00:35:29,560
absolute path whew also you notice this

00:35:27,520 --> 00:35:30,999
is a UNIX one if this were VMs a it

00:35:29,560 --> 00:35:34,630
would be something else

00:35:30,999 --> 00:35:36,069
VMs box test this on but what's

00:35:34,630 --> 00:35:36,940
interesting about that though is these

00:35:36,069 --> 00:35:38,200
are on tight

00:35:36,940 --> 00:35:41,229
you've got no bloody idea what you're

00:35:38,200 --> 00:35:43,420
getting back depending on what you took

00:35:41,229 --> 00:35:48,369
depending on how you executed it you

00:35:43,420 --> 00:35:49,059
cannot ask one of these seek items that

00:35:48,369 --> 00:35:50,559
you've taken

00:35:49,059 --> 00:35:52,960
you can't ask what it is because until

00:35:50,559 --> 00:35:56,259
it's constructed you won't know it may

00:35:52,960 --> 00:35:59,079
fail if you had something that was dbi

00:35:56,259 --> 00:36:00,999
ish for all we know in the time it took

00:35:59,079 --> 00:36:02,349
you to actually construct this thing the

00:36:00,999 --> 00:36:04,450
key that you're looking up the database

00:36:02,349 --> 00:36:05,950
might have been deleted you might have

00:36:04,450 --> 00:36:08,589
lost your connection to the database the

00:36:05,950 --> 00:36:10,479
socket might have gone down any kinds of

00:36:08,589 --> 00:36:17,469
things that will blow it up can happen

00:36:10,479 --> 00:36:21,460
to you okay Larry gets this one this is

00:36:17,469 --> 00:36:23,440
beware people who consume sequences if

00:36:21,460 --> 00:36:25,329
you're going to use sequences you're

00:36:23,440 --> 00:36:26,799
probably gonna have catch and try and

00:36:25,329 --> 00:36:29,640
all kinds of fun things around them

00:36:26,799 --> 00:36:32,979
sanity check what you get back that

00:36:29,640 --> 00:36:34,329
laziness is great for performance but it

00:36:32,979 --> 00:36:38,979
means that you might uh might not get

00:36:34,329 --> 00:36:40,509
what you expect testing it two ways I

00:36:38,979 --> 00:36:45,549
can convert everything to array there's

00:36:40,509 --> 00:36:47,769
an eager and then walk down it once I've

00:36:45,549 --> 00:36:49,710
used it I can ask how many are there

00:36:47,769 --> 00:36:52,630
until I've done that I can't

00:36:49,710 --> 00:36:54,880
but again smart matches solve it much

00:36:52,630 --> 00:36:58,089
more easily if I create a list of what I

00:36:54,880 --> 00:37:00,400
expect or I have two of these sequences

00:36:58,089 --> 00:37:01,299
I can smart match them some our match

00:37:00,400 --> 00:37:03,099
will do the right thing it will

00:37:01,299 --> 00:37:06,450
instantiate as much of each is on the

00:37:03,099 --> 00:37:17,200
other though just to get compared so

00:37:06,450 --> 00:37:20,349
more testing if I do a scan up we can I

00:37:17,200 --> 00:37:23,079
can compare what I get scanning up with

00:37:20,349 --> 00:37:25,450
default arguments what I get scanning up

00:37:23,079 --> 00:37:29,049
with the the explicit name of the

00:37:25,450 --> 00:37:31,690
program I should get the same thing one

00:37:29,049 --> 00:37:33,880
has to be one will default to bin one

00:37:31,690 --> 00:37:36,009
will find the parent but I should get

00:37:33,880 --> 00:37:38,700
the same list of directories and

00:37:36,009 --> 00:37:38,700
thankfully

00:37:40,090 --> 00:37:45,280
a pen this is I mean if all this did was

00:37:43,240 --> 00:37:47,140
walk up the directory tree wouldn't be

00:37:45,280 --> 00:37:49,120
very usefully he'd split it on slashes

00:37:47,140 --> 00:37:51,970
so you can stick something on the end of

00:37:49,120 --> 00:37:55,960
it again if I do the same thing with a

00:37:51,970 --> 00:37:57,580
pend going for the program if if you

00:37:55,960 --> 00:38:01,960
enjoy looking at this stuff you'll see a

00:37:57,580 --> 00:38:04,630
live on the end of all of these one

00:38:01,960 --> 00:38:06,250
thing of course there's this is for all

00:38:04,630 --> 00:38:09,490
this more than one way to pass in

00:38:06,250 --> 00:38:11,950
falsity so if I sit Ben if I use find

00:38:09,490 --> 00:38:15,370
Ben verbose two things should happen I

00:38:11,950 --> 00:38:17,830
should have been and I can save her

00:38:15,370 --> 00:38:20,920
boasts arrow Falls for both parens false

00:38:17,830 --> 00:38:22,570
bang for both I should still get the

00:38:20,920 --> 00:38:26,890
same path every time no matter how I

00:38:22,570 --> 00:38:33,100
turn off verbosity so simple check for

00:38:26,890 --> 00:38:36,390
the arguments pragmatic these are cute

00:38:33,100 --> 00:38:38,860
because they run at compile time

00:38:36,390 --> 00:38:40,330
therefore if I give you a subroutine if

00:38:38,860 --> 00:38:42,190
I just say call this and use the

00:38:40,330 --> 00:38:44,080
libraries it's too late the whole point

00:38:42,190 --> 00:38:46,090
of this is having stuff on your path but

00:38:44,080 --> 00:38:50,550
when you do use frog negate it's there

00:38:46,090 --> 00:38:54,700
that actually do use a frog negate here

00:38:50,550 --> 00:38:56,470
so these look a little bit different if

00:38:54,700 --> 00:38:58,780
you want to be able to have something

00:38:56,470 --> 00:39:00,060
that somebody uses it and they get the

00:38:58,780 --> 00:39:02,350
immediate side-effect

00:39:00,060 --> 00:39:04,900
the way I did it here was with the

00:39:02,350 --> 00:39:06,070
export which is the old import which I

00:39:04,900 --> 00:39:10,150
guess meant we had to change at least

00:39:06,070 --> 00:39:12,400
one name in them so first thing you

00:39:10,150 --> 00:39:14,170
notice export lives outside of the

00:39:12,400 --> 00:39:18,660
module it lives outside of the package

00:39:14,170 --> 00:39:25,000
find bin lives this is normally used for

00:39:18,660 --> 00:39:27,580
the it's normally used for positional x'

00:39:25,000 --> 00:39:29,530
so I don't have all the cute nice cute

00:39:27,580 --> 00:39:31,920
variable names with the colons and all

00:39:29,530 --> 00:39:36,730
the rest of it I have to check for them

00:39:31,920 --> 00:39:42,220
so we have first last any I can say if

00:39:36,730 --> 00:39:44,410
there is a resolved on it use that one

00:39:42,220 --> 00:39:47,950
nice thing the colon cleanser ah I had

00:39:44,410 --> 00:39:52,050
to get one bad one in the you can

00:39:47,950 --> 00:39:52,050
replace parens with a colon

00:39:52,160 --> 00:40:00,410
and that's you know it allows things

00:39:56,420 --> 00:40:02,450
like that to look a lot cleaner or you

00:40:00,410 --> 00:40:04,250
can if you like Python you can even the

00:40:02,450 --> 00:40:07,160
stagger stagger them and do all kinds of

00:40:04,250 --> 00:40:09,380
stuff you can vertically align them but

00:40:07,160 --> 00:40:11,240
it's a lot easier than counting

00:40:09,380 --> 00:40:13,970
you know little bits and pieces of

00:40:11,240 --> 00:40:18,710
things so looking at what I do with find

00:40:13,970 --> 00:40:20,270
in the most of this should be pretty

00:40:18,710 --> 00:40:22,819
straightforward by now I use the parent

00:40:20,270 --> 00:40:27,530
I've got some standard arguments I scan

00:40:22,819 --> 00:40:31,220
up and now for all of the directories I

00:40:27,530 --> 00:40:34,369
found for every file system I get back I

00:40:31,220 --> 00:40:35,869
want to use the registry first thing you

00:40:34,369 --> 00:40:37,220
notice is I'm only going to get one

00:40:35,869 --> 00:40:38,289
registry back for each of these

00:40:37,220 --> 00:40:40,670
directories

00:40:38,289 --> 00:40:42,650
instead of putting a for loop I can use

00:40:40,670 --> 00:40:45,650
given that tells somebody looking at

00:40:42,650 --> 00:40:48,140
this there's gonna be one of these so I

00:40:45,650 --> 00:40:51,319
don't you don't have to think about are

00:40:48,140 --> 00:40:53,390
they really iterating it or not another

00:40:51,319 --> 00:40:55,309
thing you notice this dirt here yeah

00:40:53,390 --> 00:40:58,599
what I got back in this collection of

00:40:55,309 --> 00:41:02,480
paths was a dirt but notice that the

00:40:58,599 --> 00:41:04,279
parameter name is prefix I can make it a

00:41:02,480 --> 00:41:08,660
little more obvious by saying I'm that's

00:41:04,279 --> 00:41:10,130
what I'm using for this also I can

00:41:08,660 --> 00:41:12,319
compress these you know the given is

00:41:10,130 --> 00:41:15,200
kind of if I there's only one I hate

00:41:12,319 --> 00:41:16,970
this I just you know I can see people

00:41:15,200 --> 00:41:22,520
actually now just trying to line up the

00:41:16,970 --> 00:41:24,170
parens replace those was call us I think

00:41:22,520 --> 00:41:26,569
that's pretty readable if you had to

00:41:24,170 --> 00:41:28,430
figure out what that was doing you could

00:41:26,569 --> 00:41:31,549
probably look at it and decide without

00:41:28,430 --> 00:41:36,980
may describe any too much so you can

00:41:31,549 --> 00:41:39,470
write pretty clear parole six and then

00:41:36,980 --> 00:41:40,910
yeah named parameters I said when I did

00:41:39,470 --> 00:41:45,559
the prefix like it's at least one first

00:41:40,910 --> 00:41:48,230
day yeah yes prefix does tie my code to

00:41:45,559 --> 00:41:49,730
the API you've got that dollar colon

00:41:48,230 --> 00:41:54,430
prefix and if you don't want like that

00:41:49,730 --> 00:41:58,190
name but signatures allow that that

00:41:54,430 --> 00:42:02,750
colon dollar part is is a shortcut for

00:41:58,190 --> 00:42:04,490
creating a pair so you can have if you

00:42:02,750 --> 00:42:05,539
want to change every one here ever pick

00:42:04,490 --> 00:42:09,049
a bad variable then

00:42:05,539 --> 00:42:10,639
oh yeah I never okay well then just

00:42:09,049 --> 00:42:13,849
talking to you alone because all these

00:42:10,639 --> 00:42:16,369
guys are perfect you can rename the

00:42:13,849 --> 00:42:19,639
variable in your code without anyone on

00:42:16,369 --> 00:42:21,380
the outside having to know because you

00:42:19,639 --> 00:42:24,259
can call it anything you want I can

00:42:21,380 --> 00:42:28,159
leave the variable alone everyone hates

00:42:24,259 --> 00:42:29,749
the word prefix okay fun call it ad but

00:42:28,159 --> 00:42:32,299
I don't have to modify my code I can

00:42:29,749 --> 00:42:34,099
there's an extra layer of Independence

00:42:32,299 --> 00:42:38,179
there so that if people start using this

00:42:34,099 --> 00:42:41,719
with you know : dollar whatever it's

00:42:38,179 --> 00:42:42,889
still pretty flexible now the one thing

00:42:41,719 --> 00:42:45,889
I didn't show you before there's a map

00:42:42,889 --> 00:42:49,429
for what I export the map is a list of

00:42:45,889 --> 00:42:52,279
names to values and what I do is I

00:42:49,429 --> 00:42:53,299
export the directories I found mainly

00:42:52,279 --> 00:42:56,299
for error messages

00:42:53,299 --> 00:42:59,299
notice the @ sign is part of the name

00:42:56,299 --> 00:43:02,869
you export the sigil along with the name

00:42:59,299 --> 00:43:06,289
of the variable and that is fine bin

00:43:02,869 --> 00:43:08,749
lives right there the export the unit is

00:43:06,289 --> 00:43:11,749
a placeholder the export does all of the

00:43:08,749 --> 00:43:13,069
work there's nothing in the unit testing

00:43:11,749 --> 00:43:15,289
it

00:43:13,069 --> 00:43:16,579
check for directories this is the fun

00:43:15,289 --> 00:43:20,899
part this is where I get to use fraud

00:43:16,579 --> 00:43:25,489
negate this will work if I have two

00:43:20,899 --> 00:43:28,159
modules T live frog negate find Ben frog

00:43:25,489 --> 00:43:29,989
negate notice I was polite I put it in

00:43:28,159 --> 00:43:33,380
fine bin in case there is a core frog

00:43:29,989 --> 00:43:35,719
negate and there's a live find bin

00:43:33,380 --> 00:43:37,579
propagate something running out of a

00:43:35,719 --> 00:43:43,309
test directory should prefer the one

00:43:37,579 --> 00:43:46,849
under T live so this is the test if I

00:43:43,309 --> 00:43:52,609
use the module for the odds of there

00:43:46,849 --> 00:43:54,799
being a core find bin frog negate if I

00:43:52,609 --> 00:43:56,899
can if I can use the module at all fine

00:43:54,799 --> 00:44:01,369
bin lives did its job it put these

00:43:56,899 --> 00:44:03,859
directories into the use lives and if I

00:44:01,369 --> 00:44:06,889
get T lie back as the string I know I

00:44:03,859 --> 00:44:08,839
picked the right one and thankfully I do

00:44:06,889 --> 00:44:10,489
improve 6 by the way looks a lot like

00:44:08,839 --> 00:44:12,799
proven if you're used to using proof

00:44:10,489 --> 00:44:15,669
aside from having to reach for that six

00:44:12,799 --> 00:44:18,349
every time it's it's muscle memory

00:44:15,669 --> 00:44:19,480
that's a working version of fine bin

00:44:18,349 --> 00:44:24,380
lives

00:44:19,480 --> 00:44:27,020
so yeah the the summary is that row six

00:44:24,380 --> 00:44:28,940
is actually quite doable most of the

00:44:27,020 --> 00:44:30,110
improvements in the language or most of

00:44:28,940 --> 00:44:32,450
the changes language seem to be

00:44:30,110 --> 00:44:36,140
improvements the you bang your head

00:44:32,450 --> 00:44:38,900
against quirks a lot less often I mi6

00:44:36,140 --> 00:44:43,220
I'd say that or there's a link in the

00:44:38,900 --> 00:44:45,470
end of this to the the page for this one

00:44:43,220 --> 00:44:47,480
at till dot NL they tells you how Assist

00:44:45,470 --> 00:44:50,510
works one bad thing about assist is it

00:44:47,480 --> 00:44:52,490
says run pearl dock pearl six dock and

00:44:50,510 --> 00:44:56,120
then it fails so you have to go to the

00:44:52,490 --> 00:44:58,300
website to see how to run assist but one

00:44:56,120 --> 00:45:00,530
of those two should help the

00:44:58,300 --> 00:45:04,490
documentation docks that pearl six

00:45:00,530 --> 00:45:07,550
dollar word is actually quite searchable

00:45:04,490 --> 00:45:08,930
now it's got a lot in it whoever has

00:45:07,550 --> 00:45:11,210
been working in that thing deserves a

00:45:08,930 --> 00:45:14,900
beer and they they've made life a lot

00:45:11,210 --> 00:45:18,040
better for all of us one thing I didn't

00:45:14,900 --> 00:45:20,330
show was like the dollar variable

00:45:18,040 --> 00:45:21,860
there's an anonymous variable it's not

00:45:20,330 --> 00:45:24,260
dollar artists quarry it's completely

00:45:21,860 --> 00:45:28,690
anonymous so there's all sorts of fun

00:45:24,260 --> 00:45:32,840
things to mine for this and that's it so

00:45:28,690 --> 00:45:36,980
did that seem useful to people how many

00:45:32,840 --> 00:45:42,890
people are awake okay well I got at

00:45:36,980 --> 00:45:44,210
least a couple of well that's you start

00:45:42,890 --> 00:45:49,910
chewing on somebody's our and we know

00:45:44,210 --> 00:45:52,130
it's gotten really bad just open it and

00:45:49,910 --> 00:45:54,470
find me no idea actually well actually

00:45:52,130 --> 00:45:56,240
even if you did it wouldn't affect my

00:45:54,470 --> 00:45:58,820
life because I would still find the T

00:45:56,240 --> 00:46:02,210
fine bin and I'd still prefer it with my

00:45:58,820 --> 00:46:05,120
path so unless your frog mccade actually

00:46:02,210 --> 00:46:07,870
returns the same path as mine I still

00:46:05,120 --> 00:46:07,870
won't blow the test

00:46:08,090 --> 00:46:11,139
[Music]

00:46:14,960 --> 00:46:22,500
no but see the thing is if you look at

00:46:17,610 --> 00:46:26,430
it the quick thing go to end hang on I'm

00:46:22,500 --> 00:46:28,710
going the wrong direction here the the

00:46:26,430 --> 00:46:31,910
it no buts but look if you look at the

00:46:28,710 --> 00:46:38,420
actual module it returns a constant

00:46:31,910 --> 00:46:41,040
called the the constant from path is

00:46:38,420 --> 00:46:44,130
exported by default as that certain

00:46:41,040 --> 00:46:46,680
these could have been foo and bar it

00:46:44,130 --> 00:46:48,420
it just looked prettier if I had the

00:46:46,680 --> 00:46:49,800
paths in it and I thought it made it a

00:46:48,420 --> 00:46:51,750
little more obvious as somebody else had

00:46:49,800 --> 00:46:55,530
to look at it that what I was trying to

00:46:51,750 --> 00:47:03,570
accomplish I could call the moves and

00:46:55,530 --> 00:47:05,640
whoops but yes if if this used something

00:47:03,570 --> 00:47:08,130
like the absolute path of the module and

00:47:05,640 --> 00:47:11,040
I tried to do that and I could not find

00:47:08,130 --> 00:47:13,950
any way in Perl for a module to report

00:47:11,040 --> 00:47:20,220
to me the path of the module as it was

00:47:13,950 --> 00:47:21,660
being compiled so and most of the time

00:47:20,220 --> 00:47:24,660
you don't really care about that anyway

00:47:21,660 --> 00:47:57,020
so I can see why they didn't do it any

00:47:24,660 --> 00:48:00,120
other yeah what the what yeah yeah yeah

00:47:57,020 --> 00:48:09,920
export if the the way exporter works it

00:48:00,120 --> 00:48:09,920
gets a list yeah oh yeah oh yeah

00:48:11,640 --> 00:48:24,250
with first eye I tried it in Perl 60

00:48:18,000 --> 00:48:28,030
told me to bugger off I didn't I'm told

00:48:24,250 --> 00:48:34,900
that I'm done um when I tried it yet it

00:48:28,030 --> 00:48:40,300
gave me an error no I just I just put

00:48:34,900 --> 00:48:42,940
export actually I followed the

00:48:40,300 --> 00:48:45,520
instructions on Docs that Perl 6 dot org

00:48:42,940 --> 00:48:49,150
that said this was for handling

00:48:45,520 --> 00:48:53,500
positional parameters and I just grabbed

00:48:49,150 --> 00:48:55,750
it as star at arcs I will stick this on

00:48:53,500 --> 00:48:57,490
my SlideShare if anyone looks up

00:48:55,750 --> 00:49:07,599
SlideShare a needle I think probably at

00:48:57,490 --> 00:49:11,760
the top about half an hour know just

00:49:07,599 --> 00:49:11,760

YouTube URL: https://www.youtube.com/watch?v=22F7ku9UcoI


