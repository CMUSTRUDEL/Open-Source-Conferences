Title: [Lightning Talk] Chad Granum - "Goto::File - A Batshit Crazy Idea!"
Publication date: 2019-06-20
Playlist: TPC 2019 in Pittsburgh
Description: 
	An overview of Goto::File and the horrible magic it hides.
Captions: 
	00:00:00,030 --> 00:00:07,350
ok everyone I'm gonna talk to you about

00:00:02,460 --> 00:00:09,599
go to file a batshit crazy idea so what

00:00:07,350 --> 00:00:11,370
is go to file go to file is a module

00:00:09,599 --> 00:00:13,620
that is kind of like the special form of

00:00:11,370 --> 00:00:15,599
go to with functions except instead of

00:00:13,620 --> 00:00:18,119
letting you jump to another function

00:00:15,599 --> 00:00:19,680
without unwinding your stack or adding

00:00:18,119 --> 00:00:21,630
to your stack it lets you jump to a

00:00:19,680 --> 00:00:26,070
different file without changing your

00:00:21,630 --> 00:00:28,890
stack so basically don't use go to file

00:00:26,070 --> 00:00:30,269
and the script or whatever you want to

00:00:28,890 --> 00:00:32,099
load and then everything after that

00:00:30,269 --> 00:00:35,820
won't run it'll instead be parsing your

00:00:32,099 --> 00:00:39,390
new file how the hell is this useful in

00:00:35,820 --> 00:00:41,670
most cases it's not but go-to file is

00:00:39,390 --> 00:00:44,520
actually used by test to harness or yeah

00:00:41,670 --> 00:00:46,020
when it runs in preload mode and the

00:00:44,520 --> 00:00:48,469
reason for that is because a lot of

00:00:46,020 --> 00:00:51,360
tests tests stack traces or they

00:00:48,469 --> 00:00:52,770
generate warnings or exceptions and need

00:00:51,360 --> 00:00:54,930
to make sure that those are reported to

00:00:52,770 --> 00:00:56,789
the right file line number and package

00:00:54,930 --> 00:00:58,530
well if you're pre loading stuff in a

00:00:56,789 --> 00:01:00,030
perl script then forking and running the

00:00:58,530 --> 00:01:02,309
thing you have introduced a new stack

00:01:00,030 --> 00:01:04,769
trace which will break a lot of tests so

00:01:02,309 --> 00:01:06,479
test to harness uses go-to file to make

00:01:04,769 --> 00:01:08,610
sure it can launch your file after

00:01:06,479 --> 00:01:12,060
preload without introducing any new

00:01:08,610 --> 00:01:16,140
stack frames into the scope so how does

00:01:12,060 --> 00:01:17,670
it work lots of black magic so there's a

00:01:16,140 --> 00:01:18,780
lot of things to cover on this and I'm

00:01:17,670 --> 00:01:20,700
going to go through them one by one

00:01:18,780 --> 00:01:22,470
but first of all you statements are

00:01:20,700 --> 00:01:25,200
begin booked so they execute before any

00:01:22,470 --> 00:01:28,460
other lines are parsed so go to file

00:01:25,200 --> 00:01:30,869
inserts a source filter cue the booze

00:01:28,460 --> 00:01:32,610
but this doesn't suffer from all the

00:01:30,869 --> 00:01:35,220
issues source filters usually suffer

00:01:32,610 --> 00:01:37,350
from because I'm not trying to parse any

00:01:35,220 --> 00:01:39,360
Perl or rewrite any Perl instead I'm

00:01:37,350 --> 00:01:44,100
throwing away a lot of Perl and loading

00:01:39,360 --> 00:01:45,930
another Perl so things to consider the

00:01:44,100 --> 00:01:47,220
idea the concept of this is actually

00:01:45,930 --> 00:01:48,479
pretty simple especially since we

00:01:47,220 --> 00:01:50,790
already have the special form of go-to

00:01:48,479 --> 00:01:54,000
but to actually implement this required

00:01:50,790 --> 00:01:56,100
a lot of magic and now I'm going to

00:01:54,000 --> 00:01:57,390
explain each piece of magic in detail

00:01:56,100 --> 00:01:57,869
before showing you how it all goes

00:01:57,390 --> 00:02:00,420
together

00:01:57,869 --> 00:02:01,979
first of all forking in a begin block

00:02:00,420 --> 00:02:06,360
because all this has to happen at the

00:02:01,979 --> 00:02:09,509
begin time so one thing to note that if

00:02:06,360 --> 00:02:11,670
you four can to begin block the rest of

00:02:09,509 --> 00:02:13,150
your file will only be parsed by one of

00:02:11,670 --> 00:02:14,680
the two processes because they

00:02:13,150 --> 00:02:18,909
share the file handle and they both get

00:02:14,680 --> 00:02:20,470
fast forwarded as you proceed I reported

00:02:18,909 --> 00:02:26,260
this as a bug and it was closed as not a

00:02:20,470 --> 00:02:27,939
bug file and line number in Perl if you

00:02:26,260 --> 00:02:30,159
suddenly switched to another perl script

00:02:27,939 --> 00:02:31,870
code wise via source filter it's gonna

00:02:30,159 --> 00:02:33,549
still think you're on the old file and

00:02:31,870 --> 00:02:36,069
line number but thankfully this is Perl

00:02:33,549 --> 00:02:38,230
and you can do almost anything so you

00:02:36,069 --> 00:02:39,819
can have this special comment that is

00:02:38,230 --> 00:02:42,579
not truly a comment that tells Braille

00:02:39,819 --> 00:02:44,349
hey you are actually on line 42 of life

00:02:42,579 --> 00:02:48,459
the universe and everything not whatever

00:02:44,349 --> 00:02:50,799
you were at before data a lot of people

00:02:48,459 --> 00:02:52,780
don't realize but the under but the data

00:02:50,799 --> 00:02:55,420
file handle is just a regular file

00:02:52,780 --> 00:03:00,760
handle you can close it and reopen it to

00:02:55,420 --> 00:03:02,349
whatever you want it to be so prou can

00:03:00,760 --> 00:03:04,000
do some strange things for instance if

00:03:02,349 --> 00:03:05,799
you open a file handle and then read

00:03:04,000 --> 00:03:08,200
from that file handle inside a begin

00:03:05,799 --> 00:03:10,599
block all your exceptions are going to

00:03:08,200 --> 00:03:12,519
append this at the end telling you what

00:03:10,599 --> 00:03:15,970
file handle you last read from and what

00:03:12,519 --> 00:03:17,590
line once again this will screw up tests

00:03:15,970 --> 00:03:19,690
if you suddenly have this injected into

00:03:17,590 --> 00:03:21,699
all your errors and warnings but you can

00:03:19,690 --> 00:03:24,040
fix that because perl has the magic

00:03:21,699 --> 00:03:26,379
dollar dot variable if you localize that

00:03:24,040 --> 00:03:28,859
first it will no longer care that you

00:03:26,379 --> 00:03:31,840
have opened and read from a file

00:03:28,859 --> 00:03:33,280
so making a module do stuff when loaded

00:03:31,840 --> 00:03:35,109
we're at a Perl conference I don't think

00:03:33,280 --> 00:03:38,500
I need to explain how import works to

00:03:35,109 --> 00:03:40,239
all you guys so now I'm putting it all

00:03:38,500 --> 00:03:44,109
together this is first of two slides

00:03:40,239 --> 00:03:46,209
that do that so we got an import and it

00:03:44,109 --> 00:03:48,729
finds out what file you want to suddenly

00:03:46,209 --> 00:03:51,370
switch to and it generates an ID for us

00:03:48,729 --> 00:03:53,500
to come look up some state later then it

00:03:51,370 --> 00:03:55,659
creates a new header to switch you back

00:03:53,500 --> 00:03:58,599
to package Maine close your data file

00:03:55,659 --> 00:04:00,340
handle and reopen the data file handle

00:03:58,599 --> 00:04:02,829
to something we've stored in our ID and

00:04:00,340 --> 00:04:04,599
then set the line number and file name

00:04:02,829 --> 00:04:06,909
and now all this our lines that will be

00:04:04,599 --> 00:04:09,069
executed later then we insert our source

00:04:06,909 --> 00:04:10,690
filter and give it information on how to

00:04:09,069 --> 00:04:15,729
get to all this stuff we just kind of

00:04:10,690 --> 00:04:18,130
typed out finally the filter sub what it

00:04:15,729 --> 00:04:19,840
does is first it will do some init and

00:04:18,130 --> 00:04:21,430
tune it what it will do is filter read

00:04:19,840 --> 00:04:23,409
which means read the rest of the file

00:04:21,430 --> 00:04:25,360
you were about to filter in most cases

00:04:23,409 --> 00:04:27,050
filters then parse that and modify it in

00:04:25,360 --> 00:04:29,180
our case we just throw it all away

00:04:27,050 --> 00:04:31,789
we do not care what isn't left in the

00:04:29,180 --> 00:04:35,240
original file we localize dollar dot we

00:04:31,789 --> 00:04:36,860
open the new file and then we start to

00:04:35,240 --> 00:04:38,810
output that header that we've made on

00:04:36,860 --> 00:04:40,460
the previous slide and then when that

00:04:38,810 --> 00:04:42,860
header is done it proceeds to then

00:04:40,460 --> 00:04:45,740
return line by line every line in the

00:04:42,860 --> 00:04:47,539
file and suddenly you have not

00:04:45,740 --> 00:04:48,830
introduced any new scopes your file on

00:04:47,539 --> 00:04:50,419
line number are correct your error

00:04:48,830 --> 00:04:52,610
messages are correct everything is

00:04:50,419 --> 00:04:54,530
correct but you are now in a new file

00:04:52,610 --> 00:04:56,539
running as though you had started Perl

00:04:54,530 --> 00:04:58,729
with that file except anything you

00:04:56,539 --> 00:05:02,389
preload it is still there and this is

00:04:58,729 --> 00:05:06,370
the god-awful magic that allows ya to

00:05:02,389 --> 00:05:06,370

YouTube URL: https://www.youtube.com/watch?v=LLCPbw0bWHk


