Title: M. Scott Ford - "Building a Bridge to a Legacy Application"
Publication date: 2019-06-20
Playlist: TPC 2019 in Pittsburgh
Description: 
	My team loves working on legacy code projects. It's all that we do. That's why a friend of mine reached out to us for some help.

His startup was building out a universal API across a very fragmented industry with little to no interoperability or standards. Up until now, integrating with the systems in that industry had been pretty easy, because the companies that built them were willing to help.

But now he'd found one that wasn't willing to help. There was no obvious API for getting data out of the legacy application so that it could be exposed via his company's API. A big client for his company was riding on his ability to be able to pull this off. He remembered how much I loved a challenge and how much my team loved legacy code, so he figured we were his best shot.

The goal was to be able to read from the application's database.

In this talk, I'll cover
the different approaches that we took
the one we really wanted to try because we thought it would be fun
the approaches that we needed to try before we could attempt the fun one
the excitement that we felt while working on it
the grind toward completion once the big technical hurdle was crossed
the sense of achievement when we got a read-only solution built
the hope that we'd get the green light to start working on a read-write solution
the disappointment when the plug got pulled and we weren't authorized to proceed any further
It was a fun journey, and I'd love to be able to share it.
Captions: 
	00:00:00,319 --> 00:00:06,660
hello thanks for having me um that's my

00:00:03,659 --> 00:00:08,860
first Yap see so thanks everyone for

00:00:06,660 --> 00:00:10,830
being so welcoming yeah thanks

00:00:08,860 --> 00:00:13,139
[Applause]

00:00:10,830 --> 00:00:15,089
so just a quick show of hands how many

00:00:13,139 --> 00:00:18,869
people in the room identify themselves

00:00:15,089 --> 00:00:21,600
as a software developer okay and of you

00:00:18,869 --> 00:00:25,140
who enjoys working on our project that

00:00:21,600 --> 00:00:27,240
you inherited from someone else okay

00:00:25,140 --> 00:00:29,340
this is more hands like percentage-wise

00:00:27,240 --> 00:00:30,439
than ever so like so it's like I think

00:00:29,340 --> 00:00:33,059
it says something about this community

00:00:30,439 --> 00:00:34,500
usually I get between like five or ten

00:00:33,059 --> 00:00:36,540
percent of respondents but they're

00:00:34,500 --> 00:00:39,800
usually pretty enthusiastic like I got

00:00:36,540 --> 00:00:49,469
one very enthusiastic hand in the back

00:00:39,800 --> 00:00:53,219
so that's what that's what yes am I too

00:00:49,469 --> 00:00:58,910
quiet yeah okay yeah I'm kind of

00:00:53,219 --> 00:01:01,620
soft-spoken so thanks awesome so I

00:00:58,910 --> 00:01:05,670
absolutely love working on projects like

00:01:01,620 --> 00:01:07,170
that they're my favorite and it's

00:01:05,670 --> 00:01:09,000
something like I get giddy about I love

00:01:07,170 --> 00:01:11,510
to dive into a code base that I have no

00:01:09,000 --> 00:01:14,130
experience with figure out my way around

00:01:11,510 --> 00:01:16,049
fix some bugs make some improvements do

00:01:14,130 --> 00:01:18,180
some refactoring write some tests those

00:01:16,049 --> 00:01:19,140
are all things that I like those that's

00:01:18,180 --> 00:01:22,860
the kind of work that I really enjoy

00:01:19,140 --> 00:01:24,360
doing new feature work is awesome

00:01:22,860 --> 00:01:26,159
but it's not what really gets me excited

00:01:24,360 --> 00:01:27,900
like figuring out how to add a new

00:01:26,159 --> 00:01:29,490
feature into an existing system that

00:01:27,900 --> 00:01:30,960
does get me excited

00:01:29,490 --> 00:01:33,420
so like building something brand new

00:01:30,960 --> 00:01:35,820
from scratch like not not that's not

00:01:33,420 --> 00:01:37,619
what gets me up in the morning and I

00:01:35,820 --> 00:01:40,590
like doing that so much that I decided

00:01:37,619 --> 00:01:44,399
to to co-found a company that focuses

00:01:40,590 --> 00:01:47,040
exclusively on that we don't build new

00:01:44,399 --> 00:01:49,350
new systems from scratch our philosophy

00:01:47,040 --> 00:01:50,720
out about software element is that there

00:01:49,350 --> 00:01:53,220
are two kinds of software developers

00:01:50,720 --> 00:01:56,460
there are makers and there are menders

00:01:53,220 --> 00:01:58,350
and the makers love building new things

00:01:56,460 --> 00:02:00,119
from scratch they love that creation

00:01:58,350 --> 00:02:02,909
they they get a lot of joy from that

00:02:00,119 --> 00:02:04,590
creation they they like getting

00:02:02,909 --> 00:02:07,049
something - about an 80% solution then

00:02:04,590 --> 00:02:09,929
moving on to the next thing whereas a

00:02:07,049 --> 00:02:11,580
mender loves the art of refining they

00:02:09,929 --> 00:02:13,980
like taking something and improving upon

00:02:11,580 --> 00:02:16,890
it polishing it finishing it and making

00:02:13,980 --> 00:02:18,390
some making it more stable you know

00:02:16,890 --> 00:02:24,180
those are all activities that a mender

00:02:18,390 --> 00:02:26,690
really enjoys yeah so today what I'd

00:02:24,180 --> 00:02:29,879
like to tell you is a story about a time

00:02:26,690 --> 00:02:33,330
that my team had to build a bridge to an

00:02:29,879 --> 00:02:35,610
older application and I'm going to talk

00:02:33,330 --> 00:02:37,080
about the challenges we encountered the

00:02:35,610 --> 00:02:41,099
things we tried along the way the things

00:02:37,080 --> 00:02:42,810
we learned and about this particular

00:02:41,099 --> 00:02:44,819
story I'm gonna like I don't want to

00:02:42,810 --> 00:02:46,170
give away the industry that my client

00:02:44,819 --> 00:02:47,640
was working in so I'm gonna be your like

00:02:46,170 --> 00:02:51,269
really really vague of a lot of details

00:02:47,640 --> 00:02:52,500
so please forgive me for that so the

00:02:51,269 --> 00:02:54,390
story starts with an old colleague of

00:02:52,500 --> 00:02:57,209
mine who I'm gonna call Jeff not his

00:02:54,390 --> 00:02:58,800
real name and Jeff and I had worked

00:02:57,209 --> 00:03:01,110
together on a lot of systems in the past

00:02:58,800 --> 00:03:02,580
and he knew that I really loved a

00:03:01,110 --> 00:03:04,050
challenge and that the team that I

00:03:02,580 --> 00:03:09,599
assembled we also really loved the

00:03:04,050 --> 00:03:11,370
challenge and the he was working for a

00:03:09,599 --> 00:03:14,129
start-up who was focused on building a

00:03:11,370 --> 00:03:17,569
Web API Universal a Web API for a very

00:03:14,129 --> 00:03:20,040
fragmented industry and an industry that

00:03:17,569 --> 00:03:22,830
hasn't really innovated much over over

00:03:20,040 --> 00:03:26,250
its lifetime and some of the constraints

00:03:22,830 --> 00:03:27,690
about this industry the systems that

00:03:26,250 --> 00:03:30,840
they're working with are usually in

00:03:27,690 --> 00:03:34,470
physical locations involves interacting

00:03:30,840 --> 00:03:37,019
with the general public and it involves

00:03:34,470 --> 00:03:39,810
a you know staff at that physical

00:03:37,019 --> 00:03:42,599
location you know using using these

00:03:39,810 --> 00:03:46,909
systems to provide value for the

00:03:42,599 --> 00:03:50,090
customers to come in off the street and

00:03:46,909 --> 00:03:52,560
the vendors in this in this industry

00:03:50,090 --> 00:03:53,819
we're not very well known for adding

00:03:52,560 --> 00:03:56,849
adding new features and kind of

00:03:53,819 --> 00:03:59,069
innovating on top of our platforms but a

00:03:56,849 --> 00:04:01,159
lot of the organizations that we're

00:03:59,069 --> 00:04:03,659
using them really really wanted that

00:04:01,159 --> 00:04:07,500
this was also a very sticky industry

00:04:03,659 --> 00:04:09,659
with a lot of very unsatisfied users of

00:04:07,500 --> 00:04:13,830
all the vendors in that industry

00:04:09,659 --> 00:04:15,420
if you surveyed them a very large number

00:04:13,830 --> 00:04:16,709
of respondents would say that they're

00:04:15,420 --> 00:04:18,509
extremely dissatisfied with their

00:04:16,709 --> 00:04:19,650
current vendor well you would also ask

00:04:18,509 --> 00:04:21,030
them whether they're likely to change

00:04:19,650 --> 00:04:23,400
vendors in the next five years they

00:04:21,030 --> 00:04:25,110
would say they're extremely unlikely so

00:04:23,400 --> 00:04:27,800
even though most of the

00:04:25,110 --> 00:04:30,210
people who are using using these vendors

00:04:27,800 --> 00:04:34,830
are extremely dissatisfied they're also

00:04:30,210 --> 00:04:36,960
extremely unlikely to make a switch so

00:04:34,830 --> 00:04:38,879
it's a very tough market to enter into

00:04:36,960 --> 00:04:42,870
and in terms of like standing up a new

00:04:38,879 --> 00:04:44,280
vertical so that's where my friends

00:04:42,870 --> 00:04:46,949
company's idea was to come and like

00:04:44,280 --> 00:04:48,599
build a layer across all of these

00:04:46,949 --> 00:04:50,699
vendors that's you know one kind of

00:04:48,599 --> 00:04:56,789
consistent interface that people could

00:04:50,699 --> 00:04:58,379
then innovate on top of the typical

00:04:56,789 --> 00:05:00,599
integration the kind of the way that

00:04:58,379 --> 00:05:03,590
these were built is there would be some

00:05:00,599 --> 00:05:05,819
form of connector that built it that

00:05:03,590 --> 00:05:07,909
communicated in with a vendor system and

00:05:05,819 --> 00:05:13,500
Jeff's company had built a lot of these

00:05:07,909 --> 00:05:15,060
and the the connector would usually be

00:05:13,500 --> 00:05:16,759
installed like directly on the system

00:05:15,060 --> 00:05:18,960
that the vendor system is installed on

00:05:16,759 --> 00:05:21,690
and that connector had its own kind of

00:05:18,960 --> 00:05:24,289
own contract its own API between the

00:05:21,690 --> 00:05:29,069
public web api that Jeff's company sold

00:05:24,289 --> 00:05:32,909
and he wanted to integrate in with a new

00:05:29,069 --> 00:05:34,469
client a client approached him but they

00:05:32,909 --> 00:05:36,090
were using a vendor that his company had

00:05:34,469 --> 00:05:38,849
integrate hadn't not integrated him with

00:05:36,090 --> 00:05:40,830
before and when he started digging and

00:05:38,849 --> 00:05:43,080
learning more about the system he was

00:05:40,830 --> 00:05:46,740
told that this particular vendor has no

00:05:43,080 --> 00:05:48,449
SDK they have no way to integrate in

00:05:46,740 --> 00:05:50,550
with their system and this is gonna be a

00:05:48,449 --> 00:05:52,020
really big client for Jeff's company he

00:05:50,550 --> 00:05:54,599
was really hoping to find a way to land

00:05:52,020 --> 00:05:56,360
them his team had tried some experiments

00:05:54,599 --> 00:05:58,199
they weren't really getting anywhere

00:05:56,360 --> 00:06:00,180
everyone they tried calling it the

00:05:58,199 --> 00:06:02,699
vendors company was you know pretty

00:06:00,180 --> 00:06:03,930
silent on the fact of you know whether

00:06:02,699 --> 00:06:05,129
or not there was an API that might have

00:06:03,930 --> 00:06:07,860
been hidden that maybe they need to pay

00:06:05,129 --> 00:06:10,740
somebody to get access to you know there

00:06:07,860 --> 00:06:11,969
was a lot of from from the looks of it

00:06:10,740 --> 00:06:16,259
there was no way for them to get at the

00:06:11,969 --> 00:06:17,610
information so he wanted to see if you

00:06:16,259 --> 00:06:18,719
know if my team would be interested in

00:06:17,610 --> 00:06:20,879
digging in and trying to figure out how

00:06:18,719 --> 00:06:23,479
to get the data that his system needed

00:06:20,879 --> 00:06:27,060
to put together a read-only prototype

00:06:23,479 --> 00:06:32,250
for this API with the idea of one day

00:06:27,060 --> 00:06:33,839
building a readwrite solution so there

00:06:32,250 --> 00:06:37,080
were some details that we we did know

00:06:33,839 --> 00:06:39,060
about this about the system it ran on a

00:06:37,080 --> 00:06:41,580
Windows desktop class

00:06:39,060 --> 00:06:43,560
class you know server in quotes it

00:06:41,580 --> 00:06:45,870
wasn't a server version the us it was a

00:06:43,560 --> 00:06:49,499
desktop version of the OS but it was

00:06:45,870 --> 00:06:51,840
serving a server function it had some

00:06:49,499 --> 00:06:54,779
way of storing its data some mechanism

00:06:51,840 --> 00:06:56,729
for data storage but we didn't really

00:06:54,779 --> 00:06:58,469
know what that was we didn't know it

00:06:56,729 --> 00:07:00,509
didn't require an extra box so whatever

00:06:58,469 --> 00:07:03,360
was storing the data it was getting

00:07:00,509 --> 00:07:05,189
stored directly on that desktop there

00:07:03,360 --> 00:07:06,719
was an admin UI that could be accessed

00:07:05,189 --> 00:07:08,430
from a different either of that same

00:07:06,719 --> 00:07:11,699
Windows desktop or a different Windows

00:07:08,430 --> 00:07:14,370
desktop on the network and then lots of

00:07:11,699 --> 00:07:17,400
other Windows desktops and other devices

00:07:14,370 --> 00:07:27,719
would then communicate with that you

00:07:17,400 --> 00:07:29,400
know server so we we dug in and we took

00:07:27,719 --> 00:07:32,250
a look at like so what what are some of

00:07:29,400 --> 00:07:35,159
our options for attacking the system so

00:07:32,250 --> 00:07:37,650
we came up with several ideas we could

00:07:35,159 --> 00:07:39,569
try to hunt for an undocumented SDK so

00:07:37,650 --> 00:07:41,939
basically assumption that the team that

00:07:39,569 --> 00:07:45,479
was working on it had some form of like

00:07:41,939 --> 00:07:46,830
building abstractions and that somewhere

00:07:45,479 --> 00:07:49,080
buried beneath the covers if we go

00:07:46,830 --> 00:07:50,550
looking for it deeply enough we'll find

00:07:49,080 --> 00:07:52,080
whatever that team is using to make

00:07:50,550 --> 00:07:55,979
their lives easier and then we can use

00:07:52,080 --> 00:07:57,750
it and we can use it instead we can try

00:07:55,979 --> 00:07:59,370
to find the libraries that communicate

00:07:57,750 --> 00:08:02,250
with its database and just communicate

00:07:59,370 --> 00:08:04,339
with its database directly and so you

00:08:02,250 --> 00:08:06,750
know that was another idea we had

00:08:04,339 --> 00:08:09,110
another idea that we thought I was

00:08:06,750 --> 00:08:12,300
screen actually screen scraping the UI

00:08:09,110 --> 00:08:13,740
so you know we could tell by interacting

00:08:12,300 --> 00:08:16,379
with the admin user interface and by

00:08:13,740 --> 00:08:18,270
running the the client applications that

00:08:16,379 --> 00:08:22,319
all the pieces of data that we needed to

00:08:18,270 --> 00:08:23,819
expose to the Web API were there and you

00:08:22,319 --> 00:08:26,550
know we could we could mutate them we

00:08:23,819 --> 00:08:27,899
could see them on the screen so you know

00:08:26,550 --> 00:08:30,180
that was one of the ideas that we had

00:08:27,899 --> 00:08:31,469
was maybe we can do that and we're

00:08:30,180 --> 00:08:33,360
really really excited about what we

00:08:31,469 --> 00:08:35,099
really hope we might get to do was

00:08:33,360 --> 00:08:36,570
actually you know figure out where the

00:08:35,099 --> 00:08:39,240
data is actually stored and at a very

00:08:36,570 --> 00:08:42,930
raw form and reverse engineer it's the

00:08:39,240 --> 00:08:45,839
base file format we did some quick

00:08:42,930 --> 00:08:47,370
experiments and discovered that screen

00:08:45,839 --> 00:08:47,730
scraping wasn't going wasn't going to

00:08:47,370 --> 00:08:48,839
work

00:08:47,730 --> 00:08:50,130
and there are a number of technical

00:08:48,839 --> 00:08:52,889
reasons for that

00:08:50,130 --> 00:08:55,130
one was the way a lot of the text was

00:08:52,889 --> 00:08:58,829
being rendering wasn't making use of

00:08:55,130 --> 00:09:01,500
normal windows controls it was actually

00:08:58,829 --> 00:09:02,790
just just generating the text inside of

00:09:01,500 --> 00:09:06,690
a bitmap and then rendering that bitmap

00:09:02,790 --> 00:09:09,509
on a screen so right so we would have

00:09:06,690 --> 00:09:11,069
had to do some kind of OCR in order to

00:09:09,509 --> 00:09:11,550
then convert that back into the text we

00:09:11,069 --> 00:09:13,740
would need

00:09:11,550 --> 00:09:15,540
we weren't really confident or in our

00:09:13,740 --> 00:09:17,759
ability to find an OCR library that

00:09:15,540 --> 00:09:22,350
would do that for us with a high enough

00:09:17,759 --> 00:09:25,649
degree of fidelity so we skipped that we

00:09:22,350 --> 00:09:27,360
also noticed that the the client UI we

00:09:25,649 --> 00:09:28,800
would have needed to get some

00:09:27,360 --> 00:09:29,940
information out of that we couldn't get

00:09:28,800 --> 00:09:32,639
everything we needed to have the admin

00:09:29,940 --> 00:09:35,940
UI and one of the features of the admin

00:09:32,639 --> 00:09:37,440
UI was to change the change where user

00:09:35,940 --> 00:09:39,839
interface elements appeared inside the

00:09:37,440 --> 00:09:41,610
client UI so we would that would have

00:09:39,839 --> 00:09:43,199
had an extra degree of complexity for us

00:09:41,610 --> 00:09:44,430
you know to under in terms of our

00:09:43,199 --> 00:09:46,500
understanding the system we would had

00:09:44,430 --> 00:09:48,209
that have to then know how its

00:09:46,500 --> 00:09:49,620
configured to display its information so

00:09:48,209 --> 00:09:53,250
that we could go grab it in the right

00:09:49,620 --> 00:09:55,699
places so definitely a very complicated

00:09:53,250 --> 00:09:58,019
way of having to go about it

00:09:55,699 --> 00:10:00,660
so we came up with this basic plan of

00:09:58,019 --> 00:10:03,449
attack of first we'll try to find an

00:10:00,660 --> 00:10:05,490
undocumented SDK if that doesn't work

00:10:03,449 --> 00:10:06,569
then we'll try to find the libraries

00:10:05,490 --> 00:10:10,319
that communicate directly with the

00:10:06,569 --> 00:10:11,759
database and if that doesn't work then

00:10:10,319 --> 00:10:14,250
we'll get to the fun part hopefully

00:10:11,759 --> 00:10:17,970
which will be review us attempting to

00:10:14,250 --> 00:10:20,069
reverse-engineer the file format so

00:10:17,970 --> 00:10:21,810
first it was like alright maybe there's

00:10:20,069 --> 00:10:26,220
an SDK let's go hunting for it so how do

00:10:21,810 --> 00:10:28,649
how do you go hunting for an SDK so we

00:10:26,220 --> 00:10:31,339
visually skimmed the installation

00:10:28,649 --> 00:10:33,689
directory looking for anything obvious

00:10:31,339 --> 00:10:35,430
one thing we did find was evidence a

00:10:33,689 --> 00:10:38,639
very very old tooling does anybody the

00:10:35,430 --> 00:10:41,279
audience recognize this icon yeah okay I

00:10:38,639 --> 00:10:43,529
see a couple of gets some chuckles so

00:10:41,279 --> 00:10:46,589
this is the the default executable icon

00:10:43,529 --> 00:10:47,970
for very very old versions of Visual C++

00:10:46,589 --> 00:10:51,329
when you're working with MFC

00:10:47,970 --> 00:10:53,040
specifically and many of the executables

00:10:51,329 --> 00:10:55,730
that were in this directory had that

00:10:53,040 --> 00:10:57,990
icon so that gives us some kind of

00:10:55,730 --> 00:11:00,389
indication that a lot of the binaries

00:10:57,990 --> 00:11:02,130
that are in the directory or it were at

00:11:00,389 --> 00:11:04,910
least at one point in time built with

00:11:02,130 --> 00:11:04,910
incredibly old tools

00:11:05,820 --> 00:11:10,680
the windows SEK has a utility called

00:11:07,410 --> 00:11:12,540
dump Ben and you can use this to get you

00:11:10,680 --> 00:11:14,550
know lots of information out of dll's

00:11:12,540 --> 00:11:15,720
and executables in terms of what

00:11:14,550 --> 00:11:18,500
functions are in there things you might

00:11:15,720 --> 00:11:21,450
get a call with or without a header file

00:11:18,500 --> 00:11:23,670
so we're and dumping on all the dll's

00:11:21,450 --> 00:11:25,529
and executables that we could find and

00:11:23,670 --> 00:11:27,779
we didn't find anything that looked like

00:11:25,529 --> 00:11:31,320
it had the kind of information we were

00:11:27,779 --> 00:11:33,300
looking for in terms of you know values

00:11:31,320 --> 00:11:34,709
that might indicate it it would contain

00:11:33,300 --> 00:11:37,079
the data we're looking looking to get

00:11:34,709 --> 00:11:39,360
out of it so there was you know nothing

00:11:37,079 --> 00:11:42,209
obvious and that was took took quite a

00:11:39,360 --> 00:11:46,350
long time and so we're like well alright

00:11:42,209 --> 00:11:49,550
so strike out there let's go see if

00:11:46,350 --> 00:11:49,550
they're using an off-the-shelf database

00:11:49,579 --> 00:11:56,250
so we went looking for the database

00:11:52,200 --> 00:11:57,300
access dll to start at first we looked

00:11:56,250 --> 00:11:58,410
for evidence that they might be using

00:11:57,300 --> 00:12:00,329
like some kind of commercial

00:11:58,410 --> 00:12:02,700
off-the-shelf database stored solution

00:12:00,329 --> 00:12:04,800
and if you can name a database we

00:12:02,700 --> 00:12:06,600
weren't able to find evidence of it we

00:12:04,800 --> 00:12:09,300
looked for dBase we looked for access we

00:12:06,600 --> 00:12:13,890
looked for just plain text flat files we

00:12:09,300 --> 00:12:15,570
looked for XML you know pretty much any

00:12:13,890 --> 00:12:16,860
in you know in-memory database or

00:12:15,570 --> 00:12:18,570
embedded database that we might go to

00:12:16,860 --> 00:12:21,839
find we weren't able to find evidence of

00:12:18,570 --> 00:12:23,730
that any of those were being used we

00:12:21,839 --> 00:12:26,730
took a second pass through the dump in

00:12:23,730 --> 00:12:29,130
output and look for anything that looked

00:12:26,730 --> 00:12:30,959
like it might be taking and like an SQL

00:12:29,130 --> 00:12:33,180
expression and getting like a chunk of

00:12:30,959 --> 00:12:35,459
data back or just something that might

00:12:33,180 --> 00:12:36,870
be just giving Rahl chunks of data or

00:12:35,459 --> 00:12:40,019
just being used purely for all data

00:12:36,870 --> 00:12:41,880
access we didn't find any of that we did

00:12:40,019 --> 00:12:44,339
find a few dotnet DLLs that we missed

00:12:41,880 --> 00:12:46,589
the first time we tried to decompile

00:12:44,339 --> 00:12:49,620
these they were so obfuscated that it

00:12:46,589 --> 00:12:51,870
broke all of the all the D compilers

00:12:49,620 --> 00:12:54,269
that we had access to so that started to

00:12:51,870 --> 00:12:55,290
give us an indication that the team it

00:12:54,269 --> 00:12:58,110
seemed that we were kind of virtually

00:12:55,290 --> 00:13:00,449
fighting against didn't really want us

00:12:58,110 --> 00:13:03,300
to attempt what we were trying to trying

00:13:00,449 --> 00:13:06,600
to do but again we were left with

00:13:03,300 --> 00:13:09,510
nothing obvious so at this point we kind

00:13:06,600 --> 00:13:10,709
of like through a mental party and you

00:13:09,510 --> 00:13:13,020
know got really excited because because

00:13:10,709 --> 00:13:14,220
next is like okay let's let's attack

00:13:13,020 --> 00:13:16,330
where the data is actually stored on the

00:13:14,220 --> 00:13:17,890
disk we know it's stored somewhere

00:13:16,330 --> 00:13:19,390
let's find that and this is kind of

00:13:17,890 --> 00:13:20,530
where we had an internal fight on the

00:13:19,390 --> 00:13:24,880
team to figure out who's gonna get to

00:13:20,530 --> 00:13:26,410
work on the project so the first

00:13:24,880 --> 00:13:28,270
challenge we had was to like actually

00:13:26,410 --> 00:13:31,900
find the files are getting changed so

00:13:28,270 --> 00:13:33,730
the first strategy we tried for that is

00:13:31,900 --> 00:13:36,190
we copied off the installation directory

00:13:33,730 --> 00:13:38,350
we opened up the admin UI we made one

00:13:36,190 --> 00:13:43,450
change and then we dipped before and

00:13:38,350 --> 00:13:45,610
after and we got lucky there's only one

00:13:43,450 --> 00:13:46,930
file that that changed and it I don't

00:13:45,610 --> 00:13:48,610
remember the exact extension but it was

00:13:46,930 --> 00:13:52,720
some of the really generic like dot bin

00:13:48,610 --> 00:13:53,950
or dot dat like very very nondescript in

00:13:52,720 --> 00:13:56,500
terms of what what might be Kane

00:13:53,950 --> 00:14:02,230
contained in it so we opened up our

00:13:56,500 --> 00:14:03,910
favorite hex editor and for us we were

00:14:02,230 --> 00:14:05,590
working on a Mac and so we were using a

00:14:03,910 --> 00:14:07,780
Cinna lies it Cinna lies it is an

00:14:05,590 --> 00:14:10,540
amazing hex editor if you ever find

00:14:07,780 --> 00:14:12,550
yourself in need of you know tackling

00:14:10,540 --> 00:14:15,970
the kinds of problems it solves it has

00:14:12,550 --> 00:14:17,770
the ability to kind of map out in a very

00:14:15,970 --> 00:14:21,310
color-coded almost syntax highlighting

00:14:17,770 --> 00:14:22,930
structure a binary data data format and

00:14:21,310 --> 00:14:24,970
you can specify your own data

00:14:22,930 --> 00:14:26,800
definitions inside of it and there's

00:14:24,970 --> 00:14:29,830
some rudimentary support for generating

00:14:26,800 --> 00:14:30,490
parsing code from from these definitions

00:14:29,830 --> 00:14:32,410
as well

00:14:30,490 --> 00:14:34,600
there's definitions that ships with so

00:14:32,410 --> 00:14:36,550
you can like open up a jpg file and see

00:14:34,600 --> 00:14:38,590
what that looks like and go to PNG and

00:14:36,550 --> 00:14:40,510
see what that looks like this screenshot

00:14:38,590 --> 00:14:44,370
was one that I took for opening up a

00:14:40,510 --> 00:14:46,930
dBase file that was publicly available

00:14:44,370 --> 00:14:49,330
sinem eyes it is mac OS only so if

00:14:46,930 --> 00:14:51,040
you're not on Mac OS the same company

00:14:49,330 --> 00:14:52,990
makes hex inator it's a much more

00:14:51,040 --> 00:14:56,170
intimidating logo but it does look like

00:14:52,990 --> 00:14:58,720
it's the exact same functionality so

00:14:56,170 --> 00:15:00,550
check that out if you're on that

00:14:58,720 --> 00:15:01,510
platform and I have no affiliation with

00:15:00,550 --> 00:15:03,280
this company I just think it's an

00:15:01,510 --> 00:15:07,020
amazing tool and people should try it if

00:15:03,280 --> 00:15:07,020
they have if they have similar problems

00:15:07,110 --> 00:15:12,820
so the first thing we tried to do in the

00:15:10,840 --> 00:15:14,830
hex editor we just scan and search for

00:15:12,820 --> 00:15:16,150
strings things that might look like they

00:15:14,830 --> 00:15:18,910
might be table names things that might

00:15:16,150 --> 00:15:21,520
look like they might be column names we

00:15:18,910 --> 00:15:23,680
did we did find a big chunk of what

00:15:21,520 --> 00:15:25,960
looked like table names and the section

00:15:23,680 --> 00:15:28,520
where these table names appeared started

00:15:25,960 --> 00:15:30,440
to have a structure to them and

00:15:28,520 --> 00:15:32,120
we were able to like highlight the

00:15:30,440 --> 00:15:35,240
repeating structures and send lies it

00:15:32,120 --> 00:15:36,800
and see that like in addition to the

00:15:35,240 --> 00:15:38,660
table name which was kind of which

00:15:36,800 --> 00:15:40,880
appeared in like a fixed a fixed column

00:15:38,660 --> 00:15:43,190
with that there looked like there was

00:15:40,880 --> 00:15:45,760
some other metadata about about the

00:15:43,190 --> 00:15:45,760
tables as well

00:15:45,890 --> 00:15:50,660
and then we did some experiments with

00:15:48,140 --> 00:15:53,120
you know well maybe maybe some of these

00:15:50,660 --> 00:15:53,720
values or offsets to other locations in

00:15:53,120 --> 00:15:55,760
the file

00:15:53,720 --> 00:15:57,020
and so we went and looked at looked at

00:15:55,760 --> 00:16:00,680
some of those locations and we got lucky

00:15:57,020 --> 00:16:02,510
and found another set of similar

00:16:00,680 --> 00:16:04,070
definitions which looked like they were

00:16:02,510 --> 00:16:05,209
column names so now we're starting to be

00:16:04,070 --> 00:16:07,070
able to drill down like we found the

00:16:05,209 --> 00:16:09,529
tables we found that offset in the file

00:16:07,070 --> 00:16:11,089
where the column names for that table

00:16:09,529 --> 00:16:12,560
are stored and each of those column

00:16:11,089 --> 00:16:14,300
names has a little bit of metadata about

00:16:12,560 --> 00:16:17,660
like what looked like a data type and

00:16:14,300 --> 00:16:20,270
and and you know how many bytes that

00:16:17,660 --> 00:16:22,010
that field might take and so we were

00:16:20,270 --> 00:16:24,529
able to you know kind of keep keep

00:16:22,010 --> 00:16:27,890
churning along that way so this is this

00:16:24,529 --> 00:16:29,450
is very much so next thing we really had

00:16:27,890 --> 00:16:31,399
to do was kind of go through like what I

00:16:29,450 --> 00:16:33,440
thought of as a grind like now we have a

00:16:31,399 --> 00:16:37,190
pretty good idea of how to how to get at

00:16:33,440 --> 00:16:39,110
the data but now we have to like find

00:16:37,190 --> 00:16:41,029
all the fields that we need to we need

00:16:39,110 --> 00:16:42,440
to get out of the system and start to

00:16:41,029 --> 00:16:46,160
map their locations in the files so we

00:16:42,440 --> 00:16:47,930
can read them in a reliable way and for

00:16:46,160 --> 00:16:49,610
this our basic strategy was to make a

00:16:47,930 --> 00:16:51,800
change either than the admin UI or the

00:16:49,610 --> 00:16:53,959
client we would diff that binary file

00:16:51,800 --> 00:16:56,060
before and after and sanitize it has a

00:16:53,959 --> 00:16:57,589
really good mechanism for doing a binary

00:16:56,060 --> 00:17:00,279
diff it'll highlight the exact bytes

00:16:57,589 --> 00:17:02,570
that changed you know before and after

00:17:00,279 --> 00:17:03,649
we would mark that location and sanitize

00:17:02,570 --> 00:17:06,589
it we would give it a name that we

00:17:03,649 --> 00:17:10,459
thought made sense in the grammar and

00:17:06,589 --> 00:17:11,660
they then we repeated we did only focus

00:17:10,459 --> 00:17:13,370
on what we needed we didn't try to like

00:17:11,660 --> 00:17:15,860
ease off exhaustively map out the file

00:17:13,370 --> 00:17:16,970
format that wasn't our goal the you know

00:17:15,860 --> 00:17:21,890
the data we were trying to get out of it

00:17:16,970 --> 00:17:23,270
probably comprised you know maybe 20% of

00:17:21,890 --> 00:17:26,120
the data that was stored in the stored

00:17:23,270 --> 00:17:27,350
in that file so for us to do it

00:17:26,120 --> 00:17:32,620
exhaustively would have would have been

00:17:27,350 --> 00:17:34,550
a waste of time and then we also had to

00:17:32,620 --> 00:17:38,120
ability to some assumptions that we had

00:17:34,550 --> 00:17:40,790
about data file formats we would write

00:17:38,120 --> 00:17:42,710
values in that would force us to test

00:17:40,790 --> 00:17:46,880
assumptions about

00:17:42,710 --> 00:17:48,080
byte order in terms of how the the data

00:17:46,880 --> 00:17:51,440
wasn't stored well that's big-endian or

00:17:48,080 --> 00:17:52,700
little-endian also like is this a

00:17:51,440 --> 00:17:55,429
floating-point you know is this a

00:17:52,700 --> 00:17:58,910
floating-point value is it a decimal

00:17:55,429 --> 00:18:00,860
value is it as a length prefix string is

00:17:58,910 --> 00:18:03,200
it a variable length string well you

00:18:00,860 --> 00:18:04,670
know we we did a lot of tests really

00:18:03,200 --> 00:18:06,350
kind of validate our understanding of

00:18:04,670 --> 00:18:07,429
the the different data types that could

00:18:06,350 --> 00:18:11,690
be stored in the file and how they were

00:18:07,429 --> 00:18:14,360
being stored so then we need to build

00:18:11,690 --> 00:18:19,070
the actual connector to to build out the

00:18:14,360 --> 00:18:20,270
API and so we only implemented the the

00:18:19,070 --> 00:18:22,030
read commands because that you know that

00:18:20,270 --> 00:18:26,390
was our task was to put together a

00:18:22,030 --> 00:18:27,860
read-only prototype the goal was to

00:18:26,390 --> 00:18:31,040
delay a read write experiment until

00:18:27,860 --> 00:18:33,020
after the demo but we did come up with

00:18:31,040 --> 00:18:37,190
some ideas about how to experiment with

00:18:33,020 --> 00:18:38,990
that one idea was to copy the file off

00:18:37,190 --> 00:18:40,730
what the consent the thing we were

00:18:38,990 --> 00:18:43,640
concerned about was that we might be

00:18:40,730 --> 00:18:44,960
writing to at the same time that the the

00:18:43,640 --> 00:18:47,320
actual system is trying to write to it

00:18:44,960 --> 00:18:51,290
and so we're nervous about corruption so

00:18:47,320 --> 00:18:53,360
one one way was to experiment with -

00:18:51,290 --> 00:18:54,830
with OS level locks to see if the OS

00:18:53,360 --> 00:18:56,660
would you know allow us to get a lock on

00:18:54,830 --> 00:18:58,400
the file and keep the other application

00:18:56,660 --> 00:19:00,290
were going to lock on the file and

00:18:58,400 --> 00:19:01,550
hopefully us having a lock and then not

00:19:00,290 --> 00:19:04,520
be able to get one wouldn't cause it to

00:19:01,550 --> 00:19:06,800
crash so it was one idea we had floating

00:19:04,520 --> 00:19:11,900
around another was to just copy copy the

00:19:06,800 --> 00:19:14,120
file off make our writes in the copy and

00:19:11,900 --> 00:19:15,980
then compare to see if if the original

00:19:14,120 --> 00:19:18,860
had change and then we can safely safely

00:19:15,980 --> 00:19:20,450
apply ours within you know within some

00:19:18,860 --> 00:19:22,340
margin for race conditions of course

00:19:20,450 --> 00:19:23,870
so nothing we were too happy about

00:19:22,340 --> 00:19:25,760
didn't didn't definitely didn't feel

00:19:23,870 --> 00:19:29,150
like a foolproof solution but we were

00:19:25,760 --> 00:19:31,309
excited to give it a try anyway so what

00:19:29,150 --> 00:19:33,140
we ended up building out was you know we

00:19:31,309 --> 00:19:34,490
had essentially built a custom SDK that

00:19:33,140 --> 00:19:36,980
we could then drop into the typical

00:19:34,490 --> 00:19:38,510
block diagram and then we're able to

00:19:36,980 --> 00:19:42,200
build build out the connector to

00:19:38,510 --> 00:19:44,630
communicate with the external API we had

00:19:42,200 --> 00:19:47,450
everything working and then we got time

00:19:44,630 --> 00:19:49,580
to actually demo this implementation to

00:19:47,450 --> 00:19:52,960
the end client who was using the vendor

00:19:49,580 --> 00:19:52,960
system at a physical location

00:19:53,170 --> 00:19:59,830
excuse me so the details of the demo

00:19:57,610 --> 00:20:02,440
don't come to me like second and third

00:19:59,830 --> 00:20:04,929
hand so I don't know all of whether how

00:20:02,440 --> 00:20:06,670
accurate all these are the gist of what

00:20:04,929 --> 00:20:08,049
I was told is that there was some

00:20:06,670 --> 00:20:10,299
representative for the vendor a very

00:20:08,049 --> 00:20:14,410
technical representative maybe a CTO who

00:20:10,299 --> 00:20:16,000
was on-site at the at the demo and that

00:20:14,410 --> 00:20:21,070
person was extremely alarmed that we

00:20:16,000 --> 00:20:22,450
were successful and one of the reasons

00:20:21,070 --> 00:20:23,710
that they were extremely alarmed is

00:20:22,450 --> 00:20:26,980
because it turned out there was actually

00:20:23,710 --> 00:20:29,320
an SDK so we had done all this work and

00:20:26,980 --> 00:20:30,760
that there was an SDK but it was like a

00:20:29,320 --> 00:20:33,520
separate installable something that had

00:20:30,760 --> 00:20:37,360
to be installed in addition to what we

00:20:33,520 --> 00:20:39,100
had that we had to work with when they

00:20:37,360 --> 00:20:41,950
found out that we had plans for

00:20:39,100 --> 00:20:44,530
readwrite like their department just

00:20:41,950 --> 00:20:45,910
handed the SDK over and you know so we

00:20:44,530 --> 00:20:47,890
were really able to cut through a lot of

00:20:45,910 --> 00:20:50,320
red tape I guess that may have existed I

00:20:47,890 --> 00:20:51,700
can only speculate about why this was

00:20:50,320 --> 00:20:55,410
happening

00:20:51,700 --> 00:20:58,090
my guess is my best guess is that the

00:20:55,410 --> 00:20:59,650
the marketing department for the vendor

00:20:58,090 --> 00:21:01,870
was really excited about having a

00:20:59,650 --> 00:21:03,370
third-party company come and be able to

00:21:01,870 --> 00:21:06,400
add this capability on to their platform

00:21:03,370 --> 00:21:08,260
without them having to pay for it and

00:21:06,400 --> 00:21:09,940
perhaps their engineers we're a little

00:21:08,260 --> 00:21:11,200
felt a little bristled by that that you

00:21:09,940 --> 00:21:12,460
know something from the outside is able

00:21:11,200 --> 00:21:14,799
to add capability essentially add

00:21:12,460 --> 00:21:18,240
capabilities to their solution without

00:21:14,799 --> 00:21:20,770
them having the input on it I don't know

00:21:18,240 --> 00:21:23,950
our general reaction was a big bummer

00:21:20,770 --> 00:21:27,400
move we're really excited about you know

00:21:23,950 --> 00:21:29,380
be able to push this idea forward and in

00:21:27,400 --> 00:21:31,419
thought you know at the very least are

00:21:29,380 --> 00:21:32,799
read-only solution you know would have

00:21:31,419 --> 00:21:37,390
gone into production and they would have

00:21:32,799 --> 00:21:39,340
been sold in a read-only way and yeah

00:21:37,390 --> 00:21:41,790
but instead everything we all that work

00:21:39,340 --> 00:21:43,990
we did just essentially got thrown away

00:21:41,790 --> 00:21:47,470
so I tried to slow things down is they

00:21:43,990 --> 00:21:51,160
okay okay not so fast not so fast we did

00:21:47,470 --> 00:21:52,230
learn a lot we had a ton of fun along

00:21:51,160 --> 00:21:55,360
the way

00:21:52,230 --> 00:21:57,309
and our work did lead to the best

00:21:55,360 --> 00:22:01,300
possible solution being uncovered like

00:21:57,309 --> 00:22:03,669
the disability the system is much much

00:22:01,300 --> 00:22:05,290
better when there's an often you and

00:22:03,669 --> 00:22:06,040
off-the-shelf SDK provided directly from

00:22:05,290 --> 00:22:08,380
the vendor

00:22:06,040 --> 00:22:09,880
us building an SDK on top of that you

00:22:08,380 --> 00:22:11,470
know there would have been issues with a

00:22:09,880 --> 00:22:16,360
new version coming out and then us

00:22:11,470 --> 00:22:18,669
lagging behind that or you know there's

00:22:16,360 --> 00:22:19,900
likely in an assumption we made even

00:22:18,669 --> 00:22:21,460
though we tried really hard to validate

00:22:19,900 --> 00:22:23,140
them there's likely an assumption that

00:22:21,460 --> 00:22:24,490
we made that was wrong somewhere along

00:22:23,140 --> 00:22:26,919
the way in terms of like how the data is

00:22:24,490 --> 00:22:28,750
being stored and you know and our

00:22:26,919 --> 00:22:31,120
ability to read it out so that likely

00:22:28,750 --> 00:22:33,610
would have been you know a little you

00:22:31,120 --> 00:22:35,679
know some some friction that was created

00:22:33,610 --> 00:22:37,380
along the way and then the readwrite

00:22:35,679 --> 00:22:40,059
solution would've been incredibly risky

00:22:37,380 --> 00:22:41,559
I mean we we certainly would have tried

00:22:40,059 --> 00:22:44,919
we would we would have worked really

00:22:41,559 --> 00:22:46,240
hard to make sure that we had all the

00:22:44,919 --> 00:22:47,290
problems we could think of solve but

00:22:46,240 --> 00:22:49,270
there would have been problems that we

00:22:47,290 --> 00:22:51,549
hadn't thought of and there likely would

00:22:49,270 --> 00:22:52,870
be race conditions that would happen in

00:22:51,549 --> 00:22:55,290
a production environment that would be

00:22:52,870 --> 00:22:59,380
very difficult for us to try to simulate

00:22:55,290 --> 00:23:01,890
so I do think that the the client ended

00:22:59,380 --> 00:23:04,720
up with the the best possible solution

00:23:01,890 --> 00:23:06,660
and so that's the that's the end of my

00:23:04,720 --> 00:23:10,299
story

00:23:06,660 --> 00:23:13,740
my favorite part of a talk is the QA so

00:23:10,299 --> 00:23:16,419
I'd like to facilitate a Q&A Q&A session

00:23:13,740 --> 00:23:19,929
before I do that this is my contact

00:23:16,419 --> 00:23:20,860
information if if like this story sounds

00:23:19,929 --> 00:23:22,510
fun and kind of working on these

00:23:20,860 --> 00:23:25,179
projects sounds fun we have an online

00:23:22,510 --> 00:23:27,070
community that we call legacy code Rox

00:23:25,179 --> 00:23:29,470
and it's hosted at LASEK lazy code dot

00:23:27,070 --> 00:23:33,640
Rox we have a podcast by the same name

00:23:29,470 --> 00:23:35,980
we have virtual weekly meetups no

00:23:33,640 --> 00:23:38,559
mastermind sessions that we encourage

00:23:35,980 --> 00:23:41,020
people to attend so if hanging out on

00:23:38,559 --> 00:23:42,150
slack and chatting about you know

00:23:41,020 --> 00:23:44,020
chatting with other people who enjoy

00:23:42,150 --> 00:23:45,700
banging their heads against like is EQ

00:23:44,020 --> 00:23:54,360
it sounds like fun come check it out and

00:23:45,700 --> 00:23:54,360
say hi so questions oh sorry

00:24:00,040 --> 00:24:03,040
right

00:24:03,920 --> 00:24:06,969
[Music]

00:24:08,810 --> 00:24:18,560
I I don't know my best guess is that it

00:24:16,250 --> 00:24:20,720
was okay so the question was like why

00:24:18,560 --> 00:24:29,540
weren't we able to find like it you know

00:24:20,720 --> 00:24:31,700
if there was an SDK anyway right right

00:24:29,540 --> 00:24:35,630
so like why weren't we able to find any

00:24:31,700 --> 00:24:37,760
kind of SDK if there was one or database

00:24:35,630 --> 00:24:40,040
drive or anything like that my best

00:24:37,760 --> 00:24:43,030
guess is that this was a pre SQL

00:24:40,040 --> 00:24:51,620
database built entirely in-house and

00:24:43,030 --> 00:24:53,300
that don't know right yeah so so the

00:24:51,620 --> 00:24:56,300
off-the-shelf solutions I don't know if

00:24:53,300 --> 00:25:00,140
they use them I have no way of knowing

00:24:56,300 --> 00:25:02,140
my best guess is that the SDK was you

00:25:00,140 --> 00:25:05,780
know a duplicated chunk of code that

00:25:02,140 --> 00:25:07,100
installed separately that in it could be

00:25:05,780 --> 00:25:09,560
the way they were compiling names

00:25:07,100 --> 00:25:13,460
reading mangled you know think things

00:25:09,560 --> 00:25:15,260
were an obvious could've been common on

00:25:13,460 --> 00:25:19,760
the executable yeah so it was no

00:25:15,260 --> 00:25:21,860
external library right that's you know

00:25:19,760 --> 00:25:23,810
so that's my guess and we didn't like we

00:25:21,860 --> 00:25:25,070
didn't go digging like you know we

00:25:23,810 --> 00:25:27,980
didn't try to like attach the assembly

00:25:25,070 --> 00:25:28,940
debugger to the running process and try

00:25:27,980 --> 00:25:31,400
to find where the data was flowing

00:25:28,940 --> 00:25:32,930
through we could have done that once we

00:25:31,400 --> 00:25:34,220
knew like some of the values we're

00:25:32,930 --> 00:25:35,650
looking for we could have we could have

00:25:34,220 --> 00:25:39,010
tried some of that like attach windbg

00:25:35,650 --> 00:25:40,790
you know you know tackle some of those

00:25:39,010 --> 00:25:42,890
you've gone through some of those

00:25:40,790 --> 00:25:45,080
investigations but our ultimate goal was

00:25:42,890 --> 00:25:47,660
to you know get at that data and put

00:25:45,080 --> 00:25:51,280
together a proof of concept to try to

00:25:47,660 --> 00:25:51,280
help the company complete a sale

00:25:58,080 --> 00:26:03,070
no we didn't do that no we didn't we

00:26:00,640 --> 00:26:05,770
didn't try yes tres we just you know we

00:26:03,070 --> 00:26:07,690
just used the we just basically looked

00:26:05,770 --> 00:26:09,400
at the directory and got lucky that the

00:26:07,690 --> 00:26:11,710
file that was being edited it was there

00:26:09,400 --> 00:26:14,530
we're we're gonna try going that route

00:26:11,710 --> 00:26:16,210
if you know if it looked like it's its

00:26:14,530 --> 00:26:17,740
file was not in the directory that it

00:26:16,210 --> 00:26:19,299
was installed into maybe it was like

00:26:17,740 --> 00:26:20,860
being installed in some other location

00:26:19,299 --> 00:26:23,140
or if there's a Windows service that we

00:26:20,860 --> 00:26:24,520
didn't know about that was running then

00:26:23,140 --> 00:26:26,080
we would have explored you know other

00:26:24,520 --> 00:26:27,400
ways to like you know do operating

00:26:26,080 --> 00:26:28,690
systems level tracing to see what kind

00:26:27,400 --> 00:26:30,750
of disk i/o was going on to try to

00:26:28,690 --> 00:26:32,320
figure out like where the file was at

00:26:30,750 --> 00:26:34,780
especially if there might have been

00:26:32,320 --> 00:26:37,510
multiple files I do think we got lucky

00:26:34,780 --> 00:26:38,860
in that it was like only one binary that

00:26:37,510 --> 00:26:40,000
was being modified and it was in the

00:26:38,860 --> 00:26:41,950
installation directory so it was very

00:26:40,000 --> 00:26:44,890
easy to see by just doing a sort on date

00:26:41,950 --> 00:26:47,220
modified to find the file that that

00:26:44,890 --> 00:26:47,220
changed

00:26:53,330 --> 00:26:57,120
you know we never tried writing so we

00:26:55,530 --> 00:26:58,800
only tried reading but yeah you're right

00:26:57,120 --> 00:27:01,860
I mean you know if they did have any

00:26:58,800 --> 00:27:05,700
kind of like cryptographic check or even

00:27:01,860 --> 00:27:07,290
just a you know a simple CRC you know us

00:27:05,700 --> 00:27:09,510
writing to it would have been would have

00:27:07,290 --> 00:27:11,340
been impossible without their keys or

00:27:09,510 --> 00:27:14,480
without knowing the exact algorithm they

00:27:11,340 --> 00:27:14,480
were using to to encode that

00:27:20,850 --> 00:27:23,850
hmm

00:27:23,950 --> 00:27:27,130
yeah so the comment was that you know

00:27:25,960 --> 00:27:28,390
even if they were using an encryption

00:27:27,130 --> 00:27:29,880
you know some kind of encryption

00:27:28,390 --> 00:27:32,020
mechanism or some kind of cryptographic

00:27:29,880 --> 00:27:33,490
signature that signature would have

00:27:32,020 --> 00:27:35,050
would have needed to exist in the file

00:27:33,490 --> 00:27:37,210
system for that for that executable tor

00:27:35,050 --> 00:27:39,330
- right - it so we could have hunted for

00:27:37,210 --> 00:27:39,330
it

00:27:44,280 --> 00:27:47,220
the question is whether we maintain a

00:27:45,510 --> 00:27:48,450
firewall between the people who are

00:27:47,220 --> 00:27:50,070
doing the reverse engineering the people

00:27:48,450 --> 00:27:51,840
who are didn't implementing no is the

00:27:50,070 --> 00:27:58,580
same it was the same a couple of

00:27:51,840 --> 00:28:02,030
individuals that was doing both work so

00:27:58,580 --> 00:28:02,030
any other questions

00:28:07,840 --> 00:28:10,470
okay

00:28:12,390 --> 00:28:19,350
I don't again I wasn't at that meeting I

00:28:14,820 --> 00:28:29,730
don't know like maybe oh so the question

00:28:19,350 --> 00:28:33,000
was yeah the question was right the

00:28:29,730 --> 00:28:34,020
question was you know like did the you

00:28:33,000 --> 00:28:37,740
know was the company trying to get extra

00:28:34,020 --> 00:28:39,299
money for the SDK I I don't know like it

00:28:37,740 --> 00:28:40,440
like yeah you also mentioned that you

00:28:39,299 --> 00:28:41,790
know wondering of where thought there's

00:28:40,440 --> 00:28:47,370
a communication breakdown I think there

00:28:41,790 --> 00:28:48,720
had to be so because the the story as as

00:28:47,370 --> 00:28:50,220
I was told because again I wasn't I

00:28:48,720 --> 00:28:52,620
wasn't part of the communications with

00:28:50,220 --> 00:28:55,710
the vendor like I was you know my client

00:28:52,620 --> 00:28:57,059
was in between us and them and I got the

00:28:55,710 --> 00:28:58,440
impression from them that they had tried

00:28:57,059 --> 00:29:01,080
everything they could think of to try to

00:28:58,440 --> 00:29:03,690
to try to get an SDK or some like

00:29:01,080 --> 00:29:05,400
documentation for how to Brad a you know

00:29:03,690 --> 00:29:06,510
integrate in with the system and they

00:29:05,400 --> 00:29:09,540
were told that it's just not possible

00:29:06,510 --> 00:29:11,179
there's no way and so you know that was

00:29:09,540 --> 00:29:14,190
the reason that we got called was you

00:29:11,179 --> 00:29:15,299
know we liked we liked hearing things

00:29:14,190 --> 00:29:16,110
that are impossible then trying to

00:29:15,299 --> 00:29:22,340
tackle them anyway

00:29:16,110 --> 00:29:22,340
so yeah yeah

00:29:32,790 --> 00:29:37,440
yes the question is whether or not once

00:29:35,100 --> 00:29:38,610
we got access the SDK if that gave us

00:29:37,440 --> 00:29:41,000
any kind of insights and helped us

00:29:38,610 --> 00:29:43,710
validate some of the assumptions we made

00:29:41,000 --> 00:29:44,730
what was kind of sad for my team is we

00:29:43,710 --> 00:29:47,730
didn't get to see that

00:29:44,730 --> 00:29:49,530
so the SDK went to went to Jeff's

00:29:47,730 --> 00:29:51,030
company and once Jeff's company had it

00:29:49,530 --> 00:29:52,290
they're like we've got this so they

00:29:51,030 --> 00:29:54,720
didn't really need our technical

00:29:52,290 --> 00:29:57,750
expertise anymore so pretty much all the

00:29:54,720 --> 00:29:59,340
effort that we did was was tossed they

00:29:57,750 --> 00:30:01,049
may have you know been able to preserve

00:29:59,340 --> 00:30:03,360
some of the logic we wrote and like

00:30:01,049 --> 00:30:05,340
little that little connector app and the

00:30:03,360 --> 00:30:08,130
diagram they could probably could have

00:30:05,340 --> 00:30:09,150
preserved that that we wrote but pretty

00:30:08,130 --> 00:30:12,120
much all they really needed to do at

00:30:09,150 --> 00:30:13,650
that point was to wire that up to the

00:30:12,120 --> 00:30:15,360
actual SDK and then they were when they

00:30:13,650 --> 00:30:17,130
were done so they don't really didn't

00:30:15,360 --> 00:30:18,570
really need us so I never got that that

00:30:17,130 --> 00:30:21,350
insight I guess I could reach out and

00:30:18,570 --> 00:30:21,350
find out but

00:30:26,170 --> 00:30:31,150
all right well there's no other

00:30:27,970 --> 00:30:32,980
questions you know thanks for thanks for

00:30:31,150 --> 00:30:34,750
being awesome hosts at Eddie F sea I've

00:30:32,980 --> 00:30:36,040
really really enjoyed the conference so

00:30:34,750 --> 00:30:38,440
far and I'm sure I'll continue over the

00:30:36,040 --> 00:30:40,270
next full day's please reach out reach

00:30:38,440 --> 00:30:43,660
out if you want to keep the conversation

00:30:40,270 --> 00:30:45,010
going and hopefully like just the pure

00:30:43,660 --> 00:30:47,650
joy that my team had working on this

00:30:45,010 --> 00:30:50,680
comes through you know we'd absolutely

00:30:47,650 --> 00:30:53,220
hate this up like candy there is a one

00:30:50,680 --> 00:30:55,870
of our podcast episodes is an interview

00:30:53,220 --> 00:30:58,450
with the other developer who worked on

00:30:55,870 --> 00:30:59,980
this project and she did like almost all

00:30:58,450 --> 00:31:02,260
the grinding work that it described I

00:30:59,980 --> 00:31:03,970
was I was more involved at like kind of

00:31:02,260 --> 00:31:05,440
a strategy level like kind of helping

00:31:03,970 --> 00:31:07,090
like say like okay let's try this in the

00:31:05,440 --> 00:31:08,500
minutes and then this she was the one

00:31:07,090 --> 00:31:10,770
who really did all the grinding work no

00:31:08,500 --> 00:31:10,770
yeah

00:31:24,510 --> 00:31:28,710
okay so the question is since my company

00:31:26,549 --> 00:31:30,000
focuses on helping with legacy code kind

00:31:28,710 --> 00:31:33,000
of what's the most common problem that

00:31:30,000 --> 00:31:35,730
we help with it's mostly teams getting

00:31:33,000 --> 00:31:38,130
stuck in feeling like they have to I you

00:31:35,730 --> 00:31:39,570
know bulldoze and start over and but not

00:31:38,130 --> 00:31:41,160
wanting to so helping them get unstuck

00:31:39,570 --> 00:31:42,570
from that there are a lot of factors

00:31:41,160 --> 00:31:44,220
that that play into that but that's

00:31:42,570 --> 00:31:45,480
really like the kind of the inflection

00:31:44,220 --> 00:31:47,460
point that a lot of teams get to is

00:31:45,480 --> 00:31:50,190
they're so they're so frustrated with

00:31:47,460 --> 00:31:51,840
the mess that they've got that they're

00:31:50,190 --> 00:31:55,020
they're not sure how to get out of it

00:31:51,840 --> 00:31:56,340
and their intuition is that the only way

00:31:55,020 --> 00:31:59,580
to get out of it is to is to bulldoze

00:31:56,340 --> 00:32:01,679
and start over so one of the things we

00:31:59,580 --> 00:32:03,600
advocate strong for strong strongly for

00:32:01,679 --> 00:32:05,190
is to not bulldoze try to try to find

00:32:03,600 --> 00:32:08,390
ways to harvest what you've got and and

00:32:05,190 --> 00:32:10,740
start making it better by improving in

00:32:08,390 --> 00:32:13,440
so and that that's something that that

00:32:10,740 --> 00:32:14,870
we find a lot of joy in and we've

00:32:13,440 --> 00:32:16,770
noticed that a lot of developers who

00:32:14,870 --> 00:32:19,710
their preference would be to bulldoze

00:32:16,770 --> 00:32:21,570
start over they hate that work so that's

00:32:19,710 --> 00:32:22,770
kind of that's and that ends up being a

00:32:21,570 --> 00:32:24,809
lot of what we see is that kind of

00:32:22,770 --> 00:32:26,490
helping people who hate doing that

00:32:24,809 --> 00:32:28,500
cleanup work not have to not have to

00:32:26,490 --> 00:32:30,390
stress about it anymore and then you

00:32:28,500 --> 00:32:32,040
know we can we can focus on that stuff

00:32:30,390 --> 00:32:33,630
while they're well they're focusing oh

00:32:32,040 --> 00:32:38,929
and continuing to make messes then we

00:32:33,630 --> 00:32:38,929
can help focus on keeping them clean so

00:32:39,740 --> 00:32:47,900
awesome thank you all very much

00:32:41,940 --> 00:32:47,900

YouTube URL: https://www.youtube.com/watch?v=SO3RfVnbXJg


