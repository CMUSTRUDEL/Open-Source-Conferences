Title: James Keenan - Further Adventures in QA for the Perl 5 Core Distribution
Publication date: 2020-06-25
Playlist: TPC 2020 in the Cloud
Description: 
	As compilers like gcc and clang advance, they probe deeper for weaknesses in source code, generating additional build-time warnings.  These enable Perl 5 contributors to write more accurate and portable code.  In this talk we discuss tools we have written in the past year to identify such warnings.

Slides: http://thenceforward.net/perl/tpc/CiC-2020/slides/
Tarball of slides: http://thenceforward.net/perl/tpc/CiC-2020/build-time-warnings.tgz
Text of talk: http://thenceforward.net/perl/tpc/CiC-2020/further-adventures-in-qa.pdf
Captions: 
	00:00:00,000 --> 00:00:04,399
never be ready okay

00:00:06,160 --> 00:00:10,559
good afternoon today's

00:00:09,280 --> 00:00:13,360
presentation is called further

00:00:10,559 --> 00:00:15,759
adventures in qa for the pearl 5 core

00:00:13,360 --> 00:00:19,600
distribution

00:00:15,759 --> 00:00:21,760
compilers like gcc and c lang advance

00:00:19,600 --> 00:00:23,039
they probe deeper for weaknesses in

00:00:21,760 --> 00:00:25,519
source code

00:00:23,039 --> 00:00:26,960
generating additional build time

00:00:25,519 --> 00:00:29,439
warnings

00:00:26,960 --> 00:00:30,000
these enable pearl 5 contributors to

00:00:29,439 --> 00:00:33,520
write more

00:00:30,000 --> 00:00:35,280
accurate and portable code in this talk

00:00:33,520 --> 00:00:38,160
we discuss tools we have written in the

00:00:35,280 --> 00:00:41,360
past year to identify such warnings

00:00:38,160 --> 00:00:43,360
we also identify salient developments in

00:00:41,360 --> 00:00:47,200
qa for the core distribution

00:00:43,360 --> 00:00:49,360
over the past year over the previous

00:00:47,200 --> 00:00:50,559
three years i've given a number of tpc

00:00:49,360 --> 00:00:52,160
presentations

00:00:50,559 --> 00:00:53,600
describing some of the efforts we've

00:00:52,160 --> 00:00:55,600
been making to ensure

00:00:53,600 --> 00:00:57,440
the quality of the pearl 5 core

00:00:55,600 --> 00:01:01,120
distribution

00:00:57,440 --> 00:01:02,480
in 2017 i stressed the importance of

00:01:01,120 --> 00:01:05,199
smoke testing

00:01:02,480 --> 00:01:07,439
pearl on platforms other than linux and

00:01:05,199 --> 00:01:10,880
of close analysis of situations

00:01:07,439 --> 00:01:14,080
where changes to pearl 5 bleed had an

00:01:10,880 --> 00:01:17,759
adverse impact on existing cpan modules

00:01:14,080 --> 00:01:21,119
the bleed break cpan or bbc

00:01:17,759 --> 00:01:23,600
problem in 2018

00:01:21,119 --> 00:01:25,520
i discussed testing the so-called cpan

00:01:23,600 --> 00:01:26,000
river against pearl 5 monthly

00:01:25,520 --> 00:01:29,520
development

00:01:26,000 --> 00:01:30,960
releases the cpan river being a subset

00:01:29,520 --> 00:01:33,360
of all of cpan

00:01:30,960 --> 00:01:34,880
scheduled for installation in dependency

00:01:33,360 --> 00:01:38,640
order

00:01:34,880 --> 00:01:41,680
in 2019 i introduced multi-section

00:01:38,640 --> 00:01:42,399
a tool similar to bisection used to

00:01:41,680 --> 00:01:44,799
determine

00:01:42,399 --> 00:01:46,159
multiple points in a software project's

00:01:44,799 --> 00:01:48,640
commit history

00:01:46,159 --> 00:01:51,040
where its test output changed and hence

00:01:48,640 --> 00:01:53,280
where bugs may have been introduced

00:01:51,040 --> 00:01:54,479
my cpan distribution devel get

00:01:53,280 --> 00:01:57,840
multi-bisect

00:01:54,479 --> 00:01:57,840
implements this concept

00:01:59,439 --> 00:02:03,280
this year i'm going to talk about one

00:02:01,600 --> 00:02:04,640
modest expansion

00:02:03,280 --> 00:02:07,040
extension to the concept of

00:02:04,640 --> 00:02:10,000
multi-section how to determine

00:02:07,040 --> 00:02:11,599
when when a given build time warning

00:02:10,000 --> 00:02:14,480
first appeared in the development

00:02:11,599 --> 00:02:14,480
version of pearl

00:02:14,560 --> 00:02:18,480
when you build pearl from source you

00:02:16,640 --> 00:02:21,599
first run a shell script called

00:02:18,480 --> 00:02:23,120
configure which probes your machine for

00:02:21,599 --> 00:02:25,280
its characteristics

00:02:23,120 --> 00:02:26,720
and which takes options you specify on

00:02:25,280 --> 00:02:28,959
the command line

00:02:26,720 --> 00:02:31,440
it then writes a make file reflecting

00:02:28,959 --> 00:02:33,360
those characteristics and options

00:02:31,440 --> 00:02:34,879
among the options you can specify on

00:02:33,360 --> 00:02:37,440
configures command line

00:02:34,879 --> 00:02:39,920
is the c compiler you will use to build

00:02:37,440 --> 00:02:42,560
the pearl executable

00:02:39,920 --> 00:02:44,560
you then run make on particular targets

00:02:42,560 --> 00:02:48,000
specified in the make file

00:02:44,560 --> 00:02:50,400
to build the actual perl executable

00:02:48,000 --> 00:02:51,120
you'll then go on to call make test and

00:02:50,400 --> 00:02:53,440
perhaps

00:02:51,120 --> 00:02:55,120
make install but those are beyond our

00:02:53,440 --> 00:02:58,159
scope for today

00:02:55,120 --> 00:02:59,360
today our task is to analyze the

00:02:58,159 --> 00:03:02,480
warnings which your c

00:02:59,360 --> 00:03:03,280
compiler emits during the course of

00:03:02,480 --> 00:03:06,560
running

00:03:03,280 --> 00:03:09,920
make now

00:03:06,560 --> 00:03:10,800
suppose that back on august 20th of last

00:03:09,920 --> 00:03:13,200
year

00:03:10,800 --> 00:03:15,519
i wanted to build perl from development

00:03:13,200 --> 00:03:19,040
version 5.31.3

00:03:15,519 --> 00:03:21,440
which was released on that date suppose

00:03:19,040 --> 00:03:22,640
further that i was working on freebsd

00:03:21,440 --> 00:03:24,959
version 11

00:03:22,640 --> 00:03:27,519
and wanted to compile with c lang the

00:03:24,959 --> 00:03:32,480
default c compiler for freebsd

00:03:27,519 --> 00:03:34,720
and specifically with c lang version 6.0

00:03:32,480 --> 00:03:35,599
which on configures command line is

00:03:34,720 --> 00:03:38,959
spelled

00:03:35,599 --> 00:03:39,440
hyphen dcc equals c lang60 it would be

00:03:38,959 --> 00:03:42,080
spelled

00:03:39,440 --> 00:03:44,000
somewhat differently on linux and

00:03:42,080 --> 00:03:45,680
suppose further that i wanted to capture

00:03:44,000 --> 00:03:46,239
the standard output and the standard

00:03:45,680 --> 00:03:49,519
error

00:03:46,239 --> 00:03:51,680
emitted by make and redirected to a file

00:03:49,519 --> 00:03:52,720
so i would write a program called

00:03:51,680 --> 00:03:56,720
something like

00:03:52,720 --> 00:03:59,599
run make for buildwarnings.pl specifying

00:03:56,720 --> 00:04:01,040
the compiler and version and the commit

00:03:59,599 --> 00:04:04,720
at which i wish to

00:04:01,040 --> 00:04:06,799
run run this program now i'm sure

00:04:04,720 --> 00:04:08,640
any of you in the audience could write

00:04:06,799 --> 00:04:11,120
such a script in about 20 minutes

00:04:08,640 --> 00:04:12,319
so i'm not going to go into its details

00:04:11,120 --> 00:04:13,920
now

00:04:12,319 --> 00:04:15,360
they'll be available on my website at

00:04:13,920 --> 00:04:18,079
some point

00:04:15,360 --> 00:04:18,959
for now let's suppose that running this

00:04:18,079 --> 00:04:23,359
program

00:04:18,959 --> 00:04:23,359
concludes by pointing us to a file

00:04:23,440 --> 00:04:28,880
in which the output of make has been

00:04:26,840 --> 00:04:31,120
recorded

00:04:28,880 --> 00:04:32,880
if we examine this file in an editor we

00:04:31,120 --> 00:04:35,680
notice that build time warnings

00:04:32,880 --> 00:04:35,680
look like this

00:04:39,120 --> 00:04:42,240
if we did this sort of thing often

00:04:40,840 --> 00:04:44,160
enough

00:04:42,240 --> 00:04:46,320
we'd notice a pattern to how the build

00:04:44,160 --> 00:04:49,600
time warnings are composed

00:04:46,320 --> 00:04:51,919
we'd notice colon delimited lines like

00:04:49,600 --> 00:04:51,919
this

00:04:54,800 --> 00:04:59,280
the first thing reported is the name of

00:04:56,960 --> 00:05:01,280
the source code file

00:04:59,280 --> 00:05:02,880
from where that was being processed when

00:05:01,280 --> 00:05:06,160
the warning was generated

00:05:02,880 --> 00:05:08,000
or at least the relative path to that

00:05:06,160 --> 00:05:10,000
source code file from whatever directory

00:05:08,000 --> 00:05:13,759
make it was currently in

00:05:10,000 --> 00:05:17,360
in this case encode.c

00:05:13,759 --> 00:05:18,160
next the line number where the warning

00:05:17,360 --> 00:05:21,759
was generated

00:05:18,160 --> 00:05:23,360
in this case 1356. next

00:05:21,759 --> 00:05:24,720
the position within the line of the

00:05:23,360 --> 00:05:25,520
source code when the warning was

00:05:24,720 --> 00:05:27,919
generated

00:05:25,520 --> 00:05:29,199
in this case the fifth character in the

00:05:27,919 --> 00:05:32,560
line

00:05:29,199 --> 00:05:35,600
next the string warning and now

00:05:32,560 --> 00:05:38,639
the text of the warning in this case

00:05:35,600 --> 00:05:42,240
unused variable ix

00:05:38,639 --> 00:05:43,600
and finally the category the warning

00:05:42,240 --> 00:05:47,199
falls into

00:05:43,600 --> 00:05:49,680
in this case the category is unused

00:05:47,199 --> 00:05:49,680
variable

00:05:50,479 --> 00:05:54,320
now the warnings category is actually

00:05:53,759 --> 00:05:57,039
the most

00:05:54,320 --> 00:05:58,800
interesting thing in this line and

00:05:57,039 --> 00:06:01,520
that's because over time

00:05:58,800 --> 00:06:03,680
c compilers evolve and introduce new

00:06:01,520 --> 00:06:06,800
categories of warnings

00:06:03,680 --> 00:06:08,000
so if we were to build pearl at the very

00:06:06,800 --> 00:06:10,400
same commit

00:06:08,000 --> 00:06:11,520
but with a more recent version of

00:06:10,400 --> 00:06:14,160
sealang

00:06:11,520 --> 00:06:14,639
we might see additional warnings falling

00:06:14,160 --> 00:06:18,160
into

00:06:14,639 --> 00:06:19,759
newer categories we could write a perl

00:06:18,160 --> 00:06:21,840
script to tell us which warning

00:06:19,759 --> 00:06:22,479
categories were populated during a given

00:06:21,840 --> 00:06:25,360
build

00:06:22,479 --> 00:06:28,000
and how many instances of each category

00:06:25,360 --> 00:06:28,000
there were

00:06:28,639 --> 00:06:33,039
so we wrote a script called report build

00:06:32,240 --> 00:06:35,280
warnings

00:06:33,039 --> 00:06:38,160
and it takes a specific file in which

00:06:35,280 --> 00:06:40,960
we've reported the output of a bank

00:06:38,160 --> 00:06:42,000
uh we've it reports that in this

00:06:40,960 --> 00:06:44,000
particular bill

00:06:42,000 --> 00:06:45,919
there were only two build time warnings

00:06:44,000 --> 00:06:48,319
emitted both were of the category

00:06:45,919 --> 00:06:50,639
unused variable and i'll have more to

00:06:48,319 --> 00:06:53,199
say on the program report build warnings

00:06:50,639 --> 00:06:53,199
in a moment

00:06:54,800 --> 00:06:59,680
now after reporting those those warnings

00:06:57,759 --> 00:07:00,560
we might want to inspect them in greater

00:06:59,680 --> 00:07:02,639
detail

00:07:00,560 --> 00:07:04,560
so i've got another little program

00:07:02,639 --> 00:07:07,759
called parse build warnings

00:07:04,560 --> 00:07:12,080
that basically analyzes each warning and

00:07:07,759 --> 00:07:12,080
groups into a a pearl hash

00:07:12,880 --> 00:07:16,000
at this point you're probably wondering

00:07:14,639 --> 00:07:18,240
is there a cpn module

00:07:16,000 --> 00:07:19,199
for programs like this and of course

00:07:18,240 --> 00:07:22,240
there is

00:07:19,199 --> 00:07:26,080
it's called pearl 5 build

00:07:22,240 --> 00:07:28,160
warnings now

00:07:26,080 --> 00:07:30,720
in the course of working on the pearl 5

00:07:28,160 --> 00:07:32,479
core distribution the provide porters

00:07:30,720 --> 00:07:34,000
are quite rigorous about making sure

00:07:32,479 --> 00:07:35,039
that the test suite runs without

00:07:34,000 --> 00:07:38,080
failures during make

00:07:35,039 --> 00:07:39,680
tests but we're not quite as rigorous

00:07:38,080 --> 00:07:42,160
about making sure that no

00:07:39,680 --> 00:07:42,960
new build time warnings have crept in

00:07:42,160 --> 00:07:45,599
while running

00:07:42,960 --> 00:07:47,199
make some build time warnings will only

00:07:45,599 --> 00:07:49,919
appear for the first time

00:07:47,199 --> 00:07:51,599
when we switch to a newer pickier

00:07:49,919 --> 00:07:55,680
version of a c compiler

00:07:51,599 --> 00:07:57,680
such as c lang gcc or g plus plus

00:07:55,680 --> 00:07:58,800
nonetheless when we do notice a new

00:07:57,680 --> 00:08:01,440
build time warning

00:07:58,800 --> 00:08:02,560
we file a bug ticket about that and here

00:08:01,440 --> 00:08:06,319
is an instance

00:08:02,560 --> 00:08:08,479
of that suppose

00:08:06,319 --> 00:08:10,879
that about two weeks after we analyze

00:08:08,479 --> 00:08:13,759
development version 531.3

00:08:10,879 --> 00:08:14,639
for build time warnings we repeated that

00:08:13,759 --> 00:08:16,319
process but

00:08:14,639 --> 00:08:19,919
at a later commit which i will simply

00:08:16,319 --> 00:08:19,919
describe as 9d

00:08:20,160 --> 00:08:24,720
on the same program look for in this

00:08:22,800 --> 00:08:28,000
updated output file

00:08:24,720 --> 00:08:31,440
and what do we find that now

00:08:28,000 --> 00:08:34,240
we have new build time warnings

00:08:31,440 --> 00:08:35,279
six of them all of the category called

00:08:34,240 --> 00:08:38,719
deprecated

00:08:35,279 --> 00:08:42,320
declarations we want to

00:08:38,719 --> 00:08:42,320
know well where do these occur

00:08:44,399 --> 00:08:47,920
we run the parse build warnings program

00:08:46,800 --> 00:08:51,279
and we see

00:08:47,920 --> 00:08:53,200
that these new this all the instances of

00:08:51,279 --> 00:08:56,640
this new category

00:08:53,200 --> 00:08:57,680
deprecated declarations came from one

00:08:56,640 --> 00:09:01,760
source code file

00:08:57,680 --> 00:09:01,760
called interprevar.h

00:09:06,839 --> 00:09:11,360
so we report this in a bug ticket you

00:09:09,680 --> 00:09:11,920
can even go and look at the discussion

00:09:11,360 --> 00:09:16,560
of this

00:09:11,920 --> 00:09:19,680
in but in github issue 17144

00:09:16,560 --> 00:09:22,880
so we've picked up these new warnings

00:09:19,680 --> 00:09:23,600
what do we do next when a new build time

00:09:22,880 --> 00:09:26,000
warning

00:09:23,600 --> 00:09:28,000
appears we need to rule out the

00:09:26,000 --> 00:09:29,600
possibility that this indicates a

00:09:28,000 --> 00:09:32,240
serious defect in our c

00:09:29,600 --> 00:09:33,279
level source code we want to determine

00:09:32,240 --> 00:09:35,040
the commit

00:09:33,279 --> 00:09:36,560
into our git repository where the

00:09:35,040 --> 00:09:39,120
warning first appeared

00:09:36,560 --> 00:09:40,720
so that we can ask the author and or the

00:09:39,120 --> 00:09:43,279
committer of that commit

00:09:40,720 --> 00:09:45,440
to investigate further as you might

00:09:43,279 --> 00:09:51,760
suspect we apply the principle

00:09:45,440 --> 00:09:54,800
of bisection to this problem

00:09:51,760 --> 00:09:58,160
suppose that we wrote a perl script

00:09:54,800 --> 00:09:59,600
to detect those points in a large series

00:09:58,160 --> 00:10:01,600
of commits

00:09:59,600 --> 00:10:03,680
where the set of warnings emitted during

00:10:01,600 --> 00:10:06,800
wake changed

00:10:03,680 --> 00:10:10,399
from the previous commit we could then

00:10:06,800 --> 00:10:14,079
examine these transitions to identify

00:10:10,399 --> 00:10:17,279
the errant commit such a pearl script

00:10:14,079 --> 00:10:20,079
might be called like this the program is

00:10:17,279 --> 00:10:23,120
called warnings transitions.pl

00:10:20,079 --> 00:10:24,800
we provide it with a large number of

00:10:23,120 --> 00:10:27,519
command line options

00:10:24,800 --> 00:10:29,279
now this i'm sure you're looking at this

00:10:27,519 --> 00:10:30,399
you're saying wait that's too much code

00:10:29,279 --> 00:10:32,640
i can't absorb it

00:10:30,399 --> 00:10:34,240
so let's just go to the next slide in

00:10:32,640 --> 00:10:36,880
which we look at the

00:10:34,240 --> 00:10:39,360
important command line switches for this

00:10:36,880 --> 00:10:39,360
program

00:10:40,399 --> 00:10:43,519
they are there are four of them we'll go

00:10:42,320 --> 00:10:48,800
through them in turn first

00:10:43,519 --> 00:10:48,800
last compiler and configure command

00:10:49,839 --> 00:10:55,600
first takes the full 48 character sha

00:10:53,760 --> 00:10:57,040
of the last known good commit which in

00:10:55,600 --> 00:11:01,839
our case was

00:10:57,040 --> 00:11:01,839
the tag pearl 531.3

00:11:02,880 --> 00:11:06,320
last is the sha of a commit where we

00:11:05,440 --> 00:11:10,720
have detected

00:11:06,320 --> 00:11:13,120
new build time warnings compiler

00:11:10,720 --> 00:11:15,040
compiler takes the compiler inversion

00:11:13,120 --> 00:11:15,839
again this is a platform specific

00:11:15,040 --> 00:11:20,399
spelling

00:11:15,839 --> 00:11:24,079
you which you find by the witch command

00:11:20,399 --> 00:11:26,720
i'll leave that detail later and finally

00:11:24,079 --> 00:11:27,360
the configure command is the full text

00:11:26,720 --> 00:11:30,480
of the

00:11:27,360 --> 00:11:35,200
configure command that you provide

00:11:30,480 --> 00:11:35,200
on a given on a given system uh

00:11:35,760 --> 00:11:43,040
uh i've trimmed that down for

00:11:38,959 --> 00:11:45,519
uh for for brevity and clarity

00:11:43,040 --> 00:11:47,839
so your output will end up looking like

00:11:45,519 --> 00:11:47,839
this

00:11:48,480 --> 00:11:52,560
you'll you get something to tell you

00:11:50,560 --> 00:11:54,639
that the the probable first

00:11:52,560 --> 00:11:56,880
instance of a given warning is at a

00:11:54,639 --> 00:11:57,680
particular commit and you'll be directed

00:11:56,880 --> 00:12:01,360
to

00:11:57,680 --> 00:12:05,279
a file that has information

00:12:01,360 --> 00:12:07,200
on this commit this file will contain a

00:12:05,279 --> 00:12:11,120
hash entry like this

00:12:07,200 --> 00:12:14,639
transitions and each transition

00:12:11,120 --> 00:12:17,680
is a hash

00:12:14,639 --> 00:12:20,320
with two keys older and newer and

00:12:17,680 --> 00:12:22,000
they point you to the the location of

00:12:20,320 --> 00:12:24,959
the file on your system

00:12:22,000 --> 00:12:26,160
the index number of that of this

00:12:24,959 --> 00:12:28,560
particular commit

00:12:26,160 --> 00:12:29,600
within the whole series of commits and

00:12:28,560 --> 00:12:34,000
the uh

00:12:29,600 --> 00:12:34,000
md5 hex of this file

00:12:36,560 --> 00:12:40,480
so what we do is we look at the array of

00:12:38,480 --> 00:12:42,399
commits between first and last

00:12:40,480 --> 00:12:44,320
we notice that there was a change in the

00:12:42,399 --> 00:12:47,360
set of warnings generated

00:12:44,320 --> 00:12:50,560
during make between index 75

00:12:47,360 --> 00:12:53,279
and index 76 well we can

00:12:50,560 --> 00:12:54,399
diff the older and newer files in this

00:12:53,279 --> 00:12:57,760
case

00:12:54,399 --> 00:12:58,720
and this is where we and by examining

00:12:57,760 --> 00:12:59,920
that we

00:12:58,720 --> 00:13:02,320
understand that we're looking at two

00:12:59,920 --> 00:13:04,880
commits right next to each other

00:13:02,320 --> 00:13:05,760
and we're diffing them and we find that

00:13:04,880 --> 00:13:08,720
the

00:13:05,760 --> 00:13:09,519
only difference is these new warnings so

00:13:08,720 --> 00:13:12,880
therefore

00:13:09,519 --> 00:13:15,040
we can be sure that this commit which

00:13:12,880 --> 00:13:17,200
i'll simply call 57f

00:13:15,040 --> 00:13:19,360
was the commit at which new build time

00:13:17,200 --> 00:13:22,560
warnings first appeared

00:13:19,360 --> 00:13:25,200
we report this in our bug ticket

00:13:22,560 --> 00:13:26,160
and we ask the author or committer to

00:13:25,200 --> 00:13:29,360
investigate

00:13:26,160 --> 00:13:31,600
and hopefully eliminate the build time

00:13:29,360 --> 00:13:33,440
warning

00:13:31,600 --> 00:13:35,600
now once again you're probably wondering

00:13:33,440 --> 00:13:36,160
is there a cpan module to do this and of

00:13:35,600 --> 00:13:39,600
course there

00:13:36,160 --> 00:13:42,000
is it's called devel get multi-bisect

00:13:39,600 --> 00:13:43,440
build transitions it's the latest

00:13:42,000 --> 00:13:45,920
addition to the devel

00:13:43,440 --> 00:13:48,959
get multi-bisect distribution which i

00:13:45,920 --> 00:13:52,320
spoke about at tpcna 2019

00:13:48,959 --> 00:13:53,680
in pittsburgh and the diagnostic program

00:13:52,320 --> 00:13:56,480
that i just illustrated

00:13:53,680 --> 00:13:58,240
warnings transitions.pl is included in

00:13:56,480 --> 00:14:01,279
the xt directory

00:13:58,240 --> 00:14:04,000
in that distribution

00:14:01,279 --> 00:14:05,040
at this point i'll pause and we'll take

00:14:04,000 --> 00:14:06,639
questions on

00:14:05,040 --> 00:14:08,160
what we've uh the matter that we've

00:14:06,639 --> 00:14:10,480
dealt with so far

00:14:08,160 --> 00:14:11,760
uh and if time permits i will then

00:14:10,480 --> 00:14:14,399
simply go on to name

00:14:11,760 --> 00:14:16,079
a number of other topics in qa for the

00:14:14,399 --> 00:14:16,800
core distribution which i think are of

00:14:16,079 --> 00:14:19,839
interest

00:14:16,800 --> 00:14:21,920
and which people are free to discuss

00:14:19,839 --> 00:14:26,480
with me

00:14:21,920 --> 00:14:26,480
in in other situations thank you

00:14:28,839 --> 00:14:31,839
todd

00:14:32,480 --> 00:14:38,079
thank you jim uh

00:14:35,920 --> 00:14:38,959
i do not see any hands up if anybody has

00:14:38,079 --> 00:14:41,360
any questions

00:14:38,959 --> 00:14:44,320
uh please uh raise your hand or just

00:14:41,360 --> 00:14:44,320
unmute and talk

00:14:57,680 --> 00:15:00,639
very difficult to hear

00:15:02,560 --> 00:15:06,399
can you hear me better that's a bit

00:15:05,360 --> 00:15:09,680
better

00:15:06,399 --> 00:15:13,120
a bit better just a question

00:15:09,680 --> 00:15:16,320
are the pairs five porters using

00:15:13,120 --> 00:15:18,959
uh sanitizer

00:15:16,320 --> 00:15:21,040
you mean about memory lipson and so on

00:15:18,959 --> 00:15:26,240
libasan

00:15:21,040 --> 00:15:28,480
uh yes there are certain

00:15:26,240 --> 00:15:30,399
we don't use it necessarily in a

00:15:28,480 --> 00:15:33,759
continuous integration manner

00:15:30,399 --> 00:15:34,560
but certain of the contributors who know

00:15:33,759 --> 00:15:37,600
what

00:15:34,560 --> 00:15:38,639
adverse sanitizer does uh use it

00:15:37,600 --> 00:15:41,680
particularly

00:15:38,639 --> 00:15:44,320
in in debugging

00:15:41,680 --> 00:15:47,759
i make no claim to to know that so i

00:15:44,320 --> 00:15:50,720
won't say anything further about it

00:15:47,759 --> 00:15:50,720
okay thank you

00:15:53,440 --> 00:15:56,079
other questions

00:16:02,800 --> 00:16:08,639
i can talk about address sanitizer

00:16:06,639 --> 00:16:09,680
if you want to say just a few words carl

00:16:08,639 --> 00:16:12,720
yeah just

00:16:09,680 --> 00:16:17,120
i mean we use it when we find a bug but

00:16:12,720 --> 00:16:21,279
we also use it as a prophylactic

00:16:17,120 --> 00:16:24,320
uh right you make some code changes

00:16:21,279 --> 00:16:26,000
like well like valgrind

00:16:24,320 --> 00:16:28,240
we have that already in our make files

00:16:26,000 --> 00:16:31,440
so if i make a big code change or

00:16:28,240 --> 00:16:34,480
before a release i will run make test

00:16:31,440 --> 00:16:37,839
valgrind to make sure that we haven't

00:16:34,480 --> 00:16:37,839
added some uh

00:16:38,639 --> 00:16:42,160
out of address accesses uninitialized

00:16:41,040 --> 00:16:45,279
things

00:16:42,160 --> 00:16:47,120
and i will also build under clang with

00:16:45,279 --> 00:16:50,639
address sanitizer

00:16:47,120 --> 00:16:54,480
to look for undefined behaviors just

00:16:50,639 --> 00:16:55,759
before we release i did that just before

00:16:54,480 --> 00:16:57,600
532 came out

00:16:55,759 --> 00:16:58,800
to verify that we hadn't introduced

00:16:57,600 --> 00:17:00,639
something that

00:16:58,800 --> 00:17:02,800
we didn't know so it's not just for

00:17:00,639 --> 00:17:06,240
debugging but it's for

00:17:02,800 --> 00:17:10,079
in a sense it's for debugging but it's a

00:17:06,240 --> 00:17:13,120
oh up for qa yeah qa that's right

00:17:10,079 --> 00:17:14,959
yeah that's all well that's that

00:17:13,120 --> 00:17:16,480
is that that's something where i am

00:17:14,959 --> 00:17:18,160
learning this for the first time because

00:17:16,480 --> 00:17:20,400
i've never actually run make fail grind

00:17:18,160 --> 00:17:23,760
or anything like that

00:17:20,400 --> 00:17:27,120
but apparently is using a

00:17:23,760 --> 00:17:34,240
memory arena thing

00:17:27,120 --> 00:17:37,360
like this car pearl is using what

00:17:34,240 --> 00:17:40,960
memory arenas

00:17:37,360 --> 00:17:44,559
memory analysis um

00:17:40,960 --> 00:17:46,880
i'm not i think it's in memory arenas

00:17:44,559 --> 00:17:46,880
sorry

00:17:48,000 --> 00:17:55,120
yeah we we we have arenas i'm i'm not

00:17:51,120 --> 00:17:58,320
familiar with that um okay

00:17:55,120 --> 00:17:59,200
how that works yeah i i don't i don't

00:17:58,320 --> 00:18:03,039
that's a

00:17:59,200 --> 00:18:06,000
the pearl source code is vast and

00:18:03,039 --> 00:18:06,000
we each know

00:18:06,240 --> 00:18:10,559
it's we each know part of it we each of

00:18:08,960 --> 00:18:14,640
us is trying to describe one

00:18:10,559 --> 00:18:16,960
side of the elephant

00:18:14,640 --> 00:18:16,960
thank you

00:18:20,160 --> 00:18:22,960
other questions

00:18:24,240 --> 00:18:29,760
if not what i'll then do is i'll

00:18:27,039 --> 00:18:29,760
re-share

00:18:30,559 --> 00:18:35,520
my slides and

00:18:38,640 --> 00:18:42,559
in the remaining few minutes i just want

00:18:40,840 --> 00:18:45,679
to

00:18:42,559 --> 00:18:49,280
mention some other topics that could be

00:18:45,679 --> 00:18:49,280
discussed with respect to qa

00:18:49,919 --> 00:18:57,280
first of all we our basic

00:18:53,440 --> 00:18:58,000
tool for bisecting changes in the code

00:18:57,280 --> 00:19:00,160
base

00:18:58,000 --> 00:19:02,000
now you're not sharing your slides

00:19:00,160 --> 00:19:04,240
you're sharing a different browser

00:19:02,000 --> 00:19:04,240
uh

00:19:05,360 --> 00:19:13,760
what um

00:19:10,960 --> 00:19:13,760
two minutes jim

00:19:21,039 --> 00:19:28,320
is that uh are you seeing my size now

00:19:24,799 --> 00:19:30,480
yep okay so we have this tool porting

00:19:28,320 --> 00:19:32,559
bisect.pl which is basically a wrapper

00:19:30,480 --> 00:19:35,280
around get bisect

00:19:32,559 --> 00:19:35,919
and its documentation curiously enough

00:19:35,280 --> 00:19:38,640
is found

00:19:35,919 --> 00:19:39,520
in this program called bisect runner dot

00:19:38,640 --> 00:19:41,919
pl

00:19:39,520 --> 00:19:42,960
uh in the last year we added many more

00:19:41,919 --> 00:19:46,400
examples to

00:19:42,960 --> 00:19:48,480
to this program so it's a lot be

00:19:46,400 --> 00:19:49,520
easier for newcomers to the core

00:19:48,480 --> 00:19:52,960
distribution

00:19:49,520 --> 00:19:55,440
to use we do there are

00:19:52,960 --> 00:19:56,880
uh people among the porters who do a lot

00:19:55,440 --> 00:19:58,480
of fuzzing which

00:19:56,880 --> 00:20:00,320
means they throw a lot of ram to put

00:19:58,480 --> 00:20:02,720
random input at a program

00:20:00,320 --> 00:20:03,360
and see what's breaks in fact over the

00:20:02,720 --> 00:20:06,000
last

00:20:03,360 --> 00:20:07,120
several years fuzzing has generated more

00:20:06,000 --> 00:20:10,240
bug tickets

00:20:07,120 --> 00:20:12,320
than any other technique that we use uh

00:20:10,240 --> 00:20:13,600
and it's very important for detecting

00:20:12,320 --> 00:20:15,760
security flaws

00:20:13,600 --> 00:20:16,960
however it's way out of my area of

00:20:15,760 --> 00:20:20,000
expertise so

00:20:16,960 --> 00:20:21,440
i'll pass on describing it further in

00:20:20,000 --> 00:20:22,960
the last year particularly since we

00:20:21,440 --> 00:20:25,919
moved to github for

00:20:22,960 --> 00:20:27,520
issues and for our repository we have

00:20:25,919 --> 00:20:30,000
more centralized

00:20:27,520 --> 00:20:31,520
qa continuous integration tools

00:20:30,000 --> 00:20:33,039
centralized in the sense that they're

00:20:31,520 --> 00:20:34,000
directly configured by the core

00:20:33,039 --> 00:20:37,039
maintainers

00:20:34,000 --> 00:20:40,400
in the core distribution and they

00:20:37,039 --> 00:20:41,039
run on our repository uh so this

00:20:40,400 --> 00:20:42,880
includes

00:20:41,039 --> 00:20:44,720
travis that many of you are familiar

00:20:42,880 --> 00:20:47,679
with github actions

00:20:44,720 --> 00:20:49,200
and for more discussion of that

00:20:47,679 --> 00:20:53,919
recommend you to this 4pm

00:20:49,200 --> 00:20:56,080
edt talk by mark fowler and olaf alders

00:20:53,919 --> 00:20:57,679
we also have non-centralized qa tools

00:20:56,080 --> 00:21:02,000
that we've been using for some time

00:20:57,679 --> 00:21:05,200
the smoke testing rigs uh testsmoke.org

00:21:02,000 --> 00:21:06,880
smoke aggregators uh these are largely

00:21:05,200 --> 00:21:08,320
volunteer maintained

00:21:06,880 --> 00:21:10,320
and one of the difficulties that we of

00:21:08,320 --> 00:21:12,240
course have in doing that is

00:21:10,320 --> 00:21:13,760
that if a volunteer goes away we might

00:21:12,240 --> 00:21:16,960
lose one source of

00:21:13,760 --> 00:21:17,840
important information what will happen

00:21:16,960 --> 00:21:23,600
in pearl 7

00:21:17,840 --> 00:21:27,039
for qa processes uh i don't know yet

00:21:23,600 --> 00:21:30,400
that's to be to be determined

00:21:27,039 --> 00:21:36,880
and with that that's my

00:21:30,400 --> 00:21:36,880

YouTube URL: https://www.youtube.com/watch?v=pmr9VYTTfiA


