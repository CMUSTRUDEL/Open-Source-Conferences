Title: David Oswald - Setting up an internal Darkpan
Publication date: 2020-06-25
Playlist: TPC 2020 in the Cloud
Description: 
	As the world moves toward lightweight microservices we are often faced with the dilemma of pulling a large shared-code repository into our containers (rendering them anything but lightweight), or copying in shared libraries (losing the benefits of upstream progress), or …. setting up a Darkpan. With a Darkpan it is easy to convert a repository of shared modules into independent distributions that can be pulled down by containers as they build using typical CPAN tooling such as cpanm and Carton in conjunction with Docker.

I’ve had to do just this, recently, and implemented my work both using a Jenkins pipeline, and with a Stash/Bitbucket to Docker to OpenShift process. In this discussion we will explore the why and how of setting up a Darkpan.
Captions: 
	00:00:01,410 --> 00:00:03,469
you

00:00:04,050 --> 00:00:08,820
okay I got the green light from Nick so

00:00:07,170 --> 00:00:10,740
let's go ahead and get started we're

00:00:08,820 --> 00:00:14,010
here today to talk about setting up an

00:00:10,740 --> 00:00:15,539
internal dark pan before I get too far

00:00:14,010 --> 00:00:18,449
into it I wanted to thank the organizers

00:00:15,539 --> 00:00:21,210
of this conference organizing a

00:00:18,449 --> 00:00:23,640
conference in my own experience is a

00:00:21,210 --> 00:00:25,410
tremendous undertaking and I don't

00:00:23,640 --> 00:00:27,060
assume that it would be any less of a

00:00:25,410 --> 00:00:29,190
tremendous undertaking when you have to

00:00:27,060 --> 00:00:31,890
in very short notice shift the entire

00:00:29,190 --> 00:00:34,320
thing online so really good job to

00:00:31,890 --> 00:00:35,730
everybody involved Nick and Todd Rinaldi

00:00:34,320 --> 00:00:40,380
and everybody else who's been involved

00:00:35,730 --> 00:00:41,760
in this process my name is Dave Oswald I

00:00:40,380 --> 00:00:44,190
worked for endurance international

00:00:41,760 --> 00:00:46,260
endurance group I'm a principal software

00:00:44,190 --> 00:00:49,440
engineer there and I work on a team that

00:00:46,260 --> 00:00:52,440
focuses on hosting orchestration I'm

00:00:49,440 --> 00:00:56,489
also a dad a programmer cyclist sailor

00:00:52,440 --> 00:00:58,920
among other things so I want to thank

00:00:56,489 --> 00:01:00,050
endurance for letting me be here before

00:00:58,920 --> 00:01:03,059
letting me present today

00:01:00,050 --> 00:01:08,009
and for everything they've done for my

00:01:03,059 --> 00:01:10,289
career endurance is often hiring we have

00:01:08,009 --> 00:01:12,810
a website career endurance calm so if

00:01:10,289 --> 00:01:15,569
anybody's interested in seeking a career

00:01:12,810 --> 00:01:18,959
with endurance you can go ahead and

00:01:15,569 --> 00:01:21,299
reach out to me or go to that website

00:01:18,959 --> 00:01:23,209
but reach out to me at da oswaldo

00:01:21,299 --> 00:01:26,490
gmail.com or at my endurance email

00:01:23,209 --> 00:01:28,109
either way now for that we're here to

00:01:26,490 --> 00:01:32,609
talk about setting up an internal dark

00:01:28,109 --> 00:01:36,569
cam first the first question that comes

00:01:32,609 --> 00:01:38,369
up on what is a dark pan and I did I

00:01:36,569 --> 00:01:40,289
think a lot of us intuitively kind of

00:01:38,369 --> 00:01:42,840
know what it is I did some searching and

00:01:40,289 --> 00:01:45,659
I found that a few years ago olaf posted

00:01:42,840 --> 00:01:47,969
a tweet what do you think of when you

00:01:45,659 --> 00:01:51,229
hear the word dark pan and he presented

00:01:47,969 --> 00:01:55,340
some options and people responded he got

00:01:51,229 --> 00:01:59,669
79 participants to respond to that and

00:01:55,340 --> 00:02:03,209
he the winning option was pro code that

00:01:59,669 --> 00:02:05,069
is not in the sheet pan the other

00:02:03,209 --> 00:02:08,700
options being a mini sea pan containing

00:02:05,069 --> 00:02:10,050
pro codes there's low in the CPM both of

00:02:08,700 --> 00:02:12,660
the above and none of the above

00:02:10,050 --> 00:02:14,970
and so I put that through some intense

00:02:12,660 --> 00:02:17,350
statistical analysis and came up with my

00:02:14,970 --> 00:02:19,240
own conclusion that dark pan is a

00:02:17,350 --> 00:02:24,550
code repository that users sit down

00:02:19,240 --> 00:02:27,130
chewing but that isn't CBN we had a

00:02:24,550 --> 00:02:28,840
problem we have 120 kind of

00:02:27,130 --> 00:02:29,740
general-purpose modules within my

00:02:28,840 --> 00:02:33,970
organization

00:02:29,740 --> 00:02:36,030
some of those modules are useful for

00:02:33,970 --> 00:02:38,440
some types of services and some others

00:02:36,030 --> 00:02:41,500
but basically a hundred 20

00:02:38,440 --> 00:02:42,820
general-purpose modules and not all of

00:02:41,500 --> 00:02:45,630
them but most of them are not really

00:02:42,820 --> 00:02:48,970
generally use muscles are not generally

00:02:45,630 --> 00:02:51,400
releasable to the public for one reason

00:02:48,970 --> 00:02:52,920
other we'd like to work on that at some

00:02:51,400 --> 00:02:54,850
point some of them may be releasable

00:02:52,920 --> 00:02:57,760
currently in their current state they're

00:02:54,850 --> 00:03:00,100
not we want to be able to use those

00:02:57,760 --> 00:03:03,960
modules of a cart and stand-alone micro

00:03:00,100 --> 00:03:05,920
services so then we need to kind of

00:03:03,960 --> 00:03:07,870
investigate well what is the micro

00:03:05,920 --> 00:03:11,800
service of micro service I went to micro

00:03:07,870 --> 00:03:14,200
surgeons at i/o and looked it up they

00:03:11,800 --> 00:03:15,580
are an architectural style that

00:03:14,200 --> 00:03:17,050
structures an application is a

00:03:15,580 --> 00:03:19,120
collection of services that are highly

00:03:17,050 --> 00:03:20,380
maintainable and testable very

00:03:19,120 --> 00:03:23,890
importantly loosely coupled

00:03:20,380 --> 00:03:25,330
independently deployable organized

00:03:23,890 --> 00:03:28,930
around business capabilities and owned

00:03:25,330 --> 00:03:30,340
by small teams so because they are

00:03:28,930 --> 00:03:32,440
loosely coupled independently to

00:03:30,340 --> 00:03:34,680
deployable and on some by small teams it

00:03:32,440 --> 00:03:37,870
doesn't make a lot of sense to pull our

00:03:34,680 --> 00:03:39,610
120 generally useful modules in to a

00:03:37,870 --> 00:03:42,190
micro service you know the entire

00:03:39,610 --> 00:03:45,430
kitchen sink when we reel when we really

00:03:42,190 --> 00:03:50,620
only may need one or two or three of

00:03:45,430 --> 00:03:52,150
those generally useful modules so we

00:03:50,620 --> 00:03:57,160
want to avoid avoid kitchen sink

00:03:52,150 --> 00:03:58,960
programming and tight coupling a typical

00:03:57,160 --> 00:04:01,690
Pro micro service might be a docker

00:03:58,960 --> 00:04:03,700
container that consists of Perl and

00:04:01,690 --> 00:04:07,030
consists of carton for dependency

00:04:03,700 --> 00:04:09,370
management it might have mojolicious or

00:04:07,030 --> 00:04:11,500
dancer as kind of a front end there will

00:04:09,370 --> 00:04:15,430
be some proprietary modules from C 10

00:04:11,500 --> 00:04:18,549
modules and then some application logic

00:04:15,430 --> 00:04:22,030
and very specific business logic modules

00:04:18,549 --> 00:04:27,640
that represent the model and we like to

00:04:22,030 --> 00:04:28,230
play it into open shifter into AWS we

00:04:27,640 --> 00:04:29,820
want to have

00:04:28,230 --> 00:04:31,350
not invented here syndrome as much as

00:04:29,820 --> 00:04:35,310
possible which means we want to leverage

00:04:31,350 --> 00:04:37,770
CPM but we also want to be able to

00:04:35,310 --> 00:04:39,150
leverage some of the previous work in

00:04:37,770 --> 00:04:44,220
our hundred and twenty years and so

00:04:39,150 --> 00:04:46,050
general-purpose modules often within

00:04:44,220 --> 00:04:47,550
these types of micro services that are

00:04:46,050 --> 00:04:50,430
darker eyes din two containers will use

00:04:47,550 --> 00:04:52,440
carton for dependency management carton

00:04:50,430 --> 00:04:55,740
is a module written by miyagawa it's a

00:04:52,440 --> 00:05:00,000
fantastic it's a fantastic way of

00:04:55,740 --> 00:05:01,740
dealing with with c-pen module

00:05:00,000 --> 00:05:06,240
dependencies that we need to pull into

00:05:01,740 --> 00:05:09,840
our into our little containers I had

00:05:06,240 --> 00:05:12,210
ever previously used carton for split

00:05:09,840 --> 00:05:14,940
dependency management for managing

00:05:12,210 --> 00:05:18,060
dependencies between Japan and also

00:05:14,940 --> 00:05:21,420
between an internal darkman so but if

00:05:18,060 --> 00:05:24,120
you look at how how carton works it uses

00:05:21,420 --> 00:05:27,420
a Sipan file and the c-pen file is used

00:05:24,120 --> 00:05:31,050
to specify the dependencies that are

00:05:27,420 --> 00:05:34,470
container or that our little application

00:05:31,050 --> 00:05:36,480
requires and so you can this is taken

00:05:34,470 --> 00:05:38,850
directly from the pod from from carton

00:05:36,480 --> 00:05:40,290
you can require a plan equip our request

00:05:38,850 --> 00:05:42,780
I don't know whatever modules you need

00:05:40,290 --> 00:05:46,680
to require you specify them in those EPM

00:05:42,780 --> 00:05:49,680
file um we don't want to mirror all of

00:05:46,680 --> 00:05:51,870
Sipan on our darkman which means we need

00:05:49,680 --> 00:05:55,320
to be able to split our dependency

00:05:51,870 --> 00:05:57,680
management between both CPM and can you

00:05:55,320 --> 00:06:01,230
need carton to be able to do both and so

00:05:57,680 --> 00:06:05,280
we need kind of this hybrid approach so

00:06:01,230 --> 00:06:07,200
my first thought was well let's let's uh

00:06:05,280 --> 00:06:11,220
check Stack Overflow there's every good

00:06:07,200 --> 00:06:13,800
developer knows and see see how we can

00:06:11,220 --> 00:06:16,050
make partner carton use post Sipan and

00:06:13,800 --> 00:06:19,080
dark pan and I came up with

00:06:16,050 --> 00:06:22,170
as you can see zero results on that not

00:06:19,080 --> 00:06:24,090
surprisingly perhaps next turned to

00:06:22,170 --> 00:06:26,700
Google and I found a fantastic article

00:06:24,090 --> 00:06:29,100
that was written back in 2017 and my

00:06:26,700 --> 00:06:33,600
foot a blog that talks about using

00:06:29,100 --> 00:06:37,890
carton for internal dark pen

00:06:33,600 --> 00:06:40,920
and I found this in particular that you

00:06:37,890 --> 00:06:42,330
can specify and pearl carton mirror and

00:06:40,920 --> 00:06:45,150
I thought that I had everything figured

00:06:42,330 --> 00:06:47,640
out and we set off to use this M part

00:06:45,150 --> 00:06:49,110
carton mirror and for some reason never

00:06:47,640 --> 00:06:51,120
could get that quite working it did then

00:06:49,110 --> 00:06:52,470
we finally turned to where developers

00:06:51,120 --> 00:06:55,770
ought to turn first back to the

00:06:52,470 --> 00:06:57,950
documentation for carton and realized oh

00:06:55,770 --> 00:07:02,400
holy cow there it is

00:06:57,950 --> 00:07:05,460
you can specify a mirror and this will

00:07:02,400 --> 00:07:10,080
allow us to default to using C pan as

00:07:05,460 --> 00:07:12,690
our NRC pen spec files for carton but we

00:07:10,080 --> 00:07:15,000
can specify a mirror for our local dark

00:07:12,690 --> 00:07:17,130
pan if we want to do that for specific

00:07:15,000 --> 00:07:19,950
modules with an RC pen file

00:07:17,130 --> 00:07:23,520
problem solved we went down the rabbit

00:07:19,950 --> 00:07:27,890
hole so we didn't need to so now the

00:07:23,520 --> 00:07:27,890
next step is we need to make a dark pan

00:07:28,340 --> 00:07:32,670
and so they can apartment dark pan we

00:07:30,840 --> 00:07:34,530
need to prepare our we wanted to use

00:07:32,670 --> 00:07:36,660
seat and tooling as much as possible so

00:07:34,530 --> 00:07:39,420
we need to prepare our modules in two

00:07:36,660 --> 00:07:41,400
distributions we need to create a dark

00:07:39,420 --> 00:07:43,590
pan host and we need to make our you

00:07:41,400 --> 00:07:47,910
need to distribute our modules to our

00:07:43,590 --> 00:07:52,560
dark pan host so step zero for us was to

00:07:47,910 --> 00:07:54,750
create a Jenkins pipeline and you can

00:07:52,560 --> 00:07:59,280
see I circled down there we created two

00:07:54,750 --> 00:08:02,070
pipelines one for our core lid dark pan

00:07:59,280 --> 00:08:05,340
beta build and one for a production

00:08:02,070 --> 00:08:07,620
build so that we can stage our stage our

00:08:05,340 --> 00:08:09,000
modules into a beta environment first

00:08:07,620 --> 00:08:11,310
and make sure that they're working there

00:08:09,000 --> 00:08:16,860
first and allow our consumers to try

00:08:11,310 --> 00:08:21,530
them out there first we created you can

00:08:16,860 --> 00:08:23,700
see we created the Jenkins pipeline I

00:08:21,530 --> 00:08:28,770
guess you just call them Jenkins but

00:08:23,700 --> 00:08:30,540
Jacob Jenkins pipelines so that's we've

00:08:28,770 --> 00:08:32,340
created we finished that zero step one

00:08:30,540 --> 00:08:34,340
we not so we need to now move on to

00:08:32,340 --> 00:08:38,039
preparing our modules for distribution

00:08:34,340 --> 00:08:40,950
problem is we have 120 modules and 120

00:08:38,039 --> 00:08:43,080
modules are living in just a big

00:08:40,950 --> 00:08:45,950
monolithic repository right now that we

00:08:43,080 --> 00:08:45,950
call core lid and

00:08:46,110 --> 00:08:53,180
they are not set up for for spewing into

00:08:49,950 --> 00:08:53,180
distributions easily

00:08:54,060 --> 00:08:59,250
nice try dc-10 little distributions the

00:08:57,180 --> 00:09:01,950
way c-pen distributions work is you want

00:08:59,250 --> 00:09:06,779
them you want a seat and distribution to

00:09:01,950 --> 00:09:08,370
have a obviously the library itself the

00:09:06,779 --> 00:09:12,089
library that you're trying to distribute

00:09:08,370 --> 00:09:13,350
you want to make file and then you've

00:09:12,089 --> 00:09:16,350
got your tests and a bunch of other

00:09:13,350 --> 00:09:18,600
stuff in your CP and distributions on

00:09:16,350 --> 00:09:22,529
the other hand we have just a bunch of

00:09:18,600 --> 00:09:24,420
modules so what are we going to do well

00:09:22,529 --> 00:09:25,710
what are the necessary things for c-pen

00:09:24,420 --> 00:09:27,990
distribution the absolute bare

00:09:25,710 --> 00:09:30,450
necessities the minimum requirements for

00:09:27,990 --> 00:09:32,670
CP n distribution are the modules that

00:09:30,450 --> 00:09:36,020
you're trying to distribute the makefile

00:09:32,670 --> 00:09:40,020
that you want to build your distribution

00:09:36,020 --> 00:09:42,510
and test it and all that and then the

00:09:40,020 --> 00:09:45,200
manifest and and the metadata the

00:09:42,510 --> 00:09:48,000
metadata is used by the CPI index er

00:09:45,200 --> 00:09:51,450
those are essentially what are required

00:09:48,000 --> 00:09:52,710
for a minimal fee pen distribution we

00:09:51,450 --> 00:09:54,690
have our hundred and twenty something

00:09:52,710 --> 00:09:58,440
general basic modules all lump together

00:09:54,690 --> 00:10:00,570
so but we need and they're just in a

00:09:58,440 --> 00:10:03,900
regular hierarchical file system like

00:10:00,570 --> 00:10:10,690
this so the idea is let's Auto generate

00:10:03,900 --> 00:10:13,750
120 module distributions if people have

00:10:10,690 --> 00:10:16,320
I can't see because I'm not looking at a

00:10:13,750 --> 00:10:18,820
heart of a chat at the same time but

00:10:16,320 --> 00:10:22,810
okay we're going to auto-generate 120

00:10:18,820 --> 00:10:24,730
module distributions the steps that we

00:10:22,810 --> 00:10:27,790
need to follow our to find the module

00:10:24,730 --> 00:10:29,800
source copy it into a distribution

00:10:27,790 --> 00:10:32,500
working directory create a makefile

00:10:29,800 --> 00:10:34,210
do the make dance so that we can use

00:10:32,500 --> 00:10:40,480
Sipan tooling for the rest and then

00:10:34,210 --> 00:10:43,480
repeat that 120 times so we wrote wrote

00:10:40,480 --> 00:10:46,570
a little stroll to do it for us the

00:10:43,480 --> 00:10:48,790
Pearl starts by looping over each of the

00:10:46,570 --> 00:10:51,910
hundred and twenty plus modules that we

00:10:48,790 --> 00:10:53,650
have for each of them we're going to do

00:10:51,910 --> 00:10:57,580
this fusing parallel fork manager as you

00:10:53,650 --> 00:10:59,050
can see I have some of that setup for

00:10:57,580 --> 00:11:03,760
each those modules we're going to create

00:10:59,050 --> 00:11:04,810
a distribution temporary directory we're

00:11:03,760 --> 00:11:07,510
going to go ahead and populate that

00:11:04,810 --> 00:11:10,740
directory with the modules information

00:11:07,510 --> 00:11:13,900
I'll look at that in just a moment

00:11:10,740 --> 00:11:19,270
here's the code that does that the first

00:11:13,900 --> 00:11:22,720
step is to copy the module the module

00:11:19,270 --> 00:11:26,830
source itself into our distribution

00:11:22,720 --> 00:11:29,260
directory for that module if the module

00:11:26,830 --> 00:11:32,190
has a separate pod sidecar then we'll go

00:11:29,260 --> 00:11:32,190
ahead and copy that in

00:11:32,470 --> 00:11:37,420
and then we're going to let see pen and

00:11:35,890 --> 00:11:39,220
we're going to let pearl tooling pearl

00:11:37,420 --> 00:11:41,460
tool chain do the rest for us so we're

00:11:39,220 --> 00:11:43,930
going to create a make file and that

00:11:41,460 --> 00:11:47,440
make file will handle the rest of the

00:11:43,930 --> 00:11:49,930
turning this into a distribution so we

00:11:47,440 --> 00:11:51,700
have a very minimal make file and you

00:11:49,930 --> 00:11:56,080
can see that we just templatized our

00:11:51,700 --> 00:11:57,880
make file creation so in our template we

00:11:56,080 --> 00:12:01,150
specify the name of the module the

00:11:57,880 --> 00:12:03,910
version we get the version from the pod

00:12:01,150 --> 00:12:05,890
if the pod happens to be in a pod

00:12:03,910 --> 00:12:08,770
sidecar then we get the version from the

00:12:05,890 --> 00:12:10,300
pod sidecar instead on frame but we get

00:12:08,770 --> 00:12:14,200
the abstract from the pod sidecar

00:12:10,300 --> 00:12:16,030
instead we have to target a minimum

00:12:14,200 --> 00:12:18,670
pearl version of 510 so we know that all

00:12:16,030 --> 00:12:21,310
of our modules do already work with

00:12:18,670 --> 00:12:23,200
pearl 510 not everything that we do use

00:12:21,310 --> 00:12:26,700
is 510 we have some things that use more

00:12:23,200 --> 00:12:29,470
modern versions of pearl but some of our

00:12:26,700 --> 00:12:32,280
some of our services need to be able to

00:12:29,470 --> 00:12:32,280
target try skin

00:12:32,980 --> 00:12:41,040
we are we for our internal service we

00:12:36,850 --> 00:12:41,040
setup that we're just Vig is the author

00:12:43,490 --> 00:12:47,880
put ice and then we just process our

00:12:46,040 --> 00:12:49,649
template

00:12:47,880 --> 00:12:51,630
using it's a pretty pretty close to

00:12:49,649 --> 00:12:54,180
standard temperature template toolkit

00:12:51,630 --> 00:12:55,529
stuff we use a different template system

00:12:54,180 --> 00:12:56,880
called tempered alloy but it's just a

00:12:55,529 --> 00:12:58,279
wrapper around template tool kit that

00:12:56,880 --> 00:13:00,959
provides a few additional things

00:12:58,279 --> 00:13:07,240
tempered our template alloy is Valerie

00:13:00,959 --> 00:13:09,350
is on CPM so we've populated the Builder

00:13:07,240 --> 00:13:11,449
we just looked at the code to do that

00:13:09,350 --> 00:13:14,079
the next thing is to build the

00:13:11,449 --> 00:13:14,079
distribution

00:13:15,930 --> 00:13:22,329
in building a distribution you need to

00:13:19,209 --> 00:13:24,760
do the typical dance this is what Mazal

00:13:22,329 --> 00:13:27,130
authors typically or quite often will do

00:13:24,760 --> 00:13:28,930
they'll run pearl makes loud pl they'll

00:13:27,130 --> 00:13:32,110
make they'll make the manifest make the

00:13:28,930 --> 00:13:34,120
dist or the dist directory they'll copy

00:13:32,110 --> 00:13:36,670
the meta out of the disk directory and

00:13:34,120 --> 00:13:39,370
then they'll make the disk we copy the

00:13:36,670 --> 00:13:42,449
meta so that we have a fresh copy of

00:13:39,370 --> 00:13:45,010
auto-generated meta use it usable by the

00:13:42,449 --> 00:13:47,320
c-pen indexer that will come later and

00:13:45,010 --> 00:13:49,860
then we make our distribution so now we

00:13:47,320 --> 00:13:53,889
need to automate this process for our

00:13:49,860 --> 00:13:56,769
120 temporary build directories for

00:13:53,889 --> 00:13:59,440
temporary distribution directories the

00:13:56,769 --> 00:14:02,100
steps we walk through we want to walk

00:13:59,440 --> 00:14:02,100
through these steps

00:14:03,130 --> 00:14:11,420
so we have some more codes to do that

00:14:07,480 --> 00:14:16,480
we've created a chain of commands that

00:14:11,420 --> 00:14:18,850
need to run okay

00:14:16,480 --> 00:14:21,700
we'll be just as we saw before run the

00:14:18,850 --> 00:14:26,080
next I'll make make manifest make dis

00:14:21,700 --> 00:14:28,900
sir make the and then find the meta that

00:14:26,080 --> 00:14:33,940
showed up in our district and copy it

00:14:28,900 --> 00:14:35,770
over to our target directory after that

00:14:33,940 --> 00:14:37,930
we do some hand wavy sanity checks and

00:14:35,770 --> 00:14:39,370
version version bump checks which are

00:14:37,930 --> 00:14:42,640
not terribly interesting at the moment

00:14:39,370 --> 00:14:47,890
so let's get past those and then we

00:14:42,640 --> 00:14:51,570
finally will make this when we make this

00:14:47,890 --> 00:14:51,570
we should now have a trouble

00:14:53,020 --> 00:14:57,640
for our

00:14:55,690 --> 00:15:00,630
distribution remember we're doing this

00:14:57,640 --> 00:15:00,630
120 times

00:15:02,630 --> 00:15:08,300
through loop we've populated a disk

00:15:05,480 --> 00:15:10,790
builder and we've been used that builder

00:15:08,300 --> 00:15:13,490
to build a distribution this is in a

00:15:10,790 --> 00:15:15,510
temporary directory we've done that free

00:15:13,490 --> 00:15:18,750
to the modules

00:15:15,510 --> 00:15:21,680
the next step is to build a prototype

00:15:18,750 --> 00:15:21,680
Darkman

00:15:24,040 --> 00:15:28,610
so to build

00:15:25,490 --> 00:15:31,399
prototype dark pen well how do we do

00:15:28,610 --> 00:15:34,610
that don't really know how to do that so

00:15:31,399 --> 00:15:36,860
we're going to go look on C pad again

00:15:34,610 --> 00:15:38,449
and see what we can find and it turns

00:15:36,860 --> 00:15:42,199
out of course that a dark man is just a

00:15:38,449 --> 00:15:43,550
type of a seat pan mirror it just

00:15:42,199 --> 00:15:46,999
happens to be a type of a seat pad

00:15:43,550 --> 00:15:52,069
mirror that doesn't marry Sipan vampire

00:15:46,999 --> 00:15:55,449
there it doesn't reflect so our next

00:15:52,069 --> 00:15:57,920
step is to build this dark pan prototype

00:15:55,449 --> 00:15:59,839
so I can go back to the seat pan again

00:15:57,920 --> 00:16:02,029
and say well certainly tooling exists to

00:15:59,839 --> 00:16:03,410
do this sort of thing and I was not

00:16:02,029 --> 00:16:05,749
disappointed

00:16:03,410 --> 00:16:07,339
I found sea pan mirror tiny found a lot

00:16:05,749 --> 00:16:11,149
of good modules the seat pan very tiny

00:16:07,339 --> 00:16:13,819
provided just enough of what I needed if

00:16:11,149 --> 00:16:15,319
we look at the documentation for seat

00:16:13,819 --> 00:16:17,899
pan very tiny as we see that there's a

00:16:15,319 --> 00:16:19,759
method called inject and it has several

00:16:17,899 --> 00:16:23,389
derivative methods one of them happens

00:16:19,759 --> 00:16:25,220
to be direct local file so previously in

00:16:23,389 --> 00:16:30,170
my in the previous steps that I worked

00:16:25,220 --> 00:16:33,410
through we created 120 tarballs we can

00:16:30,170 --> 00:16:36,920
now use inject local file to inject

00:16:33,410 --> 00:16:45,050
those 120 tar balls into our prototype

00:16:36,920 --> 00:16:48,260
for a dark pan so the

00:16:45,050 --> 00:16:51,620
see pentamirror needs to be the o2

00:16:48,260 --> 00:16:54,080
package of details about text GZ file

00:16:51,620 --> 00:16:56,839
that's the index file and then the

00:16:54,080 --> 00:17:01,550
distributions in form of tarballs hard

00:16:56,839 --> 00:17:05,390
on Jeezy's so let's look at some code

00:17:01,550 --> 00:17:07,699
again we're going to start by

00:17:05,390 --> 00:17:10,240
instantiating our Sipan mera tiny

00:17:07,699 --> 00:17:15,260
instance and giving it a base

00:17:10,240 --> 00:17:18,380
destination to deploy to and then we're

00:17:15,260 --> 00:17:21,189
going to walk through each of our term

00:17:18,380 --> 00:17:21,189
balls that we created

00:17:21,650 --> 00:17:26,319
are going to inject those tar balls into

00:17:23,870 --> 00:17:29,669
our distribution

00:17:26,319 --> 00:17:29,669
one by one

00:17:30,880 --> 00:17:37,340
into our distribution we're going to go

00:17:32,440 --> 00:17:39,860
ahead and write out our index compressed

00:17:37,340 --> 00:17:41,240
I mean it it seems really simple there

00:17:39,860 --> 00:17:43,010
was a lot of fiddling to figure it all

00:17:41,240 --> 00:17:46,360
out but it it it actually is pretty

00:17:43,010 --> 00:17:46,360
simple once you get it figured out

00:17:47,299 --> 00:17:51,889
mention this never release anything even

00:17:50,090 --> 00:17:53,869
a one-word documentation patch without

00:17:51,889 --> 00:17:56,869
incrementing to number the version

00:17:53,869 --> 00:17:58,429
number even a one-word documentation

00:17:56,869 --> 00:18:00,889
patch should be should result in a

00:17:58,429 --> 00:18:03,799
change in version at the sub minor level

00:18:00,889 --> 00:18:06,429
this is found in Perl ma style product

00:18:03,799 --> 00:18:06,429
pro month now

00:18:06,900 --> 00:18:13,780
so we created some tests to verify that

00:18:11,260 --> 00:18:16,120
when people make code contributions to

00:18:13,780 --> 00:18:19,350
our choral libraries that they do

00:18:16,120 --> 00:18:22,660
version bumps our tests are capable of

00:18:19,350 --> 00:18:24,130
verifying but also fixing if they didn't

00:18:22,660 --> 00:18:28,500
do a version bumpin and committing the

00:18:24,130 --> 00:18:28,500
fix if they choose to do it that way

00:18:28,740 --> 00:18:35,230
these tests are automatically run by

00:18:31,480 --> 00:18:38,380
bamboo every time there's a commit so

00:18:35,230 --> 00:18:40,540
before a pull request can be merged the

00:18:38,380 --> 00:18:43,060
tests have to be passing bamboo enforces

00:18:40,540 --> 00:18:47,950
this so we enforce that version bumps

00:18:43,060 --> 00:18:50,530
happen within the core Lib the next step

00:18:47,950 --> 00:18:52,840
is to automate the build and so what

00:18:50,530 --> 00:18:54,580
does that look like our build we start

00:18:52,840 --> 00:18:57,610
with stash or bitbucket which is our

00:18:54,580 --> 00:19:02,650
source repository it's similar to get

00:18:57,610 --> 00:19:05,440
except that it's it's from Atlassian we

00:19:02,650 --> 00:19:08,500
have Jenkins monitoring bitbucket and

00:19:05,440 --> 00:19:10,540
when Jenkins finds the changes with the

00:19:08,500 --> 00:19:12,040
change of head changes have happened in

00:19:10,540 --> 00:19:16,240
the master branch or that a new merge

00:19:12,040 --> 00:19:18,790
two masters happened it pushes that over

00:19:16,240 --> 00:19:20,760
to a build server the build server runs

00:19:18,790 --> 00:19:23,440
the code that I showed you before and

00:19:20,760 --> 00:19:24,880
then it pushes it out to the mirror well

00:19:23,440 --> 00:19:27,310
then there picks it up and pulls it over

00:19:24,880 --> 00:19:30,790
and at that point micro services can

00:19:27,310 --> 00:19:32,140
rebuild themselves and can catch the new

00:19:30,790 --> 00:19:33,460
versions that have showed up on our

00:19:32,140 --> 00:19:36,450
mirror

00:19:33,460 --> 00:19:39,159
I showed you before that we have

00:19:36,450 --> 00:19:40,179
pipelines stilt out we're going to look

00:19:39,159 --> 00:19:42,760
a little bit more closely at those

00:19:40,179 --> 00:19:44,169
pipelines before that we need to look at

00:19:42,760 --> 00:19:46,080
what we get in bitbucket well there's a

00:19:44,169 --> 00:19:51,610
web hook that we created in bitbucket

00:19:46,080 --> 00:19:54,039
then anytime that anytime emerge

00:19:51,610 --> 00:19:58,230
semester happens Jenkins is able to see

00:19:54,039 --> 00:19:58,230
that that merged to master took place

00:20:00,510 --> 00:20:05,500
Jenkins then kicks off this pipeline we

00:20:03,880 --> 00:20:07,350
wrote the put this little pipeline code

00:20:05,500 --> 00:20:11,409
which lives in our core libera posit ori

00:20:07,350 --> 00:20:14,380
the pipeline code runs on the build

00:20:11,409 --> 00:20:19,990
server if i go back a couple slides it

00:20:14,380 --> 00:20:22,929
runs on the build server and all that it

00:20:19,990 --> 00:20:24,580
does is it runs the the code that I

00:20:22,929 --> 00:20:26,290
showed you previously deep and this

00:20:24,580 --> 00:20:28,350
build

00:20:26,290 --> 00:20:28,350
you

00:20:28,550 --> 00:20:33,690
Oh jinkies

00:20:31,140 --> 00:20:35,429
jenkins file for for production and a

00:20:33,690 --> 00:20:40,580
separate one a separate one called

00:20:35,429 --> 00:20:47,760
jenkins file dot beta a pen for our beta

00:20:40,580 --> 00:20:51,330
pipeline so Jason Paul go ahead and

00:20:47,760 --> 00:20:53,520
click merge for me that's the two people

00:20:51,330 --> 00:20:56,549
that pictures are there and then we get

00:20:53,520 --> 00:20:59,670
a bill taking place this week Jenkins

00:20:56,549 --> 00:21:05,700
picks up that build you can see that we

00:20:59,670 --> 00:21:07,740
did this actually earlier today and we

00:21:05,700 --> 00:21:09,960
build out our push it over to the

00:21:07,740 --> 00:21:12,530
production server the bill took about 30

00:21:09,960 --> 00:21:12,530
seconds

00:21:12,840 --> 00:21:15,900
and you can see it ran through a bunch

00:21:14,520 --> 00:21:17,640
of things what did it run through well

00:21:15,900 --> 00:21:21,179
this part here you can see it's running

00:21:17,640 --> 00:21:24,690
my code it's making the manifest for us

00:21:21,179 --> 00:21:26,580
it's discovering that we have versions

00:21:24,690 --> 00:21:28,529
that didn't change that can be skipped

00:21:26,580 --> 00:21:30,659
we're only going to create manifests for

00:21:28,529 --> 00:21:34,190
those but we're only going to create

00:21:30,659 --> 00:21:36,600
manifest and make files and and and

00:21:34,190 --> 00:21:39,690
distributions for those that have had a

00:21:36,600 --> 00:21:43,200
version month we skip the rest and then

00:21:39,690 --> 00:21:45,809
we go ahead and build our distribution

00:21:43,200 --> 00:21:48,450
that all of our distributions took 23

00:21:45,809 --> 00:21:54,059
seconds to build all the ones that

00:21:48,450 --> 00:21:57,120
changed it took a few more seconds well

00:21:54,059 --> 00:21:59,130
it took point four six seconds to create

00:21:57,120 --> 00:22:02,220
a prototype dark pan off of our new

00:21:59,130 --> 00:22:05,970
distributions and so the entire process

00:22:02,220 --> 00:22:07,770
was twenty three and a half seconds for

00:22:05,970 --> 00:22:14,700
the modules have changed in our most

00:22:07,770 --> 00:22:16,860
recent release success and if we watch

00:22:14,700 --> 00:22:19,320
our Jenkins build as it's happening we

00:22:16,860 --> 00:22:23,659
can see that they are twenty four

00:22:19,320 --> 00:22:23,659
seconds to do the build

00:22:23,940 --> 00:22:26,000
you

00:22:26,730 --> 00:22:35,550
for some reason the higher-level views -

00:22:29,490 --> 00:22:38,400
listen it's 30 seconds but whatever so

00:22:35,550 --> 00:22:39,660
on the dark pan mirror looks like I

00:22:38,400 --> 00:22:41,340
should have put another slide here for

00:22:39,660 --> 00:22:45,720
this if I go back a few slides you can

00:22:41,340 --> 00:22:48,210
see that we had the build server as a

00:22:45,720 --> 00:22:51,990
kind of a prototype for the dark pan and

00:22:48,210 --> 00:22:55,650
then we have the mirror server that is

00:22:51,990 --> 00:22:58,100
the actual dark Pam just skip ahead

00:22:55,650 --> 00:22:58,100
again

00:23:00,730 --> 00:23:08,270
well the dark pan mirror we have a cron

00:23:04,100 --> 00:23:11,150
that monitors the build server and its

00:23:08,270 --> 00:23:12,740
job is just to use our sink it looks at

00:23:11,150 --> 00:23:14,270
the build server when things have

00:23:12,740 --> 00:23:17,240
changed to use as our think and it pulls

00:23:14,270 --> 00:23:20,510
them over to the mirror and really all

00:23:17,240 --> 00:23:25,059
that it's pulling over is the index file

00:23:20,510 --> 00:23:25,059
and the distribution tarball themselves

00:23:27,200 --> 00:23:33,900
on the build server on the on the mirror

00:23:30,990 --> 00:23:35,550
server we have just a container a docker

00:23:33,900 --> 00:23:37,290
container that's running a little

00:23:35,550 --> 00:23:40,350
application a little web app and that

00:23:37,290 --> 00:23:43,290
web app exposes a public directory that

00:23:40,350 --> 00:23:45,660
it and the public directory is where we

00:23:43,290 --> 00:23:48,570
pull down all of our it's an external

00:23:45,660 --> 00:23:53,730
path that we pull down to the mayor for

00:23:48,570 --> 00:23:56,670
all of our tar balls and this is perhaps

00:23:53,730 --> 00:24:00,690
the stupidest thing ever inside of

00:23:56,670 --> 00:24:05,360
OpenShift we couldn't get nginx to to

00:24:00,690 --> 00:24:07,890
serve up the content we docker I'm sorry

00:24:05,360 --> 00:24:09,690
openshift wanted a docker container to

00:24:07,890 --> 00:24:10,950
deploy the dr container needed to be

00:24:09,690 --> 00:24:12,360
running something and those things that

00:24:10,950 --> 00:24:14,940
it's running there's nothing but a

00:24:12,360 --> 00:24:18,180
mojolicious light app that serves out

00:24:14,940 --> 00:24:19,680
the public directory it's doing nothing

00:24:18,180 --> 00:24:21,090
else and it would have been nice if we

00:24:19,680 --> 00:24:23,700
could have just gotten nginx to do the

00:24:21,090 --> 00:24:25,250
listening for us without all these steps

00:24:23,700 --> 00:24:27,960
in between but we couldn't deploy

00:24:25,250 --> 00:24:30,720
essentially nothing into OpenShift

00:24:27,960 --> 00:24:32,280
and we had and so since we had to deploy

00:24:30,720 --> 00:24:34,080
something we deployed the smallest thing

00:24:32,280 --> 00:24:35,490
we possibly could which was a little

00:24:34,080 --> 00:24:38,180
mojolicious light app serving the

00:24:35,490 --> 00:24:38,180
content for us

00:24:40,820 --> 00:24:47,409
now we have this is

00:24:44,830 --> 00:24:50,789
browsable from from within our internal

00:24:47,409 --> 00:24:50,789
networks dark pan

00:24:51,290 --> 00:24:57,890
see that it exposes out the at the

00:24:54,710 --> 00:25:01,760
standard place : modules it exposes up

00:24:57,890 --> 00:25:06,800
the packages details not text this is

00:25:01,760 --> 00:25:11,630
the Sipan Index essentially and it also

00:25:06,800 --> 00:25:13,670
exposes out all of the modules as turbos

00:25:11,630 --> 00:25:15,710
and this is exactly what you would find

00:25:13,670 --> 00:25:19,390
if you were looking on Sipan you would

00:25:15,710 --> 00:25:22,760
find author's ID and then the author

00:25:19,390 --> 00:25:27,740
hierarchy so because we're exposing that

00:25:22,760 --> 00:25:30,020
this way the common tooling C pen - CPM

00:25:27,740 --> 00:25:32,120
the c-pen install or any of the common

00:25:30,020 --> 00:25:34,220
tooling can now find my internal modules

00:25:32,120 --> 00:25:37,600
as long as we point them as long as you

00:25:34,220 --> 00:25:39,760
point that tooling to the right mirror

00:25:37,600 --> 00:25:43,120
so we're done

00:25:39,760 --> 00:25:43,120
most we come

00:25:43,220 --> 00:25:49,020
now for the consume

00:25:45,270 --> 00:25:51,660
services any consuming

00:25:49,020 --> 00:25:55,200
service that is using Perl probably

00:25:51,660 --> 00:25:58,050
ought to be using my carton and carton

00:25:55,200 --> 00:26:00,240
in carton we can specify based on what

00:25:58,050 --> 00:26:03,840
we learned earlier they can specify for

00:26:00,240 --> 00:26:06,150
our C penalized modules they can just

00:26:03,840 --> 00:26:07,890
use requires for our internal modules

00:26:06,150 --> 00:26:13,170
who we're using an internal module

00:26:07,890 --> 00:26:17,210
called end and lets us set up things to

00:26:13,170 --> 00:26:20,790
happen it at scope teardown anyway

00:26:17,210 --> 00:26:24,840
inside to use our internal end module we

00:26:20,790 --> 00:26:28,980
can just point the c-pen file to our

00:26:24,840 --> 00:26:31,310
internal mirror and it'll find it there

00:26:28,980 --> 00:26:31,310
for us

00:26:34,890 --> 00:26:42,429
okay so moving on next steps

00:26:39,160 --> 00:26:44,590
so that's essentially everything that

00:26:42,429 --> 00:26:48,669
we've needed to accomplish to expose our

00:26:44,590 --> 00:26:50,350
internal internal dark pan to create an

00:26:48,669 --> 00:26:53,710
internal of our dark pan and expose it

00:26:50,350 --> 00:26:57,190
to our current customer base search our

00:26:53,710 --> 00:27:01,030
internal or internal consumers next

00:26:57,190 --> 00:27:02,410
steps things we didn't handle we didn't

00:27:01,030 --> 00:27:05,350
handle at all

00:27:02,410 --> 00:27:06,940
dependency detection and resolution we

00:27:05,350 --> 00:27:08,410
talked about it we thought we could do

00:27:06,940 --> 00:27:12,010
it and we absolutely could have done it

00:27:08,410 --> 00:27:14,200
but but decided ultimately that it

00:27:12,010 --> 00:27:16,690
wasn't necessary for our purposes our

00:27:14,200 --> 00:27:20,710
internal consumers know our code nation

00:27:16,690 --> 00:27:23,049
and can automatically so they can

00:27:20,710 --> 00:27:25,929
manually themselves specify what what

00:27:23,049 --> 00:27:27,940
dependencies they want to pull in one of

00:27:25,929 --> 00:27:30,910
the reasons we didn't handle dependency

00:27:27,940 --> 00:27:33,040
resolution automatically is because some

00:27:30,910 --> 00:27:35,290
of our code has content has contingent

00:27:33,040 --> 00:27:38,169
dependent dependencies and we didn't

00:27:35,290 --> 00:27:39,880
want to force our consumers in to use

00:27:38,169 --> 00:27:40,990
dependencies that were only based on

00:27:39,880 --> 00:27:43,390
code paths they would never be

00:27:40,990 --> 00:27:45,790
exercising that introduces I realized

00:27:43,390 --> 00:27:47,380
them from some fragile nuts and we may

00:27:45,790 --> 00:27:49,270
go back and revisit at it at a future

00:27:47,380 --> 00:27:53,040
point it would not be hard to revisit

00:27:49,270 --> 00:27:57,040
and change but our our current

00:27:53,040 --> 00:28:02,260
dependency resolution our current make

00:27:57,040 --> 00:28:04,780
files do not specify a prereq underscore

00:28:02,260 --> 00:28:05,890
PL and so we are not handling

00:28:04,780 --> 00:28:10,510
dependencies at all within our

00:28:05,890 --> 00:28:12,820
distributions the other thing that we're

00:28:10,510 --> 00:28:15,100
not handling is that there's a web

00:28:12,820 --> 00:28:17,110
interface C 10 - doesn't need a web

00:28:15,100 --> 00:28:18,850
interface the c-pen Installer doesn't

00:28:17,110 --> 00:28:22,360
need an interface all they needed to

00:28:18,850 --> 00:28:25,780
fetch the index and then fetch the

00:28:22,360 --> 00:28:28,690
tarballs based on the index so we had

00:28:25,780 --> 00:28:31,000
and all of our internal consumers

00:28:28,690 --> 00:28:34,059
already use fashion bitbucket and

00:28:31,000 --> 00:28:36,010
already know where to find the

00:28:34,059 --> 00:28:38,799
documentation for and where to find the

00:28:36,010 --> 00:28:40,690
modules themselves they just need for

00:28:38,799 --> 00:28:42,790
the Sipan tooling to be able to find him

00:28:40,690 --> 00:28:48,030
and so we didn't have a need for an

00:28:42,790 --> 00:28:48,030
internal dork pan web interface at all

00:28:53,480 --> 00:28:59,340
so that first was an exercise for the

00:28:55,830 --> 00:29:02,240
viewers sorry the last thing that we

00:28:59,340 --> 00:29:07,139
didn't handle was distribution testing

00:29:02,240 --> 00:29:10,289
all of our internal core modules

00:29:07,139 --> 00:29:12,299
automatically get tested by bamboo

00:29:10,289 --> 00:29:14,249
anytime the poorest pull request is

00:29:12,299 --> 00:29:19,470
created and we can't merge to master

00:29:14,249 --> 00:29:22,860
without the bamboo build passing so

00:29:19,470 --> 00:29:26,429
without the tester passing we test them

00:29:22,860 --> 00:29:28,470
in a variety of environments and and so

00:29:26,429 --> 00:29:30,690
for that reason we didn't build that we

00:29:28,470 --> 00:29:35,309
didn't pull the test the test script

00:29:30,690 --> 00:29:38,039
into our distributions another reason

00:29:35,309 --> 00:29:41,519
was that many of our test scripts didn't

00:29:38,039 --> 00:29:44,009
actually we didn't know we don't have

00:29:41,519 --> 00:29:47,580
them entirely normalized to test names

00:29:44,009 --> 00:29:48,960
matching module names when you're

00:29:47,580 --> 00:29:51,690
automating things things really need to

00:29:48,960 --> 00:29:54,600
be on to be normalized so if you want

00:29:51,690 --> 00:29:57,210
your test to be pulled into a into an

00:29:54,600 --> 00:30:00,240
automated process like this your test

00:29:57,210 --> 00:30:01,889
names need to match your module names in

00:30:00,240 --> 00:30:04,169
some predictable way or you need to

00:30:01,889 --> 00:30:07,080
build a test index for your modules

00:30:04,169 --> 00:30:08,759
further you can automate that process we

00:30:07,080 --> 00:30:10,139
didn't do that we may revisit it I

00:30:08,759 --> 00:30:13,710
actually think there probably is value

00:30:10,139 --> 00:30:16,940
to roots are doing that so that's left

00:30:13,710 --> 00:30:16,940
for a future work as well

00:30:17,809 --> 00:30:20,890
not having done

00:30:19,480 --> 00:30:23,110
conference in the clouds before I've

00:30:20,890 --> 00:30:26,200
arrived at I've arrived at the end of

00:30:23,110 --> 00:30:27,730
earlier than I anticipated so I will go

00:30:26,200 --> 00:30:30,940
ahead and take questions if people have

00:30:27,730 --> 00:30:32,380
questions I'm going to monitor chat

00:30:30,940 --> 00:30:35,110
because I haven't heard anybody talking

00:30:32,380 --> 00:30:36,760
at this point so are there any questions

00:30:35,110 --> 00:30:39,600
that people would like to discuss or

00:30:36,760 --> 00:30:39,600
talk about missus

00:30:39,929 --> 00:30:41,990
you

00:30:44,740 --> 00:30:50,820
I say thank you from Christopher light

00:30:48,130 --> 00:30:50,820
and welcome

00:30:51,520 --> 00:30:57,880
I will expose these I will put these

00:30:54,670 --> 00:30:59,680
slides up on SlideShare because I do

00:30:57,880 --> 00:31:01,060
think that being able to kind of look at

00:30:59,680 --> 00:31:06,700
the code a little more closely

00:31:01,060 --> 00:31:09,670
there's probably valuable so I'll put

00:31:06,700 --> 00:31:12,250
them up on SlideShare and I'll post a

00:31:09,670 --> 00:31:15,520
link somewhere I'll post it in the in

00:31:12,250 --> 00:31:18,160
flack for now as soon as I get them

00:31:15,520 --> 00:31:20,320
posted up to SlideShare and if and if

00:31:18,160 --> 00:31:21,670
people have questions or concerns or

00:31:20,320 --> 00:31:23,010
anything you can reach me and deflect

00:31:21,670 --> 00:31:26,770
for the conference but you're also

00:31:23,010 --> 00:31:30,250
welcome to reach me at my any of my

00:31:26,770 --> 00:31:32,860
email addresses I'm happy to talk to

00:31:30,250 --> 00:31:36,180
people about this there's a lot of fun

00:31:32,860 --> 00:31:36,180
creating a lot of fun doing

00:31:37,030 --> 00:31:42,539
and that's everything I have so go now

00:31:39,610 --> 00:31:46,220
set up an internal darkman

00:31:42,539 --> 00:31:48,350
Oh someone

00:31:46,220 --> 00:31:51,110
the question a couple questions did you

00:31:48,350 --> 00:31:55,309
look into using Tinto yes I did look

00:31:51,110 --> 00:31:58,700
into using Pinto Pinto is fantastic

00:31:55,309 --> 00:32:01,580
it was probably heavier tooling than I

00:31:58,700 --> 00:32:02,960
needed for this specific project it

00:32:01,580 --> 00:32:05,929
would let me build out multiple dark

00:32:02,960 --> 00:32:07,340
candy Silla mentioned and that is

00:32:05,929 --> 00:32:11,659
actually something that we talked about

00:32:07,340 --> 00:32:13,580
we there are this was not the only

00:32:11,659 --> 00:32:16,400
repository that we had what we have

00:32:13,580 --> 00:32:18,830
generally useful code we have another

00:32:16,400 --> 00:32:20,330
repository we call GT and that has a

00:32:18,830 --> 00:32:22,940
bunch of other generally useful code

00:32:20,330 --> 00:32:24,440
that we could have pulled down we

00:32:22,940 --> 00:32:26,480
probably will stand that up as a

00:32:24,440 --> 00:32:28,760
separate independent dark pen it's

00:32:26,480 --> 00:32:30,559
easier to stand up independent separate

00:32:28,760 --> 00:32:33,950
dark pans than to steal a bunch of

00:32:30,559 --> 00:32:35,900
things into the same one until may be

00:32:33,950 --> 00:32:38,179
useful in that process we'll wait when

00:32:35,900 --> 00:32:40,370
we start adding additional repositories

00:32:38,179 --> 00:32:42,830
and I do like the fact that you can pin

00:32:40,370 --> 00:32:44,390
to old versions one thing that we're

00:32:42,830 --> 00:32:47,059
doing in this dark pen is we are never

00:32:44,390 --> 00:32:49,460
tearing down the old versions so if our

00:32:47,059 --> 00:32:54,650
consumers wish to pin themselves to an

00:32:49,460 --> 00:32:56,450
old version they can do that we I did

00:32:54,650 --> 00:32:57,620
look at the possibility of standing up a

00:32:56,450 --> 00:33:01,809
web server so that was the next question

00:32:57,620 --> 00:33:05,980
is I've used Sipan mini web server and I

00:33:01,809 --> 00:33:09,260
and that's coming from Mac's crime I

00:33:05,980 --> 00:33:12,169
probably will if I ever get the time to

00:33:09,260 --> 00:33:13,820
do it put a mini web server in front of

00:33:12,169 --> 00:33:16,010
this so that it is browsable internally

00:33:13,820 --> 00:33:18,440
I do see value in that because it

00:33:16,010 --> 00:33:20,150
exposes our pod out in a more friendly

00:33:18,440 --> 00:33:23,780
fashion even for our own internal

00:33:20,150 --> 00:33:28,340
consumers and have you considered a mini

00:33:23,780 --> 00:33:29,480
c-pen so a dark pen is in a way of NEC

00:33:28,340 --> 00:33:31,789
pad except but it's just our internal

00:33:29,480 --> 00:33:36,980
content you're just you're talking about

00:33:31,789 --> 00:33:39,350
a mini C panas in in terms of reaching

00:33:36,980 --> 00:33:41,480
out to external Sipan but using the

00:33:39,350 --> 00:33:43,340
internal women or using the external

00:33:41,480 --> 00:33:45,590
Sipan to populate an internal one that

00:33:43,340 --> 00:33:47,240
we can then control a little bit more

00:33:45,590 --> 00:33:49,159
for pin versions and that sort of thing

00:33:47,240 --> 00:33:50,860
we've talked about it it hasn't been

00:33:49,159 --> 00:33:54,830
necessary for what we're currently doing

00:33:50,860 --> 00:33:56,539
but we are in a situation where and some

00:33:54,830 --> 00:33:59,179
of our servers were pin to pretty old

00:33:56,539 --> 00:33:59,990
versions of modules some of them were

00:33:59,179 --> 00:34:03,170
able to it

00:33:59,990 --> 00:34:04,400
on some more recent versions we do have

00:34:03,170 --> 00:34:06,770
some value for it it's just not

00:34:04,400 --> 00:34:09,320
something that my team is working on our

00:34:06,770 --> 00:34:11,420
needing we have another team that works

00:34:09,320 --> 00:34:14,920
with this sort of thing and I imagine

00:34:11,420 --> 00:34:14,920
they've looked at it and considered it

00:34:16,639 --> 00:34:23,809
if there aren't any further questions

00:34:19,589 --> 00:34:23,809

YouTube URL: https://www.youtube.com/watch?v=cguMCLC9hBg


