Title: Olaf Alders and Mark Fowler - Getting Started with GitHub Actions
Publication date: 2020-06-25
Playlist: TPC 2020 in the Cloud
Description: 
	Continuous Integration systems such as GitHub Actions and CircleCI allow you to automate tasks such as building, testing and linting your code. After this talk youâ€™ll be equipped to use these tools to:

Build and test your code on Linux, macOS and Windows using GitHub Actions and CircleCI
Speed up your build time
Set up code coverage
Use build artifacts

I will be using some Perl-specific examples, but much of the content will be useful across different languages.  This talk will get you up and running quickly and will provide you with sample configurations you can use right now. In particular, we will talk about lightning fast testing for Dist::Zilla modules, installing your Perl prerequisites faster and a strategy to build once and then test many times.

Slides at https://github.com/oalders/presentations/blob/master/slides/4-github-actions/marp.pdf

See also https://github.com/Perl/docker-perl-tester
Captions: 
	00:00:00,000 --> 00:00:06,180
okay so thanks everyone for coming today

00:00:02,909 --> 00:00:08,150
my name is Olaf alders boulders on c-pen

00:00:06,180 --> 00:00:11,610
and today I'm going to be talking about

00:00:08,150 --> 00:00:14,009
testing with github actions so the plan

00:00:11,610 --> 00:00:16,139
for today is I will talk about getting

00:00:14,009 --> 00:00:18,150
up workflows and actions and Mark Fowler

00:00:16,139 --> 00:00:19,920
will show us how to do a lot of the same

00:00:18,150 --> 00:00:22,740
things with circle CI so when he saw

00:00:19,920 --> 00:00:24,180
that my talk was on the schedule he

00:00:22,740 --> 00:00:26,070
reached out to me and said oh I can I'm

00:00:24,180 --> 00:00:28,109
sure I could do all these things with

00:00:26,070 --> 00:00:29,310
server CI and I said sure why don't you

00:00:28,109 --> 00:00:31,260
put some slides together so that

00:00:29,310 --> 00:00:33,510
actually it'd be really helpful for me

00:00:31,260 --> 00:00:36,450
so just to make sure we're all on the

00:00:33,510 --> 00:00:39,420
same page I just wanted to find what the

00:00:36,450 --> 00:00:41,550
actions and workflows actually are so

00:00:39,420 --> 00:00:46,289
these are both components that you can

00:00:41,550 --> 00:00:50,149
use as a part of your your CI process so

00:00:46,289 --> 00:00:50,149
just gonna move something here okay so

00:00:50,780 --> 00:00:54,690
what is CI actually continuous

00:00:53,070 --> 00:00:56,010
integration so it's the practice of

00:00:54,690 --> 00:00:59,910
automating the integration of code

00:00:56,010 --> 00:01:02,190
changes into a software project it's

00:00:59,910 --> 00:01:03,210
also sort of comprised of automatic

00:01:02,190 --> 00:01:05,729
tools that are served that your new

00:01:03,210 --> 00:01:07,380
codes correctness your new code is

00:01:05,729 --> 00:01:08,490
correct before integration that's just

00:01:07,380 --> 00:01:12,600
something that I grabbed off the atlast

00:01:08,490 --> 00:01:14,310
insight basically it's just it's just a

00:01:12,600 --> 00:01:16,140
way for you to do certain things in an

00:01:14,310 --> 00:01:19,170
automated process just to make sure

00:01:16,140 --> 00:01:20,850
things are as you think they are you

00:01:19,170 --> 00:01:22,920
know before you merge code or do various

00:01:20,850 --> 00:01:24,390
different things so just a point of the

00:01:22,920 --> 00:01:26,369
seat and testers it's not CIA

00:01:24,390 --> 00:01:28,530
you shouldn't confuse the two things

00:01:26,369 --> 00:01:31,470
it's not a replacement what is sort of

00:01:28,530 --> 00:01:33,119
complementary to it you know may be part

00:01:31,470 --> 00:01:34,920
of your release process to see Pam but

00:01:33,119 --> 00:01:36,299
it's likely not part of your automated

00:01:34,920 --> 00:01:39,060
build process unless you're doing some

00:01:36,299 --> 00:01:43,110
crazy stuff so some practical examples

00:01:39,060 --> 00:01:44,939
of what or when CI might happen would be

00:01:43,110 --> 00:01:46,950
on when you push code to a branch you

00:01:44,939 --> 00:01:48,360
might want to run your test suite just

00:01:46,950 --> 00:01:50,939
to make sure everything's as you think

00:01:48,360 --> 00:01:53,220
it is you might want to link your code

00:01:50,939 --> 00:01:54,840
just to check it for correctness you

00:01:53,220 --> 00:01:57,689
might want to use a tidier to check your

00:01:54,840 --> 00:01:59,159
code for untied eNOS or check somebody

00:01:57,689 --> 00:02:01,259
else's code for untighten it says as

00:01:59,159 --> 00:02:02,579
you're getting in on a merge you might

00:02:01,259 --> 00:02:03,899
want to do sort of similar things you

00:02:02,579 --> 00:02:06,930
might want to run the tests again that

00:02:03,899 --> 00:02:09,300
you ran on the push you might want to

00:02:06,930 --> 00:02:11,310
create CI new docker image push it to

00:02:09,300 --> 00:02:14,520
docker hub but I'm gonna send a

00:02:11,310 --> 00:02:17,880
notification to slack or to IRC

00:02:14,520 --> 00:02:19,530
I want to send email there's lots of

00:02:17,880 --> 00:02:22,490
things you can do and when you look at

00:02:19,530 --> 00:02:24,780
github there are sort of lots of

00:02:22,490 --> 00:02:28,140
different things that you can do just to

00:02:24,780 --> 00:02:29,880
trigger the CI you might want to run

00:02:28,140 --> 00:02:31,530
something when a tag gets pushed when

00:02:29,880 --> 00:02:33,180
someone closes an issue when a pull

00:02:31,530 --> 00:02:35,700
request gets created when someone edits

00:02:33,180 --> 00:02:37,890
a wiki page when a repository gets

00:02:35,700 --> 00:02:42,180
formed when a label gets added to an

00:02:37,890 --> 00:02:44,100
issue you can even run processes when

00:02:42,180 --> 00:02:45,690
when somebody stars your repository to

00:02:44,100 --> 00:02:47,400
say they're watching it and there's too

00:02:45,690 --> 00:02:49,530
many to list so I've referenced a page

00:02:47,400 --> 00:02:51,630
where you can go and look them up so

00:02:49,530 --> 00:02:54,630
this brings us to sort of actions versus

00:02:51,630 --> 00:02:56,820
workflows and in the github literature

00:02:54,630 --> 00:02:58,110
they kind of get used interchangeably so

00:02:56,820 --> 00:03:00,960
we're just going to simplify them for

00:02:58,110 --> 00:03:02,250
today let's not assume my termination is

00:03:00,960 --> 00:03:04,170
a hundred percent correct but it'll just

00:03:02,250 --> 00:03:07,560
be useful enough for this conversations

00:03:04,170 --> 00:03:08,850
so the github actions are a couple

00:03:07,560 --> 00:03:10,260
things the first thing is this really is

00:03:08,850 --> 00:03:12,840
just a name for a product and the

00:03:10,260 --> 00:03:14,670
product is something they get up makes

00:03:12,840 --> 00:03:18,990
available to you so that you can run

00:03:14,670 --> 00:03:20,790
workflows on your repository just things

00:03:18,990 --> 00:03:21,930
you can incorporate into your software

00:03:20,790 --> 00:03:24,240
development lifecycle

00:03:21,930 --> 00:03:27,060
you know actions are also individual

00:03:24,240 --> 00:03:30,570
tasks that you can combine to create

00:03:27,060 --> 00:03:32,310
jobs to customize a workflow you can

00:03:30,570 --> 00:03:33,720
create actions that you can share with

00:03:32,310 --> 00:03:35,730
other people you can use other people's

00:03:33,720 --> 00:03:38,160
actions there kind of this modular thing

00:03:35,730 --> 00:03:40,160
so it's the name for the product but

00:03:38,160 --> 00:03:42,240
it's also the name for four specific

00:03:40,160 --> 00:03:45,180
parts of the product that you can use

00:03:42,240 --> 00:03:47,190
now what are the workflows well the

00:03:45,180 --> 00:03:51,300
workflows are really a way to put

00:03:47,190 --> 00:03:53,130
actions together workflow is it's an

00:03:51,300 --> 00:03:54,810
automated process that you can configure

00:03:53,130 --> 00:03:56,820
you can configure it with one or more

00:03:54,810 --> 00:03:59,760
yellow files and those will just live in

00:03:56,820 --> 00:04:02,430
a dot github slash workflows directory

00:03:59,760 --> 00:04:04,440
and your workflows can have descriptive

00:04:02,430 --> 00:04:06,420
names it just needs a and with a yellow

00:04:04,440 --> 00:04:09,420
extension they need to live in the right

00:04:06,420 --> 00:04:12,450
spot and you need to say what actions

00:04:09,420 --> 00:04:14,130
will trigger your workflows so just to

00:04:12,450 --> 00:04:15,840
wrap that part up if we were gonna think

00:04:14,130 --> 00:04:17,489
of this in terms of Perl the actions

00:04:15,840 --> 00:04:20,130
which other reusable bits would be kind

00:04:17,489 --> 00:04:22,140
of like modules the workflows which you

00:04:20,130 --> 00:04:24,750
need to create on a per repository basis

00:04:22,140 --> 00:04:26,430
or more like scripts and the workflows

00:04:24,750 --> 00:04:28,650
can include actions but they don't have

00:04:26,430 --> 00:04:30,630
to in just in the same way that yours

00:04:28,650 --> 00:04:32,479
proscribe could include some modules but

00:04:30,630 --> 00:04:34,440
there's no reason that it would have to

00:04:32,479 --> 00:04:37,500
now the specs are going to be working

00:04:34,440 --> 00:04:41,460
with on github you got a two core CPU

00:04:37,500 --> 00:04:44,550
seven gigs of ram 14 gigs of SSD and you

00:04:41,460 --> 00:04:46,979
can run 20 concurrent jobs if you're

00:04:44,550 --> 00:04:48,690
dealing with mac OS then you can only

00:04:46,979 --> 00:04:50,010
really run five at the same time so

00:04:48,690 --> 00:04:51,300
that's something to consider but you've

00:04:50,010 --> 00:04:55,139
got the twenty basically in general

00:04:51,300 --> 00:04:58,410
especially for Linux jobs if you're

00:04:55,139 --> 00:05:00,570
paying you can get more but this is the

00:04:58,410 --> 00:05:01,919
sort of the starting scenario the

00:05:00,570 --> 00:05:05,370
runners that you have available to you

00:05:01,919 --> 00:05:09,570
our Windows Server 2019 three versions

00:05:05,370 --> 00:05:10,770
of Ubuntu the new 20.4 is basically a

00:05:09,570 --> 00:05:13,560
preview right now

00:05:10,770 --> 00:05:17,360
so if you ask for a bunch of latest

00:05:13,560 --> 00:05:19,970
you're gonna get 1804 and then Mac OS

00:05:17,360 --> 00:05:22,080
10.15 is what you get on the Mac's

00:05:19,970 --> 00:05:24,240
self-hosted is also an option but that's

00:05:22,080 --> 00:05:26,699
outside the scope of this talk but it's

00:05:24,240 --> 00:05:29,400
also something to consider if this fax

00:05:26,699 --> 00:05:37,590
or the abarnes here don't meet your

00:05:29,400 --> 00:05:41,490
needs now if you need Perl it only comes

00:05:37,590 --> 00:05:43,919
pre-installed on Windows sf5 30.2 so if

00:05:41,490 --> 00:05:45,570
you want to test something on a bunch of

00:05:43,919 --> 00:05:47,120
different versions of Perl on a bunch of

00:05:45,570 --> 00:05:49,440
different operating systems

00:05:47,120 --> 00:05:50,520
it's not really pre-configured for your

00:05:49,440 --> 00:05:52,229
needs so there are some things you need

00:05:50,520 --> 00:05:55,680
to do it that's what we're going to talk

00:05:52,229 --> 00:05:56,789
about today now we've defined what a

00:05:55,680 --> 00:05:57,930
workflow is but what does it actually

00:05:56,789 --> 00:06:00,150
look like we're going to start with a

00:05:57,930 --> 00:06:02,820
very simple example that runs on one

00:06:00,150 --> 00:06:04,530
single trigger now let's say we have

00:06:02,820 --> 00:06:06,660
some shell scripts and we want to run a

00:06:04,530 --> 00:06:09,360
linter on them so we'll just create a

00:06:06,660 --> 00:06:10,919
file in dock github slash workflow as

00:06:09,360 --> 00:06:12,180
we'll call it shell checked out you know

00:06:10,919 --> 00:06:16,770
if you can really call it whatever you

00:06:12,180 --> 00:06:19,949
want as far as the on goes this here

00:06:16,770 --> 00:06:22,229
dictates that this code will run when

00:06:19,949 --> 00:06:24,389
some gets pushed the repository we just

00:06:22,229 --> 00:06:26,270
need to give our workflow name I'll call

00:06:24,389 --> 00:06:30,150
in scripts in this case and now we can

00:06:26,270 --> 00:06:32,910
dictate a set of jobs to run and each

00:06:30,150 --> 00:06:34,740
job has an ID can be just some arbitrary

00:06:32,910 --> 00:06:35,699
name needs to be unique we'll just call

00:06:34,740 --> 00:06:39,120
it shell check job because that's

00:06:35,699 --> 00:06:41,400
descriptive you can give jobs names as

00:06:39,120 --> 00:06:42,270
well if you like and you need to say

00:06:41,400 --> 00:06:44,130
what is going to

00:06:42,270 --> 00:06:46,110
in this case we just want to say the

00:06:44,130 --> 00:06:50,880
latest version of Ubuntu which we

00:06:46,110 --> 00:06:52,620
decided was 1819 so now we can dictate

00:06:50,880 --> 00:06:54,120
the steps that are included in the

00:06:52,620 --> 00:06:56,430
workflow and this workflow is very

00:06:54,120 --> 00:06:59,640
simple and it just has two steps the

00:06:56,430 --> 00:07:01,650
first step is an action and it's the

00:06:59,640 --> 00:07:03,570
checkout action and what the checkout

00:07:01,650 --> 00:07:05,700
action does is basically it just checks

00:07:03,570 --> 00:07:07,650
out your repository into the working

00:07:05,700 --> 00:07:10,680
repository on the VM and that's all that

00:07:07,650 --> 00:07:11,850
it does it can do more and it's highly

00:07:10,680 --> 00:07:13,230
configurable so you might want to check

00:07:11,850 --> 00:07:14,460
that out but in this case when we're

00:07:13,230 --> 00:07:15,750
saying checkout at master that's

00:07:14,460 --> 00:07:17,880
actually saying which version of the

00:07:15,750 --> 00:07:19,650
checkout action to get not whatever your

00:07:17,880 --> 00:07:20,910
repositories it's just basically gonna

00:07:19,650 --> 00:07:23,130
be if you're in a branch you look at the

00:07:20,910 --> 00:07:25,410
latest commit on that branch put it into

00:07:23,130 --> 00:07:27,450
a working directory for you the second

00:07:25,410 --> 00:07:29,400
action that we want to run is just a

00:07:27,450 --> 00:07:32,850
tool in the bash cribs because that's

00:07:29,400 --> 00:07:34,440
what we're here for and for that we're

00:07:32,850 --> 00:07:37,710
gonna use this this particular action

00:07:34,440 --> 00:07:39,540
here and that really is it this action

00:07:37,710 --> 00:07:41,520
has configuration parameters as well but

00:07:39,540 --> 00:07:42,720
in this case it's just gonna look in a

00:07:41,520 --> 00:07:44,130
bin directory to see if we ask ourselves

00:07:42,720 --> 00:07:47,040
shell script Z

00:07:44,130 --> 00:07:51,420
it so happens that we do in this case so

00:07:47,040 --> 00:07:53,640
we're all set to go now what if we want

00:07:51,420 --> 00:07:55,590
to run this some more conditions we want

00:07:53,640 --> 00:07:58,860
to run it on push we can here also add

00:07:55,590 --> 00:08:01,680
to run on pull requests and we can

00:07:58,860 --> 00:08:03,840
schedule a cron so initially when we

00:08:01,680 --> 00:08:05,400
just set on push this is this is what it

00:08:03,840 --> 00:08:06,750
meant it meant pushing on each branch

00:08:05,400 --> 00:08:09,090
and you can see that you can now

00:08:06,750 --> 00:08:10,770
configure patterns for which branches

00:08:09,090 --> 00:08:12,420
you would want this to run on on a push

00:08:10,770 --> 00:08:15,060
condition you do the same thing for pull

00:08:12,420 --> 00:08:17,790
requests the Kuran scheduling is kind of

00:08:15,060 --> 00:08:19,890
nice you can do the same kind of thing

00:08:17,790 --> 00:08:20,940
with Travis through the UI I'm not sure

00:08:19,890 --> 00:08:23,490
if there's another way to configure but

00:08:20,940 --> 00:08:24,960
it's nice to have this here just in the

00:08:23,490 --> 00:08:27,960
configuration file itself and you'll see

00:08:24,960 --> 00:08:29,310
that we'll use it later on now our final

00:08:27,960 --> 00:08:32,430
file is going to look something like

00:08:29,310 --> 00:08:34,050
this that's just the way it is all put

00:08:32,430 --> 00:08:35,340
together this is an example that you

00:08:34,050 --> 00:08:37,410
could just copy and paste it run on your

00:08:35,340 --> 00:08:39,870
own I've already added a link to the

00:08:37,410 --> 00:08:41,280
slides in the talk so if you're looking

00:08:39,870 --> 00:08:42,420
for actual examples to get up and

00:08:41,280 --> 00:08:44,250
running with you can just grab those

00:08:42,420 --> 00:08:47,100
copy paste I'll have some links that you

00:08:44,250 --> 00:08:48,510
can follow as well two working workflows

00:08:47,100 --> 00:08:51,500
that I've got sort of in the world right

00:08:48,510 --> 00:08:51,500
now that you can test against

00:08:53,420 --> 00:08:57,540
so I've got this recurring cough I've

00:08:55,470 --> 00:08:58,889
had for a few months it's not it's not

00:08:57,540 --> 00:09:00,089
pandemic related but it's gonna

00:08:58,889 --> 00:09:02,279
interfere with this talk a little bit I

00:09:00,089 --> 00:09:04,889
apologize for that so the most useful

00:09:02,279 --> 00:09:06,269
check our action that another module you

00:09:04,889 --> 00:09:07,829
will probably use the most is just

00:09:06,269 --> 00:09:12,569
called checkout and we've already seen

00:09:07,829 --> 00:09:15,060
it seen it in use here and as I think I

00:09:12,569 --> 00:09:16,110
said you can add parameters to it so you

00:09:15,060 --> 00:09:17,459
don't have to just check out your

00:09:16,110 --> 00:09:19,439
repository you can check out somebody

00:09:17,459 --> 00:09:21,959
else's repository you can check out your

00:09:19,439 --> 00:09:23,759
repository side by side you could check

00:09:21,959 --> 00:09:25,439
out one repository nested inside if

00:09:23,759 --> 00:09:28,170
another one there's all sorts of options

00:09:25,439 --> 00:09:29,759
and you should check those out as well I

00:09:28,170 --> 00:09:31,170
think that if you are gonna use github

00:09:29,759 --> 00:09:32,490
you should get familiar with this

00:09:31,170 --> 00:09:34,949
because this is something you'll be

00:09:32,490 --> 00:09:37,430
using a lot now the way you invoke

00:09:34,949 --> 00:09:42,180
actions is helpful to know about to the

00:09:37,430 --> 00:09:44,699
actions are tagged and you're basically

00:09:42,180 --> 00:09:46,829
saying which tag or another thing you're

00:09:44,699 --> 00:09:49,259
interested in what version of the action

00:09:46,829 --> 00:09:51,050
so for example in this case you're

00:09:49,259 --> 00:09:53,579
saying let's get the checkout action

00:09:51,050 --> 00:09:54,750
whatever the latest version of tagging

00:09:53,579 --> 00:09:56,790
version one is I'd like that

00:09:54,750 --> 00:09:59,639
now if you want a specific tag you can

00:09:56,790 --> 00:10:02,040
ask for a patch release if you want a

00:09:59,639 --> 00:10:03,689
specific branch you can ask for master

00:10:02,040 --> 00:10:05,220
or whatever the branch name is if you

00:10:03,689 --> 00:10:07,410
like to live dangerously this is a way

00:10:05,220 --> 00:10:09,660
to go just keep in mind that things

00:10:07,410 --> 00:10:11,670
could break at any point I've been using

00:10:09,660 --> 00:10:14,220
master for the checkouts I think it's

00:10:11,670 --> 00:10:15,240
basically been fine but keep that in

00:10:14,220 --> 00:10:17,009
mind or you can just that use a

00:10:15,240 --> 00:10:20,220
particular saw as well if you're if

00:10:17,009 --> 00:10:21,990
you're really picky one thing also to

00:10:20,220 --> 00:10:23,579
keep on with the actions is this actions

00:10:21,990 --> 00:10:26,040
here this is actually the username and

00:10:23,579 --> 00:10:27,540
this is the name of the repository so it

00:10:26,040 --> 00:10:29,399
just so happens that there was a

00:10:27,540 --> 00:10:31,370
username the get a pass that's called

00:10:29,399 --> 00:10:33,870
actions and that's where the github

00:10:31,370 --> 00:10:35,660
keeps its actions you can publish your

00:10:33,870 --> 00:10:39,540
own actions at your own like you

00:10:35,660 --> 00:10:41,850
repository URLs there is a list of

00:10:39,540 --> 00:10:45,059
awesome actions it's quite a big list

00:10:41,850 --> 00:10:46,380
I'm not gonna vouch for how curated it

00:10:45,059 --> 00:10:48,959
is but it's a good starting point just

00:10:46,380 --> 00:10:50,279
to get an idea of what things are

00:10:48,959 --> 00:10:51,930
available for you to use so let's go

00:10:50,279 --> 00:10:53,519
back to our first example and this is

00:10:51,930 --> 00:10:55,230
we've just got the push condition here

00:10:53,519 --> 00:10:56,970
we don't have the other ones but what if

00:10:55,230 --> 00:10:58,920
we actually you know we get in the

00:10:56,970 --> 00:11:01,470
linting what if we want to test our bash

00:10:58,920 --> 00:11:03,209
scripts so there's bats that's a bash

00:11:01,470 --> 00:11:05,550
testing screen a framework and we could

00:11:03,209 --> 00:11:08,180
use that and we just need to add

00:11:05,550 --> 00:11:08,180
run scripts

00:11:09,460 --> 00:11:13,480
in order to be able to use bats so there

00:11:12,490 --> 00:11:14,710
are you know it's a bunch of different

00:11:13,480 --> 00:11:17,140
ways we can do this but this is a good

00:11:14,710 --> 00:11:19,600
way for us to examine how run script

00:11:17,140 --> 00:11:21,880
steps get used in the github workflows

00:11:19,600 --> 00:11:23,620
so we're just adding an additional step

00:11:21,880 --> 00:11:25,660
here we've given it a name and then

00:11:23,620 --> 00:11:27,850
we've just given it basically a command

00:11:25,660 --> 00:11:29,610
that it's going to run it's just we're

00:11:27,850 --> 00:11:32,380
just gonna try and install it using NPM

00:11:29,610 --> 00:11:35,370
now in order to do this this does make

00:11:32,380 --> 00:11:37,840
the assumption that NPM is available

00:11:35,370 --> 00:11:41,290
there are ways that you could recover

00:11:37,840 --> 00:11:43,090
from failure and that is by checking for

00:11:41,290 --> 00:11:45,250
the success or failure of the previous

00:11:43,090 --> 00:11:49,210
step and so in this case we can say if

00:11:45,250 --> 00:11:52,570
the previous step failed you know let's

00:11:49,210 --> 00:11:54,910
actually just try and grab a bat from

00:11:52,570 --> 00:11:57,100
its repository and run an installation

00:11:54,910 --> 00:11:59,110
that way and the conditions you can

00:11:57,100 --> 00:12:03,250
check for a success failure cancelled

00:11:59,110 --> 00:12:04,840
and always always is what it implies but

00:12:03,250 --> 00:12:07,420
those are sort of good things to keep in

00:12:04,840 --> 00:12:08,530
mind it's a little bit easier to work

00:12:07,420 --> 00:12:14,050
with this then that's some of the ways

00:12:08,530 --> 00:12:15,340
that you try to try and you know trap

00:12:14,050 --> 00:12:17,650
error conditions and things like that

00:12:15,340 --> 00:12:18,970
so now we've got all the stuff installed

00:12:17,650 --> 00:12:21,070
let's actually just run the test and

00:12:18,970 --> 00:12:22,360
then that's you know much like running

00:12:21,070 --> 00:12:25,840
at perl tests we just run this command

00:12:22,360 --> 00:12:27,400
the Dashti tells us that we want to emit

00:12:25,840 --> 00:12:29,500
some tap and then we can just run the

00:12:27,400 --> 00:12:32,710
test as part of our workflow now github

00:12:29,500 --> 00:12:34,990
doesn't have a concept of tap or really

00:12:32,710 --> 00:12:38,860
passing tests it's just looking for exit

00:12:34,990 --> 00:12:42,430
codes so as long as your tests return a

00:12:38,860 --> 00:12:44,920
zero exit code or then you should be

00:12:42,430 --> 00:12:46,750
fine so our entire config file now

00:12:44,920 --> 00:12:48,310
should look like this this is an example

00:12:46,750 --> 00:12:50,920
you should be able to copy/paste

00:12:48,310 --> 00:12:53,800
and run so it's not very big but it does

00:12:50,920 --> 00:12:56,020
a number of things now what if we

00:12:53,800 --> 00:12:58,030
actually want to ensure that MPM was

00:12:56,020 --> 00:12:59,710
available to us in environment one way

00:12:58,030 --> 00:13:03,940
we could do that is by using a docker

00:12:59,710 --> 00:13:05,530
image now you're probably thinking why

00:13:03,940 --> 00:13:06,790
wouldn't you just use it on garbage for

00:13:05,530 --> 00:13:08,410
bats why are you getting a daughter

00:13:06,790 --> 00:13:11,260
image for npm so that you can install

00:13:08,410 --> 00:13:12,850
bats and the answer to that is the last

00:13:11,260 --> 00:13:14,170
official docker image with bats was a

00:13:12,850 --> 00:13:15,310
couple years ago we want to have

00:13:14,170 --> 00:13:17,830
something more recent so I just do a

00:13:15,310 --> 00:13:20,020
search on docker hub and I find there is

00:13:17,830 --> 00:13:22,940
a node image here based on Buster slim

00:13:20,020 --> 00:13:26,000
and so just above the steps in the camp

00:13:22,940 --> 00:13:29,150
we'll just explicitly say which kind of

00:13:26,000 --> 00:13:31,730
container image we want and that's by

00:13:29,150 --> 00:13:36,500
default gonna check on topper docker hub

00:13:31,730 --> 00:13:39,110
and download this so now with these two

00:13:36,500 --> 00:13:41,180
extra lines here that's what our

00:13:39,110 --> 00:13:43,640
configuration looks like and in this

00:13:41,180 --> 00:13:45,380
case now we should be assured that NPM

00:13:43,640 --> 00:13:49,220
is available because we know that it's

00:13:45,380 --> 00:13:50,960
on it's in this container I mean or do

00:13:49,220 --> 00:13:52,430
we know we this is an assumption we make

00:13:50,960 --> 00:13:54,370
I think it's fairly safe assumption but

00:13:52,430 --> 00:13:57,910
what if we actually want to check that

00:13:54,370 --> 00:14:01,580
we can check it by running the workflow

00:13:57,910 --> 00:14:04,670
but we can also check it by just poke

00:14:01,580 --> 00:14:06,050
around in the docker container so one of

00:14:04,670 --> 00:14:07,910
the neat things about docker is that you

00:14:06,050 --> 00:14:11,180
can just spin up a container on command

00:14:07,910 --> 00:14:14,590
just by knowing the name of the image so

00:14:11,180 --> 00:14:17,570
in this case it would be docker run - IT

00:14:14,590 --> 00:14:20,330
right here this command right here we're

00:14:17,570 --> 00:14:22,010
giving it the name of the image and then

00:14:20,330 --> 00:14:23,720
we're also saying you know what when you

00:14:22,010 --> 00:14:25,640
spin up the container just just give me

00:14:23,720 --> 00:14:27,530
a batch problem that's what I want and

00:14:25,640 --> 00:14:29,210
it is helpful to specify that because

00:14:27,530 --> 00:14:30,410
it's not always a safe assumption to

00:14:29,210 --> 00:14:31,900
think that when you open up an image

00:14:30,410 --> 00:14:34,100
you're going to know that about wrong so

00:14:31,900 --> 00:14:36,830
we can check to see what the version of

00:14:34,100 --> 00:14:38,900
Bash is now that we're logged in and we

00:14:36,830 --> 00:14:40,220
can also just test out running MPM

00:14:38,900 --> 00:14:42,680
install and we can see that that is

00:14:40,220 --> 00:14:45,010
successful in this container so so we're

00:14:42,680 --> 00:14:45,010
all set

00:14:47,529 --> 00:14:53,899
and just a recap on the Doppler the

00:14:50,569 --> 00:14:56,509
docker run Flags the IT basically gives

00:14:53,899 --> 00:14:58,940
you an interactive terminal and the RM

00:14:56,509 --> 00:15:00,259
tells docker to clean up after itself so

00:14:58,940 --> 00:15:03,740
you don't have a lot of extra stuff

00:15:00,259 --> 00:15:05,480
hanging around on your filesystem so now

00:15:03,740 --> 00:15:07,610
if that was too tedious for you if you

00:15:05,480 --> 00:15:09,980
say a lot that seems like a lot of work

00:15:07,610 --> 00:15:12,800
I'm not interested in doing that can I

00:15:09,980 --> 00:15:15,319
just run the workflows locally I say yes

00:15:12,800 --> 00:15:16,879
actually you can with with a fairly long

00:15:15,319 --> 00:15:19,069
list of caveats but in this case you can

00:15:16,879 --> 00:15:21,439
so there's a project called act and you

00:15:19,069 --> 00:15:23,240
can install it run it inside the top

00:15:21,439 --> 00:15:27,139
level of your repository and it will run

00:15:23,240 --> 00:15:29,540
your workflows for you locally so it

00:15:27,139 --> 00:15:31,399
would look something like this

00:15:29,540 --> 00:15:35,300
you can see there's a fair amount about

00:15:31,399 --> 00:15:38,449
put lots of fancy emojis for you and on

00:15:35,300 --> 00:15:40,339
my laptop it took about four seconds now

00:15:38,449 --> 00:15:42,079
that is because this is a subsequent run

00:15:40,339 --> 00:15:43,910
I have all the documents that I needed

00:15:42,079 --> 00:15:46,750
but you can see that you can get a

00:15:43,910 --> 00:15:50,139
fairly short feedback loop on your

00:15:46,750 --> 00:15:53,449
workflows under the right conditions you

00:15:50,139 --> 00:15:56,329
can also use activated B visualizations

00:15:53,449 --> 00:15:59,720
of the jobs in your workflow this one

00:15:56,329 --> 00:16:01,329
fairly unimpressive but also accurate we

00:15:59,720 --> 00:16:05,269
just have the one job which is test job

00:16:01,329 --> 00:16:06,889
now what are the bad parts about act so

00:16:05,269 --> 00:16:08,209
artifacts aren't get supported now we

00:16:06,889 --> 00:16:10,310
haven't talked about artifacts yet but

00:16:08,209 --> 00:16:11,689
we will and so basically like a build

00:16:10,310 --> 00:16:13,790
artifact is something that's left over

00:16:11,689 --> 00:16:15,439
after you run your builds and maybe some

00:16:13,790 --> 00:16:16,699
new file that gets created it you may

00:16:15,439 --> 00:16:19,550
want to do something with it like save

00:16:16,699 --> 00:16:21,079
it and there's an action upload artifact

00:16:19,550 --> 00:16:24,110
that allows you to upload your artifacts

00:16:21,079 --> 00:16:25,819
to somewhere I don't know where but it

00:16:24,110 --> 00:16:26,959
doesn't actually work with act so if

00:16:25,819 --> 00:16:29,540
you're using that you may need to

00:16:26,959 --> 00:16:31,339
comment that out also if you have later

00:16:29,540 --> 00:16:34,339
logic that also wants to download these

00:16:31,339 --> 00:16:35,809
artifacts from we don't know where that

00:16:34,339 --> 00:16:37,939
you probably have to comment that out as

00:16:35,809 --> 00:16:39,559
well the check out action which we

00:16:37,939 --> 00:16:41,779
already talked about being so popular it

00:16:39,559 --> 00:16:43,550
doesn't accept any args under Act so if

00:16:41,779 --> 00:16:45,500
you are doing something other than just

00:16:43,550 --> 00:16:47,809
checking out your code you will have a

00:16:45,500 --> 00:16:49,670
problem there and so I've only got this

00:16:47,809 --> 00:16:51,680
working on the like the initial like a

00:16:49,670 --> 00:16:53,000
primary build step that's been good

00:16:51,680 --> 00:16:54,470
enough for my needs it's sort of helped

00:16:53,000 --> 00:16:56,300
me sort out a lot of things without

00:16:54,470 --> 00:16:58,160
having to go to wait for github to get

00:16:56,300 --> 00:17:00,800
back to me but

00:16:58,160 --> 00:17:02,449
it's definitely not perfect in it may

00:17:00,800 --> 00:17:04,039
not detect some brokenness in your

00:17:02,449 --> 00:17:05,829
workflow configs it doesn't do like

00:17:04,039 --> 00:17:08,720
maybe the validation that github does

00:17:05,829 --> 00:17:11,240
okay so you're saying a lot you've told

00:17:08,720 --> 00:17:13,579
me a lot about bash maybe I don't really

00:17:11,240 --> 00:17:16,539
care about that how about Perl so that

00:17:13,579 --> 00:17:16,539
Perl is what we're going to talk about

00:17:17,199 --> 00:17:21,679
now there are different images you can

00:17:19,459 --> 00:17:24,169
choose for Perl you can get the official

00:17:21,679 --> 00:17:26,630
Perl bills which are provided by docker

00:17:24,169 --> 00:17:28,400
and they're actually quite fast and

00:17:26,630 --> 00:17:30,309
staying up-to-date 5.32 has been

00:17:28,400 --> 00:17:32,539
available for I think a couple days now

00:17:30,309 --> 00:17:34,640
there are some slim builds which are

00:17:32,539 --> 00:17:36,470
smaller images but you might find that

00:17:34,640 --> 00:17:37,909
unless you have very basic needs those

00:17:36,470 --> 00:17:40,760
might not be enough for you you can

00:17:37,909 --> 00:17:42,049
definitely try them out but you may find

00:17:40,760 --> 00:17:44,299
yourself falling back to the official

00:17:42,049 --> 00:17:47,330
Perl builds now if you like a really big

00:17:44,299 --> 00:17:49,190
hammer then the Perl tester Perl doc

00:17:47,330 --> 00:17:50,870
room just may be for you and that's a

00:17:49,190 --> 00:17:52,669
project that Nico and I have been

00:17:50,870 --> 00:17:54,799
working on together now what this does

00:17:52,669 --> 00:17:58,309
is it comes pre-loaded with vasila a

00:17:54,799 --> 00:18:00,260
bunch of distil plugins Manila as well

00:17:58,309 --> 00:18:02,809
and a bunch of tests and development

00:18:00,260 --> 00:18:05,840
modules that you probably need anyway

00:18:02,809 --> 00:18:07,760
when you're building and testing Sipan

00:18:05,840 --> 00:18:10,010
and distributions so what you get here

00:18:07,760 --> 00:18:11,450
is you it saves you the download and

00:18:10,010 --> 00:18:14,059
install time you'd normally need to do

00:18:11,450 --> 00:18:15,530
this on demand we make the bills nightly

00:18:14,059 --> 00:18:17,179
so we talked about that Kuran

00:18:15,530 --> 00:18:19,610
configuration the workflow we have one

00:18:17,179 --> 00:18:21,590
in this case to build a stocker images

00:18:19,610 --> 00:18:23,330
every night and we have some helper

00:18:21,590 --> 00:18:24,710
shell scripts in there to reduce some of

00:18:23,330 --> 00:18:26,690
the build a test for the player if you

00:18:24,710 --> 00:18:30,289
don't have those the github workflows

00:18:26,690 --> 00:18:32,539
tend to be quite long so the bad parts

00:18:30,289 --> 00:18:36,020
are this it's not gonna help you on Mac

00:18:32,539 --> 00:18:37,370
OS and Windows because it is docker you

00:18:36,020 --> 00:18:38,570
might miss some undeclared dependencies

00:18:37,370 --> 00:18:40,220
if you're only testing on these images

00:18:38,570 --> 00:18:43,220
because there's already so much that's

00:18:40,220 --> 00:18:44,450
there and you may just assume that you

00:18:43,220 --> 00:18:46,669
don't need to declare it a pendency on

00:18:44,450 --> 00:18:49,159
something that might not actually be the

00:18:46,669 --> 00:18:51,919
case and also because we update the

00:18:49,159 --> 00:18:53,450
dependencies nightly you're going to be

00:18:51,919 --> 00:18:54,650
getting latest versions from CDN so you

00:18:53,450 --> 00:18:56,450
might not catch issues that come from

00:18:54,650 --> 00:18:57,740
older versions of modules but you may

00:18:56,450 --> 00:18:59,360
actually end up catching issues that

00:18:57,740 --> 00:19:00,590
come from newer versions so you might

00:18:59,360 --> 00:19:01,909
want to work around this especially if

00:19:00,590 --> 00:19:05,150
you have a regression test for a bug

00:19:01,909 --> 00:19:08,720
that's in some other older module now I

00:19:05,150 --> 00:19:10,250
did want to talk about speed one thing

00:19:08,720 --> 00:19:11,810
that sort of got me interested in this

00:19:10,250 --> 00:19:14,990
over Travis was that the

00:19:11,810 --> 00:19:18,140
this it it's just quite fast working

00:19:14,990 --> 00:19:21,500
with the github workflows but you can be

00:19:18,140 --> 00:19:22,970
even faster than the defaults one thing

00:19:21,500 --> 00:19:24,380
you can do is use these protests or

00:19:22,970 --> 00:19:27,290
images to do your building and testing

00:19:24,380 --> 00:19:28,910
with there is a caching action I haven't

00:19:27,290 --> 00:19:30,740
actually used it because with the

00:19:28,910 --> 00:19:32,410
protestor images I've actually found

00:19:30,740 --> 00:19:34,820
that's been fast enough for my needs

00:19:32,410 --> 00:19:36,800
there are sort of subtle bugs that can

00:19:34,820 --> 00:19:38,750
come up when you're using your own

00:19:36,800 --> 00:19:40,160
caches as well so that's something to be

00:19:38,750 --> 00:19:43,730
careful of but that's definitely

00:19:40,160 --> 00:19:46,130
available to you with boss when possible

00:19:43,730 --> 00:19:47,930
I would say install with CPM route the

00:19:46,130 --> 00:19:51,170
CPI M because CPM can install in

00:19:47,930 --> 00:19:52,220
parallel where a CP minus dozen so that

00:19:51,170 --> 00:19:53,870
can actually save you a lot of time

00:19:52,220 --> 00:19:56,690
especially you're installing a lot of

00:19:53,870 --> 00:19:58,760
dependencies if your code coverage is

00:19:56,690 --> 00:20:01,220
bringing you down you can run that in

00:19:58,760 --> 00:20:03,140
its own parallel job if you have a big

00:20:01,220 --> 00:20:05,570
test suite running demo cover on it can

00:20:03,140 --> 00:20:08,270
sometimes really increase the time of

00:20:05,570 --> 00:20:09,470
the job so you might want to just split

00:20:08,270 --> 00:20:10,940
that out to something else it because

00:20:09,470 --> 00:20:12,560
we're able to paralyze things it's

00:20:10,940 --> 00:20:14,540
you're not gonna take a big hit from

00:20:12,560 --> 00:20:19,910
that and then another thing is just to

00:20:14,540 --> 00:20:21,770
build once then test many times one

00:20:19,910 --> 00:20:22,970
other thing you can do is this kind of

00:20:21,770 --> 00:20:24,800
crazy thing that Nico does where he

00:20:22,970 --> 00:20:27,350
checks non access dependencies into his

00:20:24,800 --> 00:20:28,730
repo and then uses those he just told me

00:20:27,350 --> 00:20:29,810
about this morning I'm not even going to

00:20:28,730 --> 00:20:31,870
talk about it but I will leave it here

00:20:29,810 --> 00:20:34,070
if you want to damage that any further

00:20:31,870 --> 00:20:35,540
ok so now we talked about building once

00:20:34,070 --> 00:20:37,670
and testing many times as far as the

00:20:35,540 --> 00:20:40,670
initial build goes this is what a build

00:20:37,670 --> 00:20:41,870
configuration might look like so as far

00:20:40,670 --> 00:20:44,840
as the jobs go we just have we're gonna

00:20:41,870 --> 00:20:46,760
have a bill job and give the name we're

00:20:44,840 --> 00:20:49,010
gonna run on Ubuntu we're gonna use our

00:20:46,760 --> 00:20:50,480
Perl test or container we were going to

00:20:49,010 --> 00:20:52,070
use our checkout action like we talked

00:20:50,480 --> 00:20:53,840
about and then we're gonna run something

00:20:52,070 --> 00:20:55,640
called auto build a test dist and that

00:20:53,840 --> 00:20:59,090
is one of the helper scripts that comes

00:20:55,640 --> 00:21:00,650
with the image and it will basically do

00:20:59,090 --> 00:21:03,820
the right thing with your repository

00:21:00,650 --> 00:21:06,740
it's gonna get all the latest

00:21:03,820 --> 00:21:08,060
dependencies even if we have

00:21:06,740 --> 00:21:09,440
dependencies from a nightly build

00:21:08,060 --> 00:21:10,760
something might have been installed in

00:21:09,440 --> 00:21:13,130
the meantime so we'll get those if we

00:21:10,760 --> 00:21:15,590
need them and then you can just set some

00:21:13,130 --> 00:21:17,840
environment variables on a per step

00:21:15,590 --> 00:21:19,460
basis and in this case we're saying run

00:21:17,840 --> 00:21:23,900
the auto test from the release test and

00:21:19,460 --> 00:21:25,610
oh by the way I have a code Kyoto c'n

00:21:23,900 --> 00:21:27,290
that I have in my github

00:21:25,610 --> 00:21:30,170
posit or secrets I'd like you to use

00:21:27,290 --> 00:21:32,240
that into to run some code coverage so

00:21:30,170 --> 00:21:33,530
to set the secrets it's just in your

00:21:32,240 --> 00:21:35,240
repository and I think it's actually

00:21:33,530 --> 00:21:37,160
just settings and secret and you can go

00:21:35,240 --> 00:21:39,290
and add a secret a neat thing about the

00:21:37,160 --> 00:21:40,670
secrets are that github will jump

00:21:39,290 --> 00:21:43,520
through a bunch of Hoops to try and make

00:21:40,670 --> 00:21:45,830
sure that your secrets don't end up in

00:21:43,520 --> 00:21:48,049
any of the log output for anybody else

00:21:45,830 --> 00:21:50,360
to check because your build output is

00:21:48,049 --> 00:21:52,730
public you just you do need to be

00:21:50,360 --> 00:21:54,140
careful how you use your secrets but

00:21:52,730 --> 00:21:58,130
they will take steps to make sure that

00:21:54,140 --> 00:22:00,110
they don't get exposed and this helper

00:21:58,130 --> 00:22:01,370
script will if it detects the current

00:22:00,110 --> 00:22:02,870
token it'll do the right thing and then

00:22:01,370 --> 00:22:04,160
one that's once all this is done we're

00:22:02,870 --> 00:22:06,559
going to use a new action here and that

00:22:04,160 --> 00:22:08,990
is the upload artifact and so this says

00:22:06,559 --> 00:22:14,299
you just give it a path to a directory

00:22:08,990 --> 00:22:17,240
and then you it will upload that

00:22:14,299 --> 00:22:18,799
directory up again I don't know where

00:22:17,240 --> 00:22:20,780
somewhere in the cloud so we don't have

00:22:18,799 --> 00:22:22,940
to we don't care about that

00:22:20,780 --> 00:22:26,870
and then so to get to these helper

00:22:22,940 --> 00:22:28,280
scripts this is basically we're running

00:22:26,870 --> 00:22:30,679
here with the auto build and test is

00:22:28,280 --> 00:22:34,309
it's a little bit like the perl helpers

00:22:30,679 --> 00:22:35,540
on Travis where it kind of just it just

00:22:34,309 --> 00:22:38,510
does all the things that you normally

00:22:35,540 --> 00:22:40,490
would need to do it works fine for a

00:22:38,510 --> 00:22:42,980
distill ml vanilla distributions right

00:22:40,490 --> 00:22:45,230
now and then again if it detects a code

00:22:42,980 --> 00:22:47,780
kept open our coveralls token it will

00:22:45,230 --> 00:22:51,380
run a coverage build and it will upload

00:22:47,780 --> 00:22:54,140
to one or both of those services now we

00:22:51,380 --> 00:22:55,160
talked about coverage being slow so what

00:22:54,140 --> 00:22:56,840
if we just want to add a job

00:22:55,160 --> 00:22:58,730
specifically for coverage and we can do

00:22:56,840 --> 00:23:00,620
that's not a problem so this introduces

00:22:58,730 --> 00:23:03,440
a new keyword and that keyword is needs

00:23:00,620 --> 00:23:07,429
and if you say if you specified needs

00:23:03,440 --> 00:23:09,860
that basically says do not run this job

00:23:07,429 --> 00:23:11,809
unless the job that it needs has already

00:23:09,860 --> 00:23:13,669
successfully run to completion so that

00:23:11,809 --> 00:23:16,429
means if the build job fails this

00:23:13,669 --> 00:23:17,809
coverage job never runs we're going to

00:23:16,429 --> 00:23:20,240
run this on the perl tester image as

00:23:17,809 --> 00:23:22,990
well in this case we're gonna we're

00:23:20,240 --> 00:23:25,429
gonna check out these are downloads

00:23:22,990 --> 00:23:26,929
artifact action for the first time and

00:23:25,429 --> 00:23:28,549
we're just gonna give it the name that

00:23:26,929 --> 00:23:30,860
we gave to the upload artifact and then

00:23:28,549 --> 00:23:31,970
we're just going to say just the path is

00:23:30,860 --> 00:23:34,100
down so just put it into whatever

00:23:31,970 --> 00:23:36,740
working directory we have just just make

00:23:34,100 --> 00:23:38,290
that this directory and we are also

00:23:36,740 --> 00:23:39,620
using the checkout action in this case

00:23:38,290 --> 00:23:40,850
and only

00:23:39,620 --> 00:23:43,010
just because of some weirdness around

00:23:40,850 --> 00:23:44,210
Coco because it wants to detect that

00:23:43,010 --> 00:23:45,410
it's inside and keep repository

00:23:44,210 --> 00:23:48,140
otherwise you wouldn't need this at all

00:23:45,410 --> 00:23:49,490
and now we're going to install our

00:23:48,140 --> 00:23:50,960
dependencies and tests and we've got

00:23:49,490 --> 00:23:53,030
another helper script for that that's C

00:23:50,960 --> 00:23:54,530
pianist all dis steps we can pass some

00:23:53,030 --> 00:23:57,230
arguments like with develop that it'll

00:23:54,530 --> 00:23:59,809
pass on a CPM and then we're telling it

00:23:57,230 --> 00:24:01,430
to test the distribution we've added the

00:23:59,809 --> 00:24:03,410
code cup token to our environment so

00:24:01,430 --> 00:24:05,300
again it can auto detect that this is

00:24:03,410 --> 00:24:08,630
actually a coverage build and that's

00:24:05,300 --> 00:24:10,190
done so we've got the build we've got

00:24:08,630 --> 00:24:13,730
the coverage job and now we just want to

00:24:10,190 --> 00:24:16,460
test this many times now what's kind of

00:24:13,730 --> 00:24:17,600
neat about the workflows which you

00:24:16,460 --> 00:24:19,820
actually can do with traps as well is

00:24:17,600 --> 00:24:23,150
that you can have you can get a build

00:24:19,820 --> 00:24:25,880
matrix and the matrix belongs in this

00:24:23,150 --> 00:24:28,340
under the strategy keywords and and what

00:24:25,880 --> 00:24:32,179
this does is it constructs a matrix of

00:24:28,340 --> 00:24:33,860
different variations of variables that

00:24:32,179 --> 00:24:35,090
you hand to it so you can test a lot of

00:24:33,860 --> 00:24:37,100
things without being really in for both

00:24:35,090 --> 00:24:40,490
so in this case basically we're going to

00:24:37,100 --> 00:24:42,260
run through a bunt to latest Mac O's

00:24:40,490 --> 00:24:44,240
latest and Windows latest like all those

00:24:42,260 --> 00:24:47,900
different environments and for each of

00:24:44,240 --> 00:24:51,170
those we are going to run a job on a

00:24:47,900 --> 00:24:52,490
specific Perl version the pro version

00:24:51,170 --> 00:24:54,280
probably would be much longer than that

00:24:52,490 --> 00:24:58,040
but this is what fits into this slide

00:24:54,280 --> 00:24:59,480
yeah you can add additional items to the

00:24:58,040 --> 00:25:01,100
matrix by using an included keyword

00:24:59,480 --> 00:25:02,929
which you can do on Travis as well and

00:25:01,100 --> 00:25:05,240
you can also exclude here so in this

00:25:02,929 --> 00:25:08,179
case we're saying so just do all these

00:25:05,240 --> 00:25:11,480
things but if it's Windows don't do it

00:25:08,179 --> 00:25:12,740
on five ten and don't do it on 512m just

00:25:11,480 --> 00:25:14,480
for my testing those have been sort of

00:25:12,740 --> 00:25:16,790
problematic versions and I've been happy

00:25:14,480 --> 00:25:18,230
just not to worry about them and get on

00:25:16,790 --> 00:25:20,179
with my life so I just say like don't

00:25:18,230 --> 00:25:22,010
don't worry about that but this this

00:25:20,179 --> 00:25:23,630
gives us like a very nice concise way of

00:25:22,010 --> 00:25:26,059
testing a lot of things in a lot of

00:25:23,630 --> 00:25:27,800
places you will need to use the matrix

00:25:26,059 --> 00:25:30,679
variables here and you can use them in a

00:25:27,800 --> 00:25:32,780
name it's you won't get by without

00:25:30,679 --> 00:25:34,340
specifying matrix OS in that runs on

00:25:32,780 --> 00:25:37,309
because we do need to define what our

00:25:34,340 --> 00:25:39,830
environment is and this also gives us

00:25:37,309 --> 00:25:41,540
one more key word which is fail fast and

00:25:39,830 --> 00:25:43,100
fail fast basically means like that if

00:25:41,540 --> 00:25:45,200
you're inside a build and a job fails

00:25:43,100 --> 00:25:47,270
that that's done just return forget

00:25:45,200 --> 00:25:49,100
about it that is the default but I

00:25:47,270 --> 00:25:51,950
wanted to put it here explicitly because

00:25:49,100 --> 00:25:53,480
it is useful sometimes like let's say if

00:25:51,950 --> 00:25:55,190
you're testing stuff on Windows

00:25:53,480 --> 00:25:56,990
you might actually want fail-fast to be

00:25:55,190 --> 00:25:58,850
false because then you can see the test

00:25:56,990 --> 00:26:00,140
run for every single pearl build on my

00:25:58,850 --> 00:26:01,790
notes and you can see oh it's maybe just

00:26:00,140 --> 00:26:07,390
some of them better feeling not just all

00:26:01,790 --> 00:26:10,669
of them now now that we've got to our

00:26:07,390 --> 00:26:12,110
our job basically set up we've got a

00:26:10,669 --> 00:26:13,850
scaffold on the operating system

00:26:12,110 --> 00:26:15,740
approach that we want now we actually

00:26:13,850 --> 00:26:19,070
need to figure out which steps to be run

00:26:15,740 --> 00:26:20,630
and this brings in a very helpful action

00:26:19,070 --> 00:26:23,480
here called setup row which does

00:26:20,630 --> 00:26:25,700
strangely pretty much what you think it

00:26:23,480 --> 00:26:26,929
does and so you just tell it a pro

00:26:25,700 --> 00:26:29,600
version which we've got from the matrix

00:26:26,929 --> 00:26:31,669
and it will go and set up that pearl

00:26:29,600 --> 00:26:34,660
correctly for the operating system that

00:26:31,669 --> 00:26:37,669
you're on you can pass it a distribution

00:26:34,660 --> 00:26:39,260
value as well this will be ignored on

00:26:37,669 --> 00:26:41,990
every operating system except for

00:26:39,260 --> 00:26:43,340
Windows I would highly recommend just

00:26:41,990 --> 00:26:45,110
using strawberry because that's been

00:26:43,340 --> 00:26:48,080
sort of less problematic for me and my

00:26:45,110 --> 00:26:50,270
Windows testing you can see here we're

00:26:48,080 --> 00:26:52,780
also going to download a bill artifact

00:26:50,270 --> 00:26:56,450
and now we're going to install our

00:26:52,780 --> 00:26:57,890
dependencies with CPM now we can't

00:26:56,450 --> 00:27:01,309
really use those helper scripts here

00:26:57,890 --> 00:27:02,660
because they're not already

00:27:01,309 --> 00:27:06,350
pre-installed here and we're also

00:27:02,660 --> 00:27:08,150
running on Windows as well so Nico has

00:27:06,350 --> 00:27:10,460
put together this very handy perl action

00:27:08,150 --> 00:27:12,049
that says install with CPM you can give

00:27:10,460 --> 00:27:13,190
it a bunch of arguments this is also

00:27:12,049 --> 00:27:15,790
highly configurable so I'd suggest

00:27:13,190 --> 00:27:18,350
checking the docs on that but it will

00:27:15,790 --> 00:27:20,150
you don't even need to have CPM

00:27:18,350 --> 00:27:22,100
pre-installed so you you can use this

00:27:20,150 --> 00:27:24,559
wherever you want and it will just do

00:27:22,100 --> 00:27:27,080
the right thing and if you don't want

00:27:24,559 --> 00:27:31,340
you CPM he's got a very similarly named

00:27:27,080 --> 00:27:32,540
action that uses CPM and then the last

00:27:31,340 --> 00:27:35,059
thing we're gonna do is just run the

00:27:32,540 --> 00:27:37,130
tests and sets the bar variables for

00:27:35,059 --> 00:27:38,570
those tests the entire config file that

00:27:37,130 --> 00:27:40,730
was actually too big for me to show you

00:27:38,570 --> 00:27:43,340
on a slide so there's just a link there

00:27:40,730 --> 00:27:46,070
for one that is actually working in the

00:27:43,340 --> 00:27:50,240
wild and you can grab from that now if

00:27:46,070 --> 00:27:51,590
we visualize this build hierarchy we now

00:27:50,240 --> 00:27:52,850
see this is actually slightly more

00:27:51,590 --> 00:27:54,919
interesting because we can see there's

00:27:52,850 --> 00:27:56,870
no coverage job and a bunch of matrix

00:27:54,919 --> 00:28:00,530
jobs and those all depend on X this is a

00:27:56,870 --> 00:28:02,030
successful build distribution now what

00:28:00,530 --> 00:28:04,070
if we actually just want to test Linux

00:28:02,030 --> 00:28:05,480
first well then we could do that we

00:28:04,070 --> 00:28:07,220
would just break out Linux from the

00:28:05,480 --> 00:28:10,460
matrix that we created

00:28:07,220 --> 00:28:12,500
earlier in its it still needs to build a

00:28:10,460 --> 00:28:15,740
job but we will just change the matrix

00:28:12,500 --> 00:28:17,799
to need the Linux job and then this

00:28:15,740 --> 00:28:20,000
would sort of be the visualization so

00:28:17,799 --> 00:28:22,460
run the build will do the coverage and

00:28:20,000 --> 00:28:23,750
Linux if everything's good on Linux then

00:28:22,460 --> 00:28:26,750
we'll move to the Windows and Mac

00:28:23,750 --> 00:28:28,340
machines and one reason to do that would

00:28:26,750 --> 00:28:29,990
be you can use the protest or even just

00:28:28,340 --> 00:28:32,480
there but also if give up at some point

00:28:29,990 --> 00:28:34,250
becomes start using a credit system it

00:28:32,480 --> 00:28:35,840
might actually be cheaper to run it

00:28:34,250 --> 00:28:37,940
might require less credits to run on

00:28:35,840 --> 00:28:41,120
Linux it on the other system so being

00:28:37,940 --> 00:28:42,500
less resource-intensive so that might

00:28:41,120 --> 00:28:45,919
just be a strategy you want to employ

00:28:42,500 --> 00:28:48,140
now if you're looking for a docker image

00:28:45,919 --> 00:28:50,360
and it doesn't exist you can just build

00:28:48,140 --> 00:28:52,700
your own and let's very quickly talk

00:28:50,360 --> 00:28:55,490
about that now this is a example you can

00:28:52,700 --> 00:28:56,750
just grab from the docker images that

00:28:55,490 --> 00:28:58,820
we've been talking about and basically

00:28:56,750 --> 00:29:00,820
all the stuff is familiar to you these

00:28:58,820 --> 00:29:04,880
are just the the trigger conditions

00:29:00,820 --> 00:29:06,650
we've got a matrix here and then the new

00:29:04,880 --> 00:29:07,970
part here is this particular action here

00:29:06,650 --> 00:29:11,330
and this is just a public to get up

00:29:07,970 --> 00:29:14,059
publish to github action you need some

00:29:11,330 --> 00:29:17,690
secrets for credentials you need to have

00:29:14,059 --> 00:29:19,669
a docker file and then based on that it

00:29:17,690 --> 00:29:21,380
will just run your docker file and and

00:29:19,669 --> 00:29:23,539
do the right thing the neat thing here

00:29:21,380 --> 00:29:26,059
is that docker files do take build

00:29:23,539 --> 00:29:27,890
arguments so in this case we're just

00:29:26,059 --> 00:29:29,570
passing in an argument to see which

00:29:27,890 --> 00:29:31,370
version of Perl to create a new image

00:29:29,570 --> 00:29:33,380
based on and so that allows us to use

00:29:31,370 --> 00:29:38,150
one docker file and create many many

00:29:33,380 --> 00:29:40,730
perl images every evening so one other

00:29:38,150 --> 00:29:42,530
thing you could do is spin up a docker

00:29:40,730 --> 00:29:44,419
container as a service as part of your

00:29:42,530 --> 00:29:45,950
test suite so I was working on a project

00:29:44,419 --> 00:29:48,559
where I was using the poster but it was

00:29:45,950 --> 00:29:50,240
quite slow it's faster if you set it up

00:29:48,559 --> 00:29:52,880
so it wasn't micro service so as a build

00:29:50,240 --> 00:29:54,679
step here I set it up with docker do a

00:29:52,880 --> 00:29:56,390
few other things and then come back and

00:29:54,679 --> 00:29:57,770
hopefully that service is ready and

00:29:56,390 --> 00:30:00,289
responsive at that point and then I can

00:29:57,770 --> 00:30:02,480
start using it so that's just kind of

00:30:00,289 --> 00:30:04,820
one other neat thing you can do you can

00:30:02,480 --> 00:30:08,720
maybe even upload a Sipan file snapshot

00:30:04,820 --> 00:30:09,830
to a build artifact one thing this is

00:30:08,720 --> 00:30:11,690
the last thing I'm going to cover is

00:30:09,830 --> 00:30:13,340
this kind of neat is that you can use it

00:30:11,690 --> 00:30:15,440
to manage the the labels in your

00:30:13,340 --> 00:30:17,330
repository so there's an action here

00:30:15,440 --> 00:30:19,520
that says all you need to do is create a

00:30:17,330 --> 00:30:20,930
yamo file that has label names and

00:30:19,520 --> 00:30:22,640
colors

00:30:20,930 --> 00:30:25,130
you can use an exporter to create that

00:30:22,640 --> 00:30:29,540
then you just use this action here and

00:30:25,130 --> 00:30:31,610
it will sync up your labels and what

00:30:29,540 --> 00:30:35,150
this is actually a good demonstration of

00:30:31,610 --> 00:30:38,780
like a more complex trigger condition so

00:30:35,150 --> 00:30:41,060
basically here it's only on pushes to

00:30:38,780 --> 00:30:44,150
master and it's only if this particular

00:30:41,060 --> 00:30:45,920
file is in diff and so which actually

00:30:44,150 --> 00:30:47,330
makes sense because there would be no

00:30:45,920 --> 00:30:49,430
point in syncing your labels

00:30:47,330 --> 00:30:51,380
every time you just push some random

00:30:49,430 --> 00:30:52,730
stuff to github so you could really kind

00:30:51,380 --> 00:30:54,920
of narrow down when these things happen

00:30:52,730 --> 00:30:57,410
so having said all of that before it

00:30:54,920 --> 00:30:59,930
passed off to mark Dave rolls he is

00:30:57,410 --> 00:31:01,580
doing a talk on Azure tomorrow so I

00:30:59,930 --> 00:31:05,210
highly recommend you see that you may

00:31:01,580 --> 00:31:05,780
you may just think what I've told you is

00:31:05,210 --> 00:31:07,580
not helpful

00:31:05,780 --> 00:31:10,250
what do you Dave's got something for you

00:31:07,580 --> 00:31:12,020
so just check that out I mean they truly

00:31:10,250 --> 00:31:13,370
do close slightly different things but I

00:31:12,020 --> 00:31:16,630
think it's good to be important about

00:31:13,370 --> 00:31:18,590
that and also there is a distinction

00:31:16,630 --> 00:31:20,810
available on github as well that will

00:31:18,590 --> 00:31:22,640
let you just just run diese without

00:31:20,810 --> 00:31:24,830
having installed that as well and with

00:31:22,640 --> 00:31:27,260
that thanks to the organizers to the

00:31:24,830 --> 00:31:29,990
sponsors de Nico for working with me and

00:31:27,260 --> 00:31:33,460
to mark for co-presenting I will now

00:31:29,990 --> 00:31:33,460
stop sharing and hand it over to him

00:31:34,690 --> 00:31:45,620
hello everyone okay that's its share

00:31:37,549 --> 00:31:49,789
screen to do and okay I mean this okay

00:31:45,620 --> 00:31:51,559
everyone yes okay so hi thanks my

00:31:49,789 --> 00:31:54,409
introduction I've said I'm mark Fowler

00:31:51,559 --> 00:31:56,330
I'm a programmer that's been doing

00:31:54,409 --> 00:31:58,789
conferences for about 20 years getting

00:31:56,330 --> 00:32:00,200
exciting the really cool things that

00:31:58,789 --> 00:32:01,640
everyone's doing and one of the things I

00:32:00,200 --> 00:32:03,830
was really excited about was to see

00:32:01,640 --> 00:32:05,690
these cold tested images that Olaf was

00:32:03,830 --> 00:32:07,520
showing because I recently started

00:32:05,690 --> 00:32:09,320
working for circle CI and I realized

00:32:07,520 --> 00:32:11,960
that we can use them to make building

00:32:09,320 --> 00:32:13,159
with Perl really easy um so let's talk

00:32:11,960 --> 00:32:14,840
about something really important let's

00:32:13,159 --> 00:32:18,230
talk about how I can program Perl with

00:32:14,840 --> 00:32:20,120
my little pro need character names and

00:32:18,230 --> 00:32:22,460
that's so important that I'm going to

00:32:20,120 --> 00:32:24,230
upload it to github so the entire world

00:32:22,460 --> 00:32:25,340
can share and of course you know it's

00:32:24,230 --> 00:32:26,450
really important so it needs to be

00:32:25,340 --> 00:32:28,460
tested so I'm going to show you how to

00:32:26,450 --> 00:32:31,010
test that with circle CI so this is a

00:32:28,460 --> 00:32:32,690
circle CI homepage and we go a week from

00:32:31,010 --> 00:32:34,220
here we can go and click on sign up and

00:32:32,690 --> 00:32:35,600
we start the signup process but the

00:32:34,220 --> 00:32:37,970
signup process isn't the kind of thing

00:32:35,600 --> 00:32:39,409
where I go in crazy username and a

00:32:37,970 --> 00:32:41,179
password is a memorable phrase and

00:32:39,409 --> 00:32:43,549
everything like that no no I just go

00:32:41,179 --> 00:32:46,190
over to github click and authorize it

00:32:43,549 --> 00:32:48,559
with github and I'm immediately bounced

00:32:46,190 --> 00:32:50,090
back to circle CI having essentially

00:32:48,559 --> 00:32:51,620
signed up for this and now I can pick

00:32:50,090 --> 00:32:53,360
the organization now if you're like me

00:32:51,620 --> 00:32:54,919
you have your own organization you work

00:32:53,360 --> 00:32:56,870
organizational you open source

00:32:54,919 --> 00:32:59,330
organizations but this test user only

00:32:56,870 --> 00:33:01,070
has one organization so let's click on

00:32:59,330 --> 00:33:03,470
it and we get the list of all of the

00:33:01,070 --> 00:33:05,210
repos or in this case just the one and

00:33:03,470 --> 00:33:07,669
we can just go and set at the project

00:33:05,210 --> 00:33:09,559
and here we are we're now at the final

00:33:07,669 --> 00:33:10,130
step of setting up the project it was

00:33:09,559 --> 00:33:12,169
that simple

00:33:10,130 --> 00:33:14,450
we've just got to define the yanil farm

00:33:12,169 --> 00:33:17,929
which as you've seen before this is a

00:33:14,450 --> 00:33:19,940
common thing with CI systems circles see

00:33:17,929 --> 00:33:21,260
I make this is simple though now first

00:33:19,940 --> 00:33:22,909
of all it doesn't require you to go off

00:33:21,260 --> 00:33:25,490
and open up your head etre and commit

00:33:22,909 --> 00:33:26,630
things and get out of it you can do it

00:33:25,490 --> 00:33:27,890
straight in the web browser and if

00:33:26,630 --> 00:33:29,270
you've got one of the supported

00:33:27,890 --> 00:33:30,070
languages you can just go and pick it

00:33:29,270 --> 00:33:32,029
from the list

00:33:30,070 --> 00:33:33,529
unfortunately Perl isn't on this list

00:33:32,029 --> 00:33:34,700
but it probably will be in a couple of

00:33:33,529 --> 00:33:37,820
weeks now that I've got all of these

00:33:34,700 --> 00:33:39,799
cool tools to play with so let's just go

00:33:37,820 --> 00:33:42,230
and delete all of this and copy and

00:33:39,799 --> 00:33:43,580
paste in the seven lines of llaman we

00:33:42,230 --> 00:33:45,440
need to build that's it just the seven

00:33:43,580 --> 00:33:47,299
times and now we can just go and click

00:33:45,440 --> 00:33:48,710
add config

00:33:47,299 --> 00:33:50,210
yeah it's running and we're done and

00:33:48,710 --> 00:33:51,739
we're already building that's all we

00:33:50,210 --> 00:33:54,499
needed to do and of course it's will

00:33:51,739 --> 00:33:56,869
succeed and I don't know it's failed yes

00:33:54,499 --> 00:33:57,860
of course it's failed so in my demo I

00:33:56,869 --> 00:34:00,080
thought I'd show you what happens when

00:33:57,860 --> 00:34:02,389
it goes wrong so we can go and click on

00:34:00,080 --> 00:34:03,980
the big red button and then we can see

00:34:02,389 --> 00:34:05,570
the jobs we've been running in this case

00:34:03,980 --> 00:34:07,220
we've got one job that's failed and we

00:34:05,570 --> 00:34:08,359
can see all the steps so we sped up the

00:34:07,220 --> 00:34:09,710
environment we prepared the very

00:34:08,359 --> 00:34:12,200
environment variables we checked out the

00:34:09,710 --> 00:34:13,700
code and we got an error message in our

00:34:12,200 --> 00:34:15,530
test distribution so if I scroll down

00:34:13,700 --> 00:34:18,679
you can see that I have forgotten to put

00:34:15,530 --> 00:34:21,859
the abstract in so my source code is is

00:34:18,679 --> 00:34:23,569
desire-based so what we're doing is were

00:34:21,859 --> 00:34:24,799
building a distribution then we're

00:34:23,569 --> 00:34:26,720
testing it and one of the things that

00:34:24,799 --> 00:34:29,149
can't do to build the distribution is it

00:34:26,720 --> 00:34:31,490
needs that abstract so let's go over to

00:34:29,149 --> 00:34:34,190
github and the new shiny interface which

00:34:31,490 --> 00:34:38,599
they added like yesterday and add in

00:34:34,190 --> 00:34:40,579
abstract here commit it and go back to

00:34:38,599 --> 00:34:42,679
circle CI and because we committed it we

00:34:40,579 --> 00:34:44,419
pushed something new that build was

00:34:42,679 --> 00:34:48,470
automatically triggered and in this case

00:34:44,419 --> 00:34:50,419
it was successful huh okay what if it

00:34:48,470 --> 00:34:52,129
wasn't a tease if I'd put didn't tell us

00:34:50,419 --> 00:34:53,629
what to immediately go fix well we'd

00:34:52,129 --> 00:34:54,859
probably have to add more debugging

00:34:53,629 --> 00:34:56,540
wouldn't we and then build something

00:34:54,859 --> 00:34:57,920
else and then realized we hadn't good

00:34:56,540 --> 00:35:00,619
enough debugging I have more debugging

00:34:57,920 --> 00:35:02,089
necessity just this what can we do if we

00:35:00,619 --> 00:35:04,309
can't tell it's broken for lots well we

00:35:02,089 --> 00:35:05,900
could just log into the CI box and poke

00:35:04,309 --> 00:35:08,000
around yep you can do that with circle

00:35:05,900 --> 00:35:09,980
CI so you could just go over to the

00:35:08,000 --> 00:35:11,839
failed job and rerun it and this time

00:35:09,980 --> 00:35:14,450
we're going to rerun the job with SSH

00:35:11,839 --> 00:35:17,630
and in this case I can go down to the

00:35:14,450 --> 00:35:20,270
new SS agent action and step here

00:35:17,630 --> 00:35:22,369
disclose it and I've got command I can

00:35:20,270 --> 00:35:25,579
copy and paste and just type directly

00:35:22,369 --> 00:35:28,099
into my terminal and that will go off

00:35:25,579 --> 00:35:29,780
and connect to the machine that is

00:35:28,099 --> 00:35:31,250
running the build and machine will wait

00:35:29,780 --> 00:35:33,559
for us so there's copy and paste go in

00:35:31,250 --> 00:35:35,359
that log straight in yes and what's go

00:35:33,559 --> 00:35:36,890
in and now I can start poking around I

00:35:35,359 --> 00:35:40,010
can go into my working directory and

00:35:36,890 --> 00:35:43,250
look around I can type less and to list

00:35:40,010 --> 00:35:44,809
the files in there well maybe if I typed

00:35:43,250 --> 00:35:46,160
less and try and listing the files and

00:35:44,809 --> 00:35:47,480
there get an error message because less

00:35:46,160 --> 00:35:49,040
isn't on that image but I can out

00:35:47,480 --> 00:35:50,119
getting install less because you know

00:35:49,040 --> 00:35:52,490
we've got really fast internet

00:35:50,119 --> 00:35:55,010
connection here and then I can even do

00:35:52,490 --> 00:35:57,859
things like I don't know run the failed

00:35:55,010 --> 00:35:59,900
I can list the trials yes but remember I

00:35:57,859 --> 00:36:00,800
could did that and then I can go in and

00:35:59,900 --> 00:36:03,170
I can

00:36:00,800 --> 00:36:08,180
actually running the test that didn't

00:36:03,170 --> 00:36:09,830
work wait like so so that didn't even

00:36:08,180 --> 00:36:12,320
require a username and password well

00:36:09,830 --> 00:36:14,030
that's a but it's secure it's because

00:36:12,320 --> 00:36:16,190
you already gave github a public key

00:36:14,030 --> 00:36:17,960
that you use to push up your code and

00:36:16,190 --> 00:36:19,790
your commits with and we use the same

00:36:17,960 --> 00:36:20,450
public key to detect with you allowed to

00:36:19,790 --> 00:36:23,330
login or not

00:36:20,450 --> 00:36:25,810
awesome so to recap we just set up an

00:36:23,330 --> 00:36:28,490
entirely new box that's highly new

00:36:25,810 --> 00:36:30,380
project on circle CI without entering a

00:36:28,490 --> 00:36:31,520
username or password or doing anything

00:36:30,380 --> 00:36:33,680
other than all clicking a few buttons

00:36:31,520 --> 00:36:35,630
and cutting pasting seven lines and

00:36:33,680 --> 00:36:37,490
we're even able to log into it when it

00:36:35,630 --> 00:36:37,970
goes wrong with SSH and work out what's

00:36:37,490 --> 00:36:39,800
going on

00:36:37,970 --> 00:36:42,350
that's pretty awesome but why not get

00:36:39,800 --> 00:36:43,850
more advanced because well I'm gonna

00:36:42,350 --> 00:36:45,860
have to do a little bit of service CI

00:36:43,850 --> 00:36:47,570
terminology real quick so we've got

00:36:45,860 --> 00:36:49,670
steps steps of the individual things

00:36:47,570 --> 00:36:51,380
that we were we were seeing these in

00:36:49,670 --> 00:36:53,090
previously with what Olaf was talking

00:36:51,380 --> 00:36:55,640
about there that run an individual shell

00:36:53,090 --> 00:36:57,590
command or run upload an artifact or say

00:36:55,640 --> 00:36:59,900
so stores to their cache and it's kind

00:36:57,590 --> 00:37:02,330
of like music so as the the notes and

00:36:59,900 --> 00:37:04,310
the music and they are played by someone

00:37:02,330 --> 00:37:06,050
in this case they're played by a job at

00:37:04,310 --> 00:37:08,420
collection of steps that runs on its own

00:37:06,050 --> 00:37:10,760
virtual machine and each job you have

00:37:08,420 --> 00:37:13,070
has its own virtual machine which is set

00:37:10,760 --> 00:37:14,360
up from scratch and and but these can

00:37:13,070 --> 00:37:15,920
work together they're controlled by a

00:37:14,360 --> 00:37:17,450
workflow that if it'll work for has a

00:37:15,920 --> 00:37:19,370
slightly different meaning to what Olaf

00:37:17,450 --> 00:37:22,460
was talking about earlier which is the

00:37:19,370 --> 00:37:24,470
order that in control of how the jobs

00:37:22,460 --> 00:37:26,780
are passed together in a pipeline which

00:37:24,470 --> 00:37:29,840
is kind of like a performance where you

00:37:26,780 --> 00:37:32,420
you is actual run of all of your jobs

00:37:29,840 --> 00:37:35,990
now that was a bit of terminology

00:37:32,420 --> 00:37:37,460
another funny College is or or was kind

00:37:35,990 --> 00:37:39,380
of like a module for these yeah more

00:37:37,460 --> 00:37:42,290
files and it's what enables us to have

00:37:39,380 --> 00:37:45,260
this very very short piece of text so

00:37:42,290 --> 00:37:46,730
here we were with defining what all were

00:37:45,260 --> 00:37:48,680
using we're going to use the circle CI

00:37:46,730 --> 00:37:50,540
per log and we're going to give her the

00:37:48,680 --> 00:37:52,190
PO namespace and then down in that job

00:37:50,540 --> 00:37:54,470
from our perl namespace we're going to

00:37:52,190 --> 00:37:55,700
run the build job and that is pretty

00:37:54,470 --> 00:37:57,410
much all it in fact there's a whole

00:37:55,700 --> 00:38:00,800
registry of these things which is kind

00:37:57,410 --> 00:38:04,490
of like the c-pen right so we've got a

00:38:00,800 --> 00:38:05,810
circle CI i RC which notifies to IRC B

00:38:04,490 --> 00:38:08,570
or we can do the same thing with slack

00:38:05,810 --> 00:38:10,160
or we can upload things to AWS or we can

00:38:08,570 --> 00:38:12,560
mess around with doc or are we gonna

00:38:10,160 --> 00:38:14,510
deploy to Heroku or we can use lots of

00:38:12,560 --> 00:38:17,359
third-party things like

00:38:14,510 --> 00:38:18,740
logging - honeycomb or using white

00:38:17,359 --> 00:38:21,440
source to check for vulnerabilities

00:38:18,740 --> 00:38:24,650
message there are loads of these things

00:38:21,440 --> 00:38:26,630
and they are configurable so let's just

00:38:24,650 --> 00:38:28,550
look at a spur one in this case we're

00:38:26,630 --> 00:38:30,920
just using the building so let's go look

00:38:28,550 --> 00:38:33,560
at the build job right and that has

00:38:30,920 --> 00:38:35,330
options in it like an apron code curve

00:38:33,560 --> 00:38:37,010
so underneath the skin underneath the

00:38:35,330 --> 00:38:39,740
hood this is using exactly the same kind

00:38:37,010 --> 00:38:41,150
of protesters convenience scripts olaf

00:38:39,740 --> 00:38:43,250
was talking about in this case when they

00:38:41,150 --> 00:38:44,990
blink code cough so we go and we have

00:38:43,250 --> 00:38:48,859
the extra parameter turn it on and set

00:38:44,990 --> 00:38:50,480
it to true and now look we've got code

00:38:48,859 --> 00:38:52,640
coverage in our logs and we've got the

00:38:50,480 --> 00:38:54,619
link to where this was uploaded and we

00:38:52,640 --> 00:38:56,060
can see it okay this being circles the

00:38:54,619 --> 00:38:57,530
ice a little easier to configure like

00:38:56,060 --> 00:39:00,730
you don't need to pass a token because

00:38:57,530 --> 00:39:04,190
code can use the circle see a CPI a

00:39:00,730 --> 00:39:07,000
circle CI API to go and work out exactly

00:39:04,190 --> 00:39:10,190
what's going on for you anyway

00:39:07,000 --> 00:39:12,230
what else can we put in here well we

00:39:10,190 --> 00:39:14,690
could upload artifacts I guess so we can

00:39:12,230 --> 00:39:16,010
save artifacts yet and this adds two new

00:39:14,690 --> 00:39:17,990
steps we're going to make a tarball

00:39:16,010 --> 00:39:19,850
but i upload the artifacts and then if

00:39:17,990 --> 00:39:21,410
we can looking at artifacts tab oh look

00:39:19,850 --> 00:39:24,170
we can see them let there here we can

00:39:21,410 --> 00:39:25,550
download artifacts or what does a whole

00:39:24,170 --> 00:39:28,670
bunch of them will call what could we do

00:39:25,550 --> 00:39:31,310
we could say - workspace oh wait what's

00:39:28,670 --> 00:39:33,770
workspace let's talk about caching so

00:39:31,310 --> 00:39:35,150
the Statler are silver CI supports

00:39:33,770 --> 00:39:36,530
multiple forms of caching one kind of

00:39:35,150 --> 00:39:39,260
caching is the standing catchment so you

00:39:36,530 --> 00:39:40,970
run a job you know a job you run a job

00:39:39,260 --> 00:39:41,960
when they take forever because they they

00:39:40,970 --> 00:39:43,369
have to start from scratch each time

00:39:41,960 --> 00:39:44,900
sometimes you might want to take the

00:39:43,369 --> 00:39:47,000
output for one job and feed it into the

00:39:44,900 --> 00:39:48,500
other job so it avoids having to redo

00:39:47,000 --> 00:39:50,750
the same thing again and again and that

00:39:48,500 --> 00:39:53,210
standard cache the other thing the

00:39:50,750 --> 00:39:55,220
service of CI the supports is workspaces

00:39:53,210 --> 00:39:56,630
where it's a place where different jobs

00:39:55,220 --> 00:39:59,060
can put things in a shared workspace

00:39:56,630 --> 00:40:00,980
just for that pipeline so that they can

00:39:59,060 --> 00:40:03,740
communicate to one another and if you

00:40:00,980 --> 00:40:07,160
add another pipeline you run it again

00:40:03,740 --> 00:40:08,510
they get a new workspace oh wait I just

00:40:07,160 --> 00:40:11,420
start talking about multiple jobs I

00:40:08,510 --> 00:40:13,520
better cover that quickly um so look we

00:40:11,420 --> 00:40:16,910
can another job that with our circle or

00:40:13,520 --> 00:40:19,160
CI pull off as is test limits so let's

00:40:16,910 --> 00:40:20,390
add that next job in their test Linux

00:40:19,160 --> 00:40:22,310
takes something that's in our workspace

00:40:20,390 --> 00:40:23,450
which as soon as like what Olaf was

00:40:22,310 --> 00:40:25,400
talking about just previously about

00:40:23,450 --> 00:40:28,040
uploading to a spectrum in the incircle

00:40:25,400 --> 00:40:30,320
c is a more streamlined process you

00:40:28,040 --> 00:40:31,970
I'll push into the workspace and then

00:40:30,320 --> 00:40:33,440
the Perl test next pulls it back down

00:40:31,970 --> 00:40:37,220
and you can test it on something like

00:40:33,440 --> 00:40:39,020
well 5 10 oh and I need to do the same

00:40:37,220 --> 00:40:40,790
thing where I say I want to wait until

00:40:39,020 --> 00:40:41,990
Perl builders finish before I start

00:40:40,790 --> 00:40:44,900
running it so they don't run at the same

00:40:41,990 --> 00:40:47,150
time and then in our GUI it looks like

00:40:44,900 --> 00:40:48,830
this we've got our Perl build we can go

00:40:47,150 --> 00:40:51,650
over and see that the pole test Linux is

00:40:48,830 --> 00:40:53,480
waiting on it yeah and again we don't

00:40:51,650 --> 00:40:55,310
want to just test on five ten one test

00:40:53,480 --> 00:40:57,020
on everything so again a matrix as this

00:40:55,310 --> 00:41:00,200
is the way forward and we can have that

00:40:57,020 --> 00:41:02,480
really simply with a circle CI by just

00:41:00,200 --> 00:41:05,720
saying a matrix transformation like so

00:41:02,480 --> 00:41:07,609
and now we can see that we've got this

00:41:05,720 --> 00:41:10,130
kind of fan-out system where we run the

00:41:07,609 --> 00:41:13,430
one job and it fans out and then runs

00:41:10,130 --> 00:41:15,980
all of the other tests Linux jobs so how

00:41:13,430 --> 00:41:18,410
did it do that well let's go over here

00:41:15,980 --> 00:41:19,910
and look at the configuration file which

00:41:18,410 --> 00:41:21,530
is terribly on exciting as I just showed

00:41:19,910 --> 00:41:23,210
it to you but we can also go and see the

00:41:21,530 --> 00:41:25,460
compiled version of this which is very

00:41:23,210 --> 00:41:27,590
long which is this expense the version

00:41:25,460 --> 00:41:29,000
of the config file which all the orbs

00:41:27,590 --> 00:41:30,320
have been expanded and all of the things

00:41:29,000 --> 00:41:32,810
that been needed to be duplicate have

00:41:30,320 --> 00:41:35,480
been duplicated out so essentially what

00:41:32,810 --> 00:41:38,480
this matrix conformation is doing is

00:41:35,480 --> 00:41:40,369
turning this simple conflict into a

00:41:38,480 --> 00:41:44,119
multi-step process producing all of our

00:41:40,369 --> 00:41:45,770
jobs but now we looked underneath the

00:41:44,119 --> 00:41:47,420
curve behind the curtain as it were to

00:41:45,770 --> 00:41:49,250
see what's going on we can start seeing

00:41:47,420 --> 00:41:52,100
what else this was doing this is the

00:41:49,250 --> 00:41:54,859
perl build job is in fact just really

00:41:52,100 --> 00:41:57,230
this it's picking a docker image the

00:41:54,859 --> 00:41:58,760
latest protest the one it's and it's

00:41:57,230 --> 00:42:01,070
running some steps against it it's

00:41:58,760 --> 00:42:04,520
checking out code it's running a command

00:42:01,070 --> 00:42:05,990
it's persisting things do workspace in

00:42:04,520 --> 00:42:07,880
fact it's not that hard to write one of

00:42:05,990 --> 00:42:10,850
these things from scratch so here is a

00:42:07,880 --> 00:42:12,260
standalone piece of the animal that will

00:42:10,850 --> 00:42:14,540
run it's the simplest possible thing I

00:42:12,260 --> 00:42:17,270
could think of so we can see that we

00:42:14,540 --> 00:42:19,550
declare a job we'll call build which has

00:42:17,270 --> 00:42:21,140
a dot which runs a docker image and it

00:42:19,550 --> 00:42:24,470
has some steps in it to check out and

00:42:21,140 --> 00:42:25,700
run and that's simple you may notice

00:42:24,470 --> 00:42:28,490
there's no workflow anymore in this

00:42:25,700 --> 00:42:30,609
that's because so Quilici also supplies

00:42:28,490 --> 00:42:34,910
default workflow which is to build

00:42:30,609 --> 00:42:36,650
whatever is in the build job and we see

00:42:34,910 --> 00:42:38,300
you usually run command and these are

00:42:36,650 --> 00:42:40,550
flexible you're gonna just run a single

00:42:38,300 --> 00:42:41,619
command you could tell you I prefer to

00:42:40,550 --> 00:42:43,180
have a name

00:42:41,619 --> 00:42:45,069
you could say I'd like to my multiple

00:42:43,180 --> 00:42:47,380
commands you can say I'd like to embed a

00:42:45,069 --> 00:42:48,789
Perl script these are all things that

00:42:47,380 --> 00:42:50,769
are really simple and straightforward to

00:42:48,789 --> 00:42:52,630
do and you can see I can actually

00:42:50,769 --> 00:42:54,339
specify where I'm going to run it what

00:42:52,630 --> 00:42:56,579
image I'm gonna run it on doctor but I'm

00:42:54,339 --> 00:42:59,650
not limited to doc I can run on a bare

00:42:56,579 --> 00:43:02,859
limits machine image I can run on

00:42:59,650 --> 00:43:06,999
Windows I can run it on Mac OS X I have

00:43:02,859 --> 00:43:09,699
multiple choices here and I can even use

00:43:06,999 --> 00:43:11,259
circle CI to build docker images in fact

00:43:09,699 --> 00:43:13,449
circle CI is really good at building

00:43:11,259 --> 00:43:15,309
docker images and the reason for that is

00:43:13,449 --> 00:43:17,469
it supports doctor layer caching so

00:43:15,309 --> 00:43:19,809
here's a docker file is the docker file

00:43:17,469 --> 00:43:23,469
actually to build the per se I protest

00:43:19,809 --> 00:43:26,109
to help help a based a Perl tester image

00:43:23,469 --> 00:43:27,940
so what it does what we do is we step

00:43:26,109 --> 00:43:30,130
through these so and build up file

00:43:27,940 --> 00:43:32,859
system there so let's say we download a

00:43:30,130 --> 00:43:34,390
layer from docker hub we each command we

00:43:32,859 --> 00:43:36,519
execute we build up more layers and then

00:43:34,390 --> 00:43:38,199
finally we have a scratch there on top

00:43:36,519 --> 00:43:41,920
when we execute the command and each of

00:43:38,199 --> 00:43:44,109
these have thousand and these files can

00:43:41,920 --> 00:43:45,969
be kind of built with an overlay file

00:43:44,109 --> 00:43:48,009
system so it seems like you're just

00:43:45,969 --> 00:43:50,049
running in one layer but actually you've

00:43:48,009 --> 00:43:51,430
got all of these layers what have you

00:43:50,049 --> 00:43:53,769
change one of these bars like the red

00:43:51,430 --> 00:43:55,479
spinny one there well that layers toast

00:43:53,769 --> 00:43:57,069
is no good anymore we have to rebuild it

00:43:55,479 --> 00:43:59,469
and the layers of birth yep they're

00:43:57,069 --> 00:44:02,140
toast too so we need to rebuild all of

00:43:59,469 --> 00:44:04,959
those layers but by rebuilding those

00:44:02,140 --> 00:44:06,670
layers we have a new system but these

00:44:04,959 --> 00:44:08,589
two layers at the bottom did not get

00:44:06,670 --> 00:44:10,509
rebuilt on your own enormous machine and

00:44:08,589 --> 00:44:13,660
this is really important if that layer

00:44:10,509 --> 00:44:15,759
near the bottom took an hour to build so

00:44:13,660 --> 00:44:17,890
what we want to do is cache those and

00:44:15,759 --> 00:44:19,660
redo it and reuse them which is what dr.

00:44:17,890 --> 00:44:21,670
will do on your desktop machine but on a

00:44:19,660 --> 00:44:24,670
CI system where you throw away the

00:44:21,670 --> 00:44:26,140
interbeing every time oh they go and you

00:44:24,670 --> 00:44:27,880
have to rebuild everything from scratch

00:44:26,140 --> 00:44:29,650
unless you're using doctor layer caching

00:44:27,880 --> 00:44:30,789
where we read we resurrect those in

00:44:29,650 --> 00:44:33,969
those layers and put them back where

00:44:30,789 --> 00:44:35,469
they're supposed to be and we only have

00:44:33,969 --> 00:44:39,549
to spend the time building what we need

00:44:35,469 --> 00:44:43,449
200 secrets 11 mentioned using secrets

00:44:39,549 --> 00:44:45,130
in circles CI we need to when we want to

00:44:43,449 --> 00:44:47,289
pass a secret like the coveralls token

00:44:45,130 --> 00:44:48,640
for example we go and put it in an

00:44:47,289 --> 00:44:49,809
environment variables so here's an

00:44:48,640 --> 00:44:51,640
environment variable it's really

00:44:49,809 --> 00:44:53,979
straightforward I mean in the config for

00:44:51,640 --> 00:44:55,090
my project I can go click and I just

00:44:53,979 --> 00:44:57,400
added in bar

00:44:55,090 --> 00:45:00,030
yeah and I've got beat based coveralls

00:44:57,400 --> 00:45:02,380
tokens should be this and when I save it

00:45:00,030 --> 00:45:04,800
it's hidden from view anyone I can't

00:45:02,380 --> 00:45:08,110
access again it's well it's secret and

00:45:04,800 --> 00:45:09,940
when I build with it you know it you'll

00:45:08,110 --> 00:45:12,160
see that you can see here Kerberos repo

00:45:09,940 --> 00:45:14,710
token is obfuscated I can't see it again

00:45:12,160 --> 00:45:16,540
and but it still works I still have 100%

00:45:14,710 --> 00:45:19,930
code coverage I just took this used to

00:45:16,540 --> 00:45:21,580
use the slide so I've been talking very

00:45:19,930 --> 00:45:24,820
quickly because I don't have much time

00:45:21,580 --> 00:45:25,930
to cover this but I wanted to cover one

00:45:24,820 --> 00:45:27,790
last thing before I finish speaking

00:45:25,930 --> 00:45:29,740
which is the important thing pricing how

00:45:27,790 --> 00:45:31,870
much does this cost you or you saw when

00:45:29,740 --> 00:45:33,490
I signed up I wasn't asked for a credit

00:45:31,870 --> 00:45:35,860
card number or anything like that that's

00:45:33,490 --> 00:45:38,440
because Circle CI gives you free credits

00:45:35,860 --> 00:45:41,170
so circle CI uses a credit system it

00:45:38,440 --> 00:45:43,600
gives you two and a half thousand

00:45:41,170 --> 00:45:45,400
credits free per month which is about

00:45:43,600 --> 00:45:46,750
four hours of billed time and that's for

00:45:45,400 --> 00:45:49,000
anything you want that's what private

00:45:46,750 --> 00:45:50,020
repositories public repositories the

00:45:49,000 --> 00:45:52,960
whole enchilada

00:45:50,020 --> 00:45:56,260
but for open source repositories that is

00:45:52,960 --> 00:45:59,230
anything on github where you do not we

00:45:56,260 --> 00:46:01,390
have multi public you get about four

00:45:59,230 --> 00:46:02,950
weeks worth of build time per month

00:46:01,390 --> 00:46:05,530
which is you know like you can build

00:46:02,950 --> 00:46:08,560
pretty much every waking hour for free

00:46:05,530 --> 00:46:10,420
so that's pretty awesome but should you

00:46:08,560 --> 00:46:12,460
want to power up and spend more money

00:46:10,420 --> 00:46:13,120
you can of course you know run more jobs

00:46:12,460 --> 00:46:15,580
at once

00:46:13,120 --> 00:46:20,470
get more CPUs which allows you to make

00:46:15,580 --> 00:46:24,070
things go much much faster and so that

00:46:20,470 --> 00:46:26,590
is the Lightning version of circle CI

00:46:24,070 --> 00:46:28,390
and hopefully I've shown you by doing by

00:46:26,590 --> 00:46:31,300
running so very quickly for everything

00:46:28,390 --> 00:46:35,610
how easy it is to setup with just a web

00:46:31,300 --> 00:46:35,610
browser and a few clicks thank you

00:46:39,520 --> 00:46:42,579
[Music]

00:46:44,150 --> 00:46:48,300
so Olaf we really should discuss how

00:46:46,830 --> 00:46:50,460
we're going to end this you did a nice

00:46:48,300 --> 00:46:52,110
job thanking everybody before I managed

00:46:50,460 --> 00:46:53,250
to say anything so I guess that the

00:46:52,110 --> 00:46:56,100
traditional thing is to say any

00:46:53,250 --> 00:46:58,700
questions yeah we have a few minutes and

00:46:56,100 --> 00:47:00,840
questions for either Olaf or mark please

00:46:58,700 --> 00:47:09,120
raise your hand or you can just done

00:47:00,840 --> 00:47:13,320
yourself ask um question we've covered

00:47:09,120 --> 00:47:14,460
two really nice tools and then Dave's

00:47:13,320 --> 00:47:18,150
gonna cover one tomorrow

00:47:14,460 --> 00:47:24,890
what types of reasons would make me pick

00:47:18,150 --> 00:47:27,780
one versus another well I'm talking boss

00:47:24,890 --> 00:47:29,880
but I can tell you that you might want

00:47:27,780 --> 00:47:32,150
to choose one because of better support

00:47:29,880 --> 00:47:34,680
for various operating systems different

00:47:32,150 --> 00:47:38,310
amounts of free stuff for various things

00:47:34,680 --> 00:47:40,560
you might want to support choose certain

00:47:38,310 --> 00:47:43,170
features like some of the things I

00:47:40,560 --> 00:47:44,790
suggested for circle see I like logging

00:47:43,170 --> 00:47:47,100
in being able to log into the box or

00:47:44,790 --> 00:47:51,270
having docker mayor caching but other

00:47:47,100 --> 00:47:53,720
systems have advantages too I'm oh yeah

00:47:51,270 --> 00:47:56,160
I mean having seen your presentation I

00:47:53,720 --> 00:47:58,740
think when that red circle CI for some

00:47:56,160 --> 00:48:00,780
things like one main difference with

00:47:58,740 --> 00:48:01,860
github is like it is like just all the

00:48:00,780 --> 00:48:03,240
different ways that you could trigger

00:48:01,860 --> 00:48:05,250
jobs like I'm not sure I don't know what

00:48:03,240 --> 00:48:08,040
circle CI like can I trigger a job just

00:48:05,250 --> 00:48:12,750
by commenting on an issue like that kind

00:48:08,040 --> 00:48:14,130
of thing so circle CI has many different

00:48:12,750 --> 00:48:15,540
ways to trigger things you can it has a

00:48:14,130 --> 00:48:17,490
fully functional API everything I showed

00:48:15,540 --> 00:48:20,040
you in the GUI you can do very API so

00:48:17,490 --> 00:48:21,810
you can trigger jobs and info you of any

00:48:20,040 --> 00:48:24,420
which way you want including you know

00:48:21,810 --> 00:48:25,710
having a github action that would track

00:48:24,420 --> 00:48:26,760
your circle sea ice or anything you've

00:48:25,710 --> 00:48:29,370
been doing one you can do the other

00:48:26,760 --> 00:48:31,140
offends nothing - all three of these

00:48:29,370 --> 00:48:35,070
plugin than one into the other to get

00:48:31,140 --> 00:48:37,650
exactly what you need okay yeah I mean

00:48:35,070 --> 00:48:39,150
like the the gonna propose it just

00:48:37,650 --> 00:48:41,070
they're kind of easy to get up and

00:48:39,150 --> 00:48:42,450
running with and having all the

00:48:41,070 --> 00:48:44,130
configuration they're the one thing

00:48:42,450 --> 00:48:46,620
actually that I'm interested in with her

00:48:44,130 --> 00:48:48,210
circle CI is that for meta Sipan we're

00:48:46,620 --> 00:48:49,080
building some docker images on the API

00:48:48,210 --> 00:48:50,820
and it looks like

00:48:49,080 --> 00:48:52,680
of resources and things just get

00:48:50,820 --> 00:48:54,360
cancelled and that's really hard to

00:48:52,680 --> 00:48:57,150
troubleshoot so I was thinking we will

00:48:54,360 --> 00:49:01,530
try that on Circle C I and then SSH in

00:48:57,150 --> 00:49:12,810
and see what's happening that's one

00:49:01,530 --> 00:49:16,620
thing awesome thank you I've got a

00:49:12,810 --> 00:49:18,870
question has there been any thoughts

00:49:16,620 --> 00:49:22,410
about trying to integrate this with C

00:49:18,870 --> 00:49:24,660
pan tester so anytime I tag something it

00:49:22,410 --> 00:49:26,460
can just automatically do the whole test

00:49:24,660 --> 00:49:29,010
on a bunch of things and upload it to

00:49:26,460 --> 00:49:33,900
see ban testers and pennies for any sort

00:49:29,010 --> 00:49:36,980
of groundwork laid for that yet Nico did

00:49:33,900 --> 00:49:39,960
you actually say anything about that I

00:49:36,980 --> 00:49:42,000
can say something for me they are very

00:49:39,960 --> 00:49:44,040
different on complementary tool one is

00:49:42,000 --> 00:49:46,080
tasting before your release the other is

00:49:44,040 --> 00:49:49,440
giving you feedback after your food is

00:49:46,080 --> 00:49:54,050
so steep and taster I understand issues

00:49:49,440 --> 00:49:56,310
explained by your final users whereas

00:49:54,050 --> 00:49:58,830
whereas the continuous integration help

00:49:56,310 --> 00:50:02,250
you improve your own development and

00:49:58,830 --> 00:50:04,430
prepare for the next widdy's yeah the

00:50:02,250 --> 00:50:07,620
idea basically being that you could

00:50:04,430 --> 00:50:09,600
possibly seed Sipan testers there's a

00:50:07,620 --> 00:50:11,370
couple of tests ahead of time saying hey

00:50:09,600 --> 00:50:15,200
it looks this newly release works on

00:50:11,370 --> 00:50:18,120
this one and works on this one yeah

00:50:15,200 --> 00:50:19,680
there are things you can trigger on get

00:50:18,120 --> 00:50:20,940
up to like a zit release like you can

00:50:19,680 --> 00:50:23,070
watch for new tags and things like that

00:50:20,940 --> 00:50:25,680
so I don't you could find some way of

00:50:23,070 --> 00:50:29,700
integrating that with some of the smoke

00:50:25,680 --> 00:50:32,400
croissants you can I guess or I suppose

00:50:29,700 --> 00:50:34,830
baby you could set up some VMs on like

00:50:32,400 --> 00:50:38,520
just use github as a as a smoker as well

00:50:34,830 --> 00:50:42,990
I guess but that might be the purpose

00:50:38,520 --> 00:50:44,730
Sam yeah we've seen that basically these

00:50:42,990 --> 00:50:46,710
tools are as powerful as you want to

00:50:44,730 --> 00:50:48,780
make them so you there's no reason you

00:50:46,710 --> 00:50:50,610
couldn't submit say see pen testers

00:50:48,780 --> 00:50:52,560
report from one of these as you're

00:50:50,610 --> 00:50:54,150
running it especially if you're running

00:50:52,560 --> 00:50:55,620
somebody else's especially if you're

00:50:54,150 --> 00:50:57,120
building somebody else's code as you're

00:50:55,620 --> 00:51:00,680
building something you're depending on

00:50:57,120 --> 00:51:03,049
there's a definitely feedback loop there

00:51:00,680 --> 00:51:04,220
yeah I guess if there's if you want but

00:51:03,049 --> 00:51:07,839
the time into it's probably nothing that

00:51:04,220 --> 00:51:12,109
would stop you from uploading the pause

00:51:07,839 --> 00:51:13,819
you know after you push attack - yeah in

00:51:12,109 --> 00:51:16,250
fact for circle see I for one of my

00:51:13,819 --> 00:51:17,930
modules I have that way when I'm when

00:51:16,250 --> 00:51:25,430
I'm done it automatically uploads its

00:51:17,930 --> 00:51:31,940
pause is that there's no order for that

00:51:25,430 --> 00:51:33,890
though no no I this baby steps to make

00:51:31,940 --> 00:51:37,869
everything is powerful as for most

00:51:33,890 --> 00:51:37,869

YouTube URL: https://www.youtube.com/watch?v=WfXo71I7LmE


