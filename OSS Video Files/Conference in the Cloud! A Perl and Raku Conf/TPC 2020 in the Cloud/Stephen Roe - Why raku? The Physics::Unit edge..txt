Title: Stephen Roe - Why raku? The Physics::Unit edge.
Publication date: 2020-06-25
Playlist: TPC 2020 in the Cloud
Description: 
	As raku matures, we need useful basic eco-system modules to bring the unique strengths and cultural style of raku to the wider world. Imagine a universal library of extensible raku classes spanning the sciences - Physics, Chemistry, Bio-sciences, Economics, Maths, Ecology, Virology. For this vision to be possible, one core tool is a standard module to represent real world measurements of values and units.

Physics::Unit and its sister Physics::Measure, combine the unique capabilities of raku to build on the popularity of this perl5 module in a newly released raku native rewrite. This talk is in two parts (i) highlighting the usefulness of rakuâ€™s unique combination of capabilities - Grammars, Unicode, Rats, infix/postfix operators, Types, OO - all had a place in the implementation and (ii) showcasing how these modules can be used as a natural extension for scientists or engineers at any skill level.

Unlike any other Units module, raku makes it possible to apply Units for the full range of use cases - source code examples and demonstrations will cover embedded postfix units, unit conversion, unit math, unit / object geometry in Jupyter notebooks. With support for US, Imperial and SI units covering base units, derived units and user defined units and parsing.
Captions: 
	00:00:00,290 --> 00:00:04,319
hello everybody I'd like to introduce

00:00:02,780 --> 00:00:06,660
Steven roe

00:00:04,319 --> 00:00:12,780
he's going to be talking about physics

00:00:06,660 --> 00:00:17,900
unit and why you want to use rocku in

00:00:12,780 --> 00:00:20,520
order to make use of this module Steven

00:00:17,900 --> 00:00:22,529
Thank You Todd and good morning welcome

00:00:20,520 --> 00:00:25,230
to everybody appreciate you taking time

00:00:22,529 --> 00:00:28,380
to join the session today so yes indeed

00:00:25,230 --> 00:00:32,250
this is about physics unit which is a

00:00:28,380 --> 00:00:34,680
module for raku for those of you who

00:00:32,250 --> 00:00:39,270
don't know me I'm Steve Rowe also known

00:00:34,680 --> 00:00:42,149
as p6 Steve and p6 started around Perl 6

00:00:39,270 --> 00:00:45,420
as you can guess but it also was a you

00:00:42,149 --> 00:00:46,980
know a pun on physics p6 if you can get

00:00:45,420 --> 00:00:48,870
what I'm saying here and somebody went

00:00:46,980 --> 00:00:50,750
and changed the language name on me so

00:00:48,870 --> 00:00:52,800
there you go I kept the name for now

00:00:50,750 --> 00:00:55,739
maybe I think of something better as

00:00:52,800 --> 00:00:57,899
life goes on so yeah I Mike my

00:00:55,739 --> 00:01:00,690
philosophy here is you know anyone who's

00:00:57,899 --> 00:01:02,160
dabbling with raku who's working with it

00:01:00,690 --> 00:01:04,519
you know we're all on a journey we're

00:01:02,160 --> 00:01:06,930
all we're all learning something new and

00:01:04,519 --> 00:01:10,799
we're kind of following the footsteps of

00:01:06,930 --> 00:01:11,850
some you know really smart people for

00:01:10,799 --> 00:01:14,400
the for the sake of argument I don't

00:01:11,850 --> 00:01:16,409
count myself as you know as a smart

00:01:14,400 --> 00:01:20,280
person in that regardless I don't come

00:01:16,409 --> 00:01:22,860
from you know language architect or you

00:01:20,280 --> 00:01:25,500
know language designer I don't come from

00:01:22,860 --> 00:01:27,750
a compiler implementer and so on I'm not

00:01:25,500 --> 00:01:30,150
kind of a deep deep developer like that

00:01:27,750 --> 00:01:32,490
I'm more in consumer land for me it was

00:01:30,150 --> 00:01:34,619
a step up to go from just coding I mean

00:01:32,490 --> 00:01:37,680
I spent many years making money as a

00:01:34,619 --> 00:01:41,700
Perl developer but then going stepping

00:01:37,680 --> 00:01:44,790
up to actually taking on writing and you

00:01:41,700 --> 00:01:46,200
know distributing a module was was a you

00:01:44,790 --> 00:01:48,149
know a step change for me a bit of a

00:01:46,200 --> 00:01:49,439
challenge and I chose physics you know

00:01:48,149 --> 00:01:51,720
for the various reasons I see I think

00:01:49,439 --> 00:01:54,360
it's a great first of all it matches my

00:01:51,720 --> 00:01:57,210
experience my background and being a

00:01:54,360 --> 00:01:59,820
physics major it's kind of my interest

00:01:57,210 --> 00:02:02,219
and also I felt it would be a great way

00:01:59,820 --> 00:02:04,950
to bring all the different bits of raku

00:02:02,219 --> 00:02:07,710
together into one one package and see

00:02:04,950 --> 00:02:09,569
how they could all play together so yes

00:02:07,710 --> 00:02:11,819
a physics unit for a coup is a rewrite

00:02:09,569 --> 00:02:13,430
of physics unit for po5 so they're

00:02:11,819 --> 00:02:17,180
standing on the shoulders of the Geiser

00:02:13,430 --> 00:02:21,650
to build that you'll also know that

00:02:17,180 --> 00:02:22,730
there's a physics scalar module over

00:02:21,650 --> 00:02:25,040
input five world

00:02:22,730 --> 00:02:28,310
I've actually recast that as physics

00:02:25,040 --> 00:02:30,680
measure so raku because the scalar is a

00:02:28,310 --> 00:02:32,870
concept in raku and I didn't want to

00:02:30,680 --> 00:02:35,629
create any more confusion than that I

00:02:32,870 --> 00:02:37,849
you know that I need to and then

00:02:35,629 --> 00:02:39,439
additionally an extra bonus today I'm

00:02:37,849 --> 00:02:42,620
going to talk about physics constant

00:02:39,439 --> 00:02:44,629
which is a new additional adjunct module

00:02:42,620 --> 00:02:47,450
which is kind of a wrapper or math

00:02:44,629 --> 00:02:50,480
constant to bring it bring in you know

00:02:47,450 --> 00:02:52,459
the the concerts you need like the speed

00:02:50,480 --> 00:02:54,980
of white eggplants content constant and

00:02:52,459 --> 00:02:56,900
stuff like that they all have units and

00:02:54,980 --> 00:02:59,389
they all have dimensions so we can use

00:02:56,900 --> 00:03:02,120
physics measure and mass constant bring

00:02:59,389 --> 00:03:08,569
that together as a wrapper and make it

00:03:02,120 --> 00:03:12,049
sing so when I think of a a journey like

00:03:08,569 --> 00:03:14,569
the one we're on with raku you know it's

00:03:12,049 --> 00:03:16,760
it's about I think for me it's about

00:03:14,569 --> 00:03:19,400
really interesting ideas of how people

00:03:16,760 --> 00:03:20,810
might use a new language in a in a

00:03:19,400 --> 00:03:22,519
different way perhaps not a complete

00:03:20,810 --> 00:03:24,739
revolutionary different way but an

00:03:22,519 --> 00:03:27,139
evolutionary different way and so I'm a

00:03:24,739 --> 00:03:29,299
user raku and I see that users of my

00:03:27,139 --> 00:03:32,180
modules you know they're kind of my

00:03:29,299 --> 00:03:33,620
users and usually that's gonna be

00:03:32,180 --> 00:03:36,019
scientists right so I'm kind of picking

00:03:33,620 --> 00:03:38,180
out my scientists here from from that

00:03:36,019 --> 00:03:40,069
wider community although units are used

00:03:38,180 --> 00:03:41,599
you know in different places too they're

00:03:40,069 --> 00:03:45,680
used in education they used in

00:03:41,599 --> 00:03:48,370
engineering they're used in a lot of

00:03:45,680 --> 00:03:50,930
them you know in business so it's it's

00:03:48,370 --> 00:03:52,459
scientists is just you know the main

00:03:50,930 --> 00:03:57,470
focus but there's a bit of peripheral

00:03:52,459 --> 00:04:01,250
around that I was thinking about how

00:03:57,470 --> 00:04:04,579
people might want to use a module like

00:04:01,250 --> 00:04:07,220
physics unit or physics measure the

00:04:04,579 --> 00:04:09,079
basically three different ways that I

00:04:07,220 --> 00:04:12,079
was thinking that you know could be a

00:04:09,079 --> 00:04:14,659
value it to somebody who's primarily a

00:04:12,079 --> 00:04:15,979
scientist that who likes to do coding

00:04:14,659 --> 00:04:19,190
and programming it as a way to

00:04:15,979 --> 00:04:20,989
accelerate you know it's a bicycle for

00:04:19,190 --> 00:04:23,539
the mind as it were for for their

00:04:20,989 --> 00:04:25,550
science that they're doing and the first

00:04:23,539 --> 00:04:27,110
way and I was kind of encouraged to do

00:04:25,550 --> 00:04:30,020
this with feedback from from

00:04:27,110 --> 00:04:32,889
first release in physics unit was to use

00:04:30,020 --> 00:04:36,460
the capabilities of raku to really

00:04:32,889 --> 00:04:40,400
transparently mutate the language to put

00:04:36,460 --> 00:04:42,560
SI units and SI unit prefixes don't rip

00:04:40,400 --> 00:04:45,800
me there just make them super easy to

00:04:42,560 --> 00:04:47,449
use so you know without talking about

00:04:45,800 --> 00:04:48,969
the concepts too much this is how it

00:04:47,449 --> 00:04:51,379
looks when you when you write

00:04:48,969 --> 00:04:55,129
raku with physics unit we'll see some

00:04:51,379 --> 00:04:59,300
examples later on so what I have is my L

00:04:55,129 --> 00:05:01,699
my door l equals one kilometer and what

00:04:59,300 --> 00:05:04,550
that's doing behind the scenes is its is

00:05:01,699 --> 00:05:10,009
it we've populated if you use the unit

00:05:04,550 --> 00:05:14,680
postfix sub sub library sub module that

00:05:10,009 --> 00:05:17,719
I published then that populates your

00:05:14,680 --> 00:05:21,529
your code space with a whole bunch of

00:05:17,719 --> 00:05:24,199
new postfix operators and what those

00:05:21,529 --> 00:05:27,319
operators come from is the SI prefixes

00:05:24,199 --> 00:05:30,680
so you know see for Santi and familiy k4

00:05:27,319 --> 00:05:33,680
kilo and so on and the SI base units

00:05:30,680 --> 00:05:36,430
Mpho meters per second and so on and so

00:05:33,680 --> 00:05:39,949
forth and it creates a whole bunch of

00:05:36,430 --> 00:05:42,259
postfix operators I mean I employ them I

00:05:39,949 --> 00:05:44,990
basically take my number it's a real

00:05:42,259 --> 00:05:47,089
needs to be real and then I just post

00:05:44,990 --> 00:05:49,129
fix it with that combination so

00:05:47,089 --> 00:05:51,229
kilometers or milliseconds or whatever

00:05:49,129 --> 00:05:55,250
you want to use and that then will

00:05:51,229 --> 00:05:57,770
create an object and will assign that

00:05:55,250 --> 00:06:00,199
object to my variable as the default

00:05:57,770 --> 00:06:03,409
part of the declaration there in this

00:06:00,199 --> 00:06:05,629
case my object that's going into L is a

00:06:03,409 --> 00:06:07,819
object of class lint because it's

00:06:05,629 --> 00:06:09,139
kilometers so physics unit is smart

00:06:07,819 --> 00:06:11,719
enough to know that if there's an M in

00:06:09,139 --> 00:06:14,240
there then that's a meter and if it's a

00:06:11,719 --> 00:06:17,270
meter at event and it makes it a limps I

00:06:14,240 --> 00:06:20,210
type and therefore we'll see later you

00:06:17,270 --> 00:06:22,189
know when we start to do operations how

00:06:20,210 --> 00:06:26,120
we can have that type is then used to

00:06:22,189 --> 00:06:28,370
automatically evolve you know to to to

00:06:26,120 --> 00:06:30,110
calculate the unit's part of the result

00:06:28,370 --> 00:06:31,430
in fact you can see it right here on the

00:06:30,110 --> 00:06:32,779
screen and the third line so the next

00:06:31,430 --> 00:06:35,029
thing I have is time equals one

00:06:32,779 --> 00:06:37,490
millisecond same concept it's time in

00:06:35,029 --> 00:06:40,280
this case and then do you know I should

00:06:37,490 --> 00:06:42,650
do some math so I'm overloading

00:06:40,280 --> 00:06:45,770
all the basic arithmetic operators plus

00:06:42,650 --> 00:06:50,360
minus multiply divide and in this case

00:06:45,770 --> 00:06:53,030
my s equals L over t is a million meters

00:06:50,360 --> 00:06:56,210
per second and what is s well it's the

00:06:53,030 --> 00:06:58,810
speed so I'm a physics unit knows I'm

00:06:56,210 --> 00:07:02,990
doing math and one or both of the

00:06:58,810 --> 00:07:05,120
operators around this in fix so the the

00:07:02,990 --> 00:07:07,220
operands around this infix operator one

00:07:05,120 --> 00:07:08,750
of both are a measure type then it knows

00:07:07,220 --> 00:07:10,910
I'm gonna do something special and I'm

00:07:08,750 --> 00:07:13,700
going to be thinking about how do we

00:07:10,910 --> 00:07:16,720
recalculate the speed of the result so

00:07:13,700 --> 00:07:19,400
the the unit dimensionality in the unit

00:07:16,720 --> 00:07:21,680
you know the class therefore of the

00:07:19,400 --> 00:07:23,660
result and creates me a new object in

00:07:21,680 --> 00:07:27,950
this case of class speed and puts it

00:07:23,660 --> 00:07:30,520
into s so great so that's that's use

00:07:27,950 --> 00:07:33,830
case number one just very simple inline

00:07:30,520 --> 00:07:37,610
get those SI units and prefixes and do

00:07:33,830 --> 00:07:41,720
math with them okay so what what about

00:07:37,610 --> 00:07:44,990
another use case for physics unit so

00:07:41,720 --> 00:07:47,180
here here I think I think about from

00:07:44,990 --> 00:07:48,880
time to time we still live in a world

00:07:47,180 --> 00:07:51,290
particular when we're talking globally

00:07:48,880 --> 00:07:54,410
you know you probably hear from X and

00:07:51,290 --> 00:07:57,590
I'm from the UK so I live in sort of

00:07:54,410 --> 00:07:59,210
mixed mode between metric and SI units

00:07:57,590 --> 00:08:01,850
particularly when I'm at work and I'm

00:07:59,210 --> 00:08:06,200
doing science and engineering type

00:08:01,850 --> 00:08:08,539
calculations and you know the things we

00:08:06,200 --> 00:08:11,060
use in our daily life so we use miles we

00:08:08,539 --> 00:08:13,850
use miles per hour we use these imperial

00:08:11,060 --> 00:08:17,690
units we call them they're similar in

00:08:13,850 --> 00:08:20,360
the u.s. of course you know feet inches

00:08:17,690 --> 00:08:23,000
those things still exist in the wild and

00:08:20,360 --> 00:08:27,380
I still nothing they're very important

00:08:23,000 --> 00:08:29,570
for any comprehensive unit module to be

00:08:27,380 --> 00:08:32,570
able to provide really handy conversions

00:08:29,570 --> 00:08:34,250
to and from different unit types so this

00:08:32,570 --> 00:08:36,589
for me is the important use case number

00:08:34,250 --> 00:08:40,310
two so you can see here I've got my f

00:08:36,589 --> 00:08:44,270
midol F equals dollar l dot in so it is

00:08:40,310 --> 00:08:47,870
a method defined by physics unit and

00:08:44,270 --> 00:08:50,180
then I give it my target

00:08:47,870 --> 00:08:54,350
version which is into a string because

00:08:50,180 --> 00:08:58,670
ft which is feet so I get resulting from

00:08:54,350 --> 00:09:01,160
this I get a new length unit at this

00:08:58,670 --> 00:09:02,840
time instead of it being one kilometer

00:09:01,160 --> 00:09:04,970
that's the L from the previous slices

00:09:02,840 --> 00:09:09,529
one kilometer is now a thousand two

00:09:04,970 --> 00:09:11,060
hundred eighty point eight four feet so

00:09:09,529 --> 00:09:12,260
you can go back and go back and forth

00:09:11,060 --> 00:09:13,490
and we'll show some of that later and

00:09:12,260 --> 00:09:15,589
you can do this across all different

00:09:13,490 --> 00:09:18,589
types of there's things like temperature

00:09:15,589 --> 00:09:21,140
in here and and forces and all kinds of

00:09:18,589 --> 00:09:24,890
good stuff to play volumes and areas to

00:09:21,140 --> 00:09:28,160
play around with so just a very very

00:09:24,890 --> 00:09:31,630
handy tool now within physics unit I

00:09:28,160 --> 00:09:33,920
also define the comparison operators and

00:09:31,630 --> 00:09:37,670
specifically if I'm going to compare F

00:09:33,920 --> 00:09:40,910
and L if I were to do that using the

00:09:37,670 --> 00:09:46,180
standard but you know not overloaded

00:09:40,910 --> 00:09:48,080
raku version of CMP they would say

00:09:46,180 --> 00:09:50,330
different because it's different right

00:09:48,080 --> 00:09:52,370
for not same but with this would be

00:09:50,330 --> 00:09:55,280
different this would fail but when I'm

00:09:52,370 --> 00:09:56,660
comparing you know is three thousand two

00:09:55,280 --> 00:09:58,520
hundred eighty point eight four feet the

00:09:56,660 --> 00:10:00,560
same as one kilometer well in the

00:09:58,520 --> 00:10:02,750
measure land it is that's the same thing

00:10:00,560 --> 00:10:04,190
right it's the same physical measure and

00:10:02,750 --> 00:10:09,200
so it's coming out as the same when I

00:10:04,190 --> 00:10:12,920
compare the two then we look at use case

00:10:09,200 --> 00:10:17,870
number three which is I term term missus

00:10:12,920 --> 00:10:19,850
composition so often you know if you if

00:10:17,870 --> 00:10:22,400
you dig around in the SI units for

00:10:19,850 --> 00:10:26,030
example you have this idea of base units

00:10:22,400 --> 00:10:28,250
and then derivative units so something

00:10:26,030 --> 00:10:31,100
like a kilogram or a meter or a second

00:10:28,250 --> 00:10:33,860
is a base unit and I think there are

00:10:31,100 --> 00:10:36,530
seven or eight base dimensions defined

00:10:33,860 --> 00:10:39,770
within SI and then there's a whole bunch

00:10:36,530 --> 00:10:42,860
of shorthand for these derived units so

00:10:39,770 --> 00:10:45,529
in this case I know that twenty five

00:10:42,860 --> 00:10:47,870
kilogram meter squared divided by

00:10:45,529 --> 00:10:51,580
seconds cubed is going to get is

00:10:47,870 --> 00:10:55,370
actually 25 watts so I can put that

00:10:51,580 --> 00:10:58,130
definition string and the number into my

00:10:55,370 --> 00:11:01,010
raku code now you'll see for the first

00:10:58,130 --> 00:11:03,500
time here we have this little Libra

00:11:01,010 --> 00:11:06,110
unicode operator this is a special

00:11:03,500 --> 00:11:07,970
operator it was inspired it came my

00:11:06,110 --> 00:11:10,220
inspiration area came from the atomic

00:11:07,970 --> 00:11:12,680
integer operators that exist around

00:11:10,220 --> 00:11:15,110
concurrency and I thought yes this is a

00:11:12,680 --> 00:11:21,910
really neat idea because you know I can

00:11:15,110 --> 00:11:25,339
define power in this I could take my my

00:11:21,910 --> 00:11:28,670
my normal way of saying you know my you

00:11:25,339 --> 00:11:32,209
my U equals unit you pass it in the

00:11:28,670 --> 00:11:36,170
string and then my my my P equals

00:11:32,209 --> 00:11:41,720
measure dot new you know value equal

00:11:36,170 --> 00:11:43,130
value arrow 25 unit arrow my unit that I

00:11:41,720 --> 00:11:45,800
just created but that's quite a lot of

00:11:43,130 --> 00:11:48,470
code if I like all I want to do is just

00:11:45,800 --> 00:11:51,410
put something into into a variable here

00:11:48,470 --> 00:11:53,899
and give it a default so this libre

00:11:51,410 --> 00:11:57,410
operator created it there's a really

00:11:53,899 --> 00:12:00,230
handy shortcut for doing declarations to

00:11:57,410 --> 00:12:02,750
create default values from a string and

00:12:00,230 --> 00:12:04,040
then physics unit will then go in and it

00:12:02,750 --> 00:12:05,630
will pluck the night in fact measure

00:12:04,040 --> 00:12:07,040
plucks the number off the front and it

00:12:05,630 --> 00:12:09,200
hands the rest of the strings of physics

00:12:07,040 --> 00:12:12,080
unit that will then pass the rest of the

00:12:09,200 --> 00:12:14,450
string it figures out it knows that this

00:12:12,080 --> 00:12:18,380
set of the you know this expression this

00:12:14,450 --> 00:12:21,740
unit expression is actually a derivative

00:12:18,380 --> 00:12:23,480
unit under Si and it's a unit W or what

00:12:21,740 --> 00:12:26,000
and it's a unit of power so it gives me

00:12:23,480 --> 00:12:28,970
back back P there's 25 Watts there's

00:12:26,000 --> 00:12:31,550
power so I can use that throughout we

00:12:28,970 --> 00:12:34,370
saw you know there is a quicker way to

00:12:31,550 --> 00:12:36,920
do my time equals 10 seconds but if you

00:12:34,370 --> 00:12:39,140
don't want to use the postfix you know

00:12:36,920 --> 00:12:41,120
like sub-module layer you can just use a

00:12:39,140 --> 00:12:44,180
string version here as we got it here

00:12:41,120 --> 00:12:47,329
and again as before I can do unit math

00:12:44,180 --> 00:12:50,480
so my e equals P times T gives me you

00:12:47,329 --> 00:12:54,079
know power times time is energy so 250

00:12:50,480 --> 00:12:56,930
joules in this case I'm one last thing

00:12:54,079 --> 00:12:59,839
around composition we didn't forget that

00:12:56,930 --> 00:13:04,510
what the definition appears and we can

00:12:59,839 --> 00:13:08,500
always so the SI preferred way of

00:13:04,510 --> 00:13:11,810
expressing or printing out you know a

00:13:08,500 --> 00:13:13,490
value and its units is actually shown

00:13:11,810 --> 00:13:14,510
here in the bottom right so there's a

00:13:13,490 --> 00:13:16,400
few things around the s

00:13:14,510 --> 00:13:18,500
preferred methods this is the kind of

00:13:16,400 --> 00:13:20,540
formal way of doing it in the base units

00:13:18,500 --> 00:13:23,180
they also allow you to do in derivatives

00:13:20,540 --> 00:13:25,100
which were posting we do also so here

00:13:23,180 --> 00:13:27,380
we've got an M squared meter squared

00:13:25,100 --> 00:13:29,690
because it's a to pursue two as a

00:13:27,380 --> 00:13:31,820
superscript so what a great fit you know

00:13:29,690 --> 00:13:33,380
can now use superscripts within raku so

00:13:31,820 --> 00:13:35,120
that's cool I've got this kind of

00:13:33,380 --> 00:13:36,800
midline dot that's probably a full name

00:13:35,120 --> 00:13:38,750
for that but it's not a it's not a full

00:13:36,800 --> 00:13:40,280
stop type dot or a period time table

00:13:38,750 --> 00:13:42,950
it's in the middle of the line so that's

00:13:40,280 --> 00:13:46,060
a unicode symbol like I can just

00:13:42,950 --> 00:13:48,650
therefore easily create this pretty

00:13:46,060 --> 00:13:53,270
method which is again comes in physics

00:13:48,650 --> 00:13:54,830
unit and lets me print out my my unit in

00:13:53,270 --> 00:13:56,810
the SI preferred way and we've got a

00:13:54,830 --> 00:13:59,270
couple of different kind of friendly

00:13:56,810 --> 00:14:01,130
ways of printing stuff out to to match

00:13:59,270 --> 00:14:04,730
the different requirements people might

00:14:01,130 --> 00:14:06,110
have hey that's the Libra operator in a

00:14:04,730 --> 00:14:09,110
nutshell be a little bit more on that

00:14:06,110 --> 00:14:10,430
later so it's also I think because we're

00:14:09,110 --> 00:14:14,030
doing quite a lot in terms of

00:14:10,430 --> 00:14:15,710
overloading the functions we're

00:14:14,030 --> 00:14:18,980
overloading some a lot of postscript

00:14:15,710 --> 00:14:21,440
operators then I quite like the idea of

00:14:18,980 --> 00:14:23,810
having some unusual symbol that is

00:14:21,440 --> 00:14:25,430
recognizable dotted around the code that

00:14:23,810 --> 00:14:27,320
lets people know I'm not just in vanilla

00:14:25,430 --> 00:14:29,510
raku now there might be some odd things

00:14:27,320 --> 00:14:31,460
going on here that create you know

00:14:29,510 --> 00:14:34,670
behaviors I didn't anticipate because I

00:14:31,460 --> 00:14:37,900
some way up in my my software is put you

00:14:34,670 --> 00:14:40,850
know use physics method use physics unit

00:14:37,900 --> 00:14:43,610
so that that's it for my use cases I

00:14:40,850 --> 00:14:46,460
think those are three complimentary

00:14:43,610 --> 00:14:50,330
goals around any kind of physics unit

00:14:46,460 --> 00:14:52,070
module that is required I think it's

00:14:50,330 --> 00:14:55,250
also important that you know this be

00:14:52,070 --> 00:14:57,950
delivered in a combined way on a single

00:14:55,250 --> 00:15:04,580
infrastructure so I can have the same

00:14:57,950 --> 00:15:08,180
set of classes I can I can you know mix

00:15:04,580 --> 00:15:11,330
the classes and use the type constraints

00:15:08,180 --> 00:15:12,800
around clock classes independent you

00:15:11,330 --> 00:15:18,650
know across all the different kinds of

00:15:12,800 --> 00:15:21,380
use cases that I might be using right so

00:15:18,650 --> 00:15:24,020
that that's what I believe physics unit

00:15:21,380 --> 00:15:26,450
is trying to do you're welcome by the

00:15:24,020 --> 00:15:27,420
way to go to to github the details will

00:15:26,450 --> 00:15:29,130
be on the end here

00:15:27,420 --> 00:15:30,600
put in any kind of requests and issues

00:15:29,130 --> 00:15:32,700
that you might have you might have whole

00:15:30,600 --> 00:15:33,150
other class of uses that you want to do

00:15:32,700 --> 00:15:34,890
with it

00:15:33,150 --> 00:15:37,010
I'd love to see that you know I'd love

00:15:34,890 --> 00:15:39,780
to have that kind of feedback and and

00:15:37,010 --> 00:15:41,150
you know encouragement of where to go

00:15:39,780 --> 00:15:43,920
next

00:15:41,150 --> 00:15:46,020
so yes that's all well okay we have we

00:15:43,920 --> 00:15:48,770
want to do all these things so so why

00:15:46,020 --> 00:15:51,660
raku you know why not do this in Java

00:15:48,770 --> 00:15:54,330
why do we need to do you know this whole

00:15:51,660 --> 00:15:57,840
new language and what would be different

00:15:54,330 --> 00:15:59,160
about it so I started as I as I started

00:15:57,840 --> 00:16:01,770
working through this it became very

00:15:59,160 --> 00:16:04,830
clear to me there's a lot of things that

00:16:01,770 --> 00:16:06,870
raku brought to the table you know

00:16:04,830 --> 00:16:09,450
starting back in 2015 but you know in

00:16:06,870 --> 00:16:12,480
the last few years more and more you

00:16:09,450 --> 00:16:14,520
know pervasive and really useful for

00:16:12,480 --> 00:16:16,980
someone who wants to get more out of

00:16:14,520 --> 00:16:18,270
their you know scientist type of person

00:16:16,980 --> 00:16:21,570
ones get more out of their their

00:16:18,270 --> 00:16:23,790
programming in their coding so unicode I

00:16:21,570 --> 00:16:26,640
think it's just perfect for the kind of

00:16:23,790 --> 00:16:30,420
scientific equations and formulate the

00:16:26,640 --> 00:16:32,520
people people need to do I think classes

00:16:30,420 --> 00:16:35,820
and types within raku that class model

00:16:32,520 --> 00:16:38,220
is a really great way to you know to to

00:16:35,820 --> 00:16:40,290
have to come in and extend that the

00:16:38,220 --> 00:16:44,340
classes of unit classes of measure that

00:16:40,290 --> 00:16:47,360
can can really fit in very neatly and

00:16:44,340 --> 00:16:52,340
and be a good citizen within that wider

00:16:47,360 --> 00:16:54,930
class type universe that raku defines

00:16:52,340 --> 00:16:56,490
object-oriented I kind of separates a

00:16:54,930 --> 00:16:59,190
little bit from class and types so the

00:16:56,490 --> 00:17:01,200
first bullet here is more about the

00:16:59,190 --> 00:17:03,780
class is a type so therefore I'm going

00:17:01,200 --> 00:17:07,260
to be doing type checking and using

00:17:03,780 --> 00:17:11,010
types to to drive some of my algorithmic

00:17:07,260 --> 00:17:12,900
decisions and then then the the object

00:17:11,010 --> 00:17:16,980
orientation I think you'll see it later

00:17:12,900 --> 00:17:19,920
is about how how can i you know compose

00:17:16,980 --> 00:17:21,360
together code if I'm a scientist that

00:17:19,920 --> 00:17:24,510
there's useful stuff where I'm either

00:17:21,360 --> 00:17:28,980
scientist I can use object orientation

00:17:24,510 --> 00:17:30,990
to do to do my notations and my

00:17:28,980 --> 00:17:35,040
reproduce my results in a clearer and

00:17:30,990 --> 00:17:37,140
more comprehensible way then foo here

00:17:35,040 --> 00:17:39,240
apologies for that for the reuse of foo

00:17:37,140 --> 00:17:40,260
but this is functional operator overload

00:17:39,240 --> 00:17:42,450
so we're going to over

00:17:40,260 --> 00:17:44,070
those basic you know arithmetic

00:17:42,450 --> 00:17:45,930
operators and a few others with him

00:17:44,070 --> 00:17:48,960
within Pearl and with excuse me

00:17:45,930 --> 00:17:51,690
raku and and then another couple of

00:17:48,960 --> 00:17:54,090
really cool things about raku is is rat

00:17:51,690 --> 00:17:57,780
math so using rationals as a default

00:17:54,090 --> 00:18:01,140
mathematical real type very very useful

00:17:57,780 --> 00:18:03,660
particularly for round-tripping on on

00:18:01,140 --> 00:18:05,670
unit conversions and then finally

00:18:03,660 --> 00:18:07,830
grammars so grammars comes into this in

00:18:05,670 --> 00:18:10,790
a big way too particularly passing those

00:18:07,830 --> 00:18:12,960
unit expressions and I think raku is

00:18:10,790 --> 00:18:15,480
having those grammars built into the

00:18:12,960 --> 00:18:18,270
language it really turbo charges what

00:18:15,480 --> 00:18:21,020
you can do you know with your coding and

00:18:18,270 --> 00:18:23,340
particularly creating a module like this

00:18:21,020 --> 00:18:27,390
so let me just kind of give a bit more

00:18:23,340 --> 00:18:29,640
flesh on on those bones there so unicode

00:18:27,390 --> 00:18:32,100
here's an example of what a scientist

00:18:29,640 --> 00:18:34,080
might want to do unicode so I met Sam

00:18:32,100 --> 00:18:35,850
I'm a physicist and I want to do a

00:18:34,080 --> 00:18:37,670
little bit of simple math on the

00:18:35,850 --> 00:18:40,080
wavelength frequency energy of a photon

00:18:37,670 --> 00:18:41,910
and Mynor way to do that is I know my

00:18:40,080 --> 00:18:44,790
that lambda is the wavelength of a

00:18:41,910 --> 00:18:47,580
photon so I can just put in my backslash

00:18:44,790 --> 00:18:51,450
lambda is 2.5 nanometers it's as simple

00:18:47,580 --> 00:18:53,160
as that now how do I get to my frequency

00:18:51,450 --> 00:18:55,710
my frequency is usually represented as

00:18:53,160 --> 00:18:57,870
this funky V it's a Greek letter nu so

00:18:55,710 --> 00:18:59,670
my new equals C as you probably know C

00:18:57,870 --> 00:19:02,220
is the speed of light 3 times 10 to the

00:18:59,670 --> 00:19:05,460
8th meters per second I need to divide

00:19:02,220 --> 00:19:08,220
that by lambda so C is comes in from our

00:19:05,460 --> 00:19:10,800
physics constants module so I can use it

00:19:08,220 --> 00:19:13,410
right here in my calculations so I get

00:19:10,800 --> 00:19:17,940
my my nu equals C divided by lambda and

00:19:13,410 --> 00:19:19,710
I can then immediately say nu is you

00:19:17,940 --> 00:19:25,140
know and then convert it to petaa Hertz

00:19:19,710 --> 00:19:26,370
just don't know honey 20 Peter Hertz and

00:19:25,140 --> 00:19:28,410
then finally what else can I do with

00:19:26,370 --> 00:19:30,060
with this kind of approach well I might

00:19:28,410 --> 00:19:33,150
want to get my energy of my photon which

00:19:30,060 --> 00:19:36,120
is my my planck constant multiplied by

00:19:33,150 --> 00:19:39,120
the frequency so energy of photon is in

00:19:36,120 --> 00:19:42,210
Etta joules just under 80 Etta joules so

00:19:39,120 --> 00:19:45,360
there you know I can be packing away on

00:19:42,210 --> 00:19:47,340
my little you know calculation notepad

00:19:45,360 --> 00:19:49,050
here as a scientist quickly getting

00:19:47,340 --> 00:19:51,510
handy conversions and stuff and doing

00:19:49,050 --> 00:19:54,210
calculations checking order of magnitude

00:19:51,510 --> 00:19:56,100
type stuff then I'm getting my

00:19:54,210 --> 00:19:58,560
you know I'm doing the right thing and

00:19:56,100 --> 00:20:00,660
getting getting the sensible results out

00:19:58,560 --> 00:20:02,910
of my experiments and also having that

00:20:00,660 --> 00:20:04,770
that nice Unicode to present back my

00:20:02,910 --> 00:20:06,720
results in if I want to have some kind

00:20:04,770 --> 00:20:08,640
of shareable you know readable stuff

00:20:06,720 --> 00:20:11,310
that my peers can understand so I think

00:20:08,640 --> 00:20:15,750
Unicode is just a perfect fit for this

00:20:11,310 --> 00:20:17,040
kind of module okay so let's let's look

00:20:15,750 --> 00:20:20,010
at types in classes by the way this

00:20:17,040 --> 00:20:21,570
little blue arrow here is meant to draw

00:20:20,010 --> 00:20:24,050
your attention to the bit of my quite

00:20:21,570 --> 00:20:28,770
noisy slide that I'm talking about

00:20:24,050 --> 00:20:32,840
so within physics unit we have about 230

00:20:28,770 --> 00:20:35,790
built-in units so a small example here

00:20:32,840 --> 00:20:40,800
they probably represent I think is about

00:20:35,790 --> 00:20:44,220
25 to 30 different classes and so for

00:20:40,800 --> 00:20:47,490
example my volume my V is seven cubic

00:20:44,220 --> 00:20:49,800
yards I don't have to specify it's a

00:20:47,490 --> 00:20:52,770
volume that's induced from from the

00:20:49,800 --> 00:20:55,800
string expression passing the grammar

00:20:52,770 --> 00:20:57,690
does I can put my volume in meters cube

00:20:55,800 --> 00:20:59,190
there are five points five point three

00:20:57,690 --> 00:21:02,520
five two meters cubed

00:20:59,190 --> 00:21:05,210
my dsdt is speedo is speedo time so

00:21:02,520 --> 00:21:07,530
speed over time is an acceleration oh

00:21:05,210 --> 00:21:10,080
yeah I've got seventy miles an hour and

00:21:07,530 --> 00:21:11,670
forget that we drive around cars in

00:21:10,080 --> 00:21:14,280
miles an hour so we you know we might

00:21:11,670 --> 00:21:18,840
want to know that from time to time we

00:21:14,280 --> 00:21:21,150
can do forces so I can see my forces you

00:21:18,840 --> 00:21:25,920
know comes out of this set of base units

00:21:21,150 --> 00:21:28,650
it's 27 Newtons I can handle energy I

00:21:25,920 --> 00:21:31,530
can handle power a little bit I can

00:21:28,650 --> 00:21:34,800
multiply power by time my gives me back

00:21:31,530 --> 00:21:37,290
an energy so so the class declaration

00:21:34,800 --> 00:21:40,080
creates a compile time construct you

00:21:37,290 --> 00:21:42,660
know that's then created into the type

00:21:40,080 --> 00:21:45,540
object and that's really important

00:21:42,660 --> 00:21:47,490
because it means I can we can catch any

00:21:45,540 --> 00:21:50,490
errors now where somebody tries to add a

00:21:47,490 --> 00:21:51,900
speed to an energy they're gonna get a

00:21:50,490 --> 00:21:53,070
nice little error there and they know

00:21:51,900 --> 00:21:55,110
that's something they shouldn't do and

00:21:53,070 --> 00:21:57,510
so a scientist is gonna get the kind of

00:21:55,110 --> 00:21:59,430
error checking and controls that will

00:21:57,510 --> 00:22:01,790
benefit all of us in general now he's

00:21:59,430 --> 00:22:08,790
getting it in his scientific

00:22:01,790 --> 00:22:10,710
calculations and his his world great so

00:22:08,790 --> 00:22:13,620
let's talk about the object orientation

00:22:10,710 --> 00:22:16,500
and how this fits in the wider raku

00:22:13,620 --> 00:22:18,300
world so those of you who've been

00:22:16,500 --> 00:22:21,860
studying there raku i'm sure you know

00:22:18,300 --> 00:22:23,760
this is the raku standard object map

00:22:21,860 --> 00:22:26,430
it's a great little graph actually

00:22:23,760 --> 00:22:28,350
object graph i should say it's in the

00:22:26,430 --> 00:22:30,750
documentation i use it quite a lot helps

00:22:28,350 --> 00:22:33,170
me really figure out you know how things

00:22:30,750 --> 00:22:35,250
work i'm so mu here right at the top

00:22:33,170 --> 00:22:37,350
everything descends from that harris

00:22:35,250 --> 00:22:40,770
from that and any and then cool and so

00:22:37,350 --> 00:22:42,600
on so everything down to sort of the the

00:22:40,770 --> 00:22:45,180
rat and fat rats on the left here and

00:22:42,600 --> 00:22:47,250
then string everything everything above

00:22:45,180 --> 00:22:50,160
that line is all standard rack you're

00:22:47,250 --> 00:22:53,910
just colored things that i'm using so so

00:22:50,160 --> 00:22:57,030
physics measure physics unit world is

00:22:53,910 --> 00:22:58,620
red so you can see down here well first

00:22:57,030 --> 00:23:02,460
of all here I've got physics unit and

00:22:58,620 --> 00:23:04,830
physics unit is gonna be as it has a

00:23:02,460 --> 00:23:05,790
string which is that definition string

00:23:04,830 --> 00:23:10,670
it does a whole bunch of other things

00:23:05,790 --> 00:23:16,080
with it and then then all of those

00:23:10,670 --> 00:23:19,560
different unit types you know they are

00:23:16,080 --> 00:23:25,890
they how do I describe you know type

00:23:19,560 --> 00:23:29,130
length is unit right so that's how I

00:23:25,890 --> 00:23:31,590
typing inheritance is done so we only

00:23:29,130 --> 00:23:34,170
have to put all the the methods and all

00:23:31,590 --> 00:23:36,330
the code in the in the parent physics

00:23:34,170 --> 00:23:38,550
unit class

00:23:36,330 --> 00:23:41,070
physics measure then has two things in

00:23:38,550 --> 00:23:43,320
it roughly speaking it has has a value

00:23:41,070 --> 00:23:45,690
which is a real so that's just the red

00:23:43,320 --> 00:23:48,240
arrow here and it has a physics unit

00:23:45,690 --> 00:23:51,090
which is a physics unit so we just bring

00:23:48,240 --> 00:23:54,720
those two together as two has attributes

00:23:51,090 --> 00:23:58,680
of your physics major object so now I

00:23:54,720 --> 00:24:00,660
have 25 meters for example other things

00:23:58,680 --> 00:24:02,220
that are relevant then to physics

00:24:00,660 --> 00:24:05,310
measure and physics unit around this

00:24:02,220 --> 00:24:07,410
picture you can use fat everything

00:24:05,310 --> 00:24:09,840
within the measure is a real so it means

00:24:07,410 --> 00:24:11,520
we can use both kinds of rationals rats

00:24:09,840 --> 00:24:13,350
and fat rats so you can have kind of

00:24:11,520 --> 00:24:15,450
infinite precision math if you want and

00:24:13,350 --> 00:24:17,340
a lot of scientific stuff goes way to

00:24:15,450 --> 00:24:19,380
the very small way to the very high so

00:24:17,340 --> 00:24:22,500
that's extremely valuable for this

00:24:19,380 --> 00:24:24,780
world we also have duration as a real so

00:24:22,500 --> 00:24:27,810
that means you know duration and raku is

00:24:24,780 --> 00:24:31,170
a difference between two intervals so

00:24:27,810 --> 00:24:35,450
for us when I talk about time is 10

00:24:31,170 --> 00:24:39,660
seconds and that's the time class then

00:24:35,450 --> 00:24:44,910
that the value in that measure is a

00:24:39,660 --> 00:24:49,020
duration object so you know that 10

00:24:44,910 --> 00:24:52,260
seconds object creates has a value of 10

00:24:49,020 --> 00:24:54,120
of 10 duration with a value of 10 inside

00:24:52,260 --> 00:24:56,490
it excuse me I explain that right so you

00:24:54,120 --> 00:24:58,530
can calculate it properly so I can then

00:24:56,490 --> 00:25:00,810
use that duration with all the other

00:24:58,530 --> 00:25:02,460
great date/time capabilities of raku so

00:25:00,810 --> 00:25:04,080
I can say you know how many how many

00:25:02,460 --> 00:25:06,180
hours is it between you know train

00:25:04,080 --> 00:25:09,120
leaves station traveling at 37

00:25:06,180 --> 00:25:12,690
you know m/s and gets to you know

00:25:09,120 --> 00:25:16,340
Chattanooga which is 47 miles away I can

00:25:12,690 --> 00:25:19,650
use you know the real real world

00:25:16,340 --> 00:25:23,340
date/time capabilities within raku to do

00:25:19,650 --> 00:25:25,680
that in a coherent way and then finally

00:25:23,340 --> 00:25:27,750
at the bottom right here we have in in

00:25:25,680 --> 00:25:30,780
purple just to kind of it's a mix of

00:25:27,750 --> 00:25:34,140
colors and basically the green here is

00:25:30,780 --> 00:25:36,720
is math constants so JJ morello very

00:25:34,140 --> 00:25:39,750
nice module called math constant has a

00:25:36,720 --> 00:25:42,840
whole bunch of physics constants but

00:25:39,750 --> 00:25:44,970
purely as numerical values in it so

00:25:42,840 --> 00:25:47,640
rather than create a second copy of that

00:25:44,970 --> 00:25:49,800
in in the raku module world I wanted to

00:25:47,640 --> 00:25:51,390
reuse that so kind of physics concert

00:25:49,800 --> 00:25:53,760
which basically a wrapper or math

00:25:51,390 --> 00:25:55,320
constant that takes all of the physical

00:25:53,760 --> 00:25:59,430
constants out of that out of that

00:25:55,320 --> 00:26:02,190
library and wrappers there makes them

00:25:59,430 --> 00:26:04,290
into measures so you basically say you

00:26:02,190 --> 00:26:06,570
know C is a speed of light the value

00:26:04,290 --> 00:26:09,930
that came from math constant and that

00:26:06,570 --> 00:26:12,480
the you know the the units is meters per

00:26:09,930 --> 00:26:14,370
second so that physics countenance

00:26:12,480 --> 00:26:16,740
constant is doing there obviously

00:26:14,370 --> 00:26:20,010
great thing about raku again is lots of

00:26:16,740 --> 00:26:21,930
constants have you know naturally are a

00:26:20,010 --> 00:26:23,640
Unicode representation like Planck's

00:26:21,930 --> 00:26:25,380
constant this constant many many more

00:26:23,640 --> 00:26:27,590
and we'll see a few more of those later

00:26:25,380 --> 00:26:30,509
on in the talk today

00:26:27,590 --> 00:26:33,179
that's great so so some great cool stuff

00:26:30,509 --> 00:26:35,100
really coming from rock ooh now let's

00:26:33,179 --> 00:26:37,350
look at my operator overload so yeah

00:26:35,100 --> 00:26:40,519
basically taking all the you know the

00:26:37,350 --> 00:26:43,769
basic plus minus multiply divide and

00:26:40,519 --> 00:26:47,369
overloading those so if the right or the

00:26:43,769 --> 00:26:47,850
left or both is a measure type I pick

00:26:47,369 --> 00:26:49,769
that up

00:26:47,850 --> 00:26:51,779
I do special stuff with it that handles

00:26:49,769 --> 00:26:53,850
the unit part of the measure and returns

00:26:51,779 --> 00:26:56,789
back you know sensible results so here I

00:26:53,850 --> 00:26:59,369
can do you know I can must play two legs

00:26:56,789 --> 00:27:01,859
to get an area can divide its distance

00:26:59,369 --> 00:27:05,099
by time to get a speed or 1 over a times

00:27:01,859 --> 00:27:09,090
a frequency and stuff we've kind of seen

00:27:05,099 --> 00:27:10,679
it already you can you need in terms in

00:27:09,090 --> 00:27:13,109
terms of having a consistent set of

00:27:10,679 --> 00:27:17,159
tools in the toolkit you also need to do

00:27:13,109 --> 00:27:19,710
this for things like volume for example

00:27:17,159 --> 00:27:24,509
I'm going to get a volume or an area

00:27:19,710 --> 00:27:26,549
then I want to be able to use powers so

00:27:24,509 --> 00:27:28,830
I've got up to four powers and four

00:27:26,549 --> 00:27:30,509
roots supported in physics constant you

00:27:28,830 --> 00:27:35,039
might ask why why do I only go to power

00:27:30,509 --> 00:27:37,289
four well the most challenging thing I

00:27:35,039 --> 00:27:40,259
can think of is Boltzmann's equation I

00:27:37,289 --> 00:27:42,570
think it is which has inverse power of T

00:27:40,259 --> 00:27:44,549
to the 4 in it so I think the practical

00:27:42,570 --> 00:27:46,349
terms that gets us you know all the

00:27:44,549 --> 00:27:48,869
tools we need where every element comes

00:27:46,349 --> 00:27:51,629
up with no wanting more powers in here

00:27:48,869 --> 00:27:53,369
then we can do that so it's both powers

00:27:51,629 --> 00:27:54,960
and roots so I can go from in this case

00:27:53,369 --> 00:27:59,220
with lens to volume and I can go back

00:27:54,960 --> 00:28:01,259
from volume to length great I mentioned

00:27:59,220 --> 00:28:03,509
rats around 15 here's some some real

00:28:01,259 --> 00:28:05,970
examples from my tests so here I've got

00:28:03,509 --> 00:28:08,279
temperatures I've got degrees centigrade

00:28:05,970 --> 00:28:11,309
or Celsius or Kelvin

00:28:08,279 --> 00:28:13,799
I've got degrees Fahrenheit so you've

00:28:11,309 --> 00:28:16,470
seen in if I were using a language which

00:28:13,799 --> 00:28:22,190
did not default to rats then whenever I

00:28:16,470 --> 00:28:22,190
did some kind of simple calculation and

00:28:22,369 --> 00:28:29,669
you know factored out you know just

00:28:25,379 --> 00:28:31,259
factoring a value I might work if I do

00:28:29,669 --> 00:28:33,899
that twice I'm converting out and

00:28:31,259 --> 00:28:35,730
converting back in again I would quite

00:28:33,899 --> 00:28:37,769
likely end up with you know thirty eight

00:28:35,730 --> 00:28:39,890
point nine nine nine seven or some kind

00:28:37,769 --> 00:28:42,650
of near-miss there

00:28:39,890 --> 00:28:45,170
cause the round trip really is 39 that's

00:28:42,650 --> 00:28:47,720
what I put it in the first place so very

00:28:45,170 --> 00:28:49,460
valuable capability in raku as the

00:28:47,720 --> 00:28:51,290
default that makes sense that people are

00:28:49,460 --> 00:28:54,320
using numbers in their in their day job

00:28:51,290 --> 00:28:55,550
you know you can imagine I'm a doctor

00:28:54,320 --> 00:28:57,050
okay that's kind of it not quite a

00:28:55,550 --> 00:28:58,910
scientist but you know these are quite

00:28:57,050 --> 00:29:02,390
quite useful tools for things like

00:28:58,910 --> 00:29:05,150
medical research and so on and so you

00:29:02,390 --> 00:29:09,080
need to be able to do predictable things

00:29:05,150 --> 00:29:10,880
with them with the results and the last

00:29:09,080 --> 00:29:14,930
you know cool thing about raku that

00:29:10,880 --> 00:29:16,010
really worked here is grammars and it

00:29:14,930 --> 00:29:17,870
took me a while to get my head around

00:29:16,010 --> 00:29:19,100
grammars I'll be honest it's by the way

00:29:17,870 --> 00:29:21,830
it took me about two years to write

00:29:19,100 --> 00:29:23,570
physics unit and what you see now is is

00:29:21,830 --> 00:29:24,860
a complete rewrite of the first part

00:29:23,570 --> 00:29:28,040
because the first place I was really

00:29:24,860 --> 00:29:29,210
learning raku as I went along so it's

00:29:28,040 --> 00:29:33,130
quite a lot cleaner is probably not

00:29:29,210 --> 00:29:35,720
perfect but anyway this is this is my

00:29:33,130 --> 00:29:38,840
grammar and since this is actually the

00:29:35,720 --> 00:29:42,020
tote the entire grammar for the unit

00:29:38,840 --> 00:29:47,690
expression passing that we need to do

00:29:42,020 --> 00:29:49,190
and it's it came in approximately 2025

00:29:47,690 --> 00:29:51,520
lines and that you know I even have

00:29:49,190 --> 00:29:54,490
plant lines in here to make it readable

00:29:51,520 --> 00:29:58,130
what an amazing tool I mean it's just

00:29:54,490 --> 00:30:00,530
it's like completely an order of

00:29:58,130 --> 00:30:03,200
magnitude more powerful than what you

00:30:00,530 --> 00:30:04,670
had in purl 5 and you know I'm a little

00:30:03,200 --> 00:30:06,890
bit of shame I did it I did a blog

00:30:04,670 --> 00:30:08,750
article the other day that compared the

00:30:06,890 --> 00:30:11,840
purl 5 version of this which is which is

00:30:08,750 --> 00:30:15,170
in fact a very tidy rect descent parser

00:30:11,840 --> 00:30:18,530
written in Perl 5 I think that version

00:30:15,170 --> 00:30:20,420
was 215 lines if I remember right so

00:30:18,530 --> 00:30:23,090
this is something like a 10x reduction

00:30:20,420 --> 00:30:27,530
in the amount of code that you need to

00:30:23,090 --> 00:30:29,870
write and maintain and it just you know

00:30:27,530 --> 00:30:31,730
it just goes really naturally with with

00:30:29,870 --> 00:30:33,170
the object orientation as well so you

00:30:31,730 --> 00:30:35,480
create a little stub objects as you

00:30:33,170 --> 00:30:37,250
start here and you can as you as you hit

00:30:35,480 --> 00:30:39,440
the actions actions about another 10

00:30:37,250 --> 00:30:40,700
lines you just build up and load up the

00:30:39,440 --> 00:30:42,680
different things as you go through and

00:30:40,700 --> 00:30:45,340
pass it's really nice to have object

00:30:42,680 --> 00:30:48,290
orientation and grammars side by side

00:30:45,340 --> 00:30:50,480
one very strong piece of piece of advice

00:30:48,290 --> 00:30:52,010
I really strongly encourage anyone who's

00:30:50,480 --> 00:30:53,170
going to get their get to grips with

00:30:52,010 --> 00:30:56,180
rocky ground

00:30:53,170 --> 00:30:57,230
it's it's commented out here cuz it's

00:30:56,180 --> 00:30:59,720
you know saying I only use it for

00:30:57,230 --> 00:31:02,240
debugging but use grammar tracer is

00:30:59,720 --> 00:31:04,430
absolutely fantastic without that I

00:31:02,240 --> 00:31:08,720
would be completely lost just a superb

00:31:04,430 --> 00:31:11,810
tool so great so hopefully that's given

00:31:08,720 --> 00:31:13,250
a little bit of you know viewers to have

00:31:11,810 --> 00:31:15,770
there's different bits of raku kind of

00:31:13,250 --> 00:31:18,140
come together here how it makes physics

00:31:15,770 --> 00:31:20,630
unit different be different within raku

00:31:18,140 --> 00:31:23,930
land than it was ever in poland or could

00:31:20,630 --> 00:31:25,430
ever be in java land for example so

00:31:23,930 --> 00:31:28,670
let's see it in action now I'm just

00:31:25,430 --> 00:31:30,920
gonna close my slideshow here if I can

00:31:28,670 --> 00:31:34,150
work out how to do that now

00:31:30,920 --> 00:31:37,430
disconnecting okay I think I've got okay

00:31:34,150 --> 00:31:38,690
and then I'm hoping that you can see my

00:31:37,430 --> 00:31:41,930
screen here yeah that's cool I'm gonna

00:31:38,690 --> 00:31:51,770
make that a little bit bigger I'm gonna

00:31:41,930 --> 00:31:53,690
just go to I'm just living in fear now

00:31:51,770 --> 00:31:55,130
that dark modes gonna gonna kill my

00:31:53,690 --> 00:31:57,920
presentation when I get back to it okay

00:31:55,130 --> 00:32:03,620
everyone turn it off again so this is my

00:31:57,920 --> 00:32:04,460
little summary synopsis for physics unit

00:32:03,620 --> 00:32:06,290
postfix

00:32:04,460 --> 00:32:12,080
so basically when I when I want to write

00:32:06,290 --> 00:32:15,830
with you know you know these kind of

00:32:12,080 --> 00:32:18,010
units within my code here then I'm gonna

00:32:15,830 --> 00:32:21,830
have have a bunch of post post fix

00:32:18,010 --> 00:32:31,000
operators defined in my language let's

00:32:21,830 --> 00:32:31,000
do a new one my equals 17 centimeters

00:32:36,580 --> 00:32:48,050
for toffee excuse me I can find this

00:32:45,320 --> 00:32:49,880
gate key then I'm just gonna run that

00:32:48,050 --> 00:32:55,700
down here in the box below I make that a

00:32:49,880 --> 00:32:58,910
little bigger ones running the apologies

00:32:55,700 --> 00:33:01,550
have yet a slightly different idea of

00:32:58,910 --> 00:33:02,930
speed and perspective here they will

00:33:01,550 --> 00:33:04,280
have some words about performance at the

00:33:02,930 --> 00:33:05,510
end but I think for the kind of use

00:33:04,280 --> 00:33:09,050
cases

00:33:05,510 --> 00:33:10,460
q is very you know very good for you

00:33:09,050 --> 00:33:12,470
know balancing performance against

00:33:10,460 --> 00:33:14,570
capability and functionality here so you

00:33:12,470 --> 00:33:17,180
can see I've got my 17 centimeters down

00:33:14,570 --> 00:33:19,400
here at the bottom I maybe I could do

00:33:17,180 --> 00:33:21,290
something else you know maybe add that

00:33:19,400 --> 00:33:22,370
together I'm not going to do too much

00:33:21,290 --> 00:33:24,110
coding here because I don't want to run

00:33:22,370 --> 00:33:25,580
out of time on the simple stuff I think

00:33:24,110 --> 00:33:27,980
you can see everything working together

00:33:25,580 --> 00:33:29,930
we've got conversions in here as well so

00:33:27,980 --> 00:33:34,810
I'm using use physics measure that

00:33:29,930 --> 00:33:37,610
brings in the the measure object types

00:33:34,810 --> 00:33:40,240
and then I'm using unit postfix

00:33:37,610 --> 00:33:42,200
to bring in that whole set of post fixes

00:33:40,240 --> 00:33:45,710
so one of the things just to mention

00:33:42,200 --> 00:33:48,200
here the way that I do that is I had my

00:33:45,710 --> 00:33:52,370
list of about 17 prefixes and there are

00:33:48,200 --> 00:33:54,380
about seven or eight SI base units so if

00:33:52,370 --> 00:33:58,300
you multiply that out I'm actually

00:33:54,380 --> 00:34:01,190
bringing in something up to 600 ish

00:33:58,300 --> 00:34:02,780
postfix operators into my language

00:34:01,190 --> 00:34:04,340
there's quite a lot of mutation going on

00:34:02,780 --> 00:34:06,140
so I think one of the things I want to

00:34:04,340 --> 00:34:08,750
do going forward it's just make that

00:34:06,140 --> 00:34:12,290
crystal clear of what what Europe what's

00:34:08,750 --> 00:34:13,669
being imported in and give some controls

00:34:12,290 --> 00:34:15,919
over that you know through the labels

00:34:13,669 --> 00:34:18,169
but here it is it works great for great

00:34:15,919 --> 00:34:19,399
for now that's why I'm kind of

00:34:18,169 --> 00:34:21,470
mentioning speed because I think if you

00:34:19,399 --> 00:34:22,879
want to use all 600 it's good odds it's

00:34:21,470 --> 00:34:24,889
gonna be a lot slower than if you're

00:34:22,879 --> 00:34:28,370
just using macroscopic type you know

00:34:24,889 --> 00:34:30,790
base base type measurements you know

00:34:28,370 --> 00:34:33,080
time in time and distance and so forth

00:34:30,790 --> 00:34:37,460
great so hopefully that gives gives an

00:34:33,080 --> 00:34:39,409
idea of the unit postfix in action here

00:34:37,460 --> 00:34:55,159
another one I wanted to share with you

00:34:39,409 --> 00:34:59,920
was excuse me I am striving synopsis you

00:34:55,159 --> 00:35:03,170
know I just want to show you what the

00:34:59,920 --> 00:35:06,400
physics unit unit looks like and the

00:35:03,170 --> 00:35:06,400
kind of flexibility that has

00:35:08,589 --> 00:35:18,029
I run that it'll give us a little bit of

00:35:13,690 --> 00:35:21,130
real output as well so here basically I

00:35:18,029 --> 00:35:23,829
can formally define units I can have

00:35:21,130 --> 00:35:25,630
here FG unit new equals it's a furlong

00:35:23,829 --> 00:35:27,640
per fortnight I can divide defy my own

00:35:25,630 --> 00:35:29,349
unit I've got actually I've got built in

00:35:27,640 --> 00:35:31,859
a furlong and built in a fortnight those

00:35:29,349 --> 00:35:35,769
those are just decisions to put them in

00:35:31,859 --> 00:35:39,069
but you could extend what's in you know

00:35:35,769 --> 00:35:41,469
the base unit module with their own

00:35:39,069 --> 00:35:43,509
definitions and your own expressions and

00:35:41,469 --> 00:35:47,920
give them your own names and so on and

00:35:43,509 --> 00:35:49,479
then here you know I can you know to see

00:35:47,920 --> 00:35:51,609
a little bit of confirm a tour you know

00:35:49,479 --> 00:35:55,299
what did I create because I went running

00:35:51,609 --> 00:35:56,410
through my little synopsis here so I

00:35:55,299 --> 00:35:58,269
hope that gives you an idea and here's

00:35:56,410 --> 00:36:01,650
that pretty printing coming on at the

00:35:58,269 --> 00:36:03,849
bottom also so this is what a unit

00:36:01,650 --> 00:36:06,359
object actually looks like and what's

00:36:03,849 --> 00:36:09,729
inside it so we track the dimensionality

00:36:06,359 --> 00:36:11,259
you know the is a mix in here so it's a

00:36:09,729 --> 00:36:13,630
good production use of the mix

00:36:11,259 --> 00:36:16,779
capability within raku my goodness I

00:36:13,630 --> 00:36:20,309
forgot to put that into the benefits his

00:36:16,779 --> 00:36:23,229
Matt will be hopping mad with me I guess

00:36:20,309 --> 00:36:25,479
fine okay cool I'm so it's so far this

00:36:23,229 --> 00:36:28,029
is just you know standard command line

00:36:25,479 --> 00:36:31,390
stuff something else I've been working

00:36:28,029 --> 00:36:33,460
with if I can find my right window here

00:36:31,390 --> 00:36:38,140
ice over here just kind of bring it in

00:36:33,460 --> 00:36:40,690
is something called you may well know

00:36:38,140 --> 00:36:48,069
there's something called Jupiter so

00:36:40,690 --> 00:36:51,969
Jupiter is comes out of the Python world

00:36:48,069 --> 00:36:56,200
dare I stay but I really like it I think

00:36:51,969 --> 00:36:58,029
it's a great tool for helping let me see

00:36:56,200 --> 00:37:01,059
amateurs get access to compute

00:36:58,029 --> 00:37:02,650
capabilities with you know with very

00:37:01,059 --> 00:37:04,180
little knowledge about setting up all

00:37:02,650 --> 00:37:06,549
that command line stuff and so on

00:37:04,180 --> 00:37:10,569
so this is so rather than go through my

00:37:06,549 --> 00:37:11,829
my synopsis for physics measure on the

00:37:10,569 --> 00:37:13,150
command line could have done that I

00:37:11,829 --> 00:37:15,789
thought I'd just break it down and show

00:37:13,150 --> 00:37:17,529
you it in action here within Jupiter so

00:37:15,789 --> 00:37:21,130
dupa turf just a little bit of a guided

00:37:17,529 --> 00:37:22,270
tour here comes in these cells and then

00:37:21,130 --> 00:37:24,100
it's actually a

00:37:22,270 --> 00:37:25,780
groaning so some great work from and

00:37:24,100 --> 00:37:30,520
just going to probably credit the wrong

00:37:25,780 --> 00:37:34,300
Brian Duggan to produce the raku Colonel

00:37:30,520 --> 00:37:35,950
for Jupiter what a fantastic project

00:37:34,300 --> 00:37:37,420
that is and I love it and it's gonna be

00:37:35,950 --> 00:37:39,490
really helpful for me and my work going

00:37:37,420 --> 00:37:42,180
forward so I can go into a cell here

00:37:39,490 --> 00:37:46,420
this is so number one I can run the cell

00:37:42,180 --> 00:37:48,790
and then that's gonna so what I'm doing

00:37:46,420 --> 00:37:51,760
here is you see I'm now bringing in that

00:37:48,790 --> 00:37:54,120
Libra operator so I could can define you

00:37:51,760 --> 00:37:59,160
know units and objects in a formal way

00:37:54,120 --> 00:37:59,160
within physics unit and physics measure

00:38:00,570 --> 00:38:09,340
just got a lot of things running here so

00:38:02,860 --> 00:38:13,870
it might be a little sluggish tell you

00:38:09,340 --> 00:38:19,360
what I'm gonna do is I'm just gonna see

00:38:13,870 --> 00:38:20,770
if I can run through here okay let's not

00:38:19,360 --> 00:38:22,810
worry too much about that I'm sure you

00:38:20,770 --> 00:38:25,930
trust me that these these answers that I

00:38:22,810 --> 00:38:28,110
have in parentheses here really do

00:38:25,930 --> 00:38:30,750
happen you know and they're happening in

00:38:28,110 --> 00:38:33,190
on a reasonably powerful machine

00:38:30,750 --> 00:38:37,120
everything happens within a couple of

00:38:33,190 --> 00:38:38,320
seconds so yeah so you can so this

00:38:37,120 --> 00:38:41,290
synopsis kind of works through the

00:38:38,320 --> 00:38:45,730
things we spoke about here's some

00:38:41,290 --> 00:38:47,980
examples of you know a date time instant

00:38:45,730 --> 00:38:49,450
within raku and then a duration being a

00:38:47,980 --> 00:38:52,450
difference of two incidents and

00:38:49,450 --> 00:38:55,930
assigning that to time then I can just

00:38:52,450 --> 00:38:57,940
have natural terminology time my time is

00:38:55,930 --> 00:39:03,040
two hours if I'm applying physics unit

00:38:57,940 --> 00:39:06,670
and the Libra operator yeah I think we

00:39:03,040 --> 00:39:08,920
covered most of these so far and there's

00:39:06,670 --> 00:39:10,840
lots of different comparison operators

00:39:08,920 --> 00:39:12,910
also that you can you know you can

00:39:10,840 --> 00:39:15,580
benefit from so what I showed was the

00:39:12,910 --> 00:39:17,470
kind of the the obvious one which is

00:39:15,580 --> 00:39:19,180
things are superficially different but

00:39:17,470 --> 00:39:21,340
physics unit knows they're really the

00:39:19,180 --> 00:39:24,130
same under the hood but you can get to

00:39:21,340 --> 00:39:25,900
super numeric comparisons and unit

00:39:24,130 --> 00:39:28,120
comparisons with the string comparators

00:39:25,900 --> 00:39:31,630
or the numeric compact comparators as

00:39:28,120 --> 00:39:34,270
you would naturally expect so let's see

00:39:31,630 --> 00:39:36,809
what else I've got in my bag of tricks

00:39:34,270 --> 00:39:41,639
here on Jupiter

00:39:36,809 --> 00:39:45,119
there I wanted to start using my physics

00:39:41,639 --> 00:39:46,649
unit module as one of my users words so

00:39:45,119 --> 00:39:48,659
I could really get to grips with does it

00:39:46,649 --> 00:39:52,319
do good stuff you know is it really

00:39:48,659 --> 00:39:54,569
useful in the real world so I've got

00:39:52,319 --> 00:39:56,419
another notebook in here called wrecked

00:39:54,569 --> 00:39:58,409
math that's short for rectangular math

00:39:56,419 --> 00:39:59,939
so I'm bringing in a couple of new

00:39:58,409 --> 00:40:02,939
concepts here first thing I'm bringing

00:39:59,939 --> 00:40:05,939
in is there's a library called math

00:40:02,939 --> 00:40:09,989
polygons something that I created it's a

00:40:05,939 --> 00:40:13,139
simple module and it basically takes the

00:40:09,989 --> 00:40:16,199
SVG polygons library that's already

00:40:13,139 --> 00:40:18,749
exists and it and it wrappers on that to

00:40:16,199 --> 00:40:21,269
give us some polygons with mathematical

00:40:18,749 --> 00:40:24,989
properties and I'm going to use physics

00:40:21,269 --> 00:40:29,189
physics measure as well so so now I've

00:40:24,989 --> 00:40:30,959
got my math polygons in the in my code

00:40:29,189 --> 00:40:32,789
here I'm just going to do a little bit

00:40:30,959 --> 00:40:35,909
of tweaking so I'm gonna have my I'm

00:40:32,789 --> 00:40:38,929
going to basically localize my M drawing

00:40:35,909 --> 00:40:43,409
my measure drawing is polygon drawing

00:40:38,929 --> 00:40:45,719
but I just inherited and overrode some

00:40:43,409 --> 00:40:47,609
of the some of the attributes of methods

00:40:45,719 --> 00:40:49,979
in here so I want to have actually my

00:40:47,609 --> 00:40:51,929
scale be a real unit like my scale of my

00:40:49,979 --> 00:40:54,769
my drawing to be meters this motors

00:40:51,929 --> 00:40:57,179
gonna give us an SVG drawing in a second

00:40:54,769 --> 00:41:00,059
then I've got my end point so my end

00:40:57,179 --> 00:41:03,599
points is just like my my point class

00:41:00,059 --> 00:41:04,079
but it has a length instead of just a

00:41:03,599 --> 00:41:06,269
number

00:41:04,079 --> 00:41:08,819
so I'm bringing my measure type of

00:41:06,269 --> 00:41:14,219
lengths putting it in in mixing it in

00:41:08,819 --> 00:41:16,409
with raku objects and then I'm gonna you

00:41:14,219 --> 00:41:17,880
know have a override the scale method as

00:41:16,409 --> 00:41:21,630
well because I'm gonna do scale things

00:41:17,880 --> 00:41:23,909
back according to you know putting my my

00:41:21,630 --> 00:41:26,399
point into the right units as defined in

00:41:23,909 --> 00:41:28,199
my drawing doing similar thing here for

00:41:26,399 --> 00:41:30,149
my rectangles in my rectangle as you can

00:41:28,199 --> 00:41:32,279
imagine it's good it's got an origin

00:41:30,149 --> 00:41:33,989
it's got a width and a height so there's

00:41:32,279 --> 00:41:36,630
an endpoint and the length and length as

00:41:33,989 --> 00:41:40,259
you would expect so this is a kind of

00:41:36,630 --> 00:41:44,249
kind of objects that I think a scientist

00:41:40,259 --> 00:41:46,559
or you know suddenly studying physics or

00:41:44,249 --> 00:41:47,230
engineering could easily get to grips

00:41:46,559 --> 00:41:49,210
with

00:41:47,230 --> 00:41:51,369
and and play around with and use really

00:41:49,210 --> 00:41:53,910
use object-oriented coding within their

00:41:51,369 --> 00:41:56,410
same discipline within their discipline

00:41:53,910 --> 00:41:59,440
okay now so I'm gonna bring in physics

00:41:56,410 --> 00:42:02,020
major use physics major I'm gonna start

00:41:59,440 --> 00:42:02,530
using using this so I've got my XY with

00:42:02,020 --> 00:42:04,930
height

00:42:02,530 --> 00:42:07,960
you know some origin in meters eye width

00:42:04,930 --> 00:42:12,220
in 120 meters my height is in pieces too

00:42:07,960 --> 00:42:14,530
but my my s which is my side of my

00:42:12,220 --> 00:42:16,900
rectangle is gonna be a hundred feet so

00:42:14,530 --> 00:42:19,000
I can start to mix units together I'm

00:42:16,900 --> 00:42:20,410
gonna declare some some real objects

00:42:19,000 --> 00:42:25,330
I've got a real rectangle in a real

00:42:20,410 --> 00:42:27,400
square and then I can go ahead and get

00:42:25,330 --> 00:42:32,440
some information about my objects you

00:42:27,400 --> 00:42:34,900
know I can use the simple accessor you

00:42:32,440 --> 00:42:37,060
know attribute accesses to simply print

00:42:34,900 --> 00:42:39,250
out some stuff about them and then I can

00:42:37,060 --> 00:42:41,470
go ahead and draw my drawing I've got my

00:42:39,250 --> 00:42:43,770
rectangle on my square here so it's not

00:42:41,470 --> 00:42:46,690
quite true diamond three-dimensional

00:42:43,770 --> 00:42:48,820
movie style you know rendering right now

00:42:46,690 --> 00:42:51,880
but it's actually allowing in a

00:42:48,820 --> 00:42:56,140
classroom setting for example you know a

00:42:51,880 --> 00:42:57,480
write-up session to really mix real

00:42:56,140 --> 00:43:01,060
world

00:42:57,480 --> 00:43:04,119
metrics and measures world units in with

00:43:01,060 --> 00:43:06,340
graphics in and with objects I feel

00:43:04,119 --> 00:43:10,090
pretty pleased about that and as you

00:43:06,340 --> 00:43:13,090
might expect I've got another example of

00:43:10,090 --> 00:43:16,750
that so I get four triangles as well try

00:43:13,090 --> 00:43:19,210
triangles is a little bit more intricate

00:43:16,750 --> 00:43:23,800
okay what I've got here is a triangle

00:43:19,210 --> 00:43:26,980
with my M triangle is an M polygon has

00:43:23,800 --> 00:43:28,869
three sides obviously now has an apex

00:43:26,980 --> 00:43:31,470
point and has a certain length of side

00:43:28,869 --> 00:43:33,640
so this is actually specified here my

00:43:31,470 --> 00:43:37,030
maricopa here but is actually an

00:43:33,640 --> 00:43:39,220
equilateral triangle and one of the

00:43:37,030 --> 00:43:40,750
you'll notice before I had the method

00:43:39,220 --> 00:43:42,250
area for my right time on my square

00:43:40,750 --> 00:43:45,460
that's that easy but we have to do a

00:43:42,250 --> 00:43:48,340
little bit more measure math to take

00:43:45,460 --> 00:43:51,190
that apex calculate the height of the

00:43:48,340 --> 00:43:53,859
triangle from the side and then and then

00:43:51,190 --> 00:43:56,020
do this measure math so that was you

00:43:53,859 --> 00:43:59,050
needed to get my little area calculation

00:43:56,020 --> 00:44:00,270
here then I can make one and I can give

00:43:59,050 --> 00:44:03,160
myself you know I can actually

00:44:00,270 --> 00:44:06,460
calculate the area right here in a

00:44:03,160 --> 00:44:09,730
really friendly way and now to draw them

00:44:06,460 --> 00:44:11,020
said here's my triangle object yeah so

00:44:09,730 --> 00:44:13,080
what this started me thinking that

00:44:11,020 --> 00:44:16,000
there's a whole set of math type

00:44:13,080 --> 00:44:21,240
operations around science cosines

00:44:16,000 --> 00:44:24,580
triangle identities you know

00:44:21,240 --> 00:44:26,710
Pythagoras different types of triangles

00:44:24,580 --> 00:44:28,360
and you know the relationships that the

00:44:26,710 --> 00:44:30,430
angles of a triangle the sides of a

00:44:28,360 --> 00:44:31,660
trial so don't forget within my measure

00:44:30,430 --> 00:44:34,000
physics measure

00:44:31,660 --> 00:44:36,340
I support angles like radians and

00:44:34,000 --> 00:44:38,230
degrees degrees minutes and seconds

00:44:36,340 --> 00:44:40,680
in fact so that's something that's

00:44:38,230 --> 00:44:44,890
another area for it for elaboration here

00:44:40,680 --> 00:44:46,630
also really really you know fascinating

00:44:44,890 --> 00:44:50,050
stuff what you can do when you get get

00:44:46,630 --> 00:44:51,610
these tools in front of you so great so

00:44:50,050 --> 00:44:55,360
that that's basically all of that you

00:44:51,610 --> 00:44:58,270
get out of the box with with the by

00:44:55,360 --> 00:45:00,730
installing with Zeff I wanted to just

00:44:58,270 --> 00:45:03,670
give a little bit more a little bit more

00:45:00,730 --> 00:45:05,800
fun here today just as we wrap up the

00:45:03,670 --> 00:45:07,930
Frog to do that so I mentioned Brian

00:45:05,800 --> 00:45:12,550
diamond for the dude to work also JJ for

00:45:07,930 --> 00:45:14,830
the the great work he did on math math

00:45:12,550 --> 00:45:16,690
constants so here am I

00:45:14,830 --> 00:45:19,900
you know I'm using physics constant

00:45:16,690 --> 00:45:22,510
knows that math itself it and we use

00:45:19,900 --> 00:45:24,340
math constant and then you know this is

00:45:22,510 --> 00:45:26,860
the kind of thing that I can do with

00:45:24,340 --> 00:45:28,720
constant serve God Faraday's constant

00:45:26,860 --> 00:45:31,800
fine structure they'll have a long name

00:45:28,720 --> 00:45:35,140
which is JJ's definition and also a

00:45:31,800 --> 00:45:37,270
often they have a Unicode kind of

00:45:35,140 --> 00:45:39,340
shortcut name or C is not unique Obus

00:45:37,270 --> 00:45:41,260
short name again it's all the same names

00:45:39,340 --> 00:45:44,530
that JJ had I'm just layering in whether

00:45:41,260 --> 00:45:46,810
that be dimensionless or if it's

00:45:44,530 --> 00:45:52,780
permittivity I guess this is Henry's per

00:45:46,810 --> 00:45:54,340
meter you see and this is these are all

00:45:52,780 --> 00:45:56,470
the physics constants that are built up

00:45:54,340 --> 00:46:00,970
an out of the box just ready to use and

00:45:56,470 --> 00:46:03,390
all the shortcuts right let me go back

00:46:00,970 --> 00:46:03,390
to my

00:46:05,220 --> 00:46:12,369
yeah yeah I want to go back so the thing

00:46:10,390 --> 00:46:15,099
I mentioned earlier I ended up rewriting

00:46:12,369 --> 00:46:22,079
my first attempt took me about a year

00:46:15,099 --> 00:46:25,060
and I wrote but one of the things that

00:46:22,079 --> 00:46:27,040
rose that made me rise that challenge I

00:46:25,060 --> 00:46:28,810
thought I know I want to do you know

00:46:27,040 --> 00:46:31,329
there might be some situations where you

00:46:28,810 --> 00:46:33,520
let's say high school students they they

00:46:31,329 --> 00:46:35,950
want to do calculations on volume of

00:46:33,520 --> 00:46:38,319
quantity of liquids so liters sure we

00:46:35,950 --> 00:46:41,230
have that that's a kind of a pseudo SI

00:46:38,319 --> 00:46:42,760
unit but what about you know old

00:46:41,230 --> 00:46:44,109
fashioned units but at the rise that I

00:46:42,760 --> 00:46:47,230
was a kid I started thinking about

00:46:44,109 --> 00:46:50,260
barrels and pints and stuff yeah just

00:46:47,230 --> 00:46:51,670
the fur can represent a firkin type I

00:46:50,260 --> 00:46:53,500
don't know if you guys know what a

00:46:51,670 --> 00:46:56,920
firkin is anyway it'll soon find out a

00:46:53,500 --> 00:46:59,619
firkin is you know a barrel contains 36

00:46:56,920 --> 00:47:01,690
gallon and that's four times as much as

00:46:59,619 --> 00:47:04,690
a firkin so fokin is a quarter barrel

00:47:01,690 --> 00:47:06,579
and if you've ever run a real L pub

00:47:04,690 --> 00:47:08,829
which I did in my use you know that you

00:47:06,579 --> 00:47:11,079
can a human being can lift a firkin you

00:47:08,829 --> 00:47:14,380
can't really lift a barrel being very

00:47:11,079 --> 00:47:17,530
strong without having a helper so yes I

00:47:14,380 --> 00:47:20,560
thought so and I could not work out how

00:47:17,530 --> 00:47:22,180
to add in this type with the

00:47:20,560 --> 00:47:23,740
right conversions and stuff in my first

00:47:22,180 --> 00:47:24,220
bit of code I couldn't even maintain it

00:47:23,740 --> 00:47:26,680
myself

00:47:24,220 --> 00:47:28,300
it was too complex I had to simplify it

00:47:26,680 --> 00:47:30,190
and really boil it down and refactor it

00:47:28,300 --> 00:47:33,790
to make it you know much more

00:47:30,190 --> 00:47:37,780
streamlined and maintainable so here you

00:47:33,790 --> 00:47:40,200
know a bit of fun my weekly limit is 14

00:47:37,780 --> 00:47:44,440
alcohol units I would never exceed that

00:47:40,200 --> 00:47:47,800
my firkin is one firkin and my strength

00:47:44,440 --> 00:47:49,930
of beer is 4.4 alcohol by volume ABV is

00:47:47,800 --> 00:47:53,619
a unit of course there's alcohol units

00:47:49,930 --> 00:47:55,839
within physics unit these are very

00:47:53,619 --> 00:47:59,280
important units to many physicists I can

00:47:55,839 --> 00:48:02,349
I can assure you and then I can work out

00:47:59,280 --> 00:48:04,720
my week's supply how many weeks supply

00:48:02,349 --> 00:48:06,819
one firkin will give me my weekly

00:48:04,720 --> 00:48:09,819
internet so one a beer contains

00:48:06,819 --> 00:48:12,940
just just like a 41 litres and that's 13

00:48:09,819 --> 00:48:15,190
weeks supply so there we are a bit of

00:48:12,940 --> 00:48:17,059
fun so you can have fun with physics

00:48:15,190 --> 00:48:20,460
units too

00:48:17,059 --> 00:48:25,380
cool let me go back and see if I can

00:48:20,460 --> 00:48:26,999
remember to turn dark mode off I'm just

00:48:25,380 --> 00:48:30,799
gonna toggle it off because I really

00:48:26,999 --> 00:48:30,799
don't want to mess up my slides

00:48:33,200 --> 00:48:39,480
hopefully that is gonna work and I'm

00:48:36,150 --> 00:48:44,430
gonna show my slides again to do the

00:48:39,480 --> 00:48:46,460
wrap-up here just want to make sure I'm

00:48:44,430 --> 00:49:00,330
not gonna repeat some of these things

00:48:46,460 --> 00:49:01,650
okay I want to be it's not showing on my

00:49:00,330 --> 00:49:02,970
screen yet I'm just gonna give it a

00:49:01,650 --> 00:49:16,500
second I don't know if I've done

00:49:02,970 --> 00:49:21,930
something crazy here oh yeah here it

00:49:16,500 --> 00:49:23,609
comes it's just a lot that kind of

00:49:21,930 --> 00:49:27,619
explains why things are going a little

00:49:23,609 --> 00:49:30,420
slow isn't so many things running on

00:49:27,619 --> 00:49:33,390
this little are very very thin MacBook

00:49:30,420 --> 00:49:37,230
it's doesn't have a lot of processing

00:49:33,390 --> 00:49:45,650
power easy running everything is just

00:49:37,230 --> 00:49:45,650
just bogging down a little bit okay

00:49:47,490 --> 00:49:53,950
so yeah just to sort of run through to

00:49:50,740 --> 00:49:55,750
recap on those various pieces of ragu

00:49:53,950 --> 00:49:58,150
that really helped us out here was

00:49:55,750 --> 00:50:01,090
Unicode it was classes and types of

00:49:58,150 --> 00:50:03,580
doing that type checking and bringing

00:50:01,090 --> 00:50:06,640
that error support infrasound test users

00:50:03,580 --> 00:50:11,590
there's being a good citizen in raku

00:50:06,640 --> 00:50:13,119
overworld and using raku properly was

00:50:11,590 --> 00:50:16,180
about you know overloading those

00:50:13,119 --> 00:50:18,220
operators in a nice transparent way it's

00:50:16,180 --> 00:50:19,690
about getting the full benefit of rats

00:50:18,220 --> 00:50:21,670
that's just that's an awesome feature

00:50:19,690 --> 00:50:23,020
that's great and then finally they

00:50:21,670 --> 00:50:24,550
you've seen how grammars have made this

00:50:23,020 --> 00:50:26,200
all possible and it would it would be a

00:50:24,550 --> 00:50:30,660
lot harder heavier lifting without

00:50:26,200 --> 00:50:33,400
grammars and of course sets mixes and

00:50:30,660 --> 00:50:35,950
are the great stuff in the back in the

00:50:33,400 --> 00:50:37,180
kit bag so please I would strongly

00:50:35,950 --> 00:50:40,450
encourage you to go ahead and play with

00:50:37,180 --> 00:50:41,830
this I'm not sure whether vanilla is f

00:50:40,450 --> 00:50:43,240
install physics major is going to get

00:50:41,830 --> 00:50:45,520
you the very latest version I just

00:50:43,240 --> 00:50:48,190
released that in the last 24 hours

00:50:45,520 --> 00:50:52,090
so I recommend you use F install you

00:50:48,190 --> 00:50:56,200
know my github URL and I also recommend

00:50:52,090 --> 00:50:57,910
you do that with a verbose it take just

00:50:56,200 --> 00:51:00,460
takes a little bit of what what a time

00:50:57,910 --> 00:51:03,460
for first pass compiled on this so I I

00:51:00,460 --> 00:51:06,850
did have to do a little bit of basically

00:51:03,460 --> 00:51:09,340
object building and caching so I'm

00:51:06,850 --> 00:51:12,400
basically using the benefit of the pre

00:51:09,340 --> 00:51:13,780
comp to make sure you have you know sub

00:51:12,400 --> 00:51:15,190
second performance for all the

00:51:13,780 --> 00:51:18,640
calculations you might want to do in the

00:51:15,190 --> 00:51:20,260
real world so but the cost of that is it

00:51:18,640 --> 00:51:22,359
takes five or six minutes just to

00:51:20,260 --> 00:51:23,470
install and do first pass so if you use

00:51:22,359 --> 00:51:26,100
a verbose you can see this stuff

00:51:23,470 --> 00:51:28,840
actually going on for most at that time

00:51:26,100 --> 00:51:30,970
things you get you know you get a really

00:51:28,840 --> 00:51:32,920
comprehensive set of units of measures

00:51:30,970 --> 00:51:36,070
close types that smoothly extend rikuo

00:51:32,920 --> 00:51:38,560
you get no loss of fidelity with

00:51:36,070 --> 00:51:41,200
round-trip conversions

00:51:38,560 --> 00:51:43,090
you've got Unicode very naturally

00:51:41,200 --> 00:51:46,119
throughout got that postfix notation

00:51:43,090 --> 00:51:50,140
very convenient grammar notation for

00:51:46,119 --> 00:51:52,840
composing more complex you know unit

00:51:50,140 --> 00:51:55,000
strings out of base SI units and you've

00:51:52,840 --> 00:51:57,220
got the whole world of si us and

00:51:55,000 --> 00:51:59,760
imperial units you can you can use for

00:51:57,220 --> 00:51:59,760
conversions

00:51:59,970 --> 00:52:03,720
what next so I mentioned about you know

00:52:02,250 --> 00:52:05,340
a little bit more fine-grained control

00:52:03,720 --> 00:52:07,680
over what you import where you have we

00:52:05,340 --> 00:52:10,650
use unit postfix I'd like to add in

00:52:07,680 --> 00:52:13,280
errors relative and absolute those were

00:52:10,650 --> 00:52:16,560
shot by is motive notes that manually

00:52:13,280 --> 00:52:18,840
refine my output in Petter jewels I

00:52:16,560 --> 00:52:20,190
think it was or attitude jewels for some

00:52:18,840 --> 00:52:22,350
of these calculations I'd like to

00:52:20,190 --> 00:52:23,970
automatically use have a setting to let

00:52:22,350 --> 00:52:26,970
you automatically normalize with the

00:52:23,970 --> 00:52:28,860
right prefix so you don't have to kind

00:52:26,970 --> 00:52:31,230
of kind of guess and then get it right

00:52:28,860 --> 00:52:33,660
and fine-tune love to be able to

00:52:31,230 --> 00:52:36,330
integrate with other modules so so speed

00:52:33,660 --> 00:52:37,950
for example is you know in physics it's

00:52:36,330 --> 00:52:42,450
a scalar you know velocity is a vector

00:52:37,950 --> 00:52:45,060
so it has a unit value and it has the

00:52:42,450 --> 00:52:47,190
direction so we need to somehow find a

00:52:45,060 --> 00:52:50,280
way to use math matrix to make that kind

00:52:47,190 --> 00:52:52,170
of thing work performance yep I think

00:52:50,280 --> 00:52:54,600
it's it's good enough I had to do quite

00:52:52,170 --> 00:52:57,540
a lot of work to tune physics unit

00:52:54,600 --> 00:53:00,740
physics measure I would just kill for

00:52:57,540 --> 00:53:03,600
macros I hope somebody's working on that

00:53:00,740 --> 00:53:06,000
it would I'm not sure make things faster

00:53:03,600 --> 00:53:09,120
but I basically have to self generate

00:53:06,000 --> 00:53:11,520
you know 600 something units for that

00:53:09,120 --> 00:53:15,020
first compile pass and they're almost my

00:53:11,520 --> 00:53:15,020
source code and that just a lot of

00:53:15,200 --> 00:53:20,070
maintainable tenability issues that I

00:53:17,760 --> 00:53:21,780
want to avoid in the future and then for

00:53:20,070 --> 00:53:23,370
me it's about doing more you know used

00:53:21,780 --> 00:53:26,760
to to get it out there do a lot more

00:53:23,370 --> 00:53:28,680
physics textbook type examples and start

00:53:26,760 --> 00:53:32,220
to see if we see so we can stir an

00:53:28,680 --> 00:53:34,590
interest with a scientific buddies

00:53:32,220 --> 00:53:36,090
I knew it perhaps reach out to National

00:53:34,590 --> 00:53:38,460
Physics Laboratory and the other people

00:53:36,090 --> 00:53:41,370
too owners of the standards and see if

00:53:38,460 --> 00:53:44,670
they can get some fun out of using using

00:53:41,370 --> 00:53:47,360
raku in their worlds so thank you very

00:53:44,670 --> 00:53:49,830
much indeed for your time and attention

00:53:47,360 --> 00:53:52,980
we've got a few minutes left I think

00:53:49,830 --> 00:53:54,510
I'll defer to Todd in terms of you know

00:53:52,980 --> 00:53:56,970
how much time he wants to allocate for

00:53:54,510 --> 00:53:59,760
switching your actually ever I'm over

00:53:56,970 --> 00:54:01,740
time excuse me then thank you very much

00:53:59,760 --> 00:54:05,330
everybody for your attention here and

00:54:01,740 --> 00:54:10,560
your interest today just drop me a line

00:54:05,330 --> 00:54:11,790
p6 Steve calm and take a look at any of

00:54:10,560 --> 00:54:15,690
these these

00:54:11,790 --> 00:54:18,900
github you know places to give you these

00:54:15,690 --> 00:54:20,460
github repositories for more information

00:54:18,900 --> 00:54:22,440
where you can raise issues and questions

00:54:20,460 --> 00:54:26,960
and so forth

00:54:22,440 --> 00:54:26,960

YouTube URL: https://www.youtube.com/watch?v=OaWLTddTNzc


