Title: Theo van Hoesel - System Observability and Distributed Tracing
Publication date: 2020-06-26
Playlist: TPC 2020 in the Cloud
Description: 
	OpenTracing
Knowing
Is your system slow, or only under certain circumstances or with specific request? OpenTracing and ‘Distributed Tracing’ may be helpful to understand what is going on.

Join this presentation for 50 minutes and quickly gain back zillions of nanoseconds!

Introduction to OpenTracing
From the OpenTracing.IO website:

Distributed tracing, also called distributed request tracing, is a method used to profile and monitor applications, especially those built using a microservices architecture. Distributed tracing helps pinpoint where failures occur and what causes poor performance.

OpenTracing is comprised of an API specification, frameworks and libraries that have implemented the specification, and documentation for the project. OpenTracing allows developers to add instrumentation to their application code using APIs that do not lock them into any one particular product or vendor.

Perl5 and OpenTracing
With an increasing number of Framework Plugins and Integrations, it becomes more and more easy for Application Developers to add instrumentation to an existing (web) application.

These Plugins only have a limited responsibility: to bootstrap a OpenTracing compliant Implementation.

Integrations, on the one hand, need to be capable to extract (implementation specific) tracer information from in incoming request, or, on the other hand, inject that information into an outgoing request to a (micro) service and other sub-systems.

Being ‘open’ or agnostic about third party tracing software services, also means that for each of those there needs to be a specific Implementation.

Some Integration solutions are readily available, others will require more development.

The OpenTracing Perl5 SDK
To make your task as a developer more easy, there are various tools available, most important the OpenTracing Interface POD. And as long as you keep your development stick to those API specifications, life is good. But there are Types and Test to help building compliant Integrations and Implementations.

PR’s are welcome!
Captions: 
	00:00:02,000 --> 00:00:05,839
or in other words

00:00:03,199 --> 00:00:07,200
welcome everybody to the first talk of

00:00:05,839 --> 00:00:09,760
friday morning

00:00:07,200 --> 00:00:12,400
uh theo will be talking about system

00:00:09,760 --> 00:00:15,440
observability and distributed tracing

00:00:12,400 --> 00:00:19,359
welcome theo hey guys

00:00:15,440 --> 00:00:21,119
um i'm trying to do my best here

00:00:19,359 --> 00:00:22,560
uh doing something nice oh you shouldn't

00:00:21,119 --> 00:00:26,160
see that isn't it all right

00:00:22,560 --> 00:00:28,160
good um

00:00:26,160 --> 00:00:30,720
i hope this is all right that you're

00:00:28,160 --> 00:00:34,079
seeing the right screen with this tiny

00:00:30,720 --> 00:00:37,200
perceptix logo at the bottom yep

00:00:34,079 --> 00:00:40,800
awesome good morning for

00:00:37,200 --> 00:00:44,000
most of you in the us good

00:00:40,800 --> 00:00:47,360
afternoon for those in europe and

00:00:44,000 --> 00:00:49,920
welcome to this talk um

00:00:47,360 --> 00:00:50,399
i'm very excited about this i'm also

00:00:49,920 --> 00:00:54,399
very

00:00:50,399 --> 00:00:58,879
nervous this is the least prepared

00:00:54,399 --> 00:01:02,079
talk i ever gave so be ready for

00:00:58,879 --> 00:01:05,440
some half big things

00:01:02,079 --> 00:01:05,440
and um

00:01:06,000 --> 00:01:10,000
having said so let's start working on

00:01:08,720 --> 00:01:13,040
this

00:01:10,000 --> 00:01:15,759
so this talk is about instrumentation

00:01:13,040 --> 00:01:16,400
and what you can do with open tracing

00:01:15,759 --> 00:01:20,159
and

00:01:16,400 --> 00:01:24,240
data doc um

00:01:20,159 --> 00:01:27,360
so how did it start um

00:01:24,240 --> 00:01:31,200
it started with a guy from our company

00:01:27,360 --> 00:01:35,119
andres that said oh um

00:01:31,200 --> 00:01:36,720
theo um can you make a change to our

00:01:35,119 --> 00:01:39,600
menu framework so we can get

00:01:36,720 --> 00:01:41,119
instrumentation into datadock

00:01:39,600 --> 00:01:43,360
and of course what is your first

00:01:41,119 --> 00:01:46,560
response

00:01:43,360 --> 00:01:46,560
sure i can do that

00:01:47,119 --> 00:01:51,280
yeah data doc i'm not sure if you know

00:01:50,399 --> 00:01:55,040
what data dog

00:01:51,280 --> 00:01:59,439
is and what it looks like data dock is

00:01:55,040 --> 00:02:01,600
pretty much a surface

00:01:59,439 --> 00:02:03,360
not a cheap service but a very good

00:02:01,600 --> 00:02:07,119
service that gives you

00:02:03,360 --> 00:02:09,520
all these nice graphs

00:02:07,119 --> 00:02:10,479
and all these nice metrics about what

00:02:09,520 --> 00:02:13,680
your server

00:02:10,479 --> 00:02:17,280
is doing i think this is awesome

00:02:13,680 --> 00:02:20,400
if you are one of those sys admins that

00:02:17,280 --> 00:02:23,440
try to figure out why your system

00:02:20,400 --> 00:02:24,640
is doing what it is doing or what it's

00:02:23,440 --> 00:02:27,920
not doing

00:02:24,640 --> 00:02:30,319
what it's supposed to do and it has all

00:02:27,920 --> 00:02:31,120
these nice dashboards where you can look

00:02:30,319 --> 00:02:33,120
at

00:02:31,120 --> 00:02:36,160
it will tell you how many people are

00:02:33,120 --> 00:02:39,920
visiting your website

00:02:36,160 --> 00:02:42,560
so the thing is that we're going to make

00:02:39,920 --> 00:02:42,560
some kind of

00:02:43,040 --> 00:02:46,239
instrumentation to this where you can

00:02:44,959 --> 00:02:49,360
actually see

00:02:46,239 --> 00:02:50,319
what the code is doing and maybe a lot

00:02:49,360 --> 00:02:52,879
of you know

00:02:50,319 --> 00:02:52,879
a lot about

00:02:54,319 --> 00:03:01,200
nyt profiling it will tell you

00:02:58,159 --> 00:03:01,200
in a very

00:03:01,840 --> 00:03:05,360
protected way what your application is

00:03:04,800 --> 00:03:08,319
doing

00:03:05,360 --> 00:03:08,959
how long subroutines will take but you

00:03:08,319 --> 00:03:12,959
usually

00:03:08,959 --> 00:03:14,400
don't do that in production because nyt

00:03:12,959 --> 00:03:16,720
prof

00:03:14,400 --> 00:03:19,840
that profiler is taking a lot of time

00:03:16,720 --> 00:03:19,840
it's an amazing tool

00:03:20,159 --> 00:03:23,760
but don't run it in production so there

00:03:23,040 --> 00:03:27,680
we go

00:03:23,760 --> 00:03:31,360
first trial try catch no catch in this

00:03:27,680 --> 00:03:33,280
case i started working on it and started

00:03:31,360 --> 00:03:35,360
looking everybody should do that

00:03:33,280 --> 00:03:36,400
so you go to the cpan the not so

00:03:35,360 --> 00:03:39,599
comprehensive

00:03:36,400 --> 00:03:43,760
pro archive there is stuff

00:03:39,599 --> 00:03:46,879
about datadock and

00:03:43,760 --> 00:03:48,239
uh what else is there um i was thinking

00:03:46,879 --> 00:03:51,920
you know maybe i can use

00:03:48,239 --> 00:03:55,760
luck for pearl and send datadog stuff

00:03:51,920 --> 00:03:56,000
to their back end and i started writing

00:03:55,760 --> 00:03:58,959
an

00:03:56,000 --> 00:04:01,840
appender for http it didn't exist but

00:03:58,959 --> 00:04:01,840
it's a useful thing

00:04:02,799 --> 00:04:08,640
another cool feature would be json

00:04:05,680 --> 00:04:11,599
formatter for datadock

00:04:08,640 --> 00:04:13,280
i started playing with database dbix

00:04:11,599 --> 00:04:15,200
query log

00:04:13,280 --> 00:04:17,600
very nice and then i was thinking you

00:04:15,200 --> 00:04:20,400
know what maybe i can extend that

00:04:17,600 --> 00:04:21,680
and start writing stuff that will then

00:04:20,400 --> 00:04:26,080
send this off to

00:04:21,680 --> 00:04:26,080
data docs somehow

00:04:26,240 --> 00:04:29,680
because we were pretty much interested

00:04:28,560 --> 00:04:31,759
in

00:04:29,680 --> 00:04:32,960
what was happening with our database not

00:04:31,759 --> 00:04:36,080
so much in the code

00:04:32,960 --> 00:04:38,080
it was just why are our queries taking

00:04:36,080 --> 00:04:39,440
so long which queries by the way are

00:04:38,080 --> 00:04:41,520
taking so long

00:04:39,440 --> 00:04:42,720
and we didn't know our application is

00:04:41,520 --> 00:04:47,280
one big

00:04:42,720 --> 00:04:50,960
black magic box sorry to say so

00:04:47,280 --> 00:04:54,400
did it be higher by the way anyway um

00:04:50,960 --> 00:04:57,919
so all nice modules

00:04:54,400 --> 00:04:59,840
and you can start working on it and

00:04:57,919 --> 00:05:01,440
i started getting headaches and theo

00:04:59,840 --> 00:05:05,199
this is not going to work

00:05:01,440 --> 00:05:08,240
this starts looking like vendor lock in

00:05:05,199 --> 00:05:10,080
and i don't want vendor lock in i'm not

00:05:08,240 --> 00:05:12,800
sure if any people from datadog

00:05:10,080 --> 00:05:15,280
are watching at this moment but we'd

00:05:12,800 --> 00:05:18,479
like to be in a situation that

00:05:15,280 --> 00:05:22,560
with a single line of

00:05:18,479 --> 00:05:25,759
code change swap the data docs service

00:05:22,560 --> 00:05:28,400
for any of these competitors

00:05:25,759 --> 00:05:31,280
and you start looking for hmm maybe

00:05:28,400 --> 00:05:34,720
there is a way to do it better

00:05:31,280 --> 00:05:36,960
ubers did damien say that last night

00:05:34,720 --> 00:05:38,720
anyways you start looking for it and you

00:05:36,960 --> 00:05:42,240
know what

00:05:38,720 --> 00:05:45,440
try with a catch and

00:05:42,240 --> 00:05:48,880
the catch is here it's open tracing

00:05:45,440 --> 00:05:51,919
open tracing is a marvelous

00:05:48,880 --> 00:05:52,960
thing i say it's the thing actually it's

00:05:51,919 --> 00:05:57,199
just an api

00:05:52,960 --> 00:06:01,919
it's a description of

00:05:57,199 --> 00:06:01,919
how open tracing should work

00:06:02,479 --> 00:06:09,360
what does it do open tracing open

00:06:05,520 --> 00:06:09,919
tracing as they say it's a so-called

00:06:09,360 --> 00:06:13,120
vendor

00:06:09,919 --> 00:06:13,560
neutral set of apis and instrumentation

00:06:13,120 --> 00:06:16,639
for

00:06:13,560 --> 00:06:20,560
distributed tracing

00:06:16,639 --> 00:06:23,440
and it's awesome yes

00:06:20,560 --> 00:06:24,319
use this and there are plenty of

00:06:23,440 --> 00:06:28,400
solutions

00:06:24,319 --> 00:06:32,240
for engine x for new new relic for

00:06:28,400 --> 00:06:37,560
redis for databases for

00:06:32,240 --> 00:06:40,960
yango so yes go to the website of

00:06:37,560 --> 00:06:44,560
opentracing.io and you'll find

00:06:40,960 --> 00:06:44,560
libraries in nine languages

00:06:44,639 --> 00:06:52,720
like these go javascript and you know

00:06:48,319 --> 00:06:52,720
you know what no

00:06:53,840 --> 00:07:01,280
no pearl of course not

00:06:58,080 --> 00:07:05,360
who wants to have shiny tools

00:07:01,280 --> 00:07:11,199
in a legacy environment

00:07:05,360 --> 00:07:11,199
so hmm yeah where do you start

00:07:11,680 --> 00:07:15,599
you start reading ah and you get messed

00:07:13,759 --> 00:07:19,840
up you get more headaches

00:07:15,599 --> 00:07:20,560
lots of headaches so there is a cpan

00:07:19,840 --> 00:07:23,919
module

00:07:20,560 --> 00:07:28,160
on our not so comprehensive pro archive

00:07:23,919 --> 00:07:28,160
called open tracing however

00:07:28,880 --> 00:07:37,199
it's nothing like open tracing

00:07:33,199 --> 00:07:41,199
sorry for the guys from team but

00:07:37,199 --> 00:07:44,240
no because open tracing starts

00:07:41,199 --> 00:07:46,879
with a api

00:07:44,240 --> 00:07:47,440
and why did it start with an api so that

00:07:46,879 --> 00:07:51,039
any

00:07:47,440 --> 00:07:54,879
code in perl

00:07:51,039 --> 00:07:59,840
related to open tracing could

00:07:54,879 --> 00:07:59,840
work with that api

00:08:01,280 --> 00:08:09,360
this is the complete opposite of we have

00:08:05,039 --> 00:08:11,840
with things like log any

00:08:09,360 --> 00:08:13,039
people start thinking oh we can make a

00:08:11,840 --> 00:08:16,080
logger

00:08:13,039 --> 00:08:16,479
and then we get dozens of vloggers in

00:08:16,080 --> 00:08:20,800
our

00:08:16,479 --> 00:08:23,360
not so comprehensive perl archive and

00:08:20,800 --> 00:08:25,280
yeah now it's going to be a nightmare

00:08:23,360 --> 00:08:29,199
how to work with your own modules

00:08:25,280 --> 00:08:32,240
and which of the loggers

00:08:29,199 --> 00:08:35,599
so open tracing is an attempt to do it

00:08:32,240 --> 00:08:37,919
just the other way around write your api

00:08:35,599 --> 00:08:37,919
first

00:08:38,159 --> 00:08:43,680
if you have an api

00:08:41,279 --> 00:08:45,040
then all the modules can work the same

00:08:43,680 --> 00:08:47,440
way

00:08:45,040 --> 00:08:48,399
this open tracing module did not start

00:08:47,440 --> 00:08:51,920
with that api

00:08:48,399 --> 00:08:55,200
and it only works with datadock

00:08:51,920 --> 00:08:58,480
and no sorry

00:08:55,200 --> 00:09:00,720
it only works with yeah it works with

00:08:58,480 --> 00:09:02,959
data anyway

00:09:00,720 --> 00:09:05,760
going from there distributed tracing

00:09:02,959 --> 00:09:09,360
what is distributed tracing about well

00:09:05,760 --> 00:09:11,440
a normal application you will have

00:09:09,360 --> 00:09:14,240
will probably look something like this

00:09:11,440 --> 00:09:17,440
you have a client

00:09:14,240 --> 00:09:20,000
um and you

00:09:17,440 --> 00:09:22,160
may have a load balancer that the

00:09:20,000 --> 00:09:24,080
request goes through and from your load

00:09:22,160 --> 00:09:25,519
balancer the request goes to a web

00:09:24,080 --> 00:09:27,519
server

00:09:25,519 --> 00:09:28,720
that web server is probably using some

00:09:27,519 --> 00:09:32,480
kind of nice web

00:09:28,720 --> 00:09:36,640
framework for example

00:09:32,480 --> 00:09:38,720
a cdi and if you have cgi and many other

00:09:36,640 --> 00:09:42,160
frameworks will have that in general

00:09:38,720 --> 00:09:44,000
you will have a setup phase

00:09:42,160 --> 00:09:45,839
after the setup phase you start doing

00:09:44,000 --> 00:09:48,399
some processing of your work

00:09:45,839 --> 00:09:50,720
inside that work process you may have

00:09:48,399 --> 00:09:54,240
some other tasks doing some work

00:09:50,720 --> 00:09:56,800
more work happening in that process even

00:09:54,240 --> 00:09:57,680
some other things there you may do a

00:09:56,800 --> 00:10:00,000
database

00:09:57,680 --> 00:10:00,000
call

00:10:00,800 --> 00:10:07,279
a lot of small tasks here

00:10:04,160 --> 00:10:10,079
more work in the process maybe you call

00:10:07,279 --> 00:10:13,600
a microservice

00:10:10,079 --> 00:10:16,800
maybe that calls redis and then in the

00:10:13,600 --> 00:10:16,800
end you do a render

00:10:17,120 --> 00:10:25,760
hmm yeah that's quite a lot involved

00:10:21,920 --> 00:10:28,720
um so yeah that's where

00:10:25,760 --> 00:10:29,600
open tracing starts you can start open

00:10:28,720 --> 00:10:32,399
tracing with

00:10:29,600 --> 00:10:33,920
where this client starts working then it

00:10:32,399 --> 00:10:38,399
goes to a load balancer

00:10:33,920 --> 00:10:42,320
and then your application is typically

00:10:38,399 --> 00:10:42,320
responsible for this entire work

00:10:43,200 --> 00:10:47,760
we're at the stage that your web server

00:10:46,240 --> 00:10:50,560
is doing all this work

00:10:47,760 --> 00:10:51,519
and we'd like to do the other things as

00:10:50,560 --> 00:10:53,440
well

00:10:51,519 --> 00:10:54,880
we like to do a database call we like to

00:10:53,440 --> 00:10:57,760
monitor that one

00:10:54,880 --> 00:11:01,600
we like to monitor that micro service as

00:10:57,760 --> 00:11:04,320
well as a kind of micro service i say

00:11:01,600 --> 00:11:05,519
service and all these distributed traces

00:11:04,320 --> 00:11:06,800
that's where you want to follow this

00:11:05,519 --> 00:11:09,279
entire thing

00:11:06,800 --> 00:11:10,560
and if you do it right and this comes

00:11:09,279 --> 00:11:14,160
from datadock

00:11:10,560 --> 00:11:16,399
you will have this nice graph

00:11:14,160 --> 00:11:17,600
with all these flame graphs and this

00:11:16,399 --> 00:11:23,120
would be

00:11:17,600 --> 00:11:23,120
real time data this is not

00:11:23,200 --> 00:11:29,920
nyt prof this gives you

00:11:26,399 --> 00:11:33,040
deep insight in microseconds or actually

00:11:29,920 --> 00:11:36,320
in nanoseconds accuracy

00:11:33,040 --> 00:11:36,320
what your application is doing

00:11:37,279 --> 00:11:46,880
so the api of datadock it has some

00:11:42,720 --> 00:11:49,360
concepts and it's talking about a tracer

00:11:46,880 --> 00:11:50,320
the responsibility of that tracer how

00:11:49,360 --> 00:11:53,519
you want to

00:11:50,320 --> 00:11:55,120
extract information from an income or

00:11:53,519 --> 00:11:58,720
request and how you want to

00:11:55,120 --> 00:12:00,720
inject it into a outgoing microservice

00:11:58,720 --> 00:12:03,120
request

00:12:00,720 --> 00:12:04,320
it wants to do things like start

00:12:03,120 --> 00:12:07,279
activespans those

00:12:04,320 --> 00:12:09,200
tiny pieces of the graph you saw we call

00:12:07,279 --> 00:12:13,120
it a spam

00:12:09,200 --> 00:12:15,360
you can enrich that span with some tags

00:12:13,120 --> 00:12:16,720
maybe some information of how many

00:12:15,360 --> 00:12:19,760
records you're

00:12:16,720 --> 00:12:22,000
processing in this subroutine it can

00:12:19,760 --> 00:12:24,800
have a context

00:12:22,000 --> 00:12:25,360
the context is typically the application

00:12:24,800 --> 00:12:28,720
uh

00:12:25,360 --> 00:12:31,120
has some specific stuff there

00:12:28,720 --> 00:12:32,480
very interesting of a context is a

00:12:31,120 --> 00:12:36,000
so-called bagash

00:12:32,480 --> 00:12:39,519
item which will be carried over from

00:12:36,000 --> 00:12:41,920
every level of your

00:12:39,519 --> 00:12:43,360
call it goes from one span to another

00:12:41,920 --> 00:12:46,480
span to another span

00:12:43,360 --> 00:12:49,120
and it could even go into your next call

00:12:46,480 --> 00:12:51,200
of a microservice can be very handy if

00:12:49,120 --> 00:12:54,959
you're talking about client ids

00:12:51,200 --> 00:12:59,519
you do not need to add that as a tag

00:12:54,959 --> 00:12:59,519
all the time and it speaks of scope

00:13:01,279 --> 00:13:07,680
the api of data doc of open tracing

00:13:04,800 --> 00:13:10,160
is very much relying on things like

00:13:07,680 --> 00:13:10,160
scope

00:13:11,360 --> 00:13:19,360
when does things start when does it end

00:13:14,720 --> 00:13:22,639
and on hindsight maybe the pearl

00:13:19,360 --> 00:13:23,120
version would not need it so all these

00:13:22,639 --> 00:13:26,880
things

00:13:23,120 --> 00:13:28,720
the concept of this api you don't find

00:13:26,880 --> 00:13:32,240
it in the overtracing

00:13:28,720 --> 00:13:34,880
module so

00:13:32,240 --> 00:13:35,519
how to get along with it so i started

00:13:34,880 --> 00:13:38,079
all over

00:13:35,519 --> 00:13:40,079
i started writing the open tracing

00:13:38,079 --> 00:13:43,360
interface

00:13:40,079 --> 00:13:45,440
that is the reference of

00:13:43,360 --> 00:13:47,440
what i would think open tracing for

00:13:45,440 --> 00:13:50,880
pearl implementations

00:13:47,440 --> 00:13:50,880
and anything related to it

00:13:52,800 --> 00:13:57,199
the entire thing i was just talking

00:13:55,040 --> 00:13:59,519
about you can find it in the manual

00:13:57,199 --> 00:14:00,880
it will have instrumentation it will

00:13:59,519 --> 00:14:04,399
have integration

00:14:00,880 --> 00:14:07,600
part for people how to work with

00:14:04,399 --> 00:14:10,639
a framework itself it's

00:14:07,600 --> 00:14:12,000
talking about implementations in case

00:14:10,639 --> 00:14:15,040
like you want to have

00:14:12,000 --> 00:14:17,199
a different thing instead of data doc

00:14:15,040 --> 00:14:18,240
you want to have a new relic version or

00:14:17,199 --> 00:14:21,199
a elastic

00:14:18,240 --> 00:14:22,240
for electric search it's all possible in

00:14:21,199 --> 00:14:26,240
implementation

00:14:22,240 --> 00:14:29,440
it's talking about the entire ecosystem

00:14:26,240 --> 00:14:31,680
so with that

00:14:29,440 --> 00:14:33,519
with the entire specification of open

00:14:31,680 --> 00:14:38,079
tracing

00:14:33,519 --> 00:14:38,079
let's do this try finally

00:14:38,240 --> 00:14:46,320
and i hope we did quite all right

00:14:42,480 --> 00:14:49,920
as i speak um we just did the last

00:14:46,320 --> 00:14:53,519
checks this code is super hot it's

00:14:49,920 --> 00:14:54,399
has been badass alpha status for a long

00:14:53,519 --> 00:14:58,079
time it's now

00:14:54,399 --> 00:15:00,880
better um next week it will be

00:14:58,079 --> 00:15:02,880
full version whatever so you can use it

00:15:00,880 --> 00:15:05,440
yourself

00:15:02,880 --> 00:15:06,959
so like i said the menu was talking

00:15:05,440 --> 00:15:12,079
about instrumentation

00:15:06,959 --> 00:15:16,560
how do you instrument your application

00:15:12,079 --> 00:15:19,680
um so what i would think

00:15:16,560 --> 00:15:22,720
is that you will have a cdi

00:15:19,680 --> 00:15:23,360
in our case things would probably look

00:15:22,720 --> 00:15:25,920
the same for

00:15:23,360 --> 00:15:26,720
dancer or modulation which we haven't

00:15:25,920 --> 00:15:31,199
worked on

00:15:26,720 --> 00:15:34,240
yet so a cdi you just use the cgi

00:15:31,199 --> 00:15:37,600
application plug-in open tracing

00:15:34,240 --> 00:15:42,079
and that's basically it

00:15:37,600 --> 00:15:43,920
i would think and if you use this module

00:15:42,079 --> 00:15:46,079
um at the bottom that's all you need to

00:15:43,920 --> 00:15:46,079
do

00:15:46,160 --> 00:15:50,480
maybe do some customization you want to

00:15:48,399 --> 00:15:51,440
add some customer id in your open

00:15:50,480 --> 00:15:54,880
tracing

00:15:51,440 --> 00:15:58,079
vagas items those will be carried over

00:15:54,880 --> 00:16:00,480
and when you do this you remember this

00:15:58,079 --> 00:16:01,600
stack we had of the entire open tracing

00:16:00,480 --> 00:16:05,920
distribution

00:16:01,600 --> 00:16:09,040
tracing this is taking care of you

00:16:05,920 --> 00:16:12,240
out of the box it will

00:16:09,040 --> 00:16:13,680
create that web framework it will create

00:16:12,240 --> 00:16:16,079
the setup span

00:16:13,680 --> 00:16:17,279
and will trace your timing of your

00:16:16,079 --> 00:16:19,279
process

00:16:17,279 --> 00:16:22,720
and it will take care of the rendering

00:16:19,279 --> 00:16:25,920
and actually even of the tear down

00:16:22,720 --> 00:16:28,959
it's giving a nice shim

00:16:25,920 --> 00:16:29,759
sure as nice shallow layer of your

00:16:28,959 --> 00:16:34,959
framework

00:16:29,759 --> 00:16:38,480
and most of the time if you would have a

00:16:34,959 --> 00:16:38,480
very well designed

00:16:38,959 --> 00:16:42,320
microservice architecture where you have

00:16:41,680 --> 00:16:45,759
just

00:16:42,320 --> 00:16:50,160
a server that gets a request from an

00:16:45,759 --> 00:16:53,199
incoming client it quickly will dispatch

00:16:50,160 --> 00:16:54,399
to all sorts of microservices your

00:16:53,199 --> 00:16:57,680
server itself

00:16:54,399 --> 00:17:00,639
is not doing that much and this will be

00:16:57,680 --> 00:17:00,639
perfectly fine

00:17:02,000 --> 00:17:05,839
you don't need anything

00:17:05,919 --> 00:17:13,120
however our menu framework

00:17:09,919 --> 00:17:16,839
our main application we're using

00:17:13,120 --> 00:17:20,559
with prosceptics is a gigantic

00:17:16,839 --> 00:17:21,520
monolith of thousands and thousands of

00:17:20,559 --> 00:17:24,880
lines and

00:17:21,520 --> 00:17:24,880
hundreds of subroutines

00:17:25,120 --> 00:17:32,480
tons of subclasses with

00:17:28,799 --> 00:17:34,640
dozens of subroutines inside them again

00:17:32,480 --> 00:17:37,200
that's not helpful it's not giving the

00:17:34,640 --> 00:17:40,240
information you want to have

00:17:37,200 --> 00:17:43,360
so instead of just

00:17:40,240 --> 00:17:45,120
this shallow layer of our framework we

00:17:43,360 --> 00:17:48,960
want to go on

00:17:45,120 --> 00:17:52,400
so say you have a nice shop routine

00:17:48,960 --> 00:17:52,799
with some interesting work and you want

00:17:52,400 --> 00:17:55,919
to

00:17:52,799 --> 00:18:00,240
trace the duration

00:17:55,919 --> 00:18:03,919
and anything else of this subroutine

00:18:00,240 --> 00:18:06,400
how will you do that well okay

00:18:03,919 --> 00:18:07,840
let's expand this a little bit it needs

00:18:06,400 --> 00:18:10,799
some room for

00:18:07,840 --> 00:18:13,440
some code and add some code into it it's

00:18:10,799 --> 00:18:17,120
a lot of boilerplate it's like

00:18:13,440 --> 00:18:19,679
your interesting subroutine you need a

00:18:17,120 --> 00:18:22,080
tracer you will get that from the get

00:18:19,679 --> 00:18:24,559
global tracer

00:18:22,080 --> 00:18:25,200
and then you will have your open tracing

00:18:24,559 --> 00:18:28,240
start a

00:18:25,200 --> 00:18:29,520
active span with a nice name of

00:18:28,240 --> 00:18:32,240
interesting work

00:18:29,520 --> 00:18:33,840
add some options and return that and

00:18:32,240 --> 00:18:37,280
save that in your

00:18:33,840 --> 00:18:38,559
scope variable then you do some work

00:18:37,280 --> 00:18:41,440
inside your subroutine

00:18:38,559 --> 00:18:43,120
and at the end you call close on that

00:18:41,440 --> 00:18:45,840
scope

00:18:43,120 --> 00:18:45,840
and you'll be done

00:18:48,320 --> 00:18:56,880
and some of you will see a problem here

00:18:52,559 --> 00:19:00,160
what if you would want to return early

00:18:56,880 --> 00:19:03,440
do i need to put in that ot scope close

00:19:00,160 --> 00:19:06,720
all over the place yes

00:19:03,440 --> 00:19:07,600
you need to close that scope that's part

00:19:06,720 --> 00:19:09,440
of your api

00:19:07,600 --> 00:19:12,880
it will actually complain when you do

00:19:09,440 --> 00:19:12,880
not close it yourself

00:19:12,960 --> 00:19:19,760
but us being pearl developers

00:19:16,320 --> 00:19:22,080
in fact we can do better we can do much

00:19:19,760 --> 00:19:22,080
better

00:19:22,840 --> 00:19:28,960
so let's have a talk about

00:19:25,440 --> 00:19:31,679
open tracing autoscope

00:19:28,960 --> 00:19:33,520
you may remember this piece of code we

00:19:31,679 --> 00:19:37,200
just had with all our

00:19:33,520 --> 00:19:41,039
manual work in there and well

00:19:37,200 --> 00:19:43,200
actually a lot of boilerplate here

00:19:41,039 --> 00:19:44,640
it's annoying it's like ah that's way

00:19:43,200 --> 00:19:47,840
too much work

00:19:44,640 --> 00:19:50,160
what about if you can just use this use

00:19:47,840 --> 00:19:53,520
the open tracing autoscope module in

00:19:50,160 --> 00:19:56,880
your package this was your subroutine

00:19:53,520 --> 00:19:57,440
and this is what's left just one simple

00:19:56,880 --> 00:20:00,480
call

00:19:57,440 --> 00:20:02,720
open tracing autoscope start guarded

00:20:00,480 --> 00:20:05,679
spam

00:20:02,720 --> 00:20:08,000
it will do all the magic for you it will

00:20:05,679 --> 00:20:10,400
take the name of your soccer team

00:20:08,000 --> 00:20:12,320
and use that as the name of your piece

00:20:10,400 --> 00:20:15,919
of work you're doing

00:20:12,320 --> 00:20:18,960
options the ones you need

00:20:15,919 --> 00:20:20,640
are by default switched on still

00:20:18,960 --> 00:20:22,240
you can pass in a different name if you

00:20:20,640 --> 00:20:23,679
want to if you're not liking the name

00:20:22,240 --> 00:20:26,640
interesting word

00:20:23,679 --> 00:20:27,280
change it here add options it's all

00:20:26,640 --> 00:20:31,039
there

00:20:27,280 --> 00:20:31,919
but the best part is that the moment you

00:20:31,039 --> 00:20:34,960
are

00:20:31,919 --> 00:20:38,799
done with your scope here you leave your

00:20:34,960 --> 00:20:38,799
subroutine for whatever reason

00:20:39,120 --> 00:20:42,159
it will be nicely closed and it will be

00:20:41,440 --> 00:20:46,640
recorded

00:20:42,159 --> 00:20:50,000
to your tracer so this was your stack

00:20:46,640 --> 00:20:52,720
we had this one here and with this

00:20:50,000 --> 00:20:54,559
autoscope thing and which is manual

00:20:52,720 --> 00:20:58,240
tracing you can now start

00:20:54,559 --> 00:21:01,679
adding more stuff into

00:20:58,240 --> 00:21:04,960
workspans and more that was

00:21:01,679 --> 00:21:08,480
still like ah no no no no

00:21:04,960 --> 00:21:13,440
no pearl can do

00:21:08,480 --> 00:21:18,400
much better i had an interesting talk

00:21:13,440 --> 00:21:21,440
a week ago with a colleague of my son

00:21:18,400 --> 00:21:25,760
he doesn't do pearl he's

00:21:21,440 --> 00:21:25,760
doing a very interesting job

00:21:26,159 --> 00:21:31,360
and using all kinds of languages he's

00:21:28,320 --> 00:21:33,600
very agile he's very

00:21:31,360 --> 00:21:35,120
eager to learn stuff plays a lot of

00:21:33,600 --> 00:21:37,520
things you tinker her

00:21:35,120 --> 00:21:38,960
and bills builds a very good company out

00:21:37,520 --> 00:21:42,159
of it

00:21:38,960 --> 00:21:43,120
but his friend interested in open

00:21:42,159 --> 00:21:46,320
tracing

00:21:43,120 --> 00:21:49,039
and programming and go

00:21:46,320 --> 00:21:49,840
he said yes you can do much better with

00:21:49,039 --> 00:21:52,320
pearl

00:21:49,840 --> 00:21:53,440
the nice thing about pearl it gives you

00:21:52,320 --> 00:21:59,600
access to

00:21:53,440 --> 00:22:03,280
everything everywhere

00:21:59,600 --> 00:22:06,480
so open tracing rep scopes

00:22:03,280 --> 00:22:06,480
is what you're looking for

00:22:06,799 --> 00:22:12,640
work in progress yeah most of it is

00:22:09,280 --> 00:22:13,280
still work in progress does it look like

00:22:12,640 --> 00:22:17,760
so we

00:22:13,280 --> 00:22:21,600
did have this thing here your package

00:22:17,760 --> 00:22:25,280
and we're using open tracing autoscope

00:22:21,600 --> 00:22:29,840
get rid of it change it for rep scope

00:22:25,280 --> 00:22:29,840
and the name of a separate team

00:22:30,000 --> 00:22:37,360
or a whole list of subroutines or

00:22:33,679 --> 00:22:37,360
subroutines in another package

00:22:37,760 --> 00:22:42,640
yes it will work what does it do well

00:22:40,559 --> 00:22:45,520
this was your subroutine we had it

00:22:42,640 --> 00:22:46,880
with our autoscope and start guarded

00:22:45,520 --> 00:22:51,120
spam

00:22:46,880 --> 00:22:55,840
and it works nice this

00:22:51,120 --> 00:22:55,840
is how it will look like with rap scope

00:22:55,919 --> 00:23:01,440
and why is this important because

00:22:59,520 --> 00:23:05,440
remember that subroutine we had in the

00:23:01,440 --> 00:23:08,159
beginning that was exactly this one

00:23:05,440 --> 00:23:10,559
and now we don't need to change the

00:23:08,159 --> 00:23:13,360
original code

00:23:10,559 --> 00:23:15,360
which is super important if you have

00:23:13,360 --> 00:23:18,559
hundreds of subroutines

00:23:15,360 --> 00:23:21,919
you do not want to have a

00:23:18,559 --> 00:23:23,440
massive git change that says all your

00:23:21,919 --> 00:23:27,840
subroutines are needed to

00:23:23,440 --> 00:23:31,679
change it's like no we can do better

00:23:27,840 --> 00:23:34,880
don't touch your code just use this one

00:23:31,679 --> 00:23:37,840
call and it works

00:23:34,880 --> 00:23:38,159
this was what we have with our framework

00:23:37,840 --> 00:23:41,840
and

00:23:38,159 --> 00:23:42,159
with your autoscope thing it takes care

00:23:41,840 --> 00:23:45,440
of

00:23:42,159 --> 00:23:48,720
all these things here

00:23:45,440 --> 00:23:52,640
and as we speak i did say it was

00:23:48,720 --> 00:23:55,600
work in progress i think it's finished

00:23:52,640 --> 00:23:57,360
it's pretty much finished and if not

00:23:55,600 --> 00:24:01,679
then of course we will have

00:23:57,360 --> 00:24:01,679
updates and some more

00:24:02,840 --> 00:24:10,720
okay this was about how to

00:24:07,360 --> 00:24:13,760
do instrumentation

00:24:10,720 --> 00:24:13,760
of your applications

00:24:13,919 --> 00:24:21,279
about integrations sadly

00:24:17,200 --> 00:24:25,520
very sadly dbi x open tracing

00:24:21,279 --> 00:24:25,520
is not done yet

00:24:26,240 --> 00:24:29,440
but it's not going to be a very

00:24:27,600 --> 00:24:32,400
complicated task

00:24:29,440 --> 00:24:33,200
and i'll explain later but if you would

00:24:32,400 --> 00:24:37,120
do that

00:24:33,200 --> 00:24:41,039
all your database queries would have

00:24:37,120 --> 00:24:43,919
a automatic span created

00:24:41,039 --> 00:24:44,240
with the tags with your sql statement

00:24:43,919 --> 00:24:46,640
with

00:24:44,240 --> 00:24:48,080
number of records returned with all the

00:24:46,640 --> 00:24:51,840
nice things you'd like to have

00:24:48,080 --> 00:24:51,840
from a database call

00:24:52,000 --> 00:24:56,640
the other one oh http headers open

00:24:54,480 --> 00:25:00,000
tracing

00:24:56,640 --> 00:25:03,919
yes inject the spam context

00:25:00,000 --> 00:25:08,400
everywhere hp headers is the

00:25:03,919 --> 00:25:12,880
um the format we are using

00:25:08,400 --> 00:25:15,919
for extracting and injecting information

00:25:12,880 --> 00:25:18,960
and traces um cgi

00:25:15,919 --> 00:25:21,919
doesn't have hp headers sadly yeah

00:25:18,960 --> 00:25:23,840
anyway if you have this your

00:25:21,919 --> 00:25:24,320
microservice is going to be taken care

00:25:23,840 --> 00:25:28,799
of

00:25:24,320 --> 00:25:33,600
by itself

00:25:28,799 --> 00:25:36,559
then um the roadmap

00:25:33,600 --> 00:25:37,039
yes there is a roadmap we want to have

00:25:36,559 --> 00:25:40,840
more

00:25:37,039 --> 00:25:43,760
open tracing implementations

00:25:40,840 --> 00:25:46,159
um we want to have zipkin

00:25:43,760 --> 00:25:47,120
as one of them and we want to have

00:25:46,159 --> 00:25:49,520
elasticsearch

00:25:47,120 --> 00:25:50,159
we want to have jager we want to have

00:25:49,520 --> 00:25:53,120
new relic

00:25:50,159 --> 00:25:53,120
and anything else

00:25:53,600 --> 00:25:59,840
the other one the integrations

00:25:57,039 --> 00:26:01,039
we want to have d-bags open tracing we

00:25:59,840 --> 00:26:04,720
want to have radis

00:26:01,039 --> 00:26:06,880
open tracing those two are taking care

00:26:04,720 --> 00:26:06,880
of

00:26:06,960 --> 00:26:14,159
soonish because we as prosceptics

00:26:11,279 --> 00:26:14,960
we really need those ourselves so those

00:26:14,159 --> 00:26:17,440
will be done

00:26:14,960 --> 00:26:17,440
soonish

00:26:18,480 --> 00:26:26,720
now the entire ecosystem is way bigger

00:26:22,480 --> 00:26:31,279
what about a dancer integration

00:26:26,720 --> 00:26:34,320
what about mojolicious integration

00:26:31,279 --> 00:26:36,880
dylan i know you're watching please

00:26:34,320 --> 00:26:37,360
reach out to me anyone from the dancer

00:26:36,880 --> 00:26:40,559
team

00:26:37,360 --> 00:26:42,080
reach out to me because we need to

00:26:40,559 --> 00:26:45,760
extend this

00:26:42,080 --> 00:26:48,799
cgi application is a

00:26:45,760 --> 00:26:52,080
huge thing we use it in our legacy

00:26:48,799 --> 00:26:55,039
system and

00:26:52,080 --> 00:26:57,279
all the nice shiny frameworks like smart

00:26:55,039 --> 00:26:59,679
modulations

00:26:57,279 --> 00:27:00,320
they can benefit as well from it but we

00:26:59,679 --> 00:27:04,240
needed it

00:27:00,320 --> 00:27:07,279
because our application our service

00:27:04,240 --> 00:27:10,720
is getting slower and slower

00:27:07,279 --> 00:27:10,720
and we want to know why

00:27:11,039 --> 00:27:16,720
so that's why we have our legacy system

00:27:14,640 --> 00:27:17,760
with datadog it will show our

00:27:16,720 --> 00:27:20,960
bottlenecks

00:27:17,760 --> 00:27:24,480
soon enough contributing

00:27:20,960 --> 00:27:28,640
well like i said reach out to me

00:27:24,480 --> 00:27:31,039
for open tracing we did do some

00:27:28,640 --> 00:27:32,399
things like yes we did create types to

00:27:31,039 --> 00:27:36,320
make it easy

00:27:32,399 --> 00:27:39,360
we love types and then for

00:27:36,320 --> 00:27:42,799
testing we created a

00:27:39,360 --> 00:27:46,559
test integration which

00:27:42,799 --> 00:27:51,039
is the very simple way to

00:27:46,559 --> 00:27:54,240
create a span with a test tracer

00:27:51,039 --> 00:27:58,159
have your integration do some

00:27:54,240 --> 00:28:01,440
instantiation call some subroutines

00:27:58,159 --> 00:28:02,559
do some dispatching and then see what

00:28:01,440 --> 00:28:06,320
happened in the end

00:28:02,559 --> 00:28:10,799
and your test tracer will show exactly

00:28:06,320 --> 00:28:12,799
what happened there um the interface

00:28:10,799 --> 00:28:14,840
test open tracing interface is just to

00:28:12,799 --> 00:28:17,440
make sure that

00:28:14,840 --> 00:28:20,799
whatever implementation you did

00:28:17,440 --> 00:28:24,240
built it will

00:28:20,799 --> 00:28:28,399
adhere to the open tracing interface

00:28:24,240 --> 00:28:31,840
api which will make sure that

00:28:28,399 --> 00:28:31,840
it doesn't break anywhere else

00:28:32,480 --> 00:28:35,679
you needed that api

00:28:36,080 --> 00:28:42,480
and that's about it and hopefully

00:28:39,360 --> 00:28:46,080
soon everyone will have these

00:28:42,480 --> 00:28:50,240
nice graphs and dashboards

00:28:46,080 --> 00:28:54,480
so i do still have 25 minutes left

00:28:50,240 --> 00:28:54,480
20 minutes left um

00:28:54,960 --> 00:29:00,640
that's pain because i had to figure out

00:28:58,799 --> 00:29:02,080
what am i going to do am i going to work

00:29:00,640 --> 00:29:06,159
on my slides

00:29:02,080 --> 00:29:06,159
or am i going to work on a live demo

00:29:06,559 --> 00:29:13,840
i did work on my slides

00:29:09,600 --> 00:29:13,840
and i did work on the live demo

00:29:16,559 --> 00:29:23,600
but i am very careful

00:29:20,960 --> 00:29:26,240
on showing my screen sharing my screen

00:29:23,600 --> 00:29:29,679
and doing live demos um

00:29:26,240 --> 00:29:32,399
maybe i can if you like

00:29:29,679 --> 00:29:33,200
um i can do that i can show you the real

00:29:32,399 --> 00:29:35,919
code

00:29:33,200 --> 00:29:37,279
and i can show you how datadock is

00:29:35,919 --> 00:29:40,640
actually reporting

00:29:37,279 --> 00:29:44,960
to us i don't need to

00:29:40,640 --> 00:29:49,200
be frightened that i will expose any

00:29:44,960 --> 00:29:52,159
company uh details so

00:29:49,200 --> 00:29:55,360
yeah do i do that or not i'm totally

00:29:52,159 --> 00:29:58,480
muted i don't hear anything about you

00:29:55,360 --> 00:30:01,600
i'm live go live

00:29:58,480 --> 00:30:05,039
all right show us all the secrets

00:30:01,600 --> 00:30:05,919
show the secrets uh okay let's see if i

00:30:05,039 --> 00:30:09,600
can do that

00:30:05,919 --> 00:30:12,880
um so this will be

00:30:09,600 --> 00:30:17,679
all right an empty screen there you go

00:30:12,880 --> 00:30:19,600
yeah good um

00:30:17,679 --> 00:30:23,679
you see that empty screen now with my

00:30:19,600 --> 00:30:26,799
nice desktop

00:30:23,679 --> 00:30:28,480
and where is my coda editor here's my

00:30:26,799 --> 00:30:33,279
code editor

00:30:28,480 --> 00:30:33,279
and go for this one

00:30:34,840 --> 00:30:51,840
here

00:30:36,240 --> 00:30:51,840
not this one here

00:31:00,000 --> 00:31:06,159
yes good to go

00:31:03,200 --> 00:31:07,760
this is very small i'm afraid um i

00:31:06,159 --> 00:31:10,880
should have enlarged the phones

00:31:07,760 --> 00:31:12,000
or changed the size of the resolution

00:31:10,880 --> 00:31:17,120
can i still do that

00:31:12,000 --> 00:31:20,480
without breaking stuff let's try um

00:31:17,120 --> 00:31:20,480
i probably will now break

00:31:30,840 --> 00:31:33,840
june

00:31:35,039 --> 00:31:42,640
alert there you go

00:31:38,159 --> 00:31:47,360
yes you still see your screen i hope

00:31:42,640 --> 00:31:50,799
so um this is a simple index cgi

00:31:47,360 --> 00:31:54,640
um this is um

00:31:50,799 --> 00:31:57,120
how i wrote it the

00:31:54,640 --> 00:31:59,360
thing itself it says use base cgi

00:31:57,120 --> 00:32:02,080
application

00:31:59,360 --> 00:32:03,679
the plugin we are using open tracing

00:32:02,080 --> 00:32:07,039
data dock

00:32:03,679 --> 00:32:09,519
we have a thing called global tracer

00:32:07,039 --> 00:32:09,519
just like

00:32:10,240 --> 00:32:17,919
log any which gives you access to

00:32:14,000 --> 00:32:21,200
the tracer anywhere else like here

00:32:17,919 --> 00:32:22,080
you can just say your scope with a

00:32:21,200 --> 00:32:25,200
tracer

00:32:22,080 --> 00:32:27,360
there are other ways to do it um

00:32:25,200 --> 00:32:28,240
safer ways to do it because this tracer

00:32:27,360 --> 00:32:31,039
may not be

00:32:28,240 --> 00:32:33,679
instantiated yet you will have undeath

00:32:31,039 --> 00:32:37,039
you don't want that

00:32:33,679 --> 00:32:41,360
so what do we need so this

00:32:37,039 --> 00:32:43,679
cgi has the setup face here

00:32:41,360 --> 00:32:45,279
if you're familiar with cgi's this is

00:32:43,679 --> 00:32:48,000
where you do a lot of

00:32:45,279 --> 00:32:49,440
things to make sure that you can run

00:32:48,000 --> 00:32:52,880
whatever you want to run

00:32:49,440 --> 00:32:55,120
run modes i don't know who invented it

00:32:52,880 --> 00:32:56,640
but it seems to be a very smart thing to

00:32:55,120 --> 00:32:58,559
do at that time

00:32:56,640 --> 00:33:00,080
i'm glad we have modern frameworks these

00:32:58,559 --> 00:33:03,440
days

00:33:00,080 --> 00:33:05,840
then a little bit of bootstrapping

00:33:03,440 --> 00:33:06,559
like the service name we want to have we

00:33:05,840 --> 00:33:08,640
have to set a

00:33:06,559 --> 00:33:12,799
type we want to set the name of the

00:33:08,640 --> 00:33:16,399
resource in this case a simple index cgi

00:33:12,799 --> 00:33:19,600
and here we have a open tracing vegas

00:33:16,399 --> 00:33:20,640
items now you can start looking at more

00:33:19,600 --> 00:33:22,720
code here

00:33:20,640 --> 00:33:24,880
we have a do start thing that will be

00:33:22,720 --> 00:33:26,640
run we have do something else that will

00:33:24,880 --> 00:33:28,399
sleep a little bit here

00:33:26,640 --> 00:33:30,720
and do something more to do something

00:33:28,399 --> 00:33:34,159
more is here

00:33:30,720 --> 00:33:37,600
and that's more or less our application

00:33:34,159 --> 00:33:40,559
fantastic isn't it

00:33:37,600 --> 00:33:40,559
good um

00:33:40,880 --> 00:33:45,919
this one there we go

00:33:47,760 --> 00:33:56,240
let's try to go here

00:33:51,279 --> 00:33:58,559
and say what was it called

00:33:56,240 --> 00:33:58,559
simple

00:34:05,039 --> 00:34:08,159
what was it called our application it

00:34:06,960 --> 00:34:11,760
was called

00:34:08,159 --> 00:34:11,760
simple yeah two

00:34:13,440 --> 00:34:21,679
simple index cgi

00:34:18,399 --> 00:34:24,960
hopefully it works well this is do start

00:34:21,679 --> 00:34:28,320
amazing feedback we get here

00:34:24,960 --> 00:34:32,720
um we can change the run mode i think

00:34:28,320 --> 00:34:37,679
um say

00:34:32,720 --> 00:34:37,679
run mode is nine

00:34:37,760 --> 00:34:45,119
that's amazing bye

00:34:40,960 --> 00:34:45,119
um we can do one mode is one

00:34:45,520 --> 00:34:49,520
and wow that's more nightmare why oh

00:34:48,399 --> 00:34:53,200
this is

00:34:49,520 --> 00:34:55,760
this is not good this is just a typo

00:34:53,200 --> 00:34:57,920
live demos i love them and run mode is

00:34:55,760 --> 00:34:59,839
one this is taking a little bit

00:34:57,920 --> 00:35:02,400
because it has all these sleep

00:34:59,839 --> 00:35:05,839
statements in between

00:35:02,400 --> 00:35:07,920
um because we like that good

00:35:05,839 --> 00:35:09,040
and now you're saying well that was nice

00:35:07,920 --> 00:35:12,079
theo

00:35:09,040 --> 00:35:12,079
what with datadock

00:35:12,480 --> 00:35:17,839
well where is data though

00:35:18,640 --> 00:35:25,760
this is our data dot thing

00:35:22,560 --> 00:35:29,280
um i go back to our applications

00:35:25,760 --> 00:35:32,480
here let's see what's happening here

00:35:29,280 --> 00:35:32,800
we have some services we can browse

00:35:32,480 --> 00:35:35,760
through

00:35:32,800 --> 00:35:35,760
our services

00:35:37,920 --> 00:35:45,839
can we

00:36:04,480 --> 00:36:08,320
good here is our service again

00:36:08,720 --> 00:36:15,119
a nice graph of the timeline here's the

00:36:11,200 --> 00:36:20,720
timeline we see some spams showing up

00:36:15,119 --> 00:36:20,720
you can click on them you can see traces

00:36:24,079 --> 00:36:28,480
don't do this thing here i want the

00:36:25,920 --> 00:36:31,040
entire application we see here

00:36:28,480 --> 00:36:33,280
nice status code we see the run method

00:36:31,040 --> 00:36:36,880
called do something do something

00:36:33,280 --> 00:36:36,880
do end do and more

00:36:37,440 --> 00:36:44,800
so let's have a look in this one do

00:36:41,599 --> 00:36:49,680
start here that's our

00:36:44,800 --> 00:36:53,359
nice graph we have if you can

00:36:49,680 --> 00:36:56,640
zoom in a bit we have this request here

00:36:53,359 --> 00:36:57,440
we have the setup thing we have a run

00:36:56,640 --> 00:37:00,640
span

00:36:57,440 --> 00:37:04,240
and we have a

00:37:00,640 --> 00:37:08,960
teardown why only these three

00:37:04,240 --> 00:37:12,079
because this was a very simple way of

00:37:08,960 --> 00:37:13,119
doing the tracing and the

00:37:12,079 --> 00:37:15,839
instrumentation

00:37:13,119 --> 00:37:17,200
we didn't do any fencing thing here this

00:37:15,839 --> 00:37:19,520
was just

00:37:17,200 --> 00:37:21,040
what happens if you use the cgi

00:37:19,520 --> 00:37:26,240
application plug-in

00:37:21,040 --> 00:37:37,359
itself now that's boring

00:37:26,240 --> 00:37:40,640
um we did have another one

00:37:37,359 --> 00:37:44,000
where is this guy closer when here

00:37:40,640 --> 00:37:45,760
close we had another one here this was

00:37:44,000 --> 00:37:48,079
doing something

00:37:45,760 --> 00:37:51,040
let's have a look at this one oh that

00:37:48,079 --> 00:37:54,640
was actually doing something here

00:37:51,040 --> 00:37:54,640
do something more um

00:37:55,440 --> 00:38:00,320
the spans are here is a tiny setup span

00:37:59,040 --> 00:38:02,960
there's a tiny

00:38:00,320 --> 00:38:04,160
tear down span and the work stuff we're

00:38:02,960 --> 00:38:07,760
doing

00:38:04,160 --> 00:38:13,520
it works it's fine all manual tracing

00:38:07,760 --> 00:38:13,520
now go back to this thing here

00:38:13,599 --> 00:38:16,960
instead of simple let's do

00:38:17,040 --> 00:38:21,599
uh autoscope autoscope looks very much

00:38:20,400 --> 00:38:24,320
the same

00:38:21,599 --> 00:38:26,880
same way of setting up the stuff but

00:38:24,320 --> 00:38:30,480
instead of doing the entire

00:38:26,880 --> 00:38:34,000
thing with adding stuff there

00:38:30,480 --> 00:38:37,359
closing your scope this

00:38:34,000 --> 00:38:38,960
should work as well so let's have a look

00:38:37,359 --> 00:38:41,599
at

00:38:38,960 --> 00:38:41,599
other scope

00:38:45,520 --> 00:38:49,520
outdoor scope

00:38:56,320 --> 00:39:00,880
wow oh yeah this is one that's taking a

00:38:59,520 --> 00:39:04,160
little bit more

00:39:00,880 --> 00:39:05,920
which we are interested in question is

00:39:04,160 --> 00:39:15,440
only how long will it take

00:39:05,920 --> 00:39:18,560
before datadog sees this

00:39:15,440 --> 00:39:29,839
looking at the timeline 37

00:39:18,560 --> 00:39:29,839
well we need to wait a little

00:39:30,160 --> 00:39:43,839
it will catch up soon

00:39:54,839 --> 00:39:57,839
um

00:40:05,680 --> 00:40:11,839
very horsepower yes we found it cue the

00:40:08,960 --> 00:40:11,839
traces

00:40:12,079 --> 00:40:16,560
not just the cgi run but that entire

00:40:14,319 --> 00:40:16,560
thing

00:40:20,160 --> 00:40:25,839
and oh there we go

00:40:35,440 --> 00:40:42,240
see i'm not a systematic man

00:40:39,520 --> 00:40:42,880
but here we got everything again we have

00:40:42,240 --> 00:40:46,160
this

00:40:42,880 --> 00:40:49,119
do something span this which was created

00:40:46,160 --> 00:40:49,599
and closed automatically without doing

00:40:49,119 --> 00:40:52,319
any

00:40:49,599 --> 00:40:53,839
work there as you can see or maybe you

00:40:52,319 --> 00:40:57,119
can't see

00:40:53,839 --> 00:40:59,920
at the bottom of this screen you see

00:40:57,119 --> 00:41:01,440
still some interesting information about

00:40:59,920 --> 00:41:04,480
the method you got

00:41:01,440 --> 00:41:06,079
the status code url

00:41:04,480 --> 00:41:07,760
the run modes we were having do

00:41:06,079 --> 00:41:09,440
something which is very interesting if

00:41:07,760 --> 00:41:11,920
you want to filter on

00:41:09,440 --> 00:41:13,280
some tags we added those so some bagash

00:41:11,920 --> 00:41:15,760
items we added

00:41:13,280 --> 00:41:18,079
so you can filter on client ids or other

00:41:15,760 --> 00:41:18,079
things

00:41:18,800 --> 00:41:23,280
and anything else you want to add to it

00:41:24,160 --> 00:41:31,760
i think that's about it um

00:41:28,160 --> 00:41:35,520
i'm not going to show you the 68

00:41:31,760 --> 00:41:37,839
files of code we had to write for this

00:41:35,520 --> 00:41:37,839
um

00:41:38,880 --> 00:41:46,160
being lazy hubris i think

00:41:42,480 --> 00:41:50,079
it's just a way of you want to

00:41:46,160 --> 00:41:54,560
add instrumentation to your application

00:41:50,079 --> 00:41:58,079
the one line change should be enough

00:41:54,560 --> 00:42:01,760
and what happens underneath

00:41:58,079 --> 00:42:03,680
is all up to you now it's all

00:42:01,760 --> 00:42:06,000
up to us i can say it's up to you how

00:42:03,680 --> 00:42:09,200
you want to look at it as a developer

00:42:06,000 --> 00:42:09,920
um but you shouldn't care about it and i

00:42:09,200 --> 00:42:13,200
think

00:42:09,920 --> 00:42:16,640
with this way adding open tracing

00:42:13,200 --> 00:42:19,520
to your application you can quickly

00:42:16,640 --> 00:42:20,960
see what your application is doing where

00:42:19,520 --> 00:42:24,000
the bottlenecks are

00:42:20,960 --> 00:42:28,160
and like i promised you will gain

00:42:24,000 --> 00:42:31,839
back zillions of nanoseconds soon enough

00:42:28,160 --> 00:42:31,839
i think that's about it for today

00:42:35,520 --> 00:42:44,400
awesome thank you i must say by the way

00:42:39,839 --> 00:42:47,680
a huge thank you for perseptics

00:42:44,400 --> 00:42:50,800
i must say that because they have been

00:42:47,680 --> 00:42:52,160
waiting for a long time i mean for a

00:42:50,800 --> 00:42:55,119
long long time

00:42:52,160 --> 00:42:55,680
to get this stuff up and running this is

00:42:55,119 --> 00:42:58,400
not a

00:42:55,680 --> 00:42:58,880
side project of myself this is a fully

00:42:58,400 --> 00:43:02,319
paid

00:42:58,880 --> 00:43:05,280
project by perceptix um

00:43:02,319 --> 00:43:05,680
hundreds of man hours in it also a very

00:43:05,280 --> 00:43:07,839
great

00:43:05,680 --> 00:43:09,280
thanks for simon who is helping me with

00:43:07,839 --> 00:43:12,480
the

00:43:09,280 --> 00:43:15,280
deeper dark voodoo stuff in

00:43:12,480 --> 00:43:16,720
outdoor scoping and red scope stuff

00:43:15,280 --> 00:43:19,839
writing tons of tests

00:43:16,720 --> 00:43:21,839
making things much easier uh and thank

00:43:19,839 --> 00:43:23,680
you for the pearl community for

00:43:21,839 --> 00:43:27,839
allowing me to speak to you and thank

00:43:23,680 --> 00:43:27,839
you for listening

00:43:29,040 --> 00:43:31,760
any questions

00:43:34,160 --> 00:43:36,960
i'm gonna clap

00:43:38,319 --> 00:43:41,839
you're allowed to

00:43:43,280 --> 00:43:49,520
i have a question theo all right uh

00:43:46,400 --> 00:43:50,400
so this is this is very cool first of

00:43:49,520 --> 00:43:53,760
all

00:43:50,400 --> 00:43:55,119
um it's essentially profiling a

00:43:53,760 --> 00:43:58,160
production application

00:43:55,119 --> 00:43:58,960
a live application and one of the issues

00:43:58,160 --> 00:44:01,440
that you mentioned

00:43:58,960 --> 00:44:03,040
with just using nyt pro for example is

00:44:01,440 --> 00:44:06,960
that it's

00:44:03,040 --> 00:44:07,680
extremely load intensive you know it

00:44:06,960 --> 00:44:11,119
takes a lot of

00:44:07,680 --> 00:44:12,480
resources in order to do that yeah and

00:44:11,119 --> 00:44:16,079
essentially what we're doing here is

00:44:12,480 --> 00:44:19,520
we're replacing local logging with

00:44:16,079 --> 00:44:22,880
uh i assume http calls somewhere

00:44:19,520 --> 00:44:25,040
close to a rest api somewhere how does

00:44:22,880 --> 00:44:26,480
like what what are the performance

00:44:25,040 --> 00:44:29,040
implications of this like

00:44:26,480 --> 00:44:30,720
like you know obviously we could

00:44:29,040 --> 00:44:34,160
probably use these on web services

00:44:30,720 --> 00:44:36,720
that are uh not seeing

00:44:34,160 --> 00:44:38,800
millions of requests uh per second like

00:44:36,720 --> 00:44:41,200
you know i

00:44:38,800 --> 00:44:44,240
at what level of uh at what performance

00:44:41,200 --> 00:44:47,599
level can we use this

00:44:44,240 --> 00:44:48,240
that's an interesting question i don't

00:44:47,599 --> 00:44:52,160
know

00:44:48,240 --> 00:44:55,440
the penalty if i can say it in that way

00:44:52,160 --> 00:44:58,880
um the thing

00:44:55,440 --> 00:45:02,960
is that this is such a hot code

00:44:58,880 --> 00:45:06,079
that i can't tell you

00:45:02,960 --> 00:45:09,200
i wish i would have benchmarks

00:45:06,079 --> 00:45:10,400
at this moment it's going to be very

00:45:09,200 --> 00:45:14,880
difficult to create

00:45:10,400 --> 00:45:16,319
benchmarks for this um

00:45:14,880 --> 00:45:18,640
theo we might be able to help you with

00:45:16,319 --> 00:45:21,040
that yeah that would be awesome

00:45:18,640 --> 00:45:22,720
but i will try to explain you why it's

00:45:21,040 --> 00:45:25,760
interesting to do the benchmarking

00:45:22,720 --> 00:45:29,280
help is very awesome to get because

00:45:25,760 --> 00:45:33,200
the moment you start benchmarking a

00:45:29,280 --> 00:45:36,319
cdi application for example with

00:45:33,200 --> 00:45:36,319
no work in it

00:45:36,800 --> 00:45:42,800
your overhead will be 90 percent

00:45:41,119 --> 00:45:44,240
so so we have we're going to be doing a

00:45:42,800 --> 00:45:46,800
proof of concept

00:45:44,240 --> 00:45:49,200
uh with datadog um and i was actually

00:45:46,800 --> 00:45:52,880
excited to discover your modules

00:45:49,200 --> 00:45:55,200
uh just a couple of days ago um

00:45:52,880 --> 00:45:56,960
and we're going to give them a test uh

00:45:55,200 --> 00:46:01,119
to the original questionnaire

00:45:56,960 --> 00:46:01,599
um how one of the common setups is you

00:46:01,119 --> 00:46:04,640
put

00:46:01,599 --> 00:46:06,480
the datadog agent on the same server as

00:46:04,640 --> 00:46:09,839
your application so it's

00:46:06,480 --> 00:46:12,560
it's making an http request on localhost

00:46:09,839 --> 00:46:14,240
um so you're not you're not dealing with

00:46:12,560 --> 00:46:16,000
any network bandwidth there the agent

00:46:14,240 --> 00:46:19,520
then deals with all the

00:46:16,000 --> 00:46:21,280
the the network latency and and

00:46:19,520 --> 00:46:22,720
and getting the the information actually

00:46:21,280 --> 00:46:24,240
up to datadog in

00:46:22,720 --> 00:46:25,839
a different process in a different

00:46:24,240 --> 00:46:28,160
process exactly

00:46:25,839 --> 00:46:30,319
yeah i mean the datadog also provides

00:46:28,160 --> 00:46:31,680
direct apis and stuff like that but for

00:46:30,319 --> 00:46:32,960
this kind of tooling

00:46:31,680 --> 00:46:35,040
the easiest thing is just to have it

00:46:32,960 --> 00:46:38,079
point at the agent um

00:46:35,040 --> 00:46:40,240
we already have nginx um we have an

00:46:38,079 --> 00:46:41,200
nginx proxy on each of our server boxes

00:46:40,240 --> 00:46:42,800
and we get

00:46:41,200 --> 00:46:44,240
um you know on the servers we're going

00:46:42,800 --> 00:46:47,520
to test this on we get

00:46:44,240 --> 00:46:50,800
um between 100 000 and 500

00:46:47,520 --> 00:46:53,440
000 requests a day per server um

00:46:50,800 --> 00:46:54,000
so not massive amounts of volume but

00:46:53,440 --> 00:46:56,079
interesting

00:46:54,000 --> 00:46:58,319
you know it's it's it's it's uh

00:46:56,079 --> 00:47:00,240
sufficient for some analysis

00:46:58,319 --> 00:47:01,520
um and some of the calls we get take you

00:47:00,240 --> 00:47:03,839
know

00:47:01,520 --> 00:47:05,680
200 300 milliseconds to respond and some

00:47:03,839 --> 00:47:06,480
take 50 seconds to response there's a

00:47:05,680 --> 00:47:09,760
good

00:47:06,480 --> 00:47:11,839
breadth of processing time

00:47:09,760 --> 00:47:14,319
and we already have nginx uptime logs

00:47:11,839 --> 00:47:15,040
that we use for our metrics right now to

00:47:14,319 --> 00:47:18,000
look at how

00:47:15,040 --> 00:47:19,680
long it takes each request so one of the

00:47:18,000 --> 00:47:22,839
things we plan to do is sort of be able

00:47:19,680 --> 00:47:25,599
to compare a couple weeks of our nginx

00:47:22,839 --> 00:47:28,880
um um up

00:47:25,599 --> 00:47:31,760
upstream logs before and after we put

00:47:28,880 --> 00:47:34,000
um the instrumentation and data dog in

00:47:31,760 --> 00:47:34,000
place

00:47:34,400 --> 00:47:39,520
so um hopefully if there's anything more

00:47:37,839 --> 00:47:40,000
than you know tens of milliseconds of

00:47:39,520 --> 00:47:43,119
impact

00:47:40,000 --> 00:47:45,520
we we should be able to see it

00:47:43,119 --> 00:47:47,119
that will be awesome too it's not quite

00:47:45,520 --> 00:47:48,720
the same as benchmarking but as far as

00:47:47,119 --> 00:47:52,000
like looking at actual

00:47:48,720 --> 00:47:53,280
impact on production code at scale

00:47:52,000 --> 00:47:55,040
we should be able to take a look at the

00:47:53,280 --> 00:47:57,839
statistics yeah so

00:47:55,040 --> 00:47:58,640
the approach we at perceptics will take

00:47:57,839 --> 00:48:02,640
is that

00:47:58,640 --> 00:48:06,960
we are going to roll this out soonish

00:48:02,640 --> 00:48:09,359
on just one production server

00:48:06,960 --> 00:48:10,640
once we are confident that it doesn't

00:48:09,359 --> 00:48:13,200
hit the user

00:48:10,640 --> 00:48:15,839
too much we're going to roll it out on

00:48:13,200 --> 00:48:15,839
the other ones

00:48:16,720 --> 00:48:21,920
so only a percentage of a small

00:48:19,680 --> 00:48:22,400
percentage of all the users hitting our

00:48:21,920 --> 00:48:25,760
servers

00:48:22,400 --> 00:48:27,359
our system will will have that penalty

00:48:25,760 --> 00:48:30,880
for the first

00:48:27,359 --> 00:48:34,240
days but

00:48:30,880 --> 00:48:38,880
reading up on other people their

00:48:34,240 --> 00:48:41,520
um blogs you can find on the internet

00:48:38,880 --> 00:48:43,200
they say it won't have a penalty it's

00:48:41,520 --> 00:48:44,800
just a very small

00:48:43,200 --> 00:48:47,200
penalty like you said it talks to the

00:48:44,800 --> 00:48:50,240
data dog agent on your local host

00:48:47,200 --> 00:48:54,480
it takes care of it and

00:48:50,240 --> 00:48:57,839
um this is more or less a

00:48:54,480 --> 00:49:01,359
huge proof of concept still

00:48:57,839 --> 00:49:03,599
okay where is written in a very

00:49:01,359 --> 00:49:06,800
sorry i need to interrupt we're out of

00:49:03,599 --> 00:49:06,800

YouTube URL: https://www.youtube.com/watch?v=cQvAf5FtwwE


