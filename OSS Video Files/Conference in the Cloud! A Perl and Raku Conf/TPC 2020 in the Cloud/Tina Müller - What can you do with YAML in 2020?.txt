Title: Tina Müller - What can you do with YAML in 2020?
Publication date: 2020-06-26
Playlist: TPC 2020 in the Cloud
Description: 
	While some years ago you could only do very basic YAML stuff in Perl, that has changed!

Over the last years, a lot of improvements have been made to the Perl YAML Ecosystem, also thanks to The Perl Foundation and the Perl Toolchain Summit.

Bugs in existing YAML modules have been fixed (syntax parsing errors, memory leaks, etc.), secure loading of untrusted input has been made possible.

With YAML::PP a module has entered CPAN which is one of the first three projects that was written by using the cross-language yaml-test-suite.

It aims to be as powerful as PyYAML. Successful tools like Ansible are using PyYAML. Although Ansible just uses a small part of what’s possible in PyYAML, it couldn’t have been written in Perl. I want to make that possible.

I’ll show you what kind of cool stuff you can do with YAML::PP already!

You should already be familiar with the basic YAML syntax.

Slides: https://perlpunk.github.io/slides.2020.tpc20cic/

Tutorial: https://www.yaml.info
Captions: 
	00:00:00,030 --> 00:00:10,710
soon hello everybody I'm talking about

00:00:05,690 --> 00:00:14,960
yellow and I'm just a few sentences

00:00:10,710 --> 00:00:20,520
about me I'm doing pearl since 1998 and

00:00:14,960 --> 00:00:23,970
Yemen since 2017 and I'm working suza

00:00:20,520 --> 00:00:26,550
software solution since last year and my

00:00:23,970 --> 00:00:32,070
job title can probably also be demo

00:00:26,550 --> 00:00:36,170
consultant and maintaining several cool

00:00:32,070 --> 00:00:38,940
maintaining several Yemen projects and

00:00:36,170 --> 00:00:42,270
topics are what this young land why is

00:00:38,940 --> 00:00:47,180
it actually so complicated and I'll show

00:00:42,270 --> 00:00:47,180
you some features and plugins free mo TP

00:00:48,559 --> 00:01:01,230
so what is demo yet another you know

00:00:53,629 --> 00:01:04,019
demo a markup language and it was

00:01:01,230 --> 00:01:10,650
invented 2001 by or invent Kiki Clarke

00:01:04,019 --> 00:01:16,760
Evans and pinky dotnet and Miami I think

00:01:10,650 --> 00:01:16,760
he's in the audience right now and

00:01:17,240 --> 00:01:23,549
previous of my my talk um I heard a

00:01:20,280 --> 00:01:25,890
question should I use Jason or llamo and

00:01:23,549 --> 00:01:28,619
my answer is yes you should use Jason or

00:01:25,890 --> 00:01:32,240
yellow but maybe you actually meant to

00:01:28,619 --> 00:01:37,590
say should I use either Jason or young

00:01:32,240 --> 00:01:39,829
and it really depends so which

00:01:37,590 --> 00:01:43,110
applications are actually using yellow

00:01:39,829 --> 00:01:45,509
ansible saltstack travesty are a circle

00:01:43,110 --> 00:01:50,759
CI and so on he will need to stop her

00:01:45,509 --> 00:01:54,000
compose open QA and a lot more and for

00:01:50,759 --> 00:02:00,030
all these it would probably be not not

00:01:54,000 --> 00:02:02,430
so good to use jason and with the

00:02:00,030 --> 00:02:06,600
physical audience I would actually ask

00:02:02,430 --> 00:02:11,790
um who loves Yemen and who is angry at

00:02:06,600 --> 00:02:13,650
the mo so why are people angry at Yama

00:02:11,790 --> 00:02:17,549
so I I have some ideas but made

00:02:13,650 --> 00:02:20,610
um you can use the the feedback form

00:02:17,549 --> 00:02:24,209
after the talk maybe to to tell me why

00:02:20,610 --> 00:02:26,730
you are angry at llamo so I think that

00:02:24,209 --> 00:02:29,849
syntax can be quite hard to understand

00:02:26,730 --> 00:02:32,370
sometimes and there are a lot of

00:02:29,849 --> 00:02:37,680
differences in your implementations in

00:02:32,370 --> 00:02:40,500
Perl and in other languages just a short

00:02:37,680 --> 00:02:44,519
to some short examples is the mapping

00:02:40,500 --> 00:02:47,579
and the sequence and you can also write

00:02:44,519 --> 00:02:52,560
the sequence like that because the -

00:02:47,579 --> 00:02:58,129
counts as indentation nested mappings

00:02:52,560 --> 00:03:04,079
and you also have this flow style syntax

00:02:58,129 --> 00:03:06,720
it's more compact and you have anchors

00:03:04,079 --> 00:03:10,079
and aliases so the address is an anchor

00:03:06,720 --> 00:03:12,720
for this mapping and you can reuse it

00:03:10,079 --> 00:03:15,299
here and if you load it into pellets

00:03:12,720 --> 00:03:19,560
that's reference pointing to the same

00:03:15,299 --> 00:03:23,190
data structure and the other input can

00:03:19,560 --> 00:03:30,480
also have more than one document so you

00:03:23,190 --> 00:03:32,879
get actually a list and yeah I often see

00:03:30,480 --> 00:03:36,780
questions on IRC austech also and I

00:03:32,879 --> 00:03:38,730
would really like to point people to a

00:03:36,780 --> 00:03:44,389
website saying here's a really good

00:03:38,730 --> 00:03:47,340
tutorial but some have tiny mistakes

00:03:44,389 --> 00:03:52,970
missing stuff and we're actually written

00:03:47,340 --> 00:03:59,790
for young 1.1 so I started to write one

00:03:52,970 --> 00:04:03,480
two weeks ago it's still working

00:03:59,790 --> 00:04:08,970
progress so there's a little tutorial

00:04:03,480 --> 00:04:11,400
and here is all about quoting and an

00:04:08,970 --> 00:04:13,410
overview over some libraries so that

00:04:11,400 --> 00:04:18,900
actually some new libraries out there

00:04:13,410 --> 00:04:22,019
that support the 1.2 syntax and so all

00:04:18,900 --> 00:04:25,500
tests are passing so lip FMO and SEO

00:04:22,019 --> 00:04:27,979
dotnet and javascript is the new gamma

00:04:25,500 --> 00:04:27,979
library

00:04:28,550 --> 00:04:34,800
so check out them in this tutorial if

00:04:32,130 --> 00:04:36,300
you want to learn some llamo and the

00:04:34,800 --> 00:04:39,389
source of the tutorial is of course

00:04:36,300 --> 00:04:46,889
written and young and the HTML is of

00:04:39,389 --> 00:04:48,990
course generated with pearl so there are

00:04:46,889 --> 00:04:52,780
different demo versions it started with

00:04:48,990 --> 00:04:53,900
1.0 and gambol p.m. was written for that

00:04:52,780 --> 00:04:56,370
[Music]

00:04:53,900 --> 00:04:59,880
most implementations are they are still

00:04:56,370 --> 00:05:04,889
for 1.1 and many did not really

00:04:59,880 --> 00:05:08,760
implement it correctly so the

00:05:04,889 --> 00:05:11,130
specification is huge and it hard to

00:05:08,760 --> 00:05:13,919
understand it has examples but they do

00:05:11,130 --> 00:05:18,210
not cover all cases and there was no

00:05:13,919 --> 00:05:21,630
test suite until 2016 when you started

00:05:18,210 --> 00:05:26,160
one and this is now I think a huge

00:05:21,630 --> 00:05:30,449
success so far so more and more

00:05:26,160 --> 00:05:34,949
libraries are using it and there are

00:05:30,449 --> 00:05:36,960
also differences in the schema so and

00:05:34,949 --> 00:05:41,039
you might know yellow strings don't need

00:05:36,960 --> 00:05:44,789
to be quoted unless of course they start

00:05:41,039 --> 00:05:50,340
with a dash or a hole on space or they

00:05:44,789 --> 00:05:52,289
would be loaded as special values so I

00:05:50,340 --> 00:05:54,449
can actually see the check so here's a

00:05:52,289 --> 00:05:58,320
question how many values are loaded as

00:05:54,449 --> 00:06:08,400
boolean in Yama 1.1 anyone wants to make

00:05:58,320 --> 00:06:16,320
it guess how many that are nobody no far

00:06:08,400 --> 00:06:25,490
from it so we have true/false why and

00:06:16,320 --> 00:06:28,229
guess and no on and off so it's 22 and

00:06:25,490 --> 00:06:31,860
actually on the country code from Norway

00:06:28,229 --> 00:06:35,430
as loaded as a boolean so you have to

00:06:31,860 --> 00:06:38,400
quote it this was actually improved in

00:06:35,430 --> 00:06:40,230
the Emerald 1.2 but still a lot of

00:06:38,400 --> 00:06:46,020
libraries actually use one

00:06:40,230 --> 00:06:50,400
right one so - was one of the first

00:06:46,020 --> 00:06:54,000
implementations for 1.1 and lip demo was

00:06:50,400 --> 00:06:57,450
ported from that I think and many other

00:06:54,000 --> 00:07:01,490
implementations actually used PI ml and

00:06:57,450 --> 00:07:05,340
imported from them or I using lip demo

00:07:01,490 --> 00:07:09,390
finding and it left out some syntax

00:07:05,340 --> 00:07:11,370
elements like empty keys and also PI ml

00:07:09,390 --> 00:07:17,640
doesn't recognize the Y and the enemy

00:07:11,370 --> 00:07:22,370
also uppercase the implementations are

00:07:17,640 --> 00:07:24,900
kernel so we have five main modules and

00:07:22,370 --> 00:07:26,240
none of them actually you support the

00:07:24,900 --> 00:07:31,590
complete syntax

00:07:26,240 --> 00:07:35,970
I'm working on it but the cases that are

00:07:31,590 --> 00:07:39,150
left are not so relevant for real world

00:07:35,970 --> 00:07:42,930
and they all we have differently

00:07:39,150 --> 00:07:45,900
regarding the schema and grant the only

00:07:42,930 --> 00:07:52,080
yellow peepee supports the correct

00:07:45,900 --> 00:07:57,740
scheme after both versions and I made

00:07:52,080 --> 00:08:01,770
the list of the schema so here is the

00:07:57,740 --> 00:08:09,410
1.24 schema the only has those boolean

00:08:01,770 --> 00:08:09,410
values and here comes me in 0.1 1

00:08:13,260 --> 00:08:25,190
and here are examples so this is how it

00:08:20,430 --> 00:08:30,360
should resolve use the input llamo and

00:08:25,190 --> 00:08:33,320
here is the result and this is how llamo

00:08:30,360 --> 00:08:42,600
PM jung-sook and Dominic's s behave

00:08:33,320 --> 00:08:45,630
there's the bit chaos so this of course

00:08:42,600 --> 00:08:50,130
it's working if you if you just use one

00:08:45,630 --> 00:08:54,650
model and wait and write really it's

00:08:50,130 --> 00:08:57,630
fine but the user is really growing and

00:08:54,650 --> 00:08:59,790
it becomes more and more necessary to

00:08:57,630 --> 00:09:04,290
process your files with different

00:08:59,790 --> 00:09:07,200
libraries and even some configuration

00:09:04,290 --> 00:09:10,950
files are generated with the library

00:09:07,200 --> 00:09:12,960
instead of being and written and if they

00:09:10,950 --> 00:09:17,160
all behave differently this is going to

00:09:12,960 --> 00:09:20,850
be a real mess so I know if we can fix

00:09:17,160 --> 00:09:25,170
that and already nine different projects

00:09:20,850 --> 00:09:27,000
are using the llamo test suite and I'm

00:09:25,170 --> 00:09:30,950
also preparing a test suite for the

00:09:27,000 --> 00:09:41,190
schema for the boolean net number

00:09:30,950 --> 00:09:47,130
resulting and yeah so now llamo click

00:09:41,190 --> 00:09:49,560
clean it's implemented modular and makes

00:09:47,130 --> 00:09:55,590
custom processing possible and I shall

00:09:49,560 --> 00:09:58,440
use an example later and its goal is

00:09:55,590 --> 00:10:00,810
really to to be as comfortable as

00:09:58,440 --> 00:10:06,540
possible with other libraries so that

00:10:00,810 --> 00:10:09,180
you can switch on and off features so

00:10:06,540 --> 00:10:11,910
Yael implements the whole process intro

00:10:09,180 --> 00:10:14,790
it parses perl and directly creates a

00:10:11,910 --> 00:10:17,670
data structure and there are not so many

00:10:14,790 --> 00:10:19,710
possibilities to customize that I think

00:10:17,670 --> 00:10:22,740
you can inherit from a class but I never

00:10:19,710 --> 00:10:26,200
tried that actually young Lex

00:10:22,740 --> 00:10:30,780
s is using the sinkhole from lithium and

00:10:26,200 --> 00:10:35,100
keep creates a data structure and mixes

00:10:30,780 --> 00:10:39,090
so you can only set some options but

00:10:35,100 --> 00:10:46,150
other than that you have not influence

00:10:39,090 --> 00:10:52,780
and help you can see that have to make

00:10:46,150 --> 00:10:56,560
the window a little bit bigger on so

00:10:52,780 --> 00:10:58,870
young PP implementation on the left side

00:10:56,560 --> 00:11:00,670
we have the syntax and on the right side

00:10:58,870 --> 00:11:06,730
we have the schema which is about the

00:11:00,670 --> 00:11:08,410
Dorian's and numbers and when loading we

00:11:06,730 --> 00:11:12,190
have the yellow stream which is priced

00:11:08,410 --> 00:11:14,530
into tokens and generating an event list

00:11:12,190 --> 00:11:16,960
and from that it creates a data

00:11:14,530 --> 00:11:22,030
structure and the constructor is

00:11:16,960 --> 00:11:23,680
customized at all and for dumping it's

00:11:22,030 --> 00:11:25,660
pretty much the same you have the data

00:11:23,680 --> 00:11:31,000
structure it's creating a list of events

00:11:25,660 --> 00:11:34,120
and the output across this is this is

00:11:31,000 --> 00:11:38,110
quite slow actually because it's so

00:11:34,120 --> 00:11:41,830
customizable but the good thing is you

00:11:38,110 --> 00:11:43,450
can actually use lithium or behind so if

00:11:41,830 --> 00:11:47,110
you replaced a person and the

00:11:43,450 --> 00:11:51,250
environment you can get a little bit

00:11:47,110 --> 00:11:53,560
faster than that and you still benefit

00:11:51,250 --> 00:11:58,840
from from the customization of the

00:11:53,560 --> 00:12:00,160
constructor so some benchmark Channel 15

00:11:58,840 --> 00:12:06,220
years to slowest

00:12:00,160 --> 00:12:11,950
llaman module intro gem of PM is faster

00:12:06,220 --> 00:12:15,610
and with demo 50 lithium oh yeah you can

00:12:11,950 --> 00:12:19,680
save some time I think it's the mo tiny

00:12:15,610 --> 00:12:22,920
is even faster because it's really only

00:12:19,680 --> 00:12:27,600
subset and it doesn't know any types

00:12:22,920 --> 00:12:32,650
except tilde for undefined

00:12:27,600 --> 00:12:34,720
yeah mo tiny it's it's a problem if you

00:12:32,650 --> 00:12:37,540
use it and then you want to use another

00:12:34,720 --> 00:12:39,360
library because it accepts the ml that

00:12:37,540 --> 00:12:44,040
is not valid so you

00:12:39,360 --> 00:12:45,750
run into problems actually and of course

00:12:44,040 --> 00:12:51,360
you must suit and damn legs as are the

00:12:45,750 --> 00:12:54,779
fastest so some chance you can set the

00:12:51,360 --> 00:12:59,100
indentation but don't use five please

00:12:54,779 --> 00:13:00,750
that's just an example you can set the

00:12:59,100 --> 00:13:08,040
header and the footer one and version

00:13:00,750 --> 00:13:10,140
directive and so here's an option what's

00:13:08,040 --> 00:13:13,950
problematic about this if you are

00:13:10,140 --> 00:13:17,209
loading untrusted Emma the dis is

00:13:13,950 --> 00:13:21,300
setting an anchor on this array and

00:13:17,209 --> 00:13:25,350
inside this you are referring to itself

00:13:21,300 --> 00:13:32,970
and that can actually cause a memory

00:13:25,350 --> 00:13:36,510
leak and you can disable that slightly

00:13:32,970 --> 00:13:40,740
grabs fatal you can also just ignore

00:13:36,510 --> 00:13:45,680
them and load undef and there is no we

00:13:40,740 --> 00:13:45,680
cannot tune yet because it's complicated

00:13:49,350 --> 00:13:57,810
and also the next option so here's a

00:13:54,180 --> 00:13:59,700
yellow that is using a boolean and if

00:13:57,810 --> 00:14:03,180
you load that with young with the em and

00:13:59,700 --> 00:14:06,950
dump it with Jason you get the string

00:14:03,180 --> 00:14:13,380
true if you load that both the music and

00:14:06,950 --> 00:14:15,630
temple to Jason you get one so when

00:14:13,380 --> 00:14:19,680
you're 50 you can choose between

00:14:15,630 --> 00:14:22,140
different boolean options just one or

00:14:19,680 --> 00:14:27,000
the empty string or Jason PP or volume

00:14:22,140 --> 00:14:33,330
so it will run on trip that's also

00:14:27,000 --> 00:14:36,900
possible and Yan exists now on sometimes

00:14:33,330 --> 00:14:40,350
you might want to load a yellow and dump

00:14:36,900 --> 00:14:42,330
it again and others that should stay the

00:14:40,350 --> 00:14:45,630
same the order of hash keys but by

00:14:42,330 --> 00:14:50,070
default they are sorted but there's an

00:14:45,630 --> 00:14:55,890
option for that and it's implemented

00:14:50,070 --> 00:15:00,780
with the tie - so you use this constant

00:14:55,890 --> 00:15:03,380
and say preserve is your order and then

00:15:00,780 --> 00:15:07,320
it will through sort of the order

00:15:03,380 --> 00:15:10,440
there's another option so here is a list

00:15:07,320 --> 00:15:13,830
of strings playing scholar and sing it

00:15:10,440 --> 00:15:18,480
hold it which is not any more sing at

00:15:13,830 --> 00:15:22,860
all different damping so all the

00:15:18,480 --> 00:15:27,650
formatting on goes away and there's also

00:15:22,860 --> 00:15:30,570
an option preserve scale a style and

00:15:27,650 --> 00:15:33,810
this should be used only for loading and

00:15:30,570 --> 00:15:37,320
damping because it loads the string into

00:15:33,810 --> 00:15:44,070
an object and the overloading is very

00:15:37,320 --> 00:15:48,240
simple so far and you can try that out

00:15:44,070 --> 00:15:52,350
with this utility script so what about

00:15:48,240 --> 00:15:56,910
file types and objects and so they are

00:15:52,350 --> 00:16:00,000
not enabled by default but you can

00:15:56,910 --> 00:16:03,420
enable it with the schema option so the

00:16:00,000 --> 00:16:05,550
plus stands for the default schema

00:16:03,420 --> 00:16:07,200
and then you can add the prosumer and

00:16:05,550 --> 00:16:11,460
then you have all the references

00:16:07,200 --> 00:16:15,740
radicals and objects we need sometimes

00:16:11,460 --> 00:16:20,340
you only want to load certain classes

00:16:15,740 --> 00:16:22,890
and ignore others and for that you have

00:16:20,340 --> 00:16:25,770
another option so you instantiate this

00:16:22,890 --> 00:16:30,030
schema object and give it a list of

00:16:25,770 --> 00:16:40,050
classes and pass this object to the

00:16:30,030 --> 00:16:45,350
schema option so yeah what does this

00:16:40,050 --> 00:16:47,640
mean in yellow right keys and no

00:16:45,350 --> 00:16:51,470
programmer module does implement this

00:16:47,640 --> 00:16:54,060
yeah except Emily

00:16:51,470 --> 00:16:56,880
so I mentioned alias as an anchors

00:16:54,060 --> 00:17:01,530
before but this is something on top so

00:16:56,880 --> 00:17:05,010
you have but default hash and here you

00:17:01,530 --> 00:17:10,800
can reuse this but you can override

00:17:05,010 --> 00:17:15,600
values and also add values so just put

00:17:10,800 --> 00:17:18,150
dinner of the result and you can find it

00:17:15,600 --> 00:17:25,740
everywhere so people are using this a

00:17:18,150 --> 00:17:27,630
lot and it's very handy it's one of the

00:17:25,740 --> 00:17:29,970
number one point one types and some

00:17:27,630 --> 00:17:32,940
processes actually implement them and

00:17:29,970 --> 00:17:34,800
some don't and and yellow PP they're

00:17:32,940 --> 00:17:39,770
optional so if you need them you can

00:17:34,800 --> 00:17:39,770
enable them with the schema option

00:17:44,220 --> 00:17:52,570
so including other Yama files maybe you

00:17:49,860 --> 00:17:56,170
had to wish for doing something like

00:17:52,570 --> 00:17:58,630
this so we have a billing and a shipping

00:17:56,170 --> 00:18:06,430
address and you actually have those in

00:17:58,630 --> 00:18:08,590
other files and that's a custom tank and

00:18:06,430 --> 00:18:12,220
here's the billing address and this

00:18:08,590 --> 00:18:15,310
content will actually be loaded in this

00:18:12,220 --> 00:18:19,420
position it's not a standard llamo tech

00:18:15,310 --> 00:18:23,260
it's just the custom tech um you can you

00:18:19,420 --> 00:18:27,010
can implement any attack in the young

00:18:23,260 --> 00:18:29,800
library that supports it and it works

00:18:27,010 --> 00:18:33,700
like this you instantiate a schema

00:18:29,800 --> 00:18:39,390
include object and pass that to the

00:18:33,700 --> 00:18:42,790
schema gin and you still need this line

00:18:39,390 --> 00:18:47,470
and I hope I can actually make that

00:18:42,790 --> 00:18:50,010
optional but yes it's working and we're

00:18:47,470 --> 00:18:58,180
actually using this already it Susan

00:18:50,010 --> 00:19:00,670
so far no complaints and the include

00:18:58,180 --> 00:19:04,780
does allow nested influence but not

00:19:00,670 --> 00:19:09,130
cyclic and it is searching relative to

00:19:04,780 --> 00:19:11,950
the currently process demo file absolute

00:19:09,130 --> 00:19:16,620
paths are not allowed but you can enable

00:19:11,950 --> 00:19:18,730
it so if you want to load a TC password

00:19:16,620 --> 00:19:24,160
you can actually do that and it's

00:19:18,730 --> 00:19:29,680
actually a valid demo so you can say

00:19:24,160 --> 00:19:32,530
allow absolute and you can also pass it

00:19:29,680 --> 00:19:35,620
list of password to search from instead

00:19:32,530 --> 00:19:42,490
of searching relative to the current

00:19:35,620 --> 00:19:44,470
demo file you can also use both things

00:19:42,490 --> 00:19:52,030
together so we have a map key and

00:19:44,470 --> 00:19:54,430
include in it here and now you can also

00:19:52,030 --> 00:19:56,380
add your own country think I have to

00:19:54,430 --> 00:20:00,700
hurry up a bit

00:19:56,380 --> 00:20:05,740
so um maybe you see from the red X this

00:20:00,700 --> 00:20:10,210
is about roman numbers and we just

00:20:05,740 --> 00:20:15,720
passed a match red X and it gets the

00:20:10,210 --> 00:20:15,720
value and returns the integer for that I

00:20:16,020 --> 00:20:21,220
could have used some audio from Damien

00:20:18,640 --> 00:20:25,480
Conway but to keep it simple I just use

00:20:21,220 --> 00:20:27,280
this and here you have a second and

00:20:25,480 --> 00:20:33,669
another seven both will be loaded as

00:20:27,280 --> 00:20:40,260
integers the API it's not stable not but

00:20:33,669 --> 00:20:42,640
yeah so AWS CloudFormation is also using

00:20:40,260 --> 00:20:45,280
fractions like that so in the Chasen you

00:20:42,640 --> 00:20:47,580
have have to do this but in the ya mode

00:20:45,280 --> 00:20:50,140
you can use these custom tanks and

00:20:47,580 --> 00:20:53,679
there's a module that actually uses the

00:20:50,140 --> 00:21:01,200
OPP for that and there are also options

00:20:53,679 --> 00:21:04,780
to support both versions yeah and I

00:21:01,200 --> 00:21:06,520
didn't have time to port this to wrap

00:21:04,780 --> 00:21:09,510
who I really would like to do this at

00:21:06,520 --> 00:21:14,700
some point but didn't have time yet and

00:21:09,510 --> 00:21:14,700
that's it so are there any questions

00:21:22,059 --> 00:21:29,460
yeah so will the raku version began

00:21:26,679 --> 00:21:32,409
honor that's that's a nice idea but

00:21:29,460 --> 00:21:43,259
maybe an OTP actually stands for llamo

00:21:32,409 --> 00:21:45,519
flash plus so other questions okay then

00:21:43,259 --> 00:21:51,820
thank you very much the flights are

00:21:45,519 --> 00:21:53,940
linked from from the schedule and thank

00:21:51,820 --> 00:21:53,940

YouTube URL: https://www.youtube.com/watch?v=dc2SN5Xerjg


