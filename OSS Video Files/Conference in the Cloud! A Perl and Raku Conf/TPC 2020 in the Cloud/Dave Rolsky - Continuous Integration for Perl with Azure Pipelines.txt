Title: Dave Rolsky - Continuous Integration for Perl with Azure Pipelines
Publication date: 2020-06-26
Playlist: TPC 2020 in the Cloud
Description: 
	Continuous Integration (CI) is the thing all the cool kids are doing. If you do some CI you will be cool too. You know you wanna! CI lets you ensure that every commit that goes to production was tested against your test suite (you do have a test suite, right?). There are a lot of products for CI, both on premise and SaaS.

Azure Pipelines is one of those SaaS products. The free offering for open source projects allows you to run ten jobs (that’s a lot!) in parallel on Linux, macOS, and Windows. It also lets you run on bare metal or in Docker containers. It supports all sorts of powerful features like multi-stage builds, dependencies, output caching, and more.

We’ll talk about many of those features, using my ci-perl-helpers project for context. I may even do a live demo if I’m feeling foolish. (Spoiler: I often feel foolish.)

You’ll come away with a general understanding of how you might bring CI back to your own projects, whether they’re open source or for your day job (or both), as well as learn how to use my helpers project to test your Perl distributions.

Slides: https://www.houseabsolute.com/presentations/github/azure-ci/#/
Captions: 
	00:00:00,030 --> 00:00:04,890
all right great all right so this is

00:00:02,580 --> 00:00:07,519
continuous integration for Perl with

00:00:04,890 --> 00:00:10,469
these are pipelines

00:00:07,519 --> 00:00:11,219
my name is Dave for all ski and let's

00:00:10,469 --> 00:00:13,469
get started

00:00:11,219 --> 00:00:14,820
so first question was continuous

00:00:13,469 --> 00:00:17,100
integration well some of you are

00:00:14,820 --> 00:00:20,240
probably at mark and all off stock

00:00:17,100 --> 00:00:22,230
yesterday and all of did answer this and

00:00:20,240 --> 00:00:24,449
even if you're worried you probably know

00:00:22,230 --> 00:00:27,390
that's already but I'll define it anyway

00:00:24,449 --> 00:00:30,269
and the simple version is just running

00:00:27,390 --> 00:00:32,489
your tests on every commit or push you

00:00:30,269 --> 00:00:34,890
can do a lot more canvas integration you

00:00:32,489 --> 00:00:36,390
can build docker images you can do all

00:00:34,890 --> 00:00:39,300
sorts of stuff and you can take it to

00:00:36,390 --> 00:00:41,850
continuous deployment as well but really

00:00:39,300 --> 00:00:43,320
this is just gonna focus on tests at

00:00:41,850 --> 00:00:45,090
least for the first half of this time

00:00:43,320 --> 00:00:47,640
and actually I should say this is really

00:00:45,090 --> 00:00:49,379
two there's two chunks there's a chunk

00:00:47,640 --> 00:00:51,960
about my project for testing on Azure

00:00:49,379 --> 00:00:53,789
testing Pro projects on Azure and then a

00:00:51,960 --> 00:00:56,879
chunk where I just talk about some of

00:00:53,789 --> 00:00:58,649
the azure features and with continuous

00:00:56,879 --> 00:01:00,329
integration besides running the tests

00:00:58,649 --> 00:01:03,210
and on every commit of course you also

00:01:00,329 --> 00:01:05,250
want to block your merge and deploy

00:01:03,210 --> 00:01:07,590
actions when tests fail and that's

00:01:05,250 --> 00:01:09,600
really easy with things like get over I

00:01:07,590 --> 00:01:11,070
assume get lab where you can hook it up

00:01:09,600 --> 00:01:13,799
to your continuous integration system

00:01:11,070 --> 00:01:15,240
and if you have a PR that is failing its

00:01:13,799 --> 00:01:17,580
tests it won't even show the merge

00:01:15,240 --> 00:01:24,030
button or at least that's an option you

00:01:17,580 --> 00:01:26,369
can enable so as your pipelines is part

00:01:24,030 --> 00:01:29,189
of the overall add your service asher is

00:01:26,369 --> 00:01:31,799
microsoft's cloud services offering like

00:01:29,189 --> 00:01:35,700
AWS or google cloud platform

00:01:31,799 --> 00:01:39,299
pipelines is like one part of this huge

00:01:35,700 --> 00:01:41,310
set of services much like AWS there is

00:01:39,299 --> 00:01:43,710
an infinite number of services that are

00:01:41,310 --> 00:01:45,810
available but we're just going to talk

00:01:43,710 --> 00:01:50,790
about pipelines and that's it's a CI

00:01:45,810 --> 00:01:52,860
tool that's part of that so why did I

00:01:50,790 --> 00:01:55,799
pick a sure is a few reasons one it's

00:01:52,860 --> 00:01:57,899
totally free to it supports the big

00:01:55,799 --> 00:02:00,750
three platforms which are Linux Mac OS

00:01:57,899 --> 00:02:02,490
and Windows when I was starting on this

00:02:00,750 --> 00:02:05,399
project there you know there's a million

00:02:02,490 --> 00:02:07,229
CI systems there's so many but there

00:02:05,399 --> 00:02:10,140
aren't that many that are free with no

00:02:07,229 --> 00:02:13,590
usage limits and they give you access to

00:02:10,140 --> 00:02:15,330
all three platforms with Azure pipeline

00:02:13,590 --> 00:02:18,390
for free software of stuff you can run

00:02:15,330 --> 00:02:20,340
ten jobs in parallel which is great it

00:02:18,390 --> 00:02:21,810
has a whole lot of powerful features

00:02:20,340 --> 00:02:23,790
which I will talk about some of them

00:02:21,810 --> 00:02:27,000
cashing job templates all sorts of stuff

00:02:23,790 --> 00:02:29,190
and maybe most importantly when I pick

00:02:27,000 --> 00:02:32,040
this github actions didn't do all this

00:02:29,190 --> 00:02:33,870
stuff it didn't even have caching and

00:02:32,040 --> 00:02:36,330
this was like a year ago maybe

00:02:33,870 --> 00:02:38,430
so it's possible I'll switch this to

00:02:36,330 --> 00:02:41,430
github actions in the future just offer

00:02:38,430 --> 00:02:44,340
support for both I'll talk a little bit

00:02:41,430 --> 00:02:46,230
more about that later so let's talk

00:02:44,340 --> 00:02:48,890
about this project it's called CI pearl

00:02:46,230 --> 00:02:52,230
helpers it's just a repo on github

00:02:48,890 --> 00:02:54,269
here's the repo link and basically it's

00:02:52,230 --> 00:02:56,400
a set of templates and tools for testing

00:02:54,269 --> 00:02:58,019
Pro projects in Azure pipelines and it

00:02:56,400 --> 00:03:01,049
was inspired by a project that Graham

00:02:58,019 --> 00:03:03,360
nob created which is Travis - pearl /

00:03:01,049 --> 00:03:05,190
helpers and I used that for many many

00:03:03,360 --> 00:03:07,680
many years I mean I still have stuff

00:03:05,190 --> 00:03:09,360
that I haven't switched over and it was

00:03:07,680 --> 00:03:12,319
just a set of tools for making it easier

00:03:09,360 --> 00:03:14,459
to test Pro projects on Travis and

00:03:12,319 --> 00:03:17,129
specifically it made it easier to test

00:03:14,459 --> 00:03:19,170
with many perl versions which is

00:03:17,129 --> 00:03:21,269
something that can be a bit of a pain on

00:03:19,170 --> 00:03:24,299
these systems because you know though

00:03:21,269 --> 00:03:27,090
you know or whatever on the system yeah

00:03:24,299 --> 00:03:31,500
it has a perl but it doesn't have dozens

00:03:27,090 --> 00:03:33,060
of pearls so making this easier is

00:03:31,500 --> 00:03:35,549
really nice and that this project was

00:03:33,060 --> 00:03:37,470
great by the way I forgot to say at the

00:03:35,549 --> 00:03:39,060
beginning if you have questions I am

00:03:37,470 --> 00:03:41,940
reading chat feel free to put them in

00:03:39,060 --> 00:03:44,579
there feel free to raise your hand and

00:03:41,940 --> 00:03:50,700
doing can unmute you or you can unmute

00:03:44,579 --> 00:03:52,200
yourself really so yeah alright so the

00:03:50,700 --> 00:03:53,549
QuickStart for this project you have to

00:03:52,200 --> 00:03:56,130
do this thing called creating a service

00:03:53,549 --> 00:03:57,870
connection and I put some dogs in the

00:03:56,130 --> 00:04:01,440
readme it's a little annoying that you

00:03:57,870 --> 00:04:03,870
have to do this basically to access

00:04:01,440 --> 00:04:06,000
another repo in Azure not the one you're

00:04:03,870 --> 00:04:09,840
testing but something else you have to

00:04:06,000 --> 00:04:11,609
do this setup step this is something

00:04:09,840 --> 00:04:16,260
that github does not make you do which

00:04:11,609 --> 00:04:16,560
it's nice and then you make a gamble

00:04:16,260 --> 00:04:18,870
file

00:04:16,560 --> 00:04:21,389
everything's animal I don't really love

00:04:18,870 --> 00:04:24,150
you I'll be honest but all the CI

00:04:21,389 --> 00:04:26,190
services use yamo so this is the opening

00:04:24,150 --> 00:04:26,900
stanza you have to kind of declare that

00:04:26,190 --> 00:04:30,320
you're using

00:04:26,900 --> 00:04:31,880
this other repository and specifically

00:04:30,320 --> 00:04:36,560
you have this name and this endpoint

00:04:31,880 --> 00:04:38,960
they can be different the name is the

00:04:36,560 --> 00:04:41,509
name of the repo in this case on github

00:04:38,960 --> 00:04:44,930
the endpoint is the service connection

00:04:41,509 --> 00:04:46,190
name you can have them be the same or

00:04:44,930 --> 00:04:47,539
this endpoint could just be called

00:04:46,190 --> 00:04:50,000
github because really you're just

00:04:47,539 --> 00:04:53,810
connecting to get with this service

00:04:50,000 --> 00:04:57,380
connection but I am the docs just keep

00:04:53,810 --> 00:04:59,500
them the same for simplicity and then

00:04:57,380 --> 00:05:02,330
you have this other bit where you

00:04:59,500 --> 00:05:04,010
reference these two templates in my

00:05:02,330 --> 00:05:07,580
project so you can see it's a typical

00:05:04,010 --> 00:05:11,810
and the template path in the at CI purl

00:05:07,580 --> 00:05:13,760
helper so that's the repo here and then

00:05:11,810 --> 00:05:16,669
you can reference it by main here so we

00:05:13,760 --> 00:05:19,039
have the build template we have a Linux

00:05:16,669 --> 00:05:20,300
template with some parameters no getting

00:05:19,039 --> 00:05:22,789
it to more of what this does in the

00:05:20,300 --> 00:05:25,720
second and then there's Mac OS and

00:05:22,789 --> 00:05:33,380
Windows template any questions so far

00:05:25,720 --> 00:05:36,400
all makes total sense so when you do

00:05:33,380 --> 00:05:39,370
this this quick setup you get kind of my

00:05:36,400 --> 00:05:42,440
defaults and by default what you get is

00:05:39,370 --> 00:05:45,169
on Linux we're going to test every Perl

00:05:42,440 --> 00:05:48,500
with the latest patch release from 5bx

00:05:45,169 --> 00:05:50,990
to present so five eight nine and so on

00:05:48,500 --> 00:05:53,570
up to five thirty two three I don't know

00:05:50,990 --> 00:05:55,520
if five thirty to zero is available yet

00:05:53,570 --> 00:05:59,210
it's supposed to be doing it via cron

00:05:55,520 --> 00:06:00,979
but it's really hard to test that

00:05:59,210 --> 00:06:03,320
because there's nothing else often

00:06:00,979 --> 00:06:06,650
enough but it's easy to test so might

00:06:03,320 --> 00:06:08,960
not be you might not have made 3532

00:06:06,650 --> 00:06:11,330
available it also tests with the latest

00:06:08,960 --> 00:06:14,840
dev release which whenever at those

00:06:11,330 --> 00:06:17,590
slides was 5:30 to 1:11 and bleed which

00:06:14,840 --> 00:06:21,050
is the most recent commit in the Pro Kit

00:06:17,590 --> 00:06:23,150
and when it does this if you have a test

00:06:21,050 --> 00:06:24,710
failure with dev or bleed the run won't

00:06:23,150 --> 00:06:27,380
fail that's fine but if you have a

00:06:24,710 --> 00:06:29,449
compilation of failure install fails the

00:06:27,380 --> 00:06:33,199
entire run which is annoying there's not

00:06:29,449 --> 00:06:35,479
a way to mark a particular piece of this

00:06:33,199 --> 00:06:37,150
as allowing failures the way you can in

00:06:35,479 --> 00:06:39,800
Travis and that's that featuring this

00:06:37,150 --> 00:06:40,850
and by default all the tests are just

00:06:39,800 --> 00:06:44,180
run with

00:06:40,850 --> 00:06:47,180
in pearls there's no threading involved

00:06:44,180 --> 00:06:50,120
I'm a Mac OS we just get the latest

00:06:47,180 --> 00:06:51,800
stable release from Pro brew a Windows

00:06:50,120 --> 00:06:53,630
we use berry brew and get the latest

00:06:51,800 --> 00:06:56,660
stable release there so it's whatever is

00:06:53,630 --> 00:06:58,130
available but you can also pick the

00:06:56,660 --> 00:06:59,930
pearls you want and there's a lot of

00:06:58,130 --> 00:07:05,150
flexibility here so you can set from

00:06:59,930 --> 00:07:06,740
pearl in to pearl you can see an example

00:07:05,150 --> 00:07:09,470
here with from pearl I just said 5:00

00:07:06,740 --> 00:07:12,010
a.m. that'll get you the latest the last

00:07:09,470 --> 00:07:14,540
patch release of 510 but you can also

00:07:12,010 --> 00:07:18,260
pick a patch release of pearl so in -

00:07:14,540 --> 00:07:20,660
pearl you see 5.30 done 0 you can

00:07:18,260 --> 00:07:22,460
include threaded pearls in your builds

00:07:20,660 --> 00:07:23,660
which says okay I want you to use all

00:07:22,460 --> 00:07:25,790
these pearls and I want you to build

00:07:23,660 --> 00:07:27,770
threaded on unthreaded versions there's

00:07:25,790 --> 00:07:29,840
no threaded only option if somebody

00:07:27,770 --> 00:07:33,770
really wanted that it wouldn't be hard

00:07:29,840 --> 00:07:35,480
to add you can also for from for a -

00:07:33,770 --> 00:07:38,030
pearl really it's most useful you can

00:07:35,480 --> 00:07:40,910
say latest just the string latest get

00:07:38,030 --> 00:07:43,520
the most recent stable release and you

00:07:40,910 --> 00:07:46,100
can pick from any pearl available via

00:07:43,520 --> 00:07:49,940
pearl brew on Linux and Mac OS or berry

00:07:46,100 --> 00:07:51,380
brew on Windows so there's a lot of

00:07:49,940 --> 00:07:53,870
flexibility and as you can see you can

00:07:51,380 --> 00:07:57,740
also just pick arbitrary sets of pearls

00:07:53,870 --> 00:07:59,240
that's the second example and just one

00:07:57,740 --> 00:08:01,460
more note about include threads if

00:07:59,240 --> 00:08:03,950
you're testing anything that has excess

00:08:01,460 --> 00:08:06,590
code you really want to test with both

00:08:03,950 --> 00:08:09,380
threaded and unthreaded pearls because

00:08:06,590 --> 00:08:11,120
it is possible to have excess code that

00:08:09,380 --> 00:08:15,230
doesn't work properly with the thread of

00:08:11,120 --> 00:08:17,180
pearl it's depending on what's in your

00:08:15,230 --> 00:08:21,080
access it may or may not be likely but

00:08:17,180 --> 00:08:24,590
it's it's a good idea also supports

00:08:21,080 --> 00:08:28,040
coverage testing so you can pick a

00:08:24,590 --> 00:08:31,190
coverage service if you want you can

00:08:28,040 --> 00:08:32,719
also just generate an HTML report by

00:08:31,190 --> 00:08:36,020
default this is going to use the most

00:08:32,719 --> 00:08:38,240
recent pearl version and by the way in

00:08:36,020 --> 00:08:40,039
coverage works I'm not sure if I'm

00:08:38,240 --> 00:08:43,400
testing where but Linux I think it would

00:08:40,039 --> 00:08:45,830
work elsewhere and you can pick which

00:08:43,400 --> 00:08:48,530
coverage pearl or which version of pearl

00:08:45,830 --> 00:08:51,430
you want for coverage we said it

00:08:48,530 --> 00:08:53,690
supports like coveralls code cuff

00:08:51,430 --> 00:08:54,410
critical and a few other things you can

00:08:53,690 --> 00:08:57,440
also just

00:08:54,410 --> 00:08:59,449
a HTML report the way devel cover does

00:08:57,440 --> 00:09:00,649
you know kind of what's built into

00:08:59,449 --> 00:09:02,540
Duvall cover and you can make that

00:09:00,649 --> 00:09:06,519
available after the run for you to view

00:09:02,540 --> 00:09:08,870
from the CI system and it also supports

00:09:06,519 --> 00:09:11,360
partitioning the coverage testing into

00:09:08,870 --> 00:09:13,250
multiple partitions if you've done

00:09:11,360 --> 00:09:15,019
testing with devel cover you will know

00:09:13,250 --> 00:09:17,060
that it slows down your test suite quite

00:09:15,019 --> 00:09:19,189
a bit so if you have a very large test

00:09:17,060 --> 00:09:20,899
suite like with mousse you really don't

00:09:19,189 --> 00:09:23,329
want to run it all in one job that job

00:09:20,899 --> 00:09:25,279
will be very slow so you can say oh

00:09:23,329 --> 00:09:26,509
partition this into four partitions and

00:09:25,279 --> 00:09:28,279
it just does the right thing

00:09:26,509 --> 00:09:31,339
right now there's no support for doing

00:09:28,279 --> 00:09:35,930
that with non coverage runs but again

00:09:31,339 --> 00:09:38,240
that would it be hard to add DVD Coby

00:09:35,930 --> 00:09:40,670
your questions yes - perl latest is

00:09:38,240 --> 00:09:44,870
allowed I mean even from Perl latest

00:09:40,670 --> 00:09:46,430
will work and also one thing I didn't

00:09:44,870 --> 00:09:47,990
mention about to probe from pearls you

00:09:46,430 --> 00:09:50,600
can just have one of those so you can

00:09:47,990 --> 00:09:53,629
say - pearl latest which is equivalent

00:09:50,600 --> 00:09:56,029
to the default or you could do from

00:09:53,629 --> 00:09:58,420
pearl 5.12 and then I'll just pick all

00:09:56,029 --> 00:10:03,769
the latest patch releases from 512 X

00:09:58,420 --> 00:10:08,329
onwards I will get into what the testing

00:10:03,769 --> 00:10:11,300
does Oh what what am i using it for I'm

00:10:08,329 --> 00:10:14,000
using it for testing Sipan my projects

00:10:11,300 --> 00:10:17,290
that I upload to see Ben and William

00:10:14,000 --> 00:10:19,819
yes coveralls as coveralls that I oh

00:10:17,290 --> 00:10:22,279
dude questions all right so there's a

00:10:19,819 --> 00:10:23,930
whole bunch of other features it figures

00:10:22,279 --> 00:10:26,180
this system figures out your prereqs

00:10:23,930 --> 00:10:28,040
based on the metadata from your distro

00:10:26,180 --> 00:10:31,939
but you didn't have extra ones that will

00:10:28,040 --> 00:10:34,100
be installed particularly if there's

00:10:31,939 --> 00:10:35,899
something where it's like not you

00:10:34,100 --> 00:10:36,980
mentioned in your code but you check for

00:10:35,899 --> 00:10:39,500
it and then you could do something

00:10:36,980 --> 00:10:42,079
different you can just install this you

00:10:39,500 --> 00:10:44,540
can also install various system packages

00:10:42,079 --> 00:10:47,870
for some linux we're using apt and the

00:10:44,540 --> 00:10:51,889
app package is viable mac OS accuses

00:10:47,870 --> 00:10:54,709
brew brew anything from brew and a

00:10:51,889 --> 00:10:56,420
windows it uses chocolaty which does not

00:10:54,709 --> 00:10:59,649
have the same types of packages

00:10:56,420 --> 00:11:02,990
necessarily that you'll find in brew and

00:10:59,649 --> 00:11:06,350
apt but it's another option for doing

00:11:02,990 --> 00:11:07,570
stuff and then for maximum customization

00:11:06,350 --> 00:11:10,540
you can just add our rich

00:11:07,570 --> 00:11:12,130
steps to the process which can be

00:11:10,540 --> 00:11:15,000
anything that goes in an address step

00:11:12,130 --> 00:11:18,160
and I'll talk about what that is later

00:11:15,000 --> 00:11:22,510
so you can have pre and post-tests steps

00:11:18,160 --> 00:11:25,930
that just do whatever you want so the

00:11:22,510 --> 00:11:27,880
way this works is if you remember the

00:11:25,930 --> 00:11:29,770
first template was the build template

00:11:27,880 --> 00:11:33,990
and basically it just picks the right

00:11:29,770 --> 00:11:36,760
thing it'll build a tarball

00:11:33,990 --> 00:11:39,670
using one of these options in it you

00:11:36,760 --> 00:11:42,000
know checks for diesel Manila and then

00:11:39,670 --> 00:11:45,940
falls back to looking for a makefile PL

00:11:42,000 --> 00:11:48,760
and build up here that was brew for

00:11:45,940 --> 00:11:55,810
windows to the hepa type oh no that says

00:11:48,760 --> 00:11:57,550
chaco anyway maybe you're Oh what was

00:11:55,810 --> 00:11:59,800
Brut yeah yeah sorry it's called

00:11:57,550 --> 00:12:02,760
chocolatey chocolatey it's a package

00:11:59,800 --> 00:12:05,170
manager for Windows go to chocolaty org

00:12:02,760 --> 00:12:07,420
or if you're asking what the pro brew

00:12:05,170 --> 00:12:10,960
thing is it's called berry brew as Andy

00:12:07,420 --> 00:12:13,930
all right so that's the build stage and

00:12:10,960 --> 00:12:15,640
then the built stage always uses a

00:12:13,930 --> 00:12:18,610
modern curl this is important for des

00:12:15,640 --> 00:12:23,050
illa which will not build or which does

00:12:18,610 --> 00:12:25,510
not run requires pro 5:14 but your

00:12:23,050 --> 00:12:28,420
distro might be fine with 5/8 so the

00:12:25,510 --> 00:12:30,720
build stage always uses a mono girl it's

00:12:28,420 --> 00:12:33,940
just gonna use the latest stable release

00:12:30,720 --> 00:12:36,730
it installs your build time dependencies

00:12:33,940 --> 00:12:38,710
it also caches them between runs and

00:12:36,730 --> 00:12:40,300
that publishes a tarball as a pipeline

00:12:38,710 --> 00:12:41,920
artifact I'll get into more of the

00:12:40,300 --> 00:12:44,950
details of what pipeline artifacts are

00:12:41,920 --> 00:12:46,810
later one thing to note about the answer

00:12:44,950 --> 00:12:48,670
cache is is they're just deleted after a

00:12:46,810 --> 00:12:50,710
certain time period so if you only run

00:12:48,670 --> 00:12:52,360
these tests once a month won't help you

00:12:50,710 --> 00:12:55,110
but if you're doing repeated test runs

00:12:52,360 --> 00:12:57,550
it's a huge improvement in the speed and

00:12:55,110 --> 00:13:00,370
then the test stage or rather test

00:12:57,550 --> 00:13:03,010
stages all the test jobs run in parallel

00:13:00,370 --> 00:13:04,900
and Linux we're running in docker

00:13:03,010 --> 00:13:07,380
because I have docker images that have

00:13:04,900 --> 00:13:13,150
the pearls pre-installed which really

00:13:07,380 --> 00:13:15,940
speeds things up and Mac OS it's just a

00:13:13,150 --> 00:13:19,570
VM sorry Mac OS some windows you just

00:13:15,940 --> 00:13:20,970
get a VM each of the test job jobs also

00:13:19,570 --> 00:13:23,220
caches

00:13:20,970 --> 00:13:24,870
all the dependencies what my god what

00:13:23,220 --> 00:13:30,660
the

00:13:24,870 --> 00:13:34,259
could somebody mute whoever that was the

00:13:30,660 --> 00:13:36,000
joys of doing things ooh so it installs

00:13:34,259 --> 00:13:39,899
all the relevant depths it figures out

00:13:36,000 --> 00:13:42,209
what to install for example there's a

00:13:39,899 --> 00:13:45,329
test XT flag which enables like author

00:13:42,209 --> 00:13:48,779
and release tests and it will install

00:13:45,329 --> 00:13:50,610
those steps if that flag is needed it

00:13:48,779 --> 00:13:53,279
uploads the coverage results if that's

00:13:50,610 --> 00:13:55,740
applicable for the particular job and

00:13:53,279 --> 00:13:58,319
then it publishes the test results of

00:13:55,740 --> 00:14:02,670
Azure pipelines that publishing is kind

00:13:58,319 --> 00:14:05,600
of crap right now it uses J unit but the

00:14:02,670 --> 00:14:10,620
module I'm using produces J unit that

00:14:05,600 --> 00:14:12,120
doesn't just the azure is I'm able to

00:14:10,620 --> 00:14:14,430
display nicely because the way is

00:14:12,120 --> 00:14:15,930
specific formatting of the day Union J

00:14:14,430 --> 00:14:18,300
unit is completely undocumented

00:14:15,930 --> 00:14:19,980
basically it's very annoying I have some

00:14:18,300 --> 00:14:22,410
improvements to this that are pending

00:14:19,980 --> 00:14:24,060
but I haven't done it yet and bang

00:14:22,410 --> 00:14:27,230
Kaufmann asks would it be faster to use

00:14:24,060 --> 00:14:30,389
Windows docker images maybe probably

00:14:27,230 --> 00:14:33,509
don't know if it's even supported on

00:14:30,389 --> 00:14:34,920
Azure when I started this it wasn't but

00:14:33,509 --> 00:14:36,170
that's something I might look into in

00:14:34,920 --> 00:14:39,629
the future

00:14:36,170 --> 00:14:42,029
so another thing about the execution

00:14:39,629 --> 00:14:44,189
flow that I think is pretty cool is when

00:14:42,029 --> 00:14:46,410
the tools code runs the tools code is

00:14:44,189 --> 00:14:48,449
almost entirely problem every you know

00:14:46,410 --> 00:14:51,480
like Travis Perl and I think the thing

00:14:48,449 --> 00:14:53,040
Olaf and Niko worked on they're like oh

00:14:51,480 --> 00:14:55,050
it has a bunch of shell I don't know why

00:14:53,040 --> 00:14:58,559
people write off the stuff from shell I

00:14:55,050 --> 00:15:01,290
mean the Travis pearl shell is intense

00:14:58,559 --> 00:15:04,259
it's very intense I don't understand

00:15:01,290 --> 00:15:06,029
most of it I'm not a shell expert but

00:15:04,259 --> 00:15:06,660
you know what language I know pretty

00:15:06,029 --> 00:15:10,379
darn well

00:15:06,660 --> 00:15:12,240
it's Perl so almost all of the tools

00:15:10,379 --> 00:15:14,100
code is written in Perl there is a bit

00:15:12,240 --> 00:15:17,040
of shell especially in the templates

00:15:14,100 --> 00:15:20,430
themselves that's how you execute things

00:15:17,040 --> 00:15:21,959
in Azure you know in the VM or docker

00:15:20,430 --> 00:15:24,509
image you have to have a shell command

00:15:21,959 --> 00:15:26,879
but it just it's calling Perl but my

00:15:24,509 --> 00:15:29,399
tools code has its own Perl so all the

00:15:26,879 --> 00:15:31,850
dependencies that it needs you don't see

00:15:29,399 --> 00:15:35,430
them so there's there's a there's

00:15:31,850 --> 00:15:37,560
isolation between what's needed for

00:15:35,430 --> 00:15:39,150
the runners and what your project has so

00:15:37,560 --> 00:15:41,190
if your project doesn't declare its

00:15:39,150 --> 00:15:43,560
steps properly it's much more likely to

00:15:41,190 --> 00:15:46,530
be caught now the one exception is I

00:15:43,560 --> 00:15:50,460
installed a vel cover and the devel

00:15:46,530 --> 00:15:54,000
cover output modules in the testing

00:15:50,460 --> 00:15:55,920
pearls because that's what you need to

00:15:54,000 --> 00:15:59,400
do coverage testing one thing I could do

00:15:55,920 --> 00:16:02,310
is try to have separate images or

00:15:59,400 --> 00:16:04,830
installs for runs that use coverage or

00:16:02,310 --> 00:16:06,600
not but anyway there's a lot more

00:16:04,830 --> 00:16:07,920
isolation so all these things Olaf was

00:16:06,600 --> 00:16:09,990
like oh there's this problem with this

00:16:07,920 --> 00:16:11,880
and there's problems this this project

00:16:09,990 --> 00:16:13,470
handles it the only thing it doesn't

00:16:11,880 --> 00:16:15,480
handle the dimension that's the same

00:16:13,470 --> 00:16:18,600
problem you're always getting recent

00:16:15,480 --> 00:16:20,730
updates it runs the install of the

00:16:18,600 --> 00:16:22,410
prereq install stuff every single time

00:16:20,730 --> 00:16:25,110
and by the way you use a CPM so it

00:16:22,410 --> 00:16:29,970
doesn't a parallel it's really fast so

00:16:25,110 --> 00:16:33,420
here's what a test run looks like so you

00:16:29,970 --> 00:16:35,130
can see we have our build distro stage

00:16:33,420 --> 00:16:37,410
you know get into what these are what

00:16:35,130 --> 00:16:38,760
stages learn later builds a tarball and

00:16:37,410 --> 00:16:40,860
then we have these three things these

00:16:38,760 --> 00:16:44,010
three stages Linux Mac OS and Windows

00:16:40,860 --> 00:16:45,990
they all ran in parallel Linux ran 31

00:16:44,010 --> 00:16:48,960
jobs which is a lot of jobs a whole

00:16:45,990 --> 00:16:50,990
bunch of tests Mac OS ran three jobs

00:16:48,960 --> 00:16:53,220
because we ran with and without threads

00:16:50,990 --> 00:16:56,220
on windows there's no one threaded

00:16:53,220 --> 00:17:00,240
pearls so it just runs one test and if

00:16:56,220 --> 00:17:03,390
we look say at one of these you can see

00:17:00,240 --> 00:17:05,760
the individual steps so did a whole

00:17:03,390 --> 00:17:09,270
bunch of stuff probably most interesting

00:17:05,760 --> 00:17:13,950
one in many cases is run tests you can

00:17:09,270 --> 00:17:16,709
see just the full test output here so

00:17:13,950 --> 00:17:18,450
that's what it looks like and you can

00:17:16,709 --> 00:17:20,670
see the whole thing took 11 minutes and

00:17:18,450 --> 00:17:26,700
20 seconds of wall clock time which it's

00:17:20,670 --> 00:17:28,890
pretty darn good all right so it's a

00:17:26,700 --> 00:17:32,760
speaking of speed last time I ran

00:17:28,890 --> 00:17:34,980
daytime PM tests and Travis it was only

00:17:32,760 --> 00:17:37,290
on Linux the whole thing took 33 minutes

00:17:34,980 --> 00:17:40,170
of wall clock time this run you just saw

00:17:37,290 --> 00:17:42,900
was on Linux Mac OS windows more pearls

00:17:40,170 --> 00:17:45,030
on Linux because I think last time I

00:17:42,900 --> 00:17:47,400
used Travis there was only 528 only took

00:17:45,030 --> 00:17:49,260
11 minutes and the other thing to not

00:17:47,400 --> 00:17:53,040
forget about

00:17:49,260 --> 00:17:54,960
is that there's also cute I'm so with

00:17:53,040 --> 00:17:59,760
Travis you only get three or four

00:17:54,960 --> 00:18:01,200
parallel jobs so multiple like if you

00:17:59,760 --> 00:18:03,240
push multiple times or have multiple

00:18:01,200 --> 00:18:05,669
branches cute or multiple projects are

00:18:03,240 --> 00:18:07,530
working on they tend to block each other

00:18:05,669 --> 00:18:09,390
for much longer than with a or where you

00:18:07,530 --> 00:18:12,960
got ten jobs parallel so that's a really

00:18:09,390 --> 00:18:14,790
big deal so yeah why is it faster I mean

00:18:12,960 --> 00:18:17,450
I already spoiled the last bullet point

00:18:14,790 --> 00:18:19,860
but the others are I think notable

00:18:17,450 --> 00:18:21,270
Travis doesn't support docker so

00:18:19,860 --> 00:18:26,820
everything has to be installed from

00:18:21,270 --> 00:18:29,970
scratch for each job even like the Pearl

00:18:26,820 --> 00:18:31,590
itself with Azure using docker you get a

00:18:29,970 --> 00:18:34,760
lot of stuff pre-installed including

00:18:31,590 --> 00:18:37,580
mostly pearl and now Travis pearl did

00:18:34,760 --> 00:18:40,140
pre build pearl so it would download

00:18:37,580 --> 00:18:42,660
binaries in many cases which was pretty

00:18:40,140 --> 00:18:44,250
cool but if you're using Travis for

00:18:42,660 --> 00:18:45,780
Pearl one thing it does which isn't so

00:18:44,250 --> 00:18:48,059
cool is it builds the district's

00:18:45,780 --> 00:18:50,190
hardball for every single job and then

00:18:48,059 --> 00:18:51,870
unpacks it and test it whereas with my

00:18:50,190 --> 00:18:53,880
system it builds the district or well

00:18:51,870 --> 00:18:56,460
once uploads it to the pipeline

00:18:53,880 --> 00:18:58,320
artifacts system and then all the test

00:18:56,460 --> 00:19:00,179
jobs are just downloading that unpacking

00:18:58,320 --> 00:19:02,340
and testing it and then as I mentioned

00:19:00,179 --> 00:19:04,710
there's a difference in concurrency I

00:19:02,340 --> 00:19:06,840
want to say this isn't a dig against

00:19:04,710 --> 00:19:08,820
Travis Burrell it was awesome when it

00:19:06,840 --> 00:19:11,700
was created it was huge step forward for

00:19:08,820 --> 00:19:18,559
a pearl testing it's you know it goes

00:19:11,700 --> 00:19:21,120
back I don't know ten years already and

00:19:18,559 --> 00:19:23,070
when it was created it was state of the

00:19:21,120 --> 00:19:25,350
art as was Travis it's just things have

00:19:23,070 --> 00:19:26,640
moved on like the CI world as we've done

00:19:25,350 --> 00:19:29,940
in terms of capabilities

00:19:26,640 --> 00:19:32,429
Andy is asking what does truck what is a

00:19:29,940 --> 00:19:34,320
deer that Travis doesn't especially if

00:19:32,429 --> 00:19:35,880
you're using Travis already well the big

00:19:34,320 --> 00:19:38,130
thing for me that would make me wanna

00:19:35,880 --> 00:19:40,530
spit switch is it's much much faster I

00:19:38,130 --> 00:19:44,400
found the time it took to finish Travis

00:19:40,530 --> 00:19:46,799
rounds really annoying that said is

00:19:44,400 --> 00:19:49,860
there anything he absolutely cannot do

00:19:46,799 --> 00:19:52,799
in Travis well docker but even because

00:19:49,860 --> 00:19:56,010
Travis friends everything in VMs you

00:19:52,799 --> 00:19:57,210
probably can run docker on those VMs so

00:19:56,010 --> 00:20:02,610
I don't I don't know that there's

00:19:57,210 --> 00:20:05,100
anything absolutely can only do a sure

00:20:02,610 --> 00:20:10,620
can't do in Travis it's just as I'm sure

00:20:05,100 --> 00:20:14,280
has a lot more features pre-pre made for

00:20:10,620 --> 00:20:17,340
you and the speed and the great support

00:20:14,280 --> 00:20:18,750
for Windows Mac OS Linux but I think

00:20:17,340 --> 00:20:20,730
Travis now supports all those services

00:20:18,750 --> 00:20:24,990
as well so anyway I know there's nothing

00:20:20,730 --> 00:20:27,630
nothing apps J is a sure better than

00:20:24,990 --> 00:20:30,960
circle CI I actually prefer some o CI

00:20:27,630 --> 00:20:33,030
circle CI is the best but it has

00:20:30,960 --> 00:20:35,940
terrible limits for free software

00:20:33,030 --> 00:20:38,190
projects that make it unusable when I

00:20:35,940 --> 00:20:42,270
was working on this I started in circle

00:20:38,190 --> 00:20:44,220
CI first of all it's parallelism is much

00:20:42,270 --> 00:20:46,140
lower it's like for jobs but more

00:20:44,220 --> 00:20:48,510
importantly while you get a certain

00:20:46,140 --> 00:20:50,370
amount of credits per month the limits

00:20:48,510 --> 00:20:51,780
on Windows meant you had like an hour of

00:20:50,370 --> 00:20:52,830
Windows time per month which was

00:20:51,780 --> 00:20:54,780
obviously unusable

00:20:52,830 --> 00:20:56,100
I couldn't even like really develop this

00:20:54,780 --> 00:20:58,200
because I just would use all my time

00:20:56,100 --> 00:20:59,400
really quickly so I gave up on circles

00:20:58,200 --> 00:21:01,110
yeah I don't know if that's changed

00:20:59,400 --> 00:21:03,030
since then but circle C is so good

00:21:01,110 --> 00:21:04,980
especially it's the only one that has

00:21:03,030 --> 00:21:07,770
this awesome feature we're in all the OS

00:21:04,980 --> 00:21:10,679
is you can run a job and enable SSH SSH

00:21:07,770 --> 00:21:12,330
into the Machine and inspect why it's

00:21:10,679 --> 00:21:12,929
not working which is just the coolest

00:21:12,330 --> 00:21:16,980
thing ever

00:21:12,929 --> 00:21:18,390
I like alright any other questions so

00:21:16,980 --> 00:21:20,160
far so that was that was about my

00:21:18,390 --> 00:21:27,840
project and then next I'm just going to

00:21:20,160 --> 00:21:29,610
talk about Asher in general anything all

00:21:27,840 --> 00:21:33,179
right so let's talk about after the

00:21:29,610 --> 00:21:35,429
slides are on my on the site and I like

00:21:33,179 --> 00:21:37,049
them from the presentation so if you

00:21:35,429 --> 00:21:40,020
want to go to the Azure pipeline stocks

00:21:37,049 --> 00:21:43,650
home there's a link uses Yambol based

00:21:40,020 --> 00:21:45,270
config like everything I say about with

00:21:43,650 --> 00:21:48,630
annoyance because I don't love you I'll

00:21:45,270 --> 00:21:49,380
be honest it's not my favorite it's so

00:21:48,630 --> 00:21:53,790
complicated

00:21:49,380 --> 00:21:56,490
anyway supports Linux on VMs were using

00:21:53,790 --> 00:21:58,260
docker Mac OS and Windows VMs totally

00:21:56,490 --> 00:22:00,299
free for public projects and no usage

00:21:58,260 --> 00:22:02,160
limits whatsoever and I should mention

00:22:00,299 --> 00:22:04,290
go so mark was saying with circle CI

00:22:02,160 --> 00:22:06,600
yesterday well you can get this much

00:22:04,290 --> 00:22:09,330
credit and you can run for weeks worth

00:22:06,600 --> 00:22:11,550
of Linux well ok that's true but if

00:22:09,330 --> 00:22:14,220
you're running like 20 different perl

00:22:11,550 --> 00:22:16,440
versions for every push that's not

00:22:14,220 --> 00:22:19,260
really four weeks of that it's four

00:22:16,440 --> 00:22:23,700
makes one job so if you run 20 jobs it's

00:22:19,260 --> 00:22:25,200
a lot less if you need to run a private

00:22:23,700 --> 00:22:29,160
CI server not in cloud what would you

00:22:25,200 --> 00:22:31,170
recommend as your github circle they all

00:22:29,160 --> 00:22:33,570
support that so again I I still think

00:22:31,170 --> 00:22:35,250
circle is the best and if you're doing

00:22:33,570 --> 00:22:39,330
it for private stuff if you're if you're

00:22:35,250 --> 00:22:42,150
paying your circle that's great general

00:22:39,330 --> 00:22:44,190
question now it seems like people tend

00:22:42,150 --> 00:22:45,840
to avoid thread of pearls why thread

00:22:44,190 --> 00:22:47,100
pearls are slower than on thread of

00:22:45,840 --> 00:22:48,810
pearls and if you're not using threads

00:22:47,100 --> 00:22:50,310
you're paying like a 10% speed it

00:22:48,810 --> 00:22:53,790
there's something like that don't quote

00:22:50,310 --> 00:22:55,860
me on the number all right so should you

00:22:53,790 --> 00:22:57,630
use Azure well we've talked about a

00:22:55,860 --> 00:22:59,520
whole bunch of things but one thing I

00:22:57,630 --> 00:23:01,320
haven't mentioned is I'm not sure what

00:22:59,520 --> 00:23:04,770
the future is a badger pipelines with

00:23:01,320 --> 00:23:06,840
github CI github actions I've heard

00:23:04,770 --> 00:23:08,940
rumors that Microsoft is going to focus

00:23:06,840 --> 00:23:11,610
on github and github actions in the

00:23:08,940 --> 00:23:13,440
future one nice thing is github actions

00:23:11,610 --> 00:23:16,560
and Azure using the same VMs under the

00:23:13,440 --> 00:23:19,620
hood and they're really similar

00:23:16,560 --> 00:23:21,510
conceptually and the way they work they

00:23:19,620 --> 00:23:23,540
both use yam all the actual details of

00:23:21,510 --> 00:23:28,410
the Gamo keys are different but even

00:23:23,540 --> 00:23:30,630
there they are broadly similar so it's

00:23:28,410 --> 00:23:34,140
possible I will just port this project

00:23:30,630 --> 00:23:36,210
to github in the future the only reason

00:23:34,140 --> 00:23:38,130
github was my kind of second choice

00:23:36,210 --> 00:23:40,350
after circle but it didn't support

00:23:38,130 --> 00:23:42,150
things like caching when I was looking

00:23:40,350 --> 00:23:46,250
at it about a year year and a half ago

00:23:42,150 --> 00:23:49,560
so yeah sure was the best option then

00:23:46,250 --> 00:23:51,870
github I think Olaf said supports 20

00:23:49,560 --> 00:23:54,330
parallel jobs which is even more awesome

00:23:51,870 --> 00:23:55,920
so it's possible I'll switch and I don't

00:23:54,330 --> 00:23:58,140
think it'll be that hard to port

00:23:55,920 --> 00:24:00,180
it's also possible I just support both I

00:23:58,140 --> 00:24:02,070
mean it wouldn't be that hard like I

00:24:00,180 --> 00:24:06,930
said these tools are written in Perl and

00:24:02,070 --> 00:24:08,610
the tools are not too tied to a sure

00:24:06,930 --> 00:24:10,170
it's the templates that are really

00:24:08,610 --> 00:24:12,990
closely tied to a sure so you could

00:24:10,170 --> 00:24:17,640
build a separate set of templates for

00:24:12,990 --> 00:24:20,220
github they call templates actions those

00:24:17,640 --> 00:24:23,480
templates could use the same Pro code

00:24:20,220 --> 00:24:25,740
with a few tweaks I think so anyway

00:24:23,480 --> 00:24:28,740
that's something to think about

00:24:25,740 --> 00:24:30,270
that said this works really well Jayne

00:24:28,740 --> 00:24:32,670
Jenkins no

00:24:30,270 --> 00:24:35,850
Jenkins is the worst never use Jenkins

00:24:32,670 --> 00:24:37,559
it's so buggy I hate it get let's see it

00:24:35,850 --> 00:24:39,360
get lab see I haven't looked at it too

00:24:37,559 --> 00:24:42,030
much I think you'd only supported Linux

00:24:39,360 --> 00:24:45,330
when I looked at it but it might be good

00:24:42,030 --> 00:24:48,150
alright so let's talk about kind of how

00:24:45,330 --> 00:24:49,710
Azure works whether it's made so the top

00:24:48,150 --> 00:24:52,740
level is you have stages so if you

00:24:49,710 --> 00:24:57,120
remember when I show the date/time

00:24:52,740 --> 00:24:59,370
example which I grabbed the closed see

00:24:57,120 --> 00:25:03,870
if they can open it up so you can see

00:24:59,370 --> 00:25:06,090
these are the stages these big boxes so

00:25:03,870 --> 00:25:08,309
a stage contains one or more jobs by

00:25:06,090 --> 00:25:10,710
default the stages run in sequence just

00:25:08,309 --> 00:25:13,530
the sequence in which they're declared

00:25:10,710 --> 00:25:15,330
in your gamal but you can run stages and

00:25:13,530 --> 00:25:16,920
parallel by declaring dependencies

00:25:15,330 --> 00:25:19,260
between stages if you have a dependency

00:25:16,920 --> 00:25:22,710
graph it just figures out how it should

00:25:19,260 --> 00:25:25,320
be run a stage contains one or more jobs

00:25:22,710 --> 00:25:27,540
by default all the jobs are parallel and

00:25:25,320 --> 00:25:29,730
the jobs can name one or more steps and

00:25:27,540 --> 00:25:33,420
each job to run in a VM or a docker

00:25:29,730 --> 00:25:35,460
image and in this system these are the

00:25:33,420 --> 00:25:38,490
jobs these three things for example and

00:25:35,460 --> 00:25:40,530
these were not run in parallel because

00:25:38,490 --> 00:25:42,720
you can also have dependencies between

00:25:40,530 --> 00:25:45,230
jobs so this generate Mac OS test matrix

00:25:42,720 --> 00:25:49,610
that is what everything else depends on

00:25:45,230 --> 00:25:52,860
and I will explain the matrix in a bit

00:25:49,610 --> 00:25:54,660
so jobs always have one or more steps

00:25:52,860 --> 00:25:56,790
the steps are always run in sequence

00:25:54,660 --> 00:26:00,480
there's no such thing as a dependency

00:25:56,790 --> 00:26:01,860
graph for the steps so there's this

00:26:00,480 --> 00:26:04,860
notion of conditions and that's how you

00:26:01,860 --> 00:26:08,010
get your dependency graph so stages jobs

00:26:04,860 --> 00:26:09,210
and steps can all have conditions or

00:26:08,010 --> 00:26:10,500
sorry this isn't how you get your

00:26:09,210 --> 00:26:14,850
dependence graph that's something else

00:26:10,500 --> 00:26:16,320
you could have like any condition like

00:26:14,850 --> 00:26:18,030
run this job if this other job was

00:26:16,320 --> 00:26:20,070
successful or run into this job with

00:26:18,030 --> 00:26:21,600
this job failed you can also have

00:26:20,070 --> 00:26:23,600
conditions based on all sorts of other

00:26:21,600 --> 00:26:26,130
things and in particular with templates

00:26:23,600 --> 00:26:29,790
templates take parameters and you can

00:26:26,130 --> 00:26:31,410
use those in your conditions can also

00:26:29,790 --> 00:26:33,720
have dependencies that's how you get

00:26:31,410 --> 00:26:35,850
your dependency graph so stages can

00:26:33,720 --> 00:26:38,220
depend on other stages jobs can depend

00:26:35,850 --> 00:26:41,520
on other jobs and again as you're just

00:26:38,220 --> 00:26:44,570
like runs things in the right order as

00:26:41,520 --> 00:26:48,330
parallel as possible based on this

00:26:44,570 --> 00:26:50,340
and you can communicate between stages I

00:26:48,330 --> 00:26:52,560
use communication loosely it's not like

00:26:50,340 --> 00:26:54,330
a live message passing thing but rather

00:26:52,560 --> 00:26:56,090
four stages you can publish what are

00:26:54,330 --> 00:26:59,460
called pipeline artifacts so I mentioned

00:26:56,090 --> 00:27:01,440
earlier that the way my system works for

00:26:59,460 --> 00:27:02,190
Perl is you have this build stage that

00:27:01,440 --> 00:27:04,410
builds a tarball

00:27:02,190 --> 00:27:06,630
it uploads it as a pipeline artifact and

00:27:04,410 --> 00:27:09,630
then all future stages can easily access

00:27:06,630 --> 00:27:12,570
that artifact the artifacts can either

00:27:09,630 --> 00:27:15,180
be a single file or a folder and that's

00:27:12,570 --> 00:27:17,010
it it's just it's just like a temporary

00:27:15,180 --> 00:27:20,580
file store for the duration of the

00:27:17,010 --> 00:27:22,500
pipeline this is different then I think

00:27:20,580 --> 00:27:24,870
actually these aren't available after

00:27:22,500 --> 00:27:26,130
the fact so I'd say I was good about to

00:27:24,870 --> 00:27:27,690
say something wrong anyway

00:27:26,130 --> 00:27:29,640
yeah publish artifacts are available

00:27:27,690 --> 00:27:33,780
forever you could also use them to

00:27:29,640 --> 00:27:35,130
publish like builds in in Azure but of

00:27:33,780 --> 00:27:37,380
course if you want to say publish a

00:27:35,130 --> 00:27:39,960
build on github there's going to be a

00:27:37,380 --> 00:27:42,000
way to do that as well you can also

00:27:39,960 --> 00:27:44,490
communicate between jobs and between

00:27:42,000 --> 00:27:46,830
steps and again this is not message

00:27:44,490 --> 00:27:49,170
passing this is just a way to pick up

00:27:46,830 --> 00:27:51,150
output from an earlier job or earlier

00:27:49,170 --> 00:27:54,030
step so you use pipeline artifacts

00:27:51,150 --> 00:27:55,890
between jobs you can also do pipeline

00:27:54,030 --> 00:27:58,170
variables which are set in one step and

00:27:55,890 --> 00:28:00,180
read in another and then you can do

00:27:58,170 --> 00:28:04,220
what's called output pipeline variables

00:28:00,180 --> 00:28:07,740
which set you can pass between jobs so

00:28:04,220 --> 00:28:10,530
one job step said sets it and then a

00:28:07,740 --> 00:28:12,990
later job which depends on the earlier

00:28:10,530 --> 00:28:15,210
job can read it which is pretty cool and

00:28:12,990 --> 00:28:20,370
you can do some really great stuff with

00:28:15,210 --> 00:28:26,130
that you can also do matrixes matrix job

00:28:20,370 --> 00:28:29,130
matrix words job matrixes so this is a

00:28:26,130 --> 00:28:32,630
simple version where you say okay the

00:28:29,130 --> 00:28:35,190
strategy is matrix and it's based on

00:28:32,630 --> 00:28:36,720
images it's not as flexible as the

00:28:35,190 --> 00:28:40,410
github matrix you can't have like

00:28:36,720 --> 00:28:43,230
multiple matrix aspects like OS + Perl

00:28:40,410 --> 00:28:46,230
version and so on but there's a way

00:28:43,230 --> 00:28:48,900
around that that is I think pretty slick

00:28:46,230 --> 00:28:51,600
and then you reference your matrix

00:28:48,900 --> 00:28:56,340
variable you can see that here I forgot

00:28:51,600 --> 00:28:57,440
to highlight this and then the steps are

00:28:56,340 --> 00:28:59,179
just going to be able to see

00:28:57,440 --> 00:29:02,149
every job the matrix it just figures out

00:28:59,179 --> 00:29:04,460
how many jobs to read but there's a

00:29:02,149 --> 00:29:07,100
really cool thing you can do so you can

00:29:04,460 --> 00:29:09,370
generate the matrix from a steps output

00:29:07,100 --> 00:29:11,870
so here you have some batch code

00:29:09,370 --> 00:29:14,809
executing print matrix this is like a

00:29:11,870 --> 00:29:17,090
thing this is how my stuff works and

00:29:14,809 --> 00:29:19,610
then you do this special thing where you

00:29:17,090 --> 00:29:22,549
print out this thing to standard out

00:29:19,610 --> 00:29:24,860
with the special prefix and then a bunch

00:29:22,549 --> 00:29:26,330
of gibberish in here and you say it's an

00:29:24,860 --> 00:29:28,519
output variable and then you print out

00:29:26,330 --> 00:29:32,600
the contents of Dollar matrix and it

00:29:28,519 --> 00:29:34,779
becomes available for future steps so

00:29:32,600 --> 00:29:38,090
the contents of Dollar matrix is JSON

00:29:34,779 --> 00:29:41,750
each top-level key Emma's JSON is a job

00:29:38,090 --> 00:29:43,820
to be run and then the objects in that

00:29:41,750 --> 00:29:45,470
key are the jobs variables and this is

00:29:43,820 --> 00:29:51,169
like this crazy cool thing that you can

00:29:45,470 --> 00:29:54,259
do so for my CI Perl helpers it figures

00:29:51,169 --> 00:29:57,379
out what goes in each of these stages in

00:29:54,259 --> 00:29:58,909
this first step where or second step in

00:29:57,379 --> 00:30:00,649
some cases where it generates the test

00:29:58,909 --> 00:30:03,889
matrix and that test matrix is what

00:30:00,649 --> 00:30:06,590
generates all of these jobs so basically

00:30:03,889 --> 00:30:08,600
you get a whole bunch of parameters for

00:30:06,590 --> 00:30:11,090
each job and it just does the right

00:30:08,600 --> 00:30:16,850
thing I thought that was pretty darn

00:30:11,090 --> 00:30:18,440
cool so the steps themselves are what

00:30:16,850 --> 00:30:20,509
you'd expect you can check out code

00:30:18,440 --> 00:30:22,490
whether it's this repo or another repo

00:30:20,509 --> 00:30:24,799
that you have a service connection to

00:30:22,490 --> 00:30:27,019
you know predefined tasks there's lots

00:30:24,799 --> 00:30:29,539
of those they're just like the github

00:30:27,019 --> 00:30:31,129
actions other people can write and then

00:30:29,539 --> 00:30:33,139
you can have shell so you can do bash on

00:30:31,129 --> 00:30:36,049
Linux and Mac OS PowerShell core and

00:30:33,139 --> 00:30:38,110
Linux and windows and then Windows you

00:30:36,049 --> 00:30:40,639
can use bash commands on PowerShell I

00:30:38,110 --> 00:30:43,340
suggest just using bash you can use the

00:30:40,639 --> 00:30:46,190
same thing on all of them I still had to

00:30:43,340 --> 00:30:48,679
do a lot of work with my Perl helpers

00:30:46,190 --> 00:30:51,470
project to get everything to work on

00:30:48,679 --> 00:30:55,700
Windows in particular path handling can

00:30:51,470 --> 00:30:57,110
get a little weird the sometimes you end

00:30:55,700 --> 00:31:00,169
up with paths with forward slashes

00:30:57,110 --> 00:31:03,769
sometimes with back slashes it's it's

00:31:00,169 --> 00:31:05,299
kind of a mess I think in the future I'm

00:31:03,769 --> 00:31:08,269
going to be surprised if they support

00:31:05,299 --> 00:31:09,679
say windows subsystem for Linux but

00:31:08,269 --> 00:31:11,090
actually that wouldn't really be testing

00:31:09,679 --> 00:31:16,910
on Windows so I don't know why I bring

00:31:11,090 --> 00:31:19,820
anyway you also one thing to note is the

00:31:16,910 --> 00:31:23,060
pipelines repo the pipeline is attached

00:31:19,820 --> 00:31:24,770
to a project the repo for that project

00:31:23,060 --> 00:31:27,020
it's just automatically checked out by

00:31:24,770 --> 00:31:28,880
default you can change that how it's

00:31:27,020 --> 00:31:30,980
checked out or you can not check it out

00:31:28,880 --> 00:31:34,250
anything you know configure lots of

00:31:30,980 --> 00:31:36,950
aspects of that there's all sorts of

00:31:34,250 --> 00:31:39,200
tasks that you can find pre-made ones

00:31:36,950 --> 00:31:41,780
from a sure as well as third parties

00:31:39,200 --> 00:31:44,150
lots of helpers for things like ant may

00:31:41,780 --> 00:31:46,250
have been generic utility is like

00:31:44,150 --> 00:31:48,980
extract an archive lots of other things

00:31:46,250 --> 00:31:50,660
packaging deployment stuff there's a

00:31:48,980 --> 00:31:51,530
whole marketplace and you can also write

00:31:50,660 --> 00:31:55,130
your own and they're written in

00:31:51,530 --> 00:31:57,380
JavaScript I think the github czar also

00:31:55,130 --> 00:32:00,680
written in JavaScript so I think again

00:31:57,380 --> 00:32:02,450
there's some similarities there you can

00:32:00,680 --> 00:32:04,970
also have templates again this is how my

00:32:02,450 --> 00:32:07,040
project works so a template can come

00:32:04,970 --> 00:32:09,830
from the current projects repo or you

00:32:07,040 --> 00:32:12,470
can reference another repo you can

00:32:09,830 --> 00:32:14,090
define stages job steps as templates as

00:32:12,470 --> 00:32:15,830
well as variables I didn't really go

00:32:14,090 --> 00:32:18,500
into a lot detail variables it's pretty

00:32:15,830 --> 00:32:20,440
straight for a thing you set variables

00:32:18,500 --> 00:32:24,260
and they're available in your steps

00:32:20,440 --> 00:32:26,440
templates can take parameters and so

00:32:24,260 --> 00:32:30,230
it's a way to configure things again

00:32:26,440 --> 00:32:31,940
that's how my project works the each of

00:32:30,230 --> 00:32:36,170
the build and the Linux Mac OS and

00:32:31,940 --> 00:32:38,630
Windows stage templates taste parameters

00:32:36,170 --> 00:32:41,270
and those parameters can be used to

00:32:38,630 --> 00:32:43,070
influence how it works there's a whole

00:32:41,270 --> 00:32:45,470
bunch more stuff it does there is this

00:32:43,070 --> 00:32:47,060
thing called deployment jobs which track

00:32:45,470 --> 00:32:49,580
deployment history you can use different

00:32:47,060 --> 00:32:53,870
deployment strategies you can set secret

00:32:49,580 --> 00:32:56,960
variables so things like tokens for

00:32:53,870 --> 00:32:59,870
other services your docker hub

00:32:56,960 --> 00:33:02,270
credentials all sorts of stuff like that

00:32:59,870 --> 00:33:07,250
you can have triggers for the pipeline

00:33:02,270 --> 00:33:08,690
runs so you can do it on you can specify

00:33:07,250 --> 00:33:11,870
different triggers for different

00:33:08,690 --> 00:33:15,770
branches and tags branches apparently

00:33:11,870 --> 00:33:17,420
that's golems slide you can also have

00:33:15,770 --> 00:33:19,760
scheduled jobs so you can actually make

00:33:17,420 --> 00:33:21,530
a cron job which is pretty cool you can

00:33:19,760 --> 00:33:25,040
run local agents if somebody was asking

00:33:21,530 --> 00:33:25,790
about that you can also do this strategy

00:33:25,040 --> 00:33:29,090
for

00:33:25,790 --> 00:33:31,310
job splitting called parallel jobs where

00:33:29,090 --> 00:33:33,430
you just declare that this should be run

00:33:31,310 --> 00:33:35,990
and six parallel things and then measure

00:33:33,430 --> 00:33:37,790
automatically schedule six jobs and each

00:33:35,990 --> 00:33:39,950
of those jobs has some variable set to

00:33:37,790 --> 00:33:42,950
tell you the total number of jobs and

00:33:39,950 --> 00:33:44,690
which job in the sequence in the the set

00:33:42,950 --> 00:33:47,240
you are and you can use that to

00:33:44,690 --> 00:33:49,430
partition your tests for example you

00:33:47,240 --> 00:33:50,960
could use it for anything really and

00:33:49,430 --> 00:33:55,310
there's a lot of other features but I'm

00:33:50,960 --> 00:33:59,270
out of space so for more info I wrote a

00:33:55,310 --> 00:34:01,670
blog post about this CI pearl helpers

00:33:59,270 --> 00:34:03,470
project but it's it's not just about the

00:34:01,670 --> 00:34:05,870
project it's also about my research on

00:34:03,470 --> 00:34:08,740
CI system so there's a lot of stuff I

00:34:05,870 --> 00:34:12,260
think I talked about github actions

00:34:08,740 --> 00:34:14,240
circle action maybe some others can't

00:34:12,260 --> 00:34:17,600
remember the github stuff is probably

00:34:14,240 --> 00:34:19,190
outdated it's come a long way since then

00:34:17,600 --> 00:34:23,360
I think the address often circle stuff

00:34:19,190 --> 00:34:25,190
is still fairly relevant and that's all

00:34:23,360 --> 00:34:26,510
I got so we have a whole bunch of time

00:34:25,190 --> 00:34:26,930
for questions I thought this might take

00:34:26,510 --> 00:34:32,690
longer

00:34:26,930 --> 00:34:34,670
I see people talking about Jenkins and

00:34:32,690 --> 00:34:38,660
Bill BOTS and all that yeah this would

00:34:34,670 --> 00:34:40,900
be great suggestions to take to slot

00:34:38,660 --> 00:34:43,430
their conversations to take to slack

00:34:40,900 --> 00:34:45,680
Dave Jacobi asks the right of myseif

00:34:43,430 --> 00:34:49,100
grant testers is mostly BSD is is their

00:34:45,680 --> 00:34:54,220
CI the test against though can you

00:34:49,100 --> 00:34:57,500
written kipper and BSD and docker Canyon

00:34:54,220 --> 00:35:01,130
so they may know because if you could

00:34:57,500 --> 00:35:06,310
you could do that there might be a way

00:35:01,130 --> 00:35:06,310
to run like a can you rather be that

00:35:07,540 --> 00:35:17,090
might work great because DBMS exists I

00:35:12,740 --> 00:35:20,530
don't know - you know there's vs DBMS

00:35:17,090 --> 00:35:25,130
but for like a sure it would have to be

00:35:20,530 --> 00:35:28,070
supported by a sure like as a target and

00:35:25,130 --> 00:35:29,450
it's not I mean I'm sure there's

00:35:28,070 --> 00:35:30,920
probably a service out there that does

00:35:29,450 --> 00:35:36,580
this but I'm just wondering if you could

00:35:30,920 --> 00:35:38,420
use Azure x' linux support to test bsd

00:35:36,580 --> 00:35:38,850
that's a great question

00:35:38,420 --> 00:35:43,170
i

00:35:38,850 --> 00:35:45,090
love to know the answer not sure you can

00:35:43,170 --> 00:35:48,170
run your own circle see I get MTR edges

00:35:45,090 --> 00:35:53,040
yeah so circle and azure both support

00:35:48,170 --> 00:35:55,380
on-premise stuff I think with circle you

00:35:53,040 --> 00:35:57,930
can run the entire thing on Prem like I

00:35:55,380 --> 00:36:00,780
assume they give you probably a VM image

00:35:57,930 --> 00:36:04,290
or docker something that is the circle

00:36:00,780 --> 00:36:05,850
software you can run that locally that's

00:36:04,290 --> 00:36:08,130
my understanding something correct me if

00:36:05,850 --> 00:36:11,030
I'm wrong with a sure you can run

00:36:08,130 --> 00:36:18,990
locally hosted agents but I think the

00:36:11,030 --> 00:36:22,470
kind of the controller node is still the

00:36:18,990 --> 00:36:25,860
azure cloud stuff so I don't know that

00:36:22,470 --> 00:36:29,940
you can run either entirely locally and

00:36:25,860 --> 00:36:32,160
with github I have no idea like I said

00:36:29,940 --> 00:36:34,230
if you need that sort of thing I really

00:36:32,160 --> 00:36:36,450
like circle I highly recommend it

00:36:34,230 --> 00:36:39,870
I recommend it over a sure except for

00:36:36,450 --> 00:36:42,770
testing free software stuff so yeah

00:36:39,870 --> 00:36:42,770

YouTube URL: https://www.youtube.com/watch?v=OSstr_1C6U0


