Title: Curtis Poe - Modern OO in the Cor
Publication date: 2020-06-25
Playlist: TPC 2020 in the Cloud
Description: 
	I plan to bring modern OO to the Perl core. I’ve been stealing ideas from Stevan Little, Damian Conway, and anyone else foolish enough to leave their ideas lying around. This talk is about Cor: my modern OO proposal. Sawyer’s expressed interest and it's likely it will go into the Perl core.

I’m not going to beat around the bush: writing object-oriented code in Perl is a shambolic mess. Some people want to use bless and hand-roll everything, others insist upon using Moo/se, while still others others reach for Class::Std, Spiffy, Class::Tiny, some in-house monstrosity their company uses and so on. You have to relearn it again and again and again.

In this talk I’ll explain Cor, an attempt to design a modern OO system for the Per core. Currently the syntax still feels like Perl, but it fixes many problems with existing systems and will leapfrog the capabilities of OO systems in many other languages.
Captions: 
	00:00:00,000 --> 00:00:07,700
hello everybody welcome to this talk a

00:00:04,879 --> 00:00:13,820
Curtis Poe will be talking about

00:00:07,700 --> 00:00:13,820
bringing modern object-oriented to court

00:00:14,030 --> 00:00:19,080
Todd thank you very much I'm just gonna

00:00:17,340 --> 00:00:22,800
go ahead and launch right into sharing

00:00:19,080 --> 00:00:30,269
my screen and I hope everyone can see

00:00:22,800 --> 00:00:32,610
that yeah good okay so this is about

00:00:30,269 --> 00:00:39,809
putting the OO in the core I spelled

00:00:32,610 --> 00:00:41,309
that seal R that is not a typo so I'm

00:00:39,809 --> 00:00:42,930
sure most of you folks know who I am my

00:00:41,309 --> 00:00:45,120
name is Curtis Pope better known as of

00:00:42,930 --> 00:00:45,480
it too many of you I'm with all around

00:00:45,120 --> 00:00:48,270
the world

00:00:45,480 --> 00:00:51,420
fr if you need excellent training

00:00:48,270 --> 00:00:54,420
consulting mostly in Perl but we also do

00:00:51,420 --> 00:00:55,800
a lot of a front-end work with angular

00:00:54,420 --> 00:00:58,320
and other things like that so if you

00:00:55,800 --> 00:00:59,730
need expert help we only hire talk

00:00:58,320 --> 00:01:01,410
abouts developers who've passed our

00:00:59,730 --> 00:01:04,739
programming tests and structures

00:01:01,410 --> 00:01:07,530
interviews we're very good you can also

00:01:04,739 --> 00:01:09,689
connect with me on Twitter open perl or

00:01:07,530 --> 00:01:10,640
if you want to email me it's of it all

00:01:09,689 --> 00:01:13,979
around the world

00:01:10,640 --> 00:01:17,340
fr we're based in France so that's the

00:01:13,979 --> 00:01:19,860
name we're also responsible for Cal

00:01:17,340 --> 00:01:21,840
Station dot space if you ever want to

00:01:19,860 --> 00:01:23,640
check that out it's still an open alpha

00:01:21,840 --> 00:01:25,890
so it's got some rough edges it is a

00:01:23,640 --> 00:01:30,030
free-to-play MMORPG with the backend

00:01:25,890 --> 00:01:31,650
with entirely in perl and it doesn't

00:01:30,030 --> 00:01:32,790
cost you any money and it's unlike

00:01:31,650 --> 00:01:36,780
anything else you've ever played before

00:01:32,790 --> 00:01:40,829
so it's got a bit of a learning curve so

00:01:36,780 --> 00:01:44,189
I am here to talk about poor and the

00:01:40,829 --> 00:01:48,600
motto of poor is good enough is not good

00:01:44,189 --> 00:01:50,939
enough the reason that is the motto is

00:01:48,600 --> 00:01:54,119
when I first started core I just wanted

00:01:50,939 --> 00:01:56,369
modern oo and a pro 4 however after a

00:01:54,119 --> 00:01:58,439
while ago I found out about the pearl 7

00:01:56,369 --> 00:02:01,920
project and was talking to Sawyer about

00:01:58,439 --> 00:02:03,119
this I decided to up to my standards a

00:02:01,920 --> 00:02:05,369
little bit instead of getting something

00:02:03,119 --> 00:02:07,439
that was good enough for programs to

00:02:05,369 --> 00:02:10,670
want to switch over to it had to be

00:02:07,439 --> 00:02:13,240
better than what the alternatives are

00:02:10,670 --> 00:02:16,780
the main core by the way perfect

00:02:13,240 --> 00:02:18,880
rina the poet Ovid wrote many poems

00:02:16,780 --> 00:02:21,910
about this woman that he was madly in

00:02:18,880 --> 00:02:24,580
love with so if you want to refer this

00:02:21,910 --> 00:02:26,350
to this as Karina instead of core to

00:02:24,580 --> 00:02:28,690
disambiguate between the pro core that's

00:02:26,350 --> 00:02:29,950
perfectly understandable and some people

00:02:28,690 --> 00:02:31,360
say the name is terrible because it's

00:02:29,950 --> 00:02:32,770
confusing with pearl court don't worry

00:02:31,360 --> 00:02:34,420
about though the names going away this

00:02:32,770 --> 00:02:39,400
is just a name I pick to have something

00:02:34,420 --> 00:02:41,050
to talk about with the project so of it

00:02:39,400 --> 00:02:44,950
was from Italy so I want to talk about

00:02:41,050 --> 00:02:46,690
pizza for just a moment you love pizza

00:02:44,950 --> 00:02:47,920
you want to open up your own pizza joint

00:02:46,690 --> 00:02:49,600
you're in a small town and they've

00:02:47,920 --> 00:02:53,440
already got a pizza joint so how do you

00:02:49,600 --> 00:02:55,480
attract new testers so as some of you

00:02:53,440 --> 00:02:56,890
know I love economics and I've read

00:02:55,480 --> 00:03:00,700
quite a bit about activist and one of

00:02:56,890 --> 00:03:02,710
the things that mmm I discovered is the

00:03:00,700 --> 00:03:04,000
commas are pretty much under agreement

00:03:02,710 --> 00:03:07,090
that's one of the worst things you can

00:03:04,000 --> 00:03:09,850
do is offer a sale because if you have

00:03:07,090 --> 00:03:12,400
something which costs $20 and you are

00:03:09,850 --> 00:03:16,210
offering it for $15 you've mentally

00:03:12,400 --> 00:03:20,050
reset people's perception of the value

00:03:16,210 --> 00:03:21,670
of the item so can I used to sell cars

00:03:20,050 --> 00:03:23,140
one of the things I discovered is my

00:03:21,670 --> 00:03:25,270
customers who paid the most money for

00:03:23,140 --> 00:03:30,160
their car were the happiest because they

00:03:25,270 --> 00:03:31,750
were sold on value so price versus value

00:03:30,160 --> 00:03:33,760
is a very important concept which I'm

00:03:31,750 --> 00:03:35,410
going to get into just a moment but it

00:03:33,760 --> 00:03:37,150
sounds a little strange to talk about

00:03:35,410 --> 00:03:39,940
the opportunity to talk but I want you

00:03:37,150 --> 00:03:41,950
to understand where I'm coming from why

00:03:39,940 --> 00:03:44,050
do people want to learn through pearl

00:03:41,950 --> 00:03:48,190
has a steep learning curve that it's a

00:03:44,050 --> 00:03:50,800
price you pay for learning it rust has a

00:03:48,190 --> 00:03:53,320
steep learning curve rust is one of the

00:03:50,800 --> 00:03:55,660
most loved languages out there it

00:03:53,320 --> 00:03:57,070
provides tremendous clear value for the

00:03:55,660 --> 00:03:58,440
sort of people who work in problem

00:03:57,070 --> 00:04:01,000
spaces are steals

00:03:58,440 --> 00:04:04,630
what is the value that pearl provides

00:04:01,000 --> 00:04:05,620
for our steep cost it's not available

00:04:04,630 --> 00:04:07,720
jobs anymore

00:04:05,620 --> 00:04:09,730
the market has been shrinking for that

00:04:07,720 --> 00:04:11,709
we're lucky we still get new contracts

00:04:09,730 --> 00:04:12,850
developing new pearl but I know a lot of

00:04:11,709 --> 00:04:16,359
other companies been struggling with

00:04:12,850 --> 00:04:18,250
this data science and AI they're they're

00:04:16,359 --> 00:04:20,580
really hot everyone wants to get into

00:04:18,250 --> 00:04:23,669
them we don't offer much in that space

00:04:20,580 --> 00:04:26,920
there's a CPM testers framework which is

00:04:23,669 --> 00:04:29,530
phenomenal excellent Unicode support we

00:04:26,920 --> 00:04:33,100
have the best regex engine available out

00:04:29,530 --> 00:04:37,270
there but these are our marginal value

00:04:33,100 --> 00:04:39,670
things people don't go into a language

00:04:37,270 --> 00:04:41,890
generally because that it's got you know

00:04:39,670 --> 00:04:44,740
a bunch of anonymous testers or because

00:04:41,890 --> 00:04:45,970
it's got great magic support instantly

00:04:44,740 --> 00:04:47,710
go into a language because it provides

00:04:45,970 --> 00:04:49,690
it with some sort of value they really

00:04:47,710 --> 00:04:52,660
really appreciate and if you look at job

00:04:49,690 --> 00:04:54,970
adverts for Python Perl PHP Ruby are the

00:04:52,660 --> 00:04:56,980
primary space that we compete in every

00:04:54,970 --> 00:04:59,440
one of those because optic training

00:04:56,980 --> 00:05:02,560
programming is optional what happens is

00:04:59,440 --> 00:05:07,570
they say must know oo PHP must know oo

00:05:02,560 --> 00:05:10,930
Pearl cetera so oho becomes a value at

00:05:07,570 --> 00:05:13,840
that point so what sort of value are we

00:05:10,930 --> 00:05:16,090
offering there so the development comes

00:05:13,840 --> 00:05:18,070
like there you want to learn how I write

00:05:16,090 --> 00:05:20,020
oo and pearl that's a very natural

00:05:18,070 --> 00:05:20,830
question so how does the conversation go

00:05:20,020 --> 00:05:26,020
within the development

00:05:20,830 --> 00:05:26,530
well first you use a CDN client excuse

00:05:26,020 --> 00:05:29,080
me

00:05:26,530 --> 00:05:31,090
ok that one's not too bad because we're

00:05:29,080 --> 00:05:32,830
used to installing things with various

00:05:31,090 --> 00:05:34,870
tools from different languages for

00:05:32,830 --> 00:05:36,400
grabbing stuff off github whatever ok

00:05:34,870 --> 00:05:38,500
fine but this time it seems like you

00:05:36,400 --> 00:05:41,260
should be built into the language that's

00:05:38,500 --> 00:05:46,750
fine we could deal with that now you

00:05:41,260 --> 00:05:51,160
need to pick another system what no

00:05:46,750 --> 00:05:54,040
seriously just pick one but but but not

00:05:51,160 --> 00:05:55,330
to happen ok fine

00:05:54,040 --> 00:05:58,270
so so they go ahead and pick their own

00:05:55,330 --> 00:06:00,220
system and the build fails after about

00:05:58,270 --> 00:06:02,170
15 minutes they have some sort of

00:06:00,220 --> 00:06:04,690
obscure error message which says got a

00:06:02,170 --> 00:06:06,370
death expected empties thing and they

00:06:04,690 --> 00:06:12,070
don't understand what that means

00:06:06,370 --> 00:06:13,380
okay just force the install this is an

00:06:12,070 --> 00:06:17,040
embarrassing experience

00:06:13,380 --> 00:06:21,460
everyone wants oh well not everyone but

00:06:17,040 --> 00:06:22,870
lots of people 100 it's wide value but

00:06:21,460 --> 00:06:24,730
there's a steep learning curve even

00:06:22,870 --> 00:06:25,780
install it and pearled much less trying

00:06:24,730 --> 00:06:27,610
to figure out which other system you're

00:06:25,780 --> 00:06:31,690
gonna choose we have too many competing

00:06:27,610 --> 00:06:34,120
auto systems it is a mess so one of the

00:06:31,690 --> 00:06:36,910
biggest values we can offer we don't

00:06:34,120 --> 00:06:39,010
offer by the way we're talk about price

00:06:36,910 --> 00:06:40,360
versus value breath less is not the

00:06:39,010 --> 00:06:43,300
value you are looking

00:06:40,360 --> 00:06:45,610
for I want to make that extremely clear

00:06:43,300 --> 00:06:47,319
if you like bless that's fine for most

00:06:45,610 --> 00:06:49,750
of you you know for many of you bless is

00:06:47,319 --> 00:06:52,090
fine but bless that's kind of like

00:06:49,750 --> 00:06:54,129
assembly language 400 you've got to wire

00:06:52,090 --> 00:06:55,629
everything together by hand and the more

00:06:54,129 --> 00:06:59,770
code you have to write the more bugs are

00:06:55,629 --> 00:07:01,719
going away we know that the Moose family

00:06:59,770 --> 00:07:03,819
of languages changed everything this is

00:07:01,719 --> 00:07:07,599
become more or less the de facto

00:07:03,819 --> 00:07:10,000
standard for what OOW is in Perl today

00:07:07,599 --> 00:07:11,949
but it's not in the court which leads to

00:07:10,000 --> 00:07:13,780
the obvious question if we want to offer

00:07:11,949 --> 00:07:19,120
this high value what should be in the

00:07:13,780 --> 00:07:21,490
core so good enough is it good enough

00:07:19,120 --> 00:07:23,800
most of the OA systems out there on the

00:07:21,490 --> 00:07:25,960
seat pan there they're not complete and

00:07:23,800 --> 00:07:27,580
basically their sugar layer forgetter

00:07:25,960 --> 00:07:29,530
centers and the Constructors we're

00:07:27,580 --> 00:07:32,650
treating objects like stripes we're not

00:07:29,530 --> 00:07:34,690
doing object or your program if you're

00:07:32,650 --> 00:07:37,569
just using you know data objects like

00:07:34,690 --> 00:07:39,460
kind of like this the core of what you'd

00:07:37,569 --> 00:07:41,439
see from any other apps that makes sense

00:07:39,460 --> 00:07:43,509
but for a lot of the true power of

00:07:41,439 --> 00:07:44,680
object-oriented adding just having

00:07:43,509 --> 00:07:47,199
getters and setters anything from

00:07:44,680 --> 00:07:48,610
instructor that's not enough but that's

00:07:47,199 --> 00:07:50,620
kind of mostly what we're going to focus

00:07:48,610 --> 00:07:53,039
on in this talk because that's the

00:07:50,620 --> 00:07:56,199
primary thing that people can appreciate

00:07:53,039 --> 00:08:00,240
so it's not enough to be good enough you

00:07:56,199 --> 00:08:02,529
have to be better then this is

00:08:00,240 --> 00:08:05,020
tremendously important if we're gonna

00:08:02,529 --> 00:08:07,150
provide value it is not that we provide

00:08:05,020 --> 00:08:09,699
value better than what Pro was it is

00:08:07,150 --> 00:08:12,219
value which makes them say I would like

00:08:09,699 --> 00:08:14,319
to use this more than say the Python

00:08:12,219 --> 00:08:18,190
object system so if you're familiar with

00:08:14,319 --> 00:08:20,860
tight on to objects there they're

00:08:18,190 --> 00:08:22,719
terrible they're rubbish there but

00:08:20,860 --> 00:08:25,120
Python 3 actually is a much much better

00:08:22,719 --> 00:08:27,430
Travis so we want to offer something

00:08:25,120 --> 00:08:29,740
that makes it easy but allows you to

00:08:27,430 --> 00:08:31,060
build big powerful systems and you don't

00:08:29,740 --> 00:08:32,680
have to worry about how to install it

00:08:31,060 --> 00:08:37,659
whether or not it's there it just games

00:08:32,680 --> 00:08:39,130
and then there's this mess this is a no

00:08:37,659 --> 00:08:40,810
idea off of where I was trying to debug

00:08:39,130 --> 00:08:43,180
some performance problems for one of my

00:08:40,810 --> 00:08:47,430
clients and virtually everything here

00:08:43,180 --> 00:08:48,640
was related to the mop in this this is

00:08:47,430 --> 00:08:53,310
terrible

00:08:48,640 --> 00:08:53,310
although systems of Perl tend to be slow

00:08:54,210 --> 00:09:01,420
support we want modern OO in the pearl

00:08:58,720 --> 00:09:03,280
core we wanted to be easy you can get up

00:09:01,420 --> 00:09:05,020
to speed very quickly it needs to be

00:09:03,280 --> 00:09:07,330
more powerful than most languages out

00:09:05,020 --> 00:09:09,460
there a lot of the stuff we can do

00:09:07,330 --> 00:09:11,530
potentially the types and death-warrant

00:09:09,460 --> 00:09:15,150
roles gives us that ability to do that

00:09:11,530 --> 00:09:18,340
and we're trying to figure out the MVP

00:09:15,150 --> 00:09:21,160
the MVP Minimum Viable Product that

00:09:18,340 --> 00:09:24,310
that's hard to figure out which features

00:09:21,160 --> 00:09:26,620
really give us more power and which can

00:09:24,310 --> 00:09:29,080
be put off to version two but it still

00:09:26,620 --> 00:09:32,020
needs to be per I don't want to rewrite

00:09:29,080 --> 00:09:34,840
this into a different length so I've got

00:09:32,020 --> 00:09:37,600
a grammar which describes the overall

00:09:34,840 --> 00:09:39,220
structure of how core looks like it's

00:09:37,600 --> 00:09:41,610
not intended to be perfect but it's to

00:09:39,220 --> 00:09:44,440
give us a starting point for discussion

00:09:41,610 --> 00:09:49,900
here's a grammar just for how the

00:09:44,440 --> 00:09:51,070
methods would work in port and one thing

00:09:49,900 --> 00:09:52,840
to keep in mind about a grammar though

00:09:51,070 --> 00:09:54,460
is it tells me how the tokens are laid

00:09:52,840 --> 00:09:55,960
out in your code it doesn't tell you

00:09:54,460 --> 00:09:59,620
anything about the behavior of the code

00:09:55,960 --> 00:10:00,610
so this is just part of what we need so

00:09:59,620 --> 00:10:02,500
I want to talk about some of the design

00:10:00,610 --> 00:10:07,000
considerations first of all so you can

00:10:02,500 --> 00:10:08,620
understand where I started from easy

00:10:07,000 --> 00:10:11,740
things to be easy and hard things to be

00:10:08,620 --> 00:10:14,290
possible this is pearl in a nutshell

00:10:11,740 --> 00:10:17,080
this is a mantra we've had forever a

00:10:14,290 --> 00:10:18,670
today but I'm pushing them a little

00:10:17,080 --> 00:10:20,290
further small system should be easy to

00:10:18,670 --> 00:10:23,860
build large systems should have greater

00:10:20,290 --> 00:10:25,360
safety this is still easy things to be

00:10:23,860 --> 00:10:27,340
easy and hard things to be possible

00:10:25,360 --> 00:10:32,170
there's nothing revolutionary about that

00:10:27,340 --> 00:10:33,760
I am trying to break up some of the

00:10:32,170 --> 00:10:37,750
problems we have with loose moving

00:10:33,760 --> 00:10:40,870
things like that by decoupling the data

00:10:37,750 --> 00:10:43,180
we call them sliced the methods to

00:10:40,870 --> 00:10:45,040
access that data construction arguments

00:10:43,180 --> 00:10:46,870
trying to separate all of that out so

00:10:45,040 --> 00:10:48,400
they don't get too convoluted I'm trying

00:10:46,870 --> 00:10:52,900
to encourage smaller interfaces I'll

00:10:48,400 --> 00:10:54,580
mention that more later but if I'm going

00:10:52,900 --> 00:10:58,630
to provide value I need to cater to new

00:10:54,580 --> 00:11:01,120
developers so I mean new to Perl but

00:10:58,630 --> 00:11:04,210
also new to program so for example a

00:11:01,120 --> 00:11:07,330
moon you have has name is our WP what

00:11:04,210 --> 00:11:11,050
the heck is our WP it's read/write

00:11:07,330 --> 00:11:12,340
I don't know what that means and if

00:11:11,050 --> 00:11:13,690
you're new that's gonna be something

00:11:12,340 --> 00:11:16,150
that's potentially a little bit harder

00:11:13,690 --> 00:11:20,860
to remember in chorus this has named and

00:11:16,150 --> 00:11:23,110
it has really that's simple so it has no

00:11:20,860 --> 00:11:24,430
writer so I've got a name and you can

00:11:23,110 --> 00:11:26,290
read that name from the object if you

00:11:24,430 --> 00:11:28,990
want to so that's what I mean by

00:11:26,290 --> 00:11:30,760
catering to new developers so you might

00:11:28,990 --> 00:11:33,600
remember Paul Graham and he created art

00:11:30,760 --> 00:11:36,820
he designed that to cater to experts and

00:11:33,600 --> 00:11:38,530
he built up that language and a lot of

00:11:36,820 --> 00:11:39,730
people got excited that is going to be

00:11:38,530 --> 00:11:42,070
the thousand-year language but it was

00:11:39,730 --> 00:11:45,220
only designed to cater to experts the

00:11:42,070 --> 00:11:47,890
problem was it provided so little value

00:11:45,220 --> 00:11:51,220
the first version was ASCII own if you

00:11:47,890 --> 00:11:53,200
might recall rust also caters to experts

00:11:51,220 --> 00:11:56,680
it's not easy but it provides tremendous

00:11:53,200 --> 00:11:58,990
value today art is pretty much dead I've

00:11:56,680 --> 00:12:00,400
gone I checked the boards where they

00:11:58,990 --> 00:12:03,820
post messages about if there's nothing

00:12:00,400 --> 00:12:05,260
there the arc is nothing it caters to

00:12:03,820 --> 00:12:08,890
hard to experts and doesn't provide

00:12:05,260 --> 00:12:12,640
enough value for the general public so

00:12:08,890 --> 00:12:14,010
core it's very opinionated my opinions

00:12:12,640 --> 00:12:16,240
sorry

00:12:14,010 --> 00:12:18,550
it's very privileged and it's designed

00:12:16,240 --> 00:12:22,330
to be practical my practical I mean it's

00:12:18,550 --> 00:12:24,700
easy to write easy to root so story is

00:12:22,330 --> 00:12:26,470
very receptive to the idea it is likely

00:12:24,700 --> 00:12:29,410
once we have enough of the spec done

00:12:26,470 --> 00:12:33,430
that core will be in Perl 7.2 or Perl

00:12:29,410 --> 00:12:35,350
7.4 and it will probably have a future

00:12:33,430 --> 00:12:36,810
guard like use feature class or

00:12:35,350 --> 00:12:38,620
something like that

00:12:36,810 --> 00:12:39,550
Steven little he's writing about

00:12:38,620 --> 00:12:41,740
transplanting

00:12:39,550 --> 00:12:43,810
and that gets interesting because a

00:12:41,740 --> 00:12:46,260
transpiler can target different versions

00:12:43,810 --> 00:12:49,150
of Perl and can remove those features

00:12:46,260 --> 00:12:52,330
which Perl might already provide which

00:12:49,150 --> 00:12:53,860
means if he hits his gold you might be

00:12:52,330 --> 00:12:56,140
able to write core back as far as

00:12:53,860 --> 00:12:58,390
fighting awesome

00:12:56,140 --> 00:13:00,910
Paul evidence is working on object pad

00:12:58,390 --> 00:13:03,790
which is kind of a version or that's

00:13:00,910 --> 00:13:05,650
available now it's it's not quite the

00:13:03,790 --> 00:13:08,290
same thing but it's already shown some

00:13:05,650 --> 00:13:09,970
very interesting things about it we do

00:13:08,290 --> 00:13:13,480
need more community input you cannot

00:13:09,970 --> 00:13:16,380
hire C freely org pound pork or if you

00:13:13,480 --> 00:13:20,460
want github comm so a good core wiki and

00:13:16,380 --> 00:13:22,320
you can read up on the entire Specter

00:13:20,460 --> 00:13:24,200
left issue so you can leave comments on

00:13:22,320 --> 00:13:27,960
the different portions of the spectrum

00:13:24,200 --> 00:13:30,690
and I want to make clear that the syntax

00:13:27,960 --> 00:13:32,150
are seeing we've mostly nailed down the

00:13:30,690 --> 00:13:34,290
syntax but there are some corner cases

00:13:32,150 --> 00:13:36,180
so as some of this is going to change

00:13:34,290 --> 00:13:38,010
and data types are son for entertainment

00:13:36,180 --> 00:13:40,320
purposes own there's a lot of issues

00:13:38,010 --> 00:13:43,980
around data types that you're still

00:13:40,320 --> 00:13:47,070
trying to nail down but I want to talk

00:13:43,980 --> 00:13:48,690
about the evolution and probe just so

00:13:47,070 --> 00:13:49,860
you can get an idea that contrast but

00:13:48,690 --> 00:13:51,810
I'm going to start with moose because

00:13:49,860 --> 00:13:55,110
Luce is pretty much one so moose point

00:13:51,810 --> 00:13:57,180
zero one at least in 2006 this is a very

00:13:55,110 --> 00:13:59,190
simple bank account object we had to use

00:13:57,180 --> 00:14:01,590
strict and warnings back then but this

00:13:59,190 --> 00:14:04,890
mostly mostly looks like the Moose you

00:14:01,590 --> 00:14:06,810
would see to date but here's a point

00:14:04,890 --> 00:14:09,450
object bill directly out of the original

00:14:06,810 --> 00:14:13,710
loose documentation you've got has X is

00:14:09,450 --> 00:14:16,020
an int is a is RW u right and to clear

00:14:13,710 --> 00:14:17,790
yourself X zero which means you can

00:14:16,020 --> 00:14:19,170
write to those directly it's kind of odd

00:14:17,790 --> 00:14:23,730
if you want commutable objects but

00:14:19,170 --> 00:14:25,200
that's fine but Stephen little realized

00:14:23,730 --> 00:14:26,670
that there was a lot of there were a lot

00:14:25,200 --> 00:14:28,260
of mistakes made a moose despite how

00:14:26,670 --> 00:14:29,340
good it was there were a number of

00:14:28,260 --> 00:14:31,620
problems that had to be done so these

00:14:29,340 --> 00:14:33,390
Frederic Moxie which is a way which is a

00:14:31,620 --> 00:14:35,640
way of trying to get closer to pushing

00:14:33,390 --> 00:14:37,560
Perl the pushing them to the front

00:14:35,640 --> 00:14:40,980
corner and this is what points would

00:14:37,560 --> 00:14:43,200
look like the Moxie you there your slots

00:14:40,980 --> 00:14:45,180
we have default values and that's it it

00:14:43,200 --> 00:14:47,550
is completely decoupled from other

00:14:45,180 --> 00:14:50,160
things not entirely that's still coupled

00:14:47,550 --> 00:14:53,670
with constructor and then you have the

00:14:50,160 --> 00:14:55,320
accesses down here which I think the

00:14:53,670 --> 00:14:55,950
syntax is unfortunate and then this

00:14:55,320 --> 00:14:58,920
syntax

00:14:55,950 --> 00:14:59,610
it was just sorry Steven to me that's

00:14:58,920 --> 00:15:01,500
terrible

00:14:59,610 --> 00:15:03,150
then try to explain that to an in perl

00:15:01,500 --> 00:15:06,150
developer that's just going to be a

00:15:03,150 --> 00:15:09,780
nightmare this is the same thing in

00:15:06,150 --> 00:15:12,270
court as XY you can optionally past its

00:15:09,780 --> 00:15:14,520
new it's got a reader each of those has

00:15:12,270 --> 00:15:17,220
a reader and default values of you know

00:15:14,520 --> 00:15:21,750
passive new are 0 0 and the clear method

00:15:17,220 --> 00:15:24,360
you just assign 0 to the various there's

00:15:21,750 --> 00:15:27,720
moxie on one side there's four on the

00:15:24,360 --> 00:15:30,210
other every time i rewrite any sample

00:15:27,720 --> 00:15:32,790
code in court it is smaller and easier

00:15:30,210 --> 00:15:33,970
to read and quite often more functional

00:15:32,790 --> 00:15:38,230
than the first

00:15:33,970 --> 00:15:40,540
odin's for corporal and this is a

00:15:38,230 --> 00:15:43,800
problem that I have banged my head over

00:15:40,540 --> 00:15:46,300
again time and time again mousse has

00:15:43,800 --> 00:15:49,779
candles data decoration attributes types

00:15:46,300 --> 00:15:51,149
coercion delegation etc etc etc you want

00:15:49,779 --> 00:15:54,430
to talk about an overloaded function

00:15:51,149 --> 00:15:57,370
this is terrible so what does poor hat

00:15:54,430 --> 00:15:59,949
for has all it does is date the

00:15:57,370 --> 00:16:01,870
declaration that's it nothing else it

00:15:59,949 --> 00:16:06,399
says here is a piece of instance data

00:16:01,870 --> 00:16:07,689
available for my class so let's look at

00:16:06,399 --> 00:16:09,100
a simple object so I can give you some

00:16:07,689 --> 00:16:10,689
more concrete examples so it's not just

00:16:09,100 --> 00:16:12,250
theoretical we've got a customer out

00:16:10,689 --> 00:16:14,139
birth name birth date optional title

00:16:12,250 --> 00:16:16,389
since the doctor is or something like

00:16:14,139 --> 00:16:17,800
that we have customer methods so we can

00:16:16,389 --> 00:16:19,990
get the full name which is a name with

00:16:17,800 --> 00:16:21,129
the title dependent if it exists and

00:16:19,990 --> 00:16:24,699
then we ask for the old enough to vote

00:16:21,129 --> 00:16:26,110
or the old enough to drive etc and a

00:16:24,699 --> 00:16:29,139
Musa might look like this we've got our

00:16:26,110 --> 00:16:31,209
title name at birth date slots and then

00:16:29,139 --> 00:16:34,269
we've got the methods down below this

00:16:31,209 --> 00:16:35,560
looks familiar to everyone we've

00:16:34,269 --> 00:16:38,170
declared the title name of the birth

00:16:35,560 --> 00:16:41,050
date is reto because we don't want

00:16:38,170 --> 00:16:43,720
mutable objects no what does this mean

00:16:41,050 --> 00:16:45,730
so I have a guard for the section of

00:16:43,720 --> 00:16:47,800
code if Ovid is old enough to vote and

00:16:45,730 --> 00:16:49,329
then I try and set obits birthday to

00:16:47,800 --> 00:16:52,720
yesterday and that throws an exception

00:16:49,329 --> 00:16:54,220
because it's immutable this means you

00:16:52,720 --> 00:16:57,930
cannot set the birth date into an

00:16:54,220 --> 00:16:57,930
invalid state for the section of code

00:16:58,620 --> 00:17:06,339
but date is still mutable which means

00:17:03,939 --> 00:17:08,169
you can set the year to last year and

00:17:06,339 --> 00:17:10,510
now Hogan is no longer old enough to

00:17:08,169 --> 00:17:12,159
vote in this section of code which is

00:17:10,510 --> 00:17:15,549
supposed to be guaranteed that I am old

00:17:12,159 --> 00:17:17,589
enough to vote this is not a theoretical

00:17:15,549 --> 00:17:20,890
problem so Ricardo Phineas for a

00:17:17,589 --> 00:17:23,020
brilliant blog entry about the real

00:17:20,890 --> 00:17:24,520
problems he had debugging problems with

00:17:23,020 --> 00:17:26,980
mutable state because objects are all

00:17:24,520 --> 00:17:29,770
references so this bit of code over here

00:17:26,980 --> 00:17:30,820
changes a value in an object this bit of

00:17:29,770 --> 00:17:33,070
code over here which has the same

00:17:30,820 --> 00:17:35,710
reference oops that's gonna be a problem

00:17:33,070 --> 00:17:38,350
so date time mean big and date time ex

00:17:35,710 --> 00:17:40,000
mutable abilities and this is such a

00:17:38,350 --> 00:17:42,909
serious problem I actually for my latest

00:17:40,000 --> 00:17:44,409
client I wrote a dbx class component

00:17:42,909 --> 00:17:46,510
called a musical date time

00:17:44,409 --> 00:17:47,860
I won't go into the details but

00:17:46,510 --> 00:17:50,799
basically it means we

00:17:47,860 --> 00:17:52,450
you're using dbx class you can now

00:17:50,799 --> 00:17:54,730
inflate your date times two immutable

00:17:52,450 --> 00:17:59,049
objects and you don't have to worry

00:17:54,730 --> 00:18:00,460
about nasty surprises later on so thank

00:17:59,049 --> 00:18:03,880
you very much to assist p for helping

00:18:00,460 --> 00:18:05,679
you figure out that code so the core

00:18:03,880 --> 00:18:07,440
guiding principles as named read

00:18:05,679 --> 00:18:10,390
immutability should be the default

00:18:07,440 --> 00:18:12,070
absolutely accordant want to take

00:18:10,390 --> 00:18:13,570
anything away from you so if you want to

00:18:12,070 --> 00:18:17,080
slap a writer on there to make it

00:18:13,570 --> 00:18:18,790
mutable you can do that there are a few

00:18:17,080 --> 00:18:21,160
extra characters you have to type

00:18:18,790 --> 00:18:22,780
because I don't mind offering a few

00:18:21,160 --> 00:18:27,280
extra characters to make you stop and

00:18:22,780 --> 00:18:29,350
think should I be doing this so we got

00:18:27,280 --> 00:18:31,900
into business rule customers must always

00:18:29,350 --> 00:18:33,900
be addressed by their title plus name if

00:18:31,900 --> 00:18:36,429
title exists never buy just on it

00:18:33,900 --> 00:18:37,870
because for whatever reason you know

00:18:36,429 --> 00:18:42,160
maybe doctors get upset if you don't

00:18:37,870 --> 00:18:43,809
call them doctor Joey's so we've got

00:18:42,160 --> 00:18:46,630
this full name method in our customer

00:18:43,809 --> 00:18:48,669
class for moose and here's what it might

00:18:46,630 --> 00:18:51,429
look like full name is title song title

00:18:48,669 --> 00:18:54,940
blah blah return title and cat nickname

00:18:51,429 --> 00:18:56,530
so we can say customer full name which

00:18:54,940 --> 00:19:00,190
is what we want but if we say customer

00:18:56,530 --> 00:19:02,620
name that fails that that's a bad idea

00:19:00,190 --> 00:19:06,070
because it might violate our rule so how

00:19:02,620 --> 00:19:08,080
do we fix that and moose we want the

00:19:06,070 --> 00:19:10,090
name attribute to be private but we

00:19:08,080 --> 00:19:11,470
don't want to pass underscore name to

00:19:10,090 --> 00:19:13,210
new because we used to make things

00:19:11,470 --> 00:19:18,010
underscore to say the five anymore or

00:19:13,210 --> 00:19:18,780
not so one way to fix that is with in it

00:19:18,010 --> 00:19:20,679
mark

00:19:18,780 --> 00:19:22,059
alright I've discovered one who's

00:19:20,679 --> 00:19:24,220
developers aren't familiar with this and

00:19:22,059 --> 00:19:27,100
it argh says okay I've got my underscore

00:19:24,220 --> 00:19:29,770
name attribute and I'm gonna pass an it

00:19:27,100 --> 00:19:31,780
bard name to this which says when I call

00:19:29,770 --> 00:19:35,980
it in the constructor I'm actually gonna

00:19:31,780 --> 00:19:37,720
initialize this using the name key not

00:19:35,980 --> 00:19:39,490
the underscore name to you so now when

00:19:37,720 --> 00:19:41,470
you call customer name you can invent it

00:19:39,490 --> 00:19:44,559
not down there so you can load the

00:19:41,470 --> 00:19:46,179
safety I work in a lot of client code

00:19:44,559 --> 00:19:48,010
bases and this is what I see all the

00:19:46,179 --> 00:19:51,460
time customer underscore name yes they

00:19:48,010 --> 00:19:54,549
will call your private methods how can

00:19:51,460 --> 00:19:57,850
you stop that and moose moose is very

00:19:54,549 --> 00:20:00,610
flexible you know it will find a way

00:19:57,850 --> 00:20:01,400
trust me and here's how you do it is you

00:20:00,610 --> 00:20:04,310
can pass

00:20:01,400 --> 00:20:07,340
heir to his which means it has no reader

00:20:04,310 --> 00:20:08,930
it has no writer but I can still pass it

00:20:07,340 --> 00:20:13,490
on the constructor but then how does my

00:20:08,930 --> 00:20:15,680
code inside the class we name well I

00:20:13,490 --> 00:20:20,690
call self-medicate after you've name get

00:20:15,680 --> 00:20:23,360
value self simple nobody does that

00:20:20,690 --> 00:20:24,560
nobody does that so in an Argand there

00:20:23,360 --> 00:20:26,810
these are these are really clever

00:20:24,560 --> 00:20:28,820
solutions but they're clumsy and a lot

00:20:26,810 --> 00:20:32,210
of sass to deal with the fact that when

00:20:28,820 --> 00:20:34,130
noose and family were written these were

00:20:32,210 --> 00:20:38,570
the tools you have available so it was

00:20:34,130 --> 00:20:40,430
constrained by what we could do with the

00:20:38,570 --> 00:20:42,230
Perl language so they weren't bad

00:20:40,430 --> 00:20:44,630
designer suits there were simply this is

00:20:42,230 --> 00:20:46,160
the best of a bad situation and part of

00:20:44,630 --> 00:20:48,080
the club also is because has tries to

00:20:46,160 --> 00:20:52,820
complete statement plus methods plus

00:20:48,080 --> 00:20:56,960
object construction and it's a mess how

00:20:52,820 --> 00:21:00,200
would you solve this in core so first of

00:20:56,960 --> 00:21:01,640
all as a project don't when you're

00:21:00,200 --> 00:21:02,990
writing class don't provide any public

00:21:01,640 --> 00:21:05,570
data methods don't let anyone read your

00:21:02,990 --> 00:21:07,820
data directly you only provide needed

00:21:05,570 --> 00:21:09,170
behavioral methods and if you have to

00:21:07,820 --> 00:21:12,650
expose the state do it on a case-by-case

00:21:09,170 --> 00:21:13,850
basis don't just by default giving

00:21:12,650 --> 00:21:15,470
everyone all of that because now your

00:21:13,850 --> 00:21:17,120
contracts a lot bigger do you realize

00:21:15,470 --> 00:21:19,610
later on you shouldn't have exposed to

00:21:17,120 --> 00:21:20,780
name attribute now it's harder to pull

00:21:19,610 --> 00:21:23,030
that back because you already have done

00:21:20,780 --> 00:21:27,740
that and it's kind of painful to do the

00:21:23,030 --> 00:21:29,270
sooners so a guiding principle - new -

00:21:27,740 --> 00:21:31,790
new benefits from the core private data

00:21:29,270 --> 00:21:33,380
should be very easy to define and we

00:21:31,790 --> 00:21:35,390
don't encourage from this newest data

00:21:33,380 --> 00:21:38,740
basically don't make this available

00:21:35,390 --> 00:21:41,240
outside of your class unless you need to

00:21:38,740 --> 00:21:44,000
so here's my customer class rep in court

00:21:41,240 --> 00:21:44,480
you'll notice for name title and birth

00:21:44,000 --> 00:21:47,540
date

00:21:44,480 --> 00:21:50,660
I don't have a reader or writer assigned

00:21:47,540 --> 00:21:52,340
for any of those I can pass them into

00:21:50,660 --> 00:21:55,850
the constructor if I want you and now

00:21:52,340 --> 00:21:57,710
for method name I return title no and if

00:21:55,850 --> 00:21:59,210
it exists that I can catenate title and

00:21:57,710 --> 00:22:01,490
name in the space otherwise I just for

00:21:59,210 --> 00:22:04,550
the names it's simple it's easy there's

00:22:01,490 --> 00:22:08,930
no tricks you have to lose you have to

00:22:04,550 --> 00:22:10,130
jump so

00:22:08,930 --> 00:22:11,630
let's let's talk about attributes a

00:22:10,130 --> 00:22:15,800
little more so some methods are

00:22:11,630 --> 00:22:17,390
expensive to calculate but what if they

00:22:15,800 --> 00:22:18,890
only need to be calculated once and this

00:22:17,390 --> 00:22:21,110
is very often the case if you have

00:22:18,890 --> 00:22:22,190
indeed blob jacks then what do you do

00:22:21,110 --> 00:22:23,900
you don't want to call the method every

00:22:22,190 --> 00:22:26,810
time and have it be calculated so in

00:22:23,900 --> 00:22:28,640
loops you can use attributes and I

00:22:26,810 --> 00:22:31,100
apologize I know the word attribute is

00:22:28,640 --> 00:22:32,690
getting me very very overloaded here and

00:22:31,100 --> 00:22:35,330
it's going to get even more overloaded

00:22:32,690 --> 00:22:38,000
later on but basically imagine you've

00:22:35,330 --> 00:22:40,160
got your box class you got height width

00:22:38,000 --> 00:22:41,660
and depth and you need to calculate the

00:22:40,160 --> 00:22:44,270
volume which is height times width times

00:22:41,660 --> 00:22:46,910
depth this is a fairly lightweight to

00:22:44,270 --> 00:22:48,530
calculate pretend for the sake of

00:22:46,910 --> 00:22:50,810
argument that it's very heavy weight and

00:22:48,530 --> 00:22:53,780
you only want to calculate that once how

00:22:50,810 --> 00:22:55,550
do you do that it looks I've got a

00:22:53,780 --> 00:22:58,610
volume attribute I've declared it as

00:22:55,550 --> 00:22:59,900
read-only I don't really need to assign

00:22:58,610 --> 00:23:01,910
a type to this because I'm just

00:22:59,900 --> 00:23:04,070
returning it i know internally it's fine

00:23:01,910 --> 00:23:06,170
and it argues on death because I don't

00:23:04,070 --> 00:23:09,620
want someone to be able to pass volume

00:23:06,170 --> 00:23:12,410
in the constructor it's lazy because I

00:23:09,620 --> 00:23:14,450
needed to be calculated after I know my

00:23:12,410 --> 00:23:16,400
height width and depth have been defined

00:23:14,450 --> 00:23:18,590
and then I have a builder Club build

00:23:16,400 --> 00:23:22,850
volume which is returned to cell times

00:23:18,590 --> 00:23:23,140
five times width times death nobody does

00:23:22,850 --> 00:23:25,910
that

00:23:23,140 --> 00:23:27,560
nobody jumps through those hoops that is

00:23:25,910 --> 00:23:29,150
too painful they're just going to

00:23:27,560 --> 00:23:31,190
recalculate the volume every time and if

00:23:29,150 --> 00:23:36,260
that's an expensive function it becomes

00:23:31,190 --> 00:23:38,840
painful to fix that that's how you do it

00:23:36,260 --> 00:23:42,050
in court it has volume declare that it

00:23:38,840 --> 00:23:43,940
has rear and a builder and then build

00:23:42,050 --> 00:23:45,860
volume height width and depth for a

00:23:43,940 --> 00:23:47,510
builder if you don't assign the

00:23:45,860 --> 00:23:49,520
immediate attribute that means the

00:23:47,510 --> 00:23:51,110
builders automatically lazy and is

00:23:49,520 --> 00:23:54,020
calculated once and only once and it's

00:23:51,110 --> 00:23:56,230
easy to do to solve this problem that we

00:23:54,020 --> 00:23:56,230
have

00:23:56,800 --> 00:24:01,180
so side by side you can see boom juice

00:23:59,950 --> 00:24:03,430
is on your left

00:24:01,180 --> 00:24:05,920
core is on your right you can see core

00:24:03,430 --> 00:24:09,100
is a lot shorter it's a lot easier to

00:24:05,920 --> 00:24:10,720
read there's less stuff to remember in

00:24:09,100 --> 00:24:12,100
order to figure out what it's doing and

00:24:10,720 --> 00:24:17,050
because it names are descriptive you can

00:24:12,100 --> 00:24:18,520
generally understand what's going on but

00:24:17,050 --> 00:24:20,290
I want to talk about object construction

00:24:18,520 --> 00:24:22,680
a little bit so this one gets a little

00:24:20,290 --> 00:24:25,690
frustrating for me

00:24:22,680 --> 00:24:28,540
so first of all it's a core

00:24:25,690 --> 00:24:31,900
I have two variations of the new

00:24:28,540 --> 00:24:34,330
attribute if I have just : new that

00:24:31,900 --> 00:24:38,170
means this attribute must be passed to

00:24:34,330 --> 00:24:40,570
the constructor if I have new optional

00:24:38,170 --> 00:24:42,220
then it may be passing constructor it's

00:24:40,570 --> 00:24:43,450
absolutely not required by the way if

00:24:42,220 --> 00:24:45,760
you want to be passed under different

00:24:43,450 --> 00:24:47,080
name there's a colon name attribute

00:24:45,760 --> 00:24:48,940
which allows you to rename that but I'm

00:24:47,080 --> 00:24:50,980
not covering that right now so that that

00:24:48,940 --> 00:24:52,570
is there in case anyone's wondering so

00:24:50,980 --> 00:24:56,470
that's how you declare things get passed

00:24:52,570 --> 00:24:58,690
to an object constructor so in moose

00:24:56,470 --> 00:25:00,700
I've got my height width depth I've got

00:24:58,690 --> 00:25:02,290
a box which has my height width and

00:25:00,700 --> 00:25:06,310
depth passed to it now I say my box

00:25:02,290 --> 00:25:08,350
volume it's 21 great that's fine what if

00:25:06,310 --> 00:25:09,760
I want to have a special case a cube

00:25:08,350 --> 00:25:11,020
well height width and depth are all the

00:25:09,760 --> 00:25:14,020
same so I won't be able to pass a single

00:25:11,020 --> 00:25:17,560
argument to the constructor how does

00:25:14,020 --> 00:25:18,790
that actually work well first thing you

00:25:17,560 --> 00:25:20,530
do is you go to the new stocks to

00:25:18,790 --> 00:25:22,120
remember how to write build arts because

00:25:20,530 --> 00:25:24,640
I can never remember how to like build

00:25:22,120 --> 00:25:26,980
arts so I write and around

00:25:24,640 --> 00:25:29,650
that's add modifier if one equals no

00:25:26,980 --> 00:25:32,530
regards then my the number the length of

00:25:29,650 --> 00:25:34,690
the side is r0 and I pass in then I

00:25:32,530 --> 00:25:37,180
reconstruct my argument array and I call

00:25:34,690 --> 00:25:41,230
the original version of build arts and

00:25:37,180 --> 00:25:42,550
now I've got a one you know I can pass

00:25:41,230 --> 00:25:45,520
just a single number into the

00:25:42,550 --> 00:25:48,310
constructor but this is going to fail

00:25:45,520 --> 00:25:51,100
because of moon so you can pass a list

00:25:48,310 --> 00:25:55,300
of key values key value pairs or you can

00:25:51,100 --> 00:25:56,950
pass a single pass rep and you're gonna

00:25:55,300 --> 00:25:59,200
get us a weird error after we depth does

00:25:56,950 --> 00:26:01,570
not pass the type constraint because the

00:25:59,200 --> 00:26:03,670
heck is going on with that so actually I

00:26:01,570 --> 00:26:05,980
have to check if I have one and only one

00:26:03,670 --> 00:26:08,110
and if that argument is not a reference

00:26:05,980 --> 00:26:10,370
and even this can be overly simplistic

00:26:08,110 --> 00:26:14,299
depending upon how crazy you want to get

00:26:10,370 --> 00:26:16,100
this is a king and actually this is what

00:26:14,299 --> 00:26:17,929
I I'm so embarrassed by this with all my

00:26:16,100 --> 00:26:21,200
clients I have to write it build arcs I

00:26:17,929 --> 00:26:24,020
have this magic voodoo line noise I put

00:26:21,200 --> 00:26:25,549
at the top you know if args equals it

00:26:24,020 --> 00:26:29,710
only have one argument then I've got my

00:26:25,549 --> 00:26:35,179
posterior fr0 or argues and blah that's

00:26:29,710 --> 00:26:36,740
shameful so here's how they do it in

00:26:35,179 --> 00:26:38,240
Java in case it's serious they actually

00:26:36,740 --> 00:26:40,070
have a constructor overloading

00:26:38,240 --> 00:26:42,320
that's it overloading you just declared

00:26:40,070 --> 00:26:44,090
a constructor more than once with three

00:26:42,320 --> 00:26:46,880
arguments or only one argument and it's

00:26:44,090 --> 00:26:50,630
just dead simple then this has the

00:26:46,880 --> 00:26:52,309
problem that like you've seen for this

00:26:50,630 --> 00:26:54,529
first example box three two and three

00:26:52,309 --> 00:26:56,690
point five you know those named

00:26:54,529 --> 00:27:00,260
arguments are much lighter solution but

00:26:56,690 --> 00:27:04,659
it works it's very easy to overload your

00:27:00,260 --> 00:27:07,880
constructor so look at moves liquor Java

00:27:04,659 --> 00:27:10,630
Java famously verbose is shorter and

00:27:07,880 --> 00:27:10,630
easier to read

00:27:11,350 --> 00:27:16,360
we don't need that we don't need so the

00:27:14,680 --> 00:27:17,770
downside as I mentioned you can't tell

00:27:16,360 --> 00:27:21,540
which of those the height width or depth

00:27:17,770 --> 00:27:25,000
it's harder to read what is poor doing

00:27:21,540 --> 00:27:27,430
so I apologize I brought a term from

00:27:25,000 --> 00:27:29,110
Rock crew we have phases of object

00:27:27,430 --> 00:27:31,330
construction and this is the construct

00:27:29,110 --> 00:27:33,730
phase so we have a constructor phaser I

00:27:31,330 --> 00:27:36,850
would like a better term but fine

00:27:33,730 --> 00:27:38,560
construct if I have one argument then I

00:27:36,850 --> 00:27:41,130
just remap my args and I return the art

00:27:38,560 --> 00:27:43,570
stuff it's that simple it's that easy

00:27:41,130 --> 00:27:47,140
you don't have to remember any sort of

00:27:43,570 --> 00:27:49,450
arcane syntax for this and I

00:27:47,140 --> 00:27:51,040
particularly want to thank Graham not

00:27:49,450 --> 00:27:52,900
for beating me over the head because my

00:27:51,040 --> 00:27:54,640
wrist original work was constructor was

00:27:52,900 --> 00:27:57,250
terrible so we have a construct phase

00:27:54,640 --> 00:27:59,230
this is what happens before everything

00:27:57,250 --> 00:28:00,220
is initialized so you can rewrite your

00:27:59,230 --> 00:28:02,380
arguments on the fly

00:28:00,220 --> 00:28:06,820
we don't call it build args because the

00:28:02,380 --> 00:28:08,680
semantics are not the same so there's

00:28:06,820 --> 00:28:10,420
moose on the left your build args and

00:28:08,680 --> 00:28:13,600
that funky lion noise you have up there

00:28:10,420 --> 00:28:16,810
and then there's cor on the right much

00:28:13,600 --> 00:28:17,920
easier to read or you can punt and you

00:28:16,810 --> 00:28:20,530
can just declare an alternate

00:28:17,920 --> 00:28:23,440
constructor with you know class and none

00:28:20,530 --> 00:28:25,000
and then it becomes easy so we can

00:28:23,440 --> 00:28:29,410
sidestep that entire mess if we need to

00:28:25,000 --> 00:28:32,320
so core guiding principles make it optic

00:28:29,410 --> 00:28:34,390
construction easy and worked very very

00:28:32,320 --> 00:28:36,990
hard on that and I hope I got it right

00:28:34,390 --> 00:28:41,140
but there will be cases where I did not

00:28:36,990 --> 00:28:43,750
so let's look at classic 400 right now

00:28:41,140 --> 00:28:45,970
this is a if you like bless this is how

00:28:43,750 --> 00:28:47,170
it worked now some of you may remember a

00:28:45,970 --> 00:28:49,510
long time ago

00:28:47,170 --> 00:28:52,420
when we blessed a hash Rev we would put

00:28:49,510 --> 00:28:54,340
underscores on the attribute names why

00:28:52,420 --> 00:28:55,870
did we do that because we were saying if

00:28:54,340 --> 00:28:57,070
you reached inside these objects these

00:28:55,870 --> 00:28:59,340
are the private ones they're not allowed

00:28:57,070 --> 00:28:59,340
to touch

00:29:00,120 --> 00:29:05,160
that that's okay I'm not gonna go there

00:29:03,180 --> 00:29:07,680
basically we got a name and a birthdate

00:29:05,160 --> 00:29:09,150
they're both read-only so I've actually

00:29:07,680 --> 00:29:11,010
put a little guard in there so if you

00:29:09,150 --> 00:29:13,650
try and pass a value to the name or

00:29:11,010 --> 00:29:16,650
first date methods that they won't blow

00:29:13,650 --> 00:29:18,420
up on you it moves this is so much

00:29:16,650 --> 00:29:20,430
easier just to clear each of them as

00:29:18,420 --> 00:29:22,290
read-only now you can declare the types

00:29:20,430 --> 00:29:24,570
it's much easier to do you say they're

00:29:22,290 --> 00:29:26,250
required because you don't have a

00:29:24,570 --> 00:29:28,890
builder that means that you will have to

00:29:26,250 --> 00:29:31,200
pass it instructor and then you've got

00:29:28,890 --> 00:29:33,780
this magic make better than mutable at

00:29:31,200 --> 00:29:36,020
the bottom because you can't tell when

00:29:33,780 --> 00:29:38,310
an object class is done defining itself

00:29:36,020 --> 00:29:45,030
so that's but still that's much better

00:29:38,310 --> 00:29:45,630
than corporal and there's court boom we

00:29:45,030 --> 00:29:55,560
try that again

00:29:45,630 --> 00:29:59,250
I accidentally thrown button okay are we

00:29:55,560 --> 00:30:01,230
back so there's four I've got my name

00:29:59,250 --> 00:30:03,750
it's got a reader new being subscribed

00:30:01,230 --> 00:30:07,670
instructor I've got a type birthday

00:30:03,750 --> 00:30:16,140
reader knew that okay much simpler much

00:30:07,670 --> 00:30:18,900
easier to write so we can compare core

00:30:16,140 --> 00:30:20,730
to core earl ocarina to pour curl and

00:30:18,900 --> 00:30:22,980
you can see how much simpler and easier

00:30:20,730 --> 00:30:25,950
that is direct it's very fast and it

00:30:22,980 --> 00:30:30,450
gives you a lot of power in just purely

00:30:25,950 --> 00:30:31,620
declarative code right there so many of

00:30:30,450 --> 00:30:33,870
the object systems they say look at

00:30:31,620 --> 00:30:35,820
Sipan they're just public methods for

00:30:33,870 --> 00:30:38,670
data which is the wrong thing to do you

00:30:35,820 --> 00:30:40,650
don't want to expose all of that data

00:30:38,670 --> 00:30:42,450
right up front because we want to keep

00:30:40,650 --> 00:30:44,280
the smallest interface possible so you

00:30:42,450 --> 00:30:46,380
have the freedom to change the contract

00:30:44,280 --> 00:30:48,300
dimension contract later there's an old

00:30:46,380 --> 00:30:52,110
saying to open closed principle at US

00:30:48,300 --> 00:30:55,230
Open for modification or open for

00:30:52,110 --> 00:30:57,120
innocent close to modification and by

00:30:55,230 --> 00:30:59,250
having the smallest interface possible

00:30:57,120 --> 00:31:01,500
that makes it easier moose on ports and

00:30:59,250 --> 00:31:03,360
practically requires public methods it's

00:31:01,500 --> 00:31:04,620
hard to avoid that and everybody in

00:31:03,360 --> 00:31:06,000
there dog wants public method so they're

00:31:04,620 --> 00:31:07,590
writing these things all the time but

00:31:06,000 --> 00:31:09,780
they want these simply because it's so

00:31:07,590 --> 00:31:11,520
hard to declare that data internally and

00:31:09,780 --> 00:31:14,070
objects in perl the way it's currently

00:31:11,520 --> 00:31:15,600
structured so for

00:31:14,070 --> 00:31:21,600
principle number five attributes for

00:31:15,600 --> 00:31:25,290
data such as B B's and I've made it here

00:31:21,600 --> 00:31:27,240
is a much more a real example cache LRU

00:31:25,290 --> 00:31:30,570
least recently used cache written in

00:31:27,240 --> 00:31:33,210
corporal you can't see it because it's

00:31:30,570 --> 00:31:34,800
so much code it's harder to read so the

00:31:33,210 --> 00:31:36,810
font size is a little bit bigger here

00:31:34,800 --> 00:31:42,000
for moose that's a little bit easier to

00:31:36,810 --> 00:31:44,760
read and then there's core very little

00:31:42,000 --> 00:31:46,440
code required for that almost all its

00:31:44,760 --> 00:31:48,480
declarative and we only have to write

00:31:46,440 --> 00:31:51,660
one bit of actual procedural code which

00:31:48,480 --> 00:31:53,280
is the set method which handles you know

00:31:51,660 --> 00:31:57,450
invalidating things of the cache

00:31:53,280 --> 00:31:58,910
basically so very simple very easy so if

00:31:57,450 --> 00:32:02,100
we look at this later

00:31:58,910 --> 00:32:03,840
we can see I've got not lazy default so

00:32:02,100 --> 00:32:05,640
instead of having to build or method I

00:32:03,840 --> 00:32:08,660
can have equals time and that gets

00:32:05,640 --> 00:32:10,860
evaluated immediately assuming the value

00:32:08,660 --> 00:32:13,590
isn't passed in the constructor if it

00:32:10,860 --> 00:32:16,590
was required you can see I've got my

00:32:13,590 --> 00:32:18,120
private data right there that's my cache

00:32:16,590 --> 00:32:22,250
variable that is not available outside

00:32:18,120 --> 00:32:24,750
the class it's private

00:32:22,250 --> 00:32:26,640
we've got this Mac size which is an

00:32:24,750 --> 00:32:28,050
optional value I can specify the number

00:32:26,640 --> 00:32:30,330
of elements I'm allowed to have my cache

00:32:28,050 --> 00:32:31,890
and it's optional we passed the

00:32:30,330 --> 00:32:33,240
constructor I've got our readers and now

00:32:31,890 --> 00:32:35,250
you can read how many elements are

00:32:33,240 --> 00:32:37,560
allowed we assert a type which is a

00:32:35,250 --> 00:32:39,690
positive integer and then you can see I

00:32:37,560 --> 00:32:41,970
use it later on in the method where I'm

00:32:39,690 --> 00:32:45,690
gesturing at my screen and you can't see

00:32:41,970 --> 00:32:47,280
that so I'm using the method this is a

00:32:45,690 --> 00:32:51,160
Mac science variable again so nice

00:32:47,280 --> 00:32:54,180
private it's nice it's encapsulated

00:32:51,160 --> 00:32:54,180
and it's easier

00:32:56,299 --> 00:33:03,889
but oh okay so by the way this is very

00:33:02,059 --> 00:33:05,239
similar to Baku I wrote the same thing

00:33:03,889 --> 00:33:06,679
in Raqqa I was little bit curious about

00:33:05,239 --> 00:33:08,570
this this didn't actually work because

00:33:06,679 --> 00:33:10,700
it turned out the ordered hash was

00:33:08,570 --> 00:33:12,080
actually sorted not ordered so it didn't

00:33:10,700 --> 00:33:13,339
work but this is the structure of what

00:33:12,080 --> 00:33:17,739
it would look like to knock you in case

00:33:13,339 --> 00:33:20,659
anyone's curious it's very very similar

00:33:17,739 --> 00:33:22,879
so but is hands though what's that

00:33:20,659 --> 00:33:26,269
function do it's kind of like mine and

00:33:22,879 --> 00:33:29,059
that clears very did it actually I think

00:33:26,269 --> 00:33:29,599
our is a little bit more appropriate

00:33:29,059 --> 00:33:31,669
description

00:33:29,599 --> 00:33:35,829
it's a lexically scoped and bounded that

00:33:31,669 --> 00:33:38,179
particular namespace that it's in and

00:33:35,829 --> 00:33:40,309
all it does is clear the variable we

00:33:38,179 --> 00:33:43,729
have attributes to add additional

00:33:40,309 --> 00:33:47,749
behavior optional structure readers

00:33:43,729 --> 00:33:49,909
builders whatever these are all the slot

00:33:47,749 --> 00:33:52,669
attributes that we currently have

00:33:49,909 --> 00:33:54,649
defined readers writers builders

00:33:52,669 --> 00:33:56,659
constructor arguments we can declare

00:33:54,649 --> 00:33:58,219
them as weak if we need to give it to

00:33:56,659 --> 00:33:59,299
builder you can say it's immediate which

00:33:58,219 --> 00:34:01,629
means it's not lazy

00:33:59,299 --> 00:34:03,709
we have clears predicate methods

00:34:01,629 --> 00:34:06,349
handlers in case you want to do object

00:34:03,709 --> 00:34:08,389
delegation you've got a name in case the

00:34:06,349 --> 00:34:10,460
name of the slot variable is not

00:34:08,389 --> 00:34:15,679
appropriate for the name that you expose

00:34:10,460 --> 00:34:17,359
outside the class and right now we

00:34:15,679 --> 00:34:18,589
actually only have one illegal

00:34:17,359 --> 00:34:21,500
combination when you put all those

00:34:18,589 --> 00:34:23,899
attributes together a builder of default

00:34:21,500 --> 00:34:27,740
default this kind of like a shorthand

00:34:23,899 --> 00:34:31,339
for a builder which is a media if it

00:34:27,740 --> 00:34:33,649
weren't for that there would be no

00:34:31,339 --> 00:34:35,510
illegal combinations of those attributes

00:34:33,649 --> 00:34:39,230
but I put that in there just to make it

00:34:35,510 --> 00:34:42,559
easy for people to be able to do this so

00:34:39,230 --> 00:34:45,049
I did this to make it very very hard for

00:34:42,559 --> 00:34:48,500
you to write a slot and assign behavior

00:34:45,049 --> 00:34:51,079
in a manner that is actually illegal or

00:34:48,500 --> 00:34:56,599
in doubt I took a lot of time but I

00:34:51,079 --> 00:34:59,420
think it's pretty close to it so core

00:34:56,599 --> 00:35:01,099
should support types you notice the

00:34:59,420 --> 00:35:02,599
number of references to them that might

00:35:01,099 --> 00:35:03,980
not make it in the first version I think

00:35:02,599 --> 00:35:05,029
that's going to be disappointing because

00:35:03,980 --> 00:35:06,500
like do you think that's one of the

00:35:05,029 --> 00:35:08,930
features that we would need to make this

00:35:06,500 --> 00:35:10,519
better then so if you are familiar with

00:35:08,930 --> 00:35:12,470
Python too

00:35:10,519 --> 00:35:14,359
I've asked in Python - you know I've got

00:35:12,470 --> 00:35:16,460
a date time and I want to make sure that

00:35:14,359 --> 00:35:19,579
I'm assigning a date time object for

00:35:16,460 --> 00:35:21,589
that you know attribute and not a string

00:35:19,579 --> 00:35:23,599
how do I validate that what's best

00:35:21,589 --> 00:35:25,220
practices and Python - developers say oh

00:35:23,599 --> 00:35:26,749
you don't validate your data that's

00:35:25,220 --> 00:35:29,690
unpaid on that you just know how to use

00:35:26,749 --> 00:35:31,549
your data I've got a million lied system

00:35:29,690 --> 00:35:35,599
I can't check this for every single

00:35:31,549 --> 00:35:36,979
class that I did so Python 3 anyplace is

00:35:35,599 --> 00:35:38,869
much much better job of that so I think

00:35:36,979 --> 00:35:40,220
for supporting types would be important

00:35:38,869 --> 00:35:41,660
it would be a one-time check but it

00:35:40,220 --> 00:35:45,890
should also be optional if you don't

00:35:41,660 --> 00:35:48,079
lose them there are some questions about

00:35:45,890 --> 00:35:52,789
these syntax subtypes which I won't go

00:35:48,079 --> 00:35:54,920
into right now so the workers that we

00:35:52,789 --> 00:35:57,799
have in it so sorry has been discussing

00:35:54,920 --> 00:35:58,779
some ideas with me I said Paul Sivan

00:35:57,799 --> 00:36:01,519
littles been working on a prototype

00:35:58,779 --> 00:36:03,470
transpilers he uses the older versions

00:36:01,519 --> 00:36:05,529
of pearl and Paul Evans his work with

00:36:03,470 --> 00:36:08,029
object pads from the existing so I did a

00:36:05,529 --> 00:36:10,599
some benchmarking on that object

00:36:08,029 --> 00:36:13,099
constructions a little bit slower but

00:36:10,599 --> 00:36:15,229
without him doing any optimization it

00:36:13,099 --> 00:36:18,859
actually runs after the construction it

00:36:15,229 --> 00:36:21,910
runs faster than core code does today so

00:36:18,859 --> 00:36:25,400
I think that's absolutely wonderful so

00:36:21,910 --> 00:36:27,680
you can go out to Sipan and check out

00:36:25,400 --> 00:36:31,069
object pad to see how it works is very

00:36:27,680 --> 00:36:33,259
similar to core he's experimenting with

00:36:31,069 --> 00:36:34,640
some ideas which go beyond core other

00:36:33,259 --> 00:36:36,170
things that he wants to play with but

00:36:34,640 --> 00:36:38,690
this has been a great test fun to see

00:36:36,170 --> 00:36:41,869
how these things actually work

00:36:38,690 --> 00:36:43,940
note the method in there if you use

00:36:41,869 --> 00:36:45,589
method instead of a sub that pearl will

00:36:43,940 --> 00:36:47,509
know its method and you'll automatically

00:36:45,589 --> 00:36:49,789
get a dollar self variable in there

00:36:47,509 --> 00:36:51,440
which quite often you won't have to use

00:36:49,789 --> 00:36:54,049
unless you're calling another method

00:36:51,440 --> 00:36:59,269
inside your class so again very simple

00:36:54,049 --> 00:37:00,739
very easy so the objections I've gotten

00:36:59,269 --> 00:37:02,960
a court I've got to address those

00:37:00,739 --> 00:37:04,460
because I think they're important so les

00:37:02,960 --> 00:37:06,140
was good enough for my grand last body

00:37:04,460 --> 00:37:08,029
not very nice to know if bless was good

00:37:06,140 --> 00:37:11,539
enough for Pearl for so long why do we

00:37:08,029 --> 00:37:13,549
need something new nobody's proposing

00:37:11,539 --> 00:37:15,650
really the best for the court if if you

00:37:13,549 --> 00:37:17,269
like bless that's fine just keep using

00:37:15,650 --> 00:37:18,739
it that's just perfectly fine we're not

00:37:17,269 --> 00:37:20,239
trying to restrict you and we understand

00:37:18,739 --> 00:37:23,690
sometimes blesses can be perfect in a

00:37:20,239 --> 00:37:26,660
program so why

00:37:23,690 --> 00:37:28,430
yes that one gets a little be be a

00:37:26,660 --> 00:37:30,289
little bit more interesting so when

00:37:28,430 --> 00:37:31,940
talking about the Moose moves has a

00:37:30,289 --> 00:37:33,559
whole lot of dependencies which means

00:37:31,940 --> 00:37:34,789
all those dependencies would get slipped

00:37:33,559 --> 00:37:37,069
to the core we'd have to spend a whole

00:37:34,789 --> 00:37:39,859
lot of time rewriting a lot of those

00:37:37,069 --> 00:37:42,559
dependencies this only one person's just

00:37:39,859 --> 00:37:46,119
loose in the car loses big and it's slow

00:37:42,559 --> 00:37:48,680
and it has a lot of the wrong defaults

00:37:46,119 --> 00:37:50,510
but Lou a lot of people discussed lose

00:37:48,680 --> 00:37:52,220
so why don't we want move in the core it

00:37:50,510 --> 00:37:54,380
was very light it's very fast it's

00:37:52,220 --> 00:37:56,420
wonderful who's also gonna meta method

00:37:54,380 --> 00:37:58,849
if you call make immutable on meta

00:37:56,420 --> 00:38:01,609
that's a no op if you call any other

00:37:58,849 --> 00:38:03,349
valid meta method then all of a sudden

00:38:01,609 --> 00:38:05,839
blue is doing a whole bunch of things

00:38:03,349 --> 00:38:07,789
either building a mop for you or

00:38:05,839 --> 00:38:10,010
possibly inflating your class to a

00:38:07,789 --> 00:38:11,780
proper loose class to a full moose class

00:38:10,010 --> 00:38:14,299
which means if you put mu in the court

00:38:11,780 --> 00:38:15,920
you either have to pull loose into the

00:38:14,299 --> 00:38:17,900
core or you have to tell everyone

00:38:15,920 --> 00:38:19,579
currently using move it's not forward

00:38:17,900 --> 00:38:24,530
compatible your loop code might break

00:38:19,579 --> 00:38:26,900
but more than that you has things like

00:38:24,530 --> 00:38:29,210
ro RW RW p and lazy

00:38:26,900 --> 00:38:30,740
so you can't really separate the reading

00:38:29,210 --> 00:38:33,079
and writing of attributes very easily

00:38:30,740 --> 00:38:36,049
and these are the wrong defaults because

00:38:33,079 --> 00:38:37,520
food all of them provide a leader for

00:38:36,049 --> 00:38:41,450
your data which you don't necessarily

00:38:37,520 --> 00:38:42,920
want read and it makes the RW key would

00:38:41,450 --> 00:38:45,230
read write protect it that gives you a

00:38:42,920 --> 00:38:48,140
reader of foo and a writer of underscore

00:38:45,230 --> 00:38:53,470
food but that's not firing and we would

00:38:48,140 --> 00:38:58,039
like to stay a bit quiet as possible so

00:38:53,470 --> 00:39:00,829
good enough is not good enough basically

00:38:58,039 --> 00:39:05,240
no one no one built something great by

00:39:00,829 --> 00:39:07,039
striving for may yes okay we need it to

00:39:05,240 --> 00:39:09,770
be better and that's very important by

00:39:07,039 --> 00:39:12,470
the way if you follow the core work so

00:39:09,770 --> 00:39:17,329
far you know that I oversimplified some

00:39:12,470 --> 00:39:18,829
things I punted on a lot of things so I

00:39:17,329 --> 00:39:20,720
want to apologize for that right now a

00:39:18,829 --> 00:39:23,599
lot of people say why don't we just make

00:39:20,720 --> 00:39:26,420
it a module just put that module out

00:39:23,599 --> 00:39:29,779
there on the seat pan oh yeah that's a

00:39:26,420 --> 00:39:32,750
great idea so now it's object system am

00:39:29,779 --> 00:39:35,599
I going to choose and then we got the

00:39:32,750 --> 00:39:36,910
standards problem at xkcd referred to so

00:39:35,599 --> 00:39:38,740
the situation there 14

00:39:36,910 --> 00:39:40,330
competing standards 14 ridiculous

00:39:38,740 --> 00:39:42,250
developed one universal standard the

00:39:40,330 --> 00:39:44,050
comforts everyone's used cases and the

00:39:42,250 --> 00:39:47,410
situation is that there are 15 computing

00:39:44,050 --> 00:39:51,460
standards the proliferation of oo

00:39:47,410 --> 00:39:54,190
modules on the c-pen is terrible it

00:39:51,460 --> 00:39:55,210
really makes a confusing mess and when I

00:39:54,190 --> 00:39:56,800
go into clients what I'm promised

00:39:55,210 --> 00:39:58,330
clients talk about is it's taking her

00:39:56,800 --> 00:40:00,040
developer so long to get to speed

00:39:58,330 --> 00:40:01,750
because they've written their own hour

00:40:00,040 --> 00:40:03,850
and they've written their own object

00:40:01,750 --> 00:40:05,770
system they've written this and that so

00:40:03,850 --> 00:40:07,450
many things that some many of which

00:40:05,770 --> 00:40:10,450
could be part of the curl core language

00:40:07,450 --> 00:40:12,610
probably not no red no but objects isn't

00:40:10,450 --> 00:40:14,440
deathly that made that would make Perl

00:40:12,610 --> 00:40:18,480
easier to learn and reduce the burden

00:40:14,440 --> 00:40:18,480
for a lot of companies I want to use ver

00:40:18,510 --> 00:40:26,890
so the elephants are of the camel in the

00:40:21,490 --> 00:40:29,470
room 407 mmm so this will probably go

00:40:26,890 --> 00:40:31,300
into pro 7 we but it's gonna have a

00:40:29,470 --> 00:40:32,530
feature guard I don't know the name of

00:40:31,300 --> 00:40:34,210
the piece it's gonna be I don't think we

00:40:32,530 --> 00:40:35,440
can call it use feature for cuz that's

00:40:34,210 --> 00:40:38,020
gonna confuse the heck out of everyone

00:40:35,440 --> 00:40:39,850
so use feature class is my proposal and

00:40:38,020 --> 00:40:42,520
then you get this class cache all our

00:40:39,850 --> 00:40:44,830
you got on the syntax there and then the

00:40:42,520 --> 00:40:46,900
intent is that in Perl 80 you no longer

00:40:44,830 --> 00:40:51,010
have that future garden you use pearl 8

00:40:46,900 --> 00:40:55,630
and boom you have poor so we'll just get

00:40:51,010 --> 00:40:58,630
rid of that little guard why should we

00:40:55,630 --> 00:41:01,000
stop there what else can we do so

00:40:58,630 --> 00:41:02,800
imagine yuck we have this new scope

00:41:01,000 --> 00:41:04,300
syntax modules some module this is

00:41:02,800 --> 00:41:06,460
backwards compatible because this would

00:41:04,300 --> 00:41:08,280
be illegal in older pearls so you can do

00:41:06,460 --> 00:41:11,770
anything you want to in that syntax face

00:41:08,280 --> 00:41:13,120
we have type signatures now to be fair

00:41:11,770 --> 00:41:14,530
Dave Mitchell's already working on type

00:41:13,120 --> 00:41:18,250
sequences so that's probably gonna go in

00:41:14,530 --> 00:41:19,840
there if we wanted to have multi subs we

00:41:18,250 --> 00:41:21,130
could put multi subs and this in this

00:41:19,840 --> 00:41:22,960
case it'd be based upon the number of

00:41:21,130 --> 00:41:24,970
arguments to a function and this really

00:41:22,960 --> 00:41:26,290
solves a number of unusual cases that

00:41:24,970 --> 00:41:28,000
people have but what I would love to see

00:41:26,290 --> 00:41:31,210
at some point is type signatures and

00:41:28,000 --> 00:41:32,710
multi methods because this really solves

00:41:31,210 --> 00:41:34,540
a lot of problems at the moment code

00:41:32,710 --> 00:41:36,730
about how you divide things up but I'm

00:41:34,540 --> 00:41:38,100
not going to go into detail on that

00:41:36,730 --> 00:41:41,100
because I know that's extremely

00:41:38,100 --> 00:41:41,100
controversial

00:41:41,400 --> 00:41:48,090
what about typed variables my total is

00:41:44,560 --> 00:41:49,680
it now this is part of the reason why

00:41:48,090 --> 00:41:51,000
types are problematic so in this

00:41:49,680 --> 00:41:52,410
particular case this is going to be a

00:41:51,000 --> 00:41:55,050
runtime check because we don't know what

00:41:52,410 --> 00:41:57,810
get total is gonna return but you'll

00:41:55,050 --> 00:42:01,770
notice the type definition the signature

00:41:57,810 --> 00:42:03,090
has a different syntax so we don't want

00:42:01,770 --> 00:42:04,920
to have declaring types and different

00:42:03,090 --> 00:42:08,040
places has to use different syntaxes

00:42:04,920 --> 00:42:11,100
because so that's something we're going

00:42:08,040 --> 00:42:12,240
to have to work on so court and the

00:42:11,100 --> 00:42:15,090
court basically it ends the

00:42:12,240 --> 00:42:17,640
embarrassment of how do we do all that

00:42:15,090 --> 00:42:19,110
goes away it's already with object pad

00:42:17,640 --> 00:42:22,140
we're seeing this as being significantly

00:42:19,110 --> 00:42:24,270
faster than corporal not trust booster

00:42:22,140 --> 00:42:27,360
new standard of au becomes easy to learn

00:42:24,270 --> 00:42:29,340
easy to escape and if we get roles in

00:42:27,360 --> 00:42:30,570
there and if we get them done right if

00:42:29,340 --> 00:42:31,920
we get the type system built up

00:42:30,570 --> 00:42:33,570
correctly this will be better though

00:42:31,920 --> 00:42:36,360
than many of the other dynamic places

00:42:33,570 --> 00:42:38,220
out there you know we'll probably start

00:42:36,360 --> 00:42:39,570
with use feature class it sparked a lot

00:42:38,220 --> 00:42:41,850
of interesting ideas but we have to be

00:42:39,570 --> 00:42:47,310
careful to get this right because this

00:42:41,850 --> 00:42:48,120
is going to be or corvy to make we don't

00:42:47,310 --> 00:42:51,780
know what we're gonna do

00:42:48,120 --> 00:42:53,070
native exceptions try catch finally that

00:42:51,780 --> 00:42:54,900
ones problematics it turns out to be

00:42:53,070 --> 00:42:58,380
very slow async/await

00:42:54,900 --> 00:43:00,390
i almost is that would be one getting

00:42:58,380 --> 00:43:03,690
true private methods available maybe

00:43:00,390 --> 00:43:05,010
multi methods types maybe that'll be one

00:43:03,690 --> 00:43:08,160
we don't know we don't know what else

00:43:05,010 --> 00:43:10,500
might be in there so mason core it's

00:43:08,160 --> 00:43:11,970
clean it's simple you get real methods

00:43:10,500 --> 00:43:13,440
we're decoupling the data that accesses

00:43:11,970 --> 00:43:15,960
object instruction we're trying to

00:43:13,440 --> 00:43:17,910
figure out what the MVP is going to be

00:43:15,960 --> 00:43:20,190
and that's the hard part and specifying

00:43:17,910 --> 00:43:22,170
of course how the exact semantics of one

00:43:20,190 --> 00:43:24,060
to behavior and i've skipped over a lot

00:43:22,170 --> 00:43:26,490
because every kind of time and how

00:43:24,060 --> 00:43:29,130
extensible can we make it so that it is

00:43:26,490 --> 00:43:34,050
the basis for you to build new great

00:43:29,130 --> 00:43:36,270
things off so that is it I don't have

00:43:34,050 --> 00:43:39,330
any bonus slide so I know we don't have

00:43:36,270 --> 00:43:42,050
much time but if you have questions I am

00:43:39,330 --> 00:43:42,050
happy to take them

00:43:51,850 --> 00:43:56,050
I'm here okay

00:43:56,170 --> 00:44:00,110
first of all thanks a lot it looks like

00:43:58,460 --> 00:44:04,190
we have two people with questions let's

00:44:00,110 --> 00:44:05,870
start with David so um my question is

00:44:04,190 --> 00:44:07,850
about Americans and I'd like to give you

00:44:05,870 --> 00:44:10,690
the opportunity just tell me do a shut

00:44:07,850 --> 00:44:13,100
up that question before I even get to it

00:44:10,690 --> 00:44:14,240
okay quick we're we know how much time

00:44:13,100 --> 00:44:16,610
okay sorry

00:44:14,240 --> 00:44:19,060
so the question is basically private

00:44:16,610 --> 00:44:23,060
methods private data will those be

00:44:19,060 --> 00:44:25,910
visible to descendant classes to the

00:44:23,060 --> 00:44:28,280
classes that inherit great cool uh yeah

00:44:25,910 --> 00:44:29,210
generally no they will not be also a

00:44:28,280 --> 00:44:31,850
word about inheritance

00:44:29,210 --> 00:44:33,950
uh the fact is the first version of core

00:44:31,850 --> 00:44:38,740
might be single inheritance and then we

00:44:33,950 --> 00:44:42,170
could get multiple inheritance later Oh

00:44:38,740 --> 00:44:46,430
al I just like a question on slack yes

00:44:42,170 --> 00:44:49,100
we're looking at him up for it protected

00:44:46,430 --> 00:44:50,900
will there be protected methods I'm not

00:44:49,100 --> 00:44:52,190
planning on that now protected methods

00:44:50,900 --> 00:44:53,900
that's an idea from Java where you have

00:44:52,190 --> 00:44:56,240
something available a parent class and

00:44:53,900 --> 00:44:57,530
it could be inherited from subclasses

00:44:56,240 --> 00:44:59,000
but it's not available outside the fast

00:44:57,530 --> 00:45:01,400
we are not looking at that at the

00:44:59,000 --> 00:45:02,450
current time there's some questions as

00:45:01,400 --> 00:45:08,180
whether or not that's actually a good

00:45:02,450 --> 00:45:10,520
idea okay Devin okay um yeah I emailed

00:45:08,180 --> 00:45:12,110
you about this and you responded as if I

00:45:10,520 --> 00:45:16,850
was suggesting you put mousse in Cora

00:45:12,110 --> 00:45:18,440
which was not what I was asking is why

00:45:16,850 --> 00:45:20,450
not instead of inventing a new syntax

00:45:18,440 --> 00:45:23,060
why not just try to use either the

00:45:20,450 --> 00:45:27,440
Scirocco syntax but it's or system or

00:45:23,060 --> 00:45:30,200
some subset thereof the raccoon walker

00:45:27,440 --> 00:45:31,820
works great for rocku one of the biggest

00:45:30,200 --> 00:45:33,850
problems we have right there with a

00:45:31,820 --> 00:45:37,070
number of the things is that in perl

00:45:33,850 --> 00:45:39,620
lists and hashes flatten they don't in

00:45:37,070 --> 00:45:41,540
rocku unless you tell them to flat which

00:45:39,620 --> 00:45:43,190
means there's a lot of problems with

00:45:41,540 --> 00:45:45,140
semantics about how things should be

00:45:43,190 --> 00:45:48,800
cleared so I've been looking at like how

00:45:45,140 --> 00:45:51,410
can I do has at array that doesn't

00:45:48,800 --> 00:45:53,930
actually work quite as cleanly in poor

00:45:51,410 --> 00:45:55,280
as I have hoped that it would and plus a

00:45:53,930 --> 00:45:57,230
lot of the syntax in raqqa is

00:45:55,280 --> 00:45:59,090
significantly different and I also don't

00:45:57,230 --> 00:46:00,839
like some of the seasons they made how

00:45:59,090 --> 00:46:03,059
they declare the data for a class

00:46:00,839 --> 00:46:06,059
and how that can get exposed outside of

00:46:03,059 --> 00:46:08,009
the class so you'll notice that a lot of

00:46:06,059 --> 00:46:10,019
what I did looks very similar to rocking

00:46:08,009 --> 00:46:11,729
but there's enough differences designed

00:46:10,019 --> 00:46:14,309
to make classes safer and easier to use

00:46:11,729 --> 00:46:17,309
for larger systems there would be a way

00:46:14,309 --> 00:46:21,749
to avoid the 15 competing standard patan

00:46:17,309 --> 00:46:23,789
thing though that is possible but if you

00:46:21,749 --> 00:46:28,319
looked at my slides for comparing the

00:46:23,789 --> 00:46:29,819
castle or LRU in rocku and core you'll

00:46:28,319 --> 00:46:32,009
see they're very very simple they're not

00:46:29,819 --> 00:46:33,660
that different but rocku syntax is

00:46:32,009 --> 00:46:37,440
significantly different enough from Perl

00:46:33,660 --> 00:46:42,359
that it doesn't actually work okay okay

00:46:37,440 --> 00:46:45,239
Darin yes I'm happy to see privates I

00:46:42,359 --> 00:46:48,079
think you said you had that something

00:46:45,239 --> 00:46:51,930
I'm hoping that can be built in early as

00:46:48,079 --> 00:46:55,469
the analogy to that several languages

00:46:51,930 --> 00:46:57,269
has in perl six calls trusts where it's

00:46:55,469 --> 00:47:00,390
something that's private to everybody

00:46:57,269 --> 00:47:03,509
except other classes that you name this

00:47:00,390 --> 00:47:07,499
is a very valuable feature for a multi

00:47:03,509 --> 00:47:09,299
class api's and Java and c-sharp and

00:47:07,499 --> 00:47:12,059
whatever also have their analogies

00:47:09,299 --> 00:47:14,869
called internal or package scope and I

00:47:12,059 --> 00:47:17,489
think would be great to include that

00:47:14,869 --> 00:47:21,839
probably modeled after a coup like

00:47:17,489 --> 00:47:23,940
trusts okay so having something having

00:47:21,839 --> 00:47:26,400
trusted methods is would definitely be a

00:47:23,940 --> 00:47:28,289
V to feature at this point trying to

00:47:26,400 --> 00:47:28,529
figure out what our MVP is going to look

00:47:28,289 --> 00:47:30,420
like

00:47:28,529 --> 00:47:33,329
I agree the trust methods could be

00:47:30,420 --> 00:47:36,329
valuable if you want to comment on the

00:47:33,329 --> 00:47:38,130
core wiki just open a new issue for it

00:47:36,329 --> 00:47:40,319
that's fine especially if you have a

00:47:38,130 --> 00:47:43,650
proposed syntax and the semantics attach

00:47:40,319 --> 00:47:45,210
that syntax with some use cases that

00:47:43,650 --> 00:47:47,910
would be great because it allows us to

00:47:45,210 --> 00:47:49,979
evaluate that much better I was also

00:47:47,910 --> 00:47:53,069
thinking trust in attributes assuming

00:47:49,979 --> 00:47:54,599
you have private attributes know all

00:47:53,069 --> 00:47:56,069
attributes at this time are intended to

00:47:54,599 --> 00:47:59,670
be private and then you would expose

00:47:56,069 --> 00:48:00,869
them with the all slots or private and

00:47:59,670 --> 00:48:02,039
then the attributes that you assign

00:48:00,869 --> 00:48:03,299
after the slots is how you actually

00:48:02,039 --> 00:48:09,059
expose not a problem

00:48:03,299 --> 00:48:11,190
thank you okay mark yes one thing that I

00:48:09,059 --> 00:48:14,339
see is a regular issue with the way we

00:48:11,190 --> 00:48:17,699
do a lot of Perl is roll

00:48:14,339 --> 00:48:19,920
our conflate code composition and safe

00:48:17,699 --> 00:48:24,329
code composition with defining

00:48:19,920 --> 00:48:25,439
interfaces and behavior and so you know

00:48:24,329 --> 00:48:28,049
it's one of the things that I'd like to

00:48:25,439 --> 00:48:31,259
see you know I'd like to hear you

00:48:28,049 --> 00:48:32,699
address okay so rolls for those not

00:48:31,259 --> 00:48:34,349
familiar with them they're they're like

00:48:32,699 --> 00:48:37,099
subsets of behavior that you can share

00:48:34,349 --> 00:48:39,119
across unrelated classes and rolls have

00:48:37,099 --> 00:48:40,650
keeping it simple they have two primary

00:48:39,119 --> 00:48:43,109
components they have behaviors they

00:48:40,650 --> 00:48:47,430
provide methods and behaviors they

00:48:43,109 --> 00:48:48,569
require which are methods and I didn't

00:48:47,430 --> 00:48:50,849
touch them almost I didn't have a time

00:48:48,569 --> 00:48:52,920
in this talk but basically the behaviors

00:48:50,849 --> 00:48:54,089
that you require you list a list of

00:48:52,920 --> 00:48:57,209
required behavior that's called an

00:48:54,089 --> 00:48:58,799
interface I already have that built into

00:48:57,209 --> 00:49:00,660
the role but I can't take that out of

00:48:58,799 --> 00:49:03,150
the role because if a role has a list of

00:49:00,660 --> 00:49:04,859
behaviors that it requires it has to

00:49:03,150 --> 00:49:06,660
list the behaviors that are required and

00:49:04,859 --> 00:49:09,180
breaking them out into a separate

00:49:06,660 --> 00:49:11,339
interface class for something that is

00:49:09,180 --> 00:49:14,579
internal to this role and only this role

00:49:11,339 --> 00:49:17,489
I I don't see the value in that this

00:49:14,579 --> 00:49:19,140
time and it looks like it might be over

00:49:17,489 --> 00:49:20,759
complicating the system for something

00:49:19,140 --> 00:49:23,400
that it's harder for me to understand

00:49:20,759 --> 00:49:25,619
the value of because roles have to

00:49:23,400 --> 00:49:29,609
provide that they have to say these are

00:49:25,619 --> 00:49:31,019
the behaviors I require yeah I guess the

00:49:29,609 --> 00:49:34,140
thing is with a role you know you may

00:49:31,019 --> 00:49:36,029
like alias the particular methods like I

00:49:34,140 --> 00:49:37,890
need to have anything that provides this

00:49:36,029 --> 00:49:40,259
capability and you could communicate

00:49:37,890 --> 00:49:43,199
like call this method to get it when you

00:49:40,259 --> 00:49:49,979
specify a role but you know I hear what

00:49:43,199 --> 00:49:51,239
you're saying thank you okay

00:49:49,979 --> 00:49:53,489
I don't think we have any more questions

00:49:51,239 --> 00:49:55,469
but I'll bet you anything Curtis is

00:49:53,489 --> 00:49:58,130
going to be in slack and can answer any

00:49:55,469 --> 00:50:00,719
questions in hallway if anybody has them

00:49:58,130 --> 00:50:05,989
thank you everybody for coming thank you

00:50:00,719 --> 00:50:05,989

YouTube URL: https://www.youtube.com/watch?v=Tst-vs4Br2A


