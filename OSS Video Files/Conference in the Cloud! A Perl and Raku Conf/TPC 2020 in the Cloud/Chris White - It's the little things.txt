Title: Chris White - It's the little things
Publication date: 2020-06-25
Playlist: TPC 2020 in the Cloud
Description: 
	I spend most of my terminal time in bash and vim, so little slowdowns in either disproportionately drain my time and energy. Since mid-2019, I have smoothed over warts in those tools by creating new shortcuts and by learning more about what the software already offers! Users of any Unix-like environment will find something they can use in this collection of bash, git, vim, and command-line tips. Attendees will learn new ways to decrease their frustration and increase their productivity. -Ofun!
Captions: 
	00:00:00,000 --> 00:00:09,049
I will be checking it afterwards so here

00:00:06,810 --> 00:00:09,049
we go

00:00:11,780 --> 00:00:22,800
can you see my slides yes all right

00:00:18,210 --> 00:00:25,320
thank you hi everybody my name is Chris

00:00:22,800 --> 00:00:28,830
white cxw thanks very much for being

00:00:25,320 --> 00:00:31,830
here today I appreciate it I have been

00:00:28,830 --> 00:00:34,770
using Perl for about three and a half

00:00:31,830 --> 00:00:37,980
years and using and programming and

00:00:34,770 --> 00:00:39,840
using UNIX and unix-like things for more

00:00:37,980 --> 00:00:41,670
years than I will say but in the past

00:00:39,840 --> 00:00:42,930
year I've found a number of tips that

00:00:41,670 --> 00:00:45,989
have really helped me out in the

00:00:42,930 --> 00:00:47,969
day-to-day my goal today is to speed up

00:00:45,989 --> 00:00:53,399
your command line and editing experience

00:00:47,969 --> 00:00:55,020
so without further ado here we are at

00:00:53,399 --> 00:00:58,710
the starting line let's see if we can do

00:00:55,020 --> 00:01:01,410
0 to 60 in 20 minutes start with an easy

00:00:58,710 --> 00:01:04,019
one this is the output this is the end

00:01:01,410 --> 00:01:06,869
of the output of one make and the

00:01:04,019 --> 00:01:08,700
beginning of the next make can you spot

00:01:06,869 --> 00:01:11,880
the make command anywhere in there

00:01:08,700 --> 00:01:14,040
well I can't without squinting one

00:01:11,880 --> 00:01:17,220
simple change makes it much easier to

00:01:14,040 --> 00:01:18,689
tell where one scroll back ends and the

00:01:17,220 --> 00:01:21,119
other begins and that is just to

00:01:18,689 --> 00:01:22,830
colorize the prompt if you haven't done

00:01:21,119 --> 00:01:24,750
this and you don't take anything else

00:01:22,830 --> 00:01:27,540
away from this presentation please

00:01:24,750 --> 00:01:29,280
please make your prompt colorful so that

00:01:27,540 --> 00:01:31,500
you don't wind up reading the wrong make

00:01:29,280 --> 00:01:35,820
log and wondering why the change you

00:01:31,500 --> 00:01:37,619
made didn't take effect ok now we're

00:01:35,820 --> 00:01:39,079
rolling all right let's see what else we

00:01:37,619 --> 00:01:41,939
can do

00:01:39,079 --> 00:01:43,770
dollarz bang and bash ok suppose you

00:01:41,939 --> 00:01:47,100
want to check the contents of some file

00:01:43,770 --> 00:01:49,259
before you unzip it and it trashes over

00:01:47,100 --> 00:01:51,149
writes lots of stuff good idea right of

00:01:49,259 --> 00:01:55,100
course the zip file has a ridiculously

00:01:51,149 --> 00:01:58,680
long name don't they all you don't have

00:01:55,100 --> 00:02:00,840
to retype that name dollar Spang expands

00:01:58,680 --> 00:02:05,159
to the last word on the last command you

00:02:00,840 --> 00:02:07,590
ran in bash very handy you can pull

00:02:05,159 --> 00:02:08,819
other words as well for example bang

00:02:07,590 --> 00:02:11,430
bang :

00:02:08,819 --> 00:02:13,980
0 will give you the command just in case

00:02:11,430 --> 00:02:18,210
the name of the binary is really long

00:02:13,980 --> 00:02:19,950
dollars bang-bang dollars is alias $2

00:02:18,210 --> 00:02:21,510
underscore but I don't use that in bash

00:02:19,950 --> 00:02:25,710
because I don't want to get it confused

00:02:21,510 --> 00:02:32,310
with the topic variable in Perl over to

00:02:25,710 --> 00:02:34,170
vim : B is to open a file is to show a

00:02:32,310 --> 00:02:37,470
file that you already have open B for

00:02:34,170 --> 00:02:40,650
buffer so the other day I had this big

00:02:37,470 --> 00:02:42,420
long list of files open and I could jump

00:02:40,650 --> 00:02:44,910
to any of those by number the number in

00:02:42,420 --> 00:02:48,060
parentheses so make file dot am I could

00:02:44,910 --> 00:02:51,210
have said : b9 and gotten to buffer 9

00:02:48,060 --> 00:02:53,160
which is that file except that I have

00:02:51,210 --> 00:02:54,720
zero desire to memorize the buffer

00:02:53,160 --> 00:02:57,210
numbers given and they are different for

00:02:54,720 --> 00:03:00,540
every editing session I recently learned

00:02:57,210 --> 00:03:04,380
that vim will tab complete any substring

00:03:00,540 --> 00:03:08,100
of the file name so in this case : b dot

00:03:04,380 --> 00:03:10,680
am and i hit tab and it expanded to the

00:03:08,100 --> 00:03:12,660
name of the only god a.m. file i had

00:03:10,680 --> 00:03:15,750
open which happened to be make file dot

00:03:12,660 --> 00:03:17,610
a.m. and if I had said : B Vala and hit

00:03:15,750 --> 00:03:20,400
tab for example it would have gone

00:03:17,610 --> 00:03:22,310
through all of my Bala files skipping

00:03:20,400 --> 00:03:25,800
over the header files and make files

00:03:22,310 --> 00:03:27,480
very nice I've been using I'm starting

00:03:25,800 --> 00:03:29,310
to wear out the ink on the B key on my

00:03:27,480 --> 00:03:34,020
keyboard and that doesn't usually happen

00:03:29,310 --> 00:03:37,080
except for hjkl and escape this one

00:03:34,020 --> 00:03:39,690
applies to this is not bash specific but

00:03:37,080 --> 00:03:41,670
applies to general command line use the

00:03:39,690 --> 00:03:45,060
new core tools and a number of other

00:03:41,670 --> 00:03:47,850
utilities now have a dash H option to

00:03:45,060 --> 00:03:49,709
show sizes in a human readable form so

00:03:47,850 --> 00:03:53,340
if you're like me and you want to know

00:03:49,709 --> 00:03:55,590
whether Arduino builder is on the order

00:03:53,340 --> 00:03:56,940
of megabytes or gigabytes you start at

00:03:55,590 --> 00:04:01,200
the right and you count groups of three

00:03:56,940 --> 00:04:05,100
digits which is a big pain just stick an

00:04:01,200 --> 00:04:08,820
H on the end of that list command + 18

00:04:05,100 --> 00:04:11,010
megohm just like that saves time if you

00:04:08,820 --> 00:04:14,430
do need the actual number which I

00:04:11,010 --> 00:04:16,680
sometimes do you you can say regular

00:04:14,430 --> 00:04:20,270
lists or if you have this aliased as I

00:04:16,680 --> 00:04:20,270
do you can say quote list quote

00:04:22,360 --> 00:04:28,040
okay this is good

00:04:24,380 --> 00:04:33,560
we can go zoom zoom let's do a little

00:04:28,040 --> 00:04:35,690
more get configuration files I have my

00:04:33,560 --> 00:04:37,340
home computer and my work computer I do

00:04:35,690 --> 00:04:38,630
open source development at home

00:04:37,340 --> 00:04:41,270
I do work development at work and

00:04:38,630 --> 00:04:44,000
actually some open source and so I have

00:04:41,270 --> 00:04:47,360
a set of get aliases that I like to use

00:04:44,000 --> 00:04:50,150
and there is there are a few things more

00:04:47,360 --> 00:04:53,210
frustrating than typing a get alias that

00:04:50,150 --> 00:04:54,980
I use all the time at home into my work

00:04:53,210 --> 00:04:58,390
computer and having get barf because it

00:04:54,980 --> 00:05:01,340
doesn't know that alias big pain I

00:04:58,390 --> 00:05:04,460
recently learned that git config files

00:05:01,340 --> 00:05:07,310
can actually pull in other get config

00:05:04,460 --> 00:05:11,450
files so I now have a shared dot file

00:05:07,310 --> 00:05:13,790
with my aliases and my git config for

00:05:11,450 --> 00:05:16,550
work only has to have my work user

00:05:13,790 --> 00:05:18,620
identity identification and this include

00:05:16,550 --> 00:05:20,240
and similarly my home one only has to

00:05:18,620 --> 00:05:23,570
have the home information and the

00:05:20,240 --> 00:05:27,470
include so this by itself maybe doesn't

00:05:23,570 --> 00:05:29,480
save a lot of time but saving the break

00:05:27,470 --> 00:05:31,910
in flow when something doesn't work the

00:05:29,480 --> 00:05:39,590
way you expect is a major savings in my

00:05:31,910 --> 00:05:42,470
experience wild ignore okay so here I

00:05:39,590 --> 00:05:44,480
have a list of about ten files that all

00:05:42,470 --> 00:05:45,410
start with the same pattern source slash

00:05:44,480 --> 00:05:48,680
pfft

00:05:45,410 --> 00:05:50,780
and if I wanted to open those in them I

00:05:48,680 --> 00:05:53,330
would say call an e space source slash

00:05:50,780 --> 00:05:55,490
pfft and then I would hit tab and it

00:05:53,330 --> 00:05:58,300
would tap complete successively as I hit

00:05:55,490 --> 00:06:01,430
tab would go through this whole list now

00:05:58,300 --> 00:06:03,680
the likelihood that I'm going to tab

00:06:01,430 --> 00:06:07,640
complete an object file to open in a

00:06:03,680 --> 00:06:09,830
text editor is extremely low someday it

00:06:07,640 --> 00:06:12,320
will happen and that will be a watershed

00:06:09,830 --> 00:06:16,040
day but in the meantime I would rather

00:06:12,320 --> 00:06:18,890
not have to think about that the wild

00:06:16,040 --> 00:06:21,980
ignore option in vim will say don't

00:06:18,890 --> 00:06:26,860
include any of these in the list of tab

00:06:21,980 --> 00:06:30,080
expansions so set that wild ignore and

00:06:26,860 --> 00:06:31,580
almost all of the files I really am NOT

00:06:30,080 --> 00:06:34,610
going to want to open in a text editor

00:06:31,580 --> 00:06:36,349
are gone from the list very nice

00:06:34,610 --> 00:06:37,789
then I can just tap it'll the

00:06:36,349 --> 00:06:43,460
tab-completion will skip straight from

00:06:37,789 --> 00:06:44,780
the C file to the pod file very handy by

00:06:43,460 --> 00:06:46,219
the way uh since I'm not watching the

00:06:44,780 --> 00:06:48,319
chat if there's a problem with the

00:06:46,219 --> 00:06:53,479
stream Dave or somebody please tell me

00:06:48,319 --> 00:06:56,090
on the audio okay all right thanks okay

00:06:53,479 --> 00:06:57,800
now now it's time for now you're

00:06:56,090 --> 00:07:01,639
watching now now everything that's

00:06:57,800 --> 00:07:04,580
happening now is happening now I do a

00:07:01,639 --> 00:07:07,039
lot of embedded work and that means lots

00:07:04,580 --> 00:07:10,460
of log files and post-mortem analysis

00:07:07,039 --> 00:07:12,110
when you're writing kernel drivers at

00:07:10,460 --> 00:07:15,680
least in my experience you don't get to

00:07:12,110 --> 00:07:17,990
single-step them so I would redirect a

00:07:15,680 --> 00:07:19,759
food log and foo one dot log and foo

00:07:17,990 --> 00:07:21,139
three dot log and then I would forget

00:07:19,759 --> 00:07:23,449
that I had already done foo three dot

00:07:21,139 --> 00:07:27,379
log and blow it away and wish I hadn't

00:07:23,449 --> 00:07:31,580
and it was a big pain so here we go

00:07:27,379 --> 00:07:34,129
let's fix it this bash alias creates

00:07:31,580 --> 00:07:37,129
there are outputs the current date and

00:07:34,129 --> 00:07:39,529
time hour minute second in a form that

00:07:37,129 --> 00:07:41,719
does not have any spaces or colons which

00:07:39,529 --> 00:07:44,659
means that it's all filenames safe

00:07:41,719 --> 00:07:47,270
characters in bash so now I can just

00:07:44,659 --> 00:07:51,080
redirect into a file name that includes

00:07:47,270 --> 00:07:53,750
an invocation of now and not worry that

00:07:51,080 --> 00:07:59,139
now I'm going to override anything that

00:07:53,750 --> 00:08:01,940
I wrote back when now was them right I

00:07:59,139 --> 00:08:03,529
will admit that sometimes because I know

00:08:01,940 --> 00:08:06,680
there's no spaces in that I get sloppy

00:08:03,529 --> 00:08:08,740
and use back ticks do as I say not as I

00:08:06,680 --> 00:08:08,740
do

00:08:08,949 --> 00:08:15,620
all right all of these things have been

00:08:12,050 --> 00:08:17,870
built-ins of the relevant tools so far

00:08:15,620 --> 00:08:20,659
built-ins of the shell or built-ins of

00:08:17,870 --> 00:08:22,699
the utilities the core utils or other

00:08:20,659 --> 00:08:24,259
programs that we're running sometimes

00:08:22,699 --> 00:08:30,139
you want a little boost from the

00:08:24,259 --> 00:08:33,199
aftermarket rename and which I have

00:08:30,139 --> 00:08:34,820
renamed to rename err in my own use to

00:08:33,199 --> 00:08:37,159
avoid name collisions with another

00:08:34,820 --> 00:08:39,469
rename is a script that Aristotle wrote

00:08:37,159 --> 00:08:41,930
many years ago that can do a fixed

00:08:39,469 --> 00:08:44,350
string replacement or a Perl reg X

00:08:41,930 --> 00:08:47,300
replacement on any file name you give it

00:08:44,350 --> 00:08:48,350
my main use case for this is actually to

00:08:47,300 --> 00:08:51,170
rename in the middle

00:08:48,350 --> 00:08:53,810
of file names so say that I'm done

00:08:51,170 --> 00:08:55,870
reviewing a log file and I want to mark

00:08:53,810 --> 00:08:59,360
that I'm done with it so I don't forget

00:08:55,870 --> 00:09:01,310
if I have expand the file name and then

00:08:59,360 --> 00:09:03,830
tab expand it again and stick done on

00:09:01,310 --> 00:09:05,450
the end it's not dots CSV anymore or

00:09:03,830 --> 00:09:09,110
whatever the extension has changed and

00:09:05,450 --> 00:09:11,030
that's a pain or I have to back up with

00:09:09,110 --> 00:09:14,680
the cursor into the text which is also a

00:09:11,030 --> 00:09:17,630
pain renamer fixed string substitution

00:09:14,680 --> 00:09:21,700
changed the dot the only dot in the file

00:09:17,630 --> 00:09:24,680
name to whatever I want and a Dodge and

00:09:21,700 --> 00:09:26,960
lo and behold it has renamed in the

00:09:24,680 --> 00:09:29,960
middle of a file name and this is

00:09:26,960 --> 00:09:31,940
something that I didn't think of for the

00:09:29,960 --> 00:09:33,740
longest time but now that I have it I

00:09:31,940 --> 00:09:42,380
don't want to do without it again it's

00:09:33,740 --> 00:09:44,870
been extremely useful to me hack Andy

00:09:42,380 --> 00:09:46,910
greetings if you're on here ak is great

00:09:44,870 --> 00:09:48,140
hack is a wreck searcher if you're not

00:09:46,910 --> 00:09:51,850
using anything a queue should be using

00:09:48,140 --> 00:09:54,170
ping ack-ack has a really nice thing

00:09:51,850 --> 00:09:56,120
does a couple nice things so here we

00:09:54,170 --> 00:09:59,480
have an example of a tap parser this is

00:09:56,120 --> 00:10:02,030
actually from auto tools and let's say I

00:09:59,480 --> 00:10:03,950
want to know how it handles skips so

00:10:02,030 --> 00:10:05,690
there's some skips in here somewhere and

00:10:03,950 --> 00:10:07,940
if you squint at this hard enough you

00:10:05,690 --> 00:10:11,030
might find that there's a skip there and

00:10:07,940 --> 00:10:13,910
something down there yeah okay let's get

00:10:11,030 --> 00:10:16,820
some nice highlighting on our skip so we

00:10:13,910 --> 00:10:19,340
can see immediately where they are great

00:10:16,820 --> 00:10:22,280
thing about ACK is that it will do this

00:10:19,340 --> 00:10:24,170
in pass-through mode so if you're just

00:10:22,280 --> 00:10:25,700
searching files you can say your knack

00:10:24,170 --> 00:10:28,250
for whatever text you want in your files

00:10:25,700 --> 00:10:30,590
if you're running some program and you

00:10:28,250 --> 00:10:32,660
want to see the full output and you want

00:10:30,590 --> 00:10:35,270
to also highlight certain things in that

00:10:32,660 --> 00:10:38,510
output you can do this little invocation

00:10:35,270 --> 00:10:41,540
and I most often use this actually for

00:10:38,510 --> 00:10:43,580
make outputs if I'm looking for

00:10:41,540 --> 00:10:45,020
something specific if let's say I'm

00:10:43,580 --> 00:10:47,390
rebuilding the Linux kernel which

00:10:45,020 --> 00:10:49,940
actually I do it work fairly often and I

00:10:47,390 --> 00:10:52,970
want to make sure that a file was

00:10:49,940 --> 00:10:55,610
actually rebuilt in the dump of hundreds

00:10:52,970 --> 00:10:59,900
of lines of CC eld and everything else I

00:10:55,610 --> 00:11:02,120
use this to flag my the name of my file

00:10:59,900 --> 00:11:02,339
and then it gets a nice highlight to

00:11:02,120 --> 00:11:06,079
show

00:11:02,339 --> 00:11:06,079
me that indeed it did get compiled

00:11:06,980 --> 00:11:13,319
unbuffered this is an oldie but a goodie

00:11:09,209 --> 00:11:15,720
this is part of the expect package if

00:11:13,319 --> 00:11:16,740
you haven't used expect I'm not

00:11:15,720 --> 00:11:18,899
surprised

00:11:16,740 --> 00:11:20,759
it has very specific and limited use

00:11:18,899 --> 00:11:22,499
cases but it turns out that it can do a

00:11:20,759 --> 00:11:23,910
ton of stuff and it's fantastic and it

00:11:22,499 --> 00:11:26,850
comes with this magic on buffer on

00:11:23,910 --> 00:11:28,949
buffer hoax up a pseudo terminal as far

00:11:26,850 --> 00:11:30,629
as I know and makes any program think

00:11:28,949 --> 00:11:34,290
that it's running on a terminal even if

00:11:30,629 --> 00:11:37,430
it's not so first of all yes this is a

00:11:34,290 --> 00:11:40,259
useless use of cat please don't hate me

00:11:37,430 --> 00:11:43,410
second D message normally turns off

00:11:40,259 --> 00:11:45,660
color if you're not sending it to a

00:11:43,410 --> 00:11:47,639
terminal but sometimes you want to be

00:11:45,660 --> 00:11:50,100
able to run it through a pager with

00:11:47,639 --> 00:11:52,079
color like in the last example so just

00:11:50,100 --> 00:11:53,730
stick on buffer on the front and now

00:11:52,079 --> 00:11:55,259
you've got all your nice highlighting of

00:11:53,730 --> 00:12:00,019
the warnings distinguish the warnings

00:11:55,259 --> 00:12:06,089
from the info everything else very nice

00:12:00,019 --> 00:12:07,589
okay so we're doing pretty well I still

00:12:06,089 --> 00:12:11,639
have eight minutes and we've only just

00:12:07,589 --> 00:12:15,179
gone to the jet-assisted takeoff yet

00:12:11,639 --> 00:12:17,399
commit graph this is a feature added to

00:12:15,179 --> 00:12:19,889
get within the last few years that

00:12:17,399 --> 00:12:22,230
stores the relationships between commits

00:12:19,889 --> 00:12:24,029
in a cache okay so you say well doesn't

00:12:22,230 --> 00:12:25,769
get store the relationships between

00:12:24,029 --> 00:12:29,129
commits isn't that the whole point yes

00:12:25,769 --> 00:12:30,749
but yeah in the case of get log double

00:12:29,129 --> 00:12:34,490
dash graph and a number of other things

00:12:30,749 --> 00:12:36,600
yet has to walk the commit graph the

00:12:34,490 --> 00:12:38,610
actual commit graft the commits and the

00:12:36,600 --> 00:12:41,629
parent pointers and find out how things

00:12:38,610 --> 00:12:45,509
are related if you turn on this setting

00:12:41,629 --> 00:12:48,149
it will cache that information for quick

00:12:45,509 --> 00:12:50,160
access and it will update it at GC time

00:12:48,149 --> 00:12:53,730
so it doesn't it doesn't hurt anything

00:12:50,160 --> 00:12:56,249
if it's stale you do this once per

00:12:53,730 --> 00:12:58,670
repository to get it started doesn't

00:12:56,249 --> 00:13:01,170
take very long to run actually and then

00:12:58,670 --> 00:13:03,300
in order to find out those relationships

00:13:01,170 --> 00:13:05,730
get can look at the cache and the net

00:13:03,300 --> 00:13:07,230
effect of all that forget all that the

00:13:05,730 --> 00:13:09,329
whole point is that your get log double

00:13:07,230 --> 00:13:10,799
dash graph doesn't take two sec two to

00:13:09,329 --> 00:13:11,339
five seconds of sitting there doing

00:13:10,799 --> 00:13:13,649
nothing

00:13:11,339 --> 00:13:15,690
when you try to do it on repo the size

00:13:13,649 --> 00:13:18,410
of the Linux kernel and it's how

00:13:15,690 --> 00:13:21,270
absolutely great avoids breaking flow

00:13:18,410 --> 00:13:22,890
fantastic I love it so my thanks to the

00:13:21,270 --> 00:13:29,580
folks who figured this out and

00:13:22,890 --> 00:13:32,040
implemented it FCF FCF is a fuzzy finder

00:13:29,580 --> 00:13:34,590
and I'm gonna show an example of its use

00:13:32,040 --> 00:13:36,570
in bash but it can also be used with a

00:13:34,590 --> 00:13:39,210
bunch of editors and other shells and

00:13:36,570 --> 00:13:41,880
other tools so in my particular use case

00:13:39,210 --> 00:13:45,690
as adventurous as I have gotten is to

00:13:41,880 --> 00:13:49,350
search my bash history so normal bash

00:13:45,690 --> 00:13:53,570
history search I type I hit ctrl R and I

00:13:49,350 --> 00:13:55,890
said gee I space st it got to the GI and

00:13:53,570 --> 00:13:57,960
failed at the space because it couldn't

00:13:55,890 --> 00:13:59,670
find any commands that started with GI

00:13:57,960 --> 00:14:02,040
space and so it left me with the last

00:13:59,670 --> 00:14:04,130
thing it found and that's all I have

00:14:02,040 --> 00:14:06,600
okay

00:14:04,130 --> 00:14:08,070
helpful arguably well it's better than

00:14:06,600 --> 00:14:10,830
nothing it's sure matter than nothing

00:14:08,070 --> 00:14:14,610
but how about this okay so this time I

00:14:10,830 --> 00:14:17,720
control our Bash ran fuzzy finder I put

00:14:14,610 --> 00:14:21,090
in GI st and I got a nice list of

00:14:17,720 --> 00:14:24,540
everything in my history that has those

00:14:21,090 --> 00:14:26,640
letters in that order so I got some

00:14:24,540 --> 00:14:28,290
there's a git than had a stuff and

00:14:26,640 --> 00:14:31,100
here's here's a stash maybe this is what

00:14:28,290 --> 00:14:33,210
I was actually looking for or a status

00:14:31,100 --> 00:14:36,120
but then you can scroll up and down the

00:14:33,210 --> 00:14:39,990
list pick from the history it is really

00:14:36,120 --> 00:14:43,160
great and I use it especially for long

00:14:39,990 --> 00:14:45,540
Otto Kahn for configure invocations to

00:14:43,160 --> 00:14:47,250
remember which one is which I got three

00:14:45,540 --> 00:14:49,830
or four in history that I sort of cycle

00:14:47,250 --> 00:14:55,290
between being able to see them all and

00:14:49,830 --> 00:14:57,390
distinguish them is fantastic Bosch get

00:14:55,290 --> 00:14:59,460
prompt by magic Monty its Bosch get

00:14:57,390 --> 00:15:01,260
prompt it's not get bash prompt I always

00:14:59,460 --> 00:15:03,180
get that wrong it shows you your get

00:15:01,260 --> 00:15:05,850
status before every command you run as

00:15:03,180 --> 00:15:07,920
part of your bash prompt now use with

00:15:05,850 --> 00:15:10,050
caution because if you try to do this on

00:15:07,920 --> 00:15:12,089
a slow drive and it goes out to try to

00:15:10,050 --> 00:15:14,280
fetch a whole bunch of get information

00:15:12,089 --> 00:15:16,710
from a slow drive you'll be waiting for

00:15:14,280 --> 00:15:18,480
your prompt for a long time but when

00:15:16,710 --> 00:15:19,800
you're inside a repo you get a prompt

00:15:18,480 --> 00:15:21,990
that might look something kind of like

00:15:19,800 --> 00:15:24,150
this shows you what branch you're on and

00:15:21,990 --> 00:15:27,220
it shows you whether you're up-to-date

00:15:24,150 --> 00:15:29,500
with your current remote

00:15:27,220 --> 00:15:31,240
it's very customizable this is my own

00:15:29,500 --> 00:15:33,550
tweaked up version but it'll do all

00:15:31,240 --> 00:15:35,589
sorts of stuff and you can have it show

00:15:33,550 --> 00:15:38,470
the exit status of the last command and

00:15:35,589 --> 00:15:43,120
all sorts of fancy crazy things so very

00:15:38,470 --> 00:15:44,980
useful all right now you didn't think I

00:15:43,120 --> 00:15:48,759
was gonna stop when the speedometer hit

00:15:44,980 --> 00:15:49,930
the end did you okay vim airline this is

00:15:48,759 --> 00:15:52,240
great I've been using this for many

00:15:49,930 --> 00:15:54,730
years and it's it's fabulous it's one of

00:15:52,240 --> 00:15:58,480
a number of enhanced status line tab

00:15:54,730 --> 00:16:00,579
lines for vim in this particular case it

00:15:58,480 --> 00:16:03,639
shows me when I'm in a get repository

00:16:00,579 --> 00:16:05,649
what branch I'm on besides the file name

00:16:03,639 --> 00:16:08,290
which VM would normally show it also

00:16:05,649 --> 00:16:11,829
shows me the type of the file where I am

00:16:08,290 --> 00:16:18,639
in the file so I always have the line

00:16:11,829 --> 00:16:20,079
number handy and there's more unique

00:16:18,639 --> 00:16:22,689
tail improved this is one I just

00:16:20,079 --> 00:16:24,699
discovered recently so I do work on a

00:16:22,689 --> 00:16:26,470
bunch of Auto conf projects and I guess

00:16:24,699 --> 00:16:30,009
oh there's a make file dot am in every

00:16:26,470 --> 00:16:32,319
subdirectory and having a whole bunch of

00:16:30,009 --> 00:16:34,029
make file dot AMS open remember that

00:16:32,319 --> 00:16:35,709
buffer list from earlier make filed on I

00:16:34,029 --> 00:16:38,170
and make filed on am big file that name

00:16:35,709 --> 00:16:41,350
try to figure out what you switch well

00:16:38,170 --> 00:16:44,379
this unique tale improved will actually

00:16:41,350 --> 00:16:48,779
highlight you've only include in the

00:16:44,379 --> 00:16:51,850
list of open buffers the unique tail of

00:16:48,779 --> 00:16:54,459
the file names so in this case I know

00:16:51,850 --> 00:16:57,519
exactly where which make file dot am is

00:16:54,459 --> 00:17:03,790
which and this has been at least

00:16:57,519 --> 00:17:06,640
moderately life-changing them colon dot

00:17:03,790 --> 00:17:09,760
bang colon bang you may know it runs a

00:17:06,640 --> 00:17:12,130
command colon dot bang does something a

00:17:09,760 --> 00:17:14,350
little different it replaces the current

00:17:12,130 --> 00:17:18,100
line which is dot with the output of the

00:17:14,350 --> 00:17:19,870
command so let's say that I've got a big

00:17:18,100 --> 00:17:22,360
commit and I'm writing the commit

00:17:19,870 --> 00:17:24,339
message and I need to check whether I

00:17:22,360 --> 00:17:26,500
did something so here I am I'm editing

00:17:24,339 --> 00:17:28,960
the commit message and I've forgotten

00:17:26,500 --> 00:17:29,760
what I did I just jump down to the end

00:17:28,960 --> 00:17:34,299
of the file

00:17:29,760 --> 00:17:35,799
run my get diff and there's everything

00:17:34,299 --> 00:17:39,600
that I did right in the editor window

00:17:35,799 --> 00:17:41,320
ready for me to take a look at now

00:17:39,600 --> 00:17:43,270
remember to delete it

00:17:41,320 --> 00:17:46,300
or hit undo before you commit because

00:17:43,270 --> 00:17:47,830
all of these lines being not commented

00:17:46,300 --> 00:17:49,300
and not pure white space will get

00:17:47,830 --> 00:17:52,180
included in your commit message if

00:17:49,300 --> 00:17:53,920
you've leave them in place sometimes get

00:17:52,180 --> 00:17:58,960
commit double - a man is indeed your

00:17:53,920 --> 00:18:02,590
friend get logged compact this is one I

00:17:58,960 --> 00:18:05,500
found originally by Mikael I have

00:18:02,590 --> 00:18:08,830
tweaked it up for speed it is getting

00:18:05,500 --> 00:18:12,790
long double - graph only much much nicer

00:18:08,830 --> 00:18:15,820
to read so here's a regular get log

00:18:12,790 --> 00:18:17,290
double - graph double - pretty equals

00:18:15,820 --> 00:18:21,760
one line for those of you keeping score

00:18:17,290 --> 00:18:24,490
at home shows the full hash does have a

00:18:21,760 --> 00:18:25,780
graph it a lot of stuff runs off the

00:18:24,490 --> 00:18:28,420
right-hand edge of the screen

00:18:25,780 --> 00:18:31,930
I don't actually particularly care about

00:18:28,420 --> 00:18:36,430
the last character of each code hash at

00:18:31,930 --> 00:18:38,610
all so here we go here's the get law a

00:18:36,430 --> 00:18:42,430
compact output for the same thing

00:18:38,610 --> 00:18:43,450
author's initials date and time only the

00:18:42,430 --> 00:18:44,470
short version of the commit because

00:18:43,450 --> 00:18:48,460
that's all I need

00:18:44,470 --> 00:18:51,760
tags remote branches very nice nice Perl

00:18:48,460 --> 00:18:53,830
script it used to use a lot of QX and my

00:18:51,760 --> 00:18:56,010
tweaks are to take more information from

00:18:53,830 --> 00:19:01,090
environment variables instead of from

00:18:56,010 --> 00:19:02,860
get invocations so if you set the

00:19:01,090 --> 00:19:05,590
options in the environment variable and

00:19:02,860 --> 00:19:07,690
if you turn on the get commit graph that

00:19:05,590 --> 00:19:10,930
we talked about and there to go you will

00:19:07,690 --> 00:19:13,270
have fabulous commit graphs pet your

00:19:10,930 --> 00:19:15,640
fingertips instantly all the time super

00:19:13,270 --> 00:19:18,820
nice and Mikhail if you're out there I

00:19:15,640 --> 00:19:24,280
think I put in a pull request I'd love

00:19:18,820 --> 00:19:25,870
to give back to the original project all

00:19:24,280 --> 00:19:29,350
right we did it

00:19:25,870 --> 00:19:33,820
19 minutes 0 to 60 in 19 minutes thanks

00:19:29,350 --> 00:19:38,020
to the tools listed that I used this was

00:19:33,820 --> 00:19:41,860
a fun project to work on and thanks also

00:19:38,020 --> 00:19:43,450
to the organizers for having me thanks

00:19:41,860 --> 00:19:46,150
to my co-workers who served as guinea

00:19:43,450 --> 00:19:48,460
pigs for an earlier version of this

00:19:46,150 --> 00:19:50,980
presentation and to my boss for the use

00:19:48,460 --> 00:19:53,170
of the laptop I'm currently on and most

00:19:50,980 --> 00:19:54,410
of all thanks to all of you for

00:19:53,170 --> 00:19:56,540
attending

00:19:54,410 --> 00:20:01,220
my final exhortation to you is go forth

00:19:56,540 --> 00:20:02,720
and hack like crazy there's me I would

00:20:01,220 --> 00:20:04,670
be now be delighted to look at the chat

00:20:02,720 --> 00:20:07,340
and take questions and if there are no

00:20:04,670 --> 00:20:10,660
questions I have a couple of extras that

00:20:07,340 --> 00:20:11,930
I can show you if you are interested

00:20:10,660 --> 00:20:17,360
Santiago

00:20:11,930 --> 00:20:21,190
fire away yeah so I've seen that you're

00:20:17,360 --> 00:20:25,550
you were talking about airline have you

00:20:21,190 --> 00:20:32,690
seen or used powerline at some point

00:20:25,550 --> 00:20:35,750
between and yeah if so how do they

00:20:32,690 --> 00:20:38,270
compare but I think your answer is going

00:20:35,750 --> 00:20:41,630
to be unfortunately I have not used

00:20:38,270 --> 00:20:44,060
powerline itself for context powerline

00:20:41,630 --> 00:20:46,070
came first as I recall an airline was

00:20:44,060 --> 00:20:48,290
written to be a lighter weight

00:20:46,070 --> 00:20:51,890
alternative to power line hence the name

00:20:48,290 --> 00:20:54,290
I'm also as I recall I think the readme

00:20:51,890 --> 00:20:57,680
says that it was written on a plane on a

00:20:54,290 --> 00:20:58,730
laptop originally so no I have not used

00:20:57,680 --> 00:21:01,520
power line

00:20:58,730 --> 00:21:03,170
I have not needed more than air line

00:21:01,520 --> 00:21:06,020
currently provides but power line is

00:21:03,170 --> 00:21:07,640
certainly a good option and um yeah I

00:21:06,020 --> 00:21:10,250
would have no hesitation to try it I

00:21:07,640 --> 00:21:16,370
just haven't needed to thanks for a nice

00:21:10,250 --> 00:21:18,560
face yeah other questions

00:21:16,370 --> 00:21:21,290
hit the raise hand there or if you would

00:21:18,560 --> 00:21:25,430
on the participants panel if you're

00:21:21,290 --> 00:21:26,480
interested and if not I can show you the

00:21:25,430 --> 00:21:30,190
extra does anybody want to see the

00:21:26,480 --> 00:21:33,230
extras since we have a couple minutes

00:21:30,190 --> 00:21:36,260
yes please all right we'll see the

00:21:33,230 --> 00:21:37,610
extras I may have to reshare hang on

00:21:36,260 --> 00:21:42,290
just a moment Li's all right can you see

00:21:37,610 --> 00:21:44,240
the slide yeah okay

00:21:42,290 --> 00:21:50,620
yes you can see this low okay excellent

00:21:44,240 --> 00:21:53,810
thank you v % in capital v % in vim so

00:21:50,620 --> 00:21:57,530
VI the whole idea just in case there are

00:21:53,810 --> 00:21:58,670
any Emacs users on in VI the point is to

00:21:57,530 --> 00:22:01,130
keep your hand on the keyboard as much

00:21:58,670 --> 00:22:03,050
as possible there's a lot of commands

00:22:01,130 --> 00:22:05,630
that distinct that delimit paragraphs

00:22:03,050 --> 00:22:08,419
based on whitespace unfortunately that's

00:22:05,630 --> 00:22:11,299
not great for blocks of codes

00:22:08,419 --> 00:22:13,009
the body of this loop where selections

00:22:11,299 --> 00:22:15,679
based on whitespace will select either

00:22:13,009 --> 00:22:18,590
too little or too much at the loop and

00:22:15,679 --> 00:22:22,429
the end of the function percent jumps

00:22:18,590 --> 00:22:24,710
between matched de limiters and capital

00:22:22,429 --> 00:22:27,049
V turns on visual line select mode so

00:22:24,710 --> 00:22:28,580
all that is to say you provide the

00:22:27,049 --> 00:22:31,039
cursor here and you hit V percent and

00:22:28,580 --> 00:22:31,759
you get the entire for loop selected and

00:22:31,039 --> 00:22:35,119
nothing else

00:22:31,759 --> 00:22:36,919
great for refactoring then you can shift

00:22:35,119 --> 00:22:38,119
it left to right you do like V percent

00:22:36,919 --> 00:22:40,759
greater than to shifted over one

00:22:38,119 --> 00:22:43,159
indentation level and you don't have to

00:22:40,759 --> 00:22:47,509
care what the whitespace is so that's

00:22:43,159 --> 00:22:50,389
pretty handy gr these are experiment and

00:22:47,509 --> 00:22:52,549
tool so you are not expected to copy all

00:22:50,389 --> 00:22:54,259
of this or memorize it the this is in

00:22:52,549 --> 00:22:57,799
the slides that will be posted after the

00:22:54,259 --> 00:23:00,139
presentation gr is a macro as a bash

00:22:57,799 --> 00:23:02,629
function that I wrote that expands to

00:23:00,139 --> 00:23:06,169
the path name of the root of the current

00:23:02,629 --> 00:23:09,409
git repository so get root and CD gr is

00:23:06,169 --> 00:23:11,539
a four characters plus enter to take you

00:23:09,409 --> 00:23:13,519
up to the root of the git repository and

00:23:11,539 --> 00:23:15,799
I found those very handy so that I don't

00:23:13,519 --> 00:23:17,720
have to remember how many dots down I am

00:23:15,799 --> 00:23:19,220
and go dot dot slash dot dot says no

00:23:17,720 --> 00:23:23,509
wait wait

00:23:19,220 --> 00:23:26,019
yeah no just gr and see gr to tell me

00:23:23,509 --> 00:23:28,429
where the root is and get me to the root

00:23:26,019 --> 00:23:31,249
% percent this is a fun one

00:23:28,429 --> 00:23:36,200
this is from the fan from the vim tips

00:23:31,249 --> 00:23:40,489
wiki this is the path where the current

00:23:36,200 --> 00:23:42,350
file is so I can say : let's say I'm at

00:23:40,489 --> 00:23:44,659
the root of a kernel tree and I'm

00:23:42,350 --> 00:23:46,369
editing kernel slash include slash has

00:23:44,659 --> 00:23:47,720
some slash bit ops dot H or something

00:23:46,369 --> 00:23:51,320
and I want to look at something else in

00:23:47,720 --> 00:23:53,749
the Azzam directory I can say : e % % /

00:23:51,320 --> 00:23:58,779
and not have to retype include Linux

00:23:53,749 --> 00:24:01,489
azzam and I think last one yeah last one

00:23:58,779 --> 00:24:03,470
so I fin it I've got a whole command

00:24:01,489 --> 00:24:06,230
typed it's two lines long on the screen

00:24:03,470 --> 00:24:07,789
and I screwed something up or I realized

00:24:06,230 --> 00:24:08,419
that before I hid under I'd better go

00:24:07,789 --> 00:24:10,970
check something

00:24:08,419 --> 00:24:13,789
if I hit ctrl C in bash I'm gonna have

00:24:10,970 --> 00:24:15,169
to retype the whole thing so just jump

00:24:13,789 --> 00:24:17,570
back to the beginning of the line and

00:24:15,169 --> 00:24:19,849
comment it out and hit enter nothing

00:24:17,570 --> 00:24:21,409
happens it's great the whole thing is

00:24:19,849 --> 00:24:22,160
still in history which is also great

00:24:21,409 --> 00:24:24,620
because then

00:24:22,160 --> 00:24:26,510
can bring it back and just knock that

00:24:24,620 --> 00:24:28,550
comment off the front fix anything that

00:24:26,510 --> 00:24:31,130
needs to be fixed and run it and not

00:24:28,550 --> 00:24:34,550
have to retype or move my hands out to

00:24:31,130 --> 00:24:39,500
the mouse to do a copy/paste oh there's

00:24:34,550 --> 00:24:41,690
the extras and with that unless there

00:24:39,500 --> 00:24:42,950
are any other questions I will get off

00:24:41,690 --> 00:24:44,690
the line so we can get ready for the

00:24:42,950 --> 00:24:48,140
keynote thank you all very much again

00:24:44,690 --> 00:24:51,440
forest for listening and I will be doing

00:24:48,140 --> 00:24:54,980
a Boff tomorrow morning and a lightning

00:24:51,440 --> 00:24:56,480
talk tomorrow evening u.s. time so

00:24:54,980 --> 00:25:01,420
please come to those as well thank you

00:24:56,480 --> 00:25:01,420

YouTube URL: https://www.youtube.com/watch?v=k9SPyKIUap8


