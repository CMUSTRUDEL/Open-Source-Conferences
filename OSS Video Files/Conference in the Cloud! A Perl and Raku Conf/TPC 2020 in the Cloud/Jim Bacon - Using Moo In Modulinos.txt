Title: Jim Bacon - Using Moo In Modulinos
Publication date: 2020-06-24
Playlist: TPC 2020 in the Cloud
Description: 
	The "modulino" format allows a command line script to behave like a module that can be tested with familiar test harness tools (i.e. Test::More and Test::MockModule) without executing it, often achieving very high coverage numbers. It is only natural to bring Moo to the game.

The basic idea of a “modulino” is to take advantage of the caller() function to determine if a script is being run from the command line or being included by a require statement. This allows the code to behave as either a normal script or as a module. It is the latter behavior that enables a modulino to be fully testable without having to execute it and capture the output somehow. It allows full unit testing with tools such as Test::More and Test::MockModule.

Moo brings a well-known OO framework to the party to help organize the script more like a module and provide command line parameters as object attributes.

This talk will demonstrate with simple scripts how Moo and Getopt::Long can play nice with each other and how the modulino structure benefits testing. A Role will be introduced, MooX::Role::CliOptions, to show how coding standards can be established for standard command line options.
Captions: 
	00:00:00,000 --> 00:00:05,670
yeah well as Todd mentioned my name is

00:00:03,629 --> 00:00:10,679
Jim I'm an alcoholic

00:00:05,670 --> 00:00:14,750
sorry long me but yeah 25 years working

00:00:10,679 --> 00:00:14,750
with pearl can drive a person to drink

00:00:15,139 --> 00:00:20,640
today I'd like to talk about a code

00:00:18,330 --> 00:00:23,039
pattern that I first heard about several

00:00:20,640 --> 00:00:25,190
years ago from a Brian deploy called a

00:00:23,039 --> 00:00:31,340
modulae No

00:00:25,190 --> 00:00:34,400
and the idea is that it allows you to

00:00:31,340 --> 00:00:38,150
write a command line script in such a

00:00:34,400 --> 00:00:39,770
way that when executed from the command

00:00:38,150 --> 00:00:44,330
line it behaves the way that you would

00:00:39,770 --> 00:00:47,180
expect but if you require it from

00:00:44,330 --> 00:00:52,129
another script or from say or a test

00:00:47,180 --> 00:00:57,530
script you can't it will behave as if

00:00:52,129 --> 00:01:11,360
it's a module and the simple way around

00:00:57,530 --> 00:01:17,030
that would be that if the basic process

00:01:11,360 --> 00:01:19,790
is to test the caller function caller

00:01:17,030 --> 00:01:24,350
has the property to the best of my

00:01:19,790 --> 00:01:28,070
knowledge that when it's called from the

00:01:24,350 --> 00:01:33,710
command line or from a parent process

00:01:28,070 --> 00:01:36,960
it returns undef so the whole idea is

00:01:33,710 --> 00:01:38,729
that you

00:01:36,960 --> 00:01:44,430
initialize anything you want above this

00:01:38,729 --> 00:01:48,450
initial called shut the collar and if

00:01:44,430 --> 00:01:50,550
the collar is undef then you know you're

00:01:48,450 --> 00:01:53,820
running from the command line and you

00:01:50,550 --> 00:01:56,250
can execute Cody and you put your code

00:01:53,820 --> 00:02:01,080
into subroutines and execute it

00:01:56,250 --> 00:02:02,970
if the collar stack is not empty then

00:02:01,080 --> 00:02:05,820
don't have any executable code now in

00:02:02,970 --> 00:02:09,420
this case I did have a I do have a print

00:02:05,820 --> 00:02:13,080
line here that will execute as it runs

00:02:09,420 --> 00:02:16,010
through but normally you would not have

00:02:13,080 --> 00:02:18,959
that and therefore there'd be no output

00:02:16,010 --> 00:02:22,080
- don't worry about yet and yet your

00:02:18,959 --> 00:02:23,540
test scripts can load this and call

00:02:22,080 --> 00:02:38,670
whatever subroutines you have

00:02:23,540 --> 00:02:40,470
individually so if we run this one and

00:02:38,670 --> 00:02:45,060
what it's just like like you like you

00:02:40,470 --> 00:02:46,799
think now let's look at a normal skipper

00:02:45,060 --> 00:02:48,630
quick and see how this affects testing

00:02:46,799 --> 00:02:58,490
which is that which is gonna be a real

00:02:48,630 --> 00:03:09,770
benefit from doing this the

00:02:58,490 --> 00:03:12,070
essential hello world if we go to the

00:03:09,770 --> 00:03:12,070
test

00:03:20,230 --> 00:03:30,180
you see that it executed then no Tesla

00:03:24,460 --> 00:03:30,180
run let's take a look at the test script

00:03:30,939 --> 00:03:37,219
we're doing a require we shouldn't get

00:03:34,370 --> 00:03:41,900
it giving us an okay but we don't but

00:03:37,219 --> 00:03:44,950
nothing happens the reason being is your

00:03:41,900 --> 00:03:44,950
friend exit

00:03:45,440 --> 00:03:51,730
and I'm going to presume that most of

00:03:47,690 --> 00:04:05,360
you always have exit in in your scripts

00:03:51,730 --> 00:04:27,590
along with end so if we take that exit

00:04:05,360 --> 00:04:31,070
out now it works as expected however we

00:04:27,590 --> 00:04:35,720
still have the output to deal with so

00:04:31,070 --> 00:04:39,110
intestine is script like this the best

00:04:35,720 --> 00:04:42,340
you can do would be to use something

00:04:39,110 --> 00:04:42,340
like tiny CAPTCHA

00:04:43,479 --> 00:04:50,409
so I capture tiny where some rituals put

00:04:46,659 --> 00:04:53,349
back ticks trap the output and then

00:04:50,409 --> 00:04:57,490
check to see if the check to see if the

00:04:53,349 --> 00:05:01,479
script has done what you expected that

00:04:57,490 --> 00:05:04,539
is a problem if they're trying to see

00:05:01,479 --> 00:05:07,180
what else is going on yeah if you want

00:05:04,539 --> 00:05:11,159
to put Blake points in or rather mock

00:05:07,180 --> 00:05:15,189
out routines you're not going to do it

00:05:11,159 --> 00:05:18,189
mainly because even with a Chinese test

00:05:15,189 --> 00:05:21,490
lock module you're not in the same

00:05:18,189 --> 00:05:25,599
process is running in in a child process

00:05:21,490 --> 00:05:29,680
so you don't have access to it I need to

00:05:25,599 --> 00:05:36,370
slow down my talking let's take a look

00:05:29,680 --> 00:05:47,169
at the at the bear test this time I say

00:05:36,370 --> 00:06:07,419
it works as expected so let's take a

00:05:47,169 --> 00:06:08,030
look at the hello move my screen has

00:06:07,419 --> 00:06:24,200
been really

00:06:08,030 --> 00:06:32,270
funky about showing things I've made a

00:06:24,200 --> 00:06:38,090
couple of changes here where I got the

00:06:32,270 --> 00:06:41,390
Magdalena la pattern and I've

00:06:38,090 --> 00:06:43,400
incorporated new into it plus I was

00:06:41,390 --> 00:06:49,550
given a new package name up at the top

00:06:43,400 --> 00:06:58,510
hello move or bend hello move this gives

00:06:49,550 --> 00:07:01,190
us a lot of advantages when I require it

00:06:58,510 --> 00:07:05,990
nothing is going to execute other than

00:07:01,190 --> 00:07:12,800
this intentionally executable line but

00:07:05,990 --> 00:07:15,830
even there it won't print unless it's

00:07:12,800 --> 00:07:25,370
unless it is the coming from the front

00:07:15,830 --> 00:07:27,020
from a command left I rather it will

00:07:25,370 --> 00:07:29,060
print

00:07:27,020 --> 00:07:35,000
coming from the command line that was

00:07:29,060 --> 00:07:38,030
there for testing purposes by the way

00:07:35,000 --> 00:07:44,060
this attribute up here does need to be

00:07:38,030 --> 00:07:46,640
lazy yeah it if you put in a default and

00:07:44,060 --> 00:07:51,310
try stand try to include the idea

00:07:46,640 --> 00:07:51,310
connect the COI variable it doesn't work

00:07:52,090 --> 00:08:32,650
so there it is and you can see that the

00:08:26,960 --> 00:08:32,650
output is coming from the run subroutine

00:08:44,680 --> 00:09:03,500
and just and here's the test on the

00:08:59,600 --> 00:09:12,770
implication for testing should be fairly

00:09:03,500 --> 00:09:46,580
obvious when if we look at what I've

00:09:12,770 --> 00:09:50,740
done with the I'm sorry okay let's put

00:09:46,580 --> 00:09:50,740
this together with command-line options

00:10:00,310 --> 00:10:03,339
here ah

00:10:04,810 --> 00:10:14,540
by working with get ops along you can

00:10:10,970 --> 00:10:18,260
pull in command-line options and stuff

00:10:14,540 --> 00:10:23,870
them into the attributes in a move

00:10:18,260 --> 00:10:26,120
object the only requirement is that

00:10:23,870 --> 00:10:28,880
anything like this has to be defined

00:10:26,120 --> 00:10:32,330
before you make the call to actually

00:10:28,880 --> 00:10:35,320
execute any code or rather before you

00:10:32,330 --> 00:10:35,320
make the call to exit

00:10:35,670 --> 00:10:45,960
and here is the this is where I take the

00:10:43,440 --> 00:10:50,930
command yet the command line options is

00:10:45,960 --> 00:10:50,930
put them into the move attributes

00:10:51,820 --> 00:10:59,000
the reason I like to do this is that I

00:10:55,820 --> 00:11:02,810
can take full advantage not only of good

00:10:59,000 --> 00:11:05,329
options a parameter checking or basic

00:11:02,810 --> 00:11:07,810
checking is it as is it astray is it an

00:11:05,329 --> 00:11:07,810
integer

00:11:08,259 --> 00:11:16,089
to mention the yet he have boolean

00:11:11,769 --> 00:11:22,829
flights I can also take full advantage

00:11:16,089 --> 00:11:25,829
of the is a with checking from from Musa

00:11:22,829 --> 00:11:25,829
structure

00:11:27,999 --> 00:11:37,569
once again this allows for very detailed

00:11:30,999 --> 00:11:41,260
testing and by being able to require the

00:11:37,569 --> 00:11:44,950
script instead of run it

00:11:41,260 --> 00:12:11,760
process you can achieve 100% test

00:11:44,950 --> 00:12:11,760
coverage run it and the bear mode for

00:12:13,830 --> 00:12:24,310
these stuff in the variable if I put in

00:12:18,310 --> 00:12:35,100
something that doesn't exist or it says

00:12:24,310 --> 00:12:35,100
is required I get my my error functions

00:12:45,779 --> 00:13:08,730
over and look at the role itself this is

00:13:00,449 --> 00:13:11,309
up I'm seeing you you'll see that what I

00:13:08,730 --> 00:13:14,519
did was basically take all day and get

00:13:11,309 --> 00:13:17,279
up the processing out of the script and

00:13:14,519 --> 00:13:19,649
now to put it into a role just I don't

00:13:17,279 --> 00:13:25,379
have to do a lot of copy and paste every

00:13:19,649 --> 00:13:33,059
time I want to write a script this

00:13:25,379 --> 00:13:38,490
results in a command line script that's

00:13:33,059 --> 00:13:41,459
clean once again and this is commented

00:13:38,490 --> 00:13:46,639
out because I've got the debug option or

00:13:41,459 --> 00:13:46,639
debug afternoon in there in the role I

00:13:53,750 --> 00:13:58,980
move the CLI attribute in here that's

00:13:56,579 --> 00:14:00,809
strictly there so I can I can give

00:13:58,980 --> 00:14:03,029
myself a Saturday be Chet and know that

00:14:00,809 --> 00:14:07,139
I'm running from the command line

00:14:03,029 --> 00:14:10,519
ah before I go further in this does

00:14:07,139 --> 00:14:10,519
anybody have any questions

00:14:17,730 --> 00:14:19,790
you

00:14:21,199 --> 00:14:34,749
I'm gonna say no depends on Todd to let

00:14:30,920 --> 00:14:34,749
me know if I need to stop for anything

00:14:37,629 --> 00:14:49,609
this is the example skip that comes with

00:14:40,489 --> 00:15:04,040
the with the Sipan module so it has some

00:14:49,609 --> 00:15:06,790
Sena scripts and built into it so now by

00:15:04,040 --> 00:15:06,790
using this pattern

00:15:07,050 --> 00:15:14,970
I I have a nice clean structure I can

00:15:11,760 --> 00:15:17,970
break things up I think most of us try

00:15:14,970 --> 00:15:21,500
to write our skips structured around

00:15:17,970 --> 00:15:21,500
subroutines anyway

00:15:22,800 --> 00:15:33,000
so the only thing to keep in mind when

00:15:27,089 --> 00:15:35,570
doing this is that anything you want to

00:15:33,000 --> 00:15:35,570
execute

00:15:36,329 --> 00:15:42,299
exits women running off like an airline

00:15:38,549 --> 00:15:46,350
you have to put up before or wherever

00:15:42,299 --> 00:15:50,009
you put in the imagine Ino pattern which

00:15:46,350 --> 00:15:53,819
is right here I personally prefer doing

00:15:50,009 --> 00:15:58,220
it in a do block and it could because

00:15:53,819 --> 00:15:58,220
I'm also a fan opposed to fix logic

00:15:58,590 --> 00:16:05,630
people have worked with like to do it

00:16:01,940 --> 00:16:05,630
inside an if block

00:16:08,360 --> 00:16:10,510
which

00:16:10,949 --> 00:16:15,749
looks a little strange to me to be

00:16:13,420 --> 00:16:15,749
honest

00:16:15,939 --> 00:16:17,999
you

00:16:18,649 --> 00:16:20,709
you

00:16:29,270 --> 00:16:36,480
I'm gonna apologize folks I did a dry

00:16:33,690 --> 00:16:42,710
run on this last weekend it came out

00:16:36,480 --> 00:16:42,710
longer and

00:16:45,119 --> 00:16:51,449
now that I'm seeing this everything

00:16:46,769 --> 00:16:53,759
right here is just obvious to me a quick

00:16:51,449 --> 00:16:56,869
history on the modulae no pattern the

00:16:53,759 --> 00:17:00,809
first I heard and it was probably around

00:16:56,869 --> 00:17:03,829
2014 or so and really on seep and I saw

00:17:00,809 --> 00:17:08,870
that Brian deployed put up a

00:17:03,829 --> 00:17:08,870
proof-of-concept modules early as 2013

00:17:10,699 --> 00:17:16,259
does anybody have questions about what

00:17:13,949 --> 00:17:20,669
the modular about the module II no

00:17:16,259 --> 00:17:22,490
pattern is or what else can be done with

00:17:20,669 --> 00:17:26,100
it

00:17:22,490 --> 00:17:30,539
I've used it successfully with dancers

00:17:26,100 --> 00:17:35,519
few applications so I can have a normal

00:17:30,539 --> 00:17:39,769
test suite using out it just makes it

00:17:35,519 --> 00:17:45,590
using test plaque or plaque test and

00:17:39,769 --> 00:17:45,590
mocked out much of the I

00:17:47,760 --> 00:17:54,530
they're adding extra dispatch entries

00:17:51,770 --> 00:17:56,620
once again achieving close to 100% test

00:17:54,530 --> 00:17:56,620
coverage

00:18:10,480 --> 00:18:44,840
this is yeah as I wanted to show this is

00:18:38,869 --> 00:18:58,129
the learning test scripts out of the CPM

00:18:44,840 --> 00:19:00,730
module and once of once you require the

00:18:58,129 --> 00:19:00,730
test script

00:19:02,150 --> 00:19:11,780
call in the neck code for everything and

00:19:09,560 --> 00:19:15,130
of course you can check your modulus

00:19:11,780 --> 00:19:18,500
even half like normal test procedures

00:19:15,130 --> 00:19:20,510
you then call it a run function like

00:19:18,500 --> 00:19:24,400
normal you can see that I can easily use

00:19:20,510 --> 00:19:27,110
tests mock module to mock that out

00:19:24,400 --> 00:19:30,320
especially if there's any code that does

00:19:27,110 --> 00:19:37,940
dangerous things with with me a database

00:19:30,320 --> 00:19:42,490
or back into the party calls that you

00:19:37,940 --> 00:19:42,490
don't want to execute and

00:19:43,180 --> 00:19:47,620
forretress mr. Clark's running short I

00:19:45,400 --> 00:19:49,390
mean that's pretty much everything I I

00:19:47,620 --> 00:19:51,630
wanted to cover unless somebody asked

00:19:49,390 --> 00:19:59,210
questions

00:19:51,630 --> 00:20:01,279
Todd the

00:19:59,210 --> 00:20:04,610
we have questions I'm not seeing any

00:20:01,279 --> 00:20:07,159
chat if anybody has any questions go

00:20:04,610 --> 00:20:08,750
ahead and use the raise hand feature or

00:20:07,159 --> 00:20:10,929
you can just unmute and speak if you

00:20:08,750 --> 00:20:10,929
like

00:20:20,510 --> 00:20:27,260
okay well Jim will be available in

00:20:24,250 --> 00:20:29,419
probably hallway if anybody has any

00:20:27,260 --> 00:20:31,760
questions and other than that thank you

00:20:29,419 --> 00:20:36,400
Jim for speaking thank you for your

00:20:31,760 --> 00:20:36,400

YouTube URL: https://www.youtube.com/watch?v=Yuc-Fb_Y7Eo


