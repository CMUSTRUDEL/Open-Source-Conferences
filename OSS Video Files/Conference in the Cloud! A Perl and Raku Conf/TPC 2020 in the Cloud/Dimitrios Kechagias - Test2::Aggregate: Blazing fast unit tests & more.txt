Title: Dimitrios Kechagias - Test2::Aggregate: Blazing fast unit tests & more
Publication date: 2020-06-24
Playlist: TPC 2020 in the Cloud
Description: 
	An intro to Test2::Aggregate, an aggregator module that can work with any test framework, particularly Test2::Suite, with the potential to dramatically increase the speed of tests - especially large volumes of small unit tests. There will be a focus on how to start integrating the module into a test suite without disrupting the workflow, how it can benefit your CI pipeline and how to deal with various caveats of aggregation. Additionally, various other ways to use the module will be presented, such as profiling, testing flakiness / finding conflicts, generating reports, testing aggregation etc.
Captions: 
	00:00:08,510 --> 00:00:15,690
okay whenever you're ready okay hello so

00:00:11,940 --> 00:00:19,050
hope everybody can hear me I'm vinicius

00:00:15,690 --> 00:00:22,920
kattah yes and as you heard I work at

00:00:19,050 --> 00:00:25,800
Sparrow and those in the UK will

00:00:22,920 --> 00:00:28,769
probably know what it is for what sperm

00:00:25,800 --> 00:00:31,410
is for the rest it's a room and roommate

00:00:28,769 --> 00:00:34,380
finding service for the UK and the US

00:00:31,410 --> 00:00:37,290
it runs on a pearl back end so it's

00:00:34,380 --> 00:00:39,140
developed by a great pearl ting pearl

00:00:37,290 --> 00:00:42,270
team we have here in Manchester and

00:00:39,140 --> 00:00:44,969
today i'll talk to you about a module

00:00:42,270 --> 00:00:48,030
that i briefly introduced last year in

00:00:44,969 --> 00:00:52,969
the pittsburgh conference I will attach

00:00:48,030 --> 00:00:55,890
this presentation to the TOC page and

00:00:52,969 --> 00:00:58,949
the last slide contains a link to an

00:00:55,890 --> 00:01:04,610
archive with all the files and demo demo

00:00:58,949 --> 00:01:07,740
server news so what is this - aggregates

00:01:04,610 --> 00:01:11,100
very simply it's a module that runs

00:01:07,740 --> 00:01:15,119
existing test files as sub tests of a

00:01:11,100 --> 00:01:18,060
big test this is the heart of what it

00:01:15,119 --> 00:01:22,189
does and I initially developed it

00:01:18,060 --> 00:01:26,670
because I wanted to profile very a big

00:01:22,189 --> 00:01:29,670
amount of small tests together and I

00:01:26,670 --> 00:01:32,250
noticed that the the overheads of

00:01:29,670 --> 00:01:33,780
reloading pearl every time was much

00:01:32,250 --> 00:01:36,180
greater than I expected so I thought

00:01:33,780 --> 00:01:38,939
somebody must have done a module that is

00:01:36,180 --> 00:01:42,360
good for testing to take advantage of

00:01:38,939 --> 00:01:48,119
that and there are a couple of modules

00:01:42,360 --> 00:01:50,070
that do it but they they went I guess

00:01:48,119 --> 00:01:52,200
they wanted to try to do too much and

00:01:50,070 --> 00:01:54,780
they mess with their test builder

00:01:52,200 --> 00:01:57,450
internals so they no longer award

00:01:54,780 --> 00:02:01,259
especially if you have a modern test

00:01:57,450 --> 00:02:04,049
framework and so I continued building on

00:02:01,259 --> 00:02:08,160
my module and did not draw inspiration

00:02:04,049 --> 00:02:10,950
from those old modules which makes it a

00:02:08,160 --> 00:02:12,980
bit different in how it works and makes

00:02:10,950 --> 00:02:17,000
it suitable for

00:02:12,980 --> 00:02:21,980
or things traditionally it will start

00:02:17,000 --> 00:02:29,810
starting the synopsis I mean it's just

00:02:21,980 --> 00:02:34,160
the run tests one testament to run your

00:02:29,810 --> 00:02:39,280
tests in a list of directories but here

00:02:34,160 --> 00:02:41,720
and give you in a nice hash read the

00:02:39,280 --> 00:02:47,870
results of the tests they succeeded

00:02:41,720 --> 00:02:50,269
failed hello YouTube so trying directly

00:02:47,870 --> 00:02:53,660
like this to run the entire tea

00:02:50,269 --> 00:02:55,910
directory is not a good idea for if you

00:02:53,660 --> 00:02:58,819
have an existing a large test suite

00:02:55,910 --> 00:03:00,739
because not all tests chemi we

00:02:58,819 --> 00:03:03,440
aggregated so many will fail and

00:03:00,739 --> 00:03:07,489
sometimes even cause lock ups and escape

00:03:03,440 --> 00:03:10,810
the skating fails so you could try ders

00:03:07,489 --> 00:03:13,489
here takes a list so you could try

00:03:10,810 --> 00:03:16,670
subdirectories or a better idea is to

00:03:13,489 --> 00:03:18,859
use lists instead because with lists of

00:03:16,670 --> 00:03:22,280
files you can just edit the lists

00:03:18,859 --> 00:03:24,590
without moving around test files or

00:03:22,280 --> 00:03:27,769
anything like that so it doesn't affect

00:03:24,590 --> 00:03:31,630
your existing work field now there are

00:03:27,769 --> 00:03:35,000
several caveats

00:03:31,630 --> 00:03:37,370
so as you understand there's no separate

00:03:35,000 --> 00:03:40,280
namespace for tests I tried doing

00:03:37,370 --> 00:03:45,349
something like that but didn't work very

00:03:40,280 --> 00:03:47,840
well so we'll just keep the no separate

00:03:45,349 --> 00:03:52,280
lame space and it means that you have

00:03:47,840 --> 00:03:57,889
some predefined warnings if you use the

00:03:52,280 --> 00:04:02,030
same names for subs or you have to take

00:03:57,889 --> 00:04:05,150
care of overrides that would expire when

00:04:02,030 --> 00:04:07,489
the test was ending either one is

00:04:05,150 --> 00:04:11,389
surviving for the next test and things

00:04:07,489 --> 00:04:13,910
like that and begin blocks work a bit

00:04:11,389 --> 00:04:16,430
differently now because once they're

00:04:13,910 --> 00:04:19,430
loaded usually is global overrides there

00:04:16,430 --> 00:04:24,310
and they will stay on for the the rest

00:04:19,430 --> 00:04:27,820
of the tests and the same and applies

00:04:24,310 --> 00:04:31,550
before the next test

00:04:27,820 --> 00:04:34,580
so I have no idea why you use test glass

00:04:31,550 --> 00:04:42,350
personally but if you do it doesn't work

00:04:34,580 --> 00:04:48,530
with it and if you use test more test

00:04:42,350 --> 00:04:50,690
builder you might see some issues you I

00:04:48,530 --> 00:04:53,150
mean you should know now that the test

00:04:50,690 --> 00:04:57,020
builder is simply a wrapper around test

00:04:53,150 --> 00:05:00,950
2 so there's no real need to use it but

00:04:57,020 --> 00:05:02,840
in any case example of issues is that as

00:05:00,950 --> 00:05:05,090
I showed you that the aggregator reports

00:05:02,840 --> 00:05:06,020
what are the in the hash whether the

00:05:05,090 --> 00:05:08,360
test passed

00:05:06,020 --> 00:05:11,450
if the tests were using test more and

00:05:08,360 --> 00:05:15,050
they failed but they do but they failed

00:05:11,450 --> 00:05:17,710
in a way that didn't run any tests the

00:05:15,050 --> 00:05:21,560
test 2 subjects will think they passed

00:05:17,710 --> 00:05:23,480
so your statistic will be off and mixing

00:05:21,560 --> 00:05:26,450
test frameworks can cause really fine

00:05:23,480 --> 00:05:28,940
warnings if you use test 2 and then test

00:05:26,450 --> 00:05:32,060
more like obviously when you find the

00:05:28,940 --> 00:05:34,040
same things and you cannot use plan in

00:05:32,060 --> 00:05:36,350
the individual tests you cannot plan for

00:05:34,040 --> 00:05:39,140
a number of tests but you can plan if

00:05:36,350 --> 00:05:43,910
you aggregate them in the aggregated

00:05:39,140 --> 00:05:46,610
test now what I didn't do last time is

00:05:43,910 --> 00:05:51,919
show how you would go about aggregate

00:05:46,610 --> 00:05:57,169
and test suite and although first we run

00:05:51,919 --> 00:05:59,990
the tests I ran last time which is I

00:05:57,169 --> 00:06:02,120
already worked on mousse and they found

00:05:59,990 --> 00:06:04,729
that a hundred and eighty something of

00:06:02,120 --> 00:06:07,460
the tests there are three hundred or 300

00:06:04,729 --> 00:06:11,960
in total run under the aggregator

00:06:07,460 --> 00:06:14,650
without any modification some of them

00:06:11,960 --> 00:06:18,200
might have some warnings but in any case

00:06:14,650 --> 00:06:23,600
this is how they run on the on the left

00:06:18,200 --> 00:06:26,510
with proof and if you're using test tube

00:06:23,600 --> 00:06:28,400
and gap which is the equivalent for

00:06:26,510 --> 00:06:33,169
testing the testing harness you can

00:06:28,400 --> 00:06:36,770
preload mousse which makes the mousse

00:06:33,169 --> 00:06:40,099
that's much faster so we load those 180

00:06:36,770 --> 00:06:41,260
tests to see the comparison how much

00:06:40,099 --> 00:06:48,320
faster

00:06:41,260 --> 00:06:55,510
so you took 46 seconds with proof let's

00:06:48,320 --> 00:06:55,510
see yeah it's much faster

00:07:01,680 --> 00:07:06,570
okay I'll go ahead and just run this

00:07:04,979 --> 00:07:11,520
which will go around them under the

00:07:06,570 --> 00:07:19,830
aggregator they way they would okay 21

00:07:11,520 --> 00:07:21,830
seconds let's see aggregated five

00:07:19,830 --> 00:07:26,840
seconds

00:07:21,830 --> 00:07:32,870
so for tests like this the difference is

00:07:26,840 --> 00:07:41,010
is great and let's go try out

00:07:32,870 --> 00:07:45,449
let's try that's right yeah so let's try

00:07:41,010 --> 00:07:47,820
using one delicious which is also a test

00:07:45,449 --> 00:07:50,430
it's also using test modes it's not it

00:07:47,820 --> 00:07:53,789
has some issues that I briefly mentioned

00:07:50,430 --> 00:07:58,440
we'll see them here so first I do I

00:07:53,789 --> 00:08:05,160
create a list with all the test files I

00:07:58,440 --> 00:08:11,690
will just actually yeah so oh you got

00:08:05,160 --> 00:08:15,300
LSP and we run this and here I have a

00:08:11,690 --> 00:08:21,030
printout of any tests that pass so we

00:08:15,300 --> 00:08:31,139
will use this later but first let's see

00:08:21,030 --> 00:08:37,260
if if they can actually pass so there is

00:08:31,139 --> 00:08:41,099
the first lock up now control see there

00:08:37,260 --> 00:08:46,589
are some tests that look up when

00:08:41,099 --> 00:08:48,720
aggregated I where's my list here so I

00:08:46,589 --> 00:08:51,690
can just be eat them from the list file

00:08:48,720 --> 00:08:53,790
but we don't have much time

00:08:51,690 --> 00:08:56,640
I know from the previous run that there

00:08:53,790 --> 00:09:00,390
is another three I will remove all of

00:08:56,640 --> 00:09:07,880
them so we'll have a new list there amid

00:09:00,390 --> 00:09:07,880
list now which is what

00:09:09,319 --> 00:09:26,069
which is 99 tests subtle 103 total we

00:09:14,160 --> 00:09:36,899
run those man I switch the silent

00:09:26,069 --> 00:09:39,589
keyboard for the stop and okay now we're

00:09:36,899 --> 00:09:39,589
getting somewhere

00:10:14,949 --> 00:10:19,959
yeah then we'll know more he was faster

00:10:16,809 --> 00:10:22,170
but I see that zoom was using a lot of

00:10:19,959 --> 00:10:22,170
mine

00:10:23,150 --> 00:10:26,220
[Music]

00:10:44,410 --> 00:10:54,550
okay so 37 failed and the successes are

00:10:49,600 --> 00:10:57,840
written in the past list here so I will

00:10:54,550 --> 00:10:57,840
try to run the past list now

00:11:16,500 --> 00:11:24,480
okay surprisingly if you're not used it

00:11:21,690 --> 00:11:27,300
before some tests still failed from the

00:11:24,480 --> 00:11:29,190
ones that reported as passed that's

00:11:27,300 --> 00:11:32,670
because of the problem III told you

00:11:29,190 --> 00:11:36,330
about the difference between the sub

00:11:32,670 --> 00:11:41,750
test of test you and just more so simply

00:11:36,330 --> 00:11:44,580
though I will go to the past list

00:11:41,750 --> 00:11:49,560
there are the numbers of tests which are

00:11:44,580 --> 00:11:51,950
the line numbers you can just comment

00:11:49,560 --> 00:11:51,950
them out

00:11:57,580 --> 00:12:25,930
9:47 60 and 9:57 68 this should be it

00:12:20,800 --> 00:12:28,990
but let's go ahead and go show you yeah

00:12:25,930 --> 00:12:33,390
everything best so let's go ahead and

00:12:28,990 --> 00:12:36,010
show you what happens with test-tube

00:12:33,390 --> 00:12:40,330
that's sweet so I looked up further

00:12:36,010 --> 00:12:42,790
tests to sweet modules like you

00:12:40,330 --> 00:12:45,430
substitute on sippin and found the mark

00:12:42,790 --> 00:12:46,300
dance had over 30 pests there may be a

00:12:45,430 --> 00:12:50,770
useful one

00:12:46,300 --> 00:12:53,010
I'll try first to run the entire

00:12:50,770 --> 00:12:53,010
directory

00:12:55,920 --> 00:13:14,320
it runs in four seconds I will be bold

00:13:00,490 --> 00:13:17,850
and best warnings so I don't want you to

00:13:14,320 --> 00:13:17,850
produce any warnings either

00:13:22,700 --> 00:13:31,600
so test to aggregate with test warnings

00:13:26,680 --> 00:13:34,970
whoa sorry that's the biggest one so

00:13:31,600 --> 00:13:37,580
test to with warnings with test for

00:13:34,970 --> 00:13:43,280
warnings and give you summary at the

00:13:37,580 --> 00:13:49,340
bottom so this is a warning if we open

00:13:43,280 --> 00:13:52,220
this test yeah it was generated but this

00:13:49,340 --> 00:14:16,640
Zilla takes a test mortis so if we

00:13:52,220 --> 00:14:20,620
convert this to yeah finished and if

00:14:16,640 --> 00:14:20,620
you're curious how long it takes

00:14:21,700 --> 00:14:28,070
with regular proof

00:14:24,070 --> 00:14:30,680
it won't take four or five seconds it

00:14:28,070 --> 00:14:35,660
will take okay we don't have fun thanks

00:14:30,680 --> 00:14:37,880
it will take more than half a minute so

00:14:35,660 --> 00:14:40,100
yeah this is the process I followed

00:14:37,880 --> 00:14:45,080
there are many approaches to this to do

00:14:40,100 --> 00:14:47,510
how to integrate into tests I can add

00:14:45,080 --> 00:14:50,870
some tips for specific issues you might

00:14:47,510 --> 00:14:52,970
have one aggregating so if you use

00:14:50,870 --> 00:14:56,140
common names for subs in your test you

00:14:52,970 --> 00:14:59,270
might heat a lot of really fine warnings

00:14:56,140 --> 00:15:02,060
one way to deal with them is to deal

00:14:59,270 --> 00:15:06,110
with them at the level of your test

00:15:02,060 --> 00:15:10,760
bundle the way we do it is use import

00:15:06,110 --> 00:15:13,550
into and oh this environment variable is

00:15:10,760 --> 00:15:16,310
provided by tests to aggregate so it

00:15:13,550 --> 00:15:19,990
only applies to those tests now if your

00:15:16,310 --> 00:15:23,090
app uses exit also you might want to

00:15:19,990 --> 00:15:25,460
override it with a begin statement you

00:15:23,090 --> 00:15:27,170
can use test trap instead if you want to

00:15:25,460 --> 00:15:31,280
activate the test and this is how you

00:15:27,170 --> 00:15:33,400
can use test trap to avoid warnings for

00:15:31,280 --> 00:15:35,230
multiple loads

00:15:33,400 --> 00:15:37,960
and in general you can take advantage of

00:15:35,230 --> 00:15:40,900
the fact that the aggregated tests we

00:15:37,960 --> 00:15:43,839
run in sequence so you can do things

00:15:40,900 --> 00:15:46,029
like if you can't run some of them in

00:15:43,839 --> 00:15:49,600
parallel because of critical sections

00:15:46,029 --> 00:15:50,890
you group them smartly so that you have

00:15:49,600 --> 00:15:53,830
all the critical sections and you

00:15:50,890 --> 00:15:57,910
paralyze your tests if you're using a

00:15:53,830 --> 00:16:00,790
test to harness the category game is the

00:15:57,910 --> 00:16:06,250
category immiscible is something you've

00:16:00,790 --> 00:16:09,250
done before now ideally your test suite

00:16:06,250 --> 00:16:11,950
is paralyzed able so you'd have many

00:16:09,250 --> 00:16:13,779
parallel aggregate tests running so we

00:16:11,950 --> 00:16:15,220
try to keep them balanced because you

00:16:13,779 --> 00:16:18,550
don't want to have one very long one

00:16:15,220 --> 00:16:21,010
that keeps on chugging along on a single

00:16:18,550 --> 00:16:28,690
thread while everything else is finished

00:16:21,010 --> 00:16:32,529
in parallel so we added the excuse list

00:16:28,690 --> 00:16:37,350
to gap because to harness exactly four

00:16:32,529 --> 00:16:40,720
tests to aggregate so you can still add

00:16:37,350 --> 00:16:43,480
the preload for non aggregate tests

00:16:40,720 --> 00:16:46,750
frontier suite but you use this the

00:16:43,480 --> 00:16:50,970
exclude list to exclude everything in

00:16:46,750 --> 00:16:54,730
your that is aggregated and we actually

00:16:50,970 --> 00:16:59,740
in sparrow will use a wrapper which adds

00:16:54,730 --> 00:17:04,179
the nicer start out the wildcard support

00:16:59,740 --> 00:17:07,510
and we use this and we preload our

00:17:04,179 --> 00:17:11,350
modules the same time you can pop it and

00:17:07,510 --> 00:17:15,760
modify it if you want so how does it

00:17:11,350 --> 00:17:19,420
work in practice experiment have a very

00:17:15,760 --> 00:17:21,370
large and very optimized suite so we run

00:17:19,420 --> 00:17:24,880
it on 16 parallel threads and a decent

00:17:21,370 --> 00:17:27,220
server and it takes just four point five

00:17:24,880 --> 00:17:27,939
minutes to finish we prove if we

00:17:27,220 --> 00:17:31,030
preloads

00:17:27,939 --> 00:17:34,330
most of our modules it does take just

00:17:31,030 --> 00:17:36,730
three minutes which is good however we

00:17:34,330 --> 00:17:38,830
managed to run 82% of our tests under

00:17:36,730 --> 00:17:42,100
the aggregator there split into 12

00:17:38,830 --> 00:17:45,220
groups running partly and it takes the

00:17:42,100 --> 00:17:46,730
runtime time through 75 seconds so with

00:17:45,220 --> 00:17:48,140
that time we have

00:17:46,730 --> 00:17:50,920
see I a continuous integration

00:17:48,140 --> 00:17:53,930
environment it's a perfect match because

00:17:50,920 --> 00:17:57,080
whenever somebody pushes change in any

00:17:53,930 --> 00:17:59,840
branch the the test suite the entire

00:17:57,080 --> 00:18:01,820
test suite is run and you get an almost

00:17:59,840 --> 00:18:03,980
immediate feedback so we catch any

00:18:01,820 --> 00:18:06,830
issues early in the development cycle

00:18:03,980 --> 00:18:12,350
and your code is always ready for

00:18:06,830 --> 00:18:15,470
release fully tested and we send the

00:18:12,350 --> 00:18:18,410
test feedback to slack and it's

00:18:15,470 --> 00:18:20,960
integrating github as well but

00:18:18,410 --> 00:18:24,950
aggregated tests also can send

00:18:20,960 --> 00:18:27,320
statistics so we wrap it and send it to

00:18:24,950 --> 00:18:29,240
a database and we give them on the

00:18:27,320 --> 00:18:32,480
Select message you can click to see the

00:18:29,240 --> 00:18:33,980
webpage the timings of your tests or you

00:18:32,480 --> 00:18:39,100
can explore the story top performance to

00:18:33,980 --> 00:18:41,660
see when tests run slower or faster and

00:18:39,100 --> 00:18:43,150
there are other benefits in using a

00:18:41,660 --> 00:18:45,530
module

00:18:43,150 --> 00:18:48,140
apart from grabbing the statistics you

00:18:45,530 --> 00:18:51,530
there's a stats output option that just

00:18:48,140 --> 00:18:53,660
dumps them in a file and I already

00:18:51,530 --> 00:18:55,910
showed you test warnings it's very

00:18:53,660 --> 00:18:58,880
useful for us because we want groups of

00:18:55,910 --> 00:19:01,400
tests to produce no warnings and just

00:18:58,880 --> 00:19:05,000
enable it and it doesn't test for you

00:19:01,400 --> 00:19:07,760
and summarize the results and the

00:19:05,000 --> 00:19:11,540
initial reason I wrote this so writing

00:19:07,760 --> 00:19:14,000
it is to profile a big number of small

00:19:11,540 --> 00:19:16,250
tests which by themselves don't really

00:19:14,000 --> 00:19:18,590
make sense to profile them but I have

00:19:16,250 --> 00:19:22,460
found that I can find bottlenecks that I

00:19:18,590 --> 00:19:25,310
didn't know they were there and it's

00:19:22,460 --> 00:19:28,490
also great for testing flaky tests

00:19:25,310 --> 00:19:30,440
because it runs them much faster so it

00:19:28,490 --> 00:19:31,880
can impede and it has a built in option

00:19:30,440 --> 00:19:35,300
to repeat until failure

00:19:31,880 --> 00:19:39,620
that's the repeat minus one and further

00:19:35,300 --> 00:19:42,440
upon that we got a little program which

00:19:39,620 --> 00:19:44,660
is simplified here to detect parallel

00:19:42,440 --> 00:19:46,790
test conflicts like if you have a test

00:19:44,660 --> 00:19:49,820
that fails randomly because something

00:19:46,790 --> 00:19:51,890
else is conflicting with it because of a

00:19:49,820 --> 00:19:55,670
critical section that you're not really

00:19:51,890 --> 00:19:59,030
sure where it is you can run a test

00:19:55,670 --> 00:20:04,030
repeatedly against the entire test suite

00:19:59,030 --> 00:20:09,890
and I can give you a demo of that here

00:20:04,030 --> 00:20:13,250
so I have three tests that run or try to

00:20:09,890 --> 00:20:17,420
write in the same file two of them and I

00:20:13,250 --> 00:20:19,750
will run the the file I showed you it's

00:20:17,420 --> 00:20:21,890
a simplified version of what we use

00:20:19,750 --> 00:20:23,540
against the entire test suite

00:20:21,890 --> 00:20:27,590
so it will run everything except this

00:20:23,540 --> 00:20:32,900
test file and there was a failure and it

00:20:27,590 --> 00:20:36,140
bailed so you see that the last we have

00:20:32,900 --> 00:20:41,990
one more minute yeah it's my last yeah

00:20:36,140 --> 00:20:45,070
so the the last you can see that the

00:20:41,990 --> 00:20:48,620
second test is the last one that was run

00:20:45,070 --> 00:20:50,750
well we tried to run it was launched so

00:20:48,620 --> 00:20:52,730
this is one means the one that has the

00:20:50,750 --> 00:20:54,950
critical section it might be the

00:20:52,730 --> 00:20:56,840
previous one and sometimes there's some

00:20:54,950 --> 00:21:00,260
lag sometimes but if you have thousands

00:20:56,840 --> 00:21:06,730
of tests you can see which one or two

00:21:00,260 --> 00:21:12,830
are the culprits and I guess that

00:21:06,730 --> 00:21:14,570
concludes my talk and you can I would

00:21:12,830 --> 00:21:18,340
love with the slide so you can download

00:21:14,570 --> 00:21:18,340
the files if you want to play with them

00:21:24,370 --> 00:21:27,730
into a newt

00:21:27,860 --> 00:21:32,090
right I'm sorry I was hitting applause

00:21:30,350 --> 00:21:32,960
rather than the question sorry sorry

00:21:32,090 --> 00:21:43,160
maybe I hit the wrong button

00:21:32,960 --> 00:21:45,710
it was okay no more question we are we

00:21:43,160 --> 00:21:51,149
have another one too so Mike I just

00:21:45,710 --> 00:21:53,609
asked you on mute actually I was

00:21:51,149 --> 00:22:00,119
also just clapping so great presentation

00:21:53,609 --> 00:22:04,849
Oh was enough to help you use the module

00:22:00,119 --> 00:22:04,849

YouTube URL: https://www.youtube.com/watch?v=olH41BhFx6M


