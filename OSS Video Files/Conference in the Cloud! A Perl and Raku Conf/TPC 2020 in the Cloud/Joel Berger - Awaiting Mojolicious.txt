Title: Joel Berger - Awaiting Mojolicious
Publication date: 2020-06-24
Playlist: TPC 2020 in the Cloud
Description: 
	Mojolicious has added industry standard features like Promises/A+ and async/await support. Those alone make writing asynchronous web applications much easier than it used to be, indeed its a whole new ballgame. I’ll cover some common async needs and their related patterns with my usual style of lots of example code that’s all available to run from the repo (and as always, including tests). I’m excited to share the new features (and a few old favorites) with everyone!
Captions: 
	00:00:00,000 --> 00:00:08,970
I have a good talk you very much hello

00:00:04,920 --> 00:00:11,309
everyone different setting this time my

00:00:08,970 --> 00:00:15,150
name is Joel Berger I am a member of the

00:00:11,309 --> 00:00:19,140
mojolicious core team speaking to you

00:00:15,150 --> 00:00:20,939
today from my house and I can't wait to

00:00:19,140 --> 00:00:23,939
see you guys all again sometime very

00:00:20,939 --> 00:00:27,210
soon I called this talk awaiting

00:00:23,939 --> 00:00:30,060
mojolicious and that sort of gives away

00:00:27,210 --> 00:00:32,640
the punchline at the end I should know

00:00:30,060 --> 00:00:34,079
what the punchline will be but actually

00:00:32,640 --> 00:00:36,809
this talk has a lot of introductory

00:00:34,079 --> 00:00:38,540
material tubes so hopefully this will be

00:00:36,809 --> 00:00:42,090
good for everybody

00:00:38,540 --> 00:00:44,399
what do you use know or not about this

00:00:42,090 --> 00:00:47,039
talk my style of talks I know everyone

00:00:44,399 --> 00:00:49,020
else is kind of going to these very

00:00:47,039 --> 00:00:52,710
little code in talks my style of talk

00:00:49,020 --> 00:00:54,870
has lots of code and that means that if

00:00:52,710 --> 00:00:57,300
you'd like to have a local copy up and

00:00:54,870 --> 00:00:59,579
running so that you can read along as

00:00:57,300 --> 00:01:01,859
you go you can go to j-bird that github

00:00:59,579 --> 00:01:03,750
that io / waiting Oh delicious I am in

00:01:01,859 --> 00:01:07,200
fact doing that myself this is the talk

00:01:03,750 --> 00:01:10,619
I am giving all of the code you see is

00:01:07,200 --> 00:01:12,540
also included in the repo all the code

00:01:10,619 --> 00:01:14,250
whether or not you see all of it on the

00:01:12,540 --> 00:01:19,880
slide all of the code is complete and

00:01:14,250 --> 00:01:19,880
runs as shown and all of the tests pass

00:01:21,560 --> 00:01:34,380
please all pass hooray outline of a talk

00:01:32,759 --> 00:01:36,180
I'm going to do a little brief

00:01:34,380 --> 00:01:38,159
introduction to the mojolicious project

00:01:36,180 --> 00:01:40,229
then an interview of some of the mojo

00:01:38,159 --> 00:01:42,479
toolkit pieces that we will be using

00:01:40,229 --> 00:01:46,200
I will then iteratively build up a

00:01:42,479 --> 00:01:48,390
non-trivial mojolicious app and that app

00:01:46,200 --> 00:01:51,659
itself will come with tests the tests

00:01:48,390 --> 00:01:53,100
that you just saw run I won't pop over

00:01:51,659 --> 00:01:55,079
to the other console and show you

00:01:53,100 --> 00:01:58,939
individually but you can assume they ran

00:01:55,079 --> 00:02:01,110
because you just saw I will use those

00:01:58,939 --> 00:02:02,700
individual steps to introduce some more

00:02:01,110 --> 00:02:05,219
delicious concepts and then at the end

00:02:02,700 --> 00:02:09,270
we will convert that app to not blocking

00:02:05,219 --> 00:02:12,280
when I say a non-trivial act sometimes a

00:02:09,270 --> 00:02:14,470
trivial app is reasonably easy to

00:02:12,280 --> 00:02:17,200
to non-blocking using any mechanism you

00:02:14,470 --> 00:02:20,010
want but with a non-trivial app you can

00:02:17,200 --> 00:02:20,010
often pull your hair out

00:02:20,490 --> 00:02:26,709
what is mo delicious sort of my standard

00:02:24,880 --> 00:02:30,520
slide it's an amazing real-time web

00:02:26,709 --> 00:02:32,620
framework it's a but it's also a

00:02:30,520 --> 00:02:34,560
powerful web development toolkit you can

00:02:32,620 --> 00:02:37,270
use the toolkit without the framework

00:02:34,560 --> 00:02:39,390
the framework uses the toolkit so that

00:02:37,270 --> 00:02:42,520
doesn't really work the other way around

00:02:39,390 --> 00:02:43,650
it has been designed from the ground up

00:02:42,520 --> 00:02:45,910
[Music]

00:02:43,650 --> 00:02:50,380
intentionally to work nicely with itself

00:02:45,910 --> 00:02:52,060
it's a it's a very self consistent but

00:02:50,380 --> 00:02:54,280
it wasn't done in a vacuum it was built

00:02:52,060 --> 00:02:56,320
based on years of experience that our

00:02:54,280 --> 00:03:01,180
lead developer Sebastian real had

00:02:56,320 --> 00:03:03,730
developing catalyst the code it's

00:03:01,180 --> 00:03:05,590
portable it has no non core dependencies

00:03:03,730 --> 00:03:09,220
although it has several optional

00:03:05,590 --> 00:03:11,560
dependencies its batteries included I

00:03:09,220 --> 00:03:14,890
very rarely have to duck out of the mojo

00:03:11,560 --> 00:03:18,700
toolkit for anything you can reasonably

00:03:14,890 --> 00:03:20,350
consider sort of standard web stuff real

00:03:18,700 --> 00:03:22,570
time and non-blocking it's built on an

00:03:20,350 --> 00:03:24,190
i/o loop if you're familiar with nodejs

00:03:22,570 --> 00:03:30,510
you'll feel very comfortable in

00:03:24,190 --> 00:03:33,220
modulations and WebSockets and things

00:03:30,510 --> 00:03:36,670
let me say it's perfect for building

00:03:33,220 --> 00:03:39,579
highly scalable web services I often

00:03:36,670 --> 00:03:41,620
have exact numbers on these how many

00:03:39,579 --> 00:03:43,150
lines of code and how many tests I was

00:03:41,620 --> 00:03:44,950
polishing this up to the last second I

00:03:43,150 --> 00:03:46,930
didn't have time to actually do a check

00:03:44,950 --> 00:03:49,150
and in fact right now we're importing

00:03:46,930 --> 00:03:50,560
our test suite to use sub tests so it's

00:03:49,150 --> 00:03:51,640
a little hard to get the exact number of

00:03:50,560 --> 00:03:52,870
tests out we're trying to figure out a

00:03:51,640 --> 00:03:55,000
good way to do that because it's kind of

00:03:52,870 --> 00:03:58,299
fun to keep account of that number but

00:03:55,000 --> 00:04:01,630
we we like to show how much more testing

00:03:58,299 --> 00:04:04,060
we have than lines of code in the Lib

00:04:01,630 --> 00:04:07,840
directory of course it's easy to install

00:04:04,060 --> 00:04:10,120
and you can do it with this curl line or

00:04:07,840 --> 00:04:14,799
via whatever Sipan mechanism that you

00:04:10,120 --> 00:04:19,390
already like getting help mojolicious

00:04:14,799 --> 00:04:21,789
org or mojo on freenode

00:04:19,390 --> 00:04:22,949
we did recently move and so recently I

00:04:21,789 --> 00:04:27,750
guess from

00:04:22,949 --> 00:04:29,490
I received a pearl or two to freenode

00:04:27,750 --> 00:04:30,780
nothing against I receive girl that

00:04:29,490 --> 00:04:32,930
ordered we just wanted to increase our

00:04:30,780 --> 00:04:36,090
visibility outside of the pearl sphere

00:04:32,930 --> 00:04:39,780
speaking of which I've got a pause for

00:04:36,090 --> 00:04:42,810
just a second for an scheduled note here

00:04:39,780 --> 00:04:45,780
and just say the Mojo channel is very

00:04:42,810 --> 00:04:47,400
excited about the pearl 7 announcement

00:04:45,780 --> 00:04:51,900
and we will definitely be on board with

00:04:47,400 --> 00:04:54,180
that so we are very excited to play

00:04:51,900 --> 00:05:00,870
around with a new work better run time

00:04:54,180 --> 00:05:03,270
for ourselves the mojo toolkit so I'm

00:05:00,870 --> 00:05:04,680
gonna have a bit of a theme here and

00:05:03,270 --> 00:05:09,389
decided on it kind of late but I think

00:05:04,680 --> 00:05:13,770
it works so we gotta find some droids we

00:05:09,389 --> 00:05:18,629
have mojo Dom which lets you find and

00:05:13,770 --> 00:05:21,810
manipulate HTML or XML content using

00:05:18,629 --> 00:05:24,539
css3 and even some CSS for selectors

00:05:21,810 --> 00:05:29,009
we've back ported a few things we really

00:05:24,539 --> 00:05:31,020
like from the CSS force back I'm Joe

00:05:29,009 --> 00:05:33,120
Jason we have a built-in jsonparser it's

00:05:31,020 --> 00:05:37,949
pure per elements I think the fastest

00:05:33,120 --> 00:05:39,599
pure Perl jsonparser we do have

00:05:37,949 --> 00:05:41,099
integrations that if you have cPanel

00:05:39,599 --> 00:05:44,839
Jason access installed

00:05:41,099 --> 00:05:48,740
I didn't will use those and we have

00:05:44,839 --> 00:05:51,539
Jason pointers which are kind of like

00:05:48,740 --> 00:05:53,969
CSS selectors for Jason it just lets you

00:05:51,539 --> 00:05:58,259
dive into data easily you'll see those a

00:05:53,969 --> 00:06:01,169
little bit in this talk - and we have

00:05:58,259 --> 00:06:05,009
mojo URL lets you inspect and manipulate

00:06:01,169 --> 00:06:06,690
urls as an object there's lots of stuff

00:06:05,009 --> 00:06:09,830
involved in it but at least a few of

00:06:06,690 --> 00:06:12,719
those are mojo path and mojo parameters

00:06:09,830 --> 00:06:19,259
which operate on the path and the query

00:06:12,719 --> 00:06:22,620
elements of the URL object we have mojo

00:06:19,259 --> 00:06:26,099
user agent which is a blocking and non

00:06:22,620 --> 00:06:27,779
blocking user agent a lot of people do

00:06:26,099 --> 00:06:29,069
you just use it for the blocking stuff

00:06:27,779 --> 00:06:31,020
but it actually has great non-blocking

00:06:29,069 --> 00:06:33,899
interaction obviously given as part of

00:06:31,020 --> 00:06:35,639
our toolkit has WebSockets as a

00:06:33,899 --> 00:06:38,819
first-class citizen though won't really

00:06:35,639 --> 00:06:40,169
do much WebSockets in this talk and it's

00:06:38,819 --> 00:06:42,479
really well integrated with the other

00:06:40,169 --> 00:06:47,629
mojo pieces that I've shown above and

00:06:42,479 --> 00:06:50,370
some that I haven't shown we have

00:06:47,629 --> 00:06:53,699
testimonial starts a real server

00:06:50,370 --> 00:06:55,919
unlike the catalyst tests or test runner

00:06:53,699 --> 00:06:58,259
which ran a sort of a mock server

00:06:55,919 --> 00:07:01,409
because of mojos real time interactions

00:06:58,259 --> 00:07:03,779
it was deemed a better idea to start a

00:07:01,409 --> 00:07:05,699
real local server but because

00:07:03,779 --> 00:07:08,120
mojolicious has a local server built

00:07:05,699 --> 00:07:11,009
right in it was really easy to do that

00:07:08,120 --> 00:07:13,770
the test object contains one of those

00:07:11,009 --> 00:07:16,259
user agents we just talked about has

00:07:13,770 --> 00:07:19,169
lots of test methods there's a type of

00:07:16,259 --> 00:07:22,949
there I just see it has lots of test

00:07:19,169 --> 00:07:24,210
methods included in it it has a lot of

00:07:22,949 --> 00:07:27,360
format detection that we'll talk about

00:07:24,210 --> 00:07:30,529
and of course it can also test

00:07:27,360 --> 00:07:33,169
WebSockets having that for completeness

00:07:30,529 --> 00:07:37,770
and some of the non blocking bits

00:07:33,169 --> 00:07:39,300
mojolicious is deeply non-blocking even

00:07:37,770 --> 00:07:41,669
the blocking requests actually under the

00:07:39,300 --> 00:07:44,360
hood do non blocking stuff that you

00:07:41,669 --> 00:07:47,520
don't see it's based on mojo isle loop

00:07:44,360 --> 00:07:49,199
which s pluggable mojo reactor classes

00:07:47,520 --> 00:07:52,710
for all different loops you can find on

00:07:49,199 --> 00:07:57,330
C you can couple years ago we'd find the

00:07:52,710 --> 00:07:59,819
added mojo promise which lets you use a

00:07:57,330 --> 00:08:02,729
promise style programming rather than

00:07:59,819 --> 00:08:04,589
the old callbacks I was probably the

00:08:02,729 --> 00:08:06,810
last one to get pulled along kicking and

00:08:04,589 --> 00:08:10,439
screaming two promises from callbacks

00:08:06,810 --> 00:08:13,219
but I did it because promised that we've

00:08:10,439 --> 00:08:15,689
now delivered on of async await which

00:08:13,219 --> 00:08:19,580
promises with async await are just

00:08:15,689 --> 00:08:21,539
magical and you'll see that they are on

00:08:19,580 --> 00:08:23,939
own of course it comes with a web

00:08:21,539 --> 00:08:26,219
framework so you get mojolicious

00:08:23,939 --> 00:08:28,909
and you know just mojolicious light

00:08:26,219 --> 00:08:31,949
which is DSL for mojolicious

00:08:28,909 --> 00:08:33,959
I've given the previous talk if light

00:08:31,949 --> 00:08:35,579
versus full apps confuse you I have an

00:08:33,959 --> 00:08:37,800
app you can look for called mojolicious

00:08:35,579 --> 00:08:39,329
gardening I should probably put a link

00:08:37,800 --> 00:08:41,760
here but they really aren't very

00:08:39,329 --> 00:08:43,880
different don't let the light app scare

00:08:41,760 --> 00:08:43,880
you

00:08:45,380 --> 00:08:52,920
well we're starting

00:08:47,160 --> 00:08:54,629
out hello world so the simplest

00:08:52,920 --> 00:08:58,709
malicious application it's a light

00:08:54,629 --> 00:09:00,569
application and it handles the slash

00:08:58,709 --> 00:09:03,569
route and it renders the text hello

00:09:00,569 --> 00:09:07,079
world and the last line is just needed

00:09:03,569 --> 00:09:11,310
for a light app to start a server or to

00:09:07,079 --> 00:09:12,720
start the application simply say and of

00:09:11,310 --> 00:09:15,889
course I want to show you that it has

00:09:12,720 --> 00:09:19,860
tests because testing is very important

00:09:15,889 --> 00:09:24,600
you know the test mojo thing is right

00:09:19,860 --> 00:09:28,259
there for you we import mojo base strict

00:09:24,600 --> 00:09:30,829
to get strict in warnings and things we

00:09:28,259 --> 00:09:35,250
import test more in test mojo to get my

00:09:30,829 --> 00:09:37,500
tester we create an instance of tests no

00:09:35,250 --> 00:09:41,550
Joe where we just sort of load the

00:09:37,500 --> 00:09:45,149
application all of the applications in

00:09:41,550 --> 00:09:49,639
this talk I show you the path down here

00:09:45,149 --> 00:09:52,319
and I just made them easily that each

00:09:49,639 --> 00:09:56,459
reference the app PL in their own

00:09:52,319 --> 00:09:59,069
directory all that architecture aside

00:09:56,459 --> 00:10:03,029
this is the actual test we asked the

00:09:59,069 --> 00:10:05,899
tester to get the slash route and it

00:10:03,029 --> 00:10:09,300
tests that it successfully got something

00:10:05,899 --> 00:10:12,829
we get tests that the status is 200 and

00:10:09,300 --> 00:10:12,829
we test that the content is hello world

00:10:12,920 --> 00:10:17,550
now what actually happened there

00:10:15,110 --> 00:10:19,829
what you saw was that we had text

00:10:17,550 --> 00:10:23,370
encoded with utf-8 that was what that

00:10:19,829 --> 00:10:26,279
text key word was the text keyword does

00:10:23,370 --> 00:10:29,459
not mean that the content type is text

00:10:26,279 --> 00:10:33,740
like text plain the default content type

00:10:29,459 --> 00:10:35,790
is text HTML so probably the better

00:10:33,740 --> 00:10:37,769
smallest app that you should grade is

00:10:35,790 --> 00:10:40,139
this because if you're rendering just

00:10:37,769 --> 00:10:45,750
text you should also have a content type

00:10:40,139 --> 00:10:51,180
of text plane and since the text keyword

00:10:45,750 --> 00:10:55,230
renders utf-8 encoding let's say hello

00:10:51,180 --> 00:10:57,320
globe not hello world and have a format

00:10:55,230 --> 00:11:03,180
of

00:10:57,320 --> 00:11:05,100
of text and we can see those updates in

00:11:03,180 --> 00:11:07,320
our test file we can test that we

00:11:05,100 --> 00:11:09,570
actually get a content type like text

00:11:07,320 --> 00:11:11,699
plane you use tonton type like a lot of

00:11:09,570 --> 00:11:13,769
times because there's usually a car set

00:11:11,699 --> 00:11:16,220
appended to that and you know nobody

00:11:13,769 --> 00:11:20,810
really cares about that and very much

00:11:16,220 --> 00:11:25,410
so and then if the content is and

00:11:20,810 --> 00:11:28,740
obviously the content has changed there

00:11:25,410 --> 00:11:30,899
but we can just use the utf-8 in there

00:11:28,740 --> 00:11:34,699
as well because mojo base - trick also

00:11:30,899 --> 00:11:34,699
enables new CFA in all your files

00:11:35,300 --> 00:11:43,589
let's meet some new friends a nontrivial

00:11:40,380 --> 00:11:47,459
app or a pretty small app but still not

00:11:43,589 --> 00:11:52,709
just that that absolutely trivial app is

00:11:47,459 --> 00:11:54,750
a hello user app so because we're gonna

00:11:52,709 --> 00:11:57,360
have a controller I like to immediately

00:11:54,750 --> 00:12:00,079
go to use mojolicious light - signatures

00:11:57,360 --> 00:12:04,230
that enables the experimental signatures

00:12:00,079 --> 00:12:08,610
and maybe that'll go away 4:07 that'll

00:12:04,230 --> 00:12:12,019
be exciting this line does a lot of work

00:12:08,610 --> 00:12:15,060
it says we're going to handle the slash

00:12:12,019 --> 00:12:17,699
user route where user is anything new

00:12:15,060 --> 00:12:19,589
passing that hash reference there gives

00:12:17,699 --> 00:12:21,959
it a default value so if you don't give

00:12:19,589 --> 00:12:26,639
me a user I will assume you meant Club

00:12:21,959 --> 00:12:30,240
and we have the controller as the

00:12:26,639 --> 00:12:32,519
argument we're gonna pull that user out

00:12:30,240 --> 00:12:34,079
of the stash now the stash is just an

00:12:32,519 --> 00:12:36,779
extra hash reference that's passed

00:12:34,079 --> 00:12:39,029
around with the request it's uh you know

00:12:36,779 --> 00:12:40,350
it's mostly there for your scratch use

00:12:39,029 --> 00:12:44,399
though some of the keys do end up

00:12:40,350 --> 00:12:46,709
meaning things and we're going to render

00:12:44,399 --> 00:12:54,420
hello user where you just interpolate

00:12:46,709 --> 00:12:58,589
that in in our tests we have obviously

00:12:54,420 --> 00:13:00,690
the text plane as before and in this

00:12:58,589 --> 00:13:06,529
case we're going to check hello globe

00:13:00,690 --> 00:13:06,529
and also hello greet oh by the way

00:13:07,029 --> 00:13:17,860
Han shot first can we do any other

00:13:12,079 --> 00:13:22,940
formats well let's keep trying pings huh

00:13:17,860 --> 00:13:24,260
so we have Jason handling we're the only

00:13:22,940 --> 00:13:26,240
thing that's really changed here is

00:13:24,260 --> 00:13:29,930
rather than rendering text were

00:13:26,240 --> 00:13:31,760
rendering Jason you use the Jason key to

00:13:29,930 --> 00:13:33,829
render and who can pass it a data

00:13:31,760 --> 00:13:35,389
structure that it'll serialize you'll

00:13:33,829 --> 00:13:37,610
notice I didn't actually have to put the

00:13:35,389 --> 00:13:39,709
format here that's because while the

00:13:37,610 --> 00:13:42,440
text rendering was sort of ambiguous for

00:13:39,709 --> 00:13:44,720
what format it was wanting Jason even

00:13:42,440 --> 00:13:46,490
though it is also a text format you

00:13:44,720 --> 00:13:48,680
would never say you want to render Jason

00:13:46,490 --> 00:13:51,970
but render it as some other content type

00:13:48,680 --> 00:13:56,180
so the content type is handled for you

00:13:51,970 --> 00:14:01,550
and we can do the same kind of tests as

00:13:56,180 --> 00:14:03,829
we did before one thing you will and as

00:14:01,550 --> 00:14:07,010
I said you have the content tape set for

00:14:03,829 --> 00:14:08,779
you there are lots of Jason tests but

00:14:07,010 --> 00:14:12,110
let me just first mention that you can

00:14:08,779 --> 00:14:13,699
test the entire object or you can use

00:14:12,110 --> 00:14:16,970
those Jason pointers as I mentioned

00:14:13,699 --> 00:14:19,370
before to test subsets of the data now

00:14:16,970 --> 00:14:23,209
in this case we only rendered one key so

00:14:19,370 --> 00:14:24,769
it wasn't all that different but you can

00:14:23,209 --> 00:14:26,300
imagine if you had a big object and you

00:14:24,769 --> 00:14:29,949
really only cared about a few values

00:14:26,300 --> 00:14:29,949
this might be an easier way to test it

00:14:32,290 --> 00:14:38,240
well let's try some more things

00:14:36,279 --> 00:14:42,500
templates because when you're rendering

00:14:38,240 --> 00:14:46,790
HTML you don't want to do that again a

00:14:42,500 --> 00:14:48,230
very similar controller this time we're

00:14:46,790 --> 00:14:49,490
just rendering the template you'll

00:14:48,230 --> 00:14:54,140
notice I didn't have to pull anything

00:14:49,490 --> 00:14:55,360
out of a stash because the stash is just

00:14:54,140 --> 00:14:57,800
[Music]

00:14:55,360 --> 00:15:05,899
the yellow is a little bit hard on that

00:14:57,800 --> 00:15:08,600
so the the the stash becomes variables

00:15:05,899 --> 00:15:11,019
inside of the template so that's the

00:15:08,600 --> 00:15:13,790
same value that was in the stash before

00:15:11,019 --> 00:15:16,130
just as a injected variable in your

00:15:13,790 --> 00:15:17,660
template one other thing I want to

00:15:16,130 --> 00:15:20,060
mention here because now we're using

00:15:17,660 --> 00:15:20,720
tagged data I don't actually have to

00:15:20,060 --> 00:15:22,939
include

00:15:20,720 --> 00:15:25,279
anything but the username inside of this

00:15:22,939 --> 00:15:29,589
tag so while our tests before had to

00:15:25,279 --> 00:15:29,589
include this awkward exclamation point

00:15:30,160 --> 00:15:42,800
we now can test without that and we do

00:15:36,470 --> 00:15:47,600
it by passing in a CSS selector a CSS

00:15:42,800 --> 00:15:53,240
selector says I want the div with the ID

00:15:47,600 --> 00:15:56,629
of greeting and the class the paragraph

00:15:53,240 --> 00:15:59,810
for the things that div wasn't it yes

00:15:56,629 --> 00:16:06,529
you did with the class of user so it's

00:15:59,810 --> 00:16:08,079
ID and class of user and again that all

00:16:06,529 --> 00:16:10,069
works as expected

00:16:08,079 --> 00:16:12,470
now I'm going to take this one step

00:16:10,069 --> 00:16:13,910
further which we won't actually use in

00:16:12,470 --> 00:16:16,750
the remainder of the application but

00:16:13,910 --> 00:16:16,750
because we've come this far

00:16:19,240 --> 00:16:25,240
content negotiation we have all these

00:16:22,310 --> 00:16:27,410
different ways you can render things but

00:16:25,240 --> 00:16:33,050
what if the user wants to be able to

00:16:27,410 --> 00:16:36,500
pick which thing they want so if the

00:16:33,050 --> 00:16:37,790
user asks for text we render text now

00:16:36,500 --> 00:16:39,649
you'll notice again I didn't have to

00:16:37,790 --> 00:16:41,809
include the format and that's because

00:16:39,649 --> 00:16:43,850
the user is already requested the format

00:16:41,809 --> 00:16:49,040
and because they requested it we already

00:16:43,850 --> 00:16:51,110
know how to reply they can render they

00:16:49,040 --> 00:16:52,939
can request Jason and it may look like I

00:16:51,110 --> 00:16:54,470
stuttered here where I called it Jason

00:16:52,939 --> 00:16:56,420
twice but that's because the key on the

00:16:54,470 --> 00:16:58,279
left is saying when they request Jason

00:16:56,420 --> 00:17:05,089
the key on the right is what I would

00:16:58,279 --> 00:17:08,390
pass to render and the HTML one was the

00:17:05,089 --> 00:17:11,990
same as before basically so now we can

00:17:08,390 --> 00:17:17,270
test all kinds of things like you know

00:17:11,990 --> 00:17:21,140
we get the original example and hTML is

00:17:17,270 --> 00:17:24,650
the default but if we asked for slash

00:17:21,140 --> 00:17:29,510
text we get the text version if we ask

00:17:24,650 --> 00:17:32,030
for slash Jason if the Jason version the

00:17:29,510 --> 00:17:35,900
user variation of this also works

00:17:32,030 --> 00:17:38,390
as you'd expect there are a few other

00:17:35,900 --> 00:17:40,280
ways you can negotiate the content you

00:17:38,390 --> 00:17:43,340
can send in an accept header of text

00:17:40,280 --> 00:17:45,080
plane for example or you know

00:17:43,340 --> 00:17:49,730
application Jason or what other other

00:17:45,080 --> 00:17:54,170
other values you'd like and you could

00:17:49,730 --> 00:18:00,140
even do a question format equals text so

00:17:54,170 --> 00:18:03,230
the format query parameter that's I mean

00:18:00,140 --> 00:18:08,510
I guess it's still useful I don't try to

00:18:03,230 --> 00:18:10,370
do that for things like api's but some

00:18:08,510 --> 00:18:11,780
some clients are a little more limited

00:18:10,370 --> 00:18:13,220
in the ways they can send things so

00:18:11,780 --> 00:18:17,030
perhaps that might be a little more

00:18:13,220 --> 00:18:22,460
useful for you oh come on it's not a

00:18:17,030 --> 00:18:25,760
trap all right let's build this bigger

00:18:22,460 --> 00:18:31,070
app now that we have sort of a basic

00:18:25,760 --> 00:18:33,350
building blocks let's set a goal of

00:18:31,070 --> 00:18:35,870
displaying some docs fetched from bed of

00:18:33,350 --> 00:18:38,510
Sipan medicean has a nice end point for

00:18:35,870 --> 00:18:42,230
us renters that replies back with

00:18:38,510 --> 00:18:46,520
documentation mmm I smell problems

00:18:42,230 --> 00:18:49,070
coming here's the simple application

00:18:46,520 --> 00:18:50,360
itself it was just a little bit too big

00:18:49,070 --> 00:18:52,370
to fit on the slides I hope you don't

00:18:50,360 --> 00:18:56,330
mind if I scroll just a hair I want you

00:18:52,370 --> 00:19:00,140
to see it in its entirety we do the

00:18:56,330 --> 00:19:02,060
import of mojolicious light well meant

00:19:00,140 --> 00:19:03,380
to drop this important so you don't get

00:19:02,060 --> 00:19:08,530
that till the next slide but I missed

00:19:03,380 --> 00:19:16,160
that we have a configuration parameter

00:19:08,530 --> 00:19:18,020
wherein we pass the API endpoint now you

00:19:16,160 --> 00:19:19,250
may say that's never going to change why

00:19:18,020 --> 00:19:23,330
do you want to have that in config

00:19:19,250 --> 00:19:25,820
you'll see that in a moment we also have

00:19:23,330 --> 00:19:27,380
a get doc helper so a helper is sort of

00:19:25,820 --> 00:19:30,100
a reusable bit of code that you can

00:19:27,380 --> 00:19:32,630
share with the rest of your application

00:19:30,100 --> 00:19:36,470
if this were a full app that would

00:19:32,630 --> 00:19:37,940
probably be a controller method but you

00:19:36,470 --> 00:19:40,760
know it's light app it's convenient to

00:19:37,940 --> 00:19:43,240
make it a helper helpers get past the

00:19:40,760 --> 00:19:48,560
controller and then

00:19:43,240 --> 00:19:53,390
much like a rallying action do in this

00:19:48,560 --> 00:19:56,930
case we pull the API out of API string

00:19:53,390 --> 00:20:01,820
out of a fake we're gonna just blindly

00:19:56,930 --> 00:20:05,240
strengthen cat the URL and we request

00:20:01,820 --> 00:20:07,730
that URL well delicious applications

00:20:05,240 --> 00:20:09,230
have a user agent attached to them so

00:20:07,730 --> 00:20:14,930
that's a handy way to just get a quick

00:20:09,230 --> 00:20:18,020
user agent object out and we take the

00:20:14,930 --> 00:20:20,540
results and the resulting text and we

00:20:18,020 --> 00:20:25,220
return it to the caller of the helper

00:20:20,540 --> 00:20:27,230
and then here is our controller it

00:20:25,220 --> 00:20:30,620
handles the slash back slash module

00:20:27,230 --> 00:20:36,410
route and it just calls that and renders

00:20:30,620 --> 00:20:38,210
it but we're mocking an external or

00:20:36,410 --> 00:20:43,760
we're using an external source so we

00:20:38,210 --> 00:20:45,410
probably want to mock it in our tests in

00:20:43,760 --> 00:20:48,310
this case we'll use another mojolicious

00:20:45,410 --> 00:20:50,210
application it's really handy for that

00:20:48,310 --> 00:20:53,630
because you can only have one light

00:20:50,210 --> 00:20:55,000
application in a particular process for

00:20:53,630 --> 00:20:57,200
reasons you don't need to care about

00:20:55,000 --> 00:21:02,150
it's actually really easy to just use a

00:20:57,200 --> 00:21:04,250
module issues full app right in line and

00:21:02,150 --> 00:21:07,730
we're just going to install one route

00:21:04,250 --> 00:21:09,890
onto it it'll handle deep pod slash my

00:21:07,730 --> 00:21:15,020
module route now remember this

00:21:09,890 --> 00:21:19,430
application is pretending to be met a

00:21:15,020 --> 00:21:22,190
seat man not our application we are

00:21:19,430 --> 00:21:25,700
going to reply with just enough data in

00:21:22,190 --> 00:21:28,340
the floor mat from medicean but we don't

00:21:25,700 --> 00:21:29,720
actually need it to be a full content

00:21:28,340 --> 00:21:36,710
block just enough for us to play around

00:21:29,720 --> 00:21:40,280
thing so how do we use this mock we are

00:21:36,710 --> 00:21:43,340
using the Mojo user agent under the hood

00:21:40,280 --> 00:21:45,710
of the tester and that user agent

00:21:43,340 --> 00:21:48,020
actually has a handy little server

00:21:45,710 --> 00:21:50,810
attached to it and that server is used

00:21:48,020 --> 00:21:52,280
if you ask for a relative URL rather

00:21:50,810 --> 00:21:55,820
than an absolute URL

00:21:52,280 --> 00:21:57,650
just a URL that starts with a slash and

00:21:55,820 --> 00:22:02,270
that server except some Oh delicious

00:21:57,650 --> 00:22:07,370
application so we can attach this mock

00:22:02,270 --> 00:22:09,080
app to the main apps user agent but we

00:22:07,370 --> 00:22:10,940
said before that you need it to be a

00:22:09,080 --> 00:22:13,880
relative URL to use that well we

00:22:10,940 --> 00:22:17,300
remember we set the letter C pen URL to

00:22:13,880 --> 00:22:21,190
be configurable and that means we can do

00:22:17,300 --> 00:22:25,520
a configure override in the test mojo

00:22:21,190 --> 00:22:28,760
object that new hash that I've passed in

00:22:25,520 --> 00:22:30,980
where API just points that slash is what

00:22:28,760 --> 00:22:34,060
the application attach to that tester

00:22:30,980 --> 00:22:36,650
will use because of that it has a

00:22:34,060 --> 00:22:38,660
relative URL and because of that it will

00:22:36,650 --> 00:22:40,880
use the mock that we install on the

00:22:38,660 --> 00:22:42,370
application this is a really handy

00:22:40,880 --> 00:22:45,500
pattern you can use it all the time

00:22:42,370 --> 00:22:46,940
you can use several of these if you want

00:22:45,500 --> 00:22:49,180
you'd have to be a little more careful

00:22:46,940 --> 00:22:51,980
about you know you can't attach to just

00:22:49,180 --> 00:22:54,620
user agent or the applications user

00:22:51,980 --> 00:22:57,140
agent but I have used this for mocking

00:22:54,620 --> 00:23:02,900
several services at once and it really

00:22:57,140 --> 00:23:04,970
is just a joy so testing that simple app

00:23:02,900 --> 00:23:11,390
you've already seen most of it let's

00:23:04,970 --> 00:23:13,190
just scroll through it a little bit but

00:23:11,390 --> 00:23:17,330
it basically comes down to the same idea

00:23:13,190 --> 00:23:20,150
we request the doc by module route from

00:23:17,330 --> 00:23:22,700
our application internally it requests

00:23:20,150 --> 00:23:24,770
the pod my module from our fake medicean

00:23:22,700 --> 00:23:33,290
then it gets back the data as we'd

00:23:24,770 --> 00:23:41,390
expect but some of the content in there

00:23:33,290 --> 00:23:47,540
is not where we want to go so let's work

00:23:41,390 --> 00:23:50,750
on some URL manipulation we have a motor

00:23:47,540 --> 00:23:52,850
URL object and I'm gonna build a helper

00:23:50,750 --> 00:23:57,520
that returns me in module URL object

00:23:52,850 --> 00:23:59,720
built from that API string in the config

00:23:57,520 --> 00:24:02,780
we then

00:23:59,720 --> 00:24:06,740
call that helper to get the URL object

00:24:02,780 --> 00:24:08,870
ignore get doc helper and one of the

00:24:06,740 --> 00:24:10,820
things that I really love about mojo URL

00:24:08,870 --> 00:24:14,210
is that you can use the path as an array

00:24:10,820 --> 00:24:17,500
reference so if you're doing lots of API

00:24:14,210 --> 00:24:20,810
manipulations you're calling deep routes

00:24:17,500 --> 00:24:24,040
URL you can just push the content onto

00:24:20,810 --> 00:24:27,920
it and get a new URL out of him

00:24:24,040 --> 00:24:30,140
rest of the method is the same I showed

00:24:27,920 --> 00:24:34,040
you that because what I actually want to

00:24:30,140 --> 00:24:35,630
do is fix those URLs in the response

00:24:34,040 --> 00:24:40,130
because any URLs that came back from

00:24:35,630 --> 00:24:44,530
about a sea pen point at medicine so

00:24:40,130 --> 00:24:47,930
let's use mojo DOM and Mojo URL

00:24:44,530 --> 00:24:51,590
transform that HTML now we never use reg

00:24:47,930 --> 00:24:56,720
ex to manipulate our HTML because mojo

00:24:51,590 --> 00:24:59,060
Dom is a more elegant weapon one more

00:24:56,720 --> 00:25:04,250
change I'm going to make to that get doc

00:24:59,060 --> 00:25:06,500
is to return the results Dom object so

00:25:04,250 --> 00:25:10,790
there's a handy Dom method attached to

00:25:06,500 --> 00:25:16,060
the result object and that gives you a

00:25:10,790 --> 00:25:16,060
dumb version of the first HTML result

00:25:16,510 --> 00:25:22,430
and we will just call a munge links

00:25:20,960 --> 00:25:25,400
helper that I'm going to show you in a

00:25:22,430 --> 00:25:30,080
second on that doc and we'll get back a

00:25:25,400 --> 00:25:31,850
new doc do that now one of the change

00:25:30,080 --> 00:25:34,580
I'm making here I'm gonna actually give

00:25:31,850 --> 00:25:37,520
that route a name so the last object

00:25:34,580 --> 00:25:40,640
last parameter you can pass to a router

00:25:37,520 --> 00:25:44,030
object names the route and in this case

00:25:40,640 --> 00:25:47,410
I'm doing doc that will mean I can refer

00:25:44,030 --> 00:25:47,410
to it by that name later

00:25:49,820 --> 00:25:56,840
we take that Dom object that we just got

00:25:51,980 --> 00:26:02,330
we call find on it and we pass it a

00:25:56,840 --> 00:26:04,430
rather complex well or just say long CSS

00:26:02,330 --> 00:26:08,090
selector that says give me all of the

00:26:04,430 --> 00:26:14,390
anchor links that have a page graph that

00:26:08,090 --> 00:26:16,910
starts with medicean now I probably

00:26:14,390 --> 00:26:20,710
could have built that out of emoji or l2

00:26:16,910 --> 00:26:22,580
I was really saying that this was a

00:26:20,710 --> 00:26:23,990
pluggable application but it really

00:26:22,580 --> 00:26:26,540
isn't a pluggable application there's

00:26:23,990 --> 00:26:30,340
only one at Sipan so that was ok for

00:26:26,540 --> 00:26:34,220
this what I will do is take that href

00:26:30,340 --> 00:26:36,590
making mojo URL object out of it take

00:26:34,220 --> 00:26:38,780
the path parts out of it and we know

00:26:36,590 --> 00:26:41,630
that the last part is going to be the

00:26:38,780 --> 00:26:43,880
modulated references so if there are

00:26:41,630 --> 00:26:46,460
links to other modules we now know which

00:26:43,880 --> 00:26:49,970
module it's talking to now there are

00:26:46,460 --> 00:26:51,200
other URLs the medicine returns this is

00:26:49,970 --> 00:26:52,700
just a demonstration if you really

00:26:51,200 --> 00:26:54,560
wanted to do this you'd have to find a

00:26:52,700 --> 00:26:57,880
few other different types of URL it has

00:26:54,560 --> 00:27:01,280
but this is good enough to demonstrate

00:26:57,880 --> 00:27:03,770
now now that we have the module we can

00:27:01,280 --> 00:27:06,610
use the URL form method this lets us

00:27:03,770 --> 00:27:09,800
build a URL for a named route and

00:27:06,610 --> 00:27:12,140
because that named route takes a module

00:27:09,800 --> 00:27:13,640
parameter we pass it the name of the

00:27:12,140 --> 00:27:15,830
module or the name of the route which is

00:27:13,640 --> 00:27:18,590
docked and the module the pointing at

00:27:15,830 --> 00:27:19,910
and we put that back onto the href and

00:27:18,590 --> 00:27:24,410
when all that is done

00:27:19,910 --> 00:27:27,260
you return the Dom object and we can

00:27:24,410 --> 00:27:30,890
test that transformation by just

00:27:27,260 --> 00:27:36,740
throwing in another random module that

00:27:30,890 --> 00:27:38,480
we've linked to from our mock we can

00:27:36,740 --> 00:27:43,130
then test the response we get from our

00:27:38,480 --> 00:27:45,170
service and see that that we have a href

00:27:43,130 --> 00:27:50,330
that is exactly

00:27:45,170 --> 00:27:53,270
slash dot slash other mod which is the

00:27:50,330 --> 00:27:55,190
format that we need now we can test that

00:27:53,270 --> 00:27:57,730
there are not elements that point to

00:27:55,190 --> 00:27:57,730
Metis even

00:28:00,570 --> 00:28:04,810
well that was good but that was only one

00:28:02,800 --> 00:28:06,460
request and as I told you before one

00:28:04,810 --> 00:28:08,700
request really isn't that hard to make

00:28:06,460 --> 00:28:13,420
not blocking so let's add a few more

00:28:08,700 --> 00:28:15,250
bits and bobs from lettuce e pan we're

00:28:13,420 --> 00:28:16,840
going to add the distribution name for

00:28:15,250 --> 00:28:20,770
that module and we're going to add the

00:28:16,840 --> 00:29:14,730
number of plus plus by the way you know

00:28:20,770 --> 00:29:14,730
I probably should have shown you doc

00:29:16,080 --> 00:29:24,520
just to show you what it looks like you

00:29:21,910 --> 00:29:27,220
can see that our own links point to our

00:29:24,520 --> 00:29:37,900
own site so I could click that one we

00:29:27,220 --> 00:29:40,810
get welcome anyway adding that extra

00:29:37,900 --> 00:29:45,430
data is as simple as adding a few more

00:29:40,810 --> 00:29:47,020
methods and two of them get data and one

00:29:45,430 --> 00:29:54,100
of them attaches that data to our

00:29:47,020 --> 00:29:55,780
documentation get dist 4 module so every

00:29:54,100 --> 00:29:59,380
module has a distribution it comes from

00:29:55,780 --> 00:30:01,540
and much like the other one it's just a

00:29:59,380 --> 00:30:03,070
different end point on medicean however

00:30:01,540 --> 00:30:06,340
this one returns Jason so we're gonna

00:30:03,070 --> 00:30:08,470
use a jsonparser and just say all I care

00:30:06,340 --> 00:30:11,800
about is the distribution T on that

00:30:08,470 --> 00:30:13,330
object now to keep things a little bit

00:30:11,800 --> 00:30:15,550
tidy I'm going to show you how I'm gonna

00:30:13,330 --> 00:30:19,240
mock that I'm going to add a second

00:30:15,550 --> 00:30:22,540
route that handles module my module and

00:30:19,240 --> 00:30:27,480
we render Jason with just a distribution

00:30:22,540 --> 00:30:27,480
of my mods say they both come from

00:30:30,429 --> 00:30:38,409
we also want the favorite count for that

00:30:33,369 --> 00:30:45,669
distribution it's a slightly different

00:30:38,409 --> 00:30:47,619
query the query has both a slash

00:30:45,669 --> 00:30:50,769
favorite slash underscore search at the

00:30:47,619 --> 00:30:55,570
end and a query parameter which is

00:30:50,769 --> 00:30:57,789
distribution colon dist but because we

00:30:55,570 --> 00:30:59,440
have moved a URL and we've already tied

00:30:57,789 --> 00:31:02,200
that together that's also really easy to

00:30:59,440 --> 00:31:07,179
use and get that results and we ask for

00:31:02,200 --> 00:31:12,730
the pics key and its total key to get

00:31:07,179 --> 00:31:14,110
the number of plus plus now mocking it

00:31:12,730 --> 00:31:15,820
also is a little bit interesting now

00:31:14,110 --> 00:31:19,090
you've noticed in our previous mocks we

00:31:15,820 --> 00:31:22,720
ensure that we are handling only the

00:31:19,090 --> 00:31:25,019
expected data that shows us that our

00:31:22,720 --> 00:31:28,240
mock is being used as we expect it to

00:31:25,019 --> 00:31:32,110
but the query parameter is not something

00:31:28,240 --> 00:31:35,139
we can route on easily so what i'm doing

00:31:32,110 --> 00:31:37,659
here is having it reply not found unless

00:31:35,139 --> 00:31:40,990
the query parameter is what we expect it

00:31:37,659 --> 00:31:43,240
to be and then assuming it is we

00:31:40,990 --> 00:31:44,980
rendered a data structure that is

00:31:43,240 --> 00:31:53,440
compatible with what we expect from a

00:31:44,980 --> 00:31:56,730
CPM this case 123 plus plus and we can

00:31:53,440 --> 00:32:01,299
have a helper like inject dist

00:31:56,730 --> 00:32:03,129
now this helper calls render but we

00:32:01,299 --> 00:32:05,619
don't want to render to the client we

00:32:03,129 --> 00:32:08,440
want to render it into a string so we'll

00:32:05,619 --> 00:32:09,929
go render to string method and we're

00:32:08,440 --> 00:32:13,960
calling the template dist

00:32:09,929 --> 00:32:15,639
we pass it dist and we pass it faves now

00:32:13,960 --> 00:32:17,080
remember before we had things in the

00:32:15,639 --> 00:32:19,629
stash so we didn't have to pass in

00:32:17,080 --> 00:32:21,669
arguments but these values are not in

00:32:19,629 --> 00:32:24,210
the stash so we have to pass them in has

00:32:21,669 --> 00:32:27,340
named parameters they still get used as

00:32:24,210 --> 00:32:29,649
stashed parameters while we written that

00:32:27,340 --> 00:32:34,840
template but they are not in includable

00:32:29,649 --> 00:32:37,269
requests - that's rendering but now we

00:32:34,840 --> 00:32:41,740
have to get that document back into our

00:32:37,269 --> 00:32:43,900
final response and I've chosen to say

00:32:41,740 --> 00:32:45,820
why don't we put it in after the

00:32:43,900 --> 00:32:51,340
because people are expecting to get the

00:32:45,820 --> 00:32:53,050
named content back but they probably

00:32:51,340 --> 00:32:56,320
won't care if we add an extra little

00:32:53,050 --> 00:32:59,860
header in there so we're going to find

00:32:56,320 --> 00:33:02,560
the h1 named name and then we're going

00:32:59,860 --> 00:33:05,200
to find the paragraphs immediately after

00:33:02,560 --> 00:33:08,200
it and then after that we will append

00:33:05,200 --> 00:33:11,400
the HTML we generated and return that

00:33:08,200 --> 00:33:13,840
Dom so here's the full application

00:33:11,400 --> 00:33:15,580
you've seen all the pieces this is just

00:33:13,840 --> 00:33:18,610
strolling through to show you how it

00:33:15,580 --> 00:33:21,610
goes together now as I said this is a

00:33:18,610 --> 00:33:23,470
non-trivial application so it's a little

00:33:21,610 --> 00:33:26,730
bit of code to look at again if you want

00:33:23,470 --> 00:33:33,120
to look at it in more detail go to the

00:33:26,730 --> 00:33:33,120
repository called this one locking act I

00:33:33,810 --> 00:33:43,350
want to show you what that looks like

00:33:48,790 --> 00:33:52,819
[Music]

00:34:00,500 --> 00:34:04,870
[Music]

00:34:01,740 --> 00:34:08,020
well tiny comes from the role tiny dist

00:34:04,870 --> 00:34:09,220
and it does 50 to only 52 plus plus I'm

00:34:08,020 --> 00:34:19,480
going to see that you guys need to go

00:34:09,220 --> 00:34:22,540
fix that go and plus plus real tiny now

00:34:19,480 --> 00:34:25,720
the full test you've already seen the

00:34:22,540 --> 00:34:29,580
mocks for this so you can expect that

00:34:25,720 --> 00:34:32,740
the test basically is the same as before

00:34:29,580 --> 00:34:36,600
we have a slightly more complex test

00:34:32,740 --> 00:34:44,169
because now we want to ensure that the

00:34:36,600 --> 00:34:47,800
there is a tag at h1 name and then the P

00:34:44,169 --> 00:34:50,800
after that and then V H ref after

00:34:47,800 --> 00:34:53,050
Thursday than the h1 after that we'll

00:34:50,800 --> 00:34:55,300
call distribution and key and we check

00:34:53,050 --> 00:34:57,400
that it contains the content we expected

00:34:55,300 --> 00:34:58,630
now that's a pretty complex yes

00:34:57,400 --> 00:35:00,070
query and you can imagine if you're

00:34:58,630 --> 00:35:02,620
trying to write x for that you would

00:35:00,070 --> 00:35:06,490
have a really hard time but with CSS

00:35:02,620 --> 00:35:14,800
selectors once we learn those it's

00:35:06,490 --> 00:35:19,690
really easy but now it's time we have to

00:35:14,800 --> 00:35:27,940
make it a sync and I know for some of

00:35:19,690 --> 00:35:30,940
you this is not a pretty concept so

00:35:27,940 --> 00:35:34,120
there are three basic mechanisms for

00:35:30,940 --> 00:35:36,570
pacing at least in mojolicious but

00:35:34,120 --> 00:35:39,130
they're the three basic one hardware

00:35:36,570 --> 00:35:42,970
callbacks you can still do callbacks

00:35:39,130 --> 00:35:45,280
they're old-school and they're not

00:35:42,970 --> 00:35:46,600
really worth it anymore I was one of the

00:35:45,280 --> 00:35:47,770
last people holding onto it if I'm

00:35:46,600 --> 00:35:49,420
telling you you don't want a good

00:35:47,770 --> 00:35:54,070
callbacks anymore you don't want to do

00:35:49,420 --> 00:35:58,240
conferencing promises promises were a

00:35:54,070 --> 00:36:01,090
huge upgrade to handling callbacks a

00:35:58,240 --> 00:36:02,710
promise is an object that represents the

00:36:01,090 --> 00:36:07,660
possible future actions that will happen

00:36:02,710 --> 00:36:11,470
after an asynchronous action happens the

00:36:07,660 --> 00:36:13,360
nice thing about this is there's a

00:36:11,470 --> 00:36:15,640
certain sort of inversion of control

00:36:13,360 --> 00:36:18,340
that happens where callbacks the caller

00:36:15,640 --> 00:36:21,550
that the function called was responsible

00:36:18,340 --> 00:36:24,220
for doing stuff with a promise you are

00:36:21,550 --> 00:36:28,000
responsible for attaching what else gets

00:36:24,220 --> 00:36:32,790
to happen and there's a there's a really

00:36:28,000 --> 00:36:35,560
good YouTube talk it's no jest focused

00:36:32,790 --> 00:36:36,880
but I if you really are interested in

00:36:35,560 --> 00:36:40,000
sort of the deeper internals of why

00:36:36,880 --> 00:36:42,960
promises are better go find from the

00:36:40,000 --> 00:36:42,960
mojolicious

00:36:43,260 --> 00:36:46,870
advent calendar a few years ago my

00:36:45,340 --> 00:36:48,850
talked about async await all right

00:36:46,870 --> 00:36:52,660
article about async await and find the

00:36:48,850 --> 00:36:54,550
link in there it's really great those

00:36:52,660 --> 00:36:57,190
promises are chainable those promises

00:36:54,550 --> 00:36:59,920
handle exceptions all in ways that are

00:36:57,190 --> 00:37:03,030
much better than callbacks but they're

00:36:59,920 --> 00:37:07,360
still really non-trivial

00:37:03,030 --> 00:37:09,130
and then we got async await now async

00:37:07,360 --> 00:37:11,130
await uses promises but it's so much

00:37:09,130 --> 00:37:13,369
more powerful

00:37:11,130 --> 00:37:15,200
in mojolicious we just recently added

00:37:13,369 --> 00:37:18,270
support for async/await

00:37:15,200 --> 00:37:22,980
it requires the module future

00:37:18,270 --> 00:37:26,280
async/await and I have to commend Leo

00:37:22,980 --> 00:37:28,410
nerd Paul Evans for working on this

00:37:26,280 --> 00:37:31,970
module and then for working with us to

00:37:28,410 --> 00:37:34,380
help us get it integrated into delicious

00:37:31,970 --> 00:37:38,250
but now what we've got is really pretty

00:37:34,380 --> 00:37:40,680
seamless so what is async/await

00:37:38,250 --> 00:37:43,109
well there are two new keywords one of

00:37:40,680 --> 00:37:46,580
them is a weight and the await keyword

00:37:43,109 --> 00:37:50,119
takes a promise and it does some really

00:37:46,580 --> 00:37:53,220
crazy magic it suspends the interpreter

00:37:50,119 --> 00:37:58,260
until the promise resolves in which case

00:37:53,220 --> 00:37:59,880
it returns the result yet another tape

00:37:58,260 --> 00:38:03,869
over your resident returns the result

00:37:59,880 --> 00:38:07,470
and if the promise rejects it throws the

00:38:03,869 --> 00:38:09,570
error so you can just call a function

00:38:07,470 --> 00:38:13,170
that returns a promise and call the

00:38:09,570 --> 00:38:15,480
weight on it and get the resulting value

00:38:13,170 --> 00:38:18,720
out of the promise not the promise

00:38:15,480 --> 00:38:20,160
itself and you'll notice there's no

00:38:18,720 --> 00:38:25,230
callback at all

00:38:20,160 --> 00:38:27,300
we just got asynchronous code that

00:38:25,230 --> 00:38:28,710
behaves like synchronous code and that's

00:38:27,300 --> 00:38:32,240
been sort of the thing that everyone's

00:38:28,710 --> 00:38:32,240
been looking for all this time

00:38:38,810 --> 00:38:46,380
there is one slight catch which is you

00:38:42,030 --> 00:38:49,410
can only call a weight from inside of an

00:38:46,380 --> 00:38:51,780
async function oh that I should have

00:38:49,410 --> 00:38:54,210
said before while it's suspended the

00:38:51,780 --> 00:38:58,109
interpreter actually goes and does other

00:38:54,210 --> 00:39:00,599
things so it is non blocking even though

00:38:58,109 --> 00:39:02,430
that particular bit appears to be

00:39:00,599 --> 00:39:03,960
blocking that should be obvious I guess

00:39:02,430 --> 00:39:06,349
given that I'm covering it in the async

00:39:03,960 --> 00:39:10,500
section but I should say it out loud

00:39:06,349 --> 00:39:13,080
anyway inside of an async sub you can

00:39:10,500 --> 00:39:15,750
call the weight method but an

00:39:13,080 --> 00:39:17,609
interesting thing about async subs is

00:39:15,750 --> 00:39:19,830
they always return promises themselves

00:39:17,609 --> 00:39:22,250
so this sort of system chains up on

00:39:19,830 --> 00:39:22,250
itself

00:39:27,840 --> 00:39:33,820
and all of a sudden a sink is easy you

00:39:31,300 --> 00:39:36,300
can follow a pretty simple recipe you

00:39:33,820 --> 00:39:38,320
await anything that returns a promise

00:39:36,300 --> 00:39:40,240
especially a weight anything that is

00:39:38,320 --> 00:39:42,460
marked as a sink because anything marked

00:39:40,240 --> 00:39:45,670
as a sink will also return a promise and

00:39:42,460 --> 00:39:48,780
then mark any function that you want to

00:39:45,670 --> 00:39:50,500
use the away keyword in as a sink and

00:39:48,780 --> 00:39:52,570
that's really it

00:39:50,500 --> 00:39:55,090
at least animaux delicious app there's a

00:39:52,570 --> 00:39:56,590
little bit more stuff you have to do to

00:39:55,090 --> 00:39:58,150
actually set this up if you're going to

00:39:56,590 --> 00:40:01,210
do it in like a script or something it's

00:39:58,150 --> 00:40:02,650
totally possible but because the mo

00:40:01,210 --> 00:40:04,030
delicious application has it already

00:40:02,650 --> 00:40:06,580
built in you don't even have to like

00:40:04,030 --> 00:40:09,780
doing either setup you just mark some

00:40:06,580 --> 00:40:12,850
subs as a sink so how do we use it we

00:40:09,780 --> 00:40:16,240
call the import of mojolicious light

00:40:12,850 --> 00:40:22,690
this time with an additional flag of -

00:40:16,240 --> 00:40:25,210
async/await and by convention in mo

00:40:22,690 --> 00:40:28,060
delicious any method that returns a

00:40:25,210 --> 00:40:29,920
promise we call underscore peak it's

00:40:28,060 --> 00:40:33,850
just a handy visual representation for

00:40:29,920 --> 00:40:37,360
us to be able to see that promises are

00:40:33,850 --> 00:40:39,430
expected rather than values so you've

00:40:37,360 --> 00:40:43,510
changed get doc to get doc underscore

00:40:39,430 --> 00:40:47,170
Pete we've marked the sub async and then

00:40:43,510 --> 00:40:52,690
we also await a call to do user agents

00:40:47,170 --> 00:40:54,640
get P method but there's no callbacks

00:40:52,690 --> 00:40:57,160
there's no callback hell there's no

00:40:54,640 --> 00:41:00,340
arrow code there's no you know confusion

00:40:57,160 --> 00:41:01,810
of where it what's going on and we're

00:41:00,340 --> 00:41:13,320
just gonna do the same for get dissed

00:41:01,810 --> 00:41:17,350
and the same for get favorites we call

00:41:13,320 --> 00:41:19,090
each of those in turn with a weight now

00:41:17,350 --> 00:41:20,500
if you really wanted to optimize in

00:41:19,090 --> 00:41:22,180
theory you could be giving the

00:41:20,500 --> 00:41:24,310
documentation at the same time as we're

00:41:22,180 --> 00:41:26,980
getting the distribution in the

00:41:24,310 --> 00:41:32,500
favorites and that's not all that much

00:41:26,980 --> 00:41:34,150
harder but you don't need to since your

00:41:32,500 --> 00:41:34,540
non-blocking all you're really saying is

00:41:34,150 --> 00:41:36,100
it's going

00:41:34,540 --> 00:41:37,510
take just a hair longer freed your

00:41:36,100 --> 00:41:42,670
clients get the response but it doesn't

00:41:37,510 --> 00:41:45,940
block in this one here and so now your

00:41:42,670 --> 00:41:50,500
full application looks almost exactly

00:41:45,940 --> 00:41:54,760
like it did before I don't see a

00:41:50,500 --> 00:42:09,580
callback among them and gloriously the

00:41:54,760 --> 00:42:12,400
tests are completely unchanged so are

00:42:09,580 --> 00:42:14,740
there any questions now you can all go

00:42:12,400 --> 00:42:16,860
make a sync apps without any problem at

00:42:14,740 --> 00:42:16,860
all

00:42:20,620 --> 00:42:35,950
Todd are you oh here we got raised hands

00:42:24,300 --> 00:42:40,450
yeah so let's go with Mike first hello

00:42:35,950 --> 00:42:43,890
hello you hear me yes alright so I've

00:42:40,450 --> 00:42:45,190
got an app that I'm using the

00:42:43,890 --> 00:42:48,460
sub-process

00:42:45,190 --> 00:42:53,320
IO Luke 4 and I'm using run Pete

00:42:48,460 --> 00:42:55,600
actually fork off that that sub process

00:42:53,320 --> 00:43:00,310
I'm very curious about the interplay

00:42:55,600 --> 00:43:04,590
between the IO loop the sub processes

00:43:00,310 --> 00:43:07,960
that are actually spawned off and

00:43:04,590 --> 00:43:11,710
promises but I'm also wondering what the

00:43:07,960 --> 00:43:14,290
role of like more bow or hypnotoad does

00:43:11,710 --> 00:43:15,760
when it comes to things like that

00:43:14,290 --> 00:43:18,640
because I've noticed every once in a

00:43:15,760 --> 00:43:20,380
while I get like four different

00:43:18,640 --> 00:43:21,760
processes that are running that I wasn't

00:43:20,380 --> 00:43:24,460
expecting to be running and I'm

00:43:21,760 --> 00:43:27,220
wondering like is the process model for

00:43:24,460 --> 00:43:29,530
some of that stuff impacted by hypnotoad

00:43:27,220 --> 00:43:33,880
or any of any of those other those

00:43:29,530 --> 00:43:36,870
runners is any of the other async weight

00:43:33,880 --> 00:43:39,430
or promise stuff also impacted by that

00:43:36,870 --> 00:43:42,040
yeah I know it's Brian not a very good

00:43:39,430 --> 00:43:44,560
way that's a no I get more or less what

00:43:42,040 --> 00:43:46,900
you're saying as far as I'm aware

00:43:44,560 --> 00:43:48,110
let me start laying back up and let's

00:43:46,900 --> 00:43:50,720
let's take it out of him

00:43:48,110 --> 00:43:54,020
for people who don't know hypnotoad is

00:43:50,720 --> 00:43:59,210
the pre forking web server that does

00:43:54,020 --> 00:44:02,780
does hot swappable server so like you

00:43:59,210 --> 00:44:05,420
can do a hot restart if we're just

00:44:02,780 --> 00:44:08,630
talking about a single process web

00:44:05,420 --> 00:44:10,460
server as far as I'm aware there

00:44:08,630 --> 00:44:15,790
shouldn't be any problem doing async

00:44:10,460 --> 00:44:23,300
await and the sub process underscore P

00:44:15,790 --> 00:44:24,920
that said sub process P is some really I

00:44:23,300 --> 00:44:26,780
shouldn't say magical code it's not

00:44:24,920 --> 00:44:30,500
magical but it's it does a lot of

00:44:26,780 --> 00:44:35,090
low-level system things and I wouldn't

00:44:30,500 --> 00:44:38,420
want to promise you that how would this

00:44:35,090 --> 00:44:41,030
any any bug that would exist in that

00:44:38,420 --> 00:44:43,790
would probably also exist in hypnotoad

00:44:41,030 --> 00:44:47,780
certainly imagine there would be any

00:44:43,790 --> 00:44:49,820
more bugs than would be you know if you

00:44:47,780 --> 00:44:53,690
use async await with it those they're

00:44:49,820 --> 00:44:57,520
very different subsystems Paul Evans

00:44:53,690 --> 00:44:57,520
would be better to ask about that but I

00:44:59,770 --> 00:45:06,140
problems if you're getting processes you

00:45:03,380 --> 00:45:07,850
don't expect once you hop into the Mojo

00:45:06,140 --> 00:45:10,460
channel and that's diagnosed because

00:45:07,850 --> 00:45:14,600
that it shouldn't be happening though

00:45:10,460 --> 00:45:18,080
it's not unheard of depending on when

00:45:14,600 --> 00:45:19,430
and where you're forking so let's we'd

00:45:18,080 --> 00:45:22,790
be happy to take a peek at it with you

00:45:19,430 --> 00:45:25,640
something you can show us okay yeah yeah

00:45:22,790 --> 00:45:26,990
the the async wait and promise step is

00:45:25,640 --> 00:45:30,320
really cool I've done a lot of stuff

00:45:26,990 --> 00:45:32,780
with JavaScript and this feels very much

00:45:30,320 --> 00:45:38,120
like what I already am familiar with

00:45:32,780 --> 00:45:41,990
there when I said that I was the last

00:45:38,120 --> 00:45:44,170
one hanging on to two callbacks it was

00:45:41,990 --> 00:45:47,000
actually seeing async await in

00:45:44,170 --> 00:45:51,200
JavaScript there was like oh no we got

00:45:47,000 --> 00:45:52,790
to have this so I was was banging the

00:45:51,200 --> 00:45:54,260
door down all the sudden four promises

00:45:52,790 --> 00:45:56,210
and for a single week because of

00:45:54,260 --> 00:45:57,880
JavaScript I wanted that for sure oh

00:45:56,210 --> 00:46:01,390
yeah

00:45:57,880 --> 00:46:01,390
thank you question

00:46:01,970 --> 00:46:06,180
you know I have a question

00:46:04,440 --> 00:46:10,109
it's a problems the same thing as a

00:46:06,180 --> 00:46:13,579
continuation no a continuation really is

00:46:10,109 --> 00:46:15,630
the callbacks that I've been saying

00:46:13,579 --> 00:46:18,510
intuition is the function which when you

00:46:15,630 --> 00:46:24,359
call it does the rest of the computation

00:46:18,510 --> 00:46:25,950
I mean from a from a most generic

00:46:24,359 --> 00:46:32,069
standpoint and I guess that that's

00:46:25,950 --> 00:46:34,920
probably the same thing but it's more of

00:46:32,069 --> 00:46:36,720
a matter of who's holding the closure

00:46:34,920 --> 00:46:40,079
the the code reference that's going to

00:46:36,720 --> 00:46:42,900
be called afterwards and typically you

00:46:40,079 --> 00:46:46,710
call continuation passing when you pass

00:46:42,900 --> 00:46:48,960
a callback into the function whereas the

00:46:46,710 --> 00:46:50,609
promises pattern is when the function

00:46:48,960 --> 00:46:52,829
that's going to be asynchronous returns

00:46:50,609 --> 00:46:55,829
to you an object that you attach things

00:46:52,829 --> 00:46:58,470
to it's it's it's about the control

00:46:55,829 --> 00:47:01,200
layer who has the control of what and in

00:46:58,470 --> 00:47:02,819
another sense it's also having a

00:47:01,200 --> 00:47:05,190
separate exception channel that is

00:47:02,819 --> 00:47:08,970
well-defined as opposed to in callbacks

00:47:05,190 --> 00:47:10,650
in continuation passing it's sort of a

00:47:08,970 --> 00:47:12,059
convention to pass the error as the

00:47:10,650 --> 00:47:13,829
first argument but there's no

00:47:12,059 --> 00:47:15,450
enforcement that that's going to be true

00:47:13,829 --> 00:47:18,359
so it's really hard to make sort of

00:47:15,450 --> 00:47:19,890
generic wrappers where in promises

00:47:18,359 --> 00:47:22,529
generic wrappers are easy because

00:47:19,890 --> 00:47:25,589
there's a separate exception channel huh

00:47:22,529 --> 00:47:27,329
okay thank you if that's interesting to

00:47:25,589 --> 00:47:33,539
you I do highly recommend let me see if

00:47:27,329 --> 00:47:34,829
I can quickly find English so that

00:47:33,539 --> 00:47:38,059
there's mojolicious

00:47:34,829 --> 00:47:42,779
IO which has the mojolicious calendar

00:47:38,059 --> 00:47:45,180
from last one was in 2018 I was too busy

00:47:42,779 --> 00:47:51,029
to do one last year but if you look on

00:47:45,180 --> 00:47:55,020
the 2018 day 24 so December 24th 2018

00:47:51,029 --> 00:47:58,890
post to the mojolicious IO blog there's

00:47:55,020 --> 00:48:01,319
a really awesome YouTube video you can

00:47:58,890 --> 00:48:04,380
watch it is JavaScript focused but it

00:48:01,319 --> 00:48:06,450
it's it will talk to you all the way

00:48:04,380 --> 00:48:09,809
through why promises are better and then

00:48:06,450 --> 00:48:13,619
why a single link is better okay thank

00:48:09,809 --> 00:48:30,690
you you say that was December 24th 18

00:48:13,619 --> 00:48:34,619
they're right here and more questions hi

00:48:30,690 --> 00:48:36,690
yes I have a question it's uh I I'm not

00:48:34,619 --> 00:48:38,660
very familiar in the on the web design

00:48:36,690 --> 00:48:40,680
in and I'm looking for just some very

00:48:38,660 --> 00:48:43,940
straightforward apps maybe it's some

00:48:40,680 --> 00:48:46,200
kind of a crud that I could start up

00:48:43,940 --> 00:48:48,089
what do you recommend for that I see

00:48:46,200 --> 00:48:53,369
you've got a Galileo that's sitting on

00:48:48,089 --> 00:48:56,369
you games like Galileo was a fun

00:48:53,369 --> 00:48:59,249
experiment of mine and I would love to

00:48:56,369 --> 00:49:02,220
make a second version of it but it is

00:48:59,249 --> 00:49:03,630
oddly too focused on WebSockets and that

00:49:02,220 --> 00:49:06,839
was partially because at the time I was

00:49:03,630 --> 00:49:11,069
just really excited for WebSockets it

00:49:06,839 --> 00:49:15,329
works I assume I haven't used it in a

00:49:11,069 --> 00:49:19,380
long time if you're making a new sort of

00:49:15,329 --> 00:49:22,440
cruddy API you want one that you write

00:49:19,380 --> 00:49:24,779
or one that's pre-built for you well as

00:49:22,440 --> 00:49:27,059
much pre-built than that

00:49:24,779 --> 00:49:29,039
you know I could tear apart as as needed

00:49:27,059 --> 00:49:30,930
to fool around with I might for the

00:49:29,039 --> 00:49:35,059
pre-built I might suggest you look at

00:49:30,930 --> 00:49:37,140
Doug Bell's diancie whiny and see why

00:49:35,059 --> 00:49:40,319
he's been putting a lot of effort into

00:49:37,140 --> 00:49:42,749
that and while I haven't actually kept

00:49:40,319 --> 00:49:44,819
up on it as much as I should there are

00:49:42,749 --> 00:49:48,960
actually some the NZ post s-- in the

00:49:44,819 --> 00:49:50,279
mojolicious daya iowa blog or done i'm

00:49:48,960 --> 00:49:51,059
sure to be happy to talk to you he's

00:49:50,279 --> 00:49:55,499
pre-action

00:49:51,059 --> 00:49:56,700
on most places you can find him if you

00:49:55,499 --> 00:49:59,609
were looking to write something on your

00:49:56,700 --> 00:50:03,420
own I would suggest you look at the open

00:49:59,609 --> 00:50:07,109
API plugin for mojolicious I really like

00:50:03,420 --> 00:50:09,839
the open API generating the render the

00:50:07,109 --> 00:50:11,910
routing table from your API spec is

00:50:09,839 --> 00:50:13,829
really a lovely way to keep your

00:50:11,910 --> 00:50:16,289
documentation and your validation and

00:50:13,829 --> 00:50:18,329
your application all in sync with each

00:50:16,289 --> 00:50:20,309
other so those would be my two

00:50:18,329 --> 00:50:21,480
suggestions sort of depending on how

00:50:20,309 --> 00:50:23,819
much you want to write it or how much

00:50:21,480 --> 00:50:26,519
you want a prebuilt for you very good

00:50:23,819 --> 00:50:28,319
thank you Doug Bell is also giving a

00:50:26,519 --> 00:50:38,680
talk into our

00:50:28,319 --> 00:50:40,240
honey I said baby thank you okay unless

00:50:38,680 --> 00:50:41,920
anybody else wants to raise their hands

00:50:40,240 --> 00:50:45,160
I think that's everything thank you so

00:50:41,920 --> 00:50:49,210
much Joe thank you very much

00:50:45,160 --> 00:50:51,640
thanks joy enjoy the conference and I

00:50:49,210 --> 00:50:53,349
will hope to see you around virtually at

00:50:51,640 --> 00:50:55,450
various places if you have any other

00:50:53,349 --> 00:50:57,910
questions of mojo or anything else

00:50:55,450 --> 00:51:01,260
please feel free to talk to me I'm

00:50:57,910 --> 00:51:01,260

YouTube URL: https://www.youtube.com/watch?v=I5xS2NcMzJU


