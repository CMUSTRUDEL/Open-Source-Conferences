Title: Ricardo Signes - The Perl 5 Debugger: Wuh?
Publication date: 2020-06-26
Playlist: TPC 2020 in the Cloud
Description: 
	95% of all debugging is print statements, but once or twice a year, a problem shows up that is best attached with perl5db.pl, the venerable core Perl 5 debugger. Like a light saber, it dates back to a forgotten time and its operations are poorly understood. Unlike a light saber, it is not elegant, and nobody aspires to use it. Also, it can cut limbs right off. Still, itâ€™s a very useful multi-purpose tool, and if you learn how to use it, it can save a lot of time and clear up a lot of mysteries.

This talk will cover what the debugger is, how to use it at a basic and intermediate level, how to customize it, and at least one or two stories about how it is very, very awful.
Captions: 
	00:00:00,000 --> 00:00:05,700
you can great cool okay well if you've

00:00:03,990 --> 00:00:08,519
been to an I presentations before you

00:00:05,700 --> 00:00:11,160
know I almost always run long and there

00:00:08,519 --> 00:00:12,840
is no there's no lunch after this talk

00:00:11,160 --> 00:00:15,599
so I'm just gonna start immediately I

00:00:12,840 --> 00:00:17,310
will try and go quickly and I I will

00:00:15,599 --> 00:00:19,680
actually stop on time have asked to

00:00:17,310 --> 00:00:21,930
which that is that is a gift from you to

00:00:19,680 --> 00:00:23,970
the community okay

00:00:21,930 --> 00:00:26,250
I decided I was gonna do this whole talk

00:00:23,970 --> 00:00:29,279
in my terminal this seemed like a good

00:00:26,250 --> 00:00:32,940
idea at the time and at this point there

00:00:29,279 --> 00:00:37,800
is no other option so I just produced

00:00:32,940 --> 00:00:43,320
some slides here there we go alright

00:00:37,800 --> 00:00:45,270
let's cap them the other way okay so

00:00:43,320 --> 00:00:48,780
we're gonna talk about how did you bug

00:00:45,270 --> 00:00:53,309
pearl this font so it's a little small

00:00:48,780 --> 00:00:54,870
on me oh well that's that source let's

00:00:53,309 --> 00:00:57,600
let's downgrade these slides a little

00:00:54,870 --> 00:01:01,379
bit and try them in vim we're gonna talk

00:00:57,600 --> 00:01:03,870
about how to debug probe I am Rick I'm

00:01:01,379 --> 00:01:06,030
our GPS I work at fast mail I have

00:01:03,870 --> 00:01:07,680
written a lot of pro code which means I

00:01:06,030 --> 00:01:09,689
have written a lot of bugs and some of

00:01:07,680 --> 00:01:12,540
them I have fixed some of those I have

00:01:09,689 --> 00:01:15,299
even fixed with the debugger and I'm

00:01:12,540 --> 00:01:17,460
constantly surprised when I work with

00:01:15,299 --> 00:01:19,500
other Perl programmers and how few of

00:01:17,460 --> 00:01:22,080
them especially those who are really

00:01:19,500 --> 00:01:24,330
good programmers and write and solve

00:01:22,080 --> 00:01:26,270
more bugs than I do don't know how to

00:01:24,330 --> 00:01:29,130
use even the basics of the Perl debugger

00:01:26,270 --> 00:01:30,720
it's a really useful tool I don't use it

00:01:29,130 --> 00:01:33,210
all the time but I do use it and I think

00:01:30,720 --> 00:01:35,579
more people should know how to use it so

00:01:33,210 --> 00:01:37,890
the first question is how do you do bug

00:01:35,579 --> 00:01:39,960
problems in Perl the answer this is

00:01:37,890 --> 00:01:43,290
actually pretty straightforward you had

00:01:39,960 --> 00:01:46,070
more print statements alright and that's

00:01:43,290 --> 00:01:49,470
it that's that's that's like how a bug

00:01:46,070 --> 00:01:52,049
95% of my problems in Perl may be maybe

00:01:49,470 --> 00:01:54,210
more like 98 or 99 you had the right

00:01:52,049 --> 00:01:56,579
print statements and you generally find

00:01:54,210 --> 00:02:00,210
the problem so maybe I shouldn't really

00:01:56,579 --> 00:02:02,009
talk about how to debug but rather drop

00:02:00,210 --> 00:02:05,490
the pretense and talk about how to use

00:02:02,009 --> 00:02:07,619
the debugger because you will know when

00:02:05,490 --> 00:02:10,950
to use it for debugging when the print

00:02:07,619 --> 00:02:13,410
statements aren't going to work 99% of

00:02:10,950 --> 00:02:15,720
the time when I use the debugger

00:02:13,410 --> 00:02:19,290
I'm not really using it to debug anyway

00:02:15,720 --> 00:02:22,770
I'm using it as a rebel a rebel is a

00:02:19,290 --> 00:02:26,400
read evaluate print loop which basically

00:02:22,770 --> 00:02:28,590
means the the program will read some

00:02:26,400 --> 00:02:29,910
input from you it'll evaluate it print

00:02:28,590 --> 00:02:31,950
the result and then do the whole thing

00:02:29,910 --> 00:02:34,740
again so it's a way of running your

00:02:31,950 --> 00:02:37,980
program or anything you want one line at

00:02:34,740 --> 00:02:41,280
a time you can get Pearl's rebel by

00:02:37,980 --> 00:02:42,930
running pearl - de 0 it means something

00:02:41,280 --> 00:02:45,060
it means something explainable I'm not

00:02:42,930 --> 00:02:47,430
gonna explain it but it means start the

00:02:45,060 --> 00:02:49,680
debugger start the repple and once

00:02:47,430 --> 00:02:52,230
you've run that it's going to start

00:02:49,680 --> 00:02:54,450
asking you for input and evaluating

00:02:52,230 --> 00:02:57,330
everything you type in there are a lot

00:02:54,450 --> 00:02:59,790
of other rebels in Pearl specifically

00:02:57,330 --> 00:03:02,640
rebels that were designed to be rebels

00:02:59,790 --> 00:03:05,280
right exploratory programming tools you

00:03:02,640 --> 00:03:07,800
could for example use IRB and Ruby or

00:03:05,280 --> 00:03:10,320
just run Python with no arguments and

00:03:07,800 --> 00:03:11,970
you get a rebel that feels a lot more

00:03:10,320 --> 00:03:14,460
like you're meant to be there playing

00:03:11,970 --> 00:03:17,640
around Pearl's rebel feels like you have

00:03:14,460 --> 00:03:18,750
fallen into the boiler room so I could

00:03:17,640 --> 00:03:20,760
talk about those and teach you how to

00:03:18,750 --> 00:03:23,040
find a really nice rebel like reply or

00:03:20,760 --> 00:03:24,420
devil rebel but I'm not going to talk

00:03:23,040 --> 00:03:26,130
about roller bugger because that's

00:03:24,420 --> 00:03:28,110
already everywhere and you can use it

00:03:26,130 --> 00:03:30,420
for other things there are also other

00:03:28,110 --> 00:03:32,070
debuggers the the pearl debugger that

00:03:30,420 --> 00:03:36,090
I'm going to talk about is the one that

00:03:32,070 --> 00:03:38,400
comes with pearl pearl 5 DB PL and it is

00:03:36,090 --> 00:03:40,140
maybe not the best prob'ly bugger

00:03:38,400 --> 00:03:42,360
there's one called devil a bug there are

00:03:40,140 --> 00:03:44,220
some other ones and they're neat but you

00:03:42,360 --> 00:03:46,200
don't always have them and by the time

00:03:44,220 --> 00:03:47,850
you have sunk into the depths of despair

00:03:46,200 --> 00:03:49,200
where you realize you need to use it a

00:03:47,850 --> 00:03:50,400
bugger and not just print statements

00:03:49,200 --> 00:03:51,510
you're probably not going to install

00:03:50,400 --> 00:03:53,540
these right you've got the debugger

00:03:51,510 --> 00:03:56,640
right there just just get it over with

00:03:53,540 --> 00:03:58,440
nobody really I shouldn't say nobody

00:03:56,640 --> 00:04:00,480
really uses them but they're much less

00:03:58,440 --> 00:04:03,600
commonly found at the time of despair

00:04:00,480 --> 00:04:05,400
time monster okay so if you're gonna use

00:04:03,600 --> 00:04:07,940
this as a rebel you want to know what

00:04:05,400 --> 00:04:10,530
stuff it can do that is rebel II

00:04:07,940 --> 00:04:12,810
anything you type in the probe debugger

00:04:10,530 --> 00:04:15,120
it's going to evaluate and that's it

00:04:12,810 --> 00:04:18,359
just evaluates it if you want to print

00:04:15,120 --> 00:04:21,450
it you can use the P command P will

00:04:18,359 --> 00:04:22,320
print whatever has been evaluated X will

00:04:21,450 --> 00:04:24,150
dump it

00:04:22,320 --> 00:04:25,670
so it's it'll dump out a deep data

00:04:24,150 --> 00:04:29,870
structure for example

00:04:25,670 --> 00:04:31,730
q will quit the de butter you might be

00:04:29,870 --> 00:04:33,590
thinking you can press control-d

00:04:31,730 --> 00:04:35,540
like almost any other interactive

00:04:33,590 --> 00:04:38,150
utility and exit a bugger and that will

00:04:35,540 --> 00:04:39,530
often work but sometimes you'll have

00:04:38,150 --> 00:04:42,170
gotten yourself into a state where

00:04:39,530 --> 00:04:44,060
hitting ctrl D will start the nested

00:04:42,170 --> 00:04:45,560
debugger I'm not going to explain the

00:04:44,060 --> 00:04:47,780
nested debugger because no one wants to

00:04:45,560 --> 00:04:49,700
hear about it but it's what is going on

00:04:47,780 --> 00:04:51,140
when you start seeing extra angle

00:04:49,700 --> 00:04:52,520
brackets show up in your prompt if

00:04:51,140 --> 00:04:54,170
you've seen that before

00:04:52,520 --> 00:04:57,590
that's what happened it was the nested

00:04:54,170 --> 00:05:01,640
debugger hit Q instead okay

00:04:57,590 --> 00:05:03,920
so much maybe most of his talk is a live

00:05:01,640 --> 00:05:06,280
demo so this should be exciting we'll

00:05:03,920 --> 00:05:06,280
see how it goes

00:05:08,440 --> 00:05:16,850
this is the repple right I'm showing you

00:05:12,110 --> 00:05:19,940
one second I am showing you the repple I

00:05:16,850 --> 00:05:22,130
can do stuff like say 18 right that's an

00:05:19,940 --> 00:05:25,340
expression it got evaluated and you're

00:05:22,130 --> 00:05:27,710
like but what an evaluate to well I know

00:05:25,340 --> 00:05:29,900
it's 18 but it doesn't print that

00:05:27,710 --> 00:05:31,190
because it only evaluates the statement

00:05:29,900 --> 00:05:34,910
if you want to print it you have to say

00:05:31,190 --> 00:05:37,460
a print 18 if you wanted to say print

00:05:34,910 --> 00:05:38,900
print hello that's one of those cases

00:05:37,460 --> 00:05:41,060
where you end up with well it prints

00:05:38,900 --> 00:05:43,940
hello but also prints the evaluation and

00:05:41,060 --> 00:05:48,880
the evaluation of print is true so you

00:05:43,940 --> 00:05:50,630
get one hello fine you can use X for big

00:05:48,880 --> 00:05:53,150
complicated data structures like this

00:05:50,630 --> 00:05:55,100
one if you print them you get exactly

00:05:53,150 --> 00:05:57,170
what you deserve which is that right

00:05:55,100 --> 00:05:59,300
it's a repple it's fine I use it all the

00:05:57,170 --> 00:06:02,030
time this is what I use when someone

00:05:59,300 --> 00:06:05,030
says did you know that if you take a

00:06:02,030 --> 00:06:07,190
string and you add 13 to it it reverses

00:06:05,030 --> 00:06:09,110
the string and you know you save no it

00:06:07,190 --> 00:06:10,400
doesn't that's ridiculous and then you

00:06:09,110 --> 00:06:13,130
fire up the repple and test it and you

00:06:10,400 --> 00:06:14,900
find out it's true it's not true that

00:06:13,130 --> 00:06:17,020
one but most absurd things people will

00:06:14,900 --> 00:06:20,720
tell you about pro/5 are actually true

00:06:17,020 --> 00:06:23,390
okay so how does this work there is a

00:06:20,720 --> 00:06:28,120
variable in perl called dollar hat

00:06:23,390 --> 00:06:31,640
capital P and that is the debugger stuff

00:06:28,120 --> 00:06:33,500
when you run Perl with dash D it turns

00:06:31,640 --> 00:06:36,500
on a bunch of bits because that variable

00:06:33,500 --> 00:06:38,840
is a bit field and you can see what all

00:06:36,500 --> 00:06:39,639
the bits mean by looking at Perl doc - V

00:06:38,840 --> 00:06:41,349
for that very

00:06:39,639 --> 00:06:44,020
and it's really interesting and you can

00:06:41,349 --> 00:06:47,919
learn a lot but I advise you skip it

00:06:44,020 --> 00:06:50,979
the key flag here is the bit for two and

00:06:47,919 --> 00:06:53,199
that turns on a instruction to the Perl

00:06:50,979 --> 00:06:55,659
runtime that says every time you're

00:06:53,199 --> 00:06:58,509
going to evaluate a statement call the

00:06:55,659 --> 00:07:01,210
subroutine located at DB colon colon DB

00:06:58,509 --> 00:07:03,909
right this is this is what the debugger

00:07:01,210 --> 00:07:06,039
is in a sense it's that plus some other

00:07:03,909 --> 00:07:09,099
magic variables so you could write

00:07:06,039 --> 00:07:10,810
something instead of Perl 5 dB you could

00:07:09,099 --> 00:07:12,340
write your own debugger and the

00:07:10,810 --> 00:07:13,990
stupidest debugger you are likely to

00:07:12,340 --> 00:07:16,870
find is a great piece of software called

00:07:13,990 --> 00:07:19,990
devil trace it's on Sipan and it

00:07:16,870 --> 00:07:22,240
basically looks like this it says every

00:07:19,990 --> 00:07:24,400
read DB DB means every time you're going

00:07:22,240 --> 00:07:27,669
to run a statement evaluate this

00:07:24,400 --> 00:07:29,650
subroutine call the subroutine yeah it's

00:07:27,669 --> 00:07:31,330
really nasty looking it says get the

00:07:29,650 --> 00:07:34,509
stuff out of caller right the package

00:07:31,330 --> 00:07:37,750
name final name and line number and then

00:07:34,509 --> 00:07:42,969
there is a variable bear with me there's

00:07:37,750 --> 00:07:46,180
a variable that is at colon colon

00:07:42,969 --> 00:07:48,400
underscore left angle bracket filename

00:07:46,180 --> 00:07:49,960
for every filename your program has

00:07:48,400 --> 00:07:52,690
loaded if you are running under the

00:07:49,960 --> 00:07:54,669
debugger this is actually as bizarre as

00:07:52,690 --> 00:07:57,520
it sounds I am not embellishing it's

00:07:54,669 --> 00:08:00,400
really that weird the index is in that

00:07:57,520 --> 00:08:03,310
array are lying numbers and if you want

00:08:00,400 --> 00:08:06,159
you can get index 17 out of any file

00:08:03,310 --> 00:08:08,110
you've loaded and you find the source so

00:08:06,159 --> 00:08:09,969
this little debugger trace or whatever

00:08:08,110 --> 00:08:12,669
you want to call it every time it's

00:08:09,969 --> 00:08:16,060
about to evaluate a statement it prints

00:08:12,669 --> 00:08:18,669
two stood err that it's about to run the

00:08:16,060 --> 00:08:21,250
line write the piece of code found in

00:08:18,669 --> 00:08:23,560
that file at that line as well as what

00:08:21,250 --> 00:08:25,719
line and file it was if you run a

00:08:23,560 --> 00:08:27,400
program with this loaded you're just

00:08:25,719 --> 00:08:30,550
gonna see every line of the program

00:08:27,400 --> 00:08:33,039
printed as it gets run and that's that's

00:08:30,550 --> 00:08:36,399
how the whole debugger system basically

00:08:33,039 --> 00:08:38,949
works Perl 5 DB is a really really

00:08:36,399 --> 00:08:40,990
complicated DB colon colon DB routine

00:08:38,949 --> 00:08:42,760
that lets you muck around with what's

00:08:40,990 --> 00:08:45,940
going on every time you're about to

00:08:42,760 --> 00:08:48,490
evaluate a statement so D :

00:08:45,940 --> 00:08:50,680
trace turns on a bunch of flags in

00:08:48,490 --> 00:08:52,620
dollar hat P and loads devil trace which

00:08:50,680 --> 00:08:54,480
sets up the DB subroutine

00:08:52,620 --> 00:08:58,020
if you don't pass any argument to dash D

00:08:54,480 --> 00:09:00,300
it loads pearl 5d BPL the name giving

00:08:58,020 --> 00:09:02,690
away how ancient this piece of code is

00:09:00,300 --> 00:09:05,370
and it sets up the same variables

00:09:02,690 --> 00:09:07,710
whatever yes this is very true whatever

00:09:05,370 --> 00:09:08,310
you do don't read that code I have read

00:09:07,710 --> 00:09:10,950
that code

00:09:08,310 --> 00:09:13,560
it had effects on my life that I could

00:09:10,950 --> 00:09:16,830
not predict and I would not wish them on

00:09:13,560 --> 00:09:19,380
you it's there you can read it it has

00:09:16,830 --> 00:09:23,370
gotten a lot better in the last 5 or 10

00:09:19,380 --> 00:09:25,200
years but it's still it's a thing you

00:09:23,370 --> 00:09:27,150
can read it's pro lock that's not so bad

00:09:25,200 --> 00:09:30,029
it explains a lot of things

00:09:27,150 --> 00:09:33,450
pearl dock pearl Deb guts is also pretty

00:09:30,029 --> 00:09:35,279
good and pearl dock pearl debug is

00:09:33,450 --> 00:09:37,380
probably where to start forgetting how

00:09:35,279 --> 00:09:42,779
do I even use this thing or you can keep

00:09:37,380 --> 00:09:44,550
listening to me talk okay let's step

00:09:42,779 --> 00:09:45,900
through some code here are commands that

00:09:44,550 --> 00:09:48,150
you're gonna use to step through an

00:09:45,900 --> 00:09:50,279
actual program when you use it to run a

00:09:48,150 --> 00:09:51,630
program instead of just to be a

00:09:50,279 --> 00:09:55,890
playground for running your pearl one

00:09:51,630 --> 00:09:57,690
line n always evaluates the next

00:09:55,890 --> 00:09:58,680
statement in your program right so

00:09:57,690 --> 00:10:00,180
you've begun running you're going

00:09:58,680 --> 00:10:03,200
through the program n we're on the next

00:10:00,180 --> 00:10:06,750
statement the next one the next one S

00:10:03,200 --> 00:10:08,010
steps down into the next statement so

00:10:06,750 --> 00:10:10,350
instead of just evaluating that

00:10:08,010 --> 00:10:11,670
statement it steps into the next part of

00:10:10,350 --> 00:10:13,230
evaluating that statement so if you've

00:10:11,670 --> 00:10:15,779
got subroutines it won't just tell you

00:10:13,230 --> 00:10:17,459
the return value it will go down a frame

00:10:15,779 --> 00:10:21,660
into the subroutine and start debugging

00:10:17,459 --> 00:10:24,209
in there C is going to continue running

00:10:21,660 --> 00:10:25,470
your program until it's over or unless

00:10:24,209 --> 00:10:26,940
there's a breakpoint which we'll talk

00:10:25,470 --> 00:10:28,920
about later but a breakpoint just says

00:10:26,940 --> 00:10:32,070
if you were continuing to run a program

00:10:28,920 --> 00:10:33,839
stop here and if you just hit enter in

00:10:32,070 --> 00:10:36,270
the debugger it moves the same way you

00:10:33,839 --> 00:10:39,510
just did right so another n another S or

00:10:36,270 --> 00:10:41,459
another C there's also T which will

00:10:39,510 --> 00:10:43,170
trace through an expression which

00:10:41,459 --> 00:10:46,200
basically means print everything you do

00:10:43,170 --> 00:10:48,300
as you go I find T very hard to use so

00:10:46,200 --> 00:10:51,450
I'm not going to talk about it but it's

00:10:48,300 --> 00:10:54,000
there be aware let's talk about a real

00:10:51,450 --> 00:10:56,190
program this is a beautiful example of

00:10:54,000 --> 00:10:58,410
some high quality industry grade pearl

00:10:56,190 --> 00:11:00,720
this is a cryptographically secure

00:10:58,410 --> 00:11:03,329
random number generator I can assure you

00:11:00,720 --> 00:11:05,310
it does generate random numbers for some

00:11:03,329 --> 00:11:07,330
definition of random

00:11:05,310 --> 00:11:09,790
it's about the simplest one I could

00:11:07,330 --> 00:11:13,060
produce it takes a couple pieces of

00:11:09,790 --> 00:11:15,370
configuration some state and it produces

00:11:13,060 --> 00:11:16,870
a pseudo-random number generator every

00:11:15,370 --> 00:11:18,280
time that you call that routine alright

00:11:16,870 --> 00:11:19,990
and that routine has a state variable

00:11:18,280 --> 00:11:21,850
which means every time you call you're

00:11:19,990 --> 00:11:24,730
getting the next pseudo-random number in

00:11:21,850 --> 00:11:26,140
the sequence and what does it do I mean

00:11:24,730 --> 00:11:35,080
this is the generator whoops

00:11:26,140 --> 00:11:38,830
well that was surprising that was the

00:11:35,080 --> 00:11:42,340
generator and this here is gonna say get

00:11:38,830 --> 00:11:46,090
a new random number and every time you

00:11:42,340 --> 00:11:48,670
get it print it out and if it was one

00:11:46,090 --> 00:11:50,200
you're done stop at one so and you'd

00:11:48,670 --> 00:11:51,370
expect to see is it's gonna start

00:11:50,200 --> 00:11:53,680
spitting out a whole bunch of random

00:11:51,370 --> 00:11:55,030
numbers until it says one and then the

00:11:53,680 --> 00:11:59,020
program completes that's what should

00:11:55,030 --> 00:12:10,600
happen so what actually happens if I run

00:11:59,020 --> 00:12:12,100
that program exits all right it's not

00:12:10,600 --> 00:12:14,230
doing anything I didn't get a single

00:12:12,100 --> 00:12:17,800
random number it couldn't even have put

00:12:14,230 --> 00:12:18,250
out one because it I have a print

00:12:17,800 --> 00:12:20,200
statement

00:12:18,250 --> 00:12:22,350
I mean adding print statements is my

00:12:20,200 --> 00:12:25,720
strategy of first resort there's one

00:12:22,350 --> 00:12:28,660
right here so it's not even spitting out

00:12:25,720 --> 00:12:31,450
a 1 because if it was 1 on the first

00:12:28,660 --> 00:12:35,260
go-round you would have gotten a 1 so

00:12:31,450 --> 00:12:37,660
what are we gonna do let's debug it so

00:12:35,260 --> 00:12:39,850
we can use the debugger to open up this

00:12:37,660 --> 00:12:42,430
program and what happens will you start

00:12:39,850 --> 00:12:45,700
up the program and we hit C write C is

00:12:42,430 --> 00:12:47,890
continue running well nothing right it

00:12:45,700 --> 00:12:52,480
runs to the end that's what C does well

00:12:47,890 --> 00:12:55,660
let's start over we know that what's

00:12:52,480 --> 00:12:59,290
gonna happen we've continued running

00:12:55,660 --> 00:13:02,140
this they'll say this we've run this

00:12:59,290 --> 00:13:03,850
program it didn't work maybe random

00:13:02,140 --> 00:13:06,940
isn't working right maybe we're not

00:13:03,850 --> 00:13:08,980
getting the value we want out of it so I

00:13:06,940 --> 00:13:10,900
can call random right calling random is

00:13:08,980 --> 00:13:14,410
an expression and I'm to dump the output

00:13:10,900 --> 00:13:17,970
from it but what do I get every time I

00:13:14,410 --> 00:13:20,549
do this but a beautiful sequence of

00:13:17,970 --> 00:13:24,959
pseudo-random numbers right so light why

00:13:20,549 --> 00:13:27,089
didn't this work let's start over so you

00:13:24,959 --> 00:13:29,639
start the program over here we are this

00:13:27,089 --> 00:13:31,189
is telling us the next line that's going

00:13:29,639 --> 00:13:37,189
to be evaluated it's going to evaluate

00:13:31,189 --> 00:13:37,189
while my I equals random and if we say

00:13:37,220 --> 00:13:44,039
next it's going to evaluate that and the

00:13:41,009 --> 00:13:48,720
program's over okay so that didn't help

00:13:44,039 --> 00:13:50,249
so let's start over and say step all

00:13:48,720 --> 00:13:52,919
right step is gonna say don't just

00:13:50,249 --> 00:13:55,079
evaluate this statement step down into

00:13:52,919 --> 00:13:57,239
the subroutine that's in it and now what

00:13:55,079 --> 00:14:00,569
do we see it says you are now inside of

00:13:57,239 --> 00:14:02,720
main random subroutine random and this

00:14:00,569 --> 00:14:05,009
is the code that's about to be printed

00:14:02,720 --> 00:14:06,269
okay okay I mean I don't know what's

00:14:05,009 --> 00:14:08,879
wrong with the program yet but we could

00:14:06,269 --> 00:14:12,089
do some stuff right we can say what's

00:14:08,879 --> 00:14:13,919
What's in X nothing the reason there's

00:14:12,089 --> 00:14:17,220
nothing is that it shows you the

00:14:13,919 --> 00:14:18,899
statement before it evaluates it so if I

00:14:17,220 --> 00:14:21,989
want to see what actually happens when I

00:14:18,899 --> 00:14:23,489
evaluate this I want to say next and now

00:14:21,989 --> 00:14:26,729
it shows me the next line that we're

00:14:23,489 --> 00:14:29,309
gonna see and now if I examine what's in

00:14:26,729 --> 00:14:31,459
big X I see 10 right because it

00:14:29,309 --> 00:14:34,439
evaluated the assignment of 10 into X

00:14:31,459 --> 00:14:36,179
and I can go past a couple of these and

00:14:34,439 --> 00:14:41,069
if I want I can look at them you know

00:14:36,179 --> 00:14:44,279
what's in a what's in EM what's in C you

00:14:41,069 --> 00:14:46,669
will notice by the way when I examine a

00:14:44,279 --> 00:14:52,379
simple number I get two bits of output

00:14:46,669 --> 00:14:55,079
one is zero and one is 2121 is obviously

00:14:52,379 --> 00:14:57,779
the value of the variable you're getting

00:14:55,079 --> 00:14:59,549
zero because the dumper is taking a list

00:14:57,779 --> 00:15:02,220
of things and this is showing you the

00:14:59,549 --> 00:15:04,349
index into the list so if I was going to

00:15:02,220 --> 00:15:07,319
say I hope this works the way I recall

00:15:04,349 --> 00:15:10,349
it works yeah if we examine a list of

00:15:07,319 --> 00:15:14,729
things we get item 0 item 1 item 2 and

00:15:10,349 --> 00:15:17,009
then on the right of the values so now

00:15:14,729 --> 00:15:22,289
we get down here and we've got this

00:15:17,009 --> 00:15:25,470
expression where we're going to get x

00:15:22,289 --> 00:15:29,040
equals this thing so if I take this

00:15:25,470 --> 00:15:34,350
expression here a times

00:15:29,040 --> 00:15:38,370
plus C modulo m and I evaluate it we get

00:15:34,350 --> 00:15:41,870
zero so the problem if we go back to the

00:15:38,370 --> 00:15:46,259
program the first time we call random as

00:15:41,870 --> 00:15:50,699
we are now the actual number that comes

00:15:46,259 --> 00:15:52,980
out of it first is zero and while needs

00:15:50,699 --> 00:15:56,250
a true value right so we are we are

00:15:52,980 --> 00:15:58,920
being bitten here by the fact that false

00:15:56,250 --> 00:16:01,920
zero is anathema to all good programming

00:15:58,920 --> 00:16:03,449
or or maybe the that bound a foundation

00:16:01,920 --> 00:16:06,180
of all the program is the two from what

00:16:03,449 --> 00:16:08,100
I've heard effectively what we've done

00:16:06,180 --> 00:16:10,259
is we've gone and inserted as many print

00:16:08,100 --> 00:16:13,139
statements as we needed into the program

00:16:10,259 --> 00:16:15,690
as we ran it okay so this is like the

00:16:13,139 --> 00:16:17,670
very basics of step through your program

00:16:15,690 --> 00:16:19,649
and look at it as it goes which is

00:16:17,670 --> 00:16:22,769
pretty good if we want we continue

00:16:19,649 --> 00:16:26,730
running and the program fails we can go

00:16:22,769 --> 00:16:28,649
back into the program and we can fix it

00:16:26,730 --> 00:16:31,170
right and then when we fix it is by

00:16:28,649 --> 00:16:33,209
adding defined so great we've debug to

00:16:31,170 --> 00:16:35,699
our program now we've said that we're

00:16:33,209 --> 00:16:42,889
gonna add it defined here and if we run

00:16:35,699 --> 00:16:45,480
this program right there's that program

00:16:42,889 --> 00:16:47,990
it runs for a while it gets to one and

00:16:45,480 --> 00:16:51,930
it stops just like we wanted terrific

00:16:47,990 --> 00:16:53,940
but this is not a realistic piece of

00:16:51,930 --> 00:16:56,100
Perl code right real Perl code is

00:16:53,940 --> 00:16:57,769
modular it's well factored it makes

00:16:56,100 --> 00:17:00,959
sense and has lots of different pieces

00:16:57,769 --> 00:17:02,160
something like this where we have taken

00:17:00,959 --> 00:17:04,380
that subroutine and put it into a

00:17:02,160 --> 00:17:06,360
library so now we can use this pseudo

00:17:04,380 --> 00:17:09,059
random number generator whenever we want

00:17:06,360 --> 00:17:11,610
beautiful and a piece of code that uses

00:17:09,059 --> 00:17:13,620
it might look like this use the

00:17:11,610 --> 00:17:16,319
pseudo-random number generator and then

00:17:13,620 --> 00:17:18,089
call its random routine right this is a

00:17:16,319 --> 00:17:20,669
this is highly modular eyes programming

00:17:18,089 --> 00:17:22,770
and when you're done as you run we're

00:17:20,669 --> 00:17:25,559
gonna accumulate all the times we saw

00:17:22,770 --> 00:17:28,350
any value and when we done print them

00:17:25,559 --> 00:17:33,419
off all the values that we saw in

00:17:28,350 --> 00:17:35,909
numeric order okay if we're gonna run

00:17:33,419 --> 00:17:37,290
through this program there's some other

00:17:35,909 --> 00:17:38,940
commands you might want to use to figure

00:17:37,290 --> 00:17:41,010
your out figure out your way through the

00:17:38,940 --> 00:17:42,900
program as programs get bigger maybe

00:17:41,010 --> 00:17:44,940
harder to navigate because they aren't

00:17:42,900 --> 00:17:46,710
just a sequence of lines our first

00:17:44,940 --> 00:17:48,840
program was in some ways almost a basic

00:17:46,710 --> 00:17:50,100
program it was one sequence of lines

00:17:48,840 --> 00:17:51,750
that we moved through and sure sometimes

00:17:50,100 --> 00:17:54,000
we jumped around but effectively it was

00:17:51,750 --> 00:17:56,220
one sequence now we've broken this up

00:17:54,000 --> 00:17:58,280
into multiple files but our that

00:17:56,220 --> 00:18:01,260
themselves communicate with one another

00:17:58,280 --> 00:18:03,600
el is the command that's gonna list the

00:18:01,260 --> 00:18:06,270
code that you are currently looking at

00:18:03,600 --> 00:18:07,560
in the debugger you can give it a number

00:18:06,270 --> 00:18:09,330
and say you want to look at that

00:18:07,560 --> 00:18:13,020
particular line of Perl somewhere in the

00:18:09,330 --> 00:18:15,390
program you can say X through Y to list

00:18:13,020 --> 00:18:16,920
that range of lines or you can listen

00:18:15,390 --> 00:18:21,660
individual subroutine and see just that

00:18:16,920 --> 00:18:22,860
some it can also use V which means don't

00:18:21,660 --> 00:18:24,900
just show me the line that I'm looking

00:18:22,860 --> 00:18:26,220
at show me a little bit before and a

00:18:24,900 --> 00:18:27,480
little bit after the line which is nice

00:18:26,220 --> 00:18:31,530
for figuring out some context of where

00:18:27,480 --> 00:18:33,180
you are also others dot and dot says it

00:18:31,530 --> 00:18:34,680
doesn't matter what I'm looking at now I

00:18:33,180 --> 00:18:37,680
want to go back to looking at the code

00:18:34,680 --> 00:18:39,630
it's about to run because as you debug

00:18:37,680 --> 00:18:41,250
your program you're gonna say I need to

00:18:39,630 --> 00:18:42,660
go look at what happened to somewhere

00:18:41,250 --> 00:18:45,000
else what is the code that implements

00:18:42,660 --> 00:18:46,920
some other part and you kind of turn

00:18:45,000 --> 00:18:50,520
your gaze to some other piece of your

00:18:46,920 --> 00:18:52,200
operating program dot will say look back

00:18:50,520 --> 00:18:53,910
at the lines about to run dummy because

00:18:52,200 --> 00:18:55,700
you're gonna hit next and you want to

00:18:53,910 --> 00:18:59,850
have that expression printed out first

00:18:55,700 --> 00:19:01,170
also I don't know why the dot pcap is so

00:18:59,850 --> 00:19:03,840
much smaller in this type of typeface

00:19:01,170 --> 00:19:07,890
but it is and we're gonna we're gonna

00:19:03,840 --> 00:19:09,570
just live with it okay so let's take

00:19:07,890 --> 00:19:14,940
that program that we just ran it's the

00:19:09,570 --> 00:19:16,380
the bug fixed version of this and we can

00:19:14,940 --> 00:19:18,480
to start off it's it shows us the next

00:19:16,380 --> 00:19:20,970
line it's going to run we can run L

00:19:18,480 --> 00:19:23,430
right and we start seeing here is a

00:19:20,970 --> 00:19:25,350
listing of the program it's shown us the

00:19:23,430 --> 00:19:28,020
next couple lines of the program we hit

00:19:25,350 --> 00:19:29,640
L again we see the same thing over and

00:19:28,020 --> 00:19:31,530
over that's telling us you got to the

00:19:29,640 --> 00:19:33,450
end buddy there's only 16 lines in this

00:19:31,530 --> 00:19:36,030
program and you've seen him now if we

00:19:33,450 --> 00:19:37,680
wanted to see line one we could say list

00:19:36,030 --> 00:19:40,230
line one there we are we could say list

00:19:37,680 --> 00:19:42,420
line one through ten there's the first

00:19:40,230 --> 00:19:44,940
10 lines of our program at this point

00:19:42,420 --> 00:19:47,100
we've basically established we just saw

00:19:44,940 --> 00:19:50,250
lines 1 through 10 so if we were one L

00:19:47,100 --> 00:19:50,670
again we're gonna start at 11 and keep

00:19:50,250 --> 00:19:52,050
going

00:19:50,670 --> 00:19:53,940
right so you've got a kind of a moving

00:19:52,050 --> 00:19:58,409
window through the program as you look

00:19:53,940 --> 00:20:01,350
and here we are we're at line 13 and if

00:19:58,409 --> 00:20:03,720
I run V V meaning like spread out and

00:20:01,350 --> 00:20:05,580
look in both directions you get a little

00:20:03,720 --> 00:20:09,269
bit line before and a little bit of line

00:20:05,580 --> 00:20:10,500
after but then we want to go back to

00:20:09,269 --> 00:20:14,070
looking at the line that we're gonna run

00:20:10,500 --> 00:20:16,379
so we say dot there we are this is the

00:20:14,070 --> 00:20:21,899
line that's gonna run next and we can

00:20:16,379 --> 00:20:24,509
step through this so it's step next list

00:20:21,899 --> 00:20:29,429
and you'll see what we're listing here

00:20:24,509 --> 00:20:30,539
this is code inside of PRNG actually

00:20:29,429 --> 00:20:32,659
we're looking at the wrong file I think

00:20:30,539 --> 00:20:35,370
but if we were running the correct file

00:20:32,659 --> 00:20:38,570
we would be looking at code inside of

00:20:35,370 --> 00:20:41,279
PRNG dot p.m. the package

00:20:38,570 --> 00:20:43,710
fortunately the code is the same demo

00:20:41,279 --> 00:20:45,389
makes sense if I wanted also you'll also

00:20:43,710 --> 00:20:47,580
see what happened is I hit ctrl D and I

00:20:45,389 --> 00:20:53,909
didn't exit the debugger so it's a

00:20:47,580 --> 00:20:57,090
morality tale I still hit it too so if I

00:20:53,909 --> 00:20:59,009
had stepped into this and I hit L you

00:20:57,090 --> 00:21:01,830
will see we are now listing the code

00:20:59,009 --> 00:21:04,230
inside of PRNG random so this is the

00:21:01,830 --> 00:21:05,879
package name and this is the file and

00:21:04,230 --> 00:21:07,039
this is the line where we're starting

00:21:05,879 --> 00:21:11,429
okay

00:21:07,039 --> 00:21:13,620
all right there are other ways to look

00:21:11,429 --> 00:21:17,700
around inside of the file looking around

00:21:13,620 --> 00:21:20,279
is real important F lets you change the

00:21:17,700 --> 00:21:22,500
file you're looking at so if you just

00:21:20,279 --> 00:21:24,570
follow the execution of the program it

00:21:22,500 --> 00:21:26,700
will take you where you usually need to

00:21:24,570 --> 00:21:27,899
go every time you step it takes you into

00:21:26,700 --> 00:21:29,850
the next subroutine that's being called

00:21:27,899 --> 00:21:31,919
which is in some other package and you

00:21:29,850 --> 00:21:34,679
can look around in there but sometimes

00:21:31,919 --> 00:21:36,029
you need to go see something that's in

00:21:34,679 --> 00:21:37,529
another package a good example is a

00:21:36,029 --> 00:21:39,120
constant all right you need to go look

00:21:37,529 --> 00:21:41,100
up some table of constants or magic

00:21:39,120 --> 00:21:42,779
values and you don't know what they all

00:21:41,100 --> 00:21:44,129
are you want to be able to dump out some

00:21:42,779 --> 00:21:45,330
structure so you go to some other file

00:21:44,129 --> 00:21:47,129
you'll list through it till you see the

00:21:45,330 --> 00:21:49,730
variable or the subroutine you want now

00:21:47,129 --> 00:21:49,730
you know what you needed

00:21:49,909 --> 00:21:55,649
slash will search for word through the

00:21:54,179 --> 00:22:00,149
file that you're looking at for some

00:21:55,649 --> 00:22:01,590
pattern C will continue running the

00:22:00,149 --> 00:22:04,980
program we saw that a little earlier

00:22:01,590 --> 00:22:07,350
it's useful because you can list to see

00:22:04,980 --> 00:22:07,700
the lines of your program that are

00:22:07,350 --> 00:22:10,789
coming

00:22:07,700 --> 00:22:11,990
and then pass a line number to see to

00:22:10,789 --> 00:22:14,539
tell it that's where you want to run

00:22:11,990 --> 00:22:15,980
until there's also tea which turns

00:22:14,539 --> 00:22:17,000
tracing off and on and honestly I should

00:22:15,980 --> 00:22:21,190
have deleted that because I'm not gonna

00:22:17,000 --> 00:22:26,990
talk about tracing anymore than that so

00:22:21,190 --> 00:22:28,519
let's go back into this program here we

00:22:26,990 --> 00:22:30,470
are in the debugger we're looking at the

00:22:28,519 --> 00:22:34,309
same old program we can list the whole

00:22:30,470 --> 00:22:37,070
thing and there's the program we know

00:22:34,309 --> 00:22:41,179
that when line eight comes around we are

00:22:37,070 --> 00:22:42,710
going to go into the PRNG package so

00:22:41,179 --> 00:22:45,799
let's just go look at that before we get

00:22:42,710 --> 00:22:47,870
there I'm gonna say f4 file PRNG

00:22:45,799 --> 00:22:49,760
and the debugger is going to look for a

00:22:47,870 --> 00:22:52,610
file we loaded it that seems to indicate

00:22:49,760 --> 00:22:54,320
which is basically a substring match so

00:22:52,610 --> 00:22:56,299
it says great you asked for PRNG

00:22:54,320 --> 00:22:58,700
and I found you this file and that's

00:22:56,299 --> 00:23:01,610
exactly the file we want we can list

00:22:58,700 --> 00:23:03,860
this file and if we list this file and

00:23:01,610 --> 00:23:06,820
we want to search for word for

00:23:03,860 --> 00:23:09,649
assignment for that state variable $2 X

00:23:06,820 --> 00:23:14,000
right we say search for state there it

00:23:09,649 --> 00:23:17,059
is we can say V to see some context here

00:23:14,000 --> 00:23:20,120
and maybe what we want to say is this is

00:23:17,059 --> 00:23:22,850
the line or we've had trouble before so

00:23:20,120 --> 00:23:25,340
we want to run the program until we

00:23:22,850 --> 00:23:26,960
reach that line so what I'm gonna do is

00:23:25,340 --> 00:23:29,830
say continue running this program until

00:23:26,960 --> 00:23:32,330
line 11 of the file I'm looking at and

00:23:29,830 --> 00:23:34,639
it runs and does all those little bits

00:23:32,330 --> 00:23:36,590
and it stops there right so this is sort

00:23:34,639 --> 00:23:38,630
of a you start up with the program the

00:23:36,590 --> 00:23:39,919
debugger it's not moving it's waiting

00:23:38,630 --> 00:23:41,630
for you to do something and you go look

00:23:39,919 --> 00:23:43,760
around you find where you want to run

00:23:41,630 --> 00:23:45,710
the program until and you say here right

00:23:43,760 --> 00:23:47,389
run the program until you get here and

00:23:45,710 --> 00:23:49,669
it does and it stops and then you can do

00:23:47,389 --> 00:23:52,340
all the stuff you want to do like you

00:23:49,669 --> 00:23:55,010
can say what even is that great it's

00:23:52,340 --> 00:23:56,630
1414 s not zero so I'm not even going to

00:23:55,010 --> 00:24:05,870
worry about that I'll define defined

00:23:56,630 --> 00:24:08,770
true problem the way that C works is

00:24:05,870 --> 00:24:10,930
with a breakpoint

00:24:08,770 --> 00:24:13,750
breakpoint is just a thing you stick

00:24:10,930 --> 00:24:16,930
into your debugger to say when you reach

00:24:13,750 --> 00:24:19,660
this point break and break here does not

00:24:16,930 --> 00:24:22,030
mean cause the program not to work it

00:24:19,660 --> 00:24:23,350
means stop going through automatically

00:24:22,030 --> 00:24:25,170
running the program I want you to stop

00:24:23,350 --> 00:24:27,940
here and let me issue debugger commands

00:24:25,170 --> 00:24:31,450
see is just a break point when you say

00:24:27,940 --> 00:24:34,270
c11 it means put a breakpoint at line 11

00:24:31,450 --> 00:24:37,150
and PS when you reach that breakpoint

00:24:34,270 --> 00:24:41,140
delete it it only exists until you hit

00:24:37,150 --> 00:24:43,900
it once but you can have break points

00:24:41,140 --> 00:24:45,370
that don't self-destruct that are there

00:24:43,900 --> 00:24:46,570
all the time and you could run through

00:24:45,370 --> 00:24:48,460
the program over and over and it will

00:24:46,570 --> 00:24:51,550
always stop there you can add those with

00:24:48,460 --> 00:24:53,470
B okay so B alone says whatever line

00:24:51,550 --> 00:24:55,630
we're looking at right now I want to put

00:24:53,470 --> 00:24:57,450
a breakpoint there so as we continue to

00:24:55,630 --> 00:24:59,710
run every time you hit this line stop

00:24:57,450 --> 00:25:02,590
you can list all the breakpoints with

00:24:59,710 --> 00:25:03,550
capital lb and that's gonna say I want

00:25:02,590 --> 00:25:05,860
to see all the breakpoints that are

00:25:03,550 --> 00:25:07,690
existing in my debugger if you're using

00:25:05,860 --> 00:25:11,890
one of those fancy modern debuggers like

00:25:07,690 --> 00:25:13,030
they started making in 1992 you just see

00:25:11,890 --> 00:25:14,590
the listing of your whole program with a

00:25:13,030 --> 00:25:16,510
little icon next to all the lines but we

00:25:14,590 --> 00:25:20,020
don't need that right we have the Perl

00:25:16,510 --> 00:25:22,840
debugger you can say b7 and that's going

00:25:20,020 --> 00:25:25,060
to put a breakpoint at line 7 you can

00:25:22,840 --> 00:25:26,710
also say B subroutine and say this is

00:25:25,060 --> 00:25:27,850
the subroutine where I want to break so

00:25:26,710 --> 00:25:28,690
keep running the program until you get

00:25:27,850 --> 00:25:31,630
to this subroutine

00:25:28,690 --> 00:25:33,480
you can even make it conditional so you

00:25:31,630 --> 00:25:36,730
could say

00:25:33,480 --> 00:25:39,690
b7 condition and that means when you

00:25:36,730 --> 00:25:42,700
reach line 7 if this condition is true

00:25:39,690 --> 00:25:46,210
break so this is a way to say I don't

00:25:42,700 --> 00:25:47,590
know why this happens but I know that

00:25:46,210 --> 00:25:49,360
there's a that when there's a problem

00:25:47,590 --> 00:25:51,460
it's because of this condition you stick

00:25:49,360 --> 00:25:52,870
that in you hit continue you walk away

00:25:51,460 --> 00:25:54,280
and when you come back your program is

00:25:52,870 --> 00:25:56,260
waiting for you at the at the correct

00:25:54,280 --> 00:25:57,120
spot I'll give you a little demo of how

00:25:56,260 --> 00:25:59,530
that actually works

00:25:57,120 --> 00:26:00,820
you can delete breakpoints this is very

00:25:59,530 --> 00:26:02,170
useful when you realize to put them in

00:26:00,820 --> 00:26:05,800
the wrong place which you always will

00:26:02,170 --> 00:26:07,660
and you can also add actions an action

00:26:05,800 --> 00:26:10,180
is just like a breakpoint but instead of

00:26:07,660 --> 00:26:12,880
stopping the debugger running it just

00:26:10,180 --> 00:26:15,070
runs it evaluates some Perl so you can

00:26:12,880 --> 00:26:16,810
say whenever you get to this line here

00:26:15,070 --> 00:26:19,810
is some Perl you might do something like

00:26:16,810 --> 00:26:21,419
print something out you might send a UDP

00:26:19,810 --> 00:26:24,179
Datagram because your

00:26:21,419 --> 00:26:26,039
you might increment some other variables

00:26:24,179 --> 00:26:28,019
somewhere in the memory of the program

00:26:26,039 --> 00:26:30,269
so you can keep track of what's

00:26:28,019 --> 00:26:31,980
happening you can list all the actions

00:26:30,269 --> 00:26:33,210
just like Wilson breakpoints and you can

00:26:31,980 --> 00:26:35,999
delete actions just like leading

00:26:33,210 --> 00:26:37,350
breakpoints you can also list them all

00:26:35,999 --> 00:26:40,860
everywhere which will be slightly

00:26:37,350 --> 00:26:45,990
interesting in a minute okay let's look

00:26:40,860 --> 00:26:52,590
at how these work so we've got a program

00:26:45,990 --> 00:26:54,299
here I term is popping up to tell me

00:26:52,590 --> 00:26:59,399
that's a hot tip of the day how to use I

00:26:54,299 --> 00:27:03,779
turn so here we are in our little

00:26:59,399 --> 00:27:07,470
program and I'm going to use B to make a

00:27:03,779 --> 00:27:10,320
breakpoint at the current line list and

00:27:07,470 --> 00:27:12,509
what do we see I put a breakpoint on

00:27:10,320 --> 00:27:13,830
this line there's not a particularly

00:27:12,509 --> 00:27:16,639
interesting place to put a breakpoint

00:27:13,830 --> 00:27:21,570
what I did I can put a breakpoint on

00:27:16,639 --> 00:27:22,980
PRNG random right so I'm saying whenever

00:27:21,570 --> 00:27:26,159
you get to that subroutine I want you to

00:27:22,980 --> 00:27:29,690
break now when I list all of our

00:27:26,159 --> 00:27:33,629
breakpoints we're gonna see this file

00:27:29,690 --> 00:27:36,570
PRNG p.m. has a breakpoint at line six

00:27:33,629 --> 00:27:38,070
and this is break if one all right I

00:27:36,570 --> 00:27:40,379
said you could put a condition on a

00:27:38,070 --> 00:27:41,850
breakpoint they're all conditional just

00:27:40,379 --> 00:27:44,389
sometimes the condition is true and

00:27:41,850 --> 00:27:48,779
we've got another breakpoint here now

00:27:44,389 --> 00:27:50,519
this breakpoint is not useful okay we're

00:27:48,779 --> 00:27:51,450
not there's no reason for us to break

00:27:50,519 --> 00:27:58,409
here so I'm going to delete that

00:27:51,450 --> 00:27:59,999
breakpoint with B 6 and now if I list

00:27:58,409 --> 00:28:02,220
all the breakpoints we've only got that

00:27:59,999 --> 00:28:05,879
other one and if I want to delete that

00:28:02,220 --> 00:28:08,100
one it's on line 6 right so I can say B

00:28:05,879 --> 00:28:11,309
6 but if I delete it it's still there

00:28:08,100 --> 00:28:12,929
and that's because when I say B 6 it's

00:28:11,309 --> 00:28:15,179
about the file that I'm looking at now

00:28:12,929 --> 00:28:17,970
if I wanted to go delete that one I can

00:28:15,179 --> 00:28:19,590
use F to switch to that file or look

00:28:17,970 --> 00:28:21,570
it's the only one I'm just gonna say B

00:28:19,590 --> 00:28:24,749
star and they're all gone okay no more

00:28:21,570 --> 00:28:28,039
breakpoints let's start over and do

00:28:24,749 --> 00:28:30,419
something a little more complicated

00:28:28,039 --> 00:28:32,770
honestly I keep hitting ctrl D every

00:28:30,419 --> 00:28:35,530
time I want to lead the debugger and it

00:28:32,770 --> 00:28:38,590
it's like a little remember you will die

00:28:35,530 --> 00:28:41,410
moment for me okay so I start this over

00:28:38,590 --> 00:28:45,250
and we're gonna say let's look at PRNG

00:28:41,410 --> 00:28:46,270
random so line eleven that was an

00:28:45,250 --> 00:28:47,800
interesting line right that's where

00:28:46,270 --> 00:28:49,510
although all the hard cryptographic

00:28:47,800 --> 00:28:53,230
number theory work in this program is

00:28:49,510 --> 00:28:56,559
happening so that's where I want to put

00:28:53,230 --> 00:28:59,320
a break and I'm gonna say break on line

00:28:56,559 --> 00:29:01,210
eleven now notice it told me I switched

00:28:59,320 --> 00:29:03,220
to this file so I don't need to worry

00:29:01,210 --> 00:29:06,520
about what final minute just told me put

00:29:03,220 --> 00:29:10,750
a breakpoint on line eleven if X is

00:29:06,520 --> 00:29:12,130
equal to 10 so 10 is real bad for some

00:29:10,750 --> 00:29:13,960
reason and my program when I get 10

00:29:12,130 --> 00:29:16,600
weird things happen so I want to run the

00:29:13,960 --> 00:29:19,660
program until I get to 10 so I do that

00:29:16,600 --> 00:29:22,960
and I list my breakpoints and what do I

00:29:19,660 --> 00:29:24,670
see in that file on this line break if x

00:29:22,960 --> 00:29:26,530
equals 10 terrific just what I expected

00:29:24,670 --> 00:29:29,080
and then I'm going to put an action on

00:29:26,530 --> 00:29:31,059
line 11 so remember an action is like a

00:29:29,080 --> 00:29:33,010
break point but instead of breaking it

00:29:31,059 --> 00:29:34,630
just does something and I say an action

00:29:33,010 --> 00:29:41,020
on line 11 and the action is going to be

00:29:34,630 --> 00:29:43,420
say X is dollar X if X is not 10 okay so

00:29:41,020 --> 00:29:46,150
any time it gets there one of two things

00:29:43,420 --> 00:29:51,340
is going to happen it says whenever I

00:29:46,150 --> 00:29:53,620
reach this file this line if X is 10 I

00:29:51,340 --> 00:29:56,800
will break and otherwise I will print

00:29:53,620 --> 00:30:04,090
well I will say X is 10 if I continue

00:29:56,800 --> 00:30:08,530
this there we go you see it's gonna say

00:30:04,090 --> 00:30:11,290
we had at 14 and 18 14 and 18 at 206 and

00:30:08,530 --> 00:30:14,800
then it stops since we stopped it must

00:30:11,290 --> 00:30:16,990
be the case that X is 10 a terrific and

00:30:14,800 --> 00:30:18,790
if I keep continuing these breakpoints

00:30:16,990 --> 00:30:21,490
they stick around forever

00:30:18,790 --> 00:30:25,600
every time I continue the same loop

00:30:21,490 --> 00:30:28,540
happens perfect all right if I want I

00:30:25,600 --> 00:30:34,270
can step through this a couple times so

00:30:28,540 --> 00:30:34,600
I can keep focus on my terminal here we

00:30:34,270 --> 00:30:37,270
go

00:30:34,600 --> 00:30:39,070
and if I have like step through this a

00:30:37,270 --> 00:30:42,970
few times I don't really know where I am

00:30:39,070 --> 00:30:45,190
in my program I can hit L see what's

00:30:42,970 --> 00:30:48,700
going on I can

00:30:45,190 --> 00:30:51,040
search around for I don't want to look

00:30:48,700 --> 00:30:53,770
for let's say I'm gonna start listing

00:30:51,040 --> 00:30:57,580
from one here's the program I'm at line

00:30:53,770 --> 00:30:59,770
10 and I want to get into this program

00:30:57,580 --> 00:31:02,290
and I want to run it sort of

00:30:59,770 --> 00:31:06,970
continuously so here are my breakpoints

00:31:02,290 --> 00:31:10,630
I'm gonna clear them all continue

00:31:06,970 --> 00:31:13,480
running the program here's a problem my

00:31:10,630 --> 00:31:16,990
program never stops so what am I gonna

00:31:13,480 --> 00:31:19,020
do in that kind of situation I go in

00:31:16,990 --> 00:31:21,960
here and I put a breakpoint on line 10

00:31:19,020 --> 00:31:26,320
and I say continue

00:31:21,960 --> 00:31:29,710
every time I continue I end up at line

00:31:26,320 --> 00:31:31,780
10 inside of here and maybe the program

00:31:29,710 --> 00:31:34,270
terminates after 10,000 iterations but

00:31:31,780 --> 00:31:34,450
it doesn't I can promise you that right

00:31:34,270 --> 00:31:36,610
now

00:31:34,450 --> 00:31:38,110
we know that because only printed out

00:31:36,610 --> 00:31:40,120
what we saw every time is the same five

00:31:38,110 --> 00:31:46,180
numbers in a row so I'm gonna last out

00:31:40,120 --> 00:31:51,520
of it so I run last and what happened am

00:31:46,180 --> 00:31:53,590
I am I actually out of it no I'm still

00:31:51,520 --> 00:32:00,070
inside of here last give me get me out

00:31:53,590 --> 00:32:01,720
of here huh so we have done something

00:32:00,070 --> 00:32:03,220
wrong and we'll have to look into that

00:32:01,720 --> 00:32:04,840
but meanwhile we know a way to get out

00:32:03,220 --> 00:32:06,550
of here we're in the debugger right

00:32:04,840 --> 00:32:08,530
debugger isn't just printing when you

00:32:06,550 --> 00:32:10,210
were inside the debugger you have the

00:32:08,530 --> 00:32:12,910
ability to change the entire state of

00:32:10,210 --> 00:32:15,070
your program it is a terrible power that

00:32:12,910 --> 00:32:18,520
allows you to do things like say assign

00:32:15,070 --> 00:32:21,990
one to I so what I've done this and I

00:32:18,520 --> 00:32:25,180
continue the program actually terminates

00:32:21,990 --> 00:32:27,520
but now I'm wondering why couldn't I

00:32:25,180 --> 00:32:29,560
last out of that loop what is the

00:32:27,520 --> 00:32:31,810
problem that occurred did I have to do

00:32:29,560 --> 00:32:33,640
last three times four times was where

00:32:31,810 --> 00:32:36,460
the lasts that I ran effective in

00:32:33,640 --> 00:32:38,850
assigning to I was not we're gonna look

00:32:36,460 --> 00:32:44,290
into that and I'm look at it this way

00:32:38,850 --> 00:32:48,760
I'm gonna say save try last DB and what

00:32:44,290 --> 00:32:50,170
that has done now is it has saved all

00:32:48,760 --> 00:32:53,170
the commands that we ran in that

00:32:50,170 --> 00:32:56,340
debugging session to a file and what I

00:32:53,170 --> 00:32:58,700
know is I got here

00:32:56,340 --> 00:33:01,650
and I ran a last and it didn't work so

00:32:58,700 --> 00:33:03,299
I'm just gonna delete everything there

00:33:01,650 --> 00:33:05,789
right here's the whole program here's

00:33:03,299 --> 00:33:09,240
what I ran and I want to know why when I

00:33:05,789 --> 00:33:12,090
got there did it did it get weird so I'm

00:33:09,240 --> 00:33:18,090
gonna save this file I'm gonna run the

00:33:12,090 --> 00:33:22,289
debugger again and I'm going to load

00:33:18,090 --> 00:33:23,970
that file this is where I realized I

00:33:22,289 --> 00:33:33,750
forgotten the command to load this file

00:33:23,970 --> 00:33:37,649
and that is deeply embarrassing yeah its

00:33:33,750 --> 00:33:39,360
source it was my first guess so what you

00:33:37,649 --> 00:33:42,299
see here is we see these angle brackets

00:33:39,360 --> 00:33:44,130
and these are indicating to us commands

00:33:42,299 --> 00:33:47,909
that are run for us from the history

00:33:44,130 --> 00:33:50,850
file right we get here and this is where

00:33:47,909 --> 00:33:53,340
we tried saying last and that didn't

00:33:50,850 --> 00:33:56,940
work but what we did do was say I equals

00:33:53,340 --> 00:33:58,620
1 when we continue from there it exits

00:33:56,940 --> 00:34:02,279
so I will have a really brief digression

00:33:58,620 --> 00:34:03,630
and tell you what happened here repple

00:34:02,279 --> 00:34:06,390
right the debugger is a ripple on a

00:34:03,630 --> 00:34:09,389
ripple as a read evaluate print loop and

00:34:06,390 --> 00:34:12,419
when you type last into the command

00:34:09,389 --> 00:34:13,800
prompt I mean it's all just one purl all

00:34:12,419 --> 00:34:16,109
right like your debugger is a subroutine

00:34:13,800 --> 00:34:19,050
running your program and it the bugger

00:34:16,109 --> 00:34:22,139
is a loop and so when you say last the

00:34:19,050 --> 00:34:23,820
debuggers loop sees last and when you

00:34:22,139 --> 00:34:26,820
say last it's kind of leaving some

00:34:23,820 --> 00:34:30,330
command parsing loop and not your

00:34:26,820 --> 00:34:32,460
programs last now maybe you could say we

00:34:30,330 --> 00:34:34,830
could fix us in a bugger and maybe

00:34:32,460 --> 00:34:35,940
that's true but there is no maybe

00:34:34,830 --> 00:34:37,800
involved with the fact that's not

00:34:35,940 --> 00:34:41,490
getting fixed so this is just another

00:34:37,800 --> 00:34:43,080
lesson always label your loops if we

00:34:41,490 --> 00:34:46,080
were to go back into this program and

00:34:43,080 --> 00:34:48,629
add a label to that loop it would work

00:34:46,080 --> 00:34:51,570
just fine we would be able to last num

00:34:48,629 --> 00:34:53,070
and it will exit correctly I'm not

00:34:51,570 --> 00:34:55,379
talking as fast as usual so I'm gonna

00:34:53,070 --> 00:34:58,440
slip skip a couple little bits of slide

00:34:55,379 --> 00:35:02,339
and keep going right saving source they

00:34:58,440 --> 00:35:05,520
were right there in my slides are are

00:35:02,339 --> 00:35:07,560
will restart the de bugger so when you

00:35:05,520 --> 00:35:09,570
run our it's basically saying I'd like

00:35:07,560 --> 00:35:13,170
to start debugging this program

00:35:09,570 --> 00:35:14,790
from the top it's useful it's especially

00:35:13,170 --> 00:35:17,550
useful when starting up your program is

00:35:14,790 --> 00:35:20,850
very slow the caveat that applies here

00:35:17,550 --> 00:35:23,220
is it's just one Perl process right like

00:35:20,850 --> 00:35:26,730
it's just one Perl and it has state and

00:35:23,220 --> 00:35:27,960
if you are lucky restarting the program

00:35:26,730 --> 00:35:29,340
which basically means go back to the

00:35:27,960 --> 00:35:31,440
first line reset all the global

00:35:29,340 --> 00:35:35,120
variables and start over if you're lucky

00:35:31,440 --> 00:35:37,620
or very very careful you can know that

00:35:35,120 --> 00:35:39,060
has cleared all the state your program

00:35:37,620 --> 00:35:41,460
might have but if you have global

00:35:39,060 --> 00:35:43,260
variables that might have weird closures

00:35:41,460 --> 00:35:45,480
in them or you have file handles that

00:35:43,260 --> 00:35:49,560
are sticking around some way weird

00:35:45,480 --> 00:35:51,320
things can ensue I almost never ever use

00:35:49,560 --> 00:35:55,140
restart for the debugger

00:35:51,320 --> 00:35:57,330
you can also rerun so you can say I want

00:35:55,140 --> 00:36:00,300
to rerun this debugging session but I

00:35:57,330 --> 00:36:03,210
want to stop at line N and more

00:36:00,300 --> 00:36:07,020
interestingly you can say you can say

00:36:03,210 --> 00:36:09,450
stop at line minus n so do everything I

00:36:07,020 --> 00:36:11,640
did except the last command write rerun

00:36:09,450 --> 00:36:14,940
minus 1 means run everything I did but

00:36:11,640 --> 00:36:21,830
don't run the last command again so

00:36:14,940 --> 00:36:21,830
we've edited this file we remove last

00:36:23,270 --> 00:36:40,590
now we can source this file it gets us

00:36:36,030 --> 00:36:43,440
here and we last num because we labeled

00:36:40,590 --> 00:36:46,200
that loop and the program exits great

00:36:43,440 --> 00:36:49,200
except I actually wanted to do something

00:36:46,200 --> 00:36:54,270
before we ran this and exited so we're

00:36:49,200 --> 00:36:56,310
gonna rerun minus 1 run the whole

00:36:54,270 --> 00:36:58,680
program but stop one line before we got

00:36:56,310 --> 00:37:02,300
to the end and then I'm gonna list all

00:36:58,680 --> 00:37:05,940
my breakpoints elite all my breakpoints

00:37:02,300 --> 00:37:09,900
delete all my actions put a breakpoint

00:37:05,940 --> 00:37:12,210
on line 13 and then I'm going to last

00:37:09,900 --> 00:37:14,580
out of that loop and then we're gonna

00:37:12,210 --> 00:37:15,210
stop at line 13 all right so this is

00:37:14,580 --> 00:37:18,060
this is

00:37:15,210 --> 00:37:19,680
us putting together the ability to see

00:37:18,060 --> 00:37:21,330
what's going on in the code clear the

00:37:19,680 --> 00:37:24,200
breakpoints set the breakpoints step

00:37:21,330 --> 00:37:24,200
around all that good stuff

00:37:24,620 --> 00:37:36,410
okay so this just had us editing a file

00:37:33,780 --> 00:37:38,880
we are editing our command history file

00:37:36,410 --> 00:37:42,960
and at the beginning I was talking about

00:37:38,880 --> 00:37:45,630
how using the debugger we avoid editing

00:37:42,960 --> 00:37:47,160
files right otherwise we're adding print

00:37:45,630 --> 00:37:48,390
statements and adding print statements

00:37:47,160 --> 00:37:48,810
means editing our source all over the

00:37:48,390 --> 00:37:51,870
place

00:37:48,810 --> 00:37:53,550
and one reason that it's nice to use the

00:37:51,870 --> 00:37:56,430
debugger is not to edit the source right

00:37:53,550 --> 00:37:58,770
you take a program exactly as is we had

00:37:56,430 --> 00:38:02,610
a bug we've had a bug occasionally at

00:37:58,770 --> 00:38:05,220
work where a program runs and fails in a

00:38:02,610 --> 00:38:08,130
predictable way unless you add somewhere

00:38:05,220 --> 00:38:09,240
to it underscore underscore end and not

00:38:08,130 --> 00:38:10,320
somewhere at the end of the program if

00:38:09,240 --> 00:38:12,000
you put underscore underscore end

00:38:10,320 --> 00:38:14,070
underscore underscore the program

00:38:12,000 --> 00:38:16,620
behaves differently and like this is

00:38:14,070 --> 00:38:18,780
insane adding little tiny things seem to

00:38:16,620 --> 00:38:20,580
have no effect to your program should

00:38:18,780 --> 00:38:22,920
have no effect so going and adding a

00:38:20,580 --> 00:38:24,540
print statement like sure it's innocuous

00:38:22,920 --> 00:38:26,130
but it's it's changing the kind of

00:38:24,540 --> 00:38:27,690
buffer that's going on and your standard

00:38:26,130 --> 00:38:29,160
out and it's changing the number of

00:38:27,690 --> 00:38:31,350
lines that have gone it's a dollar dot

00:38:29,160 --> 00:38:33,180
and like it's everything's a mess in

00:38:31,350 --> 00:38:35,790
programming so not touching the program

00:38:33,180 --> 00:38:38,550
is nice but look if we're going to edit

00:38:35,790 --> 00:38:40,560
stuff we can edit stuff and make it

00:38:38,550 --> 00:38:43,740
better right we can edit our program and

00:38:40,560 --> 00:38:47,070
add things to our program to make it

00:38:43,740 --> 00:38:51,300
easier to debug when needed so for

00:38:47,070 --> 00:38:53,550
example we can take this program and we

00:38:51,300 --> 00:38:58,410
can stick into it this line the one of

00:38:53,550 --> 00:39:02,670
the comment that says if x equals 10 set

00:38:58,410 --> 00:39:05,670
dollar DB single to one now dollar DB

00:39:02,670 --> 00:39:06,930
colon colon single is normally not

00:39:05,670 --> 00:39:09,030
interesting at all it's just some

00:39:06,930 --> 00:39:10,590
variable in a global namespace and I

00:39:09,030 --> 00:39:12,600
guess you could use it for passing

00:39:10,590 --> 00:39:14,340
secret messages around but normally it

00:39:12,600 --> 00:39:17,780
means nothing but if you're running

00:39:14,340 --> 00:39:20,190
under the debugger the pro 5 DB debugger

00:39:17,780 --> 00:39:22,080
setting that to tree means I would like

00:39:20,190 --> 00:39:23,820
at this point to switch into single

00:39:22,080 --> 00:39:26,040
statement evaluation in other words

00:39:23,820 --> 00:39:27,630
that's a breakpoint and you can put

00:39:26,040 --> 00:39:28,829
breakpoints into your program that

00:39:27,630 --> 00:39:30,869
basically say

00:39:28,829 --> 00:39:35,009
that a bugger is active this should be a

00:39:30,869 --> 00:39:44,249
breakpoint so we can go and take this

00:39:35,009 --> 00:39:49,019
program right there it is with the with

00:39:44,249 --> 00:39:51,630
this breakpoint in place when we hit

00:39:49,019 --> 00:39:53,910
continue having done nothing inside of

00:39:51,630 --> 00:39:58,440
the debugger it will break at that line

00:39:53,910 --> 00:40:00,479
for us now it is up to you to decide how

00:39:58,440 --> 00:40:02,369
you want to abuse your programs by

00:40:00,479 --> 00:40:04,140
sticking these variables in them but

00:40:02,369 --> 00:40:06,799
when you have problems that are known to

00:40:04,140 --> 00:40:09,660
exist you could put something in here a

00:40:06,799 --> 00:40:13,140
lot more interesting then if X equals 10

00:40:09,660 --> 00:40:14,640
right you can say if some unusual

00:40:13,140 --> 00:40:16,650
condition that happens rarely has

00:40:14,640 --> 00:40:18,329
occurred this is the point if the

00:40:16,650 --> 00:40:20,430
debugger is present to make a breakpoint

00:40:18,329 --> 00:40:22,769
occur this is great when you have those

00:40:20,430 --> 00:40:24,029
bugs that only happen when you haven't

00:40:22,769 --> 00:40:25,890
prepared to see them all right you

00:40:24,029 --> 00:40:27,059
prepare in advance and then any time you

00:40:25,890 --> 00:40:28,140
have the opportunity the program will

00:40:27,059 --> 00:40:30,869
stop here and give you the ability to

00:40:28,140 --> 00:40:33,390
debug it ok so that time I was a little

00:40:30,869 --> 00:40:34,920
underwhelming I acknowledge that right

00:40:33,390 --> 00:40:37,259
it's it's just as a variable you can use

00:40:34,920 --> 00:40:39,660
it for stuff there are a lot of other

00:40:37,259 --> 00:40:41,759
debugger variables that you can set they

00:40:39,660 --> 00:40:44,249
let you change tracing they let you

00:40:41,759 --> 00:40:46,229
change actions dynamically that are

00:40:44,249 --> 00:40:48,269
occurring they let you plug into the

00:40:46,229 --> 00:40:50,069
event loop and kind of say whenever this

00:40:48,269 --> 00:40:52,279
thing changes or happens do something

00:40:50,069 --> 00:40:56,609
I'm not going to show those to you

00:40:52,279 --> 00:40:58,199
because my experience is they have more

00:40:56,609 --> 00:41:00,029
bugs than the program that you are

00:40:58,199 --> 00:41:01,859
debugging I find them very difficult to

00:41:00,029 --> 00:41:04,019
use difficult to understand and like I

00:41:01,859 --> 00:41:05,519
said they're buggy and the problem of

00:41:04,019 --> 00:41:07,829
course is that it's a debugger right and

00:41:05,519 --> 00:41:09,959
you can't debug the debugger with the

00:41:07,829 --> 00:41:12,449
debugger so any bug you put into the

00:41:09,959 --> 00:41:14,069
debuggers there forever this is this is

00:41:12,449 --> 00:41:15,809
the hard truth of debuggers they never

00:41:14,069 --> 00:41:18,989
ever get any better eventually you just

00:41:15,809 --> 00:41:23,279
have to delete them I will show you some

00:41:18,989 --> 00:41:25,259
other things we can do pipe in front of

00:41:23,279 --> 00:41:27,719
any command will pipe it through your

00:41:25,259 --> 00:41:28,199
pager this is more useful than you might

00:41:27,719 --> 00:41:29,940
expect

00:41:28,199 --> 00:41:33,029
or maybe you expect it to be very useful

00:41:29,940 --> 00:41:34,979
it is very useful each will show you the

00:41:33,029 --> 00:41:37,519
history of all the commands you have run

00:41:34,979 --> 00:41:40,410
I will tell you I learned the hard way

00:41:37,519 --> 00:41:42,700
earlier this year that it does not

00:41:40,410 --> 00:41:45,700
include any single letter command

00:41:42,700 --> 00:41:48,670
and since single letter commands pull a

00:41:45,700 --> 00:41:51,490
lot of weight in the debugger using his

00:41:48,670 --> 00:41:52,390
history is a little weird you can use

00:41:51,490 --> 00:41:55,740
bang

00:41:52,390 --> 00:41:58,210
just like in shell to rerun a command

00:41:55,740 --> 00:41:59,590
but it reruns it from that list it

00:41:58,210 --> 00:42:02,140
emitted all the single letter commands

00:41:59,590 --> 00:42:04,570
so you can't just look back up and count

00:42:02,140 --> 00:42:06,760
how many it was so again limited use I

00:42:04,570 --> 00:42:11,290
sent in a patch to fix this to pro/5

00:42:06,760 --> 00:42:14,770
porters and it might go in but it's a

00:42:11,290 --> 00:42:16,150
whole story it can also make aliases and

00:42:14,770 --> 00:42:18,070
these I will talk about a little bit I

00:42:16,150 --> 00:42:19,330
don't use aliases a lot but I use

00:42:18,070 --> 00:42:20,380
aliases when I'm debugging something

00:42:19,330 --> 00:42:21,820
that's going to take me a lot of time

00:42:20,380 --> 00:42:25,180
because they can save you a lot of

00:42:21,820 --> 00:42:26,500
effort so I'm gonna go back to my pseudo

00:42:25,180 --> 00:42:28,630
random number generator it's been really

00:42:26,500 --> 00:42:30,510
useful and I want to refactor it to make

00:42:28,630 --> 00:42:35,260
the whole thing a sort of configurable

00:42:30,510 --> 00:42:37,900
system that'll last 400 years so what I

00:42:35,260 --> 00:42:39,520
do is I pull all the constants out and I

00:42:37,900 --> 00:42:41,620
stick them into a place they can be

00:42:39,520 --> 00:42:43,900
examined outside of the enclosing

00:42:41,620 --> 00:42:45,850
subroutine all right this is pretty

00:42:43,900 --> 00:42:48,550
straightforward there's some package

00:42:45,850 --> 00:42:50,110
variable and the subroutine uses the

00:42:48,550 --> 00:42:53,350
package variable instead of having

00:42:50,110 --> 00:42:59,710
lexical scope so what's gonna happen now

00:42:53,350 --> 00:43:01,960
I run the debugger and I'm going to

00:42:59,710 --> 00:43:05,110
switch over to the pseudo-random number

00:43:01,960 --> 00:43:08,320
generator file and in here I'm gonna

00:43:05,110 --> 00:43:11,500
continue until we get to the random

00:43:08,320 --> 00:43:15,460
subroutine and in here we're now inside

00:43:11,500 --> 00:43:16,870
of random I can say V capital B show me

00:43:15,460 --> 00:43:20,500
all the package variables there's only

00:43:16,870 --> 00:43:20,950
one great I'm going to continue to run

00:43:20,500 --> 00:43:23,500
the program

00:43:20,950 --> 00:43:25,120
until I get back into the main program

00:43:23,500 --> 00:43:28,540
we see that's happened here I've entered

00:43:25,120 --> 00:43:31,000
PRNG and here I can say there's some

00:43:28,540 --> 00:43:33,130
lexical x' Y will show me those lexical

00:43:31,000 --> 00:43:35,170
x' great and at this point

00:43:33,130 --> 00:43:38,830
I want to see those package variables

00:43:35,170 --> 00:43:42,160
again so I'm gonna type examine PRNG

00:43:38,830 --> 00:43:43,900
config and alright so what's happened

00:43:42,160 --> 00:43:45,280
here is I get a list right remember how

00:43:43,900 --> 00:43:46,690
we saw that much earlier we get a list

00:43:45,280 --> 00:43:49,270
of things and dumps them this is a

00:43:46,690 --> 00:43:51,730
terrible way to view a hash if I make it

00:43:49,270 --> 00:43:54,760
a reference we get something much more

00:43:51,730 --> 00:43:55,940
useful and like this is a line you could

00:43:54,760 --> 00:43:57,829
imagine me wanting to

00:43:55,940 --> 00:43:59,750
over and over while debugging this

00:43:57,829 --> 00:44:01,609
program right if that's storing global

00:43:59,750 --> 00:44:02,960
state of the program and I have some way

00:44:01,609 --> 00:44:04,789
to say show me the global state of the

00:44:02,960 --> 00:44:07,039
program great I wanna run all the time

00:44:04,789 --> 00:44:09,500
so let's make an alias for that and an

00:44:07,039 --> 00:44:11,809
alias might look like this I'm gonna say

00:44:09,500 --> 00:44:15,079
equals make an alias and I'm gonna call

00:44:11,809 --> 00:44:20,079
it Z Z cuz that's cool the alias is

00:44:15,079 --> 00:44:22,940
going to run examine a reference to PRNG

00:44:20,079 --> 00:44:26,450
config right so here's all the parts

00:44:22,940 --> 00:44:31,250
make an alias the alias is called Z Z

00:44:26,450 --> 00:44:34,880
and the alias is to this so I run this

00:44:31,250 --> 00:44:36,530
and then I try running is easy and I

00:44:34,880 --> 00:44:40,099
went back to having that stupid list

00:44:36,530 --> 00:44:43,039
form not fair so let's look at this I'm

00:44:40,099 --> 00:44:43,819
gonna take this variable here and how do

00:44:43,039 --> 00:44:46,460
I fix this

00:44:43,819 --> 00:44:50,660
I guess there's a couple ways right I

00:44:46,460 --> 00:44:53,960
could I could add another back wack

00:44:50,660 --> 00:44:57,740
would that do it yeah okay that's great

00:44:53,960 --> 00:45:01,220
I guess another option is maybe I could

00:44:57,740 --> 00:45:03,799
wrap this in square brigly braces how

00:45:01,220 --> 00:45:04,010
did that how did that work oh not so

00:45:03,799 --> 00:45:09,339
good

00:45:04,010 --> 00:45:12,109
maybe thanks to block okay so I do this

00:45:09,339 --> 00:45:13,880
Z Z all right so I'm established two

00:45:12,109 --> 00:45:16,369
ways to do this neither of which makes

00:45:13,880 --> 00:45:19,220
sense one is up here I can use a double

00:45:16,369 --> 00:45:21,410
double back wack when I set up my my

00:45:19,220 --> 00:45:25,520
alias down here I can put it inside of a

00:45:21,410 --> 00:45:29,510
plus squiggly brace I I don't know right

00:45:25,520 --> 00:45:31,130
like why did I have to do that let's

00:45:29,510 --> 00:45:32,270
just take a minute and talk about why

00:45:31,130 --> 00:45:36,619
you had to do that because it's a funny

00:45:32,270 --> 00:45:40,430
anecdote if I just run equals it lists

00:45:36,619 --> 00:45:42,319
my it lists my alias is right it's as

00:45:40,430 --> 00:45:44,690
easy as an alias for this thing and that

00:45:42,319 --> 00:45:48,799
works and when I had the version here

00:45:44,690 --> 00:45:52,390
that made sense can I list it now I list

00:45:48,799 --> 00:45:55,190
it that makes sense what's the problem

00:45:52,390 --> 00:45:59,000
well let's make another kind of alias

00:45:55,190 --> 00:46:01,220
first I have an alias that I like to use

00:45:59,000 --> 00:46:06,829
it's in my actual pearl DB which I've

00:46:01,220 --> 00:46:08,059
disabled pieces of because I didn't want

00:46:06,829 --> 00:46:10,250
you to see all the stuff that I normally

00:46:08,059 --> 00:46:12,800
get I've got an alias

00:46:10,250 --> 00:46:15,440
here that instead of configuring at the

00:46:12,800 --> 00:46:17,120
command line of the debugger I have

00:46:15,440 --> 00:46:19,610
generated for me every time I started up

00:46:17,120 --> 00:46:23,360
and it works like this it says load data

00:46:19,610 --> 00:46:25,520
printer and then set an alias called PP

00:46:23,360 --> 00:46:29,000
and when you encounter somebody who's

00:46:25,520 --> 00:46:31,370
trying to use PP use this substitution

00:46:29,000 --> 00:46:34,190
expression against the line that was put

00:46:31,370 --> 00:46:36,610
in at the terminal which says strip off

00:46:34,190 --> 00:46:39,770
PP from the beginning throw that away

00:46:36,610 --> 00:46:42,620
take the rest as dollar one and pass it

00:46:39,770 --> 00:46:44,600
into data printer pee without prototype

00:46:42,620 --> 00:46:46,100
scalar dollar it's it's calling another

00:46:44,600 --> 00:46:49,430
pretty printer okay that's that's what

00:46:46,100 --> 00:46:51,650
you need to know so I'm gonna come back

00:46:49,430 --> 00:46:53,510
here into this program I'm gonna

00:46:51,650 --> 00:46:57,310
redefine my alias in the way that I wish

00:46:53,510 --> 00:47:00,560
it would work whoa

00:46:57,310 --> 00:47:05,810
Wow okay that is not part of my demo I

00:47:00,560 --> 00:47:12,500
have just somehow owned my computer Wow

00:47:05,810 --> 00:47:14,210
okay live demos everybody okay that's

00:47:12,500 --> 00:47:15,950
fine we don't need that here's what

00:47:14,210 --> 00:47:17,180
we're gonna do instead I'm gonna load

00:47:15,950 --> 00:47:19,700
the program actually the program's

00:47:17,180 --> 00:47:22,700
already loaded and I'm just gonna pretty

00:47:19,700 --> 00:47:25,520
print this variable that's what you get

00:47:22,700 --> 00:47:27,620
if you just print it that's what you get

00:47:25,520 --> 00:47:31,940
if you exit the normal debugger built in

00:47:27,620 --> 00:47:33,470
X that's what you get if you use the

00:47:31,940 --> 00:47:35,090
pretty printer I've now stuck in another

00:47:33,470 --> 00:47:36,350
line you see in here I wanted to talk

00:47:35,090 --> 00:47:38,390
more about I'm just not gonna have time

00:47:36,350 --> 00:47:39,530
is something Curtis who's on the call

00:47:38,390 --> 00:47:41,180
pointed out to me I've never seen this

00:47:39,530 --> 00:47:45,140
library before but it's pretty nice use

00:47:41,180 --> 00:47:47,000
DB color if I were to have had that when

00:47:45,140 --> 00:47:48,140
I was running this program every time

00:47:47,000 --> 00:47:49,760
you list the program you have it

00:47:48,140 --> 00:47:51,710
automatically sent out toileted for you

00:47:49,760 --> 00:47:53,990
in these terrible terrible colors but

00:47:51,710 --> 00:47:55,190
I'm sure I could configure somehow I'm

00:47:53,990 --> 00:47:56,840
gonna turn it off because I find the

00:47:55,190 --> 00:48:01,250
color is a little too off-putting and I

00:47:56,840 --> 00:48:02,960
haven't configured it yet okay I'm a

00:48:01,250 --> 00:48:06,290
little bit bummed out that I didn't have

00:48:02,960 --> 00:48:08,180
time to that I was not able for this

00:48:06,290 --> 00:48:10,820
insane reason to show you what's going

00:48:08,180 --> 00:48:12,890
on maybe I should stop talking about

00:48:10,820 --> 00:48:16,010
that because I think I have two minutes

00:48:12,890 --> 00:48:17,270
left is that right and instead I'll move

00:48:16,010 --> 00:48:19,460
on with some other bits that are better

00:48:17,270 --> 00:48:22,600
I'll tell you in chat later about the

00:48:19,460 --> 00:48:31,880
alias thing it's great

00:48:22,600 --> 00:48:32,780
okay moose so if you know my code you

00:48:31,880 --> 00:48:34,760
know that this is probably how I

00:48:32,780 --> 00:48:36,230
actually would have written it there

00:48:34,760 --> 00:48:38,540
would have been a moose class called

00:48:36,230 --> 00:48:40,400
PRNG that has a bunch of member

00:48:38,540 --> 00:48:41,840
variables that define how the

00:48:40,400 --> 00:48:44,090
pseudo-random number generator is gonna

00:48:41,840 --> 00:48:46,250
work then there'd be a role and the role

00:48:44,090 --> 00:48:48,770
is like for a thing that keeps a log and

00:48:46,250 --> 00:48:50,450
a thing that keeps a log has some of its

00:48:48,770 --> 00:48:51,880
own state and has a method to log a

00:48:50,450 --> 00:48:54,830
value and then there'd be a

00:48:51,880 --> 00:48:57,380
pseudo-random number generator and that

00:48:54,830 --> 00:48:59,180
itself would be a pseudo-random number

00:48:57,380 --> 00:49:01,130
generator that keeps a log so it's

00:48:59,180 --> 00:49:04,250
pseudo-random number generator with log

00:49:01,130 --> 00:49:06,920
and it applies advice to the random

00:49:04,250 --> 00:49:09,740
method saying first get the number then

00:49:06,920 --> 00:49:11,810
log it then return it right if you think

00:49:09,740 --> 00:49:14,260
this feels like some super overly

00:49:11,810 --> 00:49:18,020
engineered and enterprise-grade garbage

00:49:14,260 --> 00:49:21,080
welcome to all the code that I write if

00:49:18,020 --> 00:49:23,570
we take this program and we load that

00:49:21,080 --> 00:49:27,280
kind of number generator and we run with

00:49:23,570 --> 00:49:29,360
it and we want to debug that program

00:49:27,280 --> 00:49:30,530
you're gonna encounter a problem I'm

00:49:29,360 --> 00:49:33,530
gonna show you the last couple things

00:49:30,530 --> 00:49:35,780
that you really need to see assuming

00:49:33,530 --> 00:49:36,890
assuming I can load moose with this

00:49:35,780 --> 00:49:39,140
apparently memory constrained

00:49:36,890 --> 00:49:41,390
environment also if you've been noticing

00:49:39,140 --> 00:49:43,640
on this beautiful twenty20 era MacBook

00:49:41,390 --> 00:49:44,810
Pro how quickly the debugger loads now

00:49:43,640 --> 00:49:46,490
we're gonna load the debugger with moose

00:49:44,810 --> 00:49:47,690
so just pay attention from the sound of

00:49:46,490 --> 00:49:51,530
the enter until you see the prompt

00:49:47,690 --> 00:49:52,760
appear there's a good point two seconds

00:49:51,530 --> 00:49:54,920
there okay

00:49:52,760 --> 00:49:57,140
so I've loaded this thing and I'm gonna

00:49:54,920 --> 00:49:59,840
use s to see all the subroutines that

00:49:57,140 --> 00:50:02,810
have been loaded in my program it was a

00:49:59,840 --> 00:50:05,930
lot if you pipe s they're gonna go to

00:50:02,810 --> 00:50:07,970
the pager here's all the subroutines

00:50:05,930 --> 00:50:11,240
that have been loaded by virtue of

00:50:07,970 --> 00:50:16,580
loading this monstrosity how many of

00:50:11,240 --> 00:50:18,530
them 2480 how about all the modules so

00:50:16,580 --> 00:50:20,150
Big M tells you all the modules loaded

00:50:18,530 --> 00:50:22,550
in the program and it also tells you

00:50:20,150 --> 00:50:25,790
their version so for example I've loaded

00:50:22,550 --> 00:50:28,250
Auto loaded p.m. which is version five

00:50:25,790 --> 00:50:29,570
point seven four from this file

00:50:28,250 --> 00:50:31,640
effectively what it's doing is its

00:50:29,570 --> 00:50:34,380
dumping out key values where the keys

00:50:31,640 --> 00:50:36,660
are file names and the values are

00:50:34,380 --> 00:50:38,150
version from full path which is possibly

00:50:36,660 --> 00:50:40,800
the worst format that could have been to

00:50:38,150 --> 00:50:43,290
have been designed for you but I mean

00:50:40,800 --> 00:50:45,060
it's better than nothing right so fine

00:50:43,290 --> 00:50:47,520
here's our program and we're going to

00:50:45,060 --> 00:50:49,740
continue on to line 15 that's where we

00:50:47,520 --> 00:50:52,680
call the pseudo-random number random

00:50:49,740 --> 00:50:56,250
routine so we get here and then we're

00:50:52,680 --> 00:50:57,420
going to well we can print the

00:50:56,250 --> 00:51:00,000
pseudo-random number generator and

00:50:57,420 --> 00:51:02,700
that's garbage okay we can examine it

00:51:00,000 --> 00:51:05,310
and that's a little better we can peepee

00:51:02,700 --> 00:51:06,780
it which is not so bad that gives us

00:51:05,310 --> 00:51:07,950
some information but it's missing a lot

00:51:06,780 --> 00:51:10,290
of stuff we know that there are methods

00:51:07,950 --> 00:51:13,020
on here that we don't see if we wanted

00:51:10,290 --> 00:51:15,300
to see all the methods we can use m/m

00:51:13,020 --> 00:51:17,640
tells you all the methods on an object

00:51:15,300 --> 00:51:19,440
in the debugger and this is like this is

00:51:17,640 --> 00:51:21,330
the debugger command that I feel most

00:51:19,440 --> 00:51:23,250
people don't know about and should it's

00:51:21,330 --> 00:51:26,460
kind of a pain but it's really really

00:51:23,250 --> 00:51:30,000
useful there it is right show me all the

00:51:26,460 --> 00:51:32,730
methods and where they came from so we

00:51:30,000 --> 00:51:34,350
want to step into this code and here we

00:51:32,730 --> 00:51:37,620
go step into it

00:51:34,350 --> 00:51:41,120
ah what happened right we were expecting

00:51:37,620 --> 00:51:44,520
that we were gonna step into maybe PRNG

00:51:41,120 --> 00:51:46,230
random or PRNG with log random but we

00:51:44,520 --> 00:51:49,290
didn't get either of those right we got

00:51:46,230 --> 00:51:51,990
this monstrosity and why did we get this

00:51:49,290 --> 00:51:54,090
monstrosity it's because remember how we

00:51:51,990 --> 00:51:56,850
wrapped that subroutine in a method

00:51:54,090 --> 00:52:00,530
modifier we said around it's that things

00:51:56,850 --> 00:52:03,060
just look at it right this we passed in

00:52:00,530 --> 00:52:04,680
an anonymous subroutine and once you

00:52:03,060 --> 00:52:06,240
have anonymous subroutines especially

00:52:04,680 --> 00:52:08,190
ones that are calling anonymous

00:52:06,240 --> 00:52:10,200
subroutines that are generated by named

00:52:08,190 --> 00:52:12,750
routines that call more anonymous

00:52:10,200 --> 00:52:14,250
subroutines like everything gets real

00:52:12,750 --> 00:52:17,430
complicated so that's where you wanted

00:52:14,250 --> 00:52:19,980
this one last thing which is capital T T

00:52:17,430 --> 00:52:21,030
shows you where you are in the stack of

00:52:19,980 --> 00:52:24,810
the program what's your what's your

00:52:21,030 --> 00:52:28,830
return stack this is showing us the

00:52:24,810 --> 00:52:31,050
debugger is always here right yeah I

00:52:28,830 --> 00:52:34,020
could have set down a little further the

00:52:31,050 --> 00:52:37,290
debugger is here and then here is this

00:52:34,020 --> 00:52:38,610
thing with random log and if I were to

00:52:37,290 --> 00:52:40,860
step down a little further into this

00:52:38,610 --> 00:52:43,530
I've been told to shut up so let's do it

00:52:40,860 --> 00:52:45,539
we quit this and we start over we could

00:52:43,530 --> 00:52:48,659
say show me

00:52:45,539 --> 00:52:50,339
the whiff log class so here it is and

00:52:48,659 --> 00:52:53,519
what we know is we want to continue on

00:52:50,339 --> 00:52:55,979
until let's say line 12 or actually

00:52:53,519 --> 00:52:57,689
going to have a value and we log it so

00:52:55,979 --> 00:53:00,029
we're gonna put a breakpoint on line 12

00:52:57,689 --> 00:53:02,779
and then we continue and again we've

00:53:00,029 --> 00:53:05,969
ended up in some anonymous subroutine

00:53:02,779 --> 00:53:08,489
but when we look at the stack trace we

00:53:05,969 --> 00:53:10,799
can see here's the debugger which is

00:53:08,489 --> 00:53:13,109
inside of an around modifier which is

00:53:10,799 --> 00:53:15,299
calling being called from this

00:53:13,109 --> 00:53:17,130
subroutine it's been politely given a

00:53:15,299 --> 00:53:18,869
name by mousse which is being called

00:53:17,130 --> 00:53:21,269
because we call this and in the leftmost

00:53:18,869 --> 00:53:25,380
column what you see is the context in

00:53:21,269 --> 00:53:26,849
which everything has been called as with

00:53:25,380 --> 00:53:28,859
many things in the profile debugger the

00:53:26,849 --> 00:53:30,179
output is terrible the means that by

00:53:28,859 --> 00:53:32,609
which you can use it are kind of a

00:53:30,179 --> 00:53:35,549
nightmare but it is the most likely

00:53:32,609 --> 00:53:37,949
available tool to solve the problems

00:53:35,549 --> 00:53:41,429
you're gonna have and it can be wrangled

00:53:37,949 --> 00:53:42,839
to solve them I think I have - three

00:53:41,429 --> 00:53:45,449
minutes left and should probably stop

00:53:42,839 --> 00:53:46,619
just about now so I'm gonna flip through

00:53:45,449 --> 00:53:50,549
a bunch of these slides I'll put these

00:53:46,619 --> 00:53:52,319
slides online somewhere um yeah there's

00:53:50,549 --> 00:53:53,639
help here's a bunch of more stuff I

00:53:52,319 --> 00:53:55,289
didn't talk about there is help in the

00:53:53,639 --> 00:53:56,429
debugger the help is terrible don't

00:53:55,289 --> 00:54:05,779
bother

00:53:56,429 --> 00:54:11,279
there is also there's a book this book

00:54:05,779 --> 00:54:12,359
by Andy Lester and Richard Foley is it's

00:54:11,279 --> 00:54:17,039
the best book you're gonna find on the

00:54:12,359 --> 00:54:19,019
topic it it's not the best book about

00:54:17,039 --> 00:54:20,989
Perl but it answers a lot of questions

00:54:19,019 --> 00:54:24,449
about the bugger

00:54:20,989 --> 00:54:26,099
okay that's it I should stop there

00:54:24,449 --> 00:54:27,689
there's actually a lot more but like I

00:54:26,099 --> 00:54:28,999
said I always run over and that's how

00:54:27,689 --> 00:54:31,739
life is

00:54:28,999 --> 00:54:33,449
I'm happy to take questions until they

00:54:31,739 --> 00:54:36,119
tell me to stop which they might as soon

00:54:33,449 --> 00:54:38,279
as I finish this sentence we have one

00:54:36,119 --> 00:54:44,549
minutes so we can take one case you know

00:54:38,279 --> 00:54:46,799
who has the best question it is not

00:54:44,549 --> 00:54:49,109
online yet but I will put it online and

00:54:46,799 --> 00:54:51,509
I will say on slack where and when it

00:54:49,109 --> 00:54:55,799
has gone online before the end of

00:54:51,509 --> 00:54:59,569
business day got a great speech thank

00:54:55,799 --> 00:54:59,569
you so much it picks everybody

00:55:01,200 --> 00:55:05,250

YouTube URL: https://www.youtube.com/watch?v=LtAGbUYTnR0


