Title: Andrea Telatin - Conda install my-module - Lightning Talks - Day 2
Publication date: 2020-06-25
Playlist: TPC 2020 in the Cloud
Description: 
	Perl has a long history of serving the bioinformatics community, and nowadays "Miniconda" has become the most used package and dependency manager for bioinformaticians, with a very active channel called "BioConda". In this lighting talk I'll use BioConda as an example of bringing Perl tools (and modules) to Miniconda. 

In spite of Miniconda being born in the Python world, 10% of all Bioconda packages are Perl modules, and several highly downloaded programs are written in Perl.
Captions: 
	00:00:00,680 --> 00:00:06,330
hello everyone this is my first pro

00:00:04,410 --> 00:00:10,590
conference and really excited so be

00:00:06,330 --> 00:00:12,780
patiently by mess up something I'm under

00:00:10,590 --> 00:00:15,630
at 18 I'm a molecular biologist turned

00:00:12,780 --> 00:00:20,039
by fermentation I try to code in Perl

00:00:15,630 --> 00:00:21,689
since 2004 and I still love it today I'd

00:00:20,039 --> 00:00:24,680
like to share an alternative way of

00:00:21,689 --> 00:00:26,670
distributing pro software and Perl tools

00:00:24,680 --> 00:00:29,429
coming from the experience of the

00:00:26,670 --> 00:00:31,679
informatics community I belong to so

00:00:29,429 --> 00:00:33,930
fine fermentations have a problem that

00:00:31,679 --> 00:00:36,930
is there is a massive amount of software

00:00:33,930 --> 00:00:38,040
tools between to use simultaneously they

00:00:36,930 --> 00:00:41,250
also depend on a lot of different

00:00:38,040 --> 00:00:43,230
software and usually we need multiple

00:00:41,250 --> 00:00:45,719
version of the same tool for different

00:00:43,230 --> 00:00:48,000
pipelines and as a career developer I

00:00:45,719 --> 00:00:49,469
had a specific problem as well that is

00:00:48,000 --> 00:00:51,719
sometimes I made a script that I wanted

00:00:49,469 --> 00:00:54,120
to share and I knew that if I wanted to

00:00:51,719 --> 00:00:56,850
share to people that weren't developing

00:00:54,120 --> 00:01:01,050
stuff they would struggle installation

00:00:56,850 --> 00:01:03,539
per modules so globally the solution is

00:01:01,050 --> 00:01:06,090
nowadays using condor that is both a

00:01:03,539 --> 00:01:10,250
package manager and an environment

00:01:06,090 --> 00:01:13,590
manager it runs in the user space so no

00:01:10,250 --> 00:01:15,210
admin rights required and usually you

00:01:13,590 --> 00:01:18,600
can install a package simply with a

00:01:15,210 --> 00:01:22,409
command and if you want you can create

00:01:18,600 --> 00:01:26,700
environments to isolate different set of

00:01:22,409 --> 00:01:29,040
tools similar to system package manager

00:01:26,700 --> 00:01:31,200
Khan has channels and each channel can

00:01:29,040 --> 00:01:33,689
have multiple packages there is a very

00:01:31,200 --> 00:01:35,670
big channel for general tools called

00:01:33,689 --> 00:01:38,280
Khan default but you can find anything

00:01:35,670 --> 00:01:39,360
from 8 stop to beach PE to imagemagick

00:01:38,280 --> 00:01:42,090
whatever

00:01:39,360 --> 00:01:44,460
and of course by informaticians have

00:01:42,090 --> 00:01:46,200
their channel called by your Conda now I

00:01:44,460 --> 00:01:50,040
should mention the Conda I was born in

00:01:46,200 --> 00:01:52,530
the Python ecosystem but being able to

00:01:50,040 --> 00:01:56,310
install programs written in any language

00:01:52,530 --> 00:01:59,100
it became a tool of choice even for data

00:01:56,310 --> 00:02:02,009
scientists that never ride any line of

00:01:59,100 --> 00:02:04,110
Python so in the back on the channel we

00:02:02,009 --> 00:02:07,770
have more than 7000 packages

00:02:04,110 --> 00:02:11,700
half of them are our libraries but it's

00:02:07,770 --> 00:02:13,890
interesting to notice that 10% are perl

00:02:11,700 --> 00:02:16,170
modules usually needed by other

00:02:13,890 --> 00:02:19,740
programs for example we have capture

00:02:16,170 --> 00:02:21,450
tiny that of course it's not relevant to

00:02:19,740 --> 00:02:23,990
by informatics only but it's it's

00:02:21,450 --> 00:02:27,240
clearly needed by someone someone else

00:02:23,990 --> 00:02:30,390
to make an example of the popularity of

00:02:27,240 --> 00:02:32,220
this system there is a product program

00:02:30,390 --> 00:02:34,140
that they use a lot called praÃ§a it's

00:02:32,220 --> 00:02:37,320
used to annotate bacterial genomes

00:02:34,140 --> 00:02:42,000
anyway it was installed more than 44

00:02:37,320 --> 00:02:44,010
thousand times by conda only and that's

00:02:42,000 --> 00:02:48,360
why I think it's interesting to check

00:02:44,010 --> 00:02:51,440
this opportunity if you have libraries

00:02:48,360 --> 00:02:55,530
or Perl programs that you want to share

00:02:51,440 --> 00:02:58,320
so how does it take to make a package

00:02:55,530 --> 00:03:01,620
for Conda the recipe is simple you need

00:02:58,320 --> 00:03:03,900
two or three files one is a metadata

00:03:01,620 --> 00:03:07,550
file then you have a build script and

00:03:03,900 --> 00:03:10,709
optionally you can have a test script

00:03:07,550 --> 00:03:12,150
but but you can you should specify some

00:03:10,709 --> 00:03:16,620
basic testing the meta file so that's

00:03:12,150 --> 00:03:19,200
why you basically need to the meter YAML

00:03:16,620 --> 00:03:21,120
file looks like this one you need to

00:03:19,200 --> 00:03:24,090
specify the name and the version of your

00:03:21,120 --> 00:03:26,940
package the checksum of course the URL

00:03:24,090 --> 00:03:29,519
and the most important part is the list

00:03:26,940 --> 00:03:34,160
of requirements both external tools and

00:03:29,519 --> 00:03:38,519
promoters that you need once you do this

00:03:34,160 --> 00:03:40,739
you're almost ready to package your tool

00:03:38,519 --> 00:03:42,660
and to upload it but by your condo does

00:03:40,739 --> 00:03:45,360
something more it is every time you

00:03:42,660 --> 00:03:48,299
release a new version either on C pan or

00:03:45,360 --> 00:03:51,720
on github it will fetch it and package

00:03:48,299 --> 00:03:53,910
it for you the build script is very

00:03:51,720 --> 00:03:57,959
simple because if you use the standard

00:03:53,910 --> 00:03:59,400
build PL or make file PL this is like

00:03:57,959 --> 00:04:01,170
like the boilerplate that you can just

00:03:59,400 --> 00:04:04,370
copy and paste and it will work out of

00:04:01,170 --> 00:04:07,290
the box and otherwise you can take

00:04:04,370 --> 00:04:11,730
inspiration from some other program that

00:04:07,290 --> 00:04:13,560
is available out of there so that's it I

00:04:11,730 --> 00:04:16,380
hope you might consider putting your pro

00:04:13,560 --> 00:04:19,799
modules encounter maybe encounter for if

00:04:16,380 --> 00:04:21,810
that's appropriate as they will give to

00:04:19,799 --> 00:04:24,810
it let's say access to a broader user

00:04:21,810 --> 00:04:27,509
base and as a wishful thinking if we

00:04:24,810 --> 00:04:29,879
interesting us to consider condyles

00:04:27,509 --> 00:04:32,849
Perle distribution channel as well so

00:04:29,879 --> 00:04:34,590
for new versions of pearl and maybe +7

00:04:32,849 --> 00:04:38,789
we'll be living there as well

00:04:34,590 --> 00:04:40,199
so concluding thank you very much for

00:04:38,789 --> 00:04:41,909
your attention and especially thank you

00:04:40,199 --> 00:04:44,960
for what you do for making the pur

00:04:41,909 --> 00:04:44,960
community such a nice place

00:04:47,980 --> 00:04:56,779
[Music]

00:04:51,229 --> 00:04:56,779

YouTube URL: https://www.youtube.com/watch?v=zorouyVaGuE


