Title: Konstantin Narkhov - Creating a secure decentralized CMS on Ethereum blockchain with Raku
Publication date: 2020-06-26
Playlist: TPC 2020 in the Cloud
Description: 
	Classic content management systems are centralized. Even if we speak about the cloud services or the systems with replicated databases — does not matter, data and its processing applications/services are hosted on particular server or pool of servers (providers). If you want to make such system decentralized, you will face the technically complex, time-consuming and expensive task with no any guarantees. But on other hand, in centralized system your provider can falsify data: modify it a little, grant open access (compromise data), spoof or delete. Of course, we do not talk about purposeful falsification: emergency (fire at data centre), hacker attack, mass virus or smth. Nevertheless, you can identify full data loss (or a half, 1/10, etc…), but what’s about small tweak or tamper?! Most likely you will operate falsified data as a trusted one.

If you use decentralized content management systems you avoid collisions considered above: data is stored on definitely interpreted, encrypted ledger within distributed network. Blocks can be decrypted with private keys. Each network member has own private key. As at example above, if hacker get private key on one host and falsify data, corrupted data will store in chain and you can (simply or not) identify what data is trusted/corrupted with comparisons or deep data analysis. Chain contains all data changes with timestamps, so if you identify abnormal activity in your server logs — just mark chain segment as potentially falsified. Moreover, if there is no trust in the provider, then nodes with read-only data access can be launched on its servers, i.e. servers will be used as data backup storage.

The Ethereum blockchain platform performs the necessary and sufficient set of utilities and tools for creating decentralized applications that can be used to store and manage tamper-proof data. Ethereum supports private (Proof-of-Authority) networks, features a smart contract functionality, has a mature ecosystem and well-structured documentation, propagates a quick start and, of course, is FOSS.

Within this talk we will discuss the methods and features of implementation secure decentralized content management systems on Ethereum blockchain with Raku Raku language (formerly known as Perl 6).

The practical part of this talk contains a short research in Raku tools for general programming of decentralized web applications. We will consider hybrid data storage model, the ways to reduce application response latency, implementation of both decentralized top-level applications and smart contracts providing low-level access to the blockchain. At the end we will demonstrate the prototype of CMS Pheix — an open decentralized Raku driven system in a public beta version.

This talk primarily aimed at software architects and developers of tamper-proof data systems, as well as Raku enthusiasts who are involved in blockchain technology and decentralization issues.
Captions: 
	00:00:00,709 --> 00:00:07,849
okay hello friends my name is Konstantin

00:00:05,009 --> 00:00:10,230
shortly Kostas I am

00:00:07,849 --> 00:00:15,000
parallel back-end developer at multi

00:00:10,230 --> 00:00:19,949
safecom multi sip a though that also I'm

00:00:15,000 --> 00:00:22,340
working on decentralize it systems where

00:00:19,949 --> 00:00:25,730
the embedded device is its i/o devices

00:00:22,340 --> 00:00:30,349
some devices with specific mission and

00:00:25,730 --> 00:00:35,000
as a hobby I have to work with rokku and

00:00:30,349 --> 00:00:37,739
metallic importing modulus for example

00:00:35,000 --> 00:00:41,219
someone who is from testing some

00:00:37,739 --> 00:00:43,170
knowledge from compressing etc and today

00:00:41,219 --> 00:00:46,230
we will speak about blockchain

00:00:43,170 --> 00:00:52,770
technologies and watching technology in

00:00:46,230 --> 00:00:57,210
prison of Morocco okay we will start

00:00:52,770 --> 00:01:00,719
from what is a content management system

00:00:57,210 --> 00:01:04,019
at home of course who as you know I

00:01:00,719 --> 00:01:07,260
think everybody of you know that every

00:01:04,019 --> 00:01:09,479
website there's no static websites today

00:01:07,260 --> 00:01:14,180
there are an Amex tile sites and web

00:01:09,479 --> 00:01:17,159
sites and every side is driven is run by

00:01:14,180 --> 00:01:23,280
content management system of course so

00:01:17,159 --> 00:01:26,850
we know that this systems have a few

00:01:23,280 --> 00:01:29,189
features for example they have different

00:01:26,850 --> 00:01:31,770
layers of presentational administration

00:01:29,189 --> 00:01:34,290
they have different editors they have

00:01:31,770 --> 00:01:36,119
with scalability or ability features

00:01:34,290 --> 00:01:38,939
they are marvelous modular songs on

00:01:36,119 --> 00:01:41,070
together and of course we know that the

00:01:38,939 --> 00:01:43,579
Royall legacy content management systems

00:01:41,070 --> 00:01:46,470
the couplet a headless architecture of

00:01:43,579 --> 00:01:49,079
this content management system and when

00:01:46,470 --> 00:01:50,790
we are speaking about how to create how

00:01:49,079 --> 00:01:52,890
to do how to deal with content

00:01:50,790 --> 00:01:57,049
management system we should think about

00:01:52,890 --> 00:01:57,049
their art architecture and

00:02:02,450 --> 00:02:10,819
dural 6 or aku ecosystem has has a few

00:02:07,929 --> 00:02:13,700
well known content management system

00:02:10,819 --> 00:02:16,880
that were well but a few years ago that

00:02:13,700 --> 00:02:20,330
not maintained yet and the well at the

00:02:16,880 --> 00:02:23,959
system under active development on the

00:02:20,330 --> 00:02:27,140
slide you see that it's not a big number

00:02:23,959 --> 00:02:31,850
of systems but they are well known in a

00:02:27,140 --> 00:02:35,959
community and they all are used has a

00:02:31,850 --> 00:02:38,270
use cases I should mention that crew

00:02:35,959 --> 00:02:42,290
it's not a content management system in

00:02:38,270 --> 00:02:46,370
a library the framework and I should

00:02:42,290 --> 00:02:48,800
mention a ballad or it's a I think some

00:02:46,370 --> 00:02:55,730
kind of dancer of pro/5 dancer in

00:02:48,800 --> 00:02:58,780
Morocco what when we speaking about when

00:02:55,730 --> 00:03:01,280
we're talking about the benefits of

00:02:58,780 --> 00:03:04,220
contentment sense management systems

00:03:01,280 --> 00:03:06,680
same as on blockchain of course we

00:03:04,220 --> 00:03:12,500
should speak about the privacy security

00:03:06,680 --> 00:03:15,320
at first step and second reliability and

00:03:12,500 --> 00:03:18,410
of course it's the centralization and

00:03:15,320 --> 00:03:21,980
slide a few more features and a few more

00:03:18,410 --> 00:03:26,510
benefits but this way is a main this

00:03:21,980 --> 00:03:28,640
frees general of course the features of

00:03:26,510 --> 00:03:30,620
blockchain and the features to a fusing

00:03:28,640 --> 00:03:32,840
watch and either management and content

00:03:30,620 --> 00:03:35,560
management it's a it's a bit when you

00:03:32,840 --> 00:03:39,079
when your watch and you can track all

00:03:35,560 --> 00:03:43,850
changes all four data sets that store it

00:03:39,079 --> 00:03:46,670
on work chain or you could track any not

00:03:43,850 --> 00:03:50,090
track you could manage accounts all the

00:03:46,670 --> 00:03:52,250
users that connecting that interacting

00:03:50,090 --> 00:03:55,510
with your management system and of

00:03:52,250 --> 00:03:58,940
course there are first frequency like

00:03:55,510 --> 00:04:01,970
when you're using blockchain you when

00:03:58,940 --> 00:04:04,060
you want to store data on work chain you

00:04:01,970 --> 00:04:08,570
need at smart contracts

00:04:04,060 --> 00:04:10,910
support not all ball chains but mostly a

00:04:08,570 --> 00:04:13,459
big amount of them the quantity of them

00:04:10,910 --> 00:04:15,769
a supporting smart contracts but we're

00:04:13,459 --> 00:04:16,160
in this present in this talk I was

00:04:15,769 --> 00:04:19,790
picked

00:04:16,160 --> 00:04:26,270
ethereal it's a back watching technology

00:04:19,790 --> 00:04:30,500
with a smart contracts support okay the

00:04:26,270 --> 00:04:34,640
next thing we will talk about will

00:04:30,500 --> 00:04:36,920
discuss its how of course in the prism

00:04:34,640 --> 00:04:39,980
of content management system how Rocco

00:04:36,920 --> 00:04:45,320
Dillon quit world wide web what features

00:04:39,980 --> 00:04:47,570
what things and what special what the

00:04:45,320 --> 00:04:49,910
show module is truck will have inside a

00:04:47,570 --> 00:04:53,660
routine for interacting with world wide

00:04:49,910 --> 00:04:56,570
web of course the first and the worst

00:04:53,660 --> 00:05:02,300
simple thing is this Jai Jai aware old

00:04:56,570 --> 00:05:03,500
and it's not required have it hasn't any

00:05:02,300 --> 00:05:07,750
requirements and it specific

00:05:03,500 --> 00:05:10,340
requirements for using you need to

00:05:07,750 --> 00:05:12,830
support input standard input and

00:05:10,340 --> 00:05:17,390
standard output streams to interact with

00:05:12,830 --> 00:05:20,600
any web server and sky in the way is the

00:05:17,390 --> 00:05:21,830
simplest way to bring crack ooh into

00:05:20,600 --> 00:05:29,030
World Wide Web

00:05:21,830 --> 00:05:31,490
for example then November's wiki as you

00:05:29,030 --> 00:05:36,590
see the link on the slide it is the

00:05:31,490 --> 00:05:40,220
oldest web web web web application in

00:05:36,590 --> 00:05:43,400
rock'n'roll six it has an own giant

00:05:40,220 --> 00:05:46,370
library and to a library what what what

00:05:43,400 --> 00:05:49,340
it's why we do need the giant library we

00:05:46,370 --> 00:05:51,410
should to interact with world wide web

00:05:49,340 --> 00:05:54,200
to interact with HTTP we need to parse

00:05:51,410 --> 00:05:58,090
headers to create responses to create

00:05:54,200 --> 00:06:02,450
requests and CIA has an own profile

00:05:58,090 --> 00:06:06,110
suggests very useful to use it and the

00:06:02,450 --> 00:06:09,550
member has built in something some some

00:06:06,110 --> 00:06:12,980
some implementation of giant of course

00:06:09,550 --> 00:06:16,550
common gateway interface is old and the

00:06:12,980 --> 00:06:19,010
neck thing what we deal with and if the

00:06:16,550 --> 00:06:22,060
next generation is a passage I we have a

00:06:19,010 --> 00:06:27,740
first genitive cold module that provides

00:06:22,060 --> 00:06:29,390
native calls to a patch mode Jai I don't

00:06:27,740 --> 00:06:29,960
know exactly I don't remember exactly

00:06:29,390 --> 00:06:32,870
the name

00:06:29,960 --> 00:06:35,440
the module of patch montly and it about

00:06:32,870 --> 00:06:39,500
this package tracker package provides

00:06:35,440 --> 00:06:43,250
native course monthly and you using them

00:06:39,500 --> 00:06:44,720
fast joy you skipping not skipping from

00:06:43,250 --> 00:06:47,240
the first time but skipping with the

00:06:44,720 --> 00:06:50,030
next on the next request is getting the

00:06:47,240 --> 00:06:53,599
Intel in those in validation of your

00:06:50,030 --> 00:06:57,229
script you skipping the first stage of

00:06:53,599 --> 00:06:59,180
creating object of environment of enjoys

00:06:57,229 --> 00:07:03,259
internalizing the environment and that's

00:06:59,180 --> 00:07:08,120
why your script becoming faster so it's

00:07:03,259 --> 00:07:10,940
great when using CI it's a great thing

00:07:08,120 --> 00:07:13,880
to migrate from fast Jaya say I think

00:07:10,940 --> 00:07:16,789
time a great start point to emigrate

00:07:13,880 --> 00:07:20,500
from older CGI of traditionals to dry

00:07:16,789 --> 00:07:25,340
too fast to speed up your application

00:07:20,500 --> 00:07:29,419
with minimal changes the next thing I

00:07:25,340 --> 00:07:35,150
know I think you know the black it's in

00:07:29,419 --> 00:07:38,030
purple five black it's like a super glue

00:07:35,150 --> 00:07:41,300
interface to connect any web server to

00:07:38,030 --> 00:07:47,479
any framework with a simple

00:07:41,300 --> 00:07:50,930
specification with with a simple with a

00:07:47,479 --> 00:07:55,490
simple protocol of interacting intricate

00:07:50,930 --> 00:08:01,219
all exchange data in Perl 6 in Iraq who

00:07:55,490 --> 00:08:03,979
have port crossed its support of black

00:08:01,219 --> 00:08:10,840
Perl 6 but with specific language

00:08:03,979 --> 00:08:15,169
specific things like Opie and etc and

00:08:10,840 --> 00:08:18,909
when we use crossed when we think to use

00:08:15,169 --> 00:08:22,310
airs I like it named Braco superglue

00:08:18,909 --> 00:08:26,330
interface we will think about

00:08:22,310 --> 00:08:28,219
rockobatty rocko web appeal web IP for

00:08:26,330 --> 00:08:31,149
Rocco it's a specification how to

00:08:28,219 --> 00:08:35,659
interact webserver how to interact to

00:08:31,149 --> 00:08:41,510
framework and the specific things but in

00:08:35,659 --> 00:08:43,300
a common way Jeff works like environment

00:08:41,510 --> 00:08:46,630
buses like

00:08:43,300 --> 00:08:51,610
in a simple in a traditional passage I

00:08:46,630 --> 00:08:55,210
like n variable been SJ

00:08:51,610 --> 00:08:57,760
up is a subroutine code or a callable

00:08:55,210 --> 00:09:01,420
class but it's not super but it's not

00:08:57,760 --> 00:09:04,870
simple support like a pro five it's a it

00:09:01,420 --> 00:09:07,600
should come to state a it should

00:09:04,870 --> 00:09:11,440
stored in a special file with special

00:09:07,600 --> 00:09:14,640
name so there's a a few tips and tricks

00:09:11,440 --> 00:09:21,640
in welcome to the implementation and

00:09:14,640 --> 00:09:25,180
when the application is running when

00:09:21,640 --> 00:09:28,390
it's returning its return value it's

00:09:25,180 --> 00:09:33,250
like an array of HTTP status headers and

00:09:28,390 --> 00:09:35,710
response body that's all and the four

00:09:33,250 --> 00:09:37,780
things is across services because it's

00:09:35,710 --> 00:09:41,320
not a web technology that's not a web

00:09:37,780 --> 00:09:45,130
technology like a fast Jaya Jaya Jaya

00:09:41,320 --> 00:09:48,670
but it's a framework with their own web

00:09:45,130 --> 00:09:53,410
server it's has own things to interact

00:09:48,670 --> 00:09:55,600
with clients has different a set of

00:09:53,410 --> 00:09:58,510
libraries for building reactivity to

00:09:55,600 --> 00:10:01,540
base to distributing web systems has a

00:09:58,510 --> 00:10:06,970
mount mascot Ural rotor client as I say

00:10:01,540 --> 00:10:09,760
server but in order to full of solid

00:10:06,970 --> 00:10:13,600
model so for example when you use when

00:10:09,760 --> 00:10:16,960
you think to use HTTP server and rotor

00:10:13,600 --> 00:10:20,580
unit installed core of course core it's

00:10:16,960 --> 00:10:24,190
about 20 modulus and HTTP it's about

00:10:20,580 --> 00:10:27,130
sixty modulus and at all it's a great

00:10:24,190 --> 00:10:29,560
quantity over eight a modulus for HTTP

00:10:27,130 --> 00:10:30,340
server and rotor so crow it's great for

00:10:29,560 --> 00:10:32,710
a fast start

00:10:30,340 --> 00:10:37,060
it's absolutely efficient to quick start

00:10:32,710 --> 00:10:41,680
but many dependences and it's many you

00:10:37,060 --> 00:10:46,060
don't need always providing micro and in

00:10:41,680 --> 00:10:50,380
in terms of web protocols and things to

00:10:46,060 --> 00:10:52,840
create web application to create fast

00:10:50,380 --> 00:10:56,170
and speed speed up boosted of web

00:10:52,840 --> 00:10:56,560
publication of course i think about the

00:10:56,170 --> 00:10:59,470
profile

00:10:56,560 --> 00:11:02,140
code of course we should need faster

00:10:59,470 --> 00:11:04,810
technologists we should need special

00:11:02,140 --> 00:11:08,890
things to increase our speed but our

00:11:04,810 --> 00:11:12,340
code but first code working running

00:11:08,890 --> 00:11:14,170
faster the soul code okay and when you

00:11:12,340 --> 00:11:17,500
running the profile link where you

00:11:14,170 --> 00:11:22,510
profile it when you were profiling your

00:11:17,500 --> 00:11:23,320
code you finding the bottlenecks and try

00:11:22,510 --> 00:11:25,600
to avoid them

00:11:23,320 --> 00:11:29,170
so before immigrating to any of

00:11:25,600 --> 00:11:33,700
technology spoke in the mouth I went to

00:11:29,170 --> 00:11:38,230
profile a code okay that's a few actors

00:11:33,700 --> 00:11:43,300
into Rocco and Willie okay the next is a

00:11:38,230 --> 00:11:46,180
how blockchain deals with movie in today

00:11:43,300 --> 00:11:50,160
we focusing on three aspects of any web

00:11:46,180 --> 00:11:54,450
application of any web page and of any

00:11:50,160 --> 00:11:57,040
web service the three aspects Etzel a

00:11:54,450 --> 00:11:59,620
few a few experiments of course aspects

00:11:57,040 --> 00:12:06,190
it's a loading into activity and visual

00:11:59,620 --> 00:12:09,280
stability lcbi dncls and on the slide we

00:12:06,190 --> 00:12:11,980
have a record of rolling so where we

00:12:09,280 --> 00:12:13,740
have a good application or where we need

00:12:11,980 --> 00:12:16,060
improvements or we have a full

00:12:13,740 --> 00:12:18,670
application for example when you page

00:12:16,060 --> 00:12:20,800
loading over four seconds your

00:12:18,670 --> 00:12:24,190
applications poor because the visitor or

00:12:20,800 --> 00:12:26,230
maybe think that it's side the walking

00:12:24,190 --> 00:12:29,260
maybe it's under maintenance on some

00:12:26,230 --> 00:12:32,320
father and he leave it when your

00:12:29,260 --> 00:12:35,040
interactivity wearing so when you're

00:12:32,320 --> 00:12:42,700
through pivot is slow I mean if any

00:12:35,040 --> 00:12:46,620
aspect you page like any chaos on okay a

00:12:42,700 --> 00:12:49,440
case on your page for example any blocks

00:12:46,620 --> 00:12:52,000
flashing some work a loaded some work

00:12:49,440 --> 00:12:55,390
faded out or some focaccia because

00:12:52,000 --> 00:12:59,260
honest unstable connectivity unstable

00:12:55,390 --> 00:13:02,020
connection or that's due to them

00:12:59,260 --> 00:13:07,080
poor code to client code on your page

00:13:02,020 --> 00:13:10,130
and come or multiply out shift it's when

00:13:07,080 --> 00:13:14,450
okay it's if the thing when

00:13:10,130 --> 00:13:16,940
you the page uses a synchronous loading

00:13:14,450 --> 00:13:21,170
for example sunblock is loaded banners

00:13:16,940 --> 00:13:23,330
banner is loaded and the page falls down

00:13:21,170 --> 00:13:27,470
for example bottom that was on a middle

00:13:23,330 --> 00:13:29,870
on a page it drops in a footer and you

00:13:27,470 --> 00:13:34,670
don't see it yet because big banner

00:13:29,870 --> 00:13:39,790
appear there three holes they hold shows

00:13:34,670 --> 00:13:39,790
what timings should your web page

00:13:40,360 --> 00:13:47,950
perform to be well rank it to be

00:13:44,120 --> 00:13:51,800
relevant and not to be bad for the users

00:13:47,950 --> 00:13:53,720
okay and what's about watching huh on

00:13:51,800 --> 00:13:57,920
this case blockchain means latency

00:13:53,720 --> 00:14:00,650
because every blockchain the technology

00:13:57,920 --> 00:14:03,590
appear working wisdom section for

00:14:00,650 --> 00:14:06,730
example in a private network with a few

00:14:03,590 --> 00:14:09,650
nodes with a gasp limits or family way

00:14:06,730 --> 00:14:13,040
we are running five second generation

00:14:09,650 --> 00:14:15,440
intervals or new blocks it means when

00:14:13,040 --> 00:14:19,550
you push any transaction data in

00:14:15,440 --> 00:14:22,450
blockchain will appear in a few in five

00:14:19,550 --> 00:14:25,790
minutes and five minutes is a really

00:14:22,450 --> 00:14:28,580
it's good it's a good period there are a

00:14:25,790 --> 00:14:33,430
few more longer curves like if one

00:14:28,580 --> 00:14:37,100
minute or 15 minutes 15 seconds

00:14:33,430 --> 00:14:43,820
nevertheless actually you got the actual

00:14:37,100 --> 00:14:46,640
data after this period another thing is

00:14:43,820 --> 00:14:50,830
the cost of transactions because we when

00:14:46,640 --> 00:14:54,650
storing some small data for example

00:14:50,830 --> 00:14:58,250
integers for example both results or

00:14:54,650 --> 00:15:01,820
something and other ratings it's not so

00:14:58,250 --> 00:15:05,170
Costabile but when we storing texts when

00:15:01,820 --> 00:15:10,190
we stirring binary data protection cost

00:15:05,170 --> 00:15:12,710
increases and that's why we don't we

00:15:10,190 --> 00:15:15,110
could not store one block of data in one

00:15:12,710 --> 00:15:17,810
transaction we should create many

00:15:15,110 --> 00:15:20,180
transactions block could have contain

00:15:17,810 --> 00:15:24,110
all of them we need two blocks three

00:15:20,180 --> 00:15:28,829
blocks and that's also

00:15:24,110 --> 00:15:31,380
causes the latency about walking to

00:15:28,829 --> 00:15:32,699
Allah's head above and in summary we

00:15:31,380 --> 00:15:35,519
have frontal latency from from

00:15:32,699 --> 00:15:38,850
generation in the second light latency

00:15:35,519 --> 00:15:41,519
from something more complex like data

00:15:38,850 --> 00:15:46,199
like a hardwired network topology or

00:15:41,519 --> 00:15:47,730
client stub and as we see our web

00:15:46,199 --> 00:15:50,760
application our control management

00:15:47,730 --> 00:15:54,570
system will perform two and half seconds

00:15:50,760 --> 00:15:56,910
of loading time floating Bureau

00:15:54,570 --> 00:15:59,760
otherwise the page will down ranking

00:15:56,910 --> 00:16:02,639
object to me okay objectively we cannot

00:15:59,760 --> 00:16:03,209
perform the real-time if the beast in

00:16:02,639 --> 00:16:07,320
real-time

00:16:03,209 --> 00:16:09,570
for example we couldn't output data from

00:16:07,320 --> 00:16:12,180
work chain for example one megabyte data

00:16:09,570 --> 00:16:14,310
from working from watching in two

00:16:12,180 --> 00:16:17,010
seconds but we have a few techniques on

00:16:14,310 --> 00:16:21,300
reading on too few techniques on writing

00:16:17,010 --> 00:16:24,060
when we could mask this latency we could

00:16:21,300 --> 00:16:27,660
not mask this lock for example like the

00:16:24,060 --> 00:16:33,060
loading caching caching compressing or a

00:16:27,660 --> 00:16:36,600
synchronous writes on client s Acronis

00:16:33,060 --> 00:16:38,639
is very simple to implement where

00:16:36,600 --> 00:16:43,310
JavaScript where promises object it's

00:16:38,639 --> 00:16:48,389
working just fine and mom we're good in

00:16:43,310 --> 00:16:54,120
modern browsers as well Rocka we have a

00:16:48,389 --> 00:16:57,000
match a match mount of caching tools if

00:16:54,120 --> 00:16:59,670
you prefer memcached you have a you

00:16:57,000 --> 00:17:02,220
should use as a special module i working

00:16:59,670 --> 00:17:06,390
with radius radius great for me and i

00:17:02,220 --> 00:17:09,329
using the model for radius for

00:17:06,390 --> 00:17:12,419
supporting radius also i will i would

00:17:09,329 --> 00:17:15,030
try to I would I would to speak about

00:17:12,419 --> 00:17:17,040
the populous project I don't know is it

00:17:15,030 --> 00:17:19,650
really maintained is under maintenance

00:17:17,040 --> 00:17:22,500
but it's a great project without any

00:17:19,650 --> 00:17:26,549
specific services it's working with a

00:17:22,500 --> 00:17:30,150
memory like like a radius may be caching

00:17:26,549 --> 00:17:32,309
data in memory and loading keep bucshon

00:17:30,150 --> 00:17:33,030
but time and other things it's great

00:17:32,309 --> 00:17:36,070
yeah

00:17:33,030 --> 00:17:38,650
and the

00:17:36,070 --> 00:17:42,070
I think I'll think about before its

00:17:38,650 --> 00:17:44,980
compression we have a LD a real inept

00:17:42,070 --> 00:17:48,190
model modulae will protects compression

00:17:44,980 --> 00:17:50,650
for example when you try to store texts

00:17:48,190 --> 00:17:53,110
it's a good idea to compress thanks

00:17:50,650 --> 00:17:56,049
before they're storing control on work

00:17:53,110 --> 00:17:58,540
chain this modular I contributing this

00:17:56,049 --> 00:18:04,780
modular it's very very simple was ported

00:17:58,540 --> 00:18:07,770
from more or less efficient label the

00:18:04,780 --> 00:18:13,780
Welsh algorithm or from JavaScript and

00:18:07,770 --> 00:18:20,650
it saves about 20 and 20 percent of data

00:18:13,780 --> 00:18:23,370
on 5 kilobytes in text it's it's so rad

00:18:20,650 --> 00:18:29,590
efficient for using in work chain

00:18:23,370 --> 00:18:32,200
ok the next thing we know what the

00:18:29,590 --> 00:18:35,980
requirements for web words requirements

00:18:32,200 --> 00:18:39,040
for T missus what's requirements what we

00:18:35,980 --> 00:18:41,020
have in rocket to do what we have what

00:18:39,040 --> 00:18:45,520
what tools is what we have to creating

00:18:41,020 --> 00:18:50,890
web pages to creating blockchain tools

00:18:45,520 --> 00:18:53,440
or utilities but we have a also have a

00:18:50,890 --> 00:18:56,340
model modular we have a Metatrader

00:18:53,440 --> 00:18:57,720
modular to interact with the theorem

00:18:56,340 --> 00:19:02,500
from

00:18:57,720 --> 00:19:05,590
application this modular was ported from

00:19:02,500 --> 00:19:09,760
pearl pearl 5 the same name the same

00:19:05,590 --> 00:19:13,870
name metatheorem from Perl 5 about two

00:19:09,760 --> 00:19:17,470
years ago I was a main computer of the

00:19:13,870 --> 00:19:22,080
small and now I is my main contributor

00:19:17,470 --> 00:19:25,710
and this modular provide full stack of

00:19:22,080 --> 00:19:28,840
function methods and procedures to

00:19:25,710 --> 00:19:30,370
interact with a very important way our

00:19:28,840 --> 00:19:36,840
JSON RPC

00:19:30,370 --> 00:19:40,950
IP here is a link to the open repository

00:19:36,840 --> 00:19:44,950
material communicates with pre-installed

00:19:40,950 --> 00:19:48,870
theorem client on the same server and

00:19:44,950 --> 00:19:48,870
solidity compiler of course you

00:19:49,400 --> 00:19:53,810
if you can attend Princeton compiler you

00:19:51,980 --> 00:19:57,470
will work with their precompiled smart

00:19:53,810 --> 00:19:59,800
contracts and if you haven't a appearan

00:19:57,470 --> 00:20:02,720
client on the server you could use

00:19:59,800 --> 00:20:05,810
remote client but your network should be

00:20:02,720 --> 00:20:09,290
stopped that way the requests or

00:20:05,810 --> 00:20:14,300
responses will go to the firewalls

00:20:09,290 --> 00:20:21,200
routers and some other what the model

00:20:14,300 --> 00:20:27,740
for for decentralized application in a

00:20:21,200 --> 00:20:30,020
common we have a four levels on a top

00:20:27,740 --> 00:20:32,410
level we have a rare complication

00:20:30,020 --> 00:20:34,910
then rack application uses metatheorem

00:20:32,410 --> 00:20:37,970
natatorium working interacting with a

00:20:34,910 --> 00:20:42,170
blockchain client via IP C where Jason

00:20:37,970 --> 00:20:44,230
RPC and blockchain client interacting

00:20:42,170 --> 00:20:47,510
with a ledger with a low-level

00:20:44,230 --> 00:20:53,270
blockchain with a smart contracts that

00:20:47,510 --> 00:20:58,370
are storing on this blockchain it's some

00:20:53,270 --> 00:21:00,710
kind of the things are you are you have

00:20:58,370 --> 00:21:03,140
a smart contract you compile inking and

00:21:00,710 --> 00:21:06,350
you're deploying in into the blockchain

00:21:03,140 --> 00:21:08,600
when you want to use the smart comments

00:21:06,350 --> 00:21:12,860
map contract methods or smart contracts

00:21:08,600 --> 00:21:17,270
features you should get byte code foam

00:21:12,860 --> 00:21:19,100
block chain push it to theorem virtual

00:21:17,270 --> 00:21:22,640
machine running on blockchain

00:21:19,100 --> 00:21:27,580
end and then got the results that also

00:21:22,640 --> 00:21:27,580
will push it to blockchain or it will be

00:21:28,090 --> 00:21:34,850
output like a response for a user that's

00:21:31,550 --> 00:21:38,990
for model we would think about it every

00:21:34,850 --> 00:21:40,640
time we're working on blockchain I have

00:21:38,990 --> 00:21:42,860
said about a few words about smart

00:21:40,640 --> 00:21:45,620
contracts but when we speaking about

00:21:42,860 --> 00:21:49,040
control management system we should

00:21:45,620 --> 00:21:52,790
implement something like regal database

00:21:49,040 --> 00:21:53,380
we should have something like a new

00:21:52,790 --> 00:21:56,510
table

00:21:53,380 --> 00:22:00,170
something like drop table select update

00:21:56,510 --> 00:22:04,690
insert remove okay all these features

00:22:00,170 --> 00:22:04,690
that could help us to inter

00:22:08,649 --> 00:22:15,950
Google human everything you use you

00:22:13,340 --> 00:22:17,840
should demand that everything you ever

00:22:15,950 --> 00:22:23,509
think you prefer to interact with the

00:22:17,840 --> 00:22:27,350
regul database and in this case we could

00:22:23,509 --> 00:22:29,059
use created pre-created pre-installed

00:22:27,350 --> 00:22:32,539
press the double docker container with

00:22:29,059 --> 00:22:35,330
everything features you need on this

00:22:32,539 --> 00:22:38,119
slide you have a link to the docker

00:22:35,330 --> 00:22:43,279
registry from where you can pull their

00:22:38,119 --> 00:22:46,850
container with a solidity with a client

00:22:43,279 --> 00:22:50,210
with a setup set stay with the network

00:22:46,850 --> 00:22:53,179
good set up to 4 to local nodes and a

00:22:50,210 --> 00:22:57,279
few helper scripts a few some are con

00:22:53,179 --> 00:23:01,820
contract helpers to run it on your

00:22:57,279 --> 00:23:06,350
workstation inside docker this

00:23:01,820 --> 00:23:09,169
repository contain a few not not clear

00:23:06,350 --> 00:23:11,539
not very good the commutation

00:23:09,169 --> 00:23:18,470
documentation but it is and you could

00:23:11,539 --> 00:23:21,169
try to use it your projects how to how

00:23:18,470 --> 00:23:24,080
we are a testing work change we're smart

00:23:21,169 --> 00:23:25,789
contracts every smart contract here is

00:23:24,080 --> 00:23:29,210
the JavaScript code they respond control

00:23:25,789 --> 00:23:32,330
has an object compile it smart counter

00:23:29,210 --> 00:23:35,779
contract has an object and function and

00:23:32,330 --> 00:23:39,169
we can and we could call the function of

00:23:35,779 --> 00:23:42,200
a smart conduct where object call for

00:23:39,169 --> 00:23:46,369
example we have a calls for reading and

00:23:42,200 --> 00:23:49,269
transactions for riding in a top coat

00:23:46,369 --> 00:23:52,639
it's a simple read funked with argument

00:23:49,269 --> 00:23:55,549
that reads something from blockchain and

00:23:52,639 --> 00:23:59,440
the second code will give us a reading

00:23:55,549 --> 00:24:02,179
fusion it performs the transactions and

00:23:59,440 --> 00:24:04,279
arguments are not arguments for throw

00:24:02,179 --> 00:24:07,220
for transaction but arguments for

00:24:04,279 --> 00:24:10,220
function for example for first argument

00:24:07,220 --> 00:24:13,369
a fart 1 it's a first layer function

00:24:10,220 --> 00:24:16,129
argument the second argument a fart is

00:24:13,369 --> 00:24:17,539
the second argument of Firefox and the

00:24:16,129 --> 00:24:22,309
third

00:24:17,539 --> 00:24:24,679
hache Firth a couple of 4/3 mmm trouble

00:24:22,309 --> 00:24:29,210
is the argument for its end transaction

00:24:24,679 --> 00:24:33,289
helper that in a common common things

00:24:29,210 --> 00:24:35,330
the other things are and in our module

00:24:33,289 --> 00:24:36,710
when we using when we're trying to

00:24:35,330 --> 00:24:38,480
create application of a class

00:24:36,710 --> 00:24:41,659
minimalistic application lower cost we

00:24:38,480 --> 00:24:43,880
asked use call and transaction focal a

00:24:41,659 --> 00:24:48,019
transaction some Universal rocku metals

00:24:43,880 --> 00:24:50,899
for example I prefer to create private

00:24:48,019 --> 00:24:53,630
methods like read what chain and write

00:24:50,899 --> 00:24:56,330
block chain then methods have a few

00:24:53,630 --> 00:24:58,730
arguments for example method argument

00:24:56,330 --> 00:25:02,000
either a function name of a smart

00:24:58,730 --> 00:25:06,710
contract or function in a smart contract

00:25:02,000 --> 00:25:09,799
level data is a arguments to smart

00:25:06,710 --> 00:25:14,000
contract function function and vertex is

00:25:09,799 --> 00:25:18,380
a block boolean that will we will

00:25:14,000 --> 00:25:21,980
performing waiting for a mind for mining

00:25:18,380 --> 00:25:23,360
for example if you want to wait for when

00:25:21,980 --> 00:25:26,840
transaction all the money if you should

00:25:23,360 --> 00:25:30,200
set up this boomin of course inside

00:25:26,840 --> 00:25:33,620
these private methods we have a cost in

00:25:30,200 --> 00:25:39,350
for the Netzarim Metatrader module

00:25:33,620 --> 00:25:42,380
provides a p for interacting there

00:25:39,350 --> 00:25:47,330
watching and we should use it you could

00:25:42,380 --> 00:25:51,110
as we performing the below you could try

00:25:47,330 --> 00:25:53,210
to show to see the code and to read the

00:25:51,110 --> 00:25:55,789
documentation maybe find something

00:25:53,210 --> 00:25:59,149
interesting for you

00:25:55,789 --> 00:26:01,669
nonetheless when you deploy when we

00:25:59,149 --> 00:26:03,529
development something dependable on that

00:26:01,669 --> 00:26:06,230
area you should know what happy it

00:26:03,529 --> 00:26:12,889
provides and how we should use the data

00:26:06,230 --> 00:26:14,630
P public methods of our application

00:26:12,889 --> 00:26:18,380
level class it's like a setter and

00:26:14,630 --> 00:26:21,980
getter I provide on on the slide I

00:26:18,380 --> 00:26:26,240
demonstrate the simplest setter and

00:26:21,980 --> 00:26:30,560
getter for unsigned integer data and a

00:26:26,240 --> 00:26:35,360
few helpers as a

00:26:30,560 --> 00:26:38,690
enjoy in utilizing checking is our bow

00:26:35,360 --> 00:26:42,710
chain note is available set contract

00:26:38,690 --> 00:26:46,970
address for example he helpful and help

00:26:42,710 --> 00:26:50,920
her like a read integer is in this case

00:26:46,970 --> 00:26:54,320
it's useful because from Jason we have

00:26:50,920 --> 00:27:00,290
string a string if I data and sometimes

00:26:54,320 --> 00:27:03,380
it's cause errors cause exceptions so we

00:27:00,290 --> 00:27:05,750
need to type with check type and if it's

00:27:03,380 --> 00:27:14,410
not integer create an interview type

00:27:05,750 --> 00:27:14,410
like a call and method on this value and

00:27:14,620 --> 00:27:21,980
the but good idea to over a constructor

00:27:18,590 --> 00:27:25,790
because when you creating an object of

00:27:21,980 --> 00:27:30,410
your application level class after the

00:27:25,790 --> 00:27:33,200
creating you have a already built param

00:27:30,410 --> 00:27:36,350
object to interact with natatorium

00:27:33,200 --> 00:27:39,080
apiece but maybe it's not a good idea to

00:27:36,350 --> 00:27:41,600
a granny constructor and in other case

00:27:39,080 --> 00:27:43,940
we can use state attribute state

00:27:41,600 --> 00:27:50,120
property sorry state property in our

00:27:43,940 --> 00:27:57,580
class and enjoys it on them first access

00:27:50,120 --> 00:28:03,530
for example this way I think ok and

00:27:57,580 --> 00:28:08,150
summary our rack application had input

00:28:03,530 --> 00:28:11,180
parameters we should grab them and store

00:28:08,150 --> 00:28:14,450
them into parameters it's a contract

00:28:11,180 --> 00:28:18,140
address in blockchain contract address

00:28:14,450 --> 00:28:19,610
is very very useful because without it

00:28:18,140 --> 00:28:23,360
we could not interact with smart

00:28:19,610 --> 00:28:25,520
contract then we need to create our app

00:28:23,360 --> 00:28:28,940
level of a create object of our app

00:28:25,520 --> 00:28:33,590
level class in this case I name it ETH

00:28:28,940 --> 00:28:39,290
minimalistic nevermind maybe another

00:28:33,590 --> 00:28:42,230
name and also we should make a simple

00:28:39,290 --> 00:28:44,010
steps of utilization for example check

00:28:42,230 --> 00:28:47,280
the note is wearable

00:28:44,010 --> 00:28:49,500
something the other for example is our

00:28:47,280 --> 00:28:53,190
contract is the hash or maybe

00:28:49,500 --> 00:28:54,180
I mean not hash like language Rocco or

00:28:53,190 --> 00:28:58,380
pro/5 hash

00:28:54,180 --> 00:29:01,860
I mean in the terms of blockchain maybe

00:28:58,380 --> 00:29:05,610
we need some other testings and battle

00:29:01,860 --> 00:29:08,430
and a lot think is a implementation of

00:29:05,610 --> 00:29:10,470
setter and getter in other word we

00:29:08,430 --> 00:29:14,340
should be set to get value and of course

00:29:10,470 --> 00:29:16,290
we depend upon our own type of forum or

00:29:14,340 --> 00:29:18,540
implementation for example if a warrior

00:29:16,290 --> 00:29:23,310
is working before implementing so

00:29:18,540 --> 00:29:26,760
whether we should handle their roles

00:29:23,310 --> 00:29:29,760
handle their requests types for example

00:29:26,760 --> 00:29:33,930
on post we should set data on get we

00:29:29,760 --> 00:29:37,830
should get on get requests we should get

00:29:33,930 --> 00:29:40,830
data from watching and push it back like

00:29:37,830 --> 00:29:44,120
a response from consoler we don't need

00:29:40,830 --> 00:29:47,580
on console app we don't need any web

00:29:44,120 --> 00:29:51,080
features like roading just a common

00:29:47,580 --> 00:29:51,080
blind arguments or Sampada

00:29:52,100 --> 00:30:01,670
okay and what the generics same as so

00:29:57,600 --> 00:30:07,620
much change should be in this slide I

00:30:01,670 --> 00:30:13,230
show the commonly known types of famous

00:30:07,620 --> 00:30:15,570
architectures I talking small about on

00:30:13,230 --> 00:30:17,940
the first slide but here it's a more

00:30:15,570 --> 00:30:20,760
intersect picture more interesting in

00:30:17,940 --> 00:30:27,690
what aspects every type every chapter

00:30:20,760 --> 00:30:30,330
has a back-end and when we using

00:30:27,690 --> 00:30:34,680
blockchain when we using distributed or

00:30:30,330 --> 00:30:37,710
deaths in transit network we can deploy

00:30:34,680 --> 00:30:44,150
back and on each node of this network

00:30:37,710 --> 00:30:46,740
and this this great benefit of this is a

00:30:44,150 --> 00:30:49,530
secure level is increasing the secure

00:30:46,740 --> 00:30:53,430
level what I what I'm talking about for

00:30:49,530 --> 00:30:57,830
example every node every ethereal node

00:30:53,430 --> 00:31:02,940
have strict access

00:30:57,830 --> 00:31:07,380
it set up a study when we stop and note

00:31:02,940 --> 00:31:10,920
we do many settings on policy on access

00:31:07,380 --> 00:31:14,820
policy we do account we're creating

00:31:10,920 --> 00:31:18,330
occult privileges so when we deploying

00:31:14,820 --> 00:31:20,330
back end on such note we don't need to

00:31:18,330 --> 00:31:23,310
think about is a little bit

00:31:20,330 --> 00:31:24,690
functionality about resolution

00:31:23,310 --> 00:31:27,780
functionality of administrate

00:31:24,690 --> 00:31:31,200
administration layer and back-end if we

00:31:27,780 --> 00:31:33,990
have privileges to read from blockchain

00:31:31,200 --> 00:31:36,900
we will read if you have not privileges

00:31:33,990 --> 00:31:39,450
we don't we have no access and we get

00:31:36,900 --> 00:31:42,390
nothing another way if you have

00:31:39,450 --> 00:31:45,210
privileges to creating transactions will

00:31:42,390 --> 00:31:47,370
can store data otherwise our same as is

00:31:45,210 --> 00:31:50,700
headless as hello cetera modification

00:31:47,370 --> 00:31:54,960
this node and we have just written only

00:31:50,700 --> 00:31:58,530
content in our network of course there

00:31:54,960 --> 00:32:01,500
is a secure and powerful relabel node

00:31:58,530 --> 00:32:04,680
where we have a bridge of privileges to

00:32:01,500 --> 00:32:07,320
run our back-end with write with writing

00:32:04,680 --> 00:32:09,750
and on this node we're able to send

00:32:07,320 --> 00:32:14,730
transaction and modify content and by

00:32:09,750 --> 00:32:16,740
the way we could switch it off this node

00:32:14,730 --> 00:32:19,260
off and no problems for our users

00:32:16,740 --> 00:32:25,140
content will be still available where a

00:32:19,260 --> 00:32:27,560
local copy on real all in all so this is

00:32:25,140 --> 00:32:32,510
term of QuickStart for example we have

00:32:27,560 --> 00:32:35,010
record the star bundle on our on our

00:32:32,510 --> 00:32:38,280
workstation we have green stolid

00:32:35,010 --> 00:32:42,540
material we creating some minimal still

00:32:38,280 --> 00:32:44,670
minimalistic move like attach mystic run

00:32:42,540 --> 00:32:48,660
some code for implemented few metadata

00:32:44,670 --> 00:32:51,960
managing or creating a recipe library

00:32:48,660 --> 00:32:54,930
and as a result we got to secure and

00:32:51,960 --> 00:32:57,450
doesn't provide held is CMS we don't

00:32:54,930 --> 00:33:00,300
need to store password to know we don't

00:32:57,450 --> 00:33:04,110
think we need to think about sessions

00:33:00,300 --> 00:33:06,330
men's roles all the thing that every

00:33:04,110 --> 00:33:09,270
semester has built-in every backpack and

00:33:06,330 --> 00:33:11,460
had a modulus has a components that

00:33:09,270 --> 00:33:14,460
provided these features we

00:33:11,460 --> 00:33:17,220
using the main features of blockchain

00:33:14,460 --> 00:33:19,140
nodes we're using the providing features

00:33:17,220 --> 00:33:21,840
that features that watching nodes

00:33:19,140 --> 00:33:22,650
providing and that's why it's a good

00:33:21,840 --> 00:33:28,230
quick start

00:33:22,650 --> 00:33:31,860
it's a good start for our CMS's for our

00:33:28,230 --> 00:33:33,930
security messes we have a legacy demo

00:33:31,860 --> 00:33:41,190
back-end application prototype available

00:33:33,930 --> 00:33:45,690
at link present on this slide and what

00:33:41,190 --> 00:33:48,000
the benefits of this way or this of this

00:33:45,690 --> 00:33:51,240
famous first of all our data is

00:33:48,000 --> 00:33:54,480
encrypted our data is distributed and we

00:33:51,240 --> 00:34:00,000
have no centralized server if one node

00:33:54,480 --> 00:34:04,920
go down network will be still life we

00:34:00,000 --> 00:34:07,170
have a high K high level of encryption

00:34:04,920 --> 00:34:09,660
with a private case and E which each

00:34:07,170 --> 00:34:12,150
member has own private case so when one

00:34:09,660 --> 00:34:13,350
man one network member will be hacked

00:34:12,150 --> 00:34:17,030
it's no problem

00:34:13,350 --> 00:34:20,790
for example if hacker get a cave of a

00:34:17,030 --> 00:34:25,650
node with a writing privileges no matter

00:34:20,790 --> 00:34:28,230
you if he will curve data falsify data

00:34:25,650 --> 00:34:32,460
but it's stored in you box and chain and

00:34:28,230 --> 00:34:34,679
you can use some operations or do data

00:34:32,460 --> 00:34:38,100
analysis to understand what the very

00:34:34,679 --> 00:34:42,660
data what data is what what is it true

00:34:38,100 --> 00:34:47,070
data of course you can check the hacker

00:34:42,660 --> 00:34:48,990
attack on a blocks and chain provides

00:34:47,070 --> 00:34:51,380
time stepping over all that the changes

00:34:48,990 --> 00:34:54,030
and you end and if you can identify

00:34:51,380 --> 00:34:57,240
abnormal pivoted on your server you just

00:34:54,030 --> 00:35:00,390
mark chain segments and as potentially

00:34:57,240 --> 00:35:08,120
falsified and in future you could skip

00:35:00,390 --> 00:35:08,120
it or use with some restrictions I think

00:35:10,330 --> 00:35:17,830
okay maybe most of us don't want to use

00:35:13,630 --> 00:35:20,320
what chain-like only database like an

00:35:17,830 --> 00:35:22,960
honest storage and that way you should

00:35:20,320 --> 00:35:26,380
think about a hybrid data model for

00:35:22,960 --> 00:35:28,510
example each CMS with watch-chain of

00:35:26,380 --> 00:35:32,890
course should use regular databases and

00:35:28,510 --> 00:35:39,280
flat files why blockchain is good

00:35:32,890 --> 00:35:42,580
because we should store some temporal

00:35:39,280 --> 00:35:45,730
proof data in blockchain not strings not

00:35:42,580 --> 00:35:47,830
text just what results rating test marks

00:35:45,730 --> 00:35:50,170
backtracks changes history another

00:35:47,830 --> 00:35:53,320
something not heavy but something not

00:35:50,170 --> 00:35:59,410
but something is very important in fled

00:35:53,320 --> 00:36:05,920
database we should use something wriggle

00:35:59,410 --> 00:36:10,630
or something fed something heavy like

00:36:05,920 --> 00:36:16,090
images like a big text like I don't know

00:36:10,630 --> 00:36:19,360
etc in flat files fluid files are useful

00:36:16,090 --> 00:36:21,250
in devices with lower sources for

00:36:19,360 --> 00:36:24,100
example Internet of Things devices IO

00:36:21,250 --> 00:36:29,350
devices without this file system without

00:36:24,100 --> 00:36:37,180
a file storages just Rama fast and we we

00:36:29,350 --> 00:36:43,060
could use that file system operates a

00:36:37,180 --> 00:36:45,520
palaces like storages for a data where

00:36:43,060 --> 00:36:51,490
flat file operation like read write

00:36:45,520 --> 00:36:55,810
something similar and of course to

00:36:51,490 --> 00:36:58,390
implement to working with a long chain

00:36:55,810 --> 00:37:00,250
full files and low resources we should

00:36:58,390 --> 00:37:05,800
keep in mind lazy technics as I say

00:37:00,250 --> 00:37:10,330
about a few slides ago we should do not

00:37:05,800 --> 00:37:14,680
store all data in a 1 storage on one

00:37:10,330 --> 00:37:18,940
record we should divide it two parts we

00:37:14,680 --> 00:37:23,620
should store each parts with a efficient

00:37:18,940 --> 00:37:26,770
size for example 100 kilobytes of data

00:37:23,620 --> 00:37:30,750
stores in quantified frames and four

00:37:26,770 --> 00:37:34,480
kilobytes reading is very lower costing

00:37:30,750 --> 00:37:36,610
it could be performing the seconds so no

00:37:34,480 --> 00:37:38,290
problem to store star kilobyte and

00:37:36,610 --> 00:37:41,020
watching but we have a twenty five

00:37:38,290 --> 00:37:43,930
records and this way we should use less

00:37:41,020 --> 00:37:47,080
texting's read one block with network

00:37:43,930 --> 00:37:54,580
show the hyperlink or something other to

00:37:47,080 --> 00:37:58,410
read more this way okay we're going to

00:37:54,580 --> 00:38:04,270
the finish and I would stick about what

00:37:58,410 --> 00:38:07,840
has done already we have a blockchain

00:38:04,270 --> 00:38:13,140
CMS on rocku in a private but version it

00:38:07,840 --> 00:38:17,640
named fakes it's available on URL that

00:38:13,140 --> 00:38:20,500
are shown on slide my presentation is

00:38:17,640 --> 00:38:25,200
presenting from website it's also from

00:38:20,500 --> 00:38:28,930
blockchain it's also in watching now and

00:38:25,200 --> 00:38:31,420
you could check content it's not quite a

00:38:28,930 --> 00:38:38,370
lot of content on the side but something

00:38:31,420 --> 00:38:44,710
interesting you can find there okay the

00:38:38,370 --> 00:38:49,150
architecture of this CMS is similar to

00:38:44,710 --> 00:38:53,380
what I speaking above we have a hybrid

00:38:49,150 --> 00:38:59,710
data model database model we storing on

00:38:53,380 --> 00:39:02,620
blockchain low cost data and we have not

00:38:59,710 --> 00:39:05,620
driven smart contract our private

00:39:02,620 --> 00:39:09,120
network consists over four nodes we have

00:39:05,620 --> 00:39:12,220
a four nodes or three nodes are

00:39:09,120 --> 00:39:16,360
permanent running and one node is on my

00:39:12,220 --> 00:39:19,480
laptop this is a master node I mean one

00:39:16,360 --> 00:39:23,050
of the no.1 of master node from where we

00:39:19,480 --> 00:39:26,500
put pushing transactions another hand we

00:39:23,050 --> 00:39:30,880
have a road to write it's a real neural

00:39:26,500 --> 00:39:36,280
routing module also was ported from Perl

00:39:30,880 --> 00:39:37,750
5 rotor right it's very very expressive

00:39:36,280 --> 00:39:44,500
module and the

00:39:37,750 --> 00:39:46,980
it has a interesting Road handlers for

00:39:44,500 --> 00:39:50,980
example nested floor roads regex and

00:39:46,980 --> 00:39:53,980
some together nowadays I'm maintaining

00:39:50,980 --> 00:39:59,320
this package I'm painting this module

00:39:53,980 --> 00:40:05,310
it's well documented all links all links

00:39:59,320 --> 00:40:08,080
to the gift to the wiki on the slide

00:40:05,310 --> 00:40:11,730
this is our current depends on the

00:40:08,080 --> 00:40:15,100
released dependencies list and that's

00:40:11,730 --> 00:40:17,830
what I have said about a few slides ago

00:40:15,100 --> 00:40:24,010
when we talking about the dependent

00:40:17,830 --> 00:40:35,470
system crore 80 modulus versus about 15

00:40:24,010 --> 00:40:38,830
Mondays and that's the report from web

00:40:35,470 --> 00:40:41,950
run how our sites works we see that we

00:40:38,830 --> 00:40:46,480
have quite quite good performance about

00:40:41,950 --> 00:40:50,020
the three persons about low

00:40:46,480 --> 00:40:56,100
accessibility good practice and full

00:40:50,020 --> 00:41:01,360
cell support lowest ability I mean zero

00:40:56,100 --> 00:41:04,300
in this place speed index low speed

00:41:01,360 --> 00:41:07,210
index and largest can temple paint all

00:41:04,300 --> 00:41:10,420
the things are not doing quiz ball chain

00:41:07,210 --> 00:41:13,690
speed index that's why we use external

00:41:10,420 --> 00:41:16,180
dependencies like Jas and stylesheets

00:41:13,690 --> 00:41:18,420
largest content plan it's like images

00:41:16,180 --> 00:41:22,750
not compressed images and accessibility

00:41:18,420 --> 00:41:26,680
it's bad content okay on the slide we

00:41:22,750 --> 00:41:28,480
see that we have no names for bottom's

00:41:26,680 --> 00:41:35,260
we have a background and foreground

00:41:28,480 --> 00:41:39,880
colors standing handling it's not a

00:41:35,260 --> 00:41:43,690
blockchain issues it's a just we should

00:41:39,880 --> 00:41:49,480
tune up our content here's our map for

00:41:43,690 --> 00:41:51,610
this year we just passed co1 koochoo we

00:41:49,480 --> 00:41:55,060
are private better private better

00:41:51,610 --> 00:42:01,230
release now and supposed to get a better

00:41:55,060 --> 00:42:09,190
public beta on October okay

00:42:01,230 --> 00:42:11,970
quite East a summary as I found out that

00:42:09,190 --> 00:42:14,440
the rock is very friendly for a terror

00:42:11,970 --> 00:42:16,240
actually I would think we have needed to

00:42:14,440 --> 00:42:19,480
start the welcome is provided better to

00:42:16,240 --> 00:42:21,790
the star only net material module it

00:42:19,480 --> 00:42:25,960
should be installed by Zef it's not a

00:42:21,790 --> 00:42:28,690
problem and when you download a racoon

00:42:25,960 --> 00:42:30,580
star we're deploying at your station

00:42:28,690 --> 00:42:34,180
downloading material and you have

00:42:30,580 --> 00:42:38,440
everything to start fruit for post

00:42:34,180 --> 00:42:39,970
development okay it's we have objective

00:42:38,440 --> 00:42:41,800
oriented programming in Rock who have

00:42:39,970 --> 00:42:44,800
fantastic synthetics who have built in

00:42:41,800 --> 00:42:47,350
UTF we have a big numbers in language

00:42:44,800 --> 00:42:49,720
you have Jason user agent provided by

00:42:47,350 --> 00:42:53,740
Oracle star it's really fast start like

00:42:49,720 --> 00:42:57,760
I should compare it with JavaScript when

00:42:53,740 --> 00:43:00,280
we're using NPM for examples we are

00:42:57,760 --> 00:43:01,120
installing with node.js and that's all

00:43:00,280 --> 00:43:06,760
in node.js

00:43:01,120 --> 00:43:11,710
by default but it's also by default in

00:43:06,760 --> 00:43:14,850
Rocco is great also I think it's just

00:43:11,710 --> 00:43:18,490
faster than grow or rust languages and

00:43:14,850 --> 00:43:20,680
another hand-fed it picks the public

00:43:18,490 --> 00:43:22,600
private demo fakes demonstrates that we

00:43:20,680 --> 00:43:25,090
really can implement more or less fast

00:43:22,600 --> 00:43:27,480
web CMS on walk chain with watching

00:43:25,090 --> 00:43:31,600
supports and we have out of the books

00:43:27,480 --> 00:43:38,530
ranking over 50 processes by performance

00:43:31,600 --> 00:43:42,310
it's great for my think ok I would like

00:43:38,530 --> 00:43:45,430
to invite all of you to developing

00:43:42,310 --> 00:43:48,910
processes we need any code review I need

00:43:45,430 --> 00:43:53,040
magic pests everything is welcome if you

00:43:48,910 --> 00:43:55,540
interesting human links if you want

00:43:53,040 --> 00:43:59,130
donate please go to the next section and

00:43:55,540 --> 00:43:59,130
of course I would

00:43:59,460 --> 00:44:05,440
III know I know many of you didn't quiz

00:44:03,040 --> 00:44:08,170
throw five and on this open

00:44:05,440 --> 00:44:15,670
i calling for dealing with Rocco because

00:44:08,170 --> 00:44:21,040
Rocco is really really really rule okay

00:44:15,670 --> 00:44:25,600
this is end the final slide I would like

00:44:21,040 --> 00:44:27,930
to I would like to thank all organizers

00:44:25,600 --> 00:44:30,640
I would like to thank all people that

00:44:27,930 --> 00:44:33,150
create this conference possible create

00:44:30,640 --> 00:44:36,600
this possible life for conference life

00:44:33,150 --> 00:44:39,460
also I would like all attendees and

00:44:36,600 --> 00:44:42,000
thank you for attention I would open

00:44:39,460 --> 00:44:42,000
fashion

00:44:58,470 --> 00:45:06,480
hi this is Larry hi but I'm kind of

00:45:03,480 --> 00:45:15,150
wondering what what you had the monkey

00:45:06,480 --> 00:45:18,270
patch monkey patch sorry sorry what you

00:45:15,150 --> 00:45:21,660
have please repeat what wondering what

00:45:18,270 --> 00:45:24,180
you wondering about just don't hair

00:45:21,660 --> 00:45:25,740
slide with money monkeying in there I

00:45:24,180 --> 00:45:28,890
thought that was about monkey patching

00:45:25,740 --> 00:45:32,369
or monkey typing no no no no that was

00:45:28,890 --> 00:45:40,970
slide slide about the coating I mean

00:45:32,369 --> 00:45:40,970
that one minute okay thanks

00:45:59,440 --> 00:46:07,599
I think this sly do you mean yeah it's a

00:46:03,010 --> 00:46:10,210
simple yeah it's it's a cold it's a very

00:46:07,599 --> 00:46:12,730
similar a simple code like a baby code

00:46:10,210 --> 00:46:16,440
maybe I think monkey coding when a

00:46:12,730 --> 00:46:20,200
program is I think typing code like hey

00:46:16,440 --> 00:46:23,140
I like a simple text it means that the

00:46:20,200 --> 00:46:25,589
code is very simple all of all you need

00:46:23,140 --> 00:46:28,740
is to create a few methods that

00:46:25,589 --> 00:46:35,050
implementing a recipe interaction and

00:46:28,740 --> 00:46:37,569
recipe recipe interaction and methods to

00:46:35,050 --> 00:46:43,420
data management it's not something like

00:46:37,569 --> 00:46:47,400
mum tests like something the monkey

00:46:43,420 --> 00:46:49,809
mocking testing or something other yeah

00:46:47,400 --> 00:46:51,430
there there are not enough words in

00:46:49,809 --> 00:46:54,839
English for everything we need to talk

00:46:51,430 --> 00:46:54,839

YouTube URL: https://www.youtube.com/watch?v=h-ymtopR30o


