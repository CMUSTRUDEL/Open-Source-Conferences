Title: Vadim Belman - Threaded Text Console UI in Raku
Publication date: 2020-06-26
Playlist: TPC 2020 in the Cloud
Description: 
	By the time this description is being written the new project named Vikna is still in deep development status. Though most of the critical components are already in place and more to come in the next months. The project is an experiment in creating a UI toolkit written in Raku from ground up. If succeed it will be the first complete terminal UI toolkit for Raku providing easy way for developers to equip their applications with interactive communication to a user.

Internally, Vikna designed to utilize the most advanced Raku language features with focus on being as much parallelized as possible. Yet, life teaches us the importance of the balance and that too much of parallelization might fight back and harm in many possible ways. But when used properly it pays with performance and extra freedom for user code. Say, some code prints diagnostics info while working. Usually one uses print, or say to send it to the console. But what if the code is multithreaded or otherwise asynchronous? How to sort out the mess of interleaving lines coming from different threads? With Vikna one could have one widget per each thread and use it like:

$widget.say: "Hello world!";
And that’s all!

… Ok, ok! Yes, there should be some boilerplate for starting the application. But basically it winds down to something like:

class MyApp is Vikna::App {
has Channel:D $.connection-queue .= new;
method main {
...; # Your application preparation code
start react {
whenever $.connection-queue - $new-connection { self.start-processing: $new-connection }
}
}
method start_processing($conn) {
my $out = $.desktop.create-child: Vikna::TextScroll, ...;
$out.say: "Let's go!";
start { ...; } # do you work here
}
}

Does it look scary? :)
Captions: 
	00:00:00,000 --> 00:00:05,779
yes I'm ready if everybody else ready

00:00:02,520 --> 00:00:10,980
then let's go

00:00:05,779 --> 00:00:11,730
so once again my name is Becky even

00:00:10,980 --> 00:00:15,360
though it's written

00:00:11,730 --> 00:00:19,890
oops excuse me and I'm going to talk

00:00:15,360 --> 00:00:24,830
about my attempt in creating a text user

00:00:19,890 --> 00:00:28,250
interface written totally in Rikuo Rikuo

00:00:24,830 --> 00:00:31,650
master Rikuo is an implementation

00:00:28,250 --> 00:00:36,090
language is record some people meet mess

00:00:31,650 --> 00:00:40,290
it up so what you see actually on the

00:00:36,090 --> 00:00:45,210
first page displayed here it's a demo

00:00:40,290 --> 00:00:47,690
give just demonstration simple one I

00:00:45,210 --> 00:00:51,329
will show it later

00:00:47,690 --> 00:00:54,690
so usually I think the best idea to tell

00:00:51,329 --> 00:00:59,460
why something is done is to tell how

00:00:54,690 --> 00:01:03,539
things need start and for me it was a

00:00:59,460 --> 00:01:07,080
web scraper I needed at some point and

00:01:03,539 --> 00:01:09,060
web scraper is basically simple thing in

00:01:07,080 --> 00:01:11,700
its nature you get a page view person

00:01:09,060 --> 00:01:14,760
you parse it you get links you submit

00:01:11,700 --> 00:01:18,750
them for not the depletion zone zone so

00:01:14,760 --> 00:01:21,689
I was trying to do it in ruku and

00:01:18,750 --> 00:01:24,210
apparently Rocco is multi-threaded so

00:01:21,689 --> 00:01:27,270
why not start in several threads and do

00:01:24,210 --> 00:01:31,920
it in parallel so speak since up the

00:01:27,270 --> 00:01:35,220
problem the problem is those debug

00:01:31,920 --> 00:01:38,189
outputs they start messing up because I

00:01:35,220 --> 00:01:40,710
never really know which god related to

00:01:38,189 --> 00:01:42,960
what URL there is no way to know this

00:01:40,710 --> 00:01:46,799
because you know one straight another

00:01:42,960 --> 00:01:50,280
straight and lines are interleaved from

00:01:46,799 --> 00:01:51,930
all of them Tata Manza so I wanted some

00:01:50,280 --> 00:01:54,960
kind of interface where I can do

00:01:51,930 --> 00:01:55,920
something like this so that they have

00:01:54,960 --> 00:02:01,460
widgets

00:01:55,920 --> 00:02:02,640
widgets bound to particular thread

00:02:01,460 --> 00:02:06,240
friction

00:02:02,640 --> 00:02:08,310
particular URL for example and I just

00:02:06,240 --> 00:02:10,920
thought put there and you know like Oh

00:02:08,310 --> 00:02:13,750
infection this URL and you know that you

00:02:10,920 --> 00:02:19,900
fake from this location

00:02:13,750 --> 00:02:21,220
not from another one well I'm started

00:02:19,900 --> 00:02:25,840
looking around if we have something

00:02:21,220 --> 00:02:29,590
ready for this and I came across the

00:02:25,840 --> 00:02:32,110
terminal print module not really the

00:02:29,590 --> 00:02:35,920
communit one it doesn't have a widget

00:02:32,110 --> 00:02:38,130
library and it required a lot of hand

00:02:35,920 --> 00:02:42,580
work for pretty much simple operations

00:02:38,130 --> 00:02:47,070
but I've got inspired with it and they

00:02:42,580 --> 00:02:50,350
tried for the first time to implement

00:02:47,070 --> 00:02:51,610
module named camera at the moment they

00:02:50,350 --> 00:02:53,170
didn't know that there is actually

00:02:51,610 --> 00:02:54,600
problem at all with the same name which

00:02:53,170 --> 00:02:57,520
does something different

00:02:54,600 --> 00:03:01,080
well it's user interface it's terminal

00:02:57,520 --> 00:03:05,920
so why why not

00:03:01,080 --> 00:03:09,970
terminal print has own widget it's not

00:03:05,920 --> 00:03:11,950
completely sink but well do something

00:03:09,970 --> 00:03:15,310
so I inherited from terminal print

00:03:11,950 --> 00:03:18,549
widget I implemented first set of simple

00:03:15,310 --> 00:03:21,400
widgets now the scope tests test a text

00:03:18,549 --> 00:03:26,230
scroll which I need it for say operation

00:03:21,400 --> 00:03:30,060
and we do and they attached trust

00:03:26,230 --> 00:03:35,620
approach they went since then do it

00:03:30,060 --> 00:03:38,430
and there was my first application it

00:03:35,620 --> 00:03:38,430
still works

00:03:38,610 --> 00:03:48,459
and it looked like this so basic you

00:03:44,950 --> 00:03:52,900
know text scroll without put it

00:03:48,459 --> 00:03:55,959
demonstrates the same we shake kept for

00:03:52,900 --> 00:04:03,000
always demonstrates transparency of a

00:03:55,959 --> 00:04:03,000
cell on the screen because the first one

00:04:04,650 --> 00:04:08,560
excuse me there would be some delays on

00:04:07,630 --> 00:04:14,890
switching because

00:04:08,560 --> 00:04:18,579
zoom loses screen sometimes what

00:04:14,890 --> 00:04:21,700
problems I came across as well recently

00:04:18,579 --> 00:04:26,590
I discovered the terminal print widget

00:04:21,700 --> 00:04:27,670
it's based on a class named treat it's a

00:04:26,590 --> 00:04:30,790
low level

00:04:27,670 --> 00:04:33,400
in terminal print and grades are

00:04:30,790 --> 00:04:35,800
protected with four monitors model which

00:04:33,400 --> 00:04:39,430
means the kind of global lock on them

00:04:35,800 --> 00:04:42,790
and I wanted full concurrency really

00:04:39,430 --> 00:04:45,150
full without limitations so I didn't

00:04:42,790 --> 00:04:45,150
really like it

00:04:45,420 --> 00:04:52,650
also great itself has certain

00:04:48,460 --> 00:04:57,820
limitations which I also give it like I

00:04:52,650 --> 00:05:02,010
wanted something something more I tried

00:04:57,820 --> 00:05:05,970
to submit a couple of pull requests to

00:05:02,010 --> 00:05:10,350
terminal print module but what I needed

00:05:05,970 --> 00:05:13,990
it was in front in contradiction to what

00:05:10,350 --> 00:05:16,810
the developers of terminal print seem in

00:05:13,990 --> 00:05:19,330
their mind so it's like you know it's

00:05:16,810 --> 00:05:25,450
free not that they want something else

00:05:19,330 --> 00:05:27,760
than I would that's it okay but another

00:05:25,450 --> 00:05:30,990
thing which finally you know like maybe

00:05:27,760 --> 00:05:34,300
well no I have to do something different

00:05:30,990 --> 00:05:37,000
is that when I rely on third-party code

00:05:34,300 --> 00:05:39,210
in my low-level operations it's not

00:05:37,000 --> 00:05:42,520
always possible to do what I need

00:05:39,210 --> 00:05:45,970
exactly what I need so I it was limited

00:05:42,520 --> 00:05:51,850
in my foot's ability and I decided well

00:05:45,970 --> 00:05:55,630
I go my own way and December 9 2019 it's

00:05:51,850 --> 00:05:56,920
the first commit to witness project the

00:05:55,630 --> 00:06:00,910
limb didn't actually comes from

00:05:56,920 --> 00:06:04,960
Ukrainian word hikmah which actually

00:06:00,910 --> 00:06:06,630
means exactly Windows so what we have is

00:06:04,960 --> 00:06:09,280
textual Windows here

00:06:06,630 --> 00:06:14,560
the name cake choose because it's short

00:06:09,280 --> 00:06:17,770
unique energetic and well also it's just

00:06:14,560 --> 00:06:20,470
single word it's not two words I mean

00:06:17,770 --> 00:06:22,600
the module a so it's easier to type like

00:06:20,470 --> 00:06:27,370
weekly well it's easier than Tampa will

00:06:22,600 --> 00:06:29,710
given and I go trait of terminal print

00:06:27,370 --> 00:06:34,410
grids and then I implemented my own

00:06:29,710 --> 00:06:38,950
level drawing primitives named cameras

00:06:34,410 --> 00:06:40,560
and most importantly I kept the idea of

00:06:38,950 --> 00:06:43,319
heaven every

00:06:40,560 --> 00:06:47,370
being written in grotto from ground up

00:06:43,319 --> 00:06:51,719
so canvas though mostly consisting of

00:06:47,370 --> 00:06:54,629
nqp hopes full performance it's still

00:06:51,719 --> 00:06:58,650
pure record there is no C code there is

00:06:54,629 --> 00:07:02,279
no rest code that's pure rock remarkable

00:06:58,650 --> 00:07:04,889
so it's not eventually it's that fast

00:07:02,279 --> 00:07:07,949
and it's be my to it but it's it's much

00:07:04,889 --> 00:07:13,039
faster much much faster then some people

00:07:07,949 --> 00:07:16,740
think of raku dub capabilities for now

00:07:13,039 --> 00:07:20,849
boskie weakness is based on several

00:07:16,740 --> 00:07:24,509
principles the first one is the

00:07:20,849 --> 00:07:26,340
principle which I started with and you

00:07:24,509 --> 00:07:26,969
saw it in the first example of web

00:07:26,340 --> 00:07:29,629
straighter

00:07:26,969 --> 00:07:32,490
I call it kicking goal or cueball

00:07:29,629 --> 00:07:35,069
principle it means that if you need to

00:07:32,490 --> 00:07:37,830
do something you tell the framework to

00:07:35,069 --> 00:07:42,180
do it and you forget about it just

00:07:37,830 --> 00:07:43,740
change this label text and the framework

00:07:42,180 --> 00:07:47,430
does the rest for you

00:07:43,740 --> 00:07:51,270
you don't care everything would be done

00:07:47,430 --> 00:07:53,339
automatically most of it yes of course

00:07:51,270 --> 00:07:54,270
it's not always possible to me to be

00:07:53,339 --> 00:07:56,879
done this way

00:07:54,270 --> 00:07:58,080
people need sometimes you not like most

00:07:56,879 --> 00:08:01,379
basic things

00:07:58,080 --> 00:08:04,500
bla bla different magnification but

00:08:01,379 --> 00:08:07,830
primitives simple operations must be

00:08:04,500 --> 00:08:12,479
simple primitive easy you just tell it

00:08:07,830 --> 00:08:16,409
to do it responsive event hand them it's

00:08:12,479 --> 00:08:19,319
about handing everyone so if you got an

00:08:16,409 --> 00:08:23,849
event on your habits don't do it

00:08:19,319 --> 00:08:26,879
one do it quick if you can do it quick

00:08:23,849 --> 00:08:30,899
if your coach requires you know a one

00:08:26,879 --> 00:08:34,589
run to handle some kind of went spawn on

00:08:30,899 --> 00:08:38,070
a thread and do a drop in that thread

00:08:34,589 --> 00:08:43,529
and then use the result of your drop

00:08:38,070 --> 00:08:45,380
some other way because we must always

00:08:43,529 --> 00:08:48,990
remember that week that we use them and

00:08:45,380 --> 00:08:52,390
we must not irritate the user police

00:08:48,990 --> 00:08:59,110
waiting times we must be

00:08:52,390 --> 00:09:04,690
ah another principal yesterday skip

00:08:59,110 --> 00:09:07,209
Limburg had to talk about parallel

00:09:04,690 --> 00:09:12,190
processing data procession in raccoon

00:09:07,209 --> 00:09:15,220
and I made a comment about rock rock

00:09:12,190 --> 00:09:18,190
OODA in particular actually able of

00:09:15,220 --> 00:09:21,810
managing threads in the way that if your

00:09:18,190 --> 00:09:25,209
code started in one stroke and then it

00:09:21,810 --> 00:09:28,390
went into some kind of waiting of of a

00:09:25,209 --> 00:09:32,800
waiting operation and give up its

00:09:28,390 --> 00:09:35,620
resources back to the thread pool thread

00:09:32,800 --> 00:09:38,790
scheduler it's possible that strategy

00:09:35,620 --> 00:09:41,860
you would change because rocku

00:09:38,790 --> 00:09:44,709
manipulates with stretched it can

00:09:41,860 --> 00:09:49,720
reallocate some code from one thread to

00:09:44,709 --> 00:09:53,140
another thread if it's necessary and the

00:09:49,720 --> 00:09:56,470
pool of threads is actually limited one

00:09:53,140 --> 00:09:59,380
can defy define it make it big and make

00:09:56,470 --> 00:10:04,180
it smaller but one way or another it is

00:09:59,380 --> 00:10:07,209
limited so we must use it with care and

00:10:04,180 --> 00:10:10,570
so if there are any blocking operation

00:10:07,209 --> 00:10:13,149
like you need a lock you better don't

00:10:10,570 --> 00:10:15,579
find another way to do it without a lock

00:10:13,149 --> 00:10:19,779
or if you eventually need a lot

00:10:15,579 --> 00:10:23,769
desperately needed do it quick unlock as

00:10:19,779 --> 00:10:27,899
soon as possible because then this

00:10:23,769 --> 00:10:32,410
straight could be reused by some other

00:10:27,899 --> 00:10:37,089
code why is this important I'll get back

00:10:32,410 --> 00:10:40,120
to it later features the most

00:10:37,089 --> 00:10:43,990
interesting features I was interested in

00:10:40,120 --> 00:10:47,440
implementing canvas canvas support

00:10:43,990 --> 00:10:50,140
invalidations what it mean when you draw

00:10:47,440 --> 00:10:55,810
on canvas one approach is to you know

00:10:50,140 --> 00:10:57,550
you like and terminologically draw in

00:10:55,810 --> 00:10:59,670
and in print you may have two words for

00:10:57,550 --> 00:11:02,440
myself because it's textual interface

00:10:59,670 --> 00:11:05,329
drawing it's the same as imprinted into

00:11:02,440 --> 00:11:11,569
conversation because we draw with

00:11:05,329 --> 00:11:15,889
cymbals so we can imprint at any place

00:11:11,569 --> 00:11:18,829
on campus and we can take an approach

00:11:15,889 --> 00:11:21,290
that what we imprint is always there but

00:11:18,829 --> 00:11:23,989
we can take another approach and this

00:11:21,290 --> 00:11:26,509
one I like more I introduce in real

00:11:23,989 --> 00:11:29,389
editions many people who worked with

00:11:26,509 --> 00:11:33,350
user interfaces know what it is it's an

00:11:29,389 --> 00:11:36,589
area which within which you are allowed

00:11:33,350 --> 00:11:39,819
to draw everything good falls outside of

00:11:36,589 --> 00:11:43,850
this area won't end up on your canvas

00:11:39,819 --> 00:11:46,489
so this first of all its performance

00:11:43,850 --> 00:11:49,160
effective if you don't need to update

00:11:46,489 --> 00:11:50,929
the whole canvas you have there just a

00:11:49,160 --> 00:11:53,720
little part of it and it's much faster

00:11:50,929 --> 00:11:57,980
and also in many situations it

00:11:53,720 --> 00:12:01,160
simplifies user drawing because it's

00:11:57,980 --> 00:12:01,939
often not necessary to care where you

00:12:01,160 --> 00:12:03,829
wanna be

00:12:01,939 --> 00:12:07,009
actually drawing eventually you can draw

00:12:03,829 --> 00:12:09,439
everything but what must not be drawn

00:12:07,009 --> 00:12:11,929
can be just thrown away clearly I like

00:12:09,439 --> 00:12:20,360
in validations those that pretty much

00:12:11,929 --> 00:12:22,819
hard to work with sometimes ok well the

00:12:20,360 --> 00:12:26,509
player instructions apparent but still

00:12:22,819 --> 00:12:29,860
ahead to mention it I really implemented

00:12:26,509 --> 00:12:34,249
clear layers within the framework like

00:12:29,860 --> 00:12:36,889
the layer driver like clear to deal with

00:12:34,249 --> 00:12:39,639
separating system input output some

00:12:36,889 --> 00:12:43,730
additional grant sources stuff with them

00:12:39,639 --> 00:12:47,600
application which does link together

00:12:43,730 --> 00:12:50,169
low level and widgets they stop

00:12:47,600 --> 00:12:53,629
apparently use application or

00:12:50,169 --> 00:12:56,299
application use desktop direction you

00:12:53,629 --> 00:13:01,009
know which use each other and widgets on

00:12:56,299 --> 00:13:03,889
top of it all simple I am this feature

00:13:01,009 --> 00:13:07,669
it's probably one of the best ones I

00:13:03,889 --> 00:13:11,559
like it wasn't me who invented it the

00:13:07,669 --> 00:13:14,059
fish existed and they learned from pro

00:13:11,559 --> 00:13:17,600
graphical user interface project named

00:13:14,059 --> 00:13:18,550
prima which is still being developed and

00:13:17,600 --> 00:13:23,370
supported

00:13:18,550 --> 00:13:26,680
and it makes objecting this ionization

00:13:23,370 --> 00:13:30,070
extremely flexible really extremely

00:13:26,680 --> 00:13:33,370
flexible what's the point when we create

00:13:30,070 --> 00:13:35,830
an object we call constructor and would

00:13:33,370 --> 00:13:39,250
pass a set of named parameters day and

00:13:35,830 --> 00:13:44,770
this said I call profile primal sokolsky

00:13:39,250 --> 00:13:47,590
file we have I have three different

00:13:44,770 --> 00:13:52,380
profiles the default one is the one

00:13:47,590 --> 00:13:56,290
which is defined by a class itself and

00:13:52,380 --> 00:13:58,510
not only the class we have classes we

00:13:56,290 --> 00:14:00,820
have rolls out class contains human

00:13:58,510 --> 00:14:02,650
problems inherit from classes which

00:14:00,820 --> 00:14:08,520
consumes another roles and stuff exact

00:14:02,650 --> 00:14:13,090
and each type object in this emeral

00:14:08,520 --> 00:14:16,720
order inheritance order can participate

00:14:13,090 --> 00:14:20,800
in buildings default profile each one

00:14:16,720 --> 00:14:23,350
can define its own default profile so

00:14:20,800 --> 00:14:25,960
it's even more powerful than one can

00:14:23,350 --> 00:14:30,150
think about we couldn't take another

00:14:25,960 --> 00:14:33,400
profile from a config if you want to and

00:14:30,150 --> 00:14:36,760
we also get the profile submitted when

00:14:33,400 --> 00:14:39,520
actually the constructor is actually

00:14:36,760 --> 00:14:43,960
called the one is coming from directly

00:14:39,520 --> 00:14:47,440
from user code all three profiles are

00:14:43,960 --> 00:14:50,190
get joined together into some kind of

00:14:47,440 --> 00:14:54,010
intermediate profile using deep large

00:14:50,190 --> 00:14:57,400
and then there and undergo checking and

00:14:54,010 --> 00:14:59,680
checking is also could be done by all

00:14:57,400 --> 00:15:03,100
classes and all roles in inheritance

00:14:59,680 --> 00:15:06,280
hierarchy and the task of checking is to

00:15:03,100 --> 00:15:08,380
validate each profile parameter if

00:15:06,280 --> 00:15:10,300
necessary convert them to something else

00:15:08,380 --> 00:15:13,630
like for example if we define color is a

00:15:10,300 --> 00:15:17,320
string we can convert it to color object

00:15:13,630 --> 00:15:22,750
and on the output will get final profile

00:15:17,320 --> 00:15:27,160
which is submitted to our new and that's

00:15:22,750 --> 00:15:29,890
it probably it's not really clear why is

00:15:27,160 --> 00:15:31,370
it useful but if you ever try it I mean

00:15:29,890 --> 00:15:35,600
that's great

00:15:31,370 --> 00:15:38,090
really and the default profile from

00:15:35,600 --> 00:15:40,670
window class for example it looks like

00:15:38,090 --> 00:15:45,020
this so it defines default attributes

00:15:40,670 --> 00:15:50,210
for focused state of window and the home

00:15:45,020 --> 00:15:53,300
state of window and that's it and the

00:15:50,210 --> 00:15:58,790
point is that you need to do less code

00:15:53,300 --> 00:16:01,220
in your constructor and it's the code

00:15:58,790 --> 00:16:03,950
you do is much more flexible because if

00:16:01,220 --> 00:16:06,350
you know that some parameter comes from

00:16:03,950 --> 00:16:08,210
we config you can take it into your mod

00:16:06,350 --> 00:16:14,680
keep it in three month and do something

00:16:08,210 --> 00:16:18,650
maybe some special thing about it next

00:16:14,680 --> 00:16:22,280
feature is each event loop

00:16:18,650 --> 00:16:26,410
he's been around in its own straight and

00:16:22,280 --> 00:16:29,980
you remember I was talking about thrift

00:16:26,410 --> 00:16:33,680
consumption of threads this is why

00:16:29,980 --> 00:16:36,140
almost every widget in the system has a

00:16:33,680 --> 00:16:39,170
stretch attached to it so if you have

00:16:36,140 --> 00:16:41,990
like 100 widgets is going to be 100

00:16:39,170 --> 00:16:44,240
threads and if you don't give them up

00:16:41,990 --> 00:16:45,680
back to thread scheduler if you don't

00:16:44,240 --> 00:16:49,670
take care of them

00:16:45,680 --> 00:16:57,350
it could be you know pretty pretty bad

00:16:49,670 --> 00:16:59,090
see well not only widgets screen driver

00:16:57,350 --> 00:17:01,720
for example his own thread but let's

00:16:59,090 --> 00:17:01,720
mine

00:17:02,080 --> 00:17:10,780
yes in this moment

00:17:05,170 --> 00:17:17,390
let me show you an example how once

00:17:10,780 --> 00:17:22,250
actually work okay we have three windows

00:17:17,390 --> 00:17:29,150
here each window outputs events coming

00:17:22,250 --> 00:17:34,960
to it and each window is actually

00:17:29,150 --> 00:17:34,960
individual thread here

00:17:35,080 --> 00:17:41,270
something like this there is a little

00:17:39,680 --> 00:17:43,880
bit of a problem with the speed of

00:17:41,270 --> 00:17:46,100
Kremlin Mouse for now I mean I didn't

00:17:43,880 --> 00:17:54,740
have time to optimize it so it's

00:17:46,100 --> 00:17:57,830
somewhat slow but otherwise something

00:17:54,740 --> 00:18:00,740
like this also I must note that zoom

00:17:57,830 --> 00:18:03,320
takes a little bit of resources and

00:18:00,740 --> 00:18:07,040
makes things somewhat slow because

00:18:03,320 --> 00:18:09,460
without zoom it stings a little bit

00:18:07,040 --> 00:18:09,460
faster

00:18:10,300 --> 00:18:19,610
another thing about events is that I

00:18:15,050 --> 00:18:22,040
made them prioritized if they have all

00:18:19,610 --> 00:18:25,040
you know flat with a single priority

00:18:22,040 --> 00:18:30,050
there could be situations happen where

00:18:25,040 --> 00:18:33,170
with fruit the widget with minor events

00:18:30,050 --> 00:18:35,930
and something important like her drawing

00:18:33,170 --> 00:18:37,000
didn't get through it gets postponed

00:18:35,930 --> 00:18:41,360
later

00:18:37,000 --> 00:18:43,340
so characterization is three simple

00:18:41,360 --> 00:18:45,500
things for example if we submit five

00:18:43,340 --> 00:18:47,480
events of different priorities where

00:18:45,500 --> 00:18:49,640
default is the lower one comment is a

00:18:47,480 --> 00:18:52,640
bit higher while immediately the most

00:18:49,640 --> 00:18:55,580
high we submit all simply when queue

00:18:52,640 --> 00:18:57,470
immediately by immediately I mean the

00:18:55,580 --> 00:18:59,630
when loop do you have time to pull them

00:18:57,470 --> 00:19:03,260
out of the kill it was busy with

00:18:59,630 --> 00:19:05,450
something and when they went who went

00:19:03,260 --> 00:19:08,000
straight starts pulling events out of

00:19:05,450 --> 00:19:11,510
the queue they must come out in this

00:19:08,000 --> 00:19:14,540
particular order so the Queen with a

00:19:11,510 --> 00:19:16,820
media player it comes Frost's and common

00:19:14,540 --> 00:19:19,100
comes and then the default ones so that

00:19:16,820 --> 00:19:21,080
you know for quit it is important

00:19:19,100 --> 00:19:23,180
because the widget must know that we are

00:19:21,080 --> 00:19:26,720
about to end our rock and if necessary

00:19:23,180 --> 00:19:31,970
do something you know some kind of

00:19:26,720 --> 00:19:35,030
realization to implement this I created

00:19:31,970 --> 00:19:37,640
a spin of module specifically to support

00:19:35,030 --> 00:19:40,190
weekly but it could be generally useful

00:19:37,640 --> 00:19:43,790
so I published it named concurrent

00:19:40,190 --> 00:19:46,640
p-channel Pistons for priority and this

00:19:43,790 --> 00:19:47,270
is going to be my next talk right after

00:19:46,640 --> 00:19:51,370
this one

00:19:47,270 --> 00:19:55,940
ah so we can skip it for now

00:19:51,370 --> 00:20:00,710
Stratus strata are not actually imminent

00:19:55,940 --> 00:20:04,370
to widget it's a property of parent role

00:20:00,710 --> 00:20:11,960
but well mostly it's we it's for widget

00:20:04,370 --> 00:20:14,720
consumption strata is a set of three

00:20:11,960 --> 00:20:17,390
different set set orders and for those

00:20:14,720 --> 00:20:19,520
who deal with user interfaces that order

00:20:17,390 --> 00:20:22,280
I think it's understandable it's the

00:20:19,520 --> 00:20:29,270
water the order in which our children

00:20:22,280 --> 00:20:34,250
are displayed on the screen story very

00:20:29,270 --> 00:20:36,500
journalist and how so Stratus all

00:20:34,250 --> 00:20:38,840
synchronized in that order so that

00:20:36,500 --> 00:20:41,330
children which belong to the bottom

00:20:38,840 --> 00:20:44,090
strata will never get above any child

00:20:41,330 --> 00:20:46,640
from the main strata and apparently not

00:20:44,090 --> 00:20:49,250
from the model strata so for example

00:20:46,640 --> 00:20:53,660
child one wants to go on top and it

00:20:49,250 --> 00:21:01,670
regret so it goes on top of the bottom

00:20:53,660 --> 00:21:05,420
strata stratum I'm sorry and this allows

00:21:01,670 --> 00:21:09,590
links like this

00:21:05,420 --> 00:21:13,480
remember the diamond give from the

00:21:09,590 --> 00:21:17,890
introduction he it's the new example and

00:21:13,480 --> 00:21:21,740
the education window on the right widget

00:21:17,890 --> 00:21:24,470
it is exactly located in the bottom

00:21:21,740 --> 00:21:28,220
strata so it would never go above the

00:21:24,470 --> 00:21:31,000
two windows you see here it could

00:21:28,220 --> 00:21:36,460
simplify things a lot in some cases and

00:21:31,000 --> 00:21:38,210
also you can note another thing here

00:21:36,460 --> 00:21:42,070
remember I was talking about

00:21:38,210 --> 00:21:44,480
transparency look in the its attributes

00:21:42,070 --> 00:21:48,500
transparency work for attributes as well

00:21:44,480 --> 00:21:53,300
colors attributes so you can have a star

00:21:48,500 --> 00:21:57,919
is symbol at some location and it's not

00:21:53,300 --> 00:22:00,700
transparent but look border here just it

00:21:57,919 --> 00:22:04,800
has transparent colors so it takes color

00:22:00,700 --> 00:22:09,070
from the desktop and it takes color from

00:22:04,800 --> 00:22:12,400
the widget below it I don't know how

00:22:09,070 --> 00:22:22,600
much useful is it yeah a zoom zoom again

00:22:12,400 --> 00:22:24,280
zoom is end before speed oh okay so I

00:22:22,600 --> 00:22:27,550
don't know how much useful is this

00:22:24,280 --> 00:22:32,650
transparent system but you know it helps

00:22:27,550 --> 00:22:37,060
meet some suggestions okay done with

00:22:32,650 --> 00:22:44,320
Stratus now the most interesting thing

00:22:37,060 --> 00:22:47,880
having all disks in mind let's talk

00:22:44,320 --> 00:22:51,640
about the way read not implements

00:22:47,880 --> 00:22:54,850
drawing battery how the widget displays

00:22:51,640 --> 00:22:57,490
itself on the screen I done so by

00:22:54,850 --> 00:23:01,840
propagating widget content in particular

00:22:57,490 --> 00:23:04,900
canvas wisdom validations the content

00:23:01,840 --> 00:23:06,610
gets propagated from widget to parent to

00:23:04,900 --> 00:23:10,780
parent to venture into desktop in

00:23:06,610 --> 00:23:12,910
desktop sentence to the screen so here

00:23:10,780 --> 00:23:16,720
we have a widget with validations

00:23:12,910 --> 00:23:18,910
the parent widget we sent me to parent

00:23:16,720 --> 00:23:20,620
will eg a terrace in fine and then we

00:23:18,910 --> 00:23:23,440
remember that widget actually parent

00:23:20,620 --> 00:23:27,940
it's well it's likely to have children

00:23:23,440 --> 00:23:30,220
and children submit to widget as well so

00:23:27,940 --> 00:23:31,930
we have children canvas on our hands we

00:23:30,220 --> 00:23:34,450
have children and validations we have

00:23:31,930 --> 00:23:37,420
our own colors and our own validations

00:23:34,450 --> 00:23:39,250
and we have to do something about it and

00:23:37,420 --> 00:23:42,240
what I do about it

00:23:39,250 --> 00:23:45,460
is that I introduce an intermediate

00:23:42,240 --> 00:23:48,340
canvas object which is called imprinted

00:23:45,460 --> 00:23:50,130
canvas meaning that everything is

00:23:48,340 --> 00:23:56,410
imprinted to reading

00:23:50,130 --> 00:23:58,990
that's why be here and I first they put

00:23:56,410 --> 00:24:02,140
all the in validations I know about into

00:23:58,990 --> 00:24:04,360
this intermediate object then I apply on

00:24:02,140 --> 00:24:07,720
children canvas in that order and print

00:24:04,360 --> 00:24:09,610
them into canvas and the final thing is

00:24:07,720 --> 00:24:12,370
that even though children canvas as

00:24:09,610 --> 00:24:13,960
admitted and full boys and validations

00:24:12,370 --> 00:24:18,350
only the Ness

00:24:13,960 --> 00:24:20,990
subparts of them gets imprinted so we

00:24:18,350 --> 00:24:23,960
get updates as little updates is

00:24:20,990 --> 00:24:29,120
necessary then we submit our own colors

00:24:23,960 --> 00:24:31,010
and this March canvas object we

00:24:29,120 --> 00:24:33,440
eventually submit to burn to Egypt

00:24:31,010 --> 00:24:37,430
together with all the in validations we

00:24:33,440 --> 00:24:39,170
use to build it and we clear now it's

00:24:37,430 --> 00:24:40,790
now not our responsibility its

00:24:39,170 --> 00:24:44,210
responsibility of the parent to do

00:24:40,790 --> 00:24:49,490
something about it and the protest yes

00:24:44,210 --> 00:24:53,570
sorry I call this protest your here goes

00:24:49,490 --> 00:24:56,510
I call it canvas flattening because we

00:24:53,570 --> 00:24:59,060
leave flatten down the order we flatten

00:24:56,510 --> 00:25:06,410
it down to you know just two-dimensional

00:24:59,060 --> 00:25:10,240
watch here what sings looks like in more

00:25:06,410 --> 00:25:10,240
real environment with several bridges

00:25:10,600 --> 00:25:17,210
first widget submits to the part in

00:25:13,970 --> 00:25:18,430
parent starts bacon itself the purchase

00:25:17,210 --> 00:25:23,990
is not really fast

00:25:18,430 --> 00:25:26,030
meanwhile two other widgets submit

00:25:23,990 --> 00:25:29,270
themselves to the parent but part is

00:25:26,030 --> 00:25:32,570
busy now it cannot do any update it's

00:25:29,270 --> 00:25:36,730
because okay later

00:25:32,570 --> 00:25:39,740
doesn't matter so what it does it status

00:25:36,730 --> 00:25:43,460
to children and those two new canvas for

00:25:39,740 --> 00:25:46,070
later practicing and it continues and

00:25:43,460 --> 00:25:48,770
when it's done it submits its own will

00:25:46,070 --> 00:25:50,300
be canvas to its own parent which is

00:25:48,770 --> 00:25:53,300
likely to be desktop for its time it

00:25:50,300 --> 00:25:57,830
doesn't matter but then remember oh I

00:25:53,300 --> 00:25:59,210
have to stretched once and it starts

00:25:57,830 --> 00:26:02,020
updating the giving without any

00:25:59,210 --> 00:26:05,090
additional requests just on it is own

00:26:02,020 --> 00:26:08,120
and then canvas with all the three

00:26:05,090 --> 00:26:10,250
widgets you know first to second answer

00:26:08,120 --> 00:26:12,070
gets submitted to the parent widget

00:26:10,250 --> 00:26:15,620
which is again from a minister

00:26:12,070 --> 00:26:18,100
that's it the idea is that you see when

00:26:15,620 --> 00:26:22,940
parent is busy and cannot handle

00:26:18,100 --> 00:26:25,280
children converse properly it stashes

00:26:22,940 --> 00:26:26,520
them so that if you have the many many

00:26:25,280 --> 00:26:30,420
many children

00:26:26,520 --> 00:26:32,040
she requests children cars will always

00:26:30,420 --> 00:26:34,860
update them all at once

00:26:32,040 --> 00:26:43,740
it also saves us a lot of time and

00:26:34,860 --> 00:26:45,750
increases responsibility when I was

00:26:43,740 --> 00:26:47,340
starting this spectrum I thought I would

00:26:45,750 --> 00:26:53,330
tell about more problems I encountered

00:26:47,340 --> 00:26:53,330
but actually the only one even worse

00:26:58,370 --> 00:27:04,320
initially as a total I wanted as much

00:27:01,260 --> 00:27:07,350
concurrency specific organization

00:27:04,320 --> 00:27:10,530
so I started with absolutely totally

00:27:07,350 --> 00:27:13,260
fully asynchronous faith framework so

00:27:10,530 --> 00:27:17,940
anytime you submit something to widget

00:27:13,260 --> 00:27:20,400
it does protect protis it immediately if

00:27:17,940 --> 00:27:25,200
you try drawing initiate drawing from

00:27:20,400 --> 00:27:28,890
several different threads you know I try

00:27:25,200 --> 00:27:31,260
to optimize it somehow to do is fast as

00:27:28,890 --> 00:27:33,390
possible and don't create race

00:27:31,260 --> 00:27:35,490
conditions and stuff like that and so I

00:27:33,390 --> 00:27:38,580
need to look here log there little bit

00:27:35,490 --> 00:27:41,610
of luck again and oh look here as well

00:27:38,580 --> 00:27:44,760
and eventually eventually it went to

00:27:41,610 --> 00:27:48,210
complete mayhem so I dropped the idea

00:27:44,760 --> 00:27:50,550
but I still wanted concurrency and I

00:27:48,210 --> 00:27:55,410
switch to so-called hybrid model in

00:27:50,550 --> 00:27:56,400
hybrid model every widget more generally

00:27:55,410 --> 00:28:00,720
le ami

00:27:56,400 --> 00:28:03,290
it went even random object it's a state

00:28:00,720 --> 00:28:08,820
machine which has been manipulated by

00:28:03,290 --> 00:28:11,490
comments and comments are submitted with

00:28:08,820 --> 00:28:16,650
events so that if you need to change

00:28:11,490 --> 00:28:23,240
widget size you submit event comment set

00:28:16,650 --> 00:28:28,560
ground SEC geometry and it gets frozen

00:28:23,240 --> 00:28:30,540
he went Q so instead of many many many

00:28:28,560 --> 00:28:33,510
paralyzed Christ you get a chain of

00:28:30,540 --> 00:28:36,330
requests and you can handle them nicely

00:28:33,510 --> 00:28:38,750
and even though you still have might

00:28:36,330 --> 00:28:44,100
have some kind of

00:28:38,750 --> 00:28:46,620
issues about the synchronicity like you

00:28:44,100 --> 00:28:49,139
know some event could come later the

00:28:46,620 --> 00:28:51,450
earlier and you didn't took it into

00:28:49,139 --> 00:28:53,340
account so you have updated something

00:28:51,450 --> 00:28:54,990
you should have not update you know it's

00:28:53,340 --> 00:28:57,480
always possible a synchronous

00:28:54,990 --> 00:29:01,380
programming is about keeping in mind

00:28:57,480 --> 00:29:04,500
your current state but still it's much

00:29:01,380 --> 00:29:07,440
easier than to handle really parallel

00:29:04,500 --> 00:29:10,230
things in different strengths much much

00:29:07,440 --> 00:29:15,139
easier so state relation is the way to

00:29:10,230 --> 00:29:15,139
go and this is how things currently book

00:29:15,559 --> 00:29:20,700
and that's what actually why it's just

00:29:18,870 --> 00:29:24,029
you know single event or event loop

00:29:20,700 --> 00:29:26,970
because this where I get my concurrency

00:29:24,029 --> 00:29:29,309
broken because even though each single

00:29:26,970 --> 00:29:33,080
widget is a stink state machine

00:29:29,309 --> 00:29:38,059
manipulated you know in linear manner

00:29:33,080 --> 00:29:41,850
you still can can work with many widgets

00:29:38,059 --> 00:29:45,510
simultaneously easily and also if you

00:29:41,850 --> 00:29:48,360
submit such a common to widget you also

00:29:45,510 --> 00:29:48,960
can do it anytime anywhere it's not a

00:29:48,360 --> 00:29:52,850
problem

00:29:48,960 --> 00:29:52,850
widget will take care of it properly

00:29:53,210 --> 00:30:01,710
last thing and they have enough time

00:29:56,370 --> 00:30:04,830
luckily our testing talking about

00:30:01,710 --> 00:30:10,700
testing first thing what we have to do

00:30:04,830 --> 00:30:10,700
when we start testing things I'm sorry

00:30:12,440 --> 00:30:18,690
we have to define to herself what

00:30:15,149 --> 00:30:22,380
exactly we are testing what is our

00:30:18,690 --> 00:30:24,480
subject of testing and our subject of

00:30:22,380 --> 00:30:29,250
testing here Park in the framework in

00:30:24,480 --> 00:30:33,679
what characteristics does it have it is

00:30:29,250 --> 00:30:37,620
heavily asynchronous and that's it

00:30:33,679 --> 00:30:39,899
there's only Kirk the only thing which

00:30:37,620 --> 00:30:42,929
is really important about it because all

00:30:39,899 --> 00:30:45,809
other things all of us more or less know

00:30:42,929 --> 00:30:49,470
about but I think honestly we have to

00:30:45,809 --> 00:30:51,240
take into account for example let's take

00:30:49,470 --> 00:30:57,420
a simple system of

00:30:51,240 --> 00:31:02,070
widget disc open stream and widget gets

00:30:57,420 --> 00:31:04,920
updated and it needs to redraw as I told

00:31:02,070 --> 00:31:11,700
previously aired role is initiated with

00:31:04,920 --> 00:31:15,360
a special event comment and this is the

00:31:11,700 --> 00:31:21,210
chain of events which takes place when

00:31:15,360 --> 00:31:25,590
we draw and looking at this chain of

00:31:21,210 --> 00:31:31,470
events the thing I must know

00:31:25,590 --> 00:31:37,110
for example this event here and this

00:31:31,470 --> 00:31:40,620
event here this occasionally so that we

00:31:37,110 --> 00:31:42,559
cannot be sure when exactly they are

00:31:40,620 --> 00:31:46,500
gonna arrive to us

00:31:42,559 --> 00:31:50,370
it went updated if they went with it

00:31:46,500 --> 00:31:53,910
gets when it's canvas got flattened by

00:31:50,370 --> 00:31:58,980
by the parent so that widget knows that

00:31:53,910 --> 00:32:02,100
it is now reflected it's kind it's later

00:31:58,980 --> 00:32:04,050
state is reflected on the parent but

00:32:02,100 --> 00:32:06,480
we'd never know when parents are gonna

00:32:04,050 --> 00:32:10,530
done this work because it could be busy

00:32:06,480 --> 00:32:14,309
for any reason and therefore updated

00:32:10,530 --> 00:32:16,590
could come back any time and if we gonna

00:32:14,309 --> 00:32:20,360
test for this event we need to wait to

00:32:16,590 --> 00:32:23,730
know how to bind this updated them where

00:32:20,360 --> 00:32:26,970
to save the history John went over to

00:32:23,730 --> 00:32:29,400
this comment event same situation about

00:32:26,970 --> 00:32:31,730
screen reading because screen lives with

00:32:29,400 --> 00:32:35,250
its own life in the scope doesn't know

00:32:31,730 --> 00:32:43,110
when stream would be ready to accept the

00:32:35,250 --> 00:32:47,880
next output another problem is that we

00:32:43,110 --> 00:32:52,530
have strengths a lot of threats and the

00:32:47,880 --> 00:32:54,630
test module which is submitted with her

00:32:52,530 --> 00:32:57,960
to the core and which is standard for

00:32:54,630 --> 00:33:00,570
raku language it's that it doesn't

00:32:57,960 --> 00:33:03,840
support training whatsoever so if I need

00:33:00,570 --> 00:33:04,830
to do something stranger I have to do a

00:33:03,840 --> 00:33:07,230
lot of control

00:33:04,830 --> 00:33:09,930
and I didn't like it so I created not

00:33:07,230 --> 00:33:11,760
has been of model desk leasing but this

00:33:09,930 --> 00:33:13,470
one I talked about yesterday and

00:33:11,760 --> 00:33:14,580
enlightening talk so probably I better

00:33:13,470 --> 00:33:19,470
not repeat myself

00:33:14,580 --> 00:33:21,390
the primary thing about it is that it

00:33:19,470 --> 00:33:22,020
does support the training and this is

00:33:21,390 --> 00:33:24,030
what I need

00:33:22,020 --> 00:33:28,400
reading asynchronously and stuff like

00:33:24,030 --> 00:33:31,020
that and also it supports bundles and

00:33:28,400 --> 00:33:35,960
Widner has a test submerge

00:33:31,020 --> 00:33:39,930
which is a bundle of tests a sink and

00:33:35,960 --> 00:33:42,300
the way implemented it it is big the

00:33:39,930 --> 00:33:45,660
test provides support for scenario based

00:33:42,300 --> 00:33:49,190
testing where you define a set of tasks

00:33:45,660 --> 00:33:53,760
to be performed by test each desk

00:33:49,190 --> 00:33:57,180
validate it was bound to sorry each

00:33:53,760 --> 00:34:02,010
scenario is bound religion each desk is

00:33:57,180 --> 00:34:05,550
bound to an event and each desk upon

00:34:02,010 --> 00:34:09,360
accepting an event for presentation can

00:34:05,550 --> 00:34:18,270
do some testing on the widget for

00:34:09,360 --> 00:34:20,370
example if we got an updated event we

00:34:18,270 --> 00:34:21,899
can go to apartment and check it from

00:34:20,370 --> 00:34:26,700
which it was John correction on the

00:34:21,899 --> 00:34:29,610
parent another important thing is that

00:34:26,700 --> 00:34:31,620
scenarios can be heavily paralyzed we

00:34:29,610 --> 00:34:34,950
can attach several scenarios to

00:34:31,620 --> 00:34:38,220
different widgets and then using a

00:34:34,950 --> 00:34:41,070
global syncing support subsystem we can

00:34:38,220 --> 00:34:43,140
synchronize scenarios one which other so

00:34:41,070 --> 00:34:47,850
that we debug the scope with back with

00:34:43,140 --> 00:34:51,179
as desktop we test widget and desktop

00:34:47,850 --> 00:34:55,080
the weights when widget scenario gives

00:34:51,179 --> 00:35:05,370
okay to start rotating very drawing

00:34:55,080 --> 00:35:09,410
comment like if we go back here and in

00:35:05,370 --> 00:35:12,780
the endoscope test scenario before

00:35:09,410 --> 00:35:17,740
before for example checking what happens

00:35:12,780 --> 00:35:20,770
after this event we can await for this

00:35:17,740 --> 00:35:24,040
or for this event to be controllable by

00:35:20,770 --> 00:35:29,490
which by widget scenario so that when

00:35:24,040 --> 00:35:33,190
widget scenario Godsey swear it it tells

00:35:29,490 --> 00:35:35,470
desktop scenario is that okay yoky to go

00:35:33,190 --> 00:35:37,359
to check what do you need to check and

00:35:35,470 --> 00:35:39,810
then this top is a key to check this is

00:35:37,359 --> 00:35:45,880
flattening and this will a

00:35:39,810 --> 00:35:51,369
synchronization actually allows me to

00:35:45,880 --> 00:35:54,880
test exactly it those moments where I

00:35:51,369 --> 00:35:57,820
know that I have to test because when I

00:35:54,880 --> 00:36:00,940
check how which it is drawn I have to

00:35:57,820 --> 00:36:04,990
know exactly when to see into the screen

00:36:00,940 --> 00:36:12,099
when to do this club - no - look at what

00:36:04,990 --> 00:36:13,690
I have there and eventually it could be

00:36:12,099 --> 00:36:16,030
looking a little bit convoluted and

00:36:13,690 --> 00:36:18,040
won't be showing in the code on those

00:36:16,030 --> 00:36:20,260
testing scenarios because they're not

00:36:18,040 --> 00:36:23,020
really simple but you know this is user

00:36:20,260 --> 00:36:25,930
interface there is no simple ways but it

00:36:23,020 --> 00:36:30,540
works great and testing goes just

00:36:25,930 --> 00:36:33,400
perfect okay I can skip this one I

00:36:30,540 --> 00:36:35,220
talked about all this and basically I'm

00:36:33,400 --> 00:36:39,430
almost done

00:36:35,220 --> 00:36:42,099
the important thing I must tell now is

00:36:39,430 --> 00:36:42,940
that weakness doesn't work on current

00:36:42,099 --> 00:36:53,800
recoveries

00:36:42,940 --> 00:36:57,130
the problem is that formerly routine

00:36:53,800 --> 00:37:01,030
dispatching in reco that didn't work in

00:36:57,130 --> 00:37:05,020
full meaning that dispatching wasn't

00:37:01,030 --> 00:37:06,970
changing what it means for example we

00:37:05,020 --> 00:37:10,990
have a class and we have mattered in the

00:37:06,970 --> 00:37:19,530
class we have a child class and we have

00:37:10,990 --> 00:37:24,130
a right our parents method I'm sorry and

00:37:19,530 --> 00:37:27,760
we have arrived it with a multi dispatch

00:37:24,130 --> 00:37:30,200
method and the problem is that when our

00:37:27,760 --> 00:37:33,650
melting space is exhausted

00:37:30,200 --> 00:37:35,510
and it tries to dispatch further in

00:37:33,650 --> 00:37:38,260
normal situation it should dispatch the

00:37:35,510 --> 00:37:41,839
parent method but it doesn't happen

00:37:38,260 --> 00:37:44,329
automatically in West you can do it

00:37:41,839 --> 00:37:48,970
manually by dispatching directly using a

00:37:44,329 --> 00:37:54,410
fully qualified name I mean using parent

00:37:48,970 --> 00:38:00,140
type object name and I needed this bit

00:37:54,410 --> 00:38:03,460
so I got some time quite some time to

00:38:00,140 --> 00:38:08,329
get things fixed and I done it

00:38:03,460 --> 00:38:11,320
I've got despite your book properly but

00:38:08,329 --> 00:38:14,890
the problem is the way he implemented it

00:38:11,320 --> 00:38:18,440
it had some performance impact and

00:38:14,890 --> 00:38:24,589
overall record was about twenty thirty

00:38:18,440 --> 00:38:28,400
percent slower and it definitely wasn't

00:38:24,589 --> 00:38:30,859
good but this is I'm proud about is that

00:38:28,400 --> 00:38:33,099
it actually pushed Jonathan Washington

00:38:30,859 --> 00:38:36,079
to implement a fully redesigned

00:38:33,099 --> 00:38:38,329
dispatching subsystem which is going to

00:38:36,079 --> 00:38:40,130
be extremely great scene in which gonna

00:38:38,329 --> 00:38:43,339
have a great impact in recorded

00:38:40,130 --> 00:38:45,619
performance overall in best way so I

00:38:43,339 --> 00:38:48,619
mean even though I didn't succeed

00:38:45,619 --> 00:38:52,790
completely but it was it got a good

00:38:48,619 --> 00:38:54,920
outcome and yeah I'm sorry it's written

00:38:52,790 --> 00:38:57,740
but I didn't tell about it so if anyone

00:38:54,920 --> 00:39:03,079
wants to try Vigna for now this is V

00:38:57,740 --> 00:39:06,589
dispatchers branch on CUDA in repository

00:39:03,079 --> 00:39:09,560
which contains my fix for dispatching

00:39:06,589 --> 00:39:12,079
and weakness with this branch pretty

00:39:09,560 --> 00:39:17,119
well this is the one I ran for myself

00:39:12,079 --> 00:39:21,530
now and yes this is a rainbow time but

00:39:17,119 --> 00:39:26,109
before I start with rainbow let me show

00:39:21,530 --> 00:39:26,109
you two of the things

00:39:33,740 --> 00:39:39,369
okay a party yes we already have buttons

00:39:40,810 --> 00:39:47,180
any child can change its parent easily

00:39:45,050 --> 00:39:52,339
look yes

00:39:47,180 --> 00:39:55,609
this button reacts as supposed to but if

00:39:52,339 --> 00:39:58,910
we click this button it runs away from

00:39:55,609 --> 00:40:03,820
us it switches to another window it's

00:39:58,910 --> 00:40:08,770
the same widget and the widget simply

00:40:03,820 --> 00:40:11,839
you know change its parent entity and

00:40:08,770 --> 00:40:15,820
what I like about Rikuo and what I like

00:40:11,839 --> 00:40:15,820
in what I've done is that its release

00:40:24,120 --> 00:40:39,900
okay another mandatory reject is input

00:40:26,730 --> 00:40:44,810
lines so input lines are here and if

00:40:39,900 --> 00:40:52,670
anybody tells you that recorder is slow

00:40:44,810 --> 00:40:59,630
it's not that slow as you can see and

00:40:52,670 --> 00:41:02,960
now another agency which also

00:40:59,630 --> 00:41:06,180
demonstrates the real state of

00:41:02,960 --> 00:41:10,920
performance with speed na and na CUDA

00:41:06,180 --> 00:41:14,640
for now as I told you everything is

00:41:10,920 --> 00:41:17,520
fully synchronous paralyzed and this

00:41:14,640 --> 00:41:19,860
kind of stuff in fully asynchronous

00:41:17,520 --> 00:41:23,040
environment it's really not easy to have

00:41:19,860 --> 00:41:25,920
since synchronized especially when

00:41:23,040 --> 00:41:27,660
drawing and I needed to take special

00:41:25,920 --> 00:41:33,750
measures to implement synchronous

00:41:27,660 --> 00:41:38,450
drawing for Windows and okay yeah it's

00:41:33,750 --> 00:41:42,890
not gonna be fast because it's yeah and

00:41:38,450 --> 00:41:48,870
this deep ma this example it shows

00:41:42,890 --> 00:41:53,610
synchronization as it was because I have

00:41:48,870 --> 00:41:56,580
here about 200 labels with individual

00:41:53,610 --> 00:42:01,590
background colors and those labels are

00:41:56,580 --> 00:42:03,780
getting updated synchronously and even

00:42:01,590 --> 00:42:04,980
though each label is confident that it

00:42:03,780 --> 00:42:09,030
does it and synchronously

00:42:04,980 --> 00:42:13,590
but eventually on the pan update happens

00:42:09,030 --> 00:42:25,350
automatically so you see switching is

00:42:13,590 --> 00:42:28,200
lately and normally if you look here

00:42:25,350 --> 00:42:30,960
looping takes now twelve seconds but

00:42:28,200 --> 00:42:35,070
without zoom concurrent for CPU

00:42:30,960 --> 00:42:37,220
it's normally 54 seconds or 5 seconds in

00:42:35,070 --> 00:42:37,220
my

00:42:42,360 --> 00:42:53,850
okay so I'm basically done and if there

00:42:48,070 --> 00:42:53,850
any questions I would gladly and Sousa

00:43:00,660 --> 00:43:05,099
so we have like seven minutes for

00:43:02,940 --> 00:43:09,440
question so if you have questions raise

00:43:05,099 --> 00:43:09,440
your own or try to an unmute yourself

00:43:25,650 --> 00:43:33,700
hello this is Brian I have a question

00:43:29,170 --> 00:43:35,710
this looks like a fantastic interface

00:43:33,700 --> 00:43:37,390
I'm looking forward to trying it out I'm

00:43:35,710 --> 00:43:39,880
just wondering if there's any possible

00:43:37,390 --> 00:43:42,130
way to do any kind of manipulations to

00:43:39,880 --> 00:43:44,550
try it on the existing rocku without

00:43:42,130 --> 00:43:50,860
using the fork

00:43:44,550 --> 00:43:56,790
not yet not until Jonathan said meets

00:43:50,860 --> 00:43:59,800
its dispatchers I tried to get around

00:43:56,790 --> 00:44:02,460
the issue I tried to find a way but

00:43:59,800 --> 00:44:07,020
unfortunately it doesn't work

00:44:02,460 --> 00:44:13,510
weakness is one of the most complicated

00:44:07,020 --> 00:44:17,320
construction from inside in implemented

00:44:13,510 --> 00:44:19,960
in Roku is of those I know about I mean

00:44:17,320 --> 00:44:22,560
I have written complicated relations

00:44:19,960 --> 00:44:27,070
between for example widget

00:44:22,560 --> 00:44:30,820
it's a window it's it's a widget it does

00:44:27,070 --> 00:44:34,720
not focusable it does something

00:44:30,820 --> 00:44:38,050
something else and you know all those

00:44:34,720 --> 00:44:41,560
complicated inheritance and at some

00:44:38,050 --> 00:44:46,140
points I need like you now stop handing

00:44:41,560 --> 00:44:48,820
on the world catch all three wells

00:44:46,140 --> 00:44:51,610
purchase them and only risk only then

00:44:48,820 --> 00:44:56,460
they submit to a parent class in this

00:44:51,610 --> 00:45:00,340
moment it's a barrier of switching from

00:44:56,460 --> 00:45:04,360
plain methods plain routine to a multi

00:45:00,340 --> 00:45:09,390
dispatch look in and because this moment

00:45:04,360 --> 00:45:12,910
it doesn't work in culture things breaks

00:45:09,390 --> 00:45:17,220
so unfortunately unfortunately it the

00:45:12,910 --> 00:45:19,750
wage is now and in other case I

00:45:17,220 --> 00:45:23,290
reconnect in the description to my talk

00:45:19,750 --> 00:45:26,440
but I didn't tell about it in is in

00:45:23,290 --> 00:45:30,130
easily weekly is incomplete dipping

00:45:26,440 --> 00:45:33,190
completely for now it's more of a

00:45:30,130 --> 00:45:35,200
proof-of-concept showing the things are

00:45:33,190 --> 00:45:38,859
possible and track you can't do this

00:45:35,200 --> 00:45:41,660
kind extreme freakin

00:45:38,859 --> 00:45:49,160
so unfortunately there is no good news

00:45:41,660 --> 00:45:53,209
here thank you another question from

00:45:49,160 --> 00:45:57,380
Bruce you sort of answered it at the end

00:45:53,209 --> 00:45:59,599
I was wondering what personal itch this

00:45:57,380 --> 00:46:01,009
was scratching if you had a application

00:45:59,599 --> 00:46:02,539
for it or if you were just doing it out

00:46:01,009 --> 00:46:04,939
of the goodness of your heart and the

00:46:02,539 --> 00:46:08,959
curiosity of your brain and I think I

00:46:04,939 --> 00:46:12,019
think you just said the latter in any

00:46:08,959 --> 00:46:13,729
case thank you for cuz I'm sure it's

00:46:12,019 --> 00:46:18,799
going to get used I just wondered what

00:46:13,729 --> 00:46:20,630
you were using it for this what they

00:46:18,799 --> 00:46:23,239
talked about in the beginning I plan to

00:46:20,630 --> 00:46:26,599
use it for web scraper initial and then

00:46:23,239 --> 00:46:29,900
a greater number of tests the funniest

00:46:26,599 --> 00:46:33,049
thing is that eventually this is not my

00:46:29,900 --> 00:46:36,499
day time to Bachmann in musicals okay my

00:46:33,049 --> 00:46:38,869
daytime job is totally different

00:46:36,499 --> 00:46:41,779
absolutely it's with communication there

00:46:38,869 --> 00:46:44,989
is no programming so programming I do

00:46:41,779 --> 00:46:49,269
it's mostly to help my wife do business

00:46:44,989 --> 00:46:52,549
when possible and for myself for fun

00:46:49,269 --> 00:46:55,239
that's it so mostly for fun and I also

00:46:52,549 --> 00:46:57,829
was driven by this conference because I

00:46:55,239 --> 00:46:59,929
didn't think it's gonna take that much

00:46:57,829 --> 00:47:01,699
damage because when I started that I

00:46:59,929 --> 00:47:04,579
thought like you know in a monster - I

00:47:01,699 --> 00:47:06,469
have something working and the months of

00:47:04,579 --> 00:47:08,059
- I was thinking them why did they

00:47:06,469 --> 00:47:12,009
submit the stock to the conference

00:47:08,059 --> 00:47:15,009
because I'm not ready for it and so like

00:47:12,009 --> 00:47:19,729
huh how hard can it be

00:47:15,009 --> 00:47:21,619
yes exactly exactly and you see it's

00:47:19,729 --> 00:47:28,189
conference time and all I managed to do

00:47:21,619 --> 00:47:30,109
is to finally this excuse me oh let me

00:47:28,189 --> 00:47:34,119
manage to do is to finalize things to

00:47:30,109 --> 00:47:36,289
the state to be able to present it

00:47:34,119 --> 00:47:40,150
that's it otherwise it needs a lot of

00:47:36,289 --> 00:47:42,799
work as you can see solution focus is

00:47:40,150 --> 00:47:46,130
really long procedure because cost it

00:47:42,799 --> 00:47:48,229
has to purchase the mouse and most

00:47:46,130 --> 00:47:50,800
processing it's like you know we need to

00:47:48,229 --> 00:47:53,770
know that we changed owner

00:47:50,800 --> 00:47:56,320
of the mouse I mean the widget which

00:47:53,770 --> 00:47:59,680
currently at which the mouse currently

00:47:56,320 --> 00:48:02,530
operates and if the widget somewhere in

00:47:59,680 --> 00:48:05,320
the end of here are missing label we

00:48:02,530 --> 00:48:07,840
have to go all the way down label window

00:48:05,320 --> 00:48:10,510
client window desktop then we find

00:48:07,840 --> 00:48:14,700
another window window client another

00:48:10,510 --> 00:48:18,430
button and all the space you know it's

00:48:14,700 --> 00:48:22,410
it's really and it's slow to process too

00:48:18,430 --> 00:48:29,920
slow for a mouse it has to be optimized

00:48:22,410 --> 00:48:31,960
also I'm not sure if I would survive not

00:48:29,920 --> 00:48:34,869
not so much sorry I'm not sure if

00:48:31,960 --> 00:48:37,980
Congress will always remain remain pure

00:48:34,869 --> 00:48:41,650
rock because its slowest part after

00:48:37,980 --> 00:48:43,980
physicals so probably it makes sense to

00:48:41,650 --> 00:48:47,500
implement and see or us

00:48:43,980 --> 00:48:52,270
I'll see maybe someone can do it for me

00:48:47,500 --> 00:48:59,890
because you know there are a lot of this

00:48:52,270 --> 00:49:05,760
yes it's mostly thank you yes thank you

00:48:59,890 --> 00:49:05,760

YouTube URL: https://www.youtube.com/watch?v=fXg2y4_3W4w


