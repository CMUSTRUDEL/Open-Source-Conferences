Title: Hauke D - Data logging with Perl – for Science!
Publication date: 2020-06-24
Playlist: TPC 2020 in the Cloud
Description: 
	In this talk I’ll show how I’ve used Perl and Raspberry Pi’s to build various data loggers for our research institute, including greenhouse gas measurements from an airplane, battery-powered CO2 loggers with a Mojolicious interface, and more.
Slides: https://bit.ly/2Yko3PH
Captions: 
	00:00:00,030 --> 00:00:04,830
yeah great you guys are live on YouTube

00:00:02,429 --> 00:00:08,160
you're ready to go alrighty thank you

00:00:04,830 --> 00:00:11,639
very much so hi everyone my name is

00:00:08,160 --> 00:00:14,910
halka I am a software developer and an

00:00:11,639 --> 00:00:17,190
electrical engineer and I am here to

00:00:14,910 --> 00:00:20,369
tell you about some of the data loggers

00:00:17,190 --> 00:00:24,330
I've built for our Research Institute so

00:00:20,369 --> 00:00:25,920
I'll be basing this on two systems that

00:00:24,330 --> 00:00:28,230
I will be talking about but in between

00:00:25,920 --> 00:00:30,210
there will be little asides and just a

00:00:28,230 --> 00:00:33,840
lot of I hope that some of my

00:00:30,210 --> 00:00:35,610
experiences will be useful to you if

00:00:33,840 --> 00:00:39,030
you're working on this kind of stuff or

00:00:35,610 --> 00:00:41,280
if you're just interested in using

00:00:39,030 --> 00:00:44,399
raspberry PI's and Perl for similar

00:00:41,280 --> 00:00:47,219
applications first a few words about my

00:00:44,399 --> 00:00:49,200
employer the Leibniz Institute of

00:00:47,219 --> 00:00:52,530
freshwater ecology and Inland Fisheries

00:00:49,200 --> 00:00:54,809
is the largest Research Institute for

00:00:52,530 --> 00:00:56,219
fresh waters in Germany and worldwide it

00:00:54,809 --> 00:00:58,980
is one of the leading research

00:00:56,219 --> 00:01:02,370
institutes in this area so some of the

00:00:58,980 --> 00:01:05,610
topics that we cover are aquatic

00:01:02,370 --> 00:01:09,170
biodiversity so aquatic organisms not

00:01:05,610 --> 00:01:14,369
just fish but also microorganisms and

00:01:09,170 --> 00:01:16,950
excuse me and insects the sustainable

00:01:14,369 --> 00:01:22,049
use of fresh water so as drinking water

00:01:16,950 --> 00:01:24,869
for sports the conservation of this

00:01:22,049 --> 00:01:30,150
resource the effects of global warming

00:01:24,869 --> 00:01:31,979
and so on one of the main topics of the

00:01:30,150 --> 00:01:36,240
Institute is the communication with the

00:01:31,979 --> 00:01:38,880
public so that is communication with

00:01:36,240 --> 00:01:41,460
government agencies with companies but

00:01:38,880 --> 00:01:44,850
also informing the public it is the

00:01:41,460 --> 00:01:48,890
support of open access software and it

00:01:44,850 --> 00:01:52,229
is the support of sorry open access

00:01:48,890 --> 00:01:53,820
publications and open source software so

00:01:52,229 --> 00:01:55,560
that's why I'm here today and so I'd

00:01:53,820 --> 00:02:00,780
like to thank my employer for giving me

00:01:55,560 --> 00:02:02,790
the time to talk to you guys so first of

00:02:00,780 --> 00:02:05,640
all why do I use raspberry PI's so much

00:02:02,790 --> 00:02:09,840
I like them a lot because they're

00:02:05,640 --> 00:02:11,940
they're small they're very well they are

00:02:09,840 --> 00:02:13,200
very good for building data loggers they

00:02:11,940 --> 00:02:15,209
use

00:02:13,200 --> 00:02:17,700
Tivoli low power so for example the

00:02:15,209 --> 00:02:21,599
Raspberry Pi 0w that you see at the top

00:02:17,700 --> 00:02:23,610
right here is it takes about 85

00:02:21,599 --> 00:02:27,060
milliamps which makes it good for

00:02:23,610 --> 00:02:29,849
battery-powered applications they run a

00:02:27,060 --> 00:02:32,069
full debian-based Linux distribution so

00:02:29,849 --> 00:02:34,230
all of the packages that you know from a

00:02:32,069 --> 00:02:36,480
regular Debian Linux distribution like

00:02:34,230 --> 00:02:39,739
Ubuntu you have them available on the

00:02:36,480 --> 00:02:42,450
Raspberry Pi the community around

00:02:39,739 --> 00:02:44,910
raspberry PI's is is relatively large

00:02:42,450 --> 00:02:46,769
they have really good support if you

00:02:44,910 --> 00:02:48,840
have any trouble with them there's

00:02:46,769 --> 00:02:51,959
usually already a forum post about them

00:02:48,840 --> 00:02:56,880
somewhere and there's a lot of companies

00:02:51,959 --> 00:02:59,430
selling peripherals for them and so so

00:02:56,880 --> 00:03:02,700
with other similar single board

00:02:59,430 --> 00:03:04,920
computers there are lots out there but I

00:03:02,700 --> 00:03:07,110
feel like you just don't get this large

00:03:04,920 --> 00:03:10,079
community of support that's available

00:03:07,110 --> 00:03:10,769
for raspberry PI's of course nothing's

00:03:10,079 --> 00:03:13,860
perfect

00:03:10,769 --> 00:03:17,099
so for example raspberry PI's always

00:03:13,860 --> 00:03:18,440
need a fixed 5 volts input and since we

00:03:17,099 --> 00:03:21,269
do a lot of work with battery-powered

00:03:18,440 --> 00:03:24,060
applications we almost always need to

00:03:21,269 --> 00:03:27,030
add a voltage regulator so that the

00:03:24,060 --> 00:03:30,480
Raspberry Pi can get it's 5 volts and

00:03:27,030 --> 00:03:34,489
also making the power down user friendly

00:03:30,480 --> 00:03:38,250
is not as easy because the Raspberry Pi

00:03:34,489 --> 00:03:40,500
can't turn itself off like a regular PC

00:03:38,250 --> 00:03:42,540
can when it's done shutting down so

00:03:40,500 --> 00:03:45,030
getting to that to be user-friendly can

00:03:42,540 --> 00:03:48,900
be a little tricky and and often

00:03:45,030 --> 00:03:51,420
requires extra circuitry I also thought

00:03:48,900 --> 00:03:54,810
about using docker on raspberry PI's

00:03:51,420 --> 00:03:57,630
this is possible on the larger raspberry

00:03:54,810 --> 00:03:59,370
PI's but unfortunately last time I

00:03:57,630 --> 00:04:03,299
checked it didn't work on the Raspberry

00:03:59,370 --> 00:04:05,880
Pi 0:w my idea there was that you could

00:04:03,299 --> 00:04:07,920
package up your software into a single

00:04:05,880 --> 00:04:10,230
image and that way you could it would

00:04:07,920 --> 00:04:13,200
make sort of firmware updates in that

00:04:10,230 --> 00:04:15,450
sense easier for your users so that's

00:04:13,200 --> 00:04:17,430
something that if it works again and I

00:04:15,450 --> 00:04:21,169
have some experience with that I'll be

00:04:17,430 --> 00:04:23,849
happy to update you on that

00:04:21,169 --> 00:04:26,600
so the first measurement system I wanted

00:04:23,849 --> 00:04:29,810
to talk about is this one that

00:04:26,600 --> 00:04:32,090
see here it's the basic idea is that

00:04:29,810 --> 00:04:34,510
when we're talking about the transport

00:04:32,090 --> 00:04:37,700
of greenhouse gases in the atmosphere

00:04:34,510 --> 00:04:41,480
there are two processes first of all you

00:04:37,700 --> 00:04:46,010
have large-scale movements of big masses

00:04:41,480 --> 00:04:48,500
of gas that are moving with the wind but

00:04:46,010 --> 00:04:51,280
the second process is a very small scale

00:04:48,500 --> 00:04:54,050
you know on the order of centimeters

00:04:51,280 --> 00:04:58,310
little turbulence as little Eddie's and

00:04:54,050 --> 00:05:00,110
so the the measurements with these kinds

00:04:58,310 --> 00:05:04,460
of Eddie's are called eddy covariance

00:05:00,110 --> 00:05:07,160
and this is an important process in the

00:05:04,460 --> 00:05:10,160
transport of greenhouse gases and there

00:05:07,160 --> 00:05:12,200
are existing airplane mounted systems to

00:05:10,160 --> 00:05:13,970
to measure this and at the Free

00:05:12,200 --> 00:05:16,250
University in Berlin they have built

00:05:13,970 --> 00:05:19,910
their own measurement system for this

00:05:16,250 --> 00:05:24,410
and that's what you see excuse me that's

00:05:19,910 --> 00:05:27,080
what you see here so this is a wing pod

00:05:24,410 --> 00:05:29,300
it's normally used as a reserve fuel

00:05:27,080 --> 00:05:32,780
tank but in this case it's been modified

00:05:29,300 --> 00:05:34,220
- how is the measurement system and what

00:05:32,780 --> 00:05:36,920
you see sticking out in the front there

00:05:34,220 --> 00:05:38,930
is called the five hole probe a simple

00:05:36,920 --> 00:05:44,360
name because it has five holes and the

00:05:38,930 --> 00:05:46,040
idea is that based on how the wind based

00:05:44,360 --> 00:05:48,770
which direction the wind is streaming

00:05:46,040 --> 00:05:51,470
across this probe there are slight

00:05:48,770 --> 00:05:53,990
pressure differences between those the

00:05:51,470 --> 00:05:56,450
holes on the tip of the probe and so

00:05:53,990 --> 00:06:00,110
with some complicated math you can

00:05:56,450 --> 00:06:02,330
calculate back to get a wind vector and

00:06:00,110 --> 00:06:04,280
then that's combined with a highly

00:06:02,330 --> 00:06:06,470
precise greenhouse gas measure a

00:06:04,280 --> 00:06:09,770
measurement device so that measures co2

00:06:06,470 --> 00:06:11,450
and methane in this case and then with a

00:06:09,770 --> 00:06:17,510
high frequency of measurements you can

00:06:11,450 --> 00:06:21,170
get these small-scale Eddie's of air you

00:06:17,510 --> 00:06:24,710
can you can measure those so this is

00:06:21,170 --> 00:06:27,680
what it looks like inside first we have

00:06:24,710 --> 00:06:29,780
a GPS unit that is also an inertial

00:06:27,680 --> 00:06:33,350
navigation system so you not only get

00:06:29,780 --> 00:06:36,370
the position of the airplane

00:06:33,350 --> 00:06:40,040
you also get its orientation and so on

00:06:36,370 --> 00:06:43,700
then we have temperature and you

00:06:40,040 --> 00:06:47,120
so basic meteorological parameters we

00:06:43,700 --> 00:06:48,680
have various temperature sensors that

00:06:47,120 --> 00:06:51,590
are connected to an analog to digital

00:06:48,680 --> 00:06:53,930
converter and then we have the pressure

00:06:51,590 --> 00:06:57,170
sensors that are connected to the tip of

00:06:53,930 --> 00:07:00,020
the probe all of these sensors their

00:06:57,170 --> 00:07:02,840
data is collected on a Raspberry Pi and

00:07:00,020 --> 00:07:04,550
that's what I wrote the code for and so

00:07:02,840 --> 00:07:08,240
that's what I wanted to talk to you

00:07:04,550 --> 00:07:09,170
about so first of all what data streams

00:07:08,240 --> 00:07:11,480
do we have

00:07:09,170 --> 00:07:15,820
well the these are all connected to the

00:07:11,480 --> 00:07:18,950
Raspberry Pi via USB the GPS unit has

00:07:15,820 --> 00:07:21,200
one G USB connection that provides three

00:07:18,950 --> 00:07:24,470
virtual serial ports for different data

00:07:21,200 --> 00:07:27,800
streams the temperature and humidity

00:07:24,470 --> 00:07:29,840
sensor is fairly simple it's just one

00:07:27,800 --> 00:07:33,970
virtual serial port over a USB

00:07:29,840 --> 00:07:37,340
connection protocol is simple with

00:07:33,970 --> 00:07:40,370
text-based data line based data so it's

00:07:37,340 --> 00:07:42,590
pretty simple to process one exception

00:07:40,370 --> 00:07:44,690
is the analog to digital converter which

00:07:42,590 --> 00:07:46,970
has a special piece of software but in

00:07:44,690 --> 00:07:49,310
the end all that outputs is text-based

00:07:46,970 --> 00:07:51,530
data so we just need to record that and

00:07:49,310 --> 00:07:54,980
then of course we have the four pressure

00:07:51,530 --> 00:07:57,800
sensors that are connected to a rs-485

00:07:54,980 --> 00:08:01,250
interface that provides for virtual

00:07:57,800 --> 00:08:03,350
serial ports so all in all that's 9 data

00:08:01,250 --> 00:08:05,930
streams eight of which are virtual

00:08:03,350 --> 00:08:09,770
serial ports so I've spent a lot of time

00:08:05,930 --> 00:08:14,570
on that topic on the topic of serial

00:08:09,770 --> 00:08:17,150
ports so as many of you know the UNIX

00:08:14,570 --> 00:08:19,220
has had support for serial ports for

00:08:17,150 --> 00:08:23,570
ever because you know it's one of the

00:08:19,220 --> 00:08:25,160
very basic interfaces and so you would

00:08:23,570 --> 00:08:26,930
normally do that with the STD line

00:08:25,160 --> 00:08:28,760
command to configure the port you know

00:08:26,930 --> 00:08:31,460
set the baud rate set the number of bits

00:08:28,760 --> 00:08:33,979
parity bits and so on and then you have

00:08:31,460 --> 00:08:36,500
this device file that you can treat more

00:08:33,979 --> 00:08:39,349
or less like a regular file you can read

00:08:36,500 --> 00:08:41,030
from it in this case with cat to see the

00:08:39,349 --> 00:08:43,130
data that's arriving at the port you can

00:08:41,030 --> 00:08:44,840
write to it to send data to the port and

00:08:43,130 --> 00:08:48,980
so on and that's that's the really the

00:08:44,840 --> 00:08:51,740
very basics that you need but of course

00:08:48,980 --> 00:08:53,779
that's not really enough we also want to

00:08:51,740 --> 00:08:55,370
log when does this data awry

00:08:53,779 --> 00:08:59,300
because a lot of the sensors don't have

00:08:55,370 --> 00:09:00,949
their own internal clock and we want to

00:08:59,300 --> 00:09:02,509
check whether the data is valid there

00:09:00,949 --> 00:09:04,360
might be records that got cut off

00:09:02,509 --> 00:09:06,860
because the sensor got unplugged or

00:09:04,360 --> 00:09:09,290
there might be noise on the line that

00:09:06,860 --> 00:09:11,509
causes transmission errors and so on so

00:09:09,290 --> 00:09:13,220
well that seems pretty easy too you know

00:09:11,509 --> 00:09:15,860
we know the UNIX principle we know Perl

00:09:13,220 --> 00:09:18,110
we can pipe it into Perl check the data

00:09:15,860 --> 00:09:20,509
add a timestamp and you know that's

00:09:18,110 --> 00:09:23,029
that's again very very simple very basic

00:09:20,509 --> 00:09:24,740
idea of how this could be done but of

00:09:23,029 --> 00:09:25,959
course it's it's in reality it's not

00:09:24,740 --> 00:09:29,089
that simple

00:09:25,959 --> 00:09:31,970
we also want this to be very robust in

00:09:29,089 --> 00:09:33,589
during the flight depending on what

00:09:31,970 --> 00:09:35,240
measurement equipment is being flown

00:09:33,589 --> 00:09:38,689
there's a weight limit for the airplane

00:09:35,240 --> 00:09:40,639
so it may be that there can't be a

00:09:38,689 --> 00:09:42,620
second person in the airplane it's only

00:09:40,639 --> 00:09:44,509
the pilot and in that case the pilot has

00:09:42,620 --> 00:09:46,490
has no time to since he's busy flying

00:09:44,509 --> 00:09:49,300
has no time to monitor the measurement

00:09:46,490 --> 00:09:52,040
system so we need it to be very robust

00:09:49,300 --> 00:09:55,490
that means that it needs to restart on

00:09:52,040 --> 00:09:56,990
failures and so on so that's one thing

00:09:55,490 --> 00:09:59,420
that we need from the system the other

00:09:56,990 --> 00:10:01,279
thing we want is in the lab we want this

00:09:59,420 --> 00:10:03,620
to be user-friendly so people can just

00:10:01,279 --> 00:10:06,079
unplug and plug the sensors back in and

00:10:03,620 --> 00:10:08,269
not worry about whether this works or

00:10:06,079 --> 00:10:11,180
you know whether to they have to restart

00:10:08,269 --> 00:10:14,000
the logger or not and we also wanted to

00:10:11,180 --> 00:10:16,610
serve live data to a web interface that

00:10:14,000 --> 00:10:18,980
would run on a tablet that's mounted in

00:10:16,610 --> 00:10:21,069
the front of the airplane and this was

00:10:18,980 --> 00:10:23,269
useful for the pilot to show various

00:10:21,069 --> 00:10:24,980
meteorological parameters it could be

00:10:23,269 --> 00:10:26,750
used to show the status of the

00:10:24,980 --> 00:10:28,639
measurement system so in case there's

00:10:26,750 --> 00:10:30,500
some major failure that the pilot look

00:10:28,639 --> 00:10:33,319
knows that there's no point to continue

00:10:30,500 --> 00:10:35,720
flying and he should land and have the

00:10:33,319 --> 00:10:38,929
measurement system checked so that's why

00:10:35,720 --> 00:10:41,269
we wanted a web interface for this so

00:10:38,929 --> 00:10:43,339
the very first version I wrote of this

00:10:41,269 --> 00:10:46,189
used the model device serial port you

00:10:43,339 --> 00:10:50,480
may know this it is basically a port of

00:10:46,189 --> 00:10:52,970
the win32 serial port module that is

00:10:50,480 --> 00:10:56,199
basically the module to access serial

00:10:52,970 --> 00:11:00,499
ports on Windows and it works well I

00:10:56,199 --> 00:11:02,839
just didn't find it as elegant to use as

00:11:00,499 --> 00:11:05,449
a regular file handle it does provide a

00:11:02,839 --> 00:11:07,570
file handle interface but that is only

00:11:05,449 --> 00:11:10,000
emulated with pearls

00:11:07,570 --> 00:11:14,350
so for example you can't use these file

00:11:10,000 --> 00:11:16,930
handles in a select system call its I

00:11:14,350 --> 00:11:20,050
found it tricky to configure timeouts

00:11:16,930 --> 00:11:21,880
especially if you wanted to receive line

00:11:20,050 --> 00:11:24,840
based data you know it's easy to set a

00:11:21,880 --> 00:11:29,200
timeout per character or per packet but

00:11:24,840 --> 00:11:33,060
lines are a little different so again it

00:11:29,200 --> 00:11:35,020
worked well but I felt like the next

00:11:33,060 --> 00:11:36,610
interfaces that I'm going to show you on

00:11:35,020 --> 00:11:37,090
the next slides or were a little more

00:11:36,610 --> 00:11:39,520
elegant

00:11:37,090 --> 00:11:42,580
I used the module daemon control for

00:11:39,520 --> 00:11:44,890
controlling the daemon and also writes

00:11:42,580 --> 00:11:47,440
LSP init files which I thought was very

00:11:44,890 --> 00:11:50,590
nice and it's it's just I felt like a

00:11:47,440 --> 00:11:53,230
nice demonization module in this version

00:11:50,590 --> 00:11:55,180
there was no live data of you yet so

00:11:53,230 --> 00:11:58,420
this was really just the very first

00:11:55,180 --> 00:12:00,610
initial version it is still part of the

00:11:58,420 --> 00:12:04,300
repository so in case you're interested

00:12:00,610 --> 00:12:07,600
to see what code with the by serial port

00:12:04,300 --> 00:12:10,390
would look like which is very similar to

00:12:07,600 --> 00:12:13,840
the Windows version then this is all in

00:12:10,390 --> 00:12:16,150
this repository here where you can look

00:12:13,840 --> 00:12:18,250
that up at this point I just wanted to

00:12:16,150 --> 00:12:19,810
also mention one one thing I found

00:12:18,250 --> 00:12:22,390
really useful if you're working with

00:12:19,810 --> 00:12:25,540
plug and play devices and USB devices

00:12:22,390 --> 00:12:29,640
you dev makes is really useful here

00:12:25,540 --> 00:12:33,040
so normally when you plug in USB devices

00:12:29,640 --> 00:12:34,650
they just get numbered in the order that

00:12:33,040 --> 00:12:37,150
you plugged them in and when you boot

00:12:34,650 --> 00:12:40,150
the order in which they initialize could

00:12:37,150 --> 00:12:43,840
be different every time so with these

00:12:40,150 --> 00:12:46,660
you dev rules you can say match you can

00:12:43,840 --> 00:12:48,760
specify matching rules that say ok for

00:12:46,660 --> 00:12:51,280
this device I want you to take this

00:12:48,760 --> 00:12:54,910
action so in this example here it would

00:12:51,280 --> 00:12:57,910
create a sim link in the Bev folder that

00:12:54,910 --> 00:13:00,580
is always linked to that specific USB

00:12:57,910 --> 00:13:02,470
device so that's really useful and

00:13:00,580 --> 00:13:04,240
there's also lots of other things you

00:13:02,470 --> 00:13:06,460
can do with it like running scripts when

00:13:04,240 --> 00:13:08,320
you plug in devices there are more

00:13:06,460 --> 00:13:10,510
filters available so if you want to

00:13:08,320 --> 00:13:12,190
match serial numbers for example that

00:13:10,510 --> 00:13:14,950
all of that is possible so this is

00:13:12,190 --> 00:13:19,240
something I found really useful for this

00:13:14,950 --> 00:13:20,730
kind of an application so the next

00:13:19,240 --> 00:13:24,510
version I wrote

00:13:20,730 --> 00:13:27,360
used the module IO term IOT's I hope I'm

00:13:24,510 --> 00:13:30,540
pronouncing that referent no reference I

00:13:27,360 --> 00:13:35,490
searched for a while but I hope that I'm

00:13:30,540 --> 00:13:37,620
just gonna call it term iOS and icon

00:13:35,490 --> 00:13:40,560
that this module made working with a TTY

00:13:37,620 --> 00:13:42,480
file is a whole lot nicer so these are

00:13:40,560 --> 00:13:44,280
real file handles they have a file

00:13:42,480 --> 00:13:47,490
descriptor and everything you can use

00:13:44,280 --> 00:13:53,600
them in select so I found this to be a

00:13:47,490 --> 00:13:53,600
lot cleaner in that sense to work with

00:13:54,260 --> 00:14:00,240
these serial ports you can use it

00:13:57,780 --> 00:14:02,190
together with the Perl module iOS TTY

00:14:00,240 --> 00:14:03,960
which is basically the Perl version of

00:14:02,190 --> 00:14:06,750
the command-line tool that I showed you

00:14:03,960 --> 00:14:09,480
earlier and I wrote a little article

00:14:06,750 --> 00:14:11,220
about this on pro monks so if you're

00:14:09,480 --> 00:14:13,800
interested to see some example code

00:14:11,220 --> 00:14:17,010
that's here this presentation is online

00:14:13,800 --> 00:14:18,630
the slides are already online so if you

00:14:17,010 --> 00:14:21,150
want to look at this these are all links

00:14:18,630 --> 00:14:23,490
here you can click on them later if you

00:14:21,150 --> 00:14:27,270
want to see that code I also included a

00:14:23,490 --> 00:14:30,090
little example of using the module sorry

00:14:27,270 --> 00:14:32,250
the program s Oh cat which even though

00:14:30,090 --> 00:14:34,680
it's called socket cat is actually a

00:14:32,250 --> 00:14:38,220
very versatile tool you can use it to

00:14:34,680 --> 00:14:40,380
create fake 2d wise so that's really

00:14:38,220 --> 00:14:44,220
useful for testing your serial code if

00:14:40,380 --> 00:14:46,320
you don't have the sensor available now

00:14:44,220 --> 00:14:49,320
in the end if I wanted this to be

00:14:46,320 --> 00:14:51,240
non-blocking I wanted to have timeouts

00:14:49,320 --> 00:14:53,460
and so on and that did end up being a

00:14:51,240 --> 00:14:58,650
fair amount of code that I put into its

00:14:53,460 --> 00:15:00,270
own module so that's ended up being kind

00:14:58,650 --> 00:15:03,330
of a little bit of a reinvented wheel

00:15:00,270 --> 00:15:05,730
there so you know it worked very well

00:15:03,330 --> 00:15:07,350
this this version of the code is

00:15:05,730 --> 00:15:11,850
actually B version that is still being

00:15:07,350 --> 00:15:13,230
used in operations today but I still

00:15:11,850 --> 00:15:17,160
felt like you know there's probably a

00:15:13,230 --> 00:15:19,440
little better way to do this I wrote one

00:15:17,160 --> 00:15:23,490
there's one demon that get started per

00:15:19,440 --> 00:15:25,880
data stream per serial port so again

00:15:23,490 --> 00:15:28,410
this works really well but it's a little

00:15:25,880 --> 00:15:30,720
elegant to have you know nine demons

00:15:28,410 --> 00:15:34,570
floating around plus the web server and

00:15:30,720 --> 00:15:38,890
so on the web server I am

00:15:34,570 --> 00:15:43,630
with plaque and I found this a lot nicer

00:15:38,890 --> 00:15:45,430
than regular CGI p.m. but still again

00:15:43,630 --> 00:15:47,260
it's it's kind of low-level let me put

00:15:45,430 --> 00:15:49,840
it that way it's it's it's really nice

00:15:47,260 --> 00:15:51,400
but it's low level so later on I used

00:15:49,840 --> 00:15:53,080
mojolicious I'll show you that on the

00:15:51,400 --> 00:15:56,980
next slide so I found that to be much

00:15:53,080 --> 00:15:58,980
nicer now at this point in the project

00:15:56,980 --> 00:16:01,870
were a little bit out of time and so I

00:15:58,980 --> 00:16:03,550
implemented the data exchange via the

00:16:01,870 --> 00:16:06,580
file system instead of you know more

00:16:03,550 --> 00:16:08,740
elegant method like a database or so but

00:16:06,580 --> 00:16:09,910
again this worked it's really robust as

00:16:08,740 --> 00:16:13,150
far as I know there haven't been any

00:16:09,910 --> 00:16:18,040
failures of the system so you know I I

00:16:13,150 --> 00:16:20,230
felt like it's a good setup but I felt

00:16:18,040 --> 00:16:23,020
like I also I had reinvented a couple of

00:16:20,230 --> 00:16:24,880
wheels and I always had this feeling

00:16:23,020 --> 00:16:28,090
like there must be a more elegant way to

00:16:24,880 --> 00:16:32,410
do this and in a lighter project I had

00:16:28,090 --> 00:16:34,390
the chance to try that this is a very

00:16:32,410 --> 00:16:36,280
similar application talking to serial

00:16:34,390 --> 00:16:39,730
ports the difference is that in this

00:16:36,280 --> 00:16:41,380
application we didn't need a web

00:16:39,730 --> 00:16:45,900
interface although that would have been

00:16:41,380 --> 00:16:49,060
relatively easy to implement and we

00:16:45,900 --> 00:16:53,980
wanted to connect to the serial ports

00:16:49,060 --> 00:16:56,140
over TCP so I used p OE for this that's

00:16:53,980 --> 00:16:58,630
the perl object environment and despite

00:16:56,140 --> 00:17:00,640
the name it's not an old framework it's

00:16:58,630 --> 00:17:02,500
actually an event loop framework so if

00:17:00,640 --> 00:17:04,240
you know for example any event did

00:17:02,500 --> 00:17:05,590
something similar to that and I feel

00:17:04,240 --> 00:17:08,080
like there's a really powerful really

00:17:05,590 --> 00:17:09,820
nice set of modules there's a lot of

00:17:08,080 --> 00:17:12,190
pre-written components you it's really

00:17:09,820 --> 00:17:15,190
easy to implement TCP servers TCP

00:17:12,190 --> 00:17:17,380
clients IRC BOTS

00:17:15,190 --> 00:17:20,890
there's modules to handle line based

00:17:17,380 --> 00:17:22,840
data sources and so on so I felt like it

00:17:20,890 --> 00:17:26,980
was better in that there were a lot of a

00:17:22,840 --> 00:17:30,010
lot less reinvented wheels but the API

00:17:26,980 --> 00:17:34,960
of P OE is a little complicated it takes

00:17:30,010 --> 00:17:36,940
some getting used to and it's you know

00:17:34,960 --> 00:17:39,070
once once you get into it it's fine but

00:17:36,940 --> 00:17:41,710
again I felt like maybe there's a little

00:17:39,070 --> 00:17:43,540
more elegant way to do this anyway it

00:17:41,710 --> 00:17:47,740
did simplify things in that now there's

00:17:43,540 --> 00:17:48,620
only one process that is in pou called

00:17:47,740 --> 00:17:51,570
the kernel

00:17:48,620 --> 00:17:54,570
and everything happens non-blocking

00:17:51,570 --> 00:17:56,430
event-based and so I could tie in

00:17:54,570 --> 00:18:00,150
basically as many serial ports as I

00:17:56,430 --> 00:18:04,850
wanted I used the i/o termios module

00:18:00,150 --> 00:18:08,310
again here I opened a TCP port per

00:18:04,850 --> 00:18:10,440
serial port so that various clients

00:18:08,310 --> 00:18:12,150
could connect to it and read data and if

00:18:10,440 --> 00:18:17,190
they wanted to they could send data to

00:18:12,150 --> 00:18:22,110
it and so on so again I this was good

00:18:17,190 --> 00:18:25,170
and it worked well but for the next

00:18:22,110 --> 00:18:29,070
project I tried something else and that

00:18:25,170 --> 00:18:31,980
was that project was last year it was

00:18:29,070 --> 00:18:35,370
for this it's not on the airplane now

00:18:31,980 --> 00:18:37,770
this is a separate system this sensor

00:18:35,370 --> 00:18:39,660
that you see here is a co2 sensor and

00:18:37,770 --> 00:18:41,790
it's waterproof which means that you can

00:18:39,660 --> 00:18:44,810
hold it in two rivers lakes the ocean

00:18:41,790 --> 00:18:47,400
and measure the co2 concentration there

00:18:44,810 --> 00:18:51,180
this was this had to be battery-powered

00:18:47,400 --> 00:18:54,420
so I used a Raspberry Pi and an Arduino

00:18:51,180 --> 00:18:57,750
for the data logging I put it all in its

00:18:54,420 --> 00:18:59,400
own enclosure so it has a battery all

00:18:57,750 --> 00:19:01,440
the circuitry is in this box that you

00:18:59,400 --> 00:19:12,390
see here and then the researchers can

00:19:01,440 --> 00:19:14,970
hold this into the water so the like I

00:19:12,390 --> 00:19:17,280
said there's an Arduino for data logging

00:19:14,970 --> 00:19:19,110
because that uses a lot less power about

00:19:17,280 --> 00:19:23,190
1/10 of the power of the Raspberry Pi

00:19:19,110 --> 00:19:25,440
and then when the researcher wants to

00:19:23,190 --> 00:19:28,320
connect to the data logger with their

00:19:25,440 --> 00:19:31,470
smartphone to either see the live data

00:19:28,320 --> 00:19:35,730
or to download the log files they can

00:19:31,470 --> 00:19:37,950
turn on the Raspberry Pi separately but

00:19:35,730 --> 00:19:40,680
the Raspberry Pi then does is opens a

00:19:37,950 --> 00:19:44,930
Wi-Fi access point and runs a

00:19:40,680 --> 00:19:47,580
mojolicious web server so that the

00:19:44,930 --> 00:19:50,430
researcher can take their cell phone and

00:19:47,580 --> 00:19:52,470
connect to that and have a live data

00:19:50,430 --> 00:19:56,250
view in the field or download the data

00:19:52,470 --> 00:19:58,440
files and so on and then the Arduino and

00:19:56,250 --> 00:20:00,270
the Raspberry Pi communicate via via

00:19:58,440 --> 00:20:02,860
their internal interfaces to exchange

00:20:00,270 --> 00:20:05,950
the data

00:20:02,860 --> 00:20:09,790
on the client side I used the javascript

00:20:05,950 --> 00:20:11,260
eventsource API so if you haven't heard

00:20:09,790 --> 00:20:13,299
of any good there's a lot of hidden

00:20:11,260 --> 00:20:15,400
links in my presentation so actually

00:20:13,299 --> 00:20:17,169
this year is a link that you can click

00:20:15,400 --> 00:20:20,799
on later if you want to learn about that

00:20:17,169 --> 00:20:22,660
basically it's a server push API and

00:20:20,799 --> 00:20:24,100
it's easy to implement and mojolicious

00:20:22,660 --> 00:20:26,200
of course they could have used other

00:20:24,100 --> 00:20:28,679
things like WebSockets or so on

00:20:26,200 --> 00:20:31,120
it's just seemed easiest in that moment

00:20:28,679 --> 00:20:32,860
next month I'll be building two more of

00:20:31,120 --> 00:20:34,419
these data loggers and I hope to use

00:20:32,860 --> 00:20:36,340
that opportunity to clean up my

00:20:34,419 --> 00:20:38,890
documentation and so on and I hope that

00:20:36,340 --> 00:20:44,490
I'll get a chance to publish the designs

00:20:38,890 --> 00:20:47,530
and the code for this sometime this year

00:20:44,490 --> 00:20:49,780
as I've been working more and more with

00:20:47,530 --> 00:20:52,240
mojolicious I've really gotten to like

00:20:49,780 --> 00:20:55,450
it a lot you know it's asynchronous a

00:20:52,240 --> 00:20:57,760
non-blocking event-based and I feel like

00:20:55,450 --> 00:20:59,380
it has a really nice and elegant API and

00:20:57,760 --> 00:21:02,559
I just wanted to show you sort of what

00:20:59,380 --> 00:21:05,380
the architecture looks like for with

00:21:02,559 --> 00:21:07,480
mojolicious so again we have one process

00:21:05,380 --> 00:21:09,400
in this case there was only one serial

00:21:07,480 --> 00:21:11,679
port but if you could easily extend this

00:21:09,400 --> 00:21:17,559
to as many serial ports or other data

00:21:11,679 --> 00:21:19,809
sources as you want I use the term iOS

00:21:17,559 --> 00:21:22,030
module again to get a file handle and in

00:21:19,809 --> 00:21:25,330
mojolicious is the i/o loop is called

00:21:22,030 --> 00:21:29,049
mojo Isle event loop is called mojo IO

00:21:25,330 --> 00:21:31,330
loop and it provides the module mojo io

00:21:29,049 --> 00:21:34,150
loop stream for handling file handles

00:21:31,330 --> 00:21:38,350
that includes sockets and so on and I

00:21:34,150 --> 00:21:41,140
added the line buffer module which then

00:21:38,350 --> 00:21:43,840
provides events for lines so normally

00:21:41,140 --> 00:21:47,740
the the stream module provides events

00:21:43,840 --> 00:21:49,630
for data received a closed error and so

00:21:47,740 --> 00:21:54,790
on and then line buffer adds an event

00:21:49,630 --> 00:21:57,040
for received lines the

00:21:54,790 --> 00:22:00,760
by itself it's already enough to log

00:21:57,040 --> 00:22:02,620
things to a database or to a file and at

00:22:00,760 --> 00:22:06,220
this point I just wanted to mention that

00:22:02,620 --> 00:22:08,440
there are mojo based modules for

00:22:06,220 --> 00:22:12,010
accessing databases that are basically

00:22:08,440 --> 00:22:15,600
wrappers for DVI but you know there's

00:22:12,010 --> 00:22:18,400
the Mojo PG for Postgres there's one for

00:22:15,600 --> 00:22:21,040
MySQL there's one for SQLite there's one

00:22:18,400 --> 00:22:23,440
for Reedus there's probably more I don't

00:22:21,040 --> 00:22:25,660
know up the top of my head but I found

00:22:23,440 --> 00:22:28,960
that their API is just really nice it

00:22:25,660 --> 00:22:31,000
adds some sugar to the DPI and it makes

00:22:28,960 --> 00:22:36,130
it integrate a little nicer with

00:22:31,000 --> 00:22:39,220
mojolicious so to serve this to the

00:22:36,130 --> 00:22:41,470
clients I pars the lines of data I turn

00:22:39,220 --> 00:22:44,140
them into Perl data structures and I

00:22:41,470 --> 00:22:47,200
send them to mojo event emitter object

00:22:44,140 --> 00:22:52,030
and that is as the name says it's an

00:22:47,200 --> 00:22:54,850
event based object so I say I tell it to

00:22:52,030 --> 00:22:56,890
I give it the data and then clients can

00:22:54,850 --> 00:22:59,080
register as listeners on that event

00:22:56,890 --> 00:23:00,820
emitter object and they receive that the

00:22:59,080 --> 00:23:02,170
data packets as they come in and then

00:23:00,820 --> 00:23:05,770
they can distribute them to their

00:23:02,170 --> 00:23:07,690
clients like I said I used the

00:23:05,770 --> 00:23:10,060
javascript eventsource api in this case

00:23:07,690 --> 00:23:12,430
but of course you could use a regular

00:23:10,060 --> 00:23:15,190
socket server you could implement web

00:23:12,430 --> 00:23:16,510
sockets or a static HTML whatever that's

00:23:15,190 --> 00:23:19,450
one of the reasons I really like

00:23:16,510 --> 00:23:24,730
mojolicious is you know it provides all

00:23:19,450 --> 00:23:26,800
of one package with a unified API so it

00:23:24,730 --> 00:23:29,560
makes all of this easy and like I said I

00:23:26,800 --> 00:23:31,150
had this this code for this specific

00:23:29,560 --> 00:23:34,900
data logger isn't published yet but I

00:23:31,150 --> 00:23:38,050
did publish a simplified example of this

00:23:34,900 --> 00:23:39,610
on Perl monks the link is down here so

00:23:38,050 --> 00:23:45,640
if you want to look at that there you

00:23:39,610 --> 00:23:48,580
can so this is a another system that's

00:23:45,640 --> 00:23:51,520
on the aircraft this has less to do with

00:23:48,580 --> 00:23:52,900
Perl and more to do with what I said at

00:23:51,520 --> 00:23:57,190
the beginning that there's a lot of

00:23:52,900 --> 00:23:58,990
hardware that gets sold for raspberry

00:23:57,190 --> 00:24:02,830
PI's in this case it's a GPS receiver

00:23:58,990 --> 00:24:06,250
chip and the thing is that a lot of GPS

00:24:02,830 --> 00:24:07,870
receivers provide a signal called PPS or

00:24:06,250 --> 00:24:10,630
pulse per second

00:24:07,870 --> 00:24:15,160
and what that is is a high-precision

00:24:10,630 --> 00:24:17,980
time signal to that synchronize the GPS

00:24:15,160 --> 00:24:20,350
time and that is provided on a pin to

00:24:17,980 --> 00:24:23,980
the Raspberry Pi and the Linux kernel

00:24:20,350 --> 00:24:26,080
can actually handle that signal and then

00:24:23,980 --> 00:24:28,780
a daemon like chrome II for example

00:24:26,080 --> 00:24:32,860
that's an NTP service can use the PPS

00:24:28,780 --> 00:24:35,020
signal to provide a highly accurate

00:24:32,860 --> 00:24:37,540
system time

00:24:35,020 --> 00:24:40,510
that's synchronized with GPS time so we

00:24:37,540 --> 00:24:44,260
have this Raspberry Pi running in the

00:24:40,510 --> 00:24:46,900
aircraft and it is a Wi-Fi access point

00:24:44,260 --> 00:24:49,210
it is a DHCP server and it is an NTP

00:24:46,900 --> 00:24:50,950
server so that all of the measurement

00:24:49,210 --> 00:24:53,170
systems in the aircraft because there

00:24:50,950 --> 00:24:54,790
are several ones all use the same time

00:24:53,170 --> 00:24:56,170
base which is of course very important

00:24:54,790 --> 00:24:59,020
when you're logging data and you want to

00:24:56,170 --> 00:25:01,000
synchronize it the instructions for how

00:24:59,020 --> 00:25:02,890
I built this and how to configure the

00:25:01,000 --> 00:25:05,559
Raspberry Pi are also part of this

00:25:02,890 --> 00:25:09,220
repository that I linked to earlier so

00:25:05,559 --> 00:25:12,610
you can look that up as well okay a

00:25:09,220 --> 00:25:14,920
little change of topic I wanted to talk

00:25:12,610 --> 00:25:18,880
about the systems that were using for

00:25:14,920 --> 00:25:21,010
our current measurements so in my

00:25:18,880 --> 00:25:24,100
department its department 1 eco

00:25:21,010 --> 00:25:26,710
hydrology at the igb I am currently

00:25:24,100 --> 00:25:29,940
mostly working with the group landscape

00:25:26,710 --> 00:25:33,820
eco hydrology and their focus to put it

00:25:29,940 --> 00:25:37,090
generally is precipitation and the water

00:25:33,820 --> 00:25:40,750
cycle so it may seem simple but it's

00:25:37,090 --> 00:25:43,960
actually can get very complex so when it

00:25:40,750 --> 00:25:45,610
rains there are parts of that water go

00:25:43,960 --> 00:25:48,309
different places some of it runs off

00:25:45,610 --> 00:25:50,670
into lakes and rivers some of it

00:25:48,309 --> 00:25:55,150
evaporates directly off of the ground

00:25:50,670 --> 00:25:57,490
some of it goes into the ground and is

00:25:55,150 --> 00:25:59,470
immediately taken up by vegetation and

00:25:57,490 --> 00:26:01,840
can return to the atmosphere from there

00:25:59,470 --> 00:26:04,140
some of it goes deeper into the ground

00:26:01,840 --> 00:26:08,190
and transitions over into ground water

00:26:04,140 --> 00:26:12,940
and so the focus of the group is to

00:26:08,190 --> 00:26:14,710
quantify these different amounts of

00:26:12,940 --> 00:26:17,200
water where does the water go how does

00:26:14,710 --> 00:26:18,460
that distribute and they're actually

00:26:17,200 --> 00:26:21,220
using a really interesting technology

00:26:18,460 --> 00:26:21,430
called stable isotope tracers and so

00:26:21,220 --> 00:26:24,130
what

00:26:21,430 --> 00:26:27,640
this means is there are stable isotopes

00:26:24,130 --> 00:26:32,790
of water that occur around the world in

00:26:27,640 --> 00:26:35,170
different distributions and based on how

00:26:32,790 --> 00:26:38,770
so in different relationships to one

00:26:35,170 --> 00:26:41,350
another and because these are measured

00:26:38,770 --> 00:26:43,900
around the world and so we know

00:26:41,350 --> 00:26:46,150
generally what's a distribution of

00:26:43,900 --> 00:26:48,850
isotopes there is in the rainwater and

00:26:46,150 --> 00:26:51,850
that changes over time we can use these

00:26:48,850 --> 00:26:54,490
as natural tracers so for a just for

00:26:51,850 --> 00:26:56,670
example what the group does is they take

00:26:54,490 --> 00:26:59,530
ground samples at different depths and

00:26:56,670 --> 00:27:02,170
they analyze they extract the water from

00:26:59,530 --> 00:27:03,850
those they analyze them and very

00:27:02,170 --> 00:27:07,570
specialized devices to measure the

00:27:03,850 --> 00:27:11,560
different isotopes of water and then

00:27:07,570 --> 00:27:13,650
based on several samples over time and

00:27:11,560 --> 00:27:16,960
different depths you can actually see

00:27:13,650 --> 00:27:20,650
the water wander down through the

00:27:16,960 --> 00:27:24,030
different levels of the earth and you

00:27:20,650 --> 00:27:26,530
can see how rain water gets distributed

00:27:24,030 --> 00:27:29,620
this all this data is then fed into

00:27:26,530 --> 00:27:31,360
computer models and then these computer

00:27:29,620 --> 00:27:34,120
models can be used to for example

00:27:31,360 --> 00:27:38,980
predict the effects of global warming

00:27:34,120 --> 00:27:42,400
can be used to affect the chance to

00:27:38,980 --> 00:27:45,250
predict the changes due to different

00:27:42,400 --> 00:27:48,390
vegetation and so on so one of the

00:27:45,250 --> 00:27:51,160
research areas is the city of Berlin and

00:27:48,390 --> 00:27:52,870
there's another area to the east of

00:27:51,160 --> 00:27:57,040
Berlin in the state of Brandenburg and

00:27:52,870 --> 00:27:58,750
that is where I where these measurements

00:27:57,040 --> 00:28:02,050
sites that I'm going to show you now are

00:27:58,750 --> 00:28:05,170
located so we have two weather stations

00:28:02,050 --> 00:28:07,390
and they measure the normal

00:28:05,170 --> 00:28:10,060
meteorological parameters so wind

00:28:07,390 --> 00:28:13,270
temperature humidity rainfall and so on

00:28:10,060 --> 00:28:15,220
they also met it measure solar radiation

00:28:13,270 --> 00:28:17,350
and they measure two components that's

00:28:15,220 --> 00:28:20,890
the solar radiation that comes down from

00:28:17,350 --> 00:28:24,160
the Sun directly and what is reflected

00:28:20,890 --> 00:28:27,040
back up from the ground and there is a

00:28:24,160 --> 00:28:29,830
there are also ground-based sensors so

00:28:27,040 --> 00:28:32,980
they measure for example the soil heat

00:28:29,830 --> 00:28:34,630
flux meaning what heat energy goes into

00:28:32,980 --> 00:28:36,660
the ground or is leaving the ground at

00:28:34,630 --> 00:28:36,660
night

00:28:36,760 --> 00:28:43,929
they measure soil moisture they measure

00:28:40,480 --> 00:28:46,000
soil temperature and so on so you know

00:28:43,929 --> 00:28:49,559
that's how you can get these parameters

00:28:46,000 --> 00:28:52,870
that I talked about for the soil as well

00:28:49,559 --> 00:28:54,700
then there are we have their separately

00:28:52,870 --> 00:28:56,110
from that soil moisture science this is

00:28:54,700 --> 00:28:58,090
what they look like when they're

00:28:56,110 --> 00:29:01,480
installed this hole will be closed up

00:28:58,090 --> 00:29:03,429
later and what you see here is the

00:29:01,480 --> 00:29:05,260
sensors that measure soil moisture at

00:29:03,429 --> 00:29:10,059
different depths starting at about 10

00:29:05,260 --> 00:29:12,970
centimeters down to a meter and compared

00:29:10,059 --> 00:29:16,210
to the sampling of the soil where you

00:29:12,970 --> 00:29:20,980
only get a momentary picture these

00:29:16,210 --> 00:29:22,960
measure 24/7 and so you get data for

00:29:20,980 --> 00:29:26,230
example is showing that when it rains

00:29:22,960 --> 00:29:28,090
lightly that water may not penetrate

00:29:26,230 --> 00:29:30,039
very deeply into the ground at all

00:29:28,090 --> 00:29:32,230
because it's all immediately absorbed by

00:29:30,039 --> 00:29:34,870
the vegetation or when there's heavy

00:29:32,230 --> 00:29:37,750
rain you can see it wander down through

00:29:34,870 --> 00:29:40,539
the different layers of the ground and

00:29:37,750 --> 00:29:42,039
you can see how long that takes and so

00:29:40,539 --> 00:29:46,809
on so that's why these sites are

00:29:42,039 --> 00:29:49,510
important and then we have so called SAP

00:29:46,809 --> 00:29:53,110
flow sensors and these basically measure

00:29:49,510 --> 00:29:54,700
the flow of water up tree trunks so how

00:29:53,110 --> 00:29:57,630
much water is a tree taking I talked

00:29:54,700 --> 00:30:00,640
about this briefly in an Riga last year

00:29:57,630 --> 00:30:03,549
these sensors they're basically two

00:30:00,640 --> 00:30:06,429
metal rods that are inserted into the

00:30:03,549 --> 00:30:10,360
tree trunk they measure the temperature

00:30:06,429 --> 00:30:12,850
difference between the two rods and one

00:30:10,360 --> 00:30:14,770
of them is lightly heated and so what

00:30:12,850 --> 00:30:16,720
that means is when the water is moving

00:30:14,770 --> 00:30:18,549
up the tree trunk quickly so when

00:30:16,720 --> 00:30:22,179
there's a lot of water it carries the

00:30:18,549 --> 00:30:24,570
the heat energy and then the temperature

00:30:22,179 --> 00:30:28,659
difference between these two rods is

00:30:24,570 --> 00:30:30,789
lower and when the tree is not taking up

00:30:28,659 --> 00:30:33,010
so much water because one of the rods is

00:30:30,789 --> 00:30:34,570
heated lightly the temperature

00:30:33,010 --> 00:30:38,740
difference between the two rods will

00:30:34,570 --> 00:30:41,409
rise and based on this data and on some

00:30:38,740 --> 00:30:44,590
calculations on the area of the tree and

00:30:41,409 --> 00:30:46,120
so on you can estimate how much water is

00:30:44,590 --> 00:30:48,340
this tree taking up which is another

00:30:46,120 --> 00:30:50,660
component of the water cycle that I

00:30:48,340 --> 00:30:54,060
showed or

00:30:50,660 --> 00:30:54,960
so I wanted to talk briefly about one of

00:30:54,060 --> 00:30:58,650
the things that we're doing with

00:30:54,960 --> 00:30:59,970
raspberry PI's here the two weather

00:30:58,650 --> 00:31:01,950
stations that I showed on the previous

00:30:59,970 --> 00:31:03,750
slide one of them already has an

00:31:01,950 --> 00:31:08,730
internet connection and the other one

00:31:03,750 --> 00:31:10,740
doesn't yet so luckily there is a Wi-Fi

00:31:08,730 --> 00:31:13,620
network and a building nearby that we

00:31:10,740 --> 00:31:15,780
have access to however the data logger

00:31:13,620 --> 00:31:18,540
itself is kind of old-school in its

00:31:15,780 --> 00:31:22,140
communication capabilities it only knows

00:31:18,540 --> 00:31:23,280
PPP it knows FTP maybe HTTP but really

00:31:22,140 --> 00:31:27,240
not much more it doesn't even know

00:31:23,280 --> 00:31:29,850
Ethernet so normally what you would do

00:31:27,240 --> 00:31:31,530
is you would go out and buy a modem from

00:31:29,850 --> 00:31:34,980
the manufacturer for several hundred

00:31:31,530 --> 00:31:37,770
dollars but we thought well let's try

00:31:34,980 --> 00:31:39,240
doing it with a Raspberry Pi obviously

00:31:37,770 --> 00:31:42,060
it can easily connect to the Wi-Fi

00:31:39,240 --> 00:31:44,550
network and it has a hardware serial

00:31:42,060 --> 00:31:48,690
port that can connect to the data logger

00:31:44,550 --> 00:31:52,080
and then all we need to do is run a PPP

00:31:48,690 --> 00:31:56,790
server on it so that's relatively easy

00:31:52,080 --> 00:32:01,230
to do on Linux and then it's connected

00:31:56,790 --> 00:32:02,880
to a switch to 12 volt output so a

00:32:01,230 --> 00:32:04,590
switch power output because this is

00:32:02,880 --> 00:32:06,870
battery-powered we can't run the

00:32:04,590 --> 00:32:08,790
Raspberry Pi continuously and so

00:32:06,870 --> 00:32:11,630
basically this data logger treats this

00:32:08,790 --> 00:32:15,420
Raspberry Pi like a regular modem and

00:32:11,630 --> 00:32:18,870
old-school modem and this is something

00:32:15,420 --> 00:32:22,800
again I hope to be able to publish some

00:32:18,870 --> 00:32:25,410
instructions on how I did this some time

00:32:22,800 --> 00:32:27,720
soon unfortunately I can nail down the

00:32:25,410 --> 00:32:31,920
time frame yet but hopefully this year

00:32:27,720 --> 00:32:34,140
or so so I also wanted to talk about

00:32:31,920 --> 00:32:36,330
just two little sides here are some

00:32:34,140 --> 00:32:37,800
things that I learned while working with

00:32:36,330 --> 00:32:42,630
all of this data that I thought might be

00:32:37,800 --> 00:32:44,820
useful so at the beginning I talked

00:32:42,630 --> 00:32:48,060
about how we have nine different data

00:32:44,820 --> 00:32:51,540
streams and of course when we're

00:32:48,060 --> 00:32:53,340
analyzing the data later we want this we

00:32:51,540 --> 00:32:55,050
we only want to work with the data where

00:32:53,340 --> 00:32:56,940
we have all of the data streams at the

00:32:55,050 --> 00:32:58,800
same time the sensors take different

00:32:56,940 --> 00:33:00,630
amounts of time to initialize there

00:32:58,800 --> 00:33:02,900
might be gaps in the data and so on so

00:33:00,630 --> 00:33:06,420
that's what I've tried to represent here

00:33:02,900 --> 00:33:08,850
just an example with two data streams

00:33:06,420 --> 00:33:10,530
here this is so this shows you know we

00:33:08,850 --> 00:33:12,000
have some data coming in from one of the

00:33:10,530 --> 00:33:13,950
data loggers and then maybe there's a

00:33:12,000 --> 00:33:16,170
gap and where there's no data because

00:33:13,950 --> 00:33:18,270
it's still initializing or something you

00:33:16,170 --> 00:33:20,250
know some more data comes in another gap

00:33:18,270 --> 00:33:23,720
some more data and then finally back

00:33:20,250 --> 00:33:26,670
here the second data logger comes in and

00:33:23,720 --> 00:33:28,050
here this period of time back here is

00:33:26,670 --> 00:33:29,910
what we're actually interested in

00:33:28,050 --> 00:33:32,910
because that's where we have data from

00:33:29,910 --> 00:33:36,810
all of the data loggers so I wrote some

00:33:32,910 --> 00:33:39,420
code that I've posted on chrome monks it

00:33:36,810 --> 00:33:41,310
is uses the module set in span which

00:33:39,420 --> 00:33:45,330
made it pretty nice that based on the

00:33:41,310 --> 00:33:47,820
timestamps I can look at the different

00:33:45,330 --> 00:33:49,620
data streams I can look at when do we

00:33:47,820 --> 00:33:51,630
when are there gaps you know so when

00:33:49,620 --> 00:33:53,880
might one of the sensors have failed for

00:33:51,630 --> 00:33:55,650
a short amount of time or maybe there

00:33:53,880 --> 00:33:57,540
were errors in the data stream and I can

00:33:55,650 --> 00:33:59,490
look at for which periods of time do we

00:33:57,540 --> 00:34:01,200
have data from all data loggers at the

00:33:59,490 --> 00:34:03,720
same time because then we want to cut

00:34:01,200 --> 00:34:05,790
our log files based on that so that

00:34:03,720 --> 00:34:09,659
that's the data sets that we then feed

00:34:05,790 --> 00:34:11,760
into the processing software later on I

00:34:09,659 --> 00:34:14,429
turned this into a script as well and so

00:34:11,760 --> 00:34:15,899
if if this kind of thing is interesting

00:34:14,429 --> 00:34:17,340
to any of you you know these you can

00:34:15,899 --> 00:34:21,830
click on these links and look at the

00:34:17,340 --> 00:34:25,139
code how I did that the other thing is

00:34:21,830 --> 00:34:26,790
in you know I talked about how our two

00:34:25,139 --> 00:34:28,740
weather stations will have internet

00:34:26,790 --> 00:34:30,780
connections but then we have a whole

00:34:28,740 --> 00:34:33,300
bunch of data loggers that we read out

00:34:30,780 --> 00:34:36,060
manually so we drive out on average once

00:34:33,300 --> 00:34:37,980
once a month and download the data from

00:34:36,060 --> 00:34:43,649
the data loggers and we get it as CSV

00:34:37,980 --> 00:34:45,629
files and the data loggers internal

00:34:43,649 --> 00:34:47,940
memory when you download the data is

00:34:45,629 --> 00:34:49,800
actually not clear so every time you

00:34:47,940 --> 00:34:52,320
download new data from the data logger

00:34:49,800 --> 00:34:54,389
you get basically the entire data set

00:34:52,320 --> 00:34:58,200
and that means we have a ton of

00:34:54,389 --> 00:35:00,750
duplicate records and I wanted to just

00:34:58,200 --> 00:35:03,870
stuff these into a database and not

00:35:00,750 --> 00:35:06,990
really worry about whether there are

00:35:03,870 --> 00:35:09,150
duplicates or not so in terms of SQL you

00:35:06,990 --> 00:35:11,760
know one data record is just a regular

00:35:09,150 --> 00:35:14,280
insert and then when there's a duplicate

00:35:11,760 --> 00:35:15,810
I wanted it to either be ignored or

00:35:14,280 --> 00:35:16,820
updated that doesn't really matter

00:35:15,810 --> 00:35:19,160
because it's

00:35:16,820 --> 00:35:21,740
duplicate that should be identical but I

00:35:19,160 --> 00:35:24,740
also wanted to identify if there ever

00:35:21,740 --> 00:35:26,540
was a case where the time stamps which

00:35:24,740 --> 00:35:27,980
should be unique have different data

00:35:26,540 --> 00:35:29,600
because that would indicate a serious

00:35:27,980 --> 00:35:33,440
error somewhere you know a clock that

00:35:29,600 --> 00:35:35,300
was set wrong or something and so this

00:35:33,440 --> 00:35:37,910
is a question I asked on purl monks and

00:35:35,300 --> 00:35:40,610
I got the next tip that this could be

00:35:37,910 --> 00:35:45,320
done at least in Postgres with a trigger

00:35:40,610 --> 00:35:48,050
and so then I also posted the trigger s

00:35:45,320 --> 00:35:51,380
Q of the SQL code that I used for that

00:35:48,050 --> 00:35:55,070
so you can look at that at this link

00:35:51,380 --> 00:35:57,860
here so finally what's going on at the

00:35:55,070 --> 00:36:01,210
moment aside from the data collection

00:35:57,860 --> 00:36:04,160
that I talked about I am working on a

00:36:01,210 --> 00:36:08,240
server a central server for all of our

00:36:04,160 --> 00:36:11,210
data streams this would this will handle

00:36:08,240 --> 00:36:13,850
the FTP uploads from the weather

00:36:11,210 --> 00:36:15,890
stations the CSV imports from the data

00:36:13,850 --> 00:36:19,070
loggers that we read out manually it'll

00:36:15,890 --> 00:36:23,090
store this data actually already does

00:36:19,070 --> 00:36:25,220
and it will disseminate the data to

00:36:23,090 --> 00:36:28,250
other databases so for example we have

00:36:25,220 --> 00:36:29,780
at the igb a database called Fred which

00:36:28,250 --> 00:36:31,790
is the freshwater research and

00:36:29,780 --> 00:36:35,410
environmental database and this is

00:36:31,790 --> 00:36:40,220
publicly available you can download our

00:36:35,410 --> 00:36:41,450
publicly available datasets there so if

00:36:40,220 --> 00:36:44,870
you're interested in that kind of thing

00:36:41,450 --> 00:36:48,410
you can do that there and I also want to

00:36:44,870 --> 00:36:50,420
implement a kind of a live data view so

00:36:48,410 --> 00:36:52,130
both for for myself to see if the

00:36:50,420 --> 00:36:54,380
sensors are still working for our

00:36:52,130 --> 00:36:57,320
scientists they had a quick overview and

00:36:54,380 --> 00:37:00,080
also may be interesting to the public to

00:36:57,320 --> 00:37:03,200
look at you know what's what the weather

00:37:00,080 --> 00:37:05,240
data currently says and so I gave a

00:37:03,200 --> 00:37:07,430
lightning talk in Riga last year about a

00:37:05,240 --> 00:37:10,760
prototype of an interface using the

00:37:07,430 --> 00:37:13,310
JavaScript Otley library and my web

00:37:10,760 --> 00:37:16,490
pearl project and that's also something

00:37:13,310 --> 00:37:20,390
that I will be putting on this server

00:37:16,490 --> 00:37:24,590
now the URL is here squid igb - Berlin

00:37:20,390 --> 00:37:26,240
de there's nothing there yet but I do

00:37:24,590 --> 00:37:28,910
hope that

00:37:26,240 --> 00:37:31,670
again may sometime by the end of the

00:37:28,910 --> 00:37:34,010
year there you should be able to see

00:37:31,670 --> 00:37:37,100
some of our publicly available data

00:37:34,010 --> 00:37:38,780
there and this I should mention this

00:37:37,100 --> 00:37:41,890
uses mojolicious this is entirely

00:37:38,780 --> 00:37:46,760
written in mojolicious with docker and

00:37:41,890 --> 00:37:47,750
ftp server and so on so this is one of

00:37:46,760 --> 00:37:49,550
the reasons that I've been using

00:37:47,750 --> 00:37:50,869
mojolicious more and more recently and

00:37:49,550 --> 00:37:54,520
it's been it's been going really well

00:37:50,869 --> 00:37:59,840
it's I've enjoyed working with it so

00:37:54,520 --> 00:38:01,490
yeah that's already my talk and I see

00:37:59,840 --> 00:38:04,730
that I have managed to stay in my time

00:38:01,490 --> 00:38:17,330
so if there are any questions I would be

00:38:04,730 --> 00:38:23,990
happy to take them now and I think I'm

00:38:17,330 --> 00:38:26,270
not sure if I can unmute you if you need

00:38:23,990 --> 00:38:30,170
questions or if I need one of the

00:38:26,270 --> 00:38:32,119
moderators to help me out here yeah and

00:38:30,170 --> 00:38:34,310
I believe everyone has the ability to

00:38:32,119 --> 00:38:36,770
unmute themselves if they want to ask a

00:38:34,310 --> 00:38:41,630
question or here Tiago has a question

00:38:36,770 --> 00:38:44,380
yes I see the raised hand okay yeah so

00:38:41,630 --> 00:38:47,600
at some point you were mentioning that

00:38:44,380 --> 00:38:49,390
you were playing we would have rules

00:38:47,600 --> 00:38:54,500
yeah

00:38:49,390 --> 00:38:58,340
did you when writing these new dev rules

00:38:54,500 --> 00:39:02,270
for the passing what you calling scripts

00:38:58,340 --> 00:39:06,650
written in parallel were you using some

00:39:02,270 --> 00:39:09,619
other batch of scripts or so and if you

00:39:06,650 --> 00:39:15,890
are using parallel yeah any model in

00:39:09,619 --> 00:39:22,790
particular so I was not calling Perl in

00:39:15,890 --> 00:39:26,150
this case I was only using them to set

00:39:22,790 --> 00:39:33,109
up those symlinks so that I could have

00:39:26,150 --> 00:39:34,820
reliable names for the USB devices I so

00:39:33,109 --> 00:39:38,180
i unfortunately I don't know off the top

00:39:34,820 --> 00:39:39,470
of my head if there are specific perl

00:39:38,180 --> 00:39:43,730
modules for

00:39:39,470 --> 00:39:47,060
that I do know that you can call any

00:39:43,730 --> 00:39:50,180
Perl script basically and I would assume

00:39:47,060 --> 00:39:53,150
that you only need a module if you want

00:39:50,180 --> 00:39:56,390
to interact with you dev further than

00:39:53,150 --> 00:39:59,930
that you know if III think that you dev

00:39:56,390 --> 00:40:01,160
passes certain values I'm not sure

00:39:59,930 --> 00:40:05,510
they're on the command line weren't

00:40:01,160 --> 00:40:07,310
liner in the environment but if you need

00:40:05,510 --> 00:40:08,570
I think if you need further interaction

00:40:07,310 --> 00:40:10,550
with you dev then you would probably

00:40:08,570 --> 00:40:12,800
need some kind of module for that and

00:40:10,550 --> 00:40:16,520
unfortunately I can't tell you which one

00:40:12,800 --> 00:40:19,070
there I think but for basic stuff you

00:40:16,520 --> 00:40:24,980
know like run - even just running a

00:40:19,070 --> 00:40:28,130
script is is pretty easy yeah I I

00:40:24,980 --> 00:40:29,840
remember that so I was just trying to

00:40:28,130 --> 00:40:30,230
figure out if there was a particular

00:40:29,840 --> 00:40:37,630
model

00:40:30,230 --> 00:40:39,890
thanks yeah okay yeah hi

00:40:37,630 --> 00:40:42,140
just a quick question about the

00:40:39,890 --> 00:40:45,740
Raspberry Pi ecosystem could you just go

00:40:42,140 --> 00:40:48,320
over loading Perl what versions you use

00:40:45,740 --> 00:40:51,200
and how difficult it is to get things

00:40:48,320 --> 00:40:53,420
off Sipan what how that all process

00:40:51,200 --> 00:40:56,000
works and now we get myself

00:40:53,420 --> 00:40:57,680
it works like basically any other Linux

00:40:56,000 --> 00:41:01,609
distribution so it pearl comes

00:40:57,680 --> 00:41:07,630
pre-installed I am trying to remember I

00:41:01,609 --> 00:41:10,910
think it's either 526 or 528 and then

00:41:07,630 --> 00:41:14,150
you can so it's it's like any other

00:41:10,910 --> 00:41:16,760
Linux distribution really you can use

00:41:14,150 --> 00:41:23,690
local Lib which is something I did you

00:41:16,760 --> 00:41:28,599
can use the apt-get to install packages

00:41:23,690 --> 00:41:33,050
coming from the Debian repositories and

00:41:28,599 --> 00:41:36,859
the you know you can install c-pen cfnm

00:41:33,050 --> 00:41:40,480
or so c10 - and install modules that way

00:41:36,859 --> 00:41:43,910
it's it's the only thing to consider is

00:41:40,480 --> 00:41:47,869
that the Raspberry Pi so for example the

00:41:43,910 --> 00:41:50,440
Raspberry Pi 0 W is it's a 1 gigahertz

00:41:47,869 --> 00:41:54,819
processor

00:41:50,440 --> 00:41:58,030
and I think the zero only has one or two

00:41:54,819 --> 00:42:00,220
cores so if you compile stuff especially

00:41:58,030 --> 00:42:04,359
if you want to compile Perl that takes a

00:42:00,220 --> 00:42:07,359
long time so as long as you're prepared

00:42:04,359 --> 00:42:11,099
for that it's it's like any other Linux

00:42:07,359 --> 00:42:14,589
distribution and I actually prefer

00:42:11,099 --> 00:42:18,099
getting my modules off of the Debian

00:42:14,589 --> 00:42:20,880
repositories when I can just because

00:42:18,099 --> 00:42:23,140
it's so much faster to install that way

00:42:20,880 --> 00:42:25,660
that limitation I think the newer

00:42:23,140 --> 00:42:27,640
raspberry PI's of the Raspberry Pi 3 & 4

00:42:25,660 --> 00:42:30,400
they're fast enough so that compiling

00:42:27,640 --> 00:42:31,900
stuff isn't that much of a pain but on

00:42:30,400 --> 00:42:33,609
the all the other raspberry PI's if it

00:42:31,900 --> 00:42:37,000
does just take a while that's that's

00:42:33,609 --> 00:42:38,849
really all and it's a obviously it's a

00:42:37,000 --> 00:42:43,720
different processor architecture arm

00:42:38,849 --> 00:42:46,329
instead of Intel so but I haven't run

00:42:43,720 --> 00:42:48,700
into any trouble because of that so yeah

00:42:46,329 --> 00:42:52,530
mostly like a regular Linux distribution

00:42:48,700 --> 00:42:52,530

YouTube URL: https://www.youtube.com/watch?v=V0GKykOCPzM


