Title: Andrew Hewus Fresh - HealthCheck - Diagnostics Results for your code
Publication date: 2020-06-26
Playlist: TPC 2020 in the Cloud
Description: 
	We’ve been moving towards separating our monoliths into microservices, being able to monitor those in a way that’s simple enough to do, but powerful enough to actually be useful is a difficult problem. We are solving it by having each service be able to tell us how it’s feeling by writing diagnostic that tells us whether a part is working correctly. Having a standard for the HealthCheck Diagostic Result format means that we can even implement it in our Go services or those written in any other language.

You’ll learn about the idea behind HealthChecks, plus some of the Diagnostic’s we’ve open sourced and how we’re not only using it to make sure individual instances are healthy enough to be serving requests, but also how we’re finding other ways to use it to increase visibility into how the service is performing.
Captions: 
	00:00:00,060 --> 00:00:08,220
yeah that's cute Chua hello everybody

00:00:04,279 --> 00:00:10,950
welcome to this talk

00:00:08,220 --> 00:00:13,139
Andrew Hugh is fresh is going to be

00:00:10,950 --> 00:00:16,400
talking about health check diagnostic

00:00:13,139 --> 00:00:19,650
results for your code Andrew

00:00:16,400 --> 00:00:21,660
howdy everybody I'm Andrew

00:00:19,650 --> 00:00:24,750
I wanted it branded an Essene you know

00:00:21,660 --> 00:00:25,590
to give this talk but you as he's been

00:00:24,750 --> 00:00:28,199
doing a lot more of the implementation

00:00:25,590 --> 00:00:32,640
side of everything and writing stuff and

00:00:28,199 --> 00:00:34,739
actually using it he was busy though and

00:00:32,640 --> 00:00:37,590
decided he didn't want to so you get to

00:00:34,739 --> 00:00:39,710
hear from me instead so I'm gonna start

00:00:37,590 --> 00:00:42,180
with a little story about growing things

00:00:39,710 --> 00:00:43,860
so we started out you know I'm happily

00:00:42,180 --> 00:00:46,410
providing services to people with a

00:00:43,860 --> 00:00:49,020
monolithic gap you know and it probably

00:00:46,410 --> 00:00:51,539
needs file system access you know and

00:00:49,020 --> 00:00:53,550
it's pretty simple overall you know

00:00:51,539 --> 00:00:56,039
essentially you add a database to it and

00:00:53,550 --> 00:00:57,390
it's still pretty easy to monitor you

00:00:56,039 --> 00:00:59,969
and when something breaks there's not

00:00:57,390 --> 00:01:01,410
that many things that can go wrong with

00:00:59,969 --> 00:01:05,610
your application because there aren't

00:01:01,410 --> 00:01:07,680
that many pieces to it so figuring out

00:01:05,610 --> 00:01:08,909
what's wrong is pretty simple but then

00:01:07,680 --> 00:01:12,140
you look over and you see somebody else

00:01:08,909 --> 00:01:15,299
has sprung up another app on you

00:01:12,140 --> 00:01:16,890
somebody else has some other services

00:01:15,299 --> 00:01:19,439
running on a different model it's it's

00:01:16,890 --> 00:01:22,020
got all these same requirements and then

00:01:19,439 --> 00:01:23,340
there's you know a few more and lots and

00:01:22,020 --> 00:01:25,640
you end up with a whole bunch of these

00:01:23,340 --> 00:01:30,900
things just running all over the place

00:01:25,640 --> 00:01:33,630
now ops games pretty good and they were

00:01:30,900 --> 00:01:35,640
able to get everybody working on the

00:01:33,630 --> 00:01:39,360
same page mostly and everything is kind

00:01:35,640 --> 00:01:41,040
of in the same you know audited and

00:01:39,360 --> 00:01:42,869
working the same way and so everything's

00:01:41,040 --> 00:01:45,960
been all on the line and working so now

00:01:42,869 --> 00:01:48,329
everything's pretty easy to keep track

00:01:45,960 --> 00:01:48,780
of and work on and you know it's pretty

00:01:48,329 --> 00:01:50,850
good

00:01:48,780 --> 00:01:52,829
of course then you realize that these

00:01:50,850 --> 00:01:55,470
two monoliths are sharing this piece of

00:01:52,829 --> 00:01:56,850
functionality and these four monoliths

00:01:55,470 --> 00:01:59,490
over here share a different piece of

00:01:56,850 --> 00:02:01,890
functionality and these three have a

00:01:59,490 --> 00:02:04,729
different thing that's reimplemented in

00:02:01,890 --> 00:02:07,409
each one and by different team people

00:02:04,729 --> 00:02:09,780
and then the folks that are using

00:02:07,409 --> 00:02:12,870
multiple different of your applications

00:02:09,780 --> 00:02:14,580
are really

00:02:12,870 --> 00:02:17,599
confused when they update stuff in one

00:02:14,580 --> 00:02:20,040
spot and it doesn't get actually

00:02:17,599 --> 00:02:21,239
migrated and update you know all the

00:02:20,040 --> 00:02:23,340
other places and so they have to update

00:02:21,239 --> 00:02:26,549
things over here and all these different

00:02:23,340 --> 00:02:29,010
places and you know one answer to that

00:02:26,549 --> 00:02:30,870
and the one that we went with is that we

00:02:29,010 --> 00:02:33,900
chose to break all these things out into

00:02:30,870 --> 00:02:37,290
microservices and so that the apps could

00:02:33,900 --> 00:02:38,790
talk to each other and you know some of

00:02:37,290 --> 00:02:42,000
the functionality of course will remain

00:02:38,790 --> 00:02:43,860
in the specific app monolith and you

00:02:42,000 --> 00:02:47,489
just talk to an API that's there on the

00:02:43,860 --> 00:02:49,349
monolith itself but wherever it is it's

00:02:47,489 --> 00:02:50,730
we finally start you know each of these

00:02:49,349 --> 00:02:53,609
apps talking to each other which

00:02:50,730 --> 00:02:55,230
suddenly makes everything much more

00:02:53,609 --> 00:02:58,200
difficult when things something talks to

00:02:55,230 --> 00:03:00,750
this app and then these monolith micro

00:02:58,200 --> 00:03:02,849
services talk to that Microsoft are

00:03:00,750 --> 00:03:04,470
talking to this microcircuits and more

00:03:02,849 --> 00:03:09,540
and more things are talking to each

00:03:04,470 --> 00:03:11,730
other and everything is just getting

00:03:09,540 --> 00:03:13,440
really complicated we should realize

00:03:11,730 --> 00:03:15,870
that this monolith got completely

00:03:13,440 --> 00:03:19,079
replaced with you know it's a couple of

00:03:15,870 --> 00:03:21,030
microservices and that's the part you

00:03:19,079 --> 00:03:23,340
put in the report to your boss and say

00:03:21,030 --> 00:03:25,290
look look how much simpler we're making

00:03:23,340 --> 00:03:27,870
everything we're getting rid of services

00:03:25,290 --> 00:03:29,790
we're getting rid of stuff but of course

00:03:27,870 --> 00:03:31,650
then you don't mention that you know now

00:03:29,790 --> 00:03:33,959
you've got more micro services showing

00:03:31,650 --> 00:03:35,940
up doing more things and all of your

00:03:33,959 --> 00:03:40,260
monoliths are starting to talk to those

00:03:35,940 --> 00:03:43,530
and of course the micro services then

00:03:40,260 --> 00:03:46,560
talked to each other and there's just so

00:03:43,530 --> 00:03:48,989
much complexity at this point even the

00:03:46,560 --> 00:03:50,489
people who are managing this stuff don't

00:03:48,989 --> 00:03:52,680
know what depends on what and what

00:03:50,489 --> 00:03:55,440
things need this and what needs that and

00:03:52,680 --> 00:03:57,900
what Queenie's want and accesses who

00:03:55,440 --> 00:04:00,260
knows and this of course doesn't even

00:03:57,900 --> 00:04:02,370
get into talking to external API is that

00:04:00,260 --> 00:04:04,379
somebody that you're almost certainly

00:04:02,370 --> 00:04:07,859
talking to you and that require

00:04:04,379 --> 00:04:10,199
different access and of course all of

00:04:07,859 --> 00:04:12,299
these services and monoliths and

00:04:10,199 --> 00:04:13,790
everything are redundant and running in

00:04:12,299 --> 00:04:17,489
different data centers on different

00:04:13,790 --> 00:04:20,190
posts acts and all of this in different

00:04:17,489 --> 00:04:22,430
pieces that are deployed in different

00:04:20,190 --> 00:04:22,430
places

00:04:23,230 --> 00:04:27,970
folks want to know what they can how

00:04:26,110 --> 00:04:29,170
they can tighten up the firewall rule so

00:04:27,970 --> 00:04:30,520
they want to know what features you

00:04:29,170 --> 00:04:31,980
actually need and who you need to talk

00:04:30,520 --> 00:04:34,360
to you and then you hire somebody new

00:04:31,980 --> 00:04:37,810
and you try and explain to them how to

00:04:34,360 --> 00:04:42,700
troubleshoot something somebody asks

00:04:37,810 --> 00:04:44,620
everything okay well you know automated

00:04:42,700 --> 00:04:47,320
test to make sure that each piece of

00:04:44,620 --> 00:04:49,540
code is functional before you deploy it

00:04:47,320 --> 00:04:51,220
and integration testing you know make

00:04:49,540 --> 00:04:54,160
sure that the API is remain compatible

00:04:51,220 --> 00:04:56,860
so when you talk to each other so the

00:04:54,160 --> 00:04:59,680
different things talking to each other

00:04:56,860 --> 00:05:02,050
probably should work but if you have a

00:04:59,680 --> 00:05:03,880
failure in micro service it can lead to

00:05:02,050 --> 00:05:05,350
a cascade of failures across multiple at

00:05:03,880 --> 00:05:08,080
different micro services and monoliths

00:05:05,350 --> 00:05:10,330
everywhere so how do you know if the

00:05:08,080 --> 00:05:13,240
running systems are fine or okay and

00:05:10,330 --> 00:05:16,600
it's not how do you find out what

00:05:13,240 --> 00:05:19,960
actually is it has failed with what

00:05:16,600 --> 00:05:21,490
pieces failed well about this time I

00:05:19,960 --> 00:05:23,500
start Kelsey Hightower talking about

00:05:21,490 --> 00:05:25,990
kubernetes and Google's help the

00:05:23,500 --> 00:05:28,150
endpoint and I was like this is it this

00:05:25,990 --> 00:05:29,710
is the solution we need because we were

00:05:28,150 --> 00:05:31,500
looking at migrating some stuff to

00:05:29,710 --> 00:05:34,450
kubernetes at the time and whatnot and

00:05:31,500 --> 00:05:37,450
so I quickly went to the Sipan saw the

00:05:34,450 --> 00:05:40,420
modules and that was it that was not

00:05:37,450 --> 00:05:43,240
good god you were here oh wait that's

00:05:40,420 --> 00:05:45,040
not it there wasn't anything on the

00:05:43,240 --> 00:05:47,080
c-fam I was like wait what how can that

00:05:45,040 --> 00:05:50,320
be how can i seep in I'll have a

00:05:47,080 --> 00:05:52,750
framework for doing this it's not a

00:05:50,320 --> 00:05:56,680
problem with unique to us at Grant

00:05:52,750 --> 00:05:58,300
Street so it's like okay what are other

00:05:56,680 --> 00:05:59,530
people outside of the protein and you're

00:05:58,300 --> 00:06:02,590
doing somebody there must be doing

00:05:59,530 --> 00:06:04,480
something good and the Financial Times

00:06:02,590 --> 00:06:06,340
has a pretty good write-up about what

00:06:04,480 --> 00:06:08,470
they did and the standard that they use

00:06:06,340 --> 00:06:12,070
for their apps to communicate so it had

00:06:08,470 --> 00:06:16,560
some really good idea but strangely that

00:06:12,070 --> 00:06:16,560
was really the only thing I saw that

00:06:17,190 --> 00:06:21,270
people were using to talk between or to

00:06:19,680 --> 00:06:25,650
monitor their different applications

00:06:21,270 --> 00:06:27,510
like this and to do that monitoring from

00:06:25,650 --> 00:06:32,720
the inside and seeing you know what what

00:06:27,510 --> 00:06:35,520
the app is doing from the inside so I

00:06:32,720 --> 00:06:39,860
saw a recent blog post the other day

00:06:35,520 --> 00:06:42,330
about from pearl beam talking about

00:06:39,860 --> 00:06:44,610
Stack Overflow stuff but he was

00:06:42,330 --> 00:06:48,020
mentioning that pearl doesn't have

00:06:44,610 --> 00:06:50,490
something for real good observability of

00:06:48,020 --> 00:06:54,360
what the app is doing and whether it's

00:06:50,490 --> 00:06:56,250
okay or not and I know that that's

00:06:54,360 --> 00:07:00,480
something we're missing but I don't

00:06:56,250 --> 00:07:01,830
think it's that we don't just have it I

00:07:00,480 --> 00:07:05,400
couldn't find anything from other

00:07:01,830 --> 00:07:08,820
anybody else either so this led to lots

00:07:05,400 --> 00:07:11,460
of thinking about what a good solution

00:07:08,820 --> 00:07:14,400
might look like you know something that

00:07:11,460 --> 00:07:16,530
would work for all of our services most

00:07:14,400 --> 00:07:19,530
of ours are pearl but not all of them

00:07:16,530 --> 00:07:22,260
and what would make it easy to monitor

00:07:19,530 --> 00:07:25,680
the new things that we build but that

00:07:22,260 --> 00:07:28,590
was flexible enough not just to be a

00:07:25,680 --> 00:07:34,260
yes/no but that would also tell us what

00:07:28,590 --> 00:07:35,970
was wrong when something was wrong this

00:07:34,260 --> 00:07:38,730
led to writing up a health check

00:07:35,970 --> 00:07:41,700
standard its public on our github that

00:07:38,730 --> 00:07:45,450
IO site and it's pretty simple and kind

00:07:41,700 --> 00:07:49,110
of based on the Financial Times version

00:07:45,450 --> 00:07:50,940
but it's a little bit more flexible and

00:07:49,110 --> 00:07:54,870
hopefully can be extended to do a little

00:07:50,940 --> 00:07:58,140
more than that and there's more examples

00:07:54,870 --> 00:08:00,750
of that this in the standard but here in

00:07:58,140 --> 00:08:03,990
all this mess the only required field is

00:08:00,750 --> 00:08:05,940
the status the second line there which

00:08:03,990 --> 00:08:08,820
follows the Nagios convention of okay

00:08:05,940 --> 00:08:10,140
warning critical and unknown and of

00:08:08,820 --> 00:08:12,030
course that's not actually a hard

00:08:10,140 --> 00:08:14,240
requirement because if you don't provide

00:08:12,030 --> 00:08:20,160
it or if it doesn't match one of those

00:08:14,240 --> 00:08:22,860
we can treat it as unknown here the ID

00:08:20,160 --> 00:08:24,540
chaunt field is highly recommended

00:08:22,860 --> 00:08:26,940
because it's used internally to uniquely

00:08:24,540 --> 00:08:29,010
identify things and probably be making

00:08:26,940 --> 00:08:30,569
it externally more visible and returning

00:08:29,010 --> 00:08:33,959
the result

00:08:30,569 --> 00:08:37,009
by default the generated one if as I

00:08:33,959 --> 00:08:37,009
need to use it for some stuff

00:08:39,589 --> 00:08:47,699
so this defaults to the index into the

00:08:46,050 --> 00:08:49,649
list so if you look at the very bottom

00:08:47,699 --> 00:08:55,259
result there that says it failed to do

00:08:49,649 --> 00:08:58,319
the right thing then the R is that

00:08:55,259 --> 00:09:01,259
actual pole ID is my underscore app -

00:08:58,319 --> 00:09:03,959
simple or aggregate underscore check -

00:09:01,259 --> 00:09:10,069
one because that one doesn't happen to

00:09:03,959 --> 00:09:13,740
be so in this the label there is the

00:09:10,069 --> 00:09:17,069
human readable version of that ID in the

00:09:13,740 --> 00:09:25,410
info field is the human readable version

00:09:17,069 --> 00:09:27,569
of the status the reason why it is the

00:09:25,410 --> 00:09:32,970
timestamp we haven't been using too much

00:09:27,569 --> 00:09:34,920
but it's the when the check was

00:09:32,970 --> 00:09:36,810
generated which is usually right now so

00:09:34,920 --> 00:09:41,459
we usually just assume it's right now

00:09:36,810 --> 00:09:44,279
and don't actually put it in but here's

00:09:41,459 --> 00:09:47,130
the piece that's really the thing that

00:09:44,279 --> 00:09:50,699
the Financial Times one was missing is

00:09:47,130 --> 00:09:57,170
that the results are a list of

00:09:50,699 --> 00:09:57,170
additional results so it's completely

00:09:58,130 --> 00:10:06,839
you can continue to you add additional

00:10:02,819 --> 00:10:09,899
details as far down as you want and then

00:10:06,839 --> 00:10:12,980
of course tags at the end are ways of

00:10:09,899 --> 00:10:15,480
grouping things together and generally

00:10:12,980 --> 00:10:17,279
I'll show you how they work a little how

00:10:15,480 --> 00:10:20,250
we've been using a little later and

00:10:17,279 --> 00:10:21,779
generally we use the same results on the

00:10:20,250 --> 00:10:23,610
check side is on the result side but

00:10:21,779 --> 00:10:24,779
that's not actually necessary and so

00:10:23,610 --> 00:10:27,839
maybe there's a reason to do it

00:10:24,779 --> 00:10:30,089
difference there's of course turned into

00:10:27,839 --> 00:10:32,699
a Perl module so that we could do stuff

00:10:30,089 --> 00:10:37,279
and that lets you register diagnostics

00:10:32,699 --> 00:10:37,279
and run the checks and return the result

00:10:39,160 --> 00:10:41,279
and

00:10:43,390 --> 00:10:48,070
simple pure pearl module currently I

00:10:46,090 --> 00:10:50,410
think with no core no non core

00:10:48,070 --> 00:10:53,350
dependencies trying some people and try

00:10:50,410 --> 00:10:57,070
to talk me into log any for it but we'll

00:10:53,350 --> 00:10:58,990
see how that goes and I started adding

00:10:57,070 --> 00:11:01,600
it to a few apps to see how that would

00:10:58,990 --> 00:11:04,150
go and I know that you're thinking

00:11:01,600 --> 00:11:06,130
you're probably thinking this sounds

00:11:04,150 --> 00:11:08,250
really complicated if you want to

00:11:06,130 --> 00:11:11,770
actually get anything useful out of it

00:11:08,250 --> 00:11:15,490
but fortunately that complicated stuff

00:11:11,770 --> 00:11:17,260
is tying those results to the things in

00:11:15,490 --> 00:11:21,460
your application that you're the expert

00:11:17,260 --> 00:11:24,580
on I mean this is a perfectly valid

00:11:21,460 --> 00:11:25,780
diagnostic it isn't really useful for

00:11:24,580 --> 00:11:27,940
anything but being readable from the

00:11:25,780 --> 00:11:31,630
back of the room which is not especially

00:11:27,940 --> 00:11:34,660
useful for an online conference but any

00:11:31,630 --> 00:11:37,290
additions to that choosing what that

00:11:34,660 --> 00:11:40,650
status should be

00:11:37,290 --> 00:11:42,930
are based on your apps cook code and

00:11:40,650 --> 00:11:46,890
what your app no it does and what you're

00:11:42,930 --> 00:11:49,800
an expert in so here's an example of

00:11:46,890 --> 00:11:53,250
using that health check where you

00:11:49,800 --> 00:11:55,440
instantiate a new checker and the health

00:11:53,250 --> 00:11:59,250
checker is really just grouped the

00:11:55,440 --> 00:12:01,130
Diagnostics together and you can

00:11:59,250 --> 00:12:03,240
register them either when it starts

00:12:01,130 --> 00:12:05,190
where you'll see that there's mostly

00:12:03,240 --> 00:12:09,810
that very simple one with just an idea

00:12:05,190 --> 00:12:12,480
to add it to it and or you can register

00:12:09,810 --> 00:12:17,750
them after the fact as a whole module

00:12:12,480 --> 00:12:20,160
that does the diagnostic interface and

00:12:17,750 --> 00:12:23,310
it turns out that the main health check

00:12:20,160 --> 00:12:26,550
itself is actually supports the

00:12:23,310 --> 00:12:29,220
diagnostic interface API and so you can

00:12:26,550 --> 00:12:31,440
register a diagnostic with itself which

00:12:29,220 --> 00:12:33,690
allows you to do sub groupings of

00:12:31,440 --> 00:12:36,060
different checks to group them together

00:12:33,690 --> 00:12:39,360
so it makes looking at them in reading

00:12:36,060 --> 00:12:41,640
the mobile user doesn't have any loop

00:12:39,360 --> 00:12:43,350
protection currently so if you register

00:12:41,640 --> 00:12:46,410
it with itself it's going to get into an

00:12:43,350 --> 00:12:48,540
infinite loop and just keep going not

00:12:46,410 --> 00:12:51,630
give you any results so I wouldn't

00:12:48,540 --> 00:12:55,710
recommend it anyway this is where tags

00:12:51,630 --> 00:12:58,710
really shine because you can choose to

00:12:55,710 --> 00:13:02,810
only run a specific subset of tasks so

00:12:58,710 --> 00:13:02,810
that you want to subset of Diagnostics

00:13:04,490 --> 00:13:11,060
and so for example if you have a if your

00:13:09,560 --> 00:13:14,300
service provides a really important

00:13:11,060 --> 00:13:19,730
feature and it doesn't rely on like a

00:13:14,300 --> 00:13:21,680
lot of them more many relies on fewer of

00:13:19,730 --> 00:13:24,290
the things that your entire application

00:13:21,680 --> 00:13:26,930
relies on but that particular thing at

00:13:24,290 --> 00:13:34,330
work maybe you have some checks that

00:13:26,930 --> 00:13:34,330
specifically linked or specifically

00:13:35,050 --> 00:13:38,450
check that

00:13:36,830 --> 00:13:42,250
one service is going to be working and

00:13:38,450 --> 00:13:44,960
it wakes people up if that one fails

00:13:42,250 --> 00:13:47,450
so in order to make it easier to share

00:13:44,960 --> 00:13:48,920
that simple subroutine the health check

00:13:47,450 --> 00:13:52,130
module comes with its parent class

00:13:48,920 --> 00:13:54,050
health check diagnostic and this

00:13:52,130 --> 00:13:55,790
provides some niceties like wrapping the

00:13:54,050 --> 00:13:57,650
check that you write in an exception

00:13:55,790 --> 00:14:00,410
handler so that you can provide I can

00:13:57,650 --> 00:14:03,080
write a critical response and some info

00:14:00,410 --> 00:14:04,640
about the exception right there in the

00:14:03,080 --> 00:14:06,620
results that you're already monitoring

00:14:04,640 --> 00:14:09,920
rather than relying on exception

00:14:06,620 --> 00:14:11,510
handling to maybe do that for you plus

00:14:09,920 --> 00:14:14,720
it doesn't validation and summarization

00:14:11,510 --> 00:14:16,190
of that result that it caught although

00:14:14,720 --> 00:14:18,530
most of the validations are only

00:14:16,190 --> 00:14:20,180
warnings because like I said lots of

00:14:18,530 --> 00:14:24,740
things are pretty flexible in what they

00:14:20,180 --> 00:14:28,930
are allowed to return so you need to

00:14:24,740 --> 00:14:28,930
just watch your logs and stuff for those

00:14:29,410 --> 00:14:37,220
so here's an example of pretty much that

00:14:32,890 --> 00:14:41,560
simplest callback just wrapped in the

00:14:37,220 --> 00:14:44,690
health check diagnostic parent module

00:14:41,560 --> 00:14:47,750
and you can see how simple it is because

00:14:44,690 --> 00:14:50,170
I can make this font pretty big and

00:14:47,750 --> 00:14:52,940
include the true value at the end even

00:14:50,170 --> 00:14:55,030
so we've talked about some other helpers

00:14:52,940 --> 00:14:57,260
and stuff that might get added to this

00:14:55,030 --> 00:15:01,070
but it turns out that it's really

00:14:57,260 --> 00:15:02,870
functional enough the way it is and we

00:15:01,070 --> 00:15:05,360
don't and nothing else has it's been

00:15:02,870 --> 00:15:15,710
necessary just a few things that might

00:15:05,360 --> 00:15:18,800
be nice so let's go try out real quick

00:15:15,710 --> 00:15:23,020
live demo if we can because that's super

00:15:18,800 --> 00:15:26,750
fun so hopefully you're now seeing the

00:15:23,020 --> 00:15:29,840
sample super simple plaque app I've got

00:15:26,750 --> 00:15:32,440
going on here and it doesn't do anything

00:15:29,840 --> 00:15:36,290
except say hello world which is great

00:15:32,440 --> 00:15:40,190
and you can try browsing over here to

00:15:36,290 --> 00:15:41,480
the health of the endpoint and yeah it

00:15:40,190 --> 00:15:42,980
doesn't actually do anything because

00:15:41,480 --> 00:15:57,200
there isn't one so let's see if we can

00:15:42,980 --> 00:15:59,420
add a health check to that okay oh can

00:15:57,200 --> 00:16:01,070
we add a health check and it's that's

00:15:59,420 --> 00:16:03,350
super simple one that I showed before

00:16:01,070 --> 00:16:04,670
pretty much and of course it still

00:16:03,350 --> 00:16:08,150
doesn't do anything because we haven't

00:16:04,670 --> 00:16:11,060
tied it into our pocket application here

00:16:08,150 --> 00:16:16,850
so let's go over here and tie it to the

00:16:11,060 --> 00:16:19,460
plaque application and that's just

00:16:16,850 --> 00:16:22,160
enabling the middleware that's available

00:16:19,460 --> 00:16:25,370
and telling it to use the health check

00:16:22,160 --> 00:16:29,690
that we've been Sanchi eight adhere not

00:16:25,370 --> 00:16:41,750
only reload we get some JSON output for

00:16:29,690 --> 00:16:45,560
that result and of course we probably

00:16:41,750 --> 00:16:51,220
want a little more useful Diagnostics

00:16:45,560 --> 00:16:53,990
than that so let's create our own useful

00:16:51,220 --> 00:16:59,300
terribly unuseful diagnostic that really

00:16:53,990 --> 00:17:03,560
just makes a random status to give us

00:16:59,300 --> 00:17:05,510
and here we register it as a class

00:17:03,560 --> 00:17:07,790
method just as the class the nice thing

00:17:05,510 --> 00:17:10,070
about registering it as a class here is

00:17:07,790 --> 00:17:13,940
that there's no there's just strings

00:17:10,070 --> 00:17:17,420
being involved so you can register that

00:17:13,940 --> 00:17:19,240
it that way in like a yeah mol config

00:17:17,420 --> 00:17:21,770
file or something and so have your

00:17:19,240 --> 00:17:23,690
health checks to find in config file

00:17:21,770 --> 00:17:27,250
somewhere rather than having to do it in

00:17:23,690 --> 00:17:30,260
your code and just loading that yeah moe

00:17:27,250 --> 00:17:31,580
anyway so here now we see our nice

00:17:30,260 --> 00:17:34,460
random result but that's not actually

00:17:31,580 --> 00:17:36,950
very nice to look at so let's tell it

00:17:34,460 --> 00:17:39,260
that we want it to be pretty and get

00:17:36,950 --> 00:17:42,110
some actually useful JSON output that we

00:17:39,260 --> 00:17:45,880
can more easily read and see how it is

00:17:42,110 --> 00:17:51,520
so now we can see that we're getting our

00:17:45,880 --> 00:17:55,040
random results and the main status

00:17:51,520 --> 00:17:57,140
defaults here sort of the worst case or

00:17:55,040 --> 00:18:04,270
the worst status of all of the subjects

00:17:57,140 --> 00:18:07,900
that it see so you can also add you know

00:18:04,270 --> 00:18:12,490
instance version of that same check and

00:18:07,900 --> 00:18:15,830
that also gives us different random

00:18:12,490 --> 00:18:18,190
results and here's where we can try out

00:18:15,830 --> 00:18:19,430
some tags because now we can say tags

00:18:18,190 --> 00:18:21,680
equals

00:18:19,430 --> 00:18:23,900
random and then we just get back that

00:18:21,680 --> 00:18:28,280
one random check that we were getting

00:18:23,900 --> 00:18:32,510
we're looking at before but we can also

00:18:28,280 --> 00:18:35,800
say tags are not random and that will

00:18:32,510 --> 00:18:38,180
give us everything but that all the

00:18:35,800 --> 00:18:40,700
checks that are the Diagnostics that are

00:18:38,180 --> 00:18:44,930
not random which is you know pretty

00:18:40,700 --> 00:18:47,810
useful and you can combine multiple tags

00:18:44,930 --> 00:18:50,360
both positive and negative to get kind

00:18:47,810 --> 00:18:52,400
of usually get exactly those subsets

00:18:50,360 --> 00:18:55,190
that you want let's get rid of that

00:18:52,400 --> 00:18:57,020
extra random one and keep this tag in

00:18:55,190 --> 00:18:59,960
here so we can go back to this more

00:18:57,020 --> 00:19:04,640
reliable or solved here let's see what

00:18:59,960 --> 00:19:06,740
else we can add that's add in a file

00:19:04,640 --> 00:19:11,660
permission check so here we've got our

00:19:06,740 --> 00:19:13,190
app that psg i and that's the web app

00:19:11,660 --> 00:19:14,720
here this very simple web app that we're

00:19:13,190 --> 00:19:16,460
running and we don't want and we want to

00:19:14,720 --> 00:19:18,470
be able to have the web service read and

00:19:16,460 --> 00:19:19,790
execute it but we don't want the web

00:19:18,470 --> 00:19:22,520
service to be able to write to it

00:19:19,790 --> 00:19:25,310
because what we don't want just any

00:19:22,520 --> 00:19:28,910
random bug in our code to be have let

00:19:25,310 --> 00:19:30,670
people rewrite our app so let's see what

00:19:28,910 --> 00:19:34,490
happens here

00:19:30,670 --> 00:19:38,830
and all right I guess I'm running the

00:19:34,490 --> 00:19:41,720
web servers myself so I really do need a

00:19:38,830 --> 00:19:46,790
just mark that as it did you to make

00:19:41,720 --> 00:19:54,920
that not writable so now now we've got

00:19:46,790 --> 00:19:57,410
the correct permissions so next up what

00:19:54,920 --> 00:20:00,320
what can we add here let's add in

00:19:57,410 --> 00:20:02,030
database connection because that was the

00:20:00,320 --> 00:20:04,340
other thing that our app was using

00:20:02,030 --> 00:20:05,900
there's database connection and here

00:20:04,340 --> 00:20:07,100
we're just using sequel Lite but really

00:20:05,900 --> 00:20:10,460
it's just any sort of callback that

00:20:07,100 --> 00:20:13,790
returns in DB I handle and as long as

00:20:10,460 --> 00:20:17,980
your database handle contain we can get

00:20:13,790 --> 00:20:17,980
a successful pimp result from it

00:20:19,000 --> 00:20:30,559
and so then maybe we want to check the

00:20:25,669 --> 00:20:31,880
permissions on the database file and

00:20:30,559 --> 00:20:33,260
really you can check different

00:20:31,880 --> 00:20:34,640
permissions and everything here we can

00:20:33,260 --> 00:20:39,580
say that we want to read right but not

00:20:34,640 --> 00:20:41,750
execute fine I got all sorts of other

00:20:39,580 --> 00:20:46,130
permissions that you can choose it can

00:20:41,750 --> 00:20:47,990
check for ownership and actual file

00:20:46,130 --> 00:20:50,960
permissions and stuff I don't think it

00:20:47,990 --> 00:20:57,140
currently does ACLs but maybe we can do

00:20:50,960 --> 00:21:02,210
that and of course if you want to do

00:20:57,140 --> 00:21:04,760
more than just ping the database we

00:21:02,210 --> 00:21:07,070
actually can have a check that can check

00:21:04,760 --> 00:21:08,540
whether you can you have read access to

00:21:07,070 --> 00:21:10,790
it or write access to it

00:21:08,540 --> 00:21:13,780
not 100% sure how that actually works

00:21:10,790 --> 00:21:16,059
but because I didn't write that one but

00:21:13,780 --> 00:21:17,900
supposedly it checks what you're

00:21:16,059 --> 00:21:26,900
connected and what you're connected to

00:21:17,900 --> 00:21:29,770
and whether you can do stuff so last

00:21:26,900 --> 00:21:33,710
thing on the demo is something just fun

00:21:29,770 --> 00:21:36,950
we're gonna change the name of the house

00:21:33,710 --> 00:21:39,049
that we use to be a handy-dandy Unicode

00:21:36,950 --> 00:21:40,910
thing and as we say see here we change

00:21:39,049 --> 00:21:42,440
the path that it's looking on and now we

00:21:40,910 --> 00:21:45,440
get back to the hello world because it's

00:21:42,440 --> 00:21:46,760
no longer the Health endpoint and now I

00:21:45,440 --> 00:21:48,740
can copy that

00:21:46,760 --> 00:21:52,340
because it's Unicode and I don't know

00:21:48,740 --> 00:21:56,020
how to type that prescription doohickey

00:21:52,340 --> 00:21:56,020
but we can access the

00:21:58,400 --> 00:22:02,480
end point from there you can actually

00:22:00,350 --> 00:22:04,520
have multiple health check endpoints and

00:22:02,480 --> 00:22:06,290
if you want for something if you're like

00:22:04,520 --> 00:22:08,960
migrating from one to another

00:22:06,290 --> 00:22:13,000
you can enable both of them and who

00:22:08,960 --> 00:22:16,100
knows whatever so that was a super fun

00:22:13,000 --> 00:22:18,200
yeah and you've got all of these

00:22:16,100 --> 00:22:22,550
different checks and I can use tags to

00:22:18,200 --> 00:22:28,490
sort them out and add them in enough no

00:22:22,550 --> 00:22:31,220
actually pretty simple so what good is

00:22:28,490 --> 00:22:33,470
this to you well anyone wanted to open

00:22:31,220 --> 00:22:35,680
source this pretty much once I figured

00:22:33,470 --> 00:22:38,330
out there wasn't anything on the sea pan

00:22:35,680 --> 00:22:39,800
and it was one of the driving factors to

00:22:38,330 --> 00:22:42,650
trying all the work that went into the

00:22:39,800 --> 00:22:46,130
shot my conference talk at the pro

00:22:42,650 --> 00:22:48,230
conference last year this was kind of

00:22:46,130 --> 00:22:50,510
you know being built at that time that I

00:22:48,230 --> 00:22:52,580
knew I wanted to come out so all this

00:22:50,510 --> 00:22:54,950
stuff including a handful of Diagnostics

00:22:52,580 --> 00:22:58,850
for that DBH ping DBA check and stuff

00:22:54,950 --> 00:23:00,410
but also for a Redis check and one that

00:22:58,850 --> 00:23:02,360
will make a ret web request and make

00:23:00,410 --> 00:23:04,400
sure it comes back as whatever status

00:23:02,360 --> 00:23:07,610
you want and maybe has whatever content

00:23:04,400 --> 00:23:10,760
you want on it and quite as several

00:23:07,610 --> 00:23:12,920
other things are available on the Metis

00:23:10,760 --> 00:23:16,880
if an just search for the health check

00:23:12,920 --> 00:23:20,710
diagnostic and they should all come up

00:23:16,880 --> 00:23:22,400
hopefully but in addition to all of the

00:23:20,710 --> 00:23:25,270
documentation that's in that main

00:23:22,400 --> 00:23:27,920
diagnostic module for writing your own

00:23:25,270 --> 00:23:30,080
that it does include a getting started

00:23:27,920 --> 00:23:32,210
guide for writing your own Diagnostics

00:23:30,080 --> 00:23:37,030
and kind of best practices that we've

00:23:32,210 --> 00:23:39,470
come up with and if anything is unclear

00:23:37,030 --> 00:23:41,780
bugs and limitations and the docs are

00:23:39,470 --> 00:23:50,900
great things to file issues or PRS on

00:23:41,780 --> 00:23:52,910
github for so now when good was all this

00:23:50,900 --> 00:23:55,040
was all this thinking and spec writing

00:23:52,910 --> 00:23:57,530
and making code that did but I want

00:23:55,040 --> 00:23:59,750
worth it so far yeah really it's been

00:23:57,530 --> 00:24:01,730
really really nice

00:23:59,750 --> 00:24:03,260
we've got default health checks that

00:24:01,730 --> 00:24:04,700
along with some of the stuff I talked

00:24:03,260 --> 00:24:07,850
about last year are part of the

00:24:04,700 --> 00:24:10,220
boilerplate that we have for our new

00:24:07,850 --> 00:24:11,760
apps so when you spin up a new app it

00:24:10,220 --> 00:24:16,110
has a whole bunch of things

00:24:11,760 --> 00:24:18,150
automatically built-in and some of the

00:24:16,110 --> 00:24:20,730
key benefits I talked to mark fixing

00:24:18,150 --> 00:24:22,770
sure about mark keeps all of our

00:24:20,730 --> 00:24:24,780
automation stuff working and he just did

00:24:22,770 --> 00:24:27,300
the person when something's broken you

00:24:24,780 --> 00:24:29,550
say what to help me fix it so he was

00:24:27,300 --> 00:24:34,880
really helpful in telling me what

00:24:29,550 --> 00:24:37,740
exactly are we using these for and so

00:24:34,880 --> 00:24:39,990
one of the things that we do that with

00:24:37,740 --> 00:24:45,290
what we do is we know almost immediately

00:24:39,990 --> 00:24:48,180
whether maintenance broke something and

00:24:45,290 --> 00:24:51,510
because we have this tied into Nagios

00:24:48,180 --> 00:24:54,890
checks but really you can make anything

00:24:51,510 --> 00:24:54,890
because it's just returning JSON

00:24:55,270 --> 00:24:59,620
but we have Mountain Aria checks that

00:24:56,980 --> 00:25:02,440
are now significantly more reliable than

00:24:59,620 --> 00:25:04,690
the checks that we had before because

00:25:02,440 --> 00:25:06,910
they're actually asking the running app

00:25:04,690 --> 00:25:09,280
itself what it thinks the status is

00:25:06,910 --> 00:25:12,190
rather than maybe spinning up a process

00:25:09,280 --> 00:25:15,400
you know next to the app in the same on

00:25:12,190 --> 00:25:16,030
the same machine and trying to make that

00:25:15,400 --> 00:25:17,980
connection

00:25:16,030 --> 00:25:21,730
it actually looks come inside the app to

00:25:17,980 --> 00:25:23,650
make sure stuff is working we also use

00:25:21,730 --> 00:25:27,520
it as a part of our post deployment

00:25:23,650 --> 00:25:31,330
checks so that it makes sure that when

00:25:27,520 --> 00:25:33,700
the stuff comes up it brings in the or

00:25:31,330 --> 00:25:37,450
it makes sure that all the TEL checks

00:25:33,700 --> 00:25:43,240
pass before it connects in the new code

00:25:37,450 --> 00:25:47,370
and brings down the old code and since

00:25:43,240 --> 00:25:47,370
it's so easy and used for so many things

00:25:49,140 --> 00:25:53,920
we have lots and lots of more tiny

00:25:52,300 --> 00:25:57,100
little diagnostics that get added to

00:25:53,920 --> 00:25:58,540
this that wouldn't be if it were justin

00:25:57,100 --> 00:26:02,470
Nagios somewhere and that was the only

00:25:58,540 --> 00:26:05,830
thing using it but because we can go

00:26:02,470 --> 00:26:07,720
look at it manually or have a check to

00:26:05,830 --> 00:26:11,200
have some tool that goes and looks

00:26:07,720 --> 00:26:14,680
directly in it or directly a specific

00:26:11,200 --> 00:26:19,180
tag for something we use quite a few

00:26:14,680 --> 00:26:20,800
different Diagnostics in it and lots of

00:26:19,180 --> 00:26:23,140
those are just there like I said when

00:26:20,800 --> 00:26:25,990
you spin up a new app or if you add a

00:26:23,140 --> 00:26:28,120
new connection to a connection to a new

00:26:25,990 --> 00:26:31,480
service that we're using already we

00:26:28,120 --> 00:26:34,210
found we got a diagnostic built already

00:26:31,480 --> 00:26:36,340
for our own set for whatever that

00:26:34,210 --> 00:26:39,970
service is so that you just add those

00:26:36,340 --> 00:26:44,470
that both new service module and the

00:26:39,970 --> 00:26:47,740
diagnostic module and then easily get

00:26:44,470 --> 00:26:50,740
not only access to that service but

00:26:47,740 --> 00:26:53,380
monitoring that it's working now all the

00:26:50,740 --> 00:26:56,170
work to get it open sourced that works

00:26:53,380 --> 00:26:57,940
it well we'll find out if I get to use a

00:26:56,170 --> 00:27:03,200
diagnostic that somebody other than she

00:26:57,940 --> 00:27:04,670
is she puts on the CPM so like I

00:27:03,200 --> 00:27:07,010
the main one of the main benefits is

00:27:04,670 --> 00:27:09,980
that as we are now moving a lot of stuff

00:27:07,010 --> 00:27:12,980
to kubernetes we're able to use the

00:27:09,980 --> 00:27:20,120
health check as aliveness or readiness

00:27:12,980 --> 00:27:21,710
probe and that means that we only have

00:27:20,120 --> 00:27:22,970
to implement that one can get lots of

00:27:21,710 --> 00:27:24,680
benefit out of it

00:27:22,970 --> 00:27:27,440
but more than just that kubernetes

00:27:24,680 --> 00:27:29,600
basics of yet rich wanting a 503 status

00:27:27,440 --> 00:27:32,990
if there's a fizz not working and a 200

00:27:29,600 --> 00:27:34,910
if it's ok we also get that json encoded

00:27:32,990 --> 00:27:37,880
result back on the checks that were run

00:27:34,910 --> 00:27:40,460
and we do that in that faq middle

00:27:37,880 --> 00:27:42,440
whether that's on a sea pan and it

00:27:40,460 --> 00:27:44,270
passes along any tags like i said so you

00:27:42,440 --> 00:27:46,790
can choose exactly what checks to run

00:27:44,270 --> 00:27:49,090
and along with that pretty parameter it

00:27:46,790 --> 00:27:50,860
makes it human readable

00:27:49,090 --> 00:27:53,110
and that means that all of our Web

00:27:50,860 --> 00:27:55,360
Services no matter whether they're in

00:27:53,110 --> 00:27:57,190
parole or not have a dedicated URL that

00:27:55,360 --> 00:28:01,180
you can go visit and see whether it's

00:27:57,190 --> 00:28:03,010
working and it's not what's broken so if

00:28:01,180 --> 00:28:04,360
I'm sailing in and helping support an

00:28:03,010 --> 00:28:07,300
app that you know I'm not super

00:28:04,360 --> 00:28:10,330
comfortable with I can quickly go and

00:28:07,300 --> 00:28:16,690
see if something failed and what it was

00:28:10,330 --> 00:28:19,000
and be able to hopefully at least make

00:28:16,690 --> 00:28:26,560
faster progress on it and ask the right

00:28:19,000 --> 00:28:27,160
people questions what I did lie a little

00:28:26,560 --> 00:28:28,720
bit there

00:28:27,160 --> 00:28:31,510
we don't we actually subclass that

00:28:28,720 --> 00:28:33,460
middleware that's on the CPM and it adds

00:28:31,510 --> 00:28:35,800
another endpoint that uses a hard-coded

00:28:33,460 --> 00:28:37,180
tags run a subset of checks and it

00:28:35,800 --> 00:28:40,150
doesn't actually return a full result

00:28:37,180 --> 00:28:43,590
just okay or I don't remember what the

00:28:40,150 --> 00:28:47,340
other result is but it's not okay and

00:28:43,590 --> 00:28:54,280
because it runs this really small subset

00:28:47,340 --> 00:28:56,350
we can run it really frequently and it's

00:28:54,280 --> 00:28:58,360
just a you know the really important

00:28:56,350 --> 00:29:00,720
thing that means our app at least will

00:28:58,360 --> 00:29:03,730
show something to the user or to the

00:29:00,720 --> 00:29:05,880
person who's browsing the site whether

00:29:03,730 --> 00:29:08,260
or not everything is functional and that

00:29:05,880 --> 00:29:13,000
lets us poll it much more frequently and

00:29:08,260 --> 00:29:18,040
be much more responsive and this check

00:29:13,000 --> 00:29:20,620
used to be to do just very really super

00:29:18,040 --> 00:29:23,350
basic things but the flexibility of

00:29:20,620 --> 00:29:25,090
powering that via this health check that

00:29:23,350 --> 00:29:27,130
means we can add additional really

00:29:25,090 --> 00:29:29,710
important things to that check as we

00:29:27,130 --> 00:29:33,730
need them and find out things that are

00:29:29,710 --> 00:29:41,170
fast to check but there's less tech

00:29:33,730 --> 00:29:42,460
reliability along and I mostly here

00:29:41,170 --> 00:29:46,780
focused on showing off that web

00:29:42,460 --> 00:29:47,950
interface or the JSON interface but

00:29:46,780 --> 00:29:49,300
there's nothing in the spec that says

00:29:47,950 --> 00:29:51,100
that's the way that you have to use it

00:29:49,300 --> 00:29:54,220
you could easily have a command line

00:29:51,100 --> 00:29:59,250
tool that dumps out the result or maybe

00:29:54,220 --> 00:30:01,070
you exec it from inside a container and

00:29:59,250 --> 00:30:03,169
maybe that or maybe

00:30:01,070 --> 00:30:05,330
you have a result that you send via a

00:30:03,169 --> 00:30:07,149
message queue of some sort on a schedule

00:30:05,330 --> 00:30:09,799
and then something collects those and

00:30:07,149 --> 00:30:12,889
alerts if it doesn't get them or they

00:30:09,799 --> 00:30:14,480
are bad or something like that so the

00:30:12,889 --> 00:30:16,220
idea is that it's just super flexible

00:30:14,480 --> 00:30:19,429
and hopefully you can do a lot with it

00:30:16,220 --> 00:30:21,740
and it'll fit into your apps and the way

00:30:19,429 --> 00:30:26,210
you monitor things even if that's not

00:30:21,740 --> 00:30:29,419
the way we do it so we do have a team

00:30:26,210 --> 00:30:31,610
that used to have a go implementation I

00:30:29,419 --> 00:30:33,470
don't know much about that because I

00:30:31,610 --> 00:30:35,419
haven't really done anything with it but

00:30:33,470 --> 00:30:40,460
it returns the health check result on

00:30:35,419 --> 00:30:46,250
that standard you are a URL that I can

00:30:40,460 --> 00:30:48,769
go check if I need to there's I believe

00:30:46,250 --> 00:30:52,159
that we wrapped something around some of

00:30:48,769 --> 00:30:55,279
our Java apps that returns a health

00:30:52,159 --> 00:30:59,330
check I'm not sure how they did that but

00:30:55,279 --> 00:31:03,379
it still doesn't quite introspect into

00:30:59,330 --> 00:31:06,470
the Java thing because it's like I don't

00:31:03,379 --> 00:31:07,700
remember Jenkins and stuff that we're

00:31:06,470 --> 00:31:10,759
just apps that we're running but it's

00:31:07,700 --> 00:31:14,059
wrapped around it and provides that same

00:31:10,759 --> 00:31:17,480
information but here are monitoring

00:31:14,059 --> 00:31:19,580
tools and the people that are doing the

00:31:17,480 --> 00:31:21,049
monitoring don't have to know whether

00:31:19,580 --> 00:31:24,529
it's an app that's written in perl or

00:31:21,049 --> 00:31:28,730
not but they can just go to this place

00:31:24,529 --> 00:31:29,929
and see whether it's working we've got

00:31:28,730 --> 00:31:31,850
another team that's doing a bunch of

00:31:29,929 --> 00:31:33,799
stuff and look delicious and they're

00:31:31,850 --> 00:31:35,120
working thinking of replacing the plaque

00:31:33,799 --> 00:31:38,120
middleware with the Mojo delicious

00:31:35,120 --> 00:31:39,710
plugin because it's going to make mojo

00:31:38,120 --> 00:31:43,789
better to not use plaque and use

00:31:39,710 --> 00:31:47,090
something else I'm not sure but lots of

00:31:43,789 --> 00:31:50,029
different options available because it

00:31:47,090 --> 00:31:54,289
is wrapped around this kind of standard

00:31:50,029 --> 00:31:56,210
API and hopefully now you're all waiting

00:31:54,289 --> 00:31:59,000
to tell me that's amazing

00:31:56,210 --> 00:32:01,669
I've already installed it it's in my app

00:31:59,000 --> 00:32:05,090
already I've got I'm looking at the

00:32:01,669 --> 00:32:07,580
health of my app on a over the VPN and

00:32:05,090 --> 00:32:09,919
seeing what's what it's doing right now

00:32:07,580 --> 00:32:12,850
but you know what are the cool things

00:32:09,919 --> 00:32:16,740
you're working on on the future well

00:32:12,850 --> 00:32:18,639
for wine you have a request that's

00:32:16,740 --> 00:32:21,970
internal that hasn't made it up to the

00:32:18,639 --> 00:32:25,059
CPM yet that that a runtime support so

00:32:21,970 --> 00:32:27,399
you can add a flag to the Pasadena

00:32:25,059 --> 00:32:30,399
asking for runtime and it'll tell you

00:32:27,399 --> 00:32:34,389
how long each of those results took to

00:32:30,399 --> 00:32:35,559
generate so that you can help diagnose

00:32:34,389 --> 00:32:37,480
because one of the problems is we've

00:32:35,559 --> 00:32:41,220
gotten so many is that it takes a really

00:32:37,480 --> 00:32:41,220
long time to run this and you want to

00:32:42,600 --> 00:32:49,629
sort this down a little bit tighter of

00:32:47,679 --> 00:32:53,169
course that's not with the now years

00:32:49,629 --> 00:32:55,179
integration having that Nagios check

00:32:53,169 --> 00:32:57,519
that endpoint and using tags to split up

00:32:55,179 --> 00:32:58,929
into multiple checks is great but it's

00:32:57,519 --> 00:33:01,299
also a lot of work now that we've got a

00:32:58,929 --> 00:33:03,820
whole bunch of chat and of course a

00:33:01,299 --> 00:33:05,919
single Nagios check only gets a single

00:33:03,820 --> 00:33:08,019
downtime setting in one contact setting

00:33:05,919 --> 00:33:10,840
so just putting it all into one is not

00:33:08,019 --> 00:33:14,169
ideal so I'm working now on a thing that

00:33:10,840 --> 00:33:18,190
will generate passive Nagios objects for

00:33:14,169 --> 00:33:20,409
the services from the output of a health

00:33:18,190 --> 00:33:22,179
check and then submit the passive

00:33:20,409 --> 00:33:27,009
results back in with an actual active

00:33:22,179 --> 00:33:29,860
check it's still in progress I don't

00:33:27,009 --> 00:33:31,389
know if it's something I'll be able to

00:33:29,860 --> 00:33:35,379
make generic enough to open source but

00:33:31,389 --> 00:33:37,629
maybe could be useful what that means

00:33:35,379 --> 00:33:40,360
that the contacts on the downtime and

00:33:37,629 --> 00:33:45,759
whatever else can be separated out into

00:33:40,360 --> 00:33:47,139
a very specific or into what deep level

00:33:45,759 --> 00:33:50,110
of detail and who needs to get the

00:33:47,139 --> 00:33:52,330
result or the status message or if it's

00:33:50,110 --> 00:33:53,679
just something that you want to say you

00:33:52,330 --> 00:33:55,750
nobody actually needs to be woken up

00:33:53,679 --> 00:33:59,440
about but you want to know if something

00:33:55,750 --> 00:34:02,110
goes wrong and really the point is that

00:33:59,440 --> 00:34:08,409
this standard result is a really

00:34:02,110 --> 00:34:10,359
powerful way to build things for

00:34:08,409 --> 00:34:12,550
building building on top of and it's not

00:34:10,359 --> 00:34:15,129
just for alerting but for other sort of

00:34:12,550 --> 00:34:16,990
dashboards and things although we

00:34:15,129 --> 00:34:18,460
haven't gotten too far with any of those

00:34:16,990 --> 00:34:20,069
sorts of dashboards yet but I hope that

00:34:18,460 --> 00:34:21,790
we will get there

00:34:20,069 --> 00:34:24,369
some of the other things that we're

00:34:21,790 --> 00:34:25,200
hoping to do with it is be able to be

00:34:24,369 --> 00:34:26,550
activate

00:34:25,200 --> 00:34:29,550
features because the health check is

00:34:26,550 --> 00:34:31,290
sale so for example we might verify

00:34:29,550 --> 00:34:32,609
connectivity to the credit card

00:34:31,290 --> 00:34:35,030
processor with a health check and

00:34:32,609 --> 00:34:37,770
disable the checkout button and show a

00:34:35,030 --> 00:34:39,329
more helpful message to the user than

00:34:37,770 --> 00:34:45,149
letting them try and click it and

00:34:39,329 --> 00:34:47,579
whatever maybe we have a cron job that

00:34:45,149 --> 00:34:49,679
can make sure that all the resources

00:34:47,579 --> 00:34:51,929
that it's going to need to complete its

00:34:49,679 --> 00:34:55,909
run are they at least available at the

00:34:51,929 --> 00:34:55,909
start before it gets to the end and fail

00:34:56,369 --> 00:35:01,499
and we haven't currently started

00:34:58,349 --> 00:35:02,910
collecting any metrics from this not

00:35:01,499 --> 00:35:05,489
sure exactly what we're going to want to

00:35:02,910 --> 00:35:08,400
collect and I watch that open tracing

00:35:05,489 --> 00:35:11,940
talk a couple of talks ago and they were

00:35:08,400 --> 00:35:16,140
and that might be the way to go but

00:35:11,940 --> 00:35:20,430
something some results might be good to

00:35:16,140 --> 00:35:25,920
come back here and do that and it would

00:35:20,430 --> 00:35:31,319
be nice to have at least some sort of

00:35:25,920 --> 00:35:37,619
metrics coming back so shank let's say

00:35:31,319 --> 00:35:40,519
I'm Way ahead of time so anybody have

00:35:37,619 --> 00:35:52,559
questions and stuff that I can answer

00:35:40,519 --> 00:35:54,239
before or I guess raise your hand and

00:35:52,559 --> 00:35:58,279
somebody will let you unmute or

00:35:54,239 --> 00:35:58,279
something or I don't know

00:36:18,059 --> 00:36:27,010
what are you using to collect stuff

00:36:21,279 --> 00:36:34,240
collect the health checks currently it's

00:36:27,010 --> 00:36:36,220
all in Nagios the that's our main the

00:36:34,240 --> 00:36:38,079
main thing that we're playing we're

00:36:36,220 --> 00:36:42,369
replacing our Nagios checks with it

00:36:38,079 --> 00:36:44,829
primarily right now but we are we do

00:36:42,369 --> 00:36:48,069
also use it a lot just to go hit the

00:36:44,829 --> 00:36:52,660
website or hit the endpoint and look at

00:36:48,069 --> 00:36:58,720
it and see what what's working and not

00:36:52,660 --> 00:37:01,150
working in the course Nagios integrates

00:36:58,720 --> 00:37:03,880
in the pager duty which sends us the

00:37:01,150 --> 00:37:06,309
thing that actually you know that pops

00:37:03,880 --> 00:37:09,849
up into slack that says here's the thing

00:37:06,309 --> 00:37:11,380
that's broken which hopefully will be a

00:37:09,849 --> 00:37:17,049
little clearer once I get all of the

00:37:11,380 --> 00:37:19,299
checks I'll split up but sometimes it

00:37:17,049 --> 00:37:21,490
says something's broken and then we have

00:37:19,299 --> 00:37:24,279
to hit the end point to find out what it

00:37:21,490 --> 00:37:32,680
is because it gets a little confused

00:37:24,279 --> 00:37:35,900
sometimes but you know I'm hoping for a

00:37:32,680 --> 00:37:38,450
dashboard of some sort that you know

00:37:35,900 --> 00:37:40,640
has all of our different apps on it that

00:37:38,450 --> 00:37:45,049
you can look at it in one place and will

00:37:40,640 --> 00:37:47,599
update and show green or red with a

00:37:45,049 --> 00:37:51,770
little more a better indicator of what's

00:37:47,599 --> 00:38:12,680
going on just haven't gotten to that

00:37:51,770 --> 00:38:16,150
yeah so yeah I've been yeah yeah I see

00:38:12,680 --> 00:38:19,250
the question about open BSD on there and

00:38:16,150 --> 00:38:22,779
so yeah I've been a haven't open to be

00:38:19,250 --> 00:38:26,539
at the account for several years now and

00:38:22,779 --> 00:38:28,849
I keep Perl up to date and open via or

00:38:26,539 --> 00:38:32,210
in the base system because we still ship

00:38:28,849 --> 00:38:34,190
parole with open BSD and I haven't

00:38:32,210 --> 00:38:37,299
gotten 532 in there yet but we're on

00:38:34,190 --> 00:38:37,299
5.30 anyway

00:38:38,289 --> 00:38:46,269
I really like it because it keeps itself

00:38:43,569 --> 00:38:50,969
simple it they are really good at saying

00:38:46,269 --> 00:38:54,789
no to features so rather than just

00:38:50,969 --> 00:38:56,410
implementing whatever crazy new idea

00:38:54,789 --> 00:39:02,319
comes up and making things really really

00:38:56,410 --> 00:39:03,880
complicated they like to just hold off

00:39:02,319 --> 00:39:06,880
and make sure that it's something that's

00:39:03,880 --> 00:39:10,199
actually useful and whatever but they

00:39:06,880 --> 00:39:17,499
are still always pushing forward on

00:39:10,199 --> 00:39:20,890
different other other things that try to

00:39:17,499 --> 00:39:25,839
improve security and whatever and make

00:39:20,890 --> 00:39:28,359
things better but I really I mostly just

00:39:25,839 --> 00:39:30,459
like it because it seems to stay out of

00:39:28,359 --> 00:39:33,989
my way a lot better than any of the

00:39:30,459 --> 00:39:52,569
other operating systems I've tried and

00:39:33,989 --> 00:39:55,029
generally has been very reliable so I do

00:39:52,569 --> 00:39:58,509
want to mention some updates from last

00:39:55,029 --> 00:40:00,459
last year's talk we continue to add the

00:39:58,509 --> 00:40:04,959
dbx class events two more things which

00:40:00,459 --> 00:40:06,039
was that the talk was about sort of and

00:40:04,959 --> 00:40:07,659
I talked about moving to this new

00:40:06,039 --> 00:40:10,989
internal process that was a lot more

00:40:07,659 --> 00:40:13,539
like our open-source process and all of

00:40:10,989 --> 00:40:14,259
the modules shared modules internal ones

00:40:13,539 --> 00:40:16,390
on our team

00:40:14,259 --> 00:40:19,059
unlike the team I'm on I've moved to

00:40:16,390 --> 00:40:23,199
that new workflow I think we're pretty

00:40:19,059 --> 00:40:24,699
close to moving everything and we're

00:40:23,199 --> 00:40:27,779
going to start moving our applications

00:40:24,699 --> 00:40:32,589
to a really similar to that workflow and

00:40:27,779 --> 00:40:35,609
because everything is kind of the

00:40:32,589 --> 00:40:37,030
difference between somebody working on a

00:40:35,609 --> 00:40:42,040
open source

00:40:37,030 --> 00:40:44,470
you're working on a internal project is

00:40:42,040 --> 00:40:49,360
before it merges you have to get two

00:40:44,470 --> 00:40:51,310
extra pieces of approval and so or two

00:40:49,360 --> 00:40:56,740
extra people to approve it that's it so

00:40:51,310 --> 00:40:58,270
it's really a very low barrier to open

00:40:56,740 --> 00:41:01,800
sourcing thing so that's really nice

00:40:58,270 --> 00:41:04,510
and like I said we're up to 27

00:41:01,800 --> 00:41:07,300
distributions on the CPM most of them

00:41:04,510 --> 00:41:22,060
are or many of them not quite half are

00:41:07,300 --> 00:41:24,400
up to our health check related so anyway

00:41:22,060 --> 00:41:26,500
let's see I wanted to say thank you to

00:41:24,400 --> 00:41:28,380
Grand Street for making all of this

00:41:26,500 --> 00:41:31,030
possible

00:41:28,380 --> 00:41:34,990
letting the open source it especially

00:41:31,030 --> 00:41:36,430
Brandon you know for doing all of the

00:41:34,990 --> 00:41:37,780
work that he's been doing into it and

00:41:36,430 --> 00:41:41,110
everybody else that has been doing it

00:41:37,780 --> 00:41:45,130
and Marc Flickinger for all the things

00:41:41,110 --> 00:41:48,940
he does the TPS for all they do the

00:41:45,130 --> 00:41:50,770
conference organizers for changing gears

00:41:48,940 --> 00:41:52,030
and putting on an excellent conference

00:41:50,770 --> 00:41:56,830
in the cloud I've been really enjoying

00:41:52,030 --> 00:41:59,260
it so far and all of the folks that are

00:41:56,830 --> 00:42:02,290
in the Perot community we're looking to

00:41:59,260 --> 00:42:05,700
the future and not start complaining

00:42:02,290 --> 00:42:05,700
about how it's not as good as the past

00:42:05,790 --> 00:42:10,690
GSG is not currently hiring but once we

00:42:09,250 --> 00:42:17,490
figure out this whole thing I'm sure

00:42:10,690 --> 00:42:20,710
they will be again so anyway back to you

00:42:17,490 --> 00:42:28,170
yeah that's it so with our hiring oh

00:42:20,710 --> 00:42:35,280
yeah thank you thank you Andrew

00:42:28,170 --> 00:42:35,280
and I was all like oh yeah

00:42:37,980 --> 00:42:48,260
I missed an announcement yesterday I was

00:42:39,690 --> 00:42:52,319
the conference we're hiring so anyway I

00:42:48,260 --> 00:42:54,119
will be happy to answer questions send

00:42:52,319 --> 00:43:01,020
the email talking at Twitter

00:42:54,119 --> 00:43:02,339
IRC whatever and let me know how it

00:43:01,020 --> 00:43:04,910
works if you're using it and I

00:43:02,339 --> 00:43:04,910
appreciate it

00:43:05,450 --> 00:43:07,510
you

00:43:07,660 --> 00:43:09,720
you

00:43:12,859 --> 00:43:14,920
you

00:43:15,490 --> 00:43:17,550
you

00:43:25,300 --> 00:43:42,920
does anybody have questions yeah I've

00:43:40,520 --> 00:43:48,230
got several minutes more for questions

00:43:42,920 --> 00:43:53,990
so are you looking at any and

00:43:48,230 --> 00:43:56,900
performance metrics so like I said the

00:43:53,990 --> 00:44:00,440
only one that we have so far that's not

00:43:56,900 --> 00:44:02,600
actually that's still in a PR state is

00:44:00,440 --> 00:44:03,950
that we're looking at runtime statistics

00:44:02,600 --> 00:44:09,619
for how long each individual checker

00:44:03,950 --> 00:44:12,850
takes to run and I would like to add the

00:44:09,619 --> 00:44:19,510
ability to have the Diagnostics return

00:44:12,850 --> 00:44:22,700
more performance metrics of some sort

00:44:19,510 --> 00:44:24,770
not entirely sure what those would be

00:44:22,700 --> 00:44:27,290
but depending on the check that might

00:44:24,770 --> 00:44:30,020
have something and putting that into a

00:44:27,290 --> 00:44:38,180
standard format that then some other

00:44:30,020 --> 00:44:39,350
tool could could access and log and turn

00:44:38,180 --> 00:44:42,560
into graphs and stuff would be nice

00:44:39,350 --> 00:44:45,200
though now after seeing that open

00:44:42,560 --> 00:44:51,170
tracing talk just a minute ago I don't

00:44:45,200 --> 00:44:53,920
know whether or not you know what I

00:44:51,170 --> 00:44:53,920
wanted to do but

00:45:00,490 --> 00:45:10,060
and I mean we do yeah I mean I guess it

00:45:05,109 --> 00:45:13,210
could definitely there are some I don't

00:45:10,060 --> 00:45:16,900
know if it's I don't know if that DBH

00:45:13,210 --> 00:45:20,589
check saying does it but I believe that

00:45:16,900 --> 00:45:23,260
it there are there is one that maybe

00:45:20,589 --> 00:45:25,060
isn't open source yet or I don't know we

00:45:23,260 --> 00:45:28,750
are doing something that will be able to

00:45:25,060 --> 00:45:32,950
make a sequel query do something and

00:45:28,750 --> 00:45:35,710
face to check on the result so being

00:45:32,950 --> 00:45:45,760
able to check count like flow queries

00:45:35,710 --> 00:45:48,670
and stuff would be nice ok thank you for

00:45:45,760 --> 00:45:50,980
speaking if anybody has any questions

00:45:48,670 --> 00:45:54,160
Andrew are you available and slack for

00:45:50,980 --> 00:45:57,330
for the questions or um didn't join the

00:45:54,160 --> 00:46:00,010
 I generally don't think is a

00:45:57,330 --> 00:46:06,250
good thing unless you're paying me to be

00:46:00,010 --> 00:46:11,849
there but I am on IRC and other places

00:46:06,250 --> 00:46:11,849

YouTube URL: https://www.youtube.com/watch?v=r7iL8kmJTvg


