Title: Christopher Jack - Using Perl to parse terabytes of mission critical variable
Publication date: 2020-06-24
Playlist: TPC 2020 in the Cloud
Description: 
	3 security doors, a PC with no external access, and terabytes of semi-structured data needing parsing with big money riding on it. Would Perl be up for the challenge?

The twist will be revealed in the talk (it’s a doozy).

A large number of financial documents needed parsing. Accuracy was mission critical and money was literally riding on it. There was no specification and the meaning of some data was not even known to our client contacts. Many many years of data. The format shifted over time. It’s in a binary print format I had never heard of.

Would a very loose Backus-Naur Form approach work? Discuss.
Captions: 
	00:00:00,890 --> 00:00:08,730
yeah go for it okay um my name is Chris

00:00:04,920 --> 00:00:13,139
Jack I've been using Perl since bill

00:00:08,730 --> 00:00:16,699
three sort of days I usually work for

00:00:13,139 --> 00:00:19,529
banks and corporate Treasuries using

00:00:16,699 --> 00:00:22,350
large databases like Oracle and Sybase

00:00:19,529 --> 00:00:24,960
and sequel server and so on this was a

00:00:22,350 --> 00:00:28,560
talk that I wanted to give many years

00:00:24,960 --> 00:00:31,859
ago and I wasn't allowed to because it

00:00:28,560 --> 00:00:34,710
was topical in England and we were

00:00:31,859 --> 00:00:39,390
worried that I would be giving

00:00:34,710 --> 00:00:42,059
information away that was corporate

00:00:39,390 --> 00:00:45,539
corporate sensitivity and also that

00:00:42,059 --> 00:00:50,730
there are third parties who might start

00:00:45,539 --> 00:00:52,260
trying to descend upon the company I'm

00:00:50,730 --> 00:00:54,449
not allowed to mention the names of the

00:00:52,260 --> 00:01:01,469
banks involved and the names of the

00:00:54,449 --> 00:01:02,879
banks not on my CV but so what's it

00:01:01,469 --> 00:01:04,530
about it's about something called

00:01:02,879 --> 00:01:07,260
payment protection insurance which if

00:01:04,530 --> 00:01:09,000
you live in England you would know quite

00:01:07,260 --> 00:01:11,220
a lot about if you live in the u.s. I

00:01:09,000 --> 00:01:14,549
will explain it a little bit to you

00:01:11,220 --> 00:01:18,840
basically things like mortgages and

00:01:14,549 --> 00:01:22,350
credit cards you pay an amount on a loan

00:01:18,840 --> 00:01:23,700
and there's a risk that on that loan you

00:01:22,350 --> 00:01:25,170
might not be able to make the payment

00:01:23,700 --> 00:01:27,060
because you're ill you're not working

00:01:25,170 --> 00:01:30,979
and so on so you could pay an extra

00:01:27,060 --> 00:01:34,259
amount to cover the cost of the

00:01:30,979 --> 00:01:38,640
repayments so insurance on your

00:01:34,259 --> 00:01:41,369
repayment now I got involved in the

00:01:38,640 --> 00:01:44,369
credit-card side of this and there you

00:01:41,369 --> 00:01:50,700
are paying you know maybe about 0.78% to

00:01:44,369 --> 00:01:53,700
1% of the amount you owed and on the

00:01:50,700 --> 00:01:56,610
basis of that I'm speaking kind of in

00:01:53,700 --> 00:01:58,290
general terms because the terms and

00:01:56,610 --> 00:02:04,579
conditions would change depending on the

00:01:58,290 --> 00:02:07,789
bank but you would get a 5% repayment so

00:02:04,579 --> 00:02:11,190
and this would be for up to 12 months

00:02:07,789 --> 00:02:13,890
typically so if you do the ballpoint

00:02:11,190 --> 00:02:18,780
maths 0.78% one

00:02:13,890 --> 00:02:22,860
sent to get maybe a total of 60% if you

00:02:18,780 --> 00:02:27,450
were out of work for a year possibly not

00:02:22,860 --> 00:02:29,970
such a good idea and people complained

00:02:27,450 --> 00:02:34,200
about it and in the end the government

00:02:29,970 --> 00:02:38,060
decided that it was being miss old

00:02:34,200 --> 00:02:40,980
people that the product was overpriced

00:02:38,060 --> 00:02:45,840
and everyone should get their money back

00:02:40,980 --> 00:02:48,870
so this raised a problem that you had to

00:02:45,840 --> 00:02:52,860
recalculate how much people were going

00:02:48,870 --> 00:02:56,130
to get refunded and case of credit cards

00:02:52,860 --> 00:02:58,320
the way that you did this was the you

00:02:56,130 --> 00:03:01,140
had to go through for the period of time

00:02:58,320 --> 00:03:03,600
that client was getting payment

00:03:01,140 --> 00:03:06,090
protection insurance on their credit

00:03:03,600 --> 00:03:10,500
card you had to take that off and see

00:03:06,090 --> 00:03:14,790
how much they would have paid per month

00:03:10,500 --> 00:03:16,140
for the length of the product and

00:03:14,790 --> 00:03:17,910
compared to the amount that they

00:03:16,140 --> 00:03:20,730
actually paid and then that would be the

00:03:17,910 --> 00:03:23,489
amount that they got refunded and if

00:03:20,730 --> 00:03:25,500
they went into credit so if you made a

00:03:23,489 --> 00:03:26,880
payment and it resulted in a fine

00:03:25,500 --> 00:03:29,130
because you went over your credit card

00:03:26,880 --> 00:03:32,670
limit you get the money for the fine

00:03:29,130 --> 00:03:35,160
back you'd be paying twenty twenty four

00:03:32,670 --> 00:03:37,620
percent credit card interest on the

00:03:35,160 --> 00:03:40,470
amount over a period of many years so

00:03:37,620 --> 00:03:42,060
for some people most people it's like

00:03:40,470 --> 00:03:44,010
under five hundred pounds some people

00:03:42,060 --> 00:03:48,180
manage to wrap up over a hundred

00:03:44,010 --> 00:03:52,019
thousand pounds in debt so the first

00:03:48,180 --> 00:03:54,829
problem that you had was that the banks

00:03:52,019 --> 00:03:58,290
are only required to keep information

00:03:54,829 --> 00:04:00,090
around for six years so they're

00:03:58,290 --> 00:04:02,880
databases where they had all the credit

00:04:00,090 --> 00:04:08,040
card statement information stored had

00:04:02,880 --> 00:04:12,299
been purged and it wasn't available but

00:04:08,040 --> 00:04:13,410
the repayment of PPI could go back into

00:04:12,299 --> 00:04:15,780
the early 90s

00:04:13,410 --> 00:04:19,829
I mean PPI is a product has been around

00:04:15,780 --> 00:04:22,560
since maybe the early 70s but we didn't

00:04:19,829 --> 00:04:24,810
have data which went back that far and

00:04:22,560 --> 00:04:26,280
what some of the banks found was

00:04:24,810 --> 00:04:28,500
although they didn't have the data in

00:04:26,280 --> 00:04:34,050
the database

00:04:28,500 --> 00:04:37,200
they had files of the print files that

00:04:34,050 --> 00:04:40,280
went to the printer available on tape so

00:04:37,200 --> 00:04:49,230
then we had to get the information off

00:04:40,280 --> 00:04:51,900
the the print file format and this is

00:04:49,230 --> 00:04:54,210
where I came in now the print file

00:04:51,900 --> 00:05:02,580
format was called advanced function

00:04:54,210 --> 00:05:05,190
presentation and if you think something

00:05:02,580 --> 00:05:07,260
which is in a binary format which gets

00:05:05,190 --> 00:05:08,730
you can either view on a screen and

00:05:07,260 --> 00:05:10,650
you'd see something which looked like a

00:05:08,730 --> 00:05:12,600
credit card statement or it could be

00:05:10,650 --> 00:05:15,150
sent off to a printer and it would get

00:05:12,600 --> 00:05:19,640
printed out so a little bit like

00:05:15,150 --> 00:05:19,640
postscript bit in a binary final format

00:05:20,660 --> 00:05:27,180
so if we have a look at this is a

00:05:24,570 --> 00:05:31,530
mock-up of a credit card statement I

00:05:27,180 --> 00:05:35,419
couldn't take credit card information

00:05:31,530 --> 00:05:39,900
out at the site security was extremely

00:05:35,419 --> 00:05:43,110
tight to give you an idea of basically

00:05:39,900 --> 00:05:44,640
what security was like having gone

00:05:43,110 --> 00:05:47,070
through about three security doors you

00:05:44,640 --> 00:05:48,990
had two pcs one was like a normal PC

00:05:47,070 --> 00:05:52,919
where you had access to the Internet the

00:05:48,990 --> 00:05:54,960
other PC you logged on and you got one

00:05:52,919 --> 00:05:58,140
icon and that would then let you get

00:05:54,960 --> 00:05:59,940
through to the machine where you had

00:05:58,140 --> 00:06:04,169
access to the credit cards and you could

00:05:59,940 --> 00:06:05,430
write your code and so on but if you

00:06:04,169 --> 00:06:08,910
wanted to get anything off that machine

00:06:05,430 --> 00:06:10,650
you couldn't copy and paste it into an

00:06:08,910 --> 00:06:15,090
external device because you had this

00:06:10,650 --> 00:06:17,729
layer of indirection if you want to get

00:06:15,090 --> 00:06:21,930
anything off the machine you had to fill

00:06:17,729 --> 00:06:25,620
out forms and say hey I'm not taking

00:06:21,930 --> 00:06:27,510
anything company confidential off so I

00:06:25,620 --> 00:06:29,610
couldn't take any credit card statements

00:06:27,510 --> 00:06:31,020
off and even if I could I wouldn't have

00:06:29,610 --> 00:06:33,210
been putting them up here I could have

00:06:31,020 --> 00:06:35,450
put a credit card statement of my own up

00:06:33,210 --> 00:06:38,880
but I didn't want to do that either so

00:06:35,450 --> 00:06:40,710
what do you have here this is a basic

00:06:38,880 --> 00:06:41,670
layout and the sort of information that

00:06:40,710 --> 00:06:44,640
you see on

00:06:41,670 --> 00:06:48,620
credit-card you have a little bit of int

00:06:44,640 --> 00:06:51,030
header information some codes which are

00:06:48,620 --> 00:06:54,600
random letters which we were trying to

00:06:51,030 --> 00:06:59,550
decipher number of pages and maybe an

00:06:54,600 --> 00:07:01,800
icon address a series of things where

00:06:59,550 --> 00:07:03,360
you got a label and a piece of data so

00:07:01,800 --> 00:07:05,820
something like the credit card number

00:07:03,360 --> 00:07:07,680
statement date and so on you'd have a

00:07:05,820 --> 00:07:09,750
lot more in practice than this then

00:07:07,680 --> 00:07:12,870
you'd have the statements so opening

00:07:09,750 --> 00:07:15,300
balance a number of different things

00:07:12,870 --> 00:07:22,590
you'd bought during the month if you'd

00:07:15,300 --> 00:07:26,160
bought overseas you'd have a currency

00:07:22,590 --> 00:07:30,840
exchange rate then you'd have a free

00:07:26,160 --> 00:07:32,220
text section this could be used for all

00:07:30,840 --> 00:07:34,770
the usual things that you have on a

00:07:32,220 --> 00:07:37,500
credit card but if you haven't made a

00:07:34,770 --> 00:07:38,730
payment it would probably talk about the

00:07:37,500 --> 00:07:40,410
fact that you'd missed your payment and

00:07:38,730 --> 00:07:42,810
if you missed several payments it would

00:07:40,410 --> 00:07:45,740
get increasingly stern and threaten you

00:07:42,810 --> 00:07:48,960
things you had some footer information

00:07:45,740 --> 00:07:51,480
now some of this information will

00:07:48,960 --> 00:07:53,010
reconcile so previous balance of a

00:07:51,480 --> 00:07:55,680
thousand pounds is the same as your

00:07:53,010 --> 00:07:59,100
opening balance current balance of 550

00:07:55,680 --> 00:08:01,410
years your current balance there and

00:07:59,100 --> 00:08:05,430
you've got this little thing credit card

00:08:01,410 --> 00:08:07,890
premium in practice payment protection

00:08:05,430 --> 00:08:10,640
insurance was never labeled as that it

00:08:07,890 --> 00:08:14,730
was usually put down as something

00:08:10,640 --> 00:08:20,520
euphemistic which people would be less

00:08:14,730 --> 00:08:23,610
likely to question possibly so how did

00:08:20,520 --> 00:08:26,280
we do this the first thing that we had

00:08:23,610 --> 00:08:27,990
was how does a problem was how to get

00:08:26,280 --> 00:08:29,910
the information out of this binary

00:08:27,990 --> 00:08:34,190
format into something who could actually

00:08:29,910 --> 00:08:39,360
deal with in Perl slightly surprisingly

00:08:34,190 --> 00:08:44,070
there is an AFP module in Sipan and I

00:08:39,360 --> 00:08:45,990
tried it out and it works but you get a

00:08:44,070 --> 00:08:49,290
binary structure back at the end of it

00:08:45,990 --> 00:08:53,100
so if I'd used that to do it I'd have

00:08:49,290 --> 00:08:55,170
had to find the data structure and

00:08:53,100 --> 00:08:57,029
translate it myself

00:08:55,170 --> 00:08:59,459
fortunately there were third-party

00:08:57,029 --> 00:09:04,620
products available which would allow you

00:08:59,459 --> 00:09:06,389
to translate the FP format into

00:09:04,620 --> 00:09:09,480
something which I could pass more easily

00:09:06,389 --> 00:09:12,630
in in Perl so we ended up going for

00:09:09,480 --> 00:09:15,000
target stream medias workbench and it

00:09:12,630 --> 00:09:15,930
gave a structure which looks a little

00:09:15,000 --> 00:09:18,600
bit like this

00:09:15,930 --> 00:09:20,760
um this is already created from memory

00:09:18,600 --> 00:09:23,370
because you know I didn't take stuff off

00:09:20,760 --> 00:09:24,990
the site which I could then show it to

00:09:23,370 --> 00:09:27,510
you but basically you know apart from

00:09:24,990 --> 00:09:31,339
the XML header you had a document

00:09:27,510 --> 00:09:35,250
section and then a series of pages and

00:09:31,339 --> 00:09:38,220
the information in the page was fairly

00:09:35,250 --> 00:09:41,010
minimal you had XY coordinate a font

00:09:38,220 --> 00:09:43,709
size and then the text so hello world

00:09:41,010 --> 00:09:48,240
when you take the C data

00:09:43,709 --> 00:09:50,329
wrapper off from around it you lost a

00:09:48,240 --> 00:09:55,220
few things you didn't know the font size

00:09:50,329 --> 00:09:57,930
any pictures didn't come through ah and

00:09:55,220 --> 00:10:01,140
it's not clear from this example but the

00:09:57,930 --> 00:10:05,490
data is in utf-8 so you could have

00:10:01,140 --> 00:10:07,470
accents on the YZ and so on the other

00:10:05,490 --> 00:10:10,920
thing which I would point out about this

00:10:07,470 --> 00:10:14,699
is that the data didn't necessarily line

00:10:10,920 --> 00:10:16,860
up so the y coordinate you might help

00:10:14,699 --> 00:10:19,290
hope that you could go across the page

00:10:16,860 --> 00:10:20,699
and say hello world but the y coordinate

00:10:19,290 --> 00:10:27,410
would mean that the world was actually

00:10:20,699 --> 00:10:32,730
slightly above the hello sometimes so I

00:10:27,410 --> 00:10:35,820
wrote a little scheduler to do multiple

00:10:32,730 --> 00:10:40,170
files at once and sort them and allowing

00:10:35,820 --> 00:10:45,230
on things like debugging information

00:10:40,170 --> 00:10:49,920
timing information and it would put

00:10:45,230 --> 00:10:53,579
problems into an external file but the

00:10:49,920 --> 00:10:57,660
code itself I went with XML parser

00:10:53,579 --> 00:11:00,329
because it allows you to read element by

00:10:57,660 --> 00:11:03,660
element because the files were maybe 100

00:11:00,329 --> 00:11:06,240
megabyte or more in size I didn't want

00:11:03,660 --> 00:11:08,980
to load that all into memory and I

00:11:06,240 --> 00:11:13,480
didn't want to lose ordering on the page

00:11:08,980 --> 00:11:19,000
which things like XML simple would give

00:11:13,480 --> 00:11:23,380
you so I could pass a page at a time the

00:11:19,000 --> 00:11:27,700
first thing that I did was because what

00:11:23,380 --> 00:11:30,250
I wanted to do with the code was to be

00:11:27,700 --> 00:11:32,050
able to go across I go account and then

00:11:30,250 --> 00:11:33,820
the next data element would be the data

00:11:32,050 --> 00:11:36,370
for it I'd go statement date the next

00:11:33,820 --> 00:11:38,920
element would be the date but these

00:11:36,370 --> 00:11:41,110
things didn't necessarily line up that

00:11:38,920 --> 00:11:42,910
could be above that so to avoid the

00:11:41,110 --> 00:11:47,680
problem that I'd find the one two three

00:11:42,910 --> 00:11:54,870
four sorted by XY first I snapped it to

00:11:47,680 --> 00:11:57,940
a grid the next problem was that I

00:11:54,870 --> 00:12:03,400
wanted to have different sections of the

00:11:57,940 --> 00:12:06,910
page so here you've got data name data

00:12:03,400 --> 00:12:07,990
type here you've got free text here

00:12:06,910 --> 00:12:10,660
you've got something different again

00:12:07,990 --> 00:12:13,360
we've got a three column format or

00:12:10,660 --> 00:12:18,490
occasionally a one column format and

00:12:13,360 --> 00:12:21,310
here you've just got a bunch of text so

00:12:18,490 --> 00:12:24,670
I divided the pages up using a fairly

00:12:21,310 --> 00:12:28,300
crude mechanism that if it's passed a

00:12:24,670 --> 00:12:34,330
certain point on the page it's in this

00:12:28,300 --> 00:12:37,750
part if it's your before that one of the

00:12:34,330 --> 00:12:39,850
high-level problems was that you've got

00:12:37,750 --> 00:12:43,270
like six terabytes of data spanning

00:12:39,850 --> 00:12:45,100
maybe fifteen twenty years and it's not

00:12:43,270 --> 00:12:48,610
clear that the format of the data is

00:12:45,100 --> 00:12:50,170
going to stay the same over time so in

00:12:48,610 --> 00:12:51,490
some statements you'll find that the

00:12:50,170 --> 00:12:53,530
address is actually over on this side

00:12:51,490 --> 00:12:58,390
and the account information is over on

00:12:53,530 --> 00:13:01,750
the side but by doing a first pass of

00:12:58,390 --> 00:13:03,970
the code where you've put different

00:13:01,750 --> 00:13:08,460
things into different sections if I

00:13:03,970 --> 00:13:12,130
needed to pass this on one account and I

00:13:08,460 --> 00:13:15,750
could pass it the left-hand side section

00:13:12,130 --> 00:13:15,750
rather than the right-hand side section

00:13:16,500 --> 00:13:25,360
so we divide the page into two sections

00:13:21,870 --> 00:13:29,890
we didn't want to have the added

00:13:25,360 --> 00:13:32,350
aggravation of using UTF and this was

00:13:29,890 --> 00:13:34,840
partly because further downstream where

00:13:32,350 --> 00:13:39,040
the calculators exist so having

00:13:34,840 --> 00:13:41,320
processed all this data you then put it

00:13:39,040 --> 00:13:43,180
into a calculator and it works out how

00:13:41,320 --> 00:13:47,440
much you're supposed to give the the

00:13:43,180 --> 00:13:55,620
client back and that was based around

00:13:47,440 --> 00:13:57,730
ASCII so we are little UTF to ASCII

00:13:55,620 --> 00:13:58,090
converter which goes a little bit like

00:13:57,730 --> 00:14:02,110
this

00:13:58,090 --> 00:14:04,960
so the high bit is set and the following

00:14:02,110 --> 00:14:08,440
letter so every time I click it goes

00:14:04,960 --> 00:14:10,840
forward a page so things like our which

00:14:08,440 --> 00:14:12,940
is the registered sign you change it

00:14:10,840 --> 00:14:15,610
into brackets our brackets are take

00:14:12,940 --> 00:14:19,810
accents off words and if you didn't find

00:14:15,610 --> 00:14:24,790
the the mapping it would break in

00:14:19,810 --> 00:14:28,380
practice we only had pages 194 and 195

00:14:24,790 --> 00:14:31,780
which are Eastern Western European

00:14:28,380 --> 00:14:33,280
character pages if I started finding

00:14:31,780 --> 00:14:36,370
Chinese characters I would have been

00:14:33,280 --> 00:14:44,310
quite worried so I wanted at all points

00:14:36,370 --> 00:14:47,800
to have control over the process so I

00:14:44,310 --> 00:14:50,740
only translated characters which I found

00:14:47,800 --> 00:14:53,650
and if I found an additional one I could

00:14:50,740 --> 00:14:55,150
make a decision in there are a few

00:14:53,650 --> 00:15:00,520
characters which managed to get into

00:14:55,150 --> 00:15:08,280
data which were not UTF and I just

00:15:00,520 --> 00:15:14,770
discarded those now the output for the

00:15:08,280 --> 00:15:17,590
fog came down into three parts aside

00:15:14,770 --> 00:15:19,630
from the table window in the middle way

00:15:17,590 --> 00:15:23,830
you've got the credit card everything

00:15:19,630 --> 00:15:25,420
could be put into a single table so the

00:15:23,830 --> 00:15:28,810
account statement date the previous

00:15:25,420 --> 00:15:30,760
balance so on would all go into one file

00:15:28,810 --> 00:15:32,710
the Tran

00:15:30,760 --> 00:15:34,840
action table window would go into

00:15:32,710 --> 00:15:36,610
another file and then we had a third

00:15:34,840 --> 00:15:44,890
fire which had summary information on

00:15:36,610 --> 00:15:48,280
the files that we were passing but we

00:15:44,890 --> 00:15:50,890
didn't know the origin of the files that

00:15:48,280 --> 00:15:54,850
we were passing and it became clear as

00:15:50,890 --> 00:15:56,890
we went further into it that probably

00:15:54,850 --> 00:16:00,420
not all of it was live data there were

00:15:56,890 --> 00:16:03,840
irregularities in some of the data which

00:16:00,420 --> 00:16:09,030
made it likely that they'd also given us

00:16:03,840 --> 00:16:11,410
test runs or whatever we were trying to

00:16:09,030 --> 00:16:16,960
reconcile every piece of information we

00:16:11,410 --> 00:16:19,530
possibly could to maximize our belief

00:16:16,960 --> 00:16:22,900
that we'd captured the page correctly

00:16:19,530 --> 00:16:25,270
hey Chris yeah just just a quick note

00:16:22,900 --> 00:16:28,780
this you're you're at time for the

00:16:25,270 --> 00:16:30,430
session but you can keep going because

00:16:28,780 --> 00:16:32,140
you know we have separate meanings for

00:16:30,430 --> 00:16:33,280
each session okay why stick around

00:16:32,140 --> 00:16:39,340
they're welcome to do so

00:16:33,280 --> 00:16:42,240
okay okay I'll rush now so we had error

00:16:39,340 --> 00:16:46,030
codes which we would put out onto the

00:16:42,240 --> 00:16:48,040
tape table as well so if you found

00:16:46,030 --> 00:16:51,760
something like the balance didn't

00:16:48,040 --> 00:16:55,420
reconcile or you added up the data here

00:16:51,760 --> 00:16:59,080
it would end up as an error code some

00:16:55,420 --> 00:17:00,970
things were required rewriting the code

00:16:59,080 --> 00:17:09,190
so if I found a different spelling of

00:17:00,970 --> 00:17:16,449
previous balance that would lead to so

00:17:09,190 --> 00:17:17,689
so the harder code looks like this you I

00:17:16,449 --> 00:17:20,899
created

00:17:17,689 --> 00:17:24,500
structure which mirrored the outline of

00:17:20,899 --> 00:17:25,909
the the file itself so it have a label

00:17:24,500 --> 00:17:27,379
for the thing so if it was statement

00:17:25,909 --> 00:17:29,480
date then it would have the type that

00:17:27,379 --> 00:17:31,220
you'd expect the date to be in and where

00:17:29,480 --> 00:17:32,840
you'd expect to see it on the page so in

00:17:31,220 --> 00:17:34,490
this case we'd expect to see it on the

00:17:32,840 --> 00:17:37,879
right-hand side

00:17:34,490 --> 00:17:42,190
as time went on it became clear that

00:17:37,879 --> 00:17:45,190
this was inadequate to capture

00:17:42,190 --> 00:17:47,779
everything that I wanted to do so

00:17:45,190 --> 00:17:49,190
sometimes you'd have instead of account

00:17:47,779 --> 00:17:51,769
number you might have master card number

00:17:49,190 --> 00:17:54,759
or visa card number so we wanted to

00:17:51,769 --> 00:17:57,860
store that as well so if it was an alias

00:17:54,759 --> 00:17:59,509
you'd not only capture the credit card

00:17:57,860 --> 00:18:02,960
number you'd also capture the label

00:17:59,509 --> 00:18:04,700
itself sometimes fields would go over

00:18:02,960 --> 00:18:07,399
multiple lines so we could combine them

00:18:04,700 --> 00:18:09,379
into a field name and some fields were

00:18:07,399 --> 00:18:19,309
sometimes they're not there at other

00:18:09,379 --> 00:18:21,919
time so so elements could we would check

00:18:19,309 --> 00:18:24,200
that the element was only once on the

00:18:21,919 --> 00:18:26,629
page and you'd give an error if if it

00:18:24,200 --> 00:18:29,029
wasn't you'd do type checking and this

00:18:26,629 --> 00:18:32,019
included things like on credit card

00:18:29,029 --> 00:18:37,519
numbers you'd want to check that the

00:18:32,019 --> 00:18:39,860
checksum was was correct for the table

00:18:37,519 --> 00:18:41,690
window you had normal transactions and

00:18:39,860 --> 00:18:43,610
currency rates we needed to pass the

00:18:41,690 --> 00:18:45,799
currency to get the currency rate out of

00:18:43,610 --> 00:18:50,659
it check the date was in the right

00:18:45,799 --> 00:18:54,649
format we checked the date was valid we

00:18:50,659 --> 00:18:59,240
did have a few unusual dates we had a

00:18:54,649 --> 00:19:02,269
31st of November because we wanted to

00:18:59,240 --> 00:19:05,090
capture as much of the date data as

00:19:02,269 --> 00:19:07,070
possible the rule of thumb was that if

00:19:05,090 --> 00:19:09,830
we had to adjust data we do it in the

00:19:07,070 --> 00:19:11,750
clients favor so 31st to November could

00:19:09,830 --> 00:19:13,909
either go to 1st to December or 30th of

00:19:11,750 --> 00:19:15,379
November but making it go to 30th of

00:19:13,909 --> 00:19:17,179
November would mean that they'll get a

00:19:15,379 --> 00:19:25,850
little bit more interest so we would

00:19:17,179 --> 00:19:27,649
bump it that way the desire to capture

00:19:25,850 --> 00:19:31,220
as much information as possible out of

00:19:27,649 --> 00:19:31,460
the file meant that I ended up writing a

00:19:31,220 --> 00:19:32,960
reg

00:19:31,460 --> 00:19:37,250
expression for the customer information

00:19:32,960 --> 00:19:39,169
file so every single possible piece of

00:19:37,250 --> 00:19:42,320
text needed to be catered for for this

00:19:39,169 --> 00:19:44,710
so it ended up going to a thousand lines

00:19:42,320 --> 00:19:47,779
and we're looking for information like

00:19:44,710 --> 00:19:50,840
if interest rate information was in

00:19:47,779 --> 00:19:53,539
there if there was we didn't know what

00:19:50,840 --> 00:19:55,669
we're going to find ahead of time so by

00:19:53,539 --> 00:19:57,590
parsing the entire thing we could find

00:19:55,669 --> 00:20:02,960
out if there was interesting information

00:19:57,590 --> 00:20:05,929
in there data all changed over time so a

00:20:02,960 --> 00:20:11,600
large part of the thing was slowly

00:20:05,929 --> 00:20:14,179
easing the requirements on the code so

00:20:11,600 --> 00:20:15,950
we'd say a date had to be in a specific

00:20:14,179 --> 00:20:17,779
format then we'd find a different date

00:20:15,950 --> 00:20:20,559
and then we'd say okay work can either

00:20:17,779 --> 00:20:29,330
be in this format or it can be in

00:20:20,559 --> 00:20:30,799
another format and check everything

00:20:29,330 --> 00:20:33,590
pedantically so we checked all the

00:20:30,799 --> 00:20:36,770
numbers added up and this is where we

00:20:33,590 --> 00:20:40,390
found things like the balancers didn't

00:20:36,770 --> 00:20:44,320
always add up which made us realize that

00:20:40,390 --> 00:20:44,320
okay this is an all live data

00:20:44,529 --> 00:20:53,360
okay so rushed a bit at the end but

00:20:48,970 --> 00:20:56,419
that's basis talk if you want to ask me

00:20:53,360 --> 00:20:57,890
any questions I'm looking for contract

00:20:56,419 --> 00:21:02,630
work at the moment as well based around

00:20:57,890 --> 00:21:05,140
London so hit me up if if if you're

00:21:02,630 --> 00:21:05,140

YouTube URL: https://www.youtube.com/watch?v=43bGlQeBTS0


