Title: Stevan Little - "Hold My Beer and Watch This!"
Publication date: 2017-06-24
Playlist: TPC 2017 in DC
Description: 
	Perl 5 has been described in many ways; a Shinto Shrine, executable line noise, a Swiss Army Chainsaw, the Duct Tape of the Internet, etc. But I think Perl 5 is more like a old pop star, always reinventing itself to stay relevant, never truly leaving our consciousness, always just a melody away.

Over the past several years I have been (slowly) working on a design for a new object system that would be suitable for inclusion in the Perl 5 core. This year I began releasing the various components to CPAN and in this talk we will discuss them and my dreams for the next incarnation of Perl 5.


Stevan Little is a programming language enthusiast and while he loves all languages, Perl has found a special place in his heart. Stevan is a CPAN contributor and was the original author of the Moose module. His current focus is on improving the Object Oriented features in the core of Perl.
Captions: 
	00:00:00,719 --> 00:00:05,700
so here's my talk oh my beer and watch

00:00:04,710 --> 00:00:07,950
this

00:00:05,700 --> 00:00:08,730
everybody has to wonder what that has to

00:00:07,950 --> 00:00:12,690
do with Pearl

00:00:08,730 --> 00:00:16,310
well beer Pearl naturally so let me do a

00:00:12,690 --> 00:00:18,510
quick disclaimer first I've been I gave

00:00:16,310 --> 00:00:21,330
an earlier version of this talk at

00:00:18,510 --> 00:00:23,609
FOSDEM this year in Belgium and I gave

00:00:21,330 --> 00:00:26,279
another one at the Amsterdam X pearl

00:00:23,609 --> 00:00:29,970
mongers meaning as well and I've been

00:00:26,279 --> 00:00:32,009
refining it but I recently had to

00:00:29,970 --> 00:00:34,200
convert this from PowerPoint keynote and

00:00:32,009 --> 00:00:36,989
so there was a lot of formatting mess

00:00:34,200 --> 00:00:39,809
ups and stuff like that and so I left

00:00:36,989 --> 00:00:42,450
early for the social thing with the

00:00:39,809 --> 00:00:44,760
intent of spending time in my room and

00:00:42,450 --> 00:00:47,610
just hanging out and and practicing on a

00:00:44,760 --> 00:00:50,420
few beers and in cleaning things up I

00:00:47,610 --> 00:00:53,820
should have known when issuing a

00:00:50,420 --> 00:00:56,489
challenge to gene hack on on Twitter

00:00:53,820 --> 00:00:58,800
that uh I should have seen this one

00:00:56,489 --> 00:01:00,690
coming and and honestly after typing

00:00:58,800 --> 00:01:05,880
that comment I probably should have

00:01:00,690 --> 00:01:08,220
really rethought my life so any

00:01:05,880 --> 00:01:10,320
formatting weirdness on any of the

00:01:08,220 --> 00:01:13,650
slides or anything like that is Jean hax

00:01:10,320 --> 00:01:19,920
fault so please everyone please use this

00:01:13,650 --> 00:01:22,259
this hashtag so for those of you don't

00:01:19,920 --> 00:01:25,650
know me my name is Steven little this is

00:01:22,259 --> 00:01:28,560
my CP NID my email which Sipan

00:01:25,650 --> 00:01:30,210
thankfully provides github twitter and

00:01:28,560 --> 00:01:34,650
my local pro mangas group is the

00:01:30,210 --> 00:01:36,990
amsterdam x.x standing for expat it's a

00:01:34,650 --> 00:01:38,700
it's a it's a pro mongers group in the

00:01:36,990 --> 00:01:41,850
netherlands that is specifically in

00:01:38,700 --> 00:01:44,430
English units for the expats speaking of

00:01:41,850 --> 00:01:45,990
that I work at booking comm if we are

00:01:44,430 --> 00:01:47,610
always hiring and we're always looking

00:01:45,990 --> 00:01:49,590
for good programmers if you're at all

00:01:47,610 --> 00:01:52,110
interested in moving to the Netherlands

00:01:49,590 --> 00:01:55,350
I don't know why you might want to leave

00:01:52,110 --> 00:01:58,649
this country right now but if you're at

00:01:55,350 --> 00:02:00,810
all interested come and talk to me if

00:01:58,649 --> 00:02:02,430
you're worried well I have a family I

00:02:00,810 --> 00:02:05,009
couldn't do that I have a very big

00:02:02,430 --> 00:02:07,740
family six of us moved over there it

00:02:05,009 --> 00:02:09,330
worked it's it's possible so come talk

00:02:07,740 --> 00:02:13,500
to me if you're interested after

00:02:09,330 --> 00:02:16,290
talk please so that's enough of yeah

00:02:13,500 --> 00:02:19,920
sponsoring or I'm sorry they pay for my

00:02:16,290 --> 00:02:22,620
ticket so I have to do this so as I said

00:02:19,920 --> 00:02:25,230
my name is Stephen I respond to any

00:02:22,620 --> 00:02:26,910
variation on pronunciation of this name

00:02:25,230 --> 00:02:28,620
that's one of the fun things about

00:02:26,910 --> 00:02:32,040
working at booking is we have such a

00:02:28,620 --> 00:02:33,660
diverse group of people there that they

00:02:32,040 --> 00:02:36,470
all pronounce it all many different ways

00:02:33,660 --> 00:02:42,390
so I've just had to get used to it

00:02:36,470 --> 00:02:44,310
perfect thank you so this this talk is

00:02:42,390 --> 00:02:45,720
about something that I've been working

00:02:44,310 --> 00:02:48,900
on for a very very long time

00:02:45,720 --> 00:02:50,910
and it goes back to actually 2004 when I

00:02:48,900 --> 00:02:53,610
got involved in the pugs project which

00:02:50,910 --> 00:02:56,610
was sort of a Perl 6 on Haskell and I

00:02:53,610 --> 00:03:00,090
found myself drawn to the to the object

00:02:56,610 --> 00:03:02,370
system and and in particular the meta

00:03:00,090 --> 00:03:05,040
object system that would underlie the

00:03:02,370 --> 00:03:08,550
real object system there so it all

00:03:05,040 --> 00:03:11,400
started in 2004 in 2005 I wrote moose

00:03:08,550 --> 00:03:14,580
some of you may know this module and

00:03:11,400 --> 00:03:18,410
then in 2010 I started a project called

00:03:14,580 --> 00:03:21,570
p5 mop and the idea was to put together

00:03:18,410 --> 00:03:23,940
some of the nice parts of mousse and and

00:03:21,570 --> 00:03:26,580
basically rebuild them so that they'd be

00:03:23,940 --> 00:03:29,910
suitable for placement inside the core

00:03:26,580 --> 00:03:32,220
Perl 5 so I think Damian made a joke

00:03:29,910 --> 00:03:34,590
about installing mousse and stalls half

00:03:32,220 --> 00:03:36,000
of Sipan this has been a long joke

00:03:34,590 --> 00:03:40,140
wouldn't it be nice greeting you have to

00:03:36,000 --> 00:03:43,200
do that so that was the thought 2017

00:03:40,140 --> 00:03:44,220
you're about to see and hopefully in a

00:03:43,200 --> 00:03:45,540
couple years I'll be able to make some

00:03:44,220 --> 00:03:48,720
money off of this or something I don't

00:03:45,540 --> 00:03:50,760
know we'll see this project has been a

00:03:48,720 --> 00:03:52,980
long time going and it has gone through

00:03:50,760 --> 00:03:54,600
a lot of different basically I've got a

00:03:52,980 --> 00:04:01,230
ton of conference talks out of this

00:03:54,600 --> 00:04:03,630
thing so it started out as simply p5 mop

00:04:01,230 --> 00:04:05,250
there was a p5 mini mop because the p5

00:04:03,630 --> 00:04:07,019
mop was a little bit too complicated and

00:04:05,250 --> 00:04:10,230
actually we wanted to bootstrap the p5

00:04:07,019 --> 00:04:11,850
mop with a b5 mop but we needed mini mop

00:04:10,230 --> 00:04:14,010
to bootstrap yeah it gets really really

00:04:11,850 --> 00:04:17,729
crazy there it was not good it ended

00:04:14,010 --> 00:04:19,140
badly at some point well I went off into

00:04:17,729 --> 00:04:20,729
the woods and wrote something in Scala

00:04:19,140 --> 00:04:21,230
that was meant to be sort of like a Perl

00:04:20,729 --> 00:04:22,940
00:04:21,230 --> 00:04:24,790
half and I want to forget about that

00:04:22,940 --> 00:04:28,820
these days

00:04:24,790 --> 00:04:33,340
yes mo thank you p5 mop Redux was

00:04:28,820 --> 00:04:35,210
returning to it it's been I think I

00:04:33,340 --> 00:04:36,560
don't know there was like a year that

00:04:35,210 --> 00:04:38,390
I'd sort of walked away from it and then

00:04:36,560 --> 00:04:40,070
I sort of went and looked back at it and

00:04:38,390 --> 00:04:43,490
I had an inspiration so I started in

00:04:40,070 --> 00:04:45,350
again that also didn't really it kind of

00:04:43,490 --> 00:04:48,350
got far but it didn't get too far and

00:04:45,350 --> 00:04:50,750
what I realized was that I didn't know

00:04:48,350 --> 00:04:52,940
the Corporal well enough so I spent

00:04:50,750 --> 00:04:56,390
about a year learning C in excess and

00:04:52,940 --> 00:04:59,560
the core of Perl and I produced p5 mop

00:04:56,390 --> 00:05:01,940
XS which pretty much just seg faulted

00:04:59,560 --> 00:05:05,170
because a year is not long enough to

00:05:01,940 --> 00:05:08,000
learn all those things and then I

00:05:05,170 --> 00:05:10,070
jokingly named a repository this but it

00:05:08,000 --> 00:05:12,320
ended up sticking for a while and this

00:05:10,070 --> 00:05:19,510
actually was where the the what I

00:05:12,320 --> 00:05:19,510
believe is the final design package so

00:05:19,690 --> 00:05:24,770
so how many of you know what a mop is

00:05:22,250 --> 00:05:27,230
when I say this word okay there's a few

00:05:24,770 --> 00:05:30,110
people who don't so a mop is essentially

00:05:27,230 --> 00:05:32,870
an API around these things okay your

00:05:30,110 --> 00:05:35,510
classes your methods slots is the name

00:05:32,870 --> 00:05:36,620
in mousse they're called attributes but

00:05:35,510 --> 00:05:38,390
because I'm trying to put this into the

00:05:36,620 --> 00:05:39,680
Corporal and attributes as already name

00:05:38,390 --> 00:05:41,690
that's taken I had to come up with

00:05:39,680 --> 00:05:43,730
another one and I just stole it from

00:05:41,690 --> 00:05:46,850
Lisp which I steal a lot of things from

00:05:43,730 --> 00:05:49,130
us and we use slots and in instances

00:05:46,850 --> 00:05:51,320
it's important to notice the uppercase

00:05:49,130 --> 00:05:54,050
in front of each one of these okay these

00:05:51,320 --> 00:05:56,090
are proper nouns these aren't just a

00:05:54,050 --> 00:05:58,430
class keyword and a method keyword and

00:05:56,090 --> 00:06:01,730
stuff like that these are the objects

00:05:58,430 --> 00:06:03,370
that represent these things sometimes I

00:06:01,730 --> 00:06:10,540
actually like to explain it this way

00:06:03,370 --> 00:06:13,220
okay so an abstraction which is the mop

00:06:10,540 --> 00:06:16,970
that models a system of abstractions

00:06:13,220 --> 00:06:19,940
classes methods slots etc and it is used

00:06:16,970 --> 00:06:22,640
than build abstractions your classes

00:06:19,940 --> 00:06:24,980
okay my mother slaps me every time I

00:06:22,640 --> 00:06:27,630
tell her this when she asked me what I

00:06:24,980 --> 00:06:30,780
do at work all day

00:06:27,630 --> 00:06:32,970
but to her credit she actually totally

00:06:30,780 --> 00:06:36,870
gets this she was programming basic far

00:06:32,970 --> 00:06:39,780
before I was so so I had a few goals

00:06:36,870 --> 00:06:42,840
when I started this out first was state

00:06:39,780 --> 00:06:44,480
slash slot management this is something

00:06:42,840 --> 00:06:46,410
you have to do manually in pure Pro 5

00:06:44,480 --> 00:06:48,570
this is one of the big things that I

00:06:46,410 --> 00:06:50,490
wanted to make moose do and I wanted to

00:06:48,570 --> 00:06:52,610
bring this into the core I wanted us to

00:06:50,490 --> 00:06:56,190
stop having to worry about this

00:06:52,610 --> 00:06:58,110
inheriting your state etc etc etc I

00:06:56,190 --> 00:06:59,640
wanted to add support for roles roles

00:06:58,110 --> 00:07:01,530
are something that I really really like

00:06:59,640 --> 00:07:05,040
they're really really powerful mechanism

00:07:01,530 --> 00:07:07,520
Perl 6 has them moves brought them to

00:07:05,040 --> 00:07:09,810
Perl 5 but I wanted them in the core

00:07:07,520 --> 00:07:12,600
naturally I wanted an API a mop to

00:07:09,810 --> 00:07:17,040
introspect all of this and I wanted some

00:07:12,600 --> 00:07:21,180
sort of modernized syntax and not quite

00:07:17,040 --> 00:07:23,850
as far as they mean but but I did want

00:07:21,180 --> 00:07:27,870
something so I want to do a little

00:07:23,850 --> 00:07:31,350
digression here a few foz dims ago I was

00:07:27,870 --> 00:07:34,290
hanging out with Ricardo Cygnus and we

00:07:31,350 --> 00:07:36,990
went to a talk in the add a dev room how

00:07:34,290 --> 00:07:39,510
many of you know what a DES is we are in

00:07:36,990 --> 00:07:41,040
DC right so add up for those don't know

00:07:39,510 --> 00:07:43,950
a DES was a language developed by the

00:07:41,040 --> 00:07:45,810
Department of Defense I'm sure they did

00:07:43,950 --> 00:07:47,940
it in a very agile way there wasn't like

00:07:45,810 --> 00:07:50,310
years and years of committees and stuff

00:07:47,940 --> 00:07:51,600
like that who knows but it was actually

00:07:50,310 --> 00:07:53,400
language that I learned very early on

00:07:51,600 --> 00:07:54,810
and I actually enjoyed it I thought it

00:07:53,400 --> 00:07:56,580
was kind of interesting kind of neat and

00:07:54,810 --> 00:07:58,980
so Rick and I went to this thing and

00:07:56,580 --> 00:08:01,140
they described object orientation and

00:07:58,980 --> 00:08:02,640
adda as a design pattern and I never

00:08:01,140 --> 00:08:05,790
really thought about it but immediately

00:08:02,640 --> 00:08:08,190
when I thought about pearl and pearls oh

00:08:05,790 --> 00:08:11,340
that's in the core this made sense

00:08:08,190 --> 00:08:12,990
because a clasp is a package this is an

00:08:11,340 --> 00:08:15,990
agreed-upon convention that we were all

00:08:12,990 --> 00:08:18,210
cool with methods are just subroutines

00:08:15,990 --> 00:08:20,790
okay we're not calling the same thing we

00:08:18,210 --> 00:08:23,460
just a yeah cool it works inheritance is

00:08:20,790 --> 00:08:25,320
through our is a-- this is all

00:08:23,460 --> 00:08:27,360
convention I mean the interpreter yes

00:08:25,320 --> 00:08:28,830
does special things with these with

00:08:27,360 --> 00:08:32,690
these certain things but it's generally

00:08:28,830 --> 00:08:35,039
convention blessing is a constructor

00:08:32,690 --> 00:08:37,410
what the rest of the world calls a

00:08:35,039 --> 00:08:38,660
method send operator we call it

00:08:37,410 --> 00:08:44,210
something different

00:08:38,660 --> 00:08:46,190
and so those those existed in Pearl well

00:08:44,210 --> 00:08:49,360
since Larry put them in there in the

00:08:46,190 --> 00:08:51,830
first place so I would like to humbly

00:08:49,360 --> 00:08:56,570
propose an addition of a few other

00:08:51,830 --> 00:08:58,790
conventions first slots so the the

00:08:56,570 --> 00:09:01,340
entries you want to have in your class

00:08:58,790 --> 00:09:03,260
the name of them and then something to

00:09:01,340 --> 00:09:06,590
initialize them you can put them inside

00:09:03,260 --> 00:09:07,730
our hats okay it's a hash ref it sits at

00:09:06,590 --> 00:09:11,000
the package level and you'll see

00:09:07,730 --> 00:09:12,410
examples of how this works rolls I

00:09:11,000 --> 00:09:14,150
didn't want to be anything special I

00:09:12,410 --> 00:09:16,550
actually wanted them to just be packages

00:09:14,150 --> 00:09:19,460
to we're comfortable with packages and

00:09:16,550 --> 00:09:21,710
classes rolls and packages and and if we

00:09:19,460 --> 00:09:23,270
look at Pearl six and their roles roles

00:09:21,710 --> 00:09:23,750
and classes are fairly interchangeable

00:09:23,270 --> 00:09:27,470
as well

00:09:23,750 --> 00:09:29,840
so I wanted to bring that as well how do

00:09:27,470 --> 00:09:30,080
you compose a role well cheese we got is

00:09:29,840 --> 00:09:32,930
a--

00:09:30,080 --> 00:09:35,050
we could just use duds we already have a

00:09:32,930 --> 00:09:37,730
convention for does with universal does

00:09:35,050 --> 00:09:41,810
which I believe chromatic added a long

00:09:37,730 --> 00:09:44,510
time or a couple years ago but it seems

00:09:41,810 --> 00:09:47,360
natural and then also I noticed a couple

00:09:44,510 --> 00:09:49,190
things so in in roles you have a concept

00:09:47,360 --> 00:09:52,940
of a required method essentially an

00:09:49,190 --> 00:09:56,780
abstract method that you want the the

00:09:52,940 --> 00:09:58,790
consuming class to fulfill we already

00:09:56,780 --> 00:10:02,000
have methods that have no bodies we have

00:09:58,790 --> 00:10:04,310
a clean simple way to do that so these

00:10:02,000 --> 00:10:06,380
these are basically exist well they're

00:10:04,310 --> 00:10:07,430
they're sort of variations on existing

00:10:06,380 --> 00:10:11,750
things that are already in the core

00:10:07,430 --> 00:10:14,180
language and I have now built a set of

00:10:11,750 --> 00:10:18,350
modules that builds on top of this idea

00:10:14,180 --> 00:10:21,590
so in some ways my mop proposal has no

00:10:18,350 --> 00:10:24,110
code at all you just saw it it's just

00:10:21,590 --> 00:10:26,210
changing or just changing the use of a

00:10:24,110 --> 00:10:28,430
few things you actually do need some

00:10:26,210 --> 00:10:30,250
code to make this all work but it's it's

00:10:28,430 --> 00:10:35,450
basically that that level of simplicity

00:10:30,250 --> 00:10:37,910
so this talk I've gone over every time I

00:10:35,450 --> 00:10:39,680
did it it's got a lot of information

00:10:37,910 --> 00:10:41,510
there's a lot of code there's a high

00:10:39,680 --> 00:10:43,420
density to it I'm going to run you

00:10:41,510 --> 00:10:47,080
through like six Sipan modules

00:10:43,420 --> 00:10:51,270
potentially release one at the end

00:10:47,080 --> 00:10:52,780
and if so I'm going to go quick

00:10:51,270 --> 00:10:54,520
hopefully I'll have some time for

00:10:52,780 --> 00:10:56,680
questions at the end if not I will be up

00:10:54,520 --> 00:10:58,810
there for questions what I'm trying to

00:10:56,680 --> 00:11:00,130
do is show you guys where where I'm at

00:10:58,810 --> 00:11:01,600
with this work and I need people to

00:11:00,130 --> 00:11:03,510
start using it and testing it and

00:11:01,600 --> 00:11:06,010
playing with it and giving me feedback

00:11:03,510 --> 00:11:08,260
so as I said it's going to be quick it's

00:11:06,010 --> 00:11:11,230
going to be dense feel free to come ask

00:11:08,260 --> 00:11:12,790
me questions afterwards so I'm splitting

00:11:11,230 --> 00:11:15,190
this into three categories to try and

00:11:12,790 --> 00:11:17,620
make a little bit easier there's a core

00:11:15,190 --> 00:11:20,140
protocols infrastructure Thank You

00:11:17,620 --> 00:11:25,240
Damien for that word I never thought of

00:11:20,140 --> 00:11:30,090
it that way and then syntax so ready to

00:11:25,240 --> 00:11:33,490
go core first module universal object

00:11:30,090 --> 00:11:35,850
this is on Sipan now and what this

00:11:33,490 --> 00:11:38,080
basically does is it gives you a

00:11:35,850 --> 00:11:42,040
construction and destruction protocol

00:11:38,080 --> 00:11:45,430
for your objects you call new it calls

00:11:42,040 --> 00:11:47,050
build destroy gets called it calls

00:11:45,430 --> 00:11:49,720
demolish this is something this is very

00:11:47,050 --> 00:11:51,400
much Perl 6 this is also something we we

00:11:49,720 --> 00:11:52,690
brought into moose and there's a number

00:11:51,400 --> 00:11:55,720
of other little bits in there but

00:11:52,690 --> 00:11:58,600
essentially with a website and it's all

00:11:55,720 --> 00:12:00,250
built on the idea of has is where you

00:11:58,600 --> 00:12:04,090
have your slots because one of the

00:12:00,250 --> 00:12:05,950
problems with Perl 5 if you want to you

00:12:04,090 --> 00:12:08,320
can easily inherit a constructor because

00:12:05,950 --> 00:12:10,750
your constructor has no idea what you

00:12:08,320 --> 00:12:12,940
want your class to look like so we all

00:12:10,750 --> 00:12:16,600
had to write our own new to build our

00:12:12,940 --> 00:12:18,340
own instance in some way if you put this

00:12:16,600 --> 00:12:20,140
information somewhere then you don't

00:12:18,340 --> 00:12:22,720
actually need to write your own

00:12:20,140 --> 00:12:24,130
constructor the language can figure this

00:12:22,720 --> 00:12:25,540
out for you because it has all the

00:12:24,130 --> 00:12:29,380
information it needs to construct a

00:12:25,540 --> 00:12:31,840
proper object I've stolen a ton of crap

00:12:29,380 --> 00:12:35,350
from Perl 6 over the years like a ton

00:12:31,840 --> 00:12:36,970
and this is no different although I'm

00:12:35,350 --> 00:12:39,370
not entirely sure that I'm still in line

00:12:36,970 --> 00:12:41,800
with with what Perl 6 does but

00:12:39,370 --> 00:12:44,970
essentially new will call a method

00:12:41,800 --> 00:12:47,020
called bless bless will take the

00:12:44,970 --> 00:12:49,330
prototypical instance which is basically

00:12:47,020 --> 00:12:52,090
the key value arts that you passed it

00:12:49,330 --> 00:12:54,280
will then call create create will then

00:12:52,090 --> 00:12:55,990
with that prototype call to other

00:12:54,280 --> 00:12:57,820
methods wrapper to get the

00:12:55,990 --> 00:12:59,040
representation of the object which is a

00:12:57,820 --> 00:13:01,380
hash ref

00:12:59,040 --> 00:13:04,079
typically and slots to get the

00:13:01,380 --> 00:13:06,360
information about the slots so this all

00:13:04,079 --> 00:13:08,190
works together and everything plays nice

00:13:06,360 --> 00:13:09,480
together but these are all and this may

00:13:08,190 --> 00:13:12,930
look a little bit excessive but these

00:13:09,480 --> 00:13:14,790
are extension points if you want to for

00:13:12,930 --> 00:13:17,010
instance if you want to inherit a class

00:13:14,790 --> 00:13:19,230
and you don't have control of the

00:13:17,010 --> 00:13:22,019
constructor you essentially use the

00:13:19,230 --> 00:13:23,610
wrapper and you instead of returning a

00:13:22,019 --> 00:13:25,889
hash ref you essentially call that

00:13:23,610 --> 00:13:27,510
inherited constructor and then it gets

00:13:25,889 --> 00:13:29,010
pat as it gets passed back through it

00:13:27,510 --> 00:13:31,709
gets blessed into your proper class but

00:13:29,010 --> 00:13:34,470
you use the original constructor to to

00:13:31,709 --> 00:13:36,690
build the instance anybody this is also

00:13:34,470 --> 00:13:39,410
a very common pattern in perl 5 as it is

00:13:36,690 --> 00:13:41,850
right now just sort of codified there

00:13:39,410 --> 00:13:43,829
and there's other extension points again

00:13:41,850 --> 00:13:46,170
if you go through the test suite you'll

00:13:43,829 --> 00:13:50,850
see where all they are so what does this

00:13:46,170 --> 00:13:54,720
look like really awesome modern sexy

00:13:50,850 --> 00:13:56,279
syntax right right people right no it's

00:13:54,720 --> 00:13:58,620
not it's not meant to be that this is

00:13:56,279 --> 00:14:00,709
low-level this is this is as simple as

00:13:58,620 --> 00:14:03,600
it could possibly be so you assigned to

00:14:00,709 --> 00:14:05,699
universal object and then has as I was

00:14:03,600 --> 00:14:09,620
saying before let's see if this works

00:14:05,699 --> 00:14:12,389
here I can carry this can i woohoo

00:14:09,620 --> 00:14:13,880
those are the names and that's the

00:14:12,389 --> 00:14:15,690
initializer it's just that simple

00:14:13,880 --> 00:14:17,970
nothing more nothing less

00:14:15,690 --> 00:14:19,529
and then the universal object

00:14:17,970 --> 00:14:23,940
constructor will figure out how to put

00:14:19,529 --> 00:14:26,399
all that stuff together and essentially

00:14:23,940 --> 00:14:29,370
construct your object so that sounds all

00:14:26,399 --> 00:14:33,690
well and good right now we want to

00:14:29,370 --> 00:14:36,600
subclass it inheritance take a look at

00:14:33,690 --> 00:14:39,660
that for a second that's all it is ok it

00:14:36,600 --> 00:14:41,670
just because lists or hashes flatten it

00:14:39,660 --> 00:14:44,089
just goes right in there and all the

00:14:41,670 --> 00:14:47,040
slots are properly inherited

00:14:44,089 --> 00:14:49,440
additionally I actually know which ones

00:14:47,040 --> 00:14:53,190
are inherited because Perl actually

00:14:49,440 --> 00:14:55,019
those sub refs deep underneath know what

00:14:53,190 --> 00:14:57,089
package they originally compiled in and

00:14:55,019 --> 00:14:58,440
I can introspect that so I can see which

00:14:57,089 --> 00:15:00,660
ones you inherit in which ones you can

00:14:58,440 --> 00:15:03,930
you'll see more of that in the mop but

00:15:00,660 --> 00:15:06,269
essentially this gives us slots and a

00:15:03,930 --> 00:15:09,329
way to and a simple pattern for

00:15:06,269 --> 00:15:12,140
inheritance ok nothing fancy nobody

00:15:09,329 --> 00:15:14,540
should be getting excited at all

00:15:12,140 --> 00:15:18,080
but very low level we're building a

00:15:14,540 --> 00:15:19,760
layer by layer here I also recently

00:15:18,080 --> 00:15:22,040
added in something because I found a use

00:15:19,760 --> 00:15:24,680
for it and I really wanted it immutable

00:15:22,040 --> 00:15:27,500
classes all this does is it locks your

00:15:24,680 --> 00:15:29,780
hash ref or it makes your SB or your

00:15:27,500 --> 00:15:32,270
scalar real read-only or your your array

00:15:29,780 --> 00:15:34,100
read-only or if you're making an object

00:15:32,270 --> 00:15:35,660
with something other than those three

00:15:34,100 --> 00:15:37,430
things it just blows up and says what's

00:15:35,660 --> 00:15:40,940
wrong with you are you Damien or

00:15:37,430 --> 00:15:42,770
something so but that basically means

00:15:40,940 --> 00:15:45,440
that if I try to assign to that X it'll

00:15:42,770 --> 00:15:47,750
die this is very useful it doesn't

00:15:45,440 --> 00:15:49,310
optimize anything now but now we're

00:15:47,750 --> 00:15:51,490
declaring that we would be happy if you

00:15:49,310 --> 00:15:53,750
were to optimize this at a later point

00:15:51,490 --> 00:15:55,910
but it's also very useful I mean just

00:15:53,750 --> 00:15:57,860
the idea of immutable objects themselves

00:15:55,910 --> 00:16:00,020
are catching on a number of different

00:15:57,860 --> 00:16:03,730
languages it helps you reason about the

00:16:00,020 --> 00:16:10,010
code as well as as potentially as or

00:16:03,730 --> 00:16:12,080
optimizations so this is so awesome it's

00:16:10,010 --> 00:16:17,570
five six back compatible who here still

00:16:12,080 --> 00:16:21,440
uses five six what okay I didn't intend

00:16:17,570 --> 00:16:25,100
that I didn't actually intend the back

00:16:21,440 --> 00:16:26,930
compatibility it just happened but I and

00:16:25,100 --> 00:16:28,280
I'm and I'm super proud of the fact that

00:16:26,930 --> 00:16:29,390
every time I ask that question there's

00:16:28,280 --> 00:16:31,370
no hands raised

00:16:29,390 --> 00:16:33,020
I think ribah sushi raised his hand

00:16:31,370 --> 00:16:34,670
wanted it at a meeting but but other

00:16:33,020 --> 00:16:38,240
than that nobody else raised their hands

00:16:34,670 --> 00:16:39,740
so whoo we're moving forward so that's

00:16:38,240 --> 00:16:41,330
Universal objects it's pretty

00:16:39,740 --> 00:16:43,310
straightforward it's pretty simple it's

00:16:41,330 --> 00:16:45,410
very very well tested at this point

00:16:43,310 --> 00:16:47,840
because it inherited all the tests of

00:16:45,410 --> 00:16:51,170
all those other repositories that I

00:16:47,840 --> 00:16:52,910
showed before so that's one protocol

00:16:51,170 --> 00:16:55,070
that is the core what I like to call the

00:16:52,910 --> 00:16:56,570
the instance protocol so it's it's

00:16:55,070 --> 00:16:57,830
constructing your object and d-struct on

00:16:56,570 --> 00:17:00,860
your object that's all it cares about

00:16:57,830 --> 00:17:04,040
doesn't care about anything else for the

00:17:00,860 --> 00:17:06,620
other stuff we have mop this is on see

00:17:04,040 --> 00:17:08,720
Banias mop I actually had to track down

00:17:06,620 --> 00:17:11,150
a guy I think he's in France or

00:17:08,720 --> 00:17:14,270
Switzerland or something like that who

00:17:11,150 --> 00:17:16,220
had uploaded a mop module in 98 or

00:17:14,270 --> 00:17:17,390
something like that like there was a

00:17:16,220 --> 00:17:20,540
whole drama because he couldn't even

00:17:17,390 --> 00:17:22,940
find the laptop that had the pause ID on

00:17:20,540 --> 00:17:25,820
it we had to get the admins involved but

00:17:22,940 --> 00:17:28,940
I got the namespace so

00:17:25,820 --> 00:17:32,270
mahp is basically those conventions an

00:17:28,940 --> 00:17:33,800
API that follows those conventions it is

00:17:32,270 --> 00:17:35,510
all based on Universal objects of an

00:17:33,800 --> 00:17:37,730
inherit all the all the instances

00:17:35,510 --> 00:17:40,550
inherit from universal object following

00:17:37,730 --> 00:17:42,800
these conventions it stores no state in

00:17:40,550 --> 00:17:44,720
itself so one of the big things one of

00:17:42,800 --> 00:17:46,790
the big problems with mousse always has

00:17:44,720 --> 00:17:48,950
been that meta objects were very

00:17:46,790 --> 00:17:50,690
expensive to create that is what when

00:17:48,950 --> 00:17:52,790
everybody talks about how slow mousse is

00:17:50,690 --> 00:17:55,070
startup is it's because it's creating a

00:17:52,790 --> 00:17:56,540
whole boatload of meta objects and of

00:17:55,070 --> 00:17:59,840
course using your memory and using your

00:17:56,540 --> 00:18:02,840
CPU and all this stuff I didn't want to

00:17:59,840 --> 00:18:05,180
repeat that mistake so these classes

00:18:02,840 --> 00:18:07,400
these mob classes are completely States

00:18:05,180 --> 00:18:11,270
stateless all their stuff is stored in

00:18:07,400 --> 00:18:14,300
the stash the package stash or stored in

00:18:11,270 --> 00:18:17,300
the the internal CV which is the code

00:18:14,300 --> 00:18:19,400
value for a method or any other place

00:18:17,300 --> 00:18:20,900
like that so I did my best to avoid all

00:18:19,400 --> 00:18:24,100
this stuff I can't take questions

00:18:20,900 --> 00:18:26,930
because I got too much information later

00:18:24,100 --> 00:18:27,950
there also minimal overhead you can make

00:18:26,930 --> 00:18:29,300
them and you create them they're not

00:18:27,950 --> 00:18:31,370
meant to be stuck to stick around

00:18:29,300 --> 00:18:33,170
because they're really just they just

00:18:31,370 --> 00:18:35,780
bless the thing that they're

00:18:33,170 --> 00:18:37,430
introspecting in the case of the stash

00:18:35,780 --> 00:18:40,010
it blesses a rep of a ref of the stash

00:18:37,430 --> 00:18:41,720
if you want to know why ask me later but

00:18:40,010 --> 00:18:43,190
you can build them really easy they're

00:18:41,720 --> 00:18:45,290
very low overhead you throw them away

00:18:43,190 --> 00:18:47,120
when you don't need them anymore and

00:18:45,290 --> 00:18:49,130
itself it only builds them at the very

00:18:47,120 --> 00:18:52,460
last minute there so it doesn't best to

00:18:49,130 --> 00:18:54,200
completely reduce the overhead and as I

00:18:52,460 --> 00:18:56,510
said before it borrows on this

00:18:54,200 --> 00:18:58,370
convention so inheritance information is

00:18:56,510 --> 00:19:00,310
stored in izi because it's already there

00:18:58,370 --> 00:19:02,720
so that's where we go to look for it

00:19:00,310 --> 00:19:04,460
your methods are stored in the package -

00:19:02,720 --> 00:19:06,200
so we will look for them there your

00:19:04,460 --> 00:19:08,450
roles are stored and it does your slot

00:19:06,200 --> 00:19:10,940
information in the Hat so it's all there

00:19:08,450 --> 00:19:13,700
in theory and I haven't tested this

00:19:10,940 --> 00:19:16,400
theory very well if modules like mousse

00:19:13,700 --> 00:19:18,970
and mop and mojo base and class accessor

00:19:16,400 --> 00:19:22,370
and all these other modules that we use

00:19:18,970 --> 00:19:23,870
follows these base level conventions by

00:19:22,370 --> 00:19:26,750
storing their information in these

00:19:23,870 --> 00:19:28,640
places in theory we'll have a nice level

00:19:26,750 --> 00:19:30,230
of compatibility across all of them at

00:19:28,640 --> 00:19:31,880
the very least the map will be able to

00:19:30,230 --> 00:19:34,790
this map will be able to introspect them

00:19:31,880 --> 00:19:36,830
with with no problem so I do have to

00:19:34,790 --> 00:19:39,250
test that theory I would love help on

00:19:36,830 --> 00:19:43,580
testing the theory if people want to

00:19:39,250 --> 00:19:46,100
but so we saw this before okay one of

00:19:43,580 --> 00:19:50,570
the Annoying bits about this is having

00:19:46,100 --> 00:19:52,220
to do that right okay because I already

00:19:50,570 --> 00:19:53,360
said I wanted point when I inherited

00:19:52,220 --> 00:19:55,820
from it and now I've got a right point

00:19:53,360 --> 00:19:59,900
again there's an opening for a typo etc

00:19:55,820 --> 00:20:02,900
etc so the mom you can do this now this

00:19:59,900 --> 00:20:04,850
looks like a lot of stuff but you can

00:20:02,900 --> 00:20:07,940
hide this somewhere but it's quite

00:20:04,850 --> 00:20:08,870
simple you have a class you create it

00:20:07,940 --> 00:20:10,840
and that's all you have to do to create

00:20:08,870 --> 00:20:14,240
a mop class and you have a meta object

00:20:10,840 --> 00:20:17,240
everybody should be using a what we call

00:20:14,240 --> 00:20:18,980
it the postfix DRF but we use that will

00:20:17,240 --> 00:20:21,140
go through the MRL and we'll build will

00:20:18,980 --> 00:20:22,640
build basically all the super objects

00:20:21,140 --> 00:20:25,160
that we have and then we look through

00:20:22,640 --> 00:20:26,600
that we grab all those slots and then as

00:20:25,160 --> 00:20:28,490
long as there isn't a slot that already

00:20:26,600 --> 00:20:29,990
exists there we put this in there and it

00:20:28,490 --> 00:20:33,470
basically gives the exact same behavior

00:20:29,990 --> 00:20:35,000
of merging those hashes of course this

00:20:33,470 --> 00:20:36,920
is a lot more expensive because there's

00:20:35,000 --> 00:20:39,260
code here and the other one there's just

00:20:36,920 --> 00:20:41,210
purl but you can choose and that's

00:20:39,260 --> 00:20:45,500
that's part of why I split all this up

00:20:41,210 --> 00:20:47,150
is because then you can choose you can

00:20:45,500 --> 00:20:49,700
choose how much of this you care about

00:20:47,150 --> 00:20:51,920
and how much you want to use and in your

00:20:49,700 --> 00:20:53,570
environment whether you want to take any

00:20:51,920 --> 00:20:55,040
of the expense or not have the expense

00:20:53,570 --> 00:20:57,290
this was something we did design into

00:20:55,040 --> 00:20:59,000
moose but it still had a base level

00:20:57,290 --> 00:21:02,000
overhead so I'm trying to eliminate that

00:20:59,000 --> 00:21:04,970
base level overhead here so the mob has

00:21:02,000 --> 00:21:07,670
a ton more stuff in it but it's

00:21:04,970 --> 00:21:11,270
essentially just an API to those

00:21:07,670 --> 00:21:12,800
concepts that we talked about so yeah

00:21:11,270 --> 00:21:15,740
it's kind of boring to present to be

00:21:12,800 --> 00:21:18,800
honest so those are the base level

00:21:15,740 --> 00:21:22,400
protocols from here everything from here

00:21:18,800 --> 00:21:24,140
we build on top of it or I'm sorry from

00:21:22,400 --> 00:21:26,720
here we build everything else on top of

00:21:24,140 --> 00:21:30,020
it um this means you can build what you

00:21:26,720 --> 00:21:31,490
want on top of this and again in theory

00:21:30,020 --> 00:21:33,230
if we're all building on top of the same

00:21:31,490 --> 00:21:36,700
thing we all have some base level of

00:21:33,230 --> 00:21:40,730
compatibility going on on some level so

00:21:36,700 --> 00:21:43,340
if you remember before I had I wanted

00:21:40,730 --> 00:21:45,410
some nice fancy syntax okay I also

00:21:43,340 --> 00:21:47,270
wanted things like roll composition roll

00:21:45,410 --> 00:21:48,830
composition is actually a tricky thing

00:21:47,270 --> 00:21:50,330
and it's a very tricky thing in moose

00:21:48,830 --> 00:21:53,000
particularly

00:21:50,330 --> 00:21:55,010
because mousse basically tries tries to

00:21:53,000 --> 00:21:56,960
keep remaining open tries to keep

00:21:55,010 --> 00:22:00,440
allowing you to be able to add to the

00:21:56,960 --> 00:22:02,840
classes as you go and and does a lot of

00:22:00,440 --> 00:22:06,529
sort of dances to make sure that it

00:22:02,840 --> 00:22:07,460
doesn't that you can still add to your

00:22:06,529 --> 00:22:10,039
to your object

00:22:07,460 --> 00:22:11,750
not until you do the make a mutable call

00:22:10,039 --> 00:22:13,669
or something like that at the bottom of

00:22:11,750 --> 00:22:16,279
your thing then moo says okay we're done

00:22:13,669 --> 00:22:19,490
now I can start doing stuff but moves

00:22:16,279 --> 00:22:24,620
actually wastes a lot of time trying to

00:22:19,490 --> 00:22:26,750
allow you trying to not its best weight

00:22:24,620 --> 00:22:29,389
but it wastes a lot of time basically

00:22:26,750 --> 00:22:32,230
allowing you to continue altering this

00:22:29,389 --> 00:22:34,039
object and but at any point in time

00:22:32,230 --> 00:22:35,360
expecting you to probably stop because

00:22:34,039 --> 00:22:36,320
there's no way for me to know that

00:22:35,360 --> 00:22:39,980
you're done

00:22:36,320 --> 00:22:41,059
so I created a couple modules that help

00:22:39,980 --> 00:22:42,380
me with that

00:22:41,059 --> 00:22:43,340
these I would actually really like to

00:22:42,380 --> 00:22:45,769
see in core because I think they're

00:22:43,340 --> 00:22:48,139
really useful so I wrote one called B

00:22:45,769 --> 00:22:50,000
compiler face hook we all know begin

00:22:48,139 --> 00:22:52,460
blocks check blocks and it blocks you to

00:22:50,000 --> 00:22:55,669
check blocks etc etc cutter how many of

00:22:52,460 --> 00:23:00,440
you knew that internally those are all

00:22:55,669 --> 00:23:02,960
just a rays of code reps two three four

00:23:00,440 --> 00:23:05,330
okay and pull people um that's all they

00:23:02,960 --> 00:23:07,190
are there's a module called develop that

00:23:05,330 --> 00:23:09,950
has tons of disclaimers about how you

00:23:07,190 --> 00:23:12,350
will destroy the world if you use it but

00:23:09,950 --> 00:23:14,529
it gives it gives us it gives you access

00:23:12,350 --> 00:23:16,820
to just pushing onto these things I

00:23:14,529 --> 00:23:18,620
rewrote it because I didn't want

00:23:16,820 --> 00:23:20,809
something that would destroy the world

00:23:18,620 --> 00:23:23,000
if you if you used it wrong and I wanted

00:23:20,809 --> 00:23:25,159
to make sure it was being constrained a

00:23:23,000 --> 00:23:27,139
certain set of usages but I basically

00:23:25,159 --> 00:23:29,919
wrote something that does this and you

00:23:27,139 --> 00:23:34,730
can Inc you something for the next phase

00:23:29,919 --> 00:23:36,409
so this is a quick simple example you're

00:23:34,730 --> 00:23:39,260
in an import you're assuming you're

00:23:36,409 --> 00:23:42,049
inside a begin because you base

00:23:39,260 --> 00:23:43,760
somebody's used your module and you do

00:23:42,049 --> 00:23:45,860
some stuff and your inheritance or

00:23:43,760 --> 00:23:49,159
initialize some stuff but you need to do

00:23:45,860 --> 00:23:51,049
something later you in queue a check you

00:23:49,159 --> 00:23:51,830
and cue it in it you in queue a unit

00:23:51,049 --> 00:23:53,510
checks um

00:23:51,830 --> 00:23:55,130
this basically gives you the ability of

00:23:53,510 --> 00:23:58,039
what what's sometimes referred to as

00:23:55,130 --> 00:24:02,119
multi-phase programming there are some

00:23:58,039 --> 00:24:04,819
languages that lists macros are

00:24:02,119 --> 00:24:06,649
sort of example of it it's a phase

00:24:04,819 --> 00:24:09,199
before the run time where you can do

00:24:06,649 --> 00:24:10,849
stuff Pearl has all these phases but

00:24:09,199 --> 00:24:12,979
they're a little bit difficult to do

00:24:10,849 --> 00:24:17,389
from a dynamic point of view this gives

00:24:12,979 --> 00:24:20,239
you that ability damien likes his

00:24:17,389 --> 00:24:22,849
keywords we all saw how he how little

00:24:20,239 --> 00:24:26,209
effort he put into his simple simple

00:24:22,849 --> 00:24:29,869
solution come to have his three little

00:24:26,209 --> 00:24:32,179
words I don't have nearly that much

00:24:29,869 --> 00:24:34,849
patience or time on my hands I have four

00:24:32,179 --> 00:24:37,129
children in a small dog and a job I

00:24:34,849 --> 00:24:39,409
didn't have like time to spend six

00:24:37,129 --> 00:24:41,449
months on one focus on one thing so I

00:24:39,409 --> 00:24:43,549
just stole some other code from Sipan

00:24:41,449 --> 00:24:47,869
again and modified it for my own

00:24:43,549 --> 00:24:50,869
nefarious purposes so begin lift it's

00:24:47,869 --> 00:24:55,519
much more much less ambitious than what

00:24:50,869 --> 00:25:00,169
Damien's work did it just it allows you

00:24:55,519 --> 00:25:02,569
to export a word a keyword and have it

00:25:00,169 --> 00:25:04,639
as soon as it is parsed it gets called

00:25:02,569 --> 00:25:08,179
back there there's a execute a call back

00:25:04,639 --> 00:25:10,699
and then it registers through the B

00:25:08,179 --> 00:25:12,889
compiler hook in the unit check - then

00:25:10,699 --> 00:25:15,709
remove itself so essentially it allows

00:25:12,889 --> 00:25:18,559
you to expand a macro ish type of thing

00:25:15,709 --> 00:25:20,959
have a call back and then remove any

00:25:18,559 --> 00:25:22,579
evidence that you had keyword there or

00:25:20,959 --> 00:25:25,089
anything like that even removing it out

00:25:22,579 --> 00:25:27,799
of the stash etcetera etcetera etcetera

00:25:25,089 --> 00:25:30,679
so here's a quick example if you wanted

00:25:27,799 --> 00:25:33,679
to do a moose a like module you wanted

00:25:30,679 --> 00:25:36,709
to with an extend keyword that pushes on

00:25:33,679 --> 00:25:38,329
to is ax or rather assigns is ax and

00:25:36,709 --> 00:25:40,519
then you would have something like this

00:25:38,329 --> 00:25:42,739
and it is functionally equivalent to

00:25:40,519 --> 00:25:45,109
saying begin is ax and putting the bar

00:25:42,739 --> 00:25:46,309
on there I might be lying here it might

00:25:45,109 --> 00:25:47,749
not be a hundred percent functional

00:25:46,309 --> 00:25:51,099
equivalent but it's close enough that

00:25:47,749 --> 00:25:54,649
you probably shouldn't have to care and

00:25:51,099 --> 00:25:56,569
pretty much just this much code I should

00:25:54,649 --> 00:25:58,609
be afraid of see Damian probably

00:25:56,569 --> 00:26:00,739
shouldn't but I should but I decided to

00:25:58,609 --> 00:26:03,679
go with the C it's much simpler it also

00:26:00,739 --> 00:26:06,079
uses I forget exactly I think it's 514 -

00:26:03,679 --> 00:26:08,539
is the the lowest possibility for this

00:26:06,079 --> 00:26:10,689
one so anyway these are infrastructure

00:26:08,539 --> 00:26:12,859
modules they're not terribly interesting

00:26:10,689 --> 00:26:14,679
this is one that I do find interesting

00:26:12,859 --> 00:26:17,499
method traits

00:26:14,679 --> 00:26:19,929
it's sort of like Perl six traits it's

00:26:17,499 --> 00:26:22,149
kind of like Python decorators and it's

00:26:19,929 --> 00:26:24,779
almost the same as Java annotations but

00:26:22,149 --> 00:26:26,769
really it's a case for code attributes

00:26:24,779 --> 00:26:29,860
so how many of you know what code

00:26:26,769 --> 00:26:31,330
attributes are okay those who don't know

00:26:29,860 --> 00:26:33,820
what I'm talking about is like with

00:26:31,330 --> 00:26:37,720
catalyst they have the here it's easier

00:26:33,820 --> 00:26:39,340
to show these things at the end of end

00:26:37,720 --> 00:26:41,409
of your subroutines okay

00:26:39,340 --> 00:26:43,480
the API for them is really weird it's

00:26:41,409 --> 00:26:45,159
really awkward there's like you have to

00:26:43,480 --> 00:26:47,169
have methods in your class there's all

00:26:45,159 --> 00:26:49,499
sorts of silliness they're really hard

00:26:47,169 --> 00:26:53,080
to use most people who actually use them

00:26:49,499 --> 00:26:55,240
end up cutting out their own eyes and

00:26:53,080 --> 00:26:56,320
moving and living on a mountaintop or

00:26:55,240 --> 00:26:59,440
something like that because it's so

00:26:56,320 --> 00:27:00,700
horrible so I I fell in love with Java

00:26:59,440 --> 00:27:01,779
annotations and I wanted to bring them

00:27:00,700 --> 00:27:07,690
into Perl and this seemed like a

00:27:01,779 --> 00:27:08,950
sensible place to do it so this we're

00:27:07,690 --> 00:27:10,809
using again the pre declared methods

00:27:08,950 --> 00:27:13,619
because you're basically asking me to

00:27:10,809 --> 00:27:15,700
generate the method body for you and

00:27:13,619 --> 00:27:16,899
that's how you do it

00:27:15,700 --> 00:27:18,190
so there's a little bit of other

00:27:16,899 --> 00:27:20,259
infrastructure that I'm sort of leaving

00:27:18,190 --> 00:27:22,740
out here but the idea is keep it really

00:27:20,259 --> 00:27:29,470
simple we're building again on the mop

00:27:22,740 --> 00:27:33,039
so that the meta is a meta class object

00:27:29,470 --> 00:27:34,119
method name is oh actually sorry that

00:27:33,039 --> 00:27:36,940
shouldn't be method name anymore it's

00:27:34,119 --> 00:27:38,259
actual meta object and then whatever

00:27:36,940 --> 00:27:42,519
else you had in there so if you remember

00:27:38,259 --> 00:27:44,710
in the previous slide the type the type

00:27:42,519 --> 00:27:48,159
was ro there and then the slot name

00:27:44,710 --> 00:27:49,119
there with the X and the y so it's it's

00:27:48,159 --> 00:27:50,710
pretty straightforward I'm not going to

00:27:49,119 --> 00:27:52,210
sit on this slide for too long but it's

00:27:50,710 --> 00:27:53,830
pretty easy to build these things and

00:27:52,210 --> 00:27:55,659
then you can go back and introspect them

00:27:53,830 --> 00:27:56,919
and stuff like that so you can see all

00:27:55,659 --> 00:27:59,379
the bits and pieces that they actually

00:27:56,919 --> 00:28:00,820
have underneath and it'll tell you all

00:27:59,379 --> 00:28:03,220
that stuff and then you can get even

00:28:00,820 --> 00:28:06,700
weirder and fun with them and this I

00:28:03,220 --> 00:28:08,259
really like Matt trout like squealed

00:28:06,700 --> 00:28:10,570
with glee when I showed him this I don't

00:28:08,259 --> 00:28:14,210
quite know why but it was it was

00:28:10,570 --> 00:28:16,970
disturbing really actually to be honest

00:28:14,210 --> 00:28:19,250
but you can see you can begin to attach

00:28:16,970 --> 00:28:22,700
all this metadata to your methods and

00:28:19,250 --> 00:28:24,320
this is a powerful tool because it's

00:28:22,700 --> 00:28:27,320
metadata we can do all sorts of stuff

00:28:24,320 --> 00:28:29,840
with it in particular there's the

00:28:27,320 --> 00:28:31,670
implementation of that get up I'm just

00:28:29,840 --> 00:28:33,020
letting it store the metadata there I

00:28:31,670 --> 00:28:35,000
don't actually want to do anything at

00:28:33,020 --> 00:28:36,290
that moment in time because in reality

00:28:35,000 --> 00:28:37,910
it's not until I actually construct the

00:28:36,290 --> 00:28:40,040
class or until I'm trying to actually

00:28:37,910 --> 00:28:41,570
get those arguments off the command line

00:28:40,040 --> 00:28:43,400
that I'm going to do anything with it

00:28:41,570 --> 00:28:44,990
and this basically you can see we get

00:28:43,400 --> 00:28:47,300
the code attributes we finally have in

00:28:44,990 --> 00:28:49,430
there we get the trades and we're

00:28:47,300 --> 00:28:52,100
basically just collecting what will be

00:28:49,430 --> 00:28:54,830
the OP spec that we stick in to get up

00:28:52,100 --> 00:28:56,210
long okay so we put meta information in

00:28:54,830 --> 00:28:58,130
a way that it makes in a place that it

00:28:56,210 --> 00:28:59,660
makes sense to a programmer and then

00:28:58,130 --> 00:29:00,640
later on we can grab it out and we can

00:28:59,660 --> 00:29:04,550
do whatever we want with it

00:29:00,640 --> 00:29:05,900
so these examples are a little esoteric

00:29:04,550 --> 00:29:08,480
and weird there's a couple even more

00:29:05,900 --> 00:29:10,090
esoteric and weird ones in the in the

00:29:08,480 --> 00:29:12,500
actual test suite of the distribution

00:29:10,090 --> 00:29:16,340
but if anybody's played with Java

00:29:12,500 --> 00:29:17,720
annotations and don't hate them because

00:29:16,340 --> 00:29:19,850
there seems to be a lot of people who do

00:29:17,720 --> 00:29:21,140
hate them we play with them but there

00:29:19,850 --> 00:29:23,540
are very powerful mechanism and you can

00:29:21,140 --> 00:29:25,550
do a lot of stuff with them JA or python

00:29:23,540 --> 00:29:27,410
has decorators javascript has this stuff

00:29:25,550 --> 00:29:30,530
as well I think Matt trout showed it in

00:29:27,410 --> 00:29:32,990
his es5 talk so this is something that's

00:29:30,530 --> 00:29:34,520
coming up in the world and it honestly

00:29:32,990 --> 00:29:36,740
it's a great place to stick metadata in

00:29:34,520 --> 00:29:38,450
my opinion so those are the three

00:29:36,740 --> 00:29:39,740
infrastructure modules now you're going

00:29:38,450 --> 00:29:41,000
to see all this stuff come together

00:29:39,740 --> 00:29:43,340
those three were built on the previous

00:29:41,000 --> 00:29:46,940
three and now this last one is going to

00:29:43,340 --> 00:29:48,890
be built on top of that it's the syntax

00:29:46,940 --> 00:29:54,080
layer or the sin layer I'm from

00:29:48,890 --> 00:29:55,970
Amsterdam after all so I don't really

00:29:54,080 --> 00:29:58,880
have a good name for this one but this

00:29:55,970 --> 00:30:00,710
name is just stuck and and we tried to

00:29:58,880 --> 00:30:02,450
brainstorm a bunch of names last night

00:30:00,710 --> 00:30:03,860
still couldn't come up with anything and

00:30:02,450 --> 00:30:05,150
if I actually end up with time at the

00:30:03,860 --> 00:30:06,590
end of this and I release it then it's

00:30:05,150 --> 00:30:09,580
going to be that unless you guys have a

00:30:06,590 --> 00:30:14,420
better idea for a name I'm open to ideas

00:30:09,580 --> 00:30:16,510
this is not a moose redux it has

00:30:14,420 --> 00:30:19,190
similarities to moose but it is not

00:30:16,510 --> 00:30:21,770
compatible with moose it is not a redo

00:30:19,190 --> 00:30:26,270
of moose it's not even really

00:30:21,770 --> 00:30:28,040
necessarily new syntax it's not really

00:30:26,270 --> 00:30:30,830
Damien's three words either

00:30:28,040 --> 00:30:35,390
it's about a one of Damian's three words

00:30:30,830 --> 00:30:38,840
so 33.33% of it and it basically looks

00:30:35,390 --> 00:30:41,330
like this so there's an important

00:30:38,840 --> 00:30:43,520
distinction I want to make here I was

00:30:41,330 --> 00:30:45,919
accused many times by people who didn't

00:30:43,520 --> 00:30:48,950
like mousse of that mousse created

00:30:45,919 --> 00:30:50,960
struct like objects that when you

00:30:48,950 --> 00:30:54,679
declared your attributes in mousse

00:30:50,960 --> 00:30:57,710
basically declared your slots you ended

00:30:54,679 --> 00:30:59,090
up with a public method and you wanted

00:30:57,710 --> 00:31:01,820
that method because it would keep you

00:30:59,090 --> 00:31:03,549
from typing the hash key name it at

00:31:01,820 --> 00:31:06,799
least would blow up at you and run time

00:31:03,549 --> 00:31:08,660
but it it's sort of it mushed together

00:31:06,799 --> 00:31:10,790
the idea of slot which is state

00:31:08,660 --> 00:31:12,590
management and then API which is your

00:31:10,790 --> 00:31:14,150
methods and so I really wanted to break

00:31:12,590 --> 00:31:15,530
these two things apart there's a little

00:31:14,150 --> 00:31:17,000
bit of redundancy going on here but I

00:31:15,530 --> 00:31:19,910
believe it's redundancy for a good

00:31:17,000 --> 00:31:22,510
reason so we have an extend keyword

00:31:19,910 --> 00:31:25,760
that's used that's built with begin lift

00:31:22,510 --> 00:31:28,580
and it essentially does what my example

00:31:25,760 --> 00:31:30,080
begin lifting does pushes on to is ax

00:31:28,580 --> 00:31:31,970
because I don't really care what it does

00:31:30,080 --> 00:31:33,950
because up again that's where I read my

00:31:31,970 --> 00:31:36,530
information from with the mop etc

00:31:33,950 --> 00:31:40,730
etcetera etcetera has essentially just

00:31:36,530 --> 00:31:46,580
sticks a key into the percent has a slot

00:31:40,730 --> 00:31:48,679
a container and then these use method

00:31:46,580 --> 00:31:50,630
traits to essentially build a reading

00:31:48,679 --> 00:31:55,700
only accessor for you

00:31:50,630 --> 00:31:57,380
oh so with moose we added a thing that

00:31:55,700 --> 00:31:58,820
imported strict and warnings it was a

00:31:57,380 --> 00:32:02,410
little contentious some people like that

00:31:58,820 --> 00:32:04,520
some people didn't it was in my my

00:32:02,410 --> 00:32:06,590
justification for it was that I wanted

00:32:04,520 --> 00:32:10,309
to yank everybody into modern modern

00:32:06,590 --> 00:32:12,640
Perl when you import Moxie it turns on

00:32:10,309 --> 00:32:16,460
pretty much every experimental feature

00:32:12,640 --> 00:32:18,650
available in your running Perl

00:32:16,460 --> 00:32:20,600
interpreter this is it actually it's

00:32:18,650 --> 00:32:22,640
only 522 you have you have to have 522

00:32:20,600 --> 00:32:24,860
to run this but it takes everything from

00:32:22,640 --> 00:32:27,590
5 22 on up and I will continue adding

00:32:24,860 --> 00:32:30,770
that as Sawyer adds more and more

00:32:27,590 --> 00:32:34,190
features because I know he will so you

00:32:30,770 --> 00:32:37,429
have signatures again woohoo new feature

00:32:34,190 --> 00:32:39,490
without me having to write any code yay

00:32:37,429 --> 00:32:41,600
so thing that you're yanked into monitor

00:32:39,490 --> 00:32:45,610
modernity with

00:32:41,600 --> 00:32:49,040
with signatures and Refaeli icing and

00:32:45,610 --> 00:32:51,020
postfix t rep and current sub and

00:32:49,040 --> 00:32:55,730
lexical subs and all those cool features

00:32:51,020 --> 00:32:59,140
I want you to be using them here's again

00:32:55,730 --> 00:33:02,420
the point 3d example pretty obvious

00:32:59,140 --> 00:33:04,910
please don't ever use super super is

00:33:02,420 --> 00:33:08,240
really really problematic next method

00:33:04,910 --> 00:33:09,890
just works and since I've dragged you

00:33:08,240 --> 00:33:13,100
into the modern world you have no excuse

00:33:09,890 --> 00:33:16,040
because that's 5 10 when it comes down

00:33:13,100 --> 00:33:17,870
to it so these behave normal exactly as

00:33:16,040 --> 00:33:19,580
you expect they take the key value args

00:33:17,870 --> 00:33:22,250
ok nothing here that I'm showing you

00:33:19,580 --> 00:33:24,860
should be that surprising or potentially

00:33:22,250 --> 00:33:26,210
even that interesting but at all it all

00:33:24,860 --> 00:33:29,120
works and one of the key things that I

00:33:26,210 --> 00:33:31,880
like about it is that those classes were

00:33:29,120 --> 00:33:37,460
a hundred percent completely built and

00:33:31,880 --> 00:33:40,250
ready to go before the run phase so unit

00:33:37,460 --> 00:33:42,950
check is the last guard before that and

00:33:40,250 --> 00:33:44,840
it and I make sure that all the all the

00:33:42,950 --> 00:33:46,460
roll composition happens in there the

00:33:44,840 --> 00:33:49,940
inheritance of your slots happens in

00:33:46,460 --> 00:33:52,610
there I think I might even lock the the

00:33:49,940 --> 00:33:55,340
the percent has so you can't add new

00:33:52,610 --> 00:33:58,460
slots to it I did try to lock a stash

00:33:55,340 --> 00:34:00,230
don't do that it doesn't like it

00:33:58,460 --> 00:34:03,500
stashes underneath or actually just hash

00:34:00,230 --> 00:34:06,590
graphs or just hashes so your package is

00:34:03,500 --> 00:34:08,540
basically implemented as a hash but yeah

00:34:06,590 --> 00:34:12,200
don't try and lock them they cause they

00:34:08,540 --> 00:34:14,630
do bad things when you do that so so

00:34:12,200 --> 00:34:19,190
again fairly straightforward here's a

00:34:14,630 --> 00:34:22,400
slightly more complex case and in a

00:34:19,190 --> 00:34:25,820
weirdness to just illustrate a point so

00:34:22,400 --> 00:34:27,650
we're extending moxy object in mousse it

00:34:25,820 --> 00:34:29,660
immediately pushed mousse object into

00:34:27,650 --> 00:34:31,460
there because you have mousse and you

00:34:29,660 --> 00:34:33,290
had mousse roll so it made a big

00:34:31,460 --> 00:34:35,240
distinction between a class and a roll I

00:34:33,290 --> 00:34:37,550
don't make that big distinction so you

00:34:35,240 --> 00:34:40,730
have to actually inherit from the base

00:34:37,550 --> 00:34:42,890
object moxie object only builds on

00:34:40,730 --> 00:34:45,620
universal object by adding a does method

00:34:42,890 --> 00:34:47,000
and the reason for that is not

00:34:45,620 --> 00:34:48,650
interesting ask me later if you're

00:34:47,000 --> 00:34:51,090
interested

00:34:48,650 --> 00:34:53,340
build arts is something that we have in

00:34:51,090 --> 00:34:56,190
mousse and it basically and it's also

00:34:53,340 --> 00:34:58,830
again we stole from pro six it takes the

00:34:56,190 --> 00:35:00,330
original set of arguments for you and

00:34:58,830 --> 00:35:02,250
you can munge it and however you want

00:35:00,330 --> 00:35:05,240
and you pass that on to new and that's

00:35:02,250 --> 00:35:07,590
what's used to construct your object

00:35:05,240 --> 00:35:09,840
we're using the method traits here with

00:35:07,590 --> 00:35:14,370
an init args and it basically allows us

00:35:09,840 --> 00:35:17,190
to say I accept the balance key but

00:35:14,370 --> 00:35:19,350
stored in that slot you can get really

00:35:17,190 --> 00:35:21,240
creative with this like with mousse you

00:35:19,350 --> 00:35:23,040
can also put an undead there and it will

00:35:21,240 --> 00:35:25,560
not allow you to assign the slot through

00:35:23,040 --> 00:35:28,020
the constructor okay so this right here

00:35:25,560 --> 00:35:29,430
is really a definition for the API of

00:35:28,020 --> 00:35:31,650
your constructor um

00:35:29,430 --> 00:35:32,880
it's very very simplistic if you

00:35:31,650 --> 00:35:34,980
actually go and look at the code it's

00:35:32,880 --> 00:35:36,180
really not very long at all it's as same

00:35:34,980 --> 00:35:39,570
you would say it's like 90%

00:35:36,180 --> 00:35:41,340
infrastructure but it's very easy to

00:35:39,570 --> 00:35:42,420
build on this and play with this but

00:35:41,340 --> 00:35:44,610
this allows you to define your

00:35:42,420 --> 00:35:48,300
constructor very clearly then we have

00:35:44,610 --> 00:35:49,800
the the balanced accessor and if the

00:35:48,300 --> 00:35:51,240
name of the class is not the name of the

00:35:49,800 --> 00:35:53,670
slot then you just put that in there and

00:35:51,240 --> 00:35:55,200
it figures it out and then you can see

00:35:53,670 --> 00:36:01,380
the rest of everything it does and again

00:35:55,200 --> 00:36:03,810
yay we have signatures so it dies

00:36:01,380 --> 00:36:05,190
because that's not it basically the

00:36:03,810 --> 00:36:07,740
constructor says I don't know what an

00:36:05,190 --> 00:36:09,210
underscore balances I don't know you

00:36:07,740 --> 00:36:14,130
told me balance was the only thing you

00:36:09,210 --> 00:36:20,130
took as a key and etc etcetera it works

00:36:14,130 --> 00:36:23,250
as expected so it's a little bit more

00:36:20,130 --> 00:36:25,670
verbose than moose but it is and I have

00:36:23,250 --> 00:36:29,910
done zero optimization it is only

00:36:25,670 --> 00:36:31,950
slightly slower than Moo

00:36:29,910 --> 00:36:34,440
and basically once I actually start

00:36:31,950 --> 00:36:36,480
optimizing it'll be faster than that and

00:36:34,440 --> 00:36:38,430
then if we can get some of these things

00:36:36,480 --> 00:36:40,680
into the actual core it should be

00:36:38,430 --> 00:36:42,780
negligible but we'll get to that later

00:36:40,680 --> 00:36:46,650
but I need you guys to test it first -

00:36:42,780 --> 00:36:48,900
really so anyway so those are fairly

00:36:46,650 --> 00:36:53,070
straightforward and simple ones and how

00:36:48,900 --> 00:36:54,150
we doing on time 15 minutes okay good

00:36:53,070 --> 00:36:57,540
good I might be able to release that

00:36:54,150 --> 00:36:59,369
module then so here we're going to get a

00:36:57,540 --> 00:37:02,140
little bit fancier

00:36:59,369 --> 00:37:03,640
again we extend this object if you don't

00:37:02,140 --> 00:37:05,680
want to initialize this you just want it

00:37:03,640 --> 00:37:08,799
to be set the undef you don't have to

00:37:05,680 --> 00:37:11,859
pass that sub ref there and then you're

00:37:08,799 --> 00:37:13,119
all probably wondering what that is I'm

00:37:11,859 --> 00:37:14,020
not going to tell you right now we're

00:37:13,119 --> 00:37:19,450
going to go through some other stuff

00:37:14,020 --> 00:37:21,520
first read write read only we also have

00:37:19,450 --> 00:37:22,900
predicates so this is also a thing with

00:37:21,520 --> 00:37:25,029
moose

00:37:22,900 --> 00:37:26,410
we have clearers which will clear out

00:37:25,029 --> 00:37:28,059
the slots so the predicates basically

00:37:26,410 --> 00:37:30,520
tell you has something been put into the

00:37:28,059 --> 00:37:33,190
slot the clearers will tell you what

00:37:30,520 --> 00:37:35,020
will clear the slot for you we have a

00:37:33,190 --> 00:37:36,250
handles that will do a delegation for

00:37:35,020 --> 00:37:38,589
you so a lot of these features in moose

00:37:36,250 --> 00:37:42,579
have been moved out of the has

00:37:38,589 --> 00:37:44,619
definition and moved into these the

00:37:42,579 --> 00:37:48,789
method trait to these annotated methods

00:37:44,619 --> 00:37:51,460
now the nice thing about this is that if

00:37:48,789 --> 00:37:53,829
you were to convert this to moose moose

00:37:51,460 --> 00:37:56,079
would in the background action at a

00:37:53,829 --> 00:37:59,410
distance generate all these methods for

00:37:56,079 --> 00:38:00,730
you if you asked it so you did ask it to

00:37:59,410 --> 00:38:02,230
generate that method so I think that's

00:38:00,730 --> 00:38:04,930
fair but moose does have a couple

00:38:02,230 --> 00:38:06,430
extensions which you say something and

00:38:04,930 --> 00:38:08,200
it's like oh cool you wanted all seven

00:38:06,430 --> 00:38:10,029
of those methods to be generated I'll do

00:38:08,200 --> 00:38:12,640
that for you and most people don't even

00:38:10,029 --> 00:38:14,559
know like lazy build for instance in

00:38:12,640 --> 00:38:17,170
moose generates like four or five

00:38:14,559 --> 00:38:20,319
methods and just about nobody knows this

00:38:17,170 --> 00:38:23,470
they just think it does one or two these

00:38:20,319 --> 00:38:27,279
force you to explicitly say these are

00:38:23,470 --> 00:38:29,859
subs this is my public API this is what

00:38:27,279 --> 00:38:31,450
other people can call in here but you

00:38:29,859 --> 00:38:33,510
still get the same benefit of the

00:38:31,450 --> 00:38:39,970
metadata generation

00:38:33,510 --> 00:38:41,559
so this lexical subroutines I'm going to

00:38:39,970 --> 00:38:46,839
take a quick step back into a quick rant

00:38:41,559 --> 00:38:48,940
on private methods for a second most of

00:38:46,839 --> 00:38:51,520
you anybody here was ever interested in

00:38:48,940 --> 00:38:55,569
private methods or look at any private

00:38:51,520 --> 00:38:56,799
method implementation on c-pen like we

00:38:55,569 --> 00:39:00,220
sort of know the normal way to do this

00:38:56,799 --> 00:39:02,799
right which is we check the be the

00:39:00,220 --> 00:39:04,180
instance we check what where we use

00:39:02,799 --> 00:39:04,450
caller we do all this stuff to figure

00:39:04,180 --> 00:39:06,339
out

00:39:04,450 --> 00:39:09,309
are we being called from the outside and

00:39:06,339 --> 00:39:12,119
if we not we blow up in my opinion

00:39:09,309 --> 00:39:14,160
totally wrong the wrong way to do this

00:39:12,119 --> 00:39:16,140
private method should not be involved in

00:39:14,160 --> 00:39:19,559
the dispatch mechanism they are private

00:39:16,140 --> 00:39:21,329
to your class they shouldn't be involved

00:39:19,559 --> 00:39:23,699
in this all they shouldn't override

00:39:21,329 --> 00:39:25,650
other methods of the same name that are

00:39:23,699 --> 00:39:28,469
public and I think a number of languages

00:39:25,650 --> 00:39:30,539
actually work in that way Perl 6

00:39:28,469 --> 00:39:33,239
basically did sub methods it's kind of

00:39:30,539 --> 00:39:34,920
your variant abet and they're not

00:39:33,239 --> 00:39:37,859
involved in the dispatch mechanism stuff

00:39:34,920 --> 00:39:42,689
like that so lexical subroutines cannot

00:39:37,859 --> 00:39:44,729
be dispatched on ok at first I was

00:39:42,689 --> 00:39:46,019
annoyed by that and I thought about it

00:39:44,729 --> 00:39:47,910
for a little while and I said no no no

00:39:46,019 --> 00:39:48,329
that does make sense that does make

00:39:47,910 --> 00:39:50,519
sense

00:39:48,329 --> 00:39:54,599
and then I decided to exploit it pretty

00:39:50,519 --> 00:39:58,049
heavily so that creates two subroutines

00:39:54,599 --> 00:40:01,769
two lexical subroutines okay and then it

00:39:58,049 --> 00:40:03,989
generates a private accessor how it

00:40:01,769 --> 00:40:07,170
actually goes about doing this is gnarly

00:40:03,989 --> 00:40:09,239
and nasty and weird should be much nicer

00:40:07,170 --> 00:40:11,640
when we put it in the core or maybe I

00:40:09,239 --> 00:40:13,170
start writing a little bit more XS I'm

00:40:11,640 --> 00:40:14,819
not going to show it if you want to see

00:40:13,170 --> 00:40:16,469
it I'm happy to walk you through it it

00:40:14,819 --> 00:40:17,999
is a little weird but it really works

00:40:16,469 --> 00:40:21,150
and it works quite well there's only a

00:40:17,999 --> 00:40:24,089
few little caveats and essentially if

00:40:21,150 --> 00:40:25,759
you have a universal object based class

00:40:24,089 --> 00:40:28,829
I'm going to generate an l-value

00:40:25,759 --> 00:40:32,549
readwrite accessor for you with a

00:40:28,829 --> 00:40:36,390
private method that can infer self for

00:40:32,549 --> 00:40:38,489
you if you have an immutable object I'm

00:40:36,390 --> 00:40:39,900
just going to make an accessor that

00:40:38,489 --> 00:40:43,969
returns stuff because you if you tried

00:40:39,900 --> 00:40:47,719
to write to it it'd blow up anyway so

00:40:43,969 --> 00:40:47,719
you see what we got down here

00:40:48,259 --> 00:40:53,719
so damien was all fancy with his Java

00:40:50,880 --> 00:40:55,949
syntax right right but that was a toy

00:40:53,719 --> 00:40:58,049
now we can actually assign to these

00:40:55,949 --> 00:40:59,459
things and it just works and it's

00:40:58,049 --> 00:41:02,339
actually quite fast it's reasonably

00:40:59,459 --> 00:41:05,189
performant because there's no loop so

00:41:02,339 --> 00:41:06,779
subroutines have a lookup cost the

00:41:05,189 --> 00:41:08,279
lookup cost for a private server for a

00:41:06,779 --> 00:41:10,400
lexical subroutine is the same as a

00:41:08,279 --> 00:41:14,069
lexical lookup which is pretty fast um

00:41:10,400 --> 00:41:15,539
so you look at this and you kind of go

00:41:14,069 --> 00:41:18,449
ahead I don't know Stephen that's a

00:41:15,539 --> 00:41:21,329
little crazy it's not as bad as it

00:41:18,449 --> 00:41:23,760
sounds and it's really really really

00:41:21,329 --> 00:41:27,119
nice I'd also be happy to show you

00:41:23,760 --> 00:41:29,040
a giant repository that has that uses

00:41:27,119 --> 00:41:31,170
this and when you get a look at the code

00:41:29,040 --> 00:41:34,670
you'll probably go wow I wish I had this

00:41:31,170 --> 00:41:38,220
years ago because it's quite nice so

00:41:34,670 --> 00:41:39,660
Moxie has a lot of other stuff in it

00:41:38,220 --> 00:41:41,160
this is sort of scratching the surface

00:41:39,660 --> 00:41:42,869
there's a lot of weird stuff you can do

00:41:41,160 --> 00:41:44,220
with it or not not weird so there's a

00:41:42,869 --> 00:41:46,859
lot of stuff you can do with it

00:41:44,220 --> 00:41:49,410
you can go through the the repository

00:41:46,859 --> 00:41:53,580
etc etc etc and look at the test suite

00:41:49,410 --> 00:41:55,230
all that it's not yet released on sipan

00:41:53,580 --> 00:41:58,369
so let's just quickly go over the status

00:41:55,230 --> 00:42:04,080
here we have universal object that's I

00:41:58,369 --> 00:42:06,869
made at least 11 mistakes I consider it

00:42:04,080 --> 00:42:09,300
stable this is based on code that I have

00:42:06,869 --> 00:42:12,090
been building on for about 3 or 4 years

00:42:09,300 --> 00:42:15,480
now it was in the core of all of those

00:42:12,090 --> 00:42:17,310
prototypes was this stuff B compiler

00:42:15,480 --> 00:42:19,170
face hook is beta simply because I

00:42:17,310 --> 00:42:20,609
should not write C and I need somebody

00:42:19,170 --> 00:42:22,320
to actually read that C and make sure

00:42:20,609 --> 00:42:23,880
that I'm not doing anything stupid and I

00:42:22,320 --> 00:42:26,040
haven't found anybody any sucker to do

00:42:23,880 --> 00:42:27,600
that yet and the same with begin lift

00:42:26,040 --> 00:42:30,330
but they're pretty stable at this point

00:42:27,600 --> 00:42:33,810
I think they're usable method traits

00:42:30,330 --> 00:42:35,220
also I'm using it I'm exercising I'm not

00:42:33,810 --> 00:42:38,310
finding too many places where it breaks

00:42:35,220 --> 00:42:43,260
I'm calling a beta the mop is stable-ish

00:42:38,310 --> 00:42:44,820
I say ish only because a the API may

00:42:43,260 --> 00:42:46,140
still be in flux I have a lot of stuff

00:42:44,820 --> 00:42:47,520
in there there's things that was

00:42:46,140 --> 00:42:49,500
discussed yesterday when I was showing

00:42:47,520 --> 00:42:51,030
this to people possible additions

00:42:49,500 --> 00:42:53,280
possible tweaks and changes but it's

00:42:51,030 --> 00:42:56,030
it's good enough at this point and then

00:42:53,280 --> 00:43:07,920
ok wait hold on this is wrong I mean

00:42:56,030 --> 00:43:15,660
let's see if we can release ok do you

00:43:07,920 --> 00:43:16,770
SIL yes to like change name sorry just

00:43:15,660 --> 00:43:17,790
tell me what I'm supposed to write there

00:43:16,770 --> 00:43:22,980
I can't read it

00:43:17,790 --> 00:43:30,720
why nope come in Plus

00:43:22,980 --> 00:43:32,760
oh I like it so I'm have a bit of a

00:43:30,720 --> 00:43:36,960
history with Maine and Maine has this

00:43:32,760 --> 00:43:38,220
disgusting soda called moxie and so yeah

00:43:36,960 --> 00:43:46,109
that that's where it came out of

00:43:38,220 --> 00:43:51,410
basically um okay yeah you guys want to

00:43:46,109 --> 00:43:56,250
know my password close no it's not moxie

00:43:51,410 --> 00:43:58,530
we got yes yes yes last chance better

00:43:56,250 --> 00:44:02,849
names milk

00:43:58,530 --> 00:44:15,030
Steve Ian darkstar was put up yesterday

00:44:02,849 --> 00:44:16,200
I was assured deals tiny thank you in

00:44:15,030 --> 00:44:20,970
the interest of not starting a war with

00:44:16,200 --> 00:44:30,810
Australia and he's a big guy they kicked

00:44:20,970 --> 00:44:32,400
my ass now how do I get back to my

00:44:30,810 --> 00:44:37,859
presentation okay

00:44:32,400 --> 00:44:41,930
so luckily I prepared oops wait luckily

00:44:37,859 --> 00:44:48,480
I prepared this slide so we are now out

00:44:41,930 --> 00:44:51,150
0.01 for moxie and it is very alpha as I

00:44:48,480 --> 00:44:54,839
said this is the culmination of a lot

00:44:51,150 --> 00:44:57,210
long long long period of work there's a

00:44:54,839 --> 00:44:58,680
huge amount of thinking in context and

00:44:57,210 --> 00:45:01,890
stuff that has gone through my brain

00:44:58,680 --> 00:45:03,990
over all this at this point I've got to

00:45:01,890 --> 00:45:05,010
get it out of my head I've got to get it

00:45:03,990 --> 00:45:06,839
to the community I've got to get you

00:45:05,010 --> 00:45:08,190
people looking at it if you like it

00:45:06,839 --> 00:45:10,050
great if you don't like it that's fine

00:45:08,190 --> 00:45:13,400
I'm gonna go right go anyway probably

00:45:10,050 --> 00:45:15,660
Swift a little bit so doesn't know it I

00:45:13,400 --> 00:45:18,329
needed to get out there I need to know

00:45:15,660 --> 00:45:20,280
if I'm if I'm insane or if I have a good

00:45:18,329 --> 00:45:23,069
idea going et cetera et cetera so please

00:45:20,280 --> 00:45:24,810
please please play with these things use

00:45:23,069 --> 00:45:27,670
them put them in production

00:45:24,810 --> 00:45:31,200
don't call me if they break but

00:45:27,670 --> 00:45:35,050
okay so we got five minutes left

00:45:31,200 --> 00:45:50,920
questions I think hold on mark hearts

00:45:35,050 --> 00:45:53,500
gone okay yes uh yes yes

00:45:50,920 --> 00:45:55,420
it receives the just like when Musa

00:45:53,500 --> 00:45:57,880
receives the self-reference and it

00:45:55,420 --> 00:46:00,900
receives the it receives the hash

00:45:57,880 --> 00:46:04,099
referential arts that you put in yeah

00:46:00,900 --> 00:46:04,099
[Music]

00:46:07,740 --> 00:46:17,350
okay so this yep yeah so so the question

00:46:13,810 --> 00:46:21,270
was essentially do we have support for

00:46:17,350 --> 00:46:29,200
for laziness with building slots lately

00:46:21,270 --> 00:46:32,080
directly no if you look a crap if we go

00:46:29,200 --> 00:46:34,660
back to here that left and right down

00:46:32,080 --> 00:46:36,420
there are how you would do lazy so you

00:46:34,660 --> 00:46:38,650
end up being a little bit more explicit

00:46:36,420 --> 00:46:40,990
you you're you're you're basically doing

00:46:38,650 --> 00:46:44,230
the defined or two assignment I have a

00:46:40,990 --> 00:46:46,240
few examples in one of these repos about

00:46:44,230 --> 00:46:50,380
how you can implement laziness on top of

00:46:46,240 --> 00:46:53,980
all these things but I'm not happy with

00:46:50,380 --> 00:46:55,840
any of them completely yet then the one

00:46:53,980 --> 00:47:01,330
that I'm the most happy with involves

00:46:55,840 --> 00:47:03,670
tie and that makes me sad so and so

00:47:01,330 --> 00:47:06,190
we'll get there but in the meantime you

00:47:03,670 --> 00:47:08,010
can do it yourself there the only other

00:47:06,190 --> 00:47:10,180
thing that I'll mention that is missing

00:47:08,010 --> 00:47:12,640
moose thing that is missing here is

00:47:10,180 --> 00:47:14,970
types I'm purposely avoiding putting

00:47:12,640 --> 00:47:18,000
types inside an object system again

00:47:14,970 --> 00:47:20,380
because there's a number of Rivia okay

00:47:18,000 --> 00:47:23,770
Dave knows the pain because I gave it to

00:47:20,380 --> 00:47:25,060
him and he co mated it there's a number

00:47:23,770 --> 00:47:27,100
of really good type libraries out there

00:47:25,060 --> 00:47:31,150
I'm not going to I don't play favorites

00:47:27,100 --> 00:47:35,260
I have four kids I know how this works

00:47:31,150 --> 00:47:37,600
so it's it's up to you to add this you

00:47:35,260 --> 00:47:38,590
saw method traits super easy to add this

00:47:37,600 --> 00:47:41,080
into it

00:47:38,590 --> 00:47:43,600
I will accept patches for

00:47:41,080 --> 00:47:45,880
or some sort of way to add this ability

00:47:43,600 --> 00:47:47,310
in Moxie a little bit more but again I'm

00:47:45,880 --> 00:47:51,040
not really sure that it belongs there

00:47:47,310 --> 00:47:53,020
one of the things about my spending

00:47:51,040 --> 00:47:54,580
years looking at the year looking at the

00:47:53,020 --> 00:47:56,710
core of Perl was that I came to

00:47:54,580 --> 00:47:58,450
appreciate more the dynamic nature of

00:47:56,710 --> 00:48:00,010
Perl and I actually kind of liked the

00:47:58,450 --> 00:48:02,770
type system that Perl has which is

00:48:00,010 --> 00:48:04,750
scalars razón hashes and other stuff but

00:48:02,770 --> 00:48:07,570
like not making a distinction in those

00:48:04,750 --> 00:48:09,210
in those scalars I actually I've come

00:48:07,570 --> 00:48:12,340
around to think that's not a bad thing

00:48:09,210 --> 00:48:16,020
but type validation is useful etc etc

00:48:12,340 --> 00:48:28,480
etc you can do it on your own right now

00:48:16,020 --> 00:48:30,580
okay next so when I first started this

00:48:28,480 --> 00:48:33,850
project I spoke to the pumpking Jesse

00:48:30,580 --> 00:48:36,040
Vincent and he said you should make sure

00:48:33,850 --> 00:48:37,930
this goes up on Sipan first dog food

00:48:36,040 --> 00:48:41,020
this yourself get other people dog food

00:48:37,930 --> 00:48:46,030
it sorry the question was a is this

00:48:41,020 --> 00:48:47,590
going in core essentially then when I

00:48:46,030 --> 00:48:49,180
was working on a little bit later I

00:48:47,590 --> 00:48:51,730
talked to the then pumpking Ricardo

00:48:49,180 --> 00:48:53,380
Cygnus who said the exact same thing no

00:48:51,730 --> 00:48:57,220
you don't get special privileges Steven

00:48:53,380 --> 00:49:01,450
damn it and I have to put on C pen and

00:48:57,220 --> 00:49:04,810
then even though it's Sawyer even though

00:49:01,450 --> 00:49:08,110
I was his boss he still said to me no

00:49:04,810 --> 00:49:10,240
because you can't just put it in core it

00:49:08,110 --> 00:49:11,230
doesn't work that way so that that's why

00:49:10,240 --> 00:49:12,340
I'm asking for help that's why I'm

00:49:11,230 --> 00:49:14,320
asking for people to test

00:49:12,340 --> 00:49:18,190
I think Universal objects should go into

00:49:14,320 --> 00:49:21,250
core mob could go into core if they if

00:49:18,190 --> 00:49:24,520
they can reach into the guts they can do

00:49:21,250 --> 00:49:26,500
things faster if we can just read our in

00:49:24,520 --> 00:49:28,300
excess to reach into the guts I don't

00:49:26,500 --> 00:49:30,760
think I'm messing with anything that is

00:49:28,300 --> 00:49:33,940
actually sort of foreboding inside the

00:49:30,760 --> 00:49:35,800
core so I don't think it actually has to

00:49:33,940 --> 00:49:42,510
be put into core but obviously be faster

00:49:35,800 --> 00:49:42,510
um but eventually I swear

00:49:52,299 --> 00:49:59,739
um come talk to me later I know somebody

00:50:00,039 --> 00:50:17,660
okay uh are you better

00:50:02,749 --> 00:50:19,549
ennifer uh it can't well it may be um I

00:50:17,660 --> 00:50:23,200
thought I was able to do everything in

00:50:19,549 --> 00:50:26,539
begin time but the subroutine attributes

00:50:23,200 --> 00:50:30,410
method traits rather that happens I

00:50:26,539 --> 00:50:32,359
think in check time and then also begin

00:50:30,410 --> 00:50:35,720
time if you wanted to dynamically load a

00:50:32,359 --> 00:50:38,059
class begins over but unit check will

00:50:35,720 --> 00:50:40,160
fire so unit check will basically fire

00:50:38,059 --> 00:50:42,109
at the end of every compilation unit so

00:50:40,160 --> 00:50:43,369
if you require a file or do a file or

00:50:42,109 --> 00:50:45,229
something like that it becomes a

00:50:43,369 --> 00:50:46,880
compilation unit and a unit check will

00:50:45,229 --> 00:50:48,940
fire there so this allows you to have

00:50:46,880 --> 00:50:51,799
more of a dynamic loading of classes too

00:50:48,940 --> 00:50:54,289
but it would be nice if we the further

00:50:51,799 --> 00:50:57,289
up we can push it absolutely um but if

00:50:54,289 --> 00:51:13,039
you know anybody who knows core you

00:50:57,289 --> 00:51:13,999
might want to help no I they just shadow

00:51:13,039 --> 00:51:16,670
each other that's that's what

00:51:13,999 --> 00:51:18,710
everybody's used to adding names facing

00:51:16,670 --> 00:51:22,400
would basically I think it would confuse

00:51:18,710 --> 00:51:26,329
things in some way and if I'm overriding

00:51:22,400 --> 00:51:29,779
a spot from a bit slots get overwritten

00:51:26,329 --> 00:51:31,880
or slots are inherited Joe select

00:51:29,779 --> 00:51:33,680
methods I think that's a pretty standard

00:51:31,880 --> 00:51:35,299
convention for Perl

00:51:33,680 --> 00:51:38,329
I sort of know where you're going with

00:51:35,299 --> 00:51:40,700
this but I think would go against her

00:51:38,329 --> 00:51:42,559
lessness to do that there's there's only

00:51:40,700 --> 00:51:45,440
so much bondage and discipline that the

00:51:42,559 --> 00:51:46,819
Perl community will suffer through and

00:51:45,440 --> 00:51:48,799
and I think that would maybe go a little

00:51:46,819 --> 00:51:49,670
bit too far but I'm happy to debate it

00:51:48,799 --> 00:51:54,549
with you and if you have a better

00:51:49,670 --> 00:51:54,549
solution we can talk comm Rock

00:51:56,350 --> 00:52:05,630
yeah oh crap I forgot that slide blame

00:52:00,860 --> 00:52:07,820
John Rosso actually so it's a good

00:52:05,630 --> 00:52:09,050
question so yes it I didn't see any demo

00:52:07,820 --> 00:52:12,110
or I didn't see anything for a role a

00:52:09,050 --> 00:52:13,780
role is just a package a Moxie role

00:52:12,110 --> 00:52:16,970
we'll just say use moxie at the top and

00:52:13,780 --> 00:52:19,460
and actually internally in moxie we

00:52:16,970 --> 00:52:21,530
assume everything as a role first until

00:52:19,460 --> 00:52:23,660
you actually try to inherit it from

00:52:21,530 --> 00:52:26,690
Herot something at which point we

00:52:23,660 --> 00:52:30,620
upgraded to a class just just in our

00:52:26,690 --> 00:52:33,110
internal mechanisms so this actually

00:52:30,620 --> 00:52:35,720
means that you can treat a class as a

00:52:33,110 --> 00:52:37,640
role if you want to because it's

00:52:35,720 --> 00:52:39,290
essentially a subset of role it just

00:52:37,640 --> 00:52:42,290
ignores the inheritance relationship and

00:52:39,290 --> 00:52:49,610
any inherited methods and stuff like

00:52:42,290 --> 00:52:52,040
that magic how you you say with just

00:52:49,610 --> 00:52:54,400
like with within mousse and it registers

00:52:52,040 --> 00:52:56,480
to be composed at the unit check time

00:52:54,400 --> 00:53:11,360
yeah I should put a slide in for that

00:52:56,480 --> 00:53:12,710
really Wow okay thanks so in roles when

00:53:11,360 --> 00:53:15,350
when you go through the composition

00:53:12,710 --> 00:53:17,450
process those abstract subs are treated

00:53:15,350 --> 00:53:18,980
as required methods and and then they

00:53:17,450 --> 00:53:22,190
through the natural process of role

00:53:18,980 --> 00:53:24,830
composition they need to be you have to

00:53:22,190 --> 00:53:26,750
fulfill those requirements so in the

00:53:24,830 --> 00:53:29,510
space roll composition it'll blow up if

00:53:26,750 --> 00:53:31,910
that hasn't been fulfilled so unit check

00:53:29,510 --> 00:53:34,490
time is when that happens I had a

00:53:31,910 --> 00:53:37,430
version of this that also had abstract

00:53:34,490 --> 00:53:40,430
classes I believe that those would also

00:53:37,430 --> 00:53:42,380
be really nice abstract classes roles

00:53:40,430 --> 00:53:45,070
can be thought of as abstract class but

00:53:42,380 --> 00:53:48,290
an abstract class also has its own

00:53:45,070 --> 00:53:50,660
usefulness it basically means that the

00:53:48,290 --> 00:53:54,170
the constructor dies if there's if

00:53:50,660 --> 00:53:57,380
there's a an abstract method within the

00:53:54,170 --> 00:53:59,330
method hierarchy it puts a lot of what

00:53:57,380 --> 00:54:02,240
we call it there's a lot of forces a lot

00:53:59,330 --> 00:54:03,830
of work into the constructor to do this

00:54:02,240 --> 00:54:07,440
I haven't figured out how to make that

00:54:03,830 --> 00:54:11,430
basic emeritus at work away

00:54:07,440 --> 00:54:13,289
so yeah but they unit check like I said

00:54:11,430 --> 00:54:16,170
everything everything should be done by

00:54:13,289 --> 00:54:20,670
the time you hit the run face okay how

00:54:16,170 --> 00:54:24,539
we doing on time we done we okay we got

00:54:20,670 --> 00:54:25,049
15 minutes and people any other

00:54:24,539 --> 00:54:28,680
questions

00:54:25,049 --> 00:54:32,609
anything no okay live them I just

00:54:28,680 --> 00:54:34,970
released a CPM come on

00:54:32,609 --> 00:54:34,970
thank you

00:54:36,620 --> 00:54:39,790

YouTube URL: https://www.youtube.com/watch?v=w5U7eoeuO90


