Title: Walt Mankowski - "Perl One-Liners"
Publication date: 2017-06-23
Playlist: TPC 2017 in DC
Description: 
	One-liners aren't just for gurus and obfuscated Perl contests. Anyone can learn a few simple command-line switches and become more productive. If you're new to Perl, you'll be amazed at how much you can accomplish in under 80 characters. Even if you already write the occasional one-liner in Perl, chances are you're not taking advantage of all the tricks and shortcuts you could be. You too can become a command-line ninja!

Walt works as a postdoc at Drexel University, where we use high-end computer gaming hardware, combined with techniques from information theory, machine learning, and computer vision, to assist biologists in processing and visualizing terabytes of 2D and 3D microscope images. In his spare time he helps organize the Philadelphia Perl Mongers and the Philadelphia Linux Users Group.
Captions: 
	00:00:00,170 --> 00:00:07,080
thank you um okay so actually I've given

00:00:05,730 --> 00:00:08,370
this talk a number of times as I was

00:00:07,080 --> 00:00:10,309
saying in the beginning I first gave

00:00:08,370 --> 00:00:13,380
this at the Pittsburgh pearl workshop in

00:00:10,309 --> 00:00:15,120
2007 and I'll say it hasn't really made

00:00:13,380 --> 00:00:16,680
some updates to it but it's essentially

00:00:15,120 --> 00:00:20,460
the same talk if you've seen it you

00:00:16,680 --> 00:00:22,140
should feel free to go also like almost

00:00:20,460 --> 00:00:23,970
every everything here is pro/5 there's

00:00:22,140 --> 00:00:25,890
nothing Perl 6 about this at all

00:00:23,970 --> 00:00:28,230
actually I was talking to some people at

00:00:25,890 --> 00:00:30,650
lunch and some of the things do work in

00:00:28,230 --> 00:00:32,790
Perl 6 probably other things don't I

00:00:30,650 --> 00:00:33,989
can't I can't really guarantee what's

00:00:32,790 --> 00:00:36,960
going to work and what doesn't because

00:00:33,989 --> 00:00:38,730
I've ever used Perl 6 myself and also

00:00:36,960 --> 00:00:39,989
the other disclaimer is that I'm only

00:00:38,730 --> 00:00:41,700
really kind of talk about the highlights

00:00:39,989 --> 00:00:43,230
of things you can do pretty much for

00:00:41,700 --> 00:00:44,280
every one of the things I'm going to go

00:00:43,230 --> 00:00:46,350
through there's a whole bunch of other

00:00:44,280 --> 00:00:47,910
options that you might want to use it

00:00:46,350 --> 00:00:49,640
I'll have some resources at the end in

00:00:47,910 --> 00:00:52,590
particular I don't have this at the end

00:00:49,640 --> 00:00:54,989
because if you look at the Perl run pod

00:00:52,590 --> 00:00:57,870
file it goes into far more detail but

00:00:54,989 --> 00:00:58,260
I'm going to go into so with that let's

00:00:57,870 --> 00:01:03,449
go on

00:00:58,260 --> 00:01:05,280
so also I'm looking for a job so if you

00:01:03,449 --> 00:01:06,840
if you have a job come see me if you

00:01:05,280 --> 00:01:09,840
have an opening come see me afterwards

00:01:06,840 --> 00:01:11,700
so so what's the one-liner so I mean

00:01:09,840 --> 00:01:14,159
mark work shows some of these one-liners

00:01:11,700 --> 00:01:19,380
I had a few sort of cornball one-liners

00:01:14,159 --> 00:01:21,570
to whatever so I suppose these are these

00:01:19,380 --> 00:01:24,570
are like joke one liners so with the

00:01:21,570 --> 00:01:27,479
Perl one-liner a promo liner is a

00:01:24,570 --> 00:01:30,210
complete pearl Perl program written

00:01:27,479 --> 00:01:33,350
entirely at the command line I feel like

00:01:30,210 --> 00:01:38,400
this is kind of saving off a little bit

00:01:33,350 --> 00:01:39,869
so what does that mean so so and you can

00:01:38,400 --> 00:01:42,960
use this so you can use this to write

00:01:39,869 --> 00:01:46,500
like kind of do guru stuff it up

00:01:42,960 --> 00:01:48,780
obfuscated Perl and um I'm hoping to

00:01:46,500 --> 00:01:52,500
demystify this and feel like it can look

00:01:48,780 --> 00:01:55,140
very close I want to say but I could

00:01:52,500 --> 00:01:57,329
really do that too you can look very

00:01:55,140 --> 00:01:59,399
intimidating and it could look kind of

00:01:57,329 --> 00:02:01,530
cryptic but it turns out that it's

00:01:59,399 --> 00:02:03,210
really useful what I volunteered after I

00:02:01,530 --> 00:02:04,560
always struggle to write these before I

00:02:03,210 --> 00:02:07,259
do the talk to the principal Perl

00:02:04,560 --> 00:02:08,819
workshop and now that I understand I use

00:02:07,259 --> 00:02:10,410
these almost literally every single day

00:02:08,819 --> 00:02:11,160
I write some Perl one-liners to do

00:02:10,410 --> 00:02:14,910
things

00:02:11,160 --> 00:02:21,030
so hopefully you all will find them as

00:02:14,910 --> 00:02:23,730
as useful as I do and a publisher should

00:02:21,030 --> 00:02:26,070
have turned off notifications what they

00:02:23,730 --> 00:02:27,360
may come up so up so why do I even use

00:02:26,070 --> 00:02:29,250
pearl one-liners aside for the being

00:02:27,360 --> 00:02:31,890
really useful is that what pearl has

00:02:29,250 --> 00:02:33,810
this reputation for producing unreadable

00:02:31,890 --> 00:02:38,070
and unmaintainable code we've all heard

00:02:33,810 --> 00:02:40,560
this right and you know there's been a

00:02:38,070 --> 00:02:42,720
lot of work on tools and techniques you

00:02:40,560 --> 00:02:44,130
know many of the other talks here the

00:02:42,720 --> 00:02:45,570
bottom pearl talks and other things to

00:02:44,130 --> 00:02:47,850
get around that and it's fine I'm not

00:02:45,570 --> 00:02:49,140
saying that's a problem but you know we

00:02:47,850 --> 00:02:50,700
shouldn't lose sight of the fact that

00:02:49,140 --> 00:02:52,080
pearl is still really good at doing

00:02:50,700 --> 00:02:54,120
these sort of quick and dirty glue

00:02:52,080 --> 00:02:57,150
things to just do one little job and get

00:02:54,120 --> 00:03:00,390
done with it and like nothing's quicker

00:02:57,150 --> 00:03:02,520
and dirtier than oh then a one-liner but

00:03:00,390 --> 00:03:04,140
suppose like you don't even really write

00:03:02,520 --> 00:03:06,240
pearl for a living anymore certainly

00:03:04,140 --> 00:03:09,270
like I would say I had given this talk

00:03:06,240 --> 00:03:10,620
to like undergrads at Drexel who many of

00:03:09,270 --> 00:03:12,960
whom were not doing pearl at all they

00:03:10,620 --> 00:03:16,350
were doing Java or C or all these other

00:03:12,960 --> 00:03:18,330
languages and I spent like the last five

00:03:16,350 --> 00:03:19,920
years as a postdoc at Drexel working

00:03:18,330 --> 00:03:21,959
primarily as a MATLAB programmer but

00:03:19,920 --> 00:03:24,150
still I found uses to write pearl one

00:03:21,959 --> 00:03:28,380
liners and why is that

00:03:24,150 --> 00:03:30,480
well text files are everywhere and if

00:03:28,380 --> 00:03:32,100
you're at the UNIX command line even in

00:03:30,480 --> 00:03:34,020
Windows you can get it to use command

00:03:32,100 --> 00:03:36,209
line through cygwin or through this new

00:03:34,020 --> 00:03:39,570
batch prompt you can get in Windows 10

00:03:36,209 --> 00:03:41,520
and get access to them they're both text

00:03:39,570 --> 00:03:45,209
files and even like file names are also

00:03:41,520 --> 00:03:46,620
text files that you can use and we all

00:03:45,209 --> 00:03:48,600
know this if we had command line right

00:03:46,620 --> 00:03:50,220
that everything is text and now you

00:03:48,600 --> 00:03:51,840
create new programs quote-unquote

00:03:50,220 --> 00:03:54,090
programs by just chaining a bunch of

00:03:51,840 --> 00:03:56,910
things together else and there's

00:03:54,090 --> 00:03:59,310
zillions of things are small subsets but

00:03:56,910 --> 00:04:02,940
um no per watt liners fit really well

00:03:59,310 --> 00:04:04,410
into this into this speech and you know

00:04:02,940 --> 00:04:05,790
pretty much everything I'm going to say

00:04:04,410 --> 00:04:08,190
like many of the things I'm going to

00:04:05,790 --> 00:04:10,560
show you can be you know also done with

00:04:08,190 --> 00:04:11,850
the UNIX command-line tools but you know

00:04:10,560 --> 00:04:14,070
you can also do them in Perl so I'm

00:04:11,850 --> 00:04:15,870
often it's more it's easier to do them

00:04:14,070 --> 00:04:17,040
in Perl 10 to do them in things if

00:04:15,870 --> 00:04:20,250
you're used to using Perl for other

00:04:17,040 --> 00:04:22,080
things you know for your coding why not

00:04:20,250 --> 00:04:24,139
use them as part of your command line

00:04:22,080 --> 00:04:29,300
put those parts having a party

00:04:24,139 --> 00:04:30,889
command-line tool kit as well and so you

00:04:29,300 --> 00:04:33,229
can become even if you look language you

00:04:30,889 --> 00:04:35,060
can become like this this like command

00:04:33,229 --> 00:04:37,819
line let's pro online or ninja we're

00:04:35,060 --> 00:04:39,259
great so yeah you can be this like

00:04:37,819 --> 00:04:41,599
little kind although I had this I think

00:04:39,259 --> 00:04:43,460
I just had like command line ninja the

00:04:41,599 --> 00:04:46,460
description at one point but it's kind

00:04:43,460 --> 00:04:48,169
of cute anyway so and you can get your

00:04:46,460 --> 00:04:49,639
job done faster and it frees you up for

00:04:48,169 --> 00:04:53,060
more important things like that right

00:04:49,639 --> 00:04:54,530
when we all we all like that or that I

00:04:53,060 --> 00:04:56,060
think I put that in what I was giving to

00:04:54,530 --> 00:04:59,000
talk to undergrads who couldn't do

00:04:56,060 --> 00:05:00,139
couldn't drink this okay so quick

00:04:59,000 --> 00:05:02,360
introduction so how do you write a raw

00:05:00,139 --> 00:05:04,969
one-liner in Perl so here is like the

00:05:02,360 --> 00:05:07,969
simplest one-liner you can you can write

00:05:04,969 --> 00:05:09,529
in Perl and how does it work

00:05:07,969 --> 00:05:10,969
oh so of course you run this is command

00:05:09,529 --> 00:05:16,069
line a prints hello world just like you

00:05:10,969 --> 00:05:20,479
would think so the key thing is this -

00:05:16,069 --> 00:05:23,120
'flag so if you write if you say - e

00:05:20,479 --> 00:05:25,129
then the parameter that follows it is a

00:05:23,120 --> 00:05:30,279
Perl program in this case our pro

00:05:25,129 --> 00:05:33,199
program just is prints hello world okay

00:05:30,279 --> 00:05:35,449
now it's important unless it's like I

00:05:33,199 --> 00:05:37,190
don't know maybe if you just have it say

00:05:35,449 --> 00:05:38,539
say print but we have anything this

00:05:37,190 --> 00:05:40,699
could have multiple things you have to

00:05:38,539 --> 00:05:43,039
have to be a single parameter so that

00:05:40,699 --> 00:05:45,860
means that all UNIX you have to put it

00:05:43,039 --> 00:05:47,750
in single quotes to avoid any kind of

00:05:45,860 --> 00:05:48,919
shell expansion because often there's

00:05:47,750 --> 00:05:49,969
going to be dollar signs in there you

00:05:48,919 --> 00:05:52,099
don't want the dot you don't want the

00:05:49,969 --> 00:05:53,479
shell expanding that the dollar signs

00:05:52,099 --> 00:05:55,939
you want the dollar signs to get taxed a

00:05:53,479 --> 00:05:57,949
Perl and you have to put in some way so

00:05:55,939 --> 00:06:00,289
that it becomes a single parameter that

00:05:57,949 --> 00:06:03,080
gets passed into the Perl the Perl

00:06:00,289 --> 00:06:04,129
interpreter I say double quotes in

00:06:03,080 --> 00:06:07,009
Windows that's only if you're at the

00:06:04,129 --> 00:06:08,270
command prompt in a command shell or

00:06:07,009 --> 00:06:09,800
whether it's a shell or whatever they

00:06:08,270 --> 00:06:11,330
call it in Windows if you're in there

00:06:09,800 --> 00:06:14,029
you know there's other ways to do it

00:06:11,330 --> 00:06:15,560
like I said cygwin or the new bat shell

00:06:14,029 --> 00:06:20,089
then you can still put it single quotes

00:06:15,560 --> 00:06:21,529
just like any other UNIX prompt but of

00:06:20,089 --> 00:06:23,599
course then if you pretty double quotes

00:06:21,529 --> 00:06:24,889
then you have to escape all the all the

00:06:23,599 --> 00:06:27,529
dollar signs because then they will get

00:06:24,889 --> 00:06:29,300
expanded down okay some other things you

00:06:27,529 --> 00:06:31,490
don't need a final semicolon because a

00:06:29,300 --> 00:06:33,469
single statement in this case sometimes

00:06:31,490 --> 00:06:35,719
you will sometimes you won't and you

00:06:33,469 --> 00:06:36,790
know I'm not using stricter warnings

00:06:35,719 --> 00:06:38,710
because it's like

00:06:36,790 --> 00:06:41,740
just you can see what's going on there

00:06:38,710 --> 00:06:44,710
right so and there's no tests of course

00:06:41,740 --> 00:06:46,810
so for this is simple enough but aha

00:06:44,710 --> 00:06:48,730
some walk some more complicated examples

00:06:46,810 --> 00:06:50,320
of course if you're using a one-liner as

00:06:48,730 --> 00:06:51,340
part of a bigger workflow that's going

00:06:50,320 --> 00:06:53,530
into production of course you want to

00:06:51,340 --> 00:06:54,700
test it but most of the things that I'm

00:06:53,530 --> 00:06:56,320
going to show you are things that I just

00:06:54,700 --> 00:06:57,940
put together on the command line into a

00:06:56,320 --> 00:07:00,130
simple a single thing and then forgot

00:06:57,940 --> 00:07:01,750
about them so in that case I mean you

00:07:00,130 --> 00:07:04,390
can see the entire program right there

00:07:01,750 --> 00:07:06,910
so often like I'm not going to be

00:07:04,390 --> 00:07:10,270
writing strict your tests or often even

00:07:06,910 --> 00:07:11,500
my variables for what I'm doing it's not

00:07:10,270 --> 00:07:12,790
to say that there aren't good things but

00:07:11,500 --> 00:07:14,020
in a bigger program of course you want

00:07:12,790 --> 00:07:14,560
to use them for a command for a

00:07:14,020 --> 00:07:19,180
one-liner

00:07:14,560 --> 00:07:21,520
you can often just skip them so in one

00:07:19,180 --> 00:07:24,610
sense I'm kind of done already because

00:07:21,520 --> 00:07:27,240
that's how you write a one-liner and we

00:07:24,610 --> 00:07:31,030
can we can run off to the pub now right

00:07:27,240 --> 00:07:33,910
but everything else I'm going to show

00:07:31,030 --> 00:07:38,050
you is just syntactic sugar to make it

00:07:33,910 --> 00:07:40,240
easier to write wall miners and you know

00:07:38,050 --> 00:07:42,850
proper doors really like syntactic sugar

00:07:40,240 --> 00:07:45,100
I love that picture is something I did

00:07:42,850 --> 00:07:51,430
to go to Europe and find let's I know

00:07:45,100 --> 00:07:53,110
summer I've never seen I've never seen

00:07:51,430 --> 00:07:55,510
them in I've never seen those particular

00:07:53,110 --> 00:07:58,000
Haribo's in the US I've looked for them

00:07:55,510 --> 00:08:07,300
very hard I've seen lots of other

00:07:58,000 --> 00:08:10,720
Haribo's those are that's German for

00:08:07,300 --> 00:08:14,950
Perl eggs and it says they make it makes

00:08:10,720 --> 00:08:18,130
kids happy and it's um they're fat-free

00:08:14,950 --> 00:08:23,320
that's what and uh air vaasana' and a

00:08:18,130 --> 00:08:24,940
bento means yep okay so the first flag

00:08:23,320 --> 00:08:27,340
we're going to talk about is the Dutch L

00:08:24,940 --> 00:08:29,230
flag so what that does is it

00:08:27,340 --> 00:08:32,200
automatically adds a new line to

00:08:29,230 --> 00:08:33,940
whatever you print so simple example

00:08:32,200 --> 00:08:38,500
this is the example I showed you before

00:08:33,940 --> 00:08:39,610
and with L you can leave off that /n so

00:08:38,500 --> 00:08:41,110
it's not a big deal here you're only

00:08:39,610 --> 00:08:42,520
saving two characters but you know they

00:08:41,110 --> 00:08:44,710
add up and also if you have a variable

00:08:42,520 --> 00:08:45,790
that you don't have to put you'll have

00:08:44,710 --> 00:08:47,890
to put quotes around it like you're

00:08:45,790 --> 00:08:49,760
doing here so also notice that the

00:08:47,890 --> 00:08:52,830
string is in double

00:08:49,760 --> 00:08:55,710
the entire program is in single quotes

00:08:52,830 --> 00:08:57,750
so that way you can put the thing that

00:08:55,710 --> 00:08:59,220
you're printing in double quotes so

00:08:57,750 --> 00:09:04,230
single quotes around the outside double

00:08:59,220 --> 00:09:07,200
quotes on the inside okay so we all know

00:09:04,230 --> 00:09:09,690
that in Perl 10 by the 10 they added say

00:09:07,200 --> 00:09:10,830
that lets you it's like print they set

00:09:09,690 --> 00:09:13,020
that automatically puts a new line at

00:09:10,830 --> 00:09:15,300
the end right so suddenly that doesn't

00:09:13,020 --> 00:09:17,100
work with - lowercase e you get this

00:09:15,300 --> 00:09:18,570
ugly error message really that's what

00:09:17,100 --> 00:09:22,649
you got inside 10 I'm assuming is

00:09:18,570 --> 00:09:25,380
something similar to that today so why

00:09:22,649 --> 00:09:27,690
does it happen that happened because in

00:09:25,380 --> 00:09:29,870
order to avoid breaking backwards

00:09:27,690 --> 00:09:34,680
compatibility it's turned off by default

00:09:29,870 --> 00:09:36,600
so you know in is in if you're writing

00:09:34,680 --> 00:09:39,839
it in a normal program you have to say

00:09:36,600 --> 00:09:42,690
use 5 that 10 that's 0 but you don't

00:09:39,839 --> 00:09:44,940
have to do that in a in a one-liner so

00:09:42,690 --> 00:09:47,520
to turn on in a one liner you can use

00:09:44,940 --> 00:09:50,399
that's capital e instead of - lowercase

00:09:47,520 --> 00:09:51,540
e and if you do that then you don't have

00:09:50,399 --> 00:09:53,220
to put the new line in either and you

00:09:51,540 --> 00:09:54,420
can say say instead of print and die

00:09:53,220 --> 00:09:56,520
you're saving about like 5 or 6

00:09:54,420 --> 00:09:58,500
characters which is kind of nice so I

00:09:56,520 --> 00:10:00,630
almost always write my one-liners now

00:09:58,500 --> 00:10:02,430
with - capital e instead of lowercase e

00:10:00,630 --> 00:10:08,970
because then you can say say and you're

00:10:02,430 --> 00:10:11,640
not taping as much so what - he really

00:10:08,970 --> 00:10:14,100
does is it tells pro to turn on all of

00:10:11,640 --> 00:10:16,080
its optional features and they have to

00:10:14,100 --> 00:10:17,670
stop adding optional features because

00:10:16,080 --> 00:10:19,290
I've run out of room to put them all on

00:10:17,670 --> 00:10:21,779
this slide I added a whole bunch of them

00:10:19,290 --> 00:10:24,089
last night I think fortunately like

00:10:21,779 --> 00:10:26,459
almost all of these like aside from say

00:10:24,089 --> 00:10:28,320
I think you're unlikely to want to use

00:10:26,459 --> 00:10:30,480
any of these in a one-liner maybe the

00:10:28,320 --> 00:10:31,740
Unicode things you might but you're not

00:10:30,480 --> 00:10:33,480
going to probably be writing a switch

00:10:31,740 --> 00:10:35,430
switch Satan you probably want to write

00:10:33,480 --> 00:10:37,170
a real program because you want to you

00:10:35,430 --> 00:10:38,640
want to get things right and some of the

00:10:37,170 --> 00:10:41,550
other things like subroutine signatures

00:10:38,640 --> 00:10:43,320
things like that you might not um maybe

00:10:41,550 --> 00:10:45,029
maybe Rick would want to view the

00:10:43,320 --> 00:10:47,579
declared refs which is the just got

00:10:45,029 --> 00:10:49,970
added inside that 26 but he's not even

00:10:47,579 --> 00:10:49,970
here

00:10:50,510 --> 00:10:53,959
maybe FC

00:10:54,670 --> 00:11:02,720
yeah so our CSV you might but most most

00:10:59,180 --> 00:11:04,130
another once you went in um and I even

00:11:02,720 --> 00:11:05,930
though Wally's get turned on I'd ever

00:11:04,130 --> 00:11:07,730
run into an issue I think just because I

00:11:05,930 --> 00:11:10,610
normally and doing something simple okay

00:11:07,730 --> 00:11:12,800
so anyway so this actually L is just the

00:11:10,610 --> 00:11:14,240
beginning of things that you can do and

00:11:12,800 --> 00:11:16,760
now we're starting into the really

00:11:14,240 --> 00:11:18,860
powerful things so also in what you want

00:11:16,760 --> 00:11:20,660
to do in a one-liner is and also what

00:11:18,860 --> 00:11:22,370
were you doing what you're doing shell

00:11:20,660 --> 00:11:24,620
programming is a type programming is

00:11:22,370 --> 00:11:27,139
you've got some files you want to go do

00:11:24,620 --> 00:11:29,949
some sort of processing over every line

00:11:27,139 --> 00:11:33,260
in the file and do something with it so

00:11:29,949 --> 00:11:38,630
this is a simple program where it's

00:11:33,260 --> 00:11:40,130
going to print all of the characters all

00:11:38,630 --> 00:11:44,720
the lines that are longer than 80

00:11:40,130 --> 00:11:46,550
characters long and now this is all fine

00:11:44,720 --> 00:11:50,810
and this will work just fine but this is

00:11:46,550 --> 00:11:53,600
a really common common pattern that

00:11:50,810 --> 00:11:58,339
comes up all over and over again hi mark

00:11:53,600 --> 00:12:01,750
and so there's um so that gets really

00:11:58,339 --> 00:12:04,550
tedious so if you add the dash end flag

00:12:01,750 --> 00:12:06,860
then it automatically puts a loop around

00:12:04,550 --> 00:12:10,310
things so really all the code that goes

00:12:06,860 --> 00:12:12,199
after the dash even gets you know

00:12:10,310 --> 00:12:15,199
implicitly put into a while loop like a

00:12:12,199 --> 00:12:16,730
while less than greater than loop so

00:12:15,199 --> 00:12:18,230
what does that mean in practice so that

00:12:16,730 --> 00:12:20,510
means so this is the program we had

00:12:18,230 --> 00:12:26,149
before and again this is a this works

00:12:20,510 --> 00:12:28,070
just fine but if you say - - n now all

00:12:26,149 --> 00:12:31,370
you're doing is just putting the body of

00:12:28,070 --> 00:12:34,040
a loop down here and your loop is over

00:12:31,370 --> 00:12:37,579
you know potentially you know all the

00:12:34,040 --> 00:12:39,410
dot P that PL files in in your directory

00:12:37,579 --> 00:12:40,940
right and you know you've got an entire

00:12:39,410 --> 00:12:42,589
program that's what they're doing

00:12:40,940 --> 00:12:47,449
looping just with that right it's super

00:12:42,589 --> 00:12:48,740
useful okay but now you just have this

00:12:47,449 --> 00:12:50,540
loop what happens if you want to do some

00:12:48,740 --> 00:12:52,339
processing that's not in that loop well

00:12:50,540 --> 00:12:54,560
then you use begin and end blocks so

00:12:52,339 --> 00:12:56,360
let's say we have a simple text file it

00:12:54,560 --> 00:13:01,160
just has one two three and four on four

00:12:56,360 --> 00:13:03,610
lines right if we add them if we want to

00:13:01,160 --> 00:13:03,610
add them up

00:13:03,960 --> 00:13:08,000
we say dash n and then a capital e

00:13:06,180 --> 00:13:10,649
because I want to say say over here and

00:13:08,000 --> 00:13:13,230
we just take every one of the lines and

00:13:10,649 --> 00:13:14,850
add you know keep adding them to dollar

00:13:13,230 --> 00:13:16,380
sign s and again I'm not using a my

00:13:14,850 --> 00:13:18,330
variable and you could if you wanted to

00:13:16,380 --> 00:13:19,529
but because I don't have warnings it's

00:13:18,330 --> 00:13:21,029
not going to warn me about that and it's

00:13:19,529 --> 00:13:27,000
a one-liner right it's like 20

00:13:21,029 --> 00:13:29,040
characters long so this is the block

00:13:27,000 --> 00:13:31,830
this is the what's going to be inside

00:13:29,040 --> 00:13:33,209
the loop right so when its own ow at the

00:13:31,830 --> 00:13:34,860
end of the loop is added everything up

00:13:33,209 --> 00:13:36,540
but we have to print it out so in order

00:13:34,860 --> 00:13:41,250
to print it out we put that into an end

00:13:36,540 --> 00:13:43,080
block and the code that's in this end

00:13:41,250 --> 00:13:44,850
block says say dollar sign and that's

00:13:43,080 --> 00:13:46,200
going to print it out and when it prints

00:13:44,850 --> 00:13:52,140
out it's going to print 10 because it's

00:13:46,200 --> 00:13:55,920
1 + 2 + 3 / 4 equals 10 okay if whoops

00:13:52,140 --> 00:13:57,839
what did i do there right if you want to

00:13:55,920 --> 00:13:59,880
multiply them instead of dividing then

00:13:57,839 --> 00:14:01,260
you have to initialize it so now I'm

00:13:59,880 --> 00:14:04,020
going to say P for product just like

00:14:01,260 --> 00:14:06,209
dollar sign s was for for some now we

00:14:04,020 --> 00:14:08,430
have to initialize the product to 1 and

00:14:06,209 --> 00:14:10,740
then we actually multiply all of them to

00:14:08,430 --> 00:14:12,660
1 so it's 1 times its gonna start with 1

00:14:10,740 --> 00:14:15,810
and then 1 times 1 times 2 times 3 times

00:14:12,660 --> 00:14:17,580
4 and that's 24 so now we have to begin

00:14:15,810 --> 00:14:19,560
block where we initialize things and we

00:14:17,580 --> 00:14:24,029
have an end block where we print things

00:14:19,560 --> 00:14:27,290
out okay everyone following so far any

00:14:24,029 --> 00:14:27,290
questions so far

00:14:27,709 --> 00:14:30,709
yes

00:14:43,709 --> 00:14:48,970
no no the question was in the program

00:14:47,079 --> 00:14:52,860
that's created are there 10 n blocks why

00:14:48,970 --> 00:14:52,860
would there why would there be 10

00:14:53,730 --> 00:15:05,769
no there's the thumbs file is 1 2 3 & 4

00:14:59,790 --> 00:15:08,559
no because the what is essentially doing

00:15:05,769 --> 00:15:12,040
is your code the normal code goes into

00:15:08,559 --> 00:15:14,019
this part and the begin blocks going to

00:15:12,040 --> 00:15:16,240
get run up here if you can see that and

00:15:14,019 --> 00:15:18,069
the end block is going to get run after

00:15:16,240 --> 00:15:19,809
the loop so begin goes before the while

00:15:18,069 --> 00:15:21,369
loop just like the beginner is going to

00:15:19,809 --> 00:15:22,959
run before any of the other code in your

00:15:21,369 --> 00:15:24,610
program just like any other begin block

00:15:22,959 --> 00:15:26,019
with looks probably you don't normally

00:15:24,610 --> 00:15:27,339
write beginning in blocks but that's how

00:15:26,019 --> 00:15:29,679
they work and then the end block will

00:15:27,339 --> 00:15:32,559
run after the rest of your program is

00:15:29,679 --> 00:15:33,910
executed and that's what they're doing

00:15:32,559 --> 00:15:43,120
here is just kind of take piggybacking

00:15:33,910 --> 00:15:44,529
on that behavior all right so so okay so

00:15:43,120 --> 00:15:47,230
here's that here's another common

00:15:44,529 --> 00:15:53,439
pattern where you want to convert a file

00:15:47,230 --> 00:15:57,009
to lowercase so you could try doing

00:15:53,439 --> 00:15:59,249
right so you could do this and so what

00:15:57,009 --> 00:16:01,420
we're going to do is use a TR command to

00:15:59,249 --> 00:16:03,339
take all the characters from A to Z and

00:16:01,420 --> 00:16:06,339
trick capital A to Z and translate them

00:16:03,339 --> 00:16:09,100
to lowercase a to Z and then print them

00:16:06,339 --> 00:16:10,899
out at the end right and if you do this

00:16:09,100 --> 00:16:14,170
it's just going to print them out to

00:16:10,899 --> 00:16:15,519
standard out right if you want to print

00:16:14,170 --> 00:16:17,110
them to a file you redirect it to

00:16:15,519 --> 00:16:18,939
standard out right so this is this is

00:16:17,110 --> 00:16:20,679
fine and it's this will work fine still

00:16:18,939 --> 00:16:22,360
but this is also a pretty common pattern

00:16:20,679 --> 00:16:23,980
where you couldn't do some sort of

00:16:22,360 --> 00:16:25,660
modification to every line in the file

00:16:23,980 --> 00:16:30,429
and then print out whatever you've

00:16:25,660 --> 00:16:32,529
you've got you have at the end so that's

00:16:30,429 --> 00:16:35,889
where the - P flag comes in so that's

00:16:32,529 --> 00:16:37,779
like the - n flag where there's this

00:16:35,889 --> 00:16:41,619
block in the middle where your code is

00:16:37,779 --> 00:16:44,019
going to go except that after after its

00:16:41,619 --> 00:16:45,910
processed every line it prints whatever

00:16:44,019 --> 00:16:47,430
so it says print this is from the

00:16:45,910 --> 00:16:49,230
documentation but really what is

00:16:47,430 --> 00:16:51,960
thing is whatever dollar sign underscore

00:16:49,230 --> 00:16:53,430
is after every line so if you do any

00:16:51,960 --> 00:16:54,480
kind of modifications that line they

00:16:53,430 --> 00:16:56,700
normally are going to be modified

00:16:54,480 --> 00:16:58,200
because it's in this implicit like

00:16:56,700 --> 00:17:00,600
greater than a less than loop everything

00:16:58,200 --> 00:17:02,520
is in dollar sign underscore and then if

00:17:00,600 --> 00:17:04,140
you can modify it and then it prints out

00:17:02,520 --> 00:17:08,520
whatever dollar sign underscore is at

00:17:04,140 --> 00:17:10,400
the end and right if it gets some error

00:17:08,520 --> 00:17:15,929
it's that but that's not that important

00:17:10,400 --> 00:17:17,490
so right so I said so it's like that

00:17:15,929 --> 00:17:19,290
same flag except that print out each

00:17:17,490 --> 00:17:21,300
line when it gets finished with it so

00:17:19,290 --> 00:17:23,880
this is what we had before and this is

00:17:21,300 --> 00:17:25,939
what we had at the end it's a little bit

00:17:23,880 --> 00:17:28,830
down at the bottom I apologize for that

00:17:25,939 --> 00:17:32,190
but basically it just got rid of the

00:17:28,830 --> 00:17:34,470
printing at the end so so all this is

00:17:32,190 --> 00:17:36,450
doing is doing some modification to each

00:17:34,470 --> 00:17:37,890
of the lines and they're just implicitly

00:17:36,450 --> 00:17:40,380
gets printed it gets printed out at the

00:17:37,890 --> 00:17:42,570
end so the useful part of this is comes

00:17:40,380 --> 00:17:44,400
at the well of what I'm going to come up

00:17:42,570 --> 00:17:47,010
you come up with text so some of that

00:17:44,400 --> 00:17:48,750
things I think just between the dash L

00:17:47,010 --> 00:17:52,350
which is it even that useful anymore

00:17:48,750 --> 00:17:54,210
would say and dash n and dash p are the

00:17:52,350 --> 00:17:56,040
two really super useful things and

00:17:54,210 --> 00:17:58,260
because now you can write these entire

00:17:56,040 --> 00:17:59,880
things will loop over files very simply

00:17:58,260 --> 00:18:01,440
just from the command line because

00:17:59,880 --> 00:18:03,270
you're only writing the block and often

00:18:01,440 --> 00:18:12,420
you only have to light write a couple

00:18:03,270 --> 00:18:13,860
lines of code to process the block so so

00:18:12,420 --> 00:18:16,800
one thing you might want to do and like

00:18:13,860 --> 00:18:18,059
often with this the - PFLAG you're

00:18:16,800 --> 00:18:20,400
printing out what you really want to do

00:18:18,059 --> 00:18:21,559
is not just do some kind of report like

00:18:20,400 --> 00:18:23,790
maybe you would take that report and

00:18:21,559 --> 00:18:26,520
spit it out to standard out but you also

00:18:23,790 --> 00:18:29,190
might want to make a bunch of edits to a

00:18:26,520 --> 00:18:34,740
file and save it back out so that's what

00:18:29,190 --> 00:18:39,110
the - I flag does so if you do this what

00:18:34,740 --> 00:18:41,550
that's going to do is read in a dot PL

00:18:39,110 --> 00:18:43,590
right so he do this actually it's going

00:18:41,550 --> 00:18:45,330
to read in a RPL change all the

00:18:43,590 --> 00:18:49,440
occurrences of food to bar and then

00:18:45,330 --> 00:18:50,910
print out okay and this is because you

00:18:49,440 --> 00:18:53,850
did some modifications then it prints

00:18:50,910 --> 00:18:55,650
whatever is in dollar sign underscore if

00:18:53,850 --> 00:18:57,390
you edit it in place and I'll say why I

00:18:55,650 --> 00:19:00,320
have quotes there in a second

00:18:57,390 --> 00:19:00,320
it

00:19:00,610 --> 00:19:08,350
so add the - p.s.i flag with it as well

00:19:03,940 --> 00:19:11,170
then it will change all the occurrences

00:19:08,350 --> 00:19:15,130
of food to bar and then save it back

00:19:11,170 --> 00:19:17,350
into a dot PL so whatever is in eat at

00:19:15,130 --> 00:19:18,970
PL before it gets clobbered and the new

00:19:17,350 --> 00:19:21,550
version has all the occurrences of food

00:19:18,970 --> 00:19:23,860
change to bar this is really useful if

00:19:21,550 --> 00:19:26,050
you're doing things like changing like a

00:19:23,860 --> 00:19:27,550
copyright notification or you decide you

00:19:26,050 --> 00:19:28,750
have a whole bunch of code that you want

00:19:27,550 --> 00:19:31,930
to change all the names of the variables

00:19:28,750 --> 00:19:33,910
from something to something else it's

00:19:31,930 --> 00:19:35,440
really useful for that the reason I say

00:19:33,910 --> 00:19:37,120
in place is because I think it doesn't

00:19:35,440 --> 00:19:38,950
actually keep the same I know that was

00:19:37,120 --> 00:19:40,240
there before so it was a hard link it

00:19:38,950 --> 00:19:42,010
gets changed and it's not a hard link

00:19:40,240 --> 00:19:44,680
anymore so there's some like subtle

00:19:42,010 --> 00:19:46,150
differences in that but essentially

00:19:44,680 --> 00:19:48,910
that's what it's doing although this is

00:19:46,150 --> 00:19:51,280
kind of dangerous right so I'll get to

00:19:48,910 --> 00:19:55,540
that in a second you can also edit

00:19:51,280 --> 00:19:58,090
multiple files just by using stars like

00:19:55,540 --> 00:20:01,150
doing shell expansion like that and or

00:19:58,090 --> 00:20:03,580
blob expansion and if you do it there

00:20:01,150 --> 00:20:05,500
it'll change all the foods to bars and

00:20:03,580 --> 00:20:07,690
all the dot PL files that you have if

00:20:05,500 --> 00:20:10,180
you had if you were in like batch or Z

00:20:07,690 --> 00:20:11,710
shell you can say star star slash star

00:20:10,180 --> 00:20:16,570
net p/l it will do everything in the sub

00:20:11,710 --> 00:20:18,430
directory so you can see like if you

00:20:16,570 --> 00:20:20,410
have like some sort of very simple

00:20:18,430 --> 00:20:22,600
change you want to make for a whole like

00:20:20,410 --> 00:20:24,340
one directory or a whole like subtree

00:20:22,600 --> 00:20:28,060
it's really simple to do just by doing

00:20:24,340 --> 00:20:29,740
it that way right but obviously it's

00:20:28,060 --> 00:20:31,740
dangerous right because you can make one

00:20:29,740 --> 00:20:36,190
mistake you've clobbered everything else

00:20:31,740 --> 00:20:39,250
so you can also specify a backup file so

00:20:36,190 --> 00:20:43,270
this is what I had before and if you put

00:20:39,250 --> 00:20:47,530
some sort of an extension after the - I

00:20:43,270 --> 00:20:50,380
then it saves the original style in

00:20:47,530 --> 00:20:56,920
Phatak that the same of the file dot

00:20:50,380 --> 00:20:58,960
that extension or so in this case the

00:20:56,920 --> 00:21:01,690
original a dot P L is going to be

00:20:58,960 --> 00:21:05,320
renamed to aid that back a that PL that

00:21:01,690 --> 00:21:09,820
back because there's a dot bak after the

00:21:05,320 --> 00:21:12,250
I and then whatever so the resulting a

00:21:09,820 --> 00:21:13,149
that PL will be the new file if that

00:21:12,250 --> 00:21:14,919
makes sense and

00:21:13,149 --> 00:21:16,989
doesn't have to be dot like if you

00:21:14,919 --> 00:21:19,239
didn't leave this back if you let the

00:21:16,989 --> 00:21:22,779
dot out if you let the dot off of here

00:21:19,239 --> 00:21:26,769
and just say I back the original file we

00:21:22,779 --> 00:21:30,809
need a dot P lb a K without the dot so

00:21:26,769 --> 00:21:33,159
you need to have the dot there it's

00:21:30,809 --> 00:21:34,509
still a little dangerous because if you

00:21:33,159 --> 00:21:36,249
run in a second time you realize that

00:21:34,509 --> 00:21:37,779
something that's screwed up now the

00:21:36,249 --> 00:21:40,989
second time you are clobbering things

00:21:37,779 --> 00:21:42,669
but this you can do it once and you can

00:21:40,989 --> 00:21:44,710
do it that way I find that I don't use

00:21:42,669 --> 00:21:45,759
this much anymore because if you have

00:21:44,710 --> 00:21:48,219
everything in version control

00:21:45,759 --> 00:21:51,539
if you screw something up in your eye

00:21:48,219 --> 00:21:53,710
you can get back pretty easily and it's

00:21:51,539 --> 00:21:54,820
you're already kind of used to doing

00:21:53,710 --> 00:21:56,229
this kind of stuff in your version

00:21:54,820 --> 00:21:58,599
control system get or whatever you're

00:21:56,229 --> 00:22:00,759
using and so it can be a little less

00:21:58,599 --> 00:22:02,529
confusing than trying to worry whatever

00:22:00,759 --> 00:22:06,070
you're going to get like dealing with is

00:22:02,529 --> 00:22:08,320
that that files but so this is a super

00:22:06,070 --> 00:22:10,659
useful thing if you want to have a one

00:22:08,320 --> 00:22:15,820
automate doing a bunch of kind of simple

00:22:10,659 --> 00:22:21,909
edits to supplies okay

00:22:15,820 --> 00:22:24,669
next Auto split so if you put the dash a

00:22:21,909 --> 00:22:27,190
flag and that automatically splits every

00:22:24,669 --> 00:22:29,019
line so off does this automatically so

00:22:27,190 --> 00:22:32,049
I'm not sure whether that a is supposed

00:22:29,019 --> 00:22:33,339
to be for awk or for Auto split whatever

00:22:32,049 --> 00:22:37,179
you want to think about it is so

00:22:33,339 --> 00:22:39,519
normally it splits things on space and

00:22:37,179 --> 00:22:43,080
you can use the dash capital F flag to

00:22:39,519 --> 00:22:45,909
split on something other than space oh

00:22:43,080 --> 00:22:47,729
and it saves everything when it splits

00:22:45,909 --> 00:22:54,549
it it puts it into the variable at

00:22:47,729 --> 00:22:57,519
capital F so here what it's doing is

00:22:54,549 --> 00:22:59,710
it's running is running the PS command

00:22:57,519 --> 00:23:01,719
and it wants to find all the parents's

00:22:59,710 --> 00:23:04,179
all the processes your parents are in it

00:23:01,719 --> 00:23:07,149
so the parent process ID is the 4th

00:23:04,179 --> 00:23:11,409
column in the output of this particular

00:23:07,149 --> 00:23:12,429
command so it's going to run that and

00:23:11,409 --> 00:23:14,080
it's going to run parallel although

00:23:12,429 --> 00:23:16,389
split things and then it's going to

00:23:14,080 --> 00:23:20,950
split if the 4th column which is in like

00:23:16,389 --> 00:23:22,869
the 0 1 2 3 of all to split things into

00:23:20,950 --> 00:23:24,239
percent F look for the fourth thing and

00:23:22,869 --> 00:23:26,029
if it's one then it will print it out

00:23:24,239 --> 00:23:27,139
yes is that

00:23:26,029 --> 00:23:39,919
so I think I might be a little confusing

00:23:27,139 --> 00:23:42,710
the way I said it so I think that it is

00:23:39,919 --> 00:23:44,299
it must be multiple spaces that's a good

00:23:42,710 --> 00:23:50,599
question the question is is split on one

00:23:44,299 --> 00:23:52,249
space or multiple spaces um I think it's

00:23:50,599 --> 00:23:54,469
on I think it's on the group of

00:23:52,249 --> 00:23:56,389
whitespace can I is that true I think

00:23:54,469 --> 00:23:58,460
I'm sure that this works and so it must

00:23:56,389 --> 00:24:05,659
be it must be it must be going on groups

00:23:58,460 --> 00:24:06,679
of spaces like s plus flashes plus so if

00:24:05,659 --> 00:24:08,599
you want to split on something other

00:24:06,679 --> 00:24:10,489
than spaces like if you want to go

00:24:08,599 --> 00:24:14,859
through Etsy password which is delimited

00:24:10,489 --> 00:24:17,320
by colons then you say - F and here is

00:24:14,859 --> 00:24:19,580
colon and that means split on colons and

00:24:17,320 --> 00:24:21,739
here what I want to print the user IDs

00:24:19,580 --> 00:24:23,509
in the user names which is happened to

00:24:21,739 --> 00:24:24,950
be in this conflict it's a the second

00:24:23,509 --> 00:24:30,049
the third column in the first column

00:24:24,950 --> 00:24:31,219
here or the second in the 0th okay so

00:24:30,049 --> 00:24:35,629
this is one thing that has gotten a

00:24:31,219 --> 00:24:39,440
little easier to use since I first wrote

00:24:35,629 --> 00:24:41,599
it so in pro 5 that 20 they simplified

00:24:39,440 --> 00:24:44,210
how Auto splitting works a little bit so

00:24:41,599 --> 00:24:46,429
now if you specify the dash F flag

00:24:44,210 --> 00:24:47,450
they're assuming that you want to split

00:24:46,429 --> 00:24:56,749
things because why else would you be

00:24:47,450 --> 00:25:00,169
specifying the - like I'm sorry yes yeah

00:24:56,749 --> 00:25:03,190
I I'm guessing it does but I don't know

00:25:00,169 --> 00:25:05,629
off the top of my head you think it does

00:25:03,190 --> 00:25:07,489
yeah I would be surprised if it doesn't

00:25:05,629 --> 00:25:09,379
you might have to put them you might

00:25:07,489 --> 00:25:11,330
have to make sure you put them in single

00:25:09,379 --> 00:25:14,269
quotes I guess if they don't get right

00:25:11,330 --> 00:25:16,909
the question is does the capital F flag

00:25:14,269 --> 00:25:20,259
allow for regular expressions and it

00:25:16,909 --> 00:25:20,259
does yeah

00:25:22,020 --> 00:25:25,500
that's what the fault is multiple spaces

00:25:23,940 --> 00:25:27,240
right yeah I should I should change that

00:25:25,500 --> 00:25:30,750
next time I do it thank you

00:25:27,240 --> 00:25:32,549
great so as of 5.20 if you say that's

00:25:30,750 --> 00:25:34,830
capital F it assumes that you want to

00:25:32,549 --> 00:25:39,390
Auto split so it doesn't you don't have

00:25:34,830 --> 00:25:42,390
to specify dash a and so it assumes it

00:25:39,390 --> 00:25:45,150
implies you've done catch a and if you

00:25:42,390 --> 00:25:46,740
do - a it assumes that your you want to

00:25:45,150 --> 00:25:48,780
loop over all your inputs so it assumes

00:25:46,740 --> 00:25:50,179
that you've set the dash in flag thank

00:25:48,780 --> 00:25:52,410
you

00:25:50,179 --> 00:25:56,790
so that means you can leave a lot of

00:25:52,410 --> 00:26:00,090
letters off when you're running it so so

00:25:56,790 --> 00:26:04,350
now instead of that's a nd you can just

00:26:00,090 --> 00:26:06,720
say that's a EE for this example and for

00:26:04,350 --> 00:26:08,549
this example you can even look at what

00:26:06,720 --> 00:26:11,850
it had before so here was that's AME and

00:26:08,549 --> 00:26:17,700
here's just a CH AE for this one it was

00:26:11,850 --> 00:26:18,990
Al and then F : and here is just - L F :

00:26:17,700 --> 00:26:23,880
so you can we have a few things off

00:26:18,990 --> 00:26:25,770
which is nice if you want to use modules

00:26:23,880 --> 00:26:27,690
so you also include modules from the

00:26:25,770 --> 00:26:31,950
command line and the way you do that is

00:26:27,690 --> 00:26:33,690
with the - capital and the flag so this

00:26:31,950 --> 00:26:35,100
doesn't really save you a lot like you

00:26:33,690 --> 00:26:39,419
can always write a program just like

00:26:35,100 --> 00:26:41,490
this you like peer use lwp simple and

00:26:39,419 --> 00:26:44,760
then get print on the disparate pearl

00:26:41,490 --> 00:26:47,309
workshop website this will be a little

00:26:44,760 --> 00:26:48,750
tricky if you wanted to have and in some

00:26:47,309 --> 00:26:49,770
cases if you wanted to have a - n

00:26:48,750 --> 00:26:52,970
because you'd want to put that in a

00:26:49,770 --> 00:26:56,429
begin block maybe or something like that

00:26:52,970 --> 00:26:58,230
so if you use a - n flag then you can do

00:26:56,429 --> 00:27:01,169
it this way so you just say - em and

00:26:58,230 --> 00:27:03,090
then lwp : : simple and then everything

00:27:01,169 --> 00:27:04,410
else afterwards so it's not really

00:27:03,090 --> 00:27:09,570
saving you a whole lot of time it's

00:27:04,410 --> 00:27:11,669
saving you having to type in use you do

00:27:09,570 --> 00:27:13,200
that if you want to pass parameters in

00:27:11,669 --> 00:27:16,770
like you wanted if you wanted to have

00:27:13,200 --> 00:27:22,220
where you normally say like list utils

00:27:16,770 --> 00:27:24,960
and then - W I forget what's in there

00:27:22,220 --> 00:27:27,270
shuffle shuffle endless details you put

00:27:24,960 --> 00:27:29,040
an equal sign instead of the two

00:27:27,270 --> 00:27:30,090
separate them I should have an example

00:27:29,040 --> 00:27:33,419
of that but I don't

00:27:30,090 --> 00:27:36,419
um okay so that's still a little bit

00:27:33,419 --> 00:27:38,250
ugly so what you can do and I have to

00:27:36,419 --> 00:27:39,299
thank Mike bread for this trick because

00:27:38,250 --> 00:27:43,860
I would have never thought of it myself

00:27:39,299 --> 00:27:46,350
is that is to put any modules or any

00:27:43,860 --> 00:27:49,460
kind of code you might want to use in a

00:27:46,350 --> 00:27:52,289
module from a command line into a module

00:27:49,460 --> 00:27:53,789
and then like in your home directory so

00:27:52,289 --> 00:27:57,510
you're not going to buddy up like the

00:27:53,789 --> 00:28:01,440
your default areas and they call it why

00:27:57,510 --> 00:28:04,080
why that p.m. so in this case why that

00:28:01,440 --> 00:28:07,320
p.m. is just using lwp simple and has a

00:28:04,080 --> 00:28:09,890
one at the end so now you can say

00:28:07,320 --> 00:28:13,950
instead of this you can just say - my

00:28:09,890 --> 00:28:15,299
this is really clever I think and you

00:28:13,950 --> 00:28:17,309
can do you can do more than that because

00:28:15,299 --> 00:28:19,529
like one thing you can also do is put

00:28:17,309 --> 00:28:23,190
some utility functions so what this is

00:28:19,529 --> 00:28:25,020
going to do is um but and this I mean it

00:28:23,190 --> 00:28:26,580
looks like a lot right but I write stuff

00:28:25,020 --> 00:28:28,470
like this all the time I think every

00:28:26,580 --> 00:28:30,270
program program I've ever written his

00:28:28,470 --> 00:28:34,980
head block of code that looks like this

00:28:30,270 --> 00:28:38,340
right so what is that doing that's

00:28:34,980 --> 00:28:40,110
sorting by the the values and then in

00:28:38,340 --> 00:28:45,899
its certainly by the values ends

00:28:40,110 --> 00:28:49,140
printing value and then the key so if

00:28:45,899 --> 00:28:50,850
you have this test file and you want to

00:28:49,140 --> 00:28:55,590
print the occurrences which have them go

00:28:50,850 --> 00:28:59,279
in increasing order you just run a peril

00:28:55,590 --> 00:29:02,039
- my and then any and you accumulate

00:28:59,279 --> 00:29:04,260
them like this very simple and then at

00:29:02,039 --> 00:29:05,700
the end you just run that that script

00:29:04,260 --> 00:29:09,990
from the previous thing and they print

00:29:05,700 --> 00:29:12,090
it out and if you do this you get the

00:29:09,990 --> 00:29:13,919
output that looks like that so that's

00:29:12,090 --> 00:29:17,130
kind of clever I would not have thought

00:29:13,919 --> 00:29:23,039
to do that so so thank to my crib for

00:29:17,130 --> 00:29:25,460
coming up with that idea that's that's

00:29:23,039 --> 00:29:25,460
really cool

00:29:26,900 --> 00:29:40,290
does it work with dots not in ink um oh

00:29:30,750 --> 00:29:42,240
I put um not well I think right that's

00:29:40,290 --> 00:29:45,240
true the question is in fact that 26

00:29:42,240 --> 00:29:46,980
where the dot is not in ink you would I

00:29:45,240 --> 00:29:49,400
say probably not want to do that would

00:29:46,980 --> 00:29:52,679
that be super useful for this anyway

00:29:49,400 --> 00:29:54,000
because you know who knows what

00:29:52,679 --> 00:29:55,860
directory you're in when you're writing

00:29:54,000 --> 00:29:59,700
your one-liners so you would probably

00:29:55,860 --> 00:30:03,120
put this in like um you know home derp

00:29:59,700 --> 00:30:04,320
slash mazels or something like that yeah

00:30:03,120 --> 00:30:06,450
I would I would put make my own

00:30:04,320 --> 00:30:09,750
directory and then add that directory

00:30:06,450 --> 00:30:12,030
like from my you know yeah yeah put that

00:30:09,750 --> 00:30:13,950
into my pearl lips separately and then

00:30:12,030 --> 00:30:14,970
make sure it's there and you might want

00:30:13,950 --> 00:30:17,370
to have other things that you don't want

00:30:14,970 --> 00:30:19,290
to maybe put for the system you know for

00:30:17,370 --> 00:30:20,790
your system perl modules they're just

00:30:19,290 --> 00:30:22,049
like little utility things like that

00:30:20,790 --> 00:30:24,600
these are probably things like that in

00:30:22,049 --> 00:30:27,330
there as well sorry have your own local

00:30:24,600 --> 00:30:29,309
modules and put put that in just like

00:30:27,330 --> 00:30:33,740
you have like your own you look you look

00:30:29,309 --> 00:30:36,150
directly or something like that okay so

00:30:33,740 --> 00:30:38,760
another thing you do a set is specify

00:30:36,150 --> 00:30:40,380
input record separators so um so

00:30:38,760 --> 00:30:41,850
normally when your so all these things

00:30:40,380 --> 00:30:43,770
are really to read in one line at a time

00:30:41,850 --> 00:30:45,510
right so you're processing one line at a

00:30:43,770 --> 00:30:50,610
time doing something with is line line

00:30:45,510 --> 00:30:52,290
line line line um so but per lets you

00:30:50,610 --> 00:30:55,140
change the input record separator which

00:30:52,290 --> 00:30:56,730
is um dollar signs flat forward slash

00:30:55,140 --> 00:30:57,990
and you can change it to something else

00:30:56,730 --> 00:31:00,179
you could split on something other than

00:30:57,990 --> 00:31:01,950
a new line and certainly you can put

00:31:00,179 --> 00:31:03,210
that into a begin block but there's

00:31:01,950 --> 00:31:06,390
other ways to do that as well you can do

00:31:03,210 --> 00:31:09,059
that with a dash the dash o 0 is

00:31:06,390 --> 00:31:11,010
something I don't remember that it's a

00:31:09,059 --> 00:31:15,720
zero or oh I think that's a I think

00:31:11,010 --> 00:31:21,419
that's an oh it's a zero yes it's a zero

00:31:15,720 --> 00:31:22,410
the dash is zero flag so so there's a

00:31:21,419 --> 00:31:25,890
number of different things so I'll just

00:31:22,410 --> 00:31:27,419
show you this so this this set on the

00:31:25,890 --> 00:31:31,080
input record separator two carriage

00:31:27,419 --> 00:31:32,640
returns this sets it to if you just have

00:31:31,080 --> 00:31:34,740
a zero without anything else it makes it

00:31:32,640 --> 00:31:37,650
be null which is useful for if you're

00:31:34,740 --> 00:31:38,450
running fine - print zero because often

00:31:37,650 --> 00:31:40,190
like

00:31:38,450 --> 00:31:43,010
you do this if you're if you can't split

00:31:40,190 --> 00:31:45,650
on it find us if there's spaces in your

00:31:43,010 --> 00:31:47,510
file names you're running find you can't

00:31:45,650 --> 00:31:48,950
normally finds going to split other

00:31:47,510 --> 00:31:50,780
things are going to split on spaces but

00:31:48,950 --> 00:31:52,310
you can if the file names have spaces in

00:31:50,780 --> 00:31:54,770
them so it puts null characters at the

00:31:52,310 --> 00:31:56,270
end so look at examples for how find

00:31:54,770 --> 00:32:00,080
that print zero works because it is

00:31:56,270 --> 00:32:03,200
useful in some cases if you say that 0 0

00:32:00,080 --> 00:32:07,880
it splits on paragraphs which is like to

00:32:03,200 --> 00:32:11,120
blank lined and if you say - is 0 7 7 7

00:32:07,880 --> 00:32:14,270
it slurps in the entire file all at once

00:32:11,120 --> 00:32:16,130
so now like your loop is going to just

00:32:14,270 --> 00:32:19,970
ever read in one line it's going to be

00:32:16,130 --> 00:32:22,100
the entire file I used to so I'm going

00:32:19,970 --> 00:32:24,230
to ask Rick we just walked in here I

00:32:22,100 --> 00:32:26,270
thought you would told me at some point

00:32:24,230 --> 00:32:30,410
that the paragraph mode was useful for

00:32:26,270 --> 00:32:32,120
parsing postfix files and I don't think

00:32:30,410 --> 00:32:37,280
I haven't seen anything that has blank

00:32:32,120 --> 00:32:44,990
lines and postfix logs so the output of

00:32:37,280 --> 00:32:47,090
a mail queue command thank you great so

00:32:44,990 --> 00:32:48,950
every other things so to repeat what

00:32:47,090 --> 00:32:52,520
Rick said the paragraph mode is useful

00:32:48,950 --> 00:32:54,680
for the mail queue ma ilq command which

00:32:52,520 --> 00:32:56,630
lists all the the messages that are

00:32:54,680 --> 00:32:58,940
currently in the mail queue separated by

00:32:56,630 --> 00:33:00,860
a line so if you wanted to if you wanted

00:32:58,940 --> 00:33:02,480
to change river separator so that

00:33:00,860 --> 00:33:04,790
everything it reads it is one entry in

00:33:02,480 --> 00:33:06,560
the mail queue and you could say - 0 0

00:33:04,790 --> 00:33:14,810
and you would you would get them in like

00:33:06,560 --> 00:33:16,460
that yes for LDAP well this great right

00:33:14,810 --> 00:33:18,410
LD s so that was another example

00:33:16,460 --> 00:33:21,320
undoubtedly there are many many others

00:33:18,410 --> 00:33:24,140
that you can think of so this is a

00:33:21,320 --> 00:33:26,690
summary of all the flags don't worry

00:33:24,140 --> 00:33:30,380
about copying these all down because if

00:33:26,690 --> 00:33:32,030
the slides are all online and here's

00:33:30,380 --> 00:33:34,250
some more information if you run pearl

00:33:32,030 --> 00:33:35,690
Dex H you can get a short summary of all

00:33:34,250 --> 00:33:38,380
the pearls command line flags and there

00:33:35,690 --> 00:33:42,860
are many many more than I discussed here

00:33:38,380 --> 00:33:44,810
pearl dock pearl run explains in in more

00:33:42,860 --> 00:33:46,850
detail how they all work how am i doing

00:33:44,810 --> 00:33:50,780
on time I have like 20 minutes left yet

00:33:46,850 --> 00:33:52,399
right yeah okay so I have a lot of

00:33:50,780 --> 00:33:54,260
examples

00:33:52,399 --> 00:33:55,970
these are some these are some resources

00:33:54,260 --> 00:33:57,649
I found I was a little disappointed I

00:33:55,970 --> 00:34:00,049
looked last night at that at pearl

00:33:57,649 --> 00:34:02,899
one-liner account on Twitter and hasn't

00:34:00,049 --> 00:34:05,690
been updated in seventeen hundred and

00:34:02,899 --> 00:34:07,220
twenty-five days which is kind of sad

00:34:05,690 --> 00:34:09,290
but there's still some things there it's

00:34:07,220 --> 00:34:10,700
still active so an account so you can

00:34:09,290 --> 00:34:14,300
look at but it's not being updated

00:34:10,700 --> 00:34:18,740
regularly and there's there's a book

00:34:14,300 --> 00:34:20,089
which I have not read um by Petrus from

00:34:18,740 --> 00:34:21,679
names I don't know if I'm pronouncing

00:34:20,089 --> 00:34:23,030
his name right or Pro well liners I've

00:34:21,679 --> 00:34:28,490
heard good things about it I have read

00:34:23,030 --> 00:34:30,740
it myself so so what I have after this

00:34:28,490 --> 00:34:32,929
is just lots of examples of showing one

00:34:30,740 --> 00:34:36,490
liners so if you have any questions or

00:34:32,929 --> 00:34:36,490
otherwise I'll go on to the one-leg yes

00:34:49,899 --> 00:35:02,300
what's the dollar backslash - oh the

00:34:54,500 --> 00:35:08,060
output separator oh so what Abigail just

00:35:02,300 --> 00:35:11,810
said is that if you run - 0 - el - -

00:35:08,060 --> 00:35:15,920
zero again that sets the input separator

00:35:11,810 --> 00:35:20,410
and the output separator both to null -

00:35:15,920 --> 00:35:20,410
OH - whatever parameter you're giving

00:35:24,430 --> 00:35:29,830
right

00:35:26,640 --> 00:35:31,480
right okay so you can run essentially

00:35:29,830 --> 00:35:33,400
you can run that zero twice the first

00:35:31,480 --> 00:35:34,780
time is for the input separator and then

00:35:33,400 --> 00:35:36,760
you can fan something else and then

00:35:34,780 --> 00:35:38,590
that's zero again you set the output

00:35:36,760 --> 00:35:41,320
separator that might be useful for

00:35:38,590 --> 00:35:44,290
trying to rate the equivalent of a of

00:35:41,320 --> 00:35:45,760
what find etch print zero does it for

00:35:44,290 --> 00:35:46,990
what you're printing out has spaces in

00:35:45,760 --> 00:35:49,560
it and you don't want to have it have

00:35:46,990 --> 00:35:54,940
the thing next in line in your pipeline

00:35:49,560 --> 00:35:57,300
worry about the spaces okay so so I

00:35:54,940 --> 00:36:00,070
don't know Java doesn't have one-liners

00:35:57,300 --> 00:36:02,560
lots of examples so this is by people

00:36:00,070 --> 00:36:04,630
one that I run the most is that I use

00:36:02,560 --> 00:36:06,810
parallels a desktop calculator this is

00:36:04,630 --> 00:36:09,580
mainly because I have never figured out

00:36:06,810 --> 00:36:11,260
how to run BC which I guess is the way

00:36:09,580 --> 00:36:14,230
your quote unquote supposed to do this

00:36:11,260 --> 00:36:19,000
and someone told me at lunch that you

00:36:14,230 --> 00:36:20,320
run BC - s baby it because I always got

00:36:19,000 --> 00:36:21,880
confused about like the precision the

00:36:20,320 --> 00:36:24,460
precision wasn't what I expected it to

00:36:21,880 --> 00:36:26,710
be it truncates fractions like decimals

00:36:24,460 --> 00:36:28,690
or something I don't know obviously how

00:36:26,710 --> 00:36:31,570
math works in Perl it's simple enough to

00:36:28,690 --> 00:36:33,670
do this especially to say that e so like

00:36:31,570 --> 00:36:35,560
parallel that capital e say and then a

00:36:33,670 --> 00:36:40,200
mathematical expression it will print it

00:36:35,560 --> 00:36:42,610
out I use this all the time even when

00:36:40,200 --> 00:36:44,770
four five years of the MATLAB programmer

00:36:42,610 --> 00:36:46,660
were ahead or repple that could do the

00:36:44,770 --> 00:36:50,590
same thing I still ended up using using

00:36:46,660 --> 00:36:54,120
Perl to do this I also use one-liners to

00:36:50,590 --> 00:36:56,380
do like sort of just word puzzles like

00:36:54,120 --> 00:36:58,960
you know this is an example to find

00:36:56,380 --> 00:37:01,540
palindrome so if you saw the right

00:36:58,960 --> 00:37:03,700
package is like Debian Ubuntu you get

00:37:01,540 --> 00:37:06,960
this file code user share dick two words

00:37:03,700 --> 00:37:09,310
which is very very long word list from

00:37:06,960 --> 00:37:11,200
like Webster's third new international

00:37:09,310 --> 00:37:13,780
dictionary or something like that it's

00:37:11,200 --> 00:37:17,650
super useful for helping you out in word

00:37:13,780 --> 00:37:20,440
problems so this this just prints

00:37:17,650 --> 00:37:21,400
everything where if this if so it's

00:37:20,440 --> 00:37:23,050
going to read in one line at a time

00:37:21,400 --> 00:37:27,100
because every line has a single word on

00:37:23,050 --> 00:37:29,260
it and if that word equals the reverse

00:37:27,100 --> 00:37:32,290
of that works then it's a palindrome

00:37:29,260 --> 00:37:33,790
right so it prints it out okay that you

00:37:32,290 --> 00:37:36,470
know it's just giving you simple

00:37:33,790 --> 00:37:38,280
examples what you can do um

00:37:36,470 --> 00:37:39,569
suppose you want to print out all the

00:37:38,280 --> 00:37:41,339
lines with their line number then you

00:37:39,569 --> 00:37:44,040
can use a special variable dollar sign

00:37:41,339 --> 00:37:46,050
dot which gives you the input line

00:37:44,040 --> 00:37:47,520
number so it's basically the lines and

00:37:46,050 --> 00:37:51,480
nine number the file that it's right in

00:37:47,520 --> 00:37:53,940
so this just prints out every line

00:37:51,480 --> 00:37:56,400
followed preceded by a sign number of

00:37:53,940 --> 00:37:58,410
course you could also do cat - n but if

00:37:56,400 --> 00:38:00,480
you didn't know that cat had a - n flag

00:37:58,410 --> 00:38:01,950
or you know you're already doing

00:38:00,480 --> 00:38:03,780
something else and you don't want to

00:38:01,950 --> 00:38:08,880
pipe it through cat you can do that you

00:38:03,780 --> 00:38:10,619
could do that instead I think it starts

00:38:08,880 --> 00:38:11,940
at one so question has started at zero

00:38:10,619 --> 00:38:13,530
one not dog sure it starts at one

00:38:11,940 --> 00:38:15,150
because there wouldn't be any like

00:38:13,530 --> 00:38:17,160
there's no zero there's not a zeroth

00:38:15,150 --> 00:38:21,329
line so I think I'm almost positive that

00:38:17,160 --> 00:38:22,859
they start at one so I don't know if

00:38:21,329 --> 00:38:28,339
this is I think is another example of

00:38:22,859 --> 00:38:30,809
doing averages oh so this is also useful

00:38:28,339 --> 00:38:33,540
if this is an example it prints just

00:38:30,809 --> 00:38:36,030
lines 10 through 20 and it uses this

00:38:33,540 --> 00:38:37,740
using the dot dot operator which

00:38:36,030 --> 00:38:41,640
probably most of us have only ever used

00:38:37,740 --> 00:38:43,829
to get a range in lists in this context

00:38:41,640 --> 00:38:47,220
but if used it in scalar context it's

00:38:43,829 --> 00:38:50,339
kind of magic because what it's false

00:38:47,220 --> 00:38:52,260
until you're at the line words where

00:38:50,339 --> 00:38:53,849
that it's listed and then it's true

00:38:52,260 --> 00:38:56,160
until it gets to the second one so

00:38:53,849 --> 00:38:58,799
basically it's going to be false

00:38:56,160 --> 00:39:00,720
until dollar sign dot is ten which is

00:38:58,799 --> 00:39:03,299
true on the tenth line and then it will

00:39:00,720 --> 00:39:05,819
be true for all those they don't print

00:39:03,299 --> 00:39:07,859
out those lines until it gets up to its

00:39:05,819 --> 00:39:09,750
old dollar sign dot equals 20 and then

00:39:07,859 --> 00:39:11,130
it will be false again so it's a flip

00:39:09,750 --> 00:39:16,920
flop operator is that what they call it

00:39:11,130 --> 00:39:21,290
and so I'm going to read up on read up

00:39:16,920 --> 00:39:21,290
on that and pro op under range operators

00:39:24,230 --> 00:39:31,109
um dollar sign no dollar sign underscore

00:39:28,920 --> 00:39:33,059
is what's getting printed dollar sign

00:39:31,109 --> 00:39:36,839
underscore is what's getting printed by

00:39:33,059 --> 00:39:39,750
print and the the dot site because dot

00:39:36,839 --> 00:39:42,450
dot here is in scalar context because

00:39:39,750 --> 00:39:44,940
it's after it yes it's in scalar context

00:39:42,450 --> 00:39:48,410
so it works completely differently than

00:39:44,940 --> 00:39:48,410
it normally think that it does

00:40:00,910 --> 00:40:08,510
so what what brick said so read that

00:40:06,110 --> 00:40:10,520
second in yet again goes into more

00:40:08,510 --> 00:40:13,760
detail in that in that part of the Perl

00:40:10,520 --> 00:40:16,130
documentation and I'm clicking on things

00:40:13,760 --> 00:40:20,510
which I shouldn't do

00:40:16,130 --> 00:40:21,890
oh so you can also grep with pro regular

00:40:20,510 --> 00:40:24,200
expression so of course you can do this

00:40:21,890 --> 00:40:25,790
poor man's grep just with this and it's

00:40:24,200 --> 00:40:28,700
going to print out all the lines that

00:40:25,790 --> 00:40:31,520
start with fubar right but now you can

00:40:28,700 --> 00:40:34,010
get grep with the full power of pearls

00:40:31,520 --> 00:40:37,700
regular expression so you can do lines

00:40:34,010 --> 00:40:39,230
with foo not followed by bar and bar not

00:40:37,700 --> 00:40:41,990
preceded by foo and I think there is

00:40:39,230 --> 00:40:43,700
there some somebody wrote a grep a

00:40:41,990 --> 00:40:45,170
version of grep that uses Perl regular

00:40:43,700 --> 00:40:47,180
expressions but if you don't have that

00:40:45,170 --> 00:40:48,110
installed and if you're like me had to

00:40:47,180 --> 00:40:52,850
remember the name of it

00:40:48,110 --> 00:40:54,500
you can do it all from Perl um and you

00:40:52,850 --> 00:40:56,390
can grep on paragraphs instead of

00:40:54,500 --> 00:40:59,000
instead of just on lines and maybe

00:40:56,390 --> 00:41:01,490
there's an option in m grep to do that I

00:40:59,000 --> 00:41:03,080
have no idea but you can do that right

00:41:01,490 --> 00:41:04,640
yeah you could you could grep through

00:41:03,080 --> 00:41:06,370
your mail queue and look for particular

00:41:04,640 --> 00:41:08,990
things which I'm sure Rick probably does

00:41:06,370 --> 00:41:12,530
27 times like a hundred times a day to

00:41:08,990 --> 00:41:13,340
do that right okay this is something

00:41:12,530 --> 00:41:14,660
that came up work

00:41:13,340 --> 00:41:17,360
I think someone had just asked me does

00:41:14,660 --> 00:41:20,180
rants produce the same sequence with the

00:41:17,360 --> 00:41:23,450
same seed on different platforms and I

00:41:20,180 --> 00:41:26,960
ran this I think on a Ubuntu box on

00:41:23,450 --> 00:41:29,420
16-bit and on my Mac laptop which I

00:41:26,960 --> 00:41:31,250
think was a PowerPC chip at the time and

00:41:29,420 --> 00:41:33,380
maybe on open BSD and I got the same

00:41:31,250 --> 00:41:36,170
results and that was just five times

00:41:33,380 --> 00:41:39,230
here I ran it I think a hundred thousand

00:41:36,170 --> 00:41:40,600
times and typed it into md5sum and I got

00:41:39,230 --> 00:41:43,280
the same result on all of them so

00:41:40,600 --> 00:41:45,470
alright that's not super exciting um

00:41:43,280 --> 00:41:48,500
this in this case what I wanted to do

00:41:45,470 --> 00:41:52,670
was I had this program called WN path

00:41:48,500 --> 00:41:54,350
seek that it was doing it was doing some

00:41:52,670 --> 00:41:57,530
sort of random number stuff but I wanted

00:41:54,350 --> 00:41:59,450
to do it for whatever I looked for 10 up

00:41:57,530 --> 00:42:01,670
to 400 so I wanted to do 10

00:41:59,450 --> 00:42:03,770
and then I wanted to pick ten random

00:42:01,670 --> 00:42:05,840
things and then 20 and then 30 and then

00:42:03,770 --> 00:42:07,400
40 all the way up to 400 but I want each

00:42:05,840 --> 00:42:08,870
of them to have the same seed so it

00:42:07,400 --> 00:42:10,340
would have the same list of all things

00:42:08,870 --> 00:42:11,960
and I probably could have done it in the

00:42:10,340 --> 00:42:14,390
code but it was easier to do it this way

00:42:11,960 --> 00:42:17,630
and first of all just a pain in the butt

00:42:14,390 --> 00:42:19,970
in general initializing like seeding a

00:42:17,630 --> 00:42:22,210
random number generator in seed because

00:42:19,970 --> 00:42:24,530
you have to do all the shenanigans of

00:42:22,210 --> 00:42:26,000
like how do you constructed that maybe

00:42:24,530 --> 00:42:27,950
look in dev random I know well let's

00:42:26,000 --> 00:42:29,000
build ender pearl to come up with a good

00:42:27,950 --> 00:42:31,130
way of seeding the random number

00:42:29,000 --> 00:42:32,780
generator so why not let pearl give you

00:42:31,130 --> 00:42:34,400
a seed for your random number generator

00:42:32,780 --> 00:42:36,140
for another program which is what I'm

00:42:34,400 --> 00:42:38,030
doing here as I've discovered you can

00:42:36,140 --> 00:42:40,820
split so what this is doing is just

00:42:38,030 --> 00:42:48,740
giving me a random number between 0 & 2

00:42:40,820 --> 00:42:50,360
to the 32nd minus 1 so no this is right

00:42:48,740 --> 00:42:52,130
so you get you can put one-liners and

00:42:50,360 --> 00:42:53,240
shell scripts like a head here and says

00:42:52,130 --> 00:42:54,860
I guess it would be a case where you

00:42:53,240 --> 00:42:57,200
would really want to test this if it

00:42:54,860 --> 00:42:58,970
were a production thing and see that I

00:42:57,200 --> 00:43:00,680
was working well you can't do this in

00:42:58,970 --> 00:43:04,340
bash someone told me with the dollar

00:43:00,680 --> 00:43:06,050
sign random I still argue that Perl is a

00:43:04,340 --> 00:43:09,740
little better because random only gives

00:43:06,050 --> 00:43:11,840
you a number between 0 and 32 3 to 7 67

00:43:09,740 --> 00:43:14,090
so it's only it's only a short where a

00:43:11,840 --> 00:43:15,830
Perl can give you a long so I still

00:43:14,090 --> 00:43:17,090
think Perl is better in this case but I

00:43:15,830 --> 00:43:18,230
mean for what I was doing it probably

00:43:17,090 --> 00:43:23,420
would have been fine but I didn't know

00:43:18,230 --> 00:43:25,040
it existed I had this weird issue when I

00:43:23,420 --> 00:43:26,930
was working on my dissertation that I

00:43:25,040 --> 00:43:29,060
had this entry in my bibliography

00:43:26,930 --> 00:43:31,220
that wasn't printing out right it wasn't

00:43:29,060 --> 00:43:32,840
putting the - but only printed out this

00:43:31,220 --> 00:43:35,920
human-computer interaction instead of

00:43:32,840 --> 00:43:38,180
human - computer interaction and I

00:43:35,920 --> 00:43:40,340
realized I discovered that it was

00:43:38,180 --> 00:43:43,190
because it was a Unicode - like I copy

00:43:40,340 --> 00:43:44,870
and pasted it from some website and it

00:43:43,190 --> 00:43:47,090
had a Unicode - instead of regular data

00:43:44,870 --> 00:43:50,060
and logic only really likes ASCII it

00:43:47,090 --> 00:43:52,210
doesn't like Unicode at all so I wrote

00:43:50,060 --> 00:43:54,920
this one-liner just print every line

00:43:52,210 --> 00:43:56,030
that had a non ASCII character in there

00:43:54,920 --> 00:44:01,120
there turned out to be a whole bunch of

00:43:56,030 --> 00:44:03,200
other ones in my detect file as well and

00:44:01,120 --> 00:44:05,630
here's a bunch of different examples

00:44:03,200 --> 00:44:08,600
this is my last example of having a line

00:44:05,630 --> 00:44:11,300
to the beginning of a file so what this

00:44:08,600 --> 00:44:12,829
does is so we have this file called test

00:44:11,300 --> 00:44:15,499
dot txt

00:44:12,829 --> 00:44:17,900
and I want to just put the line first at

00:44:15,499 --> 00:44:20,900
the beginning of the file so one way to

00:44:17,900 --> 00:44:22,910
do it is you say - is zero seven seven

00:44:20,900 --> 00:44:24,229
seven so let's lurks in the entire file

00:44:22,910 --> 00:44:28,579
that that's all in dollar sign

00:44:24,229 --> 00:44:31,910
underscore we say that's a - I because

00:44:28,579 --> 00:44:34,369
we edited in place and - n puts that

00:44:31,910 --> 00:44:36,109
implicit loop so now it loops one time

00:44:34,369 --> 00:44:38,269
the entire file is in dollar sign

00:44:36,109 --> 00:44:40,849
underscore and now we say print dollar

00:44:38,269 --> 00:44:43,039
sign underscore print first and then new

00:44:40,849 --> 00:44:44,479
line in dollar sign underscore it's

00:44:43,039 --> 00:44:47,119
going to print that and it's going to go

00:44:44,479 --> 00:44:49,309
back into test dot txt so now we've

00:44:47,119 --> 00:44:52,549
added the line first at the top of the

00:44:49,309 --> 00:44:53,479
file okay thank you so that's one way to

00:44:52,549 --> 00:44:57,349
do it that's probably the most

00:44:53,479 --> 00:45:02,539
straightforward way of doing it we also

00:44:57,349 --> 00:45:04,430
we can change the - in - - P and then we

00:45:02,539 --> 00:45:06,049
don't have to put the print so we just

00:45:04,430 --> 00:45:09,109
say dollar sign underscore equals that

00:45:06,049 --> 00:45:13,339
and that gets loaded in or we can do

00:45:09,109 --> 00:45:15,289
this in a more obfuscated way where what

00:45:13,339 --> 00:45:19,699
we do is run as a regular expression to

00:45:15,289 --> 00:45:21,469
take - just change so it's kind of

00:45:19,699 --> 00:45:23,779
operate on dollar sign underscore with

00:45:21,469 --> 00:45:26,509
whatever is there and doesn't that

00:45:23,779 --> 00:45:29,959
matter and change that entire string to

00:45:26,509 --> 00:45:32,989
first and a new line what what does that

00:45:29,959 --> 00:45:34,160
do that says that's just nothing so it

00:45:32,989 --> 00:45:38,359
matches I guess the very beginning of

00:45:34,160 --> 00:45:40,249
the line and then puts first and then

00:45:38,359 --> 00:45:42,229
puts first as to changes the very

00:45:40,249 --> 00:45:51,309
beginning of it to first a new line and

00:45:42,229 --> 00:45:53,719
then everything else yeah um so as

00:45:51,309 --> 00:45:55,609
additive so I think this is very much

00:45:53,719 --> 00:45:57,259
under the lines of like there's always

00:45:55,609 --> 00:46:00,440
more than one way to do all of these

00:45:57,259 --> 00:46:01,819
things and almost everything I said like

00:46:00,440 --> 00:46:05,509
I said at the beginning could be done

00:46:01,819 --> 00:46:10,430
with all the other shell utilities that

00:46:05,509 --> 00:46:13,699
are out there but I found that like the

00:46:10,430 --> 00:46:15,079
more I use pearl uh one liners to do

00:46:13,699 --> 00:46:16,880
things the more I kept using it because

00:46:15,079 --> 00:46:18,469
like I use pearl to do other things too

00:46:16,880 --> 00:46:21,140
and it kind of just maxed I already know

00:46:18,469 --> 00:46:22,609
I can yeah I have a really good idea of

00:46:21,140 --> 00:46:25,610
how pearls going to do these things

00:46:22,609 --> 00:46:29,660
where I might get confused about like

00:46:25,610 --> 00:46:31,820
like like no if I wanted to just is like

00:46:29,660 --> 00:46:33,950
if I have used off to split things split

00:46:31,820 --> 00:46:35,900
the lines in a Perl it might actually be

00:46:33,950 --> 00:46:37,580
less code but I'd have to remind

00:46:35,900 --> 00:46:39,350
remember how off work and I already know

00:46:37,580 --> 00:46:42,260
how perl works so I don't have to do

00:46:39,350 --> 00:46:43,730
that and you know there's cut which can

00:46:42,260 --> 00:46:45,560
do some of these things too but like I

00:46:43,730 --> 00:46:47,540
already kind of know how perl works to

00:46:45,560 --> 00:46:53,180
do these things so I end up just doing

00:46:47,540 --> 00:46:59,810
that instead what I'm gonna say about

00:46:53,180 --> 00:47:02,240
that um so yeah like I said like this is

00:46:59,810 --> 00:47:04,880
probably like I find this always to be

00:47:02,240 --> 00:47:08,420
super useful and I end up doing many of

00:47:04,880 --> 00:47:09,770
these almost almost every day so with

00:47:08,420 --> 00:47:10,550
that I guess that was the end of it so

00:47:09,770 --> 00:47:12,140
thanks a lot

00:47:10,550 --> 00:47:18,460
let me know is anyone else have any

00:47:12,140 --> 00:47:23,750
other questions no yes

00:47:18,460 --> 00:47:26,660
where's what if these slides are not

00:47:23,750 --> 00:47:28,430
online yet but I think about four or

00:47:26,660 --> 00:47:30,890
five other versions of it are online if

00:47:28,430 --> 00:47:33,700
you just look for my name and one-liners

00:47:30,890 --> 00:47:36,620
you'll probably find them pretty easily

00:47:33,700 --> 00:47:37,940
and as soon as I get a chance I'll put

00:47:36,620 --> 00:47:39,350
these up there as well I think I have

00:47:37,940 --> 00:47:48,890
them all with like the names of whatever

00:47:39,350 --> 00:47:51,400
conference I gave them at yeah that's

00:47:48,890 --> 00:47:51,400
right anyway

00:47:58,069 --> 00:48:03,150
because I don't write a lot of batch

00:48:00,480 --> 00:48:05,490
scripts so someone once asked me like

00:48:03,150 --> 00:48:07,619
how do you know like when I gave this up

00:48:05,490 --> 00:48:08,849
before how do you know like how long you

00:48:07,619 --> 00:48:11,039
should make a one-liner

00:48:08,849 --> 00:48:12,599
and I guess there's no real good answer

00:48:11,039 --> 00:48:13,950
for this because like it's not only just

00:48:12,599 --> 00:48:15,269
writing this for yourself in the course

00:48:13,950 --> 00:48:18,960
of like other things you're doing right

00:48:15,269 --> 00:48:22,740
I once I once worked with someone that

00:48:18,960 --> 00:48:24,660
would rate basically entire dbi programs

00:48:22,740 --> 00:48:26,069
from the command-line he would write

00:48:24,660 --> 00:48:28,619
them they would be four or five lines

00:48:26,069 --> 00:48:30,569
long go all the way across and like I

00:48:28,619 --> 00:48:31,920
drove me crazy because I found them

00:48:30,569 --> 00:48:33,150
really hard to read and I at that point

00:48:31,920 --> 00:48:35,220
that would probably break them out to

00:48:33,150 --> 00:48:37,049
write a program but you know they made

00:48:35,220 --> 00:48:38,910
sense for him and then if you're just

00:48:37,049 --> 00:48:39,990
reading them these are almost always

00:48:38,910 --> 00:48:41,940
going to be things you're just writing

00:48:39,990 --> 00:48:43,859
for yourself so I think it's up to you

00:48:41,940 --> 00:48:45,599
whether you think it makes sense to do

00:48:43,859 --> 00:48:47,640
it or I find one thing starts wrapping

00:48:45,599 --> 00:48:51,630
around the second line it becomes hard

00:48:47,640 --> 00:48:52,950
to to parse it at least for me and at

00:48:51,630 --> 00:48:55,289
that point I probably would write it to

00:48:52,950 --> 00:48:57,869
a file but notes you know it's nice to

00:48:55,289 --> 00:48:59,400
just have it be kind of transient and

00:48:57,869 --> 00:49:01,079
you know all think it's going to sit

00:48:59,400 --> 00:49:02,460
there in your in your command history

00:49:01,079 --> 00:49:06,829
and you can get back to it and maybe

00:49:02,460 --> 00:49:06,829
tweak it to do other things yeah Rick

00:49:17,430 --> 00:49:22,930
hahaha so I will say one thing that I

00:49:21,010 --> 00:49:24,280
could not get to work a maybe Rick does

00:49:22,930 --> 00:49:25,480
this I really wanted to get an example

00:49:24,280 --> 00:49:27,160
because I saw all the things that get

00:49:25,480 --> 00:49:29,140
turned on with deshi and one of them is

00:49:27,160 --> 00:49:30,880
subroutine signatures and I tried to

00:49:29,140 --> 00:49:33,100
write a one liner with a subroutine

00:49:30,880 --> 00:49:47,770
signature and I could not get it to work

00:49:33,100 --> 00:49:49,510
let's say I thought I thought instead of

00:49:47,770 --> 00:49:52,240
version bundles it said all of the

00:49:49,510 --> 00:50:04,870
optional features get turned on and I

00:49:52,240 --> 00:50:07,840
guess I thought that that that's sad but

00:50:04,870 --> 00:50:10,690
thank you okay so I'm out of time I

00:50:07,840 --> 00:50:12,220
guess unless I get kicked off I will

00:50:10,690 --> 00:50:15,930
continue answering questions but I think

00:50:12,220 --> 00:50:15,930
I'm gonna have to go soon yes

00:50:37,260 --> 00:50:43,420
yes yes so right so right so in fact

00:50:41,320 --> 00:50:45,460
that little block of code I showed for

00:50:43,420 --> 00:50:47,800
what the Dutch n flagon is actually flag

00:50:45,460 --> 00:50:50,800
does I think it actually ends up being

00:50:47,800 --> 00:50:53,290
like that in the compiler or interpreter

00:50:50,800 --> 00:50:55,900
whatever Perl is doing so there's

00:50:53,290 --> 00:50:57,160
something called that they call I was

00:50:55,900 --> 00:50:59,230
talking to people at lunch about this

00:50:57,160 --> 00:51:03,640
that there's something called the the

00:50:59,230 --> 00:51:05,920
Eskimo operator the echo kiss which

00:51:03,640 --> 00:51:08,349
means that you instead of a an open

00:51:05,920 --> 00:51:10,150
curly brace close curly brace it's a

00:51:08,349 --> 00:51:12,220
closed curly brace open curly brace

00:51:10,150 --> 00:51:14,260
because that closed curly brace ends

00:51:12,220 --> 00:51:17,290
that inclusive loop that you're getting

00:51:14,260 --> 00:51:21,970
around greater than Lessman and then you

00:51:17,290 --> 00:51:24,760
can put your own code afterwards I wanna

00:51:21,970 --> 00:51:27,340
say that I I mean I really tried to make

00:51:24,760 --> 00:51:29,650
this as like an accessible like kind of

00:51:27,340 --> 00:51:31,930
useful like everyday stuff which is why

00:51:29,650 --> 00:51:34,180
I try to avoid things like that but yeah

00:51:31,930 --> 00:51:38,500
so that would be more babies if I ever

00:51:34,180 --> 00:51:41,349
do a mystifying one-liners talk I'll get

00:51:38,500 --> 00:51:43,920
into more of that stuff but I think I'm

00:51:41,349 --> 00:51:48,849
out of time so thank you very much

00:51:43,920 --> 00:51:48,849

YouTube URL: https://www.youtube.com/watch?v=IGe0GnlIWq4


