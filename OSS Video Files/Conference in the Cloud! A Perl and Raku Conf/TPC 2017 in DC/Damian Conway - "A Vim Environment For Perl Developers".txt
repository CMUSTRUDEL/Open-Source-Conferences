Title: Damian Conway - "A Vim Environment For Perl Developers"
Publication date: 2017-06-21
Playlist: TPC 2017 in DC
Description: 
	My Vim config now totals over 75,000 lines of VimScript. That's utter madness, of course. But there is method in it.

About 1/3 of those lines are specifically aimed at helping me write, maintain, navigate, and test my Perl code. My Vim configuration now automatically loads file templates, highlights syntax errors in realtime, intelligently searches for documentation, autocompletes syntactic constructs with snippet-like placeholders, autoaligns key/value lists, wraps long lines much more readably, summarizes subroutines, tracks and explains variables, searches and helps navigate source files across multiple directories, finds and executes module test suites, colour-codes STDOUT and STDERR, and even autoselects the right version of Perl for each program.

In this talk I'll explain how my .vimrc does all this, and show you how to obtain and configure the various Vim plugins and Perl modules that make it possible.

Damian Conway is a 52-year-old Australian male, wanted in connection with various outrages and atrocities committed on CPAN over the past two decades, as well as numerous assaults on the sanity of Perl audiences across four continents.
Captions: 
	00:00:04,009 --> 00:00:15,570
good afternoon that's Vince I'm running

00:00:14,099 --> 00:00:18,350
this I've got a presentation system that

00:00:15,570 --> 00:00:21,119
I wrote in vim because why wouldn't you

00:00:18,350 --> 00:00:22,680
I love this particular countdown thing

00:00:21,119 --> 00:00:24,240
it works really well sometimes I'm very

00:00:22,680 --> 00:00:25,170
tempted just to leave it there for a

00:00:24,240 --> 00:00:29,390
little while because you believe it

00:00:25,170 --> 00:00:29,390
there for a little while it does this

00:00:30,980 --> 00:00:39,180
and it goes on and eventually it says

00:00:34,500 --> 00:00:40,190
someone call for help so let's let's

00:00:39,180 --> 00:00:45,090
begin now

00:00:40,190 --> 00:00:47,489
so tell them fellow vim users welcome if

00:00:45,090 --> 00:00:51,210
you're not a fellow vim user welcome if

00:00:47,489 --> 00:00:53,520
you're merely vim curious or if you

00:00:51,210 --> 00:00:56,100
happen to be an Emacs user who's

00:00:53,520 --> 00:00:59,030
slumming it for the afternoon maybe here

00:00:56,100 --> 00:00:59,030
to learn something new

00:01:00,739 --> 00:01:04,530
everything I want to show you here I

00:01:02,969 --> 00:01:07,650
want to demonstrate more or less live

00:01:04,530 --> 00:01:11,909
because that this is what I do with them

00:01:07,650 --> 00:01:15,030
I write code in Perl mostly most of the

00:01:11,909 --> 00:01:18,210
time if you read the blurb for this talk

00:01:15,030 --> 00:01:20,970
you will have seen that I claimed that I

00:01:18,210 --> 00:01:24,680
had quite a lot of vim config so if I

00:01:20,970 --> 00:01:28,979
take my vim rec and all of my VM files

00:01:24,680 --> 00:01:32,970
turns out that I've got about that many

00:01:28,979 --> 00:01:36,900
lines of vim configuration which is

00:01:32,970 --> 00:01:39,840
pretty frankly insane and we're in the

00:01:36,900 --> 00:01:42,659
right place so let me show you what I do

00:01:39,840 --> 00:01:46,680
with all of that first thing I do is I

00:01:42,659 --> 00:01:48,360
start editing a Perl file and of course

00:01:46,680 --> 00:01:50,070
when you start editing a Perl file what

00:01:48,360 --> 00:01:53,159
do you get tilde tilde tilde tilde tilde

00:01:50,070 --> 00:01:55,369
tilde tilde tilde no you don't that's a

00:01:53,159 --> 00:01:59,670
waste of time so whenever I create a new

00:01:55,369 --> 00:02:03,840
PL file I just have them fill that in

00:01:59,670 --> 00:02:05,880
for me and it fills in the standard

00:02:03,840 --> 00:02:07,590
preamble that I need it noticed that it

00:02:05,880 --> 00:02:08,729
actually parked my cursor on the line

00:02:07,590 --> 00:02:11,520
where I can start typing

00:02:08,729 --> 00:02:13,140
I haven't yet got it to actually go into

00:02:11,520 --> 00:02:16,239
insert mode at that point

00:02:13,140 --> 00:02:18,340
but I thought about it but everything it

00:02:16,239 --> 00:02:21,190
does it puts all the documentation for

00:02:18,340 --> 00:02:22,090
the file down the bottom there because

00:02:21,190 --> 00:02:24,459
you know you don't have to write

00:02:22,090 --> 00:02:27,610
documentation yourself and it does that

00:02:24,459 --> 00:02:29,470
not just for a dot PL file but also for

00:02:27,610 --> 00:02:34,299
a dot PM file so if I say I want to

00:02:29,470 --> 00:02:36,760
create live demo new pearl but PM then

00:02:34,299 --> 00:02:39,790
oh it doesn't exist do I want to create

00:02:36,760 --> 00:02:41,920
it yes I do because you don't want to be

00:02:39,790 --> 00:02:43,209
spending half an hour writing a file and

00:02:41,920 --> 00:02:46,060
then at the end it says I couldn't make

00:02:43,209 --> 00:02:47,319
this subdirectory for you so I've also

00:02:46,060 --> 00:02:49,810
got a thing in there which I'll show you

00:02:47,319 --> 00:02:51,160
in just a minute that just detects oh

00:02:49,810 --> 00:02:52,090
you're not going to be able to save this

00:02:51,160 --> 00:02:54,280
because you don't have the whole

00:02:52,090 --> 00:02:55,569
directory structure in place and so it

00:02:54,280 --> 00:02:58,359
just puts the whole directory structure

00:02:55,569 --> 00:03:00,790
in place for me but look here it's gone

00:02:58,359 --> 00:03:02,769
in a new to remove the live at the start

00:03:00,790 --> 00:03:05,260
of the name and it need to make the name

00:03:02,769 --> 00:03:07,239
of the module demo new Perl with colons

00:03:05,260 --> 00:03:08,980
between them and it's filled in the

00:03:07,239 --> 00:03:15,090
documentation and the documentation is

00:03:08,980 --> 00:03:18,819
actually fairly smart it knows who I am

00:03:15,090 --> 00:03:23,349
it knows what I like to have in this it

00:03:18,819 --> 00:03:26,680
knows that the Artie address for this

00:03:23,349 --> 00:03:30,970
should be bug demo new pool it just sets

00:03:26,680 --> 00:03:33,639
that all up for me automatically and the

00:03:30,970 --> 00:03:36,280
same thing though that plug-in that does

00:03:33,639 --> 00:03:39,040
the auto make Dyer it's just a little

00:03:36,280 --> 00:03:40,959
plug in all of these things are

00:03:39,040 --> 00:03:43,169
available online I'll give you the URL

00:03:40,959 --> 00:03:46,419
for the tab or a little bit later and

00:03:43,169 --> 00:03:47,859
all of this all that this does is it

00:03:46,419 --> 00:03:50,290
sets up an auto command that when you

00:03:47,859 --> 00:03:52,510
create a new file it just ensures the

00:03:50,290 --> 00:03:54,160
directory exists so it goes to see well

00:03:52,510 --> 00:03:56,500
what's the directory going to be it's

00:03:54,160 --> 00:03:59,919
going to be the head of the current file

00:03:56,500 --> 00:04:01,449
if that's not a real directory then ask

00:03:59,919 --> 00:04:03,280
if you want to create it and if you do

00:04:01,449 --> 00:04:05,620
try and create it and if you can't then

00:04:03,280 --> 00:04:07,780
say you couldn't create it and so on and

00:04:05,620 --> 00:04:09,400
so forth so it just makes life that much

00:04:07,780 --> 00:04:10,900
easier and that's what basically

00:04:09,400 --> 00:04:13,060
everything I want to show you in the

00:04:10,900 --> 00:04:16,000
next 45 minutes is going to be about

00:04:13,060 --> 00:04:18,970
which is how do you make your job of

00:04:16,000 --> 00:04:22,870
writing Perl less intrusive how do you

00:04:18,970 --> 00:04:24,300
stop getting out of the flow because

00:04:22,870 --> 00:04:26,300
every time the editor gets in your way

00:04:24,300 --> 00:04:30,710
you get out of the flow

00:04:26,300 --> 00:04:33,410
and your code quality goes down so I can

00:04:30,710 --> 00:04:37,159
do this with anything a test file then I

00:04:33,410 --> 00:04:39,020
get a template for a test file and again

00:04:37,159 --> 00:04:42,650
I can either create or just quit from

00:04:39,020 --> 00:04:46,250
that I write a lot of vim plug-in so I

00:04:42,650 --> 00:04:48,830
did the same thing for vim plugins it

00:04:46,250 --> 00:04:51,050
just sets the whole thing up and works

00:04:48,830 --> 00:04:54,610
out what it's supposed to be called and

00:04:51,050 --> 00:04:57,110
we don't need to create that either so

00:04:54,610 --> 00:04:58,370
I've basically just got a directory full

00:04:57,110 --> 00:05:00,199
of these templates they're all called

00:04:58,370 --> 00:05:02,419
template and it's only the suffix that

00:05:00,199 --> 00:05:06,770
differs so if we have a look at one of

00:05:02,419 --> 00:05:10,550
these the PM template and all it is is

00:05:06,770 --> 00:05:12,380
like a standard kind of module template

00:05:10,550 --> 00:05:17,180
but you've got all these placeholders

00:05:12,380 --> 00:05:20,870
for the module name for something else

00:05:17,180 --> 00:05:23,990
there's a placeholder the author the

00:05:20,870 --> 00:05:26,810
email the current year the author of the

00:05:23,990 --> 00:05:28,729
email again the RT name just fills them

00:05:26,810 --> 00:05:30,229
all in for you automatically and you can

00:05:28,729 --> 00:05:36,590
write dozens of these because they all

00:05:30,229 --> 00:05:38,300
work on exactly the same principle it's

00:05:36,590 --> 00:05:41,229
actually done with a perl script and

00:05:38,300 --> 00:05:45,199
that Perl script basically just takes

00:05:41,229 --> 00:05:46,759
the template file and is a very stupid

00:05:45,199 --> 00:05:48,740
templating mechanism you can do it as

00:05:46,759 --> 00:05:50,060
any kind of templating mechanism but you

00:05:48,740 --> 00:05:52,520
won't have to because this is an entire

00:05:50,060 --> 00:05:56,210
ball as well so you can just grab this

00:05:52,520 --> 00:05:59,509
and use that and then literally all I

00:05:56,210 --> 00:06:03,319
did in my vim rec would say every time

00:05:59,509 --> 00:06:05,300
you create a new file go to the - once

00:06:03,319 --> 00:06:09,110
line that takes you to the start and

00:06:05,300 --> 00:06:11,810
read from there the result of calling

00:06:09,110 --> 00:06:13,759
that vim templating file on the file

00:06:11,810 --> 00:06:18,110
that we're currently trying to create a

00:06:13,759 --> 00:06:20,210
buffer for and so every time that I

00:06:18,110 --> 00:06:22,190
start up any kind of file where I know

00:06:20,210 --> 00:06:23,630
what the template wants to look like as

00:06:22,190 --> 00:06:25,909
long as I've got one of those templates

00:06:23,630 --> 00:06:28,880
in my template directory it just starts

00:06:25,909 --> 00:06:30,740
it up fills it in and then basically

00:06:28,880 --> 00:06:35,899
just does a search for implementation

00:06:30,740 --> 00:06:38,320
here and redraws the whole thing so I'm

00:06:35,899 --> 00:06:38,320
ready to go

00:06:40,770 --> 00:06:46,270
so we have actually written some Perl

00:06:43,449 --> 00:06:54,449
code this is from an actual module that

00:06:46,270 --> 00:06:54,449
I wrote called lingua an grammarian then

00:06:58,020 --> 00:07:02,229
I've got something that highlights

00:07:00,400 --> 00:07:05,469
whatever variable you're over and

00:07:02,229 --> 00:07:07,539
reports on it says that's the lexical

00:07:05,469 --> 00:07:09,580
variable errors and it's how many errors

00:07:07,539 --> 00:07:12,639
did we find how in the hell can it

00:07:09,580 --> 00:07:15,279
possibly know that the answer is it

00:07:12,639 --> 00:07:16,900
looks through your file finds the

00:07:15,279 --> 00:07:19,569
Declaration of the variable and any

00:07:16,900 --> 00:07:22,659
comment on the same line and does that

00:07:19,569 --> 00:07:33,580
and now at any point where we use that

00:07:22,659 --> 00:07:38,139
same variable like this it picks up the

00:07:33,580 --> 00:07:40,900
right variable and of course that's not

00:07:38,139 --> 00:07:42,400
the dollar errors variable that's the

00:07:40,900 --> 00:07:44,560
thing and you can find out which one it

00:07:42,400 --> 00:07:46,120
is by just saying Gd which there's go to

00:07:44,560 --> 00:07:49,120
the definition and says well it takes

00:07:46,120 --> 00:07:50,800
you to the definition of that one which

00:07:49,120 --> 00:07:55,419
is pretty cool but it's really really a

00:07:50,800 --> 00:07:58,690
bad idea to have the two variables with

00:07:55,419 --> 00:08:03,279
the same name so it's also got a

00:07:58,690 --> 00:08:06,219
mechanism whereby you can change one of

00:08:03,279 --> 00:08:08,860
those two so for example you just say CV

00:08:06,219 --> 00:08:12,969
change variable and to globally rename

00:08:08,860 --> 00:08:17,650
this variable errors to not only count

00:08:12,969 --> 00:08:21,610
errors and then it does it everywhere

00:08:17,650 --> 00:08:25,650
but only to the scalar variable the

00:08:21,610 --> 00:08:25,650
array didn't change its name at all

00:08:26,880 --> 00:08:34,810
is it smart enough to know about lexical

00:08:29,410 --> 00:08:36,430
scope no it's not yet but I have plans

00:08:34,810 --> 00:08:39,330
but it is smart enough to know about

00:08:36,430 --> 00:08:39,330
other useful things

00:08:50,340 --> 00:08:55,920
and if you decide that you don't want to

00:08:53,730 --> 00:08:57,779
use those names for it you can change

00:08:55,920 --> 00:08:59,130
the variables names on those and it

00:08:57,779 --> 00:09:02,490
already knows what they should be called

00:08:59,130 --> 00:09:04,740
if you're using English so it'll just do

00:09:02,490 --> 00:09:07,140
that for you everywhere

00:09:04,740 --> 00:09:17,850
other things that you can do that are

00:09:07,140 --> 00:09:20,940
kind of interesting and that's kind of

00:09:17,850 --> 00:09:22,440
useful or if you had declared it then it

00:09:20,940 --> 00:09:26,700
just tells you it's an unused variable

00:09:22,440 --> 00:09:28,620
and of course that goes away if you

00:09:26,700 --> 00:09:30,660
actually use it for anything and now

00:09:28,620 --> 00:09:34,740
it's a declared one and it's used as

00:09:30,660 --> 00:09:39,290
well so it's kind of a cool module

00:09:34,740 --> 00:09:41,850
I shouldn't have deleted all those lines

00:09:39,290 --> 00:09:45,240
so that's like it's called track pull

00:09:41,850 --> 00:09:48,540
VARs guess where it is in the tarball

00:09:45,240 --> 00:09:50,010
yes it is and it's moderately

00:09:48,540 --> 00:09:51,930
complicated and it keeps getting more

00:09:50,010 --> 00:09:56,460
and more complicated as we keep making

00:09:51,930 --> 00:10:00,890
pull more and more complicated that that

00:09:56,460 --> 00:10:06,620
by the way is the regex that matches

00:10:00,890 --> 00:10:06,620
variables in Perl which is nightmarish

00:10:08,660 --> 00:10:13,680
but of course once you've written a fair

00:10:11,130 --> 00:10:15,870
bit of code then you may want to be able

00:10:13,680 --> 00:10:17,700
to analyze it or someone sends you some

00:10:15,870 --> 00:10:20,940
code you may want to look through it and

00:10:17,700 --> 00:10:23,070
of course here I've got approximately

00:10:20,940 --> 00:10:25,740
fifteen hundred lines of code that's

00:10:23,070 --> 00:10:28,200
going to be hard to look through so I

00:10:25,740 --> 00:10:29,940
set up my folding mechanism to be a bit

00:10:28,200 --> 00:10:31,560
smarter about pearl and the simplest

00:10:29,940 --> 00:10:35,820
thing that I can do is I can say fold

00:10:31,560 --> 00:10:39,209
the Pearl up so you just get each of the

00:10:35,820 --> 00:10:41,880
subroutines and any comments before or

00:10:39,209 --> 00:10:43,950
after them so you can look through and

00:10:41,880 --> 00:10:47,670
you can see the context of each of those

00:10:43,950 --> 00:10:50,190
and try and understand that but I find

00:10:47,670 --> 00:10:52,110
that it's much more useful and I'm

00:10:50,190 --> 00:10:54,660
trying to understand code that's been

00:10:52,110 --> 00:10:58,140
written well to look at the comments

00:10:54,660 --> 00:11:00,810
who's heard of comments anyone ever use

00:10:58,140 --> 00:11:03,720
them in a piece of code they can be

00:11:00,810 --> 00:11:05,730
useful I like to write a lot of comments

00:11:03,720 --> 00:11:08,129
my code I like to basically comment

00:11:05,730 --> 00:11:12,360
every paragraph of code which means that

00:11:08,129 --> 00:11:14,519
I also have this which allows me to go

00:11:12,360 --> 00:11:16,769
through and basically be shown the

00:11:14,519 --> 00:11:20,490
algorithm for each subroutine that's

00:11:16,769 --> 00:11:22,709
large enough to have comments in it and

00:11:20,490 --> 00:11:24,839
now all that's doing is hauling away

00:11:22,709 --> 00:11:28,009
everything except the subroutine names

00:11:24,839 --> 00:11:30,500
and the package names and the comments

00:11:28,009 --> 00:11:33,480
the other thing you often want to do is

00:11:30,500 --> 00:11:35,250
understand what external resources a

00:11:33,480 --> 00:11:38,009
piece of code is using so I've got

00:11:35,250 --> 00:11:39,839
another fold like this which just folds

00:11:38,009 --> 00:11:41,910
around every use statement so you can

00:11:39,839 --> 00:11:43,500
very quickly see all the use statements

00:11:41,910 --> 00:11:46,980
and therefore work out everything that's

00:11:43,500 --> 00:11:49,860
being used within this code and every

00:11:46,980 --> 00:11:52,230
one of these is just a special case in

00:11:49,860 --> 00:11:55,649
my vim wreck of a general tool that I

00:11:52,230 --> 00:11:58,560
wrote which folds around the most recent

00:11:55,649 --> 00:12:05,399
search so for example if I search for

00:11:58,560 --> 00:12:07,350
errors and then I do a fold then I see

00:12:05,399 --> 00:12:11,790
it's folded around every occurrence of

00:12:07,350 --> 00:12:14,399
errors there but if I then while I'm

00:12:11,790 --> 00:12:17,040
folded say no I want cautions instead

00:12:14,399 --> 00:12:21,480
then it revolves around the cautions

00:12:17,040 --> 00:12:23,339
instead and this is incredibly useful to

00:12:21,480 --> 00:12:25,250
me just this one because you did do a

00:12:23,339 --> 00:12:29,610
match and it says look you've matched

00:12:25,250 --> 00:12:33,559
73 instances of errors how do I look at

00:12:29,610 --> 00:12:33,559
them quickly I just fold up around them

00:12:34,309 --> 00:12:41,540
so that's pretty cool as well the

00:12:38,459 --> 00:12:44,459
plug-in is called fold searches and

00:12:41,540 --> 00:12:47,209
again it's moderately complicated

00:12:44,459 --> 00:12:47,209
not particularly

00:12:51,920 --> 00:12:58,430
but the thing that really helped me more

00:12:54,529 --> 00:13:07,450
than anything else recently was adding

00:12:58,430 --> 00:13:07,450
another feature and that was this

00:13:15,280 --> 00:13:23,610
so if you're not using an editor that

00:13:19,590 --> 00:13:26,020
continuously checks your syntax and

00:13:23,610 --> 00:13:30,360
highlights when the syntax goes wrong

00:13:26,020 --> 00:13:30,360
automatically you're missing out I

00:13:31,470 --> 00:13:42,550
absolutely love this it's incredibly

00:13:35,680 --> 00:13:46,090
useful especially if it will also

00:13:42,550 --> 00:13:48,760
highlight just warnings and give you

00:13:46,090 --> 00:13:54,400
down the bottom hang on you only use

00:13:48,760 --> 00:13:56,080
that one possible place and then when

00:13:54,400 --> 00:14:00,820
you make it wrong it goes red and says

00:13:56,080 --> 00:14:03,000
you can't do that this completely

00:14:00,820 --> 00:14:05,020
changes the way that I write cool

00:14:03,000 --> 00:14:08,250
because you basically just don't write

00:14:05,020 --> 00:14:08,250
syntax errors anymore

00:14:16,560 --> 00:14:23,470
if you've written something that at

00:14:19,330 --> 00:14:25,720
compile time does some kind of side

00:14:23,470 --> 00:14:36,339
effect yeah you get warnings about it or

00:14:25,720 --> 00:14:38,500
errors about it now it's compile time

00:14:36,339 --> 00:14:40,180
it's it's doing it at compile times it's

00:14:38,500 --> 00:14:42,280
not actually executing the code every

00:14:40,180 --> 00:14:46,030
time I type something because that would

00:14:42,280 --> 00:14:49,930
be insane but it's doing a purl - see on

00:14:46,030 --> 00:14:53,560
my buffer every time I change the buffer

00:14:49,930 --> 00:14:55,780
in any way and there are now if you're

00:14:53,560 --> 00:14:58,540
using the most recent version of vim vim

00:14:55,780 --> 00:15:01,810
eight a couple of different plugins that

00:14:58,540 --> 00:15:04,870
will let you do that the one I'm using

00:15:01,810 --> 00:15:09,070
is called I'll a led a synchronous

00:15:04,870 --> 00:15:12,970
linting engine and if you haven't seen

00:15:09,070 --> 00:15:16,480
this it only works in them eight maybe

00:15:12,970 --> 00:15:19,510
in late five seven something or other

00:15:16,480 --> 00:15:21,010
but it certainly worked in vim eight if

00:15:19,510 --> 00:15:22,960
you haven't seen this it's the one that

00:15:21,010 --> 00:15:27,769
I strongly recommend the other module

00:15:22,960 --> 00:15:31,040
that I'm using is the vim here

00:15:27,769 --> 00:15:33,999
I don't think it's French but what it

00:15:31,040 --> 00:15:37,129
does is the syntax highlighting

00:15:33,999 --> 00:15:39,379
basically it keeps an eye on your quick

00:15:37,129 --> 00:15:41,389
fix list and if your quick fix list has

00:15:39,379 --> 00:15:45,079
anything in it it goes to those lines

00:15:41,389 --> 00:15:49,939
and highlights them for you and that's

00:15:45,079 --> 00:15:51,559
kind of useful as well so I'll and here

00:15:49,939 --> 00:15:53,829
they're not in the table because they

00:15:51,559 --> 00:15:56,209
ain't mine

00:15:53,829 --> 00:15:58,399
but this is in the table all the

00:15:56,209 --> 00:16:09,799
configuration that I use for it is in

00:15:58,399 --> 00:16:14,319
the table all as well so if I've got a

00:16:09,799 --> 00:16:17,420
Perl file and I put something bad in it

00:16:14,319 --> 00:16:20,059
like that did you notice not only did it

00:16:17,420 --> 00:16:22,759
highlight where the arrow is detected

00:16:20,059 --> 00:16:23,839
but the whole color changed I'm not sure

00:16:22,759 --> 00:16:25,429
if the screen is good enough for you to

00:16:23,839 --> 00:16:29,389
notice that watch what happens when I

00:16:25,429 --> 00:16:31,899
remove this it starts being sickly

00:16:29,389 --> 00:16:35,059
yellow and it goes to nice yellow and

00:16:31,899 --> 00:16:38,089
the reason for that is that sometimes

00:16:35,059 --> 00:16:40,850
you can insert some code which in and of

00:16:38,089 --> 00:16:43,579
itself is okay but break something

00:16:40,850 --> 00:16:45,319
further down and so if the actual error

00:16:43,579 --> 00:16:47,689
is not being highlighted I'd still like

00:16:45,319 --> 00:16:49,790
to see that this is not working very

00:16:47,689 --> 00:16:52,399
well so what this is actually doing is

00:16:49,790 --> 00:16:54,259
it's changing from bright yellow to kind

00:16:52,399 --> 00:16:56,629
of mustard yellow and it's making the

00:16:54,259 --> 00:16:59,920
background be a very dull red which you

00:16:56,629 --> 00:17:02,509
may or may not be able to see there

00:16:59,920 --> 00:17:06,199
which is enough to say hey something

00:17:02,509 --> 00:17:09,350
somewhere is wrong so once I had this

00:17:06,199 --> 00:17:11,899
idea the way this works is that I call

00:17:09,350 --> 00:17:14,569
out to Mac old system itself and

00:17:11,899 --> 00:17:16,399
actually change the profile on the

00:17:14,569 --> 00:17:19,909
terminal at this point to change the

00:17:16,399 --> 00:17:22,669
whole color scheme and you say why would

00:17:19,909 --> 00:17:26,270
you do it that way Damian because of

00:17:22,669 --> 00:17:28,850
what you also get nowadays I'm working

00:17:26,270 --> 00:17:32,510
about equally in Perl 5 and in Perl 6

00:17:28,850 --> 00:17:34,370
and that's a problem because if you're

00:17:32,510 --> 00:17:36,950
switching back and forth between Perl 5

00:17:34,370 --> 00:17:39,590
and Perl 6 you will very quickly start

00:17:36,950 --> 00:17:41,390
writing Perl 5 isms and 6 and 12 6 isms

00:17:39,590 --> 00:17:43,100
in 5 and you're going to have some ways

00:17:41,390 --> 00:17:46,430
keeping it straight how do I keep it

00:17:43,100 --> 00:17:49,880
straight I finally found a use for

00:17:46,430 --> 00:17:52,220
syntax highlighting I've never liked

00:17:49,880 --> 00:17:58,310
that I've never used it but now when i

00:17:52,220 --> 00:18:00,470
go to a Perl 6 file this happens not

00:17:58,310 --> 00:18:05,270
only does it change color it changes

00:18:00,470 --> 00:18:09,830
font and it can change anything so if I

00:18:05,270 --> 00:18:12,890
go to a Haskell program it goes into a

00:18:09,830 --> 00:18:19,100
hyper modern kind of font if I go into a

00:18:12,890 --> 00:18:23,740
Fortran program and this is the live

00:18:19,100 --> 00:18:26,900
editor you can actually edit this and

00:18:23,740 --> 00:18:28,820
find things in it it's kind of cool and

00:18:26,900 --> 00:18:43,310
of course if you're forced to go to a

00:18:28,820 --> 00:18:45,590
Java program yeah Comic Sans yeah so

00:18:43,310 --> 00:18:47,930
basically that's just a one-liner

00:18:45,590 --> 00:18:50,480
whenever I enter a buffer I have this

00:18:47,930 --> 00:18:52,430
auto profile changer and you can set up

00:18:50,480 --> 00:18:54,680
various different kinds of profiles

00:18:52,430 --> 00:18:59,420
which you have to name in McColl's

00:18:54,680 --> 00:19:04,220
yourself and it just basically calls the

00:18:59,420 --> 00:19:06,140
change profile function and that change

00:19:04,220 --> 00:19:08,810
profile function is just those little

00:19:06,140 --> 00:19:12,620
thing that I wrote that literally just

00:19:08,810 --> 00:19:16,250
does a an Apple script that says set the

00:19:12,620 --> 00:19:18,140
current profile to whatever and I know

00:19:16,250 --> 00:19:19,850
it seems incredibly stupid but this is

00:19:18,140 --> 00:19:21,860
one of the most useful things that I

00:19:19,850 --> 00:19:24,410
have done in the last year that improved

00:19:21,860 --> 00:19:25,760
my own productivity just for going back

00:19:24,410 --> 00:19:28,210
and forth between different kind of

00:19:25,760 --> 00:19:28,210
languages

00:19:31,830 --> 00:19:37,360
that's a big thing let me show you just

00:19:34,000 --> 00:19:40,389
a little thing that was in the Perl 6

00:19:37,360 --> 00:19:43,210
version of it so in Perl 6 of course we

00:19:40,389 --> 00:19:48,340
use the double angles and single angles

00:19:43,210 --> 00:19:55,419
as basically a list of string delimiter

00:19:48,340 --> 00:19:59,019
x' but in my version it also matches the

00:19:55,419 --> 00:20:00,549
other end 1 now in standard vim double

00:19:59,019 --> 00:20:03,279
angles certainly don't match and not

00:20:00,549 --> 00:20:05,230
even single angles match and it

00:20:03,279 --> 00:20:07,090
surprises me because I teach them quite

00:20:05,230 --> 00:20:10,210
a lot a lot of people still don't know

00:20:07,090 --> 00:20:12,129
how to make this do that so I thought

00:20:10,210 --> 00:20:17,019
that I would just very quickly show you

00:20:12,129 --> 00:20:18,549
how to do this and it's literally you

00:20:17,019 --> 00:20:21,250
just set an option in your vim rec

00:20:18,549 --> 00:20:24,100
called match pairs and you can add to

00:20:21,250 --> 00:20:26,110
that any sets of pairs of characters

00:20:24,100 --> 00:20:28,389
separated by colons and because I use

00:20:26,110 --> 00:20:32,049
Perl 6 so much I even set that one which

00:20:28,389 --> 00:20:35,289
is what you get if you dump a Perl 6

00:20:32,049 --> 00:20:36,759
match object and it's just useful to be

00:20:35,289 --> 00:20:38,350
able to jump back and forth between and

00:20:36,759 --> 00:20:41,440
it really does jump back and forth

00:20:38,350 --> 00:20:50,309
between them so that can be kind of

00:20:41,440 --> 00:20:53,019
handy code completion

00:20:50,309 --> 00:20:57,100
everyone got completion maps to their

00:20:53,019 --> 00:20:58,419
tab key or something in their vim I just

00:20:57,100 --> 00:21:01,570
I couldn't live without this because I'm

00:20:58,419 --> 00:21:05,850
a two-finger typist I'm hopeless so when

00:21:01,570 --> 00:21:08,350
I'm creating a new hash initialization

00:21:05,850 --> 00:21:11,860
there's no way I'm going to type the fat

00:21:08,350 --> 00:21:14,590
arrow by hitting the shift key for the

00:21:11,860 --> 00:21:19,090
arrow part of it so I just Matt double

00:21:14,590 --> 00:21:25,990
comma to fat arrow because life's too

00:21:19,090 --> 00:21:29,259
short but then I mapped the completion

00:21:25,990 --> 00:21:35,399
of a double arrow so if your cursor is

00:21:29,259 --> 00:21:35,399
beside a fat arrow and I hit tab watch

00:21:36,419 --> 00:21:41,039
yeah I thought that's what you'd say

00:21:41,730 --> 00:21:49,220
and if it's beside a common character

00:21:44,309 --> 00:21:51,480
and I hit tab thank you

00:21:49,220 --> 00:21:53,970
now of course that doesn't help me if

00:21:51,480 --> 00:21:57,539
I've already written the thing badly but

00:21:53,970 --> 00:21:59,730
I have also oval I've also redefined my

00:21:57,539 --> 00:22:00,389
equals operator to just take care of

00:21:59,730 --> 00:22:03,960
that for me

00:22:00,389 --> 00:22:05,460
in normal mode and my plus operator will

00:22:03,960 --> 00:22:08,639
do it for any other character that I

00:22:05,460 --> 00:22:10,740
choose to do it for and it will do it

00:22:08,639 --> 00:22:12,419
for equal signs as well I don't have an

00:22:10,740 --> 00:22:17,100
example of the equal signs but let's

00:22:12,419 --> 00:22:21,080
just see dollar x equals two dollar

00:22:17,100 --> 00:22:25,860
yadda yadda equals and it lines it up

00:22:21,080 --> 00:22:28,860
whatever and then I went crazy with the

00:22:25,860 --> 00:22:31,409
completion man did I go crazy because if

00:22:28,860 --> 00:22:33,409
I just open opened a curly bracket what

00:22:31,409 --> 00:22:37,139
am i eventually going to need to do

00:22:33,409 --> 00:22:39,690
close the curly bracket so I tab it

00:22:37,139 --> 00:22:44,250
closes the curly bracket and leaves me

00:22:39,690 --> 00:22:47,250
in the middle obviously but then I

00:22:44,250 --> 00:22:49,289
realized if I've just opened that curly

00:22:47,250 --> 00:22:51,299
bracket most of the time I don't want it

00:22:49,289 --> 00:22:55,909
to all be on the same line so if I

00:22:51,299 --> 00:22:58,769
complete when I'm between curly brackets

00:22:55,909 --> 00:23:00,899
it lays it out like that and it was

00:22:58,769 --> 00:23:10,679
great right up until I did my first

00:23:00,899 --> 00:23:13,590
substitution so I fixed it and yeah if

00:23:10,679 --> 00:23:19,529
it had been a match instead it would

00:23:13,590 --> 00:23:23,220
have fixed it the other way and then I

00:23:19,529 --> 00:23:26,630
got sick of writing for loops so now I

00:23:23,220 --> 00:23:26,630
complete for loops like this

00:23:34,480 --> 00:23:38,590
and so on and it's a generalized

00:23:36,430 --> 00:23:40,570
mechanism you can write any kind of

00:23:38,590 --> 00:23:43,600
snippet with any kind of placeholders

00:23:40,570 --> 00:23:47,200
and it'll just walk you through it one

00:23:43,600 --> 00:23:49,720
thing you can't complete however is the

00:23:47,200 --> 00:23:51,940
name of a module that you want to use

00:23:49,720 --> 00:23:53,980
because completion generally works by

00:23:51,940 --> 00:23:55,620
things that are already in the file or

00:23:53,980 --> 00:23:58,360
things that we already know about

00:23:55,620 --> 00:24:01,990
so I set my completion up so it knows

00:23:58,360 --> 00:24:07,120
about every single module that I have

00:24:01,990 --> 00:24:11,620
installed so if I complete on this it'll

00:24:07,120 --> 00:24:14,410
give me a list of all of them if I'm

00:24:11,620 --> 00:24:17,760
only completing on a partial that'll

00:24:14,410 --> 00:24:17,760
only give me the list of the partial

00:24:19,380 --> 00:24:24,990
have you ever done this have you ever

00:24:21,790 --> 00:24:28,570
started writing a single quoted string

00:24:24,990 --> 00:24:34,870
and then realize you needed a new line

00:24:28,570 --> 00:24:35,950
in it and I got sick of that so what did

00:24:34,870 --> 00:24:39,220
I do I said well I'm just going to

00:24:35,950 --> 00:24:41,380
finish it with a double quote and if I

00:24:39,220 --> 00:24:44,440
complete immediately after that double

00:24:41,380 --> 00:24:47,290
quote it's going to go back and fix the

00:24:44,440 --> 00:24:49,060
double quote and then if you later

00:24:47,290 --> 00:24:50,830
decide you don't want it and you do it

00:24:49,060 --> 00:24:53,290
the single quote then it will complete

00:24:50,830 --> 00:24:57,070
with a single quote instead and of

00:24:53,290 --> 00:25:03,060
course it also works if you want to

00:24:57,070 --> 00:25:11,400
change a QQ to a queue or aq2aq cube

00:25:03,060 --> 00:25:11,400
naturally so maybe my favorite one is

00:25:11,610 --> 00:25:17,500
whenever I'm completing my completion

00:25:14,830 --> 00:25:20,740
mechanism looks back to see if I'm in

00:25:17,500 --> 00:25:22,390
the middle of a file path and if I'm in

00:25:20,740 --> 00:25:26,020
the middle of a file path which you can

00:25:22,390 --> 00:25:34,280
tell because there's a slash there then

00:25:26,020 --> 00:25:35,540
it completes on file names like that

00:25:34,280 --> 00:25:38,060
so now it doesn't matter I'm a

00:25:35,540 --> 00:25:41,150
two-finger typist basically one of my

00:25:38,060 --> 00:25:43,400
fingers just stays on the tab key the

00:25:41,150 --> 00:25:46,220
whole time you may not want to do all of

00:25:43,400 --> 00:25:48,080
that but some subset of it is going to

00:25:46,220 --> 00:25:50,300
be fairly useful for you and the plug-in

00:25:48,080 --> 00:25:52,130
to do it will be in the tarball it's

00:25:50,300 --> 00:25:54,500
called smart comm for smart completion

00:25:52,130 --> 00:25:57,500
now if you don't like my module there

00:25:54,500 --> 00:26:00,710
are like 20 other modules available on

00:25:57,500 --> 00:26:04,640
github or on the SourceForge repository

00:26:00,710 --> 00:26:06,830
that do completion for you and one of

00:26:04,640 --> 00:26:13,130
those is probably going to do what you

00:26:06,830 --> 00:26:15,770
want to do my ones reasonably smart one

00:26:13,130 --> 00:26:18,740
of the other things that does I might

00:26:15,770 --> 00:26:19,040
show you later mmm there's too much to

00:26:18,740 --> 00:26:22,520
go on

00:26:19,040 --> 00:26:25,820
and basically a lot of my vim rec

00:26:22,520 --> 00:26:28,880
consists of configuring all these

00:26:25,820 --> 00:26:30,830
different completions to do whatever it

00:26:28,880 --> 00:26:32,390
is you wanted to i've also I didn't show

00:26:30,830 --> 00:26:34,070
to you but I've got a completion that if

00:26:32,390 --> 00:26:37,160
you type two arrows together and

00:26:34,070 --> 00:26:39,590
completed it makes it into the fancy

00:26:37,160 --> 00:26:41,840
arrow double arrow so you don't have to

00:26:39,590 --> 00:26:43,670
remember how to actually do that on your

00:26:41,840 --> 00:26:45,770
keyboard and you can see the other ones

00:26:43,670 --> 00:26:47,720
that we did but it does all kinds of

00:26:45,770 --> 00:26:50,420
things here's the one where if you

00:26:47,720 --> 00:26:52,850
complete on an equals or an arrow then

00:26:50,420 --> 00:26:54,950
it aligns the kind of thing so you know

00:26:52,850 --> 00:26:57,290
I've got all sorts of things here are

00:26:54,950 --> 00:26:58,940
the snippets that I created so the for

00:26:57,290 --> 00:27:01,160
loop you just said my blah blah blah

00:26:58,940 --> 00:27:03,680
blah blah and each of those three

00:27:01,160 --> 00:27:07,480
underscores became a placeholder which

00:27:03,680 --> 00:27:10,340
completions and just moved you between

00:27:07,480 --> 00:27:13,540
anyway it's all in the tarball you can

00:27:10,340 --> 00:27:13,540
play around with it or not

00:27:33,110 --> 00:27:39,660
have you ever done this if you're a user

00:27:36,780 --> 00:27:43,440
of completion have you ever tried to

00:27:39,660 --> 00:27:46,140
complete something in the middle of an

00:27:43,440 --> 00:27:50,220
existing identifier what's going to

00:27:46,140 --> 00:27:53,340
happen when that when I do this it's

00:27:50,220 --> 00:27:55,890
going to complete it and leave me with

00:27:53,340 --> 00:28:02,730
the wrong thing watch carefully

00:27:55,890 --> 00:28:05,700
I just set it up so it didn't it's not

00:28:02,730 --> 00:28:07,830
hard to do and that just makes my life

00:28:05,700 --> 00:28:09,750
so much better for two reasons one

00:28:07,830 --> 00:28:11,190
because they don't now with variables

00:28:09,750 --> 00:28:14,070
where these doubled names all the time

00:28:11,190 --> 00:28:17,130
and two because I feel just that tiny

00:28:14,070 --> 00:28:19,820
spark of hey I'm not such an idiot after

00:28:17,130 --> 00:28:22,230
all every time this happens because

00:28:19,820 --> 00:28:24,240
programming is the process of sitting

00:28:22,230 --> 00:28:26,690
there and feeling like an idiot almost

00:28:24,240 --> 00:28:29,040
all the time

00:28:26,690 --> 00:28:31,230
everything I do every mistake I made I

00:28:29,040 --> 00:28:34,470
kind of odd in it and then you get this

00:28:31,230 --> 00:28:37,860
one little moment of pave okay I may be

00:28:34,470 --> 00:28:45,030
an idiot but I'm not a total idiot so

00:28:37,860 --> 00:28:46,950
how do you do that unbelievably easy one

00:28:45,030 --> 00:28:50,520
of the events that you can auto command

00:28:46,950 --> 00:28:53,160
on in vim is the complete done event and

00:28:50,520 --> 00:28:55,530
this event is raised every time a

00:28:53,160 --> 00:28:57,450
completion is completed successfully and

00:28:55,530 --> 00:28:59,370
so all I did is I said okay whenever

00:28:57,450 --> 00:29:03,380
that happens UNDOF all the completions

00:28:59,370 --> 00:29:09,000
literally go and find where we are and

00:29:03,380 --> 00:29:12,090
grab that line and replace any instance

00:29:09,000 --> 00:29:15,419
of keyword characters to the current

00:29:12,090 --> 00:29:18,950
column of the cursor followed by exactly

00:29:15,419 --> 00:29:22,020
the same keyword characters with nothing

00:29:18,950 --> 00:29:24,840
keeping only the second set so what that

00:29:22,020 --> 00:29:28,200
literally does is matches some keyword

00:29:24,840 --> 00:29:30,690
characters forget that it did so match

00:29:28,200 --> 00:29:33,840
those same ones again and then remove

00:29:30,690 --> 00:29:36,000
them if you don't understand how that

00:29:33,840 --> 00:29:38,250
does doesn't matter in the tarball you

00:29:36,000 --> 00:29:39,840
literally cut and paste it into your vim

00:29:38,250 --> 00:29:41,929
rec and you never have to think about it

00:29:39,840 --> 00:29:41,929
again

00:29:45,170 --> 00:29:53,370
so assuming that I've eventually got my

00:29:48,120 --> 00:30:00,630
module right and it's not going to like

00:29:53,370 --> 00:30:02,190
that right then I probably want to

00:30:00,630 --> 00:30:05,160
document it and one of the things that I

00:30:02,190 --> 00:30:07,160
want to document are the Diagnostics now

00:30:05,160 --> 00:30:09,330
I don't know how you go about diagnosing

00:30:07,160 --> 00:30:11,880
Diagnostics I've got a really simple

00:30:09,330 --> 00:30:14,610
technique for for documenting all my

00:30:11,880 --> 00:30:22,590
Diagnostics and that's literally I look

00:30:14,610 --> 00:30:24,630
for die or croak and I go through and

00:30:22,590 --> 00:30:27,420
find all of those and I document all of

00:30:24,630 --> 00:30:30,000
them and that way anything that it's

00:30:27,420 --> 00:30:32,190
going to throw itself will be in the

00:30:30,000 --> 00:30:34,350
documentation but have you ever had this

00:30:32,190 --> 00:30:38,000
situation where you found a number of

00:30:34,350 --> 00:30:43,770
things that you want to gather together

00:30:38,000 --> 00:30:45,270
how do you do that yeah yeah if you're

00:30:43,770 --> 00:30:48,510
one of the ten people in the world that

00:30:45,270 --> 00:30:50,730
knows that when you use a captured here

00:30:48,510 --> 00:30:52,620
register when you yank to a register if

00:30:50,730 --> 00:30:57,090
you make the register a capital letter

00:30:52,620 --> 00:30:58,890
it appends to the register and that

00:30:57,090 --> 00:31:00,750
works terrifically you go through you do

00:30:58,890 --> 00:31:06,810
six of these and then you forget on the

00:31:00,750 --> 00:31:09,570
seventh one and it overrides so what did

00:31:06,810 --> 00:31:13,890
I do instead I said yank should just

00:31:09,570 --> 00:31:15,360
know what I just matched and be able to

00:31:13,890 --> 00:31:17,310
automatically yank every line that I

00:31:15,360 --> 00:31:23,340
just matched so I made a new kind of

00:31:17,310 --> 00:31:25,740
yank a ym4 yank match UI ym and it Yanks

00:31:23,340 --> 00:31:30,020
all seven lines that had either of those

00:31:25,740 --> 00:31:32,850
words in it and then you go to

00:31:30,020 --> 00:31:35,060
diagnostics and you paste and there they

00:31:32,850 --> 00:31:35,060
all are

00:31:36,170 --> 00:31:44,310
is that not awesome I find that

00:31:40,500 --> 00:31:46,310
extremely useful amazingly useful but

00:31:44,310 --> 00:31:48,300
it's only the beginning

00:31:46,310 --> 00:31:50,720
you told me that you didn't like

00:31:48,300 --> 00:31:52,880
comments

00:31:50,720 --> 00:31:54,610
and I can understand that they're kind

00:31:52,880 --> 00:31:57,620
of annoying

00:31:54,610 --> 00:31:59,720
so let's find all the lines with

00:31:57,620 --> 00:32:02,990
comments in them and yes there are quite

00:31:59,720 --> 00:32:05,480
a few there and let's just do not a ym4

00:32:02,990 --> 00:32:10,310
yank matches but a DM for delete matches

00:32:05,480 --> 00:32:13,340
and now all the comments are gone thank

00:32:10,310 --> 00:32:17,540
you or you might be other way around you

00:32:13,340 --> 00:32:19,790
might only like comments so you do

00:32:17,540 --> 00:32:23,570
capital DM and it deletes everything

00:32:19,790 --> 00:32:25,100
except the comments yeah and you can do

00:32:23,570 --> 00:32:28,150
the other thing you can say I want to

00:32:25,100 --> 00:32:31,610
yank everything except the comments or

00:32:28,150 --> 00:32:33,050
accept whatever you just last matched so

00:32:31,610 --> 00:32:34,670
I find this to be a really really

00:32:33,050 --> 00:32:36,590
effective workflow you search for it

00:32:34,670 --> 00:32:38,060
you're interested in you check it out

00:32:36,590 --> 00:32:42,680
and then you just yank it all and take

00:32:38,060 --> 00:32:45,470
it wherever it needs to go the plug-in

00:32:42,680 --> 00:32:48,940
is called the yank matches and guess

00:32:45,470 --> 00:32:48,940
what it's in the tarball

00:33:01,090 --> 00:33:06,690
any people still using five eight yeah

00:33:04,659 --> 00:33:13,840
sorry

00:33:06,690 --> 00:33:17,499
okay and of course when I use five eight

00:33:13,840 --> 00:33:20,740
and try and do something that five eight

00:33:17,499 --> 00:33:24,909
can do then I get an error but what

00:33:20,740 --> 00:33:29,649
happens if I move to five ten no error

00:33:24,909 --> 00:33:30,370
and now it runs but hang on that's not

00:33:29,649 --> 00:33:32,499
how it works

00:33:30,370 --> 00:33:34,600
you've got a version of Perl and it's

00:33:32,499 --> 00:33:35,740
either five eight all five can and it

00:33:34,600 --> 00:33:41,070
either works or it doesn't

00:33:35,740 --> 00:33:41,070
no not for me because I use Polly pool

00:33:41,340 --> 00:33:48,039
if I changed it to try and take the keys

00:33:45,909 --> 00:33:50,769
of an array reference well you can do

00:33:48,039 --> 00:33:54,909
that in Perl 512 but not in 510 but in

00:33:50,769 --> 00:33:57,240
512 you can do that but you have to put

00:33:54,909 --> 00:33:59,980
the amperes at the @ sign in front of it

00:33:57,240 --> 00:34:03,999
unless you get to 514 in which case you

00:33:59,980 --> 00:34:09,490
can until you get to 522 when it becomes

00:34:03,999 --> 00:34:12,550
a warning and 524 when it becomes an

00:34:09,490 --> 00:34:14,290
error so not only do I have poly Perl

00:34:12,550 --> 00:34:15,609
let's see the warning so there's the

00:34:14,290 --> 00:34:17,409
warning in there it's still doing the

00:34:15,609 --> 00:34:19,240
work and that's cool but it's very hard

00:34:17,409 --> 00:34:21,129
to tell the warning from what it's doing

00:34:19,240 --> 00:34:24,089
so I also wrote something not just

00:34:21,129 --> 00:34:27,190
called poly pill but called motley Perl

00:34:24,089 --> 00:34:30,879
and what motley Perl does is it color

00:34:27,190 --> 00:34:33,609
codes standard out and standard error so

00:34:30,879 --> 00:34:35,440
when I run this now the errors come out

00:34:33,609 --> 00:34:40,450
and read and the good stuff comes out in

00:34:35,440 --> 00:34:44,079
blue and that is surprisingly helpful if

00:34:40,450 --> 00:34:48,040
I go to 524 of course that's now

00:34:44,079 --> 00:34:51,270
forbidden it's not allowed at all so how

00:34:48,040 --> 00:34:51,270
in the heck am i doing all this

00:34:54,440 --> 00:35:02,180
and the answer is Polly poll takes your

00:34:58,579 --> 00:35:04,369
source code analyzes it to find what

00:35:02,180 --> 00:35:06,710
version of use pearl you've said use

00:35:04,369 --> 00:35:11,500
five at double-o eight five ten five

00:35:06,710 --> 00:35:14,420
twelve then it goes to pearl brew and

00:35:11,500 --> 00:35:18,859
switches pearl brew to that version of

00:35:14,420 --> 00:35:22,309
pearl so it changes the meaning of use

00:35:18,859 --> 00:35:24,440
number from being this is the minimum

00:35:22,309 --> 00:35:26,270
number allowable - don't bother

00:35:24,440 --> 00:35:28,069
compiling this with anything less just

00:35:26,270 --> 00:35:30,140
go and find this number and compile it

00:35:28,069 --> 00:35:32,359
for me now of course when you deploy

00:35:30,140 --> 00:35:34,010
that code you take off the polyfill and

00:35:32,359 --> 00:35:36,079
just make it pearl and then it is the

00:35:34,010 --> 00:35:38,599
usual behavior but this is incredibly

00:35:36,079 --> 00:35:40,700
useful because when I've written a piece

00:35:38,599 --> 00:35:42,559
of code especially a module I'd really

00:35:40,700 --> 00:35:45,079
like to know which versions that will

00:35:42,559 --> 00:35:46,700
and won't run under so rather than

00:35:45,079 --> 00:35:49,609
sitting there and trying to do that I

00:35:46,700 --> 00:35:52,250
now just wind the number back in the use

00:35:49,609 --> 00:35:57,220
number statement until I get horrible

00:35:52,250 --> 00:35:57,220
mustard-yellow and I move forward one

00:36:02,710 --> 00:36:06,260
this is something I only just did

00:36:04,760 --> 00:36:09,640
recently so if it goes horribly wrong

00:36:06,260 --> 00:36:09,640
you'll understand why

00:36:14,360 --> 00:36:20,420
I was giving a class on functional

00:36:16,790 --> 00:36:22,400
programming in Perl one of the great

00:36:20,420 --> 00:36:25,160
advantages of functional programming in

00:36:22,400 --> 00:36:27,650
Perl or in any language is how easy it

00:36:25,160 --> 00:36:29,630
is to refactor stuff when there are no

00:36:27,650 --> 00:36:32,090
side effects and no mutable variables

00:36:29,630 --> 00:36:34,430
you can literally just pull a chunk of

00:36:32,090 --> 00:36:40,420
code out stick it in a subroutine and

00:36:34,430 --> 00:36:42,590
put the subroutine call in its place and

00:36:40,420 --> 00:36:47,840
dominus is it too late to sign up for

00:36:42,590 --> 00:36:50,450
your class on this if it's not then you

00:36:47,840 --> 00:36:52,790
should recite you should want to go to

00:36:50,450 --> 00:36:55,010
any class the dominance of teaching but

00:36:52,790 --> 00:36:57,770
more interestingly for this particular

00:36:55,010 --> 00:37:00,680
discussion functional programming is a

00:36:57,770 --> 00:37:01,850
way to make your effecting easier it's

00:37:00,680 --> 00:37:04,070
not the case when you have non

00:37:01,850 --> 00:37:05,780
functional programming where you're

00:37:04,070 --> 00:37:10,220
assigning two variables and things like

00:37:05,780 --> 00:37:12,320
that unless you're me and if you're me

00:37:10,220 --> 00:37:13,490
you take the bit of code well first of

00:37:12,320 --> 00:37:15,980
all let's see what this bit of code does

00:37:13,490 --> 00:37:18,410
basically just print out four numbers

00:37:15,980 --> 00:37:20,270
it's going through pulling some keys out

00:37:18,410 --> 00:37:23,030
of a configuration sorting them by an

00:37:20,270 --> 00:37:24,950
importing lis complicated sort and then

00:37:23,030 --> 00:37:28,130
mapping them back to the original values

00:37:24,950 --> 00:37:30,530
in order but I don't want to do that I

00:37:28,130 --> 00:37:32,930
want to take that all away so I simply

00:37:30,530 --> 00:37:37,640
visually select the whole thing and do

00:37:32,930 --> 00:37:38,750
control R for refactor and it says well

00:37:37,640 --> 00:37:41,180
what do you want this to be called

00:37:38,750 --> 00:37:44,060
instead let's call this heat map sort

00:37:41,180 --> 00:37:45,710
because that's what it is and it says

00:37:44,060 --> 00:37:48,620
well it's going to have to return one of

00:37:45,710 --> 00:37:51,980
these variables or something what's it

00:37:48,620 --> 00:37:54,830
supposed to return I'm not sure what are

00:37:51,980 --> 00:38:00,350
the options hit completion shows you the

00:37:54,830 --> 00:38:02,930
options return heat map and so it

00:38:00,350 --> 00:38:05,450
replaces all of your code with a call to

00:38:02,930 --> 00:38:06,950
this HM sort function which of course

00:38:05,450 --> 00:38:09,350
makes the whole thing go horribly wrong

00:38:06,950 --> 00:38:12,470
because now we need to say rather than

00:38:09,350 --> 00:38:15,590
heat map we need to say for HM sort and

00:38:12,470 --> 00:38:17,450
then all we need to do is insert the HM

00:38:15,590 --> 00:38:21,970
sort function that it's written for you

00:38:17,450 --> 00:38:21,970
and the code still runs

00:38:23,310 --> 00:38:29,220
which is pretty cool but if you did it

00:38:26,970 --> 00:38:30,930
in a functional style here's exactly

00:38:29,220 --> 00:38:34,590
that same bit of code and a functional

00:38:30,930 --> 00:38:35,790
style then it's even cooler I might just

00:38:34,590 --> 00:38:37,560
say well the only bit of this that I

00:38:35,790 --> 00:38:40,440
don't really like is that horrible sort

00:38:37,560 --> 00:38:45,690
so I'm going to refactor that I'm going

00:38:40,440 --> 00:38:47,520
to refactor that as numeric sort and it

00:38:45,690 --> 00:38:49,710
does and so hang on a minute didn't ask

00:38:47,520 --> 00:38:51,630
you what to return it worked out that

00:38:49,710 --> 00:38:53,910
this was functional code and therefore

00:38:51,630 --> 00:38:55,950
it didn't need to work out what to

00:38:53,910 --> 00:38:59,970
return it was just going to return the

00:38:55,950 --> 00:39:02,850
value of the functional expression so if

00:38:59,970 --> 00:39:05,850
I now install that you'll see it's just

00:39:02,850 --> 00:39:08,730
factored out that sort and it knew that

00:39:05,850 --> 00:39:15,540
it needed to pass at underscore to that

00:39:08,730 --> 00:39:17,630
and it still runs thank you it gets

00:39:15,540 --> 00:39:17,630
better

00:39:17,810 --> 00:39:30,780
if we do to the end of the statement and

00:39:22,050 --> 00:39:33,840
refactor it oh that's not the one I

00:39:30,780 --> 00:39:36,450
wanted yeah that's the one I wanted it

00:39:33,840 --> 00:39:38,430
knew now that it had to pass config in

00:39:36,450 --> 00:39:40,950
because it worked out configures the

00:39:38,430 --> 00:39:45,930
only variable in that code that we've

00:39:40,950 --> 00:39:47,700
refactored that wasn't declared so now

00:39:45,930 --> 00:39:52,800
all I have to pass that in so it passed

00:39:47,700 --> 00:39:55,350
that in and it's smart enough that if

00:39:52,800 --> 00:40:00,300
you refactor a line that starts with an

00:39:55,350 --> 00:40:03,110
assignment statement it knows to keep

00:40:00,300 --> 00:40:09,690
the assignment statement there for you

00:40:03,110 --> 00:40:12,480
and do that too so I would like to tell

00:40:09,690 --> 00:40:14,970
you that this is a pure vim plug-in but

00:40:12,480 --> 00:40:17,370
I would be lying to you because there is

00:40:14,970 --> 00:40:23,180
no way that I was going to be able to do

00:40:17,370 --> 00:40:26,490
this in pure vim so there is a plug-in

00:40:23,180 --> 00:40:29,190
but all that plug-in does is set up the

00:40:26,490 --> 00:40:32,100
refactoring and that's not what we

00:40:29,190 --> 00:40:35,790
wanted and calls out to I can't even

00:40:32,100 --> 00:40:37,170
show you where it calls out to a Perl

00:40:35,790 --> 00:40:39,930
script that I wrote

00:40:37,170 --> 00:40:42,869
that does all the refactoring for you

00:40:39,930 --> 00:40:46,230
and it's pretty smart it knows for

00:40:42,869 --> 00:40:48,960
example that all those variables don't

00:40:46,230 --> 00:40:50,369
need to be declared at all or a variable

00:40:48,960 --> 00:40:52,650
that ends in any one of these characters

00:40:50,369 --> 00:40:54,480
doesn't need to be declared so it's able

00:40:52,650 --> 00:40:57,030
to work out when things are functional

00:40:54,480 --> 00:41:02,430
and when they're not and this will of

00:40:57,030 --> 00:41:18,240
course be in Matar ball where is the tar

00:41:02,430 --> 00:41:20,460
ball them as pearl IDE and yes I guess

00:41:18,240 --> 00:41:25,349
if we're talking about it it's all been

00:41:20,460 --> 00:41:28,650
a bit vapid which is not how the French

00:41:25,349 --> 00:41:31,619
spell vapid anyway everyone got the QR

00:41:28,650 --> 00:41:33,690
code and it did anyone time running a

00:41:31,619 --> 00:41:35,940
long term server here did anyone

00:41:33,690 --> 00:41:37,440
actually take the QR code because I

00:41:35,940 --> 00:41:41,819
always put them up and people did take

00:41:37,440 --> 00:41:44,579
them and it worked awesome that will

00:41:41,819 --> 00:41:46,710
actually redirect you to my Google Drive

00:41:44,579 --> 00:41:48,240
and you'll get a tarball and you'll

00:41:46,710 --> 00:41:52,470
download the tar ball and it's got

00:41:48,240 --> 00:41:55,950
everything that I showed you in this

00:41:52,470 --> 00:41:57,359
session so at that point we're ready for

00:41:55,950 --> 00:41:58,619
quick has everyone been noticing that

00:41:57,359 --> 00:42:04,319
every time I clear the screen

00:41:58,619 --> 00:42:05,670
it puts what I cleared it to up there it

00:42:04,319 --> 00:42:07,049
was much better when the screen had

00:42:05,670 --> 00:42:09,720
lower resolution because that was much

00:42:07,049 --> 00:42:12,530
bigger but anyway I have a few minutes

00:42:09,720 --> 00:42:14,790
left how many minutes left do I have

00:42:12,530 --> 00:42:17,089
we've got seven minutes left is anyone

00:42:14,790 --> 00:42:17,089
have any questions

00:42:18,740 --> 00:42:24,230
when you're in script you had a last

00:42:20,570 --> 00:42:25,880
change see down there I do know how to

00:42:24,230 --> 00:42:30,349
use version control but I don't believe

00:42:25,880 --> 00:42:39,349
in it it just makes things more

00:42:30,349 --> 00:42:43,910
complicated do I do any interactive

00:42:39,349 --> 00:42:49,430
debugging very very rarely I honestly

00:42:43,910 --> 00:42:51,830
don't like the the way that the the Perl

00:42:49,430 --> 00:42:53,900
debugger does what it does

00:42:51,830 --> 00:42:56,450
I'm almost always just data dumping

00:42:53,900 --> 00:43:01,849
something which is the way I pretty much

00:42:56,450 --> 00:43:03,680
debug everything yeah yeah there are

00:43:01,849 --> 00:43:04,640
some very cool things around if you are

00:43:03,680 --> 00:43:08,210
going to do it

00:43:04,640 --> 00:43:16,640
I was when was I this is my life by the

00:43:08,210 --> 00:43:22,430
way where was I I was in Renault in

00:43:16,640 --> 00:43:25,280
Europe it was lovely and someone was

00:43:22,430 --> 00:43:28,820
showing me they had written a visual

00:43:25,280 --> 00:43:32,599
front-end to the pearl debugger that

00:43:28,820 --> 00:43:34,369
actually interfaced with vim that you

00:43:32,599 --> 00:43:36,770
could just be in your vim session and

00:43:34,369 --> 00:43:38,180
the debugger would actually highlight

00:43:36,770 --> 00:43:40,070
the line that it was debugging at the

00:43:38,180 --> 00:43:46,210
moment that was very cool I can't tell

00:43:40,070 --> 00:43:46,210
you where it was but it exists question

00:43:50,890 --> 00:43:55,640
ha what if I don't have a particular

00:43:53,240 --> 00:43:58,010
version of perlan the pearl' brew then

00:43:55,640 --> 00:44:02,390
what poly pearl and motley pill do is

00:43:58,010 --> 00:44:05,300
they go forward looking for the next

00:44:02,390 --> 00:44:07,369
available version so if you say it's got

00:44:05,300 --> 00:44:11,839
to be 514 if you don't have 514 but you

00:44:07,369 --> 00:44:14,230
have 518 those use 518 so they they do

00:44:11,839 --> 00:44:14,230
their best

00:44:17,450 --> 00:44:23,880
do I ever work with splits I work with

00:44:20,160 --> 00:44:26,849
tabs a lot one of the things that I do

00:44:23,880 --> 00:44:35,240
how can I show you this you go into a

00:44:26,849 --> 00:44:35,240
new window lingua and grammarian

00:44:42,480 --> 00:44:48,250
so apparently this has got bad code in

00:44:45,580 --> 00:44:49,630
it somewhere it's going to turn that off

00:44:48,250 --> 00:44:50,860
by the way if you've got one of these

00:44:49,630 --> 00:44:52,330
things you've got to be able to turn it

00:44:50,860 --> 00:44:56,860
off because it's really annoying

00:44:52,330 --> 00:45:00,460
otherwise so I have pearl doc basically

00:44:56,860 --> 00:45:03,790
plumbed right into my system and if I

00:45:00,460 --> 00:45:05,590
want to work out how fork works then

00:45:03,790 --> 00:45:08,230
it's actually putting it up in a

00:45:05,590 --> 00:45:10,270
separate tab so I do use separate tabs

00:45:08,230 --> 00:45:13,860
I don't like windows I don't like for

00:45:10,270 --> 00:45:16,450
the half screens of things so I just

00:45:13,860 --> 00:45:20,440
basically change more or less everything

00:45:16,450 --> 00:45:23,140
that was windowed into tab and then when

00:45:20,440 --> 00:45:24,520
I'm done with looking at this I just go

00:45:23,140 --> 00:45:30,000
back to the tab what was your question

00:45:24,520 --> 00:45:32,410
about tabs or windows to make it easier

00:45:30,000 --> 00:45:34,480
yeah no there is nothing it'll make it

00:45:32,410 --> 00:45:37,540
easier if you're using Windows your life

00:45:34,480 --> 00:45:39,670
is going to be sad and painful I just I

00:45:37,540 --> 00:45:44,410
don't use them the only time I ever ever

00:45:39,670 --> 00:45:47,500
ever use them is when I'm doing some

00:45:44,410 --> 00:45:49,510
kind of diff so if I want to diff

00:45:47,500 --> 00:45:51,640
against what's on disk at the moment

00:45:49,510 --> 00:45:52,960
I've got a command that does that and of

00:45:51,640 --> 00:45:54,340
course I do that in the window because

00:45:52,960 --> 00:45:57,450
it's the only way to make sense of

00:45:54,340 --> 00:45:57,450
looking at the two things simultaneously

00:45:57,570 --> 00:46:01,930
but otherwise I just don't use them so I

00:45:59,860 --> 00:46:06,870
have no good advice except don't use

00:46:01,930 --> 00:46:06,870
them question

00:46:15,789 --> 00:46:20,049
so the question was have I ever

00:46:17,769 --> 00:46:22,179
considered using the make facility

00:46:20,049 --> 00:46:24,759
within vim that does other things as

00:46:22,179 --> 00:46:27,279
well I was using that before I started

00:46:24,759 --> 00:46:29,769
using ale and ale is kind of an

00:46:27,279 --> 00:46:31,749
asynchronous layer on top of that and

00:46:29,769 --> 00:46:34,509
you can set up your ale that any way you

00:46:31,749 --> 00:46:37,029
like so it will by default aisle will do

00:46:34,509 --> 00:46:39,399
both curl - see and also purl critic I

00:46:37,029 --> 00:46:42,899
turned off the Pearl critic thing which

00:46:39,399 --> 00:46:42,899
is incredibly hypocritical of me I know

00:46:43,319 --> 00:46:49,149
do as I wrote not as I do

00:46:46,739 --> 00:46:50,949
so I'll we'll take care of that yet but

00:46:49,149 --> 00:46:53,169
before that I was using make and then I

00:46:50,949 --> 00:46:55,269
was using neo make which was an

00:46:53,169 --> 00:47:02,819
asynchronous make but I think I'll is

00:46:55,269 --> 00:47:02,819
better why don't I turn off Pearl critic

00:47:06,269 --> 00:47:14,379
because of false positives and it's not

00:47:12,639 --> 00:47:15,699
a criticism of pearl critic it's going

00:47:14,379 --> 00:47:17,589
to be impossible not to have false

00:47:15,699 --> 00:47:21,279
positives if you think about the kind of

00:47:17,589 --> 00:47:22,719
code that I write it's likely to come up

00:47:21,279 --> 00:47:25,229
with a lot of false positives and real

00:47:22,719 --> 00:47:25,229
positives

00:47:32,910 --> 00:47:39,150
I think sir probably the question was if

00:47:36,360 --> 00:47:41,610
I'm using a L or one of these other

00:47:39,150 --> 00:47:44,190
plugins do I run into problems with very

00:47:41,610 --> 00:47:46,440
large files very very rarely the track

00:47:44,190 --> 00:47:48,300
pull VARs used to run into a lot of

00:47:46,440 --> 00:47:50,760
problems on large files but it's getting

00:47:48,300 --> 00:47:52,530
better if you're finding that you're

00:47:50,760 --> 00:47:54,600
running into problems on large files

00:47:52,530 --> 00:47:56,790
it's almost always syntax highlighting

00:47:54,600 --> 00:47:58,860
is the problem so if your plugin

00:47:56,790 --> 00:48:04,380
involved syntax highlighting there's an

00:47:58,860 --> 00:48:13,670
option that you can set in your vim rec

00:48:04,380 --> 00:48:15,510
how do I get the vim rec syn max Kol and

00:48:13,670 --> 00:48:17,970
that makes a big difference

00:48:15,510 --> 00:48:20,880
I'm surprised if you especially have got

00:48:17,970 --> 00:48:22,620
wide code you've got tens of thousands

00:48:20,880 --> 00:48:26,190
of line nothing is going to save you

00:48:22,620 --> 00:48:28,320
from that slowdown and that's why all of

00:48:26,190 --> 00:48:30,450
my modules that impose any kind of

00:48:28,320 --> 00:48:31,940
overhead have a toggle that lets you

00:48:30,450 --> 00:48:36,540
turn them off

00:48:31,940 --> 00:48:41,130
so the linting I can turn off literally

00:48:36,540 --> 00:48:42,780
just semicolon m to turn it off and if

00:48:41,130 --> 00:48:46,650
you're writing plug-ins yourself I would

00:48:42,780 --> 00:48:48,630
strongly recommend if that's likely to

00:48:46,650 --> 00:48:50,010
have an overhead give the people a

00:48:48,630 --> 00:48:53,550
toggle so they can turn it off if they

00:48:50,010 --> 00:48:55,700
don't need it ok this will be the last

00:48:53,550 --> 00:48:55,700
question

00:49:02,180 --> 00:49:16,100
oh so the question is if you've got a

00:49:12,020 --> 00:49:18,890
large chain and your actual compilation

00:49:16,100 --> 00:49:20,270
is very slow and you're typing more and

00:49:18,890 --> 00:49:25,580
more stuff and it's going to be changing

00:49:20,270 --> 00:49:28,850
anyway is it going to short-circuit the

00:49:25,580 --> 00:49:32,270
previous one there are options in Aisle

00:49:28,850 --> 00:49:34,610
that let you do that um basically the

00:49:32,270 --> 00:49:36,590
the option is that you set up an auto

00:49:34,610 --> 00:49:39,440
command that says okay if I start typing

00:49:36,590 --> 00:49:42,290
again so if I go into insert mode again

00:49:39,440 --> 00:49:45,950
or if you know something else happens

00:49:42,290 --> 00:49:48,260
that indicates I'm active you could just

00:49:45,950 --> 00:49:51,500
set up it on cursor move then you can

00:49:48,260 --> 00:49:55,010
send a message to the asynchronous

00:49:51,500 --> 00:49:55,910
process and so just kill yourself but

00:49:55,010 --> 00:49:57,710
you have to set that on but don't

00:49:55,910 --> 00:49:59,540
believe at least the last version of

00:49:57,710 --> 00:50:01,040
mail that I downloaded didn't do that

00:49:59,540 --> 00:50:02,750
for you automatically but it's

00:50:01,040 --> 00:50:04,100
relatively simple to set up and it is

00:50:02,750 --> 00:50:08,930
something you should probably think

00:50:04,100 --> 00:50:10,250
about setting up you okay thank you very

00:50:08,930 --> 00:50:11,760
much enjoy the rest of the conference

00:50:10,250 --> 00:50:20,620
and keep on

00:50:11,760 --> 00:50:20,620

YouTube URL: https://www.youtube.com/watch?v=oka4wcsrg0c


