Title: Dave Rolsky - "A Date with Perl"
Publication date: 2017-06-24
Playlist: TPC 2017 in DC
Description: 
	Dates and times are confusing and crazy. What nut invented Daylight Saving Time? Someone who'd never imagined a computer, that's who!

Dealing with dates and times might seem simple at first, but there's a lot of gotchas.

This talk will start by covering some concepts worth knowing about (What is an Olson timezone? What's the Gregorian Calendar?).

After that we'll talk about how the DateTime suite of modules can make your life a little easier. I'll show you some best practices for working with dates and times, and highlight some gotchas in DateTime's API, and with datetimes in general.


Dave Rolsky has been a Perl developer since 1999, and has created or contributed to dozens of CPAN modules, including DateTime, Log::Dispatch, Params::Validate, and more. He is also a member of the Moose core development team, and in early 2009 completed a TPF grant to substantially rewrite and expand the Moose documentation. Way back when, he co-wrote Embedding Perl in HTML with Mason and RT Essentials, both published by O'Reilly.

He spends a lot of his free time on animal advocacy, and otherwise vegetates with video games, books, and TV shows, like any proper nerd.
Captions: 
	00:00:00,709 --> 00:00:06,839
good morning could somebody doing do me

00:00:05,100 --> 00:00:09,090
a favor standing back like shut the

00:00:06,839 --> 00:00:10,920
doors I really that's not a favor for me

00:00:09,090 --> 00:00:12,210
so much as it is a favor for those of

00:00:10,920 --> 00:00:14,130
you sitting in the back half of the room

00:00:12,210 --> 00:00:16,550
I don't know about you but it drives me

00:00:14,130 --> 00:00:20,010
crazy when I hear noise from the hallway

00:00:16,550 --> 00:00:23,699
alright so thank you for coming so early

00:00:20,010 --> 00:00:25,170
in the morning you could use day time to

00:00:23,699 --> 00:00:29,070
figure out how little sleep you got

00:00:25,170 --> 00:00:31,529
perhaps so this is a date with parole my

00:00:29,070 --> 00:00:34,290
name is Dave roll ski I work at active

00:00:31,529 --> 00:00:35,850
state based out of Vancouver and we're

00:00:34,290 --> 00:00:40,020
one of the sponsors of the conference

00:00:35,850 --> 00:00:43,290
and this talk is going to be about dates

00:00:40,020 --> 00:00:45,719
and time concepts and then I will show

00:00:43,290 --> 00:00:48,059
you some specific ways you can use day

00:00:45,719 --> 00:00:52,260
time and some specific gotchas with day

00:00:48,059 --> 00:00:55,350
time as well so first thing you need to

00:00:52,260 --> 00:00:57,480
know is this stuff is just really really

00:00:55,350 --> 00:01:00,090
crazy there's there's a lot to deal with

00:00:57,480 --> 00:01:04,140
and a lot of it doesn't make that much

00:01:00,090 --> 00:01:06,570
sense or is somewhat arbitrary so

00:01:04,140 --> 00:01:08,250
there's different calendars there's

00:01:06,570 --> 00:01:10,799
different time zones we have daylight

00:01:08,250 --> 00:01:12,990
saving time which is the stupidest thing

00:01:10,799 --> 00:01:18,210
in the world completely freaking

00:01:12,990 --> 00:01:20,220
pointless we have leap seconds so if you

00:01:18,210 --> 00:01:25,439
take just one thing away from this talk

00:01:20,220 --> 00:01:27,869
I want it to be this okay don't write

00:01:25,439 --> 00:01:29,490
your own date and time manipulation code

00:01:27,869 --> 00:01:31,049
from scratch there are libraries on

00:01:29,490 --> 00:01:33,619
Sipan there's daytime there's other

00:01:31,049 --> 00:01:37,049
things like what's it called time moment

00:01:33,619 --> 00:01:39,150
there is lots of things just use one of

00:01:37,049 --> 00:01:41,490
those do not try to do this from scratch

00:01:39,150 --> 00:01:43,320
like using local time and GM time you

00:01:41,490 --> 00:01:46,860
will probably make a mistake if you're

00:01:43,320 --> 00:01:51,689
doing anything non-trivial so please

00:01:46,860 --> 00:01:53,820
don't so first up we're going to talk

00:01:51,689 --> 00:01:57,450
about the Gregorian calendar which is

00:01:53,820 --> 00:02:00,450
the calendar that we all generally live

00:01:57,450 --> 00:02:02,430
our lives by here in the US and most of

00:02:00,450 --> 00:02:05,360
the rest of the world it's based just on

00:02:02,430 --> 00:02:08,590
the earth revolution around the Sun whoa

00:02:05,360 --> 00:02:12,160
hello welcome to

00:02:08,590 --> 00:02:12,580
oh all right daytime dave is back all

00:02:12,160 --> 00:02:14,980
right

00:02:12,580 --> 00:02:17,440
yeah my voice just changes when it gets

00:02:14,980 --> 00:02:19,470
dark and it's yeah it's weird

00:02:17,440 --> 00:02:21,310
anyway okay so the Gregorian calendar

00:02:19,470 --> 00:02:23,200
it's just based on the Earth's

00:02:21,310 --> 00:02:26,860
revolution around the Sun meaning it's

00:02:23,200 --> 00:02:29,019
just it's not based on the moon as some

00:02:26,860 --> 00:02:31,260
other calendars are this is the current

00:02:29,019 --> 00:02:33,700
world standard and date times up PM is

00:02:31,260 --> 00:02:36,790
based on the Gregorian calendar and for

00:02:33,700 --> 00:02:39,099
most use cases that's all you need so

00:02:36,790 --> 00:02:40,660
okay I know hopefully most of you know

00:02:39,099 --> 00:02:43,750
this but just going to review some of

00:02:40,660 --> 00:02:45,459
the basics 365 days in most years we

00:02:43,750 --> 00:02:49,690
have leap years which have an extra day

00:02:45,459 --> 00:02:52,540
and this calendar is kind of we say that

00:02:49,690 --> 00:02:55,150
it begins on January 1st year 1 which is

00:02:52,540 --> 00:02:59,739
written like this even though it wasn't

00:02:55,150 --> 00:03:04,209
adopted till the late 1800s Early 1900s

00:02:59,739 --> 00:03:07,959
around the world your zero is also

00:03:04,209 --> 00:03:10,269
called 1 BC or 1 BCE we might need to

00:03:07,959 --> 00:03:12,970
tweak the leap year algorithm you know

00:03:10,269 --> 00:03:15,220
in the near future I'm sure all of us

00:03:12,970 --> 00:03:16,660
will be around to see this because the

00:03:15,220 --> 00:03:20,829
Earth's revolution around the Sun is

00:03:16,660 --> 00:03:23,170
actually slowing so maybe we'll need

00:03:20,829 --> 00:03:26,739
leap days a little more often or less

00:03:23,170 --> 00:03:30,099
often we'll need them different all

00:03:26,739 --> 00:03:31,989
right so here's what using day time

00:03:30,099 --> 00:03:35,349
looks like in the kind of simplest form

00:03:31,989 --> 00:03:37,750
we call the constructor new we pass it

00:03:35,349 --> 00:03:40,299
different components your month day and

00:03:37,750 --> 00:03:42,040
then you can get information out of the

00:03:40,299 --> 00:03:44,410
object that you've made so we can print

00:03:42,040 --> 00:03:45,639
out the date and we can get the name of

00:03:44,410 --> 00:03:48,519
the month and there is a lot of

00:03:45,639 --> 00:03:51,000
different information you can get but we

00:03:48,519 --> 00:03:55,329
can also do this in French a whole whole

00:03:51,000 --> 00:03:57,970
so if we add a locale F R that's saying

00:03:55,329 --> 00:03:59,620
we want the French language and then we

00:03:57,970 --> 00:04:01,150
spit out the date now that's always the

00:03:59,620 --> 00:04:03,400
same but if we spit out the month name

00:04:01,150 --> 00:04:05,079
it gives us that in June and there's

00:04:03,400 --> 00:04:08,049
actually a lot of information that is

00:04:05,079 --> 00:04:10,840
localized things like what day is the

00:04:08,049 --> 00:04:12,430
start day of the week the names of all

00:04:10,840 --> 00:04:14,500
the different things and you can also

00:04:12,430 --> 00:04:16,780
get names for example you can get

00:04:14,500 --> 00:04:19,180
abbreviated names and if you really dig

00:04:16,780 --> 00:04:20,590
in you can get names that you might put

00:04:19,180 --> 00:04:22,060
in the table at the heading of the

00:04:20,590 --> 00:04:23,000
calendar which could be just a single

00:04:22,060 --> 00:04:24,560
letter

00:04:23,000 --> 00:04:26,750
things like that so there's a huge

00:04:24,560 --> 00:04:28,670
amount of localized date and time

00:04:26,750 --> 00:04:33,620
information available through daytime

00:04:28,670 --> 00:04:35,330
and the daytime locale distribution of

00:04:33,620 --> 00:04:37,310
course there are other calendars in the

00:04:35,330 --> 00:04:40,070
world that still matter for various

00:04:37,310 --> 00:04:41,960
things in particular there's a lot of

00:04:40,070 --> 00:04:45,140
holidays still celebrated around the

00:04:41,960 --> 00:04:48,980
world based on different calendars for

00:04:45,140 --> 00:04:51,020
example things like Easter pretty much

00:04:48,980 --> 00:04:53,540
every Jewish holiday is based on the

00:04:51,020 --> 00:04:55,460
Hebrew calendar Chinese New Year is

00:04:53,540 --> 00:04:58,760
based of course on the Chinese calendar

00:04:55,460 --> 00:05:00,080
many of these calendars also the reason

00:04:58,760 --> 00:05:02,060
that things move around in the Gregorian

00:05:00,080 --> 00:05:03,320
calendar and what you think it's moving

00:05:02,060 --> 00:05:04,940
around they're not really moving around

00:05:03,320 --> 00:05:06,470
if you look at the other calendar it's

00:05:04,940 --> 00:05:10,310
because these other calendars also

00:05:06,470 --> 00:05:12,650
factor in the lunar cycle or are solely

00:05:10,310 --> 00:05:14,810
based on the lunar cycle which does not

00:05:12,650 --> 00:05:17,150
it's not like there's exactly 12 lunar

00:05:14,810 --> 00:05:19,400
cycles per year so that can throw things

00:05:17,150 --> 00:05:22,280
off and that's why for example the

00:05:19,400 --> 00:05:25,340
Hebrew calendar has a leap month as well

00:05:22,280 --> 00:05:29,780
to kind of realign the calendar with the

00:05:25,340 --> 00:05:31,700
the seasons so way you can do this make

00:05:29,780 --> 00:05:33,740
you have a date time that we've

00:05:31,700 --> 00:05:36,919
constructed and then you can get a

00:05:33,740 --> 00:05:38,450
Chinese calendar object from the daytime

00:05:36,919 --> 00:05:40,370
object and you can also go the other way

00:05:38,450 --> 00:05:43,310
and then of course you can get Chinese

00:05:40,370 --> 00:05:45,400
information about what the zodiac animal

00:05:43,310 --> 00:05:48,169
is in case you were wondering so and on

00:05:45,400 --> 00:05:50,060
June 5th and 2013 which is probably when

00:05:48,169 --> 00:05:53,270
I first gave this talk it was the year

00:05:50,060 --> 00:05:59,330
of distinct alright let's talk about

00:05:53,270 --> 00:06:00,650
times so the day length not the one

00:05:59,330 --> 00:06:02,750
rotation of the earth around its axis

00:06:00,650 --> 00:06:06,620
you probably all know this day is 24

00:06:02,750 --> 00:06:08,810
hours in kind of day times natives speak

00:06:06,620 --> 00:06:12,380
the first hour is our zero the last

00:06:08,810 --> 00:06:16,340
hours 23 you can print these out in 12

00:06:12,380 --> 00:06:19,070
hour time or various other formats now

00:06:16,340 --> 00:06:23,150
we're at 60 minutes minutes are mostly

00:06:19,070 --> 00:06:27,470
60 seconds almost all the time and then

00:06:23,150 --> 00:06:29,930
a day is mostly 86400 seconds most of

00:06:27,470 --> 00:06:31,460
the time all right

00:06:29,930 --> 00:06:33,130
a brief digression let's talk about the

00:06:31,460 --> 00:06:35,200
time o'clock so

00:06:33,130 --> 00:06:38,620
with an atomic clock there's like some

00:06:35,200 --> 00:06:40,720
physics crap that does a thing that like

00:06:38,620 --> 00:06:43,300
has atoms or something I don't know I'm

00:06:40,720 --> 00:06:46,330
a music degree I don't understand any of

00:06:43,300 --> 00:06:49,630
this stuff it's just it's magic the idea

00:06:46,330 --> 00:06:51,310
is that with an atomic clock we can tie

00:06:49,630 --> 00:06:53,560
the length of a second to kind of a

00:06:51,310 --> 00:06:56,320
physical constant that never changes

00:06:53,560 --> 00:07:00,900
rather than defining the length of a day

00:06:56,320 --> 00:07:04,240
by 86,400 we tie it to this much more

00:07:00,900 --> 00:07:06,670
low-level physical content constant and

00:07:04,240 --> 00:07:08,350
there's a standard called ta I and

00:07:06,670 --> 00:07:10,420
that's the International atomic time

00:07:08,350 --> 00:07:12,580
standard but then there's this horrible

00:07:10,420 --> 00:07:15,280
thing called leap seconds which makes

00:07:12,580 --> 00:07:17,140
daytime internals really confusing so

00:07:15,280 --> 00:07:19,150
the problem is the Earth's rotation

00:07:17,140 --> 00:07:21,430
around its axis is actually slowing down

00:07:19,150 --> 00:07:23,200
and eventually it's going to stop and

00:07:21,430 --> 00:07:24,520
then one side of the planets just going

00:07:23,200 --> 00:07:26,740
to like burst into flames the other

00:07:24,520 --> 00:07:28,390
side's going to freeze and I'm really

00:07:26,740 --> 00:07:29,950
really worried about this because it

00:07:28,390 --> 00:07:31,270
could happen any day now I think it's

00:07:29,950 --> 00:07:33,310
going to be in a few billion years or

00:07:31,270 --> 00:07:37,570
something and it's kind of freaking me

00:07:33,310 --> 00:07:39,910
out anyway so the Earth's rotation is

00:07:37,570 --> 00:07:41,650
slowing down but we have now tied the

00:07:39,910 --> 00:07:44,140
length of a second to this physical

00:07:41,650 --> 00:07:46,090
constant that is not slowing down so

00:07:44,140 --> 00:07:48,520
every once in a while we need to resync

00:07:46,090 --> 00:07:51,070
our midnight and there is a leaf ii

00:07:48,520 --> 00:07:55,260
introduced and actually the rate of the

00:07:51,070 --> 00:07:58,600
Earth's rotation slowing down is not

00:07:55,260 --> 00:08:01,540
really predictable so in fact these are

00:07:58,600 --> 00:08:04,000
only announced up to six months in

00:08:01,540 --> 00:08:06,970
advance and so there's this organization

00:08:04,000 --> 00:08:09,580
I forget who it is that publishes a

00:08:06,970 --> 00:08:10,930
bulletin every six months or so saying

00:08:09,580 --> 00:08:14,280
whether or not there will be a leap

00:08:10,930 --> 00:08:16,600
second you just have to pay attention so

00:08:14,280 --> 00:08:18,610
okay so we have our atomic clocks we

00:08:16,600 --> 00:08:20,560
have t.i we have leaf seconds then we

00:08:18,610 --> 00:08:22,300
have this thing called UTC and this is

00:08:20,560 --> 00:08:24,220
hilarious to me so in English its

00:08:22,300 --> 00:08:29,110
coordinated Universal Time in France

00:08:24,220 --> 00:08:33,310
it's Tom's Universal coordinated that

00:08:29,110 --> 00:08:36,520
the abbreviation should be UTC I don't

00:08:33,310 --> 00:08:39,900
understand apparently making nobody

00:08:36,520 --> 00:08:44,410
happy was the ideal compromise here so

00:08:39,900 --> 00:08:46,370
okay anyway so UTC is the PAI standard

00:08:44,410 --> 00:08:49,160
the atomic time

00:08:46,370 --> 00:08:52,700
the number of leap seconds so far which

00:08:49,160 --> 00:08:54,320
is 37 and this is what is actually the

00:08:52,700 --> 00:08:58,550
current world standard most people are

00:08:54,320 --> 00:09:00,830
not using tii time for anything so if

00:08:58,550 --> 00:09:03,170
you have clocks that or say sync to an

00:09:00,830 --> 00:09:06,620
atomic clock it's using the UTC standard

00:09:03,170 --> 00:09:08,270
and the this is based on the time in

00:09:06,620 --> 00:09:10,130
Greenwich England for historical reasons

00:09:08,270 --> 00:09:13,640
I don't know the British won a wrestling

00:09:10,130 --> 00:09:15,020
match or something so and then we have

00:09:13,640 --> 00:09:17,420
time zones that are based on their

00:09:15,020 --> 00:09:20,630
offset from UTC so like an hour earlier

00:09:17,420 --> 00:09:22,160
an hour later time zones are terrible

00:09:20,630 --> 00:09:26,060
they're just they're just the worst I

00:09:22,160 --> 00:09:27,320
really hate them so they're political

00:09:26,060 --> 00:09:30,650
which means of course they're really

00:09:27,320 --> 00:09:33,050
stupid because politicians are I mean

00:09:30,650 --> 00:09:34,880
they just can't do anything right as far

00:09:33,050 --> 00:09:36,890
as I'm concerned and they change all the

00:09:34,880 --> 00:09:42,410
time for really dumb reasons there was a

00:09:36,890 --> 00:09:46,550
US times a time zone change back in I

00:09:42,410 --> 00:09:48,950
don't remember 2011 or I don't know it's

00:09:46,550 --> 00:09:50,510
something and it was nominally to save

00:09:48,950 --> 00:09:52,339
energy or something it doesn't actually

00:09:50,510 --> 00:09:55,760
have any impact it just makes

00:09:52,339 --> 00:09:57,770
programmers lives hell so maybe it's you

00:09:55,760 --> 00:09:59,900
know make work for our industry and we

00:09:57,770 --> 00:10:02,660
shouldn't complain but it's just really

00:09:59,900 --> 00:10:03,770
irritating and in fact if you think the

00:10:02,660 --> 00:10:06,200
u.s. change is bad

00:10:03,770 --> 00:10:10,220
some countries announce changes like a

00:10:06,200 --> 00:10:12,589
day in advance sometimes the changes get

00:10:10,220 --> 00:10:14,779
kind of made official before they're

00:10:12,589 --> 00:10:18,110
announced and then people are scrambling

00:10:14,779 --> 00:10:20,600
to keep up with this so the standard

00:10:18,110 --> 00:10:24,080
repository of all information about time

00:10:20,600 --> 00:10:25,970
zones is the iana time zone database it

00:10:24,080 --> 00:10:27,980
used to be called the olsen times of

00:10:25,970 --> 00:10:29,380
databases any of you have heard that

00:10:27,980 --> 00:10:31,790
term

00:10:29,380 --> 00:10:34,310
Arthur David Olson created it a long

00:10:31,790 --> 00:10:36,830
time ago and then when he retired from

00:10:34,310 --> 00:10:39,320
his job he gave it over to ini to let

00:10:36,830 --> 00:10:41,720
them be the maintainer still sometimes

00:10:39,320 --> 00:10:43,400
called Olson this is the homepage for it

00:10:41,720 --> 00:10:45,740
and it's basically an open source data

00:10:43,400 --> 00:10:48,500
and software project of course Microsoft

00:10:45,740 --> 00:10:49,790
has some random crap of their own rather

00:10:48,500 --> 00:10:51,740
than following the standard that

00:10:49,790 --> 00:10:55,370
literally every other operating system

00:10:51,740 --> 00:10:57,290
uses so here's what the time zone

00:10:55,370 --> 00:11:00,140
actually is I mentioned it's an offset

00:10:57,290 --> 00:11:01,820
from UTC and that's a minute an hour

00:11:00,140 --> 00:11:04,610
some people think it's just ours in fact

00:11:01,820 --> 00:11:06,800
there are timezones that are you know X

00:11:04,610 --> 00:11:08,990
hours plus 30 minutes there's also some

00:11:06,800 --> 00:11:11,300
time zones with 15-minute offsets I

00:11:08,990 --> 00:11:14,390
don't know that there's anything more

00:11:11,300 --> 00:11:16,400
terrible than that so we're here we are

00:11:14,390 --> 00:11:19,310
Washington DC I believe we're currently

00:11:16,400 --> 00:11:22,730
four hours ahead of UTC so if you take

00:11:19,310 --> 00:11:25,430
the UTC time subtract four hours that is

00:11:22,730 --> 00:11:29,240
the local time sometimes it's also have

00:11:25,430 --> 00:11:32,750
a name so it's not just the offset from

00:11:29,240 --> 00:11:35,650
UTC and most of the names in the IANA

00:11:32,750 --> 00:11:38,330
database are a continent or an ocean

00:11:35,650 --> 00:11:42,020
plus a major city so we have America

00:11:38,330 --> 00:11:43,820
slash Chicago Asia slash Taipei Pacific

00:11:42,020 --> 00:11:45,770
slash Fiji that's example using the

00:11:43,820 --> 00:11:48,620
ocean and sometimes they'll put in a

00:11:45,770 --> 00:11:50,870
third component if it's not if it's

00:11:48,620 --> 00:11:52,790
going to be ambiguous so America

00:11:50,870 --> 00:11:55,670
Argentina San Juan because I think there

00:11:52,790 --> 00:11:57,950
are multiple San Juans throughout the

00:11:55,670 --> 00:12:02,240
world and throughout America so they

00:11:57,950 --> 00:12:04,850
have to add more stuff so that's how you

00:12:02,240 --> 00:12:08,600
identify a time zone for real is that

00:12:04,850 --> 00:12:11,030
long name and then what the zone really

00:12:08,600 --> 00:12:15,020
is is a collection of rules and the

00:12:11,030 --> 00:12:17,390
rules define all of the DST changes that

00:12:15,020 --> 00:12:18,590
that zone has ever had historically and

00:12:17,390 --> 00:12:21,590
will have in the future

00:12:18,590 --> 00:12:24,380
because knowing the offset doesn't

00:12:21,590 --> 00:12:26,480
actually tell you that much if you're if

00:12:24,380 --> 00:12:29,000
all you care about is the current local

00:12:26,480 --> 00:12:32,030
time then yes the offset is sufficient

00:12:29,000 --> 00:12:33,980
but if you want to know for example what

00:12:32,030 --> 00:12:35,510
something will be in six months then you

00:12:33,980 --> 00:12:38,840
have to know what the rules are that

00:12:35,510 --> 00:12:40,880
define that zone so for example stupid

00:12:38,840 --> 00:12:44,030
countries like the u.s. where we have

00:12:40,880 --> 00:12:48,050
DST in most states six months from now

00:12:44,030 --> 00:12:50,300
we will have a different offset and some

00:12:48,050 --> 00:12:52,520
same countries of course in other parts

00:12:50,300 --> 00:12:53,870
of the world don't have DST and they

00:12:52,520 --> 00:12:56,180
don't have this problem so the rules are

00:12:53,870 --> 00:12:58,430
much simpler there's the diameter

00:12:56,180 --> 00:12:59,210
database also has all these historical

00:12:58,430 --> 00:13:01,850
rules

00:12:59,210 --> 00:13:04,250
so you can see kind of the history of

00:13:01,850 --> 00:13:06,500
times of madness for about 100 plus

00:13:04,250 --> 00:13:08,780
years it goes back to kind of the late

00:13:06,500 --> 00:13:11,020
18-hundreds when time zones were first

00:13:08,780 --> 00:13:14,030
being adopted and before that it uses

00:13:11,020 --> 00:13:15,770
an offset that's a effectively nonsense

00:13:14,030 --> 00:13:18,260
because it's just the local time of the

00:13:15,770 --> 00:13:20,350
city that's being named but you know

00:13:18,260 --> 00:13:23,510
Chicago had their own local time and

00:13:20,350 --> 00:13:25,790
whatever another City is nearby Skokie

00:13:23,510 --> 00:13:27,760
had their own local time and everybody

00:13:25,790 --> 00:13:30,140
was just basing it on where the Sun was

00:13:27,760 --> 00:13:32,330
the terms of the database also has the

00:13:30,140 --> 00:13:34,400
short names that are divine and they can

00:13:32,330 --> 00:13:37,520
vary based on whether daylight saving

00:13:34,400 --> 00:13:39,800
time is in effect or not so CDT CST EDT

00:13:37,520 --> 00:13:41,210
ESD it's really important to know that

00:13:39,800 --> 00:13:44,750
these names are not unique and you

00:13:41,210 --> 00:13:46,490
cannot use them for identifying a time

00:13:44,750 --> 00:13:50,960
zone but you can use them for displaying

00:13:46,490 --> 00:13:54,980
to end-users so for example for a while

00:13:50,960 --> 00:13:57,950
the Australian there was an Australian

00:13:54,980 --> 00:14:00,140
time zone that was also using esp in EDT

00:13:57,950 --> 00:14:04,130
but it was plus 11 hours or something

00:14:00,140 --> 00:14:06,860
worse where minus 4 so if you were

00:14:04,130 --> 00:14:09,200
trying to use that as a way to figure

00:14:06,860 --> 00:14:10,580
out the time zone from input or

00:14:09,200 --> 00:14:12,140
something like that you would need

00:14:10,580 --> 00:14:14,690
additional information to make the guess

00:14:12,140 --> 00:14:16,370
so what I recommend in your code is it's

00:14:14,690 --> 00:14:18,080
fine to use the short names for display

00:14:16,370 --> 00:14:20,570
especially when you're displaying it to

00:14:18,080 --> 00:14:22,310
people you know in that time zone

00:14:20,570 --> 00:14:24,230
because you're generally familiar with

00:14:22,310 --> 00:14:26,840
your own time zone the short names but

00:14:24,230 --> 00:14:28,160
they're not that useful for all time

00:14:26,840 --> 00:14:29,870
zones like I don't know the short games

00:14:28,160 --> 00:14:32,990
for all the European time zones for

00:14:29,870 --> 00:14:39,800
example so if you have to pick a time

00:14:32,990 --> 00:14:41,690
zone this can be challenging so this

00:14:39,800 --> 00:14:44,150
database includes a lot of historical

00:14:41,690 --> 00:14:47,870
time zones that are no longer relevant

00:14:44,150 --> 00:14:51,110
for example at one point Chicago and

00:14:47,870 --> 00:14:53,690
Menomonie Wisconsin had different rules

00:14:51,110 --> 00:14:56,450
defining their their DFC transitions I

00:14:53,690 --> 00:14:58,760
don't know why but nowadays and for

00:14:56,450 --> 00:15:00,740
quite some time all of kind of the

00:14:58,760 --> 00:15:02,900
central US has followed along with the

00:15:00,740 --> 00:15:06,020
rules that are part of America Chicago

00:15:02,900 --> 00:15:08,300
so if you look at the list of all zones

00:15:06,020 --> 00:15:10,730
you get a lot of zones that aren't

00:15:08,300 --> 00:15:12,470
actually useful for people because they

00:15:10,730 --> 00:15:14,360
would you know if you were giving them

00:15:12,470 --> 00:15:15,740
Menominee in Chicago and they picked one

00:15:14,360 --> 00:15:19,690
or the other they get the same impact

00:15:15,740 --> 00:15:22,400
for current times and the future so

00:15:19,690 --> 00:15:23,820
there's there's no API for finding the

00:15:22,400 --> 00:15:26,010
current time zone yet

00:15:23,820 --> 00:15:27,930
that might be mistaken maybe somebody

00:15:26,010 --> 00:15:30,510
really something after I'll do some

00:15:27,930 --> 00:15:32,250
research anyway just something to think

00:15:30,510 --> 00:15:34,050
about if you're creating some sort of

00:15:32,250 --> 00:15:37,110
web UI or something for people to select

00:15:34,050 --> 00:15:41,210
their time zone you either want to like

00:15:37,110 --> 00:15:43,440
find a way to select zones which are

00:15:41,210 --> 00:15:44,910
current through some automated system

00:15:43,440 --> 00:15:47,070
I'm not sure how you do that or you

00:15:44,910 --> 00:15:48,600
might just need to curate the list you

00:15:47,070 --> 00:15:51,960
know if you know all of the people using

00:15:48,600 --> 00:15:53,850
it or only you know US citizens then you

00:15:51,960 --> 00:15:58,710
can pick up from a list of like seven

00:15:53,850 --> 00:16:00,780
zones that apply to American States all

00:15:58,710 --> 00:16:02,880
right so one of the cool things you can

00:16:00,780 --> 00:16:04,500
do with times the time zones in daytime

00:16:02,880 --> 00:16:07,380
at least I think it's kind of cool is

00:16:04,500 --> 00:16:08,820
you can construct a date time and a

00:16:07,380 --> 00:16:11,730
given time zone so here we're

00:16:08,820 --> 00:16:14,700
constructing one in the America Chicago

00:16:11,730 --> 00:16:17,220
zone and then you can set the time zone

00:16:14,700 --> 00:16:19,680
and figure out what time it is somewhere

00:16:17,220 --> 00:16:22,290
else which is sometimes a question you

00:16:19,680 --> 00:16:23,790
may need to answer so for example you

00:16:22,290 --> 00:16:28,950
know we start with Chicago we said to

00:16:23,790 --> 00:16:30,930
type a and then we get a new result so

00:16:28,950 --> 00:16:32,760
there's this thing that the day time

00:16:30,930 --> 00:16:36,240
implements called the floating time zone

00:16:32,760 --> 00:16:37,920
and basically it's the absence of a time

00:16:36,240 --> 00:16:41,280
zone it's very philosophical you know

00:16:37,920 --> 00:16:45,810
it's kind of you know the new answer is

00:16:41,280 --> 00:16:49,350
it mu or mu I don't know anyway so with

00:16:45,810 --> 00:16:51,120
the floating time zone you effectively

00:16:49,350 --> 00:16:53,550
are saying I don't have a time zone I

00:16:51,120 --> 00:16:56,910
don't know or I don't care and I don't

00:16:53,550 --> 00:16:59,460
care is a very valid answer and if you

00:16:56,910 --> 00:17:02,100
say a date time that's in the floating

00:16:59,460 --> 00:17:06,240
time zone to an actual time zone it will

00:17:02,100 --> 00:17:06,630
not change the local time same going the

00:17:06,240 --> 00:17:08,939
other way

00:17:06,630 --> 00:17:11,490
and it does not implement leap seconds

00:17:08,939 --> 00:17:14,579
because leap seconds are tied to UTC so

00:17:11,490 --> 00:17:16,380
you have to know your offset from UTC

00:17:14,579 --> 00:17:18,240
they know when a leap second is actually

00:17:16,380 --> 00:17:21,660
happening but that's not actually can be

00:17:18,240 --> 00:17:23,250
a really good thing so here's example we

00:17:21,660 --> 00:17:25,199
make something an object in the floating

00:17:23,250 --> 00:17:28,079
time zone and then we set the time zone

00:17:25,199 --> 00:17:29,760
to Asia type a keep picking type a

00:17:28,079 --> 00:17:33,510
because my wife Taiwanese and I love

00:17:29,760 --> 00:17:35,220
Taiwan and the local time hasn't changed

00:17:33,510 --> 00:17:36,250
so you see we print the the day times

00:17:35,220 --> 00:17:38,170
out and they look

00:17:36,250 --> 00:17:39,970
exactly the same now if we revenge to

00:17:38,170 --> 00:17:42,760
send it to America Chicago or something

00:17:39,970 --> 00:17:46,360
like that we would change the local time

00:17:42,760 --> 00:17:49,840
and the date all right you have another

00:17:46,360 --> 00:17:51,820
concept epochs so you're probably all or

00:17:49,840 --> 00:17:54,060
many of you have heard of the epic the

00:17:51,820 --> 00:17:56,710
epic fact there are multiple epics and

00:17:54,060 --> 00:17:59,560
epics just like a reference point for

00:17:56,710 --> 00:18:01,630
the start of a date and time you know

00:17:59,560 --> 00:18:04,870
for when a calendar starts it's point

00:18:01,630 --> 00:18:08,560
zero on that calendar so with regarding

00:18:04,870 --> 00:18:12,040
calendar that was year one month one day

00:18:08,560 --> 00:18:15,760
one at midnight there's the UNIX epoch

00:18:12,040 --> 00:18:18,310
which is starts on January 1st 1970 at

00:18:15,760 --> 00:18:21,570
midnight UTC that's important it

00:18:18,310 --> 00:18:23,950
actually includes the timezone and in

00:18:21,570 --> 00:18:28,360
UNIX the epoch is just counted in

00:18:23,950 --> 00:18:32,290
seconds so you know UNIX epoch 10 was 10

00:18:28,360 --> 00:18:34,840
seconds after that start time it's not

00:18:32,290 --> 00:18:37,930
really UTC even though claims that its

00:18:34,840 --> 00:18:40,170
UTC because POSIX actually specifies

00:18:37,930 --> 00:18:42,730
explicitly that we skip leap seconds and

00:18:40,170 --> 00:18:45,250
this because is a funny thing if you

00:18:42,730 --> 00:18:47,290
this is this is just great amusement if

00:18:45,250 --> 00:18:49,090
you wait till the next leap second and

00:18:47,290 --> 00:18:50,620
just print out the time every second on

00:18:49,090 --> 00:18:52,780
your console if your sink - in Tom

00:18:50,620 --> 00:18:55,330
o'clock you'll see two seconds in a row

00:18:52,780 --> 00:18:57,850
that are the same great excitement you

00:18:55,330 --> 00:18:59,890
should all kind of set that up it's like

00:18:57,850 --> 00:19:05,050
watching an eclipse but on your computer

00:18:59,890 --> 00:19:07,180
with numbers super cool so yeah it's not

00:19:05,050 --> 00:19:09,940
quite UTC but it's not really Thai

00:19:07,180 --> 00:19:13,380
because it does kind if accounts of the

00:19:09,940 --> 00:19:16,180
leap seconds so yeah it's a little weird

00:19:13,380 --> 00:19:17,320
it doesn't matter for most cases so if

00:19:16,180 --> 00:19:18,610
you want to know the epoch from a

00:19:17,320 --> 00:19:20,340
daytime it's really simple there's a

00:19:18,610 --> 00:19:23,080
method called epoch and it will spit out

00:19:20,340 --> 00:19:25,420
an appropriately large number we're in

00:19:23,080 --> 00:19:27,280
the billions of these seconds or sorry

00:19:25,420 --> 00:19:29,950
the billions of seconds since the epoch

00:19:27,280 --> 00:19:31,000
currently so there's there's a problem

00:19:29,950 --> 00:19:33,550
you might have heard of which is

00:19:31,000 --> 00:19:37,990
fortunately becoming less of a problem

00:19:33,550 --> 00:19:41,860
the WYD 2.0 3k problems lot less catchy

00:19:37,990 --> 00:19:45,040
than 1 2 K so the problem is that the

00:19:41,860 --> 00:19:46,390
epoch will no longer faintness or D to

00:19:45,040 --> 00:19:49,370
be an integer at a certain point and

00:19:46,390 --> 00:19:52,040
that's exactly this date that's up here

00:19:49,370 --> 00:19:53,870
and it actually can sneak up on you a

00:19:52,040 --> 00:19:55,309
lot sooner than you think for example if

00:19:53,870 --> 00:19:58,340
you're calculating a 30-year mortgage

00:19:55,309 --> 00:20:01,190
starting any time in the past nine years

00:19:58,340 --> 00:20:04,100
you could have had this bite you as a

00:20:01,190 --> 00:20:06,710
Perl 512 which hopefully please tell me

00:20:04,100 --> 00:20:09,670
you're all using at least 512 no don't

00:20:06,710 --> 00:20:12,080
tell me I don't want to know okay pearl

00:20:09,670 --> 00:20:15,020
internally uses a large-enough epoch

00:20:12,080 --> 00:20:17,720
it's not actually 64 bits in all cases I

00:20:15,020 --> 00:20:19,580
think it's whatever the size of the IV

00:20:17,720 --> 00:20:22,070
is but it's big enough that you won't

00:20:19,580 --> 00:20:24,410
have this problem and you will go way

00:20:22,070 --> 00:20:28,429
into the future before you overflow and

00:20:24,410 --> 00:20:31,550
nowadays it's rare rare to find 32-bit

00:20:28,429 --> 00:20:34,429
systems I certainly haven't used one in

00:20:31,550 --> 00:20:36,320
a while so it's unlikely that this would

00:20:34,429 --> 00:20:38,380
hit you but just something to keep in

00:20:36,320 --> 00:20:38,380
mind

00:20:38,920 --> 00:20:45,860
so daytime ecosystem there's a lot of

00:20:43,370 --> 00:20:47,720
stuff in this ecosystem besides daytime

00:20:45,860 --> 00:20:49,100
dot p.m. at daytime time zone and

00:20:47,720 --> 00:20:52,429
daytime locale those are kind of the

00:20:49,100 --> 00:20:54,830
core three modules we saw an example

00:20:52,429 --> 00:20:57,110
earlier with daytime calendar Chinese

00:20:54,830 --> 00:20:58,309
so there's modules that do formatting

00:20:57,110 --> 00:21:01,190
and parsing and they're all under

00:20:58,309 --> 00:21:03,800
date-time format where read format as a

00:21:01,190 --> 00:21:05,450
noun not a verb there there's other

00:21:03,800 --> 00:21:07,760
calendars which are all under date/time

00:21:05,450 --> 00:21:09,559
calendar there's modules for events and

00:21:07,760 --> 00:21:11,900
recurrences which are typically under G

00:21:09,559 --> 00:21:13,970
time event there's a couple others and

00:21:11,900 --> 00:21:15,590
then there's like daytime access off

00:21:13,970 --> 00:21:17,030
which is just what I asked people to use

00:21:15,590 --> 00:21:22,130
if they have something that doesn't fit

00:21:17,030 --> 00:21:24,410
into this more rigid system so there's a

00:21:22,130 --> 00:21:25,370
ton of stuff on TPN take a look and now

00:21:24,410 --> 00:21:29,600
i'm going to talk about some specific

00:21:25,370 --> 00:21:33,679
issues with the date/time module that

00:21:29,600 --> 00:21:35,450
might bite you so problem number one and

00:21:33,679 --> 00:21:37,730
by the way I apologize for all this

00:21:35,450 --> 00:21:40,790
I wrote this software back when I was

00:21:37,730 --> 00:21:45,710
young and full of vigor starry-eyed

00:21:40,790 --> 00:21:47,660
and very stupid and if I had it to do

00:21:45,710 --> 00:21:50,030
all over again I would do it very

00:21:47,660 --> 00:21:50,600
differently but I don't have it to do

00:21:50,030 --> 00:21:52,610
all over again

00:21:50,600 --> 00:21:55,490
I mean I could write a date time 2 or

00:21:52,610 --> 00:21:57,410
whatever but realistically it's probably

00:21:55,490 --> 00:22:00,230
not worth the effort tons of people are

00:21:57,410 --> 00:22:02,960
using the existing one am I going to get

00:22:00,230 --> 00:22:06,320
them all to switch I don't know

00:22:02,960 --> 00:22:08,780
so probably you're going to have to deal

00:22:06,320 --> 00:22:13,010
with it some of this stuff so there's no

00:22:08,780 --> 00:22:15,380
DEET only class the way you can work

00:22:13,010 --> 00:22:17,420
around this is if you use the floating

00:22:15,380 --> 00:22:19,460
time zone then you don't have to deal

00:22:17,420 --> 00:22:23,090
with leap seconds you don't have to deal

00:22:19,460 --> 00:22:25,640
with offsets from UTC and you can do

00:22:23,090 --> 00:22:27,560
math that is deep only and have

00:22:25,640 --> 00:22:30,740
confidence that the results will be same

00:22:27,560 --> 00:22:32,450
and there's two math methods that I

00:22:30,740 --> 00:22:35,510
recommend there's Delta M D and Delta

00:22:32,450 --> 00:22:38,150
J's which will give you the duration

00:22:35,510 --> 00:22:42,590
either in month two days or just Indies

00:22:38,150 --> 00:22:44,300
between two dates so you can use it like

00:22:42,590 --> 00:22:47,060
this you make to date times when you

00:22:44,300 --> 00:22:48,740
call it Delta days you get a date time

00:22:47,060 --> 00:22:52,100
duration back that's part of the day

00:22:48,740 --> 00:22:54,080
time distribution and then you ask for

00:22:52,100 --> 00:22:57,650
the days and I'll explain this in units

00:22:54,080 --> 00:23:03,740
thing in a second now if you used just

00:22:57,650 --> 00:23:05,960
the built-in overloading you get a the

00:23:03,740 --> 00:23:09,560
reason I recommend Delta M D and Delta

00:23:05,960 --> 00:23:12,350
days is that by default the duration you

00:23:09,560 --> 00:23:18,140
get back will include all possible units

00:23:12,350 --> 00:23:22,040
so seconds minutes seconds minutes days

00:23:18,140 --> 00:23:24,230
and months there's a V units that matter

00:23:22,040 --> 00:23:27,170
because minutes can be converted to

00:23:24,230 --> 00:23:30,680
hours and days can be converted to weeks

00:23:27,170 --> 00:23:32,210
and months can be converted to years but

00:23:30,680 --> 00:23:33,530
you don't actually care about that so

00:23:32,210 --> 00:23:35,060
you just want to know the difference in

00:23:33,530 --> 00:23:40,160
months and days or just the difference

00:23:35,060 --> 00:23:42,230
in days so daytime duration it does have

00:23:40,160 --> 00:23:45,890
a terrible API the person created it

00:23:42,230 --> 00:23:47,510
just complete I mean if you see

00:23:45,890 --> 00:23:49,790
that kind of a conference just backing

00:23:47,510 --> 00:23:51,620
in the face that's what I say but

00:23:49,790 --> 00:23:53,540
fortunately the Chi doesn't exist he's

00:23:51,620 --> 00:23:54,710
like you know 15 years ago me so you're

00:23:53,540 --> 00:23:57,170
going to have to go back in time to

00:23:54,710 --> 00:24:00,530
smack them in the face so ah joke's on

00:23:57,170 --> 00:24:03,350
you so like I said internally it stores

00:24:00,530 --> 00:24:05,840
the duration oh I month days minutes

00:24:03,350 --> 00:24:08,810
seconds in nanoseconds day time does

00:24:05,840 --> 00:24:10,730
support NATO seconds and externally it

00:24:08,810 --> 00:24:15,980
has methods like years months weeks days

00:24:10,730 --> 00:24:16,550
and so on but if you call the duration

00:24:15,980 --> 00:24:18,770
days you

00:24:16,550 --> 00:24:20,990
just get the number of days not the

00:24:18,770 --> 00:24:23,840
number of week so if it's one week in

00:24:20,990 --> 00:24:27,140
six days you'll get a six back which is

00:24:23,840 --> 00:24:29,090
very confusing but if you call in units

00:24:27,140 --> 00:24:33,910
which is the AP I should have written in

00:24:29,090 --> 00:24:37,490
the first place you'll get 13 so

00:24:33,910 --> 00:24:39,980
basically the takeaway is just using

00:24:37,490 --> 00:24:41,840
units and you will probably get what you

00:24:39,980 --> 00:24:43,430
want and the reason I haven't just

00:24:41,840 --> 00:24:45,290
changed this is I kind of realized that

00:24:43,430 --> 00:24:47,210
years after it had been released because

00:24:45,290 --> 00:24:49,520
people are like don't understand this

00:24:47,210 --> 00:24:52,610
API I'm you know they would do something

00:24:49,520 --> 00:24:54,110
exactly like this they'd subtract or you

00:24:52,610 --> 00:24:55,820
know they do Delta Day is one from the

00:24:54,110 --> 00:24:57,770
other and they ask for the number of

00:24:55,820 --> 00:24:59,360
days and give them six even though it

00:24:57,770 --> 00:25:03,530
should obviously be a much larger number

00:24:59,360 --> 00:25:04,970
and they'd write me a bug report and be

00:25:03,530 --> 00:25:07,730
like no you just have to read the docs

00:25:04,970 --> 00:25:09,890
if they're like yeah the docs are crazy

00:25:07,730 --> 00:25:12,050
or insane why does it work this way so I

00:25:09,890 --> 00:25:15,550
added this in unit thing so you could

00:25:12,050 --> 00:25:15,550
usually get something that's more useful

00:25:16,480 --> 00:25:23,000
again it's not something I can really

00:25:19,490 --> 00:25:25,220
easily go back and change so math is

00:25:23,000 --> 00:25:27,920
really hard with dates and times once

00:25:25,220 --> 00:25:31,100
you get time zones involved once you get

00:25:27,920 --> 00:25:32,420
actual times involved it gets really

00:25:31,100 --> 00:25:35,080
tricky so I'm going to show you some

00:25:32,420 --> 00:25:38,300
gotchas just so you can think about them

00:25:35,080 --> 00:25:40,670
when you're writing your code the the

00:25:38,300 --> 00:25:42,560
problem is there's no fix these are just

00:25:40,670 --> 00:25:45,440
inherent in the nature of the subject

00:25:42,560 --> 00:25:47,830
and you just have to decide what the

00:25:45,440 --> 00:25:50,300
right answer is for your use cases so

00:25:47,830 --> 00:25:53,960
question 1 how long is a month when

00:25:50,300 --> 00:25:55,940
you're doing math so you might think

00:25:53,960 --> 00:25:58,430
well it's the length of the month I'm in

00:25:55,940 --> 00:26:01,610
ok so we could do that we get we could

00:25:58,430 --> 00:26:04,850
make a day time that represents February

00:26:01,610 --> 00:26:07,400
1st of 2009 non-leap year February 28

00:26:04,850 --> 00:26:10,280
days we had 28 days and we get the next

00:26:07,400 --> 00:26:11,510
month March 1st then we have 28 days and

00:26:10,280 --> 00:26:13,370
of course we don't get the next month

00:26:11,510 --> 00:26:17,810
now because now we're in March which has

00:26:13,370 --> 00:26:19,400
more days so we get March 29 ok ok but

00:26:17,810 --> 00:26:21,320
but there's there's an easy workaround

00:26:19,400 --> 00:26:22,850
right ok so I'm going to add months

00:26:21,320 --> 00:26:25,280
instead of days which is what I should

00:26:22,850 --> 00:26:26,420
have done in the first place ok but now

00:26:25,280 --> 00:26:29,930
let's make a little trickier

00:26:26,420 --> 00:26:30,180
it's January 30th 2009 again not a leap

00:26:29,930 --> 00:26:32,850
you

00:26:30,180 --> 00:26:34,980
February has 28 days so I had a month

00:26:32,850 --> 00:26:37,260
and wait what I ended a month in its

00:26:34,980 --> 00:26:39,090
March 2nd how does that make any sense

00:26:37,260 --> 00:26:41,280
but then I had another mount and it's

00:26:39,090 --> 00:26:44,610
April 2nd which does make sense so

00:26:41,280 --> 00:26:46,500
what's going on the problem is there's

00:26:44,610 --> 00:26:48,770
different ways to add months there's

00:26:46,500 --> 00:26:51,150
different modes and again this is not

00:26:48,770 --> 00:26:53,400
finally this isn't a mistake I made this

00:26:51,150 --> 00:26:56,190
is just like a problem that exists with

00:26:53,400 --> 00:26:57,870
doing daytime math because every month

00:26:56,190 --> 00:27:00,360
has different lengths when you add a

00:26:57,870 --> 00:27:02,610
month it's not actually clear what

00:27:00,360 --> 00:27:04,920
should be done so you have to tell it if

00:27:02,610 --> 00:27:06,540
you wanted to use a specific way of

00:27:04,920 --> 00:27:09,180
doing that so there's the end of month

00:27:06,540 --> 00:27:11,340
modes so the default when you add is to

00:27:09,180 --> 00:27:13,980
just wrap so effectively what it's doing

00:27:11,340 --> 00:27:15,570
its figuring how many months sorry how

00:27:13,980 --> 00:27:19,350
many days are in the current month and

00:27:15,570 --> 00:27:22,590
then adding that many days there's also

00:27:19,350 --> 00:27:25,020
other methods where you can kind of not

00:27:22,590 --> 00:27:27,780
do that effectively so if you use limit

00:27:25,020 --> 00:27:30,780
as our end of month mode we add one

00:27:27,780 --> 00:27:32,700
month on January 30th and what it

00:27:30,780 --> 00:27:34,110
basically limit says is don't go past

00:27:32,700 --> 00:27:37,020
the end of the next month so it tries to

00:27:34,110 --> 00:27:38,750
add 30 days goes oh wait I went two

00:27:37,020 --> 00:27:41,400
months ahead and it kind of backs it up

00:27:38,750 --> 00:27:44,760
until it hits February 28th and then if

00:27:41,400 --> 00:27:48,150
you add a month again you will get March

00:27:44,760 --> 00:27:50,370
28th the difference between limit and

00:27:48,150 --> 00:27:52,830
preserve is with preserve if it's the

00:27:50,370 --> 00:27:54,420
last day of the month like say February

00:27:52,830 --> 00:27:56,490
28th and then you add a month you'll get

00:27:54,420 --> 00:27:57,870
I don't know how okay this is that I

00:27:56,490 --> 00:28:01,290
don't know how many days our March is at

00:27:57,870 --> 00:28:06,570
30 or 31 31 okay we can all sing the

00:28:01,290 --> 00:28:08,940
song if you use preserve and you add one

00:28:06,570 --> 00:28:12,540
month to February 28th you get March

00:28:08,940 --> 00:28:15,990
31st so again this is just a problem

00:28:12,540 --> 00:28:20,640
with the domain you have to decide what

00:28:15,990 --> 00:28:22,500
you want to do so how long is a day this

00:28:20,640 --> 00:28:26,460
is another fun question how many people

00:28:22,500 --> 00:28:28,020
think it's 24 hours you're wrong you

00:28:26,460 --> 00:28:30,320
should you should know everything winter

00:28:28,020 --> 00:28:34,380
question don't worry in their hand okay

00:28:30,320 --> 00:28:36,510
mostly it's 24 hours but because of

00:28:34,380 --> 00:28:40,040
daylight saving time sometimes in some

00:28:36,510 --> 00:28:42,890
time zones it's not so for example it is

00:28:40,040 --> 00:28:46,920
November 4th

00:28:42,890 --> 00:28:49,140
in 2012 it's darkened wait sorry there's

00:28:46,920 --> 00:28:52,620
no story to go along with this November

00:28:49,140 --> 00:28:56,220
4th 2012 in the America Chicago timezone

00:28:52,620 --> 00:28:59,310
at midnight we had one hour and we get 1

00:28:56,220 --> 00:29:01,410
a.m. we add one hour and somehow we get

00:28:59,310 --> 00:29:03,660
3 a.m. ok

00:29:01,410 --> 00:29:05,550
that's because there is no 2 a.m.

00:29:03,660 --> 00:29:07,530
because the clock is jumping ahead one

00:29:05,550 --> 00:29:10,380
hour so that particular day only

00:29:07,530 --> 00:29:11,870
happened stabbed 23 hours and then we

00:29:10,380 --> 00:29:15,420
have the opposite problem

00:29:11,870 --> 00:29:18,630
so it's March 11th again America Chicago

00:29:15,420 --> 00:29:23,160
a dark and stormy night I was walking

00:29:18,630 --> 00:29:25,470
down the alley and added an hour I don't

00:29:23,160 --> 00:29:27,180
know I came to a noir about daytime math

00:29:25,470 --> 00:29:29,280
or anything it's just not going to be

00:29:27,180 --> 00:29:32,220
that exciting she was wearing a

00:29:29,280 --> 00:29:34,650
wristwatch ok so it's midnight we have

00:29:32,220 --> 00:29:38,400
an hour we get 1 o'clock then we add an

00:29:34,650 --> 00:29:40,620
hour and we get 1 o'clock again it's not

00:29:38,400 --> 00:29:42,660
quite the same 1 o'clock but it's still

00:29:40,620 --> 00:29:46,020
1 o'clock so this day has 25 hours

00:29:42,660 --> 00:29:48,510
because the clock is jumping back again

00:29:46,020 --> 00:29:50,310
more confusion oh I think that there's a

00:29:48,510 --> 00:29:54,300
mistake in this code it should this

00:29:50,310 --> 00:29:58,830
should be oh did I just do it backwards

00:29:54,300 --> 00:29:59,250
PMS okay right sorry anyway you get the

00:29:58,830 --> 00:30:00,480
point

00:29:59,250 --> 00:30:02,760
sometimes there are 23 hour days

00:30:00,480 --> 00:30:05,310
sometimes there are 25 hour days you

00:30:02,760 --> 00:30:07,980
cannot count on days being 24 hours

00:30:05,310 --> 00:30:09,600
enlist use the floating time stone so

00:30:07,980 --> 00:30:10,860
again I'm going to keep mentioning the

00:30:09,600 --> 00:30:15,990
floating time zone is a good way to

00:30:10,860 --> 00:30:17,460
avoid some of this pain so there's the

00:30:15,990 --> 00:30:19,500
thing with the clock jumping ahead that

00:30:17,460 --> 00:30:21,240
we just talked about what does that mean

00:30:19,500 --> 00:30:23,730
well it means you don't get a 2 a.m.

00:30:21,240 --> 00:30:26,790
sometimes and that can cause problems so

00:30:23,730 --> 00:30:30,060
if we try to construct a date time for

00:30:26,790 --> 00:30:31,320
that non-existent time we're going to

00:30:30,060 --> 00:30:34,380
have problems so we're going to do it

00:30:31,320 --> 00:30:36,240
the day before at 2 a.m. and then what

00:30:34,380 --> 00:30:40,050
happens if we add a day or you get an

00:30:36,240 --> 00:30:42,240
exception because we try to make we try

00:30:40,050 --> 00:30:44,670
to add a day and then it looks ok the

00:30:42,240 --> 00:30:47,280
local time is 2 a.m. there is no 2 a.m.

00:30:44,670 --> 00:30:48,570
and all hell breaks loose now I could

00:30:47,280 --> 00:30:51,930
have gone a different way and had it

00:30:48,570 --> 00:30:53,280
changed the local time and this okay you

00:30:51,930 --> 00:30:53,880
can someone playmate this was my

00:30:53,280 --> 00:30:54,419
decision

00:30:53,880 --> 00:30:56,340
that's

00:30:54,419 --> 00:30:59,970
and I do I will stand by this decision

00:30:56,340 --> 00:31:03,389
because I think it would be even more

00:30:59,970 --> 00:31:05,519
confusing if I had the local time

00:31:03,389 --> 00:31:08,549
changing when you added a day or a month

00:31:05,519 --> 00:31:11,549
and not a time component however if you

00:31:08,549 --> 00:31:14,609
add 24 hours it will work and it'll

00:31:11,549 --> 00:31:17,159
you'll move the local time to three and

00:31:14,609 --> 00:31:18,869
again kind of confusing but I think also

00:31:17,159 --> 00:31:20,249
the correct way to think about it so if

00:31:18,869 --> 00:31:23,190
you think about it imagine there's kind

00:31:20,249 --> 00:31:24,720
of a an old kind of analog clock that

00:31:23,190 --> 00:31:28,080
has one of those flip things where it

00:31:24,720 --> 00:31:31,440
flips the numbers and so if we flip the

00:31:28,080 --> 00:31:33,419
day then we end up with a bad local time

00:31:31,440 --> 00:31:36,960
because it still says 2:00 a.m. but if

00:31:33,419 --> 00:31:38,309
we flip the hours 24 times then that

00:31:36,960 --> 00:31:40,289
would make sense because it would skip

00:31:38,309 --> 00:31:41,730
from 1 to 3 so that's kind of how I

00:31:40,289 --> 00:31:45,450
think about it in my head I don't know

00:31:41,730 --> 00:31:48,330
if that helps anyone else the order of

00:31:45,450 --> 00:31:49,889
mass can also matter so by default day

00:31:48,330 --> 00:31:51,239
time has some weird order that was

00:31:49,889 --> 00:31:53,850
whatever was easiest when I was

00:31:51,239 --> 00:31:56,039
implementing this many years ago it

00:31:53,850 --> 00:31:58,049
doesn't really matter what it is I mean

00:31:56,039 --> 00:31:59,820
in the sense that I could have picked

00:31:58,049 --> 00:32:01,950
some other order and it would not

00:31:59,820 --> 00:32:04,019
necessarily be better or worse it would

00:32:01,950 --> 00:32:06,869
just cause different problems it is

00:32:04,019 --> 00:32:09,509
documented what the order is so if you

00:32:06,869 --> 00:32:13,139
just call add and you pass multiple

00:32:09,509 --> 00:32:15,570
units it does whatever it does so I

00:32:13,139 --> 00:32:17,190
think yeah for this example if you pass

00:32:15,570 --> 00:32:19,679
months and days it does days first so

00:32:17,190 --> 00:32:21,809
it's February 28th we had one day we get

00:32:19,679 --> 00:32:23,850
March 1st and then we add a month we get

00:32:21,809 --> 00:32:26,879
April 1st if it did it the other order

00:32:23,850 --> 00:32:29,460
added the month first we get March 28th

00:32:26,879 --> 00:32:32,519
then we die today and get March 29 if

00:32:29,460 --> 00:32:35,070
you want to control the order just make

00:32:32,519 --> 00:32:37,919
multiple calls to add again this is

00:32:35,070 --> 00:32:40,739
documented and it's your decision to

00:32:37,919 --> 00:32:42,179
decide how to deal with this there's

00:32:40,739 --> 00:32:45,239
even more bass coaches and there's a

00:32:42,179 --> 00:32:48,779
bunch of these in the docs math is not

00:32:45,239 --> 00:32:52,350
always reversible when you're dealing

00:32:48,779 --> 00:32:53,789
with DSD so if you subtract one day time

00:32:52,350 --> 00:32:55,950
from another and you get the duration

00:32:53,789 --> 00:32:58,259
and then you add the duration back to

00:32:55,950 --> 00:33:01,590
that day time you might not get the

00:32:58,259 --> 00:33:04,619
original day time if you do math across

00:33:01,590 --> 00:33:06,480
DST changes it's very confusing are you

00:33:04,619 --> 00:33:07,710
supposed to include the extra hour if

00:33:06,480 --> 00:33:10,140
there was one

00:33:07,710 --> 00:33:13,409
how do you deal with this again the way

00:33:10,140 --> 00:33:15,480
this is handled is all documented and I

00:33:13,409 --> 00:33:18,149
had to just kind of pick an arbitrary

00:33:15,480 --> 00:33:19,350
thing like I'll do it this way if you

00:33:18,149 --> 00:33:20,940
don't like it generally there's a

00:33:19,350 --> 00:33:22,799
workaround

00:33:20,940 --> 00:33:27,000
there's also leap years which can affect

00:33:22,799 --> 00:33:30,750
the date time math leap seconds so there

00:33:27,000 --> 00:33:35,220
are some ways to do the safely number

00:33:30,750 --> 00:33:37,049
one always use add to add like days or

00:33:35,220 --> 00:33:39,750
months or whatever to add a time you

00:33:37,049 --> 00:33:42,870
have I have seen people write code like

00:33:39,750 --> 00:33:45,059
this this day time set and then kind of

00:33:42,870 --> 00:33:47,370
mainly do the math and that is much more

00:33:45,059 --> 00:33:49,409
likely to expose you to weird bugs and

00:33:47,370 --> 00:33:50,960
it's just wrong there's a reason that

00:33:49,409 --> 00:33:53,490
there is an ADD method

00:33:50,960 --> 00:33:55,770
there's subtraction methods like Delta

00:33:53,490 --> 00:33:59,159
days and subtract so conversely do not

00:33:55,770 --> 00:34:01,230
do set with the subtraction if you can

00:33:59,159 --> 00:34:02,880
if you don't actually care about time

00:34:01,230 --> 00:34:05,820
zones just use the floating time zone

00:34:02,880 --> 00:34:07,500
it'll it'll eliminate a huge number of

00:34:05,820 --> 00:34:09,119
these problems because it will a lot of

00:34:07,500 --> 00:34:11,550
them relate to leap seconds and ESP

00:34:09,119 --> 00:34:13,500
won't eliminate that end of months issue

00:34:11,550 --> 00:34:16,080
but eliminate a lot of the others and

00:34:13,500 --> 00:34:19,230
then the other option is consider using

00:34:16,080 --> 00:34:20,520
UTC when you do math and in fact it my

00:34:19,230 --> 00:34:23,159
last step we have the subclass add a

00:34:20,520 --> 00:34:25,440
time we use that overrode all the math

00:34:23,159 --> 00:34:27,720
methods and would internally convert to

00:34:25,440 --> 00:34:29,460
UTC then do the math and then convert

00:34:27,720 --> 00:34:31,020
back to the original time zone and the

00:34:29,460 --> 00:34:32,730
reason for that was to avoid those

00:34:31,020 --> 00:34:35,399
exceptions I talked about when you say

00:34:32,730 --> 00:34:38,460
added a day and hit an invalid local

00:34:35,399 --> 00:34:40,619
time so but again this is a decision you

00:34:38,460 --> 00:34:42,960
have to make because are you willing to

00:34:40,619 --> 00:34:45,720
accept the fact that your your your wall

00:34:42,960 --> 00:34:49,770
clock time is going to change in some

00:34:45,720 --> 00:34:51,810
cases because you're doing that so those

00:34:49,770 --> 00:34:55,260
are my recommendations you can't do that

00:34:51,810 --> 00:34:56,790
well okay there's also another issue

00:34:55,260 --> 00:34:59,099
with ambiguous local times to the

00:34:56,790 --> 00:35:01,650
constructor so if we construct the time

00:34:59,099 --> 00:35:04,109
when it's Lindos 25-hour days and we

00:35:01,650 --> 00:35:06,030
have to one AMS or two two AMS win over

00:35:04,109 --> 00:35:07,410
the time zone oh so by the way there's

00:35:06,030 --> 00:35:09,420
some time zones the change at midnight

00:35:07,410 --> 00:35:12,150
which really sucks because if you try to

00:35:09,420 --> 00:35:13,950
construct a date time without passing in

00:35:12,150 --> 00:35:16,440
time component to defaults to midnight I

00:35:13,950 --> 00:35:17,609
think this is Egypt so what's the talk

00:35:16,440 --> 00:35:19,560
Egypt come on

00:35:17,609 --> 00:35:21,210
they didn't like look at my code before

00:35:19,560 --> 00:35:23,170
designing the time zone world

00:35:21,210 --> 00:35:24,579
actually in all seriousness it's not

00:35:23,170 --> 00:35:26,289
about my coat changing Midnight's a bad

00:35:24,579 --> 00:35:29,859
idea makes everything really confusing

00:35:26,289 --> 00:35:33,250
so when you construct an object that is

00:35:29,859 --> 00:35:36,970
ambiguous daytime is just going to pick

00:35:33,250 --> 00:35:38,319
the latest UTC time that's again just a

00:35:36,970 --> 00:35:40,240
decision I made there's no right or

00:35:38,319 --> 00:35:42,069
wrong answer if you don't like this you

00:35:40,240 --> 00:35:45,309
could construct it in UTC and then

00:35:42,069 --> 00:35:47,920
convert or that's probably the best

00:35:45,309 --> 00:35:49,299
answer there's no more all right some

00:35:47,920 --> 00:35:52,450
recommendations about storage and

00:35:49,299 --> 00:35:55,089
presentation whenever possible store

00:35:52,450 --> 00:35:56,410
them as a floating time zone again if

00:35:55,089 --> 00:36:01,180
you don't really care about time zones

00:35:56,410 --> 00:36:03,730
or store it in UTC don't just if the

00:36:01,180 --> 00:36:05,769
thing you cannot do is simply store

00:36:03,730 --> 00:36:08,260
whatever the local wall clock time is

00:36:05,769 --> 00:36:11,230
without any record of what the time zone

00:36:08,260 --> 00:36:13,150
was so if you need to know the time zone

00:36:11,230 --> 00:36:16,180
of a day time that you're storing in a

00:36:13,150 --> 00:36:19,029
database or whatever you must ideally

00:36:16,180 --> 00:36:21,279
what you do is store it is like UTC plus

00:36:19,029 --> 00:36:26,019
a time zone or the local wall clock time

00:36:21,279 --> 00:36:27,579
plus a time zone Postgres is not as good

00:36:26,019 --> 00:36:30,309
about this as it could be it's

00:36:27,579 --> 00:36:33,250
time-stamped easy type is actually kind

00:36:30,309 --> 00:36:35,890
of this named it's really storing a UTC

00:36:33,250 --> 00:36:39,490
time plus an offset which is not ideal

00:36:35,890 --> 00:36:41,440
does not store the full I Ana name so if

00:36:39,490 --> 00:36:43,059
you really really need to know this

00:36:41,440 --> 00:36:44,289
stuff accurately like if you're writing

00:36:43,059 --> 00:36:46,299
some sort of calendaring application

00:36:44,289 --> 00:36:48,099
it's like you know if you're returning

00:36:46,299 --> 00:36:51,039
to write Google Calendar you would have

00:36:48,099 --> 00:36:52,569
to store the UTC time or the local time

00:36:51,039 --> 00:36:54,730
plus the named offset so you can

00:36:52,569 --> 00:36:56,200
recreate things because for example but

00:36:54,730 --> 00:36:58,390
I have an appointment two years from now

00:36:56,200 --> 00:37:00,910
in some country that's constantly

00:36:58,390 --> 00:37:04,720
filling with its DST rules and it's it

00:37:00,910 --> 00:37:06,640
you know noon then if you just store it

00:37:04,720 --> 00:37:08,769
as UTC and then try to recreate it if

00:37:06,640 --> 00:37:12,359
the timezone rules change then you can

00:37:08,769 --> 00:37:12,359
end up with a mess question

00:37:14,880 --> 00:37:27,540
oh yes yes yeah you made a point the

00:37:25,650 --> 00:37:29,160
photograph time stamp with TSA is worse

00:37:27,540 --> 00:37:31,440
than I said it doesn't store an offset

00:37:29,160 --> 00:37:34,320
it's just when you do a select like say

00:37:31,440 --> 00:37:36,660
and psql or in your app just use what

00:37:34,320 --> 00:37:39,270
uses whatever the configured time zone

00:37:36,660 --> 00:37:41,250
is for the connection which I think by

00:37:39,270 --> 00:37:43,800
default with psql is the machine's local

00:37:41,250 --> 00:37:46,650
time zone and just displays it that way

00:37:43,800 --> 00:37:49,400
so yeah it's it's it's very confusing

00:37:46,650 --> 00:37:49,400
with investing

00:37:54,080 --> 00:38:07,320
okay okay so you said the time with PZ

00:38:05,280 --> 00:38:09,120
type does store the offset so you get a

00:38:07,320 --> 00:38:11,700
separate date and time with TZ columns

00:38:09,120 --> 00:38:13,680
of course as I point it out just storing

00:38:11,700 --> 00:38:16,710
the offset may not be sufficient anyway

00:38:13,680 --> 00:38:18,840
I wouldn't be surprised if maybe there's

00:38:16,710 --> 00:38:21,600
a Postgres extension that handles some

00:38:18,840 --> 00:38:23,510
of this I haven't looked another

00:38:21,600 --> 00:38:25,920
recommendation don't store the epoch

00:38:23,510 --> 00:38:28,940
it's kind of a similar problem of you're

00:38:25,920 --> 00:38:32,160
losing information store the date time

00:38:28,940 --> 00:38:35,790
use the time zones for presentation to

00:38:32,160 --> 00:38:37,500
users so it's stored in UTC and then you

00:38:35,790 --> 00:38:39,270
know whatever your user has configured

00:38:37,500 --> 00:38:43,710
their local time zone to be and you can

00:38:39,270 --> 00:38:45,750
present it to them that way the worst

00:38:43,710 --> 00:38:47,820
thing you can do is just like use

00:38:45,750 --> 00:38:50,280
whatever the machines local time zone is

00:38:47,820 --> 00:38:52,410
and store the wall clock time because

00:38:50,280 --> 00:38:54,180
let's say you do that and then you

00:38:52,410 --> 00:38:55,470
decide to change your service time zones

00:38:54,180 --> 00:38:57,150
or you move them to a different data

00:38:55,470 --> 00:38:58,140
center and they get changed for you and

00:38:57,150 --> 00:39:01,530
then you're fetching them from the

00:38:58,140 --> 00:39:03,060
database and suddenly it's just a huge

00:39:01,530 --> 00:39:06,390
mass this you really have to think

00:39:03,060 --> 00:39:07,980
here's here's the short version think

00:39:06,390 --> 00:39:09,510
real hard about how you're going to

00:39:07,980 --> 00:39:11,580
store this stuff because it might bite

00:39:09,510 --> 00:39:16,260
you in the future don't just do whatever

00:39:11,580 --> 00:39:19,680
is easiest also okay finally some

00:39:16,260 --> 00:39:22,050
performance tricks and here are my rules

00:39:19,680 --> 00:39:25,140
of optimization which I apply to all

00:39:22,050 --> 00:39:27,240
code all the time I've had problems with

00:39:25,140 --> 00:39:28,620
co-workers who are like well why'd you

00:39:27,240 --> 00:39:31,350
write it that's really confusing way

00:39:28,620 --> 00:39:32,730
oh it's faster did you benchmark it did

00:39:31,350 --> 00:39:34,740
you profile it no I just know it's

00:39:32,730 --> 00:39:36,720
faster I first of all they might rewrite

00:39:34,740 --> 00:39:39,030
I'm not actually disputing the disaster

00:39:36,720 --> 00:39:41,250
the point is it doesn't matter if it's

00:39:39,030 --> 00:39:43,800
faster if the code is not in a hot bath

00:39:41,250 --> 00:39:46,700
only gets executed once every minute and

00:39:43,800 --> 00:39:49,440
it takes an extra five milliseconds so

00:39:46,700 --> 00:39:52,470
don't do these stupid performance tricks

00:39:49,440 --> 00:39:57,030
enlist daytime or your use of daytime is

00:39:52,470 --> 00:39:59,850
actually in a hot path so here's a

00:39:57,030 --> 00:40:02,400
really easy one rather than passing a

00:39:59,850 --> 00:40:04,770
string to the constructor over and over

00:40:02,400 --> 00:40:07,140
again you can set past a daytime times

00:40:04,770 --> 00:40:09,420
an object so you can construct that once

00:40:07,140 --> 00:40:11,940
maybe store it as a package variable or

00:40:09,420 --> 00:40:15,750
whatever pass the object in repeatedly

00:40:11,940 --> 00:40:18,180
the lookup of looking up the name that

00:40:15,750 --> 00:40:20,520
you pass in each time has some overhead

00:40:18,180 --> 00:40:21,960
so that's a way to save some time in

00:40:20,520 --> 00:40:23,640
this one this one is actually the kind

00:40:21,960 --> 00:40:25,350
of optimization if you just did it I

00:40:23,640 --> 00:40:26,850
wouldn't complain too much because it's

00:40:25,350 --> 00:40:30,780
so simple and doesn't make the code

00:40:26,850 --> 00:40:32,280
really confusing if you're dealing with

00:40:30,780 --> 00:40:34,710
you know thousands or hundreds of

00:40:32,280 --> 00:40:36,630
thousands of date/time strings that are

00:40:34,710 --> 00:40:38,340
all in exactly the same format and

00:40:36,630 --> 00:40:40,710
you're quite sure that the format will

00:40:38,340 --> 00:40:43,050
not change you could use a regex based

00:40:40,710 --> 00:40:43,890
parser with this probably missing is an

00:40:43,050 --> 00:40:45,630
or die

00:40:43,890 --> 00:40:47,010
somewhere in here to make sure we

00:40:45,630 --> 00:40:50,190
actually got a year month and date out

00:40:47,010 --> 00:40:51,720
of it but that's an okay if this is this

00:40:50,190 --> 00:40:53,160
is less okay than timezone thing because

00:40:51,720 --> 00:40:55,470
I'd be like I don't use the format

00:40:53,160 --> 00:40:57,300
because it makes it easier but anyway so

00:40:55,470 --> 00:40:58,920
you know say you're parsing a CSV file

00:40:57,300 --> 00:41:01,380
and you know the format is the same in

00:40:58,920 --> 00:41:02,490
every column to do this reg X's are

00:41:01,380 --> 00:41:05,640
always going to be pasture and then

00:41:02,490 --> 00:41:07,710
calling a bunch of methods oh there was

00:41:05,640 --> 00:41:11,690
one more that is no longer applied so

00:41:07,710 --> 00:41:13,740
older versions of date/time used to use

00:41:11,690 --> 00:41:15,990
params validate and there was a way to

00:41:13,740 --> 00:41:17,370
disable invalidation when I switched it

00:41:15,990 --> 00:41:18,930
to use my new module which I talked

00:41:17,370 --> 00:41:19,470
about lightning Cockerham validation

00:41:18,930 --> 00:41:21,540
Pilar

00:41:19,470 --> 00:41:23,730
the constructor got about 10-15 percent

00:41:21,540 --> 00:41:25,850
faster but it doesn't have a way to

00:41:23,730 --> 00:41:28,440
disable validation so it's a trade-off

00:41:25,850 --> 00:41:32,240
so that's it for stupid performance

00:41:28,440 --> 00:41:32,240
tricks thank you very much

00:41:35,600 --> 00:41:43,190
yeah you have 10 minutes for questions I

00:41:39,690 --> 00:41:43,190
hope you have a lot of questions yes

00:41:50,390 --> 00:41:58,500
yeah okay so the question was on a DST

00:41:56,520 --> 00:42:01,650
transition when the clock moves back and

00:41:58,500 --> 00:42:04,650
you're adding a hour to the local time

00:42:01,650 --> 00:42:06,150
you go from 1 a.m. to 1 a.m. and then

00:42:04,650 --> 00:42:09,990
what happens when you add another hour

00:42:06,150 --> 00:42:14,070
yes it does go to 2 a.m. so yeah it's a

00:42:09,990 --> 00:42:21,150
25 hour day with to 1 a.m. hours more

00:42:14,070 --> 00:42:22,680
questions yes ok good question so the

00:42:21,150 --> 00:42:24,960
question was can leave seconds happen

00:42:22,680 --> 00:42:26,640
anytime so you could have a 20 good you

00:42:24,960 --> 00:42:28,740
have a 25 hour day with the leap second

00:42:26,640 --> 00:42:30,390
you could have a 25 hour day with the

00:42:28,740 --> 00:42:33,000
leave second because time zones are made

00:42:30,390 --> 00:42:35,370
by you know legislative bodies or I

00:42:33,000 --> 00:42:36,900
guess in some countries dictators do you

00:42:35,370 --> 00:42:39,630
think there's like a dictator and like

00:42:36,900 --> 00:42:41,820
some some country is just like focused

00:42:39,630 --> 00:42:44,300
on the time zones and just like we will

00:42:41,820 --> 00:42:48,170
change the time zone

00:42:44,300 --> 00:42:53,910
who Pope Gregory okay there you go

00:42:48,170 --> 00:42:56,460
so leap seconds only happen on June 30th

00:42:53,910 --> 00:42:59,430
and December 31st they're announced but

00:42:56,460 --> 00:43:02,250
now I remember the earth internet wait

00:42:59,430 --> 00:43:05,010
is another French thing it's at the ier

00:43:02,250 --> 00:43:06,720
s something earth no international earth

00:43:05,010 --> 00:43:07,950
rotation service is nine other French

00:43:06,720 --> 00:43:10,110
thing

00:43:07,950 --> 00:43:11,730
and so they published a bulletin like I

00:43:10,110 --> 00:43:13,170
said on a regular basis and they

00:43:11,730 --> 00:43:16,410
announced whether there will be a leap

00:43:13,170 --> 00:43:18,090
second on the coming scheduled date that

00:43:16,410 --> 00:43:20,070
could have a leap second so could you

00:43:18,090 --> 00:43:23,310
have a 25 hour day with the least jacket

00:43:20,070 --> 00:43:25,650
well if somebody really really stupidly

00:43:23,310 --> 00:43:27,960
decides to put their DST transition on

00:43:25,650 --> 00:43:29,640
one of those dates which as far as I

00:43:27,960 --> 00:43:34,440
know has not happened yet but could

00:43:29,640 --> 00:43:36,930
happen then yes so I can't I can't

00:43:34,440 --> 00:43:40,520
control for the stupidity of politician

00:43:36,930 --> 00:43:40,520
unfortunately yeah

00:43:40,620 --> 00:43:44,190
can you speak up a little

00:44:09,070 --> 00:44:14,320
okay so he mentioned that there's a

00:44:10,630 --> 00:44:17,680
model called geolocation timezone that

00:44:14,320 --> 00:44:19,300
uses your current location to the ini

00:44:17,680 --> 00:44:22,630
database actually distributes some

00:44:19,300 --> 00:44:30,310
information about so this doesn't look

00:44:22,630 --> 00:44:34,090
promising what does it return an actual

00:44:30,310 --> 00:44:35,530
name timezone or is it returning okay so

00:44:34,090 --> 00:44:37,120
there's this thing which I don't know

00:44:35,530 --> 00:44:38,890
the reason I say it doesn't look

00:44:37,120 --> 00:44:41,140
promising as I saw this a through Z

00:44:38,890 --> 00:44:43,240
there's a military system where they

00:44:41,140 --> 00:44:45,790
name the time zones A through Z based on

00:44:43,240 --> 00:44:47,770
kind of your position in the world set

00:44:45,790 --> 00:44:50,650
latitude or that's latitude yeah

00:44:47,770 --> 00:44:55,930
based on your latitude or longitude damn

00:44:50,650 --> 00:44:58,380
it it's an issued and those are just

00:44:55,930 --> 00:45:01,150
pure offsets so they're not that useful

00:44:58,380 --> 00:45:04,770
okay well and this might be using I

00:45:01,150 --> 00:45:04,770
can't tell what was the other comment

00:45:17,270 --> 00:45:22,910
so we said the reason that UTC is based

00:45:20,330 --> 00:45:24,950
in Greenwich is because that's where

00:45:22,910 --> 00:45:26,810
they were trying to figure out the

00:45:24,950 --> 00:45:29,619
solution to the longitude issue which is

00:45:26,810 --> 00:45:32,720
basically a naval navigation issue

00:45:29,619 --> 00:45:34,730
figuring out where you were and that was

00:45:32,720 --> 00:46:14,600
the zero line so that's also why it's

00:45:34,730 --> 00:46:15,830
the zero for UTC yes so he was saying he

00:46:14,600 --> 00:46:18,130
was involved in project where you can

00:46:15,830 --> 00:46:21,110
download stuff from time zones and the

00:46:18,130 --> 00:46:25,580
important issue was the duration and so

00:46:21,110 --> 00:46:27,140
we just sort of epics and yes that is a

00:46:25,580 --> 00:46:28,940
good point so if all you care about this

00:46:27,140 --> 00:46:30,980
duration say like especially for like

00:46:28,940 --> 00:46:33,290
scientific work or something then you

00:46:30,980 --> 00:46:37,609
can't just store the epic but you know

00:46:33,290 --> 00:46:40,130
this talk is really about kind of dates

00:46:37,609 --> 00:46:42,890
and times for humans so things like

00:46:40,130 --> 00:46:45,320
calendars or events and stuff like that

00:46:42,890 --> 00:46:46,910
I agree if that's almost not even

00:46:45,320 --> 00:46:49,460
daytime you're just like counting

00:46:46,910 --> 00:46:52,520
seconds which you know it's totally

00:46:49,460 --> 00:46:54,170
valid use case it's just if you're doing

00:46:52,520 --> 00:46:55,640
that you really don't need a module like

00:46:54,170 --> 00:46:59,950
this yeah you can just have two integers

00:46:55,640 --> 00:46:59,950
and do some simple math so

00:47:13,000 --> 00:47:17,120
yeah I mean that can that can work if

00:47:15,830 --> 00:47:18,860
you just sort of I would point out

00:47:17,120 --> 00:47:20,900
actually I mentioned scientific but then

00:47:18,860 --> 00:47:22,280
if you're basing this on NTP and you get

00:47:20,900 --> 00:47:24,440
that double second then it might

00:47:22,280 --> 00:47:28,130
actually screw up your math so that's

00:47:24,440 --> 00:47:30,140
that's you know anyway then this is a

00:47:28,130 --> 00:47:32,210
longer discussion that we don't have

00:47:30,140 --> 00:47:44,590
time for more questions Larry did you

00:47:32,210 --> 00:47:44,590
have one say it isn't so

00:47:44,920 --> 00:47:47,920
okay

00:48:18,490 --> 00:48:27,900
we're having a debate about Halloween in

00:48:21,280 --> 00:48:30,790
the audience uh he was saying that the

00:48:27,900 --> 00:48:32,830
reason we have these French names

00:48:30,790 --> 00:48:34,810
polluting our pristine English is

00:48:32,830 --> 00:48:37,990
because at one point the French took

00:48:34,810 --> 00:48:40,180
over the timekeeping duties don't really

00:48:37,990 --> 00:48:44,500
have their friends just make a joke and

00:48:40,180 --> 00:48:47,230
that there were there were shadowy dark

00:48:44,500 --> 00:48:51,580
conspiracies involved in past PST

00:48:47,230 --> 00:48:55,780
changes involving golf and candy you

00:48:51,580 --> 00:49:02,230
know a golf candy candy golf anyway one

00:48:55,780 --> 00:49:04,150
more maybe two more questions yeah did I

00:49:02,230 --> 00:49:06,070
hear that there are politicians in New

00:49:04,150 --> 00:49:08,200
England one a change in Atlantic time I

00:49:06,070 --> 00:49:11,890
think you know I didn't that up seems

00:49:08,200 --> 00:49:13,390
fine i the people get really confused

00:49:11,890 --> 00:49:15,070
about time zones and they're like time

00:49:13,390 --> 00:49:18,490
zones are terrible everything should be

00:49:15,070 --> 00:49:20,770
on UTC which is idiotic the fact that I

00:49:18,490 --> 00:49:22,480
know you know 9:00 a.m. is a time when

00:49:20,770 --> 00:49:24,880
somebody will be awake and their local

00:49:22,480 --> 00:49:27,580
time is really useful what is terrible

00:49:24,880 --> 00:49:29,260
is DFP so changing to Atlantic time that

00:49:27,580 --> 00:49:32,890
seems fine because it kind of

00:49:29,260 --> 00:49:35,470
synchronizes your your wall clock nine

00:49:32,890 --> 00:49:37,599
to five or six to six however you want

00:49:35,470 --> 00:49:39,940
to think about it roughly with you know

00:49:37,599 --> 00:49:41,410
daylight and nighttime which is

00:49:39,940 --> 00:49:43,480
generally I think a good thing

00:49:41,410 --> 00:49:46,359
it's the DST stuff that's really stupid

00:49:43,480 --> 00:49:49,240
I am I think it makes a lot of sense

00:49:46,359 --> 00:49:53,140
potentially I for a state like Maine's

00:49:49,240 --> 00:49:53,890
won a changeover to Atlantic time so no

00:49:53,140 --> 00:49:56,080
objection

00:49:53,890 --> 00:49:58,300
all right Patrick's telling me I'm done

00:49:56,080 --> 00:49:59,950
so thank you so much if you have more

00:49:58,300 --> 00:50:02,010
questions I will be around

00:49:59,950 --> 00:50:02,010

YouTube URL: https://www.youtube.com/watch?v=enr5_FoToiA


