Title: Graham Knop - "Continuous Integration for CPAN"
Publication date: 2017-06-21
Playlist: TPC 2017 in DC
Description: 
	Continuous integration helps you catch issues in your modules across a more diverse set of configurations than is easy to check manually. Travis-CI and AppVeyor are free CI solutions for open source projects that will allow automatic testing on Linux, macOS, and Windows. Extra tools exist for easy testing with more configurations than Travis-CI has built in support for.
Captions: 
	00:00:01,939 --> 00:00:11,580
hello I'm Graham chop also hard on IRC

00:00:07,710 --> 00:00:14,730
and github and elsewhere work for

00:00:11,580 --> 00:00:17,430
booking comm which I stuff to send me

00:00:14,730 --> 00:00:22,500
here and they are hiring by the way if

00:00:17,430 --> 00:00:25,230
anyone wants to Perl job so for in the

00:00:22,500 --> 00:00:28,380
Perl community we have a pretty long

00:00:25,230 --> 00:00:30,029
history of doing a lot of testing tools

00:00:28,380 --> 00:00:33,690
like test more and prove have been

00:00:30,029 --> 00:00:35,700
around for a long time and a lot of

00:00:33,690 --> 00:00:38,460
people to test their code in good ways

00:00:35,700 --> 00:00:40,950
we also have see pen testers is a site

00:00:38,460 --> 00:00:44,940
that's been around for a long time and

00:00:40,950 --> 00:00:48,930
an important part of that so it's C pen

00:00:44,940 --> 00:00:50,789
testers is test reporting for Sipan

00:00:48,930 --> 00:00:53,280
releases releases that are uploaded to

00:00:50,789 --> 00:00:56,399
see pen some of that is automated

00:00:53,280 --> 00:00:57,719
testing done by people running dedicated

00:00:56,399 --> 00:01:01,680
smoking machines that just test

00:00:57,719 --> 00:01:03,690
everything other things is done by

00:01:01,680 --> 00:01:05,460
individual users as they as they install

00:01:03,690 --> 00:01:08,159
things they'll submit reports through

00:01:05,460 --> 00:01:10,200
that it also will you'll get test

00:01:08,159 --> 00:01:12,060
reports for development releases and

00:01:10,200 --> 00:01:14,490
trial releases that you upload that

00:01:12,060 --> 00:01:16,170
aren't meant to be installed for general

00:01:14,490 --> 00:01:17,549
use but you still are able to get

00:01:16,170 --> 00:01:20,729
testing ahead of time with something

00:01:17,549 --> 00:01:22,409
like that there's some issues with that

00:01:20,729 --> 00:01:24,180
bottle though first of all not

00:01:22,409 --> 00:01:27,330
everything is on Sipan there's plenty of

00:01:24,180 --> 00:01:29,610
Perl projects that don't don't get

00:01:27,330 --> 00:01:32,549
uploaded to Sipan or are just aren't a

00:01:29,610 --> 00:01:34,799
module like that also releases aren't

00:01:32,549 --> 00:01:36,930
always granular enough doing doing a

00:01:34,799 --> 00:01:39,030
full release to get testing results

00:01:36,930 --> 00:01:42,509
isn't always enough to get kind of full

00:01:39,030 --> 00:01:44,579
coverage on issues also the actual

00:01:42,509 --> 00:01:45,780
amount of testing that that'll do if you

00:01:44,579 --> 00:01:48,210
have some kind of special extended

00:01:45,780 --> 00:01:50,100
testing or something based on external

00:01:48,210 --> 00:01:52,290
prerequisites it isn't always going to

00:01:50,100 --> 00:01:54,030
be possible to do in a general test

00:01:52,290 --> 00:01:57,750
suite that's same thing we run one

00:01:54,030 --> 00:02:00,270
people install so a good solution for

00:01:57,750 --> 00:02:02,399
this is continuous integration where you

00:02:00,270 --> 00:02:06,049
test every commit that you make as you

00:02:02,399 --> 00:02:08,429
upload to github or wherever else or

00:02:06,049 --> 00:02:10,709
additionally you this usually is paired

00:02:08,429 --> 00:02:12,480
with testing PRS so if somebody submits

00:02:10,709 --> 00:02:12,970
a patch to you it automatically runs

00:02:12,480 --> 00:02:15,160
through

00:02:12,970 --> 00:02:17,770
sweet as well this gives you a lot more

00:02:15,160 --> 00:02:21,610
control over your test process or again

00:02:17,770 --> 00:02:23,110
things like external dependencies be

00:02:21,610 --> 00:02:26,470
able to set them up ahead of time so

00:02:23,110 --> 00:02:29,830
that'll all work you can also link these

00:02:26,470 --> 00:02:34,150
kinds of things into the github UI it'll

00:02:29,830 --> 00:02:36,940
show up on PRS and such the anything of

00:02:34,150 --> 00:02:39,490
that you can use it for emergent role on

00:02:36,940 --> 00:02:41,650
github as well have things that'll it'll

00:02:39,490 --> 00:02:45,220
it won't let you merge it until it

00:02:41,650 --> 00:02:48,490
passes your tests and such so one of the

00:02:45,220 --> 00:02:52,480
the best ones for using for this for

00:02:48,490 --> 00:02:55,900
perl projects is Travis CI so Travis CI

00:02:52,480 --> 00:02:58,180
is a is a free project that is free for

00:02:55,900 --> 00:03:00,520
open source code basically anything you

00:02:58,180 --> 00:03:02,530
put on github you can auto you can run

00:03:00,520 --> 00:03:05,140
through test Travis without paying for

00:03:02,530 --> 00:03:11,350
anything integrates well with github as

00:03:05,140 --> 00:03:13,690
well on kind of both sides there's also

00:03:11,350 --> 00:03:16,360
you can actually pay for Travis CI

00:03:13,690 --> 00:03:18,280
instances as well if you need if you

00:03:16,360 --> 00:03:21,580
want to do that for private repositories

00:03:18,280 --> 00:03:25,090
that are github so how do you actually

00:03:21,580 --> 00:03:28,810
set up Travis CI and use it it's pretty

00:03:25,090 --> 00:03:31,769
simple you you create a Travis ya know

00:03:28,810 --> 00:03:35,019
file in your repository and you tell it

00:03:31,769 --> 00:03:37,330
what to test which a very simple one you

00:03:35,019 --> 00:03:39,250
just tell it you're testing Perl and you

00:03:37,330 --> 00:03:41,430
want to test on these Perl versions and

00:03:39,250 --> 00:03:45,330
you just give it a list of versions and

00:03:41,430 --> 00:03:47,980
then you go into the user interface and

00:03:45,330 --> 00:03:51,400
it's pretty simple there's just a button

00:03:47,980 --> 00:03:54,820
a toggle you turn it on saying test this

00:03:51,400 --> 00:03:56,799
and then as you push code you'll get

00:03:54,820 --> 00:03:58,209
you'll get feedback or you'll you'll be

00:03:56,799 --> 00:04:02,980
able to look at all of the different

00:03:58,209 --> 00:04:06,610
test results for every commit if you dig

00:04:02,980 --> 00:04:09,519
into that a bit more we see that there

00:04:06,610 --> 00:04:11,590
are for every like Perl version that I

00:04:09,519 --> 00:04:15,549
listed you can see a build log of the

00:04:11,590 --> 00:04:17,290
thing which is pretty normal test things

00:04:15,549 --> 00:04:20,070
you see what it's doing is quoting the

00:04:17,290 --> 00:04:22,080
github repo

00:04:20,070 --> 00:04:26,880
with kicking to the right Perl version

00:04:22,080 --> 00:04:28,260
and then just running through we have

00:04:26,880 --> 00:04:31,100
the Perl version the front of the tests

00:04:28,260 --> 00:04:33,330
are familiar output for improve

00:04:31,100 --> 00:04:37,920
basically and then it says it all worked

00:04:33,330 --> 00:04:39,960
so that's nice the equivalent of what

00:04:37,920 --> 00:04:42,510
that's doing by default is basically

00:04:39,960 --> 00:04:44,760
this you have an install phase which

00:04:42,510 --> 00:04:47,400
says install the prerequisites with C

00:04:44,760 --> 00:04:51,420
panem it doesn't run tests on them and

00:04:47,400 --> 00:04:53,540
then for the test phase it just runs the

00:04:51,420 --> 00:04:56,730
make file and then doesn't make tests

00:04:53,540 --> 00:04:58,560
pretty basic so that's the equivalent of

00:04:56,730 --> 00:05:00,960
the default which isn't always enough

00:04:58,560 --> 00:05:05,640
you might want to extend that some so

00:05:00,960 --> 00:05:08,670
for example have it report the bill blog

00:05:05,640 --> 00:05:10,650
from C PanAm if it didn't work so some

00:05:08,670 --> 00:05:12,300
of the prerequisites failed by default

00:05:10,650 --> 00:05:14,910
the CPM will give you a message saying

00:05:12,300 --> 00:05:16,560
hey go check the build log so you just

00:05:14,910 --> 00:05:21,210
have to put you have to kind of manage

00:05:16,560 --> 00:05:23,040
that on your own in the Travis setup you

00:05:21,210 --> 00:05:25,710
can also not use that kind of default

00:05:23,040 --> 00:05:27,270
setup you could say list your you can

00:05:25,710 --> 00:05:30,030
install your prerequisites manually and

00:05:27,270 --> 00:05:31,590
have them them be tested fully and then

00:05:30,030 --> 00:05:34,260
just run prove yourself instead of if

00:05:31,590 --> 00:05:37,200
you didn't want to run a make file or

00:05:34,260 --> 00:05:41,280
maybe you don't have one if it's not a

00:05:37,200 --> 00:05:43,200
standard module also getting into things

00:05:41,280 --> 00:05:45,480
like jacilla if you're using a tool

00:05:43,200 --> 00:05:47,430
other than just having a make file in

00:05:45,480 --> 00:05:49,950
your repository and you used is Dilla

00:05:47,430 --> 00:05:52,530
which is based on just ini file then you

00:05:49,950 --> 00:05:58,920
have to set that up as well or build

00:05:52,530 --> 00:06:01,200
based on that you can also do you can

00:05:58,920 --> 00:06:03,600
build a matrix as it's called for this

00:06:01,200 --> 00:06:06,000
can be rather complicated you can

00:06:03,600 --> 00:06:08,640
specify different environment variables

00:06:06,000 --> 00:06:10,890
paired with different perl versions and

00:06:08,640 --> 00:06:13,320
a number of other switches that you can

00:06:10,890 --> 00:06:15,600
combine to basically get kind of an

00:06:13,320 --> 00:06:20,220
arbitrary set up and do a lot of

00:06:15,600 --> 00:06:22,200
different builds all at once you could

00:06:20,220 --> 00:06:24,150
also if there's a couple kind of choices

00:06:22,200 --> 00:06:26,280
here by default

00:06:24,150 --> 00:06:28,830
Travis uses a containerized system and

00:06:26,280 --> 00:06:31,530
you don't have sudo access it does have

00:06:28,830 --> 00:06:32,150
a way to specify a package of the URL

00:06:31,530 --> 00:06:35,150
install

00:06:32,150 --> 00:06:36,260
packages but not every package is going

00:06:35,150 --> 00:06:37,820
to be available and you might need

00:06:36,260 --> 00:06:39,230
something that say not in the default

00:06:37,820 --> 00:06:42,080
list you have where you have to add a

00:06:39,230 --> 00:06:45,290
repository yourself so it is possible to

00:06:42,080 --> 00:06:49,040
ask for pseudo instead and use that to

00:06:45,290 --> 00:06:51,080
kind of set up a thing arbitrarily with

00:06:49,040 --> 00:06:53,360
pseudo though it does use a kind of

00:06:51,080 --> 00:06:55,310
different setup that is the machines are

00:06:53,360 --> 00:06:56,990
slower and there's less capacity for

00:06:55,310 --> 00:07:00,890
them so if you're running a lot of tests

00:06:56,990 --> 00:07:03,050
or a lot of different test setups it'll

00:07:00,890 --> 00:07:06,170
take longer because it you get like two

00:07:03,050 --> 00:07:08,780
at a time so that's configured

00:07:06,170 --> 00:07:12,200
relatively simple simply by using the

00:07:08,780 --> 00:07:13,970
app to add on or just saying yes I want

00:07:12,200 --> 00:07:15,950
pseudo it actually will automatically

00:07:13,970 --> 00:07:18,080
try to it'll give you the pseudo setup

00:07:15,950 --> 00:07:20,630
if one of your commands in the yellow

00:07:18,080 --> 00:07:23,960
file is to run sudo it just does that

00:07:20,630 --> 00:07:26,150
automatically for you so there's a lot

00:07:23,960 --> 00:07:28,820
more stuff kind of in Travis there's

00:07:26,150 --> 00:07:30,410
things like allow failures which allows

00:07:28,820 --> 00:07:32,480
you to set up builds that you don't

00:07:30,410 --> 00:07:35,390
expect to always pass maybe you just

00:07:32,480 --> 00:07:37,610
don't care about them like or maybe

00:07:35,390 --> 00:07:39,470
they're like coverage tests that are

00:07:37,610 --> 00:07:41,600
going to be a lot slower and you want

00:07:39,470 --> 00:07:43,700
results faster so you say we don't

00:07:41,600 --> 00:07:45,460
really care about if this passes all

00:07:43,700 --> 00:07:47,930
together but still you want to run it

00:07:45,460 --> 00:07:51,530
there's a cache feature so you can have

00:07:47,930 --> 00:07:53,240
it cache files from disk but to the next

00:07:51,530 --> 00:07:55,520
run so you can have prerequisites

00:07:53,240 --> 00:07:57,800
installed and then not have to reinstall

00:07:55,520 --> 00:07:59,360
them again and any number of

00:07:57,800 --> 00:08:01,850
notifications set up so some of the

00:07:59,360 --> 00:08:03,530
examples listed here email IRC have

00:08:01,850 --> 00:08:06,650
chats like there's a bunch of others

00:08:03,530 --> 00:08:11,090
that it has as well as far as

00:08:06,650 --> 00:08:13,670
integration with github you see on a PR

00:08:11,090 --> 00:08:16,520
it automatically has the tests that we

00:08:13,670 --> 00:08:18,500
run and it says yes the PR pass to the

00:08:16,520 --> 00:08:20,930
push path and then you also get

00:08:18,500 --> 00:08:23,240
submitted coverage reports and so that

00:08:20,930 --> 00:08:26,210
is all saying and Tuli ler marked is

00:08:23,240 --> 00:08:30,020
required this is actually a PR on meta

00:08:26,210 --> 00:08:33,320
Sipan that we require the test to pass

00:08:30,020 --> 00:08:35,510
before it allows us to merge things you

00:08:33,320 --> 00:08:37,570
can also see an example of one let's say

00:08:35,510 --> 00:08:37,570
Lee

00:08:38,350 --> 00:08:42,190
so there's other things that are less

00:08:40,419 --> 00:08:44,860
easy to do there it's a lot more work to

00:08:42,190 --> 00:08:46,240
do with this so testing on say Perl five

00:08:44,860 --> 00:08:47,950
eight eight because by default to give

00:08:46,240 --> 00:08:50,680
you five eight nine which never really

00:08:47,950 --> 00:08:52,690
was used by many people in a while so or

00:08:50,680 --> 00:08:54,400
if you want a very again more specific

00:08:52,690 --> 00:08:56,350
versions like five ten you want a

00:08:54,400 --> 00:08:59,590
debugging build you want to test with

00:08:56,350 --> 00:09:01,600
bleed or a dev release over if you're a

00:08:59,590 --> 00:09:06,190
silly person like me and test on five

00:09:01,600 --> 00:09:09,340
six sometimes so I wrote this project

00:09:06,190 --> 00:09:11,260
which is Travis Perl helpers which is

00:09:09,340 --> 00:09:13,900
basically a set of scripts to do a lot

00:09:11,260 --> 00:09:17,110
of stuff that is common on Travis setups

00:09:13,900 --> 00:09:18,910
and do it for you so the first is build

00:09:17,110 --> 00:09:20,440
Perl which gives you kind of an

00:09:18,910 --> 00:09:22,450
arbitrary Perl that you asked for and

00:09:20,440 --> 00:09:24,910
the second is build dist which is to

00:09:22,450 --> 00:09:27,220
convert a git repo into a testable dist

00:09:24,910 --> 00:09:29,140
and this is set up with just a

00:09:27,220 --> 00:09:31,810
relatively simple some scripts that you

00:09:29,140 --> 00:09:35,110
clone and then do the na or I have a

00:09:31,810 --> 00:09:40,330
little short set thing because availing

00:09:35,110 --> 00:09:42,460
things from Curly's always fun so build

00:09:40,330 --> 00:09:44,760
Perl how does this work we just we just

00:09:42,460 --> 00:09:49,270
stick the command in there after our

00:09:44,760 --> 00:09:51,030
setup and what it does is you specify

00:09:49,270 --> 00:09:54,190
Pro versions in the same location

00:09:51,030 --> 00:09:55,330
they'll just the same list as before but

00:09:54,190 --> 00:09:58,180
the things that allows you to specify

00:09:55,330 --> 00:10:03,040
are more detailed you can request a

00:09:58,180 --> 00:10:04,240
particular release of a like again five

00:10:03,040 --> 00:10:06,250
eight eight instead of just getting the

00:10:04,240 --> 00:10:10,720
normal five eight nine that it gives you

00:10:06,250 --> 00:10:12,400
or five twenty six they have five twenty

00:10:10,720 --> 00:10:14,320
six now but it always takes them a bit

00:10:12,400 --> 00:10:16,420
to get that available on their systems

00:10:14,320 --> 00:10:17,980
after a release and so being able to

00:10:16,420 --> 00:10:19,960
request that ahead of time it can be

00:10:17,980 --> 00:10:21,190
good they're way better about that than

00:10:19,960 --> 00:10:23,410
they used to be they used to take them

00:10:21,190 --> 00:10:26,020
many months now it's like pretty quick

00:10:23,410 --> 00:10:27,670
but you can also request bleed or dev

00:10:26,020 --> 00:10:31,360
which is the latest dev release that was

00:10:27,670 --> 00:10:34,870
done so right now that would be a 527 0

00:10:31,360 --> 00:10:36,400
all right yeah or you can also add these

00:10:34,870 --> 00:10:37,990
little flags on the end like saying I

00:10:36,400 --> 00:10:39,490
want a threaded release and there's a

00:10:37,990 --> 00:10:40,900
number of flags that I kind of stuck in

00:10:39,490 --> 00:10:45,400
there one is for debugging one is for

00:10:40,900 --> 00:10:47,140
threading there's a couple others so

00:10:45,400 --> 00:10:48,670
part of what this does is if you give it

00:10:47,140 --> 00:10:49,580
a three part version it gives you a purl

00:10:48,670 --> 00:10:51,200
it doesn't have any

00:10:49,580 --> 00:10:53,630
prerequisites in Seoul which can be

00:10:51,200 --> 00:10:55,820
useful by default Travis installed a

00:10:53,630 --> 00:10:57,950
bunch of modules which is good for speed

00:10:55,820 --> 00:11:01,010
but not always good for your actual test

00:10:57,950 --> 00:11:01,940
coverage and also I pre-built a whole

00:11:01,010 --> 00:11:05,690
bunch of versions that it'll just

00:11:01,940 --> 00:11:09,530
download for you from my setup which is

00:11:05,690 --> 00:11:12,920
ugly I need to fix but anyway one weird

00:11:09,530 --> 00:11:15,260
caveat with this is it kind of initially

00:11:12,920 --> 00:11:17,150
looks like it failed when you try to use

00:11:15,260 --> 00:11:19,490
one of these versions but it just

00:11:17,150 --> 00:11:22,040
continues going anyway and then my stuff

00:11:19,490 --> 00:11:23,960
fixes it later so that's funny it looks

00:11:22,040 --> 00:11:25,700
kind of ugly and it confuses people but

00:11:23,960 --> 00:11:29,600
it works well enough so I haven't gone

00:11:25,700 --> 00:11:31,550
to any other way of doing it so some

00:11:29,600 --> 00:11:34,010
other less easy less easy to do

00:11:31,550 --> 00:11:35,240
extensions are dealing with again the

00:11:34,010 --> 00:11:36,890
fact that there's pre-installed

00:11:35,240 --> 00:11:39,800
prerequisites on these machines

00:11:36,890 --> 00:11:41,330
oh or another example is installing

00:11:39,800 --> 00:11:42,290
authored apps like if you're doing if

00:11:41,330 --> 00:11:45,290
you're using diff Dilla

00:11:42,290 --> 00:11:47,120
and you first install this villa so that

00:11:45,290 --> 00:11:49,100
you can package your your thing to test

00:11:47,120 --> 00:11:51,410
it now you have all of disability

00:11:49,100 --> 00:11:53,540
requisites installed which means if you

00:11:51,410 --> 00:11:55,610
depended on mousse without actually

00:11:53,540 --> 00:11:57,500
listing it in your metadata your tests

00:11:55,610 --> 00:12:00,560
would all pass even though your setup

00:11:57,500 --> 00:12:02,360
isn't really doing the right thing or so

00:12:00,560 --> 00:12:04,010
if you wanted to run dis villa on five

00:12:02,360 --> 00:12:08,120
eight or five twelve now because it

00:12:04,010 --> 00:12:09,200
doesn't do that anymore so if you if you

00:12:08,120 --> 00:12:10,910
have a thing that you want to package

00:12:09,200 --> 00:12:14,120
with Gizella and you want to run your

00:12:10,910 --> 00:12:18,080
tests on older versions of Perl that's

00:12:14,120 --> 00:12:19,940
harder to do with this kind of setup so

00:12:18,080 --> 00:12:20,360
I have this other thing which is build

00:12:19,940 --> 00:12:23,300
dist

00:12:20,360 --> 00:12:25,160
which takes the repo and turns it into a

00:12:23,300 --> 00:12:28,790
disk like you would have on Sipan

00:12:25,160 --> 00:12:30,380
basically so it uses a separate Perl it

00:12:28,790 --> 00:12:33,800
uses actually the newest Perl it can

00:12:30,380 --> 00:12:35,930
find on the machine to do this and it

00:12:33,800 --> 00:12:37,610
installs all the prerequisites kind of

00:12:35,930 --> 00:12:39,710
magically for you but in a separate

00:12:37,610 --> 00:12:41,740
location so that when you later try to

00:12:39,710 --> 00:12:43,820
use your tests that won't be installed

00:12:41,740 --> 00:12:45,830
this usually ends up actually being

00:12:43,820 --> 00:12:49,010
faster because of the combination of

00:12:45,830 --> 00:12:51,740
things with the setup so even though you

00:12:49,010 --> 00:12:54,110
might think it would be slow all of the

00:12:51,740 --> 00:12:56,240
major author tools it kind of handles

00:12:54,110 --> 00:12:57,950
for you automatically and it seems to do

00:12:56,240 --> 00:13:00,980
a pretty good job at this point so I'm

00:12:57,950 --> 00:13:02,780
satisfied with that so how does this

00:13:00,980 --> 00:13:05,480
look well

00:13:02,780 --> 00:13:08,060
you run the build disk command and then

00:13:05,480 --> 00:13:10,430
it populates this variable of where it's

00:13:08,060 --> 00:13:12,350
stuck it and you can just CD into that

00:13:10,430 --> 00:13:15,230
directory and now you're in a directory

00:13:12,350 --> 00:13:18,830
that looks a lot like the main repo but

00:13:15,230 --> 00:13:21,530
it's a fully built disk it has all of

00:13:18,830 --> 00:13:22,730
the meta JSON file the manifest file all

00:13:21,530 --> 00:13:28,370
the kind of things you would expect to

00:13:22,730 --> 00:13:32,120
see in a full release again it handles

00:13:28,370 --> 00:13:34,370
every kind of it's the equivalent of a

00:13:32,120 --> 00:13:38,090
diesel build or a make dis tur or a

00:13:34,370 --> 00:13:43,820
build Disturb asically with additional

00:13:38,090 --> 00:13:45,380
handling as is as is appropriate so it

00:13:43,820 --> 00:13:48,140
automatically handled all of the author

00:13:45,380 --> 00:13:49,940
depths either by running the authored

00:13:48,140 --> 00:13:52,490
apps to Linda zillah's case because it

00:13:49,940 --> 00:13:54,860
has that or it just tries to run the

00:13:52,490 --> 00:13:56,540
make file that PL and it parses the

00:13:54,860 --> 00:13:59,450
error messages they come out of it until

00:13:56,540 --> 00:14:02,240
it can get a working set up so of course

00:13:59,450 --> 00:14:04,100
that's not always perfect but it hasn't

00:14:02,240 --> 00:14:07,040
been a problem so far it also handles

00:14:04,100 --> 00:14:08,450
module install which I just went and

00:14:07,040 --> 00:14:10,460
found a list of all the module install

00:14:08,450 --> 00:14:12,140
commands by looking on what was

00:14:10,460 --> 00:14:13,430
available and it just knows what they

00:14:12,140 --> 00:14:15,770
are based on what's in the make file

00:14:13,430 --> 00:14:17,570
because this yeah that's the only way

00:14:15,770 --> 00:14:19,310
you can really do it and it handles

00:14:17,570 --> 00:14:20,390
build up feel similar it just parses

00:14:19,310 --> 00:14:23,450
error messages each really get to know

00:14:20,390 --> 00:14:27,460
each other which is I'm using what seems

00:14:23,450 --> 00:14:31,460
to work pretty well so some other

00:14:27,460 --> 00:14:34,280
helpers that are in here Sipan install

00:14:31,460 --> 00:14:38,420
it's basically Sipan em but it has some

00:14:34,280 --> 00:14:40,610
extra little additions to it it has a

00:14:38,420 --> 00:14:43,940
coverage option which basically installs

00:14:40,610 --> 00:14:46,430
the appropriate modules for doing a test

00:14:43,940 --> 00:14:47,720
coverage and that's controllable by an

00:14:46,430 --> 00:14:50,150
environment variable it works out pretty

00:14:47,720 --> 00:14:54,770
well too in terms of putting that into

00:14:50,150 --> 00:14:56,900
your matrix it automatically shows error

00:14:54,770 --> 00:14:59,540
logs on failure so it doesn't pollute

00:14:56,900 --> 00:15:01,670
your output with all of the build all

00:14:59,540 --> 00:15:03,260
those build for your prerequisites until

00:15:01,670 --> 00:15:05,690
one of them actually fails and it

00:15:03,260 --> 00:15:07,070
automatically does shows you that output

00:15:05,690 --> 00:15:08,510
it's basically the same thing as I

00:15:07,070 --> 00:15:12,230
showed earlier except it's out of it for

00:15:08,510 --> 00:15:16,040
you it works on five six which see kind

00:15:12,230 --> 00:15:19,910
of does not again if you're silly an

00:15:16,040 --> 00:15:22,430
to do five six all the time then you can

00:15:19,910 --> 00:15:24,050
that'll actually work and handle all the

00:15:22,430 --> 00:15:29,480
same kind of prerequisite things that

00:15:24,050 --> 00:15:31,550
you would see on newer tools and it also

00:15:29,480 --> 00:15:34,579
like it only installs it installs

00:15:31,550 --> 00:15:36,019
developer prereqs but only for your

00:15:34,579 --> 00:15:37,970
module itself it doesn't like

00:15:36,019 --> 00:15:40,310
recursively install those which is kind

00:15:37,970 --> 00:15:44,410
of the way see Panem picks its

00:15:40,310 --> 00:15:46,790
dependencies the way you control that is

00:15:44,410 --> 00:15:48,889
but you tell it like install six

00:15:46,790 --> 00:15:51,079
suggested modules to install recommended

00:15:48,889 --> 00:15:52,579
modules but it does that recursively for

00:15:51,079 --> 00:15:54,230
all of the prerequisites and therefore

00:15:52,579 --> 00:15:58,100
requisites which usually isn't what you

00:15:54,230 --> 00:15:59,060
want for this kind of setup so one of

00:15:58,100 --> 00:16:01,790
the things I mentioned there was

00:15:59,060 --> 00:16:06,339
coverage and so I have a thing in here

00:16:01,790 --> 00:16:06,339
for setting up coverage pretty easily

00:16:06,550 --> 00:16:14,480
basically we run a command to install

00:16:11,630 --> 00:16:16,220
our coverage dependencies and in this

00:16:14,480 --> 00:16:18,740
case I'm configuring it to use code Cove

00:16:16,220 --> 00:16:22,310
there's several of the several sites for

00:16:18,740 --> 00:16:23,720
showing coverage output and this is one

00:16:22,310 --> 00:16:28,130
of them and that's what I'm using on a

00:16:23,720 --> 00:16:30,470
couple projects coverall is another one

00:16:28,130 --> 00:16:32,029
that's been used a bunch but I still

00:16:30,470 --> 00:16:35,720
can't figure out how to get them to stop

00:16:32,029 --> 00:16:37,069
spamming my PRS with comments even

00:16:35,720 --> 00:16:40,370
though I've disabled it any number of

00:16:37,069 --> 00:16:44,329
ways but it still happens so I stopped

00:16:40,370 --> 00:16:46,540
using them so now we then we have a

00:16:44,329 --> 00:16:50,600
coverage setup and a coverage report

00:16:46,540 --> 00:16:53,420
command and again the the C panic

00:16:50,600 --> 00:16:55,910
install coverage option and the coverage

00:16:53,420 --> 00:16:57,589
setup and the coverage report are all

00:16:55,910 --> 00:16:59,360
conditional on that environment variable

00:16:57,589 --> 00:17:01,420
so it's easy to put that environment

00:16:59,360 --> 00:17:04,970
variable in your build matrix and say

00:17:01,420 --> 00:17:09,230
some of us have one that yes I do want

00:17:04,970 --> 00:17:11,360
to do coverage and then the rest not and

00:17:09,230 --> 00:17:15,380
so those are just no ops if you don't

00:17:11,360 --> 00:17:17,419
have it enabled basically there's a

00:17:15,380 --> 00:17:19,339
number of other things in here

00:17:17,419 --> 00:17:21,559
one is test jobs is basically just

00:17:19,339 --> 00:17:24,740
returns a number that is how many jobs

00:17:21,559 --> 00:17:27,980
you should run parallel which is based

00:17:24,740 --> 00:17:29,750
on the number of CPUs it finds and also

00:17:27,980 --> 00:17:31,310
it's one you've coverages

00:17:29,750 --> 00:17:34,850
able to because developed over doesn't

00:17:31,310 --> 00:17:38,420
work parallel or sometimes it looks like

00:17:34,850 --> 00:17:40,820
it works but it doesn't actually there's

00:17:38,420 --> 00:17:44,150
another that's testers which is just it

00:17:40,820 --> 00:17:46,430
just returns T and X T if invert if the

00:17:44,150 --> 00:17:50,480
author testing is set just a little

00:17:46,430 --> 00:17:53,360
minor thing but it's useful test files

00:17:50,480 --> 00:17:56,210
is recursively all of the test files in

00:17:53,360 --> 00:17:58,310
your T or XT directory again based on

00:17:56,210 --> 00:18:02,240
author testing but it has a way to

00:17:58,310 --> 00:18:04,870
segment these which is useful for

00:18:02,240 --> 00:18:07,760
coverage testing here's an example of

00:18:04,870 --> 00:18:11,900
segmented testing this is what we do in

00:18:07,760 --> 00:18:14,780
for moose where we have four different

00:18:11,900 --> 00:18:16,400
things configured in the matrix that are

00:18:14,780 --> 00:18:19,540
basically the same setup but they're

00:18:16,400 --> 00:18:22,670
picking a different set of tests and

00:18:19,540 --> 00:18:25,070
then we're using that that test files

00:18:22,670 --> 00:18:28,160
and test jobs option in the in the

00:18:25,070 --> 00:18:31,160
proved call so we say there's four

00:18:28,160 --> 00:18:33,890
options and then we pick just out well

00:18:31,160 --> 00:18:36,560
it's not specifically for speed it's

00:18:33,890 --> 00:18:39,880
that it takes too long otherwise if you

00:18:36,560 --> 00:18:41,180
look at the time in here on v4

00:18:39,880 --> 00:18:43,490
altogether

00:18:41,180 --> 00:18:45,620
Travis has a 50 minute time limit on any

00:18:43,490 --> 00:18:49,130
given build if you run over that it just

00:18:45,620 --> 00:18:51,050
cancels it so in this case it would take

00:18:49,130 --> 00:18:53,510
too long if we ran all the tests in one

00:18:51,050 --> 00:18:55,520
run this also does what run them in

00:18:53,510 --> 00:18:58,220
parallel so it can be for speed as well

00:18:55,520 --> 00:18:59,930
the primary motivation for it in this

00:18:58,220 --> 00:19:01,340
case was just to not run over that limit

00:18:59,930 --> 00:19:04,130
because again you can also configure

00:19:01,340 --> 00:19:07,070
these as allowing them to fail so that

00:19:04,130 --> 00:19:10,340
although it will still report on what

00:19:07,070 --> 00:19:11,870
they are it would it would go as soon as

00:19:10,340 --> 00:19:14,180
it got the other results it would market

00:19:11,870 --> 00:19:18,020
as passed or failed before it finished

00:19:14,180 --> 00:19:22,250
to the coverage run which is again good

00:19:18,020 --> 00:19:24,290
for speed on reporting there's another

00:19:22,250 --> 00:19:27,860
helper called local Lib which basically

00:19:24,290 --> 00:19:30,640
just sets up a local Lib separate which

00:19:27,860 --> 00:19:33,800
I mainly just actually I mainly use this

00:19:30,640 --> 00:19:35,670
when I was writing the testing for local

00:19:33,800 --> 00:19:38,610
live itself

00:19:35,670 --> 00:19:40,380
to separate out dependencies and such it

00:19:38,610 --> 00:19:42,120
also there's a bunch of pre-built

00:19:40,380 --> 00:19:45,420
local live directories that have just

00:19:42,120 --> 00:19:46,770
sets of prerequisites and you can

00:19:45,420 --> 00:19:49,050
actually specify that when you're

00:19:46,770 --> 00:19:51,870
picking a module version in the or a

00:19:49,050 --> 00:19:54,690
Perl version in in the list of pearl

00:19:51,870 --> 00:19:58,170
versions you want so all of these things

00:19:54,690 --> 00:20:01,200
kind of are useful on their own but

00:19:58,170 --> 00:20:04,590
there's actually basically they were

00:20:01,200 --> 00:20:06,180
meant to work separately but there's a

00:20:04,590 --> 00:20:08,250
pretty common set up combining these

00:20:06,180 --> 00:20:10,410
that is just useful for a lot of

00:20:08,250 --> 00:20:15,720
projects so I added this other thing

00:20:10,410 --> 00:20:18,480
that's auto mode and it's basically just

00:20:15,720 --> 00:20:21,950
taking a set up that could look like

00:20:18,480 --> 00:20:24,210
this it includes we have we have some

00:20:21,950 --> 00:20:25,790
different build versions it's our pearl

00:20:24,210 --> 00:20:28,830
region's in there that we need to use

00:20:25,790 --> 00:20:32,070
and we have coverage enabled but only

00:20:28,830 --> 00:20:33,870
for one particular build we're testing

00:20:32,070 --> 00:20:35,460
also on bleed with the failures that

00:20:33,870 --> 00:20:37,890
kind of thing so but all of these

00:20:35,460 --> 00:20:39,420
commands that it's using are pretty like

00:20:37,890 --> 00:20:41,760
you're going to I would end up using

00:20:39,420 --> 00:20:45,450
that in a lot of projects so instead we

00:20:41,760 --> 00:20:47,520
simplify that to just one flag pretty

00:20:45,450 --> 00:20:49,710
useful is just kind of a basic base

00:20:47,520 --> 00:20:51,600
level things it can be stuck on anything

00:20:49,710 --> 00:20:57,050
that is gives you a lot more capability

00:20:51,600 --> 00:20:59,370
than what Travis does by default so

00:20:57,050 --> 00:21:02,850
cross-platform testing is another part

00:20:59,370 --> 00:21:05,010
of continuous integration though Travis

00:21:02,850 --> 00:21:07,860
CI runs there's all of their things on

00:21:05,010 --> 00:21:09,570
Ubuntu by default but what about other

00:21:07,860 --> 00:21:13,260
operating systems if you need to test

00:21:09,570 --> 00:21:17,160
elsewhere well they also allow you to

00:21:13,260 --> 00:21:19,440
just run on well its OSX is what you

00:21:17,160 --> 00:21:22,110
have to put in there it's now Mac OS

00:21:19,440 --> 00:21:23,490
because they like changing names but you

00:21:22,110 --> 00:21:25,440
can just list that as a separate

00:21:23,490 --> 00:21:27,410
operating system and then it just is

00:21:25,440 --> 00:21:30,410
another thing in your build matrix

00:21:27,410 --> 00:21:30,410
question

00:21:37,430 --> 00:21:44,010
the question was if there's any way to

00:21:40,230 --> 00:21:47,070
set up testing on FreeBSD I don't know

00:21:44,010 --> 00:21:49,530
of any publicly available continuous

00:21:47,070 --> 00:21:55,020
integration systems that we run on

00:21:49,530 --> 00:22:01,500
people on BSD but there may be one

00:21:55,020 --> 00:22:05,340
that's available I don't know okay is

00:22:01,500 --> 00:22:14,010
that a free service or okay I have not

00:22:05,340 --> 00:22:16,530
used git lab C on so so oh s X is one

00:22:14,010 --> 00:22:18,750
thing to test but usually it ends up not

00:22:16,530 --> 00:22:20,460
for most Perl things it ends up not

00:22:18,750 --> 00:22:24,630
really being that different it doesn't

00:22:20,460 --> 00:22:29,130
end up being a problem but Windows is

00:22:24,630 --> 00:22:35,520
another question Windows is more likely

00:22:29,130 --> 00:22:38,550
to cause problems so there is another

00:22:35,520 --> 00:22:41,930
another service that you can do Windows

00:22:38,550 --> 00:22:44,730
testing on which is called app there and

00:22:41,930 --> 00:22:49,740
it's very similar in a lot of ways to

00:22:44,730 --> 00:22:51,510
how you use Travis but it's run on

00:22:49,740 --> 00:22:54,720
Windows it's actually it's more designed

00:22:51,510 --> 00:22:57,800
for using doing like dotnet projects it

00:22:54,720 --> 00:23:02,090
has a lot of things for dealing with the

00:22:57,800 --> 00:23:05,370
Microsoft Visual C compiler stuff and

00:23:02,090 --> 00:23:06,750
handling all of those packages but you

00:23:05,370 --> 00:23:10,500
can also just kind of write arbitrary

00:23:06,750 --> 00:23:12,750
scripts that are run and use those for

00:23:10,500 --> 00:23:16,710
testing so here's an example of using

00:23:12,750 --> 00:23:19,170
glue and as we do I do testing on that

00:23:16,710 --> 00:23:20,940
to make sure it works and we're testing

00:23:19,170 --> 00:23:24,030
on a number of different perversions and

00:23:20,940 --> 00:23:26,160
some of them aren't working because the

00:23:24,030 --> 00:23:27,350
thing that I used to pick Pro versions

00:23:26,160 --> 00:23:29,850
doesn't work right now

00:23:27,350 --> 00:23:31,860
because they're checking they've changed

00:23:29,850 --> 00:23:34,110
a thing so it's checking certificates on

00:23:31,860 --> 00:23:35,880
the files and these prepackaged

00:23:34,110 --> 00:23:40,430
perversions don't have the right

00:23:35,880 --> 00:23:40,430
certificate so that's unfixed that yet

00:23:40,480 --> 00:23:45,080
what you get for build output is again

00:23:42,950 --> 00:23:47,360
pretty similar this is just these are

00:23:45,080 --> 00:23:49,490
just the commands that I have set up in

00:23:47,360 --> 00:23:51,200
the to run and it's just running our

00:23:49,490 --> 00:23:57,409
test the same as they would anywhere

00:23:51,200 --> 00:24:00,049
else and this is again can be they act

00:23:57,409 --> 00:24:03,620
on app there they have a full UI you can

00:24:00,049 --> 00:24:06,139
control everything through their UI but

00:24:03,620 --> 00:24:08,360
I prefer to go with the approach similar

00:24:06,139 --> 00:24:09,980
to Travis where you use a yamo file to

00:24:08,360 --> 00:24:13,580
specify and specify everything in that

00:24:09,980 --> 00:24:15,710
this is what I'm using for MU we're

00:24:13,580 --> 00:24:17,929
specifying the number again we have a

00:24:15,710 --> 00:24:20,269
build matrix so where we want to test it

00:24:17,929 --> 00:24:22,490
and then we have some commands and of

00:24:20,269 --> 00:24:24,230
course because this is the way I do

00:24:22,490 --> 00:24:26,600
things I wrote a little helper thing

00:24:24,230 --> 00:24:29,840
that kind of does the switching for me

00:24:26,600 --> 00:24:32,899
of the different parole types you choose

00:24:29,840 --> 00:24:34,159
I still haven't decided if I want to

00:24:32,899 --> 00:24:36,230
package that in anyway right now it's

00:24:34,159 --> 00:24:37,909
just sitting in the move repository but

00:24:36,230 --> 00:24:39,549
it basically handles switching between

00:24:37,909 --> 00:24:41,750
the different listed curl types and

00:24:39,549 --> 00:24:44,419
trying to use the different versions of

00:24:41,750 --> 00:24:47,269
strawberry Perl which again is currently

00:24:44,419 --> 00:24:50,510
not working due to packaging issues of

00:24:47,269 --> 00:24:56,870
the what's available on I forget what

00:24:50,510 --> 00:24:59,659
the what the service is but it's a

00:24:56,870 --> 00:25:06,279
Windows distribution system that you can

00:24:59,659 --> 00:25:09,590
install things from the command yes so

00:25:06,279 --> 00:25:13,100
if you're interested in this kind of

00:25:09,590 --> 00:25:13,309
thing a lot of good examples of where to

00:25:13,100 --> 00:25:17,870
look

00:25:13,309 --> 00:25:20,570
how to how to configure it are we use

00:25:17,870 --> 00:25:23,570
this in mousse again we've the coverage

00:25:20,570 --> 00:25:26,149
there and with the different the

00:25:23,570 --> 00:25:28,519
different test partitions to get that

00:25:26,149 --> 00:25:32,000
all split out I use this in move which

00:25:28,519 --> 00:25:34,220
is kind of where I started out with

00:25:32,000 --> 00:25:36,970
trying to do all this testing across

00:25:34,220 --> 00:25:40,750
many different versions beak and again a

00:25:36,970 --> 00:25:44,029
test move on five six because yeah oh

00:25:40,750 --> 00:25:47,179
and mousse again is using jacilla so on

00:25:44,029 --> 00:25:49,820
that case we want again all of the

00:25:47,179 --> 00:25:53,389
handling of getting just having it

00:25:49,820 --> 00:25:55,609
configured by a distiller but test

00:25:53,389 --> 00:25:59,509
on five eight and five ten and five

00:25:55,609 --> 00:26:01,399
twelve role tiny is an example of just a

00:25:59,509 --> 00:26:02,659
really simple one it basically is just

00:26:01,399 --> 00:26:04,759
the auto mode and that's it

00:26:02,659 --> 00:26:09,379
but again testing on five six because

00:26:04,759 --> 00:26:12,559
yeah meta Sipan web we use this and that

00:26:09,379 --> 00:26:16,639
has a more complicated one on meta Sipan

00:26:12,559 --> 00:26:19,849
web there is we use carton for

00:26:16,639 --> 00:26:22,279
deployment and it has we so we have it

00:26:19,849 --> 00:26:25,039
set up to run the build bolt in of

00:26:22,279 --> 00:26:27,349
carton in deploy mode and also not in

00:26:25,039 --> 00:26:29,859
deploy mode so we get a view of if we

00:26:27,349 --> 00:26:31,429
use the exact same the snapshot of

00:26:29,859 --> 00:26:33,709
prerequisites that it would last

00:26:31,429 --> 00:26:35,419
installed with and test with that just

00:26:33,709 --> 00:26:37,459
to make sure yes it works and we can

00:26:35,419 --> 00:26:39,769
deploy it but we also have a build run

00:26:37,459 --> 00:26:41,329
not using that so it gets all the latest

00:26:39,769 --> 00:26:43,969
versions of everything and we test

00:26:41,329 --> 00:26:45,649
against that just so that we know where

00:26:43,969 --> 00:26:49,820
we're going to be in the future when we

00:26:45,649 --> 00:26:51,829
next update the snapshot I use this in

00:26:49,820 --> 00:26:53,899
local Lib where again I have to be very

00:26:51,829 --> 00:26:55,999
careful with the local Lib project about

00:26:53,899 --> 00:26:58,579
prerequisites and not using any

00:26:55,999 --> 00:27:00,549
basically so have it making sure that

00:26:58,579 --> 00:27:02,989
most prerequisites are not installed

00:27:00,549 --> 00:27:04,879
including the base tool chain stuff

00:27:02,989 --> 00:27:08,149
which is usually things you upgrade

00:27:04,879 --> 00:27:10,999
first like X utils make maker I need to

00:27:08,149 --> 00:27:12,709
do testing on basically whatever shift

00:27:10,999 --> 00:27:18,649
with Perl and make sure that that works

00:27:12,709 --> 00:27:21,950
and never upgrade it and another thing

00:27:18,649 --> 00:27:24,679
here is DB IX class d bi X class does

00:27:21,950 --> 00:27:27,320
not use any of my stuff it has a totally

00:27:24,679 --> 00:27:31,969
different thing done by Reva sushi and

00:27:27,320 --> 00:27:33,649
it is very extensive there's you because

00:27:31,969 --> 00:27:36,769
of the the nature this you can kind of

00:27:33,649 --> 00:27:39,349
do whatever you want with these I have a

00:27:36,769 --> 00:27:41,179
particular way that I work the helpers

00:27:39,349 --> 00:27:43,039
things that I've developed are kind of

00:27:41,179 --> 00:27:47,019
meant to be easy to use at a lot of

00:27:43,039 --> 00:27:49,820
places with DV IX class it has many more

00:27:47,019 --> 00:27:52,609
very kind of deep control over things

00:27:49,820 --> 00:27:54,679
and a lot more information reporting to

00:27:52,609 --> 00:27:56,629
make sure that it has more accurate

00:27:54,679 --> 00:27:58,909
information and is able to test in many

00:27:56,629 --> 00:28:02,569
different combinations of things that

00:27:58,909 --> 00:28:04,429
have been problems in the past so if

00:28:02,569 --> 00:28:06,540
that's definitely a setup worth looking

00:28:04,429 --> 00:28:08,520
at it's actually also pretty well

00:28:06,540 --> 00:28:10,530
documented which is impressive for a

00:28:08,520 --> 00:28:16,560
bunch of Vash scripts for doing

00:28:10,530 --> 00:28:18,630
continuous integration set up so this

00:28:16,560 --> 00:28:20,970
was this is just some links we have

00:28:18,630 --> 00:28:22,500
Travis CI and app there are the two main

00:28:20,970 --> 00:28:30,930
continuous integration things that I've

00:28:22,500 --> 00:28:31,780
used and and that's that's all I have if

00:28:30,930 --> 00:28:39,479
there's any questions

00:28:31,780 --> 00:28:39,479
[Applause]

00:28:50,330 --> 00:28:59,750
um travis has pretty good documentation

00:28:55,309 --> 00:29:01,250
about how their what to put in the

00:28:59,750 --> 00:29:03,169
yellow file and how to configure that

00:29:01,250 --> 00:29:04,940
and there's a lot more stuff that I

00:29:03,169 --> 00:29:08,870
didn't cover here about what what it can

00:29:04,940 --> 00:29:10,490
do so that's the main source of

00:29:08,870 --> 00:29:14,630
information about that side of things

00:29:10,490 --> 00:29:25,059
and the rest of it is all Perl stuff

00:29:14,630 --> 00:29:25,059
that I've picked up along the way yeah

00:29:33,160 --> 00:29:38,230
the document I mean the documentation

00:29:35,080 --> 00:29:39,940
covers it covers although like how to

00:29:38,230 --> 00:29:41,200
actually set up the build the

00:29:39,940 --> 00:29:43,960
unfortunate thing with that is usually

00:29:41,200 --> 00:29:46,150
the the information you need just like

00:29:43,960 --> 00:29:48,220
it's if information about the machines

00:29:46,150 --> 00:29:50,650
or things like that that you don't have

00:29:48,220 --> 00:29:53,400
unless you kind of search for it on the

00:29:50,650 --> 00:29:53,400
machines themselves

00:30:09,950 --> 00:30:18,919
um we we don't uh I mean we could

00:30:17,029 --> 00:30:21,289
honestly we like we have some

00:30:18,919 --> 00:30:22,429
communication with Travis but not about

00:30:21,289 --> 00:30:25,279
that

00:30:22,429 --> 00:30:29,389
they're the seem pretty approachable is

00:30:25,279 --> 00:30:34,070
my is my understanding as far as when I

00:30:29,389 --> 00:30:36,049
do this like I just let me the thing is

00:30:34,070 --> 00:30:38,029
the machines have Pro brew on them so

00:30:36,049 --> 00:30:39,860
that's basically a lot of what I'm doing

00:30:38,029 --> 00:30:42,200
with it is they just install another

00:30:39,860 --> 00:30:51,490
pearl and so at that point you have kind

00:30:42,200 --> 00:30:51,490
of complete control any other questions

00:30:55,300 --> 00:30:57,900
yeah

00:31:02,490 --> 00:31:06,920
yeah yeah

00:31:11,960 --> 00:31:14,590
yes

00:31:15,790 --> 00:31:21,050
yes

00:31:18,420 --> 00:31:21,050
yes

00:31:28,200 --> 00:31:36,390
yeah well that's yes it does do that for

00:31:31,809 --> 00:31:38,919
you for each system and actually

00:31:36,390 --> 00:31:40,690
basically you probably shouldn't carry

00:31:38,919 --> 00:31:43,809
it's not like the amount of time that

00:31:40,690 --> 00:31:51,970
takes is usually a couple minutes anyway

00:31:43,809 --> 00:31:53,620
like it doesn't well usually what will

00:31:51,970 --> 00:31:56,260
end up happening is it will pick one of

00:31:53,620 --> 00:31:59,890
Travis's pre-built pearls which already

00:31:56,260 --> 00:32:01,270
have distiller so it'll only it'll only

00:31:59,890 --> 00:32:04,240
need to upgrade the things that are

00:32:01,270 --> 00:32:06,870
listed as a distilled version

00:32:04,240 --> 00:32:11,169
prerequisites in your design ayat cetera

00:32:06,870 --> 00:32:13,179
so that's why it ends up ending it often

00:32:11,169 --> 00:32:15,429
ends up being faster because of the

00:32:13,179 --> 00:32:17,650
pearlitic picks for that it only takes

00:32:15,429 --> 00:32:19,539
like a minute or two to get those and

00:32:17,650 --> 00:32:21,730
then it goes to your normal testing and

00:32:19,539 --> 00:32:23,909
does that takes a little longer it needs

00:32:21,730 --> 00:32:23,909
to

00:32:31,779 --> 00:32:34,469
Yuni

00:32:36,410 --> 00:32:38,470
you

00:32:38,630 --> 00:32:41,200
yeah

00:32:52,360 --> 00:32:56,220
sorry I'm not quite clear on the book

00:32:59,670 --> 00:33:06,760
yes what the way that works is there's I

00:33:03,910 --> 00:33:11,470
have a script that he's called a test

00:33:06,760 --> 00:33:14,290
jobs or sorry is test files and it

00:33:11,470 --> 00:33:16,270
basically just does find on your T

00:33:14,290 --> 00:33:18,670
directory it so it finds all of the

00:33:16,270 --> 00:33:21,549
tests in there and then splits them up

00:33:18,670 --> 00:33:24,280
based on from in this case you're in

00:33:21,549 --> 00:33:25,630
Lucis case it splits them in for because

00:33:24,280 --> 00:33:28,120
it's configured to split them in four

00:33:25,630 --> 00:33:30,750
and then it picks the first or fourth or

00:33:28,120 --> 00:33:33,460
etc and it only runs that set of tests

00:33:30,750 --> 00:33:37,500
it just specifies that list of tests to

00:33:33,460 --> 00:33:37,500
prove what it went to set it to run them

00:33:48,960 --> 00:33:51,529
yeah

00:33:59,380 --> 00:34:08,720
I'm not I'm not sure if there's any like

00:34:04,760 --> 00:34:12,230
useful way to do that aside from

00:34:08,720 --> 00:34:15,890
obviously picking out figuring out the

00:34:12,230 --> 00:34:18,800
failure and writing a test for it the

00:34:15,890 --> 00:34:20,780
the use case for C pen testers versus

00:34:18,800 --> 00:34:25,040
continuous integration often ends up

00:34:20,780 --> 00:34:28,070
being different even though with with

00:34:25,040 --> 00:34:33,010
these tools you can get coverage on you

00:34:28,070 --> 00:34:36,680
know Linux Mac and Windows and

00:34:33,010 --> 00:34:39,980
apparently BSP and such all of that the

00:34:36,680 --> 00:34:42,140
actual the different systems you'll get

00:34:39,980 --> 00:34:45,110
reports for on C pen testers are often

00:34:42,140 --> 00:34:47,030
more diverse or more strange I get a lot

00:34:45,110 --> 00:34:49,580
of C pen testers and results that I just

00:34:47,030 --> 00:34:54,710
can't fix because it's just like Perl is

00:34:49,580 --> 00:34:58,130
broken so the the actual results you get

00:34:54,710 --> 00:34:59,600
are often just more diverse in a

00:34:58,130 --> 00:35:04,250
different way than is easy to qualify

00:34:59,600 --> 00:35:06,260
for this use case although I do like I

00:35:04,250 --> 00:35:08,060
say I do have a setup for picking

00:35:06,260 --> 00:35:09,470
different build flags for Perl that's

00:35:08,060 --> 00:35:13,070
often one of the things that becomes

00:35:09,470 --> 00:35:15,080
strange with access code and such if you

00:35:13,070 --> 00:35:17,540
have like difference there are many

00:35:15,080 --> 00:35:20,170
build flags that can make a difference

00:35:17,540 --> 00:35:20,170
in how those work

00:35:28,720 --> 00:35:38,589
oh if it bill if a having a build a

00:35:33,060 --> 00:35:40,690
bleed build fail send a ticket to a like

00:35:38,589 --> 00:35:44,670
pearl bug saying that it's breaking

00:35:40,690 --> 00:35:47,339
bleed or bleed is breaking this code I

00:35:44,670 --> 00:35:51,280
wouldn't want to do that automatically

00:35:47,339 --> 00:35:53,230
because of the likelihood that just like

00:35:51,280 --> 00:35:55,150
if bleed is broken at some point and

00:35:53,230 --> 00:35:56,950
then you get a test a result saying

00:35:55,150 --> 00:35:58,780
bleed broke this module ones like no

00:35:56,950 --> 00:36:03,490
really just isn't working right now

00:35:58,780 --> 00:36:09,910
which doesn't happen often but it can so

00:36:03,490 --> 00:36:11,260
and it's also although I just I wouldn't

00:36:09,910 --> 00:36:14,589
trust doing that automatically and also

00:36:11,260 --> 00:36:16,780
it seems a little like it wouldn't be it

00:36:14,589 --> 00:36:18,640
wouldn't provide enough information the

00:36:16,780 --> 00:36:20,530
nature of things like this is usually

00:36:18,640 --> 00:36:25,839
your testing like as you push commits

00:36:20,530 --> 00:36:29,640
and I don't know it doesn't seem like it

00:36:25,839 --> 00:36:29,640
would work out pretty particularly well

00:36:31,520 --> 00:36:34,520
question

00:36:41,410 --> 00:36:49,670
yeah you could you basically if you can

00:36:45,080 --> 00:36:53,570
list in the Travis UML file a directory

00:36:49,670 --> 00:36:57,200
to cache and then for that for that like

00:36:53,570 --> 00:36:59,270
matrix entry it will store that Travis

00:36:57,200 --> 00:37:01,430
themselves will store that and restore

00:36:59,270 --> 00:37:03,859
the next time it runs a test so that you

00:37:01,430 --> 00:37:09,170
can have your prerequisites keep them

00:37:03,859 --> 00:37:13,250
there and not have to install everything

00:37:09,170 --> 00:37:15,200
again there is some stuff that I want to

00:37:13,250 --> 00:37:17,630
do to make that work a little better in

00:37:15,200 --> 00:37:24,290
terms of what I do in the helpers but I

00:37:17,630 --> 00:37:26,470
have not at this time done that anything

00:37:24,290 --> 00:37:26,470
else

00:37:35,000 --> 00:37:37,780
I don't

00:37:41,290 --> 00:37:49,290
it's associated with the repository and

00:37:43,720 --> 00:37:49,290
the and the matrix entry basically

00:37:57,920 --> 00:38:05,739
no other questions

00:37:59,530 --> 00:38:05,739

YouTube URL: https://www.youtube.com/watch?v=YDmkw_G9BEg


