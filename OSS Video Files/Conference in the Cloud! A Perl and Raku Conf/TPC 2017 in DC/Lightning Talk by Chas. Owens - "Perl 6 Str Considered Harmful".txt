Title: Lightning Talk by Chas. Owens - "Perl 6 Str Considered Harmful"
Publication date: 2017-06-23
Playlist: TPC 2017 in DC
Description: 
	
Captions: 
	00:00:00,030 --> 00:00:07,200
I'm Jocelyn's and I bug the 406

00:00:03,570 --> 00:00:09,480
developers ah so this is pro six

00:00:07,200 --> 00:00:11,639
considered harmful because I consider

00:00:09,480 --> 00:00:12,780
everything harmful it's not actually

00:00:11,639 --> 00:00:15,480
really harmful you just have to be

00:00:12,780 --> 00:00:16,470
careful so I had this problem I have

00:00:15,480 --> 00:00:18,690
this config file

00:00:16,470 --> 00:00:21,240
it's got SFTP example calm but

00:00:18,690 --> 00:00:23,730
example.com wants it to be called

00:00:21,240 --> 00:00:25,529
transfer comm instead and I have like a

00:00:23,730 --> 00:00:28,289
hundred of these files and I need to

00:00:25,529 --> 00:00:30,900
mung them probably I'd reached a parole

00:00:28,289 --> 00:00:33,000
on the command line and replace it but

00:00:30,900 --> 00:00:34,829
hey I'm learning Perl 6 at the moment

00:00:33,000 --> 00:00:37,469
this is a good opportunity to play with

00:00:34,829 --> 00:00:40,020
it so I go over to rosetta code and I

00:00:37,469 --> 00:00:43,260
say ok I've got this Perl code that I

00:00:40,020 --> 00:00:46,110
know how to write in pro 5 here's how I

00:00:43,260 --> 00:00:50,730
can write it in Perl 6 let's try this oh

00:00:46,110 --> 00:00:54,300
my god it worked the first time transfer

00:00:50,730 --> 00:00:58,559
example.com everything's right alright

00:00:54,300 --> 00:01:00,239
let's test this it doesn't work is the

00:00:58,559 --> 00:01:03,359
hostname wrong no no the hostname is

00:01:00,239 --> 00:01:06,000
wrong so server down the server's up can

00:01:03,359 --> 00:01:09,600
I log in by hand yeah let's go back yeah

00:01:06,000 --> 00:01:12,990
well that stuff looks right what's going

00:01:09,600 --> 00:01:16,950
on so finally get this what's going on

00:01:12,990 --> 00:01:20,430
here wait a second this is user in lab

00:01:16,950 --> 00:01:26,430
this Y is user changing it's the same

00:01:20,430 --> 00:01:30,299
value what day's going in here I only

00:01:26,430 --> 00:01:38,250
said target a transfer they're the same

00:01:30,299 --> 00:01:40,829
am i insane No Pro strings are nfg what

00:01:38,250 --> 00:01:42,360
is nfg it does not matter because that's

00:01:40,829 --> 00:01:44,640
not related to what's going on here

00:01:42,360 --> 00:01:49,860
except for the fact that NFTE requires

00:01:44,640 --> 00:01:53,640
NFC what is NFC this is the composed

00:01:49,860 --> 00:01:57,710
normal form so that's the word resume

00:01:53,640 --> 00:02:01,110
written three different ways one

00:01:57,710 --> 00:02:05,670
unnormalized it has E and combining

00:02:01,110 --> 00:02:08,670
acute and ie acute NFC requires it to be

00:02:05,670 --> 00:02:12,080
scrunched together both as a acute any

00:02:08,670 --> 00:02:15,080
acute an FD the decomposed form

00:02:12,080 --> 00:02:18,860
requires it to be e combining acute and

00:02:15,080 --> 00:02:20,630
E combining acute so the practical

00:02:18,860 --> 00:02:22,640
upshot of this is if you read a nun

00:02:20,630 --> 00:02:25,940
normalized file into a Perl 6 string

00:02:22,640 --> 00:02:27,230
some of your data may be thrown away and

00:02:25,940 --> 00:02:30,320
the output will contain the same

00:02:27,230 --> 00:02:33,050
graphene's the official answer if you

00:02:30,320 --> 00:02:36,500
don't want this is that there are three

00:02:33,050 --> 00:02:39,860
levels of string like things there are

00:02:36,500 --> 00:02:45,860
bucks for bytes you need for code points

00:02:39,860 --> 00:02:47,840
and strings for graphing but you can't

00:02:45,860 --> 00:02:51,110
currently read a file into a uni and

00:02:47,840 --> 00:02:53,600
even if you could there's almost no

00:02:51,110 --> 00:02:55,280
methods defined on it and even if the

00:02:53,600 --> 00:02:56,810
world methods I want to work at the

00:02:55,280 --> 00:03:01,010
graphene level not at the code point

00:02:56,810 --> 00:03:07,040
level the real question here is who do I

00:03:01,010 --> 00:03:12,590
blame example.com is doing the wrong

00:03:07,040 --> 00:03:15,350
thing here the string andrey with an e

00:03:12,590 --> 00:03:17,870
acute or the string andrey with E and

00:03:15,350 --> 00:03:21,940
combining acute are supposed to compare

00:03:17,870 --> 00:03:26,510
as equal that's what Unicode says

00:03:21,940 --> 00:03:28,640
they're not doing that they're bad but

00:03:26,510 --> 00:03:29,870
it's also easily predictable that we'll

00:03:28,640 --> 00:03:31,489
have to deal with broken Unicode

00:03:29,870 --> 00:03:32,330
implementations they're outside of our

00:03:31,489 --> 00:03:35,930
power to fix

00:03:32,330 --> 00:03:37,040
I can't go to example.com beat on them

00:03:35,930 --> 00:03:39,170
until they start doing the right thing

00:03:37,040 --> 00:03:42,050
with Unicode I have to work with them

00:03:39,170 --> 00:03:47,300
and Perl 6 should not be hamstringing us

00:03:42,050 --> 00:03:49,670
when we have to do this so things like

00:03:47,300 --> 00:03:52,130
the Apple file system where file names

00:03:49,670 --> 00:03:55,370
are now a bag of bytes and are not in

00:03:52,130 --> 00:04:00,260
any way normalized have caused the Perl

00:03:55,370 --> 00:04:03,920
6 developers to create utf-8 C 8 which

00:04:00,260 --> 00:04:05,920
is for compatibility or something I

00:04:03,920 --> 00:04:10,940
can't remember what the C stands for

00:04:05,920 --> 00:04:15,500
this is an idea that will allow you to

00:04:10,940 --> 00:04:17,269
work with unnormalized data but it's

00:04:15,500 --> 00:04:20,090
horrible if you actually want to work

00:04:17,269 --> 00:04:23,000
with it because what happens is if

00:04:20,090 --> 00:04:25,030
you're trying to read it from a file the

00:04:23,000 --> 00:04:26,470
file has to be read in as a binary

00:04:25,030 --> 00:04:28,690
whole thing we're actually part of it

00:04:26,470 --> 00:04:31,450
just as binary then you have to decode

00:04:28,690 --> 00:04:35,350
that explicitly in this compatibility

00:04:31,450 --> 00:04:36,910
mode you also have to encode it using

00:04:35,350 --> 00:04:39,730
that same encoding when you write it

00:04:36,910 --> 00:04:41,890
back or it will be complete garbage and

00:04:39,730 --> 00:04:43,510
what it actually does is any byte that

00:04:41,890 --> 00:04:47,940
can't be brought in without loss or is

00:04:43,510 --> 00:04:54,190
an invalid byte in utf-8 winds up being

00:04:47,940 --> 00:04:57,580
the character ten fffd an X character

00:04:54,190 --> 00:05:01,450
and then the to unit that you two hex

00:04:57,580 --> 00:05:04,150
code values for the low byte or the low

00:05:01,450 --> 00:05:07,960
nibble and the high nibble so in the

00:05:04,150 --> 00:05:12,610
case of E combining acute it becomes the

00:05:07,960 --> 00:05:16,540
string e question mark x CC question

00:05:12,610 --> 00:05:19,680
mark X 81 that's not pleasant to write

00:05:16,540 --> 00:05:19,680
reg X's against at all

00:05:21,190 --> 00:05:27,040
that is just my warning to you if you're

00:05:24,100 --> 00:05:29,220
doing 406 this is the state of things as

00:05:27,040 --> 00:05:29,220
they are

00:05:29,250 --> 00:05:32,379

YouTube URL: https://www.youtube.com/watch?v=_zJ-2VXpUyM


