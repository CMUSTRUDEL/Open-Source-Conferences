Title: Matt S. Trout - "ES6: Almost An Acceptable Perl5"
Publication date: 2017-06-21
Playlist: TPC 2017 in DC
Description: 
	If you haven't been paying attention to javascript (and I can entirely understand why you might prefer not to), things have changed quite amazingly over the last few years.

Ok, they got 'use strict' years ago - but now they've added 'let', which is basically 'my', anonymous function declaration syntax that won't give you RSI, a class keyword, and more.

Plus annotations now let you make all sorts of trouble, and the tooling to transpile to Olde JS is mostly comprehensible and no longer replaced by something completely different every two weeks.

So, clearly, the only sensible thing to do was to try and write ES6 in the same style I write perl5, and see how far I managed to get.

Come to this talk and you'll find out.


Matt S Trout was thrust into Perl at the tender age of seventeen by a backup accident. Two weeks later he realised that he was in love with the language and has been happily using it for systems automation, network, web and database development ever since.

He is co-maintainer of the Catalyst web framework (and co-author of The Definitive Guide to Catalyst), the creator of the DBIx::Class ORM, and a core team member for the Moose metaprotocol and object system, as well as contributing to assorted other CPAN projects.

Matt spends his days leading the technical team at Shadowcat Systems Limited, an open source consultancy specialising in Catalyst, Perl applications deployment and systems architecture. Shadowcat sponsors web, source repository and mailing list hosting for Catalyst, DBIx::Class and a large number of associated projects, and creates and releases open source code both internally and on behalf of its clients.
Captions: 
	00:00:00,380 --> 00:00:09,719
so um for those of you ones where a

00:00:06,020 --> 00:00:11,340
Shadowcat witches is won by a myself and

00:00:09,719 --> 00:00:14,549
Mark Keating with the assistant to the

00:00:11,340 --> 00:00:18,270
sorted C pen contributors insane enough

00:00:14,549 --> 00:00:21,210
to work for me um there is a point to

00:00:18,270 --> 00:00:22,560
this it's not just an advert or web you

00:00:21,210 --> 00:00:24,119
know the company did pay for my plane

00:00:22,560 --> 00:00:27,810
ticket so I feel obliged to at least

00:00:24,119 --> 00:00:29,789
mention the name wants but we're

00:00:27,810 --> 00:00:33,300
basically commercial support for C plan

00:00:29,789 --> 00:00:35,730
staff consultancy I have two sorts of

00:00:33,300 --> 00:00:37,730
customers startups and people with lots

00:00:35,730 --> 00:00:42,300
of revenue and even more technical debt

00:00:37,730 --> 00:00:43,829
I actually quite enjoy refactoring the

00:00:42,300 --> 00:00:47,910
things that everybody's just scared to

00:00:43,829 --> 00:00:50,039
touch but I am kind of a masochist so

00:00:47,910 --> 00:00:52,770
this is well where the motto Co where

00:00:50,039 --> 00:00:54,480
the motto comes from mostly because I

00:00:52,770 --> 00:00:56,370
hire from people who I've already worked

00:00:54,480 --> 00:00:58,350
with on sleep and stuff because that

00:00:56,370 --> 00:00:59,940
means we already know the most important

00:00:58,350 --> 00:01:07,260
thing which is that they can tolerate

00:00:59,940 --> 00:01:08,700
dealing with me so we're not helping out

00:01:07,260 --> 00:01:11,369
with development staff and with

00:01:08,700 --> 00:01:15,030
deployment staff and with at welcome

00:01:11,369 --> 00:01:17,130
okay um do might apply to the legacy

00:01:15,030 --> 00:01:21,210
code mostly what I mean by doomed is

00:01:17,130 --> 00:01:23,580
front-end development these days if

00:01:21,210 --> 00:01:26,549
you're doing any sort of development aid

00:01:23,580 --> 00:01:28,320
that the supporting applications ends up

00:01:26,549 --> 00:01:30,329
being whatever your back-end language is

00:01:28,320 --> 00:01:31,340
plus for crawling horror that is

00:01:30,329 --> 00:01:34,740
front-end

00:01:31,340 --> 00:01:36,990
I have no solution to the problem of CSS

00:01:34,740 --> 00:01:37,920
being horrible my approach to this is

00:01:36,990 --> 00:01:42,030
very simple

00:01:37,920 --> 00:01:44,220
I write HTML 3 with no CSS I put it in

00:01:42,030 --> 00:01:45,810
front of a designer when they stop

00:01:44,220 --> 00:01:51,990
solving they begged me to let them write

00:01:45,810 --> 00:02:00,350
the CSS for me and um but what of course

00:01:51,990 --> 00:02:03,509
the other parties JavaScript ok so um

00:02:00,350 --> 00:02:07,079
the single most annoying thing about

00:02:03,509 --> 00:02:09,690
JavaScript classically is scoping um you

00:02:07,079 --> 00:02:11,550
know it's a prototype based system most

00:02:09,690 --> 00:02:13,140
people do not have that around

00:02:11,550 --> 00:02:15,000
JAAA scoping even

00:02:13,140 --> 00:02:17,400
even some people are pretty good at

00:02:15,000 --> 00:02:20,700
javascript don't really understand the

00:02:17,400 --> 00:02:23,460
scope and model and I like to pretend I

00:02:20,700 --> 00:02:28,730
mostly do but it still trips me up on

00:02:23,460 --> 00:02:31,380
occasion because it's prototype based so

00:02:28,730 --> 00:02:33,150
you end up with a chain of scopes going

00:02:31,380 --> 00:02:36,690
up and then writing two things will

00:02:33,150 --> 00:02:40,050
create a will right to the entry in the

00:02:36,690 --> 00:02:41,910
prototype um so you can actually get

00:02:40,050 --> 00:02:46,470
this in Perl if you're insane enough to

00:02:41,910 --> 00:02:48,210
want it um it is actually I have found

00:02:46,470 --> 00:02:50,820
sometimes if you're getting confused by

00:02:48,210 --> 00:02:52,980
JavaScript scoping playing with one of

00:02:50,820 --> 00:02:54,990
those from sleep and for a bet and then

00:02:52,980 --> 00:02:57,270
reading the implementation in Perl can

00:02:54,990 --> 00:03:00,120
seriously make it easier to understand

00:02:57,270 --> 00:03:01,980
and the way JavaScript works certainly

00:03:00,120 --> 00:03:03,630
it get help me get as far as pretending

00:03:01,980 --> 00:03:06,930
I knew what I was doing and I'm

00:03:03,630 --> 00:03:09,300
bizarrely and dbi its class schema

00:03:06,930 --> 00:03:11,850
actually sort of works as prototype

00:03:09,300 --> 00:03:13,980
based because I needed to do a hybrid

00:03:11,850 --> 00:03:16,530
class object based thing back when we

00:03:13,980 --> 00:03:20,580
started and to be able to make the class

00:03:16,530 --> 00:03:22,769
dbi compatibility stuff work um let's

00:03:20,580 --> 00:03:26,820
say I regret making search context

00:03:22,769 --> 00:03:28,739
sensitive um well the more but I'm still

00:03:26,820 --> 00:03:30,720
not convinced it was the best idea on

00:03:28,739 --> 00:03:33,030
the other hand it did make it very easy

00:03:30,720 --> 00:03:35,760
to transition people from class DBI over

00:03:33,030 --> 00:03:37,530
to sensible dbi x class without breaking

00:03:35,760 --> 00:03:39,330
their running code basis which was a

00:03:37,530 --> 00:03:42,840
great way to steal users in the early

00:03:39,330 --> 00:03:44,989
days but and so javascript scoping

00:03:42,840 --> 00:03:47,790
mostly you declare stuff with var and

00:03:44,989 --> 00:03:49,200
far creates local variable at which

00:03:47,790 --> 00:03:52,110
point rights are going to hit that one

00:03:49,200 --> 00:03:54,810
and that's great that's that's mostly

00:03:52,110 --> 00:03:57,300
reasonable except if you forget a bar or

00:03:54,810 --> 00:04:01,680
typo something surprise now it's a

00:03:57,300 --> 00:04:03,870
global and you end up dumping stuff all

00:04:01,680 --> 00:04:05,790
over the document object and then

00:04:03,870 --> 00:04:12,239
causing yourself all sorts of bizarre

00:04:05,790 --> 00:04:15,570
bugs however as of es6 and just certain

00:04:12,239 --> 00:04:18,090
things a bit before that you have a

00:04:15,570 --> 00:04:19,680
thing called you strict I black that

00:04:18,090 --> 00:04:20,620
looks a little bit familiar to some of

00:04:19,680 --> 00:04:25,270
you

00:04:20,620 --> 00:04:28,419
um at the thing that's so um you strecht

00:04:25,270 --> 00:04:30,520
will basically go if you want a global

00:04:28,419 --> 00:04:33,160
you need to reference document saying or

00:04:30,520 --> 00:04:35,110
window dot sing explicitly and it will

00:04:33,160 --> 00:04:37,990
actually catch your typos for you I'm

00:04:35,110 --> 00:04:40,630
sorry I am constitutionally incapable of

00:04:37,990 --> 00:04:42,310
enjoying using a language doesn't do

00:04:40,630 --> 00:04:43,330
that because I type a variable name so

00:04:42,310 --> 00:04:45,639
nothing

00:04:43,330 --> 00:04:48,550
I want it caught at compile time not

00:04:45,639 --> 00:04:51,250
later one of the fascinating things

00:04:48,550 --> 00:04:54,310
about it is it is actually just a

00:04:51,250 --> 00:04:57,130
strange but special gauged by jerk by

00:04:54,310 --> 00:05:00,940
own JavaScript compiles and you look at

00:04:57,130 --> 00:05:03,910
this music that's completely info um but

00:05:00,940 --> 00:05:06,220
actually it's really clever because the

00:05:03,910 --> 00:05:08,590
reason they do it that way is it means

00:05:06,220 --> 00:05:11,350
on any job is quick runtime doesn't

00:05:08,590 --> 00:05:13,440
support you strict it's just a void

00:05:11,350 --> 00:05:17,470
contract string that gets thrown away

00:05:13,440 --> 00:05:19,270
which is is if it's a piece of back

00:05:17,470 --> 00:05:24,550
compat hackery that I think is worth you

00:05:19,270 --> 00:05:28,900
Perl like it um so um the other thing

00:05:24,550 --> 00:05:32,440
about var is its function libel scoping

00:05:28,900 --> 00:05:36,419
I again I do not like function level

00:05:32,440 --> 00:05:38,620
scoping I might first do sort of and

00:05:36,419 --> 00:05:41,620
significant languages as I went from

00:05:38,620 --> 00:05:45,700
hobbyists to people being insane enough

00:05:41,620 --> 00:05:50,050
to pay me to do this um were pel 5 and

00:05:45,700 --> 00:05:54,550
Lisp so not having lexical scoping

00:05:50,050 --> 00:05:58,720
drives me round the twist because for

00:05:54,550 --> 00:05:59,349
example she do this so that's iterating

00:05:58,720 --> 00:06:02,110
over an array

00:05:59,349 --> 00:06:04,990
they'll think all backed out of them not

00:06:02,110 --> 00:06:07,330
that's completely wrong because X is

00:06:04,990 --> 00:06:08,950
function level scoped so you get the

00:06:07,330 --> 00:06:11,050
same X every time so all of your

00:06:08,950 --> 00:06:14,620
closures are closed over the last item

00:06:11,050 --> 00:06:17,400
in the list this is not hilarious to

00:06:14,620 --> 00:06:20,979
debug when you don't know that happens

00:06:17,400 --> 00:06:22,720
so what you do is you build the closure

00:06:20,979 --> 00:06:25,090
with another closure insider and then

00:06:22,720 --> 00:06:26,700
you feed the value in by executing the

00:06:25,090 --> 00:06:28,960
outer closure to build the inner closure

00:06:26,700 --> 00:06:30,420
seriously this is like a recommended

00:06:28,960 --> 00:06:35,620
pattern

00:06:30,420 --> 00:06:39,220
um what what kind of entertains me is

00:06:35,620 --> 00:06:41,920
it's actually the same pattern that you

00:06:39,220 --> 00:06:44,340
getting less referred to okay yeah my

00:06:41,920 --> 00:06:47,470
eyes are bleeding with this book unless

00:06:44,340 --> 00:06:49,780
this is called let over lambda because

00:06:47,470 --> 00:06:54,160
what you can actually do is build lists

00:06:49,780 --> 00:06:57,430
let out of lambda by basically rewriting

00:06:54,160 --> 00:06:58,960
let to be bad but you don't have to

00:06:57,430 --> 00:07:02,580
write it yourself because Lisp is a

00:06:58,960 --> 00:07:05,590
civilized language and in fact there are

00:07:02,580 --> 00:07:08,140
there are tiny let's do just define less

00:07:05,590 --> 00:07:09,190
as a macro on the basis of we can

00:07:08,140 --> 00:07:10,900
optimize that later

00:07:09,190 --> 00:07:14,020
everything else is horribly slow too

00:07:10,900 --> 00:07:16,420
because we're a toilet and the last the

00:07:14,020 --> 00:07:22,660
last toilets I wrote defined left as a

00:07:16,420 --> 00:07:29,230
macro and but es6 again funnily enough

00:07:22,660 --> 00:07:32,890
has lack so you can do that and it

00:07:29,230 --> 00:07:35,260
behaves exactly like my its proper

00:07:32,890 --> 00:07:38,080
lexical scoping it's actually Glock

00:07:35,260 --> 00:07:41,620
scoped it actually closes over things

00:07:38,080 --> 00:07:43,750
properly it's wonderful really and

00:07:41,620 --> 00:07:46,330
there's also a much nicer short syntax

00:07:43,750 --> 00:07:48,720
for closures which I completely forgot

00:07:46,330 --> 00:07:51,880
to give a slide of its own

00:07:48,720 --> 00:07:54,370
so yeah es6 has my new script and this

00:07:51,880 --> 00:07:55,840
bit in and of itself makes it a

00:07:54,370 --> 00:07:57,460
fundamentally better programming

00:07:55,840 --> 00:08:00,970
languages and Python or Ruby from my

00:07:57,460 --> 00:08:02,980
point of view place them explicit is

00:08:00,970 --> 00:08:04,840
better than implicit accept all all will

00:08:02,980 --> 00:08:08,080
just magic variables out of the each or

00:08:04,840 --> 00:08:10,380
every time you make a typo no I don't

00:08:08,080 --> 00:08:13,360
understand either

00:08:10,380 --> 00:08:15,100
but yeah Lucy's we go that that just

00:08:13,360 --> 00:08:18,760
that is enough to make me immensely

00:08:15,100 --> 00:08:26,230
happy um and then then then we get on

00:08:18,760 --> 00:08:27,970
200 so yeah well obviously it's built

00:08:26,230 --> 00:08:30,070
out a prototype chaining just like

00:08:27,970 --> 00:08:34,090
everything else is because that makes

00:08:30,070 --> 00:08:35,860
complete sense um and we're back to most

00:08:34,090 --> 00:08:38,340
people still don't understand prototypes

00:08:35,860 --> 00:08:41,020
and the way they interact with our I

00:08:38,340 --> 00:08:42,370
only very occasionally pretend to

00:08:41,020 --> 00:08:44,470
understand

00:08:42,370 --> 00:08:46,750
so what you have to do is to build a

00:08:44,470 --> 00:08:48,520
constructor you define a function that

00:08:46,750 --> 00:08:51,790
takes some argument set some properties

00:08:48,520 --> 00:08:54,160
on this and then if you want to add

00:08:51,790 --> 00:08:55,990
methods it has a thing called the dot

00:08:54,160 --> 00:08:58,510
prototype that becomes the prototype of

00:08:55,990 --> 00:09:01,480
the object so you basically monkey pack

00:08:58,510 --> 00:09:04,210
stuff into accept I'd scope and to get

00:09:01,480 --> 00:09:07,570
methods and like shockingly this all

00:09:04,210 --> 00:09:09,400
actually works it's very elegant in

00:09:07,570 --> 00:09:11,890
terms of having been a very minimalist

00:09:09,400 --> 00:09:13,360
language I mean the original JavaScript

00:09:11,890 --> 00:09:17,230
was supposed to be a prototype based

00:09:13,360 --> 00:09:20,290
less it should have been less and

00:09:17,230 --> 00:09:22,029
therefore actually had macros honestly

00:09:20,290 --> 00:09:25,570
it would probably have been a lot nicer

00:09:22,029 --> 00:09:27,850
to work with the scoping model but then

00:09:25,570 --> 00:09:29,560
there was this whole stupid marketing

00:09:27,850 --> 00:09:32,470
tie-in so they had to give it a normal

00:09:29,560 --> 00:09:38,080
syntax and then Satan and we've all been

00:09:32,470 --> 00:09:40,029
suffering since and III claimed since

00:09:38,080 --> 00:09:44,800
they bought Java we can now blame Oracle

00:09:40,029 --> 00:09:46,060
for that as well however and of course

00:09:44,800 --> 00:09:48,130
there's this whole thing if you can call

00:09:46,060 --> 00:09:50,440
the function directly or you do new foo

00:09:48,130 --> 00:09:52,180
you should be doing new foo foo

00:09:50,440 --> 00:09:59,200
sometimes works depending on how people

00:09:52,180 --> 00:10:03,190
work and once again

00:09:59,200 --> 00:10:06,760
um es6 makes this substantially less

00:10:03,190 --> 00:10:10,480
unpleasant um if you actually have the

00:10:06,760 --> 00:10:13,230
class keyword class true extends bar

00:10:10,480 --> 00:10:15,970
extends it setting the prototype to bar

00:10:13,230 --> 00:10:17,770
you can write a constructor inside there

00:10:15,970 --> 00:10:20,380
you just declare methods in there

00:10:17,770 --> 00:10:23,140
oh and also es6 class syntax is

00:10:20,380 --> 00:10:25,450
specified to always be operating under

00:10:23,140 --> 00:10:29,530
you strict even if you haven't declared

00:10:25,450 --> 00:10:31,839
it for the rest of the file um kind of

00:10:29,530 --> 00:10:35,680
reminiscent of things like Moops for

00:10:31,839 --> 00:10:39,550
perl 5 so yeah that that really is much

00:10:35,680 --> 00:10:41,190
more civilized I mean under the hood it

00:10:39,550 --> 00:10:44,020
still sets up all of the basic stuff

00:10:41,190 --> 00:10:46,810
it's assuming you're using a transpiler

00:10:44,020 --> 00:10:49,779
to be able to target NES 5 it is

00:10:46,810 --> 00:10:51,910
actually really entertaining to read the

00:10:49,779 --> 00:10:54,250
generated JavaScript and

00:10:51,910 --> 00:10:55,870
honestly I would recommend doing that

00:10:54,250 --> 00:10:58,000
because the more of the generated

00:10:55,870 --> 00:10:59,680
JavaScript you read the better you'll

00:10:58,000 --> 00:11:00,910
understand basic JavaScript for the

00:10:59,680 --> 00:11:06,280
times where you have to still suffer

00:11:00,910 --> 00:11:08,710
through it and a special mention

00:11:06,280 --> 00:11:11,200
although this is not actually ESX it's

00:11:08,710 --> 00:11:14,670
just a library and there is a thing

00:11:11,200 --> 00:11:17,110
called low - and it's called low -

00:11:14,670 --> 00:11:19,350
because JavaScript developers are just

00:11:17,110 --> 00:11:21,850
as fond of terrible puns as we are and

00:11:19,350 --> 00:11:26,410
it's a replacement for an old library

00:11:21,850 --> 00:11:30,430
called underscore at which point you can

00:11:26,410 --> 00:11:32,170
get Map Reduce grap they add things like

00:11:30,430 --> 00:11:34,900
let you rename the import on the way in

00:11:32,170 --> 00:11:38,460
and obviously I'm going to rename Soto

00:11:34,900 --> 00:11:40,990
to grep to annoy the PI foresters and

00:11:38,460 --> 00:11:44,980
also because my fingers cannot remember

00:11:40,990 --> 00:11:48,100
filter and I already have one slight

00:11:44,980 --> 00:11:51,510
annoyance with this stuff which is that

00:11:48,100 --> 00:11:55,380
the syntax is map things to map function

00:11:51,510 --> 00:11:58,270
so it's backwards compared to profile

00:11:55,380 --> 00:12:04,300
guess how many times it says function is

00:11:58,270 --> 00:12:08,350
not an array but I will admit it does

00:12:04,300 --> 00:12:11,740
make a fair amount of sense in the fact

00:12:08,350 --> 00:12:14,560
that a lot of them JavaScript

00:12:11,740 --> 00:12:16,720
collections will provide a dot map

00:12:14,560 --> 00:12:20,710
method that takes to function so it's

00:12:16,720 --> 00:12:22,570
consistent with that like um it screws

00:12:20,710 --> 00:12:23,980
me over on a regular basis because I get

00:12:22,570 --> 00:12:25,840
them the wrong way around I am just

00:12:23,980 --> 00:12:28,840
finally starting to get it right the

00:12:25,840 --> 00:12:30,910
first time occasionally but on the other

00:12:28,840 --> 00:12:33,670
hand it is more consistent and it is

00:12:30,910 --> 00:12:36,700
kind of cool and it does totally work so

00:12:33,670 --> 00:12:38,410
low - is a wonderful thing well worth

00:12:36,700 --> 00:12:39,610
going through the entire Docs for it

00:12:38,410 --> 00:12:41,800
looking at all of the different things

00:12:39,610 --> 00:12:43,270
that are available means you can do some

00:12:41,800 --> 00:12:46,390
very nice and functional programming

00:12:43,270 --> 00:12:48,310
style stuff and you can basically write

00:12:46,390 --> 00:12:52,350
Lisp in JavaScript in the same extent

00:12:48,310 --> 00:12:55,390
that I tend to write Lisp in 12/5 um and

00:12:52,350 --> 00:12:58,120
oh and there's a straight - there

00:12:55,390 --> 00:13:01,020
because I type out a slide line anyway

00:12:58,120 --> 00:13:01,020
um so

00:13:02,690 --> 00:13:07,280
the last time I really wrote JavaScript

00:13:04,820 --> 00:13:09,080
in anger rather than immediately

00:13:07,280 --> 00:13:14,000
delegating it to whichever minion had

00:13:09,080 --> 00:13:17,330
annoyed me most recently I was probably

00:13:14,000 --> 00:13:18,770
eight years ago now and yet the project

00:13:17,330 --> 00:13:21,590
was a startup that was trying to do a

00:13:18,770 --> 00:13:23,180
single page rich web application yo buy

00:13:21,590 --> 00:13:26,090
back in the days when we actually called

00:13:23,180 --> 00:13:27,800
them rich web applications and it was a

00:13:26,090 --> 00:13:31,280
really cool project and really great

00:13:27,800 --> 00:13:33,410
idea it was using the dojo toolkit which

00:13:31,280 --> 00:13:37,040
I think is still going but I've not seen

00:13:33,410 --> 00:13:39,860
anybody using in anger for years I used

00:13:37,040 --> 00:13:44,930
to hang out on their IRC channel which

00:13:39,860 --> 00:13:46,490
II which resulted in the people remember

00:13:44,930 --> 00:13:49,460
there was a thing called comet which was

00:13:46,490 --> 00:13:52,490
basically a sort of standard for doing

00:13:49,460 --> 00:13:55,310
real-time stuff and the officially

00:13:52,490 --> 00:14:00,260
specified protocols for comet was called

00:13:55,310 --> 00:14:01,730
bear that was my fault because I

00:14:00,260 --> 00:14:03,560
happened to be around when the guy who

00:14:01,730 --> 00:14:06,560
invented comet was looking for a name

00:14:03,560 --> 00:14:08,720
for it and I thought getting an English

00:14:06,560 --> 00:14:12,380
referencing and a bad pun on tapestry

00:14:08,720 --> 00:14:13,850
was totally worth it and unfortunately

00:14:12,380 --> 00:14:16,460
for everybody who had to spell Beier

00:14:13,850 --> 00:14:20,450
ever since he thought it was also bad

00:14:16,460 --> 00:14:22,970
but a good bad pun but anyway um I I

00:14:20,450 --> 00:14:24,860
take no credit for any of the actual

00:14:22,970 --> 00:14:28,580
code or specification but you can blame

00:14:24,860 --> 00:14:30,560
me for the man but of course back in

00:14:28,580 --> 00:14:35,660
those days we were totally screwed on

00:14:30,560 --> 00:14:37,520
loading time and we had a couple of

00:14:35,660 --> 00:14:39,140
other developers on the project they

00:14:37,520 --> 00:14:40,640
were both actually competent at

00:14:39,140 --> 00:14:42,860
JavaScript so I left them to actually

00:14:40,640 --> 00:14:44,900
work on the app I'm going to like okay

00:14:42,860 --> 00:14:47,600
we could try and do like full-on

00:14:44,900 --> 00:14:49,280
minification packing whatever one it was

00:14:47,600 --> 00:14:53,000
eight years ago the tools were barely

00:14:49,280 --> 00:14:55,580
there for it and to um perhaps more

00:14:53,000 --> 00:14:57,230
importantly we had a vast number of

00:14:55,580 --> 00:14:59,000
features to implement before release

00:14:57,230 --> 00:15:01,160
date and if they both stopped and spent

00:14:59,000 --> 00:15:04,580
a week on this we would have been

00:15:01,160 --> 00:15:07,700
completely screwed schedule rise so I

00:15:04,580 --> 00:15:09,400
decided that the answer um since I

00:15:07,700 --> 00:15:12,620
couldn't actually help with the features

00:15:09,400 --> 00:15:15,310
was did was to hack wetware in order to

00:15:12,620 --> 00:15:19,060
fix the problem so

00:15:15,310 --> 00:15:20,770
a people am seeing the various funny

00:15:19,060 --> 00:15:26,220
messages that come up while learned the

00:15:20,770 --> 00:15:26,220
game the fins is starting so I

00:15:26,280 --> 00:15:32,470
independently came up with basically the

00:15:28,450 --> 00:15:35,470
same idea I hacked up bit of completely

00:15:32,470 --> 00:15:37,810
low level jst required no libraries that

00:15:35,470 --> 00:15:41,110
just fade it in and fade it out one of a

00:15:37,810 --> 00:15:44,170
random string from a selection and

00:15:41,110 --> 00:15:46,090
basically just kept doing that until the

00:15:44,170 --> 00:15:47,440
rest of the JavaScript finally got there

00:15:46,090 --> 00:15:50,710
at which point it would shut that down

00:15:47,440 --> 00:15:53,290
and bootstrap the application I can only

00:15:50,710 --> 00:15:54,010
remember three of them now loading eye

00:15:53,290 --> 00:15:56,890
candy

00:15:54,010 --> 00:16:02,230
loading mind candy and my absolute

00:15:56,890 --> 00:16:03,730
favorite loading loading messages but

00:16:02,230 --> 00:16:06,310
because it gave people something to look

00:16:03,730 --> 00:16:09,730
at and the sense of progress and because

00:16:06,310 --> 00:16:11,770
it was funny the users went off the

00:16:09,730 --> 00:16:14,530
charts over it like that for the next

00:16:11,770 --> 00:16:16,420
fortnight everybody was going on loading

00:16:14,530 --> 00:16:18,250
is so much better and this is really fun

00:16:16,420 --> 00:16:19,750
and I'm going it's exactly the same

00:16:18,250 --> 00:16:22,990
speed I'm just distracting you so you

00:16:19,750 --> 00:16:24,400
don't notice now but you know time time

00:16:22,990 --> 00:16:29,410
flies when you're giggling at maps

00:16:24,400 --> 00:16:31,810
terrible jokes and this logically would

00:16:29,410 --> 00:16:33,850
make no sense but you know as I'm sure

00:16:31,810 --> 00:16:37,000
we've all noticed humans aren't actually

00:16:33,850 --> 00:16:41,880
that logical and yeah whatever it for

00:16:37,000 --> 00:16:44,380
users we're all happy cool right and

00:16:41,880 --> 00:16:45,760
then I happily retired back to working

00:16:44,380 --> 00:16:47,320
on the backend code and let the

00:16:45,760 --> 00:16:52,090
competent JavaScript people finish the

00:16:47,320 --> 00:16:54,550
features but anyway and so one problem

00:16:52,090 --> 00:17:03,310
that you run into is of course es6 is

00:16:54,550 --> 00:17:08,079
not everywhere sadly so Babel Babel is a

00:17:03,310 --> 00:17:10,170
wonderful thing um what you do is you

00:17:08,079 --> 00:17:14,440
create a dot babel RC to configure it

00:17:10,170 --> 00:17:17,589
empty and install yeh billions of lines

00:17:14,440 --> 00:17:19,810
of JavaScript and then you run that

00:17:17,589 --> 00:17:22,329
command I normally chuck it in a shell

00:17:19,810 --> 00:17:25,449
script and the shell script is usually

00:17:22,329 --> 00:17:27,680
called Babel because I can I suspect

00:17:25,449 --> 00:17:33,200
there is a correct way of doing this

00:17:27,680 --> 00:17:35,300
I'm I am currently focusing on mostly

00:17:33,200 --> 00:17:36,920
not doing the hipster thing I've

00:17:35,300 --> 00:17:38,570
installed a giant boiler plate that you

00:17:36,920 --> 00:17:41,780
don't understand any oven hoping it

00:17:38,570 --> 00:17:43,790
doesn't break so I may be doing certain

00:17:41,780 --> 00:17:46,520
things here in a lower-level way than is

00:17:43,790 --> 00:17:49,370
strictly necessary but it means that I

00:17:46,520 --> 00:17:51,590
actually understand pretty much my

00:17:49,370 --> 00:17:53,240
entire stack and I'm always a lot

00:17:51,590 --> 00:17:57,280
happier in that case because then I can

00:17:53,240 --> 00:18:00,980
simulate in my head when I break it and

00:17:57,280 --> 00:18:02,690
like what one of the most one of the

00:18:00,980 --> 00:18:04,280
most important things I managed to do

00:18:02,690 --> 00:18:06,440
for the people I'm working with is

00:18:04,280 --> 00:18:08,210
people can put a piece of code in front

00:18:06,440 --> 00:18:09,530
of me I'll skim read it and tell them

00:18:08,210 --> 00:18:12,170
where their bogies without actually

00:18:09,530 --> 00:18:14,030
trying to run anything you can't do that

00:18:12,170 --> 00:18:15,170
if you can't simulate in your head and

00:18:14,030 --> 00:18:17,900
you can't do that if you don't

00:18:15,170 --> 00:18:19,520
understand what you do so that's my

00:18:17,900 --> 00:18:21,550
excuse for anything I've done wrong here

00:18:19,520 --> 00:18:24,950
okay

00:18:21,550 --> 00:18:30,340
but so so basically you edit the file in

00:18:24,950 --> 00:18:32,240
SRC and then you run the file in leb and

00:18:30,340 --> 00:18:34,070
eventually at the point at which you're

00:18:32,240 --> 00:18:36,560
shipping it off into the wild wider

00:18:34,070 --> 00:18:37,820
world you ship the lid files so nobody

00:18:36,560 --> 00:18:39,470
else has to care that you're right but

00:18:37,820 --> 00:18:43,430
you're relying on the transpilation

00:18:39,470 --> 00:18:45,860
stuff and that actually works out pretty

00:18:43,430 --> 00:18:47,600
well there's also a bunch of NPM modules

00:18:45,860 --> 00:18:52,130
written in typescript that ship does

00:18:47,600 --> 00:18:55,010
javascript notably mob x which all mod X

00:18:52,130 --> 00:18:57,110
is very much worth a look and it's

00:18:55,010 --> 00:19:00,850
basically reactive programming for

00:18:57,110 --> 00:19:03,530
JavaScript in a sensible way but anyway

00:19:00,850 --> 00:19:05,990
so yeah and that's basically sorted so

00:19:03,530 --> 00:19:08,750
in the Babel RC what I'm using at the

00:19:05,990 --> 00:19:12,650
moment is es2015

00:19:08,750 --> 00:19:14,420
is baseline es6 stage two is the

00:19:12,650 --> 00:19:16,370
extensions that are probably going to be

00:19:14,420 --> 00:19:18,710
in the next version and then I

00:19:16,370 --> 00:19:24,080
explicitly turn on decorators and class

00:19:18,710 --> 00:19:26,480
properties order is important if you put

00:19:24,080 --> 00:19:29,530
decorators after class properties in

00:19:26,480 --> 00:19:34,040
that array nothing works

00:19:29,530 --> 00:19:36,950
guess how I discovered that so yeah

00:19:34,040 --> 00:19:39,230
warning although if you make that stupid

00:19:36,950 --> 00:19:41,030
was the nice thing is if you miss to let

00:19:39,230 --> 00:19:42,500
the decorators plugin

00:19:41,030 --> 00:19:46,190
does actually give you an error telling

00:19:42,500 --> 00:19:48,560
you to add it I should possibly submit a

00:19:46,190 --> 00:19:50,660
patch getting it to tell you to add it

00:19:48,560 --> 00:19:56,780
and warning you where to add it but you

00:19:50,660 --> 00:20:00,020
know um yeah so decorators yeah I've not

00:19:56,780 --> 00:20:02,210
mentioned them yet it looks kind of like

00:20:00,020 --> 00:20:03,620
decorators in most languages that hadn't

00:20:02,210 --> 00:20:08,030
already used the @ sign for something

00:20:03,620 --> 00:20:10,100
else and basically what happens is you

00:20:08,030 --> 00:20:11,510
define a function called decorator that

00:20:10,100 --> 00:20:13,700
gets passed the information of the

00:20:11,510 --> 00:20:15,920
function that's being defined and then

00:20:13,700 --> 00:20:18,530
you can wrap it we can annotate it you

00:20:15,920 --> 00:20:23,870
basically mess with it however you need

00:20:18,530 --> 00:20:29,090
to it's kind of like pull subroutine

00:20:23,870 --> 00:20:31,330
attributes expect useful having written

00:20:29,090 --> 00:20:33,260
having written two versions of the

00:20:31,330 --> 00:20:35,900
catalyst subroutine attribute

00:20:33,260 --> 00:20:37,640
implementation I could probably give you

00:20:35,900 --> 00:20:40,790
an entire talk on why I hate the way

00:20:37,640 --> 00:20:44,710
pills I've written at 3ds work but we'll

00:20:40,790 --> 00:20:48,950
just move on with with a small note of

00:20:44,710 --> 00:20:52,490
right so and class properties class

00:20:48,950 --> 00:20:54,110
properties are well you basically you

00:20:52,490 --> 00:20:57,740
define the name give it a default value

00:20:54,110 --> 00:21:01,250
and it gets set on your object before

00:20:57,740 --> 00:21:03,470
the constructor fires and you can add

00:21:01,250 --> 00:21:06,620
class properties with decorators so

00:21:03,470 --> 00:21:08,480
that's actually more Bek syntax the idea

00:21:06,620 --> 00:21:10,760
with mob X is that you define things as

00:21:08,480 --> 00:21:13,340
observable or computed from observables

00:21:10,760 --> 00:21:17,120
and it gets and if you use knockout

00:21:13,340 --> 00:21:18,830
jails or view Jas they have observable

00:21:17,120 --> 00:21:21,560
systems that you create using a method

00:21:18,830 --> 00:21:23,150
call mob X does it via annotations and

00:21:21,560 --> 00:21:25,610
you get to pretend that it's basically a

00:21:23,150 --> 00:21:33,410
language level feature which I find

00:21:25,610 --> 00:21:35,720
really really nice but um I'm still kind

00:21:33,410 --> 00:21:37,880
of at the point of wait I have to write

00:21:35,720 --> 00:21:42,980
my own constructor what sort of

00:21:37,880 --> 00:21:45,530
uncivilized bull is this um so you do is

00:21:42,980 --> 00:21:47,750
I have a function called attribute

00:21:45,530 --> 00:21:50,270
target key and descriptor a decorator

00:21:47,750 --> 00:21:51,920
arguments writable is an extra argument

00:21:50,270 --> 00:21:54,529
that's not normally passed that will

00:21:51,920 --> 00:21:56,809
make sense in a minute I

00:21:54,529 --> 00:22:00,110
has owned property says is there a

00:21:56,809 --> 00:22:02,950
property at this exact level it doesn't

00:22:00,110 --> 00:22:05,330
look upwards through the prototype track

00:22:02,950 --> 00:22:07,549
and therefore allows you to set about

00:22:05,330 --> 00:22:09,259
set of value directly and make sure that

00:22:07,549 --> 00:22:12,409
there's a local one so you basically get

00:22:09,259 --> 00:22:16,129
one player pull out the actress

00:22:12,409 --> 00:22:19,429
information into a lexical and then push

00:22:16,129 --> 00:22:24,860
on to that the name of the attribute and

00:22:19,429 --> 00:22:26,600
whether it's writable now I don't know

00:22:24,860 --> 00:22:28,220
whether this is a bug in Babel or

00:22:26,600 --> 00:22:34,129
whether I misunderstood something or

00:22:28,220 --> 00:22:36,080
honestly whether both but writable ended

00:22:34,129 --> 00:22:39,049
up defaulting to false on properties

00:22:36,080 --> 00:22:41,419
without a default and that was not

00:22:39,049 --> 00:22:44,360
hilarious because class properties are

00:22:41,419 --> 00:22:47,659
set before your constructor fires so you

00:22:44,360 --> 00:22:49,429
now have a property set to undefined but

00:22:47,659 --> 00:22:52,399
you can't write to in the constructor

00:22:49,429 --> 00:22:54,529
which not being able to write to it is

00:22:52,399 --> 00:22:57,230
not very useful for a property without a

00:22:54,529 --> 00:23:01,309
default but that fixes it

00:22:57,230 --> 00:23:03,610
oh and also that dot dot and is

00:23:01,309 --> 00:23:06,500
basically doing the moral equivalent of

00:23:03,610 --> 00:23:08,779
percent browse dollar descriptor price

00:23:06,500 --> 00:23:13,179
so it basically um perhaps the entire

00:23:08,779 --> 00:23:15,529
thing really nice syntax for building up

00:23:13,179 --> 00:23:17,570
house reps and array reps and whatever

00:23:15,529 --> 00:23:20,570
because you can just basically flatten

00:23:17,570 --> 00:23:23,090
things out into the list and we've got

00:23:20,570 --> 00:23:27,440
that that has made some of my codes so

00:23:23,090 --> 00:23:30,230
much more concise like say this where I

00:23:27,440 --> 00:23:31,970
have our oh and our W but just flatten

00:23:30,230 --> 00:23:33,950
out the odds into an array flatten them

00:23:31,970 --> 00:23:36,200
back into a called wrapper and then

00:23:33,950 --> 00:23:40,789
passes that last writable property as

00:23:36,200 --> 00:23:42,200
false and true respectively and then I

00:23:40,789 --> 00:23:44,450
need a class decorator

00:23:42,200 --> 00:23:46,159
I need a clouds decorator because that's

00:23:44,450 --> 00:23:53,779
all very well but I still don't have a

00:23:46,159 --> 00:23:55,250
constructor right so functional too by

00:23:53,779 --> 00:23:57,889
the way the reason this is called O two

00:23:55,250 --> 00:24:02,299
is because I managed to get three puns

00:23:57,889 --> 00:24:05,269
into two characters first off o to two

00:24:02,299 --> 00:24:07,309
O's is low and given what we're rapidly

00:24:05,269 --> 00:24:07,600
heading towards is a subset of MU that's

00:24:07,309 --> 00:24:11,669
in

00:24:07,600 --> 00:24:15,730
music and it's object orientation and

00:24:11,669 --> 00:24:19,000
those previous attempt by a blue feet to

00:24:15,730 --> 00:24:21,190
recreate mu in JavaScript was called ojs

00:24:19,000 --> 00:24:25,150
and I'm regarding this as a spiritual

00:24:21,190 --> 00:24:27,580
successor and obviously sensible oo is

00:24:25,150 --> 00:24:29,919
oxygen to programmers so actually for

00:24:27,580 --> 00:24:33,549
puns into characters I am a terrible

00:24:29,919 --> 00:24:35,289
person but I regret nothing anyway so if

00:24:33,549 --> 00:24:37,150
we haven't had any attributes declared

00:24:35,289 --> 00:24:38,799
at that level we don't need to generate

00:24:37,150 --> 00:24:40,210
a constructor so we just return the

00:24:38,799 --> 00:24:43,179
class immediately

00:24:40,210 --> 00:24:45,039
that should say return a reg and I

00:24:43,179 --> 00:24:48,460
clearly managed to that up at some

00:24:45,039 --> 00:24:51,130
point and then never test it again pull

00:24:48,460 --> 00:24:53,110
the attribute out create a constructor

00:24:51,130 --> 00:24:55,960
that does it call on the orig this is

00:24:53,110 --> 00:24:58,919
kind of a manual around modifier because

00:24:55,960 --> 00:24:58,919
bear in mind

00:24:58,980 --> 00:25:05,919
javascript is it's still actually a

00:25:03,220 --> 00:25:07,659
constructor function under the hood so

00:25:05,919 --> 00:25:10,840
what I'm doing is just wrapping the

00:25:07,659 --> 00:25:15,419
constructor function and then we do a

00:25:10,840 --> 00:25:18,429
for loop over the attributes that we got

00:25:15,419 --> 00:25:20,710
grab the value and then do a property

00:25:18,429 --> 00:25:23,340
definition there's a couple of other es6

00:25:20,710 --> 00:25:27,970
features in here that i love of

00:25:23,340 --> 00:25:31,600
basically an inn is an iterator over the

00:25:27,970 --> 00:25:33,490
indices of something or the keys of is

00:25:31,600 --> 00:25:36,370
an iterator over the values which means

00:25:33,490 --> 00:25:40,900
you can you don't have to do the for VAR

00:25:36,370 --> 00:25:43,870
i DX in gather VAR value equals this of

00:25:40,900 --> 00:25:48,250
ID X you can just go straight to his

00:25:43,870 --> 00:25:50,760
value um another nice bit of send that

00:25:48,250 --> 00:25:54,610
notice I just put plain writable now

00:25:50,760 --> 00:25:57,250
that's because if you do that it assumes

00:25:54,610 --> 00:25:59,710
that you want the key writable set to a

00:25:57,250 --> 00:26:02,039
value with name writable and back in the

00:25:59,710 --> 00:26:06,460
top of the for I've used the same syntax

00:26:02,039 --> 00:26:08,260
2d structure the attribute meta hash to

00:26:06,460 --> 00:26:12,190
get the name and writable keys out to

00:26:08,260 --> 00:26:13,870
that I dot that's really nice and I

00:26:12,190 --> 00:26:17,500
really wish we had like some spare

00:26:13,870 --> 00:26:19,929
syntax left in pole 5 to steal it I'm

00:26:17,500 --> 00:26:23,769
not sure we do though anyway and

00:26:19,929 --> 00:26:25,480
and then finally you copy the prototype

00:26:23,769 --> 00:26:28,179
of the original across and return the

00:26:25,480 --> 00:26:31,509
new constructor at which point you can

00:26:28,179 --> 00:26:34,080
write something like this and then you

00:26:31,509 --> 00:26:39,549
that don't have to write the constructor

00:26:34,080 --> 00:26:41,289
stabilization finally um but okay the

00:26:39,549 --> 00:26:43,570
buzz I mentioned without a default and

00:26:41,289 --> 00:26:46,499
those both had defaults well yeah so

00:26:43,570 --> 00:26:49,330
what I do is if there's no default I

00:26:46,499 --> 00:26:52,480
push the name on to an array in the act

00:26:49,330 --> 00:26:55,440
was called required and I actually have

00:26:52,480 --> 00:26:58,330
at the beginning of the constructor and

00:26:55,440 --> 00:27:03,129
a check on if we have any required

00:26:58,330 --> 00:27:04,539
attributes do a gret to see if to make

00:27:03,129 --> 00:27:06,549
sure all of those keys have been passed

00:27:04,539 --> 00:27:10,210
remember I said there's a really nice

00:27:06,549 --> 00:27:13,299
new subroutines in fact that a fat arrow

00:27:10,210 --> 00:27:16,869
the name arrow bang args dot has own

00:27:13,299 --> 00:27:18,369
property is actually a lambda that is so

00:27:16,869 --> 00:27:22,720
much nicer than having to type the

00:27:18,369 --> 00:27:26,139
function every 10 seconds be warned

00:27:22,720 --> 00:27:27,940
those also buying this at the point of

00:27:26,139 --> 00:27:30,639
calling so you can't assign it as a

00:27:27,940 --> 00:27:32,980
method and have the way this dot method

00:27:30,639 --> 00:27:36,100
parens in JavaScript rebounds this works

00:27:32,980 --> 00:27:39,580
and yes I blew my own thought of not

00:27:36,100 --> 00:27:40,960
realizing that to begin with and then if

00:27:39,580 --> 00:27:44,649
you've got anything missing you throw an

00:27:40,960 --> 00:27:46,929
exception shockingly enough um so my

00:27:44,649 --> 00:27:49,480
current test case we have a read-only

00:27:46,929 --> 00:27:51,309
name with a default of readwrite age

00:27:49,480 --> 00:27:56,409
that's required and a method called

00:27:51,309 --> 00:27:58,419
message and so if you log and the thing

00:27:56,409 --> 00:28:00,759
afterwards you get o to constructor I

00:27:58,419 --> 00:28:02,919
would really like to be able to give it

00:28:00,759 --> 00:28:05,529
a better name but the name properties

00:28:02,919 --> 00:28:07,480
read-only it is entirely possible there

00:28:05,529 --> 00:28:09,759
is an insane thing I can do to fix that

00:28:07,480 --> 00:28:12,399
but currently the only approach I can

00:28:09,759 --> 00:28:15,190
think of this string eval and I have

00:28:12,399 --> 00:28:16,929
avoided string eval so far because I

00:28:15,190 --> 00:28:21,190
bought myself enough trouble trying to

00:28:16,929 --> 00:28:22,899
do all of this in the first place you

00:28:21,190 --> 00:28:24,970
try and construct it without the

00:28:22,899 --> 00:28:31,269
required attribute you get a suitable

00:28:24,970 --> 00:28:33,430
error and then if you pass you know pass

00:28:31,269 --> 00:28:35,950
a hash left for construction

00:28:33,430 --> 00:28:37,660
using the compact syntax and the

00:28:35,950 --> 00:28:41,710
constructor populates the values for you

00:28:37,660 --> 00:28:43,540
ya are now in the realms of this is

00:28:41,710 --> 00:28:47,980
making sense in the same way that moves

00:28:43,540 --> 00:28:50,280
new make sense I called the message yet

00:28:47,980 --> 00:28:54,400
it's managed to look up the value right

00:28:50,280 --> 00:28:58,180
create another one without a name and

00:28:54,400 --> 00:29:00,970
the default gets populated in and that

00:28:58,180 --> 00:29:02,620
one's writable and I do also have a test

00:29:00,970 --> 00:29:04,150
which I didn't put on the slide does

00:29:02,620 --> 00:29:04,990
check it throws an exception when it's

00:29:04,150 --> 00:29:07,750
marked read-only

00:29:04,990 --> 00:29:11,440
I guess you probably don't need to see

00:29:07,750 --> 00:29:14,020
that but yeah this is this is actually

00:29:11,440 --> 00:29:15,670
less typing the new at the moment I'm

00:29:14,020 --> 00:29:17,740
sort of wondering if I want to make

00:29:15,670 --> 00:29:20,830
something that export arrow and our W

00:29:17,740 --> 00:29:23,470
subs for no given at this point

00:29:20,830 --> 00:29:29,400
basically all of my attributes arriver

00:29:23,470 --> 00:29:29,400
and is ro required one or is lazy

00:29:29,730 --> 00:29:36,640
obviously this is woefully incomplete

00:29:32,940 --> 00:29:38,110
for a start the tests are basically a

00:29:36,640 --> 00:29:40,360
bunch of code at the bottom of the file

00:29:38,110 --> 00:29:42,160
because I couldn't quite work out what

00:29:40,360 --> 00:29:47,800
was people's favorite JavaScript testing

00:29:42,160 --> 00:29:49,540
framework this hour I I want to sit down

00:29:47,800 --> 00:29:52,060
and go through half a dozen of them and

00:29:49,540 --> 00:29:53,290
actually think because I want to make a

00:29:52,060 --> 00:29:55,660
decision and stick with it

00:29:53,290 --> 00:30:03,880
I know that's very own JavaScript ish of

00:29:55,660 --> 00:30:05,590
me but I I ah don't demo like 20 odd

00:30:03,880 --> 00:30:09,180
year old single Silicon Valley men of

00:30:05,590 --> 00:30:09,180
course they're afraid of commitment and

00:30:10,440 --> 00:30:19,210
but I want at lazy that take some acid

00:30:15,670 --> 00:30:21,100
um installs it as a method and then the

00:30:19,210 --> 00:30:24,250
first time it's called replaces itself

00:30:21,100 --> 00:30:29,860
with a value and to work like movies

00:30:24,250 --> 00:30:33,190
lazy or mousses lazy build obviously we

00:30:29,860 --> 00:30:35,260
need method modifiers I tried to

00:30:33,190 --> 00:30:37,900
implement those yesterday through jetlag

00:30:35,260 --> 00:30:40,780
and discovered that one yes I was

00:30:37,900 --> 00:30:43,600
jet-lagged and - oh god infinite loops

00:30:40,780 --> 00:30:45,280
everywhere I probably did something

00:30:43,600 --> 00:30:47,200
incredibly stupid I'll have another go

00:30:45,280 --> 00:30:51,340
later

00:30:47,200 --> 00:30:53,470
definitely the various existing new like

00:30:51,340 --> 00:30:56,110
things and because there's a couple of

00:30:53,470 --> 00:30:58,720
others as well as ojs do have working

00:30:56,110 --> 00:31:02,590
method modifiers so it's definitely

00:30:58,720 --> 00:31:06,279
possible somehow I'm just an idiot we

00:31:02,590 --> 00:31:11,320
will figure that out obviously I want to

00:31:06,279 --> 00:31:14,889
try and do roles but that I'm kind of

00:31:11,320 --> 00:31:17,259
I'm getting very close to out of my

00:31:14,889 --> 00:31:19,539
depth here already so I thought maybe

00:31:17,259 --> 00:31:21,250
just maybe I should implement the rest

00:31:19,539 --> 00:31:26,679
of it and then stop and think that

00:31:21,250 --> 00:31:29,500
through I actually am assuming they they

00:31:26,679 --> 00:31:32,379
accept this talk again by the time I get

00:31:29,500 --> 00:31:35,409
to yet see you that will all really burn

00:31:32,379 --> 00:31:37,120
out wait hang on sorry sorry my

00:31:35,409 --> 00:31:44,440
apologies to our corporate lords and

00:31:37,120 --> 00:31:47,259
masters it's TP see you know but um yeah

00:31:44,440 --> 00:31:50,649
I mean all things considered um it

00:31:47,259 --> 00:31:53,440
actually close to as bendable as Perl

00:31:50,649 --> 00:31:54,940
five won't you go down into the into the

00:31:53,440 --> 00:31:57,700
guts and look at things like object

00:31:54,940 --> 00:31:59,169
define property basically if you're

00:31:57,700 --> 00:32:01,740
wanting to do crazy things with

00:31:59,169 --> 00:32:05,320
JavaScript you need to read through

00:32:01,740 --> 00:32:07,539
everything and in object dot and you

00:32:05,320 --> 00:32:10,779
also want to look at symbol which gives

00:32:07,539 --> 00:32:13,450
you a sort of a Jensen type thing be

00:32:10,779 --> 00:32:15,909
warned older versions of node.js do not

00:32:13,450 --> 00:32:18,700
have symbol browsers at this point

00:32:15,909 --> 00:32:20,799
generally do a current nodejs does I

00:32:18,700 --> 00:32:22,690
only know the older versions don't

00:32:20,799 --> 00:32:25,029
because I screwed up my dollar pass at

00:32:22,690 --> 00:32:31,990
one point while testing and got a

00:32:25,029 --> 00:32:34,799
hilarious explosion but the scope things

00:32:31,990 --> 00:32:37,480
there honestly honestly the the scoping

00:32:34,799 --> 00:32:39,850
proper lexical scoping is the thing that

00:32:37,480 --> 00:32:45,129
I miss the most in any language that

00:32:39,850 --> 00:32:48,610
doesn't add it well I also miss explicit

00:32:45,129 --> 00:32:51,549
lexical scoping because logo which has

00:32:48,610 --> 00:32:53,889
this tendency to auto create lexical

00:32:51,549 --> 00:32:55,600
scope variables so you can shadow an

00:32:53,889 --> 00:32:58,120
outer variable with an inner variable

00:32:55,600 --> 00:32:58,960
just without noticing and then

00:32:58,120 --> 00:33:02,730
everything is

00:32:58,960 --> 00:33:02,730
of urine and you can't even find the cat

00:33:04,169 --> 00:33:13,809
but yeah well so uh useable alone well

00:33:10,659 --> 00:33:15,820
it's usable issue oh but more

00:33:13,809 --> 00:33:19,120
importantly given the decorators it's

00:33:15,820 --> 00:33:22,029
very definitely fixable oh oh um which

00:33:19,120 --> 00:33:29,529
well honestly is kind of very pearl five

00:33:22,029 --> 00:33:37,539
right so in conclusion is he a six and

00:33:29,529 --> 00:33:39,789
acceptable pill side I'm not really sure

00:33:37,539 --> 00:33:42,850
one way or the other but what I am sure

00:33:39,789 --> 00:33:45,640
of is I'm actually enjoying writing this

00:33:42,850 --> 00:33:47,710
I don't think I ever thought I would say

00:33:45,640 --> 00:33:51,460
this but I am really enjoying writing

00:33:47,710 --> 00:33:54,899
JavaScript so I would seriously

00:33:51,460 --> 00:33:58,299
recommend having a play with stuff and

00:33:54,899 --> 00:34:00,159
if you are curious I haven't pushed it

00:33:58,299 --> 00:34:01,809
to get a via I haven't pushed it to MDM

00:34:00,159 --> 00:34:07,539
yeah I know I need to do both of those

00:34:01,809 --> 00:34:12,909
things mostly I'm proud that I got all

00:34:07,539 --> 00:34:16,770
the work at all at the moment and and

00:34:12,909 --> 00:34:16,770
yeah time she's listening

00:34:22,070 --> 00:34:26,849
and I do have like something like 10

00:34:25,200 --> 00:34:42,570
minutes left in the slot so if anybody

00:34:26,849 --> 00:34:44,879
has questions please go add oh you're

00:34:42,570 --> 00:34:47,099
asking about juice on Jason right so

00:34:44,879 --> 00:34:49,490
amazingly I was actually chatting to

00:34:47,099 --> 00:34:53,700
Adam Kennedy when he first created Jason

00:34:49,490 --> 00:34:56,399
and the guy who built Juve's spent quite

00:34:53,700 --> 00:35:00,329
a while on hash mousse on IRC doctor on

00:34:56,399 --> 00:35:02,970
chatting to us about it um juice was a

00:35:00,329 --> 00:35:07,099
complete port of mousse with the full

00:35:02,970 --> 00:35:09,420
metal model which was both very cool and

00:35:07,099 --> 00:35:12,900
completely and utterly overkill for any

00:35:09,420 --> 00:35:18,240
purpose I actually had and imposed a

00:35:12,900 --> 00:35:21,990
massive loading thing because it had all

00:35:18,240 --> 00:35:24,210
of the disadvantages and in terms of

00:35:21,990 --> 00:35:27,630
loading time inherent with having to

00:35:24,210 --> 00:35:32,339
bootstrap a meta-circular metal model on

00:35:27,630 --> 00:35:34,770
startup same way as mousse has I mean

00:35:32,339 --> 00:35:36,869
you know moves mousse has got noticeably

00:35:34,770 --> 00:35:38,790
faster over the years because we had

00:35:36,869 --> 00:35:42,000
crazy people who rewrote the hot spots

00:35:38,790 --> 00:35:44,280
into excess obviously you can't do that

00:35:42,000 --> 00:35:47,490
in JavaScript so juice is doomed to

00:35:44,280 --> 00:35:50,910
forever be like a second and a half ok

00:35:47,490 --> 00:35:53,609
fast the CPUs have helped but really

00:35:50,910 --> 00:35:56,839
what I want given what I wanted was a

00:35:53,609 --> 00:35:58,950
subset of mu with pretty syntax and

00:35:56,839 --> 00:36:01,109
because I wanted to be as lightweight as

00:35:58,950 --> 00:36:03,839
possible I mean notice I've not even

00:36:01,109 --> 00:36:05,849
bothered trying to do type checking I I

00:36:03,839 --> 00:36:08,579
would happily take a pull request to I'd

00:36:05,849 --> 00:36:12,000
type checking and from somebody else for

00:36:08,579 --> 00:36:13,920
a mo but I don't honestly see the point

00:36:12,000 --> 00:36:15,690
of doing that myself

00:36:13,920 --> 00:36:18,270
I'd much rather try and integrate with

00:36:15,690 --> 00:36:19,920
flow and type scripts static type

00:36:18,270 --> 00:36:21,510
checking because it's always better to

00:36:19,920 --> 00:36:23,940
get the error at compile time rather

00:36:21,510 --> 00:36:26,099
than runtime because the earlier you get

00:36:23,940 --> 00:36:29,819
the error the early you can facepalm and

00:36:26,099 --> 00:36:32,579
fix the bug um so yeah juice juice was

00:36:29,819 --> 00:36:34,040
very very cool as a complete

00:36:32,579 --> 00:36:38,000
implementation of moussing

00:36:34,040 --> 00:36:42,230
javascript but that also totally wasn't

00:36:38,000 --> 00:36:44,810
what I wanted yeah

00:36:42,230 --> 00:36:46,970
technical tour de force and if you were

00:36:44,810 --> 00:36:49,220
trying to have JavaScript objects that

00:36:46,970 --> 00:36:52,220
matched mousse objects the ability to

00:36:49,220 --> 00:36:55,130
basically use reflection to make the

00:36:52,220 --> 00:36:59,810
generate one from the other was way cool

00:36:55,130 --> 00:37:02,060
um but also sufficiently insane and

00:36:59,810 --> 00:37:03,980
overkill but on the rare occasions that

00:37:02,060 --> 00:37:05,570
I tried it I ended up the code I ended

00:37:03,980 --> 00:37:08,530
up with a code base that nobody except

00:37:05,570 --> 00:37:11,630
me could understand or add features to

00:37:08,530 --> 00:37:13,040
with which is obviously bad because I

00:37:11,630 --> 00:37:20,800
want to build a team and then run away

00:37:13,040 --> 00:37:20,800
to the next project and anybody else yep

00:37:22,780 --> 00:37:29,680
current favorite single page Roma ok so

00:37:25,910 --> 00:37:33,890
a lot of the projects we've got on a

00:37:29,680 --> 00:37:37,550
using angular 1 point Extell and I'm

00:37:33,890 --> 00:37:39,290
actually kind of fond of it largely

00:37:37,550 --> 00:37:42,110
because I read through the entire source

00:37:39,290 --> 00:37:43,670
code over a series of even Eve sat in

00:37:42,110 --> 00:37:46,460
the beer garden of a pub reading it on a

00:37:43,670 --> 00:37:48,080
tablet so I can model what angular 1

00:37:46,460 --> 00:37:52,790
bang X is going to do in my head pretty

00:37:48,080 --> 00:37:55,520
well um 2 is really nice in terms of

00:37:52,790 --> 00:37:57,110
being more powerful but I don't find it

00:37:55,520 --> 00:38:03,980
as approachable it's harder to get

00:37:57,110 --> 00:38:08,270
people into the one point X was um we we

00:38:03,980 --> 00:38:10,850
can basically write I own several of my

00:38:08,270 --> 00:38:13,250
team can deal with angular 2 fine and we

00:38:10,850 --> 00:38:14,780
kind of appreciate the power but we hate

00:38:13,250 --> 00:38:19,760
every time we have to bring a junior up

00:38:14,780 --> 00:38:24,320
to speed on it um whereas react react is

00:38:19,760 --> 00:38:28,370
really cool but flux and redux in their

00:38:24,320 --> 00:38:29,720
milk oh my god so much boilerplate like

00:38:28,370 --> 00:38:31,610
like every time you want to add a

00:38:29,720 --> 00:38:33,920
mutation you have to add code in three

00:38:31,610 --> 00:38:35,240
different places that's all like define

00:38:33,920 --> 00:38:37,370
constant defined constant defined

00:38:35,240 --> 00:38:41,900
constant defined constant okay now you

00:38:37,370 --> 00:38:44,000
can write the one line of code yeah what

00:38:41,900 --> 00:38:46,530
I have been experimenting with which I

00:38:44,000 --> 00:38:49,440
think I will end up liking better

00:38:46,530 --> 00:38:52,290
is react plus more backs because ma BEC

00:38:49,440 --> 00:38:54,540
integrates with react so if you build an

00:38:52,290 --> 00:38:56,970
observable object in more backs

00:38:54,540 --> 00:38:58,950
you can basically connect it to a react

00:38:56,970 --> 00:39:01,380
component with another decorator and

00:38:58,950 --> 00:39:03,840
when you change your property on the

00:39:01,380 --> 00:39:05,790
object in mob ax the react stuff

00:39:03,840 --> 00:39:08,070
automatically we renders itself but only

00:39:05,790 --> 00:39:16,790
the bits that need to basically it

00:39:08,070 --> 00:39:20,190
cooperates very nicely and wake up and

00:39:16,790 --> 00:39:22,830
also mob X provide while okay you don't

00:39:20,190 --> 00:39:24,690
you can't just keep every version of the

00:39:22,830 --> 00:39:27,570
state going back in time like you can in

00:39:24,690 --> 00:39:29,640
redux more Beck's does track all rights

00:39:27,570 --> 00:39:31,890
and all the renders when the debug tools

00:39:29,640 --> 00:39:34,350
are enabled so you can go through and

00:39:31,890 --> 00:39:36,030
look at that it basically I wrote a

00:39:34,350 --> 00:39:39,390
couple of small things with react and

00:39:36,030 --> 00:39:41,820
mob X and when you know I could almost

00:39:39,390 --> 00:39:43,110
like this apart from the fact that

00:39:41,820 --> 00:39:44,280
there's still too much boilerplate

00:39:43,110 --> 00:39:48,000
because I still have to write my own

00:39:44,280 --> 00:39:50,010
constructor and that led me down the

00:39:48,000 --> 00:39:54,120
path that led me to the contents of this

00:39:50,010 --> 00:39:57,950
talk I am suspecting that I will like

00:39:54,120 --> 00:40:01,830
react plus mob X plus on to better I'm

00:39:57,950 --> 00:40:04,710
not necessarily sure that's universally

00:40:01,830 --> 00:40:06,750
better than react plus redux or angular

00:40:04,710 --> 00:40:09,720
whatever major version them on now I'm

00:40:06,750 --> 00:40:11,310
calling them all angular to frankly just

00:40:09,720 --> 00:40:13,410
just just the same way as I used to

00:40:11,310 --> 00:40:22,290
really annoy people by calling Solaris a

00:40:13,410 --> 00:40:23,880
2.8 you know you can change your version

00:40:22,290 --> 00:40:25,230
numbers for marketing purposes if you

00:40:23,880 --> 00:40:26,910
like but that doesn't mean I have to pay

00:40:25,230 --> 00:40:31,650
attention except in the dependencies

00:40:26,910 --> 00:40:35,040
that I my apologies for that not being a

00:40:31,650 --> 00:40:37,920
very definitive answer but I would know

00:40:35,040 --> 00:40:39,870
view dot J s is really nice except it

00:40:37,920 --> 00:40:41,630
insists on using its own observable

00:40:39,870 --> 00:40:44,130
implementation just like knockout does

00:40:41,630 --> 00:40:46,260
at which point I can't use more backs

00:40:44,130 --> 00:40:49,740
and the view observable syntax sucks

00:40:46,260 --> 00:40:56,880
compared to my backs but it's still well

00:40:49,740 --> 00:41:00,420
worth a look like if I if a customer

00:40:56,880 --> 00:41:02,880
wanted angular to or react and redux

00:41:00,420 --> 00:41:07,799
or view I would not argue with any of

00:41:02,880 --> 00:41:09,539
these if I got a choice I would I would

00:41:07,799 --> 00:41:12,450
probably go react plus more backed by

00:41:09,539 --> 00:41:15,630
default that that's the closest to a

00:41:12,450 --> 00:41:18,000
straight answer I can give you okay

00:41:15,630 --> 00:41:23,130
and we have a couple more minutes so if

00:41:18,000 --> 00:41:27,150
there's one month any money all right

00:41:23,130 --> 00:41:40,140
all right you first tell him all right

00:41:27,150 --> 00:41:41,250
you would just yeah um actually doesn't

00:41:40,140 --> 00:41:43,769
offend me very much

00:41:41,250 --> 00:41:46,920
largely because I'd spent like the last

00:41:43,769 --> 00:41:50,279
decade working with Musa no we're

00:41:46,920 --> 00:41:52,730
defining an attribute generates out code

00:41:50,279 --> 00:41:56,220
for the constructor and access or anyway

00:41:52,730 --> 00:41:58,559
so I'm kind of used to my put to my pill

00:41:56,220 --> 00:42:03,950
five internally transpiling itself to

00:41:58,559 --> 00:42:07,769
more pearl five and to give them credit

00:42:03,950 --> 00:42:10,380
the output of Babel is actually very

00:42:07,769 --> 00:42:12,269
legible to the point where when I'm

00:42:10,380 --> 00:42:15,420
trying to work out how a particular es6

00:42:12,269 --> 00:42:16,920
feature works I'll write some code using

00:42:15,420 --> 00:42:18,390
it that may or may not actually do what

00:42:16,920 --> 00:42:23,009
I want and then read the generated

00:42:18,390 --> 00:42:26,250
output if if it transpiled too ugly code

00:42:23,009 --> 00:42:27,630
I would be much more of unhappy but it

00:42:26,250 --> 00:42:31,890
transpires the code that I can actually

00:42:27,630 --> 00:42:34,980
read and also it's not CoffeeScript

00:42:31,890 --> 00:42:39,359
which can go take a long walk off a

00:42:34,980 --> 00:42:40,980
short pier I have other ways of

00:42:39,359 --> 00:42:47,039
describing CoffeeScript but then the

00:42:40,980 --> 00:42:52,289
video might not get to youtube um but

00:42:47,039 --> 00:42:55,500
yeah like I expected to be more annoyed

00:42:52,289 --> 00:42:57,960
by it than I have been let's say other

00:42:55,500 --> 00:43:00,329
than that possibly bug possibly I'm an

00:42:57,960 --> 00:43:03,210
idiot and it's been a very pleasant

00:43:00,329 --> 00:43:05,039
experience and I don't and because it

00:43:03,210 --> 00:43:07,470
generates source maps that means that

00:43:05,039 --> 00:43:10,410
the exceptions come out pointing to the

00:43:07,470 --> 00:43:12,210
right lines of things I haven't found

00:43:10,410 --> 00:43:14,600
myself finding it to be actually

00:43:12,210 --> 00:43:19,560
noticeably more difficult than

00:43:14,600 --> 00:43:23,040
running es6 native would be and honestly

00:43:19,560 --> 00:43:26,340
I am happy paying that price to be able

00:43:23,040 --> 00:43:28,350
to get it ear 7 features early because

00:43:26,340 --> 00:43:31,170
without class properties and decorators

00:43:28,350 --> 00:43:33,240
I wouldn't be able to do half of the

00:43:31,170 --> 00:43:34,770
stuff on doing I mean he even forgetting

00:43:33,240 --> 00:43:36,960
this without class properties and

00:43:34,770 --> 00:43:40,710
decorators more bets wouldn't be nearly

00:43:36,960 --> 00:44:04,590
as pleasant to use so in case your

00:43:40,710 --> 00:44:06,480
answer are right yeah we know I think as

00:44:04,590 --> 00:44:07,650
long as you can walk out of it that's

00:44:06,480 --> 00:44:10,560
probably a good idea

00:44:07,650 --> 00:44:13,230
I say so long as you can opt out a bit

00:44:10,560 --> 00:44:17,490
because I've always found that out

00:44:13,230 --> 00:44:21,680
likely so and this is using the eslint

00:44:17,490 --> 00:44:21,680
to prohibit via usage for the video um

00:44:21,860 --> 00:44:26,370
yes I think that's probably a good idea

00:44:24,210 --> 00:44:30,210
by default so long as there is a way to

00:44:26,370 --> 00:44:34,230
turn off because in my experience while

00:44:30,210 --> 00:44:36,690
like urine Perl 5 99% of the time no

00:44:34,230 --> 00:44:39,150
strict is an error but that remaining 1%

00:44:36,690 --> 00:44:41,330
it's basically a necessity or at least

00:44:39,150 --> 00:44:43,620
it actually gives you nicer code and

00:44:41,330 --> 00:44:46,110
then avoiding no strict would have been

00:44:43,620 --> 00:44:49,050
and there was a point during the early

00:44:46,110 --> 00:44:51,330
days of moves where I actually tried to

00:44:49,050 --> 00:44:55,500
make it simple table manipulation work

00:44:51,330 --> 00:44:57,270
under use direct I did it the resulting

00:44:55,500 --> 00:45:00,300
code made Stephens eyes bleed and

00:44:57,270 --> 00:45:02,130
everybody else's head explode and we

00:45:00,300 --> 00:45:03,150
sort of looked at this and went yeah

00:45:02,130 --> 00:45:04,680
let's not do that

00:45:03,150 --> 00:45:09,720
let's just keep those trick it's

00:45:04,680 --> 00:45:12,630
actually better for this so yeah I mean

00:45:09,720 --> 00:45:14,880
III think I think in general prohibiting

00:45:12,630 --> 00:45:17,340
as many foot guns as possible something

00:45:14,880 --> 00:45:19,020
that prohibited ever doing for something

00:45:17,340 --> 00:45:21,510
in something else without two left on

00:45:19,020 --> 00:45:27,130
the front I think would definitely be a

00:45:21,510 --> 00:45:30,980
good thing um far

00:45:27,130 --> 00:45:34,070
I'm kind of like I have not yet run into

00:45:30,980 --> 00:45:37,100
a situation when writing ESX where Bob

00:45:34,070 --> 00:45:39,350
was what I actually needed but I have

00:45:37,100 --> 00:45:43,670
this sneaking suspicion but one day I

00:45:39,350 --> 00:45:46,000
will so I would rather not be in a

00:45:43,670 --> 00:45:52,970
position where I can't get back to it

00:45:46,000 --> 00:45:55,490
but ask me next year okay I think we

00:45:52,970 --> 00:45:56,930
will call it at that point thank you

00:45:55,490 --> 00:45:59,420
very much and if you come up with any

00:45:56,930 --> 00:46:01,040
other questions and feel free to find me

00:45:59,420 --> 00:46:02,610
over the socializing lakes or announce

00:46:01,040 --> 00:46:10,689
me then Cheers

00:46:02,610 --> 00:46:10,689

YouTube URL: https://www.youtube.com/watch?v=OwCAFPKwAyE


