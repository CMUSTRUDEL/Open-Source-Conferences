Title: Brad Lhotsky - "Writing Command Line Tools for Other People"
Publication date: 2017-06-23
Playlist: TPC 2017 in DC
Description: 
	All of us have written command line scripts in Perl. This talk aims to share some insight into writing tools others can use. We'll venture down some best practices and take a peak at a few really useful modules on the CPAN and how to use them. We'll look at CLI::Helpers, a library I'm maintaining and make heavy use of on a daily basis for simplifying common tasks you and your users need.


Brad Lhotsky programs Perl and throws large amounts of data into PostgreSQL databases and ElasticSearch indexes in search of meaning. He often ponders why security is seen as a roadblock to development and operations while trying ever so hard to automate himself out of a job. Brad has over 15 years of experience in operations and development and is currently automating security and operations at Craigslist with Perl.
Captions: 
	00:00:09,630 --> 00:00:12,410
oh good

00:00:23,070 --> 00:00:27,970
so it's intimate audience today so feel

00:00:26,349 --> 00:00:31,419
free to interrupt with any questions you

00:00:27,970 --> 00:00:33,550
might have this is kind of a beginners

00:00:31,419 --> 00:00:35,710
level talk but it's some tricks that I

00:00:33,550 --> 00:00:37,360
learned to get other people to start

00:00:35,710 --> 00:00:39,730
using tools that I've already written

00:00:37,360 --> 00:00:43,089
instead of writing their interviews over

00:00:39,730 --> 00:00:44,519
and over again so the first thing is

00:00:43,089 --> 00:00:47,350
there's not a lot of people in this room

00:00:44,519 --> 00:00:49,149
but you probably have as many

00:00:47,350 --> 00:00:52,809
interesting stories as there are people

00:00:49,149 --> 00:00:55,410
time story submit a talk it's a great

00:00:52,809 --> 00:00:58,539
audience even if it's a small audience

00:00:55,410 --> 00:01:00,129
it's a great place to kind of learn how

00:00:58,539 --> 00:01:04,239
to give talks because the community is

00:01:00,129 --> 00:01:05,350
very nice so please do that so you're

00:01:04,239 --> 00:01:08,560
probably already familiar with what

00:01:05,350 --> 00:01:11,259
command-line interface is but the gist

00:01:08,560 --> 00:01:13,390
of this is we can run this without a

00:01:11,259 --> 00:01:15,850
mouse we can run this without a GUI and

00:01:13,390 --> 00:01:17,740
run it without a browser and any tool

00:01:15,850 --> 00:01:20,890
that can be run from the command line

00:01:17,740 --> 00:01:23,590
and then be integrated into automation

00:01:20,890 --> 00:01:25,540
which means you may not even need people

00:01:23,590 --> 00:01:27,579
to run your commands anymore which means

00:01:25,540 --> 00:01:29,200
you can go to the pub early which is

00:01:27,579 --> 00:01:32,170
really the ultimate goal for anyone

00:01:29,200 --> 00:01:34,030
working with computers so this is why

00:01:32,170 --> 00:01:35,890
command-line tools are still around and

00:01:34,030 --> 00:01:38,229
so prevalent even though computers have

00:01:35,890 --> 00:01:40,270
become so beautiful and fancy to play

00:01:38,229 --> 00:01:43,960
with there's just some things we like

00:01:40,270 --> 00:01:46,600
computers to do few different interfaces

00:01:43,960 --> 00:01:48,520
to the command line curses and end

00:01:46,600 --> 00:01:50,170
curses provide you with the GUI like

00:01:48,520 --> 00:01:51,549
interface on the command line

00:01:50,170 --> 00:01:53,289
I don't really spend too much time

00:01:51,549 --> 00:01:55,479
working with either of these just

00:01:53,289 --> 00:01:58,750
because they don't give me the ability

00:01:55,479 --> 00:02:00,700
to automate them as easily as you would

00:01:58,750 --> 00:02:04,500
be able to automate a simple utility for

00:02:00,700 --> 00:02:04,500
functions with arguments in it now

00:02:06,850 --> 00:02:12,680
there's also GNU redline which will

00:02:10,040 --> 00:02:13,190
enable some cool features for you as

00:02:12,680 --> 00:02:15,260
well

00:02:13,190 --> 00:02:17,300
people that have used GNU Commandment

00:02:15,260 --> 00:02:19,030
our redline enabled commands are

00:02:17,300 --> 00:02:21,230
familiar with command history and such

00:02:19,030 --> 00:02:22,880
so that's a really nice interface

00:02:21,230 --> 00:02:26,120
there's just basic standard in and

00:02:22,880 --> 00:02:27,290
standard out and occasionally when

00:02:26,120 --> 00:02:29,300
you're running command-line utility you

00:02:27,290 --> 00:02:31,580
may not be able to satisfy all of the

00:02:29,300 --> 00:02:33,200
questions you need to ask the user from

00:02:31,580 --> 00:02:37,540
that command line so you might have to

00:02:33,200 --> 00:02:39,470
prompt them for input and output

00:02:37,540 --> 00:02:42,290
important to keep in mind the UNIX

00:02:39,470 --> 00:02:43,700
philosophy do one thing well so don't

00:02:42,290 --> 00:02:45,920
put too much in a single command line

00:02:43,700 --> 00:02:48,470
utility the more complicated it gets

00:02:45,920 --> 00:02:50,420
less likely someone is to be able to

00:02:48,470 --> 00:02:53,080
understand it and want to use it so keep

00:02:50,420 --> 00:02:56,120
it simple do one thing do it well

00:02:53,080 --> 00:03:00,410
there's other utilities on computers

00:02:56,120 --> 00:03:03,500
that can help people do things you saw

00:03:00,410 --> 00:03:05,540
the CLI startup thing yesterday this

00:03:03,500 --> 00:03:07,180
this probably rings true when you're

00:03:05,540 --> 00:03:11,420
building a utility make sure that your

00:03:07,180 --> 00:03:13,340
default is non-destructive I like to

00:03:11,420 --> 00:03:14,959
explore and run commands every once in a

00:03:13,340 --> 00:03:16,100
while to see what they do and if your

00:03:14,959 --> 00:03:18,890
command is going to do something

00:03:16,100 --> 00:03:22,370
destructive it's probably not my fault

00:03:18,890 --> 00:03:23,780
when I run it so make if you this isn't

00:03:22,370 --> 00:03:25,880
to say that your default command

00:03:23,780 --> 00:03:27,560
behavior has to be a complete no op if

00:03:25,880 --> 00:03:29,750
the command is only performing a

00:03:27,560 --> 00:03:31,670
read-only action then that's fine to

00:03:29,750 --> 00:03:34,100
have it run and do it's read-only action

00:03:31,670 --> 00:03:35,840
from the very GetGo because it's going

00:03:34,100 --> 00:03:37,610
to be ok and i'm actually going to see

00:03:35,840 --> 00:03:40,220
the output and then I can figure out if

00:03:37,610 --> 00:03:43,220
this thing is even satisfied what I need

00:03:40,220 --> 00:03:45,110
to do and this also encourages people to

00:03:43,220 --> 00:03:46,190
work with your tools because if they're

00:03:45,110 --> 00:03:48,799
not sure if they're going to run a

00:03:46,190 --> 00:03:51,769
command that says get user from database

00:03:48,799 --> 00:03:53,840
and the last time they ran get user from

00:03:51,769 --> 00:03:55,910
database it deleted that user from the

00:03:53,840 --> 00:03:57,709
database and return back that that user

00:03:55,910 --> 00:03:59,150
JSON representation they're not going to

00:03:57,709 --> 00:04:02,330
ever run that command again regardless

00:03:59,150 --> 00:04:04,830
of whether or not you fix it so make it

00:04:02,330 --> 00:04:07,890
fun and easy to experiment

00:04:04,830 --> 00:04:10,110
you also can't solve everyone's problems

00:04:07,890 --> 00:04:12,300
all the time but that's okay if you

00:04:10,110 --> 00:04:14,310
enable composability in your tools

00:04:12,300 --> 00:04:15,540
you'll enable your users to be able to

00:04:14,310 --> 00:04:17,970
do what they want with the input and

00:04:15,540 --> 00:04:19,470
output to your program when I'm using

00:04:17,970 --> 00:04:21,260
command-line utility I need to be able

00:04:19,470 --> 00:04:25,110
to pipe it input from a different

00:04:21,260 --> 00:04:27,470
utility a file wherever because I may

00:04:25,110 --> 00:04:31,590
not want to copy and paste in you know a

00:04:27,470 --> 00:04:35,130
thousand twenty-four lines of text you

00:04:31,590 --> 00:04:37,230
can use a column in our data output for

00:04:35,130 --> 00:04:38,940
multiple rows this will enable me to use

00:04:37,230 --> 00:04:43,140
something like off to be able to easily

00:04:38,940 --> 00:04:44,880
integrate this into my work flows and if

00:04:43,140 --> 00:04:46,590
you can't do that like if your utility

00:04:44,880 --> 00:04:48,840
is too complicated and you can't support

00:04:46,590 --> 00:04:50,490
these types of inputs and outputs then

00:04:48,840 --> 00:04:52,770
give me some sort of plug-in feature or

00:04:50,490 --> 00:04:56,340
a script that can run to inject things

00:04:52,770 --> 00:04:58,080
and just follow the UNIX philosophy of

00:04:56,340 --> 00:05:00,390
doing one thing well as best as you can

00:04:58,080 --> 00:05:03,180
and make sure you can go both ways in

00:05:00,390 --> 00:05:07,140
and out of your program very easily from

00:05:03,180 --> 00:05:09,510
the trail so documentation is important

00:05:07,140 --> 00:05:10,710
I would say if you want other people to

00:05:09,510 --> 00:05:12,840
use your utility make sure your

00:05:10,710 --> 00:05:16,350
documentation is complete and as clear

00:05:12,840 --> 00:05:18,080
as possible it'll even help you you ever

00:05:16,350 --> 00:05:21,120
written a command-line utility like I

00:05:18,080 --> 00:05:22,800
had five years ago and then you realize

00:05:21,120 --> 00:05:25,050
I think I've already written this before

00:05:22,800 --> 00:05:26,730
and you find it but you can't remember

00:05:25,050 --> 00:05:28,140
the switches to make it do what you

00:05:26,730 --> 00:05:30,930
wanted to do and then you have to fire

00:05:28,140 --> 00:05:33,390
up the editor and read it and if what

00:05:30,930 --> 00:05:36,500
was a five second run turns into an hour

00:05:33,390 --> 00:05:38,700
long like why am i using that module so

00:05:36,500 --> 00:05:42,120
just make the doctor complete when you

00:05:38,700 --> 00:05:43,560
start then you can say in channel RTFM

00:05:42,120 --> 00:05:46,169
to the user who's asking you questions

00:05:43,560 --> 00:05:48,930
and it's legitimate and you can go back

00:05:46,169 --> 00:05:52,620
to doing your job always support - -

00:05:48,930 --> 00:05:54,660
help if you can support - - manual as

00:05:52,620 --> 00:05:57,270
well which would be a deeper dive into

00:05:54,660 --> 00:05:59,010
utility and then tell your users where

00:05:57,270 --> 00:06:01,560
to go to get in for me more information

00:05:59,010 --> 00:06:03,270
maybe it's just come see me maybe it's

00:06:01,560 --> 00:06:05,070
you know go see this other utility that

00:06:03,270 --> 00:06:07,020
it's using or calling in the background

00:06:05,070 --> 00:06:08,910
but make sure you have that information

00:06:07,020 --> 00:06:10,680
available that you would want to be able

00:06:08,910 --> 00:06:13,050
that you had available to you when

00:06:10,680 --> 00:06:15,240
revert the utility and if you're really

00:06:13,050 --> 00:06:17,070
in you know if you really want to get

00:06:15,240 --> 00:06:17,590
better at writing and possibly even

00:06:17,070 --> 00:06:19,510
present

00:06:17,590 --> 00:06:21,610
go ahead and write a blog post about it

00:06:19,510 --> 00:06:23,290
a lot of companies have internal blogs

00:06:21,610 --> 00:06:25,060
if not they have wiki's treat it like a

00:06:23,290 --> 00:06:26,860
blog write a full article about it you

00:06:25,060 --> 00:06:29,350
don't have to just write boring

00:06:26,860 --> 00:06:33,400
technical documentation on your way make

00:06:29,350 --> 00:06:36,310
people want to engage with it this is

00:06:33,400 --> 00:06:38,530
probably my most frustrating experience

00:06:36,310 --> 00:06:42,700
with command-line utilities show me how

00:06:38,530 --> 00:06:45,070
to use the thing what do you expect as

00:06:42,700 --> 00:06:45,700
arguments like I've seen this a million

00:06:45,070 --> 00:06:48,970
times

00:06:45,700 --> 00:06:52,840
start stop when to start wind stop okay

00:06:48,970 --> 00:06:55,810
do you want a UNIX epoch you want an ISO

00:06:52,840 --> 00:06:58,120
8601 format a date is it okay for me to

00:06:55,810 --> 00:07:00,220
say now - five minutes is it okay for me

00:06:58,120 --> 00:07:03,790
to say yesterday is it okay for me to

00:07:00,220 --> 00:07:05,380
say now I don't know and if you haven't

00:07:03,790 --> 00:07:06,729
provided me with some example use cases

00:07:05,380 --> 00:07:10,750
of what you're expecting in these

00:07:06,729 --> 00:07:13,660
arguments I don't know what to do with

00:07:10,750 --> 00:07:14,889
it also show me what how you run you

00:07:13,660 --> 00:07:16,840
know when you build the utility you're

00:07:14,889 --> 00:07:18,610
building it for a specific purpose you

00:07:16,840 --> 00:07:20,710
probably have a command history after

00:07:18,610 --> 00:07:22,870
you've run this utility 10 or 15 line

00:07:20,710 --> 00:07:24,880
feet copy and paste those into the

00:07:22,870 --> 00:07:27,550
utilities examples and just give those

00:07:24,880 --> 00:07:28,990
if you're too got too much to do and you

00:07:27,550 --> 00:07:30,789
can't spend time to explain with each

00:07:28,990 --> 00:07:32,770
one of the examples does that is

00:07:30,789 --> 00:07:34,360
perfectly okay just give me some

00:07:32,770 --> 00:07:36,970
examples if this is something that

00:07:34,360 --> 00:07:38,979
you've done that has been successful and

00:07:36,970 --> 00:07:41,789
don't paste in stuff that doesn't work

00:07:38,979 --> 00:07:44,410
because that's not going to help it if

00:07:41,789 --> 00:07:46,210
you can also show me the output and that

00:07:44,410 --> 00:07:49,030
you know you expected that output that

00:07:46,210 --> 00:07:50,289
would be really cool as well here's

00:07:49,030 --> 00:07:52,360
something I recently discovered on some

00:07:50,289 --> 00:07:55,419
of the tools at Craigslist there are

00:07:52,360 --> 00:07:58,539
power user base those power user modes

00:07:55,419 --> 00:08:01,750
are undocumented when the tools are

00:07:58,539 --> 00:08:03,010
written the explanation was power users

00:08:01,750 --> 00:08:06,100
should be able to read the source code

00:08:03,010 --> 00:08:08,110
and figure them out I don't like the

00:08:06,100 --> 00:08:10,930
designation of power users every one of

00:08:08,110 --> 00:08:13,060
your users should be a power user if you

00:08:10,930 --> 00:08:14,919
are separating people into these

00:08:13,060 --> 00:08:18,389
classifications they're going to fall in

00:08:14,919 --> 00:08:20,919
and stay in this classification enable

00:08:18,389 --> 00:08:23,470
document everything if you have some

00:08:20,919 --> 00:08:26,169
really cool hidden features document

00:08:23,470 --> 00:08:27,200
them you know why because when I found

00:08:26,169 --> 00:08:29,450
these tools

00:08:27,200 --> 00:08:30,890
they didn't do what I needed them to do

00:08:29,450 --> 00:08:33,700
so what did I do

00:08:30,890 --> 00:08:36,500
I wrote a utility that did what I needed

00:08:33,700 --> 00:08:38,570
then I find out three months later that

00:08:36,500 --> 00:08:39,410
the original utility supported what I

00:08:38,570 --> 00:08:41,660
needed

00:08:39,410 --> 00:08:44,120
but I've already started development and

00:08:41,660 --> 00:08:46,220
bug tracking for a whole name utility so

00:08:44,120 --> 00:08:48,830
the original utility by the original

00:08:46,220 --> 00:08:50,270
author has stagnated because no one is

00:08:48,830 --> 00:08:52,640
developing it anymore because it doesn't

00:08:50,270 --> 00:08:55,100
do what they want to be done in the

00:08:52,640 --> 00:08:56,690
documentation so that's going to prevent

00:08:55,100 --> 00:08:58,220
that it's going to cause nation in

00:08:56,690 --> 00:09:01,580
your tools it's going to prevent people

00:08:58,220 --> 00:09:03,080
from reusing them and it also takes me

00:09:01,580 --> 00:09:04,370
off a little bit like you don't think

00:09:03,080 --> 00:09:07,310
that you don't have enough confidence

00:09:04,370 --> 00:09:08,780
and we use those extra features it gets

00:09:07,310 --> 00:09:10,790
under my skin a little bit so don't do

00:09:08,780 --> 00:09:12,650
that don't have hidden features document

00:09:10,790 --> 00:09:15,350
everything treat everyone with respect

00:09:12,650 --> 00:09:19,010
assume everyone is a power user and they

00:09:15,350 --> 00:09:21,020
will be humble all right so let's talk

00:09:19,010 --> 00:09:23,540
about writing command-line utilities in

00:09:21,020 --> 00:09:28,550
Perl how many people write command-line

00:09:23,540 --> 00:09:31,010
utilities in Perl okay everyone does you

00:09:28,550 --> 00:09:32,840
might not admit it but they're prolific

00:09:31,010 --> 00:09:34,250
and infinite right they're never we're

00:09:32,840 --> 00:09:35,360
never going to stop writing new command

00:09:34,250 --> 00:09:36,470
line utilities and pearls so they're

00:09:35,360 --> 00:09:39,500
going to go on to the heat death of the

00:09:36,470 --> 00:09:42,140
universe they range from very specific

00:09:39,500 --> 00:09:43,670
to very generic and here's the thing

00:09:42,140 --> 00:09:46,340
like if you were a command-line

00:09:43,670 --> 00:09:49,400
utilities there's a whole namespace in

00:09:46,340 --> 00:09:52,550
Sipan just for that it's called app you

00:09:49,400 --> 00:09:54,590
think it's boring and stupid but you

00:09:52,550 --> 00:09:56,680
know unless it's written against your

00:09:54,590 --> 00:09:59,090
company's proprietary infrastructure

00:09:56,680 --> 00:10:01,040
we're are not snowflakes everyone has

00:09:59,090 --> 00:10:03,380
the same problem upload that to the

00:10:01,040 --> 00:10:05,180
Sipan it's a great way to get users it's

00:10:03,380 --> 00:10:06,710
a great way to get bug reports it's a

00:10:05,180 --> 00:10:08,840
great way to find out how people use

00:10:06,710 --> 00:10:10,220
your utility and that makes you feel

00:10:08,840 --> 00:10:12,410
good when you find out that someone's

00:10:10,220 --> 00:10:14,270
running your code we are like glue of

00:10:12,410 --> 00:10:15,490
the Internet so let's let's keep gluing

00:10:14,270 --> 00:10:19,430
it together

00:10:15,490 --> 00:10:21,350
when you do right tools in imperiling on

00:10:19,430 --> 00:10:22,700
the command line you should if you're

00:10:21,350 --> 00:10:27,950
going to expect user input you should

00:10:22,700 --> 00:10:29,330
use the magic diamond this example uses

00:10:27,950 --> 00:10:32,450
a double diamond which is available

00:10:29,330 --> 00:10:33,830
since Pearl 5:22 if you're supporting

00:10:32,450 --> 00:10:36,560
the users before that you'll have to use

00:10:33,830 --> 00:10:40,480
the single single magic diamond there

00:10:36,560 --> 00:10:42,530
but what the Double Diamond and

00:10:40,480 --> 00:10:46,720
single diamonds both do is give you a

00:10:42,530 --> 00:10:50,210
way to input a file or command into the

00:10:46,720 --> 00:10:52,100
input of your command so that you can

00:10:50,210 --> 00:10:53,840
chain your commands together on the

00:10:52,100 --> 00:10:55,550
command line if you use the double

00:10:53,840 --> 00:10:57,890
diamond then you get the added benefit

00:10:55,550 --> 00:10:59,570
of making sure that whatever command is

00:10:57,890 --> 00:11:01,280
passed in with paint checks on the way

00:10:59,570 --> 00:11:03,860
in there's no security vulnerabilities

00:11:01,280 --> 00:11:05,480
this may or may not be important if you

00:11:03,860 --> 00:11:07,580
are writing utilities that will be run

00:11:05,480 --> 00:11:10,430
as the super users and I would recommend

00:11:07,580 --> 00:11:13,370
that you insist on Perl 522 or later and

00:11:10,430 --> 00:11:18,380
use this double diamond operator instead

00:11:13,370 --> 00:11:21,380
of using the single magic diamond get up

00:11:18,380 --> 00:11:25,460
long descriptive on this is amazing

00:11:21,380 --> 00:11:28,010
utility this allows you to get all of to

00:11:25,460 --> 00:11:30,590
describe and validate all of your

00:11:28,010 --> 00:11:34,400
command line inputs in a single call and

00:11:30,590 --> 00:11:36,440
then you get the usage text for free so

00:11:34,400 --> 00:11:38,330
it's really helpful if you're not using

00:11:36,440 --> 00:11:40,460
it off only descriptive to write command

00:11:38,330 --> 00:11:42,770
line utilities you're doing yourself a

00:11:40,460 --> 00:11:45,500
disservice because later when you go

00:11:42,770 --> 00:11:47,420
back to this utility and you're trying

00:11:45,500 --> 00:11:49,900
to figure out what - end means is

00:11:47,420 --> 00:11:53,570
exactly there laughs there's a - name

00:11:49,900 --> 00:11:55,040
what does what does - enemy this this

00:11:53,570 --> 00:11:56,750
utility actually forces you to write

00:11:55,040 --> 00:11:58,640
good documentation from the very GetGo

00:11:56,750 --> 00:12:02,660
so it's not like a lazy way of reminding

00:11:58,640 --> 00:12:04,550
himself to write documentation here's

00:12:02,660 --> 00:12:08,960
the what would happen if we were to run

00:12:04,550 --> 00:12:11,990
- - health so we actually we set it up

00:12:08,960 --> 00:12:15,780
here and then we have usage already

00:12:11,990 --> 00:12:18,330
available to us so that's very nice

00:12:15,780 --> 00:12:20,070
patan usage is another great utility for

00:12:18,330 --> 00:12:25,320
being able to put together a more

00:12:20,070 --> 00:12:26,820
verbose man page I tend to use these two

00:12:25,320 --> 00:12:28,380
modules together there's little rough

00:12:26,820 --> 00:12:30,150
edges on them it's one of the things I'd

00:12:28,380 --> 00:12:32,370
like to sort out is making these two

00:12:30,150 --> 00:12:34,050
things a little bit more integrated so

00:12:32,370 --> 00:12:37,290
that I can take advantage of them

00:12:34,050 --> 00:12:39,660
simultaneously but it's very simple to

00:12:37,290 --> 00:12:42,300
dump usage information using pod that

00:12:39,660 --> 00:12:45,750
you've embedded in the document of your

00:12:42,300 --> 00:12:48,270
script term redline is available there's

00:12:45,750 --> 00:12:51,090
a pure pro version there's a sea version

00:12:48,270 --> 00:12:53,910
that uses the GNU library if it's

00:12:51,090 --> 00:12:56,130
available on term Reed - it's nice if

00:12:53,910 --> 00:12:59,040
you're going to have a prompt in your

00:12:56,130 --> 00:13:00,660
command and users are going to be able

00:12:59,040 --> 00:13:02,520
to do things like a my sequel command

00:13:00,660 --> 00:13:04,080
prompt to be able to select data from a

00:13:02,520 --> 00:13:05,340
database or something like that this

00:13:04,080 --> 00:13:07,290
will preserve history it'll be

00:13:05,340 --> 00:13:09,360
scrollable with the off arrow and you

00:13:07,290 --> 00:13:11,220
have support for disabling echoing if

00:13:09,360 --> 00:13:12,420
you need to prompt for passwords and

00:13:11,220 --> 00:13:14,280
things like that there's some other

00:13:12,420 --> 00:13:15,900
features in here that are really great

00:13:14,280 --> 00:13:17,670
but most of the time those are the

00:13:15,900 --> 00:13:22,260
really those are the only two that I've

00:13:17,670 --> 00:13:23,700
used in depth I know this is

00:13:22,260 --> 00:13:25,620
controversial there's a lot of cruft the

00:13:23,700 --> 00:13:28,020
old specimens who hate colored output

00:13:25,620 --> 00:13:30,090
but colored output provides me with

00:13:28,020 --> 00:13:32,850
additional clues to be able to

00:13:30,090 --> 00:13:36,960
understand what it is your command is

00:13:32,850 --> 00:13:39,420
doing and receive repeated patterns more

00:13:36,960 --> 00:13:42,060
easily so if you can add hints add hints

00:13:39,420 --> 00:13:44,340
some like I said some users don't like

00:13:42,060 --> 00:13:46,800
them but almost everyone is running yet

00:13:44,340 --> 00:13:50,310
these days right so in get there's a

00:13:46,800 --> 00:13:52,500
color Auto variable so your command line

00:13:50,310 --> 00:13:54,270
script could peek into that users get

00:13:52,500 --> 00:13:56,280
config and automatically turn on and

00:13:54,270 --> 00:13:59,710
turn off colors if that's something you

00:13:56,280 --> 00:14:04,030
want to do and I highly recommend

00:13:59,710 --> 00:14:06,800
so here's a few honorable mentions about

00:14:04,030 --> 00:14:09,830
stuff that I use when I'm doing

00:14:06,800 --> 00:14:13,700
command-line utility work I want to

00:14:09,830 --> 00:14:15,680
point out a path tiny is pretty much if

00:14:13,700 --> 00:14:18,470
you need to do anything with files file

00:14:15,680 --> 00:14:21,230
descriptors directories searching paths

00:14:18,470 --> 00:14:22,940
tiny is amazing you will be happy

00:14:21,230 --> 00:14:24,890
you'll write prettier code you'll write

00:14:22,940 --> 00:14:27,230
more maintainable code and it will be

00:14:24,890 --> 00:14:28,640
pretty quick as well and I wanted to

00:14:27,230 --> 00:14:29,990
show one other things because I have

00:14:28,640 --> 00:14:32,270
this in there but I don't know that many

00:14:29,990 --> 00:14:35,930
people work with this I use diesel to

00:14:32,270 --> 00:14:38,510
install my releases and diesel I use odd

00:14:35,930 --> 00:14:40,010
Weaver to build all my documentation so

00:14:38,510 --> 00:14:42,890
there's this cool thing called collect

00:14:40,010 --> 00:14:45,800
from other and basically what happens is

00:14:42,890 --> 00:14:48,530
when you build the module with diesel it

00:14:45,800 --> 00:14:51,350
will actually collect that section arts

00:14:48,530 --> 00:14:53,780
from this module CIA helpers so long a

00:14:51,350 --> 00:14:57,200
CLI health helpers is installed in ink

00:14:53,780 --> 00:14:59,360
so if I'm using libraries that add in

00:14:57,200 --> 00:15:01,760
arguments or add in functionality or

00:14:59,360 --> 00:15:04,190
have like text that I want to use in my

00:15:01,760 --> 00:15:06,050
documentation I can just grab that into

00:15:04,190 --> 00:15:07,790
my code and I don't have to rewrite it

00:15:06,050 --> 00:15:09,290
so the Google Places documentation that

00:15:07,790 --> 00:15:12,920
you need to write and that's really

00:15:09,290 --> 00:15:15,530
amazing so there's a cool module that I

00:15:12,920 --> 00:15:17,780
built I think it's cool called CLI

00:15:15,530 --> 00:15:20,840
helpers so this is to help you do the

00:15:17,780 --> 00:15:21,980
things that I just explained it wraps a

00:15:20,840 --> 00:15:24,230
whole bunch of stuff it done some really

00:15:21,980 --> 00:15:26,750
cool things we have five minutes left to

00:15:24,230 --> 00:15:27,440
kind of go through it so I will go stats

00:15:26,750 --> 00:15:30,920
if I can

00:15:27,440 --> 00:15:35,030
so here we have a simple confirmed

00:15:30,920 --> 00:15:37,520
prompt just exports confirmed when you

00:15:35,030 --> 00:15:40,130
use input there's a few other options as

00:15:37,520 --> 00:15:42,710
well so this will do exactly what you

00:15:40,130 --> 00:15:45,980
expect it to do when you run it if you

00:15:42,710 --> 00:15:49,220
say yes it will die if you say no it

00:15:45,980 --> 00:15:51,650
will skip you wanted to have a menu if

00:15:49,220 --> 00:15:53,780
the Navy is saying prompt and this is

00:15:51,650 --> 00:15:56,120
the prompt and here's the menu that I

00:15:53,780 --> 00:15:58,430
want this is inspired by IO prompts and

00:15:56,120 --> 00:16:00,650
IO copter but you may or may not know

00:15:58,430 --> 00:16:02,570
that IO prompt and IO prompter don't

00:16:00,650 --> 00:16:04,430
work on certain versions of Perl and

00:16:02,570 --> 00:16:06,260
they're not backwards compatible it's a

00:16:04,430 --> 00:16:08,330
mess and if you need to support Perl

00:16:06,260 --> 00:16:11,330
back to 5/6 like I use some of my

00:16:08,330 --> 00:16:16,600
I can't use a module that only works

00:16:11,330 --> 00:16:19,340
after 512 so it's inspired by it and

00:16:16,600 --> 00:16:22,820
what runs on pearl as far back as I can

00:16:19,340 --> 00:16:24,500
test there's menu that would be

00:16:22,820 --> 00:16:26,540
generated from that particular things we

00:16:24,500 --> 00:16:29,380
went to our selection and until you

00:16:26,540 --> 00:16:33,140
enter 1 through 7 we've seen the menu

00:16:29,380 --> 00:16:35,810
when you can't write in garbled book you

00:16:33,140 --> 00:16:39,200
can also specify hash if you specify ash

00:16:35,810 --> 00:16:41,630
and the value of the hash is labeled and

00:16:39,200 --> 00:16:44,210
the key is going to be the value that's

00:16:41,630 --> 00:16:46,960
returned from the prompt function so in

00:16:44,210 --> 00:16:50,690
this case if you were to select north

00:16:46,960 --> 00:16:54,080
north from the menu the variable der

00:16:50,690 --> 00:16:55,820
would be north you can also do

00:16:54,080 --> 00:16:58,850
validation right now it's not working

00:16:55,820 --> 00:17:00,830
with params validate and friends

00:16:58,850 --> 00:17:03,140
validate compiler but I'm thinking about

00:17:00,830 --> 00:17:05,300
adding that feature in but it follows

00:17:03,140 --> 00:17:10,250
the same sort of pattern that you would

00:17:05,300 --> 00:17:12,680
expect so here we're validating an

00:17:10,250 --> 00:17:14,600
integer if it doesn't match you can see

00:17:12,680 --> 00:17:18,890
we get not an integer which is a

00:17:14,600 --> 00:17:20,330
television there's some really cool

00:17:18,890 --> 00:17:22,130
alpha functions most of the reason I

00:17:20,330 --> 00:17:25,850
actually designed this utility was for

00:17:22,130 --> 00:17:27,170
the output functionality which enables

00:17:25,850 --> 00:17:29,480
you to do some cool stuff so here's some

00:17:27,170 --> 00:17:30,770
of the output options that it supports -

00:17:29,480 --> 00:17:32,270
just color is an option but it

00:17:30,770 --> 00:17:34,010
automatically detects whether or not you

00:17:32,270 --> 00:17:36,530
have color enabled at you get config and

00:17:34,010 --> 00:17:38,090
if you specify color in your output it

00:17:36,530 --> 00:17:40,400
will use the colors otherwise it will

00:17:38,090 --> 00:17:43,040
disable them on you can alpha data to a

00:17:40,400 --> 00:17:44,840
file you can output data at different

00:17:43,040 --> 00:17:47,090
levels so you have ro possibly you also

00:17:44,840 --> 00:17:49,250
have bugs we can say quiet if you're

00:17:47,090 --> 00:17:51,440
running in and like the prawns having to

00:17:49,250 --> 00:17:53,540
understand yourself and then you ki

00:17:51,440 --> 00:17:56,360
syslog output and he's quiet and v log

00:17:53,540 --> 00:17:57,830
the right thing happens the syslog date

00:17:56,360 --> 00:18:01,880
the data goes to this phone but it

00:17:57,830 --> 00:18:04,160
doesn't so here's just a very simple

00:18:01,880 --> 00:18:07,760
example it exports this function called

00:18:04,160 --> 00:18:10,670
output and verbose we also have outputs

00:18:07,760 --> 00:18:12,140
and export some code debug and they do

00:18:10,670 --> 00:18:13,670
exactly what you expect when you run it

00:18:12,140 --> 00:18:16,540
without verbosity you don't kick the

00:18:13,670 --> 00:18:18,680
first line but when you do

00:18:16,540 --> 00:18:20,360
there's a few decorators that you can

00:18:18,680 --> 00:18:22,670
use inside of that hash trap that you

00:18:20,360 --> 00:18:25,460
pass to make things prettier if you

00:18:22,670 --> 00:18:27,440
wanted to come on blue then you run it

00:18:25,460 --> 00:18:29,990
and you didn't have color exported in

00:18:27,440 --> 00:18:32,840
your big config to color but if you did

00:18:29,990 --> 00:18:35,390
or you specified - - color you would get

00:18:32,840 --> 00:18:37,490
the color there's an option called

00:18:35,390 --> 00:18:39,830
sticky and clear clear will give you a

00:18:37,490 --> 00:18:41,240
new line before doubt put sticky will

00:18:39,830 --> 00:18:43,400
make sure that that line is always

00:18:41,240 --> 00:18:45,560
outside at the end of the run so there's

00:18:43,400 --> 00:18:47,870
an end block that runs that it will put

00:18:45,560 --> 00:18:49,460
any sticky lines so when you run this

00:18:47,870 --> 00:18:52,070
even though you've only included that

00:18:49,460 --> 00:18:55,460
that first line once that this is my

00:18:52,070 --> 00:18:57,290
thanks for my great utility you get it

00:18:55,460 --> 00:18:59,120
twice because it's always output at the

00:18:57,290 --> 00:19:00,680
end this is useful for error messages

00:18:59,120 --> 00:19:02,150
when you want to make sure the user can

00:19:00,680 --> 00:19:05,360
see the error message and you might have

00:19:02,150 --> 00:19:07,810
a huge you know screen

00:19:05,360 --> 00:19:11,300
here's debug the same thing as before

00:19:07,810 --> 00:19:15,500
and we go to up to debug everything is

00:19:11,300 --> 00:19:17,300
happy what's nice about b-bugs is you

00:19:15,500 --> 00:19:19,970
can embed debug calls in all of your

00:19:17,300 --> 00:19:21,980
modules that you're using and you can

00:19:19,970 --> 00:19:24,140
specify debug class which by default is

00:19:21,980 --> 00:19:26,540
only main but if you specify a different

00:19:24,140 --> 00:19:30,050
class or comma separated list of classes

00:19:26,540 --> 00:19:31,790
you will also get that list of debug

00:19:30,050 --> 00:19:33,590
output from those modules so it's really

00:19:31,790 --> 00:19:35,120
helpful for doing development at a

00:19:33,590 --> 00:19:37,610
minute command-line utility choosing

00:19:35,120 --> 00:19:39,980
modules that you've written your syslog

00:19:37,610 --> 00:19:42,470
very simple we've all seen syslog before

00:19:39,980 --> 00:19:44,840
why it does exactly what I said doesn't

00:19:42,470 --> 00:19:49,340
send anything to terminal and writes the

00:19:44,840 --> 00:19:52,310
specific if you specify data like this

00:19:49,340 --> 00:19:54,890
then this becomes the data output and we

00:19:52,310 --> 00:19:56,540
can then specify a data file you can see

00:19:54,890 --> 00:19:58,220
here beautiful test that out and then

00:19:56,540 --> 00:20:00,430
after we run it we only have two data

00:19:58,220 --> 00:20:02,650
sections we skip all the headers and

00:20:00,430 --> 00:20:06,470
these are some of the options for the

00:20:02,650 --> 00:20:07,520
decorators for output coming in their

00:20:06,470 --> 00:20:09,500
new release is going to be tagged so

00:20:07,520 --> 00:20:11,930
it'll be like data but it will also

00:20:09,500 --> 00:20:14,950
provide you the ability to filter out

00:20:11,930 --> 00:20:17,390
your output by by tags instead of just

00:20:14,950 --> 00:20:19,670
classes stuff like that there's more

00:20:17,390 --> 00:20:21,560
here some of the future stuff after

00:20:19,670 --> 00:20:22,730
seeing the talk yesterday on VII start

00:20:21,560 --> 00:20:24,890
up I want to start I want to integrate

00:20:22,730 --> 00:20:27,650
with that so we slide a full platform

00:20:24,890 --> 00:20:28,700
for doing really easy simple great CLI

00:20:27,650 --> 00:20:29,720
development

00:20:28,700 --> 00:20:31,730
want to integrate a little bit better

00:20:29,720 --> 00:20:35,120
with get up along descriptives the tag

00:20:31,730 --> 00:20:37,100
stuff and your idea here this is me this

00:20:35,120 --> 00:20:39,470
is also my github is also a medicine can

00:20:37,100 --> 00:20:41,690
already available I use its production

00:20:39,470 --> 00:20:43,400
all the time I work at Craigslist easy

00:20:41,690 --> 00:20:53,120
cool stuff and good stuff on the

00:20:43,400 --> 00:20:54,800
internet and we're hiring so are there

00:20:53,120 --> 00:20:56,950
any questions we might have a time for

00:20:54,800 --> 00:20:56,950

YouTube URL: https://www.youtube.com/watch?v=lUGm5c4ubZA


