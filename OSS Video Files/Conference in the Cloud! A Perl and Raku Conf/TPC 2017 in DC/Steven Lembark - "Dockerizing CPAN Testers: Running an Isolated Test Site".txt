Title: Steven Lembark - "Dockerizing CPAN Testers: Running an Isolated Test Site"
Publication date: 2017-06-22
Playlist: TPC 2017 in DC
Description: 
	The CPAN testers network is an amazing outgrowth of Perl's "tesing culture". Authors get their modules tested on hundreds of O/S and Perl platform combinations. Setting up and managing a machine dedicated to testing can be difficult, however, even a virtual machine requires a lot of extra work to keep running. Docker (containers in general) provide an alternative: all it requires is the shared libraries for Perl and a way to import CPAN modules for tesing. The ability to manage resources and suspend/restart the containers also makes this nice for background work on larger systems.

This talk discusses the basics of setting up the CPAN testers code in a docker container and running the test cycle for in-house testing or as part of the general tester's network.

Steve Lembark has been playing with Perl for a while.
Captions: 
	00:00:00,000 --> 00:00:06,450
so how many people here have used docker

00:00:02,250 --> 00:00:09,420
before at all just about everyone so

00:00:06,450 --> 00:00:12,540
we've got some hope there this actually

00:00:09,420 --> 00:00:15,570
doesn't have much pearl in it most of

00:00:12,540 --> 00:00:18,510
this talk is about using shell to build

00:00:15,570 --> 00:00:23,609
a working smoke environment for smoking

00:00:18,510 --> 00:00:28,289
Sipan inside of docker so the first

00:00:23,609 --> 00:00:30,449
thing is what is smoking the basic thing

00:00:28,289 --> 00:00:34,770
you get into where the smoke test does

00:00:30,449 --> 00:00:37,920
it catch fire so you've got you know you

00:00:34,770 --> 00:00:39,390
know this came from old tube systems

00:00:37,920 --> 00:00:41,280
where you were making sure the tubes

00:00:39,390 --> 00:00:43,680
work by just plugging it in we had a

00:00:41,280 --> 00:00:46,770
shower of sparks nothing's wrong

00:00:43,680 --> 00:00:48,539
smoke testing it's in the code is does

00:00:46,770 --> 00:00:50,070
it build we're not doing white box

00:00:48,539 --> 00:00:51,390
testing we're not doing black box

00:00:50,070 --> 00:00:55,110
testing we're not doing regression

00:00:51,390 --> 00:00:58,590
testing simple question does it fiddle

00:00:55,110 --> 00:01:01,710
for pearl using Sipan that means we can

00:00:58,590 --> 00:01:04,670
grab the makefile TL to build that VL we

00:01:01,710 --> 00:01:08,000
could run it and things survives

00:01:04,670 --> 00:01:11,939
now Sipan which is interesting

00:01:08,000 --> 00:01:14,010
pearl is unusual among languages he's

00:01:11,939 --> 00:01:16,229
fine today because we actually run the

00:01:14,010 --> 00:01:18,509
tests as part of the install for

00:01:16,229 --> 00:01:20,250
everybody everywhere so when you go in

00:01:18,509 --> 00:01:22,770
to see pan or run a build that peel and

00:01:20,250 --> 00:01:25,619
you don't install the test is is part of

00:01:22,770 --> 00:01:27,689
it Sipan reporter how many people here

00:01:25,619 --> 00:01:31,079
you see pan reporter actually report the

00:01:27,689 --> 00:01:33,990
results of their tests see pan reporter

00:01:31,079 --> 00:01:36,119
what it does is it's an addition to the

00:01:33,990 --> 00:01:37,590
standard test cycle if you install it

00:01:36,119 --> 00:01:39,210
I'd recommend everyone does it because

00:01:37,590 --> 00:01:42,299
it just gives us all better feedback on

00:01:39,210 --> 00:01:44,100
what's going on in the world it sends

00:01:42,299 --> 00:01:46,049
out an email with the results of the

00:01:44,100 --> 00:01:48,600
test so for example every morning I wake

00:01:46,049 --> 00:01:52,560
up and I click on a little seat pan

00:01:48,600 --> 00:01:55,500
mailing and I can see places that my

00:01:52,560 --> 00:01:58,680
modules were tested on platforms I don't

00:01:55,500 --> 00:02:01,079
even own BSD windows I think the last

00:01:58,680 --> 00:02:03,299
VMs server finally died a few years ago

00:02:01,079 --> 00:02:06,119
but I found out that fine bin lives

00:02:03,299 --> 00:02:08,250
actually works on VMs on a weekly basis

00:02:06,119 --> 00:02:10,140
back then which is great as a module

00:02:08,250 --> 00:02:11,850
author because I don't have to have a

00:02:10,140 --> 00:02:14,040
copy of BSD I don't have to have

00:02:11,850 --> 00:02:15,750
coppy women's I don't have to have 18

00:02:14,040 --> 00:02:17,490
Linux distros I don't have to have

00:02:15,750 --> 00:02:18,900
copies of turtle going after five eight

00:02:17,490 --> 00:02:20,730
to know whether or not my code works on

00:02:18,900 --> 00:02:22,760
them it's also great for bleeding-edge

00:02:20,730 --> 00:02:25,770
because I can find things out early

00:02:22,760 --> 00:02:31,560
before something's released I can I can

00:02:25,770 --> 00:02:34,890
fix things so Sipan reporter smoker all

00:02:31,560 --> 00:02:37,500
it does is grab the recents file off a

00:02:34,890 --> 00:02:39,690
seat pan find the new modules and then

00:02:37,500 --> 00:02:40,950
try and build everything there are

00:02:39,690 --> 00:02:43,860
certain number things that won't work

00:02:40,950 --> 00:02:45,780
with very well mod Perl bioperl they're

00:02:43,860 --> 00:02:47,130
just things that are too big they'd have

00:02:45,780 --> 00:02:49,890
too many dependencies that are too

00:02:47,130 --> 00:02:51,720
involved to install but it'll take most

00:02:49,890 --> 00:02:54,510
of the things that most of us upload and

00:02:51,720 --> 00:02:56,730
it just says hi do a build if the build

00:02:54,510 --> 00:03:01,020
succeeds that gets plastered if it build

00:02:56,730 --> 00:03:04,040
fails the author gets a email that says

00:03:01,020 --> 00:03:07,520
this is where it blew up and a log of it

00:03:04,040 --> 00:03:11,220
so you need machines to run this and

00:03:07,520 --> 00:03:12,720
where it gets is you know why we smoke

00:03:11,220 --> 00:03:15,360
tasks as you think about it regression

00:03:12,720 --> 00:03:16,920
testing you've got an obvious reason you

00:03:15,360 --> 00:03:19,770
want to see if something works blackbox

00:03:16,920 --> 00:03:21,510
like smoke testing there are a couple of

00:03:19,770 --> 00:03:23,850
different reasons people do it they're

00:03:21,510 --> 00:03:26,010
different blocks of code people test one

00:03:23,850 --> 00:03:27,990
of them is you want to verify your

00:03:26,010 --> 00:03:29,490
personal modules so you've got a sandbox

00:03:27,990 --> 00:03:32,790
directory you want to go into each one

00:03:29,490 --> 00:03:33,900
and say you know does whatever I have

00:03:32,790 --> 00:03:36,200
does it work

00:03:33,900 --> 00:03:38,700
kind of can I at least install it myself

00:03:36,200 --> 00:03:40,050
you might also have something where

00:03:38,700 --> 00:03:42,260
you've got a large project your

00:03:40,050 --> 00:03:45,060
company's got something and you do a

00:03:42,260 --> 00:03:46,910
necessarily weekly integration build but

00:03:45,060 --> 00:03:49,650
one of the things you might want to do

00:03:46,910 --> 00:03:53,640
again for example if you do a Sipan

00:03:49,650 --> 00:03:55,590
upgrade does the stuff I have work well

00:03:53,640 --> 00:03:57,660
with my current upgraded version of

00:03:55,590 --> 00:03:59,220
everything and it's easy enough to do

00:03:57,660 --> 00:04:01,410
you go through you make all of them if

00:03:59,220 --> 00:04:04,260
something blows up because a module you

00:04:01,410 --> 00:04:06,120
depend on is broken or changed you'll at

00:04:04,260 --> 00:04:07,800
least know about it and then there's the

00:04:06,120 --> 00:04:11,280
real hardcore addicts are the ones who

00:04:07,800 --> 00:04:13,530
test CPM and that means going into Sipan

00:04:11,280 --> 00:04:15,900
grab the recent slot or just randomly

00:04:13,530 --> 00:04:17,430
pull modules out of Sipan and just keep

00:04:15,900 --> 00:04:20,930
building them testing and building and

00:04:17,430 --> 00:04:23,130
testing them so when you go through that

00:04:20,930 --> 00:04:25,169
then the question is what are you going

00:04:23,130 --> 00:04:27,270
to smoke if it's your personal

00:04:25,169 --> 00:04:29,580
space it's going to be whatever's in

00:04:27,270 --> 00:04:31,919
your sandbox if it's a company that

00:04:29,580 --> 00:04:34,499
might be a number of repositories it

00:04:31,919 --> 00:04:36,779
might be one repository and a large

00:04:34,499 --> 00:04:40,590
number of directories but you're going

00:04:36,779 --> 00:04:42,300
to be smoke testing a bit more code and

00:04:40,590 --> 00:04:45,569
it might get a bit more involved if

00:04:42,300 --> 00:04:48,620
you're setting all of Sipan does people

00:04:45,569 --> 00:04:53,460
here you see the recent violence you can

00:04:48,620 --> 00:04:55,800
people know what that does is okay it

00:04:53,460 --> 00:04:58,289
lists the recent files literally it is

00:04:55,800 --> 00:05:00,689
every time somebody does it commit to

00:04:58,289 --> 00:05:03,240
Sipan it gets tacked on to the recent

00:05:00,689 --> 00:05:04,889
file which is neat because then if we

00:05:03,240 --> 00:05:08,009
want to smoke test it we can smoke test

00:05:04,889 --> 00:05:09,389
everything that's new so the the

00:05:08,009 --> 00:05:12,000
standard procedure then is you take

00:05:09,389 --> 00:05:13,889
whatever is new test it and then just

00:05:12,000 --> 00:05:17,819
keep randomly checking things and look

00:05:13,889 --> 00:05:20,849
for changes in the recent file but again

00:05:17,819 --> 00:05:22,439
the unit of how much you smoke is going

00:05:20,849 --> 00:05:28,319
to affect how you go about doing some of

00:05:22,439 --> 00:05:30,629
this stuff now if you're smoking your

00:05:28,319 --> 00:05:32,490
personal stuff you can just do a make -

00:05:30,629 --> 00:05:34,860
pee and all your your sandbox

00:05:32,490 --> 00:05:38,099
directories and you smell checked it

00:05:34,860 --> 00:05:39,750
you're done if it's a larger project you

00:05:38,099 --> 00:05:42,000
might have to go to github you might

00:05:39,750 --> 00:05:43,500
have to go to someplace else do updates

00:05:42,000 --> 00:05:46,080
you might have to pull things in from

00:05:43,500 --> 00:05:51,360
external vendor files but whatever

00:05:46,080 --> 00:05:53,219
you're doing it's going to be a fairly

00:05:51,360 --> 00:05:54,659
closed environment that's what's

00:05:53,219 --> 00:05:56,639
important about these - if you're

00:05:54,659 --> 00:05:59,339
checking Sipan you're going to be

00:05:56,639 --> 00:06:04,169
slurping whatever there is on Sipan

00:05:59,339 --> 00:06:06,839
however it works and that's where the

00:06:04,169 --> 00:06:08,430
risks come in smoking is not safe we've

00:06:06,839 --> 00:06:12,149
all seen a little morning on the boxes

00:06:08,430 --> 00:06:15,839
now I'm going to be let's say I'm smoke

00:06:12,149 --> 00:06:18,000
testing my own stuff I still have a risk

00:06:15,839 --> 00:06:20,849
because I may have a dependency on a

00:06:18,000 --> 00:06:24,270
module that gets pulled in and I may

00:06:20,849 --> 00:06:26,669
install some bogus code because I pulled

00:06:24,270 --> 00:06:29,639
in a module that's broken a little bit

00:06:26,669 --> 00:06:33,089
less likely but it can happen I might

00:06:29,639 --> 00:06:35,800
have made a mistake and tried my system

00:06:33,089 --> 00:06:37,720
there was one great module guy

00:06:35,800 --> 00:06:40,990
which one it was but if you were doing

00:06:37,720 --> 00:06:43,300
if your wording Sipan is super user the

00:06:40,990 --> 00:06:45,340
guy would turn off all signals just trap

00:06:43,300 --> 00:06:48,250
every signal with ignore and then do a

00:06:45,340 --> 00:06:51,909
file find on slash and then on the

00:06:48,250 --> 00:06:54,580
screen put RM minus RF slash dot dot die

00:06:51,909 --> 00:06:56,680
you know this would go on for about 10

00:06:54,580 --> 00:06:58,270
seconds then a message would pop up why

00:06:56,680 --> 00:07:01,930
would you ever run something as rude if

00:06:58,270 --> 00:07:04,330
you didn't know what it was doing but I

00:07:01,930 --> 00:07:06,580
got in trouble enough people had heart

00:07:04,330 --> 00:07:09,159
attacks but you see the point that

00:07:06,580 --> 00:07:11,259
somebody might not have you know space

00:07:09,159 --> 00:07:16,210
slash something is easy enough to put in

00:07:11,259 --> 00:07:18,190
and you can have stupid things you can

00:07:16,210 --> 00:07:19,810
have malicious code on Sipan really

00:07:18,190 --> 00:07:23,440
isn't the biggest problem but just

00:07:19,810 --> 00:07:24,940
stupidity is you know one space is all

00:07:23,440 --> 00:07:26,110
it takes to toast you especially if

00:07:24,940 --> 00:07:30,099
you're testing the stuff that's super

00:07:26,110 --> 00:07:31,599
user so the risks are are there even

00:07:30,099 --> 00:07:33,159
when you're testing your own stuff

00:07:31,599 --> 00:07:34,629
because you might pull in arbitrary

00:07:33,159 --> 00:07:37,719
things if you're testing your company's

00:07:34,629 --> 00:07:40,150
code you might be pulling in external

00:07:37,719 --> 00:07:42,699
vendor code they might make mistakes if

00:07:40,150 --> 00:07:44,680
you're testing Sipan you've got no idea

00:07:42,699 --> 00:07:47,199
what you might be running there's also

00:07:44,680 --> 00:07:49,120
second hand there are there's the

00:07:47,199 --> 00:07:50,800
possibility somebody ran something that

00:07:49,120 --> 00:07:54,580
reconfigured a network interface that

00:07:50,800 --> 00:07:57,810
leaves crushed files in VAR temp or in

00:07:54,580 --> 00:08:00,669
in one year of our live directories

00:07:57,810 --> 00:08:03,909
there are leftover test files that have

00:08:00,669 --> 00:08:06,400
to be swept out you can end up wasting

00:08:03,909 --> 00:08:08,229
disk space you can avoiding bandwidth if

00:08:06,400 --> 00:08:10,300
you're a bandwidth constrained

00:08:08,229 --> 00:08:14,500
environment you might not be wanting to

00:08:10,300 --> 00:08:16,599
run you know huge things the point is

00:08:14,500 --> 00:08:19,210
that there can be side effects from

00:08:16,599 --> 00:08:21,430
testing that aren't obvious when you run

00:08:19,210 --> 00:08:24,400
the tests and you've got it control for

00:08:21,430 --> 00:08:27,130
those so you need to protect yourself

00:08:24,400 --> 00:08:30,759
you want a sandbox for running these

00:08:27,130 --> 00:08:32,409
smoke tests it should be a disposable

00:08:30,759 --> 00:08:33,880
environment you want to be able to say

00:08:32,409 --> 00:08:36,370
you know what this thing is so polluted

00:08:33,880 --> 00:08:37,839
with leftover croft from failed tests

00:08:36,370 --> 00:08:40,570
but I just I don't want anymore

00:08:37,839 --> 00:08:42,539
and start over virtual machines what

00:08:40,570 --> 00:08:44,890
people generally have use for this

00:08:42,539 --> 00:08:47,649
problem with virtual machines is they're

00:08:44,890 --> 00:08:49,240
expensive I mean they cost money

00:08:47,649 --> 00:08:50,649
but they're also a lot of work to set up

00:08:49,240 --> 00:08:52,300
you gotta have chef you get a puppet you

00:08:50,649 --> 00:08:53,649
gotta learn yet one more language for

00:08:52,300 --> 00:08:55,029
configuring an entire operating system

00:08:53,649 --> 00:08:56,680
you've got to configure the logger

00:08:55,029 --> 00:08:59,259
you've got to configure cron you got to

00:08:56,680 --> 00:09:01,329
configure Tommy you're running an entire

00:08:59,259 --> 00:09:05,259
operating system for the sole purpose of

00:09:01,329 --> 00:09:07,779
wanting to throw it out not a very

00:09:05,259 --> 00:09:09,220
effective use oh wow for a long time

00:09:07,779 --> 00:09:11,800
people would use two routes for these

00:09:09,220 --> 00:09:16,240
things but chroot doesn't help you

00:09:11,800 --> 00:09:18,480
because it still allows somebody to mess

00:09:16,240 --> 00:09:21,279
around with network interfaces memory

00:09:18,480 --> 00:09:23,619
whatever it's not a good it's not really

00:09:21,279 --> 00:09:25,209
a container it can save you from file

00:09:23,619 --> 00:09:29,470
system problems but nothing more than

00:09:25,209 --> 00:09:33,910
that what you really want is a way to

00:09:29,470 --> 00:09:35,199
isolate processes and I want something

00:09:33,910 --> 00:09:39,879
lighter weight than a virtual machine

00:09:35,199 --> 00:09:41,829
but heavier weight than chroot bsd jails

00:09:39,879 --> 00:09:44,559
came close but didn't quite get there

00:09:41,829 --> 00:09:46,029
and yeah I'm skipping some of the stuff

00:09:44,559 --> 00:09:49,360
in here because I'm trying to cut have

00:09:46,029 --> 00:09:52,439
to talk out LXE has anyone here used LXE

00:09:49,360 --> 00:09:58,120
I mean actually LXE at the command-line

00:09:52,439 --> 00:10:00,279
it has 200 switches because you can

00:09:58,120 --> 00:10:03,929
control anything you want to you can

00:10:00,279 --> 00:10:06,879
control memory network semaphores

00:10:03,929 --> 00:10:10,589
resources file systems and you have to

00:10:06,879 --> 00:10:13,149
be able to specify all that stuff so lxc

00:10:10,589 --> 00:10:14,920
which is funny because it really if

00:10:13,149 --> 00:10:18,220
you're running Aleksey you are running

00:10:14,920 --> 00:10:20,110
an l par anyone else remember L cars how

00:10:18,220 --> 00:10:22,389
many people here remember cards I'm just

00:10:20,110 --> 00:10:27,129
cute okay so they're at least a few of

00:10:22,389 --> 00:10:29,079
us but point is it's a great tool but it

00:10:27,129 --> 00:10:33,549
was so frickin complicated nobody used

00:10:29,079 --> 00:10:35,049
it so docker came along and said we're

00:10:33,549 --> 00:10:36,730
going to give you the 8020 solution you

00:10:35,049 --> 00:10:38,439
can't control everything you can't it

00:10:36,730 --> 00:10:40,480
won't do a lot of what you want it to

00:10:38,439 --> 00:10:42,069
but it'll do enough of what everyone

00:10:40,480 --> 00:10:45,699
wants it to that you can manage it

00:10:42,069 --> 00:10:48,220
without going nuts and so that it's got

00:10:45,699 --> 00:10:51,399
that middle road what's important about

00:10:48,220 --> 00:10:52,600
it the people here understand a ufs and

00:10:51,399 --> 00:10:56,639
save people from hearing something that

00:10:52,600 --> 00:11:01,510
we know not too many hands okay the the

00:10:56,639 --> 00:11:04,390
core of docker is an image

00:11:01,510 --> 00:11:08,080
is a stacked file system I'll show you

00:11:04,390 --> 00:11:10,450
how those work in a minute but it gives

00:11:08,080 --> 00:11:13,840
you the ability to have a copy of your

00:11:10,450 --> 00:11:16,480
operating system that is read-only so

00:11:13,840 --> 00:11:20,440
your smoke tests can't modify the OS and

00:11:16,480 --> 00:11:22,690
that's what we're it's important so the

00:11:20,440 --> 00:11:26,530
a OFS if you look at this thing at all

00:11:22,690 --> 00:11:30,580
that that greenish stuff I can have

00:11:26,530 --> 00:11:34,060
water layers in my file system the idea

00:11:30,580 --> 00:11:37,090
is I can grab an operating system I can

00:11:34,060 --> 00:11:40,540
layer over it just a few little files

00:11:37,090 --> 00:11:42,430
for my personal configuration and I can

00:11:40,540 --> 00:11:44,560
put that over in a corner and say any

00:11:42,430 --> 00:11:47,920
time I want to use it stack these layers

00:11:44,560 --> 00:11:51,520
up like tracing paper and the collection

00:11:47,920 --> 00:11:54,730
of all of it is what I see at the top

00:11:51,520 --> 00:11:58,870
here you'll notice where it says a

00:11:54,730 --> 00:12:00,700
container layer because I need to update

00:11:58,870 --> 00:12:02,050
things as I'm running let's say I'm

00:12:00,700 --> 00:12:04,630
running an operating system I'm going to

00:12:02,050 --> 00:12:06,910
want to write to a log file I may have

00:12:04,630 --> 00:12:09,280
something that updates a file intensity

00:12:06,910 --> 00:12:12,580
whatever those changes get put on this

00:12:09,280 --> 00:12:16,210
top layer where my session is visible

00:12:12,580 --> 00:12:19,000
but it's discarded on the way out and

00:12:16,210 --> 00:12:22,960
that is really important for why it why

00:12:19,000 --> 00:12:25,330
the approach I've got here came about so

00:12:22,960 --> 00:12:28,090
what happens is I can't make permanent

00:12:25,330 --> 00:12:30,940
updates to an image I can update it

00:12:28,090 --> 00:12:33,340
while it's running but the minute I shut

00:12:30,940 --> 00:12:35,980
the image down I've restarted now that

00:12:33,340 --> 00:12:37,420
sounds great for smog testing because I

00:12:35,980 --> 00:12:40,690
can have something that splatters

00:12:37,420 --> 00:12:42,430
garbage all over the file system and I

00:12:40,690 --> 00:12:48,400
just restart it bang and back to square

00:12:42,430 --> 00:12:51,580
one the problem there the minimal hive

00:12:48,400 --> 00:12:55,810
I've got a layer on top it absorbs all

00:12:51,580 --> 00:12:57,250
my changes but I can't maintain the

00:12:55,810 --> 00:13:01,600
smoke testing environment without

00:12:57,250 --> 00:13:04,680
rebuilding it from scratch and you're

00:13:01,600 --> 00:13:07,540
going to want to take Sipan reporter and

00:13:04,680 --> 00:13:09,310
HTTP date and the signature module

00:13:07,540 --> 00:13:13,180
you're going to need to upgrade those

00:13:09,310 --> 00:13:15,190
periodically to keep them current so the

00:13:13,180 --> 00:13:18,279
downside to trying to use an end

00:13:15,190 --> 00:13:21,370
by itself for smoke testing in your

00:13:18,279 --> 00:13:26,079
environment is it you can't maintain the

00:13:21,370 --> 00:13:29,050
smoke tester so what I came up with is a

00:13:26,079 --> 00:13:30,279
hybrid approach docker has a thing

00:13:29,050 --> 00:13:32,889
they've introduced recently called

00:13:30,279 --> 00:13:35,379
volumes and they allow you they're

00:13:32,889 --> 00:13:37,029
basically mount points they allow you to

00:13:35,379 --> 00:13:41,189
do the moral equivalent of a mount -

00:13:37,029 --> 00:13:44,709
bind you can store whatever you like and

00:13:41,189 --> 00:13:47,319
I can have something that I attach to

00:13:44,709 --> 00:13:49,120
the image I'm out but it's read writable

00:13:47,319 --> 00:13:53,519
I can mount it read-only if I want to

00:13:49,120 --> 00:13:56,819
and that gives me the ability to push

00:13:53,519 --> 00:14:02,079
external file systems into the container

00:13:56,819 --> 00:14:06,250
or mount it read/write maintain what I'm

00:14:02,079 --> 00:14:13,930
doing and then reuse it read-only to run

00:14:06,250 --> 00:14:16,269
the actual smoke tests hmm excellent as

00:14:13,930 --> 00:14:17,980
far as I know I've had no trouble I've

00:14:16,269 --> 00:14:19,329
got a copy of this if I can get through

00:14:17,980 --> 00:14:20,920
this fast enough that people will stay

00:14:19,329 --> 00:14:22,959
through lunch I've got a copy of this

00:14:20,920 --> 00:14:25,689
running on a machine I have at home it's

00:14:22,959 --> 00:14:27,910
like I can show you the the OS images

00:14:25,689 --> 00:14:30,790
because what I'm putting on that is Perl

00:14:27,910 --> 00:14:32,980
and I'm mapping through VAR live sea pan

00:14:30,790 --> 00:14:38,529
it goes pretty quickly it's going to be

00:14:32,980 --> 00:14:40,449
about as fast as as the native access so

00:14:38,529 --> 00:14:42,310
what I have here I'm going to have the

00:14:40,449 --> 00:14:46,180
operating system in an image because I

00:14:42,310 --> 00:14:52,329
can snag that quickly and easily off of

00:14:46,180 --> 00:14:58,360
Dockers hub I then use a volume for Perl

00:14:52,329 --> 00:15:00,819
and a volume for var align C pan that

00:14:58,360 --> 00:15:02,439
introduces a few kind of off-ball things

00:15:00,819 --> 00:15:07,259
because one of the things I don't update

00:15:02,439 --> 00:15:09,850
is home so part of this whole set up is

00:15:07,259 --> 00:15:11,889
finding ways to shoehorn all my

00:15:09,850 --> 00:15:18,250
configuration into either var alive C

00:15:11,889 --> 00:15:21,009
pan or my Perl area so one way to create

00:15:18,250 --> 00:15:23,439
the Perl volume it sounds tempting is to

00:15:21,009 --> 00:15:25,439
use something like Perl brew and try and

00:15:23,439 --> 00:15:29,069
mount a home directory coming out

00:15:25,439 --> 00:15:30,779
the problem with that is pearl brews

00:15:29,069 --> 00:15:33,209
approach of using your home directory

00:15:30,779 --> 00:15:34,529
it's hard to share across users so if

00:15:33,209 --> 00:15:38,399
I'm trying to do smoke testing on a

00:15:34,529 --> 00:15:41,489
machine docker because of the way it

00:15:38,399 --> 00:15:43,649
functions you you enter is route the

00:15:41,489 --> 00:15:46,649
Pearl brew up Roche gets kind of messy

00:15:43,649 --> 00:15:48,569
it just you know you get that and then

00:15:46,649 --> 00:15:51,269
if you're trying to use this for

00:15:48,569 --> 00:15:53,579
something inside a company some guy

00:15:51,269 --> 00:15:55,319
leaves and now that person's home

00:15:53,579 --> 00:16:00,989
directory all the Pearl Bruce stuff for

00:15:55,319 --> 00:16:02,339
it doesn't exist anymore so again what

00:16:00,989 --> 00:16:06,419
I'm going to do here is I'm going to

00:16:02,339 --> 00:16:10,109
create a volume for Pearl that is just

00:16:06,419 --> 00:16:11,359
mounted in an optical and leave it at

00:16:10,109 --> 00:16:16,139
that

00:16:11,359 --> 00:16:17,639
so if the Pearl tester is wiki if you

00:16:16,139 --> 00:16:19,259
want to read that some time they've got

00:16:17,639 --> 00:16:22,829
a lot of Dave Gould and wrote a lot of

00:16:19,259 --> 00:16:25,919
good stuff on there one thing he did is

00:16:22,829 --> 00:16:29,479
write explicit step-by-step instructions

00:16:25,919 --> 00:16:31,739
for installing Sipan reporter smoker

00:16:29,479 --> 00:16:34,739
which is what I followed here all I

00:16:31,739 --> 00:16:38,129
really did to do to make this work is a

00:16:34,739 --> 00:16:39,539
shell scripted his instructions and then

00:16:38,129 --> 00:16:42,709
shove them into something I could run

00:16:39,539 --> 00:16:45,629
inside of docker now Sipan - has its own

00:16:42,709 --> 00:16:47,879
reporting and smoking that actually work

00:16:45,629 --> 00:16:51,359
better but they're not as

00:16:47,879 --> 00:16:54,839
well-documented so this one uses Sipan

00:16:51,359 --> 00:16:56,879
reporter so the first thing you have to

00:16:54,839 --> 00:16:58,829
start with is a distro now if anyone was

00:16:56,879 --> 00:17:00,929
here for my talk last year about docker

00:16:58,829 --> 00:17:02,789
in Perl I was arguing then that what you

00:17:00,929 --> 00:17:05,009
really want is just the shared libraries

00:17:02,789 --> 00:17:06,389
that doesn't work for smoke testing

00:17:05,009 --> 00:17:07,980
because you're going to bloody idea what

00:17:06,389 --> 00:17:10,980
libraries people reviews they might want

00:17:07,980 --> 00:17:13,589
in curses who knows you're pulling in

00:17:10,980 --> 00:17:18,000
random stuff and compile it in compiling

00:17:13,589 --> 00:17:19,289
it on the local system so this is one of

00:17:18,000 --> 00:17:21,209
those cases we're starting with an

00:17:19,289 --> 00:17:23,220
operating system makes sense because you

00:17:21,209 --> 00:17:26,789
need the libraries one thing to make

00:17:23,220 --> 00:17:30,299
sure of is you want the version of live

00:17:26,789 --> 00:17:32,279
C in your image to be consistent with

00:17:30,299 --> 00:17:35,000
the version of live sees that the kernel

00:17:32,279 --> 00:17:39,470
you're running on hats

00:17:35,000 --> 00:17:41,390
if if live C is out of sync between the

00:17:39,470 --> 00:17:43,220
running kernel and what you're trying to

00:17:41,390 --> 00:17:46,549
build everything on you can get all

00:17:43,220 --> 00:17:48,679
sorts of weird errors they won't show up

00:17:46,549 --> 00:17:50,570
often but you'll tear your hair out

00:17:48,679 --> 00:17:54,919
finally if you're growing out I should

00:17:50,570 --> 00:17:57,470
you know it so we're gonna need GCC

00:17:54,919 --> 00:18:01,059
because some pearl modules require a

00:17:57,470 --> 00:18:03,950
compiler we're going to need make at

00:18:01,059 --> 00:18:07,100
that point a lot of the really stripped

00:18:03,950 --> 00:18:09,350
down Linux distros don't work as well is

00:18:07,100 --> 00:18:12,049
you have to install 45 things acting at

00:18:09,350 --> 00:18:13,280
the distro arch the default Debian

00:18:12,049 --> 00:18:17,419
doesn't come with a lot of these things

00:18:13,280 --> 00:18:19,520
so I'm using Gen 2 it uses a system

00:18:17,419 --> 00:18:21,260
called portage that's based on BSD ports

00:18:19,520 --> 00:18:24,679
where everything's compiled locally

00:18:21,260 --> 00:18:28,580
anyway so the baseline gen true distro

00:18:24,679 --> 00:18:32,030
will include GCC make the standard

00:18:28,580 --> 00:18:35,720
library management this all that's there

00:18:32,030 --> 00:18:40,030
in one place so to get this all I do is

00:18:35,720 --> 00:18:43,700
I grab a stage three tarball cram it in

00:18:40,030 --> 00:18:45,799
you can take into docker you can take a

00:18:43,700 --> 00:18:47,120
turbo and import it directly into an

00:18:45,799 --> 00:18:50,419
image it becomes one of those file

00:18:47,120 --> 00:18:52,010
system layers the thing is you're going

00:18:50,419 --> 00:18:54,559
to want your own editor setup so you're

00:18:52,010 --> 00:18:56,120
going to want your own bash profile this

00:18:54,559 --> 00:18:59,140
everyone's got their own tweaks to the

00:18:56,120 --> 00:19:03,440
system so what I do is I then have a

00:18:59,140 --> 00:19:04,610
just a subdirectory that's got a few

00:19:03,440 --> 00:19:07,580
little things for the root directory

00:19:04,610 --> 00:19:11,080
maybe my Etsy hosts file a couple of

00:19:07,580 --> 00:19:16,100
odds and ends I layer that on top of the

00:19:11,080 --> 00:19:17,750
standard distro and again without going

00:19:16,100 --> 00:19:18,860
into much I don't time to do too much

00:19:17,750 --> 00:19:22,510
about the way docker works

00:19:18,860 --> 00:19:27,409
I put one in I have a local repository I

00:19:22,510 --> 00:19:29,600
put one of them in I put the tarball as

00:19:27,409 --> 00:19:32,720
one layer into the repositories and

00:19:29,600 --> 00:19:35,809
image I put the collection of private

00:19:32,720 --> 00:19:37,940
files on top of it is one more image and

00:19:35,809 --> 00:19:39,919
then that secondary image that's got the

00:19:37,940 --> 00:19:42,850
personalized is what I use for running

00:19:39,919 --> 00:19:42,850
all the smoke tests

00:19:43,120 --> 00:19:48,870
so I'm going to want to have a volume

00:19:44,890 --> 00:19:51,580
for opt which will have opt pearl in it

00:19:48,870 --> 00:19:54,310
again I this is Linux I'm using a system

00:19:51,580 --> 00:19:56,110
five file system it's not user local I'm

00:19:54,310 --> 00:19:58,150
going to want to put VAR temp I'm going

00:19:56,110 --> 00:20:00,010
to want that to be a temp FS just for

00:19:58,150 --> 00:20:01,270
speed and for the fact I'm going to

00:20:00,010 --> 00:20:05,890
discard it every time when I'm done

00:20:01,270 --> 00:20:11,140
anyway the other thing I need is going

00:20:05,890 --> 00:20:13,540
to be standardizing the path as I've got

00:20:11,140 --> 00:20:15,990
a pearl tarball I don't want to have to

00:20:13,540 --> 00:20:18,760
push into my script inside of docker

00:20:15,990 --> 00:20:20,680
what version number of pearl I'm running

00:20:18,760 --> 00:20:22,540
I want to be able to just have generics

00:20:20,680 --> 00:20:24,430
so one of the things we'll do with the

00:20:22,540 --> 00:20:26,770
volumes here is standardize a lot of

00:20:24,430 --> 00:20:28,240
these paths so instead of pearl -

00:20:26,770 --> 00:20:30,850
something it'll be to be pearl that

00:20:28,240 --> 00:20:32,140
target easy I can show you how to do

00:20:30,850 --> 00:20:35,620
that it's the equivalent of a mountain

00:20:32,140 --> 00:20:39,040
bind to isolate the file names at that

00:20:35,620 --> 00:20:42,130
point I've got I do a docker run I'll

00:20:39,040 --> 00:20:47,050
Korea I'll take this image mount the

00:20:42,130 --> 00:20:50,200
volumes on it and build all of pearl now

00:20:47,050 --> 00:20:51,640
docker has a myates temple feds option

00:20:50,200 --> 00:20:55,090
that says give me a temporary file

00:20:51,640 --> 00:20:57,790
system the downside to that is when you

00:20:55,090 --> 00:20:59,560
mount things in Linux one of the options

00:20:57,790 --> 00:21:01,630
you have is to mount it no exact you

00:20:59,560 --> 00:21:04,930
don't want code executing out of that

00:21:01,630 --> 00:21:07,210
space which is docker does to us which

00:21:04,930 --> 00:21:08,860
makes it absolutely useless for trying

00:21:07,210 --> 00:21:11,560
to run anything that we use with our

00:21:08,860 --> 00:21:13,990
tasks so the approach I've got here

00:21:11,560 --> 00:21:16,780
you'll see that there's a - - temp FS

00:21:13,990 --> 00:21:21,550
but it doesn't quite work for what we're

00:21:16,780 --> 00:21:23,470
doing here so what I want to have is a

00:21:21,550 --> 00:21:24,730
temporary file system but I might be

00:21:23,470 --> 00:21:26,710
running eight of these things at once

00:21:24,730 --> 00:21:28,600
how do I create something private I'm

00:21:26,710 --> 00:21:33,250
going to create a volume that depends on

00:21:28,600 --> 00:21:36,550
the process ID that I've that I'm using

00:21:33,250 --> 00:21:40,420
to run this the trick is I'll have to

00:21:36,550 --> 00:21:42,970
remember to tear it down when I leave so

00:21:40,420 --> 00:21:47,920
I'm at what I if I have this is shell

00:21:42,970 --> 00:21:51,220
code if I have a bar temp bash bid I can

00:21:47,920 --> 00:21:53,920
then go down here create a volume and

00:21:51,220 --> 00:21:54,710
run it putting this temporary volume

00:21:53,920 --> 00:21:58,580
into var

00:21:54,710 --> 00:22:01,669
temp I've got 10 minutes I'm apologize

00:21:58,580 --> 00:22:03,289
how fast I'm going folks but so now what

00:22:01,669 --> 00:22:04,490
I've got is a whole bunch of these

00:22:03,289 --> 00:22:08,240
volumes and I'll go through these

00:22:04,490 --> 00:22:11,270
quickly now I've fart amp I've got a tar

00:22:08,240 --> 00:22:14,620
ball that I'm using to install pearl

00:22:11,270 --> 00:22:17,360
with and then I've got a build script

00:22:14,620 --> 00:22:19,460
that actually runs the installation of

00:22:17,360 --> 00:22:21,649
Perl updates the modules does all the

00:22:19,460 --> 00:22:23,799
rest of it I'm going to have to have the

00:22:21,649 --> 00:22:26,360
volume into which I'm installing Perl

00:22:23,799 --> 00:22:28,929
which is again the copy of Perl that

00:22:26,360 --> 00:22:32,450
will be used to run the smoke tests and

00:22:28,929 --> 00:22:33,770
I also I'm using mini Sipan to cache all

00:22:32,450 --> 00:22:35,929
the stuff so I don't waste bandwidth

00:22:33,770 --> 00:22:38,090
reloading all the same files I'm going

00:22:35,929 --> 00:22:40,760
to put that in var live C pen also I'm

00:22:38,090 --> 00:22:42,890
going to put the C pen testers anything

00:22:40,760 --> 00:22:45,950
that's permanent part of configuration

00:22:42,890 --> 00:22:49,730
because that's completely reusable I can

00:22:45,950 --> 00:22:51,770
the version of Perl doesn't matter now

00:22:49,730 --> 00:22:53,480
one thing you'll notice here there's a

00:22:51,770 --> 00:22:56,059
bunch of these things that are version

00:22:53,480 --> 00:22:58,970
specific they have to be if I want to

00:22:56,059 --> 00:23:01,789
test multiple versions of Perl they are

00:22:58,970 --> 00:23:03,679
all mapped on to standard locations in

00:23:01,789 --> 00:23:07,130
the file system so that I can hardwire

00:23:03,679 --> 00:23:08,809
them into my shell scripts that's one of

00:23:07,130 --> 00:23:10,399
the advantages to using the volumes for

00:23:08,809 --> 00:23:12,470
this the other thing is you'll notice

00:23:10,399 --> 00:23:16,610
I'm mounting var live C pen so I'm using

00:23:12,470 --> 00:23:18,289
one bar live C pan from the OS just just

00:23:16,610 --> 00:23:21,289
doing a mount of it inside of the

00:23:18,289 --> 00:23:22,730
container there's a good and bad thing

00:23:21,289 --> 00:23:25,610
there it makes it really easy to use

00:23:22,730 --> 00:23:28,370
mini C pan it's like what four to eight

00:23:25,610 --> 00:23:30,679
gigabytes to cache Ollis of the current

00:23:28,370 --> 00:23:34,520
versions of everything it works just

00:23:30,679 --> 00:23:37,070
fine the downside to that is you can't

00:23:34,520 --> 00:23:39,260
run two of these tests at once because

00:23:37,070 --> 00:23:41,630
the lock files will compete with one

00:23:39,260 --> 00:23:47,360
another because I'm actually mounting

00:23:41,630 --> 00:23:50,179
the OS directly in the the quick fix

00:23:47,360 --> 00:23:53,000
another that I dropped the slide but the

00:23:50,179 --> 00:23:57,710
quick fix there is I could make var live

00:23:53,000 --> 00:24:01,429
C pan a volume the same way opt Perl is

00:23:57,710 --> 00:24:03,380
and at that point it would be I can have

00:24:01,429 --> 00:24:05,000
Kennedy's and the amount of disk space

00:24:03,380 --> 00:24:07,100
it takes and in today's environment

00:24:05,000 --> 00:24:07,850
having eight copies of sipan's locally

00:24:07,100 --> 00:24:10,490
00:24:07,850 --> 00:24:13,910
being needed my notebook has enough to

00:24:10,490 --> 00:24:16,549
store that but again the way I'm showing

00:24:13,910 --> 00:24:18,830
it here there's just one copy so what

00:24:16,549 --> 00:24:21,429
happens is to run this and again there's

00:24:18,830 --> 00:24:24,710
a shellcode I'm going to create a volume

00:24:21,429 --> 00:24:28,970
for the temp FS I'm going to create

00:24:24,710 --> 00:24:34,549
another volume for my local it's got the

00:24:28,970 --> 00:24:38,299
opt pearl I'm then going to run now the

00:24:34,549 --> 00:24:40,070
minus RM good and bad to this thing but

00:24:38,299 --> 00:24:42,679
the the minus is armed with doctor says

00:24:40,070 --> 00:24:44,480
what I've done remove the image that

00:24:42,679 --> 00:24:46,280
avoids having problems where a crashed

00:24:44,480 --> 00:24:48,770
image competes with the name of

00:24:46,280 --> 00:24:50,690
something but it also makes it hard to

00:24:48,770 --> 00:24:52,220
come back later and fix what was going

00:24:50,690 --> 00:24:53,330
on one of the things I want to get

00:24:52,220 --> 00:24:55,760
through with people who want to stay a

00:24:53,330 --> 00:24:59,570
few minutes and lunch is you can go

00:24:55,760 --> 00:25:01,789
through and fix the running build so if

00:24:59,570 --> 00:25:03,890
one of the steps fails I'll show you how

00:25:01,789 --> 00:25:06,409
to get into the container and actually

00:25:03,890 --> 00:25:09,710
finish installing all of this stuff

00:25:06,409 --> 00:25:11,960
without having to start over T is

00:25:09,710 --> 00:25:16,280
important that what that does is creates

00:25:11,960 --> 00:25:18,590
a terminal in allocates a PTY for the

00:25:16,280 --> 00:25:20,600
container that's important because there

00:25:18,590 --> 00:25:22,400
are pearl modules that will depend on

00:25:20,600 --> 00:25:25,720
getting the screen size and if they do

00:25:22,400 --> 00:25:29,350
not have a terminal they will puke

00:25:25,720 --> 00:25:31,730
the name is build pearl names are unique

00:25:29,350 --> 00:25:35,270
so if I have build pearl

00:25:31,730 --> 00:25:37,580
pipes you know 5.24 dot one there can

00:25:35,270 --> 00:25:39,799
only be one image named that running at

00:25:37,580 --> 00:25:41,480
one time that's a good thing because I

00:25:39,799 --> 00:25:46,730
don't want two of these things hacking

00:25:41,480 --> 00:25:50,690
the same set of volumes at once the -

00:25:46,730 --> 00:25:54,200
phase take the output from the container

00:25:50,690 --> 00:25:58,159
and give you the idli channels those

00:25:54,200 --> 00:26:00,140
into sockets in the local file system so

00:25:58,159 --> 00:26:03,140
that I can grab the output of it and

00:26:00,140 --> 00:26:05,000
store it by the way this if anyone

00:26:03,140 --> 00:26:08,240
doesn't have time to say I'm going to

00:26:05,000 --> 00:26:09,710
stick this on SlideShare if you look at

00:26:08,240 --> 00:26:11,510
the slide Cheryl Embarq it'll be there

00:26:09,710 --> 00:26:13,370
today there's also at the end of this

00:26:11,510 --> 00:26:15,679
I've got all the coded on this as and

00:26:13,370 --> 00:26:17,299
github it's an absolute mess and quick

00:26:15,679 --> 00:26:19,100
hacks but if anyone wants to play with

00:26:17,299 --> 00:26:23,250
it it's there

00:26:19,100 --> 00:26:28,020
lem bark lem VAR k is it the same thing

00:26:23,250 --> 00:26:30,480
as on the so there's the build perl

00:26:28,020 --> 00:26:34,470
script which again is mounted as a

00:26:30,480 --> 00:26:39,330
volume and it's just mostly here scripts

00:26:34,470 --> 00:26:42,750
it looks like this notice i've got the

00:26:39,330 --> 00:26:44,370
sub process all it does that code there

00:26:42,750 --> 00:26:45,750
inside the parentheses will build a

00:26:44,370 --> 00:26:48,660
running copy of Perl for you

00:26:45,750 --> 00:26:51,299
it snags the tarball does it make and

00:26:48,660 --> 00:26:53,640
make test install important thing here

00:26:51,299 --> 00:26:57,090
notice that I set my home to var live

00:26:53,640 --> 00:27:00,360
Sipan because that's the permanent place

00:26:57,090 --> 00:27:02,820
if I used slash home for anything it's

00:27:00,360 --> 00:27:04,850
on the image when I'm done with the

00:27:02,820 --> 00:27:07,500
install it's all going to be gone and

00:27:04,850 --> 00:27:09,450
that's part of the through the weirdness

00:27:07,500 --> 00:27:10,890
of doing this is you've got to redirect

00:27:09,450 --> 00:27:14,039
a lot of things to where you wouldn't

00:27:10,890 --> 00:27:16,980
normally one other thing to notice here

00:27:14,039 --> 00:27:20,159
notice how long it took me to run all of

00:27:16,980 --> 00:27:21,690
the Perl tests people's oh my god you're

00:27:20,159 --> 00:27:24,630
building for from scratch it takes three

00:27:21,690 --> 00:27:27,090
minutes this the script to build all of

00:27:24,630 --> 00:27:29,610
Perl and install it takes like less than

00:27:27,090 --> 00:27:34,650
ten minutes so building these things

00:27:29,610 --> 00:27:36,780
overnight actually is pretty easy now if

00:27:34,650 --> 00:27:39,330
you wanted to test building Perl let's

00:27:36,780 --> 00:27:42,679
say you're doing bleeding edge testing

00:27:39,330 --> 00:27:46,470
of Perl instead of using the volume

00:27:42,679 --> 00:27:51,390
where it's just local use a tamper FS

00:27:46,470 --> 00:27:53,490
for the option Perl run this script when

00:27:51,390 --> 00:27:55,620
you're done with it discard it you've

00:27:53,490 --> 00:27:58,890
just tested use smoke tested building

00:27:55,620 --> 00:28:01,919
Perl so if you have often attempt NFS it

00:27:58,890 --> 00:28:04,610
is very very fast and very easy you do

00:28:01,919 --> 00:28:08,039
it you run it you discard it you're done

00:28:04,610 --> 00:28:10,650
so to test the bleeding edge using the

00:28:08,039 --> 00:28:13,710
same technique what I would do is go to

00:28:10,650 --> 00:28:15,570
a git repository I do a git pull and I

00:28:13,710 --> 00:28:18,840
would mount the volume the same way I

00:28:15,570 --> 00:28:23,010
did var live sea pan and I would just

00:28:18,840 --> 00:28:28,110
have I'd mount my sandbox Perl whatever

00:28:23,010 --> 00:28:31,320
in opt Perl and I can now test all of

00:28:28,110 --> 00:28:33,510
this stuff using today's bleeding edge

00:28:31,320 --> 00:28:36,030
so that the same technique with the

00:28:33,510 --> 00:28:37,740
volumes works both for testing the

00:28:36,030 --> 00:28:40,500
bleeding-edge it works for testing

00:28:37,740 --> 00:28:42,690
whether or not pearl itself builds and

00:28:40,500 --> 00:28:44,550
you can use it for testing all of the

00:28:42,690 --> 00:28:46,890
modules let's say you're you're asking

00:28:44,550 --> 00:28:48,090
the question we like let's say your

00:28:46,890 --> 00:28:52,980
company likes to keep up to date on

00:28:48,090 --> 00:28:55,830
pearl you can do a very simple smoke

00:28:52,980 --> 00:28:57,600
test of all of your in-house modules and

00:28:55,830 --> 00:29:00,030
all the modules all your code depends on

00:28:57,600 --> 00:29:03,720
every day by just doing a get pull and

00:29:00,030 --> 00:29:05,750
running the same procedure now there are

00:29:03,720 --> 00:29:09,000
a couple of minor setups we've got to do

00:29:05,750 --> 00:29:10,740
again once I have installed pearl I want

00:29:09,000 --> 00:29:13,830
to hack the path because I want to be

00:29:10,740 --> 00:29:17,520
using my copy of pearl the other thing

00:29:13,830 --> 00:29:20,580
is h2 pH this is a good check to make

00:29:17,520 --> 00:29:22,110
sure that pearl install if the install

00:29:20,580 --> 00:29:25,890
blows up here you know something went

00:29:22,110 --> 00:29:28,500
wrong there are a few things here for

00:29:25,890 --> 00:29:32,520
our lab Sipan the remote pick your own

00:29:28,500 --> 00:29:35,070
remote if you grab this thing one of the

00:29:32,520 --> 00:29:38,400
things in the code in the stuff on

00:29:35,070 --> 00:29:41,670
github is are some variables like my

00:29:38,400 --> 00:29:44,430
name and my pass kindly do me the favor

00:29:41,670 --> 00:29:51,110
of changing those especially the email

00:29:44,430 --> 00:29:54,900
address so this is what it takes to

00:29:51,110 --> 00:29:56,670
configure a working copy of Sipan so

00:29:54,900 --> 00:29:59,760
that it stores everything in var live

00:29:56,670 --> 00:30:02,070
Sipan instead of home again if I put

00:29:59,760 --> 00:30:04,080
things in home I'm fried because as soon

00:30:02,070 --> 00:30:07,620
as I exit the container all my changes

00:30:04,080 --> 00:30:09,810
are lost so what this will do is put

00:30:07,620 --> 00:30:13,590
everything in var live sea pan sources

00:30:09,810 --> 00:30:19,560
whatever it uses VAR temp C pan the temp

00:30:13,590 --> 00:30:21,990
FS for all of its builds now one of the

00:30:19,560 --> 00:30:23,610
things I probably want to check to see

00:30:21,990 --> 00:30:27,240
if smoke testing is going to work

00:30:23,610 --> 00:30:28,920
let's try installing C pan if that

00:30:27,240 --> 00:30:33,630
doesn't work I'm going to have worse

00:30:28,920 --> 00:30:35,390
problems term rewind Perl is cute

00:30:33,630 --> 00:30:38,100
everyone here remember installing that

00:30:35,390 --> 00:30:39,360
it goes halfway through and has a little

00:30:38,100 --> 00:30:42,180
prompt where it wants you to type

00:30:39,360 --> 00:30:44,350
something hit return for exit if anyone

00:30:42,180 --> 00:30:45,730
can figure out how to bypass hitting

00:30:44,350 --> 00:30:47,620
bloody return kickers I think it

00:30:45,730 --> 00:30:50,230
actually reads from the frickin terminal

00:30:47,620 --> 00:30:54,639
I pipe yes into it I've done all kinds

00:30:50,230 --> 00:30:57,970
of weird-ass things but this is one of

00:30:54,639 --> 00:31:00,490
these two modules here don't just take

00:30:57,970 --> 00:31:04,090
yes for their responses to install so I

00:31:00,490 --> 00:31:09,460
had to do these with your scripts this

00:31:04,090 --> 00:31:13,659
collection of crap is the stuff huh yeah

00:31:09,460 --> 00:31:15,850
I tried setting that one in it it if it

00:31:13,659 --> 00:31:18,100
does it anyway if anyone finds a good

00:31:15,850 --> 00:31:23,139
way to deal with that feel free to put

00:31:18,100 --> 00:31:25,480
it in these are the the modules that I

00:31:23,139 --> 00:31:26,289
install as part of the smoke testing

00:31:25,480 --> 00:31:28,419
environment

00:31:26,289 --> 00:31:30,399
I'm not smoke testing these modules I'm

00:31:28,419 --> 00:31:33,250
saying these are things that we're going

00:31:30,399 --> 00:31:36,519
to want to have CPM reporter HTTP day

00:31:33,250 --> 00:31:39,220
signature module version all of this

00:31:36,519 --> 00:31:45,879
stuff is pretty much needs to be there

00:31:39,220 --> 00:31:51,639
in order to run smoke tests so again the

00:31:45,879 --> 00:31:54,700
C pentesters directory that's got my off

00:31:51,639 --> 00:31:56,200
of the authentication information can't

00:31:54,700 --> 00:32:01,029
be in home because it's going to get

00:31:56,200 --> 00:32:04,659
lost with your laughing no okay

00:32:01,029 --> 00:32:09,960
so yes passwords last secret it is not

00:32:04,659 --> 00:32:13,840
the most descriptive password but the

00:32:09,960 --> 00:32:18,820
this is enough to create a working

00:32:13,840 --> 00:32:21,159
authentication Sipan reporter when you

00:32:18,820 --> 00:32:25,379
configure it this is a working

00:32:21,159 --> 00:32:25,379
configuration for cPanel reporter and

00:32:25,500 --> 00:32:31,090
the fun part starts now you're running

00:32:28,029 --> 00:32:33,580
all of this and you want to see what's

00:32:31,090 --> 00:32:36,279
going on you can fix the build with

00:32:33,580 --> 00:32:41,860
docker exec a lot of people will show

00:32:36,279 --> 00:32:44,710
you examples of doing a docker like

00:32:41,860 --> 00:32:47,350
doing an SSH into a container to see

00:32:44,710 --> 00:32:49,330
what's going on in it it's a waste of

00:32:47,350 --> 00:32:51,669
time because you don't want to sit here

00:32:49,330 --> 00:32:54,789
and configure all of SSH to go in and

00:32:51,669 --> 00:32:57,740
watch this build the docker exec command

00:32:54,789 --> 00:32:59,630
will go into a container and run

00:32:57,740 --> 00:33:01,790
a statement for you it just gives you

00:32:59,630 --> 00:33:05,059
another process inside of the container

00:33:01,790 --> 00:33:06,620
did that make sense to people so if I

00:33:05,059 --> 00:33:10,880
want to fix the build if I want to watch

00:33:06,620 --> 00:33:13,670
it so if I do a docker exec - IT again I

00:33:10,880 --> 00:33:16,340
want a terminal I want standard inbound

00:33:13,670 --> 00:33:22,100
to it so I can type on it but I can just

00:33:16,340 --> 00:33:24,380
do top what's neat about this is all I'm

00:33:22,100 --> 00:33:26,330
going to see are the processes inside

00:33:24,380 --> 00:33:27,740
the container the rest of the world yeah

00:33:26,330 --> 00:33:29,300
you run top when you're doing a large

00:33:27,740 --> 00:33:30,679
pearl building you've got fifty five

00:33:29,300 --> 00:33:33,470
thousand other things going on in the

00:33:30,679 --> 00:33:35,809
machine with this you'll see only the

00:33:33,470 --> 00:33:41,600
the processes that have been forked off

00:33:35,809 --> 00:33:43,400
since the containers started so we've

00:33:41,600 --> 00:33:45,590
all seen little things like this when

00:33:43,400 --> 00:33:50,000
you were trying to build something so

00:33:45,590 --> 00:33:52,040
what do we do so the question is how do

00:33:50,000 --> 00:33:54,140
you fix something like this if it

00:33:52,040 --> 00:33:56,120
happens when you're trying to build your

00:33:54,140 --> 00:33:57,950
smoke testing environment and the answer

00:33:56,120 --> 00:34:01,700
is you exactly into the container and

00:33:57,950 --> 00:34:04,400
you can do a bash - login o take the

00:34:01,700 --> 00:34:06,260
quotes out of that that actually it has

00:34:04,400 --> 00:34:10,520
to be bash logging the spaces that's my

00:34:06,260 --> 00:34:12,470
mistake what'll end up happening then is

00:34:10,520 --> 00:34:15,710
you're going to be in the container

00:34:12,470 --> 00:34:18,980
running a shell you can do a pearl - MC

00:34:15,710 --> 00:34:20,330
pan install whatever the way the current

00:34:18,980 --> 00:34:21,830
code is written because it's one big

00:34:20,330 --> 00:34:24,500
script from top to bottom you then have

00:34:21,830 --> 00:34:26,419
to cut and paste a few things eventually

00:34:24,500 --> 00:34:28,159
I like to break this thing up into

00:34:26,419 --> 00:34:30,500
something that's in stages you can just

00:34:28,159 --> 00:34:33,409
rerun it and also have where I pre run

00:34:30,500 --> 00:34:35,450
these and keep going but this is how you

00:34:33,409 --> 00:34:37,280
fix something you don't need to SSH into

00:34:35,450 --> 00:34:40,850
it a lot of books a lot of articles tell

00:34:37,280 --> 00:34:43,490
you how to set up your doctor

00:34:40,850 --> 00:34:45,740
environment so you can SSH into the

00:34:43,490 --> 00:34:47,330
containers complete waste of time for

00:34:45,740 --> 00:34:50,500
doing something like this unless of

00:34:47,330 --> 00:34:50,500
course you're doing on a remote machine

00:34:50,649 --> 00:34:56,780
another brief thing if you do a docker

00:34:54,080 --> 00:35:01,300
PS containers have a name and they have

00:34:56,780 --> 00:35:03,650
an ID so you'll see here there's a

00:35:01,300 --> 00:35:07,010
hexadecimal number and there's build

00:35:03,650 --> 00:35:08,150
parole 524 one I can exec you - either

00:35:07,010 --> 00:35:10,549
one of those

00:35:08,150 --> 00:35:12,079
a lot of times if you're doing this in

00:35:10,549 --> 00:35:15,170
the command line it's just easier to cut

00:35:12,079 --> 00:35:16,700
and paste the number but you'll get the

00:35:15,170 --> 00:35:20,809
same result you'll be inside the

00:35:16,700 --> 00:35:24,650
container now have people here ever

00:35:20,809 --> 00:35:26,869
SSH didn't do it or exact into a docker

00:35:24,650 --> 00:35:30,079
container and see how it works not many

00:35:26,869 --> 00:35:31,630
okay it's weird this is a through

00:35:30,079 --> 00:35:35,359
looking at experience part of it is

00:35:31,630 --> 00:35:38,359
inside the container your super user you

00:35:35,359 --> 00:35:41,210
come in and your route but your route

00:35:38,359 --> 00:35:42,680
inside of the container outside of the

00:35:41,210 --> 00:35:46,099
container the kernel still thinks you're

00:35:42,680 --> 00:35:47,630
the process ID that ran the container so

00:35:46,099 --> 00:35:49,700
you're super user it can't mount

00:35:47,630 --> 00:35:52,309
anything you can't unmount anything all

00:35:49,700 --> 00:35:54,260
it really does is give you complete

00:35:52,309 --> 00:35:56,390
access to the filesystem inside the

00:35:54,260 --> 00:35:58,220
containers about the only real brutish

00:35:56,390 --> 00:36:00,650
thing that you have it means you've got

00:35:58,220 --> 00:36:03,069
to be careful when you remove things you

00:36:00,650 --> 00:36:05,960
can't fry the entire operating system

00:36:03,069 --> 00:36:07,760
but if it's a little bit odd especially

00:36:05,960 --> 00:36:09,799
if you've got scripts that check for

00:36:07,760 --> 00:36:12,770
whether or not you're super user for

00:36:09,799 --> 00:36:14,180
sanity checks going in there you're

00:36:12,770 --> 00:36:18,440
going to trigger those sanity checks

00:36:14,180 --> 00:36:21,770
inside of the container again PS if you

00:36:18,440 --> 00:36:24,230
do a PS - au of PS aux you might only

00:36:21,770 --> 00:36:26,630
see four processes because that's all

00:36:24,230 --> 00:36:28,579
the container has inside of it which is

00:36:26,630 --> 00:36:30,260
great when you're running a build you

00:36:28,579 --> 00:36:35,089
don't have to see everything everyone in

00:36:30,260 --> 00:36:36,980
the machine is doing the other thing is

00:36:35,089 --> 00:36:38,660
that run work level restrictions don't

00:36:36,980 --> 00:36:40,960
work because you're always running

00:36:38,660 --> 00:36:45,380
you're really not booting anything so

00:36:40,960 --> 00:36:47,299
there's no notion of run levels you can

00:36:45,380 --> 00:36:48,680
run Perl - MC pan you can do make

00:36:47,299 --> 00:36:49,069
install you can do all those kinds of

00:36:48,680 --> 00:36:52,579
things

00:36:49,069 --> 00:36:54,289
if this script blew up or if some piece

00:36:52,579 --> 00:36:56,900
of your smoke test environment needs

00:36:54,289 --> 00:36:58,970
maintenance you can use whatever tools

00:36:56,900 --> 00:37:03,140
you like to maintain it inside of the

00:36:58,970 --> 00:37:05,390
container change yeah that that that au

00:37:03,140 --> 00:37:09,160
FS it takes some getting used to because

00:37:05,390 --> 00:37:12,170
you do a CD and you're in slash route

00:37:09,160 --> 00:37:13,940
this routes home directory you change

00:37:12,170 --> 00:37:15,559
something the next time you come back

00:37:13,940 --> 00:37:17,690
that change will be gone if you want to

00:37:15,559 --> 00:37:19,390
modify something at Etsy the next time

00:37:17,690 --> 00:37:21,710
you come back that change will be gone

00:37:19,390 --> 00:37:24,020
that's why if you look at I said

00:37:21,710 --> 00:37:26,030
home to var like Sipan earlier in this

00:37:24,020 --> 00:37:27,710
because that var live SI phan is where I

00:37:26,030 --> 00:37:31,420
store the common configuration

00:37:27,710 --> 00:37:31,420
information for running the smoke desks

00:37:31,810 --> 00:37:38,630
mini C pen and people oh that is it

00:37:36,710 --> 00:37:40,160
basically slurps the most current

00:37:38,630 --> 00:37:42,140
version of everything on C pan into your

00:37:40,160 --> 00:37:44,180
local file system the point to that is

00:37:42,140 --> 00:37:47,450
if I'm running smoke tests it's pretty I

00:37:44,180 --> 00:37:48,680
will pretty often have modules to drag

00:37:47,450 --> 00:37:51,290
in other modules to drag in other

00:37:48,680 --> 00:37:54,290
modules why waste bandwidth redownload

00:37:51,290 --> 00:37:56,540
in them a bazillion times so and

00:37:54,290 --> 00:37:58,640
remember I'm not installing anything

00:37:56,540 --> 00:38:01,520
when I run these smoke tests I'm not

00:37:58,640 --> 00:38:04,640
putting anything into into my opt Perl

00:38:01,520 --> 00:38:07,640
I'm just doing the build and test and

00:38:04,640 --> 00:38:09,680
skipping it so if I pull 14 modules in

00:38:07,640 --> 00:38:12,080
I'm going to have to redownload those

00:38:09,680 --> 00:38:14,420
things every time I run into anything

00:38:12,080 --> 00:38:16,700
that uses them so running the mini Sipan

00:38:14,420 --> 00:38:18,619
can save you a lot of bandwidth when

00:38:16,700 --> 00:38:21,140
you're doing smoke testing but again

00:38:18,619 --> 00:38:23,530
that has to update var live C pan the

00:38:21,140 --> 00:38:27,109
shared permanent space for all of this

00:38:23,530 --> 00:38:30,170
so now the life cycle for smoke testing

00:38:27,109 --> 00:38:33,560
is you run mini C pan update var live C

00:38:30,170 --> 00:38:35,960
pan you run the smoker inside of a

00:38:33,560 --> 00:38:40,010
container now that running the smoker

00:38:35,960 --> 00:38:42,050
I'm going to have that pearl volume and

00:38:40,010 --> 00:38:45,230
opt pearl I'm going to mount that

00:38:42,050 --> 00:38:48,170
read-only because I don't want these

00:38:45,230 --> 00:38:50,510
things modifying pearl I want to just

00:38:48,170 --> 00:38:52,070
see if they work if they if somebody

00:38:50,510 --> 00:38:54,230
wrote something in their make file dot

00:38:52,070 --> 00:38:57,770
DL that tries to modify it it's going to

00:38:54,230 --> 00:38:59,359
puke now one other thing here the one

00:38:57,770 --> 00:39:01,430
advantage for virtual machines for this

00:38:59,359 --> 00:39:02,810
kind of testing I can only test one

00:39:01,430 --> 00:39:07,339
version of the kernel this way because

00:39:02,810 --> 00:39:09,470
everyone's got that kernel so if you're

00:39:07,339 --> 00:39:12,589
a company and you're looking at

00:39:09,470 --> 00:39:14,359
upgrading your person your corporate

00:39:12,589 --> 00:39:16,190
system to a different version of

00:39:14,359 --> 00:39:18,170
something you might run a run docker

00:39:16,190 --> 00:39:22,730
inside of a virtual machine with that

00:39:18,170 --> 00:39:24,260
operated curl but you're only going to

00:39:22,730 --> 00:39:26,510
get the version of the kernel that is

00:39:24,260 --> 00:39:28,160
running outside of docker to test this

00:39:26,510 --> 00:39:31,160
with did that make sense to people and

00:39:28,160 --> 00:39:34,520
that's one of the trade-offs for using

00:39:31,160 --> 00:39:35,810
docker zombies

00:39:34,520 --> 00:39:37,190
one thing you'll notice this is part of

00:39:35,810 --> 00:39:40,940
the through looking-glass experience

00:39:37,190 --> 00:39:43,010
when you start up a a process

00:39:40,940 --> 00:39:46,160
inside of a container the initial

00:39:43,010 --> 00:39:48,349
command will be pig number one inside of

00:39:46,160 --> 00:39:51,020
the container outside of the container

00:39:48,349 --> 00:39:52,970
it'll have a normal Pig inside of the

00:39:51,020 --> 00:39:55,460
container it's number one when it exits

00:39:52,970 --> 00:39:57,170
the container shuts down but that also

00:39:55,460 --> 00:39:59,660
means if you don't want to bring the

00:39:57,170 --> 00:40:04,190
machine to its knees with left-over

00:39:59,660 --> 00:40:06,440
procs you have to reap them because

00:40:04,190 --> 00:40:09,589
there's no there's no standard issue in

00:40:06,440 --> 00:40:13,130
it inside of this container sucking up

00:40:09,589 --> 00:40:14,630
all your zombie processes so I forgot to

00:40:13,130 --> 00:40:18,290
do this recently and couldn't get back

00:40:14,630 --> 00:40:20,720
into the machine because I'd exhausted

00:40:18,290 --> 00:40:24,710
the process table only super user could

00:40:20,720 --> 00:40:27,859
get into the machine so one of the

00:40:24,710 --> 00:40:31,609
things that's in here is a wrapped

00:40:27,859 --> 00:40:34,660
version of the Sipan reporter that Forks

00:40:31,609 --> 00:40:40,400
and the parent just just does a wait and

00:40:34,660 --> 00:40:42,530
discards processes so the fork and reef

00:40:40,400 --> 00:40:46,520
basically the parent does something like

00:40:42,530 --> 00:40:48,710
this I wait I I was passed the child

00:40:46,520 --> 00:40:51,800
that I'm actually running the install

00:40:48,710 --> 00:40:55,880
with or I'm running the smoke testing

00:40:51,800 --> 00:40:58,910
with when that exits I have to exit at

00:40:55,880 --> 00:41:01,580
that point The Container shuts down but

00:40:58,910 --> 00:41:03,950
this is it's sort of a fake it's a runt

00:41:01,580 --> 00:41:06,170
version of an it that will just reap the

00:41:03,950 --> 00:41:12,170
process and I get that's in the in

00:41:06,170 --> 00:41:15,800
github so in order to run the smoke

00:41:12,170 --> 00:41:19,130
tests and we're almost done I want to

00:41:15,800 --> 00:41:23,990
take my pearl volume but this time I'm

00:41:19,130 --> 00:41:26,150
mounting it read-only then I have to

00:41:23,990 --> 00:41:30,410
mount sea pan on sea pan I create my

00:41:26,150 --> 00:41:32,839
temp volume and this looks a lot like

00:41:30,410 --> 00:41:34,730
what you saw before when I was running

00:41:32,839 --> 00:41:37,849
the build it's just start up a docker

00:41:34,730 --> 00:41:39,410
container running Sipan testers docker

00:41:37,849 --> 00:41:42,260
smoker which is the thing that does the

00:41:39,410 --> 00:41:45,470
fork and the reaping the processes

00:41:42,260 --> 00:41:48,230
one thing I'm going to propose I mean

00:41:45,470 --> 00:41:52,250
Dell enough to inherit to the code for

00:41:48,230 --> 00:41:55,490
doing this would be that we change the

00:41:52,250 --> 00:41:59,240
Sipan report or smoker right now it goes

00:41:55,490 --> 00:42:01,790
through the recents file and then it

00:41:59,240 --> 00:42:03,200
keeps going and I would like to have an

00:42:01,790 --> 00:42:05,960
option where it goes through the recent

00:42:03,200 --> 00:42:07,520
file and then exits because the sexy

00:42:05,960 --> 00:42:09,890
thing about that would be I can do a

00:42:07,520 --> 00:42:12,950
product of X number of versions of

00:42:09,890 --> 00:42:14,990
parole and and just iterate for all

00:42:12,950 --> 00:42:17,270
these versions of Perl see what happens

00:42:14,990 --> 00:42:19,280
on the recent file and if the thing

00:42:17,270 --> 00:42:21,260
doesn't exit I can't do that I've got to

00:42:19,280 --> 00:42:23,410
actually kill it in order to make it go

00:42:21,260 --> 00:42:23,410
away

00:42:23,810 --> 00:42:29,390
so anyway the real thing is Sipan

00:42:26,780 --> 00:42:32,690
smoking is not hard to do it is

00:42:29,390 --> 00:42:34,579
something that we as a community can do

00:42:32,690 --> 00:42:37,040
to make Perl better than other languages

00:42:34,579 --> 00:42:38,540
one of the things if you want to talk to

00:42:37,040 --> 00:42:42,680
someone about you know why why bother

00:42:38,540 --> 00:42:46,190
news Perl did the level of testing and

00:42:42,680 --> 00:42:48,530
test information and metadata about

00:42:46,190 --> 00:42:50,690
tests and what fails and what doesn't

00:42:48,530 --> 00:42:52,339
your ability to write a module and put

00:42:50,690 --> 00:42:54,500
it out there and find out where it runs

00:42:52,339 --> 00:42:58,790
is better on Perl by far than any of the

00:42:54,500 --> 00:43:01,250
language and doing this it's easy to

00:42:58,790 --> 00:43:03,440
contribute to that and docker izing this

00:43:01,250 --> 00:43:04,970
means we can have for the Perl community

00:43:03,440 --> 00:43:07,310
we can have bleeding edge we can have

00:43:04,970 --> 00:43:09,079
older versions newer versions different

00:43:07,310 --> 00:43:11,510
versions of everything in a corporate

00:43:09,079 --> 00:43:16,250
environment doing this makes it really

00:43:11,510 --> 00:43:18,950
easy to to say what happens if I upgrade

00:43:16,250 --> 00:43:21,380
my parole version what happens if I do a

00:43:18,950 --> 00:43:22,609
seep an upgrade and upgrade all my

00:43:21,380 --> 00:43:24,530
supporting versions to get all the

00:43:22,609 --> 00:43:26,510
people there running five eight eight

00:43:24,530 --> 00:43:29,119
because all it might break well you

00:43:26,510 --> 00:43:30,980
don't have to wonder if it breaks I can

00:43:29,119 --> 00:43:34,819
you can stick this smoke test into

00:43:30,980 --> 00:43:36,530
docker build everything it's not hard

00:43:34,819 --> 00:43:38,089
once you've done this to do all your

00:43:36,530 --> 00:43:40,069
regression tests inside a dock and you

00:43:38,089 --> 00:43:44,720
can prove to yourself that the next

00:43:40,069 --> 00:43:50,130
version of Perl runs everything and that

00:43:44,720 --> 00:43:55,980
is it if anyone cares should be

00:43:50,130 --> 00:43:58,260
didn't I already know it died I can say

00:43:55,980 --> 00:44:00,840
one cares I can open up a session on a

00:43:58,260 --> 00:44:02,010
machine that's got docker installed on

00:44:00,840 --> 00:44:03,930
it you can actually see what it looks

00:44:02,010 --> 00:44:07,050
like running this not are there any

00:44:03,930 --> 00:44:09,990
questions does anyone here have a

00:44:07,050 --> 00:44:13,190
heartbeat okay we got at least a few

00:44:09,990 --> 00:44:13,190
people I didn't kill everyone

00:44:25,820 --> 00:44:28,820
yeah

00:44:38,490 --> 00:44:41,119
street

00:44:41,150 --> 00:44:43,240

YouTube URL: https://www.youtube.com/watch?v=p6pf0OMn4Bs


