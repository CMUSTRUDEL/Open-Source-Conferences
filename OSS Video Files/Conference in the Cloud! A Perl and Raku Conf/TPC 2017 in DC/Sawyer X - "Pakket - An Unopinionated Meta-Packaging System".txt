Title: Sawyer X - "Pakket - An Unopinionated Meta-Packaging System"
Publication date: 2017-06-23
Playlist: TPC 2017 in DC
Description: 
	Packaging is one of the more illusive problems in maintaining a large set-up at any company. This is the solution we came up with at Booking.com.
Captions: 
	00:00:00,079 --> 00:00:09,480
thank you so um okay

00:00:05,870 --> 00:00:11,429
I'm a senior developer at book no comm

00:00:09,480 --> 00:00:13,309
and we work on a lot of stuff this is a

00:00:11,429 --> 00:00:17,270
project that we've been playing with and

00:00:13,309 --> 00:00:20,070
I'm presenting it it is a tentative

00:00:17,270 --> 00:00:22,619
presentation as in this is not the

00:00:20,070 --> 00:00:24,960
full-blown we're done it's good everyone

00:00:22,619 --> 00:00:26,670
start using it I want to share the

00:00:24,960 --> 00:00:28,320
background to this more than the

00:00:26,670 --> 00:00:30,750
application itself but I will also share

00:00:28,320 --> 00:00:34,320
how it works because it relates to all

00:00:30,750 --> 00:00:36,300
the background to it and we call it

00:00:34,320 --> 00:00:39,090
Paquette Paquette is Dutch for package

00:00:36,300 --> 00:00:41,280
and we figured package itself is

00:00:39,090 --> 00:00:43,980
probably a term that's both ambiguous

00:00:41,280 --> 00:00:48,210
and widely used so we'll just use Dutch

00:00:43,980 --> 00:00:50,820
because it's not that widely used some

00:00:48,210 --> 00:00:52,410
of it is vapour in the sense that while

00:00:50,820 --> 00:00:54,149
the application is actually written

00:00:52,410 --> 00:00:55,920
there are quite a few things that are

00:00:54,149 --> 00:00:57,449
not done on it yet there are a few

00:00:55,920 --> 00:00:59,760
things that we know we want to have but

00:00:57,449 --> 00:01:02,910
it's not there yet either so do consider

00:00:59,760 --> 00:01:04,820
some things uncomplete yet or incomplete

00:01:02,910 --> 00:01:07,560
and if you have questions on which

00:01:04,820 --> 00:01:09,570
features that you see are available just

00:01:07,560 --> 00:01:12,780
feel free to ask me I'll try to leave

00:01:09,570 --> 00:01:14,700
room at the end as well as pretty much

00:01:12,780 --> 00:01:16,409
everything that I will show exists and

00:01:14,700 --> 00:01:18,360
works and runs but there are a few

00:01:16,409 --> 00:01:20,189
things that I don't show that just are

00:01:18,360 --> 00:01:23,850
not there yet so there is partial

00:01:20,189 --> 00:01:26,460
vaporware concept in in Paquette itself

00:01:23,850 --> 00:01:30,659
and what it should provide in the end so

00:01:26,460 --> 00:01:32,490
the title for this the description that

00:01:30,659 --> 00:01:34,049
we have for the project is an

00:01:32,490 --> 00:01:36,150
underpinning meta packaging system is

00:01:34,049 --> 00:01:39,450
not that clear until you understand what

00:01:36,150 --> 00:01:42,570
Packaging is and why is it meta and what

00:01:39,450 --> 00:01:44,490
do you mean by unpin you dated so I want

00:01:42,570 --> 00:01:46,770
to start talking about packaging the

00:01:44,490 --> 00:01:48,360
majority of this talk packaging is a

00:01:46,770 --> 00:01:50,579
problem that has been solved but still

00:01:48,360 --> 00:01:52,560
needs to be solved what I mean is that

00:01:50,579 --> 00:01:54,780
packaging has a lot of perspectives to

00:01:52,560 --> 00:01:57,240
it all of which are pretty much solved

00:01:54,780 --> 00:01:58,950
but not together so you can have some

00:01:57,240 --> 00:02:00,119
perspectives that were solved and you

00:01:58,950 --> 00:02:01,290
could have other perspective they were

00:02:00,119 --> 00:02:03,960
solved but you can have them together

00:02:01,290 --> 00:02:06,930
and no one who's actually really fully

00:02:03,960 --> 00:02:08,640
solved this problem and that's what

00:02:06,930 --> 00:02:10,039
we're trying to do because we like a

00:02:08,640 --> 00:02:12,810
challenge

00:02:10,039 --> 00:02:13,430
Packaging has two different sets of

00:02:12,810 --> 00:02:16,349
users

00:02:13,430 --> 00:02:19,019
the first one is desktop users which is

00:02:16,349 --> 00:02:21,060
basically all of us at some point we

00:02:19,019 --> 00:02:23,069
have a laptop or we have a computer is

00:02:21,060 --> 00:02:24,329
or either at home or at work and we want

00:02:23,069 --> 00:02:26,549
to have stuff on it we want to use

00:02:24,329 --> 00:02:30,629
things we are users or packaging in the

00:02:26,549 --> 00:02:33,840
sense that we need package well we need

00:02:30,629 --> 00:02:35,879
packaged applications and libraries and

00:02:33,840 --> 00:02:38,639
we need to install those packages and

00:02:35,879 --> 00:02:39,689
that makes us users of it but we only

00:02:38,639 --> 00:02:40,920
want to install them we don't want to

00:02:39,689 --> 00:02:43,799
build winter one package ourselves

00:02:40,920 --> 00:02:46,139
another type of user is a company a

00:02:43,799 --> 00:02:48,629
company is basically some of us at some

00:02:46,139 --> 00:02:50,370
point and in a company you have two

00:02:48,629 --> 00:02:52,349
types of users the first one is the

00:02:50,370 --> 00:02:54,959
systems administrators this admin's are

00:02:52,349 --> 00:02:59,040
the ones who create the packages if you

00:02:54,959 --> 00:03:00,810
have a company let's take Red Hat and

00:02:59,040 --> 00:03:02,849
you want to maintain a set of servers

00:03:00,810 --> 00:03:05,010
well of course you're going to use a red

00:03:02,849 --> 00:03:06,540
hat linux but maybe you want to patch

00:03:05,010 --> 00:03:08,579
for a few things that are not available

00:03:06,540 --> 00:03:09,840
publicly which are allowed to do but

00:03:08,579 --> 00:03:11,129
then you have to maintain your own

00:03:09,840 --> 00:03:13,230
patches you have to maintain your own

00:03:11,129 --> 00:03:15,419
packages Red Hat are pretty good at this

00:03:13,230 --> 00:03:17,790
if you are a different company let's say

00:03:15,419 --> 00:03:20,669
booking we're probably not as skilled at

00:03:17,790 --> 00:03:22,530
this as Red Hat but we do have our own

00:03:20,669 --> 00:03:24,329
packages for everything because we want

00:03:22,530 --> 00:03:27,000
to maintain our own patches specific

00:03:24,329 --> 00:03:29,310
versions additions some of them will go

00:03:27,000 --> 00:03:31,229
upstream some of them won't so that

00:03:29,310 --> 00:03:34,319
means the system administrator has

00:03:31,229 --> 00:03:36,359
eventually built how to build everything

00:03:34,319 --> 00:03:38,370
and then you have the end users which

00:03:36,359 --> 00:03:40,500
are basically us again but under the

00:03:38,370 --> 00:03:42,419
company we need to install it this also

00:03:40,500 --> 00:03:44,549
means servers servers need to install

00:03:42,419 --> 00:03:46,259
set packages so you have decide that

00:03:44,549 --> 00:03:48,930
manufactures and creates and then you

00:03:46,259 --> 00:03:50,970
have the size the uses sometimes our

00:03:48,930 --> 00:03:52,680
Linux distribution will be the one that

00:03:50,970 --> 00:03:56,069
manufactures and we just run apps

00:03:52,680 --> 00:03:59,040
install or yum install and sometimes we

00:03:56,069 --> 00:04:00,840
will be a company employee or a server

00:03:59,040 --> 00:04:04,500
for the companies that needs to have

00:04:00,840 --> 00:04:05,909
those packages installed now there are a

00:04:04,500 --> 00:04:10,290
lot of requirements and I'm going to go

00:04:05,909 --> 00:04:11,489
over the big ones that I think of the

00:04:10,290 --> 00:04:13,799
first requirement that we have for a

00:04:11,489 --> 00:04:17,099
package is speed and this is often

00:04:13,799 --> 00:04:19,979
looked in situations where we have

00:04:17,099 --> 00:04:21,810
end-users without a company so when I'm

00:04:19,979 --> 00:04:22,570
on my laptop it's ok if it takes another

00:04:21,810 --> 00:04:24,250
minute

00:04:22,570 --> 00:04:27,280
module to install but if you're a

00:04:24,250 --> 00:04:29,320
company this is not okay if we want to

00:04:27,280 --> 00:04:30,850
deploy something we have some server

00:04:29,320 --> 00:04:33,820
roles at the company they have over

00:04:30,850 --> 00:04:36,700
1,000 servers when we deploy software

00:04:33,820 --> 00:04:40,030
over ten times a day to those over 1,000

00:04:36,700 --> 00:04:42,010
servers for a single server role we want

00:04:40,030 --> 00:04:43,870
it to be fast in order to be fast it

00:04:42,010 --> 00:04:46,660
means it has to be built ahead of time

00:04:43,870 --> 00:04:49,050
and then just be installed directly we

00:04:46,660 --> 00:04:52,030
don't want to run all the build process

00:04:49,050 --> 00:04:53,680
there's also the concept of library

00:04:52,030 --> 00:04:55,450
dependencies and dependencies in general

00:04:53,680 --> 00:04:57,160
if you have a package you want to be

00:04:55,450 --> 00:04:58,690
able to depend on other things if you

00:04:57,160 --> 00:05:00,340
have a module you want to depend on

00:04:58,690 --> 00:05:01,990
other modules if you have a CL every you

00:05:00,340 --> 00:05:05,410
want to depend in other C libraries and

00:05:01,990 --> 00:05:08,350
so on but that comes with dependency

00:05:05,410 --> 00:05:10,180
accuracy which are different problems

00:05:08,350 --> 00:05:12,370
that work together and often times in

00:05:10,180 --> 00:05:14,920
packages systems they deviate simply

00:05:12,370 --> 00:05:17,050
because they are provided by different

00:05:14,920 --> 00:05:19,540
mechanisms dependency accuracy means

00:05:17,050 --> 00:05:21,820
that sure I have dependencies but I can

00:05:19,540 --> 00:05:24,790
name all the accurate dependencies or

00:05:21,820 --> 00:05:26,740
name all of them accurately for example

00:05:24,790 --> 00:05:28,270
if you have a pro module and it has

00:05:26,740 --> 00:05:30,070
several dependencies you want to make

00:05:28,270 --> 00:05:32,170
sure you have all of them you don't want

00:05:30,070 --> 00:05:33,850
to have some of them but this is

00:05:32,170 --> 00:05:35,800
something that for a lot of systems is

00:05:33,850 --> 00:05:37,240
very difficult to do for example if you

00:05:35,800 --> 00:05:39,040
have a perl module that has a C

00:05:37,240 --> 00:05:41,770
dependency because it has some C

00:05:39,040 --> 00:05:44,530
bindings you cannot specify this on CPM

00:05:41,770 --> 00:05:45,970
there's the alien packages but they're

00:05:44,530 --> 00:05:48,480
not there yet they're not complete and

00:05:45,970 --> 00:05:50,680
then they'll provide everything so

00:05:48,480 --> 00:05:52,420
there's one example something you just

00:05:50,680 --> 00:05:56,490
have a hard time doing even though we

00:05:52,420 --> 00:05:58,480
have a very prolific dependency system

00:05:56,490 --> 00:05:59,890
additionally one of the more interesting

00:05:58,480 --> 00:06:02,170
perspectives that we have at a

00:05:59,890 --> 00:06:04,630
large-scale company is the concept of

00:06:02,170 --> 00:06:08,080
atomic installations upgrades downgrades

00:06:04,630 --> 00:06:09,970
and reversion and this is something that

00:06:08,080 --> 00:06:11,890
most packaging systems don't even think

00:06:09,970 --> 00:06:13,960
about but for us it matters so if we do

00:06:11,890 --> 00:06:16,540
a deployment during that deployment we

00:06:13,960 --> 00:06:18,250
might have upgraded a few packages we

00:06:16,540 --> 00:06:20,440
would like to have that installation

00:06:18,250 --> 00:06:22,300
either work or not work we don't want to

00:06:20,440 --> 00:06:24,460
have it halfway through which means that

00:06:22,300 --> 00:06:27,400
maybe some things were installed or it

00:06:24,460 --> 00:06:29,020
could be a complete disaster where even

00:06:27,400 --> 00:06:31,180
what we try to install only halfway

00:06:29,020 --> 00:06:33,430
installed and then we have a broken

00:06:31,180 --> 00:06:35,800
state so this is the concept of atomic

00:06:33,430 --> 00:06:36,120
it's the atomic installation are periods

00:06:35,800 --> 00:06:37,770
down

00:06:36,120 --> 00:06:39,840
where you have an entire transaction

00:06:37,770 --> 00:06:41,600
that you can perform and if it fails all

00:06:39,840 --> 00:06:43,350
of it fails and you're fine and

00:06:41,600 --> 00:06:45,090
reversion is a different thing than

00:06:43,350 --> 00:06:47,880
downgrade because reversion basically

00:06:45,090 --> 00:06:50,550
says to the previous state if we do an

00:06:47,880 --> 00:06:51,720
upgrade in upgrades of the software and

00:06:50,550 --> 00:06:53,430
part of the upgrades of the software

00:06:51,720 --> 00:06:55,229
actually means downgrading a dependency

00:06:53,430 --> 00:06:57,960
to a version that has certain features

00:06:55,229 --> 00:07:00,150
that was removed or is implementing it

00:06:57,960 --> 00:07:02,729
better until the new version fixes it

00:07:00,150 --> 00:07:05,130
then a reversion means going back and

00:07:02,729 --> 00:07:07,169
going back might mean going back to a

00:07:05,130 --> 00:07:09,570
newer version of a dependency you don't

00:07:07,169 --> 00:07:10,830
know this and it happens so this'll take

00:07:09,570 --> 00:07:12,210
into account these are different things

00:07:10,830 --> 00:07:13,460
and most vexing systems doesn't even

00:07:12,210 --> 00:07:16,440
think about it

00:07:13,460 --> 00:07:18,449
lastly the concept of multiple instances

00:07:16,440 --> 00:07:19,620
this is something that a lot of

00:07:18,449 --> 00:07:21,630
packaging systems don't provide because

00:07:19,620 --> 00:07:23,130
their system packages there are a lot of

00:07:21,630 --> 00:07:24,539
places that do provide it but only

00:07:23,130 --> 00:07:26,910
halfway through because they think of

00:07:24,539 --> 00:07:29,370
users and not of servers and this

00:07:26,910 --> 00:07:31,080
becomes a very awkward muddy water kind

00:07:29,370 --> 00:07:33,270
of thing but it actually makes sense we

00:07:31,080 --> 00:07:36,510
have a system at work that is written in

00:07:33,270 --> 00:07:38,550
pro and that maintains the different

00:07:36,510 --> 00:07:41,700
perl packages that are installed if it

00:07:38,550 --> 00:07:43,650
installs a package which then breaks it

00:07:41,700 --> 00:07:46,260
then it basically cuts off is on its own

00:07:43,650 --> 00:07:47,910
legs and then it cannot remove that

00:07:46,260 --> 00:07:51,060
package because it itself might use that

00:07:47,910 --> 00:07:52,830
package which means it broke its up so

00:07:51,060 --> 00:07:54,680
having multiple instances means that

00:07:52,830 --> 00:07:57,630
that could be run on the same machine

00:07:54,680 --> 00:08:00,120
but without being affected by what it

00:07:57,630 --> 00:08:01,740
changes so things like that are actually

00:08:00,120 --> 00:08:03,389
very valuable also upgrading Pro

00:08:01,740 --> 00:08:04,680
versions is very important to be able to

00:08:03,389 --> 00:08:06,479
have more than one Pro version available

00:08:04,680 --> 00:08:08,220
in most systems you have to put the

00:08:06,479 --> 00:08:10,560
version as part of the name and becomes

00:08:08,220 --> 00:08:13,169
in complete nightmare so I want to cover

00:08:10,560 --> 00:08:14,699
what these mean in the context of the

00:08:13,169 --> 00:08:17,880
applications and solutions that we do

00:08:14,699 --> 00:08:20,760
have these are seasoned clients you can

00:08:17,880 --> 00:08:24,030
think of these as also NPM and also pipe

00:08:20,760 --> 00:08:25,740
I and other languages have similar

00:08:24,030 --> 00:08:28,919
things and they are all somewhat the

00:08:25,740 --> 00:08:30,389
same in their abilities even though some

00:08:28,919 --> 00:08:31,650
of them are nicer sound they're shiny or

00:08:30,389 --> 00:08:33,630
some they're faster but they're all

00:08:31,650 --> 00:08:37,320
somewhat the same in what they perform

00:08:33,630 --> 00:08:39,029
and how they perform their work so when

00:08:37,320 --> 00:08:42,330
we talk about pre-built packages none of

00:08:39,029 --> 00:08:44,850
these can do it they all take sources

00:08:42,330 --> 00:08:46,620
build them test them and then install

00:08:44,850 --> 00:08:48,830
them if you take a look at stuff like

00:08:46,620 --> 00:08:51,080
CPM it just

00:08:48,830 --> 00:08:52,850
of stuff if you think of the new static

00:08:51,080 --> 00:08:54,530
install option that works but not

00:08:52,850 --> 00:08:56,450
foresee packages or anything that has a

00:08:54,530 --> 00:08:57,620
dynamic and fit to it and most of us

00:08:56,450 --> 00:08:59,840
don't how many people here are familiar

00:08:57,620 --> 00:09:02,840
with the new static install concept of

00:08:59,840 --> 00:09:04,520
Sipan one person so this is the new idea

00:09:02,840 --> 00:09:05,900
of like oh well if we don't need to

00:09:04,520 --> 00:09:08,450
build anything we can just copy it over

00:09:05,900 --> 00:09:09,830
that gives us the behavior of pre build

00:09:08,450 --> 00:09:11,570
but it isn't really pre-built

00:09:09,830 --> 00:09:13,490
it just doesn't need building there's a

00:09:11,570 --> 00:09:15,770
difference when it comes to dependencies

00:09:13,490 --> 00:09:17,960
this is I need to note this because

00:09:15,770 --> 00:09:19,580
where I'm from we have this marker but a

00:09:17,960 --> 00:09:22,250
lot of people don't know it outside so

00:09:19,580 --> 00:09:24,620
this is a V with an X which basically

00:09:22,250 --> 00:09:27,380
means halfway through like it has it it

00:09:24,620 --> 00:09:28,640
doesn't fully have it so when it comes

00:09:27,380 --> 00:09:30,380
to hammering dependencies all of these

00:09:28,640 --> 00:09:31,790
can handle dependencies which is great

00:09:30,380 --> 00:09:33,740
if you have the c-pen module you can

00:09:31,790 --> 00:09:35,780
embed in other CP modules but you can

00:09:33,740 --> 00:09:38,150
only depend on whatever language you are

00:09:35,780 --> 00:09:42,020
in these are language specific

00:09:38,150 --> 00:09:44,720
installers so a pipe I cannot require a

00:09:42,020 --> 00:09:47,420
perl module that is somehow used

00:09:44,720 --> 00:09:49,820
internally by the application like it

00:09:47,420 --> 00:09:52,220
Forks and run runs perl and use the

00:09:49,820 --> 00:09:53,630
module to do a specific task that

00:09:52,220 --> 00:09:54,950
happens in a lot of applications because

00:09:53,630 --> 00:09:57,770
there's a pro module that does that

00:09:54,950 --> 00:10:00,680
Wi-Fi can do that we can also not depend

00:09:57,770 --> 00:10:03,710
on other Wi-Fi packages in Pro so we

00:10:00,680 --> 00:10:05,540
have way through it when it comes to

00:10:03,710 --> 00:10:08,090
accuracy though what we do have we do

00:10:05,540 --> 00:10:11,000
really well because any language has its

00:10:08,090 --> 00:10:13,070
own metadata and using that metadata we

00:10:11,000 --> 00:10:15,470
know exactly what's needed we know

00:10:13,070 --> 00:10:16,850
exactly which Pro versions which is

00:10:15,470 --> 00:10:19,220
unfortunately the only thing we support

00:10:16,850 --> 00:10:20,120
we know when we need them how we need

00:10:19,220 --> 00:10:22,910
them what we're going to do with them

00:10:20,120 --> 00:10:24,980
it's fantastic when it comes to atomic

00:10:22,910 --> 00:10:27,860
when I have that I could say that we

00:10:24,980 --> 00:10:29,870
halfway have it but sort of so when you

00:10:27,860 --> 00:10:32,470
want to install something if you're an

00:10:29,870 --> 00:10:34,700
install on a package that has about

00:10:32,470 --> 00:10:36,980
let's say 20 requirements and

00:10:34,700 --> 00:10:39,980
dependencies it will install them if the

00:10:36,980 --> 00:10:43,040
15th fails you won't have a broken state

00:10:39,980 --> 00:10:46,220
but you will have installed 14 new

00:10:43,040 --> 00:10:47,960
modules so you have waived it and that's

00:10:46,220 --> 00:10:50,840
that's tricky that's very problematic

00:10:47,960 --> 00:10:53,150
and you can't reverse you can't just go

00:10:50,840 --> 00:10:55,910
what was the thing before let's just use

00:10:53,150 --> 00:10:57,650
the older version that didn't exist we

00:10:55,910 --> 00:11:00,440
have multiple instances support it so

00:10:57,650 --> 00:11:01,630
you need local lid Pro brew PLN's and

00:11:00,440 --> 00:11:03,920
Suffolk

00:11:01,630 --> 00:11:06,170
Cardon has an honourable mention because

00:11:03,920 --> 00:11:09,470
it tries to fix the pre-built part but

00:11:06,170 --> 00:11:11,990
for everything else it's the same take a

00:11:09,470 --> 00:11:14,380
look at rpm in dev these are the system

00:11:11,990 --> 00:11:16,760
packages so any distribution has these

00:11:14,380 --> 00:11:18,290
it has pre-built packages because it

00:11:16,760 --> 00:11:20,090
actually creates binary packages and you

00:11:18,290 --> 00:11:22,790
can just then copy over and install

00:11:20,090 --> 00:11:24,650
unpack it handles dependencies really

00:11:22,790 --> 00:11:26,480
well because it's an arbitrary system so

00:11:24,650 --> 00:11:28,370
you can depend on anything you want it

00:11:26,480 --> 00:11:29,840
basically represents everything in rpm

00:11:28,370 --> 00:11:32,390
packages or in depth packages or

00:11:29,840 --> 00:11:35,390
whatever other system package air you

00:11:32,390 --> 00:11:37,760
have and when it represents in that way

00:11:35,390 --> 00:11:39,380
you can just depend on any of these so

00:11:37,760 --> 00:11:41,330
there's an RPM that represents a pearl

00:11:39,380 --> 00:11:42,920
so one rpm can use another air PM and

00:11:41,330 --> 00:11:44,270
that our PM could be a pro package could

00:11:42,920 --> 00:11:47,120
be a Python package could be a C package

00:11:44,270 --> 00:11:50,930
could be whatever you want but when it

00:11:47,120 --> 00:11:53,270
comes to accuracy it is bad it is bad

00:11:50,930 --> 00:11:55,220
because it is a very reductionist system

00:11:53,270 --> 00:11:57,710
it has to represent something very very

00:11:55,220 --> 00:12:01,250
complicated in a very reduced form and

00:11:57,710 --> 00:12:03,800
that is wrong because it loses all of

00:12:01,250 --> 00:12:06,080
that information that was available so

00:12:03,800 --> 00:12:08,120
it does that's like grep and then see

00:12:06,080 --> 00:12:10,640
how many use statements I can find and

00:12:08,120 --> 00:12:12,260
hope they're not comments or they're not

00:12:10,640 --> 00:12:14,630
in a context in which they're actually

00:12:12,260 --> 00:12:17,120
don't run like in documentation there's

00:12:14,630 --> 00:12:18,800
stuff like that for us for example a

00:12:17,120 --> 00:12:20,720
booking for awhile we couldn't use per

00:12:18,800 --> 00:12:22,610
critic because per critic was flying

00:12:20,720 --> 00:12:24,410
down a lot of tests and because it was

00:12:22,610 --> 00:12:26,750
flagging a lot of tests it accidentally

00:12:24,410 --> 00:12:29,480
thought that everything depends on it we

00:12:26,750 --> 00:12:31,730
should wasn't and though and because of

00:12:29,480 --> 00:12:33,590
that we had a grep - V which basically

00:12:31,730 --> 00:12:37,040
inverts that and says anything but per

00:12:33,590 --> 00:12:40,340
critic so it was a block list and we had

00:12:37,040 --> 00:12:41,720
to fix that when it comes to atomic

00:12:40,340 --> 00:12:43,100
insulation it is correct it has

00:12:41,720 --> 00:12:44,480
transactions so you can have a

00:12:43,100 --> 00:12:45,800
transaction and that trends actually

00:12:44,480 --> 00:12:47,570
induce succeeds or fails and if it fails

00:12:45,800 --> 00:12:49,850
it just fails and you're back to what

00:12:47,570 --> 00:12:51,590
you were before she's great but it

00:12:49,850 --> 00:12:53,150
doesn't have reversions which means if

00:12:51,590 --> 00:12:54,560
you have to go back you need to create a

00:12:53,150 --> 00:12:57,370
new transaction of everything that

00:12:54,560 --> 00:12:59,690
existed before and then perform that and

00:12:57,370 --> 00:13:01,310
it doesn't support multiple instances

00:12:59,690 --> 00:13:03,890
but mostly out of design because it's

00:13:01,310 --> 00:13:05,780
meant to have a system-wide solution

00:13:03,890 --> 00:13:08,720
it's meant to maintain an entire

00:13:05,780 --> 00:13:10,580
distribution an entire system but when

00:13:08,720 --> 00:13:12,750
you come to applications and not just

00:13:10,580 --> 00:13:14,400
the system itself this is a

00:13:12,750 --> 00:13:17,430
problem because applications need

00:13:14,400 --> 00:13:19,620
multiple instances so you can say I will

00:13:17,430 --> 00:13:22,940
just put everything in a darker would

00:13:19,620 --> 00:13:25,710
work but that's additional maintenance

00:13:22,940 --> 00:13:27,660
there is a class of new packaging

00:13:25,710 --> 00:13:31,200
systems such as brew which basically

00:13:27,660 --> 00:13:33,150
gives you a system provided packaging

00:13:31,200 --> 00:13:35,850
it's nice because it's more up-to-date

00:13:33,150 --> 00:13:38,220
in most cases but I think it's fall

00:13:35,850 --> 00:13:40,440
short of all of these first of all

00:13:38,220 --> 00:13:41,850
pre-built some of it could be pre-built

00:13:40,440 --> 00:13:43,980
some of the not pre-built

00:13:41,850 --> 00:13:46,890
some ways compiled on the spot some of

00:13:43,980 --> 00:13:48,540
it isn't pretty frustrating but it has

00:13:46,890 --> 00:13:51,300
the ability to pre build but then you

00:13:48,540 --> 00:13:53,040
have to pre-built for every thing you

00:13:51,300 --> 00:13:55,310
have to be built for any kind of user

00:13:53,040 --> 00:13:58,380
because anyone could use brew that's

00:13:55,310 --> 00:13:59,550
complications dependencies enhance

00:13:58,380 --> 00:14:01,730
dependencies because represents

00:13:59,550 --> 00:14:05,910
everything is brew so it created its own

00:14:01,730 --> 00:14:08,460
realm but the accuracy again falls short

00:14:05,910 --> 00:14:12,680
because it has to reduce that into a

00:14:08,460 --> 00:14:15,930
broom situation so that's that's tricky

00:14:12,680 --> 00:14:18,510
when it comes to atomic operations it

00:14:15,930 --> 00:14:20,400
also fails that mainly because it just

00:14:18,510 --> 00:14:25,650
downloads and tries to install just like

00:14:20,400 --> 00:14:27,150
Sipan so that's also a problem and when

00:14:25,650 --> 00:14:28,920
it comes to reversions can do that

00:14:27,150 --> 00:14:31,560
either and it doesn't have multiple

00:14:28,920 --> 00:14:33,000
instances either you can say well it's

00:14:31,560 --> 00:14:34,650
based on user so you just create another

00:14:33,000 --> 00:14:36,240
user but that doesn't really work when

00:14:34,650 --> 00:14:39,780
you have an entire permission system of

00:14:36,240 --> 00:14:43,400
a distribution so two additional

00:14:39,780 --> 00:14:48,300
mentions Basel has anyone heard of Basel

00:14:43,400 --> 00:14:49,920
okay Thank You Brad Basel is this system

00:14:48,300 --> 00:14:52,290
that Google came up with and people are

00:14:49,920 --> 00:14:54,330
really excited about it but it is just a

00:14:52,290 --> 00:14:56,460
build system so it is equivalent to a

00:14:54,330 --> 00:14:58,770
make file it is not a packaging system

00:14:56,460 --> 00:15:01,320
and Basel I've been to a talk that

00:14:58,770 --> 00:15:03,720
google gave on it and it seems to be one

00:15:01,320 --> 00:15:05,339
of the similar other similar things that

00:15:03,720 --> 00:15:06,960
Google provides which is we wrote

00:15:05,339 --> 00:15:09,180
something that works for something very

00:15:06,960 --> 00:15:11,280
particular that we do and if you do

00:15:09,180 --> 00:15:14,940
exactly this for the situation that no

00:15:11,280 --> 00:15:16,800
one else has it will work perfectly so

00:15:14,940 --> 00:15:19,680
it's great that they open-source this

00:15:16,800 --> 00:15:21,930
and you could adapt to it but it isn't a

00:15:19,680 --> 00:15:23,700
packaging system so I just want to make

00:15:21,930 --> 00:15:24,740
a note of that because people tend to

00:15:23,700 --> 00:15:26,870
ask well why just not

00:15:24,740 --> 00:15:28,940
use basil it's not a package that you

00:15:26,870 --> 00:15:33,230
can do pro for example it's not meant to

00:15:28,940 --> 00:15:34,880
it's only for C or C++ topic that active

00:15:33,230 --> 00:15:36,440
state deserves in another mention

00:15:34,880 --> 00:15:38,720
because access state actually solves

00:15:36,440 --> 00:15:40,790
many of these problems but they have to

00:15:38,720 --> 00:15:44,060
maintain their own thing and it's also

00:15:40,790 --> 00:15:45,709
not an entire system but they do solve a

00:15:44,060 --> 00:15:49,220
lot of these so it's worthwhile looking

00:15:45,709 --> 00:15:51,800
into this is a matrix of all of the

00:15:49,220 --> 00:15:53,930
possibilities you can see that they all

00:15:51,800 --> 00:15:55,820
pretty much fail at something and the

00:15:53,930 --> 00:15:58,459
problematic thing here is that well

00:15:55,820 --> 00:16:01,760
maybe one or two are not the worst not

00:15:58,459 --> 00:16:04,130
having the specific things that they

00:16:01,760 --> 00:16:05,779
don't have is actually a problem so if

00:16:04,130 --> 00:16:07,700
you take a look at Sipan the one thing

00:16:05,779 --> 00:16:09,740
is really fails at its pre built-in

00:16:07,700 --> 00:16:11,360
dependencies so you could say okay it

00:16:09,740 --> 00:16:13,250
doesn't have a Tomic so maybe we can

00:16:11,360 --> 00:16:15,649
work around that but it has to have

00:16:13,250 --> 00:16:18,440
pre-built packages it has to have good

00:16:15,649 --> 00:16:20,959
support for dependencies RPM has those

00:16:18,440 --> 00:16:22,790
that's great but its accuracy is really

00:16:20,959 --> 00:16:24,800
flawed and we get into a lot of

00:16:22,790 --> 00:16:27,500
workarounds I've seen it multiple

00:16:24,800 --> 00:16:29,990
companies and it is very difficult to

00:16:27,500 --> 00:16:32,510
crawl out of that it also doesn't have

00:16:29,990 --> 00:16:34,490
multiple instances so now we created

00:16:32,510 --> 00:16:35,779
packages where it's purl and diversion

00:16:34,490 --> 00:16:36,950
apparel and that's part of the name

00:16:35,779 --> 00:16:39,170
because we want to have more than one

00:16:36,950 --> 00:16:41,300
version of Perl installed that becomes a

00:16:39,170 --> 00:16:42,800
nightmare to maintain and if you take a

00:16:41,300 --> 00:16:45,410
look at brew I think it fails to most

00:16:42,800 --> 00:16:46,700
things because well it could be pre

00:16:45,410 --> 00:16:48,680
build you're depending on someone else

00:16:46,700 --> 00:16:50,630
doing that and well they can't

00:16:48,680 --> 00:16:54,290
dependencies it's not accurate in it so

00:16:50,630 --> 00:16:56,540
we kind of lose everything in it so we

00:16:54,290 --> 00:17:00,500
came up with Paquette and Poquette uses

00:16:56,540 --> 00:17:04,730
two very specific ideas delegation and

00:17:00,500 --> 00:17:06,050
generalize and these seem to be excluded

00:17:04,730 --> 00:17:07,429
mutually exclusive but they actually

00:17:06,050 --> 00:17:08,929
work really well together delegation

00:17:07,429 --> 00:17:10,850
means that you pass on the work to a

00:17:08,929 --> 00:17:11,929
different part the different component

00:17:10,850 --> 00:17:14,360
that is more capable and knowledgeable

00:17:11,929 --> 00:17:17,000
on how to do the job and you generalize

00:17:14,360 --> 00:17:18,650
providing common behavior to components

00:17:17,000 --> 00:17:21,890
and I want to explore some of those

00:17:18,650 --> 00:17:23,540
ideas here but it has four stages of

00:17:21,890 --> 00:17:24,470
operation two of them are actually

00:17:23,540 --> 00:17:26,480
optional

00:17:24,470 --> 00:17:28,130
the first one is generate which is

00:17:26,480 --> 00:17:30,710
optional it helps you create a set of

00:17:28,130 --> 00:17:35,480
specs which you can do manually as well

00:17:30,710 --> 00:17:36,890
it then builds things you can then

00:17:35,480 --> 00:17:39,260
install them

00:17:36,890 --> 00:17:41,420
and optionally you can run them and when

00:17:39,260 --> 00:17:43,670
I say optionally what I mean is that you

00:17:41,420 --> 00:17:45,440
could use the pocket runner in order to

00:17:43,670 --> 00:17:46,880
run things but you could also ask it to

00:17:45,440 --> 00:17:48,710
create an environment that you will just

00:17:46,880 --> 00:17:51,830
use whenever you want in whatever

00:17:48,710 --> 00:17:54,920
context you want so it's optional so

00:17:51,830 --> 00:17:57,400
let's talk about generation to join

00:17:54,920 --> 00:17:59,810
things what we actually do is tackle and

00:17:57,400 --> 00:18:02,600
scaffolding basically means we take a

00:17:59,810 --> 00:18:05,570
look at a system that has metadata ask

00:18:02,600 --> 00:18:08,510
it for information and then generate the

00:18:05,570 --> 00:18:11,000
equivalent things in okay if we're

00:18:08,510 --> 00:18:12,920
talking about probe we have a matter TPN

00:18:11,000 --> 00:18:15,800
- if an has an API

00:18:12,920 --> 00:18:17,390
it is very extensive it gives us all the

00:18:15,800 --> 00:18:19,430
information we need in order to know

00:18:17,390 --> 00:18:21,830
which Pro packages depend on which perl

00:18:19,430 --> 00:18:23,660
packages and for what if you're

00:18:21,830 --> 00:18:26,090
interested in this Makena so yes you

00:18:23,660 --> 00:18:28,010
gave a talk about this and he did I yes

00:18:26,090 --> 00:18:31,600
sir so you can watch it now but it will

00:18:28,010 --> 00:18:31,600
be on video so you can watch it later

00:18:31,870 --> 00:18:36,680
these are the commands that we use in

00:18:34,160 --> 00:18:39,440
order to generate we call Paquette we

00:18:36,680 --> 00:18:41,990
have a manager we call add and this will

00:18:39,440 --> 00:18:43,700
basically look at a system and generate

00:18:41,990 --> 00:18:46,340
the equivalent there are two packages

00:18:43,700 --> 00:18:48,440
here one is native Perl and another one

00:18:46,340 --> 00:18:51,400
is Perl dancer and these are different

00:18:48,440 --> 00:18:53,690
what these have are actually categories

00:18:51,400 --> 00:18:55,780
the packages themselves and a version

00:18:53,690 --> 00:18:58,700
and the category here the one in red

00:18:55,780 --> 00:19:01,370
helps the manager know which med

00:18:58,700 --> 00:19:05,540
assistant to go to in order to get that

00:19:01,370 --> 00:19:07,970
data which metadata API it has so when

00:19:05,540 --> 00:19:10,190
it's a Perl system just like the lower

00:19:07,970 --> 00:19:11,480
one the second line it will actually go

00:19:10,190 --> 00:19:12,950
to meditate and say I'm just going to

00:19:11,480 --> 00:19:15,110
ask you and that's something that

00:19:12,950 --> 00:19:16,640
reduces all the need for grepping

00:19:15,110 --> 00:19:18,560
everything and assuming we got a right

00:19:16,640 --> 00:19:20,450
instead it just goes to the appropriate

00:19:18,560 --> 00:19:22,400
metadata system and asked for it and

00:19:20,450 --> 00:19:25,100
that's the delegation part instead of

00:19:22,400 --> 00:19:26,930
saying I know this but it says I don't

00:19:25,100 --> 00:19:27,920
know this I'm not going to try knowing

00:19:26,930 --> 00:19:31,570
this I'm going to ask someone that I

00:19:27,920 --> 00:19:31,570
think doesn't know it is yes

00:19:43,440 --> 00:19:48,639
right so the question if I understand

00:19:46,389 --> 00:19:50,349
correctly is the dependency of a

00:19:48,639 --> 00:19:53,169
language specific with the language

00:19:50,349 --> 00:19:55,119
interpreter in this case Paquette will

00:19:53,169 --> 00:19:57,330
not do this you can bind them together

00:19:55,119 --> 00:19:59,679
to say I would like to package a

00:19:57,330 --> 00:20:01,299
language specific module and I would

00:19:59,679 --> 00:20:04,149
also like it to bind against the

00:20:01,299 --> 00:20:05,679
language which I will also build if you

00:20:04,149 --> 00:20:07,989
don't do this it will simply use the

00:20:05,679 --> 00:20:09,609
system pearl that you have running which

00:20:07,989 --> 00:20:13,119
is great for us because it allows us to

00:20:09,609 --> 00:20:16,629
maintain for now pearl in RPM form and

00:20:13,119 --> 00:20:18,519
build everything against that and then

00:20:16,629 --> 00:20:20,289
later on when we want to we will move

00:20:18,519 --> 00:20:23,879
pearl to Poquette and build it ourselves

00:20:20,289 --> 00:20:27,220
as well and then build against that okay

00:20:23,879 --> 00:20:30,340
so this is how it might look like and

00:20:27,220 --> 00:20:32,470
when I say it might look like it's only

00:20:30,340 --> 00:20:34,779
because this is one form of having it in

00:20:32,470 --> 00:20:36,849
focus this is also abstract I will talk

00:20:34,779 --> 00:20:39,460
about this later one form of having is a

00:20:36,849 --> 00:20:40,749
JSON file and what you can see here is

00:20:39,460 --> 00:20:42,429
the two different packages and how that

00:20:40,749 --> 00:20:44,169
would look like they have the package

00:20:42,429 --> 00:20:45,639
details which is the category name

00:20:44,169 --> 00:20:48,279
version release and you have the prereqs

00:20:45,639 --> 00:20:52,210
so the category itself is one of the

00:20:48,279 --> 00:20:53,979
strongest emphases of Paquette in a lot

00:20:52,210 --> 00:20:55,479
of packaging systems you have categories

00:20:53,979 --> 00:20:57,549
but the only reason you have categories

00:20:55,479 --> 00:20:59,049
is because you want to know what kind of

00:20:57,549 --> 00:21:01,299
world to associate it to so this is like

00:20:59,049 --> 00:21:03,099
this is games so you go there and you

00:21:01,299 --> 00:21:04,479
can find its discoverability which for

00:21:03,099 --> 00:21:06,279
Poquette it isn't about user

00:21:04,479 --> 00:21:07,749
discoverability is about the application

00:21:06,279 --> 00:21:10,149
discoverability it's about the Builder

00:21:07,749 --> 00:21:12,789
so propogated says oh this is the pro

00:21:10,149 --> 00:21:14,470
package i know how to not just get data

00:21:12,789 --> 00:21:16,509
on it i also know how to build it and

00:21:14,470 --> 00:21:19,029
this is another form of delegation but

00:21:16,509 --> 00:21:22,149
it will not try to run arbitrary

00:21:19,029 --> 00:21:24,820
commands instead it says oh this thing

00:21:22,149 --> 00:21:26,830
is pearl we have a tool chain that a

00:21:24,820 --> 00:21:29,049
large group of people have put a lot of

00:21:26,830 --> 00:21:31,059
effort in I will just call that instead

00:21:29,049 --> 00:21:33,009
and this is something that distinct sea

00:21:31,059 --> 00:21:34,749
is very distinct to Poquette when you

00:21:33,009 --> 00:21:36,249
look at other systems instead of other

00:21:34,749 --> 00:21:38,019
systems running arbitrary commands that

00:21:36,249 --> 00:21:39,429
get says you know what the hell with it

00:21:38,019 --> 00:21:40,210
I don't know this I'm just going to ask

00:21:39,429 --> 00:21:42,070
someone who does

00:21:40,210 --> 00:21:43,720
and that's very very important for us

00:21:42,070 --> 00:21:46,119
and that's how we can support multiple

00:21:43,720 --> 00:21:50,379
languages very easily we just use their

00:21:46,119 --> 00:21:52,899
builders it has a name the name could be

00:21:50,379 --> 00:21:54,970
anything but it should probably reflect

00:21:52,899 --> 00:21:57,009
what it is upstream because it helps you

00:21:54,970 --> 00:21:58,450
make more sense of it same goes with a

00:21:57,009 --> 00:22:00,249
version but it doesn't actually care

00:21:58,450 --> 00:22:02,850
what the version is you could put any

00:22:00,249 --> 00:22:05,649
version and Poquette even delegates

00:22:02,850 --> 00:22:07,509
understanding versions one of the things

00:22:05,649 --> 00:22:09,820
that we had a problem with in rpm was

00:22:07,509 --> 00:22:12,129
that two releases of file spec which is

00:22:09,820 --> 00:22:14,409
under the path utils distribution had

00:22:12,129 --> 00:22:17,139
different versions and those versions

00:22:14,409 --> 00:22:18,850
were Perl versions that may total sense

00:22:17,139 --> 00:22:21,730
when you did a version comparison probe

00:22:18,850 --> 00:22:23,529
when rpm wanted to upgrade it didn't

00:22:21,730 --> 00:22:25,809
understand it because Perl has weird

00:22:23,529 --> 00:22:27,129
versioning schemes and then in Perl

00:22:25,809 --> 00:22:28,840
knows how to handle this but other

00:22:27,129 --> 00:22:32,259
systems don't do this accurately because

00:22:28,840 --> 00:22:34,659
it's not exactly decimal so we want to

00:22:32,259 --> 00:22:36,850
do an upgrade and RPM said nope this is

00:22:34,659 --> 00:22:40,840
not a newer version and you have to say

00:22:36,850 --> 00:22:43,419
well no C 1.8 actually means 1.008 which

00:22:40,840 --> 00:22:45,190
is actually no but see if one point 700

00:22:43,419 --> 00:22:47,590
that's actually higher than 1.8 because

00:22:45,190 --> 00:22:49,419
114 is one Pazuzu and you can't tell rpm

00:22:47,590 --> 00:22:52,119
that like it doesn't understand it it

00:22:49,419 --> 00:22:54,039
has a versioning scheme but for Poquette

00:22:52,119 --> 00:22:56,259
it basically says you know the category

00:22:54,039 --> 00:22:59,379
that we have here I'm just going to ask

00:22:56,259 --> 00:23:00,789
it how it resolves versions which means

00:22:59,379 --> 00:23:03,759
you can support any version you want

00:23:00,789 --> 00:23:07,659
have everything gets versions they are

00:23:03,759 --> 00:23:11,379
not simple there is a module on Sipan

00:23:07,659 --> 00:23:14,799
for comparing gif versions because it is

00:23:11,379 --> 00:23:15,879
that complicated but for Poquette it

00:23:14,799 --> 00:23:17,289
just says the version could be anything

00:23:15,879 --> 00:23:19,600
I'm just going to ask the category it

00:23:17,289 --> 00:23:21,909
will know although it does have default

00:23:19,600 --> 00:23:25,360
and you have a release and the release

00:23:21,909 --> 00:23:28,389
is meant to help you maintain your own

00:23:25,360 --> 00:23:32,110
subversion so maybe you patched it maybe

00:23:28,389 --> 00:23:35,080
you took version of 0.05 of the answer

00:23:32,110 --> 00:23:36,850
and you want to patch it with something

00:23:35,080 --> 00:23:39,070
you want to add a call that somewhere

00:23:36,850 --> 00:23:40,779
and maybe you've even submitted upstream

00:23:39,070 --> 00:23:42,549
and we accepted it but you don't have

00:23:40,779 --> 00:23:44,769
time to upgrade or we didn't release yet

00:23:42,549 --> 00:23:46,360
doesn't matter what happens is that you

00:23:44,769 --> 00:23:47,950
can maintain your own releases on top of

00:23:46,360 --> 00:23:49,509
it so it's very important and then you

00:23:47,950 --> 00:23:51,100
could use the version to reflect the

00:23:49,509 --> 00:23:53,060
upstream version so you could always

00:23:51,100 --> 00:24:03,800
remain in check

00:23:53,060 --> 00:24:09,260
any question it uses Perl in order to

00:24:03,800 --> 00:24:13,190
compare those so I didn't put that in

00:24:09,260 --> 00:24:14,900
but it will answer that a bucket well I

00:24:13,190 --> 00:24:17,360
was actually this morn note to myself I

00:24:14,900 --> 00:24:20,030
should have maybe put it in but Paquette

00:24:17,360 --> 00:24:22,250
actually comes self-contained it comes

00:24:20,030 --> 00:24:24,290
with it has its own builder to create

00:24:22,250 --> 00:24:26,960
its own instance with its own

00:24:24,290 --> 00:24:30,290
distribution and you can have provided

00:24:26,960 --> 00:24:31,940
as an RPM self-contained or you can

00:24:30,290 --> 00:24:33,740
install it directly or you can scaffold

00:24:31,940 --> 00:24:36,320
it yourself but basically it creates its

00:24:33,740 --> 00:24:38,870
own instance of Perl with its own local

00:24:36,320 --> 00:24:40,100
Lib in order to run itself completely

00:24:38,870 --> 00:24:42,050
separate from your environment

00:24:40,100 --> 00:24:44,630
Paquette is actually written in modern

00:24:42,050 --> 00:24:47,390
perl and it builds its own version of

00:24:44,630 --> 00:24:49,400
pro for itself so you can you put it on

00:24:47,390 --> 00:24:51,410
any system that doesn't even have pearl

00:24:49,400 --> 00:24:53,090
doesn't user system perl until it needs

00:24:51,410 --> 00:24:54,920
to build if you didn't provide a

00:24:53,090 --> 00:25:04,460
specific probably want to use in order

00:24:54,920 --> 00:25:06,740
to build yes the release number is part

00:25:04,460 --> 00:25:08,450
of the package it isn't used by the all

00:25:06,740 --> 00:25:11,060
of the metadata systems because it's

00:25:08,450 --> 00:25:14,210
meant as a detail for you to distinguish

00:25:11,060 --> 00:25:19,460
other other releases of maybe the same

00:25:14,210 --> 00:25:22,610
version well for the release we're

00:25:19,460 --> 00:25:24,920
trying to just keep it a simple int at

00:25:22,610 --> 00:25:26,930
the moment we're keeping it a single int

00:25:24,920 --> 00:25:28,850
if we find a reason to change that we

00:25:26,930 --> 00:25:30,740
will but the is that the version could

00:25:28,850 --> 00:25:32,480
be arbitrary and the release will just

00:25:30,740 --> 00:25:35,210
give you an incrementing number to

00:25:32,480 --> 00:25:37,060
distinguish between them and the prereqs

00:25:35,210 --> 00:25:39,050
I haven't gone into it so maybe I should

00:25:37,060 --> 00:25:43,580
prereqs which is our way of saying

00:25:39,050 --> 00:25:46,730
requirements is simple we took that idea

00:25:43,580 --> 00:25:49,400
from Perl if you is anyone does anyone

00:25:46,730 --> 00:25:50,810
here know nodejs and PM stuff like that

00:25:49,400 --> 00:25:53,240
because we're playing with that a little

00:25:50,810 --> 00:25:56,360
bit for Poquette just to see how far we

00:25:53,240 --> 00:26:01,910
could stretch it and they don't have a

00:25:56,360 --> 00:26:03,080
very strong dependency detail they don't

00:26:01,910 --> 00:26:05,000
have a lot of details for the dependency

00:26:03,080 --> 00:26:06,190
systems so they basically have

00:26:05,000 --> 00:26:07,779
requirements and

00:26:06,190 --> 00:26:09,940
requirements and that's it and they're

00:26:07,779 --> 00:26:12,370
not even together it's kind of weird but

00:26:09,940 --> 00:26:15,039
report we actually have is a run-time is

00:26:12,370 --> 00:26:17,470
it this is that is it recommended is it

00:26:15,039 --> 00:26:19,659
optional is it so we took some of those

00:26:17,470 --> 00:26:22,059
ideas and our prereqs for us maintain

00:26:19,659 --> 00:26:24,129
the category they maintain the phase

00:26:22,059 --> 00:26:25,509
itself like at which point do we need

00:26:24,129 --> 00:26:26,950
this so we need this just to build it

00:26:25,509 --> 00:26:28,360
and then we don't need it later do we

00:26:26,950 --> 00:26:30,330
need it just to run the test and then we

00:26:28,360 --> 00:26:32,740
don't need it later doing is for runtime

00:26:30,330 --> 00:26:34,210
so you can maintain all these and then

00:26:32,740 --> 00:26:36,129
you say the name of the package and the

00:26:34,210 --> 00:26:38,440
version so we could see that for example

00:26:36,129 --> 00:26:39,519
whatever this package was in our case it

00:26:38,440 --> 00:26:41,049
was the answer I'm not showing all the

00:26:39,519 --> 00:26:44,350
dependencies the answer has more than

00:26:41,049 --> 00:26:45,970
those dependencies for the configure we

00:26:44,350 --> 00:26:49,210
definitely need the exit tool make maker

00:26:45,970 --> 00:26:51,730
category of sorry package and a specific

00:26:49,210 --> 00:26:53,620
version this is similar to purling sizes

00:26:51,730 --> 00:26:55,299
this is a minimum version but you could

00:26:53,620 --> 00:26:57,190
also indicate a specific version because

00:26:55,299 --> 00:26:59,860
it actually takes the speck of pearl to

00:26:57,190 --> 00:27:01,450
say equal equal equal greater less than

00:26:59,860 --> 00:27:05,320
and stuff like that we also added that

00:27:01,450 --> 00:27:08,289
and you have a test category test phase

00:27:05,320 --> 00:27:10,059
to use the protests simple and the

00:27:08,289 --> 00:27:12,129
important thing to remember here these

00:27:10,059 --> 00:27:16,659
are not perl packages these are other

00:27:12,129 --> 00:27:17,740
potato reflect pearl distributions okay

00:27:16,659 --> 00:27:19,480
so which kind of phases do we have

00:27:17,740 --> 00:27:23,500
currently we use the configure for build

00:27:19,480 --> 00:27:25,120
time test and run time how do you build

00:27:23,500 --> 00:27:26,559
things this is how you build stuff

00:27:25,120 --> 00:27:28,299
you're basing around Paquette you say

00:27:26,559 --> 00:27:29,799
build and then you say I want a specific

00:27:28,299 --> 00:27:34,210
full package

00:27:29,799 --> 00:27:35,409
it is Perl yamo 1.7 oh I think at this

00:27:34,210 --> 00:27:37,389
moment you also have to provide the

00:27:35,409 --> 00:27:39,190
release and if you don't it gives you

00:27:37,389 --> 00:27:41,139
the latest version and if you don't give

00:27:39,190 --> 00:27:42,580
a version I think this fails because we

00:27:41,139 --> 00:27:45,610
want you to be more explicit of what you

00:27:42,580 --> 00:27:47,620
build when you scaffold in our example

00:27:45,610 --> 00:27:49,090
we just said pro dancer so once they see

00:27:47,620 --> 00:27:51,480
pending said what's your latest version

00:27:49,090 --> 00:27:53,740
I'll just use that it's a shorthand

00:27:51,480 --> 00:27:55,570
installation is just as simple you just

00:27:53,740 --> 00:27:56,649
ask it to install something you can ask

00:27:55,570 --> 00:27:58,899
you to install anywhere because

00:27:56,649 --> 00:28:01,629
Paquette's creates its own complete

00:27:58,899 --> 00:28:03,490
self-contained library directory that

00:28:01,629 --> 00:28:05,559
you could just install stuff into and

00:28:03,490 --> 00:28:06,970
you will install C stuff

00:28:05,559 --> 00:28:09,100
pearl stock and we'll bind all of them

00:28:06,970 --> 00:28:10,659
against each other correctly and you can

00:28:09,100 --> 00:28:13,360
just run some stuff from there so you

00:28:10,659 --> 00:28:16,539
can install to multiple locations when

00:28:13,360 --> 00:28:19,240
you want to run so simple code Paquette

00:28:16,539 --> 00:28:19,740
run and Yakka when you want where you

00:28:19,240 --> 00:28:21,570
want to

00:28:19,740 --> 00:28:24,210
on things from this is one way in which

00:28:21,570 --> 00:28:25,590
you just output a bunch of environment

00:28:24,210 --> 00:28:27,120
variables and then you could use those

00:28:25,590 --> 00:28:29,520
environment variables wherever you want

00:28:27,120 --> 00:28:33,030
this is similar to how pro brew works or

00:28:29,520 --> 00:28:34,710
how local live works which it binds to

00:28:33,030 --> 00:28:36,270
whatever environment you have in order

00:28:34,710 --> 00:28:38,820
to automatically load things from that

00:28:36,270 --> 00:28:41,790
this is what we use in order to run

00:28:38,820 --> 00:28:43,620
stuff in a market of HDI server so you

00:28:41,790 --> 00:28:45,420
basically use this to say I want to know

00:28:43,620 --> 00:28:47,490
what the variables are in order to run

00:28:45,420 --> 00:28:49,590
stuff from this directory in which I've

00:28:47,490 --> 00:28:51,360
installed a bunch of stuff and we've

00:28:49,590 --> 00:28:53,490
sold libraries in there and Perl stuff

00:28:51,360 --> 00:28:55,980
and see stuff and then in output all of

00:28:53,490 --> 00:28:58,530
those we take them we put them in the

00:28:55,980 --> 00:29:01,559
init script of micro device GI and then

00:28:58,530 --> 00:29:03,059
there we go Microsoft's GI now uses our

00:29:01,559 --> 00:29:04,290
system Pro but loads all of its

00:29:03,059 --> 00:29:06,470
dependencies including if you see

00:29:04,290 --> 00:29:09,090
dependencies from different location a

00:29:06,470 --> 00:29:11,340
different way to run is to provide a

00:29:09,090 --> 00:29:13,950
specific thing you want to run this is

00:29:11,340 --> 00:29:16,440
an example of also running a simple

00:29:13,950 --> 00:29:18,179
command we're going to advocate in

00:29:16,440 --> 00:29:19,470
AutoCAD currently it installs a

00:29:18,179 --> 00:29:21,360
libraries and the libraries have

00:29:19,470 --> 00:29:22,980
something called active and the reason

00:29:21,360 --> 00:29:24,840
is that because Paquette maintains

00:29:22,980 --> 00:29:26,910
multiple instances as well

00:29:24,840 --> 00:29:28,679
it automatically cleans and you can

00:29:26,910 --> 00:29:30,210
control how many previous versions you

00:29:28,679 --> 00:29:32,490
want to have but it actually maintains

00:29:30,210 --> 00:29:34,500
multiple versions and it has assembling

00:29:32,490 --> 00:29:36,809
to the correct one which is active that

00:29:34,500 --> 00:29:39,840
means that with the case you can revert

00:29:36,809 --> 00:29:41,550
with one command of changing the same

00:29:39,840 --> 00:29:44,580
links to the previous versions and when

00:29:41,550 --> 00:29:47,280
you run over 1,000 servers for one

00:29:44,580 --> 00:29:49,710
deployment process over ten times a day

00:29:47,280 --> 00:29:51,960
this is actually not bad because then

00:29:49,710 --> 00:29:54,450
the reversion is instantaneously and

00:29:51,960 --> 00:29:56,760
it's also atomic it either worked or it

00:29:54,450 --> 00:29:58,500
didn't and that's it so this is actually

00:29:56,760 --> 00:30:01,580
much faster than other systems because

00:29:58,500 --> 00:30:04,380
it's one sim link that's a very low cost

00:30:01,580 --> 00:30:06,840
we have a concept called repositories

00:30:04,380 --> 00:30:09,660
this is an example of both generalizing

00:30:06,840 --> 00:30:10,980
and delegating the concept of repository

00:30:09,660 --> 00:30:12,690
is one things I'm actually very proud of

00:30:10,980 --> 00:30:15,630
ok and I hope to take that into other

00:30:12,690 --> 00:30:17,850
realms the repositories implicit are

00:30:15,630 --> 00:30:19,520
meant to store information there are

00:30:17,850 --> 00:30:21,900
three bits of information that we want

00:30:19,520 --> 00:30:23,280
first one is the sources the sources are

00:30:21,900 --> 00:30:24,870
the actual stuff that we want to build

00:30:23,280 --> 00:30:26,490
it would be a pro module it would be a C

00:30:24,870 --> 00:30:28,890
library it would be a ketose class

00:30:26,490 --> 00:30:30,809
library or whatever it is then you have

00:30:28,890 --> 00:30:31,770
the spec in the spec describes what you

00:30:30,809 --> 00:30:34,980
have

00:30:31,770 --> 00:30:36,300
which we've seen those lastly once we

00:30:34,980 --> 00:30:37,470
build them we have parcels it's one of

00:30:36,300 --> 00:30:39,000
the places where we were able to

00:30:37,470 --> 00:30:41,340
maintain the concept of packaging so you

00:30:39,000 --> 00:30:46,710
have package and package is actually a

00:30:41,340 --> 00:30:49,350
parcel kind of fun okay so the sources

00:30:46,710 --> 00:30:50,730
specs and our form together to create a

00:30:49,350 --> 00:30:54,270
parcel and then you deliver those

00:30:50,730 --> 00:30:55,800
parcels now the trick is that some of

00:30:54,270 --> 00:30:58,220
this is content like aspect is just

00:30:55,800 --> 00:31:01,830
content you know it's a blog it's

00:30:58,220 --> 00:31:04,380
probably a hash rest and the sources and

00:31:01,830 --> 00:31:06,390
parcels are actual files but we decided

00:31:04,380 --> 00:31:08,850
to create a concept known as repository

00:31:06,390 --> 00:31:11,429
to store both the idea is that any

00:31:08,850 --> 00:31:14,580
repository that we have uses a

00:31:11,429 --> 00:31:16,470
repository back-end the repository back

00:31:14,580 --> 00:31:18,360
and implements how to actually store

00:31:16,470 --> 00:31:21,480
information and each one supports both

00:31:18,360 --> 00:31:23,550
storing content and storing files if it

00:31:21,480 --> 00:31:25,140
is a back-end that can only store files

00:31:23,550 --> 00:31:27,390
it will generate a file from that

00:31:25,140 --> 00:31:30,030
underneath the hood and under the hood

00:31:27,390 --> 00:31:31,470
and if it's only meant for content you

00:31:30,030 --> 00:31:33,630
actually generate content from that

00:31:31,470 --> 00:31:35,309
under the hood and you should know this

00:31:33,630 --> 00:31:37,620
so when Paquette says I just want to

00:31:35,309 --> 00:31:39,720
store this parcel and I want to store it

00:31:37,620 --> 00:31:41,130
here you will find a way to store it

00:31:39,720 --> 00:31:43,170
there and you can store it there

00:31:41,130 --> 00:31:46,320
everything else as well I'll give you an

00:31:43,170 --> 00:31:47,610
example of a backing that we have a file

00:31:46,320 --> 00:31:49,290
backing is one of the most comfortable

00:31:47,610 --> 00:31:51,330
ones for system administrators because

00:31:49,290 --> 00:31:54,179
we know this very well so we will create

00:31:51,330 --> 00:31:56,340
a file of the parcel like we have RPM

00:31:54,179 --> 00:31:58,530
file we have a file of the spec we have

00:31:56,340 --> 00:31:59,580
a file of everything so poquette's can

00:31:58,530 --> 00:32:01,290
do this as well and it will store

00:31:59,580 --> 00:32:04,260
everything within a file if there's a

00:32:01,290 --> 00:32:05,820
blob it will actually generate a file

00:32:04,260 --> 00:32:08,360
from that and it maintains IDs for

00:32:05,820 --> 00:32:10,920
everything so there is no collision

00:32:08,360 --> 00:32:12,000
another way to do this is a database so

00:32:10,920 --> 00:32:13,890
if you want to share some of this

00:32:12,000 --> 00:32:15,929
information let's say specs you want to

00:32:13,890 --> 00:32:17,520
put specs in a database so everyone can

00:32:15,929 --> 00:32:18,900
edit specs easily even if they don't

00:32:17,520 --> 00:32:21,240
have access to that machine you want to

00:32:18,900 --> 00:32:23,100
create a webbing of web api so you could

00:32:21,240 --> 00:32:24,750
do that it's very useful but you could

00:32:23,100 --> 00:32:26,370
also store the files in a database as

00:32:24,750 --> 00:32:28,740
well which is pretty cool and it

00:32:26,370 --> 00:32:30,840
maintains an internal index for several

00:32:28,740 --> 00:32:33,210
based stuff it uses dpi so basically

00:32:30,840 --> 00:32:35,040
supports any DVI supported database and

00:32:33,210 --> 00:32:38,400
it maintains an additional index to make

00:32:35,040 --> 00:32:40,650
something even faster lastly we have an

00:32:38,400 --> 00:32:43,410
HTTP that we've implemented is a remote

00:32:40,650 --> 00:32:45,480
storage and the reason we've done this

00:32:43,410 --> 00:32:47,250
is because you basically

00:32:45,480 --> 00:32:48,929
build stuff and then send them somewhere

00:32:47,250 --> 00:32:51,480
so they could be installed by everything

00:32:48,929 --> 00:32:53,820
so we created an HTTP storage back-end

00:32:51,480 --> 00:32:55,950
which really means I would like to store

00:32:53,820 --> 00:32:58,380
the use remotely this has a

00:32:55,950 --> 00:33:00,899
complimentary application with laquet

00:32:58,380 --> 00:33:02,549
called the packet server and you can run

00:33:00,899 --> 00:33:04,500
it by just calling forget serve it will

00:33:02,549 --> 00:33:07,110
run an instance on the spot it's written

00:33:04,500 --> 00:33:10,440
with plaque and answer - and what it

00:33:07,110 --> 00:33:13,440
does is serve an HTTP API which you

00:33:10,440 --> 00:33:16,080
could use to receive whatever it is and

00:33:13,440 --> 00:33:18,389
store it so this is what you run as your

00:33:16,080 --> 00:33:20,730
mirror when you want to upload as an

00:33:18,389 --> 00:33:22,919
HTTP repository back-end you want to

00:33:20,730 --> 00:33:24,659
upload a parcel or a configuration now

00:33:22,919 --> 00:33:26,429
the nice thing is that this is all just

00:33:24,659 --> 00:33:29,070
configured so you don't have to know any

00:33:26,429 --> 00:33:30,570
of these details except saying I have a

00:33:29,070 --> 00:33:33,090
Paquette instance here to build stuff

00:33:30,570 --> 00:33:34,590
and I have a back-end for my parcels and

00:33:33,090 --> 00:33:37,230
it's over here and have a back-end for

00:33:34,590 --> 00:33:39,240
my specs and it's over there and that's

00:33:37,230 --> 00:33:42,090
it you just have to say this is HTTP

00:33:39,240 --> 00:33:45,750
here's the IP this is database here's

00:33:42,090 --> 00:33:48,539
the DSN the nice thing about this is

00:33:45,750 --> 00:33:50,429
because the server itself also has a

00:33:48,539 --> 00:33:54,210
configuration for how it eventually

00:33:50,429 --> 00:33:56,970
stores stuff it could also use either a

00:33:54,210 --> 00:33:59,880
database or a file or another HTTP

00:33:56,970 --> 00:34:01,919
endpoint which now is when things become

00:33:59,880 --> 00:34:03,840
very interesting from an architectural

00:34:01,919 --> 00:34:05,610
point of view so usually what you would

00:34:03,840 --> 00:34:07,200
do is you would have a mirror you upload

00:34:05,610 --> 00:34:09,359
to the mirror and it stores it on disk

00:34:07,200 --> 00:34:11,520
and then you have like an NFS share and

00:34:09,359 --> 00:34:12,960
you store everything there but what if

00:34:11,520 --> 00:34:15,569
you have another one because we've

00:34:12,960 --> 00:34:17,940
exhausted the bandwidth when we do

00:34:15,569 --> 00:34:20,520
deployments we literally exhaust our

00:34:17,940 --> 00:34:23,940
bandwidth so we have to now create this

00:34:20,520 --> 00:34:28,050
chain and this multi-level architecture

00:34:23,940 --> 00:34:29,460
for rpm mirrors yum mirrors with this

00:34:28,050 --> 00:34:31,109
you can easily do this because you

00:34:29,460 --> 00:34:32,909
basically say well this is an HTTP and

00:34:31,109 --> 00:34:35,159
then on the HTTP when you have this

00:34:32,909 --> 00:34:36,960
server in its configuration you say well

00:34:35,159 --> 00:34:39,179
you're storing some of those over here

00:34:36,960 --> 00:34:41,190
it also supports multiple endpoints it's

00:34:39,179 --> 00:34:43,560
arbitrary so you could say I have an

00:34:41,190 --> 00:34:45,329
endpoint for all my packages that relate

00:34:43,560 --> 00:34:46,829
to a certain type of pearl and

00:34:45,329 --> 00:34:48,089
everything is built against that Perl

00:34:46,829 --> 00:34:50,250
and I'm going to stored it on this

00:34:48,089 --> 00:34:53,190
endpoint that will go eventually to this

00:34:50,250 --> 00:34:54,869
HTTP mirror over there and this one will

00:34:53,190 --> 00:34:56,879
be stored over here and this will be

00:34:54,869 --> 00:34:58,810
stored over there and you can really go

00:34:56,879 --> 00:35:00,550
nuts with this and it's a lot of fun

00:34:58,810 --> 00:35:03,430
and it takes a long time to explain

00:35:00,550 --> 00:35:05,560
because basically everything is loud so

00:35:03,430 --> 00:35:08,290
you can literally go anywhere you want

00:35:05,560 --> 00:35:10,770
it's pretty cool so we're kind of

00:35:08,290 --> 00:35:13,710
reaching the end of the talk I think I

00:35:10,770 --> 00:35:19,200
want to share just the status of

00:35:13,710 --> 00:35:22,390
Paquette at the moment first everything

00:35:19,200 --> 00:35:24,160
that I've discussed works so basically

00:35:22,390 --> 00:35:25,960
the system works you can scaffold you

00:35:24,160 --> 00:35:29,140
can build you can salt you can run

00:35:25,960 --> 00:35:34,810
we have built a work once overall that

00:35:29,140 --> 00:35:39,040
requires 12 to 1,300 packages just pearl

00:35:34,810 --> 00:35:41,320
just pearl dependencies and it has also

00:35:39,040 --> 00:35:43,180
a few C dependencies and those also have

00:35:41,320 --> 00:35:45,700
huge scene dependencies some of them we

00:35:43,180 --> 00:35:47,230
said we have an RPM that's fine let's

00:35:45,700 --> 00:35:49,390
the system administrators take care of

00:35:47,230 --> 00:35:51,220
that some that we said actually those

00:35:49,390 --> 00:35:52,750
have some security fixes the Red Hat

00:35:51,220 --> 00:35:53,950
didn't have or our packaging system

00:35:52,750 --> 00:35:55,090
didn't have wheels just add them to

00:35:53,950 --> 00:35:56,560
placate and we built them with Paquette

00:35:55,090 --> 00:35:59,200
and some of them are built against

00:35:56,560 --> 00:36:02,530
others that are in RPM form so it's very

00:35:59,200 --> 00:36:04,660
versatile and it takes our current set

00:36:02,530 --> 00:36:07,540
up at work for building the appropriate

00:36:04,660 --> 00:36:09,640
rpms for it take can take about 30

00:36:07,540 --> 00:36:11,590
minutes they can take even more in some

00:36:09,640 --> 00:36:15,370
packages but with poquette's we've built

00:36:11,590 --> 00:36:21,100
all of them about 1300 in 30 minutes 30

00:36:15,370 --> 00:36:23,530
20 was it 20 to 30 minutes so that's not

00:36:21,100 --> 00:36:27,780
bad the time we take some of our system

00:36:23,530 --> 00:36:32,050
mints to build one we've built 1,300

00:36:27,780 --> 00:36:34,050
pretty good we have supports for native

00:36:32,050 --> 00:36:36,640
packages native packaging refers to

00:36:34,050 --> 00:36:40,510
specifically anything that is compiled

00:36:36,640 --> 00:36:44,470
to true native that means c c++ stuff

00:36:40,510 --> 00:36:47,430
like that we do this by supporting make

00:36:44,470 --> 00:36:50,320
files but only make files at the moment

00:36:47,430 --> 00:36:51,760
we also support Perl packages and then

00:36:50,320 --> 00:36:54,430
it doesn't matter if you have make spell

00:36:51,760 --> 00:36:56,110
PL if you have built PL if it's actually

00:36:54,430 --> 00:36:59,020
under the hood using module build or

00:36:56,110 --> 00:37:01,360
module build tiny or make X detail make

00:36:59,020 --> 00:37:02,710
maker or make install a module install

00:37:01,360 --> 00:37:04,090
or all those things they're all

00:37:02,710 --> 00:37:06,400
supported because we just delegate to

00:37:04,090 --> 00:37:09,090
the pearl chain hey you know how to do

00:37:06,400 --> 00:37:12,150
this just you do it which is great

00:37:09,090 --> 00:37:13,830
and oh I'm sorry we also support note

00:37:12,150 --> 00:37:15,660
this was kind of like an experiment to

00:37:13,830 --> 00:37:17,880
stretch it and we were easily able to

00:37:15,660 --> 00:37:19,410
add nodejs as an interpreter and then a

00:37:17,880 --> 00:37:21,570
bunch of note exodus to connect against

00:37:19,410 --> 00:37:23,640
it I should give at some point an entire

00:37:21,570 --> 00:37:27,390
different rant on how the nodejs

00:37:23,640 --> 00:37:31,200
packaging system seems to me unripe and

00:37:27,390 --> 00:37:33,600
immature yet in its design I think that

00:37:31,200 --> 00:37:35,370
there are a lot of ideas that we know in

00:37:33,600 --> 00:37:37,560
Perl simply because we've suffered for a

00:37:35,370 --> 00:37:41,340
very long time brewing over these and

00:37:37,560 --> 00:37:43,440
we've got it to the point that we will

00:37:41,340 --> 00:37:45,450
never claim it's perfect but it is far

00:37:43,440 --> 00:37:48,510
more capable than a system that we would

00:37:45,450 --> 00:37:50,790
design from scratch and we also learned

00:37:48,510 --> 00:37:52,590
a lot from C dependencies and other

00:37:50,790 --> 00:37:56,010
libraries that we've managed as people

00:37:52,590 --> 00:37:58,200
beforehand an example is that nodejs

00:37:56,010 --> 00:37:59,820
packages don't have phases is very

00:37:58,200 --> 00:38:01,380
unfortunate for us we have multiple

00:37:59,820 --> 00:38:03,600
phases and they even have a level of

00:38:01,380 --> 00:38:06,180
Association so it's not just really

00:38:03,600 --> 00:38:09,000
recommended also suggested like there's

00:38:06,180 --> 00:38:10,350
an option suggest in Perl so that's

00:38:09,000 --> 00:38:12,390
pretty cool but no jeaious doesn't have

00:38:10,350 --> 00:38:14,670
a lot of that for us the different

00:38:12,390 --> 00:38:16,230
phases of build are actually split so

00:38:14,670 --> 00:38:19,080
you could do them manually separately

00:38:16,230 --> 00:38:20,880
which we heavily use in focus to be able

00:38:19,080 --> 00:38:22,620
to say hey we want you to now build this

00:38:20,880 --> 00:38:24,900
and now we want you to install this we

00:38:22,620 --> 00:38:27,750
want you to install this here and in NPM

00:38:24,900 --> 00:38:30,210
it's build it's very geared towards

00:38:27,750 --> 00:38:31,800
users on their desktops which is

00:38:30,210 --> 00:38:33,870
difficult because then it tries to

00:38:31,800 --> 00:38:36,690
bundle one in the other and we had a

00:38:33,870 --> 00:38:38,310
hard time untangling this so that would

00:38:36,690 --> 00:38:40,470
be a completely different rant but it

00:38:38,310 --> 00:38:44,700
wasn't that long and now it was not long

00:38:40,470 --> 00:38:46,590
to do it wasn't too difficult and we

00:38:44,700 --> 00:38:48,990
were able to fully manage and ojs

00:38:46,590 --> 00:38:50,670
instance including the interpreter which

00:38:48,990 --> 00:38:54,570
is kind of cool we're not doing anything

00:38:50,670 --> 00:38:57,000
with it but there so we have support to

00:38:54,570 --> 00:38:58,890
make file I've mentioned and we have

00:38:57,000 --> 00:39:01,200
command-line utilities to do everything

00:38:58,890 --> 00:39:04,590
which is pretty cool I'm very happy

00:39:01,200 --> 00:39:07,440
about this and it is free and open

00:39:04,590 --> 00:39:09,600
source it's currently under my repo

00:39:07,440 --> 00:39:12,480
which is only temporary it will be moved

00:39:09,600 --> 00:39:14,550
to the booking.com repo on github and it

00:39:12,480 --> 00:39:16,790
will be released to Sipan just not yet

00:39:14,550 --> 00:39:19,620
we have to do quite a few trimming and

00:39:16,790 --> 00:39:22,200
rounding off sharp edges before we do

00:39:19,620 --> 00:39:25,320
this so talking about sharp edges

00:39:22,200 --> 00:39:27,000
there are quite a few sharp edges mostly

00:39:25,320 --> 00:39:29,550
because we are not a large group of

00:39:27,000 --> 00:39:31,560
developers on it we're basically two

00:39:29,550 --> 00:39:33,390
people we've grown to three people at

00:39:31,560 --> 00:39:34,589
some points we contacted two people and

00:39:33,390 --> 00:39:36,089
they were going to three people and one

00:39:34,589 --> 00:39:39,329
of them is me and one of them is Mickey

00:39:36,089 --> 00:39:42,900
and we have additional responsibilities

00:39:39,329 --> 00:39:44,460
with the company in and outside so it is

00:39:42,900 --> 00:39:47,430
taking our time we take an additional

00:39:44,460 --> 00:39:49,079
project so it's kind of tricky so let's

00:39:47,430 --> 00:39:50,660
talk about sharp edges for a little bit

00:39:49,079 --> 00:39:53,280
kind of like a full disclosure thing

00:39:50,660 --> 00:39:55,670
first of all documentation it is either

00:39:53,280 --> 00:39:58,530
old or outdated or just does not exist

00:39:55,670 --> 00:40:00,329
this is difficult the documentation

00:39:58,530 --> 00:40:02,160
changed quite a bit because we've

00:40:00,329 --> 00:40:06,900
changed the program quite a bit over

00:40:02,160 --> 00:40:09,540
time also tests become outdated very

00:40:06,900 --> 00:40:12,540
quickly and they require scaffolding and

00:40:09,540 --> 00:40:14,190
a lot of pre-built data in order to test

00:40:12,540 --> 00:40:15,210
it so you can't just write a test for a

00:40:14,190 --> 00:40:16,890
build you actually have to build

00:40:15,210 --> 00:40:19,560
something it does test the entire thing

00:40:16,890 --> 00:40:21,030
so this is not easy either so the tests

00:40:19,560 --> 00:40:24,150
that become outdated and we have to

00:40:21,030 --> 00:40:25,800
really work on them more we want to

00:40:24,150 --> 00:40:27,510
support additional builders so when we

00:40:25,800 --> 00:40:30,180
say native we basically mean make file

00:40:27,510 --> 00:40:32,069
but we also want to detect scones or see

00:40:30,180 --> 00:40:34,319
make and stuff like that and also run

00:40:32,069 --> 00:40:35,760
them so that's very important as well we

00:40:34,319 --> 00:40:37,650
don't have that yet it shouldn't be

00:40:35,760 --> 00:40:39,660
difficult but we don't yet have them

00:40:37,650 --> 00:40:41,910
some thing is that we want or meta

00:40:39,660 --> 00:40:43,530
categories so you could create your own

00:40:41,910 --> 00:40:45,210
categories so yeah there's Perl and

00:40:43,530 --> 00:40:47,160
there's no js' and there's native but

00:40:45,210 --> 00:40:49,619
you can create another category called

00:40:47,160 --> 00:40:52,140
for example booking in which we build

00:40:49,619 --> 00:40:54,060
booking applications we can have another

00:40:52,140 --> 00:40:55,770
category which is static in which you

00:40:54,060 --> 00:40:57,569
just copy files over because there is no

00:40:55,770 --> 00:41:00,300
build system you can create in a meta

00:40:57,569 --> 00:41:01,650
category of a bag which is an idea that

00:41:00,300 --> 00:41:03,839
we had that basically allows you to

00:41:01,650 --> 00:41:05,970
create one package of every of a bunch

00:41:03,839 --> 00:41:09,000
of other packages built so you can

00:41:05,970 --> 00:41:11,069
deploy an entire thing in one shop so

00:41:09,000 --> 00:41:14,640
that's another idea we have a ticket for

00:41:11,069 --> 00:41:17,430
it but we didn't build yet we got to

00:41:14,640 --> 00:41:19,230
clean up all the metadata parts this was

00:41:17,430 --> 00:41:22,260
not a simple process we've discovered a

00:41:19,230 --> 00:41:24,359
lot of distribution errors a lot of

00:41:22,260 --> 00:41:27,240
packaging problems and bugs in modules

00:41:24,359 --> 00:41:29,700
on Sipan and this is not easy to fix in

00:41:27,240 --> 00:41:31,170
packets you can just patch it that's

00:41:29,700 --> 00:41:33,569
fine and just make a new release out of

00:41:31,170 --> 00:41:34,540
it but we also have to work around a lot

00:41:33,569 --> 00:41:36,820
of it in our generate

00:41:34,540 --> 00:41:39,310
and there I think one or two medicine

00:41:36,820 --> 00:41:41,980
band bugs or see pen issues that we have

00:41:39,310 --> 00:41:44,380
to clear out as well and luckily Mickey

00:41:41,980 --> 00:41:48,040
NASA - works on this program is also a

00:41:44,380 --> 00:41:51,550
core developer and meta Sipan and we get

00:41:48,040 --> 00:41:55,180
to work with Sipan directly as our main

00:41:51,550 --> 00:41:57,580
metadata system so we're able to adjust

00:41:55,180 --> 00:42:00,280
it and add things as appropriate that we

00:41:57,580 --> 00:42:01,660
find but that really we really want to

00:42:00,280 --> 00:42:04,360
kind of yank it out and put it back

00:42:01,660 --> 00:42:07,750
together again we want to add concept of

00:42:04,360 --> 00:42:10,300
tags so we want to be able to say well

00:42:07,750 --> 00:42:13,360
here's the arbitrary piece of data on

00:42:10,300 --> 00:42:16,570
this particular package so for example

00:42:13,360 --> 00:42:21,520
this particular package is also tagged

00:42:16,570 --> 00:42:23,560
as fast or thin or secure and stuff like

00:42:21,520 --> 00:42:26,410
that kind of be able to manage those in

00:42:23,560 --> 00:42:27,910
this way and we want to normalize all

00:42:26,410 --> 00:42:30,400
the tooling and the command-line options

00:42:27,910 --> 00:42:34,720
because right now they are abundant we

00:42:30,400 --> 00:42:37,090
reached four levels down of subcommands

00:42:34,720 --> 00:42:40,120
something that app command is not happy

00:42:37,090 --> 00:42:42,070
with so this is tricky when you want to

00:42:40,120 --> 00:42:45,640
list dependencies it's package manage

00:42:42,070 --> 00:42:47,080
list depth on a package it's not that

00:42:45,640 --> 00:42:49,570
easy and we kind of want to normalize it

00:42:47,080 --> 00:42:50,920
across the board if you want to play

00:42:49,570 --> 00:42:54,460
with it if you want to look at it and

00:42:50,920 --> 00:42:56,530
complain or just look at it you can find

00:42:54,460 --> 00:42:57,880
it right now on my personal repo but it

00:42:56,530 --> 00:42:59,890
will be moved to booking economy but we

00:42:57,880 --> 00:43:02,140
just kind of plays within bar repo and

00:42:59,890 --> 00:43:04,510
kept it there but we should move it if

00:43:02,140 --> 00:43:06,400
you're interested in working on it

00:43:04,510 --> 00:43:07,870
patches welcome we would be really happy

00:43:06,400 --> 00:43:09,850
to discuss it we're really happy to

00:43:07,870 --> 00:43:11,380
accommodate things that you have and if

00:43:09,850 --> 00:43:14,080
you're interested in helping with it we

00:43:11,380 --> 00:43:15,520
would really enjoy it now if you on the

00:43:14,080 --> 00:43:18,940
other hand would like to get paid to

00:43:15,520 --> 00:43:20,800
work on it we are hiring so if you're

00:43:18,940 --> 00:43:23,860
interested in working on this as your

00:43:20,800 --> 00:43:25,240
job and get paid for it it just in case

00:43:23,860 --> 00:43:28,270
the company you're currently working in

00:43:25,240 --> 00:43:29,770
will not pay you to do this we will so

00:43:28,270 --> 00:43:30,190
if you're interested in working on

00:43:29,770 --> 00:43:31,810
booking

00:43:30,190 --> 00:43:35,260
either on this project or other open

00:43:31,810 --> 00:43:37,720
source projects or some internal code

00:43:35,260 --> 00:43:41,500
code of course come see either me or

00:43:37,720 --> 00:43:42,580
Mickey and/or Graham over there and we

00:43:41,500 --> 00:43:45,400
all work at the company we would be

00:43:42,580 --> 00:43:46,840
happy to give you more details that is

00:43:45,400 --> 00:43:49,000
the end of my talk and I will pause here

00:43:46,840 --> 00:44:15,710
for any quest

00:43:49,000 --> 00:44:17,000
thank you yes Brad that's an excellent

00:44:15,710 --> 00:44:18,470
question so how do you handle different

00:44:17,000 --> 00:44:20,090
distributions and some of his different

00:44:18,470 --> 00:44:22,310
distribution versions like census five

00:44:20,090 --> 00:44:25,490
six seven recently someone told us that

00:44:22,310 --> 00:44:28,280
sent us five is very common in Japan for

00:44:25,490 --> 00:44:30,890
example and you might have six you might

00:44:28,280 --> 00:44:32,300
have seven and you might have FreeBSD or

00:44:30,890 --> 00:44:34,340
openvz there are completely different

00:44:32,300 --> 00:44:35,720
operating systems so there are two

00:44:34,340 --> 00:44:36,980
elements to this one is supporting

00:44:35,720 --> 00:44:38,570
multiple operating systems and the other

00:44:36,980 --> 00:44:42,260
one is supporting different versions of

00:44:38,570 --> 00:44:44,900
this operating system what we have at

00:44:42,260 --> 00:44:48,110
work is a set of mock environment

00:44:44,900 --> 00:44:50,240
they're basically the Red Hat mock thing

00:44:48,110 --> 00:44:52,850
and familiar with that you can also have

00:44:50,240 --> 00:44:55,520
darker for the same concept those

00:44:52,850 --> 00:44:58,040
contain Paquette instances they're used

00:44:55,520 --> 00:45:00,010
to build stuff on those architectures

00:44:58,040 --> 00:45:03,800
and under those operating systems and

00:45:00,010 --> 00:45:06,350
they will pass it on when they build it

00:45:03,800 --> 00:45:09,440
their parcel repository is set up to go

00:45:06,350 --> 00:45:11,570
to our main repository under a path that

00:45:09,440 --> 00:45:14,960
correlates with that operating system

00:45:11,570 --> 00:45:17,210
and version the mirror itself that is

00:45:14,960 --> 00:45:19,970
using the Paquette server maintains

00:45:17,210 --> 00:45:21,890
multiple endpoints that are stored in

00:45:19,970 --> 00:45:23,570
different places and could be then

00:45:21,890 --> 00:45:24,950
passed on to different machines as well

00:45:23,570 --> 00:45:29,770
if you want to split up the hosting

00:45:24,950 --> 00:45:35,360
itself so your freebsd image darker

00:45:29,770 --> 00:45:39,350
machine or or mock environment could

00:45:35,360 --> 00:45:43,310
just build to the server and throwing it

00:45:39,350 --> 00:45:44,660
into slash freebsd version or slash

00:45:43,310 --> 00:45:46,610
version whatever endpoint you want is

00:45:44,660 --> 00:45:49,550
arbitrary and on the server it will have

00:45:46,610 --> 00:45:51,050
that endpoint configured and all of

00:45:49,550 --> 00:45:53,810
underneath that will be stored in

00:45:51,050 --> 00:45:56,180
another repository that could be a

00:45:53,810 --> 00:45:57,440
database on this database it has active

00:45:56,180 --> 00:45:59,780
it could be a file on disk that could

00:45:57,440 --> 00:46:00,830
also be another HTTP or something like

00:45:59,780 --> 00:46:01,610
that if you want to split it first

00:46:00,830 --> 00:46:03,350
servers

00:46:01,610 --> 00:46:04,730
so that's how we maintain that and we

00:46:03,350 --> 00:46:08,060
have to maintain at the moment we're

00:46:04,730 --> 00:46:15,940
building for CentOS six and seven for

00:46:08,060 --> 00:46:15,940
Perl 5 18 2 and 24 0 yes

00:46:23,170 --> 00:46:29,960
no no Pickett doesn't have a meta meta

00:46:27,740 --> 00:46:31,610
built system in a sense where it can

00:46:29,960 --> 00:46:34,310
manage multiple begin census we just

00:46:31,610 --> 00:46:37,100
have a very simple script that just does

00:46:34,310 --> 00:46:39,260
a four on a four for those options and

00:46:37,100 --> 00:46:41,300
says first sent us for each version that

00:46:39,260 --> 00:46:44,870
we have defined here's the machine and

00:46:41,300 --> 00:46:46,820
it literally just runs in in mark it's

00:46:44,870 --> 00:46:48,320
just mock run but in dr. would be doc a

00:46:46,820 --> 00:46:51,560
run or something like that and then

00:46:48,320 --> 00:46:53,450
Paquette build and that's it and that

00:46:51,560 --> 00:46:55,190
gets that it builds them and then sends

00:46:53,450 --> 00:46:57,920
it off to the appropriate repository on

00:46:55,190 --> 00:46:59,660
under the appropriate path and that's it

00:46:57,920 --> 00:47:01,910
you could also send it off to a common

00:46:59,660 --> 00:47:03,950
database or NFS share they has access to

00:47:01,910 --> 00:47:05,330
but HTTP works really well for us

00:47:03,950 --> 00:47:06,380
because we can put the machines in

00:47:05,330 --> 00:47:08,090
completely different places without

00:47:06,380 --> 00:47:10,670
worrying about database permissions and

00:47:08,090 --> 00:47:28,820
stuff like that use an HTTP endpoint and

00:47:10,670 --> 00:47:31,220
that's it so does anyone yes sir yes sir

00:47:28,820 --> 00:47:33,530
what we do is basically once you've

00:47:31,220 --> 00:47:35,120
scaffolded either you wrote your own

00:47:33,530 --> 00:47:36,890
configuration manually or scaffolding

00:47:35,120 --> 00:47:39,350
and creating configuration and you have

00:47:36,890 --> 00:47:41,150
the sources as well fetched what it will

00:47:39,350 --> 00:47:42,830
do is take the source right now we will

00:47:41,150 --> 00:47:44,360
take the source from a source repository

00:47:42,830 --> 00:47:46,520
we would like to introduce a repository

00:47:44,360 --> 00:47:47,870
type that is like Sipan so we take the

00:47:46,520 --> 00:47:49,280
source in Sipan or github we will take

00:47:47,870 --> 00:47:51,050
the source on there but the trickiness

00:47:49,280 --> 00:47:52,760
with this is that well see pen is more

00:47:51,050 --> 00:47:55,220
plausible github is less because you put

00:47:52,760 --> 00:47:56,840
the original raw source there often

00:47:55,220 --> 00:47:59,270
times you would then build from that

00:47:56,840 --> 00:48:01,640
something fusing digital and often from

00:47:59,270 --> 00:48:04,100
that you will actually build again so

00:48:01,640 --> 00:48:05,330
there are multiple layers a bit tricky

00:48:04,100 --> 00:48:07,160
but at the moment it will just be a

00:48:05,330 --> 00:48:08,780
source repository the generator

00:48:07,160 --> 00:48:11,270
downloads and puts it in there for you

00:48:08,780 --> 00:48:13,100
and what it will do is take that take

00:48:11,270 --> 00:48:14,330
the configuration bill down on the

00:48:13,100 --> 00:48:17,060
machine on the build machine that you

00:48:14,330 --> 00:48:19,250
have and then store the parcel somewhere

00:48:17,060 --> 00:48:23,140
that storage could be local but it goes

00:48:19,250 --> 00:48:23,140
of your remote you define it yourself

00:48:24,130 --> 00:48:29,210
exactly so we built it and once it's

00:48:26,330 --> 00:48:31,310
built it is a parcel and it is in a

00:48:29,210 --> 00:48:32,660
parcel repository and then when you want

00:48:31,310 --> 00:48:34,490
to install your business I just want to

00:48:32,660 --> 00:48:35,310
install it has configured its parcel we

00:48:34,490 --> 00:48:38,130
can say I want

00:48:35,310 --> 00:48:40,530
from there and it just pulls it in and

00:48:38,130 --> 00:48:42,510
unpacks it and that's it the

00:48:40,530 --> 00:48:46,020
installation part is Paquette other than

00:48:42,510 --> 00:48:48,780
fetching the the package is basically

00:48:46,020 --> 00:48:50,700
tar like on tar something but it

00:48:48,780 --> 00:48:53,160
uncharted in atomic weight so let's say

00:48:50,700 --> 00:48:54,600
you want to install a package that

00:48:53,160 --> 00:48:56,100
requires three more packages that one

00:48:54,600 --> 00:48:58,110
one of which requires far more packages

00:48:56,100 --> 00:49:00,120
now you get like this nice chain it will

00:48:58,110 --> 00:49:01,680
start unpacking all of them into a

00:49:00,120 --> 00:49:03,470
directory that directory will not be

00:49:01,680 --> 00:49:05,460
live if it finishes everything

00:49:03,470 --> 00:49:07,800
successfully sorry if it finishes

00:49:05,460 --> 00:49:10,440
everything successfully it will turn

00:49:07,800 --> 00:49:12,900
that on and now it is it and if you want

00:49:10,440 --> 00:49:15,170
to revert it it will just go back one so

00:49:12,900 --> 00:49:17,790
it is entirely built into an atomic

00:49:15,170 --> 00:49:20,310
style so we can either deploy

00:49:17,790 --> 00:49:24,770
successfully all of it or not at all

00:49:20,310 --> 00:49:26,910
or we could revert it instantly or not

00:49:24,770 --> 00:49:29,280
we're done I'd like to thank you very

00:49:26,910 --> 00:49:31,140
much for your time for interest and if

00:49:29,280 --> 00:49:32,790
you're interesting that come to me take

00:49:31,140 --> 00:49:34,500
a look at the github project show us

00:49:32,790 --> 00:49:36,240
everything that we can fix on it help us

00:49:34,500 --> 00:49:37,380
out or come see us later if you're

00:49:36,240 --> 00:49:39,030
interested in working on or ask

00:49:37,380 --> 00:49:40,350
additional questions thank you very much

00:49:39,030 --> 00:49:47,170
have a great tip seat

00:49:40,350 --> 00:49:47,170

YouTube URL: https://www.youtube.com/watch?v=aiNRbQKX9iU


