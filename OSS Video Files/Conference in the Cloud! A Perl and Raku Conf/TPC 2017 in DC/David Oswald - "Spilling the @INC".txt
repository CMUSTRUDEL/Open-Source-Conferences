Title: David Oswald - "Spilling the @INC"
Publication date: 2017-06-23
Playlist: TPC 2017 in DC
Description: 
	@INC is typically just a list of paths whence modules are loaded. But that's not ALL it is. To misquote Lord Acton: Power corrupts. Absolute power is fun. Once we embrace the power (or dismiss our better judgement), manipulating @INC can be fairly useful. Let's have some fun exploring the power of @INC while trying not to stain ourselves.


David is the organizer of Salt Lake City Perl Mongers, and co-organizer of the previous two YAPC::NA events. He is a past speaker at various Perl Mongers groups, OpenWest, SaintCON, and YAPC. He works at Endurance International Group / Bluehost in the Platform & Infrastructure group.
Captions: 
	00:00:00,000 --> 00:00:06,899
welcome my name is Dave Oswald I worked

00:00:03,870 --> 00:00:08,460
for endurance Bluehost is the company

00:00:06,899 --> 00:00:11,040
with endurance that I work for I run

00:00:08,460 --> 00:00:12,960
Salt Lake drill mongers for those of you

00:00:11,040 --> 00:00:14,400
who don't know me there raise your hand

00:00:12,960 --> 00:00:16,920
if you're a like throw longer in

00:00:14,400 --> 00:00:20,910
this room Salt Lake or yeah we've got a

00:00:16,920 --> 00:00:24,480
number of us here so welcome Bluehost is

00:00:20,910 --> 00:00:26,519
often looking for people so if you're

00:00:24,480 --> 00:00:28,890
interested in talking to us about that

00:00:26,519 --> 00:00:31,260
please talk to me or talk to Doron or

00:00:28,890 --> 00:00:32,550
one of the others of us from our company

00:00:31,260 --> 00:00:35,760
that you're not here to talk about that

00:00:32,550 --> 00:00:36,930
we're here to talk about this and the

00:00:35,760 --> 00:00:40,410
topics we're going to deal with today

00:00:36,930 --> 00:00:42,870
are uh ink that's not a typo we're going

00:00:40,410 --> 00:00:44,760
to talk about dot we're going to talk

00:00:42,870 --> 00:00:46,710
about percent ink code injection through

00:00:44,760 --> 00:00:48,030
ink and then after that if there's any

00:00:46,710 --> 00:00:50,789
time Willie to talk about religion or

00:00:48,030 --> 00:00:53,579
politics I'm kind of hoping that there

00:00:50,789 --> 00:00:55,500
won't be any time for us to do that so

00:00:53,579 --> 00:00:59,370
one of the wonderful things about pearl

00:00:55,500 --> 00:01:01,500
is well we have girls maker but the

00:00:59,370 --> 00:01:03,629
other thing is all of all of us the

00:01:01,500 --> 00:01:05,400
pearl community many of you many of whom

00:01:03,629 --> 00:01:08,640
happened to be in this room which is not

00:01:05,400 --> 00:01:10,590
a little bit intimidating anyway so yeah

00:01:08,640 --> 00:01:12,420
the pearl community and the pearl

00:01:10,590 --> 00:01:15,479
community is wonderful it's awesome and

00:01:12,420 --> 00:01:21,390
the pro community brought us this mess

00:01:15,479 --> 00:01:22,799
which is keep an and perl modules so

00:01:21,390 --> 00:01:24,299
thank you very much to the whole pro

00:01:22,799 --> 00:01:28,110
community everybody here anybody who's

00:01:24,299 --> 00:01:31,079
contributed to Sipan let's talk a little

00:01:28,110 --> 00:01:32,909
bit about that through the beauty and

00:01:31,079 --> 00:01:36,720
magic of c10 we can do things like this

00:01:32,909 --> 00:01:39,000
which is we have a web scraping the dom

00:01:36,720 --> 00:01:40,380
in a one-liner so thank you very much to

00:01:39,000 --> 00:01:42,540
the most delicious people for doing that

00:01:40,380 --> 00:01:44,880
for us right yes thank you

00:01:42,540 --> 00:01:50,820
or we can do really useful things like

00:01:44,880 --> 00:01:52,439
this which does that fizz buzz is a

00:01:50,820 --> 00:01:53,729
one-liner and not just a one-liner that

00:01:52,439 --> 00:01:56,670
you even have to think about just use

00:01:53,729 --> 00:02:01,290
the module right so we get those things

00:01:56,670 --> 00:02:03,060
through the power of use require and for

00:02:01,290 --> 00:02:07,560
people that were around in Perl for and

00:02:03,060 --> 00:02:08,759
I guess it's still work to do but we

00:02:07,560 --> 00:02:10,619
have to sometimes stop and ask

00:02:08,759 --> 00:02:13,140
yourselves how does that work how do we

00:02:10,619 --> 00:02:16,290
get the magic of use require and do

00:02:13,140 --> 00:02:18,569
well pearl has this concept called ink

00:02:16,290 --> 00:02:20,459
and ink is where pearl looks for the

00:02:18,569 --> 00:02:24,420
libraries that's going to load and so

00:02:20,459 --> 00:02:25,950
there's I'm using pearl - V to find what

00:02:24,420 --> 00:02:28,469
pearl thinks of the libraries that it

00:02:25,950 --> 00:02:31,680
should be using and loading and how does

00:02:28,469 --> 00:02:37,379
pearl know where to look he's looking

00:02:31,680 --> 00:02:40,739
for spare change so through the the

00:02:37,379 --> 00:02:42,870
package or the global array ink and so

00:02:40,739 --> 00:02:44,430
here I'm dumping ink and as you can see

00:02:42,870 --> 00:02:45,480
I'm using pearl Brutes and use pearl

00:02:44,430 --> 00:02:49,919
5:26

00:02:45,480 --> 00:02:51,319
and we get a list of elements in ink so

00:02:49,919 --> 00:02:56,879
let's talk a little bit about

00:02:51,319 --> 00:02:59,909
manipulating ink you can push elements

00:02:56,879 --> 00:03:01,889
into ink which will make it so that so

00:02:59,909 --> 00:03:04,889
that pearl will look in in this case

00:03:01,889 --> 00:03:07,489
/foo /lib as the last thing it is the

00:03:04,889 --> 00:03:10,739
last place what it looks for a module

00:03:07,489 --> 00:03:12,689
here we're telling it to put fool it as

00:03:10,739 --> 00:03:15,480
the first thing that it looks the first

00:03:12,689 --> 00:03:17,760
place that it looks for modules here

00:03:15,480 --> 00:03:21,930
we're going to remove an element from

00:03:17,760 --> 00:03:24,599
ink if it matches through Lib and here

00:03:21,930 --> 00:03:26,010
we're going to grep then we're making it

00:03:24,599 --> 00:03:27,629
I haven't decided what we're going to

00:03:26,010 --> 00:03:29,819
grep for but we can make a localized

00:03:27,629 --> 00:03:31,650
change to ink as well although this

00:03:29,819 --> 00:03:33,120
one's totally useless because we

00:03:31,650 --> 00:03:34,889
localized it and the local scope

00:03:33,120 --> 00:03:37,979
evaporates as soon as we begin block in

00:03:34,889 --> 00:03:42,269
right I think that was an oversight when

00:03:37,979 --> 00:03:43,470
I made the slide so anyway so here we

00:03:42,269 --> 00:03:45,629
have an example I'm going to turn off

00:03:43,470 --> 00:03:48,169
Pearl brew and now I'm going to say

00:03:45,629 --> 00:03:53,189
pearl - ink and instead of getting the

00:03:48,169 --> 00:03:54,509
list of entries that were specific to

00:03:53,189 --> 00:03:57,419
Pearl Bruno I'm getting a list of

00:03:54,509 --> 00:04:03,120
entries that are specific to site Perl

00:03:57,419 --> 00:04:04,590
or a system pearl in this case and here

00:04:03,120 --> 00:04:07,680
I'm going to tell Pro brew instead to

00:04:04,590 --> 00:04:12,329
use pro 510 and I get the pro 510 list

00:04:07,680 --> 00:04:14,370
of elements now look again look real

00:04:12,329 --> 00:04:16,349
closely here at Pro 510 and then let's

00:04:14,370 --> 00:04:20,370
take a look here is there a notable

00:04:16,349 --> 00:04:24,389
difference aside from the paths that are

00:04:20,370 --> 00:04:26,360
listed aside from the 526 and 510 you

00:04:24,389 --> 00:04:29,910
see a difference here

00:04:26,360 --> 00:04:31,620
got ya okay so thank you very much to

00:04:29,910 --> 00:04:33,420
story for giving most of my talking or

00:04:31,620 --> 00:04:36,170
some of my talk yet today in five

00:04:33,420 --> 00:04:39,470
minutes I'm just kidding

00:04:36,170 --> 00:04:42,060
Perl 526 officially removed dot from Inc

00:04:39,470 --> 00:04:43,950
some up some operating system

00:04:42,060 --> 00:04:47,520
distributions have this feature back

00:04:43,950 --> 00:04:51,360
ported in so here's I think this is my

00:04:47,520 --> 00:04:54,030
system pearl for Ubuntu and this is back

00:04:51,360 --> 00:04:55,710
ported in for the purposes of 524 having

00:04:54,030 --> 00:05:00,420
the same catch and we'll talk more about

00:04:55,710 --> 00:05:02,760
that in a moment and so here's an

00:05:00,420 --> 00:05:06,240
example of when I run Perl - YZ say for

00:05:02,760 --> 00:05:08,960
Inc on Perl 524 you can see Dada is also

00:05:06,240 --> 00:05:11,100
not there but that's because the because

00:05:08,960 --> 00:05:12,540
debian and they probably got it from or

00:05:11,100 --> 00:05:15,360
bun - probably got it from debian

00:05:12,540 --> 00:05:18,150
they've back ported in this dispatch and

00:05:15,360 --> 00:05:20,040
so the question is why and again thanks

00:05:18,150 --> 00:05:23,880
lawyer we all know why I'm just kidding

00:05:20,040 --> 00:05:26,010
it's I mean it's only a dot right how

00:05:23,880 --> 00:05:27,480
important and how significant it could

00:05:26,010 --> 00:05:30,810
that be well the dot represents the

00:05:27,480 --> 00:05:33,240
current working directory and so here we

00:05:30,810 --> 00:05:34,470
have code that there's too much on the

00:05:33,240 --> 00:05:36,690
screen to look at so let's look at just

00:05:34,470 --> 00:05:39,600
a part of it and I'm going to run a

00:05:36,690 --> 00:05:42,210
script from my current working directory

00:05:39,600 --> 00:05:44,100
and it's going to tell me that I'm in my

00:05:42,210 --> 00:05:47,040
current working directory if home via as

00:05:44,100 --> 00:05:47,880
well and we'll run it again from Tampa

00:05:47,040 --> 00:05:51,390
and it's going to tell me that my

00:05:47,880 --> 00:05:52,710
current directory is is temp and now

00:05:51,390 --> 00:05:54,840
we're going to look again we're going to

00:05:52,710 --> 00:05:56,580
examine temple what what is the

00:05:54,840 --> 00:05:58,080
significance what did I list the

00:05:56,580 --> 00:05:59,940
directory temp well I did it

00:05:58,080 --> 00:06:04,500
specifically to point out the fact that

00:05:59,940 --> 00:06:06,840
who can write to tempt anyone has anyone

00:06:04,500 --> 00:06:10,590
here ever run any script whatsoever from

00:06:06,840 --> 00:06:12,479
temp yeah any one of us would probably

00:06:10,590 --> 00:06:15,510
have right so and this is a problem

00:06:12,479 --> 00:06:18,320
because so here we have package foo

00:06:15,510 --> 00:06:21,180
which is going to die with I told you so

00:06:18,320 --> 00:06:23,669
for no good reason and we're going to go

00:06:21,180 --> 00:06:26,070
ahead and run that and put the top there

00:06:23,669 --> 00:06:28,530
we can see when I run up for a - M foo e

00:06:26,070 --> 00:06:29,490
one it's going to just tell us told you

00:06:28,530 --> 00:06:31,640
so and I can't remember why the

00:06:29,490 --> 00:06:34,320
compilation failed I did something so

00:06:31,640 --> 00:06:35,520
and I'm going to cat food just to show

00:06:34,320 --> 00:06:36,599
us which food we're getting we're

00:06:35,520 --> 00:06:39,120
getting the food that we think we're

00:06:36,599 --> 00:06:43,320
getting which is I told you so

00:06:39,120 --> 00:06:45,930
so now we're going to now we're going to

00:06:43,320 --> 00:06:49,889
switch to purl 526 and we're going to

00:06:45,930 --> 00:06:51,510
run the same thing and we get all this

00:06:49,889 --> 00:06:55,620
can't locate and that's because that was

00:06:51,510 --> 00:06:57,270
removed and so why why is all of this a

00:06:55,620 --> 00:06:59,580
problem well the problem is that

00:06:57,270 --> 00:07:02,160
behavior changes based on where we're

00:06:59,580 --> 00:07:05,729
running the script from here's an

00:07:02,160 --> 00:07:07,650
example we're going to look at the if I

00:07:05,729 --> 00:07:12,510
told you so again but now we're going to

00:07:07,650 --> 00:07:15,060
look at using we're going to CD into

00:07:12,510 --> 00:07:18,479
camp and we're and we're and we're using

00:07:15,060 --> 00:07:20,400
Perl 510 and instead of instead of

00:07:18,479 --> 00:07:22,080
i-told-you-so we get now I own you

00:07:20,400 --> 00:07:23,910
why because I dropped to module and I

00:07:22,080 --> 00:07:25,560
sabotage myself and drop to module into

00:07:23,910 --> 00:07:28,110
tent and all of a sudden we're getting

00:07:25,560 --> 00:07:30,539
the wrong module and we just got owned

00:07:28,110 --> 00:07:32,100
maybe because many times if I'm in temp

00:07:30,539 --> 00:07:33,720
doing something I might be there to be

00:07:32,100 --> 00:07:35,340
investigating a problem that some user

00:07:33,720 --> 00:07:37,110
may be caused and I might even be

00:07:35,340 --> 00:07:40,410
masquerading as root at the moment right

00:07:37,110 --> 00:07:41,580
and so this is a problem you might say

00:07:40,410 --> 00:07:43,080
well I know all of my module

00:07:41,580 --> 00:07:45,360
dependencies and they're all installed

00:07:43,080 --> 00:07:47,880
and dot is the last thing that comes in

00:07:45,360 --> 00:07:50,130
Inc and so no big deal right no big deal

00:07:47,880 --> 00:07:53,910
so but what about this so here we're

00:07:50,130 --> 00:07:55,520
going to eval obstinacy or warn that

00:07:53,910 --> 00:07:58,289
we're skipping the optional dependency

00:07:55,520 --> 00:07:59,580
so that sounds reasonable enough and

00:07:58,289 --> 00:08:00,870
we'll go ahead and run it and oh

00:07:59,580 --> 00:08:03,810
everything's great we're skipping the

00:08:00,870 --> 00:08:06,840
optional dependency but now we're going

00:08:03,810 --> 00:08:09,150
to CD into a directory where I happen to

00:08:06,840 --> 00:08:12,900
know that that optional dependency is

00:08:09,150 --> 00:08:13,979
not immediately available however our

00:08:12,900 --> 00:08:15,870
we're going to seed into a directory

00:08:13,979 --> 00:08:17,700
where somebody dropped in something else

00:08:15,870 --> 00:08:20,610
for us a little a little thank you all

00:08:17,700 --> 00:08:23,340
your base are belong to us Oh No we've

00:08:20,610 --> 00:08:25,530
just been owned right so by changing

00:08:23,340 --> 00:08:27,690
into another directory where that

00:08:25,530 --> 00:08:29,130
optional dependency has been just

00:08:27,690 --> 00:08:32,070
dropped there by a friendly user

00:08:29,130 --> 00:08:35,190
somewhere we now are we now just got

00:08:32,070 --> 00:08:36,750
ourselves owned most applause for you to

00:08:35,190 --> 00:08:42,000
take a picture but thank you want me to

00:08:36,750 --> 00:08:43,500
smile and if we just cat that optional

00:08:42,000 --> 00:08:44,790
dependency you can see fortunately I

00:08:43,500 --> 00:08:46,410
just was printing all your base are

00:08:44,790 --> 00:08:50,130
belong to us I didn't actually clobber

00:08:46,410 --> 00:08:52,380
my own laptop so what just happen the

00:08:50,130 --> 00:08:53,370
script behavior changed based on where

00:08:52,380 --> 00:08:55,709
we ran it

00:08:53,370 --> 00:08:57,360
so from my home door it skipped the

00:08:55,709 --> 00:08:58,980
object of the optional dependencies but

00:08:57,360 --> 00:09:01,050
when I changed into the scripts folder

00:08:58,980 --> 00:09:04,110
it found that optional dependency and

00:09:01,050 --> 00:09:08,130
included it because it was using dot as

00:09:04,110 --> 00:09:09,510
the last element in in Inc so but that's

00:09:08,130 --> 00:09:12,949
exactly what we would expect right

00:09:09,510 --> 00:09:15,300
that's what we want to have happen well

00:09:12,949 --> 00:09:16,829
sure if you're always on a non-shared

00:09:15,300 --> 00:09:18,029
system and you always run your scripts

00:09:16,829 --> 00:09:19,920
from the same working directory you

00:09:18,029 --> 00:09:21,389
always know all of the dependencies and

00:09:19,920 --> 00:09:23,250
all the optional dependencies of all

00:09:21,389 --> 00:09:24,720
your scripts and all of the modules that

00:09:23,250 --> 00:09:26,070
your scripts used on all of the modules

00:09:24,720 --> 00:09:27,990
the Bayview's and all the optional

00:09:26,070 --> 00:09:29,790
dependencies and so on and so forth and

00:09:27,990 --> 00:09:32,459
that you never ever miss any of those

00:09:29,790 --> 00:09:34,579
details above ever then that's just fine

00:09:32,459 --> 00:09:37,589
that's great that works perfectly

00:09:34,579 --> 00:09:39,930
however we often develop for shared

00:09:37,589 --> 00:09:42,089
systems I know within my company I often

00:09:39,930 --> 00:09:44,579
develop for shared systems and I think

00:09:42,089 --> 00:09:46,019
you do too right yeah cPanel was one of

00:09:44,579 --> 00:09:48,240
the early people to have discovered this

00:09:46,019 --> 00:09:50,639
issue I think Debian reported it up in

00:09:48,240 --> 00:09:54,060
2010 and then cPanel children always

00:09:50,639 --> 00:09:56,880
reported it up in 2012 and it made it up

00:09:54,060 --> 00:09:58,500
from there so we often developed for

00:09:56,880 --> 00:10:01,350
shared systems and there are many paths

00:09:58,500 --> 00:10:02,940
that are globally writable temp now user

00:10:01,350 --> 00:10:04,230
name may not be globally writable but

00:10:02,940 --> 00:10:06,510
it's writable by a user

00:10:04,230 --> 00:10:08,760
and at some point an admin might change

00:10:06,510 --> 00:10:10,110
directory into a user's directory find a

00:10:08,760 --> 00:10:12,120
problem and say oh I have a script to

00:10:10,110 --> 00:10:16,010
fix with this and run that script and

00:10:12,120 --> 00:10:16,010
he's any users home during

00:10:18,649 --> 00:10:23,490
nobody's infallible mistakes happen

00:10:21,149 --> 00:10:26,459
vigilance requires thought and energy

00:10:23,490 --> 00:10:30,360
and thought and energy don't happen by

00:10:26,459 --> 00:10:32,639
default especially on Mondays so as long

00:10:30,360 --> 00:10:34,829
as dot is an ink you can't ever be sure

00:10:32,639 --> 00:10:36,360
when you run a script from a path that

00:10:34,829 --> 00:10:39,110
is writable by anyone aside from

00:10:36,360 --> 00:10:41,610
yourself but it's going to be ok

00:10:39,110 --> 00:10:44,940
laser dependencies are even harder to

00:10:41,610 --> 00:10:48,510
assure as we saw so here we're going to

00:10:44,940 --> 00:10:51,449
look at here here we only load a module

00:10:48,510 --> 00:10:52,980
optionally it's a it's some random

00:10:51,449 --> 00:10:56,490
interval we'll go ahead and load some

00:10:52,980 --> 00:10:58,050
and load a module well that when we can

00:10:56,490 --> 00:10:59,490
never - you can't ever be sure that

00:10:58,050 --> 00:11:02,279
you're executing all of the code paths

00:10:59,490 --> 00:11:03,990
that would run that module actually over

00:11:02,279 --> 00:11:05,330
as you approach infinity eventually

00:11:03,990 --> 00:11:06,980
you're going to hit

00:11:05,330 --> 00:11:10,850
you're going to hit the point where

00:11:06,980 --> 00:11:12,940
randomness becomes normalized but but

00:11:10,850 --> 00:11:15,500
the general point is that when you have

00:11:12,940 --> 00:11:17,570
multiple paths that could be loading

00:11:15,500 --> 00:11:19,790
lazily loading dependencies you might

00:11:17,570 --> 00:11:21,350
not even be aware that there are some

00:11:19,790 --> 00:11:24,649
dependencies that could get loaded at

00:11:21,350 --> 00:11:28,040
some point in the future and so but wait

00:11:24,649 --> 00:11:29,779
there's more that I actually chose all

00:11:28,040 --> 00:11:31,670
your base are belong to us for a

00:11:29,779 --> 00:11:35,570
specific reason anybody know what that

00:11:31,670 --> 00:11:39,560
reason is based op p.m. thank you so

00:11:35,570 --> 00:11:41,450
here we have packaged my base that's

00:11:39,560 --> 00:11:45,920
going to be a base class and now I'm

00:11:41,450 --> 00:11:49,519
going to use base p.m. use base my base

00:11:45,920 --> 00:11:52,430
to make package main flow to make

00:11:49,519 --> 00:11:55,370
package main and hear it from my base

00:11:52,430 --> 00:11:57,410
and I've this is totally safe right

00:11:55,370 --> 00:12:00,260
because I've in lined my base within

00:11:57,410 --> 00:12:02,269
package within the same file as package

00:12:00,260 --> 00:12:05,060
main right that could never break could

00:12:02,269 --> 00:12:07,279
it except where does base look first

00:12:05,060 --> 00:12:08,959
does it look in line first anybody

00:12:07,279 --> 00:12:10,490
happen to know if I'm feeding this to

00:12:08,959 --> 00:12:13,130
you but you can shake your head right it

00:12:10,490 --> 00:12:14,600
doesn't look there first they stop p.m.

00:12:13,130 --> 00:12:17,320
is going to look through all of your

00:12:14,600 --> 00:12:19,850
entries in Inc first so if I run that

00:12:17,320 --> 00:12:22,640
from a directory that doesn't have any

00:12:19,850 --> 00:12:25,820
other modules to load then this is safe

00:12:22,640 --> 00:12:27,589
hello world but if I load it from a

00:12:25,820 --> 00:12:30,470
directory where I've got a module named

00:12:27,589 --> 00:12:33,709
my base in it then you've been owned

00:12:30,470 --> 00:12:36,670
again right so this is one of the

00:12:33,709 --> 00:12:39,529
shortcomings of base there's our gotcha

00:12:36,670 --> 00:12:43,100
so even if a module is in London base

00:12:39,529 --> 00:12:44,990
they stop p.m. looks at Inc first before

00:12:43,100 --> 00:12:47,810
falling back to the in lined version of

00:12:44,990 --> 00:12:50,779
a module so something to be aware of

00:12:47,810 --> 00:12:54,110
things to remember then are never

00:12:50,779 --> 00:12:57,649
execute any script from any path that

00:12:54,110 --> 00:12:59,149
anyone can write to who isn't you that

00:12:57,649 --> 00:13:01,699
that might be something to remember if

00:12:59,149 --> 00:13:04,850
you're not running a patched version of

00:13:01,699 --> 00:13:10,550
Perl certainly never with elevated

00:13:04,850 --> 00:13:12,410
privileges and especially not if you're

00:13:10,550 --> 00:13:15,290
using base dot p.m. the problem is

00:13:12,410 --> 00:13:16,910
you're probably using modules and unless

00:13:15,290 --> 00:13:18,279
you skim the source code for all those

00:13:16,910 --> 00:13:19,720
modules

00:13:18,279 --> 00:13:22,959
using base who is using optional

00:13:19,720 --> 00:13:24,790
dependencies so never do so if you have

00:13:22,959 --> 00:13:28,959
dependencies on modules with optional

00:13:24,790 --> 00:13:30,850
dependencies or dependencies on modules

00:13:28,959 --> 00:13:32,290
that use base stop p.m. or dependencies

00:13:30,850 --> 00:13:34,149
on modules that have dependencies on

00:13:32,290 --> 00:13:37,139
modules that have optional dependencies

00:13:34,149 --> 00:13:43,269
or that use they stop p.m. or on Mondays

00:13:37,139 --> 00:13:45,569
oh and never ever let anyone else do on

00:13:43,269 --> 00:13:50,670
your system do that either

00:13:45,569 --> 00:13:50,670
even at Saturday on Saturday at 3:47 am

00:13:52,889 --> 00:13:59,620
too much to remember and it's too much

00:13:57,759 --> 00:14:02,439
to remember and never forget to remember

00:13:59,620 --> 00:14:05,769
and to insist that nobody else ever

00:14:02,439 --> 00:14:07,990
forget to remember ever either so I'm

00:14:05,769 --> 00:14:09,939
telling us all to be clever except that

00:14:07,990 --> 00:14:12,550
nobody can be clever 100% of the time

00:14:09,939 --> 00:14:14,319
and I think that mjd would may or may

00:14:12,550 --> 00:14:16,720
not have been in here minute ago oh yeah

00:14:14,319 --> 00:14:18,670
I'm not in here right now gave a talk

00:14:16,720 --> 00:14:21,629
about how you can't be clever all the

00:14:18,670 --> 00:14:24,759
time or wrote an article about it anyway

00:14:21,629 --> 00:14:27,490
here's his one area where you could have

00:14:24,759 --> 00:14:31,089
gotten owned without even realizing it

00:14:27,490 --> 00:14:34,689
Prolog probe are well Perot var or Perl

00:14:31,089 --> 00:14:37,059
doc has optional dependencies and so if

00:14:34,689 --> 00:14:38,649
you happen to be in an a users directory

00:14:37,059 --> 00:14:42,069
or in tamper in some other world

00:14:38,649 --> 00:14:44,319
writable place and you run perl doc on

00:14:42,069 --> 00:14:46,769
an unpatched version of Perl somebody

00:14:44,319 --> 00:14:49,089
who knows about this about these

00:14:46,769 --> 00:14:52,329
optional dependencies could drop in

00:14:49,089 --> 00:14:56,620
there into temp for example pod product

00:14:52,329 --> 00:14:58,569
to term PM and now they can on you by

00:14:56,620 --> 00:15:01,929
using their own version of that module

00:14:58,569 --> 00:15:04,000
which gets loaded so let's talk about

00:15:01,929 --> 00:15:09,220
some steps to protect ourselves before

00:15:04,000 --> 00:15:10,480
moving on to more fun and how to protect

00:15:09,220 --> 00:15:13,750
yourself even when you don't feel clever

00:15:10,480 --> 00:15:22,990
so first is used Perl 526 who's using

00:15:13,750 --> 00:15:25,749
pro 526 everywhere set up a site

00:15:22,990 --> 00:15:27,959
customized PL anybody know what that

00:15:25,749 --> 00:15:27,959
does

00:15:28,890 --> 00:15:34,520
so this is hell Debian and ultimately

00:15:31,680 --> 00:15:37,950
boom to back ported the feature into

00:15:34,520 --> 00:15:40,980
into pearl 5:24 is by setting up a site

00:15:37,950 --> 00:15:43,530
customized PL which pearl will then will

00:15:40,980 --> 00:15:46,710
load as a module actually or do as a

00:15:43,530 --> 00:15:52,650
module probably and and it pops off of

00:15:46,710 --> 00:15:54,930
ink dot or pops it off the end of dot do

00:15:52,650 --> 00:15:56,880
the same for any containers for your

00:15:54,930 --> 00:16:01,800
pearl brew environments that are not

00:15:56,880 --> 00:16:03,540
pearl 526 clams is another one where

00:16:01,800 --> 00:16:05,580
you're already changing into another

00:16:03,540 --> 00:16:07,050
directory and getting a different set of

00:16:05,580 --> 00:16:08,790
features right

00:16:07,050 --> 00:16:11,790
the one the feature that we want to keep

00:16:08,790 --> 00:16:16,950
everywhere we look is is the removal of

00:16:11,790 --> 00:16:20,610
dot so here we turn off pearl brew Pro

00:16:16,950 --> 00:16:23,360
bruise turned off we go ahead and look

00:16:20,610 --> 00:16:26,430
and see what is it what is available

00:16:23,360 --> 00:16:28,290
we're looking here at config site Lib

00:16:26,430 --> 00:16:31,820
and this is how pearl knows where to

00:16:28,290 --> 00:16:35,490
find the site Lib what was it called

00:16:31,820 --> 00:16:38,340
site customize dot PL module it looks in

00:16:35,490 --> 00:16:45,060
where config site live thinks it should

00:16:38,340 --> 00:16:47,490
look here under under Pearl brew 526

00:16:45,060 --> 00:16:50,280
it's telling it to look for that under

00:16:47,490 --> 00:16:52,830
site Perl 5 26 and so whichever version

00:16:50,280 --> 00:16:54,360
of pearl you're using and if you're

00:16:52,830 --> 00:16:58,020
using pro brew make sure to drop that

00:16:54,360 --> 00:16:59,670
site customized up PL modification in

00:16:58,020 --> 00:17:03,900
the appropriate places to make sure that

00:16:59,670 --> 00:17:05,790
you're getting protected so setup site

00:17:03,900 --> 00:17:08,220
customize now also patch the scripts

00:17:05,790 --> 00:17:10,320
that you control and here's an example

00:17:08,220 --> 00:17:14,460
of how we can patch the scripts that we

00:17:10,320 --> 00:17:17,910
control and all of the 600 or so scripts

00:17:14,460 --> 00:17:19,650
that you have on your system drop in a

00:17:17,910 --> 00:17:24,420
begin block at the very beginning of the

00:17:19,650 --> 00:17:27,330
script that that pops off dot and that's

00:17:24,420 --> 00:17:32,150
if you can't set up a slight a slight

00:17:27,330 --> 00:17:35,670
customize dot PL right and I actually

00:17:32,150 --> 00:17:40,850
actually had to do this recently and it

00:17:35,670 --> 00:17:40,850
was actually 600 scripts 611 so

00:17:41,270 --> 00:17:48,330
okay another one Youth parents why

00:17:44,190 --> 00:17:50,190
should we use parents better than base

00:17:48,330 --> 00:17:52,320
thank you and in this particular

00:17:50,190 --> 00:17:54,270
situation what it's better about it is

00:17:52,320 --> 00:17:56,280
that it doesn't automatically default to

00:17:54,270 --> 00:17:58,050
falling back or it doesn't automatically

00:17:56,280 --> 00:18:01,790
default to looking outward before

00:17:58,050 --> 00:18:04,950
looking at inline modules first so yeah

00:18:01,790 --> 00:18:06,840
so parent p.m. will start with the

00:18:04,950 --> 00:18:09,290
inline code and then fall back to Inc

00:18:06,840 --> 00:18:12,210
which is kind of the opposite of base

00:18:09,290 --> 00:18:13,800
patch every module in your control that

00:18:12,210 --> 00:18:15,330
doesn't mean everything that you've

00:18:13,800 --> 00:18:17,190
downloaded from seed pan it means

00:18:15,330 --> 00:18:19,700
download everything that you own that

00:18:17,190 --> 00:18:22,800
you that you on the source code for and

00:18:19,700 --> 00:18:26,700
here is a patch where we're saying go

00:18:22,800 --> 00:18:28,680
ahead and localize Inc and then pop off

00:18:26,700 --> 00:18:30,420
that last dot and then go ahead and

00:18:28,680 --> 00:18:33,600
require or use the module that we need

00:18:30,420 --> 00:18:34,980
and then when the scope expires we have

00:18:33,600 --> 00:18:36,600
Inc back to normal so that we aren't

00:18:34,980 --> 00:18:42,270
clobbering all the other modules that

00:18:36,600 --> 00:18:44,820
we're using so used for pro 526 use site

00:18:42,270 --> 00:18:46,800
customized patch your scripts use parent

00:18:44,820 --> 00:18:49,710
attach the modules that you control and

00:18:46,800 --> 00:18:52,740
ask up screen upstream authors to patch

00:18:49,710 --> 00:18:54,840
their modules as well pull requests are

00:18:52,740 --> 00:18:57,110
usually welcome let's talk for a minute

00:18:54,840 --> 00:19:00,390
about % Inc

00:18:57,110 --> 00:19:07,050
how does % Inc differ from dollar from

00:19:00,390 --> 00:19:10,200
at Inc ones a hash go ahead yes

00:19:07,050 --> 00:19:13,080
so at Inc is where to look and % Inc is

00:19:10,200 --> 00:19:14,550
what we just got what we got so Inc

00:19:13,080 --> 00:19:19,290
knows what was loaded and where it came

00:19:14,550 --> 00:19:22,230
from and here I'm here I'm using local

00:19:19,290 --> 00:19:24,270
lid called scripts and I'm using strict

00:19:22,230 --> 00:19:27,480
and I'm using optional dependency and

00:19:24,270 --> 00:19:30,900
then I'm going to say the name of the

00:19:27,480 --> 00:19:32,850
module and the path and you can see that

00:19:30,900 --> 00:19:35,250
I'm getting my all your base are belong

00:19:32,850 --> 00:19:37,350
to us from optional dependency which is

00:19:35,250 --> 00:19:39,390
in scripts optional divinity dot p.m. so

00:19:37,350 --> 00:19:42,360
now you think occasionally when I want

00:19:39,390 --> 00:19:44,610
to know where I got a module from it's

00:19:42,360 --> 00:19:47,010
kind of useful in that regard but it has

00:19:44,610 --> 00:19:48,750
another use so if in a module if an

00:19:47,010 --> 00:19:50,670
entry already exists an Inc it won't be

00:19:48,750 --> 00:19:54,040
load it again and that turns out to be

00:19:50,670 --> 00:19:56,500
sometimes a useful feature

00:19:54,040 --> 00:19:58,120
if an entry is removed from ink a module

00:19:56,500 --> 00:19:59,800
may be loaded again and that can

00:19:58,120 --> 00:20:04,750
sometimes be a useful feature though it

00:19:59,800 --> 00:20:09,100
can also produce surprising results in

00:20:04,750 --> 00:20:10,960
my example earlier I used M - M to load

00:20:09,100 --> 00:20:12,880
the optional dependency which for those

00:20:10,960 --> 00:20:14,530
were here in the last hour and everybody

00:20:12,880 --> 00:20:18,810
here probably already knows anyway it's

00:20:14,530 --> 00:20:21,880
to load a module in a one-liner easily

00:20:18,810 --> 00:20:23,800
well it turns out that - M the

00:20:21,880 --> 00:20:24,820
command-line switch happens too soon for

00:20:23,800 --> 00:20:28,270
you to do anything about it

00:20:24,820 --> 00:20:30,700
in your - e block of code you can't put

00:20:28,270 --> 00:20:34,540
a begin block in - E and have it affect

00:20:30,700 --> 00:20:36,400
what's happened in your - am loads so by

00:20:34,540 --> 00:20:39,490
then it's already too late just as a

00:20:36,400 --> 00:20:41,410
word of warning but for most other

00:20:39,490 --> 00:20:43,600
scripts sticking a begin block at the

00:20:41,410 --> 00:20:47,950
top will allow you to manipulate a tank

00:20:43,600 --> 00:20:49,600
and dollar Inc for for twiddling so here

00:20:47,950 --> 00:20:52,450
we have Acme fizzbuzz which we used

00:20:49,600 --> 00:20:55,180
earlier in the talk and under normal

00:20:52,450 --> 00:20:56,560
conditions it'll give us a list of a

00:20:55,180 --> 00:21:01,600
hundred things I'm getting the head of

00:20:56,560 --> 00:21:03,190
15 but now we're going to now we're

00:21:01,600 --> 00:21:07,150
going to stick in a little begin block

00:21:03,190 --> 00:21:08,920
up there to suggest to purl the Acme

00:21:07,150 --> 00:21:12,010
fizzbuzz has already been loaded from

00:21:08,920 --> 00:21:14,350
some path called dummy and so now when I

00:21:12,010 --> 00:21:17,620
run scripts is buzzed I get no output

00:21:14,350 --> 00:21:19,450
because Acme fizzbuzz won't reload it's

00:21:17,620 --> 00:21:23,590
already / already thinks it's been

00:21:19,450 --> 00:21:25,930
loaded so you can produce surprising

00:21:23,590 --> 00:21:29,110
results there's some risk to using these

00:21:25,930 --> 00:21:32,500
sorts of things so know what you're

00:21:29,110 --> 00:21:34,060
doing right so I use it for discovering

00:21:32,500 --> 00:21:37,870
where a module is going to be loaded

00:21:34,060 --> 00:21:40,810
from you can also use Prolog - L and

00:21:37,870 --> 00:21:44,470
give it a module name that's kind of a

00:21:40,810 --> 00:21:46,090
more static approach but dynamically you

00:21:44,470 --> 00:21:49,750
can find out right in your own runtime

00:21:46,090 --> 00:21:52,900
by using percent and to find out where a

00:21:49,750 --> 00:22:00,070
module came from so now let's do a quick

00:21:52,900 --> 00:22:04,519
review Inc Inc performs the Inc informs

00:22:00,070 --> 00:22:06,409
Perl where to find your modules and that

00:22:04,519 --> 00:22:11,419
that's for the purposes of use and

00:22:06,409 --> 00:22:14,899
require and do it was removed from Pearl

00:22:11,419 --> 00:22:16,969
526 somewhat agonizingly if you read the

00:22:14,899 --> 00:22:18,979
profile porters thread and then the

00:22:16,969 --> 00:22:22,969
longer thread and then the other threads

00:22:18,979 --> 00:22:24,349
it was yes go ahead and please that was

00:22:22,969 --> 00:22:25,489
just the public stuff that I could read

00:22:24,349 --> 00:22:27,139
yeah because I haven't we haven't been

00:22:25,489 --> 00:22:30,200
we haven't not colluded before that's

00:22:27,139 --> 00:22:32,450
right yeah so yeah that's just the

00:22:30,200 --> 00:22:35,119
public stuff it's agonizingly painful

00:22:32,450 --> 00:22:38,029
because they knew that there was the

00:22:35,119 --> 00:22:39,950
potential to break not only all of Sipan

00:22:38,029 --> 00:22:41,599
all of Sipan is the part that we know

00:22:39,950 --> 00:22:43,909
that we know we're breaking like you can

00:22:41,599 --> 00:22:46,009
scan Sipan and run the test suites and

00:22:43,909 --> 00:22:48,709
find out what breaks for the most part

00:22:46,009 --> 00:22:51,200
but there's also presumably we have

00:22:48,709 --> 00:22:53,059
still a few hundred users even thousands

00:22:51,200 --> 00:22:54,979
or you know a million users who could

00:22:53,059 --> 00:22:58,700
also be having their scripts broken as

00:22:54,979 --> 00:23:02,209
well so it was an agonizing decision but

00:22:58,700 --> 00:23:04,789
was done for very good reasons ink also

00:23:02,209 --> 00:23:08,509
informs Perl of what modules have been

00:23:04,789 --> 00:23:12,669
loaded and you can both you can

00:23:08,509 --> 00:23:19,579
manipulate both @ & % ink usefully and

00:23:12,669 --> 00:23:21,289
somewhat risk early but loading modules

00:23:19,579 --> 00:23:24,679
from the file system is so boring

00:23:21,289 --> 00:23:27,469
that's so 1990s we've been doing that

00:23:24,679 --> 00:23:29,509
for years loading modules from the fire

00:23:27,469 --> 00:23:31,279
file system before still using Perl

00:23:29,509 --> 00:23:33,079
nowadays it's because we're doing it

00:23:31,279 --> 00:23:35,359
because it's fun at least that to me it

00:23:33,079 --> 00:23:36,619
is and that's why I still use parolees

00:23:35,359 --> 00:23:38,269
until I get paid for it but I do it

00:23:36,619 --> 00:23:39,739
because it's because I use probably

00:23:38,269 --> 00:23:42,349
because it's fun and I hope it is to you

00:23:39,739 --> 00:23:46,429
so let's have a little bit of fun now

00:23:42,349 --> 00:23:49,279
and at this point we've now moved out of

00:23:46,429 --> 00:23:50,809
the practical realm I want to make that

00:23:49,279 --> 00:23:52,549
kind of clear and although there are

00:23:50,809 --> 00:23:55,329
practicalities to the things that we

00:23:52,549 --> 00:24:01,159
will explore next

00:23:55,329 --> 00:24:02,959
caveat emptor in fact it may be totally

00:24:01,159 --> 00:24:04,909
useless insecure and impractical and

00:24:02,959 --> 00:24:06,829
insane what it's still coming next and

00:24:04,909 --> 00:24:10,759
it may be fun and that's the important

00:24:06,829 --> 00:24:14,500
thing by some values of fun so this is

00:24:10,759 --> 00:24:19,090
from Perl doc - ass

00:24:14,500 --> 00:24:21,429
require you can also insert hooks into

00:24:19,090 --> 00:24:24,460
the import facility by putting Perl code

00:24:21,429 --> 00:24:26,500
directly in the anchor there are three

00:24:24,460 --> 00:24:28,929
forms of hooks subroutines references

00:24:26,500 --> 00:24:31,269
and a subroutine references array

00:24:28,929 --> 00:24:36,640
references and blessed objects this does

00:24:31,269 --> 00:24:39,250
sound kind of fun doesn't it I don't

00:24:36,640 --> 00:24:40,960
know I guess I don't know how you could

00:24:39,250 --> 00:24:42,880
do this kind of thing with see although

00:24:40,960 --> 00:24:45,210
pearls Regency so I guess you could

00:24:42,880 --> 00:24:47,860
always use pearls to do it

00:24:45,210 --> 00:24:49,840
so subroutine references are the

00:24:47,860 --> 00:24:52,840
simplest case that's another quote from

00:24:49,840 --> 00:24:55,269
pearl doc - s and so we'll probably do

00:24:52,840 --> 00:24:58,029
that if you need to use an array

00:24:55,269 --> 00:24:59,559
reference or a blessed object to insert

00:24:58,029 --> 00:25:01,360
code into ink that you'll need to talk

00:24:59,559 --> 00:25:04,269
to one of these other people many of

00:25:01,360 --> 00:25:06,760
whom are in this room I'm going to I'm

00:25:04,269 --> 00:25:11,139
turning them loose on y'all so we'll

00:25:06,760 --> 00:25:16,179
talk about sub rest and executing code

00:25:11,139 --> 00:25:19,210
via subroutine reference in ink so thank

00:25:16,179 --> 00:25:21,179
you I'm halfway through and that's about

00:25:19,210 --> 00:25:23,440
right

00:25:21,179 --> 00:25:26,260
when you push a subroutine reference

00:25:23,440 --> 00:25:29,380
into ink then that reference that sub

00:25:26,260 --> 00:25:30,970
breath needs to expect two parameters

00:25:29,380 --> 00:25:34,960
the first parameter will be a reference

00:25:30,970 --> 00:25:37,630
to itself to its own to the very code

00:25:34,960 --> 00:25:39,610
ref you just pushed in so that you can

00:25:37,630 --> 00:25:41,110
get recursive and heaven help you if you

00:25:39,610 --> 00:25:41,980
ever do that I don't even know what

00:25:41,110 --> 00:25:45,669
that's used for

00:25:41,980 --> 00:25:47,289
and the other one the other the next

00:25:45,669 --> 00:25:51,970
thing is the filename of the module to

00:25:47,289 --> 00:25:54,970
load and then the code ref must return

00:25:51,970 --> 00:25:56,950
the following andis that although I

00:25:54,970 --> 00:25:58,600
can't quite figure out a good way to

00:25:56,950 --> 00:26:00,220
word the documentation better than it's

00:25:58,600 --> 00:26:02,559
written then it's written it's still

00:26:00,220 --> 00:26:05,679
kind of hard to grok and so I'll try to

00:26:02,559 --> 00:26:08,260
discuss it return nothing if this isn't

00:26:05,679 --> 00:26:10,000
a target module none to this handler so

00:26:08,260 --> 00:26:12,309
if you consider the code ref that you've

00:26:10,000 --> 00:26:13,870
pushed into ink to be a handler you

00:26:12,309 --> 00:26:18,190
certainly wouldn't want it to risk to

00:26:13,870 --> 00:26:21,070
respond by loading fubar for any module

00:26:18,190 --> 00:26:25,090
that you asked for and so only respond

00:26:21,070 --> 00:26:26,809
with a with an affirmative return if it

00:26:25,090 --> 00:26:28,700
is a module that you care to

00:26:26,809 --> 00:26:32,149
handle otherwise go ahead and just

00:26:28,700 --> 00:26:33,950
return nothing and pearl will will

00:26:32,149 --> 00:26:35,570
understand TiVo either move along to the

00:26:33,950 --> 00:26:38,749
next thing in ink or if this is the last

00:26:35,570 --> 00:26:40,940
one then to give the all famous the

00:26:38,749 --> 00:26:44,740
module doesn't exist where I expect to

00:26:40,940 --> 00:26:50,840
find it any questions or comments so far

00:26:44,740 --> 00:26:53,929
okay it must also if you intend to

00:26:50,840 --> 00:26:55,549
handle this sub ref or if you intend to

00:26:53,929 --> 00:26:57,860
handle this module that's that's being

00:26:55,549 --> 00:27:01,070
requested then you can return a

00:26:57,860 --> 00:27:03,320
reference to scaler containing text to

00:27:01,070 --> 00:27:08,570
prepend to the string that constitutes

00:27:03,320 --> 00:27:10,730
the module and then optionally either a

00:27:08,570 --> 00:27:13,129
file handle to read from which which so

00:27:10,730 --> 00:27:14,960
to turn one line for every of the module

00:27:13,129 --> 00:27:18,559
for every line of the file handle that's

00:27:14,960 --> 00:27:20,990
read or a sub ref another sub rest that

00:27:18,559 --> 00:27:23,360
for each call to that sub ref returns

00:27:20,990 --> 00:27:24,889
one line of the code that you wish to

00:27:23,360 --> 00:27:28,100
comprise the module that you're trying

00:27:24,889 --> 00:27:31,490
to load so it's a little bit confusing

00:27:28,100 --> 00:27:33,139
and one of the things that is a little

00:27:31,490 --> 00:27:36,619
bit confusing in the documentation is it

00:27:33,139 --> 00:27:39,200
makes it kind of sound like like number

00:27:36,619 --> 00:27:41,389
two and three down below there have to

00:27:39,200 --> 00:27:44,269
be in that order because it actually

00:27:41,389 --> 00:27:47,659
uses the words in this order but that's

00:27:44,269 --> 00:27:50,169
not quite right you need to have the

00:27:47,659 --> 00:27:55,159
zero is item there as the first item and

00:27:50,169 --> 00:27:57,649
then one of the next two things so just

00:27:55,159 --> 00:28:00,110
to keep that straight so let's go ahead

00:27:57,649 --> 00:28:02,179
and talk about this so we need to accept

00:28:00,110 --> 00:28:05,389
two parameters you must return either

00:28:02,179 --> 00:28:09,350
nothing or a reference to a scalar of

00:28:05,389 --> 00:28:11,629
prepended text or or and optionally a

00:28:09,350 --> 00:28:13,519
file handle or a sub ref so let's first

00:28:11,629 --> 00:28:15,710
try something that we never should do

00:28:13,519 --> 00:28:17,179
probably and that's to totally bypass

00:28:15,710 --> 00:28:19,879
everything that we just talked about and

00:28:17,179 --> 00:28:23,840
just create a type glob so this code

00:28:19,879 --> 00:28:26,360
right here is going to push into ink or

00:28:23,840 --> 00:28:28,970
sub riff for in for a subroutine named

00:28:26,360 --> 00:28:31,940
load and then the next thing that it's

00:28:28,970 --> 00:28:33,230
going to do is return if the subroutine

00:28:31,940 --> 00:28:35,450
doesn't match something that we know how

00:28:33,230 --> 00:28:38,299
to handle and then it's going to go

00:28:35,450 --> 00:28:41,100
ahead and convert the path of the

00:28:38,299 --> 00:28:43,080
subroutine just to the colon colon

00:28:41,100 --> 00:28:44,670
Norman creature that we are typically

00:28:43,080 --> 00:28:47,310
used to seeing but then the very last

00:28:44,670 --> 00:28:49,710
thing is that rather than rather than

00:28:47,310 --> 00:28:52,260
actually returning code it's just going

00:28:49,710 --> 00:28:55,080
to create a type glob it's going to jam

00:28:52,260 --> 00:28:59,760
into our callers namespace or into that

00:28:55,080 --> 00:29:01,560
modules namespace a subroutine and then

00:28:59,760 --> 00:29:03,990
we're going to go ahead and use the

00:29:01,560 --> 00:29:07,650
convenient feature of prepending by

00:29:03,990 --> 00:29:10,890
appending to our to our module a1 so

00:29:07,650 --> 00:29:13,050
that it becomes a legal module and we

00:29:10,890 --> 00:29:15,030
can run that and we get I calls we get

00:29:13,050 --> 00:29:16,830
called foo which is the output that that

00:29:15,030 --> 00:29:20,790
modules that subroutine should create

00:29:16,830 --> 00:29:22,440
for us and it works so now let's try

00:29:20,790 --> 00:29:23,970
something a little bit more the way the

00:29:22,440 --> 00:29:26,550
documentation would have us do it nets

00:29:23,970 --> 00:29:29,700
to return a scalar scalar reference to a

00:29:26,550 --> 00:29:32,130
string of module code however in this

00:29:29,700 --> 00:29:34,290
case instead of calling it module code

00:29:32,130 --> 00:29:37,110
that we are prepending to something this

00:29:34,290 --> 00:29:39,480
is just the entire modules code and so

00:29:37,110 --> 00:29:40,920
we're using a here doc and it's the

00:29:39,480 --> 00:29:43,620
old-school here doc I'm sorry we should

00:29:40,920 --> 00:29:45,450
this is 526 but it's still the

00:29:43,620 --> 00:29:47,040
old-school here doc and we're going to

00:29:45,450 --> 00:29:49,130
use that as our modules code and we're

00:29:47,040 --> 00:29:52,830
going to return a reference to it and

00:29:49,130 --> 00:29:55,530
then we use foo bar and we go ahead and

00:29:52,830 --> 00:29:57,510
invoke that subroutine and again we get

00:29:55,530 --> 00:30:03,270
called foo in fact I probably copied the

00:29:57,510 --> 00:30:09,840
previous slide now let's return a file

00:30:03,270 --> 00:30:19,650
handle so the interesting thing here I'm

00:30:09,840 --> 00:30:21,510
going to go off camera for a second that

00:30:19,650 --> 00:30:23,790
has to still be the zeroeth element in

00:30:21,510 --> 00:30:26,460
your return value and then you can

00:30:23,790 --> 00:30:28,260
return a file handle after that and so I

00:30:26,460 --> 00:30:30,480
don't want to prepend anything to what

00:30:28,260 --> 00:30:33,420
I'm returning from my file handle and so

00:30:30,480 --> 00:30:35,700
I'm just taking a reference to an empty

00:30:33,420 --> 00:30:36,720
string and then the next trick I'm doing

00:30:35,700 --> 00:30:39,180
is something that's been around ever

00:30:36,720 --> 00:30:41,070
since I think Perl 5 6 which is I'm just

00:30:39,180 --> 00:30:43,530
opening a file handle to an in-memory

00:30:41,070 --> 00:30:46,260
scaler anyway because I just want to

00:30:43,530 --> 00:30:48,420
demonstrate in one slide how we can use

00:30:46,260 --> 00:30:50,760
a file handle that file handle gets

00:30:48,420 --> 00:30:53,770
returned internally Perl go ahead goes

00:30:50,760 --> 00:30:56,530
ahead and read package fubar sub foo

00:30:53,770 --> 00:30:58,300
one and turns that into a module and

00:30:56,530 --> 00:31:00,100
then we can go ahead and invoke the

00:30:58,300 --> 00:31:02,440
method down at the bottom there foo bar

00:31:00,100 --> 00:31:05,220
foo and again I copied the same slide

00:31:02,440 --> 00:31:07,660
because it works the same way as before

00:31:05,220 --> 00:31:12,550
and so now let's try returning a

00:31:07,660 --> 00:31:15,010
subroutine so in this case once again we

00:31:12,550 --> 00:31:16,630
still have to return a reference to a

00:31:15,010 --> 00:31:18,250
string and once again I don't really

00:31:16,630 --> 00:31:20,200
feel like I want to pretend anything

00:31:18,250 --> 00:31:22,060
because I have total control anyway at

00:31:20,200 --> 00:31:26,350
this point and now I'm going to return a

00:31:22,060 --> 00:31:30,250
subroutine and and that subroutine is

00:31:26,350 --> 00:31:31,630
going to return is going to each time

00:31:30,250 --> 00:31:34,780
you call it it's going to shift an

00:31:31,630 --> 00:31:37,090
element off of code off of my code and

00:31:34,780 --> 00:31:41,740
that will go ahead and populate out the

00:31:37,090 --> 00:31:43,390
the module that we want to load so as

00:31:41,740 --> 00:31:45,280
long as there's something still in code

00:31:43,390 --> 00:31:47,200
it's going to keep shifting something

00:31:45,280 --> 00:31:50,650
off and then at the end it has to return

00:31:47,200 --> 00:31:52,900
a false value the interesting thing here

00:31:50,650 --> 00:31:54,730
is that we have to populate dollar

00:31:52,900 --> 00:31:57,070
underscore with the line of code that

00:31:54,730 --> 00:31:59,290
we're shifting off and we have to return

00:31:57,070 --> 00:32:00,730
a true value to say that there was

00:31:59,290 --> 00:32:03,730
something shifted off or there's

00:32:00,730 --> 00:32:06,100
something that there's still more code

00:32:03,730 --> 00:32:10,200
to read and then when we're all done

00:32:06,100 --> 00:32:10,200
then we return a zero or a false value

00:32:10,290 --> 00:32:19,330
that kind of unclear it took a lot of

00:32:15,490 --> 00:32:21,700
fiddling to figure some of this out and

00:32:19,330 --> 00:32:24,100
again I was able to copy the same slide

00:32:21,700 --> 00:32:27,400
from before because it still works we're

00:32:24,100 --> 00:32:29,320
still able to use foo bar and use that

00:32:27,400 --> 00:32:30,730
subroutine oh and in this case what it's

00:32:29,320 --> 00:32:32,560
ended up doing is each time

00:32:30,730 --> 00:32:34,900
Pearl internally calls this subroutine

00:32:32,560 --> 00:32:37,060
it shifts another line off of my code

00:32:34,900 --> 00:32:41,440
array and uses that to populate out the

00:32:37,060 --> 00:32:43,900
module so that seems to have worked

00:32:41,440 --> 00:32:49,870
once again and again we're not going to

00:32:43,900 --> 00:32:51,670
get into array reps and objects because

00:32:49,870 --> 00:32:53,590
I can't really think of a great use

00:32:51,670 --> 00:32:55,390
somebody probably has a great use and

00:32:53,590 --> 00:32:56,980
I'd love to hear about it someday and

00:32:55,390 --> 00:33:00,400
they're kind of they're even harder to

00:32:56,980 --> 00:33:01,150
use so a quick recap modules load paths

00:33:00,400 --> 00:33:03,940
from

00:33:01,150 --> 00:33:06,370
paths containing ink todd is dangerous

00:33:03,940 --> 00:33:07,149
percent ink can tell us where we found a

00:33:06,370 --> 00:33:09,309
loaded module

00:33:07,149 --> 00:33:11,229
presenting can trick pearl into thinking

00:33:09,309 --> 00:33:12,849
that a module has been loaded and that's

00:33:11,229 --> 00:33:14,409
all boring by comparison to pushing a

00:33:12,849 --> 00:33:16,570
code ref into ink that's a lot more fun

00:33:14,409 --> 00:33:18,309
although maybe not quite so practical so

00:33:16,570 --> 00:33:22,960
now we're going to do something really

00:33:18,309 --> 00:33:27,299
horrific here it comes

00:33:22,960 --> 00:33:27,299
anybody have a comment question okay

00:33:34,229 --> 00:33:43,599
this is even worse than you think so

00:33:38,499 --> 00:33:46,629
I've made up a little application based

00:33:43,599 --> 00:33:49,359
on four bits of code one of them is

00:33:46,629 --> 00:33:50,889
called module server and what module

00:33:49,359 --> 00:33:53,080
server is going to do is anytime I give

00:33:50,889 --> 00:33:58,269
it a module name it looks in a path

00:33:53,080 --> 00:34:00,129
called elf /lib and it loads the actual

00:33:58,269 --> 00:34:03,099
text of whatever module it finds there

00:34:00,129 --> 00:34:04,839
that you've asked for pretty risky

00:34:03,099 --> 00:34:06,879
pretty dangerous pretty impractical and

00:34:04,839 --> 00:34:08,889
it doesn't deal with like if you have

00:34:06,879 --> 00:34:10,750
excess code or code that's customized

00:34:08,889 --> 00:34:12,339
for a specific environment it's not

00:34:10,750 --> 00:34:13,779
going to be tolerant of any of that sort

00:34:12,339 --> 00:34:18,039
of thing it's just a proof of concept

00:34:13,779 --> 00:34:20,470
right net loader so let's talk about bin

00:34:18,039 --> 00:34:23,260
lid server TL that happens to be a

00:34:20,470 --> 00:34:27,010
little mojolicious script that run that

00:34:23,260 --> 00:34:31,690
uses module server as its model and you

00:34:27,010 --> 00:34:34,450
can now load using using this little

00:34:31,690 --> 00:34:36,099
mojolicious applet the code for a module

00:34:34,450 --> 00:34:38,169
and so let's go ahead and do that if I

00:34:36,099 --> 00:34:41,919
can find which of my many screens I've

00:34:38,169 --> 00:34:45,129
got it on here we go you can see I'm

00:34:41,919 --> 00:34:50,190
only going to hit localhost but I'm

00:34:45,129 --> 00:34:50,190
asking for foo bar as the

00:34:51,869 --> 00:34:56,190
this is over no just kidding okay

00:34:54,210 --> 00:34:57,829
package fubar used to accuse warnings

00:34:56,190 --> 00:35:01,049
because we don't want to be unsafe do we

00:34:57,829 --> 00:35:13,859
and we're going to return a version of

00:35:01,049 --> 00:35:16,710
42 because so sorry now we're going to

00:35:13,859 --> 00:35:19,380
have a module called net loader which

00:35:16,710 --> 00:35:23,789
uses little HTTP tiny thing to do get

00:35:19,380 --> 00:35:26,249
requests against against bin lid server

00:35:23,789 --> 00:35:29,549
dot PL and then we have a script called

00:35:26,249 --> 00:35:35,390
dot HTTP mod PL which is going to use

00:35:29,549 --> 00:35:35,390
net loader to load our module from

00:35:35,450 --> 00:35:41,359
remotely so let's see if we can find

00:35:37,589 --> 00:35:44,480
where everything is so here's my little

00:35:41,359 --> 00:35:47,069
my little app my little server running

00:35:44,480 --> 00:35:50,160
doing get requests and I tested it out a

00:35:47,069 --> 00:35:53,160
little bit while ago here is module

00:35:50,160 --> 00:35:56,819
server and this is very dumb code that's

00:35:53,160 --> 00:35:58,920
pretty boring it just finds the finds

00:35:56,819 --> 00:36:01,380
the module based on its based on its

00:35:58,920 --> 00:36:04,109
module name and it's going to be looking

00:36:01,380 --> 00:36:08,670
in home Dee Oswald scripts slash alt /

00:36:04,109 --> 00:36:11,430
Lib because I'm in control of that here

00:36:08,670 --> 00:36:13,799
is net loader and this is using HTTP

00:36:11,430 --> 00:36:17,700
tiny and it's going to do get requests

00:36:13,799 --> 00:36:19,380
and then it's going to go ahead and see

00:36:17,700 --> 00:36:24,960
that sub load there was we're pushing

00:36:19,380 --> 00:36:33,119
sub loading - Inc and then somewhere

00:36:24,960 --> 00:36:34,859
else here we are now we have now we have

00:36:33,119 --> 00:36:36,539
a script that's using net loader and

00:36:34,859 --> 00:36:40,349
then the very next thing that it uses is

00:36:36,539 --> 00:36:42,420
foo bar and it's going to tell us where

00:36:40,349 --> 00:36:45,480
we get foo bar from and then it's going

00:36:42,420 --> 00:36:48,779
to tell us the version of foo bar and so

00:36:45,480 --> 00:36:50,789
here we go I'm going to run it and if

00:36:48,779 --> 00:36:53,700
everything's still working then we get

00:36:50,789 --> 00:36:57,660
module version is 42 so we just did

00:36:53,700 --> 00:37:00,450
something terribly risky and awful in

00:36:57,660 --> 00:37:02,160
every way so if they have any possible

00:37:00,450 --> 00:37:04,319
uses I don't really know you could

00:37:02,160 --> 00:37:05,270
maintain a mini Sipan you would have to

00:37:04,319 --> 00:37:08,810
have everyone

00:37:05,270 --> 00:37:13,310
of your items in that repository signed

00:37:08,810 --> 00:37:16,760
with a with some sort of a hash and then

00:37:13,310 --> 00:37:18,650
you could use code injection into ink to

00:37:16,760 --> 00:37:21,230
go ahead and install lazily install

00:37:18,650 --> 00:37:22,340
dependencies the applicant the

00:37:21,230 --> 00:37:22,850
application would never know the

00:37:22,340 --> 00:37:40,610
difference

00:37:22,850 --> 00:37:44,140
yeah go ahead there you go thank you we

00:37:40,610 --> 00:37:46,280
should have you given a talk yes yes oh

00:37:44,140 --> 00:37:49,280
so the question it wasn't really a

00:37:46,280 --> 00:37:52,190
question was he has a he has a module

00:37:49,280 --> 00:37:55,880
what was it called again object remote

00:37:52,190 --> 00:37:59,930
which essentially does this in a secure

00:37:55,880 --> 00:38:02,360
and sane and yeah well he's giving us

00:37:59,930 --> 00:38:05,600
the maybe yeah yeah so if we don't have

00:38:02,360 --> 00:38:09,320
full buy in there either but so it is a

00:38:05,600 --> 00:38:10,730
thing and the application never knows

00:38:09,320 --> 00:38:12,860
the difference other than the fact that

00:38:10,730 --> 00:38:15,230
the end user sees a lag well some up

00:38:12,860 --> 00:38:17,870
while some module gets gets pulled in

00:38:15,230 --> 00:38:27,140
over HTTP or over some other connection

00:38:17,870 --> 00:38:29,060
and and built out and deployed yes so

00:38:27,140 --> 00:38:34,310
it's a spiritual covenant cousin of

00:38:29,060 --> 00:38:44,960
Java's network class loader Thank You

00:38:34,310 --> 00:38:46,460
Randall yes but that would have been if

00:38:44,960 --> 00:38:48,590
I'd had one more day on this talk that

00:38:46,460 --> 00:38:50,000
would have been because that was that

00:38:48,590 --> 00:38:52,280
was on my mind the other thing that was

00:38:50,000 --> 00:38:54,290
on my mind is why not deploy and run

00:38:52,280 --> 00:38:56,120
directly from github because there we

00:38:54,290 --> 00:38:58,250
know the blobs right we know the blob

00:38:56,120 --> 00:39:00,740
IDs we can do some sanity checking we're

00:38:58,250 --> 00:39:07,670
using SSH maybe to retrieve the module

00:39:00,740 --> 00:39:09,800
why not right it's possible so or how

00:39:07,670 --> 00:39:11,240
about catch all your servers on fire and

00:39:09,800 --> 00:39:13,280
start an incident for which there's no

00:39:11,240 --> 00:39:16,820
hope of sis ops forgiveness

00:39:13,280 --> 00:39:19,400
and that's that so further reading on

00:39:16,820 --> 00:39:23,990
all of this product Pearl var is very

00:39:19,400 --> 00:39:27,140
useful for a 10% ink product pearl 5 to

00:39:23,990 --> 00:39:31,880
4 1 Delta this is an explanation of dot

00:39:27,140 --> 00:39:34,820
in ink mitigation techniques pearl 5 to

00:39:31,880 --> 00:39:39,040
6 so Delta is an explanation of the

00:39:34,820 --> 00:39:42,320
security implications of dot in ink

00:39:39,040 --> 00:39:44,600
product type and F require is an

00:39:42,320 --> 00:39:46,580
explanation of pushing code into ink and

00:39:44,600 --> 00:39:48,110
if I have some time after this

00:39:46,580 --> 00:39:52,280
conference I might try to push a couple

00:39:48,110 --> 00:39:53,750
doc patches out because just based on

00:39:52,280 --> 00:39:56,780
the things that I've learned by

00:39:53,750 --> 00:39:58,430
investigating this and that's that's all

00:39:56,780 --> 00:40:00,890
I have so you know may-maybe you may now

00:39:58,430 --> 00:40:04,540
proceed to the exit before your servers

00:40:00,890 --> 00:40:07,280
catch on fire any questions comments

00:40:04,540 --> 00:40:08,510
well thank you oh yes go ahead no you're

00:40:07,280 --> 00:40:09,430
going to clap yeah thank you

00:40:08,510 --> 00:40:15,460
[Music]

00:40:09,430 --> 00:40:15,460

YouTube URL: https://www.youtube.com/watch?v=4ZUFXHsjwDs


