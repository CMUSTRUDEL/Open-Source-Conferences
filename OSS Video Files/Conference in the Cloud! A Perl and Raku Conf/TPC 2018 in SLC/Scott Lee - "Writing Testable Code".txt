Title: Scott Lee - "Writing Testable Code"
Publication date: 2018-06-20
Playlist: TPC 2018 in SLC
Description: 
	Writing tests is easy — as long as the code is designed to be testable. If your code is hard to test then this presentation will help you see a better way to write that code. More than a check list of dos and don’ts, we will focus on how to change the way you think about programming. The goal is to help you understand why and how tests help you write better code and do it faster. This will improve not only your tests, but your code and your documentation as well.
Captions: 
	00:00:00,030 --> 00:00:07,410
so my name is Scott Lee I've been

00:00:03,810 --> 00:00:09,360
working in pearl for 20-plus years I've

00:00:07,410 --> 00:00:13,230
been interested in in testing issues

00:00:09,360 --> 00:00:15,389
since before that I've done a fair

00:00:13,230 --> 00:00:18,539
amount of consulting work and seen a lot

00:00:15,389 --> 00:00:20,910
of companies and seen a lot of good

00:00:18,539 --> 00:00:23,400
testing and a lot of not so good testing

00:00:20,910 --> 00:00:25,890
and and tried to observe well what's the

00:00:23,400 --> 00:00:27,210
difference and why what makes what makes

00:00:25,890 --> 00:00:30,359
a good testing and what makes bad

00:00:27,210 --> 00:00:32,219
testing and and try to figure out some

00:00:30,359 --> 00:00:35,579
patterns and and so that's what I'm

00:00:32,219 --> 00:00:38,070
going to talk about here is how do you

00:00:35,579 --> 00:00:39,750
how do you write testable code how do

00:00:38,070 --> 00:00:41,879
you how do you make that work how do you

00:00:39,750 --> 00:00:47,489
make your code so that it can be easily

00:00:41,879 --> 00:00:51,870
tested so first of all I like to say

00:00:47,489 --> 00:00:54,600
that writing tests is easy it really

00:00:51,870 --> 00:00:57,449
isn't hard to write a test as long as

00:00:54,600 --> 00:01:00,420
the code is testable so what does that

00:00:57,449 --> 00:01:02,730
mean what makes code testable how is how

00:01:00,420 --> 00:01:05,159
is it different from code that's hard to

00:01:02,730 --> 00:01:06,930
test and so that's something I've been

00:01:05,159 --> 00:01:09,570
focusing on for many years trying to

00:01:06,930 --> 00:01:15,630
understand that is what makes code easy

00:01:09,570 --> 00:01:18,900
or hard to test and another question is

00:01:15,630 --> 00:01:22,290
why I mean hey you know we're a bunch of

00:01:18,900 --> 00:01:24,330
geeks we like writing code writing tests

00:01:22,290 --> 00:01:25,439
is just kind of an annoyance is it

00:01:24,330 --> 00:01:27,299
really that important

00:01:25,439 --> 00:01:29,520
I mean is it important to even document

00:01:27,299 --> 00:01:32,610
your code I mean really it just kind of

00:01:29,520 --> 00:01:34,259
gets in the way so why do you do this I

00:01:32,610 --> 00:01:39,270
mean everybody tells it's a good thing

00:01:34,259 --> 00:01:41,189
why do we do this well initially having

00:01:39,270 --> 00:01:43,619
a good test suite gives you confidence

00:01:41,189 --> 00:01:44,700
that your implementation is right you

00:01:43,619 --> 00:01:47,009
know when you're first writing the code

00:01:44,700 --> 00:01:49,380
the initial benefit of that is hey I

00:01:47,009 --> 00:01:51,270
know that my code passes all these tests

00:01:49,380 --> 00:01:52,110
I have a fair level of confidence that

00:01:51,270 --> 00:01:53,820
it's right

00:01:52,110 --> 00:01:56,399
no there's probably still some bugs in

00:01:53,820 --> 00:01:58,469
it but maybe it's not as buggy as had I

00:01:56,399 --> 00:02:01,409
not written those tests so that's the

00:01:58,469 --> 00:02:02,939
initial benefit then the ongoing benefit

00:02:01,409 --> 00:02:05,520
is that you come back later

00:02:02,939 --> 00:02:09,780
and you or someone else needs to fix a

00:02:05,520 --> 00:02:12,010
bug and how many of you fixed a bug and

00:02:09,780 --> 00:02:14,470
in the process introduced another bug

00:02:12,010 --> 00:02:15,970
let's see some hands okay and all the

00:02:14,470 --> 00:02:17,290
hands that aren't up well they should be

00:02:15,970 --> 00:02:20,379
up because though we've all done that I

00:02:17,290 --> 00:02:22,420
mean come on you're right you go fix a

00:02:20,379 --> 00:02:24,159
bug and you end up introducing a new bug

00:02:22,420 --> 00:02:27,610
in the process but if you have a good

00:02:24,159 --> 00:02:29,709
test suite maybe that bug will get

00:02:27,610 --> 00:02:31,330
caught not all the time

00:02:29,709 --> 00:02:33,940
but if it's a good test suite there's a

00:02:31,330 --> 00:02:35,799
good chance that that that secondary bug

00:02:33,940 --> 00:02:38,769
doesn't make it into production because

00:02:35,799 --> 00:02:40,980
it's caught right up front same thing if

00:02:38,769 --> 00:02:43,060
you're adding new features or just

00:02:40,980 --> 00:02:44,560
reimplemented maybe you're trying to

00:02:43,060 --> 00:02:45,849
make some performance improvements or

00:02:44,560 --> 00:02:49,420
whatever and you're making some changes

00:02:45,849 --> 00:02:51,370
of the code same thing you you're adding

00:02:49,420 --> 00:02:53,980
this new feature and in the process you

00:02:51,370 --> 00:02:56,260
introduced five new bugs well with a

00:02:53,980 --> 00:02:57,670
good test suite you're probably going to

00:02:56,260 --> 00:03:00,040
catch at least some if not all of those

00:02:57,670 --> 00:03:02,650
upfront so those are the ongoing

00:03:00,040 --> 00:03:04,540
benefits and long term if you look at

00:03:02,650 --> 00:03:06,129
the benefits over the life of that

00:03:04,540 --> 00:03:08,500
software of having the test suite

00:03:06,129 --> 00:03:11,500
written quality software or quality

00:03:08,500 --> 00:03:13,750
testing upfront it actually saves time

00:03:11,500 --> 00:03:15,970
over the life of the product because of

00:03:13,750 --> 00:03:19,450
the time it takes it saves you in the

00:03:15,970 --> 00:03:21,519
process of fixing bugs and adding new

00:03:19,450 --> 00:03:22,959
features and whatever the net effect is

00:03:21,519 --> 00:03:25,599
that it's going to actually save you

00:03:22,959 --> 00:03:27,359
time and my personal opinion is that it

00:03:25,599 --> 00:03:30,340
probably saves you time even upfront

00:03:27,359 --> 00:03:33,340
even just that that initial benefit of

00:03:30,340 --> 00:03:35,950
having that confidence up front allows

00:03:33,340 --> 00:03:38,440
me to actually write the software faster

00:03:35,950 --> 00:03:40,930
in my opinion it's actually faster to

00:03:38,440 --> 00:03:43,840
write the software upfront by doing the

00:03:40,930 --> 00:03:47,169
testing along with it so that's what

00:03:43,840 --> 00:03:50,319
we're going to talk about here so the

00:03:47,169 --> 00:03:52,450
next important concept here is black box

00:03:50,319 --> 00:03:54,310
versus white box and you probably all

00:03:52,450 --> 00:03:56,769
know what black box versus white box is

00:03:54,310 --> 00:03:58,150
but black box basically means that if

00:03:56,769 --> 00:04:00,040
the test written from the point of view

00:03:58,150 --> 00:04:02,859
of someone that doesn't understand how

00:04:00,040 --> 00:04:04,329
the code works just how to use the code

00:04:02,859 --> 00:04:06,160
so you understand the interface you know

00:04:04,329 --> 00:04:08,739
what the inputs are what the outputs are

00:04:06,160 --> 00:04:11,500
supposed to be and you write a test to

00:04:08,739 --> 00:04:13,269
verify that that happens white box

00:04:11,500 --> 00:04:14,349
testing is kind of the other side it's

00:04:13,269 --> 00:04:16,150
written from the point of view of

00:04:14,349 --> 00:04:19,690
someone that understands the internals

00:04:16,150 --> 00:04:21,760
of the code how does the code work what

00:04:19,690 --> 00:04:22,049
algorithms are using what how loops are

00:04:21,760 --> 00:04:23,940
going

00:04:22,049 --> 00:04:26,310
what kind of stuffs happening behind the

00:04:23,940 --> 00:04:27,960
scenes and you test things that wouldn't

00:04:26,310 --> 00:04:29,490
be obvious to the black box tester

00:04:27,960 --> 00:04:32,639
because they don't understand how the

00:04:29,490 --> 00:04:34,740
thing works so the white box testing is

00:04:32,639 --> 00:04:37,800
is important to catch those kinds of

00:04:34,740 --> 00:04:40,289
bugs but as we'll see these are two

00:04:37,800 --> 00:04:41,490
separate things and you need to separate

00:04:40,289 --> 00:04:44,789
them and we'll talk more about that

00:04:41,490 --> 00:04:46,919
later so when you're reimplemented

00:04:44,789 --> 00:04:50,069
something you're fixing a bug you're

00:04:46,919 --> 00:04:53,280
adding a new feature what happens if a

00:04:50,069 --> 00:04:55,349
white box test fails is that it's a kind

00:04:53,280 --> 00:04:57,690
of expected you're changing the

00:04:55,349 --> 00:04:59,669
algorithm and this white box test

00:04:57,690 --> 00:05:00,449
doesn't pass anymore well that's that's

00:04:59,669 --> 00:05:02,430
expected

00:05:00,449 --> 00:05:06,090
you just expect that to happen you go

00:05:02,430 --> 00:05:10,370
fix the white box test but what if the

00:05:06,090 --> 00:05:12,599
black box test fails what does that mean

00:05:10,370 --> 00:05:14,190
that means you've probably introduced a

00:05:12,599 --> 00:05:17,250
bug that's going to cause backward

00:05:14,190 --> 00:05:20,340
compatibility problems because the black

00:05:17,250 --> 00:05:23,039
box test verifies that your interface

00:05:20,340 --> 00:05:24,659
has not changed that you've not changed

00:05:23,039 --> 00:05:27,599
the meanings of the inputs or the kind

00:05:24,659 --> 00:05:30,539
of output that you produce so when

00:05:27,599 --> 00:05:32,909
you're fixing a bug or adding a new

00:05:30,539 --> 00:05:35,460
feature or whatever if a black box test

00:05:32,909 --> 00:05:37,710
fails that's a red flag that you've got

00:05:35,460 --> 00:05:39,719
probably got a problem unless you're

00:05:37,710 --> 00:05:41,520
intending to introduce a change that you

00:05:39,719 --> 00:05:47,990
know is backward compatible you should

00:05:41,520 --> 00:05:51,930
not have any black box tests fail so

00:05:47,990 --> 00:05:53,699
we're all programmers we probably don't

00:05:51,930 --> 00:05:55,409
have a testing group now some of you may

00:05:53,699 --> 00:05:57,840
have a testing group that writes your

00:05:55,409 --> 00:05:59,340
black box test for you but most of the

00:05:57,840 --> 00:06:03,509
time you end up having to write your own

00:05:59,340 --> 00:06:06,210
black box tests as well see I wrote this

00:06:03,509 --> 00:06:08,009
code I know how it works inside how can

00:06:06,210 --> 00:06:09,000
I write a black box test from the point

00:06:08,009 --> 00:06:11,750
of view that somebody that doesn't

00:06:09,000 --> 00:06:14,669
understand how it works that's difficult

00:06:11,750 --> 00:06:17,400
but it's important because having those

00:06:14,669 --> 00:06:20,729
black box tests tells you when you've

00:06:17,400 --> 00:06:22,529
broken back with compatibility it's okay

00:06:20,729 --> 00:06:24,870
to break a white box test it's not okay

00:06:22,529 --> 00:06:26,669
to black break the black box test so

00:06:24,870 --> 00:06:28,229
they have to be separate you have to

00:06:26,669 --> 00:06:31,860
make sure that you keep them distinct

00:06:28,229 --> 00:06:32,669
and so how do you do that so that's one

00:06:31,860 --> 00:06:34,780
of the things we're going to talk about

00:06:32,669 --> 00:06:38,380
here is is how a process

00:06:34,780 --> 00:06:41,050
for building a blackbox test suite even

00:06:38,380 --> 00:06:44,640
though you understand the code and the

00:06:41,050 --> 00:06:44,640
key to it is documentation

00:06:47,340 --> 00:06:52,630
so if you write documentation that

00:06:50,200 --> 00:06:54,640
defines your interface what are the

00:06:52,630 --> 00:06:58,300
inputs what are the outputs what

00:06:54,640 --> 00:07:00,040
exceptions all the side effects make

00:06:58,300 --> 00:07:02,940
sure you thoroughly document exactly

00:07:00,040 --> 00:07:05,170
what is the interface to your software

00:07:02,940 --> 00:07:07,900
then you take that Soph that that

00:07:05,170 --> 00:07:10,540
documentation and you go through and you

00:07:07,900 --> 00:07:13,150
make a checklist of every claim that you

00:07:10,540 --> 00:07:14,860
make in that documentation if you say

00:07:13,150 --> 00:07:16,870
that well this needs to be an integer in

00:07:14,860 --> 00:07:18,190
such a such range and that the output is

00:07:16,870 --> 00:07:21,010
going to be this every one of those

00:07:18,190 --> 00:07:24,280
claims that you make it needs to go on a

00:07:21,010 --> 00:07:28,000
checklist and that checklist drives your

00:07:24,280 --> 00:07:29,740
blackbox test so that's how you do it

00:07:28,000 --> 00:07:31,960
you simply write the documentation

00:07:29,740 --> 00:07:34,840
explaining how your software works from

00:07:31,960 --> 00:07:36,460
the point of view of the user you don't

00:07:34,840 --> 00:07:38,350
you're not explaining how it does it not

00:07:36,460 --> 00:07:40,990
while I use this loop Nara you don't say

00:07:38,350 --> 00:07:42,490
that you say here's how you use it

00:07:40,990 --> 00:07:44,800
here's how you call it here's what

00:07:42,490 --> 00:07:46,870
you'll get back from it and from that

00:07:44,800 --> 00:07:49,840
documentation you make your checklist

00:07:46,870 --> 00:07:51,010
that then dries the black box itself for

00:07:49,840 --> 00:07:51,610
every one of those items in the

00:07:51,010 --> 00:07:54,220
checklist

00:07:51,610 --> 00:07:58,150
you write a test in the black box to

00:07:54,220 --> 00:08:00,250
verify that that is true so that's how

00:07:58,150 --> 00:08:02,110
you create a black box test even though

00:08:00,250 --> 00:08:04,390
you know how the thing is implemented

00:08:02,110 --> 00:08:08,820
inside and make sure that did your black

00:08:04,390 --> 00:08:08,820
box test isn't testing white box items

00:08:12,760 --> 00:08:18,800
okay so one of the things that that I

00:08:15,260 --> 00:08:21,140
like to do is to keep the documentation

00:08:18,800 --> 00:08:22,880
separate because remember the user

00:08:21,140 --> 00:08:26,690
documentation it drives your checklist

00:08:22,880 --> 00:08:29,120
which drives the black box the you also

00:08:26,690 --> 00:08:31,670
need to document how the thing works the

00:08:29,120 --> 00:08:33,580
the implementation the details and so

00:08:31,670 --> 00:08:37,430
the way I like to separate that is pod

00:08:33,580 --> 00:08:41,600
is the definition is the documentation

00:08:37,430 --> 00:08:44,360
for the user comments are the comments

00:08:41,600 --> 00:08:46,670
the documentation for someone that's

00:08:44,360 --> 00:08:49,130
working on your code so the white box

00:08:46,670 --> 00:08:51,350
related kinds of things are in comments

00:08:49,130 --> 00:08:53,710
the pod is exclusively user

00:08:51,350 --> 00:08:57,140
documentation so I never put

00:08:53,710 --> 00:08:59,570
implementation details in my pod those

00:08:57,140 --> 00:09:01,490
go in comments in the code because I

00:08:59,570 --> 00:09:03,380
really don't even want my users to know

00:09:01,490 --> 00:09:05,360
what the implementation is because that

00:09:03,380 --> 00:09:07,400
may change I may decide later that oh

00:09:05,360 --> 00:09:09,770
this doesn't perform well and I need to

00:09:07,400 --> 00:09:11,780
change my algorithm inside as long as I

00:09:09,770 --> 00:09:13,520
don't change my interface that's okay I

00:09:11,780 --> 00:09:15,910
want to be able to change that inner

00:09:13,520 --> 00:09:19,550
that that internal implementation and

00:09:15,910 --> 00:09:21,380
not affect my users because I don't want

00:09:19,550 --> 00:09:28,220
them to even know what that is so that

00:09:21,380 --> 00:09:31,190
they don't depend on those things so I

00:09:28,220 --> 00:09:34,550
have what I call the the interface

00:09:31,190 --> 00:09:36,590
contract so I this pod the documentation

00:09:34,550 --> 00:09:38,150
of your interface is really a contract

00:09:36,590 --> 00:09:40,790
that you have with your user that says

00:09:38,150 --> 00:09:43,910
if you give me this I guarantee I will

00:09:40,790 --> 00:09:45,980
give you that hey there's no

00:09:43,910 --> 00:09:47,330
implementation detail here I'm not

00:09:45,980 --> 00:09:49,400
telling you how I'm going to give that

00:09:47,330 --> 00:09:52,100
to you but this is what I will give you

00:09:49,400 --> 00:09:54,230
and I write that very precisely and make

00:09:52,100 --> 00:09:56,750
sure that I'm thorough I cover all the

00:09:54,230 --> 00:09:58,820
inputs all the side effects if I'm

00:09:56,750 --> 00:10:01,100
returning a list do I guarantee it to be

00:09:58,820 --> 00:10:04,430
in any particular order all the details

00:10:01,100 --> 00:10:08,300
that the user needs to know about how to

00:10:04,430 --> 00:10:10,520
use my software I enumerate all those

00:10:08,300 --> 00:10:15,700
claims that I make those then drive my

00:10:10,520 --> 00:10:17,690
tests so this improves my documentation

00:10:15,700 --> 00:10:19,280
obviously if I have to be that thorough

00:10:17,690 --> 00:10:21,860
and writing the documentation I'm going

00:10:19,280 --> 00:10:23,510
to have better documentation I'm going

00:10:21,860 --> 00:10:24,000
to have better tests as a result of it

00:10:23,510 --> 00:10:26,300
because the

00:10:24,000 --> 00:10:34,770
documentation is now driving my tests

00:10:26,300 --> 00:10:38,210
and it will also make my code better so

00:10:34,770 --> 00:10:41,430
the user should not be reading my code

00:10:38,210 --> 00:10:44,340
my pod should be sufficient for them to

00:10:41,430 --> 00:10:46,740
know how to use my module or whatever it

00:10:44,340 --> 00:10:48,570
is they should not be looking at Micah I

00:10:46,740 --> 00:10:52,710
really don't want them to look at my

00:10:48,570 --> 00:10:55,020
code why do I not want them to look at

00:10:52,710 --> 00:10:57,680
the code what what is the disadvantage

00:10:55,020 --> 00:11:03,690
of your user looking at your code

00:10:57,680 --> 00:11:05,730
anybody but part of they now they know

00:11:03,690 --> 00:11:07,950
them they know the implementation and

00:11:05,730 --> 00:11:09,720
they may depend on something that I did

00:11:07,950 --> 00:11:15,000
in that implementation that I didn't

00:11:09,720 --> 00:11:16,980
intend to be a permanent thing breaks

00:11:15,000 --> 00:11:18,360
the abstraction right you really don't

00:11:16,980 --> 00:11:20,090
want them to understand the

00:11:18,360 --> 00:11:23,250
implementation because that may change

00:11:20,090 --> 00:11:24,810
okay so you want to keep that separate

00:11:23,250 --> 00:11:26,700
your comments are your internal

00:11:24,810 --> 00:11:28,110
documentation or someone working on the

00:11:26,700 --> 00:11:29,610
code it's right there next to the code

00:11:28,110 --> 00:11:33,990
that's the appropriate place for those

00:11:29,610 --> 00:11:36,300
comments the pod is for the user okay so

00:11:33,990 --> 00:11:38,670
you don't want your user looking at your

00:11:36,300 --> 00:11:40,560
code and if you don't write sufficient

00:11:38,670 --> 00:11:41,820
pod you're going to force them to go

00:11:40,560 --> 00:11:44,850
look at your code to figure out how to

00:11:41,820 --> 00:11:49,470
use your code and that's bad you don't

00:11:44,850 --> 00:11:50,970
want that so I've basically already

00:11:49,470 --> 00:11:53,850
covered this is that you're going to

00:11:50,970 --> 00:11:56,970
force the user to basically use

00:11:53,850 --> 00:11:59,460
undocumented or unintended features so

00:11:56,970 --> 00:12:01,410
for example simple example is you return

00:11:59,460 --> 00:12:03,450
this list and because of your

00:12:01,410 --> 00:12:05,550
implementation you return it in some

00:12:03,450 --> 00:12:07,110
particular order and the user is looking

00:12:05,550 --> 00:12:08,460
at your code and I see oh you returned

00:12:07,110 --> 00:12:10,380
this in this order that's great that's

00:12:08,460 --> 00:12:13,080
perfect that's the order I need and they

00:12:10,380 --> 00:12:14,850
depend on that order but you didn't

00:12:13,080 --> 00:12:16,920
intend that and then a couple of months

00:12:14,850 --> 00:12:18,660
later you go fix a bug and you change

00:12:16,920 --> 00:12:20,150
the way you generate that list and now

00:12:18,660 --> 00:12:23,280
it comes out in a different order and

00:12:20,150 --> 00:12:25,589
you've broken their code because they're

00:12:23,280 --> 00:12:27,150
depending on a feature that you didn't

00:12:25,589 --> 00:12:29,100
document you didn't intend to be a

00:12:27,150 --> 00:12:32,580
feature but they're depending on it

00:12:29,100 --> 00:12:34,589
because they looked at your code so this

00:12:32,580 --> 00:12:36,700
is why you don't want users having to

00:12:34,589 --> 00:12:41,290
resort to your source code you

00:12:36,700 --> 00:12:43,720
documentation needs to be sufficient so

00:12:41,290 --> 00:12:46,240
touched on this earlier but when you're

00:12:43,720 --> 00:12:48,370
fixing bugs adding new features it's

00:12:46,240 --> 00:12:49,990
okay to break the white box test and you

00:12:48,370 --> 00:12:52,420
go fix the test to match the new

00:12:49,990 --> 00:12:55,060
implementation but if a black box test

00:12:52,420 --> 00:12:57,730
fails that's a red flag you probably

00:12:55,060 --> 00:12:59,410
have a problem you don't want your black

00:12:57,730 --> 00:13:01,720
box test to fail you should write them

00:12:59,410 --> 00:13:04,780
upfront and you should never change

00:13:01,720 --> 00:13:06,940
those tests now you may write new black

00:13:04,780 --> 00:13:08,980
box tests because of new features you've

00:13:06,940 --> 00:13:12,040
added but you should not be changing the

00:13:08,980 --> 00:13:18,940
existing black box tests this is how you

00:13:12,040 --> 00:13:21,600
guarantee backward compatibility so when

00:13:18,940 --> 00:13:23,860
do you write your test and documentation

00:13:21,600 --> 00:13:26,380
maybe you're right your your all of your

00:13:23,860 --> 00:13:31,810
documentation and tests upfront I do

00:13:26,380 --> 00:13:34,050
that sometimes not that often more often

00:13:31,810 --> 00:13:36,010
it's more of a case of kind of

00:13:34,050 --> 00:13:37,420
intermingled with the code I'll write a

00:13:36,010 --> 00:13:39,430
little code or write a little bit of

00:13:37,420 --> 00:13:42,010
documentation and test write some more

00:13:39,430 --> 00:13:44,320
code kind of back and forth but if

00:13:42,010 --> 00:13:46,120
you're going to write the tests in the

00:13:44,320 --> 00:13:49,180
documentation especially we're going to

00:13:46,120 --> 00:13:52,060
write the tests after the code make sure

00:13:49,180 --> 00:13:54,160
it's soon after and while you're writing

00:13:52,060 --> 00:13:55,510
the code before you assuming you're

00:13:54,160 --> 00:13:58,810
writing it before the test

00:13:55,510 --> 00:14:02,020
think about your test while you're

00:13:58,810 --> 00:14:04,090
writing the code you know if there's one

00:14:02,020 --> 00:14:06,520
concept that you walk away with here

00:14:04,090 --> 00:14:08,680
this is it this is the most important

00:14:06,520 --> 00:14:10,420
thing in my presentation while you're

00:14:08,680 --> 00:14:12,280
writing the code so I mean you're doing

00:14:10,420 --> 00:14:14,530
it before the test while you're writing

00:14:12,280 --> 00:14:18,330
that code think about how you're going

00:14:14,530 --> 00:14:20,800
to test it if you just do that

00:14:18,330 --> 00:14:24,040
you'll find that you will discover

00:14:20,800 --> 00:14:26,110
things on your own that oh gee if I do

00:14:24,040 --> 00:14:30,520
this that's going to be really hard to

00:14:26,110 --> 00:14:33,300
test and you'll end up writing in a

00:14:30,520 --> 00:14:36,400
different way that's easier to test

00:14:33,300 --> 00:14:38,170
okay now the back the second half of the

00:14:36,400 --> 00:14:39,730
presentation I'm going to talk about a

00:14:38,170 --> 00:14:42,040
lot of different techniques of how to

00:14:39,730 --> 00:14:44,560
make your code more testable but I'll

00:14:42,040 --> 00:14:46,210
tell you if you just do this one thing

00:14:44,560 --> 00:14:48,070
think about your test as you're writing

00:14:46,210 --> 00:14:49,550
the code most of these things will just

00:14:48,070 --> 00:14:51,590
become obvious to you you

00:14:49,550 --> 00:14:53,450
discover these things on your own I've

00:14:51,590 --> 00:14:56,930
discovered most of them on my own before

00:14:53,450 --> 00:14:58,640
I read any any academic papers

00:14:56,930 --> 00:15:00,050
discussing various techniques a lot of

00:14:58,640 --> 00:15:02,120
this stuff I just discovered on my own

00:15:00,050 --> 00:15:03,860
because it was obvious to me because I

00:15:02,120 --> 00:15:05,720
was thinking about how I'm going to test

00:15:03,860 --> 00:15:07,160
this and realizing if I do this this is

00:15:05,720 --> 00:15:09,140
going to be awful I'm going to have to

00:15:07,160 --> 00:15:11,510
do these convoluted things in my test oh

00:15:09,140 --> 00:15:14,720
I can pull this out and put it over here

00:15:11,510 --> 00:15:16,760
and now it becomes more testable so

00:15:14,720 --> 00:15:19,670
that's the number one concept think

00:15:16,760 --> 00:15:21,910
about your tests as you're writing that

00:15:19,670 --> 00:15:21,910
code

00:15:25,790 --> 00:15:32,580
we know that when we write code there's

00:15:29,220 --> 00:15:35,570
bugs in their tests well they're just

00:15:32,580 --> 00:15:39,840
code so our tests are going to have bugs

00:15:35,570 --> 00:15:45,570
we need to test our tests think about

00:15:39,840 --> 00:15:47,580
that so what I like to do is go in and

00:15:45,570 --> 00:15:49,560
for example comment a line out from my

00:15:47,580 --> 00:15:52,290
code and verify that now the test fails

00:15:49,560 --> 00:15:54,480
or add something extra in there to cause

00:15:52,290 --> 00:15:57,210
it to do something a little bit wrong

00:15:54,480 --> 00:15:59,480
and verify that yes that test fails and

00:15:57,210 --> 00:16:03,960
I'd make sure that every single test

00:15:59,480 --> 00:16:06,300
fails okay so for example if you write

00:16:03,960 --> 00:16:10,080
your tests upfront before you've written

00:16:06,300 --> 00:16:11,760
the code they better fail if you write

00:16:10,080 --> 00:16:15,620
your tests before the code and it

00:16:11,760 --> 00:16:18,540
doesn't fail you've done something wrong

00:16:15,620 --> 00:16:20,490
okay think about that your tests need to

00:16:18,540 --> 00:16:23,700
fail you need to verify that they will

00:16:20,490 --> 00:16:25,560
fail under the right conditions and it's

00:16:23,700 --> 00:16:27,210
best if you once you finish the project

00:16:25,560 --> 00:16:30,240
go through and make sure that you can

00:16:27,210 --> 00:16:31,560
make every single test fail you'll then

00:16:30,240 --> 00:16:35,160
comment something out add something

00:16:31,560 --> 00:16:37,080
whatever it takes to cause that test

00:16:35,160 --> 00:16:40,740
- now fail and verify that actually does

00:16:37,080 --> 00:16:46,650
catch that and fail so make sure your

00:16:40,740 --> 00:16:50,180
tests are functional and correct okay so

00:16:46,650 --> 00:16:53,790
I think you can see from this that a

00:16:50,180 --> 00:16:55,830
good test suite your documentation in

00:16:53,790 --> 00:16:58,290
your code the quality of those three are

00:16:55,830 --> 00:17:00,390
really very much intertangled you can't

00:16:58,290 --> 00:17:02,460
really write good code without having

00:17:00,390 --> 00:17:07,410
good documentation and good tests

00:17:02,460 --> 00:17:09,209
they're very much intertangled okay so

00:17:07,410 --> 00:17:11,579
the next thing I want to talk about is

00:17:09,209 --> 00:17:14,010
is some techniques I'm show you some

00:17:11,579 --> 00:17:15,990
actual examples of things that will make

00:17:14,010 --> 00:17:17,790
your testing you make your testing

00:17:15,990 --> 00:17:21,810
easier because your code is easier and

00:17:17,790 --> 00:17:23,100
more testable and I did some research on

00:17:21,810 --> 00:17:24,600
the web to try to come up with a

00:17:23,100 --> 00:17:28,260
checklist to make sure I was covering

00:17:24,600 --> 00:17:29,880
everything and I hate this slide there's

00:17:28,260 --> 00:17:34,870
a lot of buzzwords up there a lot of

00:17:29,880 --> 00:17:36,669
stuff law of demeter

00:17:34,870 --> 00:17:38,679
let's call substitution print exactly

00:17:36,669 --> 00:17:40,870
what does this mean I mean I'm not

00:17:38,679 --> 00:17:42,279
saying these are bad ideas if you're

00:17:40,870 --> 00:17:45,460
interested in testing and you want to

00:17:42,279 --> 00:17:47,649
make your code more testable download my

00:17:45,460 --> 00:17:49,659
presentation from the conference website

00:17:47,649 --> 00:17:51,789
go to this this list here's a checklist

00:17:49,659 --> 00:17:53,379
of stuff you should go google and read

00:17:51,789 --> 00:17:55,360
about these things there's excellent

00:17:53,379 --> 00:17:57,610
papers on the web about all these topics

00:17:55,360 --> 00:18:01,179
I strongly recommend that you read those

00:17:57,610 --> 00:18:04,330
those documents those those discussions

00:18:01,179 --> 00:18:06,549
of these topics they're great but I like

00:18:04,330 --> 00:18:08,590
to keep it simple so I'm going to

00:18:06,549 --> 00:18:11,559
discuss not all but many of these

00:18:08,590 --> 00:18:15,759
concepts but in a little bit nicer

00:18:11,559 --> 00:18:20,499
simpler format so my first principle is

00:18:15,759 --> 00:18:22,809
keep it simple if you're having to for

00:18:20,499 --> 00:18:25,629
example go write some tests for somebody

00:18:22,809 --> 00:18:29,799
else's code and you run into this

00:18:25,629 --> 00:18:31,450
thousand line routine how easy is that

00:18:29,799 --> 00:18:34,330
going to be to write a test for that

00:18:31,450 --> 00:18:36,309
that thousand line routine versus maybe

00:18:34,330 --> 00:18:38,110
that same algorithm but broken up into a

00:18:36,309 --> 00:18:39,450
whole bunch of smaller routines which is

00:18:38,110 --> 00:18:41,980
gonna be easier to test

00:18:39,450 --> 00:18:46,320
maybe the thousand line thing was easier

00:18:41,980 --> 00:18:49,119
right maybe it wasn't but the smaller

00:18:46,320 --> 00:18:51,039
multiple modules are functions or

00:18:49,119 --> 00:18:52,509
methods is going to be easier to test

00:18:51,039 --> 00:18:54,490
because it's broken down into smaller

00:18:52,509 --> 00:18:58,960
pieces that you can get in and test each

00:18:54,490 --> 00:19:00,820
one individually okay so that's first

00:18:58,960 --> 00:19:03,279
principle is it's just keep it simple

00:19:00,820 --> 00:19:06,700
and continuing with that idea of keeping

00:19:03,279 --> 00:19:10,749
it simple split out complex decision

00:19:06,700 --> 00:19:12,490
making so let's say you find in this

00:19:10,749 --> 00:19:14,860
thousand line routine there's this block

00:19:12,490 --> 00:19:16,600
of several lines of a bunch of loops

00:19:14,860 --> 00:19:18,580
nested deists and whatever it's a

00:19:16,600 --> 00:19:20,169
complex structure that all it really

00:19:18,580 --> 00:19:22,570
does is it takes some input and it sets

00:19:20,169 --> 00:19:24,039
one variable and then the next thing and

00:19:22,570 --> 00:19:27,429
the thousand line routine is to use that

00:19:24,039 --> 00:19:29,230
variable to do whatever with it what if

00:19:27,429 --> 00:19:31,210
you took that block of code out and made

00:19:29,230 --> 00:19:33,759
it a separate method or a separate

00:19:31,210 --> 00:19:36,249
function you hand it the input and it

00:19:33,759 --> 00:19:39,999
hands you back a number or a string or

00:19:36,249 --> 00:19:41,740
whatever you know simple output would it

00:19:39,999 --> 00:19:44,200
be easier to test that as a separate

00:19:41,740 --> 00:19:45,970
function or method or would it be easier

00:19:44,200 --> 00:19:46,900
to test it embedded within a thousand

00:19:45,970 --> 00:19:49,180
lines

00:19:46,900 --> 00:19:52,060
well that's pretty obvious it'd be

00:19:49,180 --> 00:19:53,710
easier if it was separated so if you're

00:19:52,060 --> 00:19:55,120
faced with this thousand line routines

00:19:53,710 --> 00:19:56,140
start looking for these things looking

00:19:55,120 --> 00:19:58,060
for these things that

00:19:56,140 --> 00:19:59,410
oh here's the decision it's nice and

00:19:58,060 --> 00:20:00,850
it's I say I could just pick that up and

00:19:59,410 --> 00:20:03,880
I can move it over here into another

00:20:00,850 --> 00:20:05,650
function and now I can write a test for

00:20:03,880 --> 00:20:07,180
it maybe I can even determine that

00:20:05,650 --> 00:20:08,500
there's a finite number of possible

00:20:07,180 --> 00:20:10,870
inputs to it and I could do an

00:20:08,500 --> 00:20:13,270
exhaustive test and test every possible

00:20:10,870 --> 00:20:15,730
input and then I'm really confident that

00:20:13,270 --> 00:20:16,990
it's right I couldn't do that while it's

00:20:15,730 --> 00:20:18,760
embedded within the thousand line

00:20:16,990 --> 00:20:21,340
routine because I can't directly access

00:20:18,760 --> 00:20:22,600
it and feed it the input and I can't

00:20:21,340 --> 00:20:24,190
even see the output that it produced

00:20:22,600 --> 00:20:25,840
because it's writing to some variable

00:20:24,190 --> 00:20:27,280
that's then you later used in the

00:20:25,840 --> 00:20:30,220
thousand lines and I don't ever get that

00:20:27,280 --> 00:20:35,920
access to that variable from my test so

00:20:30,220 --> 00:20:37,270
pulling it out makes it easier so leave

00:20:35,920 --> 00:20:38,320
the code a little bit better than it was

00:20:37,270 --> 00:20:40,240
if you're faced with one of these

00:20:38,320 --> 00:20:43,090
thousand line routines or any other

00:20:40,240 --> 00:20:44,380
problem that you run into try to fix it

00:20:43,090 --> 00:20:50,740
try to make the code a little bit better

00:20:44,380 --> 00:20:53,350
than when you got there so here's an

00:20:50,740 --> 00:20:56,890
example we have a routine that that

00:20:53,350 --> 00:20:58,870
processes the file now two ways I could

00:20:56,890 --> 00:21:01,570
handle is I could in the first example I

00:20:58,870 --> 00:21:03,250
could pass the path of that file maybe

00:21:01,570 --> 00:21:04,240
this is a config file or there's some

00:21:03,250 --> 00:21:07,600
kind of a file that we're going to

00:21:04,240 --> 00:21:11,740
process or I could pass the contents of

00:21:07,600 --> 00:21:15,190
the file does it matter would one be

00:21:11,740 --> 00:21:18,010
easier to test than the other in the

00:21:15,190 --> 00:21:21,760
second case to test this I simply hand

00:21:18,010 --> 00:21:23,410
it my test data in the first case I

00:21:21,760 --> 00:21:24,610
can't just handle the test date I have

00:21:23,410 --> 00:21:26,650
to take that test data and I have to

00:21:24,610 --> 00:21:30,370
open a file write it to the file close

00:21:26,650 --> 00:21:32,260
the file and the path to it to the

00:21:30,370 --> 00:21:34,060
routine at the end I've got it deleted

00:21:32,260 --> 00:21:36,400
or I've got to use one of the modules on

00:21:34,060 --> 00:21:39,070
Sipan - to automatically clean up my

00:21:36,400 --> 00:21:42,060
temporary files it's not a great deal of

00:21:39,070 --> 00:21:44,290
work but it's a little bit harder now

00:21:42,060 --> 00:21:46,330
sometimes the right and right answer

00:21:44,290 --> 00:21:48,340
here is yes I really need to pass the

00:21:46,330 --> 00:21:50,710
path of the file because that's just

00:21:48,340 --> 00:21:52,390
what the user needs but think about it

00:21:50,710 --> 00:21:54,310
does it make sense that maybe I could

00:21:52,390 --> 00:21:56,830
just pass the contents of the file and

00:21:54,310 --> 00:21:57,549
let the user read the file and just hand

00:21:56,830 --> 00:22:00,410
it to them

00:21:57,549 --> 00:22:02,179
it would be easier to test that way and

00:22:00,410 --> 00:22:05,150
if that's a reasonable decision then

00:22:02,179 --> 00:22:07,190
that's what you should do so don't just

00:22:05,150 --> 00:22:09,230
blindly assume that passing the path is

00:22:07,190 --> 00:22:14,299
always the right answer sometimes it

00:22:09,230 --> 00:22:17,179
isn't here's another one

00:22:14,299 --> 00:22:20,960
this routine determines whether today is

00:22:17,179 --> 00:22:24,440
the holiday the second one does the same

00:22:20,960 --> 00:22:28,820
thing but you pass it the date which is

00:22:24,440 --> 00:22:31,070
easier to test yeah on that first one

00:22:28,820 --> 00:22:32,510
what a will change the system clock to

00:22:31,070 --> 00:22:35,600
test this thing that that just doesn't

00:22:32,510 --> 00:22:39,260
work so what we're doing is we're

00:22:35,600 --> 00:22:40,940
avoiding external resources that system

00:22:39,260 --> 00:22:43,400
clock is the external resource that we

00:22:40,940 --> 00:22:45,830
want to avoid we don't want our business

00:22:43,400 --> 00:22:48,110
logic which is determining whether this

00:22:45,830 --> 00:22:49,880
date is a holiday we don't want that

00:22:48,110 --> 00:22:53,900
intermingled with something that

00:22:49,880 --> 00:22:56,360
accesses external resources split those

00:22:53,900 --> 00:22:58,429
apart now you can test your business

00:22:56,360 --> 00:23:00,020
logic without having to deal with the

00:22:58,429 --> 00:23:03,850
fact that it's going off and touching

00:23:00,020 --> 00:23:03,850
something external like the system clock

00:23:06,280 --> 00:23:11,150
another example of external resources

00:23:09,200 --> 00:23:13,250
and and by the way this this idea of

00:23:11,150 --> 00:23:15,200
avoiding external resources is really

00:23:13,250 --> 00:23:18,160
probably the fundamental thing that I've

00:23:15,200 --> 00:23:22,160
found that makes code hard to test

00:23:18,160 --> 00:23:23,840
I'd say easily 80 maybe more percent of

00:23:22,160 --> 00:23:26,270
the code that I find that is hard to

00:23:23,840 --> 00:23:29,799
test is because it's doing something

00:23:26,270 --> 00:23:34,160
with external access either going off to

00:23:29,799 --> 00:23:36,919
some web server and API somewhere or

00:23:34,160 --> 00:23:39,350
it's it's accessing system files or it's

00:23:36,919 --> 00:23:42,169
going off and touching a database or

00:23:39,350 --> 00:23:44,360
whatever it is that seems to be one of

00:23:42,169 --> 00:23:46,220
the key things that makes it hard to

00:23:44,360 --> 00:23:50,150
test because they've intermixed that

00:23:46,220 --> 00:23:52,820
with the decision of what to be done so

00:23:50,150 --> 00:23:55,100
here's an example of a routine that does

00:23:52,820 --> 00:23:57,470
some complex action you handed some

00:23:55,100 --> 00:23:59,450
input and it goes off and it munches the

00:23:57,470 --> 00:24:01,580
database it writes some files into the

00:23:59,450 --> 00:24:03,799
file system it goes off and it talked to

00:24:01,580 --> 00:24:06,470
some external API on the web whatever it

00:24:03,799 --> 00:24:09,140
is how do you test that because now

00:24:06,470 --> 00:24:10,610
you've got to go maybe query a bunch of

00:24:09,140 --> 00:24:10,820
stuff out of your database or you've got

00:24:10,610 --> 00:24:12,500
to go

00:24:10,820 --> 00:24:15,200
inspect the filesystem to make sure that

00:24:12,500 --> 00:24:16,159
the changes right or with it's

00:24:15,200 --> 00:24:20,149
complicated

00:24:16,159 --> 00:24:23,299
it makes the testing difficult instead

00:24:20,149 --> 00:24:24,769
you could split that into two pieces so

00:24:23,299 --> 00:24:27,769
now you have a routine in the bottom

00:24:24,769 --> 00:24:29,929
here make complex decision it doesn't do

00:24:27,769 --> 00:24:31,940
anything you give it the same input and

00:24:29,929 --> 00:24:33,980
it returns to you a list of the things

00:24:31,940 --> 00:24:36,200
that need to be done as a result of that

00:24:33,980 --> 00:24:39,259
input but doesn't actually do any of

00:24:36,200 --> 00:24:41,149
them so it is pure business logic it

00:24:39,259 --> 00:24:43,009
makes decisions but it doesn't take any

00:24:41,149 --> 00:24:44,750
actions and then you have another

00:24:43,009 --> 00:24:48,169
routine that you hand at the list and

00:24:44,750 --> 00:24:49,879
say and now go do these things hey I

00:24:48,169 --> 00:24:52,039
think it's pretty clear that the first

00:24:49,879 --> 00:24:55,129
one's going to be easy to test you give

00:24:52,039 --> 00:24:56,570
it some input and you use an ESD plea or

00:24:55,129 --> 00:24:58,460
whatever on the array that's returned

00:24:56,570 --> 00:25:02,240
and you just verify that yeah I've made

00:24:58,460 --> 00:25:04,309
the right decisions now this is kind of

00:25:02,240 --> 00:25:06,590
a contrived example it's really probably

00:25:04,309 --> 00:25:08,539
not the best way to deal with it it's a

00:25:06,590 --> 00:25:10,700
possibility but there are other

00:25:08,539 --> 00:25:14,029
techniques that accomplish the same end

00:25:10,700 --> 00:25:18,679
result of separating the the decision of

00:25:14,029 --> 00:25:20,000
what to do from actually doing it so for

00:25:18,679 --> 00:25:23,600
example if you're in object-oriented

00:25:20,000 --> 00:25:25,639
programming your new constructor might

00:25:23,600 --> 00:25:28,340
allow you to pass in various objects

00:25:25,639 --> 00:25:30,740
that do system or external access for

00:25:28,340 --> 00:25:33,289
you these are these are things that in

00:25:30,740 --> 00:25:35,419
your test you can mock in the real

00:25:33,289 --> 00:25:37,610
application maybe you don't pass these

00:25:35,419 --> 00:25:41,960
things in and you have some default like

00:25:37,610 --> 00:25:43,879
a database handle or whatever you know

00:25:41,960 --> 00:25:46,159
whatever access to some external

00:25:43,879 --> 00:25:47,779
resource but in the test you can

00:25:46,159 --> 00:25:51,320
override that by passing in mocked

00:25:47,779 --> 00:25:53,720
objects that allow you to control that

00:25:51,320 --> 00:25:55,399
and so that it's still making the

00:25:53,720 --> 00:25:58,340
decision and doing the action but it's

00:25:55,399 --> 00:26:00,500
doing the action is really just calling

00:25:58,340 --> 00:26:02,690
one of these objects thing please modify

00:26:00,500 --> 00:26:05,450
the database in this way please do this

00:26:02,690 --> 00:26:07,190
to the file system and then the test you

00:26:05,450 --> 00:26:09,230
write a mock object that doesn't

00:26:07,190 --> 00:26:11,090
actually modify the database or modify

00:26:09,230 --> 00:26:13,159
the file system it just records the fact

00:26:11,090 --> 00:26:16,159
that oh he requested me to do this and

00:26:13,159 --> 00:26:19,760
then in your test you verify that the

00:26:16,159 --> 00:26:22,580
right things were requested okay so the

00:26:19,760 --> 00:26:23,730
key here is separate the decision from

00:26:22,580 --> 00:26:32,279
the action

00:26:23,730 --> 00:26:34,039
that's the key another issue is global

00:26:32,279 --> 00:26:36,240
variables

00:26:34,039 --> 00:26:38,240
they've all been told that global

00:26:36,240 --> 00:26:41,760
variables are bad we shouldn't do that

00:26:38,240 --> 00:26:43,710
sometimes you have to sometimes you

00:26:41,760 --> 00:26:46,919
can't avoid it but think about it do you

00:26:43,710 --> 00:26:49,139
really need that global variable maybe

00:26:46,919 --> 00:26:50,309
it should be if you're doing object

00:26:49,139 --> 00:26:51,510
order in programming maybe it shouldn't

00:26:50,309 --> 00:26:53,549
be global maybe it should be in the

00:26:51,510 --> 00:26:55,950
object there's a variety of other

00:26:53,549 --> 00:26:58,320
solutions to that that avoid the

00:26:55,950 --> 00:27:00,179
external variables and when you

00:26:58,320 --> 00:27:04,620
reasonably can you should avoid external

00:27:00,179 --> 00:27:05,850
global variables the problems that it

00:27:04,620 --> 00:27:09,539
causes and I'm sure you've all seen

00:27:05,850 --> 00:27:10,830
these is it's a test that fails when you

00:27:09,539 --> 00:27:12,179
run it as part of the test suite but

00:27:10,830 --> 00:27:16,710
then you run it in isolation and it

00:27:12,179 --> 00:27:20,130
works that's really hard to debug I hate

00:27:16,710 --> 00:27:21,899
that when that happens and frequently

00:27:20,130 --> 00:27:24,120
one of the causes is those global

00:27:21,899 --> 00:27:29,220
variables not always but that's a common

00:27:24,120 --> 00:27:31,679
cause of that or you change the order of

00:27:29,220 --> 00:27:36,179
your test and suddenly they stop passing

00:27:31,679 --> 00:27:40,889
oh that's bad quite frequently it's

00:27:36,179 --> 00:27:44,100
global variables and remember that if

00:27:40,889 --> 00:27:47,279
you're doing object-oriented is really

00:27:44,100 --> 00:27:49,320
just a kind of global variable so that

00:27:47,279 --> 00:27:51,149
doesn't mean they're bad but think about

00:27:49,320 --> 00:27:53,870
it do you really need that singleton is

00:27:51,149 --> 00:27:56,720
there a better way of doing it so

00:27:53,870 --> 00:28:01,019
consider that

00:27:56,720 --> 00:28:03,690
another thing is caches now if you're

00:28:01,019 --> 00:28:05,130
accessing some database and you keep

00:28:03,690 --> 00:28:06,840
hitting the database over and over with

00:28:05,130 --> 00:28:08,940
this exact same query over and over

00:28:06,840 --> 00:28:11,580
maybe you need a cache to improve

00:28:08,940 --> 00:28:15,510
performance but that cache is a global

00:28:11,580 --> 00:28:16,710
variable it's going to cause these kinds

00:28:15,510 --> 00:28:19,380
of problems if you don't deal with it

00:28:16,710 --> 00:28:20,700
correctly so think about it if you have

00:28:19,380 --> 00:28:23,580
to have that cat and maybe you don't

00:28:20,700 --> 00:28:24,950
need the cash maybe your your system

00:28:23,580 --> 00:28:28,590
performs well enough without it

00:28:24,950 --> 00:28:30,360
don't you know prematurely optimize wait

00:28:28,590 --> 00:28:31,980
and see does it perform well oh it

00:28:30,360 --> 00:28:33,600
doesn't perform well enough okay I need

00:28:31,980 --> 00:28:35,850
that cache but when you implement the

00:28:33,600 --> 00:28:36,820
cache make sure that there's some

00:28:35,850 --> 00:28:39,250
mechanism that you

00:28:36,820 --> 00:28:41,590
reset that cache so that when you're

00:28:39,250 --> 00:28:43,210
testing the code you have a way of

00:28:41,590 --> 00:28:52,120
resetting the test and making sure that

00:28:43,210 --> 00:28:53,320
the logic is working correctly another

00:28:52,120 --> 00:28:54,700
thing that I've seen in a lot of

00:28:53,320 --> 00:28:57,039
examples especially in the web like

00:28:54,700 --> 00:28:58,960
programming you'll have a routine for

00:28:57,039 --> 00:29:00,580
example here that determines whether or

00:28:58,960 --> 00:29:04,090
not this person you're dealing with is

00:29:00,580 --> 00:29:05,320
an employee versus say a customer all

00:29:04,090 --> 00:29:07,990
it's really doing is it's looking the

00:29:05,320 --> 00:29:12,309
email address and is it at my company

00:29:07,990 --> 00:29:14,110
comm or is it something else well hey

00:29:12,309 --> 00:29:15,850
you know it's a web program you pass in

00:29:14,110 --> 00:29:19,779
the context and it pulls out the email

00:29:15,850 --> 00:29:22,320
address and to figure this out or you

00:29:19,779 --> 00:29:28,149
could simply pass the email address

00:29:22,320 --> 00:29:29,919
which is easier to test ok if I have to

00:29:28,149 --> 00:29:32,379
in my test if I have to go create a

00:29:29,919 --> 00:29:34,690
context object stick the email address

00:29:32,379 --> 00:29:36,850
in there pass it in there that's just

00:29:34,690 --> 00:29:39,279
some extra steps it'd be simpler if I

00:29:36,850 --> 00:29:41,529
could just simply pass the email address

00:29:39,279 --> 00:29:43,419
that will make the test easier now I

00:29:41,529 --> 00:29:44,789
agree it's not a great deal of extra

00:29:43,419 --> 00:29:48,220
work

00:29:44,789 --> 00:29:50,740
but if it really doesn't need anything

00:29:48,220 --> 00:29:54,100
else why are you passing a context just

00:29:50,740 --> 00:29:55,840
pass the email address so these are

00:29:54,100 --> 00:29:58,149
things that will make your tests easier

00:29:55,840 --> 00:30:00,429
and more readable the shorter they are

00:29:58,149 --> 00:30:01,929
the more concise they are the easier

00:30:00,429 --> 00:30:05,019
your tests are to understand and

00:30:01,929 --> 00:30:07,230
maintain therefore your testing is

00:30:05,019 --> 00:30:07,230
better

00:30:11,260 --> 00:30:19,510
so the next thing is is do one thing and

00:30:15,159 --> 00:30:23,809
do it well again a general principle

00:30:19,510 --> 00:30:26,510
touches a lot of different areas if you

00:30:23,809 --> 00:30:29,690
write a description of what this method

00:30:26,510 --> 00:30:32,000
or class or whatever is about do you

00:30:29,690 --> 00:30:35,000
have to use the word end if you have to

00:30:32,000 --> 00:30:37,940
use the word and you can't describe it

00:30:35,000 --> 00:30:40,210
without using the word and that's a red

00:30:37,940 --> 00:30:42,710
flag that may be really doing two things

00:30:40,210 --> 00:30:45,070
maybe this is really be two methods or

00:30:42,710 --> 00:30:48,080
two classes or two whatever

00:30:45,070 --> 00:30:49,820
think about that now not always but

00:30:48,080 --> 00:30:52,390
quite frequently that and in your

00:30:49,820 --> 00:30:55,520
description is the red flag that says

00:30:52,390 --> 00:30:58,570
this is really something that should be

00:30:55,520 --> 00:31:01,309
split apart into two separate things

00:30:58,570 --> 00:31:02,990
okay by isolating that that will make it

00:31:01,309 --> 00:31:05,029
easier to test because you're only

00:31:02,990 --> 00:31:09,500
testing one thing instead of two things

00:31:05,029 --> 00:31:11,059
together make sure that all of your

00:31:09,500 --> 00:31:15,620
business logic is collected into one

00:31:11,059 --> 00:31:17,270
place so don't have multiple logic

00:31:15,620 --> 00:31:19,220
scattered around different places that

00:31:17,270 --> 00:31:20,600
this this modifies the table over here

00:31:19,220 --> 00:31:22,130
and you got some other logic over here

00:31:20,600 --> 00:31:22,669
that modifies the same table and some

00:31:22,130 --> 00:31:24,380
other logs

00:31:22,669 --> 00:31:26,240
pull that together into one place make

00:31:24,380 --> 00:31:28,580
one class for example that deals with

00:31:26,240 --> 00:31:30,830
that table or a collection of tables in

00:31:28,580 --> 00:31:33,440
the database and nothing but that class

00:31:30,830 --> 00:31:35,690
touches those tables it's all isolated

00:31:33,440 --> 00:31:37,549
into one spot if you have a bug you know

00:31:35,690 --> 00:31:39,529
exactly where to go that's the spot

00:31:37,549 --> 00:31:41,559
because it's the only place that touches

00:31:39,529 --> 00:31:41,559
it

00:31:43,360 --> 00:31:50,899
do you have duplication of code so is

00:31:47,390 --> 00:31:52,370
that code the same algorithm or a very

00:31:50,899 --> 00:31:54,860
similar algorithm appearing somewhere

00:31:52,370 --> 00:31:57,590
else I don't know how many times I've

00:31:54,860 --> 00:31:59,870
looked at some code and I think gee I've

00:31:57,590 --> 00:32:01,250
seen that loop before oh yeah it was

00:31:59,870 --> 00:32:03,919
over oh yeah it's almost oh they changed

00:32:01,250 --> 00:32:06,529
one variable oh yeah it's the same loop

00:32:03,919 --> 00:32:07,700
the same logic they just cut and pasted

00:32:06,529 --> 00:32:10,640
and stuck it over here and made a little

00:32:07,700 --> 00:32:11,990
tweak to it bad idea pull that out I

00:32:10,640 --> 00:32:13,880
distract it out make something more

00:32:11,990 --> 00:32:16,760
generic that both of these places can

00:32:13,880 --> 00:32:19,149
call and reduce that down to one place

00:32:16,760 --> 00:32:19,149
to do that

00:32:22,799 --> 00:32:28,659
so an example one of the places where

00:32:26,049 --> 00:32:31,389
I've seen this come up is for example a

00:32:28,659 --> 00:32:33,309
web app that has some cron jobs or batch

00:32:31,389 --> 00:32:35,889
jobs that assistant that run daily

00:32:33,309 --> 00:32:38,409
deduce whenever database operations need

00:32:35,889 --> 00:32:41,710
to be done on a daily basis and the web

00:32:38,409 --> 00:32:43,629
app goes in it modifies the database in

00:32:41,710 --> 00:32:46,090
some particular way and the cron job

00:32:43,629 --> 00:32:47,559
what the batch job goes in it two

00:32:46,090 --> 00:32:49,570
o'clock in the morning and it has

00:32:47,559 --> 00:32:52,929
basically the same kind of logic to

00:32:49,570 --> 00:32:56,289
access that same table or set of tables

00:32:52,929 --> 00:32:59,830
in the database it'd be much better if

00:32:56,289 --> 00:33:02,320
you instead create a class that manages

00:32:59,830 --> 00:33:04,779
that part of the database and the web

00:33:02,320 --> 00:33:06,399
app calls it the cron job or the batch

00:33:04,779 --> 00:33:08,529
job calls it now you've collected it

00:33:06,399 --> 00:33:10,769
into one place now you have one place to

00:33:08,529 --> 00:33:10,769
test

00:33:13,679 --> 00:33:21,639
so in summary as you're writing code

00:33:19,710 --> 00:33:23,249
assuming you've not already written the

00:33:21,639 --> 00:33:25,599
test if as you're writing that code

00:33:23,249 --> 00:33:27,249
think about the test that's that's the

00:33:25,599 --> 00:33:31,269
number one takeaway here is think about

00:33:27,249 --> 00:33:34,330
the test and most of the things that

00:33:31,269 --> 00:33:37,179
I've discussed here will just occur to

00:33:34,330 --> 00:33:39,969
you they did to me I've been doing this

00:33:37,179 --> 00:33:41,259
for 20 plus years and a lot of these

00:33:39,969 --> 00:33:43,659
things that I've read in those papers

00:33:41,259 --> 00:33:46,330
though that that slide I put up with all

00:33:43,659 --> 00:33:48,580
the buzz words on it a lot of that stuff

00:33:46,330 --> 00:33:50,109
just occurred to me because well I

00:33:48,580 --> 00:33:51,759
thought about the test and I realized

00:33:50,109 --> 00:33:55,359
gee if I do this it's going to be bad

00:33:51,759 --> 00:33:57,179
and so really most of those things on

00:33:55,359 --> 00:33:59,200
that that page with all the buzz words

00:33:57,179 --> 00:34:01,299
most of those things really aren't

00:33:59,200 --> 00:34:02,499
earth-shaking oh wow that's great I

00:34:01,299 --> 00:34:03,580
never would have never thought now you

00:34:02,499 --> 00:34:05,440
would have thought of this these are

00:34:03,580 --> 00:34:08,319
things that are just obvious if you

00:34:05,440 --> 00:34:10,179
think about your testing as you're

00:34:08,319 --> 00:34:12,760
writing the code so that's why that's

00:34:10,179 --> 00:34:15,069
the most important concept here think

00:34:12,760 --> 00:34:18,750
about your testing and most of this

00:34:15,069 --> 00:34:18,750
stuff will just be obvious to you

00:34:19,930 --> 00:34:26,440
use the pod to document your user

00:34:24,220 --> 00:34:29,950
interface the pod is the documentation

00:34:26,440 --> 00:34:32,190
for the external user the people that

00:34:29,950 --> 00:34:34,120
are developing and maintaining that code

00:34:32,190 --> 00:34:35,530
that's what your comments are for

00:34:34,120 --> 00:34:37,450
because they're in there they're in the

00:34:35,530 --> 00:34:40,300
source code file they see those comments

00:34:37,450 --> 00:34:43,180
that's that's for them pod should not

00:34:40,300 --> 00:34:45,100
discuss your implementation details it

00:34:43,180 --> 00:34:49,900
should only tell the things that the

00:34:45,100 --> 00:34:52,180
user needs to know to use your code be

00:34:49,900 --> 00:34:55,990
sure that you separate black box and

00:34:52,180 --> 00:34:58,210
white box testing so so maybe I write a

00:34:55,990 --> 00:34:59,800
test a dot t-- file and it has some

00:34:58,210 --> 00:35:01,750
black box stuff here and some white box

00:34:59,800 --> 00:35:05,400
stuff here and some black box it is that

00:35:01,750 --> 00:35:08,400
good but what problems will that cause

00:35:05,400 --> 00:35:08,400
somebody

00:35:15,849 --> 00:35:23,630
okay okay

00:35:22,070 --> 00:35:26,480
so the point brought out is that some

00:35:23,630 --> 00:35:28,130
people will look at the test as isn't an

00:35:26,480 --> 00:35:33,200
addition to the documentation of how to

00:35:28,130 --> 00:35:35,060
use it as examples and so they may then

00:35:33,200 --> 00:35:36,640
discover things that are that you don't

00:35:35,060 --> 00:35:40,340
really want them to know about your test

00:35:36,640 --> 00:35:42,800
and it must have gone by on a slide and

00:35:40,340 --> 00:35:45,619
I didn't talk about it but one of the

00:35:42,800 --> 00:35:47,750
things that I like to do is when I write

00:35:45,619 --> 00:35:50,900
my documentation the first thing I write

00:35:47,750 --> 00:35:54,050
is the synopsis the synopsis is that

00:35:50,900 --> 00:35:56,390
section where you say okay use my module

00:35:54,050 --> 00:35:58,040
whatever it is and you call this

00:35:56,390 --> 00:36:00,140
constructor you called you to whatever

00:35:58,040 --> 00:36:03,650
you give an example of how to use my

00:36:00,140 --> 00:36:06,560
code so you're really showing use cases

00:36:03,650 --> 00:36:08,300
of your code you giving concrete

00:36:06,560 --> 00:36:10,609
examples of call it with these two

00:36:08,300 --> 00:36:12,200
parameters and you then you put it in

00:36:10,609 --> 00:36:14,330
the loop and you do this and you're

00:36:12,200 --> 00:36:16,730
showing concrete this is how my code

00:36:14,330 --> 00:36:20,660
works right that before you write the

00:36:16,730 --> 00:36:22,940
code in other words decide gee as a user

00:36:20,660 --> 00:36:24,800
I want to be able to call the

00:36:22,940 --> 00:36:26,390
constructor and tell it this and then I

00:36:24,800 --> 00:36:29,270
want to be able to call this method on

00:36:26,390 --> 00:36:34,970
it and get this back that drives the

00:36:29,270 --> 00:36:36,589
design of your code and so that's it's a

00:36:34,970 --> 00:36:38,450
key part of writing the documentation

00:36:36,589 --> 00:36:40,460
making sure the Dussehra lists your use

00:36:38,450 --> 00:36:46,280
cases at least the main you case use

00:36:40,460 --> 00:36:48,800
cases in that synopsis section and so

00:36:46,280 --> 00:36:50,839
that now your pod is thorough you have

00:36:48,800 --> 00:36:52,700
examples you don't you're not forcing

00:36:50,839 --> 00:36:54,440
them to go to tests to find examples of

00:36:52,700 --> 00:36:58,040
how to use it you've put those examples

00:36:54,440 --> 00:36:59,960
right there in the synopsis everything

00:36:58,040 --> 00:37:01,190
they need is in the pod you're not

00:36:59,960 --> 00:37:04,990
forcing them to go look at the source

00:37:01,190 --> 00:37:07,700
code alright so getting back to the the

00:37:04,990 --> 00:37:10,099
blackbox test and the white box test

00:37:07,700 --> 00:37:14,150
intermingle together so the thing I was

00:37:10,099 --> 00:37:18,410
looking for is if that test that T file

00:37:14,150 --> 00:37:20,570
fails and I'm fixing this bug I say oh

00:37:18,410 --> 00:37:22,400
yeah that's because I changed this loop

00:37:20,570 --> 00:37:25,220
and it doesn't and I said I've got to go

00:37:22,400 --> 00:37:26,089
fix that test to make it pass again and

00:37:25,220 --> 00:37:26,960
I inadvertently

00:37:26,089 --> 00:37:29,290
change

00:37:26,960 --> 00:37:31,340
the black box sections of that test

00:37:29,290 --> 00:37:33,710
because it's not clear to me which is

00:37:31,340 --> 00:37:36,140
black boxes which is white box you need

00:37:33,710 --> 00:37:38,630
to separate those I think that you

00:37:36,140 --> 00:37:40,820
really need to have a separate T file

00:37:38,630 --> 00:37:43,640
for your black box in a separate D file

00:37:40,820 --> 00:37:46,460
for your white box maybe even separate

00:37:43,640 --> 00:37:49,370
directories but certainly keep them

00:37:46,460 --> 00:37:52,310
clear keep them separated maybe you need

00:37:49,370 --> 00:37:54,740
a naming scheme that clearly says this

00:37:52,310 --> 00:37:57,290
is black box this is white box so when

00:37:54,740 --> 00:38:00,020
I'm fixing a bug and this test fails and

00:37:57,290 --> 00:38:02,000
I see it's black box oh I can't just go

00:38:00,020 --> 00:38:04,700
change the test I've got to figure out

00:38:02,000 --> 00:38:06,470
why my code is failing now because if I

00:38:04,700 --> 00:38:10,010
change that test I'm breaking backward

00:38:06,470 --> 00:38:12,770
compatibility so it's important that you

00:38:10,010 --> 00:38:14,840
keep black box and white box separated

00:38:12,770 --> 00:38:17,120
for that very reason so that as a

00:38:14,840 --> 00:38:19,550
developer when I'm fixing bugs adding

00:38:17,120 --> 00:38:21,350
new features I know that oh that failed

00:38:19,550 --> 00:38:23,540
that's not allowed I cannot let that

00:38:21,350 --> 00:38:25,550
fail my codes wrong now

00:38:23,540 --> 00:38:27,530
oh this white box test failed that's

00:38:25,550 --> 00:38:31,100
okay I changed my algorithm I'll just go

00:38:27,530 --> 00:38:34,450
fix the tester to pass now okay so it's

00:38:31,100 --> 00:38:34,450
very important to keep those separated

00:38:35,110 --> 00:38:41,690
so the black box is the key to

00:38:39,410 --> 00:38:43,220
supportable code that does not break

00:38:41,690 --> 00:38:45,290
backward compatibility when you make

00:38:43,220 --> 00:38:51,890
changes and keeping that separate is

00:38:45,290 --> 00:38:54,220
very important so any questions I'm a

00:38:51,890 --> 00:38:57,220
little bit ahead of schedule here

00:38:54,220 --> 00:38:57,220
yes

00:39:19,930 --> 00:39:27,680
okay so so the question is I need to

00:39:25,760 --> 00:39:29,930
write a mock for some external service

00:39:27,680 --> 00:39:31,430
because I want to one my test and I

00:39:29,930 --> 00:39:33,440
actually go off and hit that external

00:39:31,430 --> 00:39:37,780
thing whatever it is how do I know that

00:39:33,440 --> 00:39:40,520
my Mach is mocking correctly well I

00:39:37,780 --> 00:39:43,180
don't know that there's really any magic

00:39:40,520 --> 00:39:45,650
bullets that solve that problem but

00:39:43,180 --> 00:39:48,140
that's where integration tests come in

00:39:45,650 --> 00:39:51,590
because an integration test is now going

00:39:48,140 --> 00:39:53,500
to run with the real service and if it

00:39:51,590 --> 00:39:56,060
behaves differently from your test

00:39:53,500 --> 00:39:58,369
that's one way of detecting it

00:39:56,060 --> 00:40:02,420
you could always write a test for your

00:39:58,369 --> 00:40:05,390
mock service that might or might not be

00:40:02,420 --> 00:40:07,310
easy I'm not sure there's really any

00:40:05,390 --> 00:40:11,230
magic bullets for anybody else have

00:40:07,310 --> 00:40:11,230
ideas of things they've done

00:40:37,490 --> 00:40:42,300
so you're saying you would use the

00:40:39,660 --> 00:40:44,190
actual service and record the what you

00:40:42,300 --> 00:40:46,859
got back from it and used that to

00:40:44,190 --> 00:41:00,690
generate your mock okay all right that's

00:40:46,859 --> 00:41:05,180
a good technique right right okay all

00:41:00,690 --> 00:41:05,180
right that's good yes

00:41:08,640 --> 00:41:23,340
basically I mean we

00:41:34,239 --> 00:41:44,480
right okay so the point here is that

00:41:37,039 --> 00:41:46,849
might go ahead right okay so what he's

00:41:44,480 --> 00:41:49,220
talking about is my example of passing

00:41:46,849 --> 00:41:51,319
in an email address versus a context

00:41:49,220 --> 00:41:53,480
into the decision of is this an employee

00:41:51,319 --> 00:41:55,130
or not and how you're saying is that yes

00:41:53,480 --> 00:41:57,289
today maybe you're making the decision

00:41:55,130 --> 00:41:59,269
based on the email address but later you

00:41:57,289 --> 00:42:01,369
decide no I need a more complex more

00:41:59,269 --> 00:42:03,170
secure decision that's based on more

00:42:01,369 --> 00:42:17,180
than just the email and now I really

00:42:03,170 --> 00:42:20,690
need the context yes right so so if if

00:42:17,180 --> 00:42:22,130
that is even is employee is part of your

00:42:20,690 --> 00:42:24,680
black box testing as part of your

00:42:22,130 --> 00:42:27,890
defined interface and you define it to

00:42:24,680 --> 00:42:30,259
only accept the email address now you're

00:42:27,890 --> 00:42:32,420
locked in you can't access other things

00:42:30,259 --> 00:42:34,339
to make the decision so yes I agree

00:42:32,420 --> 00:42:36,410
that's I'm not saying that that

00:42:34,339 --> 00:42:38,180
technique is you should always pass the

00:42:36,410 --> 00:42:40,849
email address you need to think about

00:42:38,180 --> 00:42:43,309
that what is the future you plan ahead

00:42:40,849 --> 00:42:45,140
is will you ever need something more

00:42:43,309 --> 00:42:46,849
than just the email address if there's a

00:42:45,140 --> 00:42:50,539
possibility you do need more then you

00:42:46,849 --> 00:42:52,390
need to pass the context okay it's not

00:42:50,539 --> 00:42:55,670
going to make the test that much harder

00:42:52,390 --> 00:42:58,309
we only saved up maybe of their four

00:42:55,670 --> 00:42:59,779
lines in the test by doing that so it's

00:42:58,309 --> 00:43:01,849
a balance you have to think about is it

00:42:59,779 --> 00:43:03,710
is it better to pass the email address

00:43:01,849 --> 00:43:06,980
and now I'm locked into that's all I can

00:43:03,710 --> 00:43:08,599
make my decision on or is it better to

00:43:06,980 --> 00:43:10,369
pass the context and live with a few

00:43:08,599 --> 00:43:13,130
more lines in my test I mean it's it's

00:43:10,369 --> 00:43:14,329
not that big of a deal we're just trying

00:43:13,130 --> 00:43:17,420
to make things a little bit better but

00:43:14,329 --> 00:43:20,059
but don't but don't go so far that you

00:43:17,420 --> 00:43:21,680
actually make things hard to improve in

00:43:20,059 --> 00:43:24,460
the future because of saving a couple of

00:43:21,680 --> 00:43:24,460
lines in your test

00:44:39,660 --> 00:44:46,059
so I think one of the key things here is

00:44:42,130 --> 00:44:48,579
the abstraction is if this is your user

00:44:46,059 --> 00:44:52,359
interface you don't want the user

00:44:48,579 --> 00:44:54,309
knowing that you don't want to you don't

00:44:52,359 --> 00:44:56,049
want the external user to know that your

00:44:54,309 --> 00:44:58,239
basic thing is on the email address and

00:44:56,049 --> 00:44:59,950
you for that user interface you want to

00:44:58,239 --> 00:45:01,450
pass the context because you don't want

00:44:59,950 --> 00:45:03,359
them to know how you're making the

00:45:01,450 --> 00:45:06,249
decision that's implementation detail

00:45:03,359 --> 00:45:08,829
but one thing I could say is that maybe

00:45:06,249 --> 00:45:10,900
the external user interface is something

00:45:08,829 --> 00:45:13,029
that takes a context but then inside

00:45:10,900 --> 00:45:15,759
that routine you call a method that you

00:45:13,029 --> 00:45:17,380
just pass it the email address and now

00:45:15,759 --> 00:45:19,599
you can test that simply now of course

00:45:17,380 --> 00:45:21,489
that I mean that's a one-line reg X but

00:45:19,599 --> 00:45:23,769
so it's probably not a good example but

00:45:21,489 --> 00:45:25,749
but some but maybe something a bit more

00:45:23,769 --> 00:45:28,150
complex where you need one item or two

00:45:25,749 --> 00:45:30,160
items out of that context maybe you call

00:45:28,150 --> 00:45:32,079
some other routine that you passed those

00:45:30,160 --> 00:45:34,660
one or two items and it makes you know

00:45:32,079 --> 00:45:36,910
it's just a dozen lines of code and now

00:45:34,660 --> 00:45:40,150
that's easier to test just just some

00:45:36,910 --> 00:45:41,259
thoughts yeah yeah I mean maybe that's

00:45:40,150 --> 00:45:49,920
not any better maybe that's more

00:45:41,259 --> 00:45:52,920
complexity and it's just bad right right

00:45:49,920 --> 00:45:52,920
yes

00:46:03,390 --> 00:46:07,150
well you could do the same thing with

00:46:05,590 --> 00:46:10,359
your comments if you've been thorough

00:46:07,150 --> 00:46:12,820
and writing your comments and one other

00:46:10,359 --> 00:46:15,190
thing I wanted to mention is I wrote

00:46:12,820 --> 00:46:16,840
because I've done this repeatedly of

00:46:15,190 --> 00:46:18,880
taking the black box that the

00:46:16,840 --> 00:46:20,770
documentation and numerating all the

00:46:18,880 --> 00:46:23,530
claims and writing a test for each one

00:46:20,770 --> 00:46:24,400
of those I just released a module to

00:46:23,530 --> 00:46:28,750
Sipan called

00:46:24,400 --> 00:46:31,750
Doc claims do see claims and what it

00:46:28,750 --> 00:46:33,580
does is it it helps you manage this this

00:46:31,750 --> 00:46:35,410
checklist of all the things that you've

00:46:33,580 --> 00:46:39,130
documented and make sure that you get

00:46:35,410 --> 00:46:42,250
them into your tests and the big thing

00:46:39,130 --> 00:46:43,840
that it helps you with is that if you in

00:46:42,250 --> 00:46:46,119
maintenance mode you're going to make

00:46:43,840 --> 00:46:47,470
changes you're going to add new features

00:46:46,119 --> 00:46:49,359
or whatever you're going to change your

00:46:47,470 --> 00:46:50,740
documentation and now suddenly you have

00:46:49,359 --> 00:46:52,720
a new paragraph that makes three more

00:46:50,740 --> 00:46:54,430
claims while you want to make sure you

00:46:52,720 --> 00:46:57,030
get those over into your blackbox test

00:46:54,430 --> 00:46:59,890
and so this helps you manage that

00:46:57,030 --> 00:47:01,750
basically what it does is it it takes

00:46:59,890 --> 00:47:03,730
the document ate the pod out of your

00:47:01,750 --> 00:47:06,880
code and you put that into the dotty

00:47:03,730 --> 00:47:08,530
file and in essence diffs the two to

00:47:06,880 --> 00:47:09,970
make sure that they're in sync so that

00:47:08,530 --> 00:47:11,950
if you make some changes over here in

00:47:09,970 --> 00:47:14,619
the code and you document with a new

00:47:11,950 --> 00:47:16,990
paragraph this new feature and you fail

00:47:14,619 --> 00:47:18,339
to write a test for that now this diff

00:47:16,990 --> 00:47:20,260
is going to tell you oh you need to go

00:47:18,339 --> 00:47:20,920
fix your file because things don't match

00:47:20,260 --> 00:47:22,750
anymore

00:47:20,920 --> 00:47:24,760
it's it's still a work in progress

00:47:22,750 --> 00:47:27,070
there's some issues with it but it's out

00:47:24,760 --> 00:47:29,290
there if you're interested in this take

00:47:27,070 --> 00:47:30,430
a look at it tell me the things that are

00:47:29,290 --> 00:47:35,500
wrong tell me the things that I'm not

00:47:30,430 --> 00:47:38,020
covering yet do see claims is the name

00:47:35,500 --> 00:47:42,099
of the module test colon colon doc

00:47:38,020 --> 00:47:43,780
claims so like I said it's not perfect

00:47:42,099 --> 00:47:49,690
it's a work in progress at this point I

00:47:43,780 --> 00:47:52,660
call it version 0.001 yeah oh it's

00:47:49,690 --> 00:47:54,430
definitely less than one oh one of the

00:47:52,660 --> 00:47:56,349
big things is is how do you you've got a

00:47:54,430 --> 00:47:59,890
copy of the pot over here and a copy of

00:47:56,349 --> 00:48:01,900
the pot over here how do you manage that

00:47:59,890 --> 00:48:04,060
difference and be nice if I could just

00:48:01,900 --> 00:48:05,440
automatically copy things it's I'm

00:48:04,060 --> 00:48:06,339
working on some utility scripts that

00:48:05,440 --> 00:48:07,719
help with that and

00:48:06,339 --> 00:48:24,209
and I haven't figured that out yet but

00:48:07,719 --> 00:48:24,209
it's it's a work in progress yes right

00:48:29,069 --> 00:48:37,900
right okay so the what he brought it out

00:48:35,979 --> 00:48:40,239
is that in the example where I was

00:48:37,900 --> 00:48:42,009
talking about passing the path to the

00:48:40,239 --> 00:48:45,219
file versus the content you could also

00:48:42,009 --> 00:48:47,319
pass a handle which in Perl in your test

00:48:45,219 --> 00:48:49,479
you could open up a string as your file

00:48:47,319 --> 00:48:50,979
and now you don't have to deal with with

00:48:49,479 --> 00:48:52,029
temporary files in the theis temp

00:48:50,979 --> 00:48:53,769
directory which would make it a little

00:48:52,029 --> 00:48:57,640
bit easier so that's that's another

00:48:53,769 --> 00:48:59,859
possibility so one other thing I want to

00:48:57,640 --> 00:49:01,839
close with is that if this topic really

00:48:59,859 --> 00:49:03,999
interests you and you're excited about

00:49:01,839 --> 00:49:05,469
this kind of thing we would love to have

00:49:03,999 --> 00:49:09,959
you at Grant Street we have a table

00:49:05,469 --> 00:49:09,959
right out here thank you

00:49:13,360 --> 00:49:16,489

YouTube URL: https://www.youtube.com/watch?v=b2jdc9q66-o


