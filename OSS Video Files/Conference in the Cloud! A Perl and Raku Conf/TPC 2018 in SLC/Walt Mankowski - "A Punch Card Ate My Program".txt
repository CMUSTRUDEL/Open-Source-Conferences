Title: Walt Mankowski - "A Punch Card Ate My Program"
Publication date: 2018-06-19
Playlist: TPC 2018 in SLC
Description: 
	COBOL is the Rodney Dangerfield of programming languages — it doesn’t get any respect. COBOL is routinely denigrated for its verbosity and dismissed as archaic, and for good reason: COBOL bears little to no resemblance to modern programming languages. Yet COBOL is far from a dead language. It processes an estimated 85% of all business transactions, and 5 billion lines of new COBOL code are written every year!

At a past YAPC I argued that COBOL isn’t such a bad language. This year it’s time for an opposing point of view. We’ll journey deep into the past to recreate a retro bug that could only happen in COBOL! Our travels will include:

syntactic white space!
scotch tape!
dueling compiler options!
virtual punch cards!
sentences!
code blocks!
periods!

No punch cards were harmed in the creation of this talk.
Captions: 
	00:00:00,030 --> 00:00:04,440
so so I have 5 10 so I'm gonna get

00:00:03,090 --> 00:00:06,150
started

00:00:04,440 --> 00:00:07,379
people may slow straggling so thanks

00:00:06,150 --> 00:00:09,059
everyone for coming I know it's like the

00:00:07,379 --> 00:00:11,130
last talk of the day hopefully we got

00:00:09,059 --> 00:00:14,460
out a little early so we can get food

00:00:11,130 --> 00:00:15,809
early so a couple of things just before

00:00:14,460 --> 00:00:17,340
I get started so I originally gave this

00:00:15,809 --> 00:00:20,100
as a 10-minute talk at a conference

00:00:17,340 --> 00:00:22,439
called bang Bangkok Namit Khanna is a

00:00:20,100 --> 00:00:25,890
kind of like two days of lightning talks

00:00:22,439 --> 00:00:28,080
about joy excitement and surprise in

00:00:25,890 --> 00:00:30,810
computing what are the rules if you

00:00:28,080 --> 00:00:32,820
submit a talk there is that you have to

00:00:30,810 --> 00:00:35,880
have at least one exclamation point in

00:00:32,820 --> 00:00:37,170
the title so I kind of kept that if you

00:00:35,880 --> 00:00:39,090
notice my abstract had a lot of

00:00:37,170 --> 00:00:41,489
exclamation points a lot of the slides

00:00:39,090 --> 00:00:43,500
have exclamation points sometimes the

00:00:41,489 --> 00:00:45,090
people didn't probably say I have the

00:00:43,500 --> 00:00:49,320
expansion points on what I'm quoting but

00:00:45,090 --> 00:00:51,629
you know they really meant it so with

00:00:49,320 --> 00:00:54,030
that so I owe as we should say that

00:00:51,629 --> 00:00:56,370
there's not really very much Perl in

00:00:54,030 --> 00:00:58,260
this talk there's a little bit of Perl

00:00:56,370 --> 00:01:00,780
at the very end so if you're here for a

00:00:58,260 --> 00:01:02,879
Perl talk go to you might want to go to

00:01:00,780 --> 00:01:05,250
one of the other the other ones having

00:01:02,879 --> 00:01:10,020
said that so my name is what make ASCII

00:01:05,250 --> 00:01:11,790
I am at this point a recovering ivory

00:01:10,020 --> 00:01:14,700
tower computer scientist I used to work

00:01:11,790 --> 00:01:17,520
with biological images and tracking

00:01:14,700 --> 00:01:19,909
cells which is very cool now I work for

00:01:17,520 --> 00:01:22,200
a company called psyops that does

00:01:19,909 --> 00:01:25,460
precision medicine which involves

00:01:22,200 --> 00:01:28,189
helping oncologists find the right

00:01:25,460 --> 00:01:31,439
navigate the world of biomarkers and

00:01:28,189 --> 00:01:34,049
clinical trials to help helping cure

00:01:31,439 --> 00:01:35,579
cancer basically and um I should say I'm

00:01:34,049 --> 00:01:37,259
contracted Lee I have to say we are

00:01:35,579 --> 00:01:38,490
hiring because everyone's hiring we

00:01:37,259 --> 00:01:40,079
don't really do any purl there

00:01:38,490 --> 00:01:44,280
unfortunately but if you're interested

00:01:40,079 --> 00:01:46,619
so come see me afterwards but a long

00:01:44,280 --> 00:01:50,189
time ago back in the 90s I worked for a

00:01:46,619 --> 00:01:55,430
large cable home shopping station called

00:01:50,189 --> 00:01:59,040
QVC for most of the time I was there I

00:01:55,430 --> 00:02:00,810
was a COBOL programmer I would get some

00:01:59,040 --> 00:02:03,390
other things too but most of the code I

00:02:00,810 --> 00:02:05,009
worked on there was it COBOL so I know

00:02:03,390 --> 00:02:09,479
what most people think of when you think

00:02:05,009 --> 00:02:12,349
of COBOL you think of this right and to

00:02:09,479 --> 00:02:13,990
be honest this is what I thought of -

00:02:12,349 --> 00:02:14,980
someone made a note

00:02:13,990 --> 00:02:17,680
found this I don't even know where this

00:02:14,980 --> 00:02:20,010
came from but I really like that slide

00:02:17,680 --> 00:02:20,010
too

00:02:21,720 --> 00:02:27,730
but you know I suppose we want to think

00:02:25,180 --> 00:02:31,420
of COBOL as being a dead language you

00:02:27,730 --> 00:02:33,670
know it it keeps coming back and back if

00:02:31,420 --> 00:02:35,080
you were at my talk I gave that you AB

00:02:33,670 --> 00:02:38,910
see a few years ago I had this slide

00:02:35,080 --> 00:02:41,980
then it still kind of blows me away like

00:02:38,910 --> 00:02:44,410
just like even though we like all the

00:02:41,980 --> 00:02:46,570
press goes to like the internet startups

00:02:44,410 --> 00:02:48,610
and things I mean really COBOL is still

00:02:46,570 --> 00:02:49,900
there behind the scenes you know

00:02:48,610 --> 00:02:52,510
handling all the credit card

00:02:49,900 --> 00:02:55,540
transactions making sure your I your

00:02:52,510 --> 00:02:57,910
iPad makes it from Shenzhen to the West

00:02:55,540 --> 00:02:59,080
to Apple so they can ship it like but

00:02:57,910 --> 00:03:00,790
all those shipping crates going across

00:02:59,080 --> 00:03:06,520
the oceans it's all being managed by

00:03:00,790 --> 00:03:07,840
COBOL behind the scenes and you know you

00:03:06,520 --> 00:03:12,430
can still make a lot of money ecole

00:03:07,840 --> 00:03:13,840
alright so you know if you remember what

00:03:12,430 --> 00:03:15,340
I gave this talk I talked about there

00:03:13,840 --> 00:03:16,690
are some things that COBOL is still

00:03:15,340 --> 00:03:19,900
pretty good at and if you don't believe

00:03:16,690 --> 00:03:22,900
me you can believe him this is uh Brian

00:03:19,900 --> 00:03:27,850
Carnahan of course one of the inventors

00:03:22,900 --> 00:03:28,960
of C he's now I'm a professor at

00:03:27,850 --> 00:03:30,460
Princeton now keep your science

00:03:28,960 --> 00:03:33,100
professor at Princeton so he left the

00:03:30,460 --> 00:03:34,450
labs quite a while ago and he said COBOL

00:03:33,100 --> 00:03:38,170
was really good at handling formatted

00:03:34,450 --> 00:03:40,870
data which it is it is really for

00:03:38,170 --> 00:03:42,280
certain types of formatted data I think

00:03:40,870 --> 00:03:45,370
it is probably one of the better

00:03:42,280 --> 00:03:46,540
languages out there but you know that

00:03:45,370 --> 00:03:48,790
was you know I already talked about what

00:03:46,540 --> 00:03:50,230
I thought COBOL was good at so this year

00:03:48,790 --> 00:03:53,320
was time to talk about things that COBOL

00:03:50,230 --> 00:03:56,860
was bad at anything those low hanging

00:03:53,320 --> 00:04:00,790
fruit right I could you know I can talk

00:03:56,860 --> 00:04:03,370
about its propensity to do you know

00:04:00,790 --> 00:04:05,680
generally spaghetti code I should say

00:04:03,370 --> 00:04:07,540
also that when I showed the slide at the

00:04:05,680 --> 00:04:09,070
Philadelphia politics users group

00:04:07,540 --> 00:04:11,440
some people were offended by this

00:04:09,070 --> 00:04:13,620
picture so if I'm violating the code of

00:04:11,440 --> 00:04:13,620
conduct

00:04:15,660 --> 00:04:20,980
Thole aside but if you work in with

00:04:19,209 --> 00:04:23,140
biologists at a university you get

00:04:20,980 --> 00:04:24,820
occasionally dragged to talks that you

00:04:23,140 --> 00:04:26,770
don't quite understand but sometimes

00:04:24,820 --> 00:04:32,020
they have really cool pictures

00:04:26,770 --> 00:04:35,979
these these are protein folding diagrams

00:04:32,020 --> 00:04:37,750
and Susan's kind of as proteins which

00:04:35,979 --> 00:04:40,150
like the building blocks of our lifes

00:04:37,750 --> 00:04:43,180
look like this and all I'm saying is I

00:04:40,150 --> 00:04:45,370
think that we are kind of made in the

00:04:43,180 --> 00:04:46,659
you know the image of his noodley

00:04:45,370 --> 00:04:49,750
appendages so it's just something

00:04:46,659 --> 00:04:51,190
something to think about anyway so I

00:04:49,750 --> 00:04:53,199
don't want to talk about this is nothing

00:04:51,190 --> 00:04:56,099
about this be any hood let's talk about

00:04:53,199 --> 00:04:58,419
something I think is more interesting so

00:04:56,099 --> 00:05:02,050
we're talking about a bug I ran into

00:04:58,419 --> 00:05:03,639
while I was working at QVC and obviously

00:05:02,050 --> 00:05:05,770
I just say like I don't have the code

00:05:03,639 --> 00:05:10,479
I'm regenerating it from the thing that

00:05:05,770 --> 00:05:12,370
happened so has anyone ever used I

00:05:10,479 --> 00:05:16,770
shouldn't you ever use a COBOL here

00:05:12,370 --> 00:05:21,280
before a few people did it for a class

00:05:16,770 --> 00:05:23,289
right okay that's fair it is designed to

00:05:21,280 --> 00:05:25,000
be pretty simple to understand so I can

00:05:23,289 --> 00:05:25,409
sort of step you through what's going on

00:05:25,000 --> 00:05:28,659
here

00:05:25,409 --> 00:05:30,280
so these are some variable declarations

00:05:28,659 --> 00:05:32,830
one we're thinking about cobol's when

00:05:30,280 --> 00:05:34,539
you sometimes we need when you declare a

00:05:32,830 --> 00:05:36,130
variable you could say how you want it

00:05:34,539 --> 00:05:37,870
to look like when it gets printed out so

00:05:36,130 --> 00:05:41,409
instead of having like a printf

00:05:37,870 --> 00:05:42,849
statement in C or in Perl you can say in

00:05:41,409 --> 00:05:44,860
the description of the variable what it

00:05:42,849 --> 00:05:46,569
should look like so for instance I pick

00:05:44,860 --> 00:05:49,509
X two is a something that's two

00:05:46,569 --> 00:05:51,009
characters long and has to be is kidney

00:05:49,509 --> 00:05:53,650
alphaman numeric that's what the X

00:05:51,009 --> 00:05:54,880
stands for and value means that's what

00:05:53,650 --> 00:05:57,460
it's the value is so it gets

00:05:54,880 --> 00:06:00,870
initialized to that a pick that is

00:05:57,460 --> 00:06:04,270
something that could only be numbers a

00:06:00,870 --> 00:06:07,810
pick 9999 for the shipping charge that's

00:06:04,270 --> 00:06:09,580
a way of doing a number with a decimal

00:06:07,810 --> 00:06:11,349
point so it'll always be two decimal

00:06:09,580 --> 00:06:12,639
points before two numbers before this

00:06:11,349 --> 00:06:14,139
would point to numbers after the decimal

00:06:12,639 --> 00:06:17,279
point so you won't have any kind of

00:06:14,139 --> 00:06:17,279
roundoff error which is nice

00:06:22,640 --> 00:06:30,540
well this was in nineteen this was in

00:06:25,290 --> 00:06:32,670
like 1997 so things were cheaper than so

00:06:30,540 --> 00:06:35,670
what we were trying to do what I'm

00:06:32,670 --> 00:06:38,460
trying to do here is if someone's paying

00:06:35,670 --> 00:06:41,250
by FX FX was Federal Express they're

00:06:38,460 --> 00:06:42,300
gonna get so if they're not so if

00:06:41,250 --> 00:06:43,770
they're paying my Federal Express are

00:06:42,300 --> 00:06:45,990
couldn't get this expedited ship date

00:06:43,770 --> 00:06:48,540
and I have the dates from like when Bank

00:06:45,990 --> 00:06:50,220
man con was last year so you pay by

00:06:48,540 --> 00:06:51,330
anything but Federal Express you get

00:06:50,220 --> 00:06:55,940
something that was like two weeks out

00:06:51,330 --> 00:07:02,160
otherwise you get next day delivery okay

00:06:55,940 --> 00:07:04,350
and then if you're either if you're an

00:07:02,160 --> 00:07:06,540
employee you get free shipping if you

00:07:04,350 --> 00:07:08,190
get if you're paying with a QVC credit

00:07:06,540 --> 00:07:10,110
card you get free shipping everyone else

00:07:08,190 --> 00:07:14,900
gets the default values that are up

00:07:10,110 --> 00:07:20,430
there and then at the bottom we have

00:07:14,900 --> 00:07:22,770
display is like a print statement so it

00:07:20,430 --> 00:07:27,840
prints the expected shipping date as

00:07:22,770 --> 00:07:31,050
being 522 and that's because they're

00:07:27,840 --> 00:07:33,510
paying with a they're just shipping at

00:07:31,050 --> 00:07:35,010
us which was US Mail so if they should

00:07:33,510 --> 00:07:37,920
get the deep that's two weeks out so

00:07:35,010 --> 00:07:40,500
that's fine now we expect the shipping

00:07:37,920 --> 00:07:43,100
charge to be zero because they're an

00:07:40,500 --> 00:07:47,630
employee they should get that

00:07:43,100 --> 00:07:54,120
however the shipping charges actually

00:07:47,630 --> 00:07:58,620
$4.99 so what's going on there if you

00:07:54,120 --> 00:07:59,970
know don't say and if you ever use COBOL

00:07:58,620 --> 00:08:06,570
do you know what it is already you can

00:07:59,970 --> 00:08:08,010
guess well okay so I will give you a

00:08:06,570 --> 00:08:12,120
hint and then you can see whether you're

00:08:08,010 --> 00:08:17,010
closer that so in when I did this I

00:08:12,120 --> 00:08:19,920
really didn't have any idea but now I if

00:08:17,010 --> 00:08:22,920
you voted him I tried this both in vim

00:08:19,920 --> 00:08:24,720
and in Emacs and both times it flagged

00:08:22,920 --> 00:08:27,480
that period is being problematic is that

00:08:24,720 --> 00:08:31,050
what you were thinking of okay they knew

00:08:27,480 --> 00:08:32,760
were wrong so the period is what's wrong

00:08:31,050 --> 00:08:33,790
there but it I wasn't clear to me why

00:08:32,760 --> 00:08:36,370
the period

00:08:33,790 --> 00:08:38,710
there so you can't see it like what's

00:08:36,370 --> 00:08:41,950
going on there so the whole rest of the

00:08:38,710 --> 00:08:47,100
talk is explaining why that period is an

00:08:41,950 --> 00:08:47,100
error in this program or what what what

00:08:48,240 --> 00:08:54,730
we'll get to that so before we can

00:08:53,530 --> 00:08:57,390
really understand that we have to have a

00:08:54,730 --> 00:09:01,990
little bit of a history history lesson

00:08:57,390 --> 00:09:05,680
so this woman is Jean Sammet she just

00:09:01,990 --> 00:09:09,400
passed away last year she's got this

00:09:05,680 --> 00:09:10,990
great quote she always thought about

00:09:09,400 --> 00:09:12,670
computer is that I've seen piece of

00:09:10,990 --> 00:09:15,850
hardware that she wanted nothing to do

00:09:12,670 --> 00:09:19,300
with so she really showed that she

00:09:15,850 --> 00:09:22,330
passed away she had obituaries both in

00:09:19,300 --> 00:09:24,040
the New York Times and because she had

00:09:22,330 --> 00:09:26,080
been president of the ACM she had an

00:09:24,040 --> 00:09:30,790
obituary the communications of the ACM

00:09:26,080 --> 00:09:32,590
as well so she she really was one of the

00:09:30,790 --> 00:09:35,530
pioneers of COBOL may possibly even more

00:09:32,590 --> 00:09:37,720
so than Grace Hopper because Reese upper

00:09:35,530 --> 00:09:39,160
I think was maybe more of a manager of

00:09:37,720 --> 00:09:39,880
it and sort of leading things but she

00:09:39,160 --> 00:09:42,310
was kind of down in the trenches

00:09:39,880 --> 00:09:46,930
actually right braiding the code for the

00:09:42,310 --> 00:09:49,150
initial versions of COBOL so later on

00:09:46,930 --> 00:09:50,590
she went on to a pretty distinguished

00:09:49,150 --> 00:09:52,000
career in computer science you've worked

00:09:50,590 --> 00:09:53,740
on programming languages in computer

00:09:52,000 --> 00:09:55,770
algebra and as I said she was president

00:09:53,740 --> 00:09:58,030
of the ACM for a number of years so

00:09:55,770 --> 00:10:00,790
pretty impressive person the UM the

00:09:58,030 --> 00:10:03,430
quote I had from Brian Carnahan was from

00:10:00,790 --> 00:10:06,160
the obituary in The New York Times for

00:10:03,430 --> 00:10:08,140
her Christmas is Grace Hopper who's

00:10:06,160 --> 00:10:09,880
probably most closely associated with

00:10:08,140 --> 00:10:11,500
COBOL she's got this great quote that I

00:10:09,880 --> 00:10:13,840
love I'll read if you can't read it

00:10:11,500 --> 00:10:15,490
humans are allergic to change they'd

00:10:13,840 --> 00:10:17,560
love to say we've always done it this

00:10:15,490 --> 00:10:19,060
way I try to fight that that's why you

00:10:17,560 --> 00:10:21,520
have a clock on my wall that runs

00:10:19,060 --> 00:10:25,600
counter clockwise and that's a great

00:10:21,520 --> 00:10:27,580
quote but it's it kind of sounds ironic

00:10:25,600 --> 00:10:29,260
when you think about COBOL in 2018 when

00:10:27,580 --> 00:10:31,720
we think like those dinosaurs right like

00:10:29,260 --> 00:10:34,450
it's such a backward language but really

00:10:31,720 --> 00:10:37,660
in for the time it was created it was a

00:10:34,450 --> 00:10:40,030
super radical language so it was created

00:10:37,660 --> 00:10:46,300
way back in 1959 so it's almost 60 years

00:10:40,030 --> 00:10:47,230
old so it's design goals were several it

00:10:46,300 --> 00:10:51,220
wouldn't have in English

00:10:47,230 --> 00:10:52,570
language syntax as opposed to languages

00:10:51,220 --> 00:10:54,850
like Fortran that looked much more like

00:10:52,570 --> 00:10:56,380
mathematics the who saw the code before

00:10:54,850 --> 00:10:57,760
that I showed you it looks more like

00:10:56,380 --> 00:10:59,020
English language was a pretty radical

00:10:57,760 --> 00:11:02,560
idea at the time

00:10:59,020 --> 00:11:04,030
and also it was designed not for things

00:11:02,560 --> 00:11:07,390
like COBOL was doing excite if

00:11:04,030 --> 00:11:09,010
experiments missile trajectories things

00:11:07,390 --> 00:11:11,920
like that it was designed for business

00:11:09,010 --> 00:11:14,170
computing for expense reports personnel

00:11:11,920 --> 00:11:16,210
records things like that so if you ever

00:11:14,170 --> 00:11:21,370
have used a computer for a spreadsheet

00:11:16,210 --> 00:11:23,050
or to figure out what your taxes should

00:11:21,370 --> 00:11:25,120
be at the end of the year or to make a

00:11:23,050 --> 00:11:26,530
presentation like like guy and lots of

00:11:25,120 --> 00:11:28,510
people are doing here you have kind of

00:11:26,530 --> 00:11:33,220
have Grace Hopper and the people behind

00:11:28,510 --> 00:11:34,540
that - thanks - think so let's talk a

00:11:33,220 --> 00:11:43,810
little bit about the English language

00:11:34,540 --> 00:11:47,620
syntax so anyone know what this is but

00:11:43,810 --> 00:11:55,240
BNF format for a statement in the C

00:11:47,620 --> 00:11:59,020
programming language so what I've

00:11:55,240 --> 00:12:03,190
highlighted here is some things for how

00:11:59,020 --> 00:12:05,770
an if statement works so a statement can

00:12:03,190 --> 00:12:07,750
be a number of things so it could be a

00:12:05,770 --> 00:12:09,400
label statement an expression compound

00:12:07,750 --> 00:12:11,380
statement and a selection statement so

00:12:09,400 --> 00:12:15,280
what's a selection statement that's an

00:12:11,380 --> 00:12:18,820
if if in this statement and if statement

00:12:15,280 --> 00:12:20,710
else is even or you could have a switch

00:12:18,820 --> 00:12:23,200
statement each of those statements is

00:12:20,710 --> 00:12:27,390
recursively defined to be the statement

00:12:23,200 --> 00:12:30,370
up the tops you could have you know ifs

00:12:27,390 --> 00:12:32,740
ifs in else nested just like we have

00:12:30,370 --> 00:12:34,660
here and this seems perfectly normal for

00:12:32,740 --> 00:12:39,160
us today right like you don't even think

00:12:34,660 --> 00:12:41,710
anything of that that's because C and

00:12:39,160 --> 00:12:43,750
Perl and because all the languages that

00:12:41,710 --> 00:12:46,900
came after C or almost everything is

00:12:43,750 --> 00:12:50,130
defined recursively just like that crazy

00:12:46,900 --> 00:12:53,650
BNF format that I showed you before

00:12:50,130 --> 00:12:56,050
couples not like that couples the Cohens

00:12:53,650 --> 00:12:58,420
language is hierarchical so at the top

00:12:56,050 --> 00:13:01,410
level there's program and Ephesians and

00:12:58,420 --> 00:13:04,899
sections and things like that

00:13:01,410 --> 00:13:08,339
but it is not recursive like we saw

00:13:04,899 --> 00:13:11,079
before so what does that really mean so

00:13:08,339 --> 00:13:13,089
for the example of if statements there's

00:13:11,079 --> 00:13:15,639
two ways to two different ways to do if

00:13:13,089 --> 00:13:18,040
statements sing in COBOL we're going to

00:13:15,639 --> 00:13:21,910
do block statements an if statement is

00:13:18,040 --> 00:13:24,339
an example of that one is you can have

00:13:21,910 --> 00:13:25,899
scope terminators so every time you have

00:13:24,339 --> 00:13:28,180
an if you have to end it with an end if

00:13:25,899 --> 00:13:30,279
if you have a perform you close it with

00:13:28,180 --> 00:13:31,360
it end perform and that's what I've

00:13:30,279 --> 00:13:35,829
showed here and that doesn't look so

00:13:31,360 --> 00:13:39,160
much different than it would be in C or

00:13:35,829 --> 00:13:41,589
Fortran C or Perl actually um

00:13:39,160 --> 00:13:46,779
MATLAB still uses end ifs like that

00:13:41,589 --> 00:13:50,230
today the other way you can do it is to

00:13:46,779 --> 00:13:51,699
have implicit termination so the entire

00:13:50,230 --> 00:13:53,949
thing ends with a period that's because

00:13:51,699 --> 00:13:56,290
what does it this is all a sentence what

00:13:53,949 --> 00:14:00,130
does a sentence end with a period so

00:13:56,290 --> 00:14:01,870
that's all one statement and it ends

00:14:00,130 --> 00:14:04,779
with a period so how do you make sure

00:14:01,870 --> 00:14:26,589
that that move a to C goes with the

00:14:04,779 --> 00:14:32,829
outer if instead of the inner if with

00:14:26,589 --> 00:14:35,829
the period in line so okay so two ways

00:14:32,829 --> 00:14:39,730
to make if statements one issue is that

00:14:35,829 --> 00:14:43,839
this syntax is from cobol-85 so remember

00:14:39,730 --> 00:14:48,490
COBOL was created in 1959 so what is

00:14:43,839 --> 00:14:50,860
that 26 years of COBOL code where the

00:14:48,490 --> 00:14:52,899
only way you could make if statements

00:14:50,860 --> 00:14:55,319
was it closing that was with periods

00:14:52,899 --> 00:14:55,319
like that

00:14:58,520 --> 00:15:01,740
[Music]

00:15:03,389 --> 00:15:06,220
exactly

00:15:04,600 --> 00:15:16,089
hey won't we'll get to that too we'll

00:15:06,220 --> 00:15:17,589
get to that too so and of course even

00:15:16,089 --> 00:15:21,609
even with this it did take quite a while

00:15:17,589 --> 00:15:23,470
to sort of roll this all out we had two

00:15:21,609 --> 00:15:25,419
different systems that I worked on a QVC

00:15:23,470 --> 00:15:27,459
one used the top syntax for if

00:15:25,419 --> 00:15:29,410
statements the other one used the bottom

00:15:27,459 --> 00:15:32,980
statement for if statements the bottom

00:15:29,410 --> 00:15:36,850
syntax for if statements if you look at

00:15:32,980 --> 00:15:39,879
this code I have here it's using the

00:15:36,850 --> 00:15:43,359
it's not using NDS all the ifs are

00:15:39,879 --> 00:15:46,509
terminated with periods okay so that's

00:15:43,359 --> 00:15:48,160
one reason so the other thing is going

00:15:46,509 --> 00:15:50,410
on here is that their world was pretty

00:15:48,160 --> 00:15:52,720
different place back in 1959 this is

00:15:50,410 --> 00:15:58,959
what a five megabyte hard drive looked

00:15:52,720 --> 00:16:00,910
like around them and this is this is a

00:15:58,959 --> 00:16:02,499
punch card right let's party was in the

00:16:00,910 --> 00:16:05,319
name of the talk so we knew we were

00:16:02,499 --> 00:16:08,350
getting to them somewhere all right so

00:16:05,319 --> 00:16:15,480
how old would technology do you think

00:16:08,350 --> 00:16:19,029
punch cards are anyone Stephen what

00:16:15,480 --> 00:16:28,299
jacquard looms from okay from what year

00:16:19,029 --> 00:16:34,739
that I know no 1880s they're much older

00:16:28,299 --> 00:16:37,600
than that right though very the the

00:16:34,739 --> 00:16:39,999
around the turn of the the 19th century

00:16:37,600 --> 00:16:44,259
so this is job with Joseph Marie

00:16:39,999 --> 00:16:46,509
jacquard so he developed a little I saw

00:16:44,259 --> 00:16:52,119
1801 somewhere 1804 it was like around

00:16:46,509 --> 00:16:54,569
that time there very early sorry 1804

00:16:52,119 --> 00:16:54,569
thank you

00:16:54,870 --> 00:16:58,159
[Music]

00:16:59,029 --> 00:17:06,959
so this picture was was woven on silk

00:17:02,279 --> 00:17:09,510
using 24,000 punch cards it's pretty

00:17:06,959 --> 00:17:12,150
cool so I found this great video of how

00:17:09,510 --> 00:17:13,709
jacquard looms work and I kind of talked

00:17:12,150 --> 00:17:18,600
over this a little bit it's a very

00:17:13,709 --> 00:17:21,240
clever yes so this is just there's just

00:17:18,600 --> 00:17:23,610
subtitles is that any sound with it

00:17:21,240 --> 00:17:26,040
so the idea with weaving is that you've

00:17:23,610 --> 00:17:28,050
got a whole bunch of threads held very

00:17:26,040 --> 00:17:30,660
tightly that are vertical and you weave

00:17:28,050 --> 00:17:33,300
a looser thread horizontally either

00:17:30,660 --> 00:17:37,740
above or below the tight threads and

00:17:33,300 --> 00:17:40,500
then depending on whether the heart the

00:17:37,740 --> 00:17:48,360
vertical threads appear or not that's

00:17:40,500 --> 00:17:50,970
how you get patterns right so that thing

00:17:48,360 --> 00:17:52,590
he's pulling is what moves the the loose

00:17:50,970 --> 00:17:55,290
thread back and forth the horizontal

00:17:52,590 --> 00:17:56,550
thread but the patterns are coded in

00:17:55,290 --> 00:17:59,330
punch cards which you'll see pretty

00:17:56,550 --> 00:17:59,330
pretty soon

00:18:07,150 --> 00:18:15,910
all like mechanical woods though Indians

00:18:10,450 --> 00:18:18,130
or anything try these I'm sorry yes it's

00:18:15,910 --> 00:18:23,500
a stand up desk it's very much ahead at

00:18:18,130 --> 00:18:24,940
this time see he says you know one so

00:18:23,500 --> 00:18:34,870
who knows who knows whether they see no

00:18:24,940 --> 00:18:36,970
water 1804 so he's basically doing

00:18:34,870 --> 00:18:38,770
that's you can't see but that's a graph

00:18:36,970 --> 00:18:41,170
paper so he's kind of making a big map

00:18:38,770 --> 00:18:44,140
on graph paper of what the design should

00:18:41,170 --> 00:18:55,300
look like and then he's got this machine

00:18:44,140 --> 00:18:55,840
that encodes it into punch cards it's

00:18:55,300 --> 00:18:57,820
very cool

00:18:55,840 --> 00:18:59,020
remember what that looks like we'll talk

00:18:57,820 --> 00:19:03,700
about that in a second

00:18:59,020 --> 00:19:05,620
so they'll go through and whether

00:19:03,700 --> 00:19:08,080
there's a hole or not there's some hooks

00:19:05,620 --> 00:19:11,500
that either get either fall through or

00:19:08,080 --> 00:19:13,300
don't fall through and then if they fall

00:19:11,500 --> 00:19:14,410
through they hold the thread down if

00:19:13,300 --> 00:19:21,370
they don't fall through they say where

00:19:14,410 --> 00:19:24,900
they are and then this is the opposite

00:19:21,370 --> 00:19:24,900
they pushed out of the way if it's not

00:19:35,080 --> 00:19:38,379
yes and that's how it works when they do

00:19:36,850 --> 00:19:42,389
that they pulls the threads up and

00:19:38,379 --> 00:19:42,389
that's how you get patterns you could

00:19:59,050 --> 00:20:04,660
so other people tried to do this they

00:20:02,680 --> 00:20:08,340
had the idea of using decoding of

00:20:04,660 --> 00:20:10,420
patterns in paper like this because his

00:20:08,340 --> 00:20:11,740
innovation was that other people have

00:20:10,420 --> 00:20:12,850
tried to use things that were more like

00:20:11,740 --> 00:20:14,920
player piano reels

00:20:12,850 --> 00:20:16,840
and he uses these you can tell there's

00:20:14,920 --> 00:20:18,820
like very kind of thick cardstock and

00:20:16,840 --> 00:20:21,400
kind of small things that are that are

00:20:18,820 --> 00:20:23,860
tied together just with twine and that

00:20:21,400 --> 00:20:25,000
makes it a lot more flexible if you lose

00:20:23,860 --> 00:20:26,170
one of them you just have to replace

00:20:25,000 --> 00:20:28,420
that one little piece instead of the

00:20:26,170 --> 00:20:30,190
entire thing there lot more durable they

00:20:28,420 --> 00:20:35,670
can fold more easily they can fold on

00:20:30,190 --> 00:20:39,340
the where the twine is so pretty cool um

00:20:35,670 --> 00:20:40,720
the person in the inner world here is

00:20:39,340 --> 00:20:43,060
Charles Babbage he's someone's called

00:20:40,720 --> 00:20:44,980
the father of the computer he built this

00:20:43,060 --> 00:20:47,020
I least designed these two things an

00:20:44,980 --> 00:20:53,080
analytical engine and a difference

00:20:47,020 --> 00:20:54,490
engine the analog engine the different

00:20:53,080 --> 00:20:59,400
engine which is something I think they

00:20:54,490 --> 00:21:01,150
did actually build in I'm sorry the

00:20:59,400 --> 00:21:03,100
analytical engine was something that

00:21:01,150 --> 00:21:04,270
like it was way ahead of its time like

00:21:03,100 --> 00:21:06,490
he'd probably could not have been built

00:21:04,270 --> 00:21:08,050
the way it was but it was somebody that

00:21:06,490 --> 00:21:10,600
was supposed to be a basically a

00:21:08,050 --> 00:21:13,120
programmable computer there's a scale

00:21:10,600 --> 00:21:14,350
model from the London Museum and the

00:21:13,120 --> 00:21:16,030
idea was that you would encode the

00:21:14,350 --> 00:21:19,380
programs in little punch cards we took a

00:21:16,030 --> 00:21:21,580
lot like jacquards punch cards right

00:21:19,380 --> 00:21:23,470
because he was doing this about 50 years

00:21:21,580 --> 00:21:27,270
after jacquard is invented his machine

00:21:23,470 --> 00:21:30,700
so it's pretty well known technology

00:21:27,270 --> 00:21:33,580
this is Ada Lovelace who famously worked

00:21:30,700 --> 00:21:35,470
with average on his machines said the

00:21:33,580 --> 00:21:37,780
analytical engine weaves algebraic

00:21:35,470 --> 00:21:40,000
patterns just like jacquard Loop weaves

00:21:37,780 --> 00:21:45,910
flowers and leaves which is kind of

00:21:40,000 --> 00:21:52,060
beautiful thought I think this is Herman

00:21:45,910 --> 00:21:56,500
Hollerith who is famous for for really

00:21:52,060 --> 00:21:58,960
using so the punch cards that jacquard

00:21:56,500 --> 00:22:02,050
was using we're kind of a program that

00:21:58,960 --> 00:22:04,660
was like this saying how it was driving

00:22:02,050 --> 00:22:07,390
that machine it was sort of like control

00:22:04,660 --> 00:22:09,760
software in some some very early sense

00:22:07,390 --> 00:22:11,920
he had the idea that you could use punch

00:22:09,760 --> 00:22:13,170
cards to store data as well he was

00:22:11,920 --> 00:22:15,640
inspired

00:22:13,170 --> 00:22:17,980
he claims that he did not know about

00:22:15,640 --> 00:22:22,750
jacquard looms I don't know if I believe

00:22:17,980 --> 00:22:25,720
that story or not there's a story that

00:22:22,750 --> 00:22:27,160
he was on a train where they were

00:22:25,720 --> 00:22:28,570
worried about people stealing tickets or

00:22:27,160 --> 00:22:31,060
like using tickets for other things so

00:22:28,570 --> 00:22:32,950
they were punching in not just whether

00:22:31,060 --> 00:22:35,170
you use the ticket but how tall you were

00:22:32,950 --> 00:22:36,640
so like what yes whether you're male or

00:22:35,170 --> 00:22:38,860
female or whether you were I don't know

00:22:36,640 --> 00:22:40,840
what I call her you were so things like

00:22:38,860 --> 00:22:42,400
that so you couldn't use the the ticket

00:22:40,840 --> 00:22:45,100
it's like only you could the person who

00:22:42,400 --> 00:22:46,540
bought it could use the ticket so the

00:22:45,100 --> 00:22:48,610
idea that you could automate that and

00:22:46,540 --> 00:22:51,480
store information on punch cards instead

00:22:48,610 --> 00:22:54,910
of just using it as control software he

00:22:51,480 --> 00:22:57,310
used this idea for the 1890 census and

00:22:54,910 --> 00:22:59,320
Haley went on to develop the first

00:22:57,310 --> 00:23:01,000
working tabulating machines and card

00:22:59,320 --> 00:23:06,490
feeder Zacky punch machine he was one of

00:23:01,000 --> 00:23:09,070
the founders of IBM so and he had a

00:23:06,490 --> 00:23:13,020
pretty awesome mustache I think so this

00:23:09,070 --> 00:23:16,270
is what the this is what one of his

00:23:13,020 --> 00:23:19,570
punch cards from the census looks like

00:23:16,270 --> 00:23:21,520
they look a little different than punch

00:23:19,570 --> 00:23:22,660
cup with more modern punch cards one

00:23:21,520 --> 00:23:24,760
thing is that the whole bits smaller

00:23:22,660 --> 00:23:27,280
there's not as many as much information

00:23:24,760 --> 00:23:30,730
being encoded they're also the holes are

00:23:27,280 --> 00:23:33,430
circular whereas they became rectangular

00:23:30,730 --> 00:23:43,720
later on and basically these are all

00:23:33,430 --> 00:23:45,310
zeros and ones you're and yeah like

00:23:43,720 --> 00:23:47,920
player pianos are sort of the same idea

00:23:45,310 --> 00:23:52,110
as that except that's on a peak more of

00:23:47,920 --> 00:23:54,580
a paper tape but the same idea this is a

00:23:52,110 --> 00:23:56,650
key punch machine from Bletchley Park

00:23:54,580 --> 00:23:59,470
that had been used or a punch card

00:23:56,650 --> 00:24:00,540
reader from World War two and trying to

00:23:59,470 --> 00:24:03,250
break the German codes

00:24:00,540 --> 00:24:06,850
these are all-star ballots which were

00:24:03,250 --> 00:24:10,480
used up until 2014 to vote for baseball

00:24:06,850 --> 00:24:13,480
all-star ballots famously they we're

00:24:10,480 --> 00:24:15,760
still being used for the tablet u.s.

00:24:13,480 --> 00:24:20,700
elections through the 2000 election I

00:24:15,760 --> 00:24:25,159
love that picture so okay

00:24:20,700 --> 00:24:28,309
hey you jazz yes so um

00:24:25,159 --> 00:24:31,099
at the time of the 2000 2001 like the

00:24:28,309 --> 00:24:32,479
2000 election I say 2001 I guess that's

00:24:31,099 --> 00:24:34,159
when they were counting them all up I

00:24:32,479 --> 00:24:37,879
mean there's like 200 year old

00:24:34,159 --> 00:24:40,039
technology at that point right so let's

00:24:37,879 --> 00:24:41,779
look a little bit how they worked this

00:24:40,039 --> 00:24:44,450
is what like a sort of standard punch

00:24:41,779 --> 00:24:46,789
card looks like there's there's eight

00:24:44,450 --> 00:24:47,509
there 80 columns across there's actually

00:24:46,789 --> 00:24:57,679
00:24:47,509 --> 00:25:01,220
even though because they were designed

00:24:57,679 --> 00:25:03,429
sort of cleverly to be the size of US

00:25:01,220 --> 00:25:05,779
currency up until about nineteen

00:25:03,429 --> 00:25:10,190
nineteen twenty eight or three twenty

00:25:05,779 --> 00:25:12,710
nine the colorists idea was that when

00:25:10,190 --> 00:25:14,029
they shrunk the currency size down there

00:25:12,710 --> 00:25:15,590
would be a lot of old Bank trays that

00:25:14,029 --> 00:25:17,059
wouldn't be used anymore and he could

00:25:15,590 --> 00:25:22,309
use those to store his punch cards

00:25:17,059 --> 00:25:25,269
instead so let's talk a little bit about

00:25:22,309 --> 00:25:32,200
how like the data was encoded on there

00:25:25,269 --> 00:25:34,249
so this is a punch card with it actually

00:25:32,200 --> 00:25:36,259
although it's impossible to read it

00:25:34,249 --> 00:25:38,690
actually has all those letters I added

00:25:36,259 --> 00:25:40,369
up on the top are written on the top of

00:25:38,690 --> 00:25:42,070
the card very that's very dark and I'm a

00:25:40,369 --> 00:25:50,210
little unsure of some of the punctuation

00:25:42,070 --> 00:25:53,119
marks so there is some letters up there

00:25:50,210 --> 00:25:57,679
the letters are totally solely for human

00:25:53,119 --> 00:25:59,859
reading because the machine that's

00:25:57,679 --> 00:26:04,519
reading it is only looking at the holes

00:25:59,859 --> 00:26:05,539
so it goes 0 through 9 and then a drusy

00:26:04,519 --> 00:26:09,739
and then a bunch of punctuation

00:26:05,539 --> 00:26:12,440
characters so notice that this is not

00:26:09,739 --> 00:26:16,489
being encoded the most dense way

00:26:12,440 --> 00:26:20,389
possible so 0 through 9 zeros no holes 1

00:26:16,489 --> 00:26:23,179
through 9 our single punch is a T

00:26:20,389 --> 00:26:25,080
through Z our two punches one up at the

00:26:23,179 --> 00:26:30,900
top of any kind of goes

00:26:25,080 --> 00:26:33,480
order like that we're using basically

00:26:30,900 --> 00:26:35,430
nothing up the top one or the first row

00:26:33,480 --> 00:26:36,840
or the second row and then the

00:26:35,430 --> 00:26:38,880
punctuation characters get a little

00:26:36,840 --> 00:26:43,260
crazier after that this kind of always

00:26:38,880 --> 00:26:44,670
confused me because when I saw some

00:26:43,260 --> 00:26:47,010
punch cards when I was like kind of

00:26:44,670 --> 00:26:48,810
breaking into the industry I assumed

00:26:47,010 --> 00:26:49,800
that they were encoded in EPSA deck or

00:26:48,810 --> 00:26:53,780
something but they're really not they're

00:26:49,800 --> 00:26:59,250
like their own special way of doing it

00:26:53,780 --> 00:27:01,110
so they pretty clearly we're doing this

00:26:59,250 --> 00:27:03,810
so you would only for a letter would

00:27:01,110 --> 00:27:05,490
only ever have like one or two maybe

00:27:03,810 --> 00:27:07,970
three punches in any row do you know why

00:27:05,490 --> 00:27:10,590
he did that anyone to have a guess right

00:27:07,970 --> 00:27:15,960
this is what they look like if you punch

00:27:10,590 --> 00:27:17,460
every hole in it and right these were

00:27:15,960 --> 00:27:19,470
just jam up in the machine so they were

00:27:17,460 --> 00:27:23,640
really designed like they actually have

00:27:19,470 --> 00:27:26,520
like it's based it's 2 to the 12th right

00:27:23,640 --> 00:27:28,590
because there's 12 like there's 12 bits

00:27:26,520 --> 00:27:29,970
and everything so you have a pretty wide

00:27:28,590 --> 00:27:31,590
space but they're not using everything

00:27:29,970 --> 00:27:36,270
because they don't want to they want to

00:27:31,590 --> 00:27:39,540
avoid this problem so it's important to

00:27:36,270 --> 00:27:40,920
understand like this stack of cards this

00:27:39,540 --> 00:27:43,830
is what like an entire program would

00:27:40,920 --> 00:27:46,050
look like and this stack of cards might

00:27:43,830 --> 00:27:47,400
be like literally your only copy of the

00:27:46,050 --> 00:27:50,280
program it's not sort or a hard drive

00:27:47,400 --> 00:27:55,110
anywhere it's not on a floppy disk asad

00:27:50,280 --> 00:27:58,050
on a flash drive this is it right and if

00:27:55,110 --> 00:28:02,430
you were to drop this or lose it it's

00:27:58,050 --> 00:28:04,710
good it's kind of ruin your day so you

00:28:02,430 --> 00:28:07,530
can kind of see some hits for what this

00:28:04,710 --> 00:28:10,260
person is has done they've written some

00:28:07,530 --> 00:28:11,130
text along the sides of them so that

00:28:10,260 --> 00:28:14,400
they can see what it is

00:28:11,130 --> 00:28:17,190
they wrote a they drew a diagonal line

00:28:14,400 --> 00:28:20,600
so if they dropped it they could kind of

00:28:17,190 --> 00:28:20,600
use it put it all back together

00:28:23,190 --> 00:28:28,680
here we'll talk about let's see what's

00:28:27,060 --> 00:28:30,090
not like you could reserve some

00:28:28,680 --> 00:28:31,830
characters in the beginning for sequence

00:28:30,090 --> 00:28:33,900
numbers so that if you ended up dropping

00:28:31,830 --> 00:28:40,550
them you could use a mechanical sorter

00:28:33,900 --> 00:28:40,550
to put them back into order all right so

00:28:40,610 --> 00:28:48,660
this I love this picture too this is

00:28:43,320 --> 00:28:54,600
from NASA in 1957 this gentleman here is

00:28:48,660 --> 00:28:57,090
looking at IBM 704 computer and young

00:28:54,600 --> 00:28:59,820
lady is working on an IBM 7-eleven punch

00:28:57,090 --> 00:29:01,560
card reader so there were separate

00:28:59,820 --> 00:29:03,320
machines to punch the cards in but it

00:29:01,560 --> 00:29:05,970
was kind of like very noisy typewriters

00:29:03,320 --> 00:29:12,150
and this is a this is a punch card

00:29:05,970 --> 00:29:17,370
reader so it it was the most popular

00:29:12,150 --> 00:29:19,380
card reader at the time but it only read

00:29:17,370 --> 00:29:23,190
remember there were 80 characters across

00:29:19,380 --> 00:29:29,070
but it only read 72 of the 80 columns

00:29:23,190 --> 00:29:35,760
and the reason for that is that it read

00:29:29,070 --> 00:29:39,150
the data into 236 bit words so the other

00:29:35,760 --> 00:29:42,450
ones were just dropped and they could

00:29:39,150 --> 00:29:47,490
apparently move them so that any of the

00:29:42,450 --> 00:29:48,540
72 out of the 80 could be used but this

00:29:47,490 --> 00:29:50,280
again just what I've learned from

00:29:48,540 --> 00:29:58,910
Wikipedia they almost always just use

00:29:50,280 --> 00:29:58,910
the first 72 so

00:29:59,680 --> 00:30:04,460
okay so this is this is a for train car

00:30:03,230 --> 00:30:07,580
that's specifically done for for

00:30:04,460 --> 00:30:09,980
training and so we kind of seem to be

00:30:07,580 --> 00:30:15,559
drew lines here so they're using the

00:30:09,980 --> 00:30:17,750
first two three four five columns for

00:30:15,559 --> 00:30:19,730
our statement number this is a

00:30:17,750 --> 00:30:26,630
continuation character so your line is

00:30:19,730 --> 00:30:28,100
longer than columns the Seidman it

00:30:26,630 --> 00:30:42,800
actually is written up there it says Z

00:30:28,100 --> 00:30:47,540
sub 1 equals y they call this project a

00:30:42,800 --> 00:30:48,500
t9 so you could search by the steepen

00:30:47,540 --> 00:30:51,679
number though they don't seem to be

00:30:48,500 --> 00:30:53,690
using that you could also use this like

00:30:51,679 --> 00:30:55,190
a subroutine so you could sort by that

00:30:53,690 --> 00:31:02,750
and then sort by the sequence number

00:30:55,190 --> 00:31:05,990
maybe the opposite so that was the that

00:31:02,750 --> 00:31:11,559
was what for train used couple had a

00:31:05,990 --> 00:31:14,300
more complicated system where the first

00:31:11,559 --> 00:31:16,750
six characters were the sequence number

00:31:14,300 --> 00:31:21,260
the seventh one was an indication for

00:31:16,750 --> 00:31:25,100
comments or for continuation characters

00:31:21,260 --> 00:31:27,350
a through 11 or 8 through 11 area a was

00:31:25,100 --> 00:31:28,750
on what the just the division section or

00:31:27,350 --> 00:31:31,370
procedure headers could go there

00:31:28,750 --> 00:31:36,920
everything else started area 12 at like

00:31:31,370 --> 00:31:43,640
12 it also was ignoring columns 73 that

00:31:36,920 --> 00:31:48,350
was a program name area so it only

00:31:43,640 --> 00:31:50,600
leaves you we're down here 61 characters

00:31:48,350 --> 00:31:56,750
to actually put any code on any one line

00:31:50,600 --> 00:32:00,590
they have at some point merged area like

00:31:56,750 --> 00:32:04,970
65 characters so it's not very much so

00:32:00,590 --> 00:32:07,270
also I think they in the early days they

00:32:04,970 --> 00:32:09,380
even have terminals to type things in

00:32:07,270 --> 00:32:11,660
terminals didn't really become practical

00:32:09,380 --> 00:32:13,700
to use to enter code really - like the

00:32:11,660 --> 00:32:15,470
late 60s and

00:32:13,700 --> 00:32:16,970
the punch cards were still being used I

00:32:15,470 --> 00:32:18,620
probably like the 80s they were just

00:32:16,970 --> 00:32:20,470
being phased out and like the mid to

00:32:18,620 --> 00:32:23,690
late 80s when I broke into the industry

00:32:20,470 --> 00:32:29,020
so you would write your coat your

00:32:23,690 --> 00:32:31,520
program on paper in specially formatted

00:32:29,020 --> 00:32:35,420
things called yeah I don't know what

00:32:31,520 --> 00:32:37,070
these things were called actually um but

00:32:35,420 --> 00:32:38,030
you'd write your code here and then you

00:32:37,070 --> 00:32:40,040
would give this to someone who would

00:32:38,030 --> 00:32:42,340
keep it keep unto the end and then you

00:32:40,040 --> 00:32:45,410
would run a job and then you know you

00:32:42,340 --> 00:32:47,390
maybe it wanted get run you would get

00:32:45,410 --> 00:32:49,340
the output and so you can that like

00:32:47,390 --> 00:32:50,960
continuously test and fix things all

00:32:49,340 --> 00:33:02,780
time it was quite quite an involved

00:32:50,960 --> 00:33:14,000
process but you can see here whose other

00:33:02,780 --> 00:33:16,460
coding sheet I found where so what does

00:33:14,000 --> 00:33:18,640
that mean for our program that we saw

00:33:16,460 --> 00:33:18,640
before

00:33:23,049 --> 00:33:28,640
okay so there's the program so I should

00:33:26,659 --> 00:33:35,090
say I cheated I cheated a little bit

00:33:28,640 --> 00:33:47,000
here because I I wasn't so in the end so

00:33:35,090 --> 00:33:50,720
really the entire program so let's put a

00:33:47,000 --> 00:33:56,179
ruler here and that period is a column

00:33:50,720 --> 00:34:00,909
73 which really meant that the period

00:33:56,179 --> 00:34:15,679
was a totally ignored which meant that

00:34:00,909 --> 00:34:20,629
this if statement was really part so the

00:34:15,679 --> 00:34:24,590
way I fix this was I just moved it over

00:34:20,629 --> 00:34:30,500
one space to the left my period is that

00:34:24,590 --> 00:34:32,510
column 73 I'm told that like or use a

00:34:30,500 --> 00:34:35,690
shorter variable name or you rearrange

00:34:32,510 --> 00:34:38,230
the code I sort of set it up to work

00:34:35,690 --> 00:34:42,050
that way there's lots of ways to fix it

00:34:38,230 --> 00:34:43,849
I'm told that that that main free

00:34:42,050 --> 00:34:45,500
program moves that had to deal with of

00:34:43,849 --> 00:34:49,250
all the time sometimes we put a string

00:34:45,500 --> 00:34:51,919
down column 73 between 72 and 73 so they

00:34:49,250 --> 00:34:53,419
could see when they're hitting that like

00:34:51,919 --> 00:34:54,470
like you would just be aware that this

00:34:53,419 --> 00:34:57,410
would happen

00:34:54,470 --> 00:35:01,010
it's also easier to see because we would

00:34:57,410 --> 00:35:02,150
they would use column 73 384 comments or

00:35:01,010 --> 00:35:03,710
revision things because they didn't also

00:35:02,150 --> 00:35:06,020
remember they didn't have anything like

00:35:03,710 --> 00:35:07,730
they didn't have get back then we were

00:35:06,020 --> 00:35:11,720
put revision numbers just at the ends of

00:35:07,730 --> 00:35:12,830
the lines because those are essentially

00:35:11,720 --> 00:35:15,339
comments so you have to use them for

00:35:12,830 --> 00:35:15,339
something yeah

00:35:17,660 --> 00:35:23,990
to rate get in COBOL it would be

00:35:19,609 --> 00:35:25,369
difficult to rate get in cobalt I have

00:35:23,990 --> 00:35:29,270
not I have not tried to rate get in

00:35:25,369 --> 00:35:31,730
COBOL so this was really odd for me

00:35:29,270 --> 00:35:33,980
because I this is if I were to have

00:35:31,730 --> 00:35:36,140
written this in the system so I really

00:35:33,980 --> 00:35:37,579
only encountered this because I I had

00:35:36,140 --> 00:35:39,349
been working on the customer service

00:35:37,579 --> 00:35:40,730
system which was didn't use didn't code

00:35:39,349 --> 00:35:43,670
it this way the order entry system

00:35:40,730 --> 00:35:46,460
worked this way and I like we had been

00:35:43,670 --> 00:35:47,809
sort of like we only worked on Island

00:35:46,460 --> 00:35:48,920
Systems Inc after a while I've been

00:35:47,809 --> 00:35:51,440
there and said oh well everyone should

00:35:48,920 --> 00:35:56,000
sort of work on everything together the

00:35:51,440 --> 00:35:57,319
way I would have written this in you

00:35:56,000 --> 00:36:28,490
know and the system I normally worked on

00:35:57,319 --> 00:36:30,380
was which version of COBOL but yeah at

00:36:28,490 --> 00:36:32,150
some point they allowed you to just

00:36:30,380 --> 00:36:33,559
write freeform COBOL and the copilot

00:36:32,150 --> 00:36:38,180
could figure out what you wanted to do

00:36:33,559 --> 00:36:40,849
and the COBOL compilers I'd use which

00:36:38,180 --> 00:36:42,980
were the one on Stratos computers which

00:36:40,849 --> 00:36:45,470
I use at QVC and Canoe COBOL have a

00:36:42,980 --> 00:36:47,240
switch to say whether you should use

00:36:45,470 --> 00:36:49,220
formatted COBOL like the strictly

00:36:47,240 --> 00:36:51,920
formatted the old-fashioned format or

00:36:49,220 --> 00:36:54,529
free format which everyone can do that

00:36:51,920 --> 00:36:57,589
it's and you would think that like how

00:36:54,529 --> 00:36:59,599
hard could it be to reformat it from one

00:36:57,589 --> 00:37:00,980
style to the other but remember we're

00:36:59,599 --> 00:37:03,079
thinking today where we have Perl right

00:37:00,980 --> 00:37:04,460
then we have the systems to do that if

00:37:03,079 --> 00:37:06,380
you don't have a language at your

00:37:04,460 --> 00:37:11,779
disposal that's really good at parsing

00:37:06,380 --> 00:37:13,369
texts and and also like your your you

00:37:11,779 --> 00:37:15,349
know your billing system for your

00:37:13,369 --> 00:37:17,329
company is running on this and you don't

00:37:15,349 --> 00:37:20,710
want to screw anything up and just

00:37:17,329 --> 00:37:20,710
easier to leave the code the way it is

00:37:20,800 --> 00:37:26,650
I wonder how much could I bet a lot of

00:37:24,010 --> 00:37:32,770
cobalt code in the wild still uses the

00:37:26,650 --> 00:37:40,030
old format so so what are lessons from

00:37:32,770 --> 00:37:42,960
this what so I this is I think this is

00:37:40,030 --> 00:37:44,920
really I think the lesson is that

00:37:42,960 --> 00:37:46,330
decisions that they made at the time

00:37:44,920 --> 00:37:48,490
which were perfectly reasonable

00:37:46,330 --> 00:37:50,830
decisions can kind of come back and bite

00:37:48,490 --> 00:37:53,890
you you know and vice versa so you can

00:37:50,830 --> 00:37:55,720
take advantage of things at the time so

00:37:53,890 --> 00:37:59,470
fringes like pearl what could tell us

00:37:55,720 --> 00:38:01,560
about if your pearl developer in 2018 so

00:37:59,470 --> 00:38:03,550
like pearls a scripting language and

00:38:01,560 --> 00:38:06,430
lived in the idea of a scripting

00:38:03,550 --> 00:38:07,510
language in 1959 would be kind of crazy

00:38:06,430 --> 00:38:10,450
what do you mean you want to write a

00:38:07,510 --> 00:38:12,760
language you're automatically 10 times

00:38:10,450 --> 00:38:14,410
slower than a compiled language but it

00:38:12,760 --> 00:38:17,410
doesn't matter right because it's so

00:38:14,410 --> 00:38:20,650
fast enough it's kind of a crazy crazy

00:38:17,410 --> 00:38:21,970
thing right Larry also designed at a

00:38:20,650 --> 00:38:24,310
time where you could have hashes and

00:38:21,970 --> 00:38:26,170
dynamically allocated Drazen like memory

00:38:24,310 --> 00:38:29,580
was cheap enough that you could do that

00:38:26,170 --> 00:38:33,910
and it didn't really matter that much

00:38:29,580 --> 00:38:37,000
well the other hand like multi CPU

00:38:33,910 --> 00:38:39,070
systems were probably not anything that

00:38:37,000 --> 00:38:40,900
you probably Charlie didn't realize in

00:38:39,070 --> 00:38:44,080
like the mid 80s that they would be so

00:38:40,900 --> 00:38:45,820
common that like Perl and Python both

00:38:44,080 --> 00:38:47,440
have issues that trying to take

00:38:45,820 --> 00:38:49,570
advantage of multiple CPUs is a really

00:38:47,440 --> 00:38:51,640
difficult problem like python has that

00:38:49,570 --> 00:38:53,530
global lock that they still can't get

00:38:51,640 --> 00:38:56,710
rid of Larry had to write an entirely

00:38:53,530 --> 00:38:59,250
different language to have have

00:38:56,710 --> 00:38:59,250
threading hey

00:39:03,410 --> 00:39:17,189
but it's it's it works right now and

00:39:06,029 --> 00:39:19,739
it's you know I mean think of like

00:39:17,189 --> 00:39:21,630
what's even with trying to add like like

00:39:19,739 --> 00:39:23,579
like kind of first-class objects into

00:39:21,630 --> 00:39:26,009
the core the core of pearl has been also

00:39:23,579 --> 00:39:28,019
a difficult problem that's because it

00:39:26,009 --> 00:39:29,430
wasn't just it wasn't designed and from

00:39:28,019 --> 00:39:33,150
the start it's often really difficult to

00:39:29,430 --> 00:39:34,619
add in a GPUs are another example anyone

00:39:33,150 --> 00:39:37,380
that's like designed a computer a

00:39:34,619 --> 00:39:39,359
computer system before the days of cloud

00:39:37,380 --> 00:39:40,789
computing and microservices we're

00:39:39,359 --> 00:39:43,289
struggling this at my job that we have a

00:39:40,789 --> 00:39:45,809
big monolithic system that we're trying

00:39:43,289 --> 00:39:47,849
to break apart into services so we can

00:39:45,809 --> 00:39:48,930
scale things better it's really

00:39:47,849 --> 00:39:51,410
difficult to do that if you haven't

00:39:48,930 --> 00:39:53,670
thought about scaling up front you know

00:39:51,410 --> 00:39:55,469
accessibility and Unicode look at how

00:39:53,670 --> 00:39:57,150
much trouble still people have of

00:39:55,469 --> 00:39:59,689
dealing with Unicode and languages and

00:39:57,150 --> 00:40:02,430
she doesn't handle it very well

00:39:59,689 --> 00:40:07,469
Knoll terminated strings and see that

00:40:02,430 --> 00:40:09,089
they can't get rid of and you know

00:40:07,469 --> 00:40:11,160
probably we're all designing systems

00:40:09,089 --> 00:40:12,839
today that work and the regret decisions

00:40:11,160 --> 00:40:14,849
we made today five or ten years ago

00:40:12,839 --> 00:40:16,229
because you just never even considered

00:40:14,849 --> 00:40:20,309
that these things would be up issued

00:40:16,229 --> 00:40:22,199
just like having this design of of the

00:40:20,309 --> 00:40:24,839
way punchcards worked was so firmly

00:40:22,199 --> 00:40:27,920
deeply embedded in how COBOL worked that

00:40:24,839 --> 00:40:27,920
they couldn't get rid of them even today

00:40:28,519 --> 00:40:33,299
well if you want to screw around with

00:40:30,509 --> 00:40:36,179
COBOL there's an open-source version of

00:40:33,299 --> 00:40:39,150
it it began is open COBOL in 2002 it's a

00:40:36,179 --> 00:40:44,359
part of the new family of packages as of

00:40:39,150 --> 00:40:44,359
five years ago it's got a C API

00:40:45,509 --> 00:40:48,479
I think people asked me when I gave this

00:40:47,189 --> 00:40:52,709
stuff before what would you ever use

00:40:48,479 --> 00:40:54,509
this for the two things I could think of

00:40:52,709 --> 00:40:56,160
off the top my head were one if you had

00:40:54,509 --> 00:40:59,130
some code on a mainframe that you wanted

00:40:56,160 --> 00:41:00,749
to port to a Linux system if you wanted

00:40:59,130 --> 00:41:02,519
to I don't know put something out on

00:41:00,749 --> 00:41:04,439
rabbitmq or something like that they

00:41:02,519 --> 00:41:07,499
maybe you could take up some of the code

00:41:04,439 --> 00:41:09,719
you had and do that also if you had the

00:41:07,499 --> 00:41:12,390
other thing would be if you had data

00:41:09,719 --> 00:41:15,449
that had been generated on a mainframe

00:41:12,390 --> 00:41:17,310
in particular fixed format records with

00:41:15,449 --> 00:41:18,870
no the

00:41:17,310 --> 00:41:20,520
which still they're still government

00:41:18,870 --> 00:41:23,190
reports US government reports that look

00:41:20,520 --> 00:41:26,370
like that that are challenging to parse

00:41:23,190 --> 00:41:29,100
in you kind of do them in Pearl with a

00:41:26,370 --> 00:41:30,750
pack and unpack but it's it's unpleasant

00:41:29,100 --> 00:41:34,350
and it's pretty straightforward to do it

00:41:30,750 --> 00:41:35,790
in COBOL otherwise probably not unless

00:41:34,350 --> 00:41:38,030
you just wanted to screw around with it

00:41:35,790 --> 00:41:43,730
and see how it works

00:41:38,030 --> 00:41:47,810
so that's it so thank you very much and

00:41:43,730 --> 00:41:47,810
it's not some time so

00:41:50,010 --> 00:41:53,899

YouTube URL: https://www.youtube.com/watch?v=Fh5HHj79ybw


