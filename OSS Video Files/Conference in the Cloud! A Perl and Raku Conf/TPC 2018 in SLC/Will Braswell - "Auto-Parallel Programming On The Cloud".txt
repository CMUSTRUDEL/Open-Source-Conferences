Title: Will Braswell - "Auto-Parallel Programming On The Cloud"
Publication date: 2018-06-20
Playlist: TPC 2018 in SLC
Description: 
	Learn how to write code which will automatically execute in parallel on the cloud platform of your choice.

Push your programming skills to the next level with cutting-edge transpiler technologies.

Create new software with performance capabilities never before possible.

You won’t spend years manually parallelizing your code.

You won’t need a million-dollar supercomputer.

The future is now.
Captions: 
	00:00:00,000 --> 00:00:11,010
all right good morning everyone all

00:00:08,519 --> 00:00:13,200
right that was decent because it's so

00:00:11,010 --> 00:00:16,560
early in the morning yes sorry for

00:00:13,200 --> 00:00:18,690
waking everyone up but apparently we had

00:00:16,560 --> 00:00:22,920
to come and do an early morning

00:00:18,690 --> 00:00:25,710
presentation so my name is will the

00:00:22,920 --> 00:00:30,420
chill and some of y'all may know me by

00:00:25,710 --> 00:00:32,700
my legal name we'll Braswell I am with

00:00:30,420 --> 00:00:38,850
the Austin pearl mongers from Austin

00:00:32,700 --> 00:00:41,820
Texas and also my company auto parallel

00:00:38,850 --> 00:00:44,940
technologies which is a Perl programming

00:00:41,820 --> 00:00:49,289
company of course so today we're going

00:00:44,940 --> 00:00:51,860
to be talking about the cloud whatever

00:00:49,289 --> 00:00:51,860
that means

00:00:52,070 --> 00:00:57,570
specifically we're going to talk about

00:00:53,640 --> 00:00:59,520
Auto parallel programming in the cloud

00:00:57,570 --> 00:01:06,150
or on the cloud or however you want to

00:00:59,520 --> 00:01:07,950
consider that analogy so anybody that

00:01:06,150 --> 00:01:11,210
saw me present last year would remember

00:01:07,950 --> 00:01:15,720
that I tried to make the world's

00:01:11,210 --> 00:01:18,600
shortest PowerPoint by only having one

00:01:15,720 --> 00:01:22,530
slide so that's the end of the

00:01:18,600 --> 00:01:27,420
PowerPoint there you go okay moving on

00:01:22,530 --> 00:01:29,100
what is the cloud and I'll just talk for

00:01:27,420 --> 00:01:32,360
a moment we don't have an actual slide

00:01:29,100 --> 00:01:36,810
for this because this is a live coding

00:01:32,360 --> 00:01:42,509
presentation for the most part yay

00:01:36,810 --> 00:01:45,630
but I I wanted to talk for a moment

00:01:42,509 --> 00:01:50,189
about what is the cloud and I'll just

00:01:45,630 --> 00:01:52,409
put a placeholder website up here just

00:01:50,189 --> 00:01:54,149
so that everyone can see our cool

00:01:52,409 --> 00:01:57,420
picture of rody the roadrunner while I'm

00:01:54,149 --> 00:01:58,920
talking and we'll talk about art pearl

00:01:57,420 --> 00:02:02,640
in just a moment but first what is the

00:01:58,920 --> 00:02:05,009
cloud the cloud the cloud the cloud the

00:02:02,640 --> 00:02:08,069
cloud like there's one cloud that's just

00:02:05,009 --> 00:02:10,920
hanging over our heads at all times or

00:02:08,069 --> 00:02:12,540
like the entire atmosphere of the planet

00:02:10,920 --> 00:02:14,719
Earth is somehow

00:02:12,540 --> 00:02:17,310
charged with digital information

00:02:14,719 --> 00:02:20,099
magically now what does it mean

00:02:17,310 --> 00:02:22,620
okay I'm just curious anybody who here

00:02:20,099 --> 00:02:25,890
anybody here who considers yourself to

00:02:22,620 --> 00:02:27,540
be a cloud programmer and you actually

00:02:25,890 --> 00:02:29,730
know what that means and it's different

00:02:27,540 --> 00:02:33,870
than being a regular programmer raise

00:02:29,730 --> 00:02:35,540
your hand no cloud programmers okay well

00:02:33,870 --> 00:02:39,510
I have my hand up so I count I guess

00:02:35,540 --> 00:02:41,159
well that's good in order to really

00:02:39,510 --> 00:02:43,889
understand what the cloud is we have to

00:02:41,159 --> 00:02:47,549
go back a little bit in history to about

00:02:43,889 --> 00:02:49,950
15 years ago when there was a another

00:02:47,549 --> 00:02:53,310
very similar and related concept called

00:02:49,950 --> 00:02:55,889
the grid does anybody remember the grid

00:02:53,310 --> 00:02:58,290
or even just the term grid a little bit

00:02:55,889 --> 00:03:00,930
this was mostly in academia this is when

00:02:58,290 --> 00:03:03,419
I was in college and I was working for

00:03:00,930 --> 00:03:07,530
the supercomputer Center at Texas Tech

00:03:03,419 --> 00:03:09,540
University and programming their Linux

00:03:07,530 --> 00:03:15,120
computers there and using some perl is

00:03:09,540 --> 00:03:20,819
well along the way so we we were working

00:03:15,120 --> 00:03:23,729
on building a cooperative system among a

00:03:20,819 --> 00:03:28,500
number of educational institutions in

00:03:23,729 --> 00:03:31,799
America and abroad using this term the

00:03:28,500 --> 00:03:33,599
grid or just a grid kind of similar to

00:03:31,799 --> 00:03:36,569
how we talk about the cloud versus a

00:03:33,599 --> 00:03:40,220
cloud and it does mirror that definition

00:03:36,569 --> 00:03:47,400
as you'll see in a moment so essentially

00:03:40,220 --> 00:03:50,579
the grid was a combination of computing

00:03:47,400 --> 00:03:52,859
on demand so in the same way that

00:03:50,579 --> 00:03:56,459
nowadays we can just spin up an virtual

00:03:52,859 --> 00:04:01,459
machine instance in a matter of moments

00:03:56,459 --> 00:04:03,959
on any number of websites so taking that

00:04:01,459 --> 00:04:07,199
ability to do computing on demand and

00:04:03,959 --> 00:04:09,359
then combining it with utility pricing

00:04:07,199 --> 00:04:12,949
okay like how we pay for water and

00:04:09,359 --> 00:04:17,269
electricity or internet in a utility

00:04:12,949 --> 00:04:20,410
billing fashion so there were a couple

00:04:17,269 --> 00:04:23,419
companies early on that

00:04:20,410 --> 00:04:27,350
tried to create grid solutions and I I

00:04:23,419 --> 00:04:29,509
used most all of them in my official

00:04:27,350 --> 00:04:33,169
capacity working as a programmer at the

00:04:29,509 --> 00:04:35,389
supercomputer center there was a Sun

00:04:33,169 --> 00:04:37,729
Grid Engine which was very expensive but

00:04:35,389 --> 00:04:40,880
advanced and ultimately a commercial

00:04:37,729 --> 00:04:43,880
failure through of course Sun and there

00:04:40,880 --> 00:04:47,270
was one called Globus that was like a

00:04:43,880 --> 00:04:50,150
public sort of GPL type open-source

00:04:47,270 --> 00:04:51,410
version there was another probably the

00:04:50,150 --> 00:04:56,150
most advanced one that was called

00:04:51,410 --> 00:04:59,840
Avakian aliy called Legion and and at

00:04:56,150 --> 00:05:00,979
Texas Tech actually did buy a license to

00:04:59,840 --> 00:05:03,110
that and we got to use it and

00:05:00,979 --> 00:05:06,020
essentially what the grid allowed us to

00:05:03,110 --> 00:05:09,229
do is to take all of our computers at

00:05:06,020 --> 00:05:12,110
Tech Texas Tech which was a whole bunch

00:05:09,229 --> 00:05:14,090
of pcs in the library and a whole bunch

00:05:12,110 --> 00:05:15,650
of supercomputers like the math

00:05:14,090 --> 00:05:16,820
department owned one and the computer

00:05:15,650 --> 00:05:18,560
science department owned a few in the

00:05:16,820 --> 00:05:21,139
physics department owned one so we went

00:05:18,560 --> 00:05:22,699
and we installed this grid software on

00:05:21,139 --> 00:05:25,130
all these different computers several

00:05:22,699 --> 00:05:26,750
hundred computers and connected them all

00:05:25,130 --> 00:05:29,599
up and then were able to actually use

00:05:26,750 --> 00:05:32,030
them as one massive super duper computer

00:05:29,599 --> 00:05:33,800
and that was all within Texas Tech

00:05:32,030 --> 00:05:38,800
University's campus so that was called

00:05:33,800 --> 00:05:38,800
tech grid I helped to build tech grid

00:05:39,699 --> 00:05:46,000
probably was about 16 years old at the

00:05:42,139 --> 00:05:48,770
time then we took tech grid and

00:05:46,000 --> 00:05:52,539
connected it to the other universities

00:05:48,770 --> 00:05:56,270
that had also built their own grid

00:05:52,539 --> 00:05:58,009
systems and this was we had one group

00:05:56,270 --> 00:05:59,659
called hip cat high performance

00:05:58,009 --> 00:06:02,750
computing across Texas which was like

00:05:59,659 --> 00:06:05,810
Texas Tech and UT and several other

00:06:02,750 --> 00:06:09,289
Texas universities there was also you

00:06:05,810 --> 00:06:12,650
guys may recall a term or a group called

00:06:09,289 --> 00:06:14,870
Internet too and this was sort of an

00:06:12,650 --> 00:06:18,940
attempt to create high speed linkages

00:06:14,870 --> 00:06:22,190
between the global sites of these grids

00:06:18,940 --> 00:06:24,669
okay and yes this all very much has to

00:06:22,190 --> 00:06:26,659
do with the question of what is a cloud

00:06:24,669 --> 00:06:28,340
because we're actually telling you how

00:06:26,659 --> 00:06:29,930
the cloud was born which I'm guessing

00:06:28,340 --> 00:06:31,370
most people don't have any idea about

00:06:29,930 --> 00:06:33,740
because you weren't there doing it

00:06:31,370 --> 00:06:35,210
with us unless you were in in which case

00:06:33,740 --> 00:06:38,530
you should have already raised your hand

00:06:35,210 --> 00:06:43,100
when I asked who was a cloud programmer

00:06:38,530 --> 00:06:47,360
the term grid eventually went away

00:06:43,100 --> 00:06:49,550
because of a schism within the community

00:06:47,360 --> 00:06:51,949
which we know a little bit about here in

00:06:49,550 --> 00:06:56,449
the purl community essentially there was

00:06:51,949 --> 00:06:58,520
two types of grids which is similar kind

00:06:56,449 --> 00:07:00,280
of in a way to that we have clouds now

00:06:58,520 --> 00:07:04,540
or the usage of clouds but there was a

00:07:00,280 --> 00:07:07,729
compute grid that was essentially a

00:07:04,540 --> 00:07:10,400
conglomeration or pooling of memory and

00:07:07,729 --> 00:07:13,790
CPU resources and then there was a data

00:07:10,400 --> 00:07:16,639
storage grid which is a glorified na s

00:07:13,790 --> 00:07:19,490
or you know gigantic hard drive

00:07:16,639 --> 00:07:21,650
essentially and as I'm sure you can

00:07:19,490 --> 00:07:23,750
imagine having a gigantic hard drive is

00:07:21,650 --> 00:07:26,180
very useful and we all have that now

00:07:23,750 --> 00:07:29,090
with our online storage and even flash

00:07:26,180 --> 00:07:32,180
drives and whatnot but having a gigantic

00:07:29,090 --> 00:07:35,090
computing power is much more impactful

00:07:32,180 --> 00:07:37,400
to humanity when you consider things

00:07:35,090 --> 00:07:39,500
like those universities that are trying

00:07:37,400 --> 00:07:41,780
to cure cancer and run simulations for

00:07:39,500 --> 00:07:43,729
the benefit of all mankind and that was

00:07:41,780 --> 00:07:45,680
what we were trying to of course effect

00:07:43,729 --> 00:07:48,070
by having all these universities

00:07:45,680 --> 00:07:51,020
building the grids together

00:07:48,070 --> 00:07:55,220
unfortunately the compute grids never

00:07:51,020 --> 00:07:57,860
took off nobody ever really was able to

00:07:55,220 --> 00:07:59,990
use them for one critical reason which

00:07:57,860 --> 00:08:02,510
is again one of the things that I'm here

00:07:59,990 --> 00:08:05,630
to tell you guys about now it was too

00:08:02,510 --> 00:08:08,240
expensive and difficult to write a lot

00:08:05,630 --> 00:08:12,169
of parallel code to run on these

00:08:08,240 --> 00:08:14,300
extremely heterogeneous systems because

00:08:12,169 --> 00:08:16,520
it wasn't just like one MPI system or

00:08:14,300 --> 00:08:18,380
one pthread system or one openmp system

00:08:16,520 --> 00:08:21,669
it was like everything mixed together in

00:08:18,380 --> 00:08:24,680
this gigantic mishmash of the grid and

00:08:21,669 --> 00:08:27,260
that's where auto parallel programming

00:08:24,680 --> 00:08:29,060
comes in which is part of the name of

00:08:27,260 --> 00:08:31,789
today's presentation and also part of

00:08:29,060 --> 00:08:35,630
the name of my company Auto parallel

00:08:31,789 --> 00:08:38,990
technologies or app tech for short so

00:08:35,630 --> 00:08:41,810
what we saw about 10 years ago was

00:08:38,990 --> 00:08:44,500
essentially a complete dying off of this

00:08:41,810 --> 00:08:46,420
really awesome technology of calm

00:08:44,500 --> 00:08:48,550
cute grids and I had mentioned this one

00:08:46,420 --> 00:08:50,770
software called legion /of aki that

00:08:48,550 --> 00:08:52,090
software is amazing and maybe someday

00:08:50,770 --> 00:08:53,860
we'll be able to go back and use it you

00:08:52,090 --> 00:08:56,050
know what it's written in Perl it's like

00:08:53,860 --> 00:08:59,140
a million lines of Perl and it's so

00:08:56,050 --> 00:09:00,970
friggin slow but once it runs it's got

00:08:59,140 --> 00:09:04,090
like a five minute spin up time or

00:09:00,970 --> 00:09:06,820
something crazy but once it starts up it

00:09:04,090 --> 00:09:11,920
allows you to do some pretty amazing

00:09:06,820 --> 00:09:14,560
things that even Amazon in their AWS and

00:09:11,920 --> 00:09:15,970
advanced other cloud systems are still

00:09:14,560 --> 00:09:18,490
trying to kind of catch up with what

00:09:15,970 --> 00:09:23,710
Avakian Legion we're doing 15-20 years

00:09:18,490 --> 00:09:25,510
ago in Perl super slow Perl we've got

00:09:23,710 --> 00:09:27,880
our Perl now to speed that up which I

00:09:25,510 --> 00:09:30,310
will also mention in a minute back to

00:09:27,880 --> 00:09:32,260
the cloud we're still wondering where

00:09:30,310 --> 00:09:34,630
did the cloud come from well everybody

00:09:32,260 --> 00:09:38,800
that needed a gigantic hard drive had

00:09:34,630 --> 00:09:40,360
the data storage grids to use after the

00:09:38,800 --> 00:09:43,420
compute grids kind of fell by the

00:09:40,360 --> 00:09:46,030
wayside and the commercial attempts at

00:09:43,420 --> 00:09:46,780
doing the grids failed Avakian out of

00:09:46,030 --> 00:09:49,390
business

00:09:46,780 --> 00:09:51,480
son got bought out and their son grid

00:09:49,390 --> 00:09:55,450
engine never was a commercial success

00:09:51,480 --> 00:09:57,430
however we did eventually see some new

00:09:55,450 --> 00:10:00,160
technology that helped us move back and

00:09:57,430 --> 00:10:02,170
rebrand the grid as the cloud and that

00:10:00,160 --> 00:10:04,120
technology is like the virtual machines

00:10:02,170 --> 00:10:08,920
and container technology that makes

00:10:04,120 --> 00:10:11,230
Amazon and other cloud systems very easy

00:10:08,920 --> 00:10:13,240
and quick to use now so you don't have

00:10:11,230 --> 00:10:16,690
to do like I did with spending months

00:10:13,240 --> 00:10:19,930
installing lavake and Globus and dadada

00:10:16,690 --> 00:10:20,740
by hand on hundreds of systems they'll

00:10:19,930 --> 00:10:23,200
have to do that anymore

00:10:20,740 --> 00:10:26,260
you can click one button and Amazon will

00:10:23,200 --> 00:10:28,690
give you a hundred CPUs or a thousand

00:10:26,260 --> 00:10:31,480
CPUs or whatever you want and it is

00:10:28,690 --> 00:10:33,490
running using the utility billing

00:10:31,480 --> 00:10:35,290
because you only get charged when you

00:10:33,490 --> 00:10:36,640
start up the CPUs and then you spin them

00:10:35,290 --> 00:10:40,270
back down again so it's like a per

00:10:36,640 --> 00:10:45,610
minute or per hour type billing so that

00:10:40,270 --> 00:10:48,400
definition of grid compute grid and data

00:10:45,610 --> 00:10:51,550
storage grid does actually directly

00:10:48,400 --> 00:10:54,040
apply to the cloud so what is the cloud

00:10:51,550 --> 00:10:56,440
the cloud is essentially the rebranded

00:10:54,040 --> 00:10:57,830
recombined technologies of the compute

00:10:56,440 --> 00:11:00,920
and data storage grids

00:10:57,830 --> 00:11:03,769
it's computing on demand at utility

00:11:00,920 --> 00:11:06,320
billing so that was my long-winded way

00:11:03,769 --> 00:11:08,240
of giving you a definition for what the

00:11:06,320 --> 00:11:09,740
cloud is because if I didn't then the

00:11:08,240 --> 00:11:12,769
rest of this talk would be kind of

00:11:09,740 --> 00:11:15,050
confusing and meaningless what is the

00:11:12,769 --> 00:11:17,600
cloud the cloud is a rebranded version

00:11:15,050 --> 00:11:22,519
of both the compute and data storage

00:11:17,600 --> 00:11:26,990
grids which provides compute resources

00:11:22,519 --> 00:11:28,970
on demand at utility billing that's the

00:11:26,990 --> 00:11:30,560
definition of the cloud by somebody

00:11:28,970 --> 00:11:32,930
who's standing here in front of you that

00:11:30,560 --> 00:11:34,160
helped to build this technology from

00:11:32,930 --> 00:11:36,470
scratch and I'm going to show you some

00:11:34,160 --> 00:11:38,740
more cool from scratch cloud stuff that

00:11:36,470 --> 00:11:41,930
I've built here in a moment so our pearl

00:11:38,740 --> 00:11:43,970
what is our pearl who here knows what

00:11:41,930 --> 00:11:46,880
our pearl is hopefully at least a few of

00:11:43,970 --> 00:11:49,279
you do okay good then you probably

00:11:46,880 --> 00:11:51,500
already either love me or hate me if you

00:11:49,279 --> 00:11:54,260
had your hands up just a minute ago but

00:11:51,500 --> 00:11:56,149
our pearl stands for I don't know what

00:11:54,260 --> 00:11:59,829
revolutionary Pearl restricted Pearl

00:11:56,149 --> 00:12:04,130
Roadrunner pearl you can choose your own

00:11:59,829 --> 00:12:07,190
interpretation but it our pearl is the

00:12:04,130 --> 00:12:09,740
pearl compiler okay so this is if you

00:12:07,190 --> 00:12:12,050
want to either protect your intellectual

00:12:09,740 --> 00:12:16,070
property or if you want your code to run

00:12:12,050 --> 00:12:18,589
fast and since I personally am partial

00:12:16,070 --> 00:12:20,690
to free and open source software I'm not

00:12:18,589 --> 00:12:24,260
too concerned with protecting my IP

00:12:20,690 --> 00:12:26,120
although maybe some of you know your

00:12:24,260 --> 00:12:28,490
corporate clients and customers are

00:12:26,120 --> 00:12:30,110
concerned about that for me and

00:12:28,490 --> 00:12:32,810
everything I just talked to you about

00:12:30,110 --> 00:12:35,870
all has to do with performance right I

00:12:32,810 --> 00:12:38,270
care about speed above all else this is

00:12:35,870 --> 00:12:40,820
what computing was originally in is

00:12:38,270 --> 00:12:43,459
still supposed to be about whoever has

00:12:40,820 --> 00:12:46,279
the fastest most powerful hardware and

00:12:43,459 --> 00:12:49,940
software you have to have both that

00:12:46,279 --> 00:12:51,649
person is king all right if you only

00:12:49,940 --> 00:12:53,870
have fast Hardware you're gonna have a

00:12:51,649 --> 00:12:56,180
bunch of commercial failure like we saw

00:12:53,870 --> 00:12:59,060
with the the grid and if you only have a

00:12:56,180 --> 00:13:03,019
bunch of software then you're gonna have

00:12:59,060 --> 00:13:07,250
slow solutions even if it's the world's

00:13:03,019 --> 00:13:11,329
shiniest solution so I care about both

00:13:07,250 --> 00:13:14,360
and I'm extremely loyal as

00:13:11,329 --> 00:13:17,509
sure you guys can tell a year after year

00:13:14,360 --> 00:13:20,929
I'm here in uniform representing high

00:13:17,509 --> 00:13:24,439
ideals and also representing high

00:13:20,929 --> 00:13:28,369
performance and I'm loyal to Perl which

00:13:24,439 --> 00:13:31,100
is why I spent the last six or seven

00:13:28,369 --> 00:13:34,910
years now working on the AR Perl

00:13:31,100 --> 00:13:39,889
compiler what does our Perl do our Perl

00:13:34,910 --> 00:13:42,079
takes your parole 5 source code some

00:13:39,889 --> 00:13:45,319
point will support Perl 6 you don't need

00:13:42,079 --> 00:13:48,410
to worry about that today but we take

00:13:45,319 --> 00:13:51,139
your Perl 5 source code as input do a

00:13:48,410 --> 00:13:55,549
whole bunch of magic on that and we

00:13:51,139 --> 00:13:58,730
generate c++ and then of course a binary

00:13:55,549 --> 00:14:00,410
file as the output so if you want to

00:13:58,730 --> 00:14:01,549
keep your own C++ and read the source

00:14:00,410 --> 00:14:03,350
code and see what Pro looks like

00:14:01,549 --> 00:14:04,639
compiled you sure you can do that but

00:14:03,350 --> 00:14:09,889
probably what you care about is

00:14:04,639 --> 00:14:12,619
compiling your PM files into s o or dot

00:14:09,889 --> 00:14:15,199
DLL files and what you probably care

00:14:12,619 --> 00:14:19,040
about is compiling your dot PL files

00:14:15,199 --> 00:14:20,959
into a dot out or exe files and that's

00:14:19,040 --> 00:14:23,889
what you're gonna get to see here today

00:14:20,959 --> 00:14:28,129
and that's that's what our Perl does

00:14:23,889 --> 00:14:34,749
okay so our parole is a compiler I'll

00:14:28,129 --> 00:14:39,889
also talk briefly about another software

00:14:34,749 --> 00:14:44,290
that is one of the arm Perl application

00:14:39,889 --> 00:14:47,389
Suites this is called math Perl and

00:14:44,290 --> 00:14:48,980
essentially I have started writing

00:14:47,389 --> 00:14:51,919
physics Perl and math parole I've only

00:14:48,980 --> 00:14:54,709
got a few algorithms and applications

00:14:51,919 --> 00:14:57,259
done in each because of course physics

00:14:54,709 --> 00:15:00,679
and math are seemingly infinite in

00:14:57,259 --> 00:15:03,319
complexity and I'm a scientist so this

00:15:00,679 --> 00:15:05,749
is this is why I'm doing all this so

00:15:03,319 --> 00:15:07,489
that I can run simulations and do

00:15:05,749 --> 00:15:11,329
physics and math for the benefit of

00:15:07,489 --> 00:15:16,249
mankind and build cool things like we

00:15:11,329 --> 00:15:21,019
see in Star Trek I got a check beam me

00:15:16,249 --> 00:15:23,660
up Scotty Scotty now okay still not

00:15:21,019 --> 00:15:24,520
working at some point this combadge will

00:15:23,660 --> 00:15:27,190
work

00:15:24,520 --> 00:15:29,500
at some point and yes I did have to earn

00:15:27,190 --> 00:15:33,310
this it's not a freebie space badge look

00:15:29,500 --> 00:15:35,080
it up so math pearl is an application

00:15:33,310 --> 00:15:38,440
suite essentially I just started writing

00:15:35,080 --> 00:15:41,020
random math algorithms using our pearl

00:15:38,440 --> 00:15:42,850
okay and we're going to look at one of

00:15:41,020 --> 00:15:45,760
them let me see if I can kind of zoom

00:15:42,850 --> 00:15:50,590
this in a little bit for the benefit of

00:15:45,760 --> 00:15:58,500
the viewers whew okay that might be too

00:15:50,590 --> 00:16:02,250
much so there is a linear algebra

00:15:58,500 --> 00:16:09,520
algorithm called gauss seidel

00:16:02,250 --> 00:16:12,930
and this is used for solving a series of

00:16:09,520 --> 00:16:16,690
linear equations if I remember correctly

00:16:12,930 --> 00:16:19,720
and you can see the math here so yeah

00:16:16,690 --> 00:16:22,120
this is a this is actually a PL file in

00:16:19,720 --> 00:16:23,290
this case usually I show p.m. files but

00:16:22,120 --> 00:16:26,610
since we're about to do something

00:16:23,290 --> 00:16:26,610
special with it it's a PL file

00:16:28,020 --> 00:16:35,920
essentially we're just initializing an

00:16:30,820 --> 00:16:38,980
array to a certain size and then looping

00:16:35,920 --> 00:16:43,150
over it with these three nested loops

00:16:38,980 --> 00:16:45,010
and then doing some arithmetic on the

00:16:43,150 --> 00:16:46,480
inner loop so you should be able to just

00:16:45,010 --> 00:16:48,160
kind of look at this and know what I'm

00:16:46,480 --> 00:16:50,860
trying to convey to you without needing

00:16:48,160 --> 00:16:53,500
to worry about why you should use gauss

00:16:50,860 --> 00:16:55,060
seidel in your everyday lives which

00:16:53,500 --> 00:16:57,400
maybe you shouldn't if you're not a

00:16:55,060 --> 00:16:59,260
mathematician or a scientist but it is

00:16:57,400 --> 00:17:01,360
an important algorithm that exists in

00:16:59,260 --> 00:17:07,209
math and we care about it in the sense

00:17:01,360 --> 00:17:11,280
that it does something real so we're

00:17:07,209 --> 00:17:13,810
gonna we're gonna run this let's see

00:17:11,280 --> 00:17:17,620
this is going to be an adventure of me

00:17:13,810 --> 00:17:20,440
toggling between screens and figuring

00:17:17,620 --> 00:17:22,810
out how to get my code up on the correct

00:17:20,440 --> 00:17:32,639
screen here so you'll have to bear with

00:17:22,810 --> 00:17:37,379
me as I as I do this all right

00:17:32,639 --> 00:17:42,190
so let's see if I can move this terminal

00:17:37,379 --> 00:17:45,460
over like that and then I'm at the zoom

00:17:42,190 --> 00:17:49,090
in oh you know what this son of a gun is

00:17:45,460 --> 00:17:55,620
so hard to see now that I realize that I

00:17:49,090 --> 00:17:59,879
have to edit the settings real quick

00:17:55,620 --> 00:17:59,879
because it's impossible to see otherwise

00:18:00,870 --> 00:18:06,940
where is my font size I can barely see

00:18:03,759 --> 00:18:08,499
it there it is come on nine point font

00:18:06,940 --> 00:18:10,259
can't you guys see that in the back of

00:18:08,499 --> 00:18:13,799
the room

00:18:10,259 --> 00:18:16,269
okay that's still a little bit too small

00:18:13,799 --> 00:18:20,799
thank the home viewers for bearing with

00:18:16,269 --> 00:18:25,210
us okay can you guys see that now it's

00:18:20,799 --> 00:18:27,820
right up here cloud web zero I hope so

00:18:25,210 --> 00:18:30,909
is there a way to turn on bold maybe

00:18:27,820 --> 00:18:41,049
that will help okay so as good as we're

00:18:30,909 --> 00:18:43,690
getting guys and gals okay so this is my

00:18:41,049 --> 00:18:47,679
cloud server I've got a couple of them

00:18:43,690 --> 00:18:53,409
and I've been through a couple different

00:18:47,679 --> 00:18:56,289
hosting providers that I'll just say two

00:18:53,409 --> 00:18:58,480
of them have utterly failed me and

00:18:56,289 --> 00:19:02,200
caused me to have to restart over from

00:18:58,480 --> 00:19:05,529
scratch which is really annoying but I

00:19:02,200 --> 00:19:07,899
will say that I do have a good hosting

00:19:05,529 --> 00:19:09,549
provider in Dallas now and if anybody

00:19:07,899 --> 00:19:13,840
wants the recommendation I can give it

00:19:09,549 --> 00:19:15,279
afterwards so this is my cloud - web

00:19:13,840 --> 00:19:20,019
zero is simply the name of the server

00:19:15,279 --> 00:19:25,570
and we are going to try and run that

00:19:20,019 --> 00:19:31,389
gauss-seidel program so which are purl

00:19:25,570 --> 00:19:38,259
so our perl is installed there I'm going

00:19:31,389 --> 00:19:39,610
to turn on the extra messages here just

00:19:38,259 --> 00:19:42,389
so we can kind of see more of what our

00:19:39,610 --> 00:19:44,920
poll is doing while it's running and

00:19:42,389 --> 00:19:46,360
well maybe I can turn

00:19:44,920 --> 00:19:54,130
this whole podium because otherwise I'm

00:19:46,360 --> 00:19:59,050
gonna stretch my neck out trying to turn

00:19:54,130 --> 00:20:05,140
and look constantly here okay that's a

00:19:59,050 --> 00:20:09,960
little bit better so if I were simply to

00:20:05,140 --> 00:20:12,220
do a regular parole - V oh my goodness

00:20:09,960 --> 00:20:16,740
we see what version of regular pearl

00:20:12,220 --> 00:20:16,740
were running is up with this microphone

00:20:17,100 --> 00:20:22,060
is it going to stay there's regular

00:20:20,110 --> 00:20:26,860
pearl pearl five two two one

00:20:22,060 --> 00:20:29,160
okay so now if we do our parole - V this

00:20:26,860 --> 00:20:31,090
is a completely different program okay

00:20:29,160 --> 00:20:34,270
takes a minute because it has to

00:20:31,090 --> 00:20:38,020
bootstrap its own self by compiling

00:20:34,270 --> 00:20:40,630
there we go so we saw a whole bunch of

00:20:38,020 --> 00:20:42,880
stuff flash by here that I'll scroll

00:20:40,630 --> 00:20:45,790
back up - that's kind of a big compile

00:20:42,880 --> 00:20:49,060
Asian statement there and if you guys

00:20:45,790 --> 00:20:54,340
can see that but this is a this is one g

00:20:49,060 --> 00:20:55,630
+ + command right there and you can kind

00:20:54,340 --> 00:21:00,720
of see buried in the middle of it right

00:20:55,630 --> 00:21:04,480
here there's a C++ 11 flag which is

00:21:00,720 --> 00:21:07,590
critical because it was possible but

00:21:04,480 --> 00:21:14,110
impractical to build our Perl before

00:21:07,590 --> 00:21:15,850
2011 due to the limitations of C++ the

00:21:14,110 --> 00:21:17,770
reason why we have to use C++ is because

00:21:15,850 --> 00:21:19,870
it's binary compatible with c and c is

00:21:17,770 --> 00:21:21,610
what the pro 5 core is written in so you

00:21:19,870 --> 00:21:23,470
have to be able to be binary compatible

00:21:21,610 --> 00:21:27,670
with the Perl core or else it doesn't

00:21:23,470 --> 00:21:30,670
work at all C itself is of course not

00:21:27,670 --> 00:21:35,080
quite as powerful as C++ and C++ using

00:21:30,670 --> 00:21:38,530
the older standards is too limited to

00:21:35,080 --> 00:21:41,440
implement even a subset really of Perl

00:21:38,530 --> 00:21:45,160
but C++ 11 has some really cool new

00:21:41,440 --> 00:21:47,950
features and C++ 14 as well that allow

00:21:45,160 --> 00:21:51,870
us to do that including smart pointers

00:21:47,950 --> 00:21:57,520
which does garbage collection in C++ and

00:21:51,870 --> 00:21:58,750
also the standard unordered map data

00:21:57,520 --> 00:22:04,480
structure which allows

00:21:58,750 --> 00:22:06,820
to emulate april hv or hash value etc so

00:22:04,480 --> 00:22:09,400
we can also see what version of our

00:22:06,820 --> 00:22:13,000
pearl running which is 3 601 and that is

00:22:09,400 --> 00:22:15,100
the latest version off of github or I'll

00:22:13,000 --> 00:22:19,270
just probably start saying get from now

00:22:15,100 --> 00:22:22,150
on that's the latest version on git and

00:22:19,270 --> 00:22:25,690
forget I just said that other H part of

00:22:22,150 --> 00:22:29,080
the word although I was trying to update

00:22:25,690 --> 00:22:31,210
all my code to bitbucket and get lab

00:22:29,080 --> 00:22:35,640
before I got here and of course that did

00:22:31,210 --> 00:22:37,530
not happen fast enough but our perl is

00:22:35,640 --> 00:22:40,720
ungettable

00:22:37,530 --> 00:22:43,380
and a zero for those of you that know

00:22:40,720 --> 00:22:43,380
what I'm talking about

00:22:43,390 --> 00:22:49,120
alright so that was just me running our

00:22:45,490 --> 00:22:51,010
Perl - V now we're gonna actually run

00:22:49,120 --> 00:22:53,440
that gauss-seidel program that I

00:22:51,010 --> 00:22:54,910
mentioned alright don't you guys wish I

00:22:53,440 --> 00:22:58,690
was just going through PowerPoint slides

00:22:54,910 --> 00:23:01,780
and reading my own words to you that

00:22:58,690 --> 00:23:04,090
would be so awesome wouldn't it sorry I

00:23:01,780 --> 00:23:06,940
didn't put the time into building a

00:23:04,090 --> 00:23:09,790
PowerPoint deck I know I'm such a lazy

00:23:06,940 --> 00:23:14,770
bone okay so let's see where is

00:23:09,790 --> 00:23:24,330
gauss-seidel that is in math parole all

00:23:14,770 --> 00:23:29,020
right so first if I just run the program

00:23:24,330 --> 00:23:32,620
the gauss-seidel program without and our

00:23:29,020 --> 00:23:34,180
parole prefix this is kind of like when

00:23:32,620 --> 00:23:36,580
you run a PL file you don't have to

00:23:34,180 --> 00:23:38,170
always type Perl space and then

00:23:36,580 --> 00:23:40,540
something dot PL because you have the

00:23:38,170 --> 00:23:45,780
hash bang right and it's the same thing

00:23:40,540 --> 00:23:49,270
here so I can do it like this well

00:23:45,780 --> 00:23:51,160
there's some okay what we just saw was

00:23:49,270 --> 00:23:54,220
not my fault that is some bizarre wacky

00:23:51,160 --> 00:23:56,440
artifact I think of this USB connector

00:23:54,220 --> 00:23:57,820
that causes the screen to flash like

00:23:56,440 --> 00:24:00,010
that and let's just hope it doesn't do a

00:23:57,820 --> 00:24:02,410
whole bunch of times did you see that

00:24:00,010 --> 00:24:05,350
camera guy I'm blaming that on y'all

00:24:02,410 --> 00:24:08,830
somehow okay he raised his hand he took

00:24:05,350 --> 00:24:13,080
responsibility let's see what happens

00:24:08,830 --> 00:24:13,080
when we run gauss seidel

00:24:13,890 --> 00:24:18,490
actually let's see let's actually edit

00:24:16,630 --> 00:24:20,800
this real quick first because I remember

00:24:18,490 --> 00:24:23,710
oh my goodness this syntax highlighting

00:24:20,800 --> 00:24:26,140
will give me a stroke I just remembered

00:24:23,710 --> 00:24:28,180
that I need to change the size of the

00:24:26,140 --> 00:24:29,500
run here the first time otherwise that

00:24:28,180 --> 00:24:32,380
will be running on a thousand iterations

00:24:29,500 --> 00:24:37,030
and we don't want that just yet that's

00:24:32,380 --> 00:24:42,340
for when we have it compiled okay let's

00:24:37,030 --> 00:24:44,800
run this puppy in regular Perl mode and

00:24:42,340 --> 00:24:47,350
actually now that I say that I need to

00:24:44,800 --> 00:24:55,210
give one more quick preface our Perl has

00:24:47,350 --> 00:24:57,520
three modes okay there's regular Perl

00:24:55,210 --> 00:24:59,670
ops Perl types mode which is what we're

00:24:57,520 --> 00:25:02,500
about to run right now and this is where

00:24:59,670 --> 00:25:04,030
it's running at one times the speed of

00:25:02,500 --> 00:25:06,700
normal parole because it is running

00:25:04,030 --> 00:25:11,800
using normal Perl there's also a medium

00:25:06,700 --> 00:25:17,410
speed mode which is when you have Perl

00:25:11,800 --> 00:25:21,340
types but C++ operations and that

00:25:17,410 --> 00:25:25,300
usually runs about like the in the order

00:25:21,340 --> 00:25:28,120
of magnitude of 10x so 10 times the

00:25:25,300 --> 00:25:29,740
speed of normal Perl but I don't really

00:25:28,120 --> 00:25:32,260
care about that medium speed mode right

00:25:29,740 --> 00:25:35,350
now or medium magic mode as I call it

00:25:32,260 --> 00:25:37,060
and obviously the low speed low magic

00:25:35,350 --> 00:25:38,530
mode is what we already have so we don't

00:25:37,060 --> 00:25:40,120
care too much about that in any special

00:25:38,530 --> 00:25:42,880
way what we do care about and what we'll

00:25:40,120 --> 00:25:47,770
see in a minute after we do this one is

00:25:42,880 --> 00:25:51,460
the high speed mode which is C++

00:25:47,770 --> 00:25:56,860
operations and C++ types but first the

00:25:51,460 --> 00:25:58,270
1x mode and we see here that it did a

00:25:56,860 --> 00:25:59,380
bunch of math and spit out a bunch of

00:25:58,270 --> 00:26:01,540
stuff that we don't even care about

00:25:59,380 --> 00:26:04,410
except that we're just going to assume

00:26:01,540 --> 00:26:07,150
that the numbers are correct and

00:26:04,410 --> 00:26:11,980
scrolling back up to the top here you

00:26:07,150 --> 00:26:13,270
can see that this helper functions which

00:26:11,980 --> 00:26:16,270
is our bootstrapping I mentioned a

00:26:13,270 --> 00:26:17,530
minute ago skipped over itself because

00:26:16,270 --> 00:26:20,260
it was already done because it caches

00:26:17,530 --> 00:26:22,060
its own compiled files and then it

00:26:20,260 --> 00:26:23,440
started running here with the initial

00:26:22,060 --> 00:26:25,480
values and then after several iterations

00:26:23,440 --> 00:26:29,320
because it is an iterative

00:26:25,480 --> 00:26:30,850
of algorithm an approximation iterative

00:26:29,320 --> 00:26:32,140
algorithm it came up with this final

00:26:30,850 --> 00:26:34,540
answer and we could increase the number

00:26:32,140 --> 00:26:36,460
of iterations and so forth but that's

00:26:34,540 --> 00:26:40,360
that's a very close approximation of the

00:26:36,460 --> 00:26:42,340
actual answer this just ran at one times

00:26:40,360 --> 00:26:45,790
the speed of normal pearl so you could

00:26:42,340 --> 00:26:48,220
actually kind of like see the the

00:26:45,790 --> 00:26:51,510
numbers scroll by there briefly as it

00:26:48,220 --> 00:26:55,840
was running it's fast but it's you know

00:26:51,510 --> 00:26:57,700
pearl is not made to be a mathematical

00:26:55,840 --> 00:27:02,530
high-performance language in that sense

00:26:57,700 --> 00:27:09,280
okay but our pearl is so let's see what

00:27:02,530 --> 00:27:11,440
happens when we run it with the our Perl

00:27:09,280 --> 00:27:14,380
command and I'm going to actually put a

00:27:11,440 --> 00:27:16,809
dash T which means we're just going to

00:27:14,380 --> 00:27:18,820
test it only we're not gonna actually do

00:27:16,809 --> 00:27:21,640
a full execution right now you'll see

00:27:18,820 --> 00:27:23,559
now our pearl stuff is happening oh it

00:27:21,640 --> 00:27:26,799
did do an execution but it executed it

00:27:23,559 --> 00:27:28,270
in the one X speed mode but not in the

00:27:26,799 --> 00:27:31,210
compiled mode so I'm scrolling back up

00:27:28,270 --> 00:27:33,970
this is what just ran the output of

00:27:31,210 --> 00:27:35,260
pearl it shows a bunch of our profile

00:27:33,970 --> 00:27:38,620
there a bunch of our pearl settings and

00:27:35,260 --> 00:27:42,490
then it shows this section here which is

00:27:38,620 --> 00:27:43,960
kind of the you know what is our pearl

00:27:42,490 --> 00:27:45,790
doing okay

00:27:43,960 --> 00:27:49,530
first it's looking up the dependencies

00:27:45,790 --> 00:27:53,020
then it's doing a three phase parsing

00:27:49,530 --> 00:27:54,850
which is a normal purl check then it's

00:27:53,020 --> 00:27:56,500
running through pearl critic and finally

00:27:54,850 --> 00:28:00,270
it's running through an our Perl parser

00:27:56,500 --> 00:28:03,549
which has its own grammar and then it's

00:28:00,270 --> 00:28:05,890
generating the our Perl code which is

00:28:03,549 --> 00:28:07,450
the C++ code and then finally it's

00:28:05,890 --> 00:28:09,880
running that although in this case

00:28:07,450 --> 00:28:11,890
because it's a test mode it's not

00:28:09,880 --> 00:28:13,299
actually doing the C++ part I just

00:28:11,890 --> 00:28:16,030
wanted to show you what it looks like

00:28:13,299 --> 00:28:22,240
when we're in test mode now let's go

00:28:16,030 --> 00:28:25,260
into actual C++ mode which I just delete

00:28:22,240 --> 00:28:25,260
this T

00:28:29,090 --> 00:28:37,020
and there's the G+ plus and it is

00:28:33,240 --> 00:28:39,510
compiling another gigantic big we use

00:28:37,020 --> 00:28:42,090
about every option that G+ plus has no

00:28:39,510 --> 00:28:46,200
joke we're pushing the limits of

00:28:42,090 --> 00:28:47,669
compilers and there you go we didn't put

00:28:46,200 --> 00:28:51,929
a bunch of print statements to flash by

00:28:47,669 --> 00:28:57,360
but we did see that the final number 131

00:28:51,929 --> 00:28:59,789
dot 863 is that same approximation that

00:28:57,360 --> 00:29:02,490
we saw a moment ago in Perl and we can

00:28:59,789 --> 00:29:04,740
fiddle with the significant digits and

00:29:02,490 --> 00:29:07,880
all that trust me it's all there this is

00:29:04,740 --> 00:29:12,090
just a demo but what we just saw was

00:29:07,880 --> 00:29:15,000
compiling Perl code into C++ having that

00:29:12,090 --> 00:29:17,340
C++ pass to this gigantic G + + command

00:29:15,000 --> 00:29:21,570
and then running that binary code let's

00:29:17,340 --> 00:29:24,090
do that again and this time I can just

00:29:21,570 --> 00:29:27,179
click the up arrow but instead of

00:29:24,090 --> 00:29:29,580
running the dot PL there's no dot

00:29:27,179 --> 00:29:35,399
anything on that because in UNIX we

00:29:29,580 --> 00:29:37,830
don't put suffixes on executable files

00:29:35,399 --> 00:29:40,830
in fact what I'll do is I'll run the

00:29:37,830 --> 00:29:45,000
command file and it's going to tell us

00:29:40,830 --> 00:29:48,059
that this is an elf 64-bit executable ok

00:29:45,000 --> 00:29:52,200
so this is an actual you know exe file

00:29:48,059 --> 00:29:53,730
for you in the windows world so let's go

00:29:52,200 --> 00:29:55,020
ahead and just run that one directly

00:29:53,730 --> 00:29:57,240
again just to prove to ourselves that

00:29:55,020 --> 00:29:59,789
we're not crazy and I mean it's so fast

00:29:57,240 --> 00:30:02,610
it's seems instantaneous but yes it did

00:29:59,789 --> 00:30:11,450
run ok and give us that output now let's

00:30:02,610 --> 00:30:16,080
just for funsies go back and turn on the

00:30:11,450 --> 00:30:19,770
longer runtime which instead of 5

00:30:16,080 --> 00:30:24,090
iterations of 10 by 10 array we'll do a

00:30:19,770 --> 00:30:27,049
thousand iterations of a 2500 by 2500

00:30:24,090 --> 00:30:30,600
array several orders of magnitude

00:30:27,049 --> 00:30:33,630
difference and even calculate how many

00:30:30,600 --> 00:30:36,150
orders of magnitude but quite a few so

00:30:33,630 --> 00:30:38,670
we're going to

00:30:36,150 --> 00:30:40,410
recompile this again I'm not gonna run

00:30:38,670 --> 00:30:42,210
it in the 1x speed mode because it would

00:30:40,410 --> 00:30:47,870
we'd still be here waiting for it to run

00:30:42,210 --> 00:30:51,690
but I'm gonna compile this again and

00:30:47,870 --> 00:30:57,000
then it's gonna run again we're gonna

00:30:51,690 --> 00:31:00,060
see how fast it runs by the way

00:30:57,000 --> 00:31:01,980
obviously compile time is fine if you

00:31:00,060 --> 00:31:07,440
have a fast run time so now it's running

00:31:01,980 --> 00:31:09,600
oh and it should take ooh actually this

00:31:07,440 --> 00:31:11,010
one might take about two minutes now

00:31:09,600 --> 00:31:13,140
that I realize it we'll leave that one

00:31:11,010 --> 00:31:15,000
running for a moment while I talk about

00:31:13,140 --> 00:31:21,470
the next point this is what we're about

00:31:15,000 --> 00:31:24,720
to segue into this code actually I can

00:31:21,470 --> 00:31:30,120
see something this code is running right

00:31:24,720 --> 00:31:37,740
now on one processor which I will show

00:31:30,120 --> 00:31:40,320
you by giving you a new view here okay

00:31:37,740 --> 00:31:41,670
this is a program called H top and you

00:31:40,320 --> 00:31:43,980
can see I have four cores on this

00:31:41,670 --> 00:31:47,000
machine and only the fourth core is

00:31:43,980 --> 00:31:50,250
being pegged right now so I have three

00:31:47,000 --> 00:31:53,190
completely idle empty lazy cores that

00:31:50,250 --> 00:32:00,320
are doing nothing at all and costing me

00:31:53,190 --> 00:32:00,320
money for no dang reason freeloaders so

00:32:00,740 --> 00:32:08,760
in fact I don't even want to wait really

00:32:04,860 --> 00:32:11,820
to see that one finish running because

00:32:08,760 --> 00:32:15,810
I'm too impatient so I'm going to kill

00:32:11,820 --> 00:32:17,280
that and we're gonna see that stops the

00:32:15,810 --> 00:32:20,340
process so we're back down to zero

00:32:17,280 --> 00:32:28,460
processors being hit here what we're

00:32:20,340 --> 00:32:34,110
gonna do now is talk briefly about Auto

00:32:28,460 --> 00:32:37,620
parallelization which is super important

00:32:34,110 --> 00:32:40,740
to the future of computing and which is

00:32:37,620 --> 00:32:43,050
extremely complicated and I've spent my

00:32:40,740 --> 00:32:45,870
entire adult life and more trying to

00:32:43,050 --> 00:32:48,780
figure out exactly how to at least get a

00:32:45,870 --> 00:32:49,560
handle on this and I've done a lot of

00:32:48,780 --> 00:32:52,590
work

00:32:49,560 --> 00:32:55,010
myself from scratch I did some work in

00:32:52,590 --> 00:33:02,160
grad school for computer science and and

00:32:55,010 --> 00:33:04,980
now I've got our pearl and we've built

00:33:02,160 --> 00:33:06,780
Auto parallel abilities into our pearl

00:33:04,980 --> 00:33:08,250
which I'm going to show you guys how

00:33:06,780 --> 00:33:10,620
that works it's pretty cool and I've

00:33:08,250 --> 00:33:13,980
never demoed this to anybody before so

00:33:10,620 --> 00:33:18,420
y'all are the first and it does work at

00:33:13,980 --> 00:33:24,030
least last night it did so there is a

00:33:18,420 --> 00:33:26,370
program called poly CC and this is

00:33:24,030 --> 00:33:29,370
actually a suite of many different

00:33:26,370 --> 00:33:33,330
programs and some of you may recognize

00:33:29,370 --> 00:33:36,690
the CC part of poly CC as being sort of

00:33:33,330 --> 00:33:39,270
a compiler collection okay like GCC the

00:33:36,690 --> 00:33:42,990
gnu compiler collection or the GNU C

00:33:39,270 --> 00:33:52,380
compiler depending on how old you are or

00:33:42,990 --> 00:33:55,670
how long and gray your beard is so yes

00:33:52,380 --> 00:34:04,170
we have quite a cool beard in the room

00:33:55,670 --> 00:34:07,440
so poly cc is the poly tope compiler

00:34:04,170 --> 00:34:11,190
collection and a polytope is a

00:34:07,440 --> 00:34:16,200
multi-dimensional data structure that

00:34:11,190 --> 00:34:22,050
represents computational dependencies

00:34:16,200 --> 00:34:24,420
and data dependencies through time and I

00:34:22,050 --> 00:34:26,760
did not invent this math this math is

00:34:24,420 --> 00:34:29,730
like you know doctoral thesis math from

00:34:26,760 --> 00:34:35,280
several French dudes a couple years back

00:34:29,730 --> 00:34:38,850
and you can look them up but essentially

00:34:35,280 --> 00:34:41,760
a what you do is you analyze a program

00:34:38,850 --> 00:34:44,520
you build this poly tope representation

00:34:41,760 --> 00:34:48,440
of the program and then you do some

00:34:44,520 --> 00:34:50,870
special linear algebra style

00:34:48,440 --> 00:34:54,240
transformations like shearing or

00:34:50,870 --> 00:34:57,180
rotating or splitting these polytopes in

00:34:54,240 --> 00:34:59,400
some way that allows you to determine

00:34:57,180 --> 00:35:02,640
which parts of the program can be

00:34:59,400 --> 00:35:03,270
executed in parallel without breaking

00:35:02,640 --> 00:35:05,640
those

00:35:03,270 --> 00:35:08,580
and computation and data dependencies

00:35:05,640 --> 00:35:12,060
and this is very complicated I mean this

00:35:08,580 --> 00:35:16,560
is something where many people have done

00:35:12,060 --> 00:35:18,090
many PhD theses on this thing to get to

00:35:16,560 --> 00:35:24,380
the point where we have a program called

00:35:18,090 --> 00:35:31,830
poly cc poly cc is a collection of pluto

00:35:24,380 --> 00:35:34,890
Clube there's a clan the it's there's

00:35:31,830 --> 00:35:37,140
like 20 different software's that are

00:35:34,890 --> 00:35:39,960
made from different people all brought

00:35:37,140 --> 00:35:42,930
together in this poly CC program and we

00:35:39,960 --> 00:35:47,360
need them all because they're all super

00:35:42,930 --> 00:35:53,730
complicated and important and our perl

00:35:47,360 --> 00:35:57,330
knows how to use poly CC that's part of

00:35:53,730 --> 00:35:59,370
our pearls trickery and magic poly CC

00:35:57,330 --> 00:36:02,690
only runs on C code it doesn't even

00:35:59,370 --> 00:36:05,340
really run on C++ code so actually I

00:36:02,690 --> 00:36:09,360
have to like fool it into thinking that

00:36:05,340 --> 00:36:11,700
our perl is outputting c code but it

00:36:09,360 --> 00:36:14,850
works and we're actually going to see it

00:36:11,700 --> 00:36:17,040
work now which is pretty amazing and

00:36:14,850 --> 00:36:19,200
I'll tell you what we're gonna do before

00:36:17,040 --> 00:36:21,630
we do it we're gonna run the art Pro

00:36:19,200 --> 00:36:24,990
command again with the - P flag which

00:36:21,630 --> 00:36:27,360
means parallel eyes and I know I put it

00:36:24,990 --> 00:36:28,800
turned off by default which seems lame

00:36:27,360 --> 00:36:31,500
but it's because it's still experimental

00:36:28,800 --> 00:36:35,310
it will be turned on by default in the

00:36:31,500 --> 00:36:37,200
future because everybody in this room

00:36:35,310 --> 00:36:41,370
should have a laptop newer than mine

00:36:37,200 --> 00:36:43,740
which is like 11 or 12 years old and

00:36:41,370 --> 00:36:45,420
even this one has two cores in it so

00:36:43,740 --> 00:36:47,130
everybody should have at least two to

00:36:45,420 --> 00:36:49,050
four to eight cores in your laptop at

00:36:47,130 --> 00:36:51,510
this point you would want parallelism

00:36:49,050 --> 00:36:55,530
turned on by default in all your code

00:36:51,510 --> 00:37:01,170
alright so let's go ahead and compile

00:36:55,530 --> 00:37:06,270
again but this time we're gonna put that

00:37:01,170 --> 00:37:08,640
- P in there and we're gonna do a no

00:37:06,270 --> 00:37:11,100
execute as well because I don't want it

00:37:08,640 --> 00:37:13,920
to try and run automatically I think

00:37:11,100 --> 00:37:16,100
there's a few glitches I'm still working

00:37:13,920 --> 00:37:16,100
out

00:37:16,120 --> 00:37:19,870
okay and we just saw something flash by

00:37:18,550 --> 00:37:21,280
real quick which I'm gonna have to

00:37:19,870 --> 00:37:24,100
scroll back up to in a minute but we're

00:37:21,280 --> 00:37:27,670
once again back on our gigantic G plus

00:37:24,100 --> 00:37:30,790
plus okay which we can see is pegging

00:37:27,670 --> 00:37:33,160
one processor because G plus plus is a

00:37:30,790 --> 00:37:36,730
serial you know process there it's

00:37:33,160 --> 00:37:37,810
finished so that that finished our

00:37:36,730 --> 00:37:39,340
compiled but I got to scroll up here

00:37:37,810 --> 00:37:41,710
because something flash by here real

00:37:39,340 --> 00:37:45,310
quick look at this stuff Oh some Pluto

00:37:41,710 --> 00:37:48,310
output and na parallelized step that

00:37:45,310 --> 00:37:52,090
step it was not in the previous our Perl

00:37:48,310 --> 00:37:55,840
run that we saw now it is generating

00:37:52,090 --> 00:37:57,850
OpenMP code and we can see actually in

00:37:55,840 --> 00:38:01,780
my debugging because I turned on the

00:37:57,850 --> 00:38:05,650
debugging this is the call to Polly see

00:38:01,780 --> 00:38:09,850
see there's user local bin poly CC and

00:38:05,650 --> 00:38:14,620
were passing it our CPP output file

00:38:09,850 --> 00:38:18,700
which we generated up here in the

00:38:14,620 --> 00:38:22,630
generate and save phases of the our Perl

00:38:18,700 --> 00:38:25,690
compiled so our Perl took to a Perl 5

00:38:22,630 --> 00:38:31,570
code the PL file generated a dot CPP

00:38:25,690 --> 00:38:35,130
file past that CPP file - poly CC then

00:38:31,570 --> 00:38:38,800
Paul a CC created a file called

00:38:35,130 --> 00:38:40,870
gauss-seidel open MP dot CPP so it

00:38:38,800 --> 00:38:45,550
inserted this dot OpenMP into the file

00:38:40,870 --> 00:38:47,710
name here's the poly CC output for those

00:38:45,550 --> 00:38:50,140
of you that are really curious about how

00:38:47,710 --> 00:38:54,640
this parallelism thing works oh there's

00:38:50,140 --> 00:38:56,320
the glitch and we're back proof but

00:38:54,640 --> 00:38:58,990
there's Pluto I had mentioned Pluto

00:38:56,320 --> 00:39:02,530
running here's some dependency loop

00:38:58,990 --> 00:39:05,590
dependencies tiling it does this poly

00:39:02,530 --> 00:39:08,650
tope tiling that I had mentioned finding

00:39:05,590 --> 00:39:12,420
dependencies and doing scheduling and

00:39:08,650 --> 00:39:16,870
finally writing that output file then

00:39:12,420 --> 00:39:21,640
that open MP dot CPP file is the one

00:39:16,870 --> 00:39:27,340
that we actually compile with G + + ok

00:39:21,640 --> 00:39:29,170
and all of this leads us to wanting to

00:39:27,340 --> 00:39:29,770
look at what files we now have compiled

00:39:29,170 --> 00:39:31,960
because

00:39:29,770 --> 00:39:37,900
the world do we have at this point the

00:39:31,960 --> 00:39:39,340
answer is we have a gauss-seidel serial

00:39:37,900 --> 00:39:40,450
version which is when we ran a moment

00:39:39,340 --> 00:39:43,420
ago and it was taking too long and I

00:39:40,450 --> 00:39:46,000
cancelled it we have a gauss seidel dot

00:39:43,420 --> 00:39:49,000
pl which is our original uncompelled

00:39:46,000 --> 00:39:52,330
input file we have a gauss-seidel dot

00:39:49,000 --> 00:39:55,380
CPP which is the serial output file that

00:39:52,330 --> 00:39:57,550
we passed into policy C a moment ago and

00:39:55,380 --> 00:40:00,700
ignore the manual files those are used

00:39:57,550 --> 00:40:04,860
for my debugging and then we have the

00:40:00,700 --> 00:40:09,070
open MP dot CPP which was the output of

00:40:04,860 --> 00:40:13,140
Pluto and finally we have one more

00:40:09,070 --> 00:40:16,660
executable file gauss-seidel dot open MP

00:40:13,140 --> 00:40:18,130
this is our binary file that is

00:40:16,660 --> 00:40:21,490
automatically parallelized and we're

00:40:18,130 --> 00:40:23,830
about to run and when this works and if

00:40:21,490 --> 00:40:26,950
it works and if we see something cool

00:40:23,830 --> 00:40:29,410
happen in H top it would be nice if

00:40:26,950 --> 00:40:32,350
everyone applauded because this is

00:40:29,410 --> 00:40:34,720
insanely complicated this is my way of

00:40:32,350 --> 00:40:38,950
crossing my fingers and saying if it

00:40:34,720 --> 00:40:44,020
doesn't work ok all right so let's go

00:40:38,950 --> 00:40:47,050
ahead and run this program and remember

00:40:44,020 --> 00:40:50,940
this is 2500 squared times a thousand

00:40:47,050 --> 00:40:54,670
iterations and it's the gauss-seidel dot

00:40:50,940 --> 00:40:56,350
OpenMP in fact if we run the command

00:40:54,670 --> 00:41:01,230
file on that again we'll see it's

00:40:56,350 --> 00:41:09,340
another 64-bit executable so here we go

00:41:01,230 --> 00:41:12,420
drumroll running and all four processors

00:41:09,340 --> 00:41:12,420
pegged to the top

00:41:12,880 --> 00:41:18,450
you have no idea how many years I've

00:41:15,670 --> 00:41:21,370
worked to do that stupid thing of

00:41:18,450 --> 00:41:24,790
compiling Perl and forcing it to

00:41:21,370 --> 00:41:27,310
automatically parallelize and it should

00:41:24,790 --> 00:41:32,440
take only about 25 seconds according to

00:41:27,310 --> 00:41:35,020
my timings last night to run this so as

00:41:32,440 --> 00:41:36,970
soon as we see that drop back off again

00:41:35,020 --> 00:41:38,620
I'll switch back and we will see the

00:41:36,970 --> 00:41:40,180
actual math output because right now

00:41:38,620 --> 00:41:43,150
it's not showing us any output it's just

00:41:40,180 --> 00:41:45,300
running over there and I'll mention

00:41:43,150 --> 00:41:49,870
briefly up there it goes this is using

00:41:45,300 --> 00:41:53,940
open MP sorry for the constant change in

00:41:49,870 --> 00:41:57,400
volume here but this microphone is wacky

00:41:53,940 --> 00:41:59,050
there's our output it's got actually a

00:41:57,400 --> 00:42:01,810
tremendous amount of significant digits

00:41:59,050 --> 00:42:03,430
because it's a huge number but but it's

00:42:01,810 --> 00:42:06,190
there and if we wanted to change the

00:42:03,430 --> 00:42:12,100
printf formatting we could see it a ton

00:42:06,190 --> 00:42:14,830
of numbers so we just compiled Perl into

00:42:12,100 --> 00:42:16,810
a auto parallelized binary and y'all are

00:42:14,830 --> 00:42:19,600
the first people to ever see that and

00:42:16,810 --> 00:42:21,340
this is what I would consider cutting

00:42:19,600 --> 00:42:23,410
edge Perl now we're gonna have to do

00:42:21,340 --> 00:42:26,380
something really cool and fast and zip

00:42:23,410 --> 00:42:34,170
through my other awesome new thing that

00:42:26,380 --> 00:42:36,790
I've built which is an entire new cloud

00:42:34,170 --> 00:42:39,370
yes I built my own cloud from scratch

00:42:36,790 --> 00:42:40,840
it's called cloud for free org and y'all

00:42:39,370 --> 00:42:44,860
can actually go there right now if you

00:42:40,840 --> 00:42:47,250
want you can see there's a couple other

00:42:44,860 --> 00:42:50,940
people that have logged in here and

00:42:47,250 --> 00:42:54,520
right now I have you logging in with get

00:42:50,940 --> 00:42:57,700
that other pesky get that is having some

00:42:54,520 --> 00:43:00,460
issues right now but I'm I'll have

00:42:57,700 --> 00:43:04,270
bitbucket live and and I'm implementing

00:43:00,460 --> 00:43:07,000
get lab logins so those those are almost

00:43:04,270 --> 00:43:09,340
done you'll be able to click log in with

00:43:07,000 --> 00:43:11,350
git lab and log in with bitbucket as

00:43:09,340 --> 00:43:13,300
well okay but let's go ahead and click

00:43:11,350 --> 00:43:20,590
this button right here ding log in with

00:43:13,300 --> 00:43:23,830
git blank and there I am so there's my

00:43:20,590 --> 00:43:26,050
get a CH account and

00:43:23,830 --> 00:43:30,130
the only thing I really care about right

00:43:26,050 --> 00:43:31,780
now because this is Alpha Beta Gamma

00:43:30,130 --> 00:43:35,290
Delta I don't know it's some kind of

00:43:31,780 --> 00:43:39,430
level of pre-production but if you click

00:43:35,290 --> 00:43:41,680
on the code editor and zoom in you can

00:43:39,430 --> 00:43:44,170
see we have a fully functional mostly

00:43:41,680 --> 00:43:45,880
fully functional code editor here and we

00:43:44,170 --> 00:43:49,180
can actually look through our example

00:43:45,880 --> 00:43:53,620
code samples through the learning our

00:43:49,180 --> 00:43:58,030
pearl which are reimplementation x' of

00:43:53,620 --> 00:43:59,530
the exercises in learning Perl so we've

00:43:58,030 --> 00:44:03,840
got only a few minutes left but you can

00:43:59,530 --> 00:44:10,870
see this code here quite simple should

00:44:03,840 --> 00:44:12,700
execute and show us a circumference of a

00:44:10,870 --> 00:44:14,590
circumference of a circle with any

00:44:12,700 --> 00:44:17,230
radius so you get to input the radius

00:44:14,590 --> 00:44:18,970
and it just calculates a you know 2 pi

00:44:17,230 --> 00:44:24,010
radius there it is right there the

00:44:18,970 --> 00:44:28,450
actual math but first let's run a syntax

00:44:24,010 --> 00:44:30,550
check this is that special our perl

00:44:28,450 --> 00:44:35,860
syntax check ok

00:44:30,550 --> 00:44:38,400
and there it said o and we're back there

00:44:35,860 --> 00:44:44,670
you can see no syntax errors were found

00:44:38,400 --> 00:44:47,020
and this is using that multi parse

00:44:44,670 --> 00:44:48,280
strategy that I had pointed out before

00:44:47,020 --> 00:44:50,380
so you can see this is actually running

00:44:48,280 --> 00:44:52,240
our Perl like I was doing in the

00:44:50,380 --> 00:44:55,950
terminal ok

00:44:52,240 --> 00:45:00,550
this is just testing the our Perl syntax

00:44:55,950 --> 00:45:02,380
because it's not only a Perl or a Perl

00:45:00,550 --> 00:45:04,930
critic check it it does have an actual

00:45:02,380 --> 00:45:08,740
our pearl grammar so if we just wanted

00:45:04,930 --> 00:45:12,100
to for example I believe in normal Perl

00:45:08,740 --> 00:45:13,180
oh you're killing me good thing we're

00:45:12,100 --> 00:45:15,000
near the end of this thing here I

00:45:13,180 --> 00:45:18,040
believe in normal Perl you would be

00:45:15,000 --> 00:45:21,600
allowed where's my scrollbar you would

00:45:18,040 --> 00:45:29,290
be allowed to oh goodness

00:45:21,600 --> 00:45:32,640
delete that semicolon okay and that

00:45:29,290 --> 00:45:32,640
would I believe be

00:45:34,250 --> 00:45:39,890
[Music]

00:45:37,269 --> 00:45:41,960
removing a single semicolon would be

00:45:39,890 --> 00:45:43,999
okay in normal Perl but it's not okay in

00:45:41,960 --> 00:45:47,749
our Perl because actually it's not okay

00:45:43,999 --> 00:45:50,210
in C++ so we can see that it actually

00:45:47,749 --> 00:45:55,130
says there was a syntax error found it

00:45:50,210 --> 00:45:57,349
had a compilation error and this was

00:45:55,130 --> 00:45:59,089
near the print command okay so we're

00:45:57,349 --> 00:46:03,490
just seeing that it is actually running

00:45:59,089 --> 00:46:06,200
an a real our Perl syntax check here and

00:46:03,490 --> 00:46:09,670
the other thing that we care about which

00:46:06,200 --> 00:46:13,339
we're now near the end of our time is

00:46:09,670 --> 00:46:15,920
running running the job which I'll show

00:46:13,339 --> 00:46:18,529
you here a minute but first I'll mention

00:46:15,920 --> 00:46:22,369
that this is a really cool editor that

00:46:18,529 --> 00:46:25,249
does obviously have Perl abilities and

00:46:22,369 --> 00:46:30,740
it has VI and Emacs and a normal editing

00:46:25,249 --> 00:46:32,869
mode and it has this file explorer here

00:46:30,740 --> 00:46:39,650
which is called a pachi to file manager

00:46:32,869 --> 00:46:42,680
and I've been able to adopt about half a

00:46:39,650 --> 00:46:45,190
dozen different CPM distributions just

00:46:42,680 --> 00:46:47,779
during the building of this software

00:46:45,190 --> 00:46:50,809
including that file manager software and

00:46:47,779 --> 00:46:53,539
incorporating it in here so I could

00:46:50,809 --> 00:46:56,359
definitely use some help on this because

00:46:53,539 --> 00:47:00,079
there's actually feature incomplete

00:46:56,359 --> 00:47:01,670
there's no Save button I haven't gotten

00:47:00,079 --> 00:47:04,099
far enough to click the Save button yet

00:47:01,670 --> 00:47:05,749
okay but you know somebody can come help

00:47:04,099 --> 00:47:07,309
me with this there's a lot of JavaScript

00:47:05,749 --> 00:47:08,809
here I'm not really a JavaScript

00:47:07,309 --> 00:47:10,640
programmer but I have to be in order to

00:47:08,809 --> 00:47:13,700
do this it's a tremendous amount of

00:47:10,640 --> 00:47:15,920
JavaScript in the front end but let's

00:47:13,700 --> 00:47:18,559
see it actually runs something here

00:47:15,920 --> 00:47:22,819
during our last few minutes remember

00:47:18,559 --> 00:47:26,329
that we just had the code up there to

00:47:22,819 --> 00:47:27,789
show us a circumference of any radius so

00:47:26,329 --> 00:47:31,940
what we're gonna do here is simply

00:47:27,789 --> 00:47:33,619
submit this as a new cloud job it's

00:47:31,940 --> 00:47:35,509
going to run with our Perl in the

00:47:33,619 --> 00:47:38,029
background and come back and give us the

00:47:35,509 --> 00:47:39,950
answer and in this case for the sake of

00:47:38,029 --> 00:47:41,660
simplicity and because it's still a

00:47:39,950 --> 00:47:44,059
pre-production system and I don't want

00:47:41,660 --> 00:47:47,869
people doing some crazy stuff

00:47:44,059 --> 00:47:50,960
I have hard-coded us into a

00:47:47,869 --> 00:47:53,690
testing mode with parallelization turned

00:47:50,960 --> 00:47:55,999
off no parallelization so obviously I

00:47:53,690 --> 00:47:57,950
could go into the source code and fiddle

00:47:55,999 --> 00:48:00,619
with that which I was playing to do if I

00:47:57,950 --> 00:48:05,839
had time although we probably won't but

00:48:00,619 --> 00:48:08,569
let's at least see a serial code run

00:48:05,839 --> 00:48:11,269
okay because we we did just a moment ago

00:48:08,569 --> 00:48:13,519
see that the parallel works but let's

00:48:11,269 --> 00:48:14,809
see let's see it in serial on the cloud

00:48:13,519 --> 00:48:17,470
and this is another one in these things

00:48:14,809 --> 00:48:21,079
where if it gives us the right answer

00:48:17,470 --> 00:48:23,180
we're all gonna clap and cheer because

00:48:21,079 --> 00:48:25,400
of the insane amount of work to do

00:48:23,180 --> 00:48:30,079
something that seems simple but is not

00:48:25,400 --> 00:48:32,690
so here we go this is the other big part

00:48:30,079 --> 00:48:34,869
of the demo that we hope works and it's

00:48:32,690 --> 00:48:39,109
actually running live terminal emulation

00:48:34,869 --> 00:48:41,119
there we go running and it's giving us a

00:48:39,109 --> 00:48:42,829
prompt please input radius so this is

00:48:41,119 --> 00:48:45,710
actually a terminal emulator that I

00:48:42,829 --> 00:48:48,799
wrote that is essentially giving the

00:48:45,710 --> 00:48:51,980
same thing as if we were in our shell a

00:48:48,799 --> 00:48:55,700
moment ago so I'm just going to say the

00:48:51,980 --> 00:48:56,119
radius is going to be oh yeah okay there

00:48:55,700 --> 00:48:57,980
we go

00:48:56,119 --> 00:49:07,999
you can see the numbers pop up as I type

00:48:57,980 --> 00:49:10,279
them 2112 dot 23 and that's giving live

00:49:07,999 --> 00:49:13,160
characters back and forth so when I type

00:49:10,279 --> 00:49:14,509
it it appears down below on my local

00:49:13,160 --> 00:49:15,859
machine but it has to actually go to the

00:49:14,509 --> 00:49:17,539
cloud and come back before I see it

00:49:15,859 --> 00:49:20,450
appear there this is a live terminal and

00:49:17,539 --> 00:49:22,190
here we go once again drumroll please to

00:49:20,450 --> 00:49:24,499
see if I get the correct answer or any

00:49:22,190 --> 00:49:26,029
answer at all the answer is apparently

00:49:24,499 --> 00:49:32,089
thirteen thousand two hundred and

00:49:26,029 --> 00:49:34,519
seventy one thank you everyone and this

00:49:32,089 --> 00:49:37,009
concludes our presentation of Auto

00:49:34,519 --> 00:49:39,230
parallel programming on the cloud my

00:49:37,009 --> 00:49:40,460
name is will the chill please come see

00:49:39,230 --> 00:49:43,210
me afterward if you have any questions

00:49:40,460 --> 00:49:43,210
thank you

00:49:43,600 --> 00:49:48,530
you

00:49:43,870 --> 00:49:48,530

YouTube URL: https://www.youtube.com/watch?v=aHRiLV8cLUk


