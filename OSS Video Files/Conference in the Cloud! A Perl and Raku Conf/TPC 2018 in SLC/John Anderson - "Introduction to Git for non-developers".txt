Title: John Anderson - "Introduction to Git for non-developers"
Publication date: 2018-06-19
Playlist: TPC 2018 in SLC
Description: 
	Git is a revision control system that is used for many Open Source projects. Having a basic understanding of Git is essential to being able to join an Open Source project and become a contributor. Itâ€™s also super useful for many other activities! This talk will explore the basics of Git, assuming no existing background experience. Via analogies to other, familiar technolgies, the basic principles of using Git will be explained in an approachable, understandable fashion. People who attend this talk should come away ready to make an initial contribution to an Open Source project, and will leave with a list of additional resources to explore to learn more.
Captions: 
	00:00:00,000 --> 00:00:12,509
and anybody else all right so welcome to

00:00:10,440 --> 00:00:16,379
an introduction to kit for developers

00:00:12,509 --> 00:00:18,000
and non developers hi I'm John most

00:00:16,379 --> 00:00:19,980
places on the Internet I'm known as Jean

00:00:18,000 --> 00:00:22,140
hat you happen to tweet about this talk

00:00:19,980 --> 00:00:24,810
go ahead and use my handle and so I know

00:00:22,140 --> 00:00:27,150
what bad stuff you're saying about me in

00:00:24,810 --> 00:00:29,130
my day job when I am NOT giving awesome

00:00:27,150 --> 00:00:31,050
conference presentations I am the vice

00:00:29,130 --> 00:00:33,390
president of technology for infinity

00:00:31,050 --> 00:00:35,550
interactive we're a custom software

00:00:33,390 --> 00:00:38,100
development technology consulting and

00:00:35,550 --> 00:00:39,899
training firm you may know us from the

00:00:38,100 --> 00:00:42,510
app that has the time zone bug that's

00:00:39,899 --> 00:00:44,940
getting fixed um so let's start out with

00:00:42,510 --> 00:00:48,809
an audience survey how many people

00:00:44,940 --> 00:00:51,899
identify as a non developer nobody how

00:00:48,809 --> 00:00:53,460
many people identify as a developer most

00:00:51,899 --> 00:00:56,699
of the audience how many people identify

00:00:53,460 --> 00:00:58,980
as something in between the remainder of

00:00:56,699 --> 00:01:02,160
the audience good how many people have

00:00:58,980 --> 00:01:05,580
no experience at all would get one hand

00:01:02,160 --> 00:01:10,170
a couple hands some experience a lot of

00:01:05,580 --> 00:01:11,880
hands consider yourself a get expert all

00:01:10,170 --> 00:01:14,460
right the guy in back you don't get to

00:01:11,880 --> 00:01:16,229
ask questions for those of you with some

00:01:14,460 --> 00:01:18,150
good experiences how many of you feel

00:01:16,229 --> 00:01:19,409
anxious about using it or when you're

00:01:18,150 --> 00:01:20,009
using it like you're gonna do the wrong

00:01:19,409 --> 00:01:22,200
thing

00:01:20,009 --> 00:01:26,310
a few few few hands okay so this talk is

00:01:22,200 --> 00:01:30,329
for you my goals for this talk are going

00:01:26,310 --> 00:01:32,430
to simplify and demystify get open

00:01:30,329 --> 00:01:34,530
source in general Perl in particular but

00:01:32,430 --> 00:01:36,540
open source in general desperately needs

00:01:34,530 --> 00:01:38,490
contributions from non developers we

00:01:36,540 --> 00:01:40,110
need contributions from UI people we

00:01:38,490 --> 00:01:42,360
need contributions from graphics

00:01:40,110 --> 00:01:44,850
designer people we non developer

00:01:42,360 --> 00:01:48,259
contributions but anxiety over having to

00:01:44,850 --> 00:01:50,909
use get to contribute to a project can

00:01:48,259 --> 00:01:52,890
slow down or block otherwise helpful

00:01:50,909 --> 00:01:54,420
contributions that might happen so I'd

00:01:52,890 --> 00:01:56,729
like to help people understand get a

00:01:54,420 --> 00:01:58,530
little bit better to kind of work to

00:01:56,729 --> 00:01:59,969
reduce some of that barrier to entry so

00:01:58,530 --> 00:02:01,860
that's the goal for the talk

00:01:59,969 --> 00:02:04,500
I'm going to talk about how you get a

00:02:01,860 --> 00:02:08,090
git repository to work on I'm going to

00:02:04,500 --> 00:02:08,090
talk about adding and changing files

00:02:08,539 --> 00:02:11,819
sending your changes back up to the

00:02:10,649 --> 00:02:12,590
original repository

00:02:11,819 --> 00:02:14,690
a little

00:02:12,590 --> 00:02:17,180
about branching and merging a little bit

00:02:14,690 --> 00:02:20,239
about ways to save your bacon when

00:02:17,180 --> 00:02:23,900
you're get checkout gets screwed up and

00:02:20,239 --> 00:02:26,629
then some additional resources this is a

00:02:23,900 --> 00:02:28,519
tough topic there's a lot of jargon I'm

00:02:26,629 --> 00:02:30,890
going to try to call out and explain the

00:02:28,519 --> 00:02:32,480
jargon as I use it for the first time

00:02:30,890 --> 00:02:34,489
and try to explain things in different

00:02:32,480 --> 00:02:36,950
terms that are normally used to explain

00:02:34,489 --> 00:02:42,769
get I'm also going to try really hard to

00:02:36,950 --> 00:02:44,239
avoid saying just simple or easy I will

00:02:42,769 --> 00:02:45,440
probably screw that up at some point in

00:02:44,239 --> 00:02:47,900
which case you should yell at me or

00:02:45,440 --> 00:02:49,930
throw things because there's nothing

00:02:47,900 --> 00:02:53,750
that is just simple or easy about get

00:02:49,930 --> 00:02:55,280
get is my poster child for my strongly

00:02:53,750 --> 00:02:57,230
held belief that programmers should not

00:02:55,280 --> 00:03:01,069
develop user interfaces for normal

00:02:57,230 --> 00:03:04,760
people because they're bad at it so what

00:03:01,069 --> 00:03:06,379
is good if you put this out on the

00:03:04,760 --> 00:03:08,299
internet and do a search on it you will

00:03:06,379 --> 00:03:10,579
find out that get is a distributed

00:03:08,299 --> 00:03:11,870
revision control system which is a

00:03:10,579 --> 00:03:13,940
definition that has the unique

00:03:11,870 --> 00:03:16,430
combination of being 100% accurate and

00:03:13,940 --> 00:03:18,739
also being completely useless unless you

00:03:16,430 --> 00:03:20,600
know what these words already mean so if

00:03:18,739 --> 00:03:22,040
you didn't know what a distributed

00:03:20,600 --> 00:03:22,819
revision control system was you might

00:03:22,040 --> 00:03:27,530
react like this

00:03:22,819 --> 00:03:29,480
this is my dog Wow what like what does

00:03:27,530 --> 00:03:31,819
that actually mean so let's break it

00:03:29,480 --> 00:03:32,870
down take the second part first revision

00:03:31,819 --> 00:03:36,349
control system

00:03:32,870 --> 00:03:38,030
what's a revision control system the

00:03:36,349 --> 00:03:41,030
revision control system is just a fancy

00:03:38,030 --> 00:03:42,680
CS jargony way of doing track changes

00:03:41,030 --> 00:03:44,690
whose use track changes lay in a Word

00:03:42,680 --> 00:03:47,239
document or a Google Doc that's all our

00:03:44,690 --> 00:03:49,190
vision control is like you change

00:03:47,239 --> 00:03:50,540
something here I changed revision

00:03:49,190 --> 00:03:51,859
control system to track changes and

00:03:50,540 --> 00:03:53,599
there's a long note over here that says

00:03:51,859 --> 00:03:56,329
it got changed and it was me that did it

00:03:53,599 --> 00:03:58,970
and there's a timestamp that's all the

00:03:56,329 --> 00:04:00,349
revision control system is revision

00:03:58,970 --> 00:04:04,519
control systems which include things

00:04:00,349 --> 00:04:07,549
like RCS cbss VN Microsoft's Team

00:04:04,519 --> 00:04:09,470
Foundation server yet etc are a

00:04:07,549 --> 00:04:13,730
fundamental building block of modern

00:04:09,470 --> 00:04:16,519
software development brief aside how

00:04:13,730 --> 00:04:19,010
many years students many students no

00:04:16,519 --> 00:04:20,830
students any teachers a couple of

00:04:19,010 --> 00:04:23,750
teachers okay

00:04:20,830 --> 00:04:26,840
this stuff should be taught in school in

00:04:23,750 --> 00:04:29,060
CS programs Mis programs IT programs

00:04:26,840 --> 00:04:31,010
like if you have people that you are

00:04:29,060 --> 00:04:32,660
teaching to computer and you're not

00:04:31,010 --> 00:04:34,340
teaching them or vision control you're

00:04:32,660 --> 00:04:36,260
doing them a vast disservice

00:04:34,340 --> 00:04:37,970
I am super tired of having to spend the

00:04:36,260 --> 00:04:40,070
first month of onboarding every new

00:04:37,970 --> 00:04:42,110
intern and junior developer teaching

00:04:40,070 --> 00:04:44,270
them how to use get it sucks and it's

00:04:42,110 --> 00:04:46,730
annoying like so if you have any

00:04:44,270 --> 00:04:50,210
influence over curriculum you should be

00:04:46,730 --> 00:04:53,030
teaching people this stuff sorry end of

00:04:50,210 --> 00:04:54,530
rant back the definition so the other

00:04:53,030 --> 00:04:56,870
part that we skipped over before is

00:04:54,530 --> 00:04:58,640
distributed so what's what's distributed

00:04:56,870 --> 00:05:00,920
me I'll distribute it means is spread

00:04:58,640 --> 00:05:03,200
out on the internet across multiple

00:05:00,920 --> 00:05:04,940
people so a distributed revision control

00:05:03,200 --> 00:05:06,500
system is really just a fancy way of

00:05:04,940 --> 00:05:09,460
saying track changes spread out across

00:05:06,500 --> 00:05:15,140
the Internet it's nothing complicated or

00:05:09,460 --> 00:05:17,270
terribly complex another brief aside you

00:05:15,140 --> 00:05:20,150
might think that git is for code but

00:05:17,270 --> 00:05:22,430
it's not it's not only for code it's a

00:05:20,150 --> 00:05:25,190
very nice fit for any sort of text-based

00:05:22,430 --> 00:05:26,720
stuff that changes over time where

00:05:25,190 --> 00:05:28,670
you're interested in keeping track of

00:05:26,720 --> 00:05:31,850
those changes over time so it's great

00:05:28,670 --> 00:05:33,710
for websites it's great for conference

00:05:31,850 --> 00:05:35,480
presentations I keep all my conference

00:05:33,710 --> 00:05:38,030
presentations and get it's great for

00:05:35,480 --> 00:05:40,370
your resume I also it's great for

00:05:38,030 --> 00:05:42,110
recipes I keep my recipes and get

00:05:40,370 --> 00:05:43,850
because if you were a cook you know

00:05:42,110 --> 00:05:45,290
after you cook something you probably

00:05:43,850 --> 00:05:46,490
tweak it it's like oh this needed a

00:05:45,290 --> 00:05:49,280
little bit more garlic a little bit less

00:05:46,490 --> 00:05:51,680
pepper it will even work okay with

00:05:49,280 --> 00:05:53,330
binary formats I keep some photos in get

00:05:51,680 --> 00:05:54,890
it's just a little bit harder to see

00:05:53,330 --> 00:05:56,270
what changed between each revision

00:05:54,890 --> 00:06:02,840
although there are tools that will help

00:05:56,270 --> 00:06:05,750
me do that it is also not github it's

00:06:02,840 --> 00:06:08,390
not yet lab it's not bitbucket it's not

00:06:05,750 --> 00:06:10,040
SourceForge get underlies a lot of those

00:06:08,390 --> 00:06:11,990
stuff but those sites also have a bunch

00:06:10,040 --> 00:06:14,180
of project manage stuff built up around

00:06:11,990 --> 00:06:16,310
them the nice thing about focusing on

00:06:14,180 --> 00:06:18,080
learning get is if you know how to use

00:06:16,310 --> 00:06:19,760
git you can figure out how to use all

00:06:18,080 --> 00:06:22,460
these sites because git is kind of

00:06:19,760 --> 00:06:24,350
underneath all of them and this slide

00:06:22,460 --> 00:06:26,030
just says what I just said learning the

00:06:24,350 --> 00:06:27,740
basics again will help you regardless of

00:06:26,030 --> 00:06:30,350
what get hosting platform you're using

00:06:27,740 --> 00:06:31,670
so I encourage you to focus initially

00:06:30,350 --> 00:06:33,449
when you're trying to learn get are just

00:06:31,670 --> 00:06:35,909
learning the basics of get

00:06:33,449 --> 00:06:38,069
only then focus on the get you hosting

00:06:35,909 --> 00:06:41,309
site that you or the project you work or

00:06:38,069 --> 00:06:44,550
working on or your work uses so how do

00:06:41,309 --> 00:06:46,169
you get get I really want to try to

00:06:44,550 --> 00:06:49,740
avoid saying get get too many times

00:06:46,169 --> 00:06:51,029
because it gets very repetitive but if

00:06:49,740 --> 00:06:53,039
you don't have get installed you need to

00:06:51,029 --> 00:06:57,240
get it and install it you do that at the

00:06:53,039 --> 00:06:59,490
intuitively named to get - SCM comm I

00:06:57,240 --> 00:07:01,139
will post all these slides later and I

00:06:59,490 --> 00:07:03,029
will tweet out the link to the slides

00:07:01,139 --> 00:07:04,110
after I post them so you don't need to

00:07:03,029 --> 00:07:06,900
worry about trying to write these down

00:07:04,110 --> 00:07:09,689
but get - aciem the SEM stands for

00:07:06,900 --> 00:07:13,159
source code management and if you go to

00:07:09,689 --> 00:07:15,689
get that - SCM they have a nice little

00:07:13,159 --> 00:07:17,430
browser detecting thing that will give

00:07:15,689 --> 00:07:20,069
you a download link for whatever

00:07:17,430 --> 00:07:21,360
operating system you happen to be on if

00:07:20,069 --> 00:07:23,580
you're running something with a package

00:07:21,360 --> 00:07:26,039
manager like Linux or if you use

00:07:23,580 --> 00:07:28,349
homebrew on your Mac just using that to

00:07:26,039 --> 00:07:31,409
install get may be easier it is in there

00:07:28,349 --> 00:07:33,210
you might also notice if you have good

00:07:31,409 --> 00:07:38,399
eyes if they have links down here to Mac

00:07:33,210 --> 00:07:42,240
gooeys so there are GUI tools for using

00:07:38,399 --> 00:07:44,129
it I thought about this for a bit when I

00:07:42,240 --> 00:07:45,810
was writing this talk and I decided that

00:07:44,129 --> 00:07:48,270
I was gonna give all the examples in the

00:07:45,810 --> 00:07:51,300
talk in terms of the command line that

00:07:48,270 --> 00:07:53,430
was largely because when you do a search

00:07:51,300 --> 00:07:55,979
and at some point you will do a search

00:07:53,430 --> 00:07:58,139
on the internet to try to get help with

00:07:55,979 --> 00:07:59,759
something with get all the examples are

00:07:58,139 --> 00:08:03,599
gonna find when you search online or in

00:07:59,759 --> 00:08:04,860
terms of the command line so you need to

00:08:03,599 --> 00:08:06,419
know kind of how to use the command line

00:08:04,860 --> 00:08:08,729
in order to avail yourself of the help

00:08:06,419 --> 00:08:10,080
that is available additionally showing a

00:08:08,729 --> 00:08:11,849
GUI in addition to the command line

00:08:10,080 --> 00:08:13,289
examples would effectively have the

00:08:11,849 --> 00:08:15,419
amount of stuff I can talk about because

00:08:13,289 --> 00:08:18,300
I would have to show both and there are

00:08:15,419 --> 00:08:20,189
a bunch of get gooeys and by not talking

00:08:18,300 --> 00:08:21,659
about them I avoid having to look at all

00:08:20,189 --> 00:08:23,939
of them and develop an opinion about

00:08:21,659 --> 00:08:27,240
which one I should talk about and if

00:08:23,939 --> 00:08:29,189
nothing I am not lazy if you're not

00:08:27,240 --> 00:08:31,800
familiar with the command line interface

00:08:29,189 --> 00:08:33,930
of the CLI it's a very useful skill to

00:08:31,800 --> 00:08:36,839
have as an open-source contributor even

00:08:33,930 --> 00:08:39,419
as a non developer Tracy Osborne who's

00:08:36,839 --> 00:08:41,099
written some really nice intro to web

00:08:39,419 --> 00:08:43,229
design and web programming books just

00:08:41,099 --> 00:08:44,580
recently released a free ebook called

00:08:43,229 --> 00:08:48,470
the really friendly come

00:08:44,580 --> 00:08:51,960
line intro it's freely downloadable at

00:08:48,470 --> 00:08:54,750
hello web ebooks.com slash learn -

00:08:51,960 --> 00:08:56,970
command - line again slides will be

00:08:54,750 --> 00:08:59,310
available later so don't feel like you

00:08:56,970 --> 00:09:02,130
have to copy that down so once you get

00:08:59,310 --> 00:09:06,050
get installed before you can do anything

00:09:02,130 --> 00:09:08,790
else you need to tell git who you are

00:09:06,050 --> 00:09:11,820
and you do this using a command called

00:09:08,790 --> 00:09:13,920
git config get config as a git command

00:09:11,820 --> 00:09:16,110
line a git command for modifying

00:09:13,920 --> 00:09:18,630
configuration values and in this case

00:09:16,110 --> 00:09:20,400
we're using this - - global flag to tell

00:09:18,630 --> 00:09:23,040
git I want to update the configuration

00:09:20,400 --> 00:09:25,080
for the git tool across all of the

00:09:23,040 --> 00:09:28,200
repositories I'm ever going to use and

00:09:25,080 --> 00:09:30,930
we say git config - - global username

00:09:28,200 --> 00:09:33,560
and your your name and then the same

00:09:30,930 --> 00:09:36,060
thing with user email and your email

00:09:33,560 --> 00:09:37,530
this information is needed because once

00:09:36,060 --> 00:09:39,390
we start making changes which we're

00:09:37,530 --> 00:09:41,820
gonna do here in a few slides git is

00:09:39,390 --> 00:09:44,130
gonna track who made what change and

00:09:41,820 --> 00:09:46,710
when and it's going to track that by

00:09:44,130 --> 00:09:48,750
recording your name in your email if you

00:09:46,710 --> 00:09:50,310
don't provide values for it get will

00:09:48,750 --> 00:09:51,990
either complain at you and refuse to

00:09:50,310 --> 00:09:54,030
work and tell you you need it to provide

00:09:51,990 --> 00:09:56,460
values or it will guess and it will

00:09:54,030 --> 00:09:58,170
probably guess wrong unless you have

00:09:56,460 --> 00:10:01,880
your machine configured to send email

00:09:58,170 --> 00:10:01,880
because that's something that people do

00:10:02,060 --> 00:10:07,980
so run that and then once you've done

00:10:05,160 --> 00:10:10,980
that you need to obtain a repository to

00:10:07,980 --> 00:10:16,230
work on so jargon warning number one

00:10:10,980 --> 00:10:18,780
what's a repository a repository is just

00:10:16,230 --> 00:10:20,460
what get calls a project or a directory

00:10:18,780 --> 00:10:23,340
where the contents are under the control

00:10:20,460 --> 00:10:25,380
of get you'll also hear people say repo

00:10:23,340 --> 00:10:27,390
a lot I will probably say repo during

00:10:25,380 --> 00:10:29,100
this talk because repository has like 27

00:10:27,390 --> 00:10:32,970
syllables in it it's really annoying to

00:10:29,100 --> 00:10:34,740
say after a while the first option you

00:10:32,970 --> 00:10:37,800
have for getting a repository is to

00:10:34,740 --> 00:10:39,510
clone something clone is what get calls

00:10:37,800 --> 00:10:41,670
just making a copy of somebody's

00:10:39,510 --> 00:10:43,290
existing repository and this is

00:10:41,670 --> 00:10:44,850
typically what you'll do if you want to

00:10:43,290 --> 00:10:46,830
make a contribution to an open-source

00:10:44,850 --> 00:10:48,540
project you make a clone of that project

00:10:46,830 --> 00:10:50,910
repository so you can look at what's in

00:10:48,540 --> 00:10:54,210
there and maybe change it and send a

00:10:50,910 --> 00:10:57,110
contribution back to the project so this

00:10:54,210 --> 00:10:59,510
is a project that's hosted on github

00:10:57,110 --> 00:11:01,519
it happens to be an open-source module a

00:10:59,510 --> 00:11:04,670
perl module for interacting with get

00:11:01,519 --> 00:11:06,470
that I maintain and if you click this

00:11:04,670 --> 00:11:09,790
green button here that says clone or

00:11:06,470 --> 00:11:13,370
download you'll get this little pop-up

00:11:09,790 --> 00:11:14,870
with a URL that you can copy and in fact

00:11:13,370 --> 00:11:17,240
it has this handy little button right

00:11:14,870 --> 00:11:20,180
there that will copy it for you and so

00:11:17,240 --> 00:11:21,529
then you copy the URL and you go back to

00:11:20,180 --> 00:11:23,570
the command line and run this command

00:11:21,529 --> 00:11:25,579
git clone and then you paste in the URL

00:11:23,570 --> 00:11:27,769
of the repository you're trying to clone

00:11:25,579 --> 00:11:29,329
and when you do this you'll see output

00:11:27,769 --> 00:11:32,930
that kind of looks like this there's a

00:11:29,329 --> 00:11:35,329
whole bunch of stuff and about how fast

00:11:32,930 --> 00:11:36,680
it was and how long it took and none of

00:11:35,329 --> 00:11:38,930
that really matters the important thing

00:11:36,680 --> 00:11:46,010
is it'll finish and this cloning in to

00:11:38,930 --> 00:11:48,350
get wrapper your second option for

00:11:46,010 --> 00:11:50,540
getting a repository is to create a

00:11:48,350 --> 00:11:52,820
fresh new empty repository on your

00:11:50,540 --> 00:11:55,070
machine and you do that with the git

00:11:52,820 --> 00:11:56,630
init command you say get in it and then

00:11:55,070 --> 00:11:59,360
whatever the name of your project is

00:11:56,630 --> 00:12:01,190
going to be and that looks like this get

00:11:59,360 --> 00:12:03,649
in it my project and it says oh I

00:12:01,190 --> 00:12:05,720
initialized an implicit repository at

00:12:03,649 --> 00:12:08,089
this path and I did this in my home

00:12:05,720 --> 00:12:09,470
directory so it just made it right in my

00:12:08,089 --> 00:12:10,880
home directory and if I look in there

00:12:09,470 --> 00:12:14,329
you can see there's nothing in there

00:12:10,880 --> 00:12:16,130
other than this get directory the only

00:12:14,329 --> 00:12:18,230
thing in the deck drudgery is a whole

00:12:16,130 --> 00:12:19,670
bunch of stuff that get uses to track

00:12:18,230 --> 00:12:21,860
all the meta information about the

00:12:19,670 --> 00:12:25,190
repository you can completely ignore it

00:12:21,860 --> 00:12:26,690
and never need to look at it but if you

00:12:25,190 --> 00:12:28,640
ever want to take this directory and

00:12:26,690 --> 00:12:30,740
make it not a git repository anymore

00:12:28,640 --> 00:12:35,180
blowing away that not get directory will

00:12:30,740 --> 00:12:37,760
do that ok so now we have a repo let's

00:12:35,180 --> 00:12:39,260
add a file to the repo let's continue

00:12:37,760 --> 00:12:41,690
pretending or working with my awesome

00:12:39,260 --> 00:12:43,910
project so the first thing we're gonna

00:12:41,690 --> 00:12:45,529
do is add a file but first let's talk

00:12:43,910 --> 00:12:48,740
about the life cycle of file changes

00:12:45,529 --> 00:12:52,300
according to get here are the different

00:12:48,740 --> 00:12:54,740
states that get thinks files can be in

00:12:52,300 --> 00:12:56,120
or the kind of the life cycle that a

00:12:54,740 --> 00:12:58,339
file moves through so you start out with

00:12:56,120 --> 00:13:00,260
an untracked file and then it moves into

00:12:58,339 --> 00:13:01,430
a stage called staged which we'll talk

00:13:00,260 --> 00:13:06,380
about here in a minute and then it's

00:13:01,430 --> 00:13:07,690
committed so let's add that file let's

00:13:06,380 --> 00:13:09,920
add a readme file

00:13:07,690 --> 00:13:11,720
traditionally readme files are found in

00:13:09,920 --> 00:13:13,880
the top level of a project and they

00:13:11,720 --> 00:13:16,190
contain basic information about the

00:13:13,880 --> 00:13:18,860
project possibly how to get it to run or

00:13:16,190 --> 00:13:21,890
what it does or who works on it or how

00:13:18,860 --> 00:13:29,839
to contribute to the project so I'm an

00:13:21,890 --> 00:13:32,000
Emacs user I'm not ashamed let's pretend

00:13:29,839 --> 00:13:33,949
we write some basics so we fire up Emacs

00:13:32,000 --> 00:13:36,260
and we write some stuff in this readme

00:13:33,949 --> 00:13:37,610
IMD file it has this dot MD extension

00:13:36,260 --> 00:13:40,430
because readme files are typically

00:13:37,610 --> 00:13:44,300
written in a pseudo markup language

00:13:40,430 --> 00:13:48,130
called markdown and then we'll save it

00:13:44,300 --> 00:13:50,870
and now we're gonna ask it hey get sup

00:13:48,130 --> 00:13:52,250
we don't do that with a sub command

00:13:50,870 --> 00:13:54,860
unfortunately we use a command called

00:13:52,250 --> 00:13:56,630
git status so if you run get status

00:13:54,860 --> 00:13:58,459
it'll tell you what the status of the

00:13:56,630 --> 00:14:00,680
repository that you're running it in is

00:13:58,459 --> 00:14:02,480
and you can see here we say git status

00:14:00,680 --> 00:14:05,899
there's no commits yet there's an

00:14:02,480 --> 00:14:08,930
untracked file readme MB and get

00:14:05,899 --> 00:14:10,790
actually tells you what to do next if

00:14:08,930 --> 00:14:16,630
you want to commit it get add and the

00:14:10,790 --> 00:14:21,470
file so if we do that get a dreamy and

00:14:16,630 --> 00:14:22,610
now we run get status again we'll see we

00:14:21,470 --> 00:14:24,529
still don't have any commits

00:14:22,610 --> 00:14:28,279
but we've got this changes to be

00:14:24,529 --> 00:14:32,300
committed it's a new file and it's

00:14:28,279 --> 00:14:34,600
readme MD so if you read the man page

00:14:32,300 --> 00:14:37,610
forget add it will tell you get add

00:14:34,600 --> 00:14:39,500
Stages changes to be committed so

00:14:37,610 --> 00:14:41,930
there's that word again staging or the

00:14:39,500 --> 00:14:45,110
staging area get documentation will talk

00:14:41,930 --> 00:14:48,620
about the staging area and you can see

00:14:45,110 --> 00:14:50,300
in the output here get add is even

00:14:48,620 --> 00:14:54,279
telling us to or get status rather is

00:14:50,300 --> 00:14:57,980
telling us to unstaged use this command

00:14:54,279 --> 00:15:00,620
so git add takes you from untracked to

00:14:57,980 --> 00:15:03,050
staged staged is an area that is sort of

00:15:00,620 --> 00:15:05,720
conceptually in between an untracked

00:15:03,050 --> 00:15:08,839
file in a committed file and the staging

00:15:05,720 --> 00:15:11,720
area lets you build up a series of

00:15:08,839 --> 00:15:16,939
changes into a single commit it's sort

00:15:11,720 --> 00:15:18,860
of like staging that changes this is

00:15:16,939 --> 00:15:20,780
something you do not care about

00:15:18,860 --> 00:15:24,980
all when you were first trying to learn

00:15:20,780 --> 00:15:26,570
yet it is probably the most confusing

00:15:24,980 --> 00:15:28,040
thing about having to learn get is

00:15:26,570 --> 00:15:30,440
learning how to deal with the staging

00:15:28,040 --> 00:15:32,840
area and I wish I had a better solution

00:15:30,440 --> 00:15:34,490
other than you just have to learn it I

00:15:32,840 --> 00:15:35,960
mean I actually do I'll talk about that

00:15:34,490 --> 00:15:38,750
in a few slides but for the moment just

00:15:35,960 --> 00:15:40,430
yeah you add something it stages it up

00:15:38,750 --> 00:15:42,860
and then how do we go from stage to

00:15:40,430 --> 00:15:46,490
committed we use a command called git

00:15:42,860 --> 00:15:49,070
commit git commit is unusual and unique

00:15:46,490 --> 00:15:54,560
in terms of gift commands because its

00:15:49,070 --> 00:15:56,030
name is actually what it does get once

00:15:54,560 --> 00:15:57,770
commits to have an accompanying what's

00:15:56,030 --> 00:15:59,870
called a commit message which is just a

00:15:57,770 --> 00:16:01,490
short little text description of what's

00:15:59,870 --> 00:16:03,620
been changed in the committer or what's

00:16:01,490 --> 00:16:05,900
going on and this is the part where your

00:16:03,620 --> 00:16:09,710
name and email address the stuff we put

00:16:05,900 --> 00:16:13,070
in get config like 40 slides ago comes

00:16:09,710 --> 00:16:15,770
back into play by default the git

00:16:13,070 --> 00:16:20,450
command line uses them to write commit

00:16:15,770 --> 00:16:22,700
messages which if you're not already of

00:16:20,450 --> 00:16:25,850
them user is probably not going to be

00:16:22,700 --> 00:16:27,800
all that helpful for you I recently saw

00:16:25,850 --> 00:16:29,990
somewhere where the stack overflow

00:16:27,800 --> 00:16:31,940
question about how to exit vim is one of

00:16:29,990 --> 00:16:35,780
the most popular and upvoted of all time

00:16:31,940 --> 00:16:38,960
so what you can instead do is you can

00:16:35,780 --> 00:16:40,820
say git commit and then dash em and then

00:16:38,960 --> 00:16:42,860
just put your commit message right on

00:16:40,820 --> 00:16:44,390
the command line and get will just use

00:16:42,860 --> 00:16:46,400
it straight away and it won't open up

00:16:44,390 --> 00:16:49,280
them and you'll probably be happier and

00:16:46,400 --> 00:16:54,950
the hoos of em user I love you like I'm

00:16:49,280 --> 00:16:56,930
just playing so little review get ad

00:16:54,950 --> 00:16:59,570
takes files from untracked is staged and

00:16:56,930 --> 00:17:04,580
then get commit takes files from stage

00:16:59,570 --> 00:17:08,090
to committed so another side if the

00:17:04,580 --> 00:17:09,830
staging area has sort of got you like

00:17:08,090 --> 00:17:11,750
call for plaque stand like I said this

00:17:09,830 --> 00:17:13,610
is one of the more confusing things when

00:17:11,750 --> 00:17:15,890
you're first start when you first start

00:17:13,610 --> 00:17:17,900
trying to use git this is something that

00:17:15,890 --> 00:17:21,500
no other revision control system really

00:17:17,900 --> 00:17:23,750
does the staging area notion there is a

00:17:21,500 --> 00:17:27,320
thing called git las' which you can

00:17:23,750 --> 00:17:30,290
acquire Atlas comm which is sort of a

00:17:27,320 --> 00:17:32,540
wrapper around get the changes a couple

00:17:30,290 --> 00:17:33,860
of things but

00:17:32,540 --> 00:17:35,540
one of the big things that does is it

00:17:33,860 --> 00:17:37,760
eliminates the notion of a staging area

00:17:35,540 --> 00:17:40,370
you no longer have to say get add and

00:17:37,760 --> 00:17:41,750
then a file to stage changes up you

00:17:40,370 --> 00:17:44,390
could just make some changes and then

00:17:41,750 --> 00:17:45,800
say git commit file and it'll commit it

00:17:44,390 --> 00:17:49,850
stage it and commit it straightaway for

00:17:45,800 --> 00:17:51,680
you anybody using git lists or has heard

00:17:49,850 --> 00:17:53,330
of get lists before okay I just found

00:17:51,680 --> 00:17:55,550
out about this like two days ago when I

00:17:53,330 --> 00:18:01,640
read an insta paper length that I

00:17:55,550 --> 00:18:03,830
created in like 2016 alright so what

00:18:01,640 --> 00:18:05,570
about edits we've gone over how to add a

00:18:03,830 --> 00:18:07,040
file to a repository what if you want to

00:18:05,570 --> 00:18:10,280
change something that's in a repository

00:18:07,040 --> 00:18:12,320
so if we fire up Emacs again and we make

00:18:10,280 --> 00:18:13,630
some changes and then we say hey get

00:18:12,320 --> 00:18:17,450
what's up

00:18:13,630 --> 00:18:22,940
git will tell us changes not stage-four

00:18:17,450 --> 00:18:24,200
commit modified readme dot MD so earlier

00:18:22,940 --> 00:18:26,120
when I was talking about the lifecycle

00:18:24,200 --> 00:18:27,650
of file changes according to get I kind

00:18:26,120 --> 00:18:31,310
of lied to you there's actually a fourth

00:18:27,650 --> 00:18:32,780
one modified which is where you have a

00:18:31,310 --> 00:18:34,880
file it's been checked into the

00:18:32,780 --> 00:18:37,880
repository but you've made local changes

00:18:34,880 --> 00:18:40,430
to it and they're not checked in yet now

00:18:37,880 --> 00:18:43,340
you might wonder can we ask it hey what

00:18:40,430 --> 00:18:45,050
specifically changed not just did the

00:18:43,340 --> 00:18:46,850
file change but what about it changed

00:18:45,050 --> 00:18:49,520
and you can and that command is called

00:18:46,850 --> 00:18:51,440
git diff if you've ever used the diff

00:18:49,520 --> 00:18:55,670
command line tool you will recognize

00:18:51,440 --> 00:18:57,620
this output so you say git diff and it's

00:18:55,670 --> 00:18:59,000
going to tell you I'm checking the

00:18:57,620 --> 00:19:02,630
difference between these two versions of

00:18:59,000 --> 00:19:04,610
the file lines that have been removed or

00:19:02,630 --> 00:19:06,650
added or indicated with minuses or

00:19:04,610 --> 00:19:10,340
plusses so here you can see I've added

00:19:06,650 --> 00:19:15,530
two lines saying that I need to write

00:19:10,340 --> 00:19:17,570
the readme after that editing and

00:19:15,530 --> 00:19:19,550
editing files is not really different

00:19:17,570 --> 00:19:20,930
you're still going to use git add to

00:19:19,550 --> 00:19:22,940
stage the change you're still gonna use

00:19:20,930 --> 00:19:25,580
git commit to actually commit it into

00:19:22,940 --> 00:19:29,600
the repository so let's do that get add

00:19:25,580 --> 00:19:32,840
git commit what's going on with these

00:19:29,600 --> 00:19:34,730
commit messages get records the commit

00:19:32,840 --> 00:19:36,440
message and then let's you look back at

00:19:34,730 --> 00:19:38,900
them this is called the history of the

00:19:36,440 --> 00:19:40,580
repository when you're first getting

00:19:38,900 --> 00:19:42,980
involved with an open source project

00:19:40,580 --> 00:19:44,840
that you haven't worked on before taking

00:19:42,980 --> 00:19:46,370
a little bit of time to read back over

00:19:44,840 --> 00:19:48,170
the recent history of there

00:19:46,370 --> 00:19:50,540
Tory is a really good way to get up to

00:19:48,170 --> 00:19:52,520
speed with the project you'll see kind

00:19:50,540 --> 00:19:54,590
of what areas of the project are under

00:19:52,520 --> 00:19:56,450
active development what areas haven't

00:19:54,590 --> 00:19:58,880
been changed in a while you can get a

00:19:56,450 --> 00:20:01,190
feeling for which people on the project

00:19:58,880 --> 00:20:02,930
are actually making the code level

00:20:01,190 --> 00:20:04,760
changes which is frequently not the

00:20:02,930 --> 00:20:08,180
people who are the noisiest on the

00:20:04,760 --> 00:20:10,040
project mailing lists and you can even

00:20:08,180 --> 00:20:11,690
get a feeling for people's personality

00:20:10,040 --> 00:20:13,640
by kind of how they write their commit

00:20:11,690 --> 00:20:14,840
messages whether they tend to be more

00:20:13,640 --> 00:20:18,200
loose or whether they're highly

00:20:14,840 --> 00:20:23,210
structured so the command to look at the

00:20:18,200 --> 00:20:26,360
history is getting log and when you run

00:20:23,210 --> 00:20:27,170
it it ends up looking like this so you

00:20:26,360 --> 00:20:29,870
can see it's in reverse chronological

00:20:27,170 --> 00:20:32,090
order first we have the the commit

00:20:29,870 --> 00:20:35,179
adding the readme and then we update the

00:20:32,090 --> 00:20:37,850
readme with a fix mean you can run that

00:20:35,179 --> 00:20:40,460
get log command with a dash PFLAG the

00:20:37,850 --> 00:20:42,170
dash P stands for patch and what this

00:20:40,460 --> 00:20:44,780
will do is it'll in addition to the

00:20:42,170 --> 00:20:47,630
commit message it'll show you a diff for

00:20:44,780 --> 00:20:50,240
every change as well so you can see here

00:20:47,630 --> 00:20:52,400
in the first commit we're sorry the most

00:20:50,240 --> 00:20:54,770
recent commit I'm adding those two lines

00:20:52,400 --> 00:20:57,500
this is the diff we saw before but here

00:20:54,770 --> 00:20:59,150
this is the initial commit and we're

00:20:57,500 --> 00:21:00,800
adding the first line for the first time

00:20:59,150 --> 00:21:02,450
and it's actually being gifted in step

00:21:00,800 --> 00:21:10,309
no because this was the commit that

00:21:02,450 --> 00:21:12,200
added the file question you can restrict

00:21:10,309 --> 00:21:14,150
the date range I don't remember what the

00:21:12,200 --> 00:21:16,400
flag for that is off the top of my head

00:21:14,150 --> 00:21:19,490
but is insanely flexible and you can do

00:21:16,400 --> 00:21:22,390
like relative dates relative date offset

00:21:19,490 --> 00:21:28,250
so it would literally be like get log

00:21:22,390 --> 00:21:29,270
you get log - desk something 5d I just

00:21:28,250 --> 00:21:32,020
don't remember what this something is

00:21:29,270 --> 00:21:32,020
off the top of my head

00:21:40,760 --> 00:21:43,849
[Music]

00:21:57,040 --> 00:22:03,170
you can give it a you can give it a

00:21:59,660 --> 00:22:04,700
range for example to sew a few more

00:22:03,170 --> 00:22:07,100
concepts that I'm not gonna go into

00:22:04,700 --> 00:22:12,050
quite as in-depth but I felt like I

00:22:07,100 --> 00:22:16,760
needed to mention branches a branch is

00:22:12,050 --> 00:22:20,900
just a new I suggest a branch is a new

00:22:16,760 --> 00:22:22,790
working copy of your repository so to

00:22:20,900 --> 00:22:24,679
continue with our track changes sort of

00:22:22,790 --> 00:22:27,500
metaphor if you've ever worked on

00:22:24,679 --> 00:22:28,070
revising of a Word document with someone

00:22:27,500 --> 00:22:30,080
else

00:22:28,070 --> 00:22:32,179
and you're emailing versions of it back

00:22:30,080 --> 00:22:34,429
and forth you know that you might start

00:22:32,179 --> 00:22:36,710
off with document X but eventually you

00:22:34,429 --> 00:22:40,820
end up with document - final - final -

00:22:36,710 --> 00:22:44,750
John's changes - really final V - this

00:22:40,820 --> 00:22:47,150
is a branch branches allow you to make

00:22:44,750 --> 00:22:49,790
changes to your repository and sort of

00:22:47,150 --> 00:22:52,580
an exploratory or experimental kind of

00:22:49,790 --> 00:22:54,320
way without underlying that underlying

00:22:52,580 --> 00:22:56,300
master copies if you ever played video

00:22:54,320 --> 00:22:59,360
games it's like having a save point

00:22:56,300 --> 00:23:01,400
right I'm about to get my ass kicked by

00:22:59,360 --> 00:23:02,990
the big monster I'm going to save here

00:23:01,400 --> 00:23:07,910
so that I could start over from this

00:23:02,990 --> 00:23:09,770
known point completely intuitively the

00:23:07,910 --> 00:23:12,620
way you make a new branch and get is by

00:23:09,770 --> 00:23:14,780
using the check out command with this -

00:23:12,620 --> 00:23:17,090
be flag that says create a new branch

00:23:14,780 --> 00:23:20,210
and this will make a new branch and put

00:23:17,090 --> 00:23:22,309
you on it once you have a branch and

00:23:20,210 --> 00:23:23,960
you've made some done some work on it if

00:23:22,309 --> 00:23:26,809
you're working on an open source project

00:23:23,960 --> 00:23:28,700
you may need to push that branch not

00:23:26,809 --> 00:23:31,640
this kind of pushing different kind of

00:23:28,700 --> 00:23:36,050
pushing if you recognize this video your

00:23:31,640 --> 00:23:38,600
old pushing just means sending changes

00:23:36,050 --> 00:23:40,850
from your copy of the repository to some

00:23:38,600 --> 00:23:42,679
other copy of the repository and that

00:23:40,850 --> 00:23:45,530
other copy of the repository is called

00:23:42,679 --> 00:23:49,340
the remote the command you used to do

00:23:45,530 --> 00:23:52,429
this is just get push and I just said

00:23:49,340 --> 00:23:54,590
that if you're working on an open source

00:23:52,429 --> 00:23:56,960
project when you do this when you push

00:23:54,590 --> 00:23:58,100
your branch up somewhere you're going to

00:23:56,960 --> 00:23:59,910
do something called the pull request

00:23:58,100 --> 00:24:01,770
which is saying hey

00:23:59,910 --> 00:24:03,540
person who owns this other copy of the

00:24:01,770 --> 00:24:05,790
repository please look at my

00:24:03,540 --> 00:24:07,890
contribution and accept it it's just a

00:24:05,790 --> 00:24:12,180
request to merge your changes into the

00:24:07,890 --> 00:24:14,550
repository there may be a code review

00:24:12,180 --> 00:24:16,260
step there may not be a code review step

00:24:14,550 --> 00:24:18,120
but at some point you're going to need

00:24:16,260 --> 00:24:21,150
to merge or somebody's going to need to

00:24:18,120 --> 00:24:22,710
merge your branch into back and see

00:24:21,150 --> 00:24:25,830
what's called the master branch which is

00:24:22,710 --> 00:24:27,300
the main trunk of development and you do

00:24:25,830 --> 00:24:29,340
that with these two commands you check

00:24:27,300 --> 00:24:31,560
out the master branch and then you say

00:24:29,340 --> 00:24:33,080
get merge and the branch name and that

00:24:31,560 --> 00:24:35,460
will handle the merging for you

00:24:33,080 --> 00:24:37,470
depending on the project or your

00:24:35,460 --> 00:24:40,380
workplace there may be specific rules

00:24:37,470 --> 00:24:45,440
around how that specifically has to

00:24:40,380 --> 00:24:50,610
happen I'm not going to go into that so

00:24:45,440 --> 00:24:52,020
what to do when things go bad because

00:24:50,610 --> 00:24:54,750
when you're working with get things are

00:24:52,020 --> 00:24:58,910
going to go bad there are two fixes in

00:24:54,750 --> 00:24:58,910
my experience that almost always work

00:24:59,510 --> 00:25:03,810
step number one is to google for

00:25:01,620 --> 00:25:05,700
solutions because odds are someone else

00:25:03,810 --> 00:25:08,100
has had this problem before you've

00:25:05,700 --> 00:25:12,990
probably not broken get in a completely

00:25:08,100 --> 00:25:15,150
novel way although possibly but before

00:25:12,990 --> 00:25:17,520
you try out random internet solution

00:25:15,150 --> 00:25:19,020
what you need to do is make a copy of

00:25:17,520 --> 00:25:21,060
your repository and when I say make a

00:25:19,020 --> 00:25:25,230
copy or posit or E I just mean on your

00:25:21,060 --> 00:25:27,990
local hard drive run like CP - our repo

00:25:25,230 --> 00:25:30,840
you know repo - or repo duck back or

00:25:27,990 --> 00:25:33,270
whatever so because you've got things in

00:25:30,840 --> 00:25:34,890
to bad state somehow and you're going to

00:25:33,270 --> 00:25:36,960
try some random command from the

00:25:34,890 --> 00:25:38,880
internet in my experience there's about

00:25:36,960 --> 00:25:40,680
a 50/50 chance that it will either fix

00:25:38,880 --> 00:25:43,170
things or it's going to make them

00:25:40,680 --> 00:25:45,750
incredibly worse and if it makes them

00:25:43,170 --> 00:25:47,670
incredibly worse you want to get back to

00:25:45,750 --> 00:25:49,590
the original just broken state and

00:25:47,670 --> 00:25:53,610
that's what having this copy lets you do

00:25:49,590 --> 00:25:56,970
and if it fails throw away the copy and

00:25:53,610 --> 00:25:58,260
try the second Google hit and keep doing

00:25:56,970 --> 00:26:00,510
that for a little bit

00:25:58,260 --> 00:26:02,010
once you get down to like the fourth or

00:26:00,510 --> 00:26:05,130
fifth Google hit and you still haven't

00:26:02,010 --> 00:26:07,860
fixed it instead of copying your

00:26:05,130 --> 00:26:10,360
repository directory rename it I like to

00:26:07,860 --> 00:26:14,790
use bad as an extension or dot

00:26:10,360 --> 00:26:17,950
screwed depending on the level of my

00:26:14,790 --> 00:26:20,650
anger and then just wreak low the

00:26:17,950 --> 00:26:22,390
repository from wherever you got it this

00:26:20,650 --> 00:26:24,460
doesn't work if there are positive local

00:26:22,390 --> 00:26:26,740
only but that's fairly rare when working

00:26:24,460 --> 00:26:28,420
with get just make a new copy and then

00:26:26,740 --> 00:26:30,370
any changes that are in the screwed up

00:26:28,420 --> 00:26:32,020
copy of the repository that you hadn't

00:26:30,370 --> 00:26:33,640
committed yet you could just copy those

00:26:32,020 --> 00:26:37,720
over in the file system check them in

00:26:33,640 --> 00:26:39,670
the new copy just start over I will say

00:26:37,720 --> 00:26:42,670
I am a fairly sophisticated get user

00:26:39,670 --> 00:26:46,510
I've been using it for over ten years

00:26:42,670 --> 00:26:49,780
I've given multiple probably ten at this

00:26:46,510 --> 00:26:52,030
point talks at conferences about get

00:26:49,780 --> 00:26:54,580
about various aspects of get I've led

00:26:52,030 --> 00:26:56,380
all day trainings on get and I've

00:26:54,580 --> 00:27:00,100
managed to screw up repositories so

00:26:56,380 --> 00:27:03,280
badly that I've done this like more than

00:27:00,100 --> 00:27:06,310
once in the last twelve months so there

00:27:03,280 --> 00:27:08,230
is no shame in this right there are some

00:27:06,310 --> 00:27:10,690
times when a repository gets screwed up

00:27:08,230 --> 00:27:13,840
so badly that I know how to fix it

00:27:10,690 --> 00:27:17,610
but it's just not worth the time because

00:27:13,840 --> 00:27:22,450
some of the fixes get lengthy alright so

00:27:17,610 --> 00:27:25,840
we've scaled mountains today to review

00:27:22,450 --> 00:27:27,610
get status is how you ask get what's

00:27:25,840 --> 00:27:30,850
going on in the current copy of your

00:27:27,610 --> 00:27:32,530
repository get add is how you add a file

00:27:30,850 --> 00:27:35,050
to the staging area to get it ready to

00:27:32,530 --> 00:27:36,850
commit get commit is how you actually

00:27:35,050 --> 00:27:39,640
commit it into the history of the

00:27:36,850 --> 00:27:41,410
repository git diff will show you the

00:27:39,640 --> 00:27:43,990
difference between what's in your

00:27:41,410 --> 00:27:46,810
working copy and what's in the recorded

00:27:43,990 --> 00:27:48,220
commit of the repository git log will

00:27:46,810 --> 00:27:50,350
show you the commit messages and

00:27:48,220 --> 00:27:53,100
possibly the diffs associated with the

00:27:50,350 --> 00:27:53,100
history of the repository

00:27:54,010 --> 00:27:59,260
that should say get check out is how you

00:27:56,110 --> 00:28:01,540
make a branch it says get branch because

00:27:59,260 --> 00:28:04,450
I really hate the git checkout is how

00:28:01,540 --> 00:28:07,510
you make a new branch get push is how

00:28:04,450 --> 00:28:10,030
you send changes from your repository to

00:28:07,510 --> 00:28:12,340
a remote or a different copy of the same

00:28:10,030 --> 00:28:14,320
repository and then get merge is how you

00:28:12,340 --> 00:28:17,380
merge a branch back into another one

00:28:14,320 --> 00:28:18,169
once you are done doing what you're

00:28:17,380 --> 00:28:22,820
doing on the branch

00:28:18,169 --> 00:28:24,700
a few additional resources that pictures

00:28:22,820 --> 00:28:27,470
a little dark but it's a picture of beer

00:28:24,700 --> 00:28:28,850
beer is frequently a useful resource if

00:28:27,470 --> 00:28:32,419
you're working on get if you happen to

00:28:28,850 --> 00:28:35,059
be a first of your drinks beer get -

00:28:32,419 --> 00:28:38,059
SCMS where you can obtain a copy of get

00:28:35,059 --> 00:28:39,739
for your very own hello well books calm

00:28:38,059 --> 00:28:41,629
learn command line is where that really

00:28:39,739 --> 00:28:43,669
friendly command line intro is located

00:28:41,629 --> 00:28:48,249
recommend it if you're not familiar with

00:28:43,669 --> 00:28:50,869
using the command line github is a git

00:28:48,249 --> 00:28:54,080
hosting site they also have this

00:28:50,869 --> 00:28:55,909
sub-site called try github do that has

00:28:54,080 --> 00:28:58,309
this awesome little JavaScript based

00:28:55,909 --> 00:29:00,259
console window that will lead you

00:28:58,309 --> 00:29:01,519
interactively through pretty much all of

00:29:00,259 --> 00:29:03,139
the git commands that I have talked

00:29:01,519 --> 00:29:04,489
about and say like you want to do this

00:29:03,139 --> 00:29:06,080
and this is the command you need to use

00:29:04,489 --> 00:29:07,999
and then you actually have to type it

00:29:06,080 --> 00:29:10,820
which I find is a much better learning

00:29:07,999 --> 00:29:12,559
experience than having me talk at you is

00:29:10,820 --> 00:29:13,909
to actually play around with using the

00:29:12,559 --> 00:29:15,499
tool yourself so this is highly

00:29:13,909 --> 00:29:17,359
recommended

00:29:15,499 --> 00:29:19,789
git list comm is where you can obtain

00:29:17,359 --> 00:29:24,889
that wrapper around get that eliminates

00:29:19,789 --> 00:29:27,470
the staging area when you are ready to

00:29:24,889 --> 00:29:30,529
learn much more about get to an insane

00:29:27,470 --> 00:29:34,070
level of detail there's a free book at

00:29:30,529 --> 00:29:37,159
git - SCM comm - the main get site slash

00:29:34,070 --> 00:29:40,009
book there's this is the electronic copy

00:29:37,159 --> 00:29:41,960
of a book called Pro get that will tell

00:29:40,009 --> 00:29:43,519
you way more than you wanted to know

00:29:41,960 --> 00:29:45,619
about how everything works under the

00:29:43,519 --> 00:29:47,269
covers with git

00:29:45,619 --> 00:29:50,749
so when you're ready for the deep dive

00:29:47,269 --> 00:29:52,759
this is a good place to start I want to

00:29:50,749 --> 00:29:54,799
say thanks to the organizers for

00:29:52,759 --> 00:29:56,109
accepting the talk thanks to all of you

00:29:54,799 --> 00:29:58,789
for coming to the talk

00:29:56,109 --> 00:30:01,700
thanks to my employer for paying to send

00:29:58,789 --> 00:30:04,190
me to give you the talk we are looking

00:30:01,700 --> 00:30:05,989
to hire a QA lead so if anybody knows a

00:30:04,190 --> 00:30:07,789
QA lead or would like to be a QA lead

00:30:05,989 --> 00:30:09,940
please find me and talk to me about how

00:30:07,789 --> 00:30:14,359
we can make that happen

00:30:09,940 --> 00:30:15,799
total commercial aside I'm on the talks

00:30:14,359 --> 00:30:18,609
committee for a different conference

00:30:15,799 --> 00:30:20,899
called Segal which happens in Seattle in

00:30:18,609 --> 00:30:22,789
November this year our call for

00:30:20,899 --> 00:30:25,070
proposals is open right now we would

00:30:22,789 --> 00:30:26,749
love to have you talk we're particularly

00:30:25,070 --> 00:30:28,429
looking for first-time speakers or

00:30:26,749 --> 00:30:31,310
members of underrepresented communities

00:30:28,429 --> 00:30:33,860
in Seattle it's free to attend

00:30:31,310 --> 00:30:40,790
and I have got plenty of time for

00:30:33,860 --> 00:30:46,730
questions or we can all see if there's

00:30:40,790 --> 00:30:48,320
cookies left way to screw that up it's

00:30:46,730 --> 00:31:04,190
just trying to make it easy for people

00:30:48,320 --> 00:31:05,750
to walk out like Dave I keep hearing

00:31:04,190 --> 00:31:10,430
about a scary thing called git rebase

00:31:05,750 --> 00:31:13,730
but I don't know very much about it so

00:31:10,430 --> 00:31:17,720
it is a scary thing I'm actually one of

00:31:13,730 --> 00:31:20,750
my one of the things in my talk ideas

00:31:17,720 --> 00:31:23,270
folder is a talk just on rebase actually

00:31:20,750 --> 00:31:27,440
because it's also insanely useful

00:31:23,270 --> 00:31:29,660
what rebase lets you do is once you have

00:31:27,440 --> 00:31:31,390
committed something into your repository

00:31:29,660 --> 00:31:35,390
into the history of your repository

00:31:31,390 --> 00:31:37,970
rebase lets you go in and change it and

00:31:35,390 --> 00:31:42,350
and rewrite that history it also lets

00:31:37,970 --> 00:31:43,670
you do things like I really need a

00:31:42,350 --> 00:31:45,950
whiteboard for this when you make a

00:31:43,670 --> 00:31:47,990
branch off of the main chunk of

00:31:45,950 --> 00:31:50,270
development and you make some commits

00:31:47,990 --> 00:31:52,010
onto that branch and then the main chunk

00:31:50,270 --> 00:31:53,870
of development also advances with other

00:31:52,010 --> 00:31:55,670
commits another thing you can do with

00:31:53,870 --> 00:31:58,880
rebase is you can basically pick that

00:31:55,670 --> 00:32:01,430
branch up and move it to a different

00:31:58,880 --> 00:32:02,990
point and effectively say actually let's

00:32:01,430 --> 00:32:05,300
pretend that instead of starting this

00:32:02,990 --> 00:32:08,480
branch last week I started it today

00:32:05,300 --> 00:32:09,770
with where this is right now and

00:32:08,480 --> 00:32:13,550
sometimes that's something you need to

00:32:09,770 --> 00:32:16,580
do there are some workflows where people

00:32:13,550 --> 00:32:18,980
rebase before merging a branch because

00:32:16,580 --> 00:32:20,960
and what that will do for you is it

00:32:18,980 --> 00:32:23,120
effectively linearizes your commit

00:32:20,960 --> 00:32:26,080
history so that it looks like everything

00:32:23,120 --> 00:32:31,070
is one neat line as opposed to a crazy

00:32:26,080 --> 00:32:34,070
spaghetti mix of branches but that's a

00:32:31,070 --> 00:32:36,500
whole I can't go into specifics cuz it's

00:32:34,070 --> 00:32:38,870
like a whole other talk but it is kind

00:32:36,500 --> 00:32:40,340
of also I think the one it is not

00:32:38,870 --> 00:32:43,150
something you need to know anything

00:32:40,340 --> 00:32:45,559
about to use get at a basic level of

00:32:43,150 --> 00:32:48,590
making changes and committing them and

00:32:45,559 --> 00:32:49,850
sending them to a remote to contribute

00:32:48,590 --> 00:32:52,039
to an open-source project you don't need

00:32:49,850 --> 00:32:54,529
to know anything about read ace it is

00:32:52,039 --> 00:32:58,250
probably the first thing that you need

00:32:54,529 --> 00:33:01,669
to learn if you want to go from beginner

00:32:58,250 --> 00:33:04,669
level get to like medium or even into

00:33:01,669 --> 00:33:09,830
advanced git rebase is is probably the

00:33:04,669 --> 00:33:12,770
biggest I know it's kind of like going

00:33:09,830 --> 00:33:15,130
from a handsaw to a power miter saw if

00:33:12,770 --> 00:33:15,130
you will

00:33:21,740 --> 00:33:26,400
what workflow would you use to deploy

00:33:24,540 --> 00:33:30,000
from a dev environment to a production

00:33:26,400 --> 00:33:32,520
environment it totally depends on what

00:33:30,000 --> 00:33:35,100
you're trying to do like workflows that

00:33:32,520 --> 00:33:38,730
I have used in the past we've had and it

00:33:35,100 --> 00:33:40,020
depends on sort of what your what your

00:33:38,730 --> 00:33:42,870
build system is are you building

00:33:40,020 --> 00:33:46,490
manually you've got CI systems set up

00:33:42,870 --> 00:33:50,520
like we have things set up at work I

00:33:46,490 --> 00:33:52,470
don't know what grassroots is we have we

00:33:50,520 --> 00:33:54,960
have stuff set up at work where so we

00:33:52,470 --> 00:33:56,520
use the atlast and stack so the the

00:33:54,960 --> 00:33:57,150
source code control server is called

00:33:56,520 --> 00:33:59,370
bitbucket

00:33:57,150 --> 00:34:01,950
but it uses git and the continuous

00:33:59,370 --> 00:34:04,230
integration server is called bamboo so

00:34:01,950 --> 00:34:06,720
we have projects where bamboo is

00:34:04,230 --> 00:34:08,210
configured so that when somebody pushes

00:34:06,720 --> 00:34:11,310
to the master branch of a git repository

00:34:08,210 --> 00:34:15,450
it checks out the repository runs the

00:34:11,310 --> 00:34:19,760
bill deploys the code to a staging

00:34:15,450 --> 00:34:23,490
environment and then it gets QA I don't

00:34:19,760 --> 00:34:25,260
other people will like have different

00:34:23,490 --> 00:34:27,360
opinions about this I am NOT a fan of

00:34:25,260 --> 00:34:30,480
automated deploys to production without

00:34:27,360 --> 00:34:32,460
a human in the loop so we don't

00:34:30,480 --> 00:34:34,860
automatically deploy to production it's

00:34:32,460 --> 00:34:37,350
always a manual promotion from an

00:34:34,860 --> 00:34:41,669
earlier staging environment but we'll

00:34:37,350 --> 00:34:43,770
have you know the the last big project I

00:34:41,669 --> 00:34:46,350
worked on we were using a workflow

00:34:43,770 --> 00:34:48,360
called git flow which is basically

00:34:46,350 --> 00:34:50,370
involved setting up a you have a master

00:34:48,360 --> 00:34:52,740
branch that's always ready to deploy and

00:34:50,370 --> 00:34:54,179
then you have a dev branch where you're

00:34:52,740 --> 00:34:57,149
building up the changes that you're

00:34:54,179 --> 00:34:58,980
working on in the current sprint so we

00:34:57,149 --> 00:35:00,960
would have the dev branch set up so that

00:34:58,980 --> 00:35:02,190
anytime somebody merged something back

00:35:00,960 --> 00:35:04,200
into the dev branch that would

00:35:02,190 --> 00:35:06,660
automatically deploy to the dev

00:35:04,200 --> 00:35:08,310
environment and then when the dev branch

00:35:06,660 --> 00:35:11,100
got merged into master at the end of the

00:35:08,310 --> 00:35:13,950
sprint that would deploy this staging so

00:35:11,100 --> 00:35:16,110
it's but it totally depends on what your

00:35:13,950 --> 00:35:17,850
tooling in your workflow is we've used

00:35:16,110 --> 00:35:21,240
different different workflows for other

00:35:17,850 --> 00:35:23,010
projects like that was a project with 10

00:35:21,240 --> 00:35:26,580
developers we were doing weekly releases

00:35:23,010 --> 00:35:28,980
if we have a project that has like two

00:35:26,580 --> 00:35:30,829
developers and not a regular release

00:35:28,980 --> 00:35:37,369
cycle it's a totally different

00:35:30,829 --> 00:35:39,559
approach yeah I mean I think if you

00:35:37,369 --> 00:35:41,029
don't have continuous integration if you

00:35:39,559 --> 00:35:42,920
don't have automated builds already

00:35:41,029 --> 00:35:45,049
worried about that before you worry

00:35:42,920 --> 00:35:50,289
about the git integration part would be

00:35:45,049 --> 00:35:53,059
my advice yes sir

00:35:50,289 --> 00:35:54,739
have I done anything with git SVN not

00:35:53,059 --> 00:35:56,569
for a while

00:35:54,739 --> 00:35:59,150
there was definitely a period where it

00:35:56,569 --> 00:36:01,640
was necessary to use that so get SPN for

00:35:59,150 --> 00:36:03,469
folks who don't know is a tool that will

00:36:01,640 --> 00:36:05,269
let you interact with a subversion

00:36:03,469 --> 00:36:08,420
repository which is another revision

00:36:05,269 --> 00:36:13,759
control system using the git command

00:36:08,420 --> 00:36:17,869
line tools excuse me in my experience it

00:36:13,759 --> 00:36:21,109
mostly works it gets funky around

00:36:17,869 --> 00:36:23,079
subversion branching but people didn't

00:36:21,109 --> 00:36:28,369
use branching that much with subversion

00:36:23,079 --> 00:36:30,349
and inevitably it will get screwed up

00:36:28,369 --> 00:36:32,900
right what you will find is that at some

00:36:30,349 --> 00:36:35,930
point it will be working fine something

00:36:32,900 --> 00:36:38,359
will happen and it relies on doing a lot

00:36:35,930 --> 00:36:41,209
of tracking of stuff outside of SBN at

00:36:38,359 --> 00:36:42,259
some point that gets bollixed and really

00:36:41,209 --> 00:36:45,680
the only thing you could do at that

00:36:42,259 --> 00:36:46,549
point is just re clone from SVN and

00:36:45,680 --> 00:36:51,079
start over

00:36:46,549 --> 00:36:53,140
it I don't know why I suspect that under

00:36:51,079 --> 00:36:58,009
the hood the whole thing is a giant Cluj

00:36:53,140 --> 00:37:01,420
and I would recommend just converting

00:36:58,009 --> 00:37:01,420
off of SPN as quickly as possible

00:37:02,769 --> 00:37:08,359
20:18 is calling like is SP uneven

00:37:05,809 --> 00:37:11,109
maintained anymore but it's a legitimate

00:37:08,359 --> 00:37:11,109
question I don't know

00:37:16,360 --> 00:37:19,540
just do it

00:37:59,720 --> 00:38:08,420
get SBN is the is the official answer to

00:38:03,560 --> 00:38:10,070
that that or like give buy-in from

00:38:08,420 --> 00:38:11,690
technical leadership because like the

00:38:10,070 --> 00:38:14,420
gentleman said you never get everybody

00:38:11,690 --> 00:38:18,440
to agree but if you can get the person

00:38:14,420 --> 00:38:20,390
in charge to agree like it pretty much

00:38:18,440 --> 00:38:22,430
ends up having to be done by Fiat like

00:38:20,390 --> 00:38:23,780
you are not gonna build up consensus cuz

00:38:22,430 --> 00:38:26,060
there's always gonna be some grumpy old

00:38:23,780 --> 00:38:34,670
bastard like Adler who's just like stay

00:38:26,060 --> 00:38:37,340
on super end yeah Dave's not actually

00:38:34,670 --> 00:38:39,820
that grumpy or that old and I'm pretty

00:38:37,340 --> 00:38:44,390
sure his parents were married so it was

00:38:39,820 --> 00:38:47,530
three slanderous lies really I'm sorry

00:38:44,390 --> 00:38:47,530
yes sir

00:39:12,910 --> 00:39:17,500
there are there's there is actually a

00:39:15,070 --> 00:39:20,590
different tool that I think still ships

00:39:17,500 --> 00:39:22,420
with get that will there are things out

00:39:20,590 --> 00:39:24,430
there that will help you like migrate

00:39:22,420 --> 00:39:26,410
your so that you don't lose the history

00:39:24,430 --> 00:39:28,690
it'll migrate your subversion history

00:39:26,410 --> 00:39:32,170
into the git repository like that's

00:39:28,690 --> 00:39:33,520
that's an that's a solved problem there

00:39:32,170 --> 00:39:35,170
are things out there that will do that

00:39:33,520 --> 00:39:36,040
for you so you're not going to lose the

00:39:35,170 --> 00:39:40,480
history at all

00:39:36,040 --> 00:39:42,850
but it's definitely a you know you're

00:39:40,480 --> 00:39:49,080
burning the boats on the shore kind of

00:39:42,850 --> 00:39:49,080
thing hey any other yes sir

00:39:56,349 --> 00:40:04,790
are there any other flavor of the week

00:39:59,829 --> 00:40:06,260
revision control system so so for yeah

00:40:04,790 --> 00:40:08,300
for those of you are not aware Microsoft

00:40:06,260 --> 00:40:10,220
recently brought github but that's

00:40:08,300 --> 00:40:12,319
actually kind of not directly related to

00:40:10,220 --> 00:40:14,780
the question so there are still some

00:40:12,319 --> 00:40:16,400
people out there using mercurial which

00:40:14,780 --> 00:40:18,050
is a different or distributed revision

00:40:16,400 --> 00:40:20,980
control system that's actually slightly

00:40:18,050 --> 00:40:24,470
older than get has a few different

00:40:20,980 --> 00:40:28,160
metaphors for some of the stuff I ran

00:40:24,470 --> 00:40:30,140
into something recently and I don't

00:40:28,160 --> 00:40:32,750
remember the name of it

00:40:30,140 --> 00:40:34,880
sequel Lite the codebase Rasika lite

00:40:32,750 --> 00:40:36,260
it's called fossil so the code base for

00:40:34,880 --> 00:40:38,140
sequel Lite is maintained in this

00:40:36,260 --> 00:40:40,940
revision control system called fossil

00:40:38,140 --> 00:40:44,839
which I think was written by the primary

00:40:40,940 --> 00:40:47,480
author of sequel Lite it is also totally

00:40:44,839 --> 00:40:49,700
different than yet it has basically a

00:40:47,480 --> 00:40:52,940
bunch more integrated project management

00:40:49,700 --> 00:40:54,380
stuff I haven't looked at it at all as

00:40:52,940 --> 00:40:56,270
far as I know the only project that

00:40:54,380 --> 00:40:57,890
actually uses it as sequel Lite probably

00:40:56,270 --> 00:41:00,740
anything else that the author of sequel

00:40:57,890 --> 00:41:02,510
Lite has ever written those are the ones

00:41:00,740 --> 00:41:07,280
that I know about I think people still

00:41:02,510 --> 00:41:10,040
pay for perforce Microsoft's used to

00:41:07,280 --> 00:41:11,540
have visual sourcesafe which then turned

00:41:10,040 --> 00:41:14,119
into something called team foundation

00:41:11,540 --> 00:41:15,710
server which used a different underlying

00:41:14,119 --> 00:41:17,780
protocol and I don't think was

00:41:15,710 --> 00:41:19,040
inherently distributed but in more

00:41:17,780 --> 00:41:20,750
recent versions of Team Foundation

00:41:19,040 --> 00:41:25,880
server they've actually replaced that

00:41:20,750 --> 00:41:28,940
with git so it kind of at this point is

00:41:25,880 --> 00:41:33,920
I think effectively the lingua franca of

00:41:28,940 --> 00:41:36,400
revision control systems but it's not

00:41:33,920 --> 00:41:36,400
something

00:41:38,230 --> 00:41:50,440
it's forgot about bazaar

00:41:52,660 --> 00:42:01,280
there's a fairly famous computer science

00:41:58,190 --> 00:42:04,370
paper called the rise of worse is better

00:42:01,280 --> 00:42:06,380
that describes two sort of competing

00:42:04,370 --> 00:42:08,840
philosophies and software design one is

00:42:06,380 --> 00:42:10,640
called the New Jersey approach and the

00:42:08,840 --> 00:42:13,130
other is called I forget what it is but

00:42:10,640 --> 00:42:17,800
basically like on one side you had Lisp

00:42:13,130 --> 00:42:20,300
and on the other side you had C and c1

00:42:17,800 --> 00:42:23,150
right but it didn't win because it was

00:42:20,300 --> 00:42:28,340
better it actually won because it was

00:42:23,150 --> 00:42:31,400
worse gets kind of this I think in some

00:42:28,340 --> 00:42:33,260
ways the same thing but if you haven't

00:42:31,400 --> 00:42:35,900
you know if you're not familiar with the

00:42:33,260 --> 00:42:37,730
vs. better as a metaphor seek that paper

00:42:35,900 --> 00:42:39,200
out and read it that's a good way to

00:42:37,730 --> 00:42:42,770
understand the good stuff because the

00:42:39,200 --> 00:42:46,700
thing is it is horrible right using it

00:42:42,770 --> 00:42:48,380
learning like the people who did get

00:42:46,700 --> 00:42:49,880
less calm it's linked from their site

00:42:48,380 --> 00:42:52,460
they actually wrote a paper that was

00:42:49,880 --> 00:42:56,990
basically paraphrasing the title like

00:42:52,460 --> 00:43:00,620
why gets design sucks it's an

00:42:56,990 --> 00:43:02,780
interesting read but the the solution

00:43:00,620 --> 00:43:04,100
that they come up with in my mind I

00:43:02,780 --> 00:43:05,720
don't think is necessarily a good

00:43:04,100 --> 00:43:07,430
general purpose solution because their

00:43:05,720 --> 00:43:08,240
solution was hey let's do away with the

00:43:07,430 --> 00:43:11,300
staging area

00:43:08,240 --> 00:43:13,120
and once you've used git for a little

00:43:11,300 --> 00:43:16,850
bit the staging area becomes an

00:43:13,120 --> 00:43:18,230
extremely powerful place because you can

00:43:16,850 --> 00:43:19,820
make a whole bunch of changes to your

00:43:18,230 --> 00:43:22,220
code base and what the staging or I'll

00:43:19,820 --> 00:43:25,130
let you do is then turn that into a

00:43:22,220 --> 00:43:27,410
series of logically structured commits

00:43:25,130 --> 00:43:29,690
instead of one big thing that changes a

00:43:27,410 --> 00:43:31,370
whole bunch of stuff you can make a

00:43:29,690 --> 00:43:34,670
whole bunch of changes all at once and

00:43:31,370 --> 00:43:37,580
then turn it into five six ten different

00:43:34,670 --> 00:43:39,860
smaller commits that are much easier for

00:43:37,580 --> 00:43:42,740
people to read and review and understand

00:43:39,860 --> 00:43:44,120
and so I think there is an argument to

00:43:42,740 --> 00:43:45,950
be made for using git lists when you're

00:43:44,120 --> 00:43:48,090
first starting out and removing that

00:43:45,950 --> 00:43:51,180
staging area and maybe making the trans

00:43:48,090 --> 00:43:53,550
off of other tools a little bit easier

00:43:51,180 --> 00:43:54,930
but I think it once you get to sort of

00:43:53,550 --> 00:43:56,610
the parrot user stage you want that

00:43:54,930 --> 00:44:21,000
stage at like I want I would die without

00:43:56,610 --> 00:44:22,620
the staging area so yes sir one of the

00:44:21,000 --> 00:44:24,720
other one of the other things that get

00:44:22,620 --> 00:44:26,070
less changes and all one of the other

00:44:24,720 --> 00:44:27,630
things that get less changes that I

00:44:26,070 --> 00:44:31,920
think is a much more interesting change

00:44:27,630 --> 00:44:34,770
is they make branches sort of more

00:44:31,920 --> 00:44:36,480
complete so they're the way they're

00:44:34,770 --> 00:44:38,010
branching model works and this all

00:44:36,480 --> 00:44:40,440
happens automatically under the hood if

00:44:38,010 --> 00:44:42,060
you are on a branch and you've made some

00:44:40,440 --> 00:44:44,220
changes but you haven't committed them

00:44:42,060 --> 00:44:47,760
yet and you switch to a different branch

00:44:44,220 --> 00:44:52,830
it keeps those uncommitted untracked

00:44:47,760 --> 00:44:54,240
changes with the branch you were on so

00:44:52,830 --> 00:44:55,680
that when you like that because that's

00:44:54,240 --> 00:44:57,300
another confusing thing if you make a

00:44:55,680 --> 00:44:58,740
branch change the file you haven't

00:44:57,300 --> 00:44:59,730
committed it and you go back to the

00:44:58,740 --> 00:45:02,430
branch you started from those

00:44:59,730 --> 00:45:04,560
uncommitted changes persist right and

00:45:02,430 --> 00:45:06,660
sometimes you want that but it's also a

00:45:04,560 --> 00:45:08,400
little bit confusing about how the

00:45:06,660 --> 00:45:12,830
branching model works so they do have

00:45:08,400 --> 00:45:12,830
some interesting ideas you had a

00:45:27,030 --> 00:45:32,440
some people do squashes before merging

00:45:30,580 --> 00:45:52,090
and those people are wrong and need to

00:45:32,440 --> 00:45:53,320
be stopped yeah it is it is it is it's

00:45:52,090 --> 00:45:54,820
sort of a curse and a blessing right

00:45:53,320 --> 00:45:56,230
because it is very flexible and it does

00:45:54,820 --> 00:45:57,670
support pretty much any workflow you

00:45:56,230 --> 00:46:00,609
could come up with but it means you need

00:45:57,670 --> 00:46:01,900
to come up with a workflow and the first

00:46:00,609 --> 00:46:06,599
work play you come up with is probably

00:46:01,900 --> 00:46:06,599
going to be wrong David

00:46:20,690 --> 00:46:23,690
branching

00:46:41,890 --> 00:46:47,650
see I get get is a little bit more space

00:46:44,410 --> 00:46:49,060
efficient than some of the other just

00:46:47,650 --> 00:46:50,320
because of some of the other revision

00:46:49,060 --> 00:46:51,970
control systems just because of the way

00:46:50,320 --> 00:46:54,520
it stores changes one of the other

00:46:51,970 --> 00:46:59,350
things that was revolutionary about get

00:46:54,520 --> 00:47:02,290
at the time is because you are working

00:46:59,350 --> 00:47:04,150
with a local repository and only pushing

00:47:02,290 --> 00:47:05,950
changes to your remote when you're ready

00:47:04,150 --> 00:47:08,230
to push them to your remote it means

00:47:05,950 --> 00:47:11,950
that you can work completely offline and

00:47:08,230 --> 00:47:13,690
still commit things whereas if you

00:47:11,950 --> 00:47:15,790
remember subversion you couldn't commit

00:47:13,690 --> 00:47:17,770
on in subversion unless you were able to

00:47:15,790 --> 00:47:20,410
talk to the remote server that's not an

00:47:17,770 --> 00:47:21,880
issue with git so it's kind of not a

00:47:20,410 --> 00:47:23,350
thing anymore but when people first

00:47:21,880 --> 00:47:24,760
started using it there was a whole lot

00:47:23,350 --> 00:47:31,480
of like I'm committing from a plane

00:47:24,760 --> 00:47:36,400
without Wi-Fi because I can I got time

00:47:31,480 --> 00:47:38,320
for maybe one more question my fonts are

00:47:36,400 --> 00:47:40,480
wonderful what do I use so this is a

00:47:38,320 --> 00:47:43,120
program called deck set

00:47:40,480 --> 00:47:44,800
it is a Mac only presentation thing that

00:47:43,120 --> 00:47:46,500
lets you write your slides and markdown

00:47:44,800 --> 00:47:55,260
and then it handles all the typography

00:47:46,500 --> 00:47:55,260
this font is actually called make sure

00:47:56,280 --> 00:48:05,920
it's fira sans is the font fira is a

00:48:03,850 --> 00:48:10,230
freely available thought nearest sans

00:48:05,920 --> 00:48:12,700
and fira mono for the code bits

00:48:10,230 --> 00:48:17,290
yeah decks ed is awesome if you don't

00:48:12,700 --> 00:48:18,790
mind paying for software it one of the

00:48:17,290 --> 00:48:20,470
really nice things about it is that it

00:48:18,790 --> 00:48:22,060
doesn't let you have a lot of control

00:48:20,470 --> 00:48:23,290
over how things are laid out which means

00:48:22,060 --> 00:48:26,320
you don't spend a whole at a time

00:48:23,290 --> 00:48:28,150
tweaking things like individual pixel

00:48:26,320 --> 00:48:31,810
level it just kind of you get what you

00:48:28,150 --> 00:48:33,940
get and it's because the files are in

00:48:31,810 --> 00:48:38,560
markdown it's very easy to put them and

00:48:33,940 --> 00:48:42,280
get them back to relevance alright

00:48:38,560 --> 00:48:43,610
thanks everybody I'm here all week

00:48:42,280 --> 00:48:47,019
you

00:48:43,610 --> 00:48:47,019

YouTube URL: https://www.youtube.com/watch?v=PuSFqiDm0YU


