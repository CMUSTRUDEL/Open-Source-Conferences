Title: Jan Samborski - "Training Your Inner Cowboy"
Publication date: 2018-06-19
Playlist: TPC 2018 in SLC
Description: 
	Are you a solo developer?
Do you cringe when you have to have change code you wrote a year ago? a month ago? last week?
Have you thrown away working code which solved the right problem but for the wrong people at the wrong time?
Want to develop the right app for the right people in the shortest time?
This presentation will steer you in that direction
We have merged Modern::Perl and Agile methods to reliably make apps which can be built quickly and changeable for years to come.
This is a workflow, not just an application. You can pick and choose what you want or commit to the whole system and see how it works for you.
You have nothing to lose, nothing to buy, everything to gain and you are using the tools you know.
Lets get started today and deliver tomorrow!
Captions: 
	00:00:22,890 --> 00:00:29,210
yeah I heard I heard about that okay all

00:00:27,970 --> 00:00:32,260
right very good

00:00:29,210 --> 00:00:32,260
[Music]

00:00:38,640 --> 00:00:48,550
all right okay all right well my name is

00:00:46,000 --> 00:00:50,950
Jan Szymborska welcome to the training

00:00:48,550 --> 00:00:54,160
your inner cowboy bridging from

00:00:50,950 --> 00:00:56,110
programmer to developer the lion I

00:00:54,160 --> 00:00:58,930
wanted to start out with was I know I'm

00:00:56,110 --> 00:01:01,059
not the smartest in the room but I sure

00:00:58,930 --> 00:01:03,600
hope I'm not the dumbest I guess we're

00:01:01,059 --> 00:01:07,270
gonna find out right now so let's go in

00:01:03,600 --> 00:01:10,630
this presentation is going to be for the

00:01:07,270 --> 00:01:13,840
beginner or seasoned developer or

00:01:10,630 --> 00:01:17,680
programmer it's mainly for people who

00:01:13,840 --> 00:01:20,860
use a purple pearl mousse how many

00:01:17,680 --> 00:01:25,840
people here use mousse on a regular

00:01:20,860 --> 00:01:28,840
basis all right it's also more for the

00:01:25,840 --> 00:01:30,970
salt solo or a small team programmer I'm

00:01:28,840 --> 00:01:34,539
a system admin I typically do my own

00:01:30,970 --> 00:01:37,390
scripts and my own applications on my

00:01:34,539 --> 00:01:40,030
own so it's good for people like me

00:01:37,390 --> 00:01:43,209
hence where the cowboy term comes in and

00:01:40,030 --> 00:01:46,000
found over the years that you need to go

00:01:43,209 --> 00:01:49,149
back into code and make changes so I've

00:01:46,000 --> 00:01:51,670
developed a system which is the what

00:01:49,149 --> 00:01:53,670
what I what I put together from what

00:01:51,670 --> 00:01:55,959
I've learned and from what I've seen and

00:01:53,670 --> 00:01:58,660
basically call it rapid apps a

00:01:55,959 --> 00:02:01,000
grassroots development system which gets

00:01:58,660 --> 00:02:03,039
you from idea to app and a fast reliable

00:02:01,000 --> 00:02:05,050
and predictable workflow for a wide

00:02:03,039 --> 00:02:09,929
variety of applications for me it's

00:02:05,050 --> 00:02:12,940
mainly CLI hmm but this would work with

00:02:09,929 --> 00:02:14,530
databases websites what have you must be

00:02:12,940 --> 00:02:17,230
but not so much websites but anything

00:02:14,530 --> 00:02:21,010
that using CLI for command-line

00:02:17,230 --> 00:02:24,390
interface rapid apps is using many of

00:02:21,010 --> 00:02:27,430
the agile techniques and practices that

00:02:24,390 --> 00:02:29,349
we'll discuss as we go through this many

00:02:27,430 --> 00:02:31,209
of these practices are adopted by I'm

00:02:29,349 --> 00:02:33,190
sure everybody here is heard of agile

00:02:31,209 --> 00:02:35,560
and probably a lot of people here are

00:02:33,190 --> 00:02:39,010
using it i've cherry-picked I'm only

00:02:35,560 --> 00:02:42,550
using the the best of what I find that

00:02:39,010 --> 00:02:44,830
works for me why am i doing this on I

00:02:42,550 --> 00:02:47,230
believe this system is simple enough to

00:02:44,830 --> 00:02:49,840
teach newbies to code and develop apps

00:02:47,230 --> 00:02:51,660
quickly to reinforce their learning not

00:02:49,840 --> 00:02:54,420
a lot of syntax there's a

00:02:51,660 --> 00:02:59,610
code is at the very back quarter of the

00:02:54,420 --> 00:03:01,380
of this workflow that's put together so

00:02:59,610 --> 00:03:04,140
from that they should there's not a lot

00:03:01,380 --> 00:03:06,180
of stuff for them to met remember

00:03:04,140 --> 00:03:08,270
and hopefully we'll talk at the end

00:03:06,180 --> 00:03:11,220
about this if you if you agree with that

00:03:08,270 --> 00:03:12,960
also with the experienced developers

00:03:11,220 --> 00:03:14,310
you're on the other end of the scale

00:03:12,960 --> 00:03:16,170
you're juggling many different

00:03:14,310 --> 00:03:18,270
applications and for you to go from one

00:03:16,170 --> 00:03:20,430
app to the other take some spin up time

00:03:18,270 --> 00:03:23,940
and all that type of thing anything that

00:03:20,430 --> 00:03:32,300
we could use that will help that is

00:03:23,940 --> 00:03:34,770
going to be a beneficial Oh okay so

00:03:32,300 --> 00:03:36,900
again when I first did this put this

00:03:34,770 --> 00:03:39,750
presentation together it was almost two

00:03:36,900 --> 00:03:42,240
hours I've trimmed a lot of it back but

00:03:39,750 --> 00:03:44,460
I'm gonna try to keep try to go as quick

00:03:42,240 --> 00:03:48,810
as I can so if there's questions please

00:03:44,460 --> 00:03:51,300
hold until the end and we'll talk about

00:03:48,810 --> 00:03:53,100
them then alright so the process you

00:03:51,300 --> 00:03:55,680
have an idea you come up with a short

00:03:53,100 --> 00:03:58,710
precise name for what this is going to

00:03:55,680 --> 00:04:00,060
be the process the application that

00:03:58,710 --> 00:04:03,780
we're going to talk about during this

00:04:00,060 --> 00:04:06,780
demo demo is CSV manager where that

00:04:03,780 --> 00:04:08,970
we're an aware in a department we have a

00:04:06,780 --> 00:04:11,190
lot of people who use CSV files they

00:04:08,970 --> 00:04:13,380
want to be able to slice and dice that

00:04:11,190 --> 00:04:15,180
data without having to push it into

00:04:13,380 --> 00:04:17,670
databases without having to push it

00:04:15,180 --> 00:04:19,290
through any kind of external tools so on

00:04:17,670 --> 00:04:21,450
the command line they want to be able to

00:04:19,290 --> 00:04:24,930
pull column names they want to be able

00:04:21,450 --> 00:04:26,190
to sort by certain things it's there's

00:04:24,930 --> 00:04:27,900
probably it's not the best solution

00:04:26,190 --> 00:04:29,940
that's that's out there but it's a good

00:04:27,900 --> 00:04:32,760
example of how we would how we would use

00:04:29,940 --> 00:04:36,050
this so for the sake of this first first

00:04:32,760 --> 00:04:39,450
process we're calling a CSV Manager and

00:04:36,050 --> 00:04:41,040
you're gonna see that a lot so define

00:04:39,450 --> 00:04:43,140
your app from the users point of view

00:04:41,040 --> 00:04:47,370
with user stories this is one of the big

00:04:43,140 --> 00:04:49,020
things of agile where you again it's

00:04:47,370 --> 00:04:51,150
from the users perspective and we'll

00:04:49,020 --> 00:04:53,130
certainly get into that the next part of

00:04:51,150 --> 00:04:54,660
this is we set up the wrapper and the

00:04:53,130 --> 00:04:57,570
wrapper script is basically you're going

00:04:54,660 --> 00:04:59,880
to be we come up with conditions seal I

00:04:57,570 --> 00:05:02,400
parameters that we're going to use as a

00:04:59,880 --> 00:05:04,140
first pass this is all very iterative so

00:05:02,400 --> 00:05:04,980
your first pass is going to be just to

00:05:04,140 --> 00:05:08,670
get the parameters

00:05:04,980 --> 00:05:11,190
in and verify that it works it doesn't

00:05:08,670 --> 00:05:14,160
do a lot and we'll get into the details

00:05:11,190 --> 00:05:18,900
of that then of course the next big step

00:05:14,160 --> 00:05:20,640
is creating a test-driven development

00:05:18,900 --> 00:05:22,380
and this quite frankly is where you're

00:05:20,640 --> 00:05:25,140
going to spend 90% of your time with

00:05:22,380 --> 00:05:27,120
your application and then you deploy

00:05:25,140 --> 00:05:28,470
your app to production this is where I

00:05:27,120 --> 00:05:31,350
was coming from with a lot of the get

00:05:28,470 --> 00:05:33,120
questions from earlier because right now

00:05:31,350 --> 00:05:35,400
it's brute force I just pop them into a

00:05:33,120 --> 00:05:36,870
zip file and then the last step I'm

00:05:35,400 --> 00:05:38,460
having a little bit of problem with I

00:05:36,870 --> 00:05:40,620
haven't haven't completed that one yet

00:05:38,460 --> 00:05:43,770
but make million dollars and live

00:05:40,620 --> 00:05:46,620
happily ever after okay

00:05:43,770 --> 00:05:49,620
so rapid apps of the parts pearl of

00:05:46,620 --> 00:05:51,660
course any modern version of pearl works

00:05:49,620 --> 00:05:53,370
fine with Windows works fine with Linux

00:05:51,660 --> 00:05:56,660
I assume it's going to work fine with

00:05:53,370 --> 00:06:00,180
with Mac the modules that we're using

00:05:56,660 --> 00:06:01,770
mousse of course because of the

00:06:00,180 --> 00:06:03,900
iterative nature of this thing you're

00:06:01,770 --> 00:06:06,150
constantly flipping back and forth going

00:06:03,900 --> 00:06:10,080
going through you'll easily do a dozen

00:06:06,150 --> 00:06:12,480
changes in a minute I don't know if Moo

00:06:10,080 --> 00:06:14,100
still has that three-second delay that's

00:06:12,480 --> 00:06:16,920
up there I've been using Mouse for so

00:06:14,100 --> 00:06:19,440
long I have yet to see a problem and

00:06:16,920 --> 00:06:23,430
I've used a lot of complicated examples

00:06:19,440 --> 00:06:27,900
in the in my coding with delegation with

00:06:23,430 --> 00:06:29,490
rolls with most of the real world stuff

00:06:27,900 --> 00:06:32,430
I'm sure they do their stuff it blows up

00:06:29,490 --> 00:06:33,900
on but I haven't come across it yet unit

00:06:32,430 --> 00:06:36,210
testing we're going to be using test

00:06:33,900 --> 00:06:38,310
class for that and of course for all the

00:06:36,210 --> 00:06:41,730
testing we use the bundle of all the

00:06:38,310 --> 00:06:45,630
test methods which is a test most I use

00:06:41,730 --> 00:06:47,760
vim which is going to have just a little

00:06:45,630 --> 00:06:49,950
bit of custom macro settings I use a lot

00:06:47,760 --> 00:06:53,310
of the split windows and that type of

00:06:49,950 --> 00:06:56,640
thing and then this providers open

00:06:53,310 --> 00:06:59,040
source I use a spreadsheet for the user

00:06:56,640 --> 00:07:02,850
stories I started using I wanted to keep

00:06:59,040 --> 00:07:04,740
this open source so I tried OpenOffice

00:07:02,850 --> 00:07:07,230
calc for the first time about a week ago

00:07:04,740 --> 00:07:10,410
it was impressed that it certainly

00:07:07,230 --> 00:07:12,030
worked plug-in compatible for Excel and

00:07:10,410 --> 00:07:17,520
for what we're using it for that was no

00:07:12,030 --> 00:07:17,920
problem okay so jumping right into this

00:07:17,520 --> 00:07:21,040
with

00:07:17,920 --> 00:07:22,810
user stories what is a user story a user

00:07:21,040 --> 00:07:24,580
story is a very short description a

00:07:22,810 --> 00:07:27,280
synopsis of how a user would use your

00:07:24,580 --> 00:07:28,030
app and why it's typically just a

00:07:27,280 --> 00:07:31,450
one-liner

00:07:28,030 --> 00:07:34,240
where it has a template so as a user I

00:07:31,450 --> 00:07:36,340
want to do something so that I can you

00:07:34,240 --> 00:07:38,590
know continue my job so that I can

00:07:36,340 --> 00:07:40,600
import this into some other applications

00:07:38,590 --> 00:07:43,510
so on and so on we'll certainly get into

00:07:40,600 --> 00:07:45,220
details on that we leave out all the

00:07:43,510 --> 00:07:47,680
technical details that are on there in

00:07:45,220 --> 00:07:49,510
fact it's just it's more of a promise of

00:07:47,680 --> 00:07:52,510
a conversation that you're going to be

00:07:49,510 --> 00:07:55,870
discussing this with the the user who's

00:07:52,510 --> 00:07:57,310
on this we're also doing an end to end

00:07:55,870 --> 00:08:00,790
slice on one of the books that I've

00:07:57,310 --> 00:08:03,790
going through is the agile agile samurai

00:08:00,790 --> 00:08:05,530
and what they have a perfect example of

00:08:03,790 --> 00:08:07,480
that where if you had a cake like a

00:08:05,530 --> 00:08:09,400
black forest cake with an icing and then

00:08:07,480 --> 00:08:10,600
a cake layer then a jam layer and all

00:08:09,400 --> 00:08:12,670
these different layers that are going

00:08:10,600 --> 00:08:14,230
through we're cutting right from the top

00:08:12,670 --> 00:08:16,930
right down to the bottom so we give a

00:08:14,230 --> 00:08:20,050
very thin slice to the user doesn't have

00:08:16,930 --> 00:08:21,520
bare-bones air protection and all all

00:08:20,050 --> 00:08:23,830
the bells and whistles aren't there so

00:08:21,520 --> 00:08:25,240
something that's very minimal as opposed

00:08:23,830 --> 00:08:28,090
to waterfall where you would take that

00:08:25,240 --> 00:08:29,910
slice and go across the top and then you

00:08:28,090 --> 00:08:34,420
take another slice going across the top

00:08:29,910 --> 00:08:38,470
not very useful but that's how things

00:08:34,420 --> 00:08:40,510
were bad were basically if you do if

00:08:38,470 --> 00:08:42,820
you're to Google on user stories you're

00:08:40,510 --> 00:08:45,190
gonna come across this pneumonic the

00:08:42,820 --> 00:08:49,120
invest pneumonic this is what defines a

00:08:45,190 --> 00:08:52,000
good user story user stories independent

00:08:49,120 --> 00:08:55,540
so we can we can we can have user

00:08:52,000 --> 00:08:57,580
stories that vary from one portion to

00:08:55,540 --> 00:08:59,740
another and they stand on their own we

00:08:57,580 --> 00:09:02,500
don't need to have other ones too to

00:08:59,740 --> 00:09:05,140
make that negotiable they're less detail

00:09:02,500 --> 00:09:07,000
gives more wiggle room where the going

00:09:05,140 --> 00:09:08,800
gets tough so if during that you're

00:09:07,000 --> 00:09:10,390
during the development on this you find

00:09:08,800 --> 00:09:12,550
that there's a problem you could

00:09:10,390 --> 00:09:15,750
negotiate what that user story is going

00:09:12,550 --> 00:09:18,910
to be as long as it has the same outcome

00:09:15,750 --> 00:09:20,260
valuable we as programmers we often

00:09:18,910 --> 00:09:21,700
think that you know we know what's

00:09:20,260 --> 00:09:23,920
better for the user so we're going to

00:09:21,700 --> 00:09:26,230
design with what's there and the client

00:09:23,920 --> 00:09:28,090
said well that's nice but this is taking

00:09:26,230 --> 00:09:30,010
it the other way around has to be value

00:09:28,090 --> 00:09:31,660
to the user and the user says well you

00:09:30,010 --> 00:09:34,030
know I'm going to use this so that

00:09:31,660 --> 00:09:35,680
I could import into into into my other

00:09:34,030 --> 00:09:37,210
spreadsheet I can import into this

00:09:35,680 --> 00:09:39,930
database so on and so on

00:09:37,210 --> 00:09:42,250
estimate opal there has to be enough

00:09:39,930 --> 00:09:44,200
details in there so that you can

00:09:42,250 --> 00:09:46,150
actually say that okay it's gonna take

00:09:44,200 --> 00:09:47,680
you know it's going to take so much so

00:09:46,150 --> 00:09:50,710
much time we're not looking at nailing

00:09:47,680 --> 00:09:52,150
down the time yet but you have to have

00:09:50,710 --> 00:09:54,910
details I want to have a website that's

00:09:52,150 --> 00:09:58,000
as good as Amazon one not enough details

00:09:54,910 --> 00:10:00,300
so yeah and of course that leads into

00:09:58,000 --> 00:10:02,770
the next one you want to keep it small

00:10:00,300 --> 00:10:04,630
certainly easier manage to man a small

00:10:02,770 --> 00:10:06,160
piece than a big piece and of course we

00:10:04,630 --> 00:10:09,340
can mix and match when they're small

00:10:06,160 --> 00:10:11,680
pieces and testable and the user stories

00:10:09,340 --> 00:10:13,810
done if a set of unit tests or even just

00:10:11,680 --> 00:10:16,420
a simple unit tests confirm if the

00:10:13,810 --> 00:10:19,360
functions confirm it what functions the

00:10:16,420 --> 00:10:21,520
way it should so when that when we run

00:10:19,360 --> 00:10:26,830
the unit test against this and you're

00:10:21,520 --> 00:10:30,490
gonna see this right I think now yeah

00:10:26,830 --> 00:10:39,400
okay is that can people see that in the

00:10:30,490 --> 00:10:45,130
back at all no all right well um oh geez

00:10:39,400 --> 00:10:46,140
and control yeah okay so what we've got

00:10:45,130 --> 00:10:49,800
is that better

00:10:46,140 --> 00:10:52,270
okay so what we've got here is that I

00:10:49,800 --> 00:10:54,400
have descriptions at the bottom so we'll

00:10:52,270 --> 00:10:55,750
just have to go this is obviously the

00:10:54,400 --> 00:10:58,240
spreadsheet part that's going to be in

00:10:55,750 --> 00:11:01,600
here we have the very first case which

00:10:58,240 --> 00:11:06,430
from a user point of view I want to be

00:11:01,600 --> 00:11:09,190
able to select columns based on a regex

00:11:06,430 --> 00:11:12,070
so let's say we have an example here of

00:11:09,190 --> 00:11:15,160
the CSV which is going to have the

00:11:12,070 --> 00:11:18,670
columns last name first name and age all

00:11:15,160 --> 00:11:22,660
right so we kind of going back and forth

00:11:18,670 --> 00:11:24,130
year but as a UXA i want to a unix

00:11:22,660 --> 00:11:27,640
administrator it could be anything could

00:11:24,130 --> 00:11:30,730
be a user marketing and wrap typically

00:11:27,640 --> 00:11:33,010
this is a general user actor we want to

00:11:30,730 --> 00:11:34,690
select columns based on a regex so that

00:11:33,010 --> 00:11:37,330
I can continue I can work with my

00:11:34,690 --> 00:11:39,220
desired subset of Records and we go

00:11:37,330 --> 00:11:41,350
through these kind of examples that are

00:11:39,220 --> 00:11:43,000
here

00:11:41,350 --> 00:11:44,350
right you have all these different user

00:11:43,000 --> 00:11:46,540
stories and I'm gonna get into what

00:11:44,350 --> 00:11:50,110
these yellow columns are shortly but

00:11:46,540 --> 00:11:53,530
what I mentioned with the unit test we

00:11:50,110 --> 00:11:56,380
use this kind of pseudo code this given

00:11:53,530 --> 00:12:00,190
when then I seen it described just beat

00:11:56,380 --> 00:12:02,470
BDD behavior driven design it's it's

00:12:00,190 --> 00:12:05,770
pseudocode for unit testing where that

00:12:02,470 --> 00:12:07,300
basically you have a valid CSV file so

00:12:05,770 --> 00:12:09,940
now you're gonna have some kind of a

00:12:07,300 --> 00:12:12,370
method or some kind of object which is

00:12:09,940 --> 00:12:13,510
going to valent validate a CSV file it's

00:12:12,370 --> 00:12:16,840
got a header it's got the right number

00:12:13,510 --> 00:12:20,800
of columns you know typical CSV stuff

00:12:16,840 --> 00:12:23,470
when I run the CSV manager with these

00:12:20,800 --> 00:12:26,590
particular parameters then I'm gonna get

00:12:23,470 --> 00:12:30,280
this output and that's a very that's

00:12:26,590 --> 00:12:32,740
right there if if that test works that

00:12:30,280 --> 00:12:35,260
test is done we can now manage that and

00:12:32,740 --> 00:12:38,020
go on to the next one or whichever ones

00:12:35,260 --> 00:12:40,690
we deem the sequence is going to be

00:12:38,020 --> 00:12:44,200
required which leads us into these

00:12:40,690 --> 00:12:45,460
points here where there's priority I'm

00:12:44,200 --> 00:12:50,080
just going to go down on the bottom here

00:12:45,460 --> 00:12:52,090
yeah okay ah so we see here we've got

00:12:50,080 --> 00:12:54,250
that one word camel case label

00:12:52,090 --> 00:12:55,900
I still go with the camel case because

00:12:54,250 --> 00:12:59,310
the snake case is going to come in later

00:12:55,900 --> 00:13:02,040
on when we're doing unit tests and

00:12:59,310 --> 00:13:05,400
conditions and things along those lines

00:13:02,040 --> 00:13:08,170
the relative release is that next column

00:13:05,400 --> 00:13:10,720
when we're releasing something I think I

00:13:08,170 --> 00:13:14,740
got to it earlier about the we're

00:13:10,720 --> 00:13:18,730
releasing a corset of value to the

00:13:14,740 --> 00:13:20,770
client where that it's a walking

00:13:18,730 --> 00:13:22,600
skeleton where that there's just a core

00:13:20,770 --> 00:13:24,490
set of values that are there and if

00:13:22,600 --> 00:13:27,160
that's if we've defined that that's our

00:13:24,490 --> 00:13:29,170
release is 0 0 something where that now

00:13:27,160 --> 00:13:31,120
we take that CSV manager and we make a

00:13:29,170 --> 00:13:32,550
whole report manager script out of it

00:13:31,120 --> 00:13:35,200
and have all these bells and whistles

00:13:32,550 --> 00:13:36,790
make that a 9 d make that something

00:13:35,200 --> 00:13:38,230
that's that that's way off in the end

00:13:36,790 --> 00:13:41,590
we'll get to it but we just don't want

00:13:38,230 --> 00:13:43,480
to forget about it and then we've get

00:13:41,590 --> 00:13:47,650
into these other points here these user

00:13:43,480 --> 00:13:48,990
the story points story points are an

00:13:47,650 --> 00:13:51,899
agile way

00:13:48,990 --> 00:13:55,110
comparing the whole point of estimating

00:13:51,899 --> 00:13:56,640
is that even with experience we don't

00:13:55,110 --> 00:13:58,950
have that ability to make very good

00:13:56,640 --> 00:14:01,230
estimates but we do have the ability to

00:13:58,950 --> 00:14:03,570
make comparisons against to one user

00:14:01,230 --> 00:14:05,790
story against another so we can

00:14:03,570 --> 00:14:07,200
basically say that one is going to this

00:14:05,790 --> 00:14:09,270
one this user story is going to take

00:14:07,200 --> 00:14:11,640
twice as long as that one or that one's

00:14:09,270 --> 00:14:14,370
going to be you know five times as long

00:14:11,640 --> 00:14:16,290
and you measure that by you know saying

00:14:14,370 --> 00:14:19,310
that if we went if a one is really easy

00:14:16,290 --> 00:14:21,480
and something else is considerably more

00:14:19,310 --> 00:14:25,680
it's going to be a three it's going to

00:14:21,480 --> 00:14:27,839
be a five we use Fibonacci numbers which

00:14:25,680 --> 00:14:29,520
seems to be there's a lot of theory

00:14:27,839 --> 00:14:31,290
behind that but it makes a lot of sense

00:14:29,520 --> 00:14:33,630
it's hard to determine the difference

00:14:31,290 --> 00:14:35,160
between a five and a six but it's

00:14:33,630 --> 00:14:36,839
generally easier to determine the

00:14:35,160 --> 00:14:40,350
difference between a five and an eight

00:14:36,839 --> 00:14:41,850
or an eight and a 13 and we're giving it

00:14:40,350 --> 00:14:44,940
just a relative scale doesn't mean

00:14:41,850 --> 00:14:47,610
anything doesn't mean that the how about

00:14:44,940 --> 00:14:49,770
how long it's going to take where it

00:14:47,610 --> 00:14:52,920
does get into how long it takes is this

00:14:49,770 --> 00:14:55,800
next column which is the palm estimate I

00:14:52,920 --> 00:14:58,820
get into time boxing on here Pomodoro's

00:14:55,800 --> 00:15:01,980
how many people here use palm and arrows

00:14:58,820 --> 00:15:03,329
how many people okay good how many

00:15:01,980 --> 00:15:07,020
people are least familiar with palm

00:15:03,329 --> 00:15:09,750
maderos okay I'm gonna get into that on

00:15:07,020 --> 00:15:11,850
the next slide but here you're going to

00:15:09,750 --> 00:15:13,560
put some kind of an estimate on that and

00:15:11,850 --> 00:15:16,260
that estimate is important because it's

00:15:13,560 --> 00:15:18,779
like a contract with yourself or your

00:15:16,260 --> 00:15:21,390
team that's going to basically say that

00:15:18,779 --> 00:15:24,720
yeah I think we could do this in four

00:15:21,390 --> 00:15:27,540
half-hour increments or six half-hour

00:15:24,720 --> 00:15:33,120
increments and of course we're gonna get

00:15:27,540 --> 00:15:34,770
to get to that right here alright so

00:15:33,120 --> 00:15:36,779
before actually before I get into this

00:15:34,770 --> 00:15:38,160
are there any questions on the user

00:15:36,779 --> 00:15:40,890
stories I don't know if you're not

00:15:38,160 --> 00:15:46,589
familiar with them it can be being a

00:15:40,890 --> 00:15:48,839
confusing busy work okay good so this

00:15:46,589 --> 00:15:50,940
general brief history on palms the time

00:15:48,839 --> 00:15:52,920
building blocks of your projects short

00:15:50,940 --> 00:15:56,399
for palm maderos they are basically a

00:15:52,920 --> 00:15:58,079
30-minute block of time we take 25

00:15:56,399 --> 00:16:00,779
minutes of work and then five minutes

00:15:58,079 --> 00:16:02,110
for each break sounds gimmicky but it

00:16:00,779 --> 00:16:03,790
works and when and when you

00:16:02,110 --> 00:16:05,980
working and when you're working within a

00:16:03,790 --> 00:16:08,140
pom that's all you're doing you've got a

00:16:05,980 --> 00:16:09,550
label to it you're working just on that

00:16:08,140 --> 00:16:12,250
part which means you're not taking phone

00:16:09,550 --> 00:16:14,140
calls you're not having any

00:16:12,250 --> 00:16:16,540
conversations anything like that when

00:16:14,140 --> 00:16:18,250
they do happen you try to basically get

00:16:16,540 --> 00:16:20,920
that person say look can I call you back

00:16:18,250 --> 00:16:22,420
in like 10 minutes 15 minutes and of

00:16:20,920 --> 00:16:24,579
course when you get your break time

00:16:22,420 --> 00:16:28,180
after the timer's gone off that's when

00:16:24,579 --> 00:16:29,950
you do that the point of all that is

00:16:28,180 --> 00:16:31,990
that it's deep focus a lot of the stuff

00:16:29,950 --> 00:16:34,329
that we're doing is it's it's it's

00:16:31,990 --> 00:16:37,480
complicated it's a it takes you a while

00:16:34,329 --> 00:16:40,180
to spin up to get into to get into that

00:16:37,480 --> 00:16:42,700
groove to know what all the moving parts

00:16:40,180 --> 00:16:45,420
are and then for you to be disrupted in

00:16:42,700 --> 00:16:48,010
any any which way it's counterproductive

00:16:45,420 --> 00:16:50,470
so some people twenty five minutes may

00:16:48,010 --> 00:16:52,120
be too long and for other people you

00:16:50,470 --> 00:16:54,399
know you may fifty minutes might be the

00:16:52,120 --> 00:16:56,589
way to go whatever you do is you're

00:16:54,399 --> 00:16:59,500
starting a project keep those units of

00:16:56,589 --> 00:17:02,649
time the the same so that you go through

00:16:59,500 --> 00:17:04,569
the whole project that way pomf apparent

00:17:02,649 --> 00:17:08,169
Pomodoro system is that every fourth

00:17:04,569 --> 00:17:11,380
palm you take a 20-minute break I have a

00:17:08,169 --> 00:17:14,459
hard time with that myself I the timer

00:17:11,380 --> 00:17:17,260
I'm using is an old one called Pomodoro

00:17:14,459 --> 00:17:18,730
it's great it follows the rules really

00:17:17,260 --> 00:17:20,919
well but you never really know when that

00:17:18,730 --> 00:17:22,360
20-minute break is coming up until

00:17:20,919 --> 00:17:24,429
you're actually in the middle of it

00:17:22,360 --> 00:17:29,140
which would be better if you could move

00:17:24,429 --> 00:17:30,940
it around some but yes you want to have

00:17:29,140 --> 00:17:33,250
an estimate to the palm before you start

00:17:30,940 --> 00:17:34,450
working on it again as there's no point

00:17:33,250 --> 00:17:37,330
putting an estimate when you're halfway

00:17:34,450 --> 00:17:38,799
through because it's the more you the

00:17:37,330 --> 00:17:40,510
more you estimate it's like any skill

00:17:38,799 --> 00:17:42,309
the more you do it the better you're

00:17:40,510 --> 00:17:43,900
going to get at it you're going to find

00:17:42,309 --> 00:17:46,090
the first couple of times you're it's

00:17:43,900 --> 00:17:48,179
going to be a wild ass guess that you're

00:17:46,090 --> 00:17:49,259
going to

00:17:48,179 --> 00:17:51,450
you know it's gonna be a little

00:17:49,259 --> 00:17:53,999
typically low is often not very often

00:17:51,450 --> 00:17:55,980
its high and you got this whole thing

00:17:53,999 --> 00:17:58,369
here about the eight-hour day well I'm

00:17:55,980 --> 00:18:01,019
good at math so that's 16 palms well

00:17:58,369 --> 00:18:03,929
that's you'll have a hard time getting

00:18:01,019 --> 00:18:05,999
anywhere near 10 at least I do people

00:18:03,929 --> 00:18:07,619
I've talked to have done that you're

00:18:05,999 --> 00:18:11,309
gonna have meetings you're gonna have

00:18:07,619 --> 00:18:13,529
other things coming up if you can do 10

00:18:11,309 --> 00:18:15,539
and you can do 10 over 10 in a sustained

00:18:13,529 --> 00:18:18,659
pace I want to shake your hand because

00:18:15,539 --> 00:18:22,679
that's uh that's uh that's that's a lot

00:18:18,659 --> 00:18:24,869
you'll go get a lot done and only

00:18:22,679 --> 00:18:26,820
problem is is that if if you keep going

00:18:24,869 --> 00:18:28,649
at that rate well I don't know yeah I

00:18:26,820 --> 00:18:32,039
would think you're gonna burn out but if

00:18:28,649 --> 00:18:33,419
you don't well more power to you and of

00:18:32,039 --> 00:18:34,860
course yeah after you do this for a week

00:18:33,419 --> 00:18:38,309
or two you're gonna you know get better

00:18:34,860 --> 00:18:40,289
at the estimating all right so the next

00:18:38,309 --> 00:18:42,119
step on all this is where I was talking

00:18:40,289 --> 00:18:44,700
before with that process chart was your

00:18:42,119 --> 00:18:45,659
rappers and the rappers they don't do

00:18:44,700 --> 00:18:47,519
any heavy lifting

00:18:45,659 --> 00:18:49,470
they just do all the organizing they do

00:18:47,519 --> 00:18:51,090
all the prep work so they're going to

00:18:49,470 --> 00:18:53,580
collect your parameters that you're

00:18:51,090 --> 00:18:57,419
passing from the command line a JSON

00:18:53,580 --> 00:18:59,190
file whatever they whatever your

00:18:57,419 --> 00:19:02,490
application is that that's going through

00:18:59,190 --> 00:19:05,059
and when that it's do that you can set

00:19:02,490 --> 00:19:07,980
your default parameters through that

00:19:05,059 --> 00:19:10,470
they all group this into a hash ref

00:19:07,980 --> 00:19:14,100
which I call Rh config this is what's

00:19:10,470 --> 00:19:16,490
going to get sent to your main object it

00:19:14,100 --> 00:19:18,809
shows a comprehensive usage screen so

00:19:16,490 --> 00:19:20,940
when there's an error I'll get to that

00:19:18,809 --> 00:19:22,860
in the next step but it also does the

00:19:20,940 --> 00:19:25,289
one other big thing where it takes that

00:19:22,860 --> 00:19:28,200
top object I call it will work in this

00:19:25,289 --> 00:19:30,240
example and runs the Holy Trinity set of

00:19:28,200 --> 00:19:33,029
control methods which literally is just

00:19:30,240 --> 00:19:34,679
a set up main and teardown if people are

00:19:33,029 --> 00:19:36,440
familiar with any kind of unit testing

00:19:34,679 --> 00:19:38,879
that's that's where that's coming from

00:19:36,440 --> 00:19:41,789
and that's all it does is it now it goes

00:19:38,879 --> 00:19:43,470
from runs from in an eval loop so it

00:19:41,789 --> 00:19:46,379
runs through runs through that process

00:19:43,470 --> 00:19:48,059
and any kind of die that comes up it'll

00:19:46,379 --> 00:19:52,289
get perked back up through here and

00:19:48,059 --> 00:19:54,690
there's a a fail map where I take the

00:19:52,289 --> 00:19:56,850
expression do whatever that expression

00:19:54,690 --> 00:19:59,999
was of the fail and then that gets

00:19:56,850 --> 00:20:01,390
mapped to an exit code further when that

00:19:59,999 --> 00:20:03,280
exit code when

00:20:01,390 --> 00:20:06,100
winnette when it's found a match on it

00:20:03,280 --> 00:20:08,320
it'll show what the message is display

00:20:06,100 --> 00:20:10,450
the show usage and then exit with that

00:20:08,320 --> 00:20:12,790
return code so if you're piping into

00:20:10,450 --> 00:20:15,790
other scripts you know again there's aux

00:20:12,790 --> 00:20:18,130
a flavor to this you'll get those kind

00:20:15,790 --> 00:20:20,500
of messages coming up you can also have

00:20:18,130 --> 00:20:22,780
many wrappers for a project CSV Manager

00:20:20,500 --> 00:20:24,520
we've only got the one but if you're

00:20:22,780 --> 00:20:27,760
doing something like we were doing with

00:20:24,520 --> 00:20:29,620
migrating a bunch of physical machines

00:20:27,760 --> 00:20:31,450
to VMs you're gonna have a particular

00:20:29,620 --> 00:20:33,820
sequence that things have to be done all

00:20:31,450 --> 00:20:35,440
that sequence has to be asynchronous so

00:20:33,820 --> 00:20:37,840
we put what you want and you want that

00:20:35,440 --> 00:20:42,610
code base to stay the same so there

00:20:37,840 --> 00:20:47,380
would be a ten underscore an ED SSH keys

00:20:42,610 --> 00:20:50,440
a twenty underscore cop copy Oracle

00:20:47,380 --> 00:20:52,809
binary so on and so on and that would go

00:20:50,440 --> 00:20:54,580
through each one of them are going to

00:20:52,809 --> 00:20:55,809
have different parameters and each one

00:20:54,580 --> 00:20:57,669
of them are going to have a different

00:20:55,809 --> 00:21:02,260
front-end but all of them are gonna have

00:20:57,669 --> 00:21:04,120
the same cause same code base so what

00:21:02,260 --> 00:21:07,480
does this look like from the actual code

00:21:04,120 --> 00:21:10,510
I go through we open up you open up them

00:21:07,480 --> 00:21:13,030
you run this macro the piece start here

00:21:10,510 --> 00:21:14,500
macro and when it runs you've basically

00:21:13,030 --> 00:21:17,169
got these three lines that are here

00:21:14,500 --> 00:21:19,179
you're going to change your package here

00:21:17,169 --> 00:21:23,590
to whatever your project name is in this

00:21:19,179 --> 00:21:27,669
case CSV Manager you take each line cut

00:21:23,590 --> 00:21:30,299
it paste it and run it into vim the vim

00:21:27,669 --> 00:21:32,679
command-line and I've gone through I've

00:21:30,299 --> 00:21:35,140
gone through different examples on this

00:21:32,679 --> 00:21:36,910
I I'd like to work with somebody who's

00:21:35,140 --> 00:21:39,040
good at vim macros on this maybe to

00:21:36,910 --> 00:21:41,740
improve this but because there's a

00:21:39,040 --> 00:21:44,080
hybrid environment with me I you all the

00:21:41,740 --> 00:21:46,809
development on Windows and then I do all

00:21:44,080 --> 00:21:51,400
the backend stuff on Linux and typically

00:21:46,809 --> 00:21:54,880
with VMs so it gets kind of goofy with

00:21:51,400 --> 00:21:58,120
the the code being between those two

00:21:54,880 --> 00:22:00,520
environments so at this point this works

00:21:58,120 --> 00:22:02,679
and and of course after they've run that

00:22:00,520 --> 00:22:04,150
first line you're going to see a package

00:22:02,679 --> 00:22:08,169
template is going to be replaced with

00:22:04,150 --> 00:22:10,870
CSV Manager I've defined where my I've

00:22:08,169 --> 00:22:11,779
done a Samba mount off to one of my VMs

00:22:10,870 --> 00:22:14,419
and

00:22:11,779 --> 00:22:19,969
it now has this this tools proj packaged

00:22:14,419 --> 00:22:22,519
CSV manager directory so then here's the

00:22:19,969 --> 00:22:25,009
setup when that's run this case there's

00:22:22,519 --> 00:22:27,799
going to be a CSV Manager PL sitting in

00:22:25,009 --> 00:22:31,399
the root of that CSV Manager directory

00:22:27,799 --> 00:22:34,700
we open up we open it up and then we see

00:22:31,399 --> 00:22:36,590
the see the see show usage and this is

00:22:34,700 --> 00:22:39,499
default this is basically boilerplate

00:22:36,590 --> 00:22:42,109
that's coming through our H data so we

00:22:39,499 --> 00:22:44,379
can define our default parameters we can

00:22:42,109 --> 00:22:46,759
define whatever our get off long

00:22:44,379 --> 00:22:48,589
command-line options are so normal

00:22:46,759 --> 00:22:51,320
standard stuff that's here

00:22:48,589 --> 00:22:53,749
whatever our required parameters are so

00:22:51,320 --> 00:22:58,339
if somebody didn't put the CSV file in

00:22:53,749 --> 00:23:00,649
its it's going to fail and then we have

00:22:58,339 --> 00:23:06,409
this a failed map so it all it is is

00:23:00,649 --> 00:23:09,519
basically going to be an a ref a LAN AoE

00:23:06,409 --> 00:23:13,999
with basically the message is going in

00:23:09,519 --> 00:23:16,309
an array of the Reg X expression and

00:23:13,999 --> 00:23:17,570
then whatever the exit code is and then

00:23:16,309 --> 00:23:18,609
we got some overhead that's on the end

00:23:17,570 --> 00:23:23,889
of that

00:23:18,609 --> 00:23:23,889
so here again can you guys see this

00:23:29,510 --> 00:23:33,840
all right well at this point here I

00:23:32,040 --> 00:23:38,970
basically gone through I filled it out

00:23:33,840 --> 00:23:40,530
where that we have what an example of

00:23:38,970 --> 00:23:42,690
what you know all the parameters are

00:23:40,530 --> 00:23:44,940
your typical you know show usage screen

00:23:42,690 --> 00:23:46,680
that would be up when it fails it's

00:23:44,940 --> 00:23:48,150
going to show this before it shows this

00:23:46,680 --> 00:23:51,150
message is going to show what the error

00:23:48,150 --> 00:23:53,730
was that the dye failed on and then it

00:23:51,150 --> 00:23:56,850
shows this message coming up in this

00:23:53,730 --> 00:23:59,250
example here RH date I've set default so

00:23:56,850 --> 00:24:01,290
where'd my debug is zero my I set a log

00:23:59,250 --> 00:24:03,780
file up I've said a bunch of different

00:24:01,290 --> 00:24:05,640
command lines that are up I've set the

00:24:03,780 --> 00:24:08,550
required parameters to say that if

00:24:05,640 --> 00:24:12,420
there's no cond for condition or there's

00:24:08,550 --> 00:24:14,310
no CSV file it's going to fail and it'll

00:24:12,420 --> 00:24:16,230
fail on that that first message that's

00:24:14,310 --> 00:24:18,630
there I'll be missing a required with

00:24:16,230 --> 00:24:22,020
only one you but you know your mileage

00:24:18,630 --> 00:24:23,910
may vary can't we get a Khan file so a

00:24:22,020 --> 00:24:25,380
whole bunch of messages so right at the

00:24:23,910 --> 00:24:27,060
very beginning you're now starting to

00:24:25,380 --> 00:24:29,490
think on how you know what's going to

00:24:27,060 --> 00:24:31,530
cause this thing to blow up and as

00:24:29,490 --> 00:24:33,630
you're writing a code you're going to

00:24:31,530 --> 00:24:37,850
want to go back and forth to what these

00:24:33,630 --> 00:24:37,850
fail messages are and then the overhead

00:24:40,100 --> 00:24:49,320
okay so any questions at this point okay

00:24:46,380 --> 00:24:52,050
good now so now we get into the meat

00:24:49,320 --> 00:24:55,050
where where's the beef rapid apps and

00:24:52,050 --> 00:24:55,500
TDD test-driven development in a

00:24:55,050 --> 00:24:57,720
nutshell

00:24:55,500 --> 00:24:59,700
let's basically write the test first and

00:24:57,720 --> 00:25:01,680
when you write and when you run the test

00:24:59,700 --> 00:25:04,140
of course it's going to fail because the

00:25:01,680 --> 00:25:06,210
method isn't there or the code isn't

00:25:04,140 --> 00:25:08,250
there to back it up so then you write

00:25:06,210 --> 00:25:10,470
there do you write the code just so that

00:25:08,250 --> 00:25:12,090
it's going to pass just that thing you

00:25:10,470 --> 00:25:14,550
don't throw a lot of features in you get

00:25:12,090 --> 00:25:16,470
you keep it real simple and then at the

00:25:14,550 --> 00:25:18,690
third step is that you now you refactor

00:25:16,470 --> 00:25:20,550
and then you throw a little bit more I

00:25:18,690 --> 00:25:22,290
mean it's not unusual to actually put

00:25:20,550 --> 00:25:25,770
static code in there at the end in fact

00:25:22,290 --> 00:25:27,240
in this example we'll do that as you use

00:25:25,770 --> 00:25:30,720
this a little more you'll you'll

00:25:27,240 --> 00:25:32,730
certainly get the feel for it but yeah

00:25:30,720 --> 00:25:33,930
just very basic code that's there and

00:25:32,730 --> 00:25:36,210
that's how I was saying before when you

00:25:33,930 --> 00:25:39,450
do your iterations you're going to do a

00:25:36,210 --> 00:25:42,390
half a dozen to a dozen very very

00:25:39,450 --> 00:25:43,620
quickly it's inside of a minute ah the

00:25:42,390 --> 00:25:45,450
test environment has come

00:25:43,620 --> 00:25:47,280
lately contained and isolated from

00:25:45,450 --> 00:25:48,990
everything there's no directory calls

00:25:47,280 --> 00:25:52,800
there's no web calls there's no database

00:25:48,990 --> 00:25:54,120
calls no nothing and by that if you've

00:25:52,800 --> 00:25:56,190
got to read a directory if you've got to

00:25:54,120 --> 00:25:58,050
read a file to attack our or you've got

00:25:56,190 --> 00:26:01,020
to make a web call or anything like that

00:25:58,050 --> 00:26:05,280
you do you make those accesses through

00:26:01,020 --> 00:26:07,440
mocks what our mocks you as a mock is

00:26:05,280 --> 00:26:09,300
simply a fake return all calls to a

00:26:07,440 --> 00:26:12,600
method are replaced with this fake

00:26:09,300 --> 00:26:14,970
return so I'll get into an example down

00:26:12,600 --> 00:26:16,440
the bottom here big thing that you want

00:26:14,970 --> 00:26:18,990
here is I don't know if anybody's gone

00:26:16,440 --> 00:26:21,720
through old school method print you know

00:26:18,990 --> 00:26:23,970
X Y Z if debug is equal to 0 or

00:26:21,720 --> 00:26:28,400
debuggers we don't want to touch our

00:26:23,970 --> 00:26:31,080
code we do that separation of code and

00:26:28,400 --> 00:26:33,690
testing we do our separation of code and

00:26:31,080 --> 00:26:36,360
whatever the mocks are at the same point

00:26:33,690 --> 00:26:38,400
you can hand and should have several

00:26:36,360 --> 00:26:40,710
mocks for each method to test varying

00:26:38,400 --> 00:26:42,450
inputs and conditions we're gonna have a

00:26:40,710 --> 00:26:44,100
mock to say ok there are all the stars

00:26:42,450 --> 00:26:45,840
aligned and your file is good and

00:26:44,100 --> 00:26:48,420
everything works well you're going to

00:26:45,840 --> 00:26:51,480
have this return if it fails like you

00:26:48,420 --> 00:26:52,890
can't read the file if you can't there's

00:26:51,480 --> 00:26:54,270
there's there's no header there's no

00:26:52,890 --> 00:26:56,550
there's not enough columns in the data

00:26:54,270 --> 00:26:57,929
then you know you have to test for those

00:26:56,550 --> 00:27:00,480
conditions and that's where we'll get

00:26:57,929 --> 00:27:02,309
into several mocks to do that it's

00:27:00,480 --> 00:27:06,030
important to only mock the smallest

00:27:02,309 --> 00:27:08,460
block of code possible often just a

00:27:06,030 --> 00:27:10,800
wrapper with one line of code for

00:27:08,460 --> 00:27:11,460
example we wanted to test if a file was

00:27:10,800 --> 00:27:13,650
readable

00:27:11,460 --> 00:27:16,350
you know it's docked at the old act a

00:27:13,650 --> 00:27:19,920
car well we don't want to have that in

00:27:16,350 --> 00:27:22,110
them in the actual we can't do that in

00:27:19,920 --> 00:27:24,059
the mock environment because it's not

00:27:22,110 --> 00:27:26,220
reading any files or anything like that

00:27:24,059 --> 00:27:28,590
what we do is we make it into a wrapper

00:27:26,220 --> 00:27:31,020
and when we've got that wrapper that's

00:27:28,590 --> 00:27:33,750
what we mock and how do you set up a

00:27:31,020 --> 00:27:35,010
mock mocks are stored in a file and

00:27:33,750 --> 00:27:38,490
again it's going to be part of that

00:27:35,010 --> 00:27:41,910
directory structure CSV Manager mock in

00:27:38,490 --> 00:27:44,309
this case and in fact we're they'll get

00:27:41,910 --> 00:27:46,679
into that example right next but the

00:27:44,309 --> 00:27:49,200
code itself is going to be setting up

00:27:46,679 --> 00:27:52,289
the box with

00:27:49,200 --> 00:27:54,480
arrey arrey of a ray of a race where

00:27:52,289 --> 00:27:56,490
that we put the fully qualified name as

00:27:54,480 --> 00:27:58,820
for the first parameter and then

00:27:56,490 --> 00:28:04,980
whatever the tag is for the mock file

00:27:58,820 --> 00:28:10,470
and I yeah okay well I'm gonna go back

00:28:04,980 --> 00:28:13,740
to this guy here okay so what we've got

00:28:10,470 --> 00:28:15,779
for the setup environment is we use vim

00:28:13,740 --> 00:28:18,019
and with them I'm going to have the

00:28:15,779 --> 00:28:20,669
three vertical windows that are there

00:28:18,019 --> 00:28:24,120
where we have I create them just

00:28:20,669 --> 00:28:26,309
standard via commands V Nuvi new and the

00:28:24,120 --> 00:28:28,230
first one we're going to have our test

00:28:26,309 --> 00:28:29,429
window and our second window of the

00:28:28,230 --> 00:28:31,529
middle window we're going to have our

00:28:29,429 --> 00:28:33,779
source and then the third window we're

00:28:31,529 --> 00:28:35,340
going to have our mock file and of

00:28:33,779 --> 00:28:37,409
course each and each of these will be

00:28:35,340 --> 00:28:38,789
stored in their own tab so of course if

00:28:37,409 --> 00:28:39,510
you've got multiple modules that are

00:28:38,789 --> 00:28:42,899
going through

00:28:39,510 --> 00:28:45,000
you'd have multiple tabs mock file is

00:28:42,899 --> 00:28:49,470
basically set up as a Perl hash entry

00:28:45,000 --> 00:28:53,159
I've tried other things but calling in

00:28:49,470 --> 00:28:55,620
calling in the hash variable is probably

00:28:53,159 --> 00:28:57,539
the most flexible I'm not running any

00:28:55,620 --> 00:29:01,200
code so that's the whole thing about you

00:28:57,539 --> 00:29:03,149
know the RM tack are is eliminated

00:29:01,200 --> 00:29:07,500
because there's at no point well any of

00:29:03,149 --> 00:29:10,200
that code be run and then in each in

00:29:07,500 --> 00:29:18,360
each window as I've said here this

00:29:10,200 --> 00:29:20,909
structure that was here I think there's

00:29:18,360 --> 00:29:22,559
going to be a T slash test and it'll all

00:29:20,909 --> 00:29:23,870
this is created and we're going to get

00:29:22,559 --> 00:29:26,490
into what this looks like

00:29:23,870 --> 00:29:28,559
then the next slides but you've got a

00:29:26,490 --> 00:29:30,600
boilerplate for your test script you've

00:29:28,559 --> 00:29:33,659
got a boiler plate for your PM sitting

00:29:30,600 --> 00:29:34,490
in under the Lib directory and of course

00:29:33,659 --> 00:29:36,870
for your mocks

00:29:34,490 --> 00:29:39,299
and then I basically open up another

00:29:36,870 --> 00:29:41,880
window X term or Caban depending on what

00:29:39,299 --> 00:29:43,649
your environment is do a dry run on it

00:29:41,880 --> 00:29:47,610
should be a clean run there should be no

00:29:43,649 --> 00:29:50,370
errors all right so what does these

00:29:47,610 --> 00:29:52,490
different files look like this is off as

00:29:50,370 --> 00:29:55,500
a result of that piece start here macro

00:29:52,490 --> 00:29:57,480
so with you giving it this is just a

00:29:55,500 --> 00:29:59,490
blank template that's there the the

00:29:57,480 --> 00:30:01,139
the actual starting of the script would

00:29:59,490 --> 00:30:04,710
have replaced packaged template with

00:30:01,139 --> 00:30:06,750
your name of your module but pretty much

00:30:04,710 --> 00:30:08,519
everything else is where you ever you

00:30:06,750 --> 00:30:12,090
see packaged template would be replaced

00:30:08,519 --> 00:30:15,299
with CSV Manager the test template is

00:30:12,090 --> 00:30:16,860
volt with the pee test macro because of

00:30:15,299 --> 00:30:18,389
the script that's at the beginning you

00:30:16,860 --> 00:30:21,779
can get around that just by simply

00:30:18,389 --> 00:30:23,250
opening up the text file RH config that

00:30:21,779 --> 00:30:25,409
I've talked about that's what's being

00:30:23,250 --> 00:30:27,809
passed from the wrapper here you would

00:30:25,409 --> 00:30:30,139
add things like your CSV manager your

00:30:27,809 --> 00:30:34,260
CSV file so on and so on

00:30:30,139 --> 00:30:38,549
your startup again how many people here

00:30:34,260 --> 00:30:41,070
are familiar with test class ok so what

00:30:38,549 --> 00:30:42,539
we have here is that the startup is run

00:30:41,070 --> 00:30:44,700
at the beginning of the script and this

00:30:42,539 --> 00:30:47,250
is where I run that custom script load

00:30:44,700 --> 00:30:49,320
mocks that basically pulls in what all

00:30:47,250 --> 00:30:53,789
the mock definitions are from your text

00:30:49,320 --> 00:30:56,760
file and opens up that module and then

00:30:53,789 --> 00:30:58,200
setup that's run before ever when you do

00:30:56,760 --> 00:31:01,440
when you're running a unit test you

00:30:58,200 --> 00:31:04,500
always instantiate a afresh object

00:31:01,440 --> 00:31:07,830
there's no dependencies so you should be

00:31:04,500 --> 00:31:10,230
able to instantiate just on its own and

00:31:07,830 --> 00:31:12,960
there's a hash ref that gets passed to

00:31:10,230 --> 00:31:14,850
each to each one so in that you can have

00:31:12,960 --> 00:31:16,529
a base so there's like nothing that's

00:31:14,850 --> 00:31:19,019
there and then you can have one that

00:31:16,529 --> 00:31:20,549
runs the set up or you can have two

00:31:19,019 --> 00:31:23,820
different test scripts that are there

00:31:20,549 --> 00:31:25,260
that would have one of each so that it's

00:31:23,820 --> 00:31:26,880
problem do I think of it's probably

00:31:25,260 --> 00:31:28,620
better to have two to separate test

00:31:26,880 --> 00:31:31,080
scripts but for this model that's what

00:31:28,620 --> 00:31:34,110
equal jam the teardown is the opposite

00:31:31,080 --> 00:31:36,059
of the setup it's run after after the

00:31:34,110 --> 00:31:37,500
test method and then there's shutdown

00:31:36,059 --> 00:31:39,120
shutdown is once at the end of the

00:31:37,500 --> 00:31:41,610
script you know close out a log file

00:31:39,120 --> 00:31:44,190
close a database that type of thing and

00:31:41,610 --> 00:31:46,590
then where the bulk of the work is going

00:31:44,190 --> 00:31:48,809
to be is in this bottom template

00:31:46,590 --> 00:31:51,269
boilerplate that's here where you've got

00:31:48,809 --> 00:31:53,159
method underbar condition so here's

00:31:51,269 --> 00:31:58,139
where I was going with that mix of snake

00:31:53,159 --> 00:32:01,019
case and camel case here you'd have like

00:31:58,139 --> 00:32:04,380
the next slide will be like a load CSV

00:32:01,019 --> 00:32:06,230
with an with a condition of pass or a

00:32:04,380 --> 00:32:09,050
condition of

00:32:06,230 --> 00:32:10,790
filed a missing or no head or something

00:32:09,050 --> 00:32:13,580
something that's descriptive so when

00:32:10,790 --> 00:32:14,990
that when that error fails you've got

00:32:13,580 --> 00:32:16,670
something that's right there that tells

00:32:14,990 --> 00:32:18,800
you that that's part of the code failed

00:32:16,670 --> 00:32:20,060
for that very reason because again when

00:32:18,800 --> 00:32:23,050
you're running through this you're going

00:32:20,060 --> 00:32:27,050
to be running through it very quickly

00:32:23,050 --> 00:32:31,210
who okay so now this is the template for

00:32:27,050 --> 00:32:34,400
P package and this is what a typical

00:32:31,210 --> 00:32:36,860
module is gonna is going to start out as

00:32:34,400 --> 00:32:38,240
I put a lot of flexibility in there as I

00:32:36,860 --> 00:32:40,700
put off on the top on the top right

00:32:38,240 --> 00:32:42,860
there it's far easier to burn than it is

00:32:40,700 --> 00:32:45,860
to build so if you don't need all that

00:32:42,860 --> 00:32:47,950
that stuff that's on these lines that

00:32:45,860 --> 00:32:51,020
are here like a custom constructor

00:32:47,950 --> 00:32:53,000
methods with delegation all this other

00:32:51,020 --> 00:32:56,120
stuff if you don't need that delete it

00:32:53,000 --> 00:32:58,730
right it's a it's it's a quick fix I've

00:32:56,120 --> 00:33:01,220
put in the standard methods that are

00:32:58,730 --> 00:33:03,740
here that there's a set up main and tear

00:33:01,220 --> 00:33:07,130
down there just stubs they they do they

00:33:03,740 --> 00:33:08,600
don't do anything but they're if how

00:33:07,130 --> 00:33:12,470
many people are familiar with with

00:33:08,600 --> 00:33:13,910
object-oriented code nice ok so then

00:33:12,470 --> 00:33:15,830
what what happened in that case is that

00:33:13,910 --> 00:33:18,680
you have that top-level object which is

00:33:15,830 --> 00:33:20,720
like that manager and then on that it

00:33:18,680 --> 00:33:23,390
runs it runs a set up on the first one

00:33:20,720 --> 00:33:25,640
and of course that child process it then

00:33:23,390 --> 00:33:28,070
runs set up on its children and so on

00:33:25,640 --> 00:33:29,360
and so on and so on all the way back and

00:33:28,070 --> 00:33:31,760
if there's an error anywhere in that

00:33:29,360 --> 00:33:33,500
chain it perks all the way back up to

00:33:31,760 --> 00:33:37,550
the wrapper and the fail map will then

00:33:33,500 --> 00:33:38,750
say hey this is why it failed and this

00:33:37,550 --> 00:33:43,250
is the error code that it's going to

00:33:38,750 --> 00:33:44,900
return so it's it's important that I use

00:33:43,250 --> 00:33:47,000
to run this it's got the smarts to say

00:33:44,900 --> 00:33:49,840
if there's no setup then don't fail but

00:33:47,000 --> 00:33:52,700
it's always a good idea to have that

00:33:49,840 --> 00:33:54,320
it's another standard message some

00:33:52,700 --> 00:33:56,690
methods that you may or may not want

00:33:54,320 --> 00:34:00,290
infamous crud methods for the create

00:33:56,690 --> 00:34:02,240
read update delete you may is nothing

00:34:00,290 --> 00:34:04,670
else will serve as a reminder getters

00:34:02,240 --> 00:34:08,510
setters load dump ping-pong type of

00:34:04,670 --> 00:34:10,850
functions where there's on off to state

00:34:08,510 --> 00:34:12,919
tri-state type of methods that are there

00:34:10,850 --> 00:34:15,050
and again if you want to change any of

00:34:12,919 --> 00:34:17,090
these templates it's it's all just

00:34:15,050 --> 00:34:17,790
regular text file so you can easily do

00:34:17,090 --> 00:34:20,370
that

00:34:17,790 --> 00:34:22,230
and then what the marks look like box

00:34:20,370 --> 00:34:25,320
are sitting in their own file there this

00:34:22,230 --> 00:34:27,540
is uh I often use here Docs that are

00:34:25,320 --> 00:34:29,070
there that you can see here it's just

00:34:27,540 --> 00:34:31,260
regular regular hash strings that are

00:34:29,070 --> 00:34:33,120
there so you can put whatever block a

00:34:31,260 --> 00:34:36,060
code that you want there's as long as

00:34:33,120 --> 00:34:39,060
it's a scalar so if you've got code refs

00:34:36,060 --> 00:34:41,820
you could have array refs hash refs

00:34:39,060 --> 00:34:44,880
strings whatever suits you for that

00:34:41,820 --> 00:34:46,770
particular test the case I was talking

00:34:44,880 --> 00:34:49,200
about earlier where you'd have your your

00:34:46,770 --> 00:34:51,659
your your happy path the coughs pass

00:34:49,200 --> 00:34:54,120
string where everything is now set up

00:34:51,659 --> 00:34:56,280
the way it should then you've got a bad

00:34:54,120 --> 00:34:59,760
bass juror so it's basically a copy of

00:34:56,280 --> 00:35:00,840
the previous one but I threw in a typo

00:34:59,760 --> 00:35:02,490
in the bass dirt

00:35:00,840 --> 00:35:04,530
so the code should fail on that which

00:35:02,490 --> 00:35:06,450
some message to basically say that you

00:35:04,530 --> 00:35:08,040
know it's missing bestir and then

00:35:06,450 --> 00:35:10,860
there's another one now to say cough

00:35:08,040 --> 00:35:12,450
it's missing the baster so as it runs

00:35:10,860 --> 00:35:15,000
through all these unit tests you're

00:35:12,450 --> 00:35:17,130
going to get the valid and then each of

00:35:15,000 --> 00:35:19,580
the fails is also going to act like a

00:35:17,130 --> 00:35:23,130
valid you do a dies okay on your test

00:35:19,580 --> 00:35:25,620
and then that will that will that will

00:35:23,130 --> 00:35:29,250
fail it'll it'll show up as is what it

00:35:25,620 --> 00:35:32,250
was supposed to do all right so we now

00:35:29,250 --> 00:35:36,270
get into how do we get our first test to

00:35:32,250 --> 00:35:41,910
go through sorry but is it can you guys

00:35:36,270 --> 00:35:44,310
see say yes all right very good thank

00:35:41,910 --> 00:35:46,320
you so the first thing we're gonna do

00:35:44,310 --> 00:35:48,420
was going to do that load CSV this is

00:35:46,320 --> 00:35:50,280
going to be in our test script all we do

00:35:48,420 --> 00:35:53,160
is we modify the code we modify that

00:35:50,280 --> 00:35:55,320
test that's at the at the end and all it

00:35:53,160 --> 00:35:59,460
does is it runs us to the method called

00:35:55,320 --> 00:36:01,380
load CSV and it should return got CSV I

00:35:59,460 --> 00:36:03,780
mean people who are familiar with tested

00:36:01,380 --> 00:36:06,390
actual test functions test more tests

00:36:03,780 --> 00:36:09,030
tap all that kind of thing good because

00:36:06,390 --> 00:36:10,470
with tests most I think it was it had

00:36:09,030 --> 00:36:13,020
all these different conditions that were

00:36:10,470 --> 00:36:15,540
added so here we're just saying hey when

00:36:13,020 --> 00:36:18,240
I run low CSV if it comes back unless it

00:36:15,540 --> 00:36:20,850
comes back with got CSV it's a fail so

00:36:18,240 --> 00:36:22,350
when we run it the first time of course

00:36:20,850 --> 00:36:25,590
it's gonna fail we haven't written load

00:36:22,350 --> 00:36:29,010
CSV yet so that's cool and what it does

00:36:25,590 --> 00:36:30,599
run I run it in the debugger how many

00:36:29,010 --> 00:36:34,589
people assertively

00:36:30,599 --> 00:36:37,289
their code in the debugger really okay

00:36:34,589 --> 00:36:38,729
all right well again one of the big net

00:36:37,289 --> 00:36:40,799
methods about this is especially if

00:36:38,729 --> 00:36:43,650
you're using it in Linux you can restart

00:36:40,799 --> 00:36:45,390
your script and by doing an upper our

00:36:43,650 --> 00:36:47,430
boom it comes right back all your

00:36:45,390 --> 00:36:48,599
breakpoints are set you do a C and you

00:36:47,430 --> 00:36:51,210
go right back to where the code is

00:36:48,599 --> 00:36:52,979
that's important because I put static

00:36:51,210 --> 00:36:55,559
breakpoints right in here so that once

00:36:52,979 --> 00:36:56,839
it gets past that first test if the code

00:36:55,559 --> 00:37:00,119
is going to start there

00:36:56,839 --> 00:37:02,640
so we see here in the first test and the

00:37:00,119 --> 00:37:04,170
first test that it failed you know it

00:37:02,640 --> 00:37:06,170
came up with a stack message you know

00:37:04,170 --> 00:37:09,450
it's it's definitely not what we wanted

00:37:06,170 --> 00:37:12,059
so I'll go back to the test method in

00:37:09,450 --> 00:37:13,890
our CSV Manager p.m. I throw the method

00:37:12,059 --> 00:37:17,729
in there and sure enough all it does is

00:37:13,890 --> 00:37:20,309
it does a return CSV and now when we run

00:37:17,729 --> 00:37:22,859
the code with the upper are on the C it

00:37:20,309 --> 00:37:24,329
runs the way it should and again this is

00:37:22,859 --> 00:37:26,670
the debugger waiting on you

00:37:24,329 --> 00:37:28,739
so basically at this point here we found

00:37:26,670 --> 00:37:31,589
that there's no errors everything is

00:37:28,739 --> 00:37:33,059
running as it should so of course we

00:37:31,589 --> 00:37:36,359
need to blow this up we need to put you

00:37:33,059 --> 00:37:37,890
know add more features to it so we want

00:37:36,359 --> 00:37:41,130
to what did what the data is going to

00:37:37,890 --> 00:37:43,769
look like in the CSV so I've put in the

00:37:41,130 --> 00:37:45,960
mark file I've created this here doc

00:37:43,769 --> 00:37:48,089
which is going to be as simple as a CSV

00:37:45,960 --> 00:37:51,299
file can be two lines one line for the

00:37:48,089 --> 00:37:53,489
header one line for the data and then we

00:37:51,299 --> 00:37:56,460
bent that we then go back to the module

00:37:53,489 --> 00:38:00,390
to our test code and then we say that

00:37:56,460 --> 00:38:03,299
okay when we run when we run that method

00:38:00,390 --> 00:38:05,969
lowered CSV I want to return that day

00:38:03,299 --> 00:38:08,489
and that's what that set marks does so

00:38:05,969 --> 00:38:12,210
then now when we run load CSV with the

00:38:08,489 --> 00:38:14,519
got CSV well it kind of failed it didn't

00:38:12,210 --> 00:38:17,069
come back with a wrong error message but

00:38:14,519 --> 00:38:19,559
what was returned is the god sees its

00:38:17,069 --> 00:38:21,869
testing forgot CSV why is that because

00:38:19,559 --> 00:38:24,690
we didn't update the test script to show

00:38:21,869 --> 00:38:27,479
what that condition is and in the next

00:38:24,690 --> 00:38:29,579
slide now so we do we go through we test

00:38:27,479 --> 00:38:31,289
we change the Lord CSV so now that it

00:38:29,579 --> 00:38:32,880
looks for that expression on that first

00:38:31,289 --> 00:38:36,150
line we run the test

00:38:32,880 --> 00:38:38,130
and then I was running clean so of

00:38:36,150 --> 00:38:40,110
course we need to keep building this up

00:38:38,130 --> 00:38:43,050
where we'll break it down build it up

00:38:40,110 --> 00:38:44,670
break it down build it up we're adding

00:38:43,050 --> 00:38:46,770
an attribute now to the object I'm

00:38:44,670 --> 00:38:48,210
betting now what the file names going to

00:38:46,770 --> 00:38:51,000
be make it you know somewhat flexible

00:38:48,210 --> 00:38:54,030
beefed up the lowest CSV to handle some

00:38:51,000 --> 00:38:56,730
of these basic errors we have a known

00:38:54,030 --> 00:38:57,510
good function which is in this case here

00:38:56,730 --> 00:39:00,780
is going to be

00:38:57,510 --> 00:39:02,820
slurp slurp into scalar which all that

00:39:00,780 --> 00:39:06,600
was it was simply the slurp putting into

00:39:02,820 --> 00:39:09,270
a string so right and again I can't read

00:39:06,600 --> 00:39:13,500
the file I have to actually read the bar

00:39:09,270 --> 00:39:15,540
so what I've done is that I've wrapped

00:39:13,500 --> 00:39:17,760
it basically I've taken that slurp data

00:39:15,540 --> 00:39:19,800
then I slurp into scaler put a wrapper

00:39:17,760 --> 00:39:23,040
function around it and that's what I'm

00:39:19,800 --> 00:39:25,350
gonna mock same thing with attack are to

00:39:23,040 --> 00:39:28,710
make that file readable as you can see

00:39:25,350 --> 00:39:38,790
here from the code that we have that's

00:39:28,710 --> 00:39:41,730
here I've taken when that method is

00:39:38,790 --> 00:39:44,070
called return that load CSV which we

00:39:41,730 --> 00:39:46,200
have in the previous slide when you see

00:39:44,070 --> 00:39:49,740
file underscore file readable it always

00:39:46,200 --> 00:39:51,930
returns one and then we do some testing

00:39:49,740 --> 00:39:54,960
we basically saying that okay Lois CSV

00:39:51,930 --> 00:39:57,960
junk it should come back now with the

00:39:54,960 --> 00:40:00,570
because we already set what the base

00:39:57,960 --> 00:40:02,760
file is it's going to use that so that's

00:40:00,570 --> 00:40:04,800
gonna that's going to fail with this

00:40:02,760 --> 00:40:07,680
message that comes up alright and that

00:40:04,800 --> 00:40:09,180
and it should died like it did and

00:40:07,680 --> 00:40:10,920
there's the message that's gonna come is

00:40:09,180 --> 00:40:14,490
that there was no file to fine

00:40:10,920 --> 00:40:17,160
contacts now we turn around say okay

00:40:14,490 --> 00:40:19,650
we're gonna use that file we're gonna

00:40:17,160 --> 00:40:21,960
set that attribute to junk text and now

00:40:19,650 --> 00:40:23,940
we run the same script and we basically

00:40:21,960 --> 00:40:26,520
say that all we're doing now is we're

00:40:23,940 --> 00:40:28,980
setting the box so that it still returns

00:40:26,520 --> 00:40:31,920
that original mark data that's coming in

00:40:28,980 --> 00:40:33,990
and it now comes through and it's and it

00:40:31,920 --> 00:40:36,089
dies again with basically trying to say

00:40:33,990 --> 00:40:38,970
that there's no CSV data that's that

00:40:36,089 --> 00:40:41,099
that's there so we have we keep building

00:40:38,970 --> 00:40:45,569
up these test cases that are going back

00:40:41,099 --> 00:40:49,500
and forth okay and we keep doing this

00:40:45,569 --> 00:40:52,380
now if we keep making that method long

00:40:49,500 --> 00:40:55,049
you know more and more intense anything

00:40:52,380 --> 00:40:58,380
that we want to test is going to be just

00:40:55,049 --> 00:41:04,589
a single line right we want to test the

00:40:58,380 --> 00:41:06,720
most and Mock the least so so then at

00:41:04,589 --> 00:41:08,430
this point here this is why I was asking

00:41:06,720 --> 00:41:11,760
a lot of questions on the get side it's

00:41:08,430 --> 00:41:14,250
right for me it's right now I just copy

00:41:11,760 --> 00:41:15,569
the source and I copy the the wrappers

00:41:14,250 --> 00:41:17,099
and I copy that

00:41:15,569 --> 00:41:20,030
anything that's in our common directory

00:41:17,099 --> 00:41:22,440
dump that into a zip and bring that and

00:41:20,030 --> 00:41:24,900
unpack that zip on to the production

00:41:22,440 --> 00:41:26,910
environment typically all you mean all

00:41:24,900 --> 00:41:28,950
your development is done if there's any

00:41:26,910 --> 00:41:30,990
code that changes on the production side

00:41:28,950 --> 00:41:32,910
there shouldn't be but if there was

00:41:30,990 --> 00:41:35,040
something that had a minor tweak you're

00:41:32,910 --> 00:41:37,740
gonna have to replicate that on dev but

00:41:35,040 --> 00:41:40,280
quite frankly if it goes onto prod which

00:41:37,740 --> 00:41:44,970
it should it should it should not change

00:41:40,280 --> 00:41:46,470
so yeah my my plan a is to get to

00:41:44,970 --> 00:41:48,900
somehow figure out how to get get to

00:41:46,470 --> 00:41:50,700
work on that not to mention once I got

00:41:48,900 --> 00:41:52,619
yet then I've got a team solution this

00:41:50,700 --> 00:41:55,619
is pretty much designed just for a solo

00:41:52,619 --> 00:41:58,049
developer the other option was a compare

00:41:55,619 --> 00:41:59,819
and sink where that it would it was

00:41:58,049 --> 00:42:01,710
sense that if there was changes that

00:41:59,819 --> 00:42:03,809
were done on dev and prod at the same

00:42:01,710 --> 00:42:05,280
time it would at least tell you to say

00:42:03,809 --> 00:42:07,170
hey so you're not over writing a file

00:42:05,280 --> 00:42:11,520
and then you'd have to use something

00:42:07,170 --> 00:42:13,859
like it get diff gvm diff I think is the

00:42:11,520 --> 00:42:15,390
is the command when doing that and if

00:42:13,859 --> 00:42:18,839
you get a chance if you need to use

00:42:15,390 --> 00:42:21,240
diffs that works like a champ and then

00:42:18,839 --> 00:42:23,570
yeah you can go through with your code

00:42:21,240 --> 00:42:26,120
that is on there

00:42:23,570 --> 00:42:28,220
all right so before I open up for any

00:42:26,120 --> 00:42:31,400
kind of questions I have questions to

00:42:28,220 --> 00:42:34,820
you so from what you've seen a rapid

00:42:31,400 --> 00:42:37,550
apps right now do you think think that

00:42:34,820 --> 00:42:44,060
you would use more than 50% of what

00:42:37,550 --> 00:42:48,890
you've seen less than 10% so that's like

00:42:44,060 --> 00:42:51,110
yeah I'm waiting for the booze okay and

00:42:48,890 --> 00:42:53,500
how about somewhere between 10 and 50

00:42:51,110 --> 00:42:53,500
percent

00:42:54,580 --> 00:43:07,250
all right so would you be interested in

00:42:57,350 --> 00:43:11,690
seeing this in Python JavaScript PHP Wow

00:43:07,250 --> 00:43:13,760
okay as surprising Perl jutsu changing

00:43:11,690 --> 00:43:16,880
gears here completely if from a

00:43:13,760 --> 00:43:17,620
presentation point of view or topics

00:43:16,880 --> 00:43:20,060
point of view

00:43:17,620 --> 00:43:22,250
anybody here interested in the Gang of

00:43:20,060 --> 00:43:23,660
Four design patterns in Genesis

00:43:22,250 --> 00:43:26,050
specifically how they would apply to

00:43:23,660 --> 00:43:30,370
Perl

00:43:26,050 --> 00:43:34,070
yeah half okay all right all right all

00:43:30,370 --> 00:43:36,110
right next one was basically how I've

00:43:34,070 --> 00:43:38,150
got my my environment set up at home

00:43:36,110 --> 00:43:40,970
I've got set up on a Windows environment

00:43:38,150 --> 00:43:43,180
with VirtualBox doing a whole bunch of

00:43:40,970 --> 00:43:45,590
Sint OS servers that are out there

00:43:43,180 --> 00:43:47,990
typically like it's like a mini data

00:43:45,590 --> 00:43:49,310
center each of each of the boxes have

00:43:47,990 --> 00:43:52,820
their own name each of the boxes have

00:43:49,310 --> 00:43:58,070
their own IP DNS is set up DNS was it

00:43:52,820 --> 00:44:00,350
with a a helper script which will you

00:43:58,070 --> 00:44:03,920
can add a DNS parameter you can

00:44:00,350 --> 00:44:05,770
reallocate IP based on that NTP is going

00:44:03,920 --> 00:44:10,280
to be the same Khan file going across

00:44:05,770 --> 00:44:12,470
SSH keys where that you can go password

00:44:10,280 --> 00:44:15,440
less access between the servers and then

00:44:12,470 --> 00:44:20,950
of course setting up Samba people

00:44:15,440 --> 00:44:24,950
interested in that at all all right and

00:44:20,950 --> 00:44:27,850
how about using docker for multiple

00:44:24,950 --> 00:44:27,850
environments in Perl

00:44:28,480 --> 00:44:39,140
alright alright so then the last

00:44:33,500 --> 00:44:42,530
question is a subscription service like

00:44:39,140 --> 00:44:47,360
lynda.com clean coders how many people

00:44:42,530 --> 00:44:50,680
are subscribed to something like that ok

00:44:47,360 --> 00:44:53,200
how many people are thinking about it

00:44:50,680 --> 00:44:56,510
alright

00:44:53,200 --> 00:44:59,600
ok very nice well then at this point

00:44:56,510 --> 00:45:01,430
here I'm if there's any questions or

00:44:59,600 --> 00:45:03,290
comments perfect

00:45:01,430 --> 00:45:05,900
all these modules can be accessed from

00:45:03,290 --> 00:45:09,200
my Google Drive email me at this that

00:45:05,900 --> 00:45:11,480
the email that we've got there and I

00:45:09,200 --> 00:45:13,760
know I'd love to hear what your opinions

00:45:11,480 --> 00:45:15,260
are again we've got a lot of smart

00:45:13,760 --> 00:45:17,210
people in the room I'm sure there's

00:45:15,260 --> 00:45:19,250
things that could be done better more

00:45:17,210 --> 00:45:23,360
efficiently if you've got suggestions

00:45:19,250 --> 00:45:24,920
please let me know suggested reading a

00:45:23,360 --> 00:45:28,310
lot of this stuff you're going to see

00:45:24,920 --> 00:45:30,430
coming off of agile Samurai

00:45:28,310 --> 00:45:33,820
excellent excellent introduction to

00:45:30,430 --> 00:45:36,890
agile and though that type of

00:45:33,820 --> 00:45:39,050
environment and then scrum scrum is what

00:45:36,890 --> 00:45:42,700
sold me on this by one of the actual

00:45:39,050 --> 00:45:47,000
Godfather's of a scrum and agile

00:45:42,700 --> 00:45:50,330
Sutherland was hey I'm well worth the

00:45:47,000 --> 00:45:53,780
read well worth the audiobook if you are

00:45:50,330 --> 00:45:59,630
so inclined ok on that level

00:45:53,780 --> 00:46:02,800
any questions comments everybody here is

00:45:59,630 --> 00:46:06,800
professional agile no all right cool

00:46:02,800 --> 00:46:09,130
very good thank you very much and enjoy

00:46:06,800 --> 00:46:09,130
the show

00:46:11,589 --> 00:46:13,650

YouTube URL: https://www.youtube.com/watch?v=9aIGHKvKe-s


