Title: Gabriel Muñoz - "Ansible"
Publication date: 2018-06-21
Playlist: TPC 2018 in SLC
Description: 
	Server administration has a strong tradition with Perl programmers. Ansible is a tool for automating the orchestration of your infrastructure no matter how large or small. Combining it with your Perl skills is a way to empower your ability to go from code to deployment with confidence.

The goals are two-fold:

Introduction to Ansible as well as some other tools that I’ve found invaluable in getting things done with a Perl-based web application.
Real-world scenarios that show how Ansible stands apart when “orchestrating”, or changing up your software systems, whether they be enterprise servers or Raspberry Pis.
You’ll be shown some real-world best practices and examples of how to do some useful tasks. This will lead up to a series of scenarios that will help you engineer the security and performance of a distributed system.
Captions: 
	00:00:00,000 --> 00:00:07,049
all right I guess we'll get started

00:00:02,720 --> 00:00:09,840
morning everyone this is going to be a

00:00:07,049 --> 00:00:12,719
talk on ansible as you may have already

00:00:09,840 --> 00:00:14,400
seen so and just to give a brief

00:00:12,719 --> 00:00:18,359
overview it's gonna be kind of an

00:00:14,400 --> 00:00:20,970
introduction to ansible so if I'm hoping

00:00:18,359 --> 00:00:22,470
that if if there's a decent split of

00:00:20,970 --> 00:00:23,760
people who have kind of heard of it or

00:00:22,470 --> 00:00:25,740
maybe not even heard of it but want to

00:00:23,760 --> 00:00:27,779
find out what it is this is the place to

00:00:25,740 --> 00:00:29,820
be but also up towards towards the end

00:00:27,779 --> 00:00:31,859
um I'm gonna toss some links out there

00:00:29,820 --> 00:00:33,899
for for people who maybe are using

00:00:31,859 --> 00:00:35,940
ansible in the room things that I wish I

00:00:33,899 --> 00:00:37,710
knew when I started using it about four

00:00:35,940 --> 00:00:40,020
years ago I have some links in there for

00:00:37,710 --> 00:00:41,850
you and some suggestions because it can

00:00:40,020 --> 00:00:45,809
be kind of a it's pretty easy to get

00:00:41,850 --> 00:00:48,329
going with ansible but it's kind of a

00:00:45,809 --> 00:00:50,190
long tail with with getting really

00:00:48,329 --> 00:00:53,640
getting something working for your

00:00:50,190 --> 00:00:54,600
system for what's going on um so my name

00:00:53,640 --> 00:00:57,059
is Gabriel muñoz

00:00:54,600 --> 00:00:58,050
I'm just occurred to me that I forgot to

00:00:57,059 --> 00:00:59,789
put my company up there I'm actually

00:00:58,050 --> 00:01:02,430
refer a shirt or one of this monsters

00:00:59,789 --> 00:01:04,769
here at for a conference um but also

00:01:02,430 --> 00:01:07,350
well I have a link up there link it to

00:01:04,769 --> 00:01:11,100
my slides it is a link to a relatively

00:01:07,350 --> 00:01:13,170
recent version of my slides so it should

00:01:11,100 --> 00:01:14,909
be pretty good if you want to follow on

00:01:13,170 --> 00:01:19,770
that's great and also plot the links

00:01:14,909 --> 00:01:21,780
from there that'd be great with that um

00:01:19,770 --> 00:01:23,490
before I get started to when I kind of

00:01:21,780 --> 00:01:25,080
pull the room probably the only time I

00:01:23,490 --> 00:01:27,420
pull the room but I'm wondering how many

00:01:25,080 --> 00:01:29,970
people in the room have used or are

00:01:27,420 --> 00:01:36,479
using currently ansible and any any

00:01:29,970 --> 00:01:42,630
capacity out great great good that's

00:01:36,479 --> 00:01:43,920
what I wanted was that puppet hope it's

00:01:42,630 --> 00:01:45,000
a good tool I'll get to that if I have

00:01:43,920 --> 00:01:49,079
time I was going to talk about other

00:01:45,000 --> 00:01:52,140
tools um is so yeah that's for somebody

00:01:49,079 --> 00:01:53,310
who who are those who who don't know

00:01:52,140 --> 00:01:54,479
there are other tools that kind of

00:01:53,310 --> 00:01:55,829
compete in the same space but I

00:01:54,479 --> 00:01:57,180
personally think that there's pretty

00:01:55,829 --> 00:02:02,479
good overlap so let's see if we get to

00:01:57,180 --> 00:02:05,399
it so let's get started what is ansible

00:02:02,479 --> 00:02:07,740
well it's kind of an automation tool

00:02:05,399 --> 00:02:09,690
that performs our various various things

00:02:07,740 --> 00:02:11,879
um one of the big things is obviously

00:02:09,690 --> 00:02:12,970
configuration management so you have

00:02:11,879 --> 00:02:14,170
servers you want

00:02:12,970 --> 00:02:16,000
configure them usually that

00:02:14,170 --> 00:02:17,980
configuration is just files right so

00:02:16,000 --> 00:02:20,110
it's pretty good for for doing stuff

00:02:17,980 --> 00:02:21,760
like that and I'll go over some examples

00:02:20,110 --> 00:02:24,280
on Abed about that it also does things

00:02:21,760 --> 00:02:25,570
for applications boy deployment like

00:02:24,280 --> 00:02:27,970
let's say you have a custom application

00:02:25,570 --> 00:02:29,620
maybe maybe that's what she do on your

00:02:27,970 --> 00:02:32,430
on your job or something like that or

00:02:29,620 --> 00:02:35,620
even like even basic UNIX or Linux

00:02:32,430 --> 00:02:37,180
services like cron servers like that's

00:02:35,620 --> 00:02:38,680
pretty that's something that I

00:02:37,180 --> 00:02:40,120
personally maintain it across source and

00:02:38,680 --> 00:02:41,320
I do it all through ansible it's and

00:02:40,120 --> 00:02:43,720
it's really good for the stuff like that

00:02:41,320 --> 00:02:46,600
it also has a lot of built-in support

00:02:43,720 --> 00:02:49,720
for a cloud support but mostly for for

00:02:46,600 --> 00:02:51,550
AWS right now there is it also it also

00:02:49,720 --> 00:02:52,870
works for there's actually a lot of

00:02:51,550 --> 00:02:56,160
third-party modules for things like

00:02:52,870 --> 00:02:59,470
adjourn and Google compute cloud as well

00:02:56,160 --> 00:03:02,080
but in the end ansible to me is like all

00:02:59,470 --> 00:03:04,060
these things are great um but the last

00:03:02,080 --> 00:03:06,100
point here for me is kind of the big

00:03:04,060 --> 00:03:08,560
thing that I was I'm kind of hoping to

00:03:06,100 --> 00:03:10,090
drive home here is that ansible is is

00:03:08,560 --> 00:03:11,610
really great for for service

00:03:10,090 --> 00:03:15,640
orchestration and what do I mean by

00:03:11,610 --> 00:03:18,910
orchestration what does that mean to me

00:03:15,640 --> 00:03:20,800
that means if you have more than one

00:03:18,910 --> 00:03:22,269
servers that might need to communicate

00:03:20,800 --> 00:03:25,269
with each other this is where ansible

00:03:22,269 --> 00:03:27,340
kind of shines so if you have it doesn't

00:03:25,269 --> 00:03:29,470
mean that's what I mean if you if you

00:03:27,340 --> 00:03:31,540
only have one server that's fine because

00:03:29,470 --> 00:03:35,320
you might have multiple services on that

00:03:31,540 --> 00:03:37,690
server you know it's so simpler if you

00:03:35,320 --> 00:03:40,000
don't have multiple services on a single

00:03:37,690 --> 00:03:41,380
server for configuration management

00:03:40,000 --> 00:03:44,230
purposes sometimes that's the

00:03:41,380 --> 00:03:45,549
environment you have and and I one of

00:03:44,230 --> 00:03:48,580
the one of the really great things I

00:03:45,549 --> 00:03:51,100
like about ansible is that it doesn't it

00:03:48,580 --> 00:03:53,290
kind of encourages you to architect an

00:03:51,100 --> 00:03:55,480
application or an infrastructure or a

00:03:53,290 --> 00:03:56,560
certain way but doesn't require it so

00:03:55,480 --> 00:03:58,720
there's actually a lot of built-in

00:03:56,560 --> 00:04:01,090
support for hey hey you know however

00:03:58,720 --> 00:04:02,799
you're doing things it's fine and if you

00:04:01,090 --> 00:04:05,260
need to check things in a weird way we

00:04:02,799 --> 00:04:07,390
can we can let you do that but you may

00:04:05,260 --> 00:04:11,620
be may be that a false won't apply and

00:04:07,390 --> 00:04:14,470
that to me is a it kind of in my mind it

00:04:11,620 --> 00:04:15,670
makes it a lot like Perl to me like Perl

00:04:14,470 --> 00:04:16,660
is kind of like hey you know you get a

00:04:15,670 --> 00:04:17,890
lot of things down with it but there's

00:04:16,660 --> 00:04:19,840
more than one way to do it and there

00:04:17,890 --> 00:04:23,229
definitely is the danceable as well so

00:04:19,840 --> 00:04:24,880
let's before we kind of dive into ansel

00:04:23,229 --> 00:04:26,930
itself I kind of want to give kind of a

00:04:24,880 --> 00:04:29,000
focus on the automation

00:04:26,930 --> 00:04:31,759
in general here before we dive in Ansel

00:04:29,000 --> 00:04:33,410
and from and this to me is kind of the

00:04:31,759 --> 00:04:36,410
history of automation from my point of

00:04:33,410 --> 00:04:40,100
view so I think I think a lot of people

00:04:36,410 --> 00:04:41,570
here may may may see this um probably

00:04:40,100 --> 00:04:43,910
been through these experiences it's

00:04:41,570 --> 00:04:45,680
about 15 years ago I still have managed

00:04:43,910 --> 00:04:48,350
a small cluster when I was in university

00:04:45,680 --> 00:04:53,330
and it was between 15 and 30 and 30

00:04:48,350 --> 00:04:56,120
nodes I did it mostly with like SSH this

00:04:53,330 --> 00:04:59,600
is in a nutshell stuff that I did okay

00:04:56,120 --> 00:05:02,660
the system wasn't around then but you

00:04:59,600 --> 00:05:05,030
get the idea right it it's you can use

00:05:02,660 --> 00:05:06,289
SSH not only to session into a server

00:05:05,030 --> 00:05:09,139
but you can use it just run arbitrary

00:05:06,289 --> 00:05:11,840
commands on those servers it's great who

00:05:09,139 --> 00:05:13,310
doesn't use this utility um and that's

00:05:11,840 --> 00:05:15,020
what all this is showing for those of

00:05:13,310 --> 00:05:18,110
you who haven't seen it I thought it is

00:05:15,020 --> 00:05:20,300
a session has easier at a server and run

00:05:18,110 --> 00:05:24,380
new command whatever that command you

00:05:20,300 --> 00:05:26,000
want and then 15 years ago I kind of

00:05:24,380 --> 00:05:29,270
went through that my own you know

00:05:26,000 --> 00:05:32,720
education is like hey how could I roll

00:05:29,270 --> 00:05:34,400
my own I kind of wrote this script like

00:05:32,720 --> 00:05:36,949
a couple days ago and it actually does

00:05:34,400 --> 00:05:38,660
work so something let me walk through

00:05:36,949 --> 00:05:40,340
this it's like maybe maybe you've been

00:05:38,660 --> 00:05:42,530
through this yourself maybe you have a

00:05:40,340 --> 00:05:44,510
directory called machines and in a

00:05:42,530 --> 00:05:46,280
directory you have a bunch of files and

00:05:44,510 --> 00:05:49,389
each file represents a server on your

00:05:46,280 --> 00:05:52,159
server farm in this case I have three

00:05:49,389 --> 00:05:53,630
and then I have a script the script you

00:05:52,159 --> 00:05:56,930
run the script you give that script a

00:05:53,630 --> 00:06:00,110
name that name is itself a script that

00:05:56,930 --> 00:06:03,620
you want to secure the copy to a remote

00:06:00,110 --> 00:06:04,970
server and then run it all right I'm

00:06:03,620 --> 00:06:07,580
sure we've all kind of done something

00:06:04,970 --> 00:06:09,050
like this maybe I'm gonna stop right

00:06:07,580 --> 00:06:12,830
there and focus on the last two lines

00:06:09,050 --> 00:06:16,430
out there the SCP and the SSH what could

00:06:12,830 --> 00:06:18,260
go wrong there hmm well let's see here I

00:06:16,430 --> 00:06:20,419
can I'm gonna pick this skip apart I

00:06:18,260 --> 00:06:21,710
love this part so the SCP command I can

00:06:20,419 --> 00:06:24,500
tell you right now like I'm wondering

00:06:21,710 --> 00:06:27,169
well I kind of arbitrarily copying some

00:06:24,500 --> 00:06:31,310
named script over well what if I copy

00:06:27,169 --> 00:06:33,169
the same script over we're seeing named

00:06:31,310 --> 00:06:34,729
script over twice but it's not actually

00:06:33,169 --> 00:06:37,039
the same script I'm not doing with that

00:06:34,729 --> 00:06:39,229
here it's just whatever you know what

00:06:37,039 --> 00:06:39,849
about permissions it's okay cuz I'm

00:06:39,229 --> 00:06:41,770
copying over

00:06:39,849 --> 00:06:43,719
my easier that's okay you see on the

00:06:41,770 --> 00:06:45,449
second line I'm sooo doing and then

00:06:43,719 --> 00:06:49,449
arbitrary running what could go wrong

00:06:45,449 --> 00:06:52,119
it's another thing like there's no air

00:06:49,449 --> 00:06:53,709
checking but it's something actually

00:06:52,119 --> 00:06:55,569
doesn't go wrong I'm in the middle of a

00:06:53,709 --> 00:06:57,550
loop what cool what happens if I'm

00:06:55,569 --> 00:06:59,080
running something on host 1 it's

00:06:57,550 --> 00:07:01,209
successful a host two it's not

00:06:59,080 --> 00:07:04,259
successful does that mean I just

00:07:01,209 --> 00:07:07,360
continue who gets to decide that and

00:07:04,259 --> 00:07:09,159
then so also like when I was managing

00:07:07,360 --> 00:07:10,779
these servers fifteen years ago I came

00:07:09,159 --> 00:07:11,979
across these interesting tools they I

00:07:10,779 --> 00:07:15,009
thought they were wonderful at the time

00:07:11,979 --> 00:07:17,050
this blew my mind and it turned out

00:07:15,009 --> 00:07:18,429
there's something called DSH or

00:07:17,050 --> 00:07:20,110
distributed shell and there's actually

00:07:18,429 --> 00:07:22,959
like I actually did my research I found

00:07:20,110 --> 00:07:24,909
three of them the one that I used back

00:07:22,959 --> 00:07:26,769
then was actually the first one on that

00:07:24,909 --> 00:07:28,419
list it's actually Perl based I fell in

00:07:26,769 --> 00:07:29,349
that out the other day I actually put

00:07:28,419 --> 00:07:30,909
the link in there if you want to go look

00:07:29,349 --> 00:07:33,249
at it about two programmers go look at

00:07:30,909 --> 00:07:35,319
it's just a Perl script um the one

00:07:33,249 --> 00:07:36,909
though this DSH is actually built into

00:07:35,319 --> 00:07:39,099
debian to you just a peon installers

00:07:36,909 --> 00:07:41,499
that is actually the sea bass one the

00:07:39,099 --> 00:07:43,809
second one on that list but I actually I

00:07:41,499 --> 00:07:45,849
wouldn't hadn't installed it and I ran

00:07:43,809 --> 00:07:47,469
this this command and it says basically

00:07:45,849 --> 00:07:50,169
just to read this command to you says

00:07:47,469 --> 00:07:51,639
hey run this the stsh command you've set

00:07:50,169 --> 00:07:55,599
associations as a protocol to

00:07:51,639 --> 00:07:57,069
communicate give run it on to host host

00:07:55,599 --> 00:07:58,930
1 and host su and just run this command

00:07:57,069 --> 00:08:02,019
and command is just pretty not the host

00:07:58,930 --> 00:08:04,059
name and and then and then also the load

00:08:02,019 --> 00:08:06,639
average and there's actual that's that's

00:08:04,059 --> 00:08:10,389
real sample output I ran this um and

00:08:06,639 --> 00:08:11,829
it's pretty cool right and yeah but it

00:08:10,389 --> 00:08:13,269
doesn't really handle any of the errors

00:08:11,829 --> 00:08:15,219
or anything of that that I already

00:08:13,269 --> 00:08:18,009
talked about and then so let's fast

00:08:15,219 --> 00:08:18,599
forward 15 years to today for me real

00:08:18,009 --> 00:08:22,419
quick here

00:08:18,599 --> 00:08:24,389
and kind of there's this paper that I

00:08:22,419 --> 00:08:27,069
really love um called immediately

00:08:24,389 --> 00:08:30,369
immutability changes everything and talk

00:08:27,069 --> 00:08:33,279
isn't really talking about ansible at

00:08:30,369 --> 00:08:36,610
all it's more out of at a architecture

00:08:33,279 --> 00:08:39,459
level or lower level and I actually

00:08:36,610 --> 00:08:41,079
recommend just if you want to expand

00:08:39,459 --> 00:08:43,689
yourself you've never heard this the

00:08:41,079 --> 00:08:47,769
there is a presentation on that I highly

00:08:43,689 --> 00:08:49,660
recommend but also to ground ourselves

00:08:47,769 --> 00:08:51,160
and what we're trying to drive here with

00:08:49,660 --> 00:08:52,930
ansible there's something called the

00:08:51,160 --> 00:08:56,110
pole factor app and I didn't I'm

00:08:52,930 --> 00:08:57,160
all off the actual 12 factors here but

00:08:56,110 --> 00:08:59,440
there's a couple of things here that I'm

00:08:57,160 --> 00:09:01,480
going to I'm going to focus on let's see

00:08:59,440 --> 00:09:04,360
why I'm talking about is things like

00:09:01,480 --> 00:09:06,130
there's a we want to drive declarative

00:09:04,360 --> 00:09:09,070
format turns out ansible has a declare

00:09:06,130 --> 00:09:13,930
reform at it it's written in mostly yamo

00:09:09,070 --> 00:09:16,360
which is definite pros and cons with

00:09:13,930 --> 00:09:18,280
with writing writing what is essentially

00:09:16,360 --> 00:09:19,810
a strip in yam okay I'll tell you that

00:09:18,280 --> 00:09:21,520
right now it's it's it's nice that you

00:09:19,810 --> 00:09:23,050
don't need to worry about the formatting

00:09:21,520 --> 00:09:25,180
things but it's it gets a little weird

00:09:23,050 --> 00:09:26,650
at times when you're you feel like

00:09:25,180 --> 00:09:28,030
you're programming in a configuration

00:09:26,650 --> 00:09:31,840
language and that that can get a little

00:09:28,030 --> 00:09:34,060
get a little hairy but it works and also

00:09:31,840 --> 00:09:36,460
like something with when you have lots

00:09:34,060 --> 00:09:38,980
of servers or even just two two is

00:09:36,460 --> 00:09:40,810
enough in my mind you want to do things

00:09:38,980 --> 00:09:44,050
and it's such a way to where you're

00:09:40,810 --> 00:09:45,940
thinking declaratively immutably but

00:09:44,050 --> 00:09:47,890
also you want to do do things in a way

00:09:45,940 --> 00:09:49,180
that will minimize that advertent across

00:09:47,890 --> 00:09:52,410
all servers especially if they're

00:09:49,180 --> 00:09:54,280
supposed to be the same type of server

00:09:52,410 --> 00:09:57,160
clavo i have a link there into twelve

00:09:54,280 --> 00:09:59,260
factor net that go ahead if you've never

00:09:57,160 --> 00:10:00,850
seen that I recommend they can take a

00:09:59,260 --> 00:10:03,970
look at it because I think ansible kind

00:10:00,850 --> 00:10:05,830
of goes along the lines of the ideas of

00:10:03,970 --> 00:10:09,900
the twelfth after app so let's get into

00:10:05,830 --> 00:10:13,170
anis the one out basic ansible features

00:10:09,900 --> 00:10:16,090
there's no installation on servers I

00:10:13,170 --> 00:10:20,560
think this this differs to some other

00:10:16,090 --> 00:10:22,660
tools like puppet and chef um and head

00:10:20,560 --> 00:10:25,480
shaking here so this to me was actually

00:10:22,660 --> 00:10:26,920
a huge selling feature to me there's I

00:10:25,480 --> 00:10:28,360
mean obviously you have to you have to

00:10:26,920 --> 00:10:31,300
install it on the server that you want

00:10:28,360 --> 00:10:34,300
to use it or workstation laptop whatever

00:10:31,300 --> 00:10:36,280
um so there's some things that you have

00:10:34,300 --> 00:10:40,200
to deal with with there with regards to

00:10:36,280 --> 00:10:43,480
security um but it does ansible

00:10:40,200 --> 00:10:45,760
primarily does its communication to your

00:10:43,480 --> 00:10:47,440
servers over SSH that's also a really

00:10:45,760 --> 00:10:49,060
strong thing for just getting started

00:10:47,440 --> 00:10:52,900
you probably already have that running

00:10:49,060 --> 00:10:55,180
if you don't then there are there are

00:10:52,900 --> 00:10:57,400
other protocols for fray as well but you

00:10:55,180 --> 00:10:59,940
you probably should be using SSH it also

00:10:57,400 --> 00:11:02,770
gives you some of the powers of SSH - um

00:10:59,940 --> 00:11:04,600
it's it's kind of a known quantity when

00:11:02,770 --> 00:11:05,910
things aren't communicating well and you

00:11:04,600 --> 00:11:07,320
get SSH errors

00:11:05,910 --> 00:11:09,620
you kind of know how to debug those

00:11:07,320 --> 00:11:12,390
sorts of things and also also kind of

00:11:09,620 --> 00:11:14,310
that's also how you deal with user

00:11:12,390 --> 00:11:16,560
management as well it's well do you have

00:11:14,310 --> 00:11:18,120
a user account for your automation and

00:11:16,560 --> 00:11:19,860
things like this it kind of forced you

00:11:18,120 --> 00:11:22,500
to deal with things like this and then

00:11:19,860 --> 00:11:25,020
of course the sthe yeah like the way

00:11:22,500 --> 00:11:27,810
that I use I use ansible as everything

00:11:25,020 --> 00:11:29,490
is using keys with pass phrases so like

00:11:27,810 --> 00:11:31,200
that so that you can an instable is

00:11:29,490 --> 00:11:33,120
built up in such a way to where you can

00:11:31,200 --> 00:11:35,940
you can enter these into a configure

00:11:33,120 --> 00:11:37,620
configuration file locally so you're not

00:11:35,940 --> 00:11:39,900
always typing it in because you know if

00:11:37,620 --> 00:11:41,640
you're for if you're running some

00:11:39,900 --> 00:11:44,580
commands commands across you know dozens

00:11:41,640 --> 00:11:45,870
or hundreds thousands of servers you

00:11:44,580 --> 00:11:47,580
probably you know want some automation

00:11:45,870 --> 00:11:51,390
around that of course ansible um deals

00:11:47,580 --> 00:11:53,100
with that um I suppose pretty big so the

00:11:51,390 --> 00:11:55,950
third bullet point is if you get

00:11:53,100 --> 00:11:57,690
anything out of this load up that URL

00:11:55,950 --> 00:11:59,370
and just read through the built-in

00:11:57,690 --> 00:12:01,380
modules the ansible has they have

00:11:59,370 --> 00:12:02,040
hundreds built then they're adding more

00:12:01,380 --> 00:12:05,730
all the time

00:12:02,040 --> 00:12:07,350
I think I forgot to look on it before I

00:12:05,730 --> 00:12:10,650
came down here but I think ansible

00:12:07,350 --> 00:12:12,480
I think they do major releases every six

00:12:10,650 --> 00:12:15,060
months or so so it the project moves

00:12:12,480 --> 00:12:16,640
rather quickly sometimes a little too

00:12:15,060 --> 00:12:19,200
quickly if you're trying to get

00:12:16,640 --> 00:12:20,700
stabilization on your infrastructure but

00:12:19,200 --> 00:12:22,620
when they every time they release are

00:12:20,700 --> 00:12:24,810
usually adding more modules so it's good

00:12:22,620 --> 00:12:26,280
to a little bit URL and just just browse

00:12:24,810 --> 00:12:28,350
through all the things that they can do

00:12:26,280 --> 00:12:30,780
they have their post rest modules that I

00:12:28,350 --> 00:12:34,770
use they have RabbitMQ modules that I

00:12:30,780 --> 00:12:38,090
use they have basic Linux user user

00:12:34,770 --> 00:12:41,850
management modules um networking things

00:12:38,090 --> 00:12:44,100
it's it's pretty it's pretty fast

00:12:41,850 --> 00:12:45,510
some of the features also that the Ansel

00:12:44,100 --> 00:12:47,400
deals with that I kind of dealt or

00:12:45,510 --> 00:12:49,910
talked about in my my hacky little

00:12:47,400 --> 00:12:52,620
script was it does change detection via

00:12:49,910 --> 00:12:55,020
idempotent modules you don't get that

00:12:52,620 --> 00:12:57,060
for free though I'll say that I think I

00:12:55,020 --> 00:12:59,460
think I've talked to a lot of people

00:12:57,060 --> 00:13:01,740
about ansible were like oh you're using

00:12:59,460 --> 00:13:05,700
ansible therefore everything is great

00:13:01,740 --> 00:13:07,950
and everything's a temp oh yeah I mean

00:13:05,700 --> 00:13:10,350
who knows the server knows that me and

00:13:07,950 --> 00:13:13,260
you know koppány configuration file

00:13:10,350 --> 00:13:15,300
isn't really unimportant there's things

00:13:13,260 --> 00:13:16,500
that you as admins or programmers need

00:13:15,300 --> 00:13:19,230
to deal with and I'll go over some of

00:13:16,500 --> 00:13:21,330
these examples later but ansible by

00:13:19,230 --> 00:13:24,210
fault will we'll help you deal with that

00:13:21,330 --> 00:13:26,520
in its output and that also leads into

00:13:24,210 --> 00:13:28,440
the autumn automatic failure detection

00:13:26,520 --> 00:13:32,730
by default ansible is good to check

00:13:28,440 --> 00:13:34,200
errors for you um so the simplest way

00:13:32,730 --> 00:13:36,030
that this will happen is a lot of

00:13:34,200 --> 00:13:38,100
built-in modules have predefined ways of

00:13:36,030 --> 00:13:40,680
how they will air and they will tell you

00:13:38,100 --> 00:13:43,740
simply there's there's if you err it's

00:13:40,680 --> 00:13:46,260
kind of like um I think by default if

00:13:43,740 --> 00:13:48,750
something errors little just your your

00:13:46,260 --> 00:13:50,220
your play will stop but it may not stop

00:13:48,750 --> 00:13:52,470
in the way that you expect so we can go

00:13:50,220 --> 00:13:56,250
I'll go over that a little bit later um

00:13:52,470 --> 00:13:58,470
and lastly ansible is cluster aware by

00:13:56,250 --> 00:14:01,680
default what this means is that it's it

00:13:58,470 --> 00:14:04,440
kind of encourages you to use lists of

00:14:01,680 --> 00:14:06,030
servers and those services can sometimes

00:14:04,440 --> 00:14:07,680
communicate between each other and you

00:14:06,030 --> 00:14:10,350
can use ansible to do that you can run

00:14:07,680 --> 00:14:12,600
something you can run some commands on

00:14:10,350 --> 00:14:14,430
on a server you can you can set

00:14:12,600 --> 00:14:16,320
variables based on what happened on that

00:14:14,430 --> 00:14:16,890
server and use those on a different

00:14:16,320 --> 00:14:19,200
server

00:14:16,890 --> 00:14:22,560
um through your ansible coordination

00:14:19,200 --> 00:14:24,780
it's really powerful I'm just a couple

00:14:22,560 --> 00:14:28,200
things um may or may not be important to

00:14:24,780 --> 00:14:29,730
you I think it is ethical sport

00:14:28,200 --> 00:14:33,450
open-source and governance it is

00:14:29,730 --> 00:14:35,700
developed by Red Hat is develop I think

00:14:33,450 --> 00:14:37,560
it's developed well by Red Hat um I see

00:14:35,700 --> 00:14:40,170
an active open-source community it's you

00:14:37,560 --> 00:14:43,020
can go out and github and see all the

00:14:40,170 --> 00:14:45,510
committers you can open open issues

00:14:43,020 --> 00:14:47,070
it's things move pretty fast in this

00:14:45,510 --> 00:14:49,380
committee and you get a lot of support

00:14:47,070 --> 00:14:50,640
online as well there's also some

00:14:49,380 --> 00:14:52,590
enterprise support through Red Hat and

00:14:50,640 --> 00:14:54,270
there's an ant our product that I

00:14:52,590 --> 00:14:57,480
personally have never used but I've been

00:14:54,270 --> 00:14:59,250
told it's pretty good but so that might

00:14:57,480 --> 00:15:00,110
be something to look into if if you find

00:14:59,250 --> 00:15:03,180
it interesting

00:15:00,110 --> 00:15:05,100
um just uh let's you I gave a quick link

00:15:03,180 --> 00:15:06,960
up here because some people just want to

00:15:05,100 --> 00:15:08,400
know how do I install it so I mean in

00:15:06,960 --> 00:15:11,760
the end I think that you should go to

00:15:08,400 --> 00:15:12,780
the ansel installation screen because

00:15:11,760 --> 00:15:14,730
they actually have really good

00:15:12,780 --> 00:15:17,310
instructions for for a lot of platforms

00:15:14,730 --> 00:15:20,970
I think it's I think there are no

00:15:17,310 --> 00:15:22,380
packages built into Debian RedHat Python

00:15:20,970 --> 00:15:25,110
is or excuse me

00:15:22,380 --> 00:15:26,610
ant whole is a is written in Python so

00:15:25,110 --> 00:15:27,870
you could actually use pip to install it

00:15:26,610 --> 00:15:31,740
if you don't know what that is it's kind

00:15:27,870 --> 00:15:33,259
of like C Panem for Python um and I just

00:15:31,740 --> 00:15:35,729
I put at the bottom here

00:15:33,259 --> 00:15:37,649
that's how that's how I have my team at

00:15:35,729 --> 00:15:39,719
the very bottom of these manually that's

00:15:37,649 --> 00:15:40,949
all I hope I have my team set up ansible

00:15:39,719 --> 00:15:42,449
and that's kind of old directions I

00:15:40,949 --> 00:15:46,309
don't really recommend it it's learn

00:15:42,449 --> 00:15:51,029
from source but you can it's that easy

00:15:46,309 --> 00:15:54,749
let's get to an example simplest example

00:15:51,029 --> 00:15:55,769
I could really get is is on the top here

00:15:54,749 --> 00:15:58,079
there's something called an inventory

00:15:55,769 --> 00:16:01,619
file the inventory file is it's a list

00:15:58,079 --> 00:16:03,719
of your servers that's it it's in it's

00:16:01,619 --> 00:16:05,879
in an ini format or any format and just

00:16:03,719 --> 00:16:07,469
so to walk you through with it so I'll

00:16:05,879 --> 00:16:12,239
use this example for a few slides is

00:16:07,469 --> 00:16:14,129
that the first line there is web servers

00:16:12,239 --> 00:16:16,109
and it's in it's in brackets that's a

00:16:14,129 --> 00:16:17,849
group that's a group name I gave it that

00:16:16,109 --> 00:16:19,979
name you can give it whatever name you

00:16:17,849 --> 00:16:22,949
want that makes sense for you and then

00:16:19,979 --> 00:16:25,169
after that you can list 0 or more host

00:16:22,949 --> 00:16:27,119
names so host 1 host who would be an

00:16:25,169 --> 00:16:29,969
actual something resolvable on your

00:16:27,119 --> 00:16:31,349
network or even publicly and then you

00:16:29,969 --> 00:16:32,909
can you can have as many groups as you

00:16:31,349 --> 00:16:34,409
want I have another I have another group

00:16:32,909 --> 00:16:37,559
called database and apparently my

00:16:34,409 --> 00:16:40,589
database is listed on house 3 um and you

00:16:37,559 --> 00:16:42,929
can the inventory files can actually get

00:16:40,589 --> 00:16:44,489
pretty complex you can you can you can

00:16:42,929 --> 00:16:46,769
overlap servers in two different groups

00:16:44,489 --> 00:16:48,389
you can you kidding create groups of

00:16:46,769 --> 00:16:50,489
groups you can create groups of groups

00:16:48,389 --> 00:16:53,159
that exclude certain servers from other

00:16:50,489 --> 00:16:56,099
groups it gets it can get pretty

00:16:53,159 --> 00:16:59,599
unwieldy but in general I recommend

00:16:56,099 --> 00:17:02,189
first trying to hash out a simplest

00:16:59,599 --> 00:17:03,659
inventory file as you can don't make it

00:17:02,189 --> 00:17:06,089
compact don't make it complicated

00:17:03,659 --> 00:17:07,409
because the error handling there isn't

00:17:06,089 --> 00:17:09,449
great if you if you do something wrong

00:17:07,409 --> 00:17:11,429
but then that and that shows just a list

00:17:09,449 --> 00:17:14,129
of your servers and then right below

00:17:11,429 --> 00:17:15,809
that is a simple playbook and I'm using

00:17:14,129 --> 00:17:19,709
in ansible terminology with playbook

00:17:15,809 --> 00:17:22,379
this is one play with one task let me go

00:17:19,709 --> 00:17:24,389
line by line through this the name first

00:17:22,379 --> 00:17:26,730
is just a name that I gave is it's

00:17:24,389 --> 00:17:29,850
whatever I want I gave it server status

00:17:26,730 --> 00:17:33,059
but you can write whatever the hosts

00:17:29,850 --> 00:17:36,269
their line is a line that references my

00:17:33,059 --> 00:17:38,759
inventory file above so I'm saying hey

00:17:36,269 --> 00:17:40,919
whenever you run this play match the

00:17:38,759 --> 00:17:43,409
hosts that are in that list for web

00:17:40,919 --> 00:17:45,539
servers alright the thing after this I

00:17:43,409 --> 00:17:46,830
won't dwell on this a lot is it's a

00:17:45,539 --> 00:17:49,890
place where I can I can

00:17:46,830 --> 00:17:52,769
add variables in this case I'm saying

00:17:49,890 --> 00:17:54,120
hey variables go read this other file in

00:17:52,769 --> 00:17:55,289
that file I'm not going to show you

00:17:54,120 --> 00:17:57,630
because that's where my passwords are

00:17:55,289 --> 00:17:59,460
stored and this is something that you

00:17:57,630 --> 00:18:01,019
know you wouldn't want to check into to

00:17:59,460 --> 00:18:04,260
a git repository something like that

00:18:01,019 --> 00:18:07,140
right so so yeah which is I think that

00:18:04,260 --> 00:18:09,120
password file includes my my pseudo

00:18:07,140 --> 00:18:11,340
password so that when I'm running things

00:18:09,120 --> 00:18:12,899
across my cluster I actually do need to

00:18:11,340 --> 00:18:15,899
sudo it'll automatically use that

00:18:12,899 --> 00:18:17,039
password for me I mean then after this

00:18:15,899 --> 00:18:19,049
this is where it gets a little bit more

00:18:17,039 --> 00:18:22,740
interesting you task is a list where we

00:18:19,049 --> 00:18:25,080
can have one or more ansible module

00:18:22,740 --> 00:18:26,700
commands and as I mentioned before

00:18:25,080 --> 00:18:28,380
there's there's hundreds built-in and

00:18:26,700 --> 00:18:30,630
one of those that's built-in is

00:18:28,380 --> 00:18:31,919
something called ping so you see that

00:18:30,630 --> 00:18:33,990
the name again is this something that I

00:18:31,919 --> 00:18:35,220
gave it I just gave it basic server

00:18:33,990 --> 00:18:37,260
availability and ping is something

00:18:35,220 --> 00:18:39,419
built-in is not actually paying so it's

00:18:37,260 --> 00:18:41,760
not doing a network thing it's actually

00:18:39,419 --> 00:18:43,620
kind of a built-in ansible thing that

00:18:41,760 --> 00:18:46,200
says hey are things ok when I connect to

00:18:43,620 --> 00:18:49,409
the server that's it let's go to let's

00:18:46,200 --> 00:18:50,850
go to a second example here so here's a

00:18:49,409 --> 00:18:52,169
here's another I won't go over the first

00:18:50,850 --> 00:18:53,639
few lines again there's those are going

00:18:52,169 --> 00:18:55,740
to be the same as I go through here I'm

00:18:53,639 --> 00:18:57,419
just gonna focus on the tasks so here I

00:18:55,740 --> 00:18:59,700
have a different task I gave it a name

00:18:57,419 --> 00:19:02,519
check write access attempt and these are

00:18:59,700 --> 00:19:04,110
by the way our examples out of out of a

00:19:02,519 --> 00:19:06,299
playbook from my team that I had that I

00:19:04,110 --> 00:19:07,799
used for validating the the status of

00:19:06,299 --> 00:19:10,860
our servers I actually do use these on a

00:19:07,799 --> 00:19:13,529
regular basis and this one is a file

00:19:10,860 --> 00:19:15,570
module the file module takes parameters

00:19:13,529 --> 00:19:17,429
path mode State actually takes a bunch

00:19:15,570 --> 00:19:18,720
of other things it's on the ansible

00:19:17,429 --> 00:19:21,149
documentation but these are the only

00:19:18,720 --> 00:19:22,440
three that I'm using path is just saying

00:19:21,149 --> 00:19:25,860
hey on this remote server

00:19:22,440 --> 00:19:28,200
go look in temp test write access make

00:19:25,860 --> 00:19:29,850
sure that they're using a kind of a

00:19:28,200 --> 00:19:31,080
touch kind of like the UNIX command

00:19:29,850 --> 00:19:33,149
touched although this is a built in

00:19:31,080 --> 00:19:34,970
version of it and I'm saying hey give it

00:19:33,149 --> 00:19:39,269
give the permissions do o66

00:19:34,970 --> 00:19:40,799
and that's it and then after that after

00:19:39,269 --> 00:19:42,299
this the next three lines become become

00:19:40,799 --> 00:19:43,649
user and changed when I want to talk

00:19:42,299 --> 00:19:45,149
both those a little bit because this is

00:19:43,649 --> 00:19:46,470
where it gets a little this is to me is

00:19:45,149 --> 00:19:48,990
where it gets interesting because I'm

00:19:46,470 --> 00:19:50,299
saying become means hey when you run

00:19:48,990 --> 00:19:52,830
this command

00:19:50,299 --> 00:19:56,730
suitable that's what that means it just

00:19:52,830 --> 00:19:59,399
means become route um or or in this case

00:19:56,730 --> 00:20:00,210
since I have it become user don't become

00:19:59,399 --> 00:20:02,520
route become this

00:20:00,210 --> 00:20:04,400
user called application user it is

00:20:02,520 --> 00:20:07,800
pretty powerful because you're able to

00:20:04,400 --> 00:20:09,900
session over two machines sudo over to a

00:20:07,800 --> 00:20:12,060
user maybe as your application user and

00:20:09,900 --> 00:20:15,600
do things that your application could do

00:20:12,060 --> 00:20:17,010
as if you had session down to that

00:20:15,600 --> 00:20:19,700
server and done it appropriately

00:20:17,010 --> 00:20:22,010
yourself so this is a thing where

00:20:19,700 --> 00:20:24,300
remember you're managing server is this

00:20:22,010 --> 00:20:26,550
you should be doing this securely right

00:20:24,300 --> 00:20:29,190
so ansible does go through quite a few

00:20:26,550 --> 00:20:31,140
quite a few hoops to try to encourage

00:20:29,190 --> 00:20:31,560
you to do that correctly and this is one

00:20:31,140 --> 00:20:33,630
of them

00:20:31,560 --> 00:20:35,010
I'm just so you see become become user

00:20:33,630 --> 00:20:38,610
quite a bit in some of these you know

00:20:35,010 --> 00:20:40,680
some ample examples I have the last line

00:20:38,610 --> 00:20:43,920
here changed when is and I set it to

00:20:40,680 --> 00:20:46,470
false is basically ansible will always

00:20:43,920 --> 00:20:49,860
do change detection for you so this is a

00:20:46,470 --> 00:20:51,690
module where where it would accurately

00:20:49,860 --> 00:20:53,010
be able to know as to whether or not to

00:20:51,690 --> 00:20:55,380
actually touch the file or not if

00:20:53,010 --> 00:20:57,540
everything you have ever used the UNIX

00:20:55,380 --> 00:20:59,550
command touch you actually whenever you

00:20:57,540 --> 00:21:01,500
touch a file it actually does always

00:20:59,550 --> 00:21:04,230
modify all that file I believe and so

00:21:01,500 --> 00:21:06,270
does this so if I was to actually run

00:21:04,230 --> 00:21:08,220
this over and over again even the file

00:21:06,270 --> 00:21:10,110
already existed it would always touch it

00:21:08,220 --> 00:21:13,800
always it would always tell me that it

00:21:10,110 --> 00:21:15,000
changed this changed when line tells I'm

00:21:13,800 --> 00:21:17,910
able to go in there and say you know

00:21:15,000 --> 00:21:19,380
what ignore that status just pretend

00:21:17,910 --> 00:21:20,000
like it didn't change because I don't

00:21:19,380 --> 00:21:23,550
care

00:21:20,000 --> 00:21:25,380
wheel that with power because if this is

00:21:23,550 --> 00:21:26,520
the case where I didn't I truly didn't

00:21:25,380 --> 00:21:28,200
care about whether or not a change I

00:21:26,520 --> 00:21:30,720
only cared about whether or not it was

00:21:28,200 --> 00:21:33,960
successful or not so let's go to another

00:21:30,720 --> 00:21:37,290
example a little bit of a smaller

00:21:33,960 --> 00:21:38,820
example but here's the the and I'm gonna

00:21:37,290 --> 00:21:40,770
skip down to the task section here again

00:21:38,820 --> 00:21:42,930
I gave it a name this a name that I gave

00:21:40,770 --> 00:21:45,360
and this is a way this is also a real

00:21:42,930 --> 00:21:48,990
way to test whether in an investment it

00:21:45,360 --> 00:21:50,310
was alive we had some problems once we

00:21:48,990 --> 00:21:51,660
ran a fest kind of went down we're like

00:21:50,310 --> 00:21:54,240
what's going on and we can figure it out

00:21:51,660 --> 00:21:57,540
too quickly and this is how we automated

00:21:54,240 --> 00:21:59,160
it and this shows the power of it hey if

00:21:57,540 --> 00:22:00,870
you if there isn't a built-in command

00:21:59,160 --> 00:22:04,470
you have a shell command and you can

00:22:00,870 --> 00:22:07,230
just write shell code you can or bash or

00:22:04,470 --> 00:22:09,630
I think you can actually specify as a

00:22:07,230 --> 00:22:13,680
parameter to this command what shell you

00:22:09,630 --> 00:22:14,309
want to invoke it's pretty powerful but

00:22:13,680 --> 00:22:16,139
this is all

00:22:14,309 --> 00:22:18,869
kind of brings up some of those issues

00:22:16,139 --> 00:22:20,849
that I showed earlier in my hacky script

00:22:18,869 --> 00:22:23,489
like well if you're just arbitrarily

00:22:20,849 --> 00:22:25,080
running shell are you checking errors

00:22:23,489 --> 00:22:27,149
correctly is it how do you know when it

00:22:25,080 --> 00:22:29,129
changed you you do have all these

00:22:27,149 --> 00:22:30,419
problems here as well so you actually

00:22:29,129 --> 00:22:31,590
have to deal with that so one of the

00:22:30,419 --> 00:22:34,080
things that the ansible does by default

00:22:31,590 --> 00:22:36,149
is it's gonna check that the the error

00:22:34,080 --> 00:22:38,070
status for this for this command by

00:22:36,149 --> 00:22:40,529
itself I didn't actually have to say so

00:22:38,070 --> 00:22:41,729
I can override it but but to me the

00:22:40,529 --> 00:22:44,429
default here is okay and it's what I

00:22:41,729 --> 00:22:45,960
wanted um you can see also that I used

00:22:44,429 --> 00:22:48,450
to changed windfalls to gang because in

00:22:45,960 --> 00:22:50,190
the end I wasn't really modifying

00:22:48,450 --> 00:22:52,320
anything on the serf that's important

00:22:50,190 --> 00:22:54,119
like I wasn't touching anything in India

00:22:52,320 --> 00:22:57,269
fest mount I wasn't cutting file doesn't

00:22:54,119 --> 00:23:00,919
do anything else should be a rather item

00:22:57,269 --> 00:23:04,440
opponent action let's go to another

00:23:00,919 --> 00:23:06,029
another example here is that I want to

00:23:04,440 --> 00:23:09,929
show that cast actually couldn't compose

00:23:06,029 --> 00:23:11,070
together so there is new there is no new

00:23:09,929 --> 00:23:12,769
task view that I haven't already showed

00:23:11,070 --> 00:23:15,570
you these are the exact same pastor just

00:23:12,769 --> 00:23:21,570
put one right after the other so this is

00:23:15,570 --> 00:23:23,129
one play running three tasks in order so

00:23:21,570 --> 00:23:26,489
wait the way that I would read this is

00:23:23,129 --> 00:23:29,399
that okay let's say I have I think in my

00:23:26,489 --> 00:23:31,679
example for my inventory I have three

00:23:29,399 --> 00:23:33,149
web servers so it's what was gonna run

00:23:31,679 --> 00:23:34,889
this play it's gonna see oh you have

00:23:33,149 --> 00:23:36,960
three web servers and it's gonna say oh

00:23:34,889 --> 00:23:38,940
you have three tasks that need to be run

00:23:36,960 --> 00:23:41,460
on each of these web servers it's going

00:23:38,940 --> 00:23:44,159
to do is going to concurrently connect

00:23:41,460 --> 00:23:45,779
to each of those servers so concurrently

00:23:44,159 --> 00:23:47,099
at the same time and it's gonna run each

00:23:45,779 --> 00:23:50,159
task on each of those serve is

00:23:47,099 --> 00:23:52,200
independent of each other and you do the

00:23:50,159 --> 00:23:54,029
status checks like like I mentioned

00:23:52,200 --> 00:23:55,859
before whether it changed or not whether

00:23:54,029 --> 00:23:57,749
it error or not you know I give you

00:23:55,859 --> 00:23:59,759
output for each server like yeah this

00:23:57,749 --> 00:24:02,369
changed and this is okay this change and

00:23:59,759 --> 00:24:05,249
this is okay etc so the key here is that

00:24:02,369 --> 00:24:07,349
this this single play will run each of

00:24:05,249 --> 00:24:10,769
these commands concurrently across all

00:24:07,349 --> 00:24:14,190
of those three servers that's the key

00:24:10,769 --> 00:24:18,690
there so I'm gonna go to the next slide

00:24:14,190 --> 00:24:20,190
here and show you the same task it's the

00:24:18,690 --> 00:24:21,179
same three tasks but across three

00:24:20,190 --> 00:24:23,849
different plays and it would just look

00:24:21,179 --> 00:24:27,179
like this so what's the difference here

00:24:23,849 --> 00:24:28,130
the difference is pretty pretty key and

00:24:27,179 --> 00:24:29,990
the difference

00:24:28,130 --> 00:24:33,320
I'm gonna say this is actually saying

00:24:29,990 --> 00:24:34,880
okay I have three plays each play

00:24:33,320 --> 00:24:37,910
happens to have one task but it could

00:24:34,880 --> 00:24:40,610
have as many as I want that was mostly

00:24:37,910 --> 00:24:42,560
for for space in time here I compress it

00:24:40,610 --> 00:24:45,260
as much as I could it's gonna say okay

00:24:42,560 --> 00:24:47,150
so first play I'm going to across all

00:24:45,260 --> 00:24:49,010
all excuse me I have two web servers

00:24:47,150 --> 00:24:51,080
across to my web servers I have my any

00:24:49,010 --> 00:24:54,890
file up there again to help me out

00:24:51,080 --> 00:24:58,730
across both my web servers ping them at

00:24:54,890 --> 00:25:02,240
the same time and something key here

00:24:58,730 --> 00:25:04,640
will happen is that let's say that

00:25:02,240 --> 00:25:06,740
there's a problem with host 2 pinging it

00:25:04,640 --> 00:25:08,390
Leslie there's just a lot of leg and it

00:25:06,740 --> 00:25:12,080
takes 20 seconds to pain but the first

00:25:08,390 --> 00:25:14,540
one takes one second of pain the play

00:25:12,080 --> 00:25:17,510
will actually hold before our goes to

00:25:14,540 --> 00:25:20,090
the next play the temp status for all of

00:25:17,510 --> 00:25:21,560
them to complete this is where the

00:25:20,090 --> 00:25:23,390
orchestration kind of happens it's

00:25:21,560 --> 00:25:24,710
pretty cool that I can do as many tasks

00:25:23,390 --> 00:25:26,840
I want and I know at the end of that

00:25:24,710 --> 00:25:29,210
play is just gonna stop and wait for all

00:25:26,840 --> 00:25:31,400
of them to complete and the completion

00:25:29,210 --> 00:25:33,800
doesn't just doesn't just mean does it

00:25:31,400 --> 00:25:35,540
finish to run it actually it'll all

00:25:33,800 --> 00:25:37,630
it'll do the error checking if there's

00:25:35,540 --> 00:25:40,610
an error your plate may actually stop

00:25:37,630 --> 00:25:44,390
for or your playbook I should say will

00:25:40,610 --> 00:25:47,840
actually stop for that server but will

00:25:44,390 --> 00:25:49,880
continue for your other servers so this

00:25:47,840 --> 00:25:51,560
is and you can you can control whether

00:25:49,880 --> 00:25:53,570
or not you want them all to stop or not

00:25:51,560 --> 00:25:55,070
or if you want to ignore errors you can

00:25:53,570 --> 00:25:56,990
control all of this dynamically but this

00:25:55,070 --> 00:25:59,120
is kind of a key thing here's it's gonna

00:25:56,990 --> 00:26:01,040
go across ping all web servers which may

00:25:59,120 --> 00:26:05,030
not be a very useful thing to do but for

00:26:01,040 --> 00:26:07,130
for for example purposes there you go

00:26:05,030 --> 00:26:09,050
then it's gonna go to the next the next

00:26:07,130 --> 00:26:12,860
play and it's gonna say ok for all these

00:26:09,050 --> 00:26:15,110
web servers to go ahead and and and test

00:26:12,860 --> 00:26:17,870
the temp temp directory access and if

00:26:15,110 --> 00:26:19,850
again if any one of those has has leg or

00:26:17,870 --> 00:26:22,040
takes takes takes a long time it's gonna

00:26:19,850 --> 00:26:23,870
wait for all of them feel complete this

00:26:22,040 --> 00:26:25,310
is gonna move on to the next one this is

00:26:23,870 --> 00:26:26,600
one I kind of threw a little kink into

00:26:25,310 --> 00:26:28,880
you and I actually changed a house

00:26:26,600 --> 00:26:30,140
therefore database it's actually only

00:26:28,880 --> 00:26:32,330
gonna run in the database server it's

00:26:30,140 --> 00:26:34,220
not gonna ruin your web servers and so

00:26:32,330 --> 00:26:34,850
you may actually wonder like well why

00:26:34,220 --> 00:26:39,350
would you do that

00:26:34,850 --> 00:26:41,200
why would you run two plays on these two

00:26:39,350 --> 00:26:43,480
servers have them wait and then

00:26:41,200 --> 00:26:45,149
run them on a third server that it's not

00:26:43,480 --> 00:26:48,750
even the same servers like well maybe

00:26:45,149 --> 00:26:53,110
maybe your database server for this play

00:26:48,750 --> 00:26:55,960
needed services or configuration on your

00:26:53,110 --> 00:26:57,639
other servers for it to work right so

00:26:55,960 --> 00:27:00,490
this is where you get the was over now

00:26:57,639 --> 00:27:02,019
it could have been on wrong so this is

00:27:00,490 --> 00:27:04,960
where you get the the orchestration

00:27:02,019 --> 00:27:06,880
between services and and so basically I

00:27:04,960 --> 00:27:08,409
know definitively with this playbook

00:27:06,880 --> 00:27:09,909
that that nothing will happen on that

00:27:08,409 --> 00:27:13,830
database server unless the other plays

00:27:09,909 --> 00:27:13,830
worked yes

00:27:24,540 --> 00:27:31,500
yes yes so the question being being if

00:27:29,230 --> 00:27:34,000
one of the pings on the web servers is

00:27:31,500 --> 00:27:39,220
web servers failed it will keep

00:27:34,000 --> 00:27:40,630
continuing on for host one yes yep and

00:27:39,220 --> 00:27:43,870
you can change this behavior actually

00:27:40,630 --> 00:27:45,130
this is the default behavior so yeah

00:27:43,870 --> 00:27:47,140
it's because sometimes if you think

00:27:45,130 --> 00:27:48,610
about it like what if what if the the

00:27:47,140 --> 00:27:51,429
what a pain was something really

00:27:48,610 --> 00:27:53,050
important and it failed and it would

00:27:51,429 --> 00:27:54,850
still run my database action maybe

00:27:53,050 --> 00:27:58,240
that's not what she wanted right

00:27:54,850 --> 00:28:00,429
so that's yeah that's that if yeah

00:27:58,240 --> 00:28:01,360
that's that's the power of ansible to is

00:28:00,429 --> 00:28:02,650
sometimes you wanted to do that

00:28:01,360 --> 00:28:03,160
sometimes you don't it really depends on

00:28:02,650 --> 00:28:04,900
what you're doing

00:28:03,160 --> 00:28:07,360
tim is the ID opponent see of it right

00:28:04,900 --> 00:28:08,440
and I would and that's actually the

00:28:07,360 --> 00:28:12,240
answer of it to if you're doing

00:28:08,440 --> 00:28:16,179
something super special on your database

00:28:12,240 --> 00:28:18,130
let's say you like this um you do

00:28:16,179 --> 00:28:20,470
actually in my opinion want it to run

00:28:18,130 --> 00:28:22,300
all the way through so if you really do

00:28:20,470 --> 00:28:23,980
have a hard to pendency on a database

00:28:22,300 --> 00:28:26,679
and other thing you should explicitly

00:28:23,980 --> 00:28:28,600
point it out on sale this is really

00:28:26,679 --> 00:28:30,400
important I need to do a special

00:28:28,600 --> 00:28:32,440
validation here and you can you can do

00:28:30,400 --> 00:28:33,490
that with a show or something custom

00:28:32,440 --> 00:28:39,550
actually you think I have an example

00:28:33,490 --> 00:28:41,710
this later um good question so there are

00:28:39,550 --> 00:28:44,710
some examples of ansible in a nutshell

00:28:41,710 --> 00:28:46,600
that that's kind of the the simplest way

00:28:44,710 --> 00:28:48,610
to get things done is just use tasks but

00:28:46,600 --> 00:28:49,690
they have other abstractions and I'm not

00:28:48,610 --> 00:28:50,830
gonna spend a lot of time but the

00:28:49,690 --> 00:28:52,300
abstractions I have I'm not even gonna

00:28:50,830 --> 00:28:53,920
show any examples cuz it's a little it's

00:28:52,300 --> 00:28:56,559
a little bit more nicely you don't need

00:28:53,920 --> 00:28:59,320
them to get going however you do need

00:28:56,559 --> 00:29:02,080
them to make to make sure your code be

00:28:59,320 --> 00:29:03,640
usable or abstracted in this in a great

00:29:02,080 --> 00:29:04,960
way so what does I'll just go over a

00:29:03,640 --> 00:29:07,809
little bit the tasks you've already seen

00:29:04,960 --> 00:29:11,530
and the tasks you can kind of see as the

00:29:07,809 --> 00:29:13,120
lowest common denominator of work in

00:29:11,530 --> 00:29:15,130
ansible and a lot of times that those

00:29:13,120 --> 00:29:16,630
are just built-in modules shell commands

00:29:15,130 --> 00:29:18,790
that you made or something like that

00:29:16,630 --> 00:29:20,460
they can use be anywhere but they're

00:29:18,790 --> 00:29:23,610
difficult to kind of compose together

00:29:20,460 --> 00:29:26,290
especially if you're trying to compose

00:29:23,610 --> 00:29:27,580
services like like like that example was

00:29:26,290 --> 00:29:29,530
actually difficult to compose those

00:29:27,580 --> 00:29:31,320
things together I was out at our that

00:29:29,530 --> 00:29:33,790
would be my argument

00:29:31,320 --> 00:29:37,840
but there's also something called rolls

00:29:33,790 --> 00:29:40,690
and rolls are a kind of like to meet

00:29:37,840 --> 00:29:42,130
tasks are kind of like in the purl video

00:29:40,690 --> 00:29:45,610
it would be like kind of like a script

00:29:42,130 --> 00:29:48,280
rolls in a Perl idiom it'd be kind of

00:29:45,610 --> 00:29:51,070
like a kind of like easy mousse it gives

00:29:48,280 --> 00:29:53,350
you a structure to your to your your

00:29:51,070 --> 00:29:54,730
task and some rules you could actually

00:29:53,350 --> 00:29:57,520
put a whole bunch of stuff in there you

00:29:54,730 --> 00:29:59,950
can put you variable as you can set you

00:29:57,520 --> 00:30:01,540
can you can put templated files you are

00:29:59,950 --> 00:30:04,720
perry file so you want that maybe you

00:30:01,540 --> 00:30:06,430
want to copy over but you could also put

00:30:04,720 --> 00:30:08,530
as many tasks as you want and in

00:30:06,430 --> 00:30:10,240
whatever order you want and then you can

00:30:08,530 --> 00:30:12,400
and then in your plays you can just

00:30:10,240 --> 00:30:15,250
compose them using a single name by the

00:30:12,400 --> 00:30:16,510
role name um so that it's pretty it's

00:30:15,250 --> 00:30:17,920
pretty it's pretty powerful but it's a

00:30:16,510 --> 00:30:19,570
little bit more confusing as to how to

00:30:17,920 --> 00:30:21,790
organize your code we start to use them

00:30:19,570 --> 00:30:24,100
in play books you saw already is it's

00:30:21,790 --> 00:30:26,890
kind of like the top of orchestration

00:30:24,100 --> 00:30:29,740
that's usually you you actually can run

00:30:26,890 --> 00:30:33,010
ansible there's there's a command

00:30:29,740 --> 00:30:35,620
ansible that you can run one-liners I

00:30:33,010 --> 00:30:37,000
don't use it a lot most likely you're

00:30:35,620 --> 00:30:38,830
not going to you if you're using ansible

00:30:37,000 --> 00:30:40,030
for anything real you're probably going

00:30:38,830 --> 00:30:43,900
to be using a command called ansible

00:30:40,030 --> 00:30:46,390
playbook and you run that on on some of

00:30:43,900 --> 00:30:48,880
the examples that I've had here and and

00:30:46,390 --> 00:30:50,650
and the plays type books are kind of

00:30:48,880 --> 00:30:53,140
like a in my mind they're kind of like a

00:30:50,650 --> 00:30:55,180
checklist and that's that's also the

00:30:53,140 --> 00:30:57,190
powerful the power of it if you think of

00:30:55,180 --> 00:31:00,850
a play you think what are the five

00:30:57,190 --> 00:31:03,160
things that I need to do when when we're

00:31:00,850 --> 00:31:04,960
having some sort of production incident

00:31:03,160 --> 00:31:06,130
like you put them in a play and it's

00:31:04,960 --> 00:31:08,680
basically a checklist of things to go

00:31:06,130 --> 00:31:10,240
off and in and if the error checking if

00:31:08,680 --> 00:31:12,220
something goes wrong it'll go red and so

00:31:10,240 --> 00:31:15,790
it's really easy to see is that's coming

00:31:12,220 --> 00:31:17,980
power of a playbook um so a couple of

00:31:15,790 --> 00:31:19,780
things I wanted to go over cuz I found

00:31:17,980 --> 00:31:23,050
it really useful was actually use

00:31:19,780 --> 00:31:25,180
vagrant and ansible together a vagrant

00:31:23,050 --> 00:31:27,760
actually has support for it and here's

00:31:25,180 --> 00:31:31,030
here's an actual working example that I

00:31:27,760 --> 00:31:32,950
pulled i minified it to be so that it

00:31:31,030 --> 00:31:34,840
was from the screen but I actually I

00:31:32,950 --> 00:31:37,510
actually use this I use revenue cue at

00:31:34,840 --> 00:31:43,090
work and this is a simple way to spin up

00:31:37,510 --> 00:31:44,390
rabbitmq box locally and then then ask

00:31:43,090 --> 00:31:48,260
beg rent to

00:31:44,390 --> 00:31:50,059
dynamically generate an inventory file

00:31:48,260 --> 00:31:52,700
that's what that's what the the bottom

00:31:50,059 --> 00:31:57,740
method is um this is in Ruby by the way

00:31:52,700 --> 00:32:00,140
or a vagrant file syntax and it's pretty

00:31:57,740 --> 00:32:02,030
cool because it it can actually it'll

00:32:00,140 --> 00:32:03,740
use the definition from vagrant itself

00:32:02,030 --> 00:32:06,260
which is building your machine

00:32:03,740 --> 00:32:07,910
dynamically it we didn't use the the

00:32:06,260 --> 00:32:09,799
machine names and ports and everything

00:32:07,910 --> 00:32:11,870
that vagrant generated dynamically

00:32:09,799 --> 00:32:13,790
generate an answerable inventory for me

00:32:11,870 --> 00:32:15,290
and that I can even run it to and I

00:32:13,790 --> 00:32:17,330
actually have instable that playbook

00:32:15,290 --> 00:32:19,280
here I think toward the bottom revenue

00:32:17,330 --> 00:32:21,410
who - playbook that ya know it'll run

00:32:19,280 --> 00:32:24,440
that and that could be whatever I want

00:32:21,410 --> 00:32:26,179
maybe I so I built a server but it

00:32:24,440 --> 00:32:27,950
doesn't it's not doing anything and then

00:32:26,179 --> 00:32:30,440
this playbook could just active and

00:32:27,950 --> 00:32:31,760
still rabbitmq and maybe copy over a

00:32:30,440 --> 00:32:34,340
config file and then something I got

00:32:31,760 --> 00:32:37,010
revenue hew running in a way that that's

00:32:34,340 --> 00:32:39,140
that's defined for me for my application

00:32:37,010 --> 00:32:40,880
environment I'm gonna show what that

00:32:39,140 --> 00:32:42,440
would look like in the next slide right

00:32:40,880 --> 00:32:45,020
here so this is actually this is a real

00:32:42,440 --> 00:32:46,460
example that I pulled that vagrant

00:32:45,020 --> 00:32:49,549
generated for me there's an inventory

00:32:46,460 --> 00:32:50,929
file right at the top there um so you

00:32:49,549 --> 00:32:52,280
see a group name at the bottom then a

00:32:50,929 --> 00:32:55,700
server name and then you actually see

00:32:52,280 --> 00:32:57,230
some some some variables set for me that

00:32:55,700 --> 00:33:00,650
the vagrant different means like hey the

00:32:57,230 --> 00:33:04,390
server name revenue Hugh has this actual

00:33:00,650 --> 00:33:07,549
you know ssh hostname in this port and

00:33:04,390 --> 00:33:10,040
this user it did it all for me I didn't

00:33:07,549 --> 00:33:11,570
have to do any as myself um and then

00:33:10,040 --> 00:33:14,330
here's a here's our quick playbook at

00:33:11,570 --> 00:33:17,419
the bottom here of all like it uses the

00:33:14,330 --> 00:33:19,669
tasks that just there's an apt ansible

00:33:17,419 --> 00:33:23,270
command I use a lot I've run a debian

00:33:19,669 --> 00:33:25,400
and we use o WM packaging for all of our

00:33:23,270 --> 00:33:27,530
application installations and it's that

00:33:25,400 --> 00:33:28,429
simple so so there's here's a simple way

00:33:27,530 --> 00:33:31,790
it's like hey

00:33:28,429 --> 00:33:32,960
VOC apt and installed RabbitMQ - server

00:33:31,790 --> 00:33:36,080
actually don't know if that's the

00:33:32,960 --> 00:33:37,460
package actually in and Debian after

00:33:36,080 --> 00:33:40,280
posit Ori I kind of just wrote that

00:33:37,460 --> 00:33:41,450
randomly but this is a way to do it and

00:33:40,280 --> 00:33:43,280
then there's at the bottom there you can

00:33:41,450 --> 00:33:44,480
see I use it become which means do it as

00:33:43,280 --> 00:33:46,669
route you kind of have to install

00:33:44,480 --> 00:33:49,370
packages as route and then I there's a

00:33:46,669 --> 00:33:51,049
notify there that that you can use to to

00:33:49,370 --> 00:33:52,460
restart the service and it would only

00:33:51,049 --> 00:33:56,630
restart the service if they actually

00:33:52,460 --> 00:33:57,680
change anything there all right which is

00:33:56,630 --> 00:34:00,020
also some

00:33:57,680 --> 00:34:02,510
the powers of change detection if

00:34:00,020 --> 00:34:06,440
unchanged you can say hey goods other

00:34:02,510 --> 00:34:07,580
action or not if it didn't change so I

00:34:06,440 --> 00:34:09,650
wanted to give some examples here of

00:34:07,580 --> 00:34:11,390
some of the other the other modules cuz

00:34:09,650 --> 00:34:14,930
it's really powerful and right up top

00:34:11,390 --> 00:34:17,500
there I is steep nm is a the ansible

00:34:14,930 --> 00:34:20,360
module and in the end it is just

00:34:17,500 --> 00:34:21,140
invoking C Panem so you need to have C

00:34:20,360 --> 00:34:23,990
Panem installed

00:34:21,140 --> 00:34:25,880
um you could do that as a shell command

00:34:23,990 --> 00:34:27,560
as well but there is it ansible built in

00:34:25,880 --> 00:34:29,300
module 4 there's a whole bunch of

00:34:27,560 --> 00:34:30,920
options you only see me using one name

00:34:29,300 --> 00:34:34,010
more delicious but there's a whole bunch

00:34:30,920 --> 00:34:36,220
that you can find but then here's I pull

00:34:34,010 --> 00:34:39,860
some things actually that I that I use a

00:34:36,220 --> 00:34:42,200
at work to the second example is this is

00:34:39,860 --> 00:34:44,270
an arbitrary shell shell command it's

00:34:42,200 --> 00:34:46,040
actually using the the netcat command to

00:34:44,270 --> 00:34:48,500
check to see if a if a firewall port is

00:34:46,040 --> 00:34:53,120
open the cool thing about that is that I

00:34:48,500 --> 00:34:54,950
can with ansible I'm not showing here

00:34:53,120 --> 00:34:56,570
the hosts here but with ansible let's

00:34:54,950 --> 00:34:59,360
say I have 20 servers that need access

00:34:56,570 --> 00:35:01,070
to that database server it'll danceable

00:34:59,360 --> 00:35:03,170
you can say hey just go run this on each

00:35:01,070 --> 00:35:05,270
of these 20 servers and show me if it

00:35:03,170 --> 00:35:07,370
really is open note show me if it's open

00:35:05,270 --> 00:35:09,050
on the machine that I'm running ansible

00:35:07,370 --> 00:35:10,760
on now that's not useful it's I want to

00:35:09,050 --> 00:35:18,020
know my what the status is of my actual

00:35:10,760 --> 00:35:22,670
environment so so and the the check DB

00:35:18,020 --> 00:35:24,380
command here that I have I'm gonna talk

00:35:22,670 --> 00:35:27,470
there's actually three things here - I

00:35:24,380 --> 00:35:29,840
also used register failed win and

00:35:27,470 --> 00:35:31,250
changed one and this is also some of

00:35:29,840 --> 00:35:33,650
some of the customizations that you can

00:35:31,250 --> 00:35:35,750
use the ansible register means hey

00:35:33,650 --> 00:35:38,270
register a variable called result and

00:35:35,750 --> 00:35:40,430
but by default ansible is gonna say okay

00:35:38,270 --> 00:35:42,440
I'm gonna set a store everything that

00:35:40,430 --> 00:35:44,660
results from the output of the shell

00:35:42,440 --> 00:35:46,850
into this result it turns out I have

00:35:44,660 --> 00:35:48,290
things I have access to things like the

00:35:46,850 --> 00:35:50,480
return code on the next line here you

00:35:48,290 --> 00:35:52,520
failed win I can say result that return

00:35:50,480 --> 00:35:54,290
code or RC is not equal to zero

00:35:52,520 --> 00:35:56,480
fail when that happens which I think

00:35:54,290 --> 00:35:59,210
it's a default but there's an explicit

00:35:56,480 --> 00:36:01,490
way to do it you also have access things

00:35:59,210 --> 00:36:04,160
here like standard out standard error

00:36:01,490 --> 00:36:06,890
you can actually you also have access to

00:36:04,160 --> 00:36:08,180
each line in in those streams as well so

00:36:06,890 --> 00:36:09,330
you can iterate through the lines and

00:36:08,180 --> 00:36:14,250
check for things

00:36:09,330 --> 00:36:16,200
um you think there's there's actually a

00:36:14,250 --> 00:36:18,780
handful of things that you get access to

00:36:16,200 --> 00:36:21,690
when you when you register a variable

00:36:18,780 --> 00:36:23,340
like this and it's super powerful for

00:36:21,690 --> 00:36:24,930
when you're you're dealing with services

00:36:23,340 --> 00:36:27,510
that you maybe don't have control over

00:36:24,930 --> 00:36:29,340
somebody else wrote them maybe they

00:36:27,510 --> 00:36:30,870
weren't thinking about idempotency or

00:36:29,340 --> 00:36:31,770
automation and all and you kind of like

00:36:30,870 --> 00:36:33,900
well I have to figure out how this

00:36:31,770 --> 00:36:35,340
actually worked and so this is the way

00:36:33,900 --> 00:36:36,600
one of the ways were if you really need

00:36:35,340 --> 00:36:39,180
to you can even really dive into the

00:36:36,600 --> 00:36:41,130
details and parse out your results you

00:36:39,180 --> 00:36:43,020
know and also you can you see that that

00:36:41,130 --> 00:36:44,790
I use a change win and I just I'm saying

00:36:43,020 --> 00:36:47,010
pretty much never tell me that this

00:36:44,790 --> 00:36:50,370
changed I was only interested in this

00:36:47,010 --> 00:36:52,710
case for for air handling a next example

00:36:50,370 --> 00:36:54,930
was a built in module for Postgres I use

00:36:52,710 --> 00:36:56,760
Postgres at work um and it turns out

00:36:54,930 --> 00:36:58,980
that Postgres has quite a few built-in

00:36:56,760 --> 00:37:02,940
modules in ansible and you can you can

00:36:58,980 --> 00:37:05,190
add roles you can create databases drop

00:37:02,940 --> 00:37:07,560
databases you may not want to do that in

00:37:05,190 --> 00:37:10,560
automation if you do know what you're

00:37:07,560 --> 00:37:14,580
doing but that's kind of a pretty cool I

00:37:10,560 --> 00:37:16,290
thought when I when I my team used to do

00:37:14,580 --> 00:37:17,850
a lot of the Postgres um start up

00:37:16,290 --> 00:37:20,310
manually in fact we still do a lot of it

00:37:17,850 --> 00:37:22,710
manually but when I found out that I was

00:37:20,310 --> 00:37:24,290
there I'm like oh go ahead check that it

00:37:22,710 --> 00:37:26,610
was there I don't know when when ansible

00:37:24,290 --> 00:37:29,760
included in as Delp default module but

00:37:26,610 --> 00:37:31,620
it's really powerful um the last example

00:37:29,760 --> 00:37:32,760
here is I want to go over I want to go

00:37:31,620 --> 00:37:34,020
over with I haven't think that and

00:37:32,760 --> 00:37:37,140
another example don't know if I'll get

00:37:34,020 --> 00:37:39,300
it time to time to get to it though is

00:37:37,140 --> 00:37:41,820
that configuration management there's a

00:37:39,300 --> 00:37:43,350
built-in command called template and

00:37:41,820 --> 00:37:46,830
template is pretty powerful because it

00:37:43,350 --> 00:37:48,960
can basically you can tell it to hey go

00:37:46,830 --> 00:37:51,300
look for a template that you checked in

00:37:48,960 --> 00:37:53,970
that you create yourself locally copy it

00:37:51,300 --> 00:37:56,100
over to this server but fill in fill in

00:37:53,970 --> 00:37:58,260
with any variables that you find in that

00:37:56,100 --> 00:38:00,000
template with data that you've defined

00:37:58,260 --> 00:38:01,680
and ansible I didn't go that we'll see

00:38:00,000 --> 00:38:03,180
if I get to it to a better example with

00:38:01,680 --> 00:38:04,920
that but I also wanted to show you one

00:38:03,180 --> 00:38:06,000
of the cool things with Vance Willis and

00:38:04,920 --> 00:38:07,710
the template command here that I show

00:38:06,000 --> 00:38:10,230
here is that as a valid a command to

00:38:07,710 --> 00:38:11,850
which is pretty which is pretty cool

00:38:10,230 --> 00:38:13,440
let's just refer for Sue doors this is

00:38:11,850 --> 00:38:15,300
why I wouldn't to show it if you're I

00:38:13,440 --> 00:38:16,950
don't know how many people have ever

00:38:15,300 --> 00:38:20,160
modified your suit or a file in the mock

00:38:16,950 --> 00:38:21,690
yourself out well huh yeah it happened

00:38:20,160 --> 00:38:22,820
then here's a way like built-in an

00:38:21,690 --> 00:38:26,220
anthro these

00:38:22,820 --> 00:38:26,820
vie pseudo to the test to see if it

00:38:26,220 --> 00:38:31,470
actually worked

00:38:26,820 --> 00:38:34,200
you can use arbitrary things in the

00:38:31,470 --> 00:38:36,270
validation here as well it's pretty

00:38:34,200 --> 00:38:39,570
powerful so one thing I want to talk

00:38:36,270 --> 00:38:42,300
about - I learned a lot by looking at

00:38:39,570 --> 00:38:44,850
third-party modules for how to write

00:38:42,300 --> 00:38:46,350
ansible things in a general way there's

00:38:44,850 --> 00:38:48,660
something called ansible galaxy it's

00:38:46,350 --> 00:38:50,970
there's an answerable galaxy command

00:38:48,660 --> 00:38:53,580
that's that deployed or as part of the

00:38:50,970 --> 00:38:55,950
ansible package for you but you yourself

00:38:53,580 --> 00:38:57,510
or anyone can King read module and

00:38:55,950 --> 00:38:59,280
upload it to the system it's a lot like

00:38:57,510 --> 00:39:03,300
sea pan it's very much like sea pan

00:38:59,280 --> 00:39:05,130
fries fries and so here's here's a way

00:39:03,300 --> 00:39:07,770
to install things and split galaxy

00:39:05,130 --> 00:39:10,170
installed and username dot roll name

00:39:07,770 --> 00:39:12,390
username is whoever uploaded it and the

00:39:10,170 --> 00:39:15,150
roll name is whatever the name of the

00:39:12,390 --> 00:39:18,180
package that person gave it an example

00:39:15,150 --> 00:39:19,290
that I personally used is a service

00:39:18,180 --> 00:39:21,510
called grey log is a log aggregation

00:39:19,290 --> 00:39:23,010
service it's kind of a complicated

00:39:21,510 --> 00:39:27,930
service actually um

00:39:23,010 --> 00:39:30,000
it uses MongoDB for I think it's

00:39:27,930 --> 00:39:32,640
internal configuration but it also uses

00:39:30,000 --> 00:39:34,410
elasticsearch for the for the searching

00:39:32,640 --> 00:39:37,530
notice messages right so if you think

00:39:34,410 --> 00:39:39,540
about it operationally or as it like

00:39:37,530 --> 00:39:41,730
from a system in point if you I in order

00:39:39,540 --> 00:39:43,800
for me to deploy Greylock I not only

00:39:41,730 --> 00:39:45,360
need you to install like a guerilla

00:39:43,800 --> 00:39:46,980
service but I need to install all these

00:39:45,360 --> 00:39:48,210
other services to it and it was kind of

00:39:46,980 --> 00:39:50,880
confusing when I was trying to figure

00:39:48,210 --> 00:39:54,060
that out and I went to SP galaxy found

00:39:50,880 --> 00:39:55,380
this role that does it for me and it was

00:39:54,060 --> 00:39:58,980
pretty it's pretty informative because

00:39:55,380 --> 00:40:01,590
because you also have to install the GPM

00:39:58,980 --> 00:40:04,260
and I have fought and then from this

00:40:01,590 --> 00:40:06,690
module actually learn how to do write

00:40:04,260 --> 00:40:09,750
write a role that could that would be

00:40:06,690 --> 00:40:10,710
usable both on Debian and Red Hat these

00:40:09,750 --> 00:40:13,530
are things that you can do in a school

00:40:10,710 --> 00:40:15,720
so if anything know that ansible galaxy

00:40:13,530 --> 00:40:18,240
is there I think I have a warning down

00:40:15,720 --> 00:40:20,760
at the bottom like know what you're

00:40:18,240 --> 00:40:22,560
installing on your servers ansible

00:40:20,760 --> 00:40:26,550
galaxy it's a pretty it's pretty nice

00:40:22,560 --> 00:40:28,080
utility most modules if not all will

00:40:26,550 --> 00:40:30,800
have links to github or where the

00:40:28,080 --> 00:40:33,030
sources you can go look at it

00:40:30,800 --> 00:40:34,560
people can star the module as you can

00:40:33,030 --> 00:40:39,620
see how often it got downloaded I think

00:40:34,560 --> 00:40:39,620
this nature um it's pretty nice utility

00:40:41,420 --> 00:40:45,900
so I went over some of the ansible tween

00:40:43,710 --> 00:40:48,180
already the vagrant dynamic inventory

00:40:45,900 --> 00:40:49,710
was pretty it was pretty useful it's a

00:40:48,180 --> 00:40:51,360
bit more advanced but know that it's

00:40:49,710 --> 00:40:53,610
there for you there's more than one way

00:40:51,360 --> 00:40:55,860
to do it actually I have a link there

00:40:53,610 --> 00:40:57,480
time ecce is linked to the ansible

00:40:55,860 --> 00:41:01,500
documentation and how to generate your

00:40:57,480 --> 00:41:02,880
own inventories sometimes you would why

00:41:01,500 --> 00:41:05,070
would you want to do this if you're in a

00:41:02,880 --> 00:41:06,210
cloud environment if you don't know what

00:41:05,070 --> 00:41:07,770
your servers are going to be when you're

00:41:06,210 --> 00:41:10,380
deploying you might need to do it

00:41:07,770 --> 00:41:12,750
dynamically I work in an environment

00:41:10,380 --> 00:41:15,660
where I know definitely my servers they

00:41:12,750 --> 00:41:17,130
don't change that often so I have I have

00:41:15,660 --> 00:41:18,900
inventory files checked in with all of

00:41:17,130 --> 00:41:21,030
our servers and that's kind of the

00:41:18,900 --> 00:41:23,940
source of truth for it or I try to make

00:41:21,030 --> 00:41:25,860
this source of truth anyway but there's

00:41:23,940 --> 00:41:28,680
also really good support for 4dr built

00:41:25,860 --> 00:41:31,920
in to to ansible so if any of you are

00:41:28,680 --> 00:41:34,860
using docker or even want to look into

00:41:31,920 --> 00:41:37,880
it actually actually recommend checking

00:41:34,860 --> 00:41:40,500
out the the book ansible up and running

00:41:37,880 --> 00:41:42,240
there's it's been recently updated and

00:41:40,500 --> 00:41:44,820
in the recent update the second edition

00:41:42,240 --> 00:41:47,700
actually dies I'm pretty good into the

00:41:44,820 --> 00:41:49,920
doctors for in Hansel and it's pretty

00:41:47,700 --> 00:41:51,780
nice too because you can use you can

00:41:49,920 --> 00:41:54,270
just do your own thing and docker if you

00:41:51,780 --> 00:41:55,950
innovate and if you do use it you can

00:41:54,270 --> 00:41:58,140
just do your own thing and then you can

00:41:55,950 --> 00:42:00,000
come in with ansible later to kind of

00:41:58,140 --> 00:42:01,410
orchestrate it together if that's

00:42:00,000 --> 00:42:02,190
something that makes sense for your

00:42:01,410 --> 00:42:06,030
situation

00:42:02,190 --> 00:42:07,470
I also will mention that um you can

00:42:06,030 --> 00:42:10,260
write your own your own commands or

00:42:07,470 --> 00:42:12,930
modules in in in Python so a lot of the

00:42:10,260 --> 00:42:15,360
built-in commands if not all of them are

00:42:12,930 --> 00:42:17,460
written in Python so you can do that

00:42:15,360 --> 00:42:20,880
yourself if you're doing something super

00:42:17,460 --> 00:42:22,800
custom you you have that power but it's

00:42:20,880 --> 00:42:28,680
an advanced thing so you probably try

00:42:22,800 --> 00:42:30,990
not to do it but if you do it's there so

00:42:28,680 --> 00:42:33,450
here's a list of things that I kind of

00:42:30,990 --> 00:42:36,270
kind of wish I had when I was starting

00:42:33,450 --> 00:42:38,280
out so bringing getting two of these

00:42:36,270 --> 00:42:40,680
toward the end here I'll ask for

00:42:38,280 --> 00:42:42,990
questions a second but but again I'll

00:42:40,680 --> 00:42:45,450
reference the module index if anything

00:42:42,990 --> 00:42:48,059
go to the module index go look at what

00:42:45,450 --> 00:42:51,089
it can do and see if it matches

00:42:48,059 --> 00:42:52,619
for for your situation I'm one of the

00:42:51,089 --> 00:42:54,089
one of the more recent things that has

00:42:52,619 --> 00:42:57,029
been added to ants well actually I'll

00:42:54,089 --> 00:42:59,849
mention it is that it has I think about

00:42:57,029 --> 00:43:03,269
a year ago or so a lot of support was

00:42:59,849 --> 00:43:05,880
added for for routers specifically I

00:43:03,269 --> 00:43:08,099
know it has to put for for f5s I know

00:43:05,880 --> 00:43:09,569
I'm my business we use f5s I don't I'm

00:43:08,099 --> 00:43:11,640
not in charge of him so I've never got a

00:43:09,569 --> 00:43:15,029
chance to use ansible with it but I

00:43:11,640 --> 00:43:16,799
really wanted to do so if you're if

00:43:15,029 --> 00:43:18,239
you're in a situation where you do with

00:43:16,799 --> 00:43:19,410
networking on your site I would

00:43:18,239 --> 00:43:21,029
recommend go and look to see if they

00:43:19,410 --> 00:43:22,799
even have support for things that you

00:43:21,029 --> 00:43:26,910
use maybe you be be something that you

00:43:22,799 --> 00:43:29,219
could use here's some pretty good

00:43:26,910 --> 00:43:30,749
tutorial on a site called service for

00:43:29,219 --> 00:43:32,640
hackers user here's a link to it I

00:43:30,749 --> 00:43:34,529
recommend if you want to go through in

00:43:32,640 --> 00:43:35,880
the end something getting working to

00:43:34,529 --> 00:43:37,890
understand is this is something that

00:43:35,880 --> 00:43:41,430
makes sense to me that's a really good

00:43:37,890 --> 00:43:42,509
tutorial um so the best practices is

00:43:41,430 --> 00:43:45,089
something that took me a while to

00:43:42,509 --> 00:43:47,189
realize even existed on the ansible

00:43:45,089 --> 00:43:48,479
slide I think it's been out there for as

00:43:47,189 --> 00:43:50,069
long as I've been using I just didn't

00:43:48,479 --> 00:43:52,410
know existed so I wanted to I want to

00:43:50,069 --> 00:43:54,239
point out that even if you're getting

00:43:52,410 --> 00:43:56,910
started I highly recommend looking at

00:43:54,239 --> 00:43:58,920
the antelope best practices it gives it

00:43:56,910 --> 00:44:01,920
just tells you here's how to layout your

00:43:58,920 --> 00:44:03,509
your your playbooks in your tasks and

00:44:01,920 --> 00:44:05,189
stuff like that because you you probably

00:44:03,509 --> 00:44:06,869
struggle with that a lot I know I did

00:44:05,189 --> 00:44:08,910
you know tell you like just create your

00:44:06,869 --> 00:44:10,979
control your files like this in over um

00:44:08,910 --> 00:44:12,420
but it also has options there's actually

00:44:10,979 --> 00:44:13,920
different different best practice that

00:44:12,420 --> 00:44:15,449
you can follow up based on the scope for

00:44:13,920 --> 00:44:18,179
your project I work on a project that

00:44:15,449 --> 00:44:20,130
kind of ballooned out and we got into

00:44:18,179 --> 00:44:21,959
trouble with with how to organize their

00:44:20,130 --> 00:44:24,089
own code and and the best practices

00:44:21,959 --> 00:44:26,099
actually helps with that a lot another

00:44:24,089 --> 00:44:27,959
thing I found more recently in this bit

00:44:26,099 --> 00:44:30,299
more advanced so if you're already using

00:44:27,959 --> 00:44:32,579
ansible i think there are a few if you

00:44:30,299 --> 00:44:35,219
haven't seen there is actually pretty

00:44:32,579 --> 00:44:37,199
good talk by some Red Hat developers

00:44:35,219 --> 00:44:38,759
they're like hey they're pretty much

00:44:37,199 --> 00:44:41,279
things that we've all we've seen a lot

00:44:38,759 --> 00:44:42,839
like almost everyone run into regards to

00:44:41,279 --> 00:44:44,519
just getting going and ansible or and

00:44:42,839 --> 00:44:46,589
even advanced things there's a video

00:44:44,519 --> 00:44:49,589
that that's a link to I however highly

00:44:46,589 --> 00:44:53,429
recommend that I'm a couple things that

00:44:49,589 --> 00:44:55,439
I did use excessively is as I already

00:44:53,429 --> 00:44:59,699
mention ansible up and running

00:44:55,439 --> 00:45:01,380
excellent book um it's maybe two or

00:44:59,699 --> 00:45:01,829
three hundred pages small enough to

00:45:01,380 --> 00:45:03,390
where you

00:45:01,829 --> 00:45:05,190
you going with something even even with

00:45:03,390 --> 00:45:05,940
even in a couple days but that book and

00:45:05,190 --> 00:45:09,390
that's what I did

00:45:05,940 --> 00:45:10,709
Thanks I'm also also I was kind of

00:45:09,390 --> 00:45:11,940
pleasantly surprised to see that there

00:45:10,709 --> 00:45:13,410
was integration with a vagrant

00:45:11,940 --> 00:45:15,359
so the vagrant book is little it's a

00:45:13,410 --> 00:45:18,150
little older but if if any of you have

00:45:15,359 --> 00:45:20,759
ever used it or not you said I I check I

00:45:18,150 --> 00:45:22,289
recommend checking checking into it it

00:45:20,759 --> 00:45:25,259
also dr. up and running if you're into

00:45:22,289 --> 00:45:28,979
docker I found that the docker up and

00:45:25,259 --> 00:45:30,469
running book to be pretty useful any

00:45:28,979 --> 00:45:48,359
questions

00:45:30,469 --> 00:45:50,219
cute dog right so when is ansible good

00:45:48,359 --> 00:45:54,900
and not good we're gonna pair to these

00:45:50,219 --> 00:46:03,029
other tools right other tools let's prep

00:45:54,900 --> 00:46:04,799
for that yeah so at the end ansible some

00:46:03,029 --> 00:46:08,249
of the benefits of ansible is that it's

00:46:04,799 --> 00:46:11,339
it's kind of it's agentless right so I

00:46:08,249 --> 00:46:13,650
think that that right there is is one of

00:46:11,339 --> 00:46:15,119
the answers but also in my opinion

00:46:13,650 --> 00:46:16,859
there's there's overlap too because

00:46:15,119 --> 00:46:19,739
sometimes you want to do you want to use

00:46:16,859 --> 00:46:21,359
puppet or chef for your configuration

00:46:19,739 --> 00:46:22,890
management so maybe it doesn't make

00:46:21,359 --> 00:46:24,059
sense to use ansible flex is your

00:46:22,890 --> 00:46:26,039
argument but it might make sense for

00:46:24,059 --> 00:46:28,289
some some simpler things for

00:46:26,039 --> 00:46:30,289
orchestrating on those things along the

00:46:28,289 --> 00:46:33,869
side that's where I've seen it useful

00:46:30,289 --> 00:46:34,979
but then again if you're if it's a

00:46:33,869 --> 00:46:36,119
difficult question to answer right

00:46:34,979 --> 00:46:37,709
because if you're an if you're an

00:46:36,119 --> 00:46:39,930
organization that they were standardized

00:46:37,709 --> 00:46:41,959
on on puppet or something like that you

00:46:39,930 --> 00:46:46,140
should probably try to use that but if

00:46:41,959 --> 00:46:50,150
in which case the power of ansible may

00:46:46,140 --> 00:46:53,119
just come in to how to do things when

00:46:50,150 --> 00:46:55,670
you just want to do something simple or

00:46:53,119 --> 00:46:59,339
one of the one of the things that that

00:46:55,670 --> 00:47:01,680
I've been really successful with ansible

00:46:59,339 --> 00:47:04,410
is in the middle of with a production

00:47:01,680 --> 00:47:05,940
incidence using ansible to to assess

00:47:04,410 --> 00:47:10,270
what's really wrong because I could have

00:47:05,940 --> 00:47:11,950
session wrong to 20 or 30 servers maybe

00:47:10,270 --> 00:47:14,230
but it's still gonna take me a little

00:47:11,950 --> 00:47:15,670
while and if you're good enough ansible

00:47:14,230 --> 00:47:19,480
you could write it right there and then

00:47:15,670 --> 00:47:21,940
playbook and run it in in a few minutes

00:47:19,480 --> 00:47:24,310
and I actually found a pretty useful um

00:47:21,940 --> 00:47:26,890
in actual incidents which maybe maybe

00:47:24,310 --> 00:47:28,420
Papa chef wouldn't be useful for that do

00:47:26,890 --> 00:47:31,120
man dependent in telemetry they already

00:47:28,420 --> 00:47:34,660
have right so I I do find Ansel pretty

00:47:31,120 --> 00:47:36,130
useful for for running simple things and

00:47:34,660 --> 00:47:37,690
just collecting data and pushing that

00:47:36,130 --> 00:47:38,800
data it's like a database just something

00:47:37,690 --> 00:47:39,940
like that that's a little bit more

00:47:38,800 --> 00:47:52,540
advanced but that is something van

00:47:39,940 --> 00:47:55,570
scible can do as well good question yes

00:47:52,540 --> 00:47:57,790
so the question is it is it really estes

00:47:55,570 --> 00:47:59,620
HBase fully and yeah if you can SSH

00:47:57,790 --> 00:48:01,750
under a box you can use ansible to get

00:47:59,620 --> 00:48:03,520
on it yeah and that's also one of the

00:48:01,750 --> 00:48:05,230
big pros I think in terms of getting up

00:48:03,520 --> 00:48:16,740
and running it was with my team it was

00:48:05,230 --> 00:48:16,740
easy it was easy an easy win yep

00:48:17,090 --> 00:48:23,000
yeah it is it's it's a lot more on the

00:48:21,050 --> 00:48:24,230
fly with ansible or is there's

00:48:23,000 --> 00:48:32,180
definitely a pro until it isn't that

00:48:24,230 --> 00:48:37,430
would say yeah yeah yep any other

00:48:32,180 --> 00:48:41,570
questions Oh is there support for

00:48:37,430 --> 00:48:43,910
Windows actually there is some in the

00:48:41,570 --> 00:48:45,980
more recent versions of ansible I

00:48:43,910 --> 00:48:48,640
personally have never used it and the

00:48:45,980 --> 00:48:51,110
support is the number of models that you

00:48:48,640 --> 00:48:53,630
that you have access to are much smaller

00:48:51,110 --> 00:48:54,710
but you do have a growing number of I

00:48:53,630 --> 00:48:55,850
think I was just looking at it yesterday

00:48:54,710 --> 00:48:58,610
at saw ax

00:48:55,850 --> 00:49:00,650
I think I saw Windows modules for

00:48:58,610 --> 00:49:04,400
ansible for like asses access control

00:49:00,650 --> 00:49:06,170
lists files and configurations simple

00:49:04,400 --> 00:49:07,490
things like that there's actually a

00:49:06,170 --> 00:49:08,690
dedicated section on the danceable

00:49:07,490 --> 00:49:09,710
documentation if you're out in Windows

00:49:08,690 --> 00:49:12,260
um

00:49:09,710 --> 00:49:13,880
I recommend going to their site and

00:49:12,260 --> 00:49:15,320
looking exactly what they what support

00:49:13,880 --> 00:49:18,610
they they have for Windows to see if it

00:49:15,320 --> 00:49:18,610
fits for all the things that you need

00:49:37,210 --> 00:49:42,830
hey yeah the question is do you have to

00:49:40,370 --> 00:49:45,710
still run a school Linux and I'll say I

00:49:42,830 --> 00:49:47,420
don't know I never I would be surprised

00:49:45,710 --> 00:49:49,130
if they roll out Windows support with

00:49:47,420 --> 00:49:51,830
and requires you to run it out it's not

00:49:49,130 --> 00:49:53,390
Windows machine I would have to owe it

00:49:51,830 --> 00:49:55,910
at the out the look to be honest that's

00:49:53,390 --> 00:49:58,100
good I'm not sure I don't run it on a

00:49:55,910 --> 00:50:00,290
Windows environment but I have been

00:49:58,100 --> 00:50:01,100
asked several times and I should know

00:50:00,290 --> 00:50:06,110
what I don't

00:50:01,100 --> 00:50:08,260
I think that's yep I think that's all I

00:50:06,110 --> 00:50:17,780
think so we have time for thanks

00:50:08,260 --> 00:50:17,780

YouTube URL: https://www.youtube.com/watch?v=NtUDt1qfgQ0


