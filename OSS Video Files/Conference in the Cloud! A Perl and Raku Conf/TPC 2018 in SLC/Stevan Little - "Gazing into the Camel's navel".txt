Title: Stevan Little - "Gazing into the Camel's navel"
Publication date: 2018-06-20
Playlist: TPC 2018 in SLC
Description: 
	In this talk we will discuss the MOP module, my proposed successor to Class::MOP. We will review the overall design of the MOP, compare it somewhat to Class::MOP and finally show some usage examples of the new MOP.
Captions: 
	00:00:00,030 --> 00:00:03,120
okay it's a three o'clock so let's get

00:00:02,610 --> 00:00:06,029
started

00:00:03,120 --> 00:00:09,809
so we can get closer to the beer at the

00:00:06,029 --> 00:00:10,260
end of the day so I'm gonna apologize in

00:00:09,809 --> 00:00:12,950
advance

00:00:10,260 --> 00:00:16,440
I literally just finished the last slide

00:00:12,950 --> 00:00:19,500
while I was out there and I just barely

00:00:16,440 --> 00:00:23,730
had time to pee so preparation is maybe

00:00:19,500 --> 00:00:27,090
not the best for this one so this I

00:00:23,730 --> 00:00:30,359
marked this talking in the when I

00:00:27,090 --> 00:00:31,830
submitted it as advanced so it is we're

00:00:30,359 --> 00:00:33,540
gonna go straight into the mop there's

00:00:31,830 --> 00:00:34,739
no training wheels on this one we're

00:00:33,540 --> 00:00:35,760
going to talk about a bunch of details

00:00:34,739 --> 00:00:39,390
we're going to talk about some core

00:00:35,760 --> 00:00:42,649
stuff a little bit well as much as I can

00:00:39,390 --> 00:00:45,420
get in in 20 minutes so I apologize if

00:00:42,649 --> 00:00:47,550
yeah if I if I if it just seemed a

00:00:45,420 --> 00:00:48,899
little bit too complicated always ask me

00:00:47,550 --> 00:00:53,160
later and I'm happy to explain it in

00:00:48,899 --> 00:00:56,489
more detail then so what is a mop who

00:00:53,160 --> 00:00:57,870
here knows what a mop is okay good good

00:00:56,489 --> 00:01:03,960
then I don't really it's it's that thing

00:00:57,870 --> 00:01:06,689
right so a mop is a meta object protocol

00:01:03,960 --> 00:01:08,549
and and where I really learned the most

00:01:06,689 --> 00:01:11,000
amount meta meta object protocols is

00:01:08,549 --> 00:01:13,770
this book I highly recommend it I

00:01:11,000 --> 00:01:15,330
believe I let somebody borrow it and

00:01:13,770 --> 00:01:18,540
they let me borrow it and then I've

00:01:15,330 --> 00:01:20,490
never seen it again so I plan to bug him

00:01:18,540 --> 00:01:22,799
outside and see if I can get it but

00:01:20,490 --> 00:01:25,350
anyway it's a this book has a whole

00:01:22,799 --> 00:01:28,259
section in it it's a just giant like 20

00:01:25,350 --> 00:01:30,240
pages of Lisp Lisp code in which they

00:01:28,259 --> 00:01:33,000
demonstrate building and bootstrapping a

00:01:30,240 --> 00:01:35,369
meta object protocol in a very simple

00:01:33,000 --> 00:01:36,930
Lisp and if you can work your way

00:01:35,369 --> 00:01:38,460
through all the parentheses it's a very

00:01:36,930 --> 00:01:40,049
very educational read and very very

00:01:38,460 --> 00:01:42,030
interesting especially if you like meta

00:01:40,049 --> 00:01:44,520
circular things and stuff that makes

00:01:42,030 --> 00:01:46,350
your head turn inside out um so enough

00:01:44,520 --> 00:01:48,360
with the book recommendations a mop as

00:01:46,350 --> 00:01:51,060
most of you already know is an API for

00:01:48,360 --> 00:01:52,380
classes rolls slots and methods and

00:01:51,060 --> 00:01:54,450
these are just the names that I've

00:01:52,380 --> 00:01:56,909
chosen here in mousse we call slots

00:01:54,450 --> 00:01:58,979
attributes but attributes is a name

00:01:56,909 --> 00:02:00,810
already taken in Perl so I decided to

00:01:58,979 --> 00:02:01,950
call it slots because also fields is

00:02:00,810 --> 00:02:04,350
already taken and members is already

00:02:01,950 --> 00:02:07,170
taken so it was and and it actually fits

00:02:04,350 --> 00:02:08,819
with the the meta object protocol in

00:02:07,170 --> 00:02:12,460
common lisp call some slots as well so

00:02:08,819 --> 00:02:15,010
yeh following lisp

00:02:12,460 --> 00:02:17,140
I like to call them up an abstraction of

00:02:15,010 --> 00:02:19,420
a system of abstractions that is used to

00:02:17,140 --> 00:02:20,710
build abstractions this is what this is

00:02:19,420 --> 00:02:27,100
how I explain it to people when I just

00:02:20,710 --> 00:02:29,860
want them to go away so so mops

00:02:27,100 --> 00:02:31,450
throughout the years this isn't the

00:02:29,860 --> 00:02:34,140
first one and I didn't write the first

00:02:31,450 --> 00:02:37,450
one either the very first one is that

00:02:34,140 --> 00:02:40,360
okay that right there is an API to your

00:02:37,450 --> 00:02:44,080
classes and to your packages or your

00:02:40,360 --> 00:02:46,920
packages classes methods whatever but

00:02:44,080 --> 00:02:49,840
it's a little kind of ugly and up too so

00:02:46,920 --> 00:02:52,720
also class successor class method maker

00:02:49,840 --> 00:02:54,880
all those things that would auto

00:02:52,720 --> 00:02:55,150
generate accessors and other methods for

00:02:54,880 --> 00:02:57,460
you

00:02:55,150 --> 00:02:59,860
those two kind of a bit of a mop there

00:02:57,460 --> 00:03:04,600
it's also an API again towards your

00:02:59,860 --> 00:03:08,020
classes and things like that in 2005 I

00:03:04,600 --> 00:03:11,560
wrote class mop which was which became

00:03:08,020 --> 00:03:13,810
the base for mousse class mop was a

00:03:11,560 --> 00:03:15,490
product of about three or four years of

00:03:13,810 --> 00:03:19,030
prototyping and probably like the

00:03:15,490 --> 00:03:20,760
fifteenth version all the other ones

00:03:19,030 --> 00:03:24,220
were really bad I threw them all away

00:03:20,760 --> 00:03:26,230
but over the years I came to regret a

00:03:24,220 --> 00:03:27,490
number of decisions in mousse and in

00:03:26,230 --> 00:03:30,520
class mop and one of these days I'll

00:03:27,490 --> 00:03:32,770
actually give a talk about that so I

00:03:30,520 --> 00:03:34,270
started in 2011 to try and rethink this

00:03:32,770 --> 00:03:36,550
and also to think about how to get it

00:03:34,270 --> 00:03:39,090
into the core how we could how to build

00:03:36,550 --> 00:03:43,060
something that would be appropriate to

00:03:39,090 --> 00:03:44,740
hoist upon P 5 P and for them to maybe

00:03:43,060 --> 00:03:46,960
maintain if I happen to go away or get

00:03:44,740 --> 00:03:50,290
hit by a bus or something so that took

00:03:46,960 --> 00:03:51,970
many many iterations and basically as

00:03:50,290 --> 00:03:54,340
far as I'm concerned I've hit what I

00:03:51,970 --> 00:03:56,380
feel is the the right place on this and

00:03:54,340 --> 00:03:58,030
that is the mop module so we just

00:03:56,380 --> 00:04:01,750
dropped the whole class part and just

00:03:58,030 --> 00:04:03,700
kept that so now we're gonna get into

00:04:01,750 --> 00:04:06,160
the details oh I'm sorry

00:04:03,700 --> 00:04:07,990
first the design goals so I had some

00:04:06,160 --> 00:04:10,690
very specific design goals when I

00:04:07,990 --> 00:04:13,120
started out trying to think about this

00:04:10,690 --> 00:04:13,930
in 2011 and those design goals evolved

00:04:13,120 --> 00:04:15,940
over time

00:04:13,930 --> 00:04:17,650
but the design goals that I ended up

00:04:15,940 --> 00:04:20,320
with in that power that are behind this

00:04:17,650 --> 00:04:23,080
module are these so first things first

00:04:20,320 --> 00:04:23,830
is low overhead how many of you have

00:04:23,080 --> 00:04:24,530
used moussed

00:04:23,830 --> 00:04:28,370
and looked

00:04:24,530 --> 00:04:32,330
your memory usage and gone all of you

00:04:28,370 --> 00:04:34,160
yes moose did not really try and have a

00:04:32,330 --> 00:04:36,919
low overhead at all and class mop which

00:04:34,160 --> 00:04:38,600
powered it also didn't do the same so

00:04:36,919 --> 00:04:40,040
this was something I just I thought well

00:04:38,600 --> 00:04:41,270
that's a challenge I'd like to figure

00:04:40,040 --> 00:04:44,800
that one out

00:04:41,270 --> 00:04:46,850
also class mop sort of had complex

00:04:44,800 --> 00:04:48,919
representations of things it sort of

00:04:46,850 --> 00:04:51,710
built a whole layer on top of pearl I

00:04:48,919 --> 00:04:54,770
wanted something closer to pearl simpler

00:04:51,710 --> 00:04:56,120
representations class mop also managed a

00:04:54,770 --> 00:04:58,580
lot of state that's why I took up all

00:04:56,120 --> 00:05:00,830
that memory pearl is actually managing

00:04:58,580 --> 00:05:03,919
the state just fine I didn't need to

00:05:00,830 --> 00:05:05,750
duplicate it so I wanted to figure out a

00:05:03,919 --> 00:05:07,190
way to basically not have to manage any

00:05:05,750 --> 00:05:08,810
state within the mop and let the state

00:05:07,190 --> 00:05:11,660
stay within pearl where it belongs in

00:05:08,810 --> 00:05:13,100
the pearl in the probe cuts rather I

00:05:11,660 --> 00:05:17,180
also want to meta objects to be

00:05:13,100 --> 00:05:19,580
immutable this means that you yeah you

00:05:17,180 --> 00:05:21,740
get them out and and you can't change

00:05:19,580 --> 00:05:23,180
them if you want to change you can you

00:05:21,740 --> 00:05:25,280
can change the underlying pearl stuff

00:05:23,180 --> 00:05:27,770
you can change things through the mop

00:05:25,280 --> 00:05:32,090
but the meta objects themselves are are

00:05:27,770 --> 00:05:34,340
static I wanted to have a more accurate

00:05:32,090 --> 00:05:36,500
reflection of the state within the Perl

00:05:34,340 --> 00:05:38,270
interpreter class mop and mousse like I

00:05:36,500 --> 00:05:41,510
said they built a layer on top and that

00:05:38,270 --> 00:05:44,750
layer on top of pearl essentially

00:05:41,510 --> 00:05:47,030
duplicated everything and it wasn't

00:05:44,750 --> 00:05:49,910
always accurate it created its own

00:05:47,030 --> 00:05:53,479
concepts and and things like that so I'm

00:05:49,910 --> 00:05:56,120
sorry instead I went on to try and adapt

00:05:53,479 --> 00:05:57,560
and reuse existing features in pearl so

00:05:56,120 --> 00:05:59,870
I looked and I looked and I looked for

00:05:57,560 --> 00:06:01,370
to find something that would be pure

00:05:59,870 --> 00:06:04,750
pearl and not even actually involve any

00:06:01,370 --> 00:06:08,210
code but would I would be able to it

00:06:04,750 --> 00:06:11,360
create these concepts through Corporal

00:06:08,210 --> 00:06:13,640
stuff and again I avoid introducing new

00:06:11,360 --> 00:06:16,070
concepts so I got that backwards and

00:06:13,640 --> 00:06:19,340
again more suitable for inclusion in

00:06:16,070 --> 00:06:22,789
core if I host like tons and tons of

00:06:19,340 --> 00:06:25,190
complex code on to the core it doesn't

00:06:22,789 --> 00:06:26,990
help anybody yes maybe we get some cool

00:06:25,190 --> 00:06:29,360
stuff in the next release but then the

00:06:26,990 --> 00:06:30,800
maintenance burden is huge so I wanted

00:06:29,360 --> 00:06:33,320
to make sure that the way I approach

00:06:30,800 --> 00:06:36,159
this kept it simple and with the least

00:06:33,320 --> 00:06:39,610
amount of code as possible

00:06:36,159 --> 00:06:41,979
one of the biggest well one of the

00:06:39,610 --> 00:06:44,739
trickiest parts and sort of the most

00:06:41,979 --> 00:06:46,689
mind and mind-bending parts of some of

00:06:44,739 --> 00:06:49,749
the the guts of class mop is the meta

00:06:46,689 --> 00:06:51,729
circularity and the hoops that it would

00:06:49,749 --> 00:06:54,789
jump through in order to enforce this

00:06:51,729 --> 00:06:56,949
meta circularity pearl is really lazy

00:06:54,789 --> 00:06:59,979
pearl won't do anything until it

00:06:56,949 --> 00:07:01,629
absolutely has to and so I've decided to

00:06:59,979 --> 00:07:03,159
try and exploit that so that the

00:07:01,629 --> 00:07:05,259
meta-circular stuff was actually

00:07:03,159 --> 00:07:07,869
entirely implicit which means the

00:07:05,259 --> 00:07:09,369
bootstrap costs nothing which is nice

00:07:07,869 --> 00:07:11,429
because the bootstrap and mop is a

00:07:09,369 --> 00:07:17,019
bootstrap and mousse is quite expensive

00:07:11,429 --> 00:07:19,089
which I just said like I said just

00:07:17,019 --> 00:07:23,679
finish the slides so sorry

00:07:19,089 --> 00:07:28,389
you get what you pay for so uh I also

00:07:23,679 --> 00:07:31,599
wanted this to be lazy if you if you

00:07:28,389 --> 00:07:36,729
create a class in in mousse and it has

00:07:31,599 --> 00:07:38,289
two attributes and three methods and yet

00:07:36,729 --> 00:07:40,959
that you're gonna end up with two

00:07:38,289 --> 00:07:42,249
attribute objects a class object to

00:07:40,959 --> 00:07:44,249
method objects and probably a bunch of

00:07:42,249 --> 00:07:47,079
other little in there as well and

00:07:44,249 --> 00:07:49,209
if you never actually call meta and use

00:07:47,079 --> 00:07:51,279
it it's useless it's just sitting there

00:07:49,209 --> 00:07:54,249
wasting memory so I wanted to make sure

00:07:51,279 --> 00:07:56,559
that this mop was as lazy as possible so

00:07:54,249 --> 00:08:00,129
it wouldn't do anything until you asked

00:07:56,559 --> 00:08:03,159
for it and basically creating the meta

00:08:00,129 --> 00:08:05,139
objects on demand so that was the design

00:08:03,159 --> 00:08:06,339
goals oh yes also I wanted meta objects

00:08:05,139 --> 00:08:07,929
be very disposable that's why they're

00:08:06,339 --> 00:08:09,849
immutable so you can't fiddle with them

00:08:07,929 --> 00:08:10,929
if you can't change the state while

00:08:09,849 --> 00:08:11,110
you're gonna keep it around throw it

00:08:10,929 --> 00:08:12,909
away

00:08:11,110 --> 00:08:14,919
create another one and you get the exact

00:08:12,909 --> 00:08:16,360
same thing again because again it's a

00:08:14,919 --> 00:08:19,779
reflection of the state of the Perl

00:08:16,360 --> 00:08:24,639
interpreter not a capturing of this they

00:08:19,779 --> 00:08:26,139
are a state in and of itself so one

00:08:24,639 --> 00:08:27,519
thing this this probably won't make

00:08:26,139 --> 00:08:29,349
sense to anybody nobody's ever really

00:08:27,519 --> 00:08:31,179
gotten this one because it's just a

00:08:29,349 --> 00:08:33,430
really weird one but I drew this picture

00:08:31,179 --> 00:08:35,680
in 2005 when I was working on the pugs

00:08:33,430 --> 00:08:39,250
project and we were trying to figure out

00:08:35,680 --> 00:08:41,709
how roles fit into a meta object system

00:08:39,250 --> 00:08:43,269
and one of the fun things about a meta

00:08:41,709 --> 00:08:45,100
object system is you can do weird stuff

00:08:43,269 --> 00:08:47,230
like they're the class there that

00:08:45,100 --> 00:08:49,540
looping thing up there is because class

00:08:47,230 --> 00:08:52,089
is an instance

00:08:49,540 --> 00:08:55,120
of class so it's at that bootstrap thing

00:08:52,089 --> 00:08:57,610
and so I drew this thinking a role well

00:08:55,120 --> 00:08:59,139
a role should be a role like the the

00:08:57,610 --> 00:09:01,839
concept of roles should be illustrated

00:08:59,139 --> 00:09:03,370
by a role and a class really does most

00:09:01,839 --> 00:09:07,389
classes and roles do most of the same

00:09:03,370 --> 00:09:09,759
things so a class should do a role even

00:09:07,389 --> 00:09:11,050
though role is also itself an instance

00:09:09,759 --> 00:09:12,519
I've got yeah this is again this is like

00:09:11,050 --> 00:09:13,930
all over the place and twisty you have

00:09:12,519 --> 00:09:16,329
to smoke a lot of weed for it to make

00:09:13,930 --> 00:09:18,490
sense and this is not the state to do

00:09:16,329 --> 00:09:22,839
that in so when we have Yap see Denver

00:09:18,490 --> 00:09:25,269
something no so it's but I'm very happy

00:09:22,839 --> 00:09:27,940
to say this is what the new mop does and

00:09:25,269 --> 00:09:31,149
I think this when I finally figured out

00:09:27,940 --> 00:09:33,310
how to get this working it simplified

00:09:31,149 --> 00:09:34,930
the design a lot and I hope that the

00:09:33,310 --> 00:09:37,240
next set of slides will illustrate to

00:09:34,930 --> 00:09:38,800
you how that design is simplified if it

00:09:37,240 --> 00:09:41,470
doesn't then I'll have to rework this

00:09:38,800 --> 00:09:42,550
talk so and from now on these are all

00:09:41,470 --> 00:09:43,329
the slides that I've just been cramming

00:09:42,550 --> 00:09:46,149
over the last hour

00:09:43,329 --> 00:09:48,670
so John took me to lunch so if they're

00:09:46,149 --> 00:09:52,930
bad blame him actually picking John so

00:09:48,670 --> 00:09:55,540
both of so okay let's see how this

00:09:52,930 --> 00:09:57,970
pointer stuff works here okay so this is

00:09:55,540 --> 00:10:01,230
sort of a representation of the parts of

00:09:57,970 --> 00:10:03,279
the new mop so most people think of

00:10:01,230 --> 00:10:06,880
classes is a big part of your object

00:10:03,279 --> 00:10:08,139
system so most people think of that as

00:10:06,880 --> 00:10:09,940
sort of the top maybe the top of this

00:10:08,139 --> 00:10:13,600
hierarchy but it really isn't

00:10:09,940 --> 00:10:16,899
mop role is is the the important part of

00:10:13,600 --> 00:10:17,949
this so mop role gives you access you

00:10:16,899 --> 00:10:19,540
know it's got a version method which

00:10:17,949 --> 00:10:22,149
obviously reads the version variable

00:10:19,540 --> 00:10:25,149
also the authority variable it's got an

00:10:22,149 --> 00:10:26,889
authority method if you want to add if

00:10:25,149 --> 00:10:28,329
you're adding roles to your class

00:10:26,889 --> 00:10:30,220
well you just like you would put a

00:10:28,329 --> 00:10:31,779
string inside your is a variable you put

00:10:30,220 --> 00:10:34,180
a string inside your does variable and

00:10:31,779 --> 00:10:37,360
does is basically how you specify your

00:10:34,180 --> 00:10:41,829
role relationships has if any of you saw

00:10:37,360 --> 00:10:44,410
my universal object talk yesterday has

00:10:41,829 --> 00:10:46,779
is my proposal for how you store slot

00:10:44,410 --> 00:10:50,560
information so it has is a hash it's a

00:10:46,779 --> 00:10:52,959
package level a package variable the

00:10:50,560 --> 00:10:55,180
keys are the names of the slots and the

00:10:52,959 --> 00:10:57,300
values are subroutine references that

00:10:55,180 --> 00:11:00,010
serve as initializers for that slot and

00:10:57,300 --> 00:11:01,389
then last but not least all the methods

00:11:00,010 --> 00:11:03,120
of course are stored inside the package

00:11:01,389 --> 00:11:06,180
stash

00:11:03,120 --> 00:11:09,190
so mah parole just basically gives you a

00:11:06,180 --> 00:11:12,430
handle to this package and all those

00:11:09,190 --> 00:11:15,130
variables in particular mop class just

00:11:12,430 --> 00:11:16,089
does mop role which means it has all the

00:11:15,130 --> 00:11:17,680
methods and all the features and

00:11:16,089 --> 00:11:19,660
everything just automatically included

00:11:17,680 --> 00:11:21,580
in it but mop class itself really only

00:11:19,660 --> 00:11:22,839
cares about inheritance because really

00:11:21,580 --> 00:11:25,930
the difference between a role and a

00:11:22,839 --> 00:11:27,490
class is one can be instantiated and has

00:11:25,930 --> 00:11:28,540
inheritance and the other one can't be

00:11:27,490 --> 00:11:30,430
instantiated and doesn't have

00:11:28,540 --> 00:11:32,320
inheritance beyond that there's not too

00:11:30,430 --> 00:11:34,120
much difference mousse and class mop

00:11:32,320 --> 00:11:36,190
made a big distinction between the two

00:11:34,120 --> 00:11:37,779
and I blurred the distinction a lot more

00:11:36,190 --> 00:11:39,850
in this which it brings it a lot closer

00:11:37,779 --> 00:11:43,000
to how pearl six actually treats it and

00:11:39,850 --> 00:11:46,029
thinks about it in addition there's also

00:11:43,000 --> 00:11:48,490
mop slot objects which essentially are

00:11:46,029 --> 00:11:52,420
sort of a hash entry or a pair it's the

00:11:48,490 --> 00:11:55,209
name and the initializer the mop code or

00:11:52,420 --> 00:11:59,080
I'm sorry method is just it's a ref to a

00:11:55,209 --> 00:12:02,589
ref of the the code itself we have a

00:11:59,080 --> 00:12:05,589
slot initializer object and also you can

00:12:02,589 --> 00:12:07,990
introspect the attributes so you can you

00:12:05,589 --> 00:12:10,450
can see all the attributes for a given

00:12:07,990 --> 00:12:12,040
method you can pull them out and

00:12:10,450 --> 00:12:14,459
actually it'll parse them out for you

00:12:12,040 --> 00:12:19,709
and do some fancy little stuff as well

00:12:14,459 --> 00:12:21,640
again this is much closer to corporal

00:12:19,709 --> 00:12:23,230
attributes were something we just said

00:12:21,640 --> 00:12:24,700
no we're too cool for that with moose

00:12:23,230 --> 00:12:25,990
and so we didn't even bother supporting

00:12:24,700 --> 00:12:28,000
that or anything like that so that was

00:12:25,990 --> 00:12:32,380
important I felt now to get that support

00:12:28,000 --> 00:12:34,839
in there oh yes and then on the bottom

00:12:32,380 --> 00:12:36,910
all these are insert these are all

00:12:34,839 --> 00:12:38,920
subclasses these meta objects are all

00:12:36,910 --> 00:12:42,370
subclasses of universal object immutable

00:12:38,920 --> 00:12:44,140
so it's all built on top of that and for

00:12:42,370 --> 00:12:46,600
those who weren't in the thing or the my

00:12:44,140 --> 00:12:48,700
talk yesterday Universal object is a is

00:12:46,600 --> 00:12:52,089
a base class it's sort of a universal

00:12:48,700 --> 00:12:53,620
base class and it also comes with an

00:12:52,089 --> 00:12:55,690
immutable version of it which will

00:12:53,620 --> 00:12:57,730
essentially lock your hashes or arrays

00:12:55,690 --> 00:13:00,279
or scalars or whatever it is that you

00:12:57,730 --> 00:13:02,800
your blessing and it'll make them

00:13:00,279 --> 00:13:04,360
read-only for you so it's not quite

00:13:02,800 --> 00:13:06,130
immutable in the sense of like Java and

00:13:04,360 --> 00:13:08,980
some of those other languages which

00:13:06,130 --> 00:13:11,890
actually aggressively compile things

00:13:08,980 --> 00:13:12,780
down to to much cleaner quicker code

00:13:11,890 --> 00:13:14,760
it's

00:13:12,780 --> 00:13:19,410
so we're just locking things and not let

00:13:14,760 --> 00:13:21,900
you touch stuff okay so we're gonna do a

00:13:19,410 --> 00:13:23,940
quick review of the API because this is

00:13:21,900 --> 00:13:26,370
the best way that I could think of to

00:13:23,940 --> 00:13:30,930
explain some of the underlying concepts

00:13:26,370 --> 00:13:33,390
here so as I said mob class it has it

00:13:30,930 --> 00:13:35,220
defines three methods the MRO method

00:13:33,390 --> 00:13:38,910
which just literally calls the MRO

00:13:35,220 --> 00:13:41,040
module super classes which gives you

00:13:38,910 --> 00:13:42,990
what the contents of is ax and set super

00:13:41,040 --> 00:13:44,100
classes which will set the contents of

00:13:42,990 --> 00:13:46,380
it of is ax

00:13:44,100 --> 00:13:48,030
remember this is an immutable class when

00:13:46,380 --> 00:13:51,420
you set something in it you're setting

00:13:48,030 --> 00:13:54,900
into the underlying package so it's not

00:13:51,420 --> 00:13:59,010
it's it's a again it's that handle into

00:13:54,900 --> 00:14:01,980
the internals and mock class itself is a

00:13:59,010 --> 00:14:04,470
blessed reference to the hat to the

00:14:01,980 --> 00:14:05,640
stash so there is no I don't create an

00:14:04,470 --> 00:14:07,440
instance or anything like that

00:14:05,640 --> 00:14:08,760
there's no hash ref that stores a bunch

00:14:07,440 --> 00:14:10,920
of data like I said none of these store

00:14:08,760 --> 00:14:13,470
any data so essentially they're the

00:14:10,920 --> 00:14:14,580
instance types are usually references to

00:14:13,470 --> 00:14:16,590
the real stuff in Perl

00:14:14,580 --> 00:14:20,040
and actually I take that back it's a ref

00:14:16,590 --> 00:14:21,900
to the ref of the stash because if you

00:14:20,040 --> 00:14:23,880
take a ref to the stash and bless it

00:14:21,900 --> 00:14:28,260
then you end up blessing the stash which

00:14:23,880 --> 00:14:29,550
gets really really weird and I don't

00:14:28,260 --> 00:14:30,839
know if it would really make a mess but

00:14:29,550 --> 00:14:34,020
I didn't really want to think too much

00:14:30,839 --> 00:14:36,660
deeper so it's a ref - a rat - mop

00:14:34,020 --> 00:14:38,820
method has four methods here half way

00:14:36,660 --> 00:14:41,940
thank you four methods mount method is

00:14:38,820 --> 00:14:44,640
just a reference to a reference to your

00:14:41,940 --> 00:14:46,200
your method itself again we do that

00:14:44,640 --> 00:14:49,110
extra level of indirection to avoid

00:14:46,200 --> 00:14:51,089
blessing and therefore changing the guts

00:14:49,110 --> 00:14:54,630
or the actual pearl implementation or

00:14:51,089 --> 00:14:56,550
the the state inside pearl body

00:14:54,630 --> 00:14:59,190
obviously returns the body name will

00:14:56,550 --> 00:15:01,860
will query the CV the underlying pearl

00:14:59,190 --> 00:15:03,720
guts to get the name out of it it can

00:15:01,860 --> 00:15:06,930
also tell you this stash that it was

00:15:03,720 --> 00:15:09,810
originally compiled in and it can tell

00:15:06,930 --> 00:15:12,480
you if it was aliased from another stash

00:15:09,810 --> 00:15:13,980
so if it's if it's inside your class but

00:15:12,480 --> 00:15:15,060
it was alias from somewhere else which

00:15:13,980 --> 00:15:16,730
is what happens during like role

00:15:15,060 --> 00:15:19,260
composition and stuff

00:15:16,730 --> 00:15:20,760
next is mop slot it's actually an array

00:15:19,260 --> 00:15:22,470
reference is the way it's stored with

00:15:20,760 --> 00:15:23,020
the name and then the initializer and

00:15:22,470 --> 00:15:24,760
the

00:15:23,020 --> 00:15:27,640
fairly obvious methods in the origin

00:15:24,760 --> 00:15:30,460
stash and the was aliased from actually

00:15:27,640 --> 00:15:32,410
will ask that of the initializer and

00:15:30,460 --> 00:15:34,300
this is how we know whether you've

00:15:32,410 --> 00:15:37,300
brought whether you've inherited slots

00:15:34,300 --> 00:15:39,070
or whether the slots were defined inside

00:15:37,300 --> 00:15:41,350
your class if they were designed inside

00:15:39,070 --> 00:15:44,290
your class then your initializers will

00:15:41,350 --> 00:15:45,910
have a comp stash that points to that

00:15:44,290 --> 00:15:48,460
particular package if they were

00:15:45,910 --> 00:15:50,110
initialized somewhere else or brought in

00:15:48,460 --> 00:15:52,240
from a roll or composed in from

00:15:50,110 --> 00:15:53,980
somewhere then that comp stash will

00:15:52,240 --> 00:15:56,760
refer to a different package so that's

00:15:53,980 --> 00:15:59,620
how we know where these things come from

00:15:56,760 --> 00:16:01,750
next is my method or the method

00:15:59,620 --> 00:16:04,750
attribute which basically is just a

00:16:01,750 --> 00:16:06,160
scalar F to the string that that is

00:16:04,750 --> 00:16:08,920
actually that is basically what

00:16:06,160 --> 00:16:11,260
attributes will give you back the name

00:16:08,920 --> 00:16:13,600
we parse out everything before the

00:16:11,260 --> 00:16:15,610
parenthesis in an attribute and that'll

00:16:13,600 --> 00:16:17,860
be the name and then the args we parse

00:16:15,610 --> 00:16:19,780
it in a somewhat primitive way but you

00:16:17,860 --> 00:16:23,380
can you can extend it so you can pass in

00:16:19,780 --> 00:16:25,390
your own parsers for it mom slot

00:16:23,380 --> 00:16:28,270
initializer is literally just a blessed

00:16:25,390 --> 00:16:31,360
code ref and all that class really does

00:16:28,270 --> 00:16:33,940
is it makes it easy for you to to build

00:16:31,360 --> 00:16:35,620
some generic initializers but it just

00:16:33,940 --> 00:16:37,510
turns into a code ref which is what it

00:16:35,620 --> 00:16:38,740
expects to store in there anyway so it

00:16:37,510 --> 00:16:42,310
all just works in it litter it basically

00:16:38,740 --> 00:16:44,080
has no methods so those are little

00:16:42,310 --> 00:16:45,820
pieces and like I said those are again

00:16:44,080 --> 00:16:47,560
the little pieces the big pieces the

00:16:45,820 --> 00:16:50,230
role so that's where a lot of the meat

00:16:47,560 --> 00:16:52,780
of this comes so everybody hold on to

00:16:50,230 --> 00:16:56,230
your seats here we go these are all the

00:16:52,780 --> 00:16:57,820
methods in mop roll it's got a lot a lot

00:16:56,230 --> 00:16:59,620
of stuff and I'm gonna go through each

00:16:57,820 --> 00:17:02,560
each chunk individually but just first

00:16:59,620 --> 00:17:04,030
let me start by showing the stash gives

00:17:02,560 --> 00:17:07,780
you the handle to the underlying stash

00:17:04,030 --> 00:17:09,850
quite obvious name refers to the package

00:17:07,780 --> 00:17:12,250
name version refers to that version

00:17:09,850 --> 00:17:14,440
variable Authority refers to the

00:17:12,250 --> 00:17:15,280
authority variable and then the rest of

00:17:14,440 --> 00:17:19,089
the ones will get a little bit more

00:17:15,280 --> 00:17:21,880
detail so the rolls method will return

00:17:19,089 --> 00:17:23,790
whatever the contents of does was set

00:17:21,880 --> 00:17:26,740
roll or sorry that should be set rolls

00:17:23,790 --> 00:17:29,170
set rolls allows you to set that that

00:17:26,740 --> 00:17:31,570
does variable and does roll will

00:17:29,170 --> 00:17:34,180
basically do what does is supposed to do

00:17:31,570 --> 00:17:35,480
in in perl and i believe yeah in moves

00:17:34,180 --> 00:17:37,340
we do the same

00:17:35,480 --> 00:17:39,980
and that'll just basically if given a

00:17:37,340 --> 00:17:43,820
role it will determine whether your

00:17:39,980 --> 00:17:45,890
class does that role and again down on

00:17:43,820 --> 00:17:48,140
the bottom so it's our does and you just

00:17:45,890 --> 00:17:50,000
put that in there so it's very naturally

00:17:48,140 --> 00:17:51,770
pearl ish although a little old-school

00:17:50,000 --> 00:17:57,050
and ugly but you can always slap sugar

00:17:51,770 --> 00:18:00,260
on top of these things next concept is

00:17:57,050 --> 00:18:03,350
required methods or abstract methods if

00:18:00,260 --> 00:18:05,990
you want I realized at one point we have

00:18:03,350 --> 00:18:08,510
that feature already in Perl in sub pre

00:18:05,990 --> 00:18:09,950
declared subroutines they will die if

00:18:08,510 --> 00:18:12,140
you try and call them just like an

00:18:09,950 --> 00:18:14,420
abstract method would these are

00:18:12,140 --> 00:18:16,010
important component for roles when you

00:18:14,420 --> 00:18:18,350
when you create a role a lot of times

00:18:16,010 --> 00:18:19,970
you can't define all the methods and you

00:18:18,350 --> 00:18:23,030
need to leave a few methods undefined

00:18:19,970 --> 00:18:24,770
that the composing class will then make

00:18:23,030 --> 00:18:27,320
its own definition for and those are

00:18:24,770 --> 00:18:29,450
required methods so doing this is a lot

00:18:27,320 --> 00:18:31,220
cleaner and mousse we created this whole

00:18:29,450 --> 00:18:33,200
idea of a required method and all this

00:18:31,220 --> 00:18:34,370
big stuff and really it was there the

00:18:33,200 --> 00:18:36,860
whole time

00:18:34,370 --> 00:18:37,880
so the the first method they're required

00:18:36,860 --> 00:18:39,860
methods will give you the list of all

00:18:37,880 --> 00:18:42,440
required methods obviously required

00:18:39,860 --> 00:18:44,810
method you can ask do I require this

00:18:42,440 --> 00:18:47,450
method has required method add get and

00:18:44,810 --> 00:18:48,800
delete do the obvious with with the set

00:18:47,450 --> 00:18:51,680
of required methods each one taking a

00:18:48,800 --> 00:18:57,290
name I should have put the signatures

00:18:51,680 --> 00:18:59,090
here sorry so that's that next is slots

00:18:57,290 --> 00:19:02,480
and you'll begin to notice a pattern

00:18:59,090 --> 00:19:06,140
here that has ADD get delete pattern I

00:19:02,480 --> 00:19:07,910
use a lot in there slots you can call

00:19:06,140 --> 00:19:09,980
all slots and you can get everything

00:19:07,910 --> 00:19:12,020
that is that is possibly going to be in

00:19:09,980 --> 00:19:14,810
your class that includes anything

00:19:12,020 --> 00:19:17,030
aliased from another package or defined

00:19:14,810 --> 00:19:18,950
in your package and then you can also

00:19:17,030 --> 00:19:20,330
look at just the just those that you've

00:19:18,950 --> 00:19:22,400
aliased and just those that you've

00:19:20,330 --> 00:19:24,740
defined that's where slots and alias

00:19:22,400 --> 00:19:26,150
slots can come in and then you can you

00:19:24,740 --> 00:19:30,260
go through the other methods if you want

00:19:26,150 --> 00:19:32,960
to fill around that stuff what I show

00:19:30,260 --> 00:19:35,180
down here below the hour has so this as

00:19:32,960 --> 00:19:36,650
I said before this would be a regular

00:19:35,180 --> 00:19:38,960
slot because it's defined within that

00:19:36,650 --> 00:19:40,520
package and we know it's good the alias

00:19:38,960 --> 00:19:42,290
slots would happen if you did something

00:19:40,520 --> 00:19:44,180
like this so if you're bringing in slots

00:19:42,290 --> 00:19:45,890
from another class you would just put

00:19:44,180 --> 00:19:48,540
them into your has variable that's how

00:19:45,890 --> 00:19:50,160
we do inheritance with this

00:19:48,540 --> 00:19:55,950
and those would be alias slots at that

00:19:50,160 --> 00:19:58,890
point methods similar model here all

00:19:55,950 --> 00:20:00,570
methods gives you all the methods the

00:19:58,890 --> 00:20:02,250
regular methods the alias methods and

00:20:00,570 --> 00:20:04,140
also the require no I'm sorry it doesn't

00:20:02,250 --> 00:20:06,120
give you the required methods just the

00:20:04,140 --> 00:20:07,310
regular methods in the alias methods and

00:20:06,120 --> 00:20:10,410
again those other things underneath

00:20:07,310 --> 00:20:11,580
doing the same so this this is an

00:20:10,410 --> 00:20:14,580
example of a regular method because you

00:20:11,580 --> 00:20:16,740
define it in your class no problem but

00:20:14,580 --> 00:20:18,510
an alias method would be something come

00:20:16,740 --> 00:20:20,640
again so into the slot something coming

00:20:18,510 --> 00:20:22,590
from another package so either as a

00:20:20,640 --> 00:20:24,630
product of role composition or a product

00:20:22,590 --> 00:20:28,830
of your own fiddling with this low-level

00:20:24,630 --> 00:20:30,810
mop right here okay I went through that

00:20:28,830 --> 00:20:34,620
fairly quick but I want to leave a lot

00:20:30,810 --> 00:20:37,520
of room for questions so yeah questions

00:20:34,620 --> 00:20:38,670
how much time do we have Andrew okay

00:20:37,520 --> 00:20:46,140
okay

00:20:38,670 --> 00:20:47,940
questions crap come on people it's a

00:20:46,140 --> 00:20:49,200
tricky one I'm having trouble trying to

00:20:47,940 --> 00:20:52,820
figure out how to describe this really

00:20:49,200 --> 00:20:52,820
well and how to explain it really well

00:20:56,480 --> 00:21:03,110
nope because pearl doesn't do that so

00:20:59,670 --> 00:21:03,110
again trying to keep it close to pearl

00:21:12,470 --> 00:21:20,460
it it's a DIY toolkit man no I I have

00:21:18,090 --> 00:21:22,139
another module called Moxie which which

00:21:20,460 --> 00:21:23,759
I've been working on I gave a talk at

00:21:22,139 --> 00:21:24,899
Yap see Russia this year about it

00:21:23,759 --> 00:21:26,730
there's actually a pretty decent

00:21:24,899 --> 00:21:30,149
recording of that floating around on

00:21:26,730 --> 00:21:32,600
some are you server use your own

00:21:30,149 --> 00:21:32,600
discretion

00:21:33,980 --> 00:21:38,159
yeah the Moxie talk is much more

00:21:36,299 --> 00:21:41,879
specific though the one the one in UFC

00:21:38,159 --> 00:21:44,190
Russia so the trick about Moxie is that

00:21:41,879 --> 00:21:46,169
it uses some really really like it

00:21:44,190 --> 00:21:48,210
pushes the boundaries really really far

00:21:46,169 --> 00:21:50,820
and I was really hoping for signatures

00:21:48,210 --> 00:21:53,309
to get more stabilized because Moxie

00:21:50,820 --> 00:21:55,080
depends upon that and signatures are

00:21:53,309 --> 00:21:57,899
looking to not be stabilized until like

00:21:55,080 --> 00:22:01,049
5:30 to meaning non-experimental until

00:21:57,899 --> 00:22:02,129
5:30 to so yeah I'm gonna gonna have to

00:22:01,049 --> 00:22:03,210
put it on the back burner for a little

00:22:02,129 --> 00:22:05,220
bit until I can figure some other stuff

00:22:03,210 --> 00:22:07,799
out but yes eventually yes there will be

00:22:05,220 --> 00:22:09,960
something else the the hope though is

00:22:07,799 --> 00:22:12,269
that yeah maybe somebody could rewrite

00:22:09,960 --> 00:22:15,360
some of mousse in this or perhaps Moe

00:22:12,269 --> 00:22:17,429
can use this and get them off and not

00:22:15,360 --> 00:22:20,190
have to do the upgrade to moose

00:22:17,429 --> 00:22:23,220
I've chatted a bit with Sebastian about

00:22:20,190 --> 00:22:25,139
mojolicious bass things like that so

00:22:23,220 --> 00:22:26,610
what I really like to do is have some

00:22:25,139 --> 00:22:28,429
have a layer that we can all a substrate

00:22:26,610 --> 00:22:32,190
that we can all built a build upon so

00:22:28,429 --> 00:22:34,830
eventually yes but okay somebody else

00:22:32,190 --> 00:22:41,909
there another hand come on people we got

00:22:34,830 --> 00:22:45,389
nine minutes sure sure

00:22:41,909 --> 00:22:48,119
so getting it into core requires oh oh

00:22:45,389 --> 00:22:50,519
sorry he asked about uh about getting

00:22:48,119 --> 00:22:54,019
this into core basically I have to buy

00:22:50,519 --> 00:22:56,460
Sawyer a bunch of vegan cupcakes I think

00:22:54,019 --> 00:22:57,629
no Sawyer is actually more interested in

00:22:56,460 --> 00:23:01,289
getting this in the core than I am right

00:22:57,629 --> 00:23:02,549
now I'm cautious and and he's he's like

00:23:01,289 --> 00:23:03,929
well no let's just get it in there and

00:23:02,549 --> 00:23:06,240
let's get started and good or at least

00:23:03,929 --> 00:23:08,759
start talking about it so I do plan at

00:23:06,240 --> 00:23:10,289
some point in the very near future to at

00:23:08,759 --> 00:23:14,610
least begin discussing some of this

00:23:10,289 --> 00:23:16,100
stuff with p5p folks we had ap five core

00:23:14,610 --> 00:23:18,460
hackathon

00:23:16,100 --> 00:23:22,100
we have him semi-regularly in Amsterdam

00:23:18,460 --> 00:23:24,500
booking my company sponsors them and

00:23:22,100 --> 00:23:30,250
I've sort of had some discussions with

00:23:24,500 --> 00:23:30,250
people about this at that point but it

00:23:30,550 --> 00:23:34,910
basically just requires convincing

00:23:32,480 --> 00:23:36,140
people and and then and then going

00:23:34,910 --> 00:23:38,300
through discussion then you get into

00:23:36,140 --> 00:23:40,040
naming issues and things like that so

00:23:38,300 --> 00:23:40,940
that's it's sort of why I'm a little bit

00:23:40,040 --> 00:23:43,730
hesitant because I want to make sure

00:23:40,940 --> 00:23:48,680
that I feel strongly enough about these

00:23:43,730 --> 00:23:50,390
to be able to argue against them that

00:23:48,680 --> 00:23:53,240
would be the thought yes unless somebody

00:23:50,390 --> 00:23:58,280
with far greater sea skills than I wants

00:23:53,240 --> 00:24:01,070
to port it all to to excess or or to sea

00:23:58,280 --> 00:24:02,420
level stuff I do have some possible

00:24:01,070 --> 00:24:07,910
candidates who might do that I just have

00:24:02,420 --> 00:24:10,550
to convince them but yeah it's it it's a

00:24:07,910 --> 00:24:14,450
many step process it does itself right

00:24:10,550 --> 00:24:18,560
now depend upon modules that eventually

00:24:14,450 --> 00:24:21,500
should be written as core elements so

00:24:18,560 --> 00:24:24,380
things like develop destruction davell

00:24:21,500 --> 00:24:25,880
overload info a couple of those modules

00:24:24,380 --> 00:24:26,660
which really at some point should just

00:24:25,880 --> 00:24:32,410
be part of the core

00:24:26,660 --> 00:24:32,410
so I it'll take a little while

00:24:38,210 --> 00:24:50,540
Oh oh no no

00:24:46,850 --> 00:24:53,300
when I say lazy I mean you yeah the mop

00:24:50,540 --> 00:24:57,140
itself is lazy so when you when you

00:24:53,300 --> 00:24:59,150
create an instance of a mop class it

00:24:57,140 --> 00:25:03,280
doesn't create instances of all the

00:24:59,150 --> 00:25:03,280
methods that are inside of it beforehand

00:25:09,340 --> 00:25:13,490
nope that that well I have examples of

00:25:13,250 --> 00:25:15,860
it

00:25:13,490 --> 00:25:24,350
it's it requires tie and stuff like that

00:25:15,860 --> 00:25:25,910
to do it yes sorry man so the one of one

00:25:24,350 --> 00:25:29,690
of the one of the things about most was

00:25:25,910 --> 00:25:31,820
that Moses attributes encapsulated both

00:25:29,690 --> 00:25:33,500
the idea of the slot meaning the the

00:25:31,820 --> 00:25:36,500
value that's stored inside your instance

00:25:33,500 --> 00:25:38,600
and and all these methods so accessor

00:25:36,500 --> 00:25:41,240
methods or clear methods or predicate

00:25:38,600 --> 00:25:43,280
methods or other things like that that

00:25:41,240 --> 00:25:44,690
would be essentially from mousses point

00:25:43,280 --> 00:25:49,370
of view tightly coupled with the slot

00:25:44,690 --> 00:25:52,220
itself I don't do this in in in in the

00:25:49,370 --> 00:25:54,080
new mop at all the slots are slots and

00:25:52,220 --> 00:25:57,710
methods or methods they don't they don't

00:25:54,080 --> 00:25:59,450
really mix like that and so that makes

00:25:57,710 --> 00:26:03,230
it a little bit trickier because a lazy

00:25:59,450 --> 00:26:04,730
thing needs a method to initialize it so

00:26:03,230 --> 00:26:07,640
I don't know if it really would ever fit

00:26:04,730 --> 00:26:10,040
in to inside here but I mean it can be

00:26:07,640 --> 00:26:11,900
accomplished in other ways and again

00:26:10,040 --> 00:26:14,000
this is meant for you to build something

00:26:11,900 --> 00:26:17,500
on top of don't use this straight it's

00:26:14,000 --> 00:26:17,500
it's not not good that way

00:26:29,530 --> 00:26:36,530
yeah actually I don't I don't know what

00:26:33,710 --> 00:26:43,250
the code count I mean I can see if I can

00:26:36,530 --> 00:26:48,830
show you have it open yeah so it's not

00:26:43,250 --> 00:26:51,590
that much so like yeah that's the

00:26:48,830 --> 00:26:55,010
entirety of so 81 lines for the the

00:26:51,590 --> 00:26:58,809
attribute initializer is only fifty four

00:26:55,010 --> 00:27:03,100
lines class is only fifty three lines

00:26:58,809 --> 00:27:05,380
method gonna get a little bit more 117

00:27:03,100 --> 00:27:09,200
role is the big one

00:27:05,380 --> 00:27:12,790
but still seven

00:27:09,200 --> 00:27:14,900
I need my reading glasses though 798

00:27:12,790 --> 00:27:19,040
slot is quite small

00:27:14,900 --> 00:27:20,720
87 the util package is not that bad this

00:27:19,040 --> 00:27:22,160
is where it gets ugly the internal

00:27:20,720 --> 00:27:23,990
utilities this is all the stuff that

00:27:22,160 --> 00:27:27,550
probably should be written in excess so

00:27:23,990 --> 00:27:31,130
this one gets a little longer 400 so

00:27:27,550 --> 00:27:34,940
2,000 lines maybe in total so it's it's

00:27:31,130 --> 00:27:35,960
significantly smaller and yeah part of

00:27:34,940 --> 00:27:39,559
this comes from the back to just didn't

00:27:35,960 --> 00:27:41,809
have to invent all this new stuff on top

00:27:39,559 --> 00:27:47,050
of it so so yes it is it is summer and

00:27:41,809 --> 00:27:47,050
the test suite runs a lot faster yes

00:27:49,639 --> 00:27:53,969
uh-hmm

00:27:50,879 --> 00:27:57,059
how can you help that's a good question

00:27:53,969 --> 00:27:58,830
yeah so so you can use it maybe two if

00:27:57,059 --> 00:28:00,779
you have an introspection or reflection

00:27:58,830 --> 00:28:02,820
need in your codebase and you'd like to

00:28:00,779 --> 00:28:05,519
to introspect your classes or something

00:28:02,820 --> 00:28:08,190
like that try and use it see what

00:28:05,519 --> 00:28:11,339
happens see what breaks it should be

00:28:08,190 --> 00:28:13,379
five eight well no sorry it's five ten

00:28:11,339 --> 00:28:15,659
compatible so it should go back part

00:28:13,379 --> 00:28:18,119
fairly far and yeah just let me know how

00:28:15,659 --> 00:28:19,649
it works if you are interested in

00:28:18,119 --> 00:28:21,330
building your own moose alike or

00:28:19,649 --> 00:28:22,889
something like that on top or you have

00:28:21,330 --> 00:28:25,200
an entirely better idea of how to do

00:28:22,889 --> 00:28:29,279
that stuff try using this as the base

00:28:25,200 --> 00:28:31,139
for it also you can try convincing like

00:28:29,279 --> 00:28:34,589
people like Sebastian to switch it to

00:28:31,139 --> 00:28:36,899
moto mojo bass or or gram not for remove

00:28:34,589 --> 00:28:43,109
or something like that some okay cool we

00:28:36,899 --> 00:28:47,519
are down to one minute but you were okay

00:28:43,109 --> 00:28:50,609
alright cool then what's up

00:28:47,519 --> 00:28:54,570
mrl I think is the reason for that I

00:28:50,609 --> 00:28:56,309
don't remember exactly yeah I think I

00:28:54,570 --> 00:28:58,769
think it's because uh oh yes yes because

00:28:56,309 --> 00:28:59,999
I need I need MRO and and there was one

00:28:58,769 --> 00:29:03,239
or two other things that basically

00:28:59,999 --> 00:29:07,229
pushed it to five ten if you want five

00:29:03,239 --> 00:29:09,239
eight combat we can talk okay Dan needs

00:29:07,229 --> 00:29:11,339
the ballroom so I guess that's about it

00:29:09,239 --> 00:29:12,719
if you have any other questions or

00:29:11,339 --> 00:29:15,979
whatever feel free to grab me out there

00:29:12,719 --> 00:29:15,979
okay thank you

00:29:16,310 --> 00:29:19,720

YouTube URL: https://www.youtube.com/watch?v=ugEry1UWg84


