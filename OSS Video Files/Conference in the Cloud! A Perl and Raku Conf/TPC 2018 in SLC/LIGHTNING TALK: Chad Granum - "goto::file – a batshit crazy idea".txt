Title: LIGHTNING TALK: Chad Granum - "goto::file â€“ a batshit crazy idea"
Publication date: 2018-06-20
Playlist: TPC 2018 in SLC
Description: 
	
Captions: 
	00:00:00,030 --> 00:00:05,759
hey everyone I'm Chad Grantham I'm gonna

00:00:02,850 --> 00:00:08,880
present to you a really awful badge the

00:00:05,759 --> 00:00:11,730
batshit idea and most of you are gonna

00:00:08,880 --> 00:00:14,040
be cringing by the end of this so what

00:00:11,730 --> 00:00:15,809
is go to file go to file is a module

00:00:14,040 --> 00:00:17,520
that X as a compile-time directive to

00:00:15,809 --> 00:00:20,779
stop parsing or processing the current

00:00:17,520 --> 00:00:25,350
file and switch to another one instead

00:00:20,779 --> 00:00:28,500
as you can see here so how the hell is

00:00:25,350 --> 00:00:31,080
this useful usually it's not but there

00:00:28,500 --> 00:00:32,880
are times where it is go to file is used

00:00:31,080 --> 00:00:35,370
by test to harness which I'm presenting

00:00:32,880 --> 00:00:37,260
on tomorrow when it runs tests in pre

00:00:35,370 --> 00:00:38,760
load mode see a lot of people test their

00:00:37,260 --> 00:00:40,590
exceptions are their warnings which

00:00:38,760 --> 00:00:42,510
means checking the stacktrace to make

00:00:40,590 --> 00:00:44,820
sure that it's just right so if he used

00:00:42,510 --> 00:00:46,590
do or require to jump to your test file

00:00:44,820 --> 00:00:48,300
after having pre-loaded modules you've

00:00:46,590 --> 00:00:52,260
got an extra stack frame and you break a

00:00:48,300 --> 00:00:56,000
very large number of tests so we as a go

00:00:52,260 --> 00:00:58,170
to file to flip out the current stack

00:00:56,000 --> 00:01:00,059
frame just like you would with the

00:00:58,170 --> 00:01:03,840
special form of goto to jump into a sub

00:01:00,059 --> 00:01:07,680
it's tail and recursion for files how

00:01:03,840 --> 00:01:09,299
does this work use statement use

00:01:07,680 --> 00:01:10,770
statements are begin blocks so they

00:01:09,299 --> 00:01:13,860
execute before additional lines are

00:01:10,770 --> 00:01:16,049
parsed go to file at it's import in

00:01:13,860 --> 00:01:18,060
sorts a source filter yes

00:01:16,049 --> 00:01:19,830
source filters are evil but that's

00:01:18,060 --> 00:01:21,509
because they try to rewrite Perl

00:01:19,830 --> 00:01:23,520
we're not rewriting anything we're just

00:01:21,509 --> 00:01:24,210
throwing away some Perl I'm putting in

00:01:23,520 --> 00:01:26,600
other Perl

00:01:24,210 --> 00:01:29,430
we are not rewriting it

00:01:26,600 --> 00:01:31,560
things to consider the idea is pretty

00:01:29,430 --> 00:01:34,500
simple but the implementation requires

00:01:31,560 --> 00:01:35,820
magic and a lot of it's black magic so

00:01:34,500 --> 00:01:37,500
I'm gonna take a couple slides to

00:01:35,820 --> 00:01:39,750
explain the bits and pieces that lead

00:01:37,500 --> 00:01:44,010
into the working product first off

00:01:39,750 --> 00:01:46,170
forking in a begin block when you fork

00:01:44,010 --> 00:01:47,340
your file handers are shared the file

00:01:46,170 --> 00:01:50,280
handles are shared between both

00:01:47,340 --> 00:01:52,620
processes in a begin block this includes

00:01:50,280 --> 00:01:55,650
the file handle being used to read the

00:01:52,620 --> 00:01:57,660
current file so in this example here we

00:01:55,650 --> 00:02:00,060
fork in a begin and we will see that

00:01:57,660 --> 00:02:02,940
that line number two is only seen by one

00:02:00,060 --> 00:02:04,890
of the two processes the other process

00:02:02,940 --> 00:02:06,750
the file handles already passed it I

00:02:04,890 --> 00:02:11,100
reported this as a bug and it was closed

00:02:06,750 --> 00:02:12,540
as not a bug file and line number if you

00:02:11,100 --> 00:02:14,580
simply jump to another file

00:02:12,540 --> 00:02:16,110
Perls gonna think or you know if you

00:02:14,580 --> 00:02:17,459
just bring in the code from another file

00:02:16,110 --> 00:02:18,990
perl is gonna think you're still in the

00:02:17,459 --> 00:02:20,970
original file and the original line

00:02:18,990 --> 00:02:23,130
number but thankfully we've got compiler

00:02:20,970 --> 00:02:24,959
directives that let you change the line

00:02:23,130 --> 00:02:26,940
and file on-the-fly

00:02:24,959 --> 00:02:29,010
so with this example we can see it

00:02:26,940 --> 00:02:33,030
thinks it died it left the universe and

00:02:29,010 --> 00:02:34,620
everything line 42 where's my data so a

00:02:33,030 --> 00:02:36,540
lot of people don't realize the data

00:02:34,620 --> 00:02:39,989
file handle you get to read with at the

00:02:36,540 --> 00:02:41,550
end of your script it's just a regular

00:02:39,989 --> 00:02:43,830
file handle you can open and close it

00:02:41,550 --> 00:02:45,660
just like any other file handle it also

00:02:43,830 --> 00:02:48,150
happens to be the exact same file handle

00:02:45,660 --> 00:02:50,910
that was used to parse the file fast

00:02:48,150 --> 00:02:52,380
forwarded to when it was done parsing so

00:02:50,910 --> 00:02:54,750
in this example I'm closing data

00:02:52,380 --> 00:02:59,060
reopening it to the file again and it

00:02:54,750 --> 00:02:59,060
reads the first line instead of the last

00:02:59,180 --> 00:03:04,739
line noise Perl does some really strange

00:03:02,190 --> 00:03:07,920
things I think we can all agree one if

00:03:04,739 --> 00:03:09,900
you were to read from a file and a begin

00:03:07,920 --> 00:03:12,750
block and then die outside of that begin

00:03:09,900 --> 00:03:15,750
block Perl is gonna tack on what you see

00:03:12,750 --> 00:03:17,459
right here until your exception once

00:03:15,750 --> 00:03:19,040
again this can break some tests

00:03:17,459 --> 00:03:22,019
especially the ones that test exceptions

00:03:19,040 --> 00:03:23,850
thankfully I think it provides the

00:03:22,019 --> 00:03:26,070
dollar dot variable and if you localize

00:03:23,850 --> 00:03:28,260
that before reading the file then this

00:03:26,070 --> 00:03:30,570
doesn't happen because dollar dot is

00:03:28,260 --> 00:03:33,239
pearls idea of what the last file handle

00:03:30,570 --> 00:03:36,240
red was in what line number it's on so

00:03:33,239 --> 00:03:37,980
we can get rid of that noise making a

00:03:36,240 --> 00:03:39,660
module do stuff when loaded I don't

00:03:37,980 --> 00:03:41,220
think I need to explain import

00:03:39,660 --> 00:03:44,580
most of you here so I'm just gonna blast

00:03:41,220 --> 00:03:46,620
right through this slide so now I'm

00:03:44,580 --> 00:03:48,270
going to show you the source code for

00:03:46,620 --> 00:03:52,200
goto file this is the first of two

00:03:48,270 --> 00:03:54,960
slides that show the source so we import

00:03:52,200 --> 00:03:57,000
with a file name we got an ID so that we

00:03:54,960 --> 00:03:59,070
can look up this specific change later

00:03:57,000 --> 00:04:00,990
we open a file handle to the new file

00:03:59,070 --> 00:04:03,180
and we stash it away for later look up

00:04:00,990 --> 00:04:04,830
under that ID then we've got some lines

00:04:03,180 --> 00:04:06,900
that we need to inject before we

00:04:04,830 --> 00:04:08,370
actually read in the new file setting it

00:04:06,900 --> 00:04:10,320
to package main because that's what

00:04:08,370 --> 00:04:12,840
everything expects closing the data file

00:04:10,320 --> 00:04:14,880
handle reopening the data file handle to

00:04:12,840 --> 00:04:17,520
our ID that we've conveniently stored

00:04:14,880 --> 00:04:20,640
and setting the line and file name and

00:04:17,520 --> 00:04:22,080
then we you bless this as an object to

00:04:20,640 --> 00:04:24,420
look up stuff later because we need all

00:04:22,080 --> 00:04:28,830
these variables and we use filter util

00:04:24,420 --> 00:04:31,190
call filter add to add the filter so

00:04:28,830 --> 00:04:33,210
here's what our filter looks like first

00:04:31,190 --> 00:04:35,160
if we haven't already done

00:04:33,210 --> 00:04:37,290
initialization we need to call filter

00:04:35,160 --> 00:04:38,880
read to get all the lines off the of the

00:04:37,290 --> 00:04:39,270
original file out of way just make them

00:04:38,880 --> 00:04:41,160
go away

00:04:39,270 --> 00:04:42,330
then we set dollar underscore to nothing

00:04:41,160 --> 00:04:44,910
because filter read would have put all

00:04:42,330 --> 00:04:47,130
that garbage in there then I'm each call

00:04:44,910 --> 00:04:48,180
to filter we localized all our dots so

00:04:47,130 --> 00:04:50,610
that we don't screw up any ones

00:04:48,180 --> 00:04:51,960
exceptions get the file handle we read

00:04:50,610 --> 00:04:53,820
the next line from the file handle

00:04:51,960 --> 00:04:57,000
unless there's lines that we need to

00:04:53,820 --> 00:04:58,770
inject it does those first and then it

00:04:57,000 --> 00:05:00,419
will return zero if no lines define

00:04:58,770 --> 00:05:01,710
because that's how filter works if there

00:05:00,419 --> 00:05:04,050
was a line it offends it two dollar

00:05:01,710 --> 00:05:07,230
underscore and then returns and suddenly

00:05:04,050 --> 00:05:09,870
Perl is not only parsing and running the

00:05:07,230 --> 00:05:13,820
new file it knows that it is in the new

00:05:09,870 --> 00:05:13,820

YouTube URL: https://www.youtube.com/watch?v=LoZFP_e27mk


