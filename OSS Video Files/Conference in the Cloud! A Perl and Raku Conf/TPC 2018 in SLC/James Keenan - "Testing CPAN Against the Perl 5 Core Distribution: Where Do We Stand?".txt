Title: James Keenan - "Testing CPAN Against the Perl 5 Core Distribution: Where Do We Stand?"
Publication date: 2018-06-19
Playlist: TPC 2018 in SLC
Description: 
	As Perl 5 continues to evolve, how do we measure its impact on 30,000+ libraries on CPAN?
Captions: 
	00:00:00,350 --> 00:00:06,240
good afternoon my name is Jim Keenan and

00:00:03,929 --> 00:00:08,340
this presentation is called testing

00:00:06,240 --> 00:00:13,170
Sipan against the Perl 5 core

00:00:08,340 --> 00:00:15,210
distribution where do we stand at last

00:00:13,170 --> 00:00:17,699
year's Perl conference in Alexandria

00:00:15,210 --> 00:00:21,210
Virginia I gave a presentation entitled

00:00:17,699 --> 00:00:24,330
how do we assess and maintain the health

00:00:21,210 --> 00:00:27,090
of the Perl 5 code base I spoke about

00:00:24,330 --> 00:00:30,689
five different stages of testing the

00:00:27,090 --> 00:00:33,120
Perl 5 core distribution tests run by

00:00:30,689 --> 00:00:36,329
individual contributors by people who

00:00:33,120 --> 00:00:39,960
commit to the core distribution smoke

00:00:36,329 --> 00:00:42,739
testing of Perl 5 against a wide variety

00:00:39,960 --> 00:00:47,399
of operating systems and platforms

00:00:42,739 --> 00:00:49,379
testing against Sipan modules and what I

00:00:47,399 --> 00:00:52,320
call outer world testing which is the

00:00:49,379 --> 00:00:54,930
testing of Perl 5 as it's used in

00:00:52,320 --> 00:00:58,140
downstream distributions such as Debian

00:00:54,930 --> 00:01:00,629
Linux distribution today's talk is a

00:00:58,140 --> 00:01:04,379
follow up to last year's but today I'm

00:01:00,629 --> 00:01:06,750
only going to focus on one stage testing

00:01:04,379 --> 00:01:11,760
CPN modules against the core

00:01:06,750 --> 00:01:14,180
distribution some terminology first the

00:01:11,760 --> 00:01:17,369
main development branch in the Perl 5

00:01:14,180 --> 00:01:21,600
repository is called bleed spelled ble

00:01:17,369 --> 00:01:23,640
ad pronounced bleed if we suspect that a

00:01:21,600 --> 00:01:26,670
commit to bleed has caused a problem

00:01:23,640 --> 00:01:30,200
with a Sipan distribution we call that

00:01:26,670 --> 00:01:36,299
situation a possible bleed breaks Sipan

00:01:30,200 --> 00:01:38,430
situation or BBC for short bleed again

00:01:36,299 --> 00:01:41,250
that's the massive development well what

00:01:38,430 --> 00:01:43,799
we want to know is if we make a commit

00:01:41,250 --> 00:01:47,780
to bleed and we have a CPM distribution

00:01:43,799 --> 00:01:51,899
which previously passed all its tests

00:01:47,780 --> 00:01:56,280
does but now that distribution fails to

00:01:51,899 --> 00:01:59,909
configure build test or install against

00:01:56,280 --> 00:02:02,040
the perl 5 bleed is what is there due to

00:01:59,909 --> 00:02:06,590
well the first thing we do is we file a

00:02:02,040 --> 00:02:10,050
bug ticket in our buck you at rtcp org

00:02:06,590 --> 00:02:13,650
then we have to triage to determine the

00:02:10,050 --> 00:02:16,830
cause of the failure was it because the

00:02:13,650 --> 00:02:18,569
we actually committed a defect to bleed

00:02:16,830 --> 00:02:22,260
to the development branch of Perl five

00:02:18,569 --> 00:02:25,950
and that that defect caused a failure in

00:02:22,260 --> 00:02:29,549
a CPN module or perhaps there was a

00:02:25,950 --> 00:02:33,720
defect in the c-pen module some sub

00:02:29,549 --> 00:02:37,290
optimal code that previously worked but

00:02:33,720 --> 00:02:42,360
which was exposed as defective by a

00:02:37,290 --> 00:02:46,530
change to bleed or more likely some

00:02:42,360 --> 00:02:51,000
combination of the above well if the

00:02:46,530 --> 00:02:54,030
defect is in whole or in part in the

00:02:51,000 --> 00:02:56,819
Perl 5 core distribution in bleed then

00:02:54,030 --> 00:02:59,930
that bug ticket becomes a blocker for

00:02:56,819 --> 00:03:02,069
the next production release of Perl 5

00:02:59,930 --> 00:03:05,280
now I want to stress that we strive for

00:03:02,069 --> 00:03:08,099
backwards compatibility but sometimes we

00:03:05,280 --> 00:03:09,720
have to break things most importantly we

00:03:08,099 --> 00:03:15,510
have to break things if we have to do a

00:03:09,720 --> 00:03:17,849
security fix but sometimes we need to we

00:03:15,510 --> 00:03:20,340
want to continue the evolution of the

00:03:17,849 --> 00:03:22,160
Perl 5 language we want to enable their

00:03:20,340 --> 00:03:24,810
continued growth and that requires

00:03:22,160 --> 00:03:28,200
getting rid of some existing

00:03:24,810 --> 00:03:30,959
functionality we understand that a

00:03:28,200 --> 00:03:33,540
breaking change would disrupt Perl used

00:03:30,959 --> 00:03:36,750
in production what we you'll sometimes

00:03:33,540 --> 00:03:39,900
hear refer to as the dark pan that is

00:03:36,750 --> 00:03:41,340
all the c-pen code that all the proko

00:03:39,900 --> 00:03:44,010
that's in production all around the

00:03:41,340 --> 00:03:46,949
world we don't have access to the dark

00:03:44,010 --> 00:03:52,260
pan so what we do is we use C pan as a

00:03:46,949 --> 00:03:56,489
proxy as a testbed for all the Perl 5

00:03:52,260 --> 00:04:00,480
code in the world so now we have to ask

00:03:56,489 --> 00:04:05,810
ourselves how well do we currently test

00:04:00,480 --> 00:04:10,109
bleed against C pan the answer is not

00:04:05,810 --> 00:04:14,639
systematically enough and what we have

00:04:10,109 --> 00:04:17,639
is a side-effect of heavy duty automated

00:04:14,639 --> 00:04:21,599
C pen testing mostly of new uploads to

00:04:17,639 --> 00:04:23,940
Sipan so C pen testers that CPN testing

00:04:21,599 --> 00:04:26,550
projects has been around for probably 20

00:04:23,940 --> 00:04:30,240
years now and there are certain

00:04:26,550 --> 00:04:32,639
tributes who run tests of Sipan modules

00:04:30,240 --> 00:04:36,419
on a massive scale I particularly like

00:04:32,639 --> 00:04:40,800
to cite Andre Ã¶zkaynak the one of the

00:04:36,419 --> 00:04:43,530
founders of Sipan Slav and Rezac Chris

00:04:40,800 --> 00:04:46,169
Williams and I'd also like to give a

00:04:43,530 --> 00:04:49,199
shout out to Carlos Guevara a newcomer

00:04:46,169 --> 00:04:52,740
he saw a video of my talk last year and

00:04:49,199 --> 00:04:55,110
was inspired to set up C pan Perl 5

00:04:52,740 --> 00:04:57,270
smoke testers and see pen testers and

00:04:55,110 --> 00:05:00,870
he's doing that on lots of different

00:04:57,270 --> 00:05:04,740
operating systems so the people who are

00:05:00,870 --> 00:05:06,690
heavy-duty C pen testers tend to test C

00:05:04,740 --> 00:05:09,020
pant distributions against multiple

00:05:06,690 --> 00:05:15,240
versions of Perl going back as far as

00:05:09,020 --> 00:05:17,400
5.8 in 2002 and they also tend to test c

00:05:15,240 --> 00:05:21,930
pn modules against our monthly

00:05:17,400 --> 00:05:24,900
development releases of Perl of 5.2 7.0

00:05:21,930 --> 00:05:27,469
dot one and so forth sometimes they even

00:05:24,900 --> 00:05:30,180
test against specific commits to bleed

00:05:27,469 --> 00:05:33,210
so if you do this on a massive scale

00:05:30,180 --> 00:05:36,210
you're going to find some c pn modules

00:05:33,210 --> 00:05:38,190
that break when tested against say the

00:05:36,210 --> 00:05:42,210
latest monthly development release of

00:05:38,190 --> 00:05:44,250
Perl 5 well the people who do this they

00:05:42,210 --> 00:05:47,340
have all this data but they have to

00:05:44,250 --> 00:05:50,639
scour all the data which is recorded on

00:05:47,340 --> 00:05:55,590
C pentesters org for reports that are

00:05:50,639 --> 00:05:58,860
classified as fail right then the tester

00:05:55,590 --> 00:06:03,150
has to estimate is the problem in Perl 5

00:05:58,860 --> 00:06:06,750
bleed is it in C pan or is it in some

00:06:03,150 --> 00:06:09,090
mix of the two in the Perl 5 quart

00:06:06,750 --> 00:06:12,060
distribution we have a very interesting

00:06:09,090 --> 00:06:14,819
program porting by sector PL it's a

00:06:12,060 --> 00:06:17,360
wrapper around git bisect on steroids

00:06:14,819 --> 00:06:20,400
and we can use this to identify

00:06:17,360 --> 00:06:23,659
particular commits to the core

00:06:20,400 --> 00:06:26,340
distribution which broke Sipan modules

00:06:23,659 --> 00:06:29,400
this program is effective but it's very

00:06:26,340 --> 00:06:33,029
time consuming even if we have that data

00:06:29,400 --> 00:06:36,120
however the tester must file a perl bug

00:06:33,029 --> 00:06:38,759
ticket like the one I showed earlier the

00:06:36,120 --> 00:06:39,750
Profi porter's then have to discuss the

00:06:38,759 --> 00:06:43,790
bug ticket

00:06:39,750 --> 00:06:46,170
that discussion can be controversial and

00:06:43,790 --> 00:06:49,950
subsequently other distributions which

00:06:46,170 --> 00:06:52,320
we learn have that have been broken at

00:06:49,950 --> 00:06:58,110
the same commit to purified lead have to

00:06:52,320 --> 00:07:00,960
be added to the original bug ticket this

00:06:58,110 --> 00:07:02,550
approach has a number of limitations as

00:07:00,960 --> 00:07:05,580
you're probably already thinking

00:07:02,550 --> 00:07:08,600
it requires deeply committed Sipan

00:07:05,580 --> 00:07:12,960
testers to test modules and to maintain

00:07:08,600 --> 00:07:15,150
the testing infrastructure itself it

00:07:12,960 --> 00:07:18,260
means that we're dependent upon Sipan

00:07:15,150 --> 00:07:21,180
tester ORS or operational status

00:07:18,260 --> 00:07:23,820
particularly since the last Perl

00:07:21,180 --> 00:07:25,950
toolchain summit which is held in Oslo

00:07:23,820 --> 00:07:28,440
in April this year see pen testers at

00:07:25,950 --> 00:07:31,410
org has been functioning very well in my

00:07:28,440 --> 00:07:32,970
opinion but in at many points in the

00:07:31,410 --> 00:07:35,669
previous two years it was having

00:07:32,970 --> 00:07:38,940
technical difficulties and reports of

00:07:35,669 --> 00:07:43,430
failures might not be available for 2 to

00:07:38,940 --> 00:07:46,740
13 days after their initial filing so

00:07:43,430 --> 00:07:49,260
even if CPN testers at org is working at

00:07:46,740 --> 00:07:53,810
its optimum it can be difficult to

00:07:49,260 --> 00:07:57,090
search CPM testers at org 4 fails and

00:07:53,810 --> 00:08:00,510
once those failures are listed in a

00:07:57,090 --> 00:08:03,000
profile orders bug ticket you have to

00:08:00,510 --> 00:08:04,740
scroll through the entire ticket to find

00:08:03,000 --> 00:08:06,840
out all the distributions that are

00:08:04,740 --> 00:08:10,010
alleged to have broken due to a

00:08:06,840 --> 00:08:13,890
particular commit in perl 5 bleah

00:08:10,010 --> 00:08:16,560
finally someone some human has to

00:08:13,890 --> 00:08:21,180
manually record when those distributions

00:08:16,560 --> 00:08:23,460
start to pass again well all those are

00:08:21,180 --> 00:08:25,229
problems but there's another problem

00:08:23,460 --> 00:08:28,260
that particularly bothered me over the

00:08:25,229 --> 00:08:31,830
past year and that is that we have no

00:08:28,260 --> 00:08:34,580
way to measure our progress over time we

00:08:31,830 --> 00:08:37,530
we being the Profi porters in this case

00:08:34,580 --> 00:08:40,560
we have no way to measure how does the

00:08:37,530 --> 00:08:43,110
number of currently broken CPM

00:08:40,560 --> 00:08:47,670
distributions compared to say last month

00:08:43,110 --> 00:08:50,130
in the same annual development cycle how

00:08:47,670 --> 00:08:50,940
does it compare to the same time last

00:08:50,130 --> 00:08:52,500
year

00:08:50,940 --> 00:08:55,440
in the previous

00:08:52,500 --> 00:08:57,960
development cycle we can't answer that

00:08:55,440 --> 00:08:58,470
question and if we can't answer that

00:08:57,960 --> 00:09:01,500
question

00:08:58,470 --> 00:09:04,590
that limits our ability to hold profile

00:09:01,500 --> 00:09:07,110
committers it limits their their ability

00:09:04,590 --> 00:09:09,570
to anticipate possible breakage and

00:09:07,110 --> 00:09:12,690
Sipan when a commit is made to the

00:09:09,570 --> 00:09:15,600
development branch of Perl and it also

00:09:12,690 --> 00:09:18,840
limits Perl 5 Porter's ability to hold

00:09:15,600 --> 00:09:22,800
ourselves the committers accountable for

00:09:18,840 --> 00:09:25,950
Sipan breakage so we have multiple

00:09:22,800 --> 00:09:28,950
problems and in my opinion we need

00:09:25,950 --> 00:09:31,440
multiple solutions no one solution will

00:09:28,950 --> 00:09:34,650
address all these limitations but any

00:09:31,440 --> 00:09:39,110
proposed solution should address some of

00:09:34,650 --> 00:09:42,150
them so what follows is my criteria for

00:09:39,110 --> 00:09:46,380
improving our testing against C pen and

00:09:42,150 --> 00:09:48,030
my solution well first of all I think

00:09:46,380 --> 00:09:50,250
that we should not depend upon C pen

00:09:48,030 --> 00:09:53,280
testers org as the source of test

00:09:50,250 --> 00:09:55,740
reports other people including other

00:09:53,280 --> 00:09:57,930
people sitting in this room will take

00:09:55,740 --> 00:10:01,200
different approaches and that's fine we

00:09:57,930 --> 00:10:05,850
just should not have invested 100

00:10:01,200 --> 00:10:08,010
percent of our focus on that website any

00:10:05,850 --> 00:10:10,920
solution should not require years of

00:10:08,010 --> 00:10:13,460
expertise to set up a run it should be

00:10:10,920 --> 00:10:19,830
runnable on multiple operating systems

00:10:13,460 --> 00:10:24,300
not just on Linux which is where 95% of

00:10:19,830 --> 00:10:26,880
our testing takes place if any solution

00:10:24,300 --> 00:10:30,360
should provide an overall snapshot of

00:10:26,880 --> 00:10:32,340
the impact of Perl 5 bleed on Sipan are

00:10:30,360 --> 00:10:37,320
we breaking a lot of Sipan modules or

00:10:32,340 --> 00:10:40,350
just a few that snapshot should be

00:10:37,320 --> 00:10:44,340
available within 24 hours of the release

00:10:40,350 --> 00:10:47,970
of a particular commit or of a monthly

00:10:44,340 --> 00:10:49,740
development release of Perl and it

00:10:47,970 --> 00:10:53,970
should be oriented towards the needs of

00:10:49,740 --> 00:10:57,570
the Perl 5 porters it should provide the

00:10:53,970 --> 00:11:00,840
porters with date with with data rapidly

00:10:57,570 --> 00:11:05,760
to determine did the did the last commit

00:11:00,840 --> 00:11:06,370
actually break Sipan so what I've

00:11:05,760 --> 00:11:09,190
developed

00:11:06,370 --> 00:11:11,470
over the past several months is a

00:11:09,190 --> 00:11:15,790
program that overall I will call test

00:11:11,470 --> 00:11:18,270
against dev it's runs once a month after

00:11:15,790 --> 00:11:20,529
each monthly development release against

00:11:18,270 --> 00:11:23,820
monthly development release appears on

00:11:20,529 --> 00:11:26,830
Sipan usually on the 20th of the month I

00:11:23,820 --> 00:11:28,990
have a cron job that listens for that

00:11:26,830 --> 00:11:34,600
monthly release and then kicks off a

00:11:28,990 --> 00:11:36,910
process now in principle we could do

00:11:34,600 --> 00:11:40,180
this on any given commit to bleed but I

00:11:36,910 --> 00:11:41,980
found that running against the monthly

00:11:40,180 --> 00:11:45,730
development release is easier to

00:11:41,980 --> 00:11:48,279
schedule and perhaps more important it

00:11:45,730 --> 00:11:52,900
provides a basis for easily understood

00:11:48,279 --> 00:11:54,490
time series data so what I do and I'll

00:11:52,900 --> 00:11:56,010
first describe the process in general

00:11:54,490 --> 00:11:58,450
terms and then I'll go into some

00:11:56,010 --> 00:12:02,350
specific CPM modules implementing

00:11:58,450 --> 00:12:05,500
implementing the process is I download

00:12:02,350 --> 00:12:09,880
the monthly dev release from CPM via FTP

00:12:05,500 --> 00:12:13,750
I build and install that Perl and then I

00:12:09,880 --> 00:12:17,650
install Miyagawa z-- c Panem or CPM -

00:12:13,750 --> 00:12:20,950
utility against that Perl and then I use

00:12:17,650 --> 00:12:24,870
that C pan and utility to install a

00:12:20,950 --> 00:12:29,350
selected subset of Sipan distributions

00:12:24,870 --> 00:12:33,370
against that Perl you may wonder which

00:12:29,350 --> 00:12:36,850
subset we'll get to that in a minute now

00:12:33,370 --> 00:12:40,150
when when you use C Panem it creates a

00:12:36,850 --> 00:12:42,400
file of generally speaking underneath

00:12:40,150 --> 00:12:45,970
your home directory called build that

00:12:42,400 --> 00:12:49,570
log and the tests get against dev

00:12:45,970 --> 00:12:52,570
process parses that log it creates a

00:12:49,570 --> 00:12:54,910
little JSON file for each of the modules

00:12:52,570 --> 00:12:59,770
that you attempted to install in that

00:12:54,910 --> 00:13:03,610
run of CPM and then it analyzes that

00:12:59,770 --> 00:13:06,700
JSON and creates pipe separated values

00:13:03,610 --> 00:13:08,350
files dot PSD files and those are

00:13:06,700 --> 00:13:11,500
suitable for open for opening in

00:13:08,350 --> 00:13:15,010
spreadsheets such as Libre LibreOffice

00:13:11,500 --> 00:13:18,430
and with a bit more difficulty in who is

00:13:15,010 --> 00:13:23,300
that Microsoft spreadsheet program Excel

00:13:18,430 --> 00:13:25,010
okay and then the then we aggregate the

00:13:23,300 --> 00:13:26,600
results for a given month with the

00:13:25,010 --> 00:13:29,710
results from the previous month so we

00:13:26,600 --> 00:13:34,010
have a time series of data for a given

00:13:29,710 --> 00:13:35,780
Perl 5 annual development cycle I look

00:13:34,010 --> 00:13:38,540
at the data and then I've been manually

00:13:35,780 --> 00:13:42,470
posting a little report on that data to

00:13:38,540 --> 00:13:44,690
the pro 5 porters mailing list to

00:13:42,470 --> 00:13:47,240
implement this I created several CPM

00:13:44,690 --> 00:13:51,220
modules the overall wrapper is called

00:13:47,240 --> 00:13:53,750
test against dev what it wraps around

00:13:51,220 --> 00:13:57,530
first of all is a module called pearl

00:13:53,750 --> 00:14:01,520
download FTP that it's name pretty much

00:13:57,530 --> 00:14:04,310
describes what it does and then I have

00:14:01,520 --> 00:14:07,100
another module called take a breath

00:14:04,310 --> 00:14:09,650
before you say this Sipan Sipan -

00:14:07,100 --> 00:14:12,770
reporter retain reports now why that

00:14:09,650 --> 00:14:16,750
long name well because we're using

00:14:12,770 --> 00:14:21,140
miyagawa x' Sipan - CPM for short

00:14:16,750 --> 00:14:26,470
utility and then brain-o de oliveira

00:14:21,140 --> 00:14:31,400
known to us as garu on IRC has written a

00:14:26,470 --> 00:14:34,700
program on old app CPM - reporter that

00:14:31,400 --> 00:14:37,520
parses the CPM bill log and then shoots

00:14:34,700 --> 00:14:41,180
off a report to the per through the see

00:14:37,520 --> 00:14:42,920
pentesters database and that becomes the

00:14:41,180 --> 00:14:45,980
basis of something that appears on CPN

00:14:42,920 --> 00:14:48,800
testers at Ord this is very similar to

00:14:45,980 --> 00:14:51,560
the module CP and reporter which you use

00:14:48,800 --> 00:14:56,780
with ondrea's Kandak and bra and Bryan

00:14:51,560 --> 00:14:59,750
voice Sipan utility so the problem with

00:14:56,780 --> 00:15:02,390
those is they if you're using if you

00:14:59,750 --> 00:15:05,150
have a high-volume tester using them

00:15:02,390 --> 00:15:07,490
they generate tens of hundreds of

00:15:05,150 --> 00:15:09,530
thousands of reports on your disk it

00:15:07,490 --> 00:15:11,990
would fill up so they don't retain the

00:15:09,530 --> 00:15:14,870
reports on disk once they've sent them

00:15:11,990 --> 00:15:16,880
off to see pan for our purpose however

00:15:14,870 --> 00:15:18,950
we do want to retain those reports we

00:15:16,880 --> 00:15:23,120
want to be we want to be able to look at

00:15:18,950 --> 00:15:24,920
each file of say 1,000 modules and say

00:15:23,120 --> 00:15:28,250
well what's the problem with this

00:15:24,920 --> 00:15:33,100
against pro/5 lead so I wrote something

00:15:28,250 --> 00:15:33,100
that takes GAO's code and

00:15:33,459 --> 00:15:41,560
analyzes it and retains the reports on

00:15:36,500 --> 00:15:41,560
disk hence the name of this module so

00:15:41,649 --> 00:15:47,029
earlier I said we test the selected

00:15:44,870 --> 00:15:49,940
subset of Sipan well why not test all of

00:15:47,029 --> 00:15:54,440
CP n the problem is we have modules that

00:15:49,940 --> 00:15:56,690
are operating systems specific modules

00:15:54,440 --> 00:15:58,730
that are outdated or abandoned many

00:15:56,690 --> 00:16:00,500
modules behave badly during automated

00:15:58,730 --> 00:16:02,990
testing processes they require

00:16:00,500 --> 00:16:05,959
interactive configuration or they rely

00:16:02,990 --> 00:16:08,060
too much on network connections or they

00:16:05,959 --> 00:16:11,060
have configuration or build or something

00:16:08,060 --> 00:16:13,850
that times out or they fill up your disk

00:16:11,060 --> 00:16:15,680
with test results or modules have

00:16:13,850 --> 00:16:17,930
external dependencies that maybe you

00:16:15,680 --> 00:16:20,750
cannot install on the operating system

00:16:17,930 --> 00:16:24,230
on which you're running this process so

00:16:20,750 --> 00:16:26,930
how do we make a choice well you saw

00:16:24,230 --> 00:16:30,350
this picture earlier today in Vicky's

00:16:26,930 --> 00:16:32,420
talk about the CPA River the CPM River

00:16:30,350 --> 00:16:34,839
as a metaphor it was developed by Neal

00:16:32,420 --> 00:16:36,920
Bowers and QA heck of that participants

00:16:34,839 --> 00:16:39,230
imagined the core distribution as the

00:16:36,920 --> 00:16:40,910
source of a Mighty River CP and

00:16:39,230 --> 00:16:42,920
distributions increase the volume of

00:16:40,910 --> 00:16:44,899
water in the river the river eventually

00:16:42,920 --> 00:16:46,940
flows into the sea which is all Perl

00:16:44,899 --> 00:16:50,230
code everywhere but pollution upstream

00:16:46,940 --> 00:16:54,440
causes pollution downstream you can

00:16:50,230 --> 00:16:56,300
impose some graph theory on the c-pen

00:16:54,440 --> 00:16:58,820
river and come up with a directed

00:16:56,300 --> 00:17:01,459
acyclic graph which is a list of pearls

00:16:58,820 --> 00:17:04,520
of Sipan distributions in dependency

00:17:01,459 --> 00:17:07,400
order so what I did during the past year

00:17:04,520 --> 00:17:10,130
was took the top 1000 of the Sipan River

00:17:07,400 --> 00:17:13,280
the farthest upstream distributions as a

00:17:10,130 --> 00:17:15,470
proxy for all of Sipan and on my Linode

00:17:13,280 --> 00:17:19,390
I installed a monthly dev release CP N

00:17:15,470 --> 00:17:21,709
and then I fed the top 1,000 to CPM I

00:17:19,390 --> 00:17:24,230
used tests against dev to parse the

00:17:21,709 --> 00:17:26,660
build log and I brought wrote PSP files

00:17:24,230 --> 00:17:31,820
suitable for spreadsheets and then I

00:17:26,660 --> 00:17:33,620
reported to the Perl 5 mailing list this

00:17:31,820 --> 00:17:35,780
was well good in the sense that it ran

00:17:33,620 --> 00:17:37,610
for several months on my Linode and we

00:17:35,780 --> 00:17:39,950
generated the monthly reports and by

00:17:37,610 --> 00:17:41,630
about March or April some of the people

00:17:39,950 --> 00:17:45,700
were actually making use of the data in

00:17:41,630 --> 00:17:47,600
evaluating the Perl 528 readiness of lis

00:17:45,700 --> 00:17:49,850
but the problems was that there's a

00:17:47,600 --> 00:17:52,549
one-person process it was only partially

00:17:49,850 --> 00:17:55,850
automated 1,000 distributions is too

00:17:52,549 --> 00:17:57,379
shallow a test so for the upcoming

00:17:55,850 --> 00:17:59,929
development cycle I want to do some

00:17:57,379 --> 00:18:02,360
things differently I want to test 3000

00:17:59,929 --> 00:18:04,220
distributions during the 5:29 dev cycle

00:18:02,360 --> 00:18:06,620
I wanted to run in a more professional

00:18:04,220 --> 00:18:09,019
way more fully automated management

00:18:06,620 --> 00:18:11,090
input from more experienced sis admin's

00:18:09,019 --> 00:18:14,240
and I want to run this in a way that

00:18:11,090 --> 00:18:16,159
strengthens open source communities so

00:18:14,240 --> 00:18:19,070
what we done we in New York Pro muggers

00:18:16,159 --> 00:18:22,100
have entered into in a negotiation with

00:18:19,070 --> 00:18:24,320
New York City BSD user group and we have

00:18:22,100 --> 00:18:26,409
they've generously granted us access to

00:18:24,320 --> 00:18:29,389
the servers in their data center and

00:18:26,409 --> 00:18:31,039
access to the system expertise of some

00:18:29,389 --> 00:18:35,120
people like mark Saad and George

00:18:31,039 --> 00:18:37,370
Rosalind and in addition to that we got

00:18:35,120 --> 00:18:40,009
some assistance a couple months ago from

00:18:37,370 --> 00:18:42,529
Philadelphia Perl monitors John Carr

00:18:40,009 --> 00:18:44,690
Walt Minkowski and Thomas mckernon they

00:18:42,529 --> 00:18:46,789
analyzed sets of ten CP and

00:18:44,690 --> 00:18:50,090
distributions each distributions that

00:18:46,789 --> 00:18:52,159
were getting a fail and they analyzed

00:18:50,090 --> 00:18:53,539
the cause of the failure created patches

00:18:52,159 --> 00:18:56,029
or PO requests that they sent to the

00:18:53,539 --> 00:19:00,259
authors also that we can have a better

00:18:56,029 --> 00:19:03,919
basis on which to test pearl pearl the

00:19:00,259 --> 00:19:07,039
furrow in the 5:29 development cycle and

00:19:03,919 --> 00:19:09,919
in New York when I say we I principally

00:19:07,039 --> 00:19:13,279
mean myself and Andrew valano a veteran

00:19:09,919 --> 00:19:18,110
new to pearl new to pearl mongers but a

00:19:13,279 --> 00:19:20,960
veteran system administrator so this is

00:19:18,110 --> 00:19:23,179
one approach to testing pearl v bleed

00:19:20,960 --> 00:19:25,159
against Sipan to measuring what is the

00:19:23,179 --> 00:19:28,190
impact of the development process of

00:19:25,159 --> 00:19:30,169
pearl against the the pro code that is

00:19:28,190 --> 00:19:34,159
actually in production there are other

00:19:30,169 --> 00:19:38,509
possible approaches Ryan boots known on

00:19:34,159 --> 00:19:40,669
our see as simcha 2387 has been in the

00:19:38,509 --> 00:19:42,350
process of developing something and Todd

00:19:40,669 --> 00:19:44,210
and Nicholas and other Houston pearl

00:19:42,350 --> 00:19:45,980
mongers have also been working on this

00:19:44,210 --> 00:19:47,629
but unfortunately as of the time of

00:19:45,980 --> 00:19:48,649
preparation of this test I don't

00:19:47,629 --> 00:19:52,039
actually know where these other

00:19:48,649 --> 00:19:54,769
developments stand but in any case this

00:19:52,039 --> 00:19:56,659
is where we stand at hoping that we will

00:19:54,769 --> 00:19:59,299
get 528

00:19:56,659 --> 00:20:02,899
out soon and that we can then measure

00:19:59,299 --> 00:20:05,059
the in the upcoming 529 development

00:20:02,899 --> 00:20:09,259
cycle we can measure the impact of

00:20:05,059 --> 00:20:12,379
changes in purified bleed against a much

00:20:09,259 --> 00:20:14,299
larger set of seat pan I'd like to thank

00:20:12,379 --> 00:20:15,529
the sponsors of the Perl 5 port

00:20:14,299 --> 00:20:18,169
hackathon in Amsterdam

00:20:15,529 --> 00:20:20,899
thank booking cPanel and all the other

00:20:18,169 --> 00:20:23,119
companies that you know about give shout

00:20:20,899 --> 00:20:26,090
outs to David golden for the MongoDB

00:20:23,119 --> 00:20:28,909
base program with which we calculate the

00:20:26,090 --> 00:20:30,710
seat pan River and to Neil Bauer's for

00:20:28,909 --> 00:20:33,200
raising consciousness about the seat pan

00:20:30,710 --> 00:20:37,609
River and for supplying two images for

00:20:33,200 --> 00:20:39,649
this talk in these slides you'll have

00:20:37,609 --> 00:20:41,450
lots of references and there are

00:20:39,649 --> 00:20:54,999
actually bonus slides that we don't come

00:20:41,450 --> 00:20:58,279
to hear so thank you very much the the

00:20:54,999 --> 00:21:01,669
slides will be on my website which is

00:20:58,279 --> 00:21:04,340
called thenceforward net and if I can

00:21:01,669 --> 00:21:06,950
find a way to post and I don't know if

00:21:04,340 --> 00:21:11,749
there's a way in the schedule to post

00:21:06,950 --> 00:21:16,039
them but I will do that or I'll post it

00:21:11,749 --> 00:21:19,580
to some appropriate mailing list I think

00:21:16,039 --> 00:21:21,499
we're out of the formal time but I'm I'm

00:21:19,580 --> 00:21:22,489
actually going to be in this room for

00:21:21,499 --> 00:21:24,289
above the bulk of the rest of the

00:21:22,489 --> 00:21:26,179
afternoon so I'd be happy to entertain

00:21:24,289 --> 00:21:27,979
questions and if any of you are

00:21:26,179 --> 00:21:30,169
interested in helping out or exploring

00:21:27,979 --> 00:21:32,979
these matters further please contact me

00:21:30,169 --> 00:21:32,979
thank you

00:21:39,410 --> 00:21:47,740
the website has a page oh okay so I'll

00:21:44,750 --> 00:21:47,740

YouTube URL: https://www.youtube.com/watch?v=qtTZ4n3HA_E


