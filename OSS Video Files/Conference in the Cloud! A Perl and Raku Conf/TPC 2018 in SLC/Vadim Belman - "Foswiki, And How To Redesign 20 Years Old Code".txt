Title: Vadim Belman - "Foswiki, And How To Redesign 20 Years Old Code"
Publication date: 2018-06-20
Playlist: TPC 2018 in SLC
Description: 
	A story of modernizing old code of a great Foswiki project: how to start, what it requires, what decisions are to be made, and how not to lost track in process.
Captions: 
	00:00:00,210 --> 00:00:05,640
hello everybody might have a little bit

00:00:03,929 --> 00:00:08,130
of your attention for the next 50

00:00:05,640 --> 00:00:10,769
minutes basically I'll try to make it in

00:00:08,130 --> 00:00:13,620
less than 15 minutes and my name is

00:00:10,769 --> 00:00:15,420
Joaquin bellman I wouldn't tell where

00:00:13,620 --> 00:00:17,910
and work and how rocket would tell you

00:00:15,420 --> 00:00:21,380
nothing the main point of my

00:00:17,910 --> 00:00:23,970
presentation is that I've worked for

00:00:21,380 --> 00:00:27,660
Vicky's community over the last three

00:00:23,970 --> 00:00:29,640
years and I'm the one and the only one

00:00:27,660 --> 00:00:32,160
who is responsible for adapting all the

00:00:29,640 --> 00:00:38,370
facility code for new requirements for

00:00:32,160 --> 00:00:41,550
the new world so I first of all I would

00:00:38,370 --> 00:00:43,789
like to ask if anybody of you doesn't

00:00:41,550 --> 00:00:47,039
know what force wikis

00:00:43,789 --> 00:00:50,219
okay makes sense to explain so obviously

00:00:47,039 --> 00:00:52,230
it's a weekend and I think you would

00:00:50,219 --> 00:00:54,120
hear this word obviously quite a couple

00:00:52,230 --> 00:00:58,710
of times but some kinds it's you know

00:00:54,120 --> 00:01:03,229
good to hear things again and again it's

00:00:58,710 --> 00:01:06,000
written in troll obviously again and

00:01:03,229 --> 00:01:08,580
what's more important about first wiki

00:01:06,000 --> 00:01:12,510
is that it's not just a text platform

00:01:08,580 --> 00:01:15,150
it's not just wiki it's a full grown

00:01:12,510 --> 00:01:17,460
platform itself which means it's

00:01:15,150 --> 00:01:18,990
possible to write simple applications in

00:01:17,460 --> 00:01:22,320
force week and there is such term

00:01:18,990 --> 00:01:25,970
application and it has plugins to

00:01:22,320 --> 00:01:30,540
support those applications and plugins

00:01:25,970 --> 00:01:33,689
to my point it's both the most powerful

00:01:30,540 --> 00:01:39,360
and the weakest point of first wiki is

00:01:33,689 --> 00:01:42,090
it Chris now it's extremely good for

00:01:39,360 --> 00:01:46,250
inter-corporate usage especially for

00:01:42,090 --> 00:01:49,619
midsize businesses where you can univer

00:01:46,250 --> 00:01:52,680
have one common place to handle all your

00:01:49,619 --> 00:01:55,200
documentation discussions task

00:01:52,680 --> 00:01:57,390
management databases it in a lot of

00:01:55,200 --> 00:01:59,640
other stuff actually if you follow the

00:01:57,390 --> 00:02:03,869
link above you can read much more about

00:01:59,640 --> 00:02:06,360
use cases and I would like to move on

00:02:03,869 --> 00:02:09,959
and tell the most important thing of

00:02:06,360 --> 00:02:12,239
this speech so what's wrong about first

00:02:09,959 --> 00:02:13,080
wiki in its current state why I needed

00:02:12,239 --> 00:02:16,650
to

00:02:13,080 --> 00:02:22,680
design it so the biggest issue is that

00:02:16,650 --> 00:02:24,570
it's salt let's let me remind to those

00:02:22,680 --> 00:02:27,480
of you who knows about first wiki is

00:02:24,570 --> 00:02:30,180
that it's a fork of tweaking and twiki

00:02:27,480 --> 00:02:32,820
itself actually soon it's going to be

00:02:30,180 --> 00:02:35,870
twenty years exactly as TWiki started

00:02:32,820 --> 00:02:38,550
23rd of July is the date of birth and

00:02:35,870 --> 00:02:40,970
twiki started just a couple of scripts

00:02:38,550 --> 00:02:46,350
CGI scripts loosely bound together with

00:02:40,970 --> 00:02:48,540
some libraries and that's probably the

00:02:46,350 --> 00:02:51,510
source of all problems we have currently

00:02:48,540 --> 00:02:53,280
because there was no initial design to

00:02:51,510 --> 00:02:58,230
the system it was growing and growing

00:02:53,280 --> 00:03:00,750
and growing more particularly a very

00:02:58,230 --> 00:03:02,220
eclectic source code which is a mixture

00:03:00,750 --> 00:03:09,290
of procedural and object-oriented

00:03:02,220 --> 00:03:12,510
techniques and wait a second you know

00:03:09,290 --> 00:03:15,810
it's not just a mixture but the problem

00:03:12,510 --> 00:03:18,390
is that procedural actually is the

00:03:15,810 --> 00:03:20,940
controlling layer and objects i simply

00:03:18,390 --> 00:03:24,090
supporting procedural approach ain't it

00:03:20,940 --> 00:03:26,970
causing some issues heavy reliance will

00:03:24,090 --> 00:03:29,430
begin blocks its where it once started

00:03:26,970 --> 00:03:31,860
with you know we have a little bit of

00:03:29,430 --> 00:03:34,860
problem let's fix it begin what would do

00:03:31,860 --> 00:03:37,560
just nice a couple of lines I'll tell

00:03:34,860 --> 00:03:42,090
you a little bit later what it ended up

00:03:37,560 --> 00:03:45,590
with another issue it's a particular

00:03:42,090 --> 00:03:48,420
issue but it causes a lot of confusion

00:03:45,590 --> 00:03:50,310
session is the central object object of

00:03:48,420 --> 00:03:53,040
speaking but it's not the session you

00:03:50,310 --> 00:03:55,530
might think which is its current session

00:03:53,040 --> 00:03:57,450
from the moment as the request comes to

00:03:55,530 --> 00:03:59,880
the web application and till the

00:03:57,450 --> 00:04:03,030
response is generated to the user this

00:03:59,880 --> 00:04:05,040
is the session not a user session and it

00:04:03,030 --> 00:04:07,920
causes some confusion and it's also

00:04:05,040 --> 00:04:09,709
confusing people that it's located and

00:04:07,920 --> 00:04:11,970
plugins module for some reason why

00:04:09,709 --> 00:04:14,610
simply because at some point some wanted

00:04:11,970 --> 00:04:16,440
somebody needed it they put it there in

00:04:14,610 --> 00:04:20,790
scenes and it's the central object of

00:04:16,440 --> 00:04:23,310
first weaken its global when its global

00:04:20,790 --> 00:04:26,639
I think no need to explain what it means

00:04:23,310 --> 00:04:28,919
I mean you can

00:04:26,639 --> 00:04:30,599
localize it properly and if you need

00:04:28,919 --> 00:04:33,000
more than one request part a simpler

00:04:30,599 --> 00:04:34,949
process for example for WebSocket

00:04:33,000 --> 00:04:38,250
handian no way guys

00:04:34,949 --> 00:04:41,550
forget about WebSockets our plugins as

00:04:38,250 --> 00:04:44,310
well as I told they have some weak point

00:04:41,550 --> 00:04:46,379
but I'll get back to that little bit

00:04:44,310 --> 00:04:49,009
later again

00:04:46,379 --> 00:04:54,509
those are some web design about plugins

00:04:49,009 --> 00:04:57,900
and as a result of the above issues it's

00:04:54,509 --> 00:05:02,189
not very easy to scale for speaker on

00:04:57,900 --> 00:05:04,979
any big level like if you want a cluster

00:05:02,189 --> 00:05:07,500
you most likely would need your data to

00:05:04,979 --> 00:05:09,300
be stored on a network and database is

00:05:07,500 --> 00:05:11,669
the best location for that data and

00:05:09,300 --> 00:05:14,189
there is no way to have data stored in

00:05:11,669 --> 00:05:20,460
database for many different reasons and

00:05:14,189 --> 00:05:22,949
so on so on when I came to those

00:05:20,460 --> 00:05:29,699
conclusions which I told you about sorry

00:05:22,949 --> 00:05:33,750
I just came to the community first my

00:05:29,699 --> 00:05:37,770
question was guys can we have plugins in

00:05:33,750 --> 00:05:42,560
objects know how ok we have other

00:05:37,770 --> 00:05:46,379
problems but how to fix them nobody

00:05:42,560 --> 00:05:48,960
wants to speak about it ok do we need to

00:05:46,379 --> 00:05:52,110
convert the core to object model and

00:05:48,960 --> 00:05:53,759
move on from that point oh yes this is

00:05:52,110 --> 00:05:57,180
what we need and everybody agreed that

00:05:53,759 --> 00:05:59,279
first week it has to be has to get rid

00:05:57,180 --> 00:06:05,270
of procedural approach and convert to

00:05:59,279 --> 00:06:08,580
complete object-oriented approach so I

00:06:05,270 --> 00:06:11,939
already told you about how it started to

00:06:08,580 --> 00:06:14,879
me first of all I used for speaker for

00:06:11,939 --> 00:06:17,400
my own purposes and this is what helped

00:06:14,879 --> 00:06:19,199
me to work on it I mean in this section

00:06:17,400 --> 00:06:21,029
I would like just tell a little bit that

00:06:19,199 --> 00:06:24,689
any one of you would decide at some

00:06:21,029 --> 00:06:27,029
point to work on a project as old as for

00:06:24,689 --> 00:06:28,740
speaker and rock for communicate you

00:06:27,029 --> 00:06:30,629
need some reasoning to do it because

00:06:28,740 --> 00:06:32,250
otherwise you will start to waste your

00:06:30,629 --> 00:06:35,940
time and then you may end up with

00:06:32,250 --> 00:06:37,500
nothing and no will to continue so here

00:06:35,940 --> 00:06:40,169
I would like to tell you what you need

00:06:37,500 --> 00:06:42,300
to work and work and work

00:06:40,169 --> 00:06:44,520
first of all of course use the project

00:06:42,300 --> 00:06:48,870
it won't work it's obvious I mean but

00:06:44,520 --> 00:06:50,009
still and have the primary target this

00:06:48,870 --> 00:06:54,719
helps a lot

00:06:50,009 --> 00:06:57,659
I wanted vital plugins this was my

00:06:54,719 --> 00:06:59,849
target target from the beginning because

00:06:57,659 --> 00:07:05,520
the current plugins model doesn't

00:06:59,849 --> 00:07:09,389
satisfy me enough time also mine it

00:07:05,520 --> 00:07:11,909
might be obvious but I must admit that I

00:07:09,389 --> 00:07:16,550
spent two and a half years of my spare

00:07:11,909 --> 00:07:23,520
time on finishing that project and

00:07:16,550 --> 00:07:26,849
actually it's not finished yet and maybe

00:07:23,520 --> 00:07:29,400
break don't get too experienced just

00:07:26,849 --> 00:07:31,409
don't because if you got to experience

00:07:29,400 --> 00:07:33,210
with the project with its internals it

00:07:31,409 --> 00:07:36,930
means you are used to the way things are

00:07:33,210 --> 00:07:41,099
done indeed and you won't be willing to

00:07:36,930 --> 00:07:42,659
change them just be unsatisfied when you

00:07:41,099 --> 00:07:48,419
an experienced you unsatisfied

00:07:42,659 --> 00:07:50,339
everything is bad for you so go on next

00:07:48,419 --> 00:07:52,620
step I wanted to talk about the

00:07:50,339 --> 00:07:54,330
community the people I met how we

00:07:52,620 --> 00:07:58,050
interact it and stuff like that but then

00:07:54,330 --> 00:08:02,849
I decided it takes too much time and to

00:07:58,050 --> 00:08:06,060
hell with it skip it because anyway

00:08:02,849 --> 00:08:08,550
situation within each community might be

00:08:06,060 --> 00:08:10,139
pretty much different from what I met so

00:08:08,550 --> 00:08:13,830
my experience might be completely

00:08:10,139 --> 00:08:19,490
useless here and let's go to technical

00:08:13,830 --> 00:08:19,490
stuff done so once again what's wrong

00:08:19,520 --> 00:08:24,899
yeah you know I would like to tell you

00:08:22,800 --> 00:08:26,669
one sin even though I'm telling you

00:08:24,899 --> 00:08:28,889
what's wrong about forcefully what's bad

00:08:26,669 --> 00:08:30,330
about first weekend songs all are keep

00:08:28,889 --> 00:08:33,690
in mind that I'm speaking about

00:08:30,330 --> 00:08:36,479
particular core design first week itself

00:08:33,690 --> 00:08:40,079
as a project is simply greatest thing I

00:08:36,479 --> 00:08:43,469
ever used for my purposes it's fantastic

00:08:40,079 --> 00:08:45,750
I mean it works it simply when you see

00:08:43,469 --> 00:08:47,819
the face the face is beautiful but then

00:08:45,750 --> 00:08:51,760
you you know look behind the face and

00:08:47,819 --> 00:08:54,160
you have terrible hair there you have

00:08:51,760 --> 00:08:58,510
it's fixable nothing really unfixable in

00:08:54,160 --> 00:09:00,910
this world so as an example of how

00:08:58,510 --> 00:09:04,660
terrible the how to pronounce at

00:09:00,910 --> 00:09:09,490
heredity of Pacifica I mean how it

00:09:04,660 --> 00:09:11,860
suffers from old old bad decisions let's

00:09:09,490 --> 00:09:15,520
have a look at how the web application

00:09:11,860 --> 00:09:19,240
starts in every CGI script and through

00:09:15,520 --> 00:09:23,440
office Vicki still handing every request

00:09:19,240 --> 00:09:25,720
with a separate script CGI script every

00:09:23,440 --> 00:09:28,030
script contains those three lines used

00:09:25,720 --> 00:09:30,580
for speaking use force wiki we dollar

00:09:28,030 --> 00:09:32,080
facility engine start well it sounds

00:09:30,580 --> 00:09:37,990
good engine start

00:09:32,080 --> 00:09:40,690
boom and we're on then but one second

00:09:37,990 --> 00:09:43,510
where do we get engine from that's a

00:09:40,690 --> 00:09:45,430
question and we start checking out and

00:09:43,510 --> 00:09:48,400
we find a begin block of four hundred

00:09:45,430 --> 00:09:50,800
seventy two lines of code where the

00:09:48,400 --> 00:09:56,250
engine gets initialized within this

00:09:50,800 --> 00:09:58,060
begin block I mean break it then engine

00:09:56,250 --> 00:10:00,220
run method

00:09:58,060 --> 00:10:02,350
it creates request response pair in

00:10:00,220 --> 00:10:05,590
passes them to handle request another

00:10:02,350 --> 00:10:07,960
stage why what for okay sounds good

00:10:05,590 --> 00:10:11,140
handle requests but and then as a module

00:10:07,960 --> 00:10:12,910
for that purpose by doing the beginner

00:10:11,140 --> 00:10:16,950
book is located I didn't first week I

00:10:12,910 --> 00:10:20,770
wrote it uh-huh handle quest gets a

00:10:16,950 --> 00:10:22,450
request those requests dispatch it but

00:10:20,770 --> 00:10:24,280
then another question arises guys

00:10:22,450 --> 00:10:30,130
remember about the central object about

00:10:24,280 --> 00:10:33,220
the session where it gets created within

00:10:30,130 --> 00:10:36,040
handle requests but not directly but in

00:10:33,220 --> 00:10:40,480
a private method you execute which

00:10:36,040 --> 00:10:43,180
nobody knows about you'll see I mean

00:10:40,480 --> 00:10:44,950
there was no bet intention from anybody

00:10:43,180 --> 00:10:47,350
but a lot of people worked on the

00:10:44,950 --> 00:10:53,500
project from the beginning and it caused

00:10:47,350 --> 00:10:56,920
this pretty messed up code so session

00:10:53,500 --> 00:10:59,320
this I thought about sorry another issue

00:10:56,920 --> 00:11:01,630
about the session object is that even

00:10:59,320 --> 00:11:04,450
though it's central it doesn't control

00:11:01,630 --> 00:11:04,980
anything or almost anything instead it's

00:11:04,450 --> 00:11:08,070
been can

00:11:04,980 --> 00:11:11,280
by other code other code manipulates it

00:11:08,070 --> 00:11:15,240
sets attributes change its values even

00:11:11,280 --> 00:11:18,750
some modules using it as a storage for

00:11:15,240 --> 00:11:19,860
their session data I mean they simply

00:11:18,750 --> 00:11:23,310
come and say okay

00:11:19,860 --> 00:11:25,560
session object UAH okay that's great

00:11:23,310 --> 00:11:25,920
here is my key in stores this data for

00:11:25,560 --> 00:11:29,400
me

00:11:25,920 --> 00:11:34,710
what if anybody else using this key who

00:11:29,400 --> 00:11:38,010
cares you know and plugins currently

00:11:34,710 --> 00:11:41,090
plug-in is a packaged module package

00:11:38,010 --> 00:11:43,770
whatever you call it with a set of

00:11:41,090 --> 00:11:48,390
functions with predefined names used as

00:11:43,770 --> 00:11:53,280
callbacks nothing less nothing more you

00:11:48,390 --> 00:11:56,750
see the only mechanisms you have to

00:11:53,280 --> 00:11:58,700
control the date your data you

00:11:56,750 --> 00:12:01,200
[Music]

00:11:58,700 --> 00:12:02,700
so whatever package it is providing to

00:12:01,200 --> 00:12:05,670
you that's all you have within the

00:12:02,700 --> 00:12:09,060
plugin and this is why I wanted to

00:12:05,670 --> 00:12:14,730
change it and no plugin can change how

00:12:09,060 --> 00:12:19,970
the core act I'll let a show why this is

00:12:14,730 --> 00:12:24,380
important to me so what we start with

00:12:19,970 --> 00:12:28,160
first of all of course it's planning

00:12:24,380 --> 00:12:31,140
before I started doing any coding I

00:12:28,160 --> 00:12:32,940
defined it well first of all I named it

00:12:31,140 --> 00:12:35,670
first wiki version 3 because contraction

00:12:32,940 --> 00:12:38,550
is a major version is true then I

00:12:35,670 --> 00:12:39,030
defined it tark defined targets what I

00:12:38,550 --> 00:12:44,390
want

00:12:39,030 --> 00:12:44,390
eventually of the code

00:12:45,470 --> 00:12:51,090
well multi-instance multi-domain

00:12:49,200 --> 00:12:53,100
everything - for scalability and

00:12:51,090 --> 00:12:55,710
clustering in the future

00:12:53,100 --> 00:12:59,310
clean up the code obviously remove those

00:12:55,710 --> 00:13:06,060
begin blocks terrible begin box and my

00:12:59,310 --> 00:13:07,920
dream new plugins well eventually anyway

00:13:06,060 --> 00:13:09,990
we have programming for fun most of us I

00:13:07,920 --> 00:13:13,140
don't know somebody probably do it for

00:13:09,990 --> 00:13:14,700
money but we have fun of it and you know

00:13:13,140 --> 00:13:15,839
when you have such an eclectic code

00:13:14,700 --> 00:13:18,509
which

00:13:15,839 --> 00:13:22,050
cause you some had a to do simple things

00:13:18,509 --> 00:13:25,079
sometimes well it's not very much fun so

00:13:22,050 --> 00:13:28,790
I wanted to have things straightened out

00:13:25,079 --> 00:13:31,699
and easier and more fun

00:13:28,790 --> 00:13:35,069
hopefully I managed but I don't know yet

00:13:31,699 --> 00:13:36,980
the initial planning consisted of

00:13:35,069 --> 00:13:41,639
choosing wood frameworks to use

00:13:36,980 --> 00:13:44,339
primarily which was move by number of

00:13:41,639 --> 00:13:47,970
factors first of all it's fast and it's

00:13:44,339 --> 00:13:49,889
not a memory hook because moose is too

00:13:47,970 --> 00:13:52,380
slow and this force weak it still relies

00:13:49,889 --> 00:13:55,740
on CGI pretty heavily people were

00:13:52,380 --> 00:13:59,790
complaining that moose is too takes too

00:13:55,740 --> 00:14:03,269
much to start up a script Mouse too much

00:13:59,790 --> 00:14:08,660
of memory hook anybody doesn't know how

00:14:03,269 --> 00:14:12,240
muumuus organized okay that's great

00:14:08,660 --> 00:14:15,630
except on exception handling we need to

00:14:12,240 --> 00:14:17,279
switch from error dot p.m. to something

00:14:15,630 --> 00:14:20,579
else and it was my decision not

00:14:17,279 --> 00:14:24,329
community decision to choose try genie

00:14:20,579 --> 00:14:27,839
in throw away but but you know this is

00:14:24,329 --> 00:14:30,660
really good then I needed class

00:14:27,839 --> 00:14:33,810
hierarchy in first place and I needed

00:14:30,660 --> 00:14:38,310
object hierarchy so as to the class

00:14:33,810 --> 00:14:42,120
hierarchy how it happened I hope it's

00:14:38,310 --> 00:14:44,910
some fun the process well I started with

00:14:42,120 --> 00:14:46,920
core class any object within the system

00:14:44,910 --> 00:14:51,480
must inherit from this core class

00:14:46,920 --> 00:14:55,380
because this is first of all for

00:14:51,480 --> 00:14:57,630
unification of all code across for

00:14:55,380 --> 00:15:00,480
speaking actually it's another problem a

00:14:57,630 --> 00:15:03,180
lot of people put their hands on it

00:15:00,480 --> 00:15:08,430
so code is pretty much statistically

00:15:03,180 --> 00:15:13,819
diverse so every thoughts inherits this

00:15:08,430 --> 00:15:16,319
sample class then we change the approach

00:15:13,819 --> 00:15:18,120
where it was procedural we switch to

00:15:16,319 --> 00:15:20,579
object-oriented and now we switch the

00:15:18,120 --> 00:15:24,029
application model so we have an

00:15:20,579 --> 00:15:28,199
application we needed central object

00:15:24,029 --> 00:15:29,390
which would be application and the

00:15:28,199 --> 00:15:31,700
problem of us we

00:15:29,390 --> 00:15:36,290
because it's so much light on one

00:15:31,700 --> 00:15:37,460
central object we need every object was

00:15:36,290 --> 00:15:40,310
in first week it would need to know

00:15:37,460 --> 00:15:44,950
about that central object so the easiest

00:15:40,310 --> 00:15:49,010
way was not to make object the central

00:15:44,950 --> 00:15:50,270
root class demand the application to be

00:15:49,010 --> 00:15:52,580
existing because it's not always

00:15:50,270 --> 00:15:55,850
necessary but easier to have a role

00:15:52,580 --> 00:15:59,180
which would declare that this particular

00:15:55,850 --> 00:16:01,490
class requires and can only exist within

00:15:59,180 --> 00:16:05,150
an application environment and know

00:16:01,490 --> 00:16:06,800
where around for example the speaker

00:16:05,150 --> 00:16:14,540
configuration it's a new class I

00:16:06,800 --> 00:16:16,310
introduced and this is a good example if

00:16:14,540 --> 00:16:19,070
you look into the quote it's a good

00:16:16,310 --> 00:16:23,090
example of how application app objector

00:16:19,070 --> 00:16:27,290
all is applied but then we always have

00:16:23,090 --> 00:16:31,160
this but we have exceptions as well and

00:16:27,290 --> 00:16:33,680
this particular exception it would

00:16:31,160 --> 00:16:36,110
pretty much benefit from knowing about

00:16:33,680 --> 00:16:40,550
this application because then it can use

00:16:36,110 --> 00:16:46,130
a response object to generate valid

00:16:40,550 --> 00:16:48,800
error response for a user but it cannot

00:16:46,130 --> 00:16:51,110
require the application because it's an

00:16:48,800 --> 00:16:55,790
exception it must be able to exist

00:16:51,110 --> 00:17:01,790
outside of this environment so my

00:16:55,790 --> 00:17:07,370
solution was okay sorry okay let object

00:17:01,790 --> 00:17:11,150
know that application could exist so

00:17:07,370 --> 00:17:15,710
they're all loses its primary key here

00:17:11,150 --> 00:17:17,180
and now we have two places where

00:17:15,710 --> 00:17:19,910
application is defined not the best

00:17:17,180 --> 00:17:22,250
design but unfortunately due to some

00:17:19,910 --> 00:17:26,600
limitations of also for speaking code I

00:17:22,250 --> 00:17:30,290
had to come to this design so this is

00:17:26,600 --> 00:17:33,020
what my plan initially and this is what

00:17:30,290 --> 00:17:39,450
I ended up with life is not as simple as

00:17:33,020 --> 00:17:42,210
we plan it now tests

00:17:39,450 --> 00:17:44,820
again obvious to many this is obvious

00:17:42,210 --> 00:17:47,400
but for those of you who might be not

00:17:44,820 --> 00:17:49,370
that much experience to its coding and

00:17:47,400 --> 00:17:54,690
change in old code and stuff like that

00:17:49,370 --> 00:17:59,160
we have always have tests especially old

00:17:54,690 --> 00:18:03,170
tests because this is what helps us to

00:17:59,160 --> 00:18:03,170
keep backward compatibility I'm sorry

00:18:07,190 --> 00:18:11,820
and the problem with backward

00:18:09,840 --> 00:18:13,980
compatibility is that when you start

00:18:11,820 --> 00:18:15,930
communicate with people within the

00:18:13,980 --> 00:18:18,270
development community there would be a

00:18:15,930 --> 00:18:21,120
lot of complaints that your new design

00:18:18,270 --> 00:18:23,370
is breaking the compatibility users are

00:18:21,120 --> 00:18:24,230
gonna be unhappy there's gonna be a

00:18:23,370 --> 00:18:26,430
problem

00:18:24,230 --> 00:18:28,500
unfortunately complete backward

00:18:26,430 --> 00:18:29,760
compatibility in case of facility wasn't

00:18:28,500 --> 00:18:31,950
possible whatsoever

00:18:29,760 --> 00:18:33,990
simply because you know switching from

00:18:31,950 --> 00:18:37,500
plane object design where we refer

00:18:33,990 --> 00:18:45,660
attributes as keys on a hash object to

00:18:37,500 --> 00:18:47,520
move moves for this case approach where

00:18:45,660 --> 00:18:51,600
attributes are represented with methods

00:18:47,520 --> 00:18:53,490
methods simply there is no way to have

00:18:51,600 --> 00:18:55,830
this compatibility back backward

00:18:53,490 --> 00:18:58,380
compatibility but you can maintain it at

00:18:55,830 --> 00:19:00,840
reasonable level we're changing for

00:18:58,380 --> 00:19:04,140
example all plugin code would requires

00:19:00,840 --> 00:19:08,070
you know like half a day at last with

00:19:04,140 --> 00:19:11,280
testing but to keep this high level you

00:19:08,070 --> 00:19:13,620
need tests absolutely mandatory again to

00:19:11,280 --> 00:19:16,710
some of you it's obviously but I would

00:19:13,620 --> 00:19:20,460
like to remind it what's more important

00:19:16,710 --> 00:19:22,350
is that tests you write this is part of

00:19:20,460 --> 00:19:25,680
your plan this is big bone of your plan

00:19:22,350 --> 00:19:29,010
if you do in your code first planet in

00:19:25,680 --> 00:19:32,280
the tests see how you want to look to

00:19:29,010 --> 00:19:35,220
work and then actually create code which

00:19:32,280 --> 00:19:37,500
would fulfill those tests that's the

00:19:35,220 --> 00:19:42,860
only good way otherwise you will end up

00:19:37,500 --> 00:19:45,720
with huge mess as I already told your

00:19:42,860 --> 00:19:49,650
application was the new central is in

00:19:45,720 --> 00:19:51,990
the neutral object not only its central

00:19:49,650 --> 00:19:52,570
object but it's now in full control of

00:19:51,990 --> 00:19:55,509
every

00:19:52,570 --> 00:19:59,769
or almost full control there is no cold

00:19:55,509 --> 00:20:01,929
which is allowed without extra need to

00:19:59,769 --> 00:20:04,330
manipulate to mangle with opt service

00:20:01,929 --> 00:20:06,639
application data only by asking

00:20:04,330 --> 00:20:09,820
application everything must go through

00:20:06,639 --> 00:20:12,549
it application itself has to be

00:20:09,820 --> 00:20:17,230
absolutely self-sufficient no dependency

00:20:12,549 --> 00:20:20,769
on Global's from Azam modules nothing I

00:20:17,230 --> 00:20:24,700
mean if you imagine it as a real life

00:20:20,769 --> 00:20:27,700
object and here utilize your plea your

00:20:24,700 --> 00:20:30,309
code okay your objects your objects and

00:20:27,700 --> 00:20:32,019
you get application object and make it

00:20:30,309 --> 00:20:34,330
like this move it to another place and

00:20:32,019 --> 00:20:37,240
drop it there it must work is it worked

00:20:34,330 --> 00:20:41,139
before I mean completely self-sufficient

00:20:37,240 --> 00:20:49,799
if you have any external ties you won't

00:20:41,139 --> 00:20:49,799
get a good level of scalability

00:20:50,519 --> 00:20:58,120
well obviously again no more begin

00:20:56,200 --> 00:21:00,250
blocks for initializing accept

00:20:58,120 --> 00:21:03,309
absolutely necessary to initialize a

00:21:00,250 --> 00:21:05,710
package only a package could be

00:21:03,309 --> 00:21:08,649
initialized with begin block no object

00:21:05,710 --> 00:21:11,230
objects could be created with it so it's

00:21:08,649 --> 00:21:15,070
all done by application and by

00:21:11,230 --> 00:21:19,450
frameworks to which it delegates this

00:21:15,070 --> 00:21:22,269
drop application is the single point of

00:21:19,450 --> 00:21:26,559
entrance now and the biggest outcome of

00:21:22,269 --> 00:21:30,779
this change is that force wiki is now

00:21:26,559 --> 00:21:34,929
capable and now works with PCI which is

00:21:30,779 --> 00:21:38,789
absolutely must for Medora Madame parole

00:21:34,929 --> 00:21:45,879
application web application and also

00:21:38,789 --> 00:21:50,860
previously there is no if some of the

00:21:45,879 --> 00:21:53,350
code loses an exception simply dies the

00:21:50,860 --> 00:21:56,259
exception could be lost and usual user

00:21:53,350 --> 00:21:59,379
would get simple you know 500 error and

00:21:56,259 --> 00:22:01,840
that's it there is no more thing like

00:21:59,379 --> 00:22:04,450
this application is last resort for

00:22:01,840 --> 00:22:05,420
taking care of lost exceptions and it

00:22:04,450 --> 00:22:09,360
has

00:22:05,420 --> 00:22:11,910
to represent any error in meaningful way

00:22:09,360 --> 00:22:14,520
the Soviet user could at least you know

00:22:11,910 --> 00:22:16,970
grab a screenshot and show it represent

00:22:14,520 --> 00:22:18,860
it to a developer and tell them how it

00:22:16,970 --> 00:22:22,830
how it happened

00:22:18,860 --> 00:22:29,060
and of course application has to be glue

00:22:22,830 --> 00:22:31,910
for other frameworks that's you know

00:22:29,060 --> 00:22:35,100
again life is more complicated

00:22:31,910 --> 00:22:36,900
unfortunately legacy plugins are still

00:22:35,100 --> 00:22:41,400
there we cannot get rid of them first

00:22:36,900 --> 00:22:46,830
week has around 300 plugins out of them

00:22:41,400 --> 00:22:50,250
at least 150 most definitely are used by

00:22:46,830 --> 00:22:52,500
somebody we cannot simply drop this

00:22:50,250 --> 00:22:55,770
baggage so we need to provide some level

00:22:52,500 --> 00:22:59,130
of backwards compatibility what I've

00:22:55,770 --> 00:23:02,250
done the biggest problem with those

00:22:59,130 --> 00:23:07,680
plugins not their packages in its near

00:23:02,250 --> 00:23:09,750
nature but let's rely on Global's so I

00:23:07,680 --> 00:23:14,520
had to replace session with force we

00:23:09,750 --> 00:23:16,380
kept global configuration object I

00:23:14,520 --> 00:23:18,900
didn't tell you about this but it exists

00:23:16,380 --> 00:23:22,620
it doesn't matter but where previously

00:23:18,900 --> 00:23:26,660
it was just a hash you know just it

00:23:22,620 --> 00:23:30,420
exists it was created somewhere for now

00:23:26,660 --> 00:23:34,500
it's a hidden hidden reference to data

00:23:30,420 --> 00:23:36,720
on configuration object so you can only

00:23:34,500 --> 00:23:41,970
read from it you don't have to change it

00:23:36,720 --> 00:23:45,000
it's only for plugins and my best love

00:23:41,970 --> 00:23:48,150
for Vickie engine is gone now nobody

00:23:45,000 --> 00:23:51,300
needs any more so we only have left with

00:23:48,150 --> 00:23:53,850
two global variables necessary to

00:23:51,300 --> 00:23:57,540
provide all plugins with something to

00:23:53,850 --> 00:23:59,670
hook with and to continue working and

00:23:57,540 --> 00:24:02,370
it's much easier to have those two

00:23:59,670 --> 00:24:04,350
localized if you switch contexts I mean

00:24:02,370 --> 00:24:09,180
if you have two applications working

00:24:04,350 --> 00:24:11,850
within same process and share in same

00:24:09,180 --> 00:24:13,800
memory if you switch from one

00:24:11,850 --> 00:24:15,930
application to another all you have to

00:24:13,800 --> 00:24:18,450
do is to replace content of those two

00:24:15,930 --> 00:24:21,629
variables and it's much easier to

00:24:18,450 --> 00:24:25,980
comprehend then do something about this

00:24:21,629 --> 00:24:29,039
vault approach and the primary

00:24:25,980 --> 00:24:32,100
requirement no new quote is allowed to

00:24:29,039 --> 00:24:39,149
use those Global's that's it I mean that

00:24:32,100 --> 00:24:42,590
prohibited my dream finally I would like

00:24:39,149 --> 00:24:52,039
to show you what it all came with

00:24:42,590 --> 00:24:55,649
plugins well the new plugins objects and

00:24:52,039 --> 00:25:00,330
ok sorry I just broke it the sequence

00:24:55,649 --> 00:25:01,769
anyway they're objects but unfortunately

00:25:00,330 --> 00:25:04,799
the currently the name plug-in is

00:25:01,769 --> 00:25:06,869
already occupied in first wiki so the

00:25:04,799 --> 00:25:09,590
new framework had just renamed it to

00:25:06,869 --> 00:25:12,659
extensions another reason to use

00:25:09,590 --> 00:25:15,149
extensions name is that they're much

00:25:12,659 --> 00:25:18,179
more than the old plugins because they

00:25:15,149 --> 00:25:30,289
really now capable of extending really

00:25:18,179 --> 00:25:34,440
extending first wicket functionality ok

00:25:30,289 --> 00:25:37,529
new extensions can operate and three

00:25:34,440 --> 00:25:40,730
different modes cooperating mode this is

00:25:37,529 --> 00:25:48,210
cause all plugins are broken actually

00:25:40,730 --> 00:25:50,940
this is where your code you simply

00:25:48,210 --> 00:25:52,259
install the callback and the callback is

00:25:50,940 --> 00:25:54,480
getting called by somebody

00:25:52,259 --> 00:25:56,279
there is no initiative on your site

00:25:54,480 --> 00:25:59,100
whatsoever except for seconds a callback

00:25:56,279 --> 00:26:01,649
that's it you have no control somebody

00:25:59,100 --> 00:26:04,590
come and ask I'm gonna do this

00:26:01,649 --> 00:26:06,299
separation would you provide me with

00:26:04,590 --> 00:26:08,609
some additional information for that

00:26:06,299 --> 00:26:14,090
that's all

00:26:08,609 --> 00:26:14,090
semi cooperative is a little bit more

00:26:15,169 --> 00:26:24,419
active mode of operation where extension

00:26:20,730 --> 00:26:27,029
is capable not only to install the

00:26:24,419 --> 00:26:30,029
handler but the handler itself can do

00:26:27,029 --> 00:26:32,460
much more than simply ends between two

00:26:30,029 --> 00:26:35,670
requests it can change

00:26:32,460 --> 00:26:37,530
the way the core executes it can prevent

00:26:35,670 --> 00:26:40,050
some method from executing so on I'll

00:26:37,530 --> 00:26:43,620
show it a little bit later and the most

00:26:40,050 --> 00:26:46,860
powerful but probably them this mode

00:26:43,620 --> 00:26:49,440
would be used less than other two is SEP

00:26:46,860 --> 00:26:52,110
question suppression is where you can

00:26:49,440 --> 00:26:55,680
change any core class of first week with

00:26:52,110 --> 00:26:58,020
your own or inherit from it so with all

00:26:55,680 --> 00:27:01,350
these remotes it's actually possible to

00:26:58,020 --> 00:27:06,080
change anything just anything with info

00:27:01,350 --> 00:27:09,210
squeaky poor for example currently I

00:27:06,080 --> 00:27:12,540
introduced will you with Pacifica config

00:27:09,210 --> 00:27:15,720
class and currently it stores

00:27:12,540 --> 00:27:18,090
configuration data in the plain file but

00:27:15,720 --> 00:27:23,310
if you want clustering I wanted database

00:27:18,090 --> 00:27:25,710
and it took me 450 lines of code

00:27:23,310 --> 00:27:29,250
including the commentation and license

00:27:25,710 --> 00:27:32,760
information to write an extension which

00:27:29,250 --> 00:27:35,630
changes first we config and redirects

00:27:32,760 --> 00:27:42,900
all the configuration data to a database

00:27:35,630 --> 00:27:45,030
450 lines of code that's it and

00:27:42,900 --> 00:27:46,770
basically there is nothing what would

00:27:45,030 --> 00:27:48,570
prevent your extension from using all

00:27:46,770 --> 00:27:53,580
those three modes simultaneously

00:27:48,570 --> 00:27:56,880
depending on what do you want since they

00:27:53,580 --> 00:28:03,870
don't have much time left I would like

00:27:56,880 --> 00:28:05,090
just demonstrate you finally how the

00:28:03,870 --> 00:28:10,890
most

00:28:05,090 --> 00:28:13,130
oops sorry okay I'll try to rock it this

00:28:10,890 --> 00:28:13,130
way

00:28:17,340 --> 00:28:23,470
sorry my pen just disconnected I wanted

00:28:19,960 --> 00:28:27,730
to use it so this is semi cooperative

00:28:23,470 --> 00:28:30,010
mode where we install handlers okay much

00:28:27,730 --> 00:28:33,669
better where we install handlers on the

00:28:30,010 --> 00:28:38,679
method so I used some fake core class

00:28:33,669 --> 00:28:40,960
and some method within it is for those

00:28:38,679 --> 00:28:43,840
of you and all of you know how much work

00:28:40,960 --> 00:28:46,600
it looks pretty much similar to how

00:28:43,840 --> 00:28:49,510
inheritance and method overriding works

00:28:46,600 --> 00:28:49,990
in mousse simply different cavers plug

00:28:49,510 --> 00:28:53,669
before

00:28:49,990 --> 00:28:56,529
so before method gets called around

00:28:53,669 --> 00:28:59,799
which can actually substitute method

00:28:56,529 --> 00:29:02,830
call and after which can adjust any

00:28:59,799 --> 00:29:06,970
return value and so and so on what makes

00:29:02,830 --> 00:29:09,250
things different here is that you know

00:29:06,970 --> 00:29:11,740
since it's a method we expect it to be

00:29:09,250 --> 00:29:14,590
called on an object and we expect that

00:29:11,740 --> 00:29:18,820
this would point to that object not in

00:29:14,590 --> 00:29:23,710
this case because currently I'm talking

00:29:18,820 --> 00:29:28,210
about extension centric model so this

00:29:23,710 --> 00:29:30,610
here this is extension object this is

00:29:28,210 --> 00:29:33,159
your own object so you can work with

00:29:30,610 --> 00:29:36,130
your extension data easily without

00:29:33,159 --> 00:29:41,020
having anything it's not always that you

00:29:36,130 --> 00:29:43,330
have to know about the object which on

00:29:41,020 --> 00:29:45,220
which the method gets executed but you

00:29:43,330 --> 00:29:49,630
always would need your extension data

00:29:45,220 --> 00:29:52,120
most likely you don't need it so if you

00:29:49,630 --> 00:29:59,529
need to reference the fastq object

00:29:52,120 --> 00:30:01,980
you're dealing with we have params data

00:29:59,529 --> 00:30:01,980
here

00:30:04,190 --> 00:30:11,039
and it contains a key object which you

00:30:08,580 --> 00:30:16,529
can use for that purpose it's pretty

00:30:11,039 --> 00:30:18,750
easy I don't show it here what's more

00:30:16,529 --> 00:30:21,740
important about the problems it's the

00:30:18,750 --> 00:30:24,809
same hash which gets passed to

00:30:21,740 --> 00:30:27,419
absolutely all method handlers whether

00:30:24,809 --> 00:30:30,090
they are coming from your extension or

00:30:27,419 --> 00:30:32,490
they are coming from other extensions so

00:30:30,090 --> 00:30:41,700
this object can be used as a message

00:30:32,490 --> 00:30:45,179
passed between between handlers look at

00:30:41,700 --> 00:30:50,909
this code we simply store some data we

00:30:45,179 --> 00:30:55,279
would like to use later then we use it

00:30:50,909 --> 00:30:58,860
later and you see it randomly it sets

00:30:55,279 --> 00:31:02,159
different strings and if you find do it

00:30:58,860 --> 00:31:05,940
we do something move it we do it in

00:31:02,159 --> 00:31:08,220
another handler so this way we we can

00:31:05,940 --> 00:31:11,399
have some information which would pass

00:31:08,220 --> 00:31:14,340
through all the stages of methods you go

00:31:11,399 --> 00:31:23,029
execution within extensions framework

00:31:14,340 --> 00:31:26,100
actually okay no it's important actually

00:31:23,029 --> 00:31:28,679
the the process of executing handlers I

00:31:26,100 --> 00:31:30,840
call execution flow because you know

00:31:28,679 --> 00:31:32,730
it's like everything flows from one

00:31:30,840 --> 00:31:34,529
handler to another to another to method

00:31:32,730 --> 00:31:37,110
then to another handlers and then it

00:31:34,529 --> 00:31:46,980
comes out to user with some response

00:31:37,110 --> 00:31:50,970
from the method and if you look now here

00:31:46,980 --> 00:31:54,269
you see there are some special handling

00:31:50,970 --> 00:31:57,389
keys on the params and in this case our

00:31:54,269 --> 00:31:59,850
C represents written code you know

00:31:57,389 --> 00:32:02,639
communication for that purpose what is

00:31:59,850 --> 00:32:07,919
stored in our scene is gonna be returned

00:32:02,639 --> 00:32:10,500
to the user which called some method so

00:32:07,919 --> 00:32:15,570
as you can see and actually before and

00:32:10,500 --> 00:32:16,740
around can also manipulate arguments you

00:32:15,570 --> 00:32:22,700
can see it an arrow

00:32:16,740 --> 00:32:27,420
here so as you can see you can change

00:32:22,700 --> 00:32:30,179
any aspect of behavior of fuss vici even

00:32:27,420 --> 00:32:33,210
this way by changing arguments data

00:32:30,179 --> 00:32:35,429
passed to the method and fireplace in

00:32:33,210 --> 00:32:38,490
the return values the way you need it

00:32:35,429 --> 00:32:40,940
but even more than that what is

00:32:38,490 --> 00:32:43,350
important in this execution flow

00:32:40,940 --> 00:32:48,750
differently from how it's done with

00:32:43,350 --> 00:32:55,890
inheritance in moon and Moo's begin

00:32:48,750 --> 00:33:00,059
around and after it's not you who is

00:32:55,890 --> 00:33:03,120
pacing who is pacing the execution to

00:33:00,059 --> 00:33:07,140
other methods like you know with Moo you

00:33:03,120 --> 00:33:10,140
use first argument which is original

00:33:07,140 --> 00:33:11,220
method code the reference and when you

00:33:10,140 --> 00:33:13,860
need it

00:33:11,220 --> 00:33:15,440
you call this original code method if

00:33:13,860 --> 00:33:20,309
you need when you need it if you need

00:33:15,440 --> 00:33:22,980
it's not like this here extension

00:33:20,309 --> 00:33:27,240
framework extension manager takes care

00:33:22,980 --> 00:33:32,309
of the whole system and it is the

00:33:27,240 --> 00:33:35,730
manager who calls every handler okay and

00:33:32,309 --> 00:33:38,970
since there is of course obviously there

00:33:35,730 --> 00:33:40,950
is some order of extensions I mean we

00:33:38,970 --> 00:33:43,050
can always say that this extension goes

00:33:40,950 --> 00:33:47,580
first this extension goes second and so

00:33:43,050 --> 00:33:52,140
on so this is the order how our handlers

00:33:47,580 --> 00:33:56,030
are called and if we throw this

00:33:52,140 --> 00:34:03,000
exception it's not a fatal exception

00:33:56,030 --> 00:34:06,179
it's a it's a helper extension and what

00:34:03,000 --> 00:34:09,480
it tells - extension manager is that we

00:34:06,179 --> 00:34:12,690
have to stop here and now no other

00:34:09,480 --> 00:34:19,590
handlers no method would have to be

00:34:12,690 --> 00:34:22,980
executed and use our see to use use this

00:34:19,590 --> 00:34:26,629
return value here this will be used as

00:34:22,980 --> 00:34:26,629
the return value from the method

00:34:36,389 --> 00:34:44,349
all those all those handlers they're

00:34:40,839 --> 00:34:46,210
physically located in an extension so

00:34:44,349 --> 00:34:53,109
they it would be it would be extension

00:34:46,210 --> 00:34:57,760
package so I use it I use it as it is an

00:34:53,109 --> 00:35:05,079
AG so - it's a kind of private name

00:34:57,760 --> 00:35:06,940
space within params cache sorry mine if

00:35:05,079 --> 00:35:08,619
you come later I would explain it there

00:35:06,940 --> 00:35:20,530
is not some confusion - indeed

00:35:08,619 --> 00:35:22,240
it's not ok one ok sorry I lost my track

00:35:20,530 --> 00:35:26,130
but that's probably all I wanted to show

00:35:22,240 --> 00:35:28,720
you I mean with those as I told you

00:35:26,130 --> 00:35:32,730
about the database configuration

00:35:28,720 --> 00:35:38,200
extension the whole extension is built

00:35:32,730 --> 00:35:40,510
using this approach so I simply took a

00:35:38,200 --> 00:35:43,030
couple of methods from facility config

00:35:40,510 --> 00:35:47,109
responsible for writing and reading data

00:35:43,030 --> 00:35:50,050
and replaced them with my own Henders

00:35:47,109 --> 00:35:54,010
and that's it and you know what makes

00:35:50,050 --> 00:35:57,490
things really great here is that this

00:35:54,010 --> 00:36:00,849
way you can have configuration stored in

00:35:57,490 --> 00:36:03,579
more than one location for example when

00:36:00,849 --> 00:36:10,300
somebody would write an extension for

00:36:03,579 --> 00:36:12,369
storing topic data in the database he

00:36:10,300 --> 00:36:16,270
also might use this approach to

00:36:12,369 --> 00:36:18,970
overwrite store class and to have topics

00:36:16,270 --> 00:36:22,240
sorry and to have topics stored both in

00:36:18,970 --> 00:36:24,730
database on disk whatever you like it I

00:36:22,240 --> 00:36:28,000
mean it could act as a filter where data

00:36:24,730 --> 00:36:29,829
gets through and gets stored whatever

00:36:28,000 --> 00:36:34,170
whenever you like you can do anything

00:36:29,829 --> 00:36:36,510
visit absolutely anything and

00:36:34,170 --> 00:36:39,329
surely there is some question which is

00:36:36,510 --> 00:36:43,200
even more powerful but it's more

00:36:39,329 --> 00:36:45,869
powerful it would it's about more

00:36:43,200 --> 00:36:48,440
responsibility as well so it has to be

00:36:45,869 --> 00:36:54,079
used with some certain level of care

00:36:48,440 --> 00:36:58,049
subglacial works a little bit tricky to

00:36:54,079 --> 00:36:58,920
the point is that within my model no

00:36:58,049 --> 00:37:01,859
object

00:36:58,920 --> 00:37:05,069
no fastq object could be created using

00:37:01,859 --> 00:37:08,190
new there is special method on the root

00:37:05,069 --> 00:37:11,190
class called create and this method must

00:37:08,190 --> 00:37:17,960
it has to be used always has to be used

00:37:11,190 --> 00:37:17,960
to create new objects now what happens

00:37:20,000 --> 00:37:29,519
ok don't have much time left here is a

00:37:24,900 --> 00:37:31,950
simple extension which wants to inherit

00:37:29,519 --> 00:37:37,529
to the right a class within first week

00:37:31,950 --> 00:37:42,269
in first week a config again so this is

00:37:37,529 --> 00:37:44,099
the way it works with X plus sorry with

00:37:42,269 --> 00:37:46,160
the X class we just say you know pretty

00:37:44,099 --> 00:37:51,710
simple and straightforward

00:37:46,160 --> 00:37:54,359
nothing terrible and after that we can

00:37:51,710 --> 00:37:59,640
extension manager does not interact with

00:37:54,359 --> 00:38:04,170
us anymore everything we do is we do use

00:37:59,640 --> 00:38:09,839
in taipa call move in characters

00:38:04,170 --> 00:38:12,089
inheritance to things but how do we

00:38:09,839 --> 00:38:17,490
replace the class and this is the trick

00:38:12,089 --> 00:38:19,500
or I used using create when create is

00:38:17,490 --> 00:38:23,099
requested to create an object of a Suika

00:38:19,500 --> 00:38:30,559
config class first thing does it checks

00:38:23,099 --> 00:38:33,930
if our object knows about an application

00:38:30,559 --> 00:38:38,250
if there is an application it goes to

00:38:33,930 --> 00:38:40,500
application gets access to extension

00:38:38,250 --> 00:38:45,900
manager which belongs to the application

00:38:40,500 --> 00:38:47,490
for that purpose and it asks from

00:38:45,900 --> 00:38:49,290
extension manager

00:38:47,490 --> 00:38:53,190
do you know if there isn't a replacement

00:38:49,290 --> 00:38:56,369
for this for speaker country plus and in

00:38:53,190 --> 00:38:58,380
our case the extension manager says it's

00:38:56,369 --> 00:39:03,600
the only role it takes in all this

00:38:58,380 --> 00:39:06,570
procedure it says yes here is new class

00:39:03,600 --> 00:39:09,450
you must use to create the object so

00:39:06,570 --> 00:39:12,750
eventually eventually if you take a note

00:39:09,450 --> 00:39:15,690
of use first week a role our substitute

00:39:12,750 --> 00:39:18,330
class is not a class patrol but for

00:39:15,690 --> 00:39:20,490
those of you who dealt with plug-in

00:39:18,330 --> 00:39:23,730
toolkit I think it's not something new I

00:39:20,490 --> 00:39:25,770
mean I have invented it on my own and it

00:39:23,730 --> 00:39:29,880
turns out that use of rolls is the best

00:39:25,770 --> 00:39:31,740
way to infer it within a new project but

00:39:29,880 --> 00:39:33,990
that's the way it is and it works

00:39:31,740 --> 00:39:34,950
and what's good about supply seen is

00:39:33,990 --> 00:39:36,780
that here

00:39:34,950 --> 00:39:39,150
there is no limitations the limit is

00:39:36,780 --> 00:39:43,140
only the sky you can do anything you

00:39:39,150 --> 00:39:45,480
want and another good thing about it is

00:39:43,140 --> 00:39:48,030
that it's much faster than use of

00:39:45,480 --> 00:39:50,700
handlers of course because we're

00:39:48,030 --> 00:39:52,680
extension manager is involved where does

00:39:50,700 --> 00:39:54,660
a lot of drop of sore King calling

00:39:52,680 --> 00:39:56,580
handlers you know substitutions and

00:39:54,660 --> 00:40:00,540
substitution things and stuff like that

00:39:56,580 --> 00:40:07,800
like that here we have plain inheritance

00:40:00,540 --> 00:40:09,240
model that's it so basically that's

00:40:07,800 --> 00:40:12,990
pretty much I wanted to tell you about

00:40:09,240 --> 00:40:19,230
my experience frankly saying oh I even

00:40:12,990 --> 00:40:22,980
fit into my time if we have easier any

00:40:19,230 --> 00:40:25,200
questions to me then I would like to

00:40:22,980 --> 00:40:27,720
spend this time for questions if no

00:40:25,200 --> 00:40:30,350
there are a couple of more things I can

00:40:27,720 --> 00:40:30,350
tell you about

00:40:33,730 --> 00:40:46,670
yes 22.2 is planned for release a code

00:40:44,390 --> 00:40:48,950
freeze for two point two is around first

00:40:46,670 --> 00:40:50,750
off a ghost if I'm not mistaken then

00:40:48,950 --> 00:40:54,079
it's about three months for release and

00:40:50,750 --> 00:40:57,230
then I hope that community would finally

00:40:54,079 --> 00:41:08,990
get more time to switch over to facility

00:40:57,230 --> 00:41:13,220
3 it's totally if you want to play with

00:41:08,990 --> 00:41:18,049
it you can take executive branch which

00:41:13,220 --> 00:41:20,660
is item 1 4 2 3 7 its sorry for cryptic

00:41:18,049 --> 00:41:23,750
name but let's call first week first

00:41:20,660 --> 00:41:25,970
week attracts changes through testing

00:41:23,750 --> 00:41:28,220
system by the way as I told for those

00:41:25,970 --> 00:41:31,670
who don't know for first week it doesn't

00:41:28,220 --> 00:41:34,339
use any external bug tracking there is

00:41:31,670 --> 00:41:38,539
internal task management system which is

00:41:34,339 --> 00:41:41,059
built purely on first wiki code there is

00:41:38,539 --> 00:41:44,680
note as far as I remember there is no

00:41:41,059 --> 00:41:49,099
even plugins I use for that purpose

00:41:44,680 --> 00:41:53,480
and invokes it plugins node but the

00:41:49,099 --> 00:41:59,240
script yes because it also tracks github

00:41:53,480 --> 00:42:01,099
commits on a task but yes there is I

00:41:59,240 --> 00:42:04,819
hope that first week III would

00:42:01,099 --> 00:42:07,940
eventually be out because well this is

00:42:04,819 --> 00:42:11,200
my dream and it's doing - in the half

00:42:07,940 --> 00:42:11,200
years of my life actually

00:42:11,349 --> 00:42:21,890
ok any more questions historian ok if I

00:42:19,039 --> 00:42:24,410
if I need anybody of you wants to join

00:42:21,890 --> 00:42:26,720
force wiki development for any reason

00:42:24,410 --> 00:42:32,059
you can contact me with this mail you

00:42:26,720 --> 00:42:34,819
can use IRC for speaker work and you

00:42:32,059 --> 00:42:36,950
know I was changing my presentation at

00:42:34,819 --> 00:42:39,829
the last moment and I forgot to put back

00:42:36,950 --> 00:42:41,329
my acknowledges to all the first week

00:42:39,829 --> 00:42:45,440
you communicate all the great people

00:42:41,329 --> 00:42:50,390
there because without their help

00:42:45,440 --> 00:42:56,750
nothing would happen unfortunately as it

00:42:50,390 --> 00:42:59,710
was told today about pearl itself that

00:42:56,750 --> 00:43:01,790
prop up a lot popularity is declining so

00:42:59,710 --> 00:43:04,369
decline in the number of developer

00:43:01,790 --> 00:43:06,470
developers for first week as well and

00:43:04,369 --> 00:43:08,960
fortunately it's only few of us left and

00:43:06,470 --> 00:43:12,109
frankly seen if nobody joins first week

00:43:08,960 --> 00:43:17,500
it was in next half a year I'm very much

00:43:12,109 --> 00:43:17,500
afraid that project would simply die so

00:43:17,710 --> 00:43:26,420
okay now a little bit extra

00:43:22,790 --> 00:43:32,960
let's call much time to I left five

00:43:26,420 --> 00:43:38,210
minutes okay for those of you who was

00:43:32,960 --> 00:43:44,200
here yeah for any of you who was I think

00:43:38,210 --> 00:43:48,470
in this conference last year I hope you

00:43:44,200 --> 00:43:50,030
also been to Damien presentation where

00:43:48,470 --> 00:43:52,940
he was speaking about the infrastructure

00:43:50,030 --> 00:43:53,750
code and how he hates it I share his

00:43:52,940 --> 00:43:59,510
hate

00:43:53,750 --> 00:44:01,990
hatred completely so another problem was

00:43:59,510 --> 00:44:04,760
first week current first wiki is that

00:44:01,990 --> 00:44:06,319
it's called eclectic not because of the

00:44:04,760 --> 00:44:07,609
mixture of different styles but also

00:44:06,319 --> 00:44:12,079
because it's really different

00:44:07,609 --> 00:44:14,630
programming styles and a lot of begin

00:44:12,079 --> 00:44:17,839
blocks are there only to impose for

00:44:14,630 --> 00:44:19,819
example the play Lacaille to apply atom

00:44:17,839 --> 00:44:25,670
in no problem Perl version and stuff

00:44:19,819 --> 00:44:29,000
like that stuff like that so I hope it's

00:44:25,670 --> 00:44:31,210
readable because I forgot to make it

00:44:29,000 --> 00:44:31,210
bigger

00:44:31,810 --> 00:44:37,339
anyway what's important here is this is

00:44:35,480 --> 00:44:41,180
how I pickle

00:44:37,339 --> 00:44:43,960
new code would look in first weekend

00:44:41,180 --> 00:44:49,460
when I started with the project you see

00:44:43,960 --> 00:44:52,310
we use use 514 force wiki types we use

00:44:49,460 --> 00:44:53,990
move we use namespace clean we extend

00:44:52,310 --> 00:44:56,630
first week you object but this one

00:44:53,990 --> 00:44:58,690
wouldn't be gone and we apply to roles

00:44:56,630 --> 00:45:00,940
and overall its

00:44:58,690 --> 00:45:07,119
one two three four five six seven active

00:45:00,940 --> 00:45:09,579
lines and this is how it looks with a

00:45:07,119 --> 00:45:16,300
special module for speaker class which

00:45:09,579 --> 00:45:18,819
imposes the common styling for first

00:45:16,300 --> 00:45:21,940
weekend so all we need is use first wiki

00:45:18,819 --> 00:45:24,069
class - up means apply a object

00:45:21,940 --> 00:45:27,010
application meaning that this class

00:45:24,069 --> 00:45:29,980
would require an existing application

00:45:27,010 --> 00:45:33,310
object entity know this class object of

00:45:29,980 --> 00:45:36,099
this class can exist only within active

00:45:33,310 --> 00:45:38,140
application environment types instead of

00:45:36,099 --> 00:45:41,680
first wicket types this is to use type

00:45:38,140 --> 00:45:44,710
tiny and callbacks callbacks is a little

00:45:41,680 --> 00:45:49,270
bit special I'll get back to it later

00:45:44,710 --> 00:45:52,390
maybe if we get time the problem was

00:45:49,270 --> 00:45:54,940
first wiki class is that some people

00:45:52,390 --> 00:45:59,020
complain that you know you create some

00:45:54,940 --> 00:46:03,670
magic and magic is bed may paraphrase it

00:45:59,020 --> 00:46:06,970
may change this meaning it's bad when

00:46:03,670 --> 00:46:11,950
it's undocumented well documented magic

00:46:06,970 --> 00:46:15,819
become becomes how to put it becomes a

00:46:11,950 --> 00:46:19,210
production code let's put it this way so

00:46:15,819 --> 00:46:22,150
it helps as I told you it helps to unify

00:46:19,210 --> 00:46:25,210
code style it improves readability so

00:46:22,150 --> 00:46:27,520
instead of analyzing what code you have

00:46:25,210 --> 00:46:29,290
what classes you apply you simply read

00:46:27,520 --> 00:46:32,740
through single lines of Pacific a class

00:46:29,290 --> 00:46:36,160
and see what roles this class are

00:46:32,740 --> 00:46:40,930
supposed to implement it helps in

00:46:36,160 --> 00:46:45,160
debugging the way it helps for example

00:46:40,930 --> 00:46:49,180
mu likes capability of recording what

00:46:45,160 --> 00:46:50,740
attributes are created on an object you

00:46:49,180 --> 00:46:53,170
cannot track them so if you get

00:46:50,740 --> 00:46:56,170
something lost on your object or if we

00:46:53,170 --> 00:46:58,270
need sort by a code stored something on

00:46:56,170 --> 00:46:59,800
your object in the hash key you cannot

00:46:58,270 --> 00:47:01,930
find it later by comparing to what

00:46:59,800 --> 00:47:05,170
attributes are created so first we key

00:47:01,930 --> 00:47:08,349
class takes this function on itself and

00:47:05,170 --> 00:47:13,489
it registers all attributes declared to

00:47:08,349 --> 00:47:16,009
us has another debugging thing

00:47:13,489 --> 00:47:21,200
it's recent in the introduction actually

00:47:16,009 --> 00:47:24,019
I started using type tini type tiny but

00:47:21,200 --> 00:47:26,920
it slows down code by about 30% on

00:47:24,019 --> 00:47:30,410
average so we need only need it for

00:47:26,920 --> 00:47:32,839
debugging but not for the production to

00:47:30,410 --> 00:47:35,180
make things easier I simply added

00:47:32,839 --> 00:47:37,970
another option for house which is called

00:47:35,180 --> 00:47:41,720
a short and which is which activates

00:47:37,970 --> 00:47:43,940
easy checks only in debugging and

00:47:41,720 --> 00:47:46,999
testing mode that's it when you go to

00:47:43,940 --> 00:47:52,579
production they short simply you know it

00:47:46,999 --> 00:47:55,249
disappears and basically it all fits

00:47:52,579 --> 00:47:56,749
into just a couple of lines of code six

00:47:55,249 --> 00:48:01,039
hundred lines of code again this

00:47:56,749 --> 00:48:03,410
documentation so if you need to find out

00:48:01,039 --> 00:48:05,299
something you can always easily find it

00:48:03,410 --> 00:48:09,789
so one minute left

00:48:05,299 --> 00:48:12,319
I think Shahrazad must end here talks

00:48:09,789 --> 00:48:16,239
thank you very much everybody once again

00:48:12,319 --> 00:48:16,239
it was my pleasure

00:48:16,520 --> 00:48:22,219

YouTube URL: https://www.youtube.com/watch?v=ozU2NqkiMWo


