Title: LIGHTNING TALK: Travis Gibson - "Nativecall Binding to Libui"
Publication date: 2018-06-21
Playlist: TPC 2018 in SLC
Description: 
	
Captions: 
	00:00:00,030 --> 00:00:04,110
hello I am Travis I will be telling you

00:00:02,610 --> 00:00:05,819
a bit about my experience writing a

00:00:04,110 --> 00:00:09,690
native call module which is still a work

00:00:05,819 --> 00:00:11,580
in progress basically what I was been

00:00:09,690 --> 00:00:14,490
looking for is a cross-platform GUI

00:00:11,580 --> 00:00:16,500
library for Perl 6 I've checked a few

00:00:14,490 --> 00:00:19,470
different things I saw a gtk simple at

00:00:16,500 --> 00:00:21,720
the time I attempted to use it the

00:00:19,470 --> 00:00:23,970
windows dll's were not set up properly

00:00:21,720 --> 00:00:26,760
and I was unable to load it in Windows

00:00:23,970 --> 00:00:28,820
so I scratched that off my list

00:00:26,760 --> 00:00:33,180
I've been looking mostly for a

00:00:28,820 --> 00:00:34,860
lightweight sort of library so electron

00:00:33,180 --> 00:00:38,399
is a little heavy for what I was looking

00:00:34,860 --> 00:00:40,050
for so one of the things I thought about

00:00:38,399 --> 00:00:41,790
was since I saw this in the

00:00:40,050 --> 00:00:44,730
documentation of native call was maybe I

00:00:41,790 --> 00:00:48,120
could write some native call and wrap up

00:00:44,730 --> 00:00:50,190
a bunch of functions inside of the

00:00:48,120 --> 00:00:52,920
native toolkits on different platforms

00:00:50,190 --> 00:00:54,329
but eventually I decided that was a

00:00:52,920 --> 00:00:56,340
little bit too much work and I was

00:00:54,329 --> 00:00:59,609
hoping to find a something that did that

00:00:56,340 --> 00:01:02,730
in --see which I did so well it's a

00:00:59,609 --> 00:01:05,129
library called Lib UI it's still heavy

00:01:02,730 --> 00:01:08,070
alpha right now but it is coming along

00:01:05,129 --> 00:01:10,590
pretty nicely so when I wrote my Libby Y

00:01:08,070 --> 00:01:13,020
binding I used GP trixie which is

00:01:10,590 --> 00:01:14,369
amazing you should totally use it if

00:01:13,020 --> 00:01:18,000
you're writing a native call module it

00:01:14,369 --> 00:01:21,210
automates just about all of the annoying

00:01:18,000 --> 00:01:22,979
boilerplate for you so then I went

00:01:21,210 --> 00:01:25,439
through and I modified it I got it

00:01:22,979 --> 00:01:28,880
compiling and so I ran it for the first

00:01:25,439 --> 00:01:31,770
time segfault

00:01:28,880 --> 00:01:33,689
so when you're when you're looking at

00:01:31,770 --> 00:01:35,970
this sort of a thing you have to make

00:01:33,689 --> 00:01:39,869
sure that all of the structs that you're

00:01:35,970 --> 00:01:41,759
using all the pointers all the are are

00:01:39,869 --> 00:01:44,040
instantiating on the Perl 6 side which

00:01:41,759 --> 00:01:45,840
creates the memory for you so that the

00:01:44,040 --> 00:01:50,450
seed library can actually find it and

00:01:45,840 --> 00:01:53,310
use it so here's my pretty Mac picture

00:01:50,450 --> 00:01:55,439
so my implementation as I've said this

00:01:53,310 --> 00:01:57,990
is AC library it's an imperative style

00:01:55,439 --> 00:02:00,149
as you would expect so I wrote my raw

00:01:57,990 --> 00:02:01,770
binding using that same style and then I

00:02:00,149 --> 00:02:05,850
created an object-oriented wrapper

00:02:01,770 --> 00:02:08,369
around it I have a list of widgets here

00:02:05,850 --> 00:02:10,259
there are 23 different widgets that I

00:02:08,369 --> 00:02:13,590
have currently implemented some of which

00:02:10,259 --> 00:02:15,350
are incomplete on the C library side

00:02:13,590 --> 00:02:17,880
so all of the available methods are

00:02:15,350 --> 00:02:19,920
usable but you cannot get data out of

00:02:17,880 --> 00:02:25,470
these ones that have the little I next

00:02:19,920 --> 00:02:27,780
to them so as I said the limitations you

00:02:25,470 --> 00:02:29,760
can you cannot directly modify the

00:02:27,780 --> 00:02:32,730
attributes inside of these because they

00:02:29,760 --> 00:02:33,780
are generated on the C side which was

00:02:32,730 --> 00:02:37,320
something that was a little bit

00:02:33,780 --> 00:02:40,740
frustrating at the onset thankfully the

00:02:37,320 --> 00:02:45,180
library provides methods to actually

00:02:40,740 --> 00:02:46,770
modify all of these needed values as

00:02:45,180 --> 00:02:48,090
I've said the widgets some of them are

00:02:46,770 --> 00:02:50,730
not implemented some of them are

00:02:48,090 --> 00:02:54,120
undergoing heavy reworking and a lot of

00:02:50,730 --> 00:02:57,240
those I have not implemented windows

00:02:54,120 --> 00:03:00,150
itself has a few issues with redraw

00:02:57,240 --> 00:03:02,280
performance where you get it blinks

00:03:00,150 --> 00:03:04,440
white whenever whenever it has to redraw

00:03:02,280 --> 00:03:06,210
because the redraw isn't fast enough

00:03:04,440 --> 00:03:08,970
that's also on the C side and that's

00:03:06,210 --> 00:03:10,620
being worked on and of course since this

00:03:08,970 --> 00:03:12,270
is in heavy alpha it's a moving target

00:03:10,620 --> 00:03:16,770
which is making a little harder to

00:03:12,270 --> 00:03:19,530
implement so that's what I've been

00:03:16,770 --> 00:03:21,650
working on so far and I'm looking for

00:03:19,530 --> 00:03:21,650

YouTube URL: https://www.youtube.com/watch?v=jE1AvzMyvag


