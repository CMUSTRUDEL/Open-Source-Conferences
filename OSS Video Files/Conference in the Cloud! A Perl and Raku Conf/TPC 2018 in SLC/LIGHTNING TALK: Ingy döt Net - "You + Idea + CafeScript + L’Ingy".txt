Title: LIGHTNING TALK: Ingy döt Net - "You + Idea + CafeScript + L’Ingy"
Publication date: 2018-06-20
Playlist: TPC 2018 in SLC
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:10,880
everybody I'm engi dotnet and uh now

00:00:03,689 --> 00:00:13,320
it's here pretty cool huh

00:00:10,880 --> 00:00:16,710
okay so this isn't a lightning talk it's

00:00:13,320 --> 00:00:19,609
a link etalk remember that earlier today

00:00:16,710 --> 00:00:22,920
I gave a talk about testimo testimonials

00:00:19,609 --> 00:00:24,539
for writing tests these tests run in any

00:00:22,920 --> 00:00:27,830
programming language I'll show you

00:00:24,539 --> 00:00:30,150
something right here okay so we have

00:00:27,830 --> 00:00:31,710
four lines we have a hash bang line at

00:00:30,150 --> 00:00:34,200
the front at the top and it's running

00:00:31,710 --> 00:00:36,090
test demo we set two variables one two

00:00:34,200 --> 00:00:38,280
hello what and when to float to world

00:00:36,090 --> 00:00:40,500
and we check that the interpolation of

00:00:38,280 --> 00:00:44,160
test ml is equal to hello world and this

00:00:40,500 --> 00:00:47,719
is the label for the test so let's run

00:00:44,160 --> 00:00:52,680
this test in five programming languages

00:00:47,719 --> 00:00:56,399
okay okay so it works in Perl 5 under

00:00:52,680 --> 00:00:58,730
prove it's great it works in Perl 6

00:00:56,399 --> 00:01:02,850
summits for this conference

00:00:58,730 --> 00:01:04,949
it works in Python 2 so far and it also

00:01:02,850 --> 00:01:07,830
works using pythons back-end framework

00:01:04,949 --> 00:01:10,560
that which isn't tap and it works in any

00:01:07,830 --> 00:01:12,150
back-end framework I just use tap for

00:01:10,560 --> 00:01:12,930
all of them I mean I provide tap for all

00:01:12,150 --> 00:01:14,460
of them

00:01:12,930 --> 00:01:20,549
it works in JavaScript of my personal

00:01:14,460 --> 00:01:26,909
favorite it runs in CoffeeScript test

00:01:20,549 --> 00:01:31,020
them out compiles to linkie linkie is

00:01:26,909 --> 00:01:35,090
another new language it's an extremely

00:01:31,020 --> 00:01:35,090
simple one it's lisp + json

00:01:35,159 --> 00:01:39,240
so here's that program compiled to linky

00:01:37,740 --> 00:01:42,630
sorry that json is a little hard to read

00:01:39,240 --> 00:01:47,759
but you can see it's just a arrays of

00:01:42,630 --> 00:01:49,170
expressions okay

00:01:47,759 --> 00:01:50,789
so the test amount compiler is written

00:01:49,170 --> 00:01:52,619
in CoffeeScript it's the cleanest syntax

00:01:50,789 --> 00:01:54,479
I've seen it trans files that means

00:01:52,619 --> 00:01:56,549
compiles from one language to another to

00:01:54,479 --> 00:01:59,069
JavaScript runs on the server and the

00:01:56,549 --> 00:02:00,569
browser I'm gonna prove that right here

00:01:59,069 --> 00:02:02,060
and we're going to so I made a

00:02:00,569 --> 00:02:05,429
playground for all this you can run

00:02:02,060 --> 00:02:07,830
hundreds of tests in this playground you

00:02:05,429 --> 00:02:09,530
can run the output in tap but here's the

00:02:07,830 --> 00:02:13,500
compiler output in linky in the middle

00:02:09,530 --> 00:02:16,230
okay enough about that so I love at me

00:02:13,500 --> 00:02:17,489
as if I started it in 2006 modules are

00:02:16,230 --> 00:02:20,549
the thing that make language is great

00:02:17,489 --> 00:02:22,170
publish all of your ideas your modules

00:02:20,549 --> 00:02:24,150
in all languages but what's acne isms

00:02:22,170 --> 00:02:27,720
Holy Grail to write a motto a bunch and

00:02:24,150 --> 00:02:31,890
publish it everywhere so in 2018 we can

00:02:27,720 --> 00:02:33,930
get acne ism if linky can run anywhere

00:02:31,890 --> 00:02:35,640
which i just saw that it can then I

00:02:33,930 --> 00:02:38,120
write a motto and linky and I upload it

00:02:35,640 --> 00:02:41,940
everywhere but link is unraidable

00:02:38,120 --> 00:02:43,680
introducing cafe scripts if i fork

00:02:41,940 --> 00:02:46,530
CoffeeScript to cafe scripts with a

00:02:43,680 --> 00:02:48,120
press of a button then I replace the

00:02:46,530 --> 00:02:52,470
JavaScript writing component which is

00:02:48,120 --> 00:02:54,139
one file module with a leggy writer then

00:02:52,470 --> 00:02:57,109
your module runs everywhere

00:02:54,139 --> 00:03:00,389
Acme assemble is alive and we're done

00:02:57,109 --> 00:03:06,120
we're more appropriately we're done for

00:03:00,389 --> 00:03:08,730
everybody in all languages ok ok so cafe

00:03:06,120 --> 00:03:13,200
cafe script 2.0 is now your ideas are

00:03:08,730 --> 00:03:16,799
enjoyed everywhere but every language

00:03:13,200 --> 00:03:18,690
requires a linky eval module that runs

00:03:16,799 --> 00:03:21,090
the code in the engi eval loop because

00:03:18,690 --> 00:03:23,220
it's you know you have to interpret run

00:03:21,090 --> 00:03:24,989
through the list but that's a easy

00:03:23,220 --> 00:03:26,609
problem to solve this code will be

00:03:24,989 --> 00:03:29,130
slower than native code so next we make

00:03:26,609 --> 00:03:30,690
a link to native compilers so I can go

00:03:29,130 --> 00:03:34,709
link e straight to Ruby so it's pure

00:03:30,690 --> 00:03:36,870
Ruby or I can go link e to C or I can go

00:03:34,709 --> 00:03:44,480
linking a JVM for the jvm languages or I

00:03:36,870 --> 00:03:44,480
can make a link e to LOV m etc QED right

00:03:45,960 --> 00:03:54,580

YouTube URL: https://www.youtube.com/watch?v=RtN8CKozIf0


