Title: Buddy Burden - "Making Dates Easy(er) in Perl"
Publication date: 2018-06-19
Playlist: TPC 2018 in SLC
Description: 
	We all know dates should be easy–not only in Perl, but everywhere–but somehow they aren’t. In this three-part talk, I’ll cover the following topics:

What makes dates hard? This will involve some science, some history, and some ranting.
What are some Perl solutions to the problems? In this case, “solutions” == “modules”: I’ll briefly discuss the most popular Perl date modules and what each are best at.
How can Date::Easy solve some of those problems? My own entry into the dating game is Date::Easy; it isn’t a silver bullet (because nothing is), but there’s a class of problems it tackles really well. (Since the talk isn’t really meant as a commercial for my module, this will actually be the briefest part of the talk.)
At the end of the hour, you’ll have a better understanding of dates and times, as well as a new appreciation for those Perl modules that dare to tackle this thorny issue.
Captions: 
	00:00:00,030 --> 00:00:05,730
all right my name is buddy burden okay

00:00:02,879 --> 00:00:08,730
and I wrote a module called date easy a

00:00:05,730 --> 00:00:11,790
couple of years ago and I wrote a big

00:00:08,730 --> 00:00:13,740
long huge blog post on it series of blog

00:00:11,790 --> 00:00:15,360
posts and you get you guys to read that

00:00:13,740 --> 00:00:17,400
you don't need me to repeat that stuff

00:00:15,360 --> 00:00:21,000
so I want to do something different

00:00:17,400 --> 00:00:22,470
today should I give a couple more

00:00:21,000 --> 00:00:33,719
minutes for people to come in or shall

00:00:22,470 --> 00:00:35,040
we just launch one more man okay so if

00:00:33,719 --> 00:00:39,980
you do want to check out my blog

00:00:35,040 --> 00:00:44,120
it's a the purl blog stopper org

00:00:39,980 --> 00:00:44,120
barefoot coder that's me

00:00:46,670 --> 00:00:49,729
[Music]

00:00:53,120 --> 00:01:00,390
that's close enough yeah so based on my

00:00:58,140 --> 00:01:03,199
experience writing the date easy module

00:01:00,390 --> 00:01:07,460
I wanted to talk to you today about

00:01:03,199 --> 00:01:11,880
making dates easy and pearl alright well

00:01:07,460 --> 00:01:13,050
easier anyway and and at the end of the

00:01:11,880 --> 00:01:15,509
talk I want to go through some pearl

00:01:13,050 --> 00:01:17,700
modules and look at some code but I

00:01:15,509 --> 00:01:20,220
think that before we can figure out how

00:01:17,700 --> 00:01:22,740
to make dates easier first we need to

00:01:20,220 --> 00:01:24,600
really understand why they're hard you

00:01:22,740 --> 00:01:27,030
know not just in pearl but in all

00:01:24,600 --> 00:01:30,030
software because they shouldn't be right

00:01:27,030 --> 00:01:32,280
I mean we all understand dates as humans

00:01:30,030 --> 00:01:35,160
and and in fact we understood them at a

00:01:32,280 --> 00:01:36,509
very young age right which you probably

00:01:35,160 --> 00:01:39,899
already knew especially if you have

00:01:36,509 --> 00:01:42,270
children myself have three children ages

00:01:39,899 --> 00:01:43,350
19 12 and 6 part of a complicated social

00:01:42,270 --> 00:01:45,479
experiment that I don't want to get into

00:01:43,350 --> 00:01:47,580
right now but I can tell you from

00:01:45,479 --> 00:01:49,770
personal experience and also because I

00:01:47,580 --> 00:01:52,920
googled it that children start learning

00:01:49,770 --> 00:01:54,869
dates and times at four or five and by

00:01:52,920 --> 00:01:57,780
the time they get to six to eight they

00:01:54,869 --> 00:01:59,280
got it down pat so if dates are so easy

00:01:57,780 --> 00:02:01,890
we can do them when we're children

00:01:59,280 --> 00:02:03,420
then what's the computers problem right

00:02:01,890 --> 00:02:04,890
I mean well maybe it's one of those

00:02:03,420 --> 00:02:06,840
things that we internalize at such a

00:02:04,890 --> 00:02:08,640
young age that we forget how complex it

00:02:06,840 --> 00:02:09,750
is until we try to explain it to

00:02:08,640 --> 00:02:11,820
something that has no frame of reference

00:02:09,750 --> 00:02:18,930
for it like a computer you know

00:02:11,820 --> 00:02:19,440
something like walking so maybe that's

00:02:18,930 --> 00:02:21,810
it

00:02:19,440 --> 00:02:23,100
or maybe it's something else so let's

00:02:21,810 --> 00:02:24,360
see if we can let's dive in and see if

00:02:23,100 --> 00:02:28,110
we can figure out what the problem is so

00:02:24,360 --> 00:02:32,430
let's start with units of time right and

00:02:28,110 --> 00:02:33,959
let's start with a second now sometimes

00:02:32,430 --> 00:02:37,130
you need units of times smaller than a

00:02:33,959 --> 00:02:39,560
second especially for profiling code or

00:02:37,130 --> 00:02:41,760
at writing software for a racetrack

00:02:39,560 --> 00:02:43,650
actually outside of profiling code you

00:02:41,760 --> 00:02:46,170
don't often need time less than a second

00:02:43,650 --> 00:02:49,829
that often right so that's a good place

00:02:46,170 --> 00:02:54,769
to start and we can build up from there

00:02:49,829 --> 00:03:01,110
we can do minutes and hours and days

00:02:54,769 --> 00:03:03,209
weeks months years and we could even go

00:03:01,110 --> 00:03:04,650
higher than years but you know what this

00:03:03,209 --> 00:03:05,900
is a good list right this is a good

00:03:04,650 --> 00:03:08,910
place to stop

00:03:05,900 --> 00:03:11,880
so what is up there that's so hard for a

00:03:08,910 --> 00:03:13,200
computer to get right I mean there's a

00:03:11,880 --> 00:03:16,500
lot of weird numbers up there for sure

00:03:13,200 --> 00:03:20,430
right a lot of funky bases and there's

00:03:16,500 --> 00:03:22,320
no pattern really you could almost see

00:03:20,430 --> 00:03:25,590
something with 12 right I mean there's a

00:03:22,320 --> 00:03:27,270
there's a 12 out of 24 to 60s but not

00:03:25,590 --> 00:03:29,760
really then you got the 7 there's

00:03:27,270 --> 00:03:33,210
nothing up there divisible by 7 and 365

00:03:29,760 --> 00:03:34,740
that's just crazy talk but if you think

00:03:33,210 --> 00:03:36,420
about it from the computers perspective

00:03:34,740 --> 00:03:38,400
as far as its concerned any base that's

00:03:36,420 --> 00:03:40,440
not base 2 is already weird right so

00:03:38,400 --> 00:03:43,920
base 365 is not any worse than base 10

00:03:40,440 --> 00:03:45,240
and ok it's a lot of random numbers in

00:03:43,920 --> 00:03:48,420
this random in the sense that there's no

00:03:45,240 --> 00:03:51,030
pattern to the progression so you need a

00:03:48,420 --> 00:03:53,810
lookup table it's still not hard alright

00:03:51,030 --> 00:03:57,230
so I think we need to go a little deeper

00:03:53,810 --> 00:03:59,580
so if we get rid of the top parts there

00:03:57,230 --> 00:04:02,070
what we're left with is a set of 9

00:03:59,580 --> 00:04:04,140
equations and water equations they're

00:04:02,070 --> 00:04:07,920
statements of mathematical truth right

00:04:04,140 --> 00:04:09,750
so all these are true right now yeah so

00:04:07,920 --> 00:04:11,790
I mean I just said that nothing up there

00:04:09,750 --> 00:04:13,440
was divisible by 7 so obviously anything

00:04:11,790 --> 00:04:14,820
that involves weeks we can knock that

00:04:13,440 --> 00:04:17,190
out right away it's it's just an

00:04:14,820 --> 00:04:18,959
approximation so that that's 2 down and

00:04:17,190 --> 00:04:20,459
you know for the rest let's start at the

00:04:18,959 --> 00:04:24,860
bottom and work our way up right

00:04:20,459 --> 00:04:27,240
so are there 365 days in a year yeah

00:04:24,860 --> 00:04:28,680
yeah so here's where we run into the

00:04:27,240 --> 00:04:32,280
first major problem with trying to make

00:04:28,680 --> 00:04:33,800
dates easy astronomy right because years

00:04:32,280 --> 00:04:35,880
and days have very precise astronomical

00:04:33,800 --> 00:04:37,410
definitions right a year is the amount

00:04:35,880 --> 00:04:39,419
of time it takes the earth to revolve

00:04:37,410 --> 00:04:40,860
around the Sun and a day is the amount

00:04:39,419 --> 00:04:43,230
of time it takes it to rotate on its

00:04:40,860 --> 00:04:45,120
axis and because we define year and day

00:04:43,230 --> 00:04:46,470
in this way it's very useful right this

00:04:45,120 --> 00:04:48,960
is what gives us summer and winter and

00:04:46,470 --> 00:04:51,330
day and night and solstices noon and

00:04:48,960 --> 00:04:53,820
midnight but the problem is that the

00:04:51,330 --> 00:04:59,520
rotations just don't divide evenly into

00:04:53,820 --> 00:05:01,470
the revolutions so it's not 365 it's the

00:04:59,520 --> 00:05:03,300
real number is much closer to 365 and a

00:05:01,470 --> 00:05:05,520
quarter all right and that means that

00:05:03,300 --> 00:05:07,680
for every four revolutions you got an

00:05:05,520 --> 00:05:10,230
extra rotation which in turn means that

00:05:07,680 --> 00:05:13,050
reality has one more day than your

00:05:10,230 --> 00:05:15,690
calendar so the calendars a day short

00:05:13,050 --> 00:05:16,560
and if your calendars a day short every

00:05:15,690 --> 00:05:18,270
four years

00:05:16,560 --> 00:05:19,620
it doesn't take too long before weird

00:05:18,270 --> 00:05:21,270
stuff is starting to happen like you're

00:05:19,620 --> 00:05:24,360
celebrating Midsummer's Eve with snow on

00:05:21,270 --> 00:05:26,310
the ground so we got to fix this right

00:05:24,360 --> 00:05:28,830
we're gonna have to add a day to the

00:05:26,310 --> 00:05:30,570
calendar every four years and you know

00:05:28,830 --> 00:05:32,910
you could start with any year just pick

00:05:30,570 --> 00:05:35,550
a year annum 2003 right and then we'd

00:05:32,910 --> 00:05:37,980
add a day in 2003 and then in 2007 and

00:05:35,550 --> 00:05:40,020
2011 but that doesn't make much sense it

00:05:37,980 --> 00:05:42,630
would make much better sense if we've

00:05:40,020 --> 00:05:44,460
said you know what every year that's

00:05:42,630 --> 00:05:46,639
divisible by four we're gonna add an

00:05:44,460 --> 00:05:48,330
extra day so let's do that

00:05:46,639 --> 00:05:51,600
congratulations we just invented leap

00:05:48,330 --> 00:05:53,340
years so how do leap years work every

00:05:51,600 --> 00:05:54,300
four years we add an extra day and we

00:05:53,340 --> 00:05:56,430
put it at the end of the year because

00:05:54,300 --> 00:05:59,310
that makes sense no wait we actually put

00:05:56,430 --> 00:06:00,870
it in February because February got

00:05:59,310 --> 00:06:05,460
stiffed on days and we felt sorry for it

00:06:00,870 --> 00:06:06,780
I don't know and so we're gonna know

00:06:05,460 --> 00:06:09,360
what it's a leap year or not by whether

00:06:06,780 --> 00:06:11,070
it's divisible by four so let's pick a

00:06:09,360 --> 00:06:15,330
year divisible by four

00:06:11,070 --> 00:06:16,860
how about 1888 okay I love 1888 because

00:06:15,330 --> 00:06:18,270
it's a thousand and three eighths and

00:06:16,860 --> 00:06:20,640
they're all divisible by four right

00:06:18,270 --> 00:06:22,470
obviously so 1888 definitely divisible

00:06:20,640 --> 00:06:25,380
by four definitely a leap year which

00:06:22,470 --> 00:06:28,289
means four years later in 1892 it's also

00:06:25,380 --> 00:06:32,130
a leap year right four years later 1896

00:06:28,289 --> 00:06:34,830
also a leap year 2000 1900 sorry also a

00:06:32,130 --> 00:06:37,160
leap year 1904 also a little wait what

00:06:34,830 --> 00:06:40,410
people are objecting already I see

00:06:37,160 --> 00:06:44,940
what's that you say 1900 not a leap year

00:06:40,410 --> 00:06:48,060
no it's not but obviously it's divisible

00:06:44,940 --> 00:06:51,419
by four right

00:06:48,060 --> 00:06:52,889
so how could it not be a leap year okay

00:06:51,419 --> 00:06:54,360
so remember when I said the real number

00:06:52,889 --> 00:06:57,960
of days is much closer to three or sixty

00:06:54,360 --> 00:07:01,130
five and a quarter it is but it's even

00:06:57,960 --> 00:07:03,450
closer to 300 sixty five point two four

00:07:01,130 --> 00:07:05,010
so and that means that if you add a day

00:07:03,450 --> 00:07:06,270
over four years and you do that for a

00:07:05,010 --> 00:07:08,639
hundred years then you've added a day

00:07:06,270 --> 00:07:10,320
too much and you know being off by a day

00:07:08,639 --> 00:07:11,910
every 100 years is not nearly as bad as

00:07:10,320 --> 00:07:14,340
being a off by a day every four years

00:07:11,910 --> 00:07:16,590
but it's still not great so we're gonna

00:07:14,340 --> 00:07:18,120
fix the rule right every four years is a

00:07:16,590 --> 00:07:20,130
leap year but every hundred years it's

00:07:18,120 --> 00:07:22,470
not right so if the years divisible by

00:07:20,130 --> 00:07:24,750
100 it's not a leap year right so if we

00:07:22,470 --> 00:07:27,900
go back up then to 1800 that's not a

00:07:24,750 --> 00:07:29,960
leap year right and again 1900 Nottoli

00:07:27,900 --> 00:07:33,860
year 2000 not

00:07:29,960 --> 00:07:36,590
year 2100 people are objecting again my

00:07:33,860 --> 00:07:39,590
you are a contrary crowd all right

00:07:36,590 --> 00:07:42,620
what's that now 2000 was a leap year why

00:07:39,590 --> 00:07:44,000
yes yes it was okay obviously 2000 is

00:07:42,620 --> 00:07:46,220
divisible by a hundred because it ends

00:07:44,000 --> 00:07:48,650
at two zeroes hell it ends in three so

00:07:46,220 --> 00:07:50,110
how could it not be a leap year or how

00:07:48,650 --> 00:07:52,940
can it be a leap year

00:07:50,110 --> 00:07:54,500
okay well remember how I said the number

00:07:52,940 --> 00:07:56,569
of days was closer to three sixty five

00:07:54,500 --> 00:07:59,090
point two four it is but it's still

00:07:56,569 --> 00:08:00,979
closer to 364 point two four to five

00:07:59,090 --> 00:08:02,419
which means that if you added every four

00:08:00,979 --> 00:08:04,160
years you take away into every hundred

00:08:02,419 --> 00:08:05,750
years then every 400 years you're off by

00:08:04,160 --> 00:08:08,479
a day again but any other direction so

00:08:05,750 --> 00:08:10,970
the really real rule is and stop messing

00:08:08,479 --> 00:08:12,110
with you the really real rule is every

00:08:10,970 --> 00:08:13,220
four years is a leap year except that

00:08:12,110 --> 00:08:16,210
every hundred years is not except that

00:08:13,220 --> 00:08:19,250
every 400 years it is again simple right

00:08:16,210 --> 00:08:22,130
now what I find particularly fascinating

00:08:19,250 --> 00:08:24,289
about this little oddity is most of the

00:08:22,130 --> 00:08:26,180
people in this room were alive in 2000 I

00:08:24,289 --> 00:08:29,599
think there's at least one that I

00:08:26,180 --> 00:08:31,430
brought myself that's not and I'm gonna

00:08:29,599 --> 00:08:32,750
go out on a limb here and say that most

00:08:31,430 --> 00:08:36,740
of the people in this room were all were

00:08:32,750 --> 00:08:37,909
not alive in 1900 could have some

00:08:36,740 --> 00:08:40,490
hundred 20 year olds that I'm not aware

00:08:37,909 --> 00:08:41,870
of it it seems a safe bet and you know

00:08:40,490 --> 00:08:43,279
it's not pleasant to think about it but

00:08:41,870 --> 00:08:45,230
most of the people in this room are not

00:08:43,279 --> 00:08:49,010
gonna be alive in the year 2100 either

00:08:45,230 --> 00:08:51,140
bomber so what that means is for the

00:08:49,010 --> 00:08:52,250
majority the people in this room and if

00:08:51,140 --> 00:08:54,649
you think about it for the majority the

00:08:52,250 --> 00:08:56,240
people on the earth today the fact that

00:08:54,649 --> 00:08:57,910
every hundred years is an exception to

00:08:56,240 --> 00:09:00,140
the every four years is a leap year roll

00:08:57,910 --> 00:09:02,540
doesn't matter to them and has no

00:09:00,140 --> 00:09:05,360
practical effect on their everyday lives

00:09:02,540 --> 00:09:06,680
because the only example of a year

00:09:05,360 --> 00:09:09,160
divisible by a hundred in their living

00:09:06,680 --> 00:09:12,100
memory is an exception to the exception

00:09:09,160 --> 00:09:17,029
right so it doesn't matter to you as a

00:09:12,100 --> 00:09:21,890
human but as a programmer that's

00:09:17,029 --> 00:09:23,209
different so definitely not 365 days in

00:09:21,890 --> 00:09:25,100
a year bummer

00:09:23,209 --> 00:09:26,329
okay but how about twelve months right

00:09:25,100 --> 00:09:27,829
we're pretty safe with twelve months

00:09:26,329 --> 00:09:31,160
there's always going to be twelve months

00:09:27,829 --> 00:09:33,310
in the calendar right hmm well it

00:09:31,160 --> 00:09:35,420
depends on what you mean by the calendar

00:09:33,310 --> 00:09:37,760
all right because we usually act like

00:09:35,420 --> 00:09:40,220
there's only one calendar but that's not

00:09:37,760 --> 00:09:42,410
right right there's the Hebrew calendar

00:09:40,220 --> 00:09:42,960
of course it also always has 12 months

00:09:42,410 --> 00:09:44,490
it

00:09:42,960 --> 00:09:46,589
when it doesn't because sometimes it has

00:09:44,490 --> 00:09:49,170
13 there's also the Chinese calendar

00:09:46,589 --> 00:09:50,490
which also always has 12 months except

00:09:49,170 --> 00:09:53,160
when it doesn't because sometimes it has

00:09:50,490 --> 00:09:55,710
13 - there's the Islamic calendar

00:09:53,160 --> 00:09:57,120
it always has 12 months but there's all

00:09:55,710 --> 00:09:58,860
kinds of calendars out there right

00:09:57,120 --> 00:10:00,270
remember the Mayan calendar remember how

00:09:58,860 --> 00:10:02,040
the road was supposed to end in 2012 of

00:10:00,270 --> 00:10:04,170
us not so much

00:10:02,040 --> 00:10:09,089
well the Mayan calendar actually has 18

00:10:04,170 --> 00:10:10,709
months okay but to be fair the calendar

00:10:09,089 --> 00:10:13,050
that we usually think of as the calendar

00:10:10,709 --> 00:10:14,970
is at least according to Wikipedia the

00:10:13,050 --> 00:10:18,830
most widely used civil calendar in the

00:10:14,970 --> 00:10:22,410
world and it always has 12 months right

00:10:18,830 --> 00:10:26,330
so the calendar by the way was given to

00:10:22,410 --> 00:10:26,330
us by this fellow anybody who that is

00:10:26,480 --> 00:10:31,770
Pope Gregory you know which one Pope

00:10:30,089 --> 00:10:33,709
Gregory the 13th who is of course the

00:10:31,770 --> 00:10:36,899
guy who gave us the Gregorian calendar

00:10:33,709 --> 00:10:38,310
and he's the one who added the hundred

00:10:36,899 --> 00:10:40,950
years but not every 400 years kind of

00:10:38,310 --> 00:10:43,050
exception and of course he was working

00:10:40,950 --> 00:10:45,990
with a previous calendar which was given

00:10:43,050 --> 00:10:48,209
to us by this fella which is you know

00:10:45,990 --> 00:10:51,029
this guy is right Julius Caesar who gave

00:10:48,209 --> 00:10:52,110
us the Julian calendar and he's the one

00:10:51,029 --> 00:10:54,029
who set the months at their current

00:10:52,110 --> 00:10:57,330
lengths and put the leap day every four

00:10:54,029 --> 00:10:59,640
years and before that though things were

00:10:57,330 --> 00:11:02,610
kind of a mess right so let's take a

00:10:59,640 --> 00:11:05,550
month how about October right October

00:11:02,610 --> 00:11:07,320
lovely month Halloween love it the word

00:11:05,550 --> 00:11:10,470
October is in fact composed of two parts

00:11:07,320 --> 00:11:11,970
right octo and brr-brr presumably

00:11:10,470 --> 00:11:17,390
because this is starting to get cold but

00:11:11,970 --> 00:11:19,709
what about octo right what is octo mean

00:11:17,390 --> 00:11:23,459
yeah exactly right

00:11:19,709 --> 00:11:25,650
octo means egg octopus octagon - Thorpe

00:11:23,459 --> 00:11:29,060
right everybody knows octo means eight

00:11:25,650 --> 00:11:31,079
so October is obviously the eighth month

00:11:29,060 --> 00:11:33,089
except that it's not because it's the

00:11:31,079 --> 00:11:35,490
tenth month right so what happened

00:11:33,089 --> 00:11:37,890
so probably maybe what happened

00:11:35,490 --> 00:11:39,329
historians argue about this is that we

00:11:37,890 --> 00:11:41,339
used to have ten months in the calendar

00:11:39,329 --> 00:11:41,940
but then they added two months January

00:11:41,339 --> 00:11:43,589
and February

00:11:41,940 --> 00:11:44,940
so they went at the beginning of the

00:11:43,589 --> 00:11:46,740
calendar that pushed everything down so

00:11:44,940 --> 00:11:49,470
October used to be the eighth month now

00:11:46,740 --> 00:11:51,950
it's the tenth month right maybe I know

00:11:49,470 --> 00:11:51,950
who this guy is

00:11:52,360 --> 00:11:56,569
no of course you don't this is Numa

00:11:54,829 --> 00:11:57,889
Pompilius and he's the second emperor in

00:11:56,569 --> 00:12:00,199
Rome whoever remembers the second

00:11:57,889 --> 00:12:02,779
emperor of Rome okay but he's probably

00:12:00,199 --> 00:12:04,720
the guy who invented van you air in

00:12:02,779 --> 00:12:07,429
February or at least decreed it to be so

00:12:04,720 --> 00:12:08,959
or maybe he didn't maybe January

00:12:07,429 --> 00:12:10,429
February were always there but he picked

00:12:08,959 --> 00:12:12,829
them up and moved them to the front of

00:12:10,429 --> 00:12:14,420
the calendar or maybe that happened

00:12:12,829 --> 00:12:16,459
later and he didn't really do anything

00:12:14,420 --> 00:12:18,079
because the problem is that in the

00:12:16,459 --> 00:12:20,449
ancient Roman times like pre Julius

00:12:18,079 --> 00:12:22,160
Caesar the calendar was very confusing

00:12:20,449 --> 00:12:23,839
and this is because of the second great

00:12:22,160 --> 00:12:27,769
complication with trying to make dates

00:12:23,839 --> 00:12:29,660
easy politics right calendars have

00:12:27,769 --> 00:12:31,160
religious implications and government

00:12:29,660 --> 00:12:32,629
implications and that means that things

00:12:31,160 --> 00:12:35,029
get messy when you're trying to work out

00:12:32,629 --> 00:12:37,040
what days go where so even if you're

00:12:35,029 --> 00:12:39,589
including January in February for

00:12:37,040 --> 00:12:41,569
instance there were still only 355 days

00:12:39,589 --> 00:12:43,670
in the ancient Roman calendar so they

00:12:41,569 --> 00:12:44,899
were a full ten days off before you even

00:12:43,670 --> 00:12:48,709
get to the whole EBA issue

00:12:44,899 --> 00:12:50,389
so what did they do well basically they

00:12:48,709 --> 00:12:52,850
just threw in an extra month every now

00:12:50,389 --> 00:12:54,679
and again and how did they know when to

00:12:52,850 --> 00:12:57,199
throw in an extra month well the

00:12:54,679 --> 00:13:00,050
Pontifex is decided the Pontifex is were

00:12:57,199 --> 00:13:02,389
the folks who carried all the religious

00:13:00,050 --> 00:13:04,040
power in ancient Rome and obviously the

00:13:02,389 --> 00:13:05,089
calendar is a religious thing right the

00:13:04,040 --> 00:13:06,529
calendars were all the religious

00:13:05,089 --> 00:13:08,509
festivals are where all the feast days

00:13:06,529 --> 00:13:10,579
are so the Pontifex has got to choose

00:13:08,509 --> 00:13:12,410
the calendar and they decided when there

00:13:10,579 --> 00:13:13,819
would be an extra month but of course

00:13:12,410 --> 00:13:15,139
the civil power was controlled by the

00:13:13,819 --> 00:13:17,170
magistrates and in particular the

00:13:15,139 --> 00:13:19,850
consuls were the top two magistrates and

00:13:17,170 --> 00:13:21,259
they took office at the beginning of the

00:13:19,850 --> 00:13:23,059
year and left office at the end of the

00:13:21,259 --> 00:13:24,949
year so what the pontiff X's would do is

00:13:23,059 --> 00:13:27,319
they would wait to see who got elected

00:13:24,949 --> 00:13:29,120
as magistrates and then decide whether

00:13:27,319 --> 00:13:31,519
they liked them or not and then put in

00:13:29,120 --> 00:13:33,230
the extra month and the extra month went

00:13:31,519 --> 00:13:37,519
in the same place that the leap day goes

00:13:33,230 --> 00:13:38,870
in now right in February so basically

00:13:37,519 --> 00:13:41,600
they were waiting till January to see

00:13:38,870 --> 00:13:42,740
who got elected and then deciding that

00:13:41,600 --> 00:13:45,410
they'd throw in an extra month before

00:13:42,740 --> 00:13:46,819
the end of February so in ancient Rome

00:13:45,410 --> 00:13:48,559
if you were in the farthest reaches of

00:13:46,819 --> 00:13:50,990
the Empire you could be in the situation

00:13:48,559 --> 00:13:52,579
where by the time you even knew you were

00:13:50,990 --> 00:13:56,119
supposed to be observing the extra month

00:13:52,579 --> 00:13:57,529
it was already gone and in the second

00:13:56,119 --> 00:14:00,259
year and I'm sorry in the years after

00:13:57,529 --> 00:14:01,749
the Second Punic War the situation got

00:14:00,259 --> 00:14:04,579
so out of hand they kept throwing in

00:14:01,749 --> 00:14:05,600
extra months every year for a while they

00:14:04,579 --> 00:14:07,249
started calling them the years of

00:14:05,600 --> 00:14:09,769
confusion because the average Roman

00:14:07,249 --> 00:14:12,860
citizen so often had no idea what the

00:14:09,769 --> 00:14:14,509
date was supposed to be so now we have

00:14:12,860 --> 00:14:16,610
the Julian calendar comes along and

00:14:14,509 --> 00:14:17,899
fixes all this problem right forget the

00:14:16,610 --> 00:14:19,910
late months says the Julian calendar

00:14:17,899 --> 00:14:21,350
we're gonna do leap days instead but of

00:14:19,910 --> 00:14:22,999
course by the time the Julian calendar

00:14:21,350 --> 00:14:25,040
comes around things were already so

00:14:22,999 --> 00:14:27,139
screwed up with the calendar that they

00:14:25,040 --> 00:14:29,980
had to have one year with 14 months in

00:14:27,139 --> 00:14:33,049
it just to get everything back on track

00:14:29,980 --> 00:14:36,439
right but after that always twelve

00:14:33,049 --> 00:14:37,999
months so for the whole twelve months to

00:14:36,439 --> 00:14:41,209
a year thing I think we're gonna have to

00:14:37,999 --> 00:14:42,920
give it a mostly true right there are

00:14:41,209 --> 00:14:44,329
the other calendars and there is the

00:14:42,920 --> 00:14:45,470
whole wackiness of the ancient Roman

00:14:44,329 --> 00:14:47,749
calendar but look as long as you're

00:14:45,470 --> 00:14:48,889
willing to work with the calendar and as

00:14:47,749 --> 00:14:50,749
long as you're willing never to go back

00:14:48,889 --> 00:14:52,069
past Julius Caesar you're pretty safe

00:14:50,749 --> 00:14:53,929
with this one so I don't want to say

00:14:52,069 --> 00:14:57,410
mythbusted but well we'll leave it as

00:14:53,929 --> 00:14:59,540
mostly true all right now what about

00:14:57,410 --> 00:15:01,249
this whole month is 30 days thing well

00:14:59,540 --> 00:15:02,600
obviously that's wrong because months

00:15:01,249 --> 00:15:04,730
all have different numbers of days

00:15:02,600 --> 00:15:07,639
why do months all have different numbers

00:15:04,730 --> 00:15:09,470
of days for that matter what the heck is

00:15:07,639 --> 00:15:11,749
a month right because we know what a

00:15:09,470 --> 00:15:15,949
year is and we know what a day is so

00:15:11,749 --> 00:15:19,669
it's a month you might want to posit Mon

00:15:15,949 --> 00:15:21,439
yes a month is a month right that is it

00:15:19,669 --> 00:15:23,149
has to do with the amount of time it

00:15:21,439 --> 00:15:24,739
takes the moon to revolve around the

00:15:23,149 --> 00:15:28,329
earth so how long does it take the moon

00:15:24,739 --> 00:15:28,329
to go around the earth you might know

00:15:28,929 --> 00:15:36,110
27-point blah-dee-blah which is what we

00:15:32,480 --> 00:15:38,119
refer to as a sidereal month okay is how

00:15:36,110 --> 00:15:40,129
long it takes the moon to go around the

00:15:38,119 --> 00:15:41,600
earth now if you're standing on the

00:15:40,129 --> 00:15:43,369
earth looking up at the moon you might

00:15:41,600 --> 00:15:44,449
think well I'll just figure out how long

00:15:43,369 --> 00:15:48,079
it takes the moon to go through a

00:15:44,449 --> 00:15:50,439
complete set of phases right which it

00:15:48,079 --> 00:15:54,230
turns out is 29-point blah-dee-blah

00:15:50,439 --> 00:15:56,449
which is what you call a sonata cmon why

00:15:54,230 --> 00:15:57,739
are they different well I don't have

00:15:56,449 --> 00:15:59,569
time to go into a full explanation

00:15:57,739 --> 00:16:00,529
because this is make trying to make

00:15:59,569 --> 00:16:03,049
dates easier or not trying to make

00:16:00,529 --> 00:16:05,179
astrophysics easier but but I encourage

00:16:03,049 --> 00:16:06,860
you to go online afterwards and look it

00:16:05,179 --> 00:16:08,480
up because it's totally fascinating but

00:16:06,860 --> 00:16:10,040
if you think about it when the moon gets

00:16:08,480 --> 00:16:11,149
around to where it used to be around the

00:16:10,040 --> 00:16:12,680
earth

00:16:11,149 --> 00:16:14,420
the phases of the Moon

00:16:12,680 --> 00:16:16,220
have to do with where the Sun is and

00:16:14,420 --> 00:16:19,220
while the moon is going around the earth

00:16:16,220 --> 00:16:21,170
the Earth's not sitting still right so

00:16:19,220 --> 00:16:22,880
basically and the moon gets around to

00:16:21,170 --> 00:16:24,290
the same place it's not in the same

00:16:22,880 --> 00:16:26,839
place relative to the Sun it's got to go

00:16:24,290 --> 00:16:29,930
a little further and in fact it has to

00:16:26,839 --> 00:16:32,720
go to point two days longer and that's

00:16:29,930 --> 00:16:34,640
why this fanatic month is longer and of

00:16:32,720 --> 00:16:37,100
course the makers of all our ancient

00:16:34,640 --> 00:16:38,899
calendars Roman Hebrew Chinese etc they

00:16:37,100 --> 00:16:40,459
were using the phases of the Moon so

00:16:38,899 --> 00:16:43,010
they were using 29-point blah-dee-blah

00:16:40,459 --> 00:16:44,420
days and if you take three or sixty five

00:16:43,010 --> 00:16:45,709
point blah-dee-blah and you divide it by

00:16:44,420 --> 00:16:49,760
twenty nine point blah-dee-blah you

00:16:45,709 --> 00:16:52,190
again oh bloody blah let's do her okay

00:16:49,760 --> 00:16:54,290
so 12 months perfect right of course you

00:16:52,190 --> 00:16:56,089
might think yourself well our months

00:16:54,290 --> 00:16:58,339
alternate between 30 and 31 right

00:16:56,089 --> 00:16:59,480
whereas this is 29 and a half it should

00:16:58,339 --> 00:17:01,640
alternate between twenty and nine and

00:16:59,480 --> 00:17:03,230
thirty that would make better sense well

00:17:01,640 --> 00:17:05,929
it has to do with this pesky

00:17:03,230 --> 00:17:08,120
blah-dee-blah stuff right just like when

00:17:05,929 --> 00:17:10,010
we had three or 65 and a bit that meant

00:17:08,120 --> 00:17:11,900
we had to add an extra day in you have

00:17:10,010 --> 00:17:14,030
12 and a bit you gotta add an extra

00:17:11,900 --> 00:17:15,589
month in every now and again which is

00:17:14,030 --> 00:17:17,290
what the ancient Romans were doing they

00:17:15,589 --> 00:17:19,880
were just doing a terrible job of it now

00:17:17,290 --> 00:17:21,470
remember how I said that the ancient

00:17:19,880 --> 00:17:23,540
Hebrew calendar and current Hebrew

00:17:21,470 --> 00:17:25,550
calendar even sometimes has 13 months

00:17:23,540 --> 00:17:26,990
that's what they were doing - they were

00:17:25,550 --> 00:17:28,760
adjusting they used something called the

00:17:26,990 --> 00:17:30,920
metonic cycle which they inherited from

00:17:28,760 --> 00:17:32,660
the ancient Babylonians and that tells

00:17:30,920 --> 00:17:34,970
them that seven out of every 19 years

00:17:32,660 --> 00:17:36,800
needs an extra month okay

00:17:34,970 --> 00:17:38,510
Chinese calendar doing the same thing

00:17:36,800 --> 00:17:40,070
not using the metonic cycle though they

00:17:38,510 --> 00:17:41,000
arrive at their results independently

00:17:40,070 --> 00:17:44,420
because they're not related to aging

00:17:41,000 --> 00:17:46,670
Babylonians Islamic calendar is always

00:17:44,420 --> 00:17:47,960
twelve months because they just gave up

00:17:46,670 --> 00:17:49,850
on the whole year equals a trip around

00:17:47,960 --> 00:17:51,530
the Sun thing which means that in the

00:17:49,850 --> 00:17:52,880
Islamic calendar the first day of the

00:17:51,530 --> 00:17:54,710
year is a different day every year

00:17:52,880 --> 00:17:57,350
depending on how you're looking at it

00:17:54,710 --> 00:17:58,880
and with the Mayans they said okay we're

00:17:57,350 --> 00:18:00,710
gonna keep the year thing but give up on

00:17:58,880 --> 00:18:04,460
the whole moon thing and that's how they

00:18:00,710 --> 00:18:06,080
were able to make 18 months work out but

00:18:04,460 --> 00:18:08,450
of course an easier solution would just

00:18:06,080 --> 00:18:10,010
be with a view go after you go 12 months

00:18:08,450 --> 00:18:11,240
you got some days leftover just take

00:18:10,010 --> 00:18:12,830
those days and distribute them out

00:18:11,240 --> 00:18:14,510
amongst the rest of the months to make

00:18:12,830 --> 00:18:16,870
it all work out which is what the Julian

00:18:14,510 --> 00:18:22,700
calendar did which is what we have now

00:18:16,870 --> 00:18:24,700
so yeah not 30 days to a month snow okay

00:18:22,700 --> 00:18:26,480
fine how about seven days to a week

00:18:24,700 --> 00:18:28,100
well again is long

00:18:26,480 --> 00:18:30,799
you're willing to start with the Julian

00:18:28,100 --> 00:18:32,330
calendar you're okay right the Roman

00:18:30,799 --> 00:18:33,559
calendar stole the idea the seven-day

00:18:32,330 --> 00:18:35,500
week from the Hebrew calendar who

00:18:33,559 --> 00:18:37,970
probably stole it from the Babylonians

00:18:35,500 --> 00:18:39,290
but other ancient calendars use

00:18:37,970 --> 00:18:41,240
different numbers of days in the week

00:18:39,290 --> 00:18:43,940
each a Chinese calendar is 10 days to a

00:18:41,240 --> 00:18:45,080
week ancient Egyptian is the same you

00:18:43,940 --> 00:18:47,210
don't even have to go to ancient times

00:18:45,080 --> 00:18:48,140
after the French Revolution they decided

00:18:47,210 --> 00:18:50,330
they were going to apply the metric

00:18:48,140 --> 00:18:52,130
system to dates and they invented a

00:18:50,330 --> 00:18:53,780
10-day week invented to attend a week

00:18:52,130 --> 00:18:55,640
but it turns out that people don't like

00:18:53,780 --> 00:18:59,630
it when you mess with their weekends so

00:18:55,640 --> 00:19:01,580
that only lasted about 12 years okay not

00:18:59,630 --> 00:19:04,190
the last attempt to standardize the

00:19:01,580 --> 00:19:06,290
calendar though and this is my absolute

00:19:04,190 --> 00:19:10,429
favorite okay

00:19:06,290 --> 00:19:12,679
in 1923 the League of Nations sent out a

00:19:10,429 --> 00:19:14,330
call for proposals saying we're going to

00:19:12,679 --> 00:19:16,850
standardize the calendars for the whole

00:19:14,330 --> 00:19:19,490
world okay we're gonna make everybody

00:19:16,850 --> 00:19:21,169
get on the same system and this was the

00:19:19,490 --> 00:19:22,970
winning proposal this is the

00:19:21,169 --> 00:19:25,160
International fixed calendar and it's

00:19:22,970 --> 00:19:26,570
beautiful in many ways it has 13 months

00:19:25,160 --> 00:19:28,059
the big black arrows pointing to the

00:19:26,570 --> 00:19:31,490
extra month right in the middle and

00:19:28,059 --> 00:19:33,260
every month has 28 days exactly four

00:19:31,490 --> 00:19:36,260
weeks and the great thing about this

00:19:33,260 --> 00:19:36,919
calendar is every date is on the same

00:19:36,260 --> 00:19:38,540
day of the week

00:19:36,919 --> 00:19:40,280
doesn't matter what month doesn't matter

00:19:38,540 --> 00:19:42,679
what year it's always the thing the 18th

00:19:40,280 --> 00:19:45,549
is always the Wednesday right it's

00:19:42,679 --> 00:19:50,450
awesome of course the downside is that

00:19:45,549 --> 00:19:51,530
13 times 28 is only 3 or 64 so you kind

00:19:50,450 --> 00:19:54,679
of need an extra day

00:19:51,530 --> 00:19:57,790
no problem says the IFC I will throw in

00:19:54,679 --> 00:20:00,679
an extra day and it will be between

00:19:57,790 --> 00:20:03,440
Saturday the 28th of December and Sunday

00:20:00,679 --> 00:20:05,690
the 1st of January meaning it's a day

00:20:03,440 --> 00:20:09,260
with no week which gives you the weird

00:20:05,690 --> 00:20:10,790
situation that in the IFC a week is

00:20:09,260 --> 00:20:15,650
always 7 days but 7 days is not always a

00:20:10,790 --> 00:20:17,299
week ok but that doesn't matter because

00:20:15,650 --> 00:20:18,590
nobody ever used this calendar right

00:20:17,299 --> 00:20:20,390
because the League of Nations eventually

00:20:18,590 --> 00:20:23,299
said nobody's gonna go for this just

00:20:20,390 --> 00:20:25,429
give up this whole idea so nobody ever

00:20:23,299 --> 00:20:28,160
used it except there was this one guy

00:20:25,429 --> 00:20:30,140
who was really enamored of it and the

00:20:28,160 --> 00:20:31,400
guy ended was named George Eastman and

00:20:30,140 --> 00:20:33,500
he found a little company you may have

00:20:31,400 --> 00:20:35,030
heard of called Eastman Kodak and he

00:20:33,500 --> 00:20:37,030
brought this calendar with him and this

00:20:35,030 --> 00:20:39,040
was actually the official

00:20:37,030 --> 00:20:40,690
bunny calendar for Eastman Kodak if you

00:20:39,040 --> 00:20:45,040
were programming in Pearl for Eastman

00:20:40,690 --> 00:20:50,340
Kodak all the way up to 1989 you had to

00:20:45,040 --> 00:20:53,680
use this calendar okay but let's assume

00:20:50,340 --> 00:20:55,510
you don't have to deal with ancient

00:20:53,680 --> 00:20:57,610
Chinese weeks or Eastman Kodak weeks

00:20:55,510 --> 00:21:01,570
prior to 1989 so I think we'll give this

00:20:57,610 --> 00:21:03,340
one a mostly true as well okay that is

00:21:01,570 --> 00:21:05,980
really devastated the bottom part of our

00:21:03,340 --> 00:21:08,020
list right but at least the top parts

00:21:05,980 --> 00:21:10,720
good right the stuff that's a around a

00:21:08,020 --> 00:21:11,740
day that's solid I mean you're never

00:21:10,720 --> 00:21:14,760
gonna have a situation where there's not

00:21:11,740 --> 00:21:17,560
24 hours on a day right

00:21:14,760 --> 00:21:19,180
yeah wrong of course okay so why is

00:21:17,560 --> 00:21:21,790
there not 24 hours in a day we can say

00:21:19,180 --> 00:21:25,390
it together right three words daylight

00:21:21,790 --> 00:21:28,840
savings time yes okay do you know this

00:21:25,390 --> 00:21:30,670
guy is no you don't know his name but

00:21:28,840 --> 00:21:32,200
you have cursed it because this is the

00:21:30,670 --> 00:21:34,260
guy who wrote the first serious treatise

00:21:32,200 --> 00:21:36,400
about daylight savings time and

00:21:34,260 --> 00:21:39,280
programmers hate daylight savings time

00:21:36,400 --> 00:21:41,080
right because it's it's torture it gives

00:21:39,280 --> 00:21:43,690
you this situation where you know that

00:21:41,080 --> 00:21:45,790
every year you're guaranteed to have two

00:21:43,690 --> 00:21:47,080
days that are not 24 hours long they got

00:21:45,790 --> 00:21:48,910
one that's 23 hours long

00:21:47,080 --> 00:21:50,500
they got one this 25 hours long and

00:21:48,910 --> 00:21:52,720
that's terrible it's a big problem

00:21:50,500 --> 00:21:56,980
because wait why is that a big problem

00:21:52,720 --> 00:22:00,850
right yes that that's that's true as

00:21:56,980 --> 00:22:03,070
well but but the talk is supposed to be

00:22:00,850 --> 00:22:05,640
about making dates easier and now we're

00:22:03,070 --> 00:22:09,160
talking about times why does that matter

00:22:05,640 --> 00:22:12,690
okay so to understand the extent of this

00:22:09,160 --> 00:22:15,520
problem imagine you're a programmer and

00:22:12,690 --> 00:22:17,140
you've been given a project right you'll

00:22:15,520 --> 00:22:18,730
be given a set of specs to create a

00:22:17,140 --> 00:22:20,470
piece of software could be operating

00:22:18,730 --> 00:22:22,510
system programming language application

00:22:20,470 --> 00:22:25,000
doesn't matter and you need to take the

00:22:22,510 --> 00:22:26,560
concepts the business concepts in the

00:22:25,000 --> 00:22:27,940
spec and turn them into data

00:22:26,560 --> 00:22:30,610
representations right that's what we do

00:22:27,940 --> 00:22:32,200
as programmers so let's pretend like one

00:22:30,610 --> 00:22:34,390
of the concepts in our spec that we need

00:22:32,200 --> 00:22:37,210
to figure out how to represent is dates

00:22:34,390 --> 00:22:39,280
okay fine how do we represent it okay

00:22:37,210 --> 00:22:41,530
well one thing we could do is just take

00:22:39,280 --> 00:22:43,090
the string right that's how we humans

00:22:41,530 --> 00:22:44,890
communicate dates to each other strings

00:22:43,090 --> 00:22:46,690
right so we just take the ASCII values

00:22:44,890 --> 00:22:49,150
for all the characters and store it as a

00:22:46,690 --> 00:22:50,650
string right and if we did that for this

00:22:49,150 --> 00:22:54,910
then obviously that would

00:22:50,650 --> 00:22:56,410
January the 1st of this year right yes

00:22:54,910 --> 00:22:58,150
some people are shaking their heads

00:22:56,410 --> 00:22:59,380
again right because some people thought

00:22:58,150 --> 00:23:01,780
that it was going to be May the 1st

00:22:59,380 --> 00:23:03,280
right so this is the first problem with

00:23:01,780 --> 00:23:04,809
trying to store dates of strings we

00:23:03,280 --> 00:23:07,300
humans can't even agree on what they're

00:23:04,809 --> 00:23:09,010
supposed to be right I mean we could

00:23:07,300 --> 00:23:11,680
maybe get together and form a standards

00:23:09,010 --> 00:23:15,010
committee which we did and it's called

00:23:11,680 --> 00:23:18,150
ISO 8601 and they tell us that January

00:23:15,010 --> 00:23:21,910
the 1st of 2018 should look like that

00:23:18,150 --> 00:23:23,740
which is very precise not very efficient

00:23:21,910 --> 00:23:26,650
in terms of storage perhaps but very

00:23:23,740 --> 00:23:28,120
precise but you know what storing dates

00:23:26,650 --> 00:23:31,030
of strings has a much bigger problem

00:23:28,120 --> 00:23:32,740
dates are not strings dates are numbers

00:23:31,030 --> 00:23:35,230
and and we need to be able to treat them

00:23:32,740 --> 00:23:36,970
as numbers especially in software right

00:23:35,230 --> 00:23:38,890
our software needs to know what's the

00:23:36,970 --> 00:23:40,720
date going to be in 30 days what's the

00:23:38,890 --> 00:23:42,700
date of next Monday right things like

00:23:40,720 --> 00:23:44,920
this so fine we need to figure out how

00:23:42,700 --> 00:23:47,740
to represent dates as numbers start over

00:23:44,920 --> 00:23:49,690
ok so if you're going to take a business

00:23:47,740 --> 00:23:53,440
concept and map it onto the number line

00:23:49,690 --> 00:23:56,080
right step one is what is one how much

00:23:53,440 --> 00:23:58,540
is one right so let's say one's gonna be

00:23:56,080 --> 00:24:00,220
a day all right next thing is what's

00:23:58,540 --> 00:24:01,780
zero right what's the origin point for

00:24:00,220 --> 00:24:03,070
our number line so we just got to pick a

00:24:01,780 --> 00:24:05,710
day all right well let's pick a day in

00:24:03,070 --> 00:24:06,870
the past not too far in the past maybe

00:24:05,710 --> 00:24:08,980
something it's kind of a round number

00:24:06,870 --> 00:24:11,590
something that might be a Monday maybe

00:24:08,980 --> 00:24:14,710
would be nice how about you anyway the

00:24:11,590 --> 00:24:17,020
first of 1900 right and we're gonna call

00:24:14,710 --> 00:24:18,330
that the epoch date because we don't

00:24:17,020 --> 00:24:20,800
know what the word epic means apparently

00:24:18,330 --> 00:24:22,270
and we're gonna say that that was gonna

00:24:20,800 --> 00:24:23,530
be day zero

00:24:22,270 --> 00:24:24,940
nope you know what tell you what let's

00:24:23,530 --> 00:24:26,320
make it day one that way when you're mod

00:24:24,940 --> 00:24:27,670
it by seven one will be Monday and

00:24:26,320 --> 00:24:30,130
that'll be super cool right

00:24:27,670 --> 00:24:32,710
so actually that day is day zero and

00:24:30,130 --> 00:24:34,090
actually super technically it's that's

00:24:32,710 --> 00:24:38,470
not right either but we can't get into

00:24:34,090 --> 00:24:40,300
that no time and this type of

00:24:38,470 --> 00:24:41,920
representation has a lot of advantages I

00:24:40,300 --> 00:24:43,179
mean let's say I want to know what the

00:24:41,920 --> 00:24:46,210
dates going to be in thirty days well

00:24:43,179 --> 00:24:47,890
you just add 30 right super simple right

00:24:46,210 --> 00:24:49,480
you want to know the date of next Monday

00:24:47,890 --> 00:24:51,640
it's a little trickier you gotta do a

00:24:49,480 --> 00:24:55,780
little modulo 7 dance but it's not too

00:24:51,640 --> 00:24:57,490
bad right and this is an actual data

00:24:55,780 --> 00:25:00,910
representation for dates that's used by

00:24:57,490 --> 00:25:04,480
a fairly popular family of softwares if

00:25:00,910 --> 00:25:08,410
I know which one no this isn't

00:25:04,480 --> 00:25:09,940
Perle yeah yes David huh no this is not

00:25:08,410 --> 00:25:14,890
Mac OS believe it or not they did not

00:25:09,940 --> 00:25:18,220
use a 1900 as the epic this is actually

00:25:14,890 --> 00:25:20,950
Excel okay who inherited it from Lotus

00:25:18,220 --> 00:25:23,169
1-2-3 and bequeathed it onto Google

00:25:20,950 --> 00:25:26,020
sheets okay so there's a decent chance

00:25:23,169 --> 00:25:28,179
that just about every spreadsheet you've

00:25:26,020 --> 00:25:31,570
ever used is storing dates exactly like

00:25:28,179 --> 00:25:33,610
this so obviously it must work not

00:25:31,570 --> 00:25:35,410
perfectly all right it does have a few

00:25:33,610 --> 00:25:36,940
downsides I mean for instance this is

00:25:35,410 --> 00:25:38,980
great as long as you really do never

00:25:36,940 --> 00:25:42,340
care what time it is but the truth is

00:25:38,980 --> 00:25:43,000
that sometimes you do right so how can

00:25:42,340 --> 00:25:45,190
you handle that

00:25:43,000 --> 00:25:47,290
right well obviously if you're talking

00:25:45,190 --> 00:25:48,730
about a unit of time that's less than a

00:25:47,290 --> 00:25:52,350
day we need something less than one

00:25:48,730 --> 00:25:56,140
writes fractions right noon is 0.5 which

00:25:52,350 --> 00:25:57,940
is okay but you know as long as you have

00:25:56,140 --> 00:25:59,980
to deal with I Triple E floating point

00:25:57,940 --> 00:26:03,820
math you know if you're not using Perl 6

00:25:59,980 --> 00:26:05,980
then you're stuck with this issue where

00:26:03,820 --> 00:26:11,410
you can't represent decimals most

00:26:05,980 --> 00:26:13,059
decimals to an exact precision so I mean

00:26:11,410 --> 00:26:14,710
in I Triple E floating point math you

00:26:13,059 --> 00:26:16,720
can't even represent the tenth with full

00:26:14,710 --> 00:26:20,500
accuracy much less a 60th of a sixtieth

00:26:16,720 --> 00:26:21,940
or 24th right so that's not great but

00:26:20,500 --> 00:26:24,790
hey we're programmers right we're

00:26:21,940 --> 00:26:26,559
solving this problem so if we need more

00:26:24,790 --> 00:26:28,510
accuracy higher precision we just

00:26:26,559 --> 00:26:30,100
increase the granularity right all right

00:26:28,510 --> 00:26:35,049
start over fine this time we're gonna

00:26:30,100 --> 00:26:36,370
make one equal a second right and so

00:26:35,049 --> 00:26:38,590
that's gonna make the numbers a lot

00:26:36,370 --> 00:26:40,809
bigger but you know that's okay we got

00:26:38,590 --> 00:26:42,309
computers right so still though let's

00:26:40,809 --> 00:26:44,049
don't go quite as far back in the past

00:26:42,309 --> 00:26:48,520
as we did last time how about we do

00:26:44,049 --> 00:26:49,929
January the 1st of 1970 why 1970 well

00:26:48,520 --> 00:26:50,410
because it's 1971 and we're inventing

00:26:49,929 --> 00:26:52,660
Unix

00:26:50,410 --> 00:26:55,270
ok so we're gonna do one one seventy

00:26:52,660 --> 00:26:56,950
only now because weird one is a second

00:26:55,270 --> 00:26:58,990
we have to specify what time as well

00:26:56,950 --> 00:27:01,030
right but obviously we're just gonna pay

00:26:58,990 --> 00:27:03,429
midnight right exactly midnight down to

00:27:01,030 --> 00:27:04,809
the second all right still gonna call

00:27:03,429 --> 00:27:06,850
that the epoch because we still don't

00:27:04,809 --> 00:27:09,130
know what epoch means and we're gonna

00:27:06,850 --> 00:27:11,559
call the number of seconds since January

00:27:09,130 --> 00:27:14,290
the 1st 1970 at exactly midnight the

00:27:11,559 --> 00:27:16,570
number of epic seconds which is a third

00:27:14,290 --> 00:27:17,710
entirely different wrong definition of

00:27:16,570 --> 00:27:20,860
epithets okay

00:27:17,710 --> 00:27:22,450
so now we have full accuracy for any

00:27:20,860 --> 00:27:24,850
granularity as long as it's a second or

00:27:22,450 --> 00:27:27,610
higher all right but now what if we want

00:27:24,850 --> 00:27:28,870
to add 30 days okay well now we have to

00:27:27,610 --> 00:27:33,010
know how many seconds there are in a day

00:27:28,870 --> 00:27:34,179
how many seconds are there and a 86,400

00:27:33,010 --> 00:27:37,029
znu at least one person was going to

00:27:34,179 --> 00:27:39,970
know that all right so if you want to

00:27:37,029 --> 00:27:43,750
know date in 30 days you just add thirty

00:27:39,970 --> 00:27:45,190
times eighty six house of 100 right and

00:27:43,750 --> 00:27:46,539
if you wanted to do next Monday we could

00:27:45,190 --> 00:27:49,120
do that too but some more complicated as

00:27:46,539 --> 00:27:51,220
I didn't put it up there but now we have

00:27:49,120 --> 00:27:53,770
all different problems right because

00:27:51,220 --> 00:27:55,960
adding 86,400 seconds is only adding a

00:27:53,770 --> 00:27:57,909
day if a day is always 24 hours long and

00:27:55,960 --> 00:28:00,789
we just said that a day is not always 24

00:27:57,909 --> 00:28:03,760
hours long if you add 86,400 seconds to

00:28:00,789 --> 00:28:05,890
your 23 hour day then you get 1 a.m. on

00:28:03,760 --> 00:28:08,710
the next day which is annoying that's

00:28:05,890 --> 00:28:10,929
not terrible if you add 86,400 seconds

00:28:08,710 --> 00:28:15,610
to your 25 hour day you get 11 p.m. on

00:28:10,929 --> 00:28:16,870
the same day and that is tragic okay but

00:28:15,610 --> 00:28:18,250
that is only the beginning of our

00:28:16,870 --> 00:28:20,140
troubles because now that we've dragged

00:28:18,250 --> 00:28:23,020
time into it we have a whole nother

00:28:20,140 --> 00:28:25,270
complication right January the 1st oh

00:28:23,020 --> 00:28:26,770
I'm sorry this is actually a real data

00:28:25,270 --> 00:28:30,490
representation used by real software's

00:28:26,770 --> 00:28:33,279
as well - right which is what everything

00:28:30,490 --> 00:28:36,250
right UNIX and all its derivatives see

00:28:33,279 --> 00:28:39,250
and all its derivatives and you know PHP

00:28:36,250 --> 00:28:41,710
and Python and Ruby and JavaScript and

00:28:39,250 --> 00:28:46,080
tickle and ActionScript and of course

00:28:41,710 --> 00:28:49,510
most importantly for our purposes right

00:28:46,080 --> 00:28:50,890
but we still have problems because now

00:28:49,510 --> 00:28:52,740
that we've dragged the time into the

00:28:50,890 --> 00:28:55,480
whole thing we have another complication

00:28:52,740 --> 00:29:00,360
January the 1st 1970 exactly midnight

00:28:55,480 --> 00:29:02,830
but we're because astronomy remember

00:29:00,360 --> 00:29:03,940
right and remember how the way the day

00:29:02,830 --> 00:29:06,580
works gives us all these cool things

00:29:03,940 --> 00:29:07,659
like say noon right what's noon noon is

00:29:06,580 --> 00:29:09,760
when you're standing on the earth and

00:29:07,659 --> 00:29:11,049
the Sun is directly overhead but that of

00:29:09,760 --> 00:29:13,720
course depends on where you're standing

00:29:11,049 --> 00:29:15,760
on the earth ok if it's noon for you

00:29:13,720 --> 00:29:18,610
than somebody 15 degrees west or east of

00:29:15,760 --> 00:29:21,370
you is at 11:00 p.m. or 1 a.m. 11:00

00:29:18,610 --> 00:29:23,830
11:00 a.m. or 1 p.m. right and the

00:29:21,370 --> 00:29:27,700
further you go west or east the worse

00:29:23,830 --> 00:29:30,370
that gets right so now that we dragged

00:29:27,700 --> 00:29:31,180
time into our dates we can't answer the

00:29:30,370 --> 00:29:35,500
wind without all

00:29:31,180 --> 00:29:36,970
so answering the where but that's okay

00:29:35,500 --> 00:29:38,230
we're still programmers we can still fix

00:29:36,970 --> 00:29:39,730
this right we're gonna take the earth

00:29:38,230 --> 00:29:40,870
we're gonna draw straight line right

00:29:39,730 --> 00:29:41,110
down the middle bit pick a spot on the

00:29:40,870 --> 00:29:42,400
earth

00:29:41,110 --> 00:29:44,110
how about Greenwich England I have they

00:29:42,400 --> 00:29:45,070
have a lovely observatory there and

00:29:44,110 --> 00:29:46,090
we're gonna draw a straight line right

00:29:45,070 --> 00:29:47,530
down the middle of Earth we're gonna

00:29:46,090 --> 00:29:49,510
call that the Prime Meridian and that

00:29:47,530 --> 00:29:51,910
it's gonna be the zero point for time

00:29:49,510 --> 00:29:54,160
and then were gonna draw nice straight

00:29:51,910 --> 00:29:56,860
lines every 15 degrees and it's gonna

00:29:54,160 --> 00:29:59,200
give us 24 zones where the time is

00:29:56,860 --> 00:30:01,000
different by 1 hour and every zone let's

00:29:59,200 --> 00:30:01,750
call them I don't know time zones right

00:30:01,000 --> 00:30:03,730
okay

00:30:01,750 --> 00:30:06,400
and that solves the astronomy problem

00:30:03,730 --> 00:30:10,020
right but unfortunately it doesn't help

00:30:06,400 --> 00:30:12,370
with the politics problem all right

00:30:10,020 --> 00:30:14,970
so mmm what is this

00:30:12,370 --> 00:30:18,910
it could be electrical circuit diagram

00:30:14,970 --> 00:30:23,380
could be map of a metro system but it's

00:30:18,910 --> 00:30:25,660
not it's time zones in fact that big red

00:30:23,380 --> 00:30:29,560
part there in the circle is which is you

00:30:25,660 --> 00:30:31,390
know a expansion of the inset that is

00:30:29,560 --> 00:30:32,680
the International Dateline ok the

00:30:31,390 --> 00:30:34,570
International Dateline did not use to

00:30:32,680 --> 00:30:37,360
have a giant Parasaurolophus head in it

00:30:34,570 --> 00:30:38,950
but it used to run right through the

00:30:37,360 --> 00:30:40,420
middle of these three different island

00:30:38,950 --> 00:30:42,340
groups which is okay as long as they

00:30:40,420 --> 00:30:43,750
were independent of each other but when

00:30:42,340 --> 00:30:46,260
they join together to form the

00:30:43,750 --> 00:30:48,550
independent island nation of Kiribati

00:30:46,260 --> 00:30:49,810
they kind of found it annoying that half

00:30:48,550 --> 00:30:51,300
the country was in one day and half the

00:30:49,810 --> 00:30:53,920
country was in another day right

00:30:51,300 --> 00:30:55,000
especially when you know the two halves

00:30:53,920 --> 00:30:56,200
of the country could only conduct

00:30:55,000 --> 00:30:58,600
business four days a week when their

00:30:56,200 --> 00:31:01,230
weekdays happen over lap right so they

00:30:58,600 --> 00:31:04,600
push the date line out okay

00:31:01,230 --> 00:31:06,310
right and and that is just the tip of

00:31:04,600 --> 00:31:07,990
the time zone weirdness iceberg right

00:31:06,310 --> 00:31:10,000
because now you have to take all the

00:31:07,990 --> 00:31:12,880
political annoyance of daylight savings

00:31:10,000 --> 00:31:14,440
time as some person said you know winds

00:31:12,880 --> 00:31:15,790
are going to start and you have to

00:31:14,440 --> 00:31:17,740
overlay that on to all the political

00:31:15,790 --> 00:31:19,660
annoyance of every nation on earth being

00:31:17,740 --> 00:31:21,670
able to set their own time zones because

00:31:19,660 --> 00:31:23,110
every country now gets to say what time

00:31:21,670 --> 00:31:24,520
zone this is gonna use or is it going to

00:31:23,110 --> 00:31:26,620
use more than one or is it gonna use

00:31:24,520 --> 00:31:28,150
half zones or three-quarter zones and is

00:31:26,620 --> 00:31:29,650
it going to use DST or is it not going

00:31:28,150 --> 00:31:31,180
to use DST or as parts of it will and

00:31:29,650 --> 00:31:34,150
parts of it won't and when's DST gonna

00:31:31,180 --> 00:31:36,940
start or when's it gonna end since it

00:31:34,150 --> 00:31:38,860
was begun in 1918 the first official use

00:31:36,940 --> 00:31:41,380
of daylight savings time the US has

00:31:38,860 --> 00:31:44,440
passed laws relating to daylight savings

00:31:41,380 --> 00:31:44,950
times seven times the UK has done so 37

00:31:44,440 --> 00:31:47,800
times

00:31:44,950 --> 00:31:49,990
and that's only counting those laws that

00:31:47,800 --> 00:31:52,390
applied at a national level okay and

00:31:49,990 --> 00:31:53,830
that's just two countries okay if you

00:31:52,390 --> 00:31:55,360
look at China up there trying to spread

00:31:53,830 --> 00:31:57,790
across five time zones but they only

00:31:55,360 --> 00:31:59,380
observe one Australia only takes up

00:31:57,790 --> 00:32:01,150
three time zones in space but they

00:31:59,380 --> 00:32:02,500
observe eight time zones including

00:32:01,150 --> 00:32:05,380
several half-hour time zones and

00:32:02,500 --> 00:32:07,120
including the world's only time zone

00:32:05,380 --> 00:32:08,590
that advances by only half an hour for

00:32:07,120 --> 00:32:11,830
daylight savings time instead of a full

00:32:08,590 --> 00:32:16,080
hour yeah so it's a little island off

00:32:11,830 --> 00:32:20,110
the I think northeast coast of Australia

00:32:16,080 --> 00:32:21,760
okay so short version in order to know

00:32:20,110 --> 00:32:23,680
the number of epic seconds for any given

00:32:21,760 --> 00:32:25,630
point in time you have to know where you

00:32:23,680 --> 00:32:26,740
were on the earth sometimes the country

00:32:25,630 --> 00:32:28,720
is not good enough sometimes you have to

00:32:26,740 --> 00:32:30,100
know the exact city and what year it was

00:32:28,720 --> 00:32:33,370
and what the political situation was

00:32:30,100 --> 00:32:35,230
like at the time so I think we can

00:32:33,370 --> 00:32:39,820
safely dispense with the 24 hours in a

00:32:35,230 --> 00:32:41,890
day but hey at the very least we can say

00:32:39,820 --> 00:32:45,850
mmm there's always 60 seconds in a

00:32:41,890 --> 00:32:50,320
minute right no of course not leap

00:32:45,850 --> 00:32:52,390
seconds right now the basic idea behind

00:32:50,320 --> 00:32:54,280
leap seconds is actually pretty good one

00:32:52,390 --> 00:32:55,780
right because remember all the problems

00:32:54,280 --> 00:32:57,100
that we had with leap days we were

00:32:55,780 --> 00:32:58,150
adding a day and it was too much we took

00:32:57,100 --> 00:33:00,670
away a day and then that was too much

00:32:58,150 --> 00:33:02,550
add another day it was it was a pain in

00:33:00,670 --> 00:33:06,130
the butt right and then we ended up with

00:33:02,550 --> 00:33:09,070
365.2425 which is really really close

00:33:06,130 --> 00:33:11,260
y'all really close but still not perfect

00:33:09,070 --> 00:33:12,550
and so if we have a problem when we're

00:33:11,260 --> 00:33:14,800
adding these big chunks of time

00:33:12,550 --> 00:33:16,990
obviously the solution is add smaller

00:33:14,800 --> 00:33:18,220
chunks of time right how about if we

00:33:16,990 --> 00:33:19,930
just add a second every now and again

00:33:18,220 --> 00:33:25,000
that's got to be much less disruptive

00:33:19,930 --> 00:33:27,910
than adding a whole day right since 1972

00:33:25,000 --> 00:33:30,130
we have only ever added 27 leap seconds

00:33:27,910 --> 00:33:31,810
okay no more often than twice in a given

00:33:30,130 --> 00:33:34,210
year and usually only once in a given

00:33:31,810 --> 00:33:36,280
year how often do we add a leap second

00:33:34,210 --> 00:33:37,780
well whenever the International earth

00:33:36,280 --> 00:33:41,860
rotation and reference system service

00:33:37,780 --> 00:33:43,540
decides we should basically their rule

00:33:41,860 --> 00:33:47,410
of thumb is if we're 0.6 seconds behind

00:33:43,540 --> 00:33:49,840
reality throw in a second okay and you

00:33:47,410 --> 00:33:51,850
know 27 seconds in 46 years it doesn't

00:33:49,840 --> 00:33:53,080
seem like a lot right but it's just

00:33:51,850 --> 00:33:54,970
enough to screw up your computer

00:33:53,080 --> 00:33:56,410
programs because remember how I said

00:33:54,970 --> 00:33:57,520
that being off by an hour because of

00:33:56,410 --> 00:33:58,960
daylight savings time could sometimes

00:33:57,520 --> 00:34:00,640
make you off by a

00:33:58,960 --> 00:34:01,990
okay you don't actually need to be off

00:34:00,640 --> 00:34:03,700
by a whole hour for that to happen right

00:34:01,990 --> 00:34:07,929
you just need to be off by one second

00:34:03,700 --> 00:34:10,210
and now you're off by 27 seconds okay

00:34:07,929 --> 00:34:12,159
plus if I ask you what the epic seconds

00:34:10,210 --> 00:34:14,409
representation is for pretty much any

00:34:12,159 --> 00:34:16,359
point in the future you have to say I

00:34:14,409 --> 00:34:19,480
don't know because you don't know if

00:34:16,359 --> 00:34:22,030
whether when the OEE rrss is going to

00:34:19,480 --> 00:34:24,310
throw it under the leap second so

00:34:22,030 --> 00:34:26,260
because of this problem a lot of people

00:34:24,310 --> 00:34:27,429
and a lot of computers tend to ignore

00:34:26,260 --> 00:34:29,770
leap seconds altogether

00:34:27,429 --> 00:34:33,820
of course ignoring something doesn't

00:34:29,770 --> 00:34:37,409
make it not exist so I can't even count

00:34:33,820 --> 00:34:37,409
on there being 60 seconds in a minute

00:34:37,980 --> 00:34:42,070
but the good news is I couldn't find any

00:34:40,240 --> 00:34:47,320
instance where there's not 60 minutes in

00:34:42,070 --> 00:34:48,580
an hour but at this point I think we can

00:34:47,320 --> 00:34:49,840
safely say that there's at least an even

00:34:48,580 --> 00:34:51,520
chance that it's less to do with an hour

00:34:49,840 --> 00:34:52,869
being some in violent amount of time and

00:34:51,520 --> 00:34:54,760
more to do what I just did in Google

00:34:52,869 --> 00:34:56,379
hard enough and actually when I gave

00:34:54,760 --> 00:34:59,530
this talk at la p.m. somebody said well

00:34:56,379 --> 00:35:00,790
how about that one where the time zone

00:34:59,530 --> 00:35:02,050
only have answers by half an hour in

00:35:00,790 --> 00:35:03,970
daylight savings time doesn't that make

00:35:02,050 --> 00:35:10,900
an hour not be an hour and I thought

00:35:03,970 --> 00:35:13,720
well kind of so yeah so dates are harder

00:35:10,900 --> 00:35:15,340
than you thought right and computers

00:35:13,720 --> 00:35:16,510
have it especially hard because they

00:35:15,340 --> 00:35:18,550
have to care about a lot of things that

00:35:16,510 --> 00:35:22,330
you don't or don't have to care about

00:35:18,550 --> 00:35:23,650
most of the time anyway and because we

00:35:22,330 --> 00:35:25,030
thought that dates were easy at the

00:35:23,650 --> 00:35:27,130
beginning and now we know that they're

00:35:25,030 --> 00:35:30,880
hard we may have thought that we don't

00:35:27,130 --> 00:35:33,640
need help but we do so let's see what

00:35:30,880 --> 00:35:35,080
Perl can do to help us all right so

00:35:33,640 --> 00:35:36,970
let's start with the absolute basics

00:35:35,080 --> 00:35:38,800
what can you get without any modules at

00:35:36,970 --> 00:35:41,380
all okay three functions I'm sure you

00:35:38,800 --> 00:35:43,560
know them starting with time time gives

00:35:41,380 --> 00:35:45,550
you the epoch seconds as of now

00:35:43,560 --> 00:35:46,930
remembering that now is an ephemeral

00:35:45,550 --> 00:35:50,020
concept and sometimes other time you

00:35:46,930 --> 00:35:51,580
figure out what now is its then and then

00:35:50,020 --> 00:35:53,560
you have local time which takes those

00:35:51,580 --> 00:35:55,390
epic seconds and turn them into date

00:35:53,560 --> 00:35:57,490
elements human readable at date elements

00:35:55,390 --> 00:35:59,020
such as hour and year and month and

00:35:57,490 --> 00:36:00,550
things like that but of course remember

00:35:59,020 --> 00:36:02,920
that all that stuff depends on where you

00:36:00,550 --> 00:36:06,040
are on the earth so local time

00:36:02,920 --> 00:36:08,530
specifically is for where you are now or

00:36:06,040 --> 00:36:10,390
where your computer is now where your

00:36:08,530 --> 00:36:11,619
computer thinks it is now depending on

00:36:10,390 --> 00:36:15,519
how your time zone was set

00:36:11,619 --> 00:36:17,349
which is hopefully right and then we

00:36:15,519 --> 00:36:19,180
have another one called GM time does the

00:36:17,349 --> 00:36:19,660
exact same thing except not for where

00:36:19,180 --> 00:36:24,519
you are now

00:36:19,660 --> 00:36:27,219
for Greenwich England mmm sort of okay

00:36:24,519 --> 00:36:29,049
so remember that we said that Greenwich

00:36:27,219 --> 00:36:31,359
England is going to be the origin right

00:36:29,049 --> 00:36:34,359
the zero point for time right and the

00:36:31,359 --> 00:36:35,349
time zone for Greenwich is GMT which of

00:36:34,359 --> 00:36:37,719
course stands for Greenwich Mean Time

00:36:35,349 --> 00:36:40,660
okay and this is where GM time gets its

00:36:37,719 --> 00:36:42,099
name right so you think to yourself okay

00:36:40,660 --> 00:36:44,920
the zero point for time that's whereas

00:36:42,099 --> 00:36:46,719
time has a zero offset to figure out

00:36:44,920 --> 00:36:48,460
what the local time is so that's what I

00:36:46,719 --> 00:36:50,440
want to use if I want to abstract the

00:36:48,460 --> 00:36:52,420
time zones out of the times right if I

00:36:50,440 --> 00:36:53,710
want to express the time regardless of

00:36:52,420 --> 00:36:56,380
where you were on the earth at that

00:36:53,710 --> 00:36:57,759
exact moment but it's not what you want

00:36:56,380 --> 00:37:01,719
to use because what you really want to

00:36:57,759 --> 00:37:04,089
use is coordinated Universal Time or UTC

00:37:01,719 --> 00:37:08,440
okay and I know you're looking at that

00:37:04,089 --> 00:37:10,210
going UT that should be C UT not UTC and

00:37:08,440 --> 00:37:14,190
typically when you ask this question the

00:37:10,210 --> 00:37:14,190
answer you get is moves is that French

00:37:14,910 --> 00:37:20,739
but the problem with that answer is that

00:37:18,309 --> 00:37:22,869
in French it is and please pardon my

00:37:20,739 --> 00:37:25,900
beastly French pronunciation it would be

00:37:22,869 --> 00:37:29,019
pulse Universal called than a which of

00:37:25,900 --> 00:37:30,489
course is T you see and believe it or

00:37:29,019 --> 00:37:32,529
not the answer is that this is the

00:37:30,489 --> 00:37:34,180
compromise the British and French were

00:37:32,529 --> 00:37:35,890
arguing about what the abbreviations

00:37:34,180 --> 00:37:36,910
would be and they chose this because at

00:37:35,890 --> 00:37:40,869
least this way can be wrong in both

00:37:36,910 --> 00:37:42,579
languages okay so a lot of people think

00:37:40,869 --> 00:37:45,009
that GMT and UTC are the same thing

00:37:42,579 --> 00:37:46,630
right and in fact sometimes we treat

00:37:45,009 --> 00:37:48,339
them that way and it's convenient my

00:37:46,630 --> 00:37:50,920
module date easy certainly treats them

00:37:48,339 --> 00:37:52,989
as synonyms but technically they're not

00:37:50,920 --> 00:37:54,160
the same right if you look it up on the

00:37:52,989 --> 00:37:57,400
internet do the answer that you'll find

00:37:54,160 --> 00:37:59,200
is that GMT is a timezone UTC is a time

00:37:57,400 --> 00:38:03,009
specification which sounds kind of

00:37:59,200 --> 00:38:04,239
abstract and airy-fairy so maybe we

00:38:03,009 --> 00:38:06,640
should try to make this difference a

00:38:04,239 --> 00:38:09,969
little more concrete right so let's take

00:38:06,640 --> 00:38:12,729
a pine in UTC and let's add an hour to

00:38:09,969 --> 00:38:15,009
it okay 1:30 on February the 18th you

00:38:12,729 --> 00:38:17,279
add an hour you get to 30 over 18 right

00:38:15,009 --> 00:38:19,989
exactly what you expect it okay

00:38:17,279 --> 00:38:23,950
now let's put that same time in GMT and

00:38:19,989 --> 00:38:27,170
add an hour and we get

00:38:23,950 --> 00:38:29,510
because it just so happens that in 1968

00:38:27,170 --> 00:38:30,920
for one year and one year only their

00:38:29,510 --> 00:38:33,140
version of daylight savings time which

00:38:30,920 --> 00:38:36,319
is called British summer time started in

00:38:33,140 --> 00:38:38,000
February I don't know why and it was

00:38:36,319 --> 00:38:40,700
started on February the 18th at 2:00

00:38:38,000 --> 00:38:42,920
a.m. so when you add an hour to 1:30 you

00:38:40,700 --> 00:38:44,270
get 3:30 and you shift time zones to

00:38:42,920 --> 00:38:47,180
British summer time okay

00:38:44,270 --> 00:38:49,940
so the short answer is our time in UTC

00:38:47,180 --> 00:38:51,710
is always the same time MGMT assuming

00:38:49,940 --> 00:38:55,780
that time as exists in GMT which it

00:38:51,710 --> 00:38:59,240
doesn't always okay so with no modules

00:38:55,780 --> 00:39:01,130
Perl lets you ignore the timezone with

00:38:59,240 --> 00:39:03,800
GM time which is really UTC in disguise

00:39:01,130 --> 00:39:06,200
or let you deal with your own time zone

00:39:03,800 --> 00:39:07,700
via local time and you can turn those

00:39:06,200 --> 00:39:09,560
into human readable elements which is

00:39:07,700 --> 00:39:11,060
very nice of course sometimes you need

00:39:09,560 --> 00:39:13,520
to go in the other direction right and

00:39:11,060 --> 00:39:15,200
for that you need a module but happily

00:39:13,520 --> 00:39:18,440
it's a core module been course since

00:39:15,200 --> 00:39:19,940
eons ago time local right and time local

00:39:18,440 --> 00:39:22,220
gives you two more functions called time

00:39:19,940 --> 00:39:23,569
local and time GM which do exactly what

00:39:22,220 --> 00:39:25,940
you think they do they do the opposite

00:39:23,569 --> 00:39:27,910
they take the human readable elements

00:39:25,940 --> 00:39:30,290
and turn them back in nanoseconds right

00:39:27,910 --> 00:39:30,920
so you can use these guys and that's

00:39:30,290 --> 00:39:32,660
nice

00:39:30,920 --> 00:39:35,660
but for various historical reasons the

00:39:32,660 --> 00:39:37,730
the numbers can be some kind of funky in

00:39:35,660 --> 00:39:40,730
in these things for instance the month

00:39:37,730 --> 00:39:42,349
number goes from 0 to 11 which is lovely

00:39:40,730 --> 00:39:44,270
if what you wanted to do was look up a

00:39:42,349 --> 00:39:45,470
month name in an array but if what you

00:39:44,270 --> 00:39:46,790
want to do is print out the month number

00:39:45,470 --> 00:39:48,859
then you gotta remember to add one and

00:39:46,790 --> 00:39:52,160
that's paying upon the year numbers are

00:39:48,859 --> 00:39:53,660
actually the year - 1900 which is weird

00:39:52,160 --> 00:39:55,280
because if you're in the 1900s then it

00:39:53,660 --> 00:39:58,190
looks like a two-digit year which we all

00:39:55,280 --> 00:40:00,800
know is bad but it's not because like

00:39:58,190 --> 00:40:01,420
2018 would come back as 118 which is

00:40:00,800 --> 00:40:04,700
just bizarre

00:40:01,420 --> 00:40:06,020
so that's not easy and not to mention

00:40:04,700 --> 00:40:07,310
the fact that you have to do all the

00:40:06,020 --> 00:40:09,050
assembling of the human readable

00:40:07,310 --> 00:40:09,859
elements or disassembling depending

00:40:09,050 --> 00:40:13,250
which direction you're going

00:40:09,859 --> 00:40:15,940
yourself so that's that's bad what we

00:40:13,250 --> 00:40:19,430
really want is a date/time object right

00:40:15,940 --> 00:40:20,000
so we have timepiece this is also a core

00:40:19,430 --> 00:40:23,210
module

00:40:20,000 --> 00:40:25,670
okay then Corson's 5.8 okay

00:40:23,210 --> 00:40:27,560
and it gives us exactly that's a

00:40:25,670 --> 00:40:29,599
date/time object and better yet it

00:40:27,560 --> 00:40:31,040
overrides local time in GM time to

00:40:29,599 --> 00:40:33,140
return those objects instead of the

00:40:31,040 --> 00:40:34,470
epoch seconds which is super cool so

00:40:33,140 --> 00:40:37,220
here's some

00:40:34,470 --> 00:40:40,410
code which actually uses the module okay

00:40:37,220 --> 00:40:42,780
and what you can see is I've got since

00:40:40,410 --> 00:40:44,430
timepiece is a date/time object not a

00:40:42,780 --> 00:40:47,190
date object we have to constantly

00:40:44,430 --> 00:40:51,060
truncate it right to get rid of the time

00:40:47,190 --> 00:40:53,130
portion and then if we want to add we're

00:40:51,060 --> 00:40:55,560
getting today if and then we're getting

00:40:53,130 --> 00:40:58,560
the the date in 30 days right which is

00:40:55,560 --> 00:41:00,780
again 30 times 86,400 we're using a nice

00:40:58,560 --> 00:41:02,970
little constant called one underscore

00:41:00,780 --> 00:41:04,320
day that's why you need times seconds by

00:41:02,970 --> 00:41:07,140
the way that's where that constant comes

00:41:04,320 --> 00:41:09,780
from and if we want to do the next

00:41:07,140 --> 00:41:12,330
Monday we do the modulo seven dance and

00:41:09,780 --> 00:41:14,790
then we want to print them out in a semi

00:41:12,330 --> 00:41:16,530
standard year - month - day format we

00:41:14,790 --> 00:41:20,400
have a nice ymd function to do it okay

00:41:16,530 --> 00:41:22,650
so this is pretty good okay and this the

00:41:20,400 --> 00:41:24,690
prose of course it's a core module right

00:41:22,650 --> 00:41:27,630
it's fairly lightweight it's super solid

00:41:24,690 --> 00:41:29,190
very well tested and it's very simple

00:41:27,630 --> 00:41:31,320
implementation it basically just stores

00:41:29,190 --> 00:41:33,950
the epic seconds and then caches the

00:41:31,320 --> 00:41:36,390
values of the human readable parts okay

00:41:33,950 --> 00:41:39,720
and better yet the objects are immutable

00:41:36,390 --> 00:41:41,369
which is super important okay now it

00:41:39,720 --> 00:41:43,020
doesn't deal with time zones really it

00:41:41,369 --> 00:41:45,000
just does the same two things that pearl

00:41:43,020 --> 00:41:48,119
does it lets you deal with no time zones

00:41:45,000 --> 00:41:51,990
via UTC or where you are now via local

00:41:48,119 --> 00:41:53,940
time and the only real downside of this

00:41:51,990 --> 00:41:55,050
is it's still not quite as easy as that

00:41:53,940 --> 00:41:58,530
would like or so you have to deal with

00:41:55,050 --> 00:42:00,990
the truncating things and the some of

00:41:58,530 --> 00:42:03,270
the method names are oddly named in my

00:42:00,990 --> 00:42:05,040
opinion and it doesn't have really

00:42:03,270 --> 00:42:07,349
anything to take a human readable string

00:42:05,040 --> 00:42:09,270
and just convert it into a date so let's

00:42:07,349 --> 00:42:11,190
go out to sea pan and obviously our

00:42:09,270 --> 00:42:12,839
first stop there has to be daytime right

00:42:11,190 --> 00:42:16,830
daytime is the 800-pound gorilla of

00:42:12,839 --> 00:42:17,790
world processing modules right and if we

00:42:16,830 --> 00:42:20,820
want to look at some date time code

00:42:17,790 --> 00:42:22,470
here's some day time code okay still

00:42:20,820 --> 00:42:24,150
it's a date/time module not a date

00:42:22,470 --> 00:42:25,560
module we still have to truncate but

00:42:24,150 --> 00:42:27,869
happily for most of the stuff that we're

00:42:25,560 --> 00:42:30,450
doing here we have today which is just a

00:42:27,869 --> 00:42:33,210
shortcut for now truncate right so we

00:42:30,450 --> 00:42:36,500
can use that date time is super popular

00:42:33,210 --> 00:42:40,260
because it handles everything right

00:42:36,500 --> 00:42:42,359
arbitrary time zones leap seconds dates

00:42:40,260 --> 00:42:44,310
in the far past far future it can do it

00:42:42,359 --> 00:42:47,140
all and anything they can't do there's a

00:42:44,310 --> 00:42:50,380
rich system of an ecosystem of plugins

00:42:47,140 --> 00:42:51,580
that you can get to do it for you so

00:42:50,380 --> 00:42:53,470
anything you want to throw at it it can

00:42:51,580 --> 00:42:55,060
handle and it gets it right which is

00:42:53,470 --> 00:42:57,970
very nice

00:42:55,060 --> 00:43:00,030
of course complexity comes with a cost

00:42:57,970 --> 00:43:02,550
date time is the biggest module and

00:43:00,030 --> 00:43:04,870
often the slowest for certain things

00:43:02,550 --> 00:43:07,600
another kind of problem with it is it's

00:43:04,870 --> 00:43:09,010
not immutable certain methods you call

00:43:07,600 --> 00:43:11,860
on it not all of them but certain ones

00:43:09,010 --> 00:43:12,910
can change the underlying object and if

00:43:11,860 --> 00:43:15,070
you have pointers to it somewhere else

00:43:12,910 --> 00:43:16,900
references to it somewhere else that can

00:43:15,070 --> 00:43:22,270
give you action at a distance bugs which

00:43:16,900 --> 00:43:24,520
are held to try to track down still

00:43:22,270 --> 00:43:25,780
can't necessarily convert to human

00:43:24,520 --> 00:43:27,310
readable strings unless there's a

00:43:25,780 --> 00:43:28,660
plug-in for what the particular format

00:43:27,310 --> 00:43:29,920
you're looking for if you have to write

00:43:28,660 --> 00:43:32,590
your own it's a little more of a pain

00:43:29,920 --> 00:43:34,570
the button so there's other options how

00:43:32,590 --> 00:43:37,540
about time moment okay it's a little bit

00:43:34,570 --> 00:43:39,100
less well-known but it shouldn't be okay

00:43:37,540 --> 00:43:41,110
it has some serious advantages but first

00:43:39,100 --> 00:43:43,390
let's take a look at the code okay this

00:43:41,110 --> 00:43:45,160
is a little bit simpler I think we still

00:43:43,390 --> 00:43:48,310
have to truncate but I kind of like the

00:43:45,160 --> 00:43:51,010
@midnight name better than truncate just

00:43:48,310 --> 00:43:53,170
a personal preference maybe but it's a

00:43:51,010 --> 00:43:54,580
little bit simpler I think the printing

00:43:53,170 --> 00:43:56,110
out is not quite as nice you have to

00:43:54,580 --> 00:43:59,290
actually drop back to string F time and

00:43:56,110 --> 00:44:01,720
give it a format specifier but the main

00:43:59,290 --> 00:44:03,520
advantage for time moment is it is super

00:44:01,720 --> 00:44:05,350
lightweight it is even smaller than time

00:44:03,520 --> 00:44:08,530
peace believe it or not and it is

00:44:05,350 --> 00:44:10,720
blazingly fast and sometimes that's what

00:44:08,530 --> 00:44:12,370
you need okay still doesn't handle all

00:44:10,720 --> 00:44:14,200
the crazy stuff that date-time does it

00:44:12,370 --> 00:44:17,890
still only deals with basically two time

00:44:14,200 --> 00:44:20,230
zones UTC and where you are now still

00:44:17,890 --> 00:44:24,760
doesn't really have anything - not much

00:44:20,230 --> 00:44:27,850
to convert strings to dates so this is

00:44:24,760 --> 00:44:29,380
how I ended up writing my module Daisy

00:44:27,850 --> 00:44:31,480
and it has pretty much exactly one

00:44:29,380 --> 00:44:33,190
function which is to make that code look

00:44:31,480 --> 00:44:37,870
like this code which i think is a little

00:44:33,190 --> 00:44:40,450
bit nicer now the downsides of date easy

00:44:37,870 --> 00:44:43,060
or obviously they it's new and it hasn't

00:44:40,450 --> 00:44:45,040
received as much real-world testing but

00:44:43,060 --> 00:44:48,970
it makes up for that by just being a

00:44:45,040 --> 00:44:51,370
thin ish wrapper around timepiece so you

00:44:48,970 --> 00:44:53,830
so it ain't easy object is a timepiece

00:44:51,370 --> 00:44:55,720
object underneath and it's just adding a

00:44:53,830 --> 00:44:57,130
little bit of syntax and stuff on top

00:44:55,720 --> 00:44:58,330
and the other thing that's nice about it

00:44:57,130 --> 00:45:00,160
is it give it actually gives you two

00:44:58,330 --> 00:45:02,260
objects one date object

00:45:00,160 --> 00:45:04,470
one day time object so in this code all

00:45:02,260 --> 00:45:06,910
we care about is the data objects right

00:45:04,470 --> 00:45:08,530
right so you want today you just asked

00:45:06,910 --> 00:45:10,059
for today and that's today it's already

00:45:08,530 --> 00:45:12,309
truncated don't worry about that okay

00:45:10,059 --> 00:45:14,530
you want 30 days from today you just add

00:45:12,309 --> 00:45:16,930
30 right we're back to that cool little

00:45:14,530 --> 00:45:18,670
thing and if you want next Monday we

00:45:16,930 --> 00:45:21,190
could do the modulo 7 dance if we wanted

00:45:18,670 --> 00:45:24,099
to but I wanted to show off one of the

00:45:21,190 --> 00:45:25,660
greatest things I think about date easy

00:45:24,099 --> 00:45:27,670
which is that it will take an

00:45:25,660 --> 00:45:30,339
arbitrarily formatted human readable

00:45:27,670 --> 00:45:32,740
string and do its level best to turn it

00:45:30,339 --> 00:45:35,770
into a date okay and it uses underneath

00:45:32,740 --> 00:45:38,109
again I'm relying on the the standing on

00:45:35,770 --> 00:45:40,589
the shoulders of giants it's using date

00:45:38,109 --> 00:45:44,680
parse by grand bar and time parse date

00:45:40,589 --> 00:45:48,400
by newer I think maybe I'm not sure John

00:45:44,680 --> 00:45:49,990
Mayer and so it basically tries one and

00:45:48,400 --> 00:45:51,670
then the other until it comes up with

00:45:49,990 --> 00:45:53,339
something that it thinks as a date and

00:45:51,670 --> 00:45:55,869
if it can't then it throws an exception

00:45:53,339 --> 00:45:56,980
okay now the printing out you might say

00:45:55,869 --> 00:45:59,740
well that's a little bit harder I don't

00:45:56,980 --> 00:46:01,539
have it just a nice ymd function but the

00:45:59,740 --> 00:46:02,799
way that works is the as which is also

00:46:01,539 --> 00:46:04,119
how you convert to another type of

00:46:02,799 --> 00:46:05,319
object for instance if you want to

00:46:04,119 --> 00:46:08,650
convert to a timepiece you'd say as

00:46:05,319 --> 00:46:10,900
timepiece but it also doubles as the

00:46:08,650 --> 00:46:14,170
printer the pretty printing thing so by

00:46:10,900 --> 00:46:16,990
saying that - ymd is the same as percent

00:46:14,170 --> 00:46:18,369
Y - % M - % D then that means that you

00:46:16,990 --> 00:46:21,490
can use a different delimiter if you

00:46:18,369 --> 00:46:23,559
want to miss that easy right so that's

00:46:21,490 --> 00:46:26,710
kind of nice and I want to give you one

00:46:23,559 --> 00:46:28,569
more example this is doing some date

00:46:26,710 --> 00:46:30,309
times and this is doing some Perl

00:46:28,569 --> 00:46:32,289
one-liners and I think the ad diaz de

00:46:30,309 --> 00:46:35,470
dez is actually really cool for Perl

00:46:32,289 --> 00:46:38,440
one-liners if you just include date easy

00:46:35,470 --> 00:46:40,150
you get everything exported if you don't

00:46:38,440 --> 00:46:43,420
like that then either include date easy

00:46:40,150 --> 00:46:46,599
date or add an easy day time and then

00:46:43,420 --> 00:46:48,819
you get you know less stuff in your

00:46:46,599 --> 00:46:50,680
namespace and as you can see you the

00:46:48,819 --> 00:46:52,359
first one for the UTC when this is this

00:46:50,680 --> 00:46:54,359
is these are the actual answers for the

00:46:52,359 --> 00:46:57,490
earlier slide right about adding an hour

00:46:54,359 --> 00:47:00,160
for the first one I just said date easy

00:46:57,490 --> 00:47:02,529
UTC and that gives me a default of UTC

00:47:00,160 --> 00:47:04,240
for all my objects okay

00:47:02,529 --> 00:47:05,589
and I'm using date times okay you don't

00:47:04,240 --> 00:47:08,710
have to say that for dates obviously

00:47:05,589 --> 00:47:10,180
dates are always you Tuesday so the date

00:47:08,710 --> 00:47:11,890
time I read that in first and it in I'm

00:47:10,180 --> 00:47:12,500
adding an hour by just saying plus one

00:47:11,890 --> 00:47:15,020
day and one

00:47:12,500 --> 00:47:17,990
five hours and you can do 1 x months or

00:47:15,020 --> 00:47:20,960
3 times seconds or that would be silly

00:47:17,990 --> 00:47:24,710
but you can do it three times years

00:47:20,960 --> 00:47:26,630
anything you want right use the date

00:47:24,710 --> 00:47:28,400
stringify is two most of what I wanted I

00:47:26,630 --> 00:47:30,920
had to go out to the string have time to

00:47:28,400 --> 00:47:34,550
get the time zone on there but that's

00:47:30,920 --> 00:47:36,350
okay and then when I wanted to do GMT of

00:47:34,550 --> 00:47:38,090
course I don't live in GMT so I had to

00:47:36,350 --> 00:47:40,220
kind of fake out the computer because

00:47:38,090 --> 00:47:41,660
remember date easy just like time moment

00:47:40,220 --> 00:47:43,700
time peace those other guys and Perl

00:47:41,660 --> 00:47:45,590
itself it doesn't necessarily know time

00:47:43,700 --> 00:47:49,010
zones it just knows where you are and

00:47:45,590 --> 00:47:52,070
UTC so I wanted specifically GMT not UTC

00:47:49,010 --> 00:47:53,840
so I faked it out by using the in Linux

00:47:52,070 --> 00:47:56,900
you can do this using the TZ environment

00:47:53,840 --> 00:48:05,810
variable and made it pretend it was in

00:47:56,900 --> 00:48:08,060
London and there you go so I think the

00:48:05,810 --> 00:48:10,970
number one recommendation that I have

00:48:08,060 --> 00:48:13,310
for you is don't try to handle date

00:48:10,970 --> 00:48:14,990
yourself right it's harder than you

00:48:13,310 --> 00:48:17,360
thought it was and now we know how hard

00:48:14,990 --> 00:48:20,240
it is and now we see all the places that

00:48:17,360 --> 00:48:22,430
things can go wrong so you know use the

00:48:20,240 --> 00:48:24,200
modules that are out there which module

00:48:22,430 --> 00:48:27,110
do you use depends on what your goals

00:48:24,200 --> 00:48:28,640
are right if you just say I don't want

00:48:27,110 --> 00:48:29,420
Sipan or for some reason you can't get

00:48:28,640 --> 00:48:31,940
to see pan

00:48:29,420 --> 00:48:36,410
well then timepiece is a great solution

00:48:31,940 --> 00:48:37,310
okay if you your goal is more like look

00:48:36,410 --> 00:48:38,990
I need to be able to handle everything

00:48:37,310 --> 00:48:40,760
arbitrary time zones whatever I just

00:48:38,990 --> 00:48:42,170
need to be able handle anything well

00:48:40,760 --> 00:48:44,360
then you need day time because that is

00:48:42,170 --> 00:48:46,810
the thing that does that okay on the

00:48:44,360 --> 00:48:48,920
other hand you just wanted to be fast

00:48:46,810 --> 00:48:51,620
then time moment is really your only

00:48:48,920 --> 00:48:52,820
choice and hopefully if you just want

00:48:51,620 --> 00:48:56,150
something that we're just works out of

00:48:52,820 --> 00:49:02,300
the box then day Dez is a good solution

00:48:56,150 --> 00:49:06,710
for that okay and that is it and I'm a

00:49:02,300 --> 00:49:08,570
my over a little over hey okay cool

00:49:06,710 --> 00:49:13,550
John yeah no I'm not over well awesome

00:49:08,570 --> 00:49:15,800
so I can take questions yes the question

00:49:13,550 --> 00:49:18,200
was how do I handle testing so I have

00:49:15,800 --> 00:49:20,570
unit tests for everything the way that I

00:49:18,200 --> 00:49:22,670
do well I do two things first of all I

00:49:20,570 --> 00:49:24,800
do test-driven development which means I

00:49:22,670 --> 00:49:25,029
wrap my unit tests first and the other

00:49:24,800 --> 00:49:26,739
thing

00:49:25,029 --> 00:49:29,019
that I have done is especially for the

00:49:26,739 --> 00:49:31,689
conversion of strings into times I

00:49:29,019 --> 00:49:34,269
basically since I'm using those other

00:49:31,689 --> 00:49:36,099
modules underneath parts date and time

00:49:34,269 --> 00:49:37,719
par state I went out and stole all their

00:49:36,099 --> 00:49:40,179
unit debt not all but most of their unit

00:49:37,719 --> 00:49:42,869
tests and I make sure that my module can

00:49:40,179 --> 00:49:42,869
pass those as well

00:49:44,769 --> 00:49:50,859
I have not III have author tests you

00:49:49,630 --> 00:49:52,869
know you can do release tests that only

00:49:50,859 --> 00:49:54,519
run for you and I basically have some

00:49:52,869 --> 00:49:59,609
tests that I run in every possible time

00:49:54,519 --> 00:50:02,349
zone which is how I found a maybe bug in

00:49:59,609 --> 00:50:04,929
I don't know if it's in timepiece or if

00:50:02,349 --> 00:50:07,409
it's in the underlying string handling

00:50:04,929 --> 00:50:09,549
stuff but having to do is leap seconds

00:50:07,409 --> 00:50:13,719
you can end up in this weird situation

00:50:09,549 --> 00:50:17,259
where the string F time of percent Z and

00:50:13,719 --> 00:50:19,809
the arrow zone are not the same thing

00:50:17,259 --> 00:50:22,419
because of the leap seconds throwing off

00:50:19,809 --> 00:50:23,559
the daylight saving something and I did

00:50:22,419 --> 00:50:26,019
file an upstream bug for that but

00:50:23,559 --> 00:50:27,339
although I go say I'm still not clear

00:50:26,019 --> 00:50:29,890
that it's a bug because a lot of times

00:50:27,339 --> 00:50:31,329
you you see these issues and people say

00:50:29,890 --> 00:50:32,499
oh that's not a bug you're like wow but

00:50:31,329 --> 00:50:35,049
it didn't do what I thought so that kind

00:50:32,499 --> 00:50:39,069
of makes it a lot right

00:50:35,049 --> 00:50:40,359
so yeah so I have some some tests that

00:50:39,069 --> 00:50:41,919
run in every time zone but I didn't want

00:50:40,359 --> 00:50:44,380
to try to do that for everybody else

00:50:41,919 --> 00:50:45,999
because faking time that you have to

00:50:44,380 --> 00:50:47,829
have a there's a library called fake

00:50:45,999 --> 00:50:49,689
time which is very cool for this type of

00:50:47,829 --> 00:50:57,299
thing but not otherwise gonna have that

00:50:49,689 --> 00:50:57,299
obviously so more questions yes breath

00:50:59,160 --> 00:51:03,369
totally ethical okay Thank You Brett all

00:51:03,039 --> 00:51:13,809
right

00:51:03,369 --> 00:51:16,420
yeah Jeff no I cannot but my guess is

00:51:13,809 --> 00:51:17,950
gonna be now now remember when you start

00:51:16,420 --> 00:51:20,440
looking at date weirdnesses you get a

00:51:17,950 --> 00:51:21,759
lot of material so this is cut down and

00:51:20,440 --> 00:51:24,160
one of the things that I had in my

00:51:21,759 --> 00:51:26,229
original talk was some discussion of the

00:51:24,160 --> 00:51:28,299
switchover from Julian to Gregorian

00:51:26,229 --> 00:51:29,140
so since you said 1712 it makes me think

00:51:28,299 --> 00:51:31,809
that it might have something to do with

00:51:29,140 --> 00:51:34,089
that yeah that's what I thought so it's

00:51:31,809 --> 00:51:36,999
a fun thing about that is Pope Gregory's

00:51:34,089 --> 00:51:39,219
decree came out in I believe 1582 and

00:51:36,999 --> 00:51:40,630
you know when Julius Caesar said we're

00:51:39,219 --> 00:51:42,400
gonna change the calendar everybody went

00:51:40,630 --> 00:51:43,809
you know circus there's a calendar when

00:51:42,400 --> 00:51:45,279
Pope Gregory said we're gonna change the

00:51:43,809 --> 00:51:50,079
calendar everybody went now think about

00:51:45,279 --> 00:51:51,759
it so it's started in 1582 but it

00:51:50,079 --> 00:51:52,180
actually went all the way into the 20th

00:51:51,759 --> 00:51:54,969
century

00:51:52,180 --> 00:51:56,410
Russia didn't switch until 1918 Greece

00:51:54,969 --> 00:51:58,650
was the last holdout on the Julian

00:51:56,410 --> 00:52:03,420
calendar they switched in March of 1923

00:51:58,650 --> 00:52:03,420
341 years for complete adoption

00:52:11,810 --> 00:52:17,540
I did I did look at that and tried to

00:52:16,070 --> 00:52:18,980
find some example of where they messed

00:52:17,540 --> 00:52:20,900
with the dates but they didn't change

00:52:18,980 --> 00:52:22,970
the days of the week they messed with

00:52:20,900 --> 00:52:30,050
the date and the month but they kept the

00:52:22,970 --> 00:52:31,070
days of the week the same well that's

00:52:30,050 --> 00:52:33,830
true that's true

00:52:31,070 --> 00:52:40,990
Nathalie yeah calendar change overs are

00:52:33,830 --> 00:52:40,990
weird all right more questions yes I

00:52:43,090 --> 00:52:54,160
love all of my children equally thank

00:52:46,190 --> 00:52:56,510
you very much anything else yes I know

00:52:54,160 --> 00:52:59,470
yeah I think I need a drink too all

00:52:56,510 --> 00:52:59,470
right thanks everybody

00:53:01,970 --> 00:53:07,520

YouTube URL: https://www.youtube.com/watch?v=FV23EnZf3OY


