Title: Mickey Nasriachi - "Dancer From Scratch"
Publication date: 2018-06-19
Playlist: TPC 2018 in SLC
Description: 
	Letâ€™s build a mini-Dancer like web-framework for the educational value and for fun.
Captions: 
	00:00:00,030 --> 00:00:06,629
hi everyone my name is Nikki

00:00:03,300 --> 00:00:11,010
this is also my IRC handle and my PA's

00:00:06,629 --> 00:00:13,740
ID a little bit about myself I've been

00:00:11,010 --> 00:00:16,619
recently mostly working on the open

00:00:13,740 --> 00:00:19,289
source on Metis Sipan and a few years

00:00:16,619 --> 00:00:22,020
back I worked a little bit on dancer as

00:00:19,289 --> 00:00:24,630
well dancer to to be more precise and

00:00:22,020 --> 00:00:27,300
this is kind of where the idea for this

00:00:24,630 --> 00:00:30,000
talk came from I don't know if I want to

00:00:27,300 --> 00:00:34,250
start the whole story here because it's

00:00:30,000 --> 00:00:39,450
a bit long but it has to do with that

00:00:34,250 --> 00:00:40,320
so for living I write bugs at

00:00:39,450 --> 00:00:44,910
booking.com

00:00:40,320 --> 00:00:48,559
and as you may know we're always looking

00:00:44,910 --> 00:00:53,430
for talent so if you're interested then

00:00:48,559 --> 00:00:57,840
you know what to do so what is today's

00:00:53,430 --> 00:01:00,719
talk will be about I'm gonna go ahead

00:00:57,840 --> 00:01:05,489
and show you a lot of code of this

00:01:00,719 --> 00:01:07,670
project that I did a while ago as a as

00:01:05,489 --> 00:01:11,280
preparation for another talk but then it

00:01:07,670 --> 00:01:15,450
it grew because there were some

00:01:11,280 --> 00:01:17,250
challenges there that I wanted to things

00:01:15,450 --> 00:01:19,170
that I wanted to fix features that I

00:01:17,250 --> 00:01:23,630
wanted to add and slowly I started

00:01:19,170 --> 00:01:27,409
adding more and more stuff to it and

00:01:23,630 --> 00:01:31,470
suddenly I had this like little

00:01:27,409 --> 00:01:33,360
framework that actually worked it was a

00:01:31,470 --> 00:01:38,450
proof of concept of course and it it

00:01:33,360 --> 00:01:41,189
stays within that we're not gonna

00:01:38,450 --> 00:01:44,009
release it or do anything with it

00:01:41,189 --> 00:01:46,530
because yeah do we really need another

00:01:44,009 --> 00:01:50,689
framework the answer is absolutely not

00:01:46,530 --> 00:01:54,780
this is not what this is about I'm not

00:01:50,689 --> 00:02:01,350
the whole idea here is just for for

00:01:54,780 --> 00:02:03,899
proving a point for maybe teaching a

00:02:01,350 --> 00:02:05,549
little bit but I wouldn't even look at

00:02:03,899 --> 00:02:08,160
my code as something that I want to

00:02:05,549 --> 00:02:10,300
teach people most of your programmers

00:02:08,160 --> 00:02:12,460
probably better than I do so you

00:02:10,300 --> 00:02:15,010
not gonna be seeing good code today

00:02:12,460 --> 00:02:18,430
you're gonna see code it kind of works

00:02:15,010 --> 00:02:26,500
for the examples but but that is that's

00:02:18,430 --> 00:02:28,900
it yeah other than that it's a lot of

00:02:26,500 --> 00:02:31,270
fun so the whole thing was building

00:02:28,900 --> 00:02:33,130
something from scratch and if you know

00:02:31,270 --> 00:02:35,260
if you ever build something from scratch

00:02:33,130 --> 00:02:37,210
you know the level of satisfaction that

00:02:35,260 --> 00:02:38,950
you get from seeing something that you

00:02:37,210 --> 00:02:41,410
started from nothing and then it's

00:02:38,950 --> 00:02:44,230
working and or other people are using it

00:02:41,410 --> 00:02:46,330
in this case it's working it's really

00:02:44,230 --> 00:02:48,040
it's really nice I've been doing it ever

00:02:46,330 --> 00:02:49,870
since I started programming when I was

00:02:48,040 --> 00:02:52,270
back when I was 11 years old I was

00:02:49,870 --> 00:02:55,360
building things from scratch and I

00:02:52,270 --> 00:02:58,510
always enjoyed them the most so in this

00:02:55,360 --> 00:03:00,940
case I just thought you know what this

00:02:58,510 --> 00:03:03,070
this was a nice project I want to share

00:03:00,940 --> 00:03:05,860
it with people and I hope you will enjoy

00:03:03,070 --> 00:03:08,080
it as well so we're going to see it

00:03:05,860 --> 00:03:10,930
growing from the start and until it

00:03:08,080 --> 00:03:12,370
becomes something that works and the

00:03:10,930 --> 00:03:16,090
ultimate goal would be to show you

00:03:12,370 --> 00:03:22,959
something that a friend of mine designed

00:03:16,090 --> 00:03:25,450
for me this website I'm gonna go ahead

00:03:22,959 --> 00:03:32,950
and run the server it's just a

00:03:25,450 --> 00:03:35,709
development server and so a big thank

00:03:32,950 --> 00:03:36,880
you to a friend of mine from booking is

00:03:35,709 --> 00:03:39,130
a great designer

00:03:36,880 --> 00:03:43,060
Ridvan Sanusi he designed this website

00:03:39,130 --> 00:03:46,780
for the purpose of this talk it's a

00:03:43,060 --> 00:03:49,270
simple page it's it doesn't do a lot but

00:03:46,780 --> 00:03:51,730
show you a few images and have some

00:03:49,270 --> 00:03:56,410
links if I click on one of the links

00:03:51,730 --> 00:04:00,520
then you will see static content about

00:03:56,410 --> 00:04:02,980
this specific plant but there are some

00:04:00,520 --> 00:04:06,670
things that happen here and and and I

00:04:02,980 --> 00:04:11,130
want to quickly show you what's going on

00:04:06,670 --> 00:04:11,130
here so

00:04:11,790 --> 00:04:19,000
this is the web application that runs

00:04:15,069 --> 00:04:22,660
this website so first you can see that

00:04:19,000 --> 00:04:29,020
I'm using a different framework but the

00:04:22,660 --> 00:04:32,200
syntax is quite denser like it is it has

00:04:29,020 --> 00:04:35,350
the same not all of it but some of the

00:04:32,200 --> 00:04:38,500
DSL that the answer provides as well you

00:04:35,350 --> 00:04:42,460
can see that you can define routes the

00:04:38,500 --> 00:04:45,370
same way use templates in this case it

00:04:42,460 --> 00:04:49,540
will support the X late template as an

00:04:45,370 --> 00:04:52,290
engine when I define the name of the

00:04:49,540 --> 00:04:55,479
template it will look for a matching

00:04:52,290 --> 00:04:57,940
file with a dot HTML extension in the

00:04:55,479 --> 00:05:00,700
public directory I can pass information

00:04:57,940 --> 00:05:05,229
to this template in fact the page that

00:05:00,700 --> 00:05:07,330
you just saw is is a templated that's

00:05:05,229 --> 00:05:10,810
the whole thing right it's it's a column

00:05:07,330 --> 00:05:15,690
separated that's X late syntax going

00:05:10,810 --> 00:05:18,340
over some structure and using some

00:05:15,690 --> 00:05:22,240
elements from from the data like file

00:05:18,340 --> 00:05:27,760
image and name the file is something

00:05:22,240 --> 00:05:29,890
like this it's it's not a lot but if you

00:05:27,760 --> 00:05:33,940
see we hope we also have one other route

00:05:29,890 --> 00:05:38,380
handler which does name matching on on

00:05:33,940 --> 00:05:40,570
on a route and uses that this to to be

00:05:38,380 --> 00:05:43,570
passed to the template as a name of a

00:05:40,570 --> 00:05:47,400
file so this is capturing in this case

00:05:43,570 --> 00:05:50,020
like the chrysanthemum dot HTML HTML

00:05:47,400 --> 00:05:51,520
that of course if you're using the

00:05:50,020 --> 00:05:53,169
answer you know about Auto pages which

00:05:51,520 --> 00:05:55,330
will do the same thing but in this case

00:05:53,169 --> 00:05:57,789
I was first thinking that I'm going to

00:05:55,330 --> 00:05:59,710
pass information to this template so I

00:05:57,789 --> 00:06:02,470
wanted to keep it like this and I also

00:05:59,710 --> 00:06:04,810
didn't implement the auto pages so this

00:06:02,470 --> 00:06:07,030
was a bit of a nice trick you think this

00:06:04,810 --> 00:06:11,169
is actually implementing this was the

00:06:07,030 --> 00:06:15,460
reason this project actually continued

00:06:11,169 --> 00:06:18,850
after the first talk and to get to this

00:06:15,460 --> 00:06:22,270
point where this small amount of HTML

00:06:18,850 --> 00:06:23,710
template that HTML and a very tiny web

00:06:22,270 --> 00:06:27,370
application would actually

00:06:23,710 --> 00:06:30,490
work we need a framework that can

00:06:27,370 --> 00:06:34,150
actually do that if you know anything

00:06:30,490 --> 00:06:36,310
about frameworks they tend to be very

00:06:34,150 --> 00:06:37,630
big very heavy they do a lot of things

00:06:36,310 --> 00:06:40,810
they have a lot of features there's a

00:06:37,630 --> 00:06:43,930
lot of a lot of man-hours put in them

00:06:40,810 --> 00:06:47,050
for security for testing and for

00:06:43,930 --> 00:06:49,570
features this is not the case this is a

00:06:47,050 --> 00:06:52,330
very tiny and as you will see this whole

00:06:49,570 --> 00:06:54,670
framework is less than 150 lines of code

00:06:52,330 --> 00:06:57,940
but still it will do a lot of things

00:06:54,670 --> 00:06:59,460
that are really nice so let's start

00:06:57,940 --> 00:07:05,740
building it

00:06:59,460 --> 00:07:09,640
we'll start at a very simple scratch pad

00:07:05,740 --> 00:07:12,280
but for us scratch would not be an empty

00:07:09,640 --> 00:07:16,180
file I am going to build on top of

00:07:12,280 --> 00:07:22,120
plaque I did not go that crazy to also

00:07:16,180 --> 00:07:24,430
implement my own implementation for the

00:07:22,120 --> 00:07:26,200
PS GI protocol I might do that

00:07:24,430 --> 00:07:29,800
for the next talk if I ever give it

00:07:26,200 --> 00:07:34,450
again but for for this time I I settled

00:07:29,800 --> 00:07:40,020
for just using black as is so the first

00:07:34,450 --> 00:07:43,930
example that we're going to see and hope

00:07:40,020 --> 00:07:48,000
is the font size big enough for you guys

00:07:43,930 --> 00:07:51,610
to read all right don't take it as a yes

00:07:48,000 --> 00:07:55,450
I'm going to run this on a different

00:07:51,610 --> 00:07:57,720
port and everything that I'm going to do

00:07:55,450 --> 00:08:00,940
now will just be running live and I will

00:07:57,720 --> 00:08:06,630
test the code life so in this first

00:08:00,940 --> 00:08:11,500
example all I'm doing is building a very

00:08:06,630 --> 00:08:15,910
simple PS GI application this is still

00:08:11,500 --> 00:08:20,070
just a web application it uses black

00:08:15,910 --> 00:08:25,480
component as its parent the reason is

00:08:20,070 --> 00:08:27,010
black component gives you it gives you a

00:08:25,480 --> 00:08:31,450
framework for for building an

00:08:27,010 --> 00:08:33,370
application that would you can use to to

00:08:31,450 --> 00:08:35,419
run to build the application itself by

00:08:33,370 --> 00:08:40,129
calling the to app so

00:08:35,419 --> 00:08:43,639
in our sorry in our PSUs crib that runs

00:08:40,129 --> 00:08:45,019
this III call to app and get the

00:08:43,639 --> 00:08:47,179
application back and this is what's

00:08:45,019 --> 00:08:51,559
being passed to black up in order to run

00:08:47,179 --> 00:08:53,629
the server so this comes from for free

00:08:51,559 --> 00:08:54,860
when you use black component you don't

00:08:53,629 --> 00:08:56,449
need to implement that the only thing

00:08:54,860 --> 00:08:59,839
that you do need to implement is one

00:08:56,449 --> 00:09:02,239
method called call which will be run for

00:08:59,839 --> 00:09:04,759
every request coming into the server and

00:09:02,239 --> 00:09:09,199
it will pass the environment which is

00:09:04,759 --> 00:09:13,339
the request itself all it needs to do is

00:09:09,199 --> 00:09:15,889
return a valid PS GI response in this

00:09:13,339 --> 00:09:19,549
case I'm just going to return some 200

00:09:15,889 --> 00:09:21,259
status a header and some content that

00:09:19,549 --> 00:09:25,759
also contains something from the request

00:09:21,259 --> 00:09:32,149
just to see it and to end to test this

00:09:25,759 --> 00:09:34,910
we can simply call curl on the port we

00:09:32,149 --> 00:09:37,970
can see that we got the the value in the

00:09:34,910 --> 00:09:40,129
content that we did we set of course if

00:09:37,970 --> 00:09:41,899
I do it in a verbis mode you can see a

00:09:40,129 --> 00:09:45,319
little bit more we can see the header

00:09:41,899 --> 00:09:48,589
that we set and and the response the

00:09:45,319 --> 00:09:53,329
status that we got to make this a bit

00:09:48,589 --> 00:09:56,329
more readable hopefully I wrapped curl

00:09:53,329 --> 00:09:59,779
with a small perl script to give some

00:09:56,329 --> 00:10:01,850
color I hope you can read this it's just

00:09:59,779 --> 00:10:03,199
to make it a bit clearer on what we send

00:10:01,850 --> 00:10:07,160
and what we're getting just for the

00:10:03,199 --> 00:10:10,730
purpose of this talk so this was our

00:10:07,160 --> 00:10:18,439
first example very basic still doing

00:10:10,730 --> 00:10:20,989
nothing so we start building on this

00:10:18,439 --> 00:10:26,449
first thing we do is we don't want to

00:10:20,989 --> 00:10:29,239
write PS GI code or PCI syntax so we'll

00:10:26,449 --> 00:10:31,160
use objects with the help of black

00:10:29,239 --> 00:10:34,100
requests and black responses objects as

00:10:31,160 --> 00:10:37,249
a model that we can create objects from

00:10:34,100 --> 00:10:40,189
well in our call we will create a

00:10:37,249 --> 00:10:43,279
request from the environment that we got

00:10:40,189 --> 00:10:46,610
and we will create a response object

00:10:43,279 --> 00:10:48,680
which will fill with content in this

00:10:46,610 --> 00:10:50,750
case I also see realize the

00:10:48,680 --> 00:10:53,050
the content with Jason and change the

00:10:50,750 --> 00:10:56,510
header that we sent to the content type

00:10:53,050 --> 00:10:59,810
you can do it doesn't have to be Jason

00:10:56,510 --> 00:11:02,120
but it is and the final call is to

00:10:59,810 --> 00:11:04,460
finalize which will basically transform

00:11:02,120 --> 00:11:07,010
their response object into a PCI

00:11:04,460 --> 00:11:10,040
response and this is what we're going to

00:11:07,010 --> 00:11:11,990
get back so if I run the same call as

00:11:10,040 --> 00:11:14,870
before now you see the content type is

00:11:11,990 --> 00:11:18,860
application Jason and we get a

00:11:14,870 --> 00:11:26,120
serialized Jason as output so our

00:11:18,860 --> 00:11:29,240
application is improving next step would

00:11:26,120 --> 00:11:32,150
be to differentiate between different

00:11:29,240 --> 00:11:33,980
HTTP methods so we want to have

00:11:32,150 --> 00:11:38,120
different handling for different

00:11:33,980 --> 00:11:40,100
requests a request has a path and a

00:11:38,120 --> 00:11:44,450
method so we start with dealing with the

00:11:40,100 --> 00:11:47,779
method so I left the same handling when

00:11:44,450 --> 00:11:50,210
the request method is a get and added

00:11:47,779 --> 00:11:53,120
different handling for other requests so

00:11:50,210 --> 00:11:55,670
if I set send the same request as before

00:11:53,120 --> 00:11:58,970
I will get the exact same output but if

00:11:55,670 --> 00:12:01,610
I send a post request the only thing

00:11:58,970 --> 00:12:03,830
that will happen is the 201 status that

00:12:01,610 --> 00:12:05,570
will be set and as you can see this is

00:12:03,830 --> 00:12:08,860
exactly what happens if I send anything

00:12:05,570 --> 00:12:12,230
else whether it's a valid or invalid

00:12:08,860 --> 00:12:13,970
HTTP method I will just get and not

00:12:12,230 --> 00:12:16,010
allowed and it's not because it's not

00:12:13,970 --> 00:12:17,720
allowed just because I set it here I

00:12:16,010 --> 00:12:22,850
could have set it to anything whatever

00:12:17,720 --> 00:12:26,480
is here would have been responded would

00:12:22,850 --> 00:12:31,520
be in the responsible so so far we

00:12:26,480 --> 00:12:35,930
differentiate by method next step would

00:12:31,520 --> 00:12:37,510
be to differentiate by path so here

00:12:35,930 --> 00:12:40,300
again I didn't touch to get I only

00:12:37,510 --> 00:12:42,709
splayed the path so I can use it and

00:12:40,300 --> 00:12:50,020
again with the example of the post code

00:12:42,709 --> 00:12:52,850
I do I do checks on what is the path

00:12:50,020 --> 00:12:54,570
again this is not a pretty code and I do

00:12:52,850 --> 00:12:59,720
not recommend

00:12:54,570 --> 00:13:04,260
ever using it but if I send a request as

00:12:59,720 --> 00:13:07,980
before for a post request I will get a

00:13:04,260 --> 00:13:10,260
401 the 401 is actually because of this

00:13:07,980 --> 00:13:12,449
condition not being met because we are

00:13:10,260 --> 00:13:15,870
checking whether the path starts with a

00:13:12,449 --> 00:13:19,079
slash API so sir that now I get it

00:13:15,870 --> 00:13:21,990
I'm getting a 400 which is because there

00:13:19,079 --> 00:13:27,839
is no second part of the path so I'll

00:13:21,990 --> 00:13:29,880
add second path and now I'm still

00:13:27,839 --> 00:13:33,930
getting a bad request and this is

00:13:29,880 --> 00:13:36,630
because oh I have an empty body it's

00:13:33,930 --> 00:13:42,720
expecting the body of the request to be

00:13:36,630 --> 00:13:49,050
a valid Jason and you have some keys so

00:13:42,720 --> 00:13:54,420
let's add a valid Jason this needs to be

00:13:49,050 --> 00:13:56,910
escaped and raah we got the 201 so

00:13:54,420 --> 00:13:59,000
everything worked so what do we have now

00:13:56,910 --> 00:14:03,300
we have an application the application

00:13:59,000 --> 00:14:06,269
works per path per method we can handle

00:14:03,300 --> 00:14:07,980
different paths being requested with

00:14:06,269 --> 00:14:11,339
different methods differently we can

00:14:07,980 --> 00:14:15,240
basically implement a fully-featured

00:14:11,339 --> 00:14:18,120
crud application here which is pretty

00:14:15,240 --> 00:14:20,760
much what I did and this is where this

00:14:18,120 --> 00:14:24,829
whole thing started for me I just needed

00:14:20,760 --> 00:14:27,420
to write an application with no

00:14:24,829 --> 00:14:30,449
framework there was a business case for

00:14:27,420 --> 00:14:34,230
it though normally I would not recommend

00:14:30,449 --> 00:14:37,589
doing that but it was a very simple case

00:14:34,230 --> 00:14:40,110
and very specific use case and and and

00:14:37,589 --> 00:14:47,430
that's pretty much covering what we what

00:14:40,110 --> 00:14:50,639
we did back then but now now I wanted to

00:14:47,430 --> 00:14:54,360
keep going and make this thing look a

00:14:50,639 --> 00:14:55,620
bit more like a framework so it will

00:14:54,360 --> 00:15:01,050
we'll get there

00:14:55,620 --> 00:15:03,959
still small steps first thing was to get

00:15:01,050 --> 00:15:06,870
the logic of the path handling out of

00:15:03,959 --> 00:15:10,110
the call method so I create

00:15:06,870 --> 00:15:13,260
this route registry which holds route

00:15:10,110 --> 00:15:15,240
handlers basically code rafts that will

00:15:13,260 --> 00:15:17,940
be called Parral

00:15:15,240 --> 00:15:22,140
they go by method and path so if we have

00:15:17,940 --> 00:15:25,740
a matching method and path for this for

00:15:22,140 --> 00:15:27,870
this request we will execute a method

00:15:25,740 --> 00:15:29,580
we'll pass the request in response to it

00:15:27,870 --> 00:15:32,370
and we'll get back the content and set

00:15:29,580 --> 00:15:34,470
it back into the response I don't have

00:15:32,370 --> 00:15:36,150
to do it because the the response object

00:15:34,470 --> 00:15:38,910
is being passed but the reason I'm doing

00:15:36,150 --> 00:15:40,860
it is because I as you remember I want

00:15:38,910 --> 00:15:42,930
to do something that's similar to dancer

00:15:40,860 --> 00:15:45,540
and this is the way dancer work when

00:15:42,930 --> 00:15:48,180
when the handler gives back the response

00:15:45,540 --> 00:15:51,900
this is what's being set into the into

00:15:48,180 --> 00:15:54,830
the response content so I kept the same

00:15:51,900 --> 00:15:59,339
style and I'm pulling the content out

00:15:54,830 --> 00:16:01,589
the registry itself it's a simple it's a

00:15:59,339 --> 00:16:04,260
simple global hash it's not nothing

00:16:01,589 --> 00:16:06,180
special there a method that that will

00:16:04,260 --> 00:16:10,040
just take a method or out and handler

00:16:06,180 --> 00:16:13,170
and we'll fill this hash and I'm using

00:16:10,040 --> 00:16:17,070
this hook that exists in black component

00:16:13,170 --> 00:16:19,320
if you if you implement this method the

00:16:17,070 --> 00:16:22,589
subroutine called prepare app it will be

00:16:19,320 --> 00:16:25,560
called once during the to app execution

00:16:22,589 --> 00:16:30,600
and in this case it's a perfect place

00:16:25,560 --> 00:16:33,630
for us to put the route adding code so

00:16:30,600 --> 00:16:36,089
we set those routes once into the

00:16:33,630 --> 00:16:37,529
registry and when the call comes in it

00:16:36,089 --> 00:16:39,240
will check the registry if they're if

00:16:37,529 --> 00:16:43,730
they're out is defined it will it will

00:16:39,240 --> 00:16:46,730
run just to make sure that this works

00:16:43,730 --> 00:16:46,730
let's

00:16:53,430 --> 00:16:57,010
not found of course because they did not

00:16:55,870 --> 00:17:00,490
define a slash

00:16:57,010 --> 00:17:02,860
it's a slash hello so if I call a get

00:17:00,490 --> 00:17:05,559
request to slash hello I will get this

00:17:02,860 --> 00:17:10,299
method to actually this subroutine to

00:17:05,559 --> 00:17:13,760
run and we will get the the response you

00:17:10,299 --> 00:17:15,059
can see that this is becoming somewhat

00:17:13,760 --> 00:17:18,850
[Music]

00:17:15,059 --> 00:17:21,669
more familiar the the the syntax here

00:17:18,850 --> 00:17:32,950
gets closer and closer to the syntax of

00:17:21,669 --> 00:17:36,429
the answer next step with the help of

00:17:32,950 --> 00:17:38,740
some syntactic sugar for the get and

00:17:36,429 --> 00:17:39,730
post requests this is not the important

00:17:38,740 --> 00:17:42,280
thing here

00:17:39,730 --> 00:17:46,000
I wanted to implement this I wanted to

00:17:42,280 --> 00:17:49,540
be able to use a named capture in the

00:17:46,000 --> 00:17:52,690
route and use it within the execution of

00:17:49,540 --> 00:17:56,470
my route handler so of course I have to

00:17:52,690 --> 00:17:59,650
pass the captures in so I can access the

00:17:56,470 --> 00:18:04,570
data but as you can see I can pull from

00:17:59,650 --> 00:18:08,740
this hash RAF by the same key that I set

00:18:04,570 --> 00:18:12,580
in the route the value that was passed

00:18:08,740 --> 00:18:16,090
in so now first see that it works if I

00:18:12,580 --> 00:18:20,020
say this is slash slash hello slash

00:18:16,090 --> 00:18:21,940
whatever name let's say the answer this

00:18:20,020 --> 00:18:24,850
thing will go all the way from the route

00:18:21,940 --> 00:18:26,620
be baked into the captures and then I

00:18:24,850 --> 00:18:30,790
can actually use it within the handler

00:18:26,620 --> 00:18:33,460
it's pretty cool it it took some yeah

00:18:30,790 --> 00:18:36,070
some thinking about how to do that it's

00:18:33,460 --> 00:18:42,370
not as trivial as doing exact matching

00:18:36,070 --> 00:18:45,640
so the way I did it was when I set when

00:18:42,370 --> 00:18:48,970
I when I call a drought it will check

00:18:45,640 --> 00:18:54,790
whether the route contains a column if

00:18:48,970 --> 00:18:58,870
it does it will replace the it will

00:18:54,790 --> 00:19:01,390
create a string array X from the route

00:18:58,870 --> 00:19:03,909
with the substitution of that colon and

00:19:01,390 --> 00:19:05,000
whatever came after it with the syntax

00:19:03,909 --> 00:19:07,880
of

00:19:05,000 --> 00:19:12,020
Kevin em captured regular expression and

00:19:07,880 --> 00:19:16,340
we store that in in another global hash

00:19:12,020 --> 00:19:18,049
that's called route QR there is another

00:19:16,340 --> 00:19:20,530
one that's called sorted routes the

00:19:18,049 --> 00:19:27,559
reason I added this one at the end of

00:19:20,530 --> 00:19:29,960
the route setting I'm creating I'm

00:19:27,559 --> 00:19:33,350
creating a sorted list for every method

00:19:29,960 --> 00:19:36,650
of the routes that it has and this is a

00:19:33,350 --> 00:19:39,559
descending sorted descending by length

00:19:36,650 --> 00:19:42,590
the reason I added it was because when

00:19:39,559 --> 00:19:45,799
you have when you don't have exact

00:19:42,590 --> 00:19:47,510
matches and you don't know what the

00:19:45,799 --> 00:19:51,799
length of your route is you probably

00:19:47,510 --> 00:19:54,140
want to capture the longest one this was

00:19:51,799 --> 00:19:56,360
a nice idea but it is buggy

00:19:54,140 --> 00:20:00,289
I noticed the bug I think two days ago

00:19:56,360 --> 00:20:02,090
because the length that is being checked

00:20:00,289 --> 00:20:04,789
is the length of the string that we

00:20:02,090 --> 00:20:06,830
defined here which includes the name of

00:20:04,789 --> 00:20:09,020
the key so it's the it's not necessarily

00:20:06,830 --> 00:20:12,980
a longer route if just the name of the

00:20:09,020 --> 00:20:17,419
key is longer so you can probably make

00:20:12,980 --> 00:20:20,570
it fail but yeah it doesn't really

00:20:17,419 --> 00:20:22,730
matter the idea was nice how does it

00:20:20,570 --> 00:20:26,059
work in in during the call we're just by

00:20:22,730 --> 00:20:28,610
checking like before we're checking if

00:20:26,059 --> 00:20:30,919
we have an exact match if we have we run

00:20:28,610 --> 00:20:33,740
this one if we don't have an exact match

00:20:30,919 --> 00:20:36,500
we will check whether this route has a

00:20:33,740 --> 00:20:39,980
QRS assigned to it in the in the other

00:20:36,500 --> 00:20:43,190
global hash and if it does we will

00:20:39,980 --> 00:20:46,280
execute the regular expression and if we

00:20:43,190 --> 00:20:50,210
have well yeah if we have a match then

00:20:46,280 --> 00:20:52,549
the kept name captures hash will be

00:20:50,210 --> 00:20:54,669
passed by reference also and this is

00:20:52,549 --> 00:20:59,330
what you've seen in the route handler as

00:20:54,669 --> 00:21:02,360
the hash ref dollar captures which I

00:20:59,330 --> 00:21:05,240
referenced and took the value from so

00:21:02,360 --> 00:21:10,490
this works this works and it's really

00:21:05,240 --> 00:21:12,740
nice next example would be number seven

00:21:10,490 --> 00:21:17,090
and if I remember correctly this is the

00:21:12,740 --> 00:21:18,220
first one where I actually took the

00:21:17,090 --> 00:21:21,309
route handling

00:21:18,220 --> 00:21:26,140
outside of this file so far we had one

00:21:21,309 --> 00:21:27,520
file that defines everything and but we

00:21:26,140 --> 00:21:29,679
don't want that right we want a

00:21:27,520 --> 00:21:31,179
framework so a framework needs to be

00:21:29,679 --> 00:21:34,770
working with every with a lot of

00:21:31,179 --> 00:21:39,510
different files that define applications

00:21:34,770 --> 00:21:44,289
in this case I added another file called

00:21:39,510 --> 00:21:48,010
web app and here you can see that it

00:21:44,289 --> 00:21:50,650
already starts to look like and here

00:21:48,010 --> 00:21:53,350
also the app itself that we're running

00:21:50,650 --> 00:21:57,039
is no longer using the dancer from

00:21:53,350 --> 00:22:00,669
scratch but now it is our app and to

00:21:57,039 --> 00:22:03,179
make that work had to do a lot of things

00:22:00,669 --> 00:22:09,340
that I'm going to go over right now

00:22:03,179 --> 00:22:13,059
so first web app itself is a bit more

00:22:09,340 --> 00:22:17,890
denser like syntax as you can see it

00:22:13,059 --> 00:22:22,059
uses our framework module and it

00:22:17,890 --> 00:22:26,740
supports all sorts of keywords just like

00:22:22,059 --> 00:22:32,010
the answer to define the routes now to

00:22:26,740 --> 00:22:35,440
make that work I had to do a bit of

00:22:32,010 --> 00:22:38,440
dancer like trickery and being familiar

00:22:35,440 --> 00:22:42,610
with dancer core I stole some ideas from

00:22:38,440 --> 00:22:46,150
they're not one-to-one but it's kind of

00:22:42,610 --> 00:22:52,570
like the same concept so what happens is

00:22:46,150 --> 00:22:54,940
when we use our framework module it will

00:22:52,570 --> 00:22:56,289
go ahead and parse this file the first

00:22:54,940 --> 00:22:58,030
thing that it will one of the first

00:22:56,289 --> 00:23:02,500
things that it will do it will create a

00:22:58,030 --> 00:23:05,289
singleton object of that file put all

00:23:02,500 --> 00:23:10,210
the global data that we had in those

00:23:05,289 --> 00:23:12,669
hashes inside this singleton change all

00:23:10,210 --> 00:23:15,220
the code that we have that was

00:23:12,669 --> 00:23:18,400
referencing those Global's to to

00:23:15,220 --> 00:23:24,980
basically add stuff into that singleton

00:23:18,400 --> 00:23:29,419
into its structures and

00:23:24,980 --> 00:23:32,750
as a bonus inject some methods into the

00:23:29,419 --> 00:23:37,309
namespace of the caller which is our web

00:23:32,750 --> 00:23:40,850
app so what happens is once that file

00:23:37,309 --> 00:23:45,140
was parsed and those methods were added

00:23:40,850 --> 00:23:47,630
to our namespace then when we basically

00:23:45,140 --> 00:23:48,790
run this subroutine because that's what

00:23:47,630 --> 00:23:52,040
it is

00:23:48,790 --> 00:23:56,290
it's defined in our namespace but what

00:23:52,040 --> 00:24:00,740
it does it passes those values basically

00:23:56,290 --> 00:24:03,770
to the a drought call which in turn

00:24:00,740 --> 00:24:04,730
would inject this data into our

00:24:03,770 --> 00:24:06,950
singleton

00:24:04,730 --> 00:24:10,070
so our singleton is the one thing that

00:24:06,950 --> 00:24:12,549
gets inflated with all this data all the

00:24:10,070 --> 00:24:16,400
routes are registered there and

00:24:12,549 --> 00:24:18,500
eventually it will hold everything that

00:24:16,400 --> 00:24:22,070
our application means in order to run

00:24:18,500 --> 00:24:24,860
and the final call which is done from

00:24:22,070 --> 00:24:27,020
the PS GI file

00:24:24,860 --> 00:24:30,440
so what plaque up is running it's

00:24:27,020 --> 00:24:34,130
calling to app on our web application

00:24:30,440 --> 00:24:38,240
module which in turn will call to app on

00:24:34,130 --> 00:24:41,090
the singleton object so we will get that

00:24:38,240 --> 00:24:47,090
application registered and run by the

00:24:41,090 --> 00:24:57,169
server let's just make sure that this

00:24:47,090 --> 00:25:01,429
still works it is still working but we

00:24:57,169 --> 00:25:03,650
made a very big jump here we we now have

00:25:01,429 --> 00:25:07,400
a web application separated and in our

00:25:03,650 --> 00:25:09,770
code of the dancer from scratch module

00:25:07,400 --> 00:25:11,570
is now our framework to be used but

00:25:09,770 --> 00:25:13,910
still there are some ugly things here

00:25:11,570 --> 00:25:17,390
like we're still passing the request and

00:25:13,910 --> 00:25:22,880
response or and captures so I wanted to

00:25:17,390 --> 00:25:24,590
make that a bit cleaner as well so we

00:25:22,880 --> 00:25:26,690
want to we want to see the application

00:25:24,590 --> 00:25:30,400
more like this right we want to

00:25:26,690 --> 00:25:34,490
remove all the unnecessary stuff from it

00:25:30,400 --> 00:25:38,030
to do that I added more things into the

00:25:34,490 --> 00:25:41,450
DSL so more methods that do more more

00:25:38,030 --> 00:25:44,720
stuff more features than sir like access

00:25:41,450 --> 00:25:48,830
ORS to the accessories to the parameters

00:25:44,720 --> 00:25:52,550
like body route access to the request

00:25:48,830 --> 00:25:55,970
and response captures is now its own key

00:25:52,550 --> 00:25:59,750
so I don't need to to pass it I can just

00:25:55,970 --> 00:26:04,220
access it directly it will just transfer

00:25:59,750 --> 00:26:08,360
the contents of the captures hash that

00:26:04,220 --> 00:26:11,330
is now in the singleton itself so I'm

00:26:08,360 --> 00:26:14,180
assigning it into the singleton when I'm

00:26:11,330 --> 00:26:19,790
matching something so in the Col we

00:26:14,180 --> 00:26:24,680
expect to see it here app captures gets

00:26:19,790 --> 00:26:27,530
the gets the hash ref when we have a

00:26:24,680 --> 00:26:29,390
match which I just realize is another

00:26:27,530 --> 00:26:31,610
bug because it's not being cleaned so if

00:26:29,390 --> 00:26:34,580
there is a something being matched there

00:26:31,610 --> 00:26:39,680
then for the next call it will still be

00:26:34,580 --> 00:26:42,410
there needs to be fixed so eventually we

00:26:39,680 --> 00:26:45,170
have a nice clean dancer like

00:26:42,410 --> 00:26:47,360
application that would that would work

00:26:45,170 --> 00:26:48,440
it still works right let's make sure

00:26:47,360 --> 00:26:52,780
that it still works

00:26:48,440 --> 00:26:52,780
it still works nice

00:26:55,590 --> 00:27:04,110
I wanted to add hooks because why not

00:27:00,510 --> 00:27:05,940
so before and after hooks that will not

00:27:04,110 --> 00:27:09,779
do much but just print something here

00:27:05,940 --> 00:27:12,059
and of course had to support it from DSL

00:27:09,779 --> 00:27:14,820
it will call a method called edy hook

00:27:12,059 --> 00:27:16,350
which will just register the same way we

00:27:14,820 --> 00:27:20,400
did with route it will just register

00:27:16,350 --> 00:27:25,110
hook in a global in a global hash which

00:27:20,400 --> 00:27:28,159
is inside our singleton now I had to

00:27:25,110 --> 00:27:32,779
remove the part that calls the the

00:27:28,159 --> 00:27:37,440
basically calls the handler into into

00:27:32,779 --> 00:27:40,230
its own sub which will first run the

00:27:37,440 --> 00:27:42,659
before hook then run the the handler and

00:27:40,230 --> 00:27:44,820
then run the after hook I can choose

00:27:42,659 --> 00:27:47,370
what kind of data I want to pass to

00:27:44,820 --> 00:27:51,210
those hooks in this case I just passed

00:27:47,370 --> 00:27:53,370
the return value to the after hook could

00:27:51,210 --> 00:27:59,279
have basically run anything there

00:27:53,370 --> 00:28:03,090
because also it has the same access as

00:27:59,279 --> 00:28:05,460
any DSL like anything that a normal

00:28:03,090 --> 00:28:08,340
handler has it can just access through

00:28:05,460 --> 00:28:11,130
the DSL so the only thing that was

00:28:08,340 --> 00:28:14,520
missing was the return value I added

00:28:11,130 --> 00:28:16,559
this as well now if we run something we

00:28:14,520 --> 00:28:18,799
will see that it still works but also

00:28:16,559 --> 00:28:24,840
the before and after hooks were called

00:28:18,799 --> 00:28:27,299
around the call of the handler and the

00:28:24,840 --> 00:28:30,419
last thing that was missing to make this

00:28:27,299 --> 00:28:32,220
whole thing nice was actually to make

00:28:30,419 --> 00:28:35,010
the thing that you've seen in the

00:28:32,220 --> 00:28:41,549
beginning work so be able to run

00:28:35,010 --> 00:28:45,840
templates and have a nice rendered page

00:28:41,549 --> 00:28:48,450
being served so I added an instance of a

00:28:45,840 --> 00:28:50,909
template engine to the to the singleton

00:28:48,450 --> 00:28:54,149
to the app in this case just chose the

00:28:50,909 --> 00:28:58,169
xx light could be anything else

00:28:54,149 --> 00:28:59,970
I could add well maybe in the future

00:28:58,169 --> 00:29:01,750
could add configuration that can control

00:28:59,970 --> 00:29:04,360
this like in the answer

00:29:01,750 --> 00:29:06,940
don't really want to go there but can do

00:29:04,360 --> 00:29:10,690
that also it's added support for before

00:29:06,940 --> 00:29:13,960
template and after template hooks now

00:29:10,690 --> 00:29:16,300
when we render something if I go and

00:29:13,960 --> 00:29:20,670
show you the implementation wait we just

00:29:16,300 --> 00:29:24,160
call render template method which will

00:29:20,670 --> 00:29:27,040
first it will take the name of the first

00:29:24,160 --> 00:29:30,340
value assume that it's an HTML file

00:29:27,040 --> 00:29:32,620
under the public directory and run do

00:29:30,340 --> 00:29:34,300
before template run the after template

00:29:32,620 --> 00:29:36,250
after we render it and in the middle

00:29:34,300 --> 00:29:39,670
between in between them it will run the

00:29:36,250 --> 00:29:41,320
template engines render call on the

00:29:39,670 --> 00:29:45,610
arguments that they've got so this is

00:29:41,320 --> 00:29:48,100
why now this is not the file anymore

00:29:45,610 --> 00:29:52,800
because at this point I've also changed

00:29:48,100 --> 00:29:57,100
the PS GI script to run the other

00:29:52,800 --> 00:30:01,240
application that you've seen before so

00:29:57,100 --> 00:30:04,990
let's switch to that now our our

00:30:01,240 --> 00:30:07,690
application can look exactly like it did

00:30:04,990 --> 00:30:10,690
before a very simple thing that supports

00:30:07,690 --> 00:30:15,870
the templating passing information and

00:30:10,690 --> 00:30:20,920
everything in between works with this

00:30:15,870 --> 00:30:25,210
framework that is yeah roughly 150 lines

00:30:20,920 --> 00:30:27,640
of code also added a bunch of of checks

00:30:25,210 --> 00:30:29,830
when I'm adding a hook or adding a route

00:30:27,640 --> 00:30:32,530
I added a bunch of checks because now

00:30:29,830 --> 00:30:34,360
that it's like a framework and and and

00:30:32,530 --> 00:30:36,940
the definitions of those routes are not

00:30:34,360 --> 00:30:40,480
within the same file and but in in some

00:30:36,940 --> 00:30:42,610
other file then we want to be a bit more

00:30:40,480 --> 00:30:44,260
strict on what we accept as a route

00:30:42,610 --> 00:30:46,420
handle right we want to make sure that

00:30:44,260 --> 00:30:51,910
if we got a subroutine it's actually a

00:30:46,420 --> 00:30:57,040
code ref or things like that and now if

00:30:51,910 --> 00:30:58,510
I go and run this from the other port

00:30:57,040 --> 00:31:00,430
that we are currently running you will

00:30:58,510 --> 00:31:05,350
see that we actually got the same thing

00:31:00,430 --> 00:31:10,570
so the whole thing works and to end and

00:31:05,350 --> 00:31:21,490
this was my last code example so

00:31:10,570 --> 00:31:30,310
I had a lot of fun and did it did we

00:31:21,490 --> 00:31:34,150
create a precedence here no that was my

00:31:30,310 --> 00:31:51,210
exam my my talk so if anyone has any

00:31:34,150 --> 00:31:51,210
questions yes absolutely

00:31:55,090 --> 00:32:05,670
so Sawyer's in the room I will say this

00:32:00,880 --> 00:32:11,020
I my preference would be dancer two

00:32:05,670 --> 00:32:14,170
working on Marisa pan I am mostly using

00:32:11,020 --> 00:32:20,080
catalyst because it's already written in

00:32:14,170 --> 00:32:22,570
catalyst but I don't really I'm not

00:32:20,080 --> 00:32:25,300
advocating for the only thing that I

00:32:22,570 --> 00:32:28,690
want to say is that this is a like you

00:32:25,300 --> 00:32:32,130
said this is a toy project I wouldn't

00:32:28,690 --> 00:32:35,470
use it in production absolutely not

00:32:32,130 --> 00:32:38,380
pick a pick an established framework if

00:32:35,470 --> 00:32:42,700
you're using use catalyst use dancer use

00:32:38,380 --> 00:32:47,470
mojo they're all very mature well tested

00:32:42,700 --> 00:32:50,710
robust and and secured projects I know

00:32:47,470 --> 00:32:52,720
they're heavy the the reason I got to

00:32:50,710 --> 00:32:55,240
this in the first place was because I

00:32:52,720 --> 00:32:57,010
needed to remove dancer from from being

00:32:55,240 --> 00:33:01,930
a dependency for a project because it

00:32:57,010 --> 00:33:04,210
was ridiculously heavy for something

00:33:01,930 --> 00:33:06,160
that didn't really need all the features

00:33:04,210 --> 00:33:08,250
that that dancer provides it wasn't

00:33:06,160 --> 00:33:11,140
using any of the engines like logging

00:33:08,250 --> 00:33:15,400
templating it was just doing route basic

00:33:11,140 --> 00:33:18,070
routes handling so so I didn't need it

00:33:15,400 --> 00:33:21,030
and so I wrote this simple application

00:33:18,070 --> 00:33:23,220
but then as I said before I had this

00:33:21,030 --> 00:33:25,560
talk about it and

00:33:23,220 --> 00:33:29,190
and I just kept playing with it until it

00:33:25,560 --> 00:33:30,800
became something that's working any

00:33:29,190 --> 00:33:33,180
other questions

00:33:30,800 --> 00:33:36,380
all right so I thank you very much for

00:33:33,180 --> 00:33:40,119
your time thanks for listening

00:33:36,380 --> 00:33:40,119

YouTube URL: https://www.youtube.com/watch?v=-hIzHDQx8_U


