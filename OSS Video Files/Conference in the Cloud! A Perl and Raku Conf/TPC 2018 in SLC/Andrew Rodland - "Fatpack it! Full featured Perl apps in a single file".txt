Title: Andrew Rodland - "Fatpack it! Full featured Perl apps in a single file"
Publication date: 2018-06-20
Playlist: TPC 2018 in SLC
Description: 
	Perl is available on nearly every Unix system, old and new. Learn how to use App::FatPacker, Moo, and CLI::Osprey to write apps that are much more powerful than “just a script”, but still pack down to a single file that runs on any machine with a Perl interpreter, with no need to install dependencies from CPAN.
Captions: 
	00:00:00,110 --> 00:00:05,819
afternoon everyone by the way forgive me

00:00:04,380 --> 00:00:07,620
if I'm a little bit hoarse I'm on the

00:00:05,819 --> 00:00:08,400
tail end of a cold I'm gonna try to do

00:00:07,620 --> 00:00:12,750
my best here

00:00:08,400 --> 00:00:15,630
I'm Andrew Robb 'land aka Hobbs on IRC

00:00:12,750 --> 00:00:18,210
this is fat packet full-featured

00:00:15,630 --> 00:00:21,689
prolapse in a single file and we're

00:00:18,210 --> 00:00:23,550
gonna see what that means oh and the URL

00:00:21,689 --> 00:00:24,840
is here on the bottom of the title site

00:00:23,550 --> 00:00:28,730
if you want to refer to this in the

00:00:24,840 --> 00:00:31,199
future it should also get put up on the

00:00:28,730 --> 00:00:36,690
conference website under links to slides

00:00:31,199 --> 00:00:38,129
if you want to find it there so ok full

00:00:36,690 --> 00:00:39,629
featured Perl apps in the single file

00:00:38,129 --> 00:00:43,079
why do we want to do that what's our

00:00:39,629 --> 00:00:45,210
goal here one of the things is simply

00:00:43,079 --> 00:00:47,010
you can run on a lot of machines with

00:00:45,210 --> 00:00:48,840
minimal effort if you don't have to

00:00:47,010 --> 00:00:51,390
worry about dependency installation I

00:00:48,840 --> 00:00:54,960
think we've seen a bunch of this you

00:00:51,390 --> 00:00:56,699
know go for example it's it's one of the

00:00:54,960 --> 00:00:59,940
reasons it's popular is you deploy a

00:00:56,699 --> 00:01:01,469
single file to the host and you don't

00:00:59,940 --> 00:01:03,180
have to worry about dependencies or

00:01:01,469 --> 00:01:06,360
runtime libraries or anything like that

00:01:03,180 --> 00:01:08,220
it's just gonna work and there's a lot

00:01:06,360 --> 00:01:10,650
of UNIX machines out there in the world

00:01:08,220 --> 00:01:12,689
that have Perl out of the box you just

00:01:10,650 --> 00:01:15,600
ship this single file and it's going to

00:01:12,689 --> 00:01:18,810
run honestly we can even we can even

00:01:15,600 --> 00:01:21,390
one-up go on that because this doesn't

00:01:18,810 --> 00:01:22,860
have to be architecture dependent ok

00:01:21,390 --> 00:01:24,479
fine you know maybe we're not running on

00:01:22,860 --> 00:01:26,250
a whole a whole million different

00:01:24,479 --> 00:01:29,310
architectures but still you have people

00:01:26,250 --> 00:01:33,270
out there with you know Linux machines

00:01:29,310 --> 00:01:34,920
and and Macs and some machines or Intel

00:01:33,270 --> 00:01:37,680
and some machines are armed and all of

00:01:34,920 --> 00:01:41,970
that one Perl program will run on all of

00:01:37,680 --> 00:01:44,640
those it also means that people who

00:01:41,970 --> 00:01:47,250
don't necessarily you know aren't really

00:01:44,640 --> 00:01:48,780
into this whole Perl thing can run and

00:01:47,250 --> 00:01:52,350
contribute to the things that we write

00:01:48,780 --> 00:01:54,180
maybe you have you know maybe you are

00:01:52,350 --> 00:01:56,070
just uploading a tool to the internet

00:01:54,180 --> 00:01:57,560
your writing you know the the next big

00:01:56,070 --> 00:02:00,149
thing that everybody is going to use

00:01:57,560 --> 00:02:02,610
some awesome little command-line thing

00:02:00,149 --> 00:02:05,009
and you want people to be able to run it

00:02:02,610 --> 00:02:07,229
easily you want to have contributions to

00:02:05,009 --> 00:02:08,940
it and you don't want to tell people ok

00:02:07,229 --> 00:02:10,530
you know this is how you deal with Sipan

00:02:08,940 --> 00:02:13,780
and Perl toolchain and all of that stuff

00:02:10,530 --> 00:02:17,380
maybe you work at a place

00:02:13,780 --> 00:02:19,840
is not necessarily you know a pearl shop

00:02:17,380 --> 00:02:21,670
maybe they don't like pearl you want to

00:02:19,840 --> 00:02:23,380
be able to write a tool for everybody to

00:02:21,670 --> 00:02:27,190
use because you're you know you're of

00:02:23,380 --> 00:02:29,230
that persuasion but you can't go all

00:02:27,190 --> 00:02:31,120
right you know where let's let's build

00:02:29,230 --> 00:02:33,970
out this tool chain and we're going to

00:02:31,120 --> 00:02:35,470
have we're gonna have build workers and

00:02:33,970 --> 00:02:37,360
we're gonna have cart in and we're gonna

00:02:35,470 --> 00:02:39,790
set up our dark pan and everything's

00:02:37,360 --> 00:02:41,709
gonna be great now you just you know you

00:02:39,790 --> 00:02:43,989
just have to be able to hand something

00:02:41,709 --> 00:02:45,880
off and say alright this is the thing

00:02:43,989 --> 00:02:48,070
this is how it's going to run I'm not

00:02:45,880 --> 00:02:50,260
necessarily saying you know sneak pearl

00:02:48,070 --> 00:03:01,180
Leah Network but I don't know maybe I'm

00:02:50,260 --> 00:03:03,340
saying that yes not necessarily it's

00:03:01,180 --> 00:03:05,680
easy enough to target a reasonable range

00:03:03,340 --> 00:03:09,280
of pearl versions I'll touch on that a

00:03:05,680 --> 00:03:12,180
little bit going on but so overall I

00:03:09,280 --> 00:03:15,459
would summarize this as making pearl a

00:03:12,180 --> 00:03:19,840
seamless thing for for consumers of your

00:03:15,459 --> 00:03:21,579
software so let's let's look at how

00:03:19,840 --> 00:03:23,530
things work back in the olden days you

00:03:21,579 --> 00:03:26,470
find it you find a pearl program on the

00:03:23,530 --> 00:03:29,860
internet and you want to run it so you

00:03:26,470 --> 00:03:34,540
download it open up with pearl you get

00:03:29,860 --> 00:03:35,980
one of these right so you look at you

00:03:34,540 --> 00:03:39,459
look at some instructions you open the

00:03:35,980 --> 00:03:41,920
Sipan shell and it asks you 300

00:03:39,459 --> 00:03:43,870
configuration questions and then you

00:03:41,920 --> 00:03:45,910
find out well I'm not you know I'm not

00:03:43,870 --> 00:03:47,769
rude on this machine I need to install

00:03:45,910 --> 00:03:50,019
stuff okay so you look things up you

00:03:47,769 --> 00:03:51,790
google for it you find out okay this is

00:03:50,019 --> 00:03:54,370
how you this is how you install things

00:03:51,790 --> 00:03:57,519
as as a non root user

00:03:54,370 --> 00:03:59,620
you run Sipan you ask it for this module

00:03:57,519 --> 00:04:02,140
that it said couldn't be found you wait

00:03:59,620 --> 00:04:04,480
a while eventually everything installs

00:04:02,140 --> 00:04:05,620
you run the script again you get another

00:04:04,480 --> 00:04:07,989
error because there's some more

00:04:05,620 --> 00:04:10,420
dependencies missing you repeat and

00:04:07,989 --> 00:04:12,250
that's how it was when I started working

00:04:10,420 --> 00:04:14,950
with pearl this was this was what

00:04:12,250 --> 00:04:18,549
everybody went through back around the

00:04:14,950 --> 00:04:19,810
year 2000 and so the result is if you

00:04:18,549 --> 00:04:22,300
want to write something for broad

00:04:19,810 --> 00:04:24,460
dissemination you write code with no

00:04:22,300 --> 00:04:26,010
dependencies outside of the pearl core

00:04:24,460 --> 00:04:28,410
people say I can

00:04:26,010 --> 00:04:31,560
use modules and that makes me sad

00:04:28,410 --> 00:04:33,870
because that's giving up 99% of the

00:04:31,560 --> 00:04:38,340
power of pearl it's making problem not

00:04:33,870 --> 00:04:40,410
look so good so what have we what have

00:04:38,340 --> 00:04:41,090
we done in the intervening time to help

00:04:40,410 --> 00:04:45,330
with that

00:04:41,090 --> 00:04:48,870
well local Lib is a great thing it makes

00:04:45,330 --> 00:04:51,360
it much easier to install stuff as and

00:04:48,870 --> 00:04:54,330
use it as a non root user

00:04:51,360 --> 00:04:57,650
it sets up your environment for you one

00:04:54,330 --> 00:05:00,000
line everything's pretty easy it's um

00:04:57,650 --> 00:05:03,690
integrated into tools like Pearl brew

00:05:00,000 --> 00:05:06,660
and sea pan - CP n - itself makes the

00:05:03,690 --> 00:05:08,910
process of going from nothing to having

00:05:06,660 --> 00:05:11,070
a working pearl installation with

00:05:08,910 --> 00:05:14,370
modules much much faster than it ever

00:05:11,070 --> 00:05:18,090
was in the past and we came up with this

00:05:14,370 --> 00:05:20,610
concept of structuring our apps as Perl

00:05:18,090 --> 00:05:23,580
module distributions if you write your

00:05:20,610 --> 00:05:25,290
app as a module and you put it into

00:05:23,580 --> 00:05:27,480
distribution and your script is just

00:05:25,290 --> 00:05:30,900
something that you know does use my

00:05:27,480 --> 00:05:33,000
module my module arrow run then you can

00:05:30,900 --> 00:05:35,190
check that out and you can do CPM

00:05:33,000 --> 00:05:37,380
installed apps dot in the checkout and

00:05:35,190 --> 00:05:39,660
it will install your dependencies for

00:05:37,380 --> 00:05:41,520
you and this makes this makes the

00:05:39,660 --> 00:05:44,910
instructions to get up and going that

00:05:41,520 --> 00:05:47,460
much easier but we can do better than

00:05:44,910 --> 00:05:49,290
that I think and as a matter of fact we

00:05:47,460 --> 00:05:49,860
have come up with more tools to do

00:05:49,290 --> 00:05:51,000
better than that

00:05:49,860 --> 00:05:53,100
[Music]

00:05:51,000 --> 00:05:55,590
but they're not so widely known and I'm

00:05:53,100 --> 00:06:00,690
going to show you some of them the first

00:05:55,590 --> 00:06:03,420
one is fat pack now CPI - actually is a

00:06:00,690 --> 00:06:07,080
user of fat pack is possibly the first

00:06:03,420 --> 00:06:10,670
user of fat pack out in the wild it's

00:06:07,080 --> 00:06:13,740
been around for I think since 2010 and

00:06:10,670 --> 00:06:15,030
so the idea of fat pack is Perl has

00:06:13,740 --> 00:06:18,360
these things called

00:06:15,030 --> 00:06:19,860
a10 cooks usually the contents of a tink

00:06:18,360 --> 00:06:22,080
are directories where it's going to look

00:06:19,860 --> 00:06:23,970
for modules but that's not the only

00:06:22,080 --> 00:06:25,100
thing that pearl knows how to do you can

00:06:23,970 --> 00:06:27,530
put a

00:06:25,100 --> 00:06:29,570
an object or a code reference into a

00:06:27,530 --> 00:06:31,430
tink and when pearl wants to load a

00:06:29,570 --> 00:06:34,430
module if it gets to that point in the

00:06:31,430 --> 00:06:35,900
ad Inc chain it's going to basically you

00:06:34,430 --> 00:06:38,090
know run that piece of code or run a

00:06:35,900 --> 00:06:42,080
method on that object and say how do you

00:06:38,090 --> 00:06:44,150
load this thing well so why don't we

00:06:42,080 --> 00:06:47,360
take all of our modules and put them in

00:06:44,150 --> 00:06:49,070
a half and say when pearl wants to load

00:06:47,360 --> 00:06:51,050
a module by name we book in that hash

00:06:49,070 --> 00:06:54,020
for the module and if it's there we say

00:06:51,050 --> 00:06:57,170
hi this is my module I'm going to open a

00:06:54,020 --> 00:06:58,820
an openness scalar ref file handle to it

00:06:57,170 --> 00:07:00,680
and pass it to pearl and say this is the

00:06:58,820 --> 00:07:05,420
file handle to my module and that's what

00:07:00,680 --> 00:07:08,180
fat pack does an app fat Packer is the

00:07:05,420 --> 00:07:09,830
tool that will scan your dependencies

00:07:08,180 --> 00:07:12,470
and collect all of your modules that

00:07:09,830 --> 00:07:14,360
your program uses and put it all into

00:07:12,470 --> 00:07:18,650
one file for you so that all you have to

00:07:14,360 --> 00:07:21,290
do is say fat pack my script and it will

00:07:18,650 --> 00:07:23,690
output a new file that is the same

00:07:21,290 --> 00:07:27,410
program but with all of its dependencies

00:07:23,690 --> 00:07:28,970
self-contained there's of course one

00:07:27,410 --> 00:07:31,490
gotcha for that which is it only works

00:07:28,970 --> 00:07:36,560
with pure Perl no access it can you know

00:07:31,490 --> 00:07:38,210
it can't load a a dynamic library

00:07:36,560 --> 00:07:39,800
written in some other language off of

00:07:38,210 --> 00:07:44,360
disk it's only going to do a pure Perl

00:07:39,800 --> 00:07:46,430
thing there's also par par is a

00:07:44,360 --> 00:07:49,220
different way of bundling Perl laps into

00:07:46,430 --> 00:07:50,990
a single file it gets its name from jar

00:07:49,220 --> 00:07:54,140
because it's kind of analogous to the

00:07:50,990 --> 00:07:56,300
jaw the Java jar files it's basically a

00:07:54,140 --> 00:07:58,910
zip file full of Perl stuff uses the

00:07:56,300 --> 00:08:02,020
same adding trick this actually does

00:07:58,910 --> 00:08:06,860
some clever tricks to support excess and

00:08:02,020 --> 00:08:09,410
it can bundle it into a perl executable

00:08:06,860 --> 00:08:11,810
as well that is because if has this

00:08:09,410 --> 00:08:13,340
clever thing where the zip goes at the

00:08:11,810 --> 00:08:15,350
end of the file it doesn't care what's

00:08:13,340 --> 00:08:17,210
at the beginning so if you stick a if

00:08:15,350 --> 00:08:20,080
you stick a Perl interpreter on to the

00:08:17,210 --> 00:08:24,260
front of it you can make this all work

00:08:20,080 --> 00:08:26,300
but it has its quirks I'm not actually

00:08:24,260 --> 00:08:28,910
this talk is not going to be about Perl

00:08:26,300 --> 00:08:33,380
about par it's all going to be about fat

00:08:28,910 --> 00:08:35,240
pack because par it's it's given some

00:08:33,380 --> 00:08:37,760
people trouble in the past it's not

00:08:35,240 --> 00:08:38,599
widely used at this point it's just a

00:08:37,760 --> 00:08:41,889
little it's

00:08:38,599 --> 00:08:46,100
it's a little too fragile for my taste

00:08:41,889 --> 00:08:49,730
another gigantic tool in our tool set is

00:08:46,100 --> 00:08:53,690
mu and what is mu is it's a very very

00:08:49,730 --> 00:08:56,899
useful subset of moose mu has been

00:08:53,690 --> 00:08:59,540
described as slightly less than 60% of

00:08:56,899 --> 00:09:01,430
moose that's or slightly less than

00:08:59,540 --> 00:09:03,920
two-thirds of moose that's you know

00:09:01,430 --> 00:09:06,649
based on the name but it's true it gives

00:09:03,920 --> 00:09:10,790
you all of mu except for the meta stuff

00:09:06,649 --> 00:09:12,380
and it's fast mu can drag down load time

00:09:10,790 --> 00:09:14,569
so P you know you don't necessarily like

00:09:12,380 --> 00:09:17,449
to use it for a command line app when it

00:09:14,569 --> 00:09:19,730
needs to run instantly mu will give you

00:09:17,449 --> 00:09:22,730
basically instant start up time and it

00:09:19,730 --> 00:09:25,610
has no mandatory excess dependencies mu

00:09:22,730 --> 00:09:27,529
can make use of excess if it's there but

00:09:25,610 --> 00:09:31,819
it doesn't require it you can use it in

00:09:27,529 --> 00:09:35,990
an entirely pure Perl environment and it

00:09:31,819 --> 00:09:40,279
works together with moose if something

00:09:35,990 --> 00:09:42,649
uses mu but moose is also used in this

00:09:40,279 --> 00:09:45,470
you know in the same parole process in

00:09:42,649 --> 00:09:47,480
the same program then a auto up to auto

00:09:45,470 --> 00:09:51,110
upgrades it plays with moose all of your

00:09:47,480 --> 00:09:52,730
mu classes suddenly become you know meta

00:09:51,110 --> 00:09:55,069
and respectable through moose and

00:09:52,730 --> 00:09:57,230
everything plays together which means

00:09:55,069 --> 00:10:03,040
that you have your choice and there's a

00:09:57,230 --> 00:10:06,170
decent ecosystem of MU modules out there

00:10:03,040 --> 00:10:08,389
in my opinion if you're a module author

00:10:06,170 --> 00:10:09,889
and you don't need all of the features

00:10:08,389 --> 00:10:12,110
of moose or if you're uncomfortable

00:10:09,889 --> 00:10:13,250
having moose as a dependency because you

00:10:12,110 --> 00:10:17,480
feel that it's too big too heavy

00:10:13,250 --> 00:10:20,720
whatever use mu because that choice is a

00:10:17,480 --> 00:10:24,019
hundred percent there you can have

00:10:20,720 --> 00:10:27,920
basically you know the power of a nice

00:10:24,019 --> 00:10:30,380
object-oriented system and not bring in

00:10:27,920 --> 00:10:32,449
moose but if your users choose to use

00:10:30,380 --> 00:10:36,949
moose and they want to use your module

00:10:32,449 --> 00:10:40,130
it will Interop seamlessly and so that's

00:10:36,949 --> 00:10:42,800
you know that's what I feel is the Sipan

00:10:40,130 --> 00:10:45,769
authors answer is if you don't need all

00:10:42,800 --> 00:10:47,389
of moose use mu and that way you you

00:10:45,769 --> 00:10:50,470
know let defer that choice to somebody

00:10:47,389 --> 00:10:50,470
else let them have what they

00:10:51,290 --> 00:10:58,560
so I have a style of writing

00:10:54,660 --> 00:11:02,730
applications that I particularly like

00:10:58,560 --> 00:11:05,670
which is if anybody here is familiar

00:11:02,730 --> 00:11:09,629
with mousex get opt it lets you

00:11:05,670 --> 00:11:12,959
basically declare options for your

00:11:09,629 --> 00:11:15,209
program as mooss attributes and it will

00:11:12,959 --> 00:11:17,819
just introspect that thing and it will

00:11:15,209 --> 00:11:20,699
do your command line parsing for you boo

00:11:17,819 --> 00:11:23,459
X options is that same thing except it

00:11:20,699 --> 00:11:25,019
targets mu instead of moose which means

00:11:23,459 --> 00:11:29,069
that it works perfectly fine for either

00:11:25,019 --> 00:11:31,139
of them and you would think that means

00:11:29,069 --> 00:11:34,019
that it's pure Perl friendly because it

00:11:31,139 --> 00:11:36,180
targets mu but it turns out that that is

00:11:34,019 --> 00:11:40,769
not the case it uses something called

00:11:36,180 --> 00:11:43,800
text line fold to do word wrapping for

00:11:40,769 --> 00:11:46,199
help text and things like that because

00:11:43,800 --> 00:11:48,990
it works nicely with East Asian

00:11:46,199 --> 00:11:51,329
languages which are you can't just line

00:11:48,990 --> 00:11:52,949
wrap them by looking for spaces because

00:11:51,329 --> 00:11:56,699
there's not necessarily spaces between

00:11:52,949 --> 00:12:00,360
words and there is no pure Perl thing to

00:11:56,699 --> 00:12:02,579
do that you basically need ICU so mu X

00:12:00,360 --> 00:12:04,380
options uses text line fold which means

00:12:02,579 --> 00:12:07,170
that it requires access which means that

00:12:04,380 --> 00:12:09,899
it's not usable in my scenario where you

00:12:07,170 --> 00:12:11,339
want to fat pack everything and there's

00:12:09,899 --> 00:12:14,310
few other things about it that I thought

00:12:11,339 --> 00:12:18,290
were not quite ideal so I wrote my own

00:12:14,310 --> 00:12:21,480
and it's called C Allah CLI Osprey

00:12:18,290 --> 00:12:24,420
because basically the module space in mu

00:12:21,480 --> 00:12:25,829
sex and mu X was just overloaded so as

00:12:24,420 --> 00:12:30,870
alright let's come up with an original

00:12:25,829 --> 00:12:33,029
name here and here is an example of you

00:12:30,870 --> 00:12:36,660
know the trivial hello world app written

00:12:33,029 --> 00:12:39,720
with that you say use mu use CLI osprey

00:12:36,660 --> 00:12:42,509
the description flag there goes into

00:12:39,720 --> 00:12:44,339
your documentation text it has lots more

00:12:42,509 --> 00:12:46,800
options that you can set but we're just

00:12:44,339 --> 00:12:49,920
going for all the defaults here and then

00:12:46,800 --> 00:12:51,389
so you're declaring an option and it's

00:12:49,920 --> 00:12:55,199
got all of the things that a moose

00:12:51,389 --> 00:12:57,630
attribute has but it's also so it's got

00:12:55,199 --> 00:13:00,300
you know is read-only and it has a

00:12:57,630 --> 00:13:02,130
default but we're also saying format s

00:13:00,300 --> 00:13:04,440
telling get up this is this thing is a

00:13:02,130 --> 00:13:06,450
string type thing and it has a

00:13:04,440 --> 00:13:11,270
documentation which will see you later

00:13:06,450 --> 00:13:13,230
and then your class has a run method and

00:13:11,270 --> 00:13:16,470
you know it's going to print out the

00:13:13,230 --> 00:13:18,210
value of that option and in main you

00:13:16,470 --> 00:13:19,920
just instantiate your class instead of

00:13:18,210 --> 00:13:21,990
instantiating it with new you

00:13:19,920 --> 00:13:25,620
instantiate it with new with options

00:13:21,990 --> 00:13:28,650
which is which is a method provided by

00:13:25,620 --> 00:13:31,410
the CLI Osprey roll that's going to do

00:13:28,650 --> 00:13:33,210
option parsing for you populate all of

00:13:31,410 --> 00:13:35,010
your attributes and then you take that

00:13:33,210 --> 00:13:37,320
out that object that's been fully

00:13:35,010 --> 00:13:39,150
populated you call run on it and it's

00:13:37,320 --> 00:13:41,220
gonna do a thing what's it gonna do it's

00:13:39,150 --> 00:13:42,890
gonna do this this is you know pretty

00:13:41,220 --> 00:13:46,590
straightforward right if you call it

00:13:42,890 --> 00:13:48,720
with no options then it's going to use

00:13:46,590 --> 00:13:50,940
the default if you call it with an

00:13:48,720 --> 00:13:51,960
option and that gets populated it's you

00:13:50,940 --> 00:13:54,180
know it's pretty much a straightforward

00:13:51,960 --> 00:13:57,630
thing if something is marked as required

00:13:54,180 --> 00:14:00,660
and then it's not provided as an a

00:13:57,630 --> 00:14:03,060
command-line argument then Osprey is

00:14:00,660 --> 00:14:06,840
going to give the user appropriate error

00:14:03,060 --> 00:14:09,600
that says this option is required and so

00:14:06,840 --> 00:14:12,360
now we could run this thing with - cash

00:14:09,600 --> 00:14:15,120
man and it's going to do this and all of

00:14:12,360 --> 00:14:17,880
this is automatically populated from

00:14:15,120 --> 00:14:22,410
what you do and you can customize it

00:14:17,880 --> 00:14:26,300
pretty well so and this is you know it's

00:14:22,410 --> 00:14:28,590
it's 99 90% I would say the same as

00:14:26,300 --> 00:14:31,080
mousex get up so if you're familiar with

00:14:28,590 --> 00:14:33,660
that it's it's the same thing only a

00:14:31,080 --> 00:14:36,690
little bit a little bit more optimized

00:14:33,660 --> 00:14:39,120
for this use case also if you're

00:14:36,690 --> 00:14:42,000
familiar with app CMD is like that and

00:14:39,120 --> 00:14:44,850
what that does is it lets you write even

00:14:42,000 --> 00:14:49,230
bigger CLI type applications that have

00:14:44,850 --> 00:14:51,960
sub commands so that you do you know my

00:14:49,230 --> 00:14:55,920
app this my app that and you can have

00:14:51,960 --> 00:14:59,420
options at the global level and you can

00:14:55,920 --> 00:15:02,760
also have options on each sub command

00:14:59,420 --> 00:15:04,890
and they're instantiated from the top

00:15:02,760 --> 00:15:06,720
down so the main app is instantiated and

00:15:04,890 --> 00:15:08,940
then the sub command is instantiated

00:15:06,720 --> 00:15:12,330
with an instance of the main app being

00:15:08,940 --> 00:15:13,310
passed to it you can go deeper and

00:15:12,330 --> 00:15:14,870
deeper if you like

00:15:13,310 --> 00:15:16,370
you know there's no limit but probably

00:15:14,870 --> 00:15:19,279
you know probably too deep is the

00:15:16,370 --> 00:15:23,450
reasonable limit but this lets you do

00:15:19,279 --> 00:15:26,420
even more extensive things again you can

00:15:23,450 --> 00:15:29,060
check out app CMD you can check out you

00:15:26,420 --> 00:15:31,339
know previous Advent articles on it for

00:15:29,060 --> 00:15:33,230
the broader idea I could give a complete

00:15:31,339 --> 00:15:36,260
talk basically just on this design

00:15:33,230 --> 00:15:37,370
pattern but I only have 20 minutes and

00:15:36,260 --> 00:15:41,240
I've gone through quite a bit of it

00:15:37,370 --> 00:15:46,190
already but the thing about this is that

00:15:41,240 --> 00:15:48,650
it is a it's a properly moosie way to do

00:15:46,190 --> 00:15:50,720
things you can validate your arguments

00:15:48,650 --> 00:15:52,820
with type constraints you can use

00:15:50,720 --> 00:15:56,720
builders to instantiate things for you

00:15:52,820 --> 00:15:59,920
you can use you can use method modifiers

00:15:56,720 --> 00:16:02,330
before/after around etc on your options

00:15:59,920 --> 00:16:03,890
everything is pretty much the way it

00:16:02,330 --> 00:16:06,770
should be it lets you do some really

00:16:03,890 --> 00:16:08,420
powerful stuff with concise code without

00:16:06,770 --> 00:16:13,160
having to think too hard about what

00:16:08,420 --> 00:16:15,770
you're doing so alright we've got all

00:16:13,160 --> 00:16:17,690
this stuff to get our app into a single

00:16:15,770 --> 00:16:21,320
file and do something pretty substantial

00:16:17,690 --> 00:16:24,589
with it how do we make the process of

00:16:21,320 --> 00:16:27,400
getting that single file together easier

00:16:24,589 --> 00:16:29,630
the first tool for that is Sipan file

00:16:27,400 --> 00:16:31,490
Sipan file is a spec that's been around

00:16:29,630 --> 00:16:34,010
for a little while it's like make file

00:16:31,490 --> 00:16:38,540
that PL except it's specific to

00:16:34,010 --> 00:16:40,940
applications not modules it declares

00:16:38,540 --> 00:16:43,610
your dependencies for you it doesn't

00:16:40,940 --> 00:16:45,890
care about you know how to build a thing

00:16:43,610 --> 00:16:49,180
how to install it it's just about

00:16:45,890 --> 00:16:52,280
declaring your dependencies in a

00:16:49,180 --> 00:16:56,810
declarative way it lets you specify

00:16:52,280 --> 00:16:59,030
minimum versions it lets you specify run

00:16:56,810 --> 00:17:01,130
time or you know run time phase develop

00:16:59,030 --> 00:17:05,660
phase testing phase test dependencies

00:17:01,130 --> 00:17:10,089
etc CPI - and CPM already support it

00:17:05,660 --> 00:17:13,970
have done for for a good amount of time

00:17:10,089 --> 00:17:16,720
speaking of CPM CPM is an awesome Sipan

00:17:13,970 --> 00:17:20,510
client it's not well known at this point

00:17:16,720 --> 00:17:24,199
it does parallel installation a lot like

00:17:20,510 --> 00:17:26,750
NPM does it supports the new static

00:17:24,199 --> 00:17:29,180
install standard

00:17:26,750 --> 00:17:31,280
so four modules that do that don't do

00:17:29,180 --> 00:17:32,870
very much in you know basically they

00:17:31,280 --> 00:17:34,610
just contains some PM files and they

00:17:32,870 --> 00:17:36,680
want to be copied to the file system and

00:17:34,610 --> 00:17:38,480
that's about it you don't need to

00:17:36,680 --> 00:17:40,700
execute a lot of stuff and take a lot of

00:17:38,480 --> 00:17:42,980
time to be able to install it that's

00:17:40,700 --> 00:17:45,500
what static install is CPM will honor

00:17:42,980 --> 00:17:51,740
that and do basically no work other than

00:17:45,500 --> 00:17:57,980
untiring a module to install it excuse

00:17:51,740 --> 00:18:00,500
me um and it is fast and CPM has a

00:17:57,980 --> 00:18:03,890
really useful thing of being always fat

00:18:00,500 --> 00:18:06,470
packed into its own git repo which means

00:18:03,890 --> 00:18:10,340
that you can use it as a sub module and

00:18:06,470 --> 00:18:13,670
just say check out CPM great I have it

00:18:10,340 --> 00:18:15,670
it's there and then you can just you

00:18:13,670 --> 00:18:18,920
know basically have this be your

00:18:15,670 --> 00:18:21,770
installation script is purl CPM slash

00:18:18,920 --> 00:18:24,530
CPM install give it an L local to say I

00:18:21,770 --> 00:18:26,000
want to install under my own tree all of

00:18:24,530 --> 00:18:28,340
your dependencies will be there it will

00:18:26,000 --> 00:18:33,170
read your Sipan file your bootstrap your

00:18:28,340 --> 00:18:34,700
great this is really really awesome I'm

00:18:33,170 --> 00:18:37,700
gonna try to show you how awesome this

00:18:34,700 --> 00:18:40,430
is it depends on how good the internet

00:18:37,700 --> 00:18:43,070
connection is here but uh we're gonna

00:18:40,430 --> 00:18:45,340
install catalyst install catalyst

00:18:43,070 --> 00:18:49,720
runtime that thing's pretty phat right

00:18:45,340 --> 00:18:49,720
see internet internet internet

00:19:18,710 --> 00:19:24,590
okay that was it we installed catalyst

00:19:22,210 --> 00:19:26,300
so that's just you know that's a side

00:19:24,590 --> 00:19:28,580
note that's just a demonstration but

00:19:26,300 --> 00:19:31,010
seriously if you want to make you know

00:19:28,580 --> 00:19:33,710
installing dependencies no hassle give a

00:19:31,010 --> 00:19:35,960
look at CPM it uses what's basically the

00:19:33,710 --> 00:19:37,880
next generation version of the Sipan -

00:19:35,960 --> 00:19:42,710
core it supports everything

00:19:37,880 --> 00:19:45,050
it's fast it's cool all right

00:19:42,710 --> 00:19:53,990
why does my go to next slide not want to

00:19:45,050 --> 00:19:55,840
work there we go some last few notes so

00:19:53,990 --> 00:19:57,920
you want your thing to be pure Perl

00:19:55,840 --> 00:20:00,740
because you can't ship any of your

00:19:57,920 --> 00:20:02,450
excess dependencies which means that

00:20:00,740 --> 00:20:03,950
when you're actually building it you

00:20:02,450 --> 00:20:05,810
want to make sure that everything is

00:20:03,950 --> 00:20:09,830
pure Perl so that the pure Perl versions

00:20:05,810 --> 00:20:11,710
of the dependencies get recognized the

00:20:09,830 --> 00:20:14,630
first list the first thing on that list

00:20:11,710 --> 00:20:17,510
should do it for everything but you know

00:20:14,630 --> 00:20:19,730
the world's not that perfect so this is

00:20:17,510 --> 00:20:21,890
a you know about a half-dozen things

00:20:19,730 --> 00:20:26,030
that I came up with to encourage things

00:20:21,890 --> 00:20:28,630
to be as pure Perl as possible um you

00:20:26,030 --> 00:20:30,230
can find this at something that I will

00:20:28,630 --> 00:20:34,790
link to later

00:20:30,230 --> 00:20:37,930
so photos may not be necessary but this

00:20:34,790 --> 00:20:40,940
will this will make your life easier so

00:20:37,930 --> 00:20:45,140
altogether this is what I use to

00:20:40,940 --> 00:20:47,480
actually build an application I have CPM

00:20:45,140 --> 00:20:49,490
set as a get sub module Sidhu sub module

00:20:47,480 --> 00:20:52,250
update in it to make sure CPM is there

00:20:49,490 --> 00:20:55,730
install all of my dependencies into a

00:20:52,250 --> 00:20:58,250
local into a local directory - el means

00:20:55,730 --> 00:21:01,250
ignore any other non core modules that

00:20:58,250 --> 00:21:04,120
you find in the Perl install target Perl

00:21:01,250 --> 00:21:07,160
514 that's what I've chosen to target

00:21:04,120 --> 00:21:09,290
CPM is really clever in how it resolves

00:21:07,160 --> 00:21:11,390
direct dependencies and how it works

00:21:09,290 --> 00:21:14,600
with core modules if you give it a

00:21:11,390 --> 00:21:17,210
target Perl it knows all of the modules

00:21:14,600 --> 00:21:20,120
that have both entered and left core

00:21:17,210 --> 00:21:23,210
between that version and the present and

00:21:20,120 --> 00:21:25,880
it will pack in any module that was non

00:21:23,210 --> 00:21:28,490
core anywhere in between so if you give

00:21:25,880 --> 00:21:29,910
it a target Perl it will run on any

00:21:28,490 --> 00:21:33,450
pearl from that version

00:21:29,910 --> 00:21:35,580
to present pretty much guaranteed tell

00:21:33,450 --> 00:21:37,320
it not to worry about test dependencies

00:21:35,580 --> 00:21:38,910
but please do install my devel

00:21:37,320 --> 00:21:44,040
dependencies because that's where I've

00:21:38,910 --> 00:21:46,230
declared that I want fat pack set up my

00:21:44,040 --> 00:21:49,290
environments to find the local modules

00:21:46,230 --> 00:21:51,300
and find fat pack in the local bin do a

00:21:49,290 --> 00:21:53,070
compile check on my app because if it

00:21:51,300 --> 00:21:55,980
doesn't actually build right now then

00:21:53,070 --> 00:21:58,770
there's no point going any further set

00:21:55,980 --> 00:22:02,250
up an exit hook to clean up behind fat

00:21:58,770 --> 00:22:05,430
pack after you know after success or

00:22:02,250 --> 00:22:09,210
after failure in either case and then

00:22:05,430 --> 00:22:12,480
basically the rest of this is is just

00:22:09,210 --> 00:22:13,890
rigmarole a fat pack has a bunch of

00:22:12,480 --> 00:22:16,200
commands to it and there's not one

00:22:13,890 --> 00:22:18,390
single command to automate it all but

00:22:16,200 --> 00:22:21,240
basically check the dependencies gather

00:22:18,390 --> 00:22:24,480
everything together copy it all into a

00:22:21,240 --> 00:22:27,360
directory run purl strip on it so that

00:22:24,480 --> 00:22:30,390
your output is smaller generate your

00:22:27,360 --> 00:22:32,340
output make it executable you're done

00:22:30,390 --> 00:22:35,310
you can check that out in to get or

00:22:32,340 --> 00:22:37,320
excuse me check that in to get and then

00:22:35,310 --> 00:22:40,980
anybody who checks your thing out will

00:22:37,320 --> 00:22:43,380
have one binary that you can run and it

00:22:40,980 --> 00:22:46,880
will do whatever you like to do as long

00:22:43,380 --> 00:22:52,200
as your dependencies are all pure perl

00:22:46,880 --> 00:22:55,050
this is a worked example that i have it

00:22:52,200 --> 00:22:58,410
is a program that I wrote to drive a

00:22:55,050 --> 00:23:01,710
particular brand of antenna analyzer to

00:22:58,410 --> 00:23:04,500
make pretty graphs of SWR curbs for

00:23:01,710 --> 00:23:06,780
antennas just follow that link if you

00:23:04,500 --> 00:23:08,790
feel like it it has everything that I

00:23:06,780 --> 00:23:11,340
just discussed in there it's an osprey

00:23:08,790 --> 00:23:13,680
app it uses the fat pack thing it uses

00:23:11,340 --> 00:23:15,330
CPM as a sub module it has a fully

00:23:13,680 --> 00:23:16,980
working build script and you can check

00:23:15,330 --> 00:23:18,600
it out at any time and you can just run

00:23:16,980 --> 00:23:24,120
it or you can go through the build

00:23:18,600 --> 00:23:26,520
process so this is the point where I

00:23:24,120 --> 00:23:27,960
sort of address the stuff that I haven't

00:23:26,520 --> 00:23:30,960
addressed the first one of those that's

00:23:27,960 --> 00:23:32,760
up in the air is Windows I said great

00:23:30,960 --> 00:23:34,680
you've got all of these UNIX machines

00:23:32,760 --> 00:23:36,330
out there in the world and you can run

00:23:34,680 --> 00:23:37,590
on any of them without anything but what

00:23:36,330 --> 00:23:40,220
about all the Windows machines that

00:23:37,590 --> 00:23:43,140
don't have perl well

00:23:40,220 --> 00:23:46,410
Windows users are accustomed to

00:23:43,140 --> 00:23:48,420
installers so one way to address this is

00:23:46,410 --> 00:23:51,540
just if you want to distribute

00:23:48,420 --> 00:23:53,910
distribute your app as an MSI installer

00:23:51,540 --> 00:23:56,130
with an install script that says well

00:23:53,910 --> 00:23:58,290
install strawberry pearl first and then

00:23:56,130 --> 00:24:00,930
install this thing you can still use all

00:23:58,290 --> 00:24:03,750
of these tricks and it just makes things

00:24:00,930 --> 00:24:07,440
you know one more step you could also

00:24:03,750 --> 00:24:09,720
try using par to produce an exe from

00:24:07,440 --> 00:24:13,020
your fat packed script I've said that

00:24:09,720 --> 00:24:14,730
fact that par has some fragility issues

00:24:13,020 --> 00:24:17,760
that make me not really want to use it

00:24:14,730 --> 00:24:20,190
but using it specifically to produce a

00:24:17,760 --> 00:24:22,380
bundled executable for Windows I think

00:24:20,190 --> 00:24:25,170
if you feed it a fat pack and if there's

00:24:22,380 --> 00:24:28,020
no excess stuff going on any way that

00:24:25,170 --> 00:24:29,940
it's less likely to break so that's an

00:24:28,020 --> 00:24:32,010
option that you can that you can look

00:24:29,940 --> 00:24:33,840
into the other one is well I said

00:24:32,010 --> 00:24:36,120
full-featured apps but how are you gonna

00:24:33,840 --> 00:24:38,850
do it GUI with this right because

00:24:36,120 --> 00:24:41,640
cross-platform GUI is a hard enough

00:24:38,850 --> 00:24:46,890
problem cross-platform GUI without

00:24:41,640 --> 00:24:49,140
excess like what even is that and I've

00:24:46,890 --> 00:24:51,510
had one idea it's not the best idea but

00:24:49,140 --> 00:24:54,630
it's an idea which is you can do a web

00:24:51,510 --> 00:24:56,720
app serving to localhost there's lots of

00:24:54,630 --> 00:24:59,130
pure perl web frameworks or well there's

00:24:56,720 --> 00:25:02,220
lots of perl web frameworks a bunch of

00:24:59,130 --> 00:25:04,860
them will work pure perl and HTTP

00:25:02,220 --> 00:25:06,990
servers that will work pure perl and you

00:25:04,860 --> 00:25:11,130
can do anything you know people people

00:25:06,990 --> 00:25:12,960
go all out with dynamic HTML j/s gooeys

00:25:11,130 --> 00:25:15,120
and make something as pretty as you like

00:25:12,960 --> 00:25:16,980
this way and then your app can just

00:25:15,120 --> 00:25:19,200
basically start its server in the

00:25:16,980 --> 00:25:21,390
background and then use whatever sort of

00:25:19,200 --> 00:25:24,870
OS level thing to try to trigger the

00:25:21,390 --> 00:25:27,510
opening of a web browser and do its

00:25:24,870 --> 00:25:29,580
thing that way it's not beautiful but

00:25:27,510 --> 00:25:34,620
you know it's it's something that you

00:25:29,580 --> 00:25:36,240
could definitely consider and that's

00:25:34,620 --> 00:25:37,920
that's the end of what I got are there

00:25:36,240 --> 00:25:42,440
any questions out there and thank you

00:25:37,920 --> 00:25:42,440
all for paying such attention

00:25:44,580 --> 00:25:48,580

YouTube URL: https://www.youtube.com/watch?v=Pe9pEbUsYSY


