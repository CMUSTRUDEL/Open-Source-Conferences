Title: Stevan Little - "UNIVERSAL::Object â€“ All your base class are belong to us"
Publication date: 2018-06-19
Playlist: TPC 2018 in SLC
Description: 
	In this talk I will discuss UNIVERSAL::Object, a simple base class that provides a construction and destruction protocol for building instances. In this talk we will discuss how to use UNIVERSAL::Object to standardize your classes, as well as; how to customize your constructor API, how to create non-HASH based instances, how to deal with inheritance, and more.
Captions: 
	00:00:00,000 --> 00:00:05,730
hello everybody so my name is Steven

00:00:04,020 --> 00:00:07,250
little and I'm here to give a talk at

00:00:05,730 --> 00:00:10,410
the pro conference here in Salt Lake on

00:00:07,250 --> 00:00:13,110
18f if you don't know what that is you

00:00:10,410 --> 00:00:15,480
can ask me afterwards and this is a talk

00:00:13,110 --> 00:00:17,340
about a module that I wrote actually

00:00:15,480 --> 00:00:19,830
it's been a couple years now called

00:00:17,340 --> 00:00:23,100
universal object so we'll go through

00:00:19,830 --> 00:00:25,710
here so first question is what is

00:00:23,100 --> 00:00:28,260
universal object and it is basically a

00:00:25,710 --> 00:00:30,990
useful base class and pretty much not

00:00:28,260 --> 00:00:32,640
much else it is a hundred and twenty

00:00:30,990 --> 00:00:34,559
five lines of Perl that is including

00:00:32,640 --> 00:00:36,180
comments and spaces and all sorts of

00:00:34,559 --> 00:00:37,710
other stuff so you could actually read

00:00:36,180 --> 00:00:41,940
the entire source probably quicker than

00:00:37,710 --> 00:00:45,320
I will explain it to you and it's Perl

00:00:41,940 --> 00:00:48,420
5.6 compatible nobody cares about that

00:00:45,320 --> 00:00:50,190
but it's kind of neat if you're using

00:00:48,420 --> 00:00:51,539
five six still you may care about it but

00:00:50,190 --> 00:00:56,280
most people aren't using five six so

00:00:51,539 --> 00:00:58,559
they don't so to be a little serious

00:00:56,280 --> 00:01:01,649
what is this so what Universal object

00:00:58,559 --> 00:01:04,860
attempts to provide is a instance

00:01:01,649 --> 00:01:06,600
construction protocol meaning a way in

00:01:04,860 --> 00:01:09,150
which you can construct your instances

00:01:06,600 --> 00:01:11,340
and a number of extension points within

00:01:09,150 --> 00:01:15,060
that and it follows a very strict order

00:01:11,340 --> 00:01:17,790
and well actually show to you so first

00:01:15,060 --> 00:01:18,990
knew obviously so it provides a new that

00:01:17,790 --> 00:01:21,360
was something that something that Perl

00:01:18,990 --> 00:01:23,610
doesn't have share out of the box when I

00:01:21,360 --> 00:01:25,200
wrote most many many years ago that was

00:01:23,610 --> 00:01:28,890
a key thing being able to just say new

00:01:25,200 --> 00:01:30,630
without having to write it yourself new

00:01:28,890 --> 00:01:32,670
will call build args this is also

00:01:30,630 --> 00:01:34,799
something pulled from actually pulled

00:01:32,670 --> 00:01:36,210
from Perl six originally but we had the

00:01:34,799 --> 00:01:40,860
feature in mousse and then we're adding

00:01:36,210 --> 00:01:42,630
here there's a bless method it's this is

00:01:40,860 --> 00:01:44,130
also stolen from Perl 6 it doesn't have

00:01:42,630 --> 00:01:47,460
too much usefulness but it serves as

00:01:44,130 --> 00:01:48,720
sort of an indirection point then

00:01:47,460 --> 00:01:50,790
there's create this is the part that

00:01:48,720 --> 00:01:53,670
creates your instance that itself called

00:01:50,790 --> 00:01:55,860
slots and calls wrapper then there's

00:01:53,670 --> 00:01:56,610
build all and build which is something

00:01:55,860 --> 00:01:58,350
from mousse

00:01:56,610 --> 00:01:59,520
don't worry if this doesn't make sense

00:01:58,350 --> 00:02:02,399
yet that's what the rest of the talk is

00:01:59,520 --> 00:02:04,680
about to explain those things in

00:02:02,399 --> 00:02:06,360
addition we have an instance destruction

00:02:04,680 --> 00:02:08,340
protocol so a controlled way of

00:02:06,360 --> 00:02:10,319
destroying your object and that's very

00:02:08,340 --> 00:02:12,960
simple we use the built in destroy hook

00:02:10,319 --> 00:02:14,700
but that calls a demolish all which

00:02:12,960 --> 00:02:16,800
calls demolished this is something again

00:02:14,700 --> 00:02:18,960
stolen from Perl 6 originally reported

00:02:16,800 --> 00:02:22,980
into moose it doesn't really work any

00:02:18,960 --> 00:02:26,220
differently in this so next question of

00:02:22,980 --> 00:02:28,620
course is why why would I do this

00:02:26,220 --> 00:02:32,850
moose seems to work just fine why why go

00:02:28,620 --> 00:02:35,220
mess mostly so this actually started I

00:02:32,850 --> 00:02:38,970
was I got involved in a project in about

00:02:35,220 --> 00:02:42,960
2011 in an attempt to build a new object

00:02:38,970 --> 00:02:46,170
system for corporal it's not done yet

00:02:42,960 --> 00:02:47,990
I'm still working on this it has been an

00:02:46,170 --> 00:02:50,330
extremely long learning experience

00:02:47,990 --> 00:02:53,220
humbling in a lot of ways and

00:02:50,330 --> 00:02:55,170
frustrating a lot of ways but this this

00:02:53,220 --> 00:02:58,890
is a part that I basically felt was too

00:02:55,170 --> 00:03:00,210
useful to leave in that project as it's

00:02:58,890 --> 00:03:01,530
still sort of flounders and I'm trying

00:03:00,210 --> 00:03:03,300
to figure out what to do with it so I

00:03:01,530 --> 00:03:07,490
decided it makes more sense to just cut

00:03:03,300 --> 00:03:09,990
it out and release it on to Sipan and

00:03:07,490 --> 00:03:14,640
honestly I kind of got sick of writing

00:03:09,990 --> 00:03:16,530
moose and mu and mode style classes you

00:03:14,640 --> 00:03:18,180
know maybe I wrote the thing so maybe I

00:03:16,530 --> 00:03:27,260
got sick of it at some point because of

00:03:18,180 --> 00:03:27,260
that but crap what happened oh yes oh ok

00:03:30,290 --> 00:03:33,740
now where am I

00:03:34,750 --> 00:03:39,210
mm-hm no that's okay

00:03:45,260 --> 00:03:48,450
okay I can talk through this part

00:03:47,280 --> 00:03:50,010
because it's really not that interesting

00:03:48,450 --> 00:03:51,660
it's just bullet points on the slide so

00:03:50,010 --> 00:03:54,540
I got kind of sick of writing classes in

00:03:51,660 --> 00:03:58,950
mousse and and Moe and Moe or however

00:03:54,540 --> 00:03:59,760
those things would go and and I wanted

00:03:58,950 --> 00:04:02,280
something smaller

00:03:59,760 --> 00:04:05,760
I wanted something lighter with less

00:04:02,280 --> 00:04:08,730
dependencies and and just basically not

00:04:05,760 --> 00:04:09,960
nearly as much crap in it so I'm gonna

00:04:08,730 --> 00:04:15,270
have to advance some slides while he's

00:04:09,960 --> 00:04:17,220
doing that and so the past about five

00:04:15,270 --> 00:04:18,450
years or so I actually have not been

00:04:17,220 --> 00:04:19,769
writing any moves classes or anything

00:04:18,450 --> 00:04:21,680
like that and I've been going back to

00:04:19,769 --> 00:04:25,020
old school vanilla Perl

00:04:21,680 --> 00:04:28,440
object-orientation specifically because

00:04:25,020 --> 00:04:30,780
I wanted to sort of feel the old pain if

00:04:28,440 --> 00:04:35,840
you will and and look for ways that I

00:04:30,780 --> 00:04:35,840
could essentially build Universal object

00:04:36,740 --> 00:04:46,070
because code alright we gotta wait for

00:04:42,990 --> 00:04:46,070
this to come back up cuz I got code

00:04:46,340 --> 00:04:49,580
doing that

00:04:52,160 --> 00:04:56,020
do I need to do a different

00:05:00,470 --> 00:05:04,850
okay I just lost my browser window so

00:05:09,960 --> 00:05:12,830
thank is it

00:05:14,680 --> 00:05:24,560
okay so so uh let me try and get my head

00:05:20,930 --> 00:05:27,620
back in the game here so mousse provided

00:05:24,560 --> 00:05:30,349
a feature called attributes and I think

00:05:27,620 --> 00:05:32,509
in my opinion that was one of the key

00:05:30,349 --> 00:05:33,830
features that mousse provided and

00:05:32,509 --> 00:05:36,319
basically what attributes allowed you to

00:05:33,830 --> 00:05:37,969
do is easily declare what were the slots

00:05:36,319 --> 00:05:39,680
or members or fields or whatever you

00:05:37,969 --> 00:05:40,999
want to call it of your class I'm gonna

00:05:39,680 --> 00:05:43,310
use the word slots after this from now

00:05:40,999 --> 00:05:44,749
on so it allowed you to define that

00:05:43,310 --> 00:05:46,580
that's something that plane pearl

00:05:44,749 --> 00:05:51,199
doesn't do and you basically have to

00:05:46,580 --> 00:05:52,669
build at all yourself and along with it

00:05:51,199 --> 00:05:53,990
it would generate all these other

00:05:52,669 --> 00:05:57,860
accessor methods

00:05:53,990 --> 00:06:02,120
I feel like this ended up creating sort

00:05:57,860 --> 00:06:05,810
of a basically people wrote they big gay

00:06:02,120 --> 00:06:08,150
public access to their slots and kind of

00:06:05,810 --> 00:06:09,949
discourages good encapsulation this was

00:06:08,150 --> 00:06:11,719
a very early criticism of mousse by

00:06:09,949 --> 00:06:13,960
somebody on Perl monks and it's stuck

00:06:11,719 --> 00:06:16,339
with me for like the last twelve years

00:06:13,960 --> 00:06:17,839
and so this was something that I

00:06:16,339 --> 00:06:21,229
specifically wanted to do when I

00:06:17,839 --> 00:06:22,370
approached this because vanilla oo pearl

00:06:21,229 --> 00:06:24,740
doesn't know anything about your slots

00:06:22,370 --> 00:06:26,150
and it doesn't care

00:06:24,740 --> 00:06:29,899
and that actually tends to lead to

00:06:26,150 --> 00:06:32,870
better encapsulation but it does require

00:06:29,899 --> 00:06:34,399
a lot more work and so Universal object

00:06:32,870 --> 00:06:37,069
is the attempt to try and meet in the

00:06:34,399 --> 00:06:40,580
middle here so now we're gonna do some

00:06:37,069 --> 00:06:43,339
code so I said I'd go through all those

00:06:40,580 --> 00:06:44,719
those points so new takes obviously the

00:06:43,339 --> 00:06:46,339
class is the first argument and then

00:06:44,719 --> 00:06:49,089
whatever you pass into it and it's gonna

00:06:46,339 --> 00:06:54,800
return your blessed instance obviously

00:06:49,089 --> 00:06:57,409
so with those colors not so great so you

00:06:54,800 --> 00:07:00,560
can see here this is as minimal as

00:06:57,409 --> 00:07:02,719
possible so you need to set your own is

00:07:00,560 --> 00:07:04,969
a variable and essentially what I've

00:07:02,719 --> 00:07:07,879
introduced in universal object is the

00:07:04,969 --> 00:07:11,960
idea of a has hash a package level hash

00:07:07,879 --> 00:07:13,699
in which you define your slots this to

00:07:11,960 --> 00:07:15,620
me feels like it matches quite nicely

00:07:13,699 --> 00:07:17,779
with the Izza it does seem very

00:07:15,620 --> 00:07:19,310
old-school and clunky yes I understand

00:07:17,779 --> 00:07:22,699
that but understand that this is the

00:07:19,310 --> 00:07:24,680
base level stuff to reference Vicky's

00:07:22,699 --> 00:07:25,889
earlier talk these are like base

00:07:24,680 --> 00:07:27,599
producers in the

00:07:25,889 --> 00:07:28,949
ecosystem like you you probably don't

00:07:27,599 --> 00:07:31,580
use this directly you probably use

00:07:28,949 --> 00:07:34,469
somebody's built system on top of this

00:07:31,580 --> 00:07:37,110
so has is a way to specify your slots in

00:07:34,469 --> 00:07:39,060
a very very very simple simple way so I

00:07:37,110 --> 00:07:40,199
think does everybody everybody looking

00:07:39,060 --> 00:07:41,340
this does it make sense is there

00:07:40,199 --> 00:07:43,439
anything that maybe looks a little

00:07:41,340 --> 00:07:44,849
confusing everybody it should be I hope

00:07:43,439 --> 00:07:47,669
it's very very simple

00:07:44,849 --> 00:07:49,409
each of the keys to the hash is the name

00:07:47,669 --> 00:07:51,060
of your slot so will become a hash key

00:07:49,409 --> 00:07:52,710
in your instance and then the

00:07:51,060 --> 00:07:56,580
subroutines after that are essentially

00:07:52,710 --> 00:07:58,680
the initializers so you if you want with

00:07:56,580 --> 00:08:02,009
age it starts at 0 so that'll be the

00:07:58,680 --> 00:08:03,870
default value name we don't have a

00:08:02,009 --> 00:08:05,789
default value for that so we actually

00:08:03,870 --> 00:08:07,889
called I in there so when we attempt to

00:08:05,789 --> 00:08:10,169
correct to get the default value it will

00:08:07,889 --> 00:08:11,550
just explode and so that that's about

00:08:10,169 --> 00:08:13,800
how we can essentially implement

00:08:11,550 --> 00:08:14,520
required methods in here and then of

00:08:13,800 --> 00:08:16,319
course you have to write your own

00:08:14,520 --> 00:08:20,400
accessories that doesn't come with this

00:08:16,319 --> 00:08:22,889
package and that's it it's just how they

00:08:20,400 --> 00:08:25,589
work and it's a key value pair that's

00:08:22,889 --> 00:08:30,719
the base how the base new constructor

00:08:25,589 --> 00:08:33,990
works very similar moves if you want to

00:08:30,719 --> 00:08:35,640
inherit stuff we're adding to is ax here

00:08:33,990 --> 00:08:37,979
with person previous class that we had

00:08:35,640 --> 00:08:40,860
and then you'll notice and it has where

00:08:37,979 --> 00:08:43,919
we're basically bringing in the values

00:08:40,860 --> 00:08:45,899
from our superclass the reason is is

00:08:43,919 --> 00:08:47,640
that universal object knows nothing

00:08:45,899 --> 00:08:48,390
about your inheritance or doesn't cares

00:08:47,640 --> 00:08:50,490
nothing about your inheritance

00:08:48,390 --> 00:08:51,690
relationship is not gonna resolve all

00:08:50,490 --> 00:08:54,000
this stuff for you you have to resolve

00:08:51,690 --> 00:08:55,860
it for it it will create an object based

00:08:54,000 --> 00:08:58,500
on all the keys that might be inside

00:08:55,860 --> 00:09:00,779
your has hash and how they got there it

00:08:58,500 --> 00:09:02,430
doesn't care one of the very interesting

00:09:00,779 --> 00:09:04,470
things about this is you can actually

00:09:02,430 --> 00:09:06,329
introspect even though we've copied all

00:09:04,470 --> 00:09:08,820
that hash into there you can still

00:09:06,329 --> 00:09:11,430
figure out which slots don't belong to

00:09:08,820 --> 00:09:13,490
that class and and this gets into a bit

00:09:11,430 --> 00:09:16,470
of a pearl guts thing but essentially

00:09:13,490 --> 00:09:19,949
pearl in its internals will make a note

00:09:16,470 --> 00:09:21,839
of what stash or what package your

00:09:19,949 --> 00:09:23,640
subroutine was compiled in so all I have

00:09:21,839 --> 00:09:25,079
to do is look at those those subroutines

00:09:23,640 --> 00:09:28,320
and I can see where they were compiled

00:09:25,079 --> 00:09:30,570
in and I know that they're inherited so

00:09:28,320 --> 00:09:32,519
but that's a pain in the ass who wants

00:09:30,570 --> 00:09:34,019
to type all that stuff out and and to be

00:09:32,519 --> 00:09:36,269
to be honest you probably should be

00:09:34,019 --> 00:09:37,829
doing a begin block around the is ax and

00:09:36,269 --> 00:09:39,320
the has and all this stuff like that it

00:09:37,829 --> 00:09:40,610
gets very messy I

00:09:39,320 --> 00:09:43,850
at the beginning I'm gonna try and make

00:09:40,610 --> 00:09:45,020
it not so much work for you so I have

00:09:43,850 --> 00:09:46,610
and it's not actually included with

00:09:45,020 --> 00:09:49,700
universal object it's a separate module

00:09:46,610 --> 00:09:51,080
but I've created a slots pragma that

00:09:49,700 --> 00:09:53,180
does exactly what you think it would do

00:09:51,080 --> 00:09:55,820
which is to to populate that has

00:09:53,180 --> 00:09:56,960
variable and you don't have to handle

00:09:55,820 --> 00:09:58,610
inheritance it will handle the

00:09:56,960 --> 00:10:01,340
inheritance for you it will make sure to

00:09:58,610 --> 00:10:03,500
do everything it begin time and it will

00:10:01,340 --> 00:10:05,870
arm sorry it will do most of its work at

00:10:03,500 --> 00:10:07,670
begin time but it ensures that by the

00:10:05,870 --> 00:10:09,710
time you reach the unit check phase

00:10:07,670 --> 00:10:12,380
which is sort of the last phase before

00:10:09,710 --> 00:10:12,710
runtime all your class will completely

00:10:12,380 --> 00:10:15,490
setup

00:10:12,710 --> 00:10:19,910
that's the slots pregnant but but yeah

00:10:15,490 --> 00:10:21,620
so that's your basic basic stuff like I

00:10:19,910 --> 00:10:24,920
said it's not there's not a lot to this

00:10:21,620 --> 00:10:26,330
it's very very straightforward so but

00:10:24,920 --> 00:10:28,070
where it comes where the power comes is

00:10:26,330 --> 00:10:30,050
the extension points so build arcs is

00:10:28,070 --> 00:10:35,690
your first extension point it works

00:10:30,050 --> 00:10:37,070
exactly like moose does and only

00:10:35,690 --> 00:10:39,140
slightly similar to purl six because we

00:10:37,070 --> 00:10:40,730
can't imitate all the proceeds but

00:10:39,140 --> 00:10:42,770
essentially build args is the first

00:10:40,730 --> 00:10:44,480
thing it gets it gets all your arguments

00:10:42,770 --> 00:10:47,420
that you passed into the constructor and

00:10:44,480 --> 00:10:50,150
it's given a chance to turn that into a

00:10:47,420 --> 00:10:51,680
hash reference and this hash reference

00:10:50,150 --> 00:10:54,680
is essentially just the canonical form

00:10:51,680 --> 00:10:56,360
of what you passed in and it needs it

00:10:54,680 --> 00:10:57,410
needs that as it goes through because it

00:10:56,360 --> 00:10:59,720
needs to be able to match this to the

00:10:57,410 --> 00:11:01,580
slots so if you look at this class here

00:10:59,720 --> 00:11:06,670
we have it's it's a point class with an

00:11:01,580 --> 00:11:06,670
X and a Y and we want to allow basically

00:11:09,260 --> 00:11:14,800
[Music]

00:11:11,380 --> 00:11:17,390
you're not passing in the keys so I

00:11:14,800 --> 00:11:20,270
construct that for it and return it if

00:11:17,390 --> 00:11:21,860
that is not what you passed in then I

00:11:20,270 --> 00:11:22,970
just call the super on that and let it

00:11:21,860 --> 00:11:24,560
do its own thing which will just

00:11:22,970 --> 00:11:27,140
essentially process the args in a normal

00:11:24,560 --> 00:11:29,090
way yes I understand that the scalar

00:11:27,140 --> 00:11:30,710
args equals two is probably not the best

00:11:29,090 --> 00:11:33,470
way to do that because if you passed in

00:11:30,710 --> 00:11:36,230
a single hash key yeah anyway so bugs in

00:11:33,470 --> 00:11:37,670
my own slides but anyway build args is

00:11:36,230 --> 00:11:40,910
the first step so it allows you to

00:11:37,670 --> 00:11:42,950
construe to customize the interface to

00:11:40,910 --> 00:11:44,720
your constructor so if key value pairs

00:11:42,950 --> 00:11:47,050
don't make sense to you you have build

00:11:44,720 --> 00:11:50,030
args to do literally whatever you want

00:11:47,050 --> 00:11:51,440
it's also a good place to do a little

00:11:50,030 --> 00:11:52,260
bit of validation not too much but a

00:11:51,440 --> 00:11:54,390
little bit of valid

00:11:52,260 --> 00:11:56,790
and sometimes even a little bit of

00:11:54,390 --> 00:12:00,120
type-checking because it's before all

00:11:56,790 --> 00:12:03,390
the other work starts to happen the next

00:12:00,120 --> 00:12:05,010
step is bless blesses like I said almost

00:12:03,390 --> 00:12:07,050
completely useless it just serves as an

00:12:05,010 --> 00:12:09,840
interaction point so there's no example

00:12:07,050 --> 00:12:12,150
with that create is the indirection

00:12:09,840 --> 00:12:15,540
point that it sort of enables and create

00:12:12,150 --> 00:12:16,950
is where you're given the result of the

00:12:15,540 --> 00:12:19,200
arguments that were passed into the

00:12:16,950 --> 00:12:21,990
constructor and it will do a bunch of

00:12:19,200 --> 00:12:24,600
things and return an instance it

00:12:21,990 --> 00:12:27,840
actually returns in unblessed instance

00:12:24,600 --> 00:12:31,530
and bless will do the blessing of it but

00:12:27,840 --> 00:12:35,100
details where create comes in very handy

00:12:31,530 --> 00:12:38,040
is that it allows you to very easily use

00:12:35,100 --> 00:12:40,110
different representation types so here's

00:12:38,040 --> 00:12:42,390
a simple example of the point class with

00:12:40,110 --> 00:12:44,220
x and a y and we're gonna store it in an

00:12:42,390 --> 00:12:47,550
array because the Rays are faster and

00:12:44,220 --> 00:12:49,260
smaller and cheaper so essentially what

00:12:47,550 --> 00:12:51,540
this does is it calls the slots method

00:12:49,260 --> 00:12:53,010
which we'll explain in a little bit to

00:12:51,540 --> 00:12:56,190
get back all those definitions of the

00:12:53,010 --> 00:12:57,600
slots and then either it pulls it out of

00:12:56,190 --> 00:12:59,520
the prototype so either pass it through

00:12:57,600 --> 00:13:01,380
the prototype or it's going to call the

00:12:59,520 --> 00:13:03,420
initializer it's a bit of a very dense

00:13:01,380 --> 00:13:06,180
pearl but my slots you know you can't

00:13:03,420 --> 00:13:07,410
fit too much code in slides and actually

00:13:06,180 --> 00:13:09,600
it's the wrong way to do it anyway you'd

00:13:07,410 --> 00:13:10,980
really want to do it like this so I'm

00:13:09,600 --> 00:13:12,300
gonna walk over to screen and sort of

00:13:10,980 --> 00:13:15,120
explain this because my pointer is not

00:13:12,300 --> 00:13:16,980
working so repper is saying it's an

00:13:15,120 --> 00:13:31,200
array ref so that's just being a little

00:13:16,980 --> 00:13:32,730
pedantic it's not really necessary and

00:13:31,200 --> 00:13:34,530
everything works it works well in

00:13:32,730 --> 00:13:37,020
inheritance relationships as well

00:13:34,530 --> 00:13:38,670
because slots will always return all the

00:13:37,020 --> 00:13:39,930
slots that are necessary for that so

00:13:38,670 --> 00:13:41,280
when you sort them you'll always have

00:13:39,930 --> 00:13:42,630
all the keys works in multiple

00:13:41,280 --> 00:13:48,230
inheritance of get cetera et cetera et

00:13:42,630 --> 00:13:51,690
cetera wrapper which we saw before is

00:13:48,230 --> 00:13:54,860
also a possible extension point here it

00:13:51,690 --> 00:13:58,560
just returns basically a bear reference

00:13:54,860 --> 00:14:00,480
but repre comes in very very handy if

00:13:58,560 --> 00:14:02,730
you need to an extend the class that

00:14:00,480 --> 00:14:04,590
doesn't use universal object

00:14:02,730 --> 00:14:08,430
so essentially if you think about this

00:14:04,590 --> 00:14:11,040
for a second the the representation type

00:14:08,430 --> 00:14:13,020
of the class if you own the class you

00:14:11,040 --> 00:14:14,610
can define it however you want if you

00:14:13,020 --> 00:14:16,380
don't own the class in your sub classing

00:14:14,610 --> 00:14:18,660
it you're stuck with whatever they got

00:14:16,380 --> 00:14:20,520
so essentially their instance is your

00:14:18,660 --> 00:14:22,530
representation type and then you just

00:14:20,520 --> 00:14:24,390
sort of do other things to it whether

00:14:22,530 --> 00:14:26,430
they're good or not is entirely

00:14:24,390 --> 00:14:29,010
different story so what this does this

00:14:26,430 --> 00:14:34,590
is just a sax handler anybody use anyway

00:14:29,010 --> 00:14:39,750
XML XML fans of XML here XSLT I love

00:14:34,590 --> 00:14:41,940
XSLT one person cool so this is a simple

00:14:39,750 --> 00:14:43,410
sax handler it inherits from a universal

00:14:41,940 --> 00:14:46,080
object and then inherits from the XML

00:14:43,410 --> 00:14:49,580
sax base and then the wrapper does the

00:14:46,080 --> 00:14:52,230
does the dirty work of creating the the

00:14:49,580 --> 00:14:54,210
initializing the the parent class and

00:14:52,230 --> 00:14:56,130
then universal object will take over and

00:14:54,210 --> 00:14:58,410
make sure that that stack that we're

00:14:56,130 --> 00:15:01,770
storing there and the slot gets put in

00:14:58,410 --> 00:15:05,210
the right place and is then usable so

00:15:01,770 --> 00:15:07,560
it's very easy to extend your your non

00:15:05,210 --> 00:15:09,720
non universal object classes with

00:15:07,560 --> 00:15:12,690
universal object five minutes okay good

00:15:09,720 --> 00:15:15,510
so slots I talked about slots for any of

00:15:12,690 --> 00:15:17,010
you that were disgusted by the hole I'm

00:15:15,510 --> 00:15:19,080
gonna store these things in a package

00:15:17,010 --> 00:15:21,690
variable you don't have to do it if you

00:15:19,080 --> 00:15:24,270
don't want because slots is where we

00:15:21,690 --> 00:15:25,980
call and get that get the the whatever's

00:15:24,270 --> 00:15:27,240
in that package variable you can just

00:15:25,980 --> 00:15:28,470
make it a method and have it return

00:15:27,240 --> 00:15:32,130
whatever you want so here's an example

00:15:28,470 --> 00:15:36,720
of not even using the the built in

00:15:32,130 --> 00:15:38,010
package variable and just doing it by I

00:15:36,720 --> 00:15:40,020
don't know how you call this not by hand

00:15:38,010 --> 00:15:42,360
but anyway defining the slots yourself

00:15:40,020 --> 00:15:44,490
and of course it works quite cleanly for

00:15:42,360 --> 00:15:47,700
inheritance naturally because you just

00:15:44,490 --> 00:15:49,830
call slots in there so this is a silly

00:15:47,700 --> 00:15:51,360
example because it's just hard coded but

00:15:49,830 --> 00:15:52,920
you could be pulling these things out of

00:15:51,360 --> 00:15:55,200
a database pulling these things off of

00:15:52,920 --> 00:15:57,120
disk from a yamo file or or

00:15:55,200 --> 00:15:59,970
whatever and you could be pulling these

00:15:57,120 --> 00:16:01,980
definitions in from outside if you want

00:15:59,970 --> 00:16:06,300
that be maybe a little dangerous but you

00:16:01,980 --> 00:16:08,850
know whatever it's a perl right so yeah

00:16:06,300 --> 00:16:11,190
it's already dangerous exactly

00:16:08,850 --> 00:16:14,040
so slots again serves as a way that you

00:16:11,190 --> 00:16:15,720
can begin to customize this so one of

00:16:14,040 --> 00:16:16,259
the goals of universal object was to

00:16:15,720 --> 00:16:17,669
hopefully

00:16:16,259 --> 00:16:19,499
get all the other people who build

00:16:17,669 --> 00:16:22,019
object systems to just use this as their

00:16:19,499 --> 00:16:24,059
base class and then we have a base sort

00:16:22,019 --> 00:16:25,799
of a substrate that we can all cooperate

00:16:24,059 --> 00:16:28,589
on and then you can put your opinions on

00:16:25,799 --> 00:16:31,979
top of that and slots was necessary to

00:16:28,589 --> 00:16:34,619
basically allow people to get at stuff

00:16:31,979 --> 00:16:38,729
that's not in not in the normal place

00:16:34,619 --> 00:16:39,660
that they would think it'd be so I'm

00:16:38,729 --> 00:16:40,649
gonna go through the last couple of

00:16:39,660 --> 00:16:41,850
stuff here because I know I don't

00:16:40,649 --> 00:16:43,139
haven't too much time so I'm gonna be a

00:16:41,850 --> 00:16:44,999
little quick here one of the other

00:16:43,139 --> 00:16:46,589
things I was doing a bunch of Scala

00:16:44,999 --> 00:16:49,139
stuff and I'm a big fan of functional

00:16:46,589 --> 00:16:50,939
programming Haskell okay ml things like

00:16:49,139 --> 00:16:53,069
that and of course those all talk a lot

00:16:50,939 --> 00:16:55,319
about immutability and of course the new

00:16:53,069 --> 00:16:56,970
the new hot topic of concurrency and

00:16:55,319 --> 00:16:58,470
such like that immune ability is part of

00:16:56,970 --> 00:16:59,519
that because yeah you don't have to

00:16:58,470 --> 00:17:03,600
worry about state changes between

00:16:59,519 --> 00:17:04,559
threads and blah blah blah blah so we

00:17:03,600 --> 00:17:06,269
don't have threads so that doesn't

00:17:04,559 --> 00:17:07,980
really matter but immutability is kind

00:17:06,269 --> 00:17:10,980
of nice the ability for people to not

00:17:07,980 --> 00:17:15,149
change your class or for if they attempt

00:17:10,980 --> 00:17:16,679
to change class it breaks so I added a

00:17:15,149 --> 00:17:18,870
mute ability to universal object cuz it

00:17:16,679 --> 00:17:20,279
just sort of worked and essentially what

00:17:18,870 --> 00:17:22,350
it does is it just figures out what type

00:17:20,279 --> 00:17:24,689
of instance you you have and then it

00:17:22,350 --> 00:17:27,329
locks it in some way so it just uses

00:17:24,689 --> 00:17:30,870
like internals to to to make it

00:17:27,329 --> 00:17:33,090
read-only this is an example of wrapping

00:17:30,870 --> 00:17:35,250
like a subroutine so that subroutine is

00:17:33,090 --> 00:17:36,899
owned by Perl so we really shouldn't be

00:17:35,250 --> 00:17:40,200
altering it or screwing with it too much

00:17:36,899 --> 00:17:42,480
in fact if we bless it then the actual

00:17:40,200 --> 00:17:43,799
code RAF gets blessed so in this case we

00:17:42,480 --> 00:17:46,139
actually want to just bless a reference

00:17:43,799 --> 00:17:47,970
here and that's it

00:17:46,139 --> 00:17:49,110
no one will ever change this class we

00:17:47,970 --> 00:17:51,029
know that no one will ever change this

00:17:49,110 --> 00:17:56,190
class because it's immutable and they

00:17:51,029 --> 00:17:58,169
can't do that so this is actually yeah

00:17:56,190 --> 00:18:00,330
this is a this is maybe an additional 40

00:17:58,169 --> 00:18:03,649
lines to that 125 lines there so it's

00:18:00,330 --> 00:18:07,529
also very very very simple I find this

00:18:03,649 --> 00:18:09,960
helps me as I design a set of classes

00:18:07,529 --> 00:18:11,820
thinking about what is immutable and

00:18:09,960 --> 00:18:15,870
what is or what what could be immutable

00:18:11,820 --> 00:18:17,429
and what needs to be altered it's just a

00:18:15,870 --> 00:18:19,169
good good exercise as you're building

00:18:17,429 --> 00:18:22,230
these classes and then enforcing it upon

00:18:19,169 --> 00:18:24,570
yourself so last thing custom slot

00:18:22,230 --> 00:18:26,279
objects this one gets a little messy I

00:18:24,570 --> 00:18:27,929
left it to the end because I was hoping

00:18:26,279 --> 00:18:29,130
I could skip it but I think I have a

00:18:27,929 --> 00:18:32,310
minute so

00:18:29,130 --> 00:18:33,420
do it so before you just put in

00:18:32,310 --> 00:18:35,130
subroutines right you're just putting

00:18:33,420 --> 00:18:36,900
subs in into the into the other side of

00:18:35,130 --> 00:18:39,030
the slot well that doesn't do very much

00:18:36,900 --> 00:18:40,440
it's not very intelligent so you

00:18:39,030 --> 00:18:43,830
actually can store whatever you want in

00:18:40,440 --> 00:18:47,100
there as long as it can turn into a code

00:18:43,830 --> 00:18:48,540
ref so here's a custom slot object that

00:18:47,100 --> 00:18:50,550
allows you to pass in a default value

00:18:48,540 --> 00:19:01,260
and then it'll do all the stuff and you

00:18:50,550 --> 00:19:02,610
can see in the next slide so pearls

00:19:01,260 --> 00:19:04,890
overloading will just take care of that

00:19:02,610 --> 00:19:08,400
so we can just store it in there but

00:19:04,890 --> 00:19:09,900
that also has its there still that

00:19:08,400 --> 00:19:11,760
hasn't been turned into a code ref

00:19:09,900 --> 00:19:13,650
that's the original objects and you can

00:19:11,760 --> 00:19:16,100
then begin to get into introspection

00:19:13,650 --> 00:19:18,450
type stuff and you can you can

00:19:16,100 --> 00:19:21,480
essentially look at those things or look

00:19:18,450 --> 00:19:24,360
at look at the user using mop which is

00:19:21,480 --> 00:19:26,640
the talk that I have about tomorrow you

00:19:24,360 --> 00:19:28,260
can get into those yeah you get into

00:19:26,640 --> 00:19:30,720
those spots and you can check out those

00:19:28,260 --> 00:19:40,020
objects and I'm out of time which is

00:19:30,720 --> 00:19:41,220
good because questions in the end you

00:19:40,020 --> 00:19:43,560
can always ask questions out in the

00:19:41,220 --> 00:19:45,830
hallway but I think we're we got a sign

00:19:43,560 --> 00:19:45,830

YouTube URL: https://www.youtube.com/watch?v=lnleCcKqcv4


