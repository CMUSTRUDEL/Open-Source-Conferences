Title: Dave Rolsky (‎autarch‎) - ‎A Date with Perl‎
Publication date: 2014-06-24
Playlist: YAPC::NA 2014
Description: 
	Dates and times are confusing and crazy. What nut invented Daylight Saving Time? Someone who'd never imagined a computer, that's who!

Dealing with dates and times might seem simple at first, but there's a lot of gotchas.

This talk will start by covering some concepts worth knowing about (What is an Olson timezone? What's the Gregorian Calendar?).

After that we'll talk about how the DateTime suite of modules can make your life a little easier. I'll show you some best practices for working with dates and times, and highlight some gotchas in DateTime's API, and with datetimes in general.
Captions: 
	00:00:01,550 --> 00:00:07,040
all right everyone thank you so much for

00:00:04,440 --> 00:00:09,690
coming out so early in the morning I

00:00:07,040 --> 00:00:11,910
appreciate you waking up as I said

00:00:09,690 --> 00:00:13,889
earlier and to those of you watching on

00:00:11,910 --> 00:00:15,780
YouTube thank you for taking time away

00:00:13,889 --> 00:00:20,640
from your busy schedule of kitten videos

00:00:15,780 --> 00:00:23,910
to check this out so my name is Dave

00:00:20,640 --> 00:00:26,279
roll ski and this presentation is called

00:00:23,910 --> 00:00:29,970
a date with pearl this Mike seems overly

00:00:26,279 --> 00:00:32,579
loud there's a bit of bringing if you

00:00:29,970 --> 00:00:34,079
thought this was about dating advice I'm

00:00:32,579 --> 00:00:35,730
sorry to tell you that this is the wrong

00:00:34,079 --> 00:00:37,140
presentation I'm the wrong person to

00:00:35,730 --> 00:00:39,450
give it and you're probably at the wrong

00:00:37,140 --> 00:00:41,280
conference for that entirely this is

00:00:39,450 --> 00:00:45,690
going to be about dates and times in

00:00:41,280 --> 00:00:48,360
Pearl so I've done a lot of pearl stuff

00:00:45,690 --> 00:00:49,590
including writing the date time to try

00:00:48,360 --> 00:00:56,100
to talk really quiet because i feel like

00:00:49,590 --> 00:00:57,329
the mic is really loud yeah okay i'm

00:00:56,100 --> 00:01:00,570
going to talk really quiet because they

00:00:57,329 --> 00:01:05,790
need the mic for youtube I could try

00:01:00,570 --> 00:01:07,950
that how's that is that better okay so

00:01:05,790 --> 00:01:09,869
yeah I've done a lot of pearl stuff

00:01:07,950 --> 00:01:11,850
including reading the daytime module and

00:01:09,869 --> 00:01:15,030
various other day time things and lots

00:01:11,850 --> 00:01:16,290
of other stuff so first thing you need

00:01:15,030 --> 00:01:22,770
to know is the dates and times are

00:01:16,290 --> 00:01:25,619
completely insane and there's there's a

00:01:22,770 --> 00:01:28,049
lot of insanity that will cover others

00:01:25,619 --> 00:01:29,460
calendars and how where they are there's

00:01:28,049 --> 00:01:31,259
time zones which are the worst thing

00:01:29,460 --> 00:01:33,060
ever except for daylight saving time

00:01:31,259 --> 00:01:34,920
which is really the worst thing ever

00:01:33,060 --> 00:01:36,960
except for leap seconds which okay

00:01:34,920 --> 00:01:38,880
that's the worst thing ever but there's

00:01:36,960 --> 00:01:42,060
a lot of insanity to deal with in the

00:01:38,880 --> 00:01:43,860
date and time world so if there's one

00:01:42,060 --> 00:01:49,259
thing you take away from this

00:01:43,860 --> 00:01:51,060
presentation it's this so definitely

00:01:49,259 --> 00:01:54,360
write your own date & time code I'd them

00:01:51,060 --> 00:01:56,700
no just don't don't do it use something

00:01:54,360 --> 00:02:00,000
from Sipan if you don't want to use date

00:01:56,700 --> 00:02:01,619
time I don't know why you wouldn't want

00:02:00,000 --> 00:02:03,030
to use daytime it's the best thing ever

00:02:01,619 --> 00:02:05,700
but there are other modules you can

00:02:03,030 --> 00:02:06,750
consider using but definitely do not be

00:02:05,700 --> 00:02:08,459
writing this stuff from scratch

00:02:06,750 --> 00:02:10,210
especially if you have to do any sort of

00:02:08,459 --> 00:02:11,890
date and time man

00:02:10,210 --> 00:02:14,830
or if you have to deal with time zones

00:02:11,890 --> 00:02:16,510
and DST I guarantee if you read it from

00:02:14,830 --> 00:02:21,850
scratch she'll get it wrong I know I did

00:02:16,510 --> 00:02:24,850
so so yeah alright so let's talk a

00:02:21,850 --> 00:02:26,290
little bit about calendars so probably

00:02:24,850 --> 00:02:28,420
many of you have heard of the gregorian

00:02:26,290 --> 00:02:31,330
calendar this is based on the earth's

00:02:28,420 --> 00:02:34,030
revolution around the Sun this is what

00:02:31,330 --> 00:02:36,850
we currently use in pretty much all of

00:02:34,030 --> 00:02:38,200
the world as our main calendar at least

00:02:36,850 --> 00:02:40,600
and it's certainly the calendar of

00:02:38,200 --> 00:02:42,790
international communication so the

00:02:40,600 --> 00:02:46,810
date-time p.m. module implements the

00:02:42,790 --> 00:02:48,520
Gregorian calendar so here's the basics

00:02:46,810 --> 00:02:50,470
of it there's hopefully you already know

00:02:48,520 --> 00:02:54,190
a lot of this there's 365 days in a year

00:02:50,470 --> 00:02:56,950
leap years add an extra day and for the

00:02:54,190 --> 00:02:59,620
purposes of daytime the detail module we

00:02:56,950 --> 00:03:03,340
say it begins in year one day one month

00:02:59,620 --> 00:03:05,590
one in reality it wasn't implemented

00:03:03,340 --> 00:03:07,840
until the past couple hundred years and

00:03:05,590 --> 00:03:09,520
dates of adoption various vary across

00:03:07,840 --> 00:03:11,170
different countries i think the latest

00:03:09,520 --> 00:03:13,300
countries to adopt it were like Russia

00:03:11,170 --> 00:03:19,510
and some others adopted in the early

00:03:13,300 --> 00:03:20,740
1900s so I said it starts on gear one of

00:03:19,510 --> 00:03:22,960
course you can then start counting

00:03:20,740 --> 00:03:26,350
backwards so we have a year zero which

00:03:22,960 --> 00:03:29,920
is also referred to as one bc or BCE and

00:03:26,350 --> 00:03:31,780
some counting systems we might need to

00:03:29,920 --> 00:03:33,850
tweak the leap your algorithm at some

00:03:31,780 --> 00:03:36,790
point around your three thousand so keep

00:03:33,850 --> 00:03:39,220
an eye out for that make sure you write

00:03:36,790 --> 00:03:40,840
code that handles that correctly because

00:03:39,220 --> 00:03:42,970
the Earth's revolution around the Sun is

00:03:40,840 --> 00:03:44,290
slowing down so eventually it's going to

00:03:42,970 --> 00:03:46,180
slow down so much that will probably

00:03:44,290 --> 00:03:47,290
just crash into the Sun except the Sun

00:03:46,180 --> 00:03:48,610
will probably have expanded and

00:03:47,290 --> 00:03:54,160
swallowed the earth by then either way

00:03:48,610 --> 00:03:56,440
so take away we're all doomed so here's

00:03:54,160 --> 00:03:58,420
a really simple example of how you can

00:03:56,440 --> 00:04:00,880
use the date-time module four simple

00:03:58,420 --> 00:04:02,800
dates so you make a new date time you

00:04:00,880 --> 00:04:04,810
give it a year a month at it a day and

00:04:02,800 --> 00:04:06,970
you can ask for information from that

00:04:04,810 --> 00:04:08,890
object so we can say the date and it

00:04:06,970 --> 00:04:11,290
prints it out in what your month date

00:04:08,890 --> 00:04:13,090
format we can ask for the month name and

00:04:11,290 --> 00:04:15,340
it tells you it's June there are many

00:04:13,090 --> 00:04:15,950
many other things you can ask it to tell

00:04:15,340 --> 00:04:18,470
you

00:04:15,950 --> 00:04:20,090
the name of the day or what quarter

00:04:18,470 --> 00:04:22,250
you're in or what week of the year

00:04:20,090 --> 00:04:26,750
you're in you can read the docs to see

00:04:22,250 --> 00:04:29,030
all this and of course we can also do

00:04:26,750 --> 00:04:30,860
these in this and other languages so if

00:04:29,030 --> 00:04:32,960
you pass a locale when you're

00:04:30,860 --> 00:04:34,190
constructing the daytime object it will

00:04:32,960 --> 00:04:36,260
spit out the names in different

00:04:34,190 --> 00:04:40,570
languages and there's coverage right now

00:04:36,260 --> 00:04:43,940
for most languages on earth and

00:04:40,570 --> 00:04:48,100
including coverage for the specific

00:04:43,940 --> 00:04:52,940
locale so for example French French vs I

00:04:48,100 --> 00:04:54,200
don't know Canadian French or you know

00:04:52,940 --> 00:04:58,729
there's many many many different

00:04:54,200 --> 00:05:01,340
dialects of Spanish and this affects not

00:04:58,729 --> 00:05:02,660
only things like the names of the days

00:05:01,340 --> 00:05:04,190
which are probably the same in every

00:05:02,660 --> 00:05:05,930
spanish-speaking country but also the

00:05:04,190 --> 00:05:08,120
formatting like the default formatting

00:05:05,930 --> 00:05:10,820
of dates you know so that will vary

00:05:08,120 --> 00:05:15,860
based on the country less as well as the

00:05:10,820 --> 00:05:17,720
language so and we also have modules out

00:05:15,860 --> 00:05:19,940
there for other calendars and we can

00:05:17,720 --> 00:05:23,600
convert between them so for example we

00:05:19,940 --> 00:05:25,100
could make a date time mod object for

00:05:23,600 --> 00:05:28,610
while this was the current date when I

00:05:25,100 --> 00:05:31,550
did this last year then we can create a

00:05:28,610 --> 00:05:33,380
chinese calendar object from that

00:05:31,550 --> 00:05:35,389
daytime object and we can ask it for

00:05:33,380 --> 00:05:38,240
information about the Chinese calendar

00:05:35,389 --> 00:05:40,700
so what cycle isn't what's the zodiac

00:05:38,240 --> 00:05:42,470
animal currently what's the celestial

00:05:40,700 --> 00:05:44,030
stem and the terrestrial branch which is

00:05:42,470 --> 00:05:45,950
questions I know you're all burning to

00:05:44,030 --> 00:05:48,979
have answered which are these things

00:05:45,950 --> 00:05:50,360
which I care this is not the very small

00:05:48,979 --> 00:05:53,360
subset of Chinese that I could actually

00:05:50,360 --> 00:05:56,360
read so I don't know what it says all

00:05:53,360 --> 00:05:59,300
right any questions so far that was

00:05:56,360 --> 00:06:00,849
basic calendar stuff hopefully most of

00:05:59,300 --> 00:06:04,010
that was pretty much review for you

00:06:00,849 --> 00:06:06,710
alright so then let's talk about time so

00:06:04,010 --> 00:06:08,720
that's based of course on the length of

00:06:06,710 --> 00:06:13,010
a day one rotation of the earth around

00:06:08,720 --> 00:06:17,150
its access so a day mostly has 24 hours

00:06:13,010 --> 00:06:21,620
and in the daytime module we count from

00:06:17,150 --> 00:06:24,260
our zero to our 23 an hour has 60

00:06:21,620 --> 00:06:26,860
minutes most minutes have 60 seconds not

00:06:24,260 --> 00:06:28,490
all of them therefore most days have

00:06:26,860 --> 00:06:30,650
86,400 seconds

00:06:28,490 --> 00:06:31,910
again not all of them and I mentioned

00:06:30,650 --> 00:06:35,180
leap seconds earlier and that's where

00:06:31,910 --> 00:06:36,319
this comes in worst thing ever great so

00:06:35,180 --> 00:06:37,810
then there's this thing called atomic

00:06:36,319 --> 00:06:40,759
clocks you might have heard of and

00:06:37,810 --> 00:06:43,280
that's a way of measuring the length of

00:06:40,759 --> 00:06:44,990
a second based on something about

00:06:43,280 --> 00:06:47,030
physics that I don't understand I

00:06:44,990 --> 00:06:48,590
majored in music so this is just a

00:06:47,030 --> 00:06:50,630
couple too good to me I don't know

00:06:48,590 --> 00:06:53,930
they're like Adams vibrations decay

00:06:50,630 --> 00:06:57,410
cesium something something wah wah wah

00:06:53,930 --> 00:06:59,810
wah all I know is it's very accurate so

00:06:57,410 --> 00:07:01,430
the length of a second never changes

00:06:59,810 --> 00:07:06,289
when it's measured by an atomic clock

00:07:01,430 --> 00:07:08,960
and ta I which is I believe Tom's atomic

00:07:06,289 --> 00:07:11,210
internationl is the international atomic

00:07:08,960 --> 00:07:15,139
science and ER that everybody has agreed

00:07:11,210 --> 00:07:16,880
to use you know the the reason that's

00:07:15,139 --> 00:07:19,460
important is it ties into leap seconds

00:07:16,880 --> 00:07:21,169
so this is the worst thing ever so not

00:07:19,460 --> 00:07:23,000
only is the Earth's revolution around

00:07:21,169 --> 00:07:26,080
the Sun slowing down but its rotation

00:07:23,000 --> 00:07:28,610
around the access is also slowing down

00:07:26,080 --> 00:07:31,789
however since the length of a second is

00:07:28,610 --> 00:07:35,539
tied to atomic clocks the length of a

00:07:31,789 --> 00:07:38,000
second is not changing so every once in

00:07:35,539 --> 00:07:40,699
a while we need to resync midnight so

00:07:38,000 --> 00:07:43,009
it's actually the middle of the night so

00:07:40,699 --> 00:07:45,139
we announce a leap second anyway I say

00:07:43,009 --> 00:07:47,810
we there's some bunch of people in

00:07:45,139 --> 00:07:50,300
France who do this who are constantly

00:07:47,810 --> 00:07:51,919
measuring the speed of the earth so

00:07:50,300 --> 00:07:54,259
every once in a while they declare that

00:07:51,919 --> 00:07:56,030
there will be an extra second and some

00:07:54,259 --> 00:08:01,430
day coming up in a few months it's

00:07:56,030 --> 00:08:02,870
either I think June first or December

00:08:01,430 --> 00:08:05,630
first or something like that it's it

00:08:02,870 --> 00:08:08,090
always fixed it can happen no more often

00:08:05,630 --> 00:08:10,190
than every six months in theory they can

00:08:08,090 --> 00:08:12,770
actually announced two extra seconds or

00:08:10,190 --> 00:08:15,979
in case their speeds up which apparently

00:08:12,770 --> 00:08:17,569
in theory it can they could subtract a

00:08:15,979 --> 00:08:19,190
second or two I've never seen that

00:08:17,569 --> 00:08:23,690
happen so far they've just added one

00:08:19,190 --> 00:08:26,990
second so then there's this thing where

00:08:23,690 --> 00:08:28,940
we try to deal with the atomic length of

00:08:26,990 --> 00:08:33,620
time versus the actual length of a day

00:08:28,940 --> 00:08:36,079
it's called UTC so okay the English name

00:08:33,620 --> 00:08:38,709
is coordinated Universal Time the French

00:08:36,079 --> 00:08:41,680
name is tom's univ is el cordón a and

00:08:38,709 --> 00:08:44,020
the acronym is UTC

00:08:41,680 --> 00:08:45,820
I love this this is just like such a

00:08:44,020 --> 00:08:48,970
great example of like international

00:08:45,820 --> 00:08:50,350
politics at work so we couldn't neither

00:08:48,970 --> 00:08:51,820
neither the English speakers and the

00:08:50,350 --> 00:08:54,160
French speakers we're apparently willing

00:08:51,820 --> 00:08:58,089
to give so the acronym we come up with

00:08:54,160 --> 00:09:00,670
is neither I love it so UTC is this

00:08:58,089 --> 00:09:03,010
atomic time and then you add the leap

00:09:00,670 --> 00:09:06,550
seconds that we've had so far in history

00:09:03,010 --> 00:09:08,200
the others been 34 and that's really

00:09:06,550 --> 00:09:11,290
what we use is the current world

00:09:08,200 --> 00:09:13,720
standard for measuring time is UTC at

00:09:11,290 --> 00:09:15,339
least for kind of wall clocks in the

00:09:13,720 --> 00:09:17,080
clocks on your computer and stuff like

00:09:15,339 --> 00:09:18,760
that people are actually doing say

00:09:17,080 --> 00:09:21,880
physics and things like that will

00:09:18,760 --> 00:09:23,350
generally just use tai TA I and not

00:09:21,880 --> 00:09:24,790
worry about leap seconds because they're

00:09:23,350 --> 00:09:27,940
really just concerned about how long

00:09:24,790 --> 00:09:30,070
things take so this is based on the time

00:09:27,940 --> 00:09:31,270
and Greenwich England you might have

00:09:30,070 --> 00:09:34,120
heard the term greenwich mean time

00:09:31,270 --> 00:09:36,580
before and it's kind of basically the

00:09:34,120 --> 00:09:39,690
same thing as UTC and then all time

00:09:36,580 --> 00:09:41,920
zones are based on an offset from UTC

00:09:39,690 --> 00:09:45,760
which means all time zones of course

00:09:41,920 --> 00:09:52,060
include these horrible leap seconds all

00:09:45,760 --> 00:09:54,190
right are you with me yeah question so

00:09:52,060 --> 00:09:55,690
the question was if we don't know when

00:09:54,190 --> 00:09:57,490
leave seconds are being added how do we

00:09:55,690 --> 00:10:01,209
calculate future deeds and the answer

00:09:57,490 --> 00:10:03,010
for that is incorrectly so every time

00:10:01,209 --> 00:10:05,020
the leap second is announced I have to

00:10:03,010 --> 00:10:07,089
do a new release of daytime p.m. because

00:10:05,020 --> 00:10:09,730
it just shifts with like a list of them

00:10:07,089 --> 00:10:13,029
there's Ritter there's no other way to

00:10:09,730 --> 00:10:14,260
deal with this but actually when I say

00:10:13,029 --> 00:10:16,390
incorrectly that's not really true

00:10:14,260 --> 00:10:19,000
because it's correct as of right now

00:10:16,390 --> 00:10:21,250
there are no additional leap second so

00:10:19,000 --> 00:10:23,410
the calculations are correct as soon as

00:10:21,250 --> 00:10:25,360
it's announced it's incorrect and you

00:10:23,410 --> 00:10:28,209
should update daytime now in practice

00:10:25,360 --> 00:10:30,850
this really doesn't matter that much for

00:10:28,209 --> 00:10:32,620
about 99% of applications so if you just

00:10:30,850 --> 00:10:35,500
use the existing version of daytime that

00:10:32,620 --> 00:10:38,380
you've been using it's really not going

00:10:35,500 --> 00:10:40,329
to break anything but in fact I

00:10:38,380 --> 00:10:42,640
sometimes wish I'd never included leap

00:10:40,329 --> 00:10:44,230
seconds in the main daytime class at all

00:10:42,640 --> 00:10:46,720
it would have made my life simpler and

00:10:44,230 --> 00:10:48,760
people wouldn't wouldn't have to think

00:10:46,720 --> 00:10:54,620
about it but it's in there I was trying

00:10:48,760 --> 00:10:56,840
to be correct right so time zones

00:10:54,620 --> 00:10:59,840
so time zones are political which means

00:10:56,840 --> 00:11:02,450
they're crap they change all the time

00:10:59,840 --> 00:11:04,100
for the stupidest reasons so the latest

00:11:02,450 --> 00:11:07,520
change that was driving me out of my

00:11:04,100 --> 00:11:09,920
mind is apparently Morocco has decided

00:11:07,520 --> 00:11:12,970
that their daylight saving transition is

00:11:09,920 --> 00:11:16,130
going to be based on the end of Ramadan

00:11:12,970 --> 00:11:19,670
now I have nothing against Ramadan great

00:11:16,130 --> 00:11:21,710
holiday but it's based on the Islamic

00:11:19,670 --> 00:11:26,510
calendar not the Gregorian calendar so

00:11:21,710 --> 00:11:27,710
every year the the the DST transition is

00:11:26,510 --> 00:11:29,420
going to happen at a time that's

00:11:27,710 --> 00:11:30,980
completely unpredictable if you're just

00:11:29,420 --> 00:11:33,770
looking at the Guru Orion calendar and

00:11:30,980 --> 00:11:35,870
in fact the existing tools that we use

00:11:33,770 --> 00:11:37,730
for kind of managing time zones which

00:11:35,870 --> 00:11:40,820
I'll talk about in a second have no way

00:11:37,730 --> 00:11:43,100
of representing this according to the

00:11:40,820 --> 00:11:45,290
Islamic calendar so they just have to

00:11:43,100 --> 00:11:48,470
pre calculate the Islamic calendar for

00:11:45,290 --> 00:11:52,190
the next 400 years in order to get the

00:11:48,470 --> 00:11:54,530
an approximation of the right answer why

00:11:52,190 --> 00:11:56,540
they decided to do this I don't know why

00:11:54,530 --> 00:11:58,280
they kind of just said screw DST it's

00:11:56,540 --> 00:12:00,290
really stupid that certainly would have

00:11:58,280 --> 00:12:02,840
made life easier there is also for

00:12:00,290 --> 00:12:04,340
example the last us DST change which was

00:12:02,840 --> 00:12:07,310
supposed to save energy and probably

00:12:04,340 --> 00:12:10,670
just killed a few people in fact dsj

00:12:07,310 --> 00:12:14,030
changes kill people because when you get

00:12:10,670 --> 00:12:16,280
less sleep the night when you lose an

00:12:14,030 --> 00:12:18,380
hour you sleep less and people get into

00:12:16,280 --> 00:12:21,470
accidents or are higher stress and then

00:12:18,380 --> 00:12:29,150
they have heart attacks so yeah not only

00:12:21,470 --> 00:12:31,070
is DST stupid but it kills and that

00:12:29,150 --> 00:12:32,960
probably just screws screws people's

00:12:31,070 --> 00:12:34,610
schedules up and then there then they're

00:12:32,960 --> 00:12:36,020
running late for something because their

00:12:34,610 --> 00:12:41,450
schedules off and then they drive too

00:12:36,020 --> 00:12:43,280
fast and have an accident so all right

00:12:41,450 --> 00:12:46,510
so yeah so time zones are political

00:12:43,280 --> 00:12:49,040
there they will change I've seen changes

00:12:46,510 --> 00:12:50,750
announced like I think this happened in

00:12:49,040 --> 00:12:52,280
Argentina a few years ago or like yeah

00:12:50,750 --> 00:12:53,900
next Thursday we're going to have a

00:12:52,280 --> 00:12:58,310
change to the whole thing which is

00:12:53,900 --> 00:13:00,140
horrible so there's this database called

00:12:58,310 --> 00:13:03,560
the Olsen time zone database but now

00:13:00,140 --> 00:13:05,180
it's called the iana time zone database

00:13:03,560 --> 00:13:06,970
because the guy created Arthur David

00:13:05,180 --> 00:13:09,819
Olson is now retired

00:13:06,970 --> 00:13:12,610
so it's an open source data and software

00:13:09,819 --> 00:13:14,620
project Microsoft of course has to do

00:13:12,610 --> 00:13:16,540
their own thing because it's Microsoft

00:13:14,620 --> 00:13:18,250
now surprisingly Apple does it because

00:13:16,540 --> 00:13:19,990
Apple is all about like inventing their

00:13:18,250 --> 00:13:22,860
own like oh let's make a new port

00:13:19,990 --> 00:13:25,269
oh let's make a new display adapter

00:13:22,860 --> 00:13:26,980
whatever but in this case they're

00:13:25,269 --> 00:13:29,040
actually using this database thankfully

00:13:26,980 --> 00:13:32,170
but Microsoft has its own system

00:13:29,040 --> 00:13:33,759
daytime's timezone module ships with

00:13:32,170 --> 00:13:35,139
something that converts between them but

00:13:33,759 --> 00:13:37,000
it's not that up to date because I

00:13:35,139 --> 00:13:38,230
refuse to use windows so if you use

00:13:37,000 --> 00:13:40,560
Windows and find that there's some

00:13:38,230 --> 00:13:44,230
problems patches are very much welcome

00:13:40,560 --> 00:13:47,040
so the basics of time zones it's an

00:13:44,230 --> 00:13:50,800
offset in minutes and hours from UTC

00:13:47,040 --> 00:13:52,930
right now Orlando is minus four hours so

00:13:50,800 --> 00:13:56,310
we're four hours behind the current UTC

00:13:52,930 --> 00:13:58,509
time time zones also have a name

00:13:56,310 --> 00:14:01,060
generally most of the names are a

00:13:58,509 --> 00:14:02,529
continent or an ocean followed by a city

00:14:01,060 --> 00:14:05,050
so we have something like America

00:14:02,529 --> 00:14:08,050
Chicago right now we're in the America /

00:14:05,050 --> 00:14:10,810
New York Times own Asia Taipei Pacific

00:14:08,050 --> 00:14:12,879
Fiji blah blah sometimes we have names

00:14:10,810 --> 00:14:15,699
with three parts because the countries

00:14:12,879 --> 00:14:17,740
have just gone crazy or in the case of

00:14:15,699 --> 00:14:20,439
Indiana the state has gone crazy and you

00:14:17,740 --> 00:14:21,790
just need more specificity to label the

00:14:20,439 --> 00:14:23,889
time zone so we have like America

00:14:21,790 --> 00:14:25,899
Argentina San Juan and there's like a I

00:14:23,889 --> 00:14:27,819
don't know five time zones in Indiana

00:14:25,899 --> 00:14:30,250
because apparently living in the midwest

00:14:27,819 --> 00:14:34,379
drives you bad I live in Minneapolis so

00:14:30,250 --> 00:14:36,850
I guess I'm a testament to that fact so

00:14:34,379 --> 00:14:40,180
what at times it really is is a

00:14:36,850 --> 00:14:42,819
collection of rules about historical and

00:14:40,180 --> 00:14:45,850
future DST changes so it basically says

00:14:42,819 --> 00:14:48,309
something like the last Sunday of March

00:14:45,850 --> 00:14:52,870
will move the clocks forward an hour at

00:14:48,309 --> 00:14:55,199
one a.m. local time or the first Tuesday

00:14:52,870 --> 00:15:00,309
of October will move the clocks back an

00:14:55,199 --> 00:15:03,220
hour at 12am UTC time and there's a lot

00:15:00,309 --> 00:15:04,959
of ways to define these rules they also

00:15:03,220 --> 00:15:08,769
define short names that you might be

00:15:04,959 --> 00:15:11,139
familiar with like CDT or EDT I highly

00:15:08,769 --> 00:15:12,850
recommend that you not try to use these

00:15:11,139 --> 00:15:14,410
for anything other than displaying to

00:15:12,850 --> 00:15:17,860
end users because these names are not

00:15:14,410 --> 00:15:19,209
unique so for a while EST refer to both

00:15:17,860 --> 00:15:22,629
the timezone

00:15:19,209 --> 00:15:24,970
in during the winter here as well as a

00:15:22,629 --> 00:15:26,860
time zone in Australia so if you ask a

00:15:24,970 --> 00:15:29,350
user to type in their time zone or pick

00:15:26,860 --> 00:15:31,689
from a timezone list that's just these

00:15:29,350 --> 00:15:33,639
short names then that's not very helpful

00:15:31,689 --> 00:15:36,519
and there's no guarantee that the short

00:15:33,639 --> 00:15:38,439
names will be unique at any given time

00:15:36,519 --> 00:15:41,470
so really these are just for display

00:15:38,439 --> 00:15:43,329
purposes only if you want users to

00:15:41,470 --> 00:15:45,309
select a time zone you have to really

00:15:43,329 --> 00:15:47,319
ask them what city they're in or what

00:15:45,309 --> 00:15:49,300
city is nearest or you know give them a

00:15:47,319 --> 00:15:51,550
list of cities say what city is in the

00:15:49,300 --> 00:15:57,999
same time zone as you okay Chicago or

00:15:51,550 --> 00:15:59,860
New York or whatever so another thing to

00:15:57,999 --> 00:16:02,379
realize is that this database has a lot

00:15:59,860 --> 00:16:05,559
of historical time zones that are now

00:16:02,379 --> 00:16:08,980
exactly the same as kind of the main

00:16:05,559 --> 00:16:11,110
time zone for the region so there's a

00:16:08,980 --> 00:16:13,149
time zone called America Menominee which

00:16:11,110 --> 00:16:15,490
I just love to say Menominee Menominee

00:16:13,149 --> 00:16:18,399
Menominee which is a city in Wisconsin

00:16:15,490 --> 00:16:20,259
it's being the same it's been following

00:16:18,399 --> 00:16:24,339
the same rules of Chicago since I don't

00:16:20,259 --> 00:16:26,769
know the 70s or so before the 70s there

00:16:24,339 --> 00:16:30,910
are a lot more variations and local time

00:16:26,769 --> 00:16:33,429
zones around the world so yeah Menominee

00:16:30,910 --> 00:16:36,129
moves from eastern to central right now

00:16:33,429 --> 00:16:38,110
there's no api for finding what time

00:16:36,129 --> 00:16:40,299
zones are actually kind of current and

00:16:38,110 --> 00:16:41,740
which ones are historical only I've had

00:16:40,299 --> 00:16:43,329
I've been you know I've done this talk

00:16:41,740 --> 00:16:45,220
for a few years I've been saying yet for

00:16:43,329 --> 00:16:47,889
years so this is clearly just wishful

00:16:45,220 --> 00:16:51,220
thinking nobody's gone encoded this it

00:16:47,889 --> 00:16:52,899
would be really useful to have some way

00:16:51,220 --> 00:16:55,629
to do it or also just to have some way

00:16:52,899 --> 00:16:57,879
to say you know are these two you know

00:16:55,629 --> 00:17:03,100
which time zones are the same for the

00:16:57,879 --> 00:17:04,809
current dates and future dates but I

00:17:03,100 --> 00:17:06,429
suspect what most people end up doing

00:17:04,809 --> 00:17:08,470
it's just kind of hand picking the time

00:17:06,429 --> 00:17:10,270
zones they want to show users for

00:17:08,470 --> 00:17:14,260
selection it's hard to get away from

00:17:10,270 --> 00:17:16,959
that so of course you can use all these

00:17:14,260 --> 00:17:19,059
time zones with the daytime module so

00:17:16,959 --> 00:17:21,189
when we create a time zone we can't

00:17:19,059 --> 00:17:23,649
sorry when we create a daytime object we

00:17:21,189 --> 00:17:26,289
can set the time zone when we create the

00:17:23,649 --> 00:17:28,659
object if we ask for the date time in

00:17:26,289 --> 00:17:30,850
America Chicago on that date it'll tell

00:17:28,659 --> 00:17:32,680
us what it is then we can set the time

00:17:30,850 --> 00:17:34,990
zone to some other times

00:17:32,680 --> 00:17:37,750
own it adjusts the local time leaving

00:17:34,990 --> 00:17:39,310
the UTC time the same and then you can

00:17:37,750 --> 00:17:41,470
print that out and figure out what time

00:17:39,310 --> 00:17:43,990
it is there this is a reference to a

00:17:41,470 --> 00:17:45,850
very obscure taiwanese film that i'm

00:17:43,990 --> 00:17:50,080
sure you all saw called what time is it

00:17:45,850 --> 00:17:52,090
there so this is you know obviously

00:17:50,080 --> 00:17:54,040
useful for a lot of things you want to

00:17:52,090 --> 00:17:55,450
figure out you know like some sort of

00:17:54,040 --> 00:17:57,370
meeting scheduling for people across

00:17:55,450 --> 00:17:59,200
different time zones you you need to be

00:17:57,370 --> 00:18:02,800
able to present the information in their

00:17:59,200 --> 00:18:04,420
local timezone there's also this thing

00:18:02,800 --> 00:18:06,430
called the floating time zone which is

00:18:04,420 --> 00:18:08,560
really the absence of the time zone or

00:18:06,430 --> 00:18:12,520
maybe think of it as the undef of time

00:18:08,560 --> 00:18:15,550
zones so if you set the time zone to

00:18:12,520 --> 00:18:18,430
floating then you don't have a time zone

00:18:15,550 --> 00:18:20,620
and when you convert to a real time zone

00:18:18,430 --> 00:18:23,620
say I called set time zone on this

00:18:20,620 --> 00:18:26,680
object and set it to Asia Taipei then

00:18:23,620 --> 00:18:28,120
the local time would be unchanged so

00:18:26,680 --> 00:18:30,190
this can be useful for various things

00:18:28,120 --> 00:18:32,200
also no leap seconds for these time

00:18:30,190 --> 00:18:35,830
zones because time zone leave seconds

00:18:32,200 --> 00:18:37,060
are fixed to UTC so without knowing what

00:18:35,830 --> 00:18:39,610
time zone you're in we can't do leap

00:18:37,060 --> 00:18:41,260
seconds this can be useful if you just

00:18:39,610 --> 00:18:43,090
don't want to think about time zones or

00:18:41,260 --> 00:18:45,700
leap seconds at all just make all your

00:18:43,090 --> 00:18:47,800
daytime floating you don't have to think

00:18:45,700 --> 00:18:50,710
about it this is you know which is fine

00:18:47,800 --> 00:18:52,120
if all your times are in just one time

00:18:50,710 --> 00:18:56,440
zone and you never need to worry about

00:18:52,120 --> 00:18:58,630
converting to another so yeah so we make

00:18:56,440 --> 00:19:00,910
daytime object set the time zone to

00:18:58,630 --> 00:19:02,710
floating then we set the time zone later

00:19:00,910 --> 00:19:05,050
the local time is unchanged now if we

00:19:02,710 --> 00:19:07,330
set the time zone again to some non

00:19:05,050 --> 00:19:09,910
floating zone the local time with change

00:19:07,330 --> 00:19:12,390
if we set it back to floating then of

00:19:09,910 --> 00:19:15,460
course the local time remains unchanged

00:19:12,390 --> 00:19:16,720
so that all makes sense by the way do

00:19:15,460 --> 00:19:18,340
feel free to just interrupt with

00:19:16,720 --> 00:19:20,080
questions it's not just William it gets

00:19:18,340 --> 00:19:22,740
too but of course it's why you put will

00:19:20,080 --> 00:19:22,740
yeah go ahead

00:19:30,820 --> 00:19:36,830
so the question was if I want to change

00:19:34,400 --> 00:19:38,810
the time zone for daytime object without

00:19:36,830 --> 00:19:41,150
changing the local time and it is

00:19:38,810 --> 00:19:43,310
currently in a real time zone a non

00:19:41,150 --> 00:19:45,500
floating zone when I just change it to

00:19:43,310 --> 00:19:47,000
floating and then as an intermediate

00:19:45,500 --> 00:19:48,790
step and then to the other time zone the

00:19:47,000 --> 00:19:55,220
answer is yes that will work just fine

00:19:48,790 --> 00:19:56,390
another question ok what's the

00:19:55,220 --> 00:19:57,620
difference between floating and

00:19:56,390 --> 00:20:02,210
Greenwich ok first of all there's no

00:19:57,620 --> 00:20:05,110
Greenwich it's UTC now or Europe London

00:20:02,210 --> 00:20:07,730
which are actually two different things

00:20:05,110 --> 00:20:10,760
so yeah greenwich mean time was the old

00:20:07,730 --> 00:20:13,520
name for UTC before the whole agreement

00:20:10,760 --> 00:20:16,780
that came up with the UTC acronym so

00:20:13,520 --> 00:20:21,590
floating has no relationship to UCC

00:20:16,780 --> 00:20:25,310
greenwich or UTC time zone is plus 0

00:20:21,590 --> 00:20:28,370
hours from UTC so if the daytime object

00:20:25,310 --> 00:20:30,530
is set to the UTC time zone and then say

00:20:28,370 --> 00:20:32,420
you said it to American New York that's

00:20:30,530 --> 00:20:36,170
going to subtract four hours from the

00:20:32,420 --> 00:20:40,070
local time well right now because we're

00:20:36,170 --> 00:20:41,630
in DST whereas if it was floating and

00:20:40,070 --> 00:20:45,590
then you said it John American New York

00:20:41,630 --> 00:20:46,850
the local time just is untouched so yeah

00:20:45,590 --> 00:20:49,580
they're not they're definitely not

00:20:46,850 --> 00:20:51,530
interchangeable although keeping

00:20:49,580 --> 00:20:53,270
everything in UTC is also a perfectly

00:20:51,530 --> 00:20:55,840
valid approach to dealing with time

00:20:53,270 --> 00:21:00,080
zones I'll talk about that more later

00:20:55,840 --> 00:21:01,700
all right so another content there's

00:21:00,080 --> 00:21:04,250
this thing called the epic and an epic

00:21:01,700 --> 00:21:08,150
is just any arbitrary starting point for

00:21:04,250 --> 00:21:12,130
a calendar the UNIX epoch is this it's

00:21:08,150 --> 00:21:15,800
midnight 1970 January first at UTC

00:21:12,130 --> 00:21:18,190
specifically so with the UNIX epoch we

00:21:15,800 --> 00:21:21,680
count it in seconds since this date time

00:21:18,190 --> 00:21:25,220
now we say it's UTC but it's not really

00:21:21,680 --> 00:21:29,090
POSIX actually skips leap seconds and if

00:21:25,220 --> 00:21:30,860
you were to obsessively update with ntp

00:21:29,090 --> 00:21:33,110
when a leap second was going into effect

00:21:30,860 --> 00:21:36,290
you'd see the very exciting phenomenon

00:21:33,110 --> 00:21:38,220
of two consecutive seconds both labeled

00:21:36,290 --> 00:21:41,250
second 59 on your can

00:21:38,220 --> 00:21:46,289
during that time which I mean the thrill

00:21:41,250 --> 00:21:47,909
would be in hoods so POSIX doesn't

00:21:46,289 --> 00:21:52,440
recognize leap seconds but it kind of

00:21:47,909 --> 00:21:55,500
accounts for them which is very weird so

00:21:52,440 --> 00:21:57,530
it's kind of neither ty nor UTC but it

00:21:55,500 --> 00:22:00,659
basically it follows along with UTC

00:21:57,530 --> 00:22:02,970
closely enough you know it's close

00:22:00,659 --> 00:22:04,110
enough for programming right programming

00:22:02,970 --> 00:22:05,580
is a lot like horseshoes and

00:22:04,110 --> 00:22:09,600
handgrenades we just try to get close

00:22:05,580 --> 00:22:11,490
enough all right so you can calculate

00:22:09,600 --> 00:22:14,820
the epic from a daytime an object so we

00:22:11,490 --> 00:22:16,980
make an arbitrary daytime object and we

00:22:14,820 --> 00:22:20,820
ask for the epic and it prints it out

00:22:16,980 --> 00:22:23,429
very straightforward you can of course

00:22:20,820 --> 00:22:25,110
also construct a daytime object from an

00:22:23,429 --> 00:22:27,179
epic there's a method called new from

00:22:25,110 --> 00:22:28,830
epic you pass it in the app pack and

00:22:27,179 --> 00:22:32,570
then you get a daytime object so you can

00:22:28,830 --> 00:22:39,419
go back and forth so there's also a why

00:22:32,570 --> 00:22:41,700
2038 k problem which is going to happen

00:22:39,419 --> 00:22:44,700
well in your 2038 at some point in the

00:22:41,700 --> 00:22:47,700
middle year or so Oh No be any of the

00:22:44,700 --> 00:22:50,460
year so the epics not going to fit in a

00:22:47,700 --> 00:22:53,610
32-bit integer at that point so the

00:22:50,460 --> 00:22:57,090
apics on unix systems are represented as

00:22:53,610 --> 00:23:00,510
signed 32-bit integers at least on

00:22:57,090 --> 00:23:02,190
32-bit systems so you might think that's

00:23:00,510 --> 00:23:03,990
not such a problem but the thing is if

00:23:02,190 --> 00:23:06,480
you're using epics to calculate

00:23:03,990 --> 00:23:08,070
mortgages on a 32-bit system well last

00:23:06,480 --> 00:23:10,980
year you were already screwed in fact

00:23:08,070 --> 00:23:13,320
you were screwed in 2008 of course

00:23:10,980 --> 00:23:14,640
nowadays most systems that most new

00:23:13,320 --> 00:23:17,490
systems people are setting up are

00:23:14,640 --> 00:23:21,090
probably 64-bit they use a 64-bit epic

00:23:17,490 --> 00:23:23,330
as a Perl 5 12 / always uses a 64-bit

00:23:21,090 --> 00:23:25,770
epic internally which is very nice

00:23:23,330 --> 00:23:27,870
really this is probably more of an issue

00:23:25,770 --> 00:23:29,610
for potentially like embedded systems

00:23:27,870 --> 00:23:32,730
which will probably continue to be 32

00:23:29,610 --> 00:23:34,830
bit at least for a while and you know

00:23:32,730 --> 00:23:36,390
just something to remember in the back

00:23:34,830 --> 00:23:37,980
of your head if you're on a 32-bit

00:23:36,390 --> 00:23:43,620
system be careful about how you use

00:23:37,980 --> 00:23:44,909
epochs so the date-time ecosystem is

00:23:43,620 --> 00:23:46,799
pretty large has a lot of types of

00:23:44,909 --> 00:23:48,659
modules there's modules wicket which can

00:23:46,799 --> 00:23:52,080
take a daytime object and format it

00:23:48,659 --> 00:23:57,179
according to some format like ISO 86

00:23:52,080 --> 00:24:02,279
one or my sequel or HTTP format or this

00:23:57,179 --> 00:24:04,080
male RFC 2822 format there's modules

00:24:02,279 --> 00:24:05,640
which represent other calendars we saw

00:24:04,080 --> 00:24:10,760
Chinese earlier I believe there's also

00:24:05,640 --> 00:24:10,760
Islamic and Hebrew and Japanese and

00:24:11,750 --> 00:24:15,870
discordian and a few others so there's

00:24:14,190 --> 00:24:17,220
like both made up calendar well all

00:24:15,870 --> 00:24:18,600
calendars are made up I think there are

00:24:17,220 --> 00:24:21,630
also might even been some fictional

00:24:18,600 --> 00:24:24,330
calendars there's modules for

00:24:21,630 --> 00:24:25,440
representing events in recurrences so

00:24:24,330 --> 00:24:28,679
you could add there's a module for

00:24:25,440 --> 00:24:31,139
calculating like easter there's modules

00:24:28,679 --> 00:24:34,970
for representing the concept of weekly

00:24:31,139 --> 00:24:37,679
recurring events or daily or every

00:24:34,970 --> 00:24:39,240
whatever you want to do there's also a

00:24:37,679 --> 00:24:40,889
bunch of modules in the daytime X

00:24:39,240 --> 00:24:42,659
namespace where I asked people to put

00:24:40,889 --> 00:24:45,450
stuff that doesn't fit in these other

00:24:42,659 --> 00:24:49,260
categories so there's a daytime x module

00:24:45,450 --> 00:24:53,399
for doing fickle damn I don't understand

00:24:49,260 --> 00:24:55,730
I don't work in the fiscal world so it's

00:24:53,399 --> 00:24:58,740
got something to do with quarters and

00:24:55,730 --> 00:24:59,970
stuff anyway if you work in that world

00:24:58,740 --> 00:25:03,149
you might want to take a look at it

00:24:59,970 --> 00:25:05,340
might be useful to you so yeah there's a

00:25:03,149 --> 00:25:09,450
huge ecosystem of modules that all

00:25:05,340 --> 00:25:13,110
interoperate with well which i think is

00:25:09,450 --> 00:25:15,090
very useful there's you need to solve

00:25:13,110 --> 00:25:16,889
there might be a solution for you 011

00:25:15,090 --> 00:25:18,990
module I do want to highlight is the

00:25:16,889 --> 00:25:20,820
take time set distribution which is

00:25:18,990 --> 00:25:24,120
really useful let's we represent a set

00:25:20,820 --> 00:25:26,370
of day times as well as time spans so

00:25:24,120 --> 00:25:28,710
from like you know midnight to the end

00:25:26,370 --> 00:25:31,350
of the day or a whole week you can also

00:25:28,710 --> 00:25:33,600
have sets spans and then you can say oh

00:25:31,350 --> 00:25:35,730
it is this day time there's this

00:25:33,600 --> 00:25:37,529
individual instance of a daytime part of

00:25:35,730 --> 00:25:42,600
this set or part of the span which can

00:25:37,529 --> 00:25:43,500
be really useful all right so I want to

00:25:42,600 --> 00:25:46,350
talk about just kind of my

00:25:43,500 --> 00:25:48,990
recommendations and also mistakes I made

00:25:46,350 --> 00:25:52,769
with daytime I should point out so yeah

00:25:48,990 --> 00:25:54,809
I i wrote daytime I don't know 13 years

00:25:52,769 --> 00:25:58,409
ago now I forget when the first release

00:25:54,809 --> 00:26:01,799
was I was young I was naive optimistic

00:25:58,409 --> 00:26:04,860
foolish with joy in my heart and that's

00:26:01,799 --> 00:26:05,850
all gone that's all God now so if I

00:26:04,860 --> 00:26:08,580
could do it all over

00:26:05,850 --> 00:26:11,539
and I do it better but there's a lot of

00:26:08,580 --> 00:26:13,890
you just have to deal with my mistakes

00:26:11,539 --> 00:26:15,390
at some point somebody might really

00:26:13,890 --> 00:26:17,039
something that's better in fact there's

00:26:15,390 --> 00:26:21,510
a module somebody pointed me on Sipan

00:26:17,039 --> 00:26:23,580
called time moment which is largely

00:26:21,510 --> 00:26:26,309
datetime compatible in some of the basic

00:26:23,580 --> 00:26:29,760
ways and fixes some of the api is

00:26:26,309 --> 00:26:31,080
another way so might be useful so first

00:26:29,760 --> 00:26:33,720
thing I would have done is make a date

00:26:31,080 --> 00:26:35,010
time date class so if you just want to

00:26:33,720 --> 00:26:37,590
deal with dates you wouldn't also have

00:26:35,010 --> 00:26:40,049
to think about times you can kind of

00:26:37,590 --> 00:26:41,909
simulate that by using just the floating

00:26:40,049 --> 00:26:43,980
time zone for all your date time objects

00:26:41,909 --> 00:26:46,140
and then using these two methods for

00:26:43,980 --> 00:26:49,230
math Delta M D which is months and days

00:26:46,140 --> 00:26:51,450
or delta days so if you use those for

00:26:49,230 --> 00:26:52,950
math you'll never touch the time portion

00:26:51,450 --> 00:26:59,010
of the day time and you can effectively

00:26:52,950 --> 00:27:01,679
just ignore it there's also another

00:26:59,010 --> 00:27:03,120
stupid piece of the API so let's say we

00:27:01,679 --> 00:27:05,909
want to figure out the difference in

00:27:03,120 --> 00:27:09,030
days between duty times so we make our

00:27:05,909 --> 00:27:11,340
two day times we call the Dell today's

00:27:09,030 --> 00:27:13,890
method which returns a day time duration

00:27:11,340 --> 00:27:15,840
object if you want to actually get the

00:27:13,890 --> 00:27:17,909
the days out you have to use this stupid

00:27:15,840 --> 00:27:19,590
in units method it does have a days

00:27:17,909 --> 00:27:22,740
method but that'll give you something

00:27:19,590 --> 00:27:24,750
like six the reason being that it also

00:27:22,740 --> 00:27:27,900
has a week's method and if you ask for

00:27:24,750 --> 00:27:30,450
the weeks it'll give you that as well

00:27:27,900 --> 00:27:34,490
and it also has a year's method so it

00:27:30,450 --> 00:27:37,380
it's just kind of confusing and stupid

00:27:34,490 --> 00:27:39,840
so just know that if you want to get a

00:27:37,380 --> 00:27:45,780
specific unit out you have to use in

00:27:39,840 --> 00:27:52,020
units sorry so yeah the API is really

00:27:45,780 --> 00:27:56,700
stupid alright any questions on my

00:27:52,020 --> 00:27:58,830
stupidity but there's more so yeah so if

00:27:56,700 --> 00:28:01,289
if you do delta days and then you call

00:27:58,830 --> 00:28:02,600
days on it gives six but then you ask

00:28:01,289 --> 00:28:05,520
for the weeks and it tells you there's

00:28:02,600 --> 00:28:07,200
2060 you could do the math yourself you

00:28:05,520 --> 00:28:11,340
could just call in units to get the

00:28:07,200 --> 00:28:13,590
answer you really wanted all right let's

00:28:11,340 --> 00:28:17,370
talk about daytime math it's an really

00:28:13,590 --> 00:28:19,410
insane so one question you might want to

00:28:17,370 --> 00:28:23,280
figure out is how long is a month

00:28:19,410 --> 00:28:25,320
it gets really confusing so you make

00:28:23,280 --> 00:28:28,800
some arbitrary daytime let's say for

00:28:25,320 --> 00:28:31,440
2009 for brewery 24 Barry first then we

00:28:28,800 --> 00:28:34,350
add 28 days network march first we have

00:28:31,440 --> 00:28:35,820
another 28 days now or march 29 I think

00:28:34,350 --> 00:28:37,500
that all makes sense to you why that

00:28:35,820 --> 00:28:40,140
would happen because February's 28 days

00:28:37,500 --> 00:28:44,940
long but March is 30 or 31 I can't

00:28:40,140 --> 00:28:48,230
remember the song that tells you so okay

00:28:44,940 --> 00:28:51,480
let's add a month instead of 28 days so

00:28:48,230 --> 00:28:54,330
how about we add a month to january

00:28:51,480 --> 00:28:55,920
thirtieth well if we do that we end up

00:28:54,330 --> 00:28:58,410
with March second then we add another

00:28:55,920 --> 00:29:02,820
month and we're in April second why does

00:28:58,410 --> 00:29:03,870
that happen okay let's try this again so

00:29:02,820 --> 00:29:05,700
we're going to add a month but we're

00:29:03,870 --> 00:29:08,190
going to set the end of month parameter

00:29:05,700 --> 00:29:12,270
which tells date time duration how to

00:29:08,190 --> 00:29:14,310
handle a month when you add one or more

00:29:12,270 --> 00:29:16,890
months and it does some sort of wrapping

00:29:14,310 --> 00:29:19,410
so if we set it to limit it won't go

00:29:16,890 --> 00:29:21,990
past the end of the month so now we add

00:29:19,410 --> 00:29:24,000
a month to january thirtieth we're in

00:29:21,990 --> 00:29:27,660
February 28th of course now we add

00:29:24,000 --> 00:29:29,910
another month and we're at March 28th

00:29:27,660 --> 00:29:32,340
but maybe you really wanted to be on the

00:29:29,910 --> 00:29:34,160
last day of March when you added that so

00:29:32,340 --> 00:29:37,500
there's actually another parameter

00:29:34,160 --> 00:29:39,000
called preserve I believe that if you

00:29:37,500 --> 00:29:40,350
add a month and you're on the last day

00:29:39,000 --> 00:29:42,330
it will always take to the last day of

00:29:40,350 --> 00:29:44,460
the next month no money no matter how

00:29:42,330 --> 00:29:45,660
many days a way that is and you're

00:29:44,460 --> 00:29:47,280
thinking well this is really horrible

00:29:45,660 --> 00:29:49,860
why don't you just make this smarter the

00:29:47,280 --> 00:29:51,810
problem is one person smarter is another

00:29:49,860 --> 00:29:54,000
person stupider because you have to

00:29:51,810 --> 00:29:55,830
actually know what you want when you do

00:29:54,000 --> 00:29:59,070
date time at and that's kind of the

00:29:55,830 --> 00:30:01,050
theme of a lot of these slides there's

00:29:59,070 --> 00:30:03,630
no set of defaults I could have picked

00:30:01,050 --> 00:30:05,190
that is the right set of defaults the

00:30:03,630 --> 00:30:06,600
right side of defaults is the one that

00:30:05,190 --> 00:30:10,230
works for your app and you're going to

00:30:06,600 --> 00:30:12,090
have to figure that out so yeah

00:30:10,230 --> 00:30:14,460
unfortunately this is one of the things

00:30:12,090 --> 00:30:16,230
I hate most about daytime is there's

00:30:14,460 --> 00:30:17,790
nothing like to do that would prevent

00:30:16,230 --> 00:30:20,280
you from having to think about all these

00:30:17,790 --> 00:30:21,930
things whatever a set of defaults I

00:30:20,280 --> 00:30:23,580
picked will work for some people and not

00:30:21,930 --> 00:30:25,740
work for others so you're just going to

00:30:23,580 --> 00:30:30,180
have to oh my god I hate to say this

00:30:25,740 --> 00:30:31,800
read the documentation I know I know

00:30:30,180 --> 00:30:32,730
that's a lot to ask but you can have to

00:30:31,800 --> 00:30:34,799
read the documentation

00:30:32,730 --> 00:30:37,620
figure out how this works and there are

00:30:34,799 --> 00:30:39,690
there's a lot in the docs about all the

00:30:37,620 --> 00:30:43,200
kind of caveats for daytime math that

00:30:39,690 --> 00:30:45,360
you might have to deal with this is

00:30:43,200 --> 00:30:50,480
another fun thing is is you try to

00:30:45,360 --> 00:30:55,830
figure out how long a day is so we make

00:30:50,480 --> 00:30:59,669
2012 it's November fourth the hour is

00:30:55,830 --> 00:31:01,950
midnight the streets are cold one man no

00:30:59,669 --> 00:31:04,770
wait sorry something else all right so

00:31:01,950 --> 00:31:07,230
it's midnight we add an hour logically

00:31:04,770 --> 00:31:10,370
this makes sense now it's 1am then we

00:31:07,230 --> 00:31:12,630
have another hour and it's still one am

00:31:10,370 --> 00:31:14,910
okay so what that happened well there's

00:31:12,630 --> 00:31:17,400
a DST transition where the local time

00:31:14,910 --> 00:31:19,890
goes back an hour so that's the second

00:31:17,400 --> 00:31:22,380
one am of the night so this day is 25

00:31:19,890 --> 00:31:24,390
hours long least on the local clock of

00:31:22,380 --> 00:31:26,190
course if you do this all in UTC it's

00:31:24,390 --> 00:31:27,690
always 24 hours long you don't have to

00:31:26,190 --> 00:31:29,700
worry about these problems but sometimes

00:31:27,690 --> 00:31:41,370
you you need to do math using the local

00:31:29,700 --> 00:31:42,570
time yeah so the question was I'm not

00:31:41,370 --> 00:31:44,460
sure I understood the question but how

00:31:42,570 --> 00:31:51,330
does it know which UTC it is when you

00:31:44,460 --> 00:31:54,540
add the hour ok so the UTC time or date

00:31:51,330 --> 00:31:57,750
time for the object when it's created is

00:31:54,540 --> 00:32:00,540
is completely unambiguous at November

00:31:57,750 --> 00:32:05,940
fourth in midnight we know what the time

00:32:00,540 --> 00:32:09,240
zone is we know where it minus 6 I can

00:32:05,940 --> 00:32:13,590
never remember these we r minus 6 and

00:32:09,240 --> 00:32:17,070
then at one a.m. local time when it the

00:32:13,590 --> 00:32:20,669
clock goes from 1 59 59 22 it jumps back

00:32:17,070 --> 00:32:25,140
an hour and where it no we remind us

00:32:20,669 --> 00:32:27,120
five then we might went to my sex if you

00:32:25,140 --> 00:32:29,130
create the object at 1am I think it

00:32:27,120 --> 00:32:32,160
always picks the either earliest or

00:32:29,130 --> 00:32:33,510
latest UTC time it so when we yeah when

00:32:32,160 --> 00:32:36,110
create an object which would be

00:32:33,510 --> 00:32:38,490
ambiguous the docks tell you it'll do

00:32:36,110 --> 00:32:40,260
something it does the same thing every

00:32:38,490 --> 00:32:41,370
time it might not be what you want but

00:32:40,260 --> 00:32:44,700
at least it's the same thing every time

00:32:41,370 --> 00:32:45,940
you could of course create it in UTC and

00:32:44,700 --> 00:32:50,950
the convert it to the local

00:32:45,940 --> 00:32:53,769
time zone so yeah again there's no way

00:32:50,950 --> 00:32:57,850
to work around this this is just one of

00:32:53,769 --> 00:33:02,470
the problems with day times this is

00:32:57,850 --> 00:33:06,250
another fun problem so it's a March 11

00:33:02,470 --> 00:33:09,100
at midnight and 2012 we had an hour it's

00:33:06,250 --> 00:33:12,070
1am we add another hour it's 3am so on

00:33:09,100 --> 00:33:14,799
this particular DST transition we jump

00:33:12,070 --> 00:33:19,450
for it in our so there is no local 222

00:33:14,799 --> 00:33:22,179
59 59 that just doesn't exist which has

00:33:19,450 --> 00:33:23,860
really fun implications for those of you

00:33:22,179 --> 00:33:26,500
doing daytime ass so let's say we create

00:33:23,860 --> 00:33:29,529
the day before march 10th at 2am that

00:33:26,500 --> 00:33:31,000
time exists then we add a day it's going

00:33:29,529 --> 00:33:32,950
to throw an exception because there is

00:33:31,000 --> 00:33:36,730
no 2 a.m. and i don't know what the hell

00:33:32,950 --> 00:33:38,590
you want me to do so if you want to work

00:33:36,730 --> 00:33:40,330
around this i think i'll talk about this

00:33:38,590 --> 00:33:43,480
later you can just do everything in UTC

00:33:40,330 --> 00:33:46,029
which is a reasonable approach also if

00:33:43,480 --> 00:33:48,669
you try to create this date time of

00:33:46,029 --> 00:33:51,220
March 11th 2 a.m. you'll get with

00:33:48,669 --> 00:33:52,899
America's Chicago as the time zone you

00:33:51,220 --> 00:33:55,750
will get an exception because it just

00:33:52,899 --> 00:33:57,490
says this is not a valid it's exactly

00:33:55,750 --> 00:34:04,960
that invalid local time for date and

00:33:57,490 --> 00:34:07,120
time so yeah questions so what I do in

00:34:04,960 --> 00:34:10,030
the next slide so the question was if

00:34:07,120 --> 00:34:12,849
instead of one day I had 24 hours what

00:34:10,030 --> 00:34:14,409
happens yeah that works fine so you can

00:34:12,849 --> 00:34:16,629
kind of think of the math is kind of

00:34:14,409 --> 00:34:19,359
there's a bunch of counters of separate

00:34:16,629 --> 00:34:21,220
units so if we roll the day counter for

00:34:19,359 --> 00:34:23,379
it and the time remains unchanged that's

00:34:21,220 --> 00:34:26,800
broken but if we roll the time counter

00:34:23,379 --> 00:34:29,349
the our counter forward 24 times then

00:34:26,800 --> 00:34:31,119
the last the second the last is one and

00:34:29,349 --> 00:34:33,730
then we roll it forward again and it's 3

00:34:31,119 --> 00:34:37,720
and it works fine so yeah you can add 24

00:34:33,730 --> 00:34:39,940
hours but then the local time changes so

00:34:37,720 --> 00:34:41,740
again you have to decide what you want

00:34:39,940 --> 00:34:43,869
to do to what we want to do local math

00:34:41,740 --> 00:34:46,450
ok then I'm always going to add 24 hours

00:34:43,869 --> 00:34:48,730
instead of a day and know that the local

00:34:46,450 --> 00:34:51,129
times are going to change the local hour

00:34:48,730 --> 00:34:53,409
is going to change at some point or I'm

00:34:51,129 --> 00:34:57,330
going to convert to UTC add my days and

00:34:53,409 --> 00:35:03,700
then convert back you just have to pick

00:34:57,330 --> 00:35:05,470
also the order of math matters so for a

00:35:03,700 --> 00:35:07,060
reason I no longer remember because I

00:35:05,470 --> 00:35:08,830
wrote this code so long ago I picked a

00:35:07,060 --> 00:35:12,130
fairly arbitrary order which is

00:35:08,830 --> 00:35:15,190
documented so if you add months and days

00:35:12,130 --> 00:35:18,190
together I believe yeah it adds the

00:35:15,190 --> 00:35:20,530
day's first and then the months so we

00:35:18,190 --> 00:35:23,440
start with februari 28th 2011 we add one

00:35:20,530 --> 00:35:25,450
day we get march first we had a month we

00:35:23,440 --> 00:35:28,330
get April first if we did the other way

00:35:25,450 --> 00:35:30,130
and added the month first we'd get March

00:35:28,330 --> 00:35:33,070
twenty eighth and then we add a day and

00:35:30,130 --> 00:35:34,960
get March 29th so the order of

00:35:33,070 --> 00:35:38,550
operations matters and this is well

00:35:34,960 --> 00:35:40,960
documented in the docs the solution

00:35:38,550 --> 00:35:43,330
should put the solutions on these slides

00:35:40,960 --> 00:35:45,070
to the solution is if you want to

00:35:43,330 --> 00:35:47,110
control the order you can just call add

00:35:45,070 --> 00:35:52,720
multiple times in a row so you can

00:35:47,110 --> 00:35:55,540
decide which unit gets added first all

00:35:52,720 --> 00:35:58,570
right so some more gotchas so the math

00:35:55,540 --> 00:36:00,820
is not reversible so if we i subtract

00:35:58,570 --> 00:36:02,980
two day x and then at a duration and

00:36:00,820 --> 00:36:05,980
then i add that duration back to the

00:36:02,980 --> 00:36:08,950
original to the second day time i might

00:36:05,980 --> 00:36:12,130
get a different day time object than I

00:36:08,950 --> 00:36:13,720
started with this is explained at great

00:36:12,130 --> 00:36:16,000
length in the docs if you want to see

00:36:13,720 --> 00:36:18,040
the cases where this can happen again it

00:36:16,000 --> 00:36:23,290
has to do with DST changes just being

00:36:18,040 --> 00:36:26,620
insane so also if we subtract a DST date

00:36:23,290 --> 00:36:30,760
in a time zone or you know Don DST from

00:36:26,620 --> 00:36:33,130
DC in the same time zone it's very

00:36:30,760 --> 00:36:36,280
arbitrary what this should produce does

00:36:33,130 --> 00:36:40,360
the duration include the DST changes our

00:36:36,280 --> 00:36:43,600
does it not again this is all defined in

00:36:40,360 --> 00:36:45,430
the docs as to what it will do and then

00:36:43,600 --> 00:36:48,990
leap years in leap seconds can also

00:36:45,430 --> 00:36:52,660
produce occasionally surprising results

00:36:48,990 --> 00:36:56,500
so oh okay did you talk about solution

00:36:52,660 --> 00:36:59,650
that's good so oh no sorry this is

00:36:56,500 --> 00:37:03,280
something else so when you want to do

00:36:59,650 --> 00:37:08,869
math always use the mathy method so I've

00:37:03,280 --> 00:37:12,140
add subtract Delta days blah blah okay

00:37:08,869 --> 00:37:13,940
do not ever write something like I see

00:37:12,140 --> 00:37:15,410
on that second bullet point I somebody

00:37:13,940 --> 00:37:19,579
wrote me email is like hey this is

00:37:15,410 --> 00:37:23,059
breaking so if you do this you're very

00:37:19,579 --> 00:37:26,299
very easily going to end up with invalid

00:37:23,059 --> 00:37:28,249
local times so this is not how you do do

00:37:26,299 --> 00:37:30,950
math datetime do math for you in

00:37:28,249 --> 00:37:32,599
turtling of course you can still end up

00:37:30,950 --> 00:37:34,039
with in valley local times but you're

00:37:32,599 --> 00:37:36,400
more likely to make a mess doing this

00:37:34,039 --> 00:37:39,230
especially if you do you know this way

00:37:36,400 --> 00:37:41,480
if you did like you can't even do it

00:37:39,230 --> 00:37:43,400
with ours so I don't know why somebody

00:37:41,480 --> 00:37:47,390
thought this was the way to do math but

00:37:43,400 --> 00:37:49,819
it's not use the floating time zone if

00:37:47,390 --> 00:37:52,579
you can if you don't care about date

00:37:49,819 --> 00:37:55,579
time zones then using the floating time

00:37:52,579 --> 00:37:56,779
zone will avoid about ninety percent of

00:37:55,579 --> 00:37:58,640
the problems I just mentioned because

00:37:56,779 --> 00:38:02,480
they pretty much most of the problems

00:37:58,640 --> 00:38:05,210
have to do with DST if you can't use the

00:38:02,480 --> 00:38:07,970
floating time zone then do math and DST

00:38:05,210 --> 00:38:10,309
and UTC so just convert the object to

00:38:07,970 --> 00:38:13,099
UTC do your math convert back to the

00:38:10,309 --> 00:38:14,960
local timezone you'll never end up with

00:38:13,099 --> 00:38:17,299
that exception about invalid local times

00:38:14,960 --> 00:38:19,640
and in fact our internal wrapper that we

00:38:17,299 --> 00:38:21,410
use at work is kind of a wrap around a

00:38:19,640 --> 00:38:23,089
time and one of the things it does is

00:38:21,410 --> 00:38:25,279
whenever you call any sort of math

00:38:23,089 --> 00:38:27,289
method internally converts the object to

00:38:25,279 --> 00:38:29,299
UTC does the math and then converts it

00:38:27,289 --> 00:38:30,499
back to the original time zone which is

00:38:29,299 --> 00:38:32,749
the you know of course a little slower

00:38:30,499 --> 00:38:35,509
but also means we don't have to catch

00:38:32,749 --> 00:38:37,809
exceptions when we do add or subtract or

00:38:35,509 --> 00:38:37,809
anything

00:38:40,290 --> 00:38:46,420
all right Oh so I think I already

00:38:44,380 --> 00:38:49,480
covered this oh and I'll answer the

00:38:46,420 --> 00:38:52,090
question about what is daytime pick when

00:38:49,480 --> 00:38:55,930
there's an ambiguous local time so it

00:38:52,090 --> 00:38:59,880
makes little latest UTC time so whoever

00:38:55,930 --> 00:39:02,530
asked that or mention that there you go

00:38:59,880 --> 00:39:04,720
so I also have some recommendations for

00:39:02,530 --> 00:39:06,730
kind of storage and presentation so

00:39:04,720 --> 00:39:10,060
whenever possible you should store

00:39:06,730 --> 00:39:14,380
either a floating day time or store the

00:39:10,060 --> 00:39:16,660
day time in UTC if you can you can also

00:39:14,380 --> 00:39:19,950
store them as a date time plus time zone

00:39:16,660 --> 00:39:22,270
if that's a type in your database

00:39:19,950 --> 00:39:24,910
however that's still not perfect the

00:39:22,270 --> 00:39:27,070
problem is postgres stores the time zone

00:39:24,910 --> 00:39:31,360
just as an offset it doesn't store the

00:39:27,070 --> 00:39:34,330
Olson name of the time zone so there are

00:39:31,360 --> 00:39:36,760
plenty of time zones that are minus five

00:39:34,330 --> 00:39:38,860
hours in fact both america new york and

00:39:36,760 --> 00:39:40,530
America Chicago can be minus five hours

00:39:38,860 --> 00:39:44,140
from UTC at different times of the year

00:39:40,530 --> 00:39:45,670
so if you're going to store if you need

00:39:44,140 --> 00:39:48,220
to sort of the local timezone you have

00:39:45,670 --> 00:39:49,630
to also store that name if you want to

00:39:48,220 --> 00:39:53,740
pull it out and present it to the user

00:39:49,630 --> 00:39:55,570
in the right way or recommend not

00:39:53,740 --> 00:39:59,710
storing an epic and not operating on

00:39:55,570 --> 00:40:01,510
Epix it's it's likely to lead to you to

00:39:59,710 --> 00:40:04,630
want to do math on the epic which is

00:40:01,510 --> 00:40:06,400
really not a great idea just store the

00:40:04,630 --> 00:40:09,820
day time if you're using a real database

00:40:06,400 --> 00:40:11,470
like postgres and not my sequel then

00:40:09,820 --> 00:40:13,360
postgres actually has pretty good

00:40:11,470 --> 00:40:17,140
support for dates and times my sequel of

00:40:13,360 --> 00:40:18,610
course thinks 0 your 010 day 0 is a date

00:40:17,140 --> 00:40:25,230
so I don't know what to do with my

00:40:18,610 --> 00:40:28,630
sequel other than shoot it but anyway so

00:40:25,230 --> 00:40:30,760
you if you're storing everything in UTC

00:40:28,630 --> 00:40:33,250
like I'm recommending you could also

00:40:30,760 --> 00:40:35,710
store the users pervert local timezone

00:40:33,250 --> 00:40:38,560
so what I suggest is just convert to the

00:40:35,710 --> 00:40:41,020
local timezone on presentation to the

00:40:38,560 --> 00:40:42,880
users so think of time zones less as

00:40:41,020 --> 00:40:45,070
things that you store with the date time

00:40:42,880 --> 00:40:47,350
and more as things that you present to

00:40:45,070 --> 00:40:49,120
users now this doesn't work for

00:40:47,350 --> 00:40:51,100
everything if you're doing a multi-user

00:40:49,120 --> 00:40:53,210
calendar system with people in multiple

00:40:51,100 --> 00:40:55,190
time zones you're pretty much stuck

00:40:53,210 --> 00:40:59,960
storing the time zone that they created

00:40:55,190 --> 00:41:01,250
the appointment at but if you're not

00:40:59,960 --> 00:41:02,630
doing something that complicated you

00:41:01,250 --> 00:41:06,050
might be able to get away with just

00:41:02,630 --> 00:41:08,210
using time zones for presentation never

00:41:06,050 --> 00:41:10,730
to store the day time in the current the

00:41:08,210 --> 00:41:11,780
machines current local timezone I say

00:41:10,730 --> 00:41:14,990
this having done this myself

00:41:11,780 --> 00:41:16,880
embarrassingly enough especially if you

00:41:14,990 --> 00:41:18,680
move to like a different server that

00:41:16,880 --> 00:41:20,630
happens to be in a different local time

00:41:18,680 --> 00:41:23,390
zone you're really going to regret this

00:41:20,630 --> 00:41:26,180
so be explicit about the time zones you

00:41:23,390 --> 00:41:28,220
use if you're using you know something

00:41:26,180 --> 00:41:30,800
like current timestamp are now in your

00:41:28,220 --> 00:41:33,140
database make sure that you're getting a

00:41:30,800 --> 00:41:37,850
UTC time out of it not just whatever the

00:41:33,140 --> 00:41:40,130
the server happens to be set to so all

00:41:37,850 --> 00:41:42,230
right also some performance tricks so

00:41:40,130 --> 00:41:44,570
day time can be a little slow now these

00:41:42,230 --> 00:41:46,970
are my roles of optimization I think

00:41:44,570 --> 00:41:49,760
they're pretty straightforward I wrote

00:41:46,970 --> 00:41:54,110
these for a co-worker of mine who really

00:41:49,760 --> 00:41:56,000
liked to optimize things and would write

00:41:54,110 --> 00:41:58,370
like crazy code because he was like it's

00:41:56,000 --> 00:42:02,480
faster it's like how do you know it's

00:41:58,370 --> 00:42:03,950
faster oh I know okay so yeah these are

00:42:02,480 --> 00:42:05,510
good rules these are not just in time

00:42:03,950 --> 00:42:08,540
specific these are rules you should take

00:42:05,510 --> 00:42:11,090
with you everywhere and nothing them

00:42:08,540 --> 00:42:12,980
against fast code I'm all for things

00:42:11,090 --> 00:42:14,330
going as fast as possible but you should

00:42:12,980 --> 00:42:17,530
not be optimizing when you're writing

00:42:14,330 --> 00:42:20,120
something the first time optimizing Lee

00:42:17,530 --> 00:42:22,190
all right so one very simple

00:42:20,120 --> 00:42:23,930
optimization which you won't do without

00:42:22,190 --> 00:42:25,400
benchmarking profiling first actually

00:42:23,930 --> 00:42:28,100
you can do this anytime it's perfectly

00:42:25,400 --> 00:42:31,520
safe if every time you create a datetime

00:42:28,100 --> 00:42:34,160
object you pass the time zone as a name

00:42:31,520 --> 00:42:35,690
then datetime hat the daytime time zone

00:42:34,160 --> 00:42:37,220
module has to look that up and

00:42:35,690 --> 00:42:38,840
potentially try to load it from Gaius

00:42:37,220 --> 00:42:40,160
crew see that's already loaded and has

00:42:38,840 --> 00:42:42,530
to make sure it's a valid name and all

00:42:40,160 --> 00:42:45,200
this crap what you can do instead is

00:42:42,530 --> 00:42:48,320
create the date-time time zone objects

00:42:45,200 --> 00:42:49,640
separately and then pass that object for

00:42:48,320 --> 00:42:52,250
the time zone parameter so if you're

00:42:49,640 --> 00:42:54,230
always using the same time zone when

00:42:52,250 --> 00:42:57,100
you're creating it whether it be UTC or

00:42:54,230 --> 00:42:59,750
local time or whatever just do this very

00:42:57,100 --> 00:43:01,640
straightforward and simple and

00:42:59,750 --> 00:43:02,990
especially if you're creating thousands

00:43:01,640 --> 00:43:05,740
of daytime objects this can actually

00:43:02,990 --> 00:43:05,740
make a big difference

00:43:05,800 --> 00:43:12,500
the date-time format modules have

00:43:08,510 --> 00:43:15,080
parsers they're like its format as in a

00:43:12,500 --> 00:43:17,360
noun not in as a verb so it handles a

00:43:15,080 --> 00:43:20,840
format so it parses and outputs in that

00:43:17,360 --> 00:43:22,550
format if you're dealing with a lot of

00:43:20,840 --> 00:43:24,500
date times that are all in the same

00:43:22,550 --> 00:43:26,510
format and you know that they always

00:43:24,500 --> 00:43:28,280
come back in the same format you could

00:43:26,510 --> 00:43:30,410
not use a formatter at all because those

00:43:28,280 --> 00:43:32,840
can be a little slower you can just use

00:43:30,410 --> 00:43:34,640
a regex that's perfectly okay if you

00:43:32,840 --> 00:43:37,490
know that you're dealing with good data

00:43:34,640 --> 00:43:39,770
or in the case of my sequel known to be

00:43:37,490 --> 00:43:42,050
bad in a specific way all the time data

00:43:39,770 --> 00:43:44,630
so you don't have to use a formatter

00:43:42,050 --> 00:43:46,460
that said if you're not dealing if

00:43:44,630 --> 00:43:48,530
you're not having to construct thousands

00:43:46,460 --> 00:43:50,870
and thousands of daytime objects at a

00:43:48,530 --> 00:43:53,240
time just use the format or your code

00:43:50,870 --> 00:43:57,170
will read better and will be a little

00:43:53,240 --> 00:43:59,240
more robust against future changes you

00:43:57,170 --> 00:44:02,510
can also turn off validation that day

00:43:59,240 --> 00:44:03,770
time does it internally again you really

00:44:02,510 --> 00:44:07,310
better know that your data is always

00:44:03,770 --> 00:44:10,430
valid so if you do this little magic

00:44:07,310 --> 00:44:13,220
incantation before creating a daytime it

00:44:10,430 --> 00:44:15,350
disables most of what params validate

00:44:13,220 --> 00:44:17,840
does internally params validate is what

00:44:15,350 --> 00:44:19,760
daytime uses to do its validation so

00:44:17,840 --> 00:44:21,230
this is this is an okay strategy again

00:44:19,760 --> 00:44:23,090
if you're creating thousands of day

00:44:21,230 --> 00:44:24,950
times at once this can speed it up

00:44:23,090 --> 00:44:26,780
drastically but you better be damn sure

00:44:24,950 --> 00:44:29,840
that your data is correct because

00:44:26,780 --> 00:44:31,850
daytime will not handle bad data so if

00:44:29,840 --> 00:44:33,650
you set the data 32 and you turn this

00:44:31,850 --> 00:44:36,680
off I don't know what's going to happen

00:44:33,650 --> 00:44:39,200
something very wrong and it will it will

00:44:36,680 --> 00:44:41,690
go wrong without telling you so that's

00:44:39,200 --> 00:44:43,430
why i say be very careful all right

00:44:41,690 --> 00:44:48,850
that's the end of the presentation does

00:44:43,430 --> 00:44:48,850
anyone have any questions for me yes

00:44:52,450 --> 00:44:58,490
so the question was what's the

00:44:54,710 --> 00:45:00,319
alternative to leave seconds well what's

00:44:58,490 --> 00:45:02,059
actually and I'm not making this up

00:45:00,319 --> 00:45:04,220
which it what has been discussed is to

00:45:02,059 --> 00:45:07,339
just change it to leap minutes or hours

00:45:04,220 --> 00:45:08,750
so if it was a leap hour we probably

00:45:07,339 --> 00:45:12,140
wouldn't have to deal with it for

00:45:08,750 --> 00:45:13,700
something like seven eight nine thousand

00:45:12,140 --> 00:45:15,619
years which is fine with me because I

00:45:13,700 --> 00:45:17,630
suspect there's a very good chance i'll

00:45:15,619 --> 00:45:20,599
be dead by the time i leave power comes

00:45:17,630 --> 00:45:24,079
up even with a leap minute we've only

00:45:20,599 --> 00:45:26,210
had 34 leap seconds since the I think

00:45:24,079 --> 00:45:31,549
when whenever UTC started in the early

00:45:26,210 --> 00:45:35,809
70s so we're not going to get to 3600

00:45:31,549 --> 00:45:38,529
leap seconds any times or sorry 60 leap

00:45:35,809 --> 00:45:41,869
seconds anytime soon or another 60

00:45:38,529 --> 00:45:43,910
probably wouldn't happen in my lifetime

00:45:41,869 --> 00:45:45,829
so really I just want to not have to

00:45:43,910 --> 00:45:47,000
think about it ever again I don't care

00:45:45,829 --> 00:45:49,309
what other people have to deal with

00:45:47,000 --> 00:45:51,020
programmers of the future I don't have

00:45:49,309 --> 00:45:53,680
any kids I have no plans to have kids so

00:45:51,020 --> 00:45:57,970
screw the children that's what I say

00:45:53,680 --> 00:46:00,970
they can deal with the lead minutes see

00:45:57,970 --> 00:46:00,970
ya

00:46:05,670 --> 00:46:11,140
yeah so the question was worst case with

00:46:08,290 --> 00:46:13,180
Lee Bowers is still not as bad as a DST

00:46:11,140 --> 00:46:15,670
change yeah at least it happens a lot

00:46:13,180 --> 00:46:20,290
less often I mean the other option is

00:46:15,670 --> 00:46:24,190
just to give up and not sink midnight or

00:46:20,290 --> 00:46:27,610
something I the drift is so incredibly

00:46:24,190 --> 00:46:31,830
slow that I'm not sure how much it

00:46:27,610 --> 00:46:31,830
matters yeah question

00:46:41,660 --> 00:46:52,170
mm-hmm so he called a method Delta Y md

00:46:50,190 --> 00:47:00,870
hms and it failed I don't know I'd have

00:46:52,170 --> 00:47:13,860
to look at your code but I can take a

00:47:00,870 --> 00:47:16,230
look at your code after my my psychic

00:47:13,860 --> 00:47:17,940
powers are on the fritz right now so I

00:47:16,230 --> 00:47:19,260
can't read your mind and see the code on

00:47:17,940 --> 00:47:22,380
your screen but I can look at it

00:47:19,260 --> 00:47:23,460
afterwards I there could be a bug in

00:47:22,380 --> 00:47:26,070
daytime there could be a bug in your

00:47:23,460 --> 00:47:29,600
code there could be cosmic rays hitting

00:47:26,070 --> 00:47:37,560
your computer all right i'll take a look

00:47:29,600 --> 00:47:39,480
yes there's a daytime module and pro 6

00:47:37,560 --> 00:47:41,490
as well are they working with me I've

00:47:39,480 --> 00:47:43,650
had some input into it so yeah I

00:47:41,490 --> 00:47:47,100
participated a little I think that it'll

00:47:43,650 --> 00:47:49,740
be good it'll be much better than what's

00:47:47,100 --> 00:47:54,510
included with pro 5 so there probably

00:47:49,740 --> 00:47:56,940
will still need to be modules for perl 6

00:47:54,510 --> 00:47:59,760
for this stuff just because it would be

00:47:56,940 --> 00:48:02,010
a bit ridiculous to include everything

00:47:59,760 --> 00:48:05,130
the daytime and kind of other things in

00:48:02,010 --> 00:48:08,700
the daytime ecosystem do in the core but

00:48:05,130 --> 00:48:11,910
the core will be sufficient for much

00:48:08,700 --> 00:48:15,080
more usages many more usages English

00:48:11,910 --> 00:48:15,080
hard yes

00:48:20,630 --> 00:48:40,140
XKCD so the question was XKCD said that

00:48:37,740 --> 00:48:44,210
there's an iso standard for dates would

00:48:40,140 --> 00:48:46,859
I favor I'm not too sure how xkd CD

00:48:44,210 --> 00:48:48,720
segues into this would I favor military

00:48:46,859 --> 00:48:54,690
intervention into any country that

00:48:48,720 --> 00:48:57,930
doesn't follow this probably not I think

00:48:54,690 --> 00:49:00,780
the the the history of western US

00:48:57,930 --> 00:49:03,290
military interventions only has been

00:49:00,780 --> 00:49:03,290
pretty

00:49:12,330 --> 00:49:16,560
those groups will then went to war with

00:49:14,850 --> 00:49:19,920
each other over that standard I think

00:49:16,560 --> 00:49:21,510
that's the most likely outcome so so I'd

00:49:19,920 --> 00:49:22,680
have to say no not because it wouldn't

00:49:21,510 --> 00:49:24,270
be good to get everybody on the same

00:49:22,680 --> 00:49:27,480
standard just because the likely outcome

00:49:24,270 --> 00:49:31,160
is to make things much worse so no any

00:49:27,480 --> 00:49:31,160
real questions yes

00:49:53,880 --> 00:50:00,160
okay so you're saying there's my sequel

00:49:56,740 --> 00:50:02,230
date functions that handle time zones

00:50:00,160 --> 00:50:05,200
but it's only 32 bit is that what you're

00:50:02,230 --> 00:50:07,089
saying okay but my sequel sucks in so

00:50:05,200 --> 00:50:09,210
many other ways as well that you

00:50:07,089 --> 00:50:15,250
shouldn't use it anyway it's just

00:50:09,210 --> 00:50:16,750
steaming pile of trash it's a steaming

00:50:15,250 --> 00:50:20,380
pile of trash that people can make work

00:50:16,750 --> 00:50:22,180
but it's still a steaming pile again so

00:50:20,380 --> 00:50:24,849
Wendy is telling me I should stop if you

00:50:22,180 --> 00:50:26,410
have any other questions for me or any

00:50:24,849 --> 00:50:28,420
other psychics of bugging you'd like me

00:50:26,410 --> 00:50:31,450
to do I'll be performing at the local

00:50:28,420 --> 00:50:32,799
carnival or you can find me around the

00:50:31,450 --> 00:50:35,670
conference and ask me other questions

00:50:32,799 --> 00:50:35,670

YouTube URL: https://www.youtube.com/watch?v=nusC1TnwOlg


