Title: Liz - How the Camel is de-cocooning
Publication date: 2014-06-23
Playlist: YAPC::NA 2014
Description: 
	While Rakudo Perl 6 is coming closer and closer to being production ready, good old Perl 5 has taken a lot of ideas of Perl 6, for better or for worse. I will look into how some things have worked, and some haven't. And why. And how in the end, everybody is getting more and more used to Perl 6 (like) syntax.
Captions: 
	00:03:40,060 --> 00:03:45,280
you need typing for smartness to make

00:03:42,040 --> 00:03:49,000
sense we found out over the years the

00:03:45,280 --> 00:03:51,880
hard way I guess in pro 5605 will never

00:03:49,000 --> 00:03:54,190
have typing at least I don't see it

00:03:51,880 --> 00:03:57,069
happening and a lot of other people

00:03:54,190 --> 00:03:58,840
don't either it's going to be only of

00:03:57,069 --> 00:04:00,670
limited usefulness and still a source of

00:03:58,840 --> 00:04:04,860
confusion so it has been marked

00:04:00,670 --> 00:04:06,849
experimental in five point 20 and

00:04:04,860 --> 00:04:09,610
potentially going to be deprecated in

00:04:06,849 --> 00:04:13,120
the future but the word is not out on

00:04:09,610 --> 00:04:14,830
that yet we have 17 signatures already

00:04:13,120 --> 00:04:17,650
said something like that just arrived

00:04:14,830 --> 00:04:21,600
with 520 syntactic sugar no real name

00:04:17,650 --> 00:04:23,770
parameters and input file until six

00:04:21,600 --> 00:04:27,520
superteen signatures are really part of

00:04:23,770 --> 00:04:29,650
multi method dispatch but it's nice to

00:04:27,520 --> 00:04:32,620
have super teen signatures nonetheless

00:04:29,650 --> 00:04:33,940
in five I think it's brill was one of

00:04:32,620 --> 00:04:37,780
the last languages to have something

00:04:33,940 --> 00:04:42,820
like that for the subroutines so what

00:04:37,780 --> 00:04:45,460
are named parameters in 06 like well you

00:04:42,820 --> 00:04:47,650
can specify use the colon everyone is

00:04:45,460 --> 00:04:51,550
went to colon well we use it here for

00:04:47,650 --> 00:04:54,640
name parameters so the name of the name

00:04:51,550 --> 00:04:56,729
parameters name the default if you don't

00:04:54,640 --> 00:05:00,340
specify it it has a default of you and

00:04:56,729 --> 00:05:02,220
it just says it here so if I call it a

00:05:00,340 --> 00:05:06,250
without any parameters it says hey you

00:05:02,220 --> 00:05:08,590
and I we call it with name Orlando it

00:05:06,250 --> 00:05:16,300
says hey Orlando now what the heck is

00:05:08,590 --> 00:05:18,880
that well that's actually a pair of

00:05:16,300 --> 00:05:22,090
course you know the fat coma impro five

00:05:18,880 --> 00:05:26,410
if you do that until six if I ask what

00:05:22,090 --> 00:05:29,070
it is it's actually a pair if you have a

00:05:26,410 --> 00:05:32,950
program presented of it you get this

00:05:29,070 --> 00:05:41,470
again that coma this is just another way

00:05:32,950 --> 00:05:46,090
of saying this colon key smaller than

00:05:41,470 --> 00:05:48,490
string greater than very easy few

00:05:46,090 --> 00:05:50,710
characters to type if you ask what that

00:05:48,490 --> 00:05:52,210
is it's a pair and if you ask what the

00:05:50,710 --> 00:05:52,580
program representation of that is you

00:05:52,210 --> 00:05:56,210
get

00:05:52,580 --> 00:05:57,439
anything so that's just an it for a lot

00:05:56,210 --> 00:05:59,330
of cool five people this looks very

00:05:57,439 --> 00:06:04,580
strange what the heck is that but it's

00:05:59,330 --> 00:06:07,009
just a pair nothing else so what's

00:06:04,580 --> 00:06:08,560
multi-method dispatch well you can have

00:06:07,009 --> 00:06:13,789
multiple super teens with the same name

00:06:08,560 --> 00:06:15,889
but with different parameters so if i

00:06:13,789 --> 00:06:18,139
call this subroutine with a number it

00:06:15,889 --> 00:06:20,449
will say number if i call the subroutine

00:06:18,139 --> 00:06:22,129
with a string it will say string so I

00:06:20,449 --> 00:06:24,610
call it with a number it says 40 number

00:06:22,129 --> 00:06:29,180
42 called with the swing set string too

00:06:24,610 --> 00:06:31,449
it's as easy as that so what this is

00:06:29,180 --> 00:06:34,759
typing you're talking about there well

00:06:31,449 --> 00:06:37,250
if you put a string into a variable like

00:06:34,759 --> 00:06:40,550
that and you say it it will just say foo

00:06:37,250 --> 00:06:44,060
great it works however easy to say this

00:06:40,550 --> 00:06:47,240
variable is a number it tried to put a

00:06:44,060 --> 00:06:51,319
string in it it will actually say type

00:06:47,240 --> 00:06:55,430
check fails you can't put a string into

00:06:51,319 --> 00:06:58,969
a number that's what it says expect the

00:06:55,430 --> 00:07:01,639
number but that's string so if you mark

00:06:58,969 --> 00:07:04,550
this as a string and put the string in

00:07:01,639 --> 00:07:07,039
it it just works again you might think

00:07:04,550 --> 00:07:09,500
well almost its type checking here isn't

00:07:07,039 --> 00:07:13,180
that going to be right really heavy it's

00:07:09,500 --> 00:07:15,740
going to be really CPU intensive well

00:07:13,180 --> 00:07:18,830
it's a very hot-cold path and we

00:07:15,740 --> 00:07:21,080
optimize it a lot and you should realize

00:07:18,830 --> 00:07:23,330
that everywhere in pool sticks way to do

00:07:21,080 --> 00:07:25,909
something we already have a type under

00:07:23,330 --> 00:07:29,779
it if you say my dollar a you're just

00:07:25,909 --> 00:07:31,069
saying my any dollar a so the type

00:07:29,779 --> 00:07:35,960
checking is happening all the time

00:07:31,069 --> 00:07:38,750
already so use types when you want to

00:07:35,960 --> 00:07:41,229
it's not going to add to the runtime of

00:07:38,750 --> 00:07:43,729
your program it's going to help you

00:07:41,229 --> 00:07:47,779
develop your programs much faster

00:07:43,729 --> 00:07:52,460
because you get better error results

00:07:47,779 --> 00:07:55,400
error reports so what are the pool 5

00:07:52,460 --> 00:07:59,509
features in perl 6 well actually we only

00:07:55,400 --> 00:08:01,370
have one it's called use v5 is it of

00:07:59,509 --> 00:08:03,770
course stays hard to integrate a mimic

00:08:01,370 --> 00:08:09,470
the indescribable

00:08:03,770 --> 00:08:13,789
and so what is used five it was actually

00:08:09,470 --> 00:08:16,970
recently started by a Tim toady and it's

00:08:13,789 --> 00:08:19,819
now being maintained by frogs AKA till

00:08:16,970 --> 00:08:22,759
guys like is actually the good tip of

00:08:19,819 --> 00:08:26,780
the week person on pearl weekly i

00:08:22,759 --> 00:08:29,000
understand so please if you want to give

00:08:26,780 --> 00:08:30,770
some money to the guy i know he's can

00:08:29,000 --> 00:08:34,510
use it because he's a small family two

00:08:30,770 --> 00:08:34,510
kids growing up third on the way i think

00:08:35,380 --> 00:08:41,390
the idea is to re-implement pool just

00:08:38,180 --> 00:08:46,250
like we did with rokudo pl6 so cool six

00:08:41,390 --> 00:08:49,520
has a grammar its parts by pro 6 into

00:08:46,250 --> 00:08:51,170
something that you can execute without

00:08:49,520 --> 00:08:53,270
getting too technical is it's called a

00:08:51,170 --> 00:08:58,670
sts objective class trees and that goes

00:08:53,270 --> 00:09:04,279
from there you're not going to have

00:08:58,670 --> 00:09:07,070
excess as we know it at least MV five so

00:09:04,279 --> 00:09:11,180
we can only do pure pearl persons of

00:09:07,070 --> 00:09:13,610
code but you will be able to call pull

00:09:11,180 --> 00:09:15,380
five code from pool six and you already

00:09:13,610 --> 00:09:17,050
can actually and your variables are

00:09:15,380 --> 00:09:20,420
visible week with each other because

00:09:17,050 --> 00:09:22,820
once it is actually compiled internally

00:09:20,420 --> 00:09:24,079
it hardly knows any difference between

00:09:22,820 --> 00:09:27,350
the two anymore because they compiled

00:09:24,079 --> 00:09:31,790
down to the same code that's going to be

00:09:27,350 --> 00:09:35,870
i think the big thing for migrating

00:09:31,790 --> 00:09:38,450
people from bill 5 206 it actually

00:09:35,870 --> 00:09:40,880
passes ten percent of the pill five test

00:09:38,450 --> 00:09:45,140
suite at the moment this number is very

00:09:40,880 --> 00:09:48,020
skewed because any test in the pill five

00:09:45,140 --> 00:09:51,320
test suite that has a skip in it does

00:09:48,020 --> 00:09:54,980
not work at the moment skip actually

00:09:51,320 --> 00:09:57,890
uses go two and four go to you need

00:09:54,980 --> 00:10:01,700
labels well the labels we now have until

00:09:57,890 --> 00:10:05,240
six or recruitable six i should say the

00:10:01,700 --> 00:10:08,990
go-to we don't have just yet but it will

00:10:05,240 --> 00:10:10,730
come and v5 will actually be part of the

00:10:08,990 --> 00:10:12,970
next recruiter star distribution as far

00:10:10,730 --> 00:10:12,970
as i know

00:10:13,610 --> 00:10:17,899
I'm not entirely sure when the next

00:10:16,130 --> 00:10:21,649
rikudou star will be could be this month

00:10:17,899 --> 00:10:23,930
it could be next month so what do we

00:10:21,649 --> 00:10:27,709
need for pill six adoption I think we

00:10:23,930 --> 00:10:31,310
need a good introduction ebook I'm just

00:10:27,709 --> 00:10:35,089
looking at somebody there who's been not

00:10:31,310 --> 00:10:37,250
hackling a lot we need more modules and

00:10:35,089 --> 00:10:40,399
sip and support actually at the moment

00:10:37,250 --> 00:10:43,250
you can already upload to see pen and we

00:10:40,399 --> 00:10:45,230
need better performance anyway the

00:10:43,250 --> 00:10:53,480
e-book rumor has it that a certain

00:10:45,230 --> 00:10:55,160
someone is working on that hey cool but

00:10:53,480 --> 00:10:57,230
anyway don't let us stop you from

00:10:55,160 --> 00:10:59,260
writing your own or just blog about your

00:10:57,230 --> 00:11:02,060
experiences is let us know what you did

00:10:59,260 --> 00:11:04,399
if we're talking about a sip and support

00:11:02,060 --> 00:11:07,640
we can actually upload those six

00:11:04,399 --> 00:11:11,420
distributions to see pen already you can

00:11:07,640 --> 00:11:13,820
actually find them on cpanel ready you

00:11:11,420 --> 00:11:16,970
cannot actually install them yet from

00:11:13,820 --> 00:11:18,709
Sipan there's a program called panda

00:11:16,970 --> 00:11:26,060
that we use in the process community for

00:11:18,709 --> 00:11:29,870
installing modules since distributions

00:11:26,060 --> 00:11:33,380
are actually usually tired and gzipped

00:11:29,870 --> 00:11:34,970
on on Sipan we need like archive tar on

00:11:33,380 --> 00:11:37,070
Perl 6 and that's actually what what a

00:11:34,970 --> 00:11:43,850
blocker is at the moment for being able

00:11:37,070 --> 00:11:46,010
to install modules from Sipan however

00:11:43,850 --> 00:11:48,399
we're going to start restarting full C

00:11:46,010 --> 00:11:52,670
power modules later this year to pro 6

00:11:48,399 --> 00:11:55,699
so that's going to work out better

00:11:52,670 --> 00:11:59,480
performance more vm is now completely

00:11:55,699 --> 00:12:02,089
standalone unlike earlier this year we

00:11:59,480 --> 00:12:09,829
actually are creeping towards pro 5 in

00:12:02,089 --> 00:12:13,810
some areas of execution of l5 the if you

00:12:09,829 --> 00:12:13,810
load moves that is

00:12:14,820 --> 00:12:23,170
but yeah Joseph comes with moose so yeah

00:12:20,040 --> 00:12:26,350
we have a lot of code introduction built

00:12:23,170 --> 00:12:28,330
into more vm and that's already being

00:12:26,350 --> 00:12:29,680
used to actually optimize the abject

00:12:28,330 --> 00:12:32,650
syntax trees that i was talking about

00:12:29,680 --> 00:12:34,810
earlier so we can actually do some

00:12:32,650 --> 00:12:36,610
optimizations already and it's now

00:12:34,810 --> 00:12:40,120
actually being used for a google summer

00:12:36,610 --> 00:12:42,130
of code project to develop jit just in

00:12:40,120 --> 00:12:44,500
time so actually will generate machine

00:12:42,130 --> 00:12:47,410
code when it can for you and this is

00:12:44,500 --> 00:12:50,910
very exciting because actually earlier

00:12:47,410 --> 00:12:54,910
the last week we actually have the first

00:12:50,910 --> 00:12:57,100
cheated execution of code it's it's a

00:12:54,910 --> 00:12:59,890
very simple example just calling the

00:12:57,100 --> 00:13:01,450
same subject as very little in it gets

00:12:59,890 --> 00:13:04,480
in line and turned into machine code

00:13:01,450 --> 00:13:09,820
it's very nice it works it's not very

00:13:04,480 --> 00:13:11,850
useful yet but it's a beginning so why

00:13:09,820 --> 00:13:15,310
would you use protection production I

00:13:11,850 --> 00:13:17,500
think the main reason for that in the

00:13:15,310 --> 00:13:19,840
future is going to be saner implicit and

00:13:17,500 --> 00:13:24,070
explicit multi core programming like

00:13:19,840 --> 00:13:27,430
channels from promises and supplies no

00:13:24,070 --> 00:13:30,100
versioning is used with modules I'll get

00:13:27,430 --> 00:13:31,360
back to that just in the moment and of

00:13:30,100 --> 00:13:33,670
course we have lots and lots of cool

00:13:31,360 --> 00:13:36,430
features which means happier programmers

00:13:33,670 --> 00:13:41,830
and happier program is work better and

00:13:36,430 --> 00:13:46,780
are more optimal I would say so to give

00:13:41,830 --> 00:13:49,420
you an idea of the versioning everybody

00:13:46,780 --> 00:13:50,860
news test this is the test module that

00:13:49,420 --> 00:13:53,640
we haven't put six is just called test

00:13:50,860 --> 00:13:56,080
if you use that you can say okay

00:13:53,640 --> 00:14:01,300
everybody has done any testing I hope

00:13:56,080 --> 00:14:05,390
everybody did who's done no testing good

00:14:01,300 --> 00:14:09,260
if you actually improve six put this

00:14:05,390 --> 00:14:13,190
inside the scope it won't know about the

00:14:09,260 --> 00:14:15,170
okay outside the scope so all of your

00:14:13,190 --> 00:14:19,490
all of the loading of modules all of

00:14:15,170 --> 00:14:21,800
your imports are lexically scoped this

00:14:19,490 --> 00:14:24,980
is very important this means that you

00:14:21,800 --> 00:14:28,220
can actually have multiple modules with

00:14:24,980 --> 00:14:30,910
the same name loaded at the same time as

00:14:28,220 --> 00:14:34,880
long as you don't do in the same scope

00:14:30,910 --> 00:14:37,940
right it's very important that basically

00:14:34,880 --> 00:14:40,610
also means together with the test use

00:14:37,940 --> 00:14:43,370
test you can actually specify which

00:14:40,610 --> 00:14:45,700
author you want the module to be from

00:14:43,370 --> 00:14:49,820
and which versions you want to have and

00:14:45,700 --> 00:14:51,770
so rather than in the past when until

00:14:49,820 --> 00:14:53,840
five you said use this module from see

00:14:51,770 --> 00:14:55,880
pattern or something you have to change

00:14:53,840 --> 00:14:57,830
your mind there because in plus six you

00:14:55,880 --> 00:15:00,650
will actually have to say I want to have

00:14:57,830 --> 00:15:02,900
that version of that module and that

00:15:00,650 --> 00:15:07,670
author because that will make it more

00:15:02,900 --> 00:15:10,280
maintainable right you can be sure that

00:15:07,670 --> 00:15:12,260
the API will never change because that

00:15:10,280 --> 00:15:14,020
model will never change if it works for

00:15:12,260 --> 00:15:16,040
you it will continue to work for you I

00:15:14,020 --> 00:15:17,960
think that's very important for the

00:15:16,040 --> 00:15:24,190
maintainability for will six in the

00:15:17,960 --> 00:15:29,210
future the implicit and explicit oops

00:15:24,190 --> 00:15:32,839
multi-core processing this is a little

00:15:29,210 --> 00:15:36,560
program that just randomly sleeps I do

00:15:32,839 --> 00:15:38,330
10 times and I print the number here it

00:15:36,560 --> 00:15:44,170
takes an average about five seconds

00:15:38,330 --> 00:15:47,710
which make sense what the heck is that

00:15:44,170 --> 00:15:58,040
well that's actually just short for 02

00:15:47,710 --> 00:16:03,970
apart from the 10 no this is 10 * 029 if

00:15:58,040 --> 00:16:03,970
you want 11 times you say 11 all right

00:16:04,690 --> 00:16:08,150
now if you're not if you're not

00:16:06,770 --> 00:16:10,520
interested in the order in which these

00:16:08,150 --> 00:16:13,100
things are happening you can actually do

00:16:10,520 --> 00:16:16,089
this in parallel and it's one easy way

00:16:13,100 --> 00:16:19,910
for doing that it's called the start

00:16:16,089 --> 00:16:23,300
function the start will actually put

00:16:19,910 --> 00:16:28,780
this into a separate thread if you might

00:16:23,300 --> 00:16:32,480
have you will it will return a promise

00:16:28,780 --> 00:16:34,610
we're going to do that 10 times even

00:16:32,480 --> 00:16:36,140
though it's a for loop we do if we put a

00:16:34,610 --> 00:16:38,000
do in front of it will actually return

00:16:36,140 --> 00:16:40,040
the values that we've seen inside the

00:16:38,000 --> 00:16:43,040
for loop so we get 10 promises here and

00:16:40,040 --> 00:16:47,480
the wait will actually wait until all 10

00:16:43,040 --> 00:16:53,330
promises are met so you get a random

00:16:47,480 --> 00:16:57,110
order the amount of CPU is roughly the

00:16:53,330 --> 00:17:00,290
same but the wall clock is a lot less

00:16:57,110 --> 00:17:02,360
and this is what you already can do

00:17:00,290 --> 00:17:03,740
until six right now if you have any any

00:17:02,360 --> 00:17:06,800
type of stuff that you can easily

00:17:03,740 --> 00:17:11,660
paralyzed just you start and wait for

00:17:06,800 --> 00:17:14,020
the results you're done this also

00:17:11,660 --> 00:17:16,760
implicit multi-process multi-core

00:17:14,020 --> 00:17:20,300
multiprocessing concurrency whatever you

00:17:16,760 --> 00:17:22,579
call it and these are junctions hello

00:17:20,300 --> 00:17:25,850
junction anybody remember quantum

00:17:22,579 --> 00:17:30,650
superpositions of taming conway all the

00:17:25,850 --> 00:17:33,830
cult junctions here and so that's just

00:17:30,650 --> 00:17:38,510
any one two three any of them so if you

00:17:33,830 --> 00:17:42,530
ask is this true is that equal to 1 it

00:17:38,510 --> 00:17:45,290
says well yes no and no and if you run

00:17:42,530 --> 00:17:47,030
you really want to know the bully

00:17:45,290 --> 00:17:50,120
imperative version of that you kill you

00:17:47,030 --> 00:17:53,060
can call the sole operator tell me what

00:17:50,120 --> 00:17:58,850
is it so and it will say well any of

00:17:53,060 --> 00:18:05,650
them is true so this is true so that's

00:17:58,850 --> 00:18:10,610
very easy junction here i'm doing a

00:18:05,650 --> 00:18:16,700
picking a random number from 0 to 99 for

00:18:10,610 --> 00:18:20,240
instance 71 and i'm going to see if i'm

00:18:16,700 --> 00:18:22,250
going to put any number from 0 to 99 in

00:18:20,240 --> 00:18:25,040
here and i'm going to see if this is

00:18:22,250 --> 00:18:27,290
actually true now if this is actually

00:18:25,040 --> 00:18:27,830
true yes because they're all in the same

00:18:27,290 --> 00:18:30,429
range

00:18:27,830 --> 00:18:32,510
by definition is going to be true

00:18:30,429 --> 00:18:34,850
however it's going to be thousand then

00:18:32,510 --> 00:18:39,769
it's a chance of one in ten where it's

00:18:34,850 --> 00:18:41,809
true or false now the idea is that types

00:18:39,769 --> 00:18:44,929
like this things like this would be

00:18:41,809 --> 00:18:48,260
automatically split up over multiple

00:18:44,929 --> 00:18:50,450
threads for you so it won't be a single

00:18:48,260 --> 00:18:51,880
core doing all the calculations it will

00:18:50,450 --> 00:18:54,679
be multiple for us doing it for you

00:18:51,880 --> 00:18:58,399
however that's not there yet but all of

00:18:54,679 --> 00:19:00,710
the framework for it is there and now

00:18:58,399 --> 00:19:03,529
that we have actually concurrency in and

00:19:00,710 --> 00:19:08,480
with using more vm and JVM we can

00:19:03,529 --> 00:19:12,440
actually start working on that so how

00:19:08,480 --> 00:19:13,760
can you try full six as a user well it's

00:19:12,440 --> 00:19:17,809
a recruiter with a plenty of models to

00:19:13,760 --> 00:19:22,850
try sorry recruit a star next version

00:19:17,809 --> 00:19:26,360
will have v5 get it at here recruited

00:19:22,850 --> 00:19:29,269
org downloads a star if you are a tester

00:19:26,360 --> 00:19:31,309
of 12 6 you can actually get something

00:19:29,269 --> 00:19:35,480
that is an equivalent of pro brew it's

00:19:31,309 --> 00:19:38,690
called recruiter brew and you can

00:19:35,480 --> 00:19:40,549
actually just get it on github if you

00:19:38,690 --> 00:19:42,370
want to start contributing it's really

00:19:40,549 --> 00:19:46,460
easy you just make a directory somewhere

00:19:42,370 --> 00:19:48,860
you clone rokudo you go into the

00:19:46,460 --> 00:19:52,220
directory you do configure you'll make

00:19:48,860 --> 00:19:55,070
install and you're done this takes if

00:19:52,220 --> 00:19:59,659
you have any decent machine about 23

00:19:55,070 --> 00:20:02,179
minutes and you're done oh and of course

00:19:59,659 --> 00:20:04,220
enough bandwidth for getting more and

00:20:02,179 --> 00:20:08,510
getting all sorts of other stuff from

00:20:04,220 --> 00:20:12,490
data for you so are you interested in

00:20:08,510 --> 00:20:16,220
seeing some pro 6 examples well this is

00:20:12,490 --> 00:20:21,200
rosetta code project that actually has

00:20:16,220 --> 00:20:23,929
are we now number for larry there about

00:20:21,200 --> 00:20:25,700
so there are only three more languages

00:20:23,929 --> 00:20:29,000
that have more examples of code on

00:20:25,700 --> 00:20:32,419
rosetta code that's the full six advent

00:20:29,000 --> 00:20:35,419
calendar every year in december we have

00:20:32,419 --> 00:20:37,760
a blog every day about newer features of

00:20:35,419 --> 00:20:39,169
Bill six and it's proven to be a large

00:20:37,760 --> 00:20:40,730
source of inspiration for a lot of

00:20:39,169 --> 00:20:41,600
people finding out how you can do things

00:20:40,730 --> 00:20:44,419
to mithral six

00:20:41,600 --> 00:20:45,980
however how far back you go there's a

00:20:44,419 --> 00:20:48,200
bigger chance of things actually not

00:20:45,980 --> 00:20:49,610
quite working anymore because some

00:20:48,200 --> 00:20:51,020
features have changed we are not

00:20:49,610 --> 00:20:54,559
completely stable that and read in that

00:20:51,020 --> 00:20:56,330
respect you can find that there Jonathan

00:20:54,559 --> 00:20:59,330
has a lot of presentations with examples

00:20:56,330 --> 00:21:01,539
and in general the cases with Jonathan's

00:20:59,330 --> 00:21:05,330
presentations is that everything works

00:21:01,539 --> 00:21:07,850
so that's always good is fine you can

00:21:05,330 --> 00:21:12,500
find us here if you want to get support

00:21:07,850 --> 00:21:16,429
for pro 6 we have two pro 6 channel on

00:21:12,500 --> 00:21:19,210
IRC free note please don't hesitate to

00:21:16,429 --> 00:21:22,460
come there a friendly bunch there and

00:21:19,210 --> 00:21:25,750
everybody wants to help you with it we

00:21:22,460 --> 00:21:28,190
have a lot of blogs on planet area

00:21:25,750 --> 00:21:30,230
there's an article for coming from pool

00:21:28,190 --> 00:21:32,600
5 it's maybe a little dated but it's

00:21:30,230 --> 00:21:34,330
still very pretty good if you really

00:21:32,600 --> 00:21:39,140
want to get into knit agree we have the

00:21:34,330 --> 00:21:42,610
actually synopsis so this plenty of way

00:21:39,140 --> 00:21:46,640
so you can actually find support for

00:21:42,610 --> 00:21:49,640
your work with pro 6 so I guess and

00:21:46,640 --> 00:21:53,080
that's the way how the camel will be D

00:21:49,640 --> 00:22:01,570
cocooning in the coming years and I

00:21:53,080 --> 00:22:01,570
would say are there any questions Wow

00:22:10,540 --> 00:22:20,550
the module and so on you recommend that

00:22:13,420 --> 00:22:20,550
or right now I would recommend that

00:22:21,240 --> 00:22:27,700
hopefully in by the next release of Roku

00:22:25,180 --> 00:22:30,700
dough which would be about four weeks

00:22:27,700 --> 00:22:34,000
from now that would be different than I

00:22:30,700 --> 00:22:36,580
would actually suggest CPAP but at the

00:22:34,000 --> 00:22:39,340
moment we're in the final stages of

00:22:36,580 --> 00:22:40,780
getting that all working and it's all

00:22:39,340 --> 00:22:43,240
very exciting and I wish I could have

00:22:40,780 --> 00:22:57,190
told you you see Penn now but that's not

00:22:43,240 --> 00:23:03,850
true again so working on that just sorry

00:22:57,190 --> 00:23:06,310
you want to put the dough okay well I

00:23:03,850 --> 00:23:07,660
guess I'll put I'll put the slides up

00:23:06,310 --> 00:23:14,940
and I'm a girl and make a link to it

00:23:07,660 --> 00:23:19,350
yeah okay we'll do that anything else no

00:23:14,940 --> 00:23:21,850
no okay well thank you anyway for our

00:23:19,350 --> 00:23:26,490
white camel awards it was very nice to

00:23:21,850 --> 00:23:26,490
get us from the community thank

00:23:36,230 --> 00:23:44,600

YouTube URL: https://www.youtube.com/watch?v=T4k3otua4tU


