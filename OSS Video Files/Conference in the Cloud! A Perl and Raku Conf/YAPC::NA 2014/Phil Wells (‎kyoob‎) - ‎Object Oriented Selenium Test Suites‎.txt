Title: Phil Wells (‎kyoob‎) - ‎Object Oriented Selenium Test Suites‎
Publication date: 2014-06-24
Playlist: YAPC::NA 2014
Description: 
	Phil Wells is a QA engineer at Kaplan Test Prep, and in this talk he will demonstrate how he uses Perl's Selenium bindings and good old-fashioned OOP to verify the complex configuration of KTP's student portal. Attendees will leave with a good idea of what they can do to build a maintainable, resilient functional test framework.
Captions: 
	00:00:04,819 --> 00:00:10,320
all right hi thanks for coming everyone

00:00:07,470 --> 00:00:12,840
I think we ready to get started my name

00:00:10,320 --> 00:00:15,120
is Phil and I'm gonna do a demo here on

00:00:12,840 --> 00:00:19,439
object oriented selenium test Suites

00:00:15,120 --> 00:00:22,080
a little nervous I'm a novice

00:00:19,439 --> 00:00:23,279
how are you landed this talk but they

00:00:22,080 --> 00:00:26,279
say if you're nervous you're supposed to

00:00:23,279 --> 00:00:28,260
open with a joke so here's mine I

00:00:26,279 --> 00:00:30,119
finally finished writing my book and my

00:00:28,260 --> 00:00:33,050
wife was like it's about time so I was

00:00:30,119 --> 00:00:33,050
like no it's about bears

00:00:34,940 --> 00:00:40,590
so I write object-oriented selenium test

00:00:38,190 --> 00:00:42,059
Suites for a Kaplan test prep I work

00:00:40,590 --> 00:00:44,250
specifically for the med licensing

00:00:42,059 --> 00:00:46,289
department so if you want to be a doctor

00:00:44,250 --> 00:00:47,700
and take your licensing test you go to

00:00:46,289 --> 00:00:49,710
Kaplan to prepare for the test

00:00:47,700 --> 00:00:52,230
I'm a QA engineer and one of the things

00:00:49,710 --> 00:00:54,329
I work on is the student homepage if you

00:00:52,230 --> 00:00:56,160
buy a Kaplan product and then log in to

00:00:54,329 --> 00:00:57,840
the site you are taken to the student

00:00:56,160 --> 00:01:01,829
homepage and that will give you access

00:00:57,840 --> 00:01:04,430
to all of the assets that you're that

00:01:01,829 --> 00:01:06,540
you deserve for purchasing a product

00:01:04,430 --> 00:01:08,100
specifically this part of the of your

00:01:06,540 --> 00:01:10,020
homepage will be called a product mix

00:01:08,100 --> 00:01:11,430
and you can click on Go buttons and

00:01:10,020 --> 00:01:14,310
click on links and open the little

00:01:11,430 --> 00:01:15,869
folders and is QA a part of my job is

00:01:14,310 --> 00:01:18,150
making sure that when we configure these

00:01:15,869 --> 00:01:19,680
product mixes for new students they're

00:01:18,150 --> 00:01:23,220
able to access their links and

00:01:19,680 --> 00:01:27,110
everything is spelled correctly etc so

00:01:23,220 --> 00:01:27,110
let's just see how that works

00:01:30,530 --> 00:01:36,900
so this is just the test for one of our

00:01:35,130 --> 00:01:38,759
product mixes we have a bunch of these

00:01:36,900 --> 00:01:41,939
product mixes as you can imagine there's

00:01:38,759 --> 00:01:43,590
many different ways you can combine the

00:01:41,939 --> 00:01:44,909
assets that Kaplan puts together that's

00:01:43,590 --> 00:01:47,880
how many product mixes we have to offer

00:01:44,909 --> 00:01:49,409
to our students and this is one product

00:01:47,880 --> 00:01:52,189
mix version you can see in the

00:01:49,409 --> 00:01:54,600
background here it's spinning up Firefox

00:01:52,189 --> 00:01:57,110
boy I bought some dry erase markers but

00:01:54,600 --> 00:01:57,110
they got wet

00:01:57,870 --> 00:02:04,950
sorry just watch the leaning and do its

00:02:00,450 --> 00:02:05,490
thing you can see I'm not doing anything

00:02:04,950 --> 00:02:08,130
here

00:02:05,490 --> 00:02:10,860
selenium is a set of tools that

00:02:08,130 --> 00:02:12,570
automates web browsers so it can find

00:02:10,860 --> 00:02:15,150
the elements on the page and click them

00:02:12,570 --> 00:02:16,860
to open them and also read them compare

00:02:15,150 --> 00:02:18,570
them against text that we expect to make

00:02:16,860 --> 00:02:20,370
sure that you know everything is spelled

00:02:18,570 --> 00:02:22,500
correctly and in the right place so

00:02:20,370 --> 00:02:25,230
right now it's just clicking links and

00:02:22,500 --> 00:02:27,030
finding elements in these pop-up windows

00:02:25,230 --> 00:02:28,710
and making sure that the right stuff is

00:02:27,030 --> 00:02:30,000
there and if you do this over and over

00:02:28,710 --> 00:02:31,500
again for all your product mix

00:02:30,000 --> 00:02:33,330
configurations then you can make sure

00:02:31,500 --> 00:02:39,150
that production is acting the way that

00:02:33,330 --> 00:02:42,440
you want it to act and it'll log off

00:02:39,150 --> 00:02:42,440
that's usually the longest part

00:02:49,010 --> 00:02:54,270
it's getting there boy it's got a lot to

00:02:52,590 --> 00:02:55,830
load here you know I was on the ads diet

00:02:54,270 --> 00:03:00,120
but I got sick of eating nothing but ABS

00:02:55,830 --> 00:03:03,180
all the time so looks like the test

00:03:00,120 --> 00:03:04,500
passed you can see I put it on foremost

00:03:03,180 --> 00:03:05,760
mode so you could see all the stuff that

00:03:04,500 --> 00:03:07,230
it was doing but at the bottom there is

00:03:05,760 --> 00:03:11,420
a real important part it says passed

00:03:07,230 --> 00:03:13,500
this particular test had 32 assertions

00:03:11,420 --> 00:03:16,290
and that's what it looks like when one

00:03:13,500 --> 00:03:18,540
of those runs what's making that happen

00:03:16,290 --> 00:03:20,580
of course I'm running Perl and the

00:03:18,540 --> 00:03:24,180
particular module that runs web drive is

00:03:20,580 --> 00:03:28,200
selenium remote driver this just

00:03:24,180 --> 00:03:31,830
recently had a new life the repo is

00:03:28,200 --> 00:03:34,260
switched over on github recently and now

00:03:31,830 --> 00:03:38,160
it's being very heavily supported and

00:03:34,260 --> 00:03:40,530
your new release is coming out and I

00:03:38,160 --> 00:03:42,480
also at work I use teamcity and sauce

00:03:40,530 --> 00:03:44,130
labs and some Oracle Java and bash but

00:03:42,480 --> 00:03:45,720
right now I'm running all my stuff on

00:03:44,130 --> 00:03:48,960
localhost and I won't have time to demo

00:03:45,720 --> 00:03:50,400
all that today but since it's a

00:03:48,960 --> 00:03:51,510
command-line tool just like any other

00:03:50,400 --> 00:03:54,510
test suite you can run it from

00:03:51,510 --> 00:03:56,040
continuous integration as long as he has

00:03:54,510 --> 00:03:57,480
a browser on the machine where you're

00:03:56,040 --> 00:03:59,250
running it from or on the machine that

00:03:57,480 --> 00:04:03,060
selenium is pointing at you can run

00:03:59,250 --> 00:04:06,180
these tests so enough of that let's see

00:04:03,060 --> 00:04:08,070
the code right I'm gonna show you the

00:04:06,180 --> 00:04:11,580
code that it takes to run this it's

00:04:08,070 --> 00:04:15,000
setup basically I just have the SHP

00:04:11,580 --> 00:04:18,840
stands for student homepage packaged in

00:04:15,000 --> 00:04:23,180
a folder and then I have you know all my

00:04:18,840 --> 00:04:28,050
test scripts in my tea folder so you

00:04:23,180 --> 00:04:29,670
know we have a few tests and then it

00:04:28,050 --> 00:04:33,450
also takes a config file which just has

00:04:29,670 --> 00:04:35,250
things like I tell it localhost if I

00:04:33,450 --> 00:04:38,850
want to run on my localhost selenium

00:04:35,250 --> 00:04:40,560
server or I tell it if I want to run on

00:04:38,850 --> 00:04:42,210
the QA environment set a production I'll

00:04:40,560 --> 00:04:44,550
put all that in a config file so I don't

00:04:42,210 --> 00:04:45,810
have to go in and change my scripts but

00:04:44,550 --> 00:04:48,660
the most important things that we're

00:04:45,810 --> 00:04:51,060
going to explore today are this student

00:04:48,660 --> 00:04:54,000
homepage package this is the actual page

00:04:51,060 --> 00:04:56,490
object that makes it the object-oriented

00:04:54,000 --> 00:04:58,880
part of this I'll get into what a page

00:04:56,490 --> 00:05:01,140
object is in just a minute but this is a

00:04:58,880 --> 00:05:03,410
it's a really ugly

00:05:01,140 --> 00:05:06,150
naming convention but this is what the

00:05:03,410 --> 00:05:07,650
filename for a test script looks like it

00:05:06,150 --> 00:05:09,960
makes sense if you work at Kaplan but I

00:05:07,650 --> 00:05:14,400
don't expect to make sense of it for

00:05:09,960 --> 00:05:16,080
anybody in this audience so since we use

00:05:14,400 --> 00:05:18,240
page objects freezing object-oriented

00:05:16,080 --> 00:05:19,260
programming which includes you know all

00:05:18,240 --> 00:05:21,870
the classics passion

00:05:19,260 --> 00:05:25,880
package declaration constructor methods

00:05:21,870 --> 00:05:28,260
and straight-up methods to use selenium

00:05:25,880 --> 00:05:31,770
to explore our student home pages

00:05:28,260 --> 00:05:33,390
capabilities so you just declare the

00:05:31,770 --> 00:05:38,700
student home page package and construct

00:05:33,390 --> 00:05:40,890
it do what any other you know object and

00:05:38,700 --> 00:05:42,420
then this is an example it's really

00:05:40,890 --> 00:05:46,050
small on the screen but this would be an

00:05:42,420 --> 00:05:48,390
example of an actual test method we

00:05:46,050 --> 00:05:51,570
would run set up specifically to login

00:05:48,390 --> 00:05:53,150
to the page make sure that the page

00:05:51,570 --> 00:05:56,910
comes up after you've logged in and then

00:05:53,150 --> 00:05:58,440
head back to the test script so where

00:05:56,910 --> 00:06:00,810
are these arguments coming from when we

00:05:58,440 --> 00:06:02,130
set up a new object we're sending all

00:06:00,810 --> 00:06:04,950
these things and most of these are just

00:06:02,130 --> 00:06:09,120
straight-up scalars except for this guy

00:06:04,950 --> 00:06:11,970
this is very important we create a

00:06:09,120 --> 00:06:16,920
selenium object in our code I'll show

00:06:11,970 --> 00:06:18,480
you here right in the test script this

00:06:16,920 --> 00:06:20,640
is all it takes I'm sending default

00:06:18,480 --> 00:06:22,680
there's nothing no arguments being sent

00:06:20,640 --> 00:06:24,480
but once you spin that up since it's

00:06:22,680 --> 00:06:26,030
default it looks at localhost and see

00:06:24,480 --> 00:06:28,740
that there's a selenium server running

00:06:26,030 --> 00:06:30,510
and if there is it grabs onto it it's on

00:06:28,740 --> 00:06:33,570
the default port and then it spins up

00:06:30,510 --> 00:06:36,540
browser the default is Firefox which is

00:06:33,570 --> 00:06:41,720
the browser that we saw earlier so

00:06:36,540 --> 00:06:44,910
that's being stored in cells where am I

00:06:41,720 --> 00:06:46,770
and that gets passed to every new SHP

00:06:44,910 --> 00:06:49,320
object so every HP object that you

00:06:46,770 --> 00:06:52,110
create has its own you know child

00:06:49,320 --> 00:06:53,550
selenium server to drive on and then

00:06:52,110 --> 00:06:56,970
once that's set up you can go down to

00:06:53,550 --> 00:06:59,480
your actual methods like setup which is

00:06:56,970 --> 00:06:59,480
what we saw before

00:07:01,870 --> 00:07:08,389
so why do we do it this way well we

00:07:04,520 --> 00:07:10,039
create page objects because you don't

00:07:08,389 --> 00:07:11,830
want the test scripts to have all the

00:07:10,039 --> 00:07:13,789
capabilities that you're testing because

00:07:11,830 --> 00:07:16,190
if something on the student homepage

00:07:13,789 --> 00:07:18,229
were to change and you had a list of a

00:07:16,190 --> 00:07:20,030
thousand test scripts that tested that

00:07:18,229 --> 00:07:21,410
capability which changed you'd have to

00:07:20,030 --> 00:07:23,960
go in and edit a thousand test scripts

00:07:21,410 --> 00:07:26,090
and so you abstract that out to one page

00:07:23,960 --> 00:07:27,650
object the student home page and when it

00:07:26,090 --> 00:07:28,910
changes you just change it there and

00:07:27,650 --> 00:07:30,910
every test script that calls that

00:07:28,910 --> 00:07:34,160
capability is just hitting that one

00:07:30,910 --> 00:07:36,080
changed capability it's an easier fix

00:07:34,160 --> 00:07:40,820
and it's actually sort of an API for a

00:07:36,080 --> 00:07:42,110
webpage if you have a finite amount of

00:07:40,820 --> 00:07:43,490
things you can do on the student home

00:07:42,110 --> 00:07:45,590
page which you do you can only click

00:07:43,490 --> 00:07:47,570
links and open folders then it's pretty

00:07:45,590 --> 00:07:50,780
straightforward to index all those

00:07:47,570 --> 00:07:53,870
things as methods on a page object and

00:07:50,780 --> 00:07:55,840
then you can write test scripts at will

00:07:53,870 --> 00:07:58,910
there are only so many things that our

00:07:55,840 --> 00:08:02,330
product makes will what to do and you've

00:07:58,910 --> 00:08:03,680
got a great API for them and like I said

00:08:02,330 --> 00:08:05,510
if something changes on the student home

00:08:03,680 --> 00:08:07,130
page you've only got one file that's

00:08:05,510 --> 00:08:08,599
gonna break and not hundreds of files

00:08:07,130 --> 00:08:17,599
that are gonna break I mean they'll all

00:08:08,599 --> 00:08:19,789
fail but they won't all be broken ok so

00:08:17,599 --> 00:08:23,270
let's just walk slowly through the code

00:08:19,789 --> 00:08:24,949
I we sort of saw the setup method before

00:08:23,270 --> 00:08:27,860
but it was zoomed way out here's the

00:08:24,949 --> 00:08:30,169
title method so we've got our user here

00:08:27,860 --> 00:08:31,699
if you remember that's the SHP object

00:08:30,169 --> 00:08:36,050
that we created before and we're gonna

00:08:31,699 --> 00:08:37,640
pass it a string which is just going to

00:08:36,050 --> 00:08:40,190
be used in a method here and our page

00:08:37,640 --> 00:08:43,550
object so here's the method that it was

00:08:40,190 --> 00:08:45,860
calling title and you can see it's it's

00:08:43,550 --> 00:08:47,900
going to store self as the SHP user and

00:08:45,860 --> 00:08:51,500
it's going to store that display name as

00:08:47,900 --> 00:08:53,810
a string called display name can be

00:08:51,500 --> 00:08:54,670
neatly enough ok so then it starts going

00:08:53,810 --> 00:08:58,510
into

00:08:54,670 --> 00:09:00,890
selenium methods using the selenium

00:08:58,510 --> 00:09:02,330
object that we passed first it's going

00:09:00,890 --> 00:09:05,630
to find the element using this ugly

00:09:02,330 --> 00:09:07,580
XPath and store it as return name now

00:09:05,630 --> 00:09:08,540
when it stores it it's got a web element

00:09:07,580 --> 00:09:10,670
it doesn't really have the tag

00:09:08,540 --> 00:09:13,100
a web element is sort of a weirdly

00:09:10,670 --> 00:09:16,280
shaped selenium object but you can use

00:09:13,100 --> 00:09:18,230
selenium methods like get text to grab

00:09:16,280 --> 00:09:20,570
the visible text out of there and then

00:09:18,230 --> 00:09:22,700
store that in return name and then just

00:09:20,570 --> 00:09:25,940
like any other Perl tests you run test

00:09:22,700 --> 00:09:28,150
more and compare that return name to

00:09:25,940 --> 00:09:30,200
your expected name and hope it passes

00:09:28,150 --> 00:09:34,130
now which it did when we ran it before

00:09:30,200 --> 00:09:36,740
and as you can imagine you know the

00:09:34,130 --> 00:09:39,950
capabilities get pretty complex and when

00:09:36,740 --> 00:09:41,570
you go back to your test script you want

00:09:39,950 --> 00:09:43,520
to do more than just test the title and

00:09:41,570 --> 00:09:47,110
so you go through the whole thing for

00:09:43,520 --> 00:09:47,110
each of your product mix configurations

00:09:47,680 --> 00:09:51,890
so these test files are convenient

00:09:49,910 --> 00:09:53,000
because they're living documentation as

00:09:51,890 --> 00:09:54,410
long as they're passing on the

00:09:53,000 --> 00:09:57,380
environment that you're concerned about

00:09:54,410 --> 00:10:00,380
you know that you can read through these

00:09:57,380 --> 00:10:02,180
test scripts and see the actual way that

00:10:00,380 --> 00:10:03,470
your product makes it set up and it's

00:10:02,180 --> 00:10:06,110
true for any webpage that you're testing

00:10:03,470 --> 00:10:07,460
against if you have a passing test and

00:10:06,110 --> 00:10:10,430
you can be confident that reading the

00:10:07,460 --> 00:10:12,890
test script is like programmers manual

00:10:10,430 --> 00:10:16,610
for that webpage because it really is

00:10:12,890 --> 00:10:17,900
like utilizing the API it's configurable

00:10:16,610 --> 00:10:19,760
if something changes in one

00:10:17,900 --> 00:10:21,890
configuration of this student home page

00:10:19,760 --> 00:10:23,540
but not the entire code base of the

00:10:21,890 --> 00:10:24,890
student home page then you can just go

00:10:23,540 --> 00:10:27,290
into the test file and change it there

00:10:24,890 --> 00:10:29,770
and not have to worry about changing the

00:10:27,290 --> 00:10:32,030
actual capability of the underlying code

00:10:29,770 --> 00:10:33,320
it makes it easier to write if you don't

00:10:32,030 --> 00:10:35,690
have to write those capabilities every

00:10:33,320 --> 00:10:36,890
time kind of easy to read easier to read

00:10:35,690 --> 00:10:39,260
than if you had all those capabilities

00:10:36,890 --> 00:10:40,130
making it hundreds and hundreds of lines

00:10:39,260 --> 00:10:43,130
long

00:10:40,130 --> 00:10:45,500
there are ways that testers used to make

00:10:43,130 --> 00:10:48,080
it a keyword-driven or behavior-driven I

00:10:45,500 --> 00:10:49,880
haven't gotten that far with it yet but

00:10:48,080 --> 00:10:53,840
to me it's easy to read because I read

00:10:49,880 --> 00:10:56,150
them every day and that's really all I

00:10:53,840 --> 00:10:57,620
had you can ask me questions if you want

00:10:56,150 --> 00:11:04,870
just don't ask me for any other jokes

00:10:57,620 --> 00:11:07,700
because they're terrible one more joke

00:11:04,870 --> 00:11:11,960
when I help buddies move out of their

00:11:07,700 --> 00:11:13,830
apartments I I like to go back home I

00:11:11,960 --> 00:11:18,270
already messed that joke up

00:11:13,830 --> 00:11:19,740
oh I go and remember if you're going to

00:11:18,270 --> 00:11:25,230
cook Muppets you don't use meat

00:11:19,740 --> 00:11:28,530
tenderizer use fabric softener so this

00:11:25,230 --> 00:11:31,290
is wrestling it's open source if you

00:11:28,530 --> 00:11:36,570
want to learn more about selenium you

00:11:31,290 --> 00:11:38,220
can go to selenium HQ org it's all open

00:11:36,570 --> 00:11:39,990
source and free to download and there

00:11:38,220 --> 00:11:42,000
are ApS or pretty much any language you

00:11:39,990 --> 00:11:45,320
can imagine there's even like Haskell

00:11:42,000 --> 00:11:47,640
and all sorts of crazy selenium api's

00:11:45,320 --> 00:11:49,800
not that you're crazy if you do Haskell

00:11:47,640 --> 00:12:08,730
but you're crazy if you do selenium with

00:11:49,800 --> 00:12:11,490
Haskell so the question was there was a

00:12:08,730 --> 00:12:16,200
Warren after the actual selenium call to

00:12:11,490 --> 00:12:18,810
grab the title uh where was it boy I did

00:12:16,200 --> 00:12:24,120
a lot of scrolling huh okay so these

00:12:18,810 --> 00:12:25,860
warns so I'm pretty confident that

00:12:24,120 --> 00:12:28,170
there's going to be a title on that page

00:12:25,860 --> 00:12:31,200
because if there's not it means that the

00:12:28,170 --> 00:12:33,690
website itself has changed even if there

00:12:31,200 --> 00:12:35,490
were no text in the title the web

00:12:33,690 --> 00:12:37,860
element would still exists and so the

00:12:35,490 --> 00:12:39,420
web page itself is very old it's like a

00:12:37,860 --> 00:12:41,550
legacy web page that never really

00:12:39,420 --> 00:12:42,510
changes but the configuration changes

00:12:41,550 --> 00:12:45,690
all the time

00:12:42,510 --> 00:12:47,310
if the title wasn't there it would

00:12:45,690 --> 00:12:49,860
probably mean that the page didn't load

00:12:47,310 --> 00:12:52,020
or something else went haywire during

00:12:49,860 --> 00:12:54,870
the test script and you can see I've got

00:12:52,020 --> 00:12:57,330
warns after all of these find elements

00:12:54,870 --> 00:12:58,980
and even they get texts because if not

00:12:57,330 --> 00:13:01,680
then the script dies out and I can't

00:12:58,980 --> 00:13:03,120
test the rest of the page so it'll throw

00:13:01,680 --> 00:13:07,230
up a warning saying hey something was

00:13:03,120 --> 00:13:08,490
wrong at the title and you know more

00:13:07,230 --> 00:13:10,920
likely than not if something did go

00:13:08,490 --> 00:13:13,830
wrong then this comparison will also

00:13:10,920 --> 00:13:15,780
fail anyway and then I can look at the

00:13:13,830 --> 00:13:18,120
results and see both the warning and

00:13:15,780 --> 00:13:20,910
likely the failure and go back to the

00:13:18,120 --> 00:13:22,770
actual SHP and see what is up with the

00:13:20,910 --> 00:13:24,270
title and if the title is there looks

00:13:22,770 --> 00:13:25,410
fine then I just have to fix my script

00:13:24,270 --> 00:13:29,730
and if not then I have to

00:13:25,410 --> 00:13:32,269
bug someone to fix the title yeah oh

00:13:29,730 --> 00:13:32,269
sure

00:13:33,500 --> 00:13:45,149
here we go so yeah these are the wardens

00:13:39,360 --> 00:14:02,970
we were talking about and the actual the

00:13:45,149 --> 00:14:04,709
actual assertion is down here yep sure

00:14:02,970 --> 00:14:08,540
so the question was if you can spin up

00:14:04,709 --> 00:14:11,220
browser other than Firefox and yeah the

00:14:08,540 --> 00:14:13,470
the webdriver API for Perl can use any

00:14:11,220 --> 00:14:16,800
of the selenium drivers that are around

00:14:13,470 --> 00:14:18,600
and there is chrome driver there ie

00:14:16,800 --> 00:14:20,160
driver there are drivers for any popular

00:14:18,600 --> 00:14:22,589
browser and there are even a few like

00:14:20,160 --> 00:14:24,990
phantom Jas that can run headless tests

00:14:22,589 --> 00:14:27,209
which perform pretty well under you know

00:14:24,990 --> 00:14:28,949
basic HTML like this if you have like

00:14:27,209 --> 00:14:31,709
we're at Ajax calls and phantom J's

00:14:28,949 --> 00:14:36,120
might be a little hinky but it's just a

00:14:31,709 --> 00:14:38,519
matter of configuring where was it when

00:14:36,120 --> 00:14:41,610
you'd call us HPE or when you call

00:14:38,519 --> 00:14:44,160
selenium here it's a matter of sending

00:14:41,610 --> 00:14:45,810
your defaults or it's a matter of this

00:14:44,160 --> 00:14:57,449
is my selenium server which is running

00:14:45,810 --> 00:14:59,040
and you can see I should clear this so

00:14:57,449 --> 00:15:01,560
this is just running the defaults

00:14:59,040 --> 00:15:04,259
lenient server standalone file to jar

00:15:01,560 --> 00:15:06,509
that you download from selenium HQ and

00:15:04,259 --> 00:15:09,089
that's got the default set to Firefox

00:15:06,509 --> 00:15:10,529
but it's selenium HQ and other places on

00:15:09,089 --> 00:15:12,870
the web you can also download chrome

00:15:10,529 --> 00:15:14,490
driver and phantom j/s and you have

00:15:12,870 --> 00:15:16,529
those running on localhost instead of

00:15:14,490 --> 00:15:19,529
this it'll pick those up and running on

00:15:16,529 --> 00:15:23,189
Chrome instead so it's if you have a

00:15:19,529 --> 00:15:25,019
bunch of these running you can send the

00:15:23,189 --> 00:15:27,449
selenium object to a grid and it'll pick

00:15:25,019 --> 00:15:28,529
the browser that's running for you or

00:15:27,449 --> 00:15:30,240
you can just have one of these running

00:15:28,529 --> 00:15:31,740
on your machine or you can have

00:15:30,240 --> 00:15:32,879
different machines running all of them

00:15:31,740 --> 00:15:35,149
there are a bunch of ways to configure

00:15:32,879 --> 00:15:35,149
it

00:15:44,269 --> 00:15:48,180
so

00:15:45,629 --> 00:15:51,029
ww selenium I believe still uses

00:15:48,180 --> 00:15:53,309
selenium remote control and selenium

00:15:51,029 --> 00:15:56,209
remote driver uses webdriver and I've

00:15:53,309 --> 00:15:59,999
just found it to be more actively

00:15:56,209 --> 00:16:01,519
maintained and also I used webdriver for

00:15:59,999 --> 00:16:04,110
other projects that I'm working on and

00:16:01,519 --> 00:16:07,040
the differences our selenium remote

00:16:04,110 --> 00:16:08,999
control has more like specific

00:16:07,040 --> 00:16:11,629
capabilities for instance that will have

00:16:08,999 --> 00:16:15,209
like make sure checkbox is checked and

00:16:11,629 --> 00:16:17,220
webdriver has more agnostic capabilities

00:16:15,209 --> 00:16:20,160
like find the element see what it does

00:16:17,220 --> 00:16:23,009
and then set an attribute that I say

00:16:20,160 --> 00:16:24,689
what the attribute is and it's to me

00:16:23,009 --> 00:16:30,209
it's that level of abstraction is a

00:16:24,689 --> 00:16:32,249
little more programmable it's I don't

00:16:30,209 --> 00:16:36,800
the more options you have the more

00:16:32,249 --> 00:16:40,249
limited you are in some sense no problem

00:16:36,800 --> 00:16:40,249
any other questions

00:16:40,250 --> 00:16:45,350
all right well thank you for coming to

00:16:43,199 --> 00:16:45,350

YouTube URL: https://www.youtube.com/watch?v=ZesUiDBjXcA


