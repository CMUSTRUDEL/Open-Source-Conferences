Title: Arthur Schmidt (‎fREW‎) - Detecting Examining Databases 101
Publication date: 2014-06-23
Playlist: YAPC::NA 2014
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:08,220
oh man ok so I don't really have time

00:00:06,420 --> 00:00:10,650
but someone else who's speaking in here

00:00:08,220 --> 00:00:13,110
should try this go on the YouTube site

00:00:10,650 --> 00:00:15,089
and look at your own live stream and see

00:00:13,110 --> 00:00:18,539
what happens you can probably do it

00:00:15,089 --> 00:00:21,300
anyway ok so this is detecting and

00:00:18,539 --> 00:00:25,260
examining databases 101 I'm free Schmidt

00:00:21,300 --> 00:00:27,779
and you're in Florida ok so my company

00:00:25,260 --> 00:00:29,490
is hiring talk to me if you want to work

00:00:27,779 --> 00:00:34,050
for us we're in Dallas you can't work

00:00:29,490 --> 00:00:37,230
remote sorry and that is me alright so

00:00:34,050 --> 00:00:38,579
what is the problem that DB IX

00:00:37,230 --> 00:00:42,270
introspect ur which is what we're

00:00:38,579 --> 00:00:44,129
talking about now solve sometimes you

00:00:42,270 --> 00:00:45,690
need to generate different sequel

00:00:44,129 --> 00:00:48,840
depending on the database that you're

00:00:45,690 --> 00:00:52,260
connected to and also sometimes

00:00:48,840 --> 00:00:56,250
different database handles will work

00:00:52,260 --> 00:00:59,430
differently for example with sequel

00:00:56,250 --> 00:01:01,530
server you can connect over odbc or a do

00:00:59,430 --> 00:01:07,350
and those act differently for example

00:01:01,530 --> 00:01:09,540
with respect to transactions so why

00:01:07,350 --> 00:01:13,159
can't you just use dbh arrow driver

00:01:09,540 --> 00:01:16,950
arrow name this is a pretty common thing

00:01:13,159 --> 00:01:18,960
the driver is not the database so like I

00:01:16,950 --> 00:01:24,390
already said a good example of that is

00:01:18,960 --> 00:01:27,090
odbc whoops so odbc connects to sequel

00:01:24,390 --> 00:01:31,350
server but it can also connect to post

00:01:27,090 --> 00:01:35,780
grass I think Oracle others so you can't

00:01:31,350 --> 00:01:35,780
just pretend that the drivers the name

00:01:36,079 --> 00:01:43,009
people do this all the time so for

00:01:38,970 --> 00:01:47,009
example dbx connector does this dbx in

00:01:43,009 --> 00:01:49,649
inspector does this Fayette which role

00:01:47,009 --> 00:01:52,380
ski released a few years ago and then a

00:01:49,649 --> 00:01:54,960
bunch of random Oh rms so for example

00:01:52,380 --> 00:01:57,420
you can see this pretty easily by just

00:01:54,960 --> 00:02:02,490
looking like if they dispatch based on

00:01:57,420 --> 00:02:04,680
name they have this problem so watch out

00:02:02,490 --> 00:02:10,140
for that if you're using a module that

00:02:04,680 --> 00:02:14,280
does database stuff so what does work

00:02:10,140 --> 00:02:16,560
you need to do a nested Rida tection so

00:02:14,280 --> 00:02:18,330
this is actually what DB IC duz and I'll

00:02:16,560 --> 00:02:20,160
go into that but basically what I mean

00:02:18,330 --> 00:02:22,709
here is you try to detect what your

00:02:20,160 --> 00:02:24,480
databases starting from that name that

00:02:22,709 --> 00:02:26,850
we already talked about and then you do

00:02:24,480 --> 00:02:29,610
another layer where you say okay based

00:02:26,850 --> 00:02:31,080
on that name what else should I do and

00:02:29,610 --> 00:02:36,270
I'll show some examples of that in a

00:02:31,080 --> 00:02:39,690
little bit mmm so the problem with the

00:02:36,270 --> 00:02:41,819
way that DB IX class does it is it's

00:02:39,690 --> 00:02:43,470
really hard to understand so if you ever

00:02:41,819 --> 00:02:48,570
want to get into the guts of it it's

00:02:43,470 --> 00:02:51,930
spread across 30 classes you can't

00:02:48,570 --> 00:02:53,340
extend it or you can vary barely extend

00:02:51,930 --> 00:02:56,130
it so if you find that there's like a

00:02:53,340 --> 00:02:58,950
bug in one of the one of the parts where

00:02:56,130 --> 00:03:02,700
it does a detection you're you're you're

00:02:58,950 --> 00:03:06,840
out of luck and it's not really reusable

00:03:02,700 --> 00:03:10,709
so one of the big goals of this is to

00:03:06,840 --> 00:03:12,290
allow for alternate ORM and I'll get

00:03:10,709 --> 00:03:15,360
into some examples of stuff like that

00:03:12,290 --> 00:03:19,290
and you can't really reuse the bits from

00:03:15,360 --> 00:03:21,000
DC and then it's sort of related to the

00:03:19,290 --> 00:03:24,959
fact that it's not extensible it's

00:03:21,000 --> 00:03:26,850
pretty hard coded and yeah it's that's

00:03:24,959 --> 00:03:30,540
all that needs to be said there so what

00:03:26,850 --> 00:03:33,269
is the solution d vix introspect ur it

00:03:30,540 --> 00:03:36,000
is a it is a faithful reimplement ation

00:03:33,269 --> 00:03:39,299
of the DVI see algorithm so I'll show

00:03:36,000 --> 00:03:41,640
you what that looks like in a second the

00:03:39,299 --> 00:03:44,640
complete initial configuration unlike

00:03:41,640 --> 00:03:48,780
being sprawling across 30 odd classes

00:03:44,640 --> 00:03:51,660
it's in 50 lines of code you can add and

00:03:48,780 --> 00:03:54,959
modify that configuration so you can add

00:03:51,660 --> 00:03:58,530
new database types or drivers or other

00:03:54,959 --> 00:04:01,350
variants and then you can also modify

00:03:58,530 --> 00:04:03,540
ones that are already there and one of

00:04:01,350 --> 00:04:08,459
the important things about this to note

00:04:03,540 --> 00:04:11,760
is that with DB I see since it's based

00:04:08,459 --> 00:04:14,010
on normal pearl classes if you modify it

00:04:11,760 --> 00:04:16,829
you've modified it for everyone so any

00:04:14,010 --> 00:04:19,650
other tools in your process that are

00:04:16,829 --> 00:04:22,729
using vb I see now have this change with

00:04:19,650 --> 00:04:26,639
DB IX introspect er it is a

00:04:22,729 --> 00:04:28,290
it's a object it's an instance and when

00:04:26,639 --> 00:04:31,380
you do that modification it's just for

00:04:28,290 --> 00:04:34,710
yours and if you want it to apply to

00:04:31,380 --> 00:04:39,000
other parts of your code you just pass

00:04:34,710 --> 00:04:44,669
that object around so let's see it in

00:04:39,000 --> 00:04:47,430
action so I have a materialized path

00:04:44,669 --> 00:04:53,340
module that I made and this is this is

00:04:47,430 --> 00:05:04,400
pretty basic but let me so for example

00:04:53,340 --> 00:05:04,400
we have I wish this there you go alright

00:05:05,330 --> 00:05:12,660
so i use the intra Specter and then I

00:05:09,870 --> 00:05:15,539
say for Microsoft sequel we use plus 4

00:05:12,660 --> 00:05:21,900
concatenation for my sequel we use this

00:05:15,539 --> 00:05:25,020
concatfile fall back in a crappy way

00:05:21,900 --> 00:05:29,180
where if we don't get something back

00:05:25,020 --> 00:05:32,699
from the driver I just default to the

00:05:29,180 --> 00:05:34,680
sequel standard which is two pipes so

00:05:32,699 --> 00:05:37,889
this is this is a pretty basic usage of

00:05:34,680 --> 00:05:39,870
this it's almost overkill for intra

00:05:37,889 --> 00:05:41,580
Specter but I mean I use Microsoft's

00:05:39,870 --> 00:05:44,639
equal at work so I need microsoft sequel

00:05:41,580 --> 00:05:46,169
to work well a little bit more

00:05:44,639 --> 00:05:49,620
complicated and we'll go through this

00:05:46,169 --> 00:05:52,409
one even more quickly is the same kind

00:05:49,620 --> 00:05:54,659
of deal but different ways to detect or

00:05:52,409 --> 00:05:58,380
different ways to get a random function

00:05:54,659 --> 00:06:05,280
from a given database based on what type

00:05:58,380 --> 00:06:10,080
it is but it's the same pattern I'm just

00:06:05,280 --> 00:06:12,270
going to skip that one ok and then so

00:06:10,080 --> 00:06:15,000
recently I released this thing called

00:06:12,270 --> 00:06:18,840
date methods and it is incredibly

00:06:15,000 --> 00:06:23,570
complex it gives you a way to get the

00:06:18,840 --> 00:06:26,760
current UTC in my sequel sequel light

00:06:23,570 --> 00:06:30,900
microsoft sequel oracle or postgres but

00:06:26,760 --> 00:06:32,909
also you can do datepart extraction so

00:06:30,900 --> 00:06:34,919
this is sort of like a little mini ORM

00:06:32,909 --> 00:06:36,420
I'm supporting it in DB I see but I'm

00:06:34,919 --> 00:06:39,120
not really using DVI see

00:06:36,420 --> 00:06:41,760
at all so for example with Microsoft

00:06:39,120 --> 00:06:43,980
sequel we use this park map thing and

00:06:41,760 --> 00:06:47,040
I've kind of made a normalized list of

00:06:43,980 --> 00:06:49,680
names and then so in Microsoft sequel

00:06:47,040 --> 00:06:53,520
that day of week is I so weak and all

00:06:49,680 --> 00:06:58,470
caps etc and then on top of having a

00:06:53,520 --> 00:07:00,990
date part extraction a function i also

00:06:58,470 --> 00:07:03,390
have a date add function which kind of

00:07:00,990 --> 00:07:07,110
does the same kind of thing you you take

00:07:03,390 --> 00:07:09,360
a unit and then an integer amount of

00:07:07,110 --> 00:07:12,090
that unit and add it to a date sequel

00:07:09,360 --> 00:07:15,000
and that's nestable but the point here

00:07:12,090 --> 00:07:17,220
is that you can really build some pretty

00:07:15,000 --> 00:07:25,530
tall sand castles I like to think of

00:07:17,220 --> 00:07:28,200
with a dbx introspect ER ok so before I

00:07:25,530 --> 00:07:29,610
get into this does anybody have any

00:07:28,200 --> 00:07:31,110
questions about what I've said so far I

00:07:29,610 --> 00:07:42,240
know I've gone a little fast I tend to

00:07:31,110 --> 00:07:45,530
talk way too fast yeah yeah here let me

00:07:42,240 --> 00:07:45,530
if I do this

00:07:51,919 --> 00:08:06,620
all right yeah no I get it I just okay

00:08:07,070 --> 00:08:17,160
that's right okay but oh this so it's so

00:08:11,790 --> 00:08:20,370
noisy so hard to see well we'll get into

00:08:17,160 --> 00:08:25,490
what each of these things do but all

00:08:20,370 --> 00:08:30,210
right any any other questions all right

00:08:25,490 --> 00:08:33,659
so now the actual way that this works so

00:08:30,210 --> 00:08:35,610
the first thing that a typical user of

00:08:33,659 --> 00:08:37,529
introspect are going to do is call new

00:08:35,610 --> 00:08:45,839
and they're going to pass drivers and

00:08:37,529 --> 00:08:48,170
here all make that even bigger so this

00:08:45,839 --> 00:08:51,380
is just a string and what that what that

00:08:48,170 --> 00:08:55,050
means is let's take the default

00:08:51,380 --> 00:08:57,720
introspect er driver package with the

00:08:55,050 --> 00:09:00,540
release from the end of 2013 now right

00:08:57,720 --> 00:09:03,120
now this is the only driver package I'll

00:09:00,540 --> 00:09:05,190
make more as we need more but this is

00:09:03,120 --> 00:09:08,820
what we had with DB I see at that time

00:09:05,190 --> 00:09:12,270
and the idea is I don't ever want anyone

00:09:08,820 --> 00:09:13,560
to use introspect ER and then me release

00:09:12,270 --> 00:09:16,170
a new version of introspect earth at

00:09:13,560 --> 00:09:19,680
changes some the way that it works and

00:09:16,170 --> 00:09:21,210
then you're in trouble because it's

00:09:19,680 --> 00:09:23,420
basically it's changed the semantics of

00:09:21,210 --> 00:09:25,320
the way it works so this is this is the

00:09:23,420 --> 00:09:29,520
normal way you're going to do it there

00:09:25,320 --> 00:09:32,250
is no other default now I'll mention

00:09:29,520 --> 00:09:34,290
this just briefly i don't think i'm

00:09:32,250 --> 00:09:36,300
going to show details of this unless

00:09:34,290 --> 00:09:39,030
someone's interested but this drivers

00:09:36,300 --> 00:09:41,760
can also take an array ref of actual

00:09:39,030 --> 00:09:43,170
driver objects so if you wanted to

00:09:41,760 --> 00:09:46,709
create something from whole cloth you

00:09:43,170 --> 00:09:48,600
could I don't know why you'd want to do

00:09:46,709 --> 00:09:50,850
that it's kind of a lot of work I mean

00:09:48,600 --> 00:09:52,680
the only reason that I was able to do

00:09:50,850 --> 00:09:56,010
this in a pretty short period of time

00:09:52,680 --> 00:10:01,870
was because I had examples from DB IX

00:09:56,010 --> 00:10:04,220
class okay so

00:10:01,870 --> 00:10:06,319
this is hard to read I'm going to make

00:10:04,220 --> 00:10:08,420
it smaller again all right so we've got

00:10:06,319 --> 00:10:11,060
decorate driver and then unconnected

00:10:08,420 --> 00:10:13,160
versus connected and you kind of saw a

00:10:11,060 --> 00:10:15,740
little bit of that so here's what that

00:10:13,160 --> 00:10:19,160
looks like so as you saw before you've

00:10:15,740 --> 00:10:24,670
got decorate driver unconnected it takes

00:10:19,160 --> 00:10:28,990
a driver name the name of the option and

00:10:24,670 --> 00:10:31,190
then the value so the difference between

00:10:28,990 --> 00:10:35,269
unconnected and connected is that

00:10:31,190 --> 00:10:40,310
unconnected can detect based on the DSN

00:10:35,269 --> 00:10:43,250
so for example if your DSN is DB i colon

00:10:40,310 --> 00:10:44,870
PG colon anything we know that it's a

00:10:43,250 --> 00:10:47,480
Postgres database or at least we're

00:10:44,870 --> 00:10:49,279
pretty sure as long as you're not using

00:10:47,480 --> 00:10:51,050
that postgres thing that lets you

00:10:49,279 --> 00:10:55,730
connect to other databases which I

00:10:51,050 --> 00:10:57,079
haven't I've totally punted on so this

00:10:55,730 --> 00:10:59,720
is going to be the typical way you're

00:10:57,079 --> 00:11:03,800
going to do it for simple stuff for more

00:10:59,720 --> 00:11:06,560
complicated things you can say well I

00:11:03,800 --> 00:11:09,350
you have to be connected to do this kind

00:11:06,560 --> 00:11:13,509
of detection and in this example what

00:11:09,350 --> 00:11:17,060
I've added is an R dbms version option

00:11:13,509 --> 00:11:19,819
that then takes the database handle that

00:11:17,060 --> 00:11:23,350
it has in the object and does a query on

00:11:19,819 --> 00:11:23,350
it to get the version go ahead

00:11:28,300 --> 00:11:33,610
that's correct yeah this is this is us

00:11:30,570 --> 00:11:35,530
you know so we've got this DB I I object

00:11:33,610 --> 00:11:37,570
that we instantiated previously on the

00:11:35,530 --> 00:11:40,930
other slide this decorate driver is

00:11:37,570 --> 00:11:43,090
adding stuff to that that object and

00:11:40,930 --> 00:11:44,830
it's not going into any global namespace

00:11:43,090 --> 00:11:47,800
or using gloves it's just a bunch of

00:11:44,830 --> 00:11:49,120
hats and we can talk about that if

00:11:47,800 --> 00:11:53,230
anyone's interested but I kind of doubt

00:11:49,120 --> 00:11:57,370
it okay so next is get and this is this

00:11:53,230 --> 00:12:00,850
is the way that you use dbi I after

00:11:57,370 --> 00:12:04,300
you've put the stuff inside so you know

00:12:00,850 --> 00:12:06,430
we've made the concat sequel option you

00:12:04,300 --> 00:12:09,370
pass it the database handle and the DSN

00:12:06,430 --> 00:12:12,010
and can cat sequel and it will respond

00:12:09,370 --> 00:12:13,990
return with whatever you put in for

00:12:12,010 --> 00:12:18,550
concat sequel with a couple weird

00:12:13,990 --> 00:12:22,450
caveats so one thing to realize dbh can

00:12:18,550 --> 00:12:23,650
be on def DSN can be on def if they're

00:12:22,450 --> 00:12:28,000
both on def you're going to get back

00:12:23,650 --> 00:12:30,130
nothing or rather it'll die but the idea

00:12:28,000 --> 00:12:32,710
there is that you might not have

00:12:30,130 --> 00:12:35,800
connected to the database yet and need

00:12:32,710 --> 00:12:39,250
to connect later and that's when this

00:12:35,800 --> 00:12:44,020
weird version comes in so you make a

00:12:39,250 --> 00:12:46,900
database variable or dbh variable and

00:12:44,020 --> 00:12:50,860
then you make a closure around that this

00:12:46,900 --> 00:12:53,500
a variant of get will say hey do we have

00:12:50,860 --> 00:12:56,800
a DB h it's undef fall back to the DSN

00:12:53,500 --> 00:13:00,040
if for some reason like if it's a no d

00:12:56,800 --> 00:13:03,550
00 d bc DSN it doesn't it still doesn't

00:13:00,040 --> 00:13:07,510
know it the databases so then it falls

00:13:03,550 --> 00:13:11,460
back recreates the connection looks at

00:13:07,510 --> 00:13:13,750
the DB h and then gives you the correct

00:13:11,460 --> 00:13:16,630
concatenated but it's a it's an

00:13:13,750 --> 00:13:19,510
important distinction between the more

00:13:16,630 --> 00:13:22,440
naive way to do this where you'll you

00:13:19,510 --> 00:13:25,420
never have the option to fall back now

00:13:22,440 --> 00:13:27,520
there's one thing that is not quite

00:13:25,420 --> 00:13:30,400
clear in either of these slides and

00:13:27,520 --> 00:13:32,860
that's that so as you can see here this

00:13:30,400 --> 00:13:34,930
is just a regular scalar and I recommend

00:13:32,860 --> 00:13:38,080
that if you're doing an unconnected

00:13:34,930 --> 00:13:39,940
option you always use a regular scalar

00:13:38,080 --> 00:13:42,190
because if you don't need to connect to

00:13:39,940 --> 00:13:43,540
the database why do you need

00:13:42,190 --> 00:13:47,350
write a code ref that's going to get

00:13:43,540 --> 00:13:49,630
executed for no good reason it if you do

00:13:47,350 --> 00:13:52,540
write a code ref you will get the DSN

00:13:49,630 --> 00:13:55,240
but and and the dbh if you're connected

00:13:52,540 --> 00:13:59,110
but you shouldn't count on it in this

00:13:55,240 --> 00:14:01,090
second case you've got a sub that gets

00:13:59,110 --> 00:14:05,770
the dbh and the DSN which can also be

00:14:01,090 --> 00:14:07,960
knowable and that what gets returned is

00:14:05,770 --> 00:14:10,720
not this code reference but the return

00:14:07,960 --> 00:14:13,270
value from the executed code reference

00:14:10,720 --> 00:14:15,220
if you need to return a code reference

00:14:13,270 --> 00:14:19,030
you need to wrap it in another layer of

00:14:15,220 --> 00:14:22,840
subs which is what I've done here so

00:14:19,030 --> 00:14:24,970
note that with Microsoft sequel for the

00:14:22,840 --> 00:14:28,540
data add sequel option we return a sub

00:14:24,970 --> 00:14:30,490
that then returns a sub because somehow

00:14:28,540 --> 00:14:32,170
you need to be able to return a sub ref

00:14:30,490 --> 00:14:34,150
and most of the time with the sub ref

00:14:32,170 --> 00:14:37,060
you want to call it so this is just a

00:14:34,150 --> 00:14:44,980
weird caveat but I feel like I need to

00:14:37,060 --> 00:14:47,410
mention it ok so I actually have some

00:14:44,980 --> 00:14:50,650
extra slides but if anyone has questions

00:14:47,410 --> 00:14:54,820
I'll answer them now cuz I have plenty

00:14:50,650 --> 00:14:57,510
of time well five minutes alright any

00:14:54,820 --> 00:14:57,510
questions yet

00:15:03,959 --> 00:15:14,619
probably not a sequel abstract is it

00:15:11,589 --> 00:15:19,269
generates the bits of sequel that are

00:15:14,619 --> 00:15:21,129
mostly the same everywhere I have

00:15:19,269 --> 00:15:23,969
already spoken to a couple people here

00:15:21,129 --> 00:15:27,369
where what I'd like to do is create

00:15:23,969 --> 00:15:29,829
something on top of dvi-i that lets you

00:15:27,369 --> 00:15:31,929
for example have like concatenation

00:15:29,829 --> 00:15:33,219
operators that are generic which are you

00:15:31,929 --> 00:15:36,369
know different all over the place I've

00:15:33,219 --> 00:15:38,349
already clearly done methods I think

00:15:36,369 --> 00:15:39,819
that that would be a useful thing the

00:15:38,349 --> 00:15:41,679
problem with sequel abstract is it's

00:15:39,819 --> 00:15:43,779
it's pretty awesome i'd already you

00:15:41,679 --> 00:15:50,319
can't you can't change it a whole lot i

00:15:43,779 --> 00:15:56,439
don't think okay I'm gonna go go ahead

00:15:50,319 --> 00:15:59,169
someone alright so we've also got the

00:15:56,439 --> 00:16:00,939
driver itself and let me let me show you

00:15:59,169 --> 00:16:03,539
guys the default configuration that I

00:16:00,939 --> 00:16:03,539
mentioned earlier

00:16:11,150 --> 00:16:13,210
you

00:16:23,070 --> 00:16:29,820
okay is that big enough yeah all right

00:16:26,490 --> 00:16:33,150
so before i go into what all this

00:16:29,820 --> 00:16:36,660
exactly means this is the default driver

00:16:33,150 --> 00:16:43,140
set and it looks big because the screen

00:16:36,660 --> 00:16:45,750
is big or rather zoomed in but for the

00:16:43,140 --> 00:16:49,080
most part what you do do you have a an

00:16:45,750 --> 00:16:51,030
initial entry point driver and then a

00:16:49,080 --> 00:16:54,390
bunch of drivers after that that are

00:16:51,030 --> 00:16:56,730
almost nothing and then in a few places

00:16:54,390 --> 00:16:59,580
you'll do another detection round like

00:16:56,730 --> 00:17:02,360
we talked about now to go into the

00:16:59,580 --> 00:17:05,459
details of that a driver has a name so

00:17:02,360 --> 00:17:07,920
remember when we would add an option to

00:17:05,459 --> 00:17:12,209
PG we would we would use that name and

00:17:07,920 --> 00:17:14,579
ever and then it has parents so for

00:17:12,209 --> 00:17:16,860
example if you try to use an option and

00:17:14,579 --> 00:17:19,110
that option is not in that driver it'll

00:17:16,860 --> 00:17:21,839
fall back to its parents which is a

00:17:19,110 --> 00:17:25,320
tricky business with databases but it

00:17:21,839 --> 00:17:26,970
might work we've got the connected

00:17:25,320 --> 00:17:30,090
options and that's just what happens

00:17:26,970 --> 00:17:35,790
when you do when you add an connected

00:17:30,090 --> 00:17:40,230
option like the the decorate driver

00:17:35,790 --> 00:17:43,260
connected you've got unconnected options

00:17:40,230 --> 00:17:45,120
and then finally you've got a connected

00:17:43,260 --> 00:17:47,130
determination strategy and an

00:17:45,120 --> 00:17:50,400
unconnected determination strategy these

00:17:47,130 --> 00:17:53,490
two things take either a DB h or a DSN

00:17:50,400 --> 00:17:57,270
and return the name of another driver so

00:17:53,490 --> 00:18:00,180
for example you have a postgres driver

00:17:57,270 --> 00:18:02,220
for each version of postgres we could

00:18:00,180 --> 00:18:05,460
use the connected determination strategy

00:18:02,220 --> 00:18:08,760
get the version from the database handle

00:18:05,460 --> 00:18:13,620
and return PG underscore 8.2 or

00:18:08,760 --> 00:18:16,020
something like that now this is the dbi

00:18:13,620 --> 00:18:18,660
this is the default DB I driver as I

00:18:16,020 --> 00:18:20,850
said before the first strategy is grab

00:18:18,660 --> 00:18:22,560
the name we've got an unconnected

00:18:20,850 --> 00:18:25,380
determination strategy that looks at the

00:18:22,560 --> 00:18:29,070
DSN if you know for example you're using

00:18:25,380 --> 00:18:32,610
PG that can work this is a made-up

00:18:29,070 --> 00:18:38,220
example if you wanted to add a

00:18:32,610 --> 00:18:39,780
driver to your to your dbi you could but

00:18:38,220 --> 00:18:41,970
you're not quite done yet because you've

00:18:39,780 --> 00:18:47,220
got to add it to the dvi-i as follows

00:18:41,970 --> 00:18:51,720
and then you're going to need to somehow

00:18:47,220 --> 00:18:53,580
tell a DB I how to grab it so like for

00:18:51,720 --> 00:18:55,860
example if maybe it didn't use the name

00:18:53,580 --> 00:18:58,350
it used something else so here we're

00:18:55,860 --> 00:19:00,480
saying if we have a name use the name

00:18:58,350 --> 00:19:03,240
otherwise use this weird made-up

00:19:00,480 --> 00:19:07,500
megadrive thing now that's all of my

00:19:03,240 --> 00:19:11,600
actual slides so or rather I'm out of

00:19:07,500 --> 00:19:11,600
extra ones so any other questions

00:19:17,240 --> 00:19:21,540
eventually yeah I had originally planned

00:19:20,040 --> 00:19:23,310
on having that ready before this

00:19:21,540 --> 00:19:25,290
conference but then with the date

00:19:23,310 --> 00:19:27,330
methods was a lot more fun to work on so

00:19:25,290 --> 00:19:30,510
I did that first but yes that is the

00:19:27,330 --> 00:19:33,060
plan dbx class DVI connector especially

00:19:30,510 --> 00:19:34,950
because for example if you look at

00:19:33,060 --> 00:19:37,170
connector it has a Microsoft sequel

00:19:34,950 --> 00:19:40,050
option and it detects based on the

00:19:37,170 --> 00:19:41,640
driver name so therefore it never has

00:19:40,050 --> 00:19:43,710
ever worked for Microsoft's equal

00:19:41,640 --> 00:19:52,260
because there is no dbd colon colon

00:19:43,710 --> 00:19:53,970
ms-sql so all right well if anyone wants

00:19:52,260 --> 00:19:57,800
to talk about this with me later I'll be

00:19:53,970 --> 00:19:57,800
around and see you guys later

00:20:05,180 --> 00:20:08,720
now it's all yours

00:20:15,360 --> 00:20:18,480

YouTube URL: https://www.youtube.com/watch?v=-CwaObbSK88


