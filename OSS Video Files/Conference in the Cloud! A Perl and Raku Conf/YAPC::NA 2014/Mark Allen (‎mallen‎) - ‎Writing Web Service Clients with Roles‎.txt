Title: Mark Allen (‎mallen‎) - ‎Writing Web Service Clients with Roles‎
Publication date: 2014-06-24
Playlist: YAPC::NA 2014
Description: 
	This talk covers a pattern that I think is powerful, flexible and fun to implement using roles from Moo(se) to develop web service clients. Along with outlining the overall pattern, this talk will present tips and tricks to write good consumable clients that are easy to get other people using.
Captions: 
	00:00:35,870 --> 00:00:37,930
you

00:00:43,770 --> 00:00:45,830
you

00:00:57,230 --> 00:01:05,369
good go ahead and start all right cool

00:01:01,670 --> 00:01:08,810
all right I hope you had a good lunch I

00:01:05,369 --> 00:01:11,910
had a delicious rat from downstairs so

00:01:08,810 --> 00:01:14,100
if your if your talk comes up

00:01:11,910 --> 00:01:17,070
unexpectedly always know you can get a

00:01:14,100 --> 00:01:18,000
wrap downstairs my name is Mark Allen

00:01:17,070 --> 00:01:20,460
I'm going to talk to you today about

00:01:18,000 --> 00:01:24,420
building web service clients in perl

00:01:20,460 --> 00:01:26,130
using rolls how many of you already do

00:01:24,420 --> 00:01:32,700
this as part of your normal day-to-day

00:01:26,130 --> 00:01:35,490
pearl usage yeah a few so so people how

00:01:32,700 --> 00:01:38,009
many of you use rolls regularly as part

00:01:35,490 --> 00:01:39,780
of your programming discipline how many

00:01:38,009 --> 00:01:43,979
of you like to use like inheritance

00:01:39,780 --> 00:01:46,560
properties okay all right so I have a

00:01:43,979 --> 00:01:48,240
purpose today which is to convert you to

00:01:46,560 --> 00:01:50,820
thinking rolls are a better way to do

00:01:48,240 --> 00:01:54,660
things so let me know after the talk if

00:01:50,820 --> 00:01:56,970
you if I've achieved my goal great so

00:01:54,660 --> 00:01:59,459
what the kind of web service is that I'm

00:01:56,970 --> 00:02:02,369
talking about are typically ones that

00:01:59,459 --> 00:02:03,780
are made available by companies that are

00:02:02,369 --> 00:02:07,319
providing services out on the internet

00:02:03,780 --> 00:02:11,610
so think of you know blank as a service

00:02:07,319 --> 00:02:13,800
such as IRC trolling as a service or I

00:02:11,610 --> 00:02:16,560
don't know cat pictures as a service

00:02:13,800 --> 00:02:17,880
stuff like that that's what that's the

00:02:16,560 --> 00:02:19,709
kind of web service clients that I'm

00:02:17,880 --> 00:02:22,650
talking about in this particular talk

00:02:19,709 --> 00:02:24,060
now if you have internal api's in your

00:02:22,650 --> 00:02:27,000
company or whatever that aren't exposed

00:02:24,060 --> 00:02:29,520
to the internet that do things like I

00:02:27,000 --> 00:02:31,560
know customer provisioning as a service

00:02:29,520 --> 00:02:33,290
or accounting as a service or

00:02:31,560 --> 00:02:35,670
bookkeeping as a service or whatever

00:02:33,290 --> 00:02:39,390
this I think these techniques are also

00:02:35,670 --> 00:02:41,190
great for those too but obviously you

00:02:39,390 --> 00:02:44,700
know you guys know more about your

00:02:41,190 --> 00:02:47,760
environment than me so you know take

00:02:44,700 --> 00:02:50,069
this with a grain of salt this is a good

00:02:47,760 --> 00:02:51,510
technique I think in general but of

00:02:50,069 --> 00:02:54,959
course with pearl there's more than one

00:02:51,510 --> 00:02:57,360
way to do it and the corollary with that

00:02:54,959 --> 00:03:01,870
is some ways are better than others

00:02:57,360 --> 00:03:02,950
also applies equally so um I seriously

00:03:01,870 --> 00:03:03,880
don't know what's going on the next room

00:03:02,950 --> 00:03:07,210
but it sounds like they're having a lot

00:03:03,880 --> 00:03:08,470
of fun over there so I don't know if my

00:03:07,210 --> 00:03:12,090
talk is going to be as entertaining as

00:03:08,470 --> 00:03:15,250
theirs but I'll do my best for you so

00:03:12,090 --> 00:03:18,700
yeah that actually one of the things

00:03:15,250 --> 00:03:20,560
that was really fun at oz khan was was

00:03:18,700 --> 00:03:22,450
peers colleague ott up and he he

00:03:20,560 --> 00:03:24,700
convinced people all in the pearl track

00:03:22,450 --> 00:03:25,720
to always like cheer really loudly so

00:03:24,700 --> 00:03:27,040
that all the other people and all the

00:03:25,720 --> 00:03:30,490
other rooms were wondering what the hell

00:03:27,040 --> 00:03:32,860
was going on and that was a lot of fun

00:03:30,490 --> 00:03:35,440
so maybe we can do that at the end of

00:03:32,860 --> 00:03:37,810
the talk and I'm a little self

00:03:35,440 --> 00:03:39,450
interested in that so I admit that you

00:03:37,810 --> 00:03:41,920
know that would be nice for me too but

00:03:39,450 --> 00:03:45,280
it was actually a lot of fun to just

00:03:41,920 --> 00:03:49,900
make noise randomly because of pearl so

00:03:45,280 --> 00:03:51,820
uh I am I hate I have struggled since I

00:03:49,900 --> 00:03:55,270
started giving talks four or five years

00:03:51,820 --> 00:03:57,790
ago to shy away from writing lots of

00:03:55,270 --> 00:03:59,220
texts and verbiage and so you guys are

00:03:57,790 --> 00:04:02,320
going to be part of an experiment today

00:03:59,220 --> 00:04:04,630
unwillingly and unwittingly I'm going to

00:04:02,320 --> 00:04:07,750
try to communicate more visually and see

00:04:04,630 --> 00:04:10,510
how that goes and so some of these

00:04:07,750 --> 00:04:12,250
pictures are tangentially related they

00:04:10,510 --> 00:04:14,050
are maybe not directly related to pearl

00:04:12,250 --> 00:04:16,030
or coding they're just pretty pictures

00:04:14,050 --> 00:04:18,760
that I like and some of them hopefully

00:04:16,030 --> 00:04:20,080
are funny actually I don't think I have

00:04:18,760 --> 00:04:22,570
any cat pictures so if you're expecting

00:04:20,080 --> 00:04:24,730
cat pictures sorry you're you will be

00:04:22,570 --> 00:04:26,169
disappointed but I do have some other

00:04:24,730 --> 00:04:30,370
pictures that I hope that that I hope

00:04:26,169 --> 00:04:32,140
that you like so if you are interested

00:04:30,370 --> 00:04:33,130
in writing web service clients and I

00:04:32,140 --> 00:04:35,830
assume that you are because you're in

00:04:33,130 --> 00:04:37,180
this talk you should probably also know

00:04:35,830 --> 00:04:40,630
that there's a mailing list that's been

00:04:37,180 --> 00:04:43,360
set up on pearl hacks that is focused

00:04:40,630 --> 00:04:44,830
focused on developing web service

00:04:43,360 --> 00:04:46,960
clients and again these are you know

00:04:44,830 --> 00:04:48,910
blank as a service type offerings that

00:04:46,960 --> 00:04:51,970
are available on the internet most

00:04:48,910 --> 00:04:53,710
service providers these days tend not to

00:04:51,970 --> 00:04:55,870
write client libraries for any language

00:04:53,710 --> 00:05:02,460
or only for a few select languages like

00:04:55,870 --> 00:05:05,800
PHP nodejs whatever the new hotness is

00:05:02,460 --> 00:05:07,450
so one of the things that that we

00:05:05,800 --> 00:05:09,550
decided to do as a community was to set

00:05:07,450 --> 00:05:10,360
up this mailing list and I just want to

00:05:09,550 --> 00:05:13,300
let you know that it's

00:05:10,360 --> 00:05:15,729
there and available so on that analyst

00:05:13,300 --> 00:05:17,139
there was a traffic in april i think

00:05:15,729 --> 00:05:18,340
probably about the time i was think

00:05:17,139 --> 00:05:20,830
about what what i should talk about it

00:05:18,340 --> 00:05:22,060
yap see and it was you know what are

00:05:20,830 --> 00:05:24,400
some patterns and what are some good

00:05:22,060 --> 00:05:27,520
techniques and tips to build web service

00:05:24,400 --> 00:05:29,530
clients in pearl and i've written a

00:05:27,520 --> 00:05:31,030
bunch of them so i wrote a pretty long

00:05:29,530 --> 00:05:32,110
post and then i decided well you know

00:05:31,030 --> 00:05:35,560
i'm gonna try to develop that into a

00:05:32,110 --> 00:05:37,330
talk so so that's that's what this talk

00:05:35,560 --> 00:05:40,389
is that's that's where this talk came

00:05:37,330 --> 00:05:41,889
from that's the genesis of them like i

00:05:40,389 --> 00:05:44,259
said before you know there's always more

00:05:41,889 --> 00:05:46,569
than one way to do it in pearl so this

00:05:44,259 --> 00:05:49,240
is what works for me and again I think

00:05:46,569 --> 00:05:51,310
these are good ways to do them there are

00:05:49,240 --> 00:05:53,650
also lots of other ways to build pro

00:05:51,310 --> 00:05:55,719
clients to some of them are is equally

00:05:53,650 --> 00:05:59,139
valid and I'll get into some of those

00:05:55,719 --> 00:06:02,770
things towards the talk middle part of

00:05:59,139 --> 00:06:05,169
the talk so a couple of things that I

00:06:02,770 --> 00:06:07,870
like about building pearl web service

00:06:05,169 --> 00:06:10,719
clients is that you know most of the

00:06:07,870 --> 00:06:13,479
time authors try to build libraries and

00:06:10,719 --> 00:06:15,400
pearl that are helpful so they have this

00:06:13,479 --> 00:06:16,900
property where you don't really have to

00:06:15,400 --> 00:06:19,479
think about them too much they have good

00:06:16,900 --> 00:06:20,800
defaults hopefully and they just sort of

00:06:19,479 --> 00:06:22,719
do what you mean you don't have to

00:06:20,800 --> 00:06:24,870
really coerce them into doing things but

00:06:22,719 --> 00:06:27,159
they also don't hide methods of coercion

00:06:24,870 --> 00:06:28,779
and they also don't have a lot of

00:06:27,159 --> 00:06:31,300
ceremony so you don't have to like pre

00:06:28,779 --> 00:06:32,349
declare a whole bunch of stuff you know

00:06:31,300 --> 00:06:36,639
you can just kind of get to work right

00:06:32,349 --> 00:06:38,229
away and get going with your API I think

00:06:36,639 --> 00:06:41,319
that the things that have a lot of

00:06:38,229 --> 00:06:43,089
ceremony tend to be not a good design

00:06:41,319 --> 00:06:44,710
pattern so things that require a lot of

00:06:43,089 --> 00:06:46,990
initialization or require a ton of

00:06:44,710 --> 00:06:49,629
configuration on the part of someone

00:06:46,990 --> 00:06:52,029
who's building on top of a client

00:06:49,629 --> 00:06:55,689
library is probably not a good design

00:06:52,029 --> 00:06:58,000
pattern so as an author of a web service

00:06:55,689 --> 00:07:00,580
client I would suggest that you put good

00:06:58,000 --> 00:07:02,080
defaults into that web service client so

00:07:00,580 --> 00:07:04,150
the people that are using it can give

00:07:02,080 --> 00:07:05,620
skits get started right away there's not

00:07:04,150 --> 00:07:08,229
a lot of configuration that they have to

00:07:05,620 --> 00:07:10,900
do for themselves try to do some of the

00:07:08,229 --> 00:07:13,210
thinking for your for the people that

00:07:10,900 --> 00:07:18,189
consume the library before they before

00:07:13,210 --> 00:07:22,000
they consume it so we had under a couple

00:07:18,189 --> 00:07:23,420
of people are using patterns of

00:07:22,000 --> 00:07:25,850
inheritance

00:07:23,420 --> 00:07:29,750
you know and I think inheritance is

00:07:25,850 --> 00:07:32,360
great for certain very small cases for

00:07:29,750 --> 00:07:34,250
example if you have a library that

00:07:32,360 --> 00:07:36,530
imports things into someone's name space

00:07:34,250 --> 00:07:38,420
right like maybe you want to derive from

00:07:36,530 --> 00:07:43,280
exporter so you don't have to write your

00:07:38,420 --> 00:07:45,800
own import you know if you're using

00:07:43,280 --> 00:07:47,690
something like moose or Moo then you

00:07:45,800 --> 00:07:49,850
pretty much already get all the import

00:07:47,690 --> 00:07:52,970
that you need so in that particular case

00:07:49,850 --> 00:07:55,420
you know just using Moo just consuming

00:07:52,970 --> 00:07:57,470
the library you know the top-level

00:07:55,420 --> 00:07:58,970
object system library is going to

00:07:57,470 --> 00:08:03,800
provide what you need for for

00:07:58,970 --> 00:08:05,270
inheritance so why not inheritance I

00:08:03,800 --> 00:08:07,160
said at the beginning of the talk that

00:08:05,270 --> 00:08:09,830
you know I think inheritance is a great

00:08:07,160 --> 00:08:11,150
pattern but I think for specifically for

00:08:09,830 --> 00:08:15,470
web service clients it's not a great

00:08:11,150 --> 00:08:16,760
pattern and the reasons are a the

00:08:15,470 --> 00:08:18,020
biggest one that I can think of is is

00:08:16,760 --> 00:08:21,110
that you know there's an action at a

00:08:18,020 --> 00:08:23,240
distance potential problem here pearls

00:08:21,110 --> 00:08:27,980
not especially good at doing inheritance

00:08:23,240 --> 00:08:29,360
it allows multiple inheritance and the

00:08:27,980 --> 00:08:30,770
things that you inherit from are

00:08:29,360 --> 00:08:34,700
actually not as reusable as you might

00:08:30,770 --> 00:08:37,460
think them to be so the reason I say

00:08:34,700 --> 00:08:40,670
that is because if you have a have a

00:08:37,460 --> 00:08:43,070
very large superclass it moves all of

00:08:40,670 --> 00:08:46,010
the initialization logic and code into a

00:08:43,070 --> 00:08:49,490
different class and so that means that

00:08:46,010 --> 00:08:51,920
if you if you've derived something from

00:08:49,490 --> 00:08:53,360
from a superclass a parent class the

00:08:51,920 --> 00:08:54,800
person that is implementing your stuff

00:08:53,360 --> 00:08:58,640
is going to have to understand all of it

00:08:54,800 --> 00:09:01,310
in order to do up to the to debug it and

00:08:58,640 --> 00:09:03,080
also you have to trace that parent all

00:09:01,310 --> 00:09:05,960
the way through your code so you can't

00:09:03,080 --> 00:09:09,230
just take out specific segments of

00:09:05,960 --> 00:09:11,750
functionality and encapsulate them into

00:09:09,230 --> 00:09:13,100
a reusable part you know you it's an

00:09:11,750 --> 00:09:14,810
all-or-nothing all-or-nothing

00:09:13,100 --> 00:09:16,280
proposition you either inherit all of

00:09:14,810 --> 00:09:18,380
the parent class or you inherit none of

00:09:16,280 --> 00:09:19,970
the parent class and so my proposition

00:09:18,380 --> 00:09:22,910
to you is that something that's a little

00:09:19,970 --> 00:09:25,160
less coupled is actually a better way to

00:09:22,910 --> 00:09:27,350
design things and in the case of web

00:09:25,160 --> 00:09:30,620
service clients really what you're

00:09:27,350 --> 00:09:33,770
focusing on is serialization format and

00:09:30,620 --> 00:09:35,090
some kind of web user agent so you want

00:09:33,770 --> 00:09:36,889
some sort of library that's going to

00:09:35,090 --> 00:09:38,600
communicate with the web service

00:09:36,889 --> 00:09:40,489
you need some way to package and format

00:09:38,600 --> 00:09:43,489
the request data whether or not that

00:09:40,489 --> 00:09:47,089
comes from you know post parameters

00:09:43,489 --> 00:09:48,829
that's URL encoded or JSON or its XML

00:09:47,089 --> 00:09:51,019
hopefully not XML but I guess it could

00:09:48,829 --> 00:09:53,359
be XML so you're looking at

00:09:51,019 --> 00:09:55,279
serialization library and a web request

00:09:53,359 --> 00:09:57,470
library and I'm going to talk about some

00:09:55,279 --> 00:09:58,549
of the suggestions i have for things

00:09:57,470 --> 00:09:59,839
that you might want to consider when

00:09:58,549 --> 00:10:04,119
you're building or selecting those

00:09:59,839 --> 00:10:06,109
libraries too so let's talk about roles

00:10:04,119 --> 00:10:07,730
there are a lot of different libraries

00:10:06,109 --> 00:10:11,059
on Sipan that actually implement roles

00:10:07,730 --> 00:10:13,759
and maybe some of you use them already I

00:10:11,059 --> 00:10:15,739
asked up front how many people use

00:10:13,759 --> 00:10:17,989
things like moose and mu and it seemed

00:10:15,739 --> 00:10:21,109
like a pretty sizable portion of the

00:10:17,989 --> 00:10:22,819
audience did that there's also a couple

00:10:21,109 --> 00:10:25,040
of other libraries that you might want

00:10:22,819 --> 00:10:27,499
to consider using in case you don't want

00:10:25,040 --> 00:10:28,759
any part of the the MU system like for

00:10:27,499 --> 00:10:32,269
example you have some sort of business

00:10:28,759 --> 00:10:34,790
reason why you don't want to put mu or

00:10:32,269 --> 00:10:37,639
mousse into your code base you know

00:10:34,790 --> 00:10:39,769
there's a there's libraries that are

00:10:37,639 --> 00:10:42,499
available like roll basic which Ovid

00:10:39,769 --> 00:10:45,619
wrote and that is a very very simple

00:10:42,499 --> 00:10:49,249
roll implementation and it really only

00:10:45,619 --> 00:10:50,749
exports a couple of functions it's very

00:10:49,249 --> 00:10:51,980
straightforward and easy to use and

00:10:50,749 --> 00:10:55,279
there's another one that's part of mu

00:10:51,980 --> 00:10:57,220
that's called roll tiny roll tiny is

00:10:55,279 --> 00:10:59,480
actually the base class for a mu roll

00:10:57,220 --> 00:11:02,809
and I'm going to talk about mu role in

00:10:59,480 --> 00:11:04,160
depth in a little bit once I actually

00:11:02,809 --> 00:11:08,899
get to the code slides that I

00:11:04,160 --> 00:11:10,879
reluctantly put into this talk so roll

00:11:08,899 --> 00:11:12,799
tiny is available and roll basics

00:11:10,879 --> 00:11:14,600
available moose is available moves

00:11:12,799 --> 00:11:17,540
available all of these things build

00:11:14,600 --> 00:11:20,029
roles and if you're wondering what

00:11:17,540 --> 00:11:21,919
exactly is a roll think of a role as a

00:11:20,029 --> 00:11:24,079
piece of functionality that implements

00:11:21,919 --> 00:11:26,720
an action verb so for example it's

00:11:24,079 --> 00:11:28,999
something that an object does so if an

00:11:26,720 --> 00:11:31,759
object can be serialized then you might

00:11:28,999 --> 00:11:35,329
have a role called serializable or

00:11:31,759 --> 00:11:37,100
serializer and if you have a if an

00:11:35,329 --> 00:11:38,839
object can be sent over the network you

00:11:37,100 --> 00:11:43,779
might have a role called request or

00:11:38,839 --> 00:11:46,579
requester and if you know if you have a

00:11:43,779 --> 00:11:48,709
object that can be sent to disk you

00:11:46,579 --> 00:11:50,750
might have something that saves it into

00:11:48,709 --> 00:11:53,390
a disk format like using cereal

00:11:50,750 --> 00:11:57,380
or store storable and you might call

00:11:53,390 --> 00:12:00,410
this you know storable ER or something

00:11:57,380 --> 00:12:04,820
like that so those are the things that

00:12:00,410 --> 00:12:07,160
rolls would encapsulate all right when I

00:12:04,820 --> 00:12:09,050
came up with this talk and when I got a

00:12:07,160 --> 00:12:12,200
when I put a lot of web services on

00:12:09,050 --> 00:12:16,730
Sipan sometimes I get poor request to

00:12:12,200 --> 00:12:19,670
change I always so let me back up I i

00:12:16,730 --> 00:12:22,250
tend to target pearl 514 as the base

00:12:19,670 --> 00:12:24,410
pearl for my web service clients and I

00:12:22,250 --> 00:12:31,790
wanted to talk about that a little bit

00:12:24,410 --> 00:12:33,800
here in this slide with the onion 514

00:12:31,790 --> 00:12:37,460
was the first release that ships with

00:12:33,800 --> 00:12:41,630
excuse me that ships with with HTTP tiny

00:12:37,460 --> 00:12:43,730
and JSON PP in core and so for that

00:12:41,630 --> 00:12:45,920
reason it covers the two biggest things

00:12:43,730 --> 00:12:48,140
that you need to build a web service

00:12:45,920 --> 00:12:50,390
client from most web services it has a

00:12:48,140 --> 00:12:52,580
serializer that's already available and

00:12:50,390 --> 00:12:56,360
it already has an HTTP client that's

00:12:52,580 --> 00:12:59,120
already available and since they ship

00:12:56,360 --> 00:13:01,400
with core you're kind of like sixty to

00:12:59,120 --> 00:13:03,260
seventy percent of the way there you

00:13:01,400 --> 00:13:04,880
might want to add in mu or some other

00:13:03,260 --> 00:13:07,460
object system for a little syntactic

00:13:04,880 --> 00:13:09,020
sugar to define attributes and methods

00:13:07,460 --> 00:13:11,990
and things like that just to make your

00:13:09,020 --> 00:13:16,550
code look clean and you know modern

00:13:11,990 --> 00:13:19,970
whatever that means and so I would

00:13:16,550 --> 00:13:22,700
strongly recommend that you orient your

00:13:19,970 --> 00:13:25,430
code towards using those modules and

00:13:22,700 --> 00:13:28,610
that you also target pearl 514 as a

00:13:25,430 --> 00:13:30,770
baseline so the story i was starting

00:13:28,610 --> 00:13:33,980
with was is that once i put code up on

00:13:30,770 --> 00:13:36,290
steep an and also on github sometimes

00:13:33,980 --> 00:13:39,200
I'll get pull requests from people that

00:13:36,290 --> 00:13:41,839
want to back off the base version of

00:13:39,200 --> 00:13:44,630
Perl they want me to include a patch

00:13:41,839 --> 00:13:47,900
that essentially makes the library

00:13:44,630 --> 00:13:50,930
target pearl 58 or something that's you

00:13:47,900 --> 00:13:54,350
know equally old and I have generally

00:13:50,930 --> 00:13:56,089
you know I appreciate the the the

00:13:54,350 --> 00:14:00,500
sentiment behind that but what I'm

00:13:56,089 --> 00:14:03,770
trying to do is to make this focused on

00:14:00,500 --> 00:14:04,579
the the most recent baseline of pearl

00:14:03,770 --> 00:14:08,540
that I can

00:14:04,579 --> 00:14:10,489
and be true to the the idea that I have

00:14:08,540 --> 00:14:12,769
for that module which is I want this to

00:14:10,489 --> 00:14:14,749
run on a modern a reasonably modern

00:14:12,769 --> 00:14:16,970
pearl that has all the dependencies or

00:14:14,749 --> 00:14:18,139
most of the dependencies in core that I

00:14:16,970 --> 00:14:20,329
don't have to go out and you know

00:14:18,139 --> 00:14:22,160
download 50,000 things from Sipan in

00:14:20,329 --> 00:14:24,889
order for this stuff to build and for it

00:14:22,160 --> 00:14:26,509
to test and so forth so I've generally

00:14:24,889 --> 00:14:30,799
held off on approving those kinds of

00:14:26,509 --> 00:14:33,079
poor requests and I have occasionally

00:14:30,799 --> 00:14:37,009
accepted those poll requests but in

00:14:33,079 --> 00:14:39,259
general I try not to do that but 514 is

00:14:37,009 --> 00:14:40,639
a really great pearl release and you

00:14:39,259 --> 00:14:43,160
know of course all this stuff is still

00:14:40,639 --> 00:14:44,299
in current parole 520 and things are

00:14:43,160 --> 00:14:48,110
just getting better and faster with

00:14:44,299 --> 00:14:50,629
every release all right so while I was

00:14:48,110 --> 00:14:52,850
building this talk one of the things

00:14:50,629 --> 00:14:55,999
that I tried to think about was well if

00:14:52,850 --> 00:14:57,860
we're using JSON PP as a serializer most

00:14:55,999 --> 00:15:00,139
people use JSON excess as their

00:14:57,860 --> 00:15:03,709
serializer which of course is written in

00:15:00,139 --> 00:15:06,799
C and I wondered well how fast how much

00:15:03,709 --> 00:15:10,040
faster is JSON excess compared to JSON

00:15:06,799 --> 00:15:11,509
PP and to do that comparison you need to

00:15:10,040 --> 00:15:14,239
have some sort of data structure to

00:15:11,509 --> 00:15:16,699
serialize so what I really needed to

00:15:14,239 --> 00:15:19,309
have was a library that builds a random

00:15:16,699 --> 00:15:21,470
data structure and what I found on Sipan

00:15:19,309 --> 00:15:26,029
was is that was there was no library to

00:15:21,470 --> 00:15:27,730
do that much to my surprise and so i

00:15:26,029 --> 00:15:33,079
decided i would go ahead and write one

00:15:27,730 --> 00:15:38,169
and what I found was is that JSON excess

00:15:33,079 --> 00:15:42,139
is roughly 20 to 30 times faster than

00:15:38,169 --> 00:15:44,360
JSON PP but but the thing that's

00:15:42,139 --> 00:15:46,429
important to know here is that JSON PP

00:15:44,360 --> 00:15:49,759
depending on the hash structure still

00:15:46,429 --> 00:15:52,610
encodes 4000 to 12,000 data structures a

00:15:49,759 --> 00:15:53,860
second so for ninety percent of the

00:15:52,610 --> 00:15:57,499
cases that you're going to encounter

00:15:53,860 --> 00:15:59,029
JSON PP will not be the bottleneck in

00:15:57,499 --> 00:16:00,619
your library it's going to be the speed

00:15:59,029 --> 00:16:02,749
of the network it's going to be latency

00:16:00,619 --> 00:16:04,489
between the client computer and the

00:16:02,749 --> 00:16:05,779
server it's going to be an Internet it's

00:16:04,489 --> 00:16:06,949
going to be a backhoe it's going to be

00:16:05,779 --> 00:16:10,369
something like that that's going to make

00:16:06,949 --> 00:16:13,100
your library quote slow unquote and so

00:16:10,369 --> 00:16:15,740
one of the things that I've felt more

00:16:13,100 --> 00:16:17,680
comfortable with is using JSON PP

00:16:15,740 --> 00:16:20,710
actually as the serialization library

00:16:17,680 --> 00:16:22,000
for web service clients you know it

00:16:20,710 --> 00:16:24,070
doesn't require see it doesn't require

00:16:22,000 --> 00:16:27,550
compiler on the place where it's install

00:16:24,070 --> 00:16:29,740
that and in general is going to be fast

00:16:27,550 --> 00:16:32,890
enough so it's not V fastest obviously

00:16:29,740 --> 00:16:36,430
but it's fast enough and speaking of

00:16:32,890 --> 00:16:38,770
Shaving yaks I uploaded the the library

00:16:36,430 --> 00:16:41,680
that i wrote to to create random data

00:16:38,770 --> 00:16:44,080
structures to see pan so if you want

00:16:41,680 --> 00:16:46,120
it's available it's called data random

00:16:44,080 --> 00:16:50,470
structure and you can use it if you want

00:16:46,120 --> 00:16:51,700
in your own code and to test with so the

00:16:50,470 --> 00:16:54,130
web service that I wanted to talk about

00:16:51,700 --> 00:16:56,050
specifically today is a web service that

00:16:54,130 --> 00:17:00,160
I wrote I don't know six months ago

00:16:56,050 --> 00:17:02,740
maybe for a service called gioco do

00:17:00,160 --> 00:17:06,130
which does geocoding and it does

00:17:02,740 --> 00:17:09,429
geocoding ridiculously cheaply and in

00:17:06,130 --> 00:17:12,069
fact it charges 0 point 0 0 1 cent per

00:17:09,429 --> 00:17:14,890
look up and you get 2,500 a month for

00:17:12,069 --> 00:17:17,020
free the reason it's so cheap is because

00:17:14,890 --> 00:17:22,839
the data source they're using comes from

00:17:17,020 --> 00:17:26,740
the US Census and it's not it's not as

00:17:22,839 --> 00:17:30,190
accurate as like max Mainz database and

00:17:26,740 --> 00:17:32,170
you know for for some people that's okay

00:17:30,190 --> 00:17:33,850
though like for some people not having

00:17:32,170 --> 00:17:36,390
the level of accuracy that max mine

00:17:33,850 --> 00:17:38,830
gives you is fine and the price is right

00:17:36,390 --> 00:17:41,410
which is to say for most applications

00:17:38,830 --> 00:17:42,880
it's going to be free as long as you

00:17:41,410 --> 00:17:45,880
don't need the sort of pinpoint accuracy

00:17:42,880 --> 00:17:49,120
that that you know I say a more mature

00:17:45,880 --> 00:17:50,679
service but would provide so they had a

00:17:49,120 --> 00:17:52,540
client out of the gate that was written

00:17:50,679 --> 00:17:54,820
in PHP because this entire service is

00:17:52,540 --> 00:17:56,440
implemented in PHP and the guys the

00:17:54,820 --> 00:17:59,290
husband and wife that run this this

00:17:56,440 --> 00:18:02,200
company implemented the whole thing in

00:17:59,290 --> 00:18:05,170
PHP so there you know PHP enthusiasts

00:18:02,200 --> 00:18:06,940
and coders and stuff and so from the

00:18:05,170 --> 00:18:10,059
from the community of different

00:18:06,940 --> 00:18:12,730
programmers they came up with a node.js

00:18:10,059 --> 00:18:15,280
client a Python client a ruby client and

00:18:12,730 --> 00:18:17,110
you know a closure client and a whole

00:18:15,280 --> 00:18:18,520
bunch of other languages and so I

00:18:17,110 --> 00:18:20,830
decided well I was going to write one

00:18:18,520 --> 00:18:23,470
for pearl because I like geocoding and

00:18:20,830 --> 00:18:26,650
i'm interested in geo coding and I just

00:18:23,470 --> 00:18:28,480
wanted to to that it seemed like they

00:18:26,650 --> 00:18:31,290
had a really nice API so I wrote this

00:18:28,480 --> 00:18:34,180
library called web service gioco do

00:18:31,290 --> 00:18:35,920
just as an aside I've started putting

00:18:34,180 --> 00:18:39,040
all of my pearl web services into the

00:18:35,920 --> 00:18:41,680
web service space on Sipan I've noticed

00:18:39,040 --> 00:18:43,030
that more and more of web service

00:18:41,680 --> 00:18:45,430
authors are starting to collect things

00:18:43,030 --> 00:18:49,090
in there instead of say net which is

00:18:45,430 --> 00:18:52,870
getting very very overpopulated I have

00:18:49,090 --> 00:18:54,730
occasionally used net too but I'm trying

00:18:52,870 --> 00:18:56,950
to use a web service now for all of my

00:18:54,730 --> 00:18:58,660
new libraries and so I would also

00:18:56,950 --> 00:19:02,290
encourage you to use web service for

00:18:58,660 --> 00:19:03,760
yours and join join join the community

00:19:02,290 --> 00:19:06,670
that's growing around that that

00:19:03,760 --> 00:19:08,890
namespace so you know I just hacked out

00:19:06,670 --> 00:19:10,180
the first thing in a couple hours I'd

00:19:08,890 --> 00:19:12,550
say the first try was definitely a

00:19:10,180 --> 00:19:15,460
Minimum Viable library it really only

00:19:12,550 --> 00:19:17,170
supported forward name lookups which is

00:19:15,460 --> 00:19:19,810
to say you could give it an address

00:19:17,170 --> 00:19:22,030
which is you know a street address and a

00:19:19,810 --> 00:19:24,880
city in a zip code and a state and it

00:19:22,030 --> 00:19:27,940
would give you back a latitude longitude

00:19:24,880 --> 00:19:31,600
pair and that's that's the only service

00:19:27,940 --> 00:19:33,520
they offered and i would say that the

00:19:31,600 --> 00:19:37,270
first attempt at writing this code was

00:19:33,520 --> 00:19:39,700
not great so it worked but you know the

00:19:37,270 --> 00:19:43,000
code structure was not where i was super

00:19:39,700 --> 00:19:46,360
happy with it and you know it was good

00:19:43,000 --> 00:19:49,060
enough basically so about a month later

00:19:46,360 --> 00:19:51,280
or six weeks later so I got an email

00:19:49,060 --> 00:19:52,750
from them because I'd been coordinating

00:19:51,280 --> 00:19:53,710
said hey you know I wrote a pearl client

00:19:52,750 --> 00:19:57,640
for this and I'm going to put it on

00:19:53,710 --> 00:19:59,530
Sipan and I uploaded the to github and

00:19:57,640 --> 00:20:00,730
so they they sent me an email about a

00:19:59,530 --> 00:20:02,620
week before they were going to release

00:20:00,730 --> 00:20:04,570
this new feature which was reverse

00:20:02,620 --> 00:20:05,950
geocoding that's where you give a

00:20:04,570 --> 00:20:10,630
latitude and longitude and you get back

00:20:05,950 --> 00:20:16,150
a street address so i got this email and

00:20:10,630 --> 00:20:18,340
i was very sad about it and basically i

00:20:16,150 --> 00:20:21,160
had to tear apart my entire library and

00:20:18,340 --> 00:20:23,050
just start over again so I was kind of

00:20:21,160 --> 00:20:25,420
stuck with this big massive code and I

00:20:23,050 --> 00:20:27,370
wasn't very happy with it one of the

00:20:25,420 --> 00:20:30,040
things that I did that was wrong to

00:20:27,370 --> 00:20:32,740
start with was I broke encapsulation so

00:20:30,040 --> 00:20:34,630
I had a lot of messy stuff everywhere I

00:20:32,740 --> 00:20:36,460
was serializing things all over the

00:20:34,630 --> 00:20:40,150
place I was deserializing them all over

00:20:36,460 --> 00:20:42,190
the place I wasn't actually handling the

00:20:40,150 --> 00:20:44,530
objects you know sort of respectfully I

00:20:42,190 --> 00:20:44,770
guess is the way I would put it and like

00:20:44,530 --> 00:20:46,390
I said

00:20:44,770 --> 00:20:49,210
the code worked right as a consumer of

00:20:46,390 --> 00:20:51,940
the code maybe you wouldn't care so much

00:20:49,210 --> 00:20:53,740
about its implementation but you know

00:20:51,940 --> 00:20:56,590
just as someone that appreciates nice

00:20:53,740 --> 00:20:59,860
clean code I wasn't very happy with it

00:20:56,590 --> 00:21:02,290
and so I actually essentially left me

00:20:59,860 --> 00:21:05,110
the top level API was the same but all

00:21:02,290 --> 00:21:07,480
of the internal guts of it pretty much

00:21:05,110 --> 00:21:10,600
got sledge-hammered and so we rebuilt

00:21:07,480 --> 00:21:11,740
the library into a new form that was a

00:21:10,600 --> 00:21:14,440
little bit nicer a little bit more

00:21:11,740 --> 00:21:16,090
elegant you know it's still not as super

00:21:14,440 --> 00:21:18,250
pretty right it's not like you're going

00:21:16,090 --> 00:21:19,570
to find it in a magazine or anything but

00:21:18,250 --> 00:21:24,010
I'm certainly a lot happier with the

00:21:19,570 --> 00:21:27,130
code and so what I discovered was you

00:21:24,010 --> 00:21:29,500
know when you think carefully about how

00:21:27,130 --> 00:21:33,310
you want to implement your objects and

00:21:29,500 --> 00:21:35,290
your roles it leads you to some design

00:21:33,310 --> 00:21:37,810
patterns and that's what i wrote my post

00:21:35,290 --> 00:21:40,450
about because i just finished doing all

00:21:37,810 --> 00:21:42,430
this refactoring work and supporting

00:21:40,450 --> 00:21:48,160
extra fields and i'm going to talk about

00:21:42,430 --> 00:21:50,890
some of those things in a minute the

00:21:48,160 --> 00:21:52,600
first thing I wanted to show you was so

00:21:50,890 --> 00:21:56,800
here's this is the start of the text

00:21:52,600 --> 00:21:59,350
slides sorry it's just sort of a random

00:21:56,800 --> 00:22:00,430
request roll and so here I'm using mu

00:21:59,350 --> 00:22:02,740
roll there's a couple of things I want

00:22:00,430 --> 00:22:05,350
to I want to suggest and point out to

00:22:02,740 --> 00:22:08,680
you the first is that mu specifically

00:22:05,350 --> 00:22:11,350
fate Eliza's warnings I think that's

00:22:08,680 --> 00:22:12,910
fine i guess as a choice i don't i don't

00:22:11,350 --> 00:22:16,420
necessarily agree with the fact that

00:22:12,910 --> 00:22:18,430
it's a default but the thing is is that

00:22:16,420 --> 00:22:20,650
if you include or use mu role in your

00:22:18,430 --> 00:22:23,080
web service client then you are fatal

00:22:20,650 --> 00:22:25,990
izing warnings for your consumers so if

00:22:23,080 --> 00:22:28,090
someone builds code on top of this

00:22:25,990 --> 00:22:30,040
library and you don't include use

00:22:28,090 --> 00:22:31,480
morning's a non-fatal all then what's

00:22:30,040 --> 00:22:33,130
going to happen is as soon as they get a

00:22:31,480 --> 00:22:35,500
warning in their code then it's all

00:22:33,130 --> 00:22:37,510
going to die and unless you set

00:22:35,500 --> 00:22:39,370
expectations that that's the behavior

00:22:37,510 --> 00:22:41,920
that you're giving them that's probably

00:22:39,370 --> 00:22:44,020
not a very nice thing to do so I

00:22:41,920 --> 00:22:45,880
strongly recommend that you d fatal eyes

00:22:44,020 --> 00:22:49,180
warnings and the way you do that is

00:22:45,880 --> 00:22:52,150
right there and I'm also as you can see

00:22:49,180 --> 00:22:53,950
using HTTP tiny another design pattern

00:22:52,150 --> 00:22:57,880
that i personally like to use is I use

00:22:53,950 --> 00:22:58,570
confess to to throw errors so whenever I

00:22:57,880 --> 00:23:00,850
have exception

00:22:58,570 --> 00:23:03,720
or problems with my library's i use

00:23:00,850 --> 00:23:06,940
confess to to die to throw an exception

00:23:03,720 --> 00:23:08,289
and I tell the people that consume it

00:23:06,940 --> 00:23:10,419
that if they you know want something

00:23:08,289 --> 00:23:12,870
that's more grace graceful they can use

00:23:10,419 --> 00:23:15,519
try tiny which is a great solution for

00:23:12,870 --> 00:23:16,960
capturing fatal errors and you know

00:23:15,519 --> 00:23:18,639
recovering from them in some way that's

00:23:16,960 --> 00:23:24,490
better than just you know dumping a

00:23:18,639 --> 00:23:26,169
stack trace and dying so there's a

00:23:24,490 --> 00:23:28,509
couple of things also here that I think

00:23:26,169 --> 00:23:30,820
are important I have a couple of

00:23:28,509 --> 00:23:33,850
attributes that I also suggest that you

00:23:30,820 --> 00:23:35,950
look at or work with one is a user agent

00:23:33,850 --> 00:23:38,320
and I made it lazy which is pretty

00:23:35,950 --> 00:23:39,970
awesome that defers all the costs of

00:23:38,320 --> 00:23:42,190
initialization until you actually need

00:23:39,970 --> 00:23:45,580
to send a request and that could be a

00:23:42,190 --> 00:23:48,940
nice start up speed optimization for

00:23:45,580 --> 00:23:51,460
people that can seem your library and i

00:23:48,940 --> 00:23:54,279
also have a base URL attribute so this

00:23:51,460 --> 00:23:55,809
is a nice way to centralize what service

00:23:54,279 --> 00:23:58,120
URL you're going to use for your web

00:23:55,809 --> 00:24:00,990
service client so for example in this

00:23:58,120 --> 00:24:04,330
particular example i have api fubar I 0

00:24:00,990 --> 00:24:07,990
because I 0 is the new hotness but I

00:24:04,330 --> 00:24:09,220
have had some api's change from there

00:24:07,990 --> 00:24:10,960
was one API in particular that I'm

00:24:09,220 --> 00:24:15,399
thinking of the for easy post which is a

00:24:10,960 --> 00:24:16,840
a postage service where you give it

00:24:15,399 --> 00:24:19,389
dimensions and all sorts of stuff and it

00:24:16,840 --> 00:24:20,909
will go ahead and create postage labels

00:24:19,389 --> 00:24:23,590
for you to use for shipping services

00:24:20,909 --> 00:24:27,159
they are started out their service with

00:24:23,590 --> 00:24:29,649
easy post CO and then eventually they

00:24:27,159 --> 00:24:31,000
acquired the easy post com domain name

00:24:29,649 --> 00:24:34,659
and then they switched all of their

00:24:31,000 --> 00:24:36,970
service URLs to calm and because i had

00:24:34,659 --> 00:24:39,100
centralized all of the places in my code

00:24:36,970 --> 00:24:40,509
with this one URL is just that one

00:24:39,100 --> 00:24:43,000
update and you know and then i just do a

00:24:40,509 --> 00:24:45,730
new Sipan release and and it's it's good

00:24:43,000 --> 00:24:48,129
to go so I think that's a really really

00:24:45,730 --> 00:24:50,169
good pattern to one other thing I wanted

00:24:48,129 --> 00:24:54,419
to show off in the particular request

00:24:50,169 --> 00:24:58,509
object is this underscore request method

00:24:54,419 --> 00:25:00,009
in this particular case I'm telling you

00:24:58,509 --> 00:25:02,559
ideally the data is already see realized

00:25:00,009 --> 00:25:08,200
but but here's here's the exception that

00:25:02,559 --> 00:25:09,700
proves the rule sometimes you're not

00:25:08,200 --> 00:25:11,799
going to have a scalar right you're not

00:25:09,700 --> 00:25:12,380
or a ref you know like typically that

00:25:11,799 --> 00:25:19,130
would be a

00:25:12,380 --> 00:25:20,450
hash ref or something typically yeah

00:25:19,130 --> 00:25:22,760
it's going to be a rav4 it's going to be

00:25:20,450 --> 00:25:25,160
a hash or string or something that's you

00:25:22,760 --> 00:25:27,320
know ready to sign on the wire with the

00:25:25,160 --> 00:25:29,210
gioco do library I didn't do this

00:25:27,320 --> 00:25:32,240
pattern and the reason I didn't do that

00:25:29,210 --> 00:25:34,880
was because I have a location object as

00:25:32,240 --> 00:25:36,980
part of the package so you can say web

00:25:34,880 --> 00:25:39,140
service gioco do location and then you

00:25:36,980 --> 00:25:41,450
can give it a street address and a zip

00:25:39,140 --> 00:25:42,830
code and it will go ahead and do its

00:25:41,450 --> 00:25:46,220
best to query based on the information

00:25:42,830 --> 00:25:48,200
that you provide to it but I also allow

00:25:46,220 --> 00:25:50,120
you to just send in a bear string so you

00:25:48,200 --> 00:25:53,750
could put in like a zip code you know

00:25:50,120 --> 00:25:57,170
like 100 17 and you know just use that

00:25:53,750 --> 00:26:00,170
as your geolocation entry and because I

00:25:57,170 --> 00:26:02,510
allow that front of the consumers I

00:26:00,170 --> 00:26:04,190
couldn't go ahead and serialize my data

00:26:02,510 --> 00:26:06,890
before it hit the request thing here so

00:26:04,190 --> 00:26:09,170
I have some logic in the gioco do

00:26:06,890 --> 00:26:11,150
library that is a little bit less clean

00:26:09,170 --> 00:26:13,070
than this but in general I think this is

00:26:11,150 --> 00:26:15,680
a good pattern and this is one I try to

00:26:13,070 --> 00:26:18,890
follow when I can so I have a URL

00:26:15,680 --> 00:26:21,020
builder that takes an operation that's

00:26:18,890 --> 00:26:24,740
what the dollar op is so for example

00:26:21,020 --> 00:26:27,650
this might be I don't know update update

00:26:24,740 --> 00:26:30,410
user account or you know create foo or

00:26:27,650 --> 00:26:32,210
something and so that's what that is and

00:26:30,410 --> 00:26:33,640
that's usually part of the URL component

00:26:32,210 --> 00:26:37,160
right you're making a call into it

00:26:33,640 --> 00:26:38,630
typically it's going to be a post so

00:26:37,160 --> 00:26:42,050
then we make our request through our you

00:26:38,630 --> 00:26:43,820
a attribute which HTTP tiny has a

00:26:42,050 --> 00:26:46,520
request method and it takes three

00:26:43,820 --> 00:26:48,320
parameters which is to say it takes the

00:26:46,520 --> 00:26:50,030
verb and it takes the location so

00:26:48,320 --> 00:26:53,780
whatever that is and then it takes a

00:26:50,030 --> 00:26:55,790
hash ref and the hash ref has to contain

00:26:53,780 --> 00:26:59,090
content so this is what you're going to

00:26:55,790 --> 00:27:00,640
post and they continue other things too

00:26:59,090 --> 00:27:05,450
for example you can add new headers here

00:27:00,640 --> 00:27:07,490
and other things like that oh I just

00:27:05,450 --> 00:27:09,400
remembered one other thing that I like

00:27:07,490 --> 00:27:11,630
to do on the user agent side of things

00:27:09,400 --> 00:27:13,280
and I forgot to mention this earlier but

00:27:11,630 --> 00:27:15,200
i'll mention it now is I like to set

00:27:13,280 --> 00:27:16,970
default headers for content type for

00:27:15,200 --> 00:27:18,860
example if I'm using a JSON service I

00:27:16,970 --> 00:27:20,960
always make sure that I set content type

00:27:18,860 --> 00:27:23,240
to JSON says that's what I'm setting

00:27:20,960 --> 00:27:25,790
some services are super finicky about

00:27:23,240 --> 00:27:27,000
what format you get back sometimes you

00:27:25,790 --> 00:27:29,770
need to

00:27:27,000 --> 00:27:31,690
I'm accept header which tells it which

00:27:29,770 --> 00:27:33,820
which tells the server what type of

00:27:31,690 --> 00:27:36,160
content you will accept in the return

00:27:33,820 --> 00:27:37,900
and so for example you might want to set

00:27:36,160 --> 00:27:40,059
a pair of these so you have content type

00:27:37,900 --> 00:27:41,950
application JSON because you are sending

00:27:40,059 --> 00:27:44,080
application JSON and you might have a

00:27:41,950 --> 00:27:45,790
header that says except application JSON

00:27:44,080 --> 00:27:48,460
because you want application JSON to

00:27:45,790 --> 00:27:49,870
return to you if you had something that

00:27:48,460 --> 00:27:53,620
was XML you could change it to be

00:27:49,870 --> 00:27:54,910
application XML etc etc and the other

00:27:53,620 --> 00:27:58,120
thing I like to do is have the user

00:27:54,910 --> 00:28:02,200
agent up here defined right there in one

00:27:58,120 --> 00:28:06,160
location it in HTTP tiny is specifically

00:28:02,200 --> 00:28:08,890
if you put a space between the end of

00:28:06,160 --> 00:28:12,640
the string that you have here and the

00:28:08,890 --> 00:28:14,350
the end of the single quote then HTTP

00:28:12,640 --> 00:28:17,980
tiny will automatically append its

00:28:14,350 --> 00:28:20,530
current version string to to the library

00:28:17,980 --> 00:28:21,880
call so when you send a request out it

00:28:20,530 --> 00:28:24,910
will actually have the user agent string

00:28:21,880 --> 00:28:27,870
be that string plus the HTTP tiny

00:28:24,910 --> 00:28:30,700
version and I think that's super useful

00:28:27,870 --> 00:28:32,770
for people that are upstream of you it's

00:28:30,700 --> 00:28:34,179
just a polite way to say hey this is a /

00:28:32,770 --> 00:28:35,890
web client and here's the current

00:28:34,179 --> 00:28:37,450
version and this is what we're doing and

00:28:35,890 --> 00:28:39,130
we're hitting your service so that's a

00:28:37,450 --> 00:28:42,700
way for them to just keep track of how

00:28:39,130 --> 00:28:45,240
popular you know their various client

00:28:42,700 --> 00:28:47,140
libraries are so it's it's a nice way to

00:28:45,240 --> 00:28:48,549
let people that are running services

00:28:47,140 --> 00:28:51,600
know that you're using their service

00:28:48,549 --> 00:28:54,280
with the particular web service client

00:28:51,600 --> 00:28:57,160
right so I mentioned earlier i like to

00:28:54,280 --> 00:28:58,720
do confesses when I fail so let you know

00:28:57,160 --> 00:29:02,200
let's say that op is like an

00:28:58,720 --> 00:29:04,120
if-then-else type data structure you get

00:29:02,200 --> 00:29:05,500
back the URL as a string and if you

00:29:04,120 --> 00:29:08,350
don't get one you say couldn't build it

00:29:05,500 --> 00:29:11,590
and confess that and then down here if

00:29:08,350 --> 00:29:14,049
the results is a success then you go

00:29:11,590 --> 00:29:15,540
ahead and you just return the result so

00:29:14,049 --> 00:29:17,350
the result comes back as a hash ref

00:29:15,540 --> 00:29:20,559
typically it's going to have some sort

00:29:17,350 --> 00:29:22,870
of JSON string in it as its content and

00:29:20,559 --> 00:29:24,910
then if you don't get that if you get

00:29:22,870 --> 00:29:26,950
some other air code or something then

00:29:24,910 --> 00:29:29,049
you can just go ahead and and output

00:29:26,950 --> 00:29:30,490
what that is so status and content show

00:29:29,049 --> 00:29:31,720
you what the air is tell you where the

00:29:30,490 --> 00:29:34,450
air happened from the collars

00:29:31,720 --> 00:29:35,799
perspective which is which is nice for

00:29:34,450 --> 00:29:38,049
the for the people that build on your

00:29:35,799 --> 00:29:39,370
library if you don't use confess and

00:29:38,049 --> 00:29:39,590
it's just going to say I died that you

00:29:39,370 --> 00:29:43,130
know

00:29:39,590 --> 00:29:45,200
whatever line 24 and in module X which

00:29:43,130 --> 00:29:46,340
is which is fine but it's not a great

00:29:45,200 --> 00:29:52,700
air message because it doesn't really

00:29:46,340 --> 00:29:58,580
help them very much all right so i have

00:29:52,700 --> 00:30:02,029
another another role here again

00:29:58,580 --> 00:30:05,000
non-fatal izing using non-fatal using

00:30:02,029 --> 00:30:07,190
json which is a nice switch here I could

00:30:05,000 --> 00:30:09,289
have put JSON PP but i think the normal

00:30:07,190 --> 00:30:11,649
usage pattern is to use the json module

00:30:09,289 --> 00:30:15,080
which pics between which one you have

00:30:11,649 --> 00:30:16,730
again using carp confess in this case

00:30:15,080 --> 00:30:18,740
I'm not actually confessing anything

00:30:16,730 --> 00:30:21,020
because I don't have any exceptions here

00:30:18,740 --> 00:30:22,340
but this is a really simple pattern that

00:30:21,020 --> 00:30:26,000
you could use to implement JSON

00:30:22,340 --> 00:30:29,840
serializer or deserializer and then

00:30:26,000 --> 00:30:31,669
finally I have this this slide where I'm

00:30:29,840 --> 00:30:33,049
sure to sort of showing a data object so

00:30:31,669 --> 00:30:36,350
this this will be the way that you

00:30:33,049 --> 00:30:38,360
consume you consume the rolls so for

00:30:36,350 --> 00:30:40,220
example in my data object i'm saying

00:30:38,360 --> 00:30:42,529
this is something that i can serialize

00:30:40,220 --> 00:30:44,840
using json so i'm going to go ahead and

00:30:42,529 --> 00:30:48,169
include the role here and that's the

00:30:44,840 --> 00:30:51,289
whiff keyword right here with string of

00:30:48,169 --> 00:30:54,470
this class especially not a class though

00:30:51,289 --> 00:30:56,750
so i probably shouldn't say that but in

00:30:54,470 --> 00:30:59,210
any case down here i have a method

00:30:56,750 --> 00:31:01,100
called underscore serialize so i'm

00:30:59,210 --> 00:31:03,649
making the data object responsible for

00:31:01,100 --> 00:31:05,630
serialization any time that we want to

00:31:03,649 --> 00:31:08,690
go ahead and send this over the wire

00:31:05,630 --> 00:31:10,760
we're going to go ahead and call this

00:31:08,690 --> 00:31:12,919
underscore serialize to actually create

00:31:10,760 --> 00:31:16,190
the data object that we want to send to

00:31:12,919 --> 00:31:17,600
the downstream service are there any

00:31:16,190 --> 00:31:23,230
questions at this point before I go on

00:31:17,600 --> 00:31:23,230
to talk about testing any question

00:31:23,570 --> 00:31:30,700
let's talk about testing

00:31:26,830 --> 00:31:32,850
I think testing is is something that is

00:31:30,700 --> 00:31:36,130
often overlooked in web service clients

00:31:32,850 --> 00:31:39,610
and it makes me sad I don't I don't

00:31:36,130 --> 00:31:40,929
quite understand why I'm gonna go

00:31:39,610 --> 00:31:43,360
through a couple of slides that that

00:31:40,929 --> 00:31:47,760
talk about some some best practices with

00:31:43,360 --> 00:31:47,760
testing that I try to follow when I can

00:31:48,450 --> 00:31:53,830
notice I say what I can so it's not all

00:31:51,970 --> 00:31:56,019
the time that you need to do every

00:31:53,830 --> 00:31:57,220
single thing but in general I would say

00:31:56,019 --> 00:31:58,899
that if you're writing web service

00:31:57,220 --> 00:32:00,580
clients a good way for you to be

00:31:58,899 --> 00:32:02,710
confident that you're providing the

00:32:00,580 --> 00:32:08,919
service that people can you know

00:32:02,710 --> 00:32:10,240
consumed with with some level of I don't

00:32:08,919 --> 00:32:12,700
know what the right word is assurance I

00:32:10,240 --> 00:32:13,899
guess some level of assurance that it's

00:32:12,700 --> 00:32:16,000
actually going to do what you claim it

00:32:13,899 --> 00:32:19,120
does is to go ahead and write tests and

00:32:16,000 --> 00:32:20,409
those can take the form of unit tests so

00:32:19,120 --> 00:32:22,779
one of the things that I like to do in

00:32:20,409 --> 00:32:24,820
unit testing is test the things that

00:32:22,779 --> 00:32:27,220
don't require internet access or don't

00:32:24,820 --> 00:32:30,460
require credentials or don't require

00:32:27,220 --> 00:32:34,269
external fixtures in order to execute

00:32:30,460 --> 00:32:36,850
the test these would be things like data

00:32:34,269 --> 00:32:38,649
objects so for example if I have a

00:32:36,850 --> 00:32:41,289
getter in a setter for an attribute I'm

00:32:38,649 --> 00:32:42,970
going to go ahead and make sure that if

00:32:41,289 --> 00:32:44,889
there's business logic inside of that

00:32:42,970 --> 00:32:49,720
like that if I have triggers or default

00:32:44,889 --> 00:32:51,070
values or if I have builders right on

00:32:49,720 --> 00:32:53,440
certain attributes and stuff like that

00:32:51,070 --> 00:32:54,490
in mu or moose I'm going to go ahead and

00:32:53,440 --> 00:32:56,679
make sure that those things actually

00:32:54,490 --> 00:32:58,090
execute in the way that I expect so I'm

00:32:56,679 --> 00:32:59,380
gonna make all of those unit tests and

00:32:58,090 --> 00:33:02,200
i'm going to set those up separately

00:32:59,380 --> 00:33:06,279
apart from things that need more

00:33:02,200 --> 00:33:08,919
fixtures what i've found is is that i

00:33:06,279 --> 00:33:11,080
actually catch a lot of bugs that way by

00:33:08,919 --> 00:33:13,269
testing all the things that don't need

00:33:11,080 --> 00:33:15,100
internet access in their own tests and

00:33:13,269 --> 00:33:17,529
that way i'm not tripped up by the fact

00:33:15,100 --> 00:33:20,260
that you know i need to network access

00:33:17,529 --> 00:33:22,059
and i have crappy hotel Wi-Fi when I'm

00:33:20,260 --> 00:33:24,340
doing my unit tests and they might

00:33:22,059 --> 00:33:26,350
timeout or whatever you know so those

00:33:24,340 --> 00:33:30,220
things you want to try to isolate the

00:33:26,350 --> 00:33:32,139
the test failure cause you know

00:33:30,220 --> 00:33:33,940
separately from the actual like code

00:33:32,139 --> 00:33:35,559
that you're testing if you have a

00:33:33,940 --> 00:33:37,330
fixture that fails to set up that's a

00:33:35,559 --> 00:33:38,770
different kind of failure than if your

00:33:37,330 --> 00:33:40,690
code is just got a bug in it or

00:33:38,770 --> 00:33:43,840
something so unit tests are

00:33:40,690 --> 00:33:46,060
good unit tests separate from from

00:33:43,840 --> 00:33:49,270
internet access and other things is also

00:33:46,060 --> 00:33:51,640
awesome yeah so you're writing web

00:33:49,270 --> 00:33:53,410
service you 99 percent of the time we're

00:33:51,640 --> 00:33:57,310
going to need to have internet access to

00:33:53,410 --> 00:33:59,050
execute functional tests and make sure

00:33:57,310 --> 00:34:00,310
that you test whether or not you can

00:33:59,050 --> 00:34:02,140
connect to the internet before you

00:34:00,310 --> 00:34:06,220
actually execute tests that require the

00:34:02,140 --> 00:34:08,740
internet I have been bitten by this in

00:34:06,220 --> 00:34:11,260
the past when for example I fail or

00:34:08,740 --> 00:34:13,330
forget to put in a test for network

00:34:11,260 --> 00:34:15,100
access and then upload something to see

00:34:13,330 --> 00:34:16,810
pan and then the next day I come back

00:34:15,100 --> 00:34:19,630
and I get a see pants report that says

00:34:16,810 --> 00:34:21,910
you know my test failed 95 97 times on

00:34:19,630 --> 00:34:26,110
every platform you know and I'm like

00:34:21,910 --> 00:34:28,240
what it worked on my machine so what I

00:34:26,110 --> 00:34:30,310
would strongly suggest is that you

00:34:28,240 --> 00:34:32,080
include tests to make sure that you can

00:34:30,310 --> 00:34:34,420
test the network and if the network is

00:34:32,080 --> 00:34:36,640
not available then you go ahead and skip

00:34:34,420 --> 00:34:39,250
the test I know it seems common sense

00:34:36,640 --> 00:34:40,720
but again this is trying to collect some

00:34:39,250 --> 00:34:43,330
some design patterns at best practices

00:34:40,720 --> 00:34:46,210
so I have forgotten to do this in the

00:34:43,330 --> 00:34:53,830
past and it's it's been irritating so

00:34:46,210 --> 00:34:56,380
just a friendly reminder yeah so uh so

00:34:53,830 --> 00:34:59,500
so funny story funny this talk was

00:34:56,380 --> 00:35:01,900
supposed to be tomorrow and I have been

00:34:59,500 --> 00:35:06,600
feverishly working on a test called test

00:35:01,900 --> 00:35:09,580
requires internet and what it does is it

00:35:06,600 --> 00:35:11,140
lets you say something like use test

00:35:09,580 --> 00:35:15,190
requires internet and then you can give

00:35:11,140 --> 00:35:17,830
it a list of key of host names and port

00:35:15,190 --> 00:35:19,000
numbers and it will go ahead and check

00:35:17,830 --> 00:35:21,190
all those and if they're all available

00:35:19,000 --> 00:35:22,480
then it will return thumbs up and if

00:35:21,190 --> 00:35:23,770
they're not available then it will say

00:35:22,480 --> 00:35:27,970
not available and it will skip your

00:35:23,770 --> 00:35:29,620
tests but but because I had to give the

00:35:27,970 --> 00:35:31,480
talk today I didn't get to finish that

00:35:29,620 --> 00:35:33,460
so it's not on Sipan yet but hopefully

00:35:31,480 --> 00:35:36,180
it will be on sipan by the end of this

00:35:33,460 --> 00:35:38,770
week so keep your eyes peeled for that

00:35:36,180 --> 00:35:43,150
but in the interim what I can tell you

00:35:38,770 --> 00:35:45,760
to do is core corporal contains socket

00:35:43,150 --> 00:35:48,340
so socket is a cheap and easy way for

00:35:45,760 --> 00:35:51,370
you to create a socket to an arbitrary

00:35:48,340 --> 00:35:54,040
port number and if you look at the test

00:35:51,370 --> 00:35:54,460
for web service gioco do you will

00:35:54,040 --> 00:35:56,589
actually

00:35:54,460 --> 00:35:58,770
this repeated in four different test

00:35:56,589 --> 00:36:01,240
files the idea is that you open a socket

00:35:58,770 --> 00:36:02,650
to the hostname that you care about and

00:36:01,240 --> 00:36:04,690
the port number that you care about so

00:36:02,650 --> 00:36:07,480
if you're doing HTTPS tests you'd hit

00:36:04,690 --> 00:36:09,339
443 if you're doing you know HTTP test

00:36:07,480 --> 00:36:12,839
you'd hit port 80 if you're doing telnet

00:36:09,339 --> 00:36:15,250
tests you'd hit port 23 or whatever and

00:36:12,839 --> 00:36:16,720
just make sure you can open that socket

00:36:15,250 --> 00:36:19,030
if you get an air back from the socket

00:36:16,720 --> 00:36:20,470
API then you know that you can't use the

00:36:19,030 --> 00:36:23,320
internet so go ahead and skip tests

00:36:20,470 --> 00:36:25,869
that's a cheap and easy way to to do

00:36:23,320 --> 00:36:28,900
that like I said hopefully that will be

00:36:25,869 --> 00:36:31,210
encapsulated in a test in a test module

00:36:28,900 --> 00:36:34,619
pretty soon so that you don't have to

00:36:31,210 --> 00:36:39,220
don't have to worry about that yourself

00:36:34,619 --> 00:36:40,390
yeah so next next slide so one of the

00:36:39,220 --> 00:36:43,089
other things that you're probably going

00:36:40,390 --> 00:36:46,119
to need for cat pictures as a service is

00:36:43,089 --> 00:36:48,130
some sort of API credential and this is

00:36:46,119 --> 00:36:50,140
ubiquitous now you you need a username

00:36:48,130 --> 00:36:51,880
and password a combination which you

00:36:50,140 --> 00:36:54,220
send along and basic authorization over

00:36:51,880 --> 00:36:55,780
HTTPS or you need to do some kind of

00:36:54,220 --> 00:36:58,210
crazy hash signing thing like with

00:36:55,780 --> 00:37:00,339
Amazon Web Services or you need to do

00:36:58,210 --> 00:37:02,830
some kind of token basically that says

00:37:00,339 --> 00:37:04,810
hey you know I'm developer acts and I

00:37:02,830 --> 00:37:07,690
using this client and I need to access

00:37:04,810 --> 00:37:10,900
your API please this is what I want to

00:37:07,690 --> 00:37:12,760
do and what I've found is writing tests

00:37:10,900 --> 00:37:15,369
that need credentials is also somewhat

00:37:12,760 --> 00:37:16,839
problematic for example like you don't

00:37:15,369 --> 00:37:18,849
want to include your personal

00:37:16,839 --> 00:37:20,859
credentials in a test file that gets

00:37:18,849 --> 00:37:24,609
uploaded on Sipan that seems like that

00:37:20,859 --> 00:37:26,950
would not be a good idea so what I have

00:37:24,609 --> 00:37:28,480
found is that some some service

00:37:26,950 --> 00:37:30,430
providers are actually really helpful if

00:37:28,480 --> 00:37:31,690
you email them and say you know hey I'm

00:37:30,430 --> 00:37:34,359
writing this / web client for your

00:37:31,690 --> 00:37:36,250
service I really like your service do

00:37:34,359 --> 00:37:38,260
you have a test credential that I can

00:37:36,250 --> 00:37:39,970
embed in a test file sometimes they'll

00:37:38,260 --> 00:37:41,920
say yes or sometimes they will make you

00:37:39,970 --> 00:37:43,210
one and send you one and those

00:37:41,920 --> 00:37:45,790
credentials can be used to execute

00:37:43,210 --> 00:37:47,500
functional tests you know and they're

00:37:45,790 --> 00:37:49,349
limited in such a way that you know

00:37:47,500 --> 00:37:51,369
people that want to reuse them would be

00:37:49,349 --> 00:37:53,619
prohibited from doing so unless they

00:37:51,369 --> 00:37:55,150
were actually executing tests sometimes

00:37:53,619 --> 00:37:58,450
those require alternate URLs and so

00:37:55,150 --> 00:38:01,210
forth but the moral of the story is is

00:37:58,450 --> 00:38:03,700
that if you need a test credential ask

00:38:01,210 --> 00:38:04,690
for a test credential ninety percent of

00:38:03,700 --> 00:38:07,359
the time at least in my experience

00:38:04,690 --> 00:38:08,500
people have been super helpful with you

00:38:07,359 --> 00:38:11,650
know getting there

00:38:08,500 --> 00:38:13,210
api a client in pearl you know maybe

00:38:11,650 --> 00:38:15,100
they're not pearl gurus themselves or

00:38:13,210 --> 00:38:17,020
whatever but they are interested in

00:38:15,100 --> 00:38:18,730
having pearl clients so they will do

00:38:17,020 --> 00:38:21,940
what they can to help you within reason

00:38:18,730 --> 00:38:23,620
right so if you're you know doing crazy

00:38:21,940 --> 00:38:24,910
things with their service or you know

00:38:23,620 --> 00:38:27,640
causing problems or whatever then

00:38:24,910 --> 00:38:29,320
they'll probably tell you to stop but if

00:38:27,640 --> 00:38:31,750
you need help or you want you want you

00:38:29,320 --> 00:38:33,280
know can you give me you know 100

00:38:31,750 --> 00:38:34,900
requests a month for free or something

00:38:33,280 --> 00:38:36,820
like that people are really open to

00:38:34,900 --> 00:38:39,850
doing that so you know give it a shot

00:38:36,820 --> 00:38:41,620
the worst they can do is say no and if

00:38:39,850 --> 00:38:43,270
they say no then just you know use your

00:38:41,620 --> 00:38:45,340
own personal credential this is what I

00:38:43,270 --> 00:38:47,050
usually do and I pull it from the

00:38:45,340 --> 00:38:49,540
environment so one of the things I'll do

00:38:47,050 --> 00:38:52,090
when the test starts is is look for an

00:38:49,540 --> 00:38:54,580
environment key like service a service

00:38:52,090 --> 00:38:56,320
underscore API key and if that's in the

00:38:54,580 --> 00:38:57,640
environment right so you just do export

00:38:56,320 --> 00:39:01,210
blah blah blah and then you put in your

00:38:57,640 --> 00:39:02,830
key if that's available in in in the

00:39:01,210 --> 00:39:04,150
environment when it's executing it'll go

00:39:02,830 --> 00:39:05,770
ahead and execute the test and if it's

00:39:04,150 --> 00:39:10,600
not then it won't execute the test it

00:39:05,770 --> 00:39:15,190
will skip it are there any questions

00:39:10,600 --> 00:39:17,290
about that again this is one of the

00:39:15,190 --> 00:39:19,960
things I wanted to wrap up into a Sipan

00:39:17,290 --> 00:39:22,300
module haven't quite gotten around to it

00:39:19,960 --> 00:39:24,010
yet but I am interested in writing it

00:39:22,300 --> 00:39:27,880
and so hopefully we'll we'll find some

00:39:24,010 --> 00:39:29,800
to its to get around to doing it sooner

00:39:27,880 --> 00:39:32,500
or later hopefully sooner rather than

00:39:29,800 --> 00:39:34,330
later but again if you check the

00:39:32,500 --> 00:39:36,520
environment for key that you decide on

00:39:34,330 --> 00:39:38,590
and if it's available use it if it's not

00:39:36,520 --> 00:39:40,690
skip it that's another great way to

00:39:38,590 --> 00:39:43,480
write functional tests that are you know

00:39:40,690 --> 00:39:44,680
that fail gracefully in environments

00:39:43,480 --> 00:39:47,220
where those aren't available for like on

00:39:44,680 --> 00:39:51,700
Sipan testers and stuff like that

00:39:47,220 --> 00:39:53,740
finally if you're writing a synopsis in

00:39:51,700 --> 00:39:55,540
your pool and your documentation the pod

00:39:53,740 --> 00:39:57,940
code or the pod that you put with your

00:39:55,540 --> 00:40:01,390
your module most perl modules have

00:39:57,940 --> 00:40:03,640
synopsis that you know kind of have a an

00:40:01,390 --> 00:40:05,500
overview i guess of the main functions

00:40:03,640 --> 00:40:06,850
if you're writing Perl code in that then

00:40:05,500 --> 00:40:08,890
please please please make that at

00:40:06,850 --> 00:40:12,250
functional test of your code take your

00:40:08,890 --> 00:40:13,900
take your code hopefully verbatim right

00:40:12,250 --> 00:40:16,540
out of the pod put it into a unit test

00:40:13,900 --> 00:40:18,310
and again check if Internet's available

00:40:16,540 --> 00:40:20,410
check if there's an API key that's

00:40:18,310 --> 00:40:22,090
available and executed make sure that

00:40:20,410 --> 00:40:23,500
people that consumer library

00:40:22,090 --> 00:40:26,080
can actually just cut and paste that

00:40:23,500 --> 00:40:28,270
with the appropriate API key and execute

00:40:26,080 --> 00:40:29,680
it right away that's going to be a great

00:40:28,270 --> 00:40:31,690
way for people to feel confident that

00:40:29,680 --> 00:40:33,190
your code works that it does what it

00:40:31,690 --> 00:40:35,350
says it does and that it's actually you

00:40:33,190 --> 00:40:38,500
know up-to-date and reasonably inspect

00:40:35,350 --> 00:40:39,760
with the current API so that's another

00:40:38,500 --> 00:40:42,130
thing that I've learned kind of the hard

00:40:39,760 --> 00:40:43,960
way people actually do cut and paste

00:40:42,130 --> 00:40:45,700
your synopsis and test it and if it

00:40:43,960 --> 00:40:48,070
doesn't work then you're going to find

00:40:45,700 --> 00:40:49,960
out about it so my suggestion is is that

00:40:48,070 --> 00:40:51,310
you tested before you release and then

00:40:49,960 --> 00:40:55,540
you won't have to worry about it at all

00:40:51,310 --> 00:40:58,480
I also have this fantastic slide here

00:40:55,540 --> 00:41:01,030
from Dwight you know which is before I

00:40:58,480 --> 00:41:04,030
do anything I ask would an idiot do that

00:41:01,030 --> 00:41:08,280
and then if the answer is yes don't do

00:41:04,030 --> 00:41:11,410
that thing so that's encouraging you to

00:41:08,280 --> 00:41:14,140
think about how you want to make all of

00:41:11,410 --> 00:41:15,820
your objects interact hopefully in a way

00:41:14,140 --> 00:41:17,290
that's more sophisticated than you know

00:41:15,820 --> 00:41:19,750
just getting it done as quickly as you

00:41:17,290 --> 00:41:21,940
can and if you have to blow it up and

00:41:19,750 --> 00:41:23,650
start over again that's fine that's why

00:41:21,940 --> 00:41:26,080
you have AP is right like you can keep

00:41:23,650 --> 00:41:27,850
the outer API and you can blow up the

00:41:26,080 --> 00:41:29,410
interior hopefully and no one's going to

00:41:27,850 --> 00:41:30,910
know no one's going to be the wiser that

00:41:29,410 --> 00:41:34,360
you've changed all this stuff on the

00:41:30,910 --> 00:41:36,850
inside of it and those are the things

00:41:34,360 --> 00:41:41,320
that that I find have really helped me

00:41:36,850 --> 00:41:47,640
build good robust pearl web clients are

00:41:41,320 --> 00:41:47,640
there any questions yeah

00:41:49,660 --> 00:41:52,660
ok

00:41:57,230 --> 00:41:59,950
ok

00:42:03,190 --> 00:42:10,329
okay okay just for the people playing

00:42:07,359 --> 00:42:12,250
along at home the there was a suggestion

00:42:10,329 --> 00:42:14,410
to use a module called net detect to

00:42:12,250 --> 00:42:16,420
test whether or not network is available

00:42:14,410 --> 00:42:18,970
and then there's also a suggestion that

00:42:16,420 --> 00:42:20,920
there's a test module that will actually

00:42:18,970 --> 00:42:24,130
automatically extract and execute your

00:42:20,920 --> 00:42:26,740
synopsis code as a functional test which

00:42:24,130 --> 00:42:28,599
is very cool and I did not do that so

00:42:26,740 --> 00:42:42,700
yeah are there any other questions or

00:42:28,599 --> 00:42:44,079
comments yeah yeah yeah um yeah so uh so

00:42:42,700 --> 00:42:47,349
I know that there's a bunch of sort of

00:42:44,079 --> 00:42:51,760
rest construction kits and i have used

00:42:47,349 --> 00:42:54,430
one of them it's called net api actually

00:42:51,760 --> 00:42:56,859
i think its net eight api HTTP it's

00:42:54,430 --> 00:42:59,410
built on top of mu moose yeah it's built

00:42:56,859 --> 00:43:03,910
on top of moose and i did use it to

00:42:59,410 --> 00:43:06,550
build one web service client and it was

00:43:03,910 --> 00:43:08,530
nice but i felt like it had a really

00:43:06,550 --> 00:43:10,359
heavy cognitive load and what i mean by

00:43:08,530 --> 00:43:12,900
that was it was hard for me to fully

00:43:10,359 --> 00:43:15,220
reason about the way that it did things

00:43:12,900 --> 00:43:17,619
there was almost too much magic there

00:43:15,220 --> 00:43:19,030
for for me to fully comprehend how it

00:43:17,619 --> 00:43:20,440
worked and even though i had good test

00:43:19,030 --> 00:43:22,359
coverage and things and i felt confident

00:43:20,440 --> 00:43:25,510
that the implementation i built on top

00:43:22,359 --> 00:43:27,130
of it was fine it turned out to be

00:43:25,510 --> 00:43:30,280
really difficult for me to get my head

00:43:27,130 --> 00:43:33,760
wrapped around it completely the the

00:43:30,280 --> 00:43:35,200
rest the role rest client thing i have

00:43:33,760 --> 00:43:37,810
not used but it does sound promising

00:43:35,200 --> 00:43:40,329
it's certainly in line with the kind of

00:43:37,810 --> 00:43:43,300
things i'm advocating here i typically

00:43:40,329 --> 00:43:44,980
tend to do exactly what i just described

00:43:43,300 --> 00:43:46,480
in this talk which is to say i will

00:43:44,980 --> 00:43:48,369
build a request role and i will build a

00:43:46,480 --> 00:43:52,180
serializer role and then i will use

00:43:48,369 --> 00:43:53,589
those with custom data objects for the

00:43:52,180 --> 00:43:55,750
particular thing that i'm trying to

00:43:53,589 --> 00:43:58,869
build a service for and roll that into

00:43:55,750 --> 00:44:01,780
one distribution I don't know if it's

00:43:58,869 --> 00:44:04,480
just me personally like you know I'm not

00:44:01,780 --> 00:44:06,849
the world's smartest person so you know

00:44:04,480 --> 00:44:08,560
I'm just trying to do what what's right

00:44:06,849 --> 00:44:12,040
for me and you know gives me confidence

00:44:08,560 --> 00:44:13,270
that I'm solving the problem so there

00:44:12,040 --> 00:44:15,480
are there any other questions or

00:44:13,270 --> 00:44:18,430
comments

00:44:15,480 --> 00:44:19,750
now all right well thank you very much

00:44:18,430 --> 00:44:21,430
for your attention today it's been a

00:44:19,750 --> 00:44:23,230
been a pleasure to talk to you about

00:44:21,430 --> 00:44:27,220
this if you have any questions I'll be

00:44:23,230 --> 00:44:28,960
around you know till all day so yeah

00:44:27,220 --> 00:44:31,560
just come and find me and we'll rap

00:44:28,960 --> 00:44:31,560
about it thank you

00:44:44,859 --> 00:44:46,920

YouTube URL: https://www.youtube.com/watch?v=eLqoi9-ursw


