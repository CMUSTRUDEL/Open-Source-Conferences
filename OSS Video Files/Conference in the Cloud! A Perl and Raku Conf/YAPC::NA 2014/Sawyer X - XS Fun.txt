Title: Sawyer X - XS Fun
Publication date: 2014-06-23
Playlist: YAPC::NA 2014
Description: 
	Excessive accessibility or just extra ecstatic explosions of extremely extraordinarily expressive flexible intoxicant? Excellent exclamation! Multiplexed oxygen-fuelled perplexed pixies relax in saxophone-shaped taxis because they pay no taxes. Inexcusable!
Captions: 
	00:00:38,030 --> 00:00:47,760
good because this is the volume i'm

00:00:40,290 --> 00:00:54,860
going to talk so i hope that's okay come

00:00:47,760 --> 00:00:57,570
on you got 30 seconds damn i remember

00:00:54,860 --> 00:01:01,320
some University the student came in late

00:00:57,570 --> 00:01:03,570
and and the professor is really angry

00:01:01,320 --> 00:01:05,520
and so why do you think you can come in

00:01:03,570 --> 00:01:06,899
layton the kid said well when we were in

00:01:05,520 --> 00:01:08,160
high school they always hold what are

00:01:06,899 --> 00:01:09,479
you free students you can come in

00:01:08,160 --> 00:01:10,649
whatever you want now we're students

00:01:09,479 --> 00:01:18,300
we're going to come in whatever we want

00:01:10,649 --> 00:01:20,399
so I guess that applies maybe not all

00:01:18,300 --> 00:01:24,050
right so i think i think we can start as

00:01:20,399 --> 00:01:30,929
I'm ready can we start louder yeah

00:01:24,050 --> 00:01:36,060
better all right good so um I went thank

00:01:30,929 --> 00:01:38,009
you I want to start and I'm going to

00:01:36,060 --> 00:01:44,009
continue also not just started I want to

00:01:38,009 --> 00:01:47,420
talk about excess Damon it's totally

00:01:44,009 --> 00:01:47,420
inexcusable please come in

00:01:53,450 --> 00:02:01,410
well if they wanted a qualified Speaker

00:01:56,010 --> 00:02:03,690
I wouldn't be here to begin with yeah

00:02:01,410 --> 00:02:07,290
all right so I'm going to talk about

00:02:03,690 --> 00:02:10,110
excess of it and to a lot of you this

00:02:07,290 --> 00:02:13,140
isn't news and that's fine the idea is

00:02:10,110 --> 00:02:16,680
to get access to people to whom it is a

00:02:13,140 --> 00:02:19,010
new thing and it is kind of scary and I

00:02:16,680 --> 00:02:21,300
would like to demystify access a bit

00:02:19,010 --> 00:02:25,320
when I start to talk about accessible

00:02:21,300 --> 00:02:31,440
people usually they think about this or

00:02:25,320 --> 00:02:33,330
this or damn it wait I got this this to

00:02:31,440 --> 00:02:37,830
make sense so this is what usually

00:02:33,330 --> 00:02:41,640
people think of and the thing with

00:02:37,830 --> 00:02:43,709
excess is just describing it a little

00:02:41,640 --> 00:02:49,470
bit it's mainly a glue layer between C

00:02:43,709 --> 00:02:53,820
and pearl or C++ and pearl it is made

00:02:49,470 --> 00:02:56,400
out of sections macros and functions it

00:02:53,820 --> 00:02:59,190
requires some knowledge in C in the pro

00:02:56,400 --> 00:03:02,519
API itself in the excess API some type

00:02:59,190 --> 00:03:04,760
map stuff like that and it is written by

00:03:02,519 --> 00:03:07,290
very best very smart capable people

00:03:04,760 --> 00:03:11,370
perhaps made a few mistakes but overall

00:03:07,290 --> 00:03:15,120
very intelligent people very prolific

00:03:11,370 --> 00:03:16,140
writers and these are many of the words

00:03:15,120 --> 00:03:18,030
that people think about when they think

00:03:16,140 --> 00:03:20,040
about access its complex it's difficult

00:03:18,030 --> 00:03:21,600
strenuous labor is painful formidable

00:03:20,040 --> 00:03:25,980
there are more words to be found

00:03:21,600 --> 00:03:28,019
thesaurus hmm and a lot of the time what

00:03:25,980 --> 00:03:30,390
people say is that excess is an

00:03:28,019 --> 00:03:33,299
impediment to modern pearl so we cannot

00:03:30,390 --> 00:03:35,400
continue with pearl into that modern age

00:03:33,299 --> 00:03:37,530
that we always talk about if we still

00:03:35,400 --> 00:03:40,860
have to write access the talk before me

00:03:37,530 --> 00:03:43,070
was about if I on how to get out of the

00:03:40,860 --> 00:03:46,410
I know if it was lip if I was ffi

00:03:43,070 --> 00:03:48,239
specifically to get around that having

00:03:46,410 --> 00:03:50,160
to write access yourself because oh my

00:03:48,239 --> 00:03:52,739
god how are we going to continue with

00:03:50,160 --> 00:03:54,540
building like really tremendous amazing

00:03:52,739 --> 00:03:57,660
awesome application profile have to

00:03:54,540 --> 00:04:00,079
write this so I kind of want to

00:03:57,660 --> 00:04:00,079
change that

00:04:00,400 --> 00:04:06,019
the thing with excess is that anyone can

00:04:03,530 --> 00:04:12,459
write it it just seems like it's not

00:04:06,019 --> 00:04:14,599
true see excess is mostly misunderstood

00:04:12,459 --> 00:04:18,739
you don't need to be an expert to write

00:04:14,599 --> 00:04:21,380
in excess you can use basic pro API

00:04:18,739 --> 00:04:22,910
skills you don't have to know all the

00:04:21,380 --> 00:04:26,330
nitty-gritty you don't have to know all

00:04:22,910 --> 00:04:28,479
the history you really you don't really

00:04:26,330 --> 00:04:31,580
need that the basic API will work and

00:04:28,479 --> 00:04:34,400
access itself is not very difficult it

00:04:31,580 --> 00:04:36,560
just seems that way there's a ton of

00:04:34,400 --> 00:04:42,470
options in excess and they're all

00:04:36,560 --> 00:04:46,690
documented except well they're all

00:04:42,470 --> 00:04:50,000
documented except those that aren't

00:04:46,690 --> 00:04:51,770
there all documented except that the

00:04:50,000 --> 00:04:54,199
official tutorial sucks like it really

00:04:51,770 --> 00:04:55,840
sucks it really really really sucks it

00:04:54,199 --> 00:04:58,820
doesn't even work past a certain point

00:04:55,840 --> 00:05:01,759
of course all document except that

00:04:58,820 --> 00:05:04,460
there's no better or other full tutorial

00:05:01,759 --> 00:05:05,990
at least one that I could find because

00:05:04,460 --> 00:05:09,110
I've searched for excess tutorials that

00:05:05,990 --> 00:05:11,000
were good enough for me to use and I

00:05:09,110 --> 00:05:12,440
consider myself even even though some

00:05:11,000 --> 00:05:15,680
people think that I'm advanced I'm not

00:05:12,440 --> 00:05:18,440
I'm actually very very stupid I just

00:05:15,680 --> 00:05:22,970
fake really well thanks for the head

00:05:18,440 --> 00:05:27,500
nodding the most intense sent nothing

00:05:22,970 --> 00:05:29,599
have seen since a metal show so I needed

00:05:27,500 --> 00:05:31,460
the tutorial that I could understand and

00:05:29,599 --> 00:05:34,400
that's saying a lot but I couldn't find

00:05:31,460 --> 00:05:37,190
any including the tutorial that we have

00:05:34,400 --> 00:05:40,580
as part of pro core which is it's just a

00:05:37,190 --> 00:05:42,500
terrible thing so i decided i'll just

00:05:40,580 --> 00:05:45,979
write one which is always a good idea

00:05:42,500 --> 00:05:48,949
right so i'll just write my own and this

00:05:45,979 --> 00:05:52,490
is how i got to excess fun the idea

00:05:48,949 --> 00:05:55,969
itself materialized after i talked to

00:05:52,490 --> 00:05:58,610
Stefan molar who gave me an initial

00:05:55,969 --> 00:06:00,560
skeleton for excess that he named excess

00:05:58,610 --> 00:06:02,449
fun and it started playing with that in

00:06:00,560 --> 00:06:04,370
figured well I can I can use this in

00:06:02,449 --> 00:06:06,259
order to build bigger things and while

00:06:04,370 --> 00:06:08,510
I'm learning using this I can document

00:06:06,259 --> 00:06:10,190
what I learned and once I document what

00:06:08,510 --> 00:06:12,110
I learned hey this is actually not a

00:06:10,190 --> 00:06:12,930
tutorial and you can go through the same

00:06:12,110 --> 00:06:15,300
path that I

00:06:12,930 --> 00:06:19,289
went through in order to write access

00:06:15,300 --> 00:06:21,570
and what I want to do is just show you

00:06:19,289 --> 00:06:25,410
the stuff that I've written and explain

00:06:21,570 --> 00:06:29,100
it the talk itself is not about directly

00:06:25,410 --> 00:06:33,780
but it is about the tutorial that I've

00:06:29,100 --> 00:06:35,850
written called excess fun so the

00:06:33,780 --> 00:06:38,310
tutorial is meant to make access a

00:06:35,850 --> 00:06:39,840
pleasure and it is when you get it

00:06:38,310 --> 00:06:41,820
working like when you actually

00:06:39,840 --> 00:06:43,410
understand how it works and how pro

00:06:41,820 --> 00:06:45,270
internally works and you can get it

00:06:43,410 --> 00:06:47,580
working right some access it is a lot of

00:06:45,270 --> 00:06:49,259
fun it is a pleasure there's a certain

00:06:47,580 --> 00:06:50,610
sense of accomplishment that you get

00:06:49,259 --> 00:06:53,400
from understanding something that

00:06:50,610 --> 00:06:58,099
everyone is afraid of and seeing that

00:06:53,400 --> 00:06:58,099
it's not that big it's not that insane

00:06:58,130 --> 00:07:04,169
we start very easy we progress very

00:07:01,500 --> 00:07:07,080
slowly because I needed that I need to

00:07:04,169 --> 00:07:08,660
not to jump from a 2k I need to jump to

00:07:07,080 --> 00:07:12,180
be hopefully with a step in between

00:07:08,660 --> 00:07:13,919
because that's hard so we progress very

00:07:12,180 --> 00:07:18,360
very slowly kind of getting into things

00:07:13,919 --> 00:07:20,460
one at a time everything is split into

00:07:18,360 --> 00:07:23,370
chapters right so you can go through

00:07:20,460 --> 00:07:25,919
chapter chapters are very small and each

00:07:23,370 --> 00:07:31,889
one takes a very small task and that's

00:07:25,919 --> 00:07:35,580
how we get between chapters so I want to

00:07:31,889 --> 00:07:38,449
give a quick glossary Oh actually I

00:07:35,580 --> 00:07:41,010
think I yea sorry I missed two things

00:07:38,449 --> 00:07:42,479
one more thing is that there's a lot of

00:07:41,010 --> 00:07:44,150
explanation for beginners which is

00:07:42,479 --> 00:07:46,530
really really really really important

00:07:44,150 --> 00:07:48,270
when I'm a beginner access a lot of

00:07:46,530 --> 00:07:50,370
these tutorials what they do is say well

00:07:48,270 --> 00:07:52,169
now you just use these ten functions and

00:07:50,370 --> 00:07:53,820
that's it there you go I have no idea

00:07:52,169 --> 00:07:55,590
what they mean have no idea what they're

00:07:53,820 --> 00:07:56,849
talking about i don't know why they use

00:07:55,590 --> 00:07:58,380
those i don't know what those letters

00:07:56,849 --> 00:08:02,159
mean i don't know what those letters

00:07:58,380 --> 00:08:04,020
mean it's just weird and I needed I need

00:08:02,159 --> 00:08:06,449
a lot of help to understand things from

00:08:04,020 --> 00:08:07,800
a beginner perspective a lot of success

00:08:06,449 --> 00:08:10,050
tutorials that we have assumed that

00:08:07,800 --> 00:08:11,669
you're a a prolific see author that I

00:08:10,050 --> 00:08:16,710
haven't code and see in a really long

00:08:11,669 --> 00:08:18,509
time thing out and you need to but a lot

00:08:16,710 --> 00:08:20,820
of them assume that you're already very

00:08:18,509 --> 00:08:22,740
familiar with a pearl API the propia is

00:08:20,820 --> 00:08:25,620
relatively scattered the documentation

00:08:22,740 --> 00:08:26,670
it's available but it's not glued

00:08:25,620 --> 00:08:29,190
together in

00:08:26,670 --> 00:08:31,110
way in my opinion so it's hard to just

00:08:29,190 --> 00:08:32,600
know all of that you kind of need a lot

00:08:31,110 --> 00:08:35,250
of history and I'll have experience and

00:08:32,600 --> 00:08:37,320
all the examples work which sounds

00:08:35,250 --> 00:08:38,970
stupid but this doesn't apply to the

00:08:37,320 --> 00:08:41,340
existing access tutorial that is that

00:08:38,970 --> 00:08:44,250
comes with pro I couldn't get the third

00:08:41,340 --> 00:08:47,280
example and onwards going none of them

00:08:44,250 --> 00:08:50,130
it was terrible they actually used

00:08:47,280 --> 00:08:52,920
cascading make files with tabs and

00:08:50,130 --> 00:08:56,450
spaces while the layout provided spaces

00:08:52,920 --> 00:09:00,750
instead of tabs and dear God so

00:08:56,450 --> 00:09:02,220
everything here works now some features

00:09:00,750 --> 00:09:04,590
of course I've went through all of those

00:09:02,220 --> 00:09:06,060
so some features you can find on github

00:09:04,590 --> 00:09:08,850
it's already there you can fork it you

00:09:06,060 --> 00:09:10,830
can play with it it has had a few pull

00:09:08,850 --> 00:09:12,120
requests from people you can fix my shoe

00:09:10,830 --> 00:09:13,680
to English you can fix my shitty

00:09:12,120 --> 00:09:18,150
probably can fix my shitty excess you

00:09:13,680 --> 00:09:19,560
can fix my shitty see and chapter

00:09:18,150 --> 00:09:23,360
distribution anything else that I did

00:09:19,560 --> 00:09:25,740
there there are already a few chapters

00:09:23,360 --> 00:09:28,890
023 I have four ridden I haven't

00:09:25,740 --> 00:09:30,690
committed yet and it comes with a

00:09:28,890 --> 00:09:33,080
skeleton can build in so we can just

00:09:30,690 --> 00:09:36,510
copy that skeleton and get working I

00:09:33,080 --> 00:09:38,100
cover functions both in C and excess so

00:09:36,510 --> 00:09:39,690
we have some see functions that we

00:09:38,100 --> 00:09:41,640
interact with using SAS and we have some

00:09:39,690 --> 00:09:44,430
functions in excess directly which is

00:09:41,640 --> 00:09:47,430
really nice I have an example of how to

00:09:44,430 --> 00:09:48,780
write a constructor so kind of the thing

00:09:47,430 --> 00:09:51,180
that we do with / all the time it's

00:09:48,780 --> 00:09:54,090
written entirely in excess and to me

00:09:51,180 --> 00:09:55,740
that was very interesting and I love

00:09:54,090 --> 00:09:59,100
doing it and I was really really happy

00:09:55,740 --> 00:10:01,470
when it worked and I learned a lot so I

00:09:59,100 --> 00:10:03,990
put that in just so we could see how

00:10:01,470 --> 00:10:07,320
things work in Perl and there's a few

00:10:03,990 --> 00:10:08,970
simple methods so kind of getting funky

00:10:07,320 --> 00:10:10,580
running simple functions from other

00:10:08,970 --> 00:10:13,590
modules and stuff like that and

00:10:10,580 --> 00:10:16,410
everything is tested it comes full on

00:10:13,590 --> 00:10:17,460
with testing that works and an

00:10:16,410 --> 00:10:19,020
interesting thing I'm going to show

00:10:17,460 --> 00:10:21,780
later that some of these tests actually

00:10:19,020 --> 00:10:23,910
test things that I didn't understand and

00:10:21,780 --> 00:10:25,680
then when I learned them i wrote a test

00:10:23,910 --> 00:10:27,540
to match what i learned to make sure

00:10:25,680 --> 00:10:29,610
that it didn't up and that that's

00:10:27,540 --> 00:10:32,220
actually very important i found a memory

00:10:29,610 --> 00:10:34,110
leak because of how I misunderstood pro

00:10:32,220 --> 00:10:36,750
but then I were test for that memory

00:10:34,110 --> 00:10:38,900
leak fixed it and the test is in it's

00:10:36,750 --> 00:10:38,900
fantastic

00:10:40,070 --> 00:10:47,190
so what's missing um complicated methods

00:10:44,820 --> 00:10:48,810
I don't have that yet there's a lot of

00:10:47,190 --> 00:10:50,520
ways to do methods I have some code that

00:10:48,810 --> 00:10:52,050
I haven't committed yet but it's still

00:10:50,520 --> 00:10:55,920
missing feel free to help me add this

00:10:52,050 --> 00:10:58,500
it's really for all of us I don't have

00:10:55,920 --> 00:11:00,000
converting objects with type maps again

00:10:58,500 --> 00:11:03,240
there is some code it's not committed

00:11:00,000 --> 00:11:05,400
yet my concept of this is that I do not

00:11:03,240 --> 00:11:07,529
commit or push anything that I don't

00:11:05,400 --> 00:11:10,800
fully understand and can fully explain

00:11:07,529 --> 00:11:12,180
to someone else that's why there's a lot

00:11:10,800 --> 00:11:14,160
of code just waiting to be committed

00:11:12,180 --> 00:11:15,960
because until I'm able to fully explain

00:11:14,160 --> 00:11:19,320
it you're not going to see it it's very

00:11:15,960 --> 00:11:21,300
important for me and some advanced

00:11:19,320 --> 00:11:25,560
excess stuff that I just I don't have

00:11:21,300 --> 00:11:27,690
covered yet and feel free to help now

00:11:25,560 --> 00:11:29,760
before we start I just want to go over a

00:11:27,690 --> 00:11:30,960
quick glossary terms that you should

00:11:29,760 --> 00:11:33,120
know that you're going to see in the

00:11:30,960 --> 00:11:35,070
code I don't want you to be scared I'm

00:11:33,120 --> 00:11:36,089
going to present them right now and then

00:11:35,070 --> 00:11:37,200
when we see them in the code you'll

00:11:36,089 --> 00:11:41,190
understand what they mean we'll go over

00:11:37,200 --> 00:11:44,130
them together we'll start with an SV nsv

00:11:41,190 --> 00:11:46,320
is scalar value so any scalar that you

00:11:44,130 --> 00:11:52,290
have in Perl is seen by pro internally

00:11:46,320 --> 00:11:56,700
as an SV nsv can be an IV which is an SV

00:11:52,290 --> 00:12:00,029
to an integer when you have a my I minus

00:11:56,700 --> 00:12:04,260
30 what a pro will do is a sign in sv

00:12:00,029 --> 00:12:08,160
for a scalar I and it's going to insert

00:12:04,260 --> 00:12:11,670
a value as an IV minus 3 there's UV

00:12:08,160 --> 00:12:15,170
which is unsigned there's envy which is

00:12:11,670 --> 00:12:18,890
a double and PV which is a string of

00:12:15,170 --> 00:12:23,640
course we also have an SV to in sv and

00:12:18,890 --> 00:12:28,020
next one would be an AV nav is the same

00:12:23,640 --> 00:12:31,820
thing just for an array we have HP for a

00:12:28,020 --> 00:12:34,230
hash and an RV for a reference value

00:12:31,820 --> 00:12:35,910
these are the types that Pearl has and

00:12:34,230 --> 00:12:37,110
these are the types that are going to

00:12:35,910 --> 00:12:41,160
see and that's where we're going to play

00:12:37,110 --> 00:12:43,620
with so instead of using scalar I we're

00:12:41,160 --> 00:12:45,990
going to use what's in scalar I so maybe

00:12:43,620 --> 00:12:48,089
an IV perhaps we're going to use scalar

00:12:45,990 --> 00:12:49,440
I as an SV directly so you'll know what

00:12:48,089 --> 00:12:51,720
that is we're just using the entire

00:12:49,440 --> 00:12:53,939
scalar itself

00:12:51,720 --> 00:12:56,910
we use AV we're using an array value

00:12:53,939 --> 00:12:58,050
we're playing with an array variable so

00:12:56,910 --> 00:13:07,829
far so good does anyone have any

00:12:58,050 --> 00:13:09,029
questions almost oh don't ask me to

00:13:07,829 --> 00:13:12,269
explain stuff that will take me longer

00:13:09,029 --> 00:13:16,769
than the time that I have is that a good

00:13:12,269 --> 00:13:27,240
answer because I said so that never

00:13:16,769 --> 00:13:29,459
works for me well you could say so but

00:13:27,240 --> 00:13:31,800
from the documentation that I've read it

00:13:29,459 --> 00:13:35,879
kind of is easier to follow when it's

00:13:31,800 --> 00:13:39,269
outside here it's just much easier to

00:13:35,879 --> 00:13:41,250
follow them and honestly that's all we

00:13:39,269 --> 00:13:42,449
need to cover just to understand

00:13:41,250 --> 00:13:44,730
everything that we will see from this

00:13:42,449 --> 00:13:48,329
point on so I want to give a few

00:13:44,730 --> 00:13:51,689
examples let's start the following is a

00:13:48,329 --> 00:13:54,740
basic p.m. file it has your package

00:13:51,689 --> 00:13:57,509
strict mornings you should always have

00:13:54,740 --> 00:13:59,809
we're using exporter we can talk about

00:13:57,509 --> 00:14:03,089
which explorer modules we could use

00:13:59,809 --> 00:14:04,649
basic stuff we're using excess loader

00:14:03,089 --> 00:14:08,269
and what excess lower is going to do is

00:14:04,649 --> 00:14:11,129
load all of the excess code that we have

00:14:08,269 --> 00:14:14,009
based on exporter which actually we

00:14:11,129 --> 00:14:16,860
should use a parent we have a version

00:14:14,009 --> 00:14:18,600
export tags expert okay oh this is

00:14:16,860 --> 00:14:20,730
generic stuff what we have here is

00:14:18,600 --> 00:14:23,009
excess loader load excess fun and a

00:14:20,730 --> 00:14:26,009
version and what this does is pretty

00:14:23,009 --> 00:14:28,759
much the same as a used statement but it

00:14:26,009 --> 00:14:31,290
has asked to load an excess funds s file

00:14:28,759 --> 00:14:34,379
and he also gives it a version just like

00:14:31,290 --> 00:14:36,569
the youth statement might here is what

00:14:34,379 --> 00:14:38,009
excess hondata excess would look like at

00:14:36,569 --> 00:14:40,589
the beginning we have defined pearl

00:14:38,009 --> 00:14:43,829
noget context having to do with

00:14:40,589 --> 00:14:45,839
multiplicity in pro you don't actually

00:14:43,829 --> 00:14:47,490
think about it at the moment there's

00:14:45,839 --> 00:14:49,439
there is an explanation in the tutorial

00:14:47,490 --> 00:14:52,199
for it I haven't pushed it yet but I

00:14:49,439 --> 00:14:54,449
added just recently there's a couple of

00:14:52,199 --> 00:14:59,399
files here that help us use pearl and

00:14:54,449 --> 00:15:02,939
excess itself so extern pearl X sub PP

00:14:59,399 --> 00:15:04,529
port helps us with portability from this

00:15:02,939 --> 00:15:05,400
point on we're starting to write access

00:15:04,529 --> 00:15:06,990
code

00:15:05,400 --> 00:15:10,610
beginning is just defining a module and

00:15:06,990 --> 00:15:14,280
the package for it here we have a

00:15:10,610 --> 00:15:16,920
function in excess this is in excess

00:15:14,280 --> 00:15:19,110
funds excess it will return a double

00:15:16,920 --> 00:15:21,900
it's called add numbers it gets a and B

00:15:19,110 --> 00:15:24,060
as doubles there's a piece of code here

00:15:21,900 --> 00:15:26,910
that we put under the label code and

00:15:24,060 --> 00:15:30,720
then we set red Val which is a return

00:15:26,910 --> 00:15:35,640
value variable to be the value of a plus

00:15:30,720 --> 00:15:37,080
B and the output label here tells us

00:15:35,640 --> 00:15:39,570
what is the output we were going to get

00:15:37,080 --> 00:15:41,550
from the excess function add numbers and

00:15:39,570 --> 00:15:45,330
we just say we're going to return the

00:15:41,550 --> 00:15:47,070
red valve it's fine here's different way

00:15:45,330 --> 00:15:49,020
of doing this so its first we use

00:15:47,070 --> 00:15:51,870
doubles now we can actually also use SVS

00:15:49,020 --> 00:15:53,580
because these doubles are SVS so you

00:15:51,870 --> 00:15:56,880
could use both this comes from the

00:15:53,580 --> 00:15:59,730
direction of seeing it as pure see this

00:15:56,880 --> 00:16:03,390
comes from direction I've seen as perl

00:15:59,730 --> 00:16:05,780
api directly so we say the word we're

00:16:03,390 --> 00:16:07,680
going to get is a pointer to an SV

00:16:05,780 --> 00:16:10,620
that's the same thing we're going to get

00:16:07,680 --> 00:16:14,340
in a and B as doubles they are SVS

00:16:10,620 --> 00:16:16,920
basically our code is going to have

00:16:14,340 --> 00:16:19,950
constable some and we're using these

00:16:16,920 --> 00:16:22,800
functions here svn V which what it does

00:16:19,950 --> 00:16:25,250
is it says i have an SV I want to get

00:16:22,800 --> 00:16:29,280
the env value for it I want to get the

00:16:25,250 --> 00:16:33,780
NV v is for value so the double value

00:16:29,280 --> 00:16:37,410
for this SV in our case the it's going

00:16:33,780 --> 00:16:39,560
to be the actual double value of an SV

00:16:37,410 --> 00:16:44,700
called a so if you're saying scalar a

00:16:39,560 --> 00:16:47,340
that has some value as a double svn v is

00:16:44,700 --> 00:16:49,890
going to fetch it out we're adding that

00:16:47,340 --> 00:16:52,260
with the same thing from be that's it we

00:16:49,890 --> 00:16:56,160
now have a sum but we're going to have

00:16:52,260 --> 00:16:57,600
to return in sv and we got all this in a

00:16:56,160 --> 00:17:00,600
double so we're going to have to create

00:16:57,600 --> 00:17:04,589
a new sv from this double which is

00:17:00,600 --> 00:17:08,490
really simple newest v and envy from

00:17:04,589 --> 00:17:10,680
some that's it the rest is the same it's

00:17:08,490 --> 00:17:13,760
very simple if I understand this you

00:17:10,680 --> 00:17:13,760
know what we all could

00:17:14,230 --> 00:17:24,410
yes this originally created is pretty

00:17:22,670 --> 00:17:34,960
crusty for the original creative the

00:17:24,410 --> 00:17:41,420
string when you call svn oh snap uh no

00:17:34,960 --> 00:17:46,580
Riley says no yeah so you would need to

00:17:41,420 --> 00:17:52,640
have some double value then okay um I'm

00:17:46,580 --> 00:18:01,090
sorry did you have a question okay yeah

00:17:52,640 --> 00:18:03,710
that's not gonna work I'm not sure sure

00:18:01,090 --> 00:18:04,970
I'm not sure I actually haven't don't

00:18:03,710 --> 00:18:07,180
have a test for that that would be a

00:18:04,970 --> 00:18:07,180
good idea

00:18:17,230 --> 00:18:29,500
I don't know if it does that in the

00:18:19,540 --> 00:18:31,030
excess level yes but if it if it doesn't

00:18:29,500 --> 00:18:42,850
have an env uh know if you conversion

00:18:31,030 --> 00:18:45,130
dramatically 20 all right good to know

00:18:42,850 --> 00:18:50,880
so the first person who writes a test

00:18:45,130 --> 00:18:54,070
for it after this I own them and drink

00:18:50,880 --> 00:18:56,049
here's an example where I'm using a

00:18:54,070 --> 00:18:58,630
library called chroma print conference

00:18:56,049 --> 00:19:02,110
is just as nice c library that creates a

00:18:58,630 --> 00:19:04,929
fingerprint from an audio file that's it

00:19:02,110 --> 00:19:07,059
I have no use for it other than trying

00:19:04,929 --> 00:19:09,360
to learn access using it so what do we

00:19:07,059 --> 00:19:13,210
do here is included just like an see

00:19:09,360 --> 00:19:18,549
basic see file in the code section just

00:19:13,210 --> 00:19:21,580
like we saw we have a const char star as

00:19:18,549 --> 00:19:23,980
a pointer get version what it will do is

00:19:21,580 --> 00:19:27,750
just call chroma print get version which

00:19:23,980 --> 00:19:30,370
is exported from this output read Val

00:19:27,750 --> 00:19:33,820
hey look at that we just we just

00:19:30,370 --> 00:19:37,600
connected a piece of C code C library

00:19:33,820 --> 00:19:39,250
straight into pearl that's it this is it

00:19:37,600 --> 00:19:43,809
it's pretty cool it's not that

00:19:39,250 --> 00:19:46,179
complicated here's a test for it if I

00:19:43,809 --> 00:19:49,210
use excess fun all that just exports

00:19:46,179 --> 00:19:54,059
everything and I call get version I'll

00:19:49,210 --> 00:19:56,760
check fair returns this look can

00:19:54,059 --> 00:19:59,980
let it go where you go or you go

00:19:56,760 --> 00:20:03,190
everything sucks there we go works

00:19:59,980 --> 00:20:04,679
that's it it's also really fast did you

00:20:03,190 --> 00:20:16,080
see ya

00:20:04,679 --> 00:20:18,419
sorry one second yup so sorry it is

00:20:16,080 --> 00:20:38,220
returning an SV to pro which gives you a

00:20:18,419 --> 00:20:40,740
scalar or oh yeah yeah oh um yeah

00:20:38,220 --> 00:20:48,059
there's a conversion here Khan start

00:20:40,740 --> 00:20:49,529
start yeah well it's not that I had to

00:20:48,059 --> 00:20:56,190
before I just wanted to show how to do

00:20:49,529 --> 00:20:57,720
with the des filles you could I suggest

00:20:56,190 --> 00:20:59,039
working at SVS I just want to show an

00:20:57,720 --> 00:21:01,320
example if I would do this I would

00:20:59,039 --> 00:21:03,330
actually use this v's directly for two

00:21:01,320 --> 00:21:05,490
reasons I would want to see how the guts

00:21:03,330 --> 00:21:08,399
plays with it but Toa we want to be very

00:21:05,490 --> 00:21:12,980
explicit about this and not assume when

00:21:08,399 --> 00:21:12,980
automatic conversions yes

00:21:17,400 --> 00:21:34,960
okay yes the excess basically is the

00:21:32,500 --> 00:21:38,800
excess is like a preprocessor for a

00:21:34,960 --> 00:21:42,010
piece of a piece of C code with sections

00:21:38,800 --> 00:21:44,140
and macros so there's sections there's

00:21:42,010 --> 00:21:45,670
macros there's functions and the excess

00:21:44,140 --> 00:21:49,270
kind of takes that the excess loader

00:21:45,670 --> 00:21:53,830
kind of creates a normalcy file from all

00:21:49,270 --> 00:22:00,070
of that expansive sorry it's not the

00:21:53,830 --> 00:22:05,320
excess loader does that all right make

00:22:00,070 --> 00:22:07,960
demic ford gay I'm sorry the make part

00:22:05,320 --> 00:22:09,730
the composite generates the C code none

00:22:07,960 --> 00:22:11,230
of that the excess load that I'm sorry

00:22:09,730 --> 00:22:19,630
that's actually in the make file peel

00:22:11,230 --> 00:22:21,100
that comes with it well here I'm

00:22:19,630 --> 00:22:22,210
assuming this is in the tutorial I'm

00:22:21,100 --> 00:22:24,220
assuming that the library is already

00:22:22,210 --> 00:22:26,350
installed installed separately some

00:22:24,220 --> 00:22:29,429
excess tutorials I think I'm answering

00:22:26,350 --> 00:22:29,429
your question correct me if I'm wrong

00:22:33,720 --> 00:22:38,830
the way that it works is that if you

00:22:35,920 --> 00:22:40,480
haven't installed already you have well

00:22:38,830 --> 00:22:42,220
it depends on what system you use but

00:22:40,480 --> 00:22:44,770
there is a linker automatically that

00:22:42,220 --> 00:22:47,770
finds files so when you do include

00:22:44,770 --> 00:22:50,559
chrome print H on my system it will look

00:22:47,770 --> 00:22:52,120
for in user lib or in user lip 64 and so

00:22:50,559 --> 00:22:53,679
on that's something their system does

00:22:52,120 --> 00:22:56,110
that's something that your compiler

00:22:53,679 --> 00:22:59,470
actually that's using environment

00:22:56,110 --> 00:23:01,210
variables it there's other tutorials

00:22:59,470 --> 00:23:03,309
that assume that you're just going to

00:23:01,210 --> 00:23:05,740
bundle all of your C library inside your

00:23:03,309 --> 00:23:07,120
perl module I don't do that that's one

00:23:05,740 --> 00:23:08,920
of the basic tenants that I think is

00:23:07,120 --> 00:23:13,900
absolutely wrong and complicates things

00:23:08,920 --> 00:23:15,429
very much from every excess author that

00:23:13,900 --> 00:23:17,350
have spoken to they say this is like the

00:23:15,429 --> 00:23:19,030
worst thing to do it's difficult it's

00:23:17,350 --> 00:23:21,460
very difficult and there's a lot of

00:23:19,030 --> 00:23:22,570
problems with it so in this story we

00:23:21,460 --> 00:23:25,240
assume that you've already installed

00:23:22,570 --> 00:23:28,270
this your systems already ready for this

00:23:25,240 --> 00:23:30,429
if I will call compiler with the

00:23:28,270 --> 00:23:31,600
included here your compiler will find

00:23:30,429 --> 00:23:34,749
because it's already set up in your

00:23:31,600 --> 00:23:44,080
system which is not it's not a

00:23:34,749 --> 00:23:46,629
complicated thing okay you're referring

00:23:44,080 --> 00:23:49,809
to this that isn't make pop there's

00:23:46,629 --> 00:23:54,879
definitely in the mick file ok I thought

00:23:49,809 --> 00:24:00,490
you meant the could be but I think

00:23:54,879 --> 00:24:02,499
explicit is more important so yeah so

00:24:00,490 --> 00:24:05,249
here's the library their Road audio

00:24:02,499 --> 00:24:07,869
chrome print it's not on Sipan yet

00:24:05,249 --> 00:24:10,720
there's the example of the PM file just

00:24:07,869 --> 00:24:14,110
excess loader load there's the crown

00:24:10,720 --> 00:24:16,210
princess has a module specification here

00:24:14,110 --> 00:24:18,970
has a package specification there's the

00:24:16,210 --> 00:24:21,309
include of the chrome print this is the

00:24:18,970 --> 00:24:23,529
excess part same example you gave a

00:24:21,309 --> 00:24:25,720
change to version see they get to

00:24:23,529 --> 00:24:29,830
parameter sv star self so you can

00:24:25,720 --> 00:24:32,649
actually do self arrow version that will

00:24:29,830 --> 00:24:36,179
work I want to give an example of a

00:24:32,649 --> 00:24:39,909
constructor we're all used to this right

00:24:36,179 --> 00:24:42,850
how many people recognize this great

00:24:39,909 --> 00:24:45,549
it's kind of this thing right where we

00:24:42,850 --> 00:24:47,559
have a class that we got and then we

00:24:45,549 --> 00:24:49,840
create a hash we create a reference to

00:24:47,559 --> 00:24:54,070
that hash then we bless that reference

00:24:49,840 --> 00:24:56,350
with the class and return that but i

00:24:54,070 --> 00:24:57,490
wanted to write this in excess that's

00:24:56,350 --> 00:25:01,990
really interested in how that will work

00:24:57,490 --> 00:25:03,999
in excess so assuming we have this this

00:25:01,990 --> 00:25:06,490
is the code in excess and what we do

00:25:03,999 --> 00:25:08,769
here is use SVS directly so we know we

00:25:06,490 --> 00:25:13,029
want to return in sv because well it's a

00:25:08,769 --> 00:25:15,450
scalar value we have a con star star

00:25:13,029 --> 00:25:20,350
class so that's our class string our

00:25:15,450 --> 00:25:24,039
code first creates a new hv so it's

00:25:20,350 --> 00:25:26,230
actually called new HP surprising and it

00:25:24,039 --> 00:25:29,200
returns hash is the name of the variable

00:25:26,230 --> 00:25:31,600
and it's a pointer to an HP type just

00:25:29,200 --> 00:25:35,649
like we have a pointer to an SV type the

00:25:31,600 --> 00:25:38,379
location of spaces in between stars does

00:25:35,649 --> 00:25:42,220
not matter so if anyone was about to ask

00:25:38,379 --> 00:25:43,960
it doesn't matter and what we do next is

00:25:42,220 --> 00:25:47,530
create a reference to that hash which

00:25:43,960 --> 00:25:51,120
is this part right so what we do is call

00:25:47,530 --> 00:25:54,430
new RV create a new reference value

00:25:51,120 --> 00:25:56,950
underscore no ink ok I'm going to

00:25:54,430 --> 00:26:00,130
explain that and we have to send the

00:25:56,950 --> 00:26:02,800
hash now here's the trick new RV no ink

00:26:00,130 --> 00:26:05,950
there's also New York ink they both they

00:26:02,800 --> 00:26:08,140
don't really know if you're sending an

00:26:05,950 --> 00:26:10,120
hv or a navy then I actually care they

00:26:08,140 --> 00:26:13,900
don't want to know what they want is to

00:26:10,120 --> 00:26:15,940
get an SV but because hv is of type sv

00:26:13,900 --> 00:26:17,890
we can do casting where we say you know

00:26:15,940 --> 00:26:20,380
it's an HP but treat it like it's just

00:26:17,890 --> 00:26:23,710
an SV because honestly underneath all of

00:26:20,380 --> 00:26:25,270
it it is so this is the casting part we

00:26:23,710 --> 00:26:29,370
actually tell topologies you know just

00:26:25,270 --> 00:26:32,740
send it as an SV please star and cast it

00:26:29,370 --> 00:26:35,050
so we're sending two new RV no ink what

00:26:32,740 --> 00:26:37,180
it thinks is an SV which essentially it

00:26:35,050 --> 00:26:43,380
is but it is our hash variable which is

00:26:37,180 --> 00:26:47,470
actually an HP so far so good okay and

00:26:43,380 --> 00:26:50,640
we return an SV self I'm just putting a

00:26:47,470 --> 00:26:53,440
Const here there doesn't really matter

00:26:50,640 --> 00:26:56,380
and what we do is the last part blessing

00:26:53,440 --> 00:27:01,560
so sv bless is a function that just

00:26:56,380 --> 00:27:03,670
blesses we get we send self and this is

00:27:01,560 --> 00:27:05,500
unfortunately a piece of code that would

00:27:03,670 --> 00:27:08,890
take long to explain but it is just

00:27:05,500 --> 00:27:12,160
referred to as just put that in because

00:27:08,890 --> 00:27:15,930
we need to get the stash and we need to

00:27:12,160 --> 00:27:20,350
use GV stash PV we will give it the

00:27:15,930 --> 00:27:24,100
string 0 is a parameter second parameter

00:27:20,350 --> 00:27:29,190
and they will just bless these just like

00:27:24,100 --> 00:27:32,470
this it's even similar in the parameter

00:27:29,190 --> 00:27:34,660
order is the same and that's our return

00:27:32,470 --> 00:27:37,540
value this is an entire constructor

00:27:34,660 --> 00:27:40,750
ridden excess how much faster is it not

00:27:37,540 --> 00:27:42,820
much at all but it's very interesting

00:27:40,750 --> 00:27:44,620
one thing I noticed here is at first I

00:27:42,820 --> 00:27:46,540
use new RV and the first thing that came

00:27:44,620 --> 00:27:50,220
up was new RV Inc so you just put in

00:27:46,540 --> 00:27:52,990
your v Inc can anyone spot the problem

00:27:50,220 --> 00:27:59,720
not you

00:27:52,990 --> 00:28:05,809
really sorry who yelled that it's not

00:27:59,720 --> 00:28:08,120
it's yes people people who know so well

00:28:05,809 --> 00:28:09,140
just yes that that would be a memory

00:28:08,120 --> 00:28:11,750
because what's going to happen is that

00:28:09,140 --> 00:28:13,669
we have one reference here one reference

00:28:11,750 --> 00:28:15,500
here and then we send it off so there's

00:28:13,669 --> 00:28:19,309
two once you'll go out of scope you

00:28:15,500 --> 00:28:23,179
removed one but you created to write one

00:28:19,309 --> 00:28:25,149
too if you get out of whatever wherever

00:28:23,179 --> 00:28:27,470
you define your wherever you called knew

00:28:25,149 --> 00:28:29,059
you would only remove one that's a

00:28:27,470 --> 00:28:30,740
memory leak so this is one thing that i

00:28:29,059 --> 00:28:33,860
stumbled upon I saw this sounds like add

00:28:30,740 --> 00:28:35,929
ink maybe maybe there's ink maybe

00:28:33,860 --> 00:28:37,580
there's no ink why do we need ink and

00:28:35,929 --> 00:28:39,440
then ask someone you said yeah you have

00:28:37,580 --> 00:28:41,510
to do no ink otherwise you get a memory

00:28:39,440 --> 00:28:45,080
leak so I was like hey hey let's write a

00:28:41,510 --> 00:28:50,149
test for it here's the test it's a very

00:28:45,080 --> 00:28:54,039
simple test and what it does is it just

00:28:50,149 --> 00:28:56,590
test more use out of your chrome print i

00:28:54,039 --> 00:29:00,350
define a variable in the outer scope

00:28:56,590 --> 00:29:02,929
called I set it to zero then create a

00:29:00,350 --> 00:29:07,399
new package this is the syntax for I

00:29:02,929 --> 00:29:09,740
don't was it 5 14 and I have a destroy

00:29:07,399 --> 00:29:10,940
function and the destroyed function is

00:29:09,740 --> 00:29:13,639
going to get called as soon as it goes

00:29:10,940 --> 00:29:15,529
out of scope and what that's going to do

00:29:13,639 --> 00:29:17,330
is increment the called that lives

00:29:15,529 --> 00:29:19,370
outside of it so I know the destroy was

00:29:17,330 --> 00:29:21,760
called I know they was completely

00:29:19,370 --> 00:29:24,620
destroyed all references were removed if

00:29:21,760 --> 00:29:26,870
all the references were weren't removed

00:29:24,620 --> 00:29:30,649
destroyed wouldn't be called and it will

00:29:26,870 --> 00:29:32,419
remain 0 and now what I do is create a

00:29:30,649 --> 00:29:35,779
new scope this little thing here and

00:29:32,419 --> 00:29:39,679
then I just create a new when it will go

00:29:35,779 --> 00:29:43,130
out of the scope here destroy will be

00:29:39,679 --> 00:29:45,710
called when destroy will be called this

00:29:43,130 --> 00:29:51,409
will increment and called will not be

00:29:45,710 --> 00:29:54,440
one that's it pretty simple so you can

00:29:51,409 --> 00:29:57,500
run this and when I ran it with a new RV

00:29:54,440 --> 00:30:00,500
Inc it reported an error and when I

00:29:57,500 --> 00:30:02,659
switched it to new RV no ink there's no

00:30:00,500 --> 00:30:06,080
error because the reference count went

00:30:02,659 --> 00:30:08,250
down to zero and everything was disposed

00:30:06,080 --> 00:30:12,480
does anyone have any questions about

00:30:08,250 --> 00:30:14,220
this by any chance there's no way we'd

00:30:12,480 --> 00:30:19,370
be able to answer your question if you

00:30:14,220 --> 00:30:19,370
have a question for me I'm sorry

00:30:38,820 --> 00:30:44,070
and you really want to be I of course

00:30:42,240 --> 00:30:48,000
what disease is

00:30:44,070 --> 00:30:50,430
why I'm sorry is oh so here's another

00:30:48,000 --> 00:30:54,600
that is a fantastic question Dave you're

00:30:50,430 --> 00:30:58,110
awesome thank you Oh what I want to show

00:30:54,600 --> 00:31:02,070
you is it's gonna happen oh I don't have

00:30:58,110 --> 00:31:13,140
internet um ok I can actually do this

00:31:02,070 --> 00:31:16,560
here nope what ah there we go uh you

00:31:13,140 --> 00:31:20,730
know what let's try something else I do

00:31:16,560 --> 00:31:23,450
believe I have I hate this

00:31:20,730 --> 00:31:30,530
terminal but it has better colors for

00:31:23,450 --> 00:31:30,530
screens profile

00:31:32,470 --> 00:31:46,480
this better yeah let's let's suppose so

00:31:37,260 --> 00:31:55,380
so up up up up so one interesting part

00:31:46,480 --> 00:31:55,380
is think it's here

00:32:03,490 --> 00:32:12,470
this is the make file by the way this is

00:32:07,460 --> 00:32:20,770
lips definition so connect to chroma

00:32:12,470 --> 00:32:23,810
print see if find think it's actually

00:32:20,770 --> 00:32:36,460
keeping chapter 2 so I had a problem

00:32:23,810 --> 00:32:36,460
where I tried is it first yeah

00:32:41,840 --> 00:32:45,039
if it's here

00:32:45,240 --> 00:32:51,270
no no I'm looking for specific thing

00:32:56,470 --> 00:33:03,200
well we have a lot of time so I don't

00:33:01,400 --> 00:33:20,020
know it's going to be 50 minutes so you

00:33:03,200 --> 00:33:20,020
know there you go so context version

00:33:22,370 --> 00:33:25,180
think it's

00:33:29,090 --> 00:33:32,620
there you go I think it's

00:33:40,840 --> 00:33:53,139
okay so what I know I know looking for

00:33:51,409 --> 00:33:54,889
the oh it's the doubles there we go

00:33:53,139 --> 00:33:56,990
because this is actually interesting

00:33:54,889 --> 00:33:59,860
thing that I think shows a problem with

00:33:56,990 --> 00:34:03,409
the way that we the way that we handle

00:33:59,860 --> 00:34:06,679
tutorials I had this issue where I wrote

00:34:03,409 --> 00:34:07,850
a test and it was doing the plus and

00:34:06,679 --> 00:34:08,750
then I compared them and and compare

00:34:07,850 --> 00:34:13,879
them because there were strings I

00:34:08,750 --> 00:34:15,409
compared the with with with no oh I'm

00:34:13,879 --> 00:34:21,460
sorry they were doubles I can i edit

00:34:15,409 --> 00:34:26,149
number so I can pair them with cmp ok so

00:34:21,460 --> 00:34:31,819
I did a test and I used it first I used

00:34:26,149 --> 00:34:36,500
TMP okay there we go I used cmp okay and

00:34:31,819 --> 00:34:40,389
it failed i added a to b and then I did

00:34:36,500 --> 00:34:49,609
cmp okay one plus one equals three

00:34:40,389 --> 00:34:52,760
failed does anyone know why 11 + 21 +

00:34:49,609 --> 00:34:56,210
did I say 1 plus 11 plus 2 i'm dyslexic

00:34:52,760 --> 00:35:01,730
I'm allowed come on for sake sit

00:34:56,210 --> 00:35:06,319
I'm nervous one plus two equals three

00:35:01,730 --> 00:35:09,369
and it failed why the one plus two

00:35:06,319 --> 00:35:09,369
equals three fail

00:35:14,950 --> 00:35:21,530
this piece of so I wrote a part in

00:35:19,700 --> 00:35:24,350
the tutorial so why do we use is instead

00:35:21,530 --> 00:35:27,560
of cmp okay so you start noticing these

00:35:24,350 --> 00:35:29,300
small problems that exist when you when

00:35:27,560 --> 00:35:31,910
you look at a tutorial that just well I

00:35:29,300 --> 00:35:34,280
do is of course i know i have to do is

00:35:31,910 --> 00:35:36,860
because i already failed but it's

00:35:34,280 --> 00:35:38,870
important that when i when i run this

00:35:36,860 --> 00:35:41,600
that i go through all these stupid

00:35:38,870 --> 00:35:44,240
things that i fall and falter on and

00:35:41,600 --> 00:35:46,160
document those which i found this I

00:35:44,240 --> 00:35:47,450
found you know it's super obvious when

00:35:46,160 --> 00:35:48,740
you look at and go like oh yeah of

00:35:47,450 --> 00:35:52,370
course following numbers piece of

00:35:48,740 --> 00:35:56,560
but but I didn't think of that and and

00:35:52,370 --> 00:35:59,180
that's why it uses is in some parts so

00:35:56,560 --> 00:36:00,650
there's there's a lot of things I think

00:35:59,180 --> 00:36:03,440
in this tutorial that that people would

00:36:00,650 --> 00:36:08,300
find interesting the structure of the

00:36:03,440 --> 00:36:10,730
turtle is actually pretty simple this is

00:36:08,300 --> 00:36:14,570
not it there we go so there's chapters

00:36:10,730 --> 00:36:16,760
each chapter has a pod the documents it

00:36:14,570 --> 00:36:19,070
and once it has actual code because

00:36:16,760 --> 00:36:21,020
chapter 0 creates the skeleton for you

00:36:19,070 --> 00:36:23,510
so once it actually has code you can

00:36:21,020 --> 00:36:26,420
look at the code itself the PM the

00:36:23,510 --> 00:36:28,300
mcphail peel the pee before that was at

00:36:26,420 --> 00:36:32,240
the same version that he committed this

00:36:28,300 --> 00:36:34,300
tests if there are any and that's how it

00:36:32,240 --> 00:36:37,340
continues with chapter 3 there's the

00:36:34,300 --> 00:36:40,490
documentation and the module itself the

00:36:37,340 --> 00:36:42,440
excess files and so on and chapter 4

00:36:40,490 --> 00:36:47,390
actually does some other cool stuff that

00:36:42,440 --> 00:36:50,300
I haven't committed yet so this has been

00:36:47,390 --> 00:36:52,670
unfortunately a relatively short talk

00:36:50,300 --> 00:36:56,990
compared to the time slot that I had and

00:36:52,670 --> 00:37:02,810
I apologize for that but oh well what

00:36:56,990 --> 00:37:06,730
you're going to do so moving back to

00:37:02,810 --> 00:37:09,230
this I have some conclusion from this

00:37:06,730 --> 00:37:10,940
the first one is that access is actually

00:37:09,230 --> 00:37:12,350
not that complicated I know there are

00:37:10,940 --> 00:37:13,790
some rough spots and some stuff that I

00:37:12,350 --> 00:37:15,170
don't know how to answer all the time

00:37:13,790 --> 00:37:17,210
that's fine for me because that's how I

00:37:15,170 --> 00:37:19,370
learn that's great if anyone knows that

00:37:17,210 --> 00:37:21,410
I always implore them to just document

00:37:19,370 --> 00:37:23,390
it to help me understand it and to help

00:37:21,410 --> 00:37:26,430
other people understand it i think that

00:37:23,390 --> 00:37:27,690
overall this didn't take me a lot too

00:37:26,430 --> 00:37:29,460
right it didn't take me a lot to

00:37:27,690 --> 00:37:31,650
understand which i think is even more

00:37:29,460 --> 00:37:33,569
important it doesn't mean that we'll be

00:37:31,650 --> 00:37:35,880
able to explain all of it but i'll be

00:37:33,569 --> 00:37:37,640
able to continually right and improve

00:37:35,880 --> 00:37:40,530
with this anything that you will to

00:37:37,640 --> 00:37:43,710
access itself can be fun there's a lot

00:37:40,530 --> 00:37:45,270
of small intricacies here but once you

00:37:43,710 --> 00:37:48,240
actually get this ship working it's

00:37:45,270 --> 00:37:49,770
exhilarating it's a fantastic feeling to

00:37:48,240 --> 00:37:52,500
take something that everyone is so

00:37:49,770 --> 00:37:54,809
 afraid of and to just demystify

00:37:52,500 --> 00:37:57,390
completely understand it and write it

00:37:54,809 --> 00:37:59,280
out and it works and for some really

00:37:57,390 --> 00:38:02,430
interesting cases it's super

00:37:59,280 --> 00:38:03,569
fast so it's it's a very useful skill

00:38:02,430 --> 00:38:06,300
especially when there are some things

00:38:03,569 --> 00:38:08,250
are not written in perl chroma print if

00:38:06,300 --> 00:38:10,920
I had if I was so inclined to use

00:38:08,250 --> 00:38:12,750
something like that I don't have it in

00:38:10,920 --> 00:38:14,280
pro I don't want to start rewriting the

00:38:12,750 --> 00:38:15,510
entire thing in pro I can just use

00:38:14,280 --> 00:38:17,819
chrome print and hook it up and

00:38:15,510 --> 00:38:19,980
apparently it's not that complicated so

00:38:17,819 --> 00:38:25,170
it is a lot of fun to be able to do that

00:38:19,980 --> 00:38:27,890
and you can do it ok so that's

00:38:25,170 --> 00:38:31,410
definitely something that we we all like

00:38:27,890 --> 00:38:33,270
that's about all I have for now which

00:38:31,410 --> 00:38:35,730
means that you get a short break which

00:38:33,270 --> 00:38:36,900
is nice there is some additional

00:38:35,730 --> 00:38:38,040
resources that would give you as

00:38:36,900 --> 00:38:40,079
homework if you're interested in

00:38:38,040 --> 00:38:43,470
learning more about this so first of all

00:38:40,079 --> 00:38:44,940
there's the the actual github repo you

00:38:43,470 --> 00:38:46,890
should check it out you should for kit

00:38:44,940 --> 00:38:49,109
you should fix stuff you should add

00:38:46,890 --> 00:38:51,299
stuff you should improve things as you

00:38:49,109 --> 00:38:53,730
know or as you who may have seen I have

00:38:51,299 --> 00:38:54,990
a lot of blind spots I have a lot of

00:38:53,730 --> 00:38:58,559
things that I'm not aware of that I

00:38:54,990 --> 00:39:02,339
don't know how it works and there's so

00:38:58,559 --> 00:39:04,859
they get pro no get context very

00:39:02,339 --> 00:39:07,950
interesting I didn't know about this so

00:39:04,859 --> 00:39:10,380
I had to read up on it there's so it

00:39:07,950 --> 00:39:12,450
didn't exist till now and there's a lot

00:39:10,380 --> 00:39:14,400
of other stuff that we can add and this

00:39:12,450 --> 00:39:16,559
is I think a really good way to actually

00:39:14,400 --> 00:39:17,819
get an exit tutorial that is that makes

00:39:16,559 --> 00:39:20,099
a lot of sense to build something

00:39:17,819 --> 00:39:22,500
practical that goes through all these

00:39:20,099 --> 00:39:26,190
small steps that we always fall on and

00:39:22,500 --> 00:39:28,829
completely miss so please feel free to

00:39:26,190 --> 00:39:31,770
help there's pro guts I really recommend

00:39:28,829 --> 00:39:35,099
reading it there's pro lil cuts the

00:39:31,770 --> 00:39:38,510
illustrated guts thank you and there's

00:39:35,099 --> 00:39:40,970
the pro API and pearl access

00:39:38,510 --> 00:39:43,580
the only problem with at least API in

00:39:40,970 --> 00:39:46,370
excess they don't have any direction at

00:39:43,580 --> 00:39:48,320
all I'm hoping that this would be a good

00:39:46,370 --> 00:39:49,700
direction for them and there's something

00:39:48,320 --> 00:39:51,980
that could really use a lot of help with

00:39:49,700 --> 00:39:54,410
as you may have seen I could really use

00:39:51,980 --> 00:39:57,700
a lot of help with but I think together

00:39:54,410 --> 00:40:07,160
we can make it work and make it fun

00:39:57,700 --> 00:40:09,170
that's about all I have thank you and if

00:40:07,160 --> 00:40:15,100
you have any questions I'll be happy to

00:40:09,170 --> 00:40:15,100
also fail answering them properly yes

00:40:26,380 --> 00:40:37,460
yes ish so yeah it's so what's going on

00:40:34,880 --> 00:40:39,740
is that it has a bunch of processors it

00:40:37,460 --> 00:40:41,600
there's I'm sorry there's a preprocessor

00:40:39,740 --> 00:40:44,000
there's a bunch of macros there's some

00:40:41,600 --> 00:40:46,490
defined sections and when you run the

00:40:44,000 --> 00:40:48,650
make file it will actually kind of go

00:40:46,490 --> 00:40:57,410
through those things sort them out and

00:40:48,650 --> 00:41:00,740
prepare actual code no no it's it's

00:40:57,410 --> 00:41:04,600
excess its excess excess is the the

00:41:00,740 --> 00:41:04,600
preprocessor yes

00:41:09,340 --> 00:41:13,670
of course for the parts that are the c

00:41:12,140 --> 00:41:15,710
preprocessor but is talking about the

00:41:13,670 --> 00:41:17,840
accessory processor so the the excess

00:41:15,710 --> 00:41:21,580
processor will generate C code in that C

00:41:17,840 --> 00:41:28,100
code will inevitably have preprocessor

00:41:21,580 --> 00:41:39,070
directives as well uh yeah yeah you can

00:41:28,100 --> 00:41:39,070
do that yeah yes

00:41:46,350 --> 00:41:51,850
has anyone you might not know this kind

00:41:49,210 --> 00:41:54,370
of asking the room has anyone ever tried

00:41:51,850 --> 00:41:57,660
and were successfully run valgrind over

00:41:54,370 --> 00:41:57,660
pearl running access

00:41:58,050 --> 00:42:08,130
oh yes yeah super useful look it'll just

00:42:02,520 --> 00:42:10,440
exited to memories detective you might

00:42:08,130 --> 00:42:13,920
not detect reference coming weeks but

00:42:10,440 --> 00:42:23,220
I'll certainly work on the allocations

00:42:13,920 --> 00:42:26,190
in secret in the access code I would

00:42:23,220 --> 00:42:30,360
point out the pearl it's like you have

00:42:26,190 --> 00:42:32,430
to go through for the impression child's

00:42:30,360 --> 00:42:34,650
attention earlier are but it's still

00:42:32,430 --> 00:42:37,010
geeks like crazy but yes how to use the

00:42:34,650 --> 00:42:46,470
suppression file or else announced okay

00:42:37,010 --> 00:42:54,030
that's right it's a feature not a bug

00:42:46,470 --> 00:42:58,460
yes I believe they know yeah at a

00:42:54,030 --> 00:43:00,990
certain point I assume but yes yeah

00:42:58,460 --> 00:43:03,150
definitely I wouldn't know how to debug

00:43:00,990 --> 00:43:07,620
it thoroughly though there is some

00:43:03,150 --> 00:43:09,420
additional people yeah I just haven't

00:43:07,620 --> 00:43:10,800
done that myself so but you know what

00:43:09,420 --> 00:43:14,370
this might be a good thing to put on

00:43:10,800 --> 00:43:16,560
thee if there was only a tutorial where

00:43:14,370 --> 00:43:18,060
you could just write and then people go

00:43:16,560 --> 00:43:19,410
like oh I wonder how could do this and

00:43:18,060 --> 00:43:23,610
there's like a chapter there that shows

00:43:19,410 --> 00:43:28,860
how to debug this using debugger any

00:43:23,610 --> 00:43:31,320
other questions alright so thank you for

00:43:28,860 --> 00:43:35,900
your time thank you for patients more

00:43:31,320 --> 00:43:35,900
than all and have a good short break

00:43:38,980 --> 00:43:41,010

YouTube URL: https://www.youtube.com/watch?v=sD1-bgKm36c


