Title: Mike Friedman (‎friedo‎) - Building Your First App with MongoDB and Perl
Publication date: 2014-06-23
Playlist: YAPC::NA 2014
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:06,810
yeah really they have key value pairs

00:00:04,410 --> 00:00:08,340
and they can have nested structure so

00:00:06,810 --> 00:00:10,380
inside a document you can have other

00:00:08,340 --> 00:00:11,940
documents you can have a raise just like

00:00:10,380 --> 00:00:13,620
pearl data structures you can have

00:00:11,940 --> 00:00:16,710
hatches of arrays of documents of a

00:00:13,620 --> 00:00:19,380
raise same thing in all your favorite

00:00:16,710 --> 00:00:21,330
high-level languages and they look a

00:00:19,380 --> 00:00:23,100
little bit like JSON so if you're

00:00:21,330 --> 00:00:24,840
familiar with JSON here's an example of

00:00:23,100 --> 00:00:27,240
a document this is something that could

00:00:24,840 --> 00:00:29,070
go right in MongoDB so this is the

00:00:27,240 --> 00:00:31,800
document representing a book it has a

00:00:29,070 --> 00:00:34,590
title it has an author it has a language

00:00:31,800 --> 00:00:37,380
it has a genre which in this case is an

00:00:34,590 --> 00:00:40,920
array of two genres it has this sub

00:00:37,380 --> 00:00:42,780
document or embedded hash ref everyone

00:00:40,920 --> 00:00:47,160
to think of it called publication which

00:00:42,780 --> 00:00:50,700
has some information about public this

00:00:47,160 --> 00:00:52,590
is um this is actually not JSON because

00:00:50,700 --> 00:00:56,070
it has date types but this is JavaScript

00:00:52,590 --> 00:00:57,989
and if you use the MongoDB shell which

00:00:56,070 --> 00:01:00,239
comes with MongoDB that's actually a

00:00:57,989 --> 00:01:04,650
complete JavaScript environment so you

00:01:00,239 --> 00:01:06,030
can JavaScript ripple so you can type

00:01:04,650 --> 00:01:07,799
stuff like this right into the shell and

00:01:06,030 --> 00:01:10,140
work with it and save it in MongoDB and

00:01:07,799 --> 00:01:11,970
do queries if you were to represent this

00:01:10,140 --> 00:01:16,500
in Perl it would look almost the same

00:01:11,970 --> 00:01:18,360
thing except this instead of the native

00:01:16,500 --> 00:01:21,540
date type we use date time or date time

00:01:18,360 --> 00:01:24,479
tiny but basically it's the same idea so

00:01:21,540 --> 00:01:26,700
when working with the MongoDB class

00:01:24,479 --> 00:01:29,189
structure in Perl we want to get these

00:01:26,700 --> 00:01:31,890
things called documents we get them from

00:01:29,189 --> 00:01:34,170
a cursor the cursor has a collection

00:01:31,890 --> 00:01:36,900
which is where those documents live the

00:01:34,170 --> 00:01:39,420
collection has a database which again is

00:01:36,900 --> 00:01:41,310
just a namespace and that database has a

00:01:39,420 --> 00:01:43,350
client which is the thing that actually

00:01:41,310 --> 00:01:45,770
maintains your socket and connection and

00:01:43,350 --> 00:01:48,659
so forth and all of that stuff

00:01:45,770 --> 00:01:49,380
communicates with your application so

00:01:48,659 --> 00:01:51,990
now that we have the necessary

00:01:49,380 --> 00:01:55,470
background let's actually build this

00:01:51,990 --> 00:01:56,430
thing so this is the first thing we're

00:01:55,470 --> 00:01:57,869
going to do we're going to set up a

00:01:56,430 --> 00:01:59,759
really simple mo delicious light

00:01:57,869 --> 00:02:01,710
application so we're going to use

00:01:59,759 --> 00:02:03,780
MongoDB and we're going to set up this

00:02:01,710 --> 00:02:07,200
route that just gets the root level of

00:02:03,780 --> 00:02:08,759
our web application and all it does it

00:02:07,200 --> 00:02:11,310
doesn't actually do anything with a

00:02:08,759 --> 00:02:13,260
database yet it just says hello library

00:02:11,310 --> 00:02:15,750
users so that's not too

00:02:13,260 --> 00:02:18,239
testing but let's create a page called /

00:02:15,750 --> 00:02:20,670
books that'll give us a list of all the

00:02:18,239 --> 00:02:22,680
books in our library so the first thing

00:02:20,670 --> 00:02:26,099
we're going to do is define this sub for

00:02:22,680 --> 00:02:29,129
the get route to flash books we're going

00:02:26,099 --> 00:02:30,599
to create a client in this case I

00:02:29,129 --> 00:02:32,069
haven't passed any arguments to the

00:02:30,599 --> 00:02:33,390
constructor so it's going to connect on

00:02:32,069 --> 00:02:35,940
the default is going to try to connect

00:02:33,390 --> 00:02:37,680
on the default port on localhost but if

00:02:35,940 --> 00:02:39,390
we wanted to connect elsewhere we could

00:02:37,680 --> 00:02:41,700
just provide a host and port name in the

00:02:39,390 --> 00:02:43,200
constructor then we're going to ask the

00:02:41,700 --> 00:02:46,230
client to get our database called

00:02:43,200 --> 00:02:47,730
library we're going to we're going to

00:02:46,230 --> 00:02:49,560
ask the database to get a collection

00:02:47,730 --> 00:02:51,480
called books which is where actual

00:02:49,560 --> 00:02:53,400
documents are living and then we're

00:02:51,480 --> 00:02:55,379
going to get a cursor we're going to

00:02:53,400 --> 00:02:57,450
call the find method on this collection

00:02:55,379 --> 00:02:59,549
and again with no arguments that just

00:02:57,450 --> 00:03:01,739
means find everything if we wanted to

00:02:59,549 --> 00:03:04,739
restrict this query we could pass in a

00:03:01,739 --> 00:03:06,150
query document to the fine method if for

00:03:04,739 --> 00:03:07,920
example if we want to find books by a

00:03:06,150 --> 00:03:09,480
particular author and then I'm just

00:03:07,920 --> 00:03:12,030
going to pass these objects straight to

00:03:09,480 --> 00:03:14,250
a template and this is an EPL template

00:03:12,030 --> 00:03:16,920
which just looks like this it in turrets

00:03:14,250 --> 00:03:19,290
over that cursor and outputs a line item

00:03:16,920 --> 00:03:20,760
for each one so if we actually run this

00:03:19,290 --> 00:03:22,230
assuming we had some books in the

00:03:20,760 --> 00:03:25,440
database it would look like this and

00:03:22,230 --> 00:03:27,799
here are some test books and two

00:03:25,440 --> 00:03:30,030
different authors Bob Smith and Jane Doe

00:03:27,799 --> 00:03:32,549
so that's all you have to do now notice

00:03:30,030 --> 00:03:35,250
to do all of this we didn't have to

00:03:32,549 --> 00:03:37,500
write any SQL or any other query

00:03:35,250 --> 00:03:40,650
language we just called methods on these

00:03:37,500 --> 00:03:43,440
objects and that's because the way

00:03:40,650 --> 00:03:46,160
MongoDB works is rather than making you

00:03:43,440 --> 00:03:48,299
write a query language it has an

00:03:46,160 --> 00:03:50,310
object-oriented syntax that just gives

00:03:48,299 --> 00:03:52,620
you the data back and since the data

00:03:50,310 --> 00:03:54,569
fits within the data structures of a

00:03:52,620 --> 00:03:56,879
programming language in our case you

00:03:54,569 --> 00:03:59,250
know hat you know what we call documents

00:03:56,879 --> 00:04:01,169
are really just hashes which can contain

00:03:59,250 --> 00:04:03,060
other hashes and arrays that maps

00:04:01,169 --> 00:04:04,829
directly to the data structures that you

00:04:03,060 --> 00:04:06,720
work with every day so you don't really

00:04:04,829 --> 00:04:10,019
have to have this intermediary layer of

00:04:06,720 --> 00:04:11,849
writing SQL getting results back in a

00:04:10,019 --> 00:04:14,669
list and massaging those into objects

00:04:11,849 --> 00:04:16,199
you don't have to use an ORM although

00:04:14,669 --> 00:04:19,049
there are similar things that you can

00:04:16,199 --> 00:04:21,359
use for mongodb if you want to but it's

00:04:19,049 --> 00:04:23,190
nice if you're working with a lot of

00:04:21,359 --> 00:04:25,169
these kind of nested hierarchical data

00:04:23,190 --> 00:04:27,180
structures it's nice to have a database

00:04:25,169 --> 00:04:30,570
that treats all of those is first class

00:04:27,180 --> 00:04:33,240
tances where you don't have to go

00:04:30,570 --> 00:04:36,120
through the work of coercing that into a

00:04:33,240 --> 00:04:38,550
relational structure all right so that's

00:04:36,120 --> 00:04:41,340
very simple so far we've just displayed

00:04:38,550 --> 00:04:42,750
a list of books but let's do something

00:04:41,340 --> 00:04:44,460
more interesting you might remember from

00:04:42,750 --> 00:04:46,800
that original book example I had this

00:04:44,460 --> 00:04:49,190
genre filled in it and this particular

00:04:46,800 --> 00:04:52,289
book has to genres fantasy and adventure

00:04:49,190 --> 00:04:55,320
so let's do something with genres and

00:04:52,289 --> 00:04:57,389
let's write another mojolicious route in

00:04:55,320 --> 00:04:59,669
this case I'm a code sample might be a

00:04:57,389 --> 00:05:01,770
little too small but we're going to say

00:04:59,669 --> 00:05:04,830
we're going to create a route called /

00:05:01,770 --> 00:05:07,110
books flash genre where we can look up

00:05:04,830 --> 00:05:08,490
all the books in a given genre the colon

00:05:07,110 --> 00:05:11,340
before genre there means that's a

00:05:08,490 --> 00:05:15,060
parameter so we'll have / book / fantasy

00:05:11,340 --> 00:05:17,550
/ book / adventure and so forth and the

00:05:15,060 --> 00:05:19,410
sub for this is also pretty easy we're

00:05:17,550 --> 00:05:21,300
going to create our new client

00:05:19,410 --> 00:05:22,740
again we're going to get our collection

00:05:21,300 --> 00:05:24,900
and again we're going to do a find and

00:05:22,740 --> 00:05:27,360
on this time the fine we're actually

00:05:24,900 --> 00:05:30,090
going to pass a parameter and we passed

00:05:27,360 --> 00:05:32,520
this hash raft which says genre maps to

00:05:30,090 --> 00:05:35,520
dollar genre which is what passed was

00:05:32,520 --> 00:05:37,199
passed in in our URL so all this is

00:05:35,520 --> 00:05:39,840
doing is it's saying find me all the

00:05:37,199 --> 00:05:42,120
documents in books that have a genre

00:05:39,840 --> 00:05:44,550
field that matches fantasy or adventure

00:05:42,120 --> 00:05:47,280
but you might be saying at this point

00:05:44,550 --> 00:05:49,800
Mike that genre field was an array it

00:05:47,280 --> 00:05:51,360
was not a scalar and that's true it was

00:05:49,800 --> 00:05:53,820
an array in our sample book that

00:05:51,360 --> 00:05:56,070
contained two items as it happens in

00:05:53,820 --> 00:05:58,199
MongoDB if you ask to match an array

00:05:56,070 --> 00:06:00,630
against a scalar value that's the

00:05:58,199 --> 00:06:02,729
equivalent of an in operation and it

00:06:00,630 --> 00:06:06,150
will say does that value appear in that

00:06:02,729 --> 00:06:09,599
array so if it's fantasy then for the

00:06:06,150 --> 00:06:13,169
document Lord of the Rings it will

00:06:09,599 --> 00:06:15,419
appear in that array if we just had a

00:06:13,169 --> 00:06:17,370
single genre we might do it as an array

00:06:15,419 --> 00:06:19,680
of a single value or I might just do it

00:06:17,370 --> 00:06:23,430
as a single scalar value in the document

00:06:19,680 --> 00:06:25,199
it would still work so again I'm going

00:06:23,430 --> 00:06:28,500
to pass all this information to an EPL

00:06:25,199 --> 00:06:29,729
template and we could render that and

00:06:28,500 --> 00:06:31,860
that would work and i don't think i have

00:06:29,729 --> 00:06:33,389
a screenshot of that no all right I've

00:06:31,860 --> 00:06:36,419
left out the screenshot of that my

00:06:33,389 --> 00:06:39,360
apologies but let's do something even

00:06:36,419 --> 00:06:40,620
more interesting so so far we've listed

00:06:39,360 --> 00:06:42,000
all the books we've

00:06:40,620 --> 00:06:44,790
listed all the books in a particular

00:06:42,000 --> 00:06:48,060
genre what if we want to add a new book

00:06:44,790 --> 00:06:49,680
so we'll create a post handler and this

00:06:48,060 --> 00:06:51,449
is just going to allow us to post some

00:06:49,680 --> 00:06:53,910
information to slash books to create

00:06:51,449 --> 00:06:55,590
something new so again we'll construct

00:06:53,910 --> 00:06:56,760
our manga cry and we don't have to do

00:06:55,590 --> 00:06:58,590
that every time we could have a

00:06:56,760 --> 00:07:00,449
mojolicious helper that just keeps track

00:06:58,590 --> 00:07:02,970
of the manga client I just did it this

00:07:00,449 --> 00:07:04,889
way for simplicity but now let's uh

00:07:02,970 --> 00:07:06,180
we're just going to create a hash ref

00:07:04,889 --> 00:07:08,970
here and we're just going to grab

00:07:06,180 --> 00:07:11,040
information out of the request so self /

00:07:08,970 --> 00:07:13,770
am title gives us the title we get the

00:07:11,040 --> 00:07:16,010
author we get the genre which again

00:07:13,770 --> 00:07:19,320
we're going to put in an array reference

00:07:16,010 --> 00:07:20,699
if the user passes multiple genres then

00:07:19,320 --> 00:07:21,900
we'd have multiple items in that array

00:07:20,699 --> 00:07:24,780
otherwise it would just be an array of

00:07:21,900 --> 00:07:27,419
one which is fine we're going to create

00:07:24,780 --> 00:07:29,610
the publication information as a nested

00:07:27,419 --> 00:07:32,880
document again just grabbing stuff out

00:07:29,610 --> 00:07:34,949
of self / am for the date will construct

00:07:32,880 --> 00:07:36,720
a datetime object you could also use

00:07:34,949 --> 00:07:38,160
datetime tiny if you don't want to

00:07:36,720 --> 00:07:41,940
construct a datetime object because

00:07:38,160 --> 00:07:44,190
those are expensive and then we'll just

00:07:41,940 --> 00:07:46,530
insert it and all we do to insert is we

00:07:44,190 --> 00:07:48,210
just call this insert method and pass

00:07:46,530 --> 00:07:50,639
the hash ref and that's all we have to

00:07:48,210 --> 00:07:52,860
do and all of that information exactly

00:07:50,639 --> 00:07:54,900
as its structured right there will live

00:07:52,860 --> 00:07:56,370
in the database and we can query on that

00:07:54,900 --> 00:07:58,530
information we could query on those

00:07:56,370 --> 00:08:00,810
genres as we saw we could query on the

00:07:58,530 --> 00:08:02,400
publication information and so on and so

00:08:00,810 --> 00:08:06,090
forth because all of this nested

00:08:02,400 --> 00:08:09,210
structure is a first class object in

00:08:06,090 --> 00:08:11,160
MongoDB so that's really all there is to

00:08:09,210 --> 00:08:15,289
it to building a simple straightforward

00:08:11,160 --> 00:08:18,270
application in MongoDB some conclusions

00:08:15,289 --> 00:08:19,650
mongodb is easy to work with I think

00:08:18,270 --> 00:08:23,699
this presentation in particular

00:08:19,650 --> 00:08:25,380
demonstrates that's really well there

00:08:23,699 --> 00:08:26,729
are no schema definition so in working

00:08:25,380 --> 00:08:29,130
with a relational database the first

00:08:26,729 --> 00:08:31,199
thing you have to do is define all your

00:08:29,130 --> 00:08:32,789
tables and your schema and so forth and

00:08:31,199 --> 00:08:34,919
so forth you don't have to do that in

00:08:32,789 --> 00:08:39,060
MongoDB you just name a collection and

00:08:34,919 --> 00:08:41,669
start inserting stuff so the nice thing

00:08:39,060 --> 00:08:43,200
about that is that means that documents

00:08:41,669 --> 00:08:45,750
that exist in the same collection do not

00:08:43,200 --> 00:08:50,070
have to have the same fields so for

00:08:45,750 --> 00:08:51,780
example you might have a some books are

00:08:50,070 --> 00:08:54,000
collaborations between multiple authors

00:08:51,780 --> 00:08:54,510
but most books aren't so you might have

00:08:54,000 --> 00:08:55,590
a collab

00:08:54,510 --> 00:08:57,900
raishin filled in there which is a

00:08:55,590 --> 00:08:59,370
boolean instead of setting that to know

00:08:57,900 --> 00:09:01,800
for ninety percent of your books you can

00:08:59,370 --> 00:09:03,030
just leave it out if you want it you

00:09:01,800 --> 00:09:04,500
could create a collection where all the

00:09:03,030 --> 00:09:06,630
documents look nothing alike and that's

00:09:04,500 --> 00:09:08,070
probably not a good idea because that

00:09:06,630 --> 00:09:10,860
would be a pain to program with but you

00:09:08,070 --> 00:09:12,660
could do that if you wanted to there is

00:09:10,860 --> 00:09:14,460
no relational modeling you can do the

00:09:12,660 --> 00:09:16,320
equivalent of a relational model in

00:09:14,460 --> 00:09:18,390
MongoDB across many collections if you

00:09:16,320 --> 00:09:19,710
wanted to but then you just have to

00:09:18,390 --> 00:09:21,360
write your own joins and by that point

00:09:19,710 --> 00:09:24,110
you're just writing your own relational

00:09:21,360 --> 00:09:26,910
database so it might not be a good idea

00:09:24,110 --> 00:09:29,040
the nice thing about mongodb is that the

00:09:26,910 --> 00:09:30,630
model matches your code so you're used

00:09:29,040 --> 00:09:32,790
to dealing with hashes of hashes and

00:09:30,630 --> 00:09:34,770
hashes of arrays that's what goes in the

00:09:32,790 --> 00:09:37,890
database and that's what comes out which

00:09:34,770 --> 00:09:39,720
makes it really easy to deal with pearl

00:09:37,890 --> 00:09:42,810
hashes are basically the same thing as

00:09:39,720 --> 00:09:45,150
MongoDB documents and finally you can

00:09:42,810 --> 00:09:46,920
let your use case determine your data

00:09:45,150 --> 00:09:49,890
model not the other way around in

00:09:46,920 --> 00:09:51,720
relational databases we often design the

00:09:49,890 --> 00:09:54,360
data model first and then write our

00:09:51,720 --> 00:09:55,950
program around that the nice thing about

00:09:54,360 --> 00:09:58,020
mongodb is we can think well what do we

00:09:55,950 --> 00:10:00,720
want this program to do and then we can

00:09:58,020 --> 00:10:02,190
make the data fit that really easily so

00:10:00,720 --> 00:10:04,080
if you're interested in this and I hope

00:10:02,190 --> 00:10:06,930
you are I hope this this of course is

00:10:04,080 --> 00:10:09,690
just a very very very basic introduction

00:10:06,930 --> 00:10:11,870
but if you want to learn more to learn

00:10:09,690 --> 00:10:15,750
more about MongoDB checkout docks

00:10:11,870 --> 00:10:17,520
MongoDB org they've over the past year

00:10:15,750 --> 00:10:21,360
or so done a really excellent job

00:10:17,520 --> 00:10:23,880
updating and expanding the manual to

00:10:21,360 --> 00:10:26,640
learn more about the DB pearl

00:10:23,880 --> 00:10:28,530
driver that of course is on Sipan there

00:10:26,640 --> 00:10:30,660
is a module in there called MongoDB

00:10:28,530 --> 00:10:33,180
tutorial which is a nice pod which

00:10:30,660 --> 00:10:34,890
contains sort of all the basic crud

00:10:33,180 --> 00:10:37,680
operations and how you do all sorts of

00:10:34,890 --> 00:10:39,870
queries using Perl the nice thing about

00:10:37,680 --> 00:10:41,880
our drivers is the API is fairly

00:10:39,870 --> 00:10:43,890
consistent across all of them so if you

00:10:41,880 --> 00:10:48,120
want to do stuff in Python and Ruby to

00:10:43,890 --> 00:10:50,160
it works basically the same way you can

00:10:48,120 --> 00:10:53,430
check out the demo app that I showed you

00:10:50,160 --> 00:10:56,610
which is on my github here dash

00:10:53,430 --> 00:10:59,040
library my github name is frito as it is

00:10:56,610 --> 00:11:00,570
pretty much everywhere else some

00:10:59,040 --> 00:11:03,000
potential things you might want to do

00:11:00,570 --> 00:11:05,010
our add functions for editing authors

00:11:03,000 --> 00:11:07,350
and our for editing books instead of

00:11:05,010 --> 00:11:08,310
just creating them there's also a nice

00:11:07,350 --> 00:11:11,040
Sipan eco

00:11:08,310 --> 00:11:13,860
system around we instead of having

00:11:11,040 --> 00:11:17,940
ORM s we have odms for object document

00:11:13,860 --> 00:11:19,050
Mac mappers there a lot simpler than an

00:11:17,940 --> 00:11:21,390
ORM because they don't have to do a

00:11:19,050 --> 00:11:24,000
whole lot one is Mongoose which is based

00:11:21,390 --> 00:11:26,430
on the very successful mapper from

00:11:24,000 --> 00:11:27,900
Ruby this basically takes MongoDB

00:11:26,430 --> 00:11:30,240
documents and turns them into moose

00:11:27,900 --> 00:11:32,610
objects this allows you to use mousse to

00:11:30,240 --> 00:11:35,760
do schema validation so it's not

00:11:32,610 --> 00:11:38,100
complete chaos and that's pretty nice

00:11:35,760 --> 00:11:42,360
there's also MongoDB I which is very

00:11:38,100 --> 00:11:44,400
similar also uses sets up a DSL kind of

00:11:42,360 --> 00:11:48,180
moose like syntax for your MongoDB

00:11:44,400 --> 00:11:50,790
documents there's also MongoDB a sink

00:11:48,180 --> 00:11:54,510
which tracks the upstream driver but

00:11:50,790 --> 00:12:00,750
adds koro and Libby V to do asynchronous

00:11:54,510 --> 00:12:02,460
queries and you know that bullet point

00:12:00,750 --> 00:12:04,830
actually is obsolete because they have

00:12:02,460 --> 00:12:06,510
done new releases of that so there

00:12:04,830 --> 00:12:08,870
wasn't a new release in a couple of

00:12:06,510 --> 00:12:12,300
years but it should be now up to date

00:12:08,870 --> 00:12:14,430
there's also mango which is very cool

00:12:12,300 --> 00:12:17,610
written by Sebastian Riedel of

00:12:14,430 --> 00:12:20,370
mojolicious it's designed to fit into mo

00:12:17,610 --> 00:12:22,950
delicious really nice this is a pure

00:12:20,370 --> 00:12:26,310
pearl MongoDB client the official driver

00:12:22,950 --> 00:12:28,650
has lots of C code excess stuff this one

00:12:26,310 --> 00:12:31,320
doesn't it's in pure pearl it fits right

00:12:28,650 --> 00:12:34,410
in with mojolicious and it's really cool

00:12:31,320 --> 00:12:35,430
asynchronous non-blocking and Sebastian

00:12:34,410 --> 00:12:37,470
if you've worked with him you know he's

00:12:35,430 --> 00:12:39,360
great and works really hard to actively

00:12:37,470 --> 00:12:42,120
maintained things so I think I've got

00:12:39,360 --> 00:12:45,000
like 20 seconds left if you've got any

00:12:42,120 --> 00:12:47,280
questions come find me unfortunately I

00:12:45,000 --> 00:12:50,070
have another talk in like 10 minutes in

00:12:47,280 --> 00:12:53,070
another room but you can track me down

00:12:50,070 --> 00:12:55,130
there and thank you very much for your

00:12:53,070 --> 00:12:55,130
time

00:12:58,990 --> 00:13:08,120
let's try this out it still says stand

00:13:04,400 --> 00:13:11,860
by I don't know the internet gods may

00:13:08,120 --> 00:13:11,860
have figured out what I was trying to do

00:13:16,450 --> 00:13:19,450

YouTube URL: https://www.youtube.com/watch?v=LsY1ShOKY-4


