Title: David Golden â€ŽJuggling Chainsaws Perl and MongoDB
Publication date: 2015-06-16
Playlist: YAPC::NA 2015
Description: 
	
Captions: 
	00:00:00,410 --> 00:00:04,650
my name is david goldin I probably saw

00:00:02,879 --> 00:00:08,849
most of you or you saw me up on the

00:00:04,650 --> 00:00:11,340
stage during the opening keynote so I'm

00:00:08,849 --> 00:00:12,929
still david goldin I work for mongodb

00:00:11,340 --> 00:00:17,039
and have for a little over a year and I

00:00:12,929 --> 00:00:19,410
lead the MongoDB pearl driver project so

00:00:17,039 --> 00:00:22,230
today this talk is going to be a lot

00:00:19,410 --> 00:00:24,449
about pearl as you might expect it's

00:00:22,230 --> 00:00:26,369
also going to be a lot about MongoDB I

00:00:24,449 --> 00:00:29,310
wanted to stop and see if I need to

00:00:26,369 --> 00:00:33,780
explain what MongoDB is so who here has

00:00:29,310 --> 00:00:35,100
is an MongoDB expert self-assess okay no

00:00:33,780 --> 00:00:38,489
experts that's fine i should probably

00:00:35,100 --> 00:00:40,250
raise my hand i should be an expert how

00:00:38,489 --> 00:00:43,140
many people have used MongoDB at all

00:00:40,250 --> 00:00:47,460
okay bunch of hands how many people at

00:00:43,140 --> 00:00:48,719
least know what MongoDB is okay how many

00:00:47,460 --> 00:00:52,110
people have no idea what I'm talking

00:00:48,719 --> 00:00:54,360
about whatsoever okay a couple hands

00:00:52,110 --> 00:00:57,570
alright so I'll go over the next little

00:00:54,360 --> 00:00:59,309
bit a little bit faster I won't spend a

00:00:57,570 --> 00:01:00,420
lot of time trying to explain that

00:00:59,309 --> 00:01:02,280
DB is for startups that want to be

00:01:00,420 --> 00:01:04,140
enterprises and enterprises that want to

00:01:02,280 --> 00:01:05,820
be startups I'm not really sure what

00:01:04,140 --> 00:01:09,540
that means but that's why I'm in

00:01:05,820 --> 00:01:11,610
engineering and not marketing some

00:01:09,540 --> 00:01:15,210
people might say that MongoDB is a no

00:01:11,610 --> 00:01:18,210
SQL database I won't say that because

00:01:15,210 --> 00:01:19,530
it's not really no SQL and once again

00:01:18,210 --> 00:01:21,630
the marketing people would have my head

00:01:19,530 --> 00:01:24,780
if I said that it was SQL so if I say

00:01:21,630 --> 00:01:27,780
that it's no SQL that's a no-no so

00:01:24,780 --> 00:01:30,299
MongoDB is a lot about storing documents

00:01:27,780 --> 00:01:31,680
and has auto sharding and native

00:01:30,299 --> 00:01:33,810
replication and blah blah blah blah blah

00:01:31,680 --> 00:01:34,710
and a lot of other features most of

00:01:33,810 --> 00:01:36,659
which aren't really important because

00:01:34,710 --> 00:01:38,119
just the top fewer enough to sort of get

00:01:36,659 --> 00:01:40,380
most of the jokes in the presentation

00:01:38,119 --> 00:01:41,400
and there are going to be some because

00:01:40,380 --> 00:01:46,320
some people have a very different

00:01:41,400 --> 00:01:48,180
opinion about MongoDB I have to thank

00:01:46,320 --> 00:01:49,500
Matt trout for sending this to me a

00:01:48,180 --> 00:01:50,729
couple days ago and as soon as I saw it

00:01:49,500 --> 00:01:53,100
I said a hot that has to go into the

00:01:50,729 --> 00:01:55,500
presentation and it turns out to be a

00:01:53,100 --> 00:01:57,329
very good segue to the something else

00:01:55,500 --> 00:02:00,390
we'll be talking about a lot today which

00:01:57,329 --> 00:02:02,159
is trolls because there are definitely a

00:02:00,390 --> 00:02:04,170
lot of them when we talk about pearl and

00:02:02,159 --> 00:02:05,700
mongodb and of course as promised in the

00:02:04,170 --> 00:02:10,229
title we'll talk a bit about chainsaws

00:02:05,700 --> 00:02:12,510
and in my opinion every talk is a lot

00:02:10,229 --> 00:02:13,680
more interesting and exciting if there's

00:02:12,510 --> 00:02:16,519
something dangerous going on

00:02:13,680 --> 00:02:18,989
so I will have some live demonstrations

00:02:16,519 --> 00:02:20,609
and bizarrely when I found this I

00:02:18,989 --> 00:02:23,310
thought my gosh that actually looks a

00:02:20,609 --> 00:02:25,019
little bit like me but I realized that I

00:02:23,310 --> 00:02:26,280
can explain to everybody but it's not me

00:02:25,019 --> 00:02:28,140
and you can tell because I would never

00:02:26,280 --> 00:02:34,079
do something as crazy and dangerous as

00:02:28,140 --> 00:02:37,500
trying to juggle the hatchet so that's a

00:02:34,079 --> 00:02:39,090
good segue to my reminder to do a little

00:02:37,500 --> 00:02:41,099
bit of a live demo I'm going to kick off

00:02:39,090 --> 00:02:43,019
a process that's going to run on my

00:02:41,099 --> 00:02:46,939
laptop while I give the talk hopefully

00:02:43,019 --> 00:02:49,139
not lag keynote too much and it will

00:02:46,939 --> 00:02:50,430
store some data into MongoDB and then

00:02:49,139 --> 00:02:53,090
I'll analyze it a little bit later in

00:02:50,430 --> 00:02:55,680
the talks so if I can get to the right

00:02:53,090 --> 00:03:00,109
screens you've got the right screen I

00:02:55,680 --> 00:03:00,109
want to see if I can rig this up again

00:03:09,409 --> 00:03:15,239
so this program fires up a ramdisk to

00:03:12,840 --> 00:03:16,889
untie a lot store a lot of untoward tar

00:03:15,239 --> 00:03:18,959
balls and gathered up a lot of

00:03:16,889 --> 00:03:21,329
information about CP and distributions

00:03:18,959 --> 00:03:23,549
and we'll leave this running in the

00:03:21,329 --> 00:03:25,440
background and hopefully if it doesn't

00:03:23,549 --> 00:03:28,949
lag I'll let it run and we will come

00:03:25,440 --> 00:03:31,819
back to this a little bit later on all

00:03:28,949 --> 00:03:31,819
right and we're back

00:03:38,630 --> 00:03:42,320
so the if there's one kind of take away

00:03:40,940 --> 00:03:45,020
I'd like you to have from this talk it's

00:03:42,320 --> 00:03:47,960
that pearl and mongodb are surprisingly

00:03:45,020 --> 00:03:49,430
similar and the sort of the first area

00:03:47,960 --> 00:03:50,810
i'll talk about actually kind of goes

00:03:49,430 --> 00:03:53,780
back to the trolls and it's talking

00:03:50,810 --> 00:03:56,570
about stereotypes so stereotypes being

00:03:53,780 --> 00:03:59,330
widely held fixed oversimplified views

00:03:56,570 --> 00:04:01,790
of something and as we know trolls love

00:03:59,330 --> 00:04:04,880
stereotypes and trolls seem to have a

00:04:01,790 --> 00:04:06,590
particular love for mongodb and pearl

00:04:04,880 --> 00:04:07,730
but it's a particular kind of love

00:04:06,590 --> 00:04:09,230
because they seem to love doing

00:04:07,730 --> 00:04:12,650
something but they seem to love doing is

00:04:09,230 --> 00:04:14,690
 all over bungu TBN pearl and

00:04:12,650 --> 00:04:16,910
making a lot of comments about it that

00:04:14,690 --> 00:04:18,320
we in the puerile community and people

00:04:16,910 --> 00:04:20,299
know mommy to be community don't always

00:04:18,320 --> 00:04:21,590
take well but because these things are

00:04:20,299 --> 00:04:23,600
also kind of humorous and they're also a

00:04:21,590 --> 00:04:25,190
little bit based in reality I thought it

00:04:23,600 --> 00:04:28,100
would be fun to play a little game I'm

00:04:25,190 --> 00:04:29,740
calling guess the meme so on the next

00:04:28,100 --> 00:04:33,440
few slides I'm going to put up a phrase

00:04:29,740 --> 00:04:36,230
and there's the the the subject of the

00:04:33,440 --> 00:04:38,390
phrase is under isn't under wine imma

00:04:36,230 --> 00:04:39,830
you get to shout out pearl or MongoDB

00:04:38,390 --> 00:04:41,660
depending on which one you think it

00:04:39,830 --> 00:04:45,710
applies so feel free to shout out when I

00:04:41,660 --> 00:04:49,520
put up the slide so blank is dead pearl

00:04:45,710 --> 00:04:53,210
ok we have may well be dead maybe

00:04:49,520 --> 00:04:55,310
JavaScript soon I don't know so yeah the

00:04:53,210 --> 00:04:58,190
common misconception or probably over

00:04:55,310 --> 00:04:59,630
sort of phrase that Steven little sort

00:04:58,190 --> 00:05:02,060
of popularized with his talk about

00:04:59,630 --> 00:05:04,310
probing dead so another one if you know

00:05:02,060 --> 00:05:08,150
MongoDB you may have heard blankets

00:05:04,310 --> 00:05:10,160
web-scale I'm going to be alright so

00:05:08,150 --> 00:05:11,120
this was a very humorous video that I

00:05:10,160 --> 00:05:13,400
don't know if it's even available

00:05:11,120 --> 00:05:15,580
anymore but essentially it was a big

00:05:13,400 --> 00:05:17,750
riff on why people should use MongoDB

00:05:15,580 --> 00:05:18,920
because it says it's so fast and

00:05:17,750 --> 00:05:20,450
somebody saying well it really if it's

00:05:18,920 --> 00:05:21,890
if you could you be even faster if you

00:05:20,450 --> 00:05:23,210
could you know just pipe everything to

00:05:21,890 --> 00:05:24,500
death knell on the person really if I

00:05:23,210 --> 00:05:28,340
would absolutely use death knell if that

00:05:24,500 --> 00:05:31,130
was faster and is pretty good and

00:05:28,340 --> 00:05:32,900
amusingly just last week at MongoDB

00:05:31,130 --> 00:05:34,250
world a whole bunch of t-shirts were

00:05:32,900 --> 00:05:35,750
printed up with this character on them

00:05:34,250 --> 00:05:38,450
and sort of distributed out as like sort

00:05:35,750 --> 00:05:40,190
of secret swag to people so it sort of

00:05:38,450 --> 00:05:43,580
internally it was kind of adopted as a

00:05:40,190 --> 00:05:47,660
badge of pride I don't know subvert the

00:05:43,580 --> 00:05:50,930
meme blank is line noise pearl alright

00:05:47,660 --> 00:05:51,910
and interestingly we actually saw this

00:05:50,930 --> 00:05:53,680
very same image

00:05:51,910 --> 00:05:54,760
different color scheme last night during

00:05:53,680 --> 00:05:56,290
the keynote which I thought was a good

00:05:54,760 --> 00:05:58,780
example of why people very immediately

00:05:56,290 --> 00:06:01,120
think of very long complicated hard to

00:05:58,780 --> 00:06:03,900
read expressions as being very polish /

00:06:01,120 --> 00:06:08,020
district one that are kind of artistic

00:06:03,900 --> 00:06:11,050
blank will lose your data nerdy be okay

00:06:08,020 --> 00:06:12,760
and so yeah there's the conception

00:06:11,050 --> 00:06:14,470
particularly from the older days of

00:06:12,760 --> 00:06:16,390
MongoDB when there were some significant

00:06:14,470 --> 00:06:17,860
bugs that you know you put your data in

00:06:16,390 --> 00:06:19,690
and you wonder why I comes dripping on

00:06:17,860 --> 00:06:21,670
you can't find it which then led to a

00:06:19,690 --> 00:06:22,930
follow-up joke about well you don't want

00:06:21,670 --> 00:06:24,190
to just have one place to keep your data

00:06:22,930 --> 00:06:28,630
you really need to three because that

00:06:24,190 --> 00:06:32,200
will solve your problem blank is

00:06:28,630 --> 00:06:33,550
read-only Earl right so there's a sense

00:06:32,200 --> 00:06:35,530
of pearls on maintainable that it's

00:06:33,550 --> 00:06:37,330
spaghetti that you can't possibly read

00:06:35,530 --> 00:06:39,070
it and to some extent pearls still being

00:06:37,330 --> 00:06:44,250
judged I think by Matt script archived

00:06:39,070 --> 00:06:46,030
from the 90s blank is unsafe by default

00:06:44,250 --> 00:06:49,450
this is actually a trick question

00:06:46,030 --> 00:06:52,000
because it's pearl and mongodb both of

00:06:49,450 --> 00:06:54,010
them so MongoDB for a while didn't have

00:06:52,000 --> 00:06:57,580
journaling didn't acknowledge rights and

00:06:54,010 --> 00:06:58,990
was pretty unsafe by default but at the

00:06:57,580 --> 00:07:00,310
top of almost every pro script you would

00:06:58,990 --> 00:07:01,630
find by anybody who knows what they're

00:07:00,310 --> 00:07:04,900
doing with pearl you'll still find you

00:07:01,630 --> 00:07:06,040
strict use warnings or maybe if you can

00:07:04,900 --> 00:07:07,990
use a more recent version of Perl you

00:07:06,040 --> 00:07:10,150
know use v5 dot whichever one it was

00:07:07,990 --> 00:07:11,620
that makes that turn on strict so pearl

00:07:10,150 --> 00:07:13,030
is actually unsafe by default as well I

00:07:11,620 --> 00:07:16,320
mean people get themselves into a lot of

00:07:13,030 --> 00:07:18,760
trouble and they don't make it safe so

00:07:16,320 --> 00:07:21,640
both pearl and mongodb get a lot of

00:07:18,760 --> 00:07:23,230
grief from haters so there's someone in

00:07:21,640 --> 00:07:25,480
that way but the other way they're

00:07:23,230 --> 00:07:27,610
similar is they have a similar data

00:07:25,480 --> 00:07:29,740
model I went looking for some sort of

00:07:27,610 --> 00:07:31,419
picture to symbolize like hashes which

00:07:29,740 --> 00:07:33,610
we use a lot and I thought about how

00:07:31,419 --> 00:07:34,870
well do I do the the dots in the boxes

00:07:33,610 --> 00:07:35,740
and the arrows and I said well let me

00:07:34,870 --> 00:07:38,330
try to find something more interesting

00:07:35,740 --> 00:07:41,840
this was the best I came up with

00:07:38,330 --> 00:07:44,360
which if anybody has been to the diner

00:07:41,840 --> 00:07:47,360
restaurant here the the coffee shop they

00:07:44,360 --> 00:07:49,490
have they have hash browns so we use a

00:07:47,360 --> 00:07:51,439
lot of hashes in Perl and we use also

00:07:49,490 --> 00:07:52,789
use a lot of arrays and while these are

00:07:51,439 --> 00:07:54,530
all identical pearl of course lets you

00:07:52,789 --> 00:07:55,909
store heterogeneous data in the Rays

00:07:54,530 --> 00:07:57,379
what the ideas we have long long lines

00:07:55,909 --> 00:08:00,650
of stuff and that's a lot of what we

00:07:57,379 --> 00:08:04,310
work with has anybody ever read product

00:08:00,650 --> 00:08:05,389
pearl DSC all right some people all

00:08:04,310 --> 00:08:08,090
right well that's the data structures

00:08:05,389 --> 00:08:11,060
cookbook and it explains all about

00:08:08,090 --> 00:08:12,919
hashes of hashes arrays of hashes hashes

00:08:11,060 --> 00:08:15,440
of arrays array of arrays and all these

00:08:12,919 --> 00:08:18,370
different combinations which then let me

00:08:15,440 --> 00:08:20,599
just sort of think about a little joke

00:08:18,370 --> 00:08:23,629
anybody seen die hard near the reference

00:08:20,599 --> 00:08:26,240
now I have a machine machine gun ho ho

00:08:23,629 --> 00:08:27,650
ho so I think John McClane when he

00:08:26,240 --> 00:08:30,770
wasn't stopping bad guys must have been

00:08:27,650 --> 00:08:32,419
a pearl hacker in his spare time so pro

00:08:30,770 --> 00:08:33,860
programmers use dynamic data structures

00:08:32,419 --> 00:08:35,360
a lot it's like the bread and butter of

00:08:33,860 --> 00:08:37,010
all of our programs right like almost

00:08:35,360 --> 00:08:38,450
everything we do objects their data

00:08:37,010 --> 00:08:40,490
structures it's the stuff we store on

00:08:38,450 --> 00:08:42,349
them data structures passing data around

00:08:40,490 --> 00:08:44,690
in a web application to a template it's

00:08:42,349 --> 00:08:47,029
another hash we love our data structures

00:08:44,690 --> 00:08:48,709
and so does MongoDB MongoDB is also

00:08:47,029 --> 00:08:50,870
built on the same model of nested data

00:08:48,709 --> 00:08:53,329
structures so I'm going to give an

00:08:50,870 --> 00:08:55,579
example using the tick how many people

00:08:53,329 --> 00:08:59,420
know the check excellent lots of people

00:08:55,579 --> 00:09:00,529
spoon so let's imagine that we're

00:08:59,420 --> 00:09:03,649
putting the other a database of

00:09:00,529 --> 00:09:06,500
characters from the tick and so we have

00:09:03,649 --> 00:09:08,630
a data structure with a name a battle

00:09:06,500 --> 00:09:10,850
cry and in fictional birthday that

00:09:08,630 --> 00:09:12,560
happens to be my own and various

00:09:10,850 --> 00:09:13,940
relations and so relations becomes a

00:09:12,560 --> 00:09:15,290
nested instead of hashes so we have

00:09:13,940 --> 00:09:17,000
relations and within relations we have

00:09:15,290 --> 00:09:18,860
friends and you have foes and each of

00:09:17,000 --> 00:09:21,399
those are in a race so we have a hash of

00:09:18,860 --> 00:09:23,240
a hash of iraq as our data structure

00:09:21,399 --> 00:09:26,449
what if we wanted to do something

00:09:23,240 --> 00:09:29,120
completely ridiculous like let's sort

00:09:26,449 --> 00:09:30,890
the heroes by the first friend's name I

00:09:29,120 --> 00:09:33,529
don't know why you would want to do this

00:09:30,890 --> 00:09:35,120
but I had the take examples and didn't

00:09:33,529 --> 00:09:37,010
want to retype a bunch of data so we'll

00:09:35,120 --> 00:09:39,320
use it so in this case we want to sort

00:09:37,010 --> 00:09:40,310
by arthur wright and for any one of

00:09:39,320 --> 00:09:41,930
these data structures we want to pick

00:09:40,310 --> 00:09:43,279
out that first friend's name and sort

00:09:41,930 --> 00:09:45,970
the heroes based on the first trans damn

00:09:43,279 --> 00:09:49,040
for some inexplicable business reason

00:09:45,970 --> 00:09:50,870
well in perl if you know what you're

00:09:49,040 --> 00:09:52,250
doing about sorting you'd probably use a

00:09:50,870 --> 00:09:54,800
schwartz and transform

00:09:52,250 --> 00:09:56,960
you'd use a map sort map structure in

00:09:54,800 --> 00:09:58,820
the bottom map you'd pull out the field

00:09:56,960 --> 00:10:00,560
of interest and cash it along with the

00:09:58,820 --> 00:10:02,840
original object you'd sort based on that

00:10:00,560 --> 00:10:04,520
field and then you'd have your top map

00:10:02,840 --> 00:10:06,260
to sort of get you back your original

00:10:04,520 --> 00:10:07,730
data structure and that would be a way

00:10:06,260 --> 00:10:11,240
of sort of sorting on a deeply nested

00:10:07,730 --> 00:10:13,730
field in MongoDB it's a different

00:10:11,240 --> 00:10:16,670
approach but it's sort of similar in

00:10:13,730 --> 00:10:18,650
concept so you do a query I so find the

00:10:16,670 --> 00:10:20,360
empty document means just give me

00:10:18,650 --> 00:10:22,820
everything match everything and then you

00:10:20,360 --> 00:10:25,160
give it a sort clause which in this case

00:10:22,820 --> 00:10:26,840
is relations friends 0 which means go

00:10:25,160 --> 00:10:28,100
down into that data structure and pick

00:10:26,840 --> 00:10:30,230
out the first element of the friends

00:10:28,100 --> 00:10:31,700
array and then the one means sorted

00:10:30,230 --> 00:10:33,050
ascending rather than descending so

00:10:31,700 --> 00:10:36,620
these two are actually really similar

00:10:33,050 --> 00:10:38,090
both of them look at the data structure

00:10:36,620 --> 00:10:40,060
as a nested structure and let you work

00:10:38,090 --> 00:10:41,870
with it preserving that same

00:10:40,060 --> 00:10:43,070
correspondence of nesting all the way

00:10:41,870 --> 00:10:49,150
down so it makes it very easy to sort of

00:10:43,070 --> 00:10:49,150
go back and forth between the two yes

00:10:52,960 --> 00:10:57,650
the the clause on the bottom is the how

00:10:56,600 --> 00:10:59,150
you would do this with the MongoDB

00:10:57,650 --> 00:11:00,320
driver so I've left out all the parts

00:10:59,150 --> 00:11:03,500
about how you would actually set up the

00:11:00,320 --> 00:11:06,800
MongoDB driver but this would be heroes

00:11:03,500 --> 00:11:08,150
would be a MongoDB collection object and

00:11:06,800 --> 00:11:09,440
you call the fine method on it and then

00:11:08,150 --> 00:11:12,380
the rest of that gets passed on through

00:11:09,440 --> 00:11:14,360
to the database MongoDB uses as its

00:11:12,380 --> 00:11:15,890
query language essentially document so

00:11:14,360 --> 00:11:18,440
if you think about like a JSON document

00:11:15,890 --> 00:11:20,510
that is how you pass you an equerry and

00:11:18,440 --> 00:11:22,130
that's how you pass in extra information

00:11:20,510 --> 00:11:24,710
about how you want to sort of manipulate

00:11:22,130 --> 00:11:26,990
it so most of my examples i think all

00:11:24,710 --> 00:11:29,440
unless I've screwed it up will be

00:11:26,990 --> 00:11:33,410
examples using the Pearl driver and I'll

00:11:29,440 --> 00:11:34,940
show a little bit more later so one of

00:11:33,410 --> 00:11:36,770
the other things that's very similar is

00:11:34,940 --> 00:11:39,440
that both pro and mongodb are missing

00:11:36,770 --> 00:11:40,880
things that others take for granted so

00:11:39,440 --> 00:11:44,450
for example Pearl has no function

00:11:40,880 --> 00:11:46,660
signatures ok we do but their

00:11:44,450 --> 00:11:48,410
experimental and maybe they'll be

00:11:46,660 --> 00:11:49,610
non-experimental at some point you

00:11:48,410 --> 00:11:52,070
probably can't use them in production

00:11:49,610 --> 00:11:53,420
until you know some period of time when

00:11:52,070 --> 00:11:55,220
you've adopted when you move to that

00:11:53,420 --> 00:11:56,780
version of pearl and most of Sipan won't

00:11:55,220 --> 00:11:59,540
use function signatures for another 10

00:11:56,780 --> 00:12:02,420
or 15 years so there's no real function

00:11:59,540 --> 00:12:03,389
signatures MongoDB has no read committed

00:12:02,420 --> 00:12:05,620
mode

00:12:03,389 --> 00:12:06,639
you can't actually make sure that the

00:12:05,620 --> 00:12:10,959
data you're reading has actually been

00:12:06,639 --> 00:12:13,509
committed out to all the other replicas

00:12:10,959 --> 00:12:14,740
sets if in a distributed system and okay

00:12:13,509 --> 00:12:18,730
yeah that's coming and it will be there

00:12:14,740 --> 00:12:19,990
in MongoDB 3.2 later this year but it's

00:12:18,730 --> 00:12:21,699
not there now so you can't use it in

00:12:19,990 --> 00:12:23,199
production pearl doesn't have

00:12:21,699 --> 00:12:25,149
concurrency or at least not any real

00:12:23,199 --> 00:12:27,249
concurrency you can forecast processes

00:12:25,149 --> 00:12:29,160
and do various other tricks pro threads

00:12:27,249 --> 00:12:31,660
don't share any memory pro threads are

00:12:29,160 --> 00:12:35,230
an abomination that have essentially

00:12:31,660 --> 00:12:38,139
been discouraged in 522 anyway MongoDB

00:12:35,230 --> 00:12:40,569
has no transactions Pearl has no real

00:12:38,139 --> 00:12:42,759
object oriented programming you can

00:12:40,569 --> 00:12:44,350
associate methods with structures in

00:12:42,759 --> 00:12:45,809
namespaces and that's it and everything

00:12:44,350 --> 00:12:48,220
else is you have to go build yourself

00:12:45,809 --> 00:12:50,040
which at least to our credit we've built

00:12:48,220 --> 00:12:51,970
some pretty cool stuff with moves so

00:12:50,040 --> 00:12:53,259
maybe not having some of these

00:12:51,970 --> 00:12:56,470
primitives have let us do some more

00:12:53,259 --> 00:12:58,300
interesting things MongoDB doesn't have

00:12:56,470 --> 00:13:00,550
joins everything operates at the single

00:12:58,300 --> 00:13:03,759
document level again footnote some of

00:13:00,550 --> 00:13:05,769
that may be coming left outer joins in

00:13:03,759 --> 00:13:08,500
3.2 later on I was just announced last

00:13:05,769 --> 00:13:09,790
week pearl doesn't have bullion's which

00:13:08,500 --> 00:13:10,720
doesn't seem like a big deal but if you

00:13:09,790 --> 00:13:12,279
think all the times you're having to

00:13:10,720 --> 00:13:15,689
figure out what is it 1 is 0 is it an

00:13:12,279 --> 00:13:17,980
empty string what is 0 but true mean

00:13:15,689 --> 00:13:19,720
lots of cases where the lack of a real

00:13:17,980 --> 00:13:21,430
boolean that's been a problem and we see

00:13:19,720 --> 00:13:22,990
in Perl 6 pro six starts adding back in

00:13:21,430 --> 00:13:25,329
all these types because the realization

00:13:22,990 --> 00:13:26,319
was hey they're actually useful MongoDB

00:13:25,329 --> 00:13:27,550
does somebody stored procedures

00:13:26,319 --> 00:13:29,680
everything has to happen client-side

00:13:27,550 --> 00:13:31,649
nothing gets put on the server to sort

00:13:29,680 --> 00:13:34,930
of be able to execute me consistently

00:13:31,649 --> 00:13:36,430
but of course we r / also experienced

00:13:34,930 --> 00:13:40,660
users workaround flaws and the same is

00:13:36,430 --> 00:13:43,480
true for mongodb MongoDB doesn't have a

00:13:40,660 --> 00:13:44,860
sort of it important rights but where

00:13:43,480 --> 00:13:46,240
you can very easily have nod in

00:13:44,860 --> 00:13:47,679
importance I want to increment a field

00:13:46,240 --> 00:13:48,910
in this document what if there's a

00:13:47,679 --> 00:13:50,559
network error I can't send that

00:13:48,910 --> 00:13:53,620
increment again or it might happen twice

00:13:50,559 --> 00:13:54,610
I don't know maybe maybe not and you can

00:13:53,620 --> 00:13:56,860
work around it with two phase commit

00:13:54,610 --> 00:13:59,980
some other sorts of approaches Pearl has

00:13:56,860 --> 00:14:01,509
strings for errors which is a horrible

00:13:59,980 --> 00:14:03,519
way to pass our information around and

00:14:01,509 --> 00:14:04,720
so we've worked up things with exception

00:14:03,519 --> 00:14:05,709
objects and then when you catch an

00:14:04,720 --> 00:14:06,910
exception you don't know if it's a

00:14:05,709 --> 00:14:09,600
string or an exception operation you

00:14:06,910 --> 00:14:12,490
have to test all this stuff gobbledygook

00:14:09,600 --> 00:14:13,929
again like read committed mommy TV

00:14:12,490 --> 00:14:14,920
doesn't have a consensus read you can't

00:14:13,929 --> 00:14:15,450
actually make sure that all the nodes

00:14:14,920 --> 00:14:18,180
necessary

00:14:15,450 --> 00:14:19,920
we agree if there's a that there isn't a

00:14:18,180 --> 00:14:21,480
partition but you can sort of fake it

00:14:19,920 --> 00:14:23,670
with the right so you sort of do a write

00:14:21,480 --> 00:14:24,870
that sort of a do a right anatomically

00:14:23,670 --> 00:14:27,450
give me back the result and you have

00:14:24,870 --> 00:14:30,540
something that works pretty well pearl

00:14:27,450 --> 00:14:32,220
version numbers are a complete mess some

00:14:30,540 --> 00:14:35,430
of you know me and know that this is a

00:14:32,220 --> 00:14:36,570
particular frustration of mine those of

00:14:35,430 --> 00:14:38,790
you who don't know why this is a

00:14:36,570 --> 00:14:41,250
particular frustration of mine you can

00:14:38,790 --> 00:14:43,650
google the phrase version numbers should

00:14:41,250 --> 00:14:45,150
be boring and you'll get my article

00:14:43,650 --> 00:14:47,870
which is kind of that I think is still

00:14:45,150 --> 00:14:51,990
the definitive post on the subject

00:14:47,870 --> 00:14:53,250
MongoDB has a query language which isn't

00:14:51,990 --> 00:14:54,120
really a language it's a bunch of data

00:14:53,250 --> 00:14:57,450
structure so if you think about

00:14:54,120 --> 00:14:59,790
expressing all the logic you want for a

00:14:57,450 --> 00:15:01,050
query not in some sort of programming

00:14:59,790 --> 00:15:02,820
language style but expressing it

00:15:01,050 --> 00:15:05,040
essentially as an abstract syntax tree

00:15:02,820 --> 00:15:07,110
in JSON that's essentially what you have

00:15:05,040 --> 00:15:09,660
to do to express certain queries makes

00:15:07,110 --> 00:15:11,430
it a little cumbersome and I'll show you

00:15:09,660 --> 00:15:14,760
some of that later on I think in time

00:15:11,430 --> 00:15:17,700
the live demo Pearl has ambiguous scalar

00:15:14,760 --> 00:15:19,970
types which is somebody doing database

00:15:17,700 --> 00:15:22,680
work and anybody who's had to work with

00:15:19,970 --> 00:15:26,760
interoperating with other languages with

00:15:22,680 --> 00:15:28,800
things like yambol or JSON or message

00:15:26,760 --> 00:15:30,690
pack or anything else this is really

00:15:28,800 --> 00:15:32,730
hard because you often don't know

00:15:30,690 --> 00:15:37,710
whether something is a scale a number or

00:15:32,730 --> 00:15:40,230
a string he's a zip code a string 08 544

00:15:37,710 --> 00:15:41,490
New Jersey is that a number string I

00:15:40,230 --> 00:15:44,370
don't know is a social security number a

00:15:41,490 --> 00:15:46,110
number of string no no and in Perl you

00:15:44,370 --> 00:15:47,340
don't actually know it and if you

00:15:46,110 --> 00:15:49,530
actually try to use any sort of deep

00:15:47,340 --> 00:15:51,030
introspection to see is this thing

00:15:49,530 --> 00:15:54,030
really a number or string down it like

00:15:51,030 --> 00:15:55,020
the innards of like the excess level it

00:15:54,030 --> 00:15:57,440
actually depends on whether it's ever

00:15:55,020 --> 00:16:00,900
been used in a string or numeric context

00:15:57,440 --> 00:16:02,850
so if you have a number one two three

00:16:00,900 --> 00:16:04,230
four five and I said okay I want to

00:16:02,850 --> 00:16:05,790
verify that that's really a number does

00:16:04,230 --> 00:16:07,830
it match the regular expression you know

00:16:05,790 --> 00:16:09,420
backslash d plus with the appropriate

00:16:07,830 --> 00:16:10,500
anchors on each side well now you've

00:16:09,420 --> 00:16:12,690
just used this number in a string

00:16:10,500 --> 00:16:14,220
context so now this scalar is both a

00:16:12,690 --> 00:16:16,230
number and a string and now if you try

00:16:14,220 --> 00:16:20,460
to serialize it what happens is

00:16:16,230 --> 00:16:22,380
implementation to find oops and so we

00:16:20,460 --> 00:16:24,030
can work around it by coercing them 0

00:16:22,380 --> 00:16:25,089
plus your thing every time you want to

00:16:24,030 --> 00:16:28,059
save it

00:16:25,089 --> 00:16:30,519
things like that but it's ugly mongodb

00:16:28,059 --> 00:16:32,769
has a 16 megabyte limit if your data

00:16:30,519 --> 00:16:36,610
doesn't fit into 16 megabytes tough

00:16:32,769 --> 00:16:38,529
figure it out pearl io layers are sort

00:16:36,610 --> 00:16:40,569
of a complete mess if you've ever tried

00:16:38,529 --> 00:16:43,930
like copy io layers from one handle to

00:16:40,569 --> 00:16:46,829
another or say vaio layers for a handle

00:16:43,930 --> 00:16:49,240
and put them back on later total mess

00:16:46,829 --> 00:16:52,809
mom going to be rolls back your data on

00:16:49,240 --> 00:16:54,309
a failover possibly so maybe the data

00:16:52,809 --> 00:16:55,870
that you thought you wrote just went

00:16:54,309 --> 00:16:57,819
away and you don't necessarily find out

00:16:55,870 --> 00:17:02,529
oh well figure out a way to work around

00:16:57,819 --> 00:17:06,120
that on the positive side however we

00:17:02,529 --> 00:17:06,120
have vibrant enthusiastic communities

00:17:07,020 --> 00:17:13,630
both MongoDB and pearl have user groups

00:17:10,390 --> 00:17:16,539
bugs they're called for mongodb perl

00:17:13,630 --> 00:17:18,549
mongers both have conferences mailing

00:17:16,539 --> 00:17:20,939
lists IRC all the sort of usual stuff

00:17:18,549 --> 00:17:23,709
you would find in an open source product

00:17:20,939 --> 00:17:25,120
MongoDB is an open source company so the

00:17:23,709 --> 00:17:26,649
vast majority of what they do all the

00:17:25,120 --> 00:17:28,600
database itself all the drivers are all

00:17:26,649 --> 00:17:31,000
open source is a small sliver of stuff

00:17:28,600 --> 00:17:33,669
that's Enterprise only for paid paying

00:17:31,000 --> 00:17:34,779
customers most immense akura t and ldap

00:17:33,669 --> 00:17:36,159
and some things like that but it's an

00:17:34,779 --> 00:17:38,950
open source company so it wants to have

00:17:36,159 --> 00:17:43,059
a big vibrant community and the reason

00:17:38,950 --> 00:17:44,260
that i think that it it does is i think

00:17:43,059 --> 00:17:46,720
that pearl and mommy to be a very

00:17:44,260 --> 00:17:49,419
similar philosophies and particularly i

00:17:46,720 --> 00:17:50,799
mean both of them are focused on these

00:17:49,419 --> 00:17:53,529
two terms at Larry came up with

00:17:50,799 --> 00:17:56,350
manipulate City and whip up titude so

00:17:53,529 --> 00:17:58,000
manipulate a Larry defined as the

00:17:56,350 --> 00:17:59,559
manipulation of complex things being

00:17:58,000 --> 00:18:01,480
able to do not just simple things but do

00:17:59,559 --> 00:18:03,279
complex things and whip up titude was

00:18:01,480 --> 00:18:05,289
the aptitude for whipping things up and

00:18:03,279 --> 00:18:07,360
pearl was really inspired by his idea of

00:18:05,289 --> 00:18:09,340
a language which would give you both

00:18:07,360 --> 00:18:11,470
whereas he thought see was great for

00:18:09,340 --> 00:18:12,730
manipulate city and shell was really

00:18:11,470 --> 00:18:14,260
good for whip up titude and there wasn't

00:18:12,730 --> 00:18:16,659
anything to keep you both so he invented

00:18:14,260 --> 00:18:18,789
pearl and the idea behind these two is

00:18:16,659 --> 00:18:20,919
that both are tools for getting the job

00:18:18,789 --> 00:18:22,960
done that both are things that are

00:18:20,919 --> 00:18:24,130
designed to let you get the job done and

00:18:22,960 --> 00:18:25,570
get on with your life or get on with the

00:18:24,130 --> 00:18:27,940
other 25 things you have to get done

00:18:25,570 --> 00:18:30,100
that day it's time to do things and get

00:18:27,940 --> 00:18:32,500
out of the way and so sometimes we think

00:18:30,100 --> 00:18:34,539
about a language like pearl as a Swiss

00:18:32,500 --> 00:18:35,549
Army knife but this wasn't hyperbolic

00:18:34,539 --> 00:18:37,110
enough so

00:18:35,549 --> 00:18:39,570
often times you'll heard it said that's

00:18:37,110 --> 00:18:40,950
pearl is a Swiss Army chainsaw I've

00:18:39,570 --> 00:18:43,860
heard that expression Swiss Army

00:18:40,950 --> 00:18:45,179
chainsaw okay most of the room well I

00:18:43,860 --> 00:18:46,679
got really curious about where this came

00:18:45,179 --> 00:18:48,480
from and so I did some searching around

00:18:46,679 --> 00:18:50,070
and I found it in the jargon file a

00:18:48,480 --> 00:18:51,539
little bit of a history and this I've

00:18:50,070 --> 00:18:54,929
got a couple long excerpts but I think

00:18:51,539 --> 00:18:56,309
they're kind of insightful so there was

00:18:54,929 --> 00:18:57,929
a hacker by the name of Henry Spencer

00:18:56,309 --> 00:18:59,489
who apparently was well known at the

00:18:57,929 --> 00:19:02,669
time the jargon file was written but not

00:18:59,489 --> 00:19:04,980
to me and he described pearl as a Swiss

00:19:02,669 --> 00:19:07,980
Army chainsaw for it being exceedingly

00:19:04,980 --> 00:19:11,009
powerful but ugly and noisy and prone to

00:19:07,980 --> 00:19:13,499
belch noxious fumes and the jargon file

00:19:11,009 --> 00:19:15,119
then goes on to editorialize that this

00:19:13,499 --> 00:19:17,399
had two results one that pearl people

00:19:15,119 --> 00:19:20,009
adopted that as a badge of pride and

00:19:17,399 --> 00:19:21,659
then it also became a general term to

00:19:20,009 --> 00:19:25,409
describe anything highly versatile but

00:19:21,659 --> 00:19:26,850
distressingly in elegant and I thought

00:19:25,409 --> 00:19:29,159
that was a really interesting phrase I'm

00:19:26,850 --> 00:19:31,320
a highly versatile but distressingly in

00:19:29,159 --> 00:19:34,230
elegant does that apply to pearl does

00:19:31,320 --> 00:19:35,879
that apply to MongoDB yes I think

00:19:34,230 --> 00:19:39,419
absolutely it kind of captures the power

00:19:35,879 --> 00:19:41,249
of both both are graded a few things and

00:19:39,419 --> 00:19:42,509
they're good enough for many things and

00:19:41,249 --> 00:19:43,859
there's sort of the reason that people

00:19:42,509 --> 00:19:45,269
get a lot done with pearl no reason I

00:19:43,859 --> 00:19:47,340
think people like longer to be a lot is

00:19:45,269 --> 00:19:49,019
it it lets them do a lot of things with

00:19:47,340 --> 00:19:50,549
a relatively small tool box you don't

00:19:49,019 --> 00:19:53,519
need to have to have a lot of stuff

00:19:50,549 --> 00:19:55,139
there each tool lets you do a lot of

00:19:53,519 --> 00:19:57,389
things even if it wasn't necessarily

00:19:55,139 --> 00:20:02,039
designed for so if having one of them is

00:19:57,389 --> 00:20:03,720
good wouldn't two of them be better the

00:20:02,039 --> 00:20:05,609
mongodb Swiss Army chainsaw and the

00:20:03,720 --> 00:20:08,009
pearls will start a chain saw which then

00:20:05,609 --> 00:20:12,149
leads me to time for actually getting

00:20:08,009 --> 00:20:14,489
back to the live demonstration so I want

00:20:12,149 --> 00:20:18,869
to find out if in fact this is finished

00:20:14,489 --> 00:20:19,919
but I'll explain I don't hear the fan so

00:20:18,869 --> 00:20:22,830
it may actually be finished that's a

00:20:19,919 --> 00:20:25,739
good sign or its died and then we'll see

00:20:22,830 --> 00:20:29,070
what happens so this demonstration is

00:20:25,739 --> 00:20:32,450
based on cpn metafile indexing which was

00:20:29,070 --> 00:20:35,399
a problem that i had when i was in

00:20:32,450 --> 00:20:37,409
berlin for the QA hackathon this year as

00:20:35,399 --> 00:20:38,609
i talked about in the keynote we're

00:20:37,409 --> 00:20:40,200
trying to find out how many things

00:20:38,609 --> 00:20:42,840
depend on other things how far upriver

00:20:40,200 --> 00:20:44,340
or downriver is something and I wanted

00:20:42,840 --> 00:20:46,950
to do some analysis and I happen to have

00:20:44,340 --> 00:20:48,230
a mini Sipan on my laptop so I had a

00:20:46,950 --> 00:20:50,330
copy of

00:20:48,230 --> 00:20:52,669
sort of the sliver of current stable

00:20:50,330 --> 00:20:55,190
models on CPM about thirty thousand or

00:20:52,669 --> 00:20:56,929
so tar balls and I said okay great i've

00:20:55,190 --> 00:20:59,179
got this locally I should do something

00:20:56,929 --> 00:21:00,559
with it and analyze it so while most of

00:20:59,179 --> 00:21:02,120
these or at least most of the recent

00:21:00,559 --> 00:21:05,630
ones should have a metafile meta

00:21:02,120 --> 00:21:07,760
yamamoto json file that describes some

00:21:05,630 --> 00:21:11,330
of the dependencies if anybody was at

00:21:07,760 --> 00:21:13,309
Matt trout's talk yesterday I think it

00:21:11,330 --> 00:21:14,870
was he talked about the reasons why it's

00:21:13,309 --> 00:21:17,360
only an approximation of dependencies

00:21:14,870 --> 00:21:19,880
because it meta yeah more met at jj's on

00:21:17,360 --> 00:21:21,080
his pre configuration so I knew it was

00:21:19,880 --> 00:21:22,850
an approximation but it was sort of

00:21:21,080 --> 00:21:27,049
quick and easy and it was there and let

00:21:22,850 --> 00:21:29,929
me get the job done so a meta JSON dot

00:21:27,049 --> 00:21:31,700
file is created by module bill direct

00:21:29,929 --> 00:21:33,020
details make maker module install or

00:21:31,700 --> 00:21:34,490
multiple tanya whatever you're using to

00:21:33,020 --> 00:21:37,549
ship your tar ball and it describes

00:21:34,490 --> 00:21:42,799
things about the distribution so I have

00:21:37,549 --> 00:21:45,470
a maybe no area I have an example of

00:21:42,799 --> 00:21:48,230
sort of an excerpt from a meta JSON file

00:21:45,470 --> 00:21:50,240
so there's an abstract has a one or more

00:21:48,230 --> 00:21:52,010
authors associated with it has

00:21:50,240 --> 00:21:53,929
prerequisites which are themselves in

00:21:52,010 --> 00:21:55,610
sort of a nested data structure relating

00:21:53,929 --> 00:21:58,850
to sort of the phase like runtime or

00:21:55,610 --> 00:22:00,620
configure or test or build and then you

00:21:58,850 --> 00:22:01,760
know is it requires or recommend or

00:22:00,620 --> 00:22:03,559
something else in the specific models

00:22:01,760 --> 00:22:05,570
and the specific versions they're

00:22:03,559 --> 00:22:07,280
required there's a provide stanza which

00:22:05,570 --> 00:22:08,750
is optional but sort of says you know

00:22:07,280 --> 00:22:09,940
here's the module and here's what file

00:22:08,750 --> 00:22:12,410
it's in and here's what version it is

00:22:09,940 --> 00:22:15,380
has a release status is it stable or

00:22:12,410 --> 00:22:17,030
unstable and and people extend these

00:22:15,380 --> 00:22:19,280
with X underscore field so a very

00:22:17,030 --> 00:22:20,660
popular one is X under store

00:22:19,280 --> 00:22:23,030
contributors so you go and you scrape

00:22:20,660 --> 00:22:24,260
out of your git commit logs all the list

00:22:23,030 --> 00:22:26,299
of people that I've ever put a committee

00:22:24,260 --> 00:22:27,710
in and you stick it in a big array and

00:22:26,299 --> 00:22:29,179
then met asleep and displays it on the

00:22:27,710 --> 00:22:30,169
right hand side of you here are people

00:22:29,179 --> 00:22:32,210
that have contributed it's a way of

00:22:30,169 --> 00:22:33,490
thanking people for their contributions

00:22:32,210 --> 00:22:37,940
and being a little more public about it

00:22:33,490 --> 00:22:38,929
so what I wanted to do was grab out of

00:22:37,940 --> 00:22:41,150
these thirty thousand or so

00:22:38,929 --> 00:22:43,130
distributions all of these meadow Umno

00:22:41,150 --> 00:22:44,710
JSON files if they exist it shove them

00:22:43,130 --> 00:22:50,380
into the database and do some analysis

00:22:44,710 --> 00:22:50,380
so here's my reminder to jump to that

00:22:51,450 --> 00:23:04,830
any questions so far will i get the

00:22:53,820 --> 00:23:06,450
terminal up all right so the question

00:23:04,830 --> 00:23:08,100
was whether we have to define a

00:23:06,450 --> 00:23:09,269
structure ahead of time and note and the

00:23:08,100 --> 00:23:11,399
answer is no and that's one of the

00:23:09,269 --> 00:23:14,070
powerful things about MongoDB is that it

00:23:11,399 --> 00:23:15,720
has a I think the official term I'm

00:23:14,070 --> 00:23:17,100
supposed to use is a flexible schema the

00:23:15,720 --> 00:23:19,740
reality is that there's like no schema

00:23:17,100 --> 00:23:21,019
that any document can go in and that's

00:23:19,740 --> 00:23:23,159
particularly nice if you have a

00:23:21,019 --> 00:23:25,080
collection which is sort of the MongoDB

00:23:23,159 --> 00:23:26,580
equivalent of a table with let's say a

00:23:25,080 --> 00:23:28,110
billion records and you suddenly decide

00:23:26,580 --> 00:23:29,070
you want to start adding some fields you

00:23:28,110 --> 00:23:31,169
don't have to go back to the other

00:23:29,070 --> 00:23:32,429
billion records and add those fields to

00:23:31,169 --> 00:23:34,980
those you just add the field to the new

00:23:32,429 --> 00:23:37,529
documents that you insert and a meta

00:23:34,980 --> 00:23:38,730
file they're all very different some of

00:23:37,529 --> 00:23:41,429
the fields are optional provides is

00:23:38,730 --> 00:23:43,320
optional some fields are required but

00:23:41,429 --> 00:23:44,909
not everybody actually puts in all the

00:23:43,320 --> 00:23:46,740
required field so every single meta

00:23:44,909 --> 00:23:47,789
document is completely different even

00:23:46,740 --> 00:23:49,769
though they'll mostly have the same

00:23:47,789 --> 00:23:51,059
fields sometimes they'll have some will

00:23:49,769 --> 00:23:52,919
have X contributors and some won't and

00:23:51,059 --> 00:23:54,840
so one of the advantages of using

00:23:52,919 --> 00:23:56,820
MongoDB I thought was I can just take

00:23:54,840 --> 00:23:58,049
all these files throw them in and not

00:23:56,820 --> 00:24:00,260
have to worry about what's actually

00:23:58,049 --> 00:24:00,260
there

00:24:05,010 --> 00:24:10,530
alright so it seems to have run there

00:24:09,210 --> 00:24:12,660
were three hundred and seven blocks so

00:24:10,530 --> 00:24:15,030
this was about a hundred tar balls per

00:24:12,660 --> 00:24:17,940
block running in parallel across ten

00:24:15,030 --> 00:24:20,160
processes which pretty much maxes out my

00:24:17,940 --> 00:24:22,620
processor but still let me run keynote

00:24:20,160 --> 00:24:25,500
so that was cool and the whole thing ran

00:24:22,620 --> 00:24:26,820
in about nine minutes in a ran in nine

00:24:25,500 --> 00:24:28,710
minutes because Rick and I had a

00:24:26,820 --> 00:24:29,910
friendly competition in Berlin to try to

00:24:28,710 --> 00:24:31,290
see who could make it go faster because

00:24:29,910 --> 00:24:33,420
our first attempts would take like an

00:24:31,290 --> 00:24:35,040
hour and we said well let's make it

00:24:33,420 --> 00:24:36,780
parallel hey let's figure out its we

00:24:35,040 --> 00:24:37,950
kept refining how fast we could make

00:24:36,780 --> 00:24:39,480
these things go and when we were on the

00:24:37,950 --> 00:24:40,580
airplane coming back from Berlin we kept

00:24:39,480 --> 00:24:42,750
like walking up and down the aisle

00:24:40,580 --> 00:24:45,210
talking about how fast we had made it go

00:24:42,750 --> 00:24:47,520
until Rick set up a bootleg IRC network

00:24:45,210 --> 00:24:48,660
on the planes Wi-Fi now it wasn't even

00:24:47,520 --> 00:24:51,540
planes life only he set up his own

00:24:48,660 --> 00:24:53,790
laptop in infrastructure mode we all

00:24:51,540 --> 00:24:56,340
connected and we talked over IRC from

00:24:53,790 --> 00:25:00,060
our different seats sure there was some

00:24:56,340 --> 00:25:01,380
FAA issue there but hey it worked so now

00:25:00,060 --> 00:25:02,580
this thing was able to run fast enough

00:25:01,380 --> 00:25:05,820
that I could actually do it live during

00:25:02,580 --> 00:25:07,080
a talk so I'm going to walk through the

00:25:05,820 --> 00:25:11,460
code that was used to do this and then

00:25:07,080 --> 00:25:14,160
i'll show you some of the results so

00:25:11,460 --> 00:25:15,660
this is the program that ran and the way

00:25:14,160 --> 00:25:17,130
I've structured this program just for

00:25:15,660 --> 00:25:19,920
the presentation is I put sort of a

00:25:17,130 --> 00:25:22,380
worker subroutine up top that really

00:25:19,920 --> 00:25:24,090
sort of the guts of getting a yam meta

00:25:22,380 --> 00:25:26,040
llamo flower met a JSON file putting

00:25:24,090 --> 00:25:27,210
into the database and further down below

00:25:26,040 --> 00:25:29,850
with all the stuff about how it

00:25:27,210 --> 00:25:31,050
paralyzes and chunks this up I'm not

00:25:29,850 --> 00:25:33,810
going to cover that but if people are

00:25:31,050 --> 00:25:35,820
curious after this is over I'll sort of

00:25:33,810 --> 00:25:37,050
post some information about where the

00:25:35,820 --> 00:25:39,060
code is if people want to troll through

00:25:37,050 --> 00:25:40,590
it or you can grab me to break and I'll

00:25:39,060 --> 00:25:44,100
walk people through it so the start of

00:25:40,590 --> 00:25:46,560
this we have a whole bunch of modules

00:25:44,100 --> 00:25:47,940
that we load that's great and then we

00:25:46,560 --> 00:25:49,170
get down to this worker function and so

00:25:47,940 --> 00:25:51,690
this worker function winds up being

00:25:49,170 --> 00:25:55,260
called within each of these sort of

00:25:51,690 --> 00:25:58,530
worked out processes and it gets a chunk

00:25:55,260 --> 00:26:02,220
of data and chunk of data is a list of

00:25:58,530 --> 00:26:04,560
up to a hundred tarp CP and distribution

00:26:02,220 --> 00:26:06,030
tarballs that need to be processed and

00:26:04,560 --> 00:26:08,070
just tells us what block we're on for

00:26:06,030 --> 00:26:09,870
reporting see Penn pass says we're on my

00:26:08,070 --> 00:26:11,430
hard drive to find it and there's a

00:26:09,870 --> 00:26:12,010
database name and a collection name for

00:26:11,430 --> 00:26:16,090
where

00:26:12,010 --> 00:26:18,400
it all should be stored and this kind of

00:26:16,090 --> 00:26:21,100
gets passed in from the parallel fork

00:26:18,400 --> 00:26:22,510
manager process so the first thing we do

00:26:21,100 --> 00:26:25,960
is we make a connection to the database

00:26:22,510 --> 00:26:28,030
so we get a client object new with

00:26:25,960 --> 00:26:29,860
no parameters just connects to localhost

00:26:28,030 --> 00:26:32,440
at the default port where I have things

00:26:29,860 --> 00:26:34,570
running we then get a collection object

00:26:32,440 --> 00:26:35,920
so get collection and get database get

00:26:34,570 --> 00:26:38,550
collection and the collection object is

00:26:35,920 --> 00:26:41,830
the thing you work with most often for

00:26:38,550 --> 00:26:43,000
inserting deleting searching etc and

00:26:41,830 --> 00:26:44,020
because I know I'm going to be inserting

00:26:43,000 --> 00:26:45,430
a whole lot of stuff I don't want to

00:26:44,020 --> 00:26:47,560
insert them and do a database round trip

00:26:45,430 --> 00:26:48,760
on each one so I set up a batch object

00:26:47,560 --> 00:26:50,280
which will just sort of accumulate all

00:26:48,760 --> 00:26:52,350
the inserts and then when I've done

00:26:50,280 --> 00:26:56,350
accumulating inserts for a little chunk

00:26:52,350 --> 00:26:57,760
it gets executed in one shot actors

00:26:56,350 --> 00:26:59,770
would have processed the chunk using

00:26:57,760 --> 00:27:02,440
Sipan visitor which is a module for

00:26:59,770 --> 00:27:04,270
walking through a sea pan on a disc and

00:27:02,440 --> 00:27:06,250
I'm tearing each trouble and letting you

00:27:04,270 --> 00:27:13,270
do something inside it mostly callback

00:27:06,250 --> 00:27:15,550
driven so it gets the sea pen path it's

00:27:13,270 --> 00:27:16,870
told to be quiet or actually turned

00:27:15,550 --> 00:27:19,840
quiet off because I actually want to see

00:27:16,870 --> 00:27:21,910
errors from the tarball unpacking knows

00:27:19,840 --> 00:27:23,530
what files to run and you can use a

00:27:21,910 --> 00:27:26,350
stash to sort of customized stuff prefer

00:27:23,530 --> 00:27:28,090
bin means you use a system tar not pure

00:27:26,350 --> 00:27:29,500
pearl tar which is another one of those

00:27:28,090 --> 00:27:32,680
optimizations we figured out in Berlin

00:27:29,500 --> 00:27:36,070
to make things go much faster and then

00:27:32,680 --> 00:27:37,720
the iterator method is what then starts

00:27:36,070 --> 00:27:39,490
to go through each of the distributions

00:27:37,720 --> 00:27:40,660
in the chunk there's a check call back

00:27:39,490 --> 00:27:43,450
with just make sure that the file

00:27:40,660 --> 00:27:44,950
actually still exists in case my mirror

00:27:43,450 --> 00:27:47,230
has updated in the background and made

00:27:44,950 --> 00:27:48,600
it go away and then the visit callback

00:27:47,230 --> 00:27:52,660
is the thing that actually does the work

00:27:48,600 --> 00:27:54,400
so it gets the job variable which just

00:27:52,660 --> 00:27:56,830
has information about work to be done

00:27:54,400 --> 00:27:59,890
the first thing we do is we unpack the

00:27:56,830 --> 00:28:04,960
path that this path is like da golden /

00:27:59,890 --> 00:28:06,730
path tiny dash 0.002 tar.gz into a sea

00:28:04,960 --> 00:28:08,770
pen dis name info object which

00:28:06,730 --> 00:28:10,720
essentially parses the filename to pull

00:28:08,770 --> 00:28:12,670
out useful bits of information this is I

00:28:10,720 --> 00:28:15,640
think grand bar wrote this for search

00:28:12,670 --> 00:28:17,350
deep end org and it's sort of the de

00:28:15,640 --> 00:28:19,150
facto standard for how to parse out an

00:28:17,350 --> 00:28:21,490
author a tarball path into something

00:28:19,150 --> 00:28:23,410
useful so then we set up sort of a basic

00:28:21,490 --> 00:28:24,100
document that will use to insert things

00:28:23,410 --> 00:28:26,230
in so

00:28:24,100 --> 00:28:28,960
the underscore ID is the sort of unique

00:28:26,230 --> 00:28:31,740
ID primary key for the document we just

00:28:28,960 --> 00:28:37,750
set it equal to that just file which is

00:28:31,740 --> 00:28:39,820
I believe is just the name like path

00:28:37,750 --> 00:28:43,210
tiny and the suffix and not the author

00:28:39,820 --> 00:28:46,419
part so it sort of close to distribution

00:28:43,210 --> 00:28:48,520
plus version plus suffix on the upload

00:28:46,419 --> 00:28:50,140
date we just grabbed off of the date of

00:28:48,520 --> 00:28:51,549
the tarball because the mirroring

00:28:50,140 --> 00:28:55,030
process actually preserves that which is

00:28:51,549 --> 00:28:58,030
kind of nice and the uploader we is a

00:28:55,030 --> 00:29:00,610
cpn ID of the person who uploaded it I

00:28:58,030 --> 00:29:02,169
put these all in his underscore field so

00:29:00,610 --> 00:29:03,250
that it doesn't collide with the fields

00:29:02,169 --> 00:29:05,799
from meta when it gets added in later

00:29:03,250 --> 00:29:07,299
because underscore is both illegal for

00:29:05,799 --> 00:29:09,490
meta and unlikely to be there so it

00:29:07,299 --> 00:29:10,690
seemed it would avoid collisions could

00:29:09,490 --> 00:29:12,309
this have been checked a little bit

00:29:10,690 --> 00:29:15,190
better yes but again this is sort of

00:29:12,309 --> 00:29:16,720
quick and dirty work in Berlin so then

00:29:15,190 --> 00:29:19,630
we try to find a meta file does it even

00:29:16,720 --> 00:29:20,919
have a meta JSON or meta gamble if it

00:29:19,630 --> 00:29:22,270
doesn't then we just insert what we've

00:29:20,919 --> 00:29:23,919
got and we have it record which says

00:29:22,270 --> 00:29:25,720
here's a distribution and since there's

00:29:23,919 --> 00:29:28,510
no data you know it's not there we

00:29:25,720 --> 00:29:30,909
record the metafile whatever it was we

00:29:28,510 --> 00:29:34,270
then try to load it with the sea pen

00:29:30,909 --> 00:29:35,890
meta and if it succeeds great if not we

00:29:34,270 --> 00:29:37,510
record what the actual error was trying

00:29:35,890 --> 00:29:38,919
to parse it may be as bad JSON maybe

00:29:37,510 --> 00:29:41,020
with something illegal that couldn't be

00:29:38,919 --> 00:29:43,630
handled so if we didn't actually get a

00:29:41,020 --> 00:29:45,100
meta object back out now we just insert

00:29:43,630 --> 00:29:47,919
the document that has the file name in

00:29:45,100 --> 00:29:50,650
the error and we have that record so if

00:29:47,919 --> 00:29:52,570
we've gotten that far if we're here we

00:29:50,650 --> 00:29:54,429
have a sea pen metal object which is the

00:29:52,570 --> 00:29:57,340
parsed version of the meta JSON or meta

00:29:54,429 --> 00:29:58,870
camel and here I pull out a lot of the

00:29:57,340 --> 00:30:00,039
prerequisites that are all nested and I

00:29:58,870 --> 00:30:01,330
flatten them for it because for the

00:30:00,039 --> 00:30:02,530
analysis i use i didn't really care

00:30:01,330 --> 00:30:04,090
whether something was a runtime

00:30:02,530 --> 00:30:05,820
requirement or a test requirement i just

00:30:04,090 --> 00:30:07,960
wanted all the requirements together so

00:30:05,820 --> 00:30:10,270
these things here pull all of it out

00:30:07,960 --> 00:30:11,770
into an array we store it in an

00:30:10,270 --> 00:30:13,510
underscore requires field then I'll show

00:30:11,770 --> 00:30:15,700
this during the when I get around to

00:30:13,510 --> 00:30:17,380
actually querying the data so this is

00:30:15,700 --> 00:30:19,809
just sort of the sorted list of the

00:30:17,380 --> 00:30:25,270
merged prerequisites so this is fubar

00:30:19,809 --> 00:30:26,320
foob as test amaura on out and then

00:30:25,270 --> 00:30:27,640
instead of doing any sort of nice

00:30:26,320 --> 00:30:30,130
merging I just smash it all back

00:30:27,640 --> 00:30:32,290
together into the dock and cue it up for

00:30:30,130 --> 00:30:34,450
insertion and so when it this processes

00:30:32,290 --> 00:30:36,040
through all the chunks I then tried

00:30:34,450 --> 00:30:37,750
execute it if it executes so we get one

00:30:36,040 --> 00:30:37,970
of these block and inserted messages and

00:30:37,750 --> 00:30:41,030
it

00:30:37,970 --> 00:30:42,410
fail that says up it failed and tells

00:30:41,030 --> 00:30:45,410
you what was there in the chunk that it

00:30:42,410 --> 00:30:49,540
failed on so that was a very fast run

00:30:45,410 --> 00:30:51,890
through 86 lines of code any questions

00:30:49,540 --> 00:30:53,720
all right everybody followed or

00:30:51,890 --> 00:30:54,950
everybody doesn't care or I actually did

00:30:53,720 --> 00:31:03,650
a good job explaining I'll take the

00:30:54,950 --> 00:31:06,560
latter choice C pant I use parallel fork

00:31:03,650 --> 00:31:09,200
manager cpn visitor by itself could just

00:31:06,560 --> 00:31:11,330
iterate through an entire Sipan data

00:31:09,200 --> 00:31:13,220
structure but the problem is the

00:31:11,330 --> 00:31:14,720
basically Forks offer if you run it in

00:31:13,220 --> 00:31:17,450
parallel mode it will fork off a process

00:31:14,720 --> 00:31:19,100
for every terrible the process and that

00:31:17,450 --> 00:31:20,270
becomes a problem if you're talking to a

00:31:19,100 --> 00:31:22,210
database because it means that every

00:31:20,270 --> 00:31:24,710
process has to connect to the database

00:31:22,210 --> 00:31:26,450
for every one of those tar balls so we

00:31:24,710 --> 00:31:27,860
kind of what Rick and I figured out was

00:31:26,450 --> 00:31:30,560
a way to we inverted that we ran

00:31:27,860 --> 00:31:33,890
parallel fork manager first fork off

00:31:30,560 --> 00:31:36,110
into 10 up to 10 processes at a time and

00:31:33,890 --> 00:31:38,780
give them each chunks of 100 files to to

00:31:36,110 --> 00:31:40,520
run through and so all that is down here

00:31:38,780 --> 00:31:41,930
which I won't really go through but

00:31:40,520 --> 00:31:43,820
essentially it gets the collection

00:31:41,930 --> 00:31:46,430
information sets up aranda sque gets

00:31:43,820 --> 00:31:47,780
parses the OT packages to find out what

00:31:46,430 --> 00:31:51,110
all the disks are that are in the mini

00:31:47,780 --> 00:31:53,030
Sipan to do and then parallel fork

00:31:51,110 --> 00:31:55,520
manager fires up a number of jobs and

00:31:53,030 --> 00:31:57,860
then something basically chunks up the

00:31:55,520 --> 00:31:59,420
jobs spins them off to parallel fork

00:31:57,860 --> 00:32:00,800
manager and and lets it go and then

00:31:59,420 --> 00:32:02,630
eventually finishes and then there's

00:32:00,800 --> 00:32:05,090
some stuff to catch interrupts like

00:32:02,630 --> 00:32:05,930
it'll clean up the ram disk so I didn't

00:32:05,090 --> 00:32:07,610
want to walk through that in great

00:32:05,930 --> 00:32:09,800
detail but it was kind of a clever way

00:32:07,610 --> 00:32:11,720
to fork out first then connect to the

00:32:09,800 --> 00:32:14,750
database to minimize the number of

00:32:11,720 --> 00:32:17,150
database connections and it's out of a

00:32:14,750 --> 00:32:19,040
trade-off of the smaller the chunk size

00:32:17,150 --> 00:32:21,140
you have more database connections but

00:32:19,040 --> 00:32:22,640
you're keeping your processor more busy

00:32:21,140 --> 00:32:26,120
with larger chunk sizes we got into

00:32:22,640 --> 00:32:28,370
situations where you know the last

00:32:26,120 --> 00:32:30,860
thousand or so processes are all running

00:32:28,370 --> 00:32:31,970
on one processor last thousand tar balls

00:32:30,860 --> 00:32:33,260
are all sitting on one processor weighed

00:32:31,970 --> 00:32:35,540
in God works if you chunk it up in two

00:32:33,260 --> 00:32:37,880
batches of 100 the processor stays a

00:32:35,540 --> 00:32:41,500
little busy faster and this is all part

00:32:37,880 --> 00:32:44,570
of our race so with that going into the

00:32:41,500 --> 00:32:48,620
database we can then dig through the

00:32:44,570 --> 00:32:51,850
results so reply is a pearl repple it's

00:32:48,620 --> 00:32:54,460
kind of nice I'm in the mongodb /

00:32:51,850 --> 00:32:55,809
driver repository and I've built the

00:32:54,460 --> 00:33:00,309
latest master up so I'm going to use

00:32:55,809 --> 00:33:02,610
that because I like it if i type things

00:33:00,309 --> 00:33:02,610
correctly

00:33:08,830 --> 00:33:12,490
i'm not even using the daemon Damien

00:33:10,990 --> 00:33:14,080
Conway trick have actually like just

00:33:12,490 --> 00:33:15,490
typing pretending stuff and it's all

00:33:14,080 --> 00:33:19,330
scripted up i'm actually typing this so

00:33:15,490 --> 00:33:20,919
you'll see my typos all right yeah his

00:33:19,330 --> 00:33:24,640
his talks with like looks like he's

00:33:20,919 --> 00:33:25,750
amazing keep you know you know and it

00:33:24,640 --> 00:33:27,159
all comes out ok because it's actually

00:33:25,750 --> 00:33:30,010
I'll descript it but I'm not doing that

00:33:27,159 --> 00:33:31,779
today he ieaves the mistakes it's really

00:33:30,010 --> 00:33:33,250
clever i think that i think the script

00:33:31,779 --> 00:33:35,230
can automatically make a certain number

00:33:33,250 --> 00:33:38,080
of typos that and back spaces and goes

00:33:35,230 --> 00:33:40,360
for it they Matt Damon is like the god

00:33:38,080 --> 00:33:42,610
of presentations we can only aspire to

00:33:40,360 --> 00:33:43,809
those heights alright so if I did this

00:33:42,610 --> 00:33:46,000
correctly I should get a collection

00:33:43,809 --> 00:33:47,889
object so MongoDB connects means connect

00:33:46,000 --> 00:33:49,510
to the local database NS means give me a

00:33:47,889 --> 00:33:51,240
collection under the name space Sipan

00:33:49,510 --> 00:33:54,279
that the database name meta is the

00:33:51,240 --> 00:33:56,289
collection name I get a big thing that

00:33:54,279 --> 00:33:58,659
gets dumped out so now let's do a little

00:33:56,289 --> 00:34:00,669
check let's see how many things are did

00:33:58,659 --> 00:34:04,889
we actually record I don't even need the

00:34:00,669 --> 00:34:06,789
cynical so 3702 documents were inserted

00:34:04,889 --> 00:34:10,659
and then we can start to do some queries

00:34:06,789 --> 00:34:16,330
because count will take a query

00:34:10,659 --> 00:34:20,200
structure so I can count let's see all

00:34:16,330 --> 00:34:21,399
right so let's actually first before I

00:34:20,200 --> 00:34:24,359
showed account let me just going to show

00:34:21,399 --> 00:34:27,070
you what this one of these looks like so

00:34:24,359 --> 00:34:28,389
just do fine one without any parameters

00:34:27,070 --> 00:34:29,980
it'll actually just pick off the first

00:34:28,389 --> 00:34:36,159
document is in there I have no idea what

00:34:29,980 --> 00:34:38,230
that is so here it is so this is Pingdom

00:34:36,159 --> 00:34:40,030
client I have no idea what indem client

00:34:38,230 --> 00:34:41,440
is and it's by Dominic Schultz Dominic

00:34:40,030 --> 00:34:45,970
in the room if so you're the lucky

00:34:41,440 --> 00:34:47,589
winner so this whole thing has here's

00:34:45,970 --> 00:34:51,099
the other score ID it's text Pingdom

00:34:47,589 --> 00:34:53,429
client 0.13 the meta this was taken out

00:34:51,099 --> 00:34:57,339
of meta json meta llamo here's the flat

00:34:53,429 --> 00:34:59,859
requirements list the upload date is

00:34:57,339 --> 00:35:01,990
epic seconds and then the actual

00:34:59,859 --> 00:35:03,730
metafile abstract author dynamic config

00:35:01,990 --> 00:35:07,900
generated by blah blah blah blah all the

00:35:03,730 --> 00:35:11,589
prereqs deeps deeply nested resources no

00:35:07,900 --> 00:35:13,060
x contributors here oh well so that's

00:35:11,589 --> 00:35:16,300
what the document in the database looks

00:35:13,060 --> 00:35:18,970
like but we have these uh do some

00:35:16,300 --> 00:35:20,970
searches through so I wanted to see how

00:35:18,970 --> 00:35:22,770
many things depend on path tiny

00:35:20,970 --> 00:35:24,150
like and this is sort of now where this

00:35:22,770 --> 00:35:26,730
we had this query language which is

00:35:24,150 --> 00:35:32,090
really a structure so I say count and i

00:35:26,730 --> 00:35:36,240
say i want the requires feel to have

00:35:32,090 --> 00:35:37,830
path tiny now remember that underscore

00:35:36,240 --> 00:35:40,890
requires is in a wreck so I'm saying

00:35:37,830 --> 00:35:42,660
under Scryers path time saying finally

00:35:40,890 --> 00:35:48,030
all documents where path tiny is in that

00:35:42,660 --> 00:35:50,550
array 324 now some people like I owe all

00:35:48,030 --> 00:35:52,970
and think it's better than I path tiny

00:35:50,550 --> 00:35:55,440
so let's see how it does against Iowa

00:35:52,970 --> 00:35:56,730
only 107 now of course I think I owe all

00:35:55,440 --> 00:35:58,890
is a great scripting tool so it's

00:35:56,730 --> 00:36:00,480
probably used a lot off of CPM maybe

00:35:58,890 --> 00:36:02,690
it's not as big a requirement on CP on

00:36:00,480 --> 00:36:10,230
what about something that's more popular

00:36:02,690 --> 00:36:11,460
mu thousand and for moose 2406 anyone

00:36:10,230 --> 00:36:18,810
want to suggest a module to see how many

00:36:11,460 --> 00:36:20,160
things on cpn require it I could but I

00:36:18,810 --> 00:36:26,040
don't want to take the time to figure

00:36:20,160 --> 00:36:27,810
all that out right now dbi 817 I think

00:36:26,040 --> 00:36:32,940
partly because dbi tenzie used by end

00:36:27,810 --> 00:36:35,150
applications that aren't on CPM that's

00:36:32,940 --> 00:36:35,150
good

00:36:36,960 --> 00:36:40,440
all right data dumper and then test more

00:36:39,119 --> 00:36:41,730
oki data dump er a little over a

00:36:40,440 --> 00:36:43,619
thousand so let's look at test more

00:36:41,730 --> 00:36:49,740
which kind of goes back to that Sipan

00:36:43,619 --> 00:36:52,160
river conversation almost 16,000 and

00:36:49,740 --> 00:36:54,330
this is actually just direct dependence

00:36:52,160 --> 00:36:55,950
it's not even by calculate all the deep

00:36:54,330 --> 00:36:58,589
ones i actually use this data set threw

00:36:55,950 --> 00:37:00,660
it into the sea pen graph module and let

00:36:58,589 --> 00:37:03,119
it calculate out all the the dependency

00:37:00,660 --> 00:37:05,339
graph remain so that's how we do some

00:37:03,119 --> 00:37:08,030
queries with this there's also some

00:37:05,339 --> 00:37:13,440
other interesting things we can do let's

00:37:08,030 --> 00:37:17,790
find out how many times I'm listed in X

00:37:13,440 --> 00:37:20,580
contributors so again X contributors is

00:37:17,790 --> 00:37:22,920
an array comma comma by the way is my

00:37:20,580 --> 00:37:24,630
vin shortcut for doing fat comma if

00:37:22,920 --> 00:37:26,760
anybody uses vim you might like that

00:37:24,630 --> 00:37:27,599
abbreviation but then I type it

00:37:26,760 --> 00:37:30,089
everywhere else which is a little

00:37:27,599 --> 00:37:31,470
annoying someone do a little interesting

00:37:30,089 --> 00:37:35,010
thing here I'm going to do this with a

00:37:31,470 --> 00:37:38,460
regular expression so I use da golden as

00:37:35,010 --> 00:37:40,440
my email address while my get commits so

00:37:38,460 --> 00:37:42,599
as my email address is in there or any

00:37:40,440 --> 00:37:44,940
other da golden news it should come up

00:37:42,599 --> 00:37:46,910
so how many times am i listed in X

00:37:44,940 --> 00:37:50,820
contributors or how many distributions

00:37:46,910 --> 00:37:53,040
34 okay I've contributed to some what

00:37:50,820 --> 00:37:56,270
about Karen Etheridge people no ether

00:37:53,040 --> 00:37:59,310
Karen Etheridge know her by reputation

00:37:56,270 --> 00:38:01,530
she contributes to a lot look there's

00:37:59,310 --> 00:38:03,390
only one but she spells her name

00:38:01,530 --> 00:38:05,280
capitalized or email out this is not

00:38:03,390 --> 00:38:08,010
earth rich so let's make this case and

00:38:05,280 --> 00:38:09,780
sensitive 173 that's a little more like

00:38:08,010 --> 00:38:11,490
it and so this is one of the other

00:38:09,780 --> 00:38:13,920
things that's kind of nice about the way

00:38:11,490 --> 00:38:14,700
the MongoDB driver for Pearl works is

00:38:13,920 --> 00:38:16,170
that you can give it a regular

00:38:14,700 --> 00:38:17,880
expression and as long as it's simple

00:38:16,170 --> 00:38:21,420
enough essentially following like pcre

00:38:17,880 --> 00:38:24,690
rules it'll get turned into a beasts on

00:38:21,420 --> 00:38:26,010
binary json regular expression type sent

00:38:24,690 --> 00:38:27,780
up to the database in the davis says oh

00:38:26,010 --> 00:38:30,150
you give me a regular expression i'll

00:38:27,780 --> 00:38:34,140
use that for matching all pretty much

00:38:30,150 --> 00:38:35,970
automatic very nice and clever all right

00:38:34,140 --> 00:38:38,420
I think that's probably enough of this

00:38:35,970 --> 00:38:40,859
demo for now we'll get back to the

00:38:38,420 --> 00:38:43,280
presentation and sort of talked about a

00:38:40,859 --> 00:38:43,280
couple other things

00:38:52,049 --> 00:38:58,689
switch amelie the clicker and the right

00:38:54,039 --> 00:39:02,880
I'm already so this was an example of

00:38:58,689 --> 00:39:05,019
getting CPM metafiles loaded up into the

00:39:02,880 --> 00:39:06,909
MongoDB database which kind of got me

00:39:05,019 --> 00:39:08,289
thinking just as a thought experiment

00:39:06,909 --> 00:39:09,880
and partly for the sake of this

00:39:08,289 --> 00:39:11,499
presentation what if we wanted to

00:39:09,880 --> 00:39:14,259
rebuild sit down or if we wanted to

00:39:11,499 --> 00:39:16,929
build Sipan on top of MongoDB what would

00:39:14,259 --> 00:39:18,640
we what would we need well we need some

00:39:16,929 --> 00:39:22,869
way to store tarballs put them in take

00:39:18,640 --> 00:39:24,459
them out we need to be able to process

00:39:22,869 --> 00:39:27,069
tarballs when they're uploaded to to

00:39:24,459 --> 00:39:28,539
index them we need some worker processes

00:39:27,069 --> 00:39:29,409
we might want to get collect the logs

00:39:28,539 --> 00:39:32,219
for a bunch of different worker

00:39:29,409 --> 00:39:34,509
processes we want to be able to look up

00:39:32,219 --> 00:39:37,239
modules with an index to find out what

00:39:34,509 --> 00:39:39,729
distribution they go to maybe want to do

00:39:37,239 --> 00:39:41,079
text search pause doesn't actually do

00:39:39,729 --> 00:39:44,259
this usually we rely on things like

00:39:41,079 --> 00:39:46,449
search deep end or cometa Sipan org to

00:39:44,259 --> 00:39:48,699
find things on the basis of text but

00:39:46,449 --> 00:39:51,819
let's use it probably just for an

00:39:48,699 --> 00:39:53,229
example so for storage MongoDB has

00:39:51,819 --> 00:39:54,989
something called great FS which is sort

00:39:53,229 --> 00:39:57,369
of a convention for how to store files

00:39:54,989 --> 00:39:58,749
chunk it up into small pieces and spread

00:39:57,369 --> 00:40:01,479
it out into a collection put it in

00:39:58,749 --> 00:40:03,159
ticket out so this is an example of

00:40:01,479 --> 00:40:06,880
storing the file you open a file handle

00:40:03,159 --> 00:40:09,849
for reading you get a grid FS object

00:40:06,880 --> 00:40:12,489
will call it here tar balls and then you

00:40:09,849 --> 00:40:14,140
call the put method to take whatever is

00:40:12,489 --> 00:40:16,239
in that file handle and upload it and

00:40:14,140 --> 00:40:18,130
then to get it you can just call the get

00:40:16,239 --> 00:40:19,449
method which gives you an object which

00:40:18,130 --> 00:40:23,380
you can then call slurp on to pull the

00:40:19,449 --> 00:40:24,429
bites back out now this running on one

00:40:23,380 --> 00:40:26,079
computer isn't all that interesting

00:40:24,429 --> 00:40:28,419
because all I'm doing is taking a file

00:40:26,079 --> 00:40:30,219
and saving it on to one computer which I

00:40:28,419 --> 00:40:32,439
could do with the file system but

00:40:30,219 --> 00:40:34,119
MongoDB has the ability to be replicated

00:40:32,439 --> 00:40:35,650
so I could have a primary and two

00:40:34,119 --> 00:40:36,909
secondaries and if I upload the stuff to

00:40:35,650 --> 00:40:38,829
the primary gets replicated out to the

00:40:36,909 --> 00:40:40,509
secondary so if the primary server dies

00:40:38,829 --> 00:40:43,209
or gets shot or somebody spills coffee

00:40:40,509 --> 00:40:44,679
on it we don't lose any data because

00:40:43,209 --> 00:40:47,439
it's been backed up so we get sort of

00:40:44,679 --> 00:40:50,469
automatic replication of files it's kind

00:40:47,439 --> 00:40:53,259
of a nice feature so what about worker

00:40:50,469 --> 00:40:56,019
workers in processing a couple years ago

00:40:53,259 --> 00:40:58,809
I wrote MongoDB xq which is a sort of a

00:40:56,019 --> 00:41:01,060
message queue built on top of MongoDB so

00:40:58,809 --> 00:41:03,580
in the supervisor process of the task

00:41:01,060 --> 00:41:04,930
minor you created a MongoDB execute you

00:41:03,580 --> 00:41:06,670
give it a bunch of parameters for what

00:41:04,930 --> 00:41:09,550
the database is you want to talk to and

00:41:06,670 --> 00:41:11,230
your credentials and etc etc and then

00:41:09,550 --> 00:41:12,970
you can add a task and a task is just a

00:41:11,230 --> 00:41:15,340
document so in this case tarball ID

00:41:12,970 --> 00:41:17,680
here's an ID maybe that we just put in

00:41:15,340 --> 00:41:19,240
grid FS and then in the worker they'll

00:41:17,680 --> 00:41:21,280
have to set up a similar q object with

00:41:19,240 --> 00:41:22,630
credentials which I've left out and then

00:41:21,280 --> 00:41:24,790
it can grab a task by calling reserve

00:41:22,630 --> 00:41:27,430
task now it has this document can

00:41:24,790 --> 00:41:29,080
process it and then when it's done it

00:41:27,430 --> 00:41:31,330
can call remove task to sort of take it

00:41:29,080 --> 00:41:34,570
out so the task stays in the queue and

00:41:31,330 --> 00:41:36,070
then if the worker doesn't respond back

00:41:34,570 --> 00:41:37,630
to a move it eventually that reservation

00:41:36,070 --> 00:41:41,500
expires and some other worker will pick

00:41:37,630 --> 00:41:44,710
it up all sort of automatic so then we

00:41:41,500 --> 00:41:45,970
have logging cap collection cap

00:41:44,710 --> 00:41:48,220
collections basic alike a ring buffer

00:41:45,970 --> 00:41:50,140
you can insert documents into it when it

00:41:48,220 --> 00:41:52,870
fills up it'll just keep on staying at a

00:41:50,140 --> 00:41:54,550
maximum size so we could create it and

00:41:52,870 --> 00:41:56,860
then we can use at ailable cursor so we

00:41:54,550 --> 00:41:59,200
can use the find command on a zooming

00:41:56,860 --> 00:42:02,830
vlog is a collection we use a fine

00:41:59,200 --> 00:42:04,360
command we give it no search empty

00:42:02,830 --> 00:42:06,220
document means find everything and make

00:42:04,360 --> 00:42:07,420
it teyla bowl and when it gets to the

00:42:06,220 --> 00:42:09,040
end of that cursor and there's no more

00:42:07,420 --> 00:42:10,990
dogs to be read it will just return

00:42:09,040 --> 00:42:12,340
nothing but eventually if somebody

00:42:10,990 --> 00:42:14,590
inserts in your document a worker put

00:42:12,340 --> 00:42:16,570
the new log entry in then the next we

00:42:14,590 --> 00:42:18,400
will pull it out so we have a way to do

00:42:16,570 --> 00:42:25,150
sort of a tale about log distributed

00:42:18,400 --> 00:42:26,740
across multiple systems yeah the poland

00:42:25,150 --> 00:42:29,020
time would have to be like on you'd set

00:42:26,740 --> 00:42:30,250
that up in the in your application for

00:42:29,020 --> 00:42:32,020
how often you want to pull there is a

00:42:30,250 --> 00:42:33,880
way to set up a cursor that will

00:42:32,020 --> 00:42:35,950
actually wait a couple seconds you can't

00:42:33,880 --> 00:42:39,280
actually draw you can have a taalib

00:42:35,950 --> 00:42:40,390
allah wait cursor that will block for a

00:42:39,280 --> 00:42:42,400
second or two to see if anything comes

00:42:40,390 --> 00:42:44,020
in so you can cut down your polling time

00:42:42,400 --> 00:42:46,750
a bit if you're going to accept a couple

00:42:44,020 --> 00:42:48,460
seconds of blocking so we have an index

00:42:46,750 --> 00:42:50,590
look up we talked a lot about the query

00:42:48,460 --> 00:42:53,650
language imagine we had a packages

00:42:50,590 --> 00:42:55,870
collection that sort of indexed modules

00:42:53,650 --> 00:42:57,610
two versions to distribution tarballs

00:42:55,870 --> 00:43:00,310
then we could do a query on it well I'm

00:42:57,610 --> 00:43:02,350
looking for the module foo and instead

00:43:00,310 --> 00:43:03,940
of today we're like the pact OT packages

00:43:02,350 --> 00:43:05,830
filed at Sipan is driven off up is like

00:43:03,940 --> 00:43:07,030
one module one version one distribution

00:43:05,830 --> 00:43:09,160
we could have a bunch which would let us

00:43:07,030 --> 00:43:11,260
do some interesting queries like I want

00:43:09,160 --> 00:43:12,760
foo where the version is greater than or

00:43:11,260 --> 00:43:13,039
equal to some minimum value and less

00:43:12,760 --> 00:43:15,709
than

00:43:13,039 --> 00:43:17,979
Wilson maximum volume except we can't

00:43:15,709 --> 00:43:21,709
because version numbers in Perl soccer

00:43:17,979 --> 00:43:23,569
and there are too many ways to show them

00:43:21,709 --> 00:43:24,829
and you would have to normalize and that

00:43:23,569 --> 00:43:26,869
would sort of be awful so we'd have to

00:43:24,829 --> 00:43:29,150
do it some other way maybe with these

00:43:26,869 --> 00:43:30,739
metafiles when they're uploaded we check

00:43:29,150 --> 00:43:32,900
to see if anything in the provides is

00:43:30,739 --> 00:43:34,099
authorized we can note that and look up

00:43:32,900 --> 00:43:36,739
on that and then sort through versions

00:43:34,099 --> 00:43:38,569
client side we have text indices to

00:43:36,739 --> 00:43:40,459
search so I want to take that meta

00:43:38,569 --> 00:43:43,249
collection we have and add an index that

00:43:40,459 --> 00:43:45,410
it does a text index on the abstract or

00:43:43,249 --> 00:43:47,630
keywords fields or other fields and then

00:43:45,410 --> 00:43:48,769
we can search on it using a dollar text

00:43:47,630 --> 00:43:51,259
operator and this is where you start to

00:43:48,769 --> 00:43:53,150
see some of the ugliness of the abstract

00:43:51,259 --> 00:43:55,789
syntax tree representing queries as

00:43:53,150 --> 00:43:58,459
documents but it works there are some

00:43:55,789 --> 00:44:00,199
other handy tools geographic indexing

00:43:58,459 --> 00:44:04,609
maybe we want to record the IP address

00:44:00,199 --> 00:44:06,499
and use max Mainz geoip database to find

00:44:04,609 --> 00:44:08,209
out where uploads are coming from or

00:44:06,499 --> 00:44:09,410
where index requests are coming in from

00:44:08,209 --> 00:44:10,759
where downloads and find out what

00:44:09,410 --> 00:44:13,299
modules are popular different parts of

00:44:10,759 --> 00:44:15,679
the world I don't know could do it

00:44:13,299 --> 00:44:18,019
expiring indexes TTL indexes if we

00:44:15,679 --> 00:44:19,130
wanted something to expire after a

00:44:18,019 --> 00:44:21,409
period time they were going to cash some

00:44:19,130 --> 00:44:22,819
results put it in a expiring key went

00:44:21,409 --> 00:44:26,679
after a period of time the database will

00:44:22,819 --> 00:44:29,569
automatically purge it on out for you so

00:44:26,679 --> 00:44:30,949
that kind of is the sum just the wild

00:44:29,569 --> 00:44:34,909
set of examples of things that you can

00:44:30,949 --> 00:44:38,569
do with MongoDB in your toolbox I wanted

00:44:34,909 --> 00:44:41,209
to talk a little bit about where we're

00:44:38,569 --> 00:44:44,529
going from here so coming very soon will

00:44:41,209 --> 00:44:46,309
be the MongoDB version 1 beta 1 release

00:44:44,529 --> 00:44:48,380
this is what I've been working on for

00:44:46,309 --> 00:44:51,319
most of the last year sort of almost a

00:44:48,380 --> 00:44:52,939
total rewrite of the version 0 driver

00:44:51,319 --> 00:44:55,009
we've had a number of alphas and we're

00:44:52,939 --> 00:44:56,900
about ready to do the beta and when I

00:44:55,009 --> 00:44:59,839
say coming soon I really sort of meant

00:44:56,900 --> 00:45:02,479
like right after this talk and then I

00:44:59,839 --> 00:45:03,559
was saying well you know it might be a

00:45:02,479 --> 00:45:05,239
little busy might go to some other talks

00:45:03,559 --> 00:45:06,859
that maybe it'll be before lunch but

00:45:05,239 --> 00:45:08,659
definitely definitely during the app see

00:45:06,859 --> 00:45:10,130
I will ship this and then I had kind of

00:45:08,659 --> 00:45:12,939
a crazy idea which was like maybe to

00:45:10,130 --> 00:45:15,390
ship it right now in the middle of talk

00:45:12,939 --> 00:45:19,240
what do people think

00:45:15,390 --> 00:45:22,119
okay this all sort of assumes that the

00:45:19,240 --> 00:45:24,940
Wi-Fi holds up which I think it has but

00:45:22,119 --> 00:45:26,740
i think i have four minutes left so i'm

00:45:24,940 --> 00:45:32,849
going to give it a shot and see if the

00:45:26,740 --> 00:45:39,430
test can pass in four minutes so yeah

00:45:32,849 --> 00:45:42,220
all right so get back over to here is

00:45:39,430 --> 00:45:45,280
where I want to be okay park this a

00:45:42,220 --> 00:45:46,390
second so of course because version

00:45:45,280 --> 00:45:48,339
numbers are awful and I don't actually

00:45:46,390 --> 00:45:49,540
have real semantic versions I have to

00:45:48,339 --> 00:45:52,930
actually sort of use this funny

00:45:49,540 --> 00:45:58,990
versioning where I asymptotically

00:45:52,930 --> 00:46:02,440
approach one so 0.99 9.99 9.1 means the

00:45:58,990 --> 00:46:06,880
first beta released the 999.99 8 was the

00:46:02,440 --> 00:46:07,630
Alpha series we're up to 99 99 98.6 so

00:46:06,880 --> 00:46:10,000
that's what I'm going to do and then

00:46:07,630 --> 00:46:12,280
going to say diesel release people use

00:46:10,000 --> 00:46:14,500
disk zilla some people know what distill

00:46:12,280 --> 00:46:17,079
is distilled a release tool what this is

00:46:14,500 --> 00:46:18,849
going to do is run my build up the

00:46:17,079 --> 00:46:20,410
tarball run a whole bunch of tests run

00:46:18,849 --> 00:46:21,460
some release tests prompt me if I want

00:46:20,410 --> 00:46:23,410
to upload to see pan and if all goes

00:46:21,460 --> 00:46:26,130
well after a little while it'll be ready

00:46:23,410 --> 00:46:29,700
so I'm going to kick this off and pray

00:46:26,130 --> 00:46:33,250
beginning to build okay it's doing stuff

00:46:29,700 --> 00:46:38,250
its work in processing stuff let's see

00:46:33,250 --> 00:46:40,839
if it actually gets there all right

00:46:38,250 --> 00:46:45,160
checking a bunch of stuff all right so

00:46:40,839 --> 00:46:46,329
I'm gonna let this run and maybe in

00:46:45,160 --> 00:46:48,040
three minutes when the talk is over I

00:46:46,329 --> 00:46:52,020
will see if I'm ready to say yes and

00:46:48,040 --> 00:46:54,910
actually upload so what's coming in the

00:46:52,020 --> 00:46:56,500
version 1 upcoming releases the

00:46:54,910 --> 00:46:58,800
mommy-to-be driver well better server

00:46:56,500 --> 00:47:00,400
discovery monitoring and failover

00:46:58,800 --> 00:47:02,170
configuration has become immutable

00:47:00,400 --> 00:47:04,060
there's no longer any weird Global's

00:47:02,170 --> 00:47:06,609
either that can cause action distance

00:47:04,060 --> 00:47:07,660
there's new crud and index api's that

00:47:06,609 --> 00:47:09,190
are now standard across all the

00:47:07,660 --> 00:47:11,290
different language drivers so if you see

00:47:09,190 --> 00:47:12,460
a method call in one driver it'll

00:47:11,290 --> 00:47:14,920
basically be the same ethical in the

00:47:12,460 --> 00:47:17,380
other driver modulo camel case or

00:47:14,920 --> 00:47:18,880
underscore method names error handling

00:47:17,380 --> 00:47:21,849
will be consistent the old driver used

00:47:18,880 --> 00:47:23,650
to might throw an exception might return

00:47:21,849 --> 00:47:25,790
a boolean value for to tell you if

00:47:23,650 --> 00:47:28,340
there's an error or not might return a

00:47:25,790 --> 00:47:30,980
hash ref if it succeeded or a string if

00:47:28,340 --> 00:47:33,650
there was an error and something else as

00:47:30,980 --> 00:47:36,140
well so now everything is all exceptions

00:47:33,650 --> 00:47:38,150
based much more consistent this progress

00:47:36,140 --> 00:47:40,070
towards a puerile option a lot of the XS

00:47:38,150 --> 00:47:41,480
and see stuff has been removed and we've

00:47:40,070 --> 00:47:43,460
got some hooks to allow it to go

00:47:41,480 --> 00:47:45,170
corporal event in the future and we

00:47:43,460 --> 00:47:48,410
really improved beasts on round trip

00:47:45,170 --> 00:47:49,850
ability I saw this great cool thing

00:47:48,410 --> 00:47:52,340
about a car that looked a lot like my

00:47:49,850 --> 00:47:53,690
first car so round trip ability the old

00:47:52,340 --> 00:47:55,700
driver used to have beasts on that would

00:47:53,690 --> 00:47:57,050
come you could download a document from

00:47:55,700 --> 00:47:58,580
one collection uploaded into another

00:47:57,050 --> 00:48:01,310
collection and the data types would

00:47:58,580 --> 00:48:04,880
change not good so what I'm asking of

00:48:01,310 --> 00:48:08,540
you having SAT through this talk is to

00:48:04,880 --> 00:48:10,730
try this out is to try this out or if

00:48:08,540 --> 00:48:11,810
you've tried MongoDB before and it

00:48:10,730 --> 00:48:15,350
didn't work for you and you didn't like

00:48:11,810 --> 00:48:16,760
it please try it again the DB

00:48:15,350 --> 00:48:18,440
server has gotten much better since

00:48:16,760 --> 00:48:21,050
version 1 and version 2 it's now at

00:48:18,440 --> 00:48:23,870
version 3 significantly more reliable

00:48:21,050 --> 00:48:26,480
significantly more features and I think

00:48:23,870 --> 00:48:28,130
it's worth giving it another shot I also

00:48:26,480 --> 00:48:30,860
asked that you get involved in some way

00:48:28,130 --> 00:48:33,140
so like I said download MongoDB try it

00:48:30,860 --> 00:48:35,330
out and try the beta driver as soon as I

00:48:33,140 --> 00:48:36,710
actually get to get it shipped find a

00:48:35,330 --> 00:48:38,780
user group go to some meetings see

00:48:36,710 --> 00:48:41,120
that's all about you can follow my blog

00:48:38,780 --> 00:48:43,130
which is that Diego calm or gets covered

00:48:41,120 --> 00:48:45,860
on the Iron Man and other aggregators

00:48:43,130 --> 00:48:47,720
follow me on twitter + + the driver on

00:48:45,860 --> 00:48:49,430
meta Sipan this actually turns out to be

00:48:47,720 --> 00:48:53,330
weirdly important for me personally and

00:48:49,430 --> 00:48:56,450
I'll explain why outside and ask any

00:48:53,330 --> 00:48:59,170
questions all that would be helpful if

00:48:56,450 --> 00:49:02,390
you like it blog about it do it yourself

00:48:59,170 --> 00:49:05,630
so any questions before I check to see

00:49:02,390 --> 00:49:07,880
if I can upload if there aren't

00:49:05,630 --> 00:49:11,360
questions now you can always email me at

00:49:07,880 --> 00:49:14,690
David at MongoDB calm so with that in my

00:49:11,360 --> 00:49:18,190
remaining twenty six or so seconds least

00:49:14,690 --> 00:49:21,020
according to my timer let's see if

00:49:18,190 --> 00:49:22,820
actually float do you want to upload

00:49:21,020 --> 00:49:26,390
continue to release process preparing to

00:49:22,820 --> 00:49:29,000
release MongoDB V 0.99 when I 9.1 dash

00:49:26,390 --> 00:49:31,290
trial yes

00:49:29,000 --> 00:49:34,770
posting the upload updating a lot of

00:49:31,290 --> 00:49:47,040
files pushing to origin all right and

00:49:34,770 --> 00:49:50,400
it's done so so some point soon meta CPM

00:49:47,040 --> 00:49:51,840
we'll pick this up not yet but soon so

00:49:50,400 --> 00:49:53,490
if you check back in about five minutes

00:49:51,840 --> 00:49:56,180
it'll be available on CP on to download

00:49:53,490 --> 00:49:56,180

YouTube URL: https://www.youtube.com/watch?v=Nf3e6cPU9B0


