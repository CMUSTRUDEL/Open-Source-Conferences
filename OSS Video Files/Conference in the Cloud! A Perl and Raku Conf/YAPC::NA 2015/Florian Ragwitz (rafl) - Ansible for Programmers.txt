Title: Florian Ragwitz (rafl) - Ansible for Programmers
Publication date: 2015-06-16
Playlist: YAPC::NA 2015
Description: 
	Ballroom B - Little America Hotel
Captions: 
	00:00:15,510 --> 00:00:17,570
you

00:01:12,820 --> 00:01:20,720
alright let's get started hi i am

00:01:16,480 --> 00:01:24,950
florian or ruffle if you prefer and this

00:01:20,720 --> 00:01:28,280
is ansible for programmers the big idea

00:01:24,950 --> 00:01:30,110
is that most of you probably have pretty

00:01:28,280 --> 00:01:33,110
extensive programming knowledge in beat

00:01:30,110 --> 00:01:35,479
pearl or any other languages and you

00:01:33,110 --> 00:01:36,860
spend years trying to learn proper

00:01:35,479 --> 00:01:39,200
engineering or proper software

00:01:36,860 --> 00:01:41,060
development techniques and just learning

00:01:39,200 --> 00:01:43,820
how program languages in general work

00:01:41,060 --> 00:01:45,350
and I wouldn't help you take that

00:01:43,820 --> 00:01:47,690
knowledge that you have of programming

00:01:45,350 --> 00:01:49,580
and software engineering and help you

00:01:47,690 --> 00:01:52,369
carry it over to this tool called

00:01:49,580 --> 00:01:53,660
ansible which is a pretty neat too if

00:01:52,369 --> 00:01:56,390
you want to automate pretty much

00:01:53,660 --> 00:01:59,869
anything as long as it's got to do with

00:01:56,390 --> 00:02:02,300
computers but before I start I just want

00:01:59,869 --> 00:02:05,210
to say thank you to infinity interactive

00:02:02,300 --> 00:02:06,860
I did write this talk as part of my work

00:02:05,210 --> 00:02:08,540
for them and even though I'm no longer

00:02:06,860 --> 00:02:10,610
with the company they did allow me to

00:02:08,540 --> 00:02:18,650
give this talk anyway so thank you for

00:02:10,610 --> 00:02:20,950
that now just like with pearl there's

00:02:18,650 --> 00:02:23,690
many different ways to you sensible and

00:02:20,950 --> 00:02:26,299
I'm going to walk you through a bunch of

00:02:23,690 --> 00:02:29,780
those but one thing that they do all

00:02:26,299 --> 00:02:31,880
have in common is that they rely on

00:02:29,780 --> 00:02:35,780
something that ansible called an

00:02:31,880 --> 00:02:37,640
inventory and you see it an example

00:02:35,780 --> 00:02:41,209
right up there and the idea is that you

00:02:37,640 --> 00:02:43,700
tell ansible about how your

00:02:41,209 --> 00:02:47,450
infrastructure I should stop that time

00:02:43,700 --> 00:02:49,250
how you infrastructure looks like you

00:02:47,450 --> 00:02:51,049
tell it about all the different machines

00:02:49,250 --> 00:02:52,730
that you want to automate certain tasks

00:02:51,049 --> 00:02:55,489
on and it also gives you the possibility

00:02:52,730 --> 00:02:57,470
to sort of group the different machines

00:02:55,489 --> 00:02:59,690
that you have into different groups so

00:02:57,470 --> 00:03:05,120
in this example we get a local group of

00:02:59,690 --> 00:03:07,820
just localhost we guard one server that

00:03:05,120 --> 00:03:10,459
runs an application called Picard and

00:03:07,820 --> 00:03:12,590
another one that runs Adama and we also

00:03:10,459 --> 00:03:14,930
got at the very bottom there an app

00:03:12,590 --> 00:03:19,160
service group that is sort of composed

00:03:14,930 --> 00:03:21,560
from the members of the other groups

00:03:19,160 --> 00:03:23,120
typically you'd have a lot more machines

00:03:21,560 --> 00:03:23,490
in there you wouldn't just have a group

00:03:23,120 --> 00:03:25,410
of

00:03:23,490 --> 00:03:28,740
one machine most of the time but this is

00:03:25,410 --> 00:03:30,960
just a little of spirit of example okay

00:03:28,740 --> 00:03:34,470
so say you've written one of those

00:03:30,960 --> 00:03:37,440
inventories and you actually want to run

00:03:34,470 --> 00:03:41,220
things on those machines that he i just

00:03:37,440 --> 00:03:43,890
toured ansible about and one of the ways

00:03:41,220 --> 00:03:46,800
to do that is using ad hoc commands with

00:03:43,890 --> 00:03:49,620
the ansible command here are two

00:03:46,800 --> 00:03:52,470
examples the first argument in both

00:03:49,620 --> 00:03:56,160
cases just tells ansible which of the

00:03:52,470 --> 00:03:58,110
machines from you inventory you want to

00:03:56,160 --> 00:03:59,430
run commands on first example is just

00:03:58,110 --> 00:04:01,500
going to run it on all the machines in

00:03:59,430 --> 00:04:04,830
inventory second one just does it on a

00:04:01,500 --> 00:04:07,170
specific subset and you can do fancy of

00:04:04,830 --> 00:04:09,630
things like combine groups together or

00:04:07,170 --> 00:04:13,260
exclude certain hoes but this is the

00:04:09,630 --> 00:04:16,320
simplest example and in addition to

00:04:13,260 --> 00:04:17,790
telling ansible on what machines you

00:04:16,320 --> 00:04:20,360
want to run things on you also go to

00:04:17,790 --> 00:04:23,280
tell it what you actually want to do

00:04:20,360 --> 00:04:25,860
which is with this little minus m

00:04:23,280 --> 00:04:31,020
parameter in the end bears for it stands

00:04:25,860 --> 00:04:32,550
for module and ansel basically is a is a

00:04:31,020 --> 00:04:34,680
collection of all kinds of different

00:04:32,550 --> 00:04:36,800
modules that can do different things

00:04:34,680 --> 00:04:40,230
like running commands on remote servers

00:04:36,800 --> 00:04:43,170
transferring files making sure serves as

00:04:40,230 --> 00:04:45,210
rolling but the simplest module that

00:04:43,170 --> 00:04:47,100
ansible has is tipping module just you

00:04:45,210 --> 00:04:48,720
know connects to the server and reports

00:04:47,100 --> 00:04:51,680
back to you whether or not it could go

00:04:48,720 --> 00:04:55,410
back there and that's the ping command

00:04:51,680 --> 00:04:57,240
that's not very useful though so let's

00:04:55,410 --> 00:04:59,630
look at actually running a UNIX command

00:04:57,240 --> 00:05:02,100
for that we use the command module and

00:04:59,630 --> 00:05:04,560
to tell it what command you actually

00:05:02,100 --> 00:05:07,380
want to run we got this little more as a

00:05:04,560 --> 00:05:10,140
parameter there in the end which is how

00:05:07,380 --> 00:05:14,550
you specify arguments to the ansible

00:05:10,140 --> 00:05:16,740
modules that you're trying to run and

00:05:14,550 --> 00:05:20,160
here's just a slightly more complex

00:05:16,740 --> 00:05:24,300
example we're trying to create a user

00:05:20,160 --> 00:05:26,190
and as a parameter we're going to give

00:05:24,300 --> 00:05:29,430
it the name of the user to create and

00:05:26,190 --> 00:05:31,440
the password for that user there's all

00:05:29,430 --> 00:05:33,840
kinds of options you could supply there

00:05:31,440 --> 00:05:36,860
and they're quite extensively documented

00:05:33,840 --> 00:05:40,009
you could ask for

00:05:36,860 --> 00:05:42,349
or the home directory to be located here

00:05:40,009 --> 00:05:46,370
there you could specify the login shell

00:05:42,349 --> 00:05:49,430
for the user and so on and basically for

00:05:46,370 --> 00:05:52,129
most of the time four modules that take

00:05:49,430 --> 00:05:55,009
several parameters you would use the

00:05:52,129 --> 00:05:57,169
sort of key value so key equals value

00:05:55,009 --> 00:06:03,349
just to supply all the option to the

00:05:57,169 --> 00:06:06,199
modules that you need and this is really

00:06:03,349 --> 00:06:08,569
useful for sort of one-off commands or

00:06:06,199 --> 00:06:10,879
maybe as you're developing something

00:06:08,569 --> 00:06:14,900
larger to just be able to try running a

00:06:10,879 --> 00:06:17,479
certain module of certain parameters but

00:06:14,900 --> 00:06:20,419
most of the power vincible actually

00:06:17,479 --> 00:06:23,300
comes from a second way to use it which

00:06:20,419 --> 00:06:27,469
is through ansible playbooks those

00:06:23,300 --> 00:06:29,840
basically allow you to glue together a

00:06:27,469 --> 00:06:32,509
number of those module in vacations that

00:06:29,840 --> 00:06:34,430
we just saw in the previous slides it

00:06:32,509 --> 00:06:36,379
adds error handling if something goes

00:06:34,430 --> 00:06:38,750
wrong it's going to be allowed unless

00:06:36,379 --> 00:06:44,150
you say it shouldn't stuff like that and

00:06:38,750 --> 00:06:47,029
it gives you many kinds of features that

00:06:44,150 --> 00:06:48,860
you will be used to from programming in

00:06:47,029 --> 00:06:53,349
other languages conditional all sleeps

00:06:48,860 --> 00:06:55,370
that kind of stuff so ansible is

00:06:53,349 --> 00:06:58,339
effectively a programming language

00:06:55,370 --> 00:07:00,770
though it isn't usually marketed as such

00:06:58,339 --> 00:07:02,870
your document as such which i think is

00:07:00,770 --> 00:07:05,810
because it doesn't have its own syntax

00:07:02,870 --> 00:07:07,909
really you're just writing yamel files

00:07:05,810 --> 00:07:09,650
and then there's something that reads

00:07:07,909 --> 00:07:12,199
those younger files that sort of acts

00:07:09,650 --> 00:07:16,839
like an interpreter for the language it

00:07:12,199 --> 00:07:16,839
it's weird to program in yamel I'm

00:07:17,620 --> 00:07:25,750
it so that's the thing anyway I'm though

00:07:21,940 --> 00:07:28,720
this is how it would sort of look like

00:07:25,750 --> 00:07:31,130
this is quite a lot of text on the slide

00:07:28,720 --> 00:07:34,790
so I want to go through it piece by

00:07:31,130 --> 00:07:37,550
piece so this is called a playbook and

00:07:34,790 --> 00:07:41,180
it consists of a number of plays it's

00:07:37,550 --> 00:07:43,270
basically one big yamo list and we just

00:07:41,180 --> 00:07:45,410
get one element in this list here and

00:07:43,270 --> 00:07:49,070
everything else is sort of indented on

00:07:45,410 --> 00:07:51,140
the road so this first segment says that

00:07:49,070 --> 00:07:54,020
we want to run this particular play on

00:07:51,140 --> 00:07:56,180
all these servers that are no postgresql

00:07:54,020 --> 00:07:58,640
server group which you would have to

00:07:56,180 --> 00:08:02,990
find in your inventory and just list all

00:07:58,640 --> 00:08:05,000
the database servers under it and after

00:08:02,990 --> 00:08:07,190
telling it where to run things you also

00:08:05,000 --> 00:08:09,430
go to tell it what to run which is what

00:08:07,190 --> 00:08:12,530
this little task section is for and

00:08:09,430 --> 00:08:14,600
these tasks are what we're going to

00:08:12,530 --> 00:08:16,520
spend most of this talk with so I'm just

00:08:14,600 --> 00:08:23,110
going to gloss over the details here and

00:08:16,520 --> 00:08:23,110
just show you the rest of it other feet

00:08:24,520 --> 00:08:28,850
so there's many different sections that

00:08:27,410 --> 00:08:31,010
you can have in place like this

00:08:28,850 --> 00:08:34,130
including handlers that are going to be

00:08:31,010 --> 00:08:35,719
called just like a call back once a

00:08:34,130 --> 00:08:37,910
certain thing happens in this example

00:08:35,719 --> 00:08:39,800
whenever the postgresql configuration

00:08:37,910 --> 00:08:41,900
file changes in any way it's going to

00:08:39,800 --> 00:08:46,040
make sure that postgresql actually gets

00:08:41,900 --> 00:08:48,110
restarted but anyway so let's focus on

00:08:46,040 --> 00:08:52,580
these these tasks and get rid of this

00:08:48,110 --> 00:08:55,040
little notified thing here i color-coded

00:08:52,580 --> 00:08:57,620
these a little bit because there's like

00:08:55,040 --> 00:08:59,930
a one-to-one mapping between these

00:08:57,620 --> 00:09:01,460
statements up there and these little ad

00:08:59,930 --> 00:09:03,830
hoc commands that I showed you earlier

00:09:01,460 --> 00:09:06,590
if we go back to these and color code

00:09:03,830 --> 00:09:10,940
them the same way you can sort of see

00:09:06,590 --> 00:09:12,920
how does corresponds in the PlayBook

00:09:10,940 --> 00:09:15,710
syntax and y ml you basically use the

00:09:12,920 --> 00:09:19,630
ansible module name as the key and then

00:09:15,710 --> 00:09:23,600
to value on the right hand side of the

00:09:19,630 --> 00:09:26,180
colon is all the arguments that you're

00:09:23,600 --> 00:09:29,480
going to pass to the module so for

00:09:26,180 --> 00:09:31,250
example in the task at the very top we

00:09:29,480 --> 00:09:33,410
use the app module which knows how

00:09:31,250 --> 00:09:35,410
to install and remove packages on debian

00:09:33,410 --> 00:09:42,380
and we just ask you to install

00:09:35,410 --> 00:09:45,890
postgresql 94 of the latest version ok

00:09:42,380 --> 00:09:48,290
and once we got those things written we

00:09:45,890 --> 00:09:49,910
get to run them and in this case you

00:09:48,290 --> 00:09:52,160
would use the ansible playback command

00:09:49,910 --> 00:09:55,250
rather than the ansible command and you

00:09:52,160 --> 00:09:57,470
give it the foil that you are saved you

00:09:55,250 --> 00:10:00,860
play the gas in this example cited llamo

00:09:57,470 --> 00:10:03,950
and you're also gonna tell ansible play

00:10:00,860 --> 00:10:06,290
look about you inventory so it knows

00:10:03,950 --> 00:10:10,430
what you mean when you say do something

00:10:06,290 --> 00:10:15,710
and all the postgresql service alright

00:10:10,430 --> 00:10:18,860
so just looking at this very very basic

00:10:15,710 --> 00:10:23,330
example you can see a couple of things

00:10:18,860 --> 00:10:25,120
that might bother d the average

00:10:23,330 --> 00:10:27,650
programmer there's a couple of things

00:10:25,120 --> 00:10:32,000
hard-coded in there such as the

00:10:27,650 --> 00:10:34,010
postgresql version if you want to

00:10:32,000 --> 00:10:35,300
upgrade to the next version or downgrade

00:10:34,010 --> 00:10:39,050
or something you would actually have to

00:10:35,300 --> 00:10:41,150
go through all of your playbooks and

00:10:39,050 --> 00:10:42,980
rolls and whatnot and find the right

00:10:41,150 --> 00:10:45,650
strings and replace them be sure that

00:10:42,980 --> 00:10:49,070
you don't actually forget any of them so

00:10:45,650 --> 00:10:50,960
it's it would be a little bit nicer to

00:10:49,070 --> 00:10:52,460
be able to just factor that out and just

00:10:50,960 --> 00:10:55,640
have that in one place though it's easy

00:10:52,460 --> 00:10:59,570
to change whenever you have to and that

00:10:55,640 --> 00:11:01,250
is what variables in ansible or for you

00:10:59,570 --> 00:11:03,700
could introduce them just like that at

00:11:01,250 --> 00:11:07,430
the top there just as a key value pair

00:11:03,700 --> 00:11:09,670
that the value could be a complex

00:11:07,430 --> 00:11:11,810
structure could be a list it could be a

00:11:09,670 --> 00:11:14,180
dictionary doesn't have to be just

00:11:11,810 --> 00:11:18,140
applying simple value like in this

00:11:14,180 --> 00:11:22,070
example and once we have that we can

00:11:18,140 --> 00:11:25,430
replace these occurrences with just a

00:11:22,070 --> 00:11:28,370
little variable interpolation and now we

00:11:25,430 --> 00:11:30,320
get only one place where we go to change

00:11:28,370 --> 00:11:31,610
things if we want to switch postgresql

00:11:30,320 --> 00:11:33,890
versions and that's sort of the the

00:11:31,610 --> 00:11:36,620
first programming language feature

00:11:33,890 --> 00:11:41,280
available just having variables that can

00:11:36,620 --> 00:11:45,280
be used a defined now

00:11:41,280 --> 00:11:48,010
just like you don't usually want the

00:11:45,280 --> 00:11:51,280
text of your web page template to just

00:11:48,010 --> 00:11:53,620
be strings and your pull source code you

00:11:51,280 --> 00:11:56,980
probably also don't want these variables

00:11:53,620 --> 00:11:58,960
to be declared right within your

00:11:56,980 --> 00:12:01,240
PlayBook you can I want to have a

00:11:58,960 --> 00:12:03,670
separation of the actual code that you

00:12:01,240 --> 00:12:07,180
run and the data that your code users

00:12:03,670 --> 00:12:10,090
and ansible makes it easy to you can

00:12:07,180 --> 00:12:12,580
just create a new file and call it any

00:12:10,090 --> 00:12:16,210
name you want put your variables in

00:12:12,580 --> 00:12:18,370
there and then rather than declaring

00:12:16,210 --> 00:12:21,130
variables at the top there we just

00:12:18,370 --> 00:12:22,590
include this file which is nice because

00:12:21,130 --> 00:12:27,670
it's usually you're going to end up

00:12:22,590 --> 00:12:29,320
having a lot of variables and it's not

00:12:27,670 --> 00:12:33,910
very nice to to maintain if you have

00:12:29,320 --> 00:12:39,280
those right in your code though unstable

00:12:33,910 --> 00:12:41,980
also has so if you were to do that you

00:12:39,280 --> 00:12:44,500
might have a problem though say you're

00:12:41,980 --> 00:12:48,790
usually running postgresql 9.1 in

00:12:44,500 --> 00:12:51,460
production and but you want to try maybe

00:12:48,790 --> 00:12:53,470
postgresql 94 on your staging system or

00:12:51,460 --> 00:12:55,840
some such and there isn't really an easy

00:12:53,470 --> 00:12:58,950
way to do it with a setup like this but

00:12:55,840 --> 00:13:02,560
ansible has a feature or set of features

00:12:58,950 --> 00:13:07,420
specifically for that and it is so

00:13:02,560 --> 00:13:10,210
common and that all you have to do to

00:13:07,420 --> 00:13:12,060
use it really is delete code we just get

00:13:10,210 --> 00:13:15,550
rid of all of that at the top and

00:13:12,060 --> 00:13:17,950
instead we're going to create a couple

00:13:15,550 --> 00:13:22,420
of new files that ansible knows about

00:13:17,950 --> 00:13:24,820
and will look up when it needs to so we

00:13:22,420 --> 00:13:27,880
see a directory listing here and we got

00:13:24,820 --> 00:13:30,610
to play book at the very top and we

00:13:27,880 --> 00:13:34,390
created in two new directories group

00:13:30,610 --> 00:13:35,770
bars and host bars and basically what's

00:13:34,390 --> 00:13:37,840
going on here we're going to assume

00:13:35,770 --> 00:13:42,460
postgresql service odium all has

00:13:37,840 --> 00:13:45,600
diversion declared as 9.1 and this is

00:13:42,460 --> 00:13:47,800
going to be loaded for all the machines

00:13:45,600 --> 00:13:50,920
that happened to be in a postgresql

00:13:47,800 --> 00:13:53,990
service group so we got our default set

00:13:50,920 --> 00:13:57,200
there but we can for example file

00:13:53,990 --> 00:14:00,920
20 staging server saladna we can

00:13:57,200 --> 00:14:04,160
overwrite that version on a host on a

00:14:00,920 --> 00:14:06,589
per host level by just creating a new

00:14:04,160 --> 00:14:09,680
configuration yamel file in this host

00:14:06,589 --> 00:14:11,390
vast directory and if that name matches

00:14:09,680 --> 00:14:13,399
any of the hosts that you're working

00:14:11,390 --> 00:14:23,240
against it's going to load those instead

00:14:13,399 --> 00:14:27,920
and override the defaults will the

00:14:23,240 --> 00:14:33,350
question is can you have a one host to

00:14:27,920 --> 00:14:35,630
last file for two hosts you can't do

00:14:33,350 --> 00:14:37,520
that but you can create any number of

00:14:35,630 --> 00:14:39,830
new groups you can just make a new group

00:14:37,520 --> 00:14:41,870
with those two or three servers that are

00:14:39,830 --> 00:14:48,770
special and then just have a group walls

00:14:41,870 --> 00:14:50,510
of specific to that thank you okay so

00:14:48,770 --> 00:14:53,060
that's variable tune ansible and it's

00:14:50,510 --> 00:14:55,240
all well annoys next language feature I

00:14:53,060 --> 00:14:58,100
want to talk about our conditionals

00:14:55,240 --> 00:15:00,260
those are introduced using little when

00:14:58,100 --> 00:15:02,540
keyword there and on the right hand side

00:15:00,260 --> 00:15:04,880
we got a little logical expression in

00:15:02,540 --> 00:15:07,279
this case which is comparing the

00:15:04,880 --> 00:15:10,910
constant Debian against whatever ansible

00:15:07,279 --> 00:15:13,220
decided our distribution was in general

00:15:10,910 --> 00:15:15,170
all the variables starting with ansible

00:15:13,220 --> 00:15:32,420
underscore are provided to you by

00:15:15,170 --> 00:15:34,070
ansible Dave yes ansible distribution

00:15:32,420 --> 00:15:35,930
and other variables with that prefix are

00:15:34,070 --> 00:15:37,940
provided to you by ansible it can give

00:15:35,930 --> 00:15:40,730
you a lot of information using puppets

00:15:37,940 --> 00:15:43,520
factor and a couple of other things to

00:15:40,730 --> 00:15:46,899
tell you about the IP addresses and all

00:15:43,520 --> 00:15:50,500
the interfaces and things like that and

00:15:46,899 --> 00:15:53,180
so here we just differentiate between

00:15:50,500 --> 00:15:55,640
redhead systems and Debian systems and

00:15:53,180 --> 00:15:57,230
appropriately Adi is apt or V on to

00:15:55,640 --> 00:16:00,170
install the appropriately named

00:15:57,230 --> 00:16:05,060
postgresql package that's pretty simple

00:16:00,170 --> 00:16:07,540
and you can't just use a the ansible

00:16:05,060 --> 00:16:12,040
provider variables you can also

00:16:07,540 --> 00:16:14,170
find your own in this example we want to

00:16:12,040 --> 00:16:16,060
install pill so we can run a pillar

00:16:14,170 --> 00:16:18,610
application that's what the second task

00:16:16,060 --> 00:16:22,120
does they're using pill build could use

00:16:18,610 --> 00:16:24,040
pull real well belts and it would be

00:16:22,120 --> 00:16:26,889
kind of silly to just rebuild it and

00:16:24,040 --> 00:16:29,709
reinstall at every single time you want

00:16:26,889 --> 00:16:31,569
to deploy using your automation so what

00:16:29,709 --> 00:16:34,389
we do is we add a little predicate at

00:16:31,569 --> 00:16:36,009
the very top where we're using ansible

00:16:34,389 --> 00:16:38,769
stat module which can give us

00:16:36,009 --> 00:16:43,660
information about entities in the file

00:16:38,769 --> 00:16:45,910
system and we ask for information about

00:16:43,660 --> 00:16:48,579
the path where we expect our pillar

00:16:45,910 --> 00:16:50,589
binary to be and we tell it to please

00:16:48,579 --> 00:16:53,470
store that information in our pearl

00:16:50,589 --> 00:16:56,860
existence variable there to subsequently

00:16:53,470 --> 00:16:59,170
then decide to only run pearl build if

00:16:56,860 --> 00:17:00,279
that file does not exist because if it

00:16:59,170 --> 00:17:04,510
does exist we're just going to assume

00:17:00,279 --> 00:17:10,089
it's already installed all right other

00:17:04,510 --> 00:17:12,520
questions on the conditionals good next

00:17:10,089 --> 00:17:15,040
popular language feature loops all these

00:17:12,520 --> 00:17:17,110
things look exactly as I am right and

00:17:15,040 --> 00:17:21,760
there's no reason to pick while it quite

00:17:17,110 --> 00:17:25,390
as verbose so we can use loops we give

00:17:21,760 --> 00:17:27,220
ansible a little list of items that we

00:17:25,390 --> 00:17:30,010
want it to work through and it's going

00:17:27,220 --> 00:17:32,409
to call the apt module at the top for

00:17:30,010 --> 00:17:34,809
every single one of them substituting

00:17:32,409 --> 00:17:37,450
the little item variable by whatever

00:17:34,809 --> 00:17:44,470
values you listed as the items at the

00:17:37,450 --> 00:17:48,669
very bottom and next feature ansible

00:17:44,470 --> 00:17:50,970
cultured includes I personally try I

00:17:48,669 --> 00:17:55,510
prefer to think about them as as

00:17:50,970 --> 00:17:58,179
functions I thought I feel that way of

00:17:55,510 --> 00:18:01,929
thinking about it makes it a lot more

00:17:58,179 --> 00:18:04,120
clearer what it actually does so we're

00:18:01,929 --> 00:18:06,130
back LOL dat abase server and we got to

00:18:04,120 --> 00:18:09,940
create a couple of users or roles as

00:18:06,130 --> 00:18:11,799
ansible calls it and we do this using

00:18:09,940 --> 00:18:14,620
the create user command there at the

00:18:11,799 --> 00:18:16,540
bottom but we only want to do that if

00:18:14,620 --> 00:18:18,730
the user doesn't already exist because

00:18:16,540 --> 00:18:21,220
otherwise postgresql is going to yell at

00:18:18,730 --> 00:18:23,799
us so what we do is

00:18:21,220 --> 00:18:27,370
we just have another one of these little

00:18:23,799 --> 00:18:29,169
predicates and we just ask postgresql

00:18:27,370 --> 00:18:31,510
whether or not that you use already

00:18:29,169 --> 00:18:34,120
exists while sending some SQL query that

00:18:31,510 --> 00:18:38,890
I've emitted and we store the results in

00:18:34,120 --> 00:18:40,510
our role existence variable and I'm sure

00:18:38,890 --> 00:18:43,110
you noticed these little placeholders

00:18:40,510 --> 00:18:45,850
there I wasn't actually concrete about

00:18:43,110 --> 00:18:48,940
what the name of the role is anything

00:18:45,850 --> 00:18:52,720
like that the reason is we're just going

00:18:48,940 --> 00:18:55,270
to store the contents of this slide in a

00:18:52,720 --> 00:18:57,580
new file that we could call create role

00:18:55,270 --> 00:19:00,210
that ya know and we can subsequently

00:18:57,580 --> 00:19:02,890
include that in 20 player book and

00:19:00,210 --> 00:19:07,030
provide sort of the function parameters

00:19:02,890 --> 00:19:09,280
in this case we just pass in the user

00:19:07,030 --> 00:19:10,990
name that we want to create or and we

00:19:09,280 --> 00:19:14,080
can call it as many times as you want

00:19:10,990 --> 00:19:16,240
with any different parameters and it

00:19:14,080 --> 00:19:20,130
doesn't just have to be one parameter so

00:19:16,240 --> 00:19:28,900
this is Helen stable functions work

00:19:20,130 --> 00:19:32,559
they're super useful ok now let's say we

00:19:28,900 --> 00:19:35,470
want to import some data into our

00:19:32,559 --> 00:19:38,530
database and we want to do that from a

00:19:35,470 --> 00:19:40,720
postgresql dump so that you know

00:19:38,530 --> 00:19:45,309
applications can actually do beautiful

00:19:40,720 --> 00:19:48,370
things we could do like this ansible has

00:19:45,309 --> 00:19:50,860
a very handy copy module which allows

00:19:48,370 --> 00:19:53,080
you to transfer files from the machine

00:19:50,860 --> 00:19:57,010
and stop waters running on to your

00:19:53,080 --> 00:19:59,110
target systems and once we got it over

00:19:57,010 --> 00:20:02,530
there we can just use pto restore to

00:19:59,110 --> 00:20:06,940
load it in right though that there's a

00:20:02,530 --> 00:20:10,990
couple of problems were with these tasks

00:20:06,940 --> 00:20:13,419
um for starters it's only going to work

00:20:10,990 --> 00:20:15,789
once your honoured ones it's going to

00:20:13,419 --> 00:20:18,610
copy the file over imported everything's

00:20:15,789 --> 00:20:20,440
good next time you run it though it's

00:20:18,610 --> 00:20:22,630
going to fail postgresql is going to

00:20:20,440 --> 00:20:25,000
yell at you because the database already

00:20:22,630 --> 00:20:26,919
successful because the relations you're

00:20:25,000 --> 00:20:30,490
trying to create in the database already

00:20:26,919 --> 00:20:34,650
exists so things are going to blow up

00:20:30,490 --> 00:20:40,090
and that's not very helpful

00:20:34,650 --> 00:20:42,490
this is an example of an action that

00:20:40,090 --> 00:20:46,830
that isn't oil impotent and I kind of

00:20:42,490 --> 00:20:51,640
just want to use this to start a little

00:20:46,830 --> 00:20:54,070
tangent and talk about Odin potency but

00:20:51,640 --> 00:20:57,730
I don't want to do it with the the

00:20:54,070 --> 00:20:59,740
slaughter more complex example of trying

00:20:57,730 --> 00:21:02,620
to load a database dump but instead I

00:20:59,740 --> 00:21:05,650
want to use a little bit of a controlled

00:21:02,620 --> 00:21:09,570
example this is kind of silly but the

00:21:05,650 --> 00:21:13,059
idea is to demonstrate it a bigger point

00:21:09,570 --> 00:21:16,750
so we got an application that is called

00:21:13,059 --> 00:21:19,960
Picard and it has a configuration file a

00:21:16,750 --> 00:21:22,870
tcp cultured conf and the Picard

00:21:19,960 --> 00:21:26,890
developers recently added a new feature

00:21:22,870 --> 00:21:29,320
called conditional get and we do want to

00:21:26,890 --> 00:21:33,490
give that a try and should do so we got

00:21:29,320 --> 00:21:36,490
enable it in the configuration file we

00:21:33,490 --> 00:21:40,240
could do it like this which is a way to

00:21:36,490 --> 00:21:44,590
sell to say in shell to append align to

00:21:40,240 --> 00:21:52,320
an existing or two new file this is

00:21:44,590 --> 00:21:52,320
obviously problematic though excuse me

00:21:56,460 --> 00:22:00,520
somebody might already have added that

00:21:58,990 --> 00:22:02,290
line to it and then you're going to end

00:22:00,520 --> 00:22:04,270
it end up having it twice and they're

00:22:02,290 --> 00:22:06,250
worse yet people could have done it on

00:22:04,270 --> 00:22:09,280
just some servers not on the others and

00:22:06,250 --> 00:22:15,850
you end up being unhappy because

00:22:09,280 --> 00:22:20,049
everything is inconsistent so the idea

00:22:15,850 --> 00:22:23,530
is to not do that what you always want

00:22:20,049 --> 00:22:26,590
to aim for is writing idempotent actions

00:22:23,530 --> 00:22:28,419
or tasks because that way it doesn't

00:22:26,590 --> 00:22:30,309
really matter what your start state is

00:22:28,419 --> 00:22:37,150
you're always going to end up in the

00:22:30,309 --> 00:22:39,640
state that you actually want and to do

00:22:37,150 --> 00:22:41,500
so in this little example instead we

00:22:39,640 --> 00:22:44,169
could just use the same copy feature

00:22:41,500 --> 00:22:47,440
we've seen before just maintain our own

00:22:44,169 --> 00:22:48,090
static configuration file together with

00:22:47,440 --> 00:22:50,760
the rest of

00:22:48,090 --> 00:22:52,230
civil code and then just send it over no

00:22:50,760 --> 00:22:56,909
matter what the old file contents were

00:22:52,230 --> 00:23:00,390
we're just going to replace it with the

00:22:56,909 --> 00:23:02,880
contents of this static file maybe

00:23:00,390 --> 00:23:06,090
though we only want to enable that

00:23:02,880 --> 00:23:07,740
feature on our staging machines for now

00:23:06,090 --> 00:23:10,770
because we're not quite sure if it's a

00:23:07,740 --> 00:23:18,870
good feature so instead we could also

00:23:10,770 --> 00:23:20,669
use a little template and use say host

00:23:18,870 --> 00:23:23,010
vols a group loss that we've seen

00:23:20,669 --> 00:23:28,880
earlier to just enable that particular

00:23:23,010 --> 00:23:31,679
feature on a subset of our machines and

00:23:28,880 --> 00:23:38,100
there's a another way that that I

00:23:31,679 --> 00:23:40,590
particularly like you so this is a

00:23:38,100 --> 00:23:43,980
little bit silly for this very simple

00:23:40,590 --> 00:23:47,850
just config file example but I think it

00:23:43,980 --> 00:23:50,730
sort of illustrates how often if you're

00:23:47,850 --> 00:23:53,070
struggling to roid something in an

00:23:50,730 --> 00:23:55,080
idempotent way it often helps you to

00:23:53,070 --> 00:23:58,169
step back a little bit and phrase the

00:23:55,080 --> 00:24:01,529
problem differently until it's actually

00:23:58,169 --> 00:24:04,890
easy to roid an implementation that that

00:24:01,529 --> 00:24:07,710
is nice and eigen potent and are not

00:24:04,890 --> 00:24:09,870
terrible so here instead of just having

00:24:07,710 --> 00:24:12,450
one configuration file we basically have

00:24:09,870 --> 00:24:15,630
a whole directory of configuration files

00:24:12,450 --> 00:24:17,880
any TCP katakana 2d and the application

00:24:15,630 --> 00:24:21,240
is just going to lie to all of them so

00:24:17,880 --> 00:24:23,399
if you want to say enable at new feature

00:24:21,240 --> 00:24:26,070
you can just put a new file in there

00:24:23,399 --> 00:24:29,029
which is easy to do even without fancy

00:24:26,070 --> 00:24:32,940
tools like ansible or puppet or whatnot

00:24:29,029 --> 00:24:35,429
it's not really necessary but it just

00:24:32,940 --> 00:24:39,390
shows how thinking about the problem

00:24:35,429 --> 00:24:45,960
somewhat differently often allows you to

00:24:39,390 --> 00:24:51,090
write idempotent solutions in a bit of

00:24:45,960 --> 00:24:54,929
an easier way ok so let's just go back

00:24:51,090 --> 00:24:57,480
to our database dump example one easy

00:24:54,929 --> 00:25:00,480
way to fix the problem we had we could

00:24:57,480 --> 00:25:01,560
just drop the database every time before

00:25:00,480 --> 00:25:09,390
which

00:25:01,560 --> 00:25:11,730
to restore it you wouldn't want to do

00:25:09,390 --> 00:25:17,340
that every single time though if your

00:25:11,730 --> 00:25:20,310
data isn't trivially a tiny you would

00:25:17,340 --> 00:25:22,530
ask postgresql to reload gigabytes and

00:25:20,310 --> 00:25:25,920
gigabytes of data and rebuild indices

00:25:22,530 --> 00:25:29,280
and whatnot and you probably don't want

00:25:25,920 --> 00:25:30,870
your applications to be down for hours

00:25:29,280 --> 00:25:35,760
every single time you got to make a

00:25:30,870 --> 00:25:38,010
minor configuration change so we should

00:25:35,760 --> 00:25:40,260
figure out a way to only sometimes do

00:25:38,010 --> 00:25:43,050
this and we start out by just during

00:25:40,260 --> 00:25:46,080
that in like its own function called

00:25:43,050 --> 00:25:47,910
restore database so that elsewhere we

00:25:46,080 --> 00:25:50,940
can just include it and all we got to do

00:25:47,910 --> 00:25:52,980
is figure out when to actually include

00:25:50,940 --> 00:25:56,250
it and and there's there's many

00:25:52,980 --> 00:25:59,910
different ways to do that we could just

00:25:56,250 --> 00:26:01,620
say if the database doesn't exist yet we

00:25:59,910 --> 00:26:05,250
created otherwise we just keep it the

00:26:01,620 --> 00:26:09,780
way it is or you could go a little

00:26:05,250 --> 00:26:13,110
further and add a little switch that I

00:26:09,780 --> 00:26:16,680
called false restore here which would

00:26:13,110 --> 00:26:19,140
allow whoever's using the sensible code

00:26:16,680 --> 00:26:23,190
to just set this option whenever they

00:26:19,140 --> 00:26:24,780
need to reload the database from say I

00:26:23,190 --> 00:26:27,720
don't know the production database don't

00:26:24,780 --> 00:26:31,260
achieve the QA or staging one or whatnot

00:26:27,720 --> 00:26:33,120
though like the whole point of the

00:26:31,260 --> 00:26:35,670
sensible thing is to automate things so

00:26:33,120 --> 00:26:37,560
it seems a little silly to me to like

00:26:35,670 --> 00:26:40,590
add more manuals which is where people

00:26:37,560 --> 00:26:46,440
have to to do things so we could do

00:26:40,590 --> 00:26:50,640
better for example we could just store

00:26:46,440 --> 00:26:53,520
with our data information about what

00:26:50,640 --> 00:26:55,800
kind of data it is say if you're trying

00:26:53,520 --> 00:26:57,720
to load production database Dom's onto

00:26:55,800 --> 00:26:59,940
your staging server and want that to be

00:26:57,720 --> 00:27:02,100
recently up-to-date what you could do

00:26:59,940 --> 00:27:06,840
for example is as you create the

00:27:02,100 --> 00:27:09,030
database dump you could say encode into

00:27:06,840 --> 00:27:10,980
the file name of it say the the revision

00:27:09,030 --> 00:27:13,880
of it or you could actually have it as

00:27:10,980 --> 00:27:18,029
part of the data and yes ql it

00:27:13,880 --> 00:27:20,490
doesn't really matter and when you load

00:27:18,029 --> 00:27:23,250
it onto your machines you can just take

00:27:20,490 --> 00:27:26,010
note of which were version am I actually

00:27:23,250 --> 00:27:32,159
working here with so that you could just

00:27:26,010 --> 00:27:34,470
simply compare them which is a lot a lot

00:27:32,159 --> 00:27:37,590
easier than then the you know naive

00:27:34,470 --> 00:27:41,490
approach of the I don't know obvious

00:27:37,590 --> 00:27:47,010
approach I guess of trying to compare

00:27:41,490 --> 00:27:48,419
actual data sets that's that's actually

00:27:47,010 --> 00:27:50,820
a hard problem to solve to take a

00:27:48,419 --> 00:27:52,110
database dump in a database in post your

00:27:50,820 --> 00:27:54,210
skill and figure out if there's any

00:27:52,110 --> 00:27:58,110
changes and do I have to let it new on

00:27:54,210 --> 00:28:02,960
do I not so we basically just stored

00:27:58,110 --> 00:28:07,740
some extra metadata and that helps us to

00:28:02,960 --> 00:28:10,860
write a nice item potent a solution to

00:28:07,740 --> 00:28:13,049
this that doesn't require us to delete

00:28:10,860 --> 00:28:19,940
our database and recreate them all the

00:28:13,049 --> 00:28:24,870
time so anyway enough of this little

00:28:19,940 --> 00:28:27,299
excursion so this is our original

00:28:24,870 --> 00:28:30,390
example that just does these free things

00:28:27,299 --> 00:28:32,490
it installs postgresql copies a config

00:28:30,390 --> 00:28:35,730
file over and ensures that the service

00:28:32,490 --> 00:28:38,399
is actually running and this is quite a

00:28:35,730 --> 00:28:42,330
bit of code even though it doesn't do a

00:28:38,399 --> 00:28:44,399
lot and in real life playbooks you would

00:28:42,330 --> 00:28:46,980
usually expect to see a whole lot more

00:28:44,399 --> 00:28:49,919
code and it can be come kind of

00:28:46,980 --> 00:28:54,600
overwhelming like you might end up with

00:28:49,919 --> 00:28:58,140
the equivalent of those 10,000 20,000

00:28:54,600 --> 00:29:03,510
lines pull CGI scripts from a couple of

00:28:58,140 --> 00:29:05,760
years ago so ansible gives you a whole

00:29:03,510 --> 00:29:10,409
bunch of ways to sort of structure your

00:29:05,760 --> 00:29:13,440
code in a better way and one of them is

00:29:10,409 --> 00:29:18,690
called Rawls I feel it sort of a call in

00:29:13,440 --> 00:29:25,049
to what many other languages might call

00:29:18,690 --> 00:29:26,119
modules or classes packages something

00:29:25,049 --> 00:29:28,609
like that

00:29:26,119 --> 00:29:31,399
instead of just listing all the things

00:29:28,609 --> 00:29:34,339
that need to be done on these postgresql

00:29:31,399 --> 00:29:37,489
servers one thing you can do is just say

00:29:34,339 --> 00:29:41,239
I want all the hosts in the postgresql

00:29:37,489 --> 00:29:44,869
service group to perform the role of a

00:29:41,239 --> 00:29:48,499
postgresql server and then we're just

00:29:44,869 --> 00:29:50,509
going to define our Ross and similarly

00:29:48,499 --> 00:29:54,379
we do the same thing for our little

00:29:50,509 --> 00:29:56,749
Picard application and then every server

00:29:54,379 --> 00:29:59,539
in that particular group is going to be

00:29:56,749 --> 00:30:03,199
made to perform the role of a Picard

00:29:59,539 --> 00:30:05,389
server and maybe we might also want to

00:30:03,199 --> 00:30:08,509
have the time synchronized on these

00:30:05,389 --> 00:30:11,959
machines so we just add an extra roll to

00:30:08,509 --> 00:30:14,299
basically just list which machines have

00:30:11,959 --> 00:30:15,919
to perform which roles and ansible is

00:30:14,299 --> 00:30:20,409
just going to go figure it out for us

00:30:15,919 --> 00:30:24,529
which is a lot nicer so let's look at

00:30:20,409 --> 00:30:26,269
how to actually write these roles we're

00:30:24,529 --> 00:30:29,149
looking at our directory listing again

00:30:26,269 --> 00:30:31,159
and I'm going to get rid of just the

00:30:29,149 --> 00:30:34,099
group laws and the host boss to make a

00:30:31,159 --> 00:30:37,219
little more space and we see a new

00:30:34,099 --> 00:30:38,779
subdirectory the roles directory and

00:30:37,219 --> 00:30:42,109
every role in there is going to be a

00:30:38,779 --> 00:30:46,069
subdirectory of the roles directory the

00:30:42,109 --> 00:30:48,949
MTP so one is a super simple one so just

00:30:46,069 --> 00:30:53,659
has one file that lists lists all of our

00:30:48,949 --> 00:30:55,429
tasks that we want to perform a for ntp

00:30:53,659 --> 00:30:57,829
servers and it might look something like

00:30:55,429 --> 00:31:00,589
that just install it make sure it's

00:30:57,829 --> 00:31:05,029
running done that is probably like the

00:31:00,589 --> 00:31:07,219
easiest possible role but you can do a

00:31:05,029 --> 00:31:11,059
lot more with it and I want to look at

00:31:07,219 --> 00:31:15,589
that by the example of this p card

00:31:11,059 --> 00:31:18,619
application simple application again it

00:31:15,589 --> 00:31:21,079
has a task subdirectory with the main

00:31:18,619 --> 00:31:25,099
entry point and possibly all the other

00:31:21,079 --> 00:31:26,929
little includes that you want to use but

00:31:25,099 --> 00:31:31,099
in addition to that it has a couple of

00:31:26,929 --> 00:31:32,869
more sub directories files for example

00:31:31,099 --> 00:31:35,449
is going to contain all the static files

00:31:32,869 --> 00:31:37,459
that you might need and you just put

00:31:35,449 --> 00:31:39,800
them in that directory and from there on

00:31:37,459 --> 00:31:43,280
you're going to be able to refer to them

00:31:39,800 --> 00:31:45,490
your answer board tasks and copy them

00:31:43,280 --> 00:31:47,660
over do whatever you want with it

00:31:45,490 --> 00:31:49,790
similarly we get a templates directory

00:31:47,660 --> 00:31:51,980
which is going to be default look up

00:31:49,790 --> 00:32:00,590
directory for ansibles template module

00:31:51,980 --> 00:32:02,270
and so we got our tasks file again I

00:32:00,590 --> 00:32:04,490
omitted most of this it's just going to

00:32:02,270 --> 00:32:07,850
install some build application

00:32:04,490 --> 00:32:13,040
downloaded start it up slightly more

00:32:07,850 --> 00:32:15,980
interesting is this defaults file it is

00:32:13,040 --> 00:32:19,490
usually nice to make your roles is easy

00:32:15,980 --> 00:32:21,950
to use and requiring as little mandatory

00:32:19,490 --> 00:32:24,260
configuration as possible and roll

00:32:21,950 --> 00:32:26,210
defaults can help you with that say this

00:32:24,260 --> 00:32:27,800
application usually runs in bought 5,000

00:32:26,210 --> 00:32:31,490
so that's what we're going Freud as a

00:32:27,800 --> 00:32:33,440
default but every use of our role is

00:32:31,490 --> 00:32:35,990
still going to be able to overwrite this

00:32:33,440 --> 00:32:38,660
and say may I want to run five of these

00:32:35,990 --> 00:32:43,850
on one machine so condo run on the same

00:32:38,660 --> 00:32:46,790
port so it can overwrite that and here's

00:32:43,850 --> 00:32:49,070
my favorite feature rules which is

00:32:46,790 --> 00:32:53,270
dependencies you can do a couple of more

00:32:49,070 --> 00:32:56,570
things in this matter file but the one I

00:32:53,270 --> 00:32:58,910
use the most are dependencies pick

00:32:56,570 --> 00:33:01,430
holders of pearl application so it needs

00:32:58,910 --> 00:33:04,220
pearl installed and it's also very picky

00:33:01,430 --> 00:33:08,600
about what version it once so what we

00:33:04,220 --> 00:33:10,940
can do it rather than we can do is just

00:33:08,600 --> 00:33:16,010
include the pearl roll and every time

00:33:10,940 --> 00:33:18,050
ansible tries to deploy um picard

00:33:16,010 --> 00:33:26,660
anywhere it's also going to deploy pearl

00:33:18,050 --> 00:33:30,040
before it even gets there yes J I didn't

00:33:26,660 --> 00:33:30,040
understand the question can you try him

00:33:41,830 --> 00:33:48,200
so this isn't like a dependency to a

00:33:45,590 --> 00:33:51,200
package or anything it's a dependency to

00:33:48,200 --> 00:33:53,660
another roll so in this case we would

00:33:51,200 --> 00:33:55,820
have in a Ralts directory you would have

00:33:53,660 --> 00:33:58,400
a pearl directory which contained an

00:33:55,820 --> 00:34:02,030
ansible role that knew everything about

00:33:58,400 --> 00:34:03,590
how to set up pearl whichever way you

00:34:02,030 --> 00:34:05,750
might want to do that bead with pearl

00:34:03,590 --> 00:34:07,130
brew or wherever and really all we're

00:34:05,750 --> 00:34:09,590
doing is we're calling into this other

00:34:07,130 --> 00:34:12,020
ansible role and we're passing arguments

00:34:09,590 --> 00:34:14,540
to it like this version and what this

00:34:12,020 --> 00:34:17,300
ansible role is going to do with what

00:34:14,540 --> 00:34:19,610
you ask of it it's like up to it you can

00:34:17,300 --> 00:34:21,590
ride a role that sets up all your

00:34:19,610 --> 00:34:23,660
package dependencies that exactly the

00:34:21,590 --> 00:34:25,550
right versions and whatnot like this

00:34:23,660 --> 00:34:29,179
version key isn't part of ansible or

00:34:25,550 --> 00:34:32,210
anything it's just just a parameter that

00:34:29,179 --> 00:34:37,429
gets passed to the role that does that

00:34:32,210 --> 00:34:40,450
answer the question yes if piccata needs

00:34:37,429 --> 00:34:49,419
a Dharma then you go to the Picard

00:34:40,450 --> 00:34:52,970
metafile and say I depend on a Dharma ok

00:34:49,419 --> 00:34:54,470
so rules are super cool and there's a

00:34:52,970 --> 00:34:57,350
lot of them out there on the internet

00:34:54,470 --> 00:35:02,900
there's ansible galaxy which is

00:34:57,350 --> 00:35:05,480
essentially ansibles Sipan lots of roles

00:35:02,900 --> 00:35:06,980
for all kinds of stuff I highly

00:35:05,480 --> 00:35:10,250
recommend checking there before you

00:35:06,980 --> 00:35:12,410
start writing anything yourself because

00:35:10,250 --> 00:35:15,220
usually that code is going to be already

00:35:12,410 --> 00:35:17,870
somewhat battle-tested and you know

00:35:15,220 --> 00:35:23,480
probably give you more options than what

00:35:17,870 --> 00:35:26,720
you would have come up with yourself so

00:35:23,480 --> 00:35:30,590
we've used a whole bunch of modules so

00:35:26,720 --> 00:35:34,550
far we've seen copy and abdin Yaman

00:35:30,590 --> 00:35:37,970
command and all of that ansible ships

00:35:34,550 --> 00:35:40,580
with a whole bunch of those some very

00:35:37,970 --> 00:35:46,930
common ones some of which i think are

00:35:40,580 --> 00:35:46,930
kind of is etheric but in case you

00:35:46,970 --> 00:35:53,030
have trouble finding the right module to

00:35:50,510 --> 00:35:56,390
do what you want to do or maybe you just

00:35:53,030 --> 00:35:58,700
find it a little bit bothersome to do a

00:35:56,390 --> 00:36:00,890
complex task in this weird yeah more

00:35:58,700 --> 00:36:02,599
programming language and you'd rather

00:36:00,890 --> 00:36:05,599
use the proper programming language for

00:36:02,599 --> 00:36:10,430
it in that case you can write your own

00:36:05,599 --> 00:36:13,099
modules these modules they're basically

00:36:10,430 --> 00:36:15,470
standalone programs that are going to be

00:36:13,099 --> 00:36:19,480
transferred to the systems that you're

00:36:15,470 --> 00:36:21,200
running your automation codon and

00:36:19,480 --> 00:36:23,090
they're going to get called with the

00:36:21,200 --> 00:36:24,980
parameters do they work there and report

00:36:23,090 --> 00:36:27,320
back to ansible about what they did and

00:36:24,980 --> 00:36:32,840
the calling convention is pretty simple

00:36:27,320 --> 00:36:35,570
you just get a chunk of Jason with all

00:36:32,840 --> 00:36:38,690
the the options have been used in the

00:36:35,570 --> 00:36:41,180
invocation of the module in the playbook

00:36:38,690 --> 00:36:43,640
then you do your thing and then you emit

00:36:41,180 --> 00:36:46,160
a bunch of Jason to tell ansible about

00:36:43,640 --> 00:36:50,060
what happened so whether or not you

00:36:46,160 --> 00:36:53,089
succeeded if you actually had to change

00:36:50,060 --> 00:36:55,970
something or was just in no up or you

00:36:53,089 --> 00:36:58,940
can even return like any data structure

00:36:55,970 --> 00:37:01,430
as long as you can represent it as Jason

00:36:58,940 --> 00:37:03,859
and then use that return data structure

00:37:01,430 --> 00:37:11,089
further through the use of ansible

00:37:03,859 --> 00:37:15,859
variables and uh yeah I guess I'm going

00:37:11,089 --> 00:37:18,320
to wrap up I highly recommend using the

00:37:15,859 --> 00:37:20,270
little ansible dock utility it's pretty

00:37:18,320 --> 00:37:23,599
much like pearl dock and I'll find it a

00:37:20,270 --> 00:37:25,220
lot easier to use than the online

00:37:23,599 --> 00:37:28,280
documentation and docks that answer will

00:37:25,220 --> 00:37:30,109
become the docks they'll point you and

00:37:28,280 --> 00:37:31,910
it's like the same documentation I just

00:37:30,109 --> 00:37:35,210
financeable doc a little more accessible

00:37:31,910 --> 00:37:39,760
and we already talked about ansibles

00:37:35,210 --> 00:37:42,349
Sipan it's called ansible galaxy and

00:37:39,760 --> 00:37:47,410
that was ansible for programmers are

00:37:42,349 --> 00:37:47,410
there any questions over there please

00:37:52,740 --> 00:38:01,210
um that there's the thing that that does

00:37:57,910 --> 00:38:03,580
a thing if you don't download it like

00:38:01,210 --> 00:38:06,670
manually and copy stuff oh yeah you can

00:38:03,580 --> 00:38:08,500
actually install it I I think the common

00:38:06,670 --> 00:38:12,030
way that people use it as they use some

00:38:08,500 --> 00:38:15,100
i forgot the command I'm sorry but it's

00:38:12,030 --> 00:38:16,810
yeah thank you yeah use that and I think

00:38:15,100 --> 00:38:19,090
it downloads things unpacks it and like

00:38:16,810 --> 00:38:22,619
puts it in a particular path in your

00:38:19,090 --> 00:38:22,619
current directory and you may choose to

00:38:23,850 --> 00:38:29,619
yeah and you may choose to actually

00:38:27,640 --> 00:38:31,570
check in all those modules that you got

00:38:29,619 --> 00:38:34,869
from ansible galaxy into your source

00:38:31,570 --> 00:38:40,690
control system or not but it's up to you

00:38:34,869 --> 00:38:44,160
thank you for that anything else nope

00:38:40,690 --> 00:38:44,160
well thank you very much

00:38:54,670 --> 00:38:56,730

YouTube URL: https://www.youtube.com/watch?v=x3ZbYQSGkBY


