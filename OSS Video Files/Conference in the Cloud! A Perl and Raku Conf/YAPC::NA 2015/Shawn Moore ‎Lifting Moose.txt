Title: Shawn Moore â€ŽLifting Moose
Publication date: 2015-06-16
Playlist: YAPC::NA 2015
Description: 
	
Captions: 
	00:00:00,319 --> 00:00:07,319
hi I'm Sean this is lifting moose it's

00:00:03,870 --> 00:00:10,130
not should I keep talking it's a little

00:00:07,319 --> 00:00:11,910
bit feedback okay this is not pearl six

00:00:10,130 --> 00:00:16,199
there's a little bit confusion about

00:00:11,910 --> 00:00:17,820
what term is what you put all right so

00:00:16,199 --> 00:00:20,039
this talk is about object-oriented

00:00:17,820 --> 00:00:21,330
programming and one of the most

00:00:20,039 --> 00:00:25,019
important things about object-oriented

00:00:21,330 --> 00:00:27,180
programming is that you have behavior

00:00:25,019 --> 00:00:29,670
which is like message passing or method

00:00:27,180 --> 00:00:31,679
calls you have state which is attributes

00:00:29,670 --> 00:00:33,750
or properties and you have identity

00:00:31,679 --> 00:00:35,460
which means that two objects with the

00:00:33,750 --> 00:00:39,450
same values for all their properties are

00:00:35,460 --> 00:00:40,950
still considered distinct objects so

00:00:39,450 --> 00:00:43,410
every object oriented programming

00:00:40,950 --> 00:00:48,539
language provides these otherwise it

00:00:43,410 --> 00:00:51,329
wouldn't be object-oriented but these

00:00:48,539 --> 00:00:53,489
are like the core opie ideas but then

00:00:51,329 --> 00:00:56,010
there's the details and there's so many

00:00:53,489 --> 00:00:58,520
details right like every program and

00:00:56,010 --> 00:01:01,219
language provides a unique take on opie

00:00:58,520 --> 00:01:03,510
some class are some languages provide

00:01:01,219 --> 00:01:06,479
inheritance via class system others

00:01:03,510 --> 00:01:08,540
provided via prototyping some have final

00:01:06,479 --> 00:01:10,979
declaration some have dynamic dispatch

00:01:08,540 --> 00:01:12,600
somehow generic methods it's almost like

00:01:10,979 --> 00:01:14,850
you could pick any mix and match if

00:01:12,600 --> 00:01:19,290
features that you want and there'd be a

00:01:14,850 --> 00:01:20,759
language there some languages languages

00:01:19,290 --> 00:01:22,560
even exist in the places where it

00:01:20,759 --> 00:01:24,450
doesn't quite make sense for that set of

00:01:22,560 --> 00:01:27,630
features we don't talk about those very

00:01:24,450 --> 00:01:29,220
much so we could even treat these

00:01:27,630 --> 00:01:31,590
languages as like points on a plane

00:01:29,220 --> 00:01:33,299
where the position is determined by the

00:01:31,590 --> 00:01:37,970
set of opie trade-offs that that

00:01:33,299 --> 00:01:39,720
language makes so pearls there obviously

00:01:37,970 --> 00:01:41,189
and then there's a bunch of other

00:01:39,720 --> 00:01:44,340
languages that are more or less

00:01:41,189 --> 00:01:45,689
different from other languages by the

00:01:44,340 --> 00:01:48,360
way don't take this chart to literally

00:01:45,689 --> 00:01:54,030
it's just demonstrative um but I want to

00:01:48,360 --> 00:01:59,009
focus on this side so I'm going to zoom

00:01:54,030 --> 00:02:00,990
in very not very nice transition sorry

00:01:59,009 --> 00:02:02,729
but all these little usual suspects are

00:02:00,990 --> 00:02:05,399
here none of these languages actually

00:02:02,729 --> 00:02:06,750
provide the same kind of a whoopee for

00:02:05,399 --> 00:02:08,910
example Ruby is different from pearl

00:02:06,750 --> 00:02:12,060
metal lets you subclass built-in types

00:02:08,910 --> 00:02:13,730
like string array in Python you don't

00:02:12,060 --> 00:02:15,630
explicitly bless references

00:02:13,730 --> 00:02:18,240
but otherwise these are all kind of

00:02:15,630 --> 00:02:19,980
similar to Pearl they're all kind of

00:02:18,240 --> 00:02:22,980
dynamic they're all more or less

00:02:19,980 --> 00:02:25,440
hash-based weakly typed so that's why

00:02:22,980 --> 00:02:26,910
they're in this quadrant together but

00:02:25,440 --> 00:02:28,740
you might be thinking this is pearl

00:02:26,910 --> 00:02:30,510
there's more than one way to do it the

00:02:28,740 --> 00:02:34,080
way i right opie pearl is different from

00:02:30,510 --> 00:02:37,880
the way you write olp pearl and inky

00:02:34,080 --> 00:02:39,810
rights Oh ppro like nobody else but

00:02:37,880 --> 00:02:42,480
spiff you may not have worked out but

00:02:39,810 --> 00:02:45,270
don't hate on in game is a good idea

00:02:42,480 --> 00:02:46,680
just before its time so you might be

00:02:45,270 --> 00:02:50,070
wondering this talk is about moose where

00:02:46,680 --> 00:02:51,660
is that on the chart moose as exists out

00:02:50,070 --> 00:02:53,490
of the boxes there but there's something

00:02:51,660 --> 00:02:54,810
more going on moose is flexible and

00:02:53,490 --> 00:02:57,930
extensible in ways that these other

00:02:54,810 --> 00:02:59,310
systems are not in fact you can kind of

00:02:57,930 --> 00:03:00,330
extend moose to be more like any of

00:02:59,310 --> 00:03:03,630
these other systems and they were

00:03:00,330 --> 00:03:06,650
between so i wouldn't say moose is a

00:03:03,630 --> 00:03:10,680
point on this chart is more of a region

00:03:06,650 --> 00:03:12,030
so based on the trade-offs you make you

00:03:10,680 --> 00:03:13,800
can kind of find the right point in the

00:03:12,030 --> 00:03:15,720
region that you want and that's what

00:03:13,800 --> 00:03:18,990
this talk is about but I don't like that

00:03:15,720 --> 00:03:23,060
shape that's kind of boring it's not

00:03:18,990 --> 00:03:25,830
very mu Z so this is the region of moose

00:03:23,060 --> 00:03:27,720
so for example there's inside out pearl

00:03:25,830 --> 00:03:30,840
which lets you store properties outside

00:03:27,720 --> 00:03:33,840
of the object and move sites inside out

00:03:30,840 --> 00:03:36,510
is a module that lets you have that with

00:03:33,840 --> 00:03:38,280
moose so that's why inside objects is

00:03:36,510 --> 00:03:43,230
inside the region because you can kind

00:03:38,280 --> 00:03:44,580
of move towards that point and you can

00:03:43,230 --> 00:03:47,400
tweak that to be a point that's not

00:03:44,580 --> 00:03:50,760
quite on that same point so for example

00:03:47,400 --> 00:03:53,520
you might store properties by something

00:03:50,760 --> 00:03:54,930
other than object address so like some

00:03:53,520 --> 00:03:56,370
kind of application specific identifiers

00:03:54,930 --> 00:04:00,510
so you can kind of move that point

00:03:56,370 --> 00:04:01,890
wherever you want in that space and this

00:04:00,510 --> 00:04:04,110
is kind of the whole point of the talk

00:04:01,890 --> 00:04:07,530
with moose you can move to any point in

00:04:04,110 --> 00:04:09,960
this region so if I shed this point

00:04:07,530 --> 00:04:11,820
region metaphor a little bit so you can

00:04:09,960 --> 00:04:15,690
kind of select exactly which features of

00:04:11,820 --> 00:04:17,220
opie you want with moose and you don't

00:04:15,690 --> 00:04:19,920
even have to leave pearl you can have it

00:04:17,220 --> 00:04:23,400
in Perl and you can interoperate with

00:04:19,920 --> 00:04:25,830
other Sipan code because it's all

00:04:23,400 --> 00:04:26,760
mediated through method calls right so

00:04:25,830 --> 00:04:28,950
this is the true power

00:04:26,760 --> 00:04:33,750
moves this is what keeps me writing

00:04:28,950 --> 00:04:36,270
pearl it's not has its being able to

00:04:33,750 --> 00:04:41,400
select what OPI want and that's also why

00:04:36,270 --> 00:04:50,340
i don't use mouse or mo or move some

00:04:41,400 --> 00:04:52,320
jerk it was me so mouse is a point on

00:04:50,340 --> 00:04:56,580
this chart moose is a region that's why

00:04:52,320 --> 00:04:58,020
i like moose so moose pulls this off by

00:04:56,580 --> 00:04:59,480
doing something so simple you probably

00:04:58,020 --> 00:05:01,820
wouldn't even expect that it could work

00:04:59,480 --> 00:05:04,260
moose itself is implemented using

00:05:01,820 --> 00:05:06,030
object-oriented techniques so there are

00:05:04,260 --> 00:05:07,380
things like instances and classes and

00:05:06,030 --> 00:05:10,410
methods and attributes these are all

00:05:07,380 --> 00:05:13,410
familiar the other systems i mentioned

00:05:10,410 --> 00:05:14,940
like standard pearl LP are implemented

00:05:13,410 --> 00:05:18,000
with things like hash tables and see

00:05:14,940 --> 00:05:21,570
functions and structs pointers and glob

00:05:18,000 --> 00:05:23,610
assignments which is not very extensible

00:05:21,570 --> 00:05:27,090
right we have over p because it's very

00:05:23,610 --> 00:05:29,760
flexible and extensible so in moose you

00:05:27,090 --> 00:05:32,310
can use any Opie technique to extend

00:05:29,760 --> 00:05:34,050
moose but those other systems are kind

00:05:32,310 --> 00:05:38,100
of a single artifact that you can't

00:05:34,050 --> 00:05:40,380
really tweaked so that's what you get

00:05:38,100 --> 00:05:41,760
with moose with those other systems you

00:05:40,380 --> 00:05:45,510
get what you get and you don't throw a

00:05:41,760 --> 00:05:47,280
fit so because moose is olp it's very

00:05:45,510 --> 00:05:49,380
familiar to extend out you do it in two

00:05:47,280 --> 00:05:51,060
parts first you write the extension and

00:05:49,380 --> 00:05:53,940
the extension can usually be a role

00:05:51,060 --> 00:05:55,470
which makes it very clean it's okay if

00:05:53,940 --> 00:05:59,250
you haven't seen roles before the

00:05:55,470 --> 00:06:00,780
examples still be clear I hope so in

00:05:59,250 --> 00:06:03,030
this example I looked at mooses

00:06:00,780 --> 00:06:05,040
documentation or its code depending on

00:06:03,030 --> 00:06:07,680
you know what I'm doing and I figured

00:06:05,040 --> 00:06:09,780
out that new underscore object is the

00:06:07,680 --> 00:06:12,870
method that I care about so in this case

00:06:09,780 --> 00:06:14,460
I want to give them an extension that

00:06:12,870 --> 00:06:16,260
kind of complains about creating new

00:06:14,460 --> 00:06:20,850
objects it's like a teenager or

00:06:16,260 --> 00:06:24,480
something so I just override this new

00:06:20,850 --> 00:06:28,620
object method in my role and then I can

00:06:24,480 --> 00:06:30,420
use it so when I use this role I get the

00:06:28,620 --> 00:06:32,790
standard moose behavior Plus this one

00:06:30,420 --> 00:06:35,550
tiny little change so it's very easy to

00:06:32,790 --> 00:06:38,220
understand and then the way we use this

00:06:35,550 --> 00:06:39,780
extension is we just tell moose about it

00:06:38,220 --> 00:06:42,810
this traits option

00:06:39,780 --> 00:06:45,690
and that's it now this is robust in

00:06:42,810 --> 00:06:47,520
modular only the person class and its

00:06:45,690 --> 00:06:49,380
subclasses will get this behavior you're

00:06:47,520 --> 00:06:51,690
not polluting other loose using classes

00:06:49,380 --> 00:06:53,700
with us so it's much better than

00:06:51,690 --> 00:06:55,169
alternatives like monkey Patrick and

00:06:53,700 --> 00:06:57,270
behind the scenes it's just saying give

00:06:55,169 --> 00:06:59,700
me a subclass of whatever class moves

00:06:57,270 --> 00:07:03,360
uses and then add the reluctant role to

00:06:59,700 --> 00:07:06,200
it easy its just oh okay you subclass

00:07:03,360 --> 00:07:09,090
like a million classes you can do this

00:07:06,200 --> 00:07:10,950
and oftentimes you don't even have to do

00:07:09,090 --> 00:07:12,900
it there are literally millions of moose

00:07:10,950 --> 00:07:15,870
extensions auntie Pam in each of these

00:07:12,900 --> 00:07:17,820
mousex modules kind of fills in or

00:07:15,870 --> 00:07:20,730
expands the space that moose can give

00:07:17,820 --> 00:07:22,140
you in that chart so a lot of times you

00:07:20,730 --> 00:07:25,620
can just skip that first step and just

00:07:22,140 --> 00:07:28,290
start using extensions so because moose

00:07:25,620 --> 00:07:30,090
is opie there are no black boxes in

00:07:28,290 --> 00:07:32,310
other words the plumbing which is like

00:07:30,090 --> 00:07:33,960
the internals in the porcelain which is

00:07:32,310 --> 00:07:35,760
like the user interface are one in the

00:07:33,960 --> 00:07:38,520
same there's nothing hidden beneath the

00:07:35,760 --> 00:07:40,500
surface if you compare it with like

00:07:38,520 --> 00:07:42,360
standard Pirlo p you can really only

00:07:40,500 --> 00:07:44,340
tweak a certain number of things but

00:07:42,360 --> 00:07:46,740
then the rest of it and see it's off

00:07:44,340 --> 00:07:48,960
limits to do so because moose is this

00:07:46,740 --> 00:07:51,419
unified model and it's a Model T already

00:07:48,960 --> 00:07:54,180
familiar with you can use the porcelain

00:07:51,419 --> 00:07:56,430
that moose provides to extend moose and

00:07:54,180 --> 00:08:00,330
by the way our porcelain is terrific as

00:07:56,430 --> 00:08:03,000
you know sometimes this leads you leads

00:08:00,330 --> 00:08:04,440
to problems though sometimes you get a

00:08:03,000 --> 00:08:06,900
plumbing problem where you're expecting

00:08:04,440 --> 00:08:08,700
a porcelain problem and like the real

00:08:06,900 --> 00:08:11,370
world is a crappy situation of being I'm

00:08:08,700 --> 00:08:15,570
sorry but this is kind of how much works

00:08:11,370 --> 00:08:18,090
it's this is why we tell people you want

00:08:15,570 --> 00:08:20,669
stack traces because the porcelain and

00:08:18,090 --> 00:08:22,350
the plumbing are one in the same so if

00:08:20,669 --> 00:08:27,530
you just get that last line of code you

00:08:22,350 --> 00:08:27,530
won't see what's going on and I'm sorry

00:08:28,370 --> 00:08:33,000
this is actually a real patent it's a

00:08:30,750 --> 00:08:36,690
method for breathing fresh air in a room

00:08:33,000 --> 00:08:38,839
filled with toxic smoke what do you

00:08:36,690 --> 00:08:38,839
think

00:08:40,440 --> 00:08:46,390
yeah I don't know where I'm going with

00:08:42,910 --> 00:08:49,090
this let's talk about it so what's this

00:08:46,390 --> 00:08:51,070
lifting does this all about it it's

00:08:49,090 --> 00:08:53,410
great that you can use the mousse

00:08:51,070 --> 00:08:55,900
extension to add multi methods or inside

00:08:53,410 --> 00:08:57,460
out objects or anything but your

00:08:55,900 --> 00:08:59,190
extensions to moose don't really need to

00:08:57,460 --> 00:09:01,630
be about object-oriented programming

00:08:59,190 --> 00:09:03,250
there are no limits your moose

00:09:01,630 --> 00:09:06,490
extensions can be domain-specific or

00:09:03,250 --> 00:09:09,010
about your application so imagine your

00:09:06,490 --> 00:09:10,210
application is a pink pill right it's

00:09:09,010 --> 00:09:12,400
sitting at the top of the stack

00:09:10,210 --> 00:09:13,810
including mousse pearl operating system

00:09:12,400 --> 00:09:15,970
what I'm proposing is that you lift

00:09:13,810 --> 00:09:18,640
moves more into your application that's

00:09:15,970 --> 00:09:22,180
I think that's not crazy right that's a

00:09:18,640 --> 00:09:23,470
little bit doable so mousse becomes more

00:09:22,180 --> 00:09:26,020
of an active participant and how you

00:09:23,470 --> 00:09:27,100
structure your application and really

00:09:26,020 --> 00:09:28,870
the reason we're doing this is because

00:09:27,100 --> 00:09:31,480
you don't want to reinvent half of moves

00:09:28,870 --> 00:09:34,960
poorly so let's let's look at a concrete

00:09:31,480 --> 00:09:36,880
example of how you might do this so the

00:09:34,960 --> 00:09:39,460
canonical examples kind of become web

00:09:36,880 --> 00:09:40,810
forms so your classes of attributes and

00:09:39,460 --> 00:09:42,490
perhaps you're writing a web form to

00:09:40,810 --> 00:09:43,960
populate those attributes here we have

00:09:42,490 --> 00:09:47,350
an email in tribute with a form field

00:09:43,960 --> 00:09:48,580
thank you so the first thing we can do

00:09:47,350 --> 00:09:49,750
is start looking at the core mousse

00:09:48,580 --> 00:09:51,970
options to see how we can make this

00:09:49,750 --> 00:09:54,310
better the first easy one is required

00:09:51,970 --> 00:09:55,690
right just inspect the attributes

00:09:54,310 --> 00:09:57,850
required property and if it's required

00:09:55,690 --> 00:10:01,960
add that little asterisk to indicate

00:09:57,850 --> 00:10:03,760
that it's required and then you can also

00:10:01,960 --> 00:10:04,900
hook into the form validation code to

00:10:03,760 --> 00:10:08,260
display an error if they forget to

00:10:04,900 --> 00:10:09,960
provide an email and you can do this by

00:10:08,260 --> 00:10:12,160
inspecting the quad attribute and

00:10:09,960 --> 00:10:14,680
remember that mousse is implemented with

00:10:12,160 --> 00:10:17,650
opee so the way you do stuff is with

00:10:14,680 --> 00:10:18,820
method calls so first thing you got to

00:10:17,650 --> 00:10:20,410
do is get the metaclass that's what

00:10:18,820 --> 00:10:22,060
arrow meta does and you might be

00:10:20,410 --> 00:10:25,990
familiar with that whenever you use

00:10:22,060 --> 00:10:28,150
package underscore arrow meta arrow make

00:10:25,990 --> 00:10:31,240
immutable that's also doing stuff in the

00:10:28,150 --> 00:10:33,280
metal object protocol so let's thank you

00:10:31,240 --> 00:10:34,450
bro it's not that complicated it's just

00:10:33,280 --> 00:10:38,080
an object you're just calling a method

00:10:34,450 --> 00:10:39,880
and then this metal object represents

00:10:38,080 --> 00:10:41,470
your class so classes have attributes

00:10:39,880 --> 00:10:43,900
right so one of the things you can do is

00:10:41,470 --> 00:10:46,320
pull out an attribute and the attribute

00:10:43,900 --> 00:10:48,640
is an object and

00:10:46,320 --> 00:10:50,650
that object knows about this email

00:10:48,640 --> 00:10:52,810
attribute so it notes about things like

00:10:50,650 --> 00:10:55,090
required so you can just ask it is it

00:10:52,810 --> 00:10:57,070
required this will return your email

00:10:55,090 --> 00:10:58,150
based on whether that email attribute is

00:10:57,070 --> 00:11:01,120
required and then you can put that

00:10:58,150 --> 00:11:04,330
little star and add to your foreign

00:11:01,120 --> 00:11:05,500
validation so that's required there's a

00:11:04,330 --> 00:11:08,350
bunch of other moves options that you

00:11:05,500 --> 00:11:10,570
might integrate with your form so for

00:11:08,350 --> 00:11:13,930
example type constraint here we use an

00:11:10,570 --> 00:11:16,750
email type constraint and that way the

00:11:13,930 --> 00:11:18,610
form building code can inspect your type

00:11:16,750 --> 00:11:20,200
constraint and say oh it's email I'll

00:11:18,610 --> 00:11:22,150
use input type equals email instead of

00:11:20,200 --> 00:11:23,470
input type equals text that way the

00:11:22,150 --> 00:11:26,320
browser can do some of the validation

00:11:23,470 --> 00:11:28,480
give you a nice keyboard on mobile and

00:11:26,320 --> 00:11:30,250
of course you do you know the standard

00:11:28,480 --> 00:11:32,650
email validation which is hopefully just

00:11:30,250 --> 00:11:36,850
as simple as like a reg ex it matches

00:11:32,650 --> 00:11:38,110
dot at dot or something yeah it's just

00:11:36,850 --> 00:11:41,290
inspecting the second straight and then

00:11:38,110 --> 00:11:42,970
doing it moose has a documentation

00:11:41,290 --> 00:11:44,950
attribute lets you associate a string

00:11:42,970 --> 00:11:46,930
with that attribute it isn't really used

00:11:44,950 --> 00:11:48,820
by the core code base at all but you can

00:11:46,930 --> 00:11:50,530
use it here to display some help text on

00:11:48,820 --> 00:11:52,990
the form so here we're just warning or

00:11:50,530 --> 00:11:55,750
you know politely time user we're not

00:11:52,990 --> 00:11:57,220
gonna spam you don't worry um that's not

00:11:55,750 --> 00:12:00,070
bad but I think we can make it a little

00:11:57,220 --> 00:12:01,960
bit better so for example the email

00:12:00,070 --> 00:12:04,810
label is all lowercase it's kinda ugly

00:12:01,960 --> 00:12:07,120
it's kind of programming strikes me the

00:12:04,810 --> 00:12:08,890
sloppy and also it would be nice if we

00:12:07,120 --> 00:12:11,260
had a little placeholder value that says

00:12:08,890 --> 00:12:13,840
this email address you know great out

00:12:11,260 --> 00:12:15,220
text inside the form field so we try to

00:12:13,840 --> 00:12:17,560
do that and we say Oh placeholder is

00:12:15,220 --> 00:12:19,870
email but then moves complaints that

00:12:17,560 --> 00:12:21,190
placeholder is on an option you can use

00:12:19,870 --> 00:12:23,200
which is perfectly reasonable right

00:12:21,190 --> 00:12:25,180
place holder is an HTML thing it's not

00:12:23,200 --> 00:12:27,240
an object-oriented programming thing it

00:12:25,180 --> 00:12:29,890
moose is designed for oil paint on HTML

00:12:27,240 --> 00:12:32,470
but as I mentioned this talk moose is

00:12:29,890 --> 00:12:34,990
extensible so we can kind of make moose

00:12:32,470 --> 00:12:36,730
more about HTML which is what our

00:12:34,990 --> 00:12:39,940
application deals with so we're

00:12:36,730 --> 00:12:42,040
enhancing moves for our application so

00:12:39,940 --> 00:12:44,200
how might we do this well first we

00:12:42,040 --> 00:12:47,380
define an extension here's a perfectly

00:12:44,200 --> 00:12:49,360
complete extension of moose this role

00:12:47,380 --> 00:12:51,400
just adds an attribute to whatever class

00:12:49,360 --> 00:12:55,000
consumes it that's all you have to do

00:12:51,400 --> 00:12:57,280
and then the second part is you just use

00:12:55,000 --> 00:12:59,040
that extension in your class so here

00:12:57,280 --> 00:13:01,380
we're using the traits option to have

00:12:59,040 --> 00:13:03,990
which basically lets you define

00:13:01,380 --> 00:13:05,940
extensions you want to use and this lets

00:13:03,990 --> 00:13:09,899
us use a placeholder attribute that we

00:13:05,940 --> 00:13:11,670
created in the role that's all so the

00:13:09,899 --> 00:13:13,980
placeholder attribute can use the full

00:13:11,670 --> 00:13:15,269
power of moose we gave it a string type

00:13:13,980 --> 00:13:16,680
constraints so if we try to pass the

00:13:15,269 --> 00:13:18,990
hash reference there it would throw an

00:13:16,680 --> 00:13:21,149
error at compile time we can make the

00:13:18,990 --> 00:13:22,769
placeholder required if that makes sense

00:13:21,149 --> 00:13:24,990
for application I don't think it

00:13:22,769 --> 00:13:26,639
wouldn't in the general case but I don't

00:13:24,990 --> 00:13:27,810
know what you're doing and you might be

00:13:26,639 --> 00:13:30,029
wondering how do we get that string

00:13:27,810 --> 00:13:32,190
email out of this out of this class

00:13:30,029 --> 00:13:34,589
right it's very similar to how we did it

00:13:32,190 --> 00:13:36,329
for required the only difference is

00:13:34,589 --> 00:13:39,259
instead of asking is required we ask for

00:13:36,329 --> 00:13:44,220
the placeholder value it's just all 0 p

00:13:39,259 --> 00:13:47,970
it's very straightforward so now we get

00:13:44,220 --> 00:13:50,100
a little placeholder in our input easy

00:13:47,970 --> 00:13:52,649
now the other problem I mentioned is the

00:13:50,100 --> 00:13:54,630
email is all lowercase in the label so

00:13:52,649 --> 00:13:56,490
we'll fix that too so we'll add this

00:13:54,630 --> 00:14:00,149
additional attribute to our field class

00:13:56,490 --> 00:14:03,350
or a field role sorry just label just

00:14:00,149 --> 00:14:08,670
need label and then in our email

00:14:03,350 --> 00:14:10,399
attribute we can use it so that's pretty

00:14:08,670 --> 00:14:12,420
good-looking form field I think and this

00:14:10,399 --> 00:14:14,760
is the full attribute with all the

00:14:12,420 --> 00:14:16,079
options we specified I don't think

00:14:14,760 --> 00:14:18,569
anything's too crazy there it's all

00:14:16,079 --> 00:14:19,889
declarative which is nice you might

00:14:18,569 --> 00:14:21,569
consider how you might implement this

00:14:19,889 --> 00:14:23,579
without moose you might have like a

00:14:21,569 --> 00:14:25,260
subroutine that returns a complicated

00:14:23,579 --> 00:14:26,790
hash reference but it's nice that it's

00:14:25,260 --> 00:14:28,829
all here in our attribute because it

00:14:26,790 --> 00:14:30,930
means we want to duplicate code for

00:14:28,829 --> 00:14:33,720
example telling moose that is required

00:14:30,930 --> 00:14:35,160
and telling the HTML form builder that

00:14:33,720 --> 00:14:37,310
it's also required there's no

00:14:35,160 --> 00:14:39,990
duplication there it's all declarative

00:14:37,310 --> 00:14:42,120
one small improvement we can clean up is

00:14:39,990 --> 00:14:44,790
probably getting rid of this I think

00:14:42,120 --> 00:14:46,410
it's a night it's okay as it is but

00:14:44,790 --> 00:14:50,040
luckily because moose has a vibrant

00:14:46,410 --> 00:14:51,990
mousex ecosystem of extensions we've

00:14:50,040 --> 00:14:53,959
built up in moose a bunch of tools to

00:14:51,990 --> 00:14:56,519
make this even easier and more automatic

00:14:53,959 --> 00:14:58,649
so instead you can create a package with

00:14:56,519 --> 00:15:00,209
all your extensions in it so this is

00:14:58,649 --> 00:15:02,819
similar to any mousex module that you

00:15:00,209 --> 00:15:05,639
use it automatically would apply the

00:15:02,819 --> 00:15:07,589
field role to all of our attributes so

00:15:05,639 --> 00:15:09,120
you know you have using has email has

00:15:07,589 --> 00:15:10,319
username has birthday all that stuff

00:15:09,120 --> 00:15:12,540
will just get that field attribute

00:15:10,319 --> 00:15:14,940
automatically I'm sorry field

00:15:12,540 --> 00:15:17,610
extension that's about as sweet as you

00:15:14,940 --> 00:15:19,410
could ask for right and of course it's

00:15:17,610 --> 00:15:20,580
not limited to just generic HTML maybe

00:15:19,410 --> 00:15:24,660
our application does different things

00:15:20,580 --> 00:15:26,610
based on mobile or desktop or tablet so

00:15:24,660 --> 00:15:29,030
whatever our applications need are we

00:15:26,610 --> 00:15:33,180
can model them inside are an attribute

00:15:29,030 --> 00:15:36,270
so of course we're not just limited to

00:15:33,180 --> 00:15:38,180
adding attributes to our attributes we

00:15:36,270 --> 00:15:40,170
can extend mooses concept of class

00:15:38,180 --> 00:15:42,060
attribute role of method instance

00:15:40,170 --> 00:15:44,460
basically any part of moose is up for

00:15:42,060 --> 00:15:46,500
grabs you can wrap method you can add

00:15:44,460 --> 00:15:48,870
attributes you can add validation you

00:15:46,500 --> 00:15:51,150
can talk to a server whatever you need

00:15:48,870 --> 00:15:54,030
to do and you can mix and match all

00:15:51,150 --> 00:15:55,920
these at extension mechanisms into one

00:15:54,030 --> 00:15:58,080
single package that you use and that's

00:15:55,920 --> 00:15:59,310
what a lot of moose X multiples do so I

00:15:58,080 --> 00:16:01,650
think mousex singleton does like a

00:15:59,310 --> 00:16:05,910
subclass of class and attribute to kind

00:16:01,650 --> 00:16:07,890
of make everything work so don't be

00:16:05,910 --> 00:16:11,850
limited by mooses default implementation

00:16:07,890 --> 00:16:14,010
the default implementation is nice but

00:16:11,850 --> 00:16:16,080
that's just the default right you can

00:16:14,010 --> 00:16:18,540
extend it however you like I want you to

00:16:16,080 --> 00:16:22,340
explore this region make it I don't know

00:16:18,540 --> 00:16:25,170
give it wings pushes edges outward

00:16:22,340 --> 00:16:27,740
that's all I have so thank you for very

00:16:25,170 --> 00:16:27,740
much for your attention

00:16:30,570 --> 00:16:45,970
so I have a few minutes for questions

00:16:32,230 --> 00:16:49,139
yes okay I'm sorry what do you mean made

00:16:45,970 --> 00:16:49,139
up program at vs real programming

00:17:13,510 --> 00:17:29,809
okay um sure more going more than one

00:17:20,150 --> 00:17:31,280
way to do it right and I mean the whole

00:17:29,809 --> 00:17:33,380
point of this talk is you can use the

00:17:31,280 --> 00:17:34,520
metal object protocol for things that

00:17:33,380 --> 00:17:38,210
aren't object-oriented programming

00:17:34,520 --> 00:17:47,720
related right so I guess yeah it works

00:17:38,210 --> 00:17:49,790
and I think it's cool right and that's

00:17:47,720 --> 00:17:52,600
also part of the modularity that moves

00:17:49,790 --> 00:17:52,600
could you which is nice

00:18:14,840 --> 00:18:18,570
yeah yeah and that's the whole point of

00:18:17,309 --> 00:18:30,289
the talking just to inform you that this

00:18:18,570 --> 00:18:30,289
exists yes yeah

00:18:31,820 --> 00:18:34,820
right

00:18:39,330 --> 00:18:46,550
this is for building of HTML form yes

00:18:47,150 --> 00:18:52,200
it's I mean this is for forms but that's

00:18:50,850 --> 00:18:53,760
just one example of how you might do

00:18:52,200 --> 00:18:55,290
this you could also do something with

00:18:53,760 --> 00:18:57,440
databases where you kind of give it a I

00:18:55,290 --> 00:19:01,820
don't know my sequel type or something

00:18:57,440 --> 00:19:04,080
or you know email handling work I mean

00:19:01,820 --> 00:19:26,100
it's all code right you could do

00:19:04,080 --> 00:19:29,670
anything you like okay yes i'ma open

00:19:26,100 --> 00:19:30,960
that up to the entire audience so is

00:19:29,670 --> 00:19:38,310
there a program language that doesn't do

00:19:30,960 --> 00:19:47,700
polymorphism with Allah p I'm sure there

00:19:38,310 --> 00:19:50,600
is I'm sure there's an example where

00:19:47,700 --> 00:19:50,600
doesn't exist

00:19:56,760 --> 00:20:00,060

YouTube URL: https://www.youtube.com/watch?v=w9HHHNVrmOs


