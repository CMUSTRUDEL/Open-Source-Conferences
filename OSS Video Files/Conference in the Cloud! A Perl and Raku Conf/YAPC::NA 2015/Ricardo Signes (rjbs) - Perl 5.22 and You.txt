Title: Ricardo Signes (rjbs) - Perl 5.22 and You
Publication date: 2015-06-16
Playlist: YAPC::NA 2015
Description: 
	Ballroom A - Little America Hotel
Captions: 
	00:05:25,060 --> 00:05:29,479
I'm gonna do an experiment today and I

00:05:27,139 --> 00:05:32,780
had to try controlling my slides with my

00:05:29,479 --> 00:05:34,720
phone I've reached I've reached the year

00:05:32,780 --> 00:05:38,990
2009 and I'm going to see what it's like

00:05:34,720 --> 00:05:43,130
okay so we're going to be talking about

00:05:38,990 --> 00:05:45,139
Pearl 522 522 is our newest release it's

00:05:43,130 --> 00:05:46,610
great and the way that our development

00:05:45,139 --> 00:05:48,860
cycle works if you're not paying

00:05:46,610 --> 00:05:50,990
attention is like this every year we've

00:05:48,860 --> 00:05:54,319
got a new stable release of pro 5 and

00:05:50,990 --> 00:05:59,620
every new release is better than the

00:05:54,319 --> 00:05:59,620
previous one I for some value of better

00:05:59,770 --> 00:06:09,229
okay it can hear me all the way the

00:06:06,560 --> 00:06:11,030
internet now every month we've got any

00:06:09,229 --> 00:06:13,159
development release and every

00:06:11,030 --> 00:06:14,569
development one is is different right

00:06:13,159 --> 00:06:16,099
right now we're making different

00:06:14,569 --> 00:06:17,150
releases we're doing development but

00:06:16,099 --> 00:06:19,610
this is what we've just released to the

00:06:17,150 --> 00:06:20,990
stable branch so I'm going to talk about

00:06:19,610 --> 00:06:22,699
what's new and that new thing you can

00:06:20,990 --> 00:06:24,409
install it's a stable branch of pearl

00:06:22,699 --> 00:06:25,370
and shouldn't break too much the first

00:06:24,409 --> 00:06:28,699
thing I want to talk about is code we

00:06:25,370 --> 00:06:30,020
ripped out so we always rip out stuff

00:06:28,699 --> 00:06:31,639
from pro we got to get rid that old

00:06:30,020 --> 00:06:33,800
crazy stuff that's left over there from

00:06:31,639 --> 00:06:36,349
who knows when so that we have room for

00:06:33,800 --> 00:06:40,130
the new crazy stuff I can't use my phone

00:06:36,349 --> 00:06:41,840
that's garbage okay so one thing we've

00:06:40,130 --> 00:06:43,340
got rid of is the sigil list style I

00:06:41,840 --> 00:06:46,330
understand they're introducing this to

00:06:43,340 --> 00:06:48,259
Perl 6 because it's the circle of life

00:06:46,330 --> 00:06:49,880
everyone should know this code this is

00:06:48,259 --> 00:06:50,990
really basic Perl 5 code you've got an

00:06:49,880 --> 00:06:53,719
array we're going to push on to it

00:06:50,990 --> 00:06:57,740
you've got keys on a hash this is all

00:06:53,719 --> 00:07:01,490
really simple stuff did you know you can

00:06:57,740 --> 00:07:04,460
write this and that means the at array

00:07:01,490 --> 00:07:11,919
or you could write this this is totally

00:07:04,460 --> 00:07:11,919
valid pearl five-point 25-22 it is gone

00:07:12,370 --> 00:07:16,419
I'm sure that you could for Pearl if you

00:07:15,010 --> 00:07:19,419
want and restore this behavior if it's

00:07:16,419 --> 00:07:21,280
vital to your operations also pretend

00:07:19,419 --> 00:07:22,780
references these are fun so you should

00:07:21,280 --> 00:07:24,639
see this code to this is pretty pretty

00:07:22,780 --> 00:07:25,720
standard pearl you've got a hash and

00:07:24,639 --> 00:07:27,340
you're pulling something out of it or

00:07:25,720 --> 00:07:28,750
you're putting something into it so

00:07:27,340 --> 00:07:31,600
instead of having your little percent

00:07:28,750 --> 00:07:33,810
you we have variable sigils so you

00:07:31,600 --> 00:07:37,389
switch to our dollar sign did you know

00:07:33,810 --> 00:07:39,910
you can write this you can treat the

00:07:37,389 --> 00:07:42,880
hash itself like it no you can't it's

00:07:39,910 --> 00:07:44,740
gone goodbye I'm very sorry now this one

00:07:42,880 --> 00:07:47,320
is a is a feature that it's not

00:07:44,740 --> 00:07:48,669
worthless anybody know what happens if

00:07:47,320 --> 00:07:52,240
you use question marks as your reg ex

00:07:48,669 --> 00:07:54,220
delimiter of course tom knows what

00:07:52,240 --> 00:07:56,830
happens is it only matches the very

00:07:54,220 --> 00:07:59,440
first time until you reset your programs

00:07:56,830 --> 00:08:00,940
mystical global state it's actually a

00:07:59,440 --> 00:08:03,880
useful feature like once a year maybe

00:08:00,940 --> 00:08:05,830
once every other year but it's not worth

00:08:03,880 --> 00:08:08,080
stealing those ? so you can't do that

00:08:05,830 --> 00:08:10,630
anymore the feature is still there you

00:08:08,080 --> 00:08:15,370
just need the M okay its one keystroke

00:08:10,630 --> 00:08:19,419
people define admiss on collections this

00:08:15,370 --> 00:08:23,680
thing do you know what these mean no you

00:08:19,419 --> 00:08:27,789
don't I do they mean your program will

00:08:23,680 --> 00:08:29,229
die okay this guy so this is just

00:08:27,789 --> 00:08:31,630
another backpack that you can put in

00:08:29,229 --> 00:08:33,669
your interpolate of strings and it's

00:08:31,630 --> 00:08:34,959
really useful it gets you the control

00:08:33,669 --> 00:08:36,700
character that you're going to name so

00:08:34,959 --> 00:08:38,760
what is what is the first ones control x

00:08:36,700 --> 00:08:42,760
anyone you know the name of control x

00:08:38,760 --> 00:08:44,320
very good yes cancel now how about

00:08:42,760 --> 00:08:47,020
control at sign this one's a little

00:08:44,320 --> 00:08:50,589
easier that's the null how about control

00:08:47,020 --> 00:08:52,510
space nobody really come on that you

00:08:50,589 --> 00:08:56,110
don't use this every day that's that's

00:08:52,510 --> 00:08:57,490
the grave accent now so we control x and

00:08:56,110 --> 00:09:00,640
we got canceled what if we control

00:08:57,490 --> 00:09:02,200
control x what's control canceled it's

00:09:00,640 --> 00:09:06,760
just x we're flipping the extra bit but

00:09:02,200 --> 00:09:10,270
what if we say what's control inverted ?

00:09:06,760 --> 00:09:11,440
i didn't know so i did what you do in

00:09:10,270 --> 00:09:14,950
these cases and you're on the debugger

00:09:11,440 --> 00:09:18,950
and you say hey tell me what i get if i

00:09:14,950 --> 00:09:22,130
get control ? and it said this

00:09:18,950 --> 00:09:23,750
and and I said okay okay well this is

00:09:22,130 --> 00:09:24,800
this is a debugger to terminal problem

00:09:23,750 --> 00:09:26,840
or something I'm not getting the key

00:09:24,800 --> 00:09:28,400
incorrectly soja I wrote this I said I

00:09:26,840 --> 00:09:30,170
want to make a string that's got a

00:09:28,400 --> 00:09:33,590
double quote and then a backslash seat

00:09:30,170 --> 00:09:35,300
and then the inverted ? okay and then

00:09:33,590 --> 00:09:37,760
the end quote and I'm going to eval it

00:09:35,300 --> 00:09:43,730
and I get the result and what's the

00:09:37,760 --> 00:09:45,920
result anybody it's a normal ? actually

00:09:43,730 --> 00:09:48,530
it's because I got to 55 and it's my

00:09:45,920 --> 00:09:50,180
terminal is weird so this is this deep

00:09:48,530 --> 00:09:52,400
mystery and when I see mysterious

00:09:50,180 --> 00:09:55,490
beautiful behaviors I like to kill them

00:09:52,400 --> 00:09:57,380
and that is what we have done your

00:09:55,490 --> 00:09:59,360
control character has to be a printable

00:09:57,380 --> 00:10:00,380
ascii character we like getting where

00:09:59,360 --> 00:10:03,470
these confusions there's another great

00:10:00,380 --> 00:10:05,180
one dollar hat H so this is where we

00:10:03,470 --> 00:10:06,950
stick what bits of strict and whippets

00:10:05,180 --> 00:10:08,510
of warnings on this that's still here

00:10:06,950 --> 00:10:10,100
but what you might not know is this

00:10:08,510 --> 00:10:14,990
variable has another name by which you

00:10:10,100 --> 00:10:16,730
can access it and it is this now this is

00:10:14,990 --> 00:10:17,780
a problem with keynote it's a little

00:10:16,730 --> 00:10:20,740
confused because what I've actually

00:10:17,780 --> 00:10:24,890
typed is a dollar sign and then ctrl H

00:10:20,740 --> 00:10:28,730
right because hat H means control age

00:10:24,890 --> 00:10:31,190
and what's ctrl H backspace right so

00:10:28,730 --> 00:10:34,460
this came up when somebody realized that

00:10:31,190 --> 00:10:38,330
if you had control hat K that was the

00:10:34,460 --> 00:10:39,740
same thing as a vertical tab and so now

00:10:38,330 --> 00:10:41,770
you're gonna have a variable name that's

00:10:39,740 --> 00:10:47,030
vertical white space and we said no

00:10:41,770 --> 00:10:50,270
they're in in Perl even in Perl there

00:10:47,030 --> 00:10:52,250
are limits you used to be able to say

00:10:50,270 --> 00:10:54,170
use Universal it's kind of pointless but

00:10:52,250 --> 00:10:55,550
you could say it and if you are a

00:10:54,170 --> 00:11:00,020
horrible horrible person you could

00:10:55,550 --> 00:11:02,180
import is a no you're done we got rid of

00:11:00,020 --> 00:11:03,950
some old modules module build still on

00:11:02,180 --> 00:11:07,520
the cpn but no longer ship to the core

00:11:03,950 --> 00:11:09,880
and a moment of silence please for CGI

00:11:07,520 --> 00:11:09,880
p.m.

00:11:10,329 --> 00:11:22,390
that's not silence CGI p.m. it served

00:11:16,070 --> 00:11:26,360
you serve as well you will um well you

00:11:22,390 --> 00:11:28,070
okay we've also tried to make some

00:11:26,360 --> 00:11:29,630
changes to the pro/5 porters community

00:11:28,070 --> 00:11:33,160
we've instituted a standard of conduct

00:11:29,630 --> 00:11:33,160
I'm not going to say a lot about it now

00:11:34,510 --> 00:11:38,930
the standard of conduct that we have on

00:11:36,829 --> 00:11:43,459
profile Porter's is very simple it's be

00:11:38,930 --> 00:11:45,320
civil or or please go away we time will

00:11:43,459 --> 00:11:47,420
tell how effective this is I feel it's

00:11:45,320 --> 00:11:49,550
been good but we just don't want people

00:11:47,420 --> 00:11:52,010
yelling at each other you can argue just

00:11:49,550 --> 00:11:53,360
you know lay off okay but that's that's

00:11:52,010 --> 00:11:54,560
that's stuff we were getting rid of what

00:11:53,360 --> 00:11:56,779
are we adding to pearl because that's

00:11:54,560 --> 00:11:59,029
what we're here we want more more pearl

00:11:56,779 --> 00:12:00,500
okay file handles file handles are great

00:11:59,029 --> 00:12:02,170
you need them otherwise your program

00:12:00,500 --> 00:12:04,579
just gets warm up your computer warm

00:12:02,170 --> 00:12:06,890
here's a very simple program we read

00:12:04,579 --> 00:12:08,329
stuff and we print if it's awesome so

00:12:06,890 --> 00:12:10,550
how do what are we reading there there's

00:12:08,329 --> 00:12:13,310
no file handle we're reading the magic

00:12:10,550 --> 00:12:16,370
thingy so if we send some input into the

00:12:13,310 --> 00:12:18,199
programs that in or standard in if you

00:12:16,370 --> 00:12:20,149
prefer it's going to read those lines

00:12:18,199 --> 00:12:22,190
but if we run the program with file

00:12:20,149 --> 00:12:24,350
names it's going to read each file in

00:12:22,190 --> 00:12:27,199
turn and that's great it's equivalent to

00:12:24,350 --> 00:12:29,510
this as long as you've still got an

00:12:27,199 --> 00:12:31,160
argument to read this is if we've got

00:12:29,510 --> 00:12:33,410
file names as long as you've still got

00:12:31,160 --> 00:12:35,899
an argument to read open it and then

00:12:33,410 --> 00:12:37,760
read lines from it right totally simple

00:12:35,899 --> 00:12:40,430
makes total sense the only problem is

00:12:37,760 --> 00:12:43,610
this what's the problem with this guy to

00:12:40,430 --> 00:12:50,360
argh open to argument open means that if

00:12:43,610 --> 00:12:55,339
you do this it opens a pipe from RM rfv

00:12:50,360 --> 00:12:57,019
and you are sad so that that can be

00:12:55,339 --> 00:12:58,310
useful right so we're not killing that

00:12:57,019 --> 00:13:00,829
this is not the code we're getting rid

00:12:58,310 --> 00:13:02,510
of because this can be a feature but we

00:13:00,829 --> 00:13:06,290
don't want it to be a feature you have

00:13:02,510 --> 00:13:09,680
to use but we've added a double diamond

00:13:06,290 --> 00:13:12,260
operator double diamond is exactly like

00:13:09,680 --> 00:13:13,730
diamond but when it opens a file it uses

00:13:12,260 --> 00:13:15,860
three are effectively uses three are

00:13:13,730 --> 00:13:18,740
gopen there's no magic on the file name

00:13:15,860 --> 00:13:20,270
it's great okay this guy another semi

00:13:18,740 --> 00:13:21,600
magical form of open it's still three

00:13:20,270 --> 00:13:23,279
arguments this is for open

00:13:21,600 --> 00:13:24,420
a pipe or what you see we've done is the

00:13:23,279 --> 00:13:26,550
program is at the end and then the

00:13:24,420 --> 00:13:29,279
arguments now this is not new this has

00:13:26,550 --> 00:13:32,000
been there for a long time unless you're

00:13:29,279 --> 00:13:36,029
on Windows now this works on Windows

00:13:32,000 --> 00:13:38,579
fantastic okay implicit closing of file

00:13:36,029 --> 00:13:40,680
handles this for me was a big win I'm

00:13:38,579 --> 00:13:43,470
super happy so this is this is nothing

00:13:40,680 --> 00:13:45,959
special we're going to open a file

00:13:43,470 --> 00:13:48,060
handle and print stuff to it and

00:13:45,959 --> 00:13:50,160
everyone will tell you you need to use

00:13:48,060 --> 00:13:51,600
my dollar fh or my something for your

00:13:50,160 --> 00:13:53,160
file handles and there's a couple

00:13:51,600 --> 00:13:55,589
reasons and one of the big reasons is

00:13:53,160 --> 00:13:58,319
that if you do this and you put your

00:13:55,589 --> 00:14:00,779
code in a block then at the end of the

00:13:58,319 --> 00:14:02,610
block if the file handle is implicitly

00:14:00,779 --> 00:14:03,990
closed and it goes away and you don't

00:14:02,610 --> 00:14:07,079
have to account for it and isn't that

00:14:03,990 --> 00:14:08,730
great that's kind of great I mean you're

00:14:07,079 --> 00:14:10,019
not gonna leak file descriptors but

00:14:08,730 --> 00:14:12,149
what's going to happen is if they close

00:14:10,019 --> 00:14:14,180
the file but the disk was full and it

00:14:12,149 --> 00:14:16,980
can't flush the buffers so close fails

00:14:14,180 --> 00:14:19,829
silently and you don't realize you just

00:14:16,980 --> 00:14:21,300
lost all your data but at least you

00:14:19,829 --> 00:14:23,940
didn't lose your file descriptors you

00:14:21,300 --> 00:14:25,529
didn't run out of those huh so what

00:14:23,940 --> 00:14:27,209
happens now is you still get the

00:14:25,529 --> 00:14:29,670
implicit clothes and it can still fail

00:14:27,209 --> 00:14:31,050
but you will get a warning it's going to

00:14:29,670 --> 00:14:33,810
say hey I was just closing this file

00:14:31,050 --> 00:14:36,899
handle for you and it didn't work and

00:14:33,810 --> 00:14:39,089
you can fatal eyes that warning and say

00:14:36,899 --> 00:14:41,850
if you get any i/o warn our warnings

00:14:39,089 --> 00:14:44,040
from this block their fatal now we I'd

00:14:41,850 --> 00:14:45,839
like to make this finer grained possibly

00:14:44,040 --> 00:14:48,959
have auto die turn this on but this is

00:14:45,839 --> 00:14:50,939
like a big big improvement on all these

00:14:48,959 --> 00:14:52,860
programs that are losing data once in a

00:14:50,939 --> 00:14:54,149
while you never realize it okay enough

00:14:52,860 --> 00:14:58,500
for file handles let's talk about regex

00:14:54,149 --> 00:15:01,319
red X are great but first establish some

00:14:58,500 --> 00:15:05,160
boundaries and what I mean our word

00:15:01,319 --> 00:15:06,120
boundaries so backslash be back cell

00:15:05,160 --> 00:15:06,899
should be is a funny one because it

00:15:06,120 --> 00:15:08,399
means different things in different

00:15:06,899 --> 00:15:09,839
places but in our red jets we're going

00:15:08,399 --> 00:15:12,870
to talk about it meaning word boundaries

00:15:09,839 --> 00:15:14,970
so very often misunderstood thing

00:15:12,870 --> 00:15:17,279
because people think that a word

00:15:14,970 --> 00:15:21,880
boundary would be a boundary between

00:15:17,279 --> 00:15:24,520
words no no no

00:15:21,880 --> 00:15:26,140
so we're going to take the sentence and

00:15:24,520 --> 00:15:28,000
we're going to split it blues this this

00:15:26,140 --> 00:15:31,980
line and we're going to split it on word

00:15:28,000 --> 00:15:35,590
boundary backslash be here's what we get

00:15:31,980 --> 00:15:39,730
it's not so bad but why are we splitting

00:15:35,590 --> 00:15:41,650
up don't into doan ' and tea and why are

00:15:39,730 --> 00:15:44,680
we splitting up it's and it's it's a

00:15:41,650 --> 00:15:46,120
little weird now this is sort of a naive

00:15:44,680 --> 00:15:48,490
implementation of splitting up words and

00:15:46,120 --> 00:15:50,110
unicode as is often the case has given

00:15:48,490 --> 00:15:53,710
us a different naive way of splitting up

00:15:50,110 --> 00:15:56,190
words which happens to be superior in

00:15:53,710 --> 00:15:59,170
most cases and you get it now like this

00:15:56,190 --> 00:16:02,880
what kind of boundary a word boundary

00:15:59,170 --> 00:16:07,930
and if you split it now you get this

00:16:02,880 --> 00:16:09,700
yeah it's pretty good now this slide is

00:16:07,930 --> 00:16:11,770
actually a lie I just tricked you into a

00:16:09,700 --> 00:16:13,300
plotting because what you actually get

00:16:11,770 --> 00:16:14,710
is this you get something like these

00:16:13,300 --> 00:16:17,680
spaces are getting split but you know

00:16:14,710 --> 00:16:19,570
what that's okay because you're getting

00:16:17,680 --> 00:16:21,100
some extra spaces but all your words are

00:16:19,570 --> 00:16:22,530
still words there's another kind of

00:16:21,100 --> 00:16:24,760
boundary you get a sentence boundary

00:16:22,530 --> 00:16:28,360
which is pretty cool which is going to

00:16:24,760 --> 00:16:29,920
split like this now you're very clever

00:16:28,360 --> 00:16:32,740
not to applaud because i am tricking you

00:16:29,920 --> 00:16:34,630
again this does not actually work and I

00:16:32,740 --> 00:16:36,070
we haven't gotten quite to the bottom of

00:16:34,630 --> 00:16:41,530
whether it should or not what you have

00:16:36,070 --> 00:16:42,850
to write is this okay okay but but you

00:16:41,530 --> 00:16:44,470
can get this behavior other ways and

00:16:42,850 --> 00:16:45,850
that the code is there to get you access

00:16:44,470 --> 00:16:47,650
to the Unicode sentence boundary

00:16:45,850 --> 00:16:49,300
algorithm which is it really is a start

00:16:47,650 --> 00:16:52,240
there's another guide that graphene

00:16:49,300 --> 00:16:53,770
cluster boundary so let's split this

00:16:52,240 --> 00:17:01,540
sentence on graphene cluster boundaries

00:16:53,770 --> 00:17:02,980
you ready okay why would I use this well

00:17:01,540 --> 00:17:04,120
this is not stepping in for word

00:17:02,980 --> 00:17:05,589
boundaries this is stepping in for

00:17:04,120 --> 00:17:07,420
something else this is when you weren't

00:17:05,589 --> 00:17:09,970
going to split onwards you are going to

00:17:07,420 --> 00:17:11,410
split in two characters now here this is

00:17:09,970 --> 00:17:14,819
a terrible explanation but what if we

00:17:11,410 --> 00:17:17,920
were splitting something like this I

00:17:14,819 --> 00:17:21,850
hope you all are fans great American

00:17:17,920 --> 00:17:23,589
rock band thank you now if we split this

00:17:21,850 --> 00:17:25,780
into characters naively with the empty

00:17:23,589 --> 00:17:28,930
pattern we might be very happy and get

00:17:25,780 --> 00:17:32,500
this but we might split up the band and

00:17:28,930 --> 00:17:34,330
get that depending on the normalization

00:17:32,500 --> 00:17:35,720
form of the string well if you use

00:17:34,330 --> 00:17:37,789
graphene cluster boundaries you

00:17:35,720 --> 00:17:39,440
always get this graphene cluster

00:17:37,789 --> 00:17:42,350
boundaries are the inverse of the

00:17:39,440 --> 00:17:44,330
backslash big X thing right match the

00:17:42,350 --> 00:17:46,429
whole cluster split whole clusters okay

00:17:44,330 --> 00:17:48,200
but now we've started to sink into sort

00:17:46,429 --> 00:17:49,429
of bizarre little Unicode stuff that I

00:17:48,200 --> 00:17:51,230
think you should all love and I know you

00:17:49,429 --> 00:17:55,400
don't so we'll move on and talk about

00:17:51,230 --> 00:17:59,330
captures yeah yeah oh yes thank you Nick

00:17:55,400 --> 00:18:01,850
Nix Nix happy okay so here we go to reg

00:17:59,330 --> 00:18:03,110
ex I'm sure you've all seen this one

00:18:01,850 --> 00:18:05,570
before and if you haven't it's trivial

00:18:03,110 --> 00:18:08,780
this is matching a version number it's

00:18:05,570 --> 00:18:09,980
kind of a mess just like versions but we

00:18:08,780 --> 00:18:11,210
can clean this up of it by adding some

00:18:09,980 --> 00:18:15,140
white space so we're going to say we

00:18:11,210 --> 00:18:16,730
want a V and then some digits and then

00:18:15,140 --> 00:18:18,890
maybe a decimal point in some more

00:18:16,730 --> 00:18:20,450
digits and maybe some underscore and

00:18:18,890 --> 00:18:22,370
some more that little X that's the thing

00:18:20,450 --> 00:18:23,720
that lets us clean this all up we're

00:18:22,370 --> 00:18:25,730
saying we can have some some white space

00:18:23,720 --> 00:18:28,700
and it won't matter and having done this

00:18:25,730 --> 00:18:32,780
we might make a realization we might

00:18:28,700 --> 00:18:34,429
realize it's still pretty ugly and part

00:18:32,780 --> 00:18:38,330
of what's bad about this is those ?

00:18:34,429 --> 00:18:39,590
colin's they layer so that we're not

00:18:38,330 --> 00:18:42,260
capturing everything because we don't

00:18:39,590 --> 00:18:44,240
need everything well why do we have to

00:18:42,260 --> 00:18:46,490
say every single time we're grouping

00:18:44,240 --> 00:18:50,000
that we don't want to capture let's not

00:18:46,490 --> 00:18:55,100
do that let's just say no captures / end

00:18:50,000 --> 00:18:56,659
at the end yeah it's great but what we

00:18:55,100 --> 00:18:58,100
then find is we look at this and we

00:18:56,659 --> 00:18:59,120
first of all it's even better because we

00:18:58,100 --> 00:19:00,890
look at this when we think hey you know

00:18:59,120 --> 00:19:03,409
what now that I've done this I didn't

00:19:00,890 --> 00:19:06,260
even need those first friends or a video

00:19:03,409 --> 00:19:08,659
feed I didn't need those first friends

00:19:06,260 --> 00:19:09,919
and you can drop them but what if they

00:19:08,659 --> 00:19:12,320
want what you did need those first

00:19:09,919 --> 00:19:14,929
friends and in fact what if not only you

00:19:12,320 --> 00:19:16,730
needed them you needed to capture so you

00:19:14,929 --> 00:19:18,049
had some captures and some not captures

00:19:16,730 --> 00:19:19,400
and you only want to capture explicitly

00:19:18,049 --> 00:19:21,970
well there's an elegant and beautiful

00:19:19,400 --> 00:19:23,870
way to do this which is like that

00:19:21,970 --> 00:19:27,049
wonderful it's just so you know this is

00:19:23,870 --> 00:19:31,010
it's terrible there's a way to bypass

00:19:27,049 --> 00:19:34,760
this without using the awful ? minus

00:19:31,010 --> 00:19:37,309
flags colon system and it's this to use

00:19:34,760 --> 00:19:39,320
named captures even in non capturing

00:19:37,309 --> 00:19:40,730
mode named captures will capture because

00:19:39,320 --> 00:19:42,840
why else would you have put one there

00:19:40,730 --> 00:19:44,520
and then

00:19:42,840 --> 00:19:46,500
we can get him out of the bottom from

00:19:44,520 --> 00:19:47,700
percent-plus but of course I would never

00:19:46,500 --> 00:19:50,100
write this thing at the bottom because

00:19:47,700 --> 00:19:54,300
what what's the problem the bottom I've

00:19:50,100 --> 00:19:56,880
written the same word twice twice that's

00:19:54,300 --> 00:19:58,700
no good I would write this instead so a

00:19:56,880 --> 00:20:02,240
brief digression back in two days of

00:19:58,700 --> 00:20:07,140
long gone and almost forgotten pearl 520

00:20:02,240 --> 00:20:09,720
in no I don't need that sign pair

00:20:07,140 --> 00:20:11,250
slicing so you all know we can do this

00:20:09,720 --> 00:20:13,050
we've got an array and we want to slice

00:20:11,250 --> 00:20:15,780
out a couple values from it so instead

00:20:13,050 --> 00:20:18,630
of doing a subscript where we've give it

00:20:15,780 --> 00:20:20,370
a dollar sigil in a couple keys are in

00:20:18,630 --> 00:20:21,870
one key we give it an at sigil and

00:20:20,370 --> 00:20:24,570
multiple keys and we get a list of

00:20:21,870 --> 00:20:25,860
multiple values you can get a hash you

00:20:24,570 --> 00:20:28,440
get multiple values from it this is not

00:20:25,860 --> 00:20:30,840
new this is pro 50 well we added last

00:20:28,440 --> 00:20:34,110
year was the ability to use a percent

00:20:30,840 --> 00:20:36,110
sigil and get a list of pairs out so you

00:20:34,110 --> 00:20:40,050
get all the keys and the values yeah

00:20:36,110 --> 00:20:43,110
fantastic it's so good and not only can

00:20:40,050 --> 00:20:46,980
you do that you can do that on an array

00:20:43,110 --> 00:20:48,900
and get indexes so when you find code

00:20:46,980 --> 00:20:53,370
like this possibly like in the example

00:20:48,900 --> 00:20:54,540
code of any ORM ever written you're

00:20:53,370 --> 00:20:56,310
going to see you're repeating yourself

00:20:54,540 --> 00:20:57,600
and repeating yourself and I don't like

00:20:56,310 --> 00:20:59,070
to repeat myself because that I

00:20:57,600 --> 00:21:03,390
introduced typographical errors like

00:20:59,070 --> 00:21:05,070
that so instead of saying artist artist

00:21:03,390 --> 00:21:07,770
title title tracks tracks I can go and

00:21:05,070 --> 00:21:09,270
do this right give me this set of sub

00:21:07,770 --> 00:21:13,860
set of keys but I've only done the

00:21:09,270 --> 00:21:15,510
beginning and the reason is that here

00:21:13,860 --> 00:21:17,960
I'm getting stuff out of a hash fragment

00:21:15,510 --> 00:21:20,960
getting the slice out of an already

00:21:17,960 --> 00:21:24,960
dereferenced reference is the worst

00:21:20,960 --> 00:21:26,220
problem in the world so you've got this

00:21:24,960 --> 00:21:28,380
thing right here's our assignment we got

00:21:26,220 --> 00:21:30,570
a hash ref and it contains a key to

00:21:28,380 --> 00:21:33,060
another hash ref and we want to get a

00:21:30,570 --> 00:21:35,670
slice out of that so how do we do it we

00:21:33,060 --> 00:21:37,590
start like this right can I just give it

00:21:35,670 --> 00:21:39,540
two keys nope we get we just got a

00:21:37,590 --> 00:21:42,420
single undef from that all right good

00:21:39,540 --> 00:21:46,140
enough how about this I'm going to put

00:21:42,420 --> 00:21:48,150
in some circles and I'll throw in an

00:21:46,140 --> 00:21:50,550
extra arrow because arrows work arrows

00:21:48,150 --> 00:21:52,290
make things go what do we get we get

00:21:50,550 --> 00:21:55,230
into not on a rail

00:21:52,290 --> 00:21:58,200
error okay fine it was I you got me on

00:21:55,230 --> 00:22:02,460
how about how about this one we would an

00:21:58,200 --> 00:22:05,760
empty list okay and finally there's the

00:22:02,460 --> 00:22:07,830
answer it only took four tries that's

00:22:05,760 --> 00:22:11,550
that's one of pearls many mottos it only

00:22:07,830 --> 00:22:13,350
took four tries so how do we fix this

00:22:11,550 --> 00:22:17,610
problem it's certainly not by repeating

00:22:13,350 --> 00:22:19,170
myself instead it's this right we're

00:22:17,610 --> 00:22:20,520
going to take that whole reference e

00:22:19,170 --> 00:22:21,480
thing and stick it on the end which gets

00:22:20,520 --> 00:22:23,070
us to one more thing I want to talk

00:22:21,480 --> 00:22:25,020
about from last year because it's so

00:22:23,070 --> 00:22:29,070
good and it should make you all upgrade

00:22:25,020 --> 00:22:30,360
today post fixie referencing so anytime

00:22:29,070 --> 00:22:32,040
you have horrible code like this I

00:22:30,360 --> 00:22:34,170
apologize this red is a little bit dark

00:22:32,040 --> 00:22:38,180
if you see the red that's the things

00:22:34,170 --> 00:22:40,110
that I hate and pearl these

00:22:38,180 --> 00:22:42,270
circumferential you got to write your

00:22:40,110 --> 00:22:43,830
code left to right and then go back to

00:22:42,270 --> 00:22:45,210
the left to add the thing you forgot

00:22:43,830 --> 00:22:47,220
that you would need then go back to the

00:22:45,210 --> 00:22:50,750
right to add the thing to pair that it's

00:22:47,220 --> 00:22:53,280
a drag so get rid of all of these and

00:22:50,750 --> 00:22:56,040
we're going to put them at the end so

00:22:53,280 --> 00:22:58,170
that Q that one's the circum fix stick

00:22:56,040 --> 00:22:59,820
it at the end that one we're going to do

00:22:58,170 --> 00:23:02,040
that stick that at the end any place in

00:22:59,820 --> 00:23:04,440
the code we won how about this we're

00:23:02,040 --> 00:23:06,300
mapping some input instead of circling

00:23:04,440 --> 00:23:09,330
the result of that method call we stick

00:23:06,300 --> 00:23:11,910
it at the end because in English which

00:23:09,330 --> 00:23:13,760
pearl is more like than I don't know

00:23:11,910 --> 00:23:15,840
what this would be we read left to right

00:23:13,760 --> 00:23:18,450
and how about that other that last

00:23:15,840 --> 00:23:20,310
remaining thing they rarely used highest

00:23:18,450 --> 00:23:23,790
index thing yes sure why not let's make

00:23:20,310 --> 00:23:25,650
that post fix to you get postfix and you

00:23:23,790 --> 00:23:28,050
get postfix and you get post fix

00:23:25,650 --> 00:23:30,090
everything and it's not just it's not

00:23:28,050 --> 00:23:31,860
just for single dereferencing it notes

00:23:30,090 --> 00:23:34,200
the glob you can post fix dereference

00:23:31,860 --> 00:23:35,700
glob stuff great actually it turns out

00:23:34,200 --> 00:23:37,200
to be really really good except that if

00:23:35,700 --> 00:23:39,630
you're doing glob stuff you don't care

00:23:37,200 --> 00:23:42,330
because your life is hell

00:23:39,630 --> 00:23:44,550
so is this thing you can get all your

00:23:42,330 --> 00:23:46,170
slices can now be postfix dereferenced

00:23:44,550 --> 00:23:47,790
out so any kind of slice you want it

00:23:46,170 --> 00:23:49,440
doesn't matter how left to right you've

00:23:47,790 --> 00:23:51,240
gone you just do it and it works in

00:23:49,440 --> 00:23:54,180
strings it's awesome okay that's postfix

00:23:51,240 --> 00:23:56,880
dereferencing let's get back to the

00:23:54,180 --> 00:24:00,480
future reference aliasing it's another

00:23:56,880 --> 00:24:02,370
fun more fun with references so we've

00:24:00,480 --> 00:24:03,720
got an array this is some remedial pearl

00:24:02,370 --> 00:24:05,460
with references here we've got an array

00:24:03,720 --> 00:24:07,580
it's got four things in it and we take a

00:24:05,460 --> 00:24:11,250
reference to that array dollar F and

00:24:07,580 --> 00:24:15,630
then we shift from the array that we get

00:24:11,250 --> 00:24:19,550
when we dereference ref okay then we say

00:24:15,630 --> 00:24:19,550
array what is this going to print I

00:24:19,970 --> 00:24:24,690
heard some right in some wrong it's two

00:24:22,200 --> 00:24:27,660
three four shift takes the left one

00:24:24,690 --> 00:24:31,170
right so those those who said one two

00:24:27,660 --> 00:24:34,080
three you are right in spirit so we get

00:24:31,170 --> 00:24:35,730
two three four but I don't like typing

00:24:34,080 --> 00:24:38,300
backslashes they make me think there's

00:24:35,730 --> 00:24:40,800
something in my code I'm concerned about

00:24:38,300 --> 00:24:42,150
so I stopped I'm just gonna make a copy

00:24:40,800 --> 00:24:44,730
and I shift the copy what do I get when

00:24:42,150 --> 00:24:49,470
I say the array 1 2 3 4 of course I made

00:24:44,730 --> 00:24:51,570
a copy so how can I avoid have loops how

00:24:49,470 --> 00:24:52,950
can I avoid this ref it's not the

00:24:51,570 --> 00:24:55,340
backslash I don't like okay it's not the

00:24:52,950 --> 00:24:58,020
backslash it's it's the dereference

00:24:55,340 --> 00:25:04,230
dereferencing is ugly how can I avoid

00:24:58,020 --> 00:25:06,600
that like this more backslashes let's

00:25:04,230 --> 00:25:08,940
let's put let's put a backslash on the

00:25:06,600 --> 00:25:11,880
on the left-hand side so we're going to

00:25:08,940 --> 00:25:13,410
make the thing this thing how the same

00:25:11,880 --> 00:25:15,690
reference with a thing on the right

00:25:13,410 --> 00:25:18,750
force those two things to have a

00:25:15,690 --> 00:25:20,640
referential integrity identity and then

00:25:18,750 --> 00:25:24,660
when we shift from alias and notice here

00:25:20,640 --> 00:25:26,400
that alias has no dereference it's not a

00:25:24,660 --> 00:25:29,010
reference it is an alias they are both

00:25:26,400 --> 00:25:32,190
bound to the same variable and they both

00:25:29,010 --> 00:25:33,570
affect the same thing so probably think

00:25:32,190 --> 00:25:35,520
well the only reason you'd use this is

00:25:33,570 --> 00:25:38,310
to be a complete evil jerk and have

00:25:35,520 --> 00:25:40,790
action at a distance happen well that's

00:25:38,310 --> 00:25:43,270
one application

00:25:40,790 --> 00:25:45,560
but let's say we've got some to do's

00:25:43,270 --> 00:25:47,120
earlier today said something like oh I

00:25:45,560 --> 00:25:49,370
like tea and someone said I thought you

00:25:47,120 --> 00:25:51,410
liked pie and it's probably because all

00:25:49,370 --> 00:25:55,070
of my slide shows have be wanting to eat

00:25:51,410 --> 00:25:57,980
pie so we've got a to do and it's a

00:25:55,070 --> 00:26:00,140
array of hash refs and we're going to

00:25:57,980 --> 00:26:02,510
iterate over them and then inside that

00:26:00,140 --> 00:26:05,480
for loop what do we do we get the item

00:26:02,510 --> 00:26:08,210
and we say please do this thing when and

00:26:05,480 --> 00:26:09,800
the terrible awful problem that I think

00:26:08,210 --> 00:26:12,770
is just terrible and awful is these

00:26:09,800 --> 00:26:14,480
stupid arrows right I don't want them

00:26:12,770 --> 00:26:16,340
because they're ugly there are more

00:26:14,480 --> 00:26:18,350
syntax than I should need but I need

00:26:16,340 --> 00:26:20,630
them because dollar item is a ref and I

00:26:18,350 --> 00:26:23,210
need to dereference them well if we

00:26:20,630 --> 00:26:26,540
instead of making it a reference that we

00:26:23,210 --> 00:26:29,330
pull out if we make a new hash that is

00:26:26,540 --> 00:26:31,610
an alias to the reference value just in

00:26:29,330 --> 00:26:33,800
this lexical scope then we can drop

00:26:31,610 --> 00:26:35,870
those arrows so this is this is a

00:26:33,800 --> 00:26:37,850
slightly more pearl 6ish way where we've

00:26:35,870 --> 00:26:39,350
got the loop and over bind or it's what

00:26:37,850 --> 00:26:41,540
you get have you had if you had no

00:26:39,350 --> 00:26:45,340
variable you are binding the topic to

00:26:41,540 --> 00:26:45,340
these but it works for any data type yes

00:26:49,900 --> 00:26:55,010
it's we've got sigil variants in pro 5

00:26:53,030 --> 00:26:56,210
so when we get a single item out of it

00:26:55,010 --> 00:27:03,280
you have to switch the percent to a

00:26:56,210 --> 00:27:07,340
dollar oh yeah okay it's a typo yeah I

00:27:03,280 --> 00:27:08,990
use a pragma in my pearl that lets me

00:27:07,340 --> 00:27:10,370
use whatever variable i think i should

00:27:08,990 --> 00:27:12,990
be using

00:27:10,370 --> 00:27:14,670
I'd release it on the seat pan but I

00:27:12,990 --> 00:27:17,250
don't want to brag like Damien Conway

00:27:14,670 --> 00:27:21,480
about my code I just allude to it in my

00:27:17,250 --> 00:27:23,040
slides so we've got this guy all right

00:27:21,480 --> 00:27:24,030
here's another one if this long awful

00:27:23,040 --> 00:27:27,000
chain of things and we're going to

00:27:24,030 --> 00:27:29,640
reference over that so if we don't in

00:27:27,000 --> 00:27:32,280
here wanna do reference it several times

00:27:29,640 --> 00:27:34,710
we could just not use it in a for loop

00:27:32,280 --> 00:27:36,360
and start like this and make our hash

00:27:34,710 --> 00:27:38,340
that gets some element deep out of there

00:27:36,360 --> 00:27:41,370
and stop stop dereferencing all the time

00:27:38,340 --> 00:27:42,870
now if you're like me you don't want to

00:27:41,370 --> 00:27:44,280
have that hash sitting around later in

00:27:42,870 --> 00:27:46,710
your code so you wrap the whole thing in

00:27:44,280 --> 00:27:48,690
a block and then you might as well make

00:27:46,710 --> 00:27:50,940
it a four because you're you're

00:27:48,690 --> 00:27:54,030
effectively topical izing here I'm

00:27:50,940 --> 00:27:55,770
really happy with this I my experience

00:27:54,030 --> 00:27:57,030
has been people look at this and they

00:27:55,770 --> 00:27:59,190
make a face kind of like the one Tom's

00:27:57,030 --> 00:28:00,390
making they look a little sour but after

00:27:59,190 --> 00:28:02,700
you use it for a while it's pretty nice

00:28:00,390 --> 00:28:04,380
ok that's reference aliasing it's an

00:28:02,700 --> 00:28:08,010
experimental feature you can turn it on

00:28:04,380 --> 00:28:09,360
with use experimental ref aliasing but

00:28:08,010 --> 00:28:10,800
you know we might break it or rip it out

00:28:09,360 --> 00:28:13,830
i don't know but i think is pretty cool

00:28:10,800 --> 00:28:15,600
ok we've made pro faster everyone likes

00:28:13,830 --> 00:28:18,720
faster i'm just going to run through

00:28:15,600 --> 00:28:21,390
these kind of fast one of them is if you

00:28:18,720 --> 00:28:25,350
are splitting a string into an array in

00:28:21,390 --> 00:28:27,630
many cases what we used to do was split

00:28:25,350 --> 00:28:30,240
it into an array in memory and then copy

00:28:27,630 --> 00:28:32,280
it much more often now we can do it

00:28:30,240 --> 00:28:34,470
directly into the array so no copy

00:28:32,280 --> 00:28:37,170
memory nice plus memory faster it's

00:28:34,470 --> 00:28:39,960
great everybody wins lots and lots of

00:28:37,170 --> 00:28:44,280
stuff was done to improve method call

00:28:39,960 --> 00:28:49,290
speed which is good because it's real

00:28:44,280 --> 00:28:51,810
slow so when you make this call to New

00:28:49,290 --> 00:28:53,640
on my class it's got to go look up the

00:28:51,810 --> 00:28:55,050
method and then it caches it but it's a

00:28:53,640 --> 00:28:56,610
runtime hit every time you're hitting a

00:28:55,050 --> 00:28:59,010
new method for the first time what we've

00:28:56,610 --> 00:29:00,960
done now is basically one we're

00:28:59,010 --> 00:29:04,310
compiling your code we pre populate the

00:29:00,960 --> 00:29:06,570
cash real cheap makes things real fast

00:29:04,310 --> 00:29:10,470
Universal gets a special case of this or

00:29:06,570 --> 00:29:12,000
super they get special case into going

00:29:10,470 --> 00:29:13,620
directly to the cash they don't have to

00:29:12,000 --> 00:29:15,780
start doing weird resolving and a lot of

00:29:13,620 --> 00:29:17,760
this is powered by a new op if you are a

00:29:15,780 --> 00:29:20,520
terrible or crazy person and work with

00:29:17,760 --> 00:29:21,990
the op tree directly which some people

00:29:20,520 --> 00:29:23,370
must do you might start seeing this

00:29:21,990 --> 00:29:24,150
operator another operator you might

00:29:23,370 --> 00:29:26,760
start seeing

00:29:24,150 --> 00:29:27,750
is multi drf what is multi drf well

00:29:26,760 --> 00:29:31,830
let's say you have this line in your

00:29:27,750 --> 00:29:33,360
code my condolences and what happens

00:29:31,830 --> 00:29:35,070
when you run this code in Perl is first

00:29:33,360 --> 00:29:37,860
it says right I'm going to start with a

00:29:35,070 --> 00:29:40,920
and then I'm going to look for the

00:29:37,860 --> 00:29:43,230
zeroth element and then entering that

00:29:40,920 --> 00:29:44,850
and then the next thing and this is all

00:29:43,230 --> 00:29:47,100
pearl like checking the reference type

00:29:44,850 --> 00:29:48,960
going down into it it's lots and lots

00:29:47,100 --> 00:29:51,600
and lots of pearl work all the way down

00:29:48,960 --> 00:29:54,050
to the end with the multi DF operator it

00:29:51,600 --> 00:29:57,300
says all these things are very simple I

00:29:54,050 --> 00:30:00,510
will find the reference and go right

00:29:57,300 --> 00:30:02,430
down there all in C in one opcode really

00:30:00,510 --> 00:30:04,490
really fast great everything's faster

00:30:02,430 --> 00:30:13,320
we're all happy ok enough Astor ization

00:30:04,490 --> 00:30:15,630
let's talk about nan na so pro does I

00:30:13,320 --> 00:30:17,610
Tripoli floats and mostly what you think

00:30:15,630 --> 00:30:18,900
that means is that sometimes when you

00:30:17,610 --> 00:30:20,160
add two numbers that you think you

00:30:18,900 --> 00:30:22,560
understand you get an answer that you

00:30:20,160 --> 00:30:24,000
don't understand unless you have a

00:30:22,560 --> 00:30:28,680
master's in computer science in which

00:30:24,000 --> 00:30:30,990
case you're not writing pearl so but it

00:30:28,680 --> 00:30:33,020
also means you have support for infinity

00:30:30,990 --> 00:30:35,970
negative infinity and not a number and

00:30:33,020 --> 00:30:38,580
possibly negative zero that's a great

00:30:35,970 --> 00:30:40,440
one ok so if you say tell me about

00:30:38,580 --> 00:30:41,700
infinity pearl says its infinity and how

00:30:40,440 --> 00:30:43,350
about what's infinity plus 0 that's

00:30:41,700 --> 00:30:45,270
infinity and two infinities well that's

00:30:43,350 --> 00:30:48,050
still infinity and so on sometimes you

00:30:45,270 --> 00:30:50,250
end up with not a number sometimes a

00:30:48,050 --> 00:30:51,330
right you get just weird things as

00:30:50,250 --> 00:30:54,240
negative infinity is I'm not showing

00:30:51,330 --> 00:30:57,300
here now this is what you get on some

00:30:54,240 --> 00:30:58,800
platforms and you think that all makes

00:30:57,300 --> 00:31:03,060
sense and then sometimes you're in the

00:30:58,800 --> 00:31:04,470
same code and you get this what and

00:31:03,060 --> 00:31:06,480
that's just because different platforms

00:31:04,470 --> 00:31:08,400
have different strengths ification of

00:31:06,480 --> 00:31:10,050
these and we used to be platform we used

00:31:08,400 --> 00:31:11,700
to just let the platform ab stuff leaked

00:31:10,050 --> 00:31:12,990
through there's no abstraction which is

00:31:11,700 --> 00:31:14,580
terrible because then whenever you write

00:31:12,990 --> 00:31:16,560
any code that might deal with this and

00:31:14,580 --> 00:31:18,750
you know doing standard floating-point

00:31:16,560 --> 00:31:20,610
stuff for some value of standard it

00:31:18,750 --> 00:31:22,380
seems like it should work this would

00:31:20,610 --> 00:31:23,790
confuse your test you have to start

00:31:22,380 --> 00:31:24,810
doing special cases no it's all fixed

00:31:23,790 --> 00:31:27,360
now everything gets the same

00:31:24,810 --> 00:31:30,390
stratification another funny bit of this

00:31:27,360 --> 00:31:34,880
is 0 plus 9 you get nan that makes sense

00:31:30,390 --> 00:31:36,980
how about 0 plus Nancy well you get nan

00:31:34,880 --> 00:31:38,810
well the reason you get that totally

00:31:36,980 --> 00:31:41,750
totally reason it's totally reasonable

00:31:38,810 --> 00:31:45,080
it's totally reasonable yeah okay i can

00:31:41,750 --> 00:31:47,450
say that is because when you say 0 plus

00:31:45,080 --> 00:31:49,340
123 ABC you get one two three the first

00:31:47,450 --> 00:31:51,140
part of the string that looks like this

00:31:49,340 --> 00:31:56,450
a number is what you get but you also

00:31:51,140 --> 00:31:59,180
get something else no a warning yes you

00:31:56,450 --> 00:32:02,180
get a warning but no matter how crazy

00:31:59,180 --> 00:32:06,650
the thing is that you put in that starts

00:32:02,180 --> 00:32:09,170
with man you get nothing well we fix

00:32:06,650 --> 00:32:11,600
that right if it's good if it's good for

00:32:09,170 --> 00:32:12,380
123 ABC it's good for Nancy and now

00:32:11,600 --> 00:32:14,420
you're going to start getting these

00:32:12,380 --> 00:32:15,860
warnings this bug does not affect you

00:32:14,420 --> 00:32:18,440
very often unless you're interacting

00:32:15,860 --> 00:32:20,000
with something called Nancy okay so

00:32:18,440 --> 00:32:21,050
that's that's that's not that's the not

00:32:20,000 --> 00:32:24,410
a number of stuff let's talk about the

00:32:21,050 --> 00:32:29,440
not not a number stuff specifically this

00:32:24,410 --> 00:32:29,440
is not not a number and neither is this

00:32:29,620 --> 00:32:32,780
really it's no it's really not right

00:32:31,670 --> 00:32:37,160
because you understand what this is

00:32:32,780 --> 00:32:38,600
right this is 1 plus 23 over 100 oh

00:32:37,160 --> 00:32:42,110
there's going to be a typo in a slide

00:32:38,600 --> 00:32:43,820
coming up 1 plus 23 over 100 times ten

00:32:42,110 --> 00:32:45,290
to the fourth right the the different

00:32:43,820 --> 00:32:46,520
colored bits all map together I think we

00:32:45,290 --> 00:32:48,740
all understand how the scientific

00:32:46,520 --> 00:32:51,530
notation works and this is scientific

00:32:48,740 --> 00:32:54,590
notation designed by some kind of alien

00:32:51,530 --> 00:32:59,450
race with too many fingers and what

00:32:54,590 --> 00:33:01,250
happens is it's it's it's hex e plus a 3

00:32:59,450 --> 00:33:04,550
over and that's the wrong number there

00:33:01,250 --> 00:33:07,760
but over the right denominator x 2 to

00:33:04,550 --> 00:33:10,700
the fourth okay x 2 to the fourth

00:33:07,760 --> 00:33:13,460
instead of being like E and then a power

00:33:10,700 --> 00:33:16,340
of 10 which wouldn't make sense for for

00:33:13,460 --> 00:33:19,100
pure bit math for hex math we have to

00:33:16,340 --> 00:33:21,760
use powers of 2 someone asked me why do

00:33:19,100 --> 00:33:24,830
we use P and not eat and just understand

00:33:21,760 --> 00:33:28,550
because he is in hex that's right okay

00:33:24,830 --> 00:33:31,730
so this number we would write this way

00:33:28,550 --> 00:33:32,930
and if you want to get it back out and

00:33:31,730 --> 00:33:34,220
you want to print it in that format

00:33:32,930 --> 00:33:38,030
what's your what do you use for print

00:33:34,220 --> 00:33:40,490
out here we'll use X right x is for heck

00:33:38,030 --> 00:33:43,040
stuff you get a decimal numbers hex no

00:33:40,490 --> 00:33:45,710
because x is for integers but now we

00:33:43,040 --> 00:33:47,690
support percent a which i'm sure you've

00:33:45,710 --> 00:33:49,610
all been eagerly awaiting

00:33:47,690 --> 00:33:51,710
and you notice that what you get out is

00:33:49,610 --> 00:33:54,019
not what you put into it just like it

00:33:51,710 --> 00:33:55,460
might be if you use % g it's putting it

00:33:54,019 --> 00:33:56,779
into the form to any computer or say

00:33:55,460 --> 00:34:01,610
well this is obviously the correct way

00:33:56,779 --> 00:34:03,080
to put it you silly human ok I will only

00:34:01,610 --> 00:34:04,879
say this the good thing about having

00:34:03,080 --> 00:34:07,070
these literals is that you can be

00:34:04,879 --> 00:34:08,540
prepared to do exactly exact

00:34:07,070 --> 00:34:09,619
floating-point math it is not going to

00:34:08,540 --> 00:34:10,520
have a weird rounding errors because

00:34:09,619 --> 00:34:12,800
you're not going to be expressed in

00:34:10,520 --> 00:34:14,869
we're rounding errors ok so speaking of

00:34:12,800 --> 00:34:16,849
numbers and non-members let's play a

00:34:14,869 --> 00:34:26,629
game is everybody ready to play name

00:34:16,849 --> 00:34:28,929
that operator all right and what is the

00:34:26,629 --> 00:34:37,040
type of the operands to this operator

00:34:28,929 --> 00:34:38,060
numbers thank you next let's round for

00:34:37,040 --> 00:34:41,000
people at home they're just mumbling

00:34:38,060 --> 00:34:43,760
it's great ok and what are the types of

00:34:41,000 --> 00:34:46,879
these operands strings these are strings

00:34:43,760 --> 00:34:48,169
ok in this guy whoa know what nevermind

00:34:46,879 --> 00:34:56,149
know my number but move on movin on

00:34:48,169 --> 00:34:59,300
movin on up and/or zor zor XO and the

00:34:56,149 --> 00:35:02,780
type type for these bullion's okay how

00:34:59,300 --> 00:35:05,859
about this and but what is the type of

00:35:02,780 --> 00:35:10,550
the operon for these we don't know right

00:35:05,859 --> 00:35:14,000
what one of pearls like founding

00:35:10,550 --> 00:35:16,160
principles is that pro 5 does not have a

00:35:14,000 --> 00:35:19,220
type system and we bloody well don't

00:35:16,160 --> 00:35:20,900
want one we've got operators man and the

00:35:19,220 --> 00:35:22,520
operators decide the type of things you

00:35:20,900 --> 00:35:23,750
say the plus sign you mean numbers and

00:35:22,520 --> 00:35:28,849
we're going to use them like numbers and

00:35:23,750 --> 00:35:32,119
you say this or you do something and

00:35:28,849 --> 00:35:34,550
you're going to like it so well if you

00:35:32,119 --> 00:35:37,069
give it two numbers its numeric and if

00:35:34,550 --> 00:35:38,450
you give it two strings it takes the

00:35:37,069 --> 00:35:40,369
strings breaks them down into bit

00:35:38,450 --> 00:35:41,630
strings and does it that way but if you

00:35:40,369 --> 00:35:45,020
give it a number and string or a string

00:35:41,630 --> 00:35:48,920
a number it does something

00:35:45,020 --> 00:35:57,050
and the most important thing in Perl is

00:35:48,920 --> 00:35:59,030
to do something this we've decided that

00:35:57,050 --> 00:36:02,150
if something was good something else is

00:35:59,030 --> 00:36:04,310
even better and we have added

00:36:02,150 --> 00:36:08,750
experimental bitwise feature and what

00:36:04,310 --> 00:36:13,120
happens here is when you say this it is

00:36:08,750 --> 00:36:16,220
numeric and if you said Nancy and Susan

00:36:13,120 --> 00:36:17,560
it's going to be nan and zero and I

00:36:16,220 --> 00:36:22,310
don't even know the answer to that is

00:36:17,560 --> 00:36:23,510
but it's but it makes more sense but if

00:36:22,310 --> 00:36:24,740
you give it a string in a number it's

00:36:23,510 --> 00:36:25,910
it's going to treat them both like

00:36:24,740 --> 00:36:29,650
numbers because that's what you've said

00:36:25,910 --> 00:36:35,090
and if you want a string the obvious

00:36:29,650 --> 00:36:39,080
operation is this because what everyone

00:36:35,090 --> 00:36:41,810
is wanted is more operators right it's

00:36:39,080 --> 00:36:45,850
it's an overload supports this of course

00:36:41,810 --> 00:36:51,730
so yeah Merry Christmas new operators um

00:36:45,850 --> 00:36:54,200
we also have these two and these two and

00:36:51,730 --> 00:36:58,400
yet wait for the tom knows what's coming

00:36:54,200 --> 00:36:59,750
these two right and they all do just

00:36:58,400 --> 00:37:03,020
what you'd expect as long as we're

00:36:59,750 --> 00:37:04,760
talking about the numeric one the

00:37:03,020 --> 00:37:06,830
problem with the string one is it's

00:37:04,760 --> 00:37:09,320
still kind of wonky on wide characters

00:37:06,830 --> 00:37:11,450
because what does it mean to use smiling

00:37:09,320 --> 00:37:16,160
cat face with crying eyes as a bit

00:37:11,450 --> 00:37:17,810
string I don't know but we do know pro/5

00:37:16,160 --> 00:37:18,860
establishes its pretty clearly it means

00:37:17,810 --> 00:37:21,200
you use the internal memory

00:37:18,860 --> 00:37:23,300
representation of general utf-8 and you

00:37:21,200 --> 00:37:26,080
issue a warning saying wide character

00:37:23,300 --> 00:37:30,560
used in string like bitwise bit string

00:37:26,080 --> 00:37:33,920
mmm thing um we're going to fix that so

00:37:30,560 --> 00:37:35,960
if you ever use these operators they're

00:37:33,920 --> 00:37:41,300
not too common yeah this guy what does

00:37:35,960 --> 00:37:43,490
that mean if you but if you use these

00:37:41,300 --> 00:37:45,820
operators which which the great

00:37:43,490 --> 00:37:48,530
operators and I actually do use them

00:37:45,820 --> 00:37:51,500
this is a feature you really really want

00:37:48,530 --> 00:37:53,810
to use at least for numeric ones it will

00:37:51,500 --> 00:37:56,300
always make it do the right thing the

00:37:53,810 --> 00:37:57,150
old behavior was totally crazy and after

00:37:56,300 --> 00:37:59,309
this is only

00:37:57,150 --> 00:38:01,950
one more operator that does not store

00:37:59,309 --> 00:38:05,160
the type data in the operator and I

00:38:01,950 --> 00:38:06,539
think it knows what's coming okay this

00:38:05,160 --> 00:38:08,400
is another bit from 5-20 I'm going to go

00:38:06,539 --> 00:38:10,380
through this pretty quickly we added

00:38:08,400 --> 00:38:12,960
stuff like this so here's this piece of

00:38:10,380 --> 00:38:15,089
code in its terrible terrible code which

00:38:12,960 --> 00:38:20,539
should be shot or at least fixed to look

00:38:15,089 --> 00:38:22,859
like this so yes we added this last year

00:38:20,539 --> 00:38:24,240
it's real great we use all time this is

00:38:22,859 --> 00:38:25,789
like the simplest possible signature if

00:38:24,240 --> 00:38:28,680
we wanted a default we might write this

00:38:25,789 --> 00:38:31,289
so if you just say add four you get for

00:38:28,680 --> 00:38:33,000
because why can default 20 if you want

00:38:31,289 --> 00:38:36,359
to make it take zero one or two

00:38:33,000 --> 00:38:38,819
operators you can have add / n / n just

00:38:36,359 --> 00:38:40,260
be 0 and if you want to skip that plus

00:38:38,819 --> 00:38:41,730
step you can get a little crazier and

00:38:40,260 --> 00:38:43,470
say well if there's no second argument

00:38:41,730 --> 00:38:45,539
just immediately return X without

00:38:43,470 --> 00:38:48,450
entering the body of the sub because

00:38:45,539 --> 00:38:50,520
pearl is awesome and you could do the

00:38:48,450 --> 00:38:51,960
same thing there and these work because

00:38:50,520 --> 00:38:53,190
we can put pretty arbitrary expressions

00:38:51,960 --> 00:39:00,510
on our signatures like this is probably

00:38:53,190 --> 00:39:02,490
what we'd really right in production I'm

00:39:00,510 --> 00:39:04,589
pretty sure this works I couldn't get

00:39:02,490 --> 00:39:07,859
myself to test this because even I have

00:39:04,589 --> 00:39:09,240
limits and we can it's not just scalars

00:39:07,859 --> 00:39:11,220
right we can have we can have slurpee

00:39:09,240 --> 00:39:13,289
stuff so here's a subroutine and here we

00:39:11,220 --> 00:39:16,589
pull it up into the signature this is

00:39:13,289 --> 00:39:19,710
this is good we can do this and what

00:39:16,589 --> 00:39:22,319
makes this even nicer is that if you

00:39:19,710 --> 00:39:25,319
tried passing in an odd number of

00:39:22,319 --> 00:39:27,450
arguments it will notice that you put an

00:39:25,319 --> 00:39:29,369
odd number of things into a hash and it

00:39:27,450 --> 00:39:32,369
will blow up and we'll say this is what

00:39:29,369 --> 00:39:36,299
you gave me cannot possibly be a hash go

00:39:32,369 --> 00:39:40,670
get out if you want a prototype you can

00:39:36,299 --> 00:39:45,000
write this and the big change in in pro

00:39:40,670 --> 00:39:47,660
522 is that you write this it used to

00:39:45,000 --> 00:39:55,120
look completely different in pro 520

00:39:47,660 --> 00:39:57,140
like that that's just crazy that's great

00:39:55,120 --> 00:39:59,810
but this is important if you've been

00:39:57,140 --> 00:40:02,150
using this code signatures in for

00:39:59,810 --> 00:40:03,380
example catalyst and you want to move

00:40:02,150 --> 00:40:05,750
this stuff around or start using it you

00:40:03,380 --> 00:40:06,710
actually need to know about this one

00:40:05,750 --> 00:40:10,580
more thing so let's say we're going to

00:40:06,710 --> 00:40:14,540
look at this we've got a subroutine and

00:40:10,580 --> 00:40:17,270
it takes an object and an argument which

00:40:14,540 --> 00:40:19,340
is a hash ref and the queue of things to

00:40:17,270 --> 00:40:22,120
work on we're going to go work through

00:40:19,340 --> 00:40:24,710
the queue and for each item in it

00:40:22,120 --> 00:40:28,430
dereferencing it as an array we're going

00:40:24,710 --> 00:40:30,470
to debug out the items name if the debug

00:40:28,430 --> 00:40:33,890
argument is true and then we're going to

00:40:30,470 --> 00:40:35,330
accept the items job ID so the first

00:40:33,890 --> 00:40:37,250
problem is really obvious that we didn't

00:40:35,330 --> 00:40:38,750
use a signature so that's that's nice

00:40:37,250 --> 00:40:41,330
that's one little bit of code fix the

00:40:38,750 --> 00:40:43,940
other is all these d references and I

00:40:41,330 --> 00:40:45,980
don't like be references some people say

00:40:43,940 --> 00:40:48,230
the big advance in Perl 5 from 40 was

00:40:45,980 --> 00:40:52,600
references and I'm going to fix their

00:40:48,230 --> 00:40:54,680
wagon well one we can fix is like this

00:40:52,600 --> 00:40:58,040
all right and pull out that item so you

00:40:54,680 --> 00:41:01,370
drop all those arrows another one is Q

00:40:58,040 --> 00:41:03,440
right we don't like the Q had to be

00:41:01,370 --> 00:41:06,410
dereferenced and we don't like the Argus

00:41:03,440 --> 00:41:09,860
being do referenced here so how about

00:41:06,410 --> 00:41:12,110
that that's pretty nice what if we can

00:41:09,860 --> 00:41:15,830
Elias these variables directly from the

00:41:12,110 --> 00:41:18,460
references that are passed in well we

00:41:15,830 --> 00:41:22,700
can't it doesn't work it doesn't work

00:41:18,460 --> 00:41:26,330
but maybe this is something to do in pro

00:41:22,700 --> 00:41:28,610
5 24 if somebody would like to work on

00:41:26,330 --> 00:41:32,240
that pro 5 Porter's is an open list for

00:41:28,610 --> 00:41:34,580
subscription and we love new people okay

00:41:32,240 --> 00:41:36,260
so that's that is pearl 522 I think I

00:41:34,580 --> 00:41:37,510
have a couple more slides I can go to at

00:41:36,260 --> 00:41:40,160
the end of this let's do that right now

00:41:37,510 --> 00:41:45,280
there's a slide chooser here in keynote

00:41:40,160 --> 00:41:45,280
can I bring it up okay let's do this

00:41:46,420 --> 00:41:49,760
okay I'm going backwards through my

00:41:48,140 --> 00:41:51,950
slides okay let's talk about warning

00:41:49,760 --> 00:41:54,830
says we've got 13 minutes this is

00:41:51,950 --> 00:41:59,960
amazing okay I don't they have ever run

00:41:54,830 --> 00:42:01,940
short in my life okay warnings so right

00:41:59,960 --> 00:42:04,100
now you can say use warnings and that's

00:42:01,940 --> 00:42:04,660
the same as saying use warnings all turn

00:42:04,100 --> 00:42:06,220
all

00:42:04,660 --> 00:42:09,609
the warnings or you can say use warnings

00:42:06,220 --> 00:42:11,559
fatal and that turns on all the fatal

00:42:09,609 --> 00:42:13,240
warnings the problem is sometimes we

00:42:11,559 --> 00:42:16,720
want to add a new warning like who can

00:42:13,240 --> 00:42:19,420
tell what's wrong with this code smiley

00:42:16,720 --> 00:42:30,910
face yeah very good is a smiley face in

00:42:19,420 --> 00:42:35,500
there I do not like smiley faces in my

00:42:30,910 --> 00:42:37,180
code unless their emoji personally I

00:42:35,500 --> 00:42:42,220
wanted this to be a strictures failure

00:42:37,180 --> 00:42:43,329
but I'm not made of stone so we want to

00:42:42,220 --> 00:42:44,829
add this new warning and it turns out

00:42:43,329 --> 00:42:47,200
not everybody wants this new morning

00:42:44,829 --> 00:42:49,380
turned on so the first thing we do is we

00:42:47,200 --> 00:42:51,640
have this massive mailing list thread

00:42:49,380 --> 00:42:54,760
talking about adding new smiley face

00:42:51,640 --> 00:42:55,930
warnings and how they're really really

00:42:54,760 --> 00:42:57,640
useful another terrible are going to

00:42:55,930 --> 00:42:59,730
break all my code well this would be a

00:42:57,640 --> 00:43:03,339
useful warning if we had added it in Pro

00:42:59,730 --> 00:43:04,539
5.03 but the ship has sailed and we're

00:43:03,339 --> 00:43:06,640
just going to have to suck up those

00:43:04,539 --> 00:43:08,079
smiley faces and these discussions

00:43:06,640 --> 00:43:10,900
happen almost every time it's a

00:43:08,079 --> 00:43:14,710
discussion about a new warning and this

00:43:10,900 --> 00:43:16,329
is you know not a smiley feeling we want

00:43:14,710 --> 00:43:19,539
to be able to have warnings that can

00:43:16,329 --> 00:43:21,660
only be implemented in Perl that you

00:43:19,539 --> 00:43:26,230
don't have to use if you turn on

00:43:21,660 --> 00:43:27,309
warnings right I'll also say that a lot

00:43:26,230 --> 00:43:28,450
of the warnings people want to add we

00:43:27,309 --> 00:43:31,299
shouldn't be at and can be added in

00:43:28,450 --> 00:43:33,579
linters like people sometimes people are

00:43:31,299 --> 00:43:35,049
just little warning happy like there's

00:43:33,579 --> 00:43:36,760
ways to find problems of your code other

00:43:35,049 --> 00:43:40,240
than adding new warnings but sometimes

00:43:36,760 --> 00:43:42,819
there aren't so what do we do well what

00:43:40,240 --> 00:43:45,940
if use warnings meant use the default

00:43:42,819 --> 00:43:47,470
warnings and use fatal warnings was the

00:43:45,940 --> 00:43:49,660
default fatal warnings and then when you

00:43:47,470 --> 00:43:51,520
said use warnings you don't get a

00:43:49,660 --> 00:43:54,579
warning here because we don't make

00:43:51,520 --> 00:43:56,200
smiley warnings default there an extra

00:43:54,579 --> 00:43:58,480
warning available to be turned on

00:43:56,200 --> 00:43:59,799
explicitly and if you say well I want

00:43:58,480 --> 00:44:01,900
the default warnings and the smiley

00:43:59,799 --> 00:44:04,329
warnings then you get told that if you

00:44:01,900 --> 00:44:06,160
say I want all the warnings but keep in

00:44:04,329 --> 00:44:07,450
mind saying you want all the warnings is

00:44:06,160 --> 00:44:09,579
like I want all the warnings you can

00:44:07,450 --> 00:44:11,950
ever think of ever forever all of them

00:44:09,579 --> 00:44:13,660
do them all it's like running it's like

00:44:11,950 --> 00:44:16,920
running your compiler and pedantic mode

00:44:13,660 --> 00:44:18,780
at runtime right

00:44:16,920 --> 00:44:21,900
but that's what everyone has been doing

00:44:18,780 --> 00:44:24,360
since what pro 56 and that's why we

00:44:21,900 --> 00:44:27,500
can't add new morning's this literally

00:44:24,360 --> 00:44:30,780
is why we can't have nice things okay

00:44:27,500 --> 00:44:33,870
and what if we do the same thing for

00:44:30,780 --> 00:44:36,810
strictures right like who has done this

00:44:33,870 --> 00:44:38,520
we got some something that pulls for

00:44:36,810 --> 00:44:39,810
events just listens for events and it

00:44:38,520 --> 00:44:42,090
prints the event out to the log file

00:44:39,810 --> 00:44:43,410
super duper simple and then like after

00:44:42,090 --> 00:44:45,330
you've been running this for a year you

00:44:43,410 --> 00:44:46,650
say okay it's time for us to go out of

00:44:45,330 --> 00:44:47,640
those log files I'm going to check out

00:44:46,650 --> 00:44:56,370
how our business been doing for a year

00:44:47,640 --> 00:44:58,020
how's everything going oh well it's nice

00:44:56,370 --> 00:44:59,760
I guess that you can stringify a

00:44:58,020 --> 00:45:02,520
reference you know it's useful when i'm

00:44:59,760 --> 00:45:04,830
debugging but sometimes i don't mean to

00:45:02,520 --> 00:45:06,390
do that and there's some so there's a

00:45:04,830 --> 00:45:07,950
pragma for turning us off but it's kind

00:45:06,390 --> 00:45:09,030
of a crazy hack and we don't want it to

00:45:07,950 --> 00:45:10,950
be so what if we could add a stricture

00:45:09,030 --> 00:45:12,750
for this we can't turn it on by default

00:45:10,950 --> 00:45:15,090
because some people really do reliably

00:45:12,750 --> 00:45:16,830
expect it in stringify references even

00:45:15,090 --> 00:45:19,290
if they don't have string of fication

00:45:16,830 --> 00:45:20,460
overloading and that's okay it's totally

00:45:19,290 --> 00:45:23,190
reasonable like that's the expectation

00:45:20,460 --> 00:45:24,540
we've said for a long time now but some

00:45:23,190 --> 00:45:25,950
people don't like that expectation they

00:45:24,540 --> 00:45:28,380
want to fix it what if we could say no

00:45:25,950 --> 00:45:30,990
strict string ification and this would

00:45:28,380 --> 00:45:32,790
become a runtime error the first time we

00:45:30,990 --> 00:45:34,890
can't do it right now because you strict

00:45:32,790 --> 00:45:37,740
means turn on all the strictures we

00:45:34,890 --> 00:45:39,660
could never add new strictures if we

00:45:37,740 --> 00:45:41,790
change the idea of what it means to say

00:45:39,660 --> 00:45:42,990
just turn strictures on to turn on the

00:45:41,790 --> 00:45:45,030
ones that everyone agrees should be

00:45:42,990 --> 00:45:46,080
turned on in which i'll probably am it

00:45:45,030 --> 00:45:47,430
just means the ones that have been

00:45:46,080 --> 00:45:49,890
turned on forever and we can't add new

00:45:47,430 --> 00:45:51,780
ones to that group we need to figure

00:45:49,890 --> 00:45:53,670
this out too but it gives us the ability

00:45:51,780 --> 00:45:55,680
to have new strictures without the other

00:45:53,670 --> 00:45:57,780
a proposal which comes up now and then

00:45:55,680 --> 00:45:59,430
on p 5 p which is what will have you

00:45:57,780 --> 00:46:02,760
strict but will also have you strict

00:45:59,430 --> 00:46:05,310
more later will add use strict extra and

00:46:02,760 --> 00:46:08,940
i've also been thinking about you strict

00:46:05,310 --> 00:46:12,180
i found some really good ideas um okay

00:46:08,940 --> 00:46:14,790
whoa you fell right off the end of the

00:46:12,180 --> 00:46:18,570
array okay now i'm going to jump back in

00:46:14,790 --> 00:46:22,950
time Pro 522 is available right now it

00:46:18,570 --> 00:46:25,100
was released just over a week ago and no

00:46:22,950 --> 00:46:30,510
bug reports nom

00:46:25,100 --> 00:46:32,730
Thanks but actually it has been it has

00:46:30,510 --> 00:46:35,640
been a pretty a pretty good release I

00:46:32,730 --> 00:46:39,210
was really cheered kmx who does the

00:46:35,640 --> 00:46:41,400
releases of vanilla pro so strawberry

00:46:39,210 --> 00:46:43,530
perl i don't i don't like fruity ice

00:46:41,400 --> 00:46:45,780
cream he does the releases of strawberry

00:46:43,530 --> 00:46:47,340
perl sent a mail to their mailing list

00:46:45,780 --> 00:46:49,680
which is the vanilla pro mailing list is

00:46:47,340 --> 00:46:51,210
why i'm thinking this saying that in the

00:46:49,680 --> 00:46:53,220
past they've recommended that people

00:46:51,210 --> 00:46:55,020
wait until the dot one release but given

00:46:53,220 --> 00:46:56,820
stable the stability of the current and

00:46:55,020 --> 00:46:59,850
recent releases just go ahead of 0 which

00:46:56,820 --> 00:47:02,550
is a it warmed my my darkened heart ok

00:46:59,850 --> 00:47:03,870
so it's available now a higher version

00:47:02,550 --> 00:47:05,790
number than ever before another feature

00:47:03,870 --> 00:47:07,950
i could have gotten into little more we

00:47:05,790 --> 00:47:11,400
have it looks like eight minutes eight

00:47:07,950 --> 00:47:16,670
minutes unprecedented i can take so many

00:47:11,400 --> 00:47:16,670
questions so i hope there are some yes

00:47:26,120 --> 00:47:31,350
so the question is why is the backslash

00:47:28,680 --> 00:47:35,700
before the my instead of before the

00:47:31,350 --> 00:47:37,170
sigil syntax nonsense it's just it's

00:47:35,700 --> 00:47:38,460
it's just it's a question of how the

00:47:37,170 --> 00:47:46,170
parcel is going to be able to made to

00:47:38,460 --> 00:47:49,650
dance can I remember more specific

00:47:46,170 --> 00:47:50,820
information no but if we go and look at

00:47:49,650 --> 00:47:52,920
these threads and you can bug me later

00:47:50,820 --> 00:47:54,390
and I'll dig them up it had to be done

00:47:52,920 --> 00:48:06,900
this way and yet it is a little weird

00:47:54,390 --> 00:48:08,790
but yes what if you want to put the

00:48:06,900 --> 00:48:10,670
alias into so you don't want to say my

00:48:08,790 --> 00:48:13,610
right you want on game let's find out

00:48:10,670 --> 00:48:20,130
this is something never seen before I

00:48:13,610 --> 00:48:21,690
will be doing a live demo but first I'm

00:48:20,130 --> 00:48:27,840
going to have to get my terminal on to

00:48:21,690 --> 00:48:30,770
the other skrill here we go let's find

00:48:27,840 --> 00:48:30,770
out okay

00:48:45,280 --> 00:48:47,910
ok

00:48:49,970 --> 00:48:53,720
are you ready so let's look through the

00:48:51,470 --> 00:48:56,480
program yet here's our program we're

00:48:53,720 --> 00:48:59,780
going to make it a ray ref alias and

00:48:56,480 --> 00:49:08,060
existing variable to it and then shift

00:48:59,780 --> 00:49:23,330
and say something someone said don't you

00:49:08,060 --> 00:49:35,869
want to say X let's do both yeah anybody

00:49:23,330 --> 00:49:37,040
else yes Nick so and one of the other

00:49:35,869 --> 00:49:41,090
rooms I think I talked about Pearl six

00:49:37,040 --> 00:49:43,099
right now and so the quite the question

00:49:41,090 --> 00:49:47,150
was when will there be an operator to do

00:49:43,099 --> 00:49:50,210
string bitwise logic on unicode code

00:49:47,150 --> 00:49:51,980
point values no I really think you won't

00:49:50,210 --> 00:49:54,589
I think you're likely going to have to

00:49:51,980 --> 00:50:05,630
use map maybe bit vector could help in

00:49:54,589 --> 00:50:07,310
some way yeah what you you're just

00:50:05,630 --> 00:50:09,680
you're just trying to help me kill these

00:50:07,310 --> 00:50:10,580
eight minutes aren't you yeah no I don't

00:50:09,680 --> 00:50:11,750
think that's ever going to happen i

00:50:10,580 --> 00:50:13,520
don't think i don't think it's needed i

00:50:11,750 --> 00:50:18,290
mean what you do in pro 6 is you'd have

00:50:13,520 --> 00:50:20,530
some way of like of operating mapping

00:50:18,290 --> 00:50:22,910
your operation across the graphemes and

00:50:20,530 --> 00:50:25,130
zipping them together and you could use

00:50:22,910 --> 00:50:27,200
something like that in pro 5 i'd be a

00:50:25,130 --> 00:50:28,970
little clunkier but but the things you

00:50:27,200 --> 00:50:30,020
wouldn't use it right if anybody in this

00:50:28,970 --> 00:50:30,920
room is going to be doing it it's you

00:50:30,020 --> 00:50:36,710
and you're saying you're not going to

00:50:30,920 --> 00:50:38,869
use it it's okay here's what we're going

00:50:36,710 --> 00:50:43,270
to do are you ready you can have that

00:50:38,869 --> 00:50:43,270
feature when you write it thank you

00:50:43,660 --> 00:50:46,660
ok

00:50:54,230 --> 00:51:02,250
anybody else moving on beeler cialis

00:51:01,500 --> 00:51:03,900
identity also want to talk about

00:51:02,250 --> 00:51:11,700
anything else anybody wants me to

00:51:03,900 --> 00:51:13,109
mention yes so the reason you want to do

00:51:11,700 --> 00:51:14,849
pit so when you talk about bitwise

00:51:13,109 --> 00:51:16,530
operators on strings it's important to

00:51:14,849 --> 00:51:19,920
remember that pearl is a flawed and

00:51:16,530 --> 00:51:22,440
terrible language and specifically what

00:51:19,920 --> 00:51:24,900
I mean is we have one type the string

00:51:22,440 --> 00:51:28,770
that is used for both character strings

00:51:24,900 --> 00:51:30,240
and byte strings and if you have a set

00:51:28,770 --> 00:51:31,830
of bites here's an example in fact I

00:51:30,240 --> 00:51:34,230
took at an online course on cryptography

00:51:31,830 --> 00:51:35,369
and there's a lot of fun and the

00:51:34,230 --> 00:51:37,650
homework assignments included things

00:51:35,369 --> 00:51:39,510
like here is some very flawed ciphers

00:51:37,650 --> 00:51:41,340
break them and you end up with like

00:51:39,510 --> 00:51:44,130
input strings that you're reading from a

00:51:41,340 --> 00:51:45,720
file and their bites and you think you

00:51:44,130 --> 00:51:46,950
know the key and how does like really

00:51:45,720 --> 00:51:48,930
bad crypto work well you have two

00:51:46,950 --> 00:51:50,250
strings and you XOR them together well

00:51:48,930 --> 00:51:51,480
if you've read in a string of bytes from

00:51:50,250 --> 00:51:53,790
a file you've got to string the bytes

00:51:51,480 --> 00:51:57,300
that is the key and you can XOR them all

00:51:53,790 --> 00:51:59,010
in matching values that's really useful

00:51:57,300 --> 00:52:01,530
so it's useful because you think of

00:51:59,010 --> 00:52:04,140
strings here as strings of bytes or more

00:52:01,530 --> 00:52:06,060
usefully strings of bits without having

00:52:04,140 --> 00:52:10,530
to use like bit colon colon vector or

00:52:06,060 --> 00:52:11,790
god forbid unpack or Veck so that's

00:52:10,530 --> 00:52:14,550
really useful but using it for strings

00:52:11,790 --> 00:52:17,670
of text is kind of weird anyone else

00:52:14,550 --> 00:52:22,170
it's a way to back over here what who's

00:52:17,670 --> 00:52:24,990
I'm being redirected around Carl oh yeah

00:52:22,170 --> 00:52:29,070
I'll Carl thank you yes so this is

00:52:24,990 --> 00:52:30,960
almost apropos of nothing um one of the

00:52:29,070 --> 00:52:35,070
reasons that pearl is so stable released

00:52:30,960 --> 00:52:37,619
to release is that we there's a lot of

00:52:35,070 --> 00:52:40,290
testing done on every change we make

00:52:37,619 --> 00:52:43,770
there are people who have computers

00:52:40,290 --> 00:52:46,890
running that smoke Sipan constantly it

00:52:43,770 --> 00:52:49,560
is reinstall everything on almost every

00:52:46,890 --> 00:52:51,900
commit of pearl and then tell you what

00:52:49,560 --> 00:52:56,720
broke and that means we get bug reports

00:52:51,900 --> 00:52:59,520
as if from an automated system that say

00:52:56,720 --> 00:53:01,320
this commit broke these three modules

00:52:59,520 --> 00:53:03,390
and here are links to the failure report

00:53:01,320 --> 00:53:05,760
from their test suite and I say as if by

00:53:03,390 --> 00:53:07,210
automated system because they are done

00:53:05,760 --> 00:53:09,580
by human beings

00:53:07,210 --> 00:53:11,710
almost entirely by andreas Koenig who

00:53:09,580 --> 00:53:15,940
runs pause and who runs annal and

00:53:11,710 --> 00:53:19,540
analytics dot C pen testers org he is a

00:53:15,940 --> 00:53:22,510
treasure and and with the rest of the

00:53:19,540 --> 00:53:26,020
tester system is largely responsible for

00:53:22,510 --> 00:53:27,730
us not breaking Sipan all the time so

00:53:26,020 --> 00:53:30,150
thank you andreas I don't imagine you're

00:53:27,730 --> 00:53:30,150
watching this

00:53:33,850 --> 00:53:37,990
some sometime if you if you ever get any

00:53:36,910 --> 00:53:40,600
if your CP an author and you get an

00:53:37,990 --> 00:53:41,950
email from andreas or from the sea pen

00:53:40,600 --> 00:53:44,020
testers or from the automated pause

00:53:41,950 --> 00:53:52,090
Damon just reply and tell them these

00:53:44,020 --> 00:53:53,620
great okay someone else Peter oh that's

00:53:52,090 --> 00:53:54,820
a yes these are so these are the people

00:53:53,620 --> 00:53:59,110
reminding me of things I said I had to

00:53:54,820 --> 00:54:01,000
cut um so yes we've added a new platform

00:53:59,110 --> 00:54:02,830
support or perhaps restored platform

00:54:01,000 --> 00:54:06,430
support and everyone is gonna be

00:54:02,830 --> 00:54:12,610
thrilled we are finally building again

00:54:06,430 --> 00:54:14,610
on z/os IBM z/os which ran on run around

00:54:12,610 --> 00:54:17,200
on the das 360 what we're in that on

00:54:14,610 --> 00:54:19,930
well it's it runs on mainframes it's for

00:54:17,200 --> 00:54:21,670
MVS systems and the thing that makes it

00:54:19,930 --> 00:54:24,060
magical and special is that it is not an

00:54:21,670 --> 00:54:26,740
ASCII based system it is episodic based

00:54:24,060 --> 00:54:29,560
so pro again supports absa dick I

00:54:26,740 --> 00:54:31,930
believe the only of the big P languages

00:54:29,560 --> 00:54:33,790
to have ever supported ebb stick and to

00:54:31,930 --> 00:54:36,210
support it now and have a tester running

00:54:33,790 --> 00:54:39,250
rocket software runs a tester that runs

00:54:36,210 --> 00:54:41,610
regular smoke tests against new builds

00:54:39,250 --> 00:54:43,890
of pearl which is it's crazy yeah it's

00:54:41,610 --> 00:54:47,800
do you want to clap for that I think

00:54:43,890 --> 00:54:51,460
what was that and all the tests pass all

00:54:47,800 --> 00:54:54,090
the tests today all past now there was

00:54:51,460 --> 00:54:54,090
one more hand yes

00:55:00,830 --> 00:55:06,119
so the question is something like this

00:55:04,500 --> 00:55:09,480
are we ever going to remove stuff that's

00:55:06,119 --> 00:55:13,700
experimental or make or promote them i

00:55:09,480 --> 00:55:16,770
see ok or promote them i I believe that

00:55:13,700 --> 00:55:18,750
524 will have an example of both

00:55:16,770 --> 00:55:21,630
promoting an experimental feature to

00:55:18,750 --> 00:55:25,050
stable and of removing an experimental

00:55:21,630 --> 00:55:26,490
feature from the system some of those

00:55:25,050 --> 00:55:28,380
discussions going on on the list now

00:55:26,490 --> 00:55:32,310
there's multiple features under

00:55:28,380 --> 00:55:35,010
discussion I I think I think the system

00:55:32,310 --> 00:55:36,420
works the experimental system which was

00:55:35,010 --> 00:55:38,670
added so that we would no longer have

00:55:36,420 --> 00:55:40,500
features that were experimental but used

00:55:38,670 --> 00:55:42,869
by everyone and had been experimental

00:55:40,500 --> 00:55:44,369
for 12 years we're trying to make using

00:55:42,869 --> 00:55:46,320
an experimental feature a little more

00:55:44,369 --> 00:55:48,420
obnoxious just a little more so you have

00:55:46,320 --> 00:55:49,589
to really notice it using it and so that

00:55:48,420 --> 00:55:51,180
eventually we can say you know what this

00:55:49,589 --> 00:55:52,349
didn't work out or this worked out but

00:55:51,180 --> 00:55:54,240
we don't think we actually need it

00:55:52,349 --> 00:55:57,510
things like that so I think we'll see

00:55:54,240 --> 00:56:00,960
but that the policy executed in both

00:55:57,510 --> 00:56:02,700
directions the next few months uh run

00:56:00,960 --> 00:56:06,920
date again how we doing oh my I've gone

00:56:02,700 --> 00:56:06,920
over unbelievable

00:56:10,299 --> 00:56:19,140
and eat any final question nope okay

00:56:15,130 --> 00:56:19,140

YouTube URL: https://www.youtube.com/watch?v=I8VVtqVh9y0


