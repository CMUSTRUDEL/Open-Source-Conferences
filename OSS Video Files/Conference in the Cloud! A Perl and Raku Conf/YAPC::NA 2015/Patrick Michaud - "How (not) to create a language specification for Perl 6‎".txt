Title: Patrick Michaud - "How (not) to create a language specification for Perl 6‎"
Publication date: 2015-06-16
Playlist: YAPC::NA 2015
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:04,049
all I did was go to the organizers would

00:00:02,100 --> 00:00:05,879
say that time doesn't work we have a

00:00:04,049 --> 00:00:09,200
different woman yeah there's no damage

00:00:05,879 --> 00:00:09,200
just have to watch the ice skates off

00:00:09,590 --> 00:00:15,839
jack I don't want to go any morning I

00:00:12,750 --> 00:00:18,949
prefer to me today and I think there's

00:00:15,839 --> 00:00:21,840
still two more minutes and sardines I

00:00:18,949 --> 00:00:28,650
already know things going on and move

00:00:21,840 --> 00:00:30,869
tongue so this is a okay this is a this

00:00:28,650 --> 00:00:33,600
is a talk to the scheduled like on

00:00:30,869 --> 00:00:35,850
Monday a few cancellations a few people

00:00:33,600 --> 00:00:37,350
were interested in giving this talk or

00:00:35,850 --> 00:00:39,360
be giving this talk so I asked them that

00:00:37,350 --> 00:00:40,559
had been but steadily but if they've

00:00:39,360 --> 00:00:41,879
done it yesterday morning that means

00:00:40,559 --> 00:00:43,739
people would have had to learn about it

00:00:41,879 --> 00:00:45,059
between four o'clock in the afternoon on

00:00:43,739 --> 00:00:47,250
monday and right and they're learning to

00:00:45,059 --> 00:00:48,899
it without gotcha so and it would have

00:00:47,250 --> 00:00:51,809
been across from j sponsors you know

00:00:48,899 --> 00:00:53,910
budapest rating look for videos well

00:00:51,809 --> 00:00:55,559
it's frustrating for me I i see is one

00:00:53,910 --> 00:01:05,549
of the ones i was pretty epic i want to

00:00:55,559 --> 00:01:08,299
see the song so see here i was talking

00:01:05,549 --> 00:01:08,299
about 40 seconds

00:01:18,500 --> 00:01:24,340
of Master no nom nom

00:01:25,240 --> 00:01:34,830
we don't have a master anymore we did we

00:01:31,240 --> 00:01:38,649
we because when we kept having to do

00:01:34,830 --> 00:01:41,470
well we kept having to do newer major

00:01:38,649 --> 00:01:43,810
reef actors at some point you need to

00:01:41,470 --> 00:01:45,100
switch from your original branch to the

00:01:43,810 --> 00:01:46,960
other one and if what we didn't want to

00:01:45,100 --> 00:01:50,350
do a merge we just wanted to make the

00:01:46,960 --> 00:01:52,450
new branch our new master so instead we

00:01:50,350 --> 00:01:55,409
just internally know which one is the

00:01:52,450 --> 00:01:55,409
master installed

00:01:59,550 --> 00:02:09,630
I don't want to delete the old one yeah

00:02:03,050 --> 00:02:11,460
yeah and remember when we were doing

00:02:09,630 --> 00:02:18,990
this was five year for five years ago so

00:02:11,460 --> 00:02:22,670
get may have advanced since then so I'm

00:02:18,990 --> 00:02:22,670
fine with it being the way it is for now

00:02:24,300 --> 00:02:27,510
because we really don't expect most

00:02:26,100 --> 00:02:30,440
people to be downloading from the git

00:02:27,510 --> 00:02:30,440
repository anyway

00:02:32,110 --> 00:02:40,430
we yeah alrighty it's a it's one-thirty

00:02:37,819 --> 00:02:41,780
so I'll go and start and I'll try and

00:02:40,430 --> 00:02:43,370
stay in front of the microphone if not

00:02:41,780 --> 00:02:44,930
i'll pick it up and do things welcome

00:02:43,370 --> 00:02:49,099
everybody good afternoon hope you had a

00:02:44,930 --> 00:02:52,280
good lunch I'm Patrick if you don't know

00:02:49,099 --> 00:02:53,840
who I am yet my talk is how not to

00:02:52,280 --> 00:02:55,970
create a language specification for perl

00:02:53,840 --> 00:02:58,099
6 this is a talk I originally gave it

00:02:55,970 --> 00:03:01,400
foz dem and it was the prelude to

00:02:58,099 --> 00:03:05,690
Larry's announcement of Perl 6 being

00:03:01,400 --> 00:03:07,100
released this year and so there were so

00:03:05,690 --> 00:03:08,600
I figured I'd better get my talk in

00:03:07,100 --> 00:03:10,720
about all the things that he better not

00:03:08,600 --> 00:03:12,980
do before he made the announcement and

00:03:10,720 --> 00:03:14,569
this talk this talk went over really

00:03:12,980 --> 00:03:15,709
well so I'm reprising it here to

00:03:14,569 --> 00:03:18,620
actually North America and I'm really

00:03:15,709 --> 00:03:19,819
glad to do that as I go through the talk

00:03:18,620 --> 00:03:21,560
if you have any questions feel free to

00:03:19,819 --> 00:03:24,400
ask questions and stuff it will take

00:03:21,560 --> 00:03:27,650
most of the 50 minutes that I available

00:03:24,400 --> 00:03:29,660
but I think it's a really fun talk so

00:03:27,650 --> 00:03:34,730
what this talk is about is some things

00:03:29,660 --> 00:03:36,799
that I got turn on my thing and I'm

00:03:34,730 --> 00:03:40,390
gonna have to do this because I can't

00:03:36,799 --> 00:03:43,700
stand still what this talk is about is

00:03:40,390 --> 00:03:45,950
things that I've learned about how you

00:03:43,700 --> 00:03:49,100
create a language and in Perl 6 this

00:03:45,950 --> 00:03:50,840
case how not to do it over the last 10

00:03:49,100 --> 00:03:52,459
or so years and its really really

00:03:50,840 --> 00:03:54,260
surprising to me and when I give this

00:03:52,459 --> 00:03:57,500
talk many people also have a similar oh

00:03:54,260 --> 00:03:59,569
my gosh moment about some of the lessons

00:03:57,500 --> 00:04:01,670
that are there so for an overview of the

00:03:59,569 --> 00:04:03,380
talk I'm gonna start by looking at what

00:04:01,670 --> 00:04:06,560
do we really mean when we say a language

00:04:03,380 --> 00:04:08,750
specification then the next part is to

00:04:06,560 --> 00:04:10,010
talk about the Perl 6 design process and

00:04:08,750 --> 00:04:13,190
some of the mistakes that I think were

00:04:10,010 --> 00:04:15,109
made there things that I think are

00:04:13,190 --> 00:04:17,359
important features about a language

00:04:15,109 --> 00:04:19,789
specification that again are not

00:04:17,359 --> 00:04:21,500
intuitive it's not what we in the pearl

00:04:19,789 --> 00:04:23,240
community and perhaps in a larger

00:04:21,500 --> 00:04:29,180
community tend to think of and then

00:04:23,240 --> 00:04:31,340
where we can go from here um so the

00:04:29,180 --> 00:04:35,150
history of how this talk comes together

00:04:31,340 --> 00:04:37,550
is that for several years now in working

00:04:35,150 --> 00:04:40,159
with perl 6 i've been thinking about

00:04:37,550 --> 00:04:42,950
this whole language design process that

00:04:40,159 --> 00:04:45,560
we've gone through and i keep finding

00:04:42,950 --> 00:04:45,920
places where within the Perl 6 community

00:04:45,560 --> 00:04:48,590
that does

00:04:45,920 --> 00:04:50,450
19 the people working on it I keep we

00:04:48,590 --> 00:04:52,370
keep running into places where we're

00:04:50,450 --> 00:04:54,050
being very in precise with the words

00:04:52,370 --> 00:04:56,000
we're using and the terms we're using

00:04:54,050 --> 00:04:59,630
and even when we talk about the language

00:04:56,000 --> 00:05:02,570
spec right what that means has been this

00:04:59,630 --> 00:05:04,190
nebulous thing that we work around and I

00:05:02,570 --> 00:05:06,710
a few years ago I was like we really

00:05:04,190 --> 00:05:10,250
need to lock this down somehow we need

00:05:06,710 --> 00:05:12,680
to get some rigor to it and it's been a

00:05:10,250 --> 00:05:15,020
crusade over that few period of years

00:05:12,680 --> 00:05:16,880
within the Perl 6 group that will go to

00:05:15,020 --> 00:05:18,830
meetings and people will use something

00:05:16,880 --> 00:05:20,450
in a somewhat Cavalier Way including

00:05:18,830 --> 00:05:22,970
myself and I'll do it and I get caught

00:05:20,450 --> 00:05:25,280
out on it and you know it's kind of like

00:05:22,970 --> 00:05:27,050
no you know that's really not what we

00:05:25,280 --> 00:05:29,360
should be saying and not only that but

00:05:27,050 --> 00:05:32,270
if we're going to have a release of Perl

00:05:29,360 --> 00:05:34,220
6 the language we need to know this

00:05:32,270 --> 00:05:36,470
rigger we need to have these things kind

00:05:34,220 --> 00:05:38,390
of in place and so when the FA's dead

00:05:36,470 --> 00:05:39,620
talk came up I said this is a good

00:05:38,390 --> 00:05:41,390
chance for me to take all these random

00:05:39,620 --> 00:05:42,590
thoughts that have been having over the

00:05:41,390 --> 00:05:44,150
past couple of years and at least put

00:05:42,590 --> 00:05:47,480
them into a talk and share them with

00:05:44,150 --> 00:05:50,810
others um so most of what's here is my

00:05:47,480 --> 00:05:52,190
opinion it is you know things that I

00:05:50,810 --> 00:05:54,140
think are the way it should be but I

00:05:52,190 --> 00:05:55,520
wouldn't present them as being fact I

00:05:54,140 --> 00:05:58,250
wouldn't present them as being something

00:05:55,520 --> 00:06:02,270
that's immutable so their ideas that are

00:05:58,250 --> 00:06:03,620
still very much up for discussion so

00:06:02,270 --> 00:06:06,860
let's look at first of all what do we

00:06:03,620 --> 00:06:08,510
mean by language specification so what

00:06:06,860 --> 00:06:10,550
is a language specification many

00:06:08,510 --> 00:06:13,610
languages have them like Ada and Pascal

00:06:10,550 --> 00:06:15,830
and C and so forth some languages don't

00:06:13,610 --> 00:06:18,590
have a specification that exists outside

00:06:15,830 --> 00:06:20,240
of language pro/5 certainly is in that

00:06:18,590 --> 00:06:22,580
case you know if you go ask for the

00:06:20,240 --> 00:06:23,900
pro/5 language specification the

00:06:22,580 --> 00:06:25,820
traditional answer always has been

00:06:23,900 --> 00:06:29,030
whatever the Perl 5 interpreter gives

00:06:25,820 --> 00:06:31,820
you that's what the language is PHP

00:06:29,030 --> 00:06:33,080
prior to about 2 2014 was in the same

00:06:31,820 --> 00:06:36,350
boat there was no language specification

00:06:33,080 --> 00:06:38,270
for PHP it was whatever is implemented

00:06:36,350 --> 00:06:40,190
in the version of PHP you have that's

00:06:38,270 --> 00:06:42,710
the language spec since then they have

00:06:40,190 --> 00:06:45,710
begun building a language spec for PHP

00:06:42,710 --> 00:06:48,820
and then the other thing is this blatant

00:06:45,710 --> 00:06:51,800
we say what is a language specification

00:06:48,820 --> 00:06:53,270
the specification itself what what do

00:06:51,800 --> 00:06:56,570
you mean what kind of form does that

00:06:53,270 --> 00:06:58,850
take some languages have a very explicit

00:06:56,570 --> 00:06:59,180
definition and the use syntax in formal

00:06:58,850 --> 00:07:01,940
sense

00:06:59,180 --> 00:07:04,039
so some languages are defined by a B and

00:07:01,940 --> 00:07:06,020
F grammar and you go and look and they

00:07:04,039 --> 00:07:07,310
say this is what it is and this is what

00:07:06,020 --> 00:07:10,330
it doesn't and then these are the

00:07:07,310 --> 00:07:13,130
semantics for some other languages I

00:07:10,330 --> 00:07:14,600
just say here's how the like how the

00:07:13,130 --> 00:07:16,729
language works and they do it in natural

00:07:14,600 --> 00:07:18,889
language description APL was that way

00:07:16,729 --> 00:07:20,389
for quite a while where they basically

00:07:18,889 --> 00:07:22,310
described how it all worked but there

00:07:20,389 --> 00:07:25,820
wasn't like a formal notation for

00:07:22,310 --> 00:07:27,949
describing how it worked and some some

00:07:25,820 --> 00:07:30,320
languages can be specified by a model or

00:07:27,949 --> 00:07:32,419
a reference implementation and they say

00:07:30,320 --> 00:07:36,349
whatever that one does that is the way

00:07:32,419 --> 00:07:37,940
to do it so we have to kind of say what

00:07:36,349 --> 00:07:40,490
do we mean when we say something is

00:07:37,940 --> 00:07:44,630
according to the specification um in

00:07:40,490 --> 00:07:47,240
this word specification right has a

00:07:44,630 --> 00:07:49,910
pretty precise meaning when we talk

00:07:47,240 --> 00:07:52,610
about specs it's an explicit set of

00:07:49,910 --> 00:07:55,699
requirements to be satisfied by material

00:07:52,610 --> 00:07:58,070
design product or service right so it's

00:07:55,699 --> 00:08:01,130
a set of requirements and it's not a set

00:07:58,070 --> 00:08:03,110
of conjectures and for that reason I

00:08:01,130 --> 00:08:05,409
these days try and make a distinction

00:08:03,110 --> 00:08:07,789
between the term design and

00:08:05,409 --> 00:08:09,349
specification design is often

00:08:07,789 --> 00:08:12,349
conjectural this is how we think it

00:08:09,349 --> 00:08:14,060
ought to work and specification is how

00:08:12,349 --> 00:08:16,849
it has to work if it's going to meet

00:08:14,060 --> 00:08:19,580
that specification and that makes it

00:08:16,849 --> 00:08:21,979
kind of different um the other thing

00:08:19,580 --> 00:08:23,740
that's interesting about or to give an

00:08:21,979 --> 00:08:25,520
example of language specification

00:08:23,740 --> 00:08:26,990
especially one that has evolved over

00:08:25,520 --> 00:08:30,349
time you can look at the C programming

00:08:26,990 --> 00:08:31,490
language so the original specification

00:08:30,349 --> 00:08:34,969
for the C programming language is

00:08:31,490 --> 00:08:36,979
arguably knr the C programming language

00:08:34,969 --> 00:08:41,510
by Kernighan and Richie published in

00:08:36,979 --> 00:08:43,430
1978 and that was it had a mix of B&F

00:08:41,510 --> 00:08:46,220
grammars or they you know a grammar

00:08:43,430 --> 00:08:48,980
specification and prose describing how

00:08:46,220 --> 00:08:51,140
the C language worked and then later

00:08:48,980 --> 00:08:52,670
there was attempts to standardize this

00:08:51,140 --> 00:08:55,040
through former formal standards

00:08:52,670 --> 00:08:58,399
committees so we have things like nccc

00:08:55,040 --> 00:09:00,770
89 iso did it together then those were

00:08:58,399 --> 00:09:03,440
combined and that became c99 and now c11

00:09:00,770 --> 00:09:06,050
so when we look at a language and say

00:09:03,440 --> 00:09:08,089
what is the language specification that

00:09:06,050 --> 00:09:09,829
is the kind of thing I now think of when

00:09:08,089 --> 00:09:10,790
I think of language specification is

00:09:09,829 --> 00:09:12,709
something like a C language

00:09:10,790 --> 00:09:16,680
specification

00:09:12,709 --> 00:09:19,680
if we look at another example 1 we can

00:09:16,680 --> 00:09:22,139
look at Python so Python if you go ask

00:09:19,680 --> 00:09:24,269
the Python community and the people who

00:09:22,139 --> 00:09:25,620
work on Python where's your official

00:09:24,269 --> 00:09:27,480
language specification they say we

00:09:25,620 --> 00:09:29,329
really don't have one right but we do

00:09:27,480 --> 00:09:32,519
have the Python language reference and

00:09:29,329 --> 00:09:34,740
so most of them treat the language

00:09:32,519 --> 00:09:37,529
reference as being their specification

00:09:34,740 --> 00:09:39,750
the reference describes the language in

00:09:37,529 --> 00:09:42,269
pretty good detail but it does leave

00:09:39,750 --> 00:09:43,709
some details ambiguous it explicitly

00:09:42,269 --> 00:09:45,930
says these are places where

00:09:43,709 --> 00:09:47,579
implementations are allowed to go and do

00:09:45,930 --> 00:09:50,000
slightly different things and it does

00:09:47,579 --> 00:09:51,810
that on purpose and recognizes that and

00:09:50,000 --> 00:09:53,420
finally when we're talking about

00:09:51,810 --> 00:09:56,389
languages I think we have to talk about

00:09:53,420 --> 00:10:00,029
things just beyond the traditional

00:09:56,389 --> 00:10:02,730
programming language you need to look at

00:10:00,029 --> 00:10:04,649
things like HTML and HTML is a language

00:10:02,730 --> 00:10:08,730
it's right there in HTML that's what the

00:10:04,649 --> 00:10:10,560
ELL means is language and so htmls a

00:10:08,730 --> 00:10:13,259
language it has a formal specification

00:10:10,560 --> 00:10:16,230
that specification is maintained by w3c

00:10:13,259 --> 00:10:18,329
the world wide web consortium and early

00:10:16,230 --> 00:10:22,079
versions of HTML were in fact Internet

00:10:18,329 --> 00:10:24,389
rfcs right so that's another when we

00:10:22,079 --> 00:10:28,350
talk about a specification I want to

00:10:24,389 --> 00:10:29,970
move beyond what we kind of nebulous Lee

00:10:28,350 --> 00:10:31,889
referred to in the pearl community both

00:10:29,970 --> 00:10:33,870
pro 5 and 6 and say you know there are

00:10:31,889 --> 00:10:35,639
standards bodies out there that create

00:10:33,870 --> 00:10:38,879
these things called specifications and

00:10:35,639 --> 00:10:41,639
that's what we're doing many are effort

00:10:38,879 --> 00:10:44,100
rfcs graduate to be specification

00:10:41,639 --> 00:10:46,170
documents so HTTP right there's a

00:10:44,100 --> 00:10:48,029
specification for HTTP and you can say

00:10:46,170 --> 00:10:52,319
am I compliant with that specification

00:10:48,029 --> 00:10:55,290
or not smtp URLs all these things have

00:10:52,319 --> 00:10:59,160
formal specifications of some sort good

00:10:55,290 --> 00:11:01,319
so far right so if we have about pro 5

00:10:59,160 --> 00:11:05,790
what is pearl 5s language specification

00:11:01,319 --> 00:11:09,240
is it the camel book no is it the

00:11:05,790 --> 00:11:12,600
interpreter yes no maybe is it the test

00:11:09,240 --> 00:11:17,250
suite no is it Larry sometimes all right

00:11:12,600 --> 00:11:19,589
because we have rule 1 and rule too but

00:11:17,250 --> 00:11:22,860
you know pearl fives language

00:11:19,589 --> 00:11:23,950
specification has always been a uh yeah

00:11:22,860 --> 00:11:25,720
okay you know

00:11:23,950 --> 00:11:27,250
whatever the interpreter does that's

00:11:25,720 --> 00:11:29,020
what it is right now and that's worked

00:11:27,250 --> 00:11:33,160
well I mean it's worked well for 25

00:11:29,020 --> 00:11:36,040
years but I think part of one of the

00:11:33,160 --> 00:11:37,300
mistakes that is made is how that's

00:11:36,040 --> 00:11:38,860
actually influenced the way we think

00:11:37,300 --> 00:11:40,750
about languages in general including

00:11:38,860 --> 00:11:44,920
about pearl six and you'll see why in a

00:11:40,750 --> 00:11:47,680
little bit so pro five doesn't have a

00:11:44,920 --> 00:11:50,290
separate language specification row five

00:11:47,680 --> 00:11:51,550
interpreter is the de facto one whatever

00:11:50,290 --> 00:11:53,320
pearl five interprets that's the

00:11:51,550 --> 00:11:55,510
standard behavior and if pro/5

00:11:53,320 --> 00:11:57,970
misbehaves see the previous rule even if

00:11:55,510 --> 00:11:59,320
pro five changes its mind right it's

00:11:57,970 --> 00:12:04,870
kind of the the Larry of language

00:11:59,320 --> 00:12:07,630
specification built into pro five so now

00:12:04,870 --> 00:12:09,130
let's take that background and look at

00:12:07,630 --> 00:12:12,670
the pearl six language specification

00:12:09,130 --> 00:12:14,740
history so little history of pearl six

00:12:12,670 --> 00:12:17,140
been mentioned many times but just to

00:12:14,740 --> 00:12:18,790
briefly review / 06 was announced the

00:12:17,140 --> 00:12:22,300
beginning of the the effort to create

00:12:18,790 --> 00:12:24,370
Perl 6 was in july two thousand they

00:12:22,300 --> 00:12:27,670
commissioned RFC's they were called

00:12:24,370 --> 00:12:29,170
RFC's and 361 things were submitted that

00:12:27,670 --> 00:12:31,870
these are significant are these are

00:12:29,170 --> 00:12:33,910
changes we should make to pearl at that

00:12:31,870 --> 00:12:36,790
time pearl 5 in order to create this new

00:12:33,910 --> 00:12:39,670
thing called pearl 6 those were refined

00:12:36,790 --> 00:12:43,600
into apocalypses and synopses and most

00:12:39,670 --> 00:12:45,970
importantly unlike pearl 5 perl 6 would

00:12:43,600 --> 00:12:47,740
start out as a specification and then we

00:12:45,970 --> 00:12:49,330
would create implementations for that

00:12:47,740 --> 00:12:51,850
spec there would no longer be this

00:12:49,330 --> 00:12:54,780
whatever the Perl interpreter does is

00:12:51,850 --> 00:12:57,340
the spec we wanted to explicitly

00:12:54,780 --> 00:13:00,190
separate the idea that the language was

00:12:57,340 --> 00:13:02,530
tied to a specific implementation right

00:13:00,190 --> 00:13:05,320
that often feels for him to pearl

00:13:02,530 --> 00:13:08,320
programmers it feels very very foreign

00:13:05,320 --> 00:13:14,440
to probe programmers but and by the way

00:13:08,320 --> 00:13:18,700
oops right alright so the herbs part of

00:13:14,440 --> 00:13:20,500
this is down here at the bottom that we

00:13:18,700 --> 00:13:23,890
start with a specification and then do

00:13:20,500 --> 00:13:25,390
implementations in retrospect if you try

00:13:23,890 --> 00:13:27,190
and specify a language before you start

00:13:25,390 --> 00:13:29,740
implementing it you're making a big

00:13:27,190 --> 00:13:33,790
mistake you're making a really really

00:13:29,740 --> 00:13:35,500
big mistake so specification is if you

00:13:33,790 --> 00:13:37,090
use that word spec what are the specs

00:13:35,500 --> 00:13:37,960
for this language it's too loaded with

00:13:37,090 --> 00:13:39,790
meaning

00:13:37,960 --> 00:13:42,280
right because it's that set of

00:13:39,790 --> 00:13:44,500
requirements and that implies some

00:13:42,280 --> 00:13:45,790
rigidity and permanence to whatever it

00:13:44,500 --> 00:13:47,830
is you're deciding before you've even

00:13:45,790 --> 00:13:49,930
tested it how many people want to run

00:13:47,830 --> 00:13:52,420
programs they've never tested done no

00:13:49,930 --> 00:13:53,890
testing right how many would want to

00:13:52,420 --> 00:13:59,830
commit something to production without

00:13:53,890 --> 00:14:02,710
testing it right right and yet the whole

00:13:59,830 --> 00:14:04,210
process that we went through was let's

00:14:02,710 --> 00:14:06,940
create the spec and then implement it

00:14:04,210 --> 00:14:09,100
and try and commit to a spec before we

00:14:06,940 --> 00:14:10,690
start implementing it that's really kind

00:14:09,100 --> 00:14:12,940
of a big mistake once you think about it

00:14:10,690 --> 00:14:15,280
in retrospect so can we talk about a

00:14:12,940 --> 00:14:17,830
design plan sure we can say this is our

00:14:15,280 --> 00:14:19,210
plan for how pearl six will work and we

00:14:17,830 --> 00:14:21,850
can talk about the synopses you could

00:14:19,210 --> 00:14:23,770
even do those that can work but

00:14:21,850 --> 00:14:27,430
everybody was talking about what is the

00:14:23,770 --> 00:14:30,160
specification for perl 6 and that term

00:14:27,430 --> 00:14:31,330
that very term that notion of coming up

00:14:30,160 --> 00:14:33,820
with the spec first and then

00:14:31,330 --> 00:14:35,140
implementing it leads to a ton of

00:14:33,820 --> 00:14:36,930
confusion and i'm going to give some

00:14:35,140 --> 00:14:40,630
examples through the rest of this talk

00:14:36,930 --> 00:14:43,450
right the biggest set of confusion has

00:14:40,630 --> 00:14:45,250
been in the process itself so here's

00:14:43,450 --> 00:14:48,070
confusion that it caused in the pearl

00:14:45,250 --> 00:14:51,220
and outside communities so a common

00:14:48,070 --> 00:14:56,440
question that I have heard for over a

00:14:51,220 --> 00:15:00,010
decade when will Perl 6 be ready right

00:14:56,440 --> 00:15:01,300
everybody answer is Christmas right and

00:15:00,010 --> 00:15:03,280
then you say which Christmas all that

00:15:01,300 --> 00:15:04,870
stuff but always everybody says when

00:15:03,280 --> 00:15:06,370
will Perl 6 be ready and we say well

00:15:04,870 --> 00:15:08,230
we're working on it right now you know

00:15:06,370 --> 00:15:09,940
we're working on the specification to

00:15:08,230 --> 00:15:12,130
try and figure out you know exactly how

00:15:09,940 --> 00:15:14,530
it's going to work oh well as the Perl 6

00:15:12,130 --> 00:15:15,850
specification finished yet no we haven't

00:15:14,530 --> 00:15:17,740
finished it yet you know we're still

00:15:15,850 --> 00:15:19,180
working on it and stuff like that right

00:15:17,740 --> 00:15:20,380
and then the comment after that well no

00:15:19,180 --> 00:15:21,670
wonder it's taking you so long if you

00:15:20,380 --> 00:15:23,950
can't even decide on a specification

00:15:21,670 --> 00:15:25,510
first if you can't even decide what it

00:15:23,950 --> 00:15:27,760
is it's supposed to do no wonder he

00:15:25,510 --> 00:15:30,910
haven't finished it yet right so that

00:15:27,760 --> 00:15:33,610
was some of the confusion that's there

00:15:30,910 --> 00:15:37,090
and then it would lead to this I saw

00:15:33,610 --> 00:15:39,040
this on Pearl monks so many times perl 6

00:15:37,090 --> 00:15:41,080
needs to freeze a specification they

00:15:39,040 --> 00:15:42,790
need to stop designing and just

00:15:41,080 --> 00:15:49,420
implement whatever they have now and

00:15:42,790 --> 00:15:50,740
release that oops no right how many

00:15:49,420 --> 00:15:52,540
would have liked what we would have come

00:15:50,740 --> 00:15:54,610
up with that right freeze the

00:15:52,540 --> 00:15:57,700
specification untested by implementation

00:15:54,610 --> 00:16:02,590
and release that that would have been

00:15:57,700 --> 00:16:04,300
horrible right and as I started

00:16:02,590 --> 00:16:07,120
researching this and thinking about the

00:16:04,300 --> 00:16:08,980
problem it's kind of surprising but the

00:16:07,120 --> 00:16:11,800
basic misunderstanding about how you do

00:16:08,980 --> 00:16:13,570
languages is to assume that the

00:16:11,800 --> 00:16:15,490
specification should precede the

00:16:13,570 --> 00:16:18,400
language implementation that's actually

00:16:15,490 --> 00:16:21,310
getting the cart before the horse it's a

00:16:18,400 --> 00:16:23,260
common misconception and if you go read

00:16:21,310 --> 00:16:25,420
the documents that were being generated

00:16:23,260 --> 00:16:27,670
about pearl six and the discussions that

00:16:25,420 --> 00:16:29,230
were being done about pearl six all of

00:16:27,670 --> 00:16:31,000
us in the pearl six community were

00:16:29,230 --> 00:16:33,160
reinforcing this notion we're going to

00:16:31,000 --> 00:16:36,670
have a spec and implement it spec and

00:16:33,160 --> 00:16:38,650
implement it for about the first I'd say

00:16:36,670 --> 00:16:40,780
seven day ears of the project will

00:16:38,650 --> 00:16:42,490
always get the specs get specked solid

00:16:40,780 --> 00:16:43,810
and will test a few things here and

00:16:42,490 --> 00:16:46,090
there but we're not really committed to

00:16:43,810 --> 00:16:48,730
anything until we know what the specs

00:16:46,090 --> 00:16:50,710
are going to do the reality which is the

00:16:48,730 --> 00:16:52,480
surprising reality once I realized it is

00:16:50,710 --> 00:16:54,820
that successful languages and systems

00:16:52,480 --> 00:16:56,620
are striking counter-examples if you go

00:16:54,820 --> 00:16:58,690
look at most of the successful languages

00:16:56,620 --> 00:17:01,150
and systems today what you find out is

00:16:58,690 --> 00:17:05,620
the specification came after the

00:17:01,150 --> 00:17:07,180
implementation right so when they came

00:17:05,620 --> 00:17:09,040
up with a specification and tried to

00:17:07,180 --> 00:17:11,530
solidify it and say this is what it's

00:17:09,040 --> 00:17:14,620
going to have it was after a long period

00:17:11,530 --> 00:17:17,350
of implementation so pearl five right

00:17:14,620 --> 00:17:20,710
doesn't have one PHP when did they start

00:17:17,350 --> 00:17:23,350
doing their spec in 2014 and see even

00:17:20,710 --> 00:17:26,530
knr see the book was after C had been

00:17:23,350 --> 00:17:28,600
out for a long time and then used ruby

00:17:26,530 --> 00:17:32,470
is the same way HTML is a very

00:17:28,600 --> 00:17:34,330
interesting example but hTML existed for

00:17:32,470 --> 00:17:35,740
years before somebody actually came up

00:17:34,330 --> 00:17:37,270
with any sort of like a formalized

00:17:35,740 --> 00:17:41,260
specification for it and I'll talk about

00:17:37,270 --> 00:17:43,230
why htmls that way when did HTTP HTTP in

00:17:41,260 --> 00:17:46,230
a minute maybe I know

00:17:43,230 --> 00:17:50,490
91 is right early 90s when was it made

00:17:46,230 --> 00:17:52,440
into a specification in the RFC's which

00:17:50,490 --> 00:17:55,260
were published in nineteen ninety five

00:17:52,440 --> 00:17:59,360
four years later after had already been

00:17:55,260 --> 00:18:02,070
used in tested right and again this

00:17:59,360 --> 00:18:05,400
assumption that was made and it's just

00:18:02,070 --> 00:18:07,590
so natural that I mean it's amazing to

00:18:05,400 --> 00:18:09,179
me how many times whenever I tell people

00:18:07,590 --> 00:18:13,049
this they have this aha moment like oh

00:18:09,179 --> 00:18:14,280
that's kind of weird sort of thing once

00:18:13,049 --> 00:18:16,919
we see about it but it's something we've

00:18:14,280 --> 00:18:18,690
culturally integrated into the way we

00:18:16,919 --> 00:18:21,929
think about solving problems without

00:18:18,690 --> 00:18:23,220
even realizing it um here's an example

00:18:21,929 --> 00:18:24,990
of what happens when you have the

00:18:23,220 --> 00:18:26,790
specification before the implementation

00:18:24,990 --> 00:18:29,910
how many of you have ever heard of HTML

00:18:26,790 --> 00:18:34,230
+ right how many of you have ever seen

00:18:29,910 --> 00:18:36,600
in HTML + implementation right so when

00:18:34,230 --> 00:18:38,940
HTML came out for the web in the early

00:18:36,600 --> 00:18:40,830
90s um a lot of people said well great

00:18:38,940 --> 00:18:43,020
well this is a new one but we want to

00:18:40,830 --> 00:18:44,940
have new tags we need to have some newer

00:18:43,020 --> 00:18:47,370
ways of doing things and so a document

00:18:44,940 --> 00:18:50,730
was published called HTML + which would

00:18:47,370 --> 00:18:52,470
be the next version of HTML and it was

00:18:50,730 --> 00:18:53,640
published and said HTML will do this and

00:18:52,470 --> 00:18:56,340
it will do this and it will do this and

00:18:53,640 --> 00:18:59,940
it will do this and nobody implemented

00:18:56,340 --> 00:19:02,070
it um it had some words in it and things

00:18:59,940 --> 00:19:04,380
like that but nobody implemented it not

00:19:02,070 --> 00:19:05,910
only did nobody implemented it but

00:19:04,380 --> 00:19:08,490
nobody started implementing anything

00:19:05,910 --> 00:19:09,690
else either because they didn't want to

00:19:08,490 --> 00:19:12,299
do something that wasn't going to be

00:19:09,690 --> 00:19:15,710
according to the spec that had already

00:19:12,299 --> 00:19:15,710
been published yes

00:19:20,460 --> 00:19:28,650
word in the HTML spec and that that

00:19:25,440 --> 00:19:30,930
Mozilla and they were distinguishing

00:19:28,650 --> 00:19:33,060
themselves from Mozilla yes we were the

00:19:30,930 --> 00:19:34,830
browser Wars era yeah the browser Wars

00:19:33,060 --> 00:19:37,620
didn't actually crucial 95 or 96 though

00:19:34,830 --> 00:19:39,540
okay right um because that was when

00:19:37,620 --> 00:19:42,060
windows 95 came out with Internet

00:19:39,540 --> 00:19:43,260
Explorer so that's actually a couple of

00:19:42,060 --> 00:19:44,670
years there was a couple of years where

00:19:43,260 --> 00:19:47,520
there was not much development taking

00:19:44,670 --> 00:19:49,470
place or improvement in browsers because

00:19:47,520 --> 00:19:52,920
of this thing called HTML plus that came

00:19:49,470 --> 00:19:54,510
out early in 93 right I mean I thought

00:19:52,920 --> 00:19:56,940
it's not solely because of that but I

00:19:54,510 --> 00:19:59,880
argue that that is one of the reasons

00:19:56,940 --> 00:20:02,070
that people stopped innovating in HTML

00:19:59,880 --> 00:20:04,880
because they were waiting to see what

00:20:02,070 --> 00:20:09,540
would be done with the existing spec um

00:20:04,880 --> 00:20:13,800
and in c 94 c99 the same thing happened

00:20:09,540 --> 00:20:15,060
with c99 in c99 the the language design

00:20:13,800 --> 00:20:16,860
committee came up with all of these

00:20:15,060 --> 00:20:21,480
features that they thought should be in

00:20:16,860 --> 00:20:24,840
c99 and um many of them have never been

00:20:21,480 --> 00:20:26,250
implemented even today and it was things

00:20:24,840 --> 00:20:27,660
that people thought what would be good

00:20:26,250 --> 00:20:28,740
things to have in the language but they

00:20:27,660 --> 00:20:30,000
were untested and the implementers

00:20:28,740 --> 00:20:33,270
basically said we don't have to do that

00:20:30,000 --> 00:20:34,950
and so these these things exist in the

00:20:33,270 --> 00:20:37,650
standard but nobody actually uses them

00:20:34,950 --> 00:20:38,910
and as a result of that the sea

00:20:37,650 --> 00:20:40,550
standards committees adopted new

00:20:38,910 --> 00:20:43,080
guidelines when they came out with c11

00:20:40,550 --> 00:20:45,050
that basically say we're not going to

00:20:43,080 --> 00:20:48,410
spec features that nobody has done yet

00:20:45,050 --> 00:20:50,640
we're going to spec them after the fact

00:20:48,410 --> 00:20:52,460
because we don't want to adopt features

00:20:50,640 --> 00:20:55,460
that aren't tested by implementations

00:20:52,460 --> 00:20:55,460
yes

00:20:57,990 --> 00:21:06,270
yes yes um so in fact I went and looked

00:21:02,400 --> 00:21:08,670
up about language specifications on

00:21:06,270 --> 00:21:10,230
Wikipedia writing the specification

00:21:08,670 --> 00:21:12,809
before an implementation has largely

00:21:10,230 --> 00:21:14,040
been avoided since Algol 68 due to

00:21:12,809 --> 00:21:15,840
unexpected difficulties and

00:21:14,040 --> 00:21:18,210
implementation when implementation is

00:21:15,840 --> 00:21:24,990
deferred right Wikipedia knew more than

00:21:18,210 --> 00:21:35,030
we did I didn't look to see when that

00:21:24,990 --> 00:21:35,030
was at it yes unsuccessfully well

00:21:39,210 --> 00:21:48,179
right right right so um you know writing

00:21:46,200 --> 00:21:51,059
specifications before implementation is

00:21:48,179 --> 00:21:52,860
not the way to do it and we many of us

00:21:51,059 --> 00:21:55,200
and I certainly include myself but in

00:21:52,860 --> 00:21:57,630
the conversations I had I never saw much

00:21:55,200 --> 00:21:59,640
to the contrary we're all talking about

00:21:57,630 --> 00:22:00,990
let's get the specs specs kind of

00:21:59,640 --> 00:22:03,840
decided first and then we'll really

00:22:00,990 --> 00:22:08,039
focus on implementation right so that's

00:22:03,840 --> 00:22:11,419
kind of backwards so specification

00:22:08,039 --> 00:22:13,529
freezes aren't like code freezes right

00:22:11,419 --> 00:22:15,510
specification releases aren't like code

00:22:13,529 --> 00:22:17,610
releases and the important thing is that

00:22:15,510 --> 00:22:19,279
specs if you're going to create

00:22:17,610 --> 00:22:22,260
something that's a spec it should be

00:22:19,279 --> 00:22:23,520
retrospective not prospective it should

00:22:22,260 --> 00:22:26,100
be something that you're documenting

00:22:23,520 --> 00:22:28,679
after the fact not something that you

00:22:26,100 --> 00:22:30,720
are documenting before the half act okay

00:22:28,679 --> 00:22:31,679
now there's a form of specification

00:22:30,720 --> 00:22:34,529
that's often called a design

00:22:31,679 --> 00:22:37,110
specification and you can do that but

00:22:34,529 --> 00:22:38,669
you can't freeze it right you can't

00:22:37,110 --> 00:22:41,600
freeze it and say that's what we're

00:22:38,669 --> 00:22:46,110
going to do because your intestine it by

00:22:41,600 --> 00:22:48,149
implementation as an illustration of

00:22:46,110 --> 00:22:50,010
this process and again this was one of

00:22:48,149 --> 00:22:52,559
the things that in retrospectively

00:22:50,010 --> 00:22:55,049
analyzing the process that we had used

00:22:52,559 --> 00:22:58,110
it struck me that we do exactly the

00:22:55,049 --> 00:23:00,299
opposite of what the internet does so in

00:22:58,110 --> 00:23:02,220
the internet a proposal start out as

00:23:00,299 --> 00:23:04,020
internet-drafts somebody has an idea for

00:23:02,220 --> 00:23:06,419
a new protocol a new feature that ought

00:23:04,020 --> 00:23:08,970
to be adopted by the internet community

00:23:06,419 --> 00:23:10,850
and so those internet-drafts then become

00:23:08,970 --> 00:23:13,980
requests for comments the RSC's thing

00:23:10,850 --> 00:23:16,770
and that puts them on something called

00:23:13,980 --> 00:23:19,380
the standards track where a request for

00:23:16,770 --> 00:23:23,429
comment can then begin the process of

00:23:19,380 --> 00:23:25,770
becoming an internet standard and at

00:23:23,429 --> 00:23:28,080
some point it can graduate to be a

00:23:25,770 --> 00:23:29,520
proposed standard because not every RFC

00:23:28,080 --> 00:23:30,809
to find something that is done on the

00:23:29,520 --> 00:23:33,090
internet it's a Rick it's a proposal

00:23:30,809 --> 00:23:35,940
rfcs are proposals for things that you

00:23:33,090 --> 00:23:39,270
want to do and they can become standards

00:23:35,940 --> 00:23:40,649
but in order to become a standard the

00:23:39,270 --> 00:23:42,659
first thing you have to have is two

00:23:40,649 --> 00:23:44,669
independent operating implementations of

00:23:42,659 --> 00:23:47,230
it before it can be adopted as a

00:23:44,669 --> 00:23:51,740
standard yeah

00:23:47,230 --> 00:23:52,880
yes usually yeah not always but almost

00:23:51,740 --> 00:23:57,350
always this they start with

00:23:52,880 --> 00:23:59,660
implementation but the the the big thing

00:23:57,350 --> 00:24:01,630
for me is that on the internet which

00:23:59,660 --> 00:24:04,460
arguably has been very very successful

00:24:01,630 --> 00:24:07,160
all right in terms of its open-source

00:24:04,460 --> 00:24:09,590
process its its openness of how it gets

00:24:07,160 --> 00:24:13,190
created they do their specifications

00:24:09,590 --> 00:24:18,410
after the fact not before so that was a

00:24:13,190 --> 00:24:21,910
surprising thing for me as well so let's

00:24:18,410 --> 00:24:25,610
look at some of the key features of the

00:24:21,910 --> 00:24:26,510
Perl 6 specification itself and things

00:24:25,610 --> 00:24:28,790
I've learned about language

00:24:26,510 --> 00:24:31,700
specification from being in the Perl 6

00:24:28,790 --> 00:24:34,430
process right so one of the key features

00:24:31,700 --> 00:24:38,420
is that first of all a programming

00:24:34,430 --> 00:24:39,920
language is never frozen right because

00:24:38,420 --> 00:24:41,960
people would always ask going back to

00:24:39,920 --> 00:24:44,780
that thing when will Perl 6 be finished

00:24:41,960 --> 00:24:52,400
and my retort these days is when will

00:24:44,780 --> 00:24:55,850
Perl 5 be finished so some people do and

00:24:52,400 --> 00:25:00,020
I mean we just add pearl 5.2 to come out

00:24:55,850 --> 00:25:02,480
right i mean it is pearl 5 finished no

00:25:00,020 --> 00:25:04,880
right languages if they're living

00:25:02,480 --> 00:25:07,190
language are never finished they're

00:25:04,880 --> 00:25:08,720
always evolving so this whole notion of

00:25:07,190 --> 00:25:10,520
saying when is pearl six finished is

00:25:08,720 --> 00:25:11,780
kind of a wrong way of looking at it

00:25:10,520 --> 00:25:13,550
you're not asking when it's finished

00:25:11,780 --> 00:25:16,340
you're asking when will it reach a

00:25:13,550 --> 00:25:21,920
milestone right whatever that may happen

00:25:16,340 --> 00:25:25,430
to be um so one thing that Perl 6 has

00:25:21,920 --> 00:25:28,220
done in its design is to recognize that

00:25:25,430 --> 00:25:31,460
the language to be successful to be the

00:25:28,220 --> 00:25:33,380
language still used 20 25 50 100 years

00:25:31,460 --> 00:25:36,320
from now has to be a language that can

00:25:33,380 --> 00:25:38,060
evolve and so evolution is built into

00:25:36,320 --> 00:25:40,760
the Perl 6 framework to begin with and

00:25:38,060 --> 00:25:41,930
it explicitly recognizes it and there

00:25:40,760 --> 00:25:44,600
are a lot of things that have gone into

00:25:41,930 --> 00:25:46,310
Perl 6 which I won't go through all of

00:25:44,600 --> 00:25:48,440
them but a lot of these features are

00:25:46,310 --> 00:25:49,820
there because we recognize that will

00:25:48,440 --> 00:25:51,950
never be able to call the language

00:25:49,820 --> 00:25:55,010
finished and that will always want to be

00:25:51,950 --> 00:25:57,170
able to adopt new things that were not

00:25:55,010 --> 00:25:59,160
even conceived of 10 years ago 20 years

00:25:57,170 --> 00:26:03,810
ago 30 years ago

00:25:59,160 --> 00:26:05,630
and that's a reaction to pro 5 the lot

00:26:03,810 --> 00:26:07,800
of the reason why we have things like

00:26:05,630 --> 00:26:10,350
Stephen littles excellent talk on mop

00:26:07,800 --> 00:26:14,220
earlier is how hard it is to get pearl 5

00:26:10,350 --> 00:26:16,110
to evolve to do new newer things it's

00:26:14,220 --> 00:26:18,060
that it's a real challenge because of

00:26:16,110 --> 00:26:19,890
the legacy thing so pearl six in a lot

00:26:18,060 --> 00:26:21,720
of ways is to try and come up with

00:26:19,890 --> 00:26:23,010
something that will be able to evolve

00:26:21,720 --> 00:26:25,680
even though we don't know what is going

00:26:23,010 --> 00:26:27,570
to be able to evolve into right so

00:26:25,680 --> 00:26:32,460
evolution is a constant there is no such

00:26:27,570 --> 00:26:35,330
thing as freezing a language we really

00:26:32,460 --> 00:26:38,400
want to have a sharp distinction between

00:26:35,330 --> 00:26:39,690
specification and language in Perl 5 we

00:26:38,400 --> 00:26:42,990
know that is the big P and the little

00:26:39,690 --> 00:26:44,670
pea right so if you say pearl with a

00:26:42,990 --> 00:26:45,990
capital P you're talking about the

00:26:44,670 --> 00:26:47,430
language and if you say pearl with a

00:26:45,990 --> 00:26:51,440
little p you're usually talking about

00:26:47,430 --> 00:26:54,120
the interpreter sort of thing in Perl 6

00:26:51,440 --> 00:26:55,530
perl 6 and Perl 6 point out we know

00:26:54,120 --> 00:26:56,790
which I need to like put a cross through

00:26:55,530 --> 00:26:59,180
from that because it's not six point 0

00:26:56,790 --> 00:27:02,160
point 0 so pretend you never saw that

00:26:59,180 --> 00:27:04,260
refer to the language what we really

00:27:02,160 --> 00:27:09,750
mean by Perl 6 is the language

00:27:04,260 --> 00:27:11,340
specification and in unlike in pro 5 we

00:27:09,750 --> 00:27:13,260
won't have an official implementation of

00:27:11,340 --> 00:27:15,240
Perl 6 so people say which compiler is

00:27:13,260 --> 00:27:16,740
the official one that that in the

00:27:15,240 --> 00:27:18,840
pro-sex community nobody's going to say

00:27:16,740 --> 00:27:21,000
this is the official one we might say

00:27:18,840 --> 00:27:22,500
this is the most popular one where we

00:27:21,000 --> 00:27:24,330
might say this is the best one for such

00:27:22,500 --> 00:27:26,490
and such purpose but there is no

00:27:24,330 --> 00:27:29,520
anointed compiler that is the official

00:27:26,490 --> 00:27:31,380
or reference compiler right why do we do

00:27:29,520 --> 00:27:33,180
that because having multiple

00:27:31,380 --> 00:27:35,340
implementations is one of the core

00:27:33,180 --> 00:27:37,410
requirements that you must have if you

00:27:35,340 --> 00:27:38,820
want to have evolution to be able to

00:27:37,410 --> 00:27:41,070
take place if you want a future proof

00:27:38,820 --> 00:27:42,690
you have to have multiple

00:27:41,070 --> 00:27:45,120
implementations to be able to do that

00:27:42,690 --> 00:27:47,130
because it enables you to have

00:27:45,120 --> 00:27:49,110
competition it enables you to have

00:27:47,130 --> 00:27:51,060
crossbreeding it enables you to do all

00:27:49,110 --> 00:27:53,610
sorts of things to be able to do that

00:27:51,060 --> 00:27:55,520
and again you can see this over and over

00:27:53,610 --> 00:27:57,720
and over in other aspects of computing

00:27:55,520 --> 00:28:00,030
that we take place that when you have

00:27:57,720 --> 00:28:02,390
competition in place that's when things

00:28:00,030 --> 00:28:02,390
evolve

00:28:03,100 --> 00:28:08,360
so the other thing lesson that came

00:28:06,350 --> 00:28:12,049
after the fact is going back to the

00:28:08,360 --> 00:28:14,240
design process that we had many of us

00:28:12,049 --> 00:28:17,450
myself included got to talk calling the

00:28:14,240 --> 00:28:19,639
Perl 6 synopses the spec now the

00:28:17,450 --> 00:28:22,549
synopses are the documents that describe

00:28:19,639 --> 00:28:25,070
how Perl 6 is intended to work and so it

00:28:22,549 --> 00:28:27,169
seems very natural to say that should be

00:28:25,070 --> 00:28:30,919
the spec and that's the way we've

00:28:27,169 --> 00:28:32,289
referred to it and it's even so bad that

00:28:30,919 --> 00:28:34,789
if you go to look at the github

00:28:32,289 --> 00:28:37,389
repository that contains the synopses

00:28:34,789 --> 00:28:40,580
the name of that repository is specs

00:28:37,389 --> 00:28:42,889
right those documents are living

00:28:40,580 --> 00:28:45,759
documents they are constantly changing

00:28:42,889 --> 00:28:48,590
and they are changing both in terms of

00:28:45,759 --> 00:28:50,659
things that we have discovered that we

00:28:48,590 --> 00:28:52,100
want to do with the language and things

00:28:50,659 --> 00:28:53,149
that we've discovered we must do with

00:28:52,100 --> 00:28:55,850
the language because that's what the

00:28:53,149 --> 00:28:58,669
implementations are telling us right so

00:28:55,850 --> 00:29:01,129
some of the changes are lessons learned

00:28:58,669 --> 00:29:03,649
from the implementations other changes

00:29:01,129 --> 00:29:05,509
are we are designing new features and so

00:29:03,649 --> 00:29:07,700
if you go and look at the synopses there

00:29:05,509 --> 00:29:09,860
are some synopses that we feel are very

00:29:07,700 --> 00:29:11,450
stable that you know they're not likely

00:29:09,860 --> 00:29:14,230
to change very soon and there are other

00:29:11,450 --> 00:29:17,149
synopses that are completely conjectural

00:29:14,230 --> 00:29:19,249
but when we call those the spec the

00:29:17,149 --> 00:29:20,929
mental model that people get both inside

00:29:19,249 --> 00:29:22,399
and outside of the community is that

00:29:20,929 --> 00:29:23,990
this is the definition these are the

00:29:22,399 --> 00:29:26,029
requirements of the language and that's

00:29:23,990 --> 00:29:28,070
what we should be writing to and that

00:29:26,029 --> 00:29:29,659
has been a problem the other thing is

00:29:28,070 --> 00:29:32,149
it's different difficult to version

00:29:29,659 --> 00:29:34,100
those synopses as being a spec because

00:29:32,149 --> 00:29:35,360
they're constantly changing as parts of

00:29:34,100 --> 00:29:36,919
them are constantly changing as we're

00:29:35,360 --> 00:29:38,509
updating as we're gaining new experience

00:29:36,919 --> 00:29:40,129
we're doing that it's difficult to come

00:29:38,509 --> 00:29:45,019
up with a versioning system that's able

00:29:40,129 --> 00:29:47,029
to do that so in 2008 in response to

00:29:45,019 --> 00:29:49,279
something else when people were asking

00:29:47,029 --> 00:29:52,879
which is the official compiler for perl

00:29:49,279 --> 00:29:55,249
6 we came back and said that Perl 6 is

00:29:52,879 --> 00:29:58,460
anything that passes the official test

00:29:55,249 --> 00:30:01,999
suite and that's listed in synopsis one

00:29:58,460 --> 00:30:04,159
so what our specs what I've been arguing

00:30:01,999 --> 00:30:05,929
for the last three or four years to the

00:30:04,159 --> 00:30:08,840
internal community and I'm about to be

00:30:05,929 --> 00:30:10,340
able to like nail it soon is that when

00:30:08,840 --> 00:30:12,169
we're talking about a specification for

00:30:10,340 --> 00:30:13,970
perl 6 what form should that take it

00:30:12,169 --> 00:30:14,900
should not be the synopses i'm quite

00:30:13,970 --> 00:30:17,630
certain of that

00:30:14,900 --> 00:30:20,090
and so what we are going to do is to say

00:30:17,630 --> 00:30:24,770
that the language of pearl six is

00:30:20,090 --> 00:30:27,050
defined by its test suite right so if

00:30:24,770 --> 00:30:29,360
something passes the test suite then it

00:30:27,050 --> 00:30:31,250
is a valid implementation of pearl six

00:30:29,360 --> 00:30:33,290
and if it does not pass this test suite

00:30:31,250 --> 00:30:35,240
then it does not it's a very test

00:30:33,290 --> 00:30:36,890
focused implementation the nice thing

00:30:35,240 --> 00:30:41,360
about this is that by using the test

00:30:36,890 --> 00:30:43,070
suite we can automated verify that

00:30:41,360 --> 00:30:45,290
something meets a certain specification

00:30:43,070 --> 00:30:49,580
we have an automated verification

00:30:45,290 --> 00:30:55,760
process for it so where should we go

00:30:49,580 --> 00:30:59,330
next so first of all when we talk about

00:30:55,760 --> 00:31:01,490
doing a Perl 6 release this year we need

00:30:59,330 --> 00:31:03,290
to decide what to call it right so we

00:31:01,490 --> 00:31:04,490
need to establish that release we did

00:31:03,290 --> 00:31:07,580
decide what I'm sorry we need to decide

00:31:04,490 --> 00:31:09,230
what's in it what exactly is the Perl 6

00:31:07,580 --> 00:31:11,060
language specification it's going to be

00:31:09,230 --> 00:31:13,190
a set of tests and now our process is

00:31:11,060 --> 00:31:14,720
figuring out which tests are part of

00:31:13,190 --> 00:31:18,490
that first specification and which ones

00:31:14,720 --> 00:31:18,490
are conjectural and we can extract those

00:31:20,700 --> 00:31:24,810
and then be able to say you know if you

00:31:22,590 --> 00:31:26,820
are compatible with those tests then you

00:31:24,810 --> 00:31:28,470
are a pearl 6 first release compliant to

00:31:26,820 --> 00:31:30,830
implementation we need a better

00:31:28,470 --> 00:31:33,210
understanding of what exactly that means

00:31:30,830 --> 00:31:35,430
we need to recognize that specification

00:31:33,210 --> 00:31:37,260
follows implementations our thing is

00:31:35,430 --> 00:31:39,540
that it's a task set of tests and not

00:31:37,260 --> 00:31:43,530
the design documents you see what slight

00:31:39,540 --> 00:31:46,920
I have next to where I'm at um we need

00:31:43,530 --> 00:31:50,340
to remove false references we need to go

00:31:46,920 --> 00:31:55,170
and find the places in our historical

00:31:50,340 --> 00:31:56,910
documents and in the dark web where

00:31:55,170 --> 00:31:58,860
we've talked about pearl sticks because

00:31:56,910 --> 00:32:00,480
there are still some documents that

00:31:58,860 --> 00:32:02,700
refer to the synopses is the official

00:32:00,480 --> 00:32:05,970
pearl specification the wikipedia entry

00:32:02,700 --> 00:32:07,470
is for perl 6 is one of them so if you

00:32:05,970 --> 00:32:08,880
go and look at the wikipedia entry it

00:32:07,470 --> 00:32:12,750
actually talks about the synopses or the

00:32:08,880 --> 00:32:14,970
official specification for perl 6 until

00:32:12,750 --> 00:32:18,360
about a year and a half ago the Perl 6

00:32:14,970 --> 00:32:20,250
org page said that and I like went and

00:32:18,360 --> 00:32:22,890
got rid of that it's like no that's

00:32:20,250 --> 00:32:24,660
completely wrong so there are various

00:32:22,890 --> 00:32:26,940
histories of pearl sticks and so we may

00:32:24,660 --> 00:32:28,590
not need to like we don't need to

00:32:26,940 --> 00:32:31,110
expunge history but we need to at least

00:32:28,590 --> 00:32:34,410
acknowledge it and say you know this was

00:32:31,110 --> 00:32:38,160
this was a misconception and not and get

00:32:34,410 --> 00:32:40,230
those fixed here's where I note our

00:32:38,160 --> 00:32:43,290
repository for synopses dismissed name

00:32:40,230 --> 00:32:44,670
specs I've been warning the the Perl 6

00:32:43,290 --> 00:32:46,320
community for the last several months

00:32:44,670 --> 00:32:48,390
that I will change this and possibly

00:32:46,320 --> 00:32:52,100
without further warning that i'm going

00:32:48,390 --> 00:32:52,100
to go rename the repo and so

00:32:54,100 --> 00:33:03,770
if you want church okay no no no I'm not

00:33:01,130 --> 00:33:11,260
going for that sorry I'm not going for

00:33:03,770 --> 00:33:13,760
that sorry um I went get SP EC out

00:33:11,260 --> 00:33:15,740
because everybody will say it's not

00:33:13,760 --> 00:33:18,890
according to the spec and that's

00:33:15,740 --> 00:33:20,120
absolutely wrong so um and I'm for when

00:33:18,890 --> 00:33:21,289
I do this I'm going to invoke the

00:33:20,120 --> 00:33:24,289
forgiveness is greater than permission

00:33:21,289 --> 00:33:25,669
for principles all I'm going to say I'm

00:33:24,289 --> 00:33:27,169
renaming it and if you don't like it

00:33:25,669 --> 00:33:29,809
please forgive me and we'll figure out

00:33:27,169 --> 00:33:31,159
why but I'm not asking for permission to

00:33:29,809 --> 00:33:34,690
this I'm kind of warning people about

00:33:31,159 --> 00:33:37,640
that our specification toolchain are

00:33:34,690 --> 00:33:40,820
will define it by we're going to create

00:33:37,640 --> 00:33:43,400
a tool chain for the spec alright so

00:33:40,820 --> 00:33:44,929
this specification will be defined by

00:33:43,400 --> 00:33:47,630
the test suite we have a test suite but

00:33:44,929 --> 00:33:48,980
that test suite test things that most of

00:33:47,630 --> 00:33:50,240
us working on pearl sticks would agree

00:33:48,980 --> 00:33:52,490
or should not be part of the first

00:33:50,240 --> 00:33:53,960
version of the language we we have tests

00:33:52,490 --> 00:33:56,960
in there for conjectural things so we

00:33:53,960 --> 00:33:59,690
don't want to solidify those so we have

00:33:56,960 --> 00:34:02,299
extra tests in our test suite on there

00:33:59,690 --> 00:34:04,429
not there we're going to come up with a

00:34:02,299 --> 00:34:07,070
mechanism to identify and extract from

00:34:04,429 --> 00:34:09,260
the master repository of the test suite

00:34:07,070 --> 00:34:10,850
only those tests that are relevant to a

00:34:09,260 --> 00:34:13,220
given Perl 6 version whatever it may

00:34:10,850 --> 00:34:14,960
happen to be people often say well you

00:34:13,220 --> 00:34:16,460
could just do get tagging for that but I

00:34:14,960 --> 00:34:17,960
suspect it needs to be something a

00:34:16,460 --> 00:34:21,020
little bit finer grained than just

00:34:17,960 --> 00:34:22,760
tagging a certain release so the will

00:34:21,020 --> 00:34:26,290
probably make use of those in some way

00:34:22,760 --> 00:34:26,290
but that won't be the extent of it

00:34:27,550 --> 00:34:32,270
fortunately we already have the tools

00:34:29,810 --> 00:34:34,520
for extracting subsets of the test suite

00:34:32,270 --> 00:34:37,190
those are already implemented we've been

00:34:34,520 --> 00:34:38,929
using them for a very long time and if

00:34:37,190 --> 00:34:40,550
you stop and think about it if you have

00:34:38,929 --> 00:34:43,010
a common test suite being used by

00:34:40,550 --> 00:34:44,629
multiple implementations what are the

00:34:43,010 --> 00:34:48,080
odds that every implementation passes

00:34:44,629 --> 00:34:51,440
every test right like yeah it's not

00:34:48,080 --> 00:34:52,879
going to happen right so how'd in normal

00:34:51,440 --> 00:34:56,240
testing how do you do that you mark test

00:34:52,879 --> 00:34:57,830
is being to do or skip but you can't you

00:34:56,240 --> 00:35:00,230
don't want it to do a test for every

00:34:57,830 --> 00:35:02,510
implementation you don't want to skip a

00:35:00,230 --> 00:35:05,570
test on every implementation and so

00:35:02,510 --> 00:35:06,890
because we had this um challenge many

00:35:05,570 --> 00:35:08,450
years ago of

00:35:06,890 --> 00:35:11,029
he wanted some tests to be run by

00:35:08,450 --> 00:35:13,069
implementation a and other tests from

00:35:11,029 --> 00:35:15,130
that same repository to be run from

00:35:13,069 --> 00:35:17,210
implementation be and they're not there

00:35:15,130 --> 00:35:21,920
there was a tool that was created called

00:35:17,210 --> 00:35:25,430
fudge and inside of fudge you are able

00:35:21,920 --> 00:35:27,380
to put markers into the test suite that

00:35:25,430 --> 00:35:29,299
say the next test that follows this

00:35:27,380 --> 00:35:31,819
should be too dude if you are running

00:35:29,299 --> 00:35:33,200
rokudo and we can even go farther and

00:35:31,819 --> 00:35:35,029
say if you're running the more version

00:35:33,200 --> 00:35:38,329
of recruit Oh skip it but if you're on

00:35:35,029 --> 00:35:40,760
any other implementation that doesn't

00:35:38,329 --> 00:35:43,789
have that comment there and skip it so

00:35:40,760 --> 00:35:45,140
fudge then pre processes the test files

00:35:43,789 --> 00:35:47,269
before feeding them to your

00:35:45,140 --> 00:35:48,440
implementation so that all the skips

00:35:47,269 --> 00:35:51,980
into dudes are in the right place for

00:35:48,440 --> 00:35:53,750
that implementation so we can do similar

00:35:51,980 --> 00:35:56,809
markers just to extract the Perl 6

00:35:53,750 --> 00:35:58,970
version of the suite so we can do

00:35:56,809 --> 00:36:00,380
something like this and say omit the

00:35:58,970 --> 00:36:01,970
next five tests because they're

00:36:00,380 --> 00:36:04,130
conjectural so that they're not part of

00:36:01,970 --> 00:36:06,049
the tests for that particular version of

00:36:04,130 --> 00:36:11,150
the language so we already have a lot of

00:36:06,049 --> 00:36:13,519
that in place um we need to consider I

00:36:11,150 --> 00:36:16,099
think that language features can have

00:36:13,519 --> 00:36:17,869
lifetimes when you're looking at a

00:36:16,099 --> 00:36:19,490
language spec and I think it would be

00:36:17,869 --> 00:36:22,549
nice if we could formalize this somehow

00:36:19,490 --> 00:36:24,799
because language features are conjecture

00:36:22,549 --> 00:36:27,079
wouldn't it be nice if Perl 6 could do

00:36:24,799 --> 00:36:28,940
this and then somebody will say well

00:36:27,079 --> 00:36:31,099
let's try it so work in progress you

00:36:28,940 --> 00:36:33,470
know let's kind of do it in Perl 5 it's

00:36:31,099 --> 00:36:36,049
often known as experimental right so

00:36:33,470 --> 00:36:38,480
it's kind of work in progress it's

00:36:36,049 --> 00:36:41,809
conjectured but it's not really up to

00:36:38,480 --> 00:36:44,779
the next stage of being adopted and so

00:36:41,809 --> 00:36:48,049
we ought to say and formalize in Perl 6

00:36:44,779 --> 00:36:50,240
how can we map this lifetime conjecture

00:36:48,049 --> 00:36:53,150
work in progress progress adopted

00:36:50,240 --> 00:36:54,980
discouraged meaning it's there we're not

00:36:53,150 --> 00:36:57,230
going to get rid of it but you should do

00:36:54,980 --> 00:36:59,170
it a different way and then deprecated

00:36:57,230 --> 00:37:02,420
which is we're going to get rid of it

00:36:59,170 --> 00:37:06,049
but just not yet and then retired which

00:37:02,420 --> 00:37:10,160
is it's gone but maybe some marker that

00:37:06,049 --> 00:37:12,400
denotes where it now lives or that it is

00:37:10,160 --> 00:37:14,359
gone and so our spec should probably

00:37:12,400 --> 00:37:15,829
recognize that somehow I don't know how

00:37:14,359 --> 00:37:17,720
yet but it's something that we ought to

00:37:15,829 --> 00:37:21,290
be working on

00:37:17,720 --> 00:37:23,380
um and then it comes how do you call the

00:37:21,290 --> 00:37:26,840
different versions of pearl six and

00:37:23,380 --> 00:37:28,310
having declaring new versions for a long

00:37:26,840 --> 00:37:31,099
time we always talked about it as being

00:37:28,310 --> 00:37:34,280
six point 0 point 0 and I will tell you

00:37:31,099 --> 00:37:36,410
now that since parrot I have been on a

00:37:34,280 --> 00:37:38,960
crusade against the major minor version

00:37:36,410 --> 00:37:43,580
numbering scheme I find it to be really

00:37:38,960 --> 00:37:44,930
really bad Linux is starting to get it

00:37:43,580 --> 00:37:46,640
right though because their version

00:37:44,930 --> 00:37:49,400
numbering scheme is now retrospective

00:37:46,640 --> 00:37:52,220
the traditional version numbering scheme

00:37:49,400 --> 00:37:54,080
was you would plan like if you had a 6.3

00:37:52,220 --> 00:37:57,109
release you would make plans for your

00:37:54,080 --> 00:37:59,270
next major release to be seven right and

00:37:57,109 --> 00:38:01,520
you would say version 7 is going to

00:37:59,270 --> 00:38:05,720
contain this how many people can say

00:38:01,520 --> 00:38:07,580
Microsoft Windows Vista right right how

00:38:05,720 --> 00:38:08,690
long was that announced what features it

00:38:07,580 --> 00:38:11,210
would have before there was an

00:38:08,690 --> 00:38:14,660
implementation of it and many things

00:38:11,210 --> 00:38:16,849
didn't get implemented so if you do it

00:38:14,660 --> 00:38:19,640
as a prospective as a as a feature-based

00:38:16,849 --> 00:38:21,680
sort of thing I like the way Linux is

00:38:19,640 --> 00:38:22,940
doing now worth retrospective the

00:38:21,680 --> 00:38:24,500
difference between the two point X

00:38:22,940 --> 00:38:26,660
series and the three-point o series is

00:38:24,500 --> 00:38:28,339
simply one day Lena said we've done

00:38:26,660 --> 00:38:30,410
enough and it's significant enough that

00:38:28,339 --> 00:38:33,349
we should update the version number the

00:38:30,410 --> 00:38:35,030
version number didn't come with any huge

00:38:33,349 --> 00:38:37,339
new features over the latest version of

00:38:35,030 --> 00:38:39,609
the 2x series it's just they said this

00:38:37,339 --> 00:38:43,790
is a good point to declare a new version

00:38:39,609 --> 00:38:47,420
yeah so um but I've been a real fan of

00:38:43,790 --> 00:38:49,339
time based version numbering so if you

00:38:47,420 --> 00:38:51,140
go look at Rick Udo version numbers it's

00:38:49,339 --> 00:38:52,369
always year and month and since we do

00:38:51,140 --> 00:38:55,640
monthly releases that works out really

00:38:52,369 --> 00:38:57,170
well so it doesn't the the version

00:38:55,640 --> 00:38:59,839
numbers don't say you anything about how

00:38:57,170 --> 00:39:01,369
much progress has been made from the

00:38:59,839 --> 00:39:03,380
previous version because it's time based

00:39:01,369 --> 00:39:05,750
release but it tells you a lot about how

00:39:03,380 --> 00:39:07,790
old it is and it's a nice numbering

00:39:05,750 --> 00:39:10,369
sequence that's there so I'm in favor of

00:39:07,790 --> 00:39:14,869
that sort of thing oops I thought there

00:39:10,369 --> 00:39:16,280
was more on this site nope one other

00:39:14,869 --> 00:39:18,530
tool that I've been working on is a way

00:39:16,280 --> 00:39:20,150
to tag the synopsis documents with

00:39:18,530 --> 00:39:21,619
language version information so that we

00:39:20,150 --> 00:39:23,839
actually put things into the synopses

00:39:21,619 --> 00:39:26,240
that mark this was implemented in

00:39:23,839 --> 00:39:28,849
language number or language version such

00:39:26,240 --> 00:39:30,200
and such and even down at the section in

00:39:28,849 --> 00:39:32,480
paragraph level

00:39:30,200 --> 00:39:36,320
so that can be something that evolves

00:39:32,480 --> 00:39:44,800
over time where is my other section here

00:39:36,320 --> 00:39:44,800
I mista mista slide somewhere

00:39:49,500 --> 00:39:52,220
isn't it

00:39:54,250 --> 00:39:59,590
I think I think the slide has been

00:39:56,140 --> 00:40:04,600
modified somehow maybe I'll find it

00:39:59,590 --> 00:40:07,930
later um the the other thing that I've

00:40:04,600 --> 00:40:11,680
thought about in doing this is that the

00:40:07,930 --> 00:40:14,080
cadence of language numbers the speed

00:40:11,680 --> 00:40:16,420
the frequency of language versions is

00:40:14,080 --> 00:40:21,610
vastly different from the frequency of

00:40:16,420 --> 00:40:25,270
implementation releases all right so for

00:40:21,610 --> 00:40:26,800
example I did the C language versions

00:40:25,270 --> 00:40:29,380
that had come out right so we have see

00:40:26,800 --> 00:40:30,370
99 c 89 how long was it because before

00:40:29,380 --> 00:40:33,250
they came up with another language

00:40:30,370 --> 00:40:35,560
specification it's 10 years right they

00:40:33,250 --> 00:40:38,560
did see 99 and then they did see 11

00:40:35,560 --> 00:40:40,330
right so they're versioning their time

00:40:38,560 --> 00:40:43,630
cycle for a new version of a language

00:40:40,330 --> 00:40:47,050
was on the order of a decade between

00:40:43,630 --> 00:40:50,560
language specifications right and what

00:40:47,050 --> 00:40:52,300
happens in Perl 5 right is effectively

00:40:50,560 --> 00:40:55,000
you end up with a new language

00:40:52,300 --> 00:40:57,640
specification every month because the

00:40:55,000 --> 00:40:59,290
implementation defines it right and so

00:40:57,640 --> 00:41:00,550
we have the major ones we could say well

00:40:59,290 --> 00:41:03,220
we're only interested in the major

00:41:00,550 --> 00:41:06,280
releases like 5 20 and 5 22 and stuff

00:41:03,220 --> 00:41:08,440
like that but that's still a very fast

00:41:06,280 --> 00:41:11,380
language evolution if that's the way

00:41:08,440 --> 00:41:14,100
that you do it and certainly in ruku doz

00:41:11,380 --> 00:41:17,020
case where we're doing monthly releases

00:41:14,100 --> 00:41:18,370
our release our compiler release time

00:41:17,020 --> 00:41:21,280
cycle should not be the language

00:41:18,370 --> 00:41:23,920
definition time cycle languages should

00:41:21,280 --> 00:41:25,750
be long horizon things and if we were

00:41:23,920 --> 00:41:27,340
looking at in other ways it's a it

00:41:25,750 --> 00:41:29,110
language changes should be on a

00:41:27,340 --> 00:41:32,440
geological time scale in terms of

00:41:29,110 --> 00:41:36,400
computer history and not on a daily sort

00:41:32,440 --> 00:41:38,140
of thing or monthly sort of scale so it

00:41:36,400 --> 00:41:42,000
seems to me that when we're talking

00:41:38,140 --> 00:41:44,320
about 6.0 what is that final point mean

00:41:42,000 --> 00:41:45,640
right am I ever going to have a six

00:41:44,320 --> 00:41:47,650
point no point to and what would that

00:41:45,640 --> 00:41:50,380
mean what that means I needed to

00:41:47,650 --> 00:41:52,180
document something that was you know

00:41:50,380 --> 00:41:55,150
minor enough that I needed to include it

00:41:52,180 --> 00:41:56,830
in the standard but major enough to be

00:41:55,150 --> 00:41:58,300
including the standard but minor enough

00:41:56,830 --> 00:42:01,420
that I didn't need to go to a whole new

00:41:58,300 --> 00:42:03,280
language version that kind of is weird

00:42:01,420 --> 00:42:05,590
weird for me so I don't like that final

00:42:03,280 --> 00:42:07,030
point um the other thing that I find is

00:42:05,590 --> 00:42:07,780
that things like six point 0 point 0

00:42:07,030 --> 00:42:11,020
makes

00:42:07,780 --> 00:42:12,910
too easy to confuse and make it look

00:42:11,020 --> 00:42:16,450
like you should be doing rapid releases

00:42:12,910 --> 00:42:21,940
so I'm in favor of doing things like 6a

00:42:16,450 --> 00:42:24,910
6b 66 d and that those take place on

00:42:21,940 --> 00:42:26,920
yearly time scales or half yearly at

00:42:24,910 --> 00:42:28,930
best but a much longer one even though

00:42:26,920 --> 00:42:30,520
the implementations all have their own

00:42:28,930 --> 00:42:32,290
version numbering scheme for the

00:42:30,520 --> 00:42:34,480
implementation that they're doing that's

00:42:32,290 --> 00:42:35,980
something that when I mentioned this to

00:42:34,480 --> 00:42:37,690
pearl five people and talk about it

00:42:35,980 --> 00:42:39,580
their first thought is no no no you need

00:42:37,690 --> 00:42:41,650
to tie the implementation really closely

00:42:39,580 --> 00:42:43,510
so that i know that this version of the

00:42:41,650 --> 00:42:45,700
implementation is exactly this version

00:42:43,510 --> 00:42:50,650
of the language and it just doesn't work

00:42:45,700 --> 00:42:56,440
that way so so uh i'm much in favor of

00:42:50,650 --> 00:42:59,020
the six alpha 6 beta sort of thing um so

00:42:56,440 --> 00:43:00,490
just to recap there been widespread

00:42:59,020 --> 00:43:02,260
misconceptions about the role of

00:43:00,490 --> 00:43:04,180
specifications and it's really affected

00:43:02,260 --> 00:43:06,700
our design process it's really affected

00:43:04,180 --> 00:43:09,220
the implementation process it when we

00:43:06,700 --> 00:43:12,040
really started making good progress on

00:43:09,220 --> 00:43:14,200
Perl 6 as a language and on the

00:43:12,040 --> 00:43:15,910
implementations was when we realized we

00:43:14,200 --> 00:43:18,940
had it backwards or when we started

00:43:15,910 --> 00:43:21,490
acting as though we had it backwards so

00:43:18,940 --> 00:43:23,560
that when we started realizing that the

00:43:21,490 --> 00:43:26,460
implementations needed to be driving the

00:43:23,560 --> 00:43:28,660
synopses and not vice versa

00:43:26,460 --> 00:43:30,370
specifications work best retrospectively

00:43:28,660 --> 00:43:32,590
as historical markers of things that

00:43:30,370 --> 00:43:34,360
everybody agrees on as opposed to what

00:43:32,590 --> 00:43:38,200
everybody agrees on is what the future

00:43:34,360 --> 00:43:39,850
should look like languages always evolve

00:43:38,200 --> 00:43:41,920
so you can never talk about them being

00:43:39,850 --> 00:43:44,070
finished you can only talk about what

00:43:41,920 --> 00:43:46,480
was true at a certain period of time

00:43:44,070 --> 00:43:51,490
Perl 6 has got really robust features

00:43:46,480 --> 00:43:52,690
for that we really it's a good idea to

00:43:51,490 --> 00:43:54,340
separate specification and

00:43:52,690 --> 00:43:56,800
implementation you don't want to tie

00:43:54,340 --> 00:43:59,200
those things together couple II a couple

00:43:56,800 --> 00:44:01,300
those tightly the reason being that

00:43:59,200 --> 00:44:04,180
specification has a different time scale

00:44:01,300 --> 00:44:05,350
than implementation does I really like

00:44:04,180 --> 00:44:07,000
that we're doing a test page

00:44:05,350 --> 00:44:10,930
specification I think that will be an

00:44:07,000 --> 00:44:13,240
unique contribution from for pearl to

00:44:10,930 --> 00:44:15,040
overall computing standards and we

00:44:13,240 --> 00:44:16,510
should probably look at our standards

00:44:15,040 --> 00:44:19,510
for versioning things in the language

00:44:16,510 --> 00:44:25,210
and I think that's it so I have about

00:44:19,510 --> 00:44:28,030
eight minutes left yes at first

00:44:25,210 --> 00:44:31,560
especially managers at don't protest we

00:44:28,030 --> 00:44:33,190
work at citco right there's a good one

00:44:31,560 --> 00:44:34,780
knows that you're working with another

00:44:33,190 --> 00:44:36,820
company also return to decent

00:44:34,780 --> 00:44:37,840
importantly college I respect first how

00:44:36,820 --> 00:44:39,430
do you talk to people that are

00:44:37,840 --> 00:44:41,230
non-programmers to get them to realize

00:44:39,430 --> 00:44:43,120
is sometimes get to do some work first

00:44:41,230 --> 00:44:45,610
before you write but how do you take

00:44:43,120 --> 00:44:47,230
these ideas in the ocean you have joined

00:44:45,610 --> 00:44:49,180
better practices or target people that

00:44:47,230 --> 00:44:51,400
are so let me let me answer that

00:44:49,180 --> 00:44:53,800
question with with an even more

00:44:51,400 --> 00:44:55,360
illuminating question right so how do

00:44:53,800 --> 00:44:59,350
you talk to the Perl 6 design teams so

00:44:55,360 --> 00:45:01,210
they understand this I mean because we

00:44:59,350 --> 00:45:04,000
gotta roll programmers get it wrong not

00:45:01,210 --> 00:45:05,590
only case that that let me finish let me

00:45:04,000 --> 00:45:11,200
finish them but other people answer as

00:45:05,590 --> 00:45:13,630
well but the the the traditional model

00:45:11,200 --> 00:45:15,250
of engineering outside in software

00:45:13,630 --> 00:45:19,000
engineering or whatever is always

00:45:15,250 --> 00:45:21,820
marketing spec you know a specification

00:45:19,000 --> 00:45:25,420
and design specification and very much

00:45:21,820 --> 00:45:27,700
this linear process of going top down so

00:45:25,420 --> 00:45:28,990
to speak right and that is ingrained in

00:45:27,700 --> 00:45:30,580
our culture it's certainly been

00:45:28,990 --> 00:45:32,110
ingrained in software development it's

00:45:30,580 --> 00:45:34,570
engaged in engineering it's in gain

00:45:32,110 --> 00:45:36,730
ingrained and all sorts of feelings what

00:45:34,570 --> 00:45:38,650
open source has done over the past

00:45:36,730 --> 00:45:41,710
couple of decades to show there are

00:45:38,650 --> 00:45:44,080
other ways of doing it that you can do

00:45:41,710 --> 00:45:45,520
this other evolutionary rapid

00:45:44,080 --> 00:45:48,610
prototyping model to be able to get

00:45:45,520 --> 00:45:50,560
there and you have to start I think or

00:45:48,610 --> 00:45:52,690
where I would start is to start by

00:45:50,560 --> 00:45:54,100
saying what kind of development model

00:45:52,690 --> 00:45:57,040
are we going to do an explicitly

00:45:54,100 --> 00:45:59,020
recognized it at the beginning and it's

00:45:57,040 --> 00:46:01,270
what surprises me is how much pearl

00:45:59,020 --> 00:46:02,710
sticks in the pearl community so quickly

00:46:01,270 --> 00:46:04,720
lapsed into the traditional way of doing

00:46:02,710 --> 00:46:06,850
things when it came to Perl 6 without

00:46:04,720 --> 00:46:10,270
realizing what had got them there with

00:46:06,850 --> 00:46:13,270
pearl five so and I had one in it all

00:46:10,270 --> 00:46:14,320
right to declare the spec point 01 and

00:46:13,270 --> 00:46:17,950
you make certain there's a watermark

00:46:14,320 --> 00:46:19,480
that's draft may change on it and you

00:46:17,950 --> 00:46:21,220
just make certain that is sitting in

00:46:19,480 --> 00:46:23,050
home business people respect that sort

00:46:21,220 --> 00:46:25,390
of thing yeah if you know it's and

00:46:23,050 --> 00:46:26,890
recognize watermark and as you go look

00:46:25,390 --> 00:46:28,180
at like extreme programming a natural

00:46:26,890 --> 00:46:28,539
programming that's the whole thing that

00:46:28,180 --> 00:46:31,390
they get

00:46:28,539 --> 00:46:34,979
and so you know you can look for it is

00:46:31,390 --> 00:46:34,979
don't try and go that far in advance

00:46:36,179 --> 00:46:41,499
yeah but two weeks is a different time

00:46:38,380 --> 00:46:58,900
cycle than years is the point let me

00:46:41,499 --> 00:46:59,969
know may go from front of that so so so

00:46:58,900 --> 00:47:02,140
the question is about partial

00:46:59,969 --> 00:47:04,209
implementations of the spec we encourage

00:47:02,140 --> 00:47:08,319
those I mean toy implementations are

00:47:04,209 --> 00:47:10,179
great because they they help you to

00:47:08,319 --> 00:47:13,779
explore all of the things you didn't

00:47:10,179 --> 00:47:16,419
consider in your other one so just a

00:47:13,779 --> 00:47:18,099
brief illustration of that is that when

00:47:16,419 --> 00:47:21,189
we on the recruit of team decided we

00:47:18,099 --> 00:47:23,049
were going to do multiple backends

00:47:21,189 --> 00:47:26,619
multiple virtual machines our first

00:47:23,049 --> 00:47:28,569
intended target was the clr and then the

00:47:26,619 --> 00:47:30,729
HS of showed up the one that Stefano

00:47:28,569 --> 00:47:32,739
rear did which was a completely

00:47:30,729 --> 00:47:35,259
independent implementation of perl 6

00:47:32,739 --> 00:47:38,289
that targeted clr net and so we

00:47:35,259 --> 00:47:40,359
completely abandoned our intent to do

00:47:38,289 --> 00:47:42,159
clr first because we didn't want stumped

00:47:40,359 --> 00:47:44,380
on what he was doing we wanted that

00:47:42,159 --> 00:47:46,059
separate implementation and so much

00:47:44,380 --> 00:47:47,890
progress was made because his

00:47:46,059 --> 00:47:49,569
implementation found different areas of

00:47:47,890 --> 00:47:50,979
the design problem than we were

00:47:49,569 --> 00:47:52,749
exploring and that's the

00:47:50,979 --> 00:47:54,369
cross-pollination you know what every

00:47:52,749 --> 00:47:57,159
toy implementation helps you with that

00:47:54,369 --> 00:48:00,939
so I'm pulling favorite long-term last

00:47:57,159 --> 00:48:02,709
toy is more like we want to be um I

00:48:00,939 --> 00:48:04,179
don't have a problem though and I don't

00:48:02,709 --> 00:48:08,499
because I implemented one called not

00:48:04,179 --> 00:48:12,339
quite firmly next phone calls probably

00:48:08,499 --> 00:48:14,949
no Jim yep yes hey Jim you said I've

00:48:12,339 --> 00:48:17,619
been opposed to the major minor

00:48:14,949 --> 00:48:20,279
versioning system ever since parent yes

00:48:17,619 --> 00:48:26,019
now since we were both participants or

00:48:20,279 --> 00:48:27,219
sinners there I mean I can see what you

00:48:26,019 --> 00:48:29,979
mean if you're talking about our

00:48:27,219 --> 00:48:32,549
attempts to have a roadmap which was

00:48:29,979 --> 00:48:35,009
specified what we're going to do live

00:48:32,549 --> 00:48:36,660
in major and minor versions but

00:48:35,009 --> 00:48:40,109
apartment that were you trying to get

00:48:36,660 --> 00:48:42,509
something um in Peretz version numbering

00:48:40,109 --> 00:48:44,699
scheme my opinion is we had enough

00:48:42,509 --> 00:48:46,229
adopting the worst of all worlds all

00:48:44,699 --> 00:48:48,390
right because we ended up with a

00:48:46,229 --> 00:48:52,679
time-based numbering scheme that did not

00:48:48,390 --> 00:48:55,229
incorporate time so the way parents

00:48:52,679 --> 00:48:56,999
version numbering scheme works is the

00:48:55,229 --> 00:49:01,229
first release in January is always a dot

00:48:56,999 --> 00:49:02,969
go release so six point 0 was the

00:49:01,229 --> 00:49:05,699
release of such a January substance into

00:49:02,969 --> 00:49:07,289
year the next release to 6.1 6.2 6.3 all

00:49:05,699 --> 00:49:08,670
the way up to six point 11 and the

00:49:07,289 --> 00:49:11,459
january of the following year seven

00:49:08,670 --> 00:49:13,289
point oh right so it's a time-based

00:49:11,459 --> 00:49:15,599
release numbering system but when

00:49:13,289 --> 00:49:17,910
somebody with when i say six point 0 and

00:49:15,599 --> 00:49:19,859
seven point 0 what do you think out in

00:49:17,910 --> 00:49:23,249
the community seven point 0 is a major

00:49:19,859 --> 00:49:26,999
feature police right but it's not in the

00:49:23,249 --> 00:49:29,390
parent community right so that's not

00:49:26,999 --> 00:49:32,609
stuck with me to begin with and then

00:49:29,390 --> 00:49:34,289
parent label on top of that that certain

00:49:32,609 --> 00:49:37,199
releases with in that sequence had

00:49:34,289 --> 00:49:40,049
special meaning so the dot 0 releases

00:49:37,199 --> 00:49:41,849
were the stable releases and the envy

00:49:40,049 --> 00:49:46,259
I'm sorry the dough and the dot six

00:49:41,849 --> 00:49:47,939
releases 67 that say so and six were

00:49:46,259 --> 00:49:51,809
stable and the other ones in between

00:49:47,939 --> 00:49:54,150
were development releases right so that

00:49:51,809 --> 00:49:55,890
just like threw everybody off and then

00:49:54,150 --> 00:49:57,900
there was a deprecation cycle policy on

00:49:55,890 --> 00:50:00,329
top of that it was it was horrible and

00:49:57,900 --> 00:50:04,739
so with rokudo when we started releases

00:50:00,329 --> 00:50:07,140
our first release was numbered 10 second

00:50:04,739 --> 00:50:09,299
release was numbered one to right now I

00:50:07,140 --> 00:50:12,509
think we're up to release number 84 but

00:50:09,299 --> 00:50:14,939
when we mark it we actually do 2015 05

00:50:12,509 --> 00:50:17,009
and that's me as much better but it was

00:50:14,939 --> 00:50:19,739
the whole thing about parents numbering

00:50:17,009 --> 00:50:21,660
scheme was the major number has nothing

00:50:19,739 --> 00:50:25,469
to do with features even though that's

00:50:21,660 --> 00:50:27,509
the perception in the world and the

00:50:25,469 --> 00:50:28,949
minor number is there so there's nothing

00:50:27,509 --> 00:50:31,199
that indicates any sort of featuring

00:50:28,949 --> 00:50:32,489
thing but makes it look like we do so

00:50:31,199 --> 00:50:34,650
that was that was my big thing about

00:50:32,489 --> 00:50:36,539
that and it does I mean there were

00:50:34,650 --> 00:50:37,769
endless debates as you know on just a

00:50:36,539 --> 00:50:39,460
channel about how we should number it

00:50:37,769 --> 00:50:42,910
and that seemed for you doing

00:50:39,460 --> 00:50:45,340
well yes behind him you learn about some

00:50:42,910 --> 00:50:47,590
confusion in just the general public in

00:50:45,340 --> 00:50:50,140
a large about five synopses are not

00:50:47,590 --> 00:50:51,550
actually specifications why don't you

00:50:50,140 --> 00:50:53,860
just stop using the word synopses

00:50:51,550 --> 00:50:55,390
instead use reference traps or something

00:50:53,860 --> 00:50:58,930
like that I'm gonna probably call them

00:50:55,390 --> 00:51:01,270
design docs right by me but you know

00:50:58,930 --> 00:51:04,180
make it there about just specifications

00:51:01,270 --> 00:51:06,580
also the word it's not the synopsis it

00:51:04,180 --> 00:51:10,600
is historical in context and it's enough

00:51:06,580 --> 00:51:12,940
in the community that I would like I

00:51:10,600 --> 00:51:15,280
think it's worth keeping it for now but

00:51:12,940 --> 00:51:16,570
there's you have a good point i'll need

00:51:15,280 --> 00:51:19,120
to think about it so i think when you

00:51:16,570 --> 00:51:20,740
have to use a word to describe something

00:51:19,120 --> 00:51:24,760
I'm not explain what that where it means

00:51:20,740 --> 00:51:26,680
right good point I totally like that so

00:51:24,760 --> 00:51:28,990
for the for those who are streaming with

00:51:26,680 --> 00:51:30,250
he's what he said is if you're using a

00:51:28,990 --> 00:51:31,330
word to describe something and you have

00:51:30,250 --> 00:51:33,070
to explain the word that you're using

00:51:31,330 --> 00:51:36,490
the wrong word and I totally agree with

00:51:33,070 --> 00:51:38,230
that so thank you yes and then so you

00:51:36,490 --> 00:51:40,570
are talking about wine to be careful

00:51:38,230 --> 00:51:42,940
about using words that mean what you

00:51:40,570 --> 00:51:45,310
mean with the right definition and

00:51:42,940 --> 00:51:48,820
you're saying that in order to be Perl 6

00:51:45,310 --> 00:51:50,650
you have to pass the test suite we need

00:51:48,820 --> 00:51:52,570
to be very careful about what passing

00:51:50,650 --> 00:51:56,200
the test suite means because i can write

00:51:52,570 --> 00:51:59,170
a toy implementation that just returns

00:51:56,200 --> 00:52:01,390
okay for every test and i'm going to

00:51:59,170 --> 00:52:08,020
pass the specification and that's going

00:52:01,390 --> 00:52:12,340
to be a perl 6 anyone I don't know why

00:52:08,020 --> 00:52:16,390
and I right then I'll guy says okay okay

00:52:12,340 --> 00:52:19,890
okay yes so I like that and I and I'm

00:52:16,390 --> 00:52:19,890
almost willing to call that Perl 6

00:52:21,900 --> 00:52:26,680
and I'll even I'll even suggest a name

00:52:25,270 --> 00:52:31,660
for that particular implementation so

00:52:26,680 --> 00:52:33,670
much the whole 60 so well so um um so we

00:52:31,660 --> 00:52:35,380
have rokudo pearl right and we have the

00:52:33,670 --> 00:52:37,360
edge tab we have pugs you'll notice none

00:52:35,380 --> 00:52:39,040
of these compilers or implementation to

00:52:37,360 --> 00:52:43,780
all them several six let's buy on

00:52:39,040 --> 00:52:47,470
purpose so you can have sin full six new

00:52:43,780 --> 00:52:48,880
and you mu purl stitch right you can

00:52:47,470 --> 00:52:50,800
have those because it's you know it

00:52:48,880 --> 00:52:52,960
passes the test suite but it's really

00:52:50,800 --> 00:52:56,710
really once you get when you've taken

00:52:52,960 --> 00:53:00,220
everything else you possibly can over

00:52:56,710 --> 00:53:02,470
here as long as you have a big purse

00:53:00,220 --> 00:53:04,270
fashion I'll fix that funny little more

00:53:02,470 --> 00:53:07,690
murgu specific for discussion of

00:53:04,270 --> 00:53:09,040
detaching version numbers of the

00:53:07,690 --> 00:53:11,110
specific implementations from the

00:53:09,040 --> 00:53:12,640
version of the language is there the

00:53:11,110 --> 00:53:14,710
specification saying you have to say

00:53:12,640 --> 00:53:22,630
which brings specification you pass or

00:53:14,710 --> 00:53:24,670
you're trying to pass what I do know

00:53:22,630 --> 00:53:26,890
that we have so the question is does an

00:53:24,670 --> 00:53:28,650
implementation have to say of what

00:53:26,890 --> 00:53:31,330
version of the specification they pass

00:53:28,650 --> 00:53:33,100
what we do have I certainly know is that

00:53:31,330 --> 00:53:35,970
when you inside your pearls six script

00:53:33,100 --> 00:53:38,080
you can say I want to run on a

00:53:35,970 --> 00:53:40,780
implementation that claims at least this

00:53:38,080 --> 00:53:42,280
level right so that so the

00:53:40,780 --> 00:53:44,020
implementations will be able to claim a

00:53:42,280 --> 00:53:45,880
certain level there is a chicken and egg

00:53:44,020 --> 00:53:49,240
problem there and we've been wrestling

00:53:45,880 --> 00:53:51,700
with that but because people wanting to

00:53:49,240 --> 00:53:53,680
be able to say bakudo passes the release

00:53:51,700 --> 00:53:56,440
of pearl six that hasn't even happened

00:53:53,680 --> 00:53:58,990
yet no because we're constantly evolving

00:53:56,440 --> 00:54:00,600
so but the shorthand is yes there's

00:53:58,990 --> 00:54:02,380
going to be something that maps

00:54:00,600 --> 00:54:03,970
implementations to what they

00:54:02,380 --> 00:54:07,720
successfully implement we just don't

00:54:03,970 --> 00:54:10,060
know what will look like it I know my

00:54:07,720 --> 00:54:12,360
time is out so thank you all very much

00:54:10,060 --> 00:54:12,360
for coming

00:54:15,860 --> 00:54:20,520
we have april six hackathon tomorrow

00:54:19,140 --> 00:54:21,960
there's a hacking session going on

00:54:20,520 --> 00:54:24,000
tomorrow so if you want to come in join

00:54:21,960 --> 00:54:26,460
us please feel free to do something and

00:54:24,000 --> 00:54:35,119
we can talk about things point in all

00:54:26,460 --> 00:54:35,119

YouTube URL: https://www.youtube.com/watch?v=5sWIjQAQCaw


