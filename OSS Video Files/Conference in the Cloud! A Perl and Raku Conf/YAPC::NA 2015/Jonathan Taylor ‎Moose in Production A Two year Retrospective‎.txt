Title: Jonathan Taylor ‎Moose in Production A Two year Retrospective‎
Publication date: 2015-06-16
Playlist: YAPC::NA 2015
Description: 
	
Captions: 
	00:00:01,010 --> 00:00:08,400
okay I guess we'll get started my name

00:00:06,240 --> 00:00:10,250
is Jonathan Taylor this is Moosa

00:00:08,400 --> 00:00:13,610
production or two year retrospective

00:00:10,250 --> 00:00:18,480
work for Eid and the Hostgator brand

00:00:13,610 --> 00:00:22,230
that's my email write down quick because

00:00:18,480 --> 00:00:27,210
I got a lot of slides do here's what the

00:00:22,230 --> 00:00:30,900
talks about it's about moose patterns

00:00:27,210 --> 00:00:32,850
and people didn't get my diagram quite

00:00:30,900 --> 00:00:37,739
right but I do wish i had made that a

00:00:32,850 --> 00:00:39,559
heart because I like those things so why

00:00:37,739 --> 00:00:42,270
the long name if that's what it's about

00:00:39,559 --> 00:00:44,629
because these things mean specific

00:00:42,270 --> 00:00:46,590
things to me one of course we use mousse

00:00:44,629 --> 00:00:49,260
second production is a very specific

00:00:46,590 --> 00:00:50,910
meaning to us that means it's software

00:00:49,260 --> 00:00:54,629
that we actually use for the enterprise

00:00:50,910 --> 00:00:57,719
and is released so this is you know this

00:00:54,629 --> 00:01:00,390
isn't code that was an exercise this is

00:00:57,719 --> 00:01:02,699
stuff we really made two years of

00:01:00,390 --> 00:01:05,729
experience using mousse so that's kind

00:01:02,699 --> 00:01:07,619
of obvious and the retrospective part is

00:01:05,729 --> 00:01:12,060
to make it clear that i'm talking about

00:01:07,619 --> 00:01:14,640
our story so this is not a you know a

00:01:12,060 --> 00:01:17,070
list of things you should do or what's

00:01:14,640 --> 00:01:18,420
best or worse this is about what

00:01:17,070 --> 00:01:20,549
happened to us and what worked for us

00:01:18,420 --> 00:01:23,130
and if it's useful to you i'll be very

00:01:20,549 --> 00:01:26,159
very glad because a lot of times there's

00:01:23,130 --> 00:01:29,070
a lot of debate about the different tim

00:01:26,159 --> 00:01:30,570
toadies so this is one of the ways that

00:01:29,070 --> 00:01:31,950
we tried to do it and some of the things

00:01:30,570 --> 00:01:36,110
that happen when we try to do it that

00:01:31,950 --> 00:01:40,979
way so where we started was that we had

00:01:36,110 --> 00:01:44,460
a whole lot of different pearl systems

00:01:40,979 --> 00:01:47,130
doing a whole lot of different jobs this

00:01:44,460 --> 00:01:49,259
happened to be our billing system now

00:01:47,130 --> 00:01:51,180
even though it looked ugly like this it

00:01:49,259 --> 00:01:53,579
turns out that the business ran pretty

00:01:51,180 --> 00:01:55,200
well for like a decade on the system

00:01:53,579 --> 00:01:57,630
like this so even though it wasn't

00:01:55,200 --> 00:02:00,450
pretty it did the job and the business

00:01:57,630 --> 00:02:03,119
got quite successful the thing happened

00:02:00,450 --> 00:02:05,030
though is we got acquired by G Plus

00:02:03,119 --> 00:02:08,129
being Hostgator and they had some

00:02:05,030 --> 00:02:10,530
reporting requirements that this model

00:02:08,129 --> 00:02:12,330
wasn't up for because the different

00:02:10,530 --> 00:02:13,620
pieces crown one in Khurana to they

00:02:12,330 --> 00:02:15,969
might have both done bill

00:02:13,620 --> 00:02:17,920
actually this used car on 3 & cron too

00:02:15,969 --> 00:02:19,269
they both did billing they both serve

00:02:17,920 --> 00:02:21,670
the purpose well they did it good enough

00:02:19,269 --> 00:02:23,260
but they did it ever so slightly

00:02:21,670 --> 00:02:27,400
different from a reporting standpoint

00:02:23,260 --> 00:02:31,000
and we had a you know necessity to try

00:02:27,400 --> 00:02:32,620
to make the reporting consistent in

00:02:31,000 --> 00:02:34,180
order to do that we wanted to move from

00:02:32,620 --> 00:02:37,719
what we had to something look more like

00:02:34,180 --> 00:02:39,609
this so that we had a centralized place

00:02:37,719 --> 00:02:41,219
where we did all of the different

00:02:39,609 --> 00:02:43,480
billing logic instead of having it

00:02:41,219 --> 00:02:46,150
spread all over the place and that way

00:02:43,480 --> 00:02:49,079
if we do it the same way all over we can

00:02:46,150 --> 00:02:52,840
report on it consistently pretty clear

00:02:49,079 --> 00:02:54,730
alright so once we decided to do this we

00:02:52,840 --> 00:02:57,400
had to decide what technologies we

00:02:54,730 --> 00:02:58,870
wanted to use to do it we decided we

00:02:57,400 --> 00:03:01,989
didn't want to spend a whole lot of time

00:02:58,870 --> 00:03:04,719
talking about how to do o.o but we

00:03:01,989 --> 00:03:06,849
definitely wanted to do oo and we didn't

00:03:04,719 --> 00:03:09,549
want to do a lot of time evaluating what

00:03:06,849 --> 00:03:11,109
we did and we didn't need so we chose

00:03:09,549 --> 00:03:13,209
pretty much what we at the time

00:03:11,109 --> 00:03:14,889
perceived to have everything we could

00:03:13,209 --> 00:03:18,069
possibly need and that ended up being

00:03:14,889 --> 00:03:20,109
loose the data data table the table data

00:03:18,069 --> 00:03:24,069
gateways that ended up being d bic but

00:03:20,109 --> 00:03:28,750
our DB i see i'm not sure what their way

00:03:24,069 --> 00:03:35,759
to do that is but i say it anyway but

00:03:28,750 --> 00:03:39,430
the domain models we built in moose so

00:03:35,759 --> 00:03:40,840
where's my ah i skipped over it so

00:03:39,430 --> 00:03:44,259
here's an overview of what we're going

00:03:40,840 --> 00:03:45,659
to talk about these are some are when I

00:03:44,259 --> 00:03:47,949
say patterns some of them are more

00:03:45,659 --> 00:03:49,930
formal pattern some of them are patterns

00:03:47,949 --> 00:03:51,939
and people that's the people part of the

00:03:49,930 --> 00:03:54,489
equation and these are some of the

00:03:51,939 --> 00:03:56,439
behaviors that came out of it these are

00:03:54,489 --> 00:03:58,329
a little bit vague because you know I

00:03:56,439 --> 00:04:00,879
don't want you to read my slides I want

00:03:58,329 --> 00:04:05,199
to be able to talk about them but this

00:04:00,879 --> 00:04:07,900
is a kind of an overview a lot of this

00:04:05,199 --> 00:04:09,789
is talking about laziness and laziness

00:04:07,900 --> 00:04:13,329
in the context of what we were doing I

00:04:09,789 --> 00:04:14,979
have a little bit of editorial on why we

00:04:13,329 --> 00:04:17,229
had some of the trouble with the

00:04:14,979 --> 00:04:20,190
laziness then we talked a little about a

00:04:17,229 --> 00:04:24,370
coercion that's the offer you can refuse

00:04:20,190 --> 00:04:27,280
a little bit of note on testing the end

00:04:24,370 --> 00:04:30,430
and if I did this too quickly but I have

00:04:27,280 --> 00:04:34,540
some extra stuff we can look at and if I

00:04:30,430 --> 00:04:39,400
have way too much then we'll hurry up

00:04:34,540 --> 00:04:41,470
real quick at the end so the first

00:04:39,400 --> 00:04:44,560
behavior we kind of came into contact

00:04:41,470 --> 00:04:47,070
with when we started using mousse was

00:04:44,560 --> 00:04:49,750
something I call method / ssion and

00:04:47,070 --> 00:04:51,160
there were so many nifty features that

00:04:49,750 --> 00:04:52,840
moose would do and the first thing that

00:04:51,160 --> 00:04:57,070
smacks you in the face with moves his

00:04:52,840 --> 00:04:59,770
attributes and now somebody something

00:04:57,070 --> 00:05:02,229
happened where the part of the brain

00:04:59,770 --> 00:05:05,050
that thinks about methods kind of went a

00:05:02,229 --> 00:05:12,310
little bit weird for a while so this is

00:05:05,050 --> 00:05:13,690
a an attribute that is lazy so it

00:05:12,310 --> 00:05:18,970
doesn't do any work it doesn't need to

00:05:13,690 --> 00:05:22,030
do and if it needs to get the total of

00:05:18,970 --> 00:05:26,260
the bottles it goes ahead and call us

00:05:22,030 --> 00:05:31,330
lazy builder and that solves the problem

00:05:26,260 --> 00:05:34,090
right all right no reaction well the

00:05:31,330 --> 00:05:37,150
answer is kinda sorta the problem with

00:05:34,090 --> 00:05:39,340
this is that if something changes say

00:05:37,150 --> 00:05:41,740
the number of sodas and this has been

00:05:39,340 --> 00:05:44,430
built and you try to go get the total

00:05:41,740 --> 00:05:47,410
bottles it the information will be wrong

00:05:44,430 --> 00:05:50,220
so if what you really want to do is know

00:05:47,410 --> 00:05:53,260
the total what you really want is that

00:05:50,220 --> 00:05:56,020
so somehow the fact that attributes were

00:05:53,260 --> 00:05:57,550
available suddenly made this seem like a

00:05:56,020 --> 00:06:00,639
bad idea because it's inefficient

00:05:57,550 --> 00:06:02,710
because you calculated every time so it

00:06:00,639 --> 00:06:04,449
added complexity and again this might be

00:06:02,710 --> 00:06:06,190
this might be obvious to other people

00:06:04,449 --> 00:06:07,270
that it's a bad idea but this is

00:06:06,190 --> 00:06:13,720
something that really happened in our

00:06:07,270 --> 00:06:16,090
code so the next phenomenon that I'd

00:06:13,720 --> 00:06:19,330
like to talk about is the suicidal

00:06:16,090 --> 00:06:21,430
builder this is also about laziness

00:06:19,330 --> 00:06:23,500
because we were all about laziness we

00:06:21,430 --> 00:06:26,620
wanted to not do anything we didn't have

00:06:23,500 --> 00:06:30,010
to and in this case we've got cabbages

00:06:26,620 --> 00:06:33,760
and it's an attribute again and it's

00:06:30,010 --> 00:06:37,060
lazy and it's got a builder now it

00:06:33,760 --> 00:06:37,810
turned out though that you know you know

00:06:37,060 --> 00:06:40,090
this is our which

00:06:37,810 --> 00:06:42,550
because it's an example but if you know

00:06:40,090 --> 00:06:46,240
if you don't have cabbages and coffee

00:06:42,550 --> 00:06:48,570
you don't have good and so if there's no

00:06:46,240 --> 00:06:54,880
coffee and you try to use the Builder

00:06:48,570 --> 00:06:56,650
the the Builder would die so you're

00:06:54,880 --> 00:06:59,020
running your code and suddenly you have

00:06:56,650 --> 00:07:02,740
a instance of your class and you want to

00:06:59,020 --> 00:07:05,560
try to go call your cabbages attribute

00:07:02,740 --> 00:07:07,720
and your code explodes and then you have

00:07:05,560 --> 00:07:15,070
to go dig through and discover that

00:07:07,720 --> 00:07:16,600
there's a necessity for coffee very

00:07:15,070 --> 00:07:19,750
difficult to do bug but this kind of

00:07:16,600 --> 00:07:21,850
thing also happened because you know we

00:07:19,750 --> 00:07:23,590
wanted to enforce the fact that you have

00:07:21,850 --> 00:07:31,330
to have this particular state in the

00:07:23,590 --> 00:07:34,030
object to properly get a cabbages so if

00:07:31,330 --> 00:07:38,020
you try to use it there's the when I was

00:07:34,030 --> 00:07:39,460
talking about it mysteriously dying so

00:07:38,020 --> 00:07:40,900
this is Annie o matic mousse you know

00:07:39,460 --> 00:07:42,310
when you call a moose attribute you

00:07:40,900 --> 00:07:46,630
don't generally expect your code to

00:07:42,310 --> 00:07:50,640
explode but using the previous owed it

00:07:46,630 --> 00:07:53,590
just might do that to you so one of our

00:07:50,640 --> 00:07:58,289
observant developers like oh oh that

00:07:53,590 --> 00:07:58,289
that could explode so then they do this

00:07:59,220 --> 00:08:13,020
now problem solved right okay let's but

00:08:08,229 --> 00:08:13,020
okay um how about that

00:08:16,480 --> 00:08:25,490
so they're not now it's maybe undef so

00:08:20,600 --> 00:08:27,470
um you know what happened was is that I

00:08:25,490 --> 00:08:29,300
felt like we really needed to go and

00:08:27,470 --> 00:08:32,480
think about some fundamentals right

00:08:29,300 --> 00:08:35,480
again f afterward you want to argue

00:08:32,480 --> 00:08:37,640
about this stuff I'll do my best to

00:08:35,480 --> 00:08:39,320
avoid argument I don't like conflict

00:08:37,640 --> 00:08:42,200
very much but I'll discuss it with you

00:08:39,320 --> 00:08:45,380
but in the way we used it when you use

00:08:42,200 --> 00:08:47,990
mousse you're defining a class the fact

00:08:45,380 --> 00:08:51,410
that it has cabbages means in our case

00:08:47,990 --> 00:08:55,130
that your class is composed of instances

00:08:51,410 --> 00:08:59,000
of cabbages lazy one means that lazy one

00:08:55,130 --> 00:09:01,600
means that we have the ability to get an

00:08:59,000 --> 00:09:05,210
instance of cabbages if we need to and

00:09:01,600 --> 00:09:07,000
the Builder get cabbages is supposed to

00:09:05,210 --> 00:09:10,040
have the job of getting you a cabbage

00:09:07,000 --> 00:09:12,260
it's not supposed to have the job of

00:09:10,040 --> 00:09:16,940
checking whether or not you have coffee

00:09:12,260 --> 00:09:20,900
and that was pretty much the the real

00:09:16,940 --> 00:09:23,720
problem is that the enforcing of whether

00:09:20,900 --> 00:09:25,310
or not coffee is there really should be

00:09:23,720 --> 00:09:26,990
the concern of something else in our

00:09:25,310 --> 00:09:29,120
case it should have been the concern of

00:09:26,990 --> 00:09:31,700
the constructor you shouldn't have an

00:09:29,120 --> 00:09:38,510
object that could explode because it's

00:09:31,700 --> 00:09:42,620
not properly formed so now I'm going to

00:09:38,510 --> 00:09:46,130
go on to a lazy loader pattern which is

00:09:42,620 --> 00:09:49,520
sort of a an interesting sort of

00:09:46,130 --> 00:09:55,180
counterpoint to the example I gave I do

00:09:49,520 --> 00:09:57,590
it going really fast so here's an

00:09:55,180 --> 00:10:00,770
interesting counterpoint there's a

00:09:57,590 --> 00:10:03,530
pattern called lazy loader and lazy

00:10:00,770 --> 00:10:05,360
loader is that if you have something

00:10:03,530 --> 00:10:08,630
that's very expensive like say a

00:10:05,360 --> 00:10:13,130
database call you don't want to actually

00:10:08,630 --> 00:10:14,750
do that call unless you really have to

00:10:13,130 --> 00:10:17,390
because it might be expensive it might

00:10:14,750 --> 00:10:20,000
be a million line query so if you have

00:10:17,390 --> 00:10:21,530
an invoice and it's got you know 1,500

00:10:20,000 --> 00:10:24,350
items on it because you were very

00:10:21,530 --> 00:10:25,940
successful at selling something you

00:10:24,350 --> 00:10:28,190
might not want to just always load up

00:10:25,940 --> 00:10:30,410
all those items if you just want to say

00:10:28,190 --> 00:10:37,190
you know find out some bit of trivia

00:10:30,410 --> 00:10:38,990
about the invoice so in this case you do

00:10:37,190 --> 00:10:41,960
use lazy I think it's quite appropriate

00:10:38,990 --> 00:10:44,420
and in this case what we're being lazy

00:10:41,960 --> 00:10:49,700
about is you know line items and we're

00:10:44,420 --> 00:10:58,030
saying it's probably slow so now we have

00:10:49,700 --> 00:11:09,890
this so it kind of looks familiar so is

00:10:58,030 --> 00:11:11,570
that the same problem no it isn't the

00:11:09,890 --> 00:11:16,190
reason this isn't the same problem is

00:11:11,570 --> 00:11:18,470
because the the job of the load line

00:11:16,190 --> 00:11:21,080
items builder is to go get those line

00:11:18,470 --> 00:11:25,360
items it is its responsibility get those

00:11:21,080 --> 00:11:28,100
line items the problem is is that

00:11:25,360 --> 00:11:31,010
getting its line items involves a

00:11:28,100 --> 00:11:34,490
database operation database operations

00:11:31,010 --> 00:11:37,400
are outside of the control of the of the

00:11:34,490 --> 00:11:39,620
of the code if the database goes down

00:11:37,400 --> 00:11:42,530
that's an externality which means that

00:11:39,620 --> 00:11:45,280
there's a possibility that you're going

00:11:42,530 --> 00:11:47,810
to have a database error anytime and

00:11:45,280 --> 00:11:50,780
somewhere along the line you need to

00:11:47,810 --> 00:11:57,440
handle that error so what that extends

00:11:50,780 --> 00:12:00,230
to at least for us is that we consider

00:11:57,440 --> 00:12:02,930
the fact that the lazy loader might die

00:12:00,230 --> 00:12:08,210
because of a database problem as part of

00:12:02,930 --> 00:12:10,580
the interface of the lazy loader it's

00:12:08,210 --> 00:12:12,190
the sill it's still the same situation

00:12:10,580 --> 00:12:14,750
where you have to wrap it in a try block

00:12:12,190 --> 00:12:17,360
but it's because it's a situation that's

00:12:14,750 --> 00:12:21,350
outside of your control more or less

00:12:17,360 --> 00:12:23,240
it's a runtime exception and we don't

00:12:21,350 --> 00:12:25,940
currently have any sort of formal model

00:12:23,240 --> 00:12:28,010
for handling this type of exception so

00:12:25,940 --> 00:12:31,270
instead we just have to comment it and

00:12:28,010 --> 00:12:34,130
make sure that we wrap it properly and

00:12:31,270 --> 00:12:36,560
generally we do know what to do as

00:12:34,130 --> 00:12:41,020
programmers when the database fails and

00:12:36,560 --> 00:12:41,020
that is get up at 3am in the morning

00:12:43,470 --> 00:12:55,959
so going back to the the original

00:12:49,949 --> 00:13:03,189
premise here there's a line in here it

00:12:55,959 --> 00:13:08,649
says probably slow and in the case that

00:13:03,189 --> 00:13:10,929
we are having it was a little slow the

00:13:08,649 --> 00:13:12,790
problem is is even though it was a

00:13:10,929 --> 00:13:15,399
little slow we almost always had to do

00:13:12,790 --> 00:13:19,720
it anyway so we had the initial query

00:13:15,399 --> 00:13:22,329
for the invoice proper and then you had

00:13:19,720 --> 00:13:24,429
the secondary query for the line items

00:13:22,329 --> 00:13:28,959
and we almost always had to do the line

00:13:24,429 --> 00:13:30,790
items so by doing this and thinking that

00:13:28,959 --> 00:13:33,790
we were super clever by making it a lazy

00:13:30,790 --> 00:13:35,589
loader we ended up generating to queries

00:13:33,790 --> 00:13:38,379
and every time we instantiated one of

00:13:35,589 --> 00:13:44,519
these things and we could have very

00:13:38,379 --> 00:13:44,519
easily generated one query instead so

00:13:48,600 --> 00:13:59,619
now I go on my little aside as to why it

00:13:54,459 --> 00:14:01,809
might be that the laziness was so I

00:13:59,619 --> 00:14:03,879
don't know spread out in our code that

00:14:01,809 --> 00:14:06,429
we made this assumption that we wanted

00:14:03,879 --> 00:14:08,980
to make everything lazy all the time I

00:14:06,429 --> 00:14:12,189
was trying to figure out why all of us

00:14:08,980 --> 00:14:15,249
knew moose people we're adding all this

00:14:12,189 --> 00:14:19,869
extra complexity with lazy and it turns

00:14:15,249 --> 00:14:21,910
out but we were kind of told to I'm not

00:14:19,869 --> 00:14:27,749
going to follow these links but and I'll

00:14:21,910 --> 00:14:35,169
let you read the text if you'd like and

00:14:27,749 --> 00:14:39,129
here's the thing much like ob1 says this

00:14:35,169 --> 00:14:40,749
is true from a certain point of view it

00:14:39,129 --> 00:14:45,189
just didn't happen to be true from our

00:14:40,749 --> 00:14:47,079
point of view what we valued and when we

00:14:45,189 --> 00:14:50,350
were trying to to accomplish what we

00:14:47,079 --> 00:14:52,930
were doing was not being performant we

00:14:50,350 --> 00:14:56,770
didn't value trying to get maximum

00:14:52,930 --> 00:14:59,980
a horsepower out of our code we didn't

00:14:56,770 --> 00:15:04,020
value trying to limit CPU time what we

00:14:59,980 --> 00:15:08,190
valued was limiting complexity and

00:15:04,020 --> 00:15:10,120
having very clear code and then going at

00:15:08,190 --> 00:15:14,230
optimization as something that we did

00:15:10,120 --> 00:15:17,020
after we tested the code so it's sort of

00:15:14,230 --> 00:15:19,990
a pre optimized versus a post optimized

00:15:17,020 --> 00:15:21,760
set of values and there's debate back

00:15:19,990 --> 00:15:23,980
and forth between whether you should pre

00:15:21,760 --> 00:15:28,450
optimize or not but that's not a value

00:15:23,980 --> 00:15:31,390
we had and the value of you know pre

00:15:28,450 --> 00:15:33,240
optimization versus pre optimization was

00:15:31,390 --> 00:15:40,560
not addressed in what we originally

00:15:33,240 --> 00:15:40,560
learned with any questions

00:15:44,339 --> 00:15:52,529
so so I'm going to move on to coercion I

00:15:49,769 --> 00:15:56,910
think coercion is really appropriately

00:15:52,529 --> 00:15:59,040
named because to coerce has kind of got

00:15:56,910 --> 00:16:02,309
a negative connotation to it it's kind

00:15:59,040 --> 00:16:05,579
of forcing something to someone to do

00:16:02,309 --> 00:16:11,850
something under a little bit of duress

00:16:05,579 --> 00:16:14,540
you know and at least for us coercion

00:16:11,850 --> 00:16:18,689
was a source of the quite a bit of

00:16:14,540 --> 00:16:24,749
friction the reason that coercion was

00:16:18,689 --> 00:16:29,870
part of friction was that it was a new

00:16:24,749 --> 00:16:35,069
toy and everyone wanted to try it for 12

00:16:29,870 --> 00:16:43,230
in this particular case we were going

00:16:35,069 --> 00:16:46,139
from this database model so that

00:16:43,230 --> 00:16:48,209
database right there I didn't show you

00:16:46,139 --> 00:16:53,189
much of what's in there but that's

00:16:48,209 --> 00:16:55,709
because it was frightening and it wasn't

00:16:53,189 --> 00:16:57,540
bad in terms of doing business but it

00:16:55,709 --> 00:17:00,329
was very bad in terms of having the

00:16:57,540 --> 00:17:05,839
program with it because we had a mixture

00:17:00,329 --> 00:17:13,439
of date times unix times and time stamps

00:17:05,839 --> 00:17:15,899
sometimes in the same table yeah but so

00:17:13,439 --> 00:17:22,339
we were tasked with having to deal with

00:17:15,899 --> 00:17:25,649
dates at our domain level so that our

00:17:22,339 --> 00:17:29,480
classes could not have to worry about

00:17:25,649 --> 00:17:29,480
you know whether something

00:17:37,540 --> 00:17:42,710
not having to worry about whether

00:17:39,560 --> 00:17:47,510
something was a eunuch state or you know

00:17:42,710 --> 00:17:51,350
a date time and so here's what we came

00:17:47,510 --> 00:17:53,480
up with and because you know again this

00:17:51,350 --> 00:17:57,440
is oversimplified because there's lots

00:17:53,480 --> 00:17:59,990
of bad things it's not a separate file

00:17:57,440 --> 00:18:03,650
so on and so forth but this is for

00:17:59,990 --> 00:18:05,210
illustration we wanted to if we got a

00:18:03,650 --> 00:18:07,180
string back from the database because

00:18:05,210 --> 00:18:09,920
that's the way our database was

00:18:07,180 --> 00:18:12,080
configured if you have a date in there

00:18:09,920 --> 00:18:17,990
it'll give you back a string string of

00:18:12,080 --> 00:18:22,640
high date and if you had a an epic it

00:18:17,990 --> 00:18:27,790
will give you back an int and this

00:18:22,640 --> 00:18:27,790
seemed good at the time but it's broken

00:18:35,160 --> 00:18:40,640
so if we have a test or the Hat

00:18:43,480 --> 00:18:51,880
pretty straightforward you have an epic

00:18:47,040 --> 00:18:53,680
pass it into your event constructor give

00:18:51,880 --> 00:18:57,280
it a date of epic let's go back to look

00:18:53,680 --> 00:18:59,680
at it there I didn't have the method

00:18:57,280 --> 00:19:02,160
there my apologies but it has a method

00:18:59,680 --> 00:19:05,770
called event it's something that coerces

00:19:02,160 --> 00:19:14,280
and then you check to see if you got the

00:19:05,770 --> 00:19:14,280
right date time and that's what happens

00:19:18,540 --> 00:19:23,210
alright so any idea why

00:19:31,320 --> 00:19:41,910
very much a it a fancier way I guess is

00:19:37,560 --> 00:19:45,900
that int is a subtype of num and num as

00:19:41,910 --> 00:19:48,810
a subtype of string so in the situation

00:19:45,900 --> 00:19:52,010
that we were in oh I gave away the hints

00:19:48,810 --> 00:19:59,340
are already in the situation we were in

00:19:52,010 --> 00:20:01,710
the when the coercion code ran it ran in

00:19:59,340 --> 00:20:06,300
this sequence and went and checked to

00:20:01,710 --> 00:20:11,010
see if what was passed in was a it was a

00:20:06,300 --> 00:20:13,530
string and since an int as he said is is

00:20:11,010 --> 00:20:16,410
a string then it used that first block

00:20:13,530 --> 00:20:19,080
of code and this code as it is written

00:20:16,410 --> 00:20:26,730
right here the second coercion will

00:20:19,080 --> 00:20:33,210
never ever ever ever run so there's the

00:20:26,730 --> 00:20:35,270
fix put it in the other order now

00:20:33,210 --> 00:20:39,210
there's a missing piece here though I

00:20:35,270 --> 00:20:41,780
forgot to put it in the missing pieces

00:20:39,210 --> 00:20:44,520
that you need to put a comment in here

00:20:41,780 --> 00:20:47,670
because if you're maintaining the code

00:20:44,520 --> 00:20:48,960
and you're not paying attention you

00:20:47,670 --> 00:20:57,210
might put them out of order again and

00:20:48,960 --> 00:21:04,170
break stuff but swap the lines now it

00:20:57,210 --> 00:21:09,110
passes all right well we're talking

00:21:04,170 --> 00:21:13,650
about testing testing is a really

00:21:09,110 --> 00:21:15,990
controversial topic and continues to be

00:21:13,650 --> 00:21:20,730
where I work I'm not sure why but there

00:21:15,990 --> 00:21:22,110
are different schools of thought the the

00:21:20,730 --> 00:21:23,670
schools have thought that where we all

00:21:22,110 --> 00:21:25,230
agree is that there needs to be some

00:21:23,670 --> 00:21:30,510
when there needs to be lots of it but

00:21:25,230 --> 00:21:33,300
how we go about it really is what varies

00:21:30,510 --> 00:21:34,530
widely I decided to use my rough slide

00:21:33,300 --> 00:21:38,250
here if you can't read my handwriting

00:21:34,530 --> 00:21:41,430
I'm going to talk about it anyway so we

00:21:38,250 --> 00:21:43,590
had situations where we had a class and

00:21:41,430 --> 00:21:50,159
the class is a moves class

00:21:43,590 --> 00:21:52,770
and we had a test file and you know some

00:21:50,159 --> 00:21:55,020
people felt that for every class you

00:21:52,770 --> 00:21:58,350
should have a test file to test the

00:21:55,020 --> 00:22:02,070
method for the class and then if you had

00:21:58,350 --> 00:22:04,169
say a bug in the class then you wanted

00:22:02,070 --> 00:22:07,200
to put in a test after you fixed it you

00:22:04,169 --> 00:22:11,250
put in yet another test file so on and

00:22:07,200 --> 00:22:15,330
so forth well people make a big deal

00:22:11,250 --> 00:22:20,789
about Lucis startup time for us it was

00:22:15,330 --> 00:22:23,850
never a problem except here because if

00:22:20,789 --> 00:22:27,179
you had a class and say moose took a

00:22:23,850 --> 00:22:29,580
second to start right you ever take

00:22:27,179 --> 00:22:31,730
whatever depending on your virtual

00:22:29,580 --> 00:22:36,690
environment how fast it is or isn't and

00:22:31,730 --> 00:22:38,669
you have a class and you've got 20 tests

00:22:36,690 --> 00:22:42,929
for that class and you've added 20

00:22:38,669 --> 00:22:45,960
seconds to your time that it takes to

00:22:42,929 --> 00:22:49,890
make to do your tests now we have

00:22:45,960 --> 00:22:54,059
somewhere on the order i think over 100

00:22:49,890 --> 00:22:57,360
classes so that's a hundred seconds

00:22:54,059 --> 00:22:59,100
times however many methods it's pretty

00:22:57,360 --> 00:23:01,980
much Oh of n where n is the number of

00:22:59,100 --> 00:23:05,399
test files that you have so this is the

00:23:01,980 --> 00:23:10,110
one place where the startup time really

00:23:05,399 --> 00:23:12,809
affected us and the the cure for this is

00:23:10,110 --> 00:23:14,850
to not make so many files if you're

00:23:12,809 --> 00:23:17,010
going to test a class how about you have

00:23:14,850 --> 00:23:19,260
a single file for testing the class or

00:23:17,010 --> 00:23:21,740
you have a file for testing related

00:23:19,260 --> 00:23:25,100
classes which is where we're moving now

00:23:21,740 --> 00:23:25,100
any questions

00:23:29,799 --> 00:23:41,480
mmm I am running fast that's okay I'll

00:23:35,330 --> 00:23:45,140
improvise so here's the where we ended

00:23:41,480 --> 00:23:58,960
up so we actually over the course of two

00:23:45,140 --> 00:24:01,460
years went from from that to that and

00:23:58,960 --> 00:24:06,950
for us that was a really big deal

00:24:01,460 --> 00:24:11,630
because now we can report and we move

00:24:06,950 --> 00:24:15,409
all of our billing logic through a

00:24:11,630 --> 00:24:18,399
single library all right glad I put in

00:24:15,409 --> 00:24:18,399
those special features

00:24:28,980 --> 00:24:31,760
yes

00:24:39,380 --> 00:24:46,570
oh dear we can talk about those in a

00:24:44,060 --> 00:24:46,570
minute actually

00:24:58,490 --> 00:25:21,160
I'm glad you asked about that just a

00:25:03,020 --> 00:25:26,110
moment all I aren't won't yeah all right

00:25:21,160 --> 00:25:26,110
so let that to the special features

00:25:34,980 --> 00:25:42,130
so I love moose and I'm sure that people

00:25:40,180 --> 00:25:48,130
put in a whole lot of work and I feel

00:25:42,130 --> 00:25:54,070
really bad pointing fingers it I don't

00:25:48,130 --> 00:25:56,230
mean to sow discord but again I've been

00:25:54,070 --> 00:26:00,220
trying to understand we did have some

00:25:56,230 --> 00:26:02,110
bizarre trigger behavior in our code it

00:26:00,220 --> 00:26:03,790
was a symptom of method aversion I

00:26:02,110 --> 00:26:06,070
originally didn't want to touch on it

00:26:03,790 --> 00:26:08,710
because triggers are already hard to

00:26:06,070 --> 00:26:12,990
explain and then the examples of broken

00:26:08,710 --> 00:26:15,250
triggers in our code were pathologically

00:26:12,990 --> 00:26:19,900
insane almost but I don't think

00:26:15,250 --> 00:26:24,990
intentionally so so do I have an

00:26:19,900 --> 00:26:24,990
internet connection I but i don't i

00:26:25,710 --> 00:26:41,290
forgot to connect it internet I bet I

00:26:28,540 --> 00:26:45,490
did darn it let's go through the other

00:26:41,290 --> 00:26:48,720
special features then we'll then I'll

00:26:45,490 --> 00:26:51,310
stumble my way to the thing that I

00:26:48,720 --> 00:26:57,360
wanted to come back that you asked about

00:26:51,310 --> 00:27:01,860
is that okay alright so i'm pretty

00:26:57,360 --> 00:27:05,830
pretty proud of the work that we did and

00:27:01,860 --> 00:27:08,790
i didn't expect to be able to force you

00:27:05,830 --> 00:27:11,860
to indulge us in this it's a little long

00:27:08,790 --> 00:27:14,950
but the reason why emphasized in

00:27:11,860 --> 00:27:17,290
production is that wow we did this we

00:27:14,950 --> 00:27:20,800
didn't put the business on hold we

00:27:17,290 --> 00:27:24,610
didn't stop adding features we moved to

00:27:20,800 --> 00:27:27,400
a deploy of once every two weeks at

00:27:24,610 --> 00:27:32,290
minimum on average over the course the

00:27:27,400 --> 00:27:36,730
past two years and we deployed this to

00:27:32,290 --> 00:27:39,040
production almost the same three weeks

00:27:36,730 --> 00:27:42,550
that we introduced the code for

00:27:39,040 --> 00:27:45,390
consolidating our logic and there's a

00:27:42,550 --> 00:27:45,390
neat little utility

00:27:54,280 --> 00:28:09,320
from google and it's called gorse and it

00:28:02,570 --> 00:28:12,860
will take your repository and show you a

00:28:09,320 --> 00:28:16,340
pretty picture based on the activity on

00:28:12,860 --> 00:28:17,930
your git repo so we're already past the

00:28:16,340 --> 00:28:28,580
spot where we've put stuff into

00:28:17,930 --> 00:28:34,100
production and this is all loose so this

00:28:28,580 --> 00:28:36,140
is us some stepping from nothing to

00:28:34,100 --> 00:28:45,770
replacing all of our other billing

00:28:36,140 --> 00:28:50,600
systems with the new domain models well

00:28:45,770 --> 00:28:53,530
if I can trick my Mac and hey oh darn it

00:28:50,600 --> 00:28:53,530
yes not

00:28:59,980 --> 00:29:17,160
any technical school hmm I beg your

00:29:10,390 --> 00:29:17,160
pardon I I need the stuff up here

00:29:21,240 --> 00:29:24,240
yes

00:29:45,200 --> 00:29:50,860
I'm getting a very weak signal let me

00:29:47,870 --> 00:29:50,860
see if it works well enough

00:30:08,470 --> 00:30:12,850
let me explain to the exciting thing

00:30:10,750 --> 00:30:14,320
happening 9 i'm waiting for a little

00:30:12,850 --> 00:30:18,030
thing to spend see if i can get to my

00:30:14,320 --> 00:30:18,030
receive an haha

00:30:23,539 --> 00:30:26,919
you can do it

00:30:32,760 --> 00:30:45,710
all right now you can see now I can

00:30:35,850 --> 00:30:45,710
reveal the magic oh very readable

00:30:53,240 --> 00:30:59,500
oh there we go

00:31:32,410 --> 00:31:37,170
a little internet that could

00:31:54,410 --> 00:32:06,770
okay this is in Moose cookbook basics

00:32:03,470 --> 00:32:06,770
there you go

00:32:12,519 --> 00:32:21,129
so this is a binary tree implementation

00:32:16,889 --> 00:32:25,839
where you instantiate a node and then if

00:32:21,129 --> 00:32:28,419
you call left it has a default of

00:32:25,839 --> 00:32:31,629
instantiating another node and it has a

00:32:28,419 --> 00:32:35,320
trigger where if you set it it goes to

00:32:31,629 --> 00:32:41,609
the child and then sets the child's

00:32:35,320 --> 00:32:48,039
parent to solve action at a distance and

00:32:41,609 --> 00:32:52,029
has a weekend reference so that's how

00:32:48,039 --> 00:32:54,669
you do it and this is one of the

00:32:52,029 --> 00:33:01,389
examples that we were looking at when we

00:32:54,669 --> 00:33:04,419
were learning moose and that you know

00:33:01,389 --> 00:33:08,799
not my favorite implementation partly

00:33:04,419 --> 00:33:11,759
because at least you know should that be

00:33:08,799 --> 00:33:15,909
publicly exposed you can arbitrarily set

00:33:11,759 --> 00:33:18,899
parents and whatnot so let me see if I

00:33:15,909 --> 00:33:18,899
have a note

00:33:38,890 --> 00:33:46,740
no I don't have it but yes as a

00:33:43,870 --> 00:33:52,180
workaround we'll just do a hypothetical

00:33:46,740 --> 00:33:55,350
instead wow it does not like what

00:33:52,180 --> 00:33:55,350
happened to the resolution

00:34:15,930 --> 00:34:26,350
don't know I don't work this size all

00:34:18,370 --> 00:34:29,160
the time so we have code that

00:34:26,350 --> 00:34:29,160
essentially

00:34:40,010 --> 00:34:43,090
that's the one

00:34:57,270 --> 00:35:00,270
seriously

00:35:15,980 --> 00:35:19,570
a little bit back on the rails

00:36:00,220 --> 00:36:06,040
there we go so we also had a situation

00:36:04,450 --> 00:36:09,609
where instead of just turning this into

00:36:06,040 --> 00:36:15,420
a method someone added a trigger that

00:36:09,609 --> 00:36:18,790
whenever you changed soda or water or

00:36:15,420 --> 00:36:22,950
beer it triggered an update to the total

00:36:18,790 --> 00:36:28,690
number of bottles so maximally lazy

00:36:22,950 --> 00:36:34,090
minimally decipherable thank you for

00:36:28,690 --> 00:36:38,770
your patience okay you want to see the

00:36:34,090 --> 00:36:41,849
rest of the pretty video only I'm going

00:36:38,770 --> 00:36:41,849
to speed it up a little further

00:36:48,250 --> 00:36:53,470
so that's sort of the history of the

00:36:50,260 --> 00:37:02,680
last two years compressed into three

00:36:53,470 --> 00:37:05,770
minutes 38 seconds so i was going to

00:37:02,680 --> 00:37:08,980
originally do my slides hall by hand

00:37:05,770 --> 00:37:12,820
because i like the look of it but then I

00:37:08,980 --> 00:37:16,900
found out it was really really hard to

00:37:12,820 --> 00:37:20,410
do them so here are some of the initial

00:37:16,900 --> 00:37:24,610
tries I made here's a slide that never

00:37:20,410 --> 00:37:28,480
came to fruition mousex is really really

00:37:24,610 --> 00:37:33,000
good but sometimes it can get out of

00:37:28,480 --> 00:37:37,750
hand and when we first got our new toy

00:37:33,000 --> 00:37:39,940
you know it seemed to be like we were

00:37:37,750 --> 00:37:50,290
going to try every new thing that we got

00:37:39,940 --> 00:37:53,200
and you know this was sort of a way of

00:37:50,290 --> 00:37:56,080
expressing that the reason why I didn't

00:37:53,200 --> 00:37:59,620
make it in is that we currently have

00:37:56,080 --> 00:38:04,080
settled into a much a fairly reasonable

00:37:59,620 --> 00:38:06,670
number of justifiable mousex extensions

00:38:04,080 --> 00:38:08,470
but over the life of it it was a little

00:38:06,670 --> 00:38:10,720
bit weird to see someone arbitrarily

00:38:08,470 --> 00:38:19,210
just introduced a new dependency because

00:38:10,720 --> 00:38:23,290
they thought it was cool this one is

00:38:19,210 --> 00:38:26,590
about constructors when we first started

00:38:23,290 --> 00:38:32,100
doing moose build arcs and build was

00:38:26,590 --> 00:38:35,560
very intimidating and so we had a lot of

00:38:32,100 --> 00:38:39,130
stuff that looked hey let's go back to

00:38:35,560 --> 00:38:41,650
doing a presentation about that so we

00:38:39,130 --> 00:38:44,260
had a lot of stuff we had and still do

00:38:41,650 --> 00:38:46,480
have a lot of stuff in our code that

00:38:44,260 --> 00:38:49,090
instead of using a real constructor and

00:38:46,480 --> 00:38:51,370
Mussina seeeeee we have this get by ID

00:38:49,090 --> 00:38:54,100
and then it will delegate to the

00:38:51,370 --> 00:38:57,820
constructor and moose to actually give

00:38:54,100 --> 00:39:01,000
you the instance and you know when we

00:38:57,820 --> 00:39:02,109
were first learning moose you know build

00:39:01,000 --> 00:39:06,670
and build arcs

00:39:02,109 --> 00:39:08,710
were really intimidating you know what I

00:39:06,670 --> 00:39:13,630
really feel that the right thing to do

00:39:08,710 --> 00:39:15,069
is actually to use mooses features to

00:39:13,630 --> 00:39:18,190
build your constructors more

00:39:15,069 --> 00:39:21,700
intelligently so that for example if

00:39:18,190 --> 00:39:25,509
you're creating an instance of something

00:39:21,700 --> 00:39:27,400
and you already have an ID for it you

00:39:25,509 --> 00:39:29,440
very it's very very unlikely that it

00:39:27,400 --> 00:39:32,559
isn't meant to be gotten from the

00:39:29,440 --> 00:39:34,900
database so why not build your

00:39:32,559 --> 00:39:37,029
constructor so that when you do a new on

00:39:34,900 --> 00:39:39,339
it it goes with the database and

00:39:37,029 --> 00:39:42,249
constructs it that way instead of doing

00:39:39,339 --> 00:39:46,359
a get by a Deconstructor for us the

00:39:42,249 --> 00:39:47,890
reason was that it was hard and I think

00:39:46,359 --> 00:39:49,989
it's the wrong thing to do now because i

00:39:47,890 --> 00:39:53,980
think new is a very obvious constructor

00:39:49,989 --> 00:40:01,329
and you know ID being already defined as

00:39:53,980 --> 00:40:04,499
a as a pretty obvious way of telling

00:40:01,329 --> 00:40:04,499
whether or not to instantiate it

00:40:15,350 --> 00:40:24,260
okay 10 minutes left Wow any questions

00:40:28,250 --> 00:40:39,450
do loose again oh yeah oh yeah the the

00:40:36,990 --> 00:40:42,270
you know this is the story of us this is

00:40:39,450 --> 00:40:44,780
not a indictment of moose it's a little

00:40:42,270 --> 00:40:48,990
bit of an indictment of the

00:40:44,780 --> 00:40:53,520
documentation for moose from an

00:40:48,990 --> 00:40:58,080
editorial standpoint a Moose's

00:40:53,520 --> 00:41:01,010
documentation designs to the features of

00:40:58,080 --> 00:41:05,070
moose not to the design of your domain

00:41:01,010 --> 00:41:07,530
so the examples are all about saying how

00:41:05,070 --> 00:41:10,380
do you take a moose feature and get it

00:41:07,530 --> 00:41:12,780
to do a thing when the problem we had

00:41:10,380 --> 00:41:15,600
was separate the problem we had was how

00:41:12,780 --> 00:41:19,170
do we take an idea of what our domain is

00:41:15,600 --> 00:41:23,100
like and use mousse to express that and

00:41:19,170 --> 00:41:28,590
so I think we started out going from a

00:41:23,100 --> 00:41:30,720
feature driven model to a domain driven

00:41:28,590 --> 00:41:33,840
model and as we became more comfortable

00:41:30,720 --> 00:41:36,390
with moose we started to understand that

00:41:33,840 --> 00:41:40,770
the examples that were provided were

00:41:36,390 --> 00:41:43,500
examples for demonstrating moose and not

00:41:40,770 --> 00:41:51,600
examples on how to build things in moose

00:41:43,500 --> 00:41:54,630
to solve your particular problems in you

00:41:51,600 --> 00:41:59,010
know it sort of boils down to kind of

00:41:54,630 --> 00:42:02,540
the basics designed to interfaces find a

00:41:59,010 --> 00:42:06,170
way to make moose match your interface

00:42:02,540 --> 00:42:06,170
any other questions

00:42:15,750 --> 00:42:24,369
actually I wish we did I mean um we had

00:42:20,440 --> 00:42:27,069
lots of aha moments as we worked but I

00:42:24,369 --> 00:42:29,710
mean we have a very collaborative way of

00:42:27,069 --> 00:42:31,569
doing things so as we would learn

00:42:29,710 --> 00:42:35,140
something new it just kind of would

00:42:31,569 --> 00:42:39,040
disseminate through our team I guess

00:42:35,140 --> 00:42:41,859
that makes a I guess the short answer is

00:42:39,040 --> 00:42:46,630
no but I think it helps me editorialize

00:42:41,859 --> 00:42:50,890
that we use a fairly effective agile

00:42:46,630 --> 00:42:52,839
scrum model so when we build things we

00:42:50,890 --> 00:42:55,960
build them together one of the reasons

00:42:52,839 --> 00:43:00,750
that we wanted to use mousse is because

00:42:55,960 --> 00:43:05,680
we wanted you know less Tim totti

00:43:00,750 --> 00:43:06,819
internal to our team and at first I was

00:43:05,680 --> 00:43:09,250
thinking young maybe that's not a good

00:43:06,819 --> 00:43:12,250
thing to say but one of the ways of Tim

00:43:09,250 --> 00:43:14,880
tony is to not have more not have Tim

00:43:12,250 --> 00:43:17,410
toe to each or a particular organization

00:43:14,880 --> 00:43:21,609
and we wanted one way to instantiate

00:43:17,410 --> 00:43:24,640
objects we wanted one way to you know

00:43:21,609 --> 00:43:27,849
handle accessories we wanted you know

00:43:24,640 --> 00:43:29,079
the one true way to do these things so

00:43:27,849 --> 00:43:31,359
that we could think about other things

00:43:29,079 --> 00:43:33,250
than whether we should be blessing a

00:43:31,359 --> 00:43:35,680
reference or cloning the reference

00:43:33,250 --> 00:43:37,900
that's passed in or parsing the hash or

00:43:35,680 --> 00:43:40,359
Oh does it take a hash we had a bigger

00:43:37,900 --> 00:43:42,160
problem to solve and that problem wasn't

00:43:40,359 --> 00:43:44,920
about startup performance is about

00:43:42,160 --> 00:43:47,140
working together and being able to you

00:43:44,920 --> 00:43:55,530
know have our code be clear rather than

00:43:47,140 --> 00:43:55,530
clever any other questions yes

00:43:56,990 --> 00:44:00,710
oh man I thought about putting together

00:43:59,180 --> 00:44:03,050
some of this fancy I thought I was going

00:44:00,710 --> 00:44:05,119
to be like way over time and then I

00:44:03,050 --> 00:44:06,950
talked really fast I have plenty of

00:44:05,119 --> 00:44:09,560
things to talk about we started from

00:44:06,950 --> 00:44:11,540
about 0 I think word about I know that

00:44:09,560 --> 00:44:13,220
lines of code are kind of crummy as a

00:44:11,540 --> 00:44:15,950
thing but we're about at fifty thousand

00:44:13,220 --> 00:44:20,780
lines of code where we've got an

00:44:15,950 --> 00:44:23,800
enormous number of tests now we use

00:44:20,780 --> 00:44:26,690
bamboo to automate the test of the sweet

00:44:23,800 --> 00:44:28,730
whenever we commit to our development

00:44:26,690 --> 00:44:31,310
branch it automatically kicks off the

00:44:28,730 --> 00:44:33,020
unit tests for our moose stuff so the

00:44:31,310 --> 00:44:35,330
reason I know about you know made such a

00:44:33,020 --> 00:44:38,570
big deal about the this timing of the

00:44:35,330 --> 00:44:42,200
moose tests is that we run tests a lot

00:44:38,570 --> 00:44:45,050
so you know when bamboo kicks off its

00:44:42,200 --> 00:44:49,160
test suite if you've caused bamboo to

00:44:45,050 --> 00:44:51,260
take 20 minutes to run the tests because

00:44:49,160 --> 00:44:53,119
you decided you were going to add X

00:44:51,260 --> 00:44:57,940
number of files next number of use cases

00:44:53,119 --> 00:45:00,890
that immediately affected everybody the

00:44:57,940 --> 00:45:04,430
number on the team averaged around five

00:45:00,890 --> 00:45:07,100
and I've got about five minutes the

00:45:04,430 --> 00:45:13,100
number of the team averaged around five

00:45:07,100 --> 00:45:15,710
the the interesting phenomenon that I

00:45:13,100 --> 00:45:17,930
sort of anecdotally found was true was

00:45:15,710 --> 00:45:20,030
that we sort of started out with one

00:45:17,930 --> 00:45:26,050
class that we wanted to attack it was an

00:45:20,030 --> 00:45:29,060
invoice class and I had heard that the

00:45:26,050 --> 00:45:32,000
the measure of how good a piece of code

00:45:29,060 --> 00:45:34,280
is and you know file is is how much that

00:45:32,000 --> 00:45:37,400
file is touched how many times you have

00:45:34,280 --> 00:45:39,080
to fiddle with that file because if you

00:45:37,400 --> 00:45:41,660
have to fiddle with that file a lot it's

00:45:39,080 --> 00:45:44,540
not done or it's not properly extracted

00:45:41,660 --> 00:45:47,600
or it's doing too much and so while my

00:45:44,540 --> 00:45:49,430
video might have been boring one of the

00:45:47,600 --> 00:45:52,100
things if you look at it as much as i

00:45:49,430 --> 00:45:54,800
did is that you notice is that as the

00:45:52,100 --> 00:45:57,170
code moves you start to notice that the

00:45:54,800 --> 00:46:01,160
files that the core of those things

00:45:57,170 --> 00:46:03,740
aren't touched as much so we sort of

00:46:01,160 --> 00:46:06,080
converged on very stable classes over

00:46:03,740 --> 00:46:07,820
time and then towards the end we're just

00:46:06,080 --> 00:46:08,900
adding functionality to an already

00:46:07,820 --> 00:46:10,670
working code base

00:46:08,900 --> 00:46:14,740
the periphery for the most part the

00:46:10,670 --> 00:46:20,090
occasional bug fix so about 500 teen

00:46:14,740 --> 00:46:21,350
rotated some and code that if the

00:46:20,090 --> 00:46:23,660
company would allow me to show you

00:46:21,350 --> 00:46:27,160
something that it won't allow me to show

00:46:23,660 --> 00:46:27,160
you I would be proud to show any of you

00:46:39,150 --> 00:46:47,310
probably not why not because I know too

00:46:44,820 --> 00:46:49,170
much now we're going to do it all over

00:46:47,310 --> 00:46:52,560
I'd be doing it all over newing knowing

00:46:49,170 --> 00:46:54,240
moose so you know it's not like it's the

00:46:52,560 --> 00:46:56,220
same thing with like say what could you

00:46:54,240 --> 00:46:58,110
use mu instead you know someone asked me

00:46:56,220 --> 00:47:01,380
well you know could you make all your

00:46:58,110 --> 00:47:06,260
stuff running mu and I said I have no

00:47:01,380 --> 00:47:06,260
idea it's like why borrow trouble

00:47:23,030 --> 00:47:30,720
honestly um and and maybe this is just

00:47:26,880 --> 00:47:34,620
my experience or a stop eNOS I would buy

00:47:30,720 --> 00:47:36,540
a good good book a hard book a book

00:47:34,620 --> 00:47:39,240
where you open it up and go what is

00:47:36,540 --> 00:47:41,850
going on an object oriented design I

00:47:39,240 --> 00:47:48,720
mean that is the first thing that I

00:47:41,850 --> 00:47:51,060
would recommend because for most code

00:47:48,720 --> 00:47:53,310
bases i worked on and you know i don't

00:47:51,060 --> 00:47:54,720
like to brag but I've worked on lots of

00:47:53,310 --> 00:47:58,020
different code bases with different

00:47:54,720 --> 00:48:01,380
levels of 00 moose is more sophisticated

00:47:58,020 --> 00:48:04,560
than any other 00 mechanism I've seen in

00:48:01,380 --> 00:48:08,880
Perl ever and so if you're not solid on

00:48:04,560 --> 00:48:11,790
your own concepts then you're used to

00:48:08,880 --> 00:48:15,240
the low features that your company

00:48:11,790 --> 00:48:18,720
decided or your project decided to

00:48:15,240 --> 00:48:20,280
implement at the time that they were

00:48:18,720 --> 00:48:23,340
implementing it because they had to

00:48:20,280 --> 00:48:26,580
build most of it themselves moose you

00:48:23,340 --> 00:48:29,550
get it it's a cornucopia the people are

00:48:26,580 --> 00:48:33,180
learning the oo stuff as they're trying

00:48:29,550 --> 00:48:35,610
out features in loose so you know the

00:48:33,180 --> 00:48:38,280
first step would be to really remind

00:48:35,610 --> 00:48:41,940
people about 00 and designing two

00:48:38,280 --> 00:48:44,820
interfaces before you start setting them

00:48:41,940 --> 00:48:48,590
loose to start using all the delicious

00:48:44,820 --> 00:48:48,590
delicious candy that comes with loose

00:48:52,400 --> 00:48:59,640
and then I guess the other part make

00:48:56,220 --> 00:49:02,820
them read code make the recode writing

00:48:59,640 --> 00:49:08,780
it's easy reading it's hard make them

00:49:02,820 --> 00:49:08,780
read it any other questions

00:49:11,530 --> 00:49:14,400

YouTube URL: https://www.youtube.com/watch?v=tD1oRoaVn2M


