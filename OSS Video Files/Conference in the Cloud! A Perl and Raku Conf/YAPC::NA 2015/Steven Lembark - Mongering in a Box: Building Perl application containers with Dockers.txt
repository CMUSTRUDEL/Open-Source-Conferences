Title: Steven Lembark - Mongering in a Box: Building Perl application containers with Dockers
Publication date: 2015-06-16
Playlist: YAPC::NA 2015
Description: 
	Ballroom B - Little America Hotel
Captions: 
	00:05:20,660 --> 00:05:31,979
hello I tried it I thought hello ah

00:05:29,060 --> 00:05:37,169
there we go speak into the microphone it

00:05:31,979 --> 00:05:42,180
works better oops oh well there what my

00:05:37,169 --> 00:05:51,289
pokemon I just hate seeing that blue

00:05:42,180 --> 00:05:51,289
screen man it did so anyway it started

00:06:00,849 --> 00:06:12,779
everyone here okay everyone sitting down

00:06:15,659 --> 00:06:22,040
let's go for it

00:06:18,280 --> 00:06:25,760
hello folks everyone with a heartbeat

00:06:22,040 --> 00:06:28,760
raise your hand okay so there were a few

00:06:25,760 --> 00:06:33,590
dad hopefully rigor mortis doesn't set

00:06:28,760 --> 00:06:35,660
in too soon how many people here

00:06:33,590 --> 00:06:38,690
actually do use docker for anything now

00:06:35,660 --> 00:06:40,520
this week so okay some people have seen

00:06:38,690 --> 00:06:42,590
it I guess everyone uses pearl for

00:06:40,520 --> 00:06:45,740
something right we can locate then we

00:06:42,590 --> 00:06:48,230
get yeah oh I'm sorry the Python guys

00:06:45,740 --> 00:06:52,010
are across the street we can will

00:06:48,230 --> 00:06:55,310
corrupt your mind stay here the one of

00:06:52,010 --> 00:06:58,580
the things you notice about the pearl

00:06:55,310 --> 00:07:02,060
but you find a lot of distributions this

00:06:58,580 --> 00:07:05,380
is taken from Red Hat anyone here use

00:07:02,060 --> 00:07:08,540
red hat enterprise 7 anything auricchio

00:07:05,380 --> 00:07:11,780
these are the compile switches from pro-

00:07:08,540 --> 00:07:14,950
V notice that today they were just

00:07:11,780 --> 00:07:18,350
distributing 5 16 which is end-of-life

00:07:14,950 --> 00:07:20,870
nothing more recent you also note that

00:07:18,350 --> 00:07:23,330
this really isn't tuned to be very

00:07:20,870 --> 00:07:27,980
effective it's still compatible with 500

00:07:23,330 --> 00:07:31,340
5 and even if you don't use threads

00:07:27,980 --> 00:07:33,050
you've got threads this is a bulky slow

00:07:31,340 --> 00:07:35,090
mess people wonder why they can't think

00:07:33,050 --> 00:07:36,650
get things done with pearl because

00:07:35,090 --> 00:07:38,960
they're using the native pearls on the

00:07:36,650 --> 00:07:42,080
distributions doctor gives us a good way

00:07:38,960 --> 00:07:44,240
to get access to your own pearl so

00:07:42,080 --> 00:07:45,770
something for your I'll show is to get

00:07:44,240 --> 00:07:48,470
it for your architecture so that matches

00:07:45,770 --> 00:07:51,140
your hardware get optimization in get on

00:07:48,470 --> 00:07:52,370
the dependencies you need or want great

00:07:51,140 --> 00:07:54,770
thing about docker because you can build

00:07:52,370 --> 00:07:56,390
umpteen pearls and try them you can see

00:07:54,770 --> 00:07:58,070
what the switches do you can play around

00:07:56,390 --> 00:08:02,000
with it and get something optimized for

00:07:58,070 --> 00:08:04,310
you but it's not obvious one bad

00:08:02,000 --> 00:08:06,020
approach that we've all used for quite a

00:08:04,310 --> 00:08:07,880
while now is things like pearl brew

00:08:06,020 --> 00:08:10,190
let's see what happens if we do this and

00:08:07,880 --> 00:08:11,810
you know use virtual machines how many

00:08:10,190 --> 00:08:13,820
people here like using virtual machines

00:08:11,810 --> 00:08:15,350
you enjoy booting things over the net

00:08:13,820 --> 00:08:17,750
and having them not boot right and

00:08:15,350 --> 00:08:19,460
certainly it's fun when you have to do

00:08:17,750 --> 00:08:21,680
with library version Halon different

00:08:19,460 --> 00:08:23,480
ones and you know having to deal with

00:08:21,680 --> 00:08:25,070
chef and puppet to change all the

00:08:23,480 --> 00:08:27,380
version numbers of all the different

00:08:25,070 --> 00:08:30,860
things that makes it so much easier to

00:08:27,380 --> 00:08:32,180
program pearl doesn't it so that is

00:08:30,860 --> 00:08:35,089
false laziness

00:08:32,180 --> 00:08:40,279
it is not lazy to have to do something

00:08:35,089 --> 00:08:43,849
over and over painfully so lxc is how

00:08:40,279 --> 00:08:46,130
many people here remember L pars okay

00:08:43,849 --> 00:08:47,750
there are a few of us at used cards how

00:08:46,130 --> 00:08:50,810
many people have plenty of bookmarks so

00:08:47,750 --> 00:08:54,080
you can closet somewhere that you and L

00:08:50,810 --> 00:08:56,930
par was how you oh I'm sorry I was

00:08:54,080 --> 00:08:58,790
picking me up internet the yelp artists

00:08:56,930 --> 00:09:02,600
were the way that IBM mainframes used to

00:08:58,790 --> 00:09:04,279
split up the CPU basically what I vm did

00:09:02,600 --> 00:09:07,040
is they took some things that in the

00:09:04,279 --> 00:09:10,670
linux kernel and ported some IBM 360

00:09:07,040 --> 00:09:12,290
technology into linux and the trick

00:09:10,670 --> 00:09:14,470
there is instead of creating a virtual

00:09:12,290 --> 00:09:17,839
machine let's isolate the process

00:09:14,470 --> 00:09:20,330
berkeley jails tried to do this solaris

00:09:17,839 --> 00:09:22,250
zones tried to do it the problem with

00:09:20,330 --> 00:09:24,620
those is they only ran on things that

00:09:22,250 --> 00:09:27,860
most of us aren't using anymore and they

00:09:24,620 --> 00:09:30,709
didn't work all that well again the idea

00:09:27,860 --> 00:09:33,440
is to share the colonel but separate

00:09:30,709 --> 00:09:35,540
each process into its own space at that

00:09:33,440 --> 00:09:38,209
point the processes are a lot lighter

00:09:35,540 --> 00:09:40,850
weight than virtual machines is anyone

00:09:38,209 --> 00:09:43,160
here ever tried to really use lxc when

00:09:40,850 --> 00:09:46,700
it came out I mean you sat down did

00:09:43,160 --> 00:09:51,140
anyone read all of these no that's the

00:09:46,700 --> 00:09:53,300
why no one ever used it I mean just just

00:09:51,140 --> 00:09:55,160
getting through the configuration for

00:09:53,300 --> 00:09:58,459
LXE it's all in there it will do

00:09:55,160 --> 00:10:01,279
everything you need it to but it's like

00:09:58,459 --> 00:10:05,080
trying to learn electrodynamics to dial

00:10:01,279 --> 00:10:08,089
a phone call so doctor came along

00:10:05,080 --> 00:10:10,760
basically this is an MRE for Linux it's

00:10:08,089 --> 00:10:13,010
an 8020 docker does not do a lot of the

00:10:10,760 --> 00:10:16,459
things that people need it to it's not

00:10:13,010 --> 00:10:18,170
finished yet but it works and it works

00:10:16,459 --> 00:10:20,959
well enough and it gives us the ability

00:10:18,170 --> 00:10:23,510
to get what we need now so that's why

00:10:20,959 --> 00:10:25,490
everyone I guess is picking up on it the

00:10:23,510 --> 00:10:27,190
problem is they're there they start out

00:10:25,490 --> 00:10:30,470
with a bun to is their base image

00:10:27,190 --> 00:10:35,329
everyone ever look at the Ubuntu base

00:10:30,470 --> 00:10:37,520
image and seen how large it is um at 1.6

00:10:35,329 --> 00:10:39,320
gig you've got to download it every time

00:10:37,520 --> 00:10:42,050
it changes every time you're starting up

00:10:39,320 --> 00:10:44,450
on a new system you're sucking that in

00:10:42,050 --> 00:10:45,050
and let's think about the things that

00:10:44,450 --> 00:10:47,959
your pearl

00:10:45,050 --> 00:10:50,330
program might need available to it to

00:10:47,959 --> 00:10:52,839
call from the shell how many people call

00:10:50,330 --> 00:10:55,910
grub from within their parole programs

00:10:52,839 --> 00:10:58,519
how many people use lvm on a regular

00:10:55,910 --> 00:11:00,529
basis from inside they're running pro

00:10:58,519 --> 00:11:03,079
programs how many people have an Apache

00:11:00,529 --> 00:11:04,880
web site that calls lvm and creates new

00:11:03,079 --> 00:11:09,579
volumes based on what people pass in

00:11:04,880 --> 00:11:13,510
right do you do much with managing the

00:11:09,579 --> 00:11:17,660
MD Adam managing your virtual drives in

00:11:13,510 --> 00:11:20,329
from inside a Perl program ubuntu is

00:11:17,660 --> 00:11:21,920
waste you're not going to you're not

00:11:20,329 --> 00:11:24,950
going to use most of these system

00:11:21,920 --> 00:11:27,019
management next 11 tools so you got 1.6

00:11:24,950 --> 00:11:32,149
gig of stuff that you can't use and

00:11:27,019 --> 00:11:33,230
don't want so this is a pro conference

00:11:32,149 --> 00:11:38,000
so i'm going to show you more than one

00:11:33,230 --> 00:11:41,240
way to do it the the basics begin with a

00:11:38,000 --> 00:11:44,810
docker file docker uses these to define

00:11:41,240 --> 00:11:48,440
how it builds an image which is one way

00:11:44,810 --> 00:11:50,779
to go about doing this so the trick will

00:11:48,440 --> 00:11:54,260
be to set up a docker file that will

00:11:50,779 --> 00:11:58,370
build a stable pearl for you without all

00:11:54,260 --> 00:12:01,730
the weight of a bun to another way is to

00:11:58,370 --> 00:12:04,970
copy pearl on top of busybox the trick

00:12:01,730 --> 00:12:06,980
there is you build the pearl stick it in

00:12:04,970 --> 00:12:08,990
an image and have just busy box

00:12:06,980 --> 00:12:11,750
underneath it what's great about that is

00:12:08,990 --> 00:12:14,360
if your pearl blows up for some reason

00:12:11,750 --> 00:12:16,550
with busybox you've got a shell to go

00:12:14,360 --> 00:12:19,579
into the image and inspect it you've got

00:12:16,550 --> 00:12:21,140
it just enough tools to use it but it's

00:12:19,579 --> 00:12:23,570
only one and a half meg it's not an

00:12:21,140 --> 00:12:27,680
entire operating system that you don't

00:12:23,570 --> 00:12:29,180
need and another way to do it then I'll

00:12:27,680 --> 00:12:31,579
show you is just to shelve pearl in an

00:12:29,180 --> 00:12:34,910
image pearl and nothing else if the

00:12:31,579 --> 00:12:36,860
images is blown you have no way of going

00:12:34,910 --> 00:12:39,440
in to find out because all you have on

00:12:36,860 --> 00:12:40,610
this is pearl but it's great once it

00:12:39,440 --> 00:12:44,690
works because if you're doing something

00:12:40,610 --> 00:12:46,040
like plaque it may be all you need so

00:12:44,690 --> 00:12:49,699
the first thing you need to get darker

00:12:46,040 --> 00:12:52,670
one way to do it is apt-get der emerge I

00:12:49,699 --> 00:12:55,550
use gentoo yum whatever your favorite

00:12:52,670 --> 00:12:57,529
tool is a lot of those have problems

00:12:55,550 --> 00:12:58,940
because you've got to make the colonel

00:12:57,529 --> 00:13:01,370
right for lxc

00:12:58,940 --> 00:13:04,580
order to run docker and the pretests

00:13:01,370 --> 00:13:06,590
from lxc they run and they tell you

00:13:04,580 --> 00:13:09,200
missing something but they don't tell

00:13:06,590 --> 00:13:10,580
you the colonel switch that's missing so

00:13:09,200 --> 00:13:13,520
you go into the config file and you got

00:13:10,580 --> 00:13:16,220
no idea what to set it is one of the

00:13:13,520 --> 00:13:18,430
most it why they didn't say we check for

00:13:16,220 --> 00:13:21,890
this and it was missing out on top if

00:13:18,430 --> 00:13:26,150
you use curl or W get to grab this thing

00:13:21,890 --> 00:13:27,980
from docker it's a shell script that

00:13:26,150 --> 00:13:29,540
will do the stuff and it actually gives

00:13:27,980 --> 00:13:31,550
you better error reporting in a lot of

00:13:29,540 --> 00:13:35,450
cases it used to i haven't run this in a

00:13:31,550 --> 00:13:38,450
while but this will bypass any issues

00:13:35,450 --> 00:13:40,760
with pre-compiled stuff on redhat and

00:13:38,450 --> 00:13:43,250
debian-based distributions and it goes

00:13:40,760 --> 00:13:44,810
and allows you to compile it on-site for

00:13:43,250 --> 00:13:47,930
Jen to it doesn't do much because Jen to

00:13:44,810 --> 00:13:50,330
your can pile in any way one other thing

00:13:47,930 --> 00:13:53,930
but I see people this is part of the

00:13:50,330 --> 00:13:56,540
documentation from docker please don't

00:13:53,930 --> 00:13:58,370
use s you to run docker you will shoot

00:13:56,540 --> 00:14:00,140
yourself in the foot one of the

00:13:58,370 --> 00:14:01,760
wonderful things about docker is that

00:14:00,140 --> 00:14:03,770
you are super user when you're inside

00:14:01,760 --> 00:14:06,410
the container by default but you're not

00:14:03,770 --> 00:14:08,030
on the outside don't make it so you can

00:14:06,410 --> 00:14:10,700
blow your kneecaps off that much more

00:14:08,030 --> 00:14:12,830
easily we all have enough problems if

00:14:10,700 --> 00:14:14,810
you add the users that are to run the

00:14:12,830 --> 00:14:17,000
docker commands to the docker group

00:14:14,810 --> 00:14:18,680
you've got some minimal security because

00:14:17,000 --> 00:14:21,530
then only the people that are in that

00:14:18,680 --> 00:14:24,410
group can run docker and you don't need

00:14:21,530 --> 00:14:27,770
to be super user on the outside to run

00:14:24,410 --> 00:14:30,580
docker once you've done that much of you

00:14:27,770 --> 00:14:32,750
type docker PS you should be able to see

00:14:30,580 --> 00:14:34,700
lots of nothing but you won't get an

00:14:32,750 --> 00:14:37,730
error until you can do a docker PS

00:14:34,700 --> 00:14:39,320
nothing else is going to work that means

00:14:37,730 --> 00:14:41,630
start the daemon make sure that it's all

00:14:39,320 --> 00:14:44,630
set up and figured if you're going to

00:14:41,630 --> 00:14:46,520
use Dockers repository one of the one of

00:14:44,630 --> 00:14:48,980
their little gotchas is that they have a

00:14:46,520 --> 00:14:50,540
free repository and you can put a

00:14:48,980 --> 00:14:51,830
certain amount of stuff on it it's all

00:14:50,540 --> 00:14:53,780
out there it's public you can have

00:14:51,830 --> 00:14:55,339
private repositories if you pay for them

00:14:53,780 --> 00:14:56,690
that's what they want you to do is pay

00:14:55,339 --> 00:14:58,100
for the private ones then have so much

00:14:56,690 --> 00:15:00,650
stuff stored on it that you pay them for

00:14:58,100 --> 00:15:03,950
storage you can also run and there are

00:15:00,650 --> 00:15:06,440
great docker images for running a

00:15:03,950 --> 00:15:07,610
private docker repository if anyone

00:15:06,440 --> 00:15:09,260
wants I can show you what those look

00:15:07,610 --> 00:15:10,850
like and that allows you to run the

00:15:09,260 --> 00:15:13,069
thing on your local host which saves you

00:15:10,850 --> 00:15:16,649
a lot of download

00:15:13,069 --> 00:15:18,540
so it to begin with docker for the

00:15:16,649 --> 00:15:20,699
people who haven't used it grab a copy

00:15:18,540 --> 00:15:25,769
of busy boxes people with busy boxes

00:15:20,699 --> 00:15:30,449
seen it used it okay well it's it's yeah

00:15:25,769 --> 00:15:33,449
it's a a single executable that has the

00:15:30,449 --> 00:15:35,730
80 things in it that you really need to

00:15:33,449 --> 00:15:38,069
survive on an OS it's got a very minimal

00:15:35,730 --> 00:15:40,309
stripped-down VI it's got a minimal

00:15:38,069 --> 00:15:43,829
version of SH that does basic editing

00:15:40,309 --> 00:15:45,929
ldd the day-to-day commands that you use

00:15:43,829 --> 00:15:48,389
to try and fix a broken machine or

00:15:45,929 --> 00:15:51,480
they're in busy box and it will install

00:15:48,389 --> 00:15:56,069
itself by hard linking all the names it

00:15:51,480 --> 00:15:58,609
can be used as to itself and generally

00:15:56,069 --> 00:16:00,720
busy box is a nice thing to have around

00:15:58,609 --> 00:16:02,399
because it allows you to play around

00:16:00,720 --> 00:16:05,519
inside that container and see what

00:16:02,399 --> 00:16:08,369
things look like so you if you start up

00:16:05,519 --> 00:16:09,929
with busybox you do this thing if i do a

00:16:08,369 --> 00:16:13,439
poll that shows you what it looks like

00:16:09,929 --> 00:16:17,519
these numbers here are hashes that

00:16:13,439 --> 00:16:20,910
docker uses to identify everything when

00:16:17,519 --> 00:16:22,859
you to run it the minus T and minus eyes

00:16:20,910 --> 00:16:25,759
says give me a controlling terminal I

00:16:22,859 --> 00:16:29,399
want this to be an interactive shell

00:16:25,759 --> 00:16:31,679
basically an interactive container when

00:16:29,399 --> 00:16:34,919
I do this I will be in busybox one thing

00:16:31,679 --> 00:16:36,959
to notice you are super user inside the

00:16:34,919 --> 00:16:38,639
container by default this will affect

00:16:36,959 --> 00:16:40,579
things you do with pearl because pearl

00:16:38,639 --> 00:16:43,559
doesn't always like to run as superuser

00:16:40,579 --> 00:16:47,160
their document there's docks within

00:16:43,559 --> 00:16:48,509
docker on how to set up real users in a

00:16:47,160 --> 00:16:50,879
container how to set up an image that's

00:16:48,509 --> 00:16:52,739
got user IDs how to become that user

00:16:50,879 --> 00:16:53,939
once you're inside you might want to

00:16:52,739 --> 00:16:55,739
think about that if you're going to run

00:16:53,939 --> 00:16:56,819
pearl because again pearl there's a lot

00:16:55,739 --> 00:16:59,850
of things that it doesn't like about

00:16:56,819 --> 00:17:01,379
running a super user when you're in the

00:16:59,850 --> 00:17:03,600
box you get a certain amount of minimal

00:17:01,379 --> 00:17:04,980
networking I'm not going to go in this

00:17:03,600 --> 00:17:06,289
isn't a docker class i'm not going to go

00:17:04,980 --> 00:17:08,579
to all the things it doesn't do right

00:17:06,289 --> 00:17:11,490
but when you exit you're back at your

00:17:08,579 --> 00:17:13,679
original user ID one thing you might

00:17:11,490 --> 00:17:15,959
want to do and I'll do it in these is if

00:17:13,679 --> 00:17:18,630
you add with the minus T and I up here a

00:17:15,959 --> 00:17:21,000
minus minus RM that will remove the

00:17:18,630 --> 00:17:24,270
container from the active process list

00:17:21,000 --> 00:17:28,320
and it helps you clean things up a bit

00:17:24,270 --> 00:17:31,470
so gent everyone here use gentle or have

00:17:28,320 --> 00:17:34,560
seen it so I've got is anyone people are

00:17:31,470 --> 00:17:36,510
familiar with it at least so the basic

00:17:34,560 --> 00:17:39,480
idea is it runs a lot like BSD you

00:17:36,510 --> 00:17:42,750
compile everything locally what's neat

00:17:39,480 --> 00:17:46,770
about that is the base image doesn't

00:17:42,750 --> 00:17:48,660
include anything really other than basic

00:17:46,770 --> 00:17:51,840
shell commands and a build environment

00:17:48,660 --> 00:17:53,340
it's got GCC and make by default what's

00:17:51,840 --> 00:17:55,980
important about that is I can use it to

00:17:53,340 --> 00:17:57,870
build pearl but it doesn't have grub it

00:17:55,980 --> 00:18:01,440
doesn't have vixy cron it doesn't have

00:17:57,870 --> 00:18:05,430
time damon's and x11 you have to install

00:18:01,440 --> 00:18:09,990
X fonts so it's much lighter weight than

00:18:05,430 --> 00:18:12,120
a bun two is to begin with so this is an

00:18:09,990 --> 00:18:15,900
example of going I can go to registry at

00:18:12,120 --> 00:18:18,900
hub docker com that is where you store

00:18:15,900 --> 00:18:22,830
things looking in the public portion I

00:18:18,900 --> 00:18:26,160
can find a gin to stage three that one

00:18:22,830 --> 00:18:28,050
was reasonably current so I used it it's

00:18:26,160 --> 00:18:32,240
a little less than half the size of a

00:18:28,050 --> 00:18:36,480
bun to pull it down again I can run this

00:18:32,240 --> 00:18:39,000
if I execute it i'm running a copy of

00:18:36,480 --> 00:18:41,700
bash inside this thing you can check the

00:18:39,000 --> 00:18:44,340
GCC version its current and the nice

00:18:41,700 --> 00:18:45,480
thing is the supports arguable native so

00:18:44,340 --> 00:18:47,550
it will it will do everything it can

00:18:45,480 --> 00:18:48,990
optimize the parole i'm building with it

00:18:47,550 --> 00:18:53,490
for the hardware that I'm actually

00:18:48,990 --> 00:18:55,830
running on if you look in github there

00:18:53,490 --> 00:18:57,720
are templates for building different

00:18:55,830 --> 00:18:59,910
versions of pearl with different

00:18:57,720 --> 00:19:02,880
optimizations and threading and all the

00:18:59,910 --> 00:19:08,400
rest of it so you can grab one of these

00:19:02,880 --> 00:19:14,040
either and again this is pearl 502

00:19:08,400 --> 00:19:17,250
tubing 20 but um type of that sorry so I

00:19:14,040 --> 00:19:19,140
grabbed a copy of this and this gives me

00:19:17,250 --> 00:19:21,090
this is what a docker file looks like

00:19:19,140 --> 00:19:26,160
most of these directives are reasonably

00:19:21,090 --> 00:19:29,100
clear the from says the way docker works

00:19:26,160 --> 00:19:32,310
because it's stacks images this bill

00:19:29,100 --> 00:19:34,710
pack depths will be the image that is

00:19:32,310 --> 00:19:35,820
stacked immediately below this and that

00:19:34,710 --> 00:19:38,340
may have images under

00:19:35,820 --> 00:19:40,220
however many there are but that's the

00:19:38,340 --> 00:19:43,200
starting point for building this layer

00:19:40,220 --> 00:19:47,700
this guy obviously was running on a bunt

00:19:43,200 --> 00:19:51,600
too he didn't app get you can see here

00:19:47,700 --> 00:19:54,030
he made pearl change to it slurp the

00:19:51,600 --> 00:19:55,800
copy of pearl down now one thing a lot

00:19:54,030 --> 00:19:59,690
of people do I notice in docker files

00:19:55,800 --> 00:20:02,220
they do the Altis double ampersand stuff

00:19:59,690 --> 00:20:03,990
every time you put one of those double

00:20:02,220 --> 00:20:05,610
ampersand you create a new process in

00:20:03,990 --> 00:20:07,530
the cycle you're going to create a new

00:20:05,610 --> 00:20:09,870
intermediate image you don't escape

00:20:07,530 --> 00:20:11,700
creating intermediate images with double

00:20:09,870 --> 00:20:13,320
ampersands he could just have well have

00:20:11,700 --> 00:20:17,310
had five run lines that would have been

00:20:13,320 --> 00:20:22,020
a hell of a lot easier to read but um he

00:20:17,310 --> 00:20:26,820
did this configuration made everything

00:20:22,020 --> 00:20:28,920
and then did it make very clean then he

00:20:26,820 --> 00:20:32,040
sent his self himself to root that means

00:20:28,920 --> 00:20:34,050
when you run the container this is the

00:20:32,040 --> 00:20:36,900
directory you'll be in and he set the

00:20:34,050 --> 00:20:39,390
command to parole whatever so you're

00:20:36,900 --> 00:20:41,790
gonna run the what that's going to run

00:20:39,390 --> 00:20:43,740
is bin sh which is the default entry

00:20:41,790 --> 00:20:45,870
point and it's going to run a copy of

00:20:43,740 --> 00:20:48,780
pearl 5 the way he did this because he

00:20:45,870 --> 00:20:51,360
installed into the standard bin live

00:20:48,780 --> 00:20:53,400
directories he / roped the Pearl that

00:20:51,360 --> 00:20:55,440
would have been there already so if

00:20:53,400 --> 00:20:57,390
there was a pearl 520 that came

00:20:55,440 --> 00:20:58,710
installed with the OS he just stepped on

00:20:57,390 --> 00:21:02,760
it which is something i usually don't

00:20:58,710 --> 00:21:05,250
like to do so i'm looking at the pearl

00:21:02,760 --> 00:21:07,740
that i have already installed on this

00:21:05,250 --> 00:21:10,770
machine I've got a prefix I've got

00:21:07,740 --> 00:21:13,500
optimized with minus 0 3 and arc equal

00:21:10,770 --> 00:21:15,600
native or I can do the same thing with

00:21:13,500 --> 00:21:17,430
the Pearl minus M config if you wanted

00:21:15,600 --> 00:21:19,170
to automate this use the pro- em because

00:21:17,430 --> 00:21:20,640
you can actually write up a fairly

00:21:19,170 --> 00:21:23,190
simple Perl program that will do all

00:21:20,640 --> 00:21:25,200
this for you automatically and this

00:21:23,190 --> 00:21:27,720
gives me a new docker file I'm going to

00:21:25,200 --> 00:21:35,190
go to VAR temp I'm going to slurp up a

00:21:27,720 --> 00:21:37,200
copy of pearl 520 or now 522 um and I I

00:21:35,190 --> 00:21:39,240
apologize he left a new line out of here

00:21:37,200 --> 00:21:44,070
I'm then going to feed it into gzip and

00:21:39,240 --> 00:21:47,370
then slurp it out of tar man i botched

00:21:44,070 --> 00:21:49,130
that one I apologize that backslash

00:21:47,370 --> 00:21:55,970
should have been there then gzip it

00:21:49,130 --> 00:21:58,370
tar xzf at that point I can see d do a

00:21:55,970 --> 00:22:01,100
configure one thing I'm going to do to

00:21:58,370 --> 00:22:04,930
save space inside of a running container

00:22:01,100 --> 00:22:04,930
are you ever going to run pearl dock

00:22:04,990 --> 00:22:11,960
probably not so let's turn off the man

00:22:08,390 --> 00:22:13,790
pages save some space and I'm going to

00:22:11,960 --> 00:22:19,120
optimize it I'm going to run make all

00:22:13,790 --> 00:22:22,100
tests and salt this clean run h2 pH and

00:22:19,120 --> 00:22:25,070
my command is going to be pearl minus D

00:22:22,100 --> 00:22:27,560
minus e 42 newer versions of pearl the

00:22:25,070 --> 00:22:29,150
uppercase e turns on all the things so

00:22:27,560 --> 00:22:34,850
you don't have to do use version to get

00:22:29,150 --> 00:22:41,600
things like say or whatever yeah well

00:22:34,850 --> 00:22:45,980
you yes so when you're building things

00:22:41,600 --> 00:22:47,990
with docker you run a docker build you

00:22:45,980 --> 00:22:51,140
can give it a tag which is the name it

00:22:47,990 --> 00:22:53,810
will have in the repository and then you

00:22:51,140 --> 00:22:55,250
tell it the directory that contains the

00:22:53,810 --> 00:22:56,780
dockerfile you don't actually give it

00:22:55,250 --> 00:22:59,270
the path to the individual docker file

00:22:56,780 --> 00:23:02,420
everything that's in that directory will

00:22:59,270 --> 00:23:08,150
get slurped and is used to produce the

00:23:02,420 --> 00:23:11,060
final image so you can see here in a

00:23:08,150 --> 00:23:13,760
previous case I was running this doing

00:23:11,060 --> 00:23:14,990
docker images lists what's there and I

00:23:13,760 --> 00:23:17,300
don't have a tagged image I've got all

00:23:14,990 --> 00:23:21,050
these nuns you can see it the different

00:23:17,300 --> 00:23:23,090
stages of whatever it was running the

00:23:21,050 --> 00:23:25,070
thing about those is each one of those

00:23:23,090 --> 00:23:28,340
because it saves a stage in the build

00:23:25,070 --> 00:23:31,610
their reusable there a cached copy of

00:23:28,340 --> 00:23:33,650
the output of that stage so if I have to

00:23:31,610 --> 00:23:37,370
restart the build I don't have to redo

00:23:33,650 --> 00:23:40,610
them so let's say I run this and the

00:23:37,370 --> 00:23:42,770
original version of this i botched one

00:23:40,610 --> 00:23:48,620
of the commands I did a minus R minus a

00:23:42,770 --> 00:23:51,440
minus L and h2 pH puked you notice here

00:23:48,620 --> 00:23:53,510
it said using cash using cash it reused

00:23:51,440 --> 00:23:56,390
the previous stages it didn't go through

00:23:53,510 --> 00:23:58,610
the motions of rebuilding pearl I'd

00:23:56,390 --> 00:24:00,710
already compiled it once before but i

00:23:58,610 --> 00:24:02,100
botched the h2 pH command so it's

00:24:00,710 --> 00:24:07,140
stopped there

00:24:02,100 --> 00:24:10,559
easy fix change it now I rerun it now

00:24:07,140 --> 00:24:12,450
all tests install reuses the cash the

00:24:10,559 --> 00:24:16,650
image is already there it doesn't get

00:24:12,450 --> 00:24:19,950
rebuilt I rerun this one and at that

00:24:16,650 --> 00:24:21,780
point re running the build takes you

00:24:19,950 --> 00:24:23,429
know two tenths of a second a quarter of

00:24:21,780 --> 00:24:25,289
a second that's one of the neat things

00:24:23,429 --> 00:24:28,919
about docker for this kind of thing if

00:24:25,289 --> 00:24:30,210
you're testing something it's a lot less

00:24:28,919 --> 00:24:31,740
painful because I didn't have to

00:24:30,210 --> 00:24:34,440
redouble you get it I didn't have to

00:24:31,740 --> 00:24:35,880
download things it can make it nice just

00:24:34,440 --> 00:24:40,559
for testing environments if you want to

00:24:35,880 --> 00:24:46,039
see does this work so now looking at

00:24:40,559 --> 00:24:49,080
these the gentoo Pearl was 884 megabytes

00:24:46,039 --> 00:24:52,080
which is not trivial but at least it

00:24:49,080 --> 00:24:53,520
beats using a bun to I do the math it's

00:24:52,080 --> 00:24:56,400
a hundred and something meg for a bear

00:24:53,520 --> 00:25:02,070
copy of pearl busybox by comparison is

00:24:56,400 --> 00:25:06,630
1.9 so I used an extra 740 Meg to have

00:25:02,070 --> 00:25:09,020
this based on an OS if I run an RM minus

00:25:06,630 --> 00:25:11,909
RF to get rid of that build directory

00:25:09,020 --> 00:25:15,330
notice that my built my final virtual

00:25:11,909 --> 00:25:18,270
size is the same that's one of the

00:25:15,330 --> 00:25:20,250
caches what I did that W get of Perl 5

00:25:18,270 --> 00:25:22,890
and I did the build and all the rest of

00:25:20,250 --> 00:25:26,070
it anything that's done the creates an

00:25:22,890 --> 00:25:28,740
intermediate image is part of your

00:25:26,070 --> 00:25:30,419
virtual size at the end so be careful

00:25:28,740 --> 00:25:31,799
what you stick in there because there

00:25:30,419 --> 00:25:33,840
really isn't a way to get it out at the

00:25:31,799 --> 00:25:35,880
end you know me and you have to ship it

00:25:33,840 --> 00:25:39,360
around when you start up docker on a

00:25:35,880 --> 00:25:43,260
remote machine so that's where that disk

00:25:39,360 --> 00:25:46,830
clean came from is it it saved me all of

00:25:43,260 --> 00:25:51,809
the space of the intermediate content in

00:25:46,830 --> 00:25:55,049
the pearl build directory when I run the

00:25:51,809 --> 00:25:59,490
command I do an RM minus I minus T and I

00:25:55,049 --> 00:26:03,210
see the Pearl debugger so it worked but

00:25:59,490 --> 00:26:06,960
it's big now right now what happened

00:26:03,210 --> 00:26:09,720
that ran bash with your command when I

00:26:06,960 --> 00:26:11,940
started that container I can change this

00:26:09,720 --> 00:26:15,600
with an entry point the entry point is

00:26:11,940 --> 00:26:18,950
the thing that processes the arguments

00:26:15,600 --> 00:26:21,960
passed on the command line to the docker

00:26:18,950 --> 00:26:24,480
run when it gets executed I can change

00:26:21,960 --> 00:26:27,960
the entry point to run pearl and then my

00:26:24,480 --> 00:26:29,970
command is de 42 at that point if I do

00:26:27,960 --> 00:26:31,830
this it's kind of neat because then I

00:26:29,970 --> 00:26:35,730
can run docker run and the name of a

00:26:31,830 --> 00:26:38,429
Perl program and it will pass the Perl

00:26:35,730 --> 00:26:42,059
program to pearl and just run it or I

00:26:38,429 --> 00:26:45,630
could do prove or something else so at

00:26:42,059 --> 00:26:49,010
this point I can do just docker pearl

00:26:45,630 --> 00:26:52,110
will get me back into the debugger and

00:26:49,010 --> 00:26:54,960
at the only real advantage of that is it

00:26:52,110 --> 00:26:57,750
saves people from typing opt pearl bin

00:26:54,960 --> 00:27:04,280
pearl on the command line every time to

00:26:57,750 --> 00:27:06,630
start docker up and get pearl running so

00:27:04,280 --> 00:27:08,490
now what I do I can create a stacked

00:27:06,630 --> 00:27:09,900
image now if I want to run this burl I

00:27:08,490 --> 00:27:11,100
would do something more exciting than

00:27:09,900 --> 00:27:14,250
just run the debugger for the rest of my

00:27:11,100 --> 00:27:17,520
life what I'll do is create a new docker

00:27:14,250 --> 00:27:22,020
file it will come from this jen to pearl

00:27:17,520 --> 00:27:24,120
and the command will be whatever the

00:27:22,020 --> 00:27:26,970
path i put in the images because the

00:27:24,120 --> 00:27:28,650
entry point is opt probe in pearl pearl

00:27:26,970 --> 00:27:31,230
will run the thing and i can run an

00:27:28,650 --> 00:27:33,299
application so this is the path to my

00:27:31,230 --> 00:27:35,309
pro code might be a plaque application

00:27:33,299 --> 00:27:39,960
or a plaque server or dancer or whatever

00:27:35,309 --> 00:27:43,620
you want to start up another neat thing

00:27:39,960 --> 00:27:46,110
you can do with docker is you can avoid

00:27:43,620 --> 00:27:47,970
shipping out tests has anyone here ever

00:27:46,110 --> 00:27:49,860
been at a place where somebody ran a

00:27:47,970 --> 00:27:51,960
test they shouldn't run like a

00:27:49,860 --> 00:27:54,630
destructive database test in production

00:27:51,960 --> 00:27:58,020
they type proof by mistake and they nuke

00:27:54,630 --> 00:28:00,090
things distributing your internal tests

00:27:58,020 --> 00:28:02,159
with your code is usually a way to fry

00:28:00,090 --> 00:28:04,980
yourself a great thing you can do with

00:28:02,159 --> 00:28:08,039
docker have one image with your product

00:28:04,980 --> 00:28:10,740
have a higher up image derived from it

00:28:08,039 --> 00:28:12,179
that has your tests execute the

00:28:10,740 --> 00:28:14,220
container with the tests in it you'll

00:28:12,179 --> 00:28:16,140
run the tests but then you only ship out

00:28:14,220 --> 00:28:18,240
the container that has the product that

00:28:16,140 --> 00:28:20,850
allows you to ship out a product without

00:28:18,240 --> 00:28:25,830
having tests in it which can save a lot

00:28:20,850 --> 00:28:27,450
of trouble in the real world now you've

00:28:25,830 --> 00:28:28,920
seen how to do this you seen how the

00:28:27,450 --> 00:28:31,020
docker file works

00:28:28,920 --> 00:28:33,180
but to a large extent this is a waste of

00:28:31,020 --> 00:28:36,420
space because jan 2 is still too friggin

00:28:33,180 --> 00:28:38,280
big and i don't need a copy of GCC in my

00:28:36,420 --> 00:28:40,830
running application if i'm running a

00:28:38,280 --> 00:28:42,840
plaque server how many people here call

00:28:40,830 --> 00:28:46,920
GCC from within their running plaque

00:28:42,840 --> 00:28:50,760
server or make for that matter it yeah

00:28:46,920 --> 00:28:53,010
it doesn't you know it's not something

00:28:50,760 --> 00:28:55,500
the reason people do it this way we're

00:28:53,010 --> 00:28:56,910
all used to virtual machines we can't

00:28:55,500 --> 00:28:58,830
get away from the pain it's like a

00:28:56,910 --> 00:29:03,030
heroin junkie you just need one more fix

00:28:58,830 --> 00:29:06,030
to get off of it so another way to do

00:29:03,030 --> 00:29:09,420
this entire thing is to build pearl on

00:29:06,030 --> 00:29:11,810
top of busy box so if i look in the

00:29:09,420 --> 00:29:14,010
docker file and it comes from busy box i

00:29:11,810 --> 00:29:20,040
have the same entry point the same

00:29:14,010 --> 00:29:22,890
command now i can run an entry point

00:29:20,040 --> 00:29:25,650
with bin sh and use busybox to check it

00:29:22,890 --> 00:29:29,280
i won't use bash but i get a much

00:29:25,650 --> 00:29:32,040
lighter weight thing building pearl on

00:29:29,280 --> 00:29:35,280
top of busy box is 67 meg only one point

00:29:32,040 --> 00:29:37,320
nine of which is busy box so which would

00:29:35,280 --> 00:29:42,330
you rather ship over a slow network

00:29:37,320 --> 00:29:45,240
connection 884 or 67 yeah then the 67's

00:29:42,330 --> 00:29:47,760
just corporal if i wanted to have a

00:29:45,240 --> 00:29:49,890
reasonable number of modules pearl

00:29:47,760 --> 00:29:51,150
easily gets up to a few hundred Meg if

00:29:49,890 --> 00:29:53,280
you've got a reasonable fraction of

00:29:51,150 --> 00:29:55,080
Sipan installed so I might be shipping

00:29:53,280 --> 00:29:57,750
up one and a half gig every time I put

00:29:55,080 --> 00:29:59,460
something around of which 884 megabytes

00:29:57,750 --> 00:30:01,770
is something that I really don't use

00:29:59,460 --> 00:30:06,270
most of the only reason I've got that

00:30:01,770 --> 00:30:10,350
whole 884 was to have the libraries so

00:30:06,270 --> 00:30:14,420
what I can do instead of doing a run to

00:30:10,350 --> 00:30:18,210
build a copy of pearl what i could do is

00:30:14,420 --> 00:30:19,980
just build pearl on my local system do

00:30:18,210 --> 00:30:23,910
it the normal way put it in opt pearl

00:30:19,980 --> 00:30:28,080
520 have it running check it out what i

00:30:23,910 --> 00:30:29,760
would do then is I would CD to the

00:30:28,080 --> 00:30:33,600
directory that's got pearl in it and

00:30:29,760 --> 00:30:34,980
copy that into the image the copy

00:30:33,600 --> 00:30:37,170
command is one of the standard ways to

00:30:34,980 --> 00:30:39,330
do it I can still use a docker file to

00:30:37,170 --> 00:30:42,290
build this it's it's still wonderful and

00:30:39,330 --> 00:30:47,550
holy and as a way to redo it but

00:30:42,290 --> 00:30:51,059
now my dockerfile is for you know is for

00:30:47,550 --> 00:30:54,720
real lines long it's built from busy box

00:30:51,059 --> 00:30:57,780
and I don't have to have an entire OS

00:30:54,720 --> 00:30:59,309
underneath and I can build the thing at

00:30:57,780 --> 00:31:02,640
my leisure I'm not having to build it

00:30:59,309 --> 00:31:04,260
inside of docker so for example one of

00:31:02,640 --> 00:31:06,750
the uses for this would be if opt pro

00:31:04,260 --> 00:31:08,760
520 I can install if i install a new

00:31:06,750 --> 00:31:11,100
Sipan module if i do a regular Sipan

00:31:08,760 --> 00:31:13,080
upgrade I've checked out all my modules

00:31:11,100 --> 00:31:16,770
i want the new modules i can rerun this

00:31:13,080 --> 00:31:19,110
in 30 seconds and get a new image to

00:31:16,770 --> 00:31:21,990
ship out I don't have to recompile pearl

00:31:19,110 --> 00:31:28,610
from scratch every friggin time I want

00:31:21,990 --> 00:31:31,050
to update the Sipan modules so you know

00:31:28,610 --> 00:31:34,590
then it gets down to you know let's just

00:31:31,050 --> 00:31:36,750
say your normal copy of pearl a lot of

00:31:34,590 --> 00:31:39,179
times you've got Sipan reporter how many

00:31:36,750 --> 00:31:43,110
of us run Sipan reporter from inside of

00:31:39,179 --> 00:31:45,480
a nap at our plaque there's still stuff

00:31:43,110 --> 00:31:47,130
in corporal that or things you use on

00:31:45,480 --> 00:31:49,440
your distribution you don't really need

00:31:47,130 --> 00:31:51,960
so the next thing is and this is

00:31:49,440 --> 00:31:54,690
actually how I do it one day I extract a

00:31:51,960 --> 00:31:58,550
copy of gen 2 stage 3 into a scratch

00:31:54,690 --> 00:32:01,380
area I true to it and build pearl and

00:31:58,550 --> 00:32:03,929
that is the bear copy of pearl that I

00:32:01,380 --> 00:32:05,730
use to make images from I don't install

00:32:03,929 --> 00:32:08,280
Sipan reporter it I don't install

00:32:05,730 --> 00:32:11,910
everything everywhere into it I install

00:32:08,280 --> 00:32:15,150
what I need to put in the images then

00:32:11,910 --> 00:32:18,870
all I do is I CD there and I because its

00:32:15,150 --> 00:32:20,429
rooted when when things are built I can

00:32:18,870 --> 00:32:22,020
see d there from the outside world I

00:32:20,429 --> 00:32:25,350
don't need to build a relocatable pearl

00:32:22,020 --> 00:32:30,179
I can do a copy dot into the image and

00:32:25,350 --> 00:32:33,330
everything's in / oft pearl if that

00:32:30,179 --> 00:32:35,370
didn't make sense it tried on a piece of

00:32:33,330 --> 00:32:38,160
paper one time you'll see but now I've

00:32:35,370 --> 00:32:41,580
got an opt pearl that has only the

00:32:38,160 --> 00:32:43,440
modules I need in it and no more but I

00:32:41,580 --> 00:32:44,970
can still have another copy of pearl out

00:32:43,440 --> 00:32:47,040
there that I test things with this thing

00:32:44,970 --> 00:32:50,640
is only for building docker images and

00:32:47,040 --> 00:32:52,320
in today's world kissing off an extra

00:32:50,640 --> 00:32:55,049
gig of disk space in a corner for

00:32:52,320 --> 00:33:00,149
something is going to kill you

00:32:55,049 --> 00:33:02,970
um another way to do this is dodge the

00:33:00,149 --> 00:33:05,399
dockerfile entirely if what you're going

00:33:02,970 --> 00:33:07,080
to do is run a plaque server you

00:33:05,399 --> 00:33:09,090
probably don't even need or even want

00:33:07,080 --> 00:33:11,519
busy boxes you don't want people to

00:33:09,090 --> 00:33:14,190
crack into the end of the container and

00:33:11,519 --> 00:33:16,049
have the busy box tools around to screw

00:33:14,190 --> 00:33:17,519
with you you might not want people to

00:33:16,049 --> 00:33:20,039
have a copy of the shell if they crack

00:33:17,519 --> 00:33:24,169
into your container at that point if I

00:33:20,039 --> 00:33:27,119
CD to wherever my pearl destroy is I can

00:33:24,169 --> 00:33:31,200
create a tower image of it and use

00:33:27,119 --> 00:33:34,619
docker import docker import just slurps

00:33:31,200 --> 00:33:35,940
in a tarball so what I do then is ok i

00:33:34,619 --> 00:33:38,159
left the character out of here there's

00:33:35,940 --> 00:33:42,720
it there has to be a dash in here god I

00:33:38,159 --> 00:33:45,570
really blew this one but if I create a

00:33:42,720 --> 00:33:47,820
tarball you use the minus change switch

00:33:45,570 --> 00:33:50,429
don't ask me where they got it and that

00:33:47,820 --> 00:33:52,499
allows you to put the kinds of things

00:33:50,429 --> 00:33:55,159
you would stick into a docker file and

00:33:52,499 --> 00:33:57,899
have the import process them that way

00:33:55,159 --> 00:34:01,169
this gives me an image which has no

00:33:57,899 --> 00:34:04,619
parent it just is it's a bare naked copy

00:34:01,169 --> 00:34:07,799
of pearl that I've tagged it if I were

00:34:04,619 --> 00:34:09,690
running plaque and this had a directory

00:34:07,799 --> 00:34:11,700
with my plaque service in it the the

00:34:09,690 --> 00:34:14,909
plaque execution code I would have

00:34:11,700 --> 00:34:19,250
nothing I didn't need there's only one

00:34:14,909 --> 00:34:22,079
problem with this approach it won't run

00:34:19,250 --> 00:34:25,109
most of us build pearl with shared

00:34:22,079 --> 00:34:26,700
libraries and if all I do is copy off

00:34:25,109 --> 00:34:30,450
the pearl I don't have any shared

00:34:26,700 --> 00:34:33,659
libraries in my case all the shared

00:34:30,450 --> 00:34:35,460
libraries came from live 64 so doctor

00:34:33,659 --> 00:34:38,190
gives us a way to deal with that what

00:34:35,460 --> 00:34:41,399
they call volumes and this is basically

00:34:38,190 --> 00:34:44,069
a bind mount inside of your your

00:34:41,399 --> 00:34:46,349
container so if I do a docker run with

00:34:44,069 --> 00:34:49,950
this minus V string I've said take the

00:34:46,349 --> 00:34:53,250
live 64 on the main OS stick it into my

00:34:49,950 --> 00:34:56,700
container and make it read-only now

00:34:53,250 --> 00:34:59,069
parole will run the nice thing is I

00:34:56,700 --> 00:35:02,280
don't I'm if I'm running this on my

00:34:59,069 --> 00:35:03,930
local machine I don't have to package a

00:35:02,280 --> 00:35:08,090
bunch of libraries that are already on

00:35:03,930 --> 00:35:10,130
the disk in fact

00:35:08,090 --> 00:35:12,740
if I had a plaque application that used

00:35:10,130 --> 00:35:15,050
my local copy of pearl all I really need

00:35:12,740 --> 00:35:17,450
to make an image of this plot is the

00:35:15,050 --> 00:35:20,540
plaque application and I can do a minus

00:35:17,450 --> 00:35:23,840
V opt pearl and it can reference shebang

00:35:20,540 --> 00:35:25,880
opt probe in pearl and it will be using

00:35:23,840 --> 00:35:27,860
the one on the disk you don't need to

00:35:25,880 --> 00:35:30,230
virtualize all of this we're all still

00:35:27,860 --> 00:35:32,150
you too used to using virtual machines

00:35:30,230 --> 00:35:34,460
for everything and shipping around a lot

00:35:32,150 --> 00:35:36,500
of stuff we don't need to so this minus

00:35:34,460 --> 00:35:38,600
V switch gives you a way to have nothing

00:35:36,500 --> 00:35:41,500
but pearl just the bare minimum of what

00:35:38,600 --> 00:35:43,730
you need in the container or even less

00:35:41,500 --> 00:35:47,000
keep pearl outside the container and

00:35:43,730 --> 00:35:48,410
have just your application in it so you

00:35:47,000 --> 00:35:50,600
can create an application that is

00:35:48,410 --> 00:35:53,450
nothing more than a a one-line shebang

00:35:50,600 --> 00:35:55,490
script that executes something and has

00:35:53,450 --> 00:35:58,460
all everything else mounted bind from

00:35:55,490 --> 00:35:59,930
the outside world the one trick with

00:35:58,460 --> 00:36:01,670
this is if you're going to use the slide

00:35:59,930 --> 00:36:03,200
64 trick you've got to have a

00:36:01,670 --> 00:36:05,090
homogeneous environmental you can't ship

00:36:03,200 --> 00:36:06,230
this to multiple machines or at least

00:36:05,090 --> 00:36:08,240
you've got to have enough of the same

00:36:06,230 --> 00:36:10,370
libraries that pearl isn't going to keel

00:36:08,240 --> 00:36:11,720
over if you run it on one of the remote

00:36:10,370 --> 00:36:14,030
machines and it's got out of date

00:36:11,720 --> 00:36:16,190
libraries you can have a mismatch in the

00:36:14,030 --> 00:36:18,560
library versions so that can cause you

00:36:16,190 --> 00:36:19,850
pain another neat trick for this by the

00:36:18,560 --> 00:36:22,610
way if you're running a server and you

00:36:19,850 --> 00:36:24,560
need scratch space before you run the

00:36:22,610 --> 00:36:27,710
thing if you make der vaart emptor

00:36:24,560 --> 00:36:29,570
dollar you can bind that to VAR temp

00:36:27,710 --> 00:36:32,090
inside the container and that gives you

00:36:29,570 --> 00:36:33,980
a nice scratch paid space on temp FS or

00:36:32,090 --> 00:36:35,960
whatever you're fast storage is that's

00:36:33,980 --> 00:36:40,160
private to this container and just

00:36:35,960 --> 00:36:41,930
remove that on the way out the other

00:36:40,160 --> 00:36:44,270
thing you can do with this if you don't

00:36:41,930 --> 00:36:46,940
like the minus V trick because it feels

00:36:44,270 --> 00:36:50,060
funny ldd will give you a list of shared

00:36:46,940 --> 00:36:52,100
libraries there is nothing that says the

00:36:50,060 --> 00:36:55,520
images have to be stacked in the order

00:36:52,100 --> 00:36:58,280
they're they're used so I can go in

00:36:55,520 --> 00:37:01,340
after I've built pearl and after I've

00:36:58,280 --> 00:37:03,860
got the Pearl image I can run ldd on it

00:37:01,340 --> 00:37:05,810
and see which libraries it uses I can

00:37:03,860 --> 00:37:09,080
create a new image with those libraries

00:37:05,810 --> 00:37:11,030
just copy them in to a new image derived

00:37:09,080 --> 00:37:12,860
from pearl as long as the libraries are

00:37:11,030 --> 00:37:16,010
there when i try to run pearl it'll all

00:37:12,860 --> 00:37:17,540
work so you don't have to derive the

00:37:16,010 --> 00:37:19,700
libraries before you build the pearl

00:37:17,540 --> 00:37:21,650
image do it afterwards and ship that out

00:37:19,700 --> 00:37:22,040
as one unit and then you don't need to

00:37:21,650 --> 00:37:26,390
use them

00:37:22,040 --> 00:37:28,970
sv the other way is Bill prostatic if

00:37:26,390 --> 00:37:30,410
you're using your pearl to drive testing

00:37:28,970 --> 00:37:32,300
of other things that might be in the

00:37:30,410 --> 00:37:33,980
container having a static pearl is

00:37:32,300 --> 00:37:35,330
easier because then you're not dependent

00:37:33,980 --> 00:37:38,090
on the libraries of the things you're

00:37:35,330 --> 00:37:39,590
testing which is a situation i get into

00:37:38,090 --> 00:37:41,660
because i'm using perl to test other

00:37:39,590 --> 00:37:44,150
people's code and i can't guarantee what

00:37:41,660 --> 00:37:46,820
versions of libraries they might need

00:37:44,150 --> 00:37:48,020
and using a static pearl obviates all of

00:37:46,820 --> 00:37:49,490
this because they need to ship the pearl

00:37:48,020 --> 00:37:51,230
and you're done with it but then you've

00:37:49,490 --> 00:37:55,340
got a you know a static your shipping a

00:37:51,230 --> 00:37:59,060
fair amount of data either way you can

00:37:55,340 --> 00:38:02,180
get a very small portable pearl that's

00:37:59,060 --> 00:38:06,290
no bigger than what you need just by not

00:38:02,180 --> 00:38:07,760
including more than you have to for

00:38:06,290 --> 00:38:09,500
experimenting with parole for a

00:38:07,760 --> 00:38:11,510
development environment i'd recommend

00:38:09,500 --> 00:38:14,900
start with busybox plus whatever pearl

00:38:11,510 --> 00:38:19,090
and then run it with a minus v you can

00:38:14,900 --> 00:38:22,430
build the the pearl container in minutes

00:38:19,090 --> 00:38:24,410
using copy have something running if you

00:38:22,430 --> 00:38:28,000
want if your question is does this new

00:38:24,410 --> 00:38:30,800
does adding this new Sipan module fry me

00:38:28,000 --> 00:38:32,720
you can copy it in some place create an

00:38:30,800 --> 00:38:35,930
image with the cPanel I with the sea pen

00:38:32,720 --> 00:38:38,210
library make this copy of pearl try it

00:38:35,930 --> 00:38:40,130
if you don't like it back it out but you

00:38:38,210 --> 00:38:47,150
could build the docker image to test the

00:38:40,130 --> 00:38:49,850
new Sipan library in minutes and docks

00:38:47,150 --> 00:38:53,060
dr. calm is is where to find things on

00:38:49,850 --> 00:38:57,560
docker again a lot of their

00:38:53,060 --> 00:39:00,560
documentation is a bit simplistic it

00:38:57,560 --> 00:39:02,660
assumes that you'd a bun to really think

00:39:00,560 --> 00:39:04,520
hard before you add stuff to these

00:39:02,660 --> 00:39:06,500
images because once you can see from

00:39:04,520 --> 00:39:08,330
building it if you put junk into an

00:39:06,500 --> 00:39:10,070
image you don't need removing it doesn't

00:39:08,330 --> 00:39:11,450
make the image smaller and it means

00:39:10,070 --> 00:39:13,070
you've got to ship around stuff that

00:39:11,450 --> 00:39:15,500
even if it isn't loaded into core when

00:39:13,070 --> 00:39:17,270
you run still has to be pushed into

00:39:15,500 --> 00:39:20,650
repositories the other thing I'd

00:39:17,270 --> 00:39:25,130
recommend just as it makes life easier

00:39:20,650 --> 00:39:29,020
go to docker repository and there are a

00:39:25,130 --> 00:39:32,740
number of docker images of a docker

00:39:29,020 --> 00:39:35,420
repository and then you can run it local

00:39:32,740 --> 00:39:38,540
so when I built all of this actually

00:39:35,420 --> 00:39:40,099
I had to slice off localhost colon 5,000

00:39:38,540 --> 00:39:41,510
from the front of these and then if I

00:39:40,099 --> 00:39:42,740
actually did a Porsche takes three

00:39:41,510 --> 00:39:45,200
seconds because I'm pushing it onto the

00:39:42,740 --> 00:39:46,910
local machine and they don't have to

00:39:45,200 --> 00:39:48,170
worry about outside access you don't

00:39:46,910 --> 00:39:49,849
have to worry about whatever level of

00:39:48,170 --> 00:39:51,140
security they might have and you don't

00:39:49,849 --> 00:39:52,640
have to freak out about whether you

00:39:51,140 --> 00:39:54,680
might have something someone might break

00:39:52,640 --> 00:39:59,720
into dockers hub and steal from you it's

00:39:54,680 --> 00:40:02,030
all local and that's it the basic thing

00:39:59,720 --> 00:40:03,680
to remember doctor is it's really not a

00:40:02,030 --> 00:40:07,190
replacement for lxc if you eat all of

00:40:03,680 --> 00:40:09,079
LXE don't use docker but it'll get you

00:40:07,190 --> 00:40:11,690
through the you know the 8020 type thing

00:40:09,079 --> 00:40:14,299
you can probably use this for most of

00:40:11,690 --> 00:40:15,410
what you need to today and because it's

00:40:14,299 --> 00:40:17,030
still evolving if you don't like

00:40:15,410 --> 00:40:19,579
something scream a docker because they

00:40:17,030 --> 00:40:23,480
have made a a bunch of changes in it to

00:40:19,579 --> 00:40:25,790
accommodate what people liked and yeah

00:40:23,480 --> 00:40:28,400
the trick with the minus V live 64

00:40:25,790 --> 00:40:30,770
allows you to distribute pearl without

00:40:28,400 --> 00:40:33,730
having an entire OS underneath which

00:40:30,770 --> 00:40:38,480
will save you an enormous amount of pain

00:40:33,730 --> 00:40:42,890
and that was it i think yes any

00:40:38,480 --> 00:40:47,200
questions or any rotten tomatoes i can

00:40:42,890 --> 00:40:47,200
dodge at on what

00:40:59,920 --> 00:41:05,870
you'd build them all spent well depends

00:41:02,860 --> 00:41:07,070
if pearl is built static that doesn't

00:41:05,870 --> 00:41:09,140
mean that the other ones have to be

00:41:07,070 --> 00:41:11,300
built static why you're not going to get

00:41:09,140 --> 00:41:12,980
the benefit of not having to use the

00:41:11,300 --> 00:41:16,400
minus B the whole point of building a

00:41:12,980 --> 00:41:21,440
static would be if I've got a completely

00:41:16,400 --> 00:41:24,080
heterogeneous environment and I'm trying

00:41:21,440 --> 00:41:26,180
for example in my case my current client

00:41:24,080 --> 00:41:29,210
company called early adopter labs we're

00:41:26,180 --> 00:41:32,090
doing testing as a service so I I Drive

00:41:29,210 --> 00:41:34,640
the tests using Perl but that means

00:41:32,090 --> 00:41:36,800
people give us stuff to put in the image

00:41:34,640 --> 00:41:39,170
that's being tested or I have no control

00:41:36,800 --> 00:41:40,730
over what OS they want to use and what

00:41:39,170 --> 00:41:43,790
versions of any libraries they want to

00:41:40,730 --> 00:41:46,160
use if I want to use my code on top of

00:41:43,790 --> 00:41:47,810
theirs to drive the test it has to be

00:41:46,160 --> 00:41:49,760
compiled static because I got no idea is

00:41:47,810 --> 00:41:51,680
what libraries they want to have and I

00:41:49,760 --> 00:41:56,540
can't run the risk of masking one of

00:41:51,680 --> 00:41:58,700
their libraries with one of mine it yes

00:41:56,540 --> 00:42:00,860
it can be a royal pain in the butt but

00:41:58,700 --> 00:42:02,840
once you've compiled pearl static the

00:42:00,860 --> 00:42:05,180
static switch that's used for the config

00:42:02,840 --> 00:42:09,470
args is recycled for everything else and

00:42:05,180 --> 00:42:12,380
they will get bigger but you know if if

00:42:09,470 --> 00:42:13,900
ship ability is your absolute concern

00:42:12,380 --> 00:42:17,030
then that's going to be the easiest way

00:42:13,900 --> 00:42:19,340
if just having access to the libraries a

00:42:17,030 --> 00:42:22,840
reasonable environment is easier concern

00:42:19,340 --> 00:42:22,840
use them on his fee it works perfectly

00:42:22,990 --> 00:42:25,990
huh

00:42:33,590 --> 00:42:40,620
yes I do is somebody's got a network

00:42:38,490 --> 00:42:42,300
connection if you uh if you look on

00:42:40,620 --> 00:42:46,770
Sipan look up docker there they're more

00:42:42,300 --> 00:42:52,970
than a few of them I've tried a couple

00:42:46,770 --> 00:42:56,670
of them in general the doctor modules on

00:42:52,970 --> 00:42:59,400
seat pan are about controlling docker

00:42:56,670 --> 00:43:01,230
starting up images checking the running

00:42:59,400 --> 00:43:03,840
processes that the question is what what

00:43:01,230 --> 00:43:06,510
is there for da car on Sipan and most of

00:43:03,840 --> 00:43:08,160
them are for maintaining the running dr.

00:43:06,510 --> 00:43:09,570
environment and they're nice one of the

00:43:08,160 --> 00:43:11,250
problems we have with docker for example

00:43:09,570 --> 00:43:13,860
is if you don't have the minus RM when

00:43:11,250 --> 00:43:16,170
you start up a container it won't be

00:43:13,860 --> 00:43:18,600
removed when you exit and you can end up

00:43:16,170 --> 00:43:20,640
with all these little images that have

00:43:18,600 --> 00:43:22,830
nothing to do with anything another

00:43:20,640 --> 00:43:26,280
thing that happens docker has a really

00:43:22,830 --> 00:43:27,510
nifty ability to create volumes on the

00:43:26,280 --> 00:43:30,870
fly you can get little pieces of

00:43:27,510 --> 00:43:33,810
anonymous storage and attach them to an

00:43:30,870 --> 00:43:36,440
image and the image has nothing in it it

00:43:33,810 --> 00:43:38,970
just references that external storage

00:43:36,440 --> 00:43:40,740
which doesn't sound like much except a

00:43:38,970 --> 00:43:42,420
lot of times when you're running things

00:43:40,740 --> 00:43:45,930
you've got the same piece of code that

00:43:42,420 --> 00:43:48,780
has to access different data so what i

00:43:45,930 --> 00:43:50,580
can do is build an image that has data

00:43:48,780 --> 00:43:52,350
that drives my website like different

00:43:50,580 --> 00:43:53,760
plaque apps or whether i'm running this

00:43:52,350 --> 00:43:56,160
thing in test mode or not test mode

00:43:53,760 --> 00:43:58,160
configuration files and i can have

00:43:56,160 --> 00:43:59,790
images that all they have are

00:43:58,160 --> 00:44:01,800
configuration files on them are

00:43:59,790 --> 00:44:06,090
reference them and depending on whether

00:44:01,800 --> 00:44:08,390
i build myself from this or that image i

00:44:06,090 --> 00:44:12,360
will get myself running in test mode or

00:44:08,390 --> 00:44:14,660
production mode a lot of that kind of

00:44:12,360 --> 00:44:17,100
stuff is what you can get from Sipan of

00:44:14,660 --> 00:44:19,440
cleaning up all the extra storage

00:44:17,100 --> 00:44:21,270
cleaning up all the dead processes

00:44:19,440 --> 00:44:24,540
getting rid of images that are no longer

00:44:21,270 --> 00:44:27,600
referenced by anything as far as

00:44:24,540 --> 00:44:29,100
rebuilding it goes she'll works just

00:44:27,600 --> 00:44:30,900
perfectly for these because all you've

00:44:29,100 --> 00:44:35,490
got is the one line that says docker

00:44:30,900 --> 00:44:37,890
build mumble I what I usually do is I

00:44:35,490 --> 00:44:40,770
create a directory of docker scratch

00:44:37,890 --> 00:44:41,910
docker and I put the name of the thing I

00:44:40,770 --> 00:44:43,890
want to build

00:44:41,910 --> 00:44:45,960
as the base name and then there's one

00:44:43,890 --> 00:44:50,339
shell script that does a CD to dollar

00:44:45,960 --> 00:44:51,900
dirname of dollars zero and it builds

00:44:50,339 --> 00:44:54,000
you know base name of their name of

00:44:51,900 --> 00:44:55,530
dollars zero and it's one shell script

00:44:54,000 --> 00:44:57,569
builds all the images that I use because

00:44:55,530 --> 00:44:59,970
the dockerfile is where you really have

00:44:57,569 --> 00:45:03,450
the specifics and that just that's what

00:44:59,970 --> 00:45:07,380
ever it is the other trick by the way if

00:45:03,450 --> 00:45:10,890
you want to build a copy of pearl

00:45:07,380 --> 00:45:12,150
another neat way of doing it that I

00:45:10,890 --> 00:45:14,150
didn't show here because it freaks

00:45:12,150 --> 00:45:17,720
people out but it works beautifully is

00:45:14,150 --> 00:45:22,859
go to your opt parole directory and

00:45:17,720 --> 00:45:24,750
stick a docker file in it people that

00:45:22,859 --> 00:45:26,520
use docker thinking about this what that

00:45:24,750 --> 00:45:30,569
will do is slurp the current directory

00:45:26,520 --> 00:45:32,369
as the basis for the image so you do it

00:45:30,569 --> 00:45:36,589
what you do then is you do a docker

00:45:32,369 --> 00:45:41,520
build you know- tag or whatever opt

00:45:36,589 --> 00:45:43,829
pearl 520 let's say if there's a docker

00:45:41,520 --> 00:45:46,440
file on there that can do the copy dot

00:45:43,829 --> 00:45:49,770
into opt Perl 5 20 you can do whatever

00:45:46,440 --> 00:45:51,270
you need and at that point it's going to

00:45:49,770 --> 00:45:52,890
look a little bit odd because you're

00:45:51,270 --> 00:45:56,849
running copy of perlas can have a docker

00:45:52,890 --> 00:45:59,400
file at its base directory but it works

00:45:56,849 --> 00:46:02,960
beautifully and it makes it really easy

00:45:59,400 --> 00:46:05,160
to build that version of pearl in dr.

00:46:02,960 --> 00:46:06,539
you don't have to worry about copying it

00:46:05,160 --> 00:46:12,720
over or tar balling or doing anything

00:46:06,539 --> 00:46:16,319
else any other questions anyone with a

00:46:12,720 --> 00:46:19,230
heartbeat you know breathing I don't

00:46:16,319 --> 00:46:22,500
know was this useful people found it

00:46:19,230 --> 00:46:26,190
okay i'm going to i will finish cleaning

00:46:22,500 --> 00:46:27,839
this up and stick it on slideshare so if

00:46:26,190 --> 00:46:29,700
anyone looks me up on SlideShare though

00:46:27,839 --> 00:46:30,900
they'll find this version there's

00:46:29,700 --> 00:46:34,910
another older version of this that

00:46:30,900 --> 00:46:37,859
doesn't include quite as much one thing

00:46:34,910 --> 00:46:39,539
quick soapbox running a perl mongers

00:46:37,859 --> 00:46:41,640
group is a real pain in the butt because

00:46:39,539 --> 00:46:44,039
nobody wants to speak because nobody

00:46:41,640 --> 00:46:47,549
wants to sit down and write the talks if

00:46:44,039 --> 00:46:48,990
anyone goes to my site and finds a pearl

00:46:47,549 --> 00:46:51,869
talk that's on there feel free to use

00:46:48,990 --> 00:46:54,270
them for the local groups and if anyone

00:46:51,869 --> 00:46:55,840
else has got talks put them up on

00:46:54,270 --> 00:46:57,580
SlideShare where people can get them in

00:46:55,840 --> 00:47:00,610
Prince them is pearl because it'll make

00:46:57,580 --> 00:47:01,570
all of our lives a lot easier but like I

00:47:00,610 --> 00:47:03,610
said this will be available on

00:47:01,570 --> 00:47:08,460
SlideShare tonight after I fix some of

00:47:03,610 --> 00:47:08,460
the typos i just found in it yes

00:47:21,090 --> 00:47:30,750
yes right what you have to do what the

00:47:28,180 --> 00:47:35,260
question was that when you run docker

00:47:30,750 --> 00:47:39,000
containers there are volume directories

00:47:35,260 --> 00:47:42,609
that had created invar alive docker aufs

00:47:39,000 --> 00:47:44,200
that don't seem to go away if you read

00:47:42,609 --> 00:47:46,869
the doctor documentation on how it

00:47:44,200 --> 00:47:49,300
handles the minus V switch they say that

00:47:46,869 --> 00:47:52,060
because the minus V switch might be used

00:47:49,300 --> 00:47:54,070
to store local data they have no way to

00:47:52,060 --> 00:47:55,660
delete those they specifically went out

00:47:54,070 --> 00:47:57,730
of their way not to implement something

00:47:55,660 --> 00:47:59,140
because they don't want to find out that

00:47:57,730 --> 00:48:00,910
they fried something important to people

00:47:59,140 --> 00:48:03,910
i think that's dumb but that's the way

00:48:00,910 --> 00:48:10,030
they did it what you end up having to do

00:48:03,910 --> 00:48:12,340
and there are examples on the net is you

00:48:10,030 --> 00:48:13,960
have to go through those files and look

00:48:12,340 --> 00:48:16,060
up the ones that are referenced and

00:48:13,960 --> 00:48:18,910
pearl is a great way to do this but you

00:48:16,060 --> 00:48:23,680
end up with a hash these these file

00:48:18,910 --> 00:48:26,349
names are our directories are sha-256

00:48:23,680 --> 00:48:30,339
strings and you have to go through and

00:48:26,349 --> 00:48:32,800
you can find references to those in your

00:48:30,339 --> 00:48:34,810
repository in the in parts of the

00:48:32,800 --> 00:48:36,369
filesystem and you go into one section

00:48:34,810 --> 00:48:38,080
of it basically what you do is you build

00:48:36,369 --> 00:48:39,940
a hash of which ones are referenced and

00:48:38,080 --> 00:48:42,640
then you look up in the hash and you fry

00:48:39,940 --> 00:48:45,000
the directories that aren't and it's a

00:48:42,640 --> 00:48:48,490
bit of a pain in the butt but yes those

00:48:45,000 --> 00:48:50,680
they don't one of the things lacking in

00:48:48,490 --> 00:48:54,130
docker now is decent garbage collection

00:48:50,680 --> 00:48:58,060
one of the things you do again use minus

00:48:54,130 --> 00:49:01,089
minus RM when you run things and that

00:48:58,060 --> 00:49:03,520
will remove the container once it exits

00:49:01,089 --> 00:49:08,050
that says a lot of housekeeping another

00:49:03,520 --> 00:49:10,720
thing is when you do a docker RM which

00:49:08,050 --> 00:49:12,099
removes a container not an image it

00:49:10,720 --> 00:49:16,599
removes the container of something that

00:49:12,099 --> 00:49:18,820
ran do an RM space minus V which removes

00:49:16,599 --> 00:49:21,130
extraneous volumes left over with that

00:49:18,820 --> 00:49:22,750
container that is the best garbage

00:49:21,130 --> 00:49:25,300
collection they've got available today

00:49:22,750 --> 00:49:28,960
the saving grace is that most of those

00:49:25,300 --> 00:49:31,540
directories are trivial in size

00:49:28,960 --> 00:49:33,700
the actual directory named the dorant

00:49:31,540 --> 00:49:36,880
takes up more disk space than the

00:49:33,700 --> 00:49:39,070
directory so you can put a lot of them

00:49:36,880 --> 00:49:42,280
on the drive without killing yourself

00:49:39,070 --> 00:49:43,780
and every so often you just have a

00:49:42,280 --> 00:49:45,190
maintenance window where you say

00:49:43,780 --> 00:49:46,780
everything docker ish is going to get

00:49:45,190 --> 00:49:50,349
shut down for five minutes and you fry

00:49:46,780 --> 00:49:52,560
them and just restart it I mean that

00:49:50,349 --> 00:49:55,119
today that's the best you're going to do

00:49:52,560 --> 00:49:56,320
pearl would be a nice way to do that

00:49:55,119 --> 00:50:00,099
because you could look up what's running

00:49:56,320 --> 00:50:07,390
what it references but they're they're

00:50:00,099 --> 00:50:08,830
annoying I know any other that might be

00:50:07,390 --> 00:50:10,780
interesting how many people here that

00:50:08,830 --> 00:50:13,480
use docker with pearl would be willing

00:50:10,780 --> 00:50:16,089
to sit down and write a decent garbage

00:50:13,480 --> 00:50:17,619
collector we could probably sit down and

00:50:16,089 --> 00:50:21,099
do it over a couple of beers tonight

00:50:17,619 --> 00:50:28,330
make a lot of friends no write it in

00:50:21,099 --> 00:50:35,500
perl i would expect I don't know and I

00:50:28,330 --> 00:50:42,450
frankly don't care because I know how to

00:50:35,500 --> 00:50:45,670
write pearl I'd have boobs yeah I mean I

00:50:42,450 --> 00:50:47,080
yeah it's well I mean at least people

00:50:45,670 --> 00:50:48,940
you know go out of your way to at least

00:50:47,080 --> 00:50:52,420
write stuff and later than five point

00:50:48,940 --> 00:50:54,190
eight why no I mean it seriously is

00:50:52,420 --> 00:50:56,800
someone to be willing to blow up beer on

00:50:54,190 --> 00:50:58,420
it this afternoon or tonight we could

00:50:56,800 --> 00:51:00,580
probably write the garbage collector

00:50:58,420 --> 00:51:02,980
because all that meat all it has to do

00:51:00,580 --> 00:51:05,170
is look in vara live docker I forgot

00:51:02,980 --> 00:51:06,790
which and it's got the list of the

00:51:05,170 --> 00:51:08,109
container references and you can look in

00:51:06,790 --> 00:51:15,010
the JSON for that it tells you what

00:51:08,109 --> 00:51:17,050
volumes are alive mm-hmm well they

00:51:15,010 --> 00:51:21,970
doctored a doctor garbage collector

00:51:17,050 --> 00:51:24,700
written in perl know for all containers

00:51:21,970 --> 00:51:25,960
i would just use the pearl language to

00:51:24,700 --> 00:51:27,190
write it because i can write it in perl

00:51:25,960 --> 00:51:30,190
a heck of a lot faster than i can do and

00:51:27,190 --> 00:51:33,130
go as a matter of fact you could even

00:51:30,190 --> 00:51:35,290
run that in a container into a minus v

00:51:33,130 --> 00:51:37,000
VAR alive docker and mount it and

00:51:35,290 --> 00:51:39,040
actually have it referenced the thing

00:51:37,000 --> 00:51:40,839
and do its work for that would be you

00:51:39,040 --> 00:51:42,760
could they actually have documentation a

00:51:40,839 --> 00:51:51,340
docker on how to run docker inside

00:51:42,760 --> 00:51:53,260
container so you can and and there are

00:51:51,340 --> 00:51:55,180
there are some if you're trying to test

00:51:53,260 --> 00:51:57,250
things in docker there are times when

00:51:55,180 --> 00:51:59,350
you can minus V the docker in the

00:51:57,250 --> 00:52:00,700
container and test whether your volume

00:51:59,350 --> 00:52:02,020
mounts are doing what you expect to

00:52:00,700 --> 00:52:04,210
without frying the file system outside

00:52:02,020 --> 00:52:05,920
of it so you can actually localize the

00:52:04,210 --> 00:52:19,510
docker effects inside a container to

00:52:05,920 --> 00:52:21,280
test docker mm-hmm and then you push it

00:52:19,510 --> 00:52:22,750
out and that actually is a decent way to

00:52:21,280 --> 00:52:25,120
do it because you can you can isolate

00:52:22,750 --> 00:52:27,820
that that like that the first trick with

00:52:25,120 --> 00:52:30,100
the gin to build the pearl on top of gin

00:52:27,820 --> 00:52:32,590
to push it into something outside and

00:52:30,100 --> 00:52:35,710
then use a minus copy to get it into a

00:52:32,590 --> 00:52:37,510
new image which it's nice because it can

00:52:35,710 --> 00:52:39,220
isolate it it makes it easy to have two

00:52:37,510 --> 00:52:41,170
processes building different versions of

00:52:39,220 --> 00:52:43,210
pearl at the same time without stepping

00:52:41,170 --> 00:52:44,710
on each other I mean that's the nice

00:52:43,210 --> 00:52:46,870
that the real thing about dr. that's

00:52:44,710 --> 00:52:49,000
need is you can isolate the file systems

00:52:46,870 --> 00:52:50,770
and have multiple processes running

00:52:49,000 --> 00:52:53,530
things the other thing that's pretty

00:52:50,770 --> 00:52:55,210
sexy about it is you can you only need

00:52:53,530 --> 00:52:57,220
to have one copy of anything in the

00:52:55,210 --> 00:53:01,060
environment when you're running so you

00:52:57,220 --> 00:53:02,650
can have opted pearl bin pearl and have

00:53:01,060 --> 00:53:04,960
docker containers for 14 different

00:53:02,650 --> 00:53:06,700
versions of pearl but each of them has

00:53:04,960 --> 00:53:09,160
the same absolute path to pearl they all

00:53:06,700 --> 00:53:10,450
have the same absolute config files so

00:53:09,160 --> 00:53:11,980
now you don't have to play the what

00:53:10,450 --> 00:53:14,200
version of my running game to find your

00:53:11,980 --> 00:53:16,180
configuration files to find how you run

00:53:14,200 --> 00:53:22,090
things everything's just one thing it's

00:53:16,180 --> 00:53:27,620
an absolute any other questions yeah

00:53:22,090 --> 00:53:29,680
we're done okay thank you

00:53:27,620 --> 00:53:29,680
you

00:53:36,380 --> 00:53:38,440

YouTube URL: https://www.youtube.com/watch?v=NuRClr-xREc


