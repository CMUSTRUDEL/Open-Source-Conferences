Title: Rafael Almeria - Live Perl
Publication date: 2015-06-16
Playlist: YAPC::NA 2015
Description: 
	Ballroom B - Little America Hotel
Captions: 
	00:00:10,200 --> 00:00:16,330
hello my name is Raphael and I'm going

00:00:14,860 --> 00:00:19,270
to talk about live pearl and this

00:00:16,330 --> 00:00:21,790
basically is talk about the pearl plugin

00:00:19,270 --> 00:00:23,230
for light table some of the things I'm

00:00:21,790 --> 00:00:26,110
going to talk about our how I got

00:00:23,230 --> 00:00:28,960
interested into it and how you can use

00:00:26,110 --> 00:00:37,450
this for live programming and if I have

00:00:28,960 --> 00:00:42,090
time how it works so what is live

00:00:37,450 --> 00:00:44,470
programming to me it's a combination of

00:00:42,090 --> 00:00:48,220
immediate evaluation and immediate

00:00:44,470 --> 00:00:51,130
feedback so you write some code it gets

00:00:48,220 --> 00:00:52,750
evaluated immediately the results the

00:00:51,130 --> 00:00:57,240
data comes back its immediate feedback

00:00:52,750 --> 00:00:57,240
so you have a nice tight feedback loop

00:00:57,780 --> 00:01:03,850
so how did I get interested in this I

00:01:00,840 --> 00:01:05,590
saw a video of a talk by Brett vector a

00:01:03,850 --> 00:01:08,740
couple years ago called inventing our

00:01:05,590 --> 00:01:10,840
principal and in that talk is basically

00:01:08,740 --> 00:01:12,310
talking about how you would find a

00:01:10,840 --> 00:01:15,430
guiding principle for how you do your

00:01:12,310 --> 00:01:18,190
work and so his principal was basically

00:01:15,430 --> 00:01:21,520
to give creators an immediate connection

00:01:18,190 --> 00:01:25,750
to what they're creating and so he had

00:01:21,520 --> 00:01:29,290
many different examples of doing a live

00:01:25,750 --> 00:01:31,979
programming basically just immediately

00:01:29,290 --> 00:01:35,080
you know whenever he touched something

00:01:31,979 --> 00:01:37,600
something immediately would happen so he

00:01:35,080 --> 00:01:40,570
had very very good feedback with what he

00:01:37,600 --> 00:01:41,740
was doing and so live programming was

00:01:40,570 --> 00:01:44,290
one of the main things that I was

00:01:41,740 --> 00:01:46,150
interested in that and then a few years

00:01:44,290 --> 00:01:50,320
later chris granger came out with light

00:01:46,150 --> 00:01:53,110
table light tables in ide that basically

00:01:50,320 --> 00:01:54,850
allows you to do that live coding and it

00:01:53,110 --> 00:02:00,460
has a couple of different editors in it

00:01:54,850 --> 00:02:02,590
so it's got them and emacs and and so

00:02:00,460 --> 00:02:06,250
when that came out he open sourced it

00:02:02,590 --> 00:02:08,470
and he basically made it so that you

00:02:06,250 --> 00:02:11,860
could use closure programming language

00:02:08,470 --> 00:02:15,420
closure which is a variant of Lisp and I

00:02:11,860 --> 00:02:18,270
was learning closure at that time so

00:02:15,420 --> 00:02:20,099
I found it really easy to use light

00:02:18,270 --> 00:02:23,010
table to learn closure because you could

00:02:20,099 --> 00:02:25,170
just type in some you know some simple

00:02:23,010 --> 00:02:28,950
expressions and the result would show up

00:02:25,170 --> 00:02:30,900
so it was just very is it again a very

00:02:28,950 --> 00:02:35,400
tight feedback loop so you could see

00:02:30,900 --> 00:02:37,410
what you were doing and it was great so

00:02:35,400 --> 00:02:38,640
when you open source that he made it

00:02:37,410 --> 00:02:41,430
available so that you could write your

00:02:38,640 --> 00:02:44,700
own plugin initially we just closure and

00:02:41,430 --> 00:02:49,050
I think Python but pretty much everybody

00:02:44,700 --> 00:02:51,989
started writing ones for Ruby and groovy

00:02:49,050 --> 00:02:55,830
and java and and I was really interested

00:02:51,989 --> 00:03:07,590
because having this for pearl so I wrote

00:02:55,830 --> 00:03:09,269
one for pearl so so this is an so you

00:03:07,590 --> 00:03:12,560
basically do anything in here you can

00:03:09,269 --> 00:03:12,560
just do like a hello world

00:03:23,610 --> 00:03:36,750
and it just shows up you can add some

00:03:28,890 --> 00:03:38,280
numbers and they just show up if you had

00:03:36,750 --> 00:03:40,850
some sort of hash that you wanted to

00:03:38,280 --> 00:03:40,850
create

00:03:48,190 --> 00:03:55,150
that just shows up so a little bit more

00:03:51,970 --> 00:03:58,600
complex example is this one where see

00:03:55,150 --> 00:04:03,040
you were wanting to find some elements

00:03:58,600 --> 00:04:06,570
of some HTML or XML you could just

00:04:03,040 --> 00:04:06,570
simply start

00:04:20,680 --> 00:04:25,280
and you get a response back if I wanted

00:04:23,840 --> 00:04:32,960
to find out how many elements there are

00:04:25,280 --> 00:04:38,810
I got to if I wanted to see what one of

00:04:32,960 --> 00:04:41,120
them was I've got a string if I wanted

00:04:38,810 --> 00:04:51,740
to see what some what the text in there

00:04:41,120 --> 00:04:53,840
was I could just do and I get hello so

00:04:51,740 --> 00:05:02,840
just very immediate you know you can

00:04:53,840 --> 00:05:05,780
just see what you're doing so this

00:05:02,840 --> 00:05:09,590
version of the plug-in uses a rebel

00:05:05,780 --> 00:05:12,740
based back end so one of the pitfalls of

00:05:09,590 --> 00:05:16,039
it is that things that are in blocks or

00:05:12,740 --> 00:05:17,840
loop stirs like that you can't really

00:05:16,039 --> 00:05:20,180
dig into it so you can't really see

00:05:17,840 --> 00:05:23,090
what's there so if I were to evaluate

00:05:20,180 --> 00:05:25,340
this I mean you can see with the return

00:05:23,090 --> 00:05:26,750
value of the function call is but you

00:05:25,340 --> 00:05:31,880
can't see anything inside of the

00:05:26,750 --> 00:05:33,889
subroutine but otherwise the environment

00:05:31,880 --> 00:05:40,490
is very helpful for doing simple

00:05:33,889 --> 00:05:44,150
exploratory programming so since that

00:05:40,490 --> 00:05:46,669
was so limiting I decided to write a

00:05:44,150 --> 00:05:49,610
newer version of the plugin that

00:05:46,669 --> 00:05:56,449
basically would allow you to see all the

00:05:49,610 --> 00:06:00,110
data so so this new version basically

00:05:56,449 --> 00:06:02,509
uses the pearls debugger feature and so

00:06:00,110 --> 00:06:06,280
I had to write a debugger that was able

00:06:02,509 --> 00:06:10,930
to grab all the data and then return it

00:06:06,280 --> 00:06:10,930
so let's take a look at that

00:06:15,840 --> 00:06:21,500
I looked at pretty much all the

00:06:18,540 --> 00:06:21,500
debuggers that were out there

00:06:37,770 --> 00:06:44,940
so now I can get all the data inside and

00:06:42,349 --> 00:06:48,050
so kind of a neat feature of this is

00:06:44,940 --> 00:06:52,129
that since I'm capturing all the data

00:06:48,050 --> 00:06:54,810
and it's basically recording the whole

00:06:52,129 --> 00:07:04,289
execution trace a half of the whole

00:06:54,810 --> 00:07:09,750
history so I can go back in time and I

00:07:04,289 --> 00:07:17,370
can go back forward in time so if I were

00:07:09,750 --> 00:07:26,909
you know because i'm recording all the

00:07:17,370 --> 00:07:32,060
data yes i'm recording the whole history

00:07:26,909 --> 00:07:32,060
of the execution burton

00:07:48,240 --> 00:07:59,229
is that a DB h hdb I remember seeing one

00:07:56,590 --> 00:08:02,860
which allowed you to go back a step but

00:07:59,229 --> 00:08:25,360
it basically it went back and recreated

00:08:02,860 --> 00:08:27,639
the debugging session well this is just

00:08:25,360 --> 00:08:29,139
recording the execution trace but you

00:08:27,639 --> 00:08:37,360
can go back and forth because you have

00:08:29,139 --> 00:08:41,610
all the data right I mean you could

00:08:37,360 --> 00:08:41,610
change something re-evaluate it and then

00:08:41,640 --> 00:08:55,110
so it's similar but um so right mm-hmm

00:08:57,810 --> 00:09:01,410
so um

00:09:04,940 --> 00:09:11,360
so the the rebel based 1g basically

00:09:08,510 --> 00:09:15,650
captures all of the code that's in the

00:09:11,360 --> 00:09:19,070
editor and it feeds it to a perl module

00:09:15,650 --> 00:09:22,790
which then uses ppi to parse it parse it

00:09:19,070 --> 00:09:25,040
and then it uses a developer apple to

00:09:22,790 --> 00:09:29,930
evaluate each individual line and then

00:09:25,040 --> 00:09:34,610
it returns that data the newer debugger

00:09:29,930 --> 00:09:38,330
one basically sends the name of the file

00:09:34,610 --> 00:09:40,640
to this new debugger that I wrote and

00:09:38,330 --> 00:09:42,920
then launched is kind of a client-server

00:09:40,640 --> 00:09:45,290
connection where it uses a socket in

00:09:42,920 --> 00:09:48,220
between them it steps through each line

00:09:45,290 --> 00:09:52,070
and capture and then the server side

00:09:48,220 --> 00:10:01,910
looks at using pat walker records all

00:09:52,070 --> 00:10:04,240
the variables and sends them back any

00:10:01,910 --> 00:10:04,240
questions

00:10:06,779 --> 00:10:13,149
so you can get light table right here

00:10:08,889 --> 00:10:17,529
and you can get the plug-in from this

00:10:13,149 --> 00:10:27,339
github URL but in light table it has a

00:10:17,529 --> 00:10:31,509
plugin manager so CC right here I've got

00:10:27,339 --> 00:10:35,079
it installed but if you go to the

00:10:31,509 --> 00:10:37,389
available pull button you can then type

00:10:35,079 --> 00:10:43,379
in the name like pearl and it would show

00:10:37,389 --> 00:10:43,379
up its built-in yeah

00:10:46,910 --> 00:10:53,010
um it just basically does that it you

00:10:51,570 --> 00:10:58,740
mean like documentation or something

00:10:53,010 --> 00:11:00,060
yeah um it's basically it I would like

00:10:58,740 --> 00:11:02,660
to add something like you know in line

00:11:00,060 --> 00:11:02,660
pot or something

00:11:11,970 --> 00:11:23,399
for playing around with this stuff yeah

00:11:14,089 --> 00:11:25,439
it's I've never liked like creating

00:11:23,399 --> 00:11:28,230
watches in the buggers it's always been

00:11:25,439 --> 00:11:31,439
kind of painful like you know each

00:11:28,230 --> 00:11:33,420
variable able to create one and then and

00:11:31,439 --> 00:11:41,069
if you get out of it get back in then

00:11:33,420 --> 00:11:45,449
you have to create more watches in the

00:11:41,069 --> 00:11:48,829
debugger version or well in the rubble

00:11:45,449 --> 00:11:48,829
when it's just you know since you can't

00:12:00,589 --> 00:12:16,529
ya see I equals two equals three x

00:12:11,240 --> 00:12:19,250
equals 4 did you see that was that was

00:12:16,529 --> 00:12:19,250
that you faster

00:12:26,320 --> 00:12:35,190
so there's little flaw here we're on the

00:12:28,990 --> 00:12:40,440
4 line it's basically stuck to its bug

00:12:35,190 --> 00:12:40,440
it's very experimental I haven't pushed

00:13:22,500 --> 00:13:25,500
okay

00:13:32,299 --> 00:13:40,980
um I think it's basically a display area

00:13:37,399 --> 00:13:43,709
which is why I kind of for this case I

00:13:40,980 --> 00:13:45,329
just kind of throw it in there but I

00:13:43,709 --> 00:13:51,209
mean you could I'm sure you could hack

00:13:45,329 --> 00:13:53,459
it to do what would not light table it

00:13:51,209 --> 00:13:56,369
just the plug-in itself you probably

00:13:53,459 --> 00:14:00,209
want to put click handlers there so you

00:13:56,369 --> 00:14:06,720
could you know this is just yeah it's

00:14:00,209 --> 00:14:11,839
javascript and HTML and CSS chris

00:14:06,720 --> 00:14:11,839
granger built this in node and chrome

00:15:37,120 --> 00:15:41,940
so is what's happening there

00:15:42,820 --> 00:15:53,140
pardon right that's why it does this

00:16:04,839 --> 00:16:21,709
should do anything that pearl does it

00:16:06,890 --> 00:16:32,680
mean just about I just want to ram this

00:16:21,709 --> 00:16:32,680
online you mean like this

00:16:51,459 --> 00:17:04,329
so yes this is the devel Ruppel let's

00:17:00,999 --> 00:17:06,699
see the goods happens it's executing

00:17:04,329 --> 00:17:12,669
things employee context I mean this

00:17:06,699 --> 00:17:17,309
context which could cause alternate

00:17:12,669 --> 00:17:17,309
behavior if somebody has used

00:17:24,020 --> 00:17:31,850
I just need a check mark mm-hmm um it's

00:17:30,590 --> 00:17:34,340
probably still like a bug or something

00:17:31,850 --> 00:17:38,260
because it's this version is very

00:17:34,340 --> 00:17:38,260
experimental pardon

00:17:56,580 --> 00:18:06,660
you say my term is equal to now to be

00:18:00,300 --> 00:18:06,660
because your contacts

00:18:20,530 --> 00:18:35,790
or you mean how to do the live

00:18:30,310 --> 00:18:39,670
programming there's a new control space

00:18:35,790 --> 00:18:47,890
the ink type in pearl the first option

00:18:39,670 --> 00:18:50,260
should be toggle in store apple mode no

00:18:47,890 --> 00:18:52,180
I am I've been hacking on a different

00:18:50,260 --> 00:18:53,530
copy but I intend to integrate it back

00:18:52,180 --> 00:18:56,260
in and have like an option where you

00:18:53,530 --> 00:18:58,570
could toggle between a repligen or debug

00:18:56,260 --> 00:19:00,460
debug reversion I might have like a

00:18:58,570 --> 00:19:03,240
little button on the screen suit it's

00:19:00,460 --> 00:19:03,240
easier to access

00:19:17,320 --> 00:19:26,299
return string for else if is equal to

00:19:23,059 --> 00:19:29,799
zero return the strings else it just

00:19:26,299 --> 00:19:35,990
melts return that we will be off our

00:19:29,799 --> 00:19:38,529
list so sign Montenegro canary floor

00:19:35,990 --> 00:19:38,529
look at

00:19:44,190 --> 00:19:56,099
so this is just the debugger so

00:20:11,650 --> 00:20:26,110
oh you um you can either get out of it

00:20:21,130 --> 00:20:29,860
and get back in well their thing to do

00:20:26,110 --> 00:20:31,360
is you would want to click on you know

00:20:29,860 --> 00:20:32,740
reload behaviors and stuff but it's

00:20:31,360 --> 00:20:35,700
probably just easier just to get back

00:20:32,740 --> 00:20:35,700
out get back in

00:20:42,759 --> 00:20:46,019
any other questions

00:20:51,390 --> 00:20:55,260
alright thanks

00:20:55,270 --> 00:20:57,330
you

00:21:06,809 --> 00:21:08,870

YouTube URL: https://www.youtube.com/watch?v=nZHWVAPm9IA


