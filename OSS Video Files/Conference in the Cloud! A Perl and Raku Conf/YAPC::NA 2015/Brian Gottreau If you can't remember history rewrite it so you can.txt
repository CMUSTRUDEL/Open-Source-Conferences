Title: Brian Gottreau If you can't remember history rewrite it so you can
Publication date: 2015-06-16
Playlist: YAPC::NA 2015
Description: 
	
Captions: 
	00:00:03,830 --> 00:00:08,550
this is my first presentation at any

00:00:06,270 --> 00:00:12,590
like professional event or anything

00:00:08,550 --> 00:00:18,090
really so please enjoy this train wreck

00:00:12,590 --> 00:00:23,580
as I so so so gracefully ram into you

00:00:18,090 --> 00:00:24,449
and utter devastation anywho the name of

00:00:23,580 --> 00:00:26,970
the talk is if you can't remember

00:00:24,449 --> 00:00:29,249
history write it so he can that was my

00:00:26,970 --> 00:00:31,349
best the cleverest one I could come up

00:00:29,249 --> 00:00:33,930
with also please let me know if I'm not

00:00:31,349 --> 00:00:35,130
talking enough into the mic I don't want

00:00:33,930 --> 00:00:40,590
to do the brosky thing and remove the

00:00:35,130 --> 00:00:42,720
whole arm anyhoo about me I'm a sweating

00:00:40,590 --> 00:00:44,340
fat man standing in front of you but uh

00:00:42,720 --> 00:00:46,440
my name is Brian got true and I worked

00:00:44,340 --> 00:00:48,840
the Minnesota population center at the

00:00:46,440 --> 00:00:52,490
university of minnesota I'm an assistant

00:00:48,840 --> 00:00:54,870
minister ater there and a key thing the

00:00:52,490 --> 00:00:56,160
Minnesota population center does is to

00:00:54,870 --> 00:00:59,060
disseminate census data after

00:00:56,160 --> 00:01:01,950
harmonizing it across space and time

00:00:59,060 --> 00:01:04,199
something like Doctor Who and actually

00:01:01,950 --> 00:01:06,780
in the early 90s originally we just get

00:01:04,199 --> 00:01:09,030
data and I was ftp doubt and then

00:01:06,780 --> 00:01:12,210
sometime in the early to mid-90s there's

00:01:09,030 --> 00:01:13,620
actually a pearl cgi application to help

00:01:12,210 --> 00:01:15,450
people like pick what day they wanted

00:01:13,620 --> 00:01:17,070
then at some point that was changed into

00:01:15,450 --> 00:01:19,680
java and then at some point that was

00:01:17,070 --> 00:01:24,420
changed in the Ruby and it may change

00:01:19,680 --> 00:01:27,540
again also at the MPC we have like about

00:01:24,420 --> 00:01:29,580
like about a hundred command-line chilis

00:01:27,540 --> 00:01:31,440
written in perl that the researchers who

00:01:29,580 --> 00:01:34,110
are generally social scientists and

00:01:31,440 --> 00:01:36,450
perhaps some statisticians use on a

00:01:34,110 --> 00:01:38,040
daily basis and also even some of our

00:01:36,450 --> 00:01:41,479
social scientists are writing pearl

00:01:38,040 --> 00:01:43,500
which is pretty interesting and

00:01:41,479 --> 00:01:46,890
supporting these men I utilities we have

00:01:43,500 --> 00:01:50,970
some modules so we actually have some

00:01:46,890 --> 00:01:54,600
dark Sipan or dark pan there anywho what

00:01:50,970 --> 00:01:57,450
is history history is everything that

00:01:54,600 --> 00:02:01,380
has led up to now so forget it's all the

00:01:57,450 --> 00:02:03,540
ancestors of a branch or commit that

00:02:01,380 --> 00:02:05,430
you're looking at so this is the chain

00:02:03,540 --> 00:02:07,020
of commits but your current commits

00:02:05,430 --> 00:02:09,420
parents and all their parents and so on

00:02:07,020 --> 00:02:12,870
back to the beginning or beginnings if

00:02:09,420 --> 00:02:16,590
you have multiple and Kim it's can share

00:02:12,870 --> 00:02:19,560
history so what is a commit

00:02:16,590 --> 00:02:23,730
and a commit basically consists of a

00:02:19,560 --> 00:02:25,349
tree so specified by a sha-1 checksum or

00:02:23,730 --> 00:02:29,640
hash which is basically district

00:02:25,349 --> 00:02:32,489
director e of files which in get disc

00:02:29,640 --> 00:02:34,379
all are called blobs and you also have

00:02:32,489 --> 00:02:36,060
author info and committer info which is

00:02:34,379 --> 00:02:37,470
name email address and when the

00:02:36,060 --> 00:02:39,569
committing and authoring was done and

00:02:37,470 --> 00:02:41,970
then the commit message saying what you

00:02:39,569 --> 00:02:44,190
did or why you did it hopefully or just

00:02:41,970 --> 00:02:47,030
commit message it says whatever as I

00:02:44,190 --> 00:02:49,560
often do and then any number of parents

00:02:47,030 --> 00:02:51,299
originally get you can only have 16

00:02:49,560 --> 00:02:52,980
parents but a 2008 they eliminate of

00:02:51,299 --> 00:02:56,640
that so you can have as many as you want

00:02:52,980 --> 00:03:00,720
30 or 45 hundred and it commits a name

00:02:56,640 --> 00:03:03,840
is just the sha-1 hash of basically all

00:03:00,720 --> 00:03:08,129
those parts there's like also length and

00:03:03,840 --> 00:03:11,660
phone things so if for a blob also has a

00:03:08,129 --> 00:03:15,360
sha-1 hash but it is not merely the

00:03:11,660 --> 00:03:17,160
sha-1 some of that file because there's

00:03:15,360 --> 00:03:25,980
also just baked see a length and then I

00:03:17,160 --> 00:03:30,329
think a null byte and if any of these

00:03:25,980 --> 00:03:33,930
parts change the sha-1 the Shah will

00:03:30,329 --> 00:03:36,090
also change so that means even if any

00:03:33,930 --> 00:03:39,269
parents change you will change so it was

00:03:36,090 --> 00:03:40,590
so if you have your head commit like 10

00:03:39,269 --> 00:03:42,720
years ago you miss felt someone's name

00:03:40,590 --> 00:03:44,220
and you change that that will cause your

00:03:42,720 --> 00:03:47,669
current commit to have a different shot

00:03:44,220 --> 00:03:50,400
once um and so that basically means you

00:03:47,669 --> 00:03:54,389
can't change commits but you can change

00:03:50,400 --> 00:03:56,819
a commit ish which the get man page or

00:03:54,389 --> 00:03:58,200
view man get glossary it'll give you

00:03:56,819 --> 00:04:00,090
this a committee issues the commit

00:03:58,200 --> 00:04:01,829
object or an object that can be

00:04:00,090 --> 00:04:08,849
recursively to reference to a commit

00:04:01,829 --> 00:04:11,099
object yeah that's how I thought it used

00:04:08,849 --> 00:04:16,349
to make sense perhaps I'm sweating to

00:04:11,099 --> 00:04:19,200
perfuse thing so so basically it's a

00:04:16,349 --> 00:04:20,669
commit object or a tag object that that

00:04:19,200 --> 00:04:22,049
then points to a commit or points to

00:04:20,669 --> 00:04:25,500
another tag then eventually gets to

00:04:22,049 --> 00:04:27,900
commit but similar to commit ish is you

00:04:25,500 --> 00:04:29,670
have refs which i'm not sure if they're

00:04:27,900 --> 00:04:33,390
technically committed or not

00:04:29,670 --> 00:04:35,490
but uh that's also what the man get

00:04:33,390 --> 00:04:38,430
glossary says which is definitely not

00:04:35,490 --> 00:04:39,780
super helpful but basically breasts are

00:04:38,430 --> 00:04:43,530
human readable names that point to

00:04:39,780 --> 00:04:45,900
objects or other references and so you

00:04:43,530 --> 00:04:47,190
can change a ref in that the human

00:04:45,900 --> 00:04:49,560
readable name will stay the same like

00:04:47,190 --> 00:04:52,260
master your master branch but the Shah

00:04:49,560 --> 00:04:57,990
some it points to will change underneath

00:04:52,260 --> 00:05:01,010
and that that's basically just yeah this

00:04:57,990 --> 00:05:03,990
wasn't master it's funny to huffing and

00:05:01,010 --> 00:05:05,460
this changing of what the name points to

00:05:03,990 --> 00:05:07,290
is make sure what happens every time you

00:05:05,460 --> 00:05:09,240
make a commit because a new commit

00:05:07,290 --> 00:05:11,580
object traded well the files pointed to

00:05:09,240 --> 00:05:13,740
it and you from it message and roughly

00:05:11,580 --> 00:05:16,320
the current time and it makes a new

00:05:13,740 --> 00:05:20,400
commit and then masters updated to point

00:05:16,320 --> 00:05:24,810
to that new commit so on to rewriting of

00:05:20,400 --> 00:05:28,290
the history so since commits can't

00:05:24,810 --> 00:05:31,200
really be changed the only references

00:05:28,290 --> 00:05:32,760
can really what rewriting history is is

00:05:31,200 --> 00:05:35,430
making new comments based off old

00:05:32,760 --> 00:05:37,500
commits which could be making new trees

00:05:35,430 --> 00:05:39,420
which are directors and files based off

00:05:37,500 --> 00:05:41,640
old things you know either removing

00:05:39,420 --> 00:05:45,060
files from a tree or change the content

00:05:41,640 --> 00:05:47,880
of a blob and then updating various tags

00:05:45,060 --> 00:05:50,070
and rest at points of these things and a

00:05:47,880 --> 00:05:52,230
lot of the downsides the comfort

00:05:50,070 --> 00:05:53,970
rewriting history stem from the changing

00:05:52,230 --> 00:05:55,710
of tags and branches because it makes

00:05:53,970 --> 00:05:58,680
collaborate your collaboration difficult

00:05:55,710 --> 00:06:00,270
because it's possible for two people to

00:05:58,680 --> 00:06:02,070
have master that point of complete

00:06:00,270 --> 00:06:05,360
different things and so pulling and

00:06:02,070 --> 00:06:10,610
pushes and merges just just train wreck

00:06:05,360 --> 00:06:10,610
much like this talk bringing it all back

00:06:11,870 --> 00:06:17,730
also people will be mad at you the

00:06:14,490 --> 00:06:19,500
online there is a flowchart of rewrite

00:06:17,730 --> 00:06:21,030
by when you should or shouldn't rewrite

00:06:19,500 --> 00:06:23,010
history and how you should do so and one

00:06:21,030 --> 00:06:24,720
of the questions is if it's public how

00:06:23,010 --> 00:06:31,320
many people downstream of you and is it

00:06:24,720 --> 00:06:36,510
enough to form a lynch mob and about a

00:06:31,320 --> 00:06:39,930
year ago is that readable to anyone ok

00:06:36,510 --> 00:06:42,210
these are front people so somebody did

00:06:39,930 --> 00:06:43,160
something I don't know who but then this

00:06:42,210 --> 00:06:45,950
happened

00:06:43,160 --> 00:06:48,560
we're Ricardo said he rewound bleed one

00:06:45,950 --> 00:06:51,260
commit which basically just changed

00:06:48,560 --> 00:06:52,760
bleed just one commits it didn't

00:06:51,260 --> 00:06:55,070
actually rewrite any ultimate or

00:06:52,760 --> 00:06:59,810
anything just step back one from that

00:06:55,070 --> 00:07:01,880
merge and after this there's I seem to

00:06:59,810 --> 00:07:04,460
remember very contentious discussion and

00:07:01,880 --> 00:07:06,710
now lots of all rah-rah but reading back

00:07:04,460 --> 00:07:08,750
it wasn't really that it's just like

00:07:06,710 --> 00:07:13,280
yeah that was bad and hope that doesn't

00:07:08,750 --> 00:07:16,150
happen again but sometimes there are

00:07:13,280 --> 00:07:19,070
things and a repo that must not be there

00:07:16,150 --> 00:07:21,770
like passwords is improperly formatted

00:07:19,070 --> 00:07:24,140
over there on the right or SSL or SSH

00:07:21,770 --> 00:07:27,770
keys which just should never be in a

00:07:24,140 --> 00:07:30,650
repo ever if a project had passed

00:07:27,770 --> 00:07:32,690
Prime's from sorry if a project has

00:07:30,650 --> 00:07:34,520
passwords in a private repo then things

00:07:32,690 --> 00:07:37,940
are sort of okayish because they can be

00:07:34,520 --> 00:07:39,350
removed before you make it public but

00:07:37,940 --> 00:07:42,470
they shouldn't be in the first place so

00:07:39,350 --> 00:07:45,080
that's just bad as an example there's a

00:07:42,470 --> 00:07:48,080
project at work where that we have a

00:07:45,080 --> 00:07:49,880
github enterprise system and there's a

00:07:48,080 --> 00:07:51,590
private repo with a rails app in it and

00:07:49,880 --> 00:07:54,020
there's a database camel file with

00:07:51,590 --> 00:07:56,870
database passwords that's okay ish

00:07:54,020 --> 00:07:58,940
because I'll private developer had a

00:07:56,870 --> 00:08:01,370
check out of the code as one would do

00:07:58,940 --> 00:08:03,530
being a developer but then his laptop

00:08:01,370 --> 00:08:05,510
was stolen that's no so now all those

00:08:03,530 --> 00:08:08,330
passwords just out there sorting the

00:08:05,510 --> 00:08:10,370
ether I doubt anyone who's going to come

00:08:08,330 --> 00:08:13,010
across a laptop will be unlike use of

00:08:10,370 --> 00:08:14,510
them but it still just worrisome so even

00:08:13,010 --> 00:08:19,820
if everything is private not everything

00:08:14,510 --> 00:08:22,010
is private still also if you're in the

00:08:19,820 --> 00:08:23,960
case or you have secrets in your repo

00:08:22,010 --> 00:08:25,010
and its public the first thing you

00:08:23,960 --> 00:08:26,930
should do is just assume everything's

00:08:25,010 --> 00:08:28,880
everyone's seen everything and replaced

00:08:26,930 --> 00:08:32,630
all your passwords an ssh keys or

00:08:28,880 --> 00:08:34,729
whatnot because the damage is done and

00:08:32,630 --> 00:08:39,340
if the damage is done it actually might

00:08:34,729 --> 00:08:39,340
not be worth it to rewrite the history

00:08:40,030 --> 00:08:43,150
pardon me

00:08:45,300 --> 00:08:50,649
in addition to things that must not be

00:08:48,160 --> 00:08:55,959
there they're also things that should

00:08:50,649 --> 00:08:58,449
not be there like binary files also

00:08:55,959 --> 00:09:03,000
unnecessarily to the right or just very

00:08:58,449 --> 00:09:03,000
large files and also miscellaneous junk

00:09:05,010 --> 00:09:09,730
for the binary files get doesn't really

00:09:07,329 --> 00:09:12,760
handle the revisions between binary

00:09:09,730 --> 00:09:15,899
files well unless our filters and things

00:09:12,760 --> 00:09:18,100
in place to let that happen and also

00:09:15,899 --> 00:09:21,209
very large files just make cloning and

00:09:18,100 --> 00:09:24,279
other operations a terrible pain and

00:09:21,209 --> 00:09:25,720
then just the other junk is just just

00:09:24,279 --> 00:09:28,089
just just some knock just like if you

00:09:25,720 --> 00:09:29,410
had like food IPL dot back for no good

00:09:28,089 --> 00:09:32,500
reason because it's all ready to get rip

00:09:29,410 --> 00:09:36,250
Oh repo or you had derivatives of source

00:09:32,500 --> 00:09:38,199
files that you don't need there and then

00:09:36,250 --> 00:09:40,690
there's a there's also things that you

00:09:38,199 --> 00:09:42,399
just don't want there like dumb changes

00:09:40,690 --> 00:09:48,339
that got merged in or terrible commit

00:09:42,399 --> 00:09:50,620
messages like that are just whatever so

00:09:48,339 --> 00:09:52,870
one tool that comes would get to rewrite

00:09:50,620 --> 00:09:56,010
history is get filter branch and the

00:09:52,870 --> 00:10:03,610
main page has it rewrites branches and

00:09:56,010 --> 00:10:06,069
this is the top section of it so

00:10:03,610 --> 00:10:07,870
basically how it works is is you if you

00:10:06,069 --> 00:10:11,050
don't specify a revision list which is

00:10:07,870 --> 00:10:13,959
the last option there Gill filter branch

00:10:11,050 --> 00:10:15,550
will basically check out makes you'll

00:10:13,959 --> 00:10:17,889
figure out what all commits from the

00:10:15,550 --> 00:10:20,170
head all the way back to all the answers

00:10:17,889 --> 00:10:21,459
and check them out one by one apply any

00:10:20,170 --> 00:10:23,769
of the filters you have on it like the

00:10:21,459 --> 00:10:25,860
tree filter index filter subdirectory

00:10:23,769 --> 00:10:28,959
filter I'll talk about some of those and

00:10:25,860 --> 00:10:30,970
then recreate commits with that new

00:10:28,959 --> 00:10:34,620
information with all the previous

00:10:30,970 --> 00:10:34,620
information that hasn't been filtered

00:10:35,310 --> 00:10:42,810
and if you don't specify a revision list

00:10:39,430 --> 00:10:45,459
it only it only works from head and back

00:10:42,810 --> 00:10:47,560
I'll need those ancestors so e if you're

00:10:45,459 --> 00:10:50,380
on master and there's a topic branch and

00:10:47,560 --> 00:10:51,939
you don't specify a revision of other

00:10:50,380 --> 00:10:54,279
branch of those other solid branches

00:10:51,939 --> 00:10:56,170
then those will not be rewritten

00:10:54,279 --> 00:10:58,329
and then you're in a terrible state

00:10:56,170 --> 00:11:07,589
where you have half rear in things and

00:10:58,329 --> 00:11:07,589
it's a nightmare much like this a

00:11:10,769 --> 00:11:14,589
special revision list you can use as

00:11:13,300 --> 00:11:16,509
dash dash all which basically means

00:11:14,589 --> 00:11:18,999
every revision everywhere which is

00:11:16,509 --> 00:11:23,559
basically all I've ever used good

00:11:18,999 --> 00:11:25,629
simplest the first example is moving

00:11:23,559 --> 00:11:27,309
everything out of a subdirectory at my

00:11:25,629 --> 00:11:30,279
job we have been migrating several

00:11:27,309 --> 00:11:34,649
things from svn to get and one of the

00:11:30,279 --> 00:11:36,430
teams migrated everything but then every

00:11:34,649 --> 00:11:39,240
everything was underneath a rails

00:11:36,430 --> 00:11:41,529
directory was just a suboptimal because

00:11:39,240 --> 00:11:44,529
he got a CD to that director for no good

00:11:41,529 --> 00:11:47,709
reason so a developer decided to fix

00:11:44,529 --> 00:11:49,420
that and excuse me and moved everything

00:11:47,709 --> 00:11:55,629
out of the rails directory and committed

00:11:49,420 --> 00:11:56,740
it is that one shade there is that one

00:11:55,629 --> 00:12:00,550
shade there that supposed to be like a

00:11:56,740 --> 00:12:04,809
background flat and and that did what he

00:12:00,550 --> 00:12:07,149
wanted to do sorta except that if you

00:12:04,809 --> 00:12:09,430
wanted to do get log follow on I mean

00:12:07,149 --> 00:12:11,529
git log and then specify file to see all

00:12:09,430 --> 00:12:13,870
provisions you always have to put dash

00:12:11,529 --> 00:12:16,870
dash follow to see it after through the

00:12:13,870 --> 00:12:18,610
move also anything like git bisect well

00:12:16,870 --> 00:12:19,689
we'll break or you'll have to work

00:12:18,610 --> 00:12:23,470
around the fact that everything moved

00:12:19,689 --> 00:12:29,059
halfway and so it's just it's it's not

00:12:23,470 --> 00:12:38,389
great probably

00:12:29,059 --> 00:12:39,679
I can't really I I can't comment too

00:12:38,389 --> 00:12:42,709
much about commit messages because mine

00:12:39,679 --> 00:12:44,059
are not great course mine are normally

00:12:42,709 --> 00:12:45,769
just for personal things so it doesn't

00:12:44,059 --> 00:12:48,469
really matter anywho what he could have

00:12:45,769 --> 00:12:50,929
done is this which would basically a get

00:12:48,469 --> 00:12:54,079
filter branch with subdirectory filter

00:12:50,929 --> 00:12:56,029
which all it does is for each check out

00:12:54,079 --> 00:12:57,919
it takes everything in that subdirectory

00:12:56,029 --> 00:12:59,719
and moves into the base directory and

00:12:57,919 --> 00:13:03,019
then removes that direct subdirectory it

00:12:59,719 --> 00:13:04,519
should now be empty and you feel like it

00:13:03,019 --> 00:13:08,209
you can see here that there's a tag name

00:13:04,519 --> 00:13:10,609
filter which takes all if you don't

00:13:08,209 --> 00:13:13,039
specify a tag name filter then all your

00:13:10,609 --> 00:13:15,039
tag objects will not be rewritten which

00:13:13,039 --> 00:13:17,179
for a project at work was once done and

00:13:15,039 --> 00:13:19,519
then things were being worked on and

00:13:17,179 --> 00:13:22,069
then we realized every release like

00:13:19,519 --> 00:13:24,259
release 38 release 39 all the tags point

00:13:22,069 --> 00:13:27,279
to the same place somehow I don't think

00:13:24,259 --> 00:13:32,719
that was that the spot if nightmare

00:13:27,279 --> 00:13:34,609
nightmare and here the the the filter

00:13:32,719 --> 00:13:35,959
for the tag names is merely cat so it

00:13:34,609 --> 00:13:39,439
doesn't do any sort of filtering at all

00:13:35,959 --> 00:13:42,169
which is normally sufficient however

00:13:39,439 --> 00:13:45,049
since he did not do that or perhaps I

00:13:42,169 --> 00:13:49,369
stray they did not do that one could now

00:13:45,049 --> 00:13:52,759
do this which could theoretically work

00:13:49,369 --> 00:13:55,189
but it may not work given I know that

00:13:52,759 --> 00:13:57,349
there are some weird in the svn to get

00:13:55,189 --> 00:13:59,149
conversion there so some weird branches

00:13:57,349 --> 00:14:01,039
where things are outside the rails

00:13:59,149 --> 00:14:04,759
directory in which guy is this since

00:14:01,039 --> 00:14:08,659
doesn't have dash F in my like feta so

00:14:04,759 --> 00:14:11,359
this command is fragile but it generally

00:14:08,659 --> 00:14:12,559
will work and if you wanted to make it

00:14:11,359 --> 00:14:14,359
non fragile and said it's having this

00:14:12,559 --> 00:14:16,249
get move in there you could write a

00:14:14,359 --> 00:14:18,469
small shell script perl script that

00:14:16,249 --> 00:14:19,669
checked everything made sure exactly

00:14:18,469 --> 00:14:25,369
what was there and wasn't there and then

00:14:19,669 --> 00:14:29,869
very meticulously move things second

00:14:25,369 --> 00:14:33,919
example are living passwords at just the

00:14:29,869 --> 00:14:36,019
final example to III hope you all wanted

00:14:33,919 --> 00:14:38,029
to have some free time before the next

00:14:36,019 --> 00:14:39,650
talk because that's what you're going to

00:14:38,029 --> 00:14:45,660
get

00:14:39,650 --> 00:14:49,200
so so let's say we have a Davis gamma

00:14:45,660 --> 00:14:52,590
like that with some passwords in it one

00:14:49,200 --> 00:14:56,700
thing we do is use a tree filter like

00:14:52,590 --> 00:14:59,460
this which uses a purl one liner which

00:14:56,700 --> 00:15:01,140
should work ok as long as the database

00:14:59,460 --> 00:15:02,840
camel file doesn't move or there's not

00:15:01,140 --> 00:15:06,900
more than one database camel file

00:15:02,840 --> 00:15:08,970
actually one project has like forty

00:15:06,900 --> 00:15:10,830
different database EML files and then

00:15:08,970 --> 00:15:12,780
the appointment process it symlinks to

00:15:10,830 --> 00:15:16,080
the current one so this would not be

00:15:12,780 --> 00:15:18,630
sufficient but it basically just removes

00:15:16,080 --> 00:15:21,570
whatever's after the password colon in

00:15:18,630 --> 00:15:23,640
the file and you can see there's a prune

00:15:21,570 --> 00:15:26,250
empty there which when you rewrite

00:15:23,640 --> 00:15:28,710
history if any commit doesn't change any

00:15:26,250 --> 00:15:31,530
files then prune empty would remove it

00:15:28,710 --> 00:15:32,880
because for example if you had a commit

00:15:31,530 --> 00:15:35,550
that was just like I made the password

00:15:32,880 --> 00:15:38,550
more secure by changing secret to seigar

00:15:35,550 --> 00:15:40,680
123 that commits it after removing

00:15:38,550 --> 00:15:43,250
passwords it's useless so prone empty

00:15:40,680 --> 00:15:43,250
would remove that

00:15:48,019 --> 00:15:53,360
one problem with this is it's very

00:15:50,529 --> 00:15:54,319
inefficient in the same way tree filter

00:15:53,360 --> 00:15:56,929
is always an efficient because for every

00:15:54,319 --> 00:15:59,239
commit it has to check out entirety

00:15:56,929 --> 00:16:02,269
other repo and then do stuff to it and

00:15:59,239 --> 00:16:03,559
then shove it all back in and if you

00:16:02,269 --> 00:16:06,019
have 100 commits in a row where a

00:16:03,559 --> 00:16:07,220
database ammo is not modified at all you

00:16:06,019 --> 00:16:10,489
just redoing those work over and over

00:16:07,220 --> 00:16:11,629
and over or if you have a repo we're all

00:16:10,489 --> 00:16:13,549
the files when they're checked out is

00:16:11,629 --> 00:16:17,239
about a gigabyte then that was just

00:16:13,549 --> 00:16:21,739
going to take forever so some people

00:16:17,239 --> 00:16:27,319
somewhere made a thing called the bfg

00:16:21,739 --> 00:16:29,209
repo cleaner and I know that's a tomb I

00:16:27,319 --> 00:16:31,939
think reference or perhaps earlier I

00:16:29,209 --> 00:16:35,179
don't know it's very close my initials

00:16:31,939 --> 00:16:36,470
and it is java based I think things

00:16:35,179 --> 00:16:41,329
actually been in Scala but runs on the

00:16:36,470 --> 00:16:42,589
JVM and what it does is that instead of

00:16:41,329 --> 00:16:45,110
checking everything out and doing stuff

00:16:42,589 --> 00:16:50,799
with it it just goes to all the get

00:16:45,110 --> 00:16:53,119
objects directly and mangle them so

00:16:50,799 --> 00:16:55,009
essentially will go through go through

00:16:53,119 --> 00:16:57,319
all the commits and if you have a

00:16:55,009 --> 00:16:58,999
certain filters on turn commits it'll

00:16:57,319 --> 00:17:00,439
say I'll rewrite those and then I'll

00:16:58,999 --> 00:17:02,209
find the tree object in that commit and

00:17:00,439 --> 00:17:04,520
then rewrite that tree object if you

00:17:02,209 --> 00:17:08,240
want to remove any file like that's like

00:17:04,520 --> 00:17:10,579
test data huge it will modify the tree

00:17:08,240 --> 00:17:13,339
object or you'll also modifying the

00:17:10,579 --> 00:17:18,079
blobs in that tree like like a base camp

00:17:13,339 --> 00:17:20,569
will file it can rewrite those but one

00:17:18,079 --> 00:17:24,409
thing that does is that each blog has a

00:17:20,569 --> 00:17:26,360
sha some checksum so if it sees the file

00:17:24,409 --> 00:17:28,760
or blob with that checks on hansel it

00:17:26,360 --> 00:17:31,159
once and that's it doesn't do it again

00:17:28,760 --> 00:17:32,630
doesn't doing it over and over also

00:17:31,159 --> 00:17:35,120
there's no checking out of things so

00:17:32,630 --> 00:17:38,210
there's no just no io constantly for no

00:17:35,120 --> 00:17:41,179
good reason and also it's able to do

00:17:38,210 --> 00:17:43,340
this in parallel because it can look at

00:17:41,179 --> 00:17:45,020
you know you have 16 process 16

00:17:43,340 --> 00:17:48,590
different blobs and i'll be rewriting

00:17:45,020 --> 00:17:51,860
the same time and i believe it's

00:17:48,590 --> 00:17:54,350
actually recommended in the get filter

00:17:51,860 --> 00:17:56,690
branch man page at the bottom they

00:17:54,350 --> 00:17:59,240
recommend using this because it's faster

00:17:56,690 --> 00:18:01,400
and better and such but it doesn't have

00:17:59,240 --> 00:18:10,010
all the flexibility of

00:18:01,400 --> 00:18:13,390
get filter branch and so one of the

00:18:10,010 --> 00:18:16,190
options to be FG is replaced text

00:18:13,390 --> 00:18:19,910
generally you can just supply a file

00:18:16,190 --> 00:18:22,070
with one each line of something you want

00:18:19,910 --> 00:18:24,320
removed and by default it's replaced

00:18:22,070 --> 00:18:28,100
with triple asterisk remove triple

00:18:24,320 --> 00:18:30,500
asterisk or if you want be fancy instead

00:18:28,100 --> 00:18:32,210
of plain text you can put reg ex colon

00:18:30,500 --> 00:18:34,460
and then put a regular question there as

00:18:32,210 --> 00:18:37,040
I have done and then double equals

00:18:34,460 --> 00:18:40,400
greater than then the texture replace it

00:18:37,040 --> 00:18:43,630
with and running this it does

00:18:40,400 --> 00:18:47,270
essentially with the previous previous

00:18:43,630 --> 00:18:50,930
get filter branch tree filter did but

00:18:47,270 --> 00:18:53,780
much more quickly one of the features of

00:18:50,930 --> 00:18:55,940
bfg repo is that it assumes your current

00:18:53,780 --> 00:18:57,860
has yeah this is this concept of

00:18:55,940 --> 00:19:00,170
protected blobs which you see there with

00:18:57,860 --> 00:19:02,090
no blob protection it assumes that your

00:19:00,170 --> 00:19:05,180
head commit and any other ones that you

00:19:02,090 --> 00:19:07,640
specify are accurate and valid like you

00:19:05,180 --> 00:19:11,180
fixed it here it's just all the previous

00:19:07,640 --> 00:19:12,950
history is total garbage so that would

00:19:11,180 --> 00:19:14,420
imply that you've already removed the

00:19:12,950 --> 00:19:16,520
password from your database yamo and

00:19:14,420 --> 00:19:18,200
then but everything else before it still

00:19:16,520 --> 00:19:20,300
contains it but if that's not the case

00:19:18,200 --> 00:19:22,850
like here then you need to provide no

00:19:20,300 --> 00:19:26,630
blob protection so rewrite every single

00:19:22,850 --> 00:19:29,600
bit of your history also when you do

00:19:26,630 --> 00:19:33,140
this in a non bear and a git repo that's

00:19:29,600 --> 00:19:36,170
not bear after it's done it's things are

00:19:33,140 --> 00:19:39,110
left half staged so you one needs to do

00:19:36,170 --> 00:19:41,750
a git reset dash dash hard to put

00:19:39,110 --> 00:19:43,250
although to put the newer version of the

00:19:41,750 --> 00:19:46,220
files in there because if you ran this

00:19:43,250 --> 00:19:47,810
and they just did kat Davis yamo is you

00:19:46,220 --> 00:19:48,980
still have the password there when you

00:19:47,810 --> 00:19:54,580
do a good reset it removes it all the

00:19:48,980 --> 00:19:57,140
way one problem with this though is that

00:19:54,580 --> 00:20:01,040
the reg ex is basically just this and

00:19:57,140 --> 00:20:03,880
replace it with this plain text and that

00:20:01,040 --> 00:20:03,880
may not be sufficient

00:20:07,790 --> 00:20:13,170
yeah also a question you might have is

00:20:11,220 --> 00:20:15,870
why not just keep the database yam allow

00:20:13,170 --> 00:20:20,310
the repo which one project work does

00:20:15,870 --> 00:20:21,750
that which is generally okay except in

00:20:20,310 --> 00:20:24,540
the last couple of weeks there were some

00:20:21,750 --> 00:20:25,830
some database connection that changed

00:20:24,540 --> 00:20:29,790
drivers and point to a different place

00:20:25,830 --> 00:20:31,590
and we that couldn't just be fixed you

00:20:29,790 --> 00:20:33,210
know where needs to be fixed the

00:20:31,590 --> 00:20:35,610
developers had asked me to go on to a

00:20:33,210 --> 00:20:38,090
Jenkins server and manually edit a file

00:20:35,610 --> 00:20:41,430
to point to the certain location so

00:20:38,090 --> 00:20:42,780
that's not ideal because in a day of

00:20:41,430 --> 00:20:44,460
ECMO and possibly other files I have

00:20:42,780 --> 00:20:46,800
passwords some of the things should be

00:20:44,460 --> 00:20:48,840
revision like the database names or

00:20:46,800 --> 00:20:50,580
specific drivers like MySQL versus post

00:20:48,840 --> 00:20:54,120
grassroots SQLite or connection

00:20:50,580 --> 00:20:56,280
parameters like the cooling connections

00:20:54,120 --> 00:21:00,480
and timeouts and things so it is useful

00:20:56,280 --> 00:21:04,680
to have David Scammell or simplify in in

00:21:00,480 --> 00:21:06,660
a repository luckily or unluckily

00:21:04,680 --> 00:21:11,430
depending on how you feel if you're

00:21:06,660 --> 00:21:14,130
dealing with the rails project day by

00:21:11,430 --> 00:21:16,650
yamo is actually run through a RB which

00:21:14,130 --> 00:21:20,850
is embedded Ruby before it's actually

00:21:16,650 --> 00:21:23,130
read as yamo so one could theoretically

00:21:20,850 --> 00:21:25,170
if you put in the necessary instructor

00:21:23,130 --> 00:21:27,270
have a get password function your gamble

00:21:25,170 --> 00:21:30,090
could actually look like this with get

00:21:27,270 --> 00:21:32,220
password and the thing so that no

00:21:30,090 --> 00:21:35,100
passwords are there but when you deploy

00:21:32,220 --> 00:21:37,680
there's no extra steps to to get the

00:21:35,100 --> 00:21:39,240
passwords used by the system and also

00:21:37,680 --> 00:21:44,120
all the other parameters in the Davis

00:21:39,240 --> 00:21:49,460
llamo file will be revision properly and

00:21:44,120 --> 00:21:52,460
as for the slides it's over array or not

00:21:49,460 --> 00:21:52,460
maybe

00:21:54,420 --> 00:22:02,620
so that was rather short uh would some

00:22:00,580 --> 00:22:06,820
but would any of you like me to stumble

00:22:02,620 --> 00:22:09,400
my way through get annex invocation that

00:22:06,820 --> 00:22:21,130
guy has two thumbs he's just showing

00:22:09,400 --> 00:22:22,990
them to me okay pardon okay well at the

00:22:21,130 --> 00:22:27,750
beginning I decided I should make a

00:22:22,990 --> 00:22:27,750
presentation that's a terrible idea um

00:22:28,230 --> 00:22:32,620
yeah as I said earlier get does not

00:22:31,000 --> 00:22:35,740
really deal well with large files

00:22:32,620 --> 00:22:40,120
particularly well and used to me words

00:22:35,740 --> 00:22:45,100
there you may have heard about I think

00:22:40,120 --> 00:22:46,750
it's something get large files or a

00:22:45,100 --> 00:22:49,240
large file support something like github

00:22:46,750 --> 00:22:53,500
is done it's an open-source addition to

00:22:49,240 --> 00:22:55,270
get where you are able to apply put-put

00:22:53,500 --> 00:22:59,650
source filters in place and like get big

00:22:55,270 --> 00:23:01,900
files the to be stored elsewhere the way

00:22:59,650 --> 00:23:04,690
yet annex does it is that if you have a

00:23:01,900 --> 00:23:07,150
file you say you can say get annex add

00:23:04,690 --> 00:23:10,090
in the name of the file and I'll take

00:23:07,150 --> 00:23:11,860
that file stored in a special place but

00:23:10,090 --> 00:23:15,430
in place of where the file was it will

00:23:11,860 --> 00:23:17,200
make a symbolic link into this special

00:23:15,430 --> 00:23:20,530
place which normally dot if it's in the

00:23:17,200 --> 00:23:24,790
bass tracker dot get / annex / objects

00:23:20,530 --> 00:23:28,780
and then a big long shot 256 some and

00:23:24,790 --> 00:23:29,860
then that some again so that way when

00:23:28,780 --> 00:23:32,650
you then commit it you're just

00:23:29,860 --> 00:23:33,880
committing a symbolic link but that

00:23:32,650 --> 00:23:35,410
symbolic link contains all the

00:23:33,880 --> 00:23:39,160
information necessary to figure out

00:23:35,410 --> 00:23:41,080
exactly what that file was and then if

00:23:39,160 --> 00:23:44,890
you configure a canonic server someplace

00:23:41,080 --> 00:23:46,870
you can then say get an ex copy to this

00:23:44,890 --> 00:23:51,000
server and that file will be copied to

00:23:46,870 --> 00:23:54,250
your kinetic server so then when someone

00:23:51,000 --> 00:23:55,600
close your repo to get a repo and they

00:23:54,250 --> 00:23:57,040
have all these symbolic links that point

00:23:55,600 --> 00:23:59,680
to nowhere because they don't have

00:23:57,040 --> 00:24:03,640
kinetic setup or the files but then you

00:23:59,680 --> 00:24:05,980
just add a remote get NX remote and then

00:24:03,640 --> 00:24:06,700
do all sorts of fancy genetic stuff or

00:24:05,980 --> 00:24:09,070
not

00:24:06,700 --> 00:24:12,490
and then able to copy it from the

00:24:09,070 --> 00:24:16,540
kinetic server one problem is that get

00:24:12,490 --> 00:24:18,460
an ex is sort of more see most of you

00:24:16,540 --> 00:24:20,860
cases seem to be for like media file

00:24:18,460 --> 00:24:23,710
collections like you have a ton mp3s or

00:24:20,860 --> 00:24:25,290
PDFs or video files and you want to

00:24:23,710 --> 00:24:28,000
share in between different places

00:24:25,290 --> 00:24:29,500
there's a lot of commands to make that

00:24:28,000 --> 00:24:32,350
happen where things are moved about

00:24:29,500 --> 00:24:36,610
there's there's a android client for get

00:24:32,350 --> 00:24:39,130
NX and ends and there's commands to tell

00:24:36,610 --> 00:24:40,990
you where all I cut where all the copies

00:24:39,130 --> 00:24:45,180
of the files are so you will never

00:24:40,990 --> 00:24:45,180
delete the last copy of a file you have

00:24:45,630 --> 00:24:50,620
one problem with this is that does not

00:24:47,920 --> 00:24:52,750
necessarily fit into a standard get

00:24:50,620 --> 00:24:55,450
workflow where you have a project and

00:24:52,750 --> 00:25:00,100
have like history on github that that

00:24:55,450 --> 00:25:02,260
just is counterproductive I don't know

00:25:00,100 --> 00:25:06,600
how to explain it because uh yeah

00:25:02,260 --> 00:25:06,600
there's no slide for it it's over um

00:25:06,750 --> 00:25:14,020
there's also there's a command and

00:25:09,250 --> 00:25:16,810
canonical kotenok sync which basically

00:25:14,020 --> 00:25:19,750
syncs your that that repo with every

00:25:16,810 --> 00:25:22,630
other known get an ex repo which is

00:25:19,750 --> 00:25:26,380
great for media collection stuff but if

00:25:22,630 --> 00:25:30,670
you're working in a regular get like

00:25:26,380 --> 00:25:32,830
source code repository it's shoving get

00:25:30,670 --> 00:25:34,600
an experience all over the place so all

00:25:32,830 --> 00:25:37,090
this get an exam go is stored in a get

00:25:34,600 --> 00:25:39,760
annex branch that has nothing to do with

00:25:37,090 --> 00:25:41,980
your normal repository history it's just

00:25:39,760 --> 00:25:44,440
it's hierarchy of like I think

00:25:41,980 --> 00:25:47,830
three-letter sub directories that then

00:25:44,440 --> 00:25:49,240
have like actual files there so if it's

00:25:47,830 --> 00:25:53,710
very messy also the get an extinct

00:25:49,240 --> 00:25:57,340
command will merge and commit any any

00:25:53,710 --> 00:25:59,920
state changes you have which if you're

00:25:57,340 --> 00:26:02,040
unaware of this will end up getting all

00:25:59,920 --> 00:26:06,390
sorts of junk into your into github

00:26:02,040 --> 00:26:10,870
which happened at work and I was weird

00:26:06,390 --> 00:26:14,530
yeah any other questions I can stammer

00:26:10,870 --> 00:26:17,040
through incoherently ornate or any

00:26:14,530 --> 00:26:17,040
comments

00:26:20,669 --> 00:26:33,789
it's it again sisson men or sysadmin I

00:26:29,279 --> 00:26:35,590
basically dealt with get because some

00:26:33,789 --> 00:26:38,799
reason i enjoy reading man pages and

00:26:35,590 --> 00:26:41,399
doing stuff and you know being obsessive

00:26:38,799 --> 00:26:44,799
and compulsive and others not so much

00:26:41,399 --> 00:26:47,200
also i kinda em I seem to be more

00:26:44,799 --> 00:26:50,919
bothered by secrets in a repository than

00:26:47,200 --> 00:26:52,330
other people that's one reason also i

00:26:50,919 --> 00:26:54,460
was asked like could you set up at get

00:26:52,330 --> 00:26:56,379
annex posit or e to store these files

00:26:54,460 --> 00:27:02,289
i'm sure then it had to figure out how

00:26:56,379 --> 00:27:11,460
to make it work so that's any other

00:27:02,289 --> 00:27:11,460

YouTube URL: https://www.youtube.com/watch?v=6ByzqrG2Nsc


