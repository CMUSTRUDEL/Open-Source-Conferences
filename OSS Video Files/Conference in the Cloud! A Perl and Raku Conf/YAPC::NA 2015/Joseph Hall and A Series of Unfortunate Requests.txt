Title: Joseph Hall and A Series of Unfortunate Requests
Publication date: 2015-06-16
Playlist: YAPC::NA 2015
Description: 
	
Captions: 
	00:00:00,350 --> 00:00:04,950
appreciate all of you guys that either

00:00:03,360 --> 00:00:07,620
weren't interested in what's new and

00:00:04,950 --> 00:00:13,799
pearl 522 or we're willing to look at

00:00:07,620 --> 00:00:17,580
the release notes I'm Joseph hall this

00:00:13,799 --> 00:00:20,460
is a series of unfortunate requests you

00:00:17,580 --> 00:00:21,660
guys recognize the name and you'll

00:00:20,460 --> 00:00:25,590
probably recognize the picture from the

00:00:21,660 --> 00:00:27,390
DVD real quick I wouldn't normally do

00:00:25,590 --> 00:00:29,670
this because you guys probably don't

00:00:27,390 --> 00:00:34,649
care but I do want to point out that I'm

00:00:29,670 --> 00:00:37,079
not that guy I introduced myself to to

00:00:34,649 --> 00:00:38,460
Randall a couple days ago I said hi I'm

00:00:37,079 --> 00:00:45,899
Joseph hall and he gave me this look

00:00:38,460 --> 00:00:47,520
that said no you're not so it is a great

00:00:45,899 --> 00:00:50,280
book and I have a copy and it is one of

00:00:47,520 --> 00:00:55,079
the books that I used to learn perl so

00:00:50,280 --> 00:00:56,969
this is the noises can I don't know I'm

00:00:55,079 --> 00:00:58,379
how I'm going to deal with this I've

00:00:56,969 --> 00:01:00,840
been using Perl since about nineteen

00:00:58,379 --> 00:01:03,059
ninety nine or so just started hacking

00:01:00,840 --> 00:01:05,250
on it when I was working on a tech

00:01:03,059 --> 00:01:10,020
support job and that led me into doing a

00:01:05,250 --> 00:01:11,729
lot of web programming and in 2010 I was

00:01:10,020 --> 00:01:14,130
looking around for a job and I applied

00:01:11,729 --> 00:01:15,689
at a place for a pearl job and I sent

00:01:14,130 --> 00:01:18,540
him a code stat sample and they came

00:01:15,689 --> 00:01:22,140
back and said hey would you be willing

00:01:18,540 --> 00:01:26,430
to learn Python instead I said I guess

00:01:22,140 --> 00:01:28,500
you'll pay be sure and after I'd been

00:01:26,430 --> 00:01:29,970
there for about a month or two they

00:01:28,500 --> 00:01:31,829
finally let me under the code base and I

00:01:29,970 --> 00:01:34,290
realized that my pearl looked an awful

00:01:31,829 --> 00:01:37,400
lot like Python so when you guys see my

00:01:34,290 --> 00:01:39,869
perl code and see how it's formatted if

00:01:37,400 --> 00:01:42,150
you're used to python then then you'll

00:01:39,869 --> 00:01:47,159
recognize a lot of it the rest of you

00:01:42,150 --> 00:01:48,840
that aren't just forgive me please right

00:01:47,159 --> 00:01:51,360
now I work for saltstack I've been

00:01:48,840 --> 00:01:53,159
working there since well for a very long

00:01:51,360 --> 00:01:55,110
time I am literally the second code

00:01:53,159 --> 00:01:56,280
contributor the only person that's been

00:01:55,110 --> 00:01:58,020
working on the code base for longer than

00:01:56,280 --> 00:02:01,829
me as Tom hatch the guy who created up

00:01:58,020 --> 00:02:02,850
I'm in charge of salt cloud and which

00:02:01,829 --> 00:02:04,770
actually involves a lot of things

00:02:02,850 --> 00:02:06,509
outside of Salt cloud it it gives me the

00:02:04,770 --> 00:02:09,420
opportunity to work on a lot of AP is

00:02:06,509 --> 00:02:11,520
and at this point when a partner comes

00:02:09,420 --> 00:02:12,870
to us and says hey we need some

00:02:11,520 --> 00:02:17,310
integration between

00:02:12,870 --> 00:02:20,940
whatever they come to me and so I do a

00:02:17,310 --> 00:02:22,739
lot fortunately they finally gave me a

00:02:20,940 --> 00:02:27,209
team and so I don't have to do all that

00:02:22,739 --> 00:02:30,090
stuff now it sits nice and side note i

00:02:27,209 --> 00:02:31,500
am a classically trained chef so unlike

00:02:30,090 --> 00:02:33,450
that other company that you guys may

00:02:31,500 --> 00:02:40,379
have heard of salt does actually have a

00:02:33,450 --> 00:02:41,459
chef so let's talk about rest res is

00:02:40,379 --> 00:02:44,579
something that i first heard about

00:02:41,459 --> 00:02:46,470
actually at my first Python job I didn't

00:02:44,579 --> 00:02:48,120
really know what it was and I started

00:02:46,470 --> 00:02:50,400
looking at him thinking wait they're

00:02:48,120 --> 00:02:53,250
doing what with it that's I don't know

00:02:50,400 --> 00:02:56,819
that HTTP wasn't really meant to be used

00:02:53,250 --> 00:02:58,170
that way and then I started working with

00:02:56,819 --> 00:02:59,849
it more and more and whether or not I

00:02:58,170 --> 00:03:02,700
like it and I'm kind of used to it now

00:02:59,849 --> 00:03:05,040
so I guess it doesn't really matter it's

00:03:02,700 --> 00:03:09,329
it's actually really nice working with

00:03:05,040 --> 00:03:11,340
rest interfaces a lot of coders are used

00:03:09,329 --> 00:03:13,709
to HTTP methods it's a really easy

00:03:11,340 --> 00:03:15,060
protocol to work with in fact it's

00:03:13,709 --> 00:03:17,519
really easy to just make up your own

00:03:15,060 --> 00:03:19,799
methods and tell your web server to just

00:03:17,519 --> 00:03:21,780
use them just lab would be use and

00:03:19,799 --> 00:03:24,030
that's basically what webdav did right

00:03:21,780 --> 00:03:26,790
they added home what seven new methods I

00:03:24,030 --> 00:03:30,870
think and and use that for file

00:03:26,790 --> 00:03:33,780
transfers over over HTTP HTTP is just

00:03:30,870 --> 00:03:37,019
really easy to mess with I've been

00:03:33,780 --> 00:03:39,810
messing with it for a long long time one

00:03:37,019 --> 00:03:44,370
of my hobbies is as doing web scraping

00:03:39,810 --> 00:03:46,319
because I I need better hobbies but I've

00:03:44,370 --> 00:03:48,660
spent a lot of time just hacking on the

00:03:46,319 --> 00:03:52,019
protocol hacking on the web stuff and

00:03:48,660 --> 00:03:53,760
when I got around to rest and in fact a

00:03:52,019 --> 00:03:56,280
couple years in a me working with rest I

00:03:53,760 --> 00:03:57,660
discovered that a lot of that scraping I

00:03:56,280 --> 00:04:00,090
used to do it just isn't really

00:03:57,660 --> 00:04:02,549
necessary anymore and I'll get to that

00:04:00,090 --> 00:04:05,910
in just a moment the really cool thing

00:04:02,549 --> 00:04:08,549
about rest that Oh real quick before

00:04:05,910 --> 00:04:11,940
that rest api is now that i've worked

00:04:08,549 --> 00:04:15,540
with them for kind of a while they're

00:04:11,940 --> 00:04:17,190
very very similar i would say seventy

00:04:15,540 --> 00:04:19,560
eighty percent of the REST API as I look

00:04:17,190 --> 00:04:21,570
at nowadays are just they're almost

00:04:19,560 --> 00:04:23,190
identical they have a few things that

00:04:21,570 --> 00:04:25,500
are different just between the service

00:04:23,190 --> 00:04:26,400
in general but the way they put together

00:04:25,500 --> 00:04:28,800
URLs

00:04:26,400 --> 00:04:30,930
and the way they use methods it's almost

00:04:28,800 --> 00:04:34,530
identical so once you've started working

00:04:30,930 --> 00:04:36,720
on one or two rest systems the other

00:04:34,530 --> 00:04:38,130
ones just kind of flow together to give

00:04:36,720 --> 00:04:40,740
you a really good example of this one of

00:04:38,130 --> 00:04:42,570
my new team members we were doing some

00:04:40,740 --> 00:04:46,080
pair programming programming last week

00:04:42,570 --> 00:04:49,110
and working on a cloud driver for go

00:04:46,080 --> 00:04:50,910
grid and finally decided we were sick of

00:04:49,110 --> 00:04:52,710
dealing with the library whether we're

00:04:50,910 --> 00:04:55,530
dealing with talked of and decided just

00:04:52,710 --> 00:05:00,690
rewrite it from scratch and it took

00:04:55,530 --> 00:05:02,880
about three hours that's I had never

00:05:00,690 --> 00:05:04,440
pulled up the go grid api docs before I

00:05:02,880 --> 00:05:06,270
pulled them up looked at them and

00:05:04,440 --> 00:05:08,310
started tossing together methods and

00:05:06,270 --> 00:05:09,720
they're very even though they're written

00:05:08,310 --> 00:05:12,150
in Python they're very similar to the

00:05:09,720 --> 00:05:15,240
methods you're going to see me show you

00:05:12,150 --> 00:05:16,500
today in Perl and the other important

00:05:15,240 --> 00:05:19,050
thing about rest is they connect

00:05:16,500 --> 00:05:21,870
otherwise different systems I work in

00:05:19,050 --> 00:05:25,500
salt a lot because well that's what I do

00:05:21,870 --> 00:05:27,449
but assault is written in python and and

00:05:25,500 --> 00:05:29,520
I want to attract people from a lot of

00:05:27,449 --> 00:05:31,979
other systems I did some of the the

00:05:29,520 --> 00:05:34,380
Pearl work to get see pant support in

00:05:31,979 --> 00:05:36,720
there in the past couple days I wrote a

00:05:34,380 --> 00:05:38,699
little method or a little module that

00:05:36,720 --> 00:05:43,500
I'll show you later on for connecting

00:05:38,699 --> 00:05:45,060
pearl with with salt over rest we've got

00:05:43,500 --> 00:05:46,949
a lot of Ruby programmers a lot of node

00:05:45,060 --> 00:05:48,840
programmers a lot of Java programmers

00:05:46,949 --> 00:05:50,729
and they just deal with it over rest and

00:05:48,840 --> 00:05:52,500
it makes it really easy for everyone to

00:05:50,729 --> 00:05:56,840
talk to each other and not have to care

00:05:52,500 --> 00:05:59,220
what the the other systems written it so

00:05:56,840 --> 00:06:02,520
one of the things they'll find with with

00:05:59,220 --> 00:06:04,289
rest is it's almost always JSON but some

00:06:02,520 --> 00:06:07,580
of the older systems are still using XML

00:06:04,289 --> 00:06:10,889
now you guys remember what XML came out

00:06:07,580 --> 00:06:14,430
remember how awesome that was because we

00:06:10,889 --> 00:06:18,240
already knew HTML and XML was a lot like

00:06:14,430 --> 00:06:19,949
that except more strict and then I don't

00:06:18,240 --> 00:06:22,229
know about you but I got tired of XML

00:06:19,949 --> 00:06:26,460
after a while and now I just can't stand

00:06:22,229 --> 00:06:29,099
it fortunately JSON came around and JSON

00:06:26,460 --> 00:06:30,630
it's it's less chatty it's just it's a

00:06:29,099 --> 00:06:32,280
data structure that looks exactly like

00:06:30,630 --> 00:06:33,990
what you're working in whatever language

00:06:32,280 --> 00:06:35,460
you're working in any way it looks like

00:06:33,990 --> 00:06:38,310
a dictionary and Python it looks like a

00:06:35,460 --> 00:06:39,190
hash in Perl it looks like a number of

00:06:38,310 --> 00:06:42,970
other languages

00:06:39,190 --> 00:06:44,740
whereas XML it was this markup language

00:06:42,970 --> 00:06:46,990
that was really good for formatting text

00:06:44,740 --> 00:06:49,390
but when we started to try and shove

00:06:46,990 --> 00:06:51,790
data in there we had to do things with

00:06:49,390 --> 00:06:53,670
that data that just wasn't natural and

00:06:51,790 --> 00:06:55,930
we started adding these attributes and

00:06:53,670 --> 00:06:58,090
then once we want to get the data back

00:06:55,930 --> 00:07:00,340
out we have to shoehorn it back into

00:06:58,090 --> 00:07:03,070
whatever our memory structure is anyway

00:07:00,340 --> 00:07:04,600
with JSON you just imported and and you

00:07:03,070 --> 00:07:06,130
have a data structure that's already

00:07:04,600 --> 00:07:11,400
like what you were dealing with in in

00:07:06,130 --> 00:07:15,910
Perl so I'm a really big fan of JSON a

00:07:11,400 --> 00:07:18,010
lot of API still use XML the one that I

00:07:15,910 --> 00:07:20,680
work with all the time is Amazon and

00:07:18,010 --> 00:07:24,070
that's just massive mounds and mounds of

00:07:20,680 --> 00:07:25,930
XML it's it's terrible in fact there is

00:07:24,070 --> 00:07:28,840
easily the most complicated API work

00:07:25,930 --> 00:07:31,090
with just in general I work with a

00:07:28,840 --> 00:07:33,280
couple of drivers I don't think I'm

00:07:31,090 --> 00:07:35,740
allowed to say some of these companies

00:07:33,280 --> 00:07:38,740
names but they are currently using XML

00:07:35,740 --> 00:07:40,390
and have a migration plan to JSON

00:07:38,740 --> 00:07:43,810
already in place and I've seen their

00:07:40,390 --> 00:07:45,820
design dogs so even some API is that

00:07:43,810 --> 00:07:48,250
we're using XML are converting over to

00:07:45,820 --> 00:07:52,560
JSON it's it's the way of the future for

00:07:48,250 --> 00:07:52,560
pretty much everyone but but Java right

00:07:52,919 --> 00:07:57,910
if you happen to be dealing with an API

00:07:56,260 --> 00:08:01,750
that is using JSON it's going to be just

00:07:57,910 --> 00:08:04,210
that much easier to deal with you've got

00:08:01,750 --> 00:08:05,940
the JSON module that's really easy to

00:08:04,210 --> 00:08:10,360
import data and just shove it into

00:08:05,940 --> 00:08:12,460
whatever you're dealing with now there's

00:08:10,360 --> 00:08:14,410
a number of different rests or a number

00:08:12,460 --> 00:08:17,290
of different methods available in HTTP

00:08:14,410 --> 00:08:19,030
we don't use them all and rest in fact

00:08:17,290 --> 00:08:21,520
most people don't even use all of these

00:08:19,030 --> 00:08:22,870
in rest do you guys know the patch

00:08:21,520 --> 00:08:24,550
method raise your hand if you've ever

00:08:22,870 --> 00:08:28,390
used the patch method so a couple of you

00:08:24,550 --> 00:08:30,820
guys it's it's a pretty new method past

00:08:28,390 --> 00:08:34,510
1.5 years or something it's it's very

00:08:30,820 --> 00:08:36,539
new but what people a lot of people do

00:08:34,510 --> 00:08:39,700
instead of using patch is they'll use

00:08:36,539 --> 00:08:43,510
post and instead of using put they'll

00:08:39,700 --> 00:08:45,220
use post so first off just going through

00:08:43,510 --> 00:08:47,950
the list we have get which is a way to

00:08:45,220 --> 00:08:50,740
look at information either list a type

00:08:47,950 --> 00:08:51,870
of item or look at a specific entry for

00:08:50,740 --> 00:08:54,480
a particular

00:08:51,870 --> 00:08:57,510
type of item that's generally what

00:08:54,480 --> 00:09:00,150
you'll see used for post is for creating

00:08:57,510 --> 00:09:03,020
a new piece of information a new account

00:09:00,150 --> 00:09:06,300
a new virtual machine I knew whatever

00:09:03,020 --> 00:09:08,550
that's what post is for put is for

00:09:06,300 --> 00:09:10,350
replacing information that is already

00:09:08,550 --> 00:09:14,120
there with a whole new set of

00:09:10,350 --> 00:09:16,980
information very few people use PUD

00:09:14,120 --> 00:09:20,279
which is unfortunately these post

00:09:16,980 --> 00:09:22,050
instead it's actually a lot easier to

00:09:20,279 --> 00:09:26,400
deal with it with a lot of environments

00:09:22,050 --> 00:09:27,810
because for some reason a lot of a lot

00:09:26,400 --> 00:09:29,850
of libraries for dealing with web

00:09:27,810 --> 00:09:32,400
interfaces just don't support put or

00:09:29,850 --> 00:09:34,140
patch or a number of our other things

00:09:32,400 --> 00:09:36,540
and so you have to do weird stuff

00:09:34,140 --> 00:09:38,279
decanus you hoarded in there so it's

00:09:36,540 --> 00:09:39,690
actually kind of to a lot of piece of

00:09:38,279 --> 00:09:42,450
people's advantage that people do it

00:09:39,690 --> 00:09:43,710
wrong by using post everywhere same kind

00:09:42,450 --> 00:09:46,920
of thing goes with patch that's for

00:09:43,710 --> 00:09:48,990
updating partial information I have a

00:09:46,920 --> 00:09:51,360
record of an account and I only want to

00:09:48,990 --> 00:09:53,070
update the first name and I want to

00:09:51,360 --> 00:09:55,890
leave everything else the same the best

00:09:53,070 --> 00:09:57,540
way to do that is with a patch and then

00:09:55,890 --> 00:10:05,190
delete is just for removing information

00:09:57,540 --> 00:10:06,839
entirely authentication so when you

00:10:05,190 --> 00:10:08,760
start working with a lot of rest methods

00:10:06,839 --> 00:10:11,610
the thing that really really differs

00:10:08,760 --> 00:10:13,440
between a lot of different API s is how

00:10:11,610 --> 00:10:16,500
you tell them that you are who you say

00:10:13,440 --> 00:10:21,089
you are and in some cases like github is

00:10:16,500 --> 00:10:24,420
anyone here use the github API like two

00:10:21,089 --> 00:10:26,670
people okay unless you're actually

00:10:24,420 --> 00:10:28,440
making changes to something in github or

00:10:26,670 --> 00:10:30,450
you're dealing with a repository that's

00:10:28,440 --> 00:10:32,910
private in some way you don't need to

00:10:30,450 --> 00:10:34,860
authenticate which is which is cool it's

00:10:32,910 --> 00:10:36,779
actually a really good place to get a

00:10:34,860 --> 00:10:39,180
feel for working with rest api is in

00:10:36,779 --> 00:10:41,550
general and if you're actually going

00:10:39,180 --> 00:10:43,740
through and modifying repositories

00:10:41,550 --> 00:10:45,000
putting a new issues whatever then

00:10:43,740 --> 00:10:46,650
you'll have to go ahead and authenticate

00:10:45,000 --> 00:10:49,260
with them well we'll talk about github

00:10:46,650 --> 00:10:51,300
in just a moment very commonly you'll

00:10:49,260 --> 00:10:54,990
see something using a username and

00:10:51,300 --> 00:10:57,720
password pair and quite frequently this

00:10:54,990 --> 00:10:59,970
is actually a token ID is used for the

00:10:57,720 --> 00:11:03,390
username and the token is used for the

00:10:59,970 --> 00:11:05,649
password very very common another thing

00:11:03,390 --> 00:11:07,660
is a provider might just give you

00:11:05,649 --> 00:11:09,249
token and tell you to pass it through in

00:11:07,660 --> 00:11:11,410
a header or pass it through on a get

00:11:09,249 --> 00:11:15,430
method or maybe even pass it through on

00:11:11,410 --> 00:11:17,470
the the post body not as common you see

00:11:15,430 --> 00:11:20,879
a little bit of OAuth still hanging

00:11:17,470 --> 00:11:24,009
around a lot of OAuth 2 hanging around

00:11:20,879 --> 00:11:30,189
dealing with a loss Oh off to API is

00:11:24,009 --> 00:11:32,790
varies in in difficulty that's just

00:11:30,189 --> 00:11:34,689
that's par for OAuth 2 anyway and

00:11:32,790 --> 00:11:36,610
sometimes you'll see the signature

00:11:34,689 --> 00:11:40,119
calculation thing where you're given a

00:11:36,610 --> 00:11:42,160
token or maybe a set of tokens and then

00:11:40,119 --> 00:11:44,529
you put it together with some other

00:11:42,160 --> 00:11:47,499
piece of information and you send a hash

00:11:44,529 --> 00:11:50,199
based on that to the to the provider and

00:11:47,499 --> 00:11:51,670
they have that same information they

00:11:50,199 --> 00:11:53,740
calculate it they check and see if the

00:11:51,670 --> 00:11:55,029
hash matches and if it matches then that

00:11:53,740 --> 00:11:58,509
everyone's happy and they'll they'll

00:11:55,029 --> 00:12:00,879
authenticate you go grid was one example

00:11:58,509 --> 00:12:03,160
on Friday they used a hash based

00:12:00,879 --> 00:12:07,269
authentication I just did I think

00:12:03,160 --> 00:12:10,329
username plus password plus token md5 it

00:12:07,269 --> 00:12:14,439
and set it along in a header that was it

00:12:10,329 --> 00:12:18,790
and then amazon fitting you guys ever

00:12:14,439 --> 00:12:20,499
dealt with the Amazon API at all it's

00:12:18,790 --> 00:12:25,360
fun right have any guys ever had to do

00:12:20,499 --> 00:12:26,740
the signature yeah for those of you that

00:12:25,360 --> 00:12:30,399
haven't I'm going to pull this up real

00:12:26,740 --> 00:12:38,220
quick apologies it is in Python but

00:12:30,399 --> 00:12:40,660
it'll kind of get me get the idea so

00:12:38,220 --> 00:12:43,689
this is the old method signature version

00:12:40,660 --> 00:12:47,259
to you put together a bunch of stuff you

00:12:43,689 --> 00:12:48,819
sign it it's actually not very long you

00:12:47,259 --> 00:12:50,679
could add a signature version for which

00:12:48,819 --> 00:12:55,449
is the current version and it's just it

00:12:50,679 --> 00:12:59,889
goes on on and on it's yeah it's kind of

00:12:55,449 --> 00:13:02,499
a painful yeah so you'll see that

00:12:59,889 --> 00:13:05,049
occasionally not too often and then one

00:13:02,499 --> 00:13:07,059
that I almost never see is client-side

00:13:05,049 --> 00:13:11,139
certificates where you actually generate

00:13:07,059 --> 00:13:13,179
an RSA key and you send the the pub key

00:13:11,139 --> 00:13:15,569
up to the provider and then use your

00:13:13,179 --> 00:13:18,680
private key to sign all of your messages

00:13:15,569 --> 00:13:20,630
in fact I only know one API off

00:13:18,680 --> 00:13:27,980
and that that I deal with the least that

00:13:20,630 --> 00:13:32,390
deals with that any guesses what GCE no

00:13:27,980 --> 00:13:36,290
GC uses OAuth 2 asier Microsoft Azure

00:13:32,390 --> 00:13:38,480
uses client-side certs and actually it's

00:13:36,290 --> 00:13:40,970
my favorite API to authenticate against

00:13:38,480 --> 00:13:45,320
because I just toss assert in there and

00:13:40,970 --> 00:13:46,580
I'm good to go so you'll come across

00:13:45,320 --> 00:13:48,380
those different methods and they're

00:13:46,580 --> 00:13:50,839
generally pretty well documented the one

00:13:48,380 --> 00:13:53,899
that's not well documented at all is the

00:13:50,839 --> 00:13:55,880
Amazon signature version they tell you

00:13:53,899 --> 00:13:57,709
what steps are are there but really they

00:13:55,880 --> 00:13:59,839
kind of expect you to use whatever SDK

00:13:57,709 --> 00:14:01,459
is available for whatever language you

00:13:59,839 --> 00:14:03,880
happen to be in and if you're not

00:14:01,459 --> 00:14:10,010
willing to use their sdk then screw you

00:14:03,880 --> 00:14:13,670
so yeah it's a fun one now looking at

00:14:10,010 --> 00:14:15,920
the anatomy of a rest URL there's a few

00:14:13,670 --> 00:14:18,709
things that you can pretty commonly see

00:14:15,920 --> 00:14:19,970
in here there's there's some variations

00:14:18,709 --> 00:14:22,220
and sometimes they don't even look like

00:14:19,970 --> 00:14:24,410
this at all but this is very close to

00:14:22,220 --> 00:14:26,480
what you'll see in my experience eighty

00:14:24,410 --> 00:14:29,390
to ninety percent of the time of course

00:14:26,480 --> 00:14:32,000
you've got the protocol HTTP HTTPS and a

00:14:29,390 --> 00:14:35,839
few providers use is not using HTTPS

00:14:32,000 --> 00:14:38,300
then you know switch providers right we

00:14:35,839 --> 00:14:39,620
have a URL which is usually just domain

00:14:38,300 --> 00:14:41,450
name but in some cases you might

00:14:39,620 --> 00:14:43,339
actually have a path that goes along

00:14:41,450 --> 00:14:45,050
with that and the path will usually have

00:14:43,339 --> 00:14:48,170
some sort of version number like v1 or

00:14:45,050 --> 00:14:50,540
v2 storm path they're still using a

00:14:48,170 --> 00:14:53,839
version of one other driver anyone here

00:14:50,540 --> 00:14:56,360
work with OpenStack most their api's are

00:14:53,839 --> 00:14:59,330
using version 2 and so you'll see that

00:14:56,360 --> 00:15:01,279
throughout throughout different AP is

00:14:59,330 --> 00:15:04,270
and then you'll see some sort of

00:15:01,279 --> 00:15:06,440
resource that you're dealing with and

00:15:04,270 --> 00:15:08,150
occasionally you'll see some sort of

00:15:06,440 --> 00:15:10,670
action that's associated with that

00:15:08,150 --> 00:15:15,440
resource so it's a combination of that

00:15:10,670 --> 00:15:19,370
URL and the HTTP methods that kind of

00:15:15,440 --> 00:15:22,399
define how you deal with that API so in

00:15:19,370 --> 00:15:25,370
the case of a lot of what I deal with at

00:15:22,399 --> 00:15:28,730
what will be accessed might be a vm or i

00:15:25,370 --> 00:15:30,740
call them instances because like

00:15:28,730 --> 00:15:31,610
softlayer for instance actually lets you

00:15:30,740 --> 00:15:34,880
spin up bear met

00:15:31,610 --> 00:15:37,279
which is kind of cool and then action to

00:15:34,880 --> 00:15:41,959
be like create lists show that sort of

00:15:37,279 --> 00:15:44,750
thing so for example github this is my

00:15:41,959 --> 00:15:46,820
all-time favorite API it's very clean

00:15:44,750 --> 00:15:49,360
it's very easy to work with they give

00:15:46,820 --> 00:15:56,029
you a lot of hints for dealing with them

00:15:49,360 --> 00:15:57,800
so let's pull that up real quick if you

00:15:56,029 --> 00:16:00,350
just go to the straight API github com

00:15:57,800 --> 00:16:01,970
this is totally on unauthenticated it

00:16:00,350 --> 00:16:03,800
tells you some of the things you can

00:16:01,970 --> 00:16:08,029
look at inside that API it's very very

00:16:03,800 --> 00:16:09,260
helpful isn't that very awesome and then

00:16:08,029 --> 00:16:11,510
if you want to actually go in the lick

00:16:09,260 --> 00:16:13,790
essay in my case I want to look at the

00:16:11,510 --> 00:16:16,220
saltstack repos holding / repos /

00:16:13,790 --> 00:16:18,200
saltstack which is the organization or

00:16:16,220 --> 00:16:20,769
user and then the actual repo that I'm

00:16:18,200 --> 00:16:23,329
looking at and it gives me a list of

00:16:20,769 --> 00:16:28,010
well information about the repo itself

00:16:23,329 --> 00:16:30,110
right and then more more links to other

00:16:28,010 --> 00:16:32,480
things you can look at to try and figure

00:16:30,110 --> 00:16:35,630
out what is supported by that repo and

00:16:32,480 --> 00:16:37,459
then I might go into issues and it gives

00:16:35,630 --> 00:16:38,720
me a list of currently open issues and

00:16:37,459 --> 00:16:40,730
that's it's kind of a long list we've

00:16:38,720 --> 00:16:44,060
got a few open issues and if I want to

00:16:40,730 --> 00:16:46,010
look at a specific issue then / in the

00:16:44,060 --> 00:16:48,260
issue number you see how easy it is to

00:16:46,010 --> 00:16:50,329
use the github API I love it if you want

00:16:48,260 --> 00:16:55,190
to look at polls and this is actually a

00:16:50,329 --> 00:16:56,480
pull but issues and pull well pull

00:16:55,190 --> 00:16:59,990
requests are a type of issue and get

00:16:56,480 --> 00:17:02,500
help right and this particular issue

00:16:59,990 --> 00:17:05,720
happens to be where I added in whoa

00:17:02,500 --> 00:17:07,760
where I added in the kind of a wrapper

00:17:05,720 --> 00:17:10,910
for dealing with various HTTP libraries

00:17:07,760 --> 00:17:13,309
inside of inside of salt because am I

00:17:10,910 --> 00:17:17,480
still working back there okay thank you

00:17:13,309 --> 00:17:19,069
I added a bunch of rioted and a rapper

00:17:17,480 --> 00:17:21,020
so that people wanted to use this

00:17:19,069 --> 00:17:22,280
library could these this library people

00:17:21,020 --> 00:17:25,040
that wanted to use this library could

00:17:22,280 --> 00:17:26,600
use this library and so on and it shot

00:17:25,040 --> 00:17:32,660
up a lot of people that have their own

00:17:26,600 --> 00:17:35,270
favorite library to use so so okay

00:17:32,660 --> 00:17:36,500
looking at this Oh authentication on

00:17:35,270 --> 00:17:38,570
github they actually have a few

00:17:36,500 --> 00:17:41,330
different methods that they support they

00:17:38,570 --> 00:17:43,460
support basic authentication just HTTP

00:17:41,330 --> 00:17:44,900
based authentication you give it to your

00:17:43,460 --> 00:17:49,670
github user name password

00:17:44,900 --> 00:17:51,350
lets you in it uses OAuth 2 and you can

00:17:49,670 --> 00:17:54,380
generate a token and pass it through in

00:17:51,350 --> 00:17:57,620
the header or as a get parameter or you

00:17:54,380 --> 00:18:00,860
can pass through a in a secret as a get

00:17:57,620 --> 00:18:04,250
parameter so they're very flexible on

00:18:00,860 --> 00:18:07,480
how you deal with our API another API

00:18:04,250 --> 00:18:09,740
this is giant this is a cloud provider

00:18:07,480 --> 00:18:12,350
for the float for those of you guys that

00:18:09,740 --> 00:18:14,830
don't know Joe aunt they one of the big

00:18:12,350 --> 00:18:17,630
things they're kind of spearheading is a

00:18:14,830 --> 00:18:21,290
operating system called smart OS which

00:18:17,630 --> 00:18:22,970
is kind of fork of open solaris and very

00:18:21,290 --> 00:18:25,850
commonly with cloud providers you'll see

00:18:22,970 --> 00:18:27,950
a URL that has the the name of the

00:18:25,850 --> 00:18:31,430
region that the data center is in so in

00:18:27,950 --> 00:18:32,990
this case us West one API giant com

00:18:31,430 --> 00:18:37,430
there's going to be a u.s. East one

00:18:32,990 --> 00:18:39,020
there might be us two and so on very

00:18:37,430 --> 00:18:42,920
common across cloud providers everyone

00:18:39,020 --> 00:18:44,660
does it we have the the count this is

00:18:42,920 --> 00:18:47,330
the account name so in my case it would

00:18:44,660 --> 00:18:50,800
be tech hat or saltstack or something

00:18:47,330 --> 00:18:55,040
like that and then slash users or I

00:18:50,800 --> 00:18:57,350
think it's VMs or instances and so on

00:18:55,040 --> 00:19:02,000
and they use that same kind of signature

00:18:57,350 --> 00:19:04,700
type of authentication you put together

00:19:02,000 --> 00:19:07,430
username and password and I think the

00:19:04,700 --> 00:19:11,020
date and then hash it with a key and

00:19:07,430 --> 00:19:13,520
then set it up there and they verify it

00:19:11,020 --> 00:19:17,480
storm path any guys ever heard of storm

00:19:13,520 --> 00:19:20,960
path one guy two guys storm path is

00:19:17,480 --> 00:19:22,700
basically ldap as a service it's got a

00:19:20,960 --> 00:19:25,070
little bit more to it than the ldap as a

00:19:22,700 --> 00:19:27,470
service for instance we use it in salt

00:19:25,070 --> 00:19:29,270
as one possible method to provide

00:19:27,470 --> 00:19:31,520
external authentication you can throw

00:19:29,270 --> 00:19:34,300
username password at it and they'll tell

00:19:31,520 --> 00:19:37,490
you whether or not it's actually valid

00:19:34,300 --> 00:19:39,020
so very very handy they're one of the

00:19:37,490 --> 00:19:42,890
ones that have a path in there like I

00:19:39,020 --> 00:19:44,870
said the user using version one the easy

00:19:42,890 --> 00:19:46,280
one and here is accounts these are the

00:19:44,870 --> 00:19:49,850
actual user accounts that you're

00:19:46,280 --> 00:19:53,060
creating and then everything else is

00:19:49,850 --> 00:19:55,640
inside what they call a tenant and and

00:19:53,060 --> 00:19:57,200
so everything kind of gets it gets a

00:19:55,640 --> 00:19:59,529
little bit longer in fact let's let's

00:19:57,200 --> 00:20:01,940
take a look at them

00:19:59,529 --> 00:20:06,590
I've got a repo up here that i put

00:20:01,940 --> 00:20:08,510
together yesterday this is a the reason

00:20:06,590 --> 00:20:10,730
I chose storm path is because there

00:20:08,510 --> 00:20:11,929
wasn't a pearl library for yet and we

00:20:10,730 --> 00:20:15,919
need pearl libraries for everything

00:20:11,929 --> 00:20:17,059
right exactly so I did start storm path

00:20:15,919 --> 00:20:18,200
and they're they're excited about

00:20:17,059 --> 00:20:23,900
they've already started tweeting about

00:20:18,200 --> 00:20:26,059
it they're fast so they require an API

00:20:23,900 --> 00:20:29,900
ID and a key and they use it just as a

00:20:26,059 --> 00:20:33,770
username and password I've got this

00:20:29,900 --> 00:20:36,860
query sob in here and most of my drivers

00:20:33,770 --> 00:20:40,750
use something like this they use a sub

00:20:36,860 --> 00:20:42,860
called query I do some basic checking

00:20:40,750 --> 00:20:45,730
pass through the pass through the

00:20:42,860 --> 00:20:48,610
credentials pass through the domain

00:20:45,730 --> 00:20:51,429
those of you guys that don't like lwp

00:20:48,610 --> 00:20:54,020
sorry I do I know I'm used to it and

00:20:51,429 --> 00:20:55,700
it's it's pretty common everyone's

00:20:54,020 --> 00:20:59,659
looking at at least that's done a web

00:20:55,700 --> 00:21:02,210
work so we set up our credentials we

00:20:59,659 --> 00:21:03,860
give the path which is going to be well

00:21:02,210 --> 00:21:06,080
I can hard code this one because I know

00:21:03,860 --> 00:21:07,909
that's not going to change until they go

00:21:06,080 --> 00:21:09,740
to a new version and when they go to a

00:21:07,909 --> 00:21:11,809
new version I have to edit the driver

00:21:09,740 --> 00:21:15,799
anyway so I'm not worried about hard

00:21:11,809 --> 00:21:17,390
coding that but then / resource that's

00:21:15,799 --> 00:21:18,860
going to be generally passed in or

00:21:17,390 --> 00:21:20,750
that's going to be always passed in and

00:21:18,860 --> 00:21:24,649
then frequently an action is going to be

00:21:20,750 --> 00:21:26,809
passed in after that I check and see if

00:21:24,649 --> 00:21:29,450
I'm passing through data that's going to

00:21:26,809 --> 00:21:32,120
be posted to it and these guys rather

00:21:29,450 --> 00:21:34,270
than using URL form encoded they just

00:21:32,120 --> 00:21:36,770
prefer you to pass through straight JSON

00:21:34,270 --> 00:21:39,649
so I pass it through his JSON and set

00:21:36,770 --> 00:21:41,270
the content header I've got a special

00:21:39,649 --> 00:21:43,340
thing in here so I don't have to do a

00:21:41,270 --> 00:21:47,210
huge amount of work to tell the

00:21:43,340 --> 00:21:49,159
difference between post get and delete

00:21:47,210 --> 00:21:50,510
if I pass through data this is delete

00:21:49,159 --> 00:21:54,549
that i'll do a delete method otherwise

00:21:50,510 --> 00:21:58,130
all i'll send it through is JSON and

00:21:54,549 --> 00:22:00,159
then I get back content I just go ahead

00:21:58,130 --> 00:22:02,390
and decode it and return it and

00:22:00,159 --> 00:22:04,279
everything except for delete is going to

00:22:02,390 --> 00:22:07,340
return something that looks like that

00:22:04,279 --> 00:22:09,890
and then using the actual action you see

00:22:07,340 --> 00:22:11,900
how easy it is for accounts I just

00:22:09,890 --> 00:22:15,230
passed through the name

00:22:11,900 --> 00:22:16,670
the resource accounts for tenants I pass

00:22:15,230 --> 00:22:18,710
through the tenant in fact most of these

00:22:16,670 --> 00:22:20,960
are tenants like I said everything in

00:22:18,710 --> 00:22:24,320
storm passes is based on a tenant except

00:22:20,960 --> 00:22:26,420
for the accounts but it's very very

00:22:24,320 --> 00:22:28,580
simple from this point on once you've

00:22:26,420 --> 00:22:30,170
got that query subroutine in there too

00:22:28,580 --> 00:22:34,580
to write everything else to go against

00:22:30,170 --> 00:22:36,230
it you notice that down here most these

00:22:34,580 --> 00:22:38,000
are just listing data out this is a very

00:22:36,230 --> 00:22:41,990
incomplete driver again I wrote it

00:22:38,000 --> 00:22:43,250
yesterday and today we have crate which

00:22:41,990 --> 00:22:45,590
is the first thing that's actually going

00:22:43,250 --> 00:22:47,510
to do a post there's a few things that

00:22:45,590 --> 00:22:48,980
storm path absolutely requires and so I

00:22:47,510 --> 00:22:50,990
do some quick checking for that to make

00:22:48,980 --> 00:22:52,700
sure that that exists there's a number

00:22:50,990 --> 00:22:54,890
of other fields that can be passed in as

00:22:52,700 --> 00:22:57,470
well and so I just kind of left it free

00:22:54,890 --> 00:23:00,230
form said passing these things and we'll

00:22:57,470 --> 00:23:03,080
just get a will convert well convert it

00:23:00,230 --> 00:23:05,240
up there right and then we would turn

00:23:03,080 --> 00:23:07,250
the response back it's in fact this

00:23:05,240 --> 00:23:10,960
could really just be return self query

00:23:07,250 --> 00:23:14,600
right updating account is even easier

00:23:10,960 --> 00:23:17,510
you pass through a hash ref that's got

00:23:14,600 --> 00:23:20,930
the you know item equals this item

00:23:17,510 --> 00:23:23,390
equals this and so on and it does a well

00:23:20,930 --> 00:23:25,030
in these guys case it does a a post but

00:23:23,390 --> 00:23:27,590
it should be doing a patch right and

00:23:25,030 --> 00:23:30,230
then delete I just give it an account ID

00:23:27,590 --> 00:23:31,730
and tell it to delete it you guys see

00:23:30,230 --> 00:23:37,250
how it easy how easy is to work with

00:23:31,730 --> 00:23:40,970
some of the api's so let me look at

00:23:37,250 --> 00:23:42,590
another one here this is my last example

00:23:40,970 --> 00:23:44,690
I'm going kind of fast sorry guys I

00:23:42,590 --> 00:23:49,400
guess that means we've got plenty of

00:23:44,690 --> 00:23:50,900
time for questions so salt API of course

00:23:49,400 --> 00:23:53,420
I'm going to toss this in here a little

00:23:50,900 --> 00:23:56,990
bit of promo right actually this is an

00:23:53,420 --> 00:23:58,540
API deal with quite a bit and I noticed

00:23:56,990 --> 00:24:02,210
there wasn't a pearl library for so

00:23:58,540 --> 00:24:05,840
again I wrote that this week in part so

00:24:02,210 --> 00:24:07,310
I could use them to talk the URL is

00:24:05,840 --> 00:24:10,570
going to be whatever your salt master is

00:24:07,310 --> 00:24:13,100
set to the resource is going to be

00:24:10,570 --> 00:24:14,840
there's actually only a few resources on

00:24:13,100 --> 00:24:19,970
the salt API there's minions there's

00:24:14,840 --> 00:24:21,410
jobs maybe one other thing there's not a

00:24:19,970 --> 00:24:23,450
whole lot that's available and

00:24:21,410 --> 00:24:25,110
optionally a resource ID depending on

00:24:23,450 --> 00:24:27,720
what you're actually doing

00:24:25,110 --> 00:24:29,820
and they just use what they do in salt

00:24:27,720 --> 00:24:32,280
API is they'll use basic authentication

00:24:29,820 --> 00:24:35,190
to get a token and then I'll pass that

00:24:32,280 --> 00:24:38,400
token through as a as a header or is a

00:24:35,190 --> 00:24:39,990
parameter or there's another way of

00:24:38,400 --> 00:24:44,210
accessing it where you just pass through

00:24:39,990 --> 00:24:46,380
username password every single time so

00:24:44,210 --> 00:24:49,679
let's take a look at that driver real

00:24:46,380 --> 00:24:55,230
quick you see it's already starting to

00:24:49,679 --> 00:24:56,910
look very similar I start off by if you

00:24:55,230 --> 00:24:58,860
call a new then you give it a username

00:24:56,910 --> 00:25:02,370
password and just goes ahead and auto

00:24:58,860 --> 00:25:04,230
generates a token for you if you want

00:25:02,370 --> 00:25:07,559
you can generate another token halfway

00:25:04,230 --> 00:25:09,890
through but it's not going to reassign

00:25:07,559 --> 00:25:15,330
it to the session that was just in there

00:25:09,890 --> 00:25:16,830
just in case I guess and then I've only

00:25:15,330 --> 00:25:18,660
got support right now for three types of

00:25:16,830 --> 00:25:20,970
functions there an execution command

00:25:18,660 --> 00:25:22,710
this is the thing where it goes the salt

00:25:20,970 --> 00:25:24,780
master and says talk to these minions

00:25:22,710 --> 00:25:26,309
tell them to do something and the

00:25:24,780 --> 00:25:28,440
minions do something they come back and

00:25:26,309 --> 00:25:30,150
they tell the master what this actually

00:25:28,440 --> 00:25:35,010
does is it goes and sends out the

00:25:30,150 --> 00:25:36,450
command and gets a job ID back and then

00:25:35,010 --> 00:25:38,340
I've got this other jobs function that

00:25:36,450 --> 00:25:42,690
can be used to look at the job data for

00:25:38,340 --> 00:25:45,299
that job ID and then run is the one that

00:25:42,690 --> 00:25:50,370
actually hits it directly every single

00:25:45,299 --> 00:25:51,990
time so come to think of it I've got

00:25:50,370 --> 00:25:56,490
some code up here I should probably uh

00:25:51,990 --> 00:25:59,160
pimp there and take a look at it so this

00:25:56,490 --> 00:26:02,010
is the salt 1 accessing that is very

00:25:59,160 --> 00:26:09,720
easy Paul go ahead and write down the

00:26:02,010 --> 00:26:12,120
password it's very useful no it's not so

00:26:09,720 --> 00:26:14,520
I set up a assault object and then I i

00:26:12,120 --> 00:26:18,090
run a job and then I print out the

00:26:14,520 --> 00:26:19,470
output from the job I this is a job that

00:26:18,090 --> 00:26:20,669
doesn't have any arguments just a test

00:26:19,470 --> 00:26:23,880
hop hing tells you who's actually

00:26:20,669 --> 00:26:29,360
responding in fact I could really just

00:26:23,880 --> 00:26:29,360
do everyone instead of Dufresne

00:26:35,430 --> 00:26:39,790
you guys can see I've got four different

00:26:37,780 --> 00:26:55,180
methods set up here so when I go out go

00:26:39,790 --> 00:26:58,270
over here and say salt API awesome oh so

00:26:55,180 --> 00:27:06,910
it really helps if you start stuff up

00:26:58,270 --> 00:27:09,040
before you before you try to hit up so

00:27:06,910 --> 00:27:11,740
the salt API demon is now now we're

00:27:09,040 --> 00:27:18,220
actually running and we'll toss a few

00:27:11,740 --> 00:27:24,580
things at it and it's probably still

00:27:18,220 --> 00:27:26,410
spitting up I hope it looks as I'm

00:27:24,580 --> 00:27:34,780
getting as lucky as everyone else has

00:27:26,410 --> 00:27:38,100
been doing live demos so far what okay

00:27:34,780 --> 00:27:38,100
so I guess we won't see that

00:27:42,190 --> 00:27:54,460
that is unfortunate yeah okay I'll just

00:27:51,850 --> 00:27:55,570
leave that up there so I've kind of

00:27:54,460 --> 00:27:58,840
buzzed through this and went through

00:27:55,570 --> 00:28:00,190
much much faster than i expected to and

00:27:58,840 --> 00:28:02,289
i'm sure you guys have lots of questions

00:28:00,190 --> 00:28:05,230
I'm happy to go in and start looking at

00:28:02,289 --> 00:28:09,399
api's with you and all that does anyone

00:28:05,230 --> 00:28:12,389
have any questions for me did I make it

00:28:09,399 --> 00:28:12,389
that easy yes sir

00:28:21,419 --> 00:28:26,919
what I should have done is check to see

00:28:24,070 --> 00:28:30,549
if there was actually JSON output may be

00:28:26,919 --> 00:28:32,049
right maybe drop it eval around it I'm

00:28:30,549 --> 00:28:34,029
sorry the question was what do I deal

00:28:32,049 --> 00:28:35,799
how do I deal with messages like this

00:28:34,029 --> 00:28:38,169
where the server's not up so it didn't

00:28:35,799 --> 00:28:40,320
return valid JSON I probably wrap an

00:28:38,169 --> 00:28:45,669
eval around it or do it a try block with

00:28:40,320 --> 00:28:47,710
zip try tiny do something that actually

00:28:45,669 --> 00:28:49,480
validates the the information before try

00:28:47,710 --> 00:28:52,419
to pass it through to the the JSON

00:28:49,480 --> 00:28:58,950
encoder or a decoder good question

00:28:52,419 --> 00:28:58,950
anyone else yes sir

00:29:20,310 --> 00:29:23,310
ok

00:29:33,520 --> 00:29:38,660
okay so the question is are there any

00:29:36,800 --> 00:29:40,670
traps that was somebody might come

00:29:38,660 --> 00:29:42,950
across when trying to support both JSON

00:29:40,670 --> 00:29:46,220
and XML and a lot of these api's do

00:29:42,950 --> 00:29:48,230
actually support both already and one I

00:29:46,220 --> 00:29:52,250
was working on I think go grid supports

00:29:48,230 --> 00:29:53,990
CSV as well there are some traps because

00:29:52,250 --> 00:29:58,370
the the way you deal with them is

00:29:53,990 --> 00:30:02,060
generally very different I used to use

00:29:58,370 --> 00:30:03,470
XML simple kind of a lot I know it's got

00:30:02,060 --> 00:30:06,200
big warnings all over it now saying

00:30:03,470 --> 00:30:08,030
don't use this because really the

00:30:06,200 --> 00:30:10,270
information you get back from it doesn't

00:30:08,030 --> 00:30:15,830
look great if there's even one attribute

00:30:10,270 --> 00:30:19,100
XML attribute however if you don't use

00:30:15,830 --> 00:30:21,410
attributes inside your XML it still

00:30:19,100 --> 00:30:23,660
actually converts very easily to a to a

00:30:21,410 --> 00:30:26,000
hash and you can treat it the same way

00:30:23,660 --> 00:30:29,560
as all your other JSON JSON stuff

00:30:26,000 --> 00:30:31,850
however that's not usually the reality

00:30:29,560 --> 00:30:37,430
the best I can say is to put together a

00:30:31,850 --> 00:30:39,170
test framework that that tosses similar

00:30:37,430 --> 00:30:45,740
information to both and expect similar

00:30:39,170 --> 00:30:48,200
similar information back sorry that's

00:30:45,740 --> 00:30:50,180
not a very helpful answer but the

00:30:48,200 --> 00:30:53,450
problem is just that because the two

00:30:50,180 --> 00:30:55,490
data formats are so dissimilar putting

00:30:53,450 --> 00:30:57,170
together functions to just handle the

00:30:55,490 --> 00:30:59,330
type of data you get back are going to

00:30:57,170 --> 00:31:07,760
look very different these functions up

00:30:59,330 --> 00:31:09,380
here this guy here job if it were

00:31:07,760 --> 00:31:11,770
dealing with XML coming back it would

00:31:09,380 --> 00:31:14,330
probably have a few extra lines just to

00:31:11,770 --> 00:31:15,830
reformat the XML into something that

00:31:14,330 --> 00:31:19,120
looks similar to the data structure

00:31:15,830 --> 00:31:19,120
you're dealing with normally

00:31:35,000 --> 00:31:38,000
great

00:31:47,310 --> 00:31:52,990
one big thing you're going to come

00:31:49,150 --> 00:31:54,880
across is knowing which so the question

00:31:52,990 --> 00:31:57,220
is is in sending information sending a

00:31:54,880 --> 00:32:02,680
via XML or JSON and are there pitfalls

00:31:57,220 --> 00:32:04,930
there one thing that I see a lot our API

00:32:02,680 --> 00:32:08,070
is that don't make it easy to specify

00:32:04,930 --> 00:32:10,510
which type of data you want to get back

00:32:08,070 --> 00:32:12,880
go grid was one where they actually had

00:32:10,510 --> 00:32:14,680
a field where you say what type of data

00:32:12,880 --> 00:32:17,380
you're expecting and if you don't tell

00:32:14,680 --> 00:32:18,790
it then it comes back in JSON and I'm

00:32:17,380 --> 00:32:20,500
sure at some point it came back by

00:32:18,790 --> 00:32:22,360
default in XML and they switch to that

00:32:20,500 --> 00:32:24,190
over at some point and hopefully warrant

00:32:22,360 --> 00:32:28,000
their customers though I've come across

00:32:24,190 --> 00:32:31,420
a lot of api's where they don't speaking

00:32:28,000 --> 00:32:34,690
of that don't change your api's once

00:32:31,420 --> 00:32:37,680
they're in production I've worked with a

00:32:34,690 --> 00:32:40,690
couple of companies I won't say who but

00:32:37,680 --> 00:32:43,060
I have actually had cloud providers that

00:32:40,690 --> 00:32:45,010
will change their API with that changing

00:32:43,060 --> 00:32:47,410
the version number anything and tell

00:32:45,010 --> 00:32:50,730
somebody a day or two later on the blog

00:32:47,410 --> 00:32:50,730
post when people start complaining

00:32:50,940 --> 00:32:58,720
another interesting one if you what's up

00:32:54,510 --> 00:33:04,270
yeah it fixed them if you look a storm

00:32:58,720 --> 00:33:06,850
path they have you see here we have a

00:33:04,270 --> 00:33:08,890
content type application in JSON that's

00:33:06,850 --> 00:33:10,720
for what you're what you're expecting to

00:33:08,890 --> 00:33:15,250
receive back but they also have this

00:33:10,720 --> 00:33:20,050
accept header so you can actually say in

00:33:15,250 --> 00:33:21,760
your API look at the the accept header

00:33:20,050 --> 00:33:23,230
or the content-type header find out what

00:33:21,760 --> 00:33:25,450
the person is actually expecting through

00:33:23,230 --> 00:33:27,670
that and receive back information

00:33:25,450 --> 00:33:30,370
properly as long as there are clients

00:33:27,670 --> 00:33:33,250
are properly using HTTP anyway which

00:33:30,370 --> 00:33:35,170
would normally send that they don't have

00:33:33,250 --> 00:33:38,860
to mess around with any other weird

00:33:35,170 --> 00:33:40,690
variables or anything that's one of the

00:33:38,860 --> 00:33:43,210
big big ones that I see is just in

00:33:40,690 --> 00:33:46,390
properly identifying which type of data

00:33:43,210 --> 00:33:48,250
you're going to return back and the

00:33:46,390 --> 00:33:49,900
other one is just when you start sitting

00:33:48,250 --> 00:33:51,850
back JSON it just looks so much

00:33:49,900 --> 00:33:53,620
different I'm going to assume that you

00:33:51,850 --> 00:33:55,860
using attributes in your current XML

00:33:53,620 --> 00:33:55,860
right

00:33:56,320 --> 00:34:08,270
right Oh in this case it's inside your

00:34:03,890 --> 00:34:10,010
tags name equals double quote value yeah

00:34:08,270 --> 00:34:12,320
so if you're using those it's not going

00:34:10,010 --> 00:34:14,540
to translate cleanly over to JSON and

00:34:12,320 --> 00:34:18,919
most API is that I deal with don't use

00:34:14,540 --> 00:34:21,260
that I want to say that a soft layer

00:34:18,919 --> 00:34:23,500
doesn't use attributes that in their XML

00:34:21,260 --> 00:34:28,399
so it's actually very easy to convert

00:34:23,500 --> 00:34:30,080
but they are the exception so yeah

00:34:28,399 --> 00:34:31,609
trying to rework the data model into

00:34:30,080 --> 00:34:34,940
something that makes sense to your users

00:34:31,609 --> 00:34:36,740
and make sense to in JSON and make sense

00:34:34,940 --> 00:34:39,260
to your product that's really the

00:34:36,740 --> 00:34:42,200
biggest part okay did I answer your

00:34:39,260 --> 00:34:47,200
question well enough okay any other

00:34:42,200 --> 00:34:47,200
questions yes sir

00:35:07,610 --> 00:35:12,000
so the question is if you're dealing

00:35:10,080 --> 00:35:15,390
with a service that doesn't have a perl

00:35:12,000 --> 00:35:17,790
module for it yet is there a good tool

00:35:15,390 --> 00:35:20,250
out there already such as on Sipan they

00:35:17,790 --> 00:35:21,840
can make it easy to work with that I'm

00:35:20,250 --> 00:35:23,550
probably not the right person to ask

00:35:21,840 --> 00:35:25,980
because I've spent not nearly enough

00:35:23,550 --> 00:35:28,530
time in pearl at all over the past five

00:35:25,980 --> 00:35:31,320
years I have not seen anything and

00:35:28,530 --> 00:35:35,190
looking around in the past few days I've

00:35:31,320 --> 00:35:37,350
seen I've seen a number of different

00:35:35,190 --> 00:35:39,090
drivers that are very disparate in how

00:35:37,350 --> 00:35:43,860
they function and which namespace they

00:35:39,090 --> 00:35:45,750
decided to use and so on so far I've

00:35:43,860 --> 00:35:47,460
tentatively chosen web service for my

00:35:45,750 --> 00:35:52,860
name spaces for these because it seems

00:35:47,460 --> 00:35:54,810
to be the most accurate and in fact a

00:35:52,860 --> 00:35:56,100
buddy of mine back there Harley and I

00:35:54,810 --> 00:36:00,660
were talking about this yesterday about

00:35:56,100 --> 00:36:03,060
whether to use API or www or so on and

00:36:00,660 --> 00:36:06,750
I've seen API is just all over the place

00:36:03,060 --> 00:36:09,440
and it's really confusing find one that

00:36:06,750 --> 00:36:12,720
you like that has a good interface and

00:36:09,440 --> 00:36:15,360
take a look at the code I've thought

00:36:12,720 --> 00:36:17,040
about that as well and this storm path

00:36:15,360 --> 00:36:18,240
module is really really young and it's

00:36:17,040 --> 00:36:20,250
going to change probably a lot in the

00:36:18,240 --> 00:36:21,630
next few days but I would like it to be

00:36:20,250 --> 00:36:25,890
a model that people could use

00:36:21,630 --> 00:36:27,600
potentially in the future so take a look

00:36:25,890 --> 00:36:31,470
at it or in the next couple weeks and

00:36:27,600 --> 00:36:33,540
see if it's helpful to you what I

00:36:31,470 --> 00:36:36,990
generally do when writing code in in

00:36:33,540 --> 00:36:40,320
general is all all finds you know

00:36:36,990 --> 00:36:42,210
distill it down to one fast one method

00:36:40,320 --> 00:36:44,310
is fast to write and to read and to

00:36:42,210 --> 00:36:47,430
maintain and just kind of stick with

00:36:44,310 --> 00:36:48,570
that for for all my stuff and in the

00:36:47,430 --> 00:36:51,240
case of salt cloud it's made things

00:36:48,570 --> 00:36:53,910
really easy for tic create in this case

00:36:51,240 --> 00:36:56,550
i wrote the salt api one first and then

00:36:53,910 --> 00:36:58,350
i copied over the the PM file and wrote

00:36:56,550 --> 00:37:01,110
the storm path one the cell TPA one took

00:36:58,350 --> 00:37:03,530
me two or three hours to write storm

00:37:01,110 --> 00:37:07,580
path first version was about 20 minutes

00:37:03,530 --> 00:37:15,300
so does that help answer your question

00:37:07,580 --> 00:37:17,250
awesome any other questions ok if you

00:37:15,300 --> 00:37:20,490
guys want copies of the source code or

00:37:17,250 --> 00:37:21,300
anything or want to yell at me I'm up on

00:37:20,490 --> 00:37:24,540
github to what

00:37:21,300 --> 00:37:27,300
IRC and and I'll have links to the

00:37:24,540 --> 00:37:28,770
slides and I hope they're taping this

00:37:27,300 --> 00:37:32,750
too and when that comes out i'll put a

00:37:28,770 --> 00:37:32,750

YouTube URL: https://www.youtube.com/watch?v=wbaH_jxcA7g


