Title: Dist::Zilla and My Bundle - Dave Rolsky
Publication date: 2021-06-08
Playlist: TPC 2021 in the Cloud
Description: 
	Dist::Zilla (dzil) is a fantastic tool for anyone who releases modules to CPAN. It automates many of the test and release steps, allowing you to focus on your code, not your packaging.

I'll tell you what Dist::Zilla can do, then explain how I use it, and in particular how I've structured my dzil plugin bundle. A bundle takes dzil's meta up another notch, making it much easier to apply a complex dzil config across many distributions.
Captions: 
	00:00:04,640 --> 00:00:11,360
okay dave you ready

00:00:07,359 --> 00:00:13,599
hello okay everybody uh

00:00:11,360 --> 00:00:14,799
please welcome uh dave rolsky he'll be

00:00:13,599 --> 00:00:18,320
talking about disilla

00:00:14,799 --> 00:00:20,960
and how he does his bundle

00:00:18,320 --> 00:00:22,960
all right thanks todd and yeah that's

00:00:20,960 --> 00:00:24,800
what i'm going to talk about we'll

00:00:22,960 --> 00:00:26,000
i'll explain what this zilla is i'll

00:00:24,800 --> 00:00:27,519
show you briefly how

00:00:26,000 --> 00:00:29,119
you use it from the fan line and then

00:00:27,519 --> 00:00:30,640
explain what's in my

00:00:29,119 --> 00:00:32,160
zilla bundle to give you an idea of all

00:00:30,640 --> 00:00:35,600
the different things you can

00:00:32,160 --> 00:00:37,600
do with to zilla so what is it basically

00:00:35,600 --> 00:00:39,280
it's a tool for automating

00:00:37,600 --> 00:00:41,680
the maintenance of distributions for

00:00:39,280 --> 00:00:44,399
cpan authors

00:00:41,680 --> 00:00:46,079
but that may not be that helpful because

00:00:44,399 --> 00:00:47,200
what does that mean so let's take a step

00:00:46,079 --> 00:00:48,559
back first

00:00:47,200 --> 00:00:50,800
and look at what's in a cpan

00:00:48,559 --> 00:00:54,000
distribution and how to so you

00:00:50,800 --> 00:00:55,199
zilla can help you with that stuff so

00:00:54,000 --> 00:00:57,039
there's a bunch of things we have the

00:00:55,199 --> 00:00:58,719
code itself like you know if it's a

00:00:57,039 --> 00:01:00,239
library it's the library that

00:00:58,719 --> 00:01:01,760
the code that implements the library

00:01:00,239 --> 00:01:05,600
there's documentation

00:01:01,760 --> 00:01:08,960
there's test code there's installer code

00:01:05,600 --> 00:01:11,600
uh typically a makefile.pl or a build.pl

00:01:08,960 --> 00:01:12,720
there's a bunch of metadata uh in a meta

00:01:11,600 --> 00:01:16,560
dot json

00:01:12,720 --> 00:01:18,240
json or possibly metadot yaml file

00:01:16,560 --> 00:01:19,759
describing the contents of the

00:01:18,240 --> 00:01:22,960
distribution and there might be

00:01:19,759 --> 00:01:26,080
other stuff too and i'll talk about some

00:01:22,960 --> 00:01:26,320
what that is so this is what's in you

00:01:26,080 --> 00:01:28,159
know

00:01:26,320 --> 00:01:29,439
one of my distributions daytime format

00:01:28,159 --> 00:01:31,600
start p time

00:01:29,439 --> 00:01:33,840
so there's the lib directory with code t

00:01:31,600 --> 00:01:35,680
with tess xd has more tests

00:01:33,840 --> 00:01:37,840
a bunch of other files and like i

00:01:35,680 --> 00:01:40,000
mentioned as i make file.pl and

00:01:37,840 --> 00:01:42,240
a meta oh there's no metal file here

00:01:40,000 --> 00:01:45,680
this is from the github repo

00:01:42,240 --> 00:01:47,200
so what what goes into a new release

00:01:45,680 --> 00:01:48,799
so what we want to do in your release

00:01:47,200 --> 00:01:50,479
there's a bunch of things we have to do

00:01:48,799 --> 00:01:54,159
we have to update the version

00:01:50,479 --> 00:01:56,640
which means setting dollar version in

00:01:54,159 --> 00:01:58,479
ideally all of the dot pm files all the

00:01:56,640 --> 00:02:00,479
modules in the distribution

00:01:58,479 --> 00:02:01,759
we should update our changes file and

00:02:00,479 --> 00:02:03,439
put something in there

00:02:01,759 --> 00:02:05,200
though a lot of people forget to do that

00:02:03,439 --> 00:02:07,439
which can be annoying when you're trying

00:02:05,200 --> 00:02:09,119
to figure out what's in the new release

00:02:07,439 --> 00:02:11,280
we want to make sure all our metadata is

00:02:09,119 --> 00:02:13,680
up to date like our dependencies

00:02:11,280 --> 00:02:15,040
the provided packages and so on want to

00:02:13,680 --> 00:02:16,560
make sure we include things like a

00:02:15,040 --> 00:02:17,920
makefile.pl

00:02:16,560 --> 00:02:19,680
and there's other things we might want

00:02:17,920 --> 00:02:21,760
to put in there too

00:02:19,680 --> 00:02:24,000
because they're useful maybe a cpan file

00:02:21,760 --> 00:02:27,520
or a pearl tie drc file

00:02:24,000 --> 00:02:29,520
or various other things so what di zilla

00:02:27,520 --> 00:02:30,160
does is automate away a lot of the

00:02:29,520 --> 00:02:32,800
bullet

00:02:30,160 --> 00:02:34,640
boiler plates so instead of handwriting

00:02:32,800 --> 00:02:37,760
makefile.pl which

00:02:34,640 --> 00:02:38,080
99 of them look exactly the same as any

00:02:37,760 --> 00:02:40,560
other

00:02:38,080 --> 00:02:41,519
except for the distribution name and the

00:02:40,560 --> 00:02:44,000
version

00:02:41,519 --> 00:02:45,280
and the author name it'll generate it

00:02:44,000 --> 00:02:48,000
for you it'll generate

00:02:45,280 --> 00:02:49,680
a whole bunch of pod documentation for

00:02:48,000 --> 00:02:51,360
you things like a support section or a

00:02:49,680 --> 00:02:53,840
copyright that again are

00:02:51,360 --> 00:02:56,319
the same across many distributions with

00:02:53,840 --> 00:02:59,680
just like slight variations

00:02:56,319 --> 00:03:02,000
so it standardizes all of your releases

00:02:59,680 --> 00:03:03,680
so if i for example want all my distros

00:03:02,000 --> 00:03:06,239
to include

00:03:03,680 --> 00:03:08,000
pod syntax tests pot spelling tests

00:03:06,239 --> 00:03:10,640
compilation tests

00:03:08,000 --> 00:03:12,080
up to date dependency information and i

00:03:10,640 --> 00:03:15,760
don't want to have to copy

00:03:12,080 --> 00:03:16,480
all the code and files that implement

00:03:15,760 --> 00:03:18,080
this across

00:03:16,480 --> 00:03:20,159
distress i don't want i definitely don't

00:03:18,080 --> 00:03:22,239
want to edit it by hand

00:03:20,159 --> 00:03:24,239
um and what i really really don't want

00:03:22,239 --> 00:03:25,920
to do is if i decide to change how my

00:03:24,239 --> 00:03:27,680
pod syntax tests work

00:03:25,920 --> 00:03:30,879
i want to have to update 50 different

00:03:27,680 --> 00:03:33,120
districts to change that test file

00:03:30,879 --> 00:03:34,159
and this is one you know what disilla

00:03:33,120 --> 00:03:36,640
does for you

00:03:34,159 --> 00:03:38,400
is it automates all of that stuff so

00:03:36,640 --> 00:03:40,400
it's totally standardized across

00:03:38,400 --> 00:03:42,080
all the the districts you contain and

00:03:40,400 --> 00:03:43,920
you don't have to think about this

00:03:42,080 --> 00:03:45,760
but even if you only have one distribute

00:03:43,920 --> 00:03:47,040
you maintain it still makes it easier to

00:03:45,760 --> 00:03:49,360
adopt

00:03:47,040 --> 00:03:52,239
new best practices or you know changing

00:03:49,360 --> 00:03:54,640
best practices as time goes by

00:03:52,239 --> 00:03:56,400
so how do you use it it's pretty simple

00:03:54,640 --> 00:03:59,360
uh you install it from cpan i'm not

00:03:56,400 --> 00:04:01,200
going to show the command line for that

00:03:59,360 --> 00:04:02,720
hopefully everybody knows how to do that

00:04:01,200 --> 00:04:04,159
uh then you dress right

00:04:02,720 --> 00:04:05,920
diesel new and the name of your

00:04:04,159 --> 00:04:07,040
distribution and i know that it's a

00:04:05,920 --> 00:04:09,360
distribution name

00:04:07,040 --> 00:04:10,799
not a module name although i think maybe

00:04:09,360 --> 00:04:12,080
if you give a model name it does the

00:04:10,799 --> 00:04:14,799
right thing anyway

00:04:12,080 --> 00:04:15,920
okay then you go into that distribution

00:04:14,799 --> 00:04:18,079
directory

00:04:15,920 --> 00:04:19,919
we we write a bunch of code and then we

00:04:18,079 --> 00:04:22,479
can test everything

00:04:19,919 --> 00:04:23,759
uh and what that all flag means it's

00:04:22,479 --> 00:04:25,520
gonna include all the tests which are

00:04:23,759 --> 00:04:27,600
tests for others to run like when they

00:04:25,520 --> 00:04:28,240
install from cpan as well as author only

00:04:27,600 --> 00:04:30,160
tests

00:04:28,240 --> 00:04:32,000
an author only test might be things like

00:04:30,160 --> 00:04:34,560
pod syntax tests

00:04:32,000 --> 00:04:36,240
uh testing to make sure you use spaces

00:04:34,560 --> 00:04:37,919
instead of tabs because you're not a

00:04:36,240 --> 00:04:39,680
monster

00:04:37,919 --> 00:04:41,440
testing that your changes file is up to

00:04:39,680 --> 00:04:44,400
date meaning that

00:04:41,440 --> 00:04:45,199
you have an entry for the release you're

00:04:44,400 --> 00:04:47,120
about to do

00:04:45,199 --> 00:04:48,720
so it matches the version number the one

00:04:47,120 --> 00:04:50,400
you're going to release that you have

00:04:48,720 --> 00:04:52,320
the date of the release in there

00:04:50,400 --> 00:04:54,639
and lots more stuff that you might want

00:04:52,320 --> 00:04:57,040
to test as part of your

00:04:54,639 --> 00:04:58,160
release process or as part of validating

00:04:57,040 --> 00:05:00,240
new prs

00:04:58,160 --> 00:05:01,840
but you don't necessarily want end users

00:05:00,240 --> 00:05:04,400
to have to test like install

00:05:01,840 --> 00:05:05,520
the test prereqs for and run like the

00:05:04,400 --> 00:05:06,960
end users

00:05:05,520 --> 00:05:08,960
they don't need to test that your pods

00:05:06,960 --> 00:05:10,560
index is correct because you've already

00:05:08,960 --> 00:05:12,000
tested it and there's not much value in

00:05:10,560 --> 00:05:14,720
running that

00:05:12,000 --> 00:05:16,720
elsewhere so and then when we have some

00:05:14,720 --> 00:05:19,440
code to release we run diesel release

00:05:16,720 --> 00:05:21,520
and it will run all the appropriate

00:05:19,440 --> 00:05:24,400
tasks

00:05:21,520 --> 00:05:25,600
basically the author test the release

00:05:24,400 --> 00:05:28,720
tests

00:05:25,600 --> 00:05:31,919
and the tests for the regular tests

00:05:28,720 --> 00:05:33,520
uh it will do any other release time

00:05:31,919 --> 00:05:34,560
things that you've asked it to do and

00:05:33,520 --> 00:05:35,600
i'll talk about some of those in a

00:05:34,560 --> 00:05:37,120
second

00:05:35,600 --> 00:05:38,560
like when i mentioned chicken with

00:05:37,120 --> 00:05:40,479
james's file and then we'll actually

00:05:38,560 --> 00:05:43,280
upload it to cpan

00:05:40,479 --> 00:05:45,120
and you're all done and all of this is

00:05:43,280 --> 00:05:47,039
configurable like if you don't want

00:05:45,120 --> 00:05:48,800
release to upload to cpan you can have

00:05:47,039 --> 00:05:49,759
it just make a tarball that you manually

00:05:48,800 --> 00:05:51,840
upload that's

00:05:49,759 --> 00:05:53,440
totally doable there's this is all

00:05:51,840 --> 00:05:55,919
driven by plugins there's

00:05:53,440 --> 00:05:56,720
a dist dot any file that when i did

00:05:55,919 --> 00:05:59,680
diesel new

00:05:56,720 --> 00:06:00,800
was created for my bundle for my new

00:05:59,680 --> 00:06:03,120
distro

00:06:00,800 --> 00:06:06,000
and you can edit that file to change

00:06:03,120 --> 00:06:09,600
exactly what goes into this

00:06:06,000 --> 00:06:13,360
are there any questions so far

00:06:09,600 --> 00:06:17,280
just one yes uh

00:06:13,360 --> 00:06:20,639
diesel maker directory hack hack hack

00:06:17,280 --> 00:06:24,400
where and then diesel release where does

00:06:20,639 --> 00:06:25,759
the storage of your final code back to

00:06:24,400 --> 00:06:31,039
your github repo

00:06:25,759 --> 00:06:31,039
take place in this here uh that

00:06:33,440 --> 00:06:38,400
um it depends um i will talk about when

00:06:37,039 --> 00:06:40,400
i talk about what's in my bundle i do

00:06:38,400 --> 00:06:42,800
have some plugins that interact

00:06:40,400 --> 00:06:44,160
as part of the release but i mean if

00:06:42,800 --> 00:06:46,840
you're just

00:06:44,160 --> 00:06:48,560
like as you're working and you're making

00:06:46,840 --> 00:06:51,599
commits

00:06:48,560 --> 00:06:53,440
to add a new feature or something

00:06:51,599 --> 00:06:55,280
you can just use git the way you that's

00:06:53,440 --> 00:06:56,319
why i do i just use get git commit get

00:06:55,280 --> 00:06:58,960
push

00:06:56,319 --> 00:07:00,840
right um what dzilla automates for me is

00:06:58,960 --> 00:07:03,680
some things related to get

00:07:00,840 --> 00:07:04,400
that a related releases like tagging a

00:07:03,680 --> 00:07:07,919
release

00:07:04,400 --> 00:07:10,080
but like that the day-to-day

00:07:07,919 --> 00:07:10,960
coding part distillate doesn't have that

00:07:10,080 --> 00:07:14,479
much to

00:07:10,960 --> 00:07:15,680
do for you okay so it's basically how

00:07:14,479 --> 00:07:17,919
kind of

00:07:15,680 --> 00:07:19,599
make it nice and happy chuck it back

00:07:17,919 --> 00:07:22,880
into github

00:07:19,599 --> 00:07:25,759
and then release it yes

00:07:22,880 --> 00:07:27,599
yes and i ideally want to set up

00:07:25,759 --> 00:07:29,039
continuous integration maybe with github

00:07:27,599 --> 00:07:32,080
actions i've been using as

00:07:29,039 --> 00:07:33,120
azure um and that's all passing and so

00:07:32,080 --> 00:07:36,240
on

00:07:33,120 --> 00:07:37,840
yeah that's okay separate so

00:07:36,240 --> 00:07:39,759
let's talk about what's in my bundle

00:07:37,840 --> 00:07:40,720
it's a lot of stuff i have about 50

00:07:39,759 --> 00:07:43,440
plugins

00:07:40,720 --> 00:07:45,199
maybe more since i made this slide a

00:07:43,440 --> 00:07:48,160
couple years ago

00:07:45,199 --> 00:07:50,400
so what's what's the bundle do uh it has

00:07:48,160 --> 00:07:52,479
a custom makefile.pl generator

00:07:50,400 --> 00:07:53,680
uh it used to do more but now all it

00:07:52,479 --> 00:07:57,759
does is if

00:07:53,680 --> 00:08:01,440
the bundle if the if the distro contains

00:07:57,759 --> 00:08:02,560
xx code then it adds some compiler flags

00:08:01,440 --> 00:08:05,680
wall and w

00:08:02,560 --> 00:08:07,599
error uh when i'm running tests

00:08:05,680 --> 00:08:08,720
locally so that i can catch compiler

00:08:07,599 --> 00:08:11,520
warnings

00:08:08,720 --> 00:08:12,960
um that's all it does for now i have

00:08:11,520 --> 00:08:15,280
some distros that

00:08:12,960 --> 00:08:17,199
themselves have further customized this

00:08:15,280 --> 00:08:20,000
to do more stuff

00:08:17,199 --> 00:08:21,440
uh there's this autoprerex plug-in that

00:08:20,000 --> 00:08:23,280
i believe is part of the distillate core

00:08:21,440 --> 00:08:25,360
that i enable it scans all your code to

00:08:23,280 --> 00:08:27,199
figure out what your dependencies are

00:08:25,360 --> 00:08:28,560
so it just looks essentially for use and

00:08:27,199 --> 00:08:30,479
require lines

00:08:28,560 --> 00:08:31,919
and if those using require lines have

00:08:30,479 --> 00:08:33,839
versions and that becomes the version

00:08:31,919 --> 00:08:35,680
you depend on otherwise it just sets the

00:08:33,839 --> 00:08:37,200
version to zero

00:08:35,680 --> 00:08:39,120
that's really handy so i don't have to

00:08:37,200 --> 00:08:39,440
maintain that list and that way you know

00:08:39,120 --> 00:08:42,719
if i

00:08:39,440 --> 00:08:45,120
add a module or or drop a module that

00:08:42,719 --> 00:08:46,640
in the code then this just gets updated

00:08:45,120 --> 00:08:49,040
automatically

00:08:46,640 --> 00:08:50,880
it also adds some extra prereq so if my

00:08:49,040 --> 00:08:52,800
distro uses test two

00:08:50,880 --> 00:08:54,480
and make sure required version of test

00:08:52,800 --> 00:08:56,160
more that has test2

00:08:54,480 --> 00:08:58,000
otherwise it just requires a version of

00:08:56,160 --> 00:08:59,680
testimony with subtest support because i

00:08:58,000 --> 00:09:02,160
like subtests

00:08:59,680 --> 00:09:04,000
it adds some linting modules as develop

00:09:02,160 --> 00:09:06,399
phase requirements

00:09:04,000 --> 00:09:08,160
uh not you know not relevant to most

00:09:06,399 --> 00:09:10,800
people but if you want to hack on it

00:09:08,160 --> 00:09:12,800
that's useful to have in the metadata uh

00:09:10,800 --> 00:09:16,480
there's some github integration

00:09:12,800 --> 00:09:18,880
so it sets metadata in the

00:09:16,480 --> 00:09:22,480
the distro when it's being released from

00:09:18,880 --> 00:09:22,480
based on github so it looks at

00:09:22,800 --> 00:09:26,880
github to get the repository information

00:09:25,200 --> 00:09:27,680
the bug tracker which is the you know

00:09:26,880 --> 00:09:31,680
github

00:09:27,680 --> 00:09:32,560
project issues page and it also goes to

00:09:31,680 --> 00:09:35,279
github

00:09:32,560 --> 00:09:38,800
and updates github's project description

00:09:35,279 --> 00:09:40,959
to link back to meta cpan

00:09:38,800 --> 00:09:42,320
there's a ton of test generators that

00:09:40,959 --> 00:09:44,080
i'm using uh

00:09:42,320 --> 00:09:45,600
sorry i mentioned pod syntax test

00:09:44,080 --> 00:09:47,200
there's a pod coverage test there's a

00:09:45,600 --> 00:09:49,760
test for mojibaki which is

00:09:47,200 --> 00:09:51,440
like corrupted unicode a clean

00:09:49,760 --> 00:09:53,279
namespaces test

00:09:51,440 --> 00:09:55,440
i test that the changes file is in the

00:09:53,279 --> 00:09:59,440
format i like this is like

00:09:55,440 --> 00:10:01,760
so uh uptight but i just i

00:09:59,440 --> 00:10:04,079
love all these tests uh i test that the

00:10:01,760 --> 00:10:06,399
meta.json file is correct

00:10:04,079 --> 00:10:08,320
uh there's a test for uh white space

00:10:06,399 --> 00:10:08,959
again i'm not a monster it's spaces on

00:10:08,320 --> 00:10:11,920
tabs

00:10:08,959 --> 00:10:13,680
i also test that there's not like space

00:10:11,920 --> 00:10:15,519
before the end of a like

00:10:13,680 --> 00:10:16,839
after the last printable character

00:10:15,519 --> 00:10:20,720
before a new line

00:10:16,839 --> 00:10:22,079
um there's a file name portability test

00:10:20,720 --> 00:10:23,360
to make sure this will work on goofy

00:10:22,079 --> 00:10:26,399
file systems

00:10:23,360 --> 00:10:28,560
uh it tests the code in the synopsis

00:10:26,399 --> 00:10:30,399
of the documentation it runs my tool

00:10:28,560 --> 00:10:30,959
precious which is a replacement for tidy

00:10:30,399 --> 00:10:32,720
all

00:10:30,959 --> 00:10:34,240
to check that all the files past the

00:10:32,720 --> 00:10:35,040
lending checks there's a compilation

00:10:34,240 --> 00:10:37,040
test

00:10:35,040 --> 00:10:38,079
a test quote unquote that reports

00:10:37,040 --> 00:10:40,800
prereqs

00:10:38,079 --> 00:10:42,480
uh so when users who are installing it

00:10:40,800 --> 00:10:42,959
and running tests run it it just prints

00:10:42,480 --> 00:10:44,720
out

00:10:42,959 --> 00:10:46,079
the versions about all the prereqs you

00:10:44,720 --> 00:10:48,880
have installed which is helpful

00:10:46,079 --> 00:10:50,560
for debugging uh and it also attests to

00:10:48,880 --> 00:10:52,480
check that the versions are seen in all

00:10:50,560 --> 00:10:53,360
the individual module files in the

00:10:52,480 --> 00:10:54,640
distribution

00:10:53,360 --> 00:10:57,120
there's probably more tests that i

00:10:54,640 --> 00:10:58,800
didn't list here what else it does it do

00:10:57,120 --> 00:11:01,040
it generates some useful files

00:10:58,800 --> 00:11:02,880
so there's a contributing.md file it

00:11:01,040 --> 00:11:05,920
generates an install.mde

00:11:02,880 --> 00:11:08,000
code of contact.md it generates a whole

00:11:05,920 --> 00:11:10,959
bunch of documentation

00:11:08,000 --> 00:11:12,240
um it runs all the tests before release

00:11:10,959 --> 00:11:14,079
and there's a bunch of other release

00:11:12,240 --> 00:11:16,160
checks so i mentioned the changes file

00:11:14,079 --> 00:11:17,920
check there's a check to make sure i

00:11:16,160 --> 00:11:21,200
have the newest versions of all my

00:11:17,920 --> 00:11:22,800
dependencies installed to make sure that

00:11:21,200 --> 00:11:24,880
i don't want to release something only

00:11:22,800 --> 00:11:26,800
to find out that

00:11:24,880 --> 00:11:28,000
there's a new version of the dependency

00:11:26,800 --> 00:11:30,560
that was up there before my

00:11:28,000 --> 00:11:32,079
release that would have broken that code

00:11:30,560 --> 00:11:33,200
so i make sure that i have all that up

00:11:32,079 --> 00:11:35,920
to date and make sure

00:11:33,200 --> 00:11:37,519
those dependencies have not changed the

00:11:35,920 --> 00:11:39,120
way it breaks my code

00:11:37,519 --> 00:11:40,959
uh there's a check to make sure all my

00:11:39,120 --> 00:11:42,000
dependencies are actually on cpan

00:11:40,959 --> 00:11:43,440
because sometimes

00:11:42,000 --> 00:11:45,120
if you're developing a set of

00:11:43,440 --> 00:11:45,920
distributions and one depends on the

00:11:45,120 --> 00:11:48,079
other

00:11:45,920 --> 00:11:50,000
you might release them in a non-ideal

00:11:48,079 --> 00:11:51,680
order and that can be confusing for

00:11:50,000 --> 00:11:52,959
people trying to use it

00:11:51,680 --> 00:11:54,880
there's something that checks to make

00:11:52,959 --> 00:11:58,000
sure there's no merge conflict

00:11:54,880 --> 00:11:59,519
markers in my source uh and then there's

00:11:58,000 --> 00:12:00,079
one check that make sure i'm on the

00:11:59,519 --> 00:12:03,440
master

00:12:00,079 --> 00:12:05,519
or main branch uh if i'm doing a stable

00:12:03,440 --> 00:12:08,240
release for trial releases i can

00:12:05,519 --> 00:12:09,680
it'll let me release from any branch but

00:12:08,240 --> 00:12:10,639
for stable releases i want to be

00:12:09,680 --> 00:12:14,079
releasing from the

00:12:10,639 --> 00:12:15,839
primary branch and then there's also

00:12:14,079 --> 00:12:17,040
something that updates changes to add

00:12:15,839 --> 00:12:20,160
the release date

00:12:17,040 --> 00:12:21,920
uh as i do the release uh and there's

00:12:20,160 --> 00:12:22,399
even more stuff so it does the release

00:12:21,920 --> 00:12:24,000
itself

00:12:22,399 --> 00:12:26,880
and getting to matthew's question

00:12:24,000 --> 00:12:29,440
earlier it tags the release and get

00:12:26,880 --> 00:12:30,800
uh it copies all of the generated files

00:12:29,440 --> 00:12:31,600
like that code of conduct the

00:12:30,800 --> 00:12:34,959
contributing

00:12:31,600 --> 00:12:36,399
md the readme uh the mainfile.pl all

00:12:34,959 --> 00:12:37,120
that stuff it copies it back into the

00:12:36,399 --> 00:12:40,320
repo

00:12:37,120 --> 00:12:42,560
and commits them the reason i do that

00:12:40,320 --> 00:12:44,800
is without that if there's no

00:12:42,560 --> 00:12:47,920
makefile.pl for example in your re

00:12:44,800 --> 00:12:49,760
repo it can be challenging for

00:12:47,920 --> 00:12:51,120
casual contributors to contribute

00:12:49,760 --> 00:12:51,760
because then they need to install

00:12:51,120 --> 00:12:54,079
distillate

00:12:51,760 --> 00:12:56,000
all your your bundle or all the plugins

00:12:54,079 --> 00:12:58,880
you use just to like run

00:12:56,000 --> 00:13:00,320
potentially run diesel test um and

00:12:58,880 --> 00:13:01,920
that's really annoying

00:13:00,320 --> 00:13:04,240
for people who just want to make a quick

00:13:01,920 --> 00:13:06,079
fix so i copy all the generated files

00:13:04,240 --> 00:13:06,720
back so that you don't have to have to

00:13:06,079 --> 00:13:08,480
zilla

00:13:06,720 --> 00:13:10,800
for casual contributions if you want to

00:13:08,480 --> 00:13:12,880
be seriously working on it

00:13:10,800 --> 00:13:14,399
it is helpful to have disilla and i

00:13:12,880 --> 00:13:15,680
might encourage you to install it but

00:13:14,399 --> 00:13:18,639
just for simple stuff

00:13:15,680 --> 00:13:19,519
it's nice to make it not necessary then

00:13:18,639 --> 00:13:22,000
it bumps

00:13:19,519 --> 00:13:22,639
all the versions in all of my modules

00:13:22,000 --> 00:13:24,800
all the dollar

00:13:22,639 --> 00:13:25,839
uppercase version variables it commits

00:13:24,800 --> 00:13:28,160
the version fund

00:13:25,839 --> 00:13:30,160
from as a separate commit and then it

00:13:28,160 --> 00:13:31,519
pushes that tag and the commits it just

00:13:30,160 --> 00:13:33,839
made back to the repo

00:13:31,519 --> 00:13:35,040
so basically there's a couple things

00:13:33,839 --> 00:13:37,839
post release

00:13:35,040 --> 00:13:38,800
that it's doing to get and then pushing

00:13:37,839 --> 00:13:41,519
that back

00:13:38,800 --> 00:13:42,959
to the remote so that's really nice and

00:13:41,519 --> 00:13:44,800
then there's this thing called pod

00:13:42,959 --> 00:13:47,600
weaver and this is how the

00:13:44,800 --> 00:13:49,760
the pod stuff has so pod weaver is

00:13:47,600 --> 00:13:51,680
basically the zillow for pod it does pod

00:13:49,760 --> 00:13:54,959
munching it does pop generation

00:13:51,680 --> 00:13:58,720
it's also plug-in based uh

00:13:54,959 --> 00:14:00,959
it's it's kind of nutty um pod weaver

00:13:58,720 --> 00:14:03,279
also supports bundles

00:14:00,959 --> 00:14:05,120
and you can configure configure to zilla

00:14:03,279 --> 00:14:06,160
to invoke pod weaver but there's one

00:14:05,120 --> 00:14:07,519
annoying thing about

00:14:06,160 --> 00:14:09,360
all of this which is there's no way to

00:14:07,519 --> 00:14:11,600
pass config

00:14:09,360 --> 00:14:12,639
information from diszilla to pod weaver

00:14:11,600 --> 00:14:14,000
you can't really put something in

00:14:12,639 --> 00:14:17,920
this.any

00:14:14,000 --> 00:14:21,120
that you're pod weaver

00:14:17,920 --> 00:14:22,240
bundle can look at at least there's no

00:14:21,120 --> 00:14:25,600
sane way

00:14:22,240 --> 00:14:28,880
fortunately there is a completely

00:14:25,600 --> 00:14:32,320
mad way which is you use pad walker

00:14:28,880 --> 00:14:35,199
to extract flexible lexical value who's

00:14:32,320 --> 00:14:35,680
out of another subroutine so we get

00:14:35,199 --> 00:14:38,240
dollar

00:14:35,680 --> 00:14:40,240
self out of this pod weaver plug-in

00:14:38,240 --> 00:14:41,600
which is the

00:14:40,240 --> 00:14:43,839
the plug-in then we can get the

00:14:41,600 --> 00:14:47,279
distillate object and then out of the

00:14:43,839 --> 00:14:48,480
zilla object we can get config so i can

00:14:47,279 --> 00:14:52,639
configure

00:14:48,480 --> 00:14:55,600
my pod weaver stuff in my disk.mini

00:14:52,639 --> 00:14:56,000
this i'm pretty sure was created this is

00:14:55,600 --> 00:14:59,360
this

00:14:56,000 --> 00:15:01,760
this completely uh nutty

00:14:59,360 --> 00:15:02,399
approach was created by karen etheridge

00:15:01,760 --> 00:15:06,079
and i

00:15:02,399 --> 00:15:09,120
really appreciate being able to copy it

00:15:06,079 --> 00:15:10,720
i have a couple bonus slides but i want

00:15:09,120 --> 00:15:12,959
i think we'll have that we'll have time

00:15:10,720 --> 00:15:14,399
for questions so

00:15:12,959 --> 00:15:17,040
i'll also talk about what's in my pod

00:15:14,399 --> 00:15:19,839
weaver bundle so i make sure there's a

00:15:17,040 --> 00:15:20,560
encoding utf-8 at the start of the pod

00:15:19,839 --> 00:15:23,440
um

00:15:20,560 --> 00:15:25,120
there's some like quick pod weaver

00:15:23,440 --> 00:15:27,120
supports some kind of

00:15:25,120 --> 00:15:28,800
easier ways to write things like lists

00:15:27,120 --> 00:15:31,120
and verbatim sections

00:15:28,800 --> 00:15:33,680
and they translate them into a proper

00:15:31,120 --> 00:15:34,880
pod it puts a header at the top based on

00:15:33,680 --> 00:15:36,720
some metadata

00:15:34,880 --> 00:15:38,880
it generates the name and the version

00:15:36,720 --> 00:15:40,639
sections in the pod

00:15:38,880 --> 00:15:42,399
there's some other kind of sections that

00:15:40,639 --> 00:15:43,600
can insert based on things that

00:15:42,399 --> 00:15:45,680
configured

00:15:43,600 --> 00:15:47,120
uh then it puts the synopsis description

00:15:45,680 --> 00:15:50,720
and overview in

00:15:47,120 --> 00:15:52,320
and there's also it lets you do

00:15:50,720 --> 00:15:54,000
do things like document attributes

00:15:52,320 --> 00:15:57,440
methods functions and types

00:15:54,000 --> 00:16:01,040
in a way that it will then turn it into

00:15:57,440 --> 00:16:02,800
standard pod which is nice uh

00:16:01,040 --> 00:16:04,639
and then there's some other sections it

00:16:02,800 --> 00:16:06,399
generates a support section if one isn't

00:16:04,639 --> 00:16:07,519
already there and it basically says you

00:16:06,399 --> 00:16:09,759
can

00:16:07,519 --> 00:16:12,399
go to the issue tracker or email me but

00:16:09,759 --> 00:16:16,560
don't email me go to the issue tracker

00:16:12,399 --> 00:16:18,399
um there's a source section which points

00:16:16,560 --> 00:16:21,199
you back to the repo

00:16:18,399 --> 00:16:23,040
the link to the github repo if i'm the

00:16:21,199 --> 00:16:25,759
distro's copyright holder

00:16:23,040 --> 00:16:27,600
it puts a donation section in if i'm not

00:16:25,759 --> 00:16:28,079
it's kind of inappropriate for me to put

00:16:27,600 --> 00:16:30,240
a

00:16:28,079 --> 00:16:31,839
give me money thing and somebody else's

00:16:30,240 --> 00:16:32,639
thing that i just happen to be working

00:16:31,839 --> 00:16:34,480
on

00:16:32,639 --> 00:16:36,480
uh generates an author section a

00:16:34,480 --> 00:16:38,079
contributor section a legal section with

00:16:36,480 --> 00:16:39,519
like the copyright info

00:16:38,079 --> 00:16:41,360
and then there's like an optional footer

00:16:39,519 --> 00:16:44,160
it can insert

00:16:41,360 --> 00:16:44,560
uh some other bundles to check out that

00:16:44,160 --> 00:16:47,440
have

00:16:44,560 --> 00:16:48,079
interesting stuff uh ether that's karen

00:16:47,440 --> 00:16:51,519
etheridge

00:16:48,079 --> 00:16:52,959
who i stole a bunch of stuff from hers

00:16:51,519 --> 00:16:54,639
yannick has some interesting ones

00:16:52,959 --> 00:16:56,160
there's lots of others if you search to

00:16:54,639 --> 00:16:59,519
sell a plug-in bundle

00:16:56,160 --> 00:17:03,199
but i cannot emphasize this enough

00:16:59,519 --> 00:17:04,000
never never never and i really mean

00:17:03,199 --> 00:17:08,079
never

00:17:04,000 --> 00:17:10,640
use somebody else's bundle in your stuff

00:17:08,079 --> 00:17:12,720
uh the reason being i make zero

00:17:10,640 --> 00:17:14,640
stability guarantees about my bundle i'm

00:17:12,720 --> 00:17:15,600
gonna take change it to do whatever the

00:17:14,640 --> 00:17:17,600
heck i want

00:17:15,600 --> 00:17:18,640
it does weird custom things that are

00:17:17,600 --> 00:17:21,839
just

00:17:18,640 --> 00:17:23,600
things i like to do and i may randomly

00:17:21,839 --> 00:17:24,720
remove functionality that you're

00:17:23,600 --> 00:17:27,199
depending on

00:17:24,720 --> 00:17:28,799
with absolutely no notice so what you if

00:17:27,199 --> 00:17:31,600
you like what my bundle does

00:17:28,799 --> 00:17:33,120
just copy it and put it you know distill

00:17:31,600 --> 00:17:36,240
a plug and bundle

00:17:33,120 --> 00:17:38,080
your cpan name

00:17:36,240 --> 00:17:39,600
and and do it that way and then you can

00:17:38,080 --> 00:17:41,280
check out my new releases and copy

00:17:39,600 --> 00:17:42,320
things you like but really it's a really

00:17:41,280 --> 00:17:44,720
bad idea

00:17:42,320 --> 00:17:45,440
to use another author's bundle directly

00:17:44,720 --> 00:17:47,200
because then

00:17:45,440 --> 00:17:48,880
unless unless they're going to guarantee

00:17:47,200 --> 00:17:50,640
stability in their documentation if they

00:17:48,880 --> 00:17:52,799
do then great that's fine

00:17:50,640 --> 00:17:54,240
but otherwise i really can't emphasize

00:17:52,799 --> 00:17:56,799
enough

00:17:54,240 --> 00:17:58,320
do not don't don't use my bundle at

00:17:56,799 --> 00:18:00,559
least that's for sure

00:17:58,320 --> 00:18:01,679
uh all right that is all i had any

00:18:00,559 --> 00:18:04,799
questions

00:18:01,679 --> 00:18:09,200
i got a question yes so uh

00:18:04,799 --> 00:18:10,720
uh uh i i would have to say my biggest

00:18:09,200 --> 00:18:12,559
gripe with disilla

00:18:10,720 --> 00:18:14,160
actually ties him with what you just got

00:18:12,559 --> 00:18:17,120
done saying

00:18:14,160 --> 00:18:20,000
and that's bisect when i hit a module

00:18:17,120 --> 00:18:21,840
especially somebody else's stuff

00:18:20,000 --> 00:18:23,360
and i want to bisect and figure out when

00:18:21,840 --> 00:18:25,440
something broke

00:18:23,360 --> 00:18:27,440
especially if you've been changing the

00:18:25,440 --> 00:18:30,880
api of

00:18:27,440 --> 00:18:33,120
of your bundle that means that when i

00:18:30,880 --> 00:18:34,480
try to bisect back further in time

00:18:33,120 --> 00:18:37,039
sometimes

00:18:34,480 --> 00:18:38,400
the bundle will misbehave or behave

00:18:37,039 --> 00:18:40,480
unexpectedly

00:18:38,400 --> 00:18:42,559
makes it very difficult to figure out

00:18:40,480 --> 00:18:45,039
what was going wrong

00:18:42,559 --> 00:18:46,000
often i'm lucky and i can just do proof

00:18:45,039 --> 00:18:48,400
dash l

00:18:46,000 --> 00:18:49,600
t slash whatever to to get what i want

00:18:48,400 --> 00:18:51,360
but

00:18:49,600 --> 00:18:52,960
that's for the simple modules the more

00:18:51,360 --> 00:18:56,000
complex module

00:18:52,960 --> 00:18:58,559
it's a big pain in the butt yeah

00:18:56,000 --> 00:19:00,559
yeah that's a good point i mean one

00:18:58,559 --> 00:19:03,360
thing i have started doing is

00:19:00,559 --> 00:19:04,000
is putting the version of the bundle

00:19:03,360 --> 00:19:08,320
that the

00:19:04,000 --> 00:19:10,080
thing was built with into its

00:19:08,320 --> 00:19:11,760
into the distinction as an author

00:19:10,080 --> 00:19:14,400
dependence

00:19:11,760 --> 00:19:15,440
like sounds like gibberish i'm not

00:19:14,400 --> 00:19:18,960
making any sense

00:19:15,440 --> 00:19:22,240
uh so for things of mine that do that

00:19:18,960 --> 00:19:24,480
then that your bisect could install the

00:19:22,240 --> 00:19:26,320
version of my bundle that is referenced

00:19:24,480 --> 00:19:28,559
in the destiny

00:19:26,320 --> 00:19:30,640
it's going to be slower to bisect that

00:19:28,559 --> 00:19:31,919
way but that would help with it at least

00:19:30,640 --> 00:19:35,120
but yes

00:19:31,919 --> 00:19:38,559
um but that's kind of

00:19:35,120 --> 00:19:41,280
going to be an issue

00:19:38,559 --> 00:19:42,400
with any dependency that the thing has

00:19:41,280 --> 00:19:44,880
like if you're trying

00:19:42,400 --> 00:19:46,400
if you're going back well it also it's

00:19:44,880 --> 00:19:49,600
it also in the same way

00:19:46,400 --> 00:19:51,600
creates uh somewhat of a ci challenge

00:19:49,600 --> 00:19:54,960
too right because it means in order to

00:19:51,600 --> 00:19:57,280
see i you have to install the bundle

00:19:54,960 --> 00:19:58,640
yeah well i have a whole other talk

00:19:57,280 --> 00:20:02,080
about my azure

00:19:58,640 --> 00:20:03,919
pipeline stuff that do exactly like

00:20:02,080 --> 00:20:06,080
the way my stuff works in azure

00:20:03,919 --> 00:20:07,200
pipelines for ci is there's like a step

00:20:06,080 --> 00:20:09,520
that does

00:20:07,200 --> 00:20:11,360
like a diesel build to build a tarball

00:20:09,520 --> 00:20:14,480
like it installs all the

00:20:11,360 --> 00:20:16,799
desilla and author pre-racks or

00:20:14,480 --> 00:20:19,039
like build prereqs the prerequisites

00:20:16,799 --> 00:20:20,720
need to run to zillow like so my bundle

00:20:19,039 --> 00:20:22,400
uh and then it runs diesel build and it

00:20:20,720 --> 00:20:24,080
makes a tarball and it always does this

00:20:22,400 --> 00:20:25,600
with the latest version of pearl

00:20:24,080 --> 00:20:28,000
and then it uploads the tarballs and

00:20:25,600 --> 00:20:30,640
artifact and then schedules like

00:20:28,000 --> 00:20:32,320
50 jobs for many different versions of

00:20:30,640 --> 00:20:34,080
pearl across many different os's and

00:20:32,320 --> 00:20:37,600
each of those jobs

00:20:34,080 --> 00:20:41,679
downloads the tarball and runs

00:20:37,600 --> 00:20:43,679
the the tests so it's more it like

00:20:41,679 --> 00:20:45,760
better simulates the experience that end

00:20:43,679 --> 00:20:47,600
users would have

00:20:45,760 --> 00:20:49,520
and then for one of those jobs it will

00:20:47,600 --> 00:20:52,159
run all the author and release tests

00:20:49,520 --> 00:20:53,760
just because i'd like to do that too

00:20:52,159 --> 00:20:55,120
but yes it's a significantly more

00:20:53,760 --> 00:20:56,000
complicated workflow but i have a whole

00:20:55,120 --> 00:20:59,280
thing

00:20:56,000 --> 00:21:01,440
like as a set of template like like

00:20:59,280 --> 00:21:03,280
there's a project i mean that you can

00:21:01,440 --> 00:21:07,679
just use the templates for

00:21:03,280 --> 00:21:10,000
ci yeah like it's like

00:21:07,679 --> 00:21:12,400
it's almost like though it would be nice

00:21:10,000 --> 00:21:15,120
to have a dissilla

00:21:12,400 --> 00:21:15,760
ci mode or something uh that was

00:21:15,120 --> 00:21:18,400
standard

00:21:15,760 --> 00:21:19,360
that wouldn't require that i have 50

00:21:18,400 --> 00:21:20,960
billion bundles

00:21:19,360 --> 00:21:22,640
it would just generate the make file and

00:21:20,960 --> 00:21:24,159
run run the test

00:21:22,640 --> 00:21:26,000
yeah but it can't generate the make file

00:21:24,159 --> 00:21:28,640
unless it knows what all the main file

00:21:26,000 --> 00:21:30,480
generating plugins are and you can't do

00:21:28,640 --> 00:21:32,559
that without getting the bundle

00:21:30,480 --> 00:21:33,840
well i i'm i'm i was thinking you'd have

00:21:32,559 --> 00:21:35,919
a special section that would

00:21:33,840 --> 00:21:37,840
clarify that well really for make file

00:21:35,919 --> 00:21:42,080
you just need these two that come with

00:21:37,840 --> 00:21:44,159
core disilla anyways just a thought

00:21:42,080 --> 00:21:46,640
yeah no i understand the problem that

00:21:44,159 --> 00:21:46,640
makes sense

00:21:46,720 --> 00:21:50,080
if if rick was here i'd complain to him

00:21:48,720 --> 00:21:53,760
instead

00:21:50,080 --> 00:21:53,760
well he's giving a talk at some point

00:21:54,400 --> 00:21:59,840
any other any other questions or

00:21:56,080 --> 00:21:59,840
complaints i'm open to either

00:22:03,760 --> 00:22:07,360
all right i'll take that as no uh you

00:22:05,919 --> 00:22:08,080
know if anyone comes up hang me on the

00:22:07,360 --> 00:22:13,200
slack

00:22:08,080 --> 00:22:13,200

YouTube URL: https://www.youtube.com/watch?v=h0Xx-KdAMGk


