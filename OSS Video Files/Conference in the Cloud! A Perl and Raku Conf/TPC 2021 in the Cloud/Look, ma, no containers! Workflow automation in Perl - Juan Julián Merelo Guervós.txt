Title: Look, ma, no containers! Workflow automation in Perl - Juan JuliÃ¡n Merelo GuervÃ³s
Publication date: 2021-06-10
Playlist: TPC 2021 in the Cloud
Description: 
	Perl is everywhere, and that includes most base configurations in CI/CD environments. Leveraging the system Perl they have, and the libraries installed by default is quite easy if you know how. In this talk we'll tell you how to use your favorite language in Travis, GitHub Actions and others.

I was very happy the day I discovered I could use Perl in any GitHub action, since it's installed there *by default*. From then on, I discovered it can also be used in other environments, such as Travis, and even Docker Hub. Doing a bit of automation using Perl is incredibly easy that way. We'll tell you how to do common tasks using Perl, as well as how to use installed libraries, install your own, or use Github::Actions, a CPAN module, to help you write GitHub actions steps.

The main advantage is the presence of a Git Perl module there, but there are many other things you can do to.
Captions: 
	00:00:00,240 --> 00:00:08,080
okay so good evening here in spain it's

00:00:03,840 --> 00:00:09,519
actually brethren it's 10 30. uh

00:00:08,080 --> 00:00:11,440
first thing i'm very grateful to the

00:00:09,519 --> 00:00:14,000
organization for allowing me to finally

00:00:11,440 --> 00:00:16,240
deliver this this talk so

00:00:14,000 --> 00:00:18,880
apparently it was scheduled to give it

00:00:16,240 --> 00:00:22,000
yesterday night which i totally missed

00:00:18,880 --> 00:00:24,880
and i was

00:00:22,000 --> 00:00:25,279
totally away from my keyboard at 1030.

00:00:24,880 --> 00:00:27,680
but

00:00:25,279 --> 00:00:29,119
then i'm gonna do it now so i guess it

00:00:27,680 --> 00:00:31,920
it's okay

00:00:29,119 --> 00:00:32,480
so i'm going to talk about how we can do

00:00:31,920 --> 00:00:34,079
a

00:00:32,480 --> 00:00:36,320
workflow automation in pair without

00:00:34,079 --> 00:00:40,000
using any kind of container

00:00:36,320 --> 00:00:42,320
which i guess is is kind of a good thing

00:00:40,000 --> 00:00:44,640
several things for several reasons first

00:00:42,320 --> 00:00:48,239
is because we can we can use

00:00:44,640 --> 00:00:50,320
in basically every kind of of a workflow

00:00:48,239 --> 00:00:52,320
we could think about second thing

00:00:50,320 --> 00:00:54,239
because if you're not using anything

00:00:52,320 --> 00:00:58,239
that's external

00:00:54,239 --> 00:01:00,320
to what you already have on the

00:00:58,239 --> 00:01:01,520
whatever is running the workflow and

00:01:00,320 --> 00:01:03,280
then you set time

00:01:01,520 --> 00:01:05,199
and saving time is essentially in

00:01:03,280 --> 00:01:08,400
workflow automation

00:01:05,199 --> 00:01:11,680
uh a little bit about myself

00:01:08,400 --> 00:01:13,040
so i right now i'm 56 so i've been

00:01:11,680 --> 00:01:16,960
programming

00:01:13,040 --> 00:01:21,040
essentially for half my life since i was

00:01:16,960 --> 00:01:23,439
28 or so 93 and lately i'm

00:01:21,040 --> 00:01:25,119
working with raku mainly but that

00:01:23,439 --> 00:01:26,799
doesn't mean that i've left very

00:01:25,119 --> 00:01:29,439
as a matter of fact i still maintain a

00:01:26,799 --> 00:01:33,040
series of spare modules and

00:01:29,439 --> 00:01:34,240
parallel uh scripts which i use for for

00:01:33,040 --> 00:01:36,880
every work or

00:01:34,240 --> 00:01:38,479
doing any kind of stuff so i'm still

00:01:36,880 --> 00:01:41,920
doing prayer

00:01:38,479 --> 00:01:43,840
and the main reason i i started to use

00:01:41,920 --> 00:01:46,880
parting automation was basically

00:01:43,840 --> 00:01:49,920
because i just wonder

00:01:46,880 --> 00:01:51,759
okay so i can use bash in workflow

00:01:49,920 --> 00:01:54,560
automation if i need to

00:01:51,759 --> 00:01:56,159
some some tasks yeah you know any kind

00:01:54,560 --> 00:01:57,280
of thing like copying things or removing

00:01:56,159 --> 00:01:58,640
things or whatever

00:01:57,280 --> 00:02:00,880
can i do something more complex with

00:01:58,640 --> 00:02:01,600
spare and then also something i checked

00:02:00,880 --> 00:02:05,920
in a

00:02:01,600 --> 00:02:09,759
in a workflow i wrote perl i said

00:02:05,920 --> 00:02:12,800
so it's there so i can use it

00:02:09,759 --> 00:02:14,800
so i started to use it and then

00:02:12,800 --> 00:02:17,840
in that perspective i really found out

00:02:14,800 --> 00:02:21,120
that it wasn't so far-fetched to think

00:02:17,840 --> 00:02:24,000
that it was going to be there first

00:02:21,120 --> 00:02:25,120
uh and foremost basically parallel

00:02:24,000 --> 00:02:26,800
guitar very

00:02:25,120 --> 00:02:28,319
very close friends they are big and

00:02:26,800 --> 00:02:30,720
close friends and they are close

00:02:28,319 --> 00:02:30,720
together

00:02:30,800 --> 00:02:35,200
a part of git is written in pearl

00:02:35,280 --> 00:02:40,879
and actually whenever you download a uh

00:02:38,239 --> 00:02:43,360
whenever you download a repository from

00:02:40,879 --> 00:02:44,959
uh or you initiate a repository with it

00:02:43,360 --> 00:02:46,160
it's going to include some pair code in

00:02:44,959 --> 00:02:48,959
your

00:02:46,160 --> 00:02:50,480
in your repository right so there is

00:02:48,959 --> 00:02:50,879
going to be a series of examples which

00:02:50,480 --> 00:02:54,080
are

00:02:50,879 --> 00:02:57,040
stored in in dot git slash hooks

00:02:54,080 --> 00:02:58,239
slash preparation message.sample that's

00:02:57,040 --> 00:03:01,360
written in pair

00:02:58,239 --> 00:03:02,840
there are no examples in i think there

00:03:01,360 --> 00:03:06,000
are no examples in python or

00:03:02,840 --> 00:03:09,360
php there are there are several

00:03:06,000 --> 00:03:11,840
cell scripts and there are there are

00:03:09,360 --> 00:03:14,560
examples in pair like this one this one

00:03:11,840 --> 00:03:17,760
is actually a good one i

00:03:14,560 --> 00:03:20,239
probably said that you are you are

00:03:17,760 --> 00:03:21,680
better than myself at this but i really

00:03:20,239 --> 00:03:25,200
had to look this up

00:03:21,680 --> 00:03:28,879
so this is actually using a uh

00:03:25,200 --> 00:03:30,319
flip regex flip flop which is the the

00:03:28,879 --> 00:03:33,599
dot dot thing

00:03:30,319 --> 00:03:35,920
so it's kind of uh

00:03:33,599 --> 00:03:38,239
printing a comment message so this is a

00:03:35,920 --> 00:03:42,159
hook for comment message messages

00:03:38,239 --> 00:03:44,560
it's uh uh print in the commit message

00:03:42,159 --> 00:03:46,640
only if it doesn't have this this kind

00:03:44,560 --> 00:03:47,360
of process right synthesis at the

00:03:46,640 --> 00:03:50,239
beginning

00:03:47,360 --> 00:03:51,599
or at the end so that's that's kind of a

00:03:50,239 --> 00:03:53,840
nice thing

00:03:51,599 --> 00:03:55,519
so normally it's it's fairly it's it's

00:03:53,840 --> 00:03:59,200
also nice prayer and it's

00:03:55,519 --> 00:04:01,840
magic pair continuous integration

00:03:59,200 --> 00:04:02,480
clustering container so you could think

00:04:01,840 --> 00:04:05,120
well maybe

00:04:02,480 --> 00:04:06,640
you know it needs to be there but maybe

00:04:05,120 --> 00:04:09,840
it's not really there

00:04:06,640 --> 00:04:11,040
it's outside and and actually continuous

00:04:09,840 --> 00:04:13,439
integration is running in some

00:04:11,040 --> 00:04:16,880
containers so maybe the containers

00:04:13,439 --> 00:04:21,519
don't contain pairs so do they

00:04:16,880 --> 00:04:24,639
well in general just they do

00:04:21,519 --> 00:04:24,639
for several reasons

00:04:24,960 --> 00:04:29,280
for instance if you look into travis you

00:04:27,600 --> 00:04:30,639
will see that

00:04:29,280 --> 00:04:32,400
you will probably see the example and

00:04:30,639 --> 00:04:33,680
the sample will show you something like

00:04:32,400 --> 00:04:36,000
this right so

00:04:33,680 --> 00:04:38,240
you select a language in the first line

00:04:36,000 --> 00:04:42,240
you say i'm going to use perl

00:04:38,240 --> 00:04:43,919
5.22 and then you do

00:04:42,240 --> 00:04:45,759
some before installations or previous

00:04:43,919 --> 00:04:49,199
restoration this is actually a

00:04:45,759 --> 00:04:53,040
guitar i mean configuration for

00:04:49,199 --> 00:04:54,560
for checking the spelling of of markdown

00:04:53,040 --> 00:04:57,440
text which is something i use very

00:04:54,560 --> 00:04:59,840
usually in all my other things i write

00:04:57,440 --> 00:05:01,680
so then you have to use zip m to install

00:04:59,840 --> 00:05:05,759
some some things like for instance

00:05:01,680 --> 00:05:08,800
text this highlighting is really weird

00:05:05,759 --> 00:05:08,800
i don't really know how

00:05:09,919 --> 00:05:13,199
is highlighted here anyway it doesn't

00:05:11,360 --> 00:05:14,960
mind the thing is that you have to use

00:05:13,199 --> 00:05:18,000
zip again to install things

00:05:14,960 --> 00:05:21,120
but uh of course you just say i

00:05:18,000 --> 00:05:22,320
am choosing the per runner so it's only

00:05:21,120 --> 00:05:25,039
natural that i have

00:05:22,320 --> 00:05:25,039
sipang m

00:05:26,560 --> 00:05:29,759
harness is installed because i have it

00:05:29,120 --> 00:05:34,240
installed

00:05:29,759 --> 00:05:38,000
and so so forth so maybe

00:05:34,240 --> 00:05:41,039
notice after all but yes it is

00:05:38,000 --> 00:05:41,680
so if you just say sudo required which

00:05:41,039 --> 00:05:43,840
means that

00:05:41,680 --> 00:05:45,840
you're going to have supervisor

00:05:43,840 --> 00:05:47,120
privileges inside

00:05:45,840 --> 00:05:49,360
the companion and then you say language

00:05:47,120 --> 00:05:52,960
minimum

00:05:49,360 --> 00:05:54,400
you can still use sipang m so sipangam

00:05:52,960 --> 00:05:57,199
is in the minimal

00:05:54,400 --> 00:05:58,160
container it's the minimum container is

00:05:57,199 --> 00:06:02,000
essentially

00:05:58,160 --> 00:06:05,280
the base machine in this case which is a

00:06:02,000 --> 00:06:07,600
the default machining in travis right

00:06:05,280 --> 00:06:09,280
so you can just say okay so shipping

00:06:07,600 --> 00:06:10,880
mister

00:06:09,280 --> 00:06:12,560
that implies a pair lifts also there of

00:06:10,880 --> 00:06:15,919
course so i can just

00:06:12,560 --> 00:06:18,240
install whatever i want uh

00:06:15,919 --> 00:06:20,639
but of course i need to use sudo because

00:06:18,240 --> 00:06:22,400
this is a system pair

00:06:20,639 --> 00:06:24,880
it's not installed through some

00:06:22,400 --> 00:06:28,400
bellbrook whatever this is a system pair

00:06:24,880 --> 00:06:29,919
so eventually we you know we run

00:06:28,400 --> 00:06:32,560
the screen which is pretty much the same

00:06:29,919 --> 00:06:34,000
thing but

00:06:32,560 --> 00:06:35,759
if you look a little bit further you

00:06:34,000 --> 00:06:39,039
will see that tap harness is

00:06:35,759 --> 00:06:40,400
also there uh

00:06:39,039 --> 00:06:41,440
as a matter of fact it's now in the

00:06:40,400 --> 00:06:42,639
documentation it's now in the

00:06:41,440 --> 00:06:44,800
documentation

00:06:42,639 --> 00:06:46,639
because you know i added a pull request

00:06:44,800 --> 00:06:47,199
to the previous documentation telling

00:06:46,639 --> 00:06:50,560
them

00:06:47,199 --> 00:06:52,080
you know travis is there i mean

00:06:50,560 --> 00:06:54,240
you can find it in drives you have tap

00:06:52,080 --> 00:06:56,880
harness and you have to sepan

00:06:54,240 --> 00:06:58,880
and this version or whatever so you see

00:06:56,880 --> 00:07:02,000
that the default version they have

00:06:58,880 --> 00:07:05,520
is 5.22.1 this is the senior

00:07:02,000 --> 00:07:06,160
or genio runner and this is a default

00:07:05,520 --> 00:07:07,680
version

00:07:06,160 --> 00:07:10,240
they're using so that means that if

00:07:07,680 --> 00:07:13,759
you're going to test for that version

00:07:10,240 --> 00:07:17,280
you're good to go if you want to test

00:07:13,759 --> 00:07:19,759
anything else 5 2 36

00:07:17,280 --> 00:07:21,599
34 or whatever you have to install it

00:07:19,759 --> 00:07:24,880
you have to use the

00:07:21,599 --> 00:07:26,000
the the runner the per runner but if you

00:07:24,880 --> 00:07:28,160
the only thing you have to do is you

00:07:26,000 --> 00:07:30,319
know you want to run to some test or

00:07:28,160 --> 00:07:31,919
you have something installing something

00:07:30,319 --> 00:07:33,120
that uh uses spare but

00:07:31,919 --> 00:07:34,880
it's not really you're not really

00:07:33,120 --> 00:07:36,560
interested in testing all whole versions

00:07:34,880 --> 00:07:37,599
like myself for instance and testing a

00:07:36,560 --> 00:07:40,639
spelling

00:07:37,599 --> 00:07:41,280
er it's okay you can do it and it's

00:07:40,639 --> 00:07:43,840
pretty fast

00:07:41,280 --> 00:07:45,120
you don't even have to set up any kind

00:07:43,840 --> 00:07:47,759
of any kind of runner

00:07:45,120 --> 00:07:49,199
it's going to be a run so even even the

00:07:47,759 --> 00:07:51,120
minimal amount of time that

00:07:49,199 --> 00:07:52,560
travis usually takes is around 15

00:07:51,120 --> 00:07:55,199
seconds is going to be reduced to

00:07:52,560 --> 00:07:55,759
like eight seconds you can run a

00:07:55,199 --> 00:07:58,800
workflow

00:07:55,759 --> 00:08:00,879
in a few seconds but

00:07:58,800 --> 00:08:02,160
there are even more goodies good thing

00:08:00,879 --> 00:08:04,319
is that you have

00:08:02,160 --> 00:08:05,840
you're using the system per so that

00:08:04,319 --> 00:08:09,680
means that you can install

00:08:05,840 --> 00:08:12,879
any kind of per module in the system

00:08:09,680 --> 00:08:14,720
so why not install everything you need

00:08:12,879 --> 00:08:16,319
from the repository right that's going

00:08:14,720 --> 00:08:17,199
to be also pretty fast it's going to be

00:08:16,319 --> 00:08:20,240
faster

00:08:17,199 --> 00:08:21,840
as a matter of fact than using cpa why

00:08:20,240 --> 00:08:22,720
because it's packaged you know it's

00:08:21,840 --> 00:08:24,240
tested

00:08:22,720 --> 00:08:27,440
everything you don't need to worry about

00:08:24,240 --> 00:08:29,840
that so you just installed with engineer

00:08:27,440 --> 00:08:31,680
using the equivalent package as a matter

00:08:29,840 --> 00:08:34,880
of fact this is a very nice

00:08:31,680 --> 00:08:39,039
uh module in sipang which tells you what

00:08:34,880 --> 00:08:42,399
what is the the package equivalent

00:08:39,039 --> 00:08:42,399
to a to a separate module

00:08:42,880 --> 00:08:49,680
and then again you just run your script

00:08:46,640 --> 00:08:53,040
for for doing that so you see that this

00:08:49,680 --> 00:08:54,000
can become very very incredibly fast as

00:08:53,040 --> 00:08:56,959
using the

00:08:54,000 --> 00:08:57,600
the pair that's running in the in the in

00:08:56,959 --> 00:09:00,399
the runner

00:08:57,600 --> 00:09:00,959
right this is senior actually you could

00:09:00,399 --> 00:09:04,640
think that

00:09:00,959 --> 00:09:06,399
uh if i remember correctly in the latest

00:09:04,640 --> 00:09:08,959
version of

00:09:06,399 --> 00:09:10,240
ubuntu in the latest lts version of

00:09:08,959 --> 00:09:13,040
ubuntu

00:09:10,240 --> 00:09:14,080
they don't include perl by default so

00:09:13,040 --> 00:09:16,160
you could think

00:09:14,080 --> 00:09:17,920
maybe they don't have pair but yes they

00:09:16,160 --> 00:09:21,040
do because again

00:09:17,920 --> 00:09:22,160
it's tied to git so they need better to

00:09:21,040 --> 00:09:23,519
rank it correctly

00:09:22,160 --> 00:09:26,080
and to write everything that's related

00:09:23,519 --> 00:09:30,160
to it so

00:09:26,080 --> 00:09:33,200
okay it's there why not use it right

00:09:30,160 --> 00:09:35,120
again in this case i need to use a

00:09:33,200 --> 00:09:36,320
my own model with this test text which

00:09:35,120 --> 00:09:39,360
is not

00:09:36,320 --> 00:09:39,760
maybe it's package for uh for deviant i

00:09:39,360 --> 00:09:41,760
i

00:09:39,760 --> 00:09:43,519
haven't really checked it but anyway in

00:09:41,760 --> 00:09:44,720
this case i need to use again i need to

00:09:43,519 --> 00:09:48,080
use sudo

00:09:44,720 --> 00:09:51,680
because it's a system it's not

00:09:48,080 --> 00:09:53,600
installed by so

00:09:51,680 --> 00:09:55,600
but there are even more things that you

00:09:53,600 --> 00:09:56,720
can do you can say okay so why do i need

00:09:55,600 --> 00:09:59,760
to install

00:09:56,720 --> 00:10:01,920
this test text every single time the

00:09:59,760 --> 00:10:04,640
only thing i have is a test

00:10:01,920 --> 00:10:06,320
right it's a short script and this is

00:10:04,640 --> 00:10:09,279
this is what the script does so it's

00:10:06,320 --> 00:10:11,279
you know a couple of functions why don't

00:10:09,279 --> 00:10:14,480
you bundle our modules

00:10:11,279 --> 00:10:16,000
so use fat pack or carton or whatever i

00:10:14,480 --> 00:10:18,480
usually use fat pack

00:10:16,000 --> 00:10:20,320
so instead of installing any module that

00:10:18,480 --> 00:10:21,760
that's not installed by default

00:10:20,320 --> 00:10:24,480
you bundle everything into a single

00:10:21,760 --> 00:10:26,320
script and the only thing you do

00:10:24,480 --> 00:10:28,000
you need to do is to run that script

00:10:26,320 --> 00:10:30,320
that's already in the repository

00:10:28,000 --> 00:10:32,079
incredibly fast you say one second

00:10:30,320 --> 00:10:34,320
another second nanosecond

00:10:32,079 --> 00:10:35,440
and everything is going to be incredibly

00:10:34,320 --> 00:10:37,680
fast use

00:10:35,440 --> 00:10:39,200
something like that so you have you have

00:10:37,680 --> 00:10:41,440
a your test in

00:10:39,200 --> 00:10:43,200
some place called slc or whatever and

00:10:41,440 --> 00:10:44,880
then you generate it with just check

00:10:43,200 --> 00:10:48,240
that's in repository

00:10:44,880 --> 00:10:50,320
use it it's probably i don't know maybe

00:10:48,240 --> 00:10:53,600
1000 lines of code

00:10:50,320 --> 00:10:55,839
a couple of kilobytes it's

00:10:53,600 --> 00:10:57,519
very fast it's something everything you

00:10:55,839 --> 00:10:59,360
need to do this you have to remember to

00:10:57,519 --> 00:11:00,640
to regenerate it every time you change

00:10:59,360 --> 00:11:03,440
it so

00:11:00,640 --> 00:11:05,600
in this case we install all the

00:11:03,440 --> 00:11:08,399
prerequisite models

00:11:05,600 --> 00:11:10,240
and then before we start look no we

00:11:08,399 --> 00:11:11,920
don't need it we are not going to use it

00:11:10,240 --> 00:11:13,680
right and then eventually we run the

00:11:11,920 --> 00:11:16,800
same test

00:11:13,680 --> 00:11:19,120
so this is good for travis it's

00:11:16,800 --> 00:11:20,560
in this case it's four times as fast and

00:11:19,120 --> 00:11:22,720
take into account that it was

00:11:20,560 --> 00:11:23,920
very fast to start with we are doing a

00:11:22,720 --> 00:11:28,160
very simple

00:11:23,920 --> 00:11:29,920
a very simple test here

00:11:28,160 --> 00:11:31,120
but you know there's some trouble with

00:11:29,920 --> 00:11:32,399
travis i don't know if you have had

00:11:31,120 --> 00:11:35,440
trouble lately

00:11:32,399 --> 00:11:37,120
but i always run out of credits

00:11:35,440 --> 00:11:39,279
because all of a sudden there's

00:11:37,120 --> 00:11:40,240
something that doesn't download or

00:11:39,279 --> 00:11:42,079
whatever so

00:11:40,240 --> 00:11:44,720
it's working there for one one hour and

00:11:42,079 --> 00:11:46,959
then the whole hour gets built to the

00:11:44,720 --> 00:11:50,480
account so i run out of credits

00:11:46,959 --> 00:11:52,639
so maybe you're uh fond of github

00:11:50,480 --> 00:11:54,399
actions or or anything like that let's

00:11:52,639 --> 00:11:57,680
see what happens in github action

00:11:54,399 --> 00:12:00,160
so it has so happens pretty much it's

00:11:57,680 --> 00:12:02,639
not exactly the same you just use a

00:12:00,160 --> 00:12:06,000
runner like go to latest

00:12:02,639 --> 00:12:09,040
and this one is going to include perf

00:12:06,000 --> 00:12:09,440
so you again just all the all the all

00:12:09,040 --> 00:12:12,639
the

00:12:09,440 --> 00:12:16,800
simple modules you need in as package

00:12:12,639 --> 00:12:20,480
as packages that you prefer for test

00:12:16,800 --> 00:12:21,760
you know and again i'm using the system

00:12:20,480 --> 00:12:23,279
pair

00:12:21,760 --> 00:12:25,920
there's no magic there's no container

00:12:23,279 --> 00:12:28,639
magic here it's just a system

00:12:25,920 --> 00:12:29,839
and then eventually i run the i run

00:12:28,639 --> 00:12:32,959
whatever test i need to

00:12:29,839 --> 00:12:34,160
make is also installed by default so so

00:12:32,959 --> 00:12:37,200
it's something that we can

00:12:34,160 --> 00:12:39,760
we can do straight away

00:12:37,200 --> 00:12:40,480
but in github action is even better

00:12:39,760 --> 00:12:42,399
because

00:12:40,480 --> 00:12:44,240
github is more general than travis

00:12:42,399 --> 00:12:46,639
services for ciacd

00:12:44,240 --> 00:12:48,399
github action is a workflow running

00:12:46,639 --> 00:12:49,920
environment so you can run run any kind

00:12:48,399 --> 00:12:52,800
of workflow

00:12:49,920 --> 00:12:53,440
and one of the things that that was

00:12:52,800 --> 00:12:57,519
there is

00:12:53,440 --> 00:13:01,040
is that you could use

00:12:57,519 --> 00:13:02,880
javascript especially and also python

00:13:01,040 --> 00:13:04,399
python is not so common you don't see it

00:13:02,880 --> 00:13:06,160
often but you can see it

00:13:04,399 --> 00:13:09,120
right and of course by default is wrong

00:13:06,160 --> 00:13:12,639
by the shot so i said hmm

00:13:09,120 --> 00:13:15,680
so maybe i can use perla

00:13:12,639 --> 00:13:19,360
again yes you can so you just say

00:13:15,680 --> 00:13:21,920
shell column per

00:13:19,360 --> 00:13:24,079
0 between curly braces what it's going

00:13:21,920 --> 00:13:27,360
to do is going to create a temporal

00:13:24,079 --> 00:13:28,800
file with whatever you put there and

00:13:27,360 --> 00:13:31,839
it's going to run it as a

00:13:28,800 --> 00:13:33,920
as a script so

00:13:31,839 --> 00:13:36,320
you can you can put your script right

00:13:33,920 --> 00:13:38,800
there you don't need to

00:13:36,320 --> 00:13:39,839
do a difficult one liner or whatever

00:13:38,800 --> 00:13:44,800
it's

00:13:39,839 --> 00:13:44,800
i mean it's syntactically nicer and then

00:13:46,560 --> 00:13:50,560
there is this module with have action

00:13:48,720 --> 00:13:53,839
which i publish in

00:13:50,560 --> 00:13:55,040
in sepan and you can do stuff that you

00:13:53,839 --> 00:13:57,199
that you usually do

00:13:55,040 --> 00:13:59,279
in github action like for instance set

00:13:57,199 --> 00:14:01,440
the value of an environment variable

00:13:59,279 --> 00:14:03,199
set the output for a step things like

00:14:01,440 --> 00:14:05,519
that instead of

00:14:03,199 --> 00:14:06,399
printing to console and then you know

00:14:05,519 --> 00:14:08,320
using this

00:14:06,399 --> 00:14:10,079
this function syntax with double column

00:14:08,320 --> 00:14:12,079
and all the things now you say

00:14:10,079 --> 00:14:13,440
set them right so this is exactly the

00:14:12,079 --> 00:14:15,519
same the name that the

00:14:13,440 --> 00:14:17,040
you'll find in the you have action

00:14:15,519 --> 00:14:21,440
documentation and you

00:14:17,040 --> 00:14:21,440
you have the the whole

00:14:21,600 --> 00:14:25,839
span the whole nine yards of the of the

00:14:23,839 --> 00:14:28,959
comments that are there actually

00:14:25,839 --> 00:14:30,959
uh governor was helping me

00:14:28,959 --> 00:14:32,240
with this and so now it's it's quite

00:14:30,959 --> 00:14:37,279
complete and

00:14:32,240 --> 00:14:37,279
it's yeah very good to go right

00:14:38,000 --> 00:14:42,959
but there is also another goodie and

00:14:41,040 --> 00:14:45,440
this is actually tradition

00:14:42,959 --> 00:14:46,720
pretty much everywhere of course all the

00:14:45,440 --> 00:14:47,360
modules that are installed by default

00:14:46,720 --> 00:14:49,680
with spur

00:14:47,360 --> 00:14:51,680
are there but there are some other

00:14:49,680 --> 00:14:54,880
modules that are that are there also

00:14:51,680 --> 00:14:57,199
uh which are not installed by by default

00:14:54,880 --> 00:14:58,959
they are most of them they are related

00:14:57,199 --> 00:15:00,240
to things that

00:14:58,959 --> 00:15:02,320
the system needs like for instance

00:15:00,240 --> 00:15:03,040
things for installing packages or things

00:15:02,320 --> 00:15:04,639
like that

00:15:03,040 --> 00:15:06,160
but for instance this this model which

00:15:04,639 --> 00:15:10,560
is a very simple

00:15:06,160 --> 00:15:12,320
and in fact very lenient jammed parser

00:15:10,560 --> 00:15:14,079
it's already installed so if you need to

00:15:12,320 --> 00:15:17,279
do some jam parsing

00:15:14,079 --> 00:15:20,480
or to get some some uh

00:15:17,279 --> 00:15:21,040
jam the file into into your into your

00:15:20,480 --> 00:15:22,399
program

00:15:21,040 --> 00:15:25,680
you can do it straight away with this

00:15:22,399 --> 00:15:27,360
mod which is installed already

00:15:25,680 --> 00:15:28,720
and that's a good thing some other fact

00:15:27,360 --> 00:15:30,959
this is something i use in

00:15:28,720 --> 00:15:32,320
in one of the workflows i've created for

00:15:30,959 --> 00:15:34,480
for my classes

00:15:32,320 --> 00:15:36,800
where i i have all kinds of workflows

00:15:34,480 --> 00:15:39,279
for for reading the assignments of

00:15:36,800 --> 00:15:40,079
pre-creating the assignments of students

00:15:39,279 --> 00:15:43,199
actually

00:15:40,079 --> 00:15:45,360
so you can it's just to check

00:15:43,199 --> 00:15:46,800
whether the syntax of any jam file

00:15:45,360 --> 00:15:50,160
that's installed is

00:15:46,800 --> 00:15:52,079
is okay so as i said

00:15:50,160 --> 00:15:54,639
it's quite linear with that kind of

00:15:52,079 --> 00:15:58,000
thing right

00:15:54,639 --> 00:16:00,480
so the only thing you need to do

00:15:58,000 --> 00:16:02,399
is for your script it needs to use some

00:16:00,480 --> 00:16:04,240
environment variable

00:16:02,399 --> 00:16:07,040
which is environment variable that you

00:16:04,240 --> 00:16:10,079
will set from the github action

00:16:07,040 --> 00:16:13,120
right so since it's running

00:16:10,079 --> 00:16:14,320
inside a github action it's not going to

00:16:13,120 --> 00:16:18,160
use the command line

00:16:14,320 --> 00:16:20,240
arguments so whatever you need to to

00:16:18,160 --> 00:16:22,079
you know you need a script to do you

00:16:20,240 --> 00:16:23,759
need to put it into environment variable

00:16:22,079 --> 00:16:25,440
that environment variable can can be set

00:16:23,759 --> 00:16:26,079
from another step it can be said

00:16:25,440 --> 00:16:28,480
directly

00:16:26,079 --> 00:16:29,920
in the in the configuration of the step

00:16:28,480 --> 00:16:32,880
right

00:16:29,920 --> 00:16:33,600
uh so the thing with with this github

00:16:32,880 --> 00:16:36,720
actions is that

00:16:33,600 --> 00:16:40,240
it makes that kind of thing easier

00:16:36,720 --> 00:16:42,000
for doing uh for doing you know this

00:16:40,240 --> 00:16:45,120
this

00:16:42,000 --> 00:16:45,920
administrative stuff that you need to

00:16:45,120 --> 00:16:48,839
enjoy

00:16:45,920 --> 00:16:51,759
for instance in this case using it have

00:16:48,839 --> 00:16:56,079
actions

00:16:51,759 --> 00:16:58,800
what i do essentially is to to examine

00:16:56,079 --> 00:17:00,880
something that that's in the file so i

00:16:58,800 --> 00:17:03,440
examine some configuration file

00:17:00,880 --> 00:17:04,079
then i check if some json is using that

00:17:03,440 --> 00:17:07,199
configuration

00:17:04,079 --> 00:17:10,160
file and then eventually set the output

00:17:07,199 --> 00:17:10,559
of the step to some value and that's

00:17:10,160 --> 00:17:13,199
going

00:17:10,559 --> 00:17:13,760
to be read by another step which can be

00:17:13,199 --> 00:17:16,799
written

00:17:13,760 --> 00:17:18,799
in parallel or in what you call what is

00:17:16,799 --> 00:17:20,880
called github script which is

00:17:18,799 --> 00:17:22,319
typescript along with some github

00:17:20,880 --> 00:17:24,720
objects

00:17:22,319 --> 00:17:25,679
so it makes very easy very

00:17:24,720 --> 00:17:28,799
straightforward

00:17:25,679 --> 00:17:30,320
you can use all the paradid you know

00:17:28,799 --> 00:17:33,039
you have all the all the regular

00:17:30,320 --> 00:17:36,400
expressions many modules

00:17:33,039 --> 00:17:37,280
pretty amazing okay there was a thing

00:17:36,400 --> 00:17:42,640
that was not

00:17:37,280 --> 00:17:45,280
actually in in github so this is this is

00:17:42,640 --> 00:17:46,320
some some pull requests that i had to do

00:17:45,280 --> 00:17:49,760
in the in the

00:17:46,320 --> 00:17:53,200
documentation uh

00:17:49,760 --> 00:17:56,400
this is written in in in this

00:17:53,200 --> 00:17:57,039
uh receipt called this window shell no

00:17:56,400 --> 00:18:00,559
it's called

00:17:57,039 --> 00:18:01,120
powershell yeah so i need to write a

00:18:00,559 --> 00:18:04,960
small

00:18:01,120 --> 00:18:06,080
commercial thing and as a matter of fact

00:18:04,960 --> 00:18:08,080
they generate the documentation

00:18:06,080 --> 00:18:08,480
automatically so they run these scripts

00:18:08,080 --> 00:18:11,679
and that

00:18:08,480 --> 00:18:13,520
those scripts generate all the

00:18:11,679 --> 00:18:15,280
all the markdown that that's then

00:18:13,520 --> 00:18:17,200
published to the to the github

00:18:15,280 --> 00:18:19,840
action documentation so this is what i

00:18:17,200 --> 00:18:21,760
what i needed to do there so

00:18:19,840 --> 00:18:23,120
that was hidden so it was there you

00:18:21,760 --> 00:18:26,080
could you could use it

00:18:23,120 --> 00:18:26,799
but it was documented so if it if it's

00:18:26,080 --> 00:18:29,280
there

00:18:26,799 --> 00:18:30,240
it's not documented it's as good as

00:18:29,280 --> 00:18:33,919
hidden

00:18:30,240 --> 00:18:36,880
so i tried to do some systematic

00:18:33,919 --> 00:18:37,600
work of bringing this up to light so

00:18:36,880 --> 00:18:40,880
that

00:18:37,600 --> 00:18:43,200
everyone could use it so that's that's

00:18:40,880 --> 00:18:45,039
that's something that will make me and

00:18:43,200 --> 00:18:48,559
the community quite happy

00:18:45,039 --> 00:18:49,200
so again there are many other things

00:18:48,559 --> 00:18:50,960
that you can do

00:18:49,200 --> 00:18:52,480
you could you could say for instance

00:18:50,960 --> 00:18:54,840
what happens with with the

00:18:52,480 --> 00:18:56,640
gitlab pipelines what happens with

00:18:54,840 --> 00:19:00,000
circleci

00:18:56,640 --> 00:19:04,160
runners or shipable or whatever

00:19:00,000 --> 00:19:09,039
can you can you work with them in pair

00:19:04,160 --> 00:19:11,360
i haven't checked them you probably can

00:19:09,039 --> 00:19:12,240
but what i'm totally sure that you can

00:19:11,360 --> 00:19:15,120
use them is in

00:19:12,240 --> 00:19:15,679
in docker hub so docker have everyone

00:19:15,120 --> 00:19:19,120
usually

00:19:15,679 --> 00:19:20,960
uses it for for creating or compiling

00:19:19,120 --> 00:19:22,559
creating their local images which of

00:19:20,960 --> 00:19:25,919
course has a purpose

00:19:22,559 --> 00:19:27,039
but they have as hooks so they have a

00:19:25,919 --> 00:19:29,840
runner

00:19:27,039 --> 00:19:31,360
uh and they can you can create just

00:19:29,840 --> 00:19:35,120
scripts with a

00:19:31,360 --> 00:19:37,760
with a name uh with a certain name like

00:19:35,120 --> 00:19:39,440
3ds or post that or whatever and they

00:19:37,760 --> 00:19:40,240
are going to run automatically if they

00:19:39,440 --> 00:19:42,400
are in the

00:19:40,240 --> 00:19:43,440
in the hook so eventually those hooks

00:19:42,400 --> 00:19:46,799
provide

00:19:43,440 --> 00:19:50,240
uh they exit with with

00:19:46,799 --> 00:19:53,440
one or the s with with zero

00:19:50,240 --> 00:19:55,360
and then if they exit with the one uh

00:19:53,440 --> 00:19:58,799
all the workflow will be interrupted

00:19:55,360 --> 00:19:59,840
with zero uh docker hub will go to the

00:19:58,799 --> 00:20:02,799
next

00:19:59,840 --> 00:20:03,760
right so let's try and do that let's try

00:20:02,799 --> 00:20:05,360
and automate

00:20:03,760 --> 00:20:07,520
docker house for instance there's

00:20:05,360 --> 00:20:10,960
something that lots of people keep

00:20:07,520 --> 00:20:11,840
asking all the time so why does docker

00:20:10,960 --> 00:20:14,480
have

00:20:11,840 --> 00:20:15,600
have to build all my docker files every

00:20:14,480 --> 00:20:18,799
time i change

00:20:15,600 --> 00:20:19,200
one line in the readme so you know

00:20:18,799 --> 00:20:21,360
docker

00:20:19,200 --> 00:20:22,960
takes a long time sometimes one hour

00:20:21,360 --> 00:20:26,400
sometimes two hours depends on

00:20:22,960 --> 00:20:28,480
on the load but you would need to do

00:20:26,400 --> 00:20:30,640
something as easy as saying

00:20:28,480 --> 00:20:32,080
okay so look at the repository did i

00:20:30,640 --> 00:20:35,440
change the profile

00:20:32,080 --> 00:20:37,200
just say okay build it uh did i change

00:20:35,440 --> 00:20:39,280
anything else like a rhythmic or

00:20:37,200 --> 00:20:42,400
whatever then don't touch it

00:20:39,280 --> 00:20:45,039
i don't need this right so no idea

00:20:42,400 --> 00:20:45,919
just stop right you can do this with

00:20:45,039 --> 00:20:49,120
this

00:20:45,919 --> 00:20:50,480
incredibly simple script which is

00:20:49,120 --> 00:20:55,440
written using the

00:20:50,480 --> 00:20:57,360
the system pair in docker hub

00:20:55,440 --> 00:20:58,960
which of course also includes git

00:20:57,360 --> 00:21:02,000
because if you install git

00:20:58,960 --> 00:21:03,840
you've got this git module right

00:21:02,000 --> 00:21:05,120
and you can run this command and just

00:21:03,840 --> 00:21:08,320
look at the difference

00:21:05,120 --> 00:21:09,280
between which we have i mean whatever

00:21:08,320 --> 00:21:11,679
was contained

00:21:09,280 --> 00:21:13,760
there's commit of course it's only

00:21:11,679 --> 00:21:15,840
looking at the last comic

00:21:13,760 --> 00:21:18,799
you know you can make it a little bit

00:21:15,840 --> 00:21:22,559
actually try it and

00:21:18,799 --> 00:21:24,400
try to find a way of of making this

00:21:22,559 --> 00:21:25,760
kind of more intelligent by looking at

00:21:24,400 --> 00:21:29,919
all the comments

00:21:25,760 --> 00:21:31,360
since the last build i couldn't do that

00:21:29,919 --> 00:21:34,559
because

00:21:31,360 --> 00:21:38,000
this almost impossible i mean

00:21:34,559 --> 00:21:39,440
you can do it there's probably more than

00:21:38,000 --> 00:21:40,559
one way to do it because you know this

00:21:39,440 --> 00:21:44,880
is perfect

00:21:40,559 --> 00:21:46,880
but it wasn't easy so i said okay

00:21:44,880 --> 00:21:49,120
don't mind i i'm not going to to keep

00:21:46,880 --> 00:21:50,960
the last uh

00:21:49,120 --> 00:21:52,880
the last comment that that was built

00:21:50,960 --> 00:21:55,679
anyway as you can see

00:21:52,880 --> 00:21:59,200
just a matter of checking the whatever

00:21:55,679 --> 00:22:01,679
difference is in the last uh

00:21:59,200 --> 00:22:04,080
in the last comment and then say okay

00:22:01,679 --> 00:22:08,240
another ca5 modify the last comment

00:22:04,080 --> 00:22:08,240
die you exit with bailey one

00:22:08,559 --> 00:22:12,320
if there is nothing called docker file

00:22:10,159 --> 00:22:13,039
because every every docker file is going

00:22:12,320 --> 00:22:14,640
to have

00:22:13,039 --> 00:22:15,600
it's going to be called dockerfile or

00:22:14,640 --> 00:22:16,240
it's going to have the dockerfire

00:22:15,600 --> 00:22:17,600
extension

00:22:16,240 --> 00:22:20,480
so if there is no occur from the last

00:22:17,600 --> 00:22:22,159
commit i will not build that

00:22:20,480 --> 00:22:24,320
there is also a problem with this and

00:22:22,159 --> 00:22:25,120
the problem is that it exits with

00:22:24,320 --> 00:22:26,799
failure

00:22:25,120 --> 00:22:29,840
so you're going to be sent an email that

00:22:26,799 --> 00:22:33,440
says your build has failed

00:22:29,840 --> 00:22:36,159
that's not nice uh i have raised the

00:22:33,440 --> 00:22:37,600
issue also in the in the

00:22:36,159 --> 00:22:39,360
in the docker hub community but there's

00:22:37,600 --> 00:22:41,679
no easy way of doing that so there's no

00:22:39,360 --> 00:22:44,400
way of telling docker have no stop it

00:22:41,679 --> 00:22:45,360
now i just don't want this to be built

00:22:44,400 --> 00:22:47,919
either you

00:22:45,360 --> 00:22:50,240
succeed or you fail there's nothing

00:22:47,919 --> 00:22:53,760
between

00:22:50,240 --> 00:22:54,799
i think i had to add this information to

00:22:53,760 --> 00:22:57,280
the

00:22:54,799 --> 00:22:58,799
to the uh documentation of talking which

00:22:57,280 --> 00:23:00,559
is a github

00:22:58,799 --> 00:23:02,080
i mean at least it's a good thing that

00:23:00,559 --> 00:23:04,240
all the documentation is in github

00:23:02,080 --> 00:23:05,679
so if you want if you want to to change

00:23:04,240 --> 00:23:08,240
something you just

00:23:05,679 --> 00:23:08,960
do it you have to wait for it to be

00:23:08,240 --> 00:23:11,360
accepted

00:23:08,960 --> 00:23:12,080
in fact it was accepted after some time

00:23:11,360 --> 00:23:14,400
so you can

00:23:12,080 --> 00:23:15,840
now see this kind of thing right so

00:23:14,400 --> 00:23:18,880
before it said that you could

00:23:15,840 --> 00:23:22,640
you could only run a shared script

00:23:18,880 --> 00:23:25,039
which is right there in the line uh 55

00:23:22,640 --> 00:23:26,159
now it says that you know what's hitting

00:23:25,039 --> 00:23:29,440
up to now

00:23:26,159 --> 00:23:30,880
uh it says that you can run anything

00:23:29,440 --> 00:23:31,919
that's installed in the default runner

00:23:30,880 --> 00:23:34,960
and

00:23:31,919 --> 00:23:36,880
you also have python for instance

00:23:34,960 --> 00:23:38,000
and you could say why not use python

00:23:36,880 --> 00:23:40,799
well

00:23:38,000 --> 00:23:41,200
if you want to use python you will have

00:23:40,799 --> 00:23:46,400
to

00:23:41,200 --> 00:23:49,440
uh either import some some git module

00:23:46,400 --> 00:23:51,600
or just you know create some way of

00:23:49,440 --> 00:23:55,440
running betas and external

00:23:51,600 --> 00:23:56,400
external uh command and then capture the

00:23:55,440 --> 00:24:00,400
output

00:23:56,400 --> 00:24:03,360
stuff like that not nice really not nice

00:24:00,400 --> 00:24:05,039
you can do it with prayer you can do it

00:24:03,360 --> 00:24:06,799
now and you can do it without

00:24:05,039 --> 00:24:08,960
installing any kind of thing without

00:24:06,799 --> 00:24:11,039
having any kind of of dependency

00:24:08,960 --> 00:24:12,480
uh and i will say that in a very

00:24:11,039 --> 00:24:15,360
dependable way so

00:24:12,480 --> 00:24:16,480
uh it doesn't look as if pearl is going

00:24:15,360 --> 00:24:20,159
to disappear from

00:24:16,480 --> 00:24:23,120
from those runner anytime soon

00:24:20,159 --> 00:24:24,320
so at the end of the day i would say

00:24:23,120 --> 00:24:27,360
that apparently it's a

00:24:24,320 --> 00:24:31,440
hidden game gem jammer

00:24:27,360 --> 00:24:34,559
gem of test deployment automation but

00:24:31,440 --> 00:24:36,720
right now it's no longer hidden so

00:24:34,559 --> 00:24:38,320
it's it's revealed so it's sharing the

00:24:36,720 --> 00:24:40,240
documentation if people

00:24:38,320 --> 00:24:42,480
checks out the documentation you say so

00:24:40,240 --> 00:24:46,159
you have you can use a shell script

00:24:42,480 --> 00:24:50,080
and you can also use per right

00:24:46,159 --> 00:24:52,960
so use it because unlike batch

00:24:50,080 --> 00:24:54,320
it's a real language so i mean bash is

00:24:52,960 --> 00:24:55,600
incredibly powerful

00:24:54,320 --> 00:24:58,240
but if you want to do something like i

00:24:55,600 --> 00:24:58,240
catalyze

00:24:59,039 --> 00:25:03,840
as a string or something like that you

00:25:01,120 --> 00:25:06,240
have to use some obscure syntax

00:25:03,840 --> 00:25:07,679
that makes no sense at all as a matter

00:25:06,240 --> 00:25:09,760
of fact

00:25:07,679 --> 00:25:11,120
i think that making something lowercase

00:25:09,760 --> 00:25:14,080
is something like comma

00:25:11,120 --> 00:25:15,120
comma dollar curly braces name of the

00:25:14,080 --> 00:25:18,559
variable

00:25:15,120 --> 00:25:20,559
whatever so you spare

00:25:18,559 --> 00:25:21,760
because unlike bus it's a necessary

00:25:20,559 --> 00:25:25,039
language

00:25:21,760 --> 00:25:27,360
and like bash it's always there

00:25:25,039 --> 00:25:29,200
it's really really always there as i

00:25:27,360 --> 00:25:31,919
have said i didn't check

00:25:29,200 --> 00:25:33,279
if it's in circle ci or engage your

00:25:31,919 --> 00:25:35,919
pipelines or whatever but i

00:25:33,279 --> 00:25:37,039
think almost certain that's going to be

00:25:35,919 --> 00:25:39,039
there

00:25:37,039 --> 00:25:40,880
and you also have package modules and

00:25:39,039 --> 00:25:44,480
you can bundle

00:25:40,880 --> 00:25:44,480
scripts so

00:25:44,799 --> 00:25:49,279
you've got everything you spare your

00:25:47,840 --> 00:25:52,320
next

00:25:49,279 --> 00:25:56,720
ci and cd workflows

00:25:52,320 --> 00:26:01,520
and that's it

00:25:56,720 --> 00:26:03,360
another contention thanks a lot

00:26:01,520 --> 00:26:05,919
and again thanks for the for the chance

00:26:03,360 --> 00:26:06,960
for a chance to give this this talk

00:26:05,919 --> 00:26:11,840
adventure

00:26:06,960 --> 00:26:11,840
thank you very much for being there

00:26:12,080 --> 00:26:19,039
thank you jj i think

00:26:15,279 --> 00:26:21,200
that uh yours your slot goes for another

00:26:19,039 --> 00:26:24,799
25 minutes if you

00:26:21,200 --> 00:26:25,600
want to they converted it's probably my

00:26:24,799 --> 00:26:28,400
fault

00:26:25,600 --> 00:26:30,159
can you please uh say that again yes i'm

00:26:28,400 --> 00:26:31,919
sorry i just had to move outside because

00:26:30,159 --> 00:26:35,039
of the air conditioning problem

00:26:31,919 --> 00:26:38,799
the uh your slot here is

00:26:35,039 --> 00:26:41,919
for another uh 25 minutes

00:26:38,799 --> 00:26:44,799
the other the other slot is

00:26:41,919 --> 00:26:46,559
in two half hour sections but you're a

00:26:44,799 --> 00:26:50,840
full hour

00:26:46,559 --> 00:26:55,360
so you can take extended questions

00:26:50,840 --> 00:26:57,679
okay no problem sorry about that

00:26:55,360 --> 00:26:57,679
thank you

00:27:01,600 --> 00:27:04,320
well while people are getting their

00:27:02,880 --> 00:27:06,320
thoughts together because it always

00:27:04,320 --> 00:27:08,000
takes people a while to

00:27:06,320 --> 00:27:10,400
get their questions together after a

00:27:08,000 --> 00:27:12,559
presentation

00:27:10,400 --> 00:27:14,240
let me say that this this is a

00:27:12,559 --> 00:27:17,679
mysterious era

00:27:14,240 --> 00:27:19,440
area to me i know that there's a lot

00:27:17,679 --> 00:27:20,000
that's going on in that but i'm not a

00:27:19,440 --> 00:27:22,240
devops

00:27:20,000 --> 00:27:23,279
person i've been wanting to dive into it

00:27:22,240 --> 00:27:25,679
and knowing that

00:27:23,279 --> 00:27:26,880
pearl is going to be everywhere that i

00:27:25,679 --> 00:27:29,600
am

00:27:26,880 --> 00:27:32,399
it makes me more likely to to explore

00:27:29,600 --> 00:27:35,840
this area so thank you for that

00:27:32,399 --> 00:27:35,840
thank you

00:27:36,640 --> 00:27:39,919
there are never too many jj's yeah there

00:27:38,960 --> 00:27:42,320
are like uh

00:27:39,919 --> 00:27:45,440
three jj's in the in the community this

00:27:42,320 --> 00:27:50,000
is jayatria the other is aj allen

00:27:45,440 --> 00:27:50,000
and me so thank you for being there

00:27:55,919 --> 00:28:01,919
ah gg uh the scene i'm

00:27:59,919 --> 00:28:03,440
thinking about is that i don't do

00:28:01,919 --> 00:28:06,000
probably

00:28:03,440 --> 00:28:07,919
uh like last two years i probably don't

00:28:06,000 --> 00:28:10,960
know for a little except for the

00:28:07,919 --> 00:28:13,919
build subsystem for huda and

00:28:10,960 --> 00:28:14,559
therefore uh i'm more interested in

00:28:13,919 --> 00:28:17,760
testing

00:28:14,559 --> 00:28:18,880
those modules i have indirectly and i

00:28:17,760 --> 00:28:22,080
wonder

00:28:18,880 --> 00:28:26,240
uh which cis currently have

00:28:22,080 --> 00:28:30,960
prepackaged rakuda

00:28:26,240 --> 00:28:34,240
for testing yes

00:28:30,960 --> 00:28:36,320
uh you have uh you can use

00:28:34,240 --> 00:28:37,279
regular many many different ways you can

00:28:36,320 --> 00:28:40,000
use

00:28:37,279 --> 00:28:41,360
either a prepackaged raccoon star there

00:28:40,000 --> 00:28:44,799
is also a set of

00:28:41,360 --> 00:28:47,039
docker containers which i maintain

00:28:44,799 --> 00:28:48,240
and they are usually updated up to the

00:28:47,039 --> 00:28:50,880
last

00:28:48,240 --> 00:28:53,600
the latest version so you can use that

00:28:50,880 --> 00:28:56,159
either in travis or anywhere else

00:28:53,600 --> 00:28:57,679
and i also have experimental set of

00:28:56,159 --> 00:29:00,799
soccer containers which are

00:28:57,679 --> 00:29:04,240
much slimmer very very small

00:29:00,799 --> 00:29:07,600
which you can you can also use so

00:29:04,240 --> 00:29:11,440
i mean you you've got several several

00:29:07,600 --> 00:29:14,320
different ways of using drag wing

00:29:11,440 --> 00:29:14,720
in any any of these if you want to check

00:29:14,320 --> 00:29:18,240
out

00:29:14,720 --> 00:29:19,279
an example you can look at any any of my

00:29:18,240 --> 00:29:22,480
modules

00:29:19,279 --> 00:29:23,679
so i use my own docker i mean i hate my

00:29:22,480 --> 00:29:26,880
own dog food

00:29:23,679 --> 00:29:29,919
so i use my own containers in my own

00:29:26,880 --> 00:29:31,679
raccoon module so if you look up

00:29:29,919 --> 00:29:33,520
in some cases travis i'm still keeping

00:29:31,679 --> 00:29:36,640
travis in some cases and these other

00:29:33,520 --> 00:29:39,279
cases dot github slash wordpress

00:29:36,640 --> 00:29:40,240
whatever you will see that i use them

00:29:39,279 --> 00:29:42,880
all the time

00:29:40,240 --> 00:29:43,840
it's it's pretty compact it's pretty

00:29:42,880 --> 00:29:45,760
convenient

00:29:43,840 --> 00:29:47,360
they are relatively small they are like

00:29:45,760 --> 00:29:48,240
30 member correlations like 100

00:29:47,360 --> 00:29:50,960
megabytes

00:29:48,240 --> 00:29:52,480
so it takes around eight eight ten

00:29:50,960 --> 00:29:54,480
seconds to download

00:29:52,480 --> 00:29:57,360
it doesn't have a lot of overhead but

00:29:54,480 --> 00:30:00,480
yes you can you can use rakulu

00:29:57,360 --> 00:30:03,520
and perfectly and i

00:30:00,480 --> 00:30:07,120
also as a matter of fact i use

00:30:03,520 --> 00:30:10,159
this runner to compile

00:30:07,120 --> 00:30:12,480
the raku containers

00:30:10,159 --> 00:30:14,480
because i needed to do some some tagging

00:30:12,480 --> 00:30:18,080
magic

00:30:14,480 --> 00:30:18,799
so instead of every time there is a new

00:30:18,080 --> 00:30:21,279
release

00:30:18,799 --> 00:30:22,880
i have to do by hand everything so what

00:30:21,279 --> 00:30:25,919
i what i do is i i

00:30:22,880 --> 00:30:29,760
have a apparel script that

00:30:25,919 --> 00:30:32,880
looks looks at the tags of the base

00:30:29,760 --> 00:30:36,000
container which is alpine record

00:30:32,880 --> 00:30:38,640
and then it builds all the the

00:30:36,000 --> 00:30:39,520
containers with the same tags for the

00:30:38,640 --> 00:30:42,720
test

00:30:39,520 --> 00:30:45,600
record test container and that actually

00:30:42,720 --> 00:30:46,880
the example i just i just showed this is

00:30:45,600 --> 00:30:49,679
actually from there

00:30:46,880 --> 00:30:50,640
so everything is automated that way so

00:30:49,679 --> 00:30:53,360
everything

00:30:50,640 --> 00:30:54,159
every time all the all the raccoon

00:30:53,360 --> 00:30:58,320
containers

00:30:54,159 --> 00:31:00,480
is updated it triggers build in the

00:30:58,320 --> 00:31:02,000
racquet test containers which also

00:31:00,480 --> 00:31:04,480
includes cef and

00:31:02,000 --> 00:31:06,399
things like that and it builds all the

00:31:04,480 --> 00:31:08,720
different tags that are there

00:31:06,399 --> 00:31:10,320
so i don't have to provide a docker file

00:31:08,720 --> 00:31:14,240
for every single

00:31:10,320 --> 00:31:17,360
uh uh for every single container

00:31:14,240 --> 00:31:20,480
i do i so i do

00:31:17,360 --> 00:31:24,000
raku docker container

00:31:20,480 --> 00:31:28,080
generation automation everything

00:31:24,000 --> 00:31:28,080
this is very nice if you think of it

00:31:28,480 --> 00:31:35,039
question you mentioned a cross reference

00:31:31,760 --> 00:31:37,120
module that says for this cpan module

00:31:35,039 --> 00:31:38,320
what is it going to be in a distribution

00:31:37,120 --> 00:31:40,720
but i missed

00:31:38,320 --> 00:31:42,640
what what that mechanism is how can i

00:31:40,720 --> 00:31:47,600
find that information

00:31:42,640 --> 00:31:49,120
i think that deviant has an api so

00:31:47,600 --> 00:31:51,120
i'm not totally sure it's an api maybe

00:31:49,120 --> 00:31:52,080
it's just scraping but essentially what

00:31:51,120 --> 00:31:53,840
it does is it

00:31:52,080 --> 00:31:56,320
looks the name of the files in the in

00:31:53,840 --> 00:31:59,039
the in the zipper module

00:31:56,320 --> 00:32:00,640
and then it looks it up look in the i

00:31:59,039 --> 00:32:03,120
mean using the api

00:32:00,640 --> 00:32:05,279
so it says okay so if you have something

00:32:03,120 --> 00:32:08,320
like i don't know

00:32:05,279 --> 00:32:11,760
for instance it looks up mu in the uh

00:32:08,320 --> 00:32:14,880
in the deviant uh search engine api

00:32:11,760 --> 00:32:17,120
and it returns a result and then

00:32:14,880 --> 00:32:18,159
you can use directly result this is

00:32:17,120 --> 00:32:19,840
extremely

00:32:18,159 --> 00:32:21,519
i was actually thinking about upgrading

00:32:19,840 --> 00:32:23,120
it to to do this

00:32:21,519 --> 00:32:25,279
because it would be extremely convenient

00:32:23,120 --> 00:32:28,559
to just say install this

00:32:25,279 --> 00:32:31,360
if you go to debian the debian package

00:32:28,559 --> 00:32:32,960
use that if you don't have that then use

00:32:31,360 --> 00:32:35,519
the next best thing which is

00:32:32,960 --> 00:32:36,799
which is uh using the the the

00:32:35,519 --> 00:32:38,559
multifunction

00:32:36,799 --> 00:32:40,960
right so that would be really really

00:32:38,559 --> 00:32:42,960
extremely convenient and that's also the

00:32:40,960 --> 00:32:44,799
something that other languages don't

00:32:42,960 --> 00:32:47,600
have so

00:32:44,799 --> 00:32:49,760
i mean that would make creating ci

00:32:47,600 --> 00:32:53,200
workflows for for any kind of module

00:32:49,760 --> 00:32:57,840
extremely easy and extremely fast

00:32:53,200 --> 00:32:57,840
thank you

00:33:07,760 --> 00:33:13,200
so i guess that's it i ran a lot of time

00:33:11,840 --> 00:33:16,320
actually

00:33:13,200 --> 00:33:18,640
did i yeah no i still have like

00:33:16,320 --> 00:33:21,200
six minutes so if you want to ask

00:33:18,640 --> 00:33:21,200
anything else

00:33:23,279 --> 00:33:26,320
yeah you've still got time

00:33:28,320 --> 00:33:32,240
you know i don't know i don't know if

00:33:30,320 --> 00:33:34,480
you can still share your screen

00:33:32,240 --> 00:33:36,480
uh but i think a lot of us have done a

00:33:34,480 --> 00:33:37,760
lot of pearl but not so much with github

00:33:36,480 --> 00:33:38,080
actions and it would be interesting to

00:33:37,760 --> 00:33:40,640
see

00:33:38,080 --> 00:33:41,600
some sort of live demo of it actually

00:33:40,640 --> 00:33:45,279
operating in git

00:33:41,600 --> 00:33:49,440
and github yes i'll try to do that

00:33:45,279 --> 00:33:53,840
let me let me fire up the firefox

00:33:49,440 --> 00:33:53,840
because i don't have it here

00:33:53,919 --> 00:33:58,799
that would be wonderful thank you let me

00:33:56,640 --> 00:33:58,799
see

00:34:00,000 --> 00:34:07,840
for instance i will start to share my

00:34:02,799 --> 00:34:07,840
screen right now

00:34:10,240 --> 00:34:13,200
let me try again

00:34:18,079 --> 00:34:21,679
yeah this is the thing has it changed

00:34:20,079 --> 00:34:23,359
away from uh

00:34:21,679 --> 00:34:25,760
host mode or something maybe you're not

00:34:23,359 --> 00:34:29,599
oh there you go sorry

00:34:25,760 --> 00:34:34,320
yeah i use this quite extensively in my

00:34:29,599 --> 00:34:36,320
my classes so this is my

00:34:34,320 --> 00:34:38,879
this is a repository for uh for a class

00:34:36,320 --> 00:34:41,359
i teach which is called

00:34:38,879 --> 00:34:42,079
visual infrastructure so i got i got a

00:34:41,359 --> 00:34:45,359
whole

00:34:42,079 --> 00:34:49,599
actually wrote most of the things here

00:34:45,359 --> 00:34:52,560
so you go to github and then workflows

00:34:49,599 --> 00:34:52,560
and then there is this

00:34:52,879 --> 00:34:56,079
big workflow which essentially goes to

00:34:55,440 --> 00:34:58,160
the student

00:34:56,079 --> 00:34:59,599
repository and checks things by using

00:34:58,160 --> 00:35:02,960
the github

00:34:59,599 --> 00:35:06,320
github api and some other things but

00:35:02,960 --> 00:35:09,920
this is a franchise not this one

00:35:06,320 --> 00:35:13,040
sorry this is this one so it's

00:35:09,920 --> 00:35:16,960
doing some stuff in javascript

00:35:13,040 --> 00:35:19,680
but then a bit later on all this is

00:35:16,960 --> 00:35:20,560
done everything i have to do against the

00:35:19,680 --> 00:35:22,720
github api

00:35:20,560 --> 00:35:23,920
i do it using github script which

00:35:22,720 --> 00:35:29,119
because it is

00:35:23,920 --> 00:35:31,520
just simpler so all this is written in

00:35:29,119 --> 00:35:32,320
github script but then eventually it

00:35:31,520 --> 00:35:36,079
gets to

00:35:32,320 --> 00:35:41,200
some places where i start to to uh

00:35:36,079 --> 00:35:41,200
to use spur uh later on let me see oh

00:35:43,599 --> 00:35:47,520
for instance in this case you see what

00:35:46,560 --> 00:35:51,040
i'm doing

00:35:47,520 --> 00:35:54,560
is i have a

00:35:51,040 --> 00:35:56,880
a script in this repository right

00:35:54,560 --> 00:35:58,960
but i'm running this it have action in

00:35:56,880 --> 00:36:02,960
the student repository

00:35:58,960 --> 00:36:05,839
so what i do is i don't load it with car

00:36:02,960 --> 00:36:06,560
and run it directly with spur right in

00:36:05,839 --> 00:36:08,880
this case

00:36:06,560 --> 00:36:09,599
this is one of the steps so i got like

00:36:08,880 --> 00:36:13,040
like

00:36:09,599 --> 00:36:15,359
a huge amount of of

00:36:13,040 --> 00:36:18,320
of github action i will show them in

00:36:15,359 --> 00:36:18,320
action but here

00:36:18,480 --> 00:36:22,160
so for instance this one

00:36:22,960 --> 00:36:28,960
you see that these are the last in the

00:36:26,560 --> 00:36:30,320
but you see that initially what i do is

00:36:28,960 --> 00:36:32,960
i extract some information from the

00:36:30,320 --> 00:36:32,960
repository

00:36:33,920 --> 00:36:37,520
the logs are not available anymore

00:36:38,560 --> 00:36:42,880
anyway in in many of the of this

00:36:41,760 --> 00:36:45,760
workflows uh

00:36:42,880 --> 00:36:46,560
pair is integrated either as a step or

00:36:45,760 --> 00:36:49,520
as a script

00:36:46,560 --> 00:36:50,160
that i that i use i will show you this

00:36:49,520 --> 00:36:55,839
script i

00:36:50,160 --> 00:36:55,839
am talking about it's right here

00:36:58,000 --> 00:37:06,000
so this is the script that's downloaded

00:37:01,520 --> 00:37:06,000
and then run directly what happens

00:37:06,720 --> 00:37:10,560
jj and everyone i apologize the

00:37:09,040 --> 00:37:13,200
information i was given

00:37:10,560 --> 00:37:16,079
is different from what's on the schedule

00:37:13,200 --> 00:37:20,480
we should all be in a plenary session

00:37:16,079 --> 00:37:20,480
now okay

00:37:21,599 --> 00:37:28,320
thank you very much thank you very much

00:37:24,720 --> 00:37:30,240
thank you very much anyway

00:37:28,320 --> 00:37:31,359
send me an email and i will i will send

00:37:30,240 --> 00:37:32,640
you all the information you have

00:37:31,359 --> 00:37:34,960
and the models and everything that's

00:37:32,640 --> 00:37:36,640
let's drop me an email or jj maryland

00:37:34,960 --> 00:37:40,000
telegram bye

00:37:36,640 --> 00:37:40,000

YouTube URL: https://www.youtube.com/watch?v=-WqMbWfJYjE


