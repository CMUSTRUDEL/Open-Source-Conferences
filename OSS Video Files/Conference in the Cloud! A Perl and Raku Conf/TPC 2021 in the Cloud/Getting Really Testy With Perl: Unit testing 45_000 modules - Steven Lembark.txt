Title: Getting Really Testy With Perl: Unit testing 45_000 modules - Steven Lembark
Publication date: 2021-06-10
Playlist: TPC 2021 in the Cloud
Description: 
	Unit testing in Perl is straightforward. It's especially helpful when upgrading Perl versions from, say, 5.8 to 5.30 or moving to git with sandboxes. One organization I worked with had 75_000 modules, about 45_000 of them were active, all of them had to be tested. This is how we did it.

Longstanding code bases often have many pieces of code lying around, often without specific tests written for them. This kind technical debit is a major cause of upgrade phobia in management: "How can we be sure it won't break when we install the new version????"  One fix is unit testing: Validating that all of the code passes basic standards. These can range from simple "use_ok" to ensuring that all of the symbols in @EXPORT or @EXPORT_OK really are defined in the necessary modules. The trick is in automating it with a combination of shell/perl to install the tests and flexible tests that investigate the code using metadata. The talk describes some issues I've dealt with in situations testing 45_000 modules or validating @EXPORT and @EXPORT_OK were populated properly. The basic techniques work for any size code base and are big help during upgrades or with CI platforms like Jenkins that can run the tests regularly and find issues quickly. Mixed with a bit of TAP and Inline this makes a nice recipe for testing integration in multiple languages at once.
Captions: 
	00:00:00,000 --> 00:00:03,360
okay so you may not have missed it

00:00:03,919 --> 00:00:10,000
twice oh that stinks but

00:00:07,040 --> 00:00:11,679
i believe he's got the video shot and

00:00:10,000 --> 00:00:12,719
they're just looking for a slot to make

00:00:11,679 --> 00:00:14,639
it official

00:00:12,719 --> 00:00:16,080
it'll be up on youtube if they don't get

00:00:14,639 --> 00:00:18,720
it into the schedule

00:00:16,080 --> 00:00:19,359
okay thank you we are now live on

00:00:18,720 --> 00:00:22,480
youtube

00:00:19,359 --> 00:00:27,760
and it's time you can stop when you want

00:00:22,480 --> 00:00:27,760
right now it's fine neat

00:00:28,960 --> 00:00:35,040
so am i supposed to start yet yes yes

00:00:32,000 --> 00:00:38,239
ah okay poke

00:00:35,040 --> 00:00:39,120
hey it worked anyway i can everyone hear

00:00:38,239 --> 00:00:40,719
me okay

00:00:39,120 --> 00:00:45,840
i'm doing this on a tablet because zoom

00:00:40,719 --> 00:00:45,840
doesn't install on my linux boxes

00:00:47,200 --> 00:00:53,199
um and the fonts legible to everybody

00:00:51,360 --> 00:00:55,280
yes nicholas you're coming through with

00:00:53,199 --> 00:00:59,039
a whole lot of fuzz though

00:00:55,280 --> 00:01:00,000
yeah although that might be feedback

00:00:59,039 --> 00:01:03,120
from ceta

00:01:00,000 --> 00:01:04,720
i'll shut up now yeah i don't know

00:01:03,120 --> 00:01:06,000
yeah i noticed it it sounded pretty bad

00:01:04,720 --> 00:01:08,080
on my end too but i've got no way to

00:01:06,000 --> 00:01:11,840
control that on this end

00:01:08,080 --> 00:01:13,119
um well anyway the thing about pearl 5

00:01:11,840 --> 00:01:15,040
8 you know we're having a lot of fun

00:01:13,119 --> 00:01:16,560
with it i mean they're

00:01:15,040 --> 00:01:18,000
if you look at the outside world they're

00:01:16,560 --> 00:01:20,400
telling us there's been no improvements

00:01:18,000 --> 00:01:23,439
in pearl nothing added to cpan

00:01:20,400 --> 00:01:24,799
if you ask people about upgrading

00:01:23,439 --> 00:01:26,320
one of the reasons i think people say

00:01:24,799 --> 00:01:28,159
pearl's of dead languages they look at

00:01:26,320 --> 00:01:30,400
user bin pearl and it was introduced in

00:01:28,159 --> 00:01:33,600
what 2002

00:01:30,400 --> 00:01:35,680
and the question

00:01:33,600 --> 00:01:38,159
why are we stuck with it well because

00:01:35,680 --> 00:01:40,479
it's user bin pearl

00:01:38,159 --> 00:01:41,840
and they say you know that's what we use

00:01:40,479 --> 00:01:43,759
well then the question is

00:01:41,840 --> 00:01:45,840
you know why do we get stuck with user

00:01:43,759 --> 00:01:47,759
bin pearl

00:01:45,840 --> 00:01:49,040
and the answers i've seen with with a

00:01:47,759 --> 00:01:51,840
lot well it worked

00:01:49,040 --> 00:01:52,320
well i worked in 2002 model t's worked

00:01:51,840 --> 00:01:53,840
uh

00:01:52,320 --> 00:01:55,360
let's just go back to those you crank

00:01:53,840 --> 00:01:56,799
your car by hand to start it i don't

00:01:55,360 --> 00:01:58,399
know

00:01:56,799 --> 00:01:59,840
and then the other fear is you know it's

00:01:58,399 --> 00:02:01,280
fun you know something else might not

00:01:59,840 --> 00:02:03,200
work you know if we don't upgrade to

00:02:01,280 --> 00:02:04,399
python the pearl might not work

00:02:03,200 --> 00:02:06,399
that's the argument i've heard from

00:02:04,399 --> 00:02:08,319
people and

00:02:06,399 --> 00:02:10,560
there is so much fun about well if you

00:02:08,319 --> 00:02:12,560
upgrade it'll all break

00:02:10,560 --> 00:02:13,680
but it doesn't there isn't that

00:02:12,560 --> 00:02:15,680
everything changes

00:02:13,680 --> 00:02:17,200
the people in python with version three

00:02:15,680 --> 00:02:19,040
broke everything in version two

00:02:17,200 --> 00:02:21,520
and everyone kept upgrading there so

00:02:19,040 --> 00:02:24,560
there's something more going on here

00:02:21,520 --> 00:02:25,920
and i think what happened is we can't

00:02:24,560 --> 00:02:28,239
show

00:02:25,920 --> 00:02:30,239
there isn't a easy way to show that

00:02:28,239 --> 00:02:33,280
pearl five dot

00:02:30,239 --> 00:02:35,920
26 or something works you know

00:02:33,280 --> 00:02:36,319
for anything greater than 5.8 there

00:02:35,920 --> 00:02:38,160
isn't

00:02:36,319 --> 00:02:40,319
a quick and dirty way to say yeah you

00:02:38,160 --> 00:02:41,760
know it it checks out

00:02:40,319 --> 00:02:44,480
and this is especially true now that

00:02:41,760 --> 00:02:46,239
we're looking at pearl 5.7

00:02:44,480 --> 00:02:48,319
which we're finally going to get down to

00:02:46,239 --> 00:02:49,440
breaking some of the worst stupidities

00:02:48,319 --> 00:02:51,599
that we have

00:02:49,440 --> 00:02:52,720
and still preserving the language i mean

00:02:51,599 --> 00:02:55,760
riku is fun but

00:02:52,720 --> 00:02:57,360
it isn't pearl it's not pearl anymore so

00:02:55,760 --> 00:02:59,360
looking at these transitions i've had

00:02:57,360 --> 00:03:01,440
several clients

00:02:59,360 --> 00:03:02,400
that were trying to dig themselves out

00:03:01,440 --> 00:03:06,159
of 20 years

00:03:02,400 --> 00:03:07,599
of technical debt and this is just

00:03:06,159 --> 00:03:09,680
monday i did a look at some of the stuff

00:03:07,599 --> 00:03:12,319
i've done for some of them

00:03:09,680 --> 00:03:14,239
and this is a look at one particular

00:03:12,319 --> 00:03:15,760
problem we had that just

00:03:14,239 --> 00:03:17,440
was dealing with the amount of code they

00:03:15,760 --> 00:03:20,560
had

00:03:17,440 --> 00:03:21,360
and they're they really they stopped

00:03:20,560 --> 00:03:24,480
developing

00:03:21,360 --> 00:03:26,560
code almost 20 years ago they had this

00:03:24,480 --> 00:03:28,480
this mindset that you know pearl can't

00:03:26,560 --> 00:03:32,080
change they develop new pearl

00:03:28,480 --> 00:03:35,360
but it was all based on 5.8

00:03:32,080 --> 00:03:37,680
and the testing

00:03:35,360 --> 00:03:39,519
they didn't the argument is we've got

00:03:37,680 --> 00:03:41,519
too much code to test it all so

00:03:39,519 --> 00:03:44,959
that people just stop testing it as long

00:03:41,519 --> 00:03:48,319
as it runs they figure it works

00:03:44,959 --> 00:03:51,200
and bad pun but

00:03:48,319 --> 00:03:53,360
one of the problems also i've seen is

00:03:51,200 --> 00:03:56,480
that people we've worked around

00:03:53,360 --> 00:03:59,840
user bin pearl for so long

00:03:56,480 --> 00:04:01,519
with things like pearl brit and everyone

00:03:59,840 --> 00:04:04,159
tests everything on pearl group but that

00:04:01,519 --> 00:04:04,720
that user bin pearl is still sitting out

00:04:04,159 --> 00:04:07,519
there

00:04:04,720 --> 00:04:08,959
we've dodged it and again that gives a

00:04:07,519 --> 00:04:10,480
lot of people the feeling that pearl's

00:04:08,959 --> 00:04:14,159
dead why should we upgrade our code it

00:04:10,480 --> 00:04:18,639
becomes a chicken and egg kind of thing

00:04:14,159 --> 00:04:20,959
well this deals with one client

00:04:18,639 --> 00:04:21,680
again we had more than a little bit of

00:04:20,959 --> 00:04:23,759
code

00:04:21,680 --> 00:04:24,880
and what i did to show them that they

00:04:23,759 --> 00:04:28,080
could test it

00:04:24,880 --> 00:04:30,880
and that it worked eventually

00:04:28,080 --> 00:04:32,720
in this case we had 75 000 modules to

00:04:30,880 --> 00:04:36,720
begin with if you define

00:04:32,720 --> 00:04:40,080
live minus name star pm to wc minus l

00:04:36,720 --> 00:04:42,800
it was 75 000 and change um

00:04:40,080 --> 00:04:44,639
i went through word count and it was a

00:04:42,800 --> 00:04:47,040
little over two and a half million lines

00:04:44,639 --> 00:04:47,040
of pearl

00:04:47,440 --> 00:04:54,240
uh it's a lot of typing so the question

00:04:50,960 --> 00:04:57,040
is how do we write tests for all of it

00:04:54,240 --> 00:04:58,479
and you've got this you know people you

00:04:57,040 --> 00:05:00,160
know how we and this was their question

00:04:58,479 --> 00:05:00,560
you know how are you going to write 75

00:05:00,160 --> 00:05:02,400
00:05:00,560 --> 00:05:05,199
unit tests we're not going to have time

00:05:02,400 --> 00:05:09,120
to do it we'll never get finished

00:05:05,199 --> 00:05:11,280
the answer this is pearl

00:05:09,120 --> 00:05:13,360
what is the correct answer to almost

00:05:11,280 --> 00:05:16,479
everything

00:05:13,360 --> 00:05:19,919
laziness make it work

00:05:16,479 --> 00:05:21,680
so this is how the laziness worked

00:05:19,919 --> 00:05:23,759
now part of the problem is a lot of

00:05:21,680 --> 00:05:26,800
people say they don't do unit tests

00:05:23,759 --> 00:05:28,080
why bother they don't tell you anything

00:05:26,800 --> 00:05:29,759
you know oh gee you know you don't

00:05:28,080 --> 00:05:30,720
really know if it does anything well

00:05:29,759 --> 00:05:32,960
there's one thing

00:05:30,720 --> 00:05:34,880
unit tests tell you they know you they

00:05:32,960 --> 00:05:37,440
tell you the code compiles

00:05:34,880 --> 00:05:41,039
if you're upgrading from 5 8 to 5 12 or

00:05:37,440 --> 00:05:44,800
16 or i think this was 26 i forgot what

00:05:41,039 --> 00:05:46,720
but you know the code compiles

00:05:44,800 --> 00:05:49,360
you know that there are diagnostics

00:05:46,720 --> 00:05:52,720
about missing modules you know about

00:05:49,360 --> 00:05:54,960
uh unescaped curly braces in your reg

00:05:52,720 --> 00:05:57,520
axes you un you know about

00:05:54,960 --> 00:05:58,560
tests failing because of of something

00:05:57,520 --> 00:06:01,600
else

00:05:58,560 --> 00:06:03,759
but all of the little syntax gotchas

00:06:01,600 --> 00:06:05,919
are easy to find and then you can really

00:06:03,759 --> 00:06:07,120
start testing the functional things

00:06:05,919 --> 00:06:10,400
until you can get

00:06:07,120 --> 00:06:11,120
through a basic unit test nothing else

00:06:10,400 --> 00:06:12,319
matters

00:06:11,120 --> 00:06:15,759
because it's all going to fail anyway

00:06:12,319 --> 00:06:15,759
when the module doesn't compile

00:06:16,160 --> 00:06:20,400
so the trick here is let's take

00:06:18,960 --> 00:06:23,440
something

00:06:20,400 --> 00:06:24,000
i want to encode all the data from my

00:06:23,440 --> 00:06:27,520
test

00:06:24,000 --> 00:06:31,360
into one place that's easy to generate

00:06:27,520 --> 00:06:35,840
make a data driven test and then

00:06:31,360 --> 00:06:35,840
iterate it over all the modules

00:06:36,639 --> 00:06:40,560
so the first you know then is well how

00:06:39,360 --> 00:06:42,720
we're going to write that many tests the

00:06:40,560 --> 00:06:46,160
answer is we never will

00:06:42,720 --> 00:06:47,600
we're going to use simulinks the trick

00:06:46,160 --> 00:06:50,639
there is

00:06:47,600 --> 00:06:52,000
if you look at a module all it really

00:06:50,639 --> 00:06:55,599
takes to test it

00:06:52,000 --> 00:06:58,319
is the path you can do require okay

00:06:55,599 --> 00:06:58,319
dollar path

00:06:58,639 --> 00:07:05,280
and you can tell i can check for

00:07:02,000 --> 00:07:05,919
modules that don't have packages i can

00:07:05,280 --> 00:07:07,840
check

00:07:05,919 --> 00:07:09,759
system paths i can check for dangling

00:07:07,840 --> 00:07:10,639
links there's all sorts of fun stuff you

00:07:09,759 --> 00:07:13,120
can find

00:07:10,639 --> 00:07:15,039
from just failing or require okay or

00:07:13,120 --> 00:07:16,639
getting the diagnostics out of it

00:07:15,039 --> 00:07:19,199
by turning warnings on and then doing

00:07:16,639 --> 00:07:19,199
the require

00:07:19,759 --> 00:07:25,520
so the neat thing is here require okay

00:07:23,280 --> 00:07:27,120
if you look at the the spec for it

00:07:25,520 --> 00:07:29,520
normally people think of giving it a

00:07:27,120 --> 00:07:31,520
module with double colons in it

00:07:29,520 --> 00:07:33,360
but there's no reason you just can't

00:07:31,520 --> 00:07:35,360
give it a path on the disk

00:07:33,360 --> 00:07:36,720
if you give it a relative working path

00:07:35,360 --> 00:07:38,880
or an absolute path

00:07:36,720 --> 00:07:40,880
require okay will slurp something off

00:07:38,880 --> 00:07:44,080
the disk and compile it for you

00:07:40,880 --> 00:07:47,039
and say yeah it gets that far

00:07:44,080 --> 00:07:47,360
so the trick is i now have to find a way

00:07:47,039 --> 00:07:51,039
of

00:07:47,360 --> 00:07:53,360
passing an argument to this test 75 000

00:07:51,039 --> 00:07:56,160
times

00:07:53,360 --> 00:07:56,800
and you know you could you could create

00:07:56,160 --> 00:07:59,440
a flat

00:07:56,800 --> 00:08:01,280
file and just iterate every but then you

00:07:59,440 --> 00:08:03,440
got to maintain the flat file

00:08:01,280 --> 00:08:05,199
i want something that is just if it's

00:08:03,440 --> 00:08:07,280
there you can run it

00:08:05,199 --> 00:08:10,160
and the test itself encompasses

00:08:07,280 --> 00:08:13,199
everything i could know about it

00:08:10,160 --> 00:08:14,560
and with a way to do that is you put the

00:08:13,199 --> 00:08:17,680
information you need

00:08:14,560 --> 00:08:20,960
in the name of the test

00:08:17,680 --> 00:08:20,960
so i can have a test

00:08:21,039 --> 00:08:25,680
that wakes up in the morning and if

00:08:23,759 --> 00:08:28,800
people can see the code here

00:08:25,680 --> 00:08:32,640
it it just all you have to do is

00:08:28,800 --> 00:08:35,839
strip off the dot t and then

00:08:32,640 --> 00:08:38,560
split the thing apart

00:08:35,839 --> 00:08:41,839
on a separator recombine it with slashes

00:08:38,560 --> 00:08:41,839
and require it

00:08:43,039 --> 00:08:46,399
does this make sense to people

00:08:46,720 --> 00:08:51,200
okay everyone with a heartbeat say good

00:08:48,959 --> 00:08:54,399
morning

00:08:51,200 --> 00:08:54,399
good morning good morning

00:09:05,680 --> 00:09:09,279
this can be a little more interactive

00:09:07,660 --> 00:09:12,160
[Music]

00:09:09,279 --> 00:09:15,440
so the trick here is i can look at the

00:09:12,160 --> 00:09:18,399
base name if i strip off the dot t

00:09:15,440 --> 00:09:19,519
i can look at the first character

00:09:18,399 --> 00:09:22,480
whatever that is

00:09:19,519 --> 00:09:23,920
all the slashes in the file got replaced

00:09:22,480 --> 00:09:26,000
with that on the way in

00:09:23,920 --> 00:09:28,720
if i split them and join them i can

00:09:26,000 --> 00:09:28,720
require okay

00:09:29,519 --> 00:09:33,839
i think that's a pretty short program

00:09:31,680 --> 00:09:38,320
can we agree to that

00:09:33,839 --> 00:09:38,320
yep what do you get oh

00:09:39,040 --> 00:09:46,959
okay i can take the base name of a file

00:09:44,560 --> 00:09:49,040
and i can encode a path in it by

00:09:46,959 --> 00:09:51,120
substituting the slashes with something

00:09:49,040 --> 00:09:53,360
else

00:09:51,120 --> 00:09:54,560
i can reconstitute the original path by

00:09:53,360 --> 00:09:58,399
taking base name

00:09:54,560 --> 00:09:58,399
and stripping the dot t off the end

00:09:58,480 --> 00:10:01,839
at that point i've got a working path i

00:10:00,160 --> 00:10:05,839
can do a require okay on it it requires

00:10:01,839 --> 00:10:05,839
or it doesn't end of story

00:10:06,000 --> 00:10:09,440
that's about a sure program is i mean

00:10:08,160 --> 00:10:12,880
you can actually

00:10:09,440 --> 00:10:15,760
do this with a regex

00:10:12,880 --> 00:10:19,839
and no variables in one line none of you

00:10:15,760 --> 00:10:19,839
wants to read

00:10:21,200 --> 00:10:25,839
so the trick then is how do i create

00:10:22,800 --> 00:10:28,560
these in the shell

00:10:25,839 --> 00:10:30,959
i if i have a directory where this

00:10:28,560 --> 00:10:35,680
exists

00:10:30,959 --> 00:10:35,680
i can create a directory called one unit

00:10:35,839 --> 00:10:40,720
and oops i apologize a lot of this we

00:10:38,959 --> 00:10:42,399
only had two weeks to write these things

00:10:40,720 --> 00:10:45,839
and a lot of this code was hacked

00:10:42,399 --> 00:10:47,200
libreoffice i screwed up something here

00:10:45,839 --> 00:10:50,480
um

00:10:47,200 --> 00:10:52,720
the dur needs to be the point is i can

00:10:50,480 --> 00:10:54,079
do a find on all my lives of all the dot

00:10:52,720 --> 00:10:56,079
pms

00:10:54,079 --> 00:10:57,760
and for each one of them i can translate

00:10:56,079 --> 00:10:59,680
a slash into a tilde

00:10:57,760 --> 00:11:00,800
and then t stick a dot t on the end of

00:10:59,680 --> 00:11:04,399
it

00:11:00,800 --> 00:11:06,800
i can then create a sim link from

00:11:04,399 --> 00:11:07,920
a generic unit test the thing you saw on

00:11:06,800 --> 00:11:11,120
the last slide

00:11:07,920 --> 00:11:14,880
to whatever this thing is here

00:11:11,120 --> 00:11:15,839
does that make sense makes sense but

00:11:14,880 --> 00:11:19,360
here's a dumb

00:11:15,839 --> 00:11:22,480
question yeah no mine

00:11:19,360 --> 00:11:23,920
and i don't know how test works but

00:11:22,480 --> 00:11:28,240
could you make the first

00:11:23,920 --> 00:11:32,480
test in your suite

00:11:28,240 --> 00:11:34,480
basically this code no

00:11:32,480 --> 00:11:36,000
proof looks up the list of files when it

00:11:34,480 --> 00:11:38,640
wakes up in the morning

00:11:36,000 --> 00:11:40,079
the other thing is i don't necessarily

00:11:38,640 --> 00:11:42,560
want to run all of them one of the

00:11:40,079 --> 00:11:44,959
really sexy things about this approach

00:11:42,560 --> 00:11:45,760
is if you want to if you've got 75 000

00:11:44,959 --> 00:11:47,920
of these things

00:11:45,760 --> 00:11:49,760
and you want to prove all the stuff in

00:11:47,920 --> 00:11:53,680
one small section of it

00:11:49,760 --> 00:11:55,680
you can do approve t slash 01 slash

00:11:53,680 --> 00:11:57,600
star and give it the name of one

00:11:55,680 --> 00:11:59,120
directory star

00:11:57,600 --> 00:12:01,360
or a couple of subdirectories with

00:11:59,120 --> 00:12:04,880
tildes between them and you can test any

00:12:01,360 --> 00:12:04,880
subset of the code in one pass

00:12:04,959 --> 00:12:09,360
so somebody let's say doesn't want to

00:12:06,639 --> 00:12:11,760
see all of the output for everything

00:12:09,360 --> 00:12:14,079
shell globs make it very easy to test

00:12:11,760 --> 00:12:16,240
subsets of your code

00:12:14,079 --> 00:12:17,839
i i assume you're running this on

00:12:16,240 --> 00:12:19,680
different subsets in different

00:12:17,839 --> 00:12:21,360
directories

00:12:19,680 --> 00:12:22,959
no actually the first well i'm going to

00:12:21,360 --> 00:12:24,000
show you that in a little while i'll

00:12:22,959 --> 00:12:26,320
shut up

00:12:24,000 --> 00:12:28,880
thank you the first time i ran this we

00:12:26,320 --> 00:12:29,760
had one directory with 75 000 files in

00:12:28,880 --> 00:12:33,279
it

00:12:29,760 --> 00:12:33,279
xfs doesn't care

00:12:35,120 --> 00:12:38,480
eventually and i didn't have time to put

00:12:37,040 --> 00:12:41,040
that into the slide here

00:12:38,480 --> 00:12:42,480
i rewrote it so it chunks the files into

00:12:41,040 --> 00:12:46,160
units of 1 000

00:12:42,480 --> 00:12:52,079
each which by the time i was done left

00:12:46,160 --> 00:12:54,160
us with 40 directories

00:12:52,079 --> 00:12:56,240
and then it becomes a question of of

00:12:54,160 --> 00:12:57,680
finding the file you want

00:12:56,240 --> 00:12:59,360
but like i said the cute thing about

00:12:57,680 --> 00:13:02,560
this is if i've got

00:12:59,360 --> 00:13:07,120
all the base names encoded

00:13:02,560 --> 00:13:11,040
into the tests a shell glob will get me

00:13:07,120 --> 00:13:12,959
a single test or any subset by directory

00:13:11,040 --> 00:13:14,240
or if they're common names that you use

00:13:12,959 --> 00:13:17,360
for things that do

00:13:14,240 --> 00:13:19,360
database or whatever i can i can glob

00:13:17,360 --> 00:13:21,040
them out and run the the test separately

00:13:19,360 --> 00:13:23,120
for just those

00:13:21,040 --> 00:13:24,560
but generally you want to pre-generate

00:13:23,120 --> 00:13:27,040
them and make sure they generate before

00:13:24,560 --> 00:13:30,880
you run proof

00:13:27,040 --> 00:13:32,959
um and here's the real magic here

00:13:30,880 --> 00:13:35,120
is if i take every one of these that i

00:13:32,959 --> 00:13:36,000
find i can substitute slashes with

00:13:35,120 --> 00:13:37,600
tildes

00:13:36,000 --> 00:13:39,279
another thing that works pretty well

00:13:37,600 --> 00:13:39,760
because it doesn't mean anything to the

00:13:39,279 --> 00:13:44,160
shell

00:13:39,760 --> 00:13:48,079
or at least a bash is plus signs

00:13:44,160 --> 00:13:50,079
uh they're just harder to read

00:13:48,079 --> 00:13:51,680
so i i ended up after trying a bunch of

00:13:50,079 --> 00:13:52,240
different things i ended up with tildes

00:13:51,680 --> 00:13:55,600
just because

00:13:52,240 --> 00:13:55,600
people can figure out what they mean

00:13:56,079 --> 00:14:02,000
so now i can do just prove this thing

00:13:59,440 --> 00:14:04,160
i can tell you if everything compiles

00:14:02,000 --> 00:14:05,760
better yet

00:14:04,160 --> 00:14:07,760
i can even more quickly tell you if

00:14:05,760 --> 00:14:10,880
things compile because i can use

00:14:07,760 --> 00:14:13,040
i can run these in parallel and get the

00:14:10,880 --> 00:14:15,519
output

00:14:13,040 --> 00:14:18,160
even better i can do it at three o'clock

00:14:15,519 --> 00:14:20,880
in the morning

00:14:18,160 --> 00:14:21,519
and i can have a cron job running this

00:14:20,880 --> 00:14:24,560
with

00:14:21,519 --> 00:14:26,800
and i can hog the machine i can set the

00:14:24,560 --> 00:14:29,360
jobs equal the number of cpus by

00:14:26,800 --> 00:14:31,120
gripping it out of proc or something

00:14:29,360 --> 00:14:34,560
and i can actually just swallow the

00:14:31,120 --> 00:14:34,560
machine hole running tests

00:14:35,120 --> 00:14:38,240
better than that i can come back at

00:14:36,880 --> 00:14:40,000
eight o'clock in the morning

00:14:38,240 --> 00:14:42,320
and i can look at only the tests that

00:14:40,000 --> 00:14:46,560
failed so that i don't have to

00:14:42,320 --> 00:14:48,160
check the output of 45 000 tests

00:14:46,560 --> 00:14:50,639
and i'm not being i'm not joking there

00:14:48,160 --> 00:14:52,079
were 45 000 plus of these

00:14:50,639 --> 00:14:53,680
we we finally figured out there were

00:14:52,079 --> 00:14:55,600
some things we didn't want to test

00:14:53,680 --> 00:14:57,760
like there were tests there were

00:14:55,600 --> 00:15:00,000
prototypes we just we left those out

00:14:57,760 --> 00:15:03,279
and left it at the production code but

00:15:00,000 --> 00:15:05,360
there were still 45 000 of these things

00:15:03,279 --> 00:15:08,720
so only seeing the things that failed

00:15:05,360 --> 00:15:10,959
got get important after a while

00:15:08,720 --> 00:15:13,839
now has anyone ever seen this message

00:15:10,959 --> 00:15:13,839
before

00:15:16,639 --> 00:15:20,399
yeah yeah of course i've seen it a few

00:15:19,519 --> 00:15:23,600
times

00:15:20,399 --> 00:15:26,399
a few times let's say you've got this

00:15:23,600 --> 00:15:29,519
showing up a whole bunch of times

00:15:26,399 --> 00:15:29,519
what are you going to do next

00:15:30,800 --> 00:15:37,040
i installed the fubar module oh

00:15:34,000 --> 00:15:39,120
man we're looking for where it's

00:15:37,040 --> 00:15:41,360
supposed to be

00:15:39,120 --> 00:15:43,360
screw that you're going to pipe it into

00:15:41,360 --> 00:15:46,399
something

00:15:43,360 --> 00:15:47,759
and just install them you don't want to

00:15:46,399 --> 00:15:49,839
install them you just want to have them

00:15:47,759 --> 00:15:51,920
installed

00:15:49,839 --> 00:15:53,680
the way to get the modules you need for

00:15:51,920 --> 00:15:56,240
a project this large

00:15:53,680 --> 00:15:57,839
put in a virgin copy because that's one

00:15:56,240 --> 00:16:00,959
of the problems you get into people say

00:15:57,839 --> 00:16:02,800
but i won't have all the modules i need

00:16:00,959 --> 00:16:05,440
unit tests will tell you which modules

00:16:02,800 --> 00:16:05,440
you're missing

00:16:06,480 --> 00:16:10,880
at that point i can run proof

00:16:11,199 --> 00:16:17,519
and grep out all of the missing modules

00:16:14,720 --> 00:16:20,320
in one pass

00:16:17,519 --> 00:16:21,839
i can stick them through cpan-m i can

00:16:20,320 --> 00:16:24,160
have them all installed first thing in

00:16:21,839 --> 00:16:24,160
the morning

00:16:26,639 --> 00:16:32,000
and it's not a very long show program

00:16:28,880 --> 00:16:32,000
it's one piece of plumbing

00:16:32,880 --> 00:16:36,079
better than that one of the problems

00:16:35,519 --> 00:16:37,440
people have

00:16:36,079 --> 00:16:38,720
is the question well you know what if we

00:16:37,440 --> 00:16:39,600
can't get the cpan what are their

00:16:38,720 --> 00:16:42,800
problems

00:16:39,600 --> 00:16:45,199
you can use cpan mini to load the

00:16:42,800 --> 00:16:46,639
current version of everything into a

00:16:45,199 --> 00:16:50,000
local

00:16:46,639 --> 00:16:52,880
cpan repository and m will

00:16:50,000 --> 00:16:54,320
you can have it use only that as the

00:16:52,880 --> 00:16:56,560
local repository

00:16:54,320 --> 00:16:57,759
that makes it a lot faster and a lot

00:16:56,560 --> 00:16:59,759
more reliable

00:16:57,759 --> 00:17:01,279
it also means that maybe with a little

00:16:59,759 --> 00:17:03,360
disk shuffling

00:17:01,279 --> 00:17:04,559
the machine that's doing your testing

00:17:03,360 --> 00:17:07,839
may be behind

00:17:04,559 --> 00:17:09,679
a proxy server that doesn't let the

00:17:07,839 --> 00:17:13,039
tests get out

00:17:09,679 --> 00:17:16,839
but i can still do this with with the

00:17:13,039 --> 00:17:18,160
cpan mirror and i can create a local

00:17:16,839 --> 00:17:20,240
mirror

00:17:18,160 --> 00:17:22,880
better than that one of the things i can

00:17:20,240 --> 00:17:26,559
do is create a local repository

00:17:22,880 --> 00:17:29,760
so i can stick the cpan modules into

00:17:26,559 --> 00:17:32,400
let's say git or perforce

00:17:29,760 --> 00:17:34,720
and what's important about that is now

00:17:32,400 --> 00:17:37,440
once we're done with this

00:17:34,720 --> 00:17:40,559
i can have a daily process checking for

00:17:37,440 --> 00:17:44,640
all the modules we've installed

00:17:40,559 --> 00:17:46,640
running the mirror doing an update

00:17:44,640 --> 00:17:48,480
updating all the local modules and i can

00:17:46,640 --> 00:17:49,120
test if any of the new versions of

00:17:48,480 --> 00:17:51,919
modules

00:17:49,120 --> 00:17:53,440
break any of my code at eight o'clock at

00:17:51,919 --> 00:17:54,240
two o'clock in the morning when nobody

00:17:53,440 --> 00:17:56,480
cares

00:17:54,240 --> 00:17:58,000
if we don't like the result we don't

00:17:56,480 --> 00:17:59,760
commit it

00:17:58,000 --> 00:18:01,600
or you commit it and just don't update a

00:17:59,760 --> 00:18:04,480
tag and then everyone uses the tag for

00:18:01,600 --> 00:18:06,720
the working modules

00:18:04,480 --> 00:18:09,360
but notice how much typing did i do to

00:18:06,720 --> 00:18:09,360
produce this

00:18:10,240 --> 00:18:16,720
none this could be stuck in a cron job

00:18:13,600 --> 00:18:17,520
i have to type this much once true

00:18:16,720 --> 00:18:21,120
laziness

00:18:17,520 --> 00:18:23,120
is not doing things twice

00:18:21,120 --> 00:18:25,919
if you want to do this you can run you

00:18:23,120 --> 00:18:28,400
can take after this

00:18:25,919 --> 00:18:29,760
you can run prove again and if it

00:18:28,400 --> 00:18:34,559
succeeds

00:18:29,760 --> 00:18:36,080
you add a tag past whatever

00:18:34,559 --> 00:18:38,160
you know that whatever you've got in

00:18:36,080 --> 00:18:39,840
your local repository works with

00:18:38,160 --> 00:18:43,840
whatever code you've got

00:18:39,840 --> 00:18:43,840
and that's what you put into qa

00:18:44,640 --> 00:18:48,720
now another thing you can do um and this

00:18:47,120 --> 00:18:50,480
is an approach i'm using with with my

00:18:48,720 --> 00:18:53,760
current client

00:18:50,480 --> 00:18:58,080
what we did is created a

00:18:53,760 --> 00:19:01,600
git repository called site perl

00:18:58,080 --> 00:19:06,240
and what i do then is i run

00:19:01,600 --> 00:19:10,240
all of my make files with install base

00:19:06,240 --> 00:19:12,559
or i can run cpan-m with a local library

00:19:10,240 --> 00:19:14,080
and that installs everything into this

00:19:12,559 --> 00:19:17,200
site perl

00:19:14,080 --> 00:19:18,880
at that point my daily process starts it

00:19:17,200 --> 00:19:22,559
wakes up in the morning

00:19:18,880 --> 00:19:24,480
and does a get sub module update

00:19:22,559 --> 00:19:26,880
and it validates whether all the updated

00:19:24,480 --> 00:19:29,760
modules are happy with our code

00:19:26,880 --> 00:19:29,760
or vice versa

00:19:30,000 --> 00:19:35,200
if if it doesn't work you don't tag it

00:19:33,679 --> 00:19:36,799
and you have an error you have a list of

00:19:35,200 --> 00:19:38,720
error messages to tell you what's wrong

00:19:36,799 --> 00:19:40,160
in the newest versions you can research

00:19:38,720 --> 00:19:41,760
what's wrong with your code what's wrong

00:19:40,160 --> 00:19:43,200
with their code do you want to

00:19:41,760 --> 00:19:44,640
change yours to account for the new

00:19:43,200 --> 00:19:46,160
module do you want to leave it the way

00:19:44,640 --> 00:19:50,080
it is and just not update it

00:19:46,160 --> 00:19:52,240
fine at that point you can always

00:19:50,080 --> 00:19:55,360
recheck out an older copy of something

00:19:52,240 --> 00:19:58,320
and just skip it the next time

00:19:55,360 --> 00:20:00,640
um has anyone here ever fat fingered a

00:19:58,320 --> 00:20:03,760
package name

00:20:00,640 --> 00:20:07,039
i'm raising my hand never never

00:20:03,760 --> 00:20:08,559
okay well then you can go to sleep for a

00:20:07,039 --> 00:20:11,600
while

00:20:08,559 --> 00:20:15,360
the rest of this mere mortals

00:20:11,600 --> 00:20:19,039
notice something if i require a path

00:20:15,360 --> 00:20:21,520
and i'm succeed at requiring it

00:20:19,039 --> 00:20:22,880
and if i know where it lives and i'll

00:20:21,520 --> 00:20:24,480
show you where that double slash comes

00:20:22,880 --> 00:20:28,240
from

00:20:24,480 --> 00:20:29,120
i can snag the portion of the name that

00:20:28,240 --> 00:20:32,840
represents

00:20:29,120 --> 00:20:34,799
the module and i can ask an important

00:20:32,840 --> 00:20:38,400
question

00:20:34,799 --> 00:20:41,760
is that module universal

00:20:38,400 --> 00:20:41,760
and can it do a version

00:20:43,360 --> 00:20:52,000
can you see why i want to do that

00:20:49,440 --> 00:20:52,000
anybody

00:20:52,640 --> 00:20:57,600
please tell us oh come on somebody's got

00:20:56,240 --> 00:21:00,640
to be awake

00:20:57,600 --> 00:21:03,760
i'm not that boring am i

00:21:00,640 --> 00:21:04,880
oh well the point is if i fat finger the

00:21:03,760 --> 00:21:07,039
package name

00:21:04,880 --> 00:21:08,480
and i look for that package it's not

00:21:07,039 --> 00:21:11,679
going to be in universal because it's

00:21:08,480 --> 00:21:13,440
not going to be in the symbol table

00:21:11,679 --> 00:21:14,799
if i fry the package in a couple of

00:21:13,440 --> 00:21:18,320
other ways

00:21:14,799 --> 00:21:18,320
it won't be able to do a version

00:21:18,400 --> 00:21:21,520
so at that point with nothing more than

00:21:20,720 --> 00:21:23,360
require

00:21:21,520 --> 00:21:25,440
and i can do an iso actually that should

00:21:23,360 --> 00:21:28,559
be is a okay my apologies

00:21:25,440 --> 00:21:31,760
or i can do package to can i can

00:21:28,559 --> 00:21:32,640
tell right away because all packages are

00:21:31,760 --> 00:21:35,200
universal

00:21:32,640 --> 00:21:37,200
if i botch the package name what i

00:21:35,200 --> 00:21:39,600
required the file

00:21:37,200 --> 00:21:41,760
i won't be find that in the symbol table

00:21:39,600 --> 00:21:45,039
it won't be in universal

00:21:41,760 --> 00:21:47,039
and it won't be able to do a version

00:21:45,039 --> 00:21:48,960
i forgot what the case is but there was

00:21:47,039 --> 00:21:50,799
one place i managed to find something

00:21:48,960 --> 00:21:52,240
where it was universal but it couldn't

00:21:50,799 --> 00:21:55,440
version and that's where we also found

00:21:52,240 --> 00:21:58,000
something else wrong with the package

00:21:55,440 --> 00:22:01,200
well i forgot to put the one after the

00:21:58,000 --> 00:22:03,600
skip on the first case but

00:22:01,200 --> 00:22:04,480
the point here is with nothing more than

00:22:03,600 --> 00:22:06,480
this

00:22:04,480 --> 00:22:08,880
you can validate a fair amount about

00:22:06,480 --> 00:22:09,600
something on on monday i showed you can

00:22:08,880 --> 00:22:13,120
check

00:22:09,600 --> 00:22:14,159
the exports you can check pro minus wc

00:22:13,120 --> 00:22:16,000
on something

00:22:14,159 --> 00:22:18,320
with really nothing more than the name

00:22:16,000 --> 00:22:21,440
of the file

00:22:18,320 --> 00:22:24,640
now there's another issue with paths um

00:22:21,440 --> 00:22:26,559
in when pearl 5 first came out

00:22:24,640 --> 00:22:28,159
modules were kind of a new thing and

00:22:26,559 --> 00:22:30,880
people didn't exactly understand

00:22:28,159 --> 00:22:33,520
how these how these things worked there

00:22:30,880 --> 00:22:36,080
were different approaches to managing

00:22:33,520 --> 00:22:38,000
namespaces uh one thing people did

00:22:36,080 --> 00:22:39,120
originally is they'd have a package with

00:22:38,000 --> 00:22:42,400
the base name

00:22:39,120 --> 00:22:44,080
and they'd have a used live with 45

00:22:42,400 --> 00:22:45,840
directories in it

00:22:44,080 --> 00:22:48,000
and then depending on which which of

00:22:45,840 --> 00:22:50,000
them if any of the base names

00:22:48,000 --> 00:22:52,240
uh collided you had to shuffle the

00:22:50,000 --> 00:22:53,919
directory list everywhere you went

00:22:52,240 --> 00:22:56,880
so that everyone got the right

00:22:53,919 --> 00:22:58,559
collection of module names

00:22:56,880 --> 00:23:00,799
and people eventually figured out that

00:22:58,559 --> 00:23:04,080
wasn't a good idea

00:23:00,799 --> 00:23:05,600
so now we have like subdirectories

00:23:04,080 --> 00:23:07,200
but then you've got another interesting

00:23:05,600 --> 00:23:08,640
problem of evolution

00:23:07,200 --> 00:23:10,640
what if we have something like this i'm

00:23:08,640 --> 00:23:12,320
working for acme widgets and they've got

00:23:10,640 --> 00:23:14,880
a config module

00:23:12,320 --> 00:23:16,240
and it's acme did this make sense to

00:23:14,880 --> 00:23:17,600
people

00:23:16,240 --> 00:23:19,360
we've all seen things like this right

00:23:17,600 --> 00:23:22,480
yes yes

00:23:19,360 --> 00:23:22,880
then you get this i can go from here to

00:23:22,480 --> 00:23:24,720
here

00:23:22,880 --> 00:23:26,559
and i can go from knowing that i'm in

00:23:24,720 --> 00:23:28,320
the live directory i can tell you

00:23:26,559 --> 00:23:30,159
exactly what the package name is going

00:23:28,320 --> 00:23:31,600
to be right

00:23:30,159 --> 00:23:34,320
and then somebody came along and said

00:23:31,600 --> 00:23:36,000
but i want the acme subdirectory

00:23:34,320 --> 00:23:37,679
and the acme configs are different than

00:23:36,000 --> 00:23:40,320
the acme which configs they just live in

00:23:37,679 --> 00:23:40,320
the same path

00:23:43,520 --> 00:23:51,600
so now i got a problem i can't use acme

00:23:46,880 --> 00:23:54,159
widget i can't use live as a base

00:23:51,600 --> 00:23:55,760
because there isn't an acme wedge acne

00:23:54,159 --> 00:23:57,600
config there's an acme config

00:23:55,760 --> 00:23:59,520
under the acme wedge that has an acme

00:23:57,600 --> 00:24:04,720
which can pick

00:23:59,520 --> 00:24:07,840
oops so the trick i found here

00:24:04,720 --> 00:24:09,039
a couple of things one is i have to run

00:24:07,840 --> 00:24:12,080
all of my tests

00:24:09,039 --> 00:24:12,559
in a way that each of the subdirectories

00:24:12,080 --> 00:24:16,799
that

00:24:12,559 --> 00:24:20,240
that is a the base of a namespace

00:24:16,799 --> 00:24:21,720
for some collection of modules they all

00:24:20,240 --> 00:24:24,799
have to be checked

00:24:21,720 --> 00:24:25,520
independently so that i can find the

00:24:24,799 --> 00:24:28,080
right

00:24:25,520 --> 00:24:28,080
packages

00:24:28,559 --> 00:24:33,120
the trick for that you got to iterate

00:24:31,440 --> 00:24:34,559
these guys right you got to go one down

00:24:33,120 --> 00:24:36,159
them one at a time you can't just look

00:24:34,559 --> 00:24:37,919
down acme which because you'll have no

00:24:36,159 --> 00:24:40,480
idea where to start looking for the

00:24:37,919 --> 00:24:44,640
package name

00:24:40,480 --> 00:24:44,640
question how do i avoid duplicating the

00:24:44,840 --> 00:24:49,120
tests

00:24:47,200 --> 00:24:51,600
ah come on somebody's got to be awake

00:24:49,120 --> 00:24:51,600
please

00:24:52,159 --> 00:24:56,559
okay i'll give it to you now you start

00:24:55,360 --> 00:24:59,600
them by length

00:24:56,559 --> 00:25:01,039
not alphabetically by length because one

00:24:59,600 --> 00:25:01,840
thing you know about the unix file

00:25:01,039 --> 00:25:06,559
system

00:25:01,840 --> 00:25:10,159
any path that is longer than another one

00:25:06,559 --> 00:25:14,400
won't contain the shorter path

00:25:10,159 --> 00:25:16,400
however can't happen

00:25:14,400 --> 00:25:17,679
so at that point if i sort these by

00:25:16,400 --> 00:25:20,400
length

00:25:17,679 --> 00:25:22,159
it's a it's a truncated schwarzen

00:25:20,400 --> 00:25:23,520
transform because i actually save the

00:25:22,159 --> 00:25:26,799
length

00:25:23,520 --> 00:25:29,600
i can go from here and what i do is this

00:25:26,799 --> 00:25:33,440
i say for each of these

00:25:29,600 --> 00:25:37,440
i can now exclude known paths file find

00:25:33,440 --> 00:25:39,360
has a prune option so for each of these

00:25:37,440 --> 00:25:42,320
dirts they're in sorted

00:25:39,360 --> 00:25:44,880
by length order i can do a find on it

00:25:42,320 --> 00:25:46,720
and then add it to a prune directory

00:25:44,880 --> 00:25:48,159
now when i come back and run wanted on

00:25:46,720 --> 00:25:51,200
the next one

00:25:48,159 --> 00:25:55,440
if i've seen it before i can

00:25:51,200 --> 00:25:58,000
prune this and skip it

00:25:55,440 --> 00:25:59,279
do you want question by length do you

00:25:58,000 --> 00:26:02,240
mean depth

00:25:59,279 --> 00:26:02,640
or no no i mean the number of characters

00:26:02,240 --> 00:26:05,919
in

00:26:02,640 --> 00:26:10,400
the name okay uh

00:26:05,919 --> 00:26:13,760
if you look at it here oops

00:26:10,400 --> 00:26:15,120
um if you look at the way the unix file

00:26:13,760 --> 00:26:17,360
system works

00:26:15,120 --> 00:26:19,600
it is impossible without some really

00:26:17,360 --> 00:26:22,720
flaky sim links

00:26:19,600 --> 00:26:26,640
to have a longer name

00:26:22,720 --> 00:26:29,520
that is contain that contains

00:26:26,640 --> 00:26:29,520
a shorter one

00:26:30,559 --> 00:26:37,600
does that make sense it is impossible

00:26:35,360 --> 00:26:38,960
for the directory acme which acme which

00:26:37,600 --> 00:26:43,840
external plastic

00:26:38,960 --> 00:26:45,520
to contain plastic external

00:26:43,840 --> 00:26:47,120
it can't happen because you'd have to

00:26:45,520 --> 00:26:48,880
have all of the characters in the first

00:26:47,120 --> 00:26:51,120
one to make a subdirectory

00:26:48,880 --> 00:26:52,880
subdirectories are always have more

00:26:51,120 --> 00:26:55,200
characters in their parent directory

00:26:52,880 --> 00:26:56,400
okay yeah i see that you can't have a

00:26:55,200 --> 00:26:58,159
parent directory

00:26:56,400 --> 00:26:59,520
that is longer than the name of its

00:26:58,159 --> 00:27:03,120
subdirectories

00:26:59,520 --> 00:27:03,120
because they're composed by addition

00:27:05,120 --> 00:27:08,480
so just sort of i don't have to sort

00:27:06,640 --> 00:27:09,200
these lexically i just have to sort them

00:27:08,480 --> 00:27:12,320
lengthy

00:27:09,200 --> 00:27:14,400
whatever you want to call it um

00:27:12,320 --> 00:27:15,840
so for every directory that i've seen i

00:27:14,400 --> 00:27:18,880
prune it going forward

00:27:15,840 --> 00:27:21,039
otherwise i add all the same links

00:27:18,880 --> 00:27:22,559
now there's one other problem here i'd

00:27:21,039 --> 00:27:25,760
still need to figure out

00:27:22,559 --> 00:27:28,640
how to generate the portion of the name

00:27:25,760 --> 00:27:28,640
that makes up

00:27:28,799 --> 00:27:34,080
yeah don't revisit um but now i need to

00:27:32,080 --> 00:27:36,399
know what the root directory for any one

00:27:34,080 --> 00:27:39,200
of these subsets of modules is

00:27:36,399 --> 00:27:40,640
so i can get the expected package the

00:27:39,200 --> 00:27:43,360
trick i found is this

00:27:40,640 --> 00:27:45,039
i know at the point in time where i'm

00:27:43,360 --> 00:27:47,600
making the sim link

00:27:45,039 --> 00:27:50,480
i know that i'm looking in acme which

00:27:47,600 --> 00:27:55,279
acme for example

00:27:50,480 --> 00:27:55,279
at that point i can double the separator

00:27:55,360 --> 00:28:01,360
it's just a substitute

00:27:58,640 --> 00:28:03,840
of the base name a substitute of the

00:28:01,360 --> 00:28:06,559
path

00:28:03,840 --> 00:28:08,000
at offset length of the starting

00:28:06,559 --> 00:28:11,279
directory

00:28:08,000 --> 00:28:13,279
i change zero characters to my separator

00:28:11,279 --> 00:28:14,799
just stick a tilde and extra tilde in

00:28:13,279 --> 00:28:17,360
there

00:28:14,799 --> 00:28:17,840
what happens then i get something like

00:28:17,360 --> 00:28:20,640
this

00:28:17,840 --> 00:28:22,799
what i'm trying to do the require but

00:28:20,640 --> 00:28:24,000
the unix file system doesn't give a damn

00:28:22,799 --> 00:28:26,559
about duplicated dac

00:28:24,000 --> 00:28:26,559
slashes

00:28:27,200 --> 00:28:30,880
it's happy with that i can put 16

00:28:29,440 --> 00:28:32,399
slashes in a row

00:28:30,880 --> 00:28:34,080
unix doesn't know about them it just

00:28:32,399 --> 00:28:35,840
keeps referencing dot

00:28:34,080 --> 00:28:38,399
it may be slow if you put enough of them

00:28:35,840 --> 00:28:40,640
in but you'll get your file and require

00:28:38,399 --> 00:28:44,159
okay we'll be just happy with it

00:28:40,640 --> 00:28:47,360
the nice trick is if i split this at the

00:28:44,159 --> 00:28:50,080
double separator i can turn that into a

00:28:47,360 --> 00:28:50,080
valid path

00:28:50,399 --> 00:28:53,679
i still manage to encode all of the

00:28:52,880 --> 00:28:56,960
information

00:28:53,679 --> 00:29:01,360
i need to do a require ok and validate

00:28:56,960 --> 00:29:01,360
the package in the base name of the test

00:29:03,679 --> 00:29:07,120
again the way to do it if i've got a

00:29:05,679 --> 00:29:08,799
length of the

00:29:07,120 --> 00:29:11,360
that router that i'm looking through

00:29:08,799 --> 00:29:13,360
right now i take the sim link

00:29:11,360 --> 00:29:14,960
and i stuff an extra thing at the offset

00:29:13,360 --> 00:29:16,960
of that length

00:29:14,960 --> 00:29:19,200
that's going to be the place where i

00:29:16,960 --> 00:29:21,600
need an extra separator

00:29:19,200 --> 00:29:24,399
i'm done i can make all of these when i

00:29:21,600 --> 00:29:24,399
do the sim links

00:29:24,640 --> 00:29:28,640
then what i do another problem was there

00:29:27,039 --> 00:29:29,440
were a lot of things we didn't want to

00:29:28,640 --> 00:29:30,720
test

00:29:29,440 --> 00:29:34,880
there were directories with the name

00:29:30,720 --> 00:29:37,919
test in them rather than hack the code

00:29:34,880 --> 00:29:39,520
to to learn how to regex out all the

00:29:37,919 --> 00:29:40,000
directories we didn't want that have to

00:29:39,520 --> 00:29:42,000
maintain

00:29:40,000 --> 00:29:44,159
that i just found a list because all of

00:29:42,000 --> 00:29:46,960
these were directories it turned out

00:29:44,159 --> 00:29:47,760
so what i could do is start with a list

00:29:46,960 --> 00:29:50,399
of no test

00:29:47,760 --> 00:29:51,520
directories and just shove them into the

00:29:50,399 --> 00:29:55,120
prune list

00:29:51,520 --> 00:29:56,799
we enter it we prune it we keep going

00:29:55,120 --> 00:29:58,799
at that point i just don't generate

00:29:56,799 --> 00:30:01,679
tests for things i don't want to test

00:29:58,799 --> 00:30:04,880
might sound obvious but it took a little

00:30:01,679 --> 00:30:04,880
thinking to get that part right

00:30:05,120 --> 00:30:10,799
so now the result is we're testing 45

00:30:08,640 --> 00:30:12,640
000 of these things every night

00:30:10,799 --> 00:30:14,799
we managed to find that i started with a

00:30:12,640 --> 00:30:15,919
virgin copy of the new version of pearl

00:30:14,799 --> 00:30:18,399
they wanted

00:30:15,919 --> 00:30:20,840
that had to be recompiled about 18 times

00:30:18,399 --> 00:30:24,159
to work with the mod pearl

00:30:20,840 --> 00:30:26,240
and an apache that they had

00:30:24,159 --> 00:30:28,240
with the the distro of linux that they

00:30:26,240 --> 00:30:29,919
used for their virtual machines

00:30:28,240 --> 00:30:33,360
so they had to sit there tweaking pearl

00:30:29,919 --> 00:30:36,399
14 times once we got that much to work

00:30:33,360 --> 00:30:38,159
we just ran this once it gave us all the

00:30:36,399 --> 00:30:40,799
things that need to be

00:30:38,159 --> 00:30:41,679
all the modules that need to be added

00:30:40,799 --> 00:30:44,320
cpanem

00:30:41,679 --> 00:30:46,640
happily added them found for us we found

00:30:44,320 --> 00:30:48,320
places where they had missed you know

00:30:46,640 --> 00:30:50,640
somebody had gone through it but they

00:30:48,320 --> 00:30:52,640
missed a uh a curly brace in

00:30:50,640 --> 00:30:55,039
regex or there was other bad pieces of

00:30:52,640 --> 00:30:56,399
syntax by actually capturing the

00:30:55,039 --> 00:30:59,760
diagnostics

00:30:56,399 --> 00:31:03,200
and i showed that in the talk on monday

00:30:59,760 --> 00:31:05,279
that's on slideshare by the way you can

00:31:03,200 --> 00:31:07,760
you can actually capture the diagnostic

00:31:05,279 --> 00:31:10,720
output from pearl minus wc

00:31:07,760 --> 00:31:12,399
given nothing more than the path and by

00:31:10,720 --> 00:31:14,240
checking the diagnostics you can find

00:31:12,399 --> 00:31:17,200
all the places people have made minor

00:31:14,240 --> 00:31:20,159
mistakes that cause runtime errors

00:31:17,200 --> 00:31:21,840
by but don't actually break the syntax

00:31:20,159 --> 00:31:23,919
and this was all just with require okay

00:31:21,840 --> 00:31:26,080
and some pipes

00:31:23,919 --> 00:31:27,600
so the summary is unit tests are very

00:31:26,080 --> 00:31:31,120
useful

00:31:27,600 --> 00:31:31,679
you can get you because the unit tests

00:31:31,120 --> 00:31:35,440
can be

00:31:31,679 --> 00:31:37,600
fully automated they become reproducible

00:31:35,440 --> 00:31:39,039
you can do this every night and get

00:31:37,600 --> 00:31:42,080
consistent results

00:31:39,039 --> 00:31:44,640
out of it it also leaves us

00:31:42,080 --> 00:31:46,559
we have a way to escape from you know

00:31:44,640 --> 00:31:50,480
user bin perl

00:31:46,559 --> 00:31:51,120
take opt-in perl set you know user bin

00:31:50,480 --> 00:31:53,840
eng

00:31:51,120 --> 00:31:55,600
perl run all the tests i can now tell

00:31:53,840 --> 00:31:57,440
you what works and what doesn't

00:31:55,600 --> 00:31:58,799
i can't tell you if it's functionally

00:31:57,440 --> 00:32:00,720
sane but

00:31:58,799 --> 00:32:01,840
most of the time if you take pearl from

00:32:00,720 --> 00:32:05,440
one generation

00:32:01,840 --> 00:32:07,440
and you fix the gotches and the syntax

00:32:05,440 --> 00:32:10,559
the logic of pearl itself hashes and

00:32:07,440 --> 00:32:12,399
arrays hasn't changed in a long time

00:32:10,559 --> 00:32:15,679
so now we really can know and fix

00:32:12,399 --> 00:32:17,840
whatever it is

00:32:15,679 --> 00:32:19,279
um i think there's another slide here oh

00:32:17,840 --> 00:32:24,240
there we go

00:32:19,279 --> 00:32:26,480
again this works on pro 5. pearl 7

00:32:24,240 --> 00:32:28,159
the unit tests for it aren't going to be

00:32:26,480 --> 00:32:29,840
a hell of a lot different than what

00:32:28,159 --> 00:32:32,399
you've seen here there's

00:32:29,840 --> 00:32:34,480
require isn't going to go away and at

00:32:32,399 --> 00:32:35,679
that point we can validate the syntax in

00:32:34,480 --> 00:32:39,200
pearl seven

00:32:35,679 --> 00:32:43,840
day one it'll all be broken

00:32:39,200 --> 00:32:43,840
pg but now at least you know what to fix

00:32:44,080 --> 00:32:49,120
um it might be f you know you could unit

00:32:47,519 --> 00:32:50,720
test all the c pen if you really wanted

00:32:49,120 --> 00:32:52,960
to pro five you know like the the

00:32:50,720 --> 00:32:57,519
reporter people

00:32:52,960 --> 00:33:00,799
but the the real trick is

00:32:57,519 --> 00:33:02,720
laziness here is even more of a virtue

00:33:00,799 --> 00:33:04,880
now if you look at the same basic thing

00:33:02,720 --> 00:33:07,919
if you've got database issues

00:33:04,880 --> 00:33:11,760
i can encode a

00:33:07,919 --> 00:33:14,320
a config file name and a table name

00:33:11,760 --> 00:33:16,320
into a base and i can have something

00:33:14,320 --> 00:33:19,519
that wakes up in the morning

00:33:16,320 --> 00:33:21,039
parses out a configuration file that

00:33:19,519 --> 00:33:22,559
tells me how to connect to a particular

00:33:21,039 --> 00:33:25,279
database or

00:33:22,559 --> 00:33:26,480
the name of a database to connect to and

00:33:25,279 --> 00:33:27,840
a table name

00:33:26,480 --> 00:33:29,840
and i'm going to go to that table and

00:33:27,840 --> 00:33:31,919
make sure that it it fits all the

00:33:29,840 --> 00:33:34,640
definitions that i need that it's there

00:33:31,919 --> 00:33:36,720
that it's populated whatever uh you can

00:33:34,640 --> 00:33:40,399
use the same technique with tests

00:33:36,720 --> 00:33:42,240
to load a million static records into a

00:33:40,399 --> 00:33:43,120
database that have got some information

00:33:42,240 --> 00:33:44,880
in them

00:33:43,120 --> 00:33:46,720
by running tests that load it and

00:33:44,880 --> 00:33:48,399
validate the input

00:33:46,720 --> 00:33:51,200
you'd be surprised how much you can

00:33:48,399 --> 00:33:53,440
encode into a simple list

00:33:51,200 --> 00:33:54,880
in the base name of a file and then just

00:33:53,440 --> 00:33:57,200
parse the list when you wake up in the

00:33:54,880 --> 00:33:57,200
morning

00:33:57,519 --> 00:34:01,760
and there's one thing if anyone finds

00:34:00,240 --> 00:34:04,840
any of this interesting

00:34:01,760 --> 00:34:06,960
uh was anyone here for the thing i did

00:34:04,840 --> 00:34:10,480
monday

00:34:06,960 --> 00:34:13,919
yes yep okay well i corrected all

00:34:10,480 --> 00:34:14,159
i corrected i think uh the gotchas that

00:34:13,919 --> 00:34:18,839
i

00:34:14,159 --> 00:34:22,159
found and stuff that on

00:34:18,839 --> 00:34:23,839
slideshare if you go to slideshare.net

00:34:22,159 --> 00:34:26,720
lembark that's the first one this will

00:34:23,839 --> 00:34:28,879
be right in front of it a few minutes

00:34:26,720 --> 00:34:30,879
so if anyone wants to see those there

00:34:28,879 --> 00:34:34,399
were tests for

00:34:30,879 --> 00:34:35,679
validate all your exports and again it's

00:34:34,399 --> 00:34:37,200
it's a unit test it

00:34:35,679 --> 00:34:39,200
find me the name of something look in

00:34:37,200 --> 00:34:41,919
the package find exports

00:34:39,200 --> 00:34:42,800
use a symbol and qualify to ref grab the

00:34:41,919 --> 00:34:44,159
contents

00:34:42,800 --> 00:34:46,839
and convince yourself that all the

00:34:44,159 --> 00:34:48,720
things in exports are defined on both

00:34:46,839 --> 00:34:51,440
sides

00:34:48,720 --> 00:34:52,560
i've also stuck the basic things i went

00:34:51,440 --> 00:34:56,560
over monday

00:34:52,560 --> 00:35:00,560
on git lab if anyone would want to try

00:34:56,560 --> 00:35:02,400
it there's no reason we shouldn't have

00:35:00,560 --> 00:35:04,560
some kind of a thing that people could

00:35:02,400 --> 00:35:06,800
snag that would just run

00:35:04,560 --> 00:35:07,599
with some minimal configuration maybe

00:35:06,800 --> 00:35:09,040
about which

00:35:07,599 --> 00:35:11,119
which subdirectories do you want to

00:35:09,040 --> 00:35:12,880
check things in scripts

00:35:11,119 --> 00:35:14,240
do you want to check things in utils do

00:35:12,880 --> 00:35:15,599
you want to skip things in test

00:35:14,240 --> 00:35:18,079
directories

00:35:15,599 --> 00:35:19,200
it's not that hard to take this basic

00:35:18,079 --> 00:35:20,560
framework

00:35:19,200 --> 00:35:22,480
and generalize it for everyone

00:35:20,560 --> 00:35:24,079
everywhere

00:35:22,480 --> 00:35:26,560
and i think it might be nice to have

00:35:24,079 --> 00:35:27,920
that before pearl 7 comes out

00:35:26,560 --> 00:35:30,400
because then you could check all your

00:35:27,920 --> 00:35:34,000
stuff for pearl 7.

00:35:30,400 --> 00:35:37,040
without having to write any tests this

00:35:34,000 --> 00:35:40,240
the pearl makes this so damn easy

00:35:37,040 --> 00:35:42,240
because you pearl can investigate itself

00:35:40,240 --> 00:35:43,760
and with things like require okay use

00:35:42,240 --> 00:35:46,640
okay and symbol

00:35:43,760 --> 00:35:48,000
you can poke around inside a module how

00:35:46,640 --> 00:35:51,359
many people here have read the

00:35:48,000 --> 00:35:51,359
pearl testers notebook

00:35:54,000 --> 00:36:01,040
anybody long enough long enough ago that

00:35:57,680 --> 00:36:04,480
i've probably forgotten it all

00:36:01,040 --> 00:36:07,839
right man aside from the stupid-ass

00:36:04,480 --> 00:36:10,560
fake coffee stains on the pages

00:36:07,839 --> 00:36:12,640
it's it is one of the most brilliant

00:36:10,560 --> 00:36:13,839
books i've ever seen because it starts

00:36:12,640 --> 00:36:16,000
out showing you

00:36:13,839 --> 00:36:17,520
here is a trivial thing that you can

00:36:16,000 --> 00:36:20,000
understand

00:36:17,520 --> 00:36:21,119
and then it extends it one little tiny

00:36:20,000 --> 00:36:22,800
piece at a time

00:36:21,119 --> 00:36:24,400
it's not like damien conway it gives you

00:36:22,800 --> 00:36:26,079
this example from

00:36:24,400 --> 00:36:27,359
hell that you can't understand and then

00:36:26,079 --> 00:36:28,560
shows you where all the pieces fit

00:36:27,359 --> 00:36:30,560
together

00:36:28,560 --> 00:36:32,160
it starts from things that are so damn

00:36:30,560 --> 00:36:35,119
simple you can get them

00:36:32,160 --> 00:36:37,200
and extends it one tiny piece at a time

00:36:35,119 --> 00:36:38,160
one of the great things that that shows

00:36:37,200 --> 00:36:41,440
you

00:36:38,160 --> 00:36:42,160
is you can override universal if you

00:36:41,440 --> 00:36:46,000
want to check

00:36:42,160 --> 00:36:47,839
that things handle file open correctly

00:36:46,000 --> 00:36:50,320
and that you correctly detect whether

00:36:47,839 --> 00:36:53,440
they handle files that fail to open

00:36:50,320 --> 00:36:56,960
i can write a unit test that sets

00:36:53,440 --> 00:37:02,160
local universal colon colon

00:36:56,960 --> 00:37:02,160
open to sub die

00:37:03,200 --> 00:37:06,960
great i can now unit test everything if

00:37:05,839 --> 00:37:09,760
you want to validate

00:37:06,960 --> 00:37:10,800
whether all your things correctly detect

00:37:09,760 --> 00:37:13,359
and gracefully

00:37:10,800 --> 00:37:14,079
exit when they can't read their config

00:37:13,359 --> 00:37:18,320
files

00:37:14,079 --> 00:37:20,560
i can do that because i can preload you

00:37:18,320 --> 00:37:22,560
i can preload universal with something

00:37:20,560 --> 00:37:25,200
that for the duration of one

00:37:22,560 --> 00:37:25,920
block it will all fail on every open

00:37:25,200 --> 00:37:29,359
that it makes

00:37:25,920 --> 00:37:29,359
in a known way

00:37:29,920 --> 00:37:33,760
at that point you can unit test

00:37:31,760 --> 00:37:35,680
everything you own for whether it

00:37:33,760 --> 00:37:37,520
correctly detects that it didn't open

00:37:35,680 --> 00:37:40,320
its configuration file

00:37:37,520 --> 00:37:41,200
in maybe a 12 line test and that

00:37:40,320 --> 00:37:43,040
includes

00:37:41,200 --> 00:37:45,520
that includes the berkeley braces that i

00:37:43,040 --> 00:37:47,520
use you can even throw in a comment or

00:37:45,520 --> 00:37:49,760
two for the fun of it

00:37:47,520 --> 00:37:51,280
testing this kind of stuff in perl is

00:37:49,760 --> 00:37:54,320
trivial

00:37:51,280 --> 00:37:56,240
if you look at these unit tests if you

00:37:54,320 --> 00:37:59,200
throw in line into it

00:37:56,240 --> 00:38:01,520
i could just i could check every piece

00:37:59,200 --> 00:38:04,320
of java that we have in-house

00:38:01,520 --> 00:38:05,760
by doing sim linking something to a test

00:38:04,320 --> 00:38:10,480
that starts out with use

00:38:05,760 --> 00:38:14,000
inline perl i use inline java excuse me

00:38:10,480 --> 00:38:14,400
and you can inline java 45 000 jars and

00:38:14,000 --> 00:38:17,839
ask

00:38:14,400 --> 00:38:20,880
do they load correctly and you can get

00:38:17,839 --> 00:38:24,079
proof output for each of them

00:38:20,880 --> 00:38:26,640
so using inline if you've got a

00:38:24,079 --> 00:38:28,400
if you've got a code base that involves

00:38:26,640 --> 00:38:30,480
multiple languages

00:38:28,400 --> 00:38:33,440
where you're dealing with a website that

00:38:30,480 --> 00:38:36,960
involves java perl

00:38:33,440 --> 00:38:41,040
ruby javascript you can test

00:38:36,960 --> 00:38:43,760
all of them with proof and unit tests

00:38:41,040 --> 00:38:47,839
that do nothing more complicated than

00:38:43,760 --> 00:38:47,839
what we've seen here with inline

00:38:48,480 --> 00:38:51,920
so that's another way to use this

00:38:52,400 --> 00:38:58,160
anyway that's it did that seem useful to

00:38:56,000 --> 00:39:01,599
anybody

00:38:58,160 --> 00:39:05,040
very useful yep thank you

00:39:01,599 --> 00:39:05,839
steve i got two questions sure first one

00:39:05,040 --> 00:39:07,760
is

00:39:05,839 --> 00:39:09,520
all of this you're doing is obviously

00:39:07,760 --> 00:39:11,280
not on the production system it's on a

00:39:09,520 --> 00:39:14,079
copy of everything

00:39:11,280 --> 00:39:15,680
yeah you might have some which explains

00:39:14,079 --> 00:39:16,160
why you might have some cpan stuff

00:39:15,680 --> 00:39:19,040
missing

00:39:16,160 --> 00:39:20,800
right no it's let's just say we're

00:39:19,040 --> 00:39:24,400
upgrading pearl

00:39:20,800 --> 00:39:26,320
got it using user bin pearl for umpteen

00:39:24,400 --> 00:39:27,680
years installing everything with yum

00:39:26,320 --> 00:39:30,960
instead of going to cpan

00:39:27,680 --> 00:39:35,359
right so we just filed a virgin copy

00:39:30,960 --> 00:39:37,920
of 5.26 that they're about to upgrade to

00:39:35,359 --> 00:39:39,280
next step well what modules do you use

00:39:37,920 --> 00:39:42,160
um

00:39:39,280 --> 00:39:42,960
i don't know can't you tell by looking

00:39:42,160 --> 00:39:45,599
got it

00:39:42,960 --> 00:39:46,400
okay how do you know what modules you

00:39:45,599 --> 00:39:49,599
use

00:39:46,400 --> 00:39:51,839
install a virgin copy of pearl and look

00:39:49,599 --> 00:39:55,440
at the diagnostics for what modules now

00:39:51,839 --> 00:39:57,920
you'll have to run this thing 14 times

00:39:55,440 --> 00:39:58,720
because every one of these requires is

00:39:57,920 --> 00:40:01,040
going to puke

00:39:58,720 --> 00:40:02,160
on the first module it finds that you

00:40:01,040 --> 00:40:06,400
don't have

00:40:02,160 --> 00:40:08,480
right but what happens i run it

00:40:06,400 --> 00:40:09,520
it auto installs all the things that are

00:40:08,480 --> 00:40:13,760
missing

00:40:09,520 --> 00:40:16,560
guess what i do next i run it again

00:40:13,760 --> 00:40:17,920
eventually it doesn't puke on modules it

00:40:16,560 --> 00:40:18,880
picks on something else and we know what

00:40:17,920 --> 00:40:21,440
we've installed

00:40:18,880 --> 00:40:22,480
if i put them all into a site perl

00:40:21,440 --> 00:40:24,880
directory

00:40:22,480 --> 00:40:26,319
now i can tell you what i installed

00:40:24,880 --> 00:40:28,960
perfect

00:40:26,319 --> 00:40:29,760
the other question is on one of the

00:40:28,960 --> 00:40:32,240
screen

00:40:29,760 --> 00:40:33,839
on one of the code where you talk about

00:40:32,240 --> 00:40:36,880
doing the require

00:40:33,839 --> 00:40:38,480
or skipping and then checking is and

00:40:36,880 --> 00:40:41,680
checking universal

00:40:38,480 --> 00:40:44,960
yeah if you have a

00:40:41,680 --> 00:40:47,520
syntax error or

00:40:44,960 --> 00:40:48,400
well if you can't find it well you have

00:40:47,520 --> 00:40:53,839
the same text

00:40:48,400 --> 00:40:53,839
okay yeah i left i left a little bit of

00:40:54,400 --> 00:40:58,560
let me get back here i'll show you i

00:40:56,960 --> 00:40:59,040
left a little bit of boilerplate out of

00:40:58,560 --> 00:41:02,240
these

00:40:59,040 --> 00:41:04,240
because basically i i wrote this in one

00:41:02,240 --> 00:41:05,440
the same way i did the other one i i

00:41:04,240 --> 00:41:08,240
started giving it

00:41:05,440 --> 00:41:08,800
there you go and i i i just started

00:41:08,240 --> 00:41:11,760
hacking

00:41:08,800 --> 00:41:12,800
i hacked this code in libra office okay

00:41:11,760 --> 00:41:15,440
it has never seen

00:41:12,800 --> 00:41:17,119
a copy of a running pearl so i guarantee

00:41:15,440 --> 00:41:18,400
you a certain amount of it screwed up

00:41:17,119 --> 00:41:20,400
because i was going to ask how do you

00:41:18,400 --> 00:41:22,400
get past the require if it doesn't load

00:41:20,400 --> 00:41:24,400
to get down to the rest of the cup

00:41:22,400 --> 00:41:25,599
well what do you what's the second line

00:41:24,400 --> 00:41:28,640
of the test

00:41:25,599 --> 00:41:30,319
require okay or skip give up on path

00:41:28,640 --> 00:41:34,960
if i can't require it there's no use

00:41:30,319 --> 00:41:37,839
checking the rest of it

00:41:34,960 --> 00:41:39,599
but then if you require it and it's if

00:41:37,839 --> 00:41:43,520
you're quiet is okay

00:41:39,599 --> 00:41:46,880
how can it be personal well

00:41:43,520 --> 00:41:48,480
if i require require is taking a path

00:41:46,880 --> 00:41:52,079
off the disk drive right

00:41:48,480 --> 00:41:55,960
right i was just dealing with a client

00:41:52,079 --> 00:41:59,200
and they had been using

00:41:55,960 --> 00:42:02,160
405.8 and a lot of their code was

00:41:59,200 --> 00:42:03,920
written without use strict

00:42:02,160 --> 00:42:07,200
and a lot of their modules didn't even

00:42:03,920 --> 00:42:10,000
have package declarations in them

00:42:07,200 --> 00:42:11,920
because they used export on everything

00:42:10,000 --> 00:42:12,560
and they shoved it up into the caller's

00:42:11,920 --> 00:42:16,319
space

00:42:12,560 --> 00:42:18,000
and nobody cared nobody noted okay

00:42:16,319 --> 00:42:19,760
that explains how you could require

00:42:18,000 --> 00:42:23,520
something and still not be universal

00:42:19,760 --> 00:42:27,680
no wait a minute if i do a require okay

00:42:23,520 --> 00:42:30,960
of acme of widgets

00:42:27,680 --> 00:42:32,800
colon colon config right yeah

00:42:30,960 --> 00:42:34,800
all that's going to tell me is there is

00:42:32,800 --> 00:42:38,400
a path on the disk drive

00:42:34,800 --> 00:42:41,680
right in at inc that resolves to

00:42:38,400 --> 00:42:43,839
mumble mumbles.pm

00:42:41,680 --> 00:42:45,599
and that if i load it into memory the

00:42:43,839 --> 00:42:48,240
compiler doesn't puke

00:42:45,599 --> 00:42:48,880
right and it exits with a true value

00:42:48,240 --> 00:42:50,480
right

00:42:48,880 --> 00:42:52,800
right but it doesn't tell you there's

00:42:50,480 --> 00:42:52,800
nothing

00:42:54,079 --> 00:42:58,240
there doesn't that doesn't tell me that

00:42:55,920 --> 00:42:59,280
there is a package declaration right in

00:42:58,240 --> 00:43:01,280
the file

00:42:59,280 --> 00:43:03,440
and it does not tell me that someone

00:43:01,280 --> 00:43:06,480
didn't fat finger the friggin

00:43:03,440 --> 00:43:09,280
package declaration or not no pearl

00:43:06,480 --> 00:43:09,839
and paste it from something or paste the

00:43:09,280 --> 00:43:13,200
wrong

00:43:09,839 --> 00:43:15,599
package because some guy copied

00:43:13,200 --> 00:43:19,359
widget config into acme config and

00:43:15,599 --> 00:43:21,280
didn't realize the package name mattered

00:43:19,359 --> 00:43:22,400
i didn't get any of what you were

00:43:21,280 --> 00:43:25,040
talking about fat

00:43:22,400 --> 00:43:26,160
finger package name because you're fat

00:43:25,040 --> 00:43:29,440
fingering a package

00:43:26,160 --> 00:43:31,599
name inside the freaking package yeah

00:43:29,440 --> 00:43:35,280
right there look at that

00:43:31,599 --> 00:43:37,440
widget is spelled w-i-d-g-i-t

00:43:35,280 --> 00:43:39,119
and because they're exporting everything

00:43:37,440 --> 00:43:42,560
and not really using packages

00:43:39,119 --> 00:43:44,960
no one's going to notice right got it

00:43:42,560 --> 00:43:45,920
thank you there are all kinds of stupid

00:43:44,960 --> 00:43:48,160
ways

00:43:45,920 --> 00:43:49,119
that people bypass you know if you're

00:43:48,160 --> 00:43:52,319
using straight up

00:43:49,119 --> 00:43:53,359
oo code yeah you would find this out

00:43:52,319 --> 00:43:55,760
because you'd cry

00:43:53,359 --> 00:43:57,040
try and call mumble points to new and

00:43:55,760 --> 00:43:59,440
you'd puke there because

00:43:57,040 --> 00:44:00,240
there wasn't anything out there right

00:43:59,440 --> 00:44:02,400
but republican

00:44:00,240 --> 00:44:03,440
player won't tell you that you fat

00:44:02,400 --> 00:44:08,960
fingered this

00:44:03,440 --> 00:44:12,880
no unless you're trying to do a use yeah

00:44:08,960 --> 00:44:15,760
no because use okay dispatches

00:44:12,880 --> 00:44:17,680
oh you can get more work using a symbol

00:44:15,760 --> 00:44:19,760
it kind of bypasses a few things there

00:44:17,680 --> 00:44:22,240
yeah yeah so you can get away with use

00:44:19,760 --> 00:44:24,400
okay and it'll work but again

00:44:22,240 --> 00:44:26,400
your the package you're looking for may

00:44:24,400 --> 00:44:28,480
not be defined in that module

00:44:26,400 --> 00:44:30,640
there it's there are ways to screw that

00:44:28,480 --> 00:44:30,640
up

00:44:32,079 --> 00:44:36,480
so if i don't if i don't make my own fat

00:44:35,040 --> 00:44:40,000
fingers and that were is a

00:44:36,480 --> 00:44:41,599
okay package universal

00:44:40,000 --> 00:44:44,160
and if i check that the package

00:44:41,599 --> 00:44:46,880
conversion

00:44:44,160 --> 00:44:47,359
then i know that at least that package

00:44:46,880 --> 00:44:51,119
was

00:44:47,359 --> 00:44:52,560
installed into memory that their symbol

00:44:51,119 --> 00:44:55,760
table has

00:44:52,560 --> 00:44:57,920
that package in it i guess i've just

00:44:55,760 --> 00:45:01,520
never encountered this

00:44:57,920 --> 00:45:03,920
poorly constructed code lucky me well

00:45:01,520 --> 00:45:04,960
this is what happens well no you think

00:45:03,920 --> 00:45:07,760
about it

00:45:04,960 --> 00:45:09,040
these unit tests and this is something i

00:45:07,760 --> 00:45:11,200
showed on monday

00:45:09,040 --> 00:45:12,560
you can stick these unit tests up

00:45:11,200 --> 00:45:14,640
jenkins

00:45:12,560 --> 00:45:16,720
and have pete every time you try and

00:45:14,640 --> 00:45:18,240
merge to master it or run these

00:45:16,720 --> 00:45:21,119
and that's how you catch the obvious

00:45:18,240 --> 00:45:24,800
mistakes that people made

00:45:21,119 --> 00:45:27,359
you know just just encoding stuff okay

00:45:24,800 --> 00:45:28,319
um there's production you would be

00:45:27,359 --> 00:45:31,280
surprised

00:45:28,319 --> 00:45:33,440
how screwed up some production code is

00:45:31,280 --> 00:45:37,119
uh one customer i was at

00:45:33,440 --> 00:45:39,920
not long ago they were in

00:45:37,119 --> 00:45:40,480
2000 and something were using two

00:45:39,920 --> 00:45:43,520
argument

00:45:40,480 --> 00:45:44,800
opens with bare file handles and they

00:45:43,520 --> 00:45:47,520
reused the same

00:45:44,800 --> 00:45:49,119
file handle name throughout the entire

00:45:47,520 --> 00:45:53,040
perl module

00:45:49,119 --> 00:45:53,040
they called it file in uppercase

00:45:53,359 --> 00:45:57,359
and each each of the reopens just closed

00:45:56,000 --> 00:45:59,359
and reopened something

00:45:57,359 --> 00:46:01,280
but you got some really exciting order

00:45:59,359 --> 00:46:02,400
of execution errors out of it because

00:46:01,280 --> 00:46:03,839
depending on

00:46:02,400 --> 00:46:07,839
what order you've gone through the

00:46:03,839 --> 00:46:12,319
subroutines you had no flipping idea

00:46:07,839 --> 00:46:13,760
what particular file you were reading

00:46:12,319 --> 00:46:15,520
because they hadn't scoped any of it it

00:46:13,760 --> 00:46:16,640
was all bare file handles that are

00:46:15,520 --> 00:46:18,560
global

00:46:16,640 --> 00:46:20,560
so one of the things we did is we just

00:46:18,560 --> 00:46:21,119
slapped a dollar sign in front of all of

00:46:20,560 --> 00:46:22,960
them

00:46:21,119 --> 00:46:24,960
then we ran the unit tests and we got

00:46:22,960 --> 00:46:27,040
all kinds of nasty grams

00:46:24,960 --> 00:46:28,800
about you know pre you know redeclaring

00:46:27,040 --> 00:46:29,680
a preeta a variable that was already

00:46:28,800 --> 00:46:32,720
declined

00:46:29,680 --> 00:46:35,440
declared in line 39 and we had to go

00:46:32,720 --> 00:46:36,960
through and then we started scoping them

00:46:35,440 --> 00:46:39,119
and we kept doing that until the

00:46:36,960 --> 00:46:41,520
diagnostics went away

00:46:39,119 --> 00:46:43,599
and then we cleaned up the code but that

00:46:41,520 --> 00:46:46,480
meant running these unit tests

00:46:43,599 --> 00:46:48,800
um teen times until the diagnostics went

00:46:46,480 --> 00:46:48,800
away

00:46:50,960 --> 00:46:54,839
there was one place i was at where

00:46:52,720 --> 00:46:58,319
people said

00:46:54,839 --> 00:47:02,160
um the actual logic statement was

00:46:58,319 --> 00:47:06,640
print no it was return space return

00:47:02,160 --> 00:47:06,640
dollar x or print something something

00:47:08,319 --> 00:47:14,480
so what they were they thought they

00:47:11,359 --> 00:47:16,400
were returning dollar x or outputting

00:47:14,480 --> 00:47:17,760
something

00:47:16,400 --> 00:47:19,839
and it turns out what they were really

00:47:17,760 --> 00:47:22,960
doing is returning dollar x

00:47:19,839 --> 00:47:24,000
and if return returned false then they

00:47:22,960 --> 00:47:25,920
were going to print something but of

00:47:24,000 --> 00:47:28,800
course they never printed anything

00:47:25,920 --> 00:47:31,200
because the return doesn't return it

00:47:28,800 --> 00:47:33,280
goes back to the caller

00:47:31,200 --> 00:47:34,400
and you find that through a diagnostic

00:47:33,280 --> 00:47:37,599
where it says

00:47:34,400 --> 00:47:39,520
there's unreachable code here

00:47:37,599 --> 00:47:41,280
so you can find people that have botched

00:47:39,520 --> 00:47:43,280
their logic by looking at these

00:47:41,280 --> 00:47:44,880
diagnostics that's the stuff i went over

00:47:43,280 --> 00:47:48,000
monday you can do a

00:47:44,880 --> 00:47:51,200
a pro minus wc if you save

00:47:48,000 --> 00:47:53,920
standard error if that text

00:47:51,200 --> 00:47:54,960
isn't dash syntax okay with a new line

00:47:53,920 --> 00:47:57,440
on it

00:47:54,960 --> 00:47:59,440
you do a diag of it and it makes it

00:47:57,440 --> 00:48:02,559
really easy to find all the files that

00:47:59,440 --> 00:48:02,559
have got botched logic

00:48:04,079 --> 00:48:08,800
so you can you can do a lot with these

00:48:07,839 --> 00:48:11,680
and again it's all

00:48:08,800 --> 00:48:13,599
automated which makes it very good for

00:48:11,680 --> 00:48:15,359
things like you know pre-check-in hooks

00:48:13,599 --> 00:48:18,160
and git

00:48:15,359 --> 00:48:19,920
even if you could even if you commit the

00:48:18,160 --> 00:48:23,440
stuff you might say fine i'll put it in

00:48:19,920 --> 00:48:26,559
but i'm not going to tag it as clean

00:48:23,440 --> 00:48:29,680
if you have this available and it takes

00:48:26,559 --> 00:48:32,880
only a few seconds to run

00:48:29,680 --> 00:48:36,240
which for my current client

00:48:32,880 --> 00:48:39,200
with 2 000 files

00:48:36,240 --> 00:48:41,280
and all of the tests on it we run

00:48:39,200 --> 00:48:44,800
something like 3 000 tests

00:48:41,280 --> 00:48:48,880
um 3 000 test iterations

00:48:44,800 --> 00:48:52,079
in 936 test files

00:48:48,880 --> 00:48:55,119
it takes less than 60 seconds

00:48:52,079 --> 00:48:57,280
so there's just a devops run tests

00:48:55,119 --> 00:48:58,880
and we tell people you know do us a

00:48:57,280 --> 00:49:01,040
favor before you think you want to merge

00:48:58,880 --> 00:49:02,880
something to master run that

00:49:01,040 --> 00:49:06,160
and if it doesn't show up completely

00:49:02,880 --> 00:49:09,599
clean fix it

00:49:06,160 --> 00:49:12,319
not hard to do but that's what these are

00:49:09,599 --> 00:49:14,800
useful they're not a replacement

00:49:12,319 --> 00:49:15,680
for more in-depth testing that actually

00:49:14,800 --> 00:49:16,880
looks

00:49:15,680 --> 00:49:18,960
at what you're getting back from

00:49:16,880 --> 00:49:22,559
subroutine calls

00:49:18,960 --> 00:49:25,680
but if you cannot pass require okay

00:49:22,559 --> 00:49:28,240
and if you if your package isn't defined

00:49:25,680 --> 00:49:30,319
inside of the thing you just required

00:49:28,240 --> 00:49:32,880
the rest of your testing is a waste of

00:49:30,319 --> 00:49:32,880
time

00:49:33,200 --> 00:49:40,160
you can bail out on a lot of these

00:49:36,720 --> 00:49:41,520
you know it just if any of these fails

00:49:40,160 --> 00:49:43,440
if you thought you were going to merge

00:49:41,520 --> 00:49:44,240
something into the main integration

00:49:43,440 --> 00:49:46,160
branch

00:49:44,240 --> 00:49:49,359
any of these tests that fails is a

00:49:46,160 --> 00:49:49,359
reason to not merge it

00:49:51,119 --> 00:49:54,800
stephen you got 10 till here you might

00:49:53,280 --> 00:49:55,680
want to check if there are any final

00:49:54,800 --> 00:49:59,839
questions

00:49:55,680 --> 00:49:59,839
or are there any final questions

00:50:02,640 --> 00:50:06,720
would anyone be willing to work on

00:50:04,240 --> 00:50:08,640
making this a

00:50:06,720 --> 00:50:12,880
something that was a package on cpan

00:50:08,640 --> 00:50:15,680
that they could grab

00:50:12,880 --> 00:50:16,720
um by the way i have a sort of a trivial

00:50:15,680 --> 00:50:19,920
question

00:50:16,720 --> 00:50:21,920
um yeah go ahead um

00:50:19,920 --> 00:50:23,599
did you since everything here is in

00:50:21,920 --> 00:50:26,720
pearl did you think of doing the shell

00:50:23,599 --> 00:50:28,480
scripts in pearl also i could replace

00:50:26,720 --> 00:50:30,559
yeah there's some of the stuff

00:50:28,480 --> 00:50:31,839
i could do in a lot of it i could do in

00:50:30,559 --> 00:50:35,760
pearl

00:50:31,839 --> 00:50:38,960
but the pearl the for like even for

00:50:35,760 --> 00:50:41,599
you know the pipes like this stuff

00:50:38,960 --> 00:50:42,800
yeah that is perfectly doable in pearl

00:50:41,599 --> 00:50:46,480
but it doesn't fit

00:50:42,800 --> 00:50:48,800
on one screen an advantage of doing that

00:50:46,480 --> 00:50:50,960
besides the purity of being of

00:50:48,800 --> 00:50:52,240
doing everything in pearl is that in

00:50:50,960 --> 00:50:52,880
case you want to run something on

00:50:52,240 --> 00:50:55,440
windows

00:50:52,880 --> 00:50:56,480
which may not have a uh a decent shell

00:50:55,440 --> 00:51:00,079
available

00:50:56,480 --> 00:51:03,119
um so uh it is improved

00:51:00,079 --> 00:51:06,240
don't get me started on windows but yes

00:51:03,119 --> 00:51:08,240
in most cases i would i would have

00:51:06,240 --> 00:51:10,400
written this in perl

00:51:08,240 --> 00:51:12,880
but i can show people this stuff a lot

00:51:10,400 --> 00:51:15,119
more easily in the shell

00:51:12,880 --> 00:51:17,760
and most of the people with really large

00:51:15,119 --> 00:51:20,319
code bases are running on unix

00:51:17,760 --> 00:51:24,000
okay my current client is running on aix

00:51:20,319 --> 00:51:24,000
and l cars on ibm 380s

00:51:24,640 --> 00:51:30,880
if anyone knows what happens so yeah you

00:51:27,839 --> 00:51:34,160
this is perfectly do well part of it is

00:51:30,880 --> 00:51:36,400
if you're going to go that far

00:51:34,160 --> 00:51:39,280
your choice then is whether to take

00:51:36,400 --> 00:51:41,520
proof which is written in perl

00:51:39,280 --> 00:51:44,319
and you can go into the modules that it

00:51:41,520 --> 00:51:45,520
uses to execute the tap harness part of

00:51:44,319 --> 00:51:48,640
life

00:51:45,520 --> 00:51:49,680
and you would replace proof with

00:51:48,640 --> 00:51:52,400
something

00:51:49,680 --> 00:51:54,960
that's the run the unit test and get all

00:51:52,400 --> 00:51:58,000
the modules that i haven't gotten yet

00:51:54,960 --> 00:52:02,559
executable and you can write that

00:51:58,000 --> 00:52:05,839
and call it you know auto update modules

00:52:02,559 --> 00:52:05,839
and run that

00:52:06,160 --> 00:52:11,119
um but part of the issue with doing this

00:52:10,079 --> 00:52:14,160
in pure pearl

00:52:11,119 --> 00:52:17,839
is that the proof

00:52:14,160 --> 00:52:19,599
ends up calling cpan-m

00:52:17,839 --> 00:52:21,040
there you've you've got the issue of how

00:52:19,599 --> 00:52:22,400
do you want to pass the arguments

00:52:21,040 --> 00:52:24,960
between them

00:52:22,400 --> 00:52:25,920
i can take the prove output i can read

00:52:24,960 --> 00:52:27,760
the lines

00:52:25,920 --> 00:52:29,680
you know grepping and cutting and

00:52:27,760 --> 00:52:32,960
sorting and uniquing

00:52:29,680 --> 00:52:34,720
are pretty trivial the

00:52:32,960 --> 00:52:36,559
the next step of passing things down to

00:52:34,720 --> 00:52:39,680
c pan m you've got

00:52:36,559 --> 00:52:42,079
you can open a a file handle

00:52:39,680 --> 00:52:43,520
to a pipe but then you've got to keep

00:52:42,079 --> 00:52:45,440
checking

00:52:43,520 --> 00:52:46,880
the dollar question after each one of

00:52:45,440 --> 00:52:48,800
them and do you want to do them one at a

00:52:46,880 --> 00:52:49,920
time do you want to do an rx with all of

00:52:48,800 --> 00:52:51,760
it

00:52:49,920 --> 00:52:55,359
it's doable but again it's a lot more

00:52:51,760 --> 00:52:55,359
lines of pearl than it is of shell

00:52:57,520 --> 00:53:01,760
but yeah if you wanted to sit down and

00:52:59,280 --> 00:53:04,960
write one of these that ran

00:53:01,760 --> 00:53:08,079
on every platform known to man uh

00:53:04,960 --> 00:53:11,839
i'd be happy to help well

00:53:08,079 --> 00:53:12,800
it was just a idle curiosity um

00:53:11,839 --> 00:53:14,880
all right thank you it was very

00:53:12,800 --> 00:53:16,640
interesting talk oh thanks so that means

00:53:14,880 --> 00:53:20,160
you're not willing to help write it

00:53:16,640 --> 00:53:21,839
uh i don't think so too bad

00:53:20,160 --> 00:53:23,839
some people actually sounded interesting

00:53:21,839 --> 00:53:24,880
on trying to try to get this stuff onto

00:53:23,839 --> 00:53:26,559
cpan

00:53:24,880 --> 00:53:29,119
if i could get a little bit of help we

00:53:26,559 --> 00:53:30,559
could do that so if this looked useful

00:53:29,119 --> 00:53:33,440
to anybody

00:53:30,559 --> 00:53:35,359
you you could have something like you

00:53:33,440 --> 00:53:36,640
know test two colon colon units or

00:53:35,359 --> 00:53:40,240
whatever

00:53:36,640 --> 00:53:42,640
and just run all of this stuff on your

00:53:40,240 --> 00:53:46,160
code base

00:53:42,640 --> 00:53:49,119
by running cpan m and uh you know

00:53:46,160 --> 00:53:49,119
testify script

00:53:49,280 --> 00:53:56,720
but for installing missing packers

00:53:53,680 --> 00:53:59,760
what i didn't hear for installing

00:53:56,720 --> 00:54:02,480
missing packages why not using sipan

00:53:59,760 --> 00:54:02,480
auto ink

00:54:02,880 --> 00:54:08,960
um probably could

00:54:05,920 --> 00:54:10,920
part of it is that cpan m

00:54:08,960 --> 00:54:12,559
has the convenience that it is

00:54:10,920 --> 00:54:15,920
self-installing

00:54:12,559 --> 00:54:18,319
and so if i start with a virgin copy of

00:54:15,920 --> 00:54:18,960
perl anything i can always install a

00:54:18,319 --> 00:54:22,160
working c

00:54:18,960 --> 00:54:24,640
pan m in one line

00:54:22,160 --> 00:54:25,520
because i can take this i take you you

00:54:24,640 --> 00:54:26,960
curl cpan

00:54:25,520 --> 00:54:29,920
m and pipe it into itself and it

00:54:26,960 --> 00:54:32,480
installs itself because it's fat packed

00:54:29,920 --> 00:54:33,520
the other nice thing about cpan m is

00:54:32,480 --> 00:54:36,319
making it

00:54:33,520 --> 00:54:37,040
use a local repository and making it

00:54:36,319 --> 00:54:40,319
install

00:54:37,040 --> 00:54:41,520
into a local repository is also trivial

00:54:40,319 --> 00:54:44,720
because it's one thing on the command

00:54:41,520 --> 00:54:46,400
line that was the last question we could

00:54:44,720 --> 00:54:49,359
answer in the time frame uh

00:54:46,400 --> 00:54:51,760
i guess you or whichever and and the pdf

00:54:49,359 --> 00:54:54,160
reader just crashed so everyone's happy

00:54:51,760 --> 00:54:54,160
perfect

00:54:55,119 --> 00:54:58,319
it lasted that long

00:54:58,720 --> 00:55:03,440
like i said if the stuff looks

00:55:00,079 --> 00:55:06,799
interesting i stuck it on cpan

00:55:03,440 --> 00:55:09,920
a second on gitlab

00:55:06,799 --> 00:55:12,319
if anyone would be willing to

00:55:09,920 --> 00:55:14,319
put a little work into it i mean i've

00:55:12,319 --> 00:55:15,839
got most of the tests it's documentation

00:55:14,319 --> 00:55:18,079
and deciding

00:55:15,839 --> 00:55:19,520
what way to configure it works and i've

00:55:18,079 --> 00:55:20,880
got no idea how to configure it on

00:55:19,520 --> 00:55:23,200
windows because i don't have access to

00:55:20,880 --> 00:55:23,200
windows

00:55:25,119 --> 00:55:28,559
so i'd be willing to release this that

00:55:26,799 --> 00:55:30,160
it's available for everyone i just

00:55:28,559 --> 00:55:35,839
i need a certain amount of help getting

00:55:30,160 --> 00:55:35,839
it right

00:55:36,079 --> 00:55:41,119

YouTube URL: https://www.youtube.com/watch?v=KHgr44UhFHc


