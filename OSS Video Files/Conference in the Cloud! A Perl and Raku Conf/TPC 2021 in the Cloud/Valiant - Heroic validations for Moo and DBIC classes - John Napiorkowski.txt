Title: Valiant - Heroic validations for Moo and DBIC classes - John Napiorkowski
Publication date: 2021-06-10
Playlist: TPC 2021 in the Cloud
Description: 
	Valiant is a CPAN distribution that provides validations for your Moo and DBIx::Class result classes that is based on the popular and successful system integrated with Ruby on Rails.

# Description

Valiant (https://metacpan.org/pod/Valiant) is a set of Moo roles and DBIC components that integrate validations directly into your Moo classes or DBIx::Class result classes. Provides a domain specific language which allows you to defined for a given class what a valid state for an instance of that class would be and to gather reportable error messages. Used to defined constraints related to business logic or for validating user input (for example via CGI forms).

When we say domain level or business logic validation, what we mean is that invalid data is a possible and expected state that needs to be evaluated and reported to the end user for correction. For example when writing a web application you might have a form that requests user profile information (such as name, DOB, address, etc). It's an expected condition that the user might submit form data that is invalid in some way (such as a date of birth that is in the future) but is still 'well formed' and is able to be processed. In these cases your business logic would be to inform the user of the incorrect data and request fixes (rather than simply throw a 500 server error and giving up).

This differs from type constraints (such as Type::Tiny) that you might put on your Moo attributes which are used to express when attributes have values that are so unacceptable that no further work can be done and an exception must be thrown.

Valiant fits into a similar category as HTML::Formhander and FormFu although its not HTML form specific. Prior art for this would be the validations system for ActiveRecords in Ruby on Rails and the Javascript library class-validator.js, both of which the author reviewed extensively when writing this code.
Captions: 
	00:00:00,240 --> 00:00:04,560
all right well uh welcome everybody back

00:00:02,879 --> 00:00:06,560
to i think this is what the last day of

00:00:04,560 --> 00:00:08,960
uh of the pro conference this year

00:00:06,560 --> 00:00:10,960
um probably getting tired so let's just

00:00:08,960 --> 00:00:13,440
uh try to make it fun

00:00:10,960 --> 00:00:14,880
i want to welcome everybody who's

00:00:13,440 --> 00:00:16,160
watching this on youtube

00:00:14,880 --> 00:00:18,320
and if you get something out of it

00:00:16,160 --> 00:00:21,199
please consider donating to pearl

00:00:18,320 --> 00:00:22,720
um so my name is john eprakowski i'm

00:00:21,199 --> 00:00:25,880
jnapp on irc

00:00:22,720 --> 00:00:27,119
and on cpan you can find me under

00:00:25,880 --> 00:00:30,720
j-g-a-n-a-a-p-i-k-o-w

00:00:27,119 --> 00:00:33,600
yeah anyway uh there it is and uh this

00:00:30,720 --> 00:00:34,800
is a presentation on valiant which is a

00:00:33,600 --> 00:00:36,960
form validation

00:00:34,800 --> 00:00:40,079
uh system uh which i wrote because there

00:00:36,960 --> 00:00:41,280
were just not enough of them on c

00:00:40,079 --> 00:00:42,879
so what's the outline of the

00:00:41,280 --> 00:00:44,000
presentation today i'm going to talk a

00:00:42,879 --> 00:00:46,320
little bit about what valiant

00:00:44,000 --> 00:00:47,520
is why i wrote it i'm going to give you

00:00:46,320 --> 00:00:50,399
some examples

00:00:47,520 --> 00:00:52,000
a detailed code walk through and uh

00:00:50,399 --> 00:00:53,840
hopefully we'll get to

00:00:52,000 --> 00:00:55,120
talk about the glue code that i wrote

00:00:53,840 --> 00:00:57,680
for the dbx class

00:00:55,120 --> 00:00:58,320
so you can include the validations dbx

00:00:57,680 --> 00:01:01,359
class

00:00:58,320 --> 00:01:03,760
with a catalyst application and

00:01:01,359 --> 00:01:05,360
as far as we get we get and just to

00:01:03,760 --> 00:01:05,920
point out i mean i wrote a lot of slides

00:01:05,360 --> 00:01:08,479
here

00:01:05,920 --> 00:01:10,320
but uh feel free to if you some things

00:01:08,479 --> 00:01:11,920
is interesting you want to stop me

00:01:10,320 --> 00:01:13,360
i mean if i only get to hit the slides

00:01:11,920 --> 00:01:15,119
or a third of the slides because people

00:01:13,360 --> 00:01:17,360
have questions i'm fine with that

00:01:15,119 --> 00:01:19,280
i'm have no uh particular agenda to

00:01:17,360 --> 00:01:22,080
force our way through everything

00:01:19,280 --> 00:01:23,680
so um you're all pro programmers so let

00:01:22,080 --> 00:01:26,479
us just start with the code

00:01:23,680 --> 00:01:27,439
what does value like well it looks like

00:01:26,479 --> 00:01:31,200
this

00:01:27,439 --> 00:01:33,920
um basically uh valiant adds a

00:01:31,200 --> 00:01:35,680
uh domain specific language a couple

00:01:33,920 --> 00:01:38,159
basically a couple of keywords

00:01:35,680 --> 00:01:40,159
um they get pulled into your mu or moose

00:01:38,159 --> 00:01:41,920
classes it works with both mu and moose

00:01:40,159 --> 00:01:43,439
all the examples that you'll see today

00:01:41,920 --> 00:01:46,720
are will be mu

00:01:43,439 --> 00:01:48,560
but moose also works so the idea here is

00:01:46,720 --> 00:01:51,759
that we had a couple of

00:01:48,560 --> 00:01:53,680
uh of keywords in this case you see here

00:01:51,759 --> 00:01:55,040
the two keywords that we'll be reviewing

00:01:53,680 --> 00:01:57,040
validate

00:01:55,040 --> 00:01:58,719
and today's width and with these two

00:01:57,040 --> 00:02:00,079
additional keywords it allows you to add

00:01:58,719 --> 00:02:02,960
validations

00:02:00,079 --> 00:02:04,560
uh add validations into any existing mu

00:02:02,960 --> 00:02:07,119
or moose class

00:02:04,560 --> 00:02:08,479
and they're just simply defined using a

00:02:07,119 --> 00:02:10,720
a

00:02:08,479 --> 00:02:13,440
as a process that works very similar to

00:02:10,720 --> 00:02:15,360
the way that moon moose works with

00:02:13,440 --> 00:02:16,640
attributes so it should be pretty

00:02:15,360 --> 00:02:18,160
straightforward and

00:02:16,640 --> 00:02:22,239
and fit into hopefully the way you think

00:02:18,160 --> 00:02:24,800
about things

00:02:22,239 --> 00:02:25,360
okay so um as i said it's a dsl for

00:02:24,800 --> 00:02:28,720
taking

00:02:25,360 --> 00:02:30,640
most objects and the goal here is

00:02:28,720 --> 00:02:32,400
i looked there's like probably a

00:02:30,640 --> 00:02:33,519
thousand like different ways of doing

00:02:32,400 --> 00:02:36,400
validation

00:02:33,519 --> 00:02:37,680
um on cpan lots and a lot of the

00:02:36,400 --> 00:02:38,239
libraries that are out there are really

00:02:37,680 --> 00:02:41,519
great

00:02:38,239 --> 00:02:44,080
um but what i wanted something that was

00:02:41,519 --> 00:02:45,280
very specifically to make it very easy

00:02:44,080 --> 00:02:46,879
to write

00:02:45,280 --> 00:02:48,400
objects that express your business logic

00:02:46,879 --> 00:02:50,239
validations there's a lot of stuff out

00:02:48,400 --> 00:02:53,360
there that specifically for writing

00:02:50,239 --> 00:02:55,120
html form to doing forum validation

00:02:53,360 --> 00:02:57,280
there's a lot of standalone validations

00:02:55,120 --> 00:02:59,040
there's constrained systems

00:02:57,280 --> 00:03:00,319
but what i was looking for is something

00:02:59,040 --> 00:03:03,360
that would fit

00:03:00,319 --> 00:03:05,280
into existing classes

00:03:03,360 --> 00:03:07,040
and helped me to just put validations on

00:03:05,280 --> 00:03:08,879
top of it additionally

00:03:07,040 --> 00:03:10,560
i what i wanted was something that i can

00:03:08,879 --> 00:03:13,440
glue into dbas class

00:03:10,560 --> 00:03:14,720
um i use dvs class a lot for doing uh

00:03:13,440 --> 00:03:18,400
data persistence

00:03:14,720 --> 00:03:20,560
and like 90 of my code particularly my

00:03:18,400 --> 00:03:21,040
business logic code is written into dbs

00:03:20,560 --> 00:03:22,319
class

00:03:21,040 --> 00:03:24,159
so i wanted something that would fit

00:03:22,319 --> 00:03:25,840
into that very straightforwardly

00:03:24,159 --> 00:03:27,200
and there would be a couple a couple

00:03:25,840 --> 00:03:28,159
utilities that would overlap with

00:03:27,200 --> 00:03:30,159
validation

00:03:28,159 --> 00:03:32,239
uh internationalization of your error

00:03:30,159 --> 00:03:33,920
messages and filtering being two i'm not

00:03:32,239 --> 00:03:35,280
going to go into super detail in those

00:03:33,920 --> 00:03:36,239
in this presentation because we only

00:03:35,280 --> 00:03:39,360
have 50 minutes

00:03:36,239 --> 00:03:41,200
and each one is a pretty deep subject in

00:03:39,360 --> 00:03:43,519
and of itself

00:03:41,200 --> 00:03:44,799
but i added both of these because in my

00:03:43,519 --> 00:03:48,319
review of

00:03:44,799 --> 00:03:51,040
many of the popular validation systems

00:03:48,319 --> 00:03:52,319
on cpan it looked like that most of them

00:03:51,040 --> 00:03:53,120
had filtering

00:03:52,319 --> 00:03:55,040
and many of them had

00:03:53,120 --> 00:03:56,720
internationalization built in so it

00:03:55,040 --> 00:03:59,599
seemed to be something that

00:03:56,720 --> 00:04:00,799
people expect to have and what i mean by

00:03:59,599 --> 00:04:03,200
filtering

00:04:00,799 --> 00:04:05,360
i mean when a when the information comes

00:04:03,200 --> 00:04:06,959
in before performing validation

00:04:05,360 --> 00:04:09,200
maybe you want to do some lunging of the

00:04:06,959 --> 00:04:11,120
data you want to trim it to remove

00:04:09,200 --> 00:04:12,239
uh you know white space from the

00:04:11,120 --> 00:04:13,519
beginning at the end

00:04:12,239 --> 00:04:15,280
maybe you want to normalize the

00:04:13,519 --> 00:04:18,239
capitalization uh

00:04:15,280 --> 00:04:19,600
you know strip out any um evil uh

00:04:18,239 --> 00:04:22,160
attempts uh to do

00:04:19,600 --> 00:04:23,600
html or javascript type injection all

00:04:22,160 --> 00:04:26,840
those kind of things so you

00:04:23,600 --> 00:04:28,720
basically mudging the data before doing

00:04:26,840 --> 00:04:31,440
validation

00:04:28,720 --> 00:04:32,160
and just simply what it's not um out of

00:04:31,440 --> 00:04:35,040
scope

00:04:32,160 --> 00:04:35,680
for um for valiant it's not a foreign

00:04:35,040 --> 00:04:37,280
builder

00:04:35,680 --> 00:04:39,520
so it's not like a direct replacement

00:04:37,280 --> 00:04:44,479
for say something like html form foo

00:04:39,520 --> 00:04:47,040
or um or uh uh data of data form for

00:04:44,479 --> 00:04:48,800
uh those which are systems that do

00:04:47,040 --> 00:04:50,000
validation but they will will also

00:04:48,800 --> 00:04:52,960
generate html

00:04:50,000 --> 00:04:54,479
okay um and it's also it's not a it's

00:04:52,960 --> 00:04:56,479
not a standalone

00:04:54,479 --> 00:04:58,639
validation system so it's not like

00:04:56,479 --> 00:05:00,400
something like data validator

00:04:58,639 --> 00:05:01,919
where you create a class that expresses

00:05:00,400 --> 00:05:02,639
a bunch of validations and then you can

00:05:01,919 --> 00:05:04,400
run

00:05:02,639 --> 00:05:05,919
uh basically you run those against like

00:05:04,400 --> 00:05:08,320
um uh

00:05:05,919 --> 00:05:10,160
like hashgraphs okay this is something

00:05:08,320 --> 00:05:12,479
that needs to be built into

00:05:10,160 --> 00:05:13,680
more moose classes okay so it's a little

00:05:12,479 --> 00:05:15,280
more heavyweight

00:05:13,680 --> 00:05:18,240
but it's designed to work inside of

00:05:15,280 --> 00:05:18,240
existing classes

00:05:18,639 --> 00:05:22,720
okay and just a quick disclaimer it's on

00:05:21,759 --> 00:05:24,160
cpan

00:05:22,720 --> 00:05:26,800
i've been using it other people have

00:05:24,160 --> 00:05:29,199
been using it i still consider the code

00:05:26,800 --> 00:05:30,800
to be most of the code is late beta but

00:05:29,199 --> 00:05:32,639
some parts of the code particularly the

00:05:30,800 --> 00:05:35,840
dba explain stuff that i show you

00:05:32,639 --> 00:05:38,080
i consider to be alpha so like what i

00:05:35,840 --> 00:05:40,800
mean by alpha is it works for me

00:05:38,080 --> 00:05:42,080
um but if you use it i would exp you

00:05:40,800 --> 00:05:43,759
really should be

00:05:42,080 --> 00:05:45,680
somebody who knows how to who knows

00:05:43,759 --> 00:05:47,360
pearl and would be willing to like

00:05:45,680 --> 00:05:49,199
submit bug reports and

00:05:47,360 --> 00:05:52,639
possibly even patches to me if you

00:05:49,199 --> 00:05:55,680
weren't into trouble

00:05:52,639 --> 00:05:56,080
okay so let's go to the top and start

00:05:55,680 --> 00:05:59,759
with

00:05:56,080 --> 00:06:02,319
a very simple validation example

00:05:59,759 --> 00:06:03,759
all right so going back to here so here

00:06:02,319 --> 00:06:06,400
we have a move class

00:06:03,759 --> 00:06:07,199
um it defines two attributes uh age and

00:06:06,400 --> 00:06:09,600
name

00:06:07,199 --> 00:06:10,560
and the data comes in and we want to

00:06:09,600 --> 00:06:13,280
validate it

00:06:10,560 --> 00:06:14,639
okay so the most simple thing you could

00:06:13,280 --> 00:06:17,840
possibly do

00:06:14,639 --> 00:06:21,280
using of valiant is to

00:06:17,840 --> 00:06:25,919
uh just use a code ref uh

00:06:21,280 --> 00:06:29,360
with what validates with validates with

00:06:25,919 --> 00:06:31,680
accepts uh the existing instance

00:06:29,360 --> 00:06:34,560
that you're validating so self here is

00:06:31,680 --> 00:06:37,600
an instance of local simple and

00:06:34,560 --> 00:06:40,160
you just simply add error messages

00:06:37,600 --> 00:06:40,960
based on uh things not working the way

00:06:40,160 --> 00:06:44,560
you want

00:06:40,960 --> 00:06:47,199
right so this basically is a validation

00:06:44,560 --> 00:06:48,800
on the cl on the instance as a whole

00:06:47,199 --> 00:06:51,360
okay

00:06:48,800 --> 00:06:52,000
uh so i just defined two validations i

00:06:51,360 --> 00:06:53,599
want the

00:06:52,000 --> 00:06:55,759
the name to be under a certain length

00:06:53,599 --> 00:06:56,479
and i want the age to be over a certain

00:06:55,759 --> 00:07:00,479
number

00:06:56,479 --> 00:07:01,120
okay uh and i'm just simply defining

00:07:00,479 --> 00:07:03,199
here

00:07:01,120 --> 00:07:04,800
i've i'm specifying which of the

00:07:03,199 --> 00:07:07,840
attributes has the problem

00:07:04,800 --> 00:07:09,440
so age can't be negative a name can't be

00:07:07,840 --> 00:07:11,199
too long

00:07:09,440 --> 00:07:12,720
now here's and then i go ahead and i

00:07:11,199 --> 00:07:15,280
create an instance of a class that's

00:07:12,720 --> 00:07:15,280
invalid

00:07:15,520 --> 00:07:19,360
okay so one thing that i just want to

00:07:18,400 --> 00:07:22,560
pause and go

00:07:19,360 --> 00:07:25,120
go through very quickly in invalid

00:07:22,560 --> 00:07:26,080
i distinguish between well-formed and

00:07:25,120 --> 00:07:29,120
valid

00:07:26,080 --> 00:07:31,759
right so when something is well-formed

00:07:29,120 --> 00:07:33,280
that means that that the document can be

00:07:31,759 --> 00:07:35,440
created can be read

00:07:33,280 --> 00:07:36,479
right whereas valid means that the

00:07:35,440 --> 00:07:38,560
document

00:07:36,479 --> 00:07:40,319
is hitting the expectations the

00:07:38,560 --> 00:07:42,960
specification that you've given

00:07:40,319 --> 00:07:46,479
for the class so in other words just to

00:07:42,960 --> 00:07:46,479
go back to the example

00:07:46,960 --> 00:07:51,919
um i'm able to i'm able to actually

00:07:50,080 --> 00:07:55,759
create with the data given

00:07:51,919 --> 00:07:57,599
an instance of local symbol right

00:07:55,759 --> 00:08:00,800
so that means that it's well formed i

00:07:57,599 --> 00:08:00,800
can actually validate

00:08:02,160 --> 00:08:05,520
so the easy way to understand the

00:08:04,000 --> 00:08:08,240
difference is

00:08:05,520 --> 00:08:09,520
if something is well-formed if it's not

00:08:08,240 --> 00:08:11,440
well-formed

00:08:09,520 --> 00:08:12,879
it's completely broken and you can't do

00:08:11,440 --> 00:08:14,879
validation at all

00:08:12,879 --> 00:08:16,960
right so that's like just giving an

00:08:14,879 --> 00:08:17,840
example let's say you're doing you're

00:08:16,960 --> 00:08:21,599
validating

00:08:17,840 --> 00:08:23,759
uh data coming in from uh some web forms

00:08:21,599 --> 00:08:26,160
right or you're validating data that's

00:08:23,759 --> 00:08:29,120
coming in uh via a json

00:08:26,160 --> 00:08:31,120
post if the data is well formed that

00:08:29,120 --> 00:08:34,159
means that it's got the attributes

00:08:31,120 --> 00:08:36,399
set up in the in the expected places if

00:08:34,159 --> 00:08:38,399
it's not well-formed it means that

00:08:36,399 --> 00:08:40,080
it's not for example looking for json

00:08:38,399 --> 00:08:41,360
maybe they didn't they didn't post json

00:08:40,080 --> 00:08:43,519
they posted something else

00:08:41,360 --> 00:08:45,279
in other words you can't read it so you

00:08:43,519 --> 00:08:46,560
can't it's not well-formed you cannot

00:08:45,279 --> 00:08:49,200
even do validation at all

00:08:46,560 --> 00:08:50,160
you just basically have to say sorry i

00:08:49,200 --> 00:08:53,279
can't do anything

00:08:50,160 --> 00:08:55,040
broken right uh whereas

00:08:53,279 --> 00:08:56,399
in the case of valid something that's

00:08:55,040 --> 00:09:00,399
simply invalid

00:08:56,399 --> 00:09:03,200
it means that it's very it's a possible

00:09:00,399 --> 00:09:04,080
situation that you want to help the user

00:09:03,200 --> 00:09:09,279
work through

00:09:04,080 --> 00:09:11,920
so like going back to the example

00:09:09,279 --> 00:09:13,120
uh in the case where somebody gives an h

00:09:11,920 --> 00:09:15,760
that's too low

00:09:13,120 --> 00:09:17,440
you don't want to just simply break and

00:09:15,760 --> 00:09:20,080
say sorry can't proceed

00:09:17,440 --> 00:09:20,880
you would like to give your user client

00:09:20,080 --> 00:09:23,760
some sort of

00:09:20,880 --> 00:09:24,640
information to help them fix the mistake

00:09:23,760 --> 00:09:26,880
they made

00:09:24,640 --> 00:09:28,880
okay and you can do that because the

00:09:26,880 --> 00:09:29,279
data that was given was well-formed it

00:09:28,880 --> 00:09:37,839
was

00:09:29,279 --> 00:09:37,839
it was you could process it

00:09:38,160 --> 00:09:42,480
so again an invalid invalid doesn't mean

00:09:40,880 --> 00:09:43,120
that it's bad it just means that you're

00:09:42,480 --> 00:09:46,240
that the

00:09:43,120 --> 00:09:49,760
the the object is in a state that is

00:09:46,240 --> 00:09:52,640
beyond expectation but you're able to

00:09:49,760 --> 00:09:53,839
understand it and inform the client what

00:09:52,640 --> 00:09:57,120
they need to do

00:09:53,839 --> 00:09:57,120
to fix the mistake they made

00:09:58,080 --> 00:10:02,399
all right and this is again going to

00:09:59,680 --> 00:10:05,040
here uh this is the example of the class

00:10:02,399 --> 00:10:08,560
and uh the kind of error messaging that

00:10:05,040 --> 00:10:08,560
value would help you to create

00:10:09,200 --> 00:10:12,959
so when you use valid it adds a bunch of

00:10:11,360 --> 00:10:16,079
it adds a bunch of um

00:10:12,959 --> 00:10:18,880
methods to your class validate

00:10:16,079 --> 00:10:20,399
valid invalid and then of course it

00:10:18,880 --> 00:10:23,120
gives you an errors

00:10:20,399 --> 00:10:24,959
object and a lot of different ways to

00:10:23,120 --> 00:10:27,440
look at the errors and parse them and

00:10:24,959 --> 00:10:29,600
pull them out and do stuff with them

00:10:27,440 --> 00:10:31,040
but this is just a simple example of the

00:10:29,600 --> 00:10:33,519
errors that you would get

00:10:31,040 --> 00:10:34,720
with the class that we just gave i want

00:10:33,519 --> 00:10:38,480
to pause here for a moment

00:10:34,720 --> 00:10:38,480
and see if there's any questions

00:10:44,160 --> 00:10:49,120
okay so um it's

00:10:47,360 --> 00:10:50,959
making your quite often when you're

00:10:49,120 --> 00:10:54,079
validating uh you're

00:10:50,959 --> 00:10:55,600
you you you it's important to validate

00:10:54,079 --> 00:10:57,680
against the class as a whole

00:10:55,600 --> 00:10:59,200
but quite often your validation logic is

00:10:57,680 --> 00:11:00,320
associated with the attributes on your

00:10:59,200 --> 00:11:03,279
mu or moose class

00:11:00,320 --> 00:11:05,279
right and you would like to have some

00:11:03,279 --> 00:11:07,440
sort of mechanism for reusability

00:11:05,279 --> 00:11:08,320
and to break up your logic to make it

00:11:07,440 --> 00:11:11,680
easier

00:11:08,320 --> 00:11:15,440
to test when you have

00:11:11,680 --> 00:11:18,720
this all the logic is in one

00:11:15,440 --> 00:11:20,320
big um code ref uh

00:11:18,720 --> 00:11:22,000
it's probably okay when you only have

00:11:20,320 --> 00:11:24,160
two but you get to the point where you

00:11:22,000 --> 00:11:26,880
have like 50 or 60 it gets to be a

00:11:24,160 --> 00:11:28,640
little too much um in one place so what

00:11:26,880 --> 00:11:31,760
you would like to have

00:11:28,640 --> 00:11:35,760
is the ability to break it up if they do

00:11:31,760 --> 00:11:38,480
um not only do validation per attribute

00:11:35,760 --> 00:11:40,160
but also we want some mechanism to allow

00:11:38,480 --> 00:11:43,040
us to have reusability

00:11:40,160 --> 00:11:44,079
right and parameterization so this is

00:11:43,040 --> 00:11:46,800
just an example

00:11:44,079 --> 00:11:47,920
of moving toward having that type of

00:11:46,800 --> 00:11:50,480
reusability

00:11:47,920 --> 00:11:52,720
and parameterization so instead of just

00:11:50,480 --> 00:11:54,800
declaring a a subref and

00:11:52,720 --> 00:11:56,959
adding it onto the validation i'm

00:11:54,800 --> 00:12:00,240
referencing a subroutine

00:11:56,959 --> 00:12:03,440
um and i'm sending parameters right so

00:12:00,240 --> 00:12:06,800
in this first example uh uh for

00:12:03,440 --> 00:12:08,320
name we're expecting uh the the name

00:12:06,800 --> 00:12:09,360
should be no long more than 20

00:12:08,320 --> 00:12:11,920
characters

00:12:09,360 --> 00:12:13,040
right so we define a method for that we

00:12:11,920 --> 00:12:16,160
add errors

00:12:13,040 --> 00:12:18,240
and so forth if the parameter

00:12:16,160 --> 00:12:20,320
if the parameter is violated and we have

00:12:18,240 --> 00:12:23,200
a similar thing for the age

00:12:20,320 --> 00:12:24,959
as well so this is like a small baby

00:12:23,200 --> 00:12:25,760
step toward like better reusability we

00:12:24,959 --> 00:12:28,320
have

00:12:25,760 --> 00:12:30,480
we have reusable methods it's

00:12:28,320 --> 00:12:32,639
parameterized and we're doing

00:12:30,480 --> 00:12:33,920
separate validations um on your

00:12:32,639 --> 00:12:36,839
attributes rather than

00:12:33,920 --> 00:12:39,839
one big validation method for the entire

00:12:36,839 --> 00:12:39,839
class

00:12:40,160 --> 00:12:43,760
and of course once you start to

00:12:42,000 --> 00:12:44,959
parameterize and you start to break it

00:12:43,760 --> 00:12:48,240
up

00:12:44,959 --> 00:12:49,600
your valid your validates can accept

00:12:48,240 --> 00:12:52,880
more than one

00:12:49,600 --> 00:12:56,480
uh validation per per uh

00:12:52,880 --> 00:12:58,399
per call so in this case um i'm i want

00:12:56,480 --> 00:12:59,120
to i might have some validations for

00:12:58,399 --> 00:13:01,120
name

00:12:59,120 --> 00:13:03,040
like the czech length one we looked at

00:13:01,120 --> 00:13:05,120
and maybe i got some other methods

00:13:03,040 --> 00:13:06,880
something that looks like a name the

00:13:05,120 --> 00:13:08,399
name has to be unique in a database i

00:13:06,880 --> 00:13:10,560
might do some sort of sql lookup

00:13:08,399 --> 00:13:13,519
and so forth right so you can you can

00:13:10,560 --> 00:13:16,639
mix and match up as many as you want

00:13:13,519 --> 00:13:18,079
and of course um just just like with moo

00:13:16,639 --> 00:13:21,839
and moose

00:13:18,079 --> 00:13:24,079
if you have uh the validation check

00:13:21,839 --> 00:13:25,600
that's going to be applied to the same

00:13:24,079 --> 00:13:27,040
uh

00:13:25,600 --> 00:13:29,680
that's going to be applied to multiple

00:13:27,040 --> 00:13:31,040
attributes um but it's the same one you

00:13:29,680 --> 00:13:33,360
can just simply

00:13:31,040 --> 00:13:35,440
say an array wrath give all the

00:13:33,360 --> 00:13:36,800
attribute names and just simply declared

00:13:35,440 --> 00:13:38,800
so this is i mean you could declare the

00:13:36,800 --> 00:13:40,079
circle if you want this is just a

00:13:38,800 --> 00:13:48,399
shorthand if you know they're all going

00:13:40,079 --> 00:13:50,880
to be the same

00:13:48,399 --> 00:13:52,000
right now so we keep talking about

00:13:50,880 --> 00:13:56,560
moving toward improved

00:13:52,000 --> 00:13:59,519
reusability um it's nice to be able to

00:13:56,560 --> 00:14:00,320
reference a method in your class but

00:13:59,519 --> 00:14:02,959
quite often

00:14:00,320 --> 00:14:04,320
you want to be able to build validations

00:14:02,959 --> 00:14:06,399
that you can share across

00:14:04,320 --> 00:14:07,760
classes so in order there's a couple

00:14:06,399 --> 00:14:10,399
ways to do this

00:14:07,760 --> 00:14:12,320
but the way that's built in to valiant

00:14:10,399 --> 00:14:14,160
is you can define a custom

00:14:12,320 --> 00:14:15,839
validator class and a custom validator

00:14:14,160 --> 00:14:18,800
class all that it is

00:14:15,839 --> 00:14:20,480
is a is an object that that has a

00:14:18,800 --> 00:14:22,720
validate method

00:14:20,480 --> 00:14:24,320
um i recommend it if you build your own

00:14:22,720 --> 00:14:25,440
that you should consume the valiant

00:14:24,320 --> 00:14:27,360
validator

00:14:25,440 --> 00:14:28,959
role but that role it doesn't really

00:14:27,360 --> 00:14:30,560
have much except that it enforces that

00:14:28,959 --> 00:14:32,639
you have the validate method

00:14:30,560 --> 00:14:34,959
and so basically all that i've done here

00:14:32,639 --> 00:14:38,000
is i've created a custom validator

00:14:34,959 --> 00:14:38,639
which is the same as uh that validator

00:14:38,000 --> 00:14:42,079
code ref

00:14:38,639 --> 00:14:43,839
that we had way back from the beginning

00:14:42,079 --> 00:14:46,240
and let's see how we would use it in a

00:14:43,839 --> 00:14:46,240
class

00:14:49,680 --> 00:14:53,360
so it's a little more reusable because

00:14:51,360 --> 00:14:55,199
here you can use this across

00:14:53,360 --> 00:14:57,920
multiple classes now we might have

00:14:55,199 --> 00:15:00,000
noticed the way we we invoked the name

00:14:57,920 --> 00:15:02,800
in order to make it easier to do

00:15:00,000 --> 00:15:05,440
subclassing and reusability

00:15:02,800 --> 00:15:06,800
the validator class i basically just

00:15:05,440 --> 00:15:08,240
look at the last part

00:15:06,800 --> 00:15:09,839
so you can see here it says validates

00:15:08,240 --> 00:15:12,560
with custom

00:15:09,839 --> 00:15:14,880
just let's go back to the definition and

00:15:12,560 --> 00:15:14,880
it's

00:15:16,240 --> 00:15:20,639
under the name space of the class that

00:15:19,120 --> 00:15:23,519
you created it so i'm looking in

00:15:20,639 --> 00:15:24,399
local person validator custom the

00:15:23,519 --> 00:15:27,760
packages

00:15:24,399 --> 00:15:29,440
local person um and the way this look up

00:15:27,760 --> 00:15:32,560
works is

00:15:29,440 --> 00:15:35,680
uh we

00:15:32,560 --> 00:15:37,680
basically we start by looking in the

00:15:35,680 --> 00:15:39,040
namespace specific to the class you

00:15:37,680 --> 00:15:41,839
invoked it in

00:15:39,040 --> 00:15:44,880
and then we just crawl up the namespaces

00:15:41,839 --> 00:15:46,880
until we get to the root namespace

00:15:44,880 --> 00:15:49,040
after that we look in two more one is

00:15:46,880 --> 00:15:51,839
value validator x namespace

00:15:49,040 --> 00:15:53,759
which is reserved for people who want to

00:15:51,839 --> 00:15:55,279
share validations on cpan

00:15:53,759 --> 00:15:57,040
and then there's the valiant validator

00:15:55,279 --> 00:15:59,360
name space which is reserved

00:15:57,040 --> 00:16:00,800
for validations which are which come

00:15:59,360 --> 00:16:04,079
with ship with valiant

00:16:00,800 --> 00:16:06,000
okay so to be clear when you create the

00:16:04,079 --> 00:16:09,279
class

00:16:06,000 --> 00:16:12,399
these we crawl at the

00:16:09,279 --> 00:16:14,240
low time so it makes it a little longer

00:16:12,399 --> 00:16:16,959
for your class to get loaded

00:16:14,240 --> 00:16:18,560
but once it's loaded it knows what it's

00:16:16,959 --> 00:16:20,480
doing so it doesn't have to look this up

00:16:18,560 --> 00:16:23,600
for every single instance

00:16:20,480 --> 00:16:26,639
so this means that this this validator

00:16:23,600 --> 00:16:28,959
is good only for persistent applications

00:16:26,639 --> 00:16:30,720
so like a web application like catalyst

00:16:28,959 --> 00:16:32,639
uh or dancer or modulation that's

00:16:30,720 --> 00:16:34,880
running persistently could use this

00:16:32,639 --> 00:16:37,680
i would not recommend using this for

00:16:34,880 --> 00:16:38,959
something like uh classic cgi

00:16:37,680 --> 00:16:40,639
right where you where each time

00:16:38,959 --> 00:16:42,639
everything gets loaded and built up

00:16:40,639 --> 00:16:45,120
because there's a performance penalty

00:16:42,639 --> 00:16:46,480
for the load time during the load time

00:16:45,120 --> 00:16:49,440
each class has to go

00:16:46,480 --> 00:16:53,279
like look up all the all the validations

00:16:49,440 --> 00:16:53,279
and it crawls the name space like this

00:16:54,160 --> 00:16:57,279
any questions about that

00:17:00,639 --> 00:17:05,439
okay if for some reason you have like a

00:17:04,559 --> 00:17:07,760
validator

00:17:05,439 --> 00:17:08,559
in a unusual name space that you want to

00:17:07,760 --> 00:17:11,039
share

00:17:08,559 --> 00:17:12,640
you can just write the entire class name

00:17:11,039 --> 00:17:14,880
and put a plus in front of it

00:17:12,640 --> 00:17:17,280
and if you do that then value those that

00:17:14,880 --> 00:17:20,319
means load this very specific

00:17:17,280 --> 00:17:20,319
thing okay

00:17:23,439 --> 00:17:28,559
so that's i just we just showed like how

00:17:26,000 --> 00:17:30,000
to write a custom validator

00:17:28,559 --> 00:17:32,720
that would be they would operate on the

00:17:30,000 --> 00:17:34,640
class as a whole but in general

00:17:32,720 --> 00:17:35,840
we very often are doing validation at

00:17:34,640 --> 00:17:40,000
the attribute level

00:17:35,840 --> 00:17:42,799
so how do you create a custom

00:17:40,000 --> 00:17:43,280
validator that would be reusable for

00:17:42,799 --> 00:17:48,240
your

00:17:43,280 --> 00:17:51,440
attributes so here's an example

00:17:48,240 --> 00:17:54,160
now this is these are

00:17:51,440 --> 00:17:55,440
validators which ship with valiant the

00:17:54,160 --> 00:17:56,000
ship valiant ships with the number of

00:17:55,440 --> 00:17:58,160
them

00:17:56,000 --> 00:18:00,880
uh presence is just means that it needs

00:17:58,160 --> 00:18:04,320
to be there it's basically like required

00:18:00,880 --> 00:18:05,760
um the numericality validator gives you

00:18:04,320 --> 00:18:08,160
a lot of different ways

00:18:05,760 --> 00:18:08,799
of enforcing that forcing that if it's a

00:18:08,160 --> 00:18:10,480
number

00:18:08,799 --> 00:18:12,160
in this case i'm specifying it needs to

00:18:10,480 --> 00:18:15,600
be an integer this between

00:18:12,160 --> 00:18:17,600
1 and 10 okay and uh

00:18:15,600 --> 00:18:18,799
the length validator validates the

00:18:17,600 --> 00:18:21,200
lengths of strings

00:18:18,799 --> 00:18:23,360
so that means description has to be at

00:18:21,200 --> 00:18:26,799
least 10 characters but no more than 60

00:18:23,360 --> 00:18:28,720
okay and the date validator um

00:18:26,799 --> 00:18:30,080
it has a number of options in this

00:18:28,720 --> 00:18:32,559
particular case i'm saying

00:18:30,080 --> 00:18:33,760
it must be a future date right uh these

00:18:32,559 --> 00:18:36,480
are all built in

00:18:33,760 --> 00:18:38,480
uh and if you go to cpan and look at the

00:18:36,480 --> 00:18:41,600
different validators that ship with it

00:18:38,480 --> 00:18:44,240
each each one is documented

00:18:41,600 --> 00:18:44,880
and gives you quite a few options out of

00:18:44,240 --> 00:18:48,080
the box

00:18:44,880 --> 00:18:50,480
okay but how do you write your own

00:18:48,080 --> 00:18:51,840
custom validator again it's it's

00:18:50,480 --> 00:18:55,760
actually pretty simple

00:18:51,840 --> 00:18:58,240
um like with like with the custom

00:18:55,760 --> 00:19:00,559
validator that operates on the class you

00:18:58,240 --> 00:19:03,600
just simply write a new class

00:19:00,559 --> 00:19:05,520
in this case you need to consume uh the

00:19:03,600 --> 00:19:08,400
valid validator each

00:19:05,520 --> 00:19:10,799
which is the subclass of valiant which

00:19:08,400 --> 00:19:14,080
is a sub role of valiant validator

00:19:10,799 --> 00:19:16,559
uh that has uh extra stuff built into it

00:19:14,080 --> 00:19:17,200
to allow you to make it easy for you to

00:19:16,559 --> 00:19:18,799
validate

00:19:17,200 --> 00:19:20,640
attributes and you can see here that the

00:19:18,799 --> 00:19:24,000
signature is a little different

00:19:20,640 --> 00:19:25,919
uh with validate each uh because

00:19:24,000 --> 00:19:27,840
you get the attribute name you don't

00:19:25,919 --> 00:19:28,880
just get the the incoming object you get

00:19:27,840 --> 00:19:30,559
the attribute name

00:19:28,880 --> 00:19:31,760
the value you're comparing with it and

00:19:30,559 --> 00:19:32,640
the additional options that are being

00:19:31,760 --> 00:19:35,520
passed along

00:19:32,640 --> 00:19:37,760
right so in this particular case here's

00:19:35,520 --> 00:19:39,679
a very simple example a validator

00:19:37,760 --> 00:19:41,760
which is enforcing that that an

00:19:39,679 --> 00:19:45,039
attribute must be considered true

00:19:41,760 --> 00:19:47,039
uh pearl true right so um if

00:19:45,039 --> 00:19:48,400
as you can see unless it's true and i'm

00:19:47,039 --> 00:19:50,720
saying it's not a true value it's adding

00:19:48,400 --> 00:19:53,919
an error

00:19:50,720 --> 00:19:56,000
you can um you can

00:19:53,919 --> 00:19:57,360
from here you can pretty much write any

00:19:56,000 --> 00:19:59,520
honest validation

00:19:57,360 --> 00:20:01,280
and the lookup works do the same

00:19:59,520 --> 00:20:04,159
basically it would look under

00:20:01,280 --> 00:20:05,760
um the it would start by it would it

00:20:04,159 --> 00:20:06,880
would crawl the namespace starting with

00:20:05,760 --> 00:20:09,360
the namespace

00:20:06,880 --> 00:20:10,799
in which you you've called it and it'll

00:20:09,360 --> 00:20:11,919
crawl up to the top of the namespace and

00:20:10,799 --> 00:20:14,559
then we'll look in the two global

00:20:11,919 --> 00:20:14,559
namespaces

00:20:16,480 --> 00:20:22,159
and this is an example of how it's you

00:20:18,480 --> 00:20:22,159
might use it in your class

00:20:27,120 --> 00:20:31,919
so when i wrote this i was looking at

00:20:30,000 --> 00:20:35,039
ruby on rails because

00:20:31,919 --> 00:20:36,320
originally this was a project i

00:20:35,039 --> 00:20:38,400
ended up starting this project somebody

00:20:36,320 --> 00:20:41,200
said they wanted to pay me to port

00:20:38,400 --> 00:20:42,320
ruben real style validations to pearl i

00:20:41,200 --> 00:20:43,840
worked on it for a while they

00:20:42,320 --> 00:20:45,600
disappeared

00:20:43,840 --> 00:20:47,200
i looked at the code about two years ago

00:20:45,600 --> 00:20:48,400
and said maybe i should finish it

00:20:47,200 --> 00:20:49,760
seems like it would be useful and it

00:20:48,400 --> 00:20:51,039
wouldn't take long and of course two

00:20:49,760 --> 00:20:52,400
years later here i am

00:20:51,039 --> 00:20:55,280
um everything always takes longer than

00:20:52,400 --> 00:20:58,080
you think uh so all the uh

00:20:55,280 --> 00:20:58,799
um all the validations or names are

00:20:58,080 --> 00:21:01,679
based on

00:20:58,799 --> 00:21:03,039
some the same from uh ruby on rails if

00:21:01,679 --> 00:21:05,120
you already know

00:21:03,039 --> 00:21:06,720
that or or you're bringing rails people

00:21:05,120 --> 00:21:08,000
over to a catalyst application or a

00:21:06,720 --> 00:21:11,039
pearl application

00:21:08,000 --> 00:21:14,240
uh it'll seem familiar to them so

00:21:11,039 --> 00:21:14,240
there's an upside to that i guess

00:21:15,120 --> 00:21:19,120
okay so um you you

00:21:18,159 --> 00:21:21,760
there's a lot of different ways you can

00:21:19,120 --> 00:21:22,559
declare validations uh you can do a

00:21:21,760 --> 00:21:25,679
subref

00:21:22,559 --> 00:21:28,080
you can uh you can do subclasses of of

00:21:25,679 --> 00:21:33,039
validate validates validator as i showed

00:21:28,080 --> 00:21:36,320
you um but you can also just simply use

00:21:33,039 --> 00:21:38,480
any of the standard uh validation uh

00:21:36,320 --> 00:21:40,640
type constraints that are on cpan a lot

00:21:38,480 --> 00:21:42,240
of people like type tiny

00:21:40,640 --> 00:21:44,000
and this is an example of using type

00:21:42,240 --> 00:21:46,480
tiny so you could just simply use

00:21:44,000 --> 00:21:47,919
it if you if you familiar with it or if

00:21:46,480 --> 00:21:51,600
you've written a bunch of

00:21:47,919 --> 00:21:52,880
of um of like tight tiny constraints for

00:21:51,600 --> 00:21:55,360
your projects

00:21:52,880 --> 00:21:57,120
you can consume that as well so uh

00:21:55,360 --> 00:21:58,400
valiant tries to not be really

00:21:57,120 --> 00:22:00,000
dictatorial

00:21:58,400 --> 00:22:01,520
and there's a lot of give you trying to

00:22:00,000 --> 00:22:04,799
give you a lot of different ways

00:22:01,520 --> 00:22:13,840
to write your constraints depending on

00:22:04,799 --> 00:22:13,840
what you are used to using

00:22:13,919 --> 00:22:19,200
reusability whenever you write um

00:22:17,120 --> 00:22:20,480
classes um you always want to try to

00:22:19,200 --> 00:22:22,799
think about

00:22:20,480 --> 00:22:24,080
um making it so that you don't have a

00:22:22,799 --> 00:22:27,600
lot of repeated code

00:22:24,080 --> 00:22:31,200
and thinking about in terms of reusing

00:22:27,600 --> 00:22:34,799
and having shared bits so it's very easy

00:22:31,200 --> 00:22:38,159
um to use

00:22:34,799 --> 00:22:39,760
in roles uh you could just simply

00:22:38,159 --> 00:22:43,280
create a new class like here we create a

00:22:39,760 --> 00:22:45,840
person class it defines some validations

00:22:43,280 --> 00:22:46,960
for both name and age this is an actual

00:22:45,840 --> 00:22:50,240
class

00:22:46,960 --> 00:22:53,360
now here's an example of creating a role

00:22:50,240 --> 00:22:55,760
so is retirement age it has an

00:22:53,360 --> 00:22:59,440
additional validation on a required

00:22:55,760 --> 00:23:02,400
method unrequited attribute age right

00:22:59,440 --> 00:23:04,640
uh and then here we have and at the very

00:23:02,400 --> 00:23:06,640
end we actually have a concrete class

00:23:04,640 --> 00:23:09,039
that is using person so it has name and

00:23:06,640 --> 00:23:10,960
age and it's consuming is retirement age

00:23:09,039 --> 00:23:14,000
so it picks up the additional

00:23:10,960 --> 00:23:16,799
validation from uh from the his

00:23:14,000 --> 00:23:16,799
retirement age

00:23:17,280 --> 00:23:22,880
and when we go to use it we'll see

00:23:20,799 --> 00:23:25,360
that the errors happen the way as

00:23:22,880 --> 00:23:25,360
expected

00:23:31,280 --> 00:23:36,559
now um there's a lot of different

00:23:35,280 --> 00:23:38,400
there's a lot of different options in

00:23:36,559 --> 00:23:42,080
order to try to give you

00:23:38,400 --> 00:23:44,559
better control over um

00:23:42,080 --> 00:23:46,480
how your validations run and when they

00:23:44,559 --> 00:23:50,320
run under certain conditions

00:23:46,480 --> 00:23:51,840
so uh you can slip in these uh

00:23:50,320 --> 00:23:54,720
global options they can be either

00:23:51,840 --> 00:23:56,159
associated with all the validations

00:23:54,720 --> 00:23:58,720
that are being defined on a given

00:23:56,159 --> 00:23:59,760
attribute or you can put them on a very

00:23:58,720 --> 00:24:03,120
specific one

00:23:59,760 --> 00:24:06,240
okay so here we go with allow undef

00:24:03,120 --> 00:24:10,000
is a is a valid is a validation option

00:24:06,240 --> 00:24:11,200
that says um to you want to skip the

00:24:10,000 --> 00:24:14,400
validation

00:24:11,200 --> 00:24:17,120
if uh if the validate if the

00:24:14,400 --> 00:24:18,480
actual attribute isn't defined so a lot

00:24:17,120 --> 00:24:20,480
of times you may only want to do

00:24:18,480 --> 00:24:23,039
validation if the data is actually there

00:24:20,480 --> 00:24:24,640
right as opposed to generating an error

00:24:23,039 --> 00:24:25,279
or you don't care like something is

00:24:24,640 --> 00:24:27,200
optional

00:24:25,279 --> 00:24:28,400
you don't want to generate an error if

00:24:27,200 --> 00:24:31,440
something's optional

00:24:28,400 --> 00:24:34,799
so here we have name which

00:24:31,440 --> 00:24:35,760
if it's present it's required to be

00:24:34,799 --> 00:24:39,200
alphanumeric

00:24:35,760 --> 00:24:42,559
and a length uh between 30 and 20. um

00:24:39,200 --> 00:24:44,720
but if there's if there's no name

00:24:42,559 --> 00:24:46,400
if somebody is anonymous we don't run

00:24:44,720 --> 00:24:48,159
those validations at all and we don't

00:24:46,400 --> 00:24:50,559
generate any of the errors

00:24:48,159 --> 00:24:51,440
okay and you see here that allow undead

00:24:50,559 --> 00:24:54,480
applies to both

00:24:51,440 --> 00:24:57,600
length and format uh

00:24:54,480 --> 00:24:59,520
now with the next validation you can see

00:24:57,600 --> 00:25:02,320
that the allow undef is grouped

00:24:59,520 --> 00:25:04,799
in with the options that are specific to

00:25:02,320 --> 00:25:07,840
the numericality

00:25:04,799 --> 00:25:11,440
validation right so

00:25:07,840 --> 00:25:12,559
this one is only uh disallow undef is

00:25:11,440 --> 00:25:15,120
only associated

00:25:12,559 --> 00:25:16,880
with that one specific validation so for

00:25:15,120 --> 00:25:17,600
example if you had multiple validation

00:25:16,880 --> 00:25:19,440
on age

00:25:17,600 --> 00:25:22,960
and you only want to skip some when it's

00:25:19,440 --> 00:25:22,960
undefined you could do that

00:25:26,000 --> 00:25:31,840
allow blank is is similar to undefined

00:25:28,720 --> 00:25:31,840
but it accepts blend

00:25:40,880 --> 00:25:44,400
chain app with lost your audio

00:25:50,720 --> 00:26:00,159
later depending on your use case

00:25:56,799 --> 00:26:02,159
um if unless this allows you to control

00:26:00,159 --> 00:26:03,679
whether you run a validation based on

00:26:02,159 --> 00:26:07,679
some additional logic

00:26:03,679 --> 00:26:11,360
okay so down here we're saying that uh

00:26:07,679 --> 00:26:12,240
the password needs to uh be between 12

00:26:11,360 --> 00:26:15,120
and 32

00:26:12,240 --> 00:26:15,360
characters and it needs to uh look like

00:26:15,120 --> 00:26:18,320
a

00:26:15,360 --> 00:26:19,600
secure password unless it's me i'm

00:26:18,320 --> 00:26:21,840
allowed to have any kind of paste what i

00:26:19,600 --> 00:26:21,840
want

00:26:22,240 --> 00:26:29,679
and you could use this um as a mechanism

00:26:26,000 --> 00:26:32,960
for controlling which validations run

00:26:29,679 --> 00:26:32,960
under what circumstances

00:26:36,159 --> 00:26:40,799
now you've seen that um uh we give you

00:26:38,960 --> 00:26:42,080
default messages which are defined and

00:26:40,799 --> 00:26:43,600
internationalized

00:26:42,080 --> 00:26:45,520
uh but there's a lot of different ways

00:26:43,600 --> 00:26:48,159
to set set error messages

00:26:45,520 --> 00:26:49,200
uh one simple way is to just set a

00:26:48,159 --> 00:26:52,720
message

00:26:49,200 --> 00:26:54,559
on validation uh as to what i want and

00:26:52,720 --> 00:26:56,480
as a string and this will be the error

00:26:54,559 --> 00:26:58,720
message

00:26:56,480 --> 00:27:00,559
so this it can actually be complicated

00:26:58,720 --> 00:27:03,919
because it can take a string

00:27:00,559 --> 00:27:05,760
uh it can take a code ref um and it can

00:27:03,919 --> 00:27:07,039
take a translation tag

00:27:05,760 --> 00:27:09,200
i'm not going to go into super detail

00:27:07,039 --> 00:27:12,240
there it's documented

00:27:09,200 --> 00:27:12,640
um but you have a lot of different ways

00:27:12,240 --> 00:27:14,720
of

00:27:12,640 --> 00:27:20,159
of of controlling and presenting the way

00:27:14,720 --> 00:27:21,919
your messaging works

00:27:20,159 --> 00:27:23,679
uh there's another option called strict

00:27:21,919 --> 00:27:26,240
which uh basically

00:27:23,679 --> 00:27:28,240
generally when you fail a validation you

00:27:26,240 --> 00:27:30,000
don't want to throw an exception

00:27:28,240 --> 00:27:31,679
right your base you're what you're

00:27:30,000 --> 00:27:33,760
trying to do is you're collecting

00:27:31,679 --> 00:27:35,360
a list of things that are wrong that you

00:27:33,760 --> 00:27:37,120
want to tell somebody how to correct

00:27:35,360 --> 00:27:38,720
that's what the error messages are but

00:27:37,120 --> 00:27:39,760
there's some cases where you might want

00:27:38,720 --> 00:27:42,640
to actually

00:27:39,760 --> 00:27:44,240
like if something is is particularly bad

00:27:42,640 --> 00:27:44,799
uh you want to just simply throw an

00:27:44,240 --> 00:27:47,120
exception

00:27:44,799 --> 00:27:48,880
and kill the code at that point a

00:27:47,120 --> 00:27:52,080
scenario like that might be

00:27:48,880 --> 00:27:55,440
if you detect that a string

00:27:52,080 --> 00:27:57,039
contains uh sql injection or html

00:27:55,440 --> 00:27:59,120
injection type attacks

00:27:57,039 --> 00:28:00,399
then perhaps you just you know you want

00:27:59,120 --> 00:28:01,039
to stop there because you no longer

00:28:00,399 --> 00:28:03,360
trust

00:28:01,039 --> 00:28:04,880
the incoming data at all if it's a if it

00:28:03,360 --> 00:28:07,200
seems looks like it's a some sort of an

00:28:04,880 --> 00:28:07,200
attack

00:28:08,399 --> 00:28:15,360
and on allows you to

00:28:12,240 --> 00:28:19,440
specify a a context

00:28:15,360 --> 00:28:22,880
in which the validation actually runs

00:28:19,440 --> 00:28:25,840
right so here's a scenario where uh

00:28:22,880 --> 00:28:26,880
i have i've defined a attribute called

00:28:25,840 --> 00:28:29,760
age

00:28:26,880 --> 00:28:30,880
and i'm going to require that it's

00:28:29,760 --> 00:28:33,919
greater than or equal to

00:28:30,880 --> 00:28:36,080
different ages depending on the

00:28:33,919 --> 00:28:37,200
context in which the validation is run

00:28:36,080 --> 00:28:40,080
right so

00:28:37,200 --> 00:28:41,360
uh if if it's is running if it's run in

00:28:40,080 --> 00:28:42,720
the voter context you have to be at

00:28:41,360 --> 00:28:45,039
least 18

00:28:42,720 --> 00:28:48,799
for right retiree it's got to be 65 i

00:28:45,039 --> 00:28:48,799
guess that's 66 here in the us now

00:28:49,120 --> 00:28:53,360
and for people that are over 100

00:28:52,000 --> 00:28:56,399
contacts

00:28:53,360 --> 00:28:56,399
and how does that look

00:28:57,279 --> 00:29:00,559
when you call the validate method you

00:28:58,960 --> 00:29:03,760
pass the context

00:29:00,559 --> 00:29:05,120
and it will it will match the incoming

00:29:03,760 --> 00:29:08,240
context

00:29:05,120 --> 00:29:11,279
to the to go back to the on

00:29:08,240 --> 00:29:13,760
specification that you gave

00:29:11,279 --> 00:29:15,360
this can be really useful in scenarios

00:29:13,760 --> 00:29:18,000
where

00:29:15,360 --> 00:29:19,840
you need to slightly parameterize your

00:29:18,000 --> 00:29:22,080
validation and have the validation be

00:29:19,840 --> 00:29:24,080
different depending on the circumstances

00:29:22,080 --> 00:29:26,559
you could of course always write an

00:29:24,080 --> 00:29:28,000
entirely new class and it's what i

00:29:26,559 --> 00:29:30,399
actually would recommend doing

00:29:28,000 --> 00:29:32,240
if your context change is significant

00:29:30,399 --> 00:29:33,440
but sometimes you have a very small

00:29:32,240 --> 00:29:35,760
change

00:29:33,440 --> 00:29:37,600
and this just gives you the ability uh

00:29:35,760 --> 00:29:38,559
to not have to write an entirely new

00:29:37,600 --> 00:29:41,840
class

00:29:38,559 --> 00:29:45,200
just for just minor differences in uh

00:29:41,840 --> 00:29:45,200
in your validation rules

00:29:47,840 --> 00:29:51,679
so the way the validation works is that

00:29:50,000 --> 00:29:55,679
if a if a validation

00:29:51,679 --> 00:29:57,760
specifies an on then that must match

00:29:55,679 --> 00:29:58,880
at least one one of the items given in

00:29:57,760 --> 00:30:01,600
the context

00:29:58,880 --> 00:30:03,520
which is pass the validate okay so if

00:30:01,600 --> 00:30:07,120
you basically if you say on

00:30:03,520 --> 00:30:08,159
it has to match if your validation does

00:30:07,120 --> 00:30:11,600
not specify an

00:30:08,159 --> 00:30:12,720
odd then it will match any context given

00:30:11,600 --> 00:30:13,760
or none

00:30:12,720 --> 00:30:15,840
right so for in other words for

00:30:13,760 --> 00:30:17,360
validations that always run all the time

00:30:15,840 --> 00:30:20,399
no matter what context

00:30:17,360 --> 00:30:22,799
you simply say none and

00:30:20,399 --> 00:30:23,520
i don't have an example of it here but

00:30:22,799 --> 00:30:27,120
uh

00:30:23,520 --> 00:30:29,440
you are allowed in texts

00:30:27,120 --> 00:30:30,399
when you're allowed to set an array for

00:30:29,440 --> 00:30:37,840
on as well

00:30:30,399 --> 00:30:41,039
so it gives you quite a few options

00:30:37,840 --> 00:30:42,240
error message retrieval so um

00:30:41,039 --> 00:30:43,200
there's a lot of different again there's

00:30:42,240 --> 00:30:44,640
a lot of different ways that you can

00:30:43,200 --> 00:30:46,240
parse and look at error messages

00:30:44,640 --> 00:30:48,480
i'm just going to show a couple quick

00:30:46,240 --> 00:30:50,720
things here so like say you create a

00:30:48,480 --> 00:30:53,600
bunch of error messages that look like

00:30:50,720 --> 00:30:54,799
the code up top um and you just simply

00:30:53,600 --> 00:30:57,039
want to get all of them

00:30:54,799 --> 00:30:57,840
in a big list you can just call get them

00:30:57,039 --> 00:31:00,159
in a big list and

00:30:57,840 --> 00:31:02,640
it'll return it it'll return an array of

00:31:00,159 --> 00:31:04,559
all the error messages

00:31:02,640 --> 00:31:06,720
now just so you could see one difference

00:31:04,559 --> 00:31:07,679
here you haven't seen this before but

00:31:06,720 --> 00:31:09,840
this very top

00:31:07,679 --> 00:31:11,200
error message declaration where i'm

00:31:09,840 --> 00:31:13,919
saying add on deaf

00:31:11,200 --> 00:31:14,640
now generally when you add an error

00:31:13,919 --> 00:31:16,240
message

00:31:14,640 --> 00:31:17,679
uh you're adding one of two different

00:31:16,240 --> 00:31:18,559
types of error messages if there's an

00:31:17,679 --> 00:31:21,039
error message that's

00:31:18,559 --> 00:31:22,880
associated with a specific attribute in

00:31:21,039 --> 00:31:24,240
which case you'll specify the attribute

00:31:22,880 --> 00:31:26,880
like this second one here

00:31:24,240 --> 00:31:27,519
add name name is too short okay that's

00:31:26,880 --> 00:31:29,200
and that's an

00:31:27,519 --> 00:31:31,120
error message that's associated with the

00:31:29,200 --> 00:31:32,720
name attribute but sometimes you have

00:31:31,120 --> 00:31:33,919
error messages that are associated with

00:31:32,720 --> 00:31:37,360
the object

00:31:33,919 --> 00:31:39,279
as a whole okay in that case you you

00:31:37,360 --> 00:31:40,640
simply say add undefined in other words

00:31:39,279 --> 00:31:42,880
there's no attribute

00:31:40,640 --> 00:31:43,840
to which this error message is

00:31:42,880 --> 00:31:46,880
associated

00:31:43,840 --> 00:31:49,919
okay and you can pull up those messages

00:31:46,880 --> 00:31:51,440
separately by looking at the model and

00:31:49,919 --> 00:31:52,880
model messages

00:31:51,440 --> 00:31:55,440
or if you want to just look at attribute

00:31:52,880 --> 00:31:57,120
messages uh or if you want to just

00:31:55,440 --> 00:31:58,799
pull up error messages for a specific

00:31:57,120 --> 00:32:01,519
attribute

00:31:58,799 --> 00:32:02,720
there's like 20 methods to the errors

00:32:01,519 --> 00:32:05,279
class

00:32:02,720 --> 00:32:06,480
it allows you to parse error messages in

00:32:05,279 --> 00:32:09,440
lots of different ways

00:32:06,480 --> 00:32:09,760
um these are the most common use cases

00:32:09,440 --> 00:32:13,200
but

00:32:09,760 --> 00:32:15,039
there's a lot there to do with it

00:32:13,200 --> 00:32:16,559
and obviously i'm always willing to take

00:32:15,039 --> 00:32:19,039
feedback and

00:32:16,559 --> 00:32:19,039
patches

00:32:20,399 --> 00:32:24,880
so because i don't have like hours and

00:32:23,120 --> 00:32:27,039
hours a couple things i'm that we just

00:32:24,880 --> 00:32:29,120
didn't cover but are out there

00:32:27,039 --> 00:32:30,720
and you can look them up in the valiant

00:32:29,120 --> 00:32:34,320
documentation

00:32:30,720 --> 00:32:37,679
you can do nested nested uh

00:32:34,320 --> 00:32:39,279
data as well as arrays this is

00:32:37,679 --> 00:32:41,279
his ability to do internationalization

00:32:39,279 --> 00:32:44,559
and of course i mentioned filtering

00:32:41,279 --> 00:32:46,399
um it's a little off topic from this

00:32:44,559 --> 00:32:47,840
but all those features are there and i'm

00:32:46,399 --> 00:32:50,480
kind of covering nested a bit

00:32:47,840 --> 00:32:53,519
when we look at the debug x client stuff

00:32:50,480 --> 00:32:56,720
uh but i'm not going to cover here

00:32:53,519 --> 00:32:59,679
but it's there undocumented

00:32:56,720 --> 00:33:00,799
and of course if you're using dbs class

00:32:59,679 --> 00:33:03,039
and get into trouble

00:33:00,799 --> 00:33:05,039
you can set the environment variable

00:33:03,039 --> 00:33:07,039
value debug with a number

00:33:05,039 --> 00:33:09,679
number from one to four a higher the

00:33:07,039 --> 00:33:12,320
number gives you more debugging output

00:33:09,679 --> 00:33:14,240
and it gives you a lot of out debugging

00:33:12,320 --> 00:33:15,760
as to exactly what it's doing

00:33:14,240 --> 00:33:17,440
so if you're having trouble figuring out

00:33:15,760 --> 00:33:18,960
why validation isn't running the way you

00:33:17,440 --> 00:33:21,440
expect it

00:33:18,960 --> 00:33:24,159
setting value debug can usually help you

00:33:21,440 --> 00:33:27,279
figure it out

00:33:24,159 --> 00:33:28,480
okay so uh see what time is it all right

00:33:27,279 --> 00:33:31,360
we're not doing too bad

00:33:28,480 --> 00:33:32,559
so we can uh talk about gluing valiant

00:33:31,360 --> 00:33:34,000
to d by x class

00:33:32,559 --> 00:33:36,159
this was like actually the main reason

00:33:34,000 --> 00:33:38,960
why value was written uh

00:33:36,159 --> 00:33:41,200
was to be able to have it here so a lot

00:33:38,960 --> 00:33:43,360
of work just to get to this point

00:33:41,200 --> 00:33:44,480
so we're going to do it i actually have

00:33:43,360 --> 00:33:47,600
a live demo

00:33:44,480 --> 00:33:50,960
for this and

00:33:47,600 --> 00:33:53,039
let me start this

00:33:50,960 --> 00:33:54,960
live demo the code for this is actually

00:33:53,039 --> 00:33:58,000
in the um

00:33:54,960 --> 00:34:00,799
dbax class i'm sorry it's actually in

00:33:58,000 --> 00:34:02,559
the valiant cpa module there's an

00:34:00,799 --> 00:34:05,679
example directory

00:34:02,559 --> 00:34:09,519
so let's see do

00:34:05,679 --> 00:34:09,519
share screen on the

00:34:09,599 --> 00:34:12,480
right thing here

00:34:16,000 --> 00:34:21,839
sorry give me a second

00:34:24,159 --> 00:34:26,879
oh here we go

00:34:28,159 --> 00:34:35,839
i guess i have to do this huh

00:34:37,280 --> 00:34:42,320
all right are you all seeing my uh

00:34:39,760 --> 00:34:45,839
browser and some code and stuff

00:34:42,320 --> 00:34:49,119
yes cool thank you okay so

00:34:45,839 --> 00:34:52,000
um does it look like in dbs class

00:34:49,119 --> 00:34:54,560
uh i've just built a very simple web

00:34:52,000 --> 00:34:54,560
application

00:34:54,879 --> 00:34:58,240
registration form is the kind of thing

00:34:56,720 --> 00:35:00,160
you might do

00:34:58,240 --> 00:35:01,440
all the time so let me just show you

00:35:00,160 --> 00:35:04,240
what it looks like when

00:35:01,440 --> 00:35:04,240
from the browser

00:35:12,560 --> 00:35:16,320
now i didn't i didn't actually make

00:35:14,880 --> 00:35:18,800
these password

00:35:16,320 --> 00:35:19,440
types so you can actually see the data

00:35:18,800 --> 00:35:22,320
so

00:35:19,440 --> 00:35:22,320
let me run it

00:35:22,880 --> 00:35:26,720
and you're getting some error messages

00:35:24,720 --> 00:35:30,320
so how does this all work

00:35:26,720 --> 00:35:33,440
uh let's first look at the uh

00:35:30,320 --> 00:35:35,440
the the dust class results act that

00:35:33,440 --> 00:35:37,680
register is backing

00:35:35,440 --> 00:35:38,560
okay so there's a clad there's a person

00:35:37,680 --> 00:35:41,760
class

00:35:38,560 --> 00:35:44,240
of which you're trying to register

00:35:41,760 --> 00:35:45,440
and the validations are set as class

00:35:44,240 --> 00:35:49,040
methods

00:35:45,440 --> 00:35:51,920
on the result result source class

00:35:49,040 --> 00:35:52,800
now this it also supports dba devices

00:35:51,920 --> 00:35:54,160
candy

00:35:52,800 --> 00:35:56,000
and we'll take a quick look at that if

00:35:54,160 --> 00:35:57,599
we get to the end of this uh

00:35:56,000 --> 00:35:59,920
which makes everything look a lot neater

00:35:57,599 --> 00:36:01,599
but i'm for the purposes of this example

00:35:59,920 --> 00:36:03,680
i'm sticking with the default syntax

00:36:01,599 --> 00:36:05,440
that you get out of the box with dbas

00:36:03,680 --> 00:36:08,160
class which i know it looks a lot like

00:36:05,440 --> 00:36:09,839
the late 90s but this is where we are

00:36:08,160 --> 00:36:11,839
with it

00:36:09,839 --> 00:36:14,880
so again you have i'm just simply

00:36:11,839 --> 00:36:18,240
defining a validates method

00:36:14,880 --> 00:36:18,880
and specifying uh is this big enough to

00:36:18,240 --> 00:36:22,160
a nickname

00:36:18,880 --> 00:36:22,160
make it bigger can you all see it

00:36:22,480 --> 00:36:29,599
go one notch bigger one that's bigger

00:36:26,320 --> 00:36:33,920
how's that thank you

00:36:29,599 --> 00:36:36,320
okay so again i have a valid method

00:36:33,920 --> 00:36:38,000
i'm validating the username i'm saying

00:36:36,320 --> 00:36:40,400
present it needs to be present it needs

00:36:38,000 --> 00:36:42,320
to be of a length between 3 and 24

00:36:40,400 --> 00:36:43,839
it needs to be alphanumeric these are

00:36:42,320 --> 00:36:47,520
all things that are built in

00:36:43,839 --> 00:36:49,520
uh come with valiant and uh unique

00:36:47,520 --> 00:36:51,520
uh this is actually built into the to

00:36:49,520 --> 00:36:53,920
the dbic glue

00:36:51,520 --> 00:36:54,800
and it's actually just like a dumb like

00:36:53,920 --> 00:36:56,079
look up

00:36:54,800 --> 00:36:57,440
it's actually the it's pretty much the

00:36:56,079 --> 00:36:58,240
dumbest possible thing it just does a

00:36:57,440 --> 00:37:00,320
select

00:36:58,240 --> 00:37:02,320
uh which means is it's not performant

00:37:00,320 --> 00:37:03,839
and you probably need to write your own

00:37:02,320 --> 00:37:05,760
unique lookup class if you're doing

00:37:03,839 --> 00:37:08,880
anything real but i just out of the box

00:37:05,760 --> 00:37:10,560
you get something that works

00:37:08,880 --> 00:37:12,320
and this is these are just additional

00:37:10,560 --> 00:37:16,240
validations one thing that's that we do

00:37:12,320 --> 00:37:20,079
is um remember i mentioned contexts

00:37:16,240 --> 00:37:22,800
uh the dbx class glue for valiants

00:37:20,079 --> 00:37:24,000
automatically sets an update or create

00:37:22,800 --> 00:37:25,680
contacts depending on whether you're

00:37:24,000 --> 00:37:28,079
creating or updating

00:37:25,680 --> 00:37:29,280
uh the row so you can use that in your

00:37:28,079 --> 00:37:32,320
code okay

00:37:29,280 --> 00:37:33,599
so in this case here um i'm doing a

00:37:32,320 --> 00:37:36,640
confirmation only on

00:37:33,599 --> 00:37:38,400
update an update only when the column is

00:37:36,640 --> 00:37:39,280
changed when i'm creating i'm always

00:37:38,400 --> 00:37:41,200
doing it

00:37:39,280 --> 00:37:42,320
because you need to have a password in

00:37:41,200 --> 00:37:47,760
order to create a

00:37:42,320 --> 00:37:47,760
user and this is just other validations

00:37:49,200 --> 00:37:55,440
the uh catalyst code for this is

00:37:52,480 --> 00:37:55,440
actually pretty simple

00:37:56,480 --> 00:37:59,440
this is the part about it that i like

00:37:58,000 --> 00:38:00,320
the most because i don't have to do a

00:37:59,440 --> 00:38:03,839
lot

00:38:00,320 --> 00:38:05,760
all i'm simply doing here is i know

00:38:03,839 --> 00:38:07,599
never do this i'm just doing this for

00:38:05,760 --> 00:38:09,520
demo but i'm passing the

00:38:07,599 --> 00:38:10,880
i'm just passing the raw parameters

00:38:09,520 --> 00:38:13,920
directly to new

00:38:10,880 --> 00:38:15,760
uh this is actually a security mistake

00:38:13,920 --> 00:38:17,680
uh you really should you really need to

00:38:15,760 --> 00:38:19,359
whitelist your incoming parameters

00:38:17,680 --> 00:38:21,200
but again i just want to make it simple

00:38:19,359 --> 00:38:23,280
for demo purposes but just

00:38:21,200 --> 00:38:25,520
so i should add a note here never do

00:38:23,280 --> 00:38:25,520
this

00:38:28,320 --> 00:38:34,720
um so that nobody copies it

00:38:31,599 --> 00:38:36,880
and the way this works is if you do when

00:38:34,720 --> 00:38:40,000
you do insert an update

00:38:36,880 --> 00:38:42,480
on a dbs class that is consuming

00:38:40,000 --> 00:38:43,920
valiant what it will do is it will run

00:38:42,480 --> 00:38:47,040
validation

00:38:43,920 --> 00:38:50,079
if the validation passes it goes ahead

00:38:47,040 --> 00:38:53,040
and does the insert or create

00:38:50,079 --> 00:38:54,079
if it fails it does not do the insert or

00:38:53,040 --> 00:38:58,079
create

00:38:54,079 --> 00:39:00,560
okay um but it does actually leave

00:38:58,079 --> 00:39:01,119
the model set up the way you you created

00:39:00,560 --> 00:39:02,880
it

00:39:01,119 --> 00:39:04,160
so that that way you can you can use it

00:39:02,880 --> 00:39:07,280
for display

00:39:04,160 --> 00:39:07,839
and here i'm simply saying uh i i should

00:39:07,280 --> 00:39:09,680
have said

00:39:07,839 --> 00:39:10,960
um if model probably wouldn't better to

00:39:09,680 --> 00:39:13,119
save model valid

00:39:10,960 --> 00:39:14,400
um i'm just checking if it's in storage

00:39:13,119 --> 00:39:15,760
because if it's in storage that means

00:39:14,400 --> 00:39:16,400
that it was created which means that it

00:39:15,760 --> 00:39:18,320
worked

00:39:16,400 --> 00:39:20,000
right so if it works i'm going to

00:39:18,320 --> 00:39:22,240
redirect to the login page

00:39:20,000 --> 00:39:24,320
if it doesn't work then i'm going to go

00:39:22,240 --> 00:39:26,720
to the register template

00:39:24,320 --> 00:39:27,359
my my template system here is just based

00:39:26,720 --> 00:39:29,119
on

00:39:27,359 --> 00:39:31,040
uh on the template systems you get with

00:39:29,119 --> 00:39:31,760
mojolicious because it's basically pure

00:39:31,040 --> 00:39:33,520
pearl

00:39:31,760 --> 00:39:35,040
um so i wanted to make it simple so the

00:39:33,520 --> 00:39:38,079
pro cookers would understand it

00:39:35,040 --> 00:39:41,520
but there's not a lot here either um

00:39:38,079 --> 00:39:42,240
i just have a i just have a uh a helper

00:39:41,520 --> 00:39:45,200
here

00:39:42,240 --> 00:39:46,800
that this just displays their messages

00:39:45,200 --> 00:39:50,079
different error messages

00:39:46,800 --> 00:39:52,160
so you only get here um if the cliff it

00:39:50,079 --> 00:39:54,640
fails right

00:39:52,160 --> 00:39:56,000
so there's actually not a ton of work

00:39:54,640 --> 00:39:56,960
that needs to be done it's a nice neat

00:39:56,000 --> 00:39:59,599
thin

00:39:56,960 --> 00:39:59,599
controller

00:40:00,079 --> 00:40:03,280
all right so let's make one that's good

00:40:02,160 --> 00:40:05,119
and then

00:40:03,280 --> 00:40:06,640
i still got a few minutes left let's

00:40:05,119 --> 00:40:07,920
look at something a little more fun and

00:40:06,640 --> 00:40:10,079
perhaps closer to the

00:40:07,920 --> 00:40:12,800
leading edge of the code so let me

00:40:10,079 --> 00:40:12,800
create something

00:40:13,119 --> 00:40:18,319
i think i'm up to jj at 15 15.

00:40:18,880 --> 00:40:26,160
and i didn't put any sort of complicated

00:40:23,599 --> 00:40:27,040
confirmation uh password logic here just

00:40:26,160 --> 00:40:28,640
to make it easy

00:40:27,040 --> 00:40:30,240
obviously you would not want to let

00:40:28,640 --> 00:40:32,480
somebody make a password that looks this

00:40:30,240 --> 00:40:32,480
dumb

00:40:34,720 --> 00:40:41,200
so we got to the logic because it

00:40:38,079 --> 00:40:42,640
validated i did an insert and then it it

00:40:41,200 --> 00:40:44,800
validated so it passed

00:40:42,640 --> 00:40:47,040
and now we're redirected to the login

00:40:44,800 --> 00:40:47,040
right

00:40:47,280 --> 00:40:53,839
so let's log on

00:40:55,599 --> 00:41:01,760
okay so you're logged in

00:40:58,640 --> 00:41:03,680
let's look at profile profile is and is

00:41:01,760 --> 00:41:06,960
a little more complicated

00:41:03,680 --> 00:41:08,480
so basically under the profile this

00:41:06,960 --> 00:41:10,000
allows this is going this is a

00:41:08,480 --> 00:41:13,040
demonstration of

00:41:10,000 --> 00:41:16,480
of using nested um stuff

00:41:13,040 --> 00:41:19,680
with dbs class and the valiant glue

00:41:16,480 --> 00:41:20,400
um so here let me just go back to the

00:41:19,680 --> 00:41:24,160
class

00:41:20,400 --> 00:41:28,400
to the result set so

00:41:24,160 --> 00:41:32,800
the person table has some related bits

00:41:28,400 --> 00:41:36,000
right it has an optional profile

00:41:32,800 --> 00:41:37,119
which is a zero to one uh

00:41:36,000 --> 00:41:39,440
you can have some credit cards

00:41:37,119 --> 00:41:42,560
associated with person one or more

00:41:39,440 --> 00:41:44,240
and they can have some roles okay

00:41:42,560 --> 00:41:45,760
they're associated with the person so

00:41:44,240 --> 00:41:48,800
there's uh

00:41:45,760 --> 00:41:51,440
a a basically an optional one to one

00:41:48,800 --> 00:41:53,359
has many and an additional has many with

00:41:51,440 --> 00:41:56,400
a bridge too many too many

00:41:53,359 --> 00:41:59,040
okay and just going back to here

00:41:56,400 --> 00:42:00,839
i'm going to set some validations i'm

00:41:59,040 --> 00:42:03,680
saying

00:42:00,839 --> 00:42:06,640
that the profile

00:42:03,680 --> 00:42:08,160
has a validation it's a result because

00:42:06,640 --> 00:42:11,200
it's a one-to-one

00:42:08,160 --> 00:42:12,319
um i'm going to allow blanks and i want

00:42:11,200 --> 00:42:14,000
to process

00:42:12,319 --> 00:42:16,000
my validations i'm going to process the

00:42:14,000 --> 00:42:21,200
validations nested so now we need

00:42:16,000 --> 00:42:21,200
to look at profile what is profile doing

00:42:29,200 --> 00:42:32,400
let's just quickly look at that so

00:42:31,280 --> 00:42:35,599
profile

00:42:32,400 --> 00:42:37,760
has a bunch of additional fields

00:42:35,599 --> 00:42:38,640
their address birthday et cetera et

00:42:37,760 --> 00:42:41,280
cetera

00:42:38,640 --> 00:42:41,680
and i've placed some validations on that

00:42:41,280 --> 00:42:43,599
right

00:42:41,680 --> 00:42:45,520
so in other words when we go into here

00:42:43,599 --> 00:42:48,400
we want to be able to do is

00:42:45,520 --> 00:42:50,319
as we when we add the data we want the

00:42:48,400 --> 00:42:53,760
validation to go

00:42:50,319 --> 00:42:58,400
down into this related class and

00:42:53,760 --> 00:43:00,960
gather all the errors and show them okay

00:42:58,400 --> 00:43:01,760
same thing goes with uh the roles and

00:43:00,960 --> 00:43:03,280
credit cards

00:43:01,760 --> 00:43:04,319
we'll look at that in a moment if we

00:43:03,280 --> 00:43:05,760
well we don't have a moment so we'll

00:43:04,319 --> 00:43:08,880
just look at it quick

00:43:05,760 --> 00:43:11,680
um so what happens if i just

00:43:08,880 --> 00:43:12,880
try to update the profile so just by the

00:43:11,680 --> 00:43:14,400
way this could explode

00:43:12,880 --> 00:43:15,760
uh because this is like working progress

00:43:14,400 --> 00:43:17,839
codes if it does you're gonna laugh at

00:43:15,760 --> 00:43:21,599
me

00:43:17,839 --> 00:43:21,599
anyway it

00:43:21,760 --> 00:43:26,079
took the incoming form uh and processed

00:43:24,960 --> 00:43:28,319
the validations

00:43:26,079 --> 00:43:29,680
through all the associated classes so it

00:43:28,319 --> 00:43:33,119
started in person

00:43:29,680 --> 00:43:35,920
okay found these pieces were valid

00:43:33,119 --> 00:43:38,839
and then went down into profile found a

00:43:35,920 --> 00:43:42,400
bunch of missing bits

00:43:38,839 --> 00:43:45,040
okay and gave you all these errors

00:43:42,400 --> 00:43:47,119
so let's go a little further let's add a

00:43:45,040 --> 00:43:50,880
credit card

00:43:47,119 --> 00:43:50,880
now i am just adding some blanks

00:43:53,200 --> 00:43:57,359
let's add some stuff here so that we're

00:43:54,720 --> 00:43:57,359
getting somewhere

00:44:00,640 --> 00:44:04,480
i'm not doing really any complicated uh

00:44:02,560 --> 00:44:09,440
validation on the credit card

00:44:04,480 --> 00:44:11,680
um just uh

00:44:09,440 --> 00:44:11,680
here

00:44:15,920 --> 00:44:23,680
again this was just done for demo so

00:44:17,839 --> 00:44:26,240
that's nothing super complicated

00:44:23,680 --> 00:44:28,640
and let's validate this and see how far

00:44:26,240 --> 00:44:28,640
we get

00:44:28,880 --> 00:44:33,599
well we got further it's telling us some

00:44:31,520 --> 00:44:35,280
more bits the profile is still invalid

00:44:33,599 --> 00:44:37,599
because the birthday doesn't look like a

00:44:35,280 --> 00:44:38,960
date uh now you could have put these i

00:44:37,599 --> 00:44:40,319
could have put these error messages next

00:44:38,960 --> 00:44:42,240
to the fields as well

00:44:40,319 --> 00:44:43,760
um it's just a little more work

00:44:42,240 --> 00:44:45,839
obviously i wanted to make this simple

00:44:43,760 --> 00:44:48,000
for demo purposes

00:44:45,839 --> 00:44:49,599
and it's telling me that one of my

00:44:48,000 --> 00:44:50,000
credit cards exploration must be in the

00:44:49,599 --> 00:44:52,319
future

00:44:50,000 --> 00:44:53,599
so this one here is year 2000 it needs

00:44:52,319 --> 00:44:55,200
to be in the future so let's put this in

00:44:53,599 --> 00:45:05,680
the future

00:44:55,200 --> 00:45:08,960
and let's add a birthday

00:45:05,680 --> 00:45:08,960
and so this one was created

00:45:09,200 --> 00:45:13,359
now uh you go ahead eight minutes until

00:45:12,240 --> 00:45:17,359
a hard stop

00:45:13,359 --> 00:45:20,640
if you want to think about q a or

00:45:17,359 --> 00:45:22,160
or closing oh yeah i only got

00:45:20,640 --> 00:45:24,000
two slides left anyway so let's face it

00:45:22,160 --> 00:45:26,640
thank you for giving me the heads up uh

00:45:24,000 --> 00:45:28,640
so just to go into a little detail here

00:45:26,640 --> 00:45:30,160
the nested support i still think is a

00:45:28,640 --> 00:45:32,640
little bit better

00:45:30,160 --> 00:45:33,440
because it works with both create and

00:45:32,640 --> 00:45:35,440
update

00:45:33,440 --> 00:45:37,599
uh but it probably could use some more

00:45:35,440 --> 00:45:39,359
examples of of things like

00:45:37,599 --> 00:45:41,119
you can generate an error let's say i

00:45:39,359 --> 00:45:43,680
try to remove the roles

00:45:41,119 --> 00:45:46,240
you have to have at least one role uh

00:45:43,680 --> 00:45:49,359
and all this all this stuff is defined

00:45:46,240 --> 00:45:53,520
specifically within uh

00:45:49,359 --> 00:45:56,800
the validations uh that you specify

00:45:53,520 --> 00:45:56,800
as declarations

00:45:58,319 --> 00:46:02,000
so i'm just gonna leave it at that i

00:46:00,240 --> 00:46:04,720
guess we'll move on real quick

00:46:02,000 --> 00:46:06,160
um i would love for people to play with

00:46:04,720 --> 00:46:06,720
this particularly the nested stuff

00:46:06,160 --> 00:46:09,200
because

00:46:06,720 --> 00:46:11,200
uh the more error reports i get the more

00:46:09,200 --> 00:46:13,359
i can actually fix things

00:46:11,200 --> 00:46:16,800
let's stop this and go back to the

00:46:13,359 --> 00:46:16,800
presentation if i can do it

00:46:22,240 --> 00:46:28,400
i guess i've got to move this to the

00:46:23,760 --> 00:46:43,839
same right

00:46:28,400 --> 00:46:43,839
that's not what i wanted

00:46:47,359 --> 00:46:50,319
here's my cursor

00:46:54,880 --> 00:47:01,280
um am i sharing you see it

00:46:58,960 --> 00:47:01,280
okay

00:47:02,560 --> 00:47:06,079
so just a real quick there's a couple

00:47:04,240 --> 00:47:07,760
things before dbic

00:47:06,079 --> 00:47:09,839
can be considered version one i need

00:47:07,760 --> 00:47:12,240
more docs i need people to play with it

00:47:09,839 --> 00:47:12,240
please do

00:47:13,119 --> 00:47:18,880
um i did mention that uh

00:47:16,640 --> 00:47:20,160
you can you can declare your your

00:47:18,880 --> 00:47:21,839
validations as

00:47:20,160 --> 00:47:23,920
using the keywords like validates and

00:47:21,839 --> 00:47:27,040
validates with but

00:47:23,920 --> 00:47:29,920
you can also just add a validates

00:47:27,040 --> 00:47:32,960
option to your attributes some people

00:47:29,920 --> 00:47:34,400
might find this neater

00:47:32,960 --> 00:47:37,440
and you can do the same thing with the

00:47:34,400 --> 00:47:38,000
dbs class so you can put the validations

00:47:37,440 --> 00:47:41,040
as a

00:47:38,000 --> 00:47:41,920
as you can see here as a uh as as a

00:47:41,040 --> 00:47:44,319
field

00:47:41,920 --> 00:47:46,079
directly within your ad columns right so

00:47:44,319 --> 00:47:47,280
if you if you don't like the look of

00:47:46,079 --> 00:47:49,280
like all the extra

00:47:47,280 --> 00:47:50,480
like declarations if this looks neater

00:47:49,280 --> 00:47:53,920
to you then you can

00:47:50,480 --> 00:47:55,920
take this approach and lastly uh

00:47:53,920 --> 00:47:56,960
the dvs class also works with dbx class

00:47:55,920 --> 00:47:58,559
candy

00:47:56,960 --> 00:48:00,640
it's set up to work with that so you can

00:47:58,559 --> 00:48:03,839
use that as well

00:48:00,640 --> 00:48:03,839
you might find this more attractive

00:48:05,200 --> 00:48:08,319
so looks like i'm basically right on

00:48:07,680 --> 00:48:11,839
time

00:48:08,319 --> 00:48:13,280
uh if anybody loves this and uses it and

00:48:11,839 --> 00:48:15,839
makes money with it uh

00:48:13,280 --> 00:48:17,599
i would love for people to consider uh

00:48:15,839 --> 00:48:20,160
donating to their local shelter

00:48:17,599 --> 00:48:20,720
this module is uh dedicated to the

00:48:20,160 --> 00:48:24,880
memory of

00:48:20,720 --> 00:48:24,880
one of my dogs questions

00:48:32,400 --> 00:48:35,920
i can't see anybody so i can't call out

00:48:34,240 --> 00:48:39,119
anybody specifically

00:48:35,920 --> 00:48:42,720
um if nobody has any questions

00:48:39,119 --> 00:48:45,760
you can always catch up with me on um

00:48:42,720 --> 00:48:47,760
on irc uh you can hit me up on on

00:48:45,760 --> 00:48:49,599
catalyst or dbs class or any of the

00:48:47,760 --> 00:48:52,720
places there's no dedicated channel

00:48:49,599 --> 00:48:54,160
to valiant uh since it's working doesn't

00:48:52,720 --> 00:48:56,559
work it was sort of built to work with

00:48:54,160 --> 00:48:58,400
dbs class

00:48:56,559 --> 00:48:59,760
most of the people that are using it

00:48:58,400 --> 00:49:03,440
tend to hit me up there

00:48:59,760 --> 00:49:06,559
uh so feel free uh

00:49:03,440 --> 00:49:09,760
have you had have you had any uh

00:49:06,559 --> 00:49:12,160
situation where you have uh notable

00:49:09,760 --> 00:49:13,680
performance implications from the use of

00:49:12,160 --> 00:49:16,559
this framework

00:49:13,680 --> 00:49:18,480
i'm sorry performance implications yeah

00:49:16,559 --> 00:49:21,200
did it ever slow you down in a way that

00:49:18,480 --> 00:49:21,839
was annoying to you it hasn't hit me

00:49:21,200 --> 00:49:24,720
with that

00:49:21,839 --> 00:49:26,240
um but i'm going to be really clear the

00:49:24,720 --> 00:49:28,400
code here has not been

00:49:26,240 --> 00:49:30,400
performance optimized in any way my goal

00:49:28,400 --> 00:49:32,880
was to get it feature complete

00:49:30,400 --> 00:49:33,440
and working like stable hundred percent

00:49:32,880 --> 00:49:36,880
and then do

00:49:33,440 --> 00:49:39,599
optimizations afterwards gotcha so

00:49:36,880 --> 00:49:40,720
yeah but the more you do it does create

00:49:39,599 --> 00:49:44,640
a lot of objects

00:49:40,720 --> 00:49:46,000
um so there's that uh but

00:49:44,640 --> 00:49:47,680
you're gonna have to write validation

00:49:46,000 --> 00:49:49,200
logic anyway so

00:49:47,680 --> 00:49:50,800
whether or not whether it's slower or

00:49:49,200 --> 00:49:51,680
faster than others i i really can't

00:49:50,800 --> 00:49:53,040
comment

00:49:51,680 --> 00:49:54,720
that's also a good point i wasn't

00:49:53,040 --> 00:49:56,400
thinking about that thank you i

00:49:54,720 --> 00:49:58,240
mean yeah i mean if you can have logic

00:49:56,400 --> 00:49:59,920
it's gonna you know it's

00:49:58,240 --> 00:50:01,599
it's it's gonna be somewhere it's always

00:49:59,920 --> 00:50:03,520
gonna run i i find that a lot of the

00:50:01,599 --> 00:50:03,920
validations particularly for the complex

00:50:03,520 --> 00:50:06,640
stuff

00:50:03,920 --> 00:50:08,880
like to hit the database doing smart

00:50:06,640 --> 00:50:12,559
things like cash flow results

00:50:08,880 --> 00:50:13,680
um and preloading data does a lot like

00:50:12,559 --> 00:50:16,240
for example for the

00:50:13,680 --> 00:50:17,280
for the uniqueness check um instead of

00:50:16,240 --> 00:50:19,599
doing like a

00:50:17,280 --> 00:50:20,800
database lookup every single time which

00:50:19,599 --> 00:50:22,720
is like dumb

00:50:20,800 --> 00:50:23,839
um i mean that'll work with like low

00:50:22,720 --> 00:50:25,760
volume but you're gonna get to a point

00:50:23,839 --> 00:50:28,880
where that's gonna kill you right

00:50:25,760 --> 00:50:32,400
maybe like persisting uh your usernames

00:50:28,880 --> 00:50:34,880
into like a dedicated memcache store

00:50:32,400 --> 00:50:36,720
or and doing lookups there instead uh

00:50:34,880 --> 00:50:38,079
might be you know an optimization

00:50:36,720 --> 00:50:39,760
i think for that kind of thing the

00:50:38,079 --> 00:50:42,400
optimizations are going to be more

00:50:39,760 --> 00:50:42,400
complicated

00:50:43,359 --> 00:50:48,240
thank you bruce um anybody else got

00:50:45,839 --> 00:50:48,240
questions

00:50:49,200 --> 00:50:56,640
um i have a question cool

00:50:53,119 --> 00:51:00,240
so i wonder for moose does it use

00:50:56,640 --> 00:51:04,079
the attribute accessors the methods

00:51:00,240 --> 00:51:04,079
or does it use the internal hashref

00:51:06,079 --> 00:51:11,680
why did we get kicked hello

00:51:09,359 --> 00:51:13,440
hello i heard his question can you not

00:51:11,680 --> 00:51:16,480
hear his question

00:51:13,440 --> 00:51:18,400
i think part of it um uh so when i wrote

00:51:16,480 --> 00:51:20,640
this i wanted it to work with moo

00:51:18,400 --> 00:51:23,200
uh so it's not really using any of the

00:51:20,640 --> 00:51:25,520
cool meta stuff that's built into moose

00:51:23,200 --> 00:51:26,880
um that's it's just it was just a

00:51:25,520 --> 00:51:29,280
decision that i made

00:51:26,880 --> 00:51:30,079
um i wanted to be more broadly

00:51:29,280 --> 00:51:32,000
compatible

00:51:30,079 --> 00:51:34,400
i would certainly love it if pearl would

00:51:32,000 --> 00:51:36,319
have like objects built into it

00:51:34,400 --> 00:51:37,920
with like good meta framework so that i

00:51:36,319 --> 00:51:40,800
wouldn't have to do all these

00:51:37,920 --> 00:51:42,000
like crazy code things in order to write

00:51:40,800 --> 00:51:44,319
code that works

00:51:42,000 --> 00:51:45,359
across like a bunch of different object

00:51:44,319 --> 00:51:46,880
systems because we

00:51:45,359 --> 00:51:49,200
we as a community can't figure out what

00:51:46,880 --> 00:51:51,520
we want uh it's annoying

00:51:49,200 --> 00:51:53,280
but it's where we are did i answer the

00:51:51,520 --> 00:51:56,000
question properly

00:51:53,280 --> 00:51:57,200
uh the question was was a bit different

00:51:56,000 --> 00:52:01,040
i was asking

00:51:57,200 --> 00:52:04,800
about the implementation uh does it use

00:52:01,040 --> 00:52:07,119
a moose's um accessors

00:52:04,800 --> 00:52:07,920
the methods that are used to access the

00:52:07,119 --> 00:52:11,280
data

00:52:07,920 --> 00:52:14,240
or does it use the internal hashtag that

00:52:11,280 --> 00:52:14,800
most uses to store the data in yeah i

00:52:14,240 --> 00:52:18,000
mean

00:52:14,800 --> 00:52:19,760
it it it hits the accessor okay um

00:52:18,000 --> 00:52:21,119
actually there's even an abstraction

00:52:19,760 --> 00:52:24,640
layer around that

00:52:21,119 --> 00:52:27,440
there's a method called uh get attribute

00:52:24,640 --> 00:52:28,720
uh for validation uh and you can go look

00:52:27,440 --> 00:52:31,200
at the role

00:52:28,720 --> 00:52:31,760
that's that's that builds all this stuff

00:52:31,200 --> 00:52:33,680
um so

00:52:31,760 --> 00:52:35,839
you could actually override it but by

00:52:33,680 --> 00:52:38,640
default it just hits the method

00:52:35,839 --> 00:52:39,440
that gets generated um by the by the

00:52:38,640 --> 00:52:41,760
attribute

00:52:39,440 --> 00:52:42,559
so might there be some bugs here if

00:52:41,760 --> 00:52:44,400
you'd if you're

00:52:42,559 --> 00:52:46,559
doing like the attribute and then and

00:52:44,400 --> 00:52:47,359
then defining readers and writers and

00:52:46,559 --> 00:52:50,400
stuff

00:52:47,359 --> 00:52:51,839
uh it's possible yeah um if you run into

00:52:50,400 --> 00:52:52,480
bugs like that please submit bug

00:52:51,839 --> 00:52:56,559
requests

00:52:52,480 --> 00:52:59,200
and i will uh i will figure it out

00:52:56,559 --> 00:53:00,880
cool thanks thank you jane app thank you

00:52:59,200 --> 00:53:04,160
for presenting and that's

00:53:00,880 --> 00:53:06,160
all the time we have on this uh channel

00:53:04,160 --> 00:53:08,400
cool uh well thanks everybody for

00:53:06,160 --> 00:53:10,480
showing up uh another shout out to

00:53:08,400 --> 00:53:12,720
anybody who's watching on youtube

00:53:10,480 --> 00:53:14,079
um consider donating the pro please if

00:53:12,720 --> 00:53:16,160
you value this

00:53:14,079 --> 00:53:17,440
and uh again to anybody in the future

00:53:16,160 --> 00:53:18,880
watching this i hope

00:53:17,440 --> 00:53:21,119
you're not sitting in an apocalypse

00:53:18,880 --> 00:53:24,160
bunker somewhere or warm yourself

00:53:21,119 --> 00:53:26,400
uh by uh the glow of uh

00:53:24,160 --> 00:53:28,319
i don't know crap for something uh oh

00:53:26,400 --> 00:53:30,480
yeah i have to say that because

00:53:28,319 --> 00:53:32,000
in the last year we all know uh yeah

00:53:30,480 --> 00:53:36,000
this can happen

00:53:32,000 --> 00:53:36,000

YouTube URL: https://www.youtube.com/watch?v=ZY8HrAL755M


