Title: Exploring Text-Based Protocols - Joel Berger
Publication date: 2021-06-08
Playlist: TPC 2021 in the Cloud
Description: 
	In modern tech we interact with many high-level applications but many people don't know or haven't explored the low-level protocols that these systems use for communication. Graphite, Memcached, Redis, IRC, HTTP and others use human readable communication ... if you only know where to look. Learning how these protocols work, and indeed how our software uses, interacts with, and even generates these low-level communications can help you better write better software and have a deeper understanding of how it works. In this talk I will introduce these and perhaps other protocols, show how to interact with them, and even build rudimentary clients for some.
Captions: 
	00:00:00,719 --> 00:00:03,360
hello

00:00:05,440 --> 00:00:12,799
so some early mentions here

00:00:09,120 --> 00:00:14,880
uh um there are some

00:00:12,799 --> 00:00:16,320
potentially interactive elements so if

00:00:14,880 --> 00:00:20,240
people want to have a

00:00:16,320 --> 00:00:22,480
terminal up and ready to tinker you're

00:00:20,240 --> 00:00:23,279
certainly encouraged to do that i'll

00:00:22,480 --> 00:00:25,760
mention it again

00:00:23,279 --> 00:00:26,880
later but for people who want to have a

00:00:25,760 --> 00:00:30,240
moment to

00:00:26,880 --> 00:00:31,119
set things up that's fine i am known for

00:00:30,240 --> 00:00:33,840
my

00:00:31,119 --> 00:00:35,440
example heavy talk and today is no

00:00:33,840 --> 00:00:38,559
exception

00:00:35,440 --> 00:00:40,239
um uh

00:00:38,559 --> 00:00:41,840
in the minute before we get started i

00:00:40,239 --> 00:00:44,719
also want to mention that

00:00:41,840 --> 00:00:45,840
i added a birds of a feather for

00:00:44,719 --> 00:00:49,120
mojalicious

00:00:45,840 --> 00:00:50,800
and um very excited about doing it

00:00:49,120 --> 00:00:53,199
uh and this will be sort of right

00:00:50,800 --> 00:00:56,640
afterwards here

00:00:53,199 --> 00:00:59,079
because we have a lot to talk about with

00:00:56,640 --> 00:01:00,800
maybe you haven't heard we've got this

00:00:59,079 --> 00:01:03,920
mojo.js we're doing the

00:01:00,800 --> 00:01:04,879
word of mojolicious to javascript so if

00:01:03,920 --> 00:01:06,720
people want to

00:01:04,879 --> 00:01:08,240
talk about that talk about regular mojo

00:01:06,720 --> 00:01:10,560
we're going to do above basically right

00:01:08,240 --> 00:01:12,720
after this

00:01:10,560 --> 00:01:14,080
i unfortunately i'm not going to be here

00:01:12,720 --> 00:01:17,200
tomorrow for sure

00:01:14,080 --> 00:01:18,960
and i might be able to get on

00:01:17,200 --> 00:01:20,720
on thursday but it might not i don't

00:01:18,960 --> 00:01:22,720
really know um

00:01:20,720 --> 00:01:23,759
this conference kind of lined up with

00:01:22,720 --> 00:01:28,080
the only time we could do

00:01:23,759 --> 00:01:31,119
a family vacation so um

00:01:28,080 --> 00:01:32,000
yeah uh i guess we're up to time just

00:01:31,119 --> 00:01:34,079
let me try not to

00:01:32,000 --> 00:01:35,040
go down with this thing yeah yep that's

00:01:34,079 --> 00:01:40,640
exactly right so

00:01:35,040 --> 00:01:42,479
go for it um because there is gonna be

00:01:40,640 --> 00:01:44,079
some interaction i'm gonna try to keep

00:01:42,479 --> 00:01:47,439
my eye on the chat but

00:01:44,079 --> 00:01:50,159
it you know you know how this goes

00:01:47,439 --> 00:01:51,840
um i did give this talk once already to

00:01:50,159 --> 00:01:54,240
um some co-workers

00:01:51,840 --> 00:01:57,439
the talk went spectacularly longer than

00:01:54,240 --> 00:02:00,079
i planned so i cut a bunch of stuff

00:01:57,439 --> 00:02:00,719
and hopefully i'll finish in time but

00:02:00,079 --> 00:02:02,320
you know it's

00:02:00,719 --> 00:02:06,079
a lot of examples so we can always just

00:02:02,320 --> 00:02:06,079
sort of truncate and move on

00:02:06,719 --> 00:02:09,840
anyway i guess i'm going to get started

00:02:08,319 --> 00:02:12,879
uh

00:02:09,840 --> 00:02:14,560
so hi i'm joel berger uh i am

00:02:12,879 --> 00:02:15,520
a member of the mojolicious core team

00:02:14,560 --> 00:02:16,000
but we're not really going to talk about

00:02:15,520 --> 00:02:19,040
mojo

00:02:16,000 --> 00:02:20,319
at all today um uh in fact we're not

00:02:19,040 --> 00:02:21,840
really going to do any pearl today

00:02:20,319 --> 00:02:23,360
there's one tiny little pearl script

00:02:21,840 --> 00:02:24,400
you're gonna see but that's not the

00:02:23,360 --> 00:02:27,040
point

00:02:24,400 --> 00:02:30,080
um someone else can't hear a thing did

00:02:27,040 --> 00:02:30,080
you join with your audio

00:02:32,959 --> 00:02:37,840
you wouldn't hear me saying it

00:02:40,879 --> 00:02:44,800
all right uh let you guys help that

00:02:43,920 --> 00:02:48,160
person out

00:02:44,800 --> 00:02:49,599
um anyway there isn't actually a whole

00:02:48,160 --> 00:02:51,440
lot of code involved in this this is

00:02:49,599 --> 00:02:53,280
lower level than code which is kind of

00:02:51,440 --> 00:02:57,200
fun

00:02:53,280 --> 00:02:59,360
and uh if you want to follow along and i

00:02:57,200 --> 00:03:02,480
encourage you to do so

00:02:59,360 --> 00:03:03,360
the presentation that i am using right

00:03:02,480 --> 00:03:06,640
now is

00:03:03,360 --> 00:03:08,159
sourced at jburger.github.io

00:03:06,640 --> 00:03:10,000
slash text-based protocols it's

00:03:08,159 --> 00:03:12,879
literally what i'm showing right now

00:03:10,000 --> 00:03:14,879
and the materials are at the related

00:03:12,879 --> 00:03:18,480
github

00:03:14,879 --> 00:03:19,120
there are some some files you may find

00:03:18,480 --> 00:03:22,319
handy

00:03:19,120 --> 00:03:25,200
uh if you are interested in coming back

00:03:22,319 --> 00:03:28,799
and looking at things later

00:03:25,200 --> 00:03:30,879
so on with the talk so we use really

00:03:28,799 --> 00:03:33,920
high level abstractions

00:03:30,879 --> 00:03:35,360
both as users and as developers uh we're

00:03:33,920 --> 00:03:37,360
really used to them we're really

00:03:35,360 --> 00:03:40,080
good at sort of ignoring what the lower

00:03:37,360 --> 00:03:41,599
level layers of these things are because

00:03:40,080 --> 00:03:43,840
there's plenty to be done at the higher

00:03:41,599 --> 00:03:46,480
level

00:03:43,840 --> 00:03:47,519
some of these examples chat clients are

00:03:46,480 --> 00:03:50,720
a great example

00:03:47,519 --> 00:03:52,159
uh chat clients are gooeys they they

00:03:50,720 --> 00:03:54,879
have all kinds of

00:03:52,159 --> 00:03:56,560
uh high level nicety of you know if

00:03:54,879 --> 00:03:59,200
you're using irc it's

00:03:56,560 --> 00:04:00,400
pretty spartan but you know slack or

00:03:59,200 --> 00:04:02,640
things have

00:04:00,400 --> 00:04:04,159
uh editing features and gifs and all

00:04:02,640 --> 00:04:05,920
that other stuff and they

00:04:04,159 --> 00:04:07,599
they they show it to you in nice pretty

00:04:05,920 --> 00:04:09,599
dewy but there's a protocol behind there

00:04:07,599 --> 00:04:12,319
especially for irc i think slack hasn't

00:04:09,599 --> 00:04:15,120
i'm not sure how exposed it is uh

00:04:12,319 --> 00:04:17,040
browsers browsers hide you the html and

00:04:15,120 --> 00:04:18,959
the http so the transport and the

00:04:17,040 --> 00:04:21,680
content are both

00:04:18,959 --> 00:04:23,280
more or less in the browser caching

00:04:21,680 --> 00:04:25,680
layers are really interesting

00:04:23,280 --> 00:04:26,960
uh example because caching layers are

00:04:25,680 --> 00:04:30,160
often abstracted

00:04:26,960 --> 00:04:33,280
at the web framework level at a cache

00:04:30,160 --> 00:04:35,919
extraction library level so in um

00:04:33,280 --> 00:04:38,240
pearl we have uh i think several there

00:04:35,919 --> 00:04:42,000
are cache any there's also um

00:04:38,240 --> 00:04:43,680
oh what was the name of that thing uh

00:04:42,000 --> 00:04:45,440
there's a cache abstraction like

00:04:43,680 --> 00:04:49,360
suddenly blank on the name

00:04:45,440 --> 00:04:51,759
um and uh and then you're even

00:04:49,360 --> 00:04:53,840
cash engine language findings so like

00:04:51,759 --> 00:04:54,880
there's a memcache binding for pearl and

00:04:53,840 --> 00:04:57,120
there's a redis

00:04:54,880 --> 00:04:58,000
finding for pearl and things like that

00:04:57,120 --> 00:04:59,919
so you've got

00:04:58,000 --> 00:05:01,440
often several layers of attraction

00:04:59,919 --> 00:05:03,759
between you and

00:05:01,440 --> 00:05:05,600
caching library are caching layers but

00:05:03,759 --> 00:05:08,639
most caches actually

00:05:05,600 --> 00:05:11,120
have a low level protocol too

00:05:08,639 --> 00:05:12,320
and many of these as i sort of alluded

00:05:11,120 --> 00:05:13,919
to there a second ago

00:05:12,320 --> 00:05:16,560
many of these protocols are actually

00:05:13,919 --> 00:05:19,600
human readable ish

00:05:16,560 --> 00:05:22,080
for some values of human readable and

00:05:19,600 --> 00:05:23,120
they use simple transmission mechanisms

00:05:22,080 --> 00:05:25,360
like tcp

00:05:23,120 --> 00:05:26,639
they might also use udp but today we're

00:05:25,360 --> 00:05:29,680
going to focus on

00:05:26,639 --> 00:05:31,199
tcp and

00:05:29,680 --> 00:05:33,360
for many of these it is useful to know

00:05:31,199 --> 00:05:36,320
how these abstractions

00:05:33,360 --> 00:05:37,759
work by looking at their lower level

00:05:36,320 --> 00:05:40,320
protocols can help you understand

00:05:37,759 --> 00:05:41,120
how the abstractions are working or why

00:05:40,320 --> 00:05:42,720
they are

00:05:41,120 --> 00:05:43,840
working the way they are why things are

00:05:42,720 --> 00:05:45,039
structured the way they are when you

00:05:43,840 --> 00:05:47,840
know how the protocols

00:05:45,039 --> 00:05:47,840
themselves work

00:05:48,400 --> 00:05:52,639
i skimmed over a thing just there tcp

00:05:51,520 --> 00:05:55,120
what is tcp

00:05:52,639 --> 00:05:56,240
well tcp is the transmission control

00:05:55,120 --> 00:05:59,360
protocol

00:05:56,240 --> 00:06:00,880
and what people will probably recognize

00:05:59,360 --> 00:06:02,319
uh if you've heard of that at all it's

00:06:00,880 --> 00:06:04,319
really the backbone of all of our

00:06:02,319 --> 00:06:04,840
network communications we use it all the

00:06:04,319 --> 00:06:07,840
time

00:06:04,840 --> 00:06:09,600
basically with some exceptions for udp

00:06:07,840 --> 00:06:11,120
it really runs just about everything we

00:06:09,600 --> 00:06:13,360
do over the internet

00:06:11,120 --> 00:06:15,280
um a nice thing about tcp is the

00:06:13,360 --> 00:06:17,759
messages that you send over tcp

00:06:15,280 --> 00:06:18,960
are ordered meaning if you send a and

00:06:17,759 --> 00:06:22,080
then send b

00:06:18,960 --> 00:06:25,919
a will arrive before b arrives um

00:06:22,080 --> 00:06:27,600
the messages are reliable meaning uh

00:06:25,919 --> 00:06:29,280
that they will be sent and they will be

00:06:27,600 --> 00:06:32,479
received

00:06:29,280 --> 00:06:34,400
and if they are not received um there is

00:06:32,479 --> 00:06:35,759
error checking and

00:06:34,400 --> 00:06:37,840
the error checking will either try to

00:06:35,759 --> 00:06:39,520
retry it or if it can't retry

00:06:37,840 --> 00:06:41,759
you know once it gets through enough

00:06:39,520 --> 00:06:43,199
layers of its of its own abstraction

00:06:41,759 --> 00:06:44,800
it will throw an error and close the

00:06:43,199 --> 00:06:46,160
connection so you

00:06:44,800 --> 00:06:47,440
you can be sure that messages are

00:06:46,160 --> 00:06:48,400
getting through if you don't get an

00:06:47,440 --> 00:06:51,440
error

00:06:48,400 --> 00:06:52,960
and tcp is bi-directional in a console

00:06:51,440 --> 00:06:54,400
you're used to things being almost sort

00:06:52,960 --> 00:06:55,759
of tri-directional where you have an

00:06:54,400 --> 00:06:56,960
input but you have multiple output

00:06:55,759 --> 00:06:59,360
streams these are just

00:06:56,960 --> 00:07:02,479
bi-directional you send content you

00:06:59,360 --> 00:07:06,479
receive content

00:07:02,479 --> 00:07:10,000
importantly tcp is streams it is not

00:07:06,479 --> 00:07:13,199
framed so all you can do is send bytes

00:07:10,000 --> 00:07:15,680
and receive bytes and uh

00:07:13,199 --> 00:07:17,520
when you send those bytes when you when

00:07:15,680 --> 00:07:19,440
you're reading bytes i'm sorry

00:07:17,520 --> 00:07:21,199
those messages may or may not be

00:07:19,440 --> 00:07:21,840
complete there might still be more

00:07:21,199 --> 00:07:23,440
coming

00:07:21,840 --> 00:07:25,039
you know that it's ordered and you know

00:07:23,440 --> 00:07:26,240
that it's reliable but you may not know

00:07:25,039 --> 00:07:28,000
for sure that

00:07:26,240 --> 00:07:29,520
you have received everything for a

00:07:28,000 --> 00:07:30,560
particular message that you're curious

00:07:29,520 --> 00:07:32,160
about

00:07:30,560 --> 00:07:34,479
and we'll see how that gets dealt with

00:07:32,160 --> 00:07:36,240
that's that becomes a major point of

00:07:34,479 --> 00:07:37,520
what is going to be discussed in this

00:07:36,240 --> 00:07:40,160
talk

00:07:37,520 --> 00:07:41,440
um one thing to note websocket even

00:07:40,160 --> 00:07:42,880
though it's got the name socket and

00:07:41,440 --> 00:07:45,440
socket the sort of related

00:07:42,880 --> 00:07:46,319
concept to this websockets are framed so

00:07:45,440 --> 00:07:48,960
if you're ever

00:07:46,319 --> 00:07:50,160
you know writing a protocol over

00:07:48,960 --> 00:07:52,720
websockets

00:07:50,160 --> 00:07:54,000
you actually send messages and the

00:07:52,720 --> 00:07:55,840
websocket itself

00:07:54,000 --> 00:07:57,680
will assure you that the entire message

00:07:55,840 --> 00:08:00,080
that was sent is received

00:07:57,680 --> 00:08:00,879
and the message is emitted at that same

00:08:00,080 --> 00:08:02,080
time

00:08:00,879 --> 00:08:04,080
that's not important for the rest of the

00:08:02,080 --> 00:08:05,360
talk but i just want to put that there

00:08:04,080 --> 00:08:06,879
because

00:08:05,360 --> 00:08:09,360
for example more delicious will care

00:08:06,879 --> 00:08:09,360
quite a bit

00:08:10,160 --> 00:08:12,879
so how do we know when the message is

00:08:11,759 --> 00:08:13,840
complete well there are several

00:08:12,879 --> 00:08:15,919
mechanisms

00:08:13,840 --> 00:08:17,840
by which you can know that you could

00:08:15,919 --> 00:08:18,479
define your protocol and it's up to the

00:08:17,840 --> 00:08:21,280
protocol

00:08:18,479 --> 00:08:22,400
to define when the messages are complete

00:08:21,280 --> 00:08:24,080
uh

00:08:22,400 --> 00:08:25,919
your protocol might define that a

00:08:24,080 --> 00:08:27,759
message is complete when the connection

00:08:25,919 --> 00:08:29,360
is closed you could just say i'm sending

00:08:27,759 --> 00:08:30,879
you bytes until i'm done and then i'm

00:08:29,360 --> 00:08:32,800
closing the connection

00:08:30,879 --> 00:08:34,800
the problem with that is that it's

00:08:32,800 --> 00:08:38,240
expensive making these tcp

00:08:34,800 --> 00:08:39,919
uh streams is not cheap from a resource

00:08:38,240 --> 00:08:41,839
level

00:08:39,919 --> 00:08:43,039
and doing that too much would really

00:08:41,839 --> 00:08:45,360
slow you down

00:08:43,039 --> 00:08:46,240
so while you can do that in practice not

00:08:45,360 --> 00:08:49,600
many

00:08:46,240 --> 00:08:51,519
protocols do anymore

00:08:49,600 --> 00:08:52,640
you might know that the message is

00:08:51,519 --> 00:08:55,200
complete because you

00:08:52,640 --> 00:08:55,680
reach a known boundary usually a new

00:08:55,200 --> 00:08:57,920
line

00:08:55,680 --> 00:08:58,720
so there are things called line based

00:08:57,920 --> 00:09:01,760
protocols

00:08:58,720 --> 00:09:04,080
end at a new line and

00:09:01,760 --> 00:09:04,959
uh you know whatever kind of message you

00:09:04,080 --> 00:09:08,560
send

00:09:04,959 --> 00:09:09,760
might and have any sort of payload it

00:09:08,560 --> 00:09:12,320
might want except

00:09:09,760 --> 00:09:13,600
can't have a new line in it because that

00:09:12,320 --> 00:09:15,920
new line symbolizes

00:09:13,600 --> 00:09:17,040
the end of a message well okay so how do

00:09:15,920 --> 00:09:19,120
i send a message

00:09:17,040 --> 00:09:22,959
with a new line in it that's when you

00:09:19,120 --> 00:09:25,040
start getting into some complexity there

00:09:22,959 --> 00:09:26,320
there's another way to do it is to say

00:09:25,040 --> 00:09:29,519
i'm going to send you

00:09:26,320 --> 00:09:30,080
x number of bytes and then the client

00:09:29,519 --> 00:09:32,640
knows

00:09:30,080 --> 00:09:33,360
then to receive that number of bytes you

00:09:32,640 --> 00:09:35,600
have to

00:09:33,360 --> 00:09:37,120
figure out how do i know how how many

00:09:35,600 --> 00:09:37,600
bytes i'm going to send that has to be

00:09:37,120 --> 00:09:40,080
part of

00:09:37,600 --> 00:09:42,800
protocol and because of that you

00:09:40,080 --> 00:09:45,839
sometimes get a combination of these

00:09:42,800 --> 00:09:47,760
where you have some amount of a new line

00:09:45,839 --> 00:09:50,880
based

00:09:47,760 --> 00:09:54,160
start and then a boundary a

00:09:50,880 --> 00:09:55,519
number of bytes based um body and you'll

00:09:54,160 --> 00:09:57,279
see some of those things come up and if

00:09:55,519 --> 00:10:00,160
these start sounding familiar it's

00:09:57,279 --> 00:10:00,160
it's because they are

00:10:00,399 --> 00:10:04,480
a quick note about new lines so now

00:10:02,640 --> 00:10:07,440
we're really into the weeds

00:10:04,480 --> 00:10:09,920
some protocols require a slash n

00:10:07,440 --> 00:10:12,720
otherwise called a line feed

00:10:09,920 --> 00:10:14,640
others require the slash r slash and

00:10:12,720 --> 00:10:16,800
carriage return line feed

00:10:14,640 --> 00:10:18,079
the historical reasons for this are not

00:10:16,800 --> 00:10:20,959
interesting or maybe they are but

00:10:18,079 --> 00:10:22,399
they're beyond the scope of this

00:10:20,959 --> 00:10:24,480
what is important to know is that some

00:10:22,399 --> 00:10:25,600
protocols or servers or clients or

00:10:24,480 --> 00:10:27,279
whatever

00:10:25,600 --> 00:10:28,640
are more tolerant of the wrong ending

00:10:27,279 --> 00:10:31,519
than others so

00:10:28,640 --> 00:10:33,200
it's important that you at least know

00:10:31,519 --> 00:10:36,079
which ones care

00:10:33,200 --> 00:10:37,680
and which ones are gonna really complain

00:10:36,079 --> 00:10:40,240
that you did it wrong

00:10:37,680 --> 00:10:41,519
if you do have to send a literal

00:10:40,240 --> 00:10:44,560
carriage return

00:10:41,519 --> 00:10:45,519
slash r you can check how to send it in

00:10:44,560 --> 00:10:49,360
your terminal

00:10:45,519 --> 00:10:51,839
by running uh s t t y space dash a

00:10:49,360 --> 00:10:52,800
um i'm assuming in unixy world if you're

00:10:51,839 --> 00:10:55,279
in windows

00:10:52,800 --> 00:10:57,120
i really don't know how to help you uh

00:10:55,279 --> 00:10:59,440
in fact you probably do send

00:10:57,120 --> 00:11:00,640
rn's uh character trendline feeds

00:10:59,440 --> 00:11:02,880
already i

00:11:00,640 --> 00:11:04,399
who knows i'm not even gonna speculate

00:11:02,880 --> 00:11:07,680
uh when you run that command

00:11:04,399 --> 00:11:10,959
if you look for the l next value uh

00:11:07,680 --> 00:11:14,640
it will tell you how to send a carrot a

00:11:10,959 --> 00:11:19,120
carriage return

00:11:14,640 --> 00:11:19,120
paul's paul's trolling me over there um

00:11:22,000 --> 00:11:25,920
it is uh it's a control v for me and i

00:11:24,720 --> 00:11:28,320
meant to add a

00:11:25,920 --> 00:11:29,040
line here but oftentimes once you hit

00:11:28,320 --> 00:11:30,720
control v

00:11:29,040 --> 00:11:32,560
you have to hit enter and the thing you

00:11:30,720 --> 00:11:36,240
will see in your console

00:11:32,560 --> 00:11:38,399
is a control m i don't quite understand

00:11:36,240 --> 00:11:42,240
that i'm sure someone here knows why it

00:11:38,399 --> 00:11:43,600
shows it like that but hopefully you

00:11:42,240 --> 00:11:44,880
don't have to deal with that too much

00:11:43,600 --> 00:11:45,600
i'm going to show you other ways to deal

00:11:44,880 --> 00:11:48,880
with this

00:11:45,600 --> 00:11:50,240
when possible so

00:11:48,880 --> 00:11:51,920
all right we've talked a lot about some

00:11:50,240 --> 00:11:53,279
of the theory here

00:11:51,920 --> 00:11:54,480
how are we going to actually start

00:11:53,279 --> 00:11:56,079
getting our feet wet and playing with

00:11:54,480 --> 00:11:59,600
these things well we need a tcp

00:11:56,079 --> 00:12:01,519
client you've probably all heard of

00:11:59,600 --> 00:12:04,959
telnet

00:12:01,519 --> 00:12:07,120
telnet is the venerable tcp client

00:12:04,959 --> 00:12:08,720
it is kind of meant to do a few other

00:12:07,120 --> 00:12:10,560
things that aren't just this

00:12:08,720 --> 00:12:12,560
and because of that it can be a bit of a

00:12:10,560 --> 00:12:14,560
nuisance um in fact

00:12:12,560 --> 00:12:16,320
i would argue it is harder to exit

00:12:14,560 --> 00:12:19,760
telnet than it is to exit vim and i'm a

00:12:16,320 --> 00:12:19,760
vin user so i can say that

00:12:21,600 --> 00:12:24,480
it's not even always installed anymore a

00:12:23,200 --> 00:12:26,079
lot of people used to have the argument

00:12:24,480 --> 00:12:28,800
well at least tell them it's here

00:12:26,079 --> 00:12:30,480
well it's not even always true anymore

00:12:28,800 --> 00:12:33,200
um

00:12:30,480 --> 00:12:34,240
so one nice thing about talmud though is

00:12:33,200 --> 00:12:37,120
it will always send

00:12:34,240 --> 00:12:38,320
a carriage return line feed you probably

00:12:37,120 --> 00:12:39,839
can configure that somehow but the

00:12:38,320 --> 00:12:40,959
default is to send a carriage return

00:12:39,839 --> 00:12:43,920
line view

00:12:40,959 --> 00:12:45,440
you would invoke it by telnet space your

00:12:43,920 --> 00:12:47,440
the host you want to talk to

00:12:45,440 --> 00:12:49,200
space and then the port that you want to

00:12:47,440 --> 00:12:53,120
talk to

00:12:49,200 --> 00:12:53,120
please call from upper left down

00:12:58,079 --> 00:13:03,040
okay fine fair point those are

00:13:00,720 --> 00:13:06,800
backslashes

00:13:03,040 --> 00:13:09,920
um i'm probably gonna say rn

00:13:06,800 --> 00:13:11,279
in practice going forward um or carriage

00:13:09,920 --> 00:13:14,240
return lines because saying

00:13:11,279 --> 00:13:15,519
the whole thing has said is long anyway

00:13:14,240 --> 00:13:19,040
moving on

00:13:15,519 --> 00:13:22,000
netcat so um i would encourage you to

00:13:19,040 --> 00:13:24,880
use netcat when you can it's much easier

00:13:22,000 --> 00:13:26,399
it's a simple client uh it just defaults

00:13:24,880 --> 00:13:28,800
it just attaches to

00:13:26,399 --> 00:13:30,399
standard in and standard out which makes

00:13:28,800 --> 00:13:32,959
it really useful for pipes but you can

00:13:30,399 --> 00:13:36,000
do it as an interactive

00:13:32,959 --> 00:13:37,839
version of that too uh some versions

00:13:36,000 --> 00:13:40,880
allow

00:13:37,839 --> 00:13:42,720
little c or dash big c to send the

00:13:40,880 --> 00:13:46,240
carriage return line feed

00:13:42,720 --> 00:13:48,959
um and i would recommend that you

00:13:46,240 --> 00:13:50,320
look at the man page for your netcat

00:13:48,959 --> 00:13:53,199
implementation

00:13:50,320 --> 00:13:54,480
and see which is possible and use that

00:13:53,199 --> 00:13:56,399
because it will save you a lot of

00:13:54,480 --> 00:13:58,560
headache

00:13:56,399 --> 00:13:59,839
um also important to note because i'm

00:13:58,560 --> 00:14:03,040
going to show you here an example

00:13:59,839 --> 00:14:06,720
echo will end uh

00:14:03,040 --> 00:14:09,760
what you echo with a line feed with a

00:14:06,720 --> 00:14:12,320
backslash n and uh

00:14:09,760 --> 00:14:12,959
you can tell it not to by passing a dash

00:14:12,320 --> 00:14:16,240
n there

00:14:12,959 --> 00:14:17,680
it's it's a whole thing but

00:14:16,240 --> 00:14:19,519
assuming you're going to do it like this

00:14:17,680 --> 00:14:23,760
you probably want to

00:14:19,519 --> 00:14:27,040
use netcat fix up that

00:14:23,760 --> 00:14:28,240
line ending for you here's a particular

00:14:27,040 --> 00:14:29,680
example this is

00:14:28,240 --> 00:14:32,320
mencast and we're going to see some

00:14:29,680 --> 00:14:34,800
catch stuff later but this would let you

00:14:32,320 --> 00:14:36,000
send a command and get the output uh

00:14:34,800 --> 00:14:38,079
without ever really

00:14:36,000 --> 00:14:41,279
sort of seeing what's being done because

00:14:38,079 --> 00:14:41,279
you're typing both directions

00:14:41,360 --> 00:14:46,079
another handy client is socat um which

00:14:44,720 --> 00:14:48,800
is like vent cap but

00:14:46,079 --> 00:14:50,720
has more features this is especially

00:14:48,800 --> 00:14:54,000
useful if you want to do

00:14:50,720 --> 00:14:55,600
uh ssl because netcat can't do ssl that

00:14:54,000 --> 00:14:58,959
i'm aware of

00:14:55,600 --> 00:15:02,720
but socap can and uh

00:14:58,959 --> 00:15:03,760
the way you do options for socat are you

00:15:02,720 --> 00:15:07,360
attach them to

00:15:03,760 --> 00:15:12,160
the the parameter directions

00:15:07,360 --> 00:15:13,600
um and join those with commas so um

00:15:12,160 --> 00:15:15,600
uh the example i'm showing here at the

00:15:13,600 --> 00:15:20,000
bottom is socat dash

00:15:15,600 --> 00:15:23,440
uh so um from standard input

00:15:20,000 --> 00:15:27,839
and then talk to uh

00:15:23,440 --> 00:15:28,639
openssl duckduckgo.com colon443 so this

00:15:27,839 --> 00:15:31,759
is going to open

00:15:28,639 --> 00:15:35,360
an ssl tcp

00:15:31,759 --> 00:15:39,199
socket to to duckduckgo

00:15:35,360 --> 00:15:40,880
and if you needed to do that same sort

00:15:39,199 --> 00:15:42,560
of dash c behavior you want to

00:15:40,880 --> 00:15:44,320
automatically fix up carriage return

00:15:42,560 --> 00:15:47,680
line feeds you could do dash

00:15:44,320 --> 00:15:49,600
comma crlf and i actually will have an

00:15:47,680 --> 00:15:51,680
example of that later

00:15:49,600 --> 00:15:54,160
you can also turn off ssl verification

00:15:51,680 --> 00:15:55,440
if you need it for some reason

00:15:54,160 --> 00:15:57,519
my wife would like you to know that

00:15:55,440 --> 00:15:58,800
socat is tacos backwards

00:15:57,519 --> 00:16:01,440
and i would like you to know that my

00:15:58,800 --> 00:16:01,440
wife is awesome

00:16:02,240 --> 00:16:09,920
uh some other clients you can use

00:16:06,560 --> 00:16:13,839
openssl s client um

00:16:09,920 --> 00:16:17,120
it let's uh you talk uh ssl

00:16:13,839 --> 00:16:19,360
um you know it's a full tcp

00:16:17,120 --> 00:16:21,360
client i've actually never really used

00:16:19,360 --> 00:16:23,600
it for that i use that for testing the

00:16:21,360 --> 00:16:25,279
ssl connections are working you know why

00:16:23,600 --> 00:16:26,000
am i getting an ssl error or whatever

00:16:25,279 --> 00:16:28,320
but

00:16:26,000 --> 00:16:30,480
once you've seen all your ssl connection

00:16:28,320 --> 00:16:32,720
details what you're left with is a tcp

00:16:30,480 --> 00:16:35,839
client so you can use that if you want

00:16:32,720 --> 00:16:38,160
uh most languages have tcp clients both

00:16:35,839 --> 00:16:41,279
built into the

00:16:38,160 --> 00:16:44,880
the language or easily installable

00:16:41,279 --> 00:16:46,160
um and of course

00:16:44,880 --> 00:16:49,199
here at the pearl conference i'm going

00:16:46,160 --> 00:16:53,199
to say mojo iowa client is

00:16:49,199 --> 00:16:53,920
um isn't a thing that you can use and

00:16:53,199 --> 00:16:58,639
get a nice

00:16:53,920 --> 00:16:58,639
event-based interaction with tcp

00:16:58,800 --> 00:17:03,040
all right so uh let's see i've got

00:17:01,680 --> 00:17:05,360
plenty of time

00:17:03,040 --> 00:17:06,480
doing good here so we have some examples

00:17:05,360 --> 00:17:07,280
we're going to look at today we're going

00:17:06,480 --> 00:17:10,640
to play with

00:17:07,280 --> 00:17:13,839
uh graphite which is a metrics engine

00:17:10,640 --> 00:17:16,000
uh irc the chat client and

00:17:13,839 --> 00:17:18,240
numcash which is a caching layer and

00:17:16,000 --> 00:17:22,000
then http

00:17:18,240 --> 00:17:23,199
for irc uh i especially would love it if

00:17:22,000 --> 00:17:25,839
some people wanted to

00:17:23,199 --> 00:17:27,360
play along with me and and generate some

00:17:25,839 --> 00:17:28,400
traffic so that people can see what

00:17:27,360 --> 00:17:30,320
comes through

00:17:28,400 --> 00:17:32,240
um i can do it myself but it's more fun

00:17:30,320 --> 00:17:36,000
if people get involved

00:17:32,240 --> 00:17:38,000
and uh i had to cut redis

00:17:36,000 --> 00:17:39,280
for time that was the big cut that i did

00:17:38,000 --> 00:17:40,880
and i feel bad about it because i was

00:17:39,280 --> 00:17:42,880
really excited about it but

00:17:40,880 --> 00:17:44,320
um i encourage you to come back later

00:17:42,880 --> 00:17:45,440
and play with redis it's a really cool

00:17:44,320 --> 00:17:49,280
protocol

00:17:45,440 --> 00:17:50,480
and um and it's it's a little deeper

00:17:49,280 --> 00:17:51,280
protocol but it's definitely

00:17:50,480 --> 00:17:54,080
understandable

00:17:51,280 --> 00:17:55,200
and i like it a lot for playing around

00:17:54,080 --> 00:17:58,080
during the conference

00:17:55,200 --> 00:17:58,799
um i have all of those services except

00:17:58,080 --> 00:18:03,200
for redis

00:17:58,799 --> 00:18:05,679
live on my jburger.pl server

00:18:03,200 --> 00:18:06,960
and after the conference if you'd like

00:18:05,679 --> 00:18:10,240
to you can use docker

00:18:06,960 --> 00:18:13,520
i have a docker compose file in the

00:18:10,240 --> 00:18:14,000
materials for this talk and you can see

00:18:13,520 --> 00:18:17,440
that

00:18:14,000 --> 00:18:20,799
graphite runs on port 8080

00:18:17,440 --> 00:18:23,840
on my server um because opening a

00:18:20,799 --> 00:18:24,880
report that's uh that's less than 10

00:18:23,840 --> 00:18:28,080
00:18:24,880 --> 00:18:31,360
privileges uh

00:18:28,080 --> 00:18:35,440
i have an irc server that is running

00:18:31,360 --> 00:18:39,039
non-ssl on 667 and ssl on six six nine

00:18:35,440 --> 00:18:40,480
seven uh a memcache on port one one two

00:18:39,039 --> 00:18:43,919
one one

00:18:40,480 --> 00:18:44,640
and an http echo server so it's an http

00:18:43,919 --> 00:18:47,039
server

00:18:44,640 --> 00:18:48,799
whose job it is to echo back the things

00:18:47,039 --> 00:18:51,600
from the request

00:18:48,799 --> 00:18:53,200
um and that's running on port 8081. i as

00:18:51,600 --> 00:18:56,640
i said i don't have my redis

00:18:53,200 --> 00:18:57,280
running right now um but if you wanted

00:18:56,640 --> 00:19:00,799
to

00:18:57,280 --> 00:19:03,360
do docker compose up then you can

00:19:00,799 --> 00:19:03,360
do that too

00:19:04,799 --> 00:19:08,640
so the purpose of these examples is to

00:19:06,880 --> 00:19:10,160
show you different types of protocols

00:19:08,640 --> 00:19:12,720
get you comfortable with using the tools

00:19:10,160 --> 00:19:14,640
and the methods and to give you examples

00:19:12,720 --> 00:19:16,799
not the details i'm going to skim the

00:19:14,640 --> 00:19:18,720
heck out of every one of these things

00:19:16,799 --> 00:19:20,240
um i'll give you just the minimum you

00:19:18,720 --> 00:19:21,840
need to play around and then i encourage

00:19:20,240 --> 00:19:24,080
you to

00:19:21,840 --> 00:19:25,840
explore further i think i've linked to

00:19:24,080 --> 00:19:31,520
every one of the protocol

00:19:25,840 --> 00:19:32,960
rfcs or whatever documentation they have

00:19:31,520 --> 00:19:37,120
so if you're clicking along with me

00:19:32,960 --> 00:19:37,120
you'll have that at your fingertips

00:19:37,440 --> 00:19:40,640
and i do try to build up the concepts

00:19:39,440 --> 00:19:43,039
here a little bit so

00:19:40,640 --> 00:19:44,000
on to our first example finally um

00:19:43,039 --> 00:19:45,919
graphite

00:19:44,000 --> 00:19:47,919
graphite as i said is a high performance

00:19:45,919 --> 00:19:52,080
matrix collector so you want to

00:19:47,919 --> 00:19:54,480
store certain data um time series data

00:19:52,080 --> 00:19:56,320
and it takes in its metrics via a simple

00:19:54,480 --> 00:20:00,400
tcp line protocol meaning

00:19:56,320 --> 00:20:03,520
it it watches for the end of messages at

00:20:00,400 --> 00:20:06,159
line endings it doesn't give you

00:20:03,520 --> 00:20:07,679
any responses um part of the reason i'm

00:20:06,159 --> 00:20:09,360
starting with graphite it is sort of

00:20:07,679 --> 00:20:11,840
unidirectional

00:20:09,360 --> 00:20:14,880
um the purpose of graphate is to take in

00:20:11,840 --> 00:20:16,720
metrics is absolutely fast as it can

00:20:14,880 --> 00:20:18,840
and it's very good at that and one of

00:20:16,720 --> 00:20:22,480
the reasons is it doesn't

00:20:18,840 --> 00:20:24,000
actually give you any feedback when it's

00:20:22,480 --> 00:20:26,000
doing it

00:20:24,000 --> 00:20:27,280
uh the visualizations come from a web

00:20:26,000 --> 00:20:28,880
service and we're going to see that on

00:20:27,280 --> 00:20:32,480
port 8080

00:20:28,880 --> 00:20:35,200
and then it uses

00:20:32,480 --> 00:20:38,960
fine aligned though it uses line feed

00:20:35,200 --> 00:20:38,960
not care to turn line feed line endings

00:20:39,760 --> 00:20:44,640
so the graphite plain text format you

00:20:42,159 --> 00:20:47,600
give the dot separated

00:20:44,640 --> 00:20:48,400
metric name you give a value i think it

00:20:47,600 --> 00:20:50,159
has to be

00:20:48,400 --> 00:20:51,520
a floating point value and it could be

00:20:50,159 --> 00:20:52,799
an image or two but i think it has to be

00:20:51,520 --> 00:20:55,600
numeric

00:20:52,799 --> 00:20:56,080
and then the current timestamp and then

00:20:55,600 --> 00:20:59,760
a

00:20:56,080 --> 00:21:01,600
backslash n uh so

00:20:59,760 --> 00:21:05,120
you could imagine that we would want to

00:21:01,600 --> 00:21:05,120
send some value like this

00:21:05,520 --> 00:21:09,120
where i could say i have a bunch of

00:21:08,000 --> 00:21:10,640
weather data

00:21:09,120 --> 00:21:12,320
and then under weather data i have

00:21:10,640 --> 00:21:14,080
temperature data and then under

00:21:12,320 --> 00:21:16,640
temperature i have chicago

00:21:14,080 --> 00:21:18,400
and i'm going to store that it is 78.2

00:21:16,640 --> 00:21:20,880
and yes yes yes

00:21:18,400 --> 00:21:20,880
celsius

00:21:21,440 --> 00:21:25,360
uh generating that date is a little bit

00:21:24,159 --> 00:21:28,559
annoying but there's this

00:21:25,360 --> 00:21:31,679
fun thing you can do which is use date

00:21:28,559 --> 00:21:33,520
on your command line to build the

00:21:31,679 --> 00:21:45,840
message

00:21:33,520 --> 00:21:45,840
and we can do just that

00:21:46,799 --> 00:21:54,480
and now watch this

00:21:51,280 --> 00:21:59,840
should see that i have weather and

00:21:54,480 --> 00:21:59,840
chicago and

00:22:01,280 --> 00:22:05,039
i'm trying to fit this into a version

00:22:03,120 --> 00:22:06,960
where you can actually see anything

00:22:05,039 --> 00:22:08,559
so we're right now reviewing the last 24

00:22:06,960 --> 00:22:09,840
hours what we really care about is maybe

00:22:08,559 --> 00:22:13,039
the last

00:22:09,840 --> 00:22:16,240
four minutes and there you see

00:22:13,039 --> 00:22:17,600
some data now you can imagine that maybe

00:22:16,240 --> 00:22:20,799
the temperature has gone up

00:22:17,600 --> 00:22:20,799
around here it's now

00:22:21,280 --> 00:22:27,840
balmy 82 degrees

00:22:38,840 --> 00:22:42,000
refresh

00:22:40,559 --> 00:22:45,039
and you can see that the line is

00:22:42,000 --> 00:22:47,600
actually up here at the top so we get

00:22:45,039 --> 00:22:47,600
even more

00:22:53,360 --> 00:22:57,120
and you can see even more data coming

00:22:55,360 --> 00:23:02,320
along here

00:22:57,120 --> 00:23:04,720
views all right oh yeah

00:23:02,320 --> 00:23:06,320
uh i will defend i will defend

00:23:04,720 --> 00:23:09,280
fahrenheit in that it is

00:23:06,320 --> 00:23:10,640
metric on the range we care about how

00:23:09,280 --> 00:23:12,320
often are you caring about

00:23:10,640 --> 00:23:14,799
you know boiling water temperature

00:23:12,320 --> 00:23:14,799
sometimes

00:23:15,360 --> 00:23:20,400
other than that yes absolutely

00:23:18,480 --> 00:23:22,880
and yes i'm trolling just a little bit

00:23:20,400 --> 00:23:25,039
we can even let me do one more thing

00:23:22,880 --> 00:23:27,200
here

00:23:25,039 --> 00:23:28,880
you do care when you're boiling water

00:23:27,200 --> 00:23:30,640
how often you boiling water i care more

00:23:28,880 --> 00:23:33,840
about what temperature it is

00:23:30,640 --> 00:23:38,400
local host 203

00:23:33,840 --> 00:23:41,600
and uh one other nice thing about the um

00:23:38,400 --> 00:23:43,840
the plain text format here is i can

00:23:41,600 --> 00:23:46,880
actually send

00:23:43,840 --> 00:23:49,120
temp chicago

00:23:46,880 --> 00:23:50,640
there's now 95 and your celsius people

00:23:49,120 --> 00:23:53,279
are scorching

00:23:50,640 --> 00:23:56,000
and i'm gonna send minus one which says

00:23:53,279 --> 00:23:57,679
use the server time when it arrives

00:23:56,000 --> 00:23:59,440
and that can be handy if i'm dealing

00:23:57,679 --> 00:24:00,000
with places where it's not easy to get

00:23:59,440 --> 00:24:05,440
the time

00:24:00,000 --> 00:24:08,799
so it's a point that's up here kelvin

00:24:05,440 --> 00:24:11,840
absolutely we should all work in kelvin

00:24:08,799 --> 00:24:14,480
anyway that's that's uh graphite

00:24:11,840 --> 00:24:15,600
very simple and very useful but it's an

00:24:14,480 --> 00:24:19,039
easy

00:24:15,600 --> 00:24:19,039
dip your toe into

00:24:20,960 --> 00:24:26,880
tcp which brings us to

00:24:24,480 --> 00:24:30,159
sending and receiving data and i'm going

00:24:26,880 --> 00:24:32,559
to use my example irc

00:24:30,159 --> 00:24:33,760
so what is irc well irc is the venerable

00:24:32,559 --> 00:24:36,480
chat protocol

00:24:33,760 --> 00:24:37,520
um the chat protocol that we get all the

00:24:36,480 --> 00:24:40,400
others

00:24:37,520 --> 00:24:42,720
it is mostly human readable there are a

00:24:40,400 --> 00:24:45,200
few things that are not insulin readable

00:24:42,720 --> 00:24:47,520
um it is a bi-directional line protocol

00:24:45,200 --> 00:24:49,440
as well

00:24:47,520 --> 00:24:50,559
it does not request response there are

00:24:49,440 --> 00:24:52,640
some

00:24:50,559 --> 00:24:54,400
commands that will look sort of request

00:24:52,640 --> 00:24:58,080
responsive but it's not really

00:24:54,400 --> 00:25:00,159
um you send messages to the server

00:24:58,080 --> 00:25:01,840
and then the server may send messages

00:25:00,159 --> 00:25:04,559
that are things you might care about

00:25:01,840 --> 00:25:05,600
but those are not necessarily related so

00:25:04,559 --> 00:25:07,840
you might say

00:25:05,600 --> 00:25:09,760
i would like some permissions and then

00:25:07,840 --> 00:25:10,799
it might tell you back oh you have some

00:25:09,760 --> 00:25:12,840
permissions

00:25:10,799 --> 00:25:15,440
but that is not technically a request

00:25:12,840 --> 00:25:17,760
response

00:25:15,440 --> 00:25:19,039
and typically the server only sends you

00:25:17,760 --> 00:25:20,720
messages that you need

00:25:19,039 --> 00:25:22,559
this is important for something like a

00:25:20,720 --> 00:25:25,279
multi-room chat protocol where

00:25:22,559 --> 00:25:27,120
there are probably chat messages of many

00:25:25,279 --> 00:25:29,600
many many rooms going all at the same

00:25:27,120 --> 00:25:31,919
time

00:25:29,600 --> 00:25:31,919
um

00:25:33,760 --> 00:25:37,600
shuffling at the chat i should turn the

00:25:35,200 --> 00:25:38,960
chat off um

00:25:37,600 --> 00:25:41,120
so it will send you the messages that

00:25:38,960 --> 00:25:45,039
you need so rooms you're subscribed to

00:25:41,120 --> 00:25:46,320
or or user updates and rooms that you

00:25:45,039 --> 00:25:47,919
care about

00:25:46,320 --> 00:25:49,360
technically it wants a carriage return

00:25:47,919 --> 00:25:52,000
line feed but in practice most

00:25:49,360 --> 00:25:54,240
service return will accept simple blind

00:25:52,000 --> 00:25:54,240
foods

00:25:54,400 --> 00:25:58,880
the message format is pretty simple um

00:25:56,640 --> 00:26:01,440
there's an optional prefix which

00:25:58,880 --> 00:26:02,159
the clients don't use by default and the

00:26:01,440 --> 00:26:05,279
servers

00:26:02,159 --> 00:26:08,240
should use by default maybe even must

00:26:05,279 --> 00:26:10,080
um which has something to do with which

00:26:08,240 --> 00:26:13,200
particular server you're talking

00:26:10,080 --> 00:26:14,320
to uh then you have space separated

00:26:13,200 --> 00:26:17,360
arguments

00:26:14,320 --> 00:26:17,919
um up to 15 arguments um on a single

00:26:17,360 --> 00:26:19,440
command

00:26:17,919 --> 00:26:21,600
i don't know of any that have that there

00:26:19,440 --> 00:26:25,039
probably are uh

00:26:21,600 --> 00:26:25,520
you can have a max message length of 512

00:26:25,039 --> 00:26:28,480
bytes

00:26:25,520 --> 00:26:28,480
including the ending

00:26:29,279 --> 00:26:32,400
having new lines in those arguments is

00:26:30,880 --> 00:26:33,840
prohibited

00:26:32,400 --> 00:26:35,760
and the spaces in the arguments are

00:26:33,840 --> 00:26:37,360
prohibited except

00:26:35,760 --> 00:26:40,799
when you're using the trailing argument

00:26:37,360 --> 00:26:44,320
and you put in a special leading colon

00:26:40,799 --> 00:26:44,320
so you'll see what that looks like here

00:26:45,120 --> 00:26:49,360
to play around with it irc can be kind

00:26:47,120 --> 00:26:51,120
of noisy and especially it gets annoying

00:26:49,360 --> 00:26:53,919
when you're trying to type something in

00:26:51,120 --> 00:26:54,480
and another message is coming out at you

00:26:53,919 --> 00:26:56,240
so

00:26:54,480 --> 00:26:57,840
what i'm going to recommend is you

00:26:56,240 --> 00:26:59,600
redirect your output

00:26:57,840 --> 00:27:01,039
to a file and then tail the file and

00:26:59,600 --> 00:27:02,960
that's how you're going to see output

00:27:01,039 --> 00:27:04,640
without it interrupting

00:27:02,960 --> 00:27:07,039
probably smarter ways of doing that but

00:27:04,640 --> 00:27:10,480
this is an easy way to do it

00:27:07,039 --> 00:27:14,000
um then you connect to the server on

00:27:10,480 --> 00:27:17,200
port 6667 four six six six

00:27:14,000 --> 00:27:20,960
nine six six nine seven sorry

00:27:17,200 --> 00:27:23,200
um if you're doing ssl version

00:27:20,960 --> 00:27:24,399
and the first thing you have to do is

00:27:23,200 --> 00:27:26,799
tell it your nic

00:27:24,399 --> 00:27:29,200
and your username now most servers your

00:27:26,799 --> 00:27:32,559
nickname and username are the same

00:27:29,200 --> 00:27:33,600
uh nick takes no other arguments but

00:27:32,559 --> 00:27:36,080
your nickname

00:27:33,600 --> 00:27:37,360
user takes several arguments uh your

00:27:36,080 --> 00:27:40,080
username

00:27:37,360 --> 00:27:40,960
uh almost always the value zero

00:27:40,080 --> 00:27:43,279
apparently about

00:27:40,960 --> 00:27:45,039
eight can make you hidden i think i'm

00:27:43,279 --> 00:27:47,919
not entirely sure about that

00:27:45,039 --> 00:27:49,120
this star is literally unused just put

00:27:47,919 --> 00:27:51,279
star

00:27:49,120 --> 00:27:52,960
and then colon real name and you can see

00:27:51,279 --> 00:27:56,240
that this is where

00:27:52,960 --> 00:27:58,080
for the trailing argument your real name

00:27:56,240 --> 00:28:02,480
value can contain the space

00:27:58,080 --> 00:28:04,880
because you put this colon here

00:28:02,480 --> 00:28:05,600
um and before we play along around with

00:28:04,880 --> 00:28:07,919
this i want to say

00:28:05,600 --> 00:28:09,120
one more thing um we'll get back to some

00:28:07,919 --> 00:28:11,440
other stuff later but

00:28:09,120 --> 00:28:12,559
uh if the server sends you a ping with

00:28:11,440 --> 00:28:14,880
some text

00:28:12,559 --> 00:28:16,480
you need to somewhat promptly reply pong

00:28:14,880 --> 00:28:17,360
with that text or it will drop your

00:28:16,480 --> 00:28:18,960
connection

00:28:17,360 --> 00:28:21,120
when i played with this with my work

00:28:18,960 --> 00:28:22,640
colleagues last week

00:28:21,120 --> 00:28:24,080
forgot to mention that until sort of the

00:28:22,640 --> 00:28:25,440
end and they were all like hey why isn't

00:28:24,080 --> 00:28:28,640
this working

00:28:25,440 --> 00:28:28,640
you probably know that first

00:28:29,679 --> 00:28:35,440
so i have

00:28:33,360 --> 00:28:37,360
four terminals here and i hope you can

00:28:35,440 --> 00:28:40,559
see them all well enough

00:28:37,360 --> 00:28:42,399
i am going to make a connection to

00:28:40,559 --> 00:28:44,399
localhost so i'm doing localhost this is

00:28:42,399 --> 00:28:46,440
i'm already on jburger.pl

00:28:44,399 --> 00:28:48,720
if people would like to connect

00:28:46,440 --> 00:28:52,000
jberger.pl rather than localhost

00:28:48,720 --> 00:28:56,240
and port667

00:28:52,000 --> 00:28:59,279
i'm going to say nick j burger

00:28:56,240 --> 00:29:02,399
user j burger zero

00:28:59,279 --> 00:29:03,120
star fallen burger this is by the way

00:29:02,399 --> 00:29:04,559
just my

00:29:03,120 --> 00:29:07,039
server and i'm going to blow it away in

00:29:04,559 --> 00:29:08,240
an hour anyway so um

00:29:07,039 --> 00:29:10,840
have to worry about it you can see you

00:29:08,240 --> 00:29:14,720
get a whole bunch

00:29:10,840 --> 00:29:16,399
um you can get a whole bunch of output

00:29:14,720 --> 00:29:18,559
and this is sort of the

00:29:16,399 --> 00:29:19,840
login message and a bunch of other stuff

00:29:18,559 --> 00:29:22,159
that happens

00:29:19,840 --> 00:29:22,159
um

00:29:24,840 --> 00:29:31,360
and now we have to do something with it

00:29:27,919 --> 00:29:34,880
so to join a chat room is fairly simple

00:29:31,360 --> 00:29:39,039
it's join and we're going to join test

00:29:34,880 --> 00:29:39,039
so join test

00:29:39,679 --> 00:29:45,919
and you'll notice in your output

00:29:42,720 --> 00:29:49,200
you can see that i have

00:29:45,919 --> 00:29:52,399
joined test

00:29:49,200 --> 00:29:55,120
and it tells me that i'm on test

00:29:52,399 --> 00:29:56,000
and it tells everyone else so it tells

00:29:55,120 --> 00:29:58,559
me everyone who's

00:29:56,000 --> 00:29:58,559
on test

00:29:59,120 --> 00:30:02,399
uh and as i state say here the response

00:30:01,440 --> 00:30:05,919
you get

00:30:02,399 --> 00:30:07,919
shows you the join that happened

00:30:05,919 --> 00:30:10,640
and you and everyone else in the channel

00:30:07,919 --> 00:30:13,200
will get that message

00:30:10,640 --> 00:30:13,840
and to show you that if and until

00:30:13,200 --> 00:30:16,880
someone else

00:30:13,840 --> 00:30:19,279
joins in uh

00:30:16,880 --> 00:30:20,960
here i'm going to join over ssl so you

00:30:19,279 --> 00:30:22,480
can have a more interesting example

00:30:20,960 --> 00:30:25,760
there

00:30:22,480 --> 00:30:28,960
here's nick we're going to do nick of

00:30:25,760 --> 00:30:33,760
superman user

00:30:28,960 --> 00:30:37,279
superman zero star

00:30:33,760 --> 00:30:40,799
clark kent

00:30:37,279 --> 00:30:43,200
and you've seen tux join in cool

00:30:40,799 --> 00:30:43,200
join

00:30:45,360 --> 00:30:51,840
test now the nice thing

00:30:53,360 --> 00:30:58,080
is we can now see

00:30:56,399 --> 00:31:00,720
well this particular server apparently

00:30:58,080 --> 00:31:03,519
doesn't give me all the names i thought

00:31:00,720 --> 00:31:06,320
oh here it does jburger and tux are

00:31:03,519 --> 00:31:06,320
already on there

00:31:07,919 --> 00:31:13,600
and you'll notice i was assuming i was

00:31:12,159 --> 00:31:16,399
getting pretty close here

00:31:13,600 --> 00:31:17,039
i just got a ping for j burger so i got

00:31:16,399 --> 00:31:19,279
on

00:31:17,039 --> 00:31:21,760
j burger on just the same content that

00:31:19,279 --> 00:31:21,760
we send

00:31:25,360 --> 00:31:29,440
now you've already seen tuck send a

00:31:26,799 --> 00:31:31,120
message but um

00:31:29,440 --> 00:31:33,120
the command for sending a message is

00:31:31,120 --> 00:31:34,799
priv message you are able to send a

00:31:33,120 --> 00:31:38,799
message to a client

00:31:34,799 --> 00:31:41,039
to it to another client directly or

00:31:38,799 --> 00:31:42,080
to an entire channel with the prefix

00:31:41,039 --> 00:31:43,440
pound here

00:31:42,080 --> 00:31:47,840
and then you send your message with a

00:31:43,440 --> 00:31:47,840
polling so i can send

00:31:50,080 --> 00:31:54,559
and you'll notice that my second client

00:31:52,960 --> 00:31:57,519
saw the message

00:31:54,559 --> 00:31:58,559
the first one didn't and that's

00:31:57,519 --> 00:32:00,720
interesting

00:31:58,559 --> 00:32:02,559
because again the client the the server

00:32:00,720 --> 00:32:04,480
only sends messages

00:32:02,559 --> 00:32:05,919
that it thinks you're interested in and

00:32:04,480 --> 00:32:07,679
since you sent the message

00:32:05,919 --> 00:32:09,120
it assumes you don't need to know that

00:32:07,679 --> 00:32:15,440
it sent the message but everyone else

00:32:09,120 --> 00:32:19,039
will see it

00:32:15,440 --> 00:32:19,039
server does not allow something

00:32:19,679 --> 00:32:23,519
yes sorry tux i uh this is just the

00:32:22,399 --> 00:32:26,720
stock setup

00:32:23,519 --> 00:32:29,039
of a particular irc server so

00:32:26,720 --> 00:32:32,000
um i did not customize it at all it

00:32:29,039 --> 00:32:35,760
probably can do something better

00:32:32,000 --> 00:32:38,960
on superman i have now refreshed that

00:32:35,760 --> 00:32:38,960
there's another pin here

00:32:39,279 --> 00:32:45,679
so you can see that this is possible but

00:32:42,640 --> 00:32:48,799
um i i expect by the way tux that

00:32:45,679 --> 00:32:52,240
that it uh can because this is like a

00:32:48,799 --> 00:32:54,799
really new project for doing irc stuff

00:32:52,240 --> 00:32:57,039
but it's got all configuration just i

00:32:54,799 --> 00:32:57,039
never

00:32:57,519 --> 00:33:01,120
you can see that you don't probably want

00:32:59,200 --> 00:33:04,000
to do this by hand

00:33:01,120 --> 00:33:04,480
to do all your regular communication um

00:33:04,000 --> 00:33:07,200
but

00:33:04,480 --> 00:33:08,720
it's handy to see how the protocol works

00:33:07,200 --> 00:33:10,159
and which messages get sent and it's

00:33:08,720 --> 00:33:12,080
good for debugging if you were writing

00:33:10,159 --> 00:33:13,200
an irc client and it can give you some

00:33:12,080 --> 00:33:16,159
idea of

00:33:13,200 --> 00:33:16,159
how these particular

00:33:16,399 --> 00:33:21,440
types of behaviors work and you know a

00:33:18,720 --> 00:33:22,960
complex line protocol

00:33:21,440 --> 00:33:24,720
let's see another person who's joined

00:33:22,960 --> 00:33:28,799
which is a little bit too bad because i

00:33:24,720 --> 00:33:28,799
am just about to switch away from these

00:33:29,679 --> 00:33:33,840
so you guys can continue to have fun

00:33:31,360 --> 00:33:33,840
over there

00:33:35,840 --> 00:33:39,039
my third example is requests and

00:33:37,760 --> 00:33:43,200
responses

00:33:39,039 --> 00:33:46,720
um i'm going to use the memcached

00:33:43,200 --> 00:33:47,679
protocol so what is medcast memcached is

00:33:46,720 --> 00:33:50,880
an in-memory

00:33:47,679 --> 00:33:53,840
cache so it's fast and it's

00:33:50,880 --> 00:33:53,840
it's

00:33:56,480 --> 00:34:00,080
it doesn't promise you that it's going

00:33:57,840 --> 00:34:05,039
to store anything really

00:34:00,080 --> 00:34:05,039
but you can use it to cash

00:34:05,120 --> 00:34:08,480
credentials lookups not credentials uh

00:34:07,519 --> 00:34:09,760
user objects

00:34:08,480 --> 00:34:11,919
and things that you don't have to always

00:34:09,760 --> 00:34:14,320
be going back to a database for example

00:34:11,919 --> 00:34:15,280
uh there are some simple commands for

00:34:14,320 --> 00:34:18,240
set get

00:34:15,280 --> 00:34:19,760
um there are plenty of other commands

00:34:18,240 --> 00:34:21,520
that you can use if you want but i'm

00:34:19,760 --> 00:34:24,960
only going to do those

00:34:21,520 --> 00:34:27,599
and in reply to each command you send

00:34:24,960 --> 00:34:30,159
you will get one reply in return

00:34:27,599 --> 00:34:32,639
so this is a proper request response

00:34:30,159 --> 00:34:32,639
protocol

00:34:33,599 --> 00:34:37,280
in the line protocol there is some

00:34:35,440 --> 00:34:40,560
length prefixed content

00:34:37,280 --> 00:34:41,599
and some line content and you'll see

00:34:40,560 --> 00:34:43,119
that

00:34:41,599 --> 00:34:45,040
memcached unlike the other ones that

00:34:43,119 --> 00:34:45,440
i've shown you so far is very particular

00:34:45,040 --> 00:34:47,839
about

00:34:45,440 --> 00:34:51,119
wanting care's return line feed so we

00:34:47,839 --> 00:34:51,119
have to be sure we do that right

00:34:56,960 --> 00:35:01,920
so the first step we want to store

00:34:58,960 --> 00:35:01,920
something in the storage

00:35:04,960 --> 00:35:10,400
so the set command takes the key name

00:35:08,079 --> 00:35:11,520
uh some flags which i'm mostly going to

00:35:10,400 --> 00:35:13,680
skim over but it's

00:35:11,520 --> 00:35:15,839
you can use it however you want it's

00:35:13,680 --> 00:35:19,280
application

00:35:15,839 --> 00:35:24,560
defined people usually use them as

00:35:19,280 --> 00:35:26,880
flag vectors and an expiration time

00:35:24,560 --> 00:35:26,880
and

00:35:28,400 --> 00:35:34,480
there we go the expiration time can be

00:35:31,760 --> 00:35:36,000
zero to mean that the the uh storage

00:35:34,480 --> 00:35:37,920
will never expire by time

00:35:36,000 --> 00:35:39,280
again it's a volatile storage so it's

00:35:37,920 --> 00:35:40,400
not promising you that it's storing

00:35:39,280 --> 00:35:42,960
anything but it's not going to

00:35:40,400 --> 00:35:46,079
automatically expire by time

00:35:42,960 --> 00:35:48,320
uh or you can set a unix time stamp or

00:35:46,079 --> 00:35:50,000
you can tell it expire in a number of

00:35:48,320 --> 00:35:52,800
seconds from now there's some

00:35:50,000 --> 00:35:53,440
some value of time stamp there where it

00:35:52,800 --> 00:35:55,200
assumes

00:35:53,440 --> 00:35:56,960
greater than that is timestamp and less

00:35:55,200 --> 00:35:58,800
than that so seconds from now

00:35:56,960 --> 00:36:00,079
i don't know what that number is i meant

00:35:58,800 --> 00:36:03,520
to look that up and i forgot

00:36:00,079 --> 00:36:06,160
to do something um

00:36:03,520 --> 00:36:07,599
and then uh you have to tell it the

00:36:06,160 --> 00:36:08,000
length of the message you're about to

00:36:07,599 --> 00:36:10,880
send

00:36:08,000 --> 00:36:12,960
invites the message is going to end with

00:36:10,880 --> 00:36:15,599
a carriage return line feed

00:36:12,960 --> 00:36:18,079
but you should not include that in your

00:36:15,599 --> 00:36:18,079
payload

00:36:21,119 --> 00:36:25,040
so one thing we're going to do is we're

00:36:22,880 --> 00:36:27,200
going to say

00:36:25,040 --> 00:36:29,839
uh we're gonna echo and we're gonna do

00:36:27,200 --> 00:36:31,599
dash n because we do not want

00:36:29,839 --> 00:36:34,160
this is too hard to see right there

00:36:31,599 --> 00:36:37,760
let's move it down

00:36:34,160 --> 00:36:42,320
uh echo dash n

00:36:37,760 --> 00:36:45,760
we're gonna send foo bar

00:36:42,320 --> 00:36:50,240
as a json object but right now

00:36:45,760 --> 00:36:54,640
i care about how long is that in bytes

00:36:50,240 --> 00:36:57,599
and wc-c tells me that it is 13.

00:36:54,640 --> 00:36:57,599
so now i'm going to

00:36:57,839 --> 00:37:05,440
c local post one one two

00:37:01,119 --> 00:37:09,520
one one and i'm going to send

00:37:05,440 --> 00:37:11,040
set who i don't care about flags

00:37:09,520 --> 00:37:14,720
i don't care about expiring and i'm

00:37:11,040 --> 00:37:14,720
gonna send you 13 bytes

00:37:16,480 --> 00:37:22,000
so step two i have to send the payload

00:37:18,880 --> 00:37:26,240
and it asks for the correct length

00:37:22,000 --> 00:37:28,560
i'm going to send in this case foo

00:37:26,240 --> 00:37:28,560
bar

00:37:29,359 --> 00:37:32,720
and when i've done it correctly it

00:37:30,880 --> 00:37:35,280
should reply to me that that value has

00:37:32,720 --> 00:37:35,280
been stored

00:37:35,520 --> 00:37:39,119
example here i said hello world it

00:37:37,839 --> 00:37:41,760
doesn't matter what percent

00:37:39,119 --> 00:37:43,359
as long as it's the right length if

00:37:41,760 --> 00:37:44,800
successful you'll see stored

00:37:43,359 --> 00:37:46,480
and otherwise you might get one of

00:37:44,800 --> 00:37:49,599
several errors and

00:37:46,480 --> 00:37:52,560
these errors are particular to the um

00:37:49,599 --> 00:37:53,839
these errors are not particular to the

00:37:52,560 --> 00:37:55,359
set command

00:37:53,839 --> 00:37:57,200
but the set command doesn't have any

00:37:55,359 --> 00:38:01,280
other errors

00:37:57,200 --> 00:38:04,000
other commands might um

00:38:01,280 --> 00:38:05,280
i did it successfully here if you if you

00:38:04,000 --> 00:38:07,200
if you give it the wrong

00:38:05,280 --> 00:38:08,560
length and then give it you know a

00:38:07,200 --> 00:38:10,320
payload that doesn't match that length

00:38:08,560 --> 00:38:13,839
it will give you client error

00:38:10,320 --> 00:38:15,680
for example um but it's a very simple

00:38:13,839 --> 00:38:17,680
request response protocol so if you were

00:38:15,680 --> 00:38:19,280
writing a client to this you would just

00:38:17,680 --> 00:38:20,400
look for

00:38:19,280 --> 00:38:23,520
the fact that you got stored and that

00:38:20,400 --> 00:38:23,520
would tell you it was successful

00:38:24,640 --> 00:38:28,480
now getting your keys back out the

00:38:27,359 --> 00:38:33,040
command is simply

00:38:28,480 --> 00:38:35,680
get and you can get one key and it will

00:38:33,040 --> 00:38:36,079
give you values from that key or you can

00:38:35,680 --> 00:38:38,079
get

00:38:36,079 --> 00:38:39,200
multiple keys and it will give you all

00:38:38,079 --> 00:38:41,119
those responses back

00:38:39,200 --> 00:38:44,000
again in a single message and you'll see

00:38:41,119 --> 00:38:44,000
how that's formatted here

00:38:44,320 --> 00:38:49,280
it the value um the response comes back

00:38:47,440 --> 00:38:51,760
with the literal keyword value

00:38:49,280 --> 00:38:53,599
the key you sent any flags that were

00:38:51,760 --> 00:38:54,960
originally set again we ignored that by

00:38:53,599 --> 00:38:56,240
just setting zero

00:38:54,960 --> 00:38:58,560
and the length of the body to be

00:38:56,240 --> 00:39:02,000
expected

00:38:58,560 --> 00:39:04,800
then sends you this you know or whatever

00:39:02,000 --> 00:39:05,920
you know your payload was and it will

00:39:04,800 --> 00:39:08,640
give you that message

00:39:05,920 --> 00:39:10,480
for every key request and then finally

00:39:08,640 --> 00:39:14,480
the keyword end

00:39:10,480 --> 00:39:14,960
so here we can do get boom and it gives

00:39:14,480 --> 00:39:19,599
us

00:39:14,960 --> 00:39:23,760
value for 0 13 and the payload

00:39:19,599 --> 00:39:25,680
and actually i can get fufu

00:39:23,760 --> 00:39:26,960
and it will give me the value twice you

00:39:25,680 --> 00:39:30,640
can see what that message

00:39:26,960 --> 00:39:32,160
looks like now this can be really handy

00:39:30,640 --> 00:39:35,680
when you're having trouble

00:39:32,160 --> 00:39:37,920
um with with session caching or

00:39:35,680 --> 00:39:39,920
something and you want to just say like

00:39:37,920 --> 00:39:42,320
look what's going on in memcached i want

00:39:39,920 --> 00:39:43,359
to just go ahead and talk to it but also

00:39:42,320 --> 00:39:44,800
it can mean that if

00:39:43,359 --> 00:39:47,280
you're using a language that doesn't

00:39:44,800 --> 00:39:48,960
have bindings to memcached already you

00:39:47,280 --> 00:39:51,200
can just write one it's really not that

00:39:48,960 --> 00:39:51,200
hard

00:39:53,520 --> 00:40:00,480
finally the big one http

00:39:56,560 --> 00:40:00,480
we've done simple request responses

00:40:00,800 --> 00:40:06,720
http is a complex protocol um

00:40:04,560 --> 00:40:09,119
it's both its parsing and behavior

00:40:06,720 --> 00:40:11,760
depend on lots of different factors

00:40:09,119 --> 00:40:13,520
uh technically the spec says it's

00:40:11,760 --> 00:40:16,560
carriage return line feeds

00:40:13,520 --> 00:40:20,160
but most servers will also accept uh

00:40:16,560 --> 00:40:21,599
simple line feeds note this is not html

00:40:20,160 --> 00:40:23,440
the content that we send

00:40:21,599 --> 00:40:25,680
in the body can be anything or in fact

00:40:23,440 --> 00:40:27,359
we could send nothing

00:40:25,680 --> 00:40:29,520
um the fact that it's hyper text

00:40:27,359 --> 00:40:29,839
transfer protocol sort of implies that

00:40:29,520 --> 00:40:32,160
it's

00:40:29,839 --> 00:40:35,359
hypertext markup language but it's not i

00:40:32,160 --> 00:40:35,359
can send anything you want

00:40:37,200 --> 00:40:42,400
the http message comes in three sections

00:40:40,560 --> 00:40:44,800
there's a start line

00:40:42,400 --> 00:40:47,240
then there are headers and then

00:40:44,800 --> 00:40:50,560
optionally there's a body

00:40:47,240 --> 00:40:52,640
technically depending on a few things

00:40:50,560 --> 00:40:56,480
headers are also optional but that's

00:40:52,640 --> 00:40:56,480
that's already getting pretty great

00:40:56,880 --> 00:41:04,880
so the start line is the method

00:41:01,280 --> 00:41:08,480
path and then http slash

00:41:04,880 --> 00:41:12,720
version so typically http

00:41:08,480 --> 00:41:13,760
1.1 at a command line you actually might

00:41:12,720 --> 00:41:17,040
hack this a little bit

00:41:13,760 --> 00:41:19,359
because http 1.0 is that

00:41:17,040 --> 00:41:20,319
example that i said before of a protocol

00:41:19,359 --> 00:41:22,560
wherein

00:41:20,319 --> 00:41:23,520
on finishing the message it would close

00:41:22,560 --> 00:41:25,520
the connection

00:41:23,520 --> 00:41:26,800
so if you just want to cheat here and

00:41:25,520 --> 00:41:30,319
send git slash

00:41:26,800 --> 00:41:31,599
http 1.0 it will just send you the reply

00:41:30,319 --> 00:41:35,040
and then close the connection which can

00:41:31,599 --> 00:41:36,000
be handy uh that's the start line for a

00:41:35,040 --> 00:41:37,920
request

00:41:36,000 --> 00:41:39,920
for a response the server will reply

00:41:37,920 --> 00:41:42,160
back to you http

00:41:39,920 --> 00:41:44,240
slash version the version you chose i

00:41:42,160 --> 00:41:46,079
think must apply the version you chose

00:41:44,240 --> 00:41:48,400
if it's going to be running

00:41:46,079 --> 00:41:49,119
uh the status code and then the message

00:41:48,400 --> 00:41:51,680
that

00:41:49,119 --> 00:41:53,599
that corresponds to that status code

00:41:51,680 --> 00:41:54,640
this is not the body of the message this

00:41:53,599 --> 00:41:57,839
is just

00:41:54,640 --> 00:42:00,560
200 okay 404 not found

00:41:57,839 --> 00:42:02,079
um things like that so there's a

00:42:00,560 --> 00:42:04,880
one-to-one relationship between the

00:42:02,079 --> 00:42:04,880
status and the message

00:42:07,839 --> 00:42:11,839
before i show you an example of this i

00:42:09,280 --> 00:42:12,480
really should show you some http headers

00:42:11,839 --> 00:42:14,560
or at least

00:42:12,480 --> 00:42:16,480
what the http headers are like because

00:42:14,560 --> 00:42:18,640
it turns out that um

00:42:16,480 --> 00:42:19,599
i think i mentioned this in a minute so

00:42:18,640 --> 00:42:22,720
i'm gonna say

00:42:19,599 --> 00:42:24,480
the headers are key value pairs

00:42:22,720 --> 00:42:26,240
where the keys and the values are colon

00:42:24,480 --> 00:42:27,359
separated i think the colon space is

00:42:26,240 --> 00:42:30,160
fine too

00:42:27,359 --> 00:42:32,160
um the pairs each pair ends with a

00:42:30,160 --> 00:42:34,880
carriage return line feed

00:42:32,160 --> 00:42:36,160
the keys are case insensitive and

00:42:34,880 --> 00:42:37,920
depending on which

00:42:36,160 --> 00:42:40,079
header you're talking about the value

00:42:37,920 --> 00:42:42,400
may be very very complex in fact there

00:42:40,079 --> 00:42:46,000
are whole rfcs that talk about

00:42:42,400 --> 00:42:46,640
um how to parse particular uh http

00:42:46,000 --> 00:42:49,680
headers

00:42:46,640 --> 00:42:50,560
but in the end they end with a carriage

00:42:49,680 --> 00:42:52,880
return line feed

00:42:50,560 --> 00:42:55,040
and so for our purposes it's still

00:42:52,880 --> 00:42:57,119
reasonably easy to deal with

00:42:55,040 --> 00:42:58,800
and then the headers section ends with

00:42:57,119 --> 00:43:02,079
an empty line containing

00:42:58,800 --> 00:43:05,200
only should be n

00:43:02,079 --> 00:43:06,640
um carries return line feed so there's

00:43:05,200 --> 00:43:09,200
basically one blank line

00:43:06,640 --> 00:43:10,000
and that's the end of the http headers i

00:43:09,200 --> 00:43:13,599
told you that i

00:43:10,000 --> 00:43:16,079
had almost no code in this in the

00:43:13,599 --> 00:43:17,440
repository i've included a simple little

00:43:16,079 --> 00:43:21,280
script

00:43:17,440 --> 00:43:24,400
and what it does is um select

00:43:21,280 --> 00:43:27,520
will tell it uh where to send output

00:43:24,400 --> 00:43:30,640
and so we first select standard error

00:43:27,520 --> 00:43:31,599
and then we're going to do loop over the

00:43:30,640 --> 00:43:34,960
input

00:43:31,599 --> 00:43:35,680
print out that input but then select

00:43:34,960 --> 00:43:39,119
standard out

00:43:35,680 --> 00:43:40,079
if you hit that empty line and this is

00:43:39,119 --> 00:43:41,920
already where you can

00:43:40,079 --> 00:43:43,200
say oh it was handy to know what the

00:43:41,920 --> 00:43:44,560
protocol was

00:43:43,200 --> 00:43:46,720
because i can write a little script that

00:43:44,560 --> 00:43:49,760
does this now why would i do this

00:43:46,720 --> 00:43:50,240
well because after headers we might care

00:43:49,760 --> 00:43:51,599
about

00:43:50,240 --> 00:43:53,280
doing something interesting with the

00:43:51,599 --> 00:43:56,319
body

00:43:53,280 --> 00:44:01,200
and the body uh things that are going to

00:43:56,319 --> 00:44:02,800
inspect the body like maybe jq uh

00:44:01,200 --> 00:44:06,000
yeah you're probably right tux that

00:44:02,800 --> 00:44:06,000
should probably slash c

00:44:06,839 --> 00:44:10,800
uh

00:44:08,800 --> 00:44:11,839
it well it works you're probably right

00:44:10,800 --> 00:44:15,280
but it does work

00:44:11,839 --> 00:44:15,280
so um

00:44:15,839 --> 00:44:19,359
we'll accept pull requests the nice

00:44:18,560 --> 00:44:21,760
thing about this

00:44:19,359 --> 00:44:22,560
is particularly if you get some json

00:44:21,760 --> 00:44:24,640
data back

00:44:22,560 --> 00:44:27,440
you can pipe it to jq and the headers

00:44:24,640 --> 00:44:27,440
won't get in the way

00:44:30,640 --> 00:44:32,960
uh

00:44:33,760 --> 00:44:37,280
quick note about the request uh host

00:44:36,240 --> 00:44:39,839
header

00:44:37,280 --> 00:44:40,800
so remember i said that headers are

00:44:39,839 --> 00:44:42,800
optional or

00:44:40,800 --> 00:44:45,359
headers are sometimes optional they were

00:44:42,800 --> 00:44:47,359
optional in http 1.0

00:44:45,359 --> 00:44:49,359
but they are technically required by

00:44:47,359 --> 00:44:50,720
http 1.1

00:44:49,359 --> 00:44:53,119
and that was because they were already

00:44:50,720 --> 00:44:54,960
seeing that uh people were doing

00:44:53,119 --> 00:44:56,880
name-based virtual hosting so

00:44:54,960 --> 00:44:58,000
you can request the page from an ip

00:44:56,880 --> 00:45:00,079
address

00:44:58,000 --> 00:45:01,280
but that ip address might host more than

00:45:00,079 --> 00:45:04,319
one

00:45:01,280 --> 00:45:06,560
uh website and so the

00:45:04,319 --> 00:45:08,079
application needed a way to say hey

00:45:06,560 --> 00:45:08,560
which website were you actually asking

00:45:08,079 --> 00:45:11,280
about

00:45:08,560 --> 00:45:13,520
so they have this host header where you

00:45:11,280 --> 00:45:15,200
put that in

00:45:13,520 --> 00:45:17,440
as i mentioned before the start line

00:45:15,200 --> 00:45:20,560
only has a path so you couldn't make an

00:45:17,440 --> 00:45:22,000
absolute url out of that

00:45:20,560 --> 00:45:24,880
all right that's enough talk let's play

00:45:22,000 --> 00:45:29,760
around with this so i told you i have

00:45:24,880 --> 00:45:31,599
um let's do

00:45:29,760 --> 00:45:35,359
let's do one purely from the command

00:45:31,599 --> 00:45:35,359
line first let's do echo get

00:45:35,520 --> 00:45:41,520
slash http 1.0

00:45:38,470 --> 00:45:41,520
[Music]

00:45:42,800 --> 00:45:46,000
and i told you with 1.0 it's going to

00:45:44,720 --> 00:45:47,920
just close the connection so

00:45:46,000 --> 00:45:49,839
we can just cheat this way we don't even

00:45:47,920 --> 00:45:51,760
need to do headers

00:45:49,839 --> 00:45:54,960
uh because we're going to type this to

00:45:51,760 --> 00:45:54,960
netcat dash c

00:45:56,160 --> 00:45:59,200
well here i'll just do it into

00:45:57,880 --> 00:46:02,319
jburger.pl

00:45:59,200 --> 00:46:03,680
for your uh he's following along 8081

00:46:02,319 --> 00:46:05,359
this is the echo server that i talked

00:46:03,680 --> 00:46:09,839
about before remember

00:46:05,359 --> 00:46:09,839
and we're going to pipe this to that

00:46:13,119 --> 00:46:16,560
oh i'm not in the right directory

00:46:18,440 --> 00:46:23,280
presentations text based protocols there

00:46:21,040 --> 00:46:25,200
we go

00:46:23,280 --> 00:46:27,520
all the way here you see i have that

00:46:25,200 --> 00:46:30,640
head script that i mentioned before

00:46:27,520 --> 00:46:34,400
so we're going to do echo get slash

00:46:30,640 --> 00:46:40,839
http 1.0

00:46:34,400 --> 00:46:43,839
and pipe this to the cat minus cj bird

00:46:40,839 --> 00:46:43,839
dot

00:46:50,860 --> 00:46:54,079
[Music]

00:46:55,280 --> 00:46:58,240
what's going on here

00:47:04,240 --> 00:47:14,160
i did dash c why are you yelling

00:47:10,319 --> 00:47:14,160
oh not colon space

00:47:18,240 --> 00:47:23,119
it didn't kill the connection that's

00:47:21,359 --> 00:47:25,760
most frustrating

00:47:23,119 --> 00:47:27,920
all right well we'll do it the right way

00:47:25,760 --> 00:47:27,920
then

00:47:36,839 --> 00:47:39,839
one

00:47:47,920 --> 00:47:51,440
it's making me look bad today

00:47:51,599 --> 00:47:55,359
all right well we're just going to play

00:47:53,119 --> 00:47:55,359
around

00:48:01,599 --> 00:48:05,760
oh two lines because we still have to

00:48:04,319 --> 00:48:09,839
end the head section

00:48:05,760 --> 00:48:11,119
even though aha see

00:48:09,839 --> 00:48:14,400
now we're going to go all the way back

00:48:11,119 --> 00:48:14,400
to here and we're going to

00:48:15,359 --> 00:48:17,839
insert

00:48:30,640 --> 00:48:35,839
all right

00:48:36,400 --> 00:48:42,240
live demos why do i even try

00:48:40,000 --> 00:48:44,240
we're gonna do this this way get slash

00:48:42,240 --> 00:48:49,920
http

00:48:44,240 --> 00:48:52,640
1.0 enter connection close

00:48:49,920 --> 00:48:55,440
why didn't you send me anything

00:48:52,640 --> 00:48:55,440
everything hates me

00:48:58,720 --> 00:49:03,839
um well

00:49:09,839 --> 00:49:17,839
yeah that's what it should be but just

00:49:12,880 --> 00:49:17,839
wasn't so

00:49:20,319 --> 00:49:23,520
i'm gonna forget the whole head thing

00:49:22,240 --> 00:49:23,920
and we're just gonna see what it gives

00:49:23,520 --> 00:49:28,480
me

00:49:23,920 --> 00:49:31,520
because one point one

00:49:28,480 --> 00:49:33,920
say host jburger.pl

00:49:31,520 --> 00:49:35,119
and we see that we get some output and

00:49:33,920 --> 00:49:37,760
the nice thing about

00:49:35,119 --> 00:49:37,760
the output

00:49:40,160 --> 00:49:43,280
you see that the output uh tells us

00:49:42,319 --> 00:49:45,359
stuff about

00:49:43,280 --> 00:49:47,119
for example we got a host header that

00:49:45,359 --> 00:49:50,400
said jayburger pl

00:49:47,119 --> 00:49:52,160
um echo alone sends

00:49:50,400 --> 00:49:53,760
right i understand that but i'm piping

00:49:52,160 --> 00:49:58,000
it to netcat

00:49:53,760 --> 00:49:59,920
c which should translate it

00:49:58,000 --> 00:50:01,599
but i'm not sending two of them which is

00:49:59,920 --> 00:50:02,880
i think the problem

00:50:01,599 --> 00:50:04,960
because i have to end the headings

00:50:02,880 --> 00:50:07,280
header section

00:50:04,960 --> 00:50:08,800
so i'll take tell you what let me do it

00:50:07,280 --> 00:50:13,839
like this

00:50:08,800 --> 00:50:13,839
so people are giving me pointers

00:50:14,559 --> 00:50:17,599
is it the double quotes that's what's

00:50:16,000 --> 00:50:26,000
going to give it to me all right

00:50:17,599 --> 00:50:29,920
so this is why i

00:50:26,000 --> 00:50:32,880
request oh because i need the dash n now

00:50:29,920 --> 00:50:32,880
and i don't need to see

00:50:33,680 --> 00:50:36,640
we're having fun now

00:50:37,040 --> 00:50:40,240
whatever i don't know i'm not gonna play

00:50:39,119 --> 00:50:42,559
with that too much

00:50:40,240 --> 00:50:45,359
but just head between the headers it

00:50:42,559 --> 00:50:48,640
doesn't drop the headers it

00:50:45,359 --> 00:50:48,640
echo needs dash e

00:50:52,079 --> 00:50:55,520
all right i don't know what i did wrong

00:50:53,440 --> 00:50:57,040
there you guys are you guys were fixing

00:50:55,520 --> 00:50:58,000
things for me so now you can finally see

00:50:57,040 --> 00:50:59,920
what it should have been

00:50:58,000 --> 00:51:01,280
i promise i did this online well i

00:50:59,920 --> 00:51:01,760
developed this talk on my mac and i

00:51:01,280 --> 00:51:04,319
wonder if

00:51:01,760 --> 00:51:05,599
something i did was slightly different

00:51:04,319 --> 00:51:07,920
than that

00:51:05,599 --> 00:51:11,040
um anyway the nice thing about this echo

00:51:07,920 --> 00:51:13,440
server is that you can see

00:51:11,040 --> 00:51:15,119
uh all the different parameters of the

00:51:13,440 --> 00:51:16,559
request that you sent which can be nice

00:51:15,119 --> 00:51:18,640
when you're sort of investigating these

00:51:16,559 --> 00:51:21,200
things on yourself

00:51:18,640 --> 00:51:23,200
uh that dash e tells you to interpret

00:51:21,200 --> 00:51:26,000
the literal

00:51:23,200 --> 00:51:26,880
slash backslash n without that it sends

00:51:26,000 --> 00:51:31,520
the literal

00:51:26,880 --> 00:51:31,520
backslash n very good okay

00:51:33,359 --> 00:51:36,480
after making myself look a little

00:51:34,960 --> 00:51:38,800
foolish no that head command

00:51:36,480 --> 00:51:40,559
um what it does is it sends the headers

00:51:38,800 --> 00:51:43,119
to standard error

00:51:40,559 --> 00:51:43,760
um so that you can then pipe the output

00:51:43,119 --> 00:51:46,720
to

00:51:43,760 --> 00:51:47,680
uh standard out through to in this case

00:51:46,720 --> 00:51:51,040
jquery

00:51:47,680 --> 00:51:51,680
to do that a nice pretty printing for

00:51:51,040 --> 00:51:55,520
you

00:51:51,680 --> 00:51:57,280
colorizing things uh

00:51:55,520 --> 00:52:00,079
now that we've done that we could do for

00:51:57,280 --> 00:52:02,960
example have a little fun and do socat

00:52:00,079 --> 00:52:02,960
dash with

00:52:03,440 --> 00:52:07,680
to ssl

00:52:08,000 --> 00:52:14,880
google.com 443

00:52:12,640 --> 00:52:14,880
and

00:52:16,240 --> 00:52:22,000
you can say get slash http 1.1

00:52:22,079 --> 00:52:26,480
and you can do the host header because

00:52:24,640 --> 00:52:30,559
that's required in 1.1 to go

00:52:26,480 --> 00:52:32,480
to google.com

00:52:30,559 --> 00:52:33,839
and after you send that you get your

00:52:32,480 --> 00:52:37,359
response

00:52:33,839 --> 00:52:38,960
great um i have just a little bit of

00:52:37,359 --> 00:52:41,200
time left so i'm barely going to touch

00:52:38,960 --> 00:52:44,240
on the http message body

00:52:41,200 --> 00:52:46,960
but the http message body only uh

00:52:44,240 --> 00:52:49,440
is sent on certain directions with

00:52:46,960 --> 00:52:52,480
certain methods and certain status codes

00:52:49,440 --> 00:52:56,079
so you when you do a request

00:52:52,480 --> 00:52:59,280
with git there is no body usually

00:52:56,079 --> 00:53:02,000
yes i'm looking at you elasticsearch

00:52:59,280 --> 00:53:03,359
but maybe a reply with the 204 will also

00:53:02,000 --> 00:53:05,920
have no body

00:53:03,359 --> 00:53:07,359
um head requests have no body for

00:53:05,920 --> 00:53:10,720
example two

00:53:07,359 --> 00:53:14,640
um uh you know the message is complete

00:53:10,720 --> 00:53:17,520
in several ways as i mentioned http 1.0

00:53:14,640 --> 00:53:18,800
uh will just close the connection you

00:53:17,520 --> 00:53:21,760
can also request

00:53:18,800 --> 00:53:23,119
in http 1.1 with a header you can say

00:53:21,760 --> 00:53:25,119
connection closed and it will behave

00:53:23,119 --> 00:53:28,800
that same way for you

00:53:25,119 --> 00:53:31,680
uh uh you can

00:53:28,800 --> 00:53:33,119
um if the message has a body then there

00:53:31,680 --> 00:53:34,960
will be a content length header

00:53:33,119 --> 00:53:36,400
which will tell you the number of bytes

00:53:34,960 --> 00:53:39,440
um plus the

00:53:36,400 --> 00:53:41,119
final characteristic line feed um all

00:53:39,440 --> 00:53:42,480
the rules go out the window with chunk

00:53:41,119 --> 00:53:44,240
transfer encoding which is another

00:53:42,480 --> 00:53:45,839
header you can specify at which point

00:53:44,240 --> 00:53:47,119
you start saying i'm about to send you n

00:53:45,839 --> 00:53:49,119
bytes and then

00:53:47,119 --> 00:53:52,400
read n bytes and it goes like that until

00:53:49,119 --> 00:53:52,400
you get a zero message

00:53:54,839 --> 00:53:59,359
um

00:53:56,800 --> 00:54:01,119
we're driving pip crazy on the chat with

00:53:59,359 --> 00:54:02,000
being wrong about which one's slash and

00:54:01,119 --> 00:54:04,880
backslash

00:54:02,000 --> 00:54:06,640
that's you guys just start trolling be

00:54:04,880 --> 00:54:10,000
funny

00:54:06,640 --> 00:54:11,440
uh and that's all i've got to say i've

00:54:10,000 --> 00:54:13,920
gone only just a couple minutes longer

00:54:11,440 --> 00:54:15,280
than i meant to i do encourage you if

00:54:13,920 --> 00:54:18,400
you've had fun with this to look at the

00:54:15,280 --> 00:54:19,839
redis protocol it's a lot of fun

00:54:18,400 --> 00:54:21,920
and then the thing that i was going to

00:54:19,839 --> 00:54:22,319
show off if i had enough time but there

00:54:21,920 --> 00:54:24,720
wasn't

00:54:22,319 --> 00:54:26,559
nearly going to be enough time there's a

00:54:24,720 --> 00:54:27,839
protocol called guacamole which is

00:54:26,559 --> 00:54:31,119
unrelated to

00:54:27,839 --> 00:54:32,160
um the guacamole that that uh proposed

00:54:31,119 --> 00:54:36,000
last year

00:54:32,160 --> 00:54:39,040
which is a vnc abstraction library

00:54:36,000 --> 00:54:40,000
and for reasons we don't need to go into

00:54:39,040 --> 00:54:42,640
it separated

00:54:40,000 --> 00:54:43,760
into two different servers and i wrote a

00:54:42,640 --> 00:54:46,799
new client

00:54:43,760 --> 00:54:50,000
to replace it's one of its two um

00:54:46,799 --> 00:54:52,559
systems uh and it's

00:54:50,000 --> 00:54:54,079
a lot of fun to to dig into protocols at

00:54:52,559 --> 00:54:56,079
that layer so if you're interested in

00:54:54,079 --> 00:54:57,200
that you can see how i wrote a rather

00:54:56,079 --> 00:55:00,160
complex

00:54:57,200 --> 00:55:03,280
uh client to um guacamole which i called

00:55:00,160 --> 00:55:03,280
block light and that is on

00:55:04,839 --> 00:55:08,640
cpn

00:55:06,240 --> 00:55:09,920
so in conclusion go play with text-based

00:55:08,640 --> 00:55:12,960
protocols don't be

00:55:09,920 --> 00:55:14,960
um afraid to go dig into just you you

00:55:12,960 --> 00:55:15,359
saw i made a request to google no one's

00:55:14,960 --> 00:55:17,680
gonna

00:55:15,359 --> 00:55:19,280
kill you over opening a direct tcp

00:55:17,680 --> 00:55:20,960
socket to google it's the same thing

00:55:19,280 --> 00:55:24,400
your browser does so

00:55:20,960 --> 00:55:29,200
have fun play with things and

00:55:24,400 --> 00:55:29,200

YouTube URL: https://www.youtube.com/watch?v=8fjYawHyNZY


