Title: Even You Can Release Perl - Max Maischein
Publication date: 2021-06-10
Playlist: TPC 2021 in the Cloud
Description: 
	Perl is blessed with regular monthly developer releases and regular annual stable releases. The talk tries to demystify the role of the Perl Release Manager and gives a look behind the scenes of doing a Perl release. Even if you don't plan on releasing Perl, the steps and approaches taken by the Perl release process can be interesting.
Captions: 
	00:00:02,000 --> 00:00:06,640
hello everybody

00:00:03,919 --> 00:00:07,600
my name is max michen and i'm very happy

00:00:06,640 --> 00:00:10,880
to

00:00:07,600 --> 00:00:14,960
present to you today talk about

00:00:10,880 --> 00:00:14,960
how even you can release power

00:00:15,599 --> 00:00:19,520
yeah will this talk help you well

00:00:18,320 --> 00:00:22,640
hopefully yes

00:00:19,520 --> 00:00:23,680
and especially if you are interested in

00:00:22,640 --> 00:00:26,400
pearl itself

00:00:23,680 --> 00:00:26,880
and yeah maybe have been wondering about

00:00:26,400 --> 00:00:30,160
how

00:00:26,880 --> 00:00:32,800
a pearl release makes it onto cpan and

00:00:30,160 --> 00:00:34,320
into your linux distributions or even on

00:00:32,800 --> 00:00:37,520
windows

00:00:34,320 --> 00:00:39,440
and maybe also if you're interested in

00:00:37,520 --> 00:00:42,640
software development in general

00:00:39,440 --> 00:00:46,160
and how one can codify

00:00:42,640 --> 00:00:49,680
yeah a process that in the end produces

00:00:46,160 --> 00:00:53,280
a new release of a software version

00:00:49,680 --> 00:00:56,160
and yeah how one can do the packaging

00:00:53,280 --> 00:00:56,160
and everything

00:00:57,039 --> 00:01:03,280
i want to show you today a bit

00:01:00,320 --> 00:01:05,360
um about how the sausage is made and

00:01:03,280 --> 00:01:08,159
demystify palm

00:01:05,360 --> 00:01:10,000
um give you a bit of a look behind the

00:01:08,159 --> 00:01:13,280
scenes of a pearl release

00:01:10,000 --> 00:01:16,799
and yes how a new version

00:01:13,280 --> 00:01:19,759
gets onto cpen in

00:01:16,799 --> 00:01:22,880
that process i will also touch on what

00:01:19,759 --> 00:01:25,920
the release manager does

00:01:22,880 --> 00:01:26,880
and also what a release manager doesn't

00:01:25,920 --> 00:01:30,320
do

00:01:26,880 --> 00:01:33,680
um i'm not sure do you see my slides

00:01:30,320 --> 00:01:35,600
or do you only see me in the camera

00:01:33,680 --> 00:01:38,640
picture i mean i don't mind

00:01:35,600 --> 00:01:41,920
but um it's maybe

00:01:38,640 --> 00:01:45,119
yeah great thank you

00:01:41,920 --> 00:01:47,600
so yeah what a release manager does and

00:01:45,119 --> 00:01:51,439
does not do

00:01:47,600 --> 00:01:54,399
um also maybe a bit about why

00:01:51,439 --> 00:01:55,200
you might want to be a release manager

00:01:54,399 --> 00:01:59,439
for paul

00:01:55,200 --> 00:02:01,840
and also a bit about what that entails

00:01:59,439 --> 00:02:04,079
the things you have to do as a release

00:02:01,840 --> 00:02:07,280
manager

00:02:04,079 --> 00:02:08,720
my name is max meinshein i work for the

00:02:07,280 --> 00:02:11,599
desert bank

00:02:08,720 --> 00:02:13,440
agai in frankfurt the deutsche central

00:02:11,599 --> 00:02:15,840
northern shafts bank

00:02:13,440 --> 00:02:18,480
this is the central bank of the

00:02:15,840 --> 00:02:21,280
cooperative banks in germany

00:02:18,480 --> 00:02:23,760
and yeah my current occupation there is

00:02:21,280 --> 00:02:27,360
digital currency expert

00:02:23,760 --> 00:02:31,200
they look at the digital euro and

00:02:27,360 --> 00:02:34,879
other um digital currencies

00:02:31,200 --> 00:02:38,959
and what that means to us as a bank and

00:02:34,879 --> 00:02:41,840
for the cooperative banks in general

00:02:38,959 --> 00:02:42,879
also i'm a board member of the frankfurt

00:02:41,840 --> 00:02:46,080
power mongers

00:02:42,879 --> 00:02:47,120
and yeah we organized the german poll

00:02:46,080 --> 00:02:49,760
workshop

00:02:47,120 --> 00:02:50,640
since 10 years now or maybe even 11

00:02:49,760 --> 00:02:53,680
years

00:02:50,640 --> 00:02:56,720
and yes this year it was um

00:02:53,680 --> 00:02:59,680
only an online conference but next year

00:02:56,720 --> 00:03:01,280
if you are in the vicinity of germany

00:02:59,680 --> 00:03:04,720
feel invited to

00:03:01,280 --> 00:03:07,599
come to leipzig and enjoy the power

00:03:04,720 --> 00:03:07,599
workshop there

00:03:07,680 --> 00:03:14,879
yeah this is the

00:03:11,040 --> 00:03:18,080
release note or an accept excerpt

00:03:14,879 --> 00:03:21,440
of the release notes for paul 35

00:03:18,080 --> 00:03:24,959
0 5 35 0 and

00:03:21,440 --> 00:03:30,640
if you look closely enough and i do

00:03:24,959 --> 00:03:34,080
you will find my name there and yes

00:03:30,640 --> 00:03:35,599
how did my name get there not because i

00:03:34,080 --> 00:03:38,799
contributed so much

00:03:35,599 --> 00:03:42,959
interesting code to paul itself but

00:03:38,799 --> 00:03:46,000
only because i did a developer release

00:03:42,959 --> 00:03:48,959
of paul and yes

00:03:46,000 --> 00:03:50,080
that already is enough to get my uh my

00:03:48,959 --> 00:03:54,239
name on the list

00:03:50,080 --> 00:03:58,319
of developers of paul that's great

00:03:54,239 --> 00:04:01,519
it tells that story i've done it

00:03:58,319 --> 00:04:05,040
four times already at least it says

00:04:01,519 --> 00:04:09,280
for 515 for 517

00:04:05,040 --> 00:04:15,840
and for 521 and last november

00:04:09,280 --> 00:04:15,840
for 5.33

00:04:17,280 --> 00:04:24,560
so yes as you might know

00:04:21,040 --> 00:04:25,919
or are about to realize paul is made of

00:04:24,560 --> 00:04:29,520
people

00:04:25,919 --> 00:04:33,360
and those people do monthly

00:04:29,520 --> 00:04:36,880
developer releases since 2009

00:04:33,360 --> 00:04:37,280
of pro there is one stable release of

00:04:36,880 --> 00:04:40,320
paul

00:04:37,280 --> 00:04:43,840
every year and

00:04:40,320 --> 00:04:47,440
that stable release is yeah

00:04:43,840 --> 00:04:50,240
or no any release is a bit more

00:04:47,440 --> 00:04:53,759
than just uploading the current state of

00:04:50,240 --> 00:04:58,160
the repository onto cpan

00:04:53,759 --> 00:05:01,759
but yes it's not that much more

00:04:58,160 --> 00:05:05,360
um and yes there are

00:05:01,759 --> 00:05:06,080
checklists what you can do and these

00:05:05,360 --> 00:05:08,880
track lists

00:05:06,080 --> 00:05:10,000
live in the same repository as paul

00:05:08,880 --> 00:05:14,400
itself

00:05:10,000 --> 00:05:17,520
on github the two files of interest

00:05:14,400 --> 00:05:19,600
are the release manager guide in the

00:05:17,520 --> 00:05:23,199
parting directory

00:05:19,600 --> 00:05:24,560
and the release schedule the release

00:05:23,199 --> 00:05:26,960
manager guide has

00:05:24,560 --> 00:05:27,680
all the steps that you as a release

00:05:26,960 --> 00:05:30,320
manager

00:05:27,680 --> 00:05:33,039
want to follow or might have to follow

00:05:30,320 --> 00:05:35,759
to produce a new release of power

00:05:33,039 --> 00:05:36,639
and the release schedule lists all the

00:05:35,759 --> 00:05:39,440
people

00:05:36,639 --> 00:05:39,919
that want to do a release for the next

00:05:39,440 --> 00:05:43,120
month

00:05:39,919 --> 00:05:46,880
out so that yes

00:05:43,120 --> 00:05:49,680
at any time it's always clear hopefully

00:05:46,880 --> 00:05:50,160
who is the next person to do a release

00:05:49,680 --> 00:05:52,720
and

00:05:50,160 --> 00:05:54,000
when that person will actually do the

00:05:52,720 --> 00:05:56,720
release

00:05:54,000 --> 00:05:58,560
and yes hopefully that person follows

00:05:56,720 --> 00:06:01,520
the release manager guide

00:05:58,560 --> 00:06:02,479
and then we will get a new developer

00:06:01,520 --> 00:06:06,479
release

00:06:02,479 --> 00:06:09,520
of power on time

00:06:06,479 --> 00:06:09,840
i've mentioned it a bit already there is

00:06:09,520 --> 00:06:13,039
the

00:06:09,840 --> 00:06:13,919
stable release of paul that comes out

00:06:13,039 --> 00:06:16,960
every year

00:06:13,919 --> 00:06:18,960
and the developer release that comes out

00:06:16,960 --> 00:06:21,919
monthly

00:06:18,960 --> 00:06:23,199
the stable release is usually or has

00:06:21,919 --> 00:06:27,280
usually been done

00:06:23,199 --> 00:06:30,160
by the pumpkin i'm actually not sure

00:06:27,280 --> 00:06:31,759
how the new pulse steering committee

00:06:30,160 --> 00:06:34,880
will handle

00:06:31,759 --> 00:06:37,039
the the chores of actually packaging and

00:06:34,880 --> 00:06:40,400
releasing a new power release

00:06:37,039 --> 00:06:43,360
but i think at least two of the

00:06:40,400 --> 00:06:44,400
current people in the poll steering

00:06:43,360 --> 00:06:48,160
committee have

00:06:44,400 --> 00:06:51,759
done that so i guess that neil will be

00:06:48,160 --> 00:06:56,000
the third one and

00:06:51,759 --> 00:06:59,039
it will be a learning experience for him

00:06:56,000 --> 00:07:01,680
um yeah for a stable release

00:06:59,039 --> 00:07:04,160
the the release manager needs to make

00:07:01,680 --> 00:07:06,080
some hard decisions like what features

00:07:04,160 --> 00:07:09,840
to actually include

00:07:06,080 --> 00:07:13,440
and yeah wait for the

00:07:09,840 --> 00:07:16,960
test results so that nothing

00:07:13,440 --> 00:07:20,800
that it's not supposed to break breaks

00:07:16,960 --> 00:07:24,080
and maybe back out some code if

00:07:20,800 --> 00:07:26,880
that code breaks stuff the developer

00:07:24,080 --> 00:07:30,000
release is not done by the pumpkin

00:07:26,880 --> 00:07:33,599
but by somebody named the release

00:07:30,000 --> 00:07:38,400
manager that release manager

00:07:33,599 --> 00:07:38,400
could be anybody for example like me

00:07:38,880 --> 00:07:45,360
you basically don't have to do

00:07:42,080 --> 00:07:48,720
any or make any hard decisions because

00:07:45,360 --> 00:07:52,080
it's a developer release anyway so all

00:07:48,720 --> 00:07:55,520
the decisions are more or less easy

00:07:52,080 --> 00:07:58,639
either you back out a change that

00:07:55,520 --> 00:08:01,680
yeah didn't seem to compile

00:07:58,639 --> 00:08:04,720
or you leave it in i mean it is

00:08:01,680 --> 00:08:07,520
only this release that might be broken

00:08:04,720 --> 00:08:08,400
and within the next four weeks hopefully

00:08:07,520 --> 00:08:11,599
the fix

00:08:08,400 --> 00:08:14,400
or analysis comes in what

00:08:11,599 --> 00:08:14,400
actually broke

00:08:14,639 --> 00:08:22,240
you as a release manager you do get

00:08:18,800 --> 00:08:25,440
fewer git permissions than

00:08:22,240 --> 00:08:29,479
somebody doing this stable release

00:08:25,440 --> 00:08:33,120
but yeah i mean git is de-sensor

00:08:29,479 --> 00:08:36,479
decentralized so you don't actually need

00:08:33,120 --> 00:08:39,519
that much permissions and for

00:08:36,479 --> 00:08:42,719
most of the changes i've done

00:08:39,519 --> 00:08:45,920
i've submitted a pull request anyway

00:08:42,719 --> 00:08:47,279
so yeah the git permissions aren't

00:08:45,920 --> 00:08:54,080
really

00:08:47,279 --> 00:08:56,880
a bonus or an issue in any way

00:08:54,080 --> 00:08:57,600
yeah as i already said the stable

00:08:56,880 --> 00:09:00,320
release

00:08:57,600 --> 00:09:01,680
is an annual release that means every

00:09:00,320 --> 00:09:05,120
year

00:09:01,680 --> 00:09:08,720
in maybe april or march

00:09:05,120 --> 00:09:11,839
well second quarter we get a new

00:09:08,720 --> 00:09:14,560
stable power release this

00:09:11,839 --> 00:09:15,080
release gets an even version number like

00:09:14,560 --> 00:09:18,640
paul

00:09:15,080 --> 00:09:19,519
534 and the stable version before that

00:09:18,640 --> 00:09:23,600
was

00:09:19,519 --> 00:09:27,120
paul 5 32.

00:09:23,600 --> 00:09:30,000
and yeah this is the version of power

00:09:27,120 --> 00:09:33,360
that is used to keep the world spinning

00:09:30,000 --> 00:09:36,720
the developer releases a monthly

00:09:33,360 --> 00:09:39,120
around the 20th of each month

00:09:36,720 --> 00:09:41,040
i do prefer to do the release on the

00:09:39,120 --> 00:09:44,320
weekend so

00:09:41,040 --> 00:09:47,279
i sign up for the dates

00:09:44,320 --> 00:09:50,080
when the 20th is maybe a friday or

00:09:47,279 --> 00:09:52,880
saturday or sunday

00:09:50,080 --> 00:09:54,000
the developer releases to get an odd

00:09:52,880 --> 00:09:58,000
version number

00:09:54,000 --> 00:10:02,839
like the the current series is the 535

00:09:58,000 --> 00:10:04,720
series and ricardo has already released

00:10:02,839 --> 00:10:08,320
535.00 and

00:10:04,720 --> 00:10:14,320
i will be up next on the 20th

00:10:08,320 --> 00:10:17,279
of june to release 535.1

00:10:14,320 --> 00:10:18,240
with the developer releases yeah you get

00:10:17,279 --> 00:10:21,200
no support

00:10:18,240 --> 00:10:22,160
and if anything breaks using a developer

00:10:21,200 --> 00:10:25,200
releases

00:10:22,160 --> 00:10:28,000
you get to keep all the parts

00:10:25,200 --> 00:10:29,760
but the developer releases are still

00:10:28,000 --> 00:10:32,800
important because

00:10:29,760 --> 00:10:35,519
you can use them for cpan testing or for

00:10:32,800 --> 00:10:38,560
testing your own code

00:10:35,519 --> 00:10:41,360
just to keep up to date with perl and

00:10:38,560 --> 00:10:43,120
just to make sure that paul does not

00:10:41,360 --> 00:10:46,880
break your code

00:10:43,120 --> 00:10:49,200
and please do report back if

00:10:46,880 --> 00:10:50,959
your code gets broken by a pearl

00:10:49,200 --> 00:10:54,720
developer release

00:10:50,959 --> 00:10:57,519
so that the change can be assessed

00:10:54,720 --> 00:10:58,160
on the problem before the next stable

00:10:57,519 --> 00:11:01,839
release

00:10:58,160 --> 00:11:01,839
gets out

00:11:02,880 --> 00:11:09,120
yeah how can one become

00:11:06,079 --> 00:11:12,560
a release manager well first you need to

00:11:09,120 --> 00:11:15,519
want to be a release manager

00:11:12,560 --> 00:11:19,200
if you really want to do that then yeah

00:11:15,519 --> 00:11:19,200
you need to practice a bit

00:11:19,600 --> 00:11:23,120
then you register that you want to be a

00:11:22,000 --> 00:11:26,640
release manager

00:11:23,120 --> 00:11:29,519
for a given version

00:11:26,640 --> 00:11:30,480
and yeah then you just do the release

00:11:29,519 --> 00:11:33,360
and that's

00:11:30,480 --> 00:11:35,839
how you can carry the title release

00:11:33,360 --> 00:11:38,800
manager

00:11:35,839 --> 00:11:40,000
why would you want to do this well maybe

00:11:38,800 --> 00:11:43,839
for the fame

00:11:40,000 --> 00:11:44,640
of having a title um of release manager

00:11:43,839 --> 00:11:48,880
but

00:11:44,640 --> 00:11:52,399
yeah i think you should find fun

00:11:48,880 --> 00:11:56,079
in running such a release because

00:11:52,399 --> 00:11:59,360
yeah if you don't do it for fun

00:11:56,079 --> 00:12:02,480
i'm actually not sure what

00:11:59,360 --> 00:12:04,959
the why to do it fame

00:12:02,480 --> 00:12:05,600
i don't know if being a pearl release

00:12:04,959 --> 00:12:08,480
manager

00:12:05,600 --> 00:12:11,519
could give me a raise somewhere or maybe

00:12:08,480 --> 00:12:14,560
free entry entrance

00:12:11,519 --> 00:12:17,440
i don't know so

00:12:14,560 --> 00:12:19,040
yeah that leaves the next step of

00:12:17,440 --> 00:12:21,920
practicing

00:12:19,040 --> 00:12:21,920
a pearl release

00:12:23,360 --> 00:12:29,279
for practicing upper release well

00:12:26,800 --> 00:12:30,720
not just for practicing but also for

00:12:29,279 --> 00:12:33,440
real per release

00:12:30,720 --> 00:12:34,399
you will need to build perl several

00:12:33,440 --> 00:12:37,360
times

00:12:34,399 --> 00:12:38,320
so yes you should feel somewhat

00:12:37,360 --> 00:12:42,320
comfortable

00:12:38,320 --> 00:12:46,399
with building perl and with git

00:12:42,320 --> 00:12:49,440
um these steps basically are

00:12:46,399 --> 00:12:52,880
fetching the pulse source from the

00:12:49,440 --> 00:12:56,560
repository then updating some files

00:12:52,880 --> 00:12:59,920
compiling power several times

00:12:56,560 --> 00:13:03,200
and running the perl test suite

00:12:59,920 --> 00:13:05,760
several times and once you are satisfied

00:13:03,200 --> 00:13:07,839
then you build the release table and

00:13:05,760 --> 00:13:10,320
upload it and

00:13:07,839 --> 00:13:11,120
these five steps are basically

00:13:10,320 --> 00:13:13,839
everything

00:13:11,120 --> 00:13:13,839
you need to do

00:13:14,480 --> 00:13:21,440
but yeah to

00:13:17,680 --> 00:13:24,720
take a closer look at this there are

00:13:21,440 --> 00:13:25,519
some finer details the pulsar's code

00:13:24,720 --> 00:13:29,600
consists

00:13:25,519 --> 00:13:32,959
of the configure script meter config

00:13:29,600 --> 00:13:35,600
this is a shell script that runs as the

00:13:32,959 --> 00:13:39,199
first step of power compilation

00:13:35,600 --> 00:13:42,959
then the c source code that is

00:13:39,199 --> 00:13:44,959
somewhat modified by configure and

00:13:42,959 --> 00:13:49,360
of course the per modules that are

00:13:44,959 --> 00:13:52,399
distributed with the per core

00:13:49,360 --> 00:13:55,839
and some other stuff like test

00:13:52,399 --> 00:13:59,279
files file programs

00:13:55,839 --> 00:14:03,839
that are used for building pro

00:13:59,279 --> 00:14:03,839
and some other documentation

00:14:04,160 --> 00:14:11,199
so yeah

00:14:07,279 --> 00:14:14,880
these play together when compiling pow

00:14:11,199 --> 00:14:17,680
configure first creates a make file when

00:14:14,880 --> 00:14:20,240
you run the configure shell script

00:14:17,680 --> 00:14:23,360
and the make program then takes that

00:14:20,240 --> 00:14:27,120
make file and creates mini power

00:14:23,360 --> 00:14:28,160
anypol is a restricted poll that does

00:14:27,120 --> 00:14:30,480
not provide

00:14:28,160 --> 00:14:31,760
that many interfaces to your operating

00:14:30,480 --> 00:14:35,040
system

00:14:31,760 --> 00:14:37,360
but it's otherwise

00:14:35,040 --> 00:14:38,880
a good pulse so you have regular

00:14:37,360 --> 00:14:42,399
expressions and

00:14:38,880 --> 00:14:45,600
text managing and that is

00:14:42,399 --> 00:14:48,720
what minical is mostly used for because

00:14:45,600 --> 00:14:50,160
then make again uses mini power and

00:14:48,720 --> 00:14:52,560
another make file

00:14:50,160 --> 00:14:55,600
to build the final power for your

00:14:52,560 --> 00:14:55,600
operating system

00:14:56,320 --> 00:15:00,560
after you have built power you then run

00:14:59,040 --> 00:15:04,560
make test

00:15:00,560 --> 00:15:06,880
which uses paw to run the test suite and

00:15:04,560 --> 00:15:09,360
hopefully this gives you peace of mind

00:15:06,880 --> 00:15:11,360
because the test suite passes on your

00:15:09,360 --> 00:15:15,199
system

00:15:11,360 --> 00:15:17,440
usually the test suite passes completely

00:15:15,199 --> 00:15:18,720
but yeah depending on your operating

00:15:17,440 --> 00:15:22,959
system maybe there is

00:15:18,720 --> 00:15:26,240
one or two um long-standing failures

00:15:22,959 --> 00:15:29,279
and yes this is one of the

00:15:26,240 --> 00:15:30,720
decisions you as a release manager have

00:15:29,279 --> 00:15:34,480
to make

00:15:30,720 --> 00:15:37,040
to decide whether either that

00:15:34,480 --> 00:15:39,440
test failure is not important but the

00:15:37,040 --> 00:15:41,680
test stays in

00:15:39,440 --> 00:15:42,880
the test should be disabled for the

00:15:41,680 --> 00:15:46,240
release

00:15:42,880 --> 00:15:49,759
or whatever else

00:15:46,240 --> 00:15:49,759
could be done about this

00:15:51,680 --> 00:15:58,320
because as a release manager you will be

00:15:55,199 --> 00:15:59,680
building and rebuilding power several

00:15:58,320 --> 00:16:03,759
times

00:15:59,680 --> 00:16:07,040
it helps to reduce the manual

00:16:03,759 --> 00:16:07,680
effort to do so so yeah here are the two

00:16:07,040 --> 00:16:11,360
commands

00:16:07,680 --> 00:16:14,800
that you can use to build pawn

00:16:11,360 --> 00:16:17,680
first you run configure with des

00:16:14,800 --> 00:16:20,720
which basically means use all the

00:16:17,680 --> 00:16:23,920
default settings for building power

00:16:20,720 --> 00:16:26,560
and the use devil is

00:16:23,920 --> 00:16:29,040
the command line switch you need to use

00:16:26,560 --> 00:16:30,560
to automatically build a development

00:16:29,040 --> 00:16:34,320
release of pawn

00:16:30,560 --> 00:16:35,040
otherwise um the configure script will

00:16:34,320 --> 00:16:38,959
stop

00:16:35,040 --> 00:16:42,000
and tell you that you need to define

00:16:38,959 --> 00:16:45,040
the use devil uh command line

00:16:42,000 --> 00:16:46,000
or to use the the use level command line

00:16:45,040 --> 00:16:49,519
switch

00:16:46,000 --> 00:16:50,959
because yeah if you are doing building a

00:16:49,519 --> 00:16:53,680
development release

00:16:50,959 --> 00:16:56,720
you need to be explicit about wanting to

00:16:53,680 --> 00:16:59,360
build a development release

00:16:56,720 --> 00:17:00,160
and after configure has run you can

00:16:59,360 --> 00:17:03,199
directly

00:17:00,160 --> 00:17:05,280
run make test which then will run all

00:17:03,199 --> 00:17:07,919
the other steps building mini power

00:17:05,280 --> 00:17:10,240
building power and then running the test

00:17:07,919 --> 00:17:10,240
suite

00:17:13,679 --> 00:17:20,640
the test suite takes

00:17:16,720 --> 00:17:23,839
i think about 20 minutes to complete

00:17:20,640 --> 00:17:27,600
which yeah isn't that long

00:17:23,839 --> 00:17:30,720
overall but yeah if you

00:17:27,600 --> 00:17:33,919
just fixed one typo

00:17:30,720 --> 00:17:36,720
you should rerun the test tweak because

00:17:33,919 --> 00:17:40,000
maybe you introduced another typo or you

00:17:36,720 --> 00:17:43,600
even introduced a real bug or maybe

00:17:40,000 --> 00:17:46,960
breaking some code so yeah waiting

00:17:43,600 --> 00:17:51,200
20 minutes just to find another bug

00:17:46,960 --> 00:17:54,240
is yeah not satisfying so

00:17:51,200 --> 00:17:57,760
actually making yeah i see tux

00:17:54,240 --> 00:17:59,280
already set it um you really want to

00:17:57,760 --> 00:18:03,440
speed up building call

00:17:59,280 --> 00:18:07,280
and speed up the test suite

00:18:03,440 --> 00:18:07,919
building power can be made much faster

00:18:07,280 --> 00:18:12,080
by

00:18:07,919 --> 00:18:16,799
running the make process in parallel

00:18:12,080 --> 00:18:20,320
tax 20 cpus in your machine

00:18:16,799 --> 00:18:23,840
my machine has six cpus

00:18:20,320 --> 00:18:27,039
with 12 cars or something

00:18:23,840 --> 00:18:30,559
but yeah i found that um using eight

00:18:27,039 --> 00:18:33,760
core or eight threads of compilation

00:18:30,559 --> 00:18:34,720
um gives me the fastest result for my

00:18:33,760 --> 00:18:38,240
machine

00:18:34,720 --> 00:18:41,679
so yeah you first make the test

00:18:38,240 --> 00:18:42,000
or let's make perform all the tests for

00:18:41,679 --> 00:18:46,720
the

00:18:42,000 --> 00:18:51,440
test preparation with make dash j8

00:18:46,720 --> 00:18:55,280
test prep the j8 is the number of cpus

00:18:51,440 --> 00:18:58,080
to use and in my case 8 cpus

00:18:55,280 --> 00:18:58,880
and test prep is the target that

00:18:58,080 --> 00:19:01,760
prepares

00:18:58,880 --> 00:19:02,240
or let's make run everything just short

00:19:01,760 --> 00:19:06,000
of

00:19:02,240 --> 00:19:06,000
running the actual test suite

00:19:06,240 --> 00:19:12,880
yeah this part of the build process

00:19:09,760 --> 00:19:14,720
and then you of course also want to run

00:19:12,880 --> 00:19:18,240
the

00:19:14,720 --> 00:19:21,440
tests3 test suite in parallel

00:19:18,240 --> 00:19:22,480
and this is done by setting the harness

00:19:21,440 --> 00:19:25,760
options

00:19:22,480 --> 00:19:29,600
environment variable to j

00:19:25,760 --> 00:19:33,200
colon 8 different syntax but

00:19:29,600 --> 00:19:36,799
yeah that is it and then you run

00:19:33,200 --> 00:19:39,919
make test harness test harness is the

00:19:36,799 --> 00:19:43,520
make target for running the test suite

00:19:39,919 --> 00:19:43,520
potentially in parallel

00:19:43,760 --> 00:19:50,559
i see yes yes a comment by

00:19:47,360 --> 00:19:51,200
bruce gray yes it is impossible that

00:19:50,559 --> 00:19:54,559
this

00:19:51,200 --> 00:19:55,200
change or this commit could have broken

00:19:54,559 --> 00:19:58,080
anything

00:19:55,200 --> 00:19:58,640
so i don't need to rerun the test suite

00:19:58,080 --> 00:20:02,000
i have

00:19:58,640 --> 00:20:05,039
also done that and yes it's

00:20:02,000 --> 00:20:07,120
much better to lower the threshold of

00:20:05,039 --> 00:20:10,799
re-running the test suite

00:20:07,120 --> 00:20:14,159
then yeah to

00:20:10,799 --> 00:20:18,840
trust in my own hybris that

00:20:14,159 --> 00:20:20,159
my changes or my edits never break

00:20:18,840 --> 00:20:23,200
anything

00:20:20,159 --> 00:20:24,640
yes um running the test suite in

00:20:23,200 --> 00:20:27,919
parallel um

00:20:24,640 --> 00:20:29,200
also improves things with those parallel

00:20:27,919 --> 00:20:32,559
steps i think

00:20:29,200 --> 00:20:35,919
paul builds in under a minute

00:20:32,559 --> 00:20:39,440
and the test suite runs through in

00:20:35,919 --> 00:20:42,720
two minutes or something so yeah that's

00:20:39,440 --> 00:20:48,640
i can wait three minutes to see that

00:20:42,720 --> 00:20:52,480
my tail my change didn't break anything

00:20:48,640 --> 00:20:57,600
um yeah paul itself lives in git

00:20:52,480 --> 00:21:01,280
as its source code management system

00:20:57,600 --> 00:21:04,480
version control system sorry um

00:21:01,280 --> 00:21:05,600
so yeah you will also need some git

00:21:04,480 --> 00:21:09,120
commands

00:21:05,600 --> 00:21:13,280
and to be generally familiar with git

00:21:09,120 --> 00:21:16,880
but it's only like five git commands

00:21:13,280 --> 00:21:19,520
get checked out for yeah actually

00:21:16,880 --> 00:21:20,640
uh creating a directory with the pulse

00:21:19,520 --> 00:21:23,679
source code from

00:21:20,640 --> 00:21:26,880
repository and git pull

00:21:23,679 --> 00:21:27,360
to fetch the newest pole source code

00:21:26,880 --> 00:21:30,720
from

00:21:27,360 --> 00:21:33,919
the repository get clean

00:21:30,720 --> 00:21:37,120
dash dfx to wipe away

00:21:33,919 --> 00:21:40,559
everything that is not under git soft

00:21:37,120 --> 00:21:45,679
control and git add

00:21:40,559 --> 00:21:49,919
to add changes that you've made to files

00:21:45,679 --> 00:21:52,720
oh and git command to then

00:21:49,919 --> 00:21:53,200
um yeah combine all these changes you've

00:21:52,720 --> 00:21:56,960
added

00:21:53,200 --> 00:21:59,840
to a single commit that later can be

00:21:56,960 --> 00:21:59,840
published

00:22:04,080 --> 00:22:08,720
most of the core devs build and test

00:22:06,720 --> 00:22:12,000
perl frequently and most

00:22:08,720 --> 00:22:15,280
often in parallel yes

00:22:12,000 --> 00:22:17,600
yes so far or at least for me the

00:22:15,280 --> 00:22:18,559
power build process when running it in

00:22:17,600 --> 00:22:21,360
parallel

00:22:18,559 --> 00:22:23,760
has been quite stable the only

00:22:21,360 --> 00:22:24,559
interesting problem i've encountered so

00:22:23,760 --> 00:22:27,600
far

00:22:24,559 --> 00:22:30,720
has been trying to make test

00:22:27,600 --> 00:22:33,760
and make install both

00:22:30,720 --> 00:22:36,400
targets at the same time in parallel

00:22:33,760 --> 00:22:37,039
this doesn't work because make test

00:22:36,400 --> 00:22:40,400
creates

00:22:37,039 --> 00:22:43,200
files and then deletes them while

00:22:40,400 --> 00:22:45,919
make install will try to copy all these

00:22:43,200 --> 00:22:49,280
files even the temporary files

00:22:45,919 --> 00:22:52,640
but yeah the trick to

00:22:49,280 --> 00:22:55,600
around this is don't do it

00:22:52,640 --> 00:22:56,000
run make test in parallel and then run

00:22:55,600 --> 00:22:58,720
make

00:22:56,000 --> 00:23:00,640
install single threaded it's io bound

00:22:58,720 --> 00:23:03,600
anyway

00:23:00,640 --> 00:23:04,640
oh yes there is one more git command

00:23:03,600 --> 00:23:07,679
that you need to get

00:23:04,640 --> 00:23:11,120
push which then publishes

00:23:07,679 --> 00:23:13,600
your commits to the outer world

00:23:11,120 --> 00:23:15,200
that is to the mothership the pearl

00:23:13,600 --> 00:23:19,200
repository

00:23:15,200 --> 00:23:23,120
itself um

00:23:19,200 --> 00:23:27,039
yeah i've

00:23:23,120 --> 00:23:29,919
talked a bit about manual steps um

00:23:27,039 --> 00:23:31,679
i've given lots of talks about

00:23:29,919 --> 00:23:34,720
automating things

00:23:31,679 --> 00:23:37,919
so yes why

00:23:34,720 --> 00:23:40,799
is the pearl release process

00:23:37,919 --> 00:23:42,480
so manual well not so manual but why is

00:23:40,799 --> 00:23:46,159
does it still contain

00:23:42,480 --> 00:23:49,360
any manual steps anyway and

00:23:46,159 --> 00:23:50,080
yeah to automate something you have to

00:23:49,360 --> 00:23:53,520
understand

00:23:50,080 --> 00:23:56,159
it first step

00:23:53,520 --> 00:23:57,840
and you also have to understand the

00:23:56,159 --> 00:24:01,039
failure conditions

00:23:57,840 --> 00:24:04,240
that can occur and

00:24:01,039 --> 00:24:06,240
also especially understand how

00:24:04,240 --> 00:24:07,440
those failure conditions manifest

00:24:06,240 --> 00:24:10,720
themselves

00:24:07,440 --> 00:24:14,720
and how to recognize them i

00:24:10,720 --> 00:24:18,720
did yeah after most of my

00:24:14,720 --> 00:24:21,760
paul dev releases i automated a bit more

00:24:18,720 --> 00:24:25,120
wrote some

00:24:21,760 --> 00:24:28,799
small tool to automate a bit and

00:24:25,120 --> 00:24:31,440
yes if you do a power developer release

00:24:28,799 --> 00:24:32,880
maybe you find things that you want to

00:24:31,440 --> 00:24:36,559
write a pulse script for

00:24:32,880 --> 00:24:40,080
so that you can automate more parts of

00:24:36,559 --> 00:24:40,080
the perl release process

00:24:42,000 --> 00:24:46,400
once you feel familiar enough with

00:24:44,640 --> 00:24:49,440
building paw

00:24:46,400 --> 00:24:52,720
then you should register yourself

00:24:49,440 --> 00:24:56,960
as a release manager

00:24:52,720 --> 00:24:56,960
in oops oh

00:24:58,799 --> 00:25:02,559
yeah and well before you register

00:25:01,600 --> 00:25:06,000
yourself

00:25:02,559 --> 00:25:09,279
you should have at least one patch

00:25:06,000 --> 00:25:09,760
accepted but that can be a simple dock

00:25:09,279 --> 00:25:13,440
patch

00:25:09,760 --> 00:25:16,400
or yeah maybe fixing some http links

00:25:13,440 --> 00:25:17,840
or maybe some of the programs under

00:25:16,400 --> 00:25:20,000
porting

00:25:17,840 --> 00:25:23,600
there's always more documentation for

00:25:20,000 --> 00:25:26,640
these programs that can be written

00:25:23,600 --> 00:25:29,440
um yeah i think

00:25:26,640 --> 00:25:29,919
this requirement of having at least one

00:25:29,440 --> 00:25:33,440
patch

00:25:29,919 --> 00:25:34,640
accepted is mostly so that you've

00:25:33,440 --> 00:25:38,880
demonstrated

00:25:34,640 --> 00:25:42,799
that you can operate git well enough and

00:25:38,880 --> 00:25:46,159
yes can read the instructions on how to

00:25:42,799 --> 00:25:49,360
submit a change to pro

00:25:46,159 --> 00:25:54,159
in my case i registered

00:25:49,360 --> 00:25:54,159
by chatting with ricardo over ioc

00:25:54,559 --> 00:26:02,240
irc is not the the uh

00:25:59,039 --> 00:26:05,679
mandatory medium

00:26:02,240 --> 00:26:08,720
i think all the times before that

00:26:05,679 --> 00:26:12,799
i simply wrote a mail to

00:26:08,720 --> 00:26:15,600
the current pumpkin um

00:26:12,799 --> 00:26:16,000
yeah or the pumpkins wrote a general

00:26:15,600 --> 00:26:19,360
mail

00:26:16,000 --> 00:26:21,039
asking for volunteers to do pearl

00:26:19,360 --> 00:26:24,320
releases

00:26:21,039 --> 00:26:28,400
and i replied to these males well

00:26:24,320 --> 00:26:31,679
in this case yeah i traded ricardo up

00:26:28,400 --> 00:26:35,760
because we were trading anyway

00:26:31,679 --> 00:26:39,919
and yes so that's how i came

00:26:35,760 --> 00:26:43,679
to do the release on june 20th

00:26:39,919 --> 00:26:47,840
and yes depending on how well my setup

00:26:43,679 --> 00:26:48,799
works i hope to do a live stream and

00:26:47,840 --> 00:26:52,400
record it

00:26:48,799 --> 00:26:54,960
um on on twitch

00:26:52,400 --> 00:26:56,159
i'm not exactly sure if anybody is

00:26:54,960 --> 00:26:59,440
really interested

00:26:56,159 --> 00:27:02,080
in watching me type things and maybe

00:26:59,440 --> 00:27:05,760
ramble or talk about what i'm doing

00:27:02,080 --> 00:27:08,880
but yeah i'm going to try it anyway

00:27:05,760 --> 00:27:12,960
i mean it's not that it's much

00:27:08,880 --> 00:27:17,679
additional effort so yes i will

00:27:12,960 --> 00:27:17,679
try to live stream this software release

00:27:18,320 --> 00:27:22,960
yeah and then after you've registered

00:27:21,279 --> 00:27:26,000
and been accepted

00:27:22,960 --> 00:27:30,320
as a release manager

00:27:26,000 --> 00:27:30,320
you just have to do the release

00:27:30,720 --> 00:27:37,520
um the release consists of

00:27:33,840 --> 00:27:40,320
some preparation steps like being a

00:27:37,520 --> 00:27:43,840
release manager

00:27:40,320 --> 00:27:46,240
um then you prepare the release

00:27:43,840 --> 00:27:47,279
there's a section of the release

00:27:46,240 --> 00:27:50,159
manager's guide

00:27:47,279 --> 00:27:51,120
that tells you what steps to do you

00:27:50,159 --> 00:27:54,399
should be

00:27:51,120 --> 00:27:57,360
sure that paul currently compiles

00:27:54,399 --> 00:27:58,159
oh yes you should come up with an

00:27:57,360 --> 00:28:01,279
epigraph

00:27:58,159 --> 00:28:05,120
the epigraph is an except

00:28:01,279 --> 00:28:07,440
excerpt from a book or a poem

00:28:05,120 --> 00:28:08,159
or maybe a pop song i don't know

00:28:07,440 --> 00:28:11,360
something

00:28:08,159 --> 00:28:14,840
that inspires you personally as a

00:28:11,360 --> 00:28:16,640
release manager or that you found really

00:28:14,840 --> 00:28:19,279
interesting

00:28:16,640 --> 00:28:22,080
yeah and on the release day around the

00:28:19,279 --> 00:28:24,799
20th of the month

00:28:22,080 --> 00:28:26,399
again you follow the release manager's

00:28:24,799 --> 00:28:31,279
guide

00:28:26,399 --> 00:28:34,720
and yes preparing

00:28:31,279 --> 00:28:35,279
it's not hard and i really recommend

00:28:34,720 --> 00:28:39,679
that you

00:28:35,279 --> 00:28:39,679
join the ilc pearl arc

00:28:40,000 --> 00:28:46,880
irc server now the channel

00:28:43,120 --> 00:28:50,240
p5b there are many people there

00:28:46,880 --> 00:28:53,360
that did a power release and

00:28:50,240 --> 00:28:54,080
they are always friendly and helpful if

00:28:53,360 --> 00:28:57,440
you have

00:28:54,080 --> 00:29:00,080
a question about compiling paul or maybe

00:28:57,440 --> 00:29:02,640
like paul is not compiling on your

00:29:00,080 --> 00:29:07,279
system currently

00:29:02,640 --> 00:29:09,760
yes a major part of the preparations is

00:29:07,279 --> 00:29:13,120
thinking about the epigraph

00:29:09,760 --> 00:29:14,640
this is your main creative input as a

00:29:13,120 --> 00:29:19,120
release manager

00:29:14,640 --> 00:29:22,240
into a power release so yes

00:29:19,120 --> 00:29:25,679
find something that yeah

00:29:22,240 --> 00:29:27,760
you want to publish there with your

00:29:25,679 --> 00:29:30,799
release of poe

00:29:27,760 --> 00:29:34,240
people have already said it used poems

00:29:30,799 --> 00:29:36,720
pop literal literature or

00:29:34,240 --> 00:29:39,120
some other excerpts from text that may

00:29:36,720 --> 00:29:43,840
be irrelevant current events

00:29:39,120 --> 00:29:43,840
or whatever um

00:29:46,480 --> 00:29:50,240
yes for parrot releases i usually spend

00:29:49,120 --> 00:29:52,840
as much time

00:29:50,240 --> 00:29:54,000
selecting the epigram as doing the

00:29:52,840 --> 00:29:57,120
release

00:29:54,000 --> 00:30:00,559
i have to admit i still i have

00:29:57,120 --> 00:30:03,840
a short list of three or four potential

00:30:00,559 --> 00:30:04,320
candidates for the epigraph but yeah i'm

00:30:03,840 --> 00:30:07,679
not

00:30:04,320 --> 00:30:12,640
content with any of them yet so

00:30:07,679 --> 00:30:12,640
yes it's taking up some time for me too

00:30:12,880 --> 00:30:19,360
yeah on the release day

00:30:16,720 --> 00:30:20,559
you run through the release manager

00:30:19,360 --> 00:30:24,320
guide again

00:30:20,559 --> 00:30:28,000
you again do the pre-release steps

00:30:24,320 --> 00:30:31,360
oh on the release day itself

00:30:28,000 --> 00:30:34,720
don't panic imagine a picture from the

00:30:31,360 --> 00:30:37,840
hitchhiker's guide to the universe

00:30:34,720 --> 00:30:38,880
the release day should be on around the

00:30:37,840 --> 00:30:42,159
20th

00:30:38,880 --> 00:30:45,360
i mean there is very little reason

00:30:42,159 --> 00:30:48,799
to or there's very little code reason

00:30:45,360 --> 00:30:51,840
to postpone a developer release or

00:30:48,799 --> 00:30:55,279
stop a developer release so

00:30:51,840 --> 00:30:58,000
yes you should just make enough time

00:30:55,279 --> 00:31:00,480
on the day you've chosen and then do the

00:30:58,000 --> 00:31:03,760
release

00:31:00,480 --> 00:31:07,600
i found that the dev releases take

00:31:03,760 --> 00:31:11,039
maybe up to eight hours and yeah

00:31:07,600 --> 00:31:15,200
the more experience i get with them um

00:31:11,039 --> 00:31:18,559
the less time i need for doing

00:31:15,200 --> 00:31:20,480
a developer release i guess you could

00:31:18,559 --> 00:31:23,679
speed run it

00:31:20,480 --> 00:31:24,720
in like maybe two hours or something

00:31:23,679 --> 00:31:28,000
like that

00:31:24,720 --> 00:31:29,039
but yeah that means not waiting for any

00:31:28,000 --> 00:31:32,240
feedback

00:31:29,039 --> 00:31:34,000
of other testers actually testing the

00:31:32,240 --> 00:31:38,640
files you've produced

00:31:34,000 --> 00:31:38,640
so yeah there should be no hurry

00:31:39,600 --> 00:31:44,320
yeah and yeah basically doing the

00:31:42,720 --> 00:31:47,039
release

00:31:44,320 --> 00:31:49,840
also means simply following the release

00:31:47,039 --> 00:31:53,360
manager's guide

00:31:49,840 --> 00:31:56,960
and the p5p channel can help if you

00:31:53,360 --> 00:31:58,880
encounter problems or find that

00:31:56,960 --> 00:32:00,000
you feel like you've packed yourself

00:31:58,880 --> 00:32:05,679
into a corner with

00:32:00,000 --> 00:32:05,679
the git commits or anything don't panic

00:32:06,720 --> 00:32:11,120
i have already touched a bit on the

00:32:09,440 --> 00:32:14,320
automation part

00:32:11,120 --> 00:32:17,039
um yeah there still is

00:32:14,320 --> 00:32:17,600
a release manager and doing a poll

00:32:17,039 --> 00:32:20,640
release

00:32:17,600 --> 00:32:23,039
is still more than just running a single

00:32:20,640 --> 00:32:26,399
command

00:32:23,039 --> 00:32:27,360
i feel this is mostly because there are

00:32:26,399 --> 00:32:30,720
steps

00:32:27,360 --> 00:32:33,600
that can fail and

00:32:30,720 --> 00:32:35,039
recognizing that failure is hard at

00:32:33,600 --> 00:32:38,559
least for programs

00:32:35,039 --> 00:32:41,440
humans are much better at recognizing

00:32:38,559 --> 00:32:42,000
failure but if i wrote a program to

00:32:41,440 --> 00:32:46,080
automate

00:32:42,000 --> 00:32:47,519
some steps i also need to yeah make that

00:32:46,080 --> 00:32:50,799
program resilient

00:32:47,519 --> 00:32:54,159
in the sense that it recognizes when

00:32:50,799 --> 00:32:58,320
something goes wrong and

00:32:54,159 --> 00:33:02,320
yeah it ideally corrects the situation

00:32:58,320 --> 00:33:05,679
or at least stops the release process

00:33:02,320 --> 00:33:08,480
and yes if that program

00:33:05,679 --> 00:33:09,360
contains so much intelligence then i

00:33:08,480 --> 00:33:12,720
would also

00:33:09,360 --> 00:33:15,760
want some tests for it and

00:33:12,720 --> 00:33:19,679
writing test cases for hypothetical

00:33:15,760 --> 00:33:23,120
failures yeah

00:33:19,679 --> 00:33:26,559
a human can work better there

00:33:23,120 --> 00:33:31,120
with yeah some written instructions so

00:33:26,559 --> 00:33:33,760
yes so

00:33:31,120 --> 00:33:34,799
for example there is one step in the

00:33:33,760 --> 00:33:38,640
release where you

00:33:34,799 --> 00:33:41,840
install the old paul version and the new

00:33:38,640 --> 00:33:45,120
version into two separate directories

00:33:41,840 --> 00:33:48,960
and then you compare the list of

00:33:45,120 --> 00:33:52,559
installed files between those versions

00:33:48,960 --> 00:33:55,279
and yes that could maybe be written

00:33:52,559 --> 00:33:57,840
as a test that no new files get

00:33:55,279 --> 00:33:57,840
installed

00:33:58,159 --> 00:34:04,000
but that test doesn't help if actually

00:34:01,279 --> 00:34:07,039
new files get installed so

00:34:04,000 --> 00:34:08,399
either that test would need continuous

00:34:07,039 --> 00:34:10,480
adaptation

00:34:08,399 --> 00:34:11,919
whenever a file gets removed or

00:34:10,480 --> 00:34:15,839
installed

00:34:11,919 --> 00:34:17,679
or yeah one needs to present that list

00:34:15,839 --> 00:34:21,839
to a human and the human

00:34:17,679 --> 00:34:25,200
then needs to make an informed decision

00:34:21,839 --> 00:34:27,520
of whether this is okay or not let me

00:34:25,200 --> 00:34:27,520
just

00:34:28,240 --> 00:34:38,000
do a quick scroll down

00:34:34,320 --> 00:34:42,079
yeah so yeah that part

00:34:38,000 --> 00:34:46,320
of checking that that the this is empty

00:34:42,079 --> 00:34:50,079
um is not easily automated or

00:34:46,320 --> 00:34:53,280
sensibly automated um

00:34:50,079 --> 00:34:57,280
i do have some release managers

00:34:53,280 --> 00:35:01,040
tools written um

00:34:57,280 --> 00:35:04,880
yeah there are some tests like does dbi

00:35:01,040 --> 00:35:09,119
install does inline c install

00:35:04,880 --> 00:35:10,800
and i don't know there is a third module

00:35:09,119 --> 00:35:13,440
that gets

00:35:10,800 --> 00:35:14,320
also tested for installation i think can

00:35:13,440 --> 00:35:17,520
we update

00:35:14,320 --> 00:35:20,640
the c pen pm module

00:35:17,520 --> 00:35:21,760
something like that and yeah for these

00:35:20,640 --> 00:35:24,800
tests

00:35:21,760 --> 00:35:28,400
i've written a small power program that

00:35:24,800 --> 00:35:31,760
runs these tests and i think

00:35:28,400 --> 00:35:34,880
it is fairly stable and i will use it

00:35:31,760 --> 00:35:37,920
for my developer release

00:35:34,880 --> 00:35:39,760
um but yeah the yeah

00:35:37,920 --> 00:35:41,760
checking the disk between the old and

00:35:39,760 --> 00:35:45,839
the new version for example

00:35:41,760 --> 00:35:45,839
is something that i haven't done

00:35:46,480 --> 00:35:51,920
patches are always welcome either to my

00:35:49,599 --> 00:35:55,760
tools or to perl itself

00:35:51,920 --> 00:35:57,040
and ideally yeah you write and submit

00:35:55,760 --> 00:35:59,440
those pages

00:35:57,040 --> 00:36:01,680
while your memory is still fresh right

00:35:59,440 --> 00:36:04,240
after you've done a release

00:36:01,680 --> 00:36:04,240
of pro

00:36:05,440 --> 00:36:11,119
i've also written

00:36:09,040 --> 00:36:12,400
a dashboard of the current release

00:36:11,119 --> 00:36:15,200
process that

00:36:12,400 --> 00:36:17,839
displays some nice check marks for every

00:36:15,200 --> 00:36:21,680
stage of the release process

00:36:17,839 --> 00:36:25,200
that you have already passed

00:36:21,680 --> 00:36:28,480
um and yes that

00:36:25,200 --> 00:36:33,200
program is very short

00:36:28,480 --> 00:36:36,960
on basically or is just one step before

00:36:33,200 --> 00:36:40,079
automating some of these steps um

00:36:36,960 --> 00:36:40,400
i might use this dashboard at least when

00:36:40,079 --> 00:36:43,760
i

00:36:40,400 --> 00:36:46,800
stream uh the release and

00:36:43,760 --> 00:36:52,000
hopefully it will be then under this url

00:36:46,800 --> 00:36:52,000
https korean.net release dash

00:36:52,839 --> 00:36:58,400
5.35.1.html

00:36:55,040 --> 00:37:01,599
but yeah i will block and publish the

00:36:58,400 --> 00:37:05,440
url of the release

00:37:01,599 --> 00:37:08,599
dashboard um the problem is

00:37:05,440 --> 00:37:11,760
that there is no

00:37:08,599 --> 00:37:13,760
continuously advancing state while

00:37:11,760 --> 00:37:14,560
working through the release managers

00:37:13,760 --> 00:37:17,280
guide well

00:37:14,560 --> 00:37:18,720
no continuously advancing state on the

00:37:17,280 --> 00:37:21,440
file system

00:37:18,720 --> 00:37:22,960
while working through the release

00:37:21,440 --> 00:37:26,000
manager's guide

00:37:22,960 --> 00:37:29,359
so yeah

00:37:26,000 --> 00:37:32,000
recognizing which step you are at in the

00:37:29,359 --> 00:37:32,960
release manager's guide only through a

00:37:32,000 --> 00:37:35,119
pro pro or

00:37:32,960 --> 00:37:36,720
through any kind of program looking at

00:37:35,119 --> 00:37:40,240
the file system

00:37:36,720 --> 00:37:43,280
is unfortunately not possible

00:37:40,240 --> 00:37:46,400
so i'm not sure if that dashboard

00:37:43,280 --> 00:37:47,200
can really be used to automate more

00:37:46,400 --> 00:37:51,839
steps

00:37:47,200 --> 00:37:51,839
of doing a perl release

00:37:52,160 --> 00:37:59,920
so yeah that's these are my experiences

00:37:56,400 --> 00:38:03,040
and my opinions on

00:37:59,920 --> 00:38:06,320
doing a poll release but yes

00:38:03,040 --> 00:38:09,520
of course i want more i want

00:38:06,320 --> 00:38:12,880
more clean up pictures that yeah

00:38:09,520 --> 00:38:16,400
maybe clean up some text or clean up

00:38:12,880 --> 00:38:20,240
a small helper program in parting

00:38:16,400 --> 00:38:23,680
or maybe if you find drive by patches

00:38:20,240 --> 00:38:26,800
that linger in github and

00:38:23,680 --> 00:38:28,480
yeah still are basically sound from

00:38:26,800 --> 00:38:32,400
their intention

00:38:28,480 --> 00:38:33,200
or if your linux distribution or

00:38:32,400 --> 00:38:36,400
whatever

00:38:33,200 --> 00:38:39,119
operating system distribution patches

00:38:36,400 --> 00:38:40,640
pro or applies patches to its own

00:38:39,119 --> 00:38:44,079
version of palm

00:38:40,640 --> 00:38:47,599
those should also be folded into main

00:38:44,079 --> 00:38:51,200
stream palm so yes

00:38:47,599 --> 00:38:54,240
these are all good things to try

00:38:51,200 --> 00:38:58,000
the first or second patch to pull

00:38:54,240 --> 00:39:01,200
um yes by downstream

00:38:58,000 --> 00:39:03,520
downstream of course includes also other

00:39:01,200 --> 00:39:05,920
distributors of palm

00:39:03,520 --> 00:39:08,800
um not necessarily only linux

00:39:05,920 --> 00:39:08,800
distributions

00:39:08,880 --> 00:39:14,720
um so yeah what

00:39:12,640 --> 00:39:15,680
is good about the release manager's

00:39:14,720 --> 00:39:19,119
guide well

00:39:15,680 --> 00:39:22,720
it actually documents a set of steps

00:39:19,119 --> 00:39:26,560
to produce a perl release and

00:39:22,720 --> 00:39:26,560
the release manager's guide works

00:39:26,960 --> 00:39:31,119
once you've arrived at the end and

00:39:28,960 --> 00:39:33,280
followed all the steps

00:39:31,119 --> 00:39:35,680
you have actually produced a developer

00:39:33,280 --> 00:39:35,680
release

00:39:35,839 --> 00:39:42,240
and yes this is already one of the

00:39:39,200 --> 00:39:44,720
problems the release manager guide is

00:39:42,240 --> 00:39:44,720
actually

00:39:50,240 --> 00:39:54,079
contains the steps for a developer

00:39:53,119 --> 00:39:57,119
release

00:39:54,079 --> 00:40:00,960
and it also contains these steps for

00:39:57,119 --> 00:40:03,359
a final or stable pole release and

00:40:00,960 --> 00:40:04,079
yeah these steps are not in the same

00:40:03,359 --> 00:40:06,640
order and

00:40:04,079 --> 00:40:07,839
not the same between the two kinds of

00:40:06,640 --> 00:40:12,319
releases

00:40:07,839 --> 00:40:15,440
so yes you need to hop around

00:40:12,319 --> 00:40:18,880
when doing one kind of release

00:40:15,440 --> 00:40:21,680
so yeah that's not so great

00:40:18,880 --> 00:40:23,119
um about the release manager guide but

00:40:21,680 --> 00:40:27,440
on the other hand

00:40:23,119 --> 00:40:29,760
it still works um even if there's a bit

00:40:27,440 --> 00:40:33,839
of photo programming like

00:40:29,760 --> 00:40:36,400
if you haven't done this part

00:40:33,839 --> 00:40:37,839
do it now unless you are doing a

00:40:36,400 --> 00:40:41,040
developer release

00:40:37,839 --> 00:40:45,280
then do this part at the end

00:40:41,040 --> 00:40:48,319
of the release so yeah if anybody

00:40:45,280 --> 00:40:51,599
can rewrite this

00:40:48,319 --> 00:40:55,599
it would be great and

00:40:51,599 --> 00:40:59,359
yes thank you that's all i have to say

00:40:55,599 --> 00:41:01,839
i hope you found it interesting um

00:40:59,359 --> 00:41:02,640
are there any questions i think we still

00:41:01,839 --> 00:41:06,160
have

00:41:02,640 --> 00:41:07,839
some five minutes or something so if

00:41:06,160 --> 00:41:10,560
there are questions or

00:41:07,839 --> 00:41:12,960
comments um you have at least nine

00:41:10,560 --> 00:41:12,960
minutes

00:41:19,280 --> 00:41:26,800
abigail asked eight hours

00:41:22,319 --> 00:41:30,640
um and uh finds it a bit too high

00:41:26,800 --> 00:41:34,400
um no um

00:41:30,640 --> 00:41:38,160
the eight hours don't include editing

00:41:34,400 --> 00:41:43,599
for paul delta at least for me

00:41:38,160 --> 00:41:47,280
i think the eight hours

00:41:43,599 --> 00:41:50,880
i did my first release and didn't

00:41:47,280 --> 00:41:52,640
run the test suite in parallel so that

00:41:50,880 --> 00:41:56,560
yeah every test run

00:41:52,640 --> 00:41:58,720
takes up 20 minutes it's not actually

00:41:56,560 --> 00:41:59,599
eight hours of continuous work it's more

00:41:58,720 --> 00:42:02,240
like

00:41:59,599 --> 00:42:03,119
five minutes of work and then waiting 20

00:42:02,240 --> 00:42:05,520
minutes again

00:42:03,119 --> 00:42:06,480
for the test suite to complete which

00:42:05,520 --> 00:42:09,839
yeah

00:42:06,480 --> 00:42:13,040
isn't great yeah

00:42:09,839 --> 00:42:14,880
i was more wondering how did you manage

00:42:13,040 --> 00:42:16,400
to do that in eight hours because i

00:42:14,880 --> 00:42:20,240
usually took

00:42:16,400 --> 00:42:20,800
much more time and mostly because of the

00:42:20,240 --> 00:42:24,480
work for

00:42:20,800 --> 00:42:28,079
braille delta oh yeah i

00:42:24,480 --> 00:42:31,760
i did the

00:42:28,079 --> 00:42:35,760
data work um during before the

00:42:31,760 --> 00:42:39,599
before the release day mostly

00:42:35,760 --> 00:42:40,720
and yeah so that the final touches on

00:42:39,599 --> 00:42:44,720
the pearl delta

00:42:40,720 --> 00:42:47,760
are like i don't know um

00:42:44,720 --> 00:42:52,000
mostly updating the git commits

00:42:47,760 --> 00:42:54,480
but yeah nothing no creative work on

00:42:52,000 --> 00:42:57,440
release day

00:42:54,480 --> 00:42:58,800
eight hours on the release day seems

00:42:57,440 --> 00:43:01,520
seems in line with

00:42:58,800 --> 00:43:03,040
what what i used to to spend i was just

00:43:01,520 --> 00:43:04,560
wondering whether that eight hours

00:43:03,040 --> 00:43:07,599
included the uh

00:43:04,560 --> 00:43:08,240
doing the pearl delta but i was also

00:43:07,599 --> 00:43:10,960
doing that

00:43:08,240 --> 00:43:12,640
during uh during the time before the the

00:43:10,960 --> 00:43:15,359
release date but yeah

00:43:12,640 --> 00:43:18,400
it takes quite some time uh the pearl

00:43:15,359 --> 00:43:18,400
the work and build out

00:43:19,280 --> 00:43:25,520
yeah um

00:43:22,480 --> 00:43:28,800
what things have gone wrong from

00:43:25,520 --> 00:43:32,480
you neil asks i think

00:43:28,800 --> 00:43:36,560
i got caught up in some

00:43:32,480 --> 00:43:39,920
or waited during some git

00:43:36,560 --> 00:43:40,960
comments so yeah i had to back out a git

00:43:39,920 --> 00:43:45,520
commit

00:43:40,960 --> 00:43:48,880
and do a step again i don't

00:43:45,520 --> 00:43:53,839
i don't exactly remember what it was but

00:43:48,880 --> 00:43:56,160
yeah something like that um

00:43:53,839 --> 00:43:58,880
yeah somebody gave me the magic

00:43:56,160 --> 00:43:59,359
incantation to back out a commit from

00:43:58,880 --> 00:44:03,280
git

00:43:59,359 --> 00:44:07,040
and then do the commit correctly

00:44:03,280 --> 00:44:10,160
and yeah one a bit more harrowing

00:44:07,040 --> 00:44:12,000
thing was that i had built the release

00:44:10,160 --> 00:44:14,880
tarball on linux

00:44:12,000 --> 00:44:16,160
and then found that windows did not

00:44:14,880 --> 00:44:19,359
compile because

00:44:16,160 --> 00:44:21,839
um yeah some x

00:44:19,359 --> 00:44:22,560
some new function had been added to the

00:44:21,839 --> 00:44:25,680
api

00:44:22,560 --> 00:44:29,200
but not export or no some new function

00:44:25,680 --> 00:44:31,920
had been added but not listed in the api

00:44:29,200 --> 00:44:34,079
and if a function is added to perl but

00:44:31,920 --> 00:44:37,520
not listed in the perl api

00:44:34,079 --> 00:44:41,040
then it's not available on windows so

00:44:37,520 --> 00:44:44,800
yeah i now run

00:44:41,040 --> 00:44:48,000
the or check that compiles on windows

00:44:44,800 --> 00:44:48,880
in my preparations so that shouldn't

00:44:48,000 --> 00:44:52,240
happen to me

00:44:48,880 --> 00:44:55,359
anymore and yes the decision

00:44:52,240 --> 00:44:58,000
there was simply to back out that change

00:44:55,359 --> 00:44:58,000
that added

00:44:58,160 --> 00:45:02,960
the new function i think or maybe i

00:45:00,960 --> 00:45:05,920
added it to the perl api but

00:45:02,960 --> 00:45:09,200
i think i just baked it out and released

00:45:05,920 --> 00:45:09,200
it without that change

00:45:11,760 --> 00:45:18,720
yes carl's comment um of prodding

00:45:15,520 --> 00:45:23,520
developers to actually update paul delta

00:45:18,720 --> 00:45:26,160
with a short blurb about their change

00:45:23,520 --> 00:45:28,480
is important because it removes work

00:45:26,160 --> 00:45:31,200
from you as a release manager

00:45:28,480 --> 00:45:32,240
if people have already written a short

00:45:31,200 --> 00:45:36,400
text about

00:45:32,240 --> 00:45:39,359
their change um yeah it's

00:45:36,400 --> 00:45:42,079
at least while doing a release i'm not

00:45:39,359 --> 00:45:43,359
good at coming up with descriptive text

00:45:42,079 --> 00:45:46,240
or anything

00:45:43,359 --> 00:45:47,280
so having people who made the change

00:45:46,240 --> 00:45:51,760
right

00:45:47,280 --> 00:45:54,880
the change description is certainly good

00:45:51,760 --> 00:45:57,839
um jim asks do i have a

00:45:54,880 --> 00:45:59,119
separate machine available to me during

00:45:57,839 --> 00:46:02,160
dev releases

00:45:59,119 --> 00:46:05,599
yes i have a laptop that runs

00:46:02,160 --> 00:46:08,240
windows and they're building

00:46:05,599 --> 00:46:09,040
and running the test suite is slow like

00:46:08,240 --> 00:46:12,560
maybe

00:46:09,040 --> 00:46:15,280
half an hour or something but i use

00:46:12,560 --> 00:46:17,440
that to confirm that the current state

00:46:15,280 --> 00:46:21,119
still builds on windows

00:46:17,440 --> 00:46:24,800
um basically once i veer off

00:46:21,119 --> 00:46:24,800
from the black pearl

00:46:24,960 --> 00:46:29,359
repository state i start the build on

00:46:27,920 --> 00:46:33,280
the laptop

00:46:29,359 --> 00:46:36,319
and yeah hopefully that passes but

00:46:33,280 --> 00:46:39,680
usually i also run such builds

00:46:36,319 --> 00:46:43,920
on the five days before that um

00:46:39,680 --> 00:46:48,160
it doesn't take much attention

00:46:43,920 --> 00:46:53,200
but yeah that's it

00:46:48,160 --> 00:46:56,400
oh marine marine says that on zos

00:46:53,200 --> 00:46:59,839
built builds take 12 hours or more

00:46:56,400 --> 00:47:03,200
so yeah then 20 minutes would be great

00:46:59,839 --> 00:47:05,920
but yeah as you are not actually doing

00:47:03,200 --> 00:47:10,160
development or anything

00:47:05,920 --> 00:47:12,560
um the quicker the turnaround is the

00:47:10,160 --> 00:47:12,560
better

00:47:12,960 --> 00:47:18,880
um bruce asks

00:47:16,560 --> 00:47:20,559
is there anything about paul that makes

00:47:18,880 --> 00:47:23,520
it a bad candidate for

00:47:20,559 --> 00:47:24,800
ci continuous integration continuous

00:47:23,520 --> 00:47:28,000
deployment

00:47:24,800 --> 00:47:31,200
pipeline for development to avoid

00:47:28,000 --> 00:47:34,720
things like that api on windows issue

00:47:31,200 --> 00:47:39,280
um perl already has for

00:47:34,720 --> 00:47:42,720
on github with github actions

00:47:39,280 --> 00:47:46,319
such as ci ocd pipeline

00:47:42,720 --> 00:47:46,640
one of the problems is that the i think

00:47:46,319 --> 00:47:52,800
the

00:47:46,640 --> 00:47:56,720
build with msvc the free version msvc

00:47:52,800 --> 00:48:00,480
or something is now broken because the

00:47:56,720 --> 00:48:04,240
free version of msvc is not available

00:48:00,480 --> 00:48:07,200
for anonymous download anymore

00:48:04,240 --> 00:48:09,920
and another problem is that the cygwin

00:48:07,200 --> 00:48:12,000
builds have constant failures and it's

00:48:09,920 --> 00:48:15,040
unclear

00:48:12,000 --> 00:48:18,800
what part of the github vm

00:48:15,040 --> 00:48:21,440
setup is problematic there but

00:48:18,800 --> 00:48:21,920
in principle the information is there

00:48:21,440 --> 00:48:24,400
and

00:48:21,920 --> 00:48:25,680
the daily smoke or not daily but for

00:48:24,400 --> 00:48:29,920
every commit

00:48:25,680 --> 00:48:33,119
there will be such a smoke run um

00:48:29,920 --> 00:48:33,760
yeah so that's already there but i think

00:48:33,119 --> 00:48:37,359
the

00:48:33,760 --> 00:48:40,960
problem was before github had actions

00:48:37,359 --> 00:48:43,359
so yeah it was like maybe five years ago

00:48:40,960 --> 00:48:46,240
or something that's opportunity for

00:48:43,359 --> 00:48:46,240
somebody to

00:48:46,400 --> 00:48:53,119
help the process in yet another way

00:48:49,920 --> 00:48:53,119
yeah thank you

00:48:55,440 --> 00:49:00,640
okay so if you have any more questions

00:48:58,800 --> 00:49:04,319
feel free to send me a mail

00:49:00,640 --> 00:49:07,280
or treat me up in slack and

00:49:04,319 --> 00:49:10,880
yeah thank you for your attention and i

00:49:07,280 --> 00:49:10,880
hope you enjoy the conference

00:49:11,079 --> 00:49:14,079

YouTube URL: https://www.youtube.com/watch?v=LaNZu1aBEzE


