Title: perlimports or "Where did that symbol come from?" - Olaf Alders
Publication date: 2021-06-08
Playlist: TPC 2021 in the Cloud
Description: 
	Perl import statements (like "use POSIX;") allow you to import symbols into your package, but they also allow lots of other shenanigans to take place. We'll explore avoiding pitfalls when importing modules, implementing best practices when importing and how to automate this via App::perlimports.

This talk will be made up of several parts.

How imports work

This will include a discussion of Exporter, Sub::Exporter and Import::Into. It will probably include some examples of other unexpected behaviour that may take place when Foo import is called.

We will discuss why knowing what every CPAN module exports is almost impossible, but we'll review some techniques which we can use to maximize the number of modules we can reliably inspect for exports. There will be a brief discussion on how Import::Into can be used to create your own pragmas, or even your own flavour of Moose.

Why imports can introduce a maintenance burden on new and even experienced Perl programmers

Unmanaged import statements allow many unused symbols to be imported into existing code. Bare import statements and even import tags make it hard to discover where functions and other symbols originate from. Managing existing import statements gives us a chance to make code more readable, clarify the origin of imported symbols, remove unused dependencies and even speed up code compilation.

There will be a brief discussion of existing Perl::Critic policies which try to address this. We will look at using dump-perl-exports as a tool to discover what a module really exports.

App::perlimports

Bare imports and import tags provide the code author with a convenience, but this can come at the cost of readability for everyone else. We will walk through using perlimports from the command line and see how it attempts to clean up import statements in a selection of a code, a file or even an entire codebase. We will discuss how to use similar techniques with a simple vim integration, so that imports can be cleaned up directly in the vim editor. If does not present itself as a workable solution for an audience member, the preceding discussion should provide some food for thought as to how technical debt on an existing code base can be reduced through wise use of import statements.
Captions: 
	00:00:00,000 --> 00:00:03,360
uh we can start whenever you're ready

00:00:05,920 --> 00:00:10,080
uh okay uh everyone can hear me i'm

00:00:07,919 --> 00:00:12,960
ready

00:00:10,080 --> 00:00:14,320
uh and okay can you see my slides i

00:00:12,960 --> 00:00:17,359
guess hopefully

00:00:14,320 --> 00:00:17,840
um yeah all right appreciate the thumbs

00:00:17,359 --> 00:00:19,840
up uh

00:00:17,840 --> 00:00:21,119
if anybody has any more beer jokes uh

00:00:19,840 --> 00:00:21,680
feel free to get those out of the way

00:00:21,119 --> 00:00:24,880
and chat

00:00:21,680 --> 00:00:26,320
i always appreciate them that's uh this

00:00:24,880 --> 00:00:30,080
is my pandemic project

00:00:26,320 --> 00:00:31,760
um so uh my name's olaf alders

00:00:30,080 --> 00:00:33,600
uh today i want to talk about a little

00:00:31,760 --> 00:00:34,960
project called pearl imports uh that

00:00:33,600 --> 00:00:36,800
helps you find out where symbols come

00:00:34,960 --> 00:00:38,879
from

00:00:36,800 --> 00:00:40,640
before i start that i just want to thank

00:00:38,879 --> 00:00:42,239
the organizers for allowing me to speak

00:00:40,640 --> 00:00:43,680
today and for all the efforts they put

00:00:42,239 --> 00:00:45,120
into a conference like this i know

00:00:43,680 --> 00:00:47,200
you know this a lot of works and i do

00:00:45,120 --> 00:00:49,920
really appreciate that um

00:00:47,200 --> 00:00:51,360
now i know i a lot of people here are

00:00:49,920 --> 00:00:52,399
very familiar with the concepts they're

00:00:51,360 --> 00:00:53,920
going to talk about but i didn't really

00:00:52,399 --> 00:00:54,399
want to assume too much prior knowledge

00:00:53,920 --> 00:00:56,960
so i'm

00:00:54,399 --> 00:01:00,079
i'm going to start by breaking things

00:00:56,960 --> 00:01:03,199
down in a really a really basic way

00:01:00,079 --> 00:01:06,240
okay uh let's see

00:01:03,199 --> 00:01:08,720
okay did my screen uh did we toggle to

00:01:06,240 --> 00:01:10,640
the next slide there

00:01:08,720 --> 00:01:12,560
yes okay great okay so everything's

00:01:10,640 --> 00:01:14,640
working okay so uh

00:01:12,560 --> 00:01:15,600
the initial problem is basically what

00:01:14,640 --> 00:01:18,799
got the small

00:01:15,600 --> 00:01:20,400
snippet of code and there's a uh three

00:01:18,799 --> 00:01:22,240
line a three character word in their get

00:01:20,400 --> 00:01:26,080
and the question is

00:01:22,240 --> 00:01:28,240
where does that come from uh

00:01:26,080 --> 00:01:29,119
if you're familiar with http request

00:01:28,240 --> 00:01:30,240
common uh

00:01:29,119 --> 00:01:32,400
then you probably already know the

00:01:30,240 --> 00:01:34,400
answers to this if you're not then it's

00:01:32,400 --> 00:01:35,680
a bit more difficult

00:01:34,400 --> 00:01:37,920
you see that there's this get in the

00:01:35,680 --> 00:01:38,640
code uh you grep for it to see where

00:01:37,920 --> 00:01:41,600
it's defined

00:01:38,640 --> 00:01:42,960
you won't be able to find it you might

00:01:41,600 --> 00:01:44,240
ask yourself is this some kind of a

00:01:42,960 --> 00:01:46,159
pearl built in

00:01:44,240 --> 00:01:48,320
did it appear by magic and in a way it

00:01:46,159 --> 00:01:52,720
kind of did appear by magic

00:01:48,320 --> 00:01:55,520
and the magic is the exporter module

00:01:52,720 --> 00:01:57,360
and uh the exporter module when you use

00:01:55,520 --> 00:01:58,880
a module without any arguments exporter

00:01:57,360 --> 00:02:01,439
looks for an array called

00:01:58,880 --> 00:02:03,040
export it imports everything that's

00:02:01,439 --> 00:02:03,840
listed into that array into the calling

00:02:03,040 --> 00:02:06,000
package

00:02:03,840 --> 00:02:07,680
and now you can use all the functions uh

00:02:06,000 --> 00:02:08,239
without having to use a fully qualified

00:02:07,680 --> 00:02:11,200
name like

00:02:08,239 --> 00:02:12,560
http request common get those are just

00:02:11,200 --> 00:02:14,319
available to you

00:02:12,560 --> 00:02:15,920
that's a very convenient but from an

00:02:14,319 --> 00:02:17,440
outsider's perspective it can be very

00:02:15,920 --> 00:02:19,120
confusing

00:02:17,440 --> 00:02:20,239
and keep in mind an outsider doesn't

00:02:19,120 --> 00:02:21,280
have to be someone who's new to pearl

00:02:20,239 --> 00:02:22,000
they might just be someone who's

00:02:21,280 --> 00:02:25,200
actually not familiar

00:02:22,000 --> 00:02:27,520
with this module so the question is

00:02:25,200 --> 00:02:28,879
can we make this a little bit clearer

00:02:27,520 --> 00:02:31,440
and and we can

00:02:28,879 --> 00:02:33,200
exporter has a another array called

00:02:31,440 --> 00:02:36,640
export okay

00:02:33,200 --> 00:02:38,800
and in that you can also

00:02:36,640 --> 00:02:41,360
define other symbol names that you want

00:02:38,800 --> 00:02:44,640
to be exportable on demand

00:02:41,360 --> 00:02:47,200
so when you

00:02:44,640 --> 00:02:48,080
pass arguments to a module that's using

00:02:47,200 --> 00:02:50,319
exporter

00:02:48,080 --> 00:02:51,760
it will check to see does this thing

00:02:50,319 --> 00:02:52,480
that you're asking for does it exist in

00:02:51,760 --> 00:02:54,480
export

00:02:52,480 --> 00:02:56,080
at export does it exist in ad export

00:02:54,480 --> 00:02:56,720
okay and if it matches what are those

00:02:56,080 --> 00:02:59,120
symbols then

00:02:56,720 --> 00:03:00,400
it provides it to you uh there's

00:02:59,120 --> 00:03:01,599
something else called import tags and

00:03:00,400 --> 00:03:02,319
we'll get to that a little bit later but

00:03:01,599 --> 00:03:05,200
that this is

00:03:02,319 --> 00:03:06,159
essentially um sort of the gist of it

00:03:05,200 --> 00:03:08,720
and

00:03:06,159 --> 00:03:09,920
the idea is that in these cases here so

00:03:08,720 --> 00:03:11,599
in the first case now we've just

00:03:09,920 --> 00:03:12,560
explicitly asked for something called

00:03:11,599 --> 00:03:15,040
get

00:03:12,560 --> 00:03:16,800
and and we are receiving it and the

00:03:15,040 --> 00:03:18,480
second instance we're asking for some

00:03:16,800 --> 00:03:20,159
called delete and we're receiving that

00:03:18,480 --> 00:03:22,400
as well so now

00:03:20,159 --> 00:03:24,000
when we try to grab the code base these

00:03:22,400 --> 00:03:25,840
things are discoverable so they start to

00:03:24,000 --> 00:03:27,360
make a little bit more sense

00:03:25,840 --> 00:03:29,920
the other good thing about it is we

00:03:27,360 --> 00:03:32,560
didn't import all these other things

00:03:29,920 --> 00:03:33,680
that we didn't ask for so we now have

00:03:32,560 --> 00:03:36,480
sort of like less

00:03:33,680 --> 00:03:38,400
code to worry about now what's an

00:03:36,480 --> 00:03:40,319
exportable symbol as far as exporter is

00:03:38,400 --> 00:03:43,200
concerned uh

00:03:40,319 --> 00:03:44,000
it could it's quite flexible so it could

00:03:43,200 --> 00:03:45,200
be a function

00:03:44,000 --> 00:03:47,680
uh it could be a function that we're

00:03:45,200 --> 00:03:48,319
actually uh prefixing explicitly within

00:03:47,680 --> 00:03:49,599
ampersand

00:03:48,319 --> 00:03:51,360
it could be a scalar it could be an

00:03:49,599 --> 00:03:52,640
array it could be hash it could even be

00:03:51,360 --> 00:03:55,519
a type glob so

00:03:52,640 --> 00:03:57,360
it really allows you to to share a lot

00:03:55,519 --> 00:04:00,400
of things

00:03:57,360 --> 00:04:01,760
uh and and so some of the more egregious

00:04:00,400 --> 00:04:03,599
examples would be

00:04:01,760 --> 00:04:05,519
if you're going to use posix uh not a

00:04:03,599 --> 00:04:07,760
lot of people don't realize this but

00:04:05,519 --> 00:04:08,640
just this sort of used posix in the

00:04:07,760 --> 00:04:12,000
statement there

00:04:08,640 --> 00:04:13,120
that will import 582 symbols into your

00:04:12,000 --> 00:04:16,239
package

00:04:13,120 --> 00:04:19,199
if you sock it you get 170.

00:04:16,239 --> 00:04:20,639
um so there's really a lot of stuff

00:04:19,199 --> 00:04:22,479
that's going on there and

00:04:20,639 --> 00:04:24,560
you might occasionally come across some

00:04:22,479 --> 00:04:26,479
legacy code that just says use pausing

00:04:24,560 --> 00:04:27,840
tonight and so you've got like a 5000

00:04:26,479 --> 00:04:29,280
line file and then you're asking

00:04:27,840 --> 00:04:31,199
yourself

00:04:29,280 --> 00:04:32,560
which of the 582 things are actually

00:04:31,199 --> 00:04:34,720
using in this file

00:04:32,560 --> 00:04:36,080
or can i even get rid of it and those

00:04:34,720 --> 00:04:37,600
questions become a little bit harder to

00:04:36,080 --> 00:04:41,199
answer

00:04:37,600 --> 00:04:43,600
and that brings us to uh chekhov's gun

00:04:41,199 --> 00:04:45,280
so uh checkup was a russian playwright

00:04:43,600 --> 00:04:47,600
and this quote attributed to him says

00:04:45,280 --> 00:04:49,280
remove everything that has no relevance

00:04:47,600 --> 00:04:50,800
to the story if you say in the first

00:04:49,280 --> 00:04:51,680
chapter that there's a rifle hanging on

00:04:50,800 --> 00:04:53,199
the wall

00:04:51,680 --> 00:04:55,199
in the second or third chapter it

00:04:53,199 --> 00:04:56,639
absolutely must go off if it's not going

00:04:55,199 --> 00:04:58,160
to be fired it shouldn't be hanging

00:04:56,639 --> 00:05:01,199
there

00:04:58,160 --> 00:05:01,919
and so the idea is when we're writing

00:05:01,199 --> 00:05:04,320
codes

00:05:01,919 --> 00:05:05,440
uh red herrings are not helpful if

00:05:04,320 --> 00:05:06,880
you're going to

00:05:05,440 --> 00:05:08,720
put something in your code you should

00:05:06,880 --> 00:05:10,880
use it uh

00:05:08,720 --> 00:05:11,759
and so this this principle of check ops

00:05:10,880 --> 00:05:13,280
gun is is

00:05:11,759 --> 00:05:14,800
really helpful to keep in mind when

00:05:13,280 --> 00:05:17,199
you're writing code

00:05:14,800 --> 00:05:18,160
now checkout's gun brings us to the next

00:05:17,199 --> 00:05:21,280
principle which is

00:05:18,160 --> 00:05:22,039
chaster and spence and this was inspired

00:05:21,280 --> 00:05:25,840
by a

00:05:22,039 --> 00:05:25,840
1929 book called the thing

00:05:28,240 --> 00:05:31,280
and in it essentially what chesterton is

00:05:30,240 --> 00:05:33,360
saying is

00:05:31,280 --> 00:05:35,520
do not remove a fence until you know why

00:05:33,360 --> 00:05:37,120
it was put up in the first place

00:05:35,520 --> 00:05:39,280
and started to expand on this quote i've

00:05:37,120 --> 00:05:41,199
grabbed from this blog here they say

00:05:39,280 --> 00:05:42,560
fences don't grow out of the ground nor

00:05:41,199 --> 00:05:44,240
do people build them in their sleep or

00:05:42,560 --> 00:05:46,000
during a fit of madness

00:05:44,240 --> 00:05:47,919
fences are built by people who carefully

00:05:46,000 --> 00:05:48,560
plan them out and had some reason for

00:05:47,919 --> 00:05:50,000
thinking

00:05:48,560 --> 00:05:52,080
that the fence would be a good thing for

00:05:50,000 --> 00:05:53,600
everybody or for somebody

00:05:52,080 --> 00:05:55,919
so until we establish that reason we

00:05:53,600 --> 00:05:58,240
have no business taking an axe to it

00:05:55,919 --> 00:06:00,000
the reason might not be a good one or a

00:05:58,240 --> 00:06:03,600
relevant one

00:06:00,000 --> 00:06:04,479
sorry we just need to be aware of what

00:06:03,600 --> 00:06:06,080
the reason is

00:06:04,479 --> 00:06:08,000
otherwise we may end up with unintended

00:06:06,080 --> 00:06:09,520
consequences second and third order

00:06:08,000 --> 00:06:11,120
effects we don't want spreading like

00:06:09,520 --> 00:06:12,240
ripples on a pawn and causing damage for

00:06:11,120 --> 00:06:15,120
years

00:06:12,240 --> 00:06:16,240
so this reads like a principle created

00:06:15,120 --> 00:06:17,919
explicitly for software

00:06:16,240 --> 00:06:19,440
design in production systems it's a good

00:06:17,919 --> 00:06:20,800
idea not to remove anything

00:06:19,440 --> 00:06:22,479
until you know exactly why it was there

00:06:20,800 --> 00:06:23,440
in the first place you don't want to set

00:06:22,479 --> 00:06:24,800
some kind of

00:06:23,440 --> 00:06:27,360
chain of events into motion that you

00:06:24,800 --> 00:06:28,960
hadn't intended and module imports and

00:06:27,360 --> 00:06:30,639
other code are a little bit like this

00:06:28,960 --> 00:06:32,960
before we change them before we remove

00:06:30,639 --> 00:06:34,560
them we need to understand why they were

00:06:32,960 --> 00:06:37,759
there in the first place

00:06:34,560 --> 00:06:38,479
and this becomes much easier if we know

00:06:37,759 --> 00:06:40,560
that previously

00:06:38,479 --> 00:06:41,759
we've been adhering to chekhov's gun so

00:06:40,560 --> 00:06:43,759
if there's something that's there it's

00:06:41,759 --> 00:06:45,440
because we want to use it

00:06:43,759 --> 00:06:47,199
and then we can apply chesterton's fence

00:06:45,440 --> 00:06:48,000
which says let's figure out why we need

00:06:47,199 --> 00:06:49,440
to use it

00:06:48,000 --> 00:06:51,039
and then we can figure out if we can get

00:06:49,440 --> 00:06:53,039
rid of it

00:06:51,039 --> 00:06:54,720
so the question is could we actually

00:06:53,039 --> 00:06:58,560
automate something like this

00:06:54,720 --> 00:07:00,639
and uh yes or no so

00:06:58,560 --> 00:07:01,759
we can get fairly far just by grabbing

00:07:00,639 --> 00:07:02,400
through the code and digging around for

00:07:01,759 --> 00:07:04,240
docs like

00:07:02,400 --> 00:07:05,759
like we saw in the first example if

00:07:04,240 --> 00:07:06,960
you're grabbing on get and it's not

00:07:05,759 --> 00:07:09,199
explicitly being

00:07:06,960 --> 00:07:10,160
called in the import you won't get very

00:07:09,199 --> 00:07:11,680
far

00:07:10,160 --> 00:07:14,240
you will have to start digging through

00:07:11,680 --> 00:07:17,520
module documentation

00:07:14,240 --> 00:07:18,479
if that module has 30 other modules that

00:07:17,520 --> 00:07:20,000
it's included

00:07:18,479 --> 00:07:21,280
you know you may find yourself digging

00:07:20,000 --> 00:07:23,120
through a fair amount of docs before you

00:07:21,280 --> 00:07:27,599
get to the answer that you need

00:07:23,120 --> 00:07:30,880
and that brings us to go imports and

00:07:27,599 --> 00:07:33,199
i've been writing some go at work and um

00:07:30,880 --> 00:07:35,120
through the vimgo plugin you

00:07:33,199 --> 00:07:37,120
automatically have access to go imports

00:07:35,120 --> 00:07:39,680
which is a really nice little utility

00:07:37,120 --> 00:07:41,360
which by definition uh it just updates

00:07:39,680 --> 00:07:42,880
your go import lines

00:07:41,360 --> 00:07:45,280
adding missing ones and removing

00:07:42,880 --> 00:07:46,800
unreferenced ones so in the imports

00:07:45,280 --> 00:07:49,120
there are sort of analogies to pearl

00:07:46,800 --> 00:07:50,560
because the imports there are over

00:07:49,120 --> 00:07:52,479
external libraries that you're pulling

00:07:50,560 --> 00:07:54,080
into your code

00:07:52,479 --> 00:07:55,759
i would give you a live demo of this but

00:07:54,080 --> 00:07:57,280
i realized on this machine that go and

00:07:55,759 --> 00:07:59,360
ports isn't working for me but

00:07:57,280 --> 00:08:00,960
trust me it's magnificent and

00:07:59,360 --> 00:08:04,560
essentially here in this go code

00:08:00,960 --> 00:08:05,840
which doesn't really do that much um

00:08:04,560 --> 00:08:07,440
we're just pulling in some standard

00:08:05,840 --> 00:08:08,479
libraries and then using a third-party

00:08:07,440 --> 00:08:12,080
library just to

00:08:08,479 --> 00:08:13,599
to look up a country code but right here

00:08:12,080 --> 00:08:15,199
at the top you can see these are the

00:08:13,599 --> 00:08:18,080
libraries that are provided to us

00:08:15,199 --> 00:08:19,280
by the go language itself and go imports

00:08:18,080 --> 00:08:20,319
has organized them at the top

00:08:19,280 --> 00:08:22,560
alphabetically

00:08:20,319 --> 00:08:24,879
then it leaves a blank line and then it

00:08:22,560 --> 00:08:28,479
includes third-party libraries

00:08:24,879 --> 00:08:30,000
and that's essentially it so um

00:08:28,479 --> 00:08:31,840
if you remove any of these libraries

00:08:30,000 --> 00:08:32,399
from the code like say um this one's

00:08:31,840 --> 00:08:34,800
actually called

00:08:32,399 --> 00:08:36,479
thumped i believe the pronunciation if i

00:08:34,800 --> 00:08:39,519
remove uh those lines

00:08:36,479 --> 00:08:41,440
it like say this one here and that one

00:08:39,519 --> 00:08:43,039
if i then uh save the file and call go

00:08:41,440 --> 00:08:46,080
imports this line

00:08:43,039 --> 00:08:48,240
uh here will magically disappear uh

00:08:46,080 --> 00:08:49,519
if i go and try to reorder these import

00:08:48,240 --> 00:08:51,839
statements and call

00:08:49,519 --> 00:08:54,160
go imports again it will reorder them to

00:08:51,839 --> 00:08:56,320
the order that it wanted them to be in

00:08:54,160 --> 00:08:57,760
and again if i no longer use this third

00:08:56,320 --> 00:08:59,839
party library that will just disappear

00:08:57,760 --> 00:09:01,360
from the imports so it's it's

00:08:59,839 --> 00:09:03,839
kind of really basic thing but it's nice

00:09:01,360 --> 00:09:05,440
because it takes mundane tasks

00:09:03,839 --> 00:09:07,279
and it means that i don't have to worry

00:09:05,440 --> 00:09:10,720
about them

00:09:07,279 --> 00:09:12,880
uh so can we write pearl imports yes

00:09:10,720 --> 00:09:14,720
uh will it be as good as go on ports uh

00:09:12,880 --> 00:09:16,160
no it won't there's

00:09:14,720 --> 00:09:18,320
uh and there are reasons for that we'll

00:09:16,160 --> 00:09:20,240
go into those uh so

00:09:18,320 --> 00:09:22,240
the problem with imports of pearl is

00:09:20,240 --> 00:09:23,360
there's no one standard for importing

00:09:22,240 --> 00:09:25,440
symbols

00:09:23,360 --> 00:09:26,560
and also it's it's off to the author

00:09:25,440 --> 00:09:30,080
decide what happens

00:09:26,560 --> 00:09:31,760
in the import method so if we

00:09:30,080 --> 00:09:33,120
go right back to when you're first

00:09:31,760 --> 00:09:36,160
learning about pearl

00:09:33,120 --> 00:09:37,920
the the first thing probably use we tell

00:09:36,160 --> 00:09:39,200
people say on stack overflow is you need

00:09:37,920 --> 00:09:41,920
to use strict use warnings

00:09:39,200 --> 00:09:43,200
and those are imports uh by themselves

00:09:41,920 --> 00:09:44,880
they may not realize it but they're

00:09:43,200 --> 00:09:48,080
using module strict.pm

00:09:44,880 --> 00:09:50,240
and warning style pm and we we tell them

00:09:48,080 --> 00:09:51,920
that we uh

00:09:50,240 --> 00:09:53,600
we we need they need to use these things

00:09:51,920 --> 00:09:55,120
to enforce best practices and so again

00:09:53,600 --> 00:09:56,399
so the pragma is

00:09:55,120 --> 00:09:57,600
is a kind of a special thing by

00:09:56,399 --> 00:09:59,279
definition it's a module which

00:09:57,600 --> 00:10:01,519
influences some aspect of the compile

00:09:59,279 --> 00:10:04,000
time or runtime behavior of pearl

00:10:01,519 --> 00:10:04,800
so it's it's not just uh it's not quite

00:10:04,000 --> 00:10:06,560
the same as saying

00:10:04,800 --> 00:10:08,560
you know give me the get function from

00:10:06,560 --> 00:10:11,040
this module

00:10:08,560 --> 00:10:12,480
so once you know you've learned or used

00:10:11,040 --> 00:10:14,160
stricter warnings now you're ready to be

00:10:12,480 --> 00:10:15,920
a little more dangerous

00:10:14,160 --> 00:10:17,760
now you probably will learn about

00:10:15,920 --> 00:10:19,200
importing an external module maybe

00:10:17,760 --> 00:10:21,040
something from cpan maybe something else

00:10:19,200 --> 00:10:24,000
that's in the core of pearl

00:10:21,040 --> 00:10:25,920
and we might say you know use mojo util

00:10:24,000 --> 00:10:26,560
and pass it to the trim argument because

00:10:25,920 --> 00:10:28,720
that's the

00:10:26,560 --> 00:10:30,320
function that you want or use path tiny

00:10:28,720 --> 00:10:30,720
and path tiny will export some things

00:10:30,320 --> 00:10:33,839
that

00:10:30,720 --> 00:10:35,600
you it thinks you want as well like like

00:10:33,839 --> 00:10:39,120
the path function

00:10:35,600 --> 00:10:40,640
and we might even say add a number there

00:10:39,120 --> 00:10:42,399
and that will give us a minimum version

00:10:40,640 --> 00:10:43,519
requirement that we can add in the use

00:10:42,399 --> 00:10:45,600
statement

00:10:43,519 --> 00:10:48,079
um so that it's important to know about

00:10:45,600 --> 00:10:49,600
that version requirement but as far as

00:10:48,079 --> 00:10:51,440
what we care to talk about today that's

00:10:49,600 --> 00:10:53,200
not really important so i think it'll

00:10:51,440 --> 00:10:55,760
come up maybe one other time but

00:10:53,200 --> 00:10:57,040
we'll just assume everybody knows we can

00:10:55,760 --> 00:11:00,399
use these but we won't clutter the

00:10:57,040 --> 00:11:02,399
examples with uh with version numbers

00:11:00,399 --> 00:11:03,839
so what's actually happening when we say

00:11:02,399 --> 00:11:08,000
use module

00:11:03,839 --> 00:11:11,519
uh and perl doc tells us that use module

00:11:08,000 --> 00:11:13,120
is equivalent to requiring the module

00:11:11,519 --> 00:11:15,440
and then calling the import method on

00:11:13,120 --> 00:11:16,720
the module passing in lists of arguments

00:11:15,440 --> 00:11:19,200
and this is all wrapped inside of a

00:11:16,720 --> 00:11:21,920
begin block

00:11:19,200 --> 00:11:23,920
so what's a begin block so a begin block

00:11:21,920 --> 00:11:25,200
is executed as soon as possible

00:11:23,920 --> 00:11:26,880
that is the moment it's completely

00:11:25,200 --> 00:11:28,000
defined even before the rest of the

00:11:26,880 --> 00:11:31,040
containing file or string

00:11:28,000 --> 00:11:32,720
is parsed and begin blocks run fif also

00:11:31,040 --> 00:11:33,920
first in first step during compilation

00:11:32,720 --> 00:11:38,560
so essentially

00:11:33,920 --> 00:11:40,480
um as the code's being compiled as

00:11:38,560 --> 00:11:41,920
pearl discovers begin blocks it will

00:11:40,480 --> 00:11:43,120
execute them as it goes along and if

00:11:41,920 --> 00:11:44,079
there's an issue somewhere then it'll

00:11:43,120 --> 00:11:46,079
bail out

00:11:44,079 --> 00:11:47,839
um but that that's what's happening with

00:11:46,079 --> 00:11:49,519
the use statements

00:11:47,839 --> 00:11:51,360
so and again just to break it down a

00:11:49,519 --> 00:11:53,519
little further there is compile time

00:11:51,360 --> 00:11:55,040
versus run time with pearl so

00:11:53,519 --> 00:11:57,120
begin blocks run during the codes

00:11:55,040 --> 00:11:58,880
compilation phase

00:11:57,120 --> 00:12:00,000
so when you're running a perl script

00:11:58,880 --> 00:12:00,959
you're doing two things you're combining

00:12:00,000 --> 00:12:02,560
the code and then you're actually

00:12:00,959 --> 00:12:04,800
running it

00:12:02,560 --> 00:12:06,079
and if you want to check that the code

00:12:04,800 --> 00:12:06,639
just compiles without writing it that's

00:12:06,079 --> 00:12:08,160
what the

00:12:06,639 --> 00:12:10,000
c flag is for when you're running a

00:12:08,160 --> 00:12:12,079
script okay

00:12:10,000 --> 00:12:13,040
so to recap when we say use strict use

00:12:12,079 --> 00:12:15,920
warnings and then use

00:12:13,040 --> 00:12:17,680
carp it's essential to essentially

00:12:15,920 --> 00:12:19,279
basically three begin blocks

00:12:17,680 --> 00:12:21,440
and in each begin block there's a

00:12:19,279 --> 00:12:24,399
require and then there's

00:12:21,440 --> 00:12:26,320
a import being called on the class that

00:12:24,399 --> 00:12:28,560
we've just required

00:12:26,320 --> 00:12:30,000
so that that's fairly straightforward

00:12:28,560 --> 00:12:33,440
but that sort of begs the question

00:12:30,000 --> 00:12:35,360
what actually is require uh and

00:12:33,440 --> 00:12:36,560
so just at a high level kind of hand

00:12:35,360 --> 00:12:39,200
wavy

00:12:36,560 --> 00:12:40,560
overview required does three things so

00:12:39,200 --> 00:12:41,760
it tries to find the module that we're

00:12:40,560 --> 00:12:44,079
looking for

00:12:41,760 --> 00:12:45,279
it might check for minimum version uh

00:12:44,079 --> 00:12:46,480
like with the

00:12:45,279 --> 00:12:48,720
version number that we talked about

00:12:46,480 --> 00:12:50,480
earlier and then it'll try to eval the

00:12:48,720 --> 00:12:52,720
code

00:12:50,480 --> 00:12:54,320
uh if you try to require the same module

00:12:52,720 --> 00:12:57,600
more than once and if it's already

00:12:54,320 --> 00:12:59,440
been successfully uh required then that

00:12:57,600 --> 00:13:00,880
the actual sort of a battle should be uh

00:12:59,440 --> 00:13:02,320
the actually the required itself should

00:13:00,880 --> 00:13:03,760
be a no op

00:13:02,320 --> 00:13:05,360
but there's nothing really stopping you

00:13:03,760 --> 00:13:07,839
from requiring something several times

00:13:05,360 --> 00:13:07,839
if you want to

00:13:09,920 --> 00:13:13,680
let's see i'm seeing some of these

00:13:11,040 --> 00:13:13,680
comments here uh

00:13:14,079 --> 00:13:17,440
i will have to deal with those

00:13:15,200 --> 00:13:17,760
afterwards i can't multitask that much

00:13:17,440 --> 00:13:21,279
but

00:13:17,760 --> 00:13:21,760
uh okay so in effect maybe maybe marine

00:13:21,279 --> 00:13:23,519
can

00:13:21,760 --> 00:13:26,000
answer some of these questions further

00:13:23,519 --> 00:13:27,519
um and as far as import goes

00:13:26,000 --> 00:13:28,959
so there's there's imports kind of

00:13:27,519 --> 00:13:30,560
interesting so we're calling import on

00:13:28,959 --> 00:13:32,880
these classes or are we

00:13:30,560 --> 00:13:34,720
um so there's no built-in import

00:13:32,880 --> 00:13:35,839
functions it's just an ordinary method

00:13:34,720 --> 00:13:38,000
like a subroutine

00:13:35,839 --> 00:13:39,600
which is defined or inherited by modules

00:13:38,000 --> 00:13:40,560
that wish to export names to another

00:13:39,600 --> 00:13:42,480
module

00:13:40,560 --> 00:13:45,760
the use function calls the import method

00:13:42,480 --> 00:13:45,760
for the package used

00:13:46,839 --> 00:13:50,079
so this is kind of where it gets

00:13:49,360 --> 00:13:53,920
interesting

00:13:50,079 --> 00:13:56,000
uh because it can only call import on a

00:13:53,920 --> 00:13:57,920
class that has an import

00:13:56,000 --> 00:13:59,600
so if your class doesn't have an import

00:13:57,920 --> 00:14:01,199
this part of the use actually will get

00:13:59,600 --> 00:14:03,360
skipped

00:14:01,199 --> 00:14:04,560
if the class has a doesn't have an

00:14:03,360 --> 00:14:05,519
import and you're actually passing

00:14:04,560 --> 00:14:07,199
import arguments

00:14:05,519 --> 00:14:08,399
those will just silently get ignored as

00:14:07,199 --> 00:14:09,600
well so that that kind of could be

00:14:08,399 --> 00:14:12,240
misleading if you see something like

00:14:09,600 --> 00:14:12,240
that in the code

00:14:13,600 --> 00:14:18,079
now there are three kinds of imports uh

00:14:17,040 --> 00:14:19,920
that we want to talk about today the

00:14:18,079 --> 00:14:21,920
first one is the implicit import the

00:14:19,920 --> 00:14:24,800
second is the explicit import and then

00:14:21,920 --> 00:14:27,360
the third is the empty import

00:14:24,800 --> 00:14:29,199
so as far as the implicit import goes

00:14:27,360 --> 00:14:31,440
and and this is what we talked about use

00:14:29,199 --> 00:14:33,600
posix no kind of arguments

00:14:31,440 --> 00:14:35,279
and that's just equivalent to requiring

00:14:33,600 --> 00:14:36,480
it and doing the import inside the begin

00:14:35,279 --> 00:14:38,160
block that's it

00:14:36,480 --> 00:14:39,600
and then it will give us hundreds and

00:14:38,160 --> 00:14:42,399
hundreds of things because

00:14:39,600 --> 00:14:43,920
it thinks that's what we want then

00:14:42,399 --> 00:14:45,199
there's the explicit import and that's

00:14:43,920 --> 00:14:46,399
when we pass an argument so this

00:14:45,199 --> 00:14:49,680
would be a functioning that we could

00:14:46,399 --> 00:14:51,120
pass through the posix modules import

00:14:49,680 --> 00:14:53,360
and and then you can see the example

00:14:51,120 --> 00:14:55,920
here very similar to the one before but

00:14:53,360 --> 00:14:59,040
now there is an argument being passed in

00:14:55,920 --> 00:15:02,320
the call to import

00:14:59,040 --> 00:15:05,920
and now we've got the empty import

00:15:02,320 --> 00:15:07,519
and this one's uh interesting and it's

00:15:05,920 --> 00:15:09,199
it's the difference between this one and

00:15:07,519 --> 00:15:10,639
the others is subtle because you have a

00:15:09,199 --> 00:15:12,639
list but it's an empty list you just

00:15:10,639 --> 00:15:14,880
have these empty parens here

00:15:12,639 --> 00:15:16,000
and you might assume well it's just

00:15:14,880 --> 00:15:18,000
going to do

00:15:16,000 --> 00:15:19,760
what it does for the other ones in the

00:15:18,000 --> 00:15:21,040
other cases but it's just not going to

00:15:19,760 --> 00:15:23,040
pass any arguments

00:15:21,040 --> 00:15:24,480
but the the difference here is that it's

00:15:23,040 --> 00:15:27,279
just equivalent to just running the

00:15:24,480 --> 00:15:30,480
require and not running the import

00:15:27,279 --> 00:15:33,199
so um when you're doing this

00:15:30,480 --> 00:15:33,759
if if your module was expecting this

00:15:33,199 --> 00:15:36,000
import

00:15:33,759 --> 00:15:36,800
method to be called and it isn't then

00:15:36,000 --> 00:15:39,600
you might be in for

00:15:36,800 --> 00:15:40,160
uh you might be in for a surprise so

00:15:39,600 --> 00:15:42,320
that's

00:15:40,160 --> 00:15:44,079
something that's helpful to keep in mind

00:15:42,320 --> 00:15:44,800
and um and you kind of mess around this

00:15:44,079 --> 00:15:46,480
too

00:15:44,800 --> 00:15:48,399
if you say with your use strict and use

00:15:46,480 --> 00:15:48,880
warnings and add the empty parens at the

00:15:48,399 --> 00:15:50,959
end

00:15:48,880 --> 00:15:54,079
and see if things still work like you

00:15:50,959 --> 00:15:57,120
were expecting

00:15:54,079 --> 00:15:59,759
now what does import actually do

00:15:57,120 --> 00:16:01,600
uh so this is kind of hard to answer uh

00:15:59,759 --> 00:16:03,360
so there's some conventions around what

00:16:01,600 --> 00:16:03,920
might happen when a modulus import gets

00:16:03,360 --> 00:16:05,680
called

00:16:03,920 --> 00:16:07,600
and in like we talked about generally

00:16:05,680 --> 00:16:09,199
when we say you say use carp

00:16:07,600 --> 00:16:11,279
and then give it the croak argument that

00:16:09,199 --> 00:16:13,279
means we now have a broke function

00:16:11,279 --> 00:16:15,360
available in our package

00:16:13,279 --> 00:16:16,880
uh but there's there's no binding

00:16:15,360 --> 00:16:17,600
contract that says that has to be the

00:16:16,880 --> 00:16:20,720
case that's

00:16:17,600 --> 00:16:20,720
that's just a convention

00:16:21,120 --> 00:16:26,959
so import what does it expect uh

00:16:24,800 --> 00:16:28,240
well what can we pass the values as

00:16:26,959 --> 00:16:29,680
values to import that's

00:16:28,240 --> 00:16:31,600
left up to the implementer so in the

00:16:29,680 --> 00:16:32,720
first example a ddp that's an alias for

00:16:31,600 --> 00:16:35,600
data printer

00:16:32,720 --> 00:16:36,000
you might pass it a list of options that

00:16:35,600 --> 00:16:39,040
they can

00:16:36,000 --> 00:16:40,000
use to format the code that it's

00:16:39,040 --> 00:16:41,920
printing for you

00:16:40,000 --> 00:16:43,519
in the case of test more you don't

00:16:41,920 --> 00:16:44,880
directly pass it

00:16:43,519 --> 00:16:46,959
the names of the functions you want to

00:16:44,880 --> 00:16:49,680
import you pass those

00:16:46,959 --> 00:16:50,720
as an array ref with the key name of

00:16:49,680 --> 00:16:53,759
import

00:16:50,720 --> 00:16:55,120
if using test needs it's not even

00:16:53,759 --> 00:16:58,320
asking for functions that you're

00:16:55,120 --> 00:17:00,399
interested in it's using the import

00:16:58,320 --> 00:17:01,360
as a way for you to tell it what you're

00:17:00,399 --> 00:17:03,600
actually looking for

00:17:01,360 --> 00:17:04,480
in this case it's saying oh just assert

00:17:03,600 --> 00:17:06,079
that

00:17:04,480 --> 00:17:09,360
we have this minimum pearl version if we

00:17:06,079 --> 00:17:12,160
don't then we're going to skip this test

00:17:09,360 --> 00:17:13,199
and then in the case of http status here

00:17:12,160 --> 00:17:14,880
we can see

00:17:13,199 --> 00:17:16,959
the last thing status message that's

00:17:14,880 --> 00:17:19,439
actually a function name but

00:17:16,959 --> 00:17:20,480
the previous two arguments are import

00:17:19,439 --> 00:17:23,600
tags

00:17:20,480 --> 00:17:25,600
which are essentially aliases so when

00:17:23,600 --> 00:17:27,280
you say constants it's like well

00:17:25,600 --> 00:17:28,960
give me this give me this list of

00:17:27,280 --> 00:17:30,880
symbols that are defined as

00:17:28,960 --> 00:17:32,160
being constants and they're they'll be

00:17:30,880 --> 00:17:33,679
available to me and i'll

00:17:32,160 --> 00:17:37,120
i'll just know what they are and if i

00:17:33,679 --> 00:17:37,120
don't know then i can look them up

00:17:37,280 --> 00:17:41,120
so since import is just a method on a

00:17:40,320 --> 00:17:43,520
class

00:17:41,120 --> 00:17:44,880
you can call it um as many times as you

00:17:43,520 --> 00:17:46,960
like

00:17:44,880 --> 00:17:48,320
so there's nothing to stop you from

00:17:46,960 --> 00:17:52,240
doing something like this

00:17:48,320 --> 00:17:54,559
uh from a code readability standpoint

00:17:52,240 --> 00:17:55,840
it's not great but but again that you

00:17:54,559 --> 00:17:56,960
know this probably won't trigger any

00:17:55,840 --> 00:17:59,840
warnings

00:17:56,960 --> 00:18:00,480
so that that sort of gives us the

00:17:59,840 --> 00:18:02,160
background

00:18:00,480 --> 00:18:04,880
of the the problems that we're looking

00:18:02,160 --> 00:18:08,080
with at with uh pearl imports

00:18:04,880 --> 00:18:09,120
and uh sort of the idea is at work i've

00:18:08,080 --> 00:18:12,000
got a code base

00:18:09,120 --> 00:18:13,280
and it's in the like little hundreds of

00:18:12,000 --> 00:18:14,880
thousands of lines

00:18:13,280 --> 00:18:17,679
and there are import statements all over

00:18:14,880 --> 00:18:20,799
the place we're trying to reduce

00:18:17,679 --> 00:18:22,000
our dependencies but it's hard to know

00:18:20,799 --> 00:18:23,360
what your dependencies are if you're

00:18:22,000 --> 00:18:24,240
using modules that you don't actually

00:18:23,360 --> 00:18:27,039
need

00:18:24,240 --> 00:18:28,720
so i wanted to have a way to be able to

00:18:27,039 --> 00:18:31,200
scan the code base

00:18:28,720 --> 00:18:31,919
look for all the modules we're using

00:18:31,200 --> 00:18:33,919
remove

00:18:31,919 --> 00:18:34,960
all the ones that we aren't uh using and

00:18:33,919 --> 00:18:36,559
then we can just

00:18:34,960 --> 00:18:39,039
get rid of those out of our out of our

00:18:36,559 --> 00:18:39,039
dark pin

00:18:41,760 --> 00:18:45,360
so now that we know how to import

00:18:44,559 --> 00:18:46,960
modules

00:18:45,360 --> 00:18:48,960
the question is how can we

00:18:46,960 --> 00:18:51,919
programmatically detect

00:18:48,960 --> 00:18:54,160
which uh which symbols are importable

00:18:51,919 --> 00:18:55,440
from a module

00:18:54,160 --> 00:18:58,720
so the first thing we're going to look

00:18:55,440 --> 00:19:01,760
at is uh exporter

00:18:58,720 --> 00:19:05,760
and again in this case of use posix

00:19:01,760 --> 00:19:07,760
um if we disable strict references

00:19:05,760 --> 00:19:09,679
then we can access directly the export

00:19:07,760 --> 00:19:12,720
and the export okay

00:19:09,679 --> 00:19:15,760
lists that are uh that are defined

00:19:12,720 --> 00:19:16,880
inside of posix itself so the implicit

00:19:15,760 --> 00:19:19,760
imports the ones that

00:19:16,880 --> 00:19:20,960
we're just going to get if we don't uh

00:19:19,760 --> 00:19:22,240
call the module with any arguments

00:19:20,960 --> 00:19:23,520
that's just going to be an export that's

00:19:22,240 --> 00:19:24,799
the first line here

00:19:23,520 --> 00:19:27,520
and then the second line here is the

00:19:24,799 --> 00:19:31,200
explicit ones which as we talked about

00:19:27,520 --> 00:19:32,080
is a combination of uh export and export

00:19:31,200 --> 00:19:33,919
okay

00:19:32,080 --> 00:19:35,440
so that that would then in a lot of

00:19:33,919 --> 00:19:37,039
cases be a bigger list of things that

00:19:35,440 --> 00:19:39,200
you can explicitly import

00:19:37,039 --> 00:19:41,120
not in all cases some some modules it's

00:19:39,200 --> 00:19:43,760
basically the same list

00:19:41,120 --> 00:19:45,039
um and which can be an unfortunate

00:19:43,760 --> 00:19:47,520
design decision but

00:19:45,039 --> 00:19:48,799
um again it's up to you how you want to

00:19:47,520 --> 00:19:50,840
do these things there's there's no

00:19:48,799 --> 00:19:54,080
contract that you need to abide by

00:19:50,840 --> 00:19:55,200
really um now another so the thing about

00:19:54,080 --> 00:19:57,600
exporter is it's

00:19:55,200 --> 00:19:59,520
very popular there are lots of modules

00:19:57,600 --> 00:20:02,480
on cpm that depend on it

00:19:59,520 --> 00:20:04,640
i think probably the next popular one

00:20:02,480 --> 00:20:06,720
would be subexporter

00:20:04,640 --> 00:20:08,480
and some export has been around for a

00:20:06,720 --> 00:20:09,520
long time it also gets used by a lot of

00:20:08,480 --> 00:20:13,039
modules

00:20:09,520 --> 00:20:14,880
and as the name implies uh it only

00:20:13,039 --> 00:20:17,840
exports subs so we don't actually have

00:20:14,880 --> 00:20:19,760
to worry about uh variables

00:20:17,840 --> 00:20:21,120
that's sort of the good part the bad

00:20:19,760 --> 00:20:22,400
part is

00:20:21,120 --> 00:20:24,720
that it doesn't have any package

00:20:22,400 --> 00:20:26,640
variables that we can expect there's no

00:20:24,720 --> 00:20:28,480
export or export okay that we can look

00:20:26,640 --> 00:20:29,600
at that's

00:20:28,480 --> 00:20:31,520
interesting a lot it has sort of a

00:20:29,600 --> 00:20:32,400
flexible api allows you to do a lot of

00:20:31,520 --> 00:20:36,000
things

00:20:32,400 --> 00:20:38,240
so it's it's probably non-trivial to

00:20:36,000 --> 00:20:39,520
look at the arguments that it accepts

00:20:38,240 --> 00:20:42,080
and then try and figure out what's going

00:20:39,520 --> 00:20:43,120
to happen and uh so we don't really want

00:20:42,080 --> 00:20:45,440
to re-implement

00:20:43,120 --> 00:20:47,120
sub-exporter or do something really

00:20:45,440 --> 00:20:49,520
invasive if we can avoid it so

00:20:47,120 --> 00:20:51,520
the question is what can we do in a

00:20:49,520 --> 00:20:53,039
programmatic way just just to find out

00:20:51,520 --> 00:20:55,200
sort of in a black box way what

00:20:53,039 --> 00:20:56,559
sub-exporter might export for a certain

00:20:55,200 --> 00:20:59,120
module

00:20:56,559 --> 00:21:00,159
and this is where sub-exporters groups

00:20:59,120 --> 00:21:01,679
come in

00:21:00,159 --> 00:21:03,440
and the groups are a little bit like

00:21:01,679 --> 00:21:05,679
import tags

00:21:03,440 --> 00:21:07,840
and when you create uh so when you

00:21:05,679 --> 00:21:09,520
export through sub-exporter

00:21:07,840 --> 00:21:11,520
there are a couple groups that get

00:21:09,520 --> 00:21:13,039
created for you by default they're one

00:21:11,520 --> 00:21:14,240
that one of the default groups is called

00:21:13,039 --> 00:21:17,200
default

00:21:14,240 --> 00:21:19,760
and that essentially would be empty and

00:21:17,200 --> 00:21:23,120
that's what you're gonna get if you call

00:21:19,760 --> 00:21:25,360
uh your module without any arguments

00:21:23,120 --> 00:21:27,520
uh which is sort of a nice default to

00:21:25,360 --> 00:21:28,799
have so that you just

00:21:27,520 --> 00:21:30,880
you're just not polluting your namespace

00:21:28,799 --> 00:21:33,280
with a bunch of things uh

00:21:30,880 --> 00:21:35,280
subexporter also helpfully will take

00:21:33,280 --> 00:21:37,200
we'll assemble a list of everything

00:21:35,280 --> 00:21:39,200
that it's going to export and it puts

00:21:37,200 --> 00:21:41,039
that into a group called all

00:21:39,200 --> 00:21:43,919
so you can override both of those groups

00:21:41,039 --> 00:21:45,120
but this is what subscribe by default in

00:21:43,919 --> 00:21:47,120
a lot of cases that's sort of good

00:21:45,120 --> 00:21:49,919
enough for our uses

00:21:47,120 --> 00:21:51,760
so that brings us to the symbol table

00:21:49,919 --> 00:21:54,480
and what is the symbol table well

00:21:51,760 --> 00:21:55,520
the symbol table for a package um

00:21:54,480 --> 00:21:56,880
happens to be stored

00:21:55,520 --> 00:21:59,039
in the hash of that name with two

00:21:56,880 --> 00:22:01,840
columns appended the main symbol

00:21:59,039 --> 00:22:03,280
table that's named is thus uh percent

00:22:01,840 --> 00:22:05,520
main colon colon or

00:22:03,280 --> 00:22:07,120
percent colon colon for short which i i

00:22:05,520 --> 00:22:07,679
haven't really seen too often i did see

00:22:07,120 --> 00:22:10,960
it

00:22:07,679 --> 00:22:12,559
uh in the test suite for the dancer

00:22:10,960 --> 00:22:15,120
to database when i was messing around

00:22:12,559 --> 00:22:16,720
with with the purl import stuff so

00:22:15,120 --> 00:22:18,559
there's a shorthand that's there it's

00:22:16,720 --> 00:22:21,679
good to be aware of that

00:22:18,559 --> 00:22:24,320
and so the symbol table is basically

00:22:21,679 --> 00:22:25,600
where you would find information about

00:22:24,320 --> 00:22:27,679
the package itself

00:22:25,600 --> 00:22:28,880
so lexical variable something like a my

00:22:27,679 --> 00:22:30,000
whatever you're not going to find in the

00:22:28,880 --> 00:22:32,320
symbol table

00:22:30,000 --> 00:22:33,840
but the the functions that are available

00:22:32,320 --> 00:22:35,200
in package level variables

00:22:33,840 --> 00:22:38,000
for a package you will find those in the

00:22:35,200 --> 00:22:40,720
symbol table and

00:22:38,000 --> 00:22:41,919
we can luckily inspect the symbol table

00:22:40,720 --> 00:22:43,760
so

00:22:41,919 --> 00:22:45,360
um so we talked about if you haven't

00:22:43,760 --> 00:22:46,960
declared a packaging you can find your

00:22:45,360 --> 00:22:48,799
symbol table in main

00:22:46,960 --> 00:22:50,320
uh but if you're in package my module

00:22:48,799 --> 00:22:52,799
you can find your symbol table in

00:22:50,320 --> 00:22:54,799
percent my module colon and here's just

00:22:52,799 --> 00:22:58,320
like a a one-liner

00:22:54,799 --> 00:23:01,520
you could try actually see here what's

00:22:58,320 --> 00:23:04,880
in the symbol table here let's try this

00:23:01,520 --> 00:23:07,280
uh see if that works

00:23:04,880 --> 00:23:08,400
so you can see that there's a lot of

00:23:07,280 --> 00:23:10,799
stuff that's in here

00:23:08,400 --> 00:23:11,679
i'm not gonna get into the incidents and

00:23:10,799 --> 00:23:13,440
all that but

00:23:11,679 --> 00:23:15,760
even this this is uh this is just a

00:23:13,440 --> 00:23:17,440
one-liner on on a package that's

00:23:15,760 --> 00:23:18,640
package mains so we actually haven't

00:23:17,440 --> 00:23:19,280
really done anything but there already

00:23:18,640 --> 00:23:21,039
is

00:23:19,280 --> 00:23:22,559
there's like a bunch of stuff uh going

00:23:21,039 --> 00:23:26,320
on here

00:23:22,559 --> 00:23:27,840
so that is uh that's probably all we

00:23:26,320 --> 00:23:30,159
need to know we don't need to go too

00:23:27,840 --> 00:23:31,679
too in-depth into all this stuff uh but

00:23:30,159 --> 00:23:32,320
let's let's accept that there's like a

00:23:31,679 --> 00:23:35,200
hash like

00:23:32,320 --> 00:23:36,720
structure that tracks information about

00:23:35,200 --> 00:23:40,159
what's in a given package

00:23:36,720 --> 00:23:42,880
and we can see what's in there

00:23:40,159 --> 00:23:44,480
now when a package imports a subroutine

00:23:42,880 --> 00:23:45,440
or some other kind of symbol

00:23:44,480 --> 00:23:47,679
those are going to appear in the

00:23:45,440 --> 00:23:49,279
packages symbol table

00:23:47,679 --> 00:23:50,880
and that's kind of that's the magic

00:23:49,279 --> 00:23:54,000
behind imports

00:23:50,880 --> 00:23:57,279
so for example if we wanted data dumpers

00:23:54,000 --> 00:24:00,559
dumper sub in our script then uh

00:23:57,279 --> 00:24:02,720
let me just see here there we go

00:24:00,559 --> 00:24:04,480
if we wanted data dumpers uh dumper

00:24:02,720 --> 00:24:05,360
stuff in our script uh then we would

00:24:04,480 --> 00:24:07,440
just use this

00:24:05,360 --> 00:24:09,679
syntax here so basically the star means

00:24:07,440 --> 00:24:11,600
that we're dealing with the type blob

00:24:09,679 --> 00:24:14,159
and we're just saying okay in our main

00:24:11,600 --> 00:24:16,960
package we want to have a function

00:24:14,159 --> 00:24:17,679
by the name of dumper and we're just we

00:24:16,960 --> 00:24:20,720
want that to be an

00:24:17,679 --> 00:24:22,559
alias um to date a dumper's dumper and

00:24:20,720 --> 00:24:25,440
then once we do that

00:24:22,559 --> 00:24:27,200
we can call dumper without having to use

00:24:25,440 --> 00:24:28,880
the fully qualified packaging and it's

00:24:27,200 --> 00:24:30,400
just there for us

00:24:28,880 --> 00:24:33,039
kind of in the same way if we'd written

00:24:30,400 --> 00:24:35,760
that function ourselves in the package

00:24:33,039 --> 00:24:37,200
so that's very convenient and that like

00:24:35,760 --> 00:24:38,640
that's kind of

00:24:37,200 --> 00:24:40,080
yeah that's that's just basically how

00:24:38,640 --> 00:24:40,880
imports work there are modules that kind

00:24:40,080 --> 00:24:44,000
of

00:24:40,880 --> 00:24:44,799
um add a more helpful or complicated api

00:24:44,000 --> 00:24:48,159
around those but

00:24:44,799 --> 00:24:48,159
that's kind of the basic idea

00:24:49,039 --> 00:24:54,240
um and we can use the same trick with

00:24:51,840 --> 00:24:55,520
variables here and i'm

00:24:54,240 --> 00:24:57,760
learning a lot in the chat here i'll

00:24:55,520 --> 00:24:58,960
have to go over that um and again i

00:24:57,760 --> 00:25:00,159
should actually probably say about this

00:24:58,960 --> 00:25:02,080
that i'm not an expert on

00:25:00,159 --> 00:25:04,559
this i've just been messing around so uh

00:25:02,080 --> 00:25:08,240
whatever i say you know trust but verify

00:25:04,559 --> 00:25:09,840
um but i have definitely uh

00:25:08,240 --> 00:25:12,640
anything i'm telling you it's i have

00:25:09,840 --> 00:25:14,400
implemented it so that i know that okay

00:25:12,640 --> 00:25:15,440
i'm kind of i should be mostly correct

00:25:14,400 --> 00:25:16,000
about the things that i'm telling you

00:25:15,440 --> 00:25:19,039
here

00:25:16,000 --> 00:25:21,760
um so again with with the variables

00:25:19,039 --> 00:25:22,960
we can create an alias um to a variable

00:25:21,760 --> 00:25:24,640
here so

00:25:22,960 --> 00:25:26,480
in in this uh case here we're just

00:25:24,640 --> 00:25:28,559
creating an alias uh

00:25:26,480 --> 00:25:29,520
to a variable called a scalar called

00:25:28,559 --> 00:25:31,760
upper version

00:25:29,520 --> 00:25:33,039
and the alias will be the idea dumpers

00:25:31,760 --> 00:25:34,640
version itself

00:25:33,039 --> 00:25:36,240
and one thing we need to be careful

00:25:34,640 --> 00:25:37,919
about here is if we if we increment the

00:25:36,240 --> 00:25:40,880
alias that will actually increment

00:25:37,919 --> 00:25:41,440
uh the version in the the other package

00:25:40,880 --> 00:25:44,000
itself

00:25:41,440 --> 00:25:45,520
so there these are essentially basically

00:25:44,000 --> 00:25:46,720
the same thing sort of tightly coupled

00:25:45,520 --> 00:25:50,799
together there

00:25:46,720 --> 00:25:54,960
so now enter import into

00:25:50,799 --> 00:25:56,480
uh import into is sort of the next level

00:25:54,960 --> 00:25:58,960
allows that's to import an entire

00:25:56,480 --> 00:26:02,240
package into another package

00:25:58,960 --> 00:26:02,960
um so for medicipan um we use import

00:26:02,240 --> 00:26:06,159
into

00:26:02,960 --> 00:26:08,159
and it's we have a medici pan moose so

00:26:06,159 --> 00:26:10,080
it's our own flavor of moose

00:26:08,159 --> 00:26:11,360
and just with these few lines here we

00:26:10,080 --> 00:26:13,679
can say okay uh

00:26:11,360 --> 00:26:15,600
in the package medicine boost i want all

00:26:13,679 --> 00:26:17,919
of moose i want uh

00:26:15,600 --> 00:26:19,440
moose x a strict constructor and i want

00:26:17,919 --> 00:26:22,720
namespace auto clean

00:26:19,440 --> 00:26:24,080
and and this is sort of a handy way so

00:26:22,720 --> 00:26:25,440
that you can um

00:26:24,080 --> 00:26:28,080
you know create your own mousse-like

00:26:25,440 --> 00:26:29,760
module you don't need to use all the

00:26:28,080 --> 00:26:31,440
boilerplate that you're expecting in

00:26:29,760 --> 00:26:32,559
every other module just just use your

00:26:31,440 --> 00:26:35,120
own flavor of mousse

00:26:32,559 --> 00:26:36,320
and you can do the same thing with your

00:26:35,120 --> 00:26:38,159
own pearl

00:26:36,320 --> 00:26:39,440
it's uh this sort of follows the same

00:26:38,159 --> 00:26:42,000
pattern

00:26:39,440 --> 00:26:44,159
uh you can have a look at the source

00:26:42,000 --> 00:26:47,679
code of the link module here

00:26:44,159 --> 00:26:48,880
and basically you can just name this

00:26:47,679 --> 00:26:50,159
whatever you want even make it all

00:26:48,880 --> 00:26:51,760
lowercase so that you kind of have your

00:26:50,159 --> 00:26:52,000
own pragma and then when you use your

00:26:51,760 --> 00:26:53,600
own

00:26:52,000 --> 00:26:55,120
pearl you're getting strict warnings

00:26:53,600 --> 00:26:56,960
signatures whatever you decide that you

00:26:55,120 --> 00:26:58,960
want is now available

00:26:56,960 --> 00:27:00,480
as your own sort of pragma and then

00:26:58,960 --> 00:27:02,400
again same idea you avoid all the

00:27:00,480 --> 00:27:04,480
boilerplate and you can use it

00:27:02,400 --> 00:27:07,840
across your code base and know that

00:27:04,480 --> 00:27:07,840
you're using things consistently

00:27:12,000 --> 00:27:15,760
okay so let's put this all together so

00:27:14,240 --> 00:27:17,200
we've seen that we can manipulate the

00:27:15,760 --> 00:27:19,039
symbol table

00:27:17,200 --> 00:27:20,240
uh we can do everything from aliasing

00:27:19,039 --> 00:27:22,960
aliasing a function

00:27:20,240 --> 00:27:23,520
to importing an entire package uh

00:27:22,960 --> 00:27:26,240
luckily

00:27:23,520 --> 00:27:27,520
subexporter only exports subs so how do

00:27:26,240 --> 00:27:29,039
we track the subs that have been added

00:27:27,520 --> 00:27:30,960
to the symbol table

00:27:29,039 --> 00:27:32,720
so this is our strategy we're going to

00:27:30,960 --> 00:27:36,399
take a module

00:27:32,720 --> 00:27:37,679
let's call it my module um

00:27:36,399 --> 00:27:39,919
and we're going to create a brand new

00:27:37,679 --> 00:27:42,320
package some arbitrary name

00:27:39,919 --> 00:27:44,000
um a package that we haven't required

00:27:42,320 --> 00:27:47,360
yet anywhere in our code base

00:27:44,000 --> 00:27:49,520
so it's got a fresh symbol table

00:27:47,360 --> 00:27:51,039
we're going to use my module inside this

00:27:49,520 --> 00:27:52,960
package

00:27:51,039 --> 00:27:55,120
we're going to eval this package into

00:27:52,960 --> 00:27:56,080
life

00:27:55,120 --> 00:27:59,039
and then we're going to find out what

00:27:56,080 --> 00:28:00,480
change in the symbol table

00:27:59,039 --> 00:28:02,240
okay so so essentially it would look

00:28:00,480 --> 00:28:05,440
something like this so

00:28:02,240 --> 00:28:07,279
we'll just create a string with our

00:28:05,440 --> 00:28:08,799
arbitrary new package name against

00:28:07,279 --> 00:28:10,240
like i said packages that we haven't

00:28:08,799 --> 00:28:11,760
availed yet so that we know we're

00:28:10,240 --> 00:28:12,880
starting fresh

00:28:11,760 --> 00:28:15,919
we're going to use a module called

00:28:12,880 --> 00:28:17,679
simple get after that we're going to

00:28:15,919 --> 00:28:18,720
insert our own use statement into here

00:28:17,679 --> 00:28:22,480
so

00:28:18,720 --> 00:28:25,120
uh it might be use this module

00:28:22,480 --> 00:28:26,640
you know with it for subexporter we just

00:28:25,120 --> 00:28:28,960
we decided we can use it with uh

00:28:26,640 --> 00:28:31,039
colon all to get us everything or we can

00:28:28,960 --> 00:28:32,399
use it without any arguments to find out

00:28:31,039 --> 00:28:33,679
what happens when we're not requesting

00:28:32,399 --> 00:28:35,919
anything specific so that we get the

00:28:33,679 --> 00:28:37,039
implicit and the explicit exports

00:28:35,919 --> 00:28:39,520
and then all we're going to do is create

00:28:37,039 --> 00:28:42,159
a package level variable called uh

00:28:39,520 --> 00:28:43,039
at underscore underscore exportables and

00:28:42,159 --> 00:28:46,399
we will call

00:28:43,039 --> 00:28:47,440
inside a begin block symbol get names on

00:28:46,399 --> 00:28:49,520
that

00:28:47,440 --> 00:28:51,440
and this happens inside a begin block

00:28:49,520 --> 00:28:53,360
because if we don't

00:28:51,440 --> 00:28:55,120
uh and the module we're using uses

00:28:53,360 --> 00:28:56,320
something like namespace auto clean it

00:28:55,120 --> 00:28:57,760
helpfully goes around and starts

00:28:56,320 --> 00:28:59,120
removing things from the simple table

00:28:57,760 --> 00:29:01,520
before we know that they're there

00:28:59,120 --> 00:29:03,520
so we need to make sure this is kind of

00:29:01,520 --> 00:29:05,919
a race here that we need to get

00:29:03,520 --> 00:29:09,600
what we want to find out before

00:29:05,919 --> 00:29:11,679
namespace autoclean tries to defeat us

00:29:09,600 --> 00:29:13,760
uh and then after that we just can avail

00:29:11,679 --> 00:29:16,399
this into life

00:29:13,760 --> 00:29:18,399
and then we can just check that uh

00:29:16,399 --> 00:29:20,320
package variable that we created

00:29:18,399 --> 00:29:21,600
and see what's inside there and and so

00:29:20,320 --> 00:29:23,120
yeah so the use statements either going

00:29:21,600 --> 00:29:24,960
to be the use module

00:29:23,120 --> 00:29:28,960
by itself or use module all that will

00:29:24,960 --> 00:29:30,720
cover both cases for a sub-exporter

00:29:28,960 --> 00:29:32,559
okay so this actually covers a lot of

00:29:30,720 --> 00:29:34,880
cases and in using these two techniques

00:29:32,559 --> 00:29:37,440
we can find out what

00:29:34,880 --> 00:29:38,880
a lot of modules on cpan may or may not

00:29:37,440 --> 00:29:40,960
be exporting

00:29:38,880 --> 00:29:43,200
so and if neither if those both come up

00:29:40,960 --> 00:29:44,880
empty we can use some other heuristics

00:29:43,200 --> 00:29:47,440
to see whether we actually maybe have an

00:29:44,880 --> 00:29:49,520
object-oriented module on our hands

00:29:47,440 --> 00:29:50,720
uh and if that comes up empty then we

00:29:49,520 --> 00:29:51,200
can actually just throw our hands up and

00:29:50,720 --> 00:29:53,679
say

00:29:51,200 --> 00:29:55,039
we don't know about this we tried our

00:29:53,679 --> 00:29:58,799
best

00:29:55,039 --> 00:30:00,880
okay so if we want to see what

00:29:58,799 --> 00:30:02,480
uh pearl imports thinks is it a module

00:30:00,880 --> 00:30:05,360
there's a little utility called

00:30:02,480 --> 00:30:07,440
uh dump pearl exports so once we've

00:30:05,360 --> 00:30:10,000
installed the pearl imports package

00:30:07,440 --> 00:30:11,440
then we can just uh pass dump pro

00:30:10,000 --> 00:30:14,320
exports a module name

00:30:11,440 --> 00:30:16,000
in this case cpanel json xs it tells us

00:30:14,320 --> 00:30:17,919
that it is an exporter

00:30:16,000 --> 00:30:19,200
and then it has four default exported

00:30:17,919 --> 00:30:21,520
symbols

00:30:19,200 --> 00:30:22,240
and four symbols after that that you can

00:30:21,520 --> 00:30:25,360
you can import

00:30:22,240 --> 00:30:26,559
on demand and uh that's so good

00:30:25,360 --> 00:30:29,600
i mean this is sort of an interesting

00:30:26,559 --> 00:30:31,360
module because it has the

00:30:29,600 --> 00:30:33,520
object-oriented interface but then also

00:30:31,360 --> 00:30:34,960
the functional interface

00:30:33,520 --> 00:30:36,399
so we can't uh you know we couldn't look

00:30:34,960 --> 00:30:38,080
at this and say well it's got it's got a

00:30:36,399 --> 00:30:39,360
new method it's just object oriented

00:30:38,080 --> 00:30:41,120
that's not that's not really the case

00:30:39,360 --> 00:30:44,159
with this one

00:30:41,120 --> 00:30:46,640
um see if we try it with try tiny it

00:30:44,159 --> 00:30:48,320
again will tell us that it's got three

00:30:46,640 --> 00:30:50,799
uh three symbols that it can export

00:30:48,320 --> 00:30:52,799
catch finally and try

00:30:50,799 --> 00:30:54,159
http request common that we looked at

00:30:52,799 --> 00:30:57,120
earlier

00:30:54,159 --> 00:30:57,919
uh that one we can see that by default

00:30:57,120 --> 00:31:02,000
it will

00:30:57,919 --> 00:31:05,120
export six symbols but on demand you can

00:31:02,000 --> 00:31:07,440
import eight so what happened here is

00:31:05,120 --> 00:31:09,440
we've got this dynamic file upload

00:31:07,440 --> 00:31:11,200
which is actually a like a setable

00:31:09,440 --> 00:31:13,600
variable and

00:31:11,200 --> 00:31:14,880
we've also got delete which was added

00:31:13,600 --> 00:31:18,240
later on

00:31:14,880 --> 00:31:19,600
and the design design decision there was

00:31:18,240 --> 00:31:20,960
not to just export it with everything

00:31:19,600 --> 00:31:22,159
else but make it something that somebody

00:31:20,960 --> 00:31:26,159
would have to

00:31:22,159 --> 00:31:26,159
um explicitly import

00:31:30,480 --> 00:31:33,919
so the implementation of pearl imports

00:31:32,159 --> 00:31:35,519
is basically

00:31:33,919 --> 00:31:37,519
we want to parse a pearl document we'll

00:31:35,519 --> 00:31:39,120
use ppi for that

00:31:37,519 --> 00:31:41,519
we want to find all the user require

00:31:39,120 --> 00:31:43,279
statements that are inside the document

00:31:41,519 --> 00:31:46,240
uh then we're going to try and find out

00:31:43,279 --> 00:31:47,760
what each module can actually export

00:31:46,240 --> 00:31:49,919
we're going to analyze the code to find

00:31:47,760 --> 00:31:51,760
the symbols that match the possible

00:31:49,919 --> 00:31:52,880
exports and then maybe we'll rewrite

00:31:51,760 --> 00:31:54,960
those statements

00:31:52,880 --> 00:31:56,080
so caveat here is we're going to skip

00:31:54,960 --> 00:31:59,360
pragmas

00:31:56,080 --> 00:32:01,760
because we're generally not telling them

00:31:59,360 --> 00:32:04,559
explicitly what we want to import

00:32:01,760 --> 00:32:06,000
so um we're just going to leave those

00:32:04,559 --> 00:32:08,640
out for the time being

00:32:06,000 --> 00:32:09,679
uh and then basically what we want to do

00:32:08,640 --> 00:32:12,960
is say

00:32:09,679 --> 00:32:15,440
inside this module we're using 10

00:32:12,960 --> 00:32:18,320
modules each of those 10 modules

00:32:15,440 --> 00:32:19,279
can possibly export these things and

00:32:18,320 --> 00:32:21,039
then we're going to match it up with the

00:32:19,279 --> 00:32:23,039
code base and say

00:32:21,039 --> 00:32:24,399
these are things that we think are being

00:32:23,039 --> 00:32:26,720
used

00:32:24,399 --> 00:32:27,440
you know what are the complements of the

00:32:26,720 --> 00:32:28,559
list

00:32:27,440 --> 00:32:32,000
and then we'll rewrite the use

00:32:28,559 --> 00:32:35,679
statements uh appropriately

00:32:32,000 --> 00:32:36,000
okay now let's uh let's try a demo of

00:32:35,679 --> 00:32:39,200
this

00:32:36,000 --> 00:32:39,919
and uh what i've done here is i'm just

00:32:39,200 --> 00:32:44,000
going to use it

00:32:39,919 --> 00:32:45,519
in a vim integration and just because

00:32:44,000 --> 00:32:47,120
it just i think it makes it easier to

00:32:45,519 --> 00:32:49,120
see actually what's going on

00:32:47,120 --> 00:32:50,960
it's a command line utility so it's a

00:32:49,120 --> 00:32:52,399
bit like uh pearl tidy where you can

00:32:50,960 --> 00:32:55,440
just run it on

00:32:52,399 --> 00:32:59,519
a file and then it'll either you know

00:32:55,440 --> 00:33:01,360
rewrite your file in place or you can uh

00:32:59,519 --> 00:33:03,440
get it dumped to standard out but in

00:33:01,360 --> 00:33:05,760
this case what we're doing is just gonna

00:33:03,440 --> 00:33:06,880
we're gonna visually select snippets of

00:33:05,760 --> 00:33:09,600
the code and then

00:33:06,880 --> 00:33:11,039
tell pearl and forth to to try to do the

00:33:09,600 --> 00:33:14,399
right thing

00:33:11,039 --> 00:33:16,159
okay so in this case this was the first

00:33:14,399 --> 00:33:17,519
case that we looked at

00:33:16,159 --> 00:33:19,840
so i'm just going to select that and see

00:33:17,519 --> 00:33:22,960
what happens okay so pearl imports

00:33:19,840 --> 00:33:24,559
has decided that is indeed the get that

00:33:22,960 --> 00:33:27,600
was available

00:33:24,559 --> 00:33:29,039
below belongs to http request common and

00:33:27,600 --> 00:33:32,720
it's also decided that use

00:33:29,039 --> 00:33:34,799
lwp user agent is not exporting anything

00:33:32,720 --> 00:33:36,399
and so it's just going to use the the

00:33:34,799 --> 00:33:39,519
empty parents here

00:33:36,399 --> 00:33:42,080
so well the interesting thing

00:33:39,519 --> 00:33:43,679
with uh with lwp user agent and i've

00:33:42,080 --> 00:33:44,799
kind of argued this one with people back

00:33:43,679 --> 00:33:46,480
and forth

00:33:44,799 --> 00:33:48,640
some people might say well the brackets

00:33:46,480 --> 00:33:50,480
there are wrong because there actually

00:33:48,640 --> 00:33:52,080
is nothing to import

00:33:50,480 --> 00:33:53,840
so you don't need to be explicit about

00:33:52,080 --> 00:33:55,519
that but

00:33:53,840 --> 00:33:57,039
those brands act as a form of

00:33:55,519 --> 00:34:00,159
documentation

00:33:57,039 --> 00:34:01,919
and basically they're saying this

00:34:00,159 --> 00:34:03,679
if you're looking for imports don't look

00:34:01,919 --> 00:34:05,679
here there's nothing to find

00:34:03,679 --> 00:34:06,960
if you're already you know familiar with

00:34:05,679 --> 00:34:09,119
the module

00:34:06,960 --> 00:34:10,800
that may seem superfluous to you but if

00:34:09,119 --> 00:34:12,639
you're not that's very helpful and now

00:34:10,800 --> 00:34:14,240
in trying to scale this across hundreds

00:34:12,639 --> 00:34:16,720
of thousands of lines and

00:34:14,240 --> 00:34:18,240
hundreds of different modules if you're

00:34:16,720 --> 00:34:20,320
trying to track something down

00:34:18,240 --> 00:34:21,520
and you know in all of your use

00:34:20,320 --> 00:34:23,119
statements there's only a couple things

00:34:21,520 --> 00:34:23,839
that aren't using any kind of arguments

00:34:23,119 --> 00:34:26,079
or friends that

00:34:23,839 --> 00:34:27,440
you know you can focus it on those and

00:34:26,079 --> 00:34:29,119
for example so if we're looking for some

00:34:27,440 --> 00:34:30,480
other symbol

00:34:29,119 --> 00:34:32,639
we don't know where it came from we know

00:34:30,480 --> 00:34:34,159
we don't have to look at lwp user agent

00:34:32,639 --> 00:34:35,599
here that that's already been taken care

00:34:34,159 --> 00:34:38,639
of

00:34:35,599 --> 00:34:42,879
okay so let's have

00:34:38,639 --> 00:34:45,679
try another one here okay so this one

00:34:42,879 --> 00:34:47,359
what pearl imports will try to do is

00:34:45,679 --> 00:34:49,119
give you a consistent style with your

00:34:47,359 --> 00:34:52,240
imports

00:34:49,119 --> 00:34:54,159
so so

00:34:52,240 --> 00:34:56,000
before we do this actually so the first

00:34:54,159 --> 00:34:57,839
import here you can see there aren't any

00:34:56,000 --> 00:35:00,640
arguments at all

00:34:57,839 --> 00:35:02,800
um the next one here we're really

00:35:00,640 --> 00:35:05,839
getting a whole bunch of things

00:35:02,800 --> 00:35:06,240
um and it's a very long line on the next

00:35:05,839 --> 00:35:08,880
one

00:35:06,240 --> 00:35:09,359
we're importing two things specifically

00:35:08,880 --> 00:35:11,119
here with

00:35:09,359 --> 00:35:12,640
lwp user agent we're using curly

00:35:11,119 --> 00:35:15,359
brackets uh

00:35:12,640 --> 00:35:16,320
with try tiny we're using slashes and

00:35:15,359 --> 00:35:19,200
our spacings

00:35:16,320 --> 00:35:20,880
uh let's call it arbitrary and then on

00:35:19,200 --> 00:35:24,560
the last one with mechanize

00:35:20,880 --> 00:35:24,560
we're using uh angle brackets

00:35:24,640 --> 00:35:32,640
so let's see what happens okay

00:35:28,240 --> 00:35:35,280
so what it's done here is uh with uh

00:35:32,640 --> 00:35:37,119
it's with the cpanel json access it's

00:35:35,280 --> 00:35:39,040
realized we're not importing anything so

00:35:37,119 --> 00:35:42,720
we'll just use the empty parens

00:35:39,040 --> 00:35:44,720
uh with list all utils uh that was fine

00:35:42,720 --> 00:35:48,320
with lwp user agent and mechanized we

00:35:44,720 --> 00:35:51,440
now have uh consistent parentheses

00:35:48,320 --> 00:35:52,880
and with try tiny uh we've uh

00:35:51,440 --> 00:35:56,000
we've gotten rid of the extra spacing

00:35:52,880 --> 00:35:59,040
that was in the imports so if we go back

00:35:56,000 --> 00:36:00,160
that was what we had and this is what we

00:35:59,040 --> 00:36:01,599
have now

00:36:00,160 --> 00:36:04,160
and so you'll notice we actually have

00:36:01,599 --> 00:36:05,520
less use statements that we started with

00:36:04,160 --> 00:36:06,960
and that's because we realized we're

00:36:05,520 --> 00:36:08,720
actually not using any of these types

00:36:06,960 --> 00:36:11,119
from database migrator types

00:36:08,720 --> 00:36:13,040
so we're just we're just going to get

00:36:11,119 --> 00:36:15,280
rid of them

00:36:13,040 --> 00:36:15,280
uh

00:36:16,640 --> 00:36:20,079
yeah okay and then

00:36:21,760 --> 00:36:26,400
so so that's one of the the the

00:36:25,040 --> 00:36:27,680
the features that pearl imports comes

00:36:26,400 --> 00:36:28,480
with and it's saying like if you find

00:36:27,680 --> 00:36:29,680
something

00:36:28,480 --> 00:36:31,280
that you're not using you don't think

00:36:29,680 --> 00:36:32,960
you're using anymore just you can just

00:36:31,280 --> 00:36:37,839
remove it

00:36:32,960 --> 00:36:37,839
okay so let's look at number three

00:36:38,800 --> 00:36:43,440
uh so this one's interesting um this is

00:36:41,760 --> 00:36:44,640
it's not this is not a dot pm file but

00:36:43,440 --> 00:36:46,160
we we can still use

00:36:44,640 --> 00:36:47,680
this in this way if we want to that's

00:36:46,160 --> 00:36:50,960
that's fine

00:36:47,680 --> 00:36:52,720
um we're using moose

00:36:50,960 --> 00:36:54,640
we're not using any brands with moose

00:36:52,720 --> 00:36:56,320
because um

00:36:54,640 --> 00:36:57,760
that's kind of just the way that we

00:36:56,320 --> 00:36:59,920
people expect to use moose

00:36:57,760 --> 00:37:01,520
we know that moose exports a small

00:36:59,920 --> 00:37:03,359
number of things and so that that's not

00:37:01,520 --> 00:37:05,599
a big surprise to us

00:37:03,359 --> 00:37:06,480
uh so that as a convenience we don't

00:37:05,599 --> 00:37:08,960
need to

00:37:06,480 --> 00:37:10,480
be specific about our imports but we do

00:37:08,960 --> 00:37:12,000
um we do want to confess

00:37:10,480 --> 00:37:13,839
at line nine so we're going to use carbs

00:37:12,000 --> 00:37:14,880
confess and we do want to check if

00:37:13,839 --> 00:37:16,160
something is blessed so we're going to

00:37:14,880 --> 00:37:17,920
use scale utils

00:37:16,160 --> 00:37:20,960
blessed so let's see what happens when

00:37:17,920 --> 00:37:23,760
we run pearl imports here

00:37:20,960 --> 00:37:24,480
okay so that's weird um what happened

00:37:23,760 --> 00:37:27,520
here is

00:37:24,480 --> 00:37:29,200
it removed the carp confess entirely and

00:37:27,520 --> 00:37:32,960
then for scalar util

00:37:29,200 --> 00:37:35,040
it removed blast as well and

00:37:32,960 --> 00:37:36,640
the reason it does this is because moose

00:37:35,040 --> 00:37:38,160
actually is exporting those things

00:37:36,640 --> 00:37:40,000
already for you

00:37:38,160 --> 00:37:41,440
um and and actually we just realized

00:37:40,000 --> 00:37:42,960
this the other day after having used

00:37:41,440 --> 00:37:44,160
moose for a lot of years because i was

00:37:42,960 --> 00:37:46,079
running uh

00:37:44,160 --> 00:37:49,599
pearl imports on on our code base at

00:37:46,079 --> 00:37:51,359
work and all these blasts were just uh

00:37:49,599 --> 00:37:53,040
the scale youtube last imports were just

00:37:51,359 --> 00:37:53,839
disappearing and i couldn't figure out

00:37:53,040 --> 00:37:56,960
why

00:37:53,839 --> 00:37:59,440
um but if we use uh sorry dump pearl

00:37:56,960 --> 00:37:59,440
exports

00:38:00,640 --> 00:38:08,320
and we look at what moose is doing

00:38:05,839 --> 00:38:10,160
um so we can see that it does uh export

00:38:08,320 --> 00:38:11,599
blast and it is the blast from uh from

00:38:10,160 --> 00:38:14,640
scale util

00:38:11,599 --> 00:38:16,400
and it also exports confess uh and if

00:38:14,640 --> 00:38:18,079
you look at the aux it does that for

00:38:16,400 --> 00:38:19,440
historical reasons i i don't know why

00:38:18,079 --> 00:38:20,640
that is but

00:38:19,440 --> 00:38:22,240
but those things are already available

00:38:20,640 --> 00:38:23,520
so there's actually no reason to import

00:38:22,240 --> 00:38:25,040
those things again

00:38:23,520 --> 00:38:26,480
uh so one of the interesting things

00:38:25,040 --> 00:38:28,160
about pearl is that you don't actually

00:38:26,480 --> 00:38:29,359
get a warning for importing a thing that

00:38:28,160 --> 00:38:33,520
something else earlier

00:38:29,359 --> 00:38:36,160
already imported for you but this now um

00:38:33,520 --> 00:38:37,839
hopefully makes it a little more obvious

00:38:36,160 --> 00:38:39,520
if you realize what's going on with

00:38:37,839 --> 00:38:42,560
moose there

00:38:39,520 --> 00:38:42,560
okay so that was three

00:38:43,200 --> 00:38:46,480
okay so here we have a case where we're

00:38:45,760 --> 00:38:49,680
using

00:38:46,480 --> 00:38:52,640
a module uh four different times

00:38:49,680 --> 00:38:54,800
let's see uh if we can do the right

00:38:52,640 --> 00:38:56,720
thing here

00:38:54,800 --> 00:38:59,280
okay so that's now been combined into

00:38:56,720 --> 00:39:01,599
one use statement

00:38:59,280 --> 00:39:04,480
using only the the two functions that we

00:39:01,599 --> 00:39:04,480
that we were using

00:39:05,680 --> 00:39:10,560
uh here we've got a test and uh tests

00:39:08,880 --> 00:39:12,720
are interesting

00:39:10,560 --> 00:39:14,160
in that when we're using these test

00:39:12,720 --> 00:39:16,720
modules we are really

00:39:14,160 --> 00:39:17,520
for the most part expecting them to just

00:39:16,720 --> 00:39:19,280
import

00:39:17,520 --> 00:39:20,560
correct that we'll be able to import a

00:39:19,280 --> 00:39:22,079
bunch of things into our namespace from

00:39:20,560 --> 00:39:22,720
the test without explicitly having to

00:39:22,079 --> 00:39:25,920
name them

00:39:22,720 --> 00:39:27,359
because it's kind of a drag um

00:39:25,920 --> 00:39:29,119
when you're automating it it's not as

00:39:27,359 --> 00:39:30,560
much of a drag

00:39:29,119 --> 00:39:32,240
you you probably don't want to do this

00:39:30,560 --> 00:39:34,320
but you can

00:39:32,240 --> 00:39:36,240
um i find it helpful for the test

00:39:34,320 --> 00:39:39,119
differences at the very least

00:39:36,240 --> 00:39:40,000
for tests more uh not so much i've sort

00:39:39,119 --> 00:39:41,359
of done this as part of the

00:39:40,000 --> 00:39:42,400
implementation it was kind of a proof of

00:39:41,359 --> 00:39:44,400
concept

00:39:42,400 --> 00:39:46,000
um this this gets annoying really

00:39:44,400 --> 00:39:49,119
quickly with the test more because

00:39:46,000 --> 00:39:51,760
uh you might later on just uh

00:39:49,119 --> 00:39:52,400
you know do a l add a like somewhere and

00:39:51,760 --> 00:39:53,920
now

00:39:52,400 --> 00:39:56,320
your test file won't compile because you

00:39:53,920 --> 00:39:57,359
haven't explicitly imported like in line

00:39:56,320 --> 00:39:58,640
five

00:39:57,359 --> 00:40:00,720
you could just go back and add it there

00:39:58,640 --> 00:40:03,920
later um

00:40:00,720 --> 00:40:05,520
but uh that that's

00:40:03,920 --> 00:40:07,119
that is one way that you can manage it

00:40:05,520 --> 00:40:08,640
it's it's i think helpful when you have

00:40:07,119 --> 00:40:10,079
a lot of different test modules

00:40:08,640 --> 00:40:11,920
and you're trying to figure out oh where

00:40:10,079 --> 00:40:13,200
did this one thing actually come from

00:40:11,920 --> 00:40:14,640
um you know especially if using

00:40:13,200 --> 00:40:16,160
something like test most that's bringing

00:40:14,640 --> 00:40:17,680
like a lot of different things

00:40:16,160 --> 00:40:19,359
uh sometimes those things can be harder

00:40:17,680 --> 00:40:20,720
to track down so this is

00:40:19,359 --> 00:40:23,599
anyway it's just it's something you can

00:40:20,720 --> 00:40:26,640
do and i think this is the last one

00:40:23,599 --> 00:40:27,760
so here we have an import tag uh now i

00:40:26,640 --> 00:40:31,040
realized

00:40:27,760 --> 00:40:32,960
hopefully this works here yep

00:40:31,040 --> 00:40:34,480
so it has now converted the import tag

00:40:32,960 --> 00:40:35,200
uh to the functions that we're actually

00:40:34,480 --> 00:40:37,359
importing the

00:40:35,200 --> 00:40:39,200
the version on cpanel this morning has a

00:40:37,359 --> 00:40:42,480
bug that it doesn't do this but

00:40:39,200 --> 00:40:42,480
i will fix that shortly

00:40:44,880 --> 00:40:47,119
okay

00:40:50,079 --> 00:40:53,280
that's it for the live demo and as far

00:40:51,760 --> 00:40:54,400
as the vim integration goes this is in

00:40:53,280 --> 00:40:57,680
the docs

00:40:54,400 --> 00:41:00,319
um but essentially you can

00:40:57,680 --> 00:41:01,839
you can uh sort of set it up so that

00:41:00,319 --> 00:41:04,480
yeah with the visual selection

00:41:01,839 --> 00:41:06,000
um you can uh in this case i've chosen

00:41:04,480 --> 00:41:09,599
im as the key press

00:41:06,000 --> 00:41:12,079
it will just uh read from standard in

00:41:09,599 --> 00:41:13,040
um it will check these libraries uh

00:41:12,079 --> 00:41:15,280
these

00:41:13,040 --> 00:41:17,040
directories to see if your module exists

00:41:15,280 --> 00:41:18,480
in there so that's

00:41:17,040 --> 00:41:20,079
helpful if you're developing something

00:41:18,480 --> 00:41:23,520
locally that's not installed

00:41:20,079 --> 00:41:25,440
um you can set the log level uh for vim

00:41:23,520 --> 00:41:26,720
you probably want it to be error or even

00:41:25,440 --> 00:41:28,960
something that's never going to happen

00:41:26,720 --> 00:41:30,400
because that can be a bit annoying

00:41:28,960 --> 00:41:31,839
and what i've said in this case is no

00:41:30,400 --> 00:41:33,359
preserved duplicates and that means if a

00:41:31,839 --> 00:41:36,560
module is used twice

00:41:33,359 --> 00:41:38,000
just just use it once or multiple times

00:41:36,560 --> 00:41:39,680
get rid of all the multiples and just

00:41:38,000 --> 00:41:42,000
use it in one case

00:41:39,680 --> 00:41:42,720
and then also with no preserved unused

00:41:42,000 --> 00:41:44,240
i'm asking

00:41:42,720 --> 00:41:46,640
specifically to delete modules which i

00:41:44,240 --> 00:41:48,720
don't think are being used

00:41:46,640 --> 00:41:49,760
if you're doing this kind of stuff then

00:41:48,720 --> 00:41:50,880
you know definitely you want to make

00:41:49,760 --> 00:41:53,040
sure that your code's under version

00:41:50,880 --> 00:41:55,040
control before you do

00:41:53,040 --> 00:41:56,160
but i i find those to be for me helpful

00:41:55,040 --> 00:41:57,760
defaults

00:41:56,160 --> 00:41:59,599
now if you want to just ignore a

00:41:57,760 --> 00:42:01,200
statement

00:41:59,599 --> 00:42:02,560
you may just have your reasons that

00:42:01,200 --> 00:42:04,240
pearl imports just doing the wrong thing

00:42:02,560 --> 00:42:05,920
or you you really know that something is

00:42:04,240 --> 00:42:08,480
there for a good reason and

00:42:05,920 --> 00:42:09,200
in that case um you can just add like a

00:42:08,480 --> 00:42:11,359
no pro

00:42:09,200 --> 00:42:12,480
imports annotations this is basically

00:42:11,359 --> 00:42:14,319
the same kind of idea as

00:42:12,480 --> 00:42:16,079
pearl critic but it's it's not nearly as

00:42:14,319 --> 00:42:17,200
sophisticated as the way pearl critic

00:42:16,079 --> 00:42:19,680
does it

00:42:17,200 --> 00:42:20,400
here you have the option of ignoring one

00:42:19,680 --> 00:42:22,000
line or

00:42:20,400 --> 00:42:24,000
ignoring a block of lines where you say

00:42:22,000 --> 00:42:24,880
no imports and then use so no parallel

00:42:24,000 --> 00:42:27,119
imports and then use

00:42:24,880 --> 00:42:29,280
pearl imports after that so that you can

00:42:27,119 --> 00:42:30,960
switch it back on

00:42:29,280 --> 00:42:33,040
if you're using the command line

00:42:30,960 --> 00:42:34,720
interface you can give it

00:42:33,040 --> 00:42:37,200
a list of modules that you want to

00:42:34,720 --> 00:42:37,680
ignore um either as comma separated or

00:42:37,200 --> 00:42:39,839
just

00:42:37,680 --> 00:42:41,040
in a path with a module name on each

00:42:39,839 --> 00:42:42,800
line

00:42:41,040 --> 00:42:44,160
and that's kind of helpful too when

00:42:42,800 --> 00:42:45,760
you're running it because

00:42:44,160 --> 00:42:48,240
it probably will run into some cases

00:42:45,760 --> 00:42:49,920
where it it's doing the wrong thing and

00:42:48,240 --> 00:42:51,599
if you want to just get like 90 of it

00:42:49,920 --> 00:42:52,880
taken care of just you just ignore those

00:42:51,599 --> 00:42:54,319
to start with and you can deal with them

00:42:52,880 --> 00:42:56,880
later

00:42:54,319 --> 00:42:58,400
um and also if you want to say every

00:42:56,880 --> 00:42:59,839
time this module comes up

00:42:58,400 --> 00:43:01,440
you know i just i just want the the

00:42:59,839 --> 00:43:02,880
empty parens so that we can document

00:43:01,440 --> 00:43:04,640
this module doesn't do anything you can

00:43:02,880 --> 00:43:07,200
give an explicit list of those

00:43:04,640 --> 00:43:10,480
so that it can always do the right thing

00:43:07,200 --> 00:43:12,640
uh it can enforce padding for you

00:43:10,480 --> 00:43:14,560
so for example if you tell it the

00:43:12,640 --> 00:43:15,200
default will be for it to add some

00:43:14,560 --> 00:43:16,800
padding

00:43:15,200 --> 00:43:17,760
at the beginning like of one space at

00:43:16,800 --> 00:43:19,200
the beginning and the end of the

00:43:17,760 --> 00:43:22,240
parenthesis

00:43:19,200 --> 00:43:23,760
uh but you can turn that off and

00:43:22,240 --> 00:43:25,599
you can just have no padding across the

00:43:23,760 --> 00:43:27,760
board then the nice thing is that when

00:43:25,599 --> 00:43:29,359
it does rewrite uh all of your imports

00:43:27,760 --> 00:43:32,400
that you you'll not have a

00:43:29,359 --> 00:43:32,400
consistent look and feel

00:43:32,560 --> 00:43:37,040
when it analyzes your uh imports it will

00:43:35,680 --> 00:43:38,240
make sure that they're alpha sorted as

00:43:37,040 --> 00:43:41,280
well so

00:43:38,240 --> 00:43:44,240
this uh dacb then becomes a b

00:43:41,280 --> 00:43:45,839
c d and that's just for me that's

00:43:44,240 --> 00:43:47,359
something that i like i kind of

00:43:45,839 --> 00:43:49,599
puts things in a predictable order for

00:43:47,359 --> 00:43:50,400
me i also like seeing all my use

00:43:49,599 --> 00:43:52,880
statements in

00:43:50,400 --> 00:43:54,319
alphabetical order as well traditionally

00:43:52,880 --> 00:43:55,599
because that has made it to

00:43:54,319 --> 00:43:57,440
easier to identify when you have

00:43:55,599 --> 00:43:59,200
multiples i don't need that as much when

00:43:57,440 --> 00:44:02,079
i'm using furling ports but it's

00:43:59,200 --> 00:44:03,920
it's quite helpful uh long lines are

00:44:02,079 --> 00:44:05,359
broken up too so if you've got this line

00:44:03,920 --> 00:44:06,400
is so long it won't even show up on the

00:44:05,359 --> 00:44:08,079
slide

00:44:06,400 --> 00:44:10,000
uh but if it's going to be longer than

00:44:08,079 --> 00:44:11,839
78 characters

00:44:10,000 --> 00:44:13,839
then it's just going to move your

00:44:11,839 --> 00:44:15,359
imports uh one to a line

00:44:13,839 --> 00:44:16,960
and then it'll allow for sort them as

00:44:15,359 --> 00:44:19,760
well so

00:44:16,960 --> 00:44:21,119
you know this does make it easier to see

00:44:19,760 --> 00:44:22,319
actually what you're getting and it's

00:44:21,119 --> 00:44:23,119
again one of those things that if you're

00:44:22,319 --> 00:44:25,119
automating this

00:44:23,119 --> 00:44:26,480
it makes it a lot easier to do that than

00:44:25,119 --> 00:44:27,760
just to be like

00:44:26,480 --> 00:44:29,680
uh you know looking at this list and

00:44:27,760 --> 00:44:31,440
then trying to sort it by hand or

00:44:29,680 --> 00:44:32,400
writing some like macro invent to do it

00:44:31,440 --> 00:44:35,200
for you or whatever

00:44:32,400 --> 00:44:36,079
um this this i find it's much easier uh

00:44:35,200 --> 00:44:40,079
it's also

00:44:36,079 --> 00:44:43,040
moose type aware so just uh

00:44:40,079 --> 00:44:43,040
let's have a look here

00:44:43,599 --> 00:44:49,119
so if we're calling dump pearl exports

00:44:45,839 --> 00:44:50,640
on a moose type library

00:44:49,119 --> 00:44:52,240
what it's doing here is it's on the one

00:44:50,640 --> 00:44:54,000
side it's telling you

00:44:52,240 --> 00:44:55,680
um the thing that on the left is the

00:44:54,000 --> 00:44:57,359
thing that is explicitly getting

00:44:55,680 --> 00:44:58,880
imported into your package and on the

00:44:57,359 --> 00:45:01,119
right is the name that you would call it

00:44:58,880 --> 00:45:02,640
by so if you want to use any

00:45:01,119 --> 00:45:04,960
you know you would call it any or you

00:45:02,640 --> 00:45:07,119
would import bull but

00:45:04,960 --> 00:45:08,240
moose has coercions and type checking as

00:45:07,119 --> 00:45:11,359
well

00:45:08,240 --> 00:45:13,280
and so this recognizes that

00:45:11,359 --> 00:45:15,119
you know if somewhere in your module

00:45:13,280 --> 00:45:17,520
you're using an is-int

00:45:15,119 --> 00:45:19,119
but you're not actually using the ant it

00:45:17,520 --> 00:45:21,599
will still know to include the ins in

00:45:19,119 --> 00:45:24,400
your import statement so you don't um

00:45:21,599 --> 00:45:25,680
so you don't get sort of bad information

00:45:24,400 --> 00:45:27,520
in your imports and things start to

00:45:25,680 --> 00:45:31,040
break

00:45:27,520 --> 00:45:32,079
uh if you want to enforce these policies

00:45:31,040 --> 00:45:34,400
are similar ones uh

00:45:32,079 --> 00:45:35,520
by a pearl critic there's a prohibit

00:45:34,400 --> 00:45:38,000
unused import

00:45:35,520 --> 00:45:39,760
uh module and that will try and say oh

00:45:38,000 --> 00:45:41,520
yeah you've imported bool from

00:45:39,760 --> 00:45:42,720
uh from this moose type library but

00:45:41,520 --> 00:45:44,319
you're not actually using it in that

00:45:42,720 --> 00:45:46,560
that'll raise a red flag

00:45:44,319 --> 00:45:48,079
unused include is basically saying

00:45:46,560 --> 00:45:50,400
you're using this module

00:45:48,079 --> 00:45:52,079
but we don't actually see you um

00:45:50,400 --> 00:45:53,760
actually you know making use of that

00:45:52,079 --> 00:45:56,000
module in your code

00:45:53,760 --> 00:45:59,040
and then i've got one that i've just

00:45:56,000 --> 00:46:01,119
worked on recently here

00:45:59,040 --> 00:46:02,319
uh this is prohibit implicit import and

00:46:01,119 --> 00:46:04,240
this

00:46:02,319 --> 00:46:06,319
i haven't really road tested it yet but

00:46:04,240 --> 00:46:07,440
once i get my entire work code base

00:46:06,319 --> 00:46:08,640
cleaned up with uh

00:46:07,440 --> 00:46:10,800
with pearl imports that i want to

00:46:08,640 --> 00:46:12,960
implement this policy to stop

00:46:10,800 --> 00:46:15,119
my my friends and colleagues from

00:46:12,960 --> 00:46:16,960
importing anything implicitly

00:46:15,119 --> 00:46:19,920
um and you can also look at there's a

00:46:16,960 --> 00:46:22,160
prohibited unused constant and

00:46:19,920 --> 00:46:24,000
test varis is actually quite helpful as

00:46:22,160 --> 00:46:25,280
well for picking up variables that you

00:46:24,000 --> 00:46:27,040
haven't used so if you're interested in

00:46:25,280 --> 00:46:28,400
this kind of code cleanup

00:46:27,040 --> 00:46:30,560
those are some things that are available

00:46:28,400 --> 00:46:32,800
to you so now that we've discussed all

00:46:30,560 --> 00:46:35,920
this some best practices around imports

00:46:32,800 --> 00:46:38,160
avoid using export tags http status

00:46:35,920 --> 00:46:39,920
colon is what does that import i don't

00:46:38,160 --> 00:46:40,560
know and i actually don't really care to

00:46:39,920 --> 00:46:42,880
find out

00:46:40,560 --> 00:46:44,800
because i wish it would just tell me and

00:46:42,880 --> 00:46:47,119
there's a way to just tell me so

00:46:44,800 --> 00:46:48,480
i you know i would appreciate like when

00:46:47,119 --> 00:46:49,680
i'm looking at code just just to have it

00:46:48,480 --> 00:46:51,920
spelled out

00:46:49,680 --> 00:46:53,520
uh i would say don't be clever and with

00:46:51,920 --> 00:46:55,200
exporting you can do crazy stuff like

00:46:53,520 --> 00:46:56,800
you can pass regexes and you can say

00:46:55,200 --> 00:46:58,560
give me everything but not this other

00:46:56,800 --> 00:47:01,520
thing and it's

00:46:58,560 --> 00:47:02,960
why you know so if i'm looking at these

00:47:01,520 --> 00:47:03,680
now i have to actually know what's going

00:47:02,960 --> 00:47:06,800
on

00:47:03,680 --> 00:47:08,800
um so i have to i have to know what they

00:47:06,800 --> 00:47:10,400
explicitly export uh i have to know the

00:47:08,800 --> 00:47:12,560
use explorer now i'm going to look up

00:47:10,400 --> 00:47:15,599
exporter's documentation to figure out

00:47:12,560 --> 00:47:17,760
what this stuff means so i would say

00:47:15,599 --> 00:47:19,680
uh you know please don't do that if you

00:47:17,760 --> 00:47:21,760
do insist on doing it

00:47:19,680 --> 00:47:23,040
you can set this exporter verbose

00:47:21,760 --> 00:47:24,000
variable and then you can run your

00:47:23,040 --> 00:47:26,800
script and it will dump

00:47:24,000 --> 00:47:28,160
out a whole bunch of information uh but

00:47:26,800 --> 00:47:29,119
it's probably easier if you don't have

00:47:28,160 --> 00:47:31,280
to do that

00:47:29,119 --> 00:47:33,599
um we talked about earlier using empty

00:47:31,280 --> 00:47:35,680
parens as documentation

00:47:33,599 --> 00:47:37,359
because it just makes it explicit that

00:47:35,680 --> 00:47:38,400
there's there's no funny business going

00:47:37,359 --> 00:47:41,839
on here

00:47:38,400 --> 00:47:43,839
um use implicit imports prudently

00:47:41,839 --> 00:47:45,200
uh so for moose we don't need to be

00:47:43,839 --> 00:47:46,720
explicit about imports

00:47:45,200 --> 00:47:48,559
for data printers well that's usually

00:47:46,720 --> 00:47:50,880
something that we want to use quickly

00:47:48,559 --> 00:47:51,839
and uh there's also some initialization

00:47:50,880 --> 00:47:53,760
that happens

00:47:51,839 --> 00:47:55,359
in the import we need that to run so we

00:47:53,760 --> 00:47:57,040
can't we can just put

00:47:55,359 --> 00:47:58,400
empty parens at the end of data printer

00:47:57,040 --> 00:48:01,520
and expect it to

00:47:58,400 --> 00:48:02,880
perform like it normally would um

00:48:01,520 --> 00:48:05,200
we talked about sorting your use

00:48:02,880 --> 00:48:06,480
statements if you don't do this and you

00:48:05,200 --> 00:48:07,920
say you're not using someone like pearl

00:48:06,480 --> 00:48:09,599
imports when people are sorting out

00:48:07,920 --> 00:48:11,599
merge conflicts inevitably you're going

00:48:09,599 --> 00:48:13,599
to start using modules twice

00:48:11,599 --> 00:48:15,280
uh and and then somebody else has to

00:48:13,599 --> 00:48:16,319
untangle that later and that's that's no

00:48:15,280 --> 00:48:17,599
fun

00:48:16,319 --> 00:48:20,240
i would stick with one style of

00:48:17,599 --> 00:48:22,480
parentheses you can when i look at cpan

00:48:20,240 --> 00:48:25,760
modules i'll see like all sorts of

00:48:22,480 --> 00:48:27,520
ways of uh bracketing or

00:48:25,760 --> 00:48:29,119
quoting and i'll just it's not always

00:48:27,520 --> 00:48:29,680
clear to me what the accepted style is

00:48:29,119 --> 00:48:32,400
so i mean

00:48:29,680 --> 00:48:35,680
you can do this definitely but maybe

00:48:32,400 --> 00:48:39,200
maybe don't do it um

00:48:35,680 --> 00:48:40,800
and yeah as far as uh bonus slides go

00:48:39,200 --> 00:48:42,240
don't require at the top level unless

00:48:40,800 --> 00:48:43,680
you really need to so

00:48:42,240 --> 00:48:45,520
because when i see something like this

00:48:43,680 --> 00:48:46,960
here that i ask myself why is that why

00:48:45,520 --> 00:48:48,240
is this being required and not used and

00:48:46,960 --> 00:48:49,359
then i've got to go around and ask

00:48:48,240 --> 00:48:53,040
questions

00:48:49,359 --> 00:48:55,520
um any and also the require happens

00:48:53,040 --> 00:48:56,880
at run time and not at compile time so

00:48:55,520 --> 00:48:57,520
there's sort of some subtle differences

00:48:56,880 --> 00:48:59,040
here if

00:48:57,520 --> 00:49:00,720
if this module name is not spelled

00:48:59,040 --> 00:49:03,280
correctly i won't actually uh

00:49:00,720 --> 00:49:04,960
catch that in a compilation test so

00:49:03,280 --> 00:49:06,240
those are um

00:49:04,960 --> 00:49:08,000
those are kind of annoying but do

00:49:06,240 --> 00:49:11,839
require when you need to

00:49:08,000 --> 00:49:14,079
uh so any is in this case with exporter

00:49:11,839 --> 00:49:15,680
um that if i know you've been

00:49:14,079 --> 00:49:16,559
disciplined or we've been disciplined

00:49:15,680 --> 00:49:18,880
about when we

00:49:16,559 --> 00:49:20,319
do or don't use require i know that this

00:49:18,880 --> 00:49:22,240
will have a special meaning

00:49:20,319 --> 00:49:24,640
so you can actually use the exporter api

00:49:22,240 --> 00:49:27,280
without uh without using require

00:49:24,640 --> 00:49:28,720
but that actually is a is an option

00:49:27,280 --> 00:49:31,920
that's available to you

00:49:28,720 --> 00:49:34,880
so only import modules that you need and

00:49:31,920 --> 00:49:36,400
only import symbols which you need uh

00:49:34,880 --> 00:49:38,240
avoid implicit imports

00:49:36,400 --> 00:49:40,160
at all costs so those are just all kind

00:49:38,240 --> 00:49:43,599
of basic things to talk about

00:49:40,160 --> 00:49:45,280
in keeping your code tidy and i believe

00:49:43,599 --> 00:49:47,680
i have hit the 50 minute mark

00:49:45,280 --> 00:49:48,400
for uh for my talk so i'm gonna i'm

00:49:47,680 --> 00:49:51,760
gonna wrap

00:49:48,400 --> 00:49:51,760
i'll wrap this portion of it up here

00:49:55,200 --> 00:50:02,000
did anybody have any questions

00:49:59,040 --> 00:50:02,000
clap clap thank you

00:50:02,480 --> 00:50:05,839
i would suggest if people have questions

00:50:04,079 --> 00:50:07,760
just unmute and ask

00:50:05,839 --> 00:50:09,680
don't raise your hand olaf might not be

00:50:07,760 --> 00:50:13,839
able to see that yeah i could see like

00:50:09,680 --> 00:50:13,839
five people

00:50:16,079 --> 00:50:19,599
i will enjoy reading this girl back yes

00:50:17,839 --> 00:50:23,920
thank you

00:50:19,599 --> 00:50:25,920
i got one question sure um

00:50:23,920 --> 00:50:28,319
it's always been in my head that when

00:50:25,920 --> 00:50:30,400
you use something

00:50:28,319 --> 00:50:32,160
in one place you're not gonna and you

00:50:30,400 --> 00:50:35,200
use it again

00:50:32,160 --> 00:50:38,960
um you don't reload the module but if

00:50:35,200 --> 00:50:42,160
use is really a requirement import

00:50:38,960 --> 00:50:45,680
and your two different users import

00:50:42,160 --> 00:50:47,760
different sets of

00:50:45,680 --> 00:50:49,359
uh functions a stiff different sets of

00:50:47,760 --> 00:50:52,839
symbols

00:50:49,359 --> 00:50:55,920
that'll still work right yep

00:50:52,839 --> 00:50:56,240
okay yeah which which i find confusing

00:50:55,920 --> 00:50:58,480
but

00:50:56,240 --> 00:50:59,599
uh but definitely it actually makes more

00:50:58,480 --> 00:51:02,640
sense now

00:50:59,599 --> 00:51:03,920
after you explained it okay

00:51:02,640 --> 00:51:05,760
yeah yeah i appreciate that a lot of

00:51:03,920 --> 00:51:07,680
this stuff i was just like yeah i

00:51:05,760 --> 00:51:08,800
kind of tried to dig around and figuring

00:51:07,680 --> 00:51:10,319
why

00:51:08,800 --> 00:51:11,680
i want to use these two functions here

00:51:10,319 --> 00:51:12,800
and those two functions there why

00:51:11,680 --> 00:51:14,480
wouldn't i do that well

00:51:12,800 --> 00:51:16,400
you can it's just a required part you

00:51:14,480 --> 00:51:23,839
don't get to reload it okay

00:51:16,400 --> 00:51:23,839
thank you

00:51:24,880 --> 00:51:28,079
and if yeah i'm happy to accept uh full

00:51:27,200 --> 00:51:30,079
requests uh

00:51:28,079 --> 00:51:31,440
for a lot of this stuff it's it's all on

00:51:30,079 --> 00:51:34,079
github and uh

00:51:31,440 --> 00:51:35,200
it's on cpan if anybody wants to to play

00:51:34,079 --> 00:51:37,599
around with it

00:51:35,200 --> 00:51:38,880
it's maybe not as fast as it could be

00:51:37,599 --> 00:51:40,880
right now i've i've

00:51:38,880 --> 00:51:42,559
got some like primitive caching that

00:51:40,880 --> 00:51:43,920
i've been trying out for

00:51:42,559 --> 00:51:45,599
getting around like say sometimes you've

00:51:43,920 --> 00:51:47,040
got a module that takes like two seconds

00:51:45,599 --> 00:51:48,240
to load because it's got all this other

00:51:47,040 --> 00:51:51,760
stuff that is pulling in so

00:51:48,240 --> 00:51:54,559
trying to avoid um the like compile time

00:51:51,760 --> 00:51:56,240
hits and things like that um

00:51:54,559 --> 00:51:58,160
but still like say i work i'm running it

00:51:56,240 --> 00:52:00,000
on like 120 000 lines of code

00:51:58,160 --> 00:52:01,280
it takes me about 40 minutes to run

00:52:00,000 --> 00:52:03,920
through it so

00:52:01,280 --> 00:52:10,559
uh it's it's definitely has some some

00:52:03,920 --> 00:52:10,559

YouTube URL: https://www.youtube.com/watch?v=fKqxdTbGxYY


