Title: Cross-platform native GUIs: {trade,pay}offs, {integra,distribu}tion - Zaki Mughal
Publication date: 2021-06-10
Playlist: TPC 2021 in the Cloud
Description: 
	Choosing to create a cross-platform GUI presents different challenges from other kinds of applications. I'll talk about why I chose that path, what I learned/built along the way, and the (Perl) tools I had to write to make it manageable.
I want you to write native GUI applications (in Perl) and I'll show you how you can

- Fight for the `$USER`.
- Act on `localhost`.
- Own your data.

With native applications you can use all the capabilities of your snazzy computer â€” this is computing without artificial limits.

- Learn why I think you should consider writing a native GUI app in 2021. No, I don't mean make a web application and wrap it in a standalone browser â€” though what you learn from my talk will make that easier too.
- Are we deploying once on homogeneous infrastructure? You wish. Learn from all the nerve-racking build failures I slogged through.
- We're going retro and bringing back the 90s. The good parts hopefully.
- A wild PDL appears! But how? You'll have to attend to find out.
Captions: 
	00:00:00,560 --> 00:00:04,799
hello my name is zacharia moghal uh

00:00:03,840 --> 00:00:07,040
i'm going to be talking about

00:00:04,799 --> 00:00:09,920
cross-platform native guise

00:00:07,040 --> 00:00:11,759
uh the qr code on the screen takes you

00:00:09,920 --> 00:00:12,559
to the slides a copy of the slides and

00:00:11,759 --> 00:00:16,240
i'll link them

00:00:12,559 --> 00:00:19,439
on the wiki so

00:00:16,240 --> 00:00:23,199
uh i've noticed a problem with

00:00:19,439 --> 00:00:23,600
computing these days our computers are

00:00:23,199 --> 00:00:26,720
too

00:00:23,600 --> 00:00:28,880
powerful and i think a lot of

00:00:26,720 --> 00:00:30,000
applications are written in a way where

00:00:28,880 --> 00:00:33,360
they

00:00:30,000 --> 00:00:36,640
waste the resources of computers

00:00:33,360 --> 00:00:40,160
and so i think that we need

00:00:36,640 --> 00:00:43,280
to balance the trade-offs

00:00:40,160 --> 00:00:46,239
between writing some of these

00:00:43,280 --> 00:00:47,120
applications and so i'm going to talk

00:00:46,239 --> 00:00:49,920
about what kind of

00:00:47,120 --> 00:00:51,280
these trade-offs are um i'm going to

00:00:49,920 --> 00:00:52,480
start off with like kind of like trying

00:00:51,280 --> 00:00:56,559
to persuade you

00:00:52,480 --> 00:00:59,520
why you should write a native guise

00:00:56,559 --> 00:01:00,640
and then i'll get into some technical uh

00:00:59,520 --> 00:01:03,920
information about

00:01:00,640 --> 00:01:07,119
how you can start uh writing them

00:01:03,920 --> 00:01:12,320
yourself okay

00:01:07,119 --> 00:01:16,240
so why am i giving this talk so

00:01:12,320 --> 00:01:17,680
i read these books and they had one

00:01:16,240 --> 00:01:20,000
thing that i found that was common in

00:01:17,680 --> 00:01:23,280
between them um

00:01:20,000 --> 00:01:24,400
so jeffrey smith's operations book talks

00:01:23,280 --> 00:01:27,439
about how

00:01:24,400 --> 00:01:29,280
in organizations they have operations

00:01:27,439 --> 00:01:31,280
but a lot of the times

00:01:29,280 --> 00:01:32,799
they have this and a pattern where one

00:01:31,280 --> 00:01:35,840
person knows

00:01:32,799 --> 00:01:37,759
everything about the operations

00:01:35,840 --> 00:01:38,880
and that knowledge does not get to other

00:01:37,759 --> 00:01:42,000
people

00:01:38,880 --> 00:01:44,159
and so then that's that's bad because

00:01:42,000 --> 00:01:45,200
then nobody else can you know put in

00:01:44,159 --> 00:01:48,399
their input

00:01:45,200 --> 00:01:52,159
and you rely on this one person and in

00:01:48,399 --> 00:01:55,680
nadia's book she talks about open source

00:01:52,159 --> 00:01:59,119
uh organizations and how

00:01:55,680 --> 00:02:00,880
there are not very many contributors to

00:01:59,119 --> 00:02:02,479
even large organizations

00:02:00,880 --> 00:02:04,320
that are you know continuously

00:02:02,479 --> 00:02:04,960
contributing because if you look at the

00:02:04,320 --> 00:02:08,000
commit

00:02:04,960 --> 00:02:09,840
uh contributions you can see that

00:02:08,000 --> 00:02:11,520
a lot of them follow a parallel

00:02:09,840 --> 00:02:14,800
distribution where you have

00:02:11,520 --> 00:02:18,160
a few people committing

00:02:14,800 --> 00:02:20,640
most of the code and then smaller it

00:02:18,160 --> 00:02:22,640
it tapers off quickly with the rest so i

00:02:20,640 --> 00:02:24,879
want to give this so that

00:02:22,640 --> 00:02:26,160
this uh presentation so that more people

00:02:24,879 --> 00:02:29,520
can have that knowledge

00:02:26,160 --> 00:02:31,040
so let's continue so let's look at the

00:02:29,520 --> 00:02:33,840
competition

00:02:31,040 --> 00:02:35,680
so first we're going to put on the our

00:02:33,840 --> 00:02:38,640
developer hack

00:02:35,680 --> 00:02:39,040
so i think web applications are great

00:02:38,640 --> 00:02:41,680
they

00:02:39,040 --> 00:02:43,680
are they have easy deployment so

00:02:41,680 --> 00:02:44,800
developers can update the code and get

00:02:43,680 --> 00:02:46,000
it out to users

00:02:44,800 --> 00:02:49,120
and the users don't have to worry about

00:02:46,000 --> 00:02:53,120
installing that update

00:02:49,120 --> 00:02:54,879
they have uh the w3c has come up with

00:02:53,120 --> 00:02:56,560
really great flexible declarative

00:02:54,879 --> 00:02:57,360
languages that separate content and

00:02:56,560 --> 00:02:58,800
presentation

00:02:57,360 --> 00:03:01,200
and that these languages they can be

00:02:58,800 --> 00:03:02,560
used outside of the web browser as well

00:03:01,200 --> 00:03:06,080
they

00:03:02,560 --> 00:03:08,480
they found a lot of use outside

00:03:06,080 --> 00:03:09,280
of the web browser like for example uh

00:03:08,480 --> 00:03:12,800
epubs

00:03:09,280 --> 00:03:15,599
contain uh html just zipped up

00:03:12,800 --> 00:03:16,239
it's a very flexible and a lot of people

00:03:15,599 --> 00:03:17,440
have

00:03:16,239 --> 00:03:20,159
different implementations for different

00:03:17,440 --> 00:03:22,480
use cases right

00:03:20,159 --> 00:03:23,599
but there are some drawbacks so because

00:03:22,480 --> 00:03:26,720
web browsers

00:03:23,599 --> 00:03:30,720
are web browsers they have to deal with

00:03:26,720 --> 00:03:33,440
the web and the web is not a safe place

00:03:30,720 --> 00:03:34,959
so they have to be sandboxed this means

00:03:33,440 --> 00:03:38,000
that

00:03:34,959 --> 00:03:41,440
what one person might say

00:03:38,000 --> 00:03:43,200
uh where one person might say no you

00:03:41,440 --> 00:03:44,799
cannot do that

00:03:43,200 --> 00:03:46,720
somebody else might want to really

00:03:44,799 --> 00:03:48,879
actually do that thing and

00:03:46,720 --> 00:03:50,000
in the browser but it's not possible

00:03:48,879 --> 00:03:51,920
because

00:03:50,000 --> 00:03:53,519
uh there could be security risk behind

00:03:51,920 --> 00:03:56,400
that

00:03:53,519 --> 00:03:58,720
uh web browsers have platform and

00:03:56,400 --> 00:03:59,280
browser combination bugs so if you go on

00:03:58,720 --> 00:04:01,120
the

00:03:59,280 --> 00:04:02,560
bug trackers for web browser you'll see

00:04:01,120 --> 00:04:04,319
that they

00:04:02,560 --> 00:04:05,680
uh there's bugs that have been open for

00:04:04,319 --> 00:04:08,560
like 10 years

00:04:05,680 --> 00:04:09,439
and you have to keep those in mind you

00:04:08,560 --> 00:04:12,080
cannot

00:04:09,439 --> 00:04:13,680
work around them because that browser

00:04:12,080 --> 00:04:18,160
just does not support

00:04:13,680 --> 00:04:19,600
that way of working and

00:04:18,160 --> 00:04:22,400
sometimes there are things you can work

00:04:19,600 --> 00:04:24,479
around but when you work around them

00:04:22,400 --> 00:04:25,600
it's it's dirty and you have to keep

00:04:24,479 --> 00:04:28,320
track of how

00:04:25,600 --> 00:04:30,479
many people are using that browser where

00:04:28,320 --> 00:04:31,919
where you need to put in polyfills or a

00:04:30,479 --> 00:04:33,840
shim

00:04:31,919 --> 00:04:35,280
and then see how long you can support

00:04:33,840 --> 00:04:36,800
that so but

00:04:35,280 --> 00:04:38,400
there are is a lot of native code that

00:04:36,800 --> 00:04:38,880
already exists what what can do about

00:04:38,400 --> 00:04:41,919
that

00:04:38,880 --> 00:04:42,320
well we have uh webassembly and tooling

00:04:41,919 --> 00:04:44,880
like

00:04:42,320 --> 00:04:45,440
scripting that comes up but the thing is

00:04:44,880 --> 00:04:47,199
the

00:04:45,440 --> 00:04:48,960
package management story there is not

00:04:47,199 --> 00:04:50,639
really great uh

00:04:48,960 --> 00:04:52,400
this is where we have to show our

00:04:50,639 --> 00:04:54,000
appreciation for people who write

00:04:52,400 --> 00:04:55,440
do package managements on different

00:04:54,000 --> 00:04:57,520
systems they

00:04:55,440 --> 00:04:58,800
do to take a lot of effort making sure

00:04:57,520 --> 00:05:01,120
that uh

00:04:58,800 --> 00:05:02,639
libraries work together uh that you

00:05:01,120 --> 00:05:06,000
don't have to have duplicates

00:05:02,639 --> 00:05:08,840
of files uh so

00:05:06,000 --> 00:05:11,440
a lot of kudos for people who do package

00:05:08,840 --> 00:05:12,880
meetings and then

00:05:11,440 --> 00:05:14,960
accessing that code through a client

00:05:12,880 --> 00:05:17,600
server architecture adds a lot of

00:05:14,960 --> 00:05:20,639
overhead for certain applications so

00:05:17,600 --> 00:05:21,759
uh there might those are some drawbacks

00:05:20,639 --> 00:05:23,759
and then we can look at the different

00:05:21,759 --> 00:05:27,120
kinds of computing apis that

00:05:23,759 --> 00:05:29,919
are available these are these are not

00:05:27,120 --> 00:05:31,840
one-to-one mappings but they're similar

00:05:29,919 --> 00:05:33,680
and you can see that it takes a while

00:05:31,840 --> 00:05:36,320
for

00:05:33,680 --> 00:05:38,479
uh native apis to become available in

00:05:36,320 --> 00:05:39,919
the browser and become standardized

00:05:38,479 --> 00:05:41,600
and that's understandable because

00:05:39,919 --> 00:05:44,080
standards need to be able to work

00:05:41,600 --> 00:05:45,680
everywhere and so you have to have the

00:05:44,080 --> 00:05:46,800
common subset out of all of those

00:05:45,680 --> 00:05:50,639
standards and

00:05:46,800 --> 00:05:52,080
when you're in the browser but

00:05:50,639 --> 00:05:54,080
we've seen that we have a lot of these

00:05:52,080 --> 00:05:54,880
things on native for a long time before

00:05:54,080 --> 00:05:56,560
they're

00:05:54,880 --> 00:05:59,280
available in the browser and the ones in

00:05:56,560 --> 00:06:03,440
the browser are kind of

00:05:59,280 --> 00:06:05,199
uh not complete for example

00:06:03,440 --> 00:06:06,720
with uh there are certain things you

00:06:05,199 --> 00:06:08,720
cannot do uh

00:06:06,720 --> 00:06:10,639
in webgl because there's security risk

00:06:08,720 --> 00:06:14,720
you could get data through

00:06:10,639 --> 00:06:18,639
uh you could access data through

00:06:14,720 --> 00:06:22,160
webgl so that's just not allowed

00:06:18,639 --> 00:06:24,240
so maybe we can put two things together

00:06:22,160 --> 00:06:26,240
have the best of both worlds where we

00:06:24,240 --> 00:06:29,120
have resources

00:06:26,240 --> 00:06:29,680
um so yeah that we can do that uh that's

00:06:29,120 --> 00:06:31,759
what

00:06:29,680 --> 00:06:33,840
a lot of applications are doing by em

00:06:31,759 --> 00:06:36,800
embedding a browser

00:06:33,840 --> 00:06:38,800
and there's several ways of doing that

00:06:36,800 --> 00:06:42,080
and then you can

00:06:38,800 --> 00:06:45,440
you can get access to resources that way

00:06:42,080 --> 00:06:48,560
all right but let's put on our user hack

00:06:45,440 --> 00:06:49,840
so there are certain values that are not

00:06:48,560 --> 00:06:52,720
being appreciated

00:06:49,840 --> 00:06:54,800
with web applications like privacy

00:06:52,720 --> 00:06:58,080
that's a big one

00:06:54,800 --> 00:06:59,280
data interoperability where you want to

00:06:58,080 --> 00:07:00,880
work

00:06:59,280 --> 00:07:04,960
you want that data to be available to

00:07:00,880 --> 00:07:09,440
you and to other applications

00:07:04,960 --> 00:07:10,720
and making the data future proof

00:07:09,440 --> 00:07:13,120
and integration with the rest of the

00:07:10,720 --> 00:07:15,840
desktop

00:07:13,120 --> 00:07:16,560
so with data interoperability you can

00:07:15,840 --> 00:07:18,400
actually

00:07:16,560 --> 00:07:19,919
have the data and then you don't you're

00:07:18,400 --> 00:07:21,599
not tied to the single application that

00:07:19,919 --> 00:07:22,720
you're using you can actually switch to

00:07:21,599 --> 00:07:25,840
something else

00:07:22,720 --> 00:07:26,560
uh so there is there are some solutions

00:07:25,840 --> 00:07:30,240
for that i think

00:07:26,560 --> 00:07:31,919
uh the solid protocol is working on that

00:07:30,240 --> 00:07:33,680
where you can have a your data in

00:07:31,919 --> 00:07:35,039
something what they call a pod and then

00:07:33,680 --> 00:07:37,120
different applications can have

00:07:35,039 --> 00:07:40,160
restricted access to that part

00:07:37,120 --> 00:07:42,800
so that's something to watch but there's

00:07:40,160 --> 00:07:45,120
a lot of things that are missing from

00:07:42,800 --> 00:07:48,560
our lessons of interaction design

00:07:45,120 --> 00:07:50,560
we've had several decades of development

00:07:48,560 --> 00:07:52,319
of interaction design and

00:07:50,560 --> 00:07:54,479
sometimes the browser breaks that those

00:07:52,319 --> 00:07:56,960
lessons so the clipboard

00:07:54,479 --> 00:07:58,479
doesn't necessarily always work and

00:07:56,960 --> 00:08:00,160
things like drag and drop don't

00:07:58,479 --> 00:08:02,479
actually work these interaction design

00:08:00,160 --> 00:08:05,280
patterns are not being used

00:08:02,479 --> 00:08:06,639
to the full extent and you don't

00:08:05,280 --> 00:08:07,599
necessarily know if a certain

00:08:06,639 --> 00:08:10,560
application

00:08:07,599 --> 00:08:11,039
is going to handle them correctly and

00:08:10,560 --> 00:08:13,039
then

00:08:11,039 --> 00:08:14,479
there are there are widgets inside these

00:08:13,039 --> 00:08:15,919
web applications and there's frameworks

00:08:14,479 --> 00:08:18,080
for that for example

00:08:15,919 --> 00:08:19,280
googs2 is one it looks very much like a

00:08:18,080 --> 00:08:22,560
desktop

00:08:19,280 --> 00:08:23,280
and i but not every widget and i don't

00:08:22,560 --> 00:08:26,560
know if this is

00:08:23,280 --> 00:08:28,319
specific to uh to cook stuff but

00:08:26,560 --> 00:08:29,919
i've seen for different times of

00:08:28,319 --> 00:08:30,879
frameworks that they don't always

00:08:29,919 --> 00:08:32,880
support

00:08:30,879 --> 00:08:35,200
certain kinds of interactions that you

00:08:32,880 --> 00:08:39,279
would expect in a desktop application

00:08:35,200 --> 00:08:42,479
and so you you you lose certain kinds of

00:08:39,279 --> 00:08:46,320
good interaction design principles

00:08:42,479 --> 00:08:49,360
like safe exploration of the the ui

00:08:46,320 --> 00:08:51,200
when you don't have these

00:08:49,360 --> 00:08:53,680
all right let's put on our carbon based

00:08:51,200 --> 00:08:57,440
life form hats

00:08:53,680 --> 00:08:59,600
so the our visual systems were designed

00:08:57,440 --> 00:09:01,279
for object recognition are reading is

00:08:59,600 --> 00:09:02,640
actually a hack on top of the object

00:09:01,279 --> 00:09:03,360
recognition you've probably seen that

00:09:02,640 --> 00:09:05,200
thing where

00:09:03,360 --> 00:09:06,560
they have everything misspelled and you

00:09:05,200 --> 00:09:07,760
can still read it

00:09:06,560 --> 00:09:09,680
that's because you're looking at the

00:09:07,760 --> 00:09:12,800
shape of the words

00:09:09,680 --> 00:09:15,440
and so we

00:09:12,800 --> 00:09:16,959
need to put a lot more emphasis on our

00:09:15,440 --> 00:09:20,880
biological

00:09:16,959 --> 00:09:22,720
uh needs in these interfaces and one of

00:09:20,880 --> 00:09:25,200
those things is latency

00:09:22,720 --> 00:09:27,600
because you're sitting here the whole

00:09:25,200 --> 00:09:30,560
point of a human computer interface

00:09:27,600 --> 00:09:30,959
is that you're sitting inside of that

00:09:30,560 --> 00:09:33,120
loop

00:09:30,959 --> 00:09:34,000
the input to render feedback loop and

00:09:33,120 --> 00:09:35,519
you have to

00:09:34,000 --> 00:09:37,920
look at what's on the screen and then go

00:09:35,519 --> 00:09:39,839
back and put in the next input

00:09:37,920 --> 00:09:40,959
if there's a mismatch if something jumps

00:09:39,839 --> 00:09:42,959
up on the screen

00:09:40,959 --> 00:09:44,720
when you're trying to click it that's

00:09:42,959 --> 00:09:48,160
lost time and

00:09:44,720 --> 00:09:49,360
frustrating and then there's also

00:09:48,160 --> 00:09:51,839
different hardware

00:09:49,360 --> 00:09:54,080
that might not be supported by these

00:09:51,839 --> 00:09:57,440
types of web applications

00:09:54,080 --> 00:09:59,760
uh let's start with uh

00:09:57,440 --> 00:10:01,360
the e-ink at the top those are very low

00:09:59,760 --> 00:10:04,880
powered devices

00:10:01,360 --> 00:10:09,279
i think they're around like

00:10:04,880 --> 00:10:13,040
400 to 800 megahertz some have

00:10:09,279 --> 00:10:16,640
uh like 256 megabytes of ram

00:10:13,040 --> 00:10:20,240
up to one gig ram uh depending on how

00:10:16,640 --> 00:10:20,240
high andy go and

00:10:20,720 --> 00:10:26,800
a full browser cannot run on those

00:10:24,720 --> 00:10:28,880
uh and we can look at this uh this green

00:10:26,800 --> 00:10:32,240
machine the old pc

00:10:28,880 --> 00:10:36,160
i actually use this quite a lot and

00:10:32,240 --> 00:10:37,920
it only has 256 megabytes of ram and

00:10:36,160 --> 00:10:39,360
in any application that would go outside

00:10:37,920 --> 00:10:42,720
the ram would start swapping

00:10:39,360 --> 00:10:43,760
and that's not a fun experience i don't

00:10:42,720 --> 00:10:47,279
know if some

00:10:43,760 --> 00:10:49,839
some um of current current applications

00:10:47,279 --> 00:10:51,760
might even not even work on that and

00:10:49,839 --> 00:10:53,680
then there's tablets which are often

00:10:51,760 --> 00:10:55,839
more powerful than either the other two

00:10:53,680 --> 00:10:58,560
but uh they have some other

00:10:55,839 --> 00:11:00,480
types of interactions that you need to

00:10:58,560 --> 00:11:03,440
take into account and

00:11:00,480 --> 00:11:04,880
uh they really depend on latency because

00:11:03,440 --> 00:11:06,399
you're like you're using your hands

00:11:04,880 --> 00:11:09,680
directly to

00:11:06,399 --> 00:11:11,680
um interact

00:11:09,680 --> 00:11:12,720
but now you can have intermission

00:11:11,680 --> 00:11:15,600
between

00:11:12,720 --> 00:11:16,959
this part and the technical part so

00:11:15,600 --> 00:11:21,279
somebody sent me something

00:11:16,959 --> 00:11:24,320
a video and i thought

00:11:21,279 --> 00:11:24,320
well here we go

00:11:24,959 --> 00:11:32,160
so let's do a c shanty

00:11:29,519 --> 00:11:34,640
there once was a lib written in sea

00:11:32,160 --> 00:11:37,680
installing it was not easy

00:11:34,640 --> 00:11:38,240
tried to build and win and go by linker

00:11:37,680 --> 00:11:41,600
fell

00:11:38,240 --> 00:11:45,440
bill said no soon may the q

00:11:41,600 --> 00:11:48,800
a come but not until all checks are done

00:11:45,440 --> 00:11:49,440
the os does sake fall through the buffer

00:11:48,800 --> 00:11:53,839
did

00:11:49,440 --> 00:11:57,279
overflow okay

00:11:53,839 --> 00:11:59,920
so now the technical part so

00:11:57,279 --> 00:12:01,200
on cpan today there are several

00:11:59,920 --> 00:12:05,279
libraries that you can use

00:12:01,200 --> 00:12:06,880
for uh ui uh these ones i've listed are

00:12:05,279 --> 00:12:09,440
all cross-platform

00:12:06,880 --> 00:12:11,200
some of them are not cross-platform i

00:12:09,440 --> 00:12:14,480
also want to mention that

00:12:11,200 --> 00:12:16,959
gta 2 is cross-platform but it's

00:12:14,480 --> 00:12:17,519
old and there are several pro projects

00:12:16,959 --> 00:12:20,160
that

00:12:17,519 --> 00:12:22,079
could use some help uh there's a pro

00:12:20,160 --> 00:12:24,720
project called gc star

00:12:22,079 --> 00:12:26,560
there's a for and there's another

00:12:24,720 --> 00:12:28,320
project called shutter

00:12:26,560 --> 00:12:29,920
that have done some of the transition to

00:12:28,320 --> 00:12:32,880
gtk3 and then there's a

00:12:29,920 --> 00:12:33,600
project called biodiverse which studies

00:12:32,880 --> 00:12:36,639
uh

00:12:33,600 --> 00:12:38,480
ecological uh diversity

00:12:36,639 --> 00:12:40,800
and that's still on gtk too and they

00:12:38,480 --> 00:12:43,440
could use some help so maybe with this

00:12:40,800 --> 00:12:44,000
you uh after this you could help them

00:12:43,440 --> 00:12:48,399
out

00:12:44,000 --> 00:12:52,000
and uh do some science and climate

00:12:48,399 --> 00:12:54,240
uh in pearl for that

00:12:52,000 --> 00:12:55,360
so we're going to talk about gta 3. it's

00:12:54,240 --> 00:12:57,440
cross-platform

00:12:55,360 --> 00:12:58,639
it has many binding language bindings

00:12:57,440 --> 00:13:01,920
through an ffi

00:12:58,639 --> 00:13:03,920
interface that works through g object

00:13:01,920 --> 00:13:05,839
it has an interface builder so you can

00:13:03,920 --> 00:13:07,040
put parts of your interface in an xml

00:13:05,839 --> 00:13:10,560
file load it

00:13:07,040 --> 00:13:14,480
and then that lets you

00:13:10,560 --> 00:13:17,120
design parts outside of your program

00:13:14,480 --> 00:13:18,480
it has an interactive debugger which you

00:13:17,120 --> 00:13:20,079
can

00:13:18,480 --> 00:13:21,920
run by setting an environment variable

00:13:20,079 --> 00:13:23,600
like this

00:13:21,920 --> 00:13:25,200
kind it kind of lets you see the

00:13:23,600 --> 00:13:28,560
hierarchy of uh

00:13:25,200 --> 00:13:29,120
widgets in the in your application that

00:13:28,560 --> 00:13:32,399
way

00:13:29,120 --> 00:13:34,880
and when they get updated so

00:13:32,399 --> 00:13:36,000
i have created a template on github

00:13:34,880 --> 00:13:37,760
which you can go to

00:13:36,000 --> 00:13:39,199
it's also going to be linked inside the

00:13:37,760 --> 00:13:42,320
slide repository

00:13:39,199 --> 00:13:44,800
where it's a starter for all of the

00:13:42,320 --> 00:13:47,519
things i'm going to talk about next

00:13:44,800 --> 00:13:48,880
so on when you're using gtk3 on linux i

00:13:47,519 --> 00:13:49,760
recommend you use the system package

00:13:48,880 --> 00:13:53,279
manager

00:13:49,760 --> 00:13:56,639
it's uh everything works

00:13:53,279 --> 00:13:58,959
uh it just works me

00:13:56,639 --> 00:14:01,040
now nobody's ever ever said that about

00:13:58,959 --> 00:14:03,600
computers of course just me

00:14:01,040 --> 00:14:04,160
but um there are some things that you

00:14:03,600 --> 00:14:06,000
might want to

00:14:04,160 --> 00:14:07,279
watch out for if you ever try to test it

00:14:06,000 --> 00:14:10,639
out in docker

00:14:07,279 --> 00:14:13,120
um there are some applications that

00:14:10,639 --> 00:14:13,920
do not like being run as root uh it's

00:14:13,120 --> 00:14:18,959
not necessarily

00:14:13,920 --> 00:14:21,680
gtk3 specific but um

00:14:18,959 --> 00:14:23,040
certain applications that use sandboxing

00:14:21,680 --> 00:14:25,120
will complain so

00:14:23,040 --> 00:14:26,240
that's just something to watch out for

00:14:25,120 --> 00:14:27,680
on mac os

00:14:26,240 --> 00:14:30,000
there are several package managers and

00:14:27,680 --> 00:14:33,360
i've used homebrew for that and

00:14:30,000 --> 00:14:35,920
it works out well fine um

00:14:33,360 --> 00:14:39,040
and in general uh general uh advice is

00:14:35,920 --> 00:14:39,040
do not use the system pearl

00:14:40,560 --> 00:14:44,399
and there are some architecture issues

00:14:42,880 --> 00:14:46,880
that you might want to watch out for on

00:14:44,399 --> 00:14:49,199
mac os

00:14:46,880 --> 00:14:50,079
so far i've seen the packages for gtk 3

00:14:49,199 --> 00:14:52,880
do

00:14:50,079 --> 00:14:55,519
work on arm 64. i just not have not

00:14:52,880 --> 00:14:55,519
tested them

00:14:55,600 --> 00:15:00,720
and when you are packaging up

00:14:58,800 --> 00:15:02,880
for distribution you might want to look

00:15:00,720 --> 00:15:05,519
into universal binaries i have not

00:15:02,880 --> 00:15:05,519
done that yet

00:15:06,720 --> 00:15:12,240
on windows you want to use

00:15:10,240 --> 00:15:13,920
msys2 that's the recommended way of

00:15:12,240 --> 00:15:17,120
installing gtk3

00:15:13,920 --> 00:15:20,160
there are some problems with how

00:15:17,120 --> 00:15:22,079
xutils make maker links things together

00:15:20,160 --> 00:15:23,519
uh it has to do with how it looks up

00:15:22,079 --> 00:15:26,240
dynamic libraries

00:15:23,519 --> 00:15:27,040
i have a small hack in the repository

00:15:26,240 --> 00:15:30,000
that

00:15:27,040 --> 00:15:32,160
fixes that so it installs once you put

00:15:30,000 --> 00:15:34,959
something in the environment

00:15:32,160 --> 00:15:36,160
uh there's a there's an issue that's you

00:15:34,959 --> 00:15:38,560
might want to watch out for

00:15:36,160 --> 00:15:40,240
on windows which is that there's a

00:15:38,560 --> 00:15:41,839
maximum path length so

00:15:40,240 --> 00:15:44,160
if you have something that installs that

00:15:41,839 --> 00:15:47,199
takes a uh outputs

00:15:44,160 --> 00:15:48,079
a long path you might end up with

00:15:47,199 --> 00:15:50,480
missing files

00:15:48,079 --> 00:15:51,600
i have had this come up this issue come

00:15:50,480 --> 00:15:53,680
up multiple times

00:15:51,600 --> 00:15:55,120
so what i try to do is i try to build

00:15:53,680 --> 00:15:58,880
everything close to

00:15:55,120 --> 00:16:01,279
the root of the drive and

00:15:58,880 --> 00:16:03,680
this is a very specific issue and i want

00:16:01,279 --> 00:16:05,360
to bring this up because

00:16:03,680 --> 00:16:06,880
it took me a long time to find the

00:16:05,360 --> 00:16:08,720
solution for this

00:16:06,880 --> 00:16:10,160
and when i searched for it again with

00:16:08,720 --> 00:16:13,440
the keywords

00:16:10,160 --> 00:16:16,160
i only found one result so there is a

00:16:13,440 --> 00:16:20,160
way of drawing windows

00:16:16,160 --> 00:16:21,680
on windows that uh

00:16:20,160 --> 00:16:23,519
you want you might want to disable if

00:16:21,680 --> 00:16:26,320
you ever use

00:16:23,519 --> 00:16:27,839
um if you ever say you want to say you

00:16:26,320 --> 00:16:29,839
want to embed chromium embedded

00:16:27,839 --> 00:16:32,399
framework inside of your

00:16:29,839 --> 00:16:32,959
uh gui application your gtk application

00:16:32,399 --> 00:16:36,560
well

00:16:32,959 --> 00:16:38,160
it won't display until you do this

00:16:36,560 --> 00:16:40,240
it took me a long time to i was

00:16:38,160 --> 00:16:43,199
wondering why it's not working

00:16:40,240 --> 00:16:44,160
um it works on every other uh platform

00:16:43,199 --> 00:16:48,160
but

00:16:44,160 --> 00:16:51,839
yeah so inside the repository there's

00:16:48,160 --> 00:16:54,959
also uh github actions workflows

00:16:51,839 --> 00:16:56,480
so you can it it does the entire build

00:16:54,959 --> 00:16:59,839
for each platform

00:16:56,480 --> 00:17:03,279
and it doesn't run the test

00:16:59,839 --> 00:17:05,360
but i can add those in

00:17:03,279 --> 00:17:06,319
and the other thing i've added in the

00:17:05,360 --> 00:17:08,640
repository is

00:17:06,319 --> 00:17:10,000
vagrant setups so that you can actually

00:17:08,640 --> 00:17:12,640
test it locally

00:17:10,000 --> 00:17:14,880
uh there's ones for debian and windows

00:17:12,640 --> 00:17:18,240
and there's also a mac os

00:17:14,880 --> 00:17:19,679
uh up in there but you have to actually

00:17:18,240 --> 00:17:23,280
provide a mac os

00:17:19,679 --> 00:17:24,559
image to use it and you can uh

00:17:23,280 --> 00:17:26,400
open up that file and there's more

00:17:24,559 --> 00:17:30,000
information on how to

00:17:26,400 --> 00:17:30,799
do that um creating distributable

00:17:30,000 --> 00:17:33,039
packages

00:17:30,799 --> 00:17:35,120
on windows you can just use msys2's

00:17:33,039 --> 00:17:38,320
package manager to get a list of files

00:17:35,120 --> 00:17:40,880
use powerpacker on the uh

00:17:38,320 --> 00:17:43,200
the main script and then use wix toolset

00:17:40,880 --> 00:17:45,840
to turn it into an msi

00:17:43,200 --> 00:17:47,679
wix toolset is the same thing that is

00:17:45,840 --> 00:17:49,440
used to create the msi for strawberry

00:17:47,679 --> 00:17:52,880
pearl

00:17:49,440 --> 00:17:54,559
um i have a script for this

00:17:52,880 --> 00:17:56,240
i will put it in the repository i just

00:17:54,559 --> 00:17:58,160
need to test it some more before i

00:17:56,240 --> 00:18:00,880
release

00:17:58,160 --> 00:18:01,760
on mac os there are two ways you can

00:18:00,880 --> 00:18:04,480
approach this

00:18:01,760 --> 00:18:04,799
you can create a homebrew track tap if

00:18:04,480 --> 00:18:06,400
you

00:18:04,799 --> 00:18:08,160
and this is better if your application

00:18:06,400 --> 00:18:11,600
is made more for developers

00:18:08,160 --> 00:18:15,919
an example of this is uh is uh

00:18:11,600 --> 00:18:19,200
the sketch program sqi

00:18:15,919 --> 00:18:20,880
tch uh it does have a homebrew tab and

00:18:19,200 --> 00:18:23,840
you can use that as an example

00:18:20,880 --> 00:18:25,360
the other way is to create the a dmg so

00:18:23,840 --> 00:18:28,720
that anybody can

00:18:25,360 --> 00:18:29,760
install it and then on linux uh you want

00:18:28,720 --> 00:18:33,360
to create a

00:18:29,760 --> 00:18:35,360
uh user either a package for that system

00:18:33,360 --> 00:18:36,960
or there's a new way of doing things

00:18:35,360 --> 00:18:39,120
called flat pack which

00:18:36,960 --> 00:18:41,039
uh is basically gives you build

00:18:39,120 --> 00:18:44,640
instructions and you can

00:18:41,039 --> 00:18:48,240
that can be run on any uh linux system

00:18:44,640 --> 00:18:49,440
from there uh but those two last two i i

00:18:48,240 --> 00:18:53,520
still need to work on those

00:18:49,440 --> 00:18:55,679
uh but now i'm gonna tell you about

00:18:53,520 --> 00:18:57,200
what i did with all that information why

00:18:55,679 --> 00:18:58,480
i have this information

00:18:57,200 --> 00:19:00,320
is because i wanted to write a document

00:18:58,480 --> 00:19:00,799
reader or a document reader that did a

00:19:00,320 --> 00:19:04,000
little bit

00:19:00,799 --> 00:19:07,200
more than a document reader so

00:19:04,000 --> 00:19:09,440
i read this book in order to get a

00:19:07,200 --> 00:19:10,240
view of what the current state of

00:19:09,440 --> 00:19:13,120
research is

00:19:10,240 --> 00:19:13,520
on this kind of electronic books reading

00:19:13,120 --> 00:19:15,679
uh

00:19:13,520 --> 00:19:17,919
things and i noticed that we don't

00:19:15,679 --> 00:19:19,440
really do

00:19:17,919 --> 00:19:21,120
all of the things that people have

00:19:19,440 --> 00:19:22,960
researched for making

00:19:21,120 --> 00:19:24,799
reading documents better on computers we

00:19:22,960 --> 00:19:26,640
don't use them every day

00:19:24,799 --> 00:19:29,200
the most popular document readers do not

00:19:26,640 --> 00:19:33,440
doing a lot of these things

00:19:29,200 --> 00:19:36,480
so i made this it's on cpan

00:19:33,440 --> 00:19:38,799
uh it's right now it's just alpha state

00:19:36,480 --> 00:19:42,400
it doesn't really do that much but

00:19:38,799 --> 00:19:45,039
um making it work

00:19:42,400 --> 00:19:46,559
needed a lot of things behind the scenes

00:19:45,039 --> 00:19:49,520
so i'm going to talk about that

00:19:46,559 --> 00:19:52,320
so the stack is of course pearl gtk3

00:19:49,520 --> 00:19:54,559
cairo which is the graphics uh

00:19:52,320 --> 00:19:55,600
it can draw different types of geometry

00:19:54,559 --> 00:19:59,280
primitives like

00:19:55,600 --> 00:20:01,760
rectangles lines curves

00:19:59,280 --> 00:20:03,360
uh there's new pdf which i installed

00:20:01,760 --> 00:20:05,920
with alienware pdf which is a pdf

00:20:03,360 --> 00:20:07,919
rendering library

00:20:05,920 --> 00:20:11,200
[Music]

00:20:07,919 --> 00:20:12,320
and there is a custom scene graph that i

00:20:11,200 --> 00:20:15,679
wrote

00:20:12,320 --> 00:20:18,000
and the custom scene graph is

00:20:15,679 --> 00:20:20,240
uses two different libraries graphene

00:20:18,000 --> 00:20:23,120
which is a math library

00:20:20,240 --> 00:20:24,159
which uh computes different things like

00:20:23,120 --> 00:20:27,360
uh

00:20:24,159 --> 00:20:31,440
2d points boxes intersections

00:20:27,360 --> 00:20:34,159
for detecting hit points if a mouse

00:20:31,440 --> 00:20:36,400
enters into a region kiwi solver which

00:20:34,159 --> 00:20:38,480
is an implementation of the cassowary

00:20:36,400 --> 00:20:42,080
linear inequality solver

00:20:38,480 --> 00:20:42,640
which can solve it can be used to do

00:20:42,080 --> 00:20:45,120
layout

00:20:42,640 --> 00:20:46,720
basically you put in variables making it

00:20:45,120 --> 00:20:48,480
make a bunch of inequalities

00:20:46,720 --> 00:20:50,080
to determine how you want to lay out

00:20:48,480 --> 00:20:50,799
different things and it will solve for

00:20:50,080 --> 00:20:53,760
that

00:20:50,799 --> 00:20:55,280
give you the the values that will give a

00:20:53,760 --> 00:20:57,120
solution to that

00:20:55,280 --> 00:20:58,960
and then you can use that to do the

00:20:57,120 --> 00:21:01,039
layout

00:20:58,960 --> 00:21:03,760
instead of doing like explicitly writing

00:21:01,039 --> 00:21:06,000
out like for example a grid

00:21:03,760 --> 00:21:06,880
you can just put make equations for a

00:21:06,000 --> 00:21:09,280
grid

00:21:06,880 --> 00:21:09,919
i use the festival text-to-speech thing

00:21:09,280 --> 00:21:13,200
because

00:21:09,919 --> 00:21:16,880
i wanted to have the reader

00:21:13,200 --> 00:21:20,480
actually read out the documents to me

00:21:16,880 --> 00:21:22,960
and then io async to get everything to

00:21:20,480 --> 00:21:26,159
work inside the event loop

00:21:22,960 --> 00:21:31,039
and that is all except for festival

00:21:26,159 --> 00:21:33,280
that is all cross platform

00:21:31,039 --> 00:21:34,720
and so in the future i have some ideas

00:21:33,280 --> 00:21:38,559
um

00:21:34,720 --> 00:21:41,440
so there is a library called andrew

00:21:38,559 --> 00:21:43,520
or a distribution of the of tickle tk

00:21:41,440 --> 00:21:46,799
which is called andro wish which is

00:21:43,520 --> 00:21:48,880
which runs on android so i was thinking

00:21:46,799 --> 00:21:52,320
perhaps i could

00:21:48,880 --> 00:21:55,760
try that out and put perl in there

00:21:52,320 --> 00:21:58,880
along with one of the the tk

00:21:55,760 --> 00:22:01,520
libraries that are available on cpan uh

00:21:58,880 --> 00:22:02,960
i haven't touched it yet but it's a very

00:22:01,520 --> 00:22:06,640
lightweight

00:22:02,960 --> 00:22:09,760
um lightweight application

00:22:06,640 --> 00:22:11,520
and it uses sdl2 to actually do the

00:22:09,760 --> 00:22:14,240
drawing onto the

00:22:11,520 --> 00:22:14,799
android frame buffer i would like to

00:22:14,240 --> 00:22:17,600
port

00:22:14,799 --> 00:22:19,600
this to an e-ink and that's related that

00:22:17,600 --> 00:22:22,640
is related to the android thing

00:22:19,600 --> 00:22:26,000
itself because a lot of e-ink devices

00:22:22,640 --> 00:22:29,600
are linux based and sdl

00:22:26,000 --> 00:22:31,520
2 would make a good way of communicating

00:22:29,600 --> 00:22:33,840
with the e-ink screen

00:22:31,520 --> 00:22:34,640
and and of course the e-ink screens are

00:22:33,840 --> 00:22:38,400
low-powered

00:22:34,640 --> 00:22:41,280
so uh a lightweight

00:22:38,400 --> 00:22:41,840
um drawing library would be good for

00:22:41,280 --> 00:22:44,400
that

00:22:41,840 --> 00:22:46,240
and then i've been thinking about how

00:22:44,400 --> 00:22:49,440
can we do

00:22:46,240 --> 00:22:50,240
better binary pearl disc packaging using

00:22:49,440 --> 00:22:52,000
cis

00:22:50,240 --> 00:22:54,400
because i've noticed in the python

00:22:52,000 --> 00:22:56,880
community there are some interesting

00:22:54,400 --> 00:22:58,640
things where they create wheels and that

00:22:56,880 --> 00:23:02,400
makes it easier to install

00:22:58,640 --> 00:23:05,200
a lot of things so uh i have some

00:23:02,400 --> 00:23:06,480
i have some links inside of the uh

00:23:05,200 --> 00:23:08,240
inside of the slides

00:23:06,480 --> 00:23:09,600
which uh tell you a little bit more

00:23:08,240 --> 00:23:10,640
about that but if anybody wants to talk

00:23:09,600 --> 00:23:12,559
to that

00:23:10,640 --> 00:23:13,679
talk about that with me later i'd love

00:23:12,559 --> 00:23:17,280
to

00:23:13,679 --> 00:23:20,559
connect and i'd like to

00:23:17,280 --> 00:23:22,320
thank um many people

00:23:20,559 --> 00:23:25,200
as i uh built this stuff i'd like to

00:23:22,320 --> 00:23:28,240
thank gerard he helped me uh set up

00:23:25,200 --> 00:23:30,640
this for mac i'd like to thank stanislaw

00:23:28,240 --> 00:23:32,240
he helped give me some ideas about how

00:23:30,640 --> 00:23:35,440
different people can collaborate

00:23:32,240 --> 00:23:36,240
on uh this project and i'd like to thank

00:23:35,440 --> 00:23:38,320
jesus

00:23:36,240 --> 00:23:39,840
he talked uh we talked a lot about the

00:23:38,320 --> 00:23:43,520
current state of modern

00:23:39,840 --> 00:23:47,039
uh app development cpan testers

00:23:43,520 --> 00:23:50,559
who tested so many of my bugs

00:23:47,039 --> 00:23:51,360
and slavin who sent in detailed bug

00:23:50,559 --> 00:23:53,679
reports

00:23:51,360 --> 00:23:54,720
for those things from cpantester and

00:23:53,679 --> 00:23:58,240
tebow

00:23:54,720 --> 00:24:01,279
for testing all my alien uh

00:23:58,240 --> 00:24:04,559
modules and pearl alien and native

00:24:01,279 --> 00:24:06,320
for uh

00:24:04,559 --> 00:24:08,640
for improvements to the alien build

00:24:06,320 --> 00:24:09,520
project and the gtk pearl mailing list

00:24:08,640 --> 00:24:12,880
for

00:24:09,520 --> 00:24:15,440
being very responsive and i if you want

00:24:12,880 --> 00:24:20,159
to work on gtk i you should join there

00:24:15,440 --> 00:24:22,320
and uh asked questions

00:24:20,159 --> 00:24:23,520
okay so uh this is how you can reach me

00:24:22,320 --> 00:24:26,559
uh

00:24:23,520 --> 00:24:32,799
and feel free to reach out all right

00:24:26,559 --> 00:24:38,320
thank you

00:24:32,799 --> 00:24:38,320
so any uh any questions

00:24:41,520 --> 00:24:45,200
well one or two minute maximum for

00:24:43,200 --> 00:24:46,000
question if there is any otherwise i can

00:24:45,200 --> 00:24:49,279
close this

00:24:46,000 --> 00:24:49,919
station um i had some questions this is

00:24:49,279 --> 00:24:52,720
brett uh

00:24:49,919 --> 00:24:53,360
great work man i i am super interested

00:24:52,720 --> 00:24:55,440
in

00:24:53,360 --> 00:24:56,480
i guess learning all i can about gooey

00:24:55,440 --> 00:24:58,400
tool kits

00:24:56,480 --> 00:25:00,960
uh personally i'm pretty sick of you

00:24:58,400 --> 00:25:03,200
know doing the everything in the browser

00:25:00,960 --> 00:25:05,200
so i've really taken more of a turn

00:25:03,200 --> 00:25:08,159
towards wanting to learn more about

00:25:05,200 --> 00:25:09,279
the gui tool kits and i've been spending

00:25:08,159 --> 00:25:12,480
most of my time

00:25:09,279 --> 00:25:13,279
exploring that using wx widgets but it

00:25:12,480 --> 00:25:16,320
looked like

00:25:13,279 --> 00:25:18,000
you you were using uh gtk uh

00:25:16,320 --> 00:25:20,240
which leads me to believe that that's

00:25:18,000 --> 00:25:22,320
probably more of a modern choice

00:25:20,240 --> 00:25:24,080
is that is that the case and are there

00:25:22,320 --> 00:25:27,440
reasons why you went with that over

00:25:24,080 --> 00:25:28,640
some something else um it's mainly

00:25:27,440 --> 00:25:32,720
because i liked its

00:25:28,640 --> 00:25:35,279
uh architecture uh i

00:25:32,720 --> 00:25:37,520
wx widgets looks like it matches very it

00:25:35,279 --> 00:25:40,640
fits in very well with the native

00:25:37,520 --> 00:25:42,400
uh whatever is available natively but i

00:25:40,640 --> 00:25:44,960
like the architecture of

00:25:42,400 --> 00:25:47,279
uh gtk3 because it was built on several

00:25:44,960 --> 00:25:50,799
different modules like cairo where i can

00:25:47,279 --> 00:25:53,440
uh just use that to do

00:25:50,799 --> 00:25:54,080
my drawing and i can pull in other types

00:25:53,440 --> 00:25:57,840
of

00:25:54,080 --> 00:26:01,600
tools like it has um it has

00:25:57,840 --> 00:26:05,120
a gdk3 works with dbus and

00:26:01,600 --> 00:26:08,559
uh and the accessibility tools of

00:26:05,120 --> 00:26:11,760
gnome um and

00:26:08,559 --> 00:26:13,360
that type of thing so and and i don't

00:26:11,760 --> 00:26:14,720
know if wx widgets has an interface

00:26:13,360 --> 00:26:18,000
builder

00:26:14,720 --> 00:26:21,200
but uh well uh it does

00:26:18,000 --> 00:26:23,200
um i think there's couple actually but

00:26:21,200 --> 00:26:24,559
i haven't really done any significant

00:26:23,200 --> 00:26:27,679
work and to enter

00:26:24,559 --> 00:26:30,400
into either one um and then

00:26:27,679 --> 00:26:31,520
the other question i had was one thing

00:26:30,400 --> 00:26:32,640
that i learned while i was

00:26:31,520 --> 00:26:36,080
well i've been messing around with the

00:26:32,640 --> 00:26:38,720
wx with thing

00:26:36,080 --> 00:26:39,919
is that it can output into this xml

00:26:38,720 --> 00:26:41,520
format i don't know if you

00:26:39,919 --> 00:26:43,120
you mentioned it i think i saw something

00:26:41,520 --> 00:26:46,080
where you mentioned some xml

00:26:43,120 --> 00:26:46,720
but but i'm still trying to figure out

00:26:46,080 --> 00:26:48,799
if that's

00:26:46,720 --> 00:26:50,480
if that's like a wx widget specific

00:26:48,799 --> 00:26:53,840
thing or if that's a

00:26:50,480 --> 00:26:56,960
generic thing that you know other

00:26:53,840 --> 00:27:00,320
either you know builders use

00:26:56,960 --> 00:27:02,880
or framework shoes i think

00:27:00,320 --> 00:27:03,840
most i think most uh toolkits have their

00:27:02,880 --> 00:27:05,440
own

00:27:03,840 --> 00:27:07,360
because it's tightly linked to the

00:27:05,440 --> 00:27:13,039
classes that they use

00:27:07,360 --> 00:27:13,039

YouTube URL: https://www.youtube.com/watch?v=En49kYRDbsg


